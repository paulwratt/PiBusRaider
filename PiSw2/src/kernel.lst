
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea007fc4 	b	27f78 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e92d4010 	push	{r4, lr}
    806c:	e24ddc67 	sub	sp, sp, #26368	; 0x6700
    8070:	e24dd098 	sub	sp, sp, #152	; 0x98
    8074:	e28d3008 	add	r3, sp, #8
    8078:	e1a00003 	mov	r0, r3
    807c:	e58d3004 	str	r3, [sp, #4]
    8080:	eb00000e 	bl	80c0 <CKernel::CKernel()>
    8084:	e59d0004 	ldr	r0, [sp, #4]
    8088:	eb000081 	bl	8294 <CKernel::Initialize()>
    808c:	e2504000 	subs	r4, r0, #0
    8090:	0a000004 	beq	80a8 <main+0x40>
    8094:	e59d0004 	ldr	r0, [sp, #4]
    8098:	eb0000c5 	bl	83b4 <CKernel::Run()>
    809c:	e2404002 	sub	r4, r0, #2
    80a0:	e16f4f14 	clz	r4, r4
    80a4:	e1a042a4 	lsr	r4, r4, #5
    80a8:	e59d0004 	ldr	r0, [sp, #4]
    80ac:	eb000051 	bl	81f8 <CKernel::~CKernel()>
    80b0:	e1a00004 	mov	r0, r4
    80b4:	e28ddc67 	add	sp, sp, #26368	; 0x6700
    80b8:	e28dd098 	add	sp, sp, #152	; 0x98
    80bc:	e8bd8010 	pop	{r4, pc}

000080c0 <CKernel::CKernel()>:
    80c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    80c4:	e1a04000 	mov	r4, r0
    80c8:	e24dd010 	sub	sp, sp, #16
    80cc:	e3a01001 	mov	r1, #1
    80d0:	eb0089c4 	bl	2a7e8 <CMemorySystem::CMemorySystem(bool)>
    80d4:	e28480e8 	add	r8, r4, #232	; 0xe8
    80d8:	e3a01000 	mov	r1, #0
    80dc:	e28400dc 	add	r0, r4, #220	; 0xdc
    80e0:	eb006d0a 	bl	23510 <CActLED::CActLED(bool)>
    80e4:	e2846d25 	add	r6, r4, #2368	; 0x940
    80e8:	e1a00008 	mov	r0, r8
    80ec:	eb007438 	bl	251d4 <CKernelOptions::CKernelOptions()>
    80f0:	e2860004 	add	r0, r6, #4
    80f4:	eb006f56 	bl	23e54 <CDeviceNameService::CDeviceNameService()>
    80f8:	e1a00008 	mov	r0, r8
    80fc:	eb0073f9 	bl	250e8 <CKernelOptions::GetWidth() const>
    8100:	e1a07000 	mov	r7, r0
    8104:	e1a00008 	mov	r0, r8
    8108:	eb0073f8 	bl	250f0 <CKernelOptions::GetHeight() const>
    810c:	e2845e9d 	add	r5, r4, #2512	; 0x9d0
    8110:	e1a02000 	mov	r2, r0
    8114:	e1a01007 	mov	r1, r7
    8118:	e3a03000 	mov	r3, #0
    811c:	e286000c 	add	r0, r6, #12
    8120:	eb008f70 	bl	2bee8 <FastScreen::FastScreen(unsigned int, unsigned int, bool)>
    8124:	e2857004 	add	r7, r5, #4
    8128:	e1a00005 	mov	r0, r5
    812c:	eb0088b3 	bl	2a400 <CExceptionHandler::CExceptionHandler()>
    8130:	e1a00007 	mov	r0, r7
    8134:	eb008af8 	bl	2ad1c <CInterruptSystem::CInterruptSystem()>
    8138:	e3a03000 	mov	r3, #0
    813c:	e2846ec1 	add	r6, r4, #3088	; 0xc10
    8140:	e2866004 	add	r6, r6, #4
    8144:	e284ac5b 	add	sl, r4, #23296	; 0x5b00
    8148:	e1a02003 	mov	r2, r3
    814c:	e28a9044 	add	r9, sl, #68	; 0x44
    8150:	e1a01007 	mov	r1, r7
    8154:	e1a00006 	mov	r0, r6
    8158:	e1a05003 	mov	r5, r3
    815c:	eb0093fe 	bl	2d15c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8160:	e1a01007 	mov	r1, r7
    8164:	e1a00009 	mov	r0, r9
    8168:	eb007fc4 	bl	28080 <CTimer::CTimer(CInterruptSystem*)>
    816c:	e1a00008 	mov	r0, r8
    8170:	eb0073e3 	bl	25104 <CKernelOptions::GetLogLevel() const>
    8174:	e2848b17 	add	r8, r4, #23552	; 0x5c00
    8178:	e1a02009 	mov	r2, r9
    817c:	e1a01000 	mov	r1, r0
    8180:	e28a0080 	add	r0, sl, #128	; 0x80
    8184:	eb007528 	bl	2562c <CLogger::CLogger(unsigned int, CTimer*)>
    8188:	e1a02009 	mov	r2, r9
    818c:	e1a01007 	mov	r1, r7
    8190:	e2880078 	add	r0, r8, #120	; 0x78
    8194:	eb00010e 	bl	85d4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>
    8198:	e28800fc 	add	r0, r8, #252	; 0xfc
    819c:	eb006b0f 	bl	22de0 <CScheduler::CScheduler()>
    81a0:	e59fc048 	ldr	ip, [pc, #72]	; 81f0 <CKernel::CKernel()+0x130>
    81a4:	e2840c5d 	add	r0, r4, #23808	; 0x5d00
    81a8:	e1a03005 	mov	r3, r5
    81ac:	e1a02005 	mov	r2, r5
    81b0:	e1a01005 	mov	r1, r5
    81b4:	e58dc004 	str	ip, [sp, #4]
    81b8:	e58d5008 	str	r5, [sp, #8]
    81bc:	e58d5000 	str	r5, [sp]
    81c0:	e2800060 	add	r0, r0, #96	; 0x60
    81c4:	eb0040af 	bl	18488 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>
    81c8:	e2840c5e 	add	r0, r4, #24064	; 0x5e00
    81cc:	e1a01006 	mov	r1, r6
    81d0:	e1a02005 	mov	r2, r5
    81d4:	e280008c 	add	r0, r0, #140	; 0x8c
    81d8:	eb0098ab 	bl	2e48c <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)>
    81dc:	e1a00004 	mov	r0, r4
    81e0:	e59f300c 	ldr	r3, [pc, #12]	; 81f4 <CKernel::CKernel()+0x134>
    81e4:	e5834000 	str	r4, [r3]
    81e8:	e28dd010 	add	sp, sp, #16
    81ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    81f0:	00034558 	.word	0x00034558
    81f4:	0003e350 	.word	0x0003e350

000081f8 <CKernel::~CKernel()>:
    81f8:	e92d4070 	push	{r4, r5, r6, lr}
    81fc:	e1a04000 	mov	r4, r0
    8200:	e2800c5e 	add	r0, r0, #24064	; 0x5e00
    8204:	e280008c 	add	r0, r0, #140	; 0x8c
    8208:	eb0098b8 	bl	2e4f0 <CommsManager::~CommsManager()>
    820c:	e2840c5d 	add	r0, r4, #23808	; 0x5d00
    8210:	e2846b17 	add	r6, r4, #23552	; 0x5c00
    8214:	e2800060 	add	r0, r0, #96	; 0x60
    8218:	eb004164 	bl	187b0 <CNetSubSystem::~CNetSubSystem()>
    821c:	e28600fc 	add	r0, r6, #252	; 0xfc
    8220:	e2845c5b 	add	r5, r4, #23296	; 0x5b00
    8224:	eb006b09 	bl	22e50 <CScheduler::~CScheduler()>
    8228:	e2860078 	add	r0, r6, #120	; 0x78
    822c:	eb00099e 	bl	a8ac <CDWHCIDevice::~CDWHCIDevice()>
    8230:	e2850080 	add	r0, r5, #128	; 0x80
    8234:	eb007512 	bl	25684 <CLogger::~CLogger()>
    8238:	e2850044 	add	r0, r5, #68	; 0x44
    823c:	eb007fb0 	bl	28104 <CTimer::~CTimer()>
    8240:	e2840ec1 	add	r0, r4, #3088	; 0xc10
    8244:	e2845e9d 	add	r5, r4, #2512	; 0x9d0
    8248:	e2800004 	add	r0, r0, #4
    824c:	eb009446 	bl	2d36c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>
    8250:	e2850004 	add	r0, r5, #4
    8254:	eb008abe 	bl	2ad54 <CInterruptSystem::~CInterruptSystem()>
    8258:	e1a00005 	mov	r0, r5
    825c:	e2845d25 	add	r5, r4, #2368	; 0x940
    8260:	eb008889 	bl	2a48c <CExceptionHandler::~CExceptionHandler()>
    8264:	e285000c 	add	r0, r5, #12
    8268:	eb008f40 	bl	2bf70 <FastScreen::~FastScreen()>
    826c:	e2850004 	add	r0, r5, #4
    8270:	eb006f08 	bl	23e98 <CDeviceNameService::~CDeviceNameService()>
    8274:	e28400e8 	add	r0, r4, #232	; 0xe8
    8278:	eb007395 	bl	250d4 <CKernelOptions::~CKernelOptions()>
    827c:	e28400dc 	add	r0, r4, #220	; 0xdc
    8280:	eb006cc8 	bl	235a8 <CActLED::~CActLED()>
    8284:	e1a00004 	mov	r0, r4
    8288:	eb0089a3 	bl	2a91c <CMemorySystem::~CMemorySystem()>
    828c:	e1a00004 	mov	r0, r4
    8290:	e8bd8070 	pop	{r4, r5, r6, pc}

00008294 <CKernel::Initialize()>:
    8294:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8298:	e1a04000 	mov	r4, r0
    829c:	e2800e9d 	add	r0, r0, #2512	; 0x9d0
    82a0:	e24dd00c 	sub	sp, sp, #12
    82a4:	e2800004 	add	r0, r0, #4
    82a8:	eb008ab8 	bl	2ad90 <CInterruptSystem::Initialize()>
    82ac:	e3500000 	cmp	r0, #0
    82b0:	1a000002 	bne	82c0 <CKernel::Initialize()+0x2c>
    82b4:	e3a00000 	mov	r0, #0
    82b8:	e28dd00c 	add	sp, sp, #12
    82bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    82c0:	e2845d25 	add	r5, r4, #2368	; 0x940
    82c4:	e285700c 	add	r7, r5, #12
    82c8:	e1a00007 	mov	r0, r7
    82cc:	eb008f4f 	bl	2c010 <FastScreen::Initialize()>
    82d0:	e3500000 	cmp	r0, #0
    82d4:	0afffff6 	beq	82b4 <CKernel::Initialize()+0x20>
    82d8:	e28400e8 	add	r0, r4, #232	; 0xe8
    82dc:	eb007385 	bl	250f8 <CKernelOptions::GetLogDevice() const>
    82e0:	e3a02000 	mov	r2, #0
    82e4:	e1a01000 	mov	r1, r0
    82e8:	e2850004 	add	r0, r5, #4
    82ec:	eb006f7b 	bl	240e0 <CDeviceNameService::GetDevice(char const*, bool)>
    82f0:	e2845c5b 	add	r5, r4, #23296	; 0x5b00
    82f4:	e3500000 	cmp	r0, #0
    82f8:	e2856080 	add	r6, r5, #128	; 0x80
    82fc:	11a01000 	movne	r1, r0
    8300:	01a01007 	moveq	r1, r7
    8304:	e1a00006 	mov	r0, r6
    8308:	eb0074fa 	bl	256f8 <CLogger::Initialize(CDevice*)>
    830c:	e3500000 	cmp	r0, #0
    8310:	0affffe7 	beq	82b4 <CKernel::Initialize()+0x20>
    8314:	e59f3088 	ldr	r3, [pc, #136]	; 83a4 <CKernel::Initialize()+0x110>
    8318:	e1a00006 	mov	r0, r6
    831c:	e5932000 	ldr	r2, [r3]
    8320:	e59f1080 	ldr	r1, [pc, #128]	; 83a8 <CKernel::Initialize()+0x114>
    8324:	e59f3080 	ldr	r3, [pc, #128]	; 83ac <CKernel::Initialize()+0x118>
    8328:	e58d2000 	str	r2, [sp]
    832c:	e3a02003 	mov	r2, #3
    8330:	eb007502 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8334:	e59f3074 	ldr	r3, [pc, #116]	; 83b0 <CKernel::Initialize()+0x11c>
    8338:	e2840ec1 	add	r0, r4, #3088	; 0xc10
    833c:	e1a02003 	mov	r2, r3
    8340:	e2800004 	add	r0, r0, #4
    8344:	e3a01ae1 	mov	r1, #921600	; 0xe1000
    8348:	eb009470 	bl	2d510 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)>
    834c:	e3500000 	cmp	r0, #0
    8350:	0affffd7 	beq	82b4 <CKernel::Initialize()+0x20>
    8354:	e2850044 	add	r0, r5, #68	; 0x44
    8358:	eb008213 	bl	28bac <CTimer::Initialize()>
    835c:	e3500000 	cmp	r0, #0
    8360:	0affffd3 	beq	82b4 <CKernel::Initialize()+0x20>
    8364:	e2840b17 	add	r0, r4, #23552	; 0x5c00
    8368:	e2800078 	add	r0, r0, #120	; 0x78
    836c:	eb0009b3 	bl	aa40 <CDWHCIDevice::Initialize()>
    8370:	e3500000 	cmp	r0, #0
    8374:	0affffce 	beq	82b4 <CKernel::Initialize()+0x20>
    8378:	e2840c5d 	add	r0, r4, #23808	; 0x5d00
    837c:	e2800060 	add	r0, r0, #96	; 0x60
    8380:	e3a01001 	mov	r1, #1
    8384:	eb0040b4 	bl	1865c <CNetSubSystem::Initialize(bool)>
    8388:	e3500000 	cmp	r0, #0
    838c:	0affffc8 	beq	82b4 <CKernel::Initialize()+0x20>
    8390:	e2840c5e 	add	r0, r4, #24064	; 0x5e00
    8394:	e280008c 	add	r0, r0, #140	; 0x8c
    8398:	e28dd00c 	add	sp, sp, #12
    839c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    83a0:	ea009857 	b	2e504 <CommsManager::setup()>
    83a4:	0003deb4 	.word	0x0003deb4
    83a8:	00034580 	.word	0x00034580
    83ac:	00034564 	.word	0x00034564
    83b0:	000f4240 	.word	0x000f4240

000083b4 <CKernel::Run()>:
    83b4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    83b8:	e1a08000 	mov	r8, r0
    83bc:	e2809c5b 	add	r9, r0, #23296	; 0x5b00
    83c0:	e2899080 	add	r9, r9, #128	; 0x80
    83c4:	e24dd01c 	sub	sp, sp, #28
    83c8:	e59f312c 	ldr	r3, [pc, #300]	; 84fc <CKernel::Run()+0x148>
    83cc:	e3a02003 	mov	r2, #3
    83d0:	e59f1128 	ldr	r1, [pc, #296]	; 8500 <CKernel::Run()+0x14c>
    83d4:	e1a00009 	mov	r0, r9
    83d8:	e2884c5d 	add	r4, r8, #23808	; 0x5d00
    83dc:	eb0074d7 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    83e0:	e2844060 	add	r4, r4, #96	; 0x60
    83e4:	e28d0008 	add	r0, sp, #8
    83e8:	eb00797d 	bl	269e4 <CString::CString()>
    83ec:	e1a00004 	mov	r0, r4
    83f0:	eb004081 	bl	185fc <CNetSubSystem::GetConfig()>
    83f4:	eb005da8 	bl	1fa9c <CNetConfig::GetIPAddress() const>
    83f8:	e28d1008 	add	r1, sp, #8
    83fc:	eb005f00 	bl	20004 <CIPAddress::Format(CString*) const>
    8400:	e28d0008 	add	r0, sp, #8
    8404:	eb00798c 	bl	26a3c <CString::operator char const*() const>
    8408:	e59f60f4 	ldr	r6, [pc, #244]	; 8504 <CKernel::Run()+0x150>
    840c:	e59f30f4 	ldr	r3, [pc, #244]	; 8508 <CKernel::Run()+0x154>
    8410:	e88d0041 	stm	sp, {r0, r6}
    8414:	e3a02003 	mov	r2, #3
    8418:	e59f10e0 	ldr	r1, [pc, #224]	; 8500 <CKernel::Run()+0x14c>
    841c:	e1a00009 	mov	r0, r9
    8420:	eb0074c6 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8424:	e28d0008 	add	r0, sp, #8
    8428:	eb007983 	bl	26a3c <CString::operator char const*() const>
    842c:	e3a05000 	mov	r5, #0
    8430:	e59f30d4 	ldr	r3, [pc, #212]	; 850c <CKernel::Run()+0x158>
    8434:	e3a02003 	mov	r2, #3
    8438:	e59f10c0 	ldr	r1, [pc, #192]	; 8500 <CKernel::Run()+0x14c>
    843c:	e58d0000 	str	r0, [sp]
    8440:	e1a00009 	mov	r0, r9
    8444:	eb0074bd 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8448:	e59f00c0 	ldr	r0, [pc, #192]	; 8510 <CKernel::Run()+0x15c>
    844c:	eb0086a8 	bl	29ef4 <operator new(unsigned int)>
    8450:	e1a02006 	mov	r2, r6
    8454:	e1a01004 	mov	r1, r4
    8458:	e59f30b4 	ldr	r3, [pc, #180]	; 8514 <CKernel::Run()+0x160>
    845c:	e58d5000 	str	r5, [sp]
    8460:	eb009eb6 	bl	2ff40 <CHTTPBootServer::CHTTPBootServer(CNetSubSystem*, unsigned short, unsigned int, CSocket*)>
    8464:	e3a000f8 	mov	r0, #248	; 0xf8
    8468:	eb0086a1 	bl	29ef4 <operator new(unsigned int)>
    846c:	e1a07005 	mov	r7, r5
    8470:	e1a01004 	mov	r1, r4
    8474:	e3a02602 	mov	r2, #2097152	; 0x200000
    8478:	e2885d25 	add	r5, r8, #2368	; 0x940
    847c:	e2884c5e 	add	r4, r8, #24064	; 0x5e00
    8480:	eb00a062 	bl	30610 <CTFTPBootServer::CTFTPBootServer(CNetSubSystem*, unsigned int)>
    8484:	e59f608c 	ldr	r6, [pc, #140]	; 8518 <CKernel::Run()+0x164>
    8488:	e285500c 	add	r5, r5, #12
    848c:	e284408c 	add	r4, r4, #140	; 0x8c
    8490:	ea000008 	b	84b8 <CKernel::Run()+0x104>
    8494:	eb0096e1 	bl	2e020 <micros>
    8498:	e1a022a0 	lsr	r2, r0, #5
    849c:	e0823296 	umull	r3, r2, r6, r2
    84a0:	e1a00005 	mov	r0, r5
    84a4:	e1a01007 	mov	r1, r7
    84a8:	e1a023a2 	lsr	r2, r2, #7
    84ac:	eb0092d4 	bl	2d004 <FastScreen::Rotor(unsigned int, unsigned int)>
    84b0:	e1a00004 	mov	r0, r4
    84b4:	eb009859 	bl	2e620 <CommsManager::service()>
    84b8:	eb00859a 	bl	29b28 <IsChainBootEnabled>
    84bc:	e3500000 	cmp	r0, #0
    84c0:	0afffff3 	beq	8494 <CKernel::Run()+0xe0>
    84c4:	e59f3050 	ldr	r3, [pc, #80]	; 851c <CKernel::Run()+0x168>
    84c8:	e3a02003 	mov	r2, #3
    84cc:	e1a00009 	mov	r0, r9
    84d0:	e59f1028 	ldr	r1, [pc, #40]	; 8500 <CKernel::Run()+0x14c>
    84d4:	eb007499 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    84d8:	e2880b17 	add	r0, r8, #23552	; 0x5c00
    84dc:	e3a01001 	mov	r1, #1
    84e0:	e28000fc 	add	r0, r0, #252	; 0xfc
    84e4:	eb006b7d 	bl	232e0 <CScheduler::Sleep(unsigned int)>
    84e8:	e28d0008 	add	r0, sp, #8
    84ec:	eb007909 	bl	26918 <CString::~CString()>
    84f0:	e3a00002 	mov	r0, #2
    84f4:	e28dd01c 	add	sp, sp, #28
    84f8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    84fc:	00034594 	.word	0x00034594
    8500:	00034548 	.word	0x00034548
    8504:	00001f90 	.word	0x00001f90
    8508:	000345b8 	.word	0x000345b8
    850c:	000345e4 	.word	0x000345e4
    8510:	00001978 	.word	0x00001978
    8514:	002007d0 	.word	0x002007d0
    8518:	0a7c5ac5 	.word	0x0a7c5ac5
    851c:	00034628 	.word	0x00034628

00008520 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    8520:	e3520000 	cmp	r2, #0
    8524:	e92d4010 	push	{r4, lr}
    8528:	0a000005 	beq	8544 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x24>
    852c:	e351000f 	cmp	r1, #15
    8530:	8a000007 	bhi	8554 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x34>
    8534:	e3a03000 	mov	r3, #0
    8538:	e0822001 	add	r2, r2, r1
    853c:	e5c2305c 	strb	r3, [r2, #92]	; 0x5c
    8540:	e8bd8010 	pop	{r4, pc}
    8544:	e59f2018 	ldr	r2, [pc, #24]	; 8564 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x44>
    8548:	e59f1018 	ldr	r1, [pc, #24]	; 8568 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    854c:	e59f0018 	ldr	r0, [pc, #24]	; 856c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x4c>
    8550:	eb006c4a 	bl	23680 <assertion_failed>
    8554:	e59f2014 	ldr	r2, [pc, #20]	; 8570 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x50>
    8558:	e59f1008 	ldr	r1, [pc, #8]	; 8568 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    855c:	e59f0010 	ldr	r0, [pc, #16]	; 8574 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x54>
    8560:	eb006c46 	bl	23680 <assertion_failed>
    8564:	000002ab 	.word	0x000002ab
    8568:	0003465c 	.word	0x0003465c
    856c:	0003466c 	.word	0x0003466c
    8570:	000002ae 	.word	0x000002ae
    8574:	00034678 	.word	0x00034678

00008578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>:
    8578:	e92d4030 	push	{r4, r5, lr}
    857c:	e24dd01c 	sub	sp, sp, #28
    8580:	e1a05000 	mov	r5, r0
    8584:	e28d000c 	add	r0, sp, #12
    8588:	eb000c3e 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    858c:	e3a03000 	mov	r3, #0
    8590:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8594:	eb00752c 	bl	25a4c <CLogger::Get()>
    8598:	e1a04000 	mov	r4, r0
    859c:	e28d000c 	add	r0, sp, #12
    85a0:	eb000c41 	bl	b6ac <CDWHCIRegister::Read()>
    85a4:	e59f3020 	ldr	r3, [pc, #32]	; 85cc <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]+0x54>
    85a8:	e88d0021 	stm	sp, {r0, r5}
    85ac:	e3a02004 	mov	r2, #4
    85b0:	e1a00004 	mov	r0, r4
    85b4:	e59f1014 	ldr	r1, [pc, #20]	; 85d0 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]+0x58>
    85b8:	eb007460 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    85bc:	e28d000c 	add	r0, sp, #12
    85c0:	eb000c38 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    85c4:	e28dd01c 	add	sp, sp, #28
    85c8:	e8bd8030 	pop	{r4, r5, pc}
    85cc:	00034698 	.word	0x00034698
    85d0:	00034638 	.word	0x00034638

000085d4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>:
    85d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    85d8:	e1a04000 	mov	r4, r0
    85dc:	e3a05000 	mov	r5, #0
    85e0:	e1a07001 	mov	r7, r1
    85e4:	e1a06002 	mov	r6, r2
    85e8:	eb002323 	bl	1127c <CUSBHostController::CUSBHostController()>
    85ec:	e3a03001 	mov	r3, #1
    85f0:	e59f00a8 	ldr	r0, [pc, #168]	; 86a0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xcc>
    85f4:	e5845010 	str	r5, [r4, #16]
    85f8:	e5840000 	str	r0, [r4]
    85fc:	e5843014 	str	r3, [r4, #20]
    8600:	e5843058 	str	r3, [r4, #88]	; 0x58
    8604:	e5847004 	str	r7, [r4, #4]
    8608:	e5846008 	str	r6, [r4, #8]
    860c:	e584500c 	str	r5, [r4, #12]
    8610:	e584506c 	str	r5, [r4, #108]	; 0x6c
    8614:	e5845070 	str	r5, [r4, #112]	; 0x70
    8618:	e1a01004 	mov	r1, r4
    861c:	e2840074 	add	r0, r4, #116	; 0x74
    8620:	eb000d0c 	bl	ba58 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    8624:	e5943004 	ldr	r3, [r4, #4]
    8628:	e5c45080 	strb	r5, [r4, #128]	; 0x80
    862c:	e1530005 	cmp	r3, r5
    8630:	e5c45081 	strb	r5, [r4, #129]	; 0x81
    8634:	0a000011 	beq	8680 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xac>
    8638:	e5943008 	ldr	r3, [r4, #8]
    863c:	e3530000 	cmp	r3, #0
    8640:	11a02005 	movne	r2, r5
    8644:	12843014 	addne	r3, r4, #20
    8648:	12841054 	addne	r1, r4, #84	; 0x54
    864c:	0a00000f 	beq	8690 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xbc>
    8650:	e5a32004 	str	r2, [r3, #4]!
    8654:	e1510003 	cmp	r1, r3
    8658:	1afffffc 	bne	8650 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x7c>
    865c:	e3a03000 	mov	r3, #0
    8660:	e1a01003 	mov	r1, r3
    8664:	e0842003 	add	r2, r4, r3
    8668:	e2833001 	add	r3, r3, #1
    866c:	e3530010 	cmp	r3, #16
    8670:	e5c2105c 	strb	r1, [r2, #92]	; 0x5c
    8674:	1afffffa 	bne	8664 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x90>
    8678:	e1a00004 	mov	r0, r4
    867c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8680:	e3a0204b 	mov	r2, #75	; 0x4b
    8684:	e59f1018 	ldr	r1, [pc, #24]	; 86a4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    8688:	e59f0018 	ldr	r0, [pc, #24]	; 86a8 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd4>
    868c:	eb006bfb 	bl	23680 <assertion_failed>
    8690:	e3a0204c 	mov	r2, #76	; 0x4c
    8694:	e59f1008 	ldr	r1, [pc, #8]	; 86a4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    8698:	e59f000c 	ldr	r0, [pc, #12]	; 86ac <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd8>
    869c:	eb006bf7 	bl	23680 <assertion_failed>
    86a0:	00034648 	.word	0x00034648
    86a4:	0003465c 	.word	0x0003465c
    86a8:	000346a4 	.word	0x000346a4
    86ac:	000346bc 	.word	0x000346bc

000086b0 <CDWHCIDevice::GetPortSpeed()>:
    86b0:	e92d4010 	push	{r4, lr}
    86b4:	e24dd010 	sub	sp, sp, #16
    86b8:	e59f103c 	ldr	r1, [pc, #60]	; 86fc <CDWHCIDevice::GetPortSpeed()+0x4c>
    86bc:	e28d0004 	add	r0, sp, #4
    86c0:	eb000bf0 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    86c4:	e28d0004 	add	r0, sp, #4
    86c8:	eb000bf7 	bl	b6ac <CDWHCIRegister::Read()>
    86cc:	e1a008a0 	lsr	r0, r0, #17
    86d0:	e2000003 	and	r0, r0, #3
    86d4:	e3500003 	cmp	r0, #3
    86d8:	03a04004 	moveq	r4, #4
    86dc:	159f301c 	ldrne	r3, [pc, #28]	; 8700 <CDWHCIDevice::GetPortSpeed()+0x50>
    86e0:	10830000 	addne	r0, r3, r0
    86e4:	15d04020 	ldrbne	r4, [r0, #32]
    86e8:	e28d0004 	add	r0, sp, #4
    86ec:	eb000bed 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    86f0:	e1a00004 	mov	r0, r4
    86f4:	e28dd010 	add	sp, sp, #16
    86f8:	e8bd8010 	pop	{r4, pc}
    86fc:	20980440 	.word	0x20980440
    8700:	00034638 	.word	0x00034638

00008704 <CDWHCIDevice::OvercurrentDetected()>:
    8704:	e92d4010 	push	{r4, lr}
    8708:	e24dd010 	sub	sp, sp, #16
    870c:	e59f1028 	ldr	r1, [pc, #40]	; 873c <CDWHCIDevice::OvercurrentDetected()+0x38>
    8710:	e28d0004 	add	r0, sp, #4
    8714:	eb000bdb 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8718:	e28d0004 	add	r0, sp, #4
    871c:	eb000be2 	bl	b6ac <CDWHCIRegister::Read()>
    8720:	e1a04000 	mov	r4, r0
    8724:	e28d0004 	add	r0, sp, #4
    8728:	eb000bde 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    872c:	e1a00224 	lsr	r0, r4, #4
    8730:	e2000001 	and	r0, r0, #1
    8734:	e28dd010 	add	sp, sp, #16
    8738:	e8bd8010 	pop	{r4, pc}
    873c:	20980440 	.word	0x20980440

00008740 <CDWHCIDevice::DisableRootPort(bool)>:
    8740:	e3a03000 	mov	r3, #0
    8744:	e92d4010 	push	{r4, lr}
    8748:	e1a04001 	mov	r4, r1
    874c:	e24dd010 	sub	sp, sp, #16
    8750:	e5c03080 	strb	r3, [r0, #128]	; 0x80
    8754:	e59f1044 	ldr	r1, [pc, #68]	; 87a0 <CDWHCIDevice::DisableRootPort(bool)+0x60>
    8758:	e28d0004 	add	r0, sp, #4
    875c:	eb000bc9 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8760:	e28d0004 	add	r0, sp, #4
    8764:	eb000bd0 	bl	b6ac <CDWHCIRegister::Read()>
    8768:	e28d0004 	add	r0, sp, #4
    876c:	e3e01004 	mvn	r1, #4
    8770:	eb000c01 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    8774:	e3540000 	cmp	r4, #0
    8778:	0a000002 	beq	8788 <CDWHCIDevice::DisableRootPort(bool)+0x48>
    877c:	e3e01a01 	mvn	r1, #4096	; 0x1000
    8780:	e28d0004 	add	r0, sp, #4
    8784:	eb000bfc 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    8788:	e28d0004 	add	r0, sp, #4
    878c:	eb000bcd 	bl	b6c8 <CDWHCIRegister::Write()>
    8790:	e28d0004 	add	r0, sp, #4
    8794:	eb000bc3 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    8798:	e28dd010 	add	sp, sp, #16
    879c:	e8bd8010 	pop	{r4, pc}
    87a0:	20980440 	.word	0x20980440

000087a4 <CDWHCIDevice::PowerOn()>:
    87a4:	e3a01000 	mov	r1, #0
    87a8:	e92d4030 	push	{r4, r5, lr}
    87ac:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    87b0:	e28d000c 	add	r0, sp, #12
    87b4:	e1a05001 	mov	r5, r1
    87b8:	eb006bd1 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    87bc:	e3a03014 	mov	r3, #20
    87c0:	e3a0c003 	mov	ip, #3
    87c4:	e28d000c 	add	r0, sp, #12
    87c8:	e58d5000 	str	r5, [sp]
    87cc:	e08d2003 	add	r2, sp, r3
    87d0:	e59f1034 	ldr	r1, [pc, #52]	; 880c <CDWHCIDevice::PowerOn()+0x68>
    87d4:	e58dc020 	str	ip, [sp, #32]
    87d8:	e58dc024 	str	ip, [sp, #36]	; 0x24
    87dc:	eb006bd4 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    87e0:	e2504000 	subs	r4, r0, #0
    87e4:	0a000003 	beq	87f8 <CDWHCIDevice::PowerOn()+0x54>
    87e8:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    87ec:	e3140002 	tst	r4, #2
    87f0:	11a04005 	movne	r4, r5
    87f4:	02044001 	andeq	r4, r4, #1
    87f8:	e28d000c 	add	r0, sp, #12
    87fc:	eb006bc7 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
    8800:	e1a00004 	mov	r0, r4
    8804:	e28dd02c 	add	sp, sp, #44	; 0x2c
    8808:	e8bd8030 	pop	{r4, r5, pc}
    880c:	00028001 	.word	0x00028001

00008810 <CDWHCIDevice::EnableGlobalInterrupts()>:
    8810:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8814:	e24dd014 	sub	sp, sp, #20
    8818:	e59f1030 	ldr	r1, [pc, #48]	; 8850 <CDWHCIDevice::EnableGlobalInterrupts()+0x40>
    881c:	e28d0004 	add	r0, sp, #4
    8820:	eb000b98 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8824:	e28d0004 	add	r0, sp, #4
    8828:	eb000b9f 	bl	b6ac <CDWHCIRegister::Read()>
    882c:	e3a01001 	mov	r1, #1
    8830:	e28d0004 	add	r0, sp, #4
    8834:	eb000bde 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8838:	e28d0004 	add	r0, sp, #4
    883c:	eb000ba1 	bl	b6c8 <CDWHCIRegister::Write()>
    8840:	e28d0004 	add	r0, sp, #4
    8844:	eb000b97 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    8848:	e28dd014 	add	sp, sp, #20
    884c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8850:	20980008 	.word	0x20980008

00008854 <CDWHCIDevice::EnableCommonInterrupts()>:
    8854:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8858:	e24dd014 	sub	sp, sp, #20
    885c:	e59f1024 	ldr	r1, [pc, #36]	; 8888 <CDWHCIDevice::EnableCommonInterrupts()+0x34>
    8860:	e28d0004 	add	r0, sp, #4
    8864:	eb000b87 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8868:	e28d0004 	add	r0, sp, #4
    886c:	eb000c0f 	bl	b8b0 <CDWHCIRegister::SetAll()>
    8870:	e28d0004 	add	r0, sp, #4
    8874:	eb000b93 	bl	b6c8 <CDWHCIRegister::Write()>
    8878:	e28d0004 	add	r0, sp, #4
    887c:	eb000b89 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    8880:	e28dd014 	add	sp, sp, #20
    8884:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8888:	20980014 	.word	0x20980014

0000888c <CDWHCIDevice::EnableHostInterrupts()>:
    888c:	e92d4010 	push	{r4, lr}
    8890:	e1a04000 	mov	r4, r0
    8894:	e24dd010 	sub	sp, sp, #16
    8898:	e3a02000 	mov	r2, #0
    889c:	e59f1040 	ldr	r1, [pc, #64]	; 88e4 <CDWHCIDevice::EnableHostInterrupts()+0x58>
    88a0:	e28d0004 	add	r0, sp, #4
    88a4:	eb000b7b 	bl	b698 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    88a8:	e28d0004 	add	r0, sp, #4
    88ac:	eb000b85 	bl	b6c8 <CDWHCIRegister::Write()>
    88b0:	e1a00004 	mov	r0, r4
    88b4:	ebffffe6 	bl	8854 <CDWHCIDevice::EnableCommonInterrupts()>
    88b8:	e28d0004 	add	r0, sp, #4
    88bc:	eb000b7a 	bl	b6ac <CDWHCIRegister::Read()>
    88c0:	e3a01402 	mov	r1, #33554432	; 0x2000000
    88c4:	e28d0004 	add	r0, sp, #4
    88c8:	eb000bb9 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    88cc:	e28d0004 	add	r0, sp, #4
    88d0:	eb000b7c 	bl	b6c8 <CDWHCIRegister::Write()>
    88d4:	e28d0004 	add	r0, sp, #4
    88d8:	eb000b72 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    88dc:	e28dd010 	add	sp, sp, #16
    88e0:	e8bd8010 	pop	{r4, pc}
    88e4:	20980018 	.word	0x20980018

000088e8 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    88e8:	e92d4030 	push	{r4, r5, lr}
    88ec:	e1a04000 	mov	r4, r0
    88f0:	e24dd014 	sub	sp, sp, #20
    88f4:	e1a05001 	mov	r5, r1
    88f8:	e28d0004 	add	r0, sp, #4
    88fc:	e59f1054 	ldr	r1, [pc, #84]	; 8958 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x70>
    8900:	eb000b60 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8904:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    8908:	e3500000 	cmp	r0, #0
    890c:	1a00000f 	bne	8950 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x68>
    8910:	e28d0004 	add	r0, sp, #4
    8914:	eb000b64 	bl	b6ac <CDWHCIRegister::Read()>
    8918:	e3a01001 	mov	r1, #1
    891c:	e28d0004 	add	r0, sp, #4
    8920:	e1a01511 	lsl	r1, r1, r5
    8924:	eb000ba2 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8928:	e28d0004 	add	r0, sp, #4
    892c:	eb000b65 	bl	b6c8 <CDWHCIRegister::Write()>
    8930:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    8934:	e3530000 	cmp	r3, #0
    8938:	0a000000 	beq	8940 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x58>
    893c:	eb0088c9 	bl	2ac68 <LeaveCritical>
    8940:	e28d0004 	add	r0, sp, #4
    8944:	eb000b57 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    8948:	e28dd014 	add	sp, sp, #20
    894c:	e8bd8030 	pop	{r4, r5, pc}
    8950:	eb008899 	bl	2abbc <EnterCritical>
    8954:	eaffffed 	b	8910 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x28>
    8958:	20980418 	.word	0x20980418

0000895c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    895c:	e92d4030 	push	{r4, r5, lr}
    8960:	e1a04000 	mov	r4, r0
    8964:	e24dd014 	sub	sp, sp, #20
    8968:	e1a05001 	mov	r5, r1
    896c:	e28d0004 	add	r0, sp, #4
    8970:	e59f1054 	ldr	r1, [pc, #84]	; 89cc <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x70>
    8974:	eb000b43 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8978:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    897c:	e3500000 	cmp	r0, #0
    8980:	1a00000f 	bne	89c4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x68>
    8984:	e28d0004 	add	r0, sp, #4
    8988:	eb000b47 	bl	b6ac <CDWHCIRegister::Read()>
    898c:	e3a01001 	mov	r1, #1
    8990:	e28d0004 	add	r0, sp, #4
    8994:	e1e01511 	mvn	r1, r1, lsl r5
    8998:	eb000b77 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    899c:	e28d0004 	add	r0, sp, #4
    89a0:	eb000b48 	bl	b6c8 <CDWHCIRegister::Write()>
    89a4:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    89a8:	e3530000 	cmp	r3, #0
    89ac:	0a000000 	beq	89b4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x58>
    89b0:	eb0088ac 	bl	2ac68 <LeaveCritical>
    89b4:	e28d0004 	add	r0, sp, #4
    89b8:	eb000b3a 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    89bc:	e28dd014 	add	sp, sp, #20
    89c0:	e8bd8030 	pop	{r4, r5, pc}
    89c4:	eb00887c 	bl	2abbc <EnterCritical>
    89c8:	eaffffed 	b	8984 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x28>
    89cc:	20980418 	.word	0x20980418

000089d0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    89d0:	e92d4070 	push	{r4, r5, r6, lr}
    89d4:	e2514000 	subs	r4, r1, #0
    89d8:	e24dd048 	sub	sp, sp, #72	; 0x48
    89dc:	0a0000dd 	beq	8d58 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x388>
    89e0:	e1a06000 	mov	r6, r0
    89e4:	e1a00004 	mov	r0, r4
    89e8:	eb000d17 	bl	be4c <CDWHCITransferStageData::GetChannelNumber() const>
    89ec:	e596300c 	ldr	r3, [r6, #12]
    89f0:	e1a05000 	mov	r5, r0
    89f4:	e1500003 	cmp	r0, r3
    89f8:	2a0000da 	bcs	8d68 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x398>
    89fc:	e3a01001 	mov	r1, #1
    8a00:	e1a00004 	mov	r0, r4
    8a04:	eb000d0a 	bl	be34 <CDWHCITransferStageData::SetSubState(unsigned int)>
    8a08:	e59f1368 	ldr	r1, [pc, #872]	; 8d78 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a8>
    8a0c:	e1a05285 	lsl	r5, r5, #5
    8a10:	e0851001 	add	r1, r5, r1
    8a14:	e1a0000d 	mov	r0, sp
    8a18:	eb000b1a 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8a1c:	e1a0000d 	mov	r0, sp
    8a20:	eb000ba2 	bl	b8b0 <CDWHCIRegister::SetAll()>
    8a24:	e1a0000d 	mov	r0, sp
    8a28:	eb000b26 	bl	b6c8 <CDWHCIRegister::Write()>
    8a2c:	e59f1348 	ldr	r1, [pc, #840]	; 8d7c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3ac>
    8a30:	e3a02000 	mov	r2, #0
    8a34:	e0851001 	add	r1, r5, r1
    8a38:	e28d000c 	add	r0, sp, #12
    8a3c:	eb000b15 	bl	b698 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    8a40:	e1a00004 	mov	r0, r4
    8a44:	eb000e39 	bl	c330 <CDWHCITransferStageData::GetBytesToTransfer() const>
    8a48:	e3c014ff 	bic	r1, r0, #-16777216	; 0xff000000
    8a4c:	e3c1173e 	bic	r1, r1, #16252928	; 0xf80000
    8a50:	e28d000c 	add	r0, sp, #12
    8a54:	eb000b56 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8a58:	e1a00004 	mov	r0, r4
    8a5c:	eb000e35 	bl	c338 <CDWHCITransferStageData::GetPacketsToTransfer() const>
    8a60:	e59f1318 	ldr	r1, [pc, #792]	; 8d80 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b0>
    8a64:	e0011980 	and	r1, r1, r0, lsl #19
    8a68:	e28d000c 	add	r0, sp, #12
    8a6c:	eb000b50 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8a70:	e1a00004 	mov	r0, r4
    8a74:	eb000e00 	bl	c27c <CDWHCITransferStageData::GetPID() const>
    8a78:	e1a01e80 	lsl	r1, r0, #29
    8a7c:	e28d000c 	add	r0, sp, #12
    8a80:	eb000b4b 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8a84:	e28d000c 	add	r0, sp, #12
    8a88:	eb000b0e 	bl	b6c8 <CDWHCIRegister::Write()>
    8a8c:	e1a00004 	mov	r0, r4
    8a90:	eb000e1a 	bl	c300 <CDWHCITransferStageData::GetDMAAddress() const>
    8a94:	e59f12e8 	ldr	r1, [pc, #744]	; 8d84 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b4>
    8a98:	e3c02103 	bic	r2, r0, #-1073741824	; 0xc0000000
    8a9c:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
    8aa0:	e0851001 	add	r1, r5, r1
    8aa4:	e28d0018 	add	r0, sp, #24
    8aa8:	eb000afa 	bl	b698 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    8aac:	e28d0018 	add	r0, sp, #24
    8ab0:	eb000b04 	bl	b6c8 <CDWHCIRegister::Write()>
    8ab4:	e1a00004 	mov	r0, r4
    8ab8:	eb000e10 	bl	c300 <CDWHCITransferStageData::GetDMAAddress() const>
    8abc:	e1a06000 	mov	r6, r0
    8ac0:	e1a00004 	mov	r0, r4
    8ac4:	eb000e19 	bl	c330 <CDWHCITransferStageData::GetBytesToTransfer() const>
    8ac8:	e1a01000 	mov	r1, r0
    8acc:	e1a00006 	mov	r0, r6
    8ad0:	eb00887a 	bl	2acc0 <CleanAndInvalidateDataCacheRange>
    8ad4:	e59f12ac 	ldr	r1, [pc, #684]	; 8d88 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b8>
    8ad8:	e3a02000 	mov	r2, #0
    8adc:	e0851001 	add	r1, r5, r1
    8ae0:	e28d0024 	add	r0, sp, #36	; 0x24
    8ae4:	eb000aeb 	bl	b698 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    8ae8:	e1a00004 	mov	r0, r4
    8aec:	eb000e13 	bl	c340 <CDWHCITransferStageData::IsSplit() const>
    8af0:	e3500000 	cmp	r0, #0
    8af4:	1a00007c 	bne	8cec <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x31c>
    8af8:	e28d0024 	add	r0, sp, #36	; 0x24
    8afc:	eb000af1 	bl	b6c8 <CDWHCIRegister::Write()>
    8b00:	e59f1284 	ldr	r1, [pc, #644]	; 8d8c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3bc>
    8b04:	e28d0030 	add	r0, sp, #48	; 0x30
    8b08:	e0851001 	add	r1, r5, r1
    8b0c:	eb000add 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8b10:	e28d0030 	add	r0, sp, #48	; 0x30
    8b14:	eb000ae4 	bl	b6ac <CDWHCIRegister::Read()>
    8b18:	e59f1270 	ldr	r1, [pc, #624]	; 8d90 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c0>
    8b1c:	e28d0030 	add	r0, sp, #48	; 0x30
    8b20:	eb000b15 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    8b24:	e1a00004 	mov	r0, r4
    8b28:	eb000dcf 	bl	c26c <CDWHCITransferStageData::GetMaxPacketSize() const>
    8b2c:	e1a01a80 	lsl	r1, r0, #21
    8b30:	e1a01aa1 	lsr	r1, r1, #21
    8b34:	e28d0030 	add	r0, sp, #48	; 0x30
    8b38:	eb000b1d 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8b3c:	e28d0030 	add	r0, sp, #48	; 0x30
    8b40:	e3e01603 	mvn	r1, #3145728	; 0x300000
    8b44:	eb000b0c 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    8b48:	e28d0030 	add	r0, sp, #48	; 0x30
    8b4c:	e3a01601 	mov	r1, #1048576	; 0x100000
    8b50:	eb000b17 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8b54:	e1a00004 	mov	r0, r4
    8b58:	eb000de4 	bl	c2f0 <CDWHCITransferStageData::IsDirectionIn() const>
    8b5c:	e3500000 	cmp	r0, #0
    8b60:	1a000052 	bne	8cb0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2e0>
    8b64:	e3e01902 	mvn	r1, #32768	; 0x8000
    8b68:	e28d0030 	add	r0, sp, #48	; 0x30
    8b6c:	eb000b02 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    8b70:	e1a00004 	mov	r0, r4
    8b74:	eb000dbe 	bl	c274 <CDWHCITransferStageData::GetSpeed() const>
    8b78:	e3500000 	cmp	r0, #0
    8b7c:	1a000052 	bne	8ccc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2fc>
    8b80:	e3a01802 	mov	r1, #131072	; 0x20000
    8b84:	e28d0030 	add	r0, sp, #48	; 0x30
    8b88:	eb000b09 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8b8c:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    8b90:	e28d0030 	add	r0, sp, #48	; 0x30
    8b94:	eb000af8 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    8b98:	e1a00004 	mov	r0, r4
    8b9c:	eb000d7d 	bl	c198 <CDWHCITransferStageData::GetDeviceAddress() const>
    8ba0:	e1a01b00 	lsl	r1, r0, #22
    8ba4:	e28d0030 	add	r0, sp, #48	; 0x30
    8ba8:	eb000b01 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8bac:	e3e01703 	mvn	r1, #786432	; 0xc0000
    8bb0:	e28d0030 	add	r0, sp, #48	; 0x30
    8bb4:	eb000af0 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    8bb8:	e1a00004 	mov	r0, r4
    8bbc:	eb000d81 	bl	c1c8 <CDWHCITransferStageData::GetEndpointType() const>
    8bc0:	e1a01900 	lsl	r1, r0, #18
    8bc4:	e28d0030 	add	r0, sp, #48	; 0x30
    8bc8:	eb000af9 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8bcc:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    8bd0:	e28d0030 	add	r0, sp, #48	; 0x30
    8bd4:	eb000ae8 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    8bd8:	e1a00004 	mov	r0, r4
    8bdc:	eb000d96 	bl	c23c <CDWHCITransferStageData::GetEndpointNumber() const>
    8be0:	e1a01580 	lsl	r1, r0, #11
    8be4:	e28d0030 	add	r0, sp, #48	; 0x30
    8be8:	eb000af1 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8bec:	e1a00004 	mov	r0, r4
    8bf0:	eb000e4a 	bl	c520 <CDWHCITransferStageData::GetFrameScheduler() const>
    8bf4:	e2506000 	subs	r6, r0, #0
    8bf8:	0a00000b 	beq	8c2c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x25c>
    8bfc:	e5963000 	ldr	r3, [r6]
    8c00:	e5933014 	ldr	r3, [r3, #20]
    8c04:	e12fff33 	blx	r3
    8c08:	e5963000 	ldr	r3, [r6]
    8c0c:	e1a00006 	mov	r0, r6
    8c10:	e5933018 	ldr	r3, [r3, #24]
    8c14:	e12fff33 	blx	r3
    8c18:	e3500000 	cmp	r0, #0
    8c1c:	1a00002e 	bne	8cdc <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x30c>
    8c20:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    8c24:	e28d0030 	add	r0, sp, #48	; 0x30
    8c28:	eb000ad3 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    8c2c:	e59f1160 	ldr	r1, [pc, #352]	; 8d94 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c4>
    8c30:	e28d003c 	add	r0, sp, #60	; 0x3c
    8c34:	e0851001 	add	r1, r5, r1
    8c38:	eb000a92 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8c3c:	e1a00004 	mov	r0, r4
    8c40:	eb000df9 	bl	c42c <CDWHCITransferStageData::GetStatusMask() const>
    8c44:	e1a01000 	mov	r1, r0
    8c48:	e28d003c 	add	r0, sp, #60	; 0x3c
    8c4c:	eb000ab7 	bl	b730 <CDWHCIRegister::Set(unsigned int)>
    8c50:	e28d003c 	add	r0, sp, #60	; 0x3c
    8c54:	eb000a9b 	bl	b6c8 <CDWHCIRegister::Write()>
    8c58:	e28d0030 	add	r0, sp, #48	; 0x30
    8c5c:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    8c60:	eb000ad3 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8c64:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    8c68:	e28d0030 	add	r0, sp, #48	; 0x30
    8c6c:	eb000ac2 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    8c70:	e28d0030 	add	r0, sp, #48	; 0x30
    8c74:	eb000a93 	bl	b6c8 <CDWHCIRegister::Write()>
    8c78:	e28d003c 	add	r0, sp, #60	; 0x3c
    8c7c:	eb000a89 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    8c80:	e28d0030 	add	r0, sp, #48	; 0x30
    8c84:	eb000a87 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    8c88:	e28d0024 	add	r0, sp, #36	; 0x24
    8c8c:	eb000a85 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    8c90:	e28d0018 	add	r0, sp, #24
    8c94:	eb000a83 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    8c98:	e28d000c 	add	r0, sp, #12
    8c9c:	eb000a81 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    8ca0:	e1a0000d 	mov	r0, sp
    8ca4:	eb000a7f 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    8ca8:	e28dd048 	add	sp, sp, #72	; 0x48
    8cac:	e8bd8070 	pop	{r4, r5, r6, pc}
    8cb0:	e3a01902 	mov	r1, #32768	; 0x8000
    8cb4:	e28d0030 	add	r0, sp, #48	; 0x30
    8cb8:	eb000abd 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8cbc:	e1a00004 	mov	r0, r4
    8cc0:	eb000d6b 	bl	c274 <CDWHCITransferStageData::GetSpeed() const>
    8cc4:	e3500000 	cmp	r0, #0
    8cc8:	0affffac 	beq	8b80 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1b0>
    8ccc:	e3e01802 	mvn	r1, #131072	; 0x20000
    8cd0:	e28d0030 	add	r0, sp, #48	; 0x30
    8cd4:	eb000aa8 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    8cd8:	eaffffab 	b	8b8c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1bc>
    8cdc:	e3a01202 	mov	r1, #536870912	; 0x20000000
    8ce0:	e28d0030 	add	r0, sp, #48	; 0x30
    8ce4:	eb000ab2 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8ce8:	eaffffcf 	b	8c2c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x25c>
    8cec:	e1a00004 	mov	r0, r4
    8cf0:	eb000db6 	bl	c3d0 <CDWHCITransferStageData::GetHubPortAddress() const>
    8cf4:	e1a01000 	mov	r1, r0
    8cf8:	e28d0024 	add	r0, sp, #36	; 0x24
    8cfc:	eb000aac 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8d00:	e1a00004 	mov	r0, r4
    8d04:	eb000d9c 	bl	c37c <CDWHCITransferStageData::GetHubAddress() const>
    8d08:	e1a01380 	lsl	r1, r0, #7
    8d0c:	e28d0024 	add	r0, sp, #36	; 0x24
    8d10:	eb000aa7 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8d14:	e1a00004 	mov	r0, r4
    8d18:	eb000dc1 	bl	c424 <CDWHCITransferStageData::GetSplitPosition() const>
    8d1c:	e1a01700 	lsl	r1, r0, #14
    8d20:	e28d0024 	add	r0, sp, #36	; 0x24
    8d24:	eb000aa2 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8d28:	e1a00004 	mov	r0, r4
    8d2c:	eb000d85 	bl	c348 <CDWHCITransferStageData::IsSplitComplete() const>
    8d30:	e3500000 	cmp	r0, #0
    8d34:	1a000003 	bne	8d48 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x378>
    8d38:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    8d3c:	e28d0024 	add	r0, sp, #36	; 0x24
    8d40:	eb000a9b 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8d44:	eaffff6b 	b	8af8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x128>
    8d48:	e3a01801 	mov	r1, #65536	; 0x10000
    8d4c:	e28d0024 	add	r0, sp, #36	; 0x24
    8d50:	eb000a97 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8d54:	eafffff7 	b	8d38 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x368>
    8d58:	e59f2038 	ldr	r2, [pc, #56]	; 8d98 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c8>
    8d5c:	e59f1038 	ldr	r1, [pc, #56]	; 8d9c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    8d60:	e59f0038 	ldr	r0, [pc, #56]	; 8da0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d0>
    8d64:	eb006a45 	bl	23680 <assertion_failed>
    8d68:	e3a02e35 	mov	r2, #848	; 0x350
    8d6c:	e59f1028 	ldr	r1, [pc, #40]	; 8d9c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    8d70:	e59f002c 	ldr	r0, [pc, #44]	; 8da4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d4>
    8d74:	eb006a41 	bl	23680 <assertion_failed>
    8d78:	20980508 	.word	0x20980508
    8d7c:	20980510 	.word	0x20980510
    8d80:	1ff80000 	.word	0x1ff80000
    8d84:	20980514 	.word	0x20980514
    8d88:	20980504 	.word	0x20980504
    8d8c:	20980500 	.word	0x20980500
    8d90:	fffff800 	.word	0xfffff800
    8d94:	2098050c 	.word	0x2098050c
    8d98:	0000034e 	.word	0x0000034e
    8d9c:	0003465c 	.word	0x0003465c
    8da0:	000346cc 	.word	0x000346cc
    8da4:	000346dc 	.word	0x000346dc

00008da8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    8da8:	e92d4070 	push	{r4, r5, r6, lr}
    8dac:	e2515000 	subs	r5, r1, #0
    8db0:	e24dd018 	sub	sp, sp, #24
    8db4:	0a000032 	beq	8e84 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xdc>
    8db8:	e1a06000 	mov	r6, r0
    8dbc:	e1a00005 	mov	r0, r5
    8dc0:	eb000c21 	bl	be4c <CDWHCITransferStageData::GetChannelNumber() const>
    8dc4:	e596300c 	ldr	r3, [r6, #12]
    8dc8:	e1500003 	cmp	r0, r3
    8dcc:	2a000030 	bcs	8e94 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xec>
    8dd0:	e59f10cc 	ldr	r1, [pc, #204]	; 8ea4 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xfc>
    8dd4:	e0801001 	add	r1, r0, r1
    8dd8:	e1a04281 	lsl	r4, r1, #5
    8ddc:	e1a01004 	mov	r1, r4
    8de0:	e1a0000d 	mov	r0, sp
    8de4:	eb000a27 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8de8:	e1a0000d 	mov	r0, sp
    8dec:	eb000a2e 	bl	b6ac <CDWHCIRegister::Read()>
    8df0:	e1a0000d 	mov	r0, sp
    8df4:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    8df8:	eb000a50 	bl	b740 <CDWHCIRegister::IsSet(unsigned int) const>
    8dfc:	e3500000 	cmp	r0, #0
    8e00:	1a000006 	bne	8e20 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x78>
    8e04:	e1a01005 	mov	r1, r5
    8e08:	e1a00006 	mov	r0, r6
    8e0c:	ebfffeef 	bl	89d0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    8e10:	e1a0000d 	mov	r0, sp
    8e14:	eb000a23 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    8e18:	e28dd018 	add	sp, sp, #24
    8e1c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8e20:	e1a00005 	mov	r0, r5
    8e24:	e3a01000 	mov	r1, #0
    8e28:	eb000c01 	bl	be34 <CDWHCITransferStageData::SetSubState(unsigned int)>
    8e2c:	e1a0000d 	mov	r0, sp
    8e30:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    8e34:	eb000a50 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    8e38:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    8e3c:	e1a0000d 	mov	r0, sp
    8e40:	eb000a5b 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    8e44:	e1a0000d 	mov	r0, sp
    8e48:	eb000a1e 	bl	b6c8 <CDWHCIRegister::Write()>
    8e4c:	e284100c 	add	r1, r4, #12
    8e50:	e28d000c 	add	r0, sp, #12
    8e54:	eb000a0b 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8e58:	e3a01002 	mov	r1, #2
    8e5c:	e28d000c 	add	r0, sp, #12
    8e60:	eb000a32 	bl	b730 <CDWHCIRegister::Set(unsigned int)>
    8e64:	e28d000c 	add	r0, sp, #12
    8e68:	eb000a16 	bl	b6c8 <CDWHCIRegister::Write()>
    8e6c:	e28d000c 	add	r0, sp, #12
    8e70:	eb000a0c 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    8e74:	e1a0000d 	mov	r0, sp
    8e78:	eb000a0a 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    8e7c:	e28dd018 	add	sp, sp, #24
    8e80:	e8bd8070 	pop	{r4, r5, r6, pc}
    8e84:	e59f201c 	ldr	r2, [pc, #28]	; 8ea8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x100>
    8e88:	e59f101c 	ldr	r1, [pc, #28]	; 8eac <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    8e8c:	e59f001c 	ldr	r0, [pc, #28]	; 8eb0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x108>
    8e90:	eb0069fa 	bl	23680 <assertion_failed>
    8e94:	e59f2018 	ldr	r2, [pc, #24]	; 8eb4 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x10c>
    8e98:	e59f100c 	ldr	r1, [pc, #12]	; 8eac <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    8e9c:	e59f0014 	ldr	r0, [pc, #20]	; 8eb8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x110>
    8ea0:	eb0069f6 	bl	23680 <assertion_failed>
    8ea4:	0104c028 	.word	0x0104c028
    8ea8:	00000333 	.word	0x00000333
    8eac:	0003465c 	.word	0x0003465c
    8eb0:	000346cc 	.word	0x000346cc
    8eb4:	00000335 	.word	0x00000335
    8eb8:	000346dc 	.word	0x000346dc

00008ebc <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>:
    8ebc:	e92d4070 	push	{r4, r5, r6, lr}
    8ec0:	e3a05000 	mov	r5, #0
    8ec4:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    8ec8:	e1510005 	cmp	r1, r5
    8ecc:	0a00001d 	beq	8f48 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x8c>
    8ed0:	e1a06000 	mov	r6, r0
    8ed4:	e1a00001 	mov	r0, r1
    8ed8:	e1a04001 	mov	r4, r1
    8edc:	eb000bd2 	bl	be2c <CDWHCITransferStageData::GetState() const>
    8ee0:	e3500003 	cmp	r0, #3
    8ee4:	1a00001b 	bne	8f58 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x9c>
    8ee8:	e1a00004 	mov	r0, r4
    8eec:	eb000d13 	bl	c340 <CDWHCITransferStageData::IsSplit() const>
    8ef0:	e2501000 	subs	r1, r0, #0
    8ef4:	1a000007 	bne	8f18 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x5c>
    8ef8:	e1a00004 	mov	r0, r4
    8efc:	eb000bc8 	bl	be24 <CDWHCITransferStageData::SetState(unsigned int)>
    8f00:	e1a01004 	mov	r1, r4
    8f04:	e1a00006 	mov	r0, r6
    8f08:	ebffffa6 	bl	8da8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    8f0c:	e3a03000 	mov	r3, #0
    8f10:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    8f14:	e8bd8070 	pop	{r4, r5, r6, pc}
    8f18:	e1a00004 	mov	r0, r4
    8f1c:	e3a01001 	mov	r1, #1
    8f20:	eb000bbf 	bl	be24 <CDWHCITransferStageData::SetState(unsigned int)>
    8f24:	e1a01005 	mov	r1, r5
    8f28:	e1a00004 	mov	r0, r4
    8f2c:	eb000bb0 	bl	bdf4 <CDWHCITransferStageData::SetSplitComplete(bool)>
    8f30:	e1a00004 	mov	r0, r4
    8f34:	eb000d79 	bl	c520 <CDWHCITransferStageData::GetFrameScheduler() const>
    8f38:	e5903000 	ldr	r3, [r0]
    8f3c:	e5933008 	ldr	r3, [r3, #8]
    8f40:	e12fff33 	blx	r3
    8f44:	eaffffed 	b	8f00 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x44>
    8f48:	e59f2018 	ldr	r2, [pc, #24]	; 8f68 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xac>
    8f4c:	e59f1018 	ldr	r1, [pc, #24]	; 8f6c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    8f50:	e59f0018 	ldr	r0, [pc, #24]	; 8f70 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb4>
    8f54:	eb0069c9 	bl	23680 <assertion_failed>
    8f58:	e59f2014 	ldr	r2, [pc, #20]	; 8f74 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb8>
    8f5c:	e59f1008 	ldr	r1, [pc, #8]	; 8f6c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    8f60:	e59f0010 	ldr	r0, [pc, #16]	; 8f78 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xbc>
    8f64:	eb0069c5 	bl	23680 <assertion_failed>
    8f68:	0000053d 	.word	0x0000053d
    8f6c:	0003465c 	.word	0x0003465c
    8f70:	000346cc 	.word	0x000346cc
    8f74:	0000053e 	.word	0x0000053e
    8f78:	000346f4 	.word	0x000346f4

00008f7c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)>:
    8f7c:	e2520000 	subs	r0, r2, #0
    8f80:	e92d4010 	push	{r4, lr}
    8f84:	0a000003 	beq	8f98 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x1c>
    8f88:	e3510000 	cmp	r1, #0
    8f8c:	0a000005 	beq	8fa8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
    8f90:	e8bd4010 	pop	{r4, lr}
    8f94:	eaffffc8 	b	8ebc <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    8f98:	e59f2018 	ldr	r2, [pc, #24]	; 8fb8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
    8f9c:	e59f1018 	ldr	r1, [pc, #24]	; 8fbc <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x40>
    8fa0:	e59f0018 	ldr	r0, [pc, #24]	; 8fc0 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x44>
    8fa4:	eb0069b5 	bl	23680 <assertion_failed>
    8fa8:	e59f2014 	ldr	r2, [pc, #20]	; 8fc4 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x48>
    8fac:	e59f1008 	ldr	r1, [pc, #8]	; 8fbc <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x40>
    8fb0:	e59f0010 	ldr	r0, [pc, #16]	; 8fc8 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
    8fb4:	eb0069b1 	bl	23680 <assertion_failed>
    8fb8:	00000554 	.word	0x00000554
    8fbc:	0003465c 	.word	0x0003465c
    8fc0:	0003466c 	.word	0x0003466c
    8fc4:	00000557 	.word	0x00000557
    8fc8:	00034728 	.word	0x00034728

00008fcc <CDWHCIDevice::AllocateChannel()>:
    8fcc:	e92d4010 	push	{r4, lr}
    8fd0:	e590c014 	ldr	ip, [r0, #20]
    8fd4:	e24dd008 	sub	sp, sp, #8
    8fd8:	e35c0000 	cmp	ip, #0
    8fdc:	e1a04000 	mov	r4, r0
    8fe0:	1a000014 	bne	9038 <CDWHCIDevice::AllocateChannel()+0x6c>
    8fe4:	e590100c 	ldr	r1, [r0, #12]
    8fe8:	e3510000 	cmp	r1, #0
    8fec:	0a00000e 	beq	902c <CDWHCIDevice::AllocateChannel()+0x60>
    8ff0:	e5903010 	ldr	r3, [r0, #16]
    8ff4:	e2130001 	ands	r0, r3, #1
    8ff8:	0a000025 	beq	9094 <CDWHCIDevice::AllocateChannel()+0xc8>
    8ffc:	e3a00000 	mov	r0, #0
    9000:	e3a03001 	mov	r3, #1
    9004:	ea000002 	b	9014 <CDWHCIDevice::AllocateChannel()+0x48>
    9008:	e5942010 	ldr	r2, [r4, #16]
    900c:	e1120003 	tst	r2, r3
    9010:	0a000013 	beq	9064 <CDWHCIDevice::AllocateChannel()+0x98>
    9014:	e2800001 	add	r0, r0, #1
    9018:	e1500001 	cmp	r0, r1
    901c:	e1a03083 	lsl	r3, r3, #1
    9020:	3afffff8 	bcc	9008 <CDWHCIDevice::AllocateChannel()+0x3c>
    9024:	e35c0000 	cmp	ip, #0
    9028:	1a000017 	bne	908c <CDWHCIDevice::AllocateChannel()+0xc0>
    902c:	e3a00010 	mov	r0, #16
    9030:	e28dd008 	add	sp, sp, #8
    9034:	e8bd8010 	pop	{r4, pc}
    9038:	e1a0000c 	mov	r0, ip
    903c:	eb0086de 	bl	2abbc <EnterCritical>
    9040:	e594100c 	ldr	r1, [r4, #12]
    9044:	e3510000 	cmp	r1, #0
    9048:	0594c014 	ldreq	ip, [r4, #20]
    904c:	0afffff4 	beq	9024 <CDWHCIDevice::AllocateChannel()+0x58>
    9050:	e5943010 	ldr	r3, [r4, #16]
    9054:	e594c014 	ldr	ip, [r4, #20]
    9058:	e2130001 	ands	r0, r3, #1
    905c:	1affffe6 	bne	8ffc <CDWHCIDevice::AllocateChannel()+0x30>
    9060:	e3a03001 	mov	r3, #1
    9064:	e5942010 	ldr	r2, [r4, #16]
    9068:	e35c0000 	cmp	ip, #0
    906c:	e1823003 	orr	r3, r2, r3
    9070:	e5843010 	str	r3, [r4, #16]
    9074:	0affffed 	beq	9030 <CDWHCIDevice::AllocateChannel()+0x64>
    9078:	e58d0004 	str	r0, [sp, #4]
    907c:	eb0086f9 	bl	2ac68 <LeaveCritical>
    9080:	e59d0004 	ldr	r0, [sp, #4]
    9084:	e28dd008 	add	sp, sp, #8
    9088:	e8bd8010 	pop	{r4, pc}
    908c:	eb0086f5 	bl	2ac68 <LeaveCritical>
    9090:	eaffffe5 	b	902c <CDWHCIDevice::AllocateChannel()+0x60>
    9094:	e5943010 	ldr	r3, [r4, #16]
    9098:	e3833001 	orr	r3, r3, #1
    909c:	e5843010 	str	r3, [r4, #16]
    90a0:	eaffffe2 	b	9030 <CDWHCIDevice::AllocateChannel()+0x64>

000090a4 <CDWHCIDevice::FreeChannel(unsigned int)>:
    90a4:	e590300c 	ldr	r3, [r0, #12]
    90a8:	e92d4070 	push	{r4, r5, r6, lr}
    90ac:	e1530001 	cmp	r3, r1
    90b0:	9a000012 	bls	9100 <CDWHCIDevice::FreeChannel(unsigned int)+0x5c>
    90b4:	e3a05001 	mov	r5, #1
    90b8:	e1a04000 	mov	r4, r0
    90bc:	e5900014 	ldr	r0, [r0, #20]
    90c0:	e1a05115 	lsl	r5, r5, r1
    90c4:	e3500000 	cmp	r0, #0
    90c8:	1a00000a 	bne	90f8 <CDWHCIDevice::FreeChannel(unsigned int)+0x54>
    90cc:	e5943010 	ldr	r3, [r4, #16]
    90d0:	e1150003 	tst	r5, r3
    90d4:	0a00000d 	beq	9110 <CDWHCIDevice::FreeChannel(unsigned int)+0x6c>
    90d8:	e5941010 	ldr	r1, [r4, #16]
    90dc:	e5943014 	ldr	r3, [r4, #20]
    90e0:	e1c15005 	bic	r5, r1, r5
    90e4:	e3530000 	cmp	r3, #0
    90e8:	e5845010 	str	r5, [r4, #16]
    90ec:	08bd8070 	popeq	{r4, r5, r6, pc}
    90f0:	e8bd4070 	pop	{r4, r5, r6, lr}
    90f4:	ea0086db 	b	2ac68 <LeaveCritical>
    90f8:	eb0086af 	bl	2abbc <EnterCritical>
    90fc:	eafffff2 	b	90cc <CDWHCIDevice::FreeChannel(unsigned int)+0x28>
    9100:	e59f2018 	ldr	r2, [pc, #24]	; 9120 <CDWHCIDevice::FreeChannel(unsigned int)+0x7c>
    9104:	e59f1018 	ldr	r1, [pc, #24]	; 9124 <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    9108:	e59f0018 	ldr	r0, [pc, #24]	; 9128 <CDWHCIDevice::FreeChannel(unsigned int)+0x84>
    910c:	eb00695b 	bl	23680 <assertion_failed>
    9110:	e59f2014 	ldr	r2, [pc, #20]	; 912c <CDWHCIDevice::FreeChannel(unsigned int)+0x88>
    9114:	e59f1008 	ldr	r1, [pc, #8]	; 9124 <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    9118:	e59f0010 	ldr	r0, [pc, #16]	; 9130 <CDWHCIDevice::FreeChannel(unsigned int)+0x8c>
    911c:	eb006957 	bl	23680 <assertion_failed>
    9120:	00000578 	.word	0x00000578
    9124:	0003465c 	.word	0x0003465c
    9128:	000346dc 	.word	0x000346dc
    912c:	0000057d 	.word	0x0000057d
    9130:	00034734 	.word	0x00034734

00009134 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    9134:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    9138:	e2516000 	subs	r6, r1, #0
    913c:	e24dd00c 	sub	sp, sp, #12
    9140:	0a00003a 	beq	9230 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xfc>
    9144:	e1a05000 	mov	r5, r0
    9148:	e1a09003 	mov	r9, r3
    914c:	e1a08002 	mov	r8, r2
    9150:	ebffff9d 	bl	8fcc <CDWHCIDevice::AllocateChannel()>
    9154:	e595300c 	ldr	r3, [r5, #12]
    9158:	e1a04000 	mov	r4, r0
    915c:	e1500003 	cmp	r0, r3
    9160:	23a06000 	movcs	r6, #0
    9164:	3a000002 	bcc	9174 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x40>
    9168:	e1a00006 	mov	r0, r6
    916c:	e28dd00c 	add	sp, sp, #12
    9170:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    9174:	e3a00054 	mov	r0, #84	; 0x54
    9178:	eb000cea 	bl	c528 <CDWHCITransferStageData::operator new(unsigned int)>
    917c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    9180:	e58d9000 	str	r9, [sp]
    9184:	e58d3004 	str	r3, [sp, #4]
    9188:	e1a02006 	mov	r2, r6
    918c:	e1a03008 	mov	r3, r8
    9190:	e1a01004 	mov	r1, r4
    9194:	e0858104 	add	r8, r5, r4, lsl #2
    9198:	e1a07000 	mov	r7, r0
    919c:	eb000b3d 	bl	be98 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    91a0:	e5989018 	ldr	r9, [r8, #24]
    91a4:	e3590000 	cmp	r9, #0
    91a8:	1a000030 	bne	9270 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x13c>
    91ac:	e1a01004 	mov	r1, r4
    91b0:	e1a00005 	mov	r0, r5
    91b4:	e5887018 	str	r7, [r8, #24]
    91b8:	ebfffdca 	bl	88e8 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    91bc:	e1a00007 	mov	r0, r7
    91c0:	eb000c5e 	bl	c340 <CDWHCITransferStageData::IsSplit() const>
    91c4:	e2501000 	subs	r1, r0, #0
    91c8:	e1a00007 	mov	r0, r7
    91cc:	1a000007 	bne	91f0 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xbc>
    91d0:	eb000b13 	bl	be24 <CDWHCITransferStageData::SetState(unsigned int)>
    91d4:	e3a06001 	mov	r6, #1
    91d8:	e1a00005 	mov	r0, r5
    91dc:	e1a01007 	mov	r1, r7
    91e0:	ebfffef0 	bl	8da8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    91e4:	e1a00006 	mov	r0, r6
    91e8:	e28dd00c 	add	sp, sp, #12
    91ec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    91f0:	eb000b13 	bl	be44 <CDWHCITransferStageData::BeginSplitCycle()>
    91f4:	e2506000 	subs	r6, r0, #0
    91f8:	1a000010 	bne	9240 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    91fc:	e1a01004 	mov	r1, r4
    9200:	e1a00005 	mov	r0, r5
    9204:	ebfffdd4 	bl	895c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    9208:	e1a00007 	mov	r0, r7
    920c:	eb000a7e 	bl	bc0c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    9210:	e1a00007 	mov	r0, r7
    9214:	e3a01054 	mov	r1, #84	; 0x54
    9218:	eb000cd8 	bl	c580 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    921c:	e5886018 	str	r6, [r8, #24]
    9220:	e1a01004 	mov	r1, r4
    9224:	e1a00005 	mov	r0, r5
    9228:	ebffff9d 	bl	90a4 <CDWHCIDevice::FreeChannel(unsigned int)>
    922c:	eaffffcd 	b	9168 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x34>
    9230:	e59f2048 	ldr	r2, [pc, #72]	; 9280 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x14c>
    9234:	e59f1048 	ldr	r1, [pc, #72]	; 9284 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x150>
    9238:	e59f0048 	ldr	r0, [pc, #72]	; 9288 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x154>
    923c:	eb00690f 	bl	23680 <assertion_failed>
    9240:	e1a00007 	mov	r0, r7
    9244:	e3a01001 	mov	r1, #1
    9248:	eb000af5 	bl	be24 <CDWHCITransferStageData::SetState(unsigned int)>
    924c:	e1a01009 	mov	r1, r9
    9250:	e1a00007 	mov	r0, r7
    9254:	eb000ae6 	bl	bdf4 <CDWHCITransferStageData::SetSplitComplete(bool)>
    9258:	e1a00007 	mov	r0, r7
    925c:	eb000caf 	bl	c520 <CDWHCITransferStageData::GetFrameScheduler() const>
    9260:	e5903000 	ldr	r3, [r0]
    9264:	e5933008 	ldr	r3, [r3, #8]
    9268:	e12fff33 	blx	r3
    926c:	eaffffd8 	b	91d4 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xa0>
    9270:	e59f2014 	ldr	r2, [pc, #20]	; 928c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x158>
    9274:	e59f1008 	ldr	r1, [pc, #8]	; 9284 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x150>
    9278:	e59f0010 	ldr	r0, [pc, #16]	; 9290 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x15c>
    927c:	eb0068ff 	bl	23680 <assertion_failed>
    9280:	000002b6 	.word	0x000002b6
    9284:	0003465c 	.word	0x0003465c
    9288:	00034758 	.word	0x00034758
    928c:	000002c7 	.word	0x000002c7
    9290:	00034764 	.word	0x00034764

00009294 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    9294:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    9298:	e21330ff 	ands	r3, r3, #255	; 0xff
    929c:	1a000020 	bne	9324 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x90>
    92a0:	e92d4070 	push	{r4, r5, r6, lr}
    92a4:	e1a06002 	mov	r6, r2
    92a8:	e24dd008 	sub	sp, sp, #8
    92ac:	e1a04001 	mov	r4, r1
    92b0:	e1a05000 	mov	r5, r0
    92b4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    92b8:	e3510000 	cmp	r1, #0
    92bc:	0a000027 	beq	9360 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xcc>
    92c0:	e1a00001 	mov	r0, r1
    92c4:	eb00281f 	bl	13348 <CUSBRequest::GetEndpoint() const>
    92c8:	eb0012c3 	bl	dddc <CUSBEndpoint::GetType() const>
    92cc:	e3500001 	cmp	r0, #1
    92d0:	1a000015 	bne	932c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x98>
    92d4:	e1a00004 	mov	r0, r4
    92d8:	eb00285a 	bl	13448 <CUSBRequest::GetBufLen() const>
    92dc:	e3500000 	cmp	r0, #0
    92e0:	0a00001a 	beq	9350 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xbc>
    92e4:	e3a01000 	mov	r1, #0
    92e8:	e1a00004 	mov	r0, r4
    92ec:	eb002820 	bl	13374 <CUSBRequest::SetStatus(int)>
    92f0:	e1a00004 	mov	r0, r4
    92f4:	eb002813 	bl	13348 <CUSBRequest::GetEndpoint() const>
    92f8:	eb0012b9 	bl	dde4 <CUSBEndpoint::IsDirectionIn() const>
    92fc:	e58d6000 	str	r6, [sp]
    9300:	e1a02000 	mov	r2, r0
    9304:	e1a01004 	mov	r1, r4
    9308:	e1a00005 	mov	r0, r5
    930c:	e3a03000 	mov	r3, #0
    9310:	ebffff87 	bl	9134 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    9314:	e3a03000 	mov	r3, #0
    9318:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    931c:	e28dd008 	add	sp, sp, #8
    9320:	e8bd8070 	pop	{r4, r5, r6, pc}
    9324:	e3a00000 	mov	r0, #0
    9328:	e12fff1e 	bx	lr
    932c:	e1a00004 	mov	r0, r4
    9330:	eb002804 	bl	13348 <CUSBRequest::GetEndpoint() const>
    9334:	eb0012a8 	bl	dddc <CUSBEndpoint::GetType() const>
    9338:	e3500002 	cmp	r0, #2
    933c:	0affffe4 	beq	92d4 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x40>
    9340:	e59f2028 	ldr	r2, [pc, #40]	; 9370 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    9344:	e59f1028 	ldr	r1, [pc, #40]	; 9374 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    9348:	e59f0028 	ldr	r0, [pc, #40]	; 9378 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe4>
    934c:	eb0068cb 	bl	23680 <assertion_failed>
    9350:	e59f2024 	ldr	r2, [pc, #36]	; 937c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe8>
    9354:	e59f1018 	ldr	r1, [pc, #24]	; 9374 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    9358:	e59f0020 	ldr	r0, [pc, #32]	; 9380 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xec>
    935c:	eb0068c7 	bl	23680 <assertion_failed>
    9360:	e3a02f45 	mov	r2, #276	; 0x114
    9364:	e59f1008 	ldr	r1, [pc, #8]	; 9374 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    9368:	e59f0014 	ldr	r0, [pc, #20]	; 9384 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xf0>
    936c:	eb0068c3 	bl	23680 <assertion_failed>
    9370:	00000116 	.word	0x00000116
    9374:	0003465c 	.word	0x0003465c
    9378:	00034780 	.word	0x00034780
    937c:	00000117 	.word	0x00000117
    9380:	000347f4 	.word	0x000347f4
    9384:	00034758 	.word	0x00034758

00009388 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>:
    9388:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    938c:	e0807101 	add	r7, r0, r1, lsl #2
    9390:	e5974018 	ldr	r4, [r7, #24]
    9394:	e24dd020 	sub	sp, sp, #32
    9398:	e3540000 	cmp	r4, #0
    939c:	0a00008d 	beq	95d8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x250>
    93a0:	e1a05000 	mov	r5, r0
    93a4:	e1a00004 	mov	r0, r4
    93a8:	e1a06001 	mov	r6, r1
    93ac:	eb000c50 	bl	c4f4 <CDWHCITransferStageData::GetURB() const>
    93b0:	e2509000 	subs	r9, r0, #0
    93b4:	0a00008b 	beq	95e8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x260>
    93b8:	e1a00004 	mov	r0, r4
    93bc:	eb000a9e 	bl	be3c <CDWHCITransferStageData::GetSubState() const>
    93c0:	e3500000 	cmp	r0, #0
    93c4:	0a00004a 	beq	94f4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x16c>
    93c8:	e3500001 	cmp	r0, #1
    93cc:	1a000044 	bne	94e4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x15c>
    93d0:	e1a00004 	mov	r0, r4
    93d4:	eb000bc9 	bl	c300 <CDWHCITransferStageData::GetDMAAddress() const>
    93d8:	e1a08000 	mov	r8, r0
    93dc:	e1a00004 	mov	r0, r4
    93e0:	eb000bd2 	bl	c330 <CDWHCITransferStageData::GetBytesToTransfer() const>
    93e4:	e1a01000 	mov	r1, r0
    93e8:	e1a00008 	mov	r0, r8
    93ec:	eb008633 	bl	2acc0 <CleanAndInvalidateDataCacheRange>
    93f0:	e59f148c 	ldr	r1, [pc, #1164]	; 9884 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4fc>
    93f4:	e1a08286 	lsl	r8, r6, #5
    93f8:	e0881001 	add	r1, r8, r1
    93fc:	e28d0008 	add	r0, sp, #8
    9400:	eb0008a0 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9404:	e28d0008 	add	r0, sp, #8
    9408:	eb0008a7 	bl	b6ac <CDWHCIRegister::Read()>
    940c:	e59f1474 	ldr	r1, [pc, #1140]	; 9888 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x500>
    9410:	e28d0014 	add	r0, sp, #20
    9414:	e0881001 	add	r1, r8, r1
    9418:	eb00089a 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    941c:	e28d0014 	add	r0, sp, #20
    9420:	eb0008a1 	bl	b6ac <CDWHCIRegister::Read()>
    9424:	e3500002 	cmp	r0, #2
    9428:	0a000072 	beq	95f8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x270>
    942c:	e1a00004 	mov	r0, r4
    9430:	eb000a87 	bl	be54 <CDWHCITransferStageData::IsPeriodic() const>
    9434:	e3500000 	cmp	r0, #0
    9438:	1a0000aa 	bne	96e8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x360>
    943c:	e28d0014 	add	r0, sp, #20
    9440:	eb000899 	bl	b6ac <CDWHCIRegister::Read()>
    9444:	e1a0a000 	mov	sl, r0
    9448:	e28d0008 	add	r0, sp, #8
    944c:	eb0008ab 	bl	b700 <CDWHCIRegister::Get() const>
    9450:	e1a08000 	mov	r8, r0
    9454:	e28d0008 	add	r0, sp, #8
    9458:	eb0008a8 	bl	b700 <CDWHCIRegister::Get() const>
    945c:	e59f2428 	ldr	r2, [pc, #1064]	; 988c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x504>
    9460:	e3c034ff 	bic	r3, r0, #-16777216	; 0xff000000
    9464:	e00229a8 	and	r2, r2, r8, lsr #19
    9468:	e3c3373e 	bic	r3, r3, #16252928	; 0xf80000
    946c:	e1a0100a 	mov	r1, sl
    9470:	e1a00004 	mov	r0, r4
    9474:	eb0009f7 	bl	bc58 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    9478:	e28d0014 	add	r0, sp, #20
    947c:	eb000889 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    9480:	e28d0008 	add	r0, sp, #8
    9484:	eb000887 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    9488:	e1a00004 	mov	r0, r4
    948c:	eb000a66 	bl	be2c <CDWHCITransferStageData::GetState() const>
    9490:	e3500001 	cmp	r0, #1
    9494:	e1a08000 	mov	r8, r0
    9498:	0a00001a 	beq	9508 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x180>
    949c:	3a000061 	bcc	9628 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2a0>
    94a0:	e3500002 	cmp	r0, #2
    94a4:	1a00005b 	bne	9618 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x290>
    94a8:	e1a00004 	mov	r0, r4
    94ac:	eb000beb 	bl	c460 <CDWHCITransferStageData::GetTransactionStatus() const>
    94b0:	e59f33d8 	ldr	r3, [pc, #984]	; 9890 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x508>
    94b4:	e1a08000 	mov	r8, r0
    94b8:	e0033000 	and	r3, r3, r0
    94bc:	e3530000 	cmp	r3, #0
    94c0:	0a000081 	beq	96cc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x344>
    94c4:	eb007160 	bl	25a4c <CLogger::Get()>
    94c8:	e59f13c4 	ldr	r1, [pc, #964]	; 9894 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x50c>
    94cc:	e58d8000 	str	r8, [sp]
    94d0:	e59f33c0 	ldr	r3, [pc, #960]	; 9898 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x510>
    94d4:	e3a02001 	mov	r2, #1
    94d8:	eb007098 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    94dc:	e3a01000 	mov	r1, #0
    94e0:	ea00005e 	b	9660 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2d8>
    94e4:	e59f23b0 	ldr	r2, [pc, #944]	; 989c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x514>
    94e8:	e59f13b0 	ldr	r1, [pc, #944]	; 98a0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    94ec:	e59f03b0 	ldr	r0, [pc, #944]	; 98a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x51c>
    94f0:	eb006862 	bl	23680 <assertion_failed>
    94f4:	e1a01004 	mov	r1, r4
    94f8:	e1a00005 	mov	r0, r5
    94fc:	ebfffd33 	bl	89d0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    9500:	e28dd020 	add	sp, sp, #32
    9504:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9508:	e1a00004 	mov	r0, r4
    950c:	eb000bd3 	bl	c460 <CDWHCITransferStageData::GetTransactionStatus() const>
    9510:	e59f3390 	ldr	r3, [pc, #912]	; 98a8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x520>
    9514:	e1a0a000 	mov	sl, r0
    9518:	e0033000 	and	r3, r3, r0
    951c:	e3530000 	cmp	r3, #0
    9520:	1a000061 	bne	96ac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x324>
    9524:	e1a00004 	mov	r0, r4
    9528:	eb000bfc 	bl	c520 <CDWHCITransferStageData::GetFrameScheduler() const>
    952c:	e5903000 	ldr	r3, [r0]
    9530:	e1a0100a 	mov	r1, sl
    9534:	e5933010 	ldr	r3, [r3, #16]
    9538:	e12fff33 	blx	r3
    953c:	e3a01002 	mov	r1, #2
    9540:	e1a00004 	mov	r0, r4
    9544:	eb000a36 	bl	be24 <CDWHCITransferStageData::SetState(unsigned int)>
    9548:	e1a01008 	mov	r1, r8
    954c:	e1a00004 	mov	r0, r4
    9550:	eb000a27 	bl	bdf4 <CDWHCITransferStageData::SetSplitComplete(bool)>
    9554:	e1a00004 	mov	r0, r4
    9558:	eb000bf0 	bl	c520 <CDWHCITransferStageData::GetFrameScheduler() const>
    955c:	e5903000 	ldr	r3, [r0]
    9560:	e593300c 	ldr	r3, [r3, #12]
    9564:	e12fff33 	blx	r3
    9568:	e3500000 	cmp	r0, #0
    956c:	1a000086 	bne	978c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x404>
    9570:	e1a00004 	mov	r0, r4
    9574:	eb000bc5 	bl	c490 <CDWHCITransferStageData::IsStageComplete() const>
    9578:	e2508000 	subs	r8, r0, #0
    957c:	1a00006c 	bne	9734 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3ac>
    9580:	e1a00004 	mov	r0, r4
    9584:	eb000a2e 	bl	be44 <CDWHCITransferStageData::BeginSplitCycle()>
    9588:	e250a000 	subs	sl, r0, #0
    958c:	1a00009b 	bne	9800 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x478>
    9590:	e1a0100a 	mov	r1, sl
    9594:	e1a00009 	mov	r0, r9
    9598:	eb002775 	bl	13374 <CUSBRequest::SetStatus(int)>
    959c:	e1a01006 	mov	r1, r6
    95a0:	e1a00005 	mov	r0, r5
    95a4:	ebfffcec 	bl	895c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    95a8:	e1a00004 	mov	r0, r4
    95ac:	eb000996 	bl	bc0c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    95b0:	e1a00004 	mov	r0, r4
    95b4:	e3a01054 	mov	r1, #84	; 0x54
    95b8:	eb000bf0 	bl	c580 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    95bc:	e587a018 	str	sl, [r7, #24]
    95c0:	e1a00005 	mov	r0, r5
    95c4:	e1a01006 	mov	r1, r6
    95c8:	ebfffeb5 	bl	90a4 <CDWHCIDevice::FreeChannel(unsigned int)>
    95cc:	e1a00009 	mov	r0, r9
    95d0:	eb0027ab 	bl	13484 <CUSBRequest::CallCompletionRoutine()>
    95d4:	eaffffc9 	b	9500 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    95d8:	e59f22cc 	ldr	r2, [pc, #716]	; 98ac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x524>
    95dc:	e59f12bc 	ldr	r1, [pc, #700]	; 98a0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    95e0:	e59f02c8 	ldr	r0, [pc, #712]	; 98b0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x528>
    95e4:	eb006825 	bl	23680 <assertion_failed>
    95e8:	e59f22c4 	ldr	r2, [pc, #708]	; 98b4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x52c>
    95ec:	e59f12ac 	ldr	r1, [pc, #684]	; 98a0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    95f0:	e59f02c0 	ldr	r0, [pc, #704]	; 98b8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x530>
    95f4:	eb006821 	bl	23680 <assertion_failed>
    95f8:	e1a01004 	mov	r1, r4
    95fc:	e1a00005 	mov	r0, r5
    9600:	ebfffde8 	bl	8da8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    9604:	e28d0014 	add	r0, sp, #20
    9608:	eb000826 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    960c:	e28d0008 	add	r0, sp, #8
    9610:	eb000824 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    9614:	eaffffb9 	b	9500 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    9618:	e59f229c 	ldr	r2, [pc, #668]	; 98bc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x534>
    961c:	e59f127c 	ldr	r1, [pc, #636]	; 98a0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    9620:	e59f027c 	ldr	r0, [pc, #636]	; 98a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x51c>
    9624:	eb006815 	bl	23680 <assertion_failed>
    9628:	e1a00004 	mov	r0, r4
    962c:	eb000b8b 	bl	c460 <CDWHCITransferStageData::GetTransactionStatus() const>
    9630:	e59f8258 	ldr	r8, [pc, #600]	; 9890 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x508>
    9634:	e1a0a000 	mov	sl, r0
    9638:	e0088000 	and	r8, r8, r0
    963c:	e3580000 	cmp	r8, #0
    9640:	1a000031 	bne	970c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x384>
    9644:	e3100050 	tst	r0, #80	; 0x50
    9648:	1a000053 	bne	979c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x414>
    964c:	e1a00004 	mov	r0, r4
    9650:	eb000b28 	bl	c2f8 <CDWHCITransferStageData::IsStatusStage() const>
    9654:	e3500000 	cmp	r0, #0
    9658:	0a000083 	beq	986c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4e4>
    965c:	e3a01001 	mov	r1, #1
    9660:	e1a00009 	mov	r0, r9
    9664:	eb002742 	bl	13374 <CUSBRequest::SetStatus(int)>
    9668:	e1a01006 	mov	r1, r6
    966c:	e1a00005 	mov	r0, r5
    9670:	ebfffcb9 	bl	895c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    9674:	e1a00004 	mov	r0, r4
    9678:	eb000963 	bl	bc0c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    967c:	e1a00004 	mov	r0, r4
    9680:	e3a01054 	mov	r1, #84	; 0x54
    9684:	eb000bbd 	bl	c580 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    9688:	e3a03000 	mov	r3, #0
    968c:	e1a01006 	mov	r1, r6
    9690:	e1a00005 	mov	r0, r5
    9694:	e5873018 	str	r3, [r7, #24]
    9698:	ebfffe81 	bl	90a4 <CDWHCIDevice::FreeChannel(unsigned int)>
    969c:	e1a00009 	mov	r0, r9
    96a0:	eb002777 	bl	13484 <CUSBRequest::CallCompletionRoutine()>
    96a4:	e28dd020 	add	sp, sp, #32
    96a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    96ac:	eb0070e6 	bl	25a4c <CLogger::Get()>
    96b0:	e59f11dc 	ldr	r1, [pc, #476]	; 9894 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x50c>
    96b4:	e58da000 	str	sl, [sp]
    96b8:	e1a02008 	mov	r2, r8
    96bc:	e59f31d4 	ldr	r3, [pc, #468]	; 9898 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x510>
    96c0:	eb00701e 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    96c4:	e3a01000 	mov	r1, #0
    96c8:	eaffffe4 	b	9660 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2d8>
    96cc:	e1a00004 	mov	r0, r4
    96d0:	eb000b92 	bl	c520 <CDWHCITransferStageData::GetFrameScheduler() const>
    96d4:	e5903000 	ldr	r3, [r0]
    96d8:	e1a01008 	mov	r1, r8
    96dc:	e5933010 	ldr	r3, [r3, #16]
    96e0:	e12fff33 	blx	r3
    96e4:	eaffff9a 	b	9554 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x1cc>
    96e8:	e28d0008 	add	r0, sp, #8
    96ec:	eb000803 	bl	b700 <CDWHCIRegister::Get() const>
    96f0:	e2200206 	eor	r0, r0, #1610612736	; 0x60000000
    96f4:	e3100206 	tst	r0, #1610612736	; 0x60000000
    96f8:	1affff4f 	bne	943c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0xb4>
    96fc:	e59f21bc 	ldr	r2, [pc, #444]	; 98c0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x538>
    9700:	e59f1198 	ldr	r1, [pc, #408]	; 98a0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    9704:	e59f01b8 	ldr	r0, [pc, #440]	; 98c4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x53c>
    9708:	eb0067dc 	bl	23680 <assertion_failed>
    970c:	eb0070ce 	bl	25a4c <CLogger::Get()>
    9710:	e58da000 	str	sl, [sp]
    9714:	e59f317c 	ldr	r3, [pc, #380]	; 9898 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x510>
    9718:	e3a02001 	mov	r2, #1
    971c:	e59f1170 	ldr	r1, [pc, #368]	; 9894 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x50c>
    9720:	eb007006 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9724:	e3a01000 	mov	r1, #0
    9728:	e1a00009 	mov	r0, r9
    972c:	eb002710 	bl	13374 <CUSBRequest::SetStatus(int)>
    9730:	eaffffcc 	b	9668 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2e0>
    9734:	e1a01006 	mov	r1, r6
    9738:	e1a00005 	mov	r0, r5
    973c:	ebfffc86 	bl	895c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    9740:	e1a00004 	mov	r0, r4
    9744:	eb000aeb 	bl	c2f8 <CDWHCITransferStageData::IsStatusStage() const>
    9748:	e3500000 	cmp	r0, #0
    974c:	0a000040 	beq	9854 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4cc>
    9750:	e3a01001 	mov	r1, #1
    9754:	e1a00009 	mov	r0, r9
    9758:	eb002705 	bl	13374 <CUSBRequest::SetStatus(int)>
    975c:	eaffffc4 	b	9674 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2ec>
    9760:	e3a01001 	mov	r1, #1
    9764:	e1a00004 	mov	r0, r4
    9768:	eb0009ad 	bl	be24 <CDWHCITransferStageData::SetState(unsigned int)>
    976c:	e1a0100a 	mov	r1, sl
    9770:	e1a00004 	mov	r0, r4
    9774:	eb00099e 	bl	bdf4 <CDWHCITransferStageData::SetSplitComplete(bool)>
    9778:	e1a00004 	mov	r0, r4
    977c:	eb000b67 	bl	c520 <CDWHCITransferStageData::GetFrameScheduler() const>
    9780:	e5903000 	ldr	r3, [r0]
    9784:	e5933008 	ldr	r3, [r3, #8]
    9788:	e12fff33 	blx	r3
    978c:	e1a01004 	mov	r1, r4
    9790:	e1a00005 	mov	r0, r5
    9794:	ebfffd83 	bl	8da8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    9798:	eaffff58 	b	9500 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    979c:	e1a00004 	mov	r0, r4
    97a0:	eb0009ab 	bl	be54 <CDWHCITransferStageData::IsPeriodic() const>
    97a4:	e3500000 	cmp	r0, #0
    97a8:	0affffa7 	beq	964c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2c4>
    97ac:	e1a00004 	mov	r0, r4
    97b0:	eb000b3f 	bl	c4b4 <CDWHCITransferStageData::IsTimeout() const>
    97b4:	e3500000 	cmp	r0, #0
    97b8:	1affffd9 	bne	9724 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x39c>
    97bc:	e3a01003 	mov	r1, #3
    97c0:	e1a00004 	mov	r0, r4
    97c4:	eb000996 	bl	be24 <CDWHCITransferStageData::SetState(unsigned int)>
    97c8:	e1a00009 	mov	r0, r9
    97cc:	eb0026dd 	bl	13348 <CUSBRequest::GetEndpoint() const>
    97d0:	eb00118a 	bl	de00 <CUSBEndpoint::GetInterval() const>
    97d4:	e3a03064 	mov	r3, #100	; 0x64
    97d8:	e0030093 	mul	r3, r3, r0
    97dc:	e59f10e4 	ldr	r1, [pc, #228]	; 98c8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x540>
    97e0:	e5950008 	ldr	r0, [r5, #8]
    97e4:	e0813391 	umull	r3, r1, r1, r3
    97e8:	e58d5000 	str	r5, [sp]
    97ec:	e1a03004 	mov	r3, r4
    97f0:	e1a01321 	lsr	r1, r1, #6
    97f4:	e59f20d0 	ldr	r2, [pc, #208]	; 98cc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x544>
    97f8:	eb007ba0 	bl	28680 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    97fc:	eaffff3f 	b	9500 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    9800:	e1a00004 	mov	r0, r4
    9804:	eb000992 	bl	be54 <CDWHCITransferStageData::IsPeriodic() const>
    9808:	e250a000 	subs	sl, r0, #0
    980c:	0affffd3 	beq	9760 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3d8>
    9810:	e1a00004 	mov	r0, r4
    9814:	eb000b26 	bl	c4b4 <CDWHCITransferStageData::IsTimeout() const>
    9818:	e3500000 	cmp	r0, #0
    981c:	0affffe6 	beq	97bc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x434>
    9820:	e1a01006 	mov	r1, r6
    9824:	e1a00005 	mov	r0, r5
    9828:	ebfffc4b 	bl	895c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    982c:	e1a01008 	mov	r1, r8
    9830:	e1a00009 	mov	r0, r9
    9834:	eb0026ce 	bl	13374 <CUSBRequest::SetStatus(int)>
    9838:	e1a00004 	mov	r0, r4
    983c:	eb0008f2 	bl	bc0c <CDWHCITransferStageData::~CDWHCITransferStageData()>
    9840:	e1a00004 	mov	r0, r4
    9844:	e3a01054 	mov	r1, #84	; 0x54
    9848:	eb000b4c 	bl	c580 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    984c:	e5878018 	str	r8, [r7, #24]
    9850:	eaffff5a 	b	95c0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x238>
    9854:	e1a00004 	mov	r0, r4
    9858:	eb000b10 	bl	c4a0 <CDWHCITransferStageData::GetResultLen() const>
    985c:	e1a01000 	mov	r1, r0
    9860:	e1a00009 	mov	r0, r9
    9864:	eb0026c4 	bl	1337c <CUSBRequest::SetResultLen(unsigned int)>
    9868:	eaffffb8 	b	9750 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3c8>
    986c:	e1a00004 	mov	r0, r4
    9870:	eb000b0a 	bl	c4a0 <CDWHCITransferStageData::GetResultLen() const>
    9874:	e1a01000 	mov	r1, r0
    9878:	e1a00009 	mov	r0, r9
    987c:	eb0026be 	bl	1337c <CUSBRequest::SetResultLen(unsigned int)>
    9880:	eaffff75 	b	965c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2d4>
    9884:	20980510 	.word	0x20980510
    9888:	20980508 	.word	0x20980508
    988c:	000003ff 	.word	0x000003ff
    9890:	0000078c 	.word	0x0000078c
    9894:	00034638 	.word	0x00034638
    9898:	00034884 	.word	0x00034884
    989c:	000003eb 	.word	0x000003eb
    98a0:	0003465c 	.word	0x0003465c
    98a4:	00035260 	.word	0x00035260
    98a8:	000007dc 	.word	0x000007dc
    98ac:	000003c1 	.word	0x000003c1
    98b0:	000346cc 	.word	0x000346cc
    98b4:	000003c3 	.word	0x000003c3
    98b8:	00034758 	.word	0x00034758
    98bc:	000004cc 	.word	0x000004cc
    98c0:	000003e3 	.word	0x000003e3
    98c4:	0003480c 	.word	0x0003480c
    98c8:	10624dd3 	.word	0x10624dd3
    98cc:	00008f7c 	.word	0x00008f7c

000098d0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    98d0:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    98d4:	e3530000 	cmp	r3, #0
    98d8:	112fff1e 	bxne	lr
    98dc:	eafffea9 	b	9388 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>

000098e0 <CDWHCIDevice::InterruptHandler()>:
    98e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    98e4:	e1a07000 	mov	r7, r0
    98e8:	e24dd028 	sub	sp, sp, #40	; 0x28
    98ec:	e3a04000 	mov	r4, #0
    98f0:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    98f4:	e59f10e8 	ldr	r1, [pc, #232]	; 99e4 <CDWHCIDevice::InterruptHandler()+0x104>
    98f8:	e28d0004 	add	r0, sp, #4
    98fc:	eb000761 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9900:	e28d0004 	add	r0, sp, #4
    9904:	eb000768 	bl	b6ac <CDWHCIRegister::Read()>
    9908:	e28d0004 	add	r0, sp, #4
    990c:	eb00077b 	bl	b700 <CDWHCIRegister::Get() const>
    9910:	e3100402 	tst	r0, #33554432	; 0x2000000
    9914:	1a000007 	bne	9938 <CDWHCIDevice::InterruptHandler()+0x58>
    9918:	e28d0004 	add	r0, sp, #4
    991c:	eb000769 	bl	b6c8 <CDWHCIRegister::Write()>
    9920:	e3a03000 	mov	r3, #0
    9924:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9928:	e28d0004 	add	r0, sp, #4
    992c:	eb00075d 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    9930:	e28dd028 	add	sp, sp, #40	; 0x28
    9934:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9938:	e59f10a8 	ldr	r1, [pc, #168]	; 99e8 <CDWHCIDevice::InterruptHandler()+0x108>
    993c:	e28d0010 	add	r0, sp, #16
    9940:	eb000750 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9944:	e28d0010 	add	r0, sp, #16
    9948:	eb000757 	bl	b6ac <CDWHCIRegister::Read()>
    994c:	e28d0010 	add	r0, sp, #16
    9950:	eb00075c 	bl	b6c8 <CDWHCIRegister::Write()>
    9954:	e597300c 	ldr	r3, [r7, #12]
    9958:	e1530004 	cmp	r3, r4
    995c:	0a000019 	beq	99c8 <CDWHCIDevice::InterruptHandler()+0xe8>
    9960:	e3a05001 	mov	r5, #1
    9964:	e1a08004 	mov	r8, r4
    9968:	e59f607c 	ldr	r6, [pc, #124]	; 99ec <CDWHCIDevice::InterruptHandler()+0x10c>
    996c:	ea000005 	b	9988 <CDWHCIDevice::InterruptHandler()+0xa8>
    9970:	e597300c 	ldr	r3, [r7, #12]
    9974:	e2844001 	add	r4, r4, #1
    9978:	e1530004 	cmp	r3, r4
    997c:	e1a05085 	lsl	r5, r5, #1
    9980:	e2866020 	add	r6, r6, #32
    9984:	9a00000f 	bls	99c8 <CDWHCIDevice::InterruptHandler()+0xe8>
    9988:	e28d0010 	add	r0, sp, #16
    998c:	eb00075b 	bl	b700 <CDWHCIRegister::Get() const>
    9990:	e1100005 	tst	r0, r5
    9994:	0afffff5 	beq	9970 <CDWHCIDevice::InterruptHandler()+0x90>
    9998:	e1a02008 	mov	r2, r8
    999c:	e1a01006 	mov	r1, r6
    99a0:	e28d001c 	add	r0, sp, #28
    99a4:	eb00073b 	bl	b698 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    99a8:	e28d001c 	add	r0, sp, #28
    99ac:	eb000745 	bl	b6c8 <CDWHCIRegister::Write()>
    99b0:	e5d73081 	ldrb	r3, [r7, #129]	; 0x81
    99b4:	e3530000 	cmp	r3, #0
    99b8:	0a000005 	beq	99d4 <CDWHCIDevice::InterruptHandler()+0xf4>
    99bc:	e28d001c 	add	r0, sp, #28
    99c0:	eb000738 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    99c4:	eaffffe9 	b	9970 <CDWHCIDevice::InterruptHandler()+0x90>
    99c8:	e28d0010 	add	r0, sp, #16
    99cc:	eb000735 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    99d0:	eaffffd0 	b	9918 <CDWHCIDevice::InterruptHandler()+0x38>
    99d4:	e1a01004 	mov	r1, r4
    99d8:	e1a00007 	mov	r0, r7
    99dc:	ebfffe69 	bl	9388 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>
    99e0:	eafffff5 	b	99bc <CDWHCIDevice::InterruptHandler()+0xdc>
    99e4:	20980014 	.word	0x20980014
    99e8:	20980414 	.word	0x20980414
    99ec:	2098050c 	.word	0x2098050c

000099f0 <CDWHCIDevice::InterruptStub(void*)>:
    99f0:	e3500000 	cmp	r0, #0
    99f4:	0a000000 	beq	99fc <CDWHCIDevice::InterruptStub(void*)+0xc>
    99f8:	eaffffb8 	b	98e0 <CDWHCIDevice::InterruptHandler()>
    99fc:	e92d4010 	push	{r4, lr}
    9a00:	e59f2008 	ldr	r2, [pc, #8]	; 9a10 <CDWHCIDevice::InterruptStub(void*)+0x20>
    9a04:	e59f1008 	ldr	r1, [pc, #8]	; 9a14 <CDWHCIDevice::InterruptStub(void*)+0x24>
    9a08:	e59f0008 	ldr	r0, [pc, #8]	; 9a18 <CDWHCIDevice::InterruptStub(void*)+0x28>
    9a0c:	eb00671b 	bl	23680 <assertion_failed>
    9a10:	00000532 	.word	0x00000532
    9a14:	0003465c 	.word	0x0003465c
    9a18:	0003466c 	.word	0x0003466c

00009a1c <CDWHCIDevice::AllocateWaitBlock()>:
    9a1c:	e92d4070 	push	{r4, r5, r6, lr}
    9a20:	e1a05000 	mov	r5, r0
    9a24:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    9a28:	e3500000 	cmp	r0, #0
    9a2c:	1a000014 	bne	9a84 <CDWHCIDevice::AllocateWaitBlock()+0x68>
    9a30:	e3a04000 	mov	r4, #0
    9a34:	e3a03001 	mov	r3, #1
    9a38:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    9a3c:	e1120003 	tst	r2, r3
    9a40:	0a000007 	beq	9a64 <CDWHCIDevice::AllocateWaitBlock()+0x48>
    9a44:	e2844001 	add	r4, r4, #1
    9a48:	e3540010 	cmp	r4, #16
    9a4c:	e1a03083 	lsl	r3, r3, #1
    9a50:	1afffff8 	bne	9a38 <CDWHCIDevice::AllocateWaitBlock()+0x1c>
    9a54:	e3500000 	cmp	r0, #0
    9a58:	1a000006 	bne	9a78 <CDWHCIDevice::AllocateWaitBlock()+0x5c>
    9a5c:	e1a00004 	mov	r0, r4
    9a60:	e8bd8070 	pop	{r4, r5, r6, pc}
    9a64:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    9a68:	e3500000 	cmp	r0, #0
    9a6c:	e1823003 	orr	r3, r2, r3
    9a70:	e585306c 	str	r3, [r5, #108]	; 0x6c
    9a74:	0afffff8 	beq	9a5c <CDWHCIDevice::AllocateWaitBlock()+0x40>
    9a78:	eb00847a 	bl	2ac68 <LeaveCritical>
    9a7c:	e1a00004 	mov	r0, r4
    9a80:	e8bd8070 	pop	{r4, r5, r6, pc}
    9a84:	eb00844c 	bl	2abbc <EnterCritical>
    9a88:	e5950070 	ldr	r0, [r5, #112]	; 0x70
    9a8c:	eaffffe7 	b	9a30 <CDWHCIDevice::AllocateWaitBlock()+0x14>

00009a90 <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    9a90:	e351000f 	cmp	r1, #15
    9a94:	e92d4070 	push	{r4, r5, r6, lr}
    9a98:	8a000012 	bhi	9ae8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x58>
    9a9c:	e3a05001 	mov	r5, #1
    9aa0:	e1a04000 	mov	r4, r0
    9aa4:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    9aa8:	e1a05115 	lsl	r5, r5, r1
    9aac:	e3500000 	cmp	r0, #0
    9ab0:	1a00000a 	bne	9ae0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x50>
    9ab4:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    9ab8:	e1150003 	tst	r5, r3
    9abc:	0a00000d 	beq	9af8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x68>
    9ac0:	e594106c 	ldr	r1, [r4, #108]	; 0x6c
    9ac4:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    9ac8:	e1c15005 	bic	r5, r1, r5
    9acc:	e3530000 	cmp	r3, #0
    9ad0:	e584506c 	str	r5, [r4, #108]	; 0x6c
    9ad4:	08bd8070 	popeq	{r4, r5, r6, pc}
    9ad8:	e8bd4070 	pop	{r4, r5, r6, lr}
    9adc:	ea008461 	b	2ac68 <LeaveCritical>
    9ae0:	eb008435 	bl	2abbc <EnterCritical>
    9ae4:	eafffff2 	b	9ab4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x24>
    9ae8:	e59f2018 	ldr	r2, [pc, #24]	; 9b08 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x78>
    9aec:	e59f1018 	ldr	r1, [pc, #24]	; 9b0c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    9af0:	e59f0018 	ldr	r0, [pc, #24]	; 9b10 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x80>
    9af4:	eb0066e1 	bl	23680 <assertion_failed>
    9af8:	e59f2014 	ldr	r2, [pc, #20]	; 9b14 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x84>
    9afc:	e59f1008 	ldr	r1, [pc, #8]	; 9b0c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    9b00:	e59f0010 	ldr	r0, [pc, #16]	; 9b18 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x88>
    9b04:	eb0066dd 	bl	23680 <assertion_failed>
    9b08:	0000059d 	.word	0x0000059d
    9b0c:	0003465c 	.word	0x0003465c
    9b10:	00034678 	.word	0x00034678
    9b14:	000005a2 	.word	0x000005a2
    9b18:	000348a8 	.word	0x000348a8

00009b1c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    9b1c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    9b20:	e24dd00c 	sub	sp, sp, #12
    9b24:	e1a07001 	mov	r7, r1
    9b28:	e1a08002 	mov	r8, r2
    9b2c:	e1a09003 	mov	r9, r3
    9b30:	e1a06000 	mov	r6, r0
    9b34:	ebffffb8 	bl	9a1c <CDWHCIDevice::AllocateWaitBlock()>
    9b38:	e350000f 	cmp	r0, #15
    9b3c:	8a000023 	bhi	9bd0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb4>
    9b40:	e3570000 	cmp	r7, #0
    9b44:	0a000030 	beq	9c0c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xf0>
    9b48:	e1a05000 	mov	r5, r0
    9b4c:	e1a03006 	mov	r3, r6
    9b50:	e1a02000 	mov	r2, r0
    9b54:	e59f10c0 	ldr	r1, [pc, #192]	; 9c1c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x100>
    9b58:	e1a00007 	mov	r0, r7
    9b5c:	e0864005 	add	r4, r6, r5
    9b60:	eb00263a 	bl	13450 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    9b64:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    9b68:	e3530000 	cmp	r3, #0
    9b6c:	1a00001b 	bne	9be0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xc4>
    9b70:	e3a01001 	mov	r1, #1
    9b74:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    9b78:	e1a02008 	mov	r2, r8
    9b7c:	e58d3000 	str	r3, [sp]
    9b80:	e1a00006 	mov	r0, r6
    9b84:	e5c4105c 	strb	r1, [r4, #92]	; 0x5c
    9b88:	e1a03009 	mov	r3, r9
    9b8c:	e1a01007 	mov	r1, r7
    9b90:	ebfffd67 	bl	9134 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    9b94:	e2508000 	subs	r8, r0, #0
    9b98:	0a000014 	beq	9bf0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xd4>
    9b9c:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    9ba0:	e3530000 	cmp	r3, #0
    9ba4:	1afffffc 	bne	9b9c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x80>
    9ba8:	e1a01005 	mov	r1, r5
    9bac:	e1a00006 	mov	r0, r6
    9bb0:	ebffffb6 	bl	9a90 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    9bb4:	e1a00007 	mov	r0, r7
    9bb8:	eb0025f1 	bl	13384 <CUSBRequest::GetStatus() const>
    9bbc:	e2908000 	adds	r8, r0, #0
    9bc0:	13a08001 	movne	r8, #1
    9bc4:	e1a00008 	mov	r0, r8
    9bc8:	e28dd00c 	add	sp, sp, #12
    9bcc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    9bd0:	e3a08000 	mov	r8, #0
    9bd4:	e1a00008 	mov	r0, r8
    9bd8:	e28dd00c 	add	sp, sp, #12
    9bdc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    9be0:	e59f2038 	ldr	r2, [pc, #56]	; 9c20 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    9be4:	e59f1038 	ldr	r1, [pc, #56]	; 9c24 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    9be8:	e59f0038 	ldr	r0, [pc, #56]	; 9c28 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    9bec:	eb0066a3 	bl	23680 <assertion_failed>
    9bf0:	e1a00006 	mov	r0, r6
    9bf4:	e5c4805c 	strb	r8, [r4, #92]	; 0x5c
    9bf8:	e1a01005 	mov	r1, r5
    9bfc:	ebffffa3 	bl	9a90 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    9c00:	e1a00008 	mov	r0, r8
    9c04:	e28dd00c 	add	sp, sp, #12
    9c08:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    9c0c:	e3a02e29 	mov	r2, #656	; 0x290
    9c10:	e59f100c 	ldr	r1, [pc, #12]	; 9c24 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    9c14:	e59f0010 	ldr	r0, [pc, #16]	; 9c2c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x110>
    9c18:	eb006698 	bl	23680 <assertion_failed>
    9c1c:	00008520 	.word	0x00008520
    9c20:	00000293 	.word	0x00000293
    9c24:	0003465c 	.word	0x0003465c
    9c28:	000348d0 	.word	0x000348d0
    9c2c:	00034758 	.word	0x00034758

00009c30 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    9c30:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    9c34:	e21330ff 	ands	r3, r3, #255	; 0xff
    9c38:	1a000027 	bne	9cdc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xac>
    9c3c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9c40:	e1a06002 	mov	r6, r2
    9c44:	e24dd00c 	sub	sp, sp, #12
    9c48:	e1a04001 	mov	r4, r1
    9c4c:	e1a05000 	mov	r5, r0
    9c50:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    9c54:	e3510000 	cmp	r1, #0
    9c58:	0a000067 	beq	9dfc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1cc>
    9c5c:	e1a01003 	mov	r1, r3
    9c60:	e1a00004 	mov	r0, r4
    9c64:	eb0025c2 	bl	13374 <CUSBRequest::SetStatus(int)>
    9c68:	e1a00004 	mov	r0, r4
    9c6c:	eb0025b5 	bl	13348 <CUSBRequest::GetEndpoint() const>
    9c70:	eb001059 	bl	dddc <CUSBEndpoint::GetType() const>
    9c74:	e3500000 	cmp	r0, #0
    9c78:	1a000019 	bne	9ce4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xb4>
    9c7c:	e3560000 	cmp	r6, #0
    9c80:	1a000061 	bne	9e0c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1dc>
    9c84:	e1a00004 	mov	r0, r4
    9c88:	eb0025cb 	bl	133bc <CUSBRequest::GetSetupData()>
    9c8c:	e3500000 	cmp	r0, #0
    9c90:	0a000061 	beq	9e1c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1ec>
    9c94:	e1d030d0 	ldrsb	r3, [r0]
    9c98:	e1a00004 	mov	r0, r4
    9c9c:	e3530000 	cmp	r3, #0
    9ca0:	ba000039 	blt	9d8c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x15c>
    9ca4:	eb0025e7 	bl	13448 <CUSBRequest::GetBufLen() const>
    9ca8:	e2507000 	subs	r7, r0, #0
    9cac:	0a000025 	beq	9d48 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x118>
    9cb0:	e58d6000 	str	r6, [sp]
    9cb4:	e1a03006 	mov	r3, r6
    9cb8:	e1a02006 	mov	r2, r6
    9cbc:	e1a01004 	mov	r1, r4
    9cc0:	e1a00005 	mov	r0, r5
    9cc4:	ebffff94 	bl	9b1c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9cc8:	e3500000 	cmp	r0, #0
    9ccc:	1a000056 	bne	9e2c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1fc>
    9cd0:	e3a00000 	mov	r0, #0
    9cd4:	e28dd00c 	add	sp, sp, #12
    9cd8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9cdc:	e3a00000 	mov	r0, #0
    9ce0:	e12fff1e 	bx	lr
    9ce4:	e1a00004 	mov	r0, r4
    9ce8:	eb002596 	bl	13348 <CUSBRequest::GetEndpoint() const>
    9cec:	eb00103a 	bl	dddc <CUSBEndpoint::GetType() const>
    9cf0:	e3500001 	cmp	r0, #1
    9cf4:	1a000057 	bne	9e58 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x228>
    9cf8:	e1a00004 	mov	r0, r4
    9cfc:	eb0025d1 	bl	13448 <CUSBRequest::GetBufLen() const>
    9d00:	e3500000 	cmp	r0, #0
    9d04:	0a00005c 	beq	9e7c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24c>
    9d08:	e1a00004 	mov	r0, r4
    9d0c:	eb00258d 	bl	13348 <CUSBRequest::GetEndpoint() const>
    9d10:	eb001033 	bl	dde4 <CUSBEndpoint::IsDirectionIn() const>
    9d14:	e58d6000 	str	r6, [sp]
    9d18:	e1a02000 	mov	r2, r0
    9d1c:	e1a01004 	mov	r1, r4
    9d20:	e1a00005 	mov	r0, r5
    9d24:	e3a03000 	mov	r3, #0
    9d28:	ebffff7b 	bl	9b1c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9d2c:	e3500000 	cmp	r0, #0
    9d30:	0affffe6 	beq	9cd0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    9d34:	e3a03000 	mov	r3, #0
    9d38:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9d3c:	e3a00001 	mov	r0, #1
    9d40:	e28dd00c 	add	sp, sp, #12
    9d44:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9d48:	e1a03007 	mov	r3, r7
    9d4c:	e58d7000 	str	r7, [sp]
    9d50:	e1a02007 	mov	r2, r7
    9d54:	e1a01004 	mov	r1, r4
    9d58:	e1a00005 	mov	r0, r5
    9d5c:	ebffff6e 	bl	9b1c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9d60:	e3500000 	cmp	r0, #0
    9d64:	13a03001 	movne	r3, #1
    9d68:	158d7000 	strne	r7, [sp]
    9d6c:	0affffd7 	beq	9cd0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    9d70:	e1a01004 	mov	r1, r4
    9d74:	e1a00005 	mov	r0, r5
    9d78:	e1a02003 	mov	r2, r3
    9d7c:	ebffff66 	bl	9b1c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9d80:	e3500000 	cmp	r0, #0
    9d84:	1affffea 	bne	9d34 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x104>
    9d88:	eaffffd0 	b	9cd0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    9d8c:	eb0025ad 	bl	13448 <CUSBRequest::GetBufLen() const>
    9d90:	e3500000 	cmp	r0, #0
    9d94:	0a00003c 	beq	9e8c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    9d98:	e58d6000 	str	r6, [sp]
    9d9c:	e1a03006 	mov	r3, r6
    9da0:	e1a02006 	mov	r2, r6
    9da4:	e1a01004 	mov	r1, r4
    9da8:	e1a00005 	mov	r0, r5
    9dac:	ebffff5a 	bl	9b1c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9db0:	e3500000 	cmp	r0, #0
    9db4:	0affffc5 	beq	9cd0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    9db8:	e58d6000 	str	r6, [sp]
    9dbc:	e1a03006 	mov	r3, r6
    9dc0:	e3a02001 	mov	r2, #1
    9dc4:	e1a01004 	mov	r1, r4
    9dc8:	e1a00005 	mov	r0, r5
    9dcc:	ebffff52 	bl	9b1c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9dd0:	e3500000 	cmp	r0, #0
    9dd4:	0affffbd 	beq	9cd0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    9dd8:	e58d6000 	str	r6, [sp]
    9ddc:	e1a02006 	mov	r2, r6
    9de0:	e1a01004 	mov	r1, r4
    9de4:	e1a00005 	mov	r0, r5
    9de8:	e3a03001 	mov	r3, #1
    9dec:	ebffff4a 	bl	9b1c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9df0:	e3500000 	cmp	r0, #0
    9df4:	0affffb5 	beq	9cd0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    9df8:	eaffffcd 	b	9d34 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x104>
    9dfc:	e3a020cf 	mov	r2, #207	; 0xcf
    9e00:	e59f1094 	ldr	r1, [pc, #148]	; 9e9c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    9e04:	e59f0094 	ldr	r0, [pc, #148]	; 9ea0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x270>
    9e08:	eb00661c 	bl	23680 <assertion_failed>
    9e0c:	e3a020d5 	mov	r2, #213	; 0xd5
    9e10:	e59f1084 	ldr	r1, [pc, #132]	; 9e9c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    9e14:	e59f0088 	ldr	r0, [pc, #136]	; 9ea4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x274>
    9e18:	eb006618 	bl	23680 <assertion_failed>
    9e1c:	e3a020d8 	mov	r2, #216	; 0xd8
    9e20:	e59f1074 	ldr	r1, [pc, #116]	; 9e9c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    9e24:	e59f007c 	ldr	r0, [pc, #124]	; 9ea8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x278>
    9e28:	eb006614 	bl	23680 <assertion_failed>
    9e2c:	e58d6000 	str	r6, [sp]
    9e30:	e1a03006 	mov	r3, r6
    9e34:	e1a02006 	mov	r2, r6
    9e38:	e1a01004 	mov	r1, r4
    9e3c:	e1a00005 	mov	r0, r5
    9e40:	ebffff35 	bl	9b1c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    9e44:	e3500000 	cmp	r0, #0
    9e48:	0affffa0 	beq	9cd0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    9e4c:	e3a03001 	mov	r3, #1
    9e50:	e58d6000 	str	r6, [sp]
    9e54:	eaffffc5 	b	9d70 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x140>
    9e58:	e1a00004 	mov	r0, r4
    9e5c:	eb002539 	bl	13348 <CUSBRequest::GetEndpoint() const>
    9e60:	eb000fdd 	bl	dddc <CUSBEndpoint::GetType() const>
    9e64:	e3500002 	cmp	r0, #2
    9e68:	0affffa2 	beq	9cf8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xc8>
    9e6c:	e3a020fd 	mov	r2, #253	; 0xfd
    9e70:	e59f1024 	ldr	r1, [pc, #36]	; 9e9c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    9e74:	e59f0030 	ldr	r0, [pc, #48]	; 9eac <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x27c>
    9e78:	eb006600 	bl	23680 <assertion_failed>
    9e7c:	e3a020fe 	mov	r2, #254	; 0xfe
    9e80:	e59f1014 	ldr	r1, [pc, #20]	; 9e9c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    9e84:	e59f0024 	ldr	r0, [pc, #36]	; 9eb0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x280>
    9e88:	eb0065fc 	bl	23680 <assertion_failed>
    9e8c:	e3a020dc 	mov	r2, #220	; 0xdc
    9e90:	e59f1004 	ldr	r1, [pc, #4]	; 9e9c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    9e94:	e59f0014 	ldr	r0, [pc, #20]	; 9eb0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x280>
    9e98:	eb0065f8 	bl	23680 <assertion_failed>
    9e9c:	0003465c 	.word	0x0003465c
    9ea0:	00034758 	.word	0x00034758
    9ea4:	000348e8 	.word	0x000348e8
    9ea8:	00034908 	.word	0x00034908
    9eac:	00034780 	.word	0x00034780
    9eb0:	000347f4 	.word	0x000347f4

00009eb4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    9eb4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9eb8:	e2516000 	subs	r6, r1, #0
    9ebc:	e59d4020 	ldr	r4, [sp, #32]
    9ec0:	0a00001f 	beq	9f44 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x90>
    9ec4:	e3520000 	cmp	r2, #0
    9ec8:	e1a05002 	mov	r5, r2
    9ecc:	0a000020 	beq	9f54 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xa0>
    9ed0:	e3540000 	cmp	r4, #0
    9ed4:	11a09003 	movne	r9, r3
    9ed8:	13a08001 	movne	r8, #1
    9edc:	11a07000 	movne	r7, r0
    9ee0:	1029a008 	eorne	sl, r9, r8
    9ee4:	1a000004 	bne	9efc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x48>
    9ee8:	ea00001d 	b	9f64 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xb0>
    9eec:	e1a00008 	mov	r0, r8
    9ef0:	eb007b69 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
    9ef4:	e2544001 	subs	r4, r4, #1
    9ef8:	0a00000f 	beq	9f3c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x88>
    9efc:	e1a00006 	mov	r0, r6
    9f00:	eb0005e9 	bl	b6ac <CDWHCIRegister::Read()>
    9f04:	e1150000 	tst	r5, r0
    9f08:	11a0300a 	movne	r3, sl
    9f0c:	01a03009 	moveq	r3, r9
    9f10:	e3530000 	cmp	r3, #0
    9f14:	0a000006 	beq	9f34 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x80>
    9f18:	e5973008 	ldr	r3, [r7, #8]
    9f1c:	e3530000 	cmp	r3, #0
    9f20:	1afffff1 	bne	9eec <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x38>
    9f24:	e59f2048 	ldr	r2, [pc, #72]	; 9f74 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    9f28:	e59f1048 	ldr	r1, [pc, #72]	; 9f78 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    9f2c:	e59f0048 	ldr	r0, [pc, #72]	; 9f7c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc8>
    9f30:	eb0065d2 	bl	23680 <assertion_failed>
    9f34:	e3a00001 	mov	r0, #1
    9f38:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9f3c:	e1a00004 	mov	r0, r4
    9f40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9f44:	e59f2034 	ldr	r2, [pc, #52]	; 9f80 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xcc>
    9f48:	e59f1028 	ldr	r1, [pc, #40]	; 9f78 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    9f4c:	e59f0030 	ldr	r0, [pc, #48]	; 9f84 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd0>
    9f50:	eb0065ca 	bl	23680 <assertion_failed>
    9f54:	e59f202c 	ldr	r2, [pc, #44]	; 9f88 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd4>
    9f58:	e59f1018 	ldr	r1, [pc, #24]	; 9f78 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    9f5c:	e59f0028 	ldr	r0, [pc, #40]	; 9f8c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd8>
    9f60:	eb0065c6 	bl	23680 <assertion_failed>
    9f64:	e59f2024 	ldr	r2, [pc, #36]	; 9f90 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xdc>
    9f68:	e59f1008 	ldr	r1, [pc, #8]	; 9f78 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    9f6c:	e59f0020 	ldr	r0, [pc, #32]	; 9f94 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe0>
    9f70:	eb0065c2 	bl	23680 <assertion_failed>
    9f74:	000005b3 	.word	0x000005b3
    9f78:	0003465c 	.word	0x0003465c
    9f7c:	000346bc 	.word	0x000346bc
    9f80:	000005ad 	.word	0x000005ad
    9f84:	00034914 	.word	0x00034914
    9f88:	000005ae 	.word	0x000005ae
    9f8c:	00034924 	.word	0x00034924
    9f90:	000005af 	.word	0x000005af
    9f94:	00034930 	.word	0x00034930

00009f98 <CDWHCIDevice::EnableRootPort()>:
    9f98:	e92d4030 	push	{r4, r5, lr}
    9f9c:	e24dd01c 	sub	sp, sp, #28
    9fa0:	e1a05000 	mov	r5, r0
    9fa4:	eb006c67 	bl	25148 <CKernelOptions::Get()>
    9fa8:	e3500000 	cmp	r0, #0
    9fac:	0a00002c 	beq	a064 <CDWHCIDevice::EnableRootPort()+0xcc>
    9fb0:	eb006c57 	bl	25114 <CKernelOptions::GetUSBPowerDelay() const>
    9fb4:	e2504000 	subs	r4, r0, #0
    9fb8:	0a000029 	beq	a064 <CDWHCIDevice::EnableRootPort()+0xcc>
    9fbc:	e59f10a8 	ldr	r1, [pc, #168]	; a06c <CDWHCIDevice::EnableRootPort()+0xd4>
    9fc0:	e28d000c 	add	r0, sp, #12
    9fc4:	eb0005af 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9fc8:	e3a03001 	mov	r3, #1
    9fcc:	e58d4000 	str	r4, [sp]
    9fd0:	e1a00005 	mov	r0, r5
    9fd4:	e28d100c 	add	r1, sp, #12
    9fd8:	e1a02003 	mov	r2, r3
    9fdc:	ebffffb4 	bl	9eb4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    9fe0:	e2504000 	subs	r4, r0, #0
    9fe4:	0a000019 	beq	a050 <CDWHCIDevice::EnableRootPort()+0xb8>
    9fe8:	e3a00064 	mov	r0, #100	; 0x64
    9fec:	eb007b2a 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
    9ff0:	e28d000c 	add	r0, sp, #12
    9ff4:	eb0005ac 	bl	b6ac <CDWHCIRegister::Read()>
    9ff8:	e3e0102e 	mvn	r1, #46	; 0x2e
    9ffc:	e28d000c 	add	r0, sp, #12
    a000:	eb0005dd 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a004:	e3a01c01 	mov	r1, #256	; 0x100
    a008:	e28d000c 	add	r0, sp, #12
    a00c:	eb0005e8 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a010:	e28d000c 	add	r0, sp, #12
    a014:	eb0005ab 	bl	b6c8 <CDWHCIRegister::Write()>
    a018:	e3a00032 	mov	r0, #50	; 0x32
    a01c:	eb007b1e 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
    a020:	e28d000c 	add	r0, sp, #12
    a024:	eb0005a0 	bl	b6ac <CDWHCIRegister::Read()>
    a028:	e3e0102e 	mvn	r1, #46	; 0x2e
    a02c:	e28d000c 	add	r0, sp, #12
    a030:	eb0005d1 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a034:	e3e01c01 	mvn	r1, #256	; 0x100
    a038:	e28d000c 	add	r0, sp, #12
    a03c:	eb0005ce 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a040:	e28d000c 	add	r0, sp, #12
    a044:	eb00059f 	bl	b6c8 <CDWHCIRegister::Write()>
    a048:	e3a00014 	mov	r0, #20
    a04c:	eb007b12 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
    a050:	e28d000c 	add	r0, sp, #12
    a054:	eb000593 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a058:	e1a00004 	mov	r0, r4
    a05c:	e28dd01c 	add	sp, sp, #28
    a060:	e8bd8030 	pop	{r4, r5, pc}
    a064:	e59f4004 	ldr	r4, [pc, #4]	; a070 <CDWHCIDevice::EnableRootPort()+0xd8>
    a068:	eaffffd3 	b	9fbc <CDWHCIDevice::EnableRootPort()+0x24>
    a06c:	20980440 	.word	0x20980440
    a070:	000001fe 	.word	0x000001fe

0000a074 <CDWHCIDevice::Reset()>:
    a074:	e92d4030 	push	{r4, r5, lr}
    a078:	e1a04000 	mov	r4, r0
    a07c:	e3a05064 	mov	r5, #100	; 0x64
    a080:	e24dd01c 	sub	sp, sp, #28
    a084:	e3a02000 	mov	r2, #0
    a088:	e59f1080 	ldr	r1, [pc, #128]	; a110 <CDWHCIDevice::Reset()+0x9c>
    a08c:	e28d000c 	add	r0, sp, #12
    a090:	eb000580 	bl	b698 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a094:	e28d100c 	add	r1, sp, #12
    a098:	e1a00004 	mov	r0, r4
    a09c:	e58d5000 	str	r5, [sp]
    a0a0:	e3a03001 	mov	r3, #1
    a0a4:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    a0a8:	ebffff81 	bl	9eb4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    a0ac:	e3500000 	cmp	r0, #0
    a0b0:	1a000005 	bne	a0cc <CDWHCIDevice::Reset()+0x58>
    a0b4:	e3a04000 	mov	r4, #0
    a0b8:	e28d000c 	add	r0, sp, #12
    a0bc:	eb000579 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a0c0:	e1a00004 	mov	r0, r4
    a0c4:	e28dd01c 	add	sp, sp, #28
    a0c8:	e8bd8030 	pop	{r4, r5, pc}
    a0cc:	e3a01001 	mov	r1, #1
    a0d0:	e28d000c 	add	r0, sp, #12
    a0d4:	eb0005b6 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a0d8:	e28d000c 	add	r0, sp, #12
    a0dc:	eb000579 	bl	b6c8 <CDWHCIRegister::Write()>
    a0e0:	e3a0300a 	mov	r3, #10
    a0e4:	e1a00004 	mov	r0, r4
    a0e8:	e58d3000 	str	r3, [sp]
    a0ec:	e3a02001 	mov	r2, #1
    a0f0:	e3a03000 	mov	r3, #0
    a0f4:	e28d100c 	add	r1, sp, #12
    a0f8:	ebffff6d 	bl	9eb4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    a0fc:	e2504000 	subs	r4, r0, #0
    a100:	0affffeb 	beq	a0b4 <CDWHCIDevice::Reset()+0x40>
    a104:	e1a00005 	mov	r0, r5
    a108:	eb007ae3 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
    a10c:	eaffffe9 	b	a0b8 <CDWHCIDevice::Reset()+0x44>
    a110:	20980010 	.word	0x20980010

0000a114 <CDWHCIDevice::InitCore()>:
    a114:	e92d4030 	push	{r4, r5, lr}
    a118:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    a11c:	e59f1234 	ldr	r1, [pc, #564]	; a358 <CDWHCIDevice::InitCore()+0x244>
    a120:	e1a04000 	mov	r4, r0
    a124:	e28d0004 	add	r0, sp, #4
    a128:	eb000556 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a12c:	e28d0004 	add	r0, sp, #4
    a130:	eb00055d 	bl	b6ac <CDWHCIRegister::Read()>
    a134:	eb006c03 	bl	25148 <CKernelOptions::Get()>
    a138:	eb006bf7 	bl	2511c <CKernelOptions::GetUSBFullSpeed() const>
    a13c:	e3500000 	cmp	r0, #0
    a140:	1a000067 	bne	a2e4 <CDWHCIDevice::InitCore()+0x1d0>
    a144:	e3e01601 	mvn	r1, #1048576	; 0x100000
    a148:	e28d0004 	add	r0, sp, #4
    a14c:	eb00058a 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a150:	e3e01501 	mvn	r1, #4194304	; 0x400000
    a154:	e28d0004 	add	r0, sp, #4
    a158:	eb000587 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a15c:	e28d0004 	add	r0, sp, #4
    a160:	eb000558 	bl	b6c8 <CDWHCIRegister::Write()>
    a164:	e1a00004 	mov	r0, r4
    a168:	ebffffc1 	bl	a074 <CDWHCIDevice::Reset()>
    a16c:	e2505000 	subs	r5, r0, #0
    a170:	0a000055 	beq	a2cc <CDWHCIDevice::InitCore()+0x1b8>
    a174:	e28d0004 	add	r0, sp, #4
    a178:	eb00054b 	bl	b6ac <CDWHCIRegister::Read()>
    a17c:	e3e01010 	mvn	r1, #16
    a180:	e28d0004 	add	r0, sp, #4
    a184:	eb00057c 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a188:	e3e01008 	mvn	r1, #8
    a18c:	e28d0004 	add	r0, sp, #4
    a190:	eb000579 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a194:	e28d0004 	add	r0, sp, #4
    a198:	eb00054a 	bl	b6c8 <CDWHCIRegister::Write()>
    a19c:	e59f11b8 	ldr	r1, [pc, #440]	; a35c <CDWHCIDevice::InitCore()+0x248>
    a1a0:	e28d0010 	add	r0, sp, #16
    a1a4:	eb000537 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a1a8:	e28d0010 	add	r0, sp, #16
    a1ac:	eb00053e 	bl	b6ac <CDWHCIRegister::Read()>
    a1b0:	e28d0010 	add	r0, sp, #16
    a1b4:	eb000551 	bl	b700 <CDWHCIRegister::Get() const>
    a1b8:	e1a001a0 	lsr	r0, r0, #3
    a1bc:	e2000003 	and	r0, r0, #3
    a1c0:	e3500002 	cmp	r0, #2
    a1c4:	1a00005b 	bne	a338 <CDWHCIDevice::InitCore()+0x224>
    a1c8:	e28d0004 	add	r0, sp, #4
    a1cc:	eb000536 	bl	b6ac <CDWHCIRegister::Read()>
    a1d0:	e28d0010 	add	r0, sp, #16
    a1d4:	eb000549 	bl	b700 <CDWHCIRegister::Get() const>
    a1d8:	e1a00320 	lsr	r0, r0, #6
    a1dc:	e2000003 	and	r0, r0, #3
    a1e0:	e3500002 	cmp	r0, #2
    a1e4:	0a000042 	beq	a2f4 <CDWHCIDevice::InitCore()+0x1e0>
    a1e8:	e3e01802 	mvn	r1, #131072	; 0x20000
    a1ec:	e28d0004 	add	r0, sp, #4
    a1f0:	eb000561 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a1f4:	e3e01702 	mvn	r1, #524288	; 0x80000
    a1f8:	e28d0004 	add	r0, sp, #4
    a1fc:	eb00055e 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a200:	e28d0004 	add	r0, sp, #4
    a204:	eb00052f 	bl	b6c8 <CDWHCIRegister::Write()>
    a208:	e594300c 	ldr	r3, [r4, #12]
    a20c:	e3530000 	cmp	r3, #0
    a210:	1a000044 	bne	a328 <CDWHCIDevice::InitCore()+0x214>
    a214:	e28d0010 	add	r0, sp, #16
    a218:	eb000538 	bl	b700 <CDWHCIRegister::Get() const>
    a21c:	e1a00720 	lsr	r0, r0, #14
    a220:	e200000f 	and	r0, r0, #15
    a224:	e2403003 	sub	r3, r0, #3
    a228:	e353000c 	cmp	r3, #12
    a22c:	e2800001 	add	r0, r0, #1
    a230:	e584000c 	str	r0, [r4, #12]
    a234:	8a000043 	bhi	a348 <CDWHCIDevice::InitCore()+0x234>
    a238:	e59f1120 	ldr	r1, [pc, #288]	; a360 <CDWHCIDevice::InitCore()+0x24c>
    a23c:	e28d001c 	add	r0, sp, #28
    a240:	eb000510 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a244:	e28d001c 	add	r0, sp, #28
    a248:	eb000517 	bl	b6ac <CDWHCIRegister::Read()>
    a24c:	e28d001c 	add	r0, sp, #28
    a250:	e3a01020 	mov	r1, #32
    a254:	eb000556 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a258:	e28d001c 	add	r0, sp, #28
    a25c:	e3a01010 	mov	r1, #16
    a260:	eb000553 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a264:	e3e01006 	mvn	r1, #6
    a268:	e28d001c 	add	r0, sp, #28
    a26c:	eb000542 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a270:	e28d001c 	add	r0, sp, #28
    a274:	eb000513 	bl	b6c8 <CDWHCIRegister::Write()>
    a278:	e28d0004 	add	r0, sp, #4
    a27c:	eb00050a 	bl	b6ac <CDWHCIRegister::Read()>
    a280:	e3e01c02 	mvn	r1, #512	; 0x200
    a284:	e28d0004 	add	r0, sp, #4
    a288:	eb00053b 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a28c:	e3e01c01 	mvn	r1, #256	; 0x100
    a290:	e28d0004 	add	r0, sp, #4
    a294:	eb000538 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a298:	e28d0004 	add	r0, sp, #4
    a29c:	eb000509 	bl	b6c8 <CDWHCIRegister::Write()>
    a2a0:	e1a00004 	mov	r0, r4
    a2a4:	ebfff96a 	bl	8854 <CDWHCIDevice::EnableCommonInterrupts()>
    a2a8:	e28d001c 	add	r0, sp, #28
    a2ac:	eb0004fd 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a2b0:	e28d0010 	add	r0, sp, #16
    a2b4:	eb0004fb 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a2b8:	e28d0004 	add	r0, sp, #4
    a2bc:	eb0004f9 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a2c0:	e1a00005 	mov	r0, r5
    a2c4:	e28dd02c 	add	sp, sp, #44	; 0x2c
    a2c8:	e8bd8030 	pop	{r4, r5, pc}
    a2cc:	eb006dde 	bl	25a4c <CLogger::Get()>
    a2d0:	e59f308c 	ldr	r3, [pc, #140]	; a364 <CDWHCIDevice::InitCore()+0x250>
    a2d4:	e3a02001 	mov	r2, #1
    a2d8:	e59f1088 	ldr	r1, [pc, #136]	; a368 <CDWHCIDevice::InitCore()+0x254>
    a2dc:	eb006d17 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a2e0:	eafffff4 	b	a2b8 <CDWHCIDevice::InitCore()+0x1a4>
    a2e4:	e3a01040 	mov	r1, #64	; 0x40
    a2e8:	e28d0004 	add	r0, sp, #4
    a2ec:	eb000530 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a2f0:	eaffff93 	b	a144 <CDWHCIDevice::InitCore()+0x30>
    a2f4:	e28d0010 	add	r0, sp, #16
    a2f8:	eb000500 	bl	b700 <CDWHCIRegister::Get() const>
    a2fc:	e1a00420 	lsr	r0, r0, #8
    a300:	e2000003 	and	r0, r0, #3
    a304:	e3500001 	cmp	r0, #1
    a308:	1affffb6 	bne	a1e8 <CDWHCIDevice::InitCore()+0xd4>
    a30c:	e28d0004 	add	r0, sp, #4
    a310:	e3a01802 	mov	r1, #131072	; 0x20000
    a314:	eb000526 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a318:	e3a01702 	mov	r1, #524288	; 0x80000
    a31c:	e28d0004 	add	r0, sp, #4
    a320:	eb000523 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a324:	eaffffb5 	b	a200 <CDWHCIDevice::InitCore()+0xec>
    a328:	e59f203c 	ldr	r2, [pc, #60]	; a36c <CDWHCIDevice::InitCore()+0x258>
    a32c:	e59f103c 	ldr	r1, [pc, #60]	; a370 <CDWHCIDevice::InitCore()+0x25c>
    a330:	e59f003c 	ldr	r0, [pc, #60]	; a374 <CDWHCIDevice::InitCore()+0x260>
    a334:	eb0064d1 	bl	23680 <assertion_failed>
    a338:	e59f2038 	ldr	r2, [pc, #56]	; a378 <CDWHCIDevice::InitCore()+0x264>
    a33c:	e59f102c 	ldr	r1, [pc, #44]	; a370 <CDWHCIDevice::InitCore()+0x25c>
    a340:	e59f0034 	ldr	r0, [pc, #52]	; a37c <CDWHCIDevice::InitCore()+0x268>
    a344:	eb0064cd 	bl	23680 <assertion_failed>
    a348:	e59f2030 	ldr	r2, [pc, #48]	; a380 <CDWHCIDevice::InitCore()+0x26c>
    a34c:	e59f101c 	ldr	r1, [pc, #28]	; a370 <CDWHCIDevice::InitCore()+0x25c>
    a350:	e59f002c 	ldr	r0, [pc, #44]	; a384 <CDWHCIDevice::InitCore()+0x270>
    a354:	eb0064c9 	bl	23680 <assertion_failed>
    a358:	2098000c 	.word	0x2098000c
    a35c:	20980048 	.word	0x20980048
    a360:	20980008 	.word	0x20980008
    a364:	00034940 	.word	0x00034940
    a368:	00034638 	.word	0x00034638
    a36c:	00000185 	.word	0x00000185
    a370:	0003465c 	.word	0x0003465c
    a374:	00034988 	.word	0x00034988
    a378:	00000175 	.word	0x00000175
    a37c:	00034950 	.word	0x00034950
    a380:	00000187 	.word	0x00000187
    a384:	0003499c 	.word	0x0003499c

0000a388 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    a388:	e92d4030 	push	{r4, r5, lr}
    a38c:	e1a05001 	mov	r5, r1
    a390:	e24dd01c 	sub	sp, sp, #28
    a394:	e3a02000 	mov	r2, #0
    a398:	e1a04000 	mov	r4, r0
    a39c:	e59f107c 	ldr	r1, [pc, #124]	; a420 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x98>
    a3a0:	e28d000c 	add	r0, sp, #12
    a3a4:	eb0004bb 	bl	b698 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a3a8:	e28d000c 	add	r0, sp, #12
    a3ac:	e3a01020 	mov	r1, #32
    a3b0:	eb0004ff 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a3b4:	e28d000c 	add	r0, sp, #12
    a3b8:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    a3bc:	eb0004ee 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a3c0:	e1a01305 	lsl	r1, r5, #6
    a3c4:	e28d000c 	add	r0, sp, #12
    a3c8:	eb0004f9 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a3cc:	e28d000c 	add	r0, sp, #12
    a3d0:	eb0004bc 	bl	b6c8 <CDWHCIRegister::Write()>
    a3d4:	e3a0300a 	mov	r3, #10
    a3d8:	e1a00004 	mov	r0, r4
    a3dc:	e58d3000 	str	r3, [sp]
    a3e0:	e28d100c 	add	r1, sp, #12
    a3e4:	e3a03000 	mov	r3, #0
    a3e8:	e3a02020 	mov	r2, #32
    a3ec:	ebfffeb0 	bl	9eb4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    a3f0:	e3500000 	cmp	r0, #0
    a3f4:	1a000003 	bne	a408 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x80>
    a3f8:	e28d000c 	add	r0, sp, #12
    a3fc:	eb0004a9 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a400:	e28dd01c 	add	sp, sp, #28
    a404:	e8bd8030 	pop	{r4, r5, pc}
    a408:	e3a00001 	mov	r0, #1
    a40c:	eb007a29 	bl	28cb8 <CTimer::SimpleusDelay(unsigned int)>
    a410:	e28d000c 	add	r0, sp, #12
    a414:	eb0004a3 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a418:	e28dd01c 	add	sp, sp, #28
    a41c:	e8bd8030 	pop	{r4, r5, pc}
    a420:	20980010 	.word	0x20980010

0000a424 <CDWHCIDevice::FlushRxFIFO()>:
    a424:	e92d4010 	push	{r4, lr}
    a428:	e24dd018 	sub	sp, sp, #24
    a42c:	e3a02000 	mov	r2, #0
    a430:	e1a04000 	mov	r4, r0
    a434:	e59f1064 	ldr	r1, [pc, #100]	; a4a0 <CDWHCIDevice::FlushRxFIFO()+0x7c>
    a438:	e28d000c 	add	r0, sp, #12
    a43c:	eb000495 	bl	b698 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a440:	e3a01010 	mov	r1, #16
    a444:	e28d000c 	add	r0, sp, #12
    a448:	eb0004d9 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a44c:	e28d000c 	add	r0, sp, #12
    a450:	eb00049c 	bl	b6c8 <CDWHCIRegister::Write()>
    a454:	e3a0300a 	mov	r3, #10
    a458:	e1a00004 	mov	r0, r4
    a45c:	e58d3000 	str	r3, [sp]
    a460:	e28d100c 	add	r1, sp, #12
    a464:	e3a03000 	mov	r3, #0
    a468:	e3a02010 	mov	r2, #16
    a46c:	ebfffe90 	bl	9eb4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    a470:	e3500000 	cmp	r0, #0
    a474:	1a000003 	bne	a488 <CDWHCIDevice::FlushRxFIFO()+0x64>
    a478:	e28d000c 	add	r0, sp, #12
    a47c:	eb000489 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a480:	e28dd018 	add	sp, sp, #24
    a484:	e8bd8010 	pop	{r4, pc}
    a488:	e3a00001 	mov	r0, #1
    a48c:	eb007a09 	bl	28cb8 <CTimer::SimpleusDelay(unsigned int)>
    a490:	e28d000c 	add	r0, sp, #12
    a494:	eb000483 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a498:	e28dd018 	add	sp, sp, #24
    a49c:	e8bd8010 	pop	{r4, pc}
    a4a0:	20980010 	.word	0x20980010

0000a4a4 <CDWHCIDevice::InitHost()>:
    a4a4:	e92d4010 	push	{r4, lr}
    a4a8:	e24dd068 	sub	sp, sp, #104	; 0x68
    a4ac:	e3a02000 	mov	r2, #0
    a4b0:	e59f11cc 	ldr	r1, [pc, #460]	; a684 <CDWHCIDevice::InitHost()+0x1e0>
    a4b4:	e1a04000 	mov	r4, r0
    a4b8:	e28d0008 	add	r0, sp, #8
    a4bc:	eb000475 	bl	b698 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a4c0:	e28d0008 	add	r0, sp, #8
    a4c4:	eb00047f 	bl	b6c8 <CDWHCIRegister::Write()>
    a4c8:	e59f11b8 	ldr	r1, [pc, #440]	; a688 <CDWHCIDevice::InitHost()+0x1e4>
    a4cc:	e28d0014 	add	r0, sp, #20
    a4d0:	eb00046c 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a4d4:	e28d0014 	add	r0, sp, #20
    a4d8:	eb000473 	bl	b6ac <CDWHCIRegister::Read()>
    a4dc:	e28d0014 	add	r0, sp, #20
    a4e0:	e3e01003 	mvn	r1, #3
    a4e4:	eb0004a4 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a4e8:	e59f119c 	ldr	r1, [pc, #412]	; a68c <CDWHCIDevice::InitHost()+0x1e8>
    a4ec:	e28d0020 	add	r0, sp, #32
    a4f0:	eb000464 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a4f4:	e59f1194 	ldr	r1, [pc, #404]	; a690 <CDWHCIDevice::InitHost()+0x1ec>
    a4f8:	e28d002c 	add	r0, sp, #44	; 0x2c
    a4fc:	eb000461 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a500:	e28d0020 	add	r0, sp, #32
    a504:	eb000468 	bl	b6ac <CDWHCIRegister::Read()>
    a508:	e1a00320 	lsr	r0, r0, #6
    a50c:	e2000003 	and	r0, r0, #3
    a510:	e3500002 	cmp	r0, #2
    a514:	0a00004d 	beq	a650 <CDWHCIDevice::InitHost()+0x1ac>
    a518:	e3a01000 	mov	r1, #0
    a51c:	e28d0014 	add	r0, sp, #20
    a520:	eb0004a3 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a524:	e28d0014 	add	r0, sp, #20
    a528:	eb000466 	bl	b6c8 <CDWHCIRegister::Write()>
    a52c:	e3a02b01 	mov	r2, #1024	; 0x400
    a530:	e59f115c 	ldr	r1, [pc, #348]	; a694 <CDWHCIDevice::InitHost()+0x1f0>
    a534:	e28d0038 	add	r0, sp, #56	; 0x38
    a538:	eb000456 	bl	b698 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a53c:	e28d0038 	add	r0, sp, #56	; 0x38
    a540:	eb000460 	bl	b6c8 <CDWHCIRegister::Write()>
    a544:	e3a02000 	mov	r2, #0
    a548:	e59f1148 	ldr	r1, [pc, #328]	; a698 <CDWHCIDevice::InitHost()+0x1f4>
    a54c:	e28d0044 	add	r0, sp, #68	; 0x44
    a550:	eb000450 	bl	b698 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a554:	e28d0044 	add	r0, sp, #68	; 0x44
    a558:	e3a01b01 	mov	r1, #1024	; 0x400
    a55c:	eb000494 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a560:	e3a01301 	mov	r1, #67108864	; 0x4000000
    a564:	e28d0044 	add	r0, sp, #68	; 0x44
    a568:	eb000491 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a56c:	e28d0044 	add	r0, sp, #68	; 0x44
    a570:	eb000454 	bl	b6c8 <CDWHCIRegister::Write()>
    a574:	e3a02000 	mov	r2, #0
    a578:	e59f111c 	ldr	r1, [pc, #284]	; a69c <CDWHCIDevice::InitHost()+0x1f8>
    a57c:	e28d0050 	add	r0, sp, #80	; 0x50
    a580:	eb000444 	bl	b698 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a584:	e28d0050 	add	r0, sp, #80	; 0x50
    a588:	e3a01b02 	mov	r1, #2048	; 0x800
    a58c:	eb000488 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a590:	e3a01301 	mov	r1, #67108864	; 0x4000000
    a594:	e28d0050 	add	r0, sp, #80	; 0x50
    a598:	eb000485 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a59c:	e28d0050 	add	r0, sp, #80	; 0x50
    a5a0:	eb000448 	bl	b6c8 <CDWHCIRegister::Write()>
    a5a4:	e3a01010 	mov	r1, #16
    a5a8:	e1a00004 	mov	r0, r4
    a5ac:	ebffff75 	bl	a388 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    a5b0:	e1a00004 	mov	r0, r4
    a5b4:	ebffff9a 	bl	a424 <CDWHCIDevice::FlushRxFIFO()>
    a5b8:	e59f10e0 	ldr	r1, [pc, #224]	; a6a0 <CDWHCIDevice::InitHost()+0x1fc>
    a5bc:	e28d005c 	add	r0, sp, #92	; 0x5c
    a5c0:	eb000430 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a5c4:	e28d005c 	add	r0, sp, #92	; 0x5c
    a5c8:	eb000437 	bl	b6ac <CDWHCIRegister::Read()>
    a5cc:	e28d005c 	add	r0, sp, #92	; 0x5c
    a5d0:	e3e0102e 	mvn	r1, #46	; 0x2e
    a5d4:	eb000468 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    a5d8:	e28d005c 	add	r0, sp, #92	; 0x5c
    a5dc:	eb000447 	bl	b700 <CDWHCIRegister::Get() const>
    a5e0:	e3100a01 	tst	r0, #4096	; 0x1000
    a5e4:	1a000004 	bne	a5fc <CDWHCIDevice::InitHost()+0x158>
    a5e8:	e28d005c 	add	r0, sp, #92	; 0x5c
    a5ec:	e3a01a01 	mov	r1, #4096	; 0x1000
    a5f0:	eb00046f 	bl	b7b4 <CDWHCIRegister::Or(unsigned int)>
    a5f4:	e28d005c 	add	r0, sp, #92	; 0x5c
    a5f8:	eb000432 	bl	b6c8 <CDWHCIRegister::Write()>
    a5fc:	e1a00004 	mov	r0, r4
    a600:	ebfff8a1 	bl	888c <CDWHCIDevice::EnableHostInterrupts()>
    a604:	e28d005c 	add	r0, sp, #92	; 0x5c
    a608:	eb000426 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a60c:	e28d0050 	add	r0, sp, #80	; 0x50
    a610:	eb000424 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a614:	e28d0044 	add	r0, sp, #68	; 0x44
    a618:	eb000422 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a61c:	e28d0038 	add	r0, sp, #56	; 0x38
    a620:	eb000420 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a624:	e28d002c 	add	r0, sp, #44	; 0x2c
    a628:	eb00041e 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a62c:	e28d0020 	add	r0, sp, #32
    a630:	eb00041c 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a634:	e28d0014 	add	r0, sp, #20
    a638:	eb00041a 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a63c:	e28d0008 	add	r0, sp, #8
    a640:	eb000418 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a644:	e3a00001 	mov	r0, #1
    a648:	e28dd068 	add	sp, sp, #104	; 0x68
    a64c:	e8bd8010 	pop	{r4, pc}
    a650:	e28d0020 	add	r0, sp, #32
    a654:	eb000429 	bl	b700 <CDWHCIRegister::Get() const>
    a658:	e1a01420 	lsr	r1, r0, #8
    a65c:	e2011003 	and	r1, r1, #3
    a660:	e3510001 	cmp	r1, #1
    a664:	1affffab 	bne	a518 <CDWHCIDevice::InitHost()+0x74>
    a668:	e28d002c 	add	r0, sp, #44	; 0x2c
    a66c:	e58d1004 	str	r1, [sp, #4]
    a670:	eb00040d 	bl	b6ac <CDWHCIRegister::Read()>
    a674:	e3100802 	tst	r0, #131072	; 0x20000
    a678:	e59d1004 	ldr	r1, [sp, #4]
    a67c:	1affffa6 	bne	a51c <CDWHCIDevice::InitHost()+0x78>
    a680:	eaffffa4 	b	a518 <CDWHCIDevice::InitHost()+0x74>
    a684:	20980e00 	.word	0x20980e00
    a688:	20980400 	.word	0x20980400
    a68c:	20980048 	.word	0x20980048
    a690:	2098000c 	.word	0x2098000c
    a694:	20980024 	.word	0x20980024
    a698:	20980028 	.word	0x20980028
    a69c:	20980100 	.word	0x20980100
    a6a0:	20980440 	.word	0x20980440

0000a6a4 <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    a6a4:	e92d4030 	push	{r4, r5, lr}
    a6a8:	e24dd01c 	sub	sp, sp, #28
    a6ac:	e1a05001 	mov	r5, r1
    a6b0:	e28d000c 	add	r0, sp, #12
    a6b4:	e1a01002 	mov	r1, r2
    a6b8:	eb0003f2 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a6bc:	e3a03000 	mov	r3, #0
    a6c0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a6c4:	eb006ce0 	bl	25a4c <CLogger::Get()>
    a6c8:	e1a04000 	mov	r4, r0
    a6cc:	e28d000c 	add	r0, sp, #12
    a6d0:	eb0003f5 	bl	b6ac <CDWHCIRegister::Read()>
    a6d4:	e59f3020 	ldr	r3, [pc, #32]	; a6fc <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x58>
    a6d8:	e88d0021 	stm	sp, {r0, r5}
    a6dc:	e3a02004 	mov	r2, #4
    a6e0:	e1a00004 	mov	r0, r4
    a6e4:	e59f1014 	ldr	r1, [pc, #20]	; a700 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    a6e8:	eb006c14 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a6ec:	e28d000c 	add	r0, sp, #12
    a6f0:	eb0003ec 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    a6f4:	e28dd01c 	add	sp, sp, #28
    a6f8:	e8bd8030 	pop	{r4, r5, pc}
    a6fc:	00034698 	.word	0x00034698
    a700:	00034638 	.word	0x00034638

0000a704 <CDWHCIDevice::DumpStatus(unsigned int)>:
    a704:	e92d4070 	push	{r4, r5, r6, lr}
    a708:	e1a05001 	mov	r5, r1
    a70c:	e59f0104 	ldr	r0, [pc, #260]	; a818 <CDWHCIDevice::DumpStatus(unsigned int)+0x114>
    a710:	e59f1104 	ldr	r1, [pc, #260]	; a81c <CDWHCIDevice::DumpStatus(unsigned int)+0x118>
    a714:	ebfff797 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a718:	e59f1100 	ldr	r1, [pc, #256]	; a820 <CDWHCIDevice::DumpStatus(unsigned int)+0x11c>
    a71c:	e59f0100 	ldr	r0, [pc, #256]	; a824 <CDWHCIDevice::DumpStatus(unsigned int)+0x120>
    a720:	ebfff794 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a724:	e59f10fc 	ldr	r1, [pc, #252]	; a828 <CDWHCIDevice::DumpStatus(unsigned int)+0x124>
    a728:	e59f00fc 	ldr	r0, [pc, #252]	; a82c <CDWHCIDevice::DumpStatus(unsigned int)+0x128>
    a72c:	ebfff791 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a730:	e59f10f8 	ldr	r1, [pc, #248]	; a830 <CDWHCIDevice::DumpStatus(unsigned int)+0x12c>
    a734:	e59f00f8 	ldr	r0, [pc, #248]	; a834 <CDWHCIDevice::DumpStatus(unsigned int)+0x130>
    a738:	ebfff78e 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a73c:	e59f10f4 	ldr	r1, [pc, #244]	; a838 <CDWHCIDevice::DumpStatus(unsigned int)+0x134>
    a740:	e59f00f4 	ldr	r0, [pc, #244]	; a83c <CDWHCIDevice::DumpStatus(unsigned int)+0x138>
    a744:	ebfff78b 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a748:	e59f10f0 	ldr	r1, [pc, #240]	; a840 <CDWHCIDevice::DumpStatus(unsigned int)+0x13c>
    a74c:	e59f00f0 	ldr	r0, [pc, #240]	; a844 <CDWHCIDevice::DumpStatus(unsigned int)+0x140>
    a750:	ebfff788 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a754:	e59f10ec 	ldr	r1, [pc, #236]	; a848 <CDWHCIDevice::DumpStatus(unsigned int)+0x144>
    a758:	e59f00ec 	ldr	r0, [pc, #236]	; a84c <CDWHCIDevice::DumpStatus(unsigned int)+0x148>
    a75c:	ebfff785 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a760:	e59f10e8 	ldr	r1, [pc, #232]	; a850 <CDWHCIDevice::DumpStatus(unsigned int)+0x14c>
    a764:	e59f00e8 	ldr	r0, [pc, #232]	; a854 <CDWHCIDevice::DumpStatus(unsigned int)+0x150>
    a768:	ebfff782 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a76c:	e59f10e4 	ldr	r1, [pc, #228]	; a858 <CDWHCIDevice::DumpStatus(unsigned int)+0x154>
    a770:	e59f00e4 	ldr	r0, [pc, #228]	; a85c <CDWHCIDevice::DumpStatus(unsigned int)+0x158>
    a774:	ebfff77f 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a778:	e59f10e0 	ldr	r1, [pc, #224]	; a860 <CDWHCIDevice::DumpStatus(unsigned int)+0x15c>
    a77c:	e59f00e0 	ldr	r0, [pc, #224]	; a864 <CDWHCIDevice::DumpStatus(unsigned int)+0x160>
    a780:	ebfff77c 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a784:	e59f10dc 	ldr	r1, [pc, #220]	; a868 <CDWHCIDevice::DumpStatus(unsigned int)+0x164>
    a788:	e59f00dc 	ldr	r0, [pc, #220]	; a86c <CDWHCIDevice::DumpStatus(unsigned int)+0x168>
    a78c:	ebfff779 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a790:	e59f40d8 	ldr	r4, [pc, #216]	; a870 <CDWHCIDevice::DumpStatus(unsigned int)+0x16c>
    a794:	e59f10d8 	ldr	r1, [pc, #216]	; a874 <CDWHCIDevice::DumpStatus(unsigned int)+0x170>
    a798:	e59f00d8 	ldr	r0, [pc, #216]	; a878 <CDWHCIDevice::DumpStatus(unsigned int)+0x174>
    a79c:	ebfff775 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a7a0:	e59f10d4 	ldr	r1, [pc, #212]	; a87c <CDWHCIDevice::DumpStatus(unsigned int)+0x178>
    a7a4:	e59f00d4 	ldr	r0, [pc, #212]	; a880 <CDWHCIDevice::DumpStatus(unsigned int)+0x17c>
    a7a8:	ebfff772 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a7ac:	e0854004 	add	r4, r5, r4
    a7b0:	e59f10cc 	ldr	r1, [pc, #204]	; a884 <CDWHCIDevice::DumpStatus(unsigned int)+0x180>
    a7b4:	e59f00cc 	ldr	r0, [pc, #204]	; a888 <CDWHCIDevice::DumpStatus(unsigned int)+0x184>
    a7b8:	e1a04284 	lsl	r4, r4, #5
    a7bc:	ebfff76d 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a7c0:	e59f10c4 	ldr	r1, [pc, #196]	; a88c <CDWHCIDevice::DumpStatus(unsigned int)+0x188>
    a7c4:	e59f00c4 	ldr	r0, [pc, #196]	; a890 <CDWHCIDevice::DumpStatus(unsigned int)+0x18c>
    a7c8:	ebfff76a 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a7cc:	e1a01004 	mov	r1, r4
    a7d0:	e59f00bc 	ldr	r0, [pc, #188]	; a894 <CDWHCIDevice::DumpStatus(unsigned int)+0x190>
    a7d4:	ebfff767 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a7d8:	e2841004 	add	r1, r4, #4
    a7dc:	e59f00b4 	ldr	r0, [pc, #180]	; a898 <CDWHCIDevice::DumpStatus(unsigned int)+0x194>
    a7e0:	ebfff764 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a7e4:	e2841008 	add	r1, r4, #8
    a7e8:	e59f00ac 	ldr	r0, [pc, #172]	; a89c <CDWHCIDevice::DumpStatus(unsigned int)+0x198>
    a7ec:	ebfff761 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a7f0:	e284100c 	add	r1, r4, #12
    a7f4:	e59f00a4 	ldr	r0, [pc, #164]	; a8a0 <CDWHCIDevice::DumpStatus(unsigned int)+0x19c>
    a7f8:	ebfff75e 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a7fc:	e2841010 	add	r1, r4, #16
    a800:	e59f009c 	ldr	r0, [pc, #156]	; a8a4 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a0>
    a804:	ebfff75b 	bl	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a808:	e2841014 	add	r1, r4, #20
    a80c:	e59f0094 	ldr	r0, [pc, #148]	; a8a8 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a4>
    a810:	e8bd4070 	pop	{r4, r5, r6, lr}
    a814:	eafff757 	b	8578 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    a818:	000349d4 	.word	0x000349d4
    a81c:	20980000 	.word	0x20980000
    a820:	20980008 	.word	0x20980008
    a824:	000349e0 	.word	0x000349e0
    a828:	2098000c 	.word	0x2098000c
    a82c:	000349e8 	.word	0x000349e8
    a830:	20980010 	.word	0x20980010
    a834:	000349f0 	.word	0x000349f0
    a838:	20980014 	.word	0x20980014
    a83c:	000349f8 	.word	0x000349f8
    a840:	20980018 	.word	0x20980018
    a844:	00034a04 	.word	0x00034a04
    a848:	20980024 	.word	0x20980024
    a84c:	00034a10 	.word	0x00034a10
    a850:	20980028 	.word	0x20980028
    a854:	00034a1c 	.word	0x00034a1c
    a858:	2098002c 	.word	0x2098002c
    a85c:	00034a30 	.word	0x00034a30
    a860:	20980100 	.word	0x20980100
    a864:	00034a40 	.word	0x00034a40
    a868:	20980400 	.word	0x20980400
    a86c:	00034a58 	.word	0x00034a58
    a870:	0104c028 	.word	0x0104c028
    a874:	20980410 	.word	0x20980410
    a878:	00034a64 	.word	0x00034a64
    a87c:	20980414 	.word	0x20980414
    a880:	00034a7c 	.word	0x00034a7c
    a884:	20980418 	.word	0x20980418
    a888:	00034a90 	.word	0x00034a90
    a88c:	20980440 	.word	0x20980440
    a890:	00034aa8 	.word	0x00034aa8
    a894:	00034ab4 	.word	0x00034ab4
    a898:	00034acc 	.word	0x00034acc
    a89c:	00034ae4 	.word	0x00034ae4
    a8a0:	00034af8 	.word	0x00034af8
    a8a4:	00034b10 	.word	0x00034b10
    a8a8:	00034b28 	.word	0x00034b28

0000a8ac <CDWHCIDevice::~CDWHCIDevice()>:
    a8ac:	e3a03001 	mov	r3, #1
    a8b0:	e92d4030 	push	{r4, r5, lr}
    a8b4:	e5901008 	ldr	r1, [r0, #8]
    a8b8:	e59f20bc 	ldr	r2, [pc, #188]	; a97c <CDWHCIDevice::~CDWHCIDevice()+0xd0>
    a8bc:	e3510000 	cmp	r1, #0
    a8c0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    a8c4:	e5802000 	str	r2, [r0]
    a8c8:	e5c03081 	strb	r3, [r0, #129]	; 0x81
    a8cc:	0a000022 	beq	a95c <CDWHCIDevice::~CDWHCIDevice()+0xb0>
    a8d0:	e1a04000 	mov	r4, r0
    a8d4:	e3a000c8 	mov	r0, #200	; 0xc8
    a8d8:	eb0078ef 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
    a8dc:	e5940004 	ldr	r0, [r4, #4]
    a8e0:	e3500000 	cmp	r0, #0
    a8e4:	0a000020 	beq	a96c <CDWHCIDevice::~CDWHCIDevice()+0xc0>
    a8e8:	e3a05000 	mov	r5, #0
    a8ec:	e3a01009 	mov	r1, #9
    a8f0:	eb0081e6 	bl	2b090 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    a8f4:	e1a00004 	mov	r0, r4
    a8f8:	ebfffddd 	bl	a074 <CDWHCIDevice::Reset()>
    a8fc:	e1a01005 	mov	r1, r5
    a900:	e28d000c 	add	r0, sp, #12
    a904:	eb00637e 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    a908:	e3a03014 	mov	r3, #20
    a90c:	e3a01003 	mov	r1, #3
    a910:	e3a0c002 	mov	ip, #2
    a914:	e08d2003 	add	r2, sp, r3
    a918:	e58d1020 	str	r1, [sp, #32]
    a91c:	e28d000c 	add	r0, sp, #12
    a920:	e59f1058 	ldr	r1, [pc, #88]	; a980 <CDWHCIDevice::~CDWHCIDevice()+0xd4>
    a924:	e58d5000 	str	r5, [sp]
    a928:	e58dc024 	str	ip, [sp, #36]	; 0x24
    a92c:	eb006380 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a930:	e5845004 	str	r5, [r4, #4]
    a934:	e5845008 	str	r5, [r4, #8]
    a938:	e28d000c 	add	r0, sp, #12
    a93c:	eb006377 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
    a940:	e2840074 	add	r0, r4, #116	; 0x74
    a944:	eb0003ff 	bl	b948 <CDWHCIRootPort::~CDWHCIRootPort()>
    a948:	e1a00004 	mov	r0, r4
    a94c:	eb001a4e 	bl	1128c <CUSBHostController::~CUSBHostController()>
    a950:	e1a00004 	mov	r0, r4
    a954:	e28dd02c 	add	sp, sp, #44	; 0x2c
    a958:	e8bd8030 	pop	{r4, r5, pc}
    a95c:	e3a0205d 	mov	r2, #93	; 0x5d
    a960:	e59f101c 	ldr	r1, [pc, #28]	; a984 <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    a964:	e59f001c 	ldr	r0, [pc, #28]	; a988 <CDWHCIDevice::~CDWHCIDevice()+0xdc>
    a968:	eb006344 	bl	23680 <assertion_failed>
    a96c:	e3a02060 	mov	r2, #96	; 0x60
    a970:	e59f100c 	ldr	r1, [pc, #12]	; a984 <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    a974:	e59f0010 	ldr	r0, [pc, #16]	; a98c <CDWHCIDevice::~CDWHCIDevice()+0xe0>
    a978:	eb006340 	bl	23680 <assertion_failed>
    a97c:	00034648 	.word	0x00034648
    a980:	00028001 	.word	0x00028001
    a984:	0003465c 	.word	0x0003465c
    a988:	000346bc 	.word	0x000346bc
    a98c:	000346a4 	.word	0x000346a4

0000a990 <CDWHCIDevice::~CDWHCIDevice()>:
    a990:	e92d4010 	push	{r4, lr}
    a994:	e1a04000 	mov	r4, r0
    a998:	ebffffc3 	bl	a8ac <CDWHCIDevice::~CDWHCIDevice()>
    a99c:	e1a00004 	mov	r0, r4
    a9a0:	e3a01084 	mov	r1, #132	; 0x84
    a9a4:	eb007d60 	bl	29f2c <operator delete(void*, unsigned int)>
    a9a8:	e1a00004 	mov	r0, r4
    a9ac:	e8bd8010 	pop	{r4, pc}

0000a9b0 <CDWHCIDevice::ReScanDevices()>:
    a9b0:	e92d4010 	push	{r4, lr}
    a9b4:	e3a03000 	mov	r3, #0
    a9b8:	e1a04000 	mov	r4, r0
    a9bc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a9c0:	e5d03080 	ldrb	r3, [r0, #128]	; 0x80
    a9c4:	e3530000 	cmp	r3, #0
    a9c8:	1a00000e 	bne	aa08 <CDWHCIDevice::ReScanDevices()+0x58>
    a9cc:	ebfffd71 	bl	9f98 <CDWHCIDevice::EnableRootPort()>
    a9d0:	e3500000 	cmp	r0, #0
    a9d4:	0a000010 	beq	aa1c <CDWHCIDevice::ReScanDevices()+0x6c>
    a9d8:	e3a03001 	mov	r3, #1
    a9dc:	e2840074 	add	r0, r4, #116	; 0x74
    a9e0:	e5c43080 	strb	r3, [r4, #128]	; 0x80
    a9e4:	eb00042b 	bl	ba98 <CDWHCIRootPort::Initialize()>
    a9e8:	e3500000 	cmp	r0, #0
    a9ec:	1a000007 	bne	aa10 <CDWHCIDevice::ReScanDevices()+0x60>
    a9f0:	eb006c15 	bl	25a4c <CLogger::Get()>
    a9f4:	e59f3038 	ldr	r3, [pc, #56]	; aa34 <CDWHCIDevice::ReScanDevices()+0x84>
    a9f8:	e3a02002 	mov	r2, #2
    a9fc:	e59f1034 	ldr	r1, [pc, #52]	; aa38 <CDWHCIDevice::ReScanDevices()+0x88>
    aa00:	eb006b4e 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    aa04:	ea000001 	b	aa10 <CDWHCIDevice::ReScanDevices()+0x60>
    aa08:	e2800074 	add	r0, r0, #116	; 0x74
    aa0c:	eb000401 	bl	ba18 <CDWHCIRootPort::ReScanDevices()>
    aa10:	e3a03000 	mov	r3, #0
    aa14:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    aa18:	e8bd8010 	pop	{r4, pc}
    aa1c:	eb006c0a 	bl	25a4c <CLogger::Get()>
    aa20:	e59f3014 	ldr	r3, [pc, #20]	; aa3c <CDWHCIDevice::ReScanDevices()+0x8c>
    aa24:	e3a02002 	mov	r2, #2
    aa28:	e59f1008 	ldr	r1, [pc, #8]	; aa38 <CDWHCIDevice::ReScanDevices()+0x88>
    aa2c:	eb006b43 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    aa30:	eafffff6 	b	aa10 <CDWHCIDevice::ReScanDevices()+0x60>
    aa34:	00034b40 	.word	0x00034b40
    aa38:	00034638 	.word	0x00034638
    aa3c:	00034b5c 	.word	0x00034b5c

0000aa40 <CDWHCIDevice::Initialize()>:
    aa40:	e92d4070 	push	{r4, r5, r6, lr}
    aa44:	e3a01001 	mov	r1, #1
    aa48:	e24dd020 	sub	sp, sp, #32
    aa4c:	e1a04000 	mov	r4, r0
    aa50:	e3a00020 	mov	r0, #32
    aa54:	eb0022e1 	bl	135e0 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    aa58:	e3a01001 	mov	r1, #1
    aa5c:	e3a00010 	mov	r0, #16
    aa60:	eb0006f6 	bl	c640 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    aa64:	e3a01001 	mov	r1, #1
    aa68:	e3a00010 	mov	r0, #16
    aa6c:	eb000137 	bl	af50 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    aa70:	e3a01001 	mov	r1, #1
    aa74:	e3a00010 	mov	r0, #16
    aa78:	eb0002e6 	bl	b618 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    aa7c:	e3a01001 	mov	r1, #1
    aa80:	e3a00010 	mov	r0, #16
    aa84:	eb0001d1 	bl	b1d0 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    aa88:	e3a05000 	mov	r5, #0
    aa8c:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    aa90:	e5943004 	ldr	r3, [r4, #4]
    aa94:	e1530005 	cmp	r3, r5
    aa98:	0a000041 	beq	aba4 <CDWHCIDevice::Initialize()+0x164>
    aa9c:	e5943008 	ldr	r3, [r4, #8]
    aaa0:	e3530000 	cmp	r3, #0
    aaa4:	0a000042 	beq	abb4 <CDWHCIDevice::Initialize()+0x174>
    aaa8:	e59f1164 	ldr	r1, [pc, #356]	; ac14 <CDWHCIDevice::Initialize()+0x1d4>
    aaac:	e28d0008 	add	r0, sp, #8
    aab0:	eb0002f4 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aab4:	e28d0008 	add	r0, sp, #8
    aab8:	eb0002fb 	bl	b6ac <CDWHCIRegister::Read()>
    aabc:	e59f3154 	ldr	r3, [pc, #340]	; ac18 <CDWHCIDevice::Initialize()+0x1d8>
    aac0:	e1500003 	cmp	r0, r3
    aac4:	0a00000f 	beq	ab08 <CDWHCIDevice::Initialize()+0xc8>
    aac8:	eb006bdf 	bl	25a4c <CLogger::Get()>
    aacc:	e1a04000 	mov	r4, r0
    aad0:	e28d0008 	add	r0, sp, #8
    aad4:	eb000309 	bl	b700 <CDWHCIRegister::Get() const>
    aad8:	e59f313c 	ldr	r3, [pc, #316]	; ac1c <CDWHCIDevice::Initialize()+0x1dc>
    aadc:	e58d0000 	str	r0, [sp]
    aae0:	e3a02001 	mov	r2, #1
    aae4:	e1a00004 	mov	r0, r4
    aae8:	e59f1130 	ldr	r1, [pc, #304]	; ac20 <CDWHCIDevice::Initialize()+0x1e0>
    aaec:	e1a06005 	mov	r6, r5
    aaf0:	eb006b12 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    aaf4:	e28d0008 	add	r0, sp, #8
    aaf8:	eb0002ea 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    aafc:	e1a00006 	mov	r0, r6
    ab00:	e28dd020 	add	sp, sp, #32
    ab04:	e8bd8070 	pop	{r4, r5, r6, pc}
    ab08:	e1a00004 	mov	r0, r4
    ab0c:	ebfff724 	bl	87a4 <CDWHCIDevice::PowerOn()>
    ab10:	e2506000 	subs	r6, r0, #0
    ab14:	0a00001c 	beq	ab8c <CDWHCIDevice::Initialize()+0x14c>
    ab18:	e59f1104 	ldr	r1, [pc, #260]	; ac24 <CDWHCIDevice::Initialize()+0x1e4>
    ab1c:	e28d0014 	add	r0, sp, #20
    ab20:	eb0002d8 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ab24:	e28d0014 	add	r0, sp, #20
    ab28:	eb0002df 	bl	b6ac <CDWHCIRegister::Read()>
    ab2c:	e28d0014 	add	r0, sp, #20
    ab30:	e3e01001 	mvn	r1, #1
    ab34:	eb000310 	bl	b77c <CDWHCIRegister::And(unsigned int)>
    ab38:	e28d0014 	add	r0, sp, #20
    ab3c:	eb0002e1 	bl	b6c8 <CDWHCIRegister::Write()>
    ab40:	e5940004 	ldr	r0, [r4, #4]
    ab44:	e3500000 	cmp	r0, #0
    ab48:	0a00002d 	beq	ac04 <CDWHCIDevice::Initialize()+0x1c4>
    ab4c:	e1a03004 	mov	r3, r4
    ab50:	e59f20d0 	ldr	r2, [pc, #208]	; ac28 <CDWHCIDevice::Initialize()+0x1e8>
    ab54:	e3a01009 	mov	r1, #9
    ab58:	eb008118 	bl	2afc0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    ab5c:	e1a00004 	mov	r0, r4
    ab60:	ebfffd6b 	bl	a114 <CDWHCIDevice::InitCore()>
    ab64:	e2506000 	subs	r6, r0, #0
    ab68:	1a000015 	bne	abc4 <CDWHCIDevice::Initialize()+0x184>
    ab6c:	eb006bb6 	bl	25a4c <CLogger::Get()>
    ab70:	e59f30b4 	ldr	r3, [pc, #180]	; ac2c <CDWHCIDevice::Initialize()+0x1ec>
    ab74:	e3a02001 	mov	r2, #1
    ab78:	e59f10a0 	ldr	r1, [pc, #160]	; ac20 <CDWHCIDevice::Initialize()+0x1e0>
    ab7c:	eb006aef 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ab80:	e28d0014 	add	r0, sp, #20
    ab84:	eb0002c7 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    ab88:	eaffffd9 	b	aaf4 <CDWHCIDevice::Initialize()+0xb4>
    ab8c:	eb006bae 	bl	25a4c <CLogger::Get()>
    ab90:	e59f3098 	ldr	r3, [pc, #152]	; ac30 <CDWHCIDevice::Initialize()+0x1f0>
    ab94:	e3a02001 	mov	r2, #1
    ab98:	e59f1080 	ldr	r1, [pc, #128]	; ac20 <CDWHCIDevice::Initialize()+0x1e0>
    ab9c:	eb006ae7 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    aba0:	eaffffd3 	b	aaf4 <CDWHCIDevice::Initialize()+0xb4>
    aba4:	e3a0207a 	mov	r2, #122	; 0x7a
    aba8:	e59f1084 	ldr	r1, [pc, #132]	; ac34 <CDWHCIDevice::Initialize()+0x1f4>
    abac:	e59f0084 	ldr	r0, [pc, #132]	; ac38 <CDWHCIDevice::Initialize()+0x1f8>
    abb0:	eb0062b2 	bl	23680 <assertion_failed>
    abb4:	e3a0207b 	mov	r2, #123	; 0x7b
    abb8:	e59f1074 	ldr	r1, [pc, #116]	; ac34 <CDWHCIDevice::Initialize()+0x1f4>
    abbc:	e59f0078 	ldr	r0, [pc, #120]	; ac3c <CDWHCIDevice::Initialize()+0x1fc>
    abc0:	eb0062ae 	bl	23680 <assertion_failed>
    abc4:	e1a00004 	mov	r0, r4
    abc8:	ebfff710 	bl	8810 <CDWHCIDevice::EnableGlobalInterrupts()>
    abcc:	e1a00004 	mov	r0, r4
    abd0:	ebfffe33 	bl	a4a4 <CDWHCIDevice::InitHost()>
    abd4:	e2506000 	subs	r6, r0, #0
    abd8:	1a000005 	bne	abf4 <CDWHCIDevice::Initialize()+0x1b4>
    abdc:	eb006b9a 	bl	25a4c <CLogger::Get()>
    abe0:	e59f3058 	ldr	r3, [pc, #88]	; ac40 <CDWHCIDevice::Initialize()+0x200>
    abe4:	e3a02001 	mov	r2, #1
    abe8:	e59f1030 	ldr	r1, [pc, #48]	; ac20 <CDWHCIDevice::Initialize()+0x1e0>
    abec:	eb006ad3 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    abf0:	eaffffe2 	b	ab80 <CDWHCIDevice::Initialize()+0x140>
    abf4:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    abf8:	e1a00004 	mov	r0, r4
    abfc:	ebffff6b 	bl	a9b0 <CDWHCIDevice::ReScanDevices()>
    ac00:	eaffffde 	b	ab80 <CDWHCIDevice::Initialize()+0x140>
    ac04:	e3a02090 	mov	r2, #144	; 0x90
    ac08:	e59f1024 	ldr	r1, [pc, #36]	; ac34 <CDWHCIDevice::Initialize()+0x1f4>
    ac0c:	e59f0024 	ldr	r0, [pc, #36]	; ac38 <CDWHCIDevice::Initialize()+0x1f8>
    ac10:	eb00629a 	bl	23680 <assertion_failed>
    ac14:	20980040 	.word	0x20980040
    ac18:	4f54280a 	.word	0x4f54280a
    ac1c:	00034b80 	.word	0x00034b80
    ac20:	00034638 	.word	0x00034638
    ac24:	20980008 	.word	0x20980008
    ac28:	000099f0 	.word	0x000099f0
    ac2c:	00034ba8 	.word	0x00034ba8
    ac30:	00034b98 	.word	0x00034b98
    ac34:	0003465c 	.word	0x0003465c
    ac38:	000346a4 	.word	0x000346a4
    ac3c:	000346bc 	.word	0x000346bc
    ac40:	00034bc0 	.word	0x00034bc0

0000ac44 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    ac44:	e12fff1e 	bx	lr

0000ac48 <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
    ac48:	e3a03000 	mov	r3, #0
    ac4c:	e5803008 	str	r3, [r0, #8]
    ac50:	e12fff1e 	bx	lr

0000ac54 <CDWHCIFrameSchedulerNonPeriodic::WaitForFrame()>:
    ac54:	e12fff1e 	bx	lr

0000ac58 <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
    ac58:	e3a00000 	mov	r0, #0
    ac5c:	e12fff1e 	bx	lr

0000ac60 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
    ac60:	e5903008 	ldr	r3, [r0, #8]
    ac64:	e92d4010 	push	{r4, lr}
    ac68:	e2433001 	sub	r3, r3, #1
    ac6c:	e3530004 	cmp	r3, #4
    ac70:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    ac74:	ea000010 	b	acbc <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x5c>
    ac78:	0000aca4 	.word	0x0000aca4
    ac7c:	0000ac94 	.word	0x0000ac94
    ac80:	0000ac94 	.word	0x0000ac94
    ac84:	0000ac8c 	.word	0x0000ac8c
    ac88:	0000ac8c 	.word	0x0000ac8c
    ac8c:	e3a00000 	mov	r0, #0
    ac90:	e8bd8010 	pop	{r4, pc}
    ac94:	e59f0030 	ldr	r0, [pc, #48]	; accc <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x6c>
    ac98:	eb007806 	bl	28cb8 <CTimer::SimpleusDelay(unsigned int)>
    ac9c:	e3a00001 	mov	r0, #1
    aca0:	e8bd8010 	pop	{r4, pc}
    aca4:	e3a02002 	mov	r2, #2
    aca8:	e3a03003 	mov	r3, #3
    acac:	e5802008 	str	r2, [r0, #8]
    acb0:	e580300c 	str	r3, [r0, #12]
    acb4:	e3a00001 	mov	r0, #1
    acb8:	e8bd8010 	pop	{r4, pc}
    acbc:	e3a0205f 	mov	r2, #95	; 0x5f
    acc0:	e59f1008 	ldr	r1, [pc, #8]	; acd0 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x70>
    acc4:	e59f0008 	ldr	r0, [pc, #8]	; acd4 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x74>
    acc8:	eb00626c 	bl	23680 <assertion_failed>
    accc:	00000271 	.word	0x00000271
    acd0:	00034bfc 	.word	0x00034bfc
    acd4:	00035260 	.word	0x00035260

0000acd8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
    acd8:	e92d4010 	push	{r4, lr}
    acdc:	e5903008 	ldr	r3, [r0, #8]
    ace0:	e24dd010 	sub	sp, sp, #16
    ace4:	e3530000 	cmp	r3, #0
    ace8:	e1a04000 	mov	r4, r0
    acec:	0a000017 	beq	ad50 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x78>
    acf0:	e2433002 	sub	r3, r3, #2
    acf4:	e3530001 	cmp	r3, #1
    acf8:	8a000010 	bhi	ad40 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x68>
    acfc:	e3110001 	tst	r1, #1
    ad00:	13a03004 	movne	r3, #4
    ad04:	15803008 	strne	r3, [r0, #8]
    ad08:	1a00000a 	bne	ad38 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    ad0c:	e3110060 	tst	r1, #96	; 0x60
    ad10:	1a000016 	bne	ad70 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x98>
    ad14:	e3110010 	tst	r1, #16
    ad18:	0a00001f 	beq	ad9c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xc4>
    ad1c:	e590300c 	ldr	r3, [r0, #12]
    ad20:	e3530000 	cmp	r3, #0
    ad24:	e2433001 	sub	r3, r3, #1
    ad28:	e580300c 	str	r3, [r0, #12]
    ad2c:	0a000017 	beq	ad90 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb8>
    ad30:	e3a03003 	mov	r3, #3
    ad34:	e5843008 	str	r3, [r4, #8]
    ad38:	e28dd010 	add	sp, sp, #16
    ad3c:	e8bd8010 	pop	{r4, pc}
    ad40:	e3a0209b 	mov	r2, #155	; 0x9b
    ad44:	e59f1080 	ldr	r1, [pc, #128]	; adcc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf4>
    ad48:	e59f0080 	ldr	r0, [pc, #128]	; add0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    ad4c:	eb00624b 	bl	23680 <assertion_failed>
    ad50:	e3110020 	tst	r1, #32
    ad54:	13a03001 	movne	r3, #1
    ad58:	15803008 	strne	r3, [r0, #8]
    ad5c:	1afffff5 	bne	ad38 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    ad60:	e3a0206b 	mov	r2, #107	; 0x6b
    ad64:	e59f1060 	ldr	r1, [pc, #96]	; adcc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf4>
    ad68:	e59f0064 	ldr	r0, [pc, #100]	; add4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xfc>
    ad6c:	eb006243 	bl	23680 <assertion_failed>
    ad70:	e590300c 	ldr	r3, [r0, #12]
    ad74:	e3530000 	cmp	r3, #0
    ad78:	e2433001 	sub	r3, r3, #1
    ad7c:	e580300c 	str	r3, [r0, #12]
    ad80:	1affffea 	bne	ad30 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x58>
    ad84:	e3a03005 	mov	r3, #5
    ad88:	e5843008 	str	r3, [r4, #8]
    ad8c:	eaffffe9 	b	ad38 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    ad90:	e59f0040 	ldr	r0, [pc, #64]	; add8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x100>
    ad94:	eb0077c7 	bl	28cb8 <CTimer::SimpleusDelay(unsigned int)>
    ad98:	eafffff9 	b	ad84 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xac>
    ad9c:	e58d100c 	str	r1, [sp, #12]
    ada0:	eb006b29 	bl	25a4c <CLogger::Get()>
    ada4:	e59d100c 	ldr	r1, [sp, #12]
    ada8:	e3a02001 	mov	r2, #1
    adac:	e58d1000 	str	r1, [sp]
    adb0:	e59f3024 	ldr	r3, [pc, #36]	; addc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x104>
    adb4:	e59f1024 	ldr	r1, [pc, #36]	; ade0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x108>
    adb8:	eb006a60 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    adbc:	e3a02096 	mov	r2, #150	; 0x96
    adc0:	e59f1004 	ldr	r1, [pc, #4]	; adcc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf4>
    adc4:	e59f0004 	ldr	r0, [pc, #4]	; add0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    adc8:	eb00622c 	bl	23680 <assertion_failed>
    adcc:	00034bfc 	.word	0x00034bfc
    add0:	00035260 	.word	0x00035260
    add4:	00034c14 	.word	0x00034c14
    add8:	00000271 	.word	0x00000271
    addc:	00034c38 	.word	0x00034c38
    ade0:	00034c4c 	.word	0x00034c4c

0000ade4 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
    ade4:	e59f3034 	ldr	r3, [pc, #52]	; ae20 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x3c>
    ade8:	e92d4010 	push	{r4, lr}
    adec:	e5803000 	str	r3, [r0]
    adf0:	e1a04000 	mov	r4, r0
    adf4:	eb0077e1 	bl	28d80 <CTimer::Get()>
    adf8:	e3a03006 	mov	r3, #6
    adfc:	e3500000 	cmp	r0, #0
    ae00:	e9840009 	stmib	r4, {r0, r3}
    ae04:	0a000001 	beq	ae10 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x2c>
    ae08:	e1a00004 	mov	r0, r4
    ae0c:	e8bd8010 	pop	{r4, pc}
    ae10:	e3a0202e 	mov	r2, #46	; 0x2e
    ae14:	e59f1008 	ldr	r1, [pc, #8]	; ae24 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x40>
    ae18:	e59f0008 	ldr	r0, [pc, #8]	; ae28 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x44>
    ae1c:	eb006217 	bl	23680 <assertion_failed>
    ae20:	00034be0 	.word	0x00034be0
    ae24:	00034bfc 	.word	0x00034bfc
    ae28:	000346bc 	.word	0x000346bc

0000ae2c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
    ae2c:	e3500010 	cmp	r0, #16
    ae30:	e92d4010 	push	{r4, lr}
    ae34:	1a000005 	bne	ae50 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x24>
    ae38:	e59f3030 	ldr	r3, [pc, #48]	; ae70 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x44>
    ae3c:	e5930000 	ldr	r0, [r3]
    ae40:	e3500000 	cmp	r0, #0
    ae44:	0a000005 	beq	ae60 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x34>
    ae48:	e8bd4010 	pop	{r4, lr}
    ae4c:	ea006311 	b	23a98 <CClassAllocator::Allocate()>
    ae50:	e3a020bd 	mov	r2, #189	; 0xbd
    ae54:	e59f1018 	ldr	r1, [pc, #24]	; ae74 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    ae58:	e59f0018 	ldr	r0, [pc, #24]	; ae78 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x4c>
    ae5c:	eb006207 	bl	23680 <assertion_failed>
    ae60:	e3a020bd 	mov	r2, #189	; 0xbd
    ae64:	e59f1008 	ldr	r1, [pc, #8]	; ae74 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    ae68:	e59f000c 	ldr	r0, [pc, #12]	; ae7c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x50>
    ae6c:	eb006203 	bl	23680 <assertion_failed>
    ae70:	0003e354 	.word	0x0003e354
    ae74:	00034bfc 	.word	0x00034bfc
    ae78:	00034c54 	.word	0x00034c54
    ae7c:	00034c88 	.word	0x00034c88

0000ae80 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
    ae80:	e3510010 	cmp	r1, #16
    ae84:	e92d4010 	push	{r4, lr}
    ae88:	1a000007 	bne	aeac <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x2c>
    ae8c:	e59f3038 	ldr	r3, [pc, #56]	; aecc <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x4c>
    ae90:	e5933000 	ldr	r3, [r3]
    ae94:	e3530000 	cmp	r3, #0
    ae98:	0a000007 	beq	aebc <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x3c>
    ae9c:	e8bd4010 	pop	{r4, lr}
    aea0:	e1a01000 	mov	r1, r0
    aea4:	e1a00003 	mov	r0, r3
    aea8:	ea006335 	b	23b84 <CClassAllocator::Free(void*)>
    aeac:	e3a020bd 	mov	r2, #189	; 0xbd
    aeb0:	e59f1018 	ldr	r1, [pc, #24]	; aed0 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x50>
    aeb4:	e59f0018 	ldr	r0, [pc, #24]	; aed4 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x54>
    aeb8:	eb0061f0 	bl	23680 <assertion_failed>
    aebc:	e3a020bd 	mov	r2, #189	; 0xbd
    aec0:	e59f1008 	ldr	r1, [pc, #8]	; aed0 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x50>
    aec4:	e59f000c 	ldr	r0, [pc, #12]	; aed8 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x58>
    aec8:	eb0061ec 	bl	23680 <assertion_failed>
    aecc:	0003e354 	.word	0x0003e354
    aed0:	00034bfc 	.word	0x00034bfc
    aed4:	00034c54 	.word	0x00034c54
    aed8:	00034c88 	.word	0x00034c88

0000aedc <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    aedc:	e92d4010 	push	{r4, lr}
    aee0:	e1a04000 	mov	r4, r0
    aee4:	e3a01010 	mov	r1, #16
    aee8:	ebffffe4 	bl	ae80 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>
    aeec:	e1a00004 	mov	r0, r4
    aef0:	e8bd8010 	pop	{r4, pc}

0000aef4 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
    aef4:	e92d4070 	push	{r4, r5, r6, lr}
    aef8:	e59f4040 	ldr	r4, [pc, #64]	; af40 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x4c>
    aefc:	e5943000 	ldr	r3, [r4]
    af00:	e3530000 	cmp	r3, #0
    af04:	1a000009 	bne	af30 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x3c>
    af08:	e1a05000 	mov	r5, r0
    af0c:	e3a0001c 	mov	r0, #28
    af10:	eb007bf7 	bl	29ef4 <operator new(unsigned int)>
    af14:	e1a06000 	mov	r6, r0
    af18:	e1a02005 	mov	r2, r5
    af1c:	e59f3020 	ldr	r3, [pc, #32]	; af44 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x50>
    af20:	e3a01010 	mov	r1, #16
    af24:	eb0062c2 	bl	23a34 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    af28:	e5846000 	str	r6, [r4]
    af2c:	e8bd8070 	pop	{r4, r5, r6, pc}
    af30:	e3a020bd 	mov	r2, #189	; 0xbd
    af34:	e59f100c 	ldr	r1, [pc, #12]	; af48 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x54>
    af38:	e59f000c 	ldr	r0, [pc, #12]	; af4c <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x58>
    af3c:	eb0061cf 	bl	23680 <assertion_failed>
    af40:	0003e354 	.word	0x0003e354
    af44:	00034cb0 	.word	0x00034cb0
    af48:	00034bfc 	.word	0x00034bfc
    af4c:	00034c9c 	.word	0x00034c9c

0000af50 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    af50:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    af54:	e59f4054 	ldr	r4, [pc, #84]	; afb0 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    af58:	e1a05000 	mov	r5, r0
    af5c:	e5940000 	ldr	r0, [r4]
    af60:	e24dd00c 	sub	sp, sp, #12
    af64:	e3500000 	cmp	r0, #0
    af68:	1a00000c 	bne	afa0 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    af6c:	e1a06001 	mov	r6, r1
    af70:	e3a0001c 	mov	r0, #28
    af74:	eb007bde 	bl	29ef4 <operator new(unsigned int)>
    af78:	e59f1034 	ldr	r1, [pc, #52]	; afb4 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    af7c:	e1a03006 	mov	r3, r6
    af80:	e58d1000 	str	r1, [sp]
    af84:	e1a02005 	mov	r2, r5
    af88:	e3a01010 	mov	r1, #16
    af8c:	e1a07000 	mov	r7, r0
    af90:	eb0062b3 	bl	23a64 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    af94:	e5847000 	str	r7, [r4]
    af98:	e28dd00c 	add	sp, sp, #12
    af9c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    afa0:	e3a020bd 	mov	r2, #189	; 0xbd
    afa4:	e59f100c 	ldr	r1, [pc, #12]	; afb8 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    afa8:	e59f000c 	ldr	r0, [pc, #12]	; afbc <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    afac:	eb0061b3 	bl	23680 <assertion_failed>
    afb0:	0003e354 	.word	0x0003e354
    afb4:	00034cb0 	.word	0x00034cb0
    afb8:	00034bfc 	.word	0x00034bfc
    afbc:	00034c9c 	.word	0x00034c9c

0000afc0 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    afc0:	e12fff1e 	bx	lr

0000afc4 <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
    afc4:	e1d000b6 	ldrh	r0, [r0, #6]
    afc8:	e2000001 	and	r0, r0, #1
    afcc:	e12fff1e 	bx	lr

0000afd0 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
    afd0:	e92d4010 	push	{r4, lr}
    afd4:	e3a02026 	mov	r2, #38	; 0x26
    afd8:	e59f1004 	ldr	r1, [pc, #4]	; afe4 <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x14>
    afdc:	e59f0004 	ldr	r0, [pc, #4]	; afe8 <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x18>
    afe0:	eb0061a6 	bl	23680 <assertion_failed>
    afe4:	00034cf4 	.word	0x00034cf4
    afe8:	00035260 	.word	0x00035260

0000afec <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
    afec:	e92d4010 	push	{r4, lr}
    aff0:	e3a0202b 	mov	r2, #43	; 0x2b
    aff4:	e59f1004 	ldr	r1, [pc, #4]	; b000 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x14>
    aff8:	e59f0004 	ldr	r0, [pc, #4]	; b004 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x18>
    affc:	eb00619f 	bl	23680 <assertion_failed>
    b000:	00034cf4 	.word	0x00034cf4
    b004:	00035260 	.word	0x00035260

0000b008 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
    b008:	e92d4010 	push	{r4, lr}
    b00c:	e3a02031 	mov	r2, #49	; 0x31
    b010:	e59f1004 	ldr	r1, [pc, #4]	; b01c <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x14>
    b014:	e59f0004 	ldr	r0, [pc, #4]	; b020 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x18>
    b018:	eb006198 	bl	23680 <assertion_failed>
    b01c:	00034cf4 	.word	0x00034cf4
    b020:	00035260 	.word	0x00035260

0000b024 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()>:
    b024:	e92d4030 	push	{r4, r5, lr}
    b028:	e24dd014 	sub	sp, sp, #20
    b02c:	e1a05000 	mov	r5, r0
    b030:	e59f1050 	ldr	r1, [pc, #80]	; b088 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x64>
    b034:	e28d0004 	add	r0, sp, #4
    b038:	eb000192 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b03c:	e28d0004 	add	r0, sp, #4
    b040:	eb000199 	bl	b6ac <CDWHCIRegister::Read()>
    b044:	e59f4040 	ldr	r4, [pc, #64]	; b08c <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x68>
    b048:	e5d53004 	ldrb	r3, [r5, #4]
    b04c:	e2800001 	add	r0, r0, #1
    b050:	e0000004 	and	r0, r0, r4
    b054:	e3530000 	cmp	r3, #0
    b058:	e1c500b6 	strh	r0, [r5, #6]
    b05c:	1a000005 	bne	b078 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x54>
    b060:	e28d0004 	add	r0, sp, #4
    b064:	eb000190 	bl	b6ac <CDWHCIRegister::Read()>
    b068:	e1d530b6 	ldrh	r3, [r5, #6]
    b06c:	e0000004 	and	r0, r0, r4
    b070:	e1500003 	cmp	r0, r3
    b074:	1afffff9 	bne	b060 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x3c>
    b078:	e28d0004 	add	r0, sp, #4
    b07c:	eb000189 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    b080:	e28dd014 	add	sp, sp, #20
    b084:	e8bd8030 	pop	{r4, r5, pc}
    b088:	20980408 	.word	0x20980408
    b08c:	00003fff 	.word	0x00003fff

0000b090 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
    b090:	e3a02901 	mov	r2, #16384	; 0x4000
    b094:	e59fc00c 	ldr	ip, [pc, #12]	; b0a8 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
    b098:	e5c01004 	strb	r1, [r0, #4]
    b09c:	e580c000 	str	ip, [r0]
    b0a0:	e1c020b6 	strh	r2, [r0, #6]
    b0a4:	e12fff1e 	bx	lr
    b0a8:	00034cd8 	.word	0x00034cd8

0000b0ac <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
    b0ac:	e3500008 	cmp	r0, #8
    b0b0:	e92d4010 	push	{r4, lr}
    b0b4:	1a000005 	bne	b0d0 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x24>
    b0b8:	e59f3030 	ldr	r3, [pc, #48]	; b0f0 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x44>
    b0bc:	e5930000 	ldr	r0, [r3]
    b0c0:	e3500000 	cmp	r0, #0
    b0c4:	0a000005 	beq	b0e0 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x34>
    b0c8:	e8bd4010 	pop	{r4, lr}
    b0cc:	ea006271 	b	23a98 <CClassAllocator::Allocate()>
    b0d0:	e3a0205a 	mov	r2, #90	; 0x5a
    b0d4:	e59f1018 	ldr	r1, [pc, #24]	; b0f4 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    b0d8:	e59f0018 	ldr	r0, [pc, #24]	; b0f8 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x4c>
    b0dc:	eb006167 	bl	23680 <assertion_failed>
    b0e0:	e3a0205a 	mov	r2, #90	; 0x5a
    b0e4:	e59f1008 	ldr	r1, [pc, #8]	; b0f4 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    b0e8:	e59f000c 	ldr	r0, [pc, #12]	; b0fc <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x50>
    b0ec:	eb006163 	bl	23680 <assertion_failed>
    b0f0:	0003e358 	.word	0x0003e358
    b0f4:	00034cf4 	.word	0x00034cf4
    b0f8:	00034d10 	.word	0x00034d10
    b0fc:	00034c88 	.word	0x00034c88

0000b100 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
    b100:	e3510008 	cmp	r1, #8
    b104:	e92d4010 	push	{r4, lr}
    b108:	1a000007 	bne	b12c <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x2c>
    b10c:	e59f3038 	ldr	r3, [pc, #56]	; b14c <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x4c>
    b110:	e5933000 	ldr	r3, [r3]
    b114:	e3530000 	cmp	r3, #0
    b118:	0a000007 	beq	b13c <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x3c>
    b11c:	e8bd4010 	pop	{r4, lr}
    b120:	e1a01000 	mov	r1, r0
    b124:	e1a00003 	mov	r0, r3
    b128:	ea006295 	b	23b84 <CClassAllocator::Free(void*)>
    b12c:	e3a0205a 	mov	r2, #90	; 0x5a
    b130:	e59f1018 	ldr	r1, [pc, #24]	; b150 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x50>
    b134:	e59f0018 	ldr	r0, [pc, #24]	; b154 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x54>
    b138:	eb006150 	bl	23680 <assertion_failed>
    b13c:	e3a0205a 	mov	r2, #90	; 0x5a
    b140:	e59f1008 	ldr	r1, [pc, #8]	; b150 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x50>
    b144:	e59f000c 	ldr	r0, [pc, #12]	; b158 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x58>
    b148:	eb00614c 	bl	23680 <assertion_failed>
    b14c:	0003e358 	.word	0x0003e358
    b150:	00034cf4 	.word	0x00034cf4
    b154:	00034d10 	.word	0x00034d10
    b158:	00034c88 	.word	0x00034c88

0000b15c <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    b15c:	e92d4010 	push	{r4, lr}
    b160:	e1a04000 	mov	r4, r0
    b164:	e3a01008 	mov	r1, #8
    b168:	ebffffe4 	bl	b100 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>
    b16c:	e1a00004 	mov	r0, r4
    b170:	e8bd8010 	pop	{r4, pc}

0000b174 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
    b174:	e92d4070 	push	{r4, r5, r6, lr}
    b178:	e59f4040 	ldr	r4, [pc, #64]	; b1c0 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x4c>
    b17c:	e5943000 	ldr	r3, [r4]
    b180:	e3530000 	cmp	r3, #0
    b184:	1a000009 	bne	b1b0 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x3c>
    b188:	e1a05000 	mov	r5, r0
    b18c:	e3a0001c 	mov	r0, #28
    b190:	eb007b57 	bl	29ef4 <operator new(unsigned int)>
    b194:	e1a06000 	mov	r6, r0
    b198:	e1a02005 	mov	r2, r5
    b19c:	e59f3020 	ldr	r3, [pc, #32]	; b1c4 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x50>
    b1a0:	e3a01008 	mov	r1, #8
    b1a4:	eb006222 	bl	23a34 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    b1a8:	e5846000 	str	r6, [r4]
    b1ac:	e8bd8070 	pop	{r4, r5, r6, pc}
    b1b0:	e3a0205a 	mov	r2, #90	; 0x5a
    b1b4:	e59f100c 	ldr	r1, [pc, #12]	; b1c8 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x54>
    b1b8:	e59f000c 	ldr	r0, [pc, #12]	; b1cc <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x58>
    b1bc:	eb00612f 	bl	23680 <assertion_failed>
    b1c0:	0003e358 	.word	0x0003e358
    b1c4:	00034d40 	.word	0x00034d40
    b1c8:	00034cf4 	.word	0x00034cf4
    b1cc:	00034c9c 	.word	0x00034c9c

0000b1d0 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
    b1d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b1d4:	e59f4054 	ldr	r4, [pc, #84]	; b230 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    b1d8:	e1a05000 	mov	r5, r0
    b1dc:	e5940000 	ldr	r0, [r4]
    b1e0:	e24dd00c 	sub	sp, sp, #12
    b1e4:	e3500000 	cmp	r0, #0
    b1e8:	1a00000c 	bne	b220 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    b1ec:	e1a06001 	mov	r6, r1
    b1f0:	e3a0001c 	mov	r0, #28
    b1f4:	eb007b3e 	bl	29ef4 <operator new(unsigned int)>
    b1f8:	e59f1034 	ldr	r1, [pc, #52]	; b234 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    b1fc:	e1a03006 	mov	r3, r6
    b200:	e58d1000 	str	r1, [sp]
    b204:	e1a02005 	mov	r2, r5
    b208:	e3a01008 	mov	r1, #8
    b20c:	e1a07000 	mov	r7, r0
    b210:	eb006213 	bl	23a64 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    b214:	e5847000 	str	r7, [r4]
    b218:	e28dd00c 	add	sp, sp, #12
    b21c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b220:	e3a0205a 	mov	r2, #90	; 0x5a
    b224:	e59f100c 	ldr	r1, [pc, #12]	; b238 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    b228:	e59f000c 	ldr	r0, [pc, #12]	; b23c <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    b22c:	eb006113 	bl	23680 <assertion_failed>
    b230:	0003e358 	.word	0x0003e358
    b234:	00034d40 	.word	0x00034d40
    b238:	00034cf4 	.word	0x00034cf4
    b23c:	00034c9c 	.word	0x00034c9c

0000b240 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    b240:	e12fff1e 	bx	lr

0000b244 <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
    b244:	e3a02901 	mov	r2, #16384	; 0x4000
    b248:	e3a03000 	mov	r3, #0
    b24c:	e1c021b0 	strh	r2, [r0, #16]
    b250:	e5803008 	str	r3, [r0, #8]
    b254:	e12fff1e 	bx	lr

0000b258 <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
    b258:	e1d001b0 	ldrh	r0, [r0, #16]
    b25c:	e2000001 	and	r0, r0, #1
    b260:	e12fff1e 	bx	lr

0000b264 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()>:
    b264:	e92d4010 	push	{r4, lr}
    b268:	e1a04000 	mov	r4, r0
    b26c:	e24dd010 	sub	sp, sp, #16
    b270:	e28d0004 	add	r0, sp, #4
    b274:	e59f1054 	ldr	r1, [pc, #84]	; b2d0 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x6c>
    b278:	eb000102 	bl	b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b27c:	e1d431b0 	ldrh	r3, [r4, #16]
    b280:	e3530901 	cmp	r3, #16384	; 0x4000
    b284:	0a000009 	beq	b2b0 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x4c>
    b288:	e28d0004 	add	r0, sp, #4
    b28c:	eb000106 	bl	b6ac <CDWHCIRegister::Read()>
    b290:	e1d431b0 	ldrh	r3, [r4, #16]
    b294:	e2000007 	and	r0, r0, #7
    b298:	e1500003 	cmp	r0, r3
    b29c:	1afffff9 	bne	b288 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
    b2a0:	e28d0004 	add	r0, sp, #4
    b2a4:	eb0000ff 	bl	b6a8 <CDWHCIRegister::~CDWHCIRegister()>
    b2a8:	e28dd010 	add	sp, sp, #16
    b2ac:	e8bd8010 	pop	{r4, pc}
    b2b0:	e28d0004 	add	r0, sp, #4
    b2b4:	eb0000fc 	bl	b6ac <CDWHCIRegister::Read()>
    b2b8:	e2803001 	add	r3, r0, #1
    b2bc:	e2033007 	and	r3, r3, #7
    b2c0:	e3530006 	cmp	r3, #6
    b2c4:	03a03007 	moveq	r3, #7
    b2c8:	e1c431b0 	strh	r3, [r4, #16]
    b2cc:	eaffffed 	b	b288 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
    b2d0:	20980408 	.word	0x20980408

0000b2d4 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
    b2d4:	e5903008 	ldr	r3, [r0, #8]
    b2d8:	e92d4010 	push	{r4, lr}
    b2dc:	e2433001 	sub	r3, r3, #1
    b2e0:	e3530004 	cmp	r3, #4
    b2e4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b2e8:	ea00001c 	b	b360 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x8c>
    b2ec:	0000b328 	.word	0x0000b328
    b2f0:	0000b360 	.word	0x0000b360
    b2f4:	0000b308 	.word	0x0000b308
    b2f8:	0000b300 	.word	0x0000b300
    b2fc:	0000b300 	.word	0x0000b300
    b300:	e3a00000 	mov	r0, #0
    b304:	e8bd8010 	pop	{r4, pc}
    b308:	e1d031b0 	ldrh	r3, [r0, #16]
    b30c:	e3530901 	cmp	r3, #16384	; 0x4000
    b310:	0a000016 	beq	b370 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x9c>
    b314:	e2833001 	add	r3, r3, #1
    b318:	e2033007 	and	r3, r3, #7
    b31c:	e1c031b0 	strh	r3, [r0, #16]
    b320:	e3a00001 	mov	r0, #1
    b324:	e8bd8010 	pop	{r4, pc}
    b328:	e3a02002 	mov	r2, #2
    b32c:	e1d031b0 	ldrh	r3, [r0, #16]
    b330:	e5802008 	str	r2, [r0, #8]
    b334:	e3530901 	cmp	r3, #16384	; 0x4000
    b338:	0a000010 	beq	b380 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xac>
    b33c:	e3530005 	cmp	r3, #5
    b340:	13a02003 	movne	r2, #3
    b344:	03a02002 	moveq	r2, #2
    b348:	e2833002 	add	r3, r3, #2
    b34c:	e2033007 	and	r3, r3, #7
    b350:	e1c031b0 	strh	r3, [r0, #16]
    b354:	e580200c 	str	r2, [r0, #12]
    b358:	e3a00001 	mov	r0, #1
    b35c:	e8bd8010 	pop	{r4, pc}
    b360:	e3a0206e 	mov	r2, #110	; 0x6e
    b364:	e59f1024 	ldr	r1, [pc, #36]	; b390 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    b368:	e59f0024 	ldr	r0, [pc, #36]	; b394 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc0>
    b36c:	eb0060c3 	bl	23680 <assertion_failed>
    b370:	e3a02062 	mov	r2, #98	; 0x62
    b374:	e59f1014 	ldr	r1, [pc, #20]	; b390 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    b378:	e59f0018 	ldr	r0, [pc, #24]	; b398 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc4>
    b37c:	eb0060bf 	bl	23680 <assertion_failed>
    b380:	e3a02054 	mov	r2, #84	; 0x54
    b384:	e59f1004 	ldr	r1, [pc, #4]	; b390 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    b388:	e59f0008 	ldr	r0, [pc, #8]	; b398 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc4>
    b38c:	eb0060bb 	bl	23680 <assertion_failed>
    b390:	00034d80 	.word	0x00034d80
    b394:	00035260 	.word	0x00035260
    b398:	00034d98 	.word	0x00034d98

0000b39c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
    b39c:	e92d4010 	push	{r4, lr}
    b3a0:	e5903008 	ldr	r3, [r0, #8]
    b3a4:	e24dd010 	sub	sp, sp, #16
    b3a8:	e3530000 	cmp	r3, #0
    b3ac:	e1a04000 	mov	r4, r0
    b3b0:	0a000014 	beq	b408 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x6c>
    b3b4:	e2433002 	sub	r3, r3, #2
    b3b8:	e3530001 	cmp	r3, #1
    b3bc:	8a00000d 	bhi	b3f8 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x5c>
    b3c0:	e3110001 	tst	r1, #1
    b3c4:	13a03004 	movne	r3, #4
    b3c8:	15803008 	strne	r3, [r0, #8]
    b3cc:	1a000007 	bne	b3f0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    b3d0:	e3110060 	tst	r1, #96	; 0x60
    b3d4:	1a000013 	bne	b428 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x8c>
    b3d8:	e3110010 	tst	r1, #16
    b3dc:	0a00001e 	beq	b45c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xc0>
    b3e0:	e59f00a4 	ldr	r0, [pc, #164]	; b48c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf0>
    b3e4:	eb007633 	bl	28cb8 <CTimer::SimpleusDelay(unsigned int)>
    b3e8:	e3a03005 	mov	r3, #5
    b3ec:	e5843008 	str	r3, [r4, #8]
    b3f0:	e28dd010 	add	sp, sp, #16
    b3f4:	e8bd8010 	pop	{r4, pc}
    b3f8:	e3a020a6 	mov	r2, #166	; 0xa6
    b3fc:	e59f108c 	ldr	r1, [pc, #140]	; b490 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    b400:	e59f008c 	ldr	r0, [pc, #140]	; b494 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
    b404:	eb00609d 	bl	23680 <assertion_failed>
    b408:	e3110020 	tst	r1, #32
    b40c:	13a03001 	movne	r3, #1
    b410:	15803008 	strne	r3, [r0, #8]
    b414:	1afffff5 	bne	b3f0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    b418:	e3a0207a 	mov	r2, #122	; 0x7a
    b41c:	e59f106c 	ldr	r1, [pc, #108]	; b490 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    b420:	e59f0070 	ldr	r0, [pc, #112]	; b498 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xfc>
    b424:	eb006095 	bl	23680 <assertion_failed>
    b428:	e590300c 	ldr	r3, [r0, #12]
    b42c:	e3530000 	cmp	r3, #0
    b430:	e2433001 	sub	r3, r3, #1
    b434:	e580300c 	str	r3, [r0, #12]
    b438:	13a03003 	movne	r3, #3
    b43c:	15803008 	strne	r3, [r0, #8]
    b440:	1affffea 	bne	b3f0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    b444:	e3a03005 	mov	r3, #5
    b448:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    b44c:	e5843008 	str	r3, [r4, #8]
    b450:	e28dd010 	add	sp, sp, #16
    b454:	e8bd4010 	pop	{r4, lr}
    b458:	ea007616 	b	28cb8 <CTimer::SimpleusDelay(unsigned int)>
    b45c:	e58d100c 	str	r1, [sp, #12]
    b460:	eb006979 	bl	25a4c <CLogger::Get()>
    b464:	e59d100c 	ldr	r1, [sp, #12]
    b468:	e3a02001 	mov	r2, #1
    b46c:	e58d1000 	str	r1, [sp]
    b470:	e59f3024 	ldr	r3, [pc, #36]	; b49c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x100>
    b474:	e59f1024 	ldr	r1, [pc, #36]	; b4a0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x104>
    b478:	eb0068b0 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b47c:	e3a020a1 	mov	r2, #161	; 0xa1
    b480:	e59f1008 	ldr	r1, [pc, #8]	; b490 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    b484:	e59f0008 	ldr	r0, [pc, #8]	; b494 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
    b488:	eb00607c 	bl	23680 <assertion_failed>
    b48c:	00000271 	.word	0x00000271
    b490:	00034d80 	.word	0x00034d80
    b494:	00035260 	.word	0x00035260
    b498:	00034c14 	.word	0x00034c14
    b49c:	00034c38 	.word	0x00034c38
    b4a0:	00034c4c 	.word	0x00034c4c

0000b4a4 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
    b4a4:	e59f303c 	ldr	r3, [pc, #60]	; b4e8 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x44>
    b4a8:	e92d4010 	push	{r4, lr}
    b4ac:	e5803000 	str	r3, [r0]
    b4b0:	e1a04000 	mov	r4, r0
    b4b4:	eb007631 	bl	28d80 <CTimer::Get()>
    b4b8:	e3a02006 	mov	r2, #6
    b4bc:	e3a03901 	mov	r3, #16384	; 0x4000
    b4c0:	e3500000 	cmp	r0, #0
    b4c4:	e9840005 	stmib	r4, {r0, r2}
    b4c8:	e1c431b0 	strh	r3, [r4, #16]
    b4cc:	0a000001 	beq	b4d8 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x34>
    b4d0:	e1a00004 	mov	r0, r4
    b4d4:	e8bd8010 	pop	{r4, pc}
    b4d8:	e3a02034 	mov	r2, #52	; 0x34
    b4dc:	e59f1008 	ldr	r1, [pc, #8]	; b4ec <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x48>
    b4e0:	e59f0008 	ldr	r0, [pc, #8]	; b4f0 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x4c>
    b4e4:	eb006065 	bl	23680 <assertion_failed>
    b4e8:	00034d64 	.word	0x00034d64
    b4ec:	00034d80 	.word	0x00034d80
    b4f0:	000346bc 	.word	0x000346bc

0000b4f4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
    b4f4:	e3500014 	cmp	r0, #20
    b4f8:	e92d4010 	push	{r4, lr}
    b4fc:	1a000005 	bne	b518 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x24>
    b500:	e59f3030 	ldr	r3, [pc, #48]	; b538 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x44>
    b504:	e5930000 	ldr	r0, [r3]
    b508:	e3500000 	cmp	r0, #0
    b50c:	0a000005 	beq	b528 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x34>
    b510:	e8bd4010 	pop	{r4, lr}
    b514:	ea00615f 	b	23a98 <CClassAllocator::Allocate()>
    b518:	e3a020e2 	mov	r2, #226	; 0xe2
    b51c:	e59f1018 	ldr	r1, [pc, #24]	; b53c <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    b520:	e59f0018 	ldr	r0, [pc, #24]	; b540 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x4c>
    b524:	eb006055 	bl	23680 <assertion_failed>
    b528:	e3a020e2 	mov	r2, #226	; 0xe2
    b52c:	e59f1008 	ldr	r1, [pc, #8]	; b53c <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    b530:	e59f000c 	ldr	r0, [pc, #12]	; b544 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x50>
    b534:	eb006051 	bl	23680 <assertion_failed>
    b538:	0003e35c 	.word	0x0003e35c
    b53c:	00034d80 	.word	0x00034d80
    b540:	00034db8 	.word	0x00034db8
    b544:	00034c88 	.word	0x00034c88

0000b548 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
    b548:	e3510014 	cmp	r1, #20
    b54c:	e92d4010 	push	{r4, lr}
    b550:	1a000007 	bne	b574 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x2c>
    b554:	e59f3038 	ldr	r3, [pc, #56]	; b594 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x4c>
    b558:	e5933000 	ldr	r3, [r3]
    b55c:	e3530000 	cmp	r3, #0
    b560:	0a000007 	beq	b584 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x3c>
    b564:	e8bd4010 	pop	{r4, lr}
    b568:	e1a01000 	mov	r1, r0
    b56c:	e1a00003 	mov	r0, r3
    b570:	ea006183 	b	23b84 <CClassAllocator::Free(void*)>
    b574:	e3a020e2 	mov	r2, #226	; 0xe2
    b578:	e59f1018 	ldr	r1, [pc, #24]	; b598 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x50>
    b57c:	e59f0018 	ldr	r0, [pc, #24]	; b59c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x54>
    b580:	eb00603e 	bl	23680 <assertion_failed>
    b584:	e3a020e2 	mov	r2, #226	; 0xe2
    b588:	e59f1008 	ldr	r1, [pc, #8]	; b598 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x50>
    b58c:	e59f000c 	ldr	r0, [pc, #12]	; b5a0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x58>
    b590:	eb00603a 	bl	23680 <assertion_failed>
    b594:	0003e35c 	.word	0x0003e35c
    b598:	00034d80 	.word	0x00034d80
    b59c:	00034db8 	.word	0x00034db8
    b5a0:	00034c88 	.word	0x00034c88

0000b5a4 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    b5a4:	e92d4010 	push	{r4, lr}
    b5a8:	e1a04000 	mov	r4, r0
    b5ac:	e3a01014 	mov	r1, #20
    b5b0:	ebffffe4 	bl	b548 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>
    b5b4:	e1a00004 	mov	r0, r4
    b5b8:	e8bd8010 	pop	{r4, pc}

0000b5bc <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
    b5bc:	e92d4070 	push	{r4, r5, r6, lr}
    b5c0:	e59f4040 	ldr	r4, [pc, #64]	; b608 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x4c>
    b5c4:	e5943000 	ldr	r3, [r4]
    b5c8:	e3530000 	cmp	r3, #0
    b5cc:	1a000009 	bne	b5f8 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x3c>
    b5d0:	e1a05000 	mov	r5, r0
    b5d4:	e3a0001c 	mov	r0, #28
    b5d8:	eb007a45 	bl	29ef4 <operator new(unsigned int)>
    b5dc:	e1a06000 	mov	r6, r0
    b5e0:	e1a02005 	mov	r2, r5
    b5e4:	e59f3020 	ldr	r3, [pc, #32]	; b60c <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x50>
    b5e8:	e3a01014 	mov	r1, #20
    b5ec:	eb006110 	bl	23a34 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    b5f0:	e5846000 	str	r6, [r4]
    b5f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    b5f8:	e3a020e2 	mov	r2, #226	; 0xe2
    b5fc:	e59f100c 	ldr	r1, [pc, #12]	; b610 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x54>
    b600:	e59f000c 	ldr	r0, [pc, #12]	; b614 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x58>
    b604:	eb00601d 	bl	23680 <assertion_failed>
    b608:	0003e35c 	.word	0x0003e35c
    b60c:	00034de8 	.word	0x00034de8
    b610:	00034d80 	.word	0x00034d80
    b614:	00034c9c 	.word	0x00034c9c

0000b618 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    b618:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b61c:	e59f4054 	ldr	r4, [pc, #84]	; b678 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    b620:	e1a05000 	mov	r5, r0
    b624:	e5940000 	ldr	r0, [r4]
    b628:	e24dd00c 	sub	sp, sp, #12
    b62c:	e3500000 	cmp	r0, #0
    b630:	1a00000c 	bne	b668 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    b634:	e1a06001 	mov	r6, r1
    b638:	e3a0001c 	mov	r0, #28
    b63c:	eb007a2c 	bl	29ef4 <operator new(unsigned int)>
    b640:	e59f1034 	ldr	r1, [pc, #52]	; b67c <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    b644:	e1a03006 	mov	r3, r6
    b648:	e58d1000 	str	r1, [sp]
    b64c:	e1a02005 	mov	r2, r5
    b650:	e3a01014 	mov	r1, #20
    b654:	e1a07000 	mov	r7, r0
    b658:	eb006101 	bl	23a64 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    b65c:	e5847000 	str	r7, [r4]
    b660:	e28dd00c 	add	sp, sp, #12
    b664:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b668:	e3a020e2 	mov	r2, #226	; 0xe2
    b66c:	e59f100c 	ldr	r1, [pc, #12]	; b680 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    b670:	e59f000c 	ldr	r0, [pc, #12]	; b684 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    b674:	eb006001 	bl	23680 <assertion_failed>
    b678:	0003e35c 	.word	0x0003e35c
    b67c:	00034de8 	.word	0x00034de8
    b680:	00034d80 	.word	0x00034d80
    b684:	00034c9c 	.word	0x00034c9c

0000b688 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    b688:	e3a02000 	mov	r2, #0
    b68c:	e5801004 	str	r1, [r0, #4]
    b690:	e5c02000 	strb	r2, [r0]
    b694:	e12fff1e 	bx	lr

0000b698 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    b698:	e3a0c001 	mov	ip, #1
    b69c:	e9800006 	stmib	r0, {r1, r2}
    b6a0:	e5c0c000 	strb	ip, [r0]
    b6a4:	e12fff1e 	bx	lr

0000b6a8 <CDWHCIRegister::~CDWHCIRegister()>:
    b6a8:	e12fff1e 	bx	lr

0000b6ac <CDWHCIRegister::Read()>:
    b6ac:	e1a03000 	mov	r3, r0
    b6b0:	e3a02001 	mov	r2, #1
    b6b4:	e5901004 	ldr	r1, [r0, #4]
    b6b8:	e5910000 	ldr	r0, [r1]
    b6bc:	e5c32000 	strb	r2, [r3]
    b6c0:	e5830008 	str	r0, [r3, #8]
    b6c4:	e12fff1e 	bx	lr

0000b6c8 <CDWHCIRegister::Write()>:
    b6c8:	e5d03000 	ldrb	r3, [r0]
    b6cc:	e3530000 	cmp	r3, #0
    b6d0:	0a000003 	beq	b6e4 <CDWHCIRegister::Write()+0x1c>
    b6d4:	e5902008 	ldr	r2, [r0, #8]
    b6d8:	e5903004 	ldr	r3, [r0, #4]
    b6dc:	e5832000 	str	r2, [r3]
    b6e0:	e12fff1e 	bx	lr
    b6e4:	e92d4010 	push	{r4, lr}
    b6e8:	e3a02035 	mov	r2, #53	; 0x35
    b6ec:	e59f1004 	ldr	r1, [pc, #4]	; b6f8 <CDWHCIRegister::Write()+0x30>
    b6f0:	e59f0004 	ldr	r0, [pc, #4]	; b6fc <CDWHCIRegister::Write()+0x34>
    b6f4:	eb005fe1 	bl	23680 <assertion_failed>
    b6f8:	00034e08 	.word	0x00034e08
    b6fc:	00034e1c 	.word	0x00034e1c

0000b700 <CDWHCIRegister::Get() const>:
    b700:	e5d03000 	ldrb	r3, [r0]
    b704:	e3530000 	cmp	r3, #0
    b708:	0a000001 	beq	b714 <CDWHCIRegister::Get() const+0x14>
    b70c:	e5900008 	ldr	r0, [r0, #8]
    b710:	e12fff1e 	bx	lr
    b714:	e92d4010 	push	{r4, lr}
    b718:	e3a0203b 	mov	r2, #59	; 0x3b
    b71c:	e59f1004 	ldr	r1, [pc, #4]	; b728 <CDWHCIRegister::Get() const+0x28>
    b720:	e59f0004 	ldr	r0, [pc, #4]	; b72c <CDWHCIRegister::Get() const+0x2c>
    b724:	eb005fd5 	bl	23680 <assertion_failed>
    b728:	00034e08 	.word	0x00034e08
    b72c:	00034e1c 	.word	0x00034e1c

0000b730 <CDWHCIRegister::Set(unsigned int)>:
    b730:	e3a03001 	mov	r3, #1
    b734:	e5801008 	str	r1, [r0, #8]
    b738:	e5c03000 	strb	r3, [r0]
    b73c:	e12fff1e 	bx	lr

0000b740 <CDWHCIRegister::IsSet(unsigned int) const>:
    b740:	e5d03000 	ldrb	r3, [r0]
    b744:	e3530000 	cmp	r3, #0
    b748:	0a000004 	beq	b760 <CDWHCIRegister::IsSet(unsigned int) const+0x20>
    b74c:	e5903008 	ldr	r3, [r0, #8]
    b750:	e1110003 	tst	r1, r3
    b754:	13a00001 	movne	r0, #1
    b758:	03a00000 	moveq	r0, #0
    b75c:	e12fff1e 	bx	lr
    b760:	e92d4010 	push	{r4, lr}
    b764:	e3a02047 	mov	r2, #71	; 0x47
    b768:	e59f1004 	ldr	r1, [pc, #4]	; b774 <CDWHCIRegister::IsSet(unsigned int) const+0x34>
    b76c:	e59f0004 	ldr	r0, [pc, #4]	; b778 <CDWHCIRegister::IsSet(unsigned int) const+0x38>
    b770:	eb005fc2 	bl	23680 <assertion_failed>
    b774:	00034e08 	.word	0x00034e08
    b778:	00034e1c 	.word	0x00034e1c

0000b77c <CDWHCIRegister::And(unsigned int)>:
    b77c:	e5d03000 	ldrb	r3, [r0]
    b780:	e3530000 	cmp	r3, #0
    b784:	0a000003 	beq	b798 <CDWHCIRegister::And(unsigned int)+0x1c>
    b788:	e5903008 	ldr	r3, [r0, #8]
    b78c:	e0011003 	and	r1, r1, r3
    b790:	e5801008 	str	r1, [r0, #8]
    b794:	e12fff1e 	bx	lr
    b798:	e92d4010 	push	{r4, lr}
    b79c:	e3a0204d 	mov	r2, #77	; 0x4d
    b7a0:	e59f1004 	ldr	r1, [pc, #4]	; b7ac <CDWHCIRegister::And(unsigned int)+0x30>
    b7a4:	e59f0004 	ldr	r0, [pc, #4]	; b7b0 <CDWHCIRegister::And(unsigned int)+0x34>
    b7a8:	eb005fb4 	bl	23680 <assertion_failed>
    b7ac:	00034e08 	.word	0x00034e08
    b7b0:	00034e1c 	.word	0x00034e1c

0000b7b4 <CDWHCIRegister::Or(unsigned int)>:
    b7b4:	e5d03000 	ldrb	r3, [r0]
    b7b8:	e3530000 	cmp	r3, #0
    b7bc:	0a000003 	beq	b7d0 <CDWHCIRegister::Or(unsigned int)+0x1c>
    b7c0:	e5903008 	ldr	r3, [r0, #8]
    b7c4:	e1831001 	orr	r1, r3, r1
    b7c8:	e5801008 	str	r1, [r0, #8]
    b7cc:	e12fff1e 	bx	lr
    b7d0:	e92d4010 	push	{r4, lr}
    b7d4:	e3a02053 	mov	r2, #83	; 0x53
    b7d8:	e59f1004 	ldr	r1, [pc, #4]	; b7e4 <CDWHCIRegister::Or(unsigned int)+0x30>
    b7dc:	e59f0004 	ldr	r0, [pc, #4]	; b7e8 <CDWHCIRegister::Or(unsigned int)+0x34>
    b7e0:	eb005fa6 	bl	23680 <assertion_failed>
    b7e4:	00034e08 	.word	0x00034e08
    b7e8:	00034e1c 	.word	0x00034e1c

0000b7ec <CDWHCIRegister::ClearBit(unsigned int)>:
    b7ec:	e5d03000 	ldrb	r3, [r0]
    b7f0:	e92d4010 	push	{r4, lr}
    b7f4:	e3530000 	cmp	r3, #0
    b7f8:	0a000006 	beq	b818 <CDWHCIRegister::ClearBit(unsigned int)+0x2c>
    b7fc:	e351001f 	cmp	r1, #31
    b800:	8a000008 	bhi	b828 <CDWHCIRegister::ClearBit(unsigned int)+0x3c>
    b804:	e3a02001 	mov	r2, #1
    b808:	e5903008 	ldr	r3, [r0, #8]
    b80c:	e1c31112 	bic	r1, r3, r2, lsl r1
    b810:	e5801008 	str	r1, [r0, #8]
    b814:	e8bd8010 	pop	{r4, pc}
    b818:	e3a02059 	mov	r2, #89	; 0x59
    b81c:	e59f1014 	ldr	r1, [pc, #20]	; b838 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    b820:	e59f0014 	ldr	r0, [pc, #20]	; b83c <CDWHCIRegister::ClearBit(unsigned int)+0x50>
    b824:	eb005f95 	bl	23680 <assertion_failed>
    b828:	e3a0205a 	mov	r2, #90	; 0x5a
    b82c:	e59f1004 	ldr	r1, [pc, #4]	; b838 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    b830:	e59f0008 	ldr	r0, [pc, #8]	; b840 <CDWHCIRegister::ClearBit(unsigned int)+0x54>
    b834:	eb005f91 	bl	23680 <assertion_failed>
    b838:	00034e08 	.word	0x00034e08
    b83c:	00034e1c 	.word	0x00034e1c
    b840:	00034e28 	.word	0x00034e28

0000b844 <CDWHCIRegister::SetBit(unsigned int)>:
    b844:	e5d03000 	ldrb	r3, [r0]
    b848:	e92d4010 	push	{r4, lr}
    b84c:	e3530000 	cmp	r3, #0
    b850:	0a000006 	beq	b870 <CDWHCIRegister::SetBit(unsigned int)+0x2c>
    b854:	e351001f 	cmp	r1, #31
    b858:	8a000008 	bhi	b880 <CDWHCIRegister::SetBit(unsigned int)+0x3c>
    b85c:	e3a02001 	mov	r2, #1
    b860:	e5903008 	ldr	r3, [r0, #8]
    b864:	e1831112 	orr	r1, r3, r2, lsl r1
    b868:	e5801008 	str	r1, [r0, #8]
    b86c:	e8bd8010 	pop	{r4, pc}
    b870:	e3a02060 	mov	r2, #96	; 0x60
    b874:	e59f1014 	ldr	r1, [pc, #20]	; b890 <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    b878:	e59f0014 	ldr	r0, [pc, #20]	; b894 <CDWHCIRegister::SetBit(unsigned int)+0x50>
    b87c:	eb005f7f 	bl	23680 <assertion_failed>
    b880:	e3a02061 	mov	r2, #97	; 0x61
    b884:	e59f1004 	ldr	r1, [pc, #4]	; b890 <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    b888:	e59f0008 	ldr	r0, [pc, #8]	; b898 <CDWHCIRegister::SetBit(unsigned int)+0x54>
    b88c:	eb005f7b 	bl	23680 <assertion_failed>
    b890:	00034e08 	.word	0x00034e08
    b894:	00034e1c 	.word	0x00034e1c
    b898:	00034e28 	.word	0x00034e28

0000b89c <CDWHCIRegister::ClearAll()>:
    b89c:	e3a02000 	mov	r2, #0
    b8a0:	e3a03001 	mov	r3, #1
    b8a4:	e5802008 	str	r2, [r0, #8]
    b8a8:	e5c03000 	strb	r3, [r0]
    b8ac:	e12fff1e 	bx	lr

0000b8b0 <CDWHCIRegister::SetAll()>:
    b8b0:	e3e02000 	mvn	r2, #0
    b8b4:	e3a03001 	mov	r3, #1
    b8b8:	e5802008 	str	r2, [r0, #8]
    b8bc:	e5c03000 	strb	r3, [r0]
    b8c0:	e12fff1e 	bx	lr

0000b8c4 <CDWHCIRegister::Dump() const>:
    b8c4:	e92d4010 	push	{r4, lr}
    b8c8:	e5d03000 	ldrb	r3, [r0]
    b8cc:	e24dd008 	sub	sp, sp, #8
    b8d0:	e3530000 	cmp	r3, #0
    b8d4:	e1a04000 	mov	r4, r0
    b8d8:	1a00000a 	bne	b908 <CDWHCIRegister::Dump() const+0x44>
    b8dc:	eb00685a 	bl	25a4c <CLogger::Get()>
    b8e0:	e5942004 	ldr	r2, [r4, #4]
    b8e4:	e59f3050 	ldr	r3, [pc, #80]	; b93c <CDWHCIRegister::Dump() const+0x78>
    b8e8:	e1a02a02 	lsl	r2, r2, #20
    b8ec:	e1a02a22 	lsr	r2, r2, #20
    b8f0:	e58d2000 	str	r2, [sp]
    b8f4:	e59f1044 	ldr	r1, [pc, #68]	; b940 <CDWHCIRegister::Dump() const+0x7c>
    b8f8:	e3a02004 	mov	r2, #4
    b8fc:	eb00678f 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b900:	e28dd008 	add	sp, sp, #8
    b904:	e8bd8010 	pop	{r4, pc}
    b908:	eb00684f 	bl	25a4c <CLogger::Get()>
    b90c:	e5943004 	ldr	r3, [r4, #4]
    b910:	e5942008 	ldr	r2, [r4, #8]
    b914:	e1a03a03 	lsl	r3, r3, #20
    b918:	e1a03a23 	lsr	r3, r3, #20
    b91c:	e58d3000 	str	r3, [sp]
    b920:	e58d2004 	str	r2, [sp, #4]
    b924:	e59f3018 	ldr	r3, [pc, #24]	; b944 <CDWHCIRegister::Dump() const+0x80>
    b928:	e3a02004 	mov	r2, #4
    b92c:	e59f100c 	ldr	r1, [pc, #12]	; b940 <CDWHCIRegister::Dump() const+0x7c>
    b930:	eb006782 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b934:	e28dd008 	add	sp, sp, #8
    b938:	e8bd8010 	pop	{r4, pc}
    b93c:	00034e68 	.word	0x00034e68
    b940:	00034e60 	.word	0x00034e60
    b944:	00034e44 	.word	0x00034e44

0000b948 <CDWHCIRootPort::~CDWHCIRootPort()>:
    b948:	e92d4010 	push	{r4, lr}
    b94c:	e1a04000 	mov	r4, r0
    b950:	e5900008 	ldr	r0, [r0, #8]
    b954:	e59f301c 	ldr	r3, [pc, #28]	; b978 <CDWHCIRootPort::~CDWHCIRootPort()+0x30>
    b958:	e3500000 	cmp	r0, #0
    b95c:	e5843000 	str	r3, [r4]
    b960:	0a000002 	beq	b970 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    b964:	e5903000 	ldr	r3, [r0]
    b968:	e5933004 	ldr	r3, [r3, #4]
    b96c:	e12fff33 	blx	r3
    b970:	e1a00004 	mov	r0, r4
    b974:	e8bd8010 	pop	{r4, pc}
    b978:	00034e90 	.word	0x00034e90

0000b97c <CDWHCIRootPort::~CDWHCIRootPort()>:
    b97c:	e92d4010 	push	{r4, lr}
    b980:	e1a04000 	mov	r4, r0
    b984:	e5900008 	ldr	r0, [r0, #8]
    b988:	e59f3028 	ldr	r3, [pc, #40]	; b9b8 <CDWHCIRootPort::~CDWHCIRootPort()+0x3c>
    b98c:	e3500000 	cmp	r0, #0
    b990:	e5843000 	str	r3, [r4]
    b994:	0a000002 	beq	b9a4 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    b998:	e5903000 	ldr	r3, [r0]
    b99c:	e5933004 	ldr	r3, [r3, #4]
    b9a0:	e12fff33 	blx	r3
    b9a4:	e1a00004 	mov	r0, r4
    b9a8:	e3a0100c 	mov	r1, #12
    b9ac:	eb00795e 	bl	29f2c <operator delete(void*, unsigned int)>
    b9b0:	e1a00004 	mov	r0, r4
    b9b4:	e8bd8010 	pop	{r4, pc}
    b9b8:	00034e90 	.word	0x00034e90

0000b9bc <CDWHCIRootPort::RemoveDevice()>:
    b9bc:	e92d4010 	push	{r4, lr}
    b9c0:	e1a04000 	mov	r4, r0
    b9c4:	e5900004 	ldr	r0, [r0, #4]
    b9c8:	e3500000 	cmp	r0, #0
    b9cc:	0a00000b 	beq	ba00 <CDWHCIRootPort::RemoveDevice()+0x44>
    b9d0:	e3a01000 	mov	r1, #0
    b9d4:	ebfff359 	bl	8740 <CDWHCIDevice::DisableRootPort(bool)>
    b9d8:	e5940008 	ldr	r0, [r4, #8]
    b9dc:	e3500000 	cmp	r0, #0
    b9e0:	0a000002 	beq	b9f0 <CDWHCIRootPort::RemoveDevice()+0x34>
    b9e4:	e5903000 	ldr	r3, [r0]
    b9e8:	e5933004 	ldr	r3, [r3, #4]
    b9ec:	e12fff33 	blx	r3
    b9f0:	e3a03000 	mov	r3, #0
    b9f4:	e3a00001 	mov	r0, #1
    b9f8:	e5843008 	str	r3, [r4, #8]
    b9fc:	e8bd8010 	pop	{r4, pc}
    ba00:	e3a0206d 	mov	r2, #109	; 0x6d
    ba04:	e59f1004 	ldr	r1, [pc, #4]	; ba10 <CDWHCIRootPort::RemoveDevice()+0x54>
    ba08:	e59f0004 	ldr	r0, [pc, #4]	; ba14 <CDWHCIRootPort::RemoveDevice()+0x58>
    ba0c:	eb005f1b 	bl	23680 <assertion_failed>
    ba10:	00034ea8 	.word	0x00034ea8
    ba14:	00034ebc 	.word	0x00034ebc

0000ba18 <CDWHCIRootPort::ReScanDevices()>:
    ba18:	e92d4010 	push	{r4, lr}
    ba1c:	e5904008 	ldr	r4, [r0, #8]
    ba20:	e3540000 	cmp	r4, #0
    ba24:	0a000002 	beq	ba34 <CDWHCIRootPort::ReScanDevices()+0x1c>
    ba28:	e1a00004 	mov	r0, r4
    ba2c:	e8bd4010 	pop	{r4, lr}
    ba30:	ea0003f8 	b	ca18 <CUSBDevice::ReScanDevices()>
    ba34:	eb006804 	bl	25a4c <CLogger::Get()>
    ba38:	e59f3010 	ldr	r3, [pc, #16]	; ba50 <CDWHCIRootPort::ReScanDevices()+0x38>
    ba3c:	e3a02002 	mov	r2, #2
    ba40:	e59f100c 	ldr	r1, [pc, #12]	; ba54 <CDWHCIRootPort::ReScanDevices()+0x3c>
    ba44:	eb00673d 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ba48:	e1a00004 	mov	r0, r4
    ba4c:	e8bd8010 	pop	{r4, pc}
    ba50:	00034ecc 	.word	0x00034ecc
    ba54:	00034ea0 	.word	0x00034ea0

0000ba58 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
    ba58:	e3a02000 	mov	r2, #0
    ba5c:	e59fc028 	ldr	ip, [pc, #40]	; ba8c <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x34>
    ba60:	e1510002 	cmp	r1, r2
    ba64:	e5801004 	str	r1, [r0, #4]
    ba68:	e580c000 	str	ip, [r0]
    ba6c:	e5802008 	str	r2, [r0, #8]
    ba70:	0a000000 	beq	ba78 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x20>
    ba74:	e12fff1e 	bx	lr
    ba78:	e92d4010 	push	{r4, lr}
    ba7c:	e3a0201f 	mov	r2, #31
    ba80:	e59f1008 	ldr	r1, [pc, #8]	; ba90 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x38>
    ba84:	e59f0008 	ldr	r0, [pc, #8]	; ba94 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x3c>
    ba88:	eb005efc 	bl	23680 <assertion_failed>
    ba8c:	00034e90 	.word	0x00034e90
    ba90:	00034ea8 	.word	0x00034ea8
    ba94:	00034ebc 	.word	0x00034ebc

0000ba98 <CDWHCIRootPort::Initialize()>:
    ba98:	e92d4070 	push	{r4, r5, r6, lr}
    ba9c:	e1a04000 	mov	r4, r0
    baa0:	e5900004 	ldr	r0, [r0, #4]
    baa4:	e3500000 	cmp	r0, #0
    baa8:	0a00002b 	beq	bb5c <CDWHCIRootPort::Initialize()+0xc4>
    baac:	ebfff2ff 	bl	86b0 <CDWHCIDevice::GetPortSpeed()>
    bab0:	e3500004 	cmp	r0, #4
    bab4:	e1a05000 	mov	r5, r0
    bab8:	0a000040 	beq	bbc0 <CDWHCIRootPort::Initialize()+0x128>
    babc:	e5943008 	ldr	r3, [r4, #8]
    bac0:	e3530000 	cmp	r3, #0
    bac4:	1a000044 	bne	bbdc <CDWHCIRootPort::Initialize()+0x144>
    bac8:	e3a00058 	mov	r0, #88	; 0x58
    bacc:	eb007908 	bl	29ef4 <operator new(unsigned int)>
    bad0:	e1a06000 	mov	r6, r0
    bad4:	e1a03004 	mov	r3, r4
    bad8:	e1a02005 	mov	r2, r5
    badc:	e5941004 	ldr	r1, [r4, #4]
    bae0:	eb000344 	bl	c7f8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>
    bae4:	e5846008 	str	r6, [r4, #8]
    bae8:	e1a00006 	mov	r0, r6
    baec:	eb0004f6 	bl	cecc <CUSBDevice::Initialize()>
    baf0:	e3500000 	cmp	r0, #0
    baf4:	e5940008 	ldr	r0, [r4, #8]
    baf8:	1a000009 	bne	bb24 <CDWHCIRootPort::Initialize()+0x8c>
    bafc:	e3500000 	cmp	r0, #0
    bb00:	0a000002 	beq	bb10 <CDWHCIRootPort::Initialize()+0x78>
    bb04:	e5903000 	ldr	r3, [r0]
    bb08:	e5933004 	ldr	r3, [r3, #4]
    bb0c:	e12fff33 	blx	r3
    bb10:	e3a00000 	mov	r0, #0
    bb14:	e1a05000 	mov	r5, r0
    bb18:	e5840008 	str	r0, [r4, #8]
    bb1c:	e1a00005 	mov	r0, r5
    bb20:	e8bd8070 	pop	{r4, r5, r6, pc}
    bb24:	e5903000 	ldr	r3, [r0]
    bb28:	e593300c 	ldr	r3, [r3, #12]
    bb2c:	e12fff33 	blx	r3
    bb30:	e2505000 	subs	r5, r0, #0
    bb34:	1a00000c 	bne	bb6c <CDWHCIRootPort::Initialize()+0xd4>
    bb38:	eb0067c3 	bl	25a4c <CLogger::Get()>
    bb3c:	e59f30a8 	ldr	r3, [pc, #168]	; bbec <CDWHCIRootPort::Initialize()+0x154>
    bb40:	e3a02002 	mov	r2, #2
    bb44:	e59f10a4 	ldr	r1, [pc, #164]	; bbf0 <CDWHCIRootPort::Initialize()+0x158>
    bb48:	eb0066fc 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bb4c:	e5940008 	ldr	r0, [r4, #8]
    bb50:	e3500000 	cmp	r0, #0
    bb54:	1affffea 	bne	bb04 <CDWHCIRootPort::Initialize()+0x6c>
    bb58:	eaffffec 	b	bb10 <CDWHCIRootPort::Initialize()+0x78>
    bb5c:	e3a0202c 	mov	r2, #44	; 0x2c
    bb60:	e59f108c 	ldr	r1, [pc, #140]	; bbf4 <CDWHCIRootPort::Initialize()+0x15c>
    bb64:	e59f008c 	ldr	r0, [pc, #140]	; bbf8 <CDWHCIRootPort::Initialize()+0x160>
    bb68:	eb005ec4 	bl	23680 <assertion_failed>
    bb6c:	eb0067b6 	bl	25a4c <CLogger::Get()>
    bb70:	e59f3084 	ldr	r3, [pc, #132]	; bbfc <CDWHCIRootPort::Initialize()+0x164>
    bb74:	e3a02004 	mov	r2, #4
    bb78:	e59f1070 	ldr	r1, [pc, #112]	; bbf0 <CDWHCIRootPort::Initialize()+0x158>
    bb7c:	eb0066ef 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bb80:	e5940004 	ldr	r0, [r4, #4]
    bb84:	ebfff2de 	bl	8704 <CDWHCIDevice::OvercurrentDetected()>
    bb88:	e3500000 	cmp	r0, #0
    bb8c:	0affffe2 	beq	bb1c <CDWHCIRootPort::Initialize()+0x84>
    bb90:	eb0067ad 	bl	25a4c <CLogger::Get()>
    bb94:	e59f3064 	ldr	r3, [pc, #100]	; bc00 <CDWHCIRootPort::Initialize()+0x168>
    bb98:	e3a02001 	mov	r2, #1
    bb9c:	e59f104c 	ldr	r1, [pc, #76]	; bbf0 <CDWHCIRootPort::Initialize()+0x158>
    bba0:	eb0066e6 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bba4:	e5940004 	ldr	r0, [r4, #4]
    bba8:	e3a01001 	mov	r1, #1
    bbac:	ebfff2e3 	bl	8740 <CDWHCIDevice::DisableRootPort(bool)>
    bbb0:	e5940008 	ldr	r0, [r4, #8]
    bbb4:	e3500000 	cmp	r0, #0
    bbb8:	1affffd1 	bne	bb04 <CDWHCIRootPort::Initialize()+0x6c>
    bbbc:	eaffffd3 	b	bb10 <CDWHCIRootPort::Initialize()+0x78>
    bbc0:	eb0067a1 	bl	25a4c <CLogger::Get()>
    bbc4:	e59f3038 	ldr	r3, [pc, #56]	; bc04 <CDWHCIRootPort::Initialize()+0x16c>
    bbc8:	e3a02001 	mov	r2, #1
    bbcc:	e59f101c 	ldr	r1, [pc, #28]	; bbf0 <CDWHCIRootPort::Initialize()+0x158>
    bbd0:	eb0066da 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bbd4:	e3a05000 	mov	r5, #0
    bbd8:	eaffffcf 	b	bb1c <CDWHCIRootPort::Initialize()+0x84>
    bbdc:	e3a02036 	mov	r2, #54	; 0x36
    bbe0:	e59f100c 	ldr	r1, [pc, #12]	; bbf4 <CDWHCIRootPort::Initialize()+0x15c>
    bbe4:	e59f001c 	ldr	r0, [pc, #28]	; bc08 <CDWHCIRootPort::Initialize()+0x170>
    bbe8:	eb005ea4 	bl	23680 <assertion_failed>
    bbec:	00034f28 	.word	0x00034f28
    bbf0:	00034ea0 	.word	0x00034ea0
    bbf4:	00034ea8 	.word	0x00034ea8
    bbf8:	00034ebc 	.word	0x00034ebc
    bbfc:	00034f40 	.word	0x00034f40
    bc00:	00034f54 	.word	0x00034f54
    bc04:	00034efc 	.word	0x00034efc
    bc08:	00034f18 	.word	0x00034f18

0000bc0c <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    bc0c:	e92d4010 	push	{r4, lr}
    bc10:	e1a04000 	mov	r4, r0
    bc14:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    bc18:	e3500000 	cmp	r0, #0
    bc1c:	0a000002 	beq	bc2c <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    bc20:	e5903000 	ldr	r3, [r0]
    bc24:	e5933004 	ldr	r3, [r3, #4]
    bc28:	e12fff33 	blx	r3
    bc2c:	e3a03000 	mov	r3, #0
    bc30:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    bc34:	e5843050 	str	r3, [r4, #80]	; 0x50
    bc38:	e1500003 	cmp	r0, r3
    bc3c:	e5843048 	str	r3, [r4, #72]	; 0x48
    bc40:	0a000000 	beq	bc48 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    bc44:	eb0078b2 	bl	29f14 <operator delete[](void*)>
    bc48:	e1a00004 	mov	r0, r4
    bc4c:	e8bd8010 	pop	{r4, pc}

0000bc50 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    bc50:	e5801000 	str	r1, [r0]
    bc54:	e12fff1e 	bx	lr

0000bc58 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    bc58:	e92d4070 	push	{r4, r5, r6, lr}
    bc5c:	e1a04000 	mov	r4, r0
    bc60:	e59f0174 	ldr	r0, [pc, #372]	; bddc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x184>
    bc64:	e5841040 	str	r1, [r4, #64]	; 0x40
    bc68:	e0000001 	and	r0, r0, r1
    bc6c:	e3500000 	cmp	r0, #0
    bc70:	0a000006 	beq	bc90 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x38>
    bc74:	e3110010 	tst	r1, #16
    bc78:	08bd8070 	popeq	{r4, r5, r6, pc}
    bc7c:	e5940004 	ldr	r0, [r4, #4]
    bc80:	eb001e11 	bl	134cc <CUSBRequest::IsCompleteOnNAK() const>
    bc84:	e3500000 	cmp	r0, #0
    bc88:	1a000039 	bne	bd74 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x11c>
    bc8c:	e8bd8070 	pop	{r4, r5, r6, pc}
    bc90:	e5d40010 	ldrb	r0, [r4, #16]
    bc94:	e5945030 	ldr	r5, [r4, #48]	; 0x30
    bc98:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
    bc9c:	e3500000 	cmp	r0, #0
    bca0:	e0455002 	sub	r5, r5, r2
    bca4:	e0413003 	sub	r3, r1, r3
    bca8:	1a000018 	bne	bd10 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb8>
    bcac:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    bcb0:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    bcb4:	e0811003 	add	r1, r1, r3
    bcb8:	e0823003 	add	r3, r2, r3
    bcbc:	e5841034 	str	r1, [r4, #52]	; 0x34
    bcc0:	e5843048 	str	r3, [r4, #72]	; 0x48
    bcc4:	e5d42009 	ldrb	r2, [r4, #9]
    bcc8:	e1a01005 	mov	r1, r5
    bccc:	e5940018 	ldr	r0, [r4, #24]
    bcd0:	eb000866 	bl	de70 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    bcd4:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    bcd8:	e1550002 	cmp	r5, r2
    bcdc:	8a00002e 	bhi	bd9c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x144>
    bce0:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    bce4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    bce8:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    bcec:	e0410003 	sub	r0, r1, r3
    bcf0:	e0422005 	sub	r2, r2, r5
    bcf4:	e150000c 	cmp	r0, ip
    bcf8:	e5842028 	str	r2, [r4, #40]	; 0x28
    bcfc:	28bd8070 	popcs	{r4, r5, r6, pc}
    bd00:	e1510003 	cmp	r1, r3
    bd04:	3a000028 	bcc	bdac <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x154>
    bd08:	e584002c 	str	r0, [r4, #44]	; 0x2c
    bd0c:	e8bd8070 	pop	{r4, r5, r6, pc}
    bd10:	e5d40011 	ldrb	r0, [r4, #17]
    bd14:	e3530000 	cmp	r3, #0
    bd18:	13a02000 	movne	r2, #0
    bd1c:	02002001 	andeq	r2, r0, #1
    bd20:	e3520000 	cmp	r2, #0
    bd24:	0a000009 	beq	bd50 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xf8>
    bd28:	e3510000 	cmp	r1, #0
    bd2c:	15941020 	ldrne	r1, [r4, #32]
    bd30:	10010591 	mulne	r1, r1, r5
    bd34:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    bd38:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    bd3c:	e0822001 	add	r2, r2, r1
    bd40:	e0831001 	add	r1, r3, r1
    bd44:	e5842034 	str	r2, [r4, #52]	; 0x34
    bd48:	e5841048 	str	r1, [r4, #72]	; 0x48
    bd4c:	eaffffdc 	b	bcc4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x6c>
    bd50:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    bd54:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    bd58:	e0811003 	add	r1, r1, r3
    bd5c:	e3500000 	cmp	r0, #0
    bd60:	e0823003 	add	r3, r2, r3
    bd64:	e5841034 	str	r1, [r4, #52]	; 0x34
    bd68:	e5843048 	str	r3, [r4, #72]	; 0x48
    bd6c:	0affffd8 	beq	bcd4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x7c>
    bd70:	eaffffd3 	b	bcc4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x6c>
    bd74:	e5940018 	ldr	r0, [r4, #24]
    bd78:	eb000817 	bl	dddc <CUSBEndpoint::GetType() const>
    bd7c:	e3500001 	cmp	r0, #1
    bd80:	1a00000d 	bne	bdbc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x164>
    bd84:	e5d43008 	ldrb	r3, [r4, #8]
    bd88:	e3530000 	cmp	r3, #0
    bd8c:	0a00000e 	beq	bdcc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x174>
    bd90:	e3a03000 	mov	r3, #0
    bd94:	e5843028 	str	r3, [r4, #40]	; 0x28
    bd98:	e8bd8070 	pop	{r4, r5, r6, pc}
    bd9c:	e3a020d6 	mov	r2, #214	; 0xd6
    bda0:	e59f1038 	ldr	r1, [pc, #56]	; bde0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    bda4:	e59f0038 	ldr	r0, [pc, #56]	; bde4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    bda8:	eb005e34 	bl	23680 <assertion_failed>
    bdac:	e3a020dc 	mov	r2, #220	; 0xdc
    bdb0:	e59f1028 	ldr	r1, [pc, #40]	; bde0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    bdb4:	e59f002c 	ldr	r0, [pc, #44]	; bde8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x190>
    bdb8:	eb005e30 	bl	23680 <assertion_failed>
    bdbc:	e3a020b9 	mov	r2, #185	; 0xb9
    bdc0:	e59f1018 	ldr	r1, [pc, #24]	; bde0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    bdc4:	e59f0020 	ldr	r0, [pc, #32]	; bdec <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x194>
    bdc8:	eb005e2c 	bl	23680 <assertion_failed>
    bdcc:	e3a020ba 	mov	r2, #186	; 0xba
    bdd0:	e59f1008 	ldr	r1, [pc, #8]	; bde0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    bdd4:	e59f0014 	ldr	r0, [pc, #20]	; bdf0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x198>
    bdd8:	eb005e28 	bl	23680 <assertion_failed>
    bddc:	000007dc 	.word	0x000007dc
    bde0:	00034f6c 	.word	0x00034f6c
    bde4:	00034fb8 	.word	0x00034fb8
    bde8:	00034fdc 	.word	0x00034fdc
    bdec:	00034f84 	.word	0x00034f84
    bdf0:	00034fb0 	.word	0x00034fb0

0000bdf4 <CDWHCITransferStageData::SetSplitComplete(bool)>:
    bdf4:	e5d03010 	ldrb	r3, [r0, #16]
    bdf8:	e3530000 	cmp	r3, #0
    bdfc:	0a000001 	beq	be08 <CDWHCITransferStageData::SetSplitComplete(bool)+0x14>
    be00:	e5c01011 	strb	r1, [r0, #17]
    be04:	e12fff1e 	bx	lr
    be08:	e92d4010 	push	{r4, lr}
    be0c:	e3a020e3 	mov	r2, #227	; 0xe3
    be10:	e59f1004 	ldr	r1, [pc, #4]	; be1c <CDWHCITransferStageData::SetSplitComplete(bool)+0x28>
    be14:	e59f0004 	ldr	r0, [pc, #4]	; be20 <CDWHCITransferStageData::SetSplitComplete(bool)+0x2c>
    be18:	eb005e18 	bl	23680 <assertion_failed>
    be1c:	00034f6c 	.word	0x00034f6c
    be20:	00035008 	.word	0x00035008

0000be24 <CDWHCITransferStageData::SetState(unsigned int)>:
    be24:	e5801038 	str	r1, [r0, #56]	; 0x38
    be28:	e12fff1e 	bx	lr

0000be2c <CDWHCITransferStageData::GetState() const>:
    be2c:	e5900038 	ldr	r0, [r0, #56]	; 0x38
    be30:	e12fff1e 	bx	lr

0000be34 <CDWHCITransferStageData::SetSubState(unsigned int)>:
    be34:	e580103c 	str	r1, [r0, #60]	; 0x3c
    be38:	e12fff1e 	bx	lr

0000be3c <CDWHCITransferStageData::GetSubState() const>:
    be3c:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    be40:	e12fff1e 	bx	lr

0000be44 <CDWHCITransferStageData::BeginSplitCycle()>:
    be44:	e3a00001 	mov	r0, #1
    be48:	e12fff1e 	bx	lr

0000be4c <CDWHCITransferStageData::GetChannelNumber() const>:
    be4c:	e5900000 	ldr	r0, [r0]
    be50:	e12fff1e 	bx	lr

0000be54 <CDWHCITransferStageData::IsPeriodic() const>:
    be54:	e5900018 	ldr	r0, [r0, #24]
    be58:	e92d4010 	push	{r4, lr}
    be5c:	e3500000 	cmp	r0, #0
    be60:	0a000006 	beq	be80 <CDWHCITransferStageData::IsPeriodic() const+0x2c>
    be64:	eb0007dc 	bl	dddc <CUSBEndpoint::GetType() const>
    be68:	e2400002 	sub	r0, r0, #2
    be6c:	e6ef0070 	uxtb	r0, r0
    be70:	e3500001 	cmp	r0, #1
    be74:	83a00000 	movhi	r0, #0
    be78:	93a00001 	movls	r0, #1
    be7c:	e8bd8010 	pop	{r4, pc}
    be80:	e3a02f42 	mov	r2, #264	; 0x108
    be84:	e59f1004 	ldr	r1, [pc, #4]	; be90 <CDWHCITransferStageData::IsPeriodic() const+0x3c>
    be88:	e59f0004 	ldr	r0, [pc, #4]	; be94 <CDWHCITransferStageData::IsPeriodic() const+0x40>
    be8c:	eb005dfb 	bl	23680 <assertion_failed>
    be90:	00034f6c 	.word	0x00034f6c
    be94:	0003501c 	.word	0x0003501c

0000be98 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    be98:	e92d4070 	push	{r4, r5, r6, lr}
    be9c:	e1a05002 	mov	r5, r2
    bea0:	e3a02000 	mov	r2, #0
    bea4:	e5dd6010 	ldrb	r6, [sp, #16]
    bea8:	e1550002 	cmp	r5, r2
    beac:	e8800022 	stm	r0, {r1, r5}
    beb0:	e5c03008 	strb	r3, [r0, #8]
    beb4:	e5c06009 	strb	r6, [r0, #9]
    beb8:	e580200c 	str	r2, [r0, #12]
    bebc:	e5c02011 	strb	r2, [r0, #17]
    bec0:	e5802034 	str	r2, [r0, #52]	; 0x34
    bec4:	e5802038 	str	r2, [r0, #56]	; 0x38
    bec8:	e580203c 	str	r2, [r0, #60]	; 0x3c
    becc:	e5802040 	str	r2, [r0, #64]	; 0x40
    bed0:	e5802044 	str	r2, [r0, #68]	; 0x44
    bed4:	e580204c 	str	r2, [r0, #76]	; 0x4c
    bed8:	e5802050 	str	r2, [r0, #80]	; 0x50
    bedc:	0a00008b 	beq	c110 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x278>
    bee0:	e1a04000 	mov	r4, r0
    bee4:	e1a00005 	mov	r0, r5
    bee8:	eb001d16 	bl	13348 <CUSBRequest::GetEndpoint() const>
    beec:	e3500000 	cmp	r0, #0
    bef0:	e5840018 	str	r0, [r4, #24]
    bef4:	0a000089 	beq	c120 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x288>
    bef8:	eb0007aa 	bl	dda8 <CUSBEndpoint::GetDevice() const>
    befc:	e3500000 	cmp	r0, #0
    bf00:	e5840014 	str	r0, [r4, #20]
    bf04:	0a000089 	beq	c130 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x298>
    bf08:	eb000374 	bl	cce0 <CUSBDevice::GetSpeed() const>
    bf0c:	e5c4001c 	strb	r0, [r4, #28]
    bf10:	e5940018 	ldr	r0, [r4, #24]
    bf14:	eb0007b7 	bl	ddf8 <CUSBEndpoint::GetMaxPacketSize() const>
    bf18:	e5840020 	str	r0, [r4, #32]
    bf1c:	e5940014 	ldr	r0, [r4, #20]
    bf20:	eb000370 	bl	cce8 <CUSBDevice::IsSplit() const>
    bf24:	e3560000 	cmp	r6, #0
    bf28:	e5c40010 	strb	r0, [r4, #16]
    bf2c:	0a00002f 	beq	bff0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x158>
    bf30:	e5945044 	ldr	r5, [r4, #68]	; 0x44
    bf34:	e3550000 	cmp	r5, #0
    bf38:	1a00006c 	bne	c0f0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x258>
    bf3c:	e3a00004 	mov	r0, #4
    bf40:	eb0077ec 	bl	29ef8 <operator new[](unsigned int)>
    bf44:	e3a03001 	mov	r3, #1
    bf48:	e5840044 	str	r0, [r4, #68]	; 0x44
    bf4c:	e5840048 	str	r0, [r4, #72]	; 0x48
    bf50:	e5845024 	str	r5, [r4, #36]	; 0x24
    bf54:	e584502c 	str	r5, [r4, #44]	; 0x2c
    bf58:	e5843028 	str	r3, [r4, #40]	; 0x28
    bf5c:	e5843030 	str	r3, [r4, #48]	; 0x30
    bf60:	e3100003 	tst	r0, #3
    bf64:	1a000075 	bne	c140 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a8>
    bf68:	e5d43010 	ldrb	r3, [r4, #16]
    bf6c:	e3530000 	cmp	r3, #0
    bf70:	0a00000d 	beq	bfac <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x114>
    bf74:	e1a00004 	mov	r0, r4
    bf78:	ebffffb5 	bl	be54 <CDWHCITransferStageData::IsPeriodic() const>
    bf7c:	e3500000 	cmp	r0, #0
    bf80:	0a00003b 	beq	c074 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1dc>
    bf84:	e3a00014 	mov	r0, #20
    bf88:	ebfffd59 	bl	b4f4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    bf8c:	e1a05000 	mov	r5, r0
    bf90:	ebfffd43 	bl	b4a4 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    bf94:	e5845050 	str	r5, [r4, #80]	; 0x50
    bf98:	e59d3014 	ldr	r3, [sp, #20]
    bf9c:	e3530000 	cmp	r3, #0
    bfa0:	1a00003b 	bne	c094 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1fc>
    bfa4:	e1a00004 	mov	r0, r4
    bfa8:	e8bd8070 	pop	{r4, r5, r6, pc}
    bfac:	e5940014 	ldr	r0, [r4, #20]
    bfb0:	eb00034e 	bl	ccf0 <CUSBDevice::GetHubAddress() const>
    bfb4:	e3500000 	cmp	r0, #0
    bfb8:	1afffff6 	bne	bf98 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x100>
    bfbc:	e5d4301c 	ldrb	r3, [r4, #28]
    bfc0:	e3530002 	cmp	r3, #2
    bfc4:	0afffff3 	beq	bf98 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x100>
    bfc8:	e1a00004 	mov	r0, r4
    bfcc:	ebffffa0 	bl	be54 <CDWHCITransferStageData::IsPeriodic() const>
    bfd0:	e1a06000 	mov	r6, r0
    bfd4:	e3a00008 	mov	r0, #8
    bfd8:	ebfffc33 	bl	b0ac <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
    bfdc:	e1a05000 	mov	r5, r0
    bfe0:	e1a01006 	mov	r1, r6
    bfe4:	ebfffc29 	bl	b090 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
    bfe8:	e5845050 	str	r5, [r4, #80]	; 0x50
    bfec:	eaffffe9 	b	bf98 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x100>
    bff0:	e1a01006 	mov	r1, r6
    bff4:	e5940018 	ldr	r0, [r4, #24]
    bff8:	eb00078c 	bl	de30 <CUSBEndpoint::GetNextPID(bool)>
    bffc:	e3500000 	cmp	r0, #0
    c000:	e1a00005 	mov	r0, r5
    c004:	0a000034 	beq	c0dc <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x244>
    c008:	eb001cff 	bl	1340c <CUSBRequest::GetBuffer()>
    c00c:	e5840048 	str	r0, [r4, #72]	; 0x48
    c010:	e1a00005 	mov	r0, r5
    c014:	eb001d0b 	bl	13448 <CUSBRequest::GetBufLen() const>
    c018:	e1a05000 	mov	r5, r0
    c01c:	e5840024 	str	r0, [r4, #36]	; 0x24
    c020:	e5946020 	ldr	r6, [r4, #32]
    c024:	e2460001 	sub	r0, r6, #1
    c028:	e0800005 	add	r0, r0, r5
    c02c:	e1a01006 	mov	r1, r6
    c030:	eb009183 	bl	30644 <__aeabi_uidiv>
    c034:	e5d43010 	ldrb	r3, [r4, #16]
    c038:	e5840028 	str	r0, [r4, #40]	; 0x28
    c03c:	e3530000 	cmp	r3, #0
    c040:	0a00002e 	beq	c100 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x268>
    c044:	e1560005 	cmp	r6, r5
    c048:	31a05006 	movcc	r5, r6
    c04c:	e3a03001 	mov	r3, #1
    c050:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    c054:	e584502c 	str	r5, [r4, #44]	; 0x2c
    c058:	e5843030 	str	r3, [r4, #48]	; 0x30
    c05c:	e3500000 	cmp	r0, #0
    c060:	1affffbe 	bne	bf60 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xc8>
    c064:	e3a0206c 	mov	r2, #108	; 0x6c
    c068:	e59f1100 	ldr	r1, [pc, #256]	; c170 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    c06c:	e59f0100 	ldr	r0, [pc, #256]	; c174 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2dc>
    c070:	eb005d82 	bl	23680 <assertion_failed>
    c074:	e3a00010 	mov	r0, #16
    c078:	ebfffb6b 	bl	ae2c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
    c07c:	e1a05000 	mov	r5, r0
    c080:	ebfffb57 	bl	ade4 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    c084:	e59d3014 	ldr	r3, [sp, #20]
    c088:	e5845050 	str	r5, [r4, #80]	; 0x50
    c08c:	e3530000 	cmp	r3, #0
    c090:	0affffc3 	beq	bfa4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x10c>
    c094:	e5940018 	ldr	r0, [r4, #24]
    c098:	eb00074f 	bl	dddc <CUSBEndpoint::GetType() const>
    c09c:	e3500002 	cmp	r0, #2
    c0a0:	1a00002a 	bne	c150 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b8>
    c0a4:	e3a03064 	mov	r3, #100	; 0x64
    c0a8:	e59d2014 	ldr	r2, [sp, #20]
    c0ac:	e0030293 	mul	r3, r3, r2
    c0b0:	e59f20c0 	ldr	r2, [pc, #192]	; c178 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e0>
    c0b4:	e0832392 	umull	r2, r3, r2, r3
    c0b8:	e1a03323 	lsr	r3, r3, #6
    c0bc:	e3530000 	cmp	r3, #0
    c0c0:	e584300c 	str	r3, [r4, #12]
    c0c4:	0a000025 	beq	c160 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2c8>
    c0c8:	eb00732c 	bl	28d80 <CTimer::Get()>
    c0cc:	eb007075 	bl	282a8 <CTimer::GetTicks() const>
    c0d0:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c0d4:	e1a00004 	mov	r0, r4
    c0d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c0dc:	eb001cb6 	bl	133bc <CUSBRequest::GetSetupData()>
    c0e0:	e3a05008 	mov	r5, #8
    c0e4:	e5840048 	str	r0, [r4, #72]	; 0x48
    c0e8:	e5845024 	str	r5, [r4, #36]	; 0x24
    c0ec:	eaffffcb 	b	c020 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x188>
    c0f0:	e3a02061 	mov	r2, #97	; 0x61
    c0f4:	e59f1074 	ldr	r1, [pc, #116]	; c170 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    c0f8:	e59f007c 	ldr	r0, [pc, #124]	; c17c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e4>
    c0fc:	eb005d5f 	bl	23680 <assertion_failed>
    c100:	e5840030 	str	r0, [r4, #48]	; 0x30
    c104:	e584502c 	str	r5, [r4, #44]	; 0x2c
    c108:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    c10c:	eaffffd2 	b	c05c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1c4>
    c110:	e3a02031 	mov	r2, #49	; 0x31
    c114:	e59f1054 	ldr	r1, [pc, #84]	; c170 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    c118:	e59f0060 	ldr	r0, [pc, #96]	; c180 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e8>
    c11c:	eb005d57 	bl	23680 <assertion_failed>
    c120:	e3a02034 	mov	r2, #52	; 0x34
    c124:	e59f1044 	ldr	r1, [pc, #68]	; c170 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    c128:	e59f0054 	ldr	r0, [pc, #84]	; c184 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2ec>
    c12c:	eb005d53 	bl	23680 <assertion_failed>
    c130:	e3a02036 	mov	r2, #54	; 0x36
    c134:	e59f1034 	ldr	r1, [pc, #52]	; c170 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    c138:	e59f0048 	ldr	r0, [pc, #72]	; c188 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f0>
    c13c:	eb005d4f 	bl	23680 <assertion_failed>
    c140:	e3a0206d 	mov	r2, #109	; 0x6d
    c144:	e59f1024 	ldr	r1, [pc, #36]	; c170 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    c148:	e59f003c 	ldr	r0, [pc, #60]	; c18c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f4>
    c14c:	eb005d4b 	bl	23680 <assertion_failed>
    c150:	e3a02088 	mov	r2, #136	; 0x88
    c154:	e59f1014 	ldr	r1, [pc, #20]	; c170 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    c158:	e59f0030 	ldr	r0, [pc, #48]	; c190 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    c15c:	eb005d47 	bl	23680 <assertion_failed>
    c160:	e3a0208b 	mov	r2, #139	; 0x8b
    c164:	e59f1004 	ldr	r1, [pc, #4]	; c170 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    c168:	e59f0024 	ldr	r0, [pc, #36]	; c194 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2fc>
    c16c:	eb005d43 	bl	23680 <assertion_failed>
    c170:	00034f6c 	.word	0x00034f6c
    c174:	00035060 	.word	0x00035060
    c178:	10624dd3 	.word	0x10624dd3
    c17c:	0003504c 	.word	0x0003504c
    c180:	00035030 	.word	0x00035030
    c184:	0003501c 	.word	0x0003501c
    c188:	0003503c 	.word	0x0003503c
    c18c:	00035078 	.word	0x00035078
    c190:	000350a0 	.word	0x000350a0
    c194:	000350d4 	.word	0x000350d4

0000c198 <CDWHCITransferStageData::GetDeviceAddress() const>:
    c198:	e5900014 	ldr	r0, [r0, #20]
    c19c:	e3500000 	cmp	r0, #0
    c1a0:	0a000000 	beq	c1a8 <CDWHCITransferStageData::GetDeviceAddress() const+0x10>
    c1a4:	ea0002cb 	b	ccd8 <CUSBDevice::GetAddress() const>
    c1a8:	e92d4010 	push	{r4, lr}
    c1ac:	e59f2008 	ldr	r2, [pc, #8]	; c1bc <CDWHCITransferStageData::GetDeviceAddress() const+0x24>
    c1b0:	e59f1008 	ldr	r1, [pc, #8]	; c1c0 <CDWHCITransferStageData::GetDeviceAddress() const+0x28>
    c1b4:	e59f0008 	ldr	r0, [pc, #8]	; c1c4 <CDWHCITransferStageData::GetDeviceAddress() const+0x2c>
    c1b8:	eb005d30 	bl	23680 <assertion_failed>
    c1bc:	00000111 	.word	0x00000111
    c1c0:	00034f6c 	.word	0x00034f6c
    c1c4:	0003503c 	.word	0x0003503c

0000c1c8 <CDWHCITransferStageData::GetEndpointType() const>:
    c1c8:	e5900018 	ldr	r0, [r0, #24]
    c1cc:	e92d4010 	push	{r4, lr}
    c1d0:	e3500000 	cmp	r0, #0
    c1d4:	0a00000f 	beq	c218 <CDWHCITransferStageData::GetEndpointType() const+0x50>
    c1d8:	eb0006ff 	bl	dddc <CUSBEndpoint::GetType() const>
    c1dc:	e3500001 	cmp	r0, #1
    c1e0:	0a00000a 	beq	c210 <CDWHCITransferStageData::GetEndpointType() const+0x48>
    c1e4:	3a000003 	bcc	c1f8 <CDWHCITransferStageData::GetEndpointType() const+0x30>
    c1e8:	e3500002 	cmp	r0, #2
    c1ec:	1a000003 	bne	c200 <CDWHCITransferStageData::GetEndpointType() const+0x38>
    c1f0:	e3a00003 	mov	r0, #3
    c1f4:	e8bd8010 	pop	{r4, pc}
    c1f8:	e3a00000 	mov	r0, #0
    c1fc:	e8bd8010 	pop	{r4, pc}
    c200:	e59f2020 	ldr	r2, [pc, #32]	; c228 <CDWHCITransferStageData::GetEndpointType() const+0x60>
    c204:	e59f1020 	ldr	r1, [pc, #32]	; c22c <CDWHCITransferStageData::GetEndpointType() const+0x64>
    c208:	e59f0020 	ldr	r0, [pc, #32]	; c230 <CDWHCITransferStageData::GetEndpointType() const+0x68>
    c20c:	eb005d1b 	bl	23680 <assertion_failed>
    c210:	e3a00002 	mov	r0, #2
    c214:	e8bd8010 	pop	{r4, pc}
    c218:	e59f2014 	ldr	r2, [pc, #20]	; c234 <CDWHCITransferStageData::GetEndpointType() const+0x6c>
    c21c:	e59f1008 	ldr	r1, [pc, #8]	; c22c <CDWHCITransferStageData::GetEndpointType() const+0x64>
    c220:	e59f0010 	ldr	r0, [pc, #16]	; c238 <CDWHCITransferStageData::GetEndpointType() const+0x70>
    c224:	eb005d15 	bl	23680 <assertion_failed>
    c228:	0000012a 	.word	0x0000012a
    c22c:	00034f6c 	.word	0x00034f6c
    c230:	00035260 	.word	0x00035260
    c234:	00000117 	.word	0x00000117
    c238:	0003501c 	.word	0x0003501c

0000c23c <CDWHCITransferStageData::GetEndpointNumber() const>:
    c23c:	e5900018 	ldr	r0, [r0, #24]
    c240:	e3500000 	cmp	r0, #0
    c244:	0a000000 	beq	c24c <CDWHCITransferStageData::GetEndpointNumber() const+0x10>
    c248:	ea0006e1 	b	ddd4 <CUSBEndpoint::GetNumber() const>
    c24c:	e92d4010 	push	{r4, lr}
    c250:	e59f2008 	ldr	r2, [pc, #8]	; c260 <CDWHCITransferStageData::GetEndpointNumber() const+0x24>
    c254:	e59f1008 	ldr	r1, [pc, #8]	; c264 <CDWHCITransferStageData::GetEndpointNumber() const+0x28>
    c258:	e59f0008 	ldr	r0, [pc, #8]	; c268 <CDWHCITransferStageData::GetEndpointNumber() const+0x2c>
    c25c:	eb005d07 	bl	23680 <assertion_failed>
    c260:	00000133 	.word	0x00000133
    c264:	00034f6c 	.word	0x00034f6c
    c268:	0003501c 	.word	0x0003501c

0000c26c <CDWHCITransferStageData::GetMaxPacketSize() const>:
    c26c:	e5900020 	ldr	r0, [r0, #32]
    c270:	e12fff1e 	bx	lr

0000c274 <CDWHCITransferStageData::GetSpeed() const>:
    c274:	e5d0001c 	ldrb	r0, [r0, #28]
    c278:	e12fff1e 	bx	lr

0000c27c <CDWHCITransferStageData::GetPID() const>:
    c27c:	e5903018 	ldr	r3, [r0, #24]
    c280:	e92d4010 	push	{r4, lr}
    c284:	e3530000 	cmp	r3, #0
    c288:	0a00000f 	beq	c2cc <CDWHCITransferStageData::GetPID() const+0x50>
    c28c:	e5d01009 	ldrb	r1, [r0, #9]
    c290:	e1a00003 	mov	r0, r3
    c294:	eb0006e5 	bl	de30 <CUSBEndpoint::GetNextPID(bool)>
    c298:	e3500001 	cmp	r0, #1
    c29c:	0a000008 	beq	c2c4 <CDWHCITransferStageData::GetPID() const+0x48>
    c2a0:	3a000005 	bcc	c2bc <CDWHCITransferStageData::GetPID() const+0x40>
    c2a4:	e3500002 	cmp	r0, #2
    c2a8:	08bd8010 	popeq	{r4, pc}
    c2ac:	e59f2028 	ldr	r2, [pc, #40]	; c2dc <CDWHCITransferStageData::GetPID() const+0x60>
    c2b0:	e59f1028 	ldr	r1, [pc, #40]	; c2e0 <CDWHCITransferStageData::GetPID() const+0x64>
    c2b4:	e59f0028 	ldr	r0, [pc, #40]	; c2e4 <CDWHCITransferStageData::GetPID() const+0x68>
    c2b8:	eb005cf0 	bl	23680 <assertion_failed>
    c2bc:	e3a00003 	mov	r0, #3
    c2c0:	e8bd8010 	pop	{r4, pc}
    c2c4:	e3a00000 	mov	r0, #0
    c2c8:	e8bd8010 	pop	{r4, pc}
    c2cc:	e59f2014 	ldr	r2, [pc, #20]	; c2e8 <CDWHCITransferStageData::GetPID() const+0x6c>
    c2d0:	e59f1008 	ldr	r1, [pc, #8]	; c2e0 <CDWHCITransferStageData::GetPID() const+0x64>
    c2d4:	e59f0010 	ldr	r0, [pc, #16]	; c2ec <CDWHCITransferStageData::GetPID() const+0x70>
    c2d8:	eb005ce8 	bl	23680 <assertion_failed>
    c2dc:	00000156 	.word	0x00000156
    c2e0:	00034f6c 	.word	0x00034f6c
    c2e4:	00035260 	.word	0x00035260
    c2e8:	00000143 	.word	0x00000143
    c2ec:	0003501c 	.word	0x0003501c

0000c2f0 <CDWHCITransferStageData::IsDirectionIn() const>:
    c2f0:	e5d00008 	ldrb	r0, [r0, #8]
    c2f4:	e12fff1e 	bx	lr

0000c2f8 <CDWHCITransferStageData::IsStatusStage() const>:
    c2f8:	e5d00009 	ldrb	r0, [r0, #9]
    c2fc:	e12fff1e 	bx	lr

0000c300 <CDWHCITransferStageData::GetDMAAddress() const>:
    c300:	e5900048 	ldr	r0, [r0, #72]	; 0x48
    c304:	e3500000 	cmp	r0, #0
    c308:	0a000000 	beq	c310 <CDWHCITransferStageData::GetDMAAddress() const+0x10>
    c30c:	e12fff1e 	bx	lr
    c310:	e92d4010 	push	{r4, lr}
    c314:	e59f2008 	ldr	r2, [pc, #8]	; c324 <CDWHCITransferStageData::GetDMAAddress() const+0x24>
    c318:	e59f1008 	ldr	r1, [pc, #8]	; c328 <CDWHCITransferStageData::GetDMAAddress() const+0x28>
    c31c:	e59f0008 	ldr	r0, [pc, #8]	; c32c <CDWHCITransferStageData::GetDMAAddress() const+0x2c>
    c320:	eb005cd6 	bl	23680 <assertion_failed>
    c324:	00000169 	.word	0x00000169
    c328:	00034f6c 	.word	0x00034f6c
    c32c:	00035060 	.word	0x00035060

0000c330 <CDWHCITransferStageData::GetBytesToTransfer() const>:
    c330:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    c334:	e12fff1e 	bx	lr

0000c338 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    c338:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    c33c:	e12fff1e 	bx	lr

0000c340 <CDWHCITransferStageData::IsSplit() const>:
    c340:	e5d00010 	ldrb	r0, [r0, #16]
    c344:	e12fff1e 	bx	lr

0000c348 <CDWHCITransferStageData::IsSplitComplete() const>:
    c348:	e5d03010 	ldrb	r3, [r0, #16]
    c34c:	e3530000 	cmp	r3, #0
    c350:	0a000001 	beq	c35c <CDWHCITransferStageData::IsSplitComplete() const+0x14>
    c354:	e5d00011 	ldrb	r0, [r0, #17]
    c358:	e12fff1e 	bx	lr
    c35c:	e92d4010 	push	{r4, lr}
    c360:	e59f2008 	ldr	r2, [pc, #8]	; c370 <CDWHCITransferStageData::IsSplitComplete() const+0x28>
    c364:	e59f1008 	ldr	r1, [pc, #8]	; c374 <CDWHCITransferStageData::IsSplitComplete() const+0x2c>
    c368:	e59f0008 	ldr	r0, [pc, #8]	; c378 <CDWHCITransferStageData::IsSplitComplete() const+0x30>
    c36c:	eb005cc3 	bl	23680 <assertion_failed>
    c370:	0000017f 	.word	0x0000017f
    c374:	00034f6c 	.word	0x00034f6c
    c378:	00035008 	.word	0x00035008

0000c37c <CDWHCITransferStageData::GetHubAddress() const>:
    c37c:	e5d03010 	ldrb	r3, [r0, #16]
    c380:	e92d4010 	push	{r4, lr}
    c384:	e3530000 	cmp	r3, #0
    c388:	0a000004 	beq	c3a0 <CDWHCITransferStageData::GetHubAddress() const+0x24>
    c38c:	e5900014 	ldr	r0, [r0, #20]
    c390:	e3500000 	cmp	r0, #0
    c394:	0a000005 	beq	c3b0 <CDWHCITransferStageData::GetHubAddress() const+0x34>
    c398:	e8bd4010 	pop	{r4, lr}
    c39c:	ea000253 	b	ccf0 <CUSBDevice::GetHubAddress() const>
    c3a0:	e59f2018 	ldr	r2, [pc, #24]	; c3c0 <CDWHCITransferStageData::GetHubAddress() const+0x44>
    c3a4:	e59f1018 	ldr	r1, [pc, #24]	; c3c4 <CDWHCITransferStageData::GetHubAddress() const+0x48>
    c3a8:	e59f0018 	ldr	r0, [pc, #24]	; c3c8 <CDWHCITransferStageData::GetHubAddress() const+0x4c>
    c3ac:	eb005cb3 	bl	23680 <assertion_failed>
    c3b0:	e3a02f62 	mov	r2, #392	; 0x188
    c3b4:	e59f1008 	ldr	r1, [pc, #8]	; c3c4 <CDWHCITransferStageData::GetHubAddress() const+0x48>
    c3b8:	e59f000c 	ldr	r0, [pc, #12]	; c3cc <CDWHCITransferStageData::GetHubAddress() const+0x50>
    c3bc:	eb005caf 	bl	23680 <assertion_failed>
    c3c0:	00000186 	.word	0x00000186
    c3c4:	00034f6c 	.word	0x00034f6c
    c3c8:	00035008 	.word	0x00035008
    c3cc:	0003503c 	.word	0x0003503c

0000c3d0 <CDWHCITransferStageData::GetHubPortAddress() const>:
    c3d0:	e5d03010 	ldrb	r3, [r0, #16]
    c3d4:	e92d4010 	push	{r4, lr}
    c3d8:	e3530000 	cmp	r3, #0
    c3dc:	0a000004 	beq	c3f4 <CDWHCITransferStageData::GetHubPortAddress() const+0x24>
    c3e0:	e5900014 	ldr	r0, [r0, #20]
    c3e4:	e3500000 	cmp	r0, #0
    c3e8:	0a000005 	beq	c404 <CDWHCITransferStageData::GetHubPortAddress() const+0x34>
    c3ec:	e8bd4010 	pop	{r4, lr}
    c3f0:	ea000240 	b	ccf8 <CUSBDevice::GetHubPortNumber() const>
    c3f4:	e59f2018 	ldr	r2, [pc, #24]	; c414 <CDWHCITransferStageData::GetHubPortAddress() const+0x44>
    c3f8:	e59f1018 	ldr	r1, [pc, #24]	; c418 <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
    c3fc:	e59f0018 	ldr	r0, [pc, #24]	; c41c <CDWHCITransferStageData::GetHubPortAddress() const+0x4c>
    c400:	eb005c9e 	bl	23680 <assertion_failed>
    c404:	e3a02e19 	mov	r2, #400	; 0x190
    c408:	e59f1008 	ldr	r1, [pc, #8]	; c418 <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
    c40c:	e59f000c 	ldr	r0, [pc, #12]	; c420 <CDWHCITransferStageData::GetHubPortAddress() const+0x50>
    c410:	eb005c9a 	bl	23680 <assertion_failed>
    c414:	0000018e 	.word	0x0000018e
    c418:	00034f6c 	.word	0x00034f6c
    c41c:	00035008 	.word	0x00035008
    c420:	0003503c 	.word	0x0003503c

0000c424 <CDWHCITransferStageData::GetSplitPosition() const>:
    c424:	e3a00003 	mov	r0, #3
    c428:	e12fff1e 	bx	lr

0000c42c <CDWHCITransferStageData::GetStatusMask() const>:
    c42c:	e5d03010 	ldrb	r3, [r0, #16]
    c430:	e3530000 	cmp	r3, #0
    c434:	0a000001 	beq	c440 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    c438:	e59f0018 	ldr	r0, [pc, #24]	; c458 <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    c43c:	e12fff1e 	bx	lr
    c440:	e92d4010 	push	{r4, lr}
    c444:	ebfffe82 	bl	be54 <CDWHCITransferStageData::IsPeriodic() const>
    c448:	e3500000 	cmp	r0, #0
    c44c:	059f0008 	ldreq	r0, [pc, #8]	; c45c <CDWHCITransferStageData::GetStatusMask() const+0x30>
    c450:	159f0000 	ldrne	r0, [pc]	; c458 <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    c454:	e8bd8010 	pop	{r4, pc}
    c458:	000007ff 	.word	0x000007ff
    c45c:	0000078f 	.word	0x0000078f

0000c460 <CDWHCITransferStageData::GetTransactionStatus() const>:
    c460:	e5900040 	ldr	r0, [r0, #64]	; 0x40
    c464:	e3500000 	cmp	r0, #0
    c468:	0a000000 	beq	c470 <CDWHCITransferStageData::GetTransactionStatus() const+0x10>
    c46c:	e12fff1e 	bx	lr
    c470:	e92d4010 	push	{r4, lr}
    c474:	e59f2008 	ldr	r2, [pc, #8]	; c484 <CDWHCITransferStageData::GetTransactionStatus() const+0x24>
    c478:	e59f1008 	ldr	r1, [pc, #8]	; c488 <CDWHCITransferStageData::GetTransactionStatus() const+0x28>
    c47c:	e59f0008 	ldr	r0, [pc, #8]	; c48c <CDWHCITransferStageData::GetTransactionStatus() const+0x2c>
    c480:	eb005c7e 	bl	23680 <assertion_failed>
    c484:	000001ad 	.word	0x000001ad
    c488:	00034f6c 	.word	0x00034f6c
    c48c:	000350e8 	.word	0x000350e8

0000c490 <CDWHCITransferStageData::IsStageComplete() const>:
    c490:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    c494:	e16f0f10 	clz	r0, r0
    c498:	e1a002a0 	lsr	r0, r0, #5
    c49c:	e12fff1e 	bx	lr

0000c4a0 <CDWHCITransferStageData::GetResultLen() const>:
    c4a0:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    c4a4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    c4a8:	e1520000 	cmp	r2, r0
    c4ac:	31a00002 	movcc	r0, r2
    c4b0:	e12fff1e 	bx	lr

0000c4b4 <CDWHCITransferStageData::IsTimeout() const>:
    c4b4:	e590300c 	ldr	r3, [r0, #12]
    c4b8:	e3530000 	cmp	r3, #0
    c4bc:	1a000001 	bne	c4c8 <CDWHCITransferStageData::IsTimeout() const+0x14>
    c4c0:	e1a00003 	mov	r0, r3
    c4c4:	e12fff1e 	bx	lr
    c4c8:	e92d4010 	push	{r4, lr}
    c4cc:	e1a04000 	mov	r4, r0
    c4d0:	eb00722a 	bl	28d80 <CTimer::Get()>
    c4d4:	eb006f73 	bl	282a8 <CTimer::GetTicks() const>
    c4d8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c4dc:	e594200c 	ldr	r2, [r4, #12]
    c4e0:	e0400003 	sub	r0, r0, r3
    c4e4:	e1500002 	cmp	r0, r2
    c4e8:	33a00000 	movcc	r0, #0
    c4ec:	23a00001 	movcs	r0, #1
    c4f0:	e8bd8010 	pop	{r4, pc}

0000c4f4 <CDWHCITransferStageData::GetURB() const>:
    c4f4:	e5900004 	ldr	r0, [r0, #4]
    c4f8:	e3500000 	cmp	r0, #0
    c4fc:	0a000000 	beq	c504 <CDWHCITransferStageData::GetURB() const+0x10>
    c500:	e12fff1e 	bx	lr
    c504:	e92d4010 	push	{r4, lr}
    c508:	e3a02f73 	mov	r2, #460	; 0x1cc
    c50c:	e59f1004 	ldr	r1, [pc, #4]	; c518 <CDWHCITransferStageData::GetURB() const+0x24>
    c510:	e59f0004 	ldr	r0, [pc, #4]	; c51c <CDWHCITransferStageData::GetURB() const+0x28>
    c514:	eb005c59 	bl	23680 <assertion_failed>
    c518:	00034f6c 	.word	0x00034f6c
    c51c:	00035030 	.word	0x00035030

0000c520 <CDWHCITransferStageData::GetFrameScheduler() const>:
    c520:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    c524:	e12fff1e 	bx	lr

0000c528 <CDWHCITransferStageData::operator new(unsigned int)>:
    c528:	e3500054 	cmp	r0, #84	; 0x54
    c52c:	e92d4010 	push	{r4, lr}
    c530:	1a000005 	bne	c54c <CDWHCITransferStageData::operator new(unsigned int)+0x24>
    c534:	e59f3030 	ldr	r3, [pc, #48]	; c56c <CDWHCITransferStageData::operator new(unsigned int)+0x44>
    c538:	e5930000 	ldr	r0, [r3]
    c53c:	e3500000 	cmp	r0, #0
    c540:	0a000005 	beq	c55c <CDWHCITransferStageData::operator new(unsigned int)+0x34>
    c544:	e8bd4010 	pop	{r4, lr}
    c548:	ea005d52 	b	23a98 <CClassAllocator::Allocate()>
    c54c:	e59f201c 	ldr	r2, [pc, #28]	; c570 <CDWHCITransferStageData::operator new(unsigned int)+0x48>
    c550:	e59f101c 	ldr	r1, [pc, #28]	; c574 <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
    c554:	e59f001c 	ldr	r0, [pc, #28]	; c578 <CDWHCITransferStageData::operator new(unsigned int)+0x50>
    c558:	eb005c48 	bl	23680 <assertion_failed>
    c55c:	e59f200c 	ldr	r2, [pc, #12]	; c570 <CDWHCITransferStageData::operator new(unsigned int)+0x48>
    c560:	e59f100c 	ldr	r1, [pc, #12]	; c574 <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
    c564:	e59f0010 	ldr	r0, [pc, #16]	; c57c <CDWHCITransferStageData::operator new(unsigned int)+0x54>
    c568:	eb005c44 	bl	23680 <assertion_failed>
    c56c:	0003e360 	.word	0x0003e360
    c570:	000001d5 	.word	0x000001d5
    c574:	00034f6c 	.word	0x00034f6c
    c578:	00035104 	.word	0x00035104
    c57c:	00034c88 	.word	0x00034c88

0000c580 <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
    c580:	e3510054 	cmp	r1, #84	; 0x54
    c584:	e92d4010 	push	{r4, lr}
    c588:	1a000007 	bne	c5ac <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x2c>
    c58c:	e59f3038 	ldr	r3, [pc, #56]	; c5cc <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x4c>
    c590:	e5933000 	ldr	r3, [r3]
    c594:	e3530000 	cmp	r3, #0
    c598:	0a000007 	beq	c5bc <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x3c>
    c59c:	e8bd4010 	pop	{r4, lr}
    c5a0:	e1a01000 	mov	r1, r0
    c5a4:	e1a00003 	mov	r0, r3
    c5a8:	ea005d75 	b	23b84 <CClassAllocator::Free(void*)>
    c5ac:	e59f201c 	ldr	r2, [pc, #28]	; c5d0 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
    c5b0:	e59f101c 	ldr	r1, [pc, #28]	; c5d4 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x54>
    c5b4:	e59f001c 	ldr	r0, [pc, #28]	; c5d8 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x58>
    c5b8:	eb005c30 	bl	23680 <assertion_failed>
    c5bc:	e59f200c 	ldr	r2, [pc, #12]	; c5d0 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
    c5c0:	e59f100c 	ldr	r1, [pc, #12]	; c5d4 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x54>
    c5c4:	e59f0010 	ldr	r0, [pc, #16]	; c5dc <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x5c>
    c5c8:	eb005c2c 	bl	23680 <assertion_failed>
    c5cc:	0003e360 	.word	0x0003e360
    c5d0:	000001d5 	.word	0x000001d5
    c5d4:	00034f6c 	.word	0x00034f6c
    c5d8:	00035104 	.word	0x00035104
    c5dc:	00034c88 	.word	0x00034c88

0000c5e0 <CDWHCITransferStageData::InitAllocator(unsigned int)>:
    c5e0:	e92d4070 	push	{r4, r5, r6, lr}
    c5e4:	e59f4040 	ldr	r4, [pc, #64]	; c62c <CDWHCITransferStageData::InitAllocator(unsigned int)+0x4c>
    c5e8:	e5943000 	ldr	r3, [r4]
    c5ec:	e3530000 	cmp	r3, #0
    c5f0:	1a000009 	bne	c61c <CDWHCITransferStageData::InitAllocator(unsigned int)+0x3c>
    c5f4:	e1a05000 	mov	r5, r0
    c5f8:	e3a0001c 	mov	r0, #28
    c5fc:	eb00763c 	bl	29ef4 <operator new(unsigned int)>
    c600:	e1a06000 	mov	r6, r0
    c604:	e1a02005 	mov	r2, r5
    c608:	e59f3020 	ldr	r3, [pc, #32]	; c630 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x50>
    c60c:	e3a01054 	mov	r1, #84	; 0x54
    c610:	eb005d07 	bl	23a34 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c614:	e5846000 	str	r6, [r4]
    c618:	e8bd8070 	pop	{r4, r5, r6, pc}
    c61c:	e59f2010 	ldr	r2, [pc, #16]	; c634 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x54>
    c620:	e59f1010 	ldr	r1, [pc, #16]	; c638 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x58>
    c624:	e59f0010 	ldr	r0, [pc, #16]	; c63c <CDWHCITransferStageData::InitAllocator(unsigned int)+0x5c>
    c628:	eb005c14 	bl	23680 <assertion_failed>
    c62c:	0003e360 	.word	0x0003e360
    c630:	00035130 	.word	0x00035130
    c634:	000001d5 	.word	0x000001d5
    c638:	00034f6c 	.word	0x00034f6c
    c63c:	00034c9c 	.word	0x00034c9c

0000c640 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
    c640:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c644:	e59f4054 	ldr	r4, [pc, #84]	; c6a0 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    c648:	e1a05000 	mov	r5, r0
    c64c:	e5940000 	ldr	r0, [r4]
    c650:	e24dd00c 	sub	sp, sp, #12
    c654:	e3500000 	cmp	r0, #0
    c658:	1a00000c 	bne	c690 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    c65c:	e1a06001 	mov	r6, r1
    c660:	e3a0001c 	mov	r0, #28
    c664:	eb007622 	bl	29ef4 <operator new(unsigned int)>
    c668:	e59f1034 	ldr	r1, [pc, #52]	; c6a4 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    c66c:	e1a03006 	mov	r3, r6
    c670:	e58d1000 	str	r1, [sp]
    c674:	e1a02005 	mov	r2, r5
    c678:	e3a01054 	mov	r1, #84	; 0x54
    c67c:	e1a07000 	mov	r7, r0
    c680:	eb005cf7 	bl	23a64 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c684:	e5847000 	str	r7, [r4]
    c688:	e28dd00c 	add	sp, sp, #12
    c68c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c690:	e59f2010 	ldr	r2, [pc, #16]	; c6a8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    c694:	e59f1010 	ldr	r1, [pc, #16]	; c6ac <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    c698:	e59f0010 	ldr	r0, [pc, #16]	; c6b0 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x70>
    c69c:	eb005bf7 	bl	23680 <assertion_failed>
    c6a0:	0003e360 	.word	0x0003e360
    c6a4:	00035130 	.word	0x00035130
    c6a8:	000001d5 	.word	0x000001d5
    c6ac:	00034f6c 	.word	0x00034f6c
    c6b0:	00034c9c 	.word	0x00034c9c

0000c6b4 <CUSBDevice::~CUSBDevice()>:
    c6b4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c6b8:	e1a04000 	mov	r4, r0
    c6bc:	e1a05000 	mov	r5, r0
    c6c0:	e3a06000 	mov	r6, #0
    c6c4:	e59f30fc 	ldr	r3, [pc, #252]	; c7c8 <CUSBDevice::~CUSBDevice()+0x114>
    c6c8:	e2807054 	add	r7, r0, #84	; 0x54
    c6cc:	e484302c 	str	r3, [r4], #44	; 0x2c
    c6d0:	e5940004 	ldr	r0, [r4, #4]
    c6d4:	e3500000 	cmp	r0, #0
    c6d8:	0a000002 	beq	c6e8 <CUSBDevice::~CUSBDevice()+0x34>
    c6dc:	e5903000 	ldr	r3, [r0]
    c6e0:	e5933004 	ldr	r3, [r3, #4]
    c6e4:	e12fff33 	blx	r3
    c6e8:	e5a46004 	str	r6, [r4, #4]!
    c6ec:	e1540007 	cmp	r4, r7
    c6f0:	1afffff6 	bne	c6d0 <CUSBDevice::~CUSBDevice()+0x1c>
    c6f4:	e5d51014 	ldrb	r1, [r5, #20]
    c6f8:	e3510000 	cmp	r1, #0
    c6fc:	0a000011 	beq	c748 <CUSBDevice::~CUSBDevice()+0x94>
    c700:	e3a03000 	mov	r3, #0
    c704:	e59f00c0 	ldr	r0, [pc, #192]	; c7cc <CUSBDevice::~CUSBDevice()+0x118>
    c708:	e261c020 	rsb	ip, r1, #32
    c70c:	e1c080d0 	ldrd	r8, [r0]
    c710:	e1a02138 	lsr	r2, r8, r1
    c714:	e1822c19 	orr	r2, r2, r9, lsl ip
    c718:	e241e020 	sub	lr, r1, #32
    c71c:	e1822e39 	orr	r2, r2, r9, lsr lr
    c720:	e2022001 	and	r2, r2, #1
    c724:	e1923003 	orrs	r3, r2, r3
    c728:	0a000022 	beq	c7b8 <CUSBDevice::~CUSBDevice()+0x104>
    c72c:	e3a04001 	mov	r4, #1
    c730:	e1a03e14 	lsl	r3, r4, lr
    c734:	e1833c34 	orr	r3, r3, r4, lsr ip
    c738:	e1a02114 	lsl	r2, r4, r1
    c73c:	e1c88002 	bic	r8, r8, r2
    c740:	e1c99003 	bic	r9, r9, r3
    c744:	e1c080f0 	strd	r8, [r0]
    c748:	e595402c 	ldr	r4, [r5, #44]	; 0x2c
    c74c:	e3540000 	cmp	r4, #0
    c750:	0a000004 	beq	c768 <CUSBDevice::~CUSBDevice()+0xb4>
    c754:	e1a00004 	mov	r0, r4
    c758:	eb00286e 	bl	16918 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    c75c:	e1a00004 	mov	r0, r4
    c760:	e3a0101c 	mov	r1, #28
    c764:	eb0075f0 	bl	29f2c <operator delete(void*, unsigned int)>
    c768:	e3a04000 	mov	r4, #0
    c76c:	e3a01009 	mov	r1, #9
    c770:	e5950028 	ldr	r0, [r5, #40]	; 0x28
    c774:	e585402c 	str	r4, [r5, #44]	; 0x2c
    c778:	eb0075eb 	bl	29f2c <operator delete(void*, unsigned int)>
    c77c:	e5854028 	str	r4, [r5, #40]	; 0x28
    c780:	e3a01012 	mov	r1, #18
    c784:	e5950024 	ldr	r0, [r5, #36]	; 0x24
    c788:	eb0075e7 	bl	29f2c <operator delete(void*, unsigned int)>
    c78c:	e5956018 	ldr	r6, [r5, #24]
    c790:	e5854024 	str	r4, [r5, #36]	; 0x24
    c794:	e1560004 	cmp	r6, r4
    c798:	0a000004 	beq	c7b0 <CUSBDevice::~CUSBDevice()+0xfc>
    c79c:	e1a00006 	mov	r0, r6
    c7a0:	eb00057f 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
    c7a4:	e1a00006 	mov	r0, r6
    c7a8:	e3a01014 	mov	r1, #20
    c7ac:	eb0075de 	bl	29f2c <operator delete(void*, unsigned int)>
    c7b0:	e1a00005 	mov	r0, r5
    c7b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    c7b8:	e3a02088 	mov	r2, #136	; 0x88
    c7bc:	e59f100c 	ldr	r1, [pc, #12]	; c7d0 <CUSBDevice::~CUSBDevice()+0x11c>
    c7c0:	e59f000c 	ldr	r0, [pc, #12]	; c7d4 <CUSBDevice::~CUSBDevice()+0x120>
    c7c4:	eb005bad 	bl	23680 <assertion_failed>
    c7c8:	00035150 	.word	0x00035150
    c7cc:	0003e368 	.word	0x0003e368
    c7d0:	00035168 	.word	0x00035168
    c7d4:	00035178 	.word	0x00035178

0000c7d8 <CUSBDevice::~CUSBDevice()>:
    c7d8:	e92d4010 	push	{r4, lr}
    c7dc:	e1a04000 	mov	r4, r0
    c7e0:	ebffffb3 	bl	c6b4 <CUSBDevice::~CUSBDevice()>
    c7e4:	e1a00004 	mov	r0, r4
    c7e8:	e3a01058 	mov	r1, #88	; 0x58
    c7ec:	eb0075ce 	bl	29f2c <operator delete(void*, unsigned int)>
    c7f0:	e1a00004 	mov	r0, r4
    c7f4:	e8bd8010 	pop	{r4, pc}

0000c7f8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>:
    c7f8:	e92d4070 	push	{r4, r5, r6, lr}
    c7fc:	e3a05000 	mov	r5, #0
    c800:	e1a04000 	mov	r4, r0
    c804:	e3a00001 	mov	r0, #1
    c808:	e59fc098 	ldr	ip, [pc, #152]	; c8a8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb0>
    c80c:	e1510005 	cmp	r1, r5
    c810:	e5841004 	str	r1, [r4, #4]
    c814:	e5c42015 	strb	r2, [r4, #21]
    c818:	e5843008 	str	r3, [r4, #8]
    c81c:	e584c000 	str	ip, [r4]
    c820:	e5c4001e 	strb	r0, [r4, #30]
    c824:	e584500c 	str	r5, [r4, #12]
    c828:	e5c45014 	strb	r5, [r4, #20]
    c82c:	e5845018 	str	r5, [r4, #24]
    c830:	e5c4501c 	strb	r5, [r4, #28]
    c834:	e5c4501d 	strb	r5, [r4, #29]
    c838:	e5845020 	str	r5, [r4, #32]
    c83c:	e5845024 	str	r5, [r4, #36]	; 0x24
    c840:	e5845028 	str	r5, [r4, #40]	; 0x28
    c844:	e584502c 	str	r5, [r4, #44]	; 0x2c
    c848:	0a00000e 	beq	c888 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x90>
    c84c:	e3530000 	cmp	r3, #0
    c850:	0a000010 	beq	c898 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xa0>
    c854:	e3a00014 	mov	r0, #20
    c858:	eb0075a5 	bl	29ef4 <operator new(unsigned int)>
    c85c:	e1a06000 	mov	r6, r0
    c860:	e1a01004 	mov	r1, r4
    c864:	eb0004d1 	bl	dbb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    c868:	e5846018 	str	r6, [r4, #24]
    c86c:	e284302c 	add	r3, r4, #44	; 0x2c
    c870:	e2842054 	add	r2, r4, #84	; 0x54
    c874:	e5a35004 	str	r5, [r3, #4]!
    c878:	e1530002 	cmp	r3, r2
    c87c:	1afffffc 	bne	c874 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x7c>
    c880:	e1a00004 	mov	r0, r4
    c884:	e8bd8070 	pop	{r4, r5, r6, pc}
    c888:	e3a02038 	mov	r2, #56	; 0x38
    c88c:	e59f1018 	ldr	r1, [pc, #24]	; c8ac <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb4>
    c890:	e59f0018 	ldr	r0, [pc, #24]	; c8b0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb8>
    c894:	eb005b79 	bl	23680 <assertion_failed>
    c898:	e3a02039 	mov	r2, #57	; 0x39
    c89c:	e59f1008 	ldr	r1, [pc, #8]	; c8ac <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb4>
    c8a0:	e59f000c 	ldr	r0, [pc, #12]	; c8b4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xbc>
    c8a4:	eb005b75 	bl	23680 <assertion_failed>
    c8a8:	00035150 	.word	0x00035150
    c8ac:	00035168 	.word	0x00035168
    c8b0:	00034ebc 	.word	0x00034ebc
    c8b4:	000351a8 	.word	0x000351a8

0000c8b8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
    c8b8:	e3a0c000 	mov	ip, #0
    c8bc:	e92d4070 	push	{r4, r5, r6, lr}
    c8c0:	e1a04000 	mov	r4, r0
    c8c4:	e59fe134 	ldr	lr, [pc, #308]	; ca00 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x148>
    c8c8:	e59d0010 	ldr	r0, [sp, #16]
    c8cc:	e151000c 	cmp	r1, ip
    c8d0:	e5841004 	str	r1, [r4, #4]
    c8d4:	e5c42015 	strb	r2, [r4, #21]
    c8d8:	e584300c 	str	r3, [r4, #12]
    c8dc:	e584e000 	str	lr, [r4]
    c8e0:	e5840010 	str	r0, [r4, #16]
    c8e4:	e584c008 	str	ip, [r4, #8]
    c8e8:	e5c4c014 	strb	ip, [r4, #20]
    c8ec:	e584c018 	str	ip, [r4, #24]
    c8f0:	e584c024 	str	ip, [r4, #36]	; 0x24
    c8f4:	e584c028 	str	ip, [r4, #40]	; 0x28
    c8f8:	e584c02c 	str	ip, [r4, #44]	; 0x2c
    c8fc:	0a00002f 	beq	c9c0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x108>
    c900:	e3530000 	cmp	r3, #0
    c904:	0a000031 	beq	c9d0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x118>
    c908:	e1a00003 	mov	r0, r3
    c90c:	eb00067d 	bl	e308 <CUSBFunction::GetDevice() const>
    c910:	e3500000 	cmp	r0, #0
    c914:	0a000031 	beq	c9e0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x128>
    c918:	e5d0301c 	ldrb	r3, [r0, #28]
    c91c:	e5c4301c 	strb	r3, [r4, #28]
    c920:	e5d0201d 	ldrb	r2, [r0, #29]
    c924:	e3530000 	cmp	r3, #0
    c928:	e5c4201d 	strb	r2, [r4, #29]
    c92c:	e5d0301e 	ldrb	r3, [r0, #30]
    c930:	e5c4301e 	strb	r3, [r4, #30]
    c934:	e5903020 	ldr	r3, [r0, #32]
    c938:	e5843020 	str	r3, [r4, #32]
    c93c:	0a000010 	beq	c984 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xcc>
    c940:	e5945018 	ldr	r5, [r4, #24]
    c944:	e3550000 	cmp	r5, #0
    c948:	1a000028 	bne	c9f0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x138>
    c94c:	e3a00014 	mov	r0, #20
    c950:	eb007567 	bl	29ef4 <operator new(unsigned int)>
    c954:	e1a01004 	mov	r1, r4
    c958:	e1a06000 	mov	r6, r0
    c95c:	eb000493 	bl	dbb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    c960:	e1a02005 	mov	r2, r5
    c964:	e5846018 	str	r6, [r4, #24]
    c968:	e284302c 	add	r3, r4, #44	; 0x2c
    c96c:	e2841054 	add	r1, r4, #84	; 0x54
    c970:	e5a32004 	str	r2, [r3, #4]!
    c974:	e1510003 	cmp	r1, r3
    c978:	1afffffc 	bne	c970 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xb8>
    c97c:	e1a00004 	mov	r0, r4
    c980:	e8bd8070 	pop	{r4, r5, r6, pc}
    c984:	e5d03015 	ldrb	r3, [r0, #21]
    c988:	e3530002 	cmp	r3, #2
    c98c:	1affffeb 	bne	c940 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    c990:	e5d43015 	ldrb	r3, [r4, #21]
    c994:	e3530001 	cmp	r3, #1
    c998:	caffffe8 	bgt	c940 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    c99c:	e3a02001 	mov	r2, #1
    c9a0:	e5943010 	ldr	r3, [r4, #16]
    c9a4:	e5c4201c 	strb	r2, [r4, #28]
    c9a8:	e5d02014 	ldrb	r2, [r0, #20]
    c9ac:	e2833001 	add	r3, r3, #1
    c9b0:	e5c4201d 	strb	r2, [r4, #29]
    c9b4:	e5840020 	str	r0, [r4, #32]
    c9b8:	e5c4301e 	strb	r3, [r4, #30]
    c9bc:	eaffffdf 	b	c940 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    c9c0:	e3a02057 	mov	r2, #87	; 0x57
    c9c4:	e59f1038 	ldr	r1, [pc, #56]	; ca04 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    c9c8:	e59f0038 	ldr	r0, [pc, #56]	; ca08 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x150>
    c9cc:	eb005b2b 	bl	23680 <assertion_failed>
    c9d0:	e3a02058 	mov	r2, #88	; 0x58
    c9d4:	e59f1028 	ldr	r1, [pc, #40]	; ca04 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    c9d8:	e59f002c 	ldr	r0, [pc, #44]	; ca0c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x154>
    c9dc:	eb005b27 	bl	23680 <assertion_failed>
    c9e0:	e3a0205b 	mov	r2, #91	; 0x5b
    c9e4:	e59f1018 	ldr	r1, [pc, #24]	; ca04 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    c9e8:	e59f0020 	ldr	r0, [pc, #32]	; ca10 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x158>
    c9ec:	eb005b23 	bl	23680 <assertion_failed>
    c9f0:	e3a02073 	mov	r2, #115	; 0x73
    c9f4:	e59f1008 	ldr	r1, [pc, #8]	; ca04 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    c9f8:	e59f0014 	ldr	r0, [pc, #20]	; ca14 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x15c>
    c9fc:	eb005b1f 	bl	23680 <assertion_failed>
    ca00:	00035150 	.word	0x00035150
    ca04:	00035168 	.word	0x00035168
    ca08:	00034ebc 	.word	0x00034ebc
    ca0c:	000351bc 	.word	0x000351bc
    ca10:	000351c8 	.word	0x000351c8
    ca14:	000351d8 	.word	0x000351d8

0000ca18 <CUSBDevice::ReScanDevices()>:
    ca18:	e92d4070 	push	{r4, r5, r6, lr}
    ca1c:	e3a05000 	mov	r5, #0
    ca20:	e280402c 	add	r4, r0, #44	; 0x2c
    ca24:	e2806054 	add	r6, r0, #84	; 0x54
    ca28:	e5b40004 	ldr	r0, [r4, #4]!
    ca2c:	e3500000 	cmp	r0, #0
    ca30:	0a000004 	beq	ca48 <CUSBDevice::ReScanDevices()+0x30>
    ca34:	e5903000 	ldr	r3, [r0]
    ca38:	e5933020 	ldr	r3, [r3, #32]
    ca3c:	e12fff33 	blx	r3
    ca40:	e3500000 	cmp	r0, #0
    ca44:	11a05000 	movne	r5, r0
    ca48:	e1540006 	cmp	r4, r6
    ca4c:	1afffff5 	bne	ca28 <CUSBDevice::ReScanDevices()+0x10>
    ca50:	e1a00005 	mov	r0, r5
    ca54:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ca58 <CUSBDevice::RemoveDevice()>:
    ca58:	e5903008 	ldr	r3, [r0, #8]
    ca5c:	e3530000 	cmp	r3, #0
    ca60:	0a000003 	beq	ca74 <CUSBDevice::RemoveDevice()+0x1c>
    ca64:	e5932000 	ldr	r2, [r3]
    ca68:	e1a00003 	mov	r0, r3
    ca6c:	e592300c 	ldr	r3, [r2, #12]
    ca70:	e12fff13 	bx	r3
    ca74:	e590300c 	ldr	r3, [r0, #12]
    ca78:	e3530000 	cmp	r3, #0
    ca7c:	0a000002 	beq	ca8c <CUSBDevice::RemoveDevice()+0x34>
    ca80:	e5901010 	ldr	r1, [r0, #16]
    ca84:	e1a00003 	mov	r0, r3
    ca88:	ea001b6e 	b	13848 <CUSBStandardHub::RemoveDevice(unsigned int)>
    ca8c:	e92d4010 	push	{r4, lr}
    ca90:	e3a02f7e 	mov	r2, #504	; 0x1f8
    ca94:	e59f1004 	ldr	r1, [pc, #4]	; caa0 <CUSBDevice::RemoveDevice()+0x48>
    ca98:	e59f0004 	ldr	r0, [pc, #4]	; caa4 <CUSBDevice::RemoveDevice()+0x4c>
    ca9c:	eb005af7 	bl	23680 <assertion_failed>
    caa0:	00035168 	.word	0x00035168
    caa4:	000351bc 	.word	0x000351bc

0000caa8 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    caa8:	e92d4070 	push	{r4, r5, r6, lr}
    caac:	e1a06000 	mov	r6, r0
    cab0:	e24dd008 	sub	sp, sp, #8
    cab4:	e3a00010 	mov	r0, #16
    cab8:	e1a04001 	mov	r4, r1
    cabc:	eb00750c 	bl	29ef4 <operator new(unsigned int)>
    cac0:	e1a05000 	mov	r5, r0
    cac4:	eb0067c6 	bl	269e4 <CString::CString()>
    cac8:	e3540000 	cmp	r4, #0
    cacc:	0a000013 	beq	cb20 <CUSBDevice::GetName(TDeviceNameSelector) const+0x78>
    cad0:	e3540001 	cmp	r4, #1
    cad4:	1a00000d 	bne	cb10 <CUSBDevice::GetName(TDeviceNameSelector) const+0x68>
    cad8:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    cadc:	e3510000 	cmp	r1, #0
    cae0:	0a000026 	beq	cb80 <CUSBDevice::GetName(TDeviceNameSelector) const+0xd8>
    cae4:	e5d12004 	ldrb	r2, [r1, #4]
    cae8:	e2423001 	sub	r3, r2, #1
    caec:	e6ef3073 	uxtb	r3, r3
    caf0:	e35300fd 	cmp	r3, #253	; 0xfd
    caf4:	9a000018 	bls	cb5c <CUSBDevice::GetName(TDeviceNameSelector) const+0xb4>
    caf8:	e59f10a0 	ldr	r1, [pc, #160]	; cba0 <CUSBDevice::GetName(TDeviceNameSelector) const+0xf8>
    cafc:	e1a00005 	mov	r0, r5
    cb00:	eb0067d3 	bl	26a54 <CString::operator=(char const*)>
    cb04:	e1a00005 	mov	r0, r5
    cb08:	e28dd008 	add	sp, sp, #8
    cb0c:	e8bd8070 	pop	{r4, r5, r6, pc}
    cb10:	e3a02f86 	mov	r2, #536	; 0x218
    cb14:	e59f1088 	ldr	r1, [pc, #136]	; cba4 <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    cb18:	e59f0088 	ldr	r0, [pc, #136]	; cba8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    cb1c:	eb005ad7 	bl	23680 <assertion_failed>
    cb20:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    cb24:	e3510000 	cmp	r1, #0
    cb28:	0a000018 	beq	cb90 <CUSBDevice::GetName(TDeviceNameSelector) const+0xe8>
    cb2c:	e5d1000b 	ldrb	r0, [r1, #11]
    cb30:	e5d1300a 	ldrb	r3, [r1, #10]
    cb34:	e5d12008 	ldrb	r2, [r1, #8]
    cb38:	e5d11009 	ldrb	r1, [r1, #9]
    cb3c:	e1833400 	orr	r3, r3, r0, lsl #8
    cb40:	e1822401 	orr	r2, r2, r1, lsl #8
    cb44:	e1a00005 	mov	r0, r5
    cb48:	e59f105c 	ldr	r1, [pc, #92]	; cbac <CUSBDevice::GetName(TDeviceNameSelector) const+0x104>
    cb4c:	eb006ce7 	bl	27ef0 <CString::Format(char const*, ...)>
    cb50:	e1a00005 	mov	r0, r5
    cb54:	e28dd008 	add	sp, sp, #8
    cb58:	e8bd8070 	pop	{r4, r5, r6, pc}
    cb5c:	e5d13005 	ldrb	r3, [r1, #5]
    cb60:	e5d11006 	ldrb	r1, [r1, #6]
    cb64:	e1a00005 	mov	r0, r5
    cb68:	e58d1000 	str	r1, [sp]
    cb6c:	e59f103c 	ldr	r1, [pc, #60]	; cbb0 <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    cb70:	eb006cde 	bl	27ef0 <CString::Format(char const*, ...)>
    cb74:	e1a00005 	mov	r0, r5
    cb78:	e28dd008 	add	sp, sp, #8
    cb7c:	e8bd8070 	pop	{r4, r5, r6, pc}
    cb80:	e59f202c 	ldr	r2, [pc, #44]	; cbb4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
    cb84:	e59f1018 	ldr	r1, [pc, #24]	; cba4 <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    cb88:	e59f0028 	ldr	r0, [pc, #40]	; cbb8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
    cb8c:	eb005abb 	bl	23680 <assertion_failed>
    cb90:	e3a02f81 	mov	r2, #516	; 0x204
    cb94:	e59f1008 	ldr	r1, [pc, #8]	; cba4 <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    cb98:	e59f0018 	ldr	r0, [pc, #24]	; cbb8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
    cb9c:	eb005ab7 	bl	23680 <assertion_failed>
    cba0:	00035218 	.word	0x00035218
    cba4:	00035168 	.word	0x00035168
    cba8:	00035260 	.word	0x00035260
    cbac:	00035200 	.word	0x00035200
    cbb0:	0003520c 	.word	0x0003520c
    cbb4:	0000020b 	.word	0x0000020b
    cbb8:	000351ec 	.word	0x000351ec

0000cbbc <CUSBDevice::GetNames() const>:
    cbbc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    cbc0:	e1a07000 	mov	r7, r0
    cbc4:	e3a00010 	mov	r0, #16
    cbc8:	eb0074c9 	bl	29ef4 <operator new(unsigned int)>
    cbcc:	e3a04000 	mov	r4, #0
    cbd0:	e1a06000 	mov	r6, r0
    cbd4:	eb006782 	bl	269e4 <CString::CString()>
    cbd8:	e59f80b4 	ldr	r8, [pc, #180]	; cc94 <CUSBDevice::GetNames() const+0xd8>
    cbdc:	e59f90b4 	ldr	r9, [pc, #180]	; cc98 <CUSBDevice::GetNames() const+0xdc>
    cbe0:	e6ef1074 	uxtb	r1, r4
    cbe4:	e1a00007 	mov	r0, r7
    cbe8:	ebffffae 	bl	caa8 <CUSBDevice::GetName(TDeviceNameSelector) const>
    cbec:	e2505000 	subs	r5, r0, #0
    cbf0:	0a00001f 	beq	cc74 <CUSBDevice::GetNames() const+0xb8>
    cbf4:	e1a01008 	mov	r1, r8
    cbf8:	eb0067e2 	bl	26b88 <CString::Compare(char const*) const>
    cbfc:	e3500000 	cmp	r0, #0
    cc00:	1a000011 	bne	cc4c <CUSBDevice::GetNames() const+0x90>
    cc04:	e5953000 	ldr	r3, [r5]
    cc08:	e2844001 	add	r4, r4, #1
    cc0c:	e5933004 	ldr	r3, [r3, #4]
    cc10:	e1a00005 	mov	r0, r5
    cc14:	e12fff33 	blx	r3
    cc18:	e3540002 	cmp	r4, #2
    cc1c:	1affffef 	bne	cbe0 <CUSBDevice::GetNames() const+0x24>
    cc20:	e1a00006 	mov	r0, r6
    cc24:	eb0067b2 	bl	26af4 <CString::GetLength() const>
    cc28:	e3500000 	cmp	r0, #0
    cc2c:	0a000001 	beq	cc38 <CUSBDevice::GetNames() const+0x7c>
    cc30:	e1a00006 	mov	r0, r6
    cc34:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    cc38:	e59f1054 	ldr	r1, [pc, #84]	; cc94 <CUSBDevice::GetNames() const+0xd8>
    cc3c:	e1a00006 	mov	r0, r6
    cc40:	eb006783 	bl	26a54 <CString::operator=(char const*)>
    cc44:	e1a00006 	mov	r0, r6
    cc48:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    cc4c:	e1a00006 	mov	r0, r6
    cc50:	eb0067a7 	bl	26af4 <CString::GetLength() const>
    cc54:	e3500000 	cmp	r0, #0
    cc58:	1a000009 	bne	cc84 <CUSBDevice::GetNames() const+0xc8>
    cc5c:	e1a00005 	mov	r0, r5
    cc60:	eb006775 	bl	26a3c <CString::operator char const*() const>
    cc64:	e1a01000 	mov	r1, r0
    cc68:	e1a00006 	mov	r0, r6
    cc6c:	eb0067a4 	bl	26b04 <CString::Append(char const*)>
    cc70:	eaffffe3 	b	cc04 <CUSBDevice::GetNames() const+0x48>
    cc74:	e59f2020 	ldr	r2, [pc, #32]	; cc9c <CUSBDevice::GetNames() const+0xe0>
    cc78:	e59f1020 	ldr	r1, [pc, #32]	; cca0 <CUSBDevice::GetNames() const+0xe4>
    cc7c:	e59f0020 	ldr	r0, [pc, #32]	; cca4 <CUSBDevice::GetNames() const+0xe8>
    cc80:	eb005a7e 	bl	23680 <assertion_failed>
    cc84:	e1a01009 	mov	r1, r9
    cc88:	e1a00006 	mov	r0, r6
    cc8c:	eb00679c 	bl	26b04 <CString::Append(char const*)>
    cc90:	eafffff1 	b	cc5c <CUSBDevice::GetNames() const+0xa0>
    cc94:	00035218 	.word	0x00035218
    cc98:	0003522c 	.word	0x0003522c
    cc9c:	00000229 	.word	0x00000229
    cca0:	00035168 	.word	0x00035168
    cca4:	00035220 	.word	0x00035220

0000cca8 <CUSBDevice::SetAddress(unsigned char)>:
    cca8:	e351003f 	cmp	r1, #63	; 0x3f
    ccac:	ca000001 	bgt	ccb8 <CUSBDevice::SetAddress(unsigned char)+0x10>
    ccb0:	e5c01014 	strb	r1, [r0, #20]
    ccb4:	e12fff1e 	bx	lr
    ccb8:	e92d4010 	push	{r4, lr}
    ccbc:	e59f2008 	ldr	r2, [pc, #8]	; cccc <CUSBDevice::SetAddress(unsigned char)+0x24>
    ccc0:	e59f1008 	ldr	r1, [pc, #8]	; ccd0 <CUSBDevice::SetAddress(unsigned char)+0x28>
    ccc4:	e59f0008 	ldr	r0, [pc, #8]	; ccd4 <CUSBDevice::SetAddress(unsigned char)+0x2c>
    ccc8:	eb005a6c 	bl	23680 <assertion_failed>
    cccc:	00000243 	.word	0x00000243
    ccd0:	00035168 	.word	0x00035168
    ccd4:	00035230 	.word	0x00035230

0000ccd8 <CUSBDevice::GetAddress() const>:
    ccd8:	e5d00014 	ldrb	r0, [r0, #20]
    ccdc:	e12fff1e 	bx	lr

0000cce0 <CUSBDevice::GetSpeed() const>:
    cce0:	e5d00015 	ldrb	r0, [r0, #21]
    cce4:	e12fff1e 	bx	lr

0000cce8 <CUSBDevice::IsSplit() const>:
    cce8:	e5d0001c 	ldrb	r0, [r0, #28]
    ccec:	e12fff1e 	bx	lr

0000ccf0 <CUSBDevice::GetHubAddress() const>:
    ccf0:	e5d0001d 	ldrb	r0, [r0, #29]
    ccf4:	e12fff1e 	bx	lr

0000ccf8 <CUSBDevice::GetHubPortNumber() const>:
    ccf8:	e5d0001e 	ldrb	r0, [r0, #30]
    ccfc:	e12fff1e 	bx	lr

0000cd00 <CUSBDevice::GetTTHubDevice() const>:
    cd00:	e5900020 	ldr	r0, [r0, #32]
    cd04:	e12fff1e 	bx	lr

0000cd08 <CUSBDevice::GetEndpoint0() const>:
    cd08:	e5900018 	ldr	r0, [r0, #24]
    cd0c:	e3500000 	cmp	r0, #0
    cd10:	0a000000 	beq	cd18 <CUSBDevice::GetEndpoint0() const+0x10>
    cd14:	e12fff1e 	bx	lr
    cd18:	e92d4010 	push	{r4, lr}
    cd1c:	e3a02f9b 	mov	r2, #620	; 0x26c
    cd20:	e59f1004 	ldr	r1, [pc, #4]	; cd2c <CUSBDevice::GetEndpoint0() const+0x24>
    cd24:	e59f0004 	ldr	r0, [pc, #4]	; cd30 <CUSBDevice::GetEndpoint0() const+0x28>
    cd28:	eb005a54 	bl	23680 <assertion_failed>
    cd2c:	00035168 	.word	0x00035168
    cd30:	00035250 	.word	0x00035250

0000cd34 <CUSBDevice::GetHost() const>:
    cd34:	e5900004 	ldr	r0, [r0, #4]
    cd38:	e3500000 	cmp	r0, #0
    cd3c:	0a000000 	beq	cd44 <CUSBDevice::GetHost() const+0x10>
    cd40:	e12fff1e 	bx	lr
    cd44:	e92d4010 	push	{r4, lr}
    cd48:	e59f2008 	ldr	r2, [pc, #8]	; cd58 <CUSBDevice::GetHost() const+0x24>
    cd4c:	e59f1008 	ldr	r1, [pc, #8]	; cd5c <CUSBDevice::GetHost() const+0x28>
    cd50:	e59f0008 	ldr	r0, [pc, #8]	; cd60 <CUSBDevice::GetHost() const+0x2c>
    cd54:	eb005a49 	bl	23680 <assertion_failed>
    cd58:	00000272 	.word	0x00000272
    cd5c:	00035168 	.word	0x00035168
    cd60:	00034ebc 	.word	0x00034ebc

0000cd64 <CUSBDevice::GetDeviceDescriptor() const>:
    cd64:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    cd68:	e3500000 	cmp	r0, #0
    cd6c:	0a000000 	beq	cd74 <CUSBDevice::GetDeviceDescriptor() const+0x10>
    cd70:	e12fff1e 	bx	lr
    cd74:	e92d4010 	push	{r4, lr}
    cd78:	e3a02f9e 	mov	r2, #632	; 0x278
    cd7c:	e59f1004 	ldr	r1, [pc, #4]	; cd88 <CUSBDevice::GetDeviceDescriptor() const+0x24>
    cd80:	e59f0004 	ldr	r0, [pc, #4]	; cd8c <CUSBDevice::GetDeviceDescriptor() const+0x28>
    cd84:	eb005a3d 	bl	23680 <assertion_failed>
    cd88:	00035168 	.word	0x00035168
    cd8c:	000351ec 	.word	0x000351ec

0000cd90 <CUSBDevice::GetConfigurationDescriptor() const>:
    cd90:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    cd94:	e3500000 	cmp	r0, #0
    cd98:	0a000000 	beq	cda0 <CUSBDevice::GetConfigurationDescriptor() const+0x10>
    cd9c:	e12fff1e 	bx	lr
    cda0:	e92d4010 	push	{r4, lr}
    cda4:	e59f2008 	ldr	r2, [pc, #8]	; cdb4 <CUSBDevice::GetConfigurationDescriptor() const+0x24>
    cda8:	e59f1008 	ldr	r1, [pc, #8]	; cdb8 <CUSBDevice::GetConfigurationDescriptor() const+0x28>
    cdac:	e59f0008 	ldr	r0, [pc, #8]	; cdbc <CUSBDevice::GetConfigurationDescriptor() const+0x2c>
    cdb0:	eb005a32 	bl	23680 <assertion_failed>
    cdb4:	0000027e 	.word	0x0000027e
    cdb8:	00035168 	.word	0x00035168
    cdbc:	00035264 	.word	0x00035264

0000cdc0 <CUSBDevice::GetDescriptor(unsigned char)>:
    cdc0:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    cdc4:	e3500000 	cmp	r0, #0
    cdc8:	0a000000 	beq	cdd0 <CUSBDevice::GetDescriptor(unsigned char)+0x10>
    cdcc:	ea0026d4 	b	16924 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    cdd0:	e92d4010 	push	{r4, lr}
    cdd4:	e3a02fa1 	mov	r2, #644	; 0x284
    cdd8:	e59f1004 	ldr	r1, [pc, #4]	; cde4 <CUSBDevice::GetDescriptor(unsigned char)+0x24>
    cddc:	e59f0004 	ldr	r0, [pc, #4]	; cde8 <CUSBDevice::GetDescriptor(unsigned char)+0x28>
    cde0:	eb005a26 	bl	23680 <assertion_failed>
    cde4:	00035168 	.word	0x00035168
    cde8:	00035278 	.word	0x00035278

0000cdec <CUSBDevice::ConfigurationError(char const*) const>:
    cdec:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    cdf0:	e3500000 	cmp	r0, #0
    cdf4:	0a000000 	beq	cdfc <CUSBDevice::ConfigurationError(char const*) const+0x10>
    cdf8:	ea002717 	b	16a5c <CUSBConfigurationParser::Error(char const*) const>
    cdfc:	e92d4010 	push	{r4, lr}
    ce00:	e59f2008 	ldr	r2, [pc, #8]	; ce10 <CUSBDevice::ConfigurationError(char const*) const+0x24>
    ce04:	e59f1008 	ldr	r1, [pc, #8]	; ce14 <CUSBDevice::ConfigurationError(char const*) const+0x28>
    ce08:	e59f0008 	ldr	r0, [pc, #8]	; ce18 <CUSBDevice::ConfigurationError(char const*) const+0x2c>
    ce0c:	eb005a1b 	bl	23680 <assertion_failed>
    ce10:	0000028a 	.word	0x0000028a
    ce14:	00035168 	.word	0x00035168
    ce18:	00035278 	.word	0x00035278

0000ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    ce1c:	e92d000c 	push	{r2, r3}
    ce20:	e92d4070 	push	{r4, r5, r6, lr}
    ce24:	e24dd020 	sub	sp, sp, #32
    ce28:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    ce2c:	e3540000 	cmp	r4, #0
    ce30:	0a00001d 	beq	ceac <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x90>
    ce34:	e1a05000 	mov	r5, r0
    ce38:	e28d0010 	add	r0, sp, #16
    ce3c:	e1a06001 	mov	r6, r1
    ce40:	eb0066e7 	bl	269e4 <CString::CString()>
    ce44:	e5d5201e 	ldrb	r2, [r5, #30]
    ce48:	e5d5301d 	ldrb	r3, [r5, #29]
    ce4c:	e59f1068 	ldr	r1, [pc, #104]	; cebc <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa0>
    ce50:	e28d0010 	add	r0, sp, #16
    ce54:	e58d2000 	str	r2, [sp]
    ce58:	e59f2060 	ldr	r2, [pc, #96]	; cec0 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa4>
    ce5c:	eb006c23 	bl	27ef0 <CString::Format(char const*, ...)>
    ce60:	e28d3034 	add	r3, sp, #52	; 0x34
    ce64:	e58d300c 	str	r3, [sp, #12]
    ce68:	eb0062f7 	bl	25a4c <CLogger::Get()>
    ce6c:	e1a05000 	mov	r5, r0
    ce70:	e28d0010 	add	r0, sp, #16
    ce74:	eb0066f0 	bl	26a3c <CString::operator char const*() const>
    ce78:	e59dc00c 	ldr	ip, [sp, #12]
    ce7c:	e1a01000 	mov	r1, r0
    ce80:	e1a03004 	mov	r3, r4
    ce84:	e1a00005 	mov	r0, r5
    ce88:	e1a02006 	mov	r2, r6
    ce8c:	e58dc000 	str	ip, [sp]
    ce90:	eb006236 	bl	25770 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    ce94:	e28d0010 	add	r0, sp, #16
    ce98:	eb00669e 	bl	26918 <CString::~CString()>
    ce9c:	e28dd020 	add	sp, sp, #32
    cea0:	e8bd4070 	pop	{r4, r5, r6, lr}
    cea4:	e28dd008 	add	sp, sp, #8
    cea8:	e12fff1e 	bx	lr
    ceac:	e3a02e29 	mov	r2, #656	; 0x290
    ceb0:	e59f100c 	ldr	r1, [pc, #12]	; cec4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa8>
    ceb4:	e59f000c 	ldr	r0, [pc, #12]	; cec8 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xac>
    ceb8:	eb0059f0 	bl	23680 <assertion_failed>
    cebc:	000352a0 	.word	0x000352a0
    cec0:	00035160 	.word	0x00035160
    cec4:	00035168 	.word	0x00035168
    cec8:	00035290 	.word	0x00035290

0000cecc <CUSBDevice::Initialize()>:
    cecc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ced0:	e5906024 	ldr	r6, [r0, #36]	; 0x24
    ced4:	e24dd014 	sub	sp, sp, #20
    ced8:	e3560000 	cmp	r6, #0
    cedc:	1a000033 	bne	cfb0 <CUSBDevice::Initialize()+0xe4>
    cee0:	e1a04000 	mov	r4, r0
    cee4:	e3a00012 	mov	r0, #18
    cee8:	eb007401 	bl	29ef4 <operator new(unsigned int)>
    ceec:	e5943004 	ldr	r3, [r4, #4]
    cef0:	e5840024 	str	r0, [r4, #36]	; 0x24
    cef4:	e3530000 	cmp	r3, #0
    cef8:	0a000030 	beq	cfc0 <CUSBDevice::Initialize()+0xf4>
    cefc:	e5941018 	ldr	r1, [r4, #24]
    cf00:	e3510000 	cmp	r1, #0
    cf04:	0a000031 	beq	cfd0 <CUSBDevice::Initialize()+0x104>
    cf08:	e3a02008 	mov	r2, #8
    cf0c:	e3a07080 	mov	r7, #128	; 0x80
    cf10:	e58d0000 	str	r0, [sp]
    cf14:	e98d0084 	stmib	sp, {r2, r7}
    cf18:	e1a00003 	mov	r0, r3
    cf1c:	e58d600c 	str	r6, [sp, #12]
    cf20:	e1a03006 	mov	r3, r6
    cf24:	e3a02001 	mov	r2, #1
    cf28:	eb001110 	bl	11370 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    cf2c:	e3500008 	cmp	r0, #8
    cf30:	1a000012 	bne	cf80 <CUSBDevice::Initialize()+0xb4>
    cf34:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    cf38:	e5d3b000 	ldrb	fp, [r3]
    cf3c:	e35b0012 	cmp	fp, #18
    cf40:	1a000002 	bne	cf50 <CUSBDevice::Initialize()+0x84>
    cf44:	e5d3a001 	ldrb	sl, [r3, #1]
    cf48:	e35a0001 	cmp	sl, #1
    cf4c:	0a000023 	beq	cfe0 <CUSBDevice::Initialize()+0x114>
    cf50:	e3a05000 	mov	r5, #0
    cf54:	e59f2668 	ldr	r2, [pc, #1640]	; d5c4 <CUSBDevice::Initialize()+0x6f8>
    cf58:	e1a00004 	mov	r0, r4
    cf5c:	e3a01001 	mov	r1, #1
    cf60:	ebffffad 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    cf64:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    cf68:	e3a01012 	mov	r1, #18
    cf6c:	eb0073ee 	bl	29f2c <operator delete(void*, unsigned int)>
    cf70:	e1a00005 	mov	r0, r5
    cf74:	e5845024 	str	r5, [r4, #36]	; 0x24
    cf78:	e28dd014 	add	sp, sp, #20
    cf7c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf80:	e3a01001 	mov	r1, #1
    cf84:	e59f263c 	ldr	r2, [pc, #1596]	; d5c8 <CUSBDevice::Initialize()+0x6fc>
    cf88:	e1a05006 	mov	r5, r6
    cf8c:	e1a00004 	mov	r0, r4
    cf90:	ebffffa1 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    cf94:	e3a01012 	mov	r1, #18
    cf98:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    cf9c:	eb0073e2 	bl	29f2c <operator delete(void*, unsigned int)>
    cfa0:	e5846024 	str	r6, [r4, #36]	; 0x24
    cfa4:	e1a00005 	mov	r0, r5
    cfa8:	e28dd014 	add	sp, sp, #20
    cfac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfb0:	e3a020a7 	mov	r2, #167	; 0xa7
    cfb4:	e59f1610 	ldr	r1, [pc, #1552]	; d5cc <CUSBDevice::Initialize()+0x700>
    cfb8:	e59f0610 	ldr	r0, [pc, #1552]	; d5d0 <CUSBDevice::Initialize()+0x704>
    cfbc:	eb0059af 	bl	23680 <assertion_failed>
    cfc0:	e3a020ab 	mov	r2, #171	; 0xab
    cfc4:	e59f1600 	ldr	r1, [pc, #1536]	; d5cc <CUSBDevice::Initialize()+0x700>
    cfc8:	e59f0604 	ldr	r0, [pc, #1540]	; d5d4 <CUSBDevice::Initialize()+0x708>
    cfcc:	eb0059ab 	bl	23680 <assertion_failed>
    cfd0:	e3a020ac 	mov	r2, #172	; 0xac
    cfd4:	e59f15f0 	ldr	r1, [pc, #1520]	; d5cc <CUSBDevice::Initialize()+0x700>
    cfd8:	e59f05f8 	ldr	r0, [pc, #1528]	; d5d8 <CUSBDevice::Initialize()+0x70c>
    cfdc:	eb0059a7 	bl	23680 <assertion_failed>
    cfe0:	e5d31007 	ldrb	r1, [r3, #7]
    cfe4:	e5940018 	ldr	r0, [r4, #24]
    cfe8:	eb00037f 	bl	ddec <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    cfec:	e2505000 	subs	r5, r0, #0
    cff0:	0a000027 	beq	d094 <CUSBDevice::Initialize()+0x1c8>
    cff4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    cff8:	e5941018 	ldr	r1, [r4, #24]
    cffc:	e5940004 	ldr	r0, [r4, #4]
    d000:	e1a0200a 	mov	r2, sl
    d004:	e88d0808 	stm	sp, {r3, fp}
    d008:	e58d600c 	str	r6, [sp, #12]
    d00c:	e58d7008 	str	r7, [sp, #8]
    d010:	e1a03006 	mov	r3, r6
    d014:	eb0010d5 	bl	11370 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d018:	e3500012 	cmp	r0, #18
    d01c:	1a000025 	bne	d0b8 <CUSBDevice::Initialize()+0x1ec>
    d020:	e59fc5b4 	ldr	ip, [pc, #1460]	; d5dc <CUSBDevice::Initialize()+0x710>
    d024:	e1cc20d0 	ldrd	r2, [ip]
    d028:	e1b010a3 	lsrs	r1, r3, #1
    d02c:	e1a00062 	rrx	r0, r2
    d030:	e3a01000 	mov	r1, #0
    d034:	e2000001 	and	r0, r0, #1
    d038:	e1901001 	orrs	r1, r0, r1
    d03c:	0a000020 	beq	d0c4 <CUSBDevice::Initialize()+0x1f8>
    d040:	e3a0e002 	mov	lr, #2
    d044:	e26e1020 	rsb	r1, lr, #32
    d048:	e1a08e32 	lsr	r8, r2, lr
    d04c:	e1888113 	orr	r8, r8, r3, lsl r1
    d050:	e24e1020 	sub	r1, lr, #32
    d054:	e1888133 	orr	r8, r8, r3, lsr r1
    d058:	e3a01000 	mov	r1, #0
    d05c:	e2080001 	and	r0, r8, #1
    d060:	e1901001 	orrs	r1, r0, r1
    d064:	e6ef607e 	uxtb	r6, lr
    d068:	e1a0a00e 	mov	sl, lr
    d06c:	0a000015 	beq	d0c8 <CUSBDevice::Initialize()+0x1fc>
    d070:	e28ee001 	add	lr, lr, #1
    d074:	e35e0040 	cmp	lr, #64	; 0x40
    d078:	1afffff1 	bne	d044 <CUSBDevice::Initialize()+0x178>
    d07c:	e1a00004 	mov	r0, r4
    d080:	e59f2558 	ldr	r2, [pc, #1368]	; d5e0 <CUSBDevice::Initialize()+0x714>
    d084:	e3a01001 	mov	r1, #1
    d088:	ebffff63 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d08c:	e3a05000 	mov	r5, #0
    d090:	eaffffc3 	b	cfa4 <CUSBDevice::Initialize()+0xd8>
    d094:	e1a0100a 	mov	r1, sl
    d098:	e59f2544 	ldr	r2, [pc, #1348]	; d5e4 <CUSBDevice::Initialize()+0x718>
    d09c:	e1a00004 	mov	r0, r4
    d0a0:	ebffff5d 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d0a4:	e1a0100b 	mov	r1, fp
    d0a8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    d0ac:	eb00739e 	bl	29f2c <operator delete(void*, unsigned int)>
    d0b0:	e5845024 	str	r5, [r4, #36]	; 0x24
    d0b4:	eaffffba 	b	cfa4 <CUSBDevice::Initialize()+0xd8>
    d0b8:	e1a0100a 	mov	r1, sl
    d0bc:	e59f2524 	ldr	r2, [pc, #1316]	; d5e8 <CUSBDevice::Initialize()+0x71c>
    d0c0:	eaffffb0 	b	cf88 <CUSBDevice::Initialize()+0xbc>
    d0c4:	e1a0600a 	mov	r6, sl
    d0c8:	e3a07001 	mov	r7, #1
    d0cc:	e24ae020 	sub	lr, sl, #32
    d0d0:	e1a09e17 	lsl	r9, r7, lr
    d0d4:	e26ae020 	rsb	lr, sl, #32
    d0d8:	e1899e37 	orr	r9, r9, r7, lsr lr
    d0dc:	e1a08a17 	lsl	r8, r7, sl
    d0e0:	e1888002 	orr	r8, r8, r2
    d0e4:	e1899003 	orr	r9, r9, r3
    d0e8:	e5940004 	ldr	r0, [r4, #4]
    d0ec:	e1a02006 	mov	r2, r6
    d0f0:	e5941018 	ldr	r1, [r4, #24]
    d0f4:	e1cc80f0 	strd	r8, [ip]
    d0f8:	eb0010aa 	bl	113a8 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    d0fc:	e2505000 	subs	r5, r0, #0
    d100:	0a000036 	beq	d1e0 <CUSBDevice::Initialize()+0x314>
    d104:	e5945028 	ldr	r5, [r4, #40]	; 0x28
    d108:	e5c46014 	strb	r6, [r4, #20]
    d10c:	e3550000 	cmp	r5, #0
    d110:	1a000069 	bne	d2bc <CUSBDevice::Initialize()+0x3f0>
    d114:	e3a00009 	mov	r0, #9
    d118:	eb007375 	bl	29ef4 <operator new(unsigned int)>
    d11c:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    d120:	e5840028 	str	r0, [r4, #40]	; 0x28
    d124:	e5d12008 	ldrb	r2, [r1, #8]
    d128:	e5d1c009 	ldrb	ip, [r1, #9]
    d12c:	e59f34b8 	ldr	r3, [pc, #1208]	; d5ec <CUSBDevice::Initialize()+0x720>
    d130:	e182240c 	orr	r2, r2, ip, lsl #8
    d134:	e1520003 	cmp	r2, r3
    d138:	0a00002e 	beq	d1f8 <CUSBDevice::Initialize()+0x32c>
    d13c:	e3a07009 	mov	r7, #9
    d140:	e3a06000 	mov	r6, #0
    d144:	e3a08080 	mov	r8, #128	; 0x80
    d148:	e5943004 	ldr	r3, [r4, #4]
    d14c:	e5941018 	ldr	r1, [r4, #24]
    d150:	e3a02002 	mov	r2, #2
    d154:	e58d0000 	str	r0, [sp]
    d158:	e58d600c 	str	r6, [sp, #12]
    d15c:	e1a00003 	mov	r0, r3
    d160:	e98d0180 	stmib	sp, {r7, r8}
    d164:	e1a03005 	mov	r3, r5
    d168:	eb001080 	bl	11370 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d16c:	e1500007 	cmp	r0, r7
    d170:	1a000010 	bne	d1b8 <CUSBDevice::Initialize()+0x2ec>
    d174:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    d178:	e5d07000 	ldrb	r7, [r0]
    d17c:	e3570009 	cmp	r7, #9
    d180:	1a000002 	bne	d190 <CUSBDevice::Initialize()+0x2c4>
    d184:	e5d0a001 	ldrb	sl, [r0, #1]
    d188:	e35a0002 	cmp	sl, #2
    d18c:	0a000021 	beq	d218 <CUSBDevice::Initialize()+0x34c>
    d190:	e3a05000 	mov	r5, #0
    d194:	e59f2454 	ldr	r2, [pc, #1108]	; d5f0 <CUSBDevice::Initialize()+0x724>
    d198:	e3a01001 	mov	r1, #1
    d19c:	e1a00004 	mov	r0, r4
    d1a0:	ebffff1d 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d1a4:	e3a01009 	mov	r1, #9
    d1a8:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    d1ac:	eb00735e 	bl	29f2c <operator delete(void*, unsigned int)>
    d1b0:	e5845028 	str	r5, [r4, #40]	; 0x28
    d1b4:	eaffff7a 	b	cfa4 <CUSBDevice::Initialize()+0xd8>
    d1b8:	e59f2434 	ldr	r2, [pc, #1076]	; d5f4 <CUSBDevice::Initialize()+0x728>
    d1bc:	e3a01001 	mov	r1, #1
    d1c0:	e1a00004 	mov	r0, r4
    d1c4:	ebffff14 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d1c8:	e1a01007 	mov	r1, r7
    d1cc:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    d1d0:	eb007355 	bl	29f2c <operator delete(void*, unsigned int)>
    d1d4:	e1a05006 	mov	r5, r6
    d1d8:	e5846028 	str	r6, [r4, #40]	; 0x28
    d1dc:	eaffff70 	b	cfa4 <CUSBDevice::Initialize()+0xd8>
    d1e0:	e1a03006 	mov	r3, r6
    d1e4:	e1a01007 	mov	r1, r7
    d1e8:	e1a00004 	mov	r0, r4
    d1ec:	e59f2404 	ldr	r2, [pc, #1028]	; d5f8 <CUSBDevice::Initialize()+0x72c>
    d1f0:	ebffff09 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d1f4:	eaffff6a 	b	cfa4 <CUSBDevice::Initialize()+0xd8>
    d1f8:	e5d1500a 	ldrb	r5, [r1, #10]
    d1fc:	e5d1200b 	ldrb	r2, [r1, #11]
    d200:	e59f33f4 	ldr	r3, [pc, #1012]	; d5fc <CUSBDevice::Initialize()+0x730>
    d204:	e1855402 	orr	r5, r5, r2, lsl #8
    d208:	e0455003 	sub	r5, r5, r3
    d20c:	e16f5f15 	clz	r5, r5
    d210:	e1a052a5 	lsr	r5, r5, #5
    d214:	eaffffc8 	b	d13c <CUSBDevice::Initialize()+0x270>
    d218:	e5d09002 	ldrb	r9, [r0, #2]
    d21c:	e5d03003 	ldrb	r3, [r0, #3]
    d220:	e1899403 	orr	r9, r9, r3, lsl #8
    d224:	e3590c02 	cmp	r9, #512	; 0x200
    d228:	caffffd8 	bgt	d190 <CUSBDevice::Initialize()+0x2c4>
    d22c:	e1a01007 	mov	r1, r7
    d230:	eb00733d 	bl	29f2c <operator delete(void*, unsigned int)>
    d234:	e1a00009 	mov	r0, r9
    d238:	eb00732e 	bl	29ef8 <operator new[](unsigned int)>
    d23c:	e58d600c 	str	r6, [sp, #12]
    d240:	e5840028 	str	r0, [r4, #40]	; 0x28
    d244:	e58d0000 	str	r0, [sp]
    d248:	e58d8008 	str	r8, [sp, #8]
    d24c:	e58d9004 	str	r9, [sp, #4]
    d250:	e1a03005 	mov	r3, r5
    d254:	e1a0200a 	mov	r2, sl
    d258:	e5941018 	ldr	r1, [r4, #24]
    d25c:	e5940004 	ldr	r0, [r4, #4]
    d260:	eb001042 	bl	11370 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    d264:	e1590000 	cmp	r9, r0
    d268:	1a000017 	bne	d2cc <CUSBDevice::Initialize()+0x400>
    d26c:	e594602c 	ldr	r6, [r4, #44]	; 0x2c
    d270:	e3560000 	cmp	r6, #0
    d274:	1a000016 	bne	d2d4 <CUSBDevice::Initialize()+0x408>
    d278:	e3a0001c 	mov	r0, #28
    d27c:	eb00731c 	bl	29ef4 <operator new(unsigned int)>
    d280:	e1a05000 	mov	r5, r0
    d284:	e1a02009 	mov	r2, r9
    d288:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    d28c:	eb002538 	bl	16774 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    d290:	e584502c 	str	r5, [r4, #44]	; 0x2c
    d294:	e1a00005 	mov	r0, r5
    d298:	eb00259f 	bl	1691c <CUSBConfigurationParser::IsValid() const>
    d29c:	e2505000 	subs	r5, r0, #0
    d2a0:	1a000013 	bne	d2f4 <CUSBDevice::Initialize()+0x428>
    d2a4:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d2a8:	e3500000 	cmp	r0, #0
    d2ac:	0a00000c 	beq	d2e4 <CUSBDevice::Initialize()+0x418>
    d2b0:	e59f1348 	ldr	r1, [pc, #840]	; d600 <CUSBDevice::Initialize()+0x734>
    d2b4:	eb0025e8 	bl	16a5c <CUSBConfigurationParser::Error(char const*) const>
    d2b8:	eaffff39 	b	cfa4 <CUSBDevice::Initialize()+0xd8>
    d2bc:	e3a02c01 	mov	r2, #256	; 0x100
    d2c0:	e59f1304 	ldr	r1, [pc, #772]	; d5cc <CUSBDevice::Initialize()+0x700>
    d2c4:	e59f0338 	ldr	r0, [pc, #824]	; d604 <CUSBDevice::Initialize()+0x738>
    d2c8:	eb0058ec 	bl	23680 <assertion_failed>
    d2cc:	e59f2334 	ldr	r2, [pc, #820]	; d608 <CUSBDevice::Initialize()+0x73c>
    d2d0:	eaffffb9 	b	d1bc <CUSBDevice::Initialize()+0x2f0>
    d2d4:	e59f2330 	ldr	r2, [pc, #816]	; d60c <CUSBDevice::Initialize()+0x740>
    d2d8:	e59f12ec 	ldr	r1, [pc, #748]	; d5cc <CUSBDevice::Initialize()+0x700>
    d2dc:	e59f032c 	ldr	r0, [pc, #812]	; d610 <CUSBDevice::Initialize()+0x744>
    d2e0:	eb0058e6 	bl	23680 <assertion_failed>
    d2e4:	e59f2328 	ldr	r2, [pc, #808]	; d614 <CUSBDevice::Initialize()+0x748>
    d2e8:	e59f12dc 	ldr	r1, [pc, #732]	; d5cc <CUSBDevice::Initialize()+0x700>
    d2ec:	e59f0324 	ldr	r0, [pc, #804]	; d618 <CUSBDevice::Initialize()+0x74c>
    d2f0:	eb0058e2 	bl	23680 <assertion_failed>
    d2f4:	e1a00004 	mov	r0, r4
    d2f8:	ebfffe2f 	bl	cbbc <CUSBDevice::GetNames() const>
    d2fc:	e2507000 	subs	r7, r0, #0
    d300:	0a000051 	beq	d44c <CUSBDevice::Initialize()+0x580>
    d304:	eb0065cc 	bl	26a3c <CString::operator char const*() const>
    d308:	e59f230c 	ldr	r2, [pc, #780]	; d61c <CUSBDevice::Initialize()+0x750>
    d30c:	e1a03000 	mov	r3, r0
    d310:	e3a01003 	mov	r1, #3
    d314:	e1a00004 	mov	r0, r4
    d318:	ebfffebf 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d31c:	e5973000 	ldr	r3, [r7]
    d320:	e1a00007 	mov	r0, r7
    d324:	e5933004 	ldr	r3, [r3, #4]
    d328:	e12fff33 	blx	r3
    d32c:	e1a07006 	mov	r7, r6
    d330:	e1a0a006 	mov	sl, r6
    d334:	e3a01004 	mov	r1, #4
    d338:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    d33c:	eb002578 	bl	16924 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    d340:	e3500000 	cmp	r0, #0
    d344:	0a000038 	beq	d42c <CUSBDevice::Initialize()+0x560>
    d348:	e5d09002 	ldrb	r9, [r0, #2]
    d34c:	e1590006 	cmp	r9, r6
    d350:	da000028 	ble	d3f8 <CUSBDevice::Initialize()+0x52c>
    d354:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    d358:	e3530000 	cmp	r3, #0
    d35c:	0a00002e 	beq	d41c <CUSBDevice::Initialize()+0x550>
    d360:	e0846107 	add	r6, r4, r7, lsl #2
    d364:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    d368:	e3530000 	cmp	r3, #0
    d36c:	1a000086 	bne	d58c <CUSBDevice::Initialize()+0x6c0>
    d370:	e3a00010 	mov	r0, #16
    d374:	eb0072de 	bl	29ef4 <operator new(unsigned int)>
    d378:	e1a08000 	mov	r8, r0
    d37c:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    d380:	e1a01004 	mov	r1, r4
    d384:	eb000357 	bl	e0e8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    d388:	e3570000 	cmp	r7, #0
    d38c:	e5868030 	str	r8, [r6, #48]	; 0x30
    d390:	0a00005c 	beq	d508 <CUSBDevice::Initialize()+0x63c>
    d394:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    d398:	eb0003b3 	bl	e26c <CUSBFunction::GetInterfaceName() const>
    d39c:	e2508000 	subs	r8, r0, #0
    d3a0:	0a00004d 	beq	d4dc <CUSBDevice::Initialize()+0x610>
    d3a4:	e59f1274 	ldr	r1, [pc, #628]	; d620 <CUSBDevice::Initialize()+0x754>
    d3a8:	eb0065f6 	bl	26b88 <CString::Compare(char const*) const>
    d3ac:	e250b000 	subs	fp, r0, #0
    d3b0:	1a000029 	bne	d45c <CUSBDevice::Initialize()+0x590>
    d3b4:	e5983000 	ldr	r3, [r8]
    d3b8:	e1a00008 	mov	r0, r8
    d3bc:	e5933004 	ldr	r3, [r3, #4]
    d3c0:	e12fff33 	blx	r3
    d3c4:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    d3c8:	e3500000 	cmp	r0, #0
    d3cc:	0a000003 	beq	d3e0 <CUSBDevice::Initialize()+0x514>
    d3d0:	e5903000 	ldr	r3, [r0]
    d3d4:	e5933004 	ldr	r3, [r3, #4]
    d3d8:	e12fff33 	blx	r3
    d3dc:	e586b030 	str	fp, [r6, #48]	; 0x30
    d3e0:	e59f223c 	ldr	r2, [pc, #572]	; d624 <CUSBDevice::Initialize()+0x758>
    d3e4:	e3a01002 	mov	r1, #2
    d3e8:	e1a00004 	mov	r0, r4
    d3ec:	ebfffe8a 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d3f0:	e1a06009 	mov	r6, r9
    d3f4:	eaffffce 	b	d334 <CUSBDevice::Initialize()+0x468>
    d3f8:	e1560009 	cmp	r6, r9
    d3fc:	0affffd4 	beq	d354 <CUSBDevice::Initialize()+0x488>
    d400:	e5d03003 	ldrb	r3, [r0, #3]
    d404:	e59f221c 	ldr	r2, [pc, #540]	; d628 <CUSBDevice::Initialize()+0x75c>
    d408:	e3a01004 	mov	r1, #4
    d40c:	e1a00004 	mov	r0, r4
    d410:	e1a09006 	mov	r9, r6
    d414:	ebfffe80 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d418:	eafffff4 	b	d3f0 <CUSBDevice::Initialize()+0x524>
    d41c:	e59f2208 	ldr	r2, [pc, #520]	; d62c <CUSBDevice::Initialize()+0x760>
    d420:	e59f11a4 	ldr	r1, [pc, #420]	; d5cc <CUSBDevice::Initialize()+0x700>
    d424:	e59f01ec 	ldr	r0, [pc, #492]	; d618 <CUSBDevice::Initialize()+0x74c>
    d428:	eb005894 	bl	23680 <assertion_failed>
    d42c:	e3570000 	cmp	r7, #0
    d430:	1afffedb 	bne	cfa4 <CUSBDevice::Initialize()+0xd8>
    d434:	e1a00004 	mov	r0, r4
    d438:	e59f21f0 	ldr	r2, [pc, #496]	; d630 <CUSBDevice::Initialize()+0x764>
    d43c:	e3a01002 	mov	r1, #2
    d440:	e1a05007 	mov	r5, r7
    d444:	ebfffe74 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d448:	eafffed5 	b	cfa4 <CUSBDevice::Initialize()+0xd8>
    d44c:	e59f21e0 	ldr	r2, [pc, #480]	; d634 <CUSBDevice::Initialize()+0x768>
    d450:	e59f1174 	ldr	r1, [pc, #372]	; d5cc <CUSBDevice::Initialize()+0x700>
    d454:	e59f01dc 	ldr	r0, [pc, #476]	; d638 <CUSBDevice::Initialize()+0x76c>
    d458:	eb005888 	bl	23680 <assertion_failed>
    d45c:	e1a00008 	mov	r0, r8
    d460:	eb006575 	bl	26a3c <CString::operator char const*() const>
    d464:	e59f21d0 	ldr	r2, [pc, #464]	; d63c <CUSBDevice::Initialize()+0x770>
    d468:	e1a03000 	mov	r3, r0
    d46c:	e3a01003 	mov	r1, #3
    d470:	e1a00004 	mov	r0, r4
    d474:	ebfffe68 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d478:	e1a01008 	mov	r1, r8
    d47c:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    d480:	eb0000b1 	bl	d74c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    d484:	e1a08000 	mov	r8, r0
    d488:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    d48c:	e3500000 	cmp	r0, #0
    d490:	0a000002 	beq	d4a0 <CUSBDevice::Initialize()+0x5d4>
    d494:	e5903000 	ldr	r3, [r0]
    d498:	e5933004 	ldr	r3, [r3, #4]
    d49c:	e12fff33 	blx	r3
    d4a0:	e3580000 	cmp	r8, #0
    d4a4:	0a000036 	beq	d584 <CUSBDevice::Initialize()+0x6b8>
    d4a8:	e5983000 	ldr	r3, [r8]
    d4ac:	e1a00008 	mov	r0, r8
    d4b0:	e5868030 	str	r8, [r6, #48]	; 0x30
    d4b4:	e5933018 	ldr	r3, [r3, #24]
    d4b8:	e12fff33 	blx	r3
    d4bc:	e3500000 	cmp	r0, #0
    d4c0:	0a000023 	beq	d554 <CUSBDevice::Initialize()+0x688>
    d4c4:	e2877001 	add	r7, r7, #1
    d4c8:	e357000a 	cmp	r7, #10
    d4cc:	0a000006 	beq	d4ec <CUSBDevice::Initialize()+0x620>
    d4d0:	e2899001 	add	r9, r9, #1
    d4d4:	e6ef9079 	uxtb	r9, r9
    d4d8:	eaffffc4 	b	d3f0 <CUSBDevice::Initialize()+0x524>
    d4dc:	e3a02d06 	mov	r2, #384	; 0x180
    d4e0:	e59f10e4 	ldr	r1, [pc, #228]	; d5cc <CUSBDevice::Initialize()+0x700>
    d4e4:	e59f0154 	ldr	r0, [pc, #340]	; d640 <CUSBDevice::Initialize()+0x774>
    d4e8:	eb005864 	bl	23680 <assertion_failed>
    d4ec:	e1a03000 	mov	r3, r0
    d4f0:	e59f214c 	ldr	r2, [pc, #332]	; d644 <CUSBDevice::Initialize()+0x778>
    d4f4:	e1a00004 	mov	r0, r4
    d4f8:	e3a01002 	mov	r1, #2
    d4fc:	e1a05003 	mov	r5, r3
    d500:	ebfffe45 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d504:	eafffea6 	b	cfa4 <CUSBDevice::Initialize()+0xd8>
    d508:	e1a0100a 	mov	r1, sl
    d50c:	e1a00004 	mov	r0, r4
    d510:	ebfffd64 	bl	caa8 <CUSBDevice::GetName(TDeviceNameSelector) const>
    d514:	e1a01000 	mov	r1, r0
    d518:	e1a00008 	mov	r0, r8
    d51c:	eb00008a 	bl	d74c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    d520:	e2508000 	subs	r8, r0, #0
    d524:	0a00001c 	beq	d59c <CUSBDevice::Initialize()+0x6d0>
    d528:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    d52c:	e3500000 	cmp	r0, #0
    d530:	1affffd7 	bne	d494 <CUSBDevice::Initialize()+0x5c8>
    d534:	e5983000 	ldr	r3, [r8]
    d538:	e1a00008 	mov	r0, r8
    d53c:	e5848030 	str	r8, [r4, #48]	; 0x30
    d540:	e5933018 	ldr	r3, [r3, #24]
    d544:	e12fff33 	blx	r3
    d548:	e3500000 	cmp	r0, #0
    d54c:	13a07001 	movne	r7, #1
    d550:	1affffde 	bne	d4d0 <CUSBDevice::Initialize()+0x604>
    d554:	e1a00004 	mov	r0, r4
    d558:	e59f20e8 	ldr	r2, [pc, #232]	; d648 <CUSBDevice::Initialize()+0x77c>
    d55c:	e3a01001 	mov	r1, #1
    d560:	ebfffe2d 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d564:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    d568:	e3500000 	cmp	r0, #0
    d56c:	0a000002 	beq	d57c <CUSBDevice::Initialize()+0x6b0>
    d570:	e5903000 	ldr	r3, [r0]
    d574:	e5933004 	ldr	r3, [r3, #4]
    d578:	e12fff33 	blx	r3
    d57c:	e586a030 	str	sl, [r6, #48]	; 0x30
    d580:	eaffff9a 	b	d3f0 <CUSBDevice::Initialize()+0x524>
    d584:	e5868030 	str	r8, [r6, #48]	; 0x30
    d588:	eaffff94 	b	d3e0 <CUSBDevice::Initialize()+0x514>
    d58c:	e59f20b8 	ldr	r2, [pc, #184]	; d64c <CUSBDevice::Initialize()+0x780>
    d590:	e59f1034 	ldr	r1, [pc, #52]	; d5cc <CUSBDevice::Initialize()+0x700>
    d594:	e59f00b4 	ldr	r0, [pc, #180]	; d650 <CUSBDevice::Initialize()+0x784>
    d598:	eb005838 	bl	23680 <assertion_failed>
    d59c:	e3a01001 	mov	r1, #1
    d5a0:	e1a00004 	mov	r0, r4
    d5a4:	e5948030 	ldr	r8, [r4, #48]	; 0x30
    d5a8:	ebfffd3e 	bl	caa8 <CUSBDevice::GetName(TDeviceNameSelector) const>
    d5ac:	e1a01000 	mov	r1, r0
    d5b0:	e1a00008 	mov	r0, r8
    d5b4:	eb000064 	bl	d74c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    d5b8:	e2508000 	subs	r8, r0, #0
    d5bc:	1affffd9 	bne	d528 <CUSBDevice::Initialize()+0x65c>
    d5c0:	eaffff73 	b	d394 <CUSBDevice::Initialize()+0x4c8>
    d5c4:	000352e4 	.word	0x000352e4
    d5c8:	000352bc 	.word	0x000352bc
    d5cc:	00035168 	.word	0x00035168
    d5d0:	000352a8 	.word	0x000352a8
    d5d4:	00034ebc 	.word	0x00034ebc
    d5d8:	00035250 	.word	0x00035250
    d5dc:	0003e368 	.word	0x0003e368
    d5e0:	000354e8 	.word	0x000354e8
    d5e4:	00035300 	.word	0x00035300
    d5e8:	00035328 	.word	0x00035328
    d5ec:	00000525 	.word	0x00000525
    d5f0:	000353a0 	.word	0x000353a0
    d5f4:	00035374 	.word	0x00035374
    d5f8:	00035348 	.word	0x00035348
    d5fc:	0000a4a2 	.word	0x0000a4a2
    d600:	00035160 	.word	0x00035160
    d604:	00035360 	.word	0x00035360
    d608:	000353c4 	.word	0x000353c4
    d60c:	0000013e 	.word	0x0000013e
    d610:	000353e8 	.word	0x000353e8
    d614:	0000028a 	.word	0x0000028a
    d618:	00035278 	.word	0x00035278
    d61c:	0003540c 	.word	0x0003540c
    d620:	00035218 	.word	0x00035218
    d624:	0003546c 	.word	0x0003546c
    d628:	0003541c 	.word	0x0003541c
    d62c:	0000016d 	.word	0x0000016d
    d630:	000354c4 	.word	0x000354c4
    d634:	0000014a 	.word	0x0000014a
    d638:	00035400 	.word	0x00035400
    d63c:	00035458 	.word	0x00035458
    d640:	00035220 	.word	0x00035220
    d644:	000354a4 	.word	0x000354a4
    d648:	00035488 	.word	0x00035488
    d64c:	0000016e 	.word	0x0000016e
    d650:	0003543c 	.word	0x0003543c

0000d654 <CUSBDevice::Configure()>:
    d654:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d658:	e1a05000 	mov	r5, r0
    d65c:	e5900004 	ldr	r0, [r0, #4]
    d660:	e3500000 	cmp	r0, #0
    d664:	0a00002a 	beq	d714 <CUSBDevice::Configure()+0xc0>
    d668:	e5951018 	ldr	r1, [r5, #24]
    d66c:	e3510000 	cmp	r1, #0
    d670:	0a00002b 	beq	d724 <CUSBDevice::Configure()+0xd0>
    d674:	e5956028 	ldr	r6, [r5, #40]	; 0x28
    d678:	e3560000 	cmp	r6, #0
    d67c:	0a00001a 	beq	d6ec <CUSBDevice::Configure()+0x98>
    d680:	e5d62005 	ldrb	r2, [r6, #5]
    d684:	eb000f5a 	bl	113f4 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    d688:	e2506000 	subs	r6, r0, #0
    d68c:	0a000018 	beq	d6f4 <CUSBDevice::Configure()+0xa0>
    d690:	e3a06000 	mov	r6, #0
    d694:	e1a07006 	mov	r7, r6
    d698:	e2854030 	add	r4, r5, #48	; 0x30
    d69c:	e2855058 	add	r5, r5, #88	; 0x58
    d6a0:	e5940000 	ldr	r0, [r4]
    d6a4:	e3500000 	cmp	r0, #0
    d6a8:	0a00000c 	beq	d6e0 <CUSBDevice::Configure()+0x8c>
    d6ac:	e5903000 	ldr	r3, [r0]
    d6b0:	e593301c 	ldr	r3, [r3, #28]
    d6b4:	e12fff33 	blx	r3
    d6b8:	e3500000 	cmp	r0, #0
    d6bc:	11a06000 	movne	r6, r0
    d6c0:	1a000006 	bne	d6e0 <CUSBDevice::Configure()+0x8c>
    d6c4:	e5940000 	ldr	r0, [r4]
    d6c8:	e3500000 	cmp	r0, #0
    d6cc:	0a000002 	beq	d6dc <CUSBDevice::Configure()+0x88>
    d6d0:	e5903000 	ldr	r3, [r0]
    d6d4:	e5933004 	ldr	r3, [r3, #4]
    d6d8:	e12fff33 	blx	r3
    d6dc:	e5847000 	str	r7, [r4]
    d6e0:	e2844004 	add	r4, r4, #4
    d6e4:	e1550004 	cmp	r5, r4
    d6e8:	1affffec 	bne	d6a0 <CUSBDevice::Configure()+0x4c>
    d6ec:	e1a00006 	mov	r0, r6
    d6f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d6f4:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    d6f8:	e1a00005 	mov	r0, r5
    d6fc:	e5d33005 	ldrb	r3, [r3, #5]
    d700:	e59f202c 	ldr	r2, [pc, #44]	; d734 <CUSBDevice::Configure()+0xe0>
    d704:	e3a01001 	mov	r1, #1
    d708:	ebfffdc3 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d70c:	e1a00006 	mov	r0, r6
    d710:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d714:	e59f201c 	ldr	r2, [pc, #28]	; d738 <CUSBDevice::Configure()+0xe4>
    d718:	e59f101c 	ldr	r1, [pc, #28]	; d73c <CUSBDevice::Configure()+0xe8>
    d71c:	e59f001c 	ldr	r0, [pc, #28]	; d740 <CUSBDevice::Configure()+0xec>
    d720:	eb0057d6 	bl	23680 <assertion_failed>
    d724:	e59f2018 	ldr	r2, [pc, #24]	; d744 <CUSBDevice::Configure()+0xf0>
    d728:	e59f100c 	ldr	r1, [pc, #12]	; d73c <CUSBDevice::Configure()+0xe8>
    d72c:	e59f0014 	ldr	r0, [pc, #20]	; d748 <CUSBDevice::Configure()+0xf4>
    d730:	eb0057d2 	bl	23680 <assertion_failed>
    d734:	000354fc 	.word	0x000354fc
    d738:	000001b9 	.word	0x000001b9
    d73c:	00035168 	.word	0x00035168
    d740:	00034ebc 	.word	0x00034ebc
    d744:	000001ba 	.word	0x000001ba
    d748:	00035250 	.word	0x00035250

0000d74c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    d74c:	e92d4070 	push	{r4, r5, r6, lr}
    d750:	e2506000 	subs	r6, r0, #0
    d754:	0a000042 	beq	d864 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x118>
    d758:	e3510000 	cmp	r1, #0
    d75c:	e1a04001 	mov	r4, r1
    d760:	0a000043 	beq	d874 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x128>
    d764:	e59f13d0 	ldr	r1, [pc, #976]	; db3c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f0>
    d768:	e1a00004 	mov	r0, r4
    d76c:	eb006505 	bl	26b88 <CString::Compare(char const*) const>
    d770:	e3500000 	cmp	r0, #0
    d774:	1a000014 	bne	d7cc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x80>
    d778:	e3a00068 	mov	r0, #104	; 0x68
    d77c:	eb0071dc 	bl	29ef4 <operator new(unsigned int)>
    d780:	e1a01006 	mov	r1, r6
    d784:	e1a05000 	mov	r5, r0
    d788:	eb0017e8 	bl	13730 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    d78c:	e1a00005 	mov	r0, r5
    d790:	eb0002dc 	bl	e308 <CUSBFunction::GetDevice() const>
    d794:	e1a06000 	mov	r6, r0
    d798:	e1a00004 	mov	r0, r4
    d79c:	eb0064a6 	bl	26a3c <CString::operator char const*() const>
    d7a0:	e59f2398 	ldr	r2, [pc, #920]	; db40 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f4>
    d7a4:	e1a03000 	mov	r3, r0
    d7a8:	e3a01003 	mov	r1, #3
    d7ac:	e1a00006 	mov	r0, r6
    d7b0:	ebfffd99 	bl	ce1c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    d7b4:	e5943000 	ldr	r3, [r4]
    d7b8:	e1a00004 	mov	r0, r4
    d7bc:	e5933004 	ldr	r3, [r3, #4]
    d7c0:	e12fff33 	blx	r3
    d7c4:	e1a00005 	mov	r0, r5
    d7c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    d7cc:	e59f1370 	ldr	r1, [pc, #880]	; db44 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f8>
    d7d0:	e1a00004 	mov	r0, r4
    d7d4:	eb0064eb 	bl	26b88 <CString::Compare(char const*) const>
    d7d8:	e3500000 	cmp	r0, #0
    d7dc:	0affffe5 	beq	d778 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2c>
    d7e0:	e59f1360 	ldr	r1, [pc, #864]	; db48 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3fc>
    d7e4:	e1a00004 	mov	r0, r4
    d7e8:	eb0064e6 	bl	26b88 <CString::Compare(char const*) const>
    d7ec:	e3500000 	cmp	r0, #0
    d7f0:	1a000005 	bne	d80c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xc0>
    d7f4:	e3a00030 	mov	r0, #48	; 0x30
    d7f8:	eb0071bd 	bl	29ef4 <operator new(unsigned int)>
    d7fc:	e1a01006 	mov	r1, r6
    d800:	e1a05000 	mov	r5, r0
    d804:	eb00107b 	bl	119f8 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    d808:	eaffffdf 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    d80c:	e59f1338 	ldr	r1, [pc, #824]	; db4c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x400>
    d810:	e1a00004 	mov	r0, r4
    d814:	eb0064db 	bl	26b88 <CString::Compare(char const*) const>
    d818:	e3500000 	cmp	r0, #0
    d81c:	0a00000a 	beq	d84c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x100>
    d820:	e59f1328 	ldr	r1, [pc, #808]	; db50 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x404>
    d824:	e1a00004 	mov	r0, r4
    d828:	eb0064d6 	bl	26b88 <CString::Compare(char const*) const>
    d82c:	e3500000 	cmp	r0, #0
    d830:	1a000013 	bne	d884 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x138>
    d834:	e3a00030 	mov	r0, #48	; 0x30
    d838:	eb0071ad 	bl	29ef4 <operator new(unsigned int)>
    d83c:	e1a01006 	mov	r1, r6
    d840:	e1a05000 	mov	r5, r0
    d844:	eb0015b3 	bl	12f18 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    d848:	eaffffcf 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    d84c:	e3a00e45 	mov	r0, #1104	; 0x450
    d850:	eb0071a7 	bl	29ef4 <operator new(unsigned int)>
    d854:	e1a01006 	mov	r1, r6
    d858:	e1a05000 	mov	r5, r0
    d85c:	eb000f86 	bl	1167c <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    d860:	eaffffc9 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    d864:	e3a0202b 	mov	r2, #43	; 0x2b
    d868:	e59f12e4 	ldr	r1, [pc, #740]	; db54 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x408>
    d86c:	e59f02e4 	ldr	r0, [pc, #740]	; db58 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40c>
    d870:	eb005782 	bl	23680 <assertion_failed>
    d874:	e3a0202c 	mov	r2, #44	; 0x2c
    d878:	e59f12d4 	ldr	r1, [pc, #724]	; db54 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x408>
    d87c:	e59f02d8 	ldr	r0, [pc, #728]	; db5c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x410>
    d880:	eb00577e 	bl	23680 <assertion_failed>
    d884:	e59f12d4 	ldr	r1, [pc, #724]	; db60 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x414>
    d888:	e1a00004 	mov	r0, r4
    d88c:	eb0064bd 	bl	26b88 <CString::Compare(char const*) const>
    d890:	e3500000 	cmp	r0, #0
    d894:	0a00000a 	beq	d8c4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x178>
    d898:	e59f12c4 	ldr	r1, [pc, #708]	; db64 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
    d89c:	e1a00004 	mov	r0, r4
    d8a0:	eb0064b8 	bl	26b88 <CString::Compare(char const*) const>
    d8a4:	e3500000 	cmp	r0, #0
    d8a8:	1a00000c 	bne	d8e0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x194>
    d8ac:	e3a00f5b 	mov	r0, #364	; 0x16c
    d8b0:	eb00718f 	bl	29ef4 <operator new(unsigned int)>
    d8b4:	e1a01006 	mov	r1, r6
    d8b8:	e1a05000 	mov	r5, r0
    d8bc:	eb0003b1 	bl	e788 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
    d8c0:	eaffffb1 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    d8c4:	e3a00f4f 	mov	r0, #316	; 0x13c
    d8c8:	eb007189 	bl	29ef4 <operator new(unsigned int)>
    d8cc:	e1a01006 	mov	r1, r6
    d8d0:	e3a02001 	mov	r2, #1
    d8d4:	e1a05000 	mov	r5, r0
    d8d8:	eb0006c0 	bl	f3e0 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    d8dc:	eaffffaa 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    d8e0:	e59f1280 	ldr	r1, [pc, #640]	; db68 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x41c>
    d8e4:	e1a00004 	mov	r0, r4
    d8e8:	eb0064a6 	bl	26b88 <CString::Compare(char const*) const>
    d8ec:	e3500000 	cmp	r0, #0
    d8f0:	1a000005 	bne	d90c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1c0>
    d8f4:	e3a00f53 	mov	r0, #332	; 0x14c
    d8f8:	eb00717d 	bl	29ef4 <operator new(unsigned int)>
    d8fc:	e1a01006 	mov	r1, r6
    d900:	e1a05000 	mov	r5, r0
    d904:	eb000508 	bl	ed2c <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
    d908:	eaffff9f 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    d90c:	e59f1258 	ldr	r1, [pc, #600]	; db6c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x420>
    d910:	e1a00004 	mov	r0, r4
    d914:	eb00649b 	bl	26b88 <CString::Compare(char const*) const>
    d918:	e3500000 	cmp	r0, #0
    d91c:	0afffff4 	beq	d8f4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1a8>
    d920:	e59f1248 	ldr	r1, [pc, #584]	; db70 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x424>
    d924:	e1a00004 	mov	r0, r4
    d928:	eb006496 	bl	26b88 <CString::Compare(char const*) const>
    d92c:	e3500000 	cmp	r0, #0
    d930:	1a000005 	bne	d94c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x200>
    d934:	e3a00e13 	mov	r0, #304	; 0x130
    d938:	eb00716d 	bl	29ef4 <operator new(unsigned int)>
    d93c:	e1a01006 	mov	r1, r6
    d940:	e1a05000 	mov	r5, r0
    d944:	eb000ae4 	bl	104dc <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
    d948:	eaffff8f 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    d94c:	e59f1220 	ldr	r1, [pc, #544]	; db74 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x428>
    d950:	e1a00004 	mov	r0, r4
    d954:	eb00648b 	bl	26b88 <CString::Compare(char const*) const>
    d958:	e3500000 	cmp	r0, #0
    d95c:	0afffff4 	beq	d934 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1e8>
    d960:	e59f1210 	ldr	r1, [pc, #528]	; db78 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x42c>
    d964:	e1a00004 	mov	r0, r4
    d968:	eb006486 	bl	26b88 <CString::Compare(char const*) const>
    d96c:	e3500000 	cmp	r0, #0
    d970:	1a000005 	bne	d98c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x240>
    d974:	e3a00f4d 	mov	r0, #308	; 0x134
    d978:	eb00715d 	bl	29ef4 <operator new(unsigned int)>
    d97c:	e1a01006 	mov	r1, r6
    d980:	e1a05000 	mov	r5, r0
    d984:	eb000bec 	bl	1093c <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
    d988:	eaffff7f 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    d98c:	e59f11e8 	ldr	r1, [pc, #488]	; db7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x430>
    d990:	e1a00004 	mov	r0, r4
    d994:	eb00647b 	bl	26b88 <CString::Compare(char const*) const>
    d998:	e3500000 	cmp	r0, #0
    d99c:	0afffff4 	beq	d974 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x228>
    d9a0:	e59f11d8 	ldr	r1, [pc, #472]	; db80 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x434>
    d9a4:	e1a00004 	mov	r0, r4
    d9a8:	eb006476 	bl	26b88 <CString::Compare(char const*) const>
    d9ac:	e3500000 	cmp	r0, #0
    d9b0:	0affffef 	beq	d974 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x228>
    d9b4:	e59f11c8 	ldr	r1, [pc, #456]	; db84 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x438>
    d9b8:	e1a00004 	mov	r0, r4
    d9bc:	eb006471 	bl	26b88 <CString::Compare(char const*) const>
    d9c0:	e3500000 	cmp	r0, #0
    d9c4:	0affffea 	beq	d974 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x228>
    d9c8:	e59f11b8 	ldr	r1, [pc, #440]	; db88 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x43c>
    d9cc:	e1a00004 	mov	r0, r4
    d9d0:	eb00646c 	bl	26b88 <CString::Compare(char const*) const>
    d9d4:	e3500000 	cmp	r0, #0
    d9d8:	1a000005 	bne	d9f4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2a8>
    d9dc:	e3a00f4d 	mov	r0, #308	; 0x134
    d9e0:	eb007143 	bl	29ef4 <operator new(unsigned int)>
    d9e4:	e1a01006 	mov	r1, r6
    d9e8:	e1a05000 	mov	r5, r0
    d9ec:	eb00093e 	bl	feec <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
    d9f0:	eaffff65 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    d9f4:	e59f1190 	ldr	r1, [pc, #400]	; db8c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x440>
    d9f8:	e1a00004 	mov	r0, r4
    d9fc:	eb006461 	bl	26b88 <CString::Compare(char const*) const>
    da00:	e3500000 	cmp	r0, #0
    da04:	1a000005 	bne	da20 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2d4>
    da08:	e3a0001c 	mov	r0, #28
    da0c:	eb007138 	bl	29ef4 <operator new(unsigned int)>
    da10:	e1a01006 	mov	r1, r6
    da14:	e1a05000 	mov	r5, r0
    da18:	eb001595 	bl	13074 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    da1c:	eaffff5a 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    da20:	e59f1168 	ldr	r1, [pc, #360]	; db90 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x444>
    da24:	e1a00004 	mov	r0, r4
    da28:	eb006456 	bl	26b88 <CString::Compare(char const*) const>
    da2c:	e3500000 	cmp	r0, #0
    da30:	0afffff4 	beq	da08 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2bc>
    da34:	e59f1158 	ldr	r1, [pc, #344]	; db94 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x448>
    da38:	e1a00004 	mov	r0, r4
    da3c:	eb006451 	bl	26b88 <CString::Compare(char const*) const>
    da40:	e3500000 	cmp	r0, #0
    da44:	1a000005 	bne	da60 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x314>
    da48:	e3a00024 	mov	r0, #36	; 0x24
    da4c:	eb007128 	bl	29ef4 <operator new(unsigned int)>
    da50:	e1a01006 	mov	r1, r6
    da54:	e1a05000 	mov	r5, r0
    da58:	eb001e38 	bl	15340 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    da5c:	eaffff4a 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    da60:	e59f1130 	ldr	r1, [pc, #304]	; db98 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44c>
    da64:	e1a00004 	mov	r0, r4
    da68:	eb006446 	bl	26b88 <CString::Compare(char const*) const>
    da6c:	e3500000 	cmp	r0, #0
    da70:	1a000005 	bne	da8c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x340>
    da74:	e3a00024 	mov	r0, #36	; 0x24
    da78:	eb00711d 	bl	29ef4 <operator new(unsigned int)>
    da7c:	e1a01006 	mov	r1, r6
    da80:	e1a05000 	mov	r5, r0
    da84:	eb001a96 	bl	144e4 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
    da88:	eaffff3f 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    da8c:	e59f1108 	ldr	r1, [pc, #264]	; db9c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x450>
    da90:	e1a00004 	mov	r0, r4
    da94:	eb00643b 	bl	26b88 <CString::Compare(char const*) const>
    da98:	e3500000 	cmp	r0, #0
    da9c:	1a000005 	bne	dab8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x36c>
    daa0:	e3a00028 	mov	r0, #40	; 0x28
    daa4:	eb007112 	bl	29ef4 <operator new(unsigned int)>
    daa8:	e1a01006 	mov	r1, r6
    daac:	e1a05000 	mov	r5, r0
    dab0:	eb002070 	bl	15c78 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    dab4:	eaffff34 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    dab8:	e59f10e0 	ldr	r1, [pc, #224]	; dba0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x454>
    dabc:	e1a00004 	mov	r0, r4
    dac0:	eb006430 	bl	26b88 <CString::Compare(char const*) const>
    dac4:	e3500000 	cmp	r0, #0
    dac8:	0afffff4 	beq	daa0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x354>
    dacc:	e59f10d0 	ldr	r1, [pc, #208]	; dba4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x458>
    dad0:	e1a00004 	mov	r0, r4
    dad4:	eb00642b 	bl	26b88 <CString::Compare(char const*) const>
    dad8:	e3500000 	cmp	r0, #0
    dadc:	1a000005 	bne	daf8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3ac>
    dae0:	e3a00028 	mov	r0, #40	; 0x28
    dae4:	eb007102 	bl	29ef4 <operator new(unsigned int)>
    dae8:	e1a01006 	mov	r1, r6
    daec:	e1a05000 	mov	r5, r0
    daf0:	eb0012ff 	bl	126f4 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
    daf4:	eaffff24 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    daf8:	e59f10a8 	ldr	r1, [pc, #168]	; dba8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x45c>
    dafc:	e1a00004 	mov	r0, r4
    db00:	eb006420 	bl	26b88 <CString::Compare(char const*) const>
    db04:	e3500000 	cmp	r0, #0
    db08:	0afffff4 	beq	dae0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x394>
    db0c:	e59f1098 	ldr	r1, [pc, #152]	; dbac <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x460>
    db10:	e1a00004 	mov	r0, r4
    db14:	eb00641b 	bl	26b88 <CString::Compare(char const*) const>
    db18:	e3500000 	cmp	r0, #0
    db1c:	13a05000 	movne	r5, #0
    db20:	1affff23 	bne	d7b4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
    db24:	e3a00024 	mov	r0, #36	; 0x24
    db28:	eb0070f1 	bl	29ef4 <operator new(unsigned int)>
    db2c:	e1a01006 	mov	r1, r6
    db30:	e1a05000 	mov	r5, r0
    db34:	eb00222c 	bl	163ec <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    db38:	eaffff13 	b	d78c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    db3c:	00035544 	.word	0x00035544
    db40:	00035670 	.word	0x00035670
    db44:	00035550 	.word	0x00035550
    db48:	0003561c 	.word	0x0003561c
    db4c:	0003555c 	.word	0x0003555c
    db50:	00035568 	.word	0x00035568
    db54:	0003551c 	.word	0x0003551c
    db58:	00035534 	.word	0x00035534
    db5c:	00035220 	.word	0x00035220
    db60:	00035574 	.word	0x00035574
    db64:	00035580 	.word	0x00035580
    db68:	0003558c 	.word	0x0003558c
    db6c:	00035598 	.word	0x00035598
    db70:	00035628 	.word	0x00035628
    db74:	000355a4 	.word	0x000355a4
    db78:	00035634 	.word	0x00035634
    db7c:	000355b0 	.word	0x000355b0
    db80:	000355bc 	.word	0x000355bc
    db84:	000355c8 	.word	0x000355c8
    db88:	00035640 	.word	0x00035640
    db8c:	000355d4 	.word	0x000355d4
    db90:	000355e0 	.word	0x000355e0
    db94:	0003564c 	.word	0x0003564c
    db98:	000355ec 	.word	0x000355ec
    db9c:	000355f8 	.word	0x000355f8
    dba0:	00035604 	.word	0x00035604
    dba4:	00035658 	.word	0x00035658
    dba8:	00035610 	.word	0x00035610
    dbac:	00035664 	.word	0x00035664

0000dbb0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    dbb0:	e3a02000 	mov	r2, #0
    dbb4:	e92d4010 	push	{r4, lr}
    dbb8:	e3a0c001 	mov	ip, #1
    dbbc:	e3a0e008 	mov	lr, #8
    dbc0:	e1510002 	cmp	r1, r2
    dbc4:	e5801000 	str	r1, [r0]
    dbc8:	e580e008 	str	lr, [r0, #8]
    dbcc:	e580c00c 	str	ip, [r0, #12]
    dbd0:	e5c02004 	strb	r2, [r0, #4]
    dbd4:	e5c02005 	strb	r2, [r0, #5]
    dbd8:	e5c02006 	strb	r2, [r0, #6]
    dbdc:	e5c02010 	strb	r2, [r0, #16]
    dbe0:	18bd8010 	popne	{r4, pc}
    dbe4:	e3a02023 	mov	r2, #35	; 0x23
    dbe8:	e59f1004 	ldr	r1, [pc, #4]	; dbf4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x44>
    dbec:	e59f0004 	ldr	r0, [pc, #4]	; dbf8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x48>
    dbf0:	eb0056a2 	bl	23680 <assertion_failed>
    dbf4:	0003568c 	.word	0x0003568c
    dbf8:	0003503c 	.word	0x0003503c

0000dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    dbfc:	e92d4070 	push	{r4, r5, r6, lr}
    dc00:	e3a05001 	mov	r5, #1
    dc04:	e3510000 	cmp	r1, #0
    dc08:	e5801000 	str	r1, [r0]
    dc0c:	e580500c 	str	r5, [r0, #12]
    dc10:	e5c05010 	strb	r5, [r0, #16]
    dc14:	0a000041 	beq	dd20 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x124>
    dc18:	e3520000 	cmp	r2, #0
    dc1c:	0a000043 	beq	dd30 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x134>
    dc20:	e5d23000 	ldrb	r3, [r2]
    dc24:	e3530006 	cmp	r3, #6
    dc28:	9a000044 	bls	dd40 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x144>
    dc2c:	e5d23001 	ldrb	r3, [r2, #1]
    dc30:	e3530005 	cmp	r3, #5
    dc34:	1a000045 	bne	dd50 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x154>
    dc38:	e5d23003 	ldrb	r3, [r2, #3]
    dc3c:	e1a04000 	mov	r4, r0
    dc40:	e2033003 	and	r3, r3, #3
    dc44:	e3530002 	cmp	r3, #2
    dc48:	0a000022 	beq	dcd8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xdc>
    dc4c:	e3530003 	cmp	r3, #3
    dc50:	1a00002e 	bne	dd10 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x114>
    dc54:	e3a03002 	mov	r3, #2
    dc58:	e5c03005 	strb	r3, [r0, #5]
    dc5c:	e5d23002 	ldrb	r3, [r2, #2]
    dc60:	e203000f 	and	r0, r3, #15
    dc64:	e1a033a3 	lsr	r3, r3, #7
    dc68:	e5c40004 	strb	r0, [r4, #4]
    dc6c:	e5c43006 	strb	r3, [r4, #6]
    dc70:	e5d23004 	ldrb	r3, [r2, #4]
    dc74:	e5d20005 	ldrb	r0, [r2, #5]
    dc78:	e1833400 	orr	r3, r3, r0, lsl #8
    dc7c:	e1a03a83 	lsl	r3, r3, #21
    dc80:	e1a03aa3 	lsr	r3, r3, #21
    dc84:	e5843008 	str	r3, [r4, #8]
    dc88:	e5d26006 	ldrb	r6, [r2, #6]
    dc8c:	e3560000 	cmp	r6, #0
    dc90:	0a000032 	beq	dd60 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x164>
    dc94:	e1a00001 	mov	r0, r1
    dc98:	ebfffc10 	bl	cce0 <CUSBDevice::GetSpeed() const>
    dc9c:	e3500001 	cmp	r0, #1
    dca0:	da000037 	ble	dd84 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x188>
    dca4:	e3560010 	cmp	r6, #16
    dca8:	c3a03a01 	movgt	r3, #4096	; 0x1000
    dcac:	c584300c 	strgt	r3, [r4, #12]
    dcb0:	ca000014 	bgt	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x10c>
    dcb4:	e2466001 	sub	r6, r6, #1
    dcb8:	e1a05615 	lsl	r5, r5, r6
    dcbc:	e1a061a5 	lsr	r6, r5, #3
    dcc0:	e3560000 	cmp	r6, #0
    dcc4:	e584600c 	str	r6, [r4, #12]
    dcc8:	0a000028 	beq	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x174>
    dccc:	e3560013 	cmp	r6, #19
    dcd0:	9a000026 	bls	dd70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x174>
    dcd4:	ea00000b 	b	dd08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x10c>
    dcd8:	e5c05005 	strb	r5, [r0, #5]
    dcdc:	e5d23002 	ldrb	r3, [r2, #2]
    dce0:	e203100f 	and	r1, r3, #15
    dce4:	e1a033a3 	lsr	r3, r3, #7
    dce8:	e5c01004 	strb	r1, [r0, #4]
    dcec:	e5c03006 	strb	r3, [r0, #6]
    dcf0:	e5d23004 	ldrb	r3, [r2, #4]
    dcf4:	e5d22005 	ldrb	r2, [r2, #5]
    dcf8:	e1833402 	orr	r3, r3, r2, lsl #8
    dcfc:	e1a03a83 	lsl	r3, r3, #21
    dd00:	e1a03aa3 	lsr	r3, r3, #21
    dd04:	e5803008 	str	r3, [r0, #8]
    dd08:	e1a00004 	mov	r0, r4
    dd0c:	e8bd8070 	pop	{r4, r5, r6, pc}
    dd10:	e3a02043 	mov	r2, #67	; 0x43
    dd14:	e59f1070 	ldr	r1, [pc, #112]	; dd8c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    dd18:	e59f0070 	ldr	r0, [pc, #112]	; dd90 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x194>
    dd1c:	eb005657 	bl	23680 <assertion_failed>
    dd20:	e3a02032 	mov	r2, #50	; 0x32
    dd24:	e59f1060 	ldr	r1, [pc, #96]	; dd8c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    dd28:	e59f0064 	ldr	r0, [pc, #100]	; dd94 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x198>
    dd2c:	eb005653 	bl	23680 <assertion_failed>
    dd30:	e3a02034 	mov	r2, #52	; 0x34
    dd34:	e59f1050 	ldr	r1, [pc, #80]	; dd8c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    dd38:	e59f0058 	ldr	r0, [pc, #88]	; dd98 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x19c>
    dd3c:	eb00564f 	bl	23680 <assertion_failed>
    dd40:	e3a02035 	mov	r2, #53	; 0x35
    dd44:	e59f1040 	ldr	r1, [pc, #64]	; dd8c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    dd48:	e59f004c 	ldr	r0, [pc, #76]	; dd9c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a0>
    dd4c:	eb00564b 	bl	23680 <assertion_failed>
    dd50:	e3a02036 	mov	r2, #54	; 0x36
    dd54:	e59f1030 	ldr	r1, [pc, #48]	; dd8c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    dd58:	e59f0040 	ldr	r0, [pc, #64]	; dda0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    dd5c:	eb005647 	bl	23680 <assertion_failed>
    dd60:	e1a00001 	mov	r0, r1
    dd64:	ebfffbdd 	bl	cce0 <CUSBDevice::GetSpeed() const>
    dd68:	e3500001 	cmp	r0, #1
    dd6c:	da000003 	ble	dd80 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x184>
    dd70:	e3a03014 	mov	r3, #20
    dd74:	e1a00004 	mov	r0, r4
    dd78:	e584300c 	str	r3, [r4, #12]
    dd7c:	e8bd8070 	pop	{r4, r5, r6, pc}
    dd80:	e1a06005 	mov	r6, r5
    dd84:	e584600c 	str	r6, [r4, #12]
    dd88:	eaffffcf 	b	dccc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd0>
    dd8c:	0003568c 	.word	0x0003568c
    dd90:	00035260 	.word	0x00035260
    dd94:	0003503c 	.word	0x0003503c
    dd98:	0003569c 	.word	0x0003569c
    dd9c:	000356a8 	.word	0x000356a8
    dda0:	000356c8 	.word	0x000356c8

0000dda4 <CUSBEndpoint::~CUSBEndpoint()>:
    dda4:	e12fff1e 	bx	lr

0000dda8 <CUSBEndpoint::GetDevice() const>:
    dda8:	e5900000 	ldr	r0, [r0]
    ddac:	e3500000 	cmp	r0, #0
    ddb0:	0a000000 	beq	ddb8 <CUSBEndpoint::GetDevice() const+0x10>
    ddb4:	e12fff1e 	bx	lr
    ddb8:	e92d4010 	push	{r4, lr}
    ddbc:	e3a02086 	mov	r2, #134	; 0x86
    ddc0:	e59f1004 	ldr	r1, [pc, #4]	; ddcc <CUSBEndpoint::GetDevice() const+0x24>
    ddc4:	e59f0004 	ldr	r0, [pc, #4]	; ddd0 <CUSBEndpoint::GetDevice() const+0x28>
    ddc8:	eb00562c 	bl	23680 <assertion_failed>
    ddcc:	0003568c 	.word	0x0003568c
    ddd0:	0003503c 	.word	0x0003503c

0000ddd4 <CUSBEndpoint::GetNumber() const>:
    ddd4:	e5d00004 	ldrb	r0, [r0, #4]
    ddd8:	e12fff1e 	bx	lr

0000dddc <CUSBEndpoint::GetType() const>:
    dddc:	e5d00005 	ldrb	r0, [r0, #5]
    dde0:	e12fff1e 	bx	lr

0000dde4 <CUSBEndpoint::IsDirectionIn() const>:
    dde4:	e5d00006 	ldrb	r0, [r0, #6]
    dde8:	e12fff1e 	bx	lr

0000ddec <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
    ddec:	e5801008 	str	r1, [r0, #8]
    ddf0:	e3a00001 	mov	r0, #1
    ddf4:	e12fff1e 	bx	lr

0000ddf8 <CUSBEndpoint::GetMaxPacketSize() const>:
    ddf8:	e5900008 	ldr	r0, [r0, #8]
    ddfc:	e12fff1e 	bx	lr

0000de00 <CUSBEndpoint::GetInterval() const>:
    de00:	e5d03005 	ldrb	r3, [r0, #5]
    de04:	e3530002 	cmp	r3, #2
    de08:	1a000001 	bne	de14 <CUSBEndpoint::GetInterval() const+0x14>
    de0c:	e590000c 	ldr	r0, [r0, #12]
    de10:	e12fff1e 	bx	lr
    de14:	e92d4010 	push	{r4, lr}
    de18:	e3a020ae 	mov	r2, #174	; 0xae
    de1c:	e59f1004 	ldr	r1, [pc, #4]	; de28 <CUSBEndpoint::GetInterval() const+0x28>
    de20:	e59f0004 	ldr	r0, [pc, #4]	; de2c <CUSBEndpoint::GetInterval() const+0x2c>
    de24:	eb005615 	bl	23680 <assertion_failed>
    de28:	0003568c 	.word	0x0003568c
    de2c:	000356f8 	.word	0x000356f8

0000de30 <CUSBEndpoint::GetNextPID(bool)>:
    de30:	e3510000 	cmp	r1, #0
    de34:	0a000004 	beq	de4c <CUSBEndpoint::GetNextPID(bool)+0x1c>
    de38:	e5d03005 	ldrb	r3, [r0, #5]
    de3c:	e3530000 	cmp	r3, #0
    de40:	03a00002 	moveq	r0, #2
    de44:	1a000002 	bne	de54 <CUSBEndpoint::GetNextPID(bool)+0x24>
    de48:	e12fff1e 	bx	lr
    de4c:	e5d00010 	ldrb	r0, [r0, #16]
    de50:	e12fff1e 	bx	lr
    de54:	e92d4010 	push	{r4, lr}
    de58:	e3a020b7 	mov	r2, #183	; 0xb7
    de5c:	e59f1004 	ldr	r1, [pc, #4]	; de68 <CUSBEndpoint::GetNextPID(bool)+0x38>
    de60:	e59f0004 	ldr	r0, [pc, #4]	; de6c <CUSBEndpoint::GetNextPID(bool)+0x3c>
    de64:	eb005605 	bl	23680 <assertion_failed>
    de68:	0003568c 	.word	0x0003568c
    de6c:	00035718 	.word	0x00035718

0000de70 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
    de70:	e5d03005 	ldrb	r3, [r0, #5]
    de74:	e92d4010 	push	{r4, lr}
    de78:	e3530002 	cmp	r3, #2
    de7c:	8a000018 	bhi	dee4 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x74>
    de80:	e3520000 	cmp	r2, #0
    de84:	1a000009 	bne	deb0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x40>
    de88:	e5d03010 	ldrb	r3, [r0, #16]
    de8c:	e3530001 	cmp	r3, #1
    de90:	0a00000e 	beq	ded0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x60>
    de94:	3a00000f 	bcc	ded8 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x68>
    de98:	e3530002 	cmp	r3, #2
    de9c:	1a000007 	bne	dec0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x50>
    dea0:	e3110001 	tst	r1, #1
    dea4:	13a03001 	movne	r3, #1
    dea8:	15c03010 	strbne	r3, [r0, #16]
    deac:	e8bd8010 	pop	{r4, pc}
    deb0:	e3530000 	cmp	r3, #0
    deb4:	1a00000e 	bne	def4 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x84>
    deb8:	e5c03010 	strb	r3, [r0, #16]
    debc:	e8bd8010 	pop	{r4, pc}
    dec0:	e3a020dc 	mov	r2, #220	; 0xdc
    dec4:	e59f1038 	ldr	r1, [pc, #56]	; df04 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x94>
    dec8:	e59f0038 	ldr	r0, [pc, #56]	; df08 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
    decc:	eb0055eb 	bl	23680 <assertion_failed>
    ded0:	e3110001 	tst	r1, #1
    ded4:	08bd8010 	popeq	{r4, pc}
    ded8:	e3a03002 	mov	r3, #2
    dedc:	e5c03010 	strb	r3, [r0, #16]
    dee0:	e8bd8010 	pop	{r4, pc}
    dee4:	e3a020c3 	mov	r2, #195	; 0xc3
    dee8:	e59f1014 	ldr	r1, [pc, #20]	; df04 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x94>
    deec:	e59f0018 	ldr	r0, [pc, #24]	; df0c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x9c>
    def0:	eb0055e2 	bl	23680 <assertion_failed>
    def4:	e3a020e2 	mov	r2, #226	; 0xe2
    def8:	e59f1004 	ldr	r1, [pc, #4]	; df04 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x94>
    defc:	e59f000c 	ldr	r0, [pc, #12]	; df10 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa0>
    df00:	eb0055de 	bl	23680 <assertion_failed>
    df04:	0003568c 	.word	0x0003568c
    df08:	00035260 	.word	0x00035260
    df0c:	00035738 	.word	0x00035738
    df10:	00035718 	.word	0x00035718

0000df14 <CUSBEndpoint::ResetPID()>:
    df14:	e5d03005 	ldrb	r3, [r0, #5]
    df18:	e3530001 	cmp	r3, #1
    df1c:	1a000001 	bne	df28 <CUSBEndpoint::ResetPID()+0x14>
    df20:	e5c03010 	strb	r3, [r0, #16]
    df24:	e12fff1e 	bx	lr
    df28:	e92d4010 	push	{r4, lr}
    df2c:	e3a020ed 	mov	r2, #237	; 0xed
    df30:	e59f1004 	ldr	r1, [pc, #4]	; df3c <CUSBEndpoint::ResetPID()+0x28>
    df34:	e59f0004 	ldr	r0, [pc, #4]	; df40 <CUSBEndpoint::ResetPID()+0x2c>
    df38:	eb0055d0 	bl	23680 <assertion_failed>
    df3c:	0003568c 	.word	0x0003568c
    df40:	00035798 	.word	0x00035798

0000df44 <CUSBFunction::Initialize()>:
    df44:	e3a00001 	mov	r0, #1
    df48:	e12fff1e 	bx	lr

0000df4c <CUSBFunction::ReScanDevices()>:
    df4c:	e3a00000 	mov	r0, #0
    df50:	e12fff1e 	bx	lr

0000df54 <CUSBFunction::~CUSBFunction()>:
    df54:	e3a03000 	mov	r3, #0
    df58:	e92d4070 	push	{r4, r5, r6, lr}
    df5c:	e5905008 	ldr	r5, [r0, #8]
    df60:	e59f2040 	ldr	r2, [pc, #64]	; dfa8 <CUSBFunction::~CUSBFunction()+0x54>
    df64:	e1550003 	cmp	r5, r3
    df68:	e1a04000 	mov	r4, r0
    df6c:	e5802000 	str	r2, [r0]
    df70:	e580300c 	str	r3, [r0, #12]
    df74:	0a000004 	beq	df8c <CUSBFunction::~CUSBFunction()+0x38>
    df78:	e1a00005 	mov	r0, r5
    df7c:	eb002265 	bl	16918 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    df80:	e1a00005 	mov	r0, r5
    df84:	e3a0101c 	mov	r1, #28
    df88:	eb006fe7 	bl	29f2c <operator delete(void*, unsigned int)>
    df8c:	e3a03000 	mov	r3, #0
    df90:	e1a00004 	mov	r0, r4
    df94:	e5843008 	str	r3, [r4, #8]
    df98:	e5843004 	str	r3, [r4, #4]
    df9c:	eb00579a 	bl	23e0c <CDevice::~CDevice()>
    dfa0:	e1a00004 	mov	r0, r4
    dfa4:	e8bd8070 	pop	{r4, r5, r6, pc}
    dfa8:	000357bc 	.word	0x000357bc

0000dfac <CUSBFunction::~CUSBFunction()>:
    dfac:	e92d4010 	push	{r4, lr}
    dfb0:	e1a04000 	mov	r4, r0
    dfb4:	ebffffe6 	bl	df54 <CUSBFunction::~CUSBFunction()>
    dfb8:	e1a00004 	mov	r0, r4
    dfbc:	e3a01010 	mov	r1, #16
    dfc0:	eb006fd9 	bl	29f2c <operator delete(void*, unsigned int)>
    dfc4:	e1a00004 	mov	r0, r4
    dfc8:	e8bd8010 	pop	{r4, pc}

0000dfcc <CUSBFunction::RemoveDevice()>:
    dfcc:	e5900004 	ldr	r0, [r0, #4]
    dfd0:	e3500000 	cmp	r0, #0
    dfd4:	0a000000 	beq	dfdc <CUSBFunction::RemoveDevice()+0x10>
    dfd8:	eafffa9e 	b	ca58 <CUSBDevice::RemoveDevice()>
    dfdc:	e92d4010 	push	{r4, lr}
    dfe0:	e3a02066 	mov	r2, #102	; 0x66
    dfe4:	e59f1004 	ldr	r1, [pc, #4]	; dff0 <CUSBFunction::RemoveDevice()+0x24>
    dfe8:	e59f0004 	ldr	r0, [pc, #4]	; dff4 <CUSBFunction::RemoveDevice()+0x28>
    dfec:	eb0055a3 	bl	23680 <assertion_failed>
    dff0:	000357e8 	.word	0x000357e8
    dff4:	0003503c 	.word	0x0003503c

0000dff8 <CUSBFunction::Configure()>:
    dff8:	e92d4070 	push	{r4, r5, r6, lr}
    dffc:	e590300c 	ldr	r3, [r0, #12]
    e000:	e24dd010 	sub	sp, sp, #16
    e004:	e3530000 	cmp	r3, #0
    e008:	0a000029 	beq	e0b4 <CUSBFunction::Configure()+0xbc>
    e00c:	e5d33003 	ldrb	r3, [r3, #3]
    e010:	e3530000 	cmp	r3, #0
    e014:	0a000018 	beq	e07c <CUSBFunction::Configure()+0x84>
    e018:	e1a04000 	mov	r4, r0
    e01c:	e5900004 	ldr	r0, [r0, #4]
    e020:	e3500000 	cmp	r0, #0
    e024:	0a00001e 	beq	e0a4 <CUSBFunction::Configure()+0xac>
    e028:	ebfffb41 	bl	cd34 <CUSBDevice::GetHost() const>
    e02c:	e1a06000 	mov	r6, r0
    e030:	e5940004 	ldr	r0, [r4, #4]
    e034:	e3500000 	cmp	r0, #0
    e038:	0a000021 	beq	e0c4 <CUSBFunction::Configure()+0xcc>
    e03c:	e3a05000 	mov	r5, #0
    e040:	ebfffb30 	bl	cd08 <CUSBDevice::GetEndpoint0() const>
    e044:	e594300c 	ldr	r3, [r4, #12]
    e048:	e58d500c 	str	r5, [sp, #12]
    e04c:	e58d5008 	str	r5, [sp, #8]
    e050:	e5d32002 	ldrb	r2, [r3, #2]
    e054:	e1a01000 	mov	r1, r0
    e058:	e58d2004 	str	r2, [sp, #4]
    e05c:	e5d33003 	ldrb	r3, [r3, #3]
    e060:	e1a00006 	mov	r0, r6
    e064:	e58d3000 	str	r3, [sp]
    e068:	e3a02001 	mov	r2, #1
    e06c:	e3a0300b 	mov	r3, #11
    e070:	eb000c8c 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e074:	e1500005 	cmp	r0, r5
    e078:	ba000002 	blt	e088 <CUSBFunction::Configure()+0x90>
    e07c:	e3a00001 	mov	r0, #1
    e080:	e28dd010 	add	sp, sp, #16
    e084:	e8bd8070 	pop	{r4, r5, r6, pc}
    e088:	eb005e6f 	bl	25a4c <CLogger::Get()>
    e08c:	e59f3040 	ldr	r3, [pc, #64]	; e0d4 <CUSBFunction::Configure()+0xdc>
    e090:	e3a02001 	mov	r2, #1
    e094:	e59f103c 	ldr	r1, [pc, #60]	; e0d8 <CUSBFunction::Configure()+0xe0>
    e098:	eb005da8 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e09c:	e1a00005 	mov	r0, r5
    e0a0:	eafffff6 	b	e080 <CUSBFunction::Configure()+0x88>
    e0a4:	e3a02090 	mov	r2, #144	; 0x90
    e0a8:	e59f102c 	ldr	r1, [pc, #44]	; e0dc <CUSBFunction::Configure()+0xe4>
    e0ac:	e59f002c 	ldr	r0, [pc, #44]	; e0e0 <CUSBFunction::Configure()+0xe8>
    e0b0:	eb005572 	bl	23680 <assertion_failed>
    e0b4:	e3a0204e 	mov	r2, #78	; 0x4e
    e0b8:	e59f101c 	ldr	r1, [pc, #28]	; e0dc <CUSBFunction::Configure()+0xe4>
    e0bc:	e59f0020 	ldr	r0, [pc, #32]	; e0e4 <CUSBFunction::Configure()+0xec>
    e0c0:	eb00556e 	bl	23680 <assertion_failed>
    e0c4:	e3a0208a 	mov	r2, #138	; 0x8a
    e0c8:	e59f100c 	ldr	r1, [pc, #12]	; e0dc <CUSBFunction::Configure()+0xe4>
    e0cc:	e59f000c 	ldr	r0, [pc, #12]	; e0e0 <CUSBFunction::Configure()+0xe8>
    e0d0:	eb00556a 	bl	23680 <assertion_failed>
    e0d4:	00035810 	.word	0x00035810
    e0d8:	000357e0 	.word	0x000357e0
    e0dc:	000357e8 	.word	0x000357e8
    e0e0:	0003503c 	.word	0x0003503c
    e0e4:	000357f8 	.word	0x000357f8

0000e0e8 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
    e0e8:	e92d4070 	push	{r4, r5, r6, lr}
    e0ec:	e1a04000 	mov	r4, r0
    e0f0:	e1a05001 	mov	r5, r1
    e0f4:	e1a06002 	mov	r6, r2
    e0f8:	eb005751 	bl	23e44 <CDevice::CDevice()>
    e0fc:	e3a03000 	mov	r3, #0
    e100:	e59f207c 	ldr	r2, [pc, #124]	; e184 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x9c>
    e104:	e1550003 	cmp	r5, r3
    e108:	e8840024 	stm	r4, {r2, r5}
    e10c:	e5843008 	str	r3, [r4, #8]
    e110:	e584300c 	str	r3, [r4, #12]
    e114:	0a00000e 	beq	e154 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x6c>
    e118:	e3560000 	cmp	r6, #0
    e11c:	0a000010 	beq	e164 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x7c>
    e120:	e3a0001c 	mov	r0, #28
    e124:	eb006f72 	bl	29ef4 <operator new(unsigned int)>
    e128:	e1a05000 	mov	r5, r0
    e12c:	e1a01006 	mov	r1, r6
    e130:	eb0021e1 	bl	168bc <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    e134:	e5845008 	str	r5, [r4, #8]
    e138:	e1a00005 	mov	r0, r5
    e13c:	eb002234 	bl	16a14 <CUSBConfigurationParser::GetCurrentDescriptor()>
    e140:	e3500000 	cmp	r0, #0
    e144:	e584000c 	str	r0, [r4, #12]
    e148:	0a000009 	beq	e174 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x8c>
    e14c:	e1a00004 	mov	r0, r4
    e150:	e8bd8070 	pop	{r4, r5, r6, pc}
    e154:	e3a02022 	mov	r2, #34	; 0x22
    e158:	e59f1028 	ldr	r1, [pc, #40]	; e188 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    e15c:	e59f0028 	ldr	r0, [pc, #40]	; e18c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa4>
    e160:	eb005546 	bl	23680 <assertion_failed>
    e164:	e3a02024 	mov	r2, #36	; 0x24
    e168:	e59f1018 	ldr	r1, [pc, #24]	; e188 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    e16c:	e59f001c 	ldr	r0, [pc, #28]	; e190 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa8>
    e170:	eb005542 	bl	23680 <assertion_failed>
    e174:	e3a02029 	mov	r2, #41	; 0x29
    e178:	e59f1008 	ldr	r1, [pc, #8]	; e188 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    e17c:	e59f0010 	ldr	r0, [pc, #16]	; e194 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xac>
    e180:	eb00553e 	bl	23680 <assertion_failed>
    e184:	000357bc 	.word	0x000357bc
    e188:	000357e8 	.word	0x000357e8
    e18c:	0003503c 	.word	0x0003503c
    e190:	00035828 	.word	0x00035828
    e194:	000357f8 	.word	0x000357f8

0000e198 <CUSBFunction::CUSBFunction(CUSBFunction*)>:
    e198:	e92d4070 	push	{r4, r5, r6, lr}
    e19c:	e1a04000 	mov	r4, r0
    e1a0:	e1a05001 	mov	r5, r1
    e1a4:	eb005726 	bl	23e44 <CDevice::CDevice()>
    e1a8:	e3a03000 	mov	r3, #0
    e1ac:	e59f20a0 	ldr	r2, [pc, #160]	; e254 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xbc>
    e1b0:	e1550003 	cmp	r5, r3
    e1b4:	e884000c 	stm	r4, {r2, r3}
    e1b8:	e5843008 	str	r3, [r4, #8]
    e1bc:	e584300c 	str	r3, [r4, #12]
    e1c0:	0a000013 	beq	e214 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x7c>
    e1c4:	e5953004 	ldr	r3, [r5, #4]
    e1c8:	e3530000 	cmp	r3, #0
    e1cc:	e5843004 	str	r3, [r4, #4]
    e1d0:	0a000013 	beq	e224 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x8c>
    e1d4:	e5953008 	ldr	r3, [r5, #8]
    e1d8:	e3530000 	cmp	r3, #0
    e1dc:	0a000014 	beq	e234 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x9c>
    e1e0:	e3a0001c 	mov	r0, #28
    e1e4:	eb006f42 	bl	29ef4 <operator new(unsigned int)>
    e1e8:	e1a06000 	mov	r6, r0
    e1ec:	e5951008 	ldr	r1, [r5, #8]
    e1f0:	eb0021b1 	bl	168bc <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    e1f4:	e5846008 	str	r6, [r4, #8]
    e1f8:	e1a00006 	mov	r0, r6
    e1fc:	eb002204 	bl	16a14 <CUSBConfigurationParser::GetCurrentDescriptor()>
    e200:	e3500000 	cmp	r0, #0
    e204:	e584000c 	str	r0, [r4, #12]
    e208:	0a00000d 	beq	e244 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xac>
    e20c:	e1a00004 	mov	r0, r4
    e210:	e8bd8070 	pop	{r4, r5, r6, pc}
    e214:	e3a02031 	mov	r2, #49	; 0x31
    e218:	e59f1038 	ldr	r1, [pc, #56]	; e258 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    e21c:	e59f0038 	ldr	r0, [pc, #56]	; e25c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc4>
    e220:	eb005516 	bl	23680 <assertion_failed>
    e224:	e3a02033 	mov	r2, #51	; 0x33
    e228:	e59f1028 	ldr	r1, [pc, #40]	; e258 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    e22c:	e59f002c 	ldr	r0, [pc, #44]	; e260 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc8>
    e230:	eb005512 	bl	23680 <assertion_failed>
    e234:	e3a02035 	mov	r2, #53	; 0x35
    e238:	e59f1018 	ldr	r1, [pc, #24]	; e258 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    e23c:	e59f0020 	ldr	r0, [pc, #32]	; e264 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xcc>
    e240:	eb00550e 	bl	23680 <assertion_failed>
    e244:	e3a0203a 	mov	r2, #58	; 0x3a
    e248:	e59f1008 	ldr	r1, [pc, #8]	; e258 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    e24c:	e59f0014 	ldr	r0, [pc, #20]	; e268 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xd0>
    e250:	eb00550a 	bl	23680 <assertion_failed>
    e254:	000357bc 	.word	0x000357bc
    e258:	000357e8 	.word	0x000357e8
    e25c:	0003583c 	.word	0x0003583c
    e260:	0003503c 	.word	0x0003503c
    e264:	0003584c 	.word	0x0003584c
    e268:	000357f8 	.word	0x000357f8

0000e26c <CUSBFunction::GetInterfaceName() const>:
    e26c:	e92d4030 	push	{r4, r5, lr}
    e270:	e1a05000 	mov	r5, r0
    e274:	e24dd00c 	sub	sp, sp, #12
    e278:	e3a00010 	mov	r0, #16
    e27c:	eb006f1c 	bl	29ef4 <operator new(unsigned int)>
    e280:	e59f1048 	ldr	r1, [pc, #72]	; e2d0 <CUSBFunction::GetInterfaceName() const+0x64>
    e284:	e1a04000 	mov	r4, r0
    e288:	eb0061db 	bl	269fc <CString::CString(char const*)>
    e28c:	e595100c 	ldr	r1, [r5, #12]
    e290:	e3510000 	cmp	r1, #0
    e294:	0a00000a 	beq	e2c4 <CUSBFunction::GetInterfaceName() const+0x58>
    e298:	e5d12005 	ldrb	r2, [r1, #5]
    e29c:	e2423001 	sub	r3, r2, #1
    e2a0:	e6ef3073 	uxtb	r3, r3
    e2a4:	e35300fd 	cmp	r3, #253	; 0xfd
    e2a8:	8a000005 	bhi	e2c4 <CUSBFunction::GetInterfaceName() const+0x58>
    e2ac:	e5d13006 	ldrb	r3, [r1, #6]
    e2b0:	e5d11007 	ldrb	r1, [r1, #7]
    e2b4:	e1a00004 	mov	r0, r4
    e2b8:	e58d1000 	str	r1, [sp]
    e2bc:	e59f1010 	ldr	r1, [pc, #16]	; e2d4 <CUSBFunction::GetInterfaceName() const+0x68>
    e2c0:	eb00670a 	bl	27ef0 <CString::Format(char const*, ...)>
    e2c4:	e1a00004 	mov	r0, r4
    e2c8:	e28dd00c 	add	sp, sp, #12
    e2cc:	e8bd8030 	pop	{r4, r5, pc}
    e2d0:	00035218 	.word	0x00035218
    e2d4:	0003586c 	.word	0x0003586c

0000e2d8 <CUSBFunction::GetNumEndpoints() const>:
    e2d8:	e590300c 	ldr	r3, [r0, #12]
    e2dc:	e3530000 	cmp	r3, #0
    e2e0:	0a000001 	beq	e2ec <CUSBFunction::GetNumEndpoints() const+0x14>
    e2e4:	e5d30004 	ldrb	r0, [r3, #4]
    e2e8:	e12fff1e 	bx	lr
    e2ec:	e92d4010 	push	{r4, lr}
    e2f0:	e3a0207e 	mov	r2, #126	; 0x7e
    e2f4:	e59f1004 	ldr	r1, [pc, #4]	; e300 <CUSBFunction::GetNumEndpoints() const+0x28>
    e2f8:	e59f0004 	ldr	r0, [pc, #4]	; e304 <CUSBFunction::GetNumEndpoints() const+0x2c>
    e2fc:	eb0054df 	bl	23680 <assertion_failed>
    e300:	000357e8 	.word	0x000357e8
    e304:	000357f8 	.word	0x000357f8

0000e308 <CUSBFunction::GetDevice() const>:
    e308:	e5900004 	ldr	r0, [r0, #4]
    e30c:	e3500000 	cmp	r0, #0
    e310:	0a000000 	beq	e318 <CUSBFunction::GetDevice() const+0x10>
    e314:	e12fff1e 	bx	lr
    e318:	e92d4010 	push	{r4, lr}
    e31c:	e3a02084 	mov	r2, #132	; 0x84
    e320:	e59f1004 	ldr	r1, [pc, #4]	; e32c <CUSBFunction::GetDevice() const+0x24>
    e324:	e59f0004 	ldr	r0, [pc, #4]	; e330 <CUSBFunction::GetDevice() const+0x28>
    e328:	eb0054d4 	bl	23680 <assertion_failed>
    e32c:	000357e8 	.word	0x000357e8
    e330:	0003503c 	.word	0x0003503c

0000e334 <CUSBFunction::GetEndpoint0() const>:
    e334:	e5900004 	ldr	r0, [r0, #4]
    e338:	e3500000 	cmp	r0, #0
    e33c:	0a000000 	beq	e344 <CUSBFunction::GetEndpoint0() const+0x10>
    e340:	eafffa70 	b	cd08 <CUSBDevice::GetEndpoint0() const>
    e344:	e92d4010 	push	{r4, lr}
    e348:	e3a0208a 	mov	r2, #138	; 0x8a
    e34c:	e59f1004 	ldr	r1, [pc, #4]	; e358 <CUSBFunction::GetEndpoint0() const+0x24>
    e350:	e59f0004 	ldr	r0, [pc, #4]	; e35c <CUSBFunction::GetEndpoint0() const+0x28>
    e354:	eb0054c9 	bl	23680 <assertion_failed>
    e358:	000357e8 	.word	0x000357e8
    e35c:	0003503c 	.word	0x0003503c

0000e360 <CUSBFunction::GetHost() const>:
    e360:	e5900004 	ldr	r0, [r0, #4]
    e364:	e3500000 	cmp	r0, #0
    e368:	0a000000 	beq	e370 <CUSBFunction::GetHost() const+0x10>
    e36c:	eafffa70 	b	cd34 <CUSBDevice::GetHost() const>
    e370:	e92d4010 	push	{r4, lr}
    e374:	e3a02090 	mov	r2, #144	; 0x90
    e378:	e59f1004 	ldr	r1, [pc, #4]	; e384 <CUSBFunction::GetHost() const+0x24>
    e37c:	e59f0004 	ldr	r0, [pc, #4]	; e388 <CUSBFunction::GetHost() const+0x28>
    e380:	eb0054be 	bl	23680 <assertion_failed>
    e384:	000357e8 	.word	0x000357e8
    e388:	0003503c 	.word	0x0003503c

0000e38c <CUSBFunction::GetDescriptor(unsigned char)>:
    e38c:	e5900008 	ldr	r0, [r0, #8]
    e390:	e3500000 	cmp	r0, #0
    e394:	0a000000 	beq	e39c <CUSBFunction::GetDescriptor(unsigned char)+0x10>
    e398:	ea002161 	b	16924 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e39c:	e92d4010 	push	{r4, lr}
    e3a0:	e3a02096 	mov	r2, #150	; 0x96
    e3a4:	e59f1004 	ldr	r1, [pc, #4]	; e3b0 <CUSBFunction::GetDescriptor(unsigned char)+0x24>
    e3a8:	e59f0004 	ldr	r0, [pc, #4]	; e3b4 <CUSBFunction::GetDescriptor(unsigned char)+0x28>
    e3ac:	eb0054b3 	bl	23680 <assertion_failed>
    e3b0:	000357e8 	.word	0x000357e8
    e3b4:	00035278 	.word	0x00035278

0000e3b8 <CUSBFunction::ConfigurationError(char const*) const>:
    e3b8:	e5900008 	ldr	r0, [r0, #8]
    e3bc:	e92d4010 	push	{r4, lr}
    e3c0:	e3500000 	cmp	r0, #0
    e3c4:	0a000003 	beq	e3d8 <CUSBFunction::ConfigurationError(char const*) const+0x20>
    e3c8:	e3510000 	cmp	r1, #0
    e3cc:	0a000005 	beq	e3e8 <CUSBFunction::ConfigurationError(char const*) const+0x30>
    e3d0:	e8bd4010 	pop	{r4, lr}
    e3d4:	ea0021a0 	b	16a5c <CUSBConfigurationParser::Error(char const*) const>
    e3d8:	e3a0209c 	mov	r2, #156	; 0x9c
    e3dc:	e59f1014 	ldr	r1, [pc, #20]	; e3f8 <CUSBFunction::ConfigurationError(char const*) const+0x40>
    e3e0:	e59f0014 	ldr	r0, [pc, #20]	; e3fc <CUSBFunction::ConfigurationError(char const*) const+0x44>
    e3e4:	eb0054a5 	bl	23680 <assertion_failed>
    e3e8:	e3a0209d 	mov	r2, #157	; 0x9d
    e3ec:	e59f1004 	ldr	r1, [pc, #4]	; e3f8 <CUSBFunction::ConfigurationError(char const*) const+0x40>
    e3f0:	e59f0008 	ldr	r0, [pc, #8]	; e400 <CUSBFunction::ConfigurationError(char const*) const+0x48>
    e3f4:	eb0054a1 	bl	23680 <assertion_failed>
    e3f8:	000357e8 	.word	0x000357e8
    e3fc:	00035278 	.word	0x00035278
    e400:	00035878 	.word	0x00035878

0000e404 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
    e404:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e408:	e1a04000 	mov	r4, r0
    e40c:	e590000c 	ldr	r0, [r0, #12]
    e410:	e3500000 	cmp	r0, #0
    e414:	0a00001f 	beq	e498 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x94>
    e418:	e1a08003 	mov	r8, r3
    e41c:	e5943008 	ldr	r3, [r4, #8]
    e420:	e3530000 	cmp	r3, #0
    e424:	0a00001f 	beq	e4a8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xa4>
    e428:	e5943004 	ldr	r3, [r4, #4]
    e42c:	e3530000 	cmp	r3, #0
    e430:	11a06001 	movne	r6, r1
    e434:	11a07002 	movne	r7, r2
    e438:	13a05004 	movne	r5, #4
    e43c:	1a000009 	bne	e468 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x64>
    e440:	ea00001c 	b	e4b8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xb4>
    e444:	e1a01005 	mov	r1, r5
    e448:	e5940004 	ldr	r0, [r4, #4]
    e44c:	ebfffa5b 	bl	cdc0 <CUSBDevice::GetDescriptor(unsigned char)>
    e450:	e1a01005 	mov	r1, r5
    e454:	e5940008 	ldr	r0, [r4, #8]
    e458:	eb002131 	bl	16924 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e45c:	e3500000 	cmp	r0, #0
    e460:	e584000c 	str	r0, [r4, #12]
    e464:	0a00000a 	beq	e494 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x90>
    e468:	e5d03005 	ldrb	r3, [r0, #5]
    e46c:	e1530006 	cmp	r3, r6
    e470:	1afffff3 	bne	e444 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
    e474:	e5d03006 	ldrb	r3, [r0, #6]
    e478:	e1530007 	cmp	r3, r7
    e47c:	1afffff0 	bne	e444 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
    e480:	e5d03007 	ldrb	r3, [r0, #7]
    e484:	e1530008 	cmp	r3, r8
    e488:	1affffed 	bne	e444 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
    e48c:	e3a00001 	mov	r0, #1
    e490:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e494:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e498:	e3a020a3 	mov	r2, #163	; 0xa3
    e49c:	e59f1024 	ldr	r1, [pc, #36]	; e4c8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    e4a0:	e59f0024 	ldr	r0, [pc, #36]	; e4cc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc8>
    e4a4:	eb005475 	bl	23680 <assertion_failed>
    e4a8:	e3a020a4 	mov	r2, #164	; 0xa4
    e4ac:	e59f1014 	ldr	r1, [pc, #20]	; e4c8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    e4b0:	e59f0018 	ldr	r0, [pc, #24]	; e4d0 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xcc>
    e4b4:	eb005471 	bl	23680 <assertion_failed>
    e4b8:	e3a020a5 	mov	r2, #165	; 0xa5
    e4bc:	e59f1004 	ldr	r1, [pc, #4]	; e4c8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    e4c0:	e59f000c 	ldr	r0, [pc, #12]	; e4d4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd0>
    e4c4:	eb00546d 	bl	23680 <assertion_failed>
    e4c8:	000357e8 	.word	0x000357e8
    e4cc:	000357f8 	.word	0x000357f8
    e4d0:	00035278 	.word	0x00035278
    e4d4:	0003503c 	.word	0x0003503c

0000e4d8 <CUSBFunction::GetInterfaceNumber() const>:
    e4d8:	e590300c 	ldr	r3, [r0, #12]
    e4dc:	e3530000 	cmp	r3, #0
    e4e0:	0a000001 	beq	e4ec <CUSBFunction::GetInterfaceNumber() const+0x14>
    e4e4:	e5d30002 	ldrb	r0, [r3, #2]
    e4e8:	e12fff1e 	bx	lr
    e4ec:	e92d4010 	push	{r4, lr}
    e4f0:	e3a020bb 	mov	r2, #187	; 0xbb
    e4f4:	e59f1004 	ldr	r1, [pc, #4]	; e500 <CUSBFunction::GetInterfaceNumber() const+0x28>
    e4f8:	e59f0004 	ldr	r0, [pc, #4]	; e504 <CUSBFunction::GetInterfaceNumber() const+0x2c>
    e4fc:	eb00545f 	bl	23680 <assertion_failed>
    e500:	000357e8 	.word	0x000357e8
    e504:	000357f8 	.word	0x000357f8

0000e508 <CUSBFunction::GetInterfaceClass() const>:
    e508:	e590300c 	ldr	r3, [r0, #12]
    e50c:	e3530000 	cmp	r3, #0
    e510:	0a000001 	beq	e51c <CUSBFunction::GetInterfaceClass() const+0x14>
    e514:	e5d30005 	ldrb	r0, [r3, #5]
    e518:	e12fff1e 	bx	lr
    e51c:	e92d4010 	push	{r4, lr}
    e520:	e3a020c1 	mov	r2, #193	; 0xc1
    e524:	e59f1004 	ldr	r1, [pc, #4]	; e530 <CUSBFunction::GetInterfaceClass() const+0x28>
    e528:	e59f0004 	ldr	r0, [pc, #4]	; e534 <CUSBFunction::GetInterfaceClass() const+0x2c>
    e52c:	eb005453 	bl	23680 <assertion_failed>
    e530:	000357e8 	.word	0x000357e8
    e534:	000357f8 	.word	0x000357f8

0000e538 <CUSBFunction::GetInterfaceSubClass() const>:
    e538:	e590300c 	ldr	r3, [r0, #12]
    e53c:	e3530000 	cmp	r3, #0
    e540:	0a000001 	beq	e54c <CUSBFunction::GetInterfaceSubClass() const+0x14>
    e544:	e5d30006 	ldrb	r0, [r3, #6]
    e548:	e12fff1e 	bx	lr
    e54c:	e92d4010 	push	{r4, lr}
    e550:	e3a020c7 	mov	r2, #199	; 0xc7
    e554:	e59f1004 	ldr	r1, [pc, #4]	; e560 <CUSBFunction::GetInterfaceSubClass() const+0x28>
    e558:	e59f0004 	ldr	r0, [pc, #4]	; e564 <CUSBFunction::GetInterfaceSubClass() const+0x2c>
    e55c:	eb005447 	bl	23680 <assertion_failed>
    e560:	000357e8 	.word	0x000357e8
    e564:	000357f8 	.word	0x000357f8

0000e568 <CUSBFunction::GetInterfaceProtocol() const>:
    e568:	e590300c 	ldr	r3, [r0, #12]
    e56c:	e3530000 	cmp	r3, #0
    e570:	0a000001 	beq	e57c <CUSBFunction::GetInterfaceProtocol() const+0x14>
    e574:	e5d30007 	ldrb	r0, [r3, #7]
    e578:	e12fff1e 	bx	lr
    e57c:	e92d4010 	push	{r4, lr}
    e580:	e3a020cd 	mov	r2, #205	; 0xcd
    e584:	e59f1004 	ldr	r1, [pc, #4]	; e590 <CUSBFunction::GetInterfaceProtocol() const+0x28>
    e588:	e59f0004 	ldr	r0, [pc, #4]	; e594 <CUSBFunction::GetInterfaceProtocol() const+0x2c>
    e58c:	eb00543b 	bl	23680 <assertion_failed>
    e590:	000357e8 	.word	0x000357e8
    e594:	000357f8 	.word	0x000357f8

0000e598 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    e598:	e92d4010 	push	{r4, lr}
    e59c:	e1a04000 	mov	r4, r0
    e5a0:	e59f300c 	ldr	r3, [pc, #12]	; e5b4 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
    e5a4:	e5803000 	str	r3, [r0]
    e5a8:	eb000375 	bl	f384 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    e5ac:	e1a00004 	mov	r0, r4
    e5b0:	e8bd8010 	pop	{r4, pc}
    e5b4:	00035890 	.word	0x00035890

0000e5b8 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    e5b8:	e92d4010 	push	{r4, lr}
    e5bc:	e1a04000 	mov	r4, r0
    e5c0:	e59f3018 	ldr	r3, [pc, #24]	; e5e0 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
    e5c4:	e5803000 	str	r3, [r0]
    e5c8:	eb00036d 	bl	f384 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    e5cc:	e1a00004 	mov	r0, r4
    e5d0:	e3a01f5b 	mov	r1, #364	; 0x16c
    e5d4:	eb006e54 	bl	29f2c <operator delete(void*, unsigned int)>
    e5d8:	e1a00004 	mov	r0, r4
    e5dc:	e8bd8010 	pop	{r4, pc}
    e5e0:	00035890 	.word	0x00035890

0000e5e4 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
    e5e4:	e92d4070 	push	{r4, r5, r6, lr}
    e5e8:	e1a05001 	mov	r5, r1
    e5ec:	e24dd040 	sub	sp, sp, #64	; 0x40
    e5f0:	e2801f4f 	add	r1, r0, #316	; 0x13c
    e5f4:	e1a04000 	mov	r4, r0
    e5f8:	e3a02030 	mov	r2, #48	; 0x30
    e5fc:	e28d0010 	add	r0, sp, #16
    e600:	eb006c62 	bl	29790 <memcpy>
    e604:	e3550001 	cmp	r5, #1
    e608:	0a00002c 	beq	e6c0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xdc>
    e60c:	3a000025 	bcc	e6a8 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xc4>
    e610:	e3550002 	cmp	r5, #2
    e614:	1a00001f 	bne	e698 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xb4>
    e618:	e3e03001 	mvn	r3, #1
    e61c:	e3a01000 	mov	r1, #0
    e620:	e3e02000 	mvn	r2, #0
    e624:	e5cd3011 	strb	r3, [sp, #17]
    e628:	e5cd3013 	strb	r3, [sp, #19]
    e62c:	e5cd1012 	strb	r1, [sp, #18]
    e630:	e5cd2014 	strb	r2, [sp, #20]
    e634:	e1a00004 	mov	r0, r4
    e638:	ebffff48 	bl	e360 <CUSBFunction::GetHost() const>
    e63c:	e1a05000 	mov	r5, r0
    e640:	e1a00004 	mov	r0, r4
    e644:	ebffff3a 	bl	e334 <CUSBFunction::GetEndpoint0() const>
    e648:	e1a06000 	mov	r6, r0
    e64c:	e1a00004 	mov	r0, r4
    e650:	ebffffa0 	bl	e4d8 <CUSBFunction::GetInterfaceNumber() const>
    e654:	e3a02030 	mov	r2, #48	; 0x30
    e658:	e59f3080 	ldr	r3, [pc, #128]	; e6e0 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xfc>
    e65c:	e28dc010 	add	ip, sp, #16
    e660:	e6ff0070 	uxth	r0, r0
    e664:	e58d0004 	str	r0, [sp, #4]
    e668:	e58d200c 	str	r2, [sp, #12]
    e66c:	e58d3000 	str	r3, [sp]
    e670:	e1a01006 	mov	r1, r6
    e674:	e1a00005 	mov	r0, r5
    e678:	e58dc008 	str	ip, [sp, #8]
    e67c:	e3a03009 	mov	r3, #9
    e680:	e3a02021 	mov	r2, #33	; 0x21
    e684:	eb000b07 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e688:	e1e00000 	mvn	r0, r0
    e68c:	e1a00fa0 	lsr	r0, r0, #31
    e690:	e28dd040 	add	sp, sp, #64	; 0x40
    e694:	e8bd8070 	pop	{r4, r5, r6, pc}
    e698:	e59f2044 	ldr	r2, [pc, #68]	; e6e4 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x100>
    e69c:	e59f1044 	ldr	r1, [pc, #68]	; e6e8 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x104>
    e6a0:	e59f0044 	ldr	r0, [pc, #68]	; e6ec <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x108>
    e6a4:	eb0053f5 	bl	23680 <assertion_failed>
    e6a8:	e3a03000 	mov	r3, #0
    e6ac:	e5cd3011 	strb	r3, [sp, #17]
    e6b0:	e5cd3012 	strb	r3, [sp, #18]
    e6b4:	e5cd3013 	strb	r3, [sp, #19]
    e6b8:	e5cd3014 	strb	r3, [sp, #20]
    e6bc:	eaffffdc 	b	e634 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
    e6c0:	e3e03001 	mvn	r3, #1
    e6c4:	e3e01000 	mvn	r1, #0
    e6c8:	e3a02000 	mov	r2, #0
    e6cc:	e5cd3011 	strb	r3, [sp, #17]
    e6d0:	e5cd3013 	strb	r3, [sp, #19]
    e6d4:	e5cd1012 	strb	r1, [sp, #18]
    e6d8:	e5cd2014 	strb	r2, [sp, #20]
    e6dc:	eaffffd4 	b	e634 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
    e6e0:	00000201 	.word	0x00000201
    e6e4:	0000010e 	.word	0x0000010e
    e6e8:	0003594c 	.word	0x0003594c
    e6ec:	00035260 	.word	0x00035260

0000e6f0 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
    e6f0:	e351000a 	cmp	r1, #10
    e6f4:	9a000001 	bls	e700 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
    e6f8:	e3a00000 	mov	r0, #0
    e6fc:	e12fff1e 	bx	lr
    e700:	e59f3078 	ldr	r3, [pc, #120]	; e780 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x90>
    e704:	e92d4070 	push	{r4, r5, r6, lr}
    e708:	e0831001 	add	r1, r3, r1
    e70c:	e5d1304c 	ldrb	r3, [r1, #76]	; 0x4c
    e710:	e24dd010 	sub	sp, sp, #16
    e714:	e1a03083 	lsl	r3, r3, #1
    e718:	e5c03145 	strb	r3, [r0, #325]	; 0x145
    e71c:	e1a04000 	mov	r4, r0
    e720:	ebffff0e 	bl	e360 <CUSBFunction::GetHost() const>
    e724:	e1a05000 	mov	r5, r0
    e728:	e1a00004 	mov	r0, r4
    e72c:	ebffff00 	bl	e334 <CUSBFunction::GetEndpoint0() const>
    e730:	e1a06000 	mov	r6, r0
    e734:	e1a00004 	mov	r0, r4
    e738:	ebffff66 	bl	e4d8 <CUSBFunction::GetInterfaceNumber() const>
    e73c:	e3a02030 	mov	r2, #48	; 0x30
    e740:	e59f303c 	ldr	r3, [pc, #60]	; e784 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x94>
    e744:	e6ff0070 	uxth	r0, r0
    e748:	e2844f4f 	add	r4, r4, #316	; 0x13c
    e74c:	e58d0004 	str	r0, [sp, #4]
    e750:	e58d200c 	str	r2, [sp, #12]
    e754:	e58d3000 	str	r3, [sp]
    e758:	e1a01006 	mov	r1, r6
    e75c:	e1a00005 	mov	r0, r5
    e760:	e58d4008 	str	r4, [sp, #8]
    e764:	e3a03009 	mov	r3, #9
    e768:	e3a02021 	mov	r2, #33	; 0x21
    e76c:	eb000acd 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e770:	e1e00000 	mvn	r0, r0
    e774:	e1a00fa0 	lsr	r0, r0, #31
    e778:	e28dd010 	add	sp, sp, #16
    e77c:	e8bd8070 	pop	{r4, r5, r6, pc}
    e780:	00035888 	.word	0x00035888
    e784:	00000201 	.word	0x00000201

0000e788 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
    e788:	e92d4070 	push	{r4, r5, r6, lr}
    e78c:	e3a02000 	mov	r2, #0
    e790:	e1a04000 	mov	r4, r0
    e794:	eb000311 	bl	f3e0 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    e798:	e3a03000 	mov	r3, #0
    e79c:	e59f5030 	ldr	r5, [pc, #48]	; e7d4 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)+0x4c>
    e7a0:	e1a00004 	mov	r0, r4
    e7a4:	e2852008 	add	r2, r5, #8
    e7a8:	e5842000 	str	r2, [r4]
    e7ac:	e3a01003 	mov	r1, #3
    e7b0:	e1a02003 	mov	r2, r3
    e7b4:	ebffff12 	bl	e404 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
    e7b8:	e2851058 	add	r1, r5, #88	; 0x58
    e7bc:	e5c4013a 	strb	r0, [r4, #314]	; 0x13a
    e7c0:	e3a02030 	mov	r2, #48	; 0x30
    e7c4:	e2840f4f 	add	r0, r4, #316	; 0x13c
    e7c8:	eb006bf0 	bl	29790 <memcpy>
    e7cc:	e1a00004 	mov	r0, r4
    e7d0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e7d4:	00035888 	.word	0x00035888

0000e7d8 <CUSBGamePadPS3Device::PS3Enable()>:
    e7d8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    e7dc:	e3a02042 	mov	r2, #66	; 0x42
    e7e0:	e3a0300c 	mov	r3, #12
    e7e4:	e3a04000 	mov	r4, #0
    e7e8:	e24dd01c 	sub	sp, sp, #28
    e7ec:	e5cd2014 	strb	r2, [sp, #20]
    e7f0:	e5cd3015 	strb	r3, [sp, #21]
    e7f4:	e1a05000 	mov	r5, r0
    e7f8:	e5cd4016 	strb	r4, [sp, #22]
    e7fc:	e5cd4017 	strb	r4, [sp, #23]
    e800:	ebfffed6 	bl	e360 <CUSBFunction::GetHost() const>
    e804:	e1a06000 	mov	r6, r0
    e808:	e1a00005 	mov	r0, r5
    e80c:	ebfffec8 	bl	e334 <CUSBFunction::GetEndpoint0() const>
    e810:	e1a07000 	mov	r7, r0
    e814:	e1a00005 	mov	r0, r5
    e818:	ebffff2e 	bl	e4d8 <CUSBFunction::GetInterfaceNumber() const>
    e81c:	e3a0c004 	mov	ip, #4
    e820:	e3a02ffd 	mov	r2, #1012	; 0x3f4
    e824:	e6ff0070 	uxth	r0, r0
    e828:	e28d3014 	add	r3, sp, #20
    e82c:	e58d0004 	str	r0, [sp, #4]
    e830:	e58d2000 	str	r2, [sp]
    e834:	e58d3008 	str	r3, [sp, #8]
    e838:	e1a01007 	mov	r1, r7
    e83c:	e1a00006 	mov	r0, r6
    e840:	e58dc00c 	str	ip, [sp, #12]
    e844:	e3a03009 	mov	r3, #9
    e848:	e3a02021 	mov	r2, #33	; 0x21
    e84c:	eb000a95 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    e850:	e1500004 	cmp	r0, r4
    e854:	b1a00004 	movlt	r0, r4
    e858:	ba000004 	blt	e870 <CUSBGamePadPS3Device::PS3Enable()+0x98>
    e85c:	e5953000 	ldr	r3, [r5]
    e860:	e5d5112c 	ldrb	r1, [r5, #300]	; 0x12c
    e864:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    e868:	e1a00005 	mov	r0, r5
    e86c:	e12fff33 	blx	r3
    e870:	e28dd01c 	add	sp, sp, #28
    e874:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000e878 <CUSBGamePadPS3Device::Configure()>:
    e878:	e92d4030 	push	{r4, r5, lr}
    e87c:	e5d0513a 	ldrb	r5, [r0, #314]	; 0x13a
    e880:	e24dd00c 	sub	sp, sp, #12
    e884:	e3550000 	cmp	r5, #0
    e888:	0a00001e 	beq	e908 <CUSBGamePadPS3Device::Configure()+0x90>
    e88c:	e1a04000 	mov	r4, r0
    e890:	eb000449 	bl	f9bc <CUSBGamePadStandardDevice::Configure()>
    e894:	e2505000 	subs	r5, r0, #0
    e898:	0a00002a 	beq	e948 <CUSBGamePadPS3Device::Configure()+0xd0>
    e89c:	e2845f4a 	add	r5, r4, #296	; 0x128
    e8a0:	e1d530b0 	ldrh	r3, [r5]
    e8a4:	e2433031 	sub	r3, r3, #49	; 0x31
    e8a8:	e3530001 	cmp	r3, #1
    e8ac:	8a00001a 	bhi	e91c <CUSBGamePadPS3Device::Configure()+0xa4>
    e8b0:	e3a01010 	mov	r1, #16
    e8b4:	e3a0c013 	mov	ip, #19
    e8b8:	e1a03004 	mov	r3, r4
    e8bc:	e3a02000 	mov	r2, #0
    e8c0:	e3a000ff 	mov	r0, #255	; 0xff
    e8c4:	e5841024 	str	r1, [r4, #36]	; 0x24
    e8c8:	e584c104 	str	ip, [r4, #260]	; 0x104
    e8cc:	e28410c0 	add	r1, r4, #192	; 0xc0
    e8d0:	e583202c 	str	r2, [r3, #44]	; 0x2c
    e8d4:	e5830030 	str	r0, [r3, #48]	; 0x30
    e8d8:	e283300c 	add	r3, r3, #12
    e8dc:	e1530001 	cmp	r3, r1
    e8e0:	1afffffa 	bne	e8d0 <CUSBGamePadPS3Device::Configure()+0x58>
    e8e4:	e58420e8 	str	r2, [r4, #232]	; 0xe8
    e8e8:	e1a00004 	mov	r0, r4
    e8ec:	ebffffb9 	bl	e7d8 <CUSBGamePadPS3Device::PS3Enable()>
    e8f0:	e2505000 	subs	r5, r0, #0
    e8f4:	0a00001b 	beq	e968 <CUSBGamePadPS3Device::Configure()+0xf0>
    e8f8:	e1a00004 	mov	r0, r4
    e8fc:	e28dd00c 	add	sp, sp, #12
    e900:	e8bd4030 	pop	{r4, r5, lr}
    e904:	ea0009da 	b	11074 <CUSBHIDDevice::StartRequest()>
    e908:	e59f1078 	ldr	r1, [pc, #120]	; e988 <CUSBGamePadPS3Device::Configure()+0x110>
    e90c:	ebfffea9 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
    e910:	e1a00005 	mov	r0, r5
    e914:	e28dd00c 	add	sp, sp, #12
    e918:	e8bd8030 	pop	{r4, r5, pc}
    e91c:	eb005c4a 	bl	25a4c <CLogger::Get()>
    e920:	e1d520b0 	ldrh	r2, [r5]
    e924:	e3a05000 	mov	r5, #0
    e928:	e58d2000 	str	r2, [sp]
    e92c:	e59f3058 	ldr	r3, [pc, #88]	; e98c <CUSBGamePadPS3Device::Configure()+0x114>
    e930:	e3a02001 	mov	r2, #1
    e934:	e59f104c 	ldr	r1, [pc, #76]	; e988 <CUSBGamePadPS3Device::Configure()+0x110>
    e938:	eb005b80 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e93c:	e1a00005 	mov	r0, r5
    e940:	e28dd00c 	add	sp, sp, #12
    e944:	e8bd8030 	pop	{r4, r5, pc}
    e948:	eb005c3f 	bl	25a4c <CLogger::Get()>
    e94c:	e59f303c 	ldr	r3, [pc, #60]	; e990 <CUSBGamePadPS3Device::Configure()+0x118>
    e950:	e3a02001 	mov	r2, #1
    e954:	e59f102c 	ldr	r1, [pc, #44]	; e988 <CUSBGamePadPS3Device::Configure()+0x110>
    e958:	eb005b78 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e95c:	e1a00005 	mov	r0, r5
    e960:	e28dd00c 	add	sp, sp, #12
    e964:	e8bd8030 	pop	{r4, r5, pc}
    e968:	eb005c37 	bl	25a4c <CLogger::Get()>
    e96c:	e59f3020 	ldr	r3, [pc, #32]	; e994 <CUSBGamePadPS3Device::Configure()+0x11c>
    e970:	e3a02001 	mov	r2, #1
    e974:	e59f100c 	ldr	r1, [pc, #12]	; e988 <CUSBGamePadPS3Device::Configure()+0x110>
    e978:	eb005b70 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e97c:	e1a00005 	mov	r0, r5
    e980:	e28dd00c 	add	sp, sp, #12
    e984:	e8bd8030 	pop	{r4, r5, pc}
    e988:	00035910 	.word	0x00035910
    e98c:	00035980 	.word	0x00035980
    e990:	00035960 	.word	0x00035960
    e994:	0003599c 	.word	0x0003599c

0000e998 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
    e998:	e2803f4a 	add	r3, r0, #296	; 0x128
    e99c:	e1d330b0 	ldrh	r3, [r3]
    e9a0:	e92d4010 	push	{r4, lr}
    e9a4:	e3530031 	cmp	r3, #49	; 0x31
    e9a8:	e1a0c000 	mov	ip, r0
    e9ac:	e1a0e001 	mov	lr, r1
    e9b0:	0a000008 	beq	e9d8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x40>
    e9b4:	e3530032 	cmp	r3, #50	; 0x32
    e9b8:	0a000005 	beq	e9d4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x3c>
    e9bc:	e3530000 	cmp	r3, #0
    e9c0:	0a000040 	beq	eac8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x130>
    e9c4:	e3a02092 	mov	r2, #146	; 0x92
    e9c8:	e59f1110 	ldr	r1, [pc, #272]	; eae0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x148>
    e9cc:	e59f0110 	ldr	r0, [pc, #272]	; eae4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x14c>
    e9d0:	eb00532a 	bl	23680 <assertion_failed>
    e9d4:	e281e001 	add	lr, r1, #1
    e9d8:	e35e0000 	cmp	lr, #0
    e9dc:	0a00003b 	beq	ead0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x138>
    e9e0:	e5de0003 	ldrb	r0, [lr, #3]
    e9e4:	e5de2002 	ldrb	r2, [lr, #2]
    e9e8:	e5de1004 	ldrb	r1, [lr, #4]
    e9ec:	e1822400 	orr	r2, r2, r0, lsl #8
    e9f0:	e5de0005 	ldrb	r0, [lr, #5]
    e9f4:	e1822801 	orr	r2, r2, r1, lsl #16
    e9f8:	e59f10e8 	ldr	r1, [pc, #232]	; eae8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
    e9fc:	e1822c00 	orr	r2, r2, r0, lsl #24
    ea00:	e59f00e4 	ldr	r0, [pc, #228]	; eaec <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x154>
    ea04:	e1a04682 	lsl	r4, r2, #13
    ea08:	e00112a2 	and	r1, r1, r2, lsr #5
    ea0c:	e1811ea4 	orr	r1, r1, r4, lsr #29
    ea10:	e0002582 	and	r2, r0, r2, lsl #11
    ea14:	e1812002 	orr	r2, r1, r2
    ea18:	e58c2108 	str	r2, [ip, #264]	; 0x108
    ea1c:	e5de2006 	ldrb	r2, [lr, #6]
    ea20:	e3a03006 	mov	r3, #6
    ea24:	e58c2028 	str	r2, [ip, #40]	; 0x28
    ea28:	e5de1007 	ldrb	r1, [lr, #7]
    ea2c:	e59f00bc 	ldr	r0, [pc, #188]	; eaf0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x158>
    ea30:	e58c1034 	str	r1, [ip, #52]	; 0x34
    ea34:	e5de1008 	ldrb	r1, [lr, #8]
    ea38:	e28e200d 	add	r2, lr, #13
    ea3c:	e58c1040 	str	r1, [ip, #64]	; 0x40
    ea40:	e5de1009 	ldrb	r1, [lr, #9]
    ea44:	e28e4019 	add	r4, lr, #25
    ea48:	e58c104c 	str	r1, [ip, #76]	; 0x4c
    ea4c:	ea000000 	b	ea54 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xbc>
    ea50:	e5b03004 	ldr	r3, [r0, #4]!
    ea54:	e5f21001 	ldrb	r1, [r2, #1]!
    ea58:	e0833083 	add	r3, r3, r3, lsl #1
    ea5c:	e08c3103 	add	r3, ip, r3, lsl #2
    ea60:	e1520004 	cmp	r2, r4
    ea64:	e5831028 	str	r1, [r3, #40]	; 0x28
    ea68:	1afffff8 	bne	ea50 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb8>
    ea6c:	e3a01000 	mov	r1, #0
    ea70:	e59f407c 	ldr	r4, [pc, #124]	; eaf4 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x15c>
    ea74:	e28c0f43 	add	r0, ip, #268	; 0x10c
    ea78:	e2812014 	add	r2, r1, #20
    ea7c:	e08e2082 	add	r2, lr, r2, lsl #1
    ea80:	e5d23001 	ldrb	r3, [r2, #1]
    ea84:	e5d22002 	ldrb	r2, [r2, #2]
    ea88:	e2811001 	add	r1, r1, #1
    ea8c:	e1833402 	orr	r3, r3, r2, lsl #8
    ea90:	e6bf3fb3 	rev16	r3, r3
    ea94:	e6ff3073 	uxth	r3, r3
    ea98:	e0443003 	sub	r3, r4, r3
    ea9c:	e3510003 	cmp	r1, #3
    eaa0:	e4803004 	str	r3, [r0], #4
    eaa4:	1afffff3 	bne	ea78 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xe0>
    eaa8:	e5de302f 	ldrb	r3, [lr, #47]	; 0x2f
    eaac:	e5de2030 	ldrb	r2, [lr, #48]	; 0x30
    eab0:	e1833402 	orr	r3, r3, r2, lsl #8
    eab4:	e6bf3fb3 	rev16	r3, r3
    eab8:	e6ff3073 	uxth	r3, r3
    eabc:	e2433006 	sub	r3, r3, #6
    eac0:	e58c3120 	str	r3, [ip, #288]	; 0x120
    eac4:	e8bd8010 	pop	{r4, pc}
    eac8:	e8bd4010 	pop	{r4, lr}
    eacc:	ea00029d 	b	f548 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
    ead0:	e3a02097 	mov	r2, #151	; 0x97
    ead4:	e59f1004 	ldr	r1, [pc, #4]	; eae0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x148>
    ead8:	e59f0018 	ldr	r0, [pc, #24]	; eaf8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x160>
    eadc:	eb0052e7 	bl	23680 <assertion_failed>
    eae0:	0003594c 	.word	0x0003594c
    eae4:	00035260 	.word	0x00035260
    eae8:	000007f8 	.word	0x000007f8
    eaec:	0007f800 	.word	0x0007f800
    eaf0:	0003591c 	.word	0x0003591c
    eaf4:	000001ff 	.word	0x000001ff
    eaf8:	000359bc 	.word	0x000359bc

0000eafc <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
    eafc:	e3a00000 	mov	r0, #0
    eb00:	e12fff1e 	bx	lr

0000eb04 <CUSBGamePadPS3Device::GetProperties()>:
    eb04:	e3a0001b 	mov	r0, #27
    eb08:	e12fff1e 	bx	lr

0000eb0c <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
    eb0c:	e5d13001 	ldrb	r3, [r1, #1]
    eb10:	e5d12005 	ldrb	r2, [r1, #5]
    eb14:	e5803028 	str	r3, [r0, #40]	; 0x28
    eb18:	e5d13002 	ldrb	r3, [r1, #2]
    eb1c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    eb20:	e5803034 	str	r3, [r0, #52]	; 0x34
    eb24:	e5d13003 	ldrb	r3, [r1, #3]
    eb28:	e59fc18c 	ldr	ip, [pc, #396]	; ecbc <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x1b0>
    eb2c:	e5803040 	str	r3, [r0, #64]	; 0x40
    eb30:	e5d1e004 	ldrb	lr, [r1, #4]
    eb34:	e5d13005 	ldrb	r3, [r1, #5]
    eb38:	e580e04c 	str	lr, [r0, #76]	; 0x4c
    eb3c:	e202200f 	and	r2, r2, #15
    eb40:	e5d1e008 	ldrb	lr, [r1, #8]
    eb44:	e79cc102 	ldr	ip, [ip, r2, lsl #2]
    eb48:	e3130080 	tst	r3, #128	; 0x80
    eb4c:	e580e058 	str	lr, [r0, #88]	; 0x58
    eb50:	e5d1e009 	ldrb	lr, [r1, #9]
    eb54:	e580c108 	str	ip, [r0, #264]	; 0x108
    eb58:	138cc080 	orrne	ip, ip, #128	; 0x80
    eb5c:	1580c108 	strne	ip, [r0, #264]	; 0x108
    eb60:	e3130040 	tst	r3, #64	; 0x40
    eb64:	e58020ec 	str	r2, [r0, #236]	; 0xec
    eb68:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    eb6c:	e580e064 	str	lr, [r0, #100]	; 0x64
    eb70:	13822c01 	orrne	r2, r2, #256	; 0x100
    eb74:	15802108 	strne	r2, [r0, #264]	; 0x108
    eb78:	e3130020 	tst	r3, #32
    eb7c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    eb80:	13822c02 	orrne	r2, r2, #512	; 0x200
    eb84:	15802108 	strne	r2, [r0, #264]	; 0x108
    eb88:	e3130010 	tst	r3, #16
    eb8c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    eb90:	13833b01 	orrne	r3, r3, #1024	; 0x400
    eb94:	15803108 	strne	r3, [r0, #264]	; 0x108
    eb98:	e5d13006 	ldrb	r3, [r1, #6]
    eb9c:	e3130080 	tst	r3, #128	; 0x80
    eba0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    eba4:	13822a02 	orrne	r2, r2, #8192	; 0x2000
    eba8:	15802108 	strne	r2, [r0, #264]	; 0x108
    ebac:	e3130040 	tst	r3, #64	; 0x40
    ebb0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    ebb4:	13822a01 	orrne	r2, r2, #4096	; 0x1000
    ebb8:	15802108 	strne	r2, [r0, #264]	; 0x108
    ebbc:	e3130020 	tst	r3, #32
    ebc0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    ebc4:	13822901 	orrne	r2, r2, #16384	; 0x4000
    ebc8:	15802108 	strne	r2, [r0, #264]	; 0x108
    ebcc:	e3130010 	tst	r3, #16
    ebd0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    ebd4:	13822b02 	orrne	r2, r2, #2048	; 0x800
    ebd8:	15802108 	strne	r2, [r0, #264]	; 0x108
    ebdc:	e3130008 	tst	r3, #8
    ebe0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    ebe4:	13822010 	orrne	r2, r2, #16
    ebe8:	15802108 	strne	r2, [r0, #264]	; 0x108
    ebec:	e3130004 	tst	r3, #4
    ebf0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    ebf4:	13822008 	orrne	r2, r2, #8
    ebf8:	15802108 	strne	r2, [r0, #264]	; 0x108
    ebfc:	e3130002 	tst	r3, #2
    ec00:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    ec04:	13822040 	orrne	r2, r2, #64	; 0x40
    ec08:	15802108 	strne	r2, [r0, #264]	; 0x108
    ec0c:	e3130001 	tst	r3, #1
    ec10:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    ec14:	13833020 	orrne	r3, r3, #32
    ec18:	15803108 	strne	r3, [r0, #264]	; 0x108
    ec1c:	e5d13007 	ldrb	r3, [r1, #7]
    ec20:	e3130002 	tst	r3, #2
    ec24:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    ec28:	13822602 	orrne	r2, r2, #2097152	; 0x200000
    ec2c:	15802108 	strne	r2, [r0, #264]	; 0x108
    ec30:	e3130001 	tst	r3, #1
    ec34:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    ec38:	13833001 	orrne	r3, r3, #1
    ec3c:	15803108 	strne	r3, [r0, #264]	; 0x108
    ec40:	e5d12014 	ldrb	r2, [r1, #20]
    ec44:	e5d13013 	ldrb	r3, [r1, #19]
    ec48:	e1833402 	orr	r3, r3, r2, lsl #8
    ec4c:	e6bf3073 	sxth	r3, r3
    ec50:	e580310c 	str	r3, [r0, #268]	; 0x10c
    ec54:	e5d12018 	ldrb	r2, [r1, #24]
    ec58:	e5d13017 	ldrb	r3, [r1, #23]
    ec5c:	e1833402 	orr	r3, r3, r2, lsl #8
    ec60:	e6bf3073 	sxth	r3, r3
    ec64:	e5803110 	str	r3, [r0, #272]	; 0x110
    ec68:	e5d12016 	ldrb	r2, [r1, #22]
    ec6c:	e5d13015 	ldrb	r3, [r1, #21]
    ec70:	e1833402 	orr	r3, r3, r2, lsl #8
    ec74:	e6bf3073 	sxth	r3, r3
    ec78:	e5803114 	str	r3, [r0, #276]	; 0x114
    ec7c:	e5d12012 	ldrb	r2, [r1, #18]
    ec80:	e5d13011 	ldrb	r3, [r1, #17]
    ec84:	e1833402 	orr	r3, r3, r2, lsl #8
    ec88:	e6bf3073 	sxth	r3, r3
    ec8c:	e5803118 	str	r3, [r0, #280]	; 0x118
    ec90:	e5d1200e 	ldrb	r2, [r1, #14]
    ec94:	e5d1300d 	ldrb	r3, [r1, #13]
    ec98:	e1833402 	orr	r3, r3, r2, lsl #8
    ec9c:	e6bf3073 	sxth	r3, r3
    eca0:	e580311c 	str	r3, [r0, #284]	; 0x11c
    eca4:	e5d1300f 	ldrb	r3, [r1, #15]
    eca8:	e5d12010 	ldrb	r2, [r1, #16]
    ecac:	e1833402 	orr	r3, r3, r2, lsl #8
    ecb0:	e6bf3073 	sxth	r3, r3
    ecb4:	e5803120 	str	r3, [r0, #288]	; 0x120
    ecb8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ecbc:	000359cc 	.word	0x000359cc

0000ecc0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
    ecc0:	e92d4010 	push	{r4, lr}
    ecc4:	e1a04000 	mov	r4, r0
    ecc8:	e5900140 	ldr	r0, [r0, #320]	; 0x140
    eccc:	e59f3034 	ldr	r3, [pc, #52]	; ed08 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
    ecd0:	e3500000 	cmp	r0, #0
    ecd4:	e5843000 	str	r3, [r4]
    ecd8:	0a000002 	beq	ece8 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
    ecdc:	e5903000 	ldr	r3, [r0]
    ece0:	e5933004 	ldr	r3, [r3, #4]
    ece4:	e12fff33 	blx	r3
    ece8:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
    ecec:	e3500000 	cmp	r0, #0
    ecf0:	0a000000 	beq	ecf8 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
    ecf4:	eb006c86 	bl	29f14 <operator delete[](void*)>
    ecf8:	e1a00004 	mov	r0, r4
    ecfc:	eb001fd6 	bl	16c5c <CUSBGamePadDevice::~CUSBGamePadDevice()>
    ed00:	e1a00004 	mov	r0, r4
    ed04:	e8bd8010 	pop	{r4, pc}
    ed08:	000359f8 	.word	0x000359f8

0000ed0c <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
    ed0c:	e92d4010 	push	{r4, lr}
    ed10:	e1a04000 	mov	r4, r0
    ed14:	ebffffe9 	bl	ecc0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>
    ed18:	e1a00004 	mov	r0, r4
    ed1c:	e3a01f53 	mov	r1, #332	; 0x14c
    ed20:	eb006c81 	bl	29f2c <operator delete(void*, unsigned int)>
    ed24:	e1a00004 	mov	r0, r4
    ed28:	e8bd8010 	pop	{r4, pc}

0000ed2c <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
    ed2c:	e92d4010 	push	{r4, lr}
    ed30:	e1a04000 	mov	r4, r0
    ed34:	eb001fb6 	bl	16c14 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
    ed38:	e3a03000 	mov	r3, #0
    ed3c:	e59f2030 	ldr	r2, [pc, #48]	; ed74 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x48>
    ed40:	e1a00004 	mov	r0, r4
    ed44:	e5842000 	str	r2, [r4]
    ed48:	e3a01003 	mov	r1, #3
    ed4c:	e1a02003 	mov	r2, r3
    ed50:	ebfffdab 	bl	e404 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
    ed54:	e3a03000 	mov	r3, #0
    ed58:	e5c40130 	strb	r0, [r4, #304]	; 0x130
    ed5c:	e584313c 	str	r3, [r4, #316]	; 0x13c
    ed60:	e5843140 	str	r3, [r4, #320]	; 0x140
    ed64:	e5c43144 	strb	r3, [r4, #324]	; 0x144
    ed68:	e5c43145 	strb	r3, [r4, #325]	; 0x145
    ed6c:	e1a00004 	mov	r0, r4
    ed70:	e8bd8010 	pop	{r4, pc}
    ed74:	000359f8 	.word	0x000359f8

0000ed78 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
    ed78:	e5d13007 	ldrb	r3, [r1, #7]
    ed7c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ed80:	e2133002 	ands	r3, r3, #2
    ed84:	e1a06001 	mov	r6, r1
    ed88:	e1a05000 	mov	r5, r0
    ed8c:	1a000058 	bne	eef4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x17c>
    ed90:	e5d00144 	ldrb	r0, [r0, #324]	; 0x144
    ed94:	e3500000 	cmp	r0, #0
    ed98:	1a000059 	bne	ef04 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x18c>
    ed9c:	e5d67021 	ldrb	r7, [r6, #33]	; 0x21
    eda0:	e5d64023 	ldrb	r4, [r6, #35]	; 0x23
    eda4:	e2473001 	sub	r3, r7, #1
    eda8:	e3530002 	cmp	r3, #2
    edac:	83a07001 	movhi	r7, #1
    edb0:	e1b043a4 	lsrs	r4, r4, #7
    edb4:	1a000047 	bne	eed8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x160>
    edb8:	e1a03004 	mov	r3, r4
    edbc:	e5d5c145 	ldrb	ip, [r5, #325]	; 0x145
    edc0:	e0833004 	add	r3, r3, r4
    edc4:	e35c0000 	cmp	ip, #0
    edc8:	e0863003 	add	r3, r6, r3
    edcc:	1a000022 	bne	ee5c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe4>
    edd0:	e5d32025 	ldrb	r2, [r3, #37]	; 0x25
    edd4:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
    edd8:	e5d3e024 	ldrb	lr, [r3, #36]	; 0x24
    eddc:	e1a01201 	lsl	r1, r1, #4
    ede0:	e202300f 	and	r3, r2, #15
    ede4:	e18ee403 	orr	lr, lr, r3, lsl #8
    ede8:	e1811222 	orr	r1, r1, r2, lsr #4
    edec:	e1a0300c 	mov	r3, ip
    edf0:	e1a0200c 	mov	r2, ip
    edf4:	e2859f51 	add	r9, r5, #324	; 0x144
    edf8:	e2858f52 	add	r8, r5, #328	; 0x148
    edfc:	e3a0a001 	mov	sl, #1
    ee00:	e190000c 	orrs	r0, r0, ip
    ee04:	e5c5a145 	strb	sl, [r5, #325]	; 0x145
    ee08:	e1c9e0b2 	strh	lr, [r9, #2]
    ee0c:	e1c810b0 	strh	r1, [r8]
    ee10:	0a000004 	beq	ee28 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb0>
    ee14:	e5950140 	ldr	r0, [r5, #320]	; 0x140
    ee18:	e3500000 	cmp	r0, #0
    ee1c:	0a000029 	beq	eec8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x150>
    ee20:	e5d51144 	ldrb	r1, [r5, #324]	; 0x144
    ee24:	eb0022e3 	bl	179b8 <CMouseDevice::ReportHandler(unsigned int, int, int)>
    ee28:	e3a01000 	mov	r1, #0
    ee2c:	e2844001 	add	r4, r4, #1
    ee30:	e1570004 	cmp	r7, r4
    ee34:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    ee38:	e1a03184 	lsl	r3, r4, #3
    ee3c:	e0832004 	add	r2, r3, r4
    ee40:	e0862002 	add	r2, r6, r2
    ee44:	e5d22023 	ldrb	r2, [r2, #35]	; 0x23
    ee48:	e1a00001 	mov	r0, r1
    ee4c:	e1b023a2 	lsrs	r2, r2, #7
    ee50:	0affffd9 	beq	edbc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x44>
    ee54:	e5c51145 	strb	r1, [r5, #325]	; 0x145
    ee58:	eafffff3 	b	ee2c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb4>
    ee5c:	e5d3a025 	ldrb	sl, [r3, #37]	; 0x25
    ee60:	e5d3e024 	ldrb	lr, [r3, #36]	; 0x24
    ee64:	e2859f51 	add	r9, r5, #324	; 0x144
    ee68:	e20a100f 	and	r1, sl, #15
    ee6c:	e1d920b2 	ldrh	r2, [r9, #2]
    ee70:	e18ee401 	orr	lr, lr, r1, lsl #8
    ee74:	e04e2002 	sub	r2, lr, r2
    ee78:	e352007f 	cmp	r2, #127	; 0x7f
    ee7c:	e3e0c07e 	mvn	ip, #126	; 0x7e
    ee80:	a3a0207f 	movge	r2, #127	; 0x7f
    ee84:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
    ee88:	e2858f52 	add	r8, r5, #328	; 0x148
    ee8c:	e1a01201 	lsl	r1, r1, #4
    ee90:	e1d830b0 	ldrh	r3, [r8]
    ee94:	e181122a 	orr	r1, r1, sl, lsr #4
    ee98:	e0413003 	sub	r3, r1, r3
    ee9c:	e152000c 	cmp	r2, ip
    eea0:	b1a0200c 	movlt	r2, ip
    eea4:	e353007f 	cmp	r3, #127	; 0x7f
    eea8:	a3a0307f 	movge	r3, #127	; 0x7f
    eeac:	e153000c 	cmp	r3, ip
    eeb0:	b1a0300c 	movlt	r3, ip
    eeb4:	e3530000 	cmp	r3, #0
    eeb8:	03520000 	cmpeq	r2, #0
    eebc:	13a0c001 	movne	ip, #1
    eec0:	03a0c000 	moveq	ip, #0
    eec4:	eaffffcc 	b	edfc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x84>
    eec8:	e59f2050 	ldr	r2, [pc, #80]	; ef20 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1a8>
    eecc:	e59f1050 	ldr	r1, [pc, #80]	; ef24 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1ac>
    eed0:	e59f0050 	ldr	r0, [pc, #80]	; ef28 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1b0>
    eed4:	eb0051e9 	bl	23680 <assertion_failed>
    eed8:	e3a04000 	mov	r4, #0
    eedc:	e1500004 	cmp	r0, r4
    eee0:	e5c54145 	strb	r4, [r5, #325]	; 0x145
    eee4:	0a00000b 	beq	ef18 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1a0>
    eee8:	e1a03004 	mov	r3, r4
    eeec:	e1a02004 	mov	r2, r4
    eef0:	eaffffc7 	b	ee14 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x9c>
    eef4:	e5d02144 	ldrb	r2, [r0, #324]	; 0x144
    eef8:	e3520000 	cmp	r2, #0
    eefc:	13a00000 	movne	r0, #0
    ef00:	1affffa5 	bne	ed9c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
    ef04:	e2933000 	adds	r3, r3, #0
    ef08:	13a03001 	movne	r3, #1
    ef0c:	e3a00001 	mov	r0, #1
    ef10:	e5c53144 	strb	r3, [r5, #324]	; 0x144
    ef14:	eaffffa0 	b	ed9c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
    ef18:	e1a04000 	mov	r4, r0
    ef1c:	eaffffc1 	b	ee28 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb0>
    ef20:	0000015a 	.word	0x0000015a
    ef24:	00035a48 	.word	0x00035a48
    ef28:	00035a5c 	.word	0x00035a5c

0000ef2c <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
    ef2c:	e2913000 	adds	r3, r1, #0
    ef30:	13a03001 	movne	r3, #1
    ef34:	e3520040 	cmp	r2, #64	; 0x40
    ef38:	13a03000 	movne	r3, #0
    ef3c:	e2532000 	subs	r2, r3, #0
    ef40:	012fff1e 	bxeq	lr
    ef44:	e92d4070 	push	{r4, r5, r6, lr}
    ef48:	e1a04000 	mov	r4, r0
    ef4c:	e5903000 	ldr	r3, [r0]
    ef50:	e1a05001 	mov	r5, r1
    ef54:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    ef58:	e12fff33 	blx	r3
    ef5c:	e5943124 	ldr	r3, [r4, #292]	; 0x124
    ef60:	e3530000 	cmp	r3, #0
    ef64:	0a000003 	beq	ef78 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x4c>
    ef68:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
    ef6c:	e2841024 	add	r1, r4, #36	; 0x24
    ef70:	e2400001 	sub	r0, r0, #1
    ef74:	e12fff33 	blx	r3
    ef78:	e5943140 	ldr	r3, [r4, #320]	; 0x140
    ef7c:	e3530000 	cmp	r3, #0
    ef80:	08bd8070 	popeq	{r4, r5, r6, pc}
    ef84:	e1a01005 	mov	r1, r5
    ef88:	e1a00004 	mov	r0, r4
    ef8c:	e8bd4070 	pop	{r4, r5, r6, lr}
    ef90:	eaffff78 	b	ed78 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

0000ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
    ef94:	e92d4010 	push	{r4, lr}
    ef98:	e590213c 	ldr	r2, [r0, #316]	; 0x13c
    ef9c:	e5d0c131 	ldrb	ip, [r0, #305]	; 0x131
    efa0:	e3a03000 	mov	r3, #0
    efa4:	e5c2c003 	strb	ip, [r2, #3]
    efa8:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    efac:	e5d0e133 	ldrb	lr, [r0, #307]	; 0x133
    efb0:	e3a02020 	mov	r2, #32
    efb4:	e5cce004 	strb	lr, [ip, #4]
    efb8:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    efbc:	e5d0e132 	ldrb	lr, [r0, #306]	; 0x132
    efc0:	e5cce005 	strb	lr, [ip, #5]
    efc4:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    efc8:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
    efcc:	e5cce006 	strb	lr, [ip, #6]
    efd0:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    efd4:	e5d0e135 	ldrb	lr, [r0, #309]	; 0x135
    efd8:	e5cce007 	strb	lr, [ip, #7]
    efdc:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    efe0:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
    efe4:	e5cce008 	strb	lr, [ip, #8]
    efe8:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    efec:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
    eff0:	e5cce009 	strb	lr, [ip, #9]
    eff4:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
    eff8:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
    effc:	e5cce00a 	strb	lr, [ip, #10]
    f000:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
    f004:	eb000790 	bl	10e4c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
    f008:	e2504000 	subs	r4, r0, #0
    f00c:	1a000004 	bne	f024 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x90>
    f010:	eb005a8d 	bl	25a4c <CLogger::Get()>
    f014:	e59f3010 	ldr	r3, [pc, #16]	; f02c <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x98>
    f018:	e3a02001 	mov	r2, #1
    f01c:	e59f100c 	ldr	r1, [pc, #12]	; f030 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x9c>
    f020:	eb0059c6 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f024:	e1a00004 	mov	r0, r4
    f028:	e8bd8010 	pop	{r4, pc}
    f02c:	00035a70 	.word	0x00035a70
    f030:	00035a3c 	.word	0x00035a3c

0000f034 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
    f034:	e2411001 	sub	r1, r1, #1
    f038:	e3510006 	cmp	r1, #6
    f03c:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    f040:	ea000044 	b	f158 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x124>
    f044:	0000f080 	.word	0x0000f080
    f048:	0000f0a4 	.word	0x0000f0a4
    f04c:	0000f0c8 	.word	0x0000f0c8
    f050:	0000f0ec 	.word	0x0000f0ec
    f054:	0000f110 	.word	0x0000f110
    f058:	0000f134 	.word	0x0000f134
    f05c:	0000f060 	.word	0x0000f060
    f060:	e3e03000 	mvn	r3, #0
    f064:	e3a0207f 	mov	r2, #127	; 0x7f
    f068:	e5c03134 	strb	r3, [r0, #308]	; 0x134
    f06c:	e5c03135 	strb	r3, [r0, #309]	; 0x135
    f070:	e5c03136 	strb	r3, [r0, #310]	; 0x136
    f074:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    f078:	e5c02137 	strb	r2, [r0, #311]	; 0x137
    f07c:	eaffffc4 	b	ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f080:	e3a02000 	mov	r2, #0
    f084:	e3e03000 	mvn	r3, #0
    f088:	e3a0107f 	mov	r1, #127	; 0x7f
    f08c:	e5c02134 	strb	r2, [r0, #308]	; 0x134
    f090:	e5c02135 	strb	r2, [r0, #309]	; 0x135
    f094:	e5c03136 	strb	r3, [r0, #310]	; 0x136
    f098:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    f09c:	e5c01137 	strb	r1, [r0, #311]	; 0x137
    f0a0:	eaffffbb 	b	ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f0a4:	e3e02000 	mvn	r2, #0
    f0a8:	e3a03000 	mov	r3, #0
    f0ac:	e3a0107f 	mov	r1, #127	; 0x7f
    f0b0:	e5c02134 	strb	r2, [r0, #308]	; 0x134
    f0b4:	e5c02138 	strb	r2, [r0, #312]	; 0x138
    f0b8:	e5c03135 	strb	r3, [r0, #309]	; 0x135
    f0bc:	e5c03136 	strb	r3, [r0, #310]	; 0x136
    f0c0:	e5c01137 	strb	r1, [r0, #311]	; 0x137
    f0c4:	eaffffb2 	b	ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f0c8:	e3e03000 	mvn	r3, #0
    f0cc:	e3a01000 	mov	r1, #0
    f0d0:	e3a0207f 	mov	r2, #127	; 0x7f
    f0d4:	e5c03134 	strb	r3, [r0, #308]	; 0x134
    f0d8:	e5c03136 	strb	r3, [r0, #310]	; 0x136
    f0dc:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    f0e0:	e5c01135 	strb	r1, [r0, #309]	; 0x135
    f0e4:	e5c02137 	strb	r2, [r0, #311]	; 0x137
    f0e8:	eaffffa9 	b	ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f0ec:	e3a02000 	mov	r2, #0
    f0f0:	e3e03000 	mvn	r3, #0
    f0f4:	e3a0107f 	mov	r1, #127	; 0x7f
    f0f8:	e5c02134 	strb	r2, [r0, #308]	; 0x134
    f0fc:	e5c02136 	strb	r2, [r0, #310]	; 0x136
    f100:	e5c03135 	strb	r3, [r0, #309]	; 0x135
    f104:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    f108:	e5c01137 	strb	r1, [r0, #311]	; 0x137
    f10c:	eaffffa0 	b	ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f110:	e3e03000 	mvn	r3, #0
    f114:	e3a01000 	mov	r1, #0
    f118:	e3a0207f 	mov	r2, #127	; 0x7f
    f11c:	e5c01134 	strb	r1, [r0, #308]	; 0x134
    f120:	e5c03135 	strb	r3, [r0, #309]	; 0x135
    f124:	e5c03136 	strb	r3, [r0, #310]	; 0x136
    f128:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    f12c:	e5c02137 	strb	r2, [r0, #311]	; 0x137
    f130:	eaffff97 	b	ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f134:	e3e03000 	mvn	r3, #0
    f138:	e3a01000 	mov	r1, #0
    f13c:	e3a0207f 	mov	r2, #127	; 0x7f
    f140:	e5c03134 	strb	r3, [r0, #308]	; 0x134
    f144:	e5c03135 	strb	r3, [r0, #309]	; 0x135
    f148:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    f14c:	e5c01136 	strb	r1, [r0, #310]	; 0x136
    f150:	e5c02137 	strb	r2, [r0, #311]	; 0x137
    f154:	eaffff8e 	b	ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f158:	e3a03000 	mov	r3, #0
    f15c:	e5c03134 	strb	r3, [r0, #308]	; 0x134
    f160:	e5c03135 	strb	r3, [r0, #309]	; 0x135
    f164:	e5c03136 	strb	r3, [r0, #310]	; 0x136
    f168:	e5c03137 	strb	r3, [r0, #311]	; 0x137
    f16c:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    f170:	eaffff87 	b	ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0000f174 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
    f174:	e92d4010 	push	{r4, lr}
    f178:	e1a04821 	lsr	r4, r1, #16
    f17c:	e1a0e421 	lsr	lr, r1, #8
    f180:	e5c04134 	strb	r4, [r0, #308]	; 0x134
    f184:	e5c01136 	strb	r1, [r0, #310]	; 0x136
    f188:	e5c0e135 	strb	lr, [r0, #309]	; 0x135
    f18c:	e5c02137 	strb	r2, [r0, #311]	; 0x137
    f190:	e5c03138 	strb	r3, [r0, #312]	; 0x138
    f194:	e8bd4010 	pop	{r4, lr}
    f198:	eaffff7d 	b	ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0000f19c <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
    f19c:	e3510001 	cmp	r1, #1
    f1a0:	0a000011 	beq	f1ec <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
    f1a4:	3a00000a 	bcc	f1d4 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x38>
    f1a8:	e3510002 	cmp	r1, #2
    f1ac:	1a000006 	bne	f1cc <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x30>
    f1b0:	e3e0100c 	mvn	r1, #12
    f1b4:	e3a02000 	mov	r2, #0
    f1b8:	e3e03000 	mvn	r3, #0
    f1bc:	e5c01131 	strb	r1, [r0, #305]	; 0x131
    f1c0:	e5c02133 	strb	r2, [r0, #307]	; 0x133
    f1c4:	e5c03132 	strb	r3, [r0, #306]	; 0x132
    f1c8:	eaffff71 	b	ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f1cc:	e3a00001 	mov	r0, #1
    f1d0:	e12fff1e 	bx	lr
    f1d4:	e3a03000 	mov	r3, #0
    f1d8:	e3e0200f 	mvn	r2, #15
    f1dc:	e5c03133 	strb	r3, [r0, #307]	; 0x133
    f1e0:	e5c02131 	strb	r2, [r0, #305]	; 0x131
    f1e4:	e5c03132 	strb	r3, [r0, #306]	; 0x132
    f1e8:	eaffff69 	b	ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f1ec:	e3e0100c 	mvn	r1, #12
    f1f0:	e3e02000 	mvn	r2, #0
    f1f4:	e3a03000 	mov	r3, #0
    f1f8:	e5c01131 	strb	r1, [r0, #305]	; 0x131
    f1fc:	e5c02133 	strb	r2, [r0, #307]	; 0x133
    f200:	e5c03132 	strb	r3, [r0, #306]	; 0x132
    f204:	eaffff62 	b	ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0000f208 <CUSBGamePadPS4Device::DisableTouchpad()>:
    f208:	e3a02000 	mov	r2, #0
    f20c:	e59f3004 	ldr	r3, [pc, #4]	; f218 <CUSBGamePadPS4Device::DisableTouchpad()+0x10>
    f210:	e5c32000 	strb	r2, [r3]
    f214:	e12fff1e 	bx	lr
    f218:	0003deb8 	.word	0x0003deb8

0000f21c <CUSBGamePadPS4Device::Configure()>:
    f21c:	e92d4070 	push	{r4, r5, r6, lr}
    f220:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
    f224:	e3550000 	cmp	r5, #0
    f228:	0a00003f 	beq	f32c <CUSBGamePadPS4Device::Configure()+0x110>
    f22c:	e3a02040 	mov	r2, #64	; 0x40
    f230:	e2803f4a 	add	r3, r0, #296	; 0x128
    f234:	e1c320b0 	strh	r2, [r3]
    f238:	e1a04000 	mov	r4, r0
    f23c:	eb001e49 	bl	16b68 <CUSBGamePadDevice::Configure()>
    f240:	e2505000 	subs	r5, r0, #0
    f244:	0a00003c 	beq	f33c <CUSBGamePadPS4Device::Configure()+0x120>
    f248:	e59f3120 	ldr	r3, [pc, #288]	; f370 <CUSBGamePadPS4Device::Configure()+0x154>
    f24c:	e5d33000 	ldrb	r3, [r3]
    f250:	e3530000 	cmp	r3, #0
    f254:	1a00003f 	bne	f358 <CUSBGamePadPS4Device::Configure()+0x13c>
    f258:	e3a02006 	mov	r2, #6
    f25c:	e3a0c00e 	mov	ip, #14
    f260:	e3a00001 	mov	r0, #1
    f264:	e1a03004 	mov	r3, r4
    f268:	e3a05000 	mov	r5, #0
    f26c:	e3a010ff 	mov	r1, #255	; 0xff
    f270:	e5842024 	str	r2, [r4, #36]	; 0x24
    f274:	e584c104 	str	ip, [r4, #260]	; 0x104
    f278:	e58400e8 	str	r0, [r4, #232]	; 0xe8
    f27c:	e2842048 	add	r2, r4, #72	; 0x48
    f280:	e583502c 	str	r5, [r3, #44]	; 0x2c
    f284:	e5831030 	str	r1, [r3, #48]	; 0x30
    f288:	e283300c 	add	r3, r3, #12
    f28c:	e1520003 	cmp	r2, r3
    f290:	1afffffa 	bne	f280 <CUSBGamePadPS4Device::Configure()+0x64>
    f294:	e3a00020 	mov	r0, #32
    f298:	eb006b16 	bl	29ef8 <operator new[](unsigned int)>
    f29c:	e3a06005 	mov	r6, #5
    f2a0:	e3a02020 	mov	r2, #32
    f2a4:	e584013c 	str	r0, [r4, #316]	; 0x13c
    f2a8:	e3a01000 	mov	r1, #0
    f2ac:	eb0066c0 	bl	28db4 <memset>
    f2b0:	e3a0c007 	mov	ip, #7
    f2b4:	e3e03000 	mvn	r3, #0
    f2b8:	e3a0e004 	mov	lr, #4
    f2bc:	e3e0100f 	mvn	r1, #15
    f2c0:	e3a0207f 	mov	r2, #127	; 0x7f
    f2c4:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
    f2c8:	e5c06000 	strb	r6, [r0]
    f2cc:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
    f2d0:	e5c0c001 	strb	ip, [r0, #1]
    f2d4:	e594c13c 	ldr	ip, [r4, #316]	; 0x13c
    f2d8:	e1a00004 	mov	r0, r4
    f2dc:	e5cce002 	strb	lr, [ip, #2]
    f2e0:	e5c41131 	strb	r1, [r4, #305]	; 0x131
    f2e4:	e5c43134 	strb	r3, [r4, #308]	; 0x134
    f2e8:	e5c43135 	strb	r3, [r4, #309]	; 0x135
    f2ec:	e5c43136 	strb	r3, [r4, #310]	; 0x136
    f2f0:	e5c43138 	strb	r3, [r4, #312]	; 0x138
    f2f4:	e5c42137 	strb	r2, [r4, #311]	; 0x137
    f2f8:	e5c45133 	strb	r5, [r4, #307]	; 0x133
    f2fc:	e5c45132 	strb	r5, [r4, #306]	; 0x132
    f300:	ebffff23 	bl	ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f304:	e5c45134 	strb	r5, [r4, #308]	; 0x134
    f308:	e5c45135 	strb	r5, [r4, #309]	; 0x135
    f30c:	e5c45136 	strb	r5, [r4, #310]	; 0x136
    f310:	e3a000fa 	mov	r0, #250	; 0xfa
    f314:	eb006660 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
    f318:	e1a00004 	mov	r0, r4
    f31c:	ebffff1c 	bl	ef94 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
    f320:	e1a00004 	mov	r0, r4
    f324:	e8bd4070 	pop	{r4, r5, r6, lr}
    f328:	ea000751 	b	11074 <CUSBHIDDevice::StartRequest()>
    f32c:	e59f1040 	ldr	r1, [pc, #64]	; f374 <CUSBGamePadPS4Device::Configure()+0x158>
    f330:	ebfffc20 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
    f334:	e1a00005 	mov	r0, r5
    f338:	e8bd8070 	pop	{r4, r5, r6, pc}
    f33c:	eb0059c2 	bl	25a4c <CLogger::Get()>
    f340:	e59f3030 	ldr	r3, [pc, #48]	; f378 <CUSBGamePadPS4Device::Configure()+0x15c>
    f344:	e3a02001 	mov	r2, #1
    f348:	e59f1024 	ldr	r1, [pc, #36]	; f374 <CUSBGamePadPS4Device::Configure()+0x158>
    f34c:	eb0058fb 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f350:	e1a00005 	mov	r0, r5
    f354:	e8bd8070 	pop	{r4, r5, r6, pc}
    f358:	e3a00028 	mov	r0, #40	; 0x28
    f35c:	eb006ae4 	bl	29ef4 <operator new(unsigned int)>
    f360:	e1a05000 	mov	r5, r0
    f364:	eb002159 	bl	178d0 <CMouseDevice::CMouseDevice()>
    f368:	e5845140 	str	r5, [r4, #320]	; 0x140
    f36c:	eaffffb9 	b	f258 <CUSBGamePadPS4Device::Configure()+0x3c>
    f370:	0003deb8 	.word	0x0003deb8
    f374:	00035a3c 	.word	0x00035a3c
    f378:	00035960 	.word	0x00035960

0000f37c <CUSBGamePadPS4Device::GetProperties()>:
    f37c:	e3a0003f 	mov	r0, #63	; 0x3f
    f380:	e12fff1e 	bx	lr

0000f384 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
    f384:	e92d4010 	push	{r4, lr}
    f388:	e1a04000 	mov	r4, r0
    f38c:	e5900134 	ldr	r0, [r0, #308]	; 0x134
    f390:	e59f3024 	ldr	r3, [pc, #36]	; f3bc <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
    f394:	e3500000 	cmp	r0, #0
    f398:	e5843000 	str	r3, [r4]
    f39c:	0a000000 	beq	f3a4 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
    f3a0:	eb006adb 	bl	29f14 <operator delete[](void*)>
    f3a4:	e3a03000 	mov	r3, #0
    f3a8:	e1a00004 	mov	r0, r4
    f3ac:	e5843134 	str	r3, [r4, #308]	; 0x134
    f3b0:	eb001e29 	bl	16c5c <CUSBGamePadDevice::~CUSBGamePadDevice()>
    f3b4:	e1a00004 	mov	r0, r4
    f3b8:	e8bd8010 	pop	{r4, pc}
    f3bc:	00035a98 	.word	0x00035a98

0000f3c0 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
    f3c0:	e92d4010 	push	{r4, lr}
    f3c4:	e1a04000 	mov	r4, r0
    f3c8:	ebffffed 	bl	f384 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    f3cc:	e1a00004 	mov	r0, r4
    f3d0:	e3a01f4f 	mov	r1, #316	; 0x13c
    f3d4:	eb006ad4 	bl	29f2c <operator delete(void*, unsigned int)>
    f3d8:	e1a00004 	mov	r0, r4
    f3dc:	e8bd8010 	pop	{r4, pc}

0000f3e0 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
    f3e0:	e92d4070 	push	{r4, r5, r6, lr}
    f3e4:	e1a04000 	mov	r4, r0
    f3e8:	e1a05002 	mov	r5, r2
    f3ec:	eb001e08 	bl	16c14 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
    f3f0:	e3a03000 	mov	r3, #0
    f3f4:	e59f0018 	ldr	r0, [pc, #24]	; f414 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
    f3f8:	e2841f4e 	add	r1, r4, #312	; 0x138
    f3fc:	e5840000 	str	r0, [r4]
    f400:	e5c45130 	strb	r5, [r4, #304]	; 0x130
    f404:	e5843134 	str	r3, [r4, #308]	; 0x134
    f408:	e1a00004 	mov	r0, r4
    f40c:	e1c130b0 	strh	r3, [r1]
    f410:	e8bd8070 	pop	{r4, r5, r6, pc}
    f414:	00035a98 	.word	0x00035a98

0000f418 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
    f418:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f41c:	e0814002 	add	r4, r1, r2
    f420:	e2846007 	add	r6, r4, #7
    f424:	e1a061a6 	lsr	r6, r6, #3
    f428:	e1a0e1a1 	lsr	lr, r1, #3
    f42c:	e15e0006 	cmp	lr, r6
    f430:	e24dd00c 	sub	sp, sp, #12
    f434:	2a000037 	bcs	f518 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x100>
    f438:	e3a07001 	mov	r7, #1
    f43c:	e3a05000 	mov	r5, #0
    f440:	e2011007 	and	r1, r1, #7
    f444:	e0828001 	add	r8, r2, r1
    f448:	e1a08817 	lsl	r8, r7, r8
    f44c:	e6ef8078 	uxtb	r8, r8
    f450:	e1a07117 	lsl	r7, r7, r1
    f454:	e6ef7077 	uxtb	r7, r7
    f458:	e2489001 	sub	r9, r8, #1
    f45c:	e2444001 	sub	r4, r4, #1
    f460:	e0488007 	sub	r8, r8, r7
    f464:	e6ef9079 	uxtb	r9, r9
    f468:	e2677000 	rsb	r7, r7, #0
    f46c:	e1a03005 	mov	r3, r5
    f470:	e1a0c00e 	mov	ip, lr
    f474:	e1a041a4 	lsr	r4, r4, #3
    f478:	e080000e 	add	r0, r0, lr
    f47c:	e58d9004 	str	r9, [sp, #4]
    f480:	e6ef8078 	uxtb	r8, r8
    f484:	e6ef7077 	uxtb	r7, r7
    f488:	e261b008 	rsb	fp, r1, #8
    f48c:	ea00000e 	b	f4cc <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
    f490:	e15e000c 	cmp	lr, ip
    f494:	0a000018 	beq	f4fc <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xe4>
    f498:	e15c0004 	cmp	ip, r4
    f49c:	05d09000 	ldrbeq	r9, [r0]
    f4a0:	059da004 	ldreq	sl, [sp, #4]
    f4a4:	12855008 	addne	r5, r5, #8
    f4a8:	15d0a000 	ldrbne	sl, [r0]
    f4ac:	0009900a 	andeq	r9, r9, sl
    f4b0:	10429005 	subne	r9, r2, r5
    f4b4:	01833009 	orreq	r3, r3, r9
    f4b8:	1183391a 	orrne	r3, r3, sl, lsl r9
    f4bc:	e28cc001 	add	ip, ip, #1
    f4c0:	e15c0006 	cmp	ip, r6
    f4c4:	e2800001 	add	r0, r0, #1
    f4c8:	0a000008 	beq	f4f0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>
    f4cc:	e15e0004 	cmp	lr, r4
    f4d0:	1affffee 	bne	f490 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x78>
    f4d4:	e5d03000 	ldrb	r3, [r0]
    f4d8:	e28cc001 	add	ip, ip, #1
    f4dc:	e0033008 	and	r3, r3, r8
    f4e0:	e15c0006 	cmp	ip, r6
    f4e4:	e1a03153 	asr	r3, r3, r1
    f4e8:	e2800001 	add	r0, r0, #1
    f4ec:	1afffff6 	bne	f4cc <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
    f4f0:	e1a00003 	mov	r0, r3
    f4f4:	e28dd00c 	add	sp, sp, #12
    f4f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4fc:	e5d03000 	ldrb	r3, [r0]
    f500:	e085500b 	add	r5, r5, fp
    f504:	e0033007 	and	r3, r3, r7
    f508:	e1a03153 	asr	r3, r3, r1
    f50c:	e0429005 	sub	r9, r2, r5
    f510:	e1a03913 	lsl	r3, r3, r9
    f514:	eaffffe8 	b	f4bc <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
    f518:	e3a03000 	mov	r3, #0
    f51c:	eafffff3 	b	f4f0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>

0000f520 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
    f520:	e92d4010 	push	{r4, lr}
    f524:	e1a04002 	mov	r4, r2
    f528:	ebffffba 	bl	f418 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
    f52c:	e3a02001 	mov	r2, #1
    f530:	e2443001 	sub	r3, r4, #1
    f534:	e0103312 	ands	r3, r0, r2, lsl r3
    f538:	11a02412 	lslne	r2, r2, r4
    f53c:	12622000 	rsbne	r2, r2, #0
    f540:	11800002 	orrne	r0, r0, r2
    f544:	e8bd8010 	pop	{r4, pc}

0000f548 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
    f548:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f54c:	e5905134 	ldr	r5, [r0, #308]	; 0x134
    f550:	e24dd034 	sub	sp, sp, #52	; 0x34
    f554:	e3550000 	cmp	r5, #0
    f558:	e58d0014 	str	r0, [sp, #20]
    f55c:	e58d1000 	str	r1, [sp]
    f560:	0a000108 	beq	f988 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x440>
    f564:	e3a09000 	mov	r9, #0
    f568:	e59f3440 	ldr	r3, [pc, #1088]	; f9b0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x468>
    f56c:	e1a07009 	mov	r7, r9
    f570:	e1a02003 	mov	r2, r3
    f574:	e1a0a009 	mov	sl, r9
    f578:	e1a0b009 	mov	fp, r9
    f57c:	e1a08009 	mov	r8, r9
    f580:	e58d300c 	str	r3, [sp, #12]
    f584:	e59d3014 	ldr	r3, [sp, #20]
    f588:	e58d9020 	str	r9, [sp, #32]
    f58c:	e2833f4e 	add	r3, r3, #312	; 0x138
    f590:	e1d340b0 	ldrh	r4, [r3]
    f594:	e58d901c 	str	r9, [sp, #28]
    f598:	e58d9004 	str	r9, [sp, #4]
    f59c:	e58d2010 	str	r2, [sp, #16]
    f5a0:	e58d2018 	str	r2, [sp, #24]
    f5a4:	e58d2008 	str	r2, [sp, #8]
    f5a8:	e3540000 	cmp	r4, #0
    f5ac:	0a000024 	beq	f644 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
    f5b0:	e1d530d0 	ldrsb	r3, [r5]
    f5b4:	e2032003 	and	r2, r3, #3
    f5b8:	e3520001 	cmp	r2, #1
    f5bc:	0a00004e 	beq	f6fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1b4>
    f5c0:	e3520002 	cmp	r2, #2
    f5c4:	0a000045 	beq	f6e0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x198>
    f5c8:	e3520000 	cmp	r2, #0
    f5cc:	0a00003e 	beq	f6cc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x184>
    f5d0:	e1d560d3 	ldrsb	r6, [r5, #3]
    f5d4:	e1d520d2 	ldrsb	r2, [r5, #2]
    f5d8:	e1d510d1 	ldrsb	r1, [r5, #1]
    f5dc:	e1a06806 	lsl	r6, r6, #16
    f5e0:	e1866402 	orr	r6, r6, r2, lsl #8
    f5e4:	e1d520d4 	ldrsb	r2, [r5, #4]
    f5e8:	e2444005 	sub	r4, r4, #5
    f5ec:	e1866001 	orr	r6, r6, r1
    f5f0:	e6ff4074 	uxth	r4, r4
    f5f4:	e1866c02 	orr	r6, r6, r2, lsl #24
    f5f8:	e2855005 	add	r5, r5, #5
    f5fc:	e20330fc 	and	r3, r3, #252	; 0xfc
    f600:	e3530084 	cmp	r3, #132	; 0x84
    f604:	0a000024 	beq	f69c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x154>
    f608:	e3530034 	cmp	r3, #52	; 0x34
    f60c:	0a00003f 	beq	f710 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1c8>
    f610:	ca000016 	bgt	f670 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x128>
    f614:	e3530008 	cmp	r3, #8
    f618:	0a00003e 	beq	f718 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1d0>
    f61c:	da00004c 	ble	f754 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x20c>
    f620:	e3530014 	cmp	r3, #20
    f624:	058d6018 	streq	r6, [sp, #24]
    f628:	0affffde 	beq	f5a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
    f62c:	e3530024 	cmp	r3, #36	; 0x24
    f630:	e59d2008 	ldr	r2, [sp, #8]
    f634:	01a02006 	moveq	r2, r6
    f638:	e3540000 	cmp	r4, #0
    f63c:	e58d2008 	str	r2, [sp, #8]
    f640:	1affffda 	bne	f5b0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
    f644:	e59d1014 	ldr	r1, [sp, #20]
    f648:	e59d001c 	ldr	r0, [sp, #28]
    f64c:	e28b3007 	add	r3, fp, #7
    f650:	e5810024 	str	r0, [r1, #36]	; 0x24
    f654:	e59d0020 	ldr	r0, [sp, #32]
    f658:	e1a031a3 	lsr	r3, r3, #3
    f65c:	e2812f4a 	add	r2, r1, #296	; 0x128
    f660:	e58100e8 	str	r0, [r1, #232]	; 0xe8
    f664:	e1c230b0 	strh	r3, [r2]
    f668:	e28dd034 	add	sp, sp, #52	; 0x34
    f66c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f670:	e3530074 	cmp	r3, #116	; 0x74
    f674:	01a0a006 	moveq	sl, r6
    f678:	0affffca 	beq	f5a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
    f67c:	da00003b 	ble	f770 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x228>
    f680:	e3530080 	cmp	r3, #128	; 0x80
    f684:	0a00002b 	beq	f738 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f0>
    f688:	e3530094 	cmp	r3, #148	; 0x94
    f68c:	e59d2004 	ldr	r2, [sp, #4]
    f690:	01a02006 	moveq	r2, r6
    f694:	e58d2004 	str	r2, [sp, #4]
    f698:	eaffffc2 	b	f5a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
    f69c:	e3570000 	cmp	r7, #0
    f6a0:	1affffe7 	bne	f644 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
    f6a4:	e3a02008 	mov	r2, #8
    f6a8:	e1a01008 	mov	r1, r8
    f6ac:	e59d0000 	ldr	r0, [sp]
    f6b0:	ebffff58 	bl	f418 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
    f6b4:	e3500000 	cmp	r0, #0
    f6b8:	11500006 	cmpne	r0, r6
    f6bc:	1affffe9 	bne	f668 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x120>
    f6c0:	e1a07006 	mov	r7, r6
    f6c4:	e3a0b008 	mov	fp, #8
    f6c8:	eaffffb6 	b	f5a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
    f6cc:	e2444001 	sub	r4, r4, #1
    f6d0:	e6ff4074 	uxth	r4, r4
    f6d4:	e2855001 	add	r5, r5, #1
    f6d8:	e1a06008 	mov	r6, r8
    f6dc:	eaffffc6 	b	f5fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
    f6e0:	e5d56001 	ldrb	r6, [r5, #1]
    f6e4:	e1d520d2 	ldrsb	r2, [r5, #2]
    f6e8:	e2444003 	sub	r4, r4, #3
    f6ec:	e6ff4074 	uxth	r4, r4
    f6f0:	e1866402 	orr	r6, r6, r2, lsl #8
    f6f4:	e2855003 	add	r5, r5, #3
    f6f8:	eaffffbf 	b	f5fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
    f6fc:	e2444002 	sub	r4, r4, #2
    f700:	e1d560d1 	ldrsb	r6, [r5, #1]
    f704:	e6ff4074 	uxth	r4, r4
    f708:	e2855002 	add	r5, r5, #2
    f70c:	eaffffba 	b	f5fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
    f710:	e58d6010 	str	r6, [sp, #16]
    f714:	eaffffa3 	b	f5a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
    f718:	e3560036 	cmp	r6, #54	; 0x36
    f71c:	ca000018 	bgt	f784 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x23c>
    f720:	e3560030 	cmp	r6, #48	; 0x30
    f724:	aa00002d 	bge	f7e0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x298>
    f728:	e2466004 	sub	r6, r6, #4
    f72c:	e3560001 	cmp	r6, #1
    f730:	93a09001 	movls	r9, #1
    f734:	eaffff9b 	b	f5a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
    f738:	e2066003 	and	r6, r6, #3
    f73c:	e3560002 	cmp	r6, #2
    f740:	0a000014 	beq	f798 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x250>
    f744:	e59d3004 	ldr	r3, [sp, #4]
    f748:	e0060a93 	mul	r6, r3, sl
    f74c:	e08bb006 	add	fp, fp, r6
    f750:	eaffff94 	b	f5a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
    f754:	e3530004 	cmp	r3, #4
    f758:	1affff92 	bne	f5a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
    f75c:	e3560009 	cmp	r6, #9
    f760:	1affff90 	bne	f5a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
    f764:	e3590001 	cmp	r9, #1
    f768:	03a09002 	moveq	r9, #2
    f76c:	eaffff8d 	b	f5a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
    f770:	e3530044 	cmp	r3, #68	; 0x44
    f774:	e59d200c 	ldr	r2, [sp, #12]
    f778:	01a02006 	moveq	r2, r6
    f77c:	e58d200c 	str	r2, [sp, #12]
    f780:	eaffff88 	b	f5a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
    f784:	e3560039 	cmp	r6, #57	; 0x39
    f788:	1affff86 	bne	f5a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
    f78c:	e3590001 	cmp	r9, #1
    f790:	03a09004 	moveq	r9, #4
    f794:	eaffff83 	b	f5a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
    f798:	e3590003 	cmp	r9, #3
    f79c:	0a000012 	beq	f7ec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2a4>
    f7a0:	e3590004 	cmp	r9, #4
    f7a4:	0a00004e 	beq	f8e4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x39c>
    f7a8:	e59d3004 	ldr	r3, [sp, #4]
    f7ac:	e3590002 	cmp	r9, #2
    f7b0:	e0060a93 	mul	r6, r3, sl
    f7b4:	1affffe4 	bne	f74c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
    f7b8:	e59d2014 	ldr	r2, [sp, #20]
    f7bc:	e1a0100b 	mov	r1, fp
    f7c0:	e5823104 	str	r3, [r2, #260]	; 0x104
    f7c4:	e59d0000 	ldr	r0, [sp]
    f7c8:	e1a02006 	mov	r2, r6
    f7cc:	ebffff11 	bl	f418 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
    f7d0:	e59d2014 	ldr	r2, [sp, #20]
    f7d4:	e3a09001 	mov	r9, #1
    f7d8:	e5820108 	str	r0, [r2, #264]	; 0x108
    f7dc:	eaffffda 	b	f74c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
    f7e0:	e3590001 	cmp	r9, #1
    f7e4:	03a09003 	moveq	r9, #3
    f7e8:	eaffff6e 	b	f5a8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
    f7ec:	e59d3004 	ldr	r3, [sp, #4]
    f7f0:	e3530000 	cmp	r3, #0
    f7f4:	0a00006a 	beq	f9a4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x45c>
    f7f8:	e59d2018 	ldr	r2, [sp, #24]
    f7fc:	e59f01ac 	ldr	r0, [pc, #428]	; f9b0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x468>
    f800:	e59d1010 	ldr	r1, [sp, #16]
    f804:	e1520000 	cmp	r2, r0
    f808:	e1a03002 	mov	r3, r2
    f80c:	01a03001 	moveq	r3, r1
    f810:	e59fc198 	ldr	ip, [pc, #408]	; f9b0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x468>
    f814:	e59d1008 	ldr	r1, [sp, #8]
    f818:	e59d000c 	ldr	r0, [sp, #12]
    f81c:	e151000c 	cmp	r1, ip
    f820:	e1a02003 	mov	r2, r3
    f824:	e1a03001 	mov	r3, r1
    f828:	01a03000 	moveq	r3, r0
    f82c:	e1a01003 	mov	r1, r3
    f830:	e59d001c 	ldr	r0, [sp, #28]
    f834:	e59dc014 	ldr	ip, [sp, #20]
    f838:	e0806080 	add	r6, r0, r0, lsl #1
    f83c:	e58db01c 	str	fp, [sp, #28]
    f840:	e58d7024 	str	r7, [sp, #36]	; 0x24
    f844:	e58d5028 	str	r5, [sp, #40]	; 0x28
    f848:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    f84c:	e3a09000 	mov	r9, #0
    f850:	e1a0400b 	mov	r4, fp
    f854:	e08c6106 	add	r6, ip, r6, lsl #2
    f858:	e1a05000 	mov	r5, r0
    f85c:	e1a07002 	mov	r7, r2
    f860:	e1a0b001 	mov	fp, r1
    f864:	ea00000d 	b	f8a0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x358>
    f868:	ebfffeea 	bl	f418 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
    f86c:	e2899001 	add	r9, r9, #1
    f870:	e359000f 	cmp	r9, #15
    f874:	93a02000 	movls	r2, #0
    f878:	83a02001 	movhi	r2, #1
    f87c:	e59d3004 	ldr	r3, [sp, #4]
    f880:	e5860028 	str	r0, [r6, #40]	; 0x28
    f884:	e1530009 	cmp	r3, r9
    f888:	93822001 	orrls	r2, r2, #1
    f88c:	e3520000 	cmp	r2, #0
    f890:	e2855001 	add	r5, r5, #1
    f894:	e286600c 	add	r6, r6, #12
    f898:	e084400a 	add	r4, r4, sl
    f89c:	1a000008 	bne	f8c4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x37c>
    f8a0:	e3570000 	cmp	r7, #0
    f8a4:	e1a0200a 	mov	r2, sl
    f8a8:	e1a01004 	mov	r1, r4
    f8ac:	e586702c 	str	r7, [r6, #44]	; 0x2c
    f8b0:	e586b030 	str	fp, [r6, #48]	; 0x30
    f8b4:	e59d0000 	ldr	r0, [sp]
    f8b8:	aaffffea 	bge	f868 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x320>
    f8bc:	ebffff17 	bl	f520 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
    f8c0:	eaffffe9 	b	f86c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x324>
    f8c4:	e59db01c 	ldr	fp, [sp, #28]
    f8c8:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
    f8cc:	e58d501c 	str	r5, [sp, #28]
    f8d0:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
    f8d4:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    f8d8:	e0060a93 	mul	r6, r3, sl
    f8dc:	e3a09001 	mov	r9, #1
    f8e0:	eaffff99 	b	f74c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
    f8e4:	e59d2004 	ldr	r2, [sp, #4]
    f8e8:	e3520000 	cmp	r2, #0
    f8ec:	0a000029 	beq	f998 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x450>
    f8f0:	e59d1020 	ldr	r1, [sp, #32]
    f8f4:	e59d0014 	ldr	r0, [sp, #20]
    f8f8:	e281303b 	add	r3, r1, #59	; 0x3b
    f8fc:	e0803103 	add	r3, r0, r3, lsl #2
    f900:	e58d7024 	str	r7, [sp, #36]	; 0x24
    f904:	e58d5028 	str	r5, [sp, #40]	; 0x28
    f908:	e58d402c 	str	r4, [sp, #44]	; 0x2c
    f90c:	e3a06000 	mov	r6, #0
    f910:	e1a07001 	mov	r7, r1
    f914:	e1a04002 	mov	r4, r2
    f918:	e1a05003 	mov	r5, r3
    f91c:	e1a0900b 	mov	r9, fp
    f920:	e58db020 	str	fp, [sp, #32]
    f924:	e59db000 	ldr	fp, [sp]
    f928:	e1a0200a 	mov	r2, sl
    f92c:	e2866001 	add	r6, r6, #1
    f930:	e1a01009 	mov	r1, r9
    f934:	e1a0000b 	mov	r0, fp
    f938:	ebfffeb6 	bl	f418 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
    f93c:	e3560005 	cmp	r6, #5
    f940:	93a02000 	movls	r2, #0
    f944:	83a02001 	movhi	r2, #1
    f948:	e1540006 	cmp	r4, r6
    f94c:	93822001 	orrls	r2, r2, #1
    f950:	e3520000 	cmp	r2, #0
    f954:	e2877001 	add	r7, r7, #1
    f958:	e089900a 	add	r9, r9, sl
    f95c:	e4850004 	str	r0, [r5], #4
    f960:	0afffff0 	beq	f928 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3e0>
    f964:	e59d3004 	ldr	r3, [sp, #4]
    f968:	e59db020 	ldr	fp, [sp, #32]
    f96c:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
    f970:	e58d7020 	str	r7, [sp, #32]
    f974:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
    f978:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
    f97c:	e0060a93 	mul	r6, r3, sl
    f980:	e3a09001 	mov	r9, #1
    f984:	eaffff70 	b	f74c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
    f988:	e3a020a2 	mov	r2, #162	; 0xa2
    f98c:	e59f1020 	ldr	r1, [pc, #32]	; f9b4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x46c>
    f990:	e59f0020 	ldr	r0, [pc, #32]	; f9b8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x470>
    f994:	eb004f39 	bl	23680 <assertion_failed>
    f998:	e59d6004 	ldr	r6, [sp, #4]
    f99c:	e3a09001 	mov	r9, #1
    f9a0:	eaffff69 	b	f74c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
    f9a4:	e1a06008 	mov	r6, r8
    f9a8:	e3a09001 	mov	r9, #1
    f9ac:	eaffff66 	b	f74c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
    f9b0:	f8a432eb 	.word	0xf8a432eb
    f9b4:	00035ae8 	.word	0x00035ae8
    f9b8:	00035b00 	.word	0x00035b00

0000f9bc <CUSBGamePadStandardDevice::Configure()>:
    f9bc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f9c0:	e3a01021 	mov	r1, #33	; 0x21
    f9c4:	e24dd078 	sub	sp, sp, #120	; 0x78
    f9c8:	e1a04000 	mov	r4, r0
    f9cc:	ebfffa6e 	bl	e38c <CUSBFunction::GetDescriptor(unsigned char)>
    f9d0:	e2505000 	subs	r5, r0, #0
    f9d4:	0a000003 	beq	f9e8 <CUSBGamePadStandardDevice::Configure()+0x2c>
    f9d8:	e5d50007 	ldrb	r0, [r5, #7]
    f9dc:	e5d53008 	ldrb	r3, [r5, #8]
    f9e0:	e1900403 	orrs	r0, r0, r3, lsl #8
    f9e4:	1a000006 	bne	fa04 <CUSBGamePadStandardDevice::Configure()+0x48>
    f9e8:	e1a00004 	mov	r0, r4
    f9ec:	e59f1158 	ldr	r1, [pc, #344]	; fb4c <CUSBGamePadStandardDevice::Configure()+0x190>
    f9f0:	ebfffa70 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
    f9f4:	e3a05000 	mov	r5, #0
    f9f8:	e1a00005 	mov	r0, r5
    f9fc:	e28dd078 	add	sp, sp, #120	; 0x78
    fa00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fa04:	e2846f4e 	add	r6, r4, #312	; 0x138
    fa08:	e1c600b0 	strh	r0, [r6]
    fa0c:	eb006939 	bl	29ef8 <operator new[](unsigned int)>
    fa10:	e5840134 	str	r0, [r4, #308]	; 0x134
    fa14:	e1a00004 	mov	r0, r4
    fa18:	ebfffa50 	bl	e360 <CUSBFunction::GetHost() const>
    fa1c:	e1a07000 	mov	r7, r0
    fa20:	e1a00004 	mov	r0, r4
    fa24:	ebfffa42 	bl	e334 <CUSBFunction::GetEndpoint0() const>
    fa28:	e1a08000 	mov	r8, r0
    fa2c:	e1a00004 	mov	r0, r4
    fa30:	e5d55006 	ldrb	r5, [r5, #6]
    fa34:	e1d6a0b0 	ldrh	sl, [r6]
    fa38:	e5949134 	ldr	r9, [r4, #308]	; 0x134
    fa3c:	ebfffaa5 	bl	e4d8 <CUSBFunction::GetInterfaceNumber() const>
    fa40:	e3a03081 	mov	r3, #129	; 0x81
    fa44:	e6ff0070 	uxth	r0, r0
    fa48:	e58d000c 	str	r0, [sp, #12]
    fa4c:	e58d3008 	str	r3, [sp, #8]
    fa50:	e58da004 	str	sl, [sp, #4]
    fa54:	e3a03000 	mov	r3, #0
    fa58:	e58d9000 	str	r9, [sp]
    fa5c:	e1a02005 	mov	r2, r5
    fa60:	e1a01008 	mov	r1, r8
    fa64:	e1a00007 	mov	r0, r7
    fa68:	eb000640 	bl	11370 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    fa6c:	e1d630b0 	ldrh	r3, [r6]
    fa70:	e1500003 	cmp	r0, r3
    fa74:	0a000008 	beq	fa9c <CUSBGamePadStandardDevice::Configure()+0xe0>
    fa78:	e3a05000 	mov	r5, #0
    fa7c:	eb0057f2 	bl	25a4c <CLogger::Get()>
    fa80:	e59f30c8 	ldr	r3, [pc, #200]	; fb50 <CUSBGamePadStandardDevice::Configure()+0x194>
    fa84:	e3a02001 	mov	r2, #1
    fa88:	e59f10bc 	ldr	r1, [pc, #188]	; fb4c <CUSBGamePadStandardDevice::Configure()+0x190>
    fa8c:	eb00572b 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fa90:	e1a00005 	mov	r0, r5
    fa94:	e28dd078 	add	sp, sp, #120	; 0x78
    fa98:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fa9c:	e3a02064 	mov	r2, #100	; 0x64
    faa0:	e3a01000 	mov	r1, #0
    faa4:	e28d0014 	add	r0, sp, #20
    faa8:	eb0064c1 	bl	28db4 <memset>
    faac:	e5943000 	ldr	r3, [r4]
    fab0:	e28d1014 	add	r1, sp, #20
    fab4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
    fab8:	e1a00004 	mov	r0, r4
    fabc:	e12fff33 	blx	r3
    fac0:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    fac4:	e3530000 	cmp	r3, #0
    fac8:	1a000002 	bne	fad8 <CUSBGamePadStandardDevice::Configure()+0x11c>
    facc:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    fad0:	e3530000 	cmp	r3, #0
    fad4:	0a00000e 	beq	fb14 <CUSBGamePadStandardDevice::Configure()+0x158>
    fad8:	e2843f4a 	add	r3, r4, #296	; 0x128
    fadc:	e1d330b0 	ldrh	r3, [r3]
    fae0:	e3530000 	cmp	r3, #0
    fae4:	0a000014 	beq	fb3c <CUSBGamePadStandardDevice::Configure()+0x180>
    fae8:	e1a00004 	mov	r0, r4
    faec:	eb001c1d 	bl	16b68 <CUSBGamePadDevice::Configure()>
    faf0:	e2505000 	subs	r5, r0, #0
    faf4:	0a00000a 	beq	fb24 <CUSBGamePadStandardDevice::Configure()+0x168>
    faf8:	e5d43130 	ldrb	r3, [r4, #304]	; 0x130
    fafc:	e3530000 	cmp	r3, #0
    fb00:	0affffbc 	beq	f9f8 <CUSBGamePadStandardDevice::Configure()+0x3c>
    fb04:	e1a00004 	mov	r0, r4
    fb08:	eb000559 	bl	11074 <CUSBHIDDevice::StartRequest()>
    fb0c:	e1a05000 	mov	r5, r0
    fb10:	eaffffb8 	b	f9f8 <CUSBGamePadStandardDevice::Configure()+0x3c>
    fb14:	e5945104 	ldr	r5, [r4, #260]	; 0x104
    fb18:	e3550000 	cmp	r5, #0
    fb1c:	1affffed 	bne	fad8 <CUSBGamePadStandardDevice::Configure()+0x11c>
    fb20:	eaffffb4 	b	f9f8 <CUSBGamePadStandardDevice::Configure()+0x3c>
    fb24:	eb0057c8 	bl	25a4c <CLogger::Get()>
    fb28:	e59f3024 	ldr	r3, [pc, #36]	; fb54 <CUSBGamePadStandardDevice::Configure()+0x198>
    fb2c:	e3a02001 	mov	r2, #1
    fb30:	e59f1014 	ldr	r1, [pc, #20]	; fb4c <CUSBGamePadStandardDevice::Configure()+0x190>
    fb34:	eb005701 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fb38:	eaffffae 	b	f9f8 <CUSBGamePadStandardDevice::Configure()+0x3c>
    fb3c:	e3a02085 	mov	r2, #133	; 0x85
    fb40:	e59f1010 	ldr	r1, [pc, #16]	; fb58 <CUSBGamePadStandardDevice::Configure()+0x19c>
    fb44:	e59f0010 	ldr	r0, [pc, #16]	; fb5c <CUSBGamePadStandardDevice::Configure()+0x1a0>
    fb48:	eb004ecc 	bl	23680 <assertion_failed>
    fb4c:	00035adc 	.word	0x00035adc
    fb50:	00035b1c 	.word	0x00035b1c
    fb54:	00035960 	.word	0x00035960
    fb58:	00035ae8 	.word	0x00035ae8
    fb5c:	00035b40 	.word	0x00035b40

0000fb60 <CUSBGamePadDevice::GetProperties()>:
    fb60:	e3a00000 	mov	r0, #0
    fb64:	e12fff1e 	bx	lr

0000fb68 <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
    fb68:	e3a00000 	mov	r0, #0
    fb6c:	e12fff1e 	bx	lr

0000fb70 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
    fb70:	e3a00000 	mov	r0, #0
    fb74:	e12fff1e 	bx	lr

0000fb78 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
    fb78:	e92d4010 	push	{r4, lr}
    fb7c:	e1a04000 	mov	r4, r0
    fb80:	e59f300c 	ldr	r3, [pc, #12]	; fb94 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
    fb84:	e5803000 	str	r3, [r0]
    fb88:	eb001c33 	bl	16c5c <CUSBGamePadDevice::~CUSBGamePadDevice()>
    fb8c:	e1a00004 	mov	r0, r4
    fb90:	e8bd8010 	pop	{r4, pc}
    fb94:	00035b5c 	.word	0x00035b5c

0000fb98 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
    fb98:	e92d4010 	push	{r4, lr}
    fb9c:	e1a04000 	mov	r4, r0
    fba0:	e59f3018 	ldr	r3, [pc, #24]	; fbc0 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
    fba4:	e5803000 	str	r3, [r0]
    fba8:	eb001c2b 	bl	16c5c <CUSBGamePadDevice::~CUSBGamePadDevice()>
    fbac:	e1a00004 	mov	r0, r4
    fbb0:	e3a01f4d 	mov	r1, #308	; 0x134
    fbb4:	eb0068dc 	bl	29f2c <operator delete(void*, unsigned int)>
    fbb8:	e1a00004 	mov	r0, r4
    fbbc:	e8bd8010 	pop	{r4, pc}
    fbc0:	00035b5c 	.word	0x00035b5c

0000fbc4 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
    fbc4:	e5d13000 	ldrb	r3, [r1]
    fbc8:	e3530030 	cmp	r3, #48	; 0x30
    fbcc:	1a00005e 	bne	fd4c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x188>
    fbd0:	e3a02000 	mov	r2, #0
    fbd4:	e5d13003 	ldrb	r3, [r1, #3]
    fbd8:	e5802108 	str	r2, [r0, #264]	; 0x108
    fbdc:	e3130001 	tst	r3, #1
    fbe0:	13a02080 	movne	r2, #128	; 0x80
    fbe4:	15802108 	strne	r2, [r0, #264]	; 0x108
    fbe8:	e3130002 	tst	r3, #2
    fbec:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    fbf0:	13822b01 	orrne	r2, r2, #1024	; 0x400
    fbf4:	15802108 	strne	r2, [r0, #264]	; 0x108
    fbf8:	e3130004 	tst	r3, #4
    fbfc:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    fc00:	13822c01 	orrne	r2, r2, #256	; 0x100
    fc04:	15802108 	strne	r2, [r0, #264]	; 0x108
    fc08:	e3130008 	tst	r3, #8
    fc0c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    fc10:	13822c02 	orrne	r2, r2, #512	; 0x200
    fc14:	15802108 	strne	r2, [r0, #264]	; 0x108
    fc18:	e3130040 	tst	r3, #64	; 0x40
    fc1c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    fc20:	13822040 	orrne	r2, r2, #64	; 0x40
    fc24:	15802108 	strne	r2, [r0, #264]	; 0x108
    fc28:	e3130080 	tst	r3, #128	; 0x80
    fc2c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    fc30:	13833010 	orrne	r3, r3, #16
    fc34:	15803108 	strne	r3, [r0, #264]	; 0x108
    fc38:	e5d13004 	ldrb	r3, [r1, #4]
    fc3c:	e3130001 	tst	r3, #1
    fc40:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    fc44:	13822702 	orrne	r2, r2, #524288	; 0x80000
    fc48:	15802108 	strne	r2, [r0, #264]	; 0x108
    fc4c:	e3130002 	tst	r3, #2
    fc50:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    fc54:	13822601 	orrne	r2, r2, #1048576	; 0x100000
    fc58:	15802108 	strne	r2, [r0, #264]	; 0x108
    fc5c:	e3130004 	tst	r3, #4
    fc60:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    fc64:	13822a02 	orrne	r2, r2, #8192	; 0x2000
    fc68:	15802108 	strne	r2, [r0, #264]	; 0x108
    fc6c:	e3130008 	tst	r3, #8
    fc70:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    fc74:	13822a01 	orrne	r2, r2, #4096	; 0x1000
    fc78:	15802108 	strne	r2, [r0, #264]	; 0x108
    fc7c:	e3130010 	tst	r3, #16
    fc80:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    fc84:	13822001 	orrne	r2, r2, #1
    fc88:	15802108 	strne	r2, [r0, #264]	; 0x108
    fc8c:	e3130020 	tst	r3, #32
    fc90:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    fc94:	13833b02 	orrne	r3, r3, #2048	; 0x800
    fc98:	15803108 	strne	r3, [r0, #264]	; 0x108
    fc9c:	e5d13005 	ldrb	r3, [r1, #5]
    fca0:	e3130001 	tst	r3, #1
    fca4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    fca8:	13822802 	orrne	r2, r2, #131072	; 0x20000
    fcac:	15802108 	strne	r2, [r0, #264]	; 0x108
    fcb0:	e3130002 	tst	r3, #2
    fcb4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    fcb8:	13822902 	orrne	r2, r2, #32768	; 0x8000
    fcbc:	15802108 	strne	r2, [r0, #264]	; 0x108
    fcc0:	e3130004 	tst	r3, #4
    fcc4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    fcc8:	13822801 	orrne	r2, r2, #65536	; 0x10000
    fccc:	15802108 	strne	r2, [r0, #264]	; 0x108
    fcd0:	e3130008 	tst	r3, #8
    fcd4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    fcd8:	13822701 	orrne	r2, r2, #262144	; 0x40000
    fcdc:	15802108 	strne	r2, [r0, #264]	; 0x108
    fce0:	e3130040 	tst	r3, #64	; 0x40
    fce4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
    fce8:	13822020 	orrne	r2, r2, #32
    fcec:	15802108 	strne	r2, [r0, #264]	; 0x108
    fcf0:	e3130080 	tst	r3, #128	; 0x80
    fcf4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
    fcf8:	13833008 	orrne	r3, r3, #8
    fcfc:	15803108 	strne	r3, [r0, #264]	; 0x108
    fd00:	e5d12007 	ldrb	r2, [r1, #7]
    fd04:	e5d13006 	ldrb	r3, [r1, #6]
    fd08:	e1833402 	orr	r3, r3, r2, lsl #8
    fd0c:	e1a03243 	asr	r3, r3, #4
    fd10:	e6ef3073 	uxtb	r3, r3
    fd14:	e5803028 	str	r3, [r0, #40]	; 0x28
    fd18:	e5d13008 	ldrb	r3, [r1, #8]
    fd1c:	e26330ff 	rsb	r3, r3, #255	; 0xff
    fd20:	e5803034 	str	r3, [r0, #52]	; 0x34
    fd24:	e5d13009 	ldrb	r3, [r1, #9]
    fd28:	e5d1200a 	ldrb	r2, [r1, #10]
    fd2c:	e1833402 	orr	r3, r3, r2, lsl #8
    fd30:	e1a03243 	asr	r3, r3, #4
    fd34:	e6ef3073 	uxtb	r3, r3
    fd38:	e5803040 	str	r3, [r0, #64]	; 0x40
    fd3c:	e5d1300b 	ldrb	r3, [r1, #11]
    fd40:	e26330ff 	rsb	r3, r3, #255	; 0xff
    fd44:	e580304c 	str	r3, [r0, #76]	; 0x4c
    fd48:	e12fff1e 	bx	lr
    fd4c:	e92d4010 	push	{r4, lr}
    fd50:	e1a04001 	mov	r4, r1
    fd54:	e24dd008 	sub	sp, sp, #8
    fd58:	eb00573b 	bl	25a4c <CLogger::Get()>
    fd5c:	e5d42000 	ldrb	r2, [r4]
    fd60:	e59f3014 	ldr	r3, [pc, #20]	; fd7c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1b8>
    fd64:	e58d2000 	str	r2, [sp]
    fd68:	e59f1010 	ldr	r1, [pc, #16]	; fd80 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1bc>
    fd6c:	e3a02003 	mov	r2, #3
    fd70:	eb005672 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fd74:	e28dd008 	add	sp, sp, #8
    fd78:	e8bd8010 	pop	{r4, pc}
    fd7c:	00035bc8 	.word	0x00035bc8
    fd80:	00035ba0 	.word	0x00035ba0

0000fd84 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
    fd84:	e92d4070 	push	{r4, r5, r6, lr}
    fd88:	e1a05000 	mov	r5, r0
    fd8c:	e1a06001 	mov	r6, r1
    fd90:	e5d03131 	ldrb	r3, [r0, #305]	; 0x131
    fd94:	e24dd010 	sub	sp, sp, #16
    fd98:	e59f4058 	ldr	r4, [pc, #88]	; fdf8 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x74>
    fd9c:	e2832001 	add	r2, r3, #1
    fda0:	e28de004 	add	lr, sp, #4
    fda4:	e203c00f 	and	ip, r3, #15
    fda8:	e5c02131 	strb	r2, [r0, #305]	; 0x131
    fdac:	e3a03000 	mov	r3, #0
    fdb0:	e8940007 	ldm	r4, {r0, r1, r2}
    fdb4:	e88e0007 	stm	lr, {r0, r1, r2}
    fdb8:	e1a00005 	mov	r0, r5
    fdbc:	e1a0100e 	mov	r1, lr
    fdc0:	e3a0200c 	mov	r2, #12
    fdc4:	e5cdc005 	strb	ip, [sp, #5]
    fdc8:	e5cd600f 	strb	r6, [sp, #15]
    fdcc:	eb00041e 	bl	10e4c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
    fdd0:	e2505000 	subs	r5, r0, #0
    fdd4:	1a000004 	bne	fdec <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x68>
    fdd8:	eb00571b 	bl	25a4c <CLogger::Get()>
    fddc:	e2441010 	sub	r1, r4, #16
    fde0:	e59f3014 	ldr	r3, [pc, #20]	; fdfc <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x78>
    fde4:	e3a02001 	mov	r2, #1
    fde8:	eb005654 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fdec:	e1a00005 	mov	r0, r5
    fdf0:	e28dd010 	add	sp, sp, #16
    fdf4:	e8bd8070 	pop	{r4, r5, r6, pc}
    fdf8:	00035bb0 	.word	0x00035bb0
    fdfc:	00035be4 	.word	0x00035be4

0000fe00 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
    fe00:	e92d4010 	push	{r4, lr}
    fe04:	e1a0e001 	mov	lr, r1
    fe08:	e24dd010 	sub	sp, sp, #16
    fe0c:	e59f20cc 	ldr	r2, [pc, #204]	; fee0 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe0>
    fe10:	e28d3004 	add	r3, sp, #4
    fe14:	e1a0c000 	mov	ip, r0
    fe18:	e8920007 	ldm	r2, {r0, r1, r2}
    fe1c:	e8a30003 	stmia	r3!, {r0, r1}
    fe20:	e35e0001 	cmp	lr, #1
    fe24:	e1c320b0 	strh	r2, [r3]
    fe28:	0a000023 	beq	febc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xbc>
    fe2c:	3a000007 	bcc	fe50 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
    fe30:	e35e0002 	cmp	lr, #2
    fe34:	1a00001c 	bne	feac <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xac>
    fe38:	e3a01020 	mov	r1, #32
    fe3c:	e3a02062 	mov	r2, #98	; 0x62
    fe40:	e3e03000 	mvn	r3, #0
    fe44:	e5cd1007 	strb	r1, [sp, #7]
    fe48:	e5cd2008 	strb	r2, [sp, #8]
    fe4c:	e5cd3009 	strb	r3, [sp, #9]
    fe50:	e5dc3131 	ldrb	r3, [ip, #305]	; 0x131
    fe54:	e1a0000c 	mov	r0, ip
    fe58:	e2832001 	add	r2, r3, #1
    fe5c:	e5cc2131 	strb	r2, [ip, #305]	; 0x131
    fe60:	e28d1004 	add	r1, sp, #4
    fe64:	e203c00f 	and	ip, r3, #15
    fe68:	e3a0200a 	mov	r2, #10
    fe6c:	e3a03000 	mov	r3, #0
    fe70:	e5cdc005 	strb	ip, [sp, #5]
    fe74:	eb0003f4 	bl	10e4c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
    fe78:	e2504000 	subs	r4, r0, #0
    fe7c:	0a000002 	beq	fe8c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
    fe80:	e1a00004 	mov	r0, r4
    fe84:	e28dd010 	add	sp, sp, #16
    fe88:	e8bd8010 	pop	{r4, pc}
    fe8c:	eb0056ee 	bl	25a4c <CLogger::Get()>
    fe90:	e59f304c 	ldr	r3, [pc, #76]	; fee4 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe4>
    fe94:	e3a02001 	mov	r2, #1
    fe98:	e59f1048 	ldr	r1, [pc, #72]	; fee8 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe8>
    fe9c:	eb005627 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fea0:	e1a00004 	mov	r0, r4
    fea4:	e28dd010 	add	sp, sp, #16
    fea8:	e8bd8010 	pop	{r4, pc}
    feac:	e3a04001 	mov	r4, #1
    feb0:	e1a00004 	mov	r0, r4
    feb4:	e28dd010 	add	sp, sp, #16
    feb8:	e8bd8010 	pop	{r4, pc}
    febc:	e3e00067 	mvn	r0, #103	; 0x67
    fec0:	e3a01020 	mov	r1, #32
    fec4:	e3a02062 	mov	r2, #98	; 0x62
    fec8:	e3e03000 	mvn	r3, #0
    fecc:	e5cd000a 	strb	r0, [sp, #10]
    fed0:	e5cd100b 	strb	r1, [sp, #11]
    fed4:	e5cd200c 	strb	r2, [sp, #12]
    fed8:	e5cd300d 	strb	r3, [sp, #13]
    fedc:	eaffffdb 	b	fe50 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
    fee0:	00035bbc 	.word	0x00035bbc
    fee4:	00035bf8 	.word	0x00035bf8
    fee8:	00035ba0 	.word	0x00035ba0

0000feec <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
    feec:	e92d4010 	push	{r4, lr}
    fef0:	e1a04000 	mov	r4, r0
    fef4:	eb001b46 	bl	16c14 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
    fef8:	e3a03000 	mov	r3, #0
    fefc:	e59f2024 	ldr	r2, [pc, #36]	; ff28 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
    ff00:	e1a00004 	mov	r0, r4
    ff04:	e5842000 	str	r2, [r4]
    ff08:	e3a01003 	mov	r1, #3
    ff0c:	e1a02003 	mov	r2, r3
    ff10:	ebfff93b 	bl	e404 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
    ff14:	e3a03000 	mov	r3, #0
    ff18:	e5c40130 	strb	r0, [r4, #304]	; 0x130
    ff1c:	e5c43131 	strb	r3, [r4, #305]	; 0x131
    ff20:	e1a00004 	mov	r0, r4
    ff24:	e8bd8010 	pop	{r4, pc}
    ff28:	00035b5c 	.word	0x00035b5c

0000ff2c <CUSBGamePadSwitchProDevice::Configure()>:
    ff2c:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    ff30:	e28db01c 	add	fp, sp, #28
    ff34:	e24dd010 	sub	sp, sp, #16
    ff38:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
    ff3c:	e3550000 	cmp	r5, #0
    ff40:	0a00003e 	beq	10040 <CUSBGamePadSwitchProDevice::Configure()+0x114>
    ff44:	e3a03040 	mov	r3, #64	; 0x40
    ff48:	e2807f4a 	add	r7, r0, #296	; 0x128
    ff4c:	e1c730b0 	strh	r3, [r7]
    ff50:	e1a04000 	mov	r4, r0
    ff54:	eb001b03 	bl	16b68 <CUSBGamePadDevice::Configure()>
    ff58:	e2505000 	subs	r5, r0, #0
    ff5c:	0a00003c 	beq	10054 <CUSBGamePadSwitchProDevice::Configure()+0x128>
    ff60:	e3a03012 	mov	r3, #18
    ff64:	e3a06000 	mov	r6, #0
    ff68:	e3a000ff 	mov	r0, #255	; 0xff
    ff6c:	e3a0c004 	mov	ip, #4
    ff70:	e1d720b0 	ldrh	r2, [r7]
    ff74:	e5843104 	str	r3, [r4, #260]	; 0x104
    ff78:	e2823007 	add	r3, r2, #7
    ff7c:	e3c33007 	bic	r3, r3, #7
    ff80:	e04dd003 	sub	sp, sp, r3
    ff84:	e1a0100d 	mov	r1, sp
    ff88:	e1a03006 	mov	r3, r6
    ff8c:	e584c024 	str	ip, [r4, #36]	; 0x24
    ff90:	e5840030 	str	r0, [r4, #48]	; 0x30
    ff94:	e584003c 	str	r0, [r4, #60]	; 0x3c
    ff98:	e5840048 	str	r0, [r4, #72]	; 0x48
    ff9c:	e5840054 	str	r0, [r4, #84]	; 0x54
    ffa0:	e58460e8 	str	r6, [r4, #232]	; 0xe8
    ffa4:	e584602c 	str	r6, [r4, #44]	; 0x2c
    ffa8:	e5846038 	str	r6, [r4, #56]	; 0x38
    ffac:	e5846044 	str	r6, [r4, #68]	; 0x44
    ffb0:	e5846050 	str	r6, [r4, #80]	; 0x50
    ffb4:	e1a00004 	mov	r0, r4
    ffb8:	eb000400 	bl	10fc0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
    ffbc:	e3e0807f 	mvn	r8, #127	; 0x7f
    ffc0:	e3a0c003 	mov	ip, #3
    ffc4:	e1a03006 	mov	r3, r6
    ffc8:	e3a02002 	mov	r2, #2
    ffcc:	e24b1028 	sub	r1, fp, #40	; 0x28
    ffd0:	e1a00004 	mov	r0, r4
    ffd4:	e54b8028 	strb	r8, [fp, #-40]	; 0xffffffd8
    ffd8:	e54bc027 	strb	ip, [fp, #-39]	; 0xffffffd9
    ffdc:	eb00039a 	bl	10e4c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
    ffe0:	e2505000 	subs	r5, r0, #0
    ffe4:	0a000022 	beq	10074 <CUSBGamePadSwitchProDevice::Configure()+0x148>
    ffe8:	e1a03006 	mov	r3, r6
    ffec:	e1d720b0 	ldrh	r2, [r7]
    fff0:	e1a0100d 	mov	r1, sp
    fff4:	e1a00004 	mov	r0, r4
    fff8:	eb0003f0 	bl	10fc0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
    fffc:	e3500000 	cmp	r0, #0
   10000:	da000041 	ble	1010c <CUSBGamePadSwitchProDevice::Configure()+0x1e0>
   10004:	e5dd3000 	ldrb	r3, [sp]
   10008:	e3530081 	cmp	r3, #129	; 0x81
   1000c:	1a000002 	bne	1001c <CUSBGamePadSwitchProDevice::Configure()+0xf0>
   10010:	e5dd3001 	ldrb	r3, [sp, #1]
   10014:	e3530003 	cmp	r3, #3
   10018:	0a00001d 	beq	10094 <CUSBGamePadSwitchProDevice::Configure()+0x168>
   1001c:	eb00568a 	bl	25a4c <CLogger::Get()>
   10020:	e59f31d0 	ldr	r3, [pc, #464]	; 101f8 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   10024:	e3a02001 	mov	r2, #1
   10028:	e59f11cc 	ldr	r1, [pc, #460]	; 101fc <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   1002c:	eb0055c3 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10030:	e3a05000 	mov	r5, #0
   10034:	e1a00005 	mov	r0, r5
   10038:	e24bd01c 	sub	sp, fp, #28
   1003c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10040:	e59f11b4 	ldr	r1, [pc, #436]	; 101fc <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10044:	ebfff8db 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   10048:	e1a00005 	mov	r0, r5
   1004c:	e24bd01c 	sub	sp, fp, #28
   10050:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10054:	eb00567c 	bl	25a4c <CLogger::Get()>
   10058:	e59f31a0 	ldr	r3, [pc, #416]	; 10200 <CUSBGamePadSwitchProDevice::Configure()+0x2d4>
   1005c:	e3a02001 	mov	r2, #1
   10060:	e59f1194 	ldr	r1, [pc, #404]	; 101fc <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10064:	eb0055b5 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10068:	e1a00005 	mov	r0, r5
   1006c:	e24bd01c 	sub	sp, fp, #28
   10070:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10074:	eb005674 	bl	25a4c <CLogger::Get()>
   10078:	e59f3178 	ldr	r3, [pc, #376]	; 101f8 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   1007c:	e3a02001 	mov	r2, #1
   10080:	e59f1174 	ldr	r1, [pc, #372]	; 101fc <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10084:	eb0055ad 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10088:	e1a00005 	mov	r0, r5
   1008c:	e24bd01c 	sub	sp, fp, #28
   10090:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10094:	e3a0c002 	mov	ip, #2
   10098:	e1a03006 	mov	r3, r6
   1009c:	e1a0200c 	mov	r2, ip
   100a0:	e24b1024 	sub	r1, fp, #36	; 0x24
   100a4:	e1a00004 	mov	r0, r4
   100a8:	e54b8024 	strb	r8, [fp, #-36]	; 0xffffffdc
   100ac:	e54bc023 	strb	ip, [fp, #-35]	; 0xffffffdd
   100b0:	eb000365 	bl	10e4c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   100b4:	e2505000 	subs	r5, r0, #0
   100b8:	0a00001a 	beq	10128 <CUSBGamePadSwitchProDevice::Configure()+0x1fc>
   100bc:	e1a03006 	mov	r3, r6
   100c0:	e1d720b0 	ldrh	r2, [r7]
   100c4:	e1a0100d 	mov	r1, sp
   100c8:	e1a00004 	mov	r0, r4
   100cc:	eb0003bb 	bl	10fc0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   100d0:	e3500000 	cmp	r0, #0
   100d4:	da000034 	ble	101ac <CUSBGamePadSwitchProDevice::Configure()+0x280>
   100d8:	e5dd3000 	ldrb	r3, [sp]
   100dc:	e3530081 	cmp	r3, #129	; 0x81
   100e0:	1a000002 	bne	100f0 <CUSBGamePadSwitchProDevice::Configure()+0x1c4>
   100e4:	e5dd3001 	ldrb	r3, [sp, #1]
   100e8:	e3530002 	cmp	r3, #2
   100ec:	0a000013 	beq	10140 <CUSBGamePadSwitchProDevice::Configure()+0x214>
   100f0:	eb005655 	bl	25a4c <CLogger::Get()>
   100f4:	e59f3108 	ldr	r3, [pc, #264]	; 10204 <CUSBGamePadSwitchProDevice::Configure()+0x2d8>
   100f8:	e3a02001 	mov	r2, #1
   100fc:	e59f10f8 	ldr	r1, [pc, #248]	; 101fc <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10100:	eb00558e 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10104:	e3a05000 	mov	r5, #0
   10108:	eaffffc9 	b	10034 <CUSBGamePadSwitchProDevice::Configure()+0x108>
   1010c:	eb00564e 	bl	25a4c <CLogger::Get()>
   10110:	e59f30f0 	ldr	r3, [pc, #240]	; 10208 <CUSBGamePadSwitchProDevice::Configure()+0x2dc>
   10114:	e3a02001 	mov	r2, #1
   10118:	e59f10dc 	ldr	r1, [pc, #220]	; 101fc <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   1011c:	e1a05006 	mov	r5, r6
   10120:	eb005586 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10124:	eaffffc2 	b	10034 <CUSBGamePadSwitchProDevice::Configure()+0x108>
   10128:	eb005647 	bl	25a4c <CLogger::Get()>
   1012c:	e59f30d0 	ldr	r3, [pc, #208]	; 10204 <CUSBGamePadSwitchProDevice::Configure()+0x2d8>
   10130:	e3a02001 	mov	r2, #1
   10134:	e59f10c0 	ldr	r1, [pc, #192]	; 101fc <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   10138:	eb005580 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1013c:	eaffffbc 	b	10034 <CUSBGamePadSwitchProDevice::Configure()+0x108>
   10140:	e3e0e07f 	mvn	lr, #127	; 0x7f
   10144:	e3a0c004 	mov	ip, #4
   10148:	e3a03000 	mov	r3, #0
   1014c:	e3a02002 	mov	r2, #2
   10150:	e24b1020 	sub	r1, fp, #32
   10154:	e1a00004 	mov	r0, r4
   10158:	e54be020 	strb	lr, [fp, #-32]	; 0xffffffe0
   1015c:	e54bc01f 	strb	ip, [fp, #-31]	; 0xffffffe1
   10160:	eb000339 	bl	10e4c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   10164:	e2505000 	subs	r5, r0, #0
   10168:	0a000016 	beq	101c8 <CUSBGamePadSwitchProDevice::Configure()+0x29c>
   1016c:	e5943000 	ldr	r3, [r4]
   10170:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   10174:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   10178:	e1a00004 	mov	r0, r4
   1017c:	e12fff33 	blx	r3
   10180:	e1d720b0 	ldrh	r2, [r7]
   10184:	e1a0100d 	mov	r1, sp
   10188:	e3a03000 	mov	r3, #0
   1018c:	e1a00004 	mov	r0, r4
   10190:	eb00038a 	bl	10fc0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   10194:	e3500000 	cmp	r0, #0
   10198:	da000010 	ble	101e0 <CUSBGamePadSwitchProDevice::Configure()+0x2b4>
   1019c:	e1a00004 	mov	r0, r4
   101a0:	eb0003b3 	bl	11074 <CUSBHIDDevice::StartRequest()>
   101a4:	e1a05000 	mov	r5, r0
   101a8:	eaffffa1 	b	10034 <CUSBGamePadSwitchProDevice::Configure()+0x108>
   101ac:	eb005626 	bl	25a4c <CLogger::Get()>
   101b0:	e59f3054 	ldr	r3, [pc, #84]	; 1020c <CUSBGamePadSwitchProDevice::Configure()+0x2e0>
   101b4:	e3a02001 	mov	r2, #1
   101b8:	e59f103c 	ldr	r1, [pc, #60]	; 101fc <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   101bc:	e1a05006 	mov	r5, r6
   101c0:	eb00555e 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   101c4:	eaffff9a 	b	10034 <CUSBGamePadSwitchProDevice::Configure()+0x108>
   101c8:	eb00561f 	bl	25a4c <CLogger::Get()>
   101cc:	e59f303c 	ldr	r3, [pc, #60]	; 10210 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   101d0:	e3a02001 	mov	r2, #1
   101d4:	e59f1020 	ldr	r1, [pc, #32]	; 101fc <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   101d8:	eb005558 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   101dc:	eaffff94 	b	10034 <CUSBGamePadSwitchProDevice::Configure()+0x108>
   101e0:	eb005619 	bl	25a4c <CLogger::Get()>
   101e4:	e59f3028 	ldr	r3, [pc, #40]	; 10214 <CUSBGamePadSwitchProDevice::Configure()+0x2e8>
   101e8:	e3a02001 	mov	r2, #1
   101ec:	e59f1008 	ldr	r1, [pc, #8]	; 101fc <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   101f0:	eb005552 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   101f4:	eaffffe8 	b	1019c <CUSBGamePadSwitchProDevice::Configure()+0x270>
   101f8:	00035c10 	.word	0x00035c10
   101fc:	00035ba0 	.word	0x00035ba0
   10200:	00035960 	.word	0x00035960
   10204:	00035c50 	.word	0x00035c50
   10208:	00035c30 	.word	0x00035c30
   1020c:	00035c6c 	.word	0x00035c6c
   10210:	00035c88 	.word	0x00035c88
   10214:	00035ca8 	.word	0x00035ca8

00010218 <CUSBGamePadSwitchProDevice::GetProperties()>:
   10218:	e3a0004b 	mov	r0, #75	; 0x4b
   1021c:	e12fff1e 	bx	lr

00010220 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   10220:	e92d4010 	push	{r4, lr}
   10224:	e1a04000 	mov	r4, r0
   10228:	e59f300c 	ldr	r3, [pc, #12]	; 1023c <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   1022c:	e5803000 	str	r3, [r0]
   10230:	eb001a89 	bl	16c5c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10234:	e1a00004 	mov	r0, r4
   10238:	e8bd8010 	pop	{r4, pc}
   1023c:	00035ccc 	.word	0x00035ccc

00010240 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   10240:	e92d4010 	push	{r4, lr}
   10244:	e1a04000 	mov	r4, r0
   10248:	e59f3018 	ldr	r3, [pc, #24]	; 10268 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   1024c:	e5803000 	str	r3, [r0]
   10250:	eb001a81 	bl	16c5c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10254:	e1a00004 	mov	r0, r4
   10258:	e3a01e13 	mov	r1, #304	; 0x130
   1025c:	eb006732 	bl	29f2c <operator delete(void*, unsigned int)>
   10260:	e1a00004 	mov	r0, r4
   10264:	e8bd8010 	pop	{r4, pc}
   10268:	00035ccc 	.word	0x00035ccc

0001026c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   1026c:	e3510000 	cmp	r1, #0
   10270:	e92d4010 	push	{r4, lr}
   10274:	0a00003b 	beq	10368 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xfc>
   10278:	e5d13000 	ldrb	r3, [r1]
   1027c:	e5d12001 	ldrb	r2, [r1, #1]
   10280:	e1833402 	orr	r3, r3, r2, lsl #8
   10284:	e3530b05 	cmp	r3, #5120	; 0x1400
   10288:	1a00003a 	bne	10378 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x10c>
   1028c:	e3a0e000 	mov	lr, #0
   10290:	e5d1c003 	ldrb	ip, [r1, #3]
   10294:	e5d12002 	ldrb	r2, [r1, #2]
   10298:	e59f30e8 	ldr	r3, [pc, #232]	; 10388 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x11c>
   1029c:	e182240c 	orr	r2, r2, ip, lsl #8
   102a0:	e580e108 	str	lr, [r0, #264]	; 0x108
   102a4:	e283c040 	add	ip, r3, #64	; 0x40
   102a8:	e3120001 	tst	r2, #1
   102ac:	15934000 	ldrne	r4, [r3]
   102b0:	1590e108 	ldrne	lr, [r0, #264]	; 0x108
   102b4:	e2833004 	add	r3, r3, #4
   102b8:	118ee004 	orrne	lr, lr, r4
   102bc:	1580e108 	strne	lr, [r0, #264]	; 0x108
   102c0:	e15c0003 	cmp	ip, r3
   102c4:	e1a020a2 	lsr	r2, r2, #1
   102c8:	1afffff6 	bne	102a8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x3c>
   102cc:	e3a0e000 	mov	lr, #0
   102d0:	e1a0200e 	mov	r2, lr
   102d4:	e5d13006 	ldrb	r3, [r1, #6]
   102d8:	e5d14007 	ldrb	r4, [r1, #7]
   102dc:	e1833404 	orr	r3, r3, r4, lsl #8
   102e0:	e6bf3073 	sxth	r3, r3
   102e4:	e2833902 	add	r3, r3, #32768	; 0x8000
   102e8:	e1a03423 	lsr	r3, r3, #8
   102ec:	e0822082 	add	r2, r2, r2, lsl #1
   102f0:	e28ee001 	add	lr, lr, #1
   102f4:	e0802102 	add	r2, r0, r2, lsl #2
   102f8:	e35e0004 	cmp	lr, #4
   102fc:	e5823028 	str	r3, [r2, #40]	; 0x28
   10300:	0a00000b 	beq	10334 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xc8>
   10304:	e081208e 	add	r2, r1, lr, lsl #1
   10308:	e5d24007 	ldrb	r4, [r2, #7]
   1030c:	e5d23006 	ldrb	r3, [r2, #6]
   10310:	e79c210e 	ldr	r2, [ip, lr, lsl #2]
   10314:	e1833404 	orr	r3, r3, r4, lsl #8
   10318:	e6bf3073 	sxth	r3, r3
   1031c:	e3c24002 	bic	r4, r2, #2
   10320:	e2833902 	add	r3, r3, #32768	; 0x8000
   10324:	e3540001 	cmp	r4, #1
   10328:	e1a03423 	lsr	r3, r3, #8
   1032c:	026330ff 	rsbeq	r3, r3, #255	; 0xff
   10330:	eaffffed 	b	102ec <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x80>
   10334:	e5d13004 	ldrb	r3, [r1, #4]
   10338:	e353007f 	cmp	r3, #127	; 0x7f
   1033c:	e5803058 	str	r3, [r0, #88]	; 0x58
   10340:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   10344:	c3833008 	orrgt	r3, r3, #8
   10348:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   1034c:	e5d13005 	ldrb	r3, [r1, #5]
   10350:	e353007f 	cmp	r3, #127	; 0x7f
   10354:	e5803064 	str	r3, [r0, #100]	; 0x64
   10358:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   1035c:	c3833010 	orrgt	r3, r3, #16
   10360:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   10364:	e8bd8010 	pop	{r4, pc}
   10368:	e3a02077 	mov	r2, #119	; 0x77
   1036c:	e59f1018 	ldr	r1, [pc, #24]	; 1038c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x120>
   10370:	e59f0018 	ldr	r0, [pc, #24]	; 10390 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x124>
   10374:	eb004cc1 	bl	23680 <assertion_failed>
   10378:	e3a02078 	mov	r2, #120	; 0x78
   1037c:	e59f1008 	ldr	r1, [pc, #8]	; 1038c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x120>
   10380:	e59f000c 	ldr	r0, [pc, #12]	; 10394 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x128>
   10384:	eb004cbd 	bl	23680 <assertion_failed>
   10388:	00035d10 	.word	0x00035d10
   1038c:	00035d80 	.word	0x00035d80
   10390:	000359bc 	.word	0x000359bc
   10394:	00035d98 	.word	0x00035d98

00010398 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   10398:	e2913000 	adds	r3, r1, #0
   1039c:	13a03001 	movne	r3, #1
   103a0:	e352000e 	cmp	r2, #14
   103a4:	13a03000 	movne	r3, #0
   103a8:	e2532000 	subs	r2, r3, #0
   103ac:	012fff1e 	bxeq	lr
   103b0:	e5d1c000 	ldrb	ip, [r1]
   103b4:	e35c0000 	cmp	ip, #0
   103b8:	112fff1e 	bxne	lr
   103bc:	e5d13001 	ldrb	r3, [r1, #1]
   103c0:	e3530014 	cmp	r3, #20
   103c4:	112fff1e 	bxne	lr
   103c8:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   103cc:	e92d4070 	push	{r4, r5, r6, lr}
   103d0:	e3530000 	cmp	r3, #0
   103d4:	e1a04000 	mov	r4, r0
   103d8:	08bd8070 	popeq	{r4, r5, r6, pc}
   103dc:	e1a05000 	mov	r5, r0
   103e0:	e4953024 	ldr	r3, [r5], #36	; 0x24
   103e4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   103e8:	e12fff33 	blx	r3
   103ec:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   103f0:	e1a01005 	mov	r1, r5
   103f4:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   103f8:	e2400001 	sub	r0, r0, #1
   103fc:	e8bd4070 	pop	{r4, r5, r6, lr}
   10400:	e12fff13 	bx	r3

00010404 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   10404:	e3510004 	cmp	r1, #4
   10408:	9a000001 	bls	10414 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x10>
   1040c:	e3a00000 	mov	r0, #0
   10410:	e12fff1e 	bx	lr
   10414:	e3a0c003 	mov	ip, #3
   10418:	e92d4010 	push	{r4, lr}
   1041c:	e3a0e001 	mov	lr, #1
   10420:	e59f302c 	ldr	r3, [pc, #44]	; 10454 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x50>
   10424:	e24dd008 	sub	sp, sp, #8
   10428:	e0831001 	add	r1, r3, r1
   1042c:	e5d140a4 	ldrb	r4, [r1, #164]	; 0xa4
   10430:	e1a0200c 	mov	r2, ip
   10434:	e3a03000 	mov	r3, #0
   10438:	e28d1004 	add	r1, sp, #4
   1043c:	e5cd4006 	strb	r4, [sp, #6]
   10440:	e5cdc005 	strb	ip, [sp, #5]
   10444:	e5cde004 	strb	lr, [sp, #4]
   10448:	eb00027f 	bl	10e4c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1044c:	e28dd008 	add	sp, sp, #8
   10450:	e8bd8010 	pop	{r4, pc}
   10454:	00035cc4 	.word	0x00035cc4

00010458 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   10458:	e92d4030 	push	{r4, r5, lr}
   1045c:	e24dd00c 	sub	sp, sp, #12
   10460:	e1a04001 	mov	r4, r1
   10464:	e1a05000 	mov	r5, r0
   10468:	e3a02008 	mov	r2, #8
   1046c:	e1a0000d 	mov	r0, sp
   10470:	e3a01000 	mov	r1, #0
   10474:	eb00624e 	bl	28db4 <memset>
   10478:	e3a03008 	mov	r3, #8
   1047c:	e3540001 	cmp	r4, #1
   10480:	e5cd3001 	strb	r3, [sp, #1]
   10484:	0a00000f 	beq	104c8 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x70>
   10488:	3a000003 	bcc	1049c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   1048c:	e3540002 	cmp	r4, #2
   10490:	1a000008 	bne	104b8 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
   10494:	e3e03000 	mvn	r3, #0
   10498:	e5cd3003 	strb	r3, [sp, #3]
   1049c:	e1a0100d 	mov	r1, sp
   104a0:	e1a00005 	mov	r0, r5
   104a4:	e3a03000 	mov	r3, #0
   104a8:	e3a02008 	mov	r2, #8
   104ac:	eb000266 	bl	10e4c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   104b0:	e28dd00c 	add	sp, sp, #12
   104b4:	e8bd8030 	pop	{r4, r5, pc}
   104b8:	e3a020e5 	mov	r2, #229	; 0xe5
   104bc:	e59f1010 	ldr	r1, [pc, #16]	; 104d4 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   104c0:	e59f0010 	ldr	r0, [pc, #16]	; 104d8 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x80>
   104c4:	eb004c6d 	bl	23680 <assertion_failed>
   104c8:	e3e03000 	mvn	r3, #0
   104cc:	e5cd3004 	strb	r3, [sp, #4]
   104d0:	eafffff1 	b	1049c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   104d4:	00035d80 	.word	0x00035d80
   104d8:	00035260 	.word	0x00035260

000104dc <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   104dc:	e92d4010 	push	{r4, lr}
   104e0:	e1a04000 	mov	r4, r0
   104e4:	eb0019ca 	bl	16c14 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   104e8:	e59f3008 	ldr	r3, [pc, #8]	; 104f8 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   104ec:	e1a00004 	mov	r0, r4
   104f0:	e5843000 	str	r3, [r4]
   104f4:	e8bd8010 	pop	{r4, pc}
   104f8:	00035ccc 	.word	0x00035ccc

000104fc <CUSBGamePadXbox360Device::Configure()>:
   104fc:	e3a0200e 	mov	r2, #14
   10500:	e2803f4a 	add	r3, r0, #296	; 0x128
   10504:	e92d4070 	push	{r4, r5, r6, lr}
   10508:	e1c320b0 	strh	r2, [r3]
   1050c:	e1a04000 	mov	r4, r0
   10510:	eb001994 	bl	16b68 <CUSBGamePadDevice::Configure()>
   10514:	e2505000 	subs	r5, r0, #0
   10518:	0a00001e 	beq	10598 <CUSBGamePadXbox360Device::Configure()+0x9c>
   1051c:	e3a03000 	mov	r3, #0
   10520:	e3a020ff 	mov	r2, #255	; 0xff
   10524:	e3a0c012 	mov	ip, #18
   10528:	e3a00006 	mov	r0, #6
   1052c:	e5941000 	ldr	r1, [r4]
   10530:	e5840024 	str	r0, [r4, #36]	; 0x24
   10534:	e584302c 	str	r3, [r4, #44]	; 0x2c
   10538:	e5843038 	str	r3, [r4, #56]	; 0x38
   1053c:	e5843044 	str	r3, [r4, #68]	; 0x44
   10540:	e5843050 	str	r3, [r4, #80]	; 0x50
   10544:	e584305c 	str	r3, [r4, #92]	; 0x5c
   10548:	e5843068 	str	r3, [r4, #104]	; 0x68
   1054c:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   10550:	e584c104 	str	ip, [r4, #260]	; 0x104
   10554:	e5913034 	ldr	r3, [r1, #52]	; 0x34
   10558:	e5842030 	str	r2, [r4, #48]	; 0x30
   1055c:	e584203c 	str	r2, [r4, #60]	; 0x3c
   10560:	e5842048 	str	r2, [r4, #72]	; 0x48
   10564:	e5842054 	str	r2, [r4, #84]	; 0x54
   10568:	e5842060 	str	r2, [r4, #96]	; 0x60
   1056c:	e584206c 	str	r2, [r4, #108]	; 0x6c
   10570:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   10574:	e1a00004 	mov	r0, r4
   10578:	e12fff33 	blx	r3
   1057c:	e2505000 	subs	r5, r0, #0
   10580:	1a000001 	bne	1058c <CUSBGamePadXbox360Device::Configure()+0x90>
   10584:	e1a00005 	mov	r0, r5
   10588:	e8bd8070 	pop	{r4, r5, r6, pc}
   1058c:	e1a00004 	mov	r0, r4
   10590:	e8bd4070 	pop	{r4, r5, r6, lr}
   10594:	ea0002b6 	b	11074 <CUSBHIDDevice::StartRequest()>
   10598:	eb00552b 	bl	25a4c <CLogger::Get()>
   1059c:	e59f3010 	ldr	r3, [pc, #16]	; 105b4 <CUSBGamePadXbox360Device::Configure()+0xb8>
   105a0:	e3a02001 	mov	r2, #1
   105a4:	e59f100c 	ldr	r1, [pc, #12]	; 105b8 <CUSBGamePadXbox360Device::Configure()+0xbc>
   105a8:	eb005464 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   105ac:	e1a00005 	mov	r0, r5
   105b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   105b4:	00035960 	.word	0x00035960
   105b8:	00035d70 	.word	0x00035d70

000105bc <CUSBGamePadXbox360Device::GetProperties()>:
   105bc:	e3a0000b 	mov	r0, #11
   105c0:	e12fff1e 	bx	lr

000105c4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   105c4:	e3a02000 	mov	r2, #0
   105c8:	e5d13004 	ldrb	r3, [r1, #4]
   105cc:	e5802108 	str	r2, [r0, #264]	; 0x108
   105d0:	e3130004 	tst	r3, #4
   105d4:	13a02901 	movne	r2, #16384	; 0x4000
   105d8:	15802108 	strne	r2, [r0, #264]	; 0x108
   105dc:	e3130008 	tst	r3, #8
   105e0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   105e4:	13822b02 	orrne	r2, r2, #2048	; 0x800
   105e8:	15802108 	strne	r2, [r0, #264]	; 0x108
   105ec:	e3130010 	tst	r3, #16
   105f0:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   105f4:	13822c02 	orrne	r2, r2, #512	; 0x200
   105f8:	15802108 	strne	r2, [r0, #264]	; 0x108
   105fc:	e3130020 	tst	r3, #32
   10600:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10604:	13822c01 	orrne	r2, r2, #256	; 0x100
   10608:	15802108 	strne	r2, [r0, #264]	; 0x108
   1060c:	e3130040 	tst	r3, #64	; 0x40
   10610:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10614:	13822b01 	orrne	r2, r2, #1024	; 0x400
   10618:	15802108 	strne	r2, [r0, #264]	; 0x108
   1061c:	e1b033a3 	lsrs	r3, r3, #7
   10620:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10624:	13833080 	orrne	r3, r3, #128	; 0x80
   10628:	15803108 	strne	r3, [r0, #264]	; 0x108
   1062c:	e5d13005 	ldrb	r3, [r1, #5]
   10630:	e3130001 	tst	r3, #1
   10634:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10638:	13822902 	orrne	r2, r2, #32768	; 0x8000
   1063c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10640:	e3130002 	tst	r3, #2
   10644:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10648:	13822802 	orrne	r2, r2, #131072	; 0x20000
   1064c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10650:	e3130004 	tst	r3, #4
   10654:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10658:	13822701 	orrne	r2, r2, #262144	; 0x40000
   1065c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10660:	e3130008 	tst	r3, #8
   10664:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10668:	13822801 	orrne	r2, r2, #65536	; 0x10000
   1066c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10670:	e3130010 	tst	r3, #16
   10674:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10678:	13822020 	orrne	r2, r2, #32
   1067c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10680:	e3130020 	tst	r3, #32
   10684:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10688:	13822040 	orrne	r2, r2, #64	; 0x40
   1068c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10690:	e3130040 	tst	r3, #64	; 0x40
   10694:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10698:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   1069c:	15802108 	strne	r2, [r0, #264]	; 0x108
   106a0:	e1b033a3 	lsrs	r3, r3, #7
   106a4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   106a8:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   106ac:	15803108 	strne	r3, [r0, #264]	; 0x108
   106b0:	e5d12007 	ldrb	r2, [r1, #7]
   106b4:	e5d13006 	ldrb	r3, [r1, #6]
   106b8:	e1833402 	orr	r3, r3, r2, lsl #8
   106bc:	e1a03143 	asr	r3, r3, #2
   106c0:	e353007f 	cmp	r3, #127	; 0x7f
   106c4:	e5803058 	str	r3, [r0, #88]	; 0x58
   106c8:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   106cc:	c3833008 	orrgt	r3, r3, #8
   106d0:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   106d4:	e5d12009 	ldrb	r2, [r1, #9]
   106d8:	e5d13008 	ldrb	r3, [r1, #8]
   106dc:	e1833402 	orr	r3, r3, r2, lsl #8
   106e0:	e1a03143 	asr	r3, r3, #2
   106e4:	e353007f 	cmp	r3, #127	; 0x7f
   106e8:	e5803064 	str	r3, [r0, #100]	; 0x64
   106ec:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   106f0:	c3833010 	orrgt	r3, r3, #16
   106f4:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   106f8:	e5d1200b 	ldrb	r2, [r1, #11]
   106fc:	e5d1300a 	ldrb	r3, [r1, #10]
   10700:	e1833402 	orr	r3, r3, r2, lsl #8
   10704:	e6bf3073 	sxth	r3, r3
   10708:	e2833902 	add	r3, r3, #32768	; 0x8000
   1070c:	e1a03423 	lsr	r3, r3, #8
   10710:	e5803028 	str	r3, [r0, #40]	; 0x28
   10714:	e5d1200d 	ldrb	r2, [r1, #13]
   10718:	e5d1300c 	ldrb	r3, [r1, #12]
   1071c:	e1833402 	orr	r3, r3, r2, lsl #8
   10720:	e6bf3073 	sxth	r3, r3
   10724:	e2833902 	add	r3, r3, #32768	; 0x8000
   10728:	e1a03423 	lsr	r3, r3, #8
   1072c:	e26330ff 	rsb	r3, r3, #255	; 0xff
   10730:	e5803034 	str	r3, [r0, #52]	; 0x34
   10734:	e5d1200f 	ldrb	r2, [r1, #15]
   10738:	e5d1300e 	ldrb	r3, [r1, #14]
   1073c:	e1833402 	orr	r3, r3, r2, lsl #8
   10740:	e6bf3073 	sxth	r3, r3
   10744:	e2833902 	add	r3, r3, #32768	; 0x8000
   10748:	e1a03423 	lsr	r3, r3, #8
   1074c:	e5803040 	str	r3, [r0, #64]	; 0x40
   10750:	e5d13010 	ldrb	r3, [r1, #16]
   10754:	e5d12011 	ldrb	r2, [r1, #17]
   10758:	e1833402 	orr	r3, r3, r2, lsl #8
   1075c:	e6bf3073 	sxth	r3, r3
   10760:	e2833902 	add	r3, r3, #32768	; 0x8000
   10764:	e1a03423 	lsr	r3, r3, #8
   10768:	e26330ff 	rsb	r3, r3, #255	; 0xff
   1076c:	e580304c 	str	r3, [r0, #76]	; 0x4c
   10770:	e12fff1e 	bx	lr

00010774 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   10774:	e92d4010 	push	{r4, lr}
   10778:	e1a04000 	mov	r4, r0
   1077c:	e59f300c 	ldr	r3, [pc, #12]	; 10790 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   10780:	e5803000 	str	r3, [r0]
   10784:	eb001934 	bl	16c5c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10788:	e1a00004 	mov	r0, r4
   1078c:	e8bd8010 	pop	{r4, pc}
   10790:	00035dc4 	.word	0x00035dc4

00010794 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   10794:	e92d4010 	push	{r4, lr}
   10798:	e1a04000 	mov	r4, r0
   1079c:	e59f3018 	ldr	r3, [pc, #24]	; 107bc <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   107a0:	e5803000 	str	r3, [r0]
   107a4:	eb00192c 	bl	16c5c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   107a8:	e1a00004 	mov	r0, r4
   107ac:	e3a01f4d 	mov	r1, #308	; 0x134
   107b0:	eb0065dd 	bl	29f2c <operator delete(void*, unsigned int)>
   107b4:	e1a00004 	mov	r0, r4
   107b8:	e8bd8010 	pop	{r4, pc}
   107bc:	00035dc4 	.word	0x00035dc4

000107c0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   107c0:	e2513000 	subs	r3, r1, #0
   107c4:	012fff1e 	bxeq	lr
   107c8:	e92d4030 	push	{r4, r5, lr}
   107cc:	e3520006 	cmp	r2, #6
   107d0:	e24dd014 	sub	sp, sp, #20
   107d4:	e1a04000 	mov	r4, r0
   107d8:	e1a0c003 	mov	ip, r3
   107dc:	0a00000b 	beq	10810 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x50>
   107e0:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   107e4:	e2933000 	adds	r3, r3, #0
   107e8:	13a03001 	movne	r3, #1
   107ec:	e3520012 	cmp	r2, #18
   107f0:	13a03000 	movne	r3, #0
   107f4:	e3530000 	cmp	r3, #0
   107f8:	0a000002 	beq	10808 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   107fc:	e5dc3000 	ldrb	r3, [ip]
   10800:	e3530020 	cmp	r3, #32
   10804:	0a00001b 	beq	10878 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xb8>
   10808:	e28dd014 	add	sp, sp, #20
   1080c:	e8bd8030 	pop	{r4, r5, pc}
   10810:	e5d33000 	ldrb	r3, [r3]
   10814:	e3530007 	cmp	r3, #7
   10818:	1afffffa 	bne	10808 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   1081c:	e5dc3001 	ldrb	r3, [ip, #1]
   10820:	e3530030 	cmp	r3, #48	; 0x30
   10824:	1afffff7 	bne	10808 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   10828:	e1a0e00d 	mov	lr, sp
   1082c:	e59f506c 	ldr	r5, [pc, #108]	; 108a0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
   10830:	e5dcc002 	ldrb	ip, [ip, #2]
   10834:	e895000f 	ldm	r5, {r0, r1, r2, r3}
   10838:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   1083c:	e1a00004 	mov	r0, r4
   10840:	e5ce3000 	strb	r3, [lr]
   10844:	e3a0200d 	mov	r2, #13
   10848:	e3a03000 	mov	r3, #0
   1084c:	e1a0100d 	mov	r1, sp
   10850:	e5cdc002 	strb	ip, [sp, #2]
   10854:	eb0001a1 	bl	10ee0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   10858:	e3500000 	cmp	r0, #0
   1085c:	1affffe9 	bne	10808 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   10860:	eb005479 	bl	25a4c <CLogger::Get()>
   10864:	e2851010 	add	r1, r5, #16
   10868:	e59f3034 	ldr	r3, [pc, #52]	; 108a4 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   1086c:	e3a02001 	mov	r2, #1
   10870:	eb0053b2 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10874:	eaffffe3 	b	10808 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   10878:	e1a05000 	mov	r5, r0
   1087c:	e4953024 	ldr	r3, [r5], #36	; 0x24
   10880:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   10884:	e12fff33 	blx	r3
   10888:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   1088c:	e1a01005 	mov	r1, r5
   10890:	e2400001 	sub	r0, r0, #1
   10894:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   10898:	e12fff33 	blx	r3
   1089c:	eaffffd9 	b	10808 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   108a0:	00035e08 	.word	0x00035e08
   108a4:	00035e40 	.word	0x00035e40

000108a8 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   108a8:	e92d4010 	push	{r4, lr}
   108ac:	e24dd010 	sub	sp, sp, #16
   108b0:	e1a0c00d 	mov	ip, sp
   108b4:	e1a04001 	mov	r4, r1
   108b8:	e59f3070 	ldr	r3, [pc, #112]	; 10930 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x88>
   108bc:	e1a0e000 	mov	lr, r0
   108c0:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   108c4:	e8ac0007 	stmia	ip!, {r0, r1, r2}
   108c8:	e3540001 	cmp	r4, #1
   108cc:	e5cc3000 	strb	r3, [ip]
   108d0:	0a000013 	beq	10924 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   108d4:	3a000003 	bcc	108e8 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   108d8:	e3540002 	cmp	r4, #2
   108dc:	1a00000c 	bne	10914 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x6c>
   108e0:	e3e03000 	mvn	r3, #0
   108e4:	e5cd3008 	strb	r3, [sp, #8]
   108e8:	e5dec130 	ldrb	ip, [lr, #304]	; 0x130
   108ec:	e1a0100d 	mov	r1, sp
   108f0:	e28c3001 	add	r3, ip, #1
   108f4:	e5ce3130 	strb	r3, [lr, #304]	; 0x130
   108f8:	e1a0000e 	mov	r0, lr
   108fc:	e3a03000 	mov	r3, #0
   10900:	e3a0200d 	mov	r2, #13
   10904:	e5cdc002 	strb	ip, [sp, #2]
   10908:	eb00014f 	bl	10e4c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1090c:	e28dd010 	add	sp, sp, #16
   10910:	e8bd8010 	pop	{r4, pc}
   10914:	e3a020ee 	mov	r2, #238	; 0xee
   10918:	e59f1014 	ldr	r1, [pc, #20]	; 10934 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   1091c:	e59f0014 	ldr	r0, [pc, #20]	; 10938 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x90>
   10920:	eb004b56 	bl	23680 <assertion_failed>
   10924:	e3e03000 	mvn	r3, #0
   10928:	e5cd3009 	strb	r3, [sp, #9]
   1092c:	eaffffed 	b	108e8 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   10930:	00035e28 	.word	0x00035e28
   10934:	00035e54 	.word	0x00035e54
   10938:	00035260 	.word	0x00035260

0001093c <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   1093c:	e92d4010 	push	{r4, lr}
   10940:	e1a04000 	mov	r4, r0
   10944:	eb0018b2 	bl	16c14 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   10948:	e3a02000 	mov	r2, #0
   1094c:	e59f300c 	ldr	r3, [pc, #12]	; 10960 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   10950:	e5c42130 	strb	r2, [r4, #304]	; 0x130
   10954:	e5843000 	str	r3, [r4]
   10958:	e1a00004 	mov	r0, r4
   1095c:	e8bd8010 	pop	{r4, pc}
   10960:	00035dc4 	.word	0x00035dc4

00010964 <CUSBGamePadXboxOneDevice::Configure()>:
   10964:	e3a02040 	mov	r2, #64	; 0x40
   10968:	e92d4070 	push	{r4, r5, r6, lr}
   1096c:	e2803f4a 	add	r3, r0, #296	; 0x128
   10970:	e24dd008 	sub	sp, sp, #8
   10974:	e1c320b0 	strh	r2, [r3]
   10978:	e1a04000 	mov	r4, r0
   1097c:	eb001879 	bl	16b68 <CUSBGamePadDevice::Configure()>
   10980:	e2505000 	subs	r5, r0, #0
   10984:	0a00002a 	beq	10a34 <CUSBGamePadXboxOneDevice::Configure()+0xd0>
   10988:	e3a03000 	mov	r3, #0
   1098c:	e3a020ff 	mov	r2, #255	; 0xff
   10990:	e3a01010 	mov	r1, #16
   10994:	e3a0c006 	mov	ip, #6
   10998:	e59f60b4 	ldr	r6, [pc, #180]	; 10a54 <CUSBGamePadXboxOneDevice::Configure()+0xf0>
   1099c:	e5841104 	str	r1, [r4, #260]	; 0x104
   109a0:	e5842030 	str	r2, [r4, #48]	; 0x30
   109a4:	e8960003 	ldm	r6, {r0, r1}
   109a8:	e584203c 	str	r2, [r4, #60]	; 0x3c
   109ac:	e58d0000 	str	r0, [sp]
   109b0:	e5cd1004 	strb	r1, [sp, #4]
   109b4:	e5842048 	str	r2, [r4, #72]	; 0x48
   109b8:	e5842054 	str	r2, [r4, #84]	; 0x54
   109bc:	e5842060 	str	r2, [r4, #96]	; 0x60
   109c0:	e584206c 	str	r2, [r4, #108]	; 0x6c
   109c4:	e584c024 	str	ip, [r4, #36]	; 0x24
   109c8:	e584302c 	str	r3, [r4, #44]	; 0x2c
   109cc:	e5843038 	str	r3, [r4, #56]	; 0x38
   109d0:	e5843044 	str	r3, [r4, #68]	; 0x44
   109d4:	e5843050 	str	r3, [r4, #80]	; 0x50
   109d8:	e584305c 	str	r3, [r4, #92]	; 0x5c
   109dc:	e5843068 	str	r3, [r4, #104]	; 0x68
   109e0:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   109e4:	e3a02005 	mov	r2, #5
   109e8:	e1a0100d 	mov	r1, sp
   109ec:	e1a00004 	mov	r0, r4
   109f0:	eb000115 	bl	10e4c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   109f4:	e2505000 	subs	r5, r0, #0
   109f8:	0a000005 	beq	10a14 <CUSBGamePadXboxOneDevice::Configure()+0xb0>
   109fc:	e1a00004 	mov	r0, r4
   10a00:	eb00019b 	bl	11074 <CUSBHIDDevice::StartRequest()>
   10a04:	e1a05000 	mov	r5, r0
   10a08:	e1a00005 	mov	r0, r5
   10a0c:	e28dd008 	add	sp, sp, #8
   10a10:	e8bd8070 	pop	{r4, r5, r6, pc}
   10a14:	eb00540c 	bl	25a4c <CLogger::Get()>
   10a18:	e2461020 	sub	r1, r6, #32
   10a1c:	e59f3034 	ldr	r3, [pc, #52]	; 10a58 <CUSBGamePadXboxOneDevice::Configure()+0xf4>
   10a20:	e3a02001 	mov	r2, #1
   10a24:	eb005345 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10a28:	e1a00005 	mov	r0, r5
   10a2c:	e28dd008 	add	sp, sp, #8
   10a30:	e8bd8070 	pop	{r4, r5, r6, pc}
   10a34:	eb005404 	bl	25a4c <CLogger::Get()>
   10a38:	e59f301c 	ldr	r3, [pc, #28]	; 10a5c <CUSBGamePadXboxOneDevice::Configure()+0xf8>
   10a3c:	e3a02001 	mov	r2, #1
   10a40:	e59f1018 	ldr	r1, [pc, #24]	; 10a60 <CUSBGamePadXboxOneDevice::Configure()+0xfc>
   10a44:	eb00533d 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10a48:	e1a00005 	mov	r0, r5
   10a4c:	e28dd008 	add	sp, sp, #8
   10a50:	e8bd8070 	pop	{r4, r5, r6, pc}
   10a54:	00035e38 	.word	0x00035e38
   10a58:	00035e6c 	.word	0x00035e6c
   10a5c:	00035960 	.word	0x00035960
   10a60:	00035e18 	.word	0x00035e18

00010a64 <CUSBGamePadXboxOneDevice::GetProperties()>:
   10a64:	e3a00009 	mov	r0, #9
   10a68:	e12fff1e 	bx	lr

00010a6c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   10a6c:	e92d4070 	push	{r4, r5, r6, lr}
   10a70:	e2504000 	subs	r4, r0, #0
   10a74:	0a000013 	beq	10ac8 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x5c>
   10a78:	e1a05001 	mov	r5, r1
   10a7c:	eb000a40 	bl	13384 <CUSBRequest::GetStatus() const>
   10a80:	e3500000 	cmp	r0, #0
   10a84:	0a000009 	beq	10ab0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x44>
   10a88:	e1a00004 	mov	r0, r4
   10a8c:	eb000a2c 	bl	13344 <CUSBRequest::~CUSBRequest()>
   10a90:	e1a00004 	mov	r0, r4
   10a94:	e3a01028 	mov	r1, #40	; 0x28
   10a98:	eb000aa2 	bl	13528 <CUSBRequest::operator delete(void*, unsigned int)>
   10a9c:	e3550000 	cmp	r5, #0
   10aa0:	0a00000c 	beq	10ad8 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x6c>
   10aa4:	e1a00005 	mov	r0, r5
   10aa8:	e8bd4070 	pop	{r4, r5, r6, lr}
   10aac:	ea006518 	b	29f14 <operator delete[](void*)>
   10ab0:	eb0053e5 	bl	25a4c <CLogger::Get()>
   10ab4:	e59f302c 	ldr	r3, [pc, #44]	; 10ae8 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   10ab8:	e3a02002 	mov	r2, #2
   10abc:	e59f1028 	ldr	r1, [pc, #40]	; 10aec <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x80>
   10ac0:	eb00531e 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10ac4:	eaffffef 	b	10a88 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
   10ac8:	e3a020af 	mov	r2, #175	; 0xaf
   10acc:	e59f101c 	ldr	r1, [pc, #28]	; 10af0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x84>
   10ad0:	e59f001c 	ldr	r0, [pc, #28]	; 10af4 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x88>
   10ad4:	eb004ae9 	bl	23680 <assertion_failed>
   10ad8:	e3a020b8 	mov	r2, #184	; 0xb8
   10adc:	e59f100c 	ldr	r1, [pc, #12]	; 10af0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x84>
   10ae0:	e59f0010 	ldr	r0, [pc, #16]	; 10af8 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x8c>
   10ae4:	eb004ae5 	bl	23680 <assertion_failed>
   10ae8:	00035ed0 	.word	0x00035ed0
   10aec:	00035e84 	.word	0x00035e84
   10af0:	00035ebc 	.word	0x00035ebc
   10af4:	00034758 	.word	0x00034758
   10af8:	00035eec 	.word	0x00035eec

00010afc <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   10afc:	e92d4070 	push	{r4, r5, r6, lr}
   10b00:	e1a04000 	mov	r4, r0
   10b04:	e1a05002 	mov	r5, r2
   10b08:	ebfff5a2 	bl	e198 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   10b0c:	e3a03000 	mov	r3, #0
   10b10:	e59f2030 	ldr	r2, [pc, #48]	; 10b48 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x4c>
   10b14:	e1550003 	cmp	r5, r3
   10b18:	e5845010 	str	r5, [r4, #16]
   10b1c:	e5842000 	str	r2, [r4]
   10b20:	e5843014 	str	r3, [r4, #20]
   10b24:	e5843018 	str	r3, [r4, #24]
   10b28:	e584301c 	str	r3, [r4, #28]
   10b2c:	e5843020 	str	r3, [r4, #32]
   10b30:	0a000002 	beq	10b40 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x44>
   10b34:	e1a00005 	mov	r0, r5
   10b38:	eb0064ee 	bl	29ef8 <operator new[](unsigned int)>
   10b3c:	e5840020 	str	r0, [r4, #32]
   10b40:	e1a00004 	mov	r0, r4
   10b44:	e8bd8070 	pop	{r4, r5, r6, pc}
   10b48:	00035e94 	.word	0x00035e94

00010b4c <CUSBHIDDevice::~CUSBHIDDevice()>:
   10b4c:	e92d4070 	push	{r4, r5, r6, lr}
   10b50:	e1a04000 	mov	r4, r0
   10b54:	e5900020 	ldr	r0, [r0, #32]
   10b58:	e59f3074 	ldr	r3, [pc, #116]	; 10bd4 <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
   10b5c:	e3500000 	cmp	r0, #0
   10b60:	e5843000 	str	r3, [r4]
   10b64:	0a000000 	beq	10b6c <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   10b68:	eb0064e9 	bl	29f14 <operator delete[](void*)>
   10b6c:	e3a03000 	mov	r3, #0
   10b70:	e5945018 	ldr	r5, [r4, #24]
   10b74:	e5843020 	str	r3, [r4, #32]
   10b78:	e1550003 	cmp	r5, r3
   10b7c:	0a000004 	beq	10b94 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   10b80:	e1a00005 	mov	r0, r5
   10b84:	ebfff486 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   10b88:	e1a00005 	mov	r0, r5
   10b8c:	e3a01014 	mov	r1, #20
   10b90:	eb0064e5 	bl	29f2c <operator delete(void*, unsigned int)>
   10b94:	e3a03000 	mov	r3, #0
   10b98:	e5945014 	ldr	r5, [r4, #20]
   10b9c:	e5843018 	str	r3, [r4, #24]
   10ba0:	e1550003 	cmp	r5, r3
   10ba4:	0a000004 	beq	10bbc <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
   10ba8:	e1a00005 	mov	r0, r5
   10bac:	ebfff47c 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   10bb0:	e1a00005 	mov	r0, r5
   10bb4:	e3a01014 	mov	r1, #20
   10bb8:	eb0064db 	bl	29f2c <operator delete(void*, unsigned int)>
   10bbc:	e3a03000 	mov	r3, #0
   10bc0:	e1a00004 	mov	r0, r4
   10bc4:	e5843014 	str	r3, [r4, #20]
   10bc8:	ebfff4e1 	bl	df54 <CUSBFunction::~CUSBFunction()>
   10bcc:	e1a00004 	mov	r0, r4
   10bd0:	e8bd8070 	pop	{r4, r5, r6, pc}
   10bd4:	00035e94 	.word	0x00035e94

00010bd8 <CUSBHIDDevice::~CUSBHIDDevice()>:
   10bd8:	e92d4010 	push	{r4, lr}
   10bdc:	e1a04000 	mov	r4, r0
   10be0:	ebffffd9 	bl	10b4c <CUSBHIDDevice::~CUSBHIDDevice()>
   10be4:	e1a00004 	mov	r0, r4
   10be8:	e3a01024 	mov	r1, #36	; 0x24
   10bec:	eb0064ce 	bl	29f2c <operator delete(void*, unsigned int)>
   10bf0:	e1a00004 	mov	r0, r4
   10bf4:	e8bd8010 	pop	{r4, pc}

00010bf8 <CUSBHIDDevice::Configure(unsigned int)>:
   10bf8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10bfc:	e24dd010 	sub	sp, sp, #16
   10c00:	e1a07001 	mov	r7, r1
   10c04:	e1a05000 	mov	r5, r0
   10c08:	ebfff5b2 	bl	e2d8 <CUSBFunction::GetNumEndpoints() const>
   10c0c:	e2506000 	subs	r6, r0, #0
   10c10:	13a06005 	movne	r6, #5
   10c14:	13a08014 	movne	r8, #20
   10c18:	1a000004 	bne	10c30 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   10c1c:	ea000053 	b	10d70 <CUSBHIDDevice::Configure(unsigned int)+0x178>
   10c20:	e5d43003 	ldrb	r3, [r4, #3]
   10c24:	e203303f 	and	r3, r3, #63	; 0x3f
   10c28:	e3530003 	cmp	r3, #3
   10c2c:	0a000019 	beq	10c98 <CUSBHIDDevice::Configure(unsigned int)+0xa0>
   10c30:	e1a01006 	mov	r1, r6
   10c34:	e1a00005 	mov	r0, r5
   10c38:	ebfff5d3 	bl	e38c <CUSBFunction::GetDescriptor(unsigned char)>
   10c3c:	e2504000 	subs	r4, r0, #0
   10c40:	1afffff6 	bne	10c20 <CUSBHIDDevice::Configure(unsigned int)+0x28>
   10c44:	e5956014 	ldr	r6, [r5, #20]
   10c48:	e1a00005 	mov	r0, r5
   10c4c:	e3560000 	cmp	r6, #0
   10c50:	0a000043 	beq	10d64 <CUSBHIDDevice::Configure(unsigned int)+0x16c>
   10c54:	ebfff4e7 	bl	dff8 <CUSBFunction::Configure()>
   10c58:	e2506000 	subs	r6, r0, #0
   10c5c:	0a00001e 	beq	10cdc <CUSBHIDDevice::Configure(unsigned int)+0xe4>
   10c60:	e1a00005 	mov	r0, r5
   10c64:	ebfff627 	bl	e508 <CUSBFunction::GetInterfaceClass() const>
   10c68:	e3500003 	cmp	r0, #3
   10c6c:	0a000043 	beq	10d80 <CUSBHIDDevice::Configure(unsigned int)+0x188>
   10c70:	e5953010 	ldr	r3, [r5, #16]
   10c74:	e3530000 	cmp	r3, #0
   10c78:	0a00001f 	beq	10cfc <CUSBHIDDevice::Configure(unsigned int)+0x104>
   10c7c:	e5953020 	ldr	r3, [r5, #32]
   10c80:	e3530000 	cmp	r3, #0
   10c84:	1a000019 	bne	10cf0 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   10c88:	e3a02082 	mov	r2, #130	; 0x82
   10c8c:	e59f119c 	ldr	r1, [pc, #412]	; 10e30 <CUSBHIDDevice::Configure(unsigned int)+0x238>
   10c90:	e59f019c 	ldr	r0, [pc, #412]	; 10e34 <CUSBHIDDevice::Configure(unsigned int)+0x23c>
   10c94:	eb004a79 	bl	23680 <assertion_failed>
   10c98:	e1d430d2 	ldrsb	r3, [r4, #2]
   10c9c:	e3530000 	cmp	r3, #0
   10ca0:	ba000021 	blt	10d2c <CUSBHIDDevice::Configure(unsigned int)+0x134>
   10ca4:	e5953018 	ldr	r3, [r5, #24]
   10ca8:	e1a00005 	mov	r0, r5
   10cac:	e3530000 	cmp	r3, #0
   10cb0:	1a00005a 	bne	10e20 <CUSBHIDDevice::Configure(unsigned int)+0x228>
   10cb4:	ebfff593 	bl	e308 <CUSBFunction::GetDevice() const>
   10cb8:	e1a0a000 	mov	sl, r0
   10cbc:	e1a00008 	mov	r0, r8
   10cc0:	eb00648b 	bl	29ef4 <operator new(unsigned int)>
   10cc4:	e1a09000 	mov	r9, r0
   10cc8:	e1a02004 	mov	r2, r4
   10ccc:	e1a0100a 	mov	r1, sl
   10cd0:	ebfff3c9 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   10cd4:	e5859018 	str	r9, [r5, #24]
   10cd8:	eaffffd4 	b	10c30 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   10cdc:	eb00535a 	bl	25a4c <CLogger::Get()>
   10ce0:	e59f3150 	ldr	r3, [pc, #336]	; 10e38 <CUSBHIDDevice::Configure(unsigned int)+0x240>
   10ce4:	e3a02001 	mov	r2, #1
   10ce8:	e59f114c 	ldr	r1, [pc, #332]	; 10e3c <CUSBHIDDevice::Configure(unsigned int)+0x244>
   10cec:	eb005293 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10cf0:	e1a00006 	mov	r0, r6
   10cf4:	e28dd010 	add	sp, sp, #16
   10cf8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10cfc:	e3570000 	cmp	r7, #0
   10d00:	e5857010 	str	r7, [r5, #16]
   10d04:	0a000041 	beq	10e10 <CUSBHIDDevice::Configure(unsigned int)+0x218>
   10d08:	e5953020 	ldr	r3, [r5, #32]
   10d0c:	e3530000 	cmp	r3, #0
   10d10:	1a00003a 	bne	10e00 <CUSBHIDDevice::Configure(unsigned int)+0x208>
   10d14:	e1a00007 	mov	r0, r7
   10d18:	eb006476 	bl	29ef8 <operator new[](unsigned int)>
   10d1c:	e5850020 	str	r0, [r5, #32]
   10d20:	e1a00006 	mov	r0, r6
   10d24:	e28dd010 	add	sp, sp, #16
   10d28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10d2c:	e5953014 	ldr	r3, [r5, #20]
   10d30:	e1a00005 	mov	r0, r5
   10d34:	e3530000 	cmp	r3, #0
   10d38:	1a000038 	bne	10e20 <CUSBHIDDevice::Configure(unsigned int)+0x228>
   10d3c:	ebfff571 	bl	e308 <CUSBFunction::GetDevice() const>
   10d40:	e1a0a000 	mov	sl, r0
   10d44:	e1a00008 	mov	r0, r8
   10d48:	eb006469 	bl	29ef4 <operator new(unsigned int)>
   10d4c:	e1a09000 	mov	r9, r0
   10d50:	e1a02004 	mov	r2, r4
   10d54:	e1a0100a 	mov	r1, sl
   10d58:	ebfff3a7 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   10d5c:	e5859014 	str	r9, [r5, #20]
   10d60:	eaffffb2 	b	10c30 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   10d64:	e59f10d0 	ldr	r1, [pc, #208]	; 10e3c <CUSBHIDDevice::Configure(unsigned int)+0x244>
   10d68:	ebfff592 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   10d6c:	eaffffdf 	b	10cf0 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   10d70:	e1a00005 	mov	r0, r5
   10d74:	e59f10c0 	ldr	r1, [pc, #192]	; 10e3c <CUSBHIDDevice::Configure(unsigned int)+0x244>
   10d78:	ebfff58e 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   10d7c:	eaffffdb 	b	10cf0 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   10d80:	e1a00005 	mov	r0, r5
   10d84:	ebfff5eb 	bl	e538 <CUSBFunction::GetInterfaceSubClass() const>
   10d88:	e3500001 	cmp	r0, #1
   10d8c:	e1a0a000 	mov	sl, r0
   10d90:	1affffb6 	bne	10c70 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   10d94:	e1a00005 	mov	r0, r5
   10d98:	ebfff570 	bl	e360 <CUSBFunction::GetHost() const>
   10d9c:	e1a08000 	mov	r8, r0
   10da0:	e1a00005 	mov	r0, r5
   10da4:	ebfff562 	bl	e334 <CUSBFunction::GetEndpoint0() const>
   10da8:	e1a09000 	mov	r9, r0
   10dac:	e1a00005 	mov	r0, r5
   10db0:	ebfff5c8 	bl	e4d8 <CUSBFunction::GetInterfaceNumber() const>
   10db4:	e6ff0070 	uxth	r0, r0
   10db8:	e58d0004 	str	r0, [sp, #4]
   10dbc:	e1a01009 	mov	r1, r9
   10dc0:	e1a00008 	mov	r0, r8
   10dc4:	e58d400c 	str	r4, [sp, #12]
   10dc8:	e58d4008 	str	r4, [sp, #8]
   10dcc:	e58d4000 	str	r4, [sp]
   10dd0:	e3a0300b 	mov	r3, #11
   10dd4:	e3a02021 	mov	r2, #33	; 0x21
   10dd8:	eb000132 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10ddc:	e3500000 	cmp	r0, #0
   10de0:	aaffffa2 	bge	10c70 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   10de4:	eb005318 	bl	25a4c <CLogger::Get()>
   10de8:	e1a0200a 	mov	r2, sl
   10dec:	e59f304c 	ldr	r3, [pc, #76]	; 10e40 <CUSBHIDDevice::Configure(unsigned int)+0x248>
   10df0:	e59f1044 	ldr	r1, [pc, #68]	; 10e3c <CUSBHIDDevice::Configure(unsigned int)+0x244>
   10df4:	e1a06004 	mov	r6, r4
   10df8:	eb005250 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10dfc:	eaffffbb 	b	10cf0 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   10e00:	e3a0207f 	mov	r2, #127	; 0x7f
   10e04:	e59f1024 	ldr	r1, [pc, #36]	; 10e30 <CUSBHIDDevice::Configure(unsigned int)+0x238>
   10e08:	e59f0034 	ldr	r0, [pc, #52]	; 10e44 <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   10e0c:	eb004a1b 	bl	23680 <assertion_failed>
   10e10:	e3a0207d 	mov	r2, #125	; 0x7d
   10e14:	e59f1014 	ldr	r1, [pc, #20]	; 10e30 <CUSBHIDDevice::Configure(unsigned int)+0x238>
   10e18:	e59f0028 	ldr	r0, [pc, #40]	; 10e48 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   10e1c:	eb004a17 	bl	23680 <assertion_failed>
   10e20:	e59f1014 	ldr	r1, [pc, #20]	; 10e3c <CUSBHIDDevice::Configure(unsigned int)+0x244>
   10e24:	ebfff563 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   10e28:	e3a06000 	mov	r6, #0
   10e2c:	eaffffaf 	b	10cf0 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   10e30:	00035ebc 	.word	0x00035ebc
   10e34:	00035f4c 	.word	0x00035f4c
   10e38:	00035810 	.word	0x00035810
   10e3c:	00035e84 	.word	0x00035e84
   10e40:	00035f00 	.word	0x00035f00
   10e44:	00035f34 	.word	0x00035f34
   10e48:	00035f1c 	.word	0x00035f1c

00010e4c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   10e4c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10e50:	e590e018 	ldr	lr, [r0, #24]
   10e54:	e24dd00c 	sub	sp, sp, #12
   10e58:	e35e0000 	cmp	lr, #0
   10e5c:	0a000011 	beq	10ea8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x5c>
   10e60:	e3510000 	cmp	r1, #0
   10e64:	e1a07003 	mov	r7, r3
   10e68:	e1a06002 	mov	r6, r2
   10e6c:	e1a05001 	mov	r5, r1
   10e70:	0a00000f 	beq	10eb4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x68>
   10e74:	e3520000 	cmp	r2, #0
   10e78:	0a000011 	beq	10ec4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x78>
   10e7c:	e1a04000 	mov	r4, r0
   10e80:	ebfff536 	bl	e360 <CUSBFunction::GetHost() const>
   10e84:	e5941018 	ldr	r1, [r4, #24]
   10e88:	e1a03006 	mov	r3, r6
   10e8c:	e58d7000 	str	r7, [sp]
   10e90:	e1a02005 	mov	r2, r5
   10e94:	eb000169 	bl	11440 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   10e98:	e1e00000 	mvn	r0, r0
   10e9c:	e1a00fa0 	lsr	r0, r0, #31
   10ea0:	e28dd00c 	add	sp, sp, #12
   10ea4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10ea8:	e1a0000e 	mov	r0, lr
   10eac:	e28dd00c 	add	sp, sp, #12
   10eb0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   10eb4:	e3a0208e 	mov	r2, #142	; 0x8e
   10eb8:	e59f1014 	ldr	r1, [pc, #20]	; 10ed4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x88>
   10ebc:	e59f0014 	ldr	r0, [pc, #20]	; 10ed8 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x8c>
   10ec0:	eb0049ee 	bl	23680 <assertion_failed>
   10ec4:	e3a0208f 	mov	r2, #143	; 0x8f
   10ec8:	e59f1004 	ldr	r1, [pc, #4]	; 10ed4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x88>
   10ecc:	e59f0008 	ldr	r0, [pc, #8]	; 10edc <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x90>
   10ed0:	eb0049ea 	bl	23680 <assertion_failed>
   10ed4:	00035ebc 	.word	0x00035ebc
   10ed8:	00036138 	.word	0x00036138
   10edc:	00035f64 	.word	0x00035f64

00010ee0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   10ee0:	e590c018 	ldr	ip, [r0, #24]
   10ee4:	e35c0000 	cmp	ip, #0
   10ee8:	0a00002e 	beq	10fa8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc8>
   10eec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10ef0:	e3510000 	cmp	r1, #0
   10ef4:	e24dd008 	sub	sp, sp, #8
   10ef8:	e1a07003 	mov	r7, r3
   10efc:	e1a05002 	mov	r5, r2
   10f00:	e1a06001 	mov	r6, r1
   10f04:	e1a04000 	mov	r4, r0
   10f08:	0a00001e 	beq	10f88 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xa8>
   10f0c:	e3520000 	cmp	r2, #0
   10f10:	0a000020 	beq	10f98 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xb8>
   10f14:	e1a00002 	mov	r0, r2
   10f18:	eb0063f6 	bl	29ef8 <operator new[](unsigned int)>
   10f1c:	e1a02005 	mov	r2, r5
   10f20:	e1a01006 	mov	r1, r6
   10f24:	e1a08000 	mov	r8, r0
   10f28:	eb006218 	bl	29790 <memcpy>
   10f2c:	e3a00028 	mov	r0, #40	; 0x28
   10f30:	eb000967 	bl	134d4 <CUSBRequest::operator new(unsigned int)>
   10f34:	e3a0c000 	mov	ip, #0
   10f38:	e1a06000 	mov	r6, r0
   10f3c:	e5941018 	ldr	r1, [r4, #24]
   10f40:	e1a03005 	mov	r3, r5
   10f44:	e58dc000 	str	ip, [sp]
   10f48:	e1a02008 	mov	r2, r8
   10f4c:	eb0008db 	bl	132c0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   10f50:	e1a03004 	mov	r3, r4
   10f54:	e1a02008 	mov	r2, r8
   10f58:	e1a00006 	mov	r0, r6
   10f5c:	e59f104c 	ldr	r1, [pc, #76]	; 10fb0 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd0>
   10f60:	eb00093a 	bl	13450 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   10f64:	e1a00004 	mov	r0, r4
   10f68:	ebfff4fc 	bl	e360 <CUSBFunction::GetHost() const>
   10f6c:	e1a01006 	mov	r1, r6
   10f70:	e1a02007 	mov	r2, r7
   10f74:	e5903000 	ldr	r3, [r0]
   10f78:	e593300c 	ldr	r3, [r3, #12]
   10f7c:	e28dd008 	add	sp, sp, #8
   10f80:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   10f84:	e12fff13 	bx	r3
   10f88:	e3a020a0 	mov	r2, #160	; 0xa0
   10f8c:	e59f1020 	ldr	r1, [pc, #32]	; 10fb4 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   10f90:	e59f0020 	ldr	r0, [pc, #32]	; 10fb8 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd8>
   10f94:	eb0049b9 	bl	23680 <assertion_failed>
   10f98:	e3a020a1 	mov	r2, #161	; 0xa1
   10f9c:	e59f1010 	ldr	r1, [pc, #16]	; 10fb4 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   10fa0:	e59f0014 	ldr	r0, [pc, #20]	; 10fbc <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xdc>
   10fa4:	eb0049b5 	bl	23680 <assertion_failed>
   10fa8:	e1a0000c 	mov	r0, ip
   10fac:	e12fff1e 	bx	lr
   10fb0:	00010a6c 	.word	0x00010a6c
   10fb4:	00035ebc 	.word	0x00035ebc
   10fb8:	00036138 	.word	0x00036138
   10fbc:	00035f64 	.word	0x00035f64

00010fc0 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   10fc0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10fc4:	e590c01c 	ldr	ip, [r0, #28]
   10fc8:	e24dd00c 	sub	sp, sp, #12
   10fcc:	e35c0000 	cmp	ip, #0
   10fd0:	1a000012 	bne	11020 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x60>
   10fd4:	e1a06002 	mov	r6, r2
   10fd8:	e5902014 	ldr	r2, [r0, #20]
   10fdc:	e1a04000 	mov	r4, r0
   10fe0:	e3520000 	cmp	r2, #0
   10fe4:	0a000011 	beq	11030 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x70>
   10fe8:	e3510000 	cmp	r1, #0
   10fec:	e1a05001 	mov	r5, r1
   10ff0:	0a000012 	beq	11040 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x80>
   10ff4:	e3560000 	cmp	r6, #0
   10ff8:	0a000014 	beq	11050 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x90>
   10ffc:	e1a07003 	mov	r7, r3
   11000:	ebfff4d6 	bl	e360 <CUSBFunction::GetHost() const>
   11004:	e5941014 	ldr	r1, [r4, #20]
   11008:	e1a03006 	mov	r3, r6
   1100c:	e58d7000 	str	r7, [sp]
   11010:	e1a02005 	mov	r2, r5
   11014:	eb000109 	bl	11440 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   11018:	e28dd00c 	add	sp, sp, #12
   1101c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11020:	e3a020be 	mov	r2, #190	; 0xbe
   11024:	e59f1034 	ldr	r1, [pc, #52]	; 11060 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   11028:	e59f0034 	ldr	r0, [pc, #52]	; 11064 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa4>
   1102c:	eb004993 	bl	23680 <assertion_failed>
   11030:	e3a020c0 	mov	r2, #192	; 0xc0
   11034:	e59f1024 	ldr	r1, [pc, #36]	; 11060 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   11038:	e59f0028 	ldr	r0, [pc, #40]	; 11068 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa8>
   1103c:	eb00498f 	bl	23680 <assertion_failed>
   11040:	e3a020c1 	mov	r2, #193	; 0xc1
   11044:	e59f1014 	ldr	r1, [pc, #20]	; 11060 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   11048:	e59f001c 	ldr	r0, [pc, #28]	; 1106c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   1104c:	eb00498b 	bl	23680 <assertion_failed>
   11050:	e3a020c2 	mov	r2, #194	; 0xc2
   11054:	e59f1004 	ldr	r1, [pc, #4]	; 11060 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   11058:	e59f0010 	ldr	r0, [pc, #16]	; 11070 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb0>
   1105c:	eb004987 	bl	23680 <assertion_failed>
   11060:	00035ebc 	.word	0x00035ebc
   11064:	00035f74 	.word	0x00035f74
   11068:	00035f80 	.word	0x00035f80
   1106c:	00036138 	.word	0x00036138
   11070:	00035f64 	.word	0x00035f64

00011074 <CUSBHIDDevice::StartRequest()>:
   11074:	e92d4070 	push	{r4, r5, r6, lr}
   11078:	e5903014 	ldr	r3, [r0, #20]
   1107c:	e24dd008 	sub	sp, sp, #8
   11080:	e3530000 	cmp	r3, #0
   11084:	0a000020 	beq	1110c <CUSBHIDDevice::StartRequest()+0x98>
   11088:	e5903020 	ldr	r3, [r0, #32]
   1108c:	e1a04000 	mov	r4, r0
   11090:	e3530000 	cmp	r3, #0
   11094:	0a000020 	beq	1111c <CUSBHIDDevice::StartRequest()+0xa8>
   11098:	e590501c 	ldr	r5, [r0, #28]
   1109c:	e3550000 	cmp	r5, #0
   110a0:	1a000021 	bne	1112c <CUSBHIDDevice::StartRequest()+0xb8>
   110a4:	e5903010 	ldr	r3, [r0, #16]
   110a8:	e3530000 	cmp	r3, #0
   110ac:	0a000022 	beq	1113c <CUSBHIDDevice::StartRequest()+0xc8>
   110b0:	e3a00028 	mov	r0, #40	; 0x28
   110b4:	eb000906 	bl	134d4 <CUSBRequest::operator new(unsigned int)>
   110b8:	e1a06000 	mov	r6, r0
   110bc:	e5943010 	ldr	r3, [r4, #16]
   110c0:	e5942020 	ldr	r2, [r4, #32]
   110c4:	e5941014 	ldr	r1, [r4, #20]
   110c8:	e58d5000 	str	r5, [sp]
   110cc:	eb00087b 	bl	132c0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   110d0:	e1a03004 	mov	r3, r4
   110d4:	e1a02005 	mov	r2, r5
   110d8:	e1a00006 	mov	r0, r6
   110dc:	e59f1068 	ldr	r1, [pc, #104]	; 1114c <CUSBHIDDevice::StartRequest()+0xd8>
   110e0:	e584601c 	str	r6, [r4, #28]
   110e4:	eb0008d9 	bl	13450 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   110e8:	e1a00004 	mov	r0, r4
   110ec:	ebfff49b 	bl	e360 <CUSBFunction::GetHost() const>
   110f0:	e1a02005 	mov	r2, r5
   110f4:	e5903000 	ldr	r3, [r0]
   110f8:	e594101c 	ldr	r1, [r4, #28]
   110fc:	e593300c 	ldr	r3, [r3, #12]
   11100:	e28dd008 	add	sp, sp, #8
   11104:	e8bd4070 	pop	{r4, r5, r6, lr}
   11108:	e12fff13 	bx	r3
   1110c:	e3a020c8 	mov	r2, #200	; 0xc8
   11110:	e59f1038 	ldr	r1, [pc, #56]	; 11150 <CUSBHIDDevice::StartRequest()+0xdc>
   11114:	e59f0038 	ldr	r0, [pc, #56]	; 11154 <CUSBHIDDevice::StartRequest()+0xe0>
   11118:	eb004958 	bl	23680 <assertion_failed>
   1111c:	e3a020c9 	mov	r2, #201	; 0xc9
   11120:	e59f1028 	ldr	r1, [pc, #40]	; 11150 <CUSBHIDDevice::StartRequest()+0xdc>
   11124:	e59f002c 	ldr	r0, [pc, #44]	; 11158 <CUSBHIDDevice::StartRequest()+0xe4>
   11128:	eb004954 	bl	23680 <assertion_failed>
   1112c:	e3a020cb 	mov	r2, #203	; 0xcb
   11130:	e59f1018 	ldr	r1, [pc, #24]	; 11150 <CUSBHIDDevice::StartRequest()+0xdc>
   11134:	e59f0020 	ldr	r0, [pc, #32]	; 1115c <CUSBHIDDevice::StartRequest()+0xe8>
   11138:	eb004950 	bl	23680 <assertion_failed>
   1113c:	e3a020cc 	mov	r2, #204	; 0xcc
   11140:	e59f1008 	ldr	r1, [pc, #8]	; 11150 <CUSBHIDDevice::StartRequest()+0xdc>
   11144:	e59f0014 	ldr	r0, [pc, #20]	; 11160 <CUSBHIDDevice::StartRequest()+0xec>
   11148:	eb00494c 	bl	23680 <assertion_failed>
   1114c:	0001124c 	.word	0x0001124c
   11150:	00035ebc 	.word	0x00035ebc
   11154:	00035f80 	.word	0x00035f80
   11158:	00035f4c 	.word	0x00035f4c
   1115c:	00035f74 	.word	0x00035f74
   11160:	00035f1c 	.word	0x00035f1c

00011164 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   11164:	e92d4070 	push	{r4, r5, r6, lr}
   11168:	e2515000 	subs	r5, r1, #0
   1116c:	0a000029 	beq	11218 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xb4>
   11170:	e590301c 	ldr	r3, [r0, #28]
   11174:	e1a04000 	mov	r4, r0
   11178:	e1550003 	cmp	r5, r3
   1117c:	1a000029 	bne	11228 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   11180:	e1a00005 	mov	r0, r5
   11184:	eb00087e 	bl	13384 <CUSBRequest::GetStatus() const>
   11188:	e2502000 	subs	r2, r0, #0
   1118c:	e5943000 	ldr	r3, [r4]
   11190:	1a000017 	bne	111f4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x90>
   11194:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   11198:	e1a01002 	mov	r1, r2
   1119c:	e1a00004 	mov	r0, r4
   111a0:	e12fff33 	blx	r3
   111a4:	e594501c 	ldr	r5, [r4, #28]
   111a8:	e3550000 	cmp	r5, #0
   111ac:	0a000004 	beq	111c4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x60>
   111b0:	e1a00005 	mov	r0, r5
   111b4:	eb000862 	bl	13344 <CUSBRequest::~CUSBRequest()>
   111b8:	e1a00005 	mov	r0, r5
   111bc:	e3a01028 	mov	r1, #40	; 0x28
   111c0:	eb0008d8 	bl	13528 <CUSBRequest::operator delete(void*, unsigned int)>
   111c4:	e3a03000 	mov	r3, #0
   111c8:	e1a00004 	mov	r0, r4
   111cc:	e584301c 	str	r3, [r4, #28]
   111d0:	ebffffa7 	bl	11074 <CUSBHIDDevice::StartRequest()>
   111d4:	e3500000 	cmp	r0, #0
   111d8:	18bd8070 	popne	{r4, r5, r6, pc}
   111dc:	eb00521a 	bl	25a4c <CLogger::Get()>
   111e0:	e8bd4070 	pop	{r4, r5, r6, lr}
   111e4:	e59f304c 	ldr	r3, [pc, #76]	; 11238 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   111e8:	e3a02001 	mov	r2, #1
   111ec:	e59f1048 	ldr	r1, [pc, #72]	; 1123c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   111f0:	ea005152 	b	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   111f4:	e1a00005 	mov	r0, r5
   111f8:	e5946020 	ldr	r6, [r4, #32]
   111fc:	e5935024 	ldr	r5, [r3, #36]	; 0x24
   11200:	eb000861 	bl	1338c <CUSBRequest::GetResultLength() const>
   11204:	e1a01006 	mov	r1, r6
   11208:	e1a02000 	mov	r2, r0
   1120c:	e1a00004 	mov	r0, r4
   11210:	e12fff35 	blx	r5
   11214:	eaffffe2 	b	111a4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x40>
   11218:	e3a020d6 	mov	r2, #214	; 0xd6
   1121c:	e59f101c 	ldr	r1, [pc, #28]	; 11240 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   11220:	e59f001c 	ldr	r0, [pc, #28]	; 11244 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   11224:	eb004915 	bl	23680 <assertion_failed>
   11228:	e3a020d7 	mov	r2, #215	; 0xd7
   1122c:	e59f100c 	ldr	r1, [pc, #12]	; 11240 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   11230:	e59f0010 	ldr	r0, [pc, #16]	; 11248 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   11234:	eb004911 	bl	23680 <assertion_failed>
   11238:	00035fa8 	.word	0x00035fa8
   1123c:	00035e84 	.word	0x00035e84
   11240:	00035ebc 	.word	0x00035ebc
   11244:	00034758 	.word	0x00034758
   11248:	00035f98 	.word	0x00035f98

0001124c <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   1124c:	e3520000 	cmp	r2, #0
   11250:	0a000002 	beq	11260 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   11254:	e1a01000 	mov	r1, r0
   11258:	e1a00002 	mov	r0, r2
   1125c:	eaffffc0 	b	11164 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   11260:	e92d4010 	push	{r4, lr}
   11264:	e3a020ee 	mov	r2, #238	; 0xee
   11268:	e59f1004 	ldr	r1, [pc, #4]	; 11274 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   1126c:	e59f0004 	ldr	r0, [pc, #4]	; 11278 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   11270:	eb004902 	bl	23680 <assertion_failed>
   11274:	00035ebc 	.word	0x00035ebc
   11278:	0003466c 	.word	0x0003466c

0001127c <CUSBHostController::CUSBHostController()>:
   1127c:	e59f3004 	ldr	r3, [pc, #4]	; 11288 <CUSBHostController::CUSBHostController()+0xc>
   11280:	e5803000 	str	r3, [r0]
   11284:	e12fff1e 	bx	lr
   11288:	00035fc8 	.word	0x00035fc8

0001128c <CUSBHostController::~CUSBHostController()>:
   1128c:	e12fff1e 	bx	lr

00011290 <CUSBHostController::~CUSBHostController()>:
   11290:	e92d4010 	push	{r4, lr}
   11294:	e1a04000 	mov	r4, r0
   11298:	e3a01004 	mov	r1, #4
   1129c:	eb006322 	bl	29f2c <operator delete(void*, unsigned int)>
   112a0:	e1a00004 	mov	r0, r4
   112a4:	e8bd8010 	pop	{r4, pc}

000112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
   112a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112ac:	e1a06000 	mov	r6, r0
   112b0:	e24dd034 	sub	sp, sp, #52	; 0x34
   112b4:	e3a00008 	mov	r0, #8
   112b8:	e1dd56b4 	ldrh	r5, [sp, #100]	; 0x64
   112bc:	e1a0a002 	mov	sl, r2
   112c0:	e1a09003 	mov	r9, r3
   112c4:	e1dd85b8 	ldrh	r8, [sp, #88]	; 0x58
   112c8:	e1dd75bc 	ldrh	r7, [sp, #92]	; 0x5c
   112cc:	e1a0b001 	mov	fp, r1
   112d0:	eb006307 	bl	29ef4 <operator new(unsigned int)>
   112d4:	e1a04000 	mov	r4, r0
   112d8:	e58d0000 	str	r0, [sp]
   112dc:	e1a02428 	lsr	r2, r8, #8
   112e0:	e5c0a000 	strb	sl, [r0]
   112e4:	e5c09001 	strb	r9, [r0, #1]
   112e8:	e1a00427 	lsr	r0, r7, #8
   112ec:	e1a0c425 	lsr	ip, r5, #8
   112f0:	e1a0100b 	mov	r1, fp
   112f4:	e5c42003 	strb	r2, [r4, #3]
   112f8:	e1a03005 	mov	r3, r5
   112fc:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
   11300:	e5c40005 	strb	r0, [r4, #5]
   11304:	e28d0008 	add	r0, sp, #8
   11308:	e5c4c007 	strb	ip, [r4, #7]
   1130c:	e5c48002 	strb	r8, [r4, #2]
   11310:	e5c47004 	strb	r7, [r4, #4]
   11314:	e5c45006 	strb	r5, [r4, #6]
   11318:	eb0007e8 	bl	132c0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1131c:	e5963000 	ldr	r3, [r6]
   11320:	e1a00006 	mov	r0, r6
   11324:	e5933008 	ldr	r3, [r3, #8]
   11328:	e28d1008 	add	r1, sp, #8
   1132c:	e3a02000 	mov	r2, #0
   11330:	e12fff33 	blx	r3
   11334:	e3500000 	cmp	r0, #0
   11338:	0a00000a 	beq	11368 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xc0>
   1133c:	e28d0008 	add	r0, sp, #8
   11340:	eb000811 	bl	1338c <CUSBRequest::GetResultLength() const>
   11344:	e1a05000 	mov	r5, r0
   11348:	e1a00004 	mov	r0, r4
   1134c:	e3a01008 	mov	r1, #8
   11350:	eb0062f5 	bl	29f2c <operator delete(void*, unsigned int)>
   11354:	e28d0008 	add	r0, sp, #8
   11358:	eb0007f9 	bl	13344 <CUSBRequest::~CUSBRequest()>
   1135c:	e1a00005 	mov	r0, r5
   11360:	e28dd034 	add	sp, sp, #52	; 0x34
   11364:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11368:	e3e05000 	mvn	r5, #0
   1136c:	eafffff5 	b	11348 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa0>

00011370 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
   11370:	e92d4030 	push	{r4, r5, lr}
   11374:	e59d500c 	ldr	r5, [sp, #12]
   11378:	e5dd4014 	ldrb	r4, [sp, #20]
   1137c:	e1dde1b8 	ldrh	lr, [sp, #24]
   11380:	e1ddc1b0 	ldrh	ip, [sp, #16]
   11384:	e1833402 	orr	r3, r3, r2, lsl #8
   11388:	e58d300c 	str	r3, [sp, #12]
   1138c:	e58d5014 	str	r5, [sp, #20]
   11390:	e1a02004 	mov	r2, r4
   11394:	e58de010 	str	lr, [sp, #16]
   11398:	e58dc018 	str	ip, [sp, #24]
   1139c:	e3a03006 	mov	r3, #6
   113a0:	e8bd4030 	pop	{r4, r5, lr}
   113a4:	eaffffbf 	b	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

000113a8 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
   113a8:	e92d4010 	push	{r4, lr}
   113ac:	e3a04000 	mov	r4, #0
   113b0:	e24dd010 	sub	sp, sp, #16
   113b4:	e58d2000 	str	r2, [sp]
   113b8:	e58d400c 	str	r4, [sp, #12]
   113bc:	e58d4008 	str	r4, [sp, #8]
   113c0:	e58d4004 	str	r4, [sp, #4]
   113c4:	e1a02004 	mov	r2, r4
   113c8:	e3a03005 	mov	r3, #5
   113cc:	ebffffb5 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   113d0:	e1500004 	cmp	r0, r4
   113d4:	b1a00004 	movlt	r0, r4
   113d8:	ba000003 	blt	113ec <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
   113dc:	eb005e67 	bl	28d80 <CTimer::Get()>
   113e0:	e3a00032 	mov	r0, #50	; 0x32
   113e4:	eb005e2c 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
   113e8:	e3a00001 	mov	r0, #1
   113ec:	e28dd010 	add	sp, sp, #16
   113f0:	e8bd8010 	pop	{r4, pc}

000113f4 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
   113f4:	e92d4010 	push	{r4, lr}
   113f8:	e3a04000 	mov	r4, #0
   113fc:	e24dd010 	sub	sp, sp, #16
   11400:	e58d2000 	str	r2, [sp]
   11404:	e58d400c 	str	r4, [sp, #12]
   11408:	e58d4008 	str	r4, [sp, #8]
   1140c:	e58d4004 	str	r4, [sp, #4]
   11410:	e1a02004 	mov	r2, r4
   11414:	e3a03009 	mov	r3, #9
   11418:	ebffffa2 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1141c:	e1500004 	cmp	r0, r4
   11420:	b1a00004 	movlt	r0, r4
   11424:	ba000003 	blt	11438 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
   11428:	eb005e54 	bl	28d80 <CTimer::Get()>
   1142c:	e3a00032 	mov	r0, #50	; 0x32
   11430:	eb005e19 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
   11434:	e3a00001 	mov	r0, #1
   11438:	e28dd010 	add	sp, sp, #16
   1143c:	e8bd8010 	pop	{r4, pc}

00011440 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
   11440:	e3a0c000 	mov	ip, #0
   11444:	e92d4010 	push	{r4, lr}
   11448:	e1a04000 	mov	r4, r0
   1144c:	e24dd030 	sub	sp, sp, #48	; 0x30
   11450:	e58dc000 	str	ip, [sp]
   11454:	e28d0008 	add	r0, sp, #8
   11458:	eb000798 	bl	132c0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1145c:	e5943000 	ldr	r3, [r4]
   11460:	e1a00004 	mov	r0, r4
   11464:	e5933008 	ldr	r3, [r3, #8]
   11468:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   1146c:	e28d1008 	add	r1, sp, #8
   11470:	e12fff33 	blx	r3
   11474:	e3500000 	cmp	r0, #0
   11478:	0a000007 	beq	1149c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
   1147c:	e28d0008 	add	r0, sp, #8
   11480:	eb0007c1 	bl	1338c <CUSBRequest::GetResultLength() const>
   11484:	e1a04000 	mov	r4, r0
   11488:	e28d0008 	add	r0, sp, #8
   1148c:	eb0007ac 	bl	13344 <CUSBRequest::~CUSBRequest()>
   11490:	e1a00004 	mov	r0, r4
   11494:	e28dd030 	add	sp, sp, #48	; 0x30
   11498:	e8bd8010 	pop	{r4, pc}
   1149c:	e3e04000 	mvn	r4, #0
   114a0:	eafffff8 	b	11488 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

000114a4 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   114a4:	e92d4070 	push	{r4, r5, r6, lr}
   114a8:	e3a06000 	mov	r6, #0
   114ac:	e1a04000 	mov	r4, r0
   114b0:	e59f5034 	ldr	r5, [pc, #52]	; 114ec <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x48>
   114b4:	e580643c 	str	r6, [r0, #1084]	; 0x43c
   114b8:	e2853008 	add	r3, r5, #8
   114bc:	e5803000 	str	r3, [r0]
   114c0:	eb004b48 	bl	241e8 <CDeviceNameService::Get()>
   114c4:	e1a03006 	mov	r3, r6
   114c8:	e2851030 	add	r1, r5, #48	; 0x30
   114cc:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
   114d0:	eb004b6b 	bl	24284 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   114d4:	e2840024 	add	r0, r4, #36	; 0x24
   114d8:	eb00173f 	bl	171dc <CKeyboardBehaviour::~CKeyboardBehaviour()>
   114dc:	e1a00004 	mov	r0, r4
   114e0:	ebfffd99 	bl	10b4c <CUSBHIDDevice::~CUSBHIDDevice()>
   114e4:	e1a00004 	mov	r0, r4
   114e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   114ec:	00035fd8 	.word	0x00035fd8

000114f0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   114f0:	e92d4010 	push	{r4, lr}
   114f4:	e1a04000 	mov	r4, r0
   114f8:	ebffffe9 	bl	114a4 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
   114fc:	e1a00004 	mov	r0, r4
   11500:	e3a01e45 	mov	r1, #1104	; 0x450
   11504:	eb006288 	bl	29f2c <operator delete(void*, unsigned int)>
   11508:	e1a00004 	mov	r0, r4
   1150c:	e8bd8010 	pop	{r4, pc}

00011510 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
   11510:	e2522008 	subs	r2, r2, #8
   11514:	13a02001 	movne	r2, #1
   11518:	e3510000 	cmp	r1, #0
   1151c:	03822001 	orreq	r2, r2, #1
   11520:	e3520000 	cmp	r2, #0
   11524:	112fff1e 	bxne	lr
   11528:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1152c:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
   11530:	e24dd00c 	sub	sp, sp, #12
   11534:	e3530000 	cmp	r3, #0
   11538:	e1a07001 	mov	r7, r1
   1153c:	0a000004 	beq	11554 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
   11540:	e5d70000 	ldrb	r0, [r7]
   11544:	e2811002 	add	r1, r1, #2
   11548:	e28dd00c 	add	sp, sp, #12
   1154c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11550:	e12fff13 	bx	r3
   11554:	e1a06000 	mov	r6, r0
   11558:	e1a04003 	mov	r4, r3
   1155c:	e3a05080 	mov	r5, #128	; 0x80
   11560:	e3a09001 	mov	r9, #1
   11564:	e2808024 	add	r8, r0, #36	; 0x24
   11568:	ea000006 	b	11588 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x78>
   1156c:	e1120003 	tst	r2, r3
   11570:	1a00003d 	bne	1166c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x15c>
   11574:	e2844001 	add	r4, r4, #1
   11578:	e2855001 	add	r5, r5, #1
   1157c:	e3540008 	cmp	r4, #8
   11580:	e6ef5075 	uxtb	r5, r5
   11584:	0a00000a 	beq	115b4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xa4>
   11588:	e5d72000 	ldrb	r2, [r7]
   1158c:	e1a03419 	lsl	r3, r9, r4
   11590:	e1120003 	tst	r2, r3
   11594:	e5d62440 	ldrb	r2, [r6, #1088]	; 0x440
   11598:	0afffff3 	beq	1156c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x5c>
   1159c:	e1120003 	tst	r2, r3
   115a0:	1afffff3 	bne	11574 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
   115a4:	e1a01005 	mov	r1, r5
   115a8:	e1a00008 	mov	r0, r8
   115ac:	eb00176f 	bl	17370 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   115b0:	eaffffef 	b	11574 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
   115b4:	e2868d11 	add	r8, r6, #1088	; 0x440
   115b8:	e2885002 	add	r5, r8, #2
   115bc:	e1a0b005 	mov	fp, r5
   115c0:	e2863024 	add	r3, r6, #36	; 0x24
   115c4:	e2884008 	add	r4, r8, #8
   115c8:	e2879002 	add	r9, r7, #2
   115cc:	e287a008 	add	sl, r7, #8
   115d0:	e58d3004 	str	r3, [sp, #4]
   115d4:	e4db1001 	ldrb	r1, [fp], #1
   115d8:	e3510000 	cmp	r1, #0
   115dc:	0a000007 	beq	11600 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>
   115e0:	e1a03009 	mov	r3, r9
   115e4:	e4d30001 	ldrb	r0, [r3], #1
   115e8:	e1500001 	cmp	r0, r1
   115ec:	0a000003 	beq	11600 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>
   115f0:	e153000a 	cmp	r3, sl
   115f4:	1afffffa 	bne	115e4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd4>
   115f8:	e59d0004 	ldr	r0, [sp, #4]
   115fc:	eb00176a 	bl	173ac <CKeyboardBehaviour::KeyReleased(unsigned char)>
   11600:	e15b0004 	cmp	fp, r4
   11604:	1afffff2 	bne	115d4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc4>
   11608:	e2866024 	add	r6, r6, #36	; 0x24
   1160c:	e2879001 	add	r9, r7, #1
   11610:	e287a007 	add	sl, r7, #7
   11614:	ea000001 	b	11620 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
   11618:	e159000a 	cmp	r9, sl
   1161c:	0a00000c 	beq	11654 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x144>
   11620:	e5f91001 	ldrb	r1, [r9, #1]!
   11624:	e3510000 	cmp	r1, #0
   11628:	11a03005 	movne	r3, r5
   1162c:	0afffff9 	beq	11618 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
   11630:	e4d32001 	ldrb	r2, [r3], #1
   11634:	e1520001 	cmp	r2, r1
   11638:	0afffff6 	beq	11618 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
   1163c:	e1530004 	cmp	r3, r4
   11640:	1afffffa 	bne	11630 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x120>
   11644:	e1a00006 	mov	r0, r6
   11648:	eb001748 	bl	17370 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   1164c:	e159000a 	cmp	r9, sl
   11650:	1afffff2 	bne	11620 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
   11654:	e1a01007 	mov	r1, r7
   11658:	e1a00008 	mov	r0, r8
   1165c:	e3a02008 	mov	r2, #8
   11660:	e28dd00c 	add	sp, sp, #12
   11664:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11668:	ea006048 	b	29790 <memcpy>
   1166c:	e1a01005 	mov	r1, r5
   11670:	e1a00008 	mov	r0, r8
   11674:	eb00174c 	bl	173ac <CKeyboardBehaviour::KeyReleased(unsigned char)>
   11678:	eaffffbd 	b	11574 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>

0001167c <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
   1167c:	e92d4010 	push	{r4, lr}
   11680:	e1a04000 	mov	r4, r0
   11684:	e3a02008 	mov	r2, #8
   11688:	ebfffd1b 	bl	10afc <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   1168c:	e1a00004 	mov	r0, r4
   11690:	e59f3028 	ldr	r3, [pc, #40]	; 116c0 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x44>
   11694:	e4803024 	str	r3, [r0], #36	; 0x24
   11698:	eb0016c2 	bl	171a8 <CKeyboardBehaviour::CKeyboardBehaviour()>
   1169c:	e3a01000 	mov	r1, #0
   116a0:	e2840d11 	add	r0, r4, #1088	; 0x440
   116a4:	e584143c 	str	r1, [r4, #1084]	; 0x43c
   116a8:	e5c41448 	strb	r1, [r4, #1096]	; 0x448
   116ac:	e584144c 	str	r1, [r4, #1100]	; 0x44c
   116b0:	e3a02008 	mov	r2, #8
   116b4:	eb005dbe 	bl	28db4 <memset>
   116b8:	e1a00004 	mov	r0, r4
   116bc:	e8bd8010 	pop	{r4, pc}
   116c0:	00035fe0 	.word	0x00035fe0

000116c4 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
   116c4:	e2800024 	add	r0, r0, #36	; 0x24
   116c8:	ea0016cd 	b	17204 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

000116cc <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   116cc:	e2800024 	add	r0, r0, #36	; 0x24
   116d0:	ea0016d6 	b	17230 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

000116d4 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
   116d4:	e2800024 	add	r0, r0, #36	; 0x24
   116d8:	ea0016df 	b	1725c <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

000116dc <CUSBKeyboardDevice::GetLEDStatus() const>:
   116dc:	e92d4010 	push	{r4, lr}
   116e0:	e2800024 	add	r0, r0, #36	; 0x24
   116e4:	eb0016e7 	bl	17288 <CKeyboardBehaviour::GetLEDStatus() const>
   116e8:	e2003001 	and	r3, r0, #1
   116ec:	e3100002 	tst	r0, #2
   116f0:	13833002 	orrne	r3, r3, #2
   116f4:	e3100004 	tst	r0, #4
   116f8:	13833004 	orrne	r3, r3, #4
   116fc:	e1a00003 	mov	r0, r3
   11700:	e8bd8010 	pop	{r4, pc}

00011704 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
   11704:	e3510000 	cmp	r1, #0
   11708:	0a000001 	beq	11714 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x10>
   1170c:	e580143c 	str	r1, [r0, #1084]	; 0x43c
   11710:	e12fff1e 	bx	lr
   11714:	e92d4010 	push	{r4, lr}
   11718:	e3a0207d 	mov	r2, #125	; 0x7d
   1171c:	e59f1004 	ldr	r1, [pc, #4]	; 11728 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x24>
   11720:	e59f0004 	ldr	r0, [pc, #4]	; 1172c <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x28>
   11724:	eb0047d5 	bl	23680 <assertion_failed>
   11728:	00036018 	.word	0x00036018
   1172c:	00036028 	.word	0x00036028

00011730 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
   11730:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11734:	e24dd01c 	sub	sp, sp, #28
   11738:	e28d4018 	add	r4, sp, #24
   1173c:	e5641004 	strb	r1, [r4, #-4]!
   11740:	e1a05000 	mov	r5, r0
   11744:	ebfff305 	bl	e360 <CUSBFunction::GetHost() const>
   11748:	e1a06000 	mov	r6, r0
   1174c:	e1a00005 	mov	r0, r5
   11750:	ebfff2f7 	bl	e334 <CUSBFunction::GetEndpoint0() const>
   11754:	e1a07000 	mov	r7, r0
   11758:	e1a00005 	mov	r0, r5
   1175c:	ebfff35d 	bl	e4d8 <CUSBFunction::GetInterfaceNumber() const>
   11760:	e3a02001 	mov	r2, #1
   11764:	e3a03c02 	mov	r3, #512	; 0x200
   11768:	e6ff0070 	uxth	r0, r0
   1176c:	e98d0011 	stmib	sp, {r0, r4}
   11770:	e58d200c 	str	r2, [sp, #12]
   11774:	e58d3000 	str	r3, [sp]
   11778:	e1a01007 	mov	r1, r7
   1177c:	e1a00006 	mov	r0, r6
   11780:	e3a03009 	mov	r3, #9
   11784:	e3a02021 	mov	r2, #33	; 0x21
   11788:	ebfffec6 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1178c:	e1e00000 	mvn	r0, r0
   11790:	e1a00fa0 	lsr	r0, r0, #31
   11794:	e28dd01c 	add	sp, sp, #28
   11798:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001179c <CUSBKeyboardDevice::Configure()>:
   1179c:	e92d4030 	push	{r4, r5, lr}
   117a0:	e3a01000 	mov	r1, #0
   117a4:	e24dd00c 	sub	sp, sp, #12
   117a8:	e1a04000 	mov	r4, r0
   117ac:	ebfffd11 	bl	10bf8 <CUSBHIDDevice::Configure(unsigned int)>
   117b0:	e2505000 	subs	r5, r0, #0
   117b4:	0a000012 	beq	11804 <CUSBKeyboardDevice::Configure()+0x68>
   117b8:	e5d41448 	ldrb	r1, [r4, #1096]	; 0x448
   117bc:	e1a00004 	mov	r0, r4
   117c0:	ebffffda 	bl	11730 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   117c4:	e59f2058 	ldr	r2, [pc, #88]	; 11824 <CUSBKeyboardDevice::Configure()+0x88>
   117c8:	e5923000 	ldr	r3, [r2]
   117cc:	e584344c 	str	r3, [r4, #1100]	; 0x44c
   117d0:	e2833001 	add	r3, r3, #1
   117d4:	e5823000 	str	r3, [r2]
   117d8:	eb004a82 	bl	241e8 <CDeviceNameService::Get()>
   117dc:	e3a03000 	mov	r3, #0
   117e0:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
   117e4:	e59f103c 	ldr	r1, [pc, #60]	; 11828 <CUSBKeyboardDevice::Configure()+0x8c>
   117e8:	e58d3000 	str	r3, [sp]
   117ec:	e1a03004 	mov	r3, r4
   117f0:	eb004a89 	bl	2421c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   117f4:	e1a00004 	mov	r0, r4
   117f8:	e28dd00c 	add	sp, sp, #12
   117fc:	e8bd4030 	pop	{r4, r5, lr}
   11800:	eafffe1b 	b	11074 <CUSBHIDDevice::StartRequest()>
   11804:	eb005090 	bl	25a4c <CLogger::Get()>
   11808:	e59f301c 	ldr	r3, [pc, #28]	; 1182c <CUSBKeyboardDevice::Configure()+0x90>
   1180c:	e3a02001 	mov	r2, #1
   11810:	e59f1018 	ldr	r1, [pc, #24]	; 11830 <CUSBKeyboardDevice::Configure()+0x94>
   11814:	eb004fc9 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11818:	e1a00005 	mov	r0, r5
   1181c:	e28dd00c 	add	sp, sp, #12
   11820:	e8bd8030 	pop	{r4, r5, pc}
   11824:	0003debc 	.word	0x0003debc
   11828:	00036008 	.word	0x00036008
   1182c:	00036044 	.word	0x00036044
   11830:	00036010 	.word	0x00036010

00011834 <CUSBKeyboardDevice::UpdateLEDs()>:
   11834:	e590243c 	ldr	r2, [r0, #1084]	; 0x43c
   11838:	e3520000 	cmp	r2, #0
   1183c:	112fff1e 	bxne	lr
   11840:	e92d4010 	push	{r4, lr}
   11844:	e1a04000 	mov	r4, r0
   11848:	ebffffa3 	bl	116dc <CUSBKeyboardDevice::GetLEDStatus() const>
   1184c:	e5d43448 	ldrb	r3, [r4, #1096]	; 0x448
   11850:	e1530000 	cmp	r3, r0
   11854:	08bd8010 	popeq	{r4, pc}
   11858:	e5c40448 	strb	r0, [r4, #1096]	; 0x448
   1185c:	e1a01000 	mov	r1, r0
   11860:	e1a00004 	mov	r0, r4
   11864:	ebffffb1 	bl	11730 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   11868:	e3500000 	cmp	r0, #0
   1186c:	18bd8010 	popne	{r4, pc}
   11870:	eb005075 	bl	25a4c <CLogger::Get()>
   11874:	e8bd4010 	pop	{r4, lr}
   11878:	e59f3008 	ldr	r3, [pc, #8]	; 11888 <CUSBKeyboardDevice::UpdateLEDs()+0x54>
   1187c:	e3a02001 	mov	r2, #1
   11880:	e59f1004 	ldr	r1, [pc, #4]	; 1188c <CUSBKeyboardDevice::UpdateLEDs()+0x58>
   11884:	ea004fad 	b	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11888:	00036060 	.word	0x00036060
   1188c:	00036010 	.word	0x00036010

00011890 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
   11890:	e0802002 	add	r2, r0, r2
   11894:	ea000002 	b	118a4 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
   11898:	e4d03001 	ldrb	r3, [r0], #1
   1189c:	e1530001 	cmp	r3, r1
   118a0:	0a000003 	beq	118b4 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
   118a4:	e1500002 	cmp	r0, r2
   118a8:	1afffffa 	bne	11898 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
   118ac:	e3a00000 	mov	r0, #0
   118b0:	e12fff1e 	bx	lr
   118b4:	e3a00001 	mov	r0, #1
   118b8:	e12fff1e 	bx	lr

000118bc <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
   118bc:	e1c022f0 	strd	r2, [r0, #32]
   118c0:	e1a01003 	mov	r1, r3
   118c4:	e1a00002 	mov	r0, r2
   118c8:	e12fff1e 	bx	lr

000118cc <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   118cc:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   118d0:	e59f30ec 	ldr	r3, [pc, #236]	; 119c4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xf8>
   118d4:	e3520000 	cmp	r2, #0
   118d8:	e92d4070 	push	{r4, r5, r6, lr}
   118dc:	e1a04000 	mov	r4, r0
   118e0:	e5803000 	str	r3, [r0]
   118e4:	1a000021 	bne	11970 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xa4>
   118e8:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   118ec:	e3550000 	cmp	r5, #0
   118f0:	0a000004 	beq	11908 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x3c>
   118f4:	e1a00005 	mov	r0, r5
   118f8:	eb001973 	bl	17ecc <CPartitionManager::~CPartitionManager()>
   118fc:	e1a00005 	mov	r0, r5
   11900:	e3a01024 	mov	r1, #36	; 0x24
   11904:	eb006188 	bl	29f2c <operator delete(void*, unsigned int)>
   11908:	e3a03000 	mov	r3, #0
   1190c:	e5945014 	ldr	r5, [r4, #20]
   11910:	e5843028 	str	r3, [r4, #40]	; 0x28
   11914:	e1550003 	cmp	r5, r3
   11918:	0a000004 	beq	11930 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x64>
   1191c:	e1a00005 	mov	r0, r5
   11920:	ebfff11f 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   11924:	e1a00005 	mov	r0, r5
   11928:	e3a01014 	mov	r1, #20
   1192c:	eb00617e 	bl	29f2c <operator delete(void*, unsigned int)>
   11930:	e3a03000 	mov	r3, #0
   11934:	e5945010 	ldr	r5, [r4, #16]
   11938:	e5843014 	str	r3, [r4, #20]
   1193c:	e1550003 	cmp	r5, r3
   11940:	0a000004 	beq	11958 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x8c>
   11944:	e1a00005 	mov	r0, r5
   11948:	ebfff115 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   1194c:	e1a00005 	mov	r0, r5
   11950:	e3a01014 	mov	r1, #20
   11954:	eb006174 	bl	29f2c <operator delete(void*, unsigned int)>
   11958:	e3a03000 	mov	r3, #0
   1195c:	e1a00004 	mov	r0, r4
   11960:	e5843010 	str	r3, [r4, #16]
   11964:	ebfff17a 	bl	df54 <CUSBFunction::~CUSBFunction()>
   11968:	e1a00004 	mov	r0, r4
   1196c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11970:	eb004a1c 	bl	241e8 <CDeviceNameService::Get()>
   11974:	e3a03001 	mov	r3, #1
   11978:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   1197c:	e59f1044 	ldr	r1, [pc, #68]	; 119c8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xfc>
   11980:	eb004a3f 	bl	24284 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   11984:	e3a03001 	mov	r3, #1
   11988:	e59f103c 	ldr	r1, [pc, #60]	; 119cc <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x100>
   1198c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   11990:	e5912000 	ldr	r2, [r1]
   11994:	e1a03013 	lsl	r3, r3, r0
   11998:	e1130002 	tst	r3, r2
   1199c:	0a000004 	beq	119b4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xe8>
   119a0:	e3a00000 	mov	r0, #0
   119a4:	e1c23003 	bic	r3, r2, r3
   119a8:	e5813000 	str	r3, [r1]
   119ac:	e584002c 	str	r0, [r4, #44]	; 0x2c
   119b0:	eaffffcc 	b	118e8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x1c>
   119b4:	e3a020d4 	mov	r2, #212	; 0xd4
   119b8:	e59f1010 	ldr	r1, [pc, #16]	; 119d0 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x104>
   119bc:	e59f0010 	ldr	r0, [pc, #16]	; 119d4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x108>
   119c0:	eb00472e 	bl	23680 <assertion_failed>
   119c4:	00036080 	.word	0x00036080
   119c8:	000360ac 	.word	0x000360ac
   119cc:	0003e370 	.word	0x0003e370
   119d0:	000360b4 	.word	0x000360b4
   119d4:	000360c8 	.word	0x000360c8

000119d8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   119d8:	e92d4010 	push	{r4, lr}
   119dc:	e1a04000 	mov	r4, r0
   119e0:	ebffffb9 	bl	118cc <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   119e4:	e1a00004 	mov	r0, r4
   119e8:	e3a01030 	mov	r1, #48	; 0x30
   119ec:	eb00614e 	bl	29f2c <operator delete(void*, unsigned int)>
   119f0:	e1a00004 	mov	r0, r4
   119f4:	e8bd8010 	pop	{r4, pc}

000119f8 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   119f8:	e92d4010 	push	{r4, lr}
   119fc:	e1a04000 	mov	r4, r0
   11a00:	ebfff1e4 	bl	e198 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   11a04:	e3a03000 	mov	r3, #0
   11a08:	e3a00000 	mov	r0, #0
   11a0c:	e3a01000 	mov	r1, #0
   11a10:	e59f2024 	ldr	r2, [pc, #36]	; 11a3c <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x44>
   11a14:	e1c402f0 	strd	r0, [r4, #32]
   11a18:	e5842000 	str	r2, [r4]
   11a1c:	e5843010 	str	r3, [r4, #16]
   11a20:	e5843014 	str	r3, [r4, #20]
   11a24:	e5843018 	str	r3, [r4, #24]
   11a28:	e584301c 	str	r3, [r4, #28]
   11a2c:	e5843028 	str	r3, [r4, #40]	; 0x28
   11a30:	e584302c 	str	r3, [r4, #44]	; 0x2c
   11a34:	e1a00004 	mov	r0, r4
   11a38:	e8bd8010 	pop	{r4, pc}
   11a3c:	00036080 	.word	0x00036080

00011a40 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   11a40:	e590001c 	ldr	r0, [r0, #28]
   11a44:	e12fff1e 	bx	lr

00011a48 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
   11a48:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11a4c:	e2519000 	subs	r9, r1, #0
   11a50:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11a54:	e59d5058 	ldr	r5, [sp, #88]	; 0x58
   11a58:	e5dd805c 	ldrb	r8, [sp, #92]	; 0x5c
   11a5c:	0a000059 	beq	11bc8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x180>
   11a60:	e1a07003 	mov	r7, r3
   11a64:	e2423006 	sub	r3, r2, #6
   11a68:	e353000a 	cmp	r3, #10
   11a6c:	e1a06002 	mov	r6, r2
   11a70:	8a000058 	bhi	11bd8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x190>
   11a74:	e2973000 	adds	r3, r7, #0
   11a78:	13a03001 	movne	r3, #1
   11a7c:	e3550000 	cmp	r5, #0
   11a80:	03833001 	orreq	r3, r3, #1
   11a84:	e3530000 	cmp	r3, #0
   11a88:	0a000056 	beq	11be8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1a0>
   11a8c:	e1a04000 	mov	r4, r0
   11a90:	e3a0201f 	mov	r2, #31
   11a94:	e3a01000 	mov	r1, #0
   11a98:	e28d0018 	add	r0, sp, #24
   11a9c:	eb005cc4 	bl	28db4 <memset>
   11aa0:	e3580000 	cmp	r8, #0
   11aa4:	13a0e080 	movne	lr, #128	; 0x80
   11aa8:	03a0e000 	moveq	lr, #0
   11aac:	e5dd0026 	ldrb	r0, [sp, #38]	; 0x26
   11ab0:	e5943018 	ldr	r3, [r4, #24]
   11ab4:	e3c0201f 	bic	r2, r0, #31
   11ab8:	e5ddc025 	ldrb	ip, [sp, #37]	; 0x25
   11abc:	e206001f 	and	r0, r6, #31
   11ac0:	e2833001 	add	r3, r3, #1
   11ac4:	e1800002 	orr	r0, r0, r2
   11ac8:	e1a02006 	mov	r2, r6
   11acc:	e59f61e4 	ldr	r6, [pc, #484]	; 11cb8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x270>
   11ad0:	e5843018 	str	r3, [r4, #24]
   11ad4:	e3ccc00f 	bic	ip, ip, #15
   11ad8:	e1a01009 	mov	r1, r9
   11adc:	e5cd0026 	strb	r0, [sp, #38]	; 0x26
   11ae0:	e28d0027 	add	r0, sp, #39	; 0x27
   11ae4:	e58d301c 	str	r3, [sp, #28]
   11ae8:	e5cdc025 	strb	ip, [sp, #37]	; 0x25
   11aec:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   11af0:	e58d6018 	str	r6, [sp, #24]
   11af4:	e58d5020 	str	r5, [sp, #32]
   11af8:	eb005f24 	bl	29790 <memcpy>
   11afc:	e1a00004 	mov	r0, r4
   11b00:	ebfff216 	bl	e360 <CUSBFunction::GetHost() const>
   11b04:	e2506000 	subs	r6, r0, #0
   11b08:	0a00003a 	beq	11bf8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1b0>
   11b0c:	e3a09000 	mov	r9, #0
   11b10:	e5941014 	ldr	r1, [r4, #20]
   11b14:	e28d2018 	add	r2, sp, #24
   11b18:	e58d9000 	str	r9, [sp]
   11b1c:	e3a0301f 	mov	r3, #31
   11b20:	ebfffe46 	bl	11440 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   11b24:	e1500009 	cmp	r0, r9
   11b28:	ba00005b 	blt	11c9c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x254>
   11b2c:	e3550000 	cmp	r5, #0
   11b30:	0a00000a 	beq	11b60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x118>
   11b34:	e5940010 	ldr	r0, [r4, #16]
   11b38:	e3580000 	cmp	r8, #0
   11b3c:	e5941014 	ldr	r1, [r4, #20]
   11b40:	e1a03005 	mov	r3, r5
   11b44:	11a01000 	movne	r1, r0
   11b48:	e58d9000 	str	r9, [sp]
   11b4c:	e1a02007 	mov	r2, r7
   11b50:	e1a00006 	mov	r0, r6
   11b54:	ebfffe39 	bl	11440 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   11b58:	e2505000 	subs	r5, r0, #0
   11b5c:	ba000029 	blt	11c08 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c0>
   11b60:	e3a03000 	mov	r3, #0
   11b64:	e5941010 	ldr	r1, [r4, #16]
   11b68:	e1a00006 	mov	r0, r6
   11b6c:	e58d3000 	str	r3, [sp]
   11b70:	e28d2008 	add	r2, sp, #8
   11b74:	e3a0300d 	mov	r3, #13
   11b78:	ebfffe30 	bl	11440 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   11b7c:	e350000d 	cmp	r0, #13
   11b80:	1a000027 	bne	11c24 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1dc>
   11b84:	e59f3130 	ldr	r3, [pc, #304]	; 11cbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   11b88:	e59d2008 	ldr	r2, [sp, #8]
   11b8c:	e1520003 	cmp	r2, r3
   11b90:	1a00002a 	bne	11c40 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1f8>
   11b94:	e5943018 	ldr	r3, [r4, #24]
   11b98:	e59d200c 	ldr	r2, [sp, #12]
   11b9c:	e1520003 	cmp	r2, r3
   11ba0:	1a00002d 	bne	11c5c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x214>
   11ba4:	e5dd3014 	ldrb	r3, [sp, #20]
   11ba8:	e3530000 	cmp	r3, #0
   11bac:	1a000031 	bne	11c78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x230>
   11bb0:	e59d3010 	ldr	r3, [sp, #16]
   11bb4:	e3530000 	cmp	r3, #0
   11bb8:	1a000030 	bne	11c80 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x238>
   11bbc:	e1a00005 	mov	r0, r5
   11bc0:	e28dd03c 	add	sp, sp, #60	; 0x3c
   11bc4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11bc8:	e3a02f8e 	mov	r2, #568	; 0x238
   11bcc:	e59f10ec 	ldr	r1, [pc, #236]	; 11cc0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   11bd0:	e59f00ec 	ldr	r0, [pc, #236]	; 11cc4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x27c>
   11bd4:	eb0046a9 	bl	23680 <assertion_failed>
   11bd8:	e59f20e8 	ldr	r2, [pc, #232]	; 11cc8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x280>
   11bdc:	e59f10dc 	ldr	r1, [pc, #220]	; 11cc0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   11be0:	e59f00e4 	ldr	r0, [pc, #228]	; 11ccc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x284>
   11be4:	eb0046a5 	bl	23680 <assertion_failed>
   11be8:	e59f20e0 	ldr	r2, [pc, #224]	; 11cd0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x288>
   11bec:	e59f10cc 	ldr	r1, [pc, #204]	; 11cc0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   11bf0:	e59f00dc 	ldr	r0, [pc, #220]	; 11cd4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x28c>
   11bf4:	eb0046a1 	bl	23680 <assertion_failed>
   11bf8:	e59f20d8 	ldr	r2, [pc, #216]	; 11cd8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
   11bfc:	e59f10bc 	ldr	r1, [pc, #188]	; 11cc0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   11c00:	e59f00d4 	ldr	r0, [pc, #212]	; 11cdc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x294>
   11c04:	eb00469d 	bl	23680 <assertion_failed>
   11c08:	eb004f8f 	bl	25a4c <CLogger::Get()>
   11c0c:	e59f30cc 	ldr	r3, [pc, #204]	; 11ce0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   11c10:	e3a02001 	mov	r2, #1
   11c14:	e59f10c8 	ldr	r1, [pc, #200]	; 11ce4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   11c18:	eb004ec8 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11c1c:	e3e05000 	mvn	r5, #0
   11c20:	eaffffe5 	b	11bbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   11c24:	eb004f88 	bl	25a4c <CLogger::Get()>
   11c28:	e59f30b8 	ldr	r3, [pc, #184]	; 11ce8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a0>
   11c2c:	e3a02001 	mov	r2, #1
   11c30:	e59f10ac 	ldr	r1, [pc, #172]	; 11ce4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   11c34:	eb004ec1 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11c38:	e3e05000 	mvn	r5, #0
   11c3c:	eaffffde 	b	11bbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   11c40:	eb004f81 	bl	25a4c <CLogger::Get()>
   11c44:	e59f30a0 	ldr	r3, [pc, #160]	; 11cec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a4>
   11c48:	e3a02001 	mov	r2, #1
   11c4c:	e59f1090 	ldr	r1, [pc, #144]	; 11ce4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   11c50:	eb004eba 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11c54:	e3e05000 	mvn	r5, #0
   11c58:	eaffffd7 	b	11bbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   11c5c:	eb004f7a 	bl	25a4c <CLogger::Get()>
   11c60:	e59f3088 	ldr	r3, [pc, #136]	; 11cf0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   11c64:	e3a02001 	mov	r2, #1
   11c68:	e59f1074 	ldr	r1, [pc, #116]	; 11ce4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   11c6c:	eb004eb3 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11c70:	e3e05000 	mvn	r5, #0
   11c74:	eaffffd0 	b	11bbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   11c78:	e3e05000 	mvn	r5, #0
   11c7c:	eaffffce 	b	11bbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   11c80:	eb004f71 	bl	25a4c <CLogger::Get()>
   11c84:	e59f3068 	ldr	r3, [pc, #104]	; 11cf4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2ac>
   11c88:	e3a02001 	mov	r2, #1
   11c8c:	e59f1050 	ldr	r1, [pc, #80]	; 11ce4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   11c90:	eb004eaa 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11c94:	e3e05000 	mvn	r5, #0
   11c98:	eaffffc7 	b	11bbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   11c9c:	eb004f6a 	bl	25a4c <CLogger::Get()>
   11ca0:	e59f3050 	ldr	r3, [pc, #80]	; 11cf8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b0>
   11ca4:	e3a02001 	mov	r2, #1
   11ca8:	e59f1034 	ldr	r1, [pc, #52]	; 11ce4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   11cac:	eb004ea3 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11cb0:	e3e05000 	mvn	r5, #0
   11cb4:	eaffffc0 	b	11bbc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   11cb8:	43425355 	.word	0x43425355
   11cbc:	53425355 	.word	0x53425355
   11cc0:	000360b4 	.word	0x000360b4
   11cc4:	000360f4 	.word	0x000360f4
   11cc8:	00000239 	.word	0x00000239
   11ccc:	00036104 	.word	0x00036104
   11cd0:	0000023a 	.word	0x0000023a
   11cd4:	00036128 	.word	0x00036128
   11cd8:	00000249 	.word	0x00000249
   11cdc:	00036148 	.word	0x00036148
   11ce0:	00036168 	.word	0x00036168
   11ce4:	000360a4 	.word	0x000360a4
   11ce8:	00036180 	.word	0x00036180
   11cec:	00036194 	.word	0x00036194
   11cf0:	000361ac 	.word	0x000361ac
   11cf4:	000361c0 	.word	0x000361c0
   11cf8:	00036154 	.word	0x00036154

00011cfc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
   11cfc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11d00:	e3510000 	cmp	r1, #0
   11d04:	e24dd01c 	sub	sp, sp, #28
   11d08:	0a000034 	beq	11de0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xe4>
   11d0c:	e1c062d0 	ldrd	r6, [r0, #32]
   11d10:	e3a03000 	mov	r3, #0
   11d14:	e1a04002 	mov	r4, r2
   11d18:	e59f20ec 	ldr	r2, [pc, #236]	; 11e0c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x110>
   11d1c:	e0033007 	and	r3, r3, r7
   11d20:	e0022006 	and	r2, r2, r6
   11d24:	e1923003 	orrs	r3, r2, r3
   11d28:	e3e08000 	mvn	r8, #0
   11d2c:	13a03001 	movne	r3, #1
   11d30:	03a03000 	moveq	r3, #0
   11d34:	e59f90d0 	ldr	r9, [pc, #208]	; 11e0c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x110>
   11d38:	e1570009 	cmp	r7, r9
   11d3c:	01560008 	cmpeq	r6, r8
   11d40:	83833001 	orrhi	r3, r3, #1
   11d44:	e3530000 	cmp	r3, #0
   11d48:	1a000020 	bne	11dd0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd4>
   11d4c:	e1a0cb84 	lsl	ip, r4, #23
   11d50:	e1a0cbac 	lsr	ip, ip, #23
   11d54:	e1a024a6 	lsr	r2, r6, #9
   11d58:	e35c0000 	cmp	ip, #0
   11d5c:	e1822b87 	orr	r2, r2, r7, lsl #23
   11d60:	1a00001a 	bne	11dd0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd4>
   11d64:	e3a05001 	mov	r5, #1
   11d68:	e3a06028 	mov	r6, #40	; 0x28
   11d6c:	e1a0e4a4 	lsr	lr, r4, #9
   11d70:	e6bf2f32 	rev	r2, r2
   11d74:	e6bfefbe 	rev16	lr, lr
   11d78:	e6ffe07e 	uxth	lr, lr
   11d7c:	e1cd20be 	strh	r2, [sp, #14]
   11d80:	e1a02822 	lsr	r2, r2, #16
   11d84:	e1a03001 	mov	r3, r1
   11d88:	e1cd21b0 	strh	r2, [sp, #16]
   11d8c:	e1a0742e 	lsr	r7, lr, #8
   11d90:	e58d4000 	str	r4, [sp]
   11d94:	e58d5004 	str	r5, [sp, #4]
   11d98:	e3a0200a 	mov	r2, #10
   11d9c:	e28d100c 	add	r1, sp, #12
   11da0:	e5cdc00d 	strb	ip, [sp, #13]
   11da4:	e5cdc012 	strb	ip, [sp, #18]
   11da8:	e5cdc015 	strb	ip, [sp, #21]
   11dac:	e5cde013 	strb	lr, [sp, #19]
   11db0:	e5cd7014 	strb	r7, [sp, #20]
   11db4:	e5cd600c 	strb	r6, [sp, #12]
   11db8:	ebffff22 	bl	11a48 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   11dbc:	e1500004 	cmp	r0, r4
   11dc0:	1a00000a 	bne	11df0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf4>
   11dc4:	e1a00004 	mov	r0, r4
   11dc8:	e28dd01c 	add	sp, sp, #28
   11dcc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11dd0:	e3e04000 	mvn	r4, #0
   11dd4:	e1a00004 	mov	r0, r4
   11dd8:	e28dd01c 	add	sp, sp, #28
   11ddc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11de0:	e59f2028 	ldr	r2, [pc, #40]	; 11e10 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x114>
   11de4:	e59f1028 	ldr	r1, [pc, #40]	; 11e14 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x118>
   11de8:	e59f0028 	ldr	r0, [pc, #40]	; 11e18 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x11c>
   11dec:	eb004623 	bl	23680 <assertion_failed>
   11df0:	eb004f15 	bl	25a4c <CLogger::Get()>
   11df4:	e1a02005 	mov	r2, r5
   11df8:	e59f301c 	ldr	r3, [pc, #28]	; 11e1c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x120>
   11dfc:	e59f101c 	ldr	r1, [pc, #28]	; 11e20 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x124>
   11e00:	eb004e4e 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11e04:	e3e04000 	mvn	r4, #0
   11e08:	eaffffed 	b	11dc4 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc8>
   11e0c:	000001ff 	.word	0x000001ff
   11e10:	000001ed 	.word	0x000001ed
   11e14:	000360b4 	.word	0x000360b4
   11e18:	00036138 	.word	0x00036138
   11e1c:	000361d8 	.word	0x000361d8
   11e20:	000360a4 	.word	0x000360a4

00011e24 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
   11e24:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11e28:	e3510000 	cmp	r1, #0
   11e2c:	e24dd01c 	sub	sp, sp, #28
   11e30:	0a000032 	beq	11f00 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xdc>
   11e34:	e1c062d0 	ldrd	r6, [r0, #32]
   11e38:	e3a03000 	mov	r3, #0
   11e3c:	e1a04002 	mov	r4, r2
   11e40:	e59f20e4 	ldr	r2, [pc, #228]	; 11f2c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x108>
   11e44:	e0033007 	and	r3, r3, r7
   11e48:	e0022006 	and	r2, r2, r6
   11e4c:	e1923003 	orrs	r3, r2, r3
   11e50:	e3e08000 	mvn	r8, #0
   11e54:	13a03001 	movne	r3, #1
   11e58:	03a03000 	moveq	r3, #0
   11e5c:	e59f90c8 	ldr	r9, [pc, #200]	; 11f2c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x108>
   11e60:	e1570009 	cmp	r7, r9
   11e64:	01560008 	cmpeq	r6, r8
   11e68:	83833001 	orrhi	r3, r3, #1
   11e6c:	e3530000 	cmp	r3, #0
   11e70:	1a00001f 	bne	11ef4 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd0>
   11e74:	e1a0cb84 	lsl	ip, r4, #23
   11e78:	e1a0cbac 	lsr	ip, ip, #23
   11e7c:	e1a024a6 	lsr	r2, r6, #9
   11e80:	e35c0000 	cmp	ip, #0
   11e84:	e1822b87 	orr	r2, r2, r7, lsl #23
   11e88:	1a000019 	bne	11ef4 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd0>
   11e8c:	e3a05008 	mov	r5, #8
   11e90:	e3a0602a 	mov	r6, #42	; 0x2a
   11e94:	e1a0e4a4 	lsr	lr, r4, #9
   11e98:	e6bf2f32 	rev	r2, r2
   11e9c:	e6bfefbe 	rev16	lr, lr
   11ea0:	e6ffe07e 	uxth	lr, lr
   11ea4:	e1cd20be 	strh	r2, [sp, #14]
   11ea8:	e1a02822 	lsr	r2, r2, #16
   11eac:	e1a03001 	mov	r3, r1
   11eb0:	e1cd21b0 	strh	r2, [sp, #16]
   11eb4:	e1a0753e 	lsr	r7, lr, r5
   11eb8:	e88d1010 	stm	sp, {r4, ip}
   11ebc:	e3a0200a 	mov	r2, #10
   11ec0:	e28d100c 	add	r1, sp, #12
   11ec4:	e5cdc012 	strb	ip, [sp, #18]
   11ec8:	e5cdc015 	strb	ip, [sp, #21]
   11ecc:	e5cde013 	strb	lr, [sp, #19]
   11ed0:	e5cd7014 	strb	r7, [sp, #20]
   11ed4:	e5cd600c 	strb	r6, [sp, #12]
   11ed8:	e5cd500d 	strb	r5, [sp, #13]
   11edc:	ebfffed9 	bl	11a48 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   11ee0:	e3500000 	cmp	r0, #0
   11ee4:	a1a00004 	movge	r0, r4
   11ee8:	ba000008 	blt	11f10 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xec>
   11eec:	e28dd01c 	add	sp, sp, #28
   11ef0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11ef4:	e3e00000 	mvn	r0, #0
   11ef8:	e28dd01c 	add	sp, sp, #28
   11efc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11f00:	e59f2028 	ldr	r2, [pc, #40]	; 11f30 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x10c>
   11f04:	e59f1028 	ldr	r1, [pc, #40]	; 11f34 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x110>
   11f08:	e59f0028 	ldr	r0, [pc, #40]	; 11f38 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x114>
   11f0c:	eb0045db 	bl	23680 <assertion_failed>
   11f10:	eb004ecd 	bl	25a4c <CLogger::Get()>
   11f14:	e59f3020 	ldr	r3, [pc, #32]	; 11f3c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x118>
   11f18:	e3a02001 	mov	r2, #1
   11f1c:	e59f101c 	ldr	r1, [pc, #28]	; 11f40 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x11c>
   11f20:	eb004e06 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11f24:	e3e00000 	mvn	r0, #0
   11f28:	eaffffef 	b	11eec <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc8>
   11f2c:	000001ff 	.word	0x000001ff
   11f30:	00000212 	.word	0x00000212
   11f34:	000360b4 	.word	0x000360b4
   11f38:	00036138 	.word	0x00036138
   11f3c:	000361e8 	.word	0x000361e8
   11f40:	000360a4 	.word	0x000360a4

00011f44 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   11f44:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   11f48:	e24dd014 	sub	sp, sp, #20
   11f4c:	e1a05000 	mov	r5, r0
   11f50:	ebfff102 	bl	e360 <CUSBFunction::GetHost() const>
   11f54:	e2506000 	subs	r6, r0, #0
   11f58:	0a00002e 	beq	12018 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
   11f5c:	e1a00005 	mov	r0, r5
   11f60:	ebfff0f3 	bl	e334 <CUSBFunction::GetEndpoint0() const>
   11f64:	e3a04000 	mov	r4, #0
   11f68:	e1a01000 	mov	r1, r0
   11f6c:	e58d400c 	str	r4, [sp, #12]
   11f70:	e58d4008 	str	r4, [sp, #8]
   11f74:	e58d4004 	str	r4, [sp, #4]
   11f78:	e58d4000 	str	r4, [sp]
   11f7c:	e3a030ff 	mov	r3, #255	; 0xff
   11f80:	e3a02021 	mov	r2, #33	; 0x21
   11f84:	e1a00006 	mov	r0, r6
   11f88:	ebfffcc6 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11f8c:	e1500004 	cmp	r0, r4
   11f90:	ba000024 	blt	12028 <CUSBBulkOnlyMassStorageDevice::Reset()+0xe4>
   11f94:	e1a00005 	mov	r0, r5
   11f98:	ebfff0e5 	bl	e334 <CUSBFunction::GetEndpoint0() const>
   11f9c:	e3a07001 	mov	r7, #1
   11fa0:	e1a01000 	mov	r1, r0
   11fa4:	e58d400c 	str	r4, [sp, #12]
   11fa8:	e58d4008 	str	r4, [sp, #8]
   11fac:	e88d0090 	stm	sp, {r4, r7}
   11fb0:	e1a03007 	mov	r3, r7
   11fb4:	e3a02002 	mov	r2, #2
   11fb8:	e1a00006 	mov	r0, r6
   11fbc:	ebfffcb9 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11fc0:	e3500000 	cmp	r0, #0
   11fc4:	ba00001e 	blt	12044 <CUSBBulkOnlyMassStorageDevice::Reset()+0x100>
   11fc8:	e1a00005 	mov	r0, r5
   11fcc:	ebfff0d8 	bl	e334 <CUSBFunction::GetEndpoint0() const>
   11fd0:	e3a02002 	mov	r2, #2
   11fd4:	e1a01000 	mov	r1, r0
   11fd8:	e58d400c 	str	r4, [sp, #12]
   11fdc:	e58d4008 	str	r4, [sp, #8]
   11fe0:	e58d4000 	str	r4, [sp]
   11fe4:	e1a03007 	mov	r3, r7
   11fe8:	e1a00006 	mov	r0, r6
   11fec:	e58d2004 	str	r2, [sp, #4]
   11ff0:	ebfffcac 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   11ff4:	e3500000 	cmp	r0, #0
   11ff8:	ba000018 	blt	12060 <CUSBBulkOnlyMassStorageDevice::Reset()+0x11c>
   11ffc:	e5950010 	ldr	r0, [r5, #16]
   12000:	ebffefc3 	bl	df14 <CUSBEndpoint::ResetPID()>
   12004:	e5950014 	ldr	r0, [r5, #20]
   12008:	ebffefc1 	bl	df14 <CUSBEndpoint::ResetPID()>
   1200c:	e1a00004 	mov	r0, r4
   12010:	e28dd014 	add	sp, sp, #20
   12014:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12018:	e3a02fa2 	mov	r2, #648	; 0x288
   1201c:	e59f1058 	ldr	r1, [pc, #88]	; 1207c <CUSBBulkOnlyMassStorageDevice::Reset()+0x138>
   12020:	e59f0058 	ldr	r0, [pc, #88]	; 12080 <CUSBBulkOnlyMassStorageDevice::Reset()+0x13c>
   12024:	eb004595 	bl	23680 <assertion_failed>
   12028:	eb004e87 	bl	25a4c <CLogger::Get()>
   1202c:	e59f3050 	ldr	r3, [pc, #80]	; 12084 <CUSBBulkOnlyMassStorageDevice::Reset()+0x140>
   12030:	e3a02004 	mov	r2, #4
   12034:	e59f104c 	ldr	r1, [pc, #76]	; 12088 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   12038:	eb004dc0 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1203c:	e3e00000 	mvn	r0, #0
   12040:	eafffff2 	b	12010 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   12044:	eb004e80 	bl	25a4c <CLogger::Get()>
   12048:	e59f303c 	ldr	r3, [pc, #60]	; 1208c <CUSBBulkOnlyMassStorageDevice::Reset()+0x148>
   1204c:	e3a02004 	mov	r2, #4
   12050:	e59f1030 	ldr	r1, [pc, #48]	; 12088 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   12054:	eb004db9 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12058:	e3e00000 	mvn	r0, #0
   1205c:	eaffffeb 	b	12010 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   12060:	eb004e79 	bl	25a4c <CLogger::Get()>
   12064:	e59f3024 	ldr	r3, [pc, #36]	; 12090 <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
   12068:	e3a02004 	mov	r2, #4
   1206c:	e59f1014 	ldr	r1, [pc, #20]	; 12088 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   12070:	eb004db2 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12074:	e3e00000 	mvn	r0, #0
   12078:	eaffffe4 	b	12010 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   1207c:	000360b4 	.word	0x000360b4
   12080:	00036148 	.word	0x00036148
   12084:	000361f8 	.word	0x000361f8
   12088:	000360a4 	.word	0x000360a4
   1208c:	0003620c 	.word	0x0003620c
   12090:	0003622c 	.word	0x0003622c

00012094 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
   12094:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12098:	e1a06002 	mov	r6, r2
   1209c:	e1a07000 	mov	r7, r0
   120a0:	e1a08001 	mov	r8, r1
   120a4:	e1a09002 	mov	r9, r2
   120a8:	e3a05004 	mov	r5, #4
   120ac:	e1a02006 	mov	r2, r6
   120b0:	e1a01008 	mov	r1, r8
   120b4:	e1a00007 	mov	r0, r7
   120b8:	ebffff0f 	bl	11cfc <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
   120bc:	e1500006 	cmp	r0, r6
   120c0:	e1a04000 	mov	r4, r0
   120c4:	1a000001 	bne	120d0 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x3c>
   120c8:	e1a00009 	mov	r0, r9
   120cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   120d0:	e1a00007 	mov	r0, r7
   120d4:	ebffff9a 	bl	11f44 <CUSBBulkOnlyMassStorageDevice::Reset()>
   120d8:	e3500000 	cmp	r0, #0
   120dc:	1a000004 	bne	120f4 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
   120e0:	e2555001 	subs	r5, r5, #1
   120e4:	1afffff0 	bne	120ac <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
   120e8:	e1a09004 	mov	r9, r4
   120ec:	e1a00009 	mov	r0, r9
   120f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   120f4:	e1a09000 	mov	r9, r0
   120f8:	eafffff2 	b	120c8 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x34>

000120fc <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
   120fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12100:	e1a06002 	mov	r6, r2
   12104:	e1a07000 	mov	r7, r0
   12108:	e1a08001 	mov	r8, r1
   1210c:	e1a09002 	mov	r9, r2
   12110:	e3a05004 	mov	r5, #4
   12114:	e1a02006 	mov	r2, r6
   12118:	e1a01008 	mov	r1, r8
   1211c:	e1a00007 	mov	r0, r7
   12120:	ebffff3f 	bl	11e24 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
   12124:	e1500006 	cmp	r0, r6
   12128:	e1a04000 	mov	r4, r0
   1212c:	1a000001 	bne	12138 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x3c>
   12130:	e1a00009 	mov	r0, r9
   12134:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12138:	e1a00007 	mov	r0, r7
   1213c:	ebffff80 	bl	11f44 <CUSBBulkOnlyMassStorageDevice::Reset()>
   12140:	e3500000 	cmp	r0, #0
   12144:	1a000004 	bne	1215c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
   12148:	e2555001 	subs	r5, r5, #1
   1214c:	1afffff0 	bne	12114 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
   12150:	e1a09004 	mov	r9, r4
   12154:	e1a00009 	mov	r0, r9
   12158:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1215c:	e1a09000 	mov	r9, r0
   12160:	eafffff2 	b	12130 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x34>

00012164 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   12164:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12168:	e24dd064 	sub	sp, sp, #100	; 0x64
   1216c:	e1a05000 	mov	r5, r0
   12170:	ebfff058 	bl	e2d8 <CUSBFunction::GetNumEndpoints() const>
   12174:	e3500001 	cmp	r0, #1
   12178:	c3a06005 	movgt	r6, #5
   1217c:	c3a07014 	movgt	r7, #20
   12180:	ca000004 	bgt	12198 <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   12184:	ea0000e6 	b	12524 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3c0>
   12188:	e5d43003 	ldrb	r3, [r4, #3]
   1218c:	e203303f 	and	r3, r3, #63	; 0x3f
   12190:	e3530002 	cmp	r3, #2
   12194:	0a0000a2 	beq	12424 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c0>
   12198:	e1a01006 	mov	r1, r6
   1219c:	e1a00005 	mov	r0, r5
   121a0:	ebfff079 	bl	e38c <CUSBFunction::GetDescriptor(unsigned char)>
   121a4:	e2504000 	subs	r4, r0, #0
   121a8:	1afffff6 	bne	12188 <CUSBBulkOnlyMassStorageDevice::Configure()+0x24>
   121ac:	e5953010 	ldr	r3, [r5, #16]
   121b0:	e1a00005 	mov	r0, r5
   121b4:	e3530000 	cmp	r3, #0
   121b8:	0a0000b2 	beq	12488 <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   121bc:	e5953014 	ldr	r3, [r5, #20]
   121c0:	e3530000 	cmp	r3, #0
   121c4:	0a0000af 	beq	12488 <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   121c8:	ebffef8a 	bl	dff8 <CUSBFunction::Configure()>
   121cc:	e2506000 	subs	r6, r0, #0
   121d0:	0a0000a4 	beq	12468 <CUSBBulkOnlyMassStorageDevice::Configure()+0x304>
   121d4:	e3a0c024 	mov	ip, #36	; 0x24
   121d8:	e3a06001 	mov	r6, #1
   121dc:	e3a07012 	mov	r7, #18
   121e0:	e58dc000 	str	ip, [sp]
   121e4:	e58d6004 	str	r6, [sp, #4]
   121e8:	e28d303c 	add	r3, sp, #60	; 0x3c
   121ec:	e3a02006 	mov	r2, #6
   121f0:	e28d100c 	add	r1, sp, #12
   121f4:	e1a00005 	mov	r0, r5
   121f8:	e5cd400d 	strb	r4, [sp, #13]
   121fc:	e5cd400e 	strb	r4, [sp, #14]
   12200:	e5cd400f 	strb	r4, [sp, #15]
   12204:	e5cd4011 	strb	r4, [sp, #17]
   12208:	e5cdc010 	strb	ip, [sp, #16]
   1220c:	e5cd700c 	strb	r7, [sp, #12]
   12210:	ebfffe0c 	bl	11a48 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12214:	e3500024 	cmp	r0, #36	; 0x24
   12218:	1a0000b8 	bne	12500 <CUSBBulkOnlyMassStorageDevice::Configure()+0x39c>
   1221c:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   12220:	e213301f 	ands	r3, r3, #31
   12224:	1a0000ab 	bne	124d8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x374>
   12228:	e1a04003 	mov	r4, r3
   1222c:	e3a06063 	mov	r6, #99	; 0x63
   12230:	e3a0a064 	mov	sl, #100	; 0x64
   12234:	e3a08006 	mov	r8, #6
   12238:	e3a0b003 	mov	fp, #3
   1223c:	ea000010 	b	12284 <CUSBBulkOnlyMassStorageDevice::Configure()+0x120>
   12240:	e3a09001 	mov	r9, #1
   12244:	e3a0c000 	mov	ip, #0
   12248:	e88d0280 	stm	sp, {r7, r9}
   1224c:	e28d3028 	add	r3, sp, #40	; 0x28
   12250:	e1a02008 	mov	r2, r8
   12254:	e28d101c 	add	r1, sp, #28
   12258:	e1a00005 	mov	r0, r5
   1225c:	e5cdb01c 	strb	fp, [sp, #28]
   12260:	e1cd41be 	strh	r4, [sp, #30]
   12264:	e5cd7020 	strb	r7, [sp, #32]
   12268:	e5cd4021 	strb	r4, [sp, #33]	; 0x21
   1226c:	e5cdc01d 	strb	ip, [sp, #29]
   12270:	ebfffdf4 	bl	11a48 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12274:	e3500000 	cmp	r0, #0
   12278:	ba0000ae 	blt	12538 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3d4>
   1227c:	e2566001 	subs	r6, r6, #1
   12280:	0a0000bb 	beq	12574 <CUSBBulkOnlyMassStorageDevice::Configure()+0x410>
   12284:	eb005abd 	bl	28d80 <CTimer::Get()>
   12288:	e1a0000a 	mov	r0, sl
   1228c:	eb005a82 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
   12290:	e58d4004 	str	r4, [sp, #4]
   12294:	e58d4000 	str	r4, [sp]
   12298:	e3a03000 	mov	r3, #0
   1229c:	e1a02008 	mov	r2, r8
   122a0:	e28d1014 	add	r1, sp, #20
   122a4:	e1a00005 	mov	r0, r5
   122a8:	e5cd4014 	strb	r4, [sp, #20]
   122ac:	e5cd4015 	strb	r4, [sp, #21]
   122b0:	e5cd4016 	strb	r4, [sp, #22]
   122b4:	e5cd4017 	strb	r4, [sp, #23]
   122b8:	e5cd4018 	strb	r4, [sp, #24]
   122bc:	e5cd4019 	strb	r4, [sp, #25]
   122c0:	ebfffde0 	bl	11a48 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   122c4:	e3500000 	cmp	r0, #0
   122c8:	baffffdc 	blt	12240 <CUSBBulkOnlyMassStorageDevice::Configure()+0xdc>
   122cc:	e3a02008 	mov	r2, #8
   122d0:	e3a00025 	mov	r0, #37	; 0x25
   122d4:	e3a06001 	mov	r6, #1
   122d8:	e3a0e000 	mov	lr, #0
   122dc:	e88d0044 	stm	sp, {r2, r6}
   122e0:	e5cd001c 	strb	r0, [sp, #28]
   122e4:	e28d3014 	add	r3, sp, #20
   122e8:	e28d101c 	add	r1, sp, #28
   122ec:	e3a0200a 	mov	r2, #10
   122f0:	e1a00005 	mov	r0, r5
   122f4:	e1cd41be 	strh	r4, [sp, #30]
   122f8:	e1cd42b0 	strh	r4, [sp, #32]
   122fc:	e1cd42b2 	strh	r4, [sp, #34]	; 0x22
   12300:	e5cd4025 	strb	r4, [sp, #37]	; 0x25
   12304:	e5cde01d 	strb	lr, [sp, #29]
   12308:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   1230c:	ebfffdcd 	bl	11a48 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12310:	e3500008 	cmp	r0, #8
   12314:	1a00009c 	bne	1258c <CUSBBulkOnlyMassStorageDevice::Configure()+0x428>
   12318:	e59d4018 	ldr	r4, [sp, #24]
   1231c:	e6bf4f34 	rev	r4, r4
   12320:	e3540c02 	cmp	r4, #512	; 0x200
   12324:	1a00008a 	bne	12554 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3f0>
   12328:	e59d3014 	ldr	r3, [sp, #20]
   1232c:	e6bf3f33 	rev	r3, r3
   12330:	e3730001 	cmn	r3, #1
   12334:	e585301c 	str	r3, [r5, #28]
   12338:	0a0000ab 	beq	125ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
   1233c:	e2833001 	add	r3, r3, #1
   12340:	e585301c 	str	r3, [r5, #28]
   12344:	eb004dc0 	bl	25a4c <CLogger::Get()>
   12348:	e595201c 	ldr	r2, [r5, #28]
   1234c:	e59f72d4 	ldr	r7, [pc, #724]	; 12628 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4c4>
   12350:	e1a025a2 	lsr	r2, r2, #11
   12354:	e59f32d0 	ldr	r3, [pc, #720]	; 1262c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4c8>
   12358:	e58d2000 	str	r2, [sp]
   1235c:	e59f12cc 	ldr	r1, [pc, #716]	; 12630 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12360:	e3a02004 	mov	r2, #4
   12364:	eb004cf5 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12368:	e1a04006 	mov	r4, r6
   1236c:	e1a03006 	mov	r3, r6
   12370:	e5971000 	ldr	r1, [r7]
   12374:	ea000002 	b	12384 <CUSBBulkOnlyMassStorageDevice::Configure()+0x220>
   12378:	e2833001 	add	r3, r3, #1
   1237c:	e3530020 	cmp	r3, #32
   12380:	0a000088 	beq	125a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x444>
   12384:	e1a02314 	lsl	r2, r4, r3
   12388:	e1120001 	tst	r2, r1
   1238c:	1afffff9 	bne	12378 <CUSBBulkOnlyMassStorageDevice::Configure()+0x214>
   12390:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
   12394:	e1822001 	orr	r2, r2, r1
   12398:	e3500000 	cmp	r0, #0
   1239c:	e5872000 	str	r2, [r7]
   123a0:	1a00009c 	bne	12618 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b4>
   123a4:	e585302c 	str	r3, [r5, #44]	; 0x2c
   123a8:	e28d0028 	add	r0, sp, #40	; 0x28
   123ac:	eb00518c 	bl	269e4 <CString::CString()>
   123b0:	e28d0028 	add	r0, sp, #40	; 0x28
   123b4:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   123b8:	e59f1274 	ldr	r1, [pc, #628]	; 12634 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4d0>
   123bc:	eb0056cb 	bl	27ef0 <CString::Format(char const*, ...)>
   123c0:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   123c4:	e3530000 	cmp	r3, #0
   123c8:	1a00008e 	bne	12608 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a4>
   123cc:	e28d0028 	add	r0, sp, #40	; 0x28
   123d0:	eb005199 	bl	26a3c <CString::operator char const*() const>
   123d4:	e1a08000 	mov	r8, r0
   123d8:	e3a00024 	mov	r0, #36	; 0x24
   123dc:	eb005ec4 	bl	29ef4 <operator new(unsigned int)>
   123e0:	e1a06000 	mov	r6, r0
   123e4:	e1a02008 	mov	r2, r8
   123e8:	e1a01005 	mov	r1, r5
   123ec:	eb0016aa 	bl	17e9c <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   123f0:	e5856028 	str	r6, [r5, #40]	; 0x28
   123f4:	e1a00006 	mov	r0, r6
   123f8:	eb0016e5 	bl	17f94 <CPartitionManager::Initialize()>
   123fc:	e2506000 	subs	r6, r0, #0
   12400:	1a00006f 	bne	125c4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x460>
   12404:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   12408:	e5973000 	ldr	r3, [r7]
   1240c:	e585602c 	str	r6, [r5, #44]	; 0x2c
   12410:	e1c34214 	bic	r4, r3, r4, lsl r2
   12414:	e5874000 	str	r4, [r7]
   12418:	e28d0028 	add	r0, sp, #40	; 0x28
   1241c:	eb00513d 	bl	26918 <CString::~CString()>
   12420:	ea000015 	b	1247c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   12424:	e1d430d2 	ldrsb	r3, [r4, #2]
   12428:	e3530000 	cmp	r3, #0
   1242c:	ba00001b 	blt	124a0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x33c>
   12430:	e5953014 	ldr	r3, [r5, #20]
   12434:	e1a00005 	mov	r0, r5
   12438:	e3530000 	cmp	r3, #0
   1243c:	1a000011 	bne	12488 <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   12440:	ebffefb0 	bl	e308 <CUSBFunction::GetDevice() const>
   12444:	e1a09000 	mov	r9, r0
   12448:	e1a00007 	mov	r0, r7
   1244c:	eb005ea8 	bl	29ef4 <operator new(unsigned int)>
   12450:	e1a08000 	mov	r8, r0
   12454:	e1a02004 	mov	r2, r4
   12458:	e1a01009 	mov	r1, r9
   1245c:	ebffede6 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12460:	e5858014 	str	r8, [r5, #20]
   12464:	eaffff4b 	b	12198 <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   12468:	eb004d77 	bl	25a4c <CLogger::Get()>
   1246c:	e59f31c4 	ldr	r3, [pc, #452]	; 12638 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4d4>
   12470:	e3a02001 	mov	r2, #1
   12474:	e59f11b4 	ldr	r1, [pc, #436]	; 12630 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12478:	eb004cb0 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1247c:	e1a00006 	mov	r0, r6
   12480:	e28dd064 	add	sp, sp, #100	; 0x64
   12484:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12488:	e3a06000 	mov	r6, #0
   1248c:	e59f119c 	ldr	r1, [pc, #412]	; 12630 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12490:	ebffefc8 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   12494:	e1a00006 	mov	r0, r6
   12498:	e28dd064 	add	sp, sp, #100	; 0x64
   1249c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124a0:	e5953010 	ldr	r3, [r5, #16]
   124a4:	e1a00005 	mov	r0, r5
   124a8:	e3530000 	cmp	r3, #0
   124ac:	1afffff5 	bne	12488 <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   124b0:	ebffef94 	bl	e308 <CUSBFunction::GetDevice() const>
   124b4:	e1a09000 	mov	r9, r0
   124b8:	e1a00007 	mov	r0, r7
   124bc:	eb005e8c 	bl	29ef4 <operator new(unsigned int)>
   124c0:	e1a08000 	mov	r8, r0
   124c4:	e1a02004 	mov	r2, r4
   124c8:	e1a01009 	mov	r1, r9
   124cc:	ebffedca 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   124d0:	e5858010 	str	r8, [r5, #16]
   124d4:	eaffff2f 	b	12198 <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   124d8:	eb004d5b 	bl	25a4c <CLogger::Get()>
   124dc:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   124e0:	e1a02006 	mov	r2, r6
   124e4:	e203301f 	and	r3, r3, #31
   124e8:	e58d3000 	str	r3, [sp]
   124ec:	e59f113c 	ldr	r1, [pc, #316]	; 12630 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   124f0:	e59f3144 	ldr	r3, [pc, #324]	; 1263c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4d8>
   124f4:	e1a06004 	mov	r6, r4
   124f8:	eb004c90 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   124fc:	eaffffde 	b	1247c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   12500:	eb004d51 	bl	25a4c <CLogger::Get()>
   12504:	e1a02006 	mov	r2, r6
   12508:	e1a06004 	mov	r6, r4
   1250c:	e59f312c 	ldr	r3, [pc, #300]	; 12640 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4dc>
   12510:	e59f1118 	ldr	r1, [pc, #280]	; 12630 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12514:	eb004c89 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12518:	e1a00006 	mov	r0, r6
   1251c:	e28dd064 	add	sp, sp, #100	; 0x64
   12520:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12524:	e1a00005 	mov	r0, r5
   12528:	e59f1100 	ldr	r1, [pc, #256]	; 12630 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   1252c:	ebffefa1 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   12530:	e3a06000 	mov	r6, #0
   12534:	eaffffd0 	b	1247c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   12538:	eb004d43 	bl	25a4c <CLogger::Get()>
   1253c:	e1a02009 	mov	r2, r9
   12540:	e59f30fc 	ldr	r3, [pc, #252]	; 12644 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4e0>
   12544:	e59f10e4 	ldr	r1, [pc, #228]	; 12630 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12548:	eb004c7c 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1254c:	e3a06000 	mov	r6, #0
   12550:	eaffffc9 	b	1247c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   12554:	eb004d3c 	bl	25a4c <CLogger::Get()>
   12558:	e1a02006 	mov	r2, r6
   1255c:	e58d4000 	str	r4, [sp]
   12560:	e59f30e0 	ldr	r3, [pc, #224]	; 12648 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4e4>
   12564:	e59f10c4 	ldr	r1, [pc, #196]	; 12630 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12568:	eb004c74 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1256c:	e3a06000 	mov	r6, #0
   12570:	eaffffc1 	b	1247c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   12574:	eb004d34 	bl	25a4c <CLogger::Get()>
   12578:	e1a02009 	mov	r2, r9
   1257c:	e59f30c8 	ldr	r3, [pc, #200]	; 1264c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4e8>
   12580:	e59f10a8 	ldr	r1, [pc, #168]	; 12630 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   12584:	eb004c6d 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12588:	eaffffbb 	b	1247c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   1258c:	eb004d2e 	bl	25a4c <CLogger::Get()>
   12590:	e1a02006 	mov	r2, r6
   12594:	e59f30b4 	ldr	r3, [pc, #180]	; 12650 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4ec>
   12598:	e59f1090 	ldr	r1, [pc, #144]	; 12630 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   1259c:	eb004c67 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   125a0:	e3a06000 	mov	r6, #0
   125a4:	eaffffb4 	b	1247c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   125a8:	eb004d27 	bl	25a4c <CLogger::Get()>
   125ac:	e59f30a0 	ldr	r3, [pc, #160]	; 12654 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4f0>
   125b0:	e3a02001 	mov	r2, #1
   125b4:	e59f1074 	ldr	r1, [pc, #116]	; 12630 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   125b8:	eb004c60 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   125bc:	e3a06000 	mov	r6, #0
   125c0:	eaffffad 	b	1247c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   125c4:	eb004707 	bl	241e8 <CDeviceNameService::Get()>
   125c8:	e1a04000 	mov	r4, r0
   125cc:	e28d0028 	add	r0, sp, #40	; 0x28
   125d0:	eb005119 	bl	26a3c <CString::operator char const*() const>
   125d4:	e1a02005 	mov	r2, r5
   125d8:	e1a01000 	mov	r1, r0
   125dc:	e3a03001 	mov	r3, #1
   125e0:	e1a00004 	mov	r0, r4
   125e4:	eb004645 	bl	23f00 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   125e8:	eaffff8a 	b	12418 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2b4>
   125ec:	eb004d16 	bl	25a4c <CLogger::Get()>
   125f0:	e1a02006 	mov	r2, r6
   125f4:	e59f305c 	ldr	r3, [pc, #92]	; 12658 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4f4>
   125f8:	e59f1030 	ldr	r1, [pc, #48]	; 12630 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   125fc:	eb004c4f 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12600:	e3a06000 	mov	r6, #0
   12604:	eaffff9c 	b	1247c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   12608:	e59f204c 	ldr	r2, [pc, #76]	; 1265c <CUSBBulkOnlyMassStorageDevice::Configure()+0x4f8>
   1260c:	e59f104c 	ldr	r1, [pc, #76]	; 12660 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4fc>
   12610:	e59f004c 	ldr	r0, [pc, #76]	; 12664 <CUSBBulkOnlyMassStorageDevice::Configure()+0x500>
   12614:	eb004419 	bl	23680 <assertion_failed>
   12618:	e59f2048 	ldr	r2, [pc, #72]	; 12668 <CUSBBulkOnlyMassStorageDevice::Configure()+0x504>
   1261c:	e59f103c 	ldr	r1, [pc, #60]	; 12660 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4fc>
   12620:	e59f0044 	ldr	r0, [pc, #68]	; 1266c <CUSBBulkOnlyMassStorageDevice::Configure()+0x508>
   12624:	eb004415 	bl	23680 <assertion_failed>
   12628:	0003e370 	.word	0x0003e370
   1262c:	000362ec 	.word	0x000362ec
   12630:	000360a4 	.word	0x000360a4
   12634:	0003631c 	.word	0x0003631c
   12638:	00035810 	.word	0x00035810
   1263c:	00036264 	.word	0x00036264
   12640:	0003624c 	.word	0x0003624c
   12644:	00036284 	.word	0x00036284
   12648:	000362b4 	.word	0x000362b4
   1264c:	00036340 	.word	0x00036340
   12650:	0003629c 	.word	0x0003629c
   12654:	000354e8 	.word	0x000354e8
   12658:	000362d0 	.word	0x000362d0
   1265c:	0000019d 	.word	0x0000019d
   12660:	000360b4 	.word	0x000360b4
   12664:	00036324 	.word	0x00036324
   12668:	00000197 	.word	0x00000197
   1266c:	00036304 	.word	0x00036304

00012670 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   12670:	e92d4070 	push	{r4, r5, r6, lr}
   12674:	e1a04000 	mov	r4, r0
   12678:	e5900020 	ldr	r0, [r0, #32]
   1267c:	e59f304c 	ldr	r3, [pc, #76]	; 126d0 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
   12680:	e3500000 	cmp	r0, #0
   12684:	e5843000 	str	r3, [r4]
   12688:	0a000002 	beq	12698 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
   1268c:	eb005e20 	bl	29f14 <operator delete[](void*)>
   12690:	e3a03000 	mov	r3, #0
   12694:	e5843020 	str	r3, [r4, #32]
   12698:	e5945010 	ldr	r5, [r4, #16]
   1269c:	e3550000 	cmp	r5, #0
   126a0:	0a000006 	beq	126c0 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x50>
   126a4:	e1a00005 	mov	r0, r5
   126a8:	ebffedbd 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   126ac:	e1a00005 	mov	r0, r5
   126b0:	e3a01014 	mov	r1, #20
   126b4:	eb005e1c 	bl	29f2c <operator delete(void*, unsigned int)>
   126b8:	e3a03000 	mov	r3, #0
   126bc:	e5843010 	str	r3, [r4, #16]
   126c0:	e1a00004 	mov	r0, r4
   126c4:	ebffee22 	bl	df54 <CUSBFunction::~CUSBFunction()>
   126c8:	e1a00004 	mov	r0, r4
   126cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   126d0:	0003635c 	.word	0x0003635c

000126d4 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   126d4:	e92d4010 	push	{r4, lr}
   126d8:	e1a04000 	mov	r4, r0
   126dc:	ebffffe3 	bl	12670 <CUSBMIDIDevice::~CUSBMIDIDevice()>
   126e0:	e1a00004 	mov	r0, r4
   126e4:	e3a01028 	mov	r1, #40	; 0x28
   126e8:	eb005e0f 	bl	29f2c <operator delete(void*, unsigned int)>
   126ec:	e1a00004 	mov	r0, r4
   126f0:	e8bd8010 	pop	{r4, pc}

000126f4 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   126f4:	e92d4010 	push	{r4, lr}
   126f8:	e1a04000 	mov	r4, r0
   126fc:	ebffeea5 	bl	e198 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   12700:	e3a03000 	mov	r3, #0
   12704:	e59f201c 	ldr	r2, [pc, #28]	; 12728 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x34>
   12708:	e5843010 	str	r3, [r4, #16]
   1270c:	e5842000 	str	r2, [r4]
   12710:	e5843014 	str	r3, [r4, #20]
   12714:	e5843018 	str	r3, [r4, #24]
   12718:	e5843020 	str	r3, [r4, #32]
   1271c:	e5843024 	str	r3, [r4, #36]	; 0x24
   12720:	e1a00004 	mov	r0, r4
   12724:	e8bd8010 	pop	{r4, pc}
   12728:	0003635c 	.word	0x0003635c

0001272c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   1272c:	e5903014 	ldr	r3, [r0, #20]
   12730:	e92d4010 	push	{r4, lr}
   12734:	e3530000 	cmp	r3, #0
   12738:	1a000006 	bne	12758 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x2c>
   1273c:	e3510000 	cmp	r1, #0
   12740:	e5801014 	str	r1, [r0, #20]
   12744:	18bd8010 	popne	{r4, pc}
   12748:	e3a0209b 	mov	r2, #155	; 0x9b
   1274c:	e59f1014 	ldr	r1, [pc, #20]	; 12768 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
   12750:	e59f0014 	ldr	r0, [pc, #20]	; 1276c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x40>
   12754:	eb0043c9 	bl	23680 <assertion_failed>
   12758:	e3a02099 	mov	r2, #153	; 0x99
   1275c:	e59f1004 	ldr	r1, [pc, #4]	; 12768 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
   12760:	e59f0008 	ldr	r0, [pc, #8]	; 12770 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x44>
   12764:	eb0043c5 	bl	23680 <assertion_failed>
   12768:	000363c8 	.word	0x000363c8
   1276c:	000363ec 	.word	0x000363ec
   12770:	000363d4 	.word	0x000363d4

00012774 <CUSBMIDIDevice::StartRequest()>:
   12774:	e92d4070 	push	{r4, r5, r6, lr}
   12778:	e5903010 	ldr	r3, [r0, #16]
   1277c:	e24dd008 	sub	sp, sp, #8
   12780:	e3530000 	cmp	r3, #0
   12784:	0a000022 	beq	12814 <CUSBMIDIDevice::StartRequest()+0xa0>
   12788:	e5903020 	ldr	r3, [r0, #32]
   1278c:	e1a04000 	mov	r4, r0
   12790:	e3530000 	cmp	r3, #0
   12794:	0a000022 	beq	12824 <CUSBMIDIDevice::StartRequest()+0xb0>
   12798:	e5905018 	ldr	r5, [r0, #24]
   1279c:	e3550000 	cmp	r5, #0
   127a0:	1a000023 	bne	12834 <CUSBMIDIDevice::StartRequest()+0xc0>
   127a4:	e1d031bc 	ldrh	r3, [r0, #28]
   127a8:	e3530000 	cmp	r3, #0
   127ac:	0a000024 	beq	12844 <CUSBMIDIDevice::StartRequest()+0xd0>
   127b0:	e3a00028 	mov	r0, #40	; 0x28
   127b4:	eb000346 	bl	134d4 <CUSBRequest::operator new(unsigned int)>
   127b8:	e1a06000 	mov	r6, r0
   127bc:	e1d431bc 	ldrh	r3, [r4, #28]
   127c0:	e5942020 	ldr	r2, [r4, #32]
   127c4:	e5941010 	ldr	r1, [r4, #16]
   127c8:	e58d5000 	str	r5, [sp]
   127cc:	eb0002bb 	bl	132c0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   127d0:	e1a03004 	mov	r3, r4
   127d4:	e1a02005 	mov	r2, r5
   127d8:	e59f1074 	ldr	r1, [pc, #116]	; 12854 <CUSBMIDIDevice::StartRequest()+0xe0>
   127dc:	e1a00006 	mov	r0, r6
   127e0:	e5846018 	str	r6, [r4, #24]
   127e4:	eb000319 	bl	13450 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   127e8:	e5940018 	ldr	r0, [r4, #24]
   127ec:	eb000333 	bl	134c0 <CUSBRequest::SetCompleteOnNAK()>
   127f0:	e1a00004 	mov	r0, r4
   127f4:	ebffeed9 	bl	e360 <CUSBFunction::GetHost() const>
   127f8:	e1a02005 	mov	r2, r5
   127fc:	e5903000 	ldr	r3, [r0]
   12800:	e5941018 	ldr	r1, [r4, #24]
   12804:	e593300c 	ldr	r3, [r3, #12]
   12808:	e28dd008 	add	sp, sp, #8
   1280c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12810:	e12fff13 	bx	r3
   12814:	e3a020a0 	mov	r2, #160	; 0xa0
   12818:	e59f1038 	ldr	r1, [pc, #56]	; 12858 <CUSBMIDIDevice::StartRequest()+0xe4>
   1281c:	e59f0038 	ldr	r0, [pc, #56]	; 1285c <CUSBMIDIDevice::StartRequest()+0xe8>
   12820:	eb004396 	bl	23680 <assertion_failed>
   12824:	e3a020a1 	mov	r2, #161	; 0xa1
   12828:	e59f1028 	ldr	r1, [pc, #40]	; 12858 <CUSBMIDIDevice::StartRequest()+0xe4>
   1282c:	e59f002c 	ldr	r0, [pc, #44]	; 12860 <CUSBMIDIDevice::StartRequest()+0xec>
   12830:	eb004392 	bl	23680 <assertion_failed>
   12834:	e3a020a3 	mov	r2, #163	; 0xa3
   12838:	e59f1018 	ldr	r1, [pc, #24]	; 12858 <CUSBMIDIDevice::StartRequest()+0xe4>
   1283c:	e59f0020 	ldr	r0, [pc, #32]	; 12864 <CUSBMIDIDevice::StartRequest()+0xf0>
   12840:	eb00438e 	bl	23680 <assertion_failed>
   12844:	e3a020a4 	mov	r2, #164	; 0xa4
   12848:	e59f1008 	ldr	r1, [pc, #8]	; 12858 <CUSBMIDIDevice::StartRequest()+0xe4>
   1284c:	e59f0014 	ldr	r0, [pc, #20]	; 12868 <CUSBMIDIDevice::StartRequest()+0xf4>
   12850:	eb00438a 	bl	23680 <assertion_failed>
   12854:	00012a78 	.word	0x00012a78
   12858:	000363c8 	.word	0x000363c8
   1285c:	00036404 	.word	0x00036404
   12860:	00036418 	.word	0x00036418
   12864:	00035f74 	.word	0x00035f74
   12868:	00036430 	.word	0x00036430

0001286c <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
   1286c:	e3520000 	cmp	r2, #0
   12870:	e92d4010 	push	{r4, lr}
   12874:	0a000007 	beq	12898 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
   12878:	e5923024 	ldr	r3, [r2, #36]	; 0x24
   1287c:	e1500003 	cmp	r0, r3
   12880:	1a000008 	bne	128a8 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
   12884:	e8bd4010 	pop	{r4, lr}
   12888:	e3a03000 	mov	r3, #0
   1288c:	e1a00002 	mov	r0, r2
   12890:	e5823024 	str	r3, [r2, #36]	; 0x24
   12894:	eaffffb6 	b	12774 <CUSBMIDIDevice::StartRequest()>
   12898:	e3a020f0 	mov	r2, #240	; 0xf0
   1289c:	e59f1014 	ldr	r1, [pc, #20]	; 128b8 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
   128a0:	e59f0014 	ldr	r0, [pc, #20]	; 128bc <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x50>
   128a4:	eb004375 	bl	23680 <assertion_failed>
   128a8:	e3a020e7 	mov	r2, #231	; 0xe7
   128ac:	e59f1004 	ldr	r1, [pc, #4]	; 128b8 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
   128b0:	e59f0008 	ldr	r0, [pc, #8]	; 128c0 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x54>
   128b4:	eb004371 	bl	23680 <assertion_failed>
   128b8:	000363c8 	.word	0x000363c8
   128bc:	0003466c 	.word	0x0003466c
   128c0:	00036444 	.word	0x00036444

000128c4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   128c4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   128c8:	e2514000 	subs	r4, r1, #0
   128cc:	e24dd00c 	sub	sp, sp, #12
   128d0:	0a000050 	beq	12a18 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x154>
   128d4:	e5903018 	ldr	r3, [r0, #24]
   128d8:	e1a05000 	mov	r5, r0
   128dc:	e1540003 	cmp	r4, r3
   128e0:	1a000050 	bne	12a28 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x164>
   128e4:	e1a00004 	mov	r0, r4
   128e8:	eb0002a5 	bl	13384 <CUSBRequest::GetStatus() const>
   128ec:	e3500000 	cmp	r0, #0
   128f0:	1a00001a 	bne	12960 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x9c>
   128f4:	e5954018 	ldr	r4, [r5, #24]
   128f8:	e3540000 	cmp	r4, #0
   128fc:	13a09000 	movne	r9, #0
   12900:	0a000008 	beq	12928 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x64>
   12904:	e1a00004 	mov	r0, r4
   12908:	eb00028d 	bl	13344 <CUSBRequest::~CUSBRequest()>
   1290c:	e1a00004 	mov	r0, r4
   12910:	e3a01028 	mov	r1, #40	; 0x28
   12914:	eb000303 	bl	13528 <CUSBRequest::operator delete(void*, unsigned int)>
   12918:	e3a03000 	mov	r3, #0
   1291c:	e1590003 	cmp	r9, r3
   12920:	e5853018 	str	r3, [r5, #24]
   12924:	1a000033 	bne	129f8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x134>
   12928:	e5954024 	ldr	r4, [r5, #36]	; 0x24
   1292c:	e3540000 	cmp	r4, #0
   12930:	1a000040 	bne	12a38 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
   12934:	eb005911 	bl	28d80 <CTimer::Get()>
   12938:	e58d5000 	str	r5, [sp]
   1293c:	e1a03004 	mov	r3, r4
   12940:	e59f2110 	ldr	r2, [pc, #272]	; 12a58 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x194>
   12944:	e3a01001 	mov	r1, #1
   12948:	eb00574c 	bl	28680 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1294c:	e3500000 	cmp	r0, #0
   12950:	e5850024 	str	r0, [r5, #36]	; 0x24
   12954:	0a00002b 	beq	12a08 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x144>
   12958:	e28dd00c 	add	sp, sp, #12
   1295c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12960:	e1a00004 	mov	r0, r4
   12964:	eb000288 	bl	1338c <CUSBRequest::GetResultLength() const>
   12968:	e2109003 	ands	r9, r0, #3
   1296c:	1affffe0 	bne	128f4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   12970:	e5956020 	ldr	r6, [r5, #32]
   12974:	e3560000 	cmp	r6, #0
   12978:	0a000032 	beq	12a48 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x184>
   1297c:	e1a00004 	mov	r0, r4
   12980:	eb000281 	bl	1338c <CUSBRequest::GetResultLength() const>
   12984:	e5954020 	ldr	r4, [r5, #32]
   12988:	e0866000 	add	r6, r6, r0
   1298c:	e1560004 	cmp	r6, r4
   12990:	9affffd7 	bls	128f4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   12994:	e3a07001 	mov	r7, #1
   12998:	e59f80bc 	ldr	r8, [pc, #188]	; 12a5c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x198>
   1299c:	e2844001 	add	r4, r4, #1
   129a0:	e5540001 	ldrb	r0, [r4, #-1]
   129a4:	e3500000 	cmp	r0, #0
   129a8:	0a00000a 	beq	129d8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x114>
   129ac:	e5959014 	ldr	r9, [r5, #20]
   129b0:	e3590000 	cmp	r9, #0
   129b4:	01a09007 	moveq	r9, r7
   129b8:	0a000006 	beq	129d8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x114>
   129bc:	e200300f 	and	r3, r0, #15
   129c0:	e0883103 	add	r3, r8, r3, lsl #2
   129c4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   129c8:	e1a00220 	lsr	r0, r0, #4
   129cc:	e1a01004 	mov	r1, r4
   129d0:	e12fff39 	blx	r9
   129d4:	e1a09007 	mov	r9, r7
   129d8:	e2843003 	add	r3, r4, #3
   129dc:	e1560003 	cmp	r6, r3
   129e0:	e2844004 	add	r4, r4, #4
   129e4:	8affffed 	bhi	129a0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   129e8:	e5954018 	ldr	r4, [r5, #24]
   129ec:	e3540000 	cmp	r4, #0
   129f0:	1affffc3 	bne	12904 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x40>
   129f4:	eaffffc7 	b	12918 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x54>
   129f8:	e1a00005 	mov	r0, r5
   129fc:	e28dd00c 	add	sp, sp, #12
   12a00:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   12a04:	eaffff5a 	b	12774 <CUSBMIDIDevice::StartRequest()>
   12a08:	e3a020d9 	mov	r2, #217	; 0xd9
   12a0c:	e59f104c 	ldr	r1, [pc, #76]	; 12a60 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   12a10:	e59f004c 	ldr	r0, [pc, #76]	; 12a64 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a0>
   12a14:	eb004319 	bl	23680 <assertion_failed>
   12a18:	e3a020b0 	mov	r2, #176	; 0xb0
   12a1c:	e59f103c 	ldr	r1, [pc, #60]	; 12a60 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   12a20:	e59f0040 	ldr	r0, [pc, #64]	; 12a68 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a4>
   12a24:	eb004315 	bl	23680 <assertion_failed>
   12a28:	e3a020b1 	mov	r2, #177	; 0xb1
   12a2c:	e59f102c 	ldr	r1, [pc, #44]	; 12a60 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   12a30:	e59f0034 	ldr	r0, [pc, #52]	; 12a6c <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a8>
   12a34:	eb004311 	bl	23680 <assertion_failed>
   12a38:	e3a020d7 	mov	r2, #215	; 0xd7
   12a3c:	e59f101c 	ldr	r1, [pc, #28]	; 12a60 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   12a40:	e59f0028 	ldr	r0, [pc, #40]	; 12a70 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1ac>
   12a44:	eb00430d 	bl	23680 <assertion_failed>
   12a48:	e3a020b8 	mov	r2, #184	; 0xb8
   12a4c:	e59f100c 	ldr	r1, [pc, #12]	; 12a60 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   12a50:	e59f001c 	ldr	r0, [pc, #28]	; 12a74 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   12a54:	eb004309 	bl	23680 <assertion_failed>
   12a58:	0001286c 	.word	0x0001286c
   12a5c:	00036354 	.word	0x00036354
   12a60:	000363c8 	.word	0x000363c8
   12a64:	00036468 	.word	0x00036468
   12a68:	00034758 	.word	0x00034758
   12a6c:	00035f98 	.word	0x00035f98
   12a70:	00036458 	.word	0x00036458
   12a74:	00036418 	.word	0x00036418

00012a78 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   12a78:	e3520000 	cmp	r2, #0
   12a7c:	0a000002 	beq	12a8c <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   12a80:	e1a01000 	mov	r1, r0
   12a84:	e1a00002 	mov	r0, r2
   12a88:	eaffff8d 	b	128c4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   12a8c:	e92d4010 	push	{r4, lr}
   12a90:	e3a020e0 	mov	r2, #224	; 0xe0
   12a94:	e59f1004 	ldr	r1, [pc, #4]	; 12aa0 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   12a98:	e59f0004 	ldr	r0, [pc, #4]	; 12aa4 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   12a9c:	eb0042f7 	bl	23680 <assertion_failed>
   12aa0:	000363c8 	.word	0x000363c8
   12aa4:	0003466c 	.word	0x0003466c

00012aa8 <CUSBMIDIDevice::TimerHandler(unsigned int)>:
   12aa8:	e5902024 	ldr	r2, [r0, #36]	; 0x24
   12aac:	e1520001 	cmp	r2, r1
   12ab0:	1a000002 	bne	12ac0 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x18>
   12ab4:	e3a02000 	mov	r2, #0
   12ab8:	e5802024 	str	r2, [r0, #36]	; 0x24
   12abc:	eaffff2c 	b	12774 <CUSBMIDIDevice::StartRequest()>
   12ac0:	e92d4010 	push	{r4, lr}
   12ac4:	e3a020e7 	mov	r2, #231	; 0xe7
   12ac8:	e59f1004 	ldr	r1, [pc, #4]	; 12ad4 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x2c>
   12acc:	e59f0004 	ldr	r0, [pc, #4]	; 12ad8 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x30>
   12ad0:	eb0042ea 	bl	23680 <assertion_failed>
   12ad4:	000363c8 	.word	0x000363c8
   12ad8:	00036444 	.word	0x00036444

00012adc <CUSBMIDIDevice::Configure()>:
   12adc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ae0:	e24dd014 	sub	sp, sp, #20
   12ae4:	e1a05000 	mov	r5, r0
   12ae8:	ebffedfa 	bl	e2d8 <CUSBFunction::GetNumEndpoints() const>
   12aec:	e2506000 	subs	r6, r0, #0
   12af0:	e1a00005 	mov	r0, r5
   12af4:	0a000065 	beq	12c90 <CUSBMIDIDevice::Configure()+0x1b4>
   12af8:	ebffee02 	bl	e308 <CUSBFunction::GetDevice() const>
   12afc:	ebffe898 	bl	cd64 <CUSBDevice::GetDeviceDescriptor() const>
   12b00:	e3500000 	cmp	r0, #0
   12b04:	0a000072 	beq	12cd4 <CUSBMIDIDevice::Configure()+0x1f8>
   12b08:	e5d03008 	ldrb	r3, [r0, #8]
   12b0c:	e5d01009 	ldrb	r1, [r0, #9]
   12b10:	e59f21e0 	ldr	r2, [pc, #480]	; 12cf8 <CUSBMIDIDevice::Configure()+0x21c>
   12b14:	e1833401 	orr	r3, r3, r1, lsl #8
   12b18:	e1530002 	cmp	r3, r2
   12b1c:	05d0700a 	ldrbeq	r7, [r0, #10]
   12b20:	05d0200b 	ldrbeq	r2, [r0, #11]
   12b24:	059f31d0 	ldreq	r3, [pc, #464]	; 12cfc <CUSBMIDIDevice::Configure()+0x220>
   12b28:	01877402 	orreq	r7, r7, r2, lsl #8
   12b2c:	00477003 	subeq	r7, r7, r3
   12b30:	016f7f17 	clzeq	r7, r7
   12b34:	13a07000 	movne	r7, #0
   12b38:	e3a06005 	mov	r6, #5
   12b3c:	e3a08014 	mov	r8, #20
   12b40:	e3a09025 	mov	r9, #37	; 0x25
   12b44:	01a072a7 	lsreq	r7, r7, #5
   12b48:	e1a01006 	mov	r1, r6
   12b4c:	e1a00005 	mov	r0, r5
   12b50:	ebffee0d 	bl	e38c <CUSBFunction::GetDescriptor(unsigned char)>
   12b54:	e2504000 	subs	r4, r0, #0
   12b58:	0a00002b 	beq	12c0c <CUSBMIDIDevice::Configure()+0x130>
   12b5c:	e1d430d2 	ldrsb	r3, [r4, #2]
   12b60:	e3530000 	cmp	r3, #0
   12b64:	aafffff7 	bge	12b48 <CUSBMIDIDevice::Configure()+0x6c>
   12b68:	e5d43003 	ldrb	r3, [r4, #3]
   12b6c:	e203303f 	and	r3, r3, #63	; 0x3f
   12b70:	e3530002 	cmp	r3, #2
   12b74:	1afffff3 	bne	12b48 <CUSBMIDIDevice::Configure()+0x6c>
   12b78:	e3570000 	cmp	r7, #0
   12b7c:	0a000018 	beq	12be4 <CUSBMIDIDevice::Configure()+0x108>
   12b80:	e5953010 	ldr	r3, [r5, #16]
   12b84:	e3530000 	cmp	r3, #0
   12b88:	1a000055 	bne	12ce4 <CUSBMIDIDevice::Configure()+0x208>
   12b8c:	e1a00005 	mov	r0, r5
   12b90:	ebffeddc 	bl	e308 <CUSBFunction::GetDevice() const>
   12b94:	e1a0b000 	mov	fp, r0
   12b98:	e1a00008 	mov	r0, r8
   12b9c:	eb005cd4 	bl	29ef4 <operator new(unsigned int)>
   12ba0:	e1a0a000 	mov	sl, r0
   12ba4:	e1a02004 	mov	r2, r4
   12ba8:	e1a0100b 	mov	r1, fp
   12bac:	ebffec12 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12bb0:	e585a010 	str	sl, [r5, #16]
   12bb4:	e5d40004 	ldrb	r0, [r4, #4]
   12bb8:	e5d42005 	ldrb	r2, [r4, #5]
   12bbc:	e5953020 	ldr	r3, [r5, #32]
   12bc0:	e1800402 	orr	r0, r0, r2, lsl #8
   12bc4:	e3c00003 	bic	r0, r0, #3
   12bc8:	e6ff0070 	uxth	r0, r0
   12bcc:	e3530000 	cmp	r3, #0
   12bd0:	e1c501bc 	strh	r0, [r5, #28]
   12bd4:	1a00003a 	bne	12cc4 <CUSBMIDIDevice::Configure()+0x1e8>
   12bd8:	eb005cc6 	bl	29ef8 <operator new[](unsigned int)>
   12bdc:	e5850020 	str	r0, [r5, #32]
   12be0:	eaffffd8 	b	12b48 <CUSBMIDIDevice::Configure()+0x6c>
   12be4:	e1a01009 	mov	r1, r9
   12be8:	e1a00005 	mov	r0, r5
   12bec:	ebffede6 	bl	e38c <CUSBFunction::GetDescriptor(unsigned char)>
   12bf0:	e3500000 	cmp	r0, #0
   12bf4:	0affffd3 	beq	12b48 <CUSBMIDIDevice::Configure()+0x6c>
   12bf8:	e5d43000 	ldrb	r3, [r4]
   12bfc:	e0843003 	add	r3, r4, r3
   12c00:	e1500003 	cmp	r0, r3
   12c04:	1affffcf 	bne	12b48 <CUSBMIDIDevice::Configure()+0x6c>
   12c08:	eaffffdc 	b	12b80 <CUSBMIDIDevice::Configure()+0xa4>
   12c0c:	e5956010 	ldr	r6, [r5, #16]
   12c10:	e1a00005 	mov	r0, r5
   12c14:	e3560000 	cmp	r6, #0
   12c18:	0a00001c 	beq	12c90 <CUSBMIDIDevice::Configure()+0x1b4>
   12c1c:	ebffecf5 	bl	dff8 <CUSBFunction::Configure()>
   12c20:	e2506000 	subs	r6, r0, #0
   12c24:	0a00001e 	beq	12ca4 <CUSBMIDIDevice::Configure()+0x1c8>
   12c28:	e1a0000d 	mov	r0, sp
   12c2c:	eb004f6c 	bl	269e4 <CString::CString()>
   12c30:	e59f30c8 	ldr	r3, [pc, #200]	; 12d00 <CUSBMIDIDevice::Configure()+0x224>
   12c34:	e59f10c8 	ldr	r1, [pc, #200]	; 12d04 <CUSBMIDIDevice::Configure()+0x228>
   12c38:	e5932000 	ldr	r2, [r3]
   12c3c:	e1a0000d 	mov	r0, sp
   12c40:	e282c001 	add	ip, r2, #1
   12c44:	e583c000 	str	ip, [r3]
   12c48:	eb0054a8 	bl	27ef0 <CString::Format(char const*, ...)>
   12c4c:	eb004565 	bl	241e8 <CDeviceNameService::Get()>
   12c50:	e1a06000 	mov	r6, r0
   12c54:	e1a0000d 	mov	r0, sp
   12c58:	eb004f77 	bl	26a3c <CString::operator char const*() const>
   12c5c:	e1a03004 	mov	r3, r4
   12c60:	e1a01000 	mov	r1, r0
   12c64:	e1a02005 	mov	r2, r5
   12c68:	e1a00006 	mov	r0, r6
   12c6c:	eb0044a3 	bl	23f00 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   12c70:	e1a00005 	mov	r0, r5
   12c74:	ebfffebe 	bl	12774 <CUSBMIDIDevice::StartRequest()>
   12c78:	e1a06000 	mov	r6, r0
   12c7c:	e1a0000d 	mov	r0, sp
   12c80:	eb004f24 	bl	26918 <CString::~CString()>
   12c84:	e1a00006 	mov	r0, r6
   12c88:	e28dd014 	add	sp, sp, #20
   12c8c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c90:	e59f1070 	ldr	r1, [pc, #112]	; 12d08 <CUSBMIDIDevice::Configure()+0x22c>
   12c94:	ebffedc7 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   12c98:	e1a00006 	mov	r0, r6
   12c9c:	e28dd014 	add	sp, sp, #20
   12ca0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ca4:	eb004b68 	bl	25a4c <CLogger::Get()>
   12ca8:	e59f305c 	ldr	r3, [pc, #92]	; 12d0c <CUSBMIDIDevice::Configure()+0x230>
   12cac:	e3a02001 	mov	r2, #1
   12cb0:	e59f1050 	ldr	r1, [pc, #80]	; 12d08 <CUSBMIDIDevice::Configure()+0x22c>
   12cb4:	eb004aa1 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12cb8:	e1a00006 	mov	r0, r6
   12cbc:	e28dd014 	add	sp, sp, #20
   12cc0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cc4:	e3a0207d 	mov	r2, #125	; 0x7d
   12cc8:	e59f1040 	ldr	r1, [pc, #64]	; 12d10 <CUSBMIDIDevice::Configure()+0x234>
   12ccc:	e59f0040 	ldr	r0, [pc, #64]	; 12d14 <CUSBMIDIDevice::Configure()+0x238>
   12cd0:	eb00426a 	bl	23680 <assertion_failed>
   12cd4:	e3a02051 	mov	r2, #81	; 0x51
   12cd8:	e59f1030 	ldr	r1, [pc, #48]	; 12d10 <CUSBMIDIDevice::Configure()+0x234>
   12cdc:	e59f0034 	ldr	r0, [pc, #52]	; 12d18 <CUSBMIDIDevice::Configure()+0x23c>
   12ce0:	eb004266 	bl	23680 <assertion_failed>
   12ce4:	e1a00005 	mov	r0, r5
   12ce8:	e59f1018 	ldr	r1, [pc, #24]	; 12d08 <CUSBMIDIDevice::Configure()+0x22c>
   12cec:	ebffedb1 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   12cf0:	e3a06000 	mov	r6, #0
   12cf4:	eaffffe2 	b	12c84 <CUSBMIDIDevice::Configure()+0x1a8>
   12cf8:	00000582 	.word	0x00000582
   12cfc:	0000012a 	.word	0x0000012a
   12d00:	0003dec0 	.word	0x0003dec0
   12d04:	000364a4 	.word	0x000364a4
   12d08:	000363c0 	.word	0x000363c0
   12d0c:	00035810 	.word	0x00035810
   12d10:	000363c8 	.word	0x000363c8
   12d14:	0003648c 	.word	0x0003648c
   12d18:	00036478 	.word	0x00036478

00012d1c <CUSBMouseDevice::~CUSBMouseDevice()>:
   12d1c:	e92d4010 	push	{r4, lr}
   12d20:	e1a04000 	mov	r4, r0
   12d24:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   12d28:	e59f3044 	ldr	r3, [pc, #68]	; 12d74 <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   12d2c:	e3500000 	cmp	r0, #0
   12d30:	e5843000 	str	r3, [r4]
   12d34:	0a000002 	beq	12d44 <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   12d38:	e5903000 	ldr	r3, [r0]
   12d3c:	e5933004 	ldr	r3, [r3, #4]
   12d40:	e12fff33 	blx	r3
   12d44:	e3a03000 	mov	r3, #0
   12d48:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   12d4c:	e5843024 	str	r3, [r4, #36]	; 0x24
   12d50:	e1500003 	cmp	r0, r3
   12d54:	0a000000 	beq	12d5c <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   12d58:	eb005c6d 	bl	29f14 <operator delete[](void*)>
   12d5c:	e3a03000 	mov	r3, #0
   12d60:	e1a00004 	mov	r0, r4
   12d64:	e5843028 	str	r3, [r4, #40]	; 0x28
   12d68:	ebfff777 	bl	10b4c <CUSBHIDDevice::~CUSBHIDDevice()>
   12d6c:	e1a00004 	mov	r0, r4
   12d70:	e8bd8010 	pop	{r4, pc}
   12d74:	000364b4 	.word	0x000364b4

00012d78 <CUSBMouseDevice::~CUSBMouseDevice()>:
   12d78:	e92d4010 	push	{r4, lr}
   12d7c:	e1a04000 	mov	r4, r0
   12d80:	ebffffe5 	bl	12d1c <CUSBMouseDevice::~CUSBMouseDevice()>
   12d84:	e1a00004 	mov	r0, r4
   12d88:	e3a01030 	mov	r1, #48	; 0x30
   12d8c:	eb005c66 	bl	29f2c <operator delete(void*, unsigned int)>
   12d90:	e1a00004 	mov	r0, r4
   12d94:	e8bd8010 	pop	{r4, pc}

00012d98 <CUSBMouseDevice::Configure()>:
   12d98:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12d9c:	e3a01021 	mov	r1, #33	; 0x21
   12da0:	e24dd014 	sub	sp, sp, #20
   12da4:	e1a04000 	mov	r4, r0
   12da8:	ebffed77 	bl	e38c <CUSBFunction::GetDescriptor(unsigned char)>
   12dac:	e2505000 	subs	r5, r0, #0
   12db0:	0a000003 	beq	12dc4 <CUSBMouseDevice::Configure()+0x2c>
   12db4:	e5d50007 	ldrb	r0, [r5, #7]
   12db8:	e5d53008 	ldrb	r3, [r5, #8]
   12dbc:	e1900403 	orrs	r0, r0, r3, lsl #8
   12dc0:	1a000006 	bne	12de0 <CUSBMouseDevice::Configure()+0x48>
   12dc4:	e1a00004 	mov	r0, r4
   12dc8:	e59f10f0 	ldr	r1, [pc, #240]	; 12ec0 <CUSBMouseDevice::Configure()+0x128>
   12dcc:	ebffed79 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   12dd0:	e3a05000 	mov	r5, #0
   12dd4:	e1a00005 	mov	r0, r5
   12dd8:	e28dd014 	add	sp, sp, #20
   12ddc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12de0:	e1c402bc 	strh	r0, [r4, #44]	; 0x2c
   12de4:	eb005c43 	bl	29ef8 <operator new[](unsigned int)>
   12de8:	e5840028 	str	r0, [r4, #40]	; 0x28
   12dec:	e1a00004 	mov	r0, r4
   12df0:	ebffed5a 	bl	e360 <CUSBFunction::GetHost() const>
   12df4:	e1a06000 	mov	r6, r0
   12df8:	e1a00004 	mov	r0, r4
   12dfc:	ebffed4c 	bl	e334 <CUSBFunction::GetEndpoint0() const>
   12e00:	e1a07000 	mov	r7, r0
   12e04:	e1a00004 	mov	r0, r4
   12e08:	e5d55006 	ldrb	r5, [r5, #6]
   12e0c:	e5948028 	ldr	r8, [r4, #40]	; 0x28
   12e10:	e1d492bc 	ldrh	r9, [r4, #44]	; 0x2c
   12e14:	ebffedaf 	bl	e4d8 <CUSBFunction::GetInterfaceNumber() const>
   12e18:	e3a03081 	mov	r3, #129	; 0x81
   12e1c:	e6ff0070 	uxth	r0, r0
   12e20:	e58d000c 	str	r0, [sp, #12]
   12e24:	e58d3008 	str	r3, [sp, #8]
   12e28:	e88d0300 	stm	sp, {r8, r9}
   12e2c:	e3a03000 	mov	r3, #0
   12e30:	e1a02005 	mov	r2, r5
   12e34:	e1a01007 	mov	r1, r7
   12e38:	e1a00006 	mov	r0, r6
   12e3c:	ebfff94b 	bl	11370 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   12e40:	e1d432bc 	ldrh	r3, [r4, #44]	; 0x2c
   12e44:	e1500003 	cmp	r0, r3
   12e48:	0a000008 	beq	12e70 <CUSBMouseDevice::Configure()+0xd8>
   12e4c:	e3a05000 	mov	r5, #0
   12e50:	eb004afd 	bl	25a4c <CLogger::Get()>
   12e54:	e59f3068 	ldr	r3, [pc, #104]	; 12ec4 <CUSBMouseDevice::Configure()+0x12c>
   12e58:	e3a02001 	mov	r2, #1
   12e5c:	e59f105c 	ldr	r1, [pc, #92]	; 12ec0 <CUSBMouseDevice::Configure()+0x128>
   12e60:	eb004a36 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12e64:	e1a00005 	mov	r0, r5
   12e68:	e28dd014 	add	sp, sp, #20
   12e6c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12e70:	e3a01000 	mov	r1, #0
   12e74:	e1a00004 	mov	r0, r4
   12e78:	ebfff75e 	bl	10bf8 <CUSBHIDDevice::Configure(unsigned int)>
   12e7c:	e2505000 	subs	r5, r0, #0
   12e80:	0a000008 	beq	12ea8 <CUSBMouseDevice::Configure()+0x110>
   12e84:	e3a00028 	mov	r0, #40	; 0x28
   12e88:	eb005c19 	bl	29ef4 <operator new(unsigned int)>
   12e8c:	e1a05000 	mov	r5, r0
   12e90:	eb00128e 	bl	178d0 <CMouseDevice::CMouseDevice()>
   12e94:	e1a00004 	mov	r0, r4
   12e98:	e5845024 	str	r5, [r4, #36]	; 0x24
   12e9c:	e28dd014 	add	sp, sp, #20
   12ea0:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   12ea4:	eafff872 	b	11074 <CUSBHIDDevice::StartRequest()>
   12ea8:	eb004ae7 	bl	25a4c <CLogger::Get()>
   12eac:	e59f3014 	ldr	r3, [pc, #20]	; 12ec8 <CUSBMouseDevice::Configure()+0x130>
   12eb0:	e3a02001 	mov	r2, #1
   12eb4:	e59f1004 	ldr	r1, [pc, #4]	; 12ec0 <CUSBMouseDevice::Configure()+0x128>
   12eb8:	eb004a20 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12ebc:	eaffffc4 	b	12dd4 <CUSBMouseDevice::Configure()+0x3c>
   12ec0:	000364dc 	.word	0x000364dc
   12ec4:	00035b1c 	.word	0x00035b1c
   12ec8:	00036044 	.word	0x00036044

00012ecc <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   12ecc:	e2913000 	adds	r3, r1, #0
   12ed0:	13a03001 	movne	r3, #1
   12ed4:	e3520003 	cmp	r2, #3
   12ed8:	13a03000 	movne	r3, #0
   12edc:	e3530000 	cmp	r3, #0
   12ee0:	e1a02001 	mov	r2, r1
   12ee4:	012fff1e 	bxeq	lr
   12ee8:	e5d13000 	ldrb	r3, [r1]
   12eec:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   12ef0:	e3130002 	tst	r3, #2
   12ef4:	e2031001 	and	r1, r3, #1
   12ef8:	13811002 	orrne	r1, r1, #2
   12efc:	e3130004 	tst	r3, #4
   12f00:	13811004 	orrne	r1, r1, #4
   12f04:	e3500000 	cmp	r0, #0
   12f08:	012fff1e 	bxeq	lr
   12f0c:	e1d230d2 	ldrsb	r3, [r2, #2]
   12f10:	e1d220d1 	ldrsb	r2, [r2, #1]
   12f14:	ea0012a7 	b	179b8 <CMouseDevice::ReportHandler(unsigned int, int, int)>

00012f18 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   12f18:	e92d4010 	push	{r4, lr}
   12f1c:	e3a02003 	mov	r2, #3
   12f20:	e1a04000 	mov	r4, r0
   12f24:	ebfff6f4 	bl	10afc <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   12f28:	e3a03000 	mov	r3, #0
   12f2c:	e59f2010 	ldr	r2, [pc, #16]	; 12f44 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x2c>
   12f30:	e5843024 	str	r3, [r4, #36]	; 0x24
   12f34:	e5842000 	str	r2, [r4]
   12f38:	e5843028 	str	r3, [r4, #40]	; 0x28
   12f3c:	e1a00004 	mov	r0, r4
   12f40:	e8bd8010 	pop	{r4, pc}
   12f44:	000364b4 	.word	0x000364b4

00012f48 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   12f48:	e92d4070 	push	{r4, r5, r6, lr}
   12f4c:	e5905018 	ldr	r5, [r0, #24]
   12f50:	e59f3060 	ldr	r3, [pc, #96]	; 12fb8 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x70>
   12f54:	e3550000 	cmp	r5, #0
   12f58:	e1a04000 	mov	r4, r0
   12f5c:	e5803000 	str	r3, [r0]
   12f60:	0a000004 	beq	12f78 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x30>
   12f64:	e1a00005 	mov	r0, r5
   12f68:	ebffeb8d 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   12f6c:	e1a00005 	mov	r0, r5
   12f70:	e3a01014 	mov	r1, #20
   12f74:	eb005bec 	bl	29f2c <operator delete(void*, unsigned int)>
   12f78:	e3a03000 	mov	r3, #0
   12f7c:	e5945014 	ldr	r5, [r4, #20]
   12f80:	e5843018 	str	r3, [r4, #24]
   12f84:	e1550003 	cmp	r5, r3
   12f88:	0a000004 	beq	12fa0 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   12f8c:	e1a00005 	mov	r0, r5
   12f90:	ebffeb83 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   12f94:	e1a00005 	mov	r0, r5
   12f98:	e3a01014 	mov	r1, #20
   12f9c:	eb005be2 	bl	29f2c <operator delete(void*, unsigned int)>
   12fa0:	e3a03000 	mov	r3, #0
   12fa4:	e1a00004 	mov	r0, r4
   12fa8:	e5843014 	str	r3, [r4, #20]
   12fac:	ebffebe8 	bl	df54 <CUSBFunction::~CUSBFunction()>
   12fb0:	e1a00004 	mov	r0, r4
   12fb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   12fb8:	000364ec 	.word	0x000364ec

00012fbc <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   12fbc:	e92d4010 	push	{r4, lr}
   12fc0:	e1a04000 	mov	r4, r0
   12fc4:	ebffffdf 	bl	12f48 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   12fc8:	e1a00004 	mov	r0, r4
   12fcc:	e3a0101c 	mov	r1, #28
   12fd0:	eb005bd5 	bl	29f2c <operator delete(void*, unsigned int)>
   12fd4:	e1a00004 	mov	r0, r4
   12fd8:	e8bd8010 	pop	{r4, pc}

00012fdc <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   12fdc:	e92d4070 	push	{r4, r5, r6, lr}
   12fe0:	e2515000 	subs	r5, r1, #0
   12fe4:	e24dd008 	sub	sp, sp, #8
   12fe8:	0a000011 	beq	13034 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x58>
   12fec:	e3520000 	cmp	r2, #0
   12ff0:	e1a04002 	mov	r4, r2
   12ff4:	0a000012 	beq	13044 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x68>
   12ff8:	e1a06000 	mov	r6, r0
   12ffc:	ebffecd7 	bl	e360 <CUSBFunction::GetHost() const>
   13000:	e3500000 	cmp	r0, #0
   13004:	0a000012 	beq	13054 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x78>
   13008:	e3a03000 	mov	r3, #0
   1300c:	e5961018 	ldr	r1, [r6, #24]
   13010:	e1a02005 	mov	r2, r5
   13014:	e58d3000 	str	r3, [sp]
   13018:	e1a03004 	mov	r3, r4
   1301c:	ebfff907 	bl	11440 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   13020:	e3500000 	cmp	r0, #0
   13024:	a1a00004 	movge	r0, r4
   13028:	b3e00000 	mvnlt	r0, #0
   1302c:	e28dd008 	add	sp, sp, #8
   13030:	e8bd8070 	pop	{r4, r5, r6, pc}
   13034:	e3a0207e 	mov	r2, #126	; 0x7e
   13038:	e59f1024 	ldr	r1, [pc, #36]	; 13064 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   1303c:	e59f0024 	ldr	r0, [pc, #36]	; 13068 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x8c>
   13040:	eb00418e 	bl	23680 <assertion_failed>
   13044:	e3a0207f 	mov	r2, #127	; 0x7f
   13048:	e59f1014 	ldr	r1, [pc, #20]	; 13064 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   1304c:	e59f0018 	ldr	r0, [pc, #24]	; 1306c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x90>
   13050:	eb00418a 	bl	23680 <assertion_failed>
   13054:	e3a02082 	mov	r2, #130	; 0x82
   13058:	e59f1004 	ldr	r1, [pc, #4]	; 13064 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   1305c:	e59f000c 	ldr	r0, [pc, #12]	; 13070 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x94>
   13060:	eb004186 	bl	23680 <assertion_failed>
   13064:	00036518 	.word	0x00036518
   13068:	00036138 	.word	0x00036138
   1306c:	00036528 	.word	0x00036528
   13070:	00036148 	.word	0x00036148

00013074 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   13074:	e92d4010 	push	{r4, lr}
   13078:	e1a04000 	mov	r4, r0
   1307c:	ebffec45 	bl	e198 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   13080:	e3a03000 	mov	r3, #0
   13084:	e59f2014 	ldr	r2, [pc, #20]	; 130a0 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x2c>
   13088:	e5c43010 	strb	r3, [r4, #16]
   1308c:	e5842000 	str	r2, [r4]
   13090:	e5843014 	str	r3, [r4, #20]
   13094:	e5843018 	str	r3, [r4, #24]
   13098:	e1a00004 	mov	r0, r4
   1309c:	e8bd8010 	pop	{r4, pc}
   130a0:	000364ec 	.word	0x000364ec

000130a4 <CUSBPrinterDevice::Configure()>:
   130a4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   130a8:	e24dd01c 	sub	sp, sp, #28
   130ac:	e1a05000 	mov	r5, r0
   130b0:	ebffed2c 	bl	e568 <CUSBFunction::GetInterfaceProtocol() const>
   130b4:	e2403001 	sub	r3, r0, #1
   130b8:	e3530001 	cmp	r3, #1
   130bc:	e5c50010 	strb	r0, [r5, #16]
   130c0:	9a00000a 	bls	130f0 <CUSBPrinterDevice::Configure()+0x4c>
   130c4:	eb004a60 	bl	25a4c <CLogger::Get()>
   130c8:	e5d52010 	ldrb	r2, [r5, #16]
   130cc:	e59f31d8 	ldr	r3, [pc, #472]	; 132ac <CUSBPrinterDevice::Configure()+0x208>
   130d0:	e58d2000 	str	r2, [sp]
   130d4:	e59f11d4 	ldr	r1, [pc, #468]	; 132b0 <CUSBPrinterDevice::Configure()+0x20c>
   130d8:	e3a02001 	mov	r2, #1
   130dc:	eb004997 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   130e0:	e3a04000 	mov	r4, #0
   130e4:	e1a00004 	mov	r0, r4
   130e8:	e28dd01c 	add	sp, sp, #28
   130ec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   130f0:	e1a00005 	mov	r0, r5
   130f4:	ebffec77 	bl	e2d8 <CUSBFunction::GetNumEndpoints() const>
   130f8:	e5d53010 	ldrb	r3, [r5, #16]
   130fc:	e3530001 	cmp	r3, #1
   13100:	03a03001 	moveq	r3, #1
   13104:	13a03002 	movne	r3, #2
   13108:	e1530000 	cmp	r3, r0
   1310c:	d3a06005 	movle	r6, #5
   13110:	d3a07014 	movle	r7, #20
   13114:	da000004 	ble	1312c <CUSBPrinterDevice::Configure()+0x88>
   13118:	ea000053 	b	1326c <CUSBPrinterDevice::Configure()+0x1c8>
   1311c:	e5d43003 	ldrb	r3, [r4, #3]
   13120:	e203303f 	and	r3, r3, #63	; 0x3f
   13124:	e3530002 	cmp	r3, #2
   13128:	0a000028 	beq	131d0 <CUSBPrinterDevice::Configure()+0x12c>
   1312c:	e1a01006 	mov	r1, r6
   13130:	e1a00005 	mov	r0, r5
   13134:	ebffec94 	bl	e38c <CUSBFunction::GetDescriptor(unsigned char)>
   13138:	e2504000 	subs	r4, r0, #0
   1313c:	1afffff6 	bne	1311c <CUSBPrinterDevice::Configure()+0x78>
   13140:	e5954018 	ldr	r4, [r5, #24]
   13144:	e3540000 	cmp	r4, #0
   13148:	0a00004c 	beq	13280 <CUSBPrinterDevice::Configure()+0x1dc>
   1314c:	e5d53010 	ldrb	r3, [r5, #16]
   13150:	e1a00005 	mov	r0, r5
   13154:	e3530001 	cmp	r3, #1
   13158:	0a000002 	beq	13168 <CUSBPrinterDevice::Configure()+0xc4>
   1315c:	e5954014 	ldr	r4, [r5, #20]
   13160:	e3540000 	cmp	r4, #0
   13164:	0a000049 	beq	13290 <CUSBPrinterDevice::Configure()+0x1ec>
   13168:	ebffeba2 	bl	dff8 <CUSBFunction::Configure()>
   1316c:	e2504000 	subs	r4, r0, #0
   13170:	0a000027 	beq	13214 <CUSBPrinterDevice::Configure()+0x170>
   13174:	e28d0008 	add	r0, sp, #8
   13178:	eb004e19 	bl	269e4 <CString::CString()>
   1317c:	e59f3130 	ldr	r3, [pc, #304]	; 132b4 <CUSBPrinterDevice::Configure()+0x210>
   13180:	e59f1130 	ldr	r1, [pc, #304]	; 132b8 <CUSBPrinterDevice::Configure()+0x214>
   13184:	e5932000 	ldr	r2, [r3]
   13188:	e28d0008 	add	r0, sp, #8
   1318c:	e282c001 	add	ip, r2, #1
   13190:	e583c000 	str	ip, [r3]
   13194:	eb005355 	bl	27ef0 <CString::Format(char const*, ...)>
   13198:	eb004412 	bl	241e8 <CDeviceNameService::Get()>
   1319c:	e1a06000 	mov	r6, r0
   131a0:	e28d0008 	add	r0, sp, #8
   131a4:	eb004e24 	bl	26a3c <CString::operator char const*() const>
   131a8:	e1a02005 	mov	r2, r5
   131ac:	e1a01000 	mov	r1, r0
   131b0:	e3a03000 	mov	r3, #0
   131b4:	e1a00006 	mov	r0, r6
   131b8:	eb004350 	bl	23f00 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   131bc:	e28d0008 	add	r0, sp, #8
   131c0:	eb004dd4 	bl	26918 <CString::~CString()>
   131c4:	e1a00004 	mov	r0, r4
   131c8:	e28dd01c 	add	sp, sp, #28
   131cc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   131d0:	e1d430d2 	ldrsb	r3, [r4, #2]
   131d4:	e3530000 	cmp	r3, #0
   131d8:	ba000015 	blt	13234 <CUSBPrinterDevice::Configure()+0x190>
   131dc:	e5953018 	ldr	r3, [r5, #24]
   131e0:	e1a00005 	mov	r0, r5
   131e4:	e3530000 	cmp	r3, #0
   131e8:	1a00002b 	bne	1329c <CUSBPrinterDevice::Configure()+0x1f8>
   131ec:	ebffec45 	bl	e308 <CUSBFunction::GetDevice() const>
   131f0:	e1a09000 	mov	r9, r0
   131f4:	e1a00007 	mov	r0, r7
   131f8:	eb005b3d 	bl	29ef4 <operator new(unsigned int)>
   131fc:	e1a08000 	mov	r8, r0
   13200:	e1a02004 	mov	r2, r4
   13204:	e1a01009 	mov	r1, r9
   13208:	ebffea7b 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1320c:	e5858018 	str	r8, [r5, #24]
   13210:	eaffffc5 	b	1312c <CUSBPrinterDevice::Configure()+0x88>
   13214:	eb004a0c 	bl	25a4c <CLogger::Get()>
   13218:	e59f309c 	ldr	r3, [pc, #156]	; 132bc <CUSBPrinterDevice::Configure()+0x218>
   1321c:	e3a02001 	mov	r2, #1
   13220:	e59f1088 	ldr	r1, [pc, #136]	; 132b0 <CUSBPrinterDevice::Configure()+0x20c>
   13224:	eb004945 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13228:	e1a00004 	mov	r0, r4
   1322c:	e28dd01c 	add	sp, sp, #28
   13230:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13234:	e5953014 	ldr	r3, [r5, #20]
   13238:	e1a00005 	mov	r0, r5
   1323c:	e3530000 	cmp	r3, #0
   13240:	1a000015 	bne	1329c <CUSBPrinterDevice::Configure()+0x1f8>
   13244:	ebffec2f 	bl	e308 <CUSBFunction::GetDevice() const>
   13248:	e1a09000 	mov	r9, r0
   1324c:	e1a00007 	mov	r0, r7
   13250:	eb005b27 	bl	29ef4 <operator new(unsigned int)>
   13254:	e1a08000 	mov	r8, r0
   13258:	e1a02004 	mov	r2, r4
   1325c:	e1a01009 	mov	r1, r9
   13260:	ebffea65 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13264:	e5858014 	str	r8, [r5, #20]
   13268:	eaffffaf 	b	1312c <CUSBPrinterDevice::Configure()+0x88>
   1326c:	e1a00005 	mov	r0, r5
   13270:	e59f1038 	ldr	r1, [pc, #56]	; 132b0 <CUSBPrinterDevice::Configure()+0x20c>
   13274:	ebffec4f 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   13278:	e3a04000 	mov	r4, #0
   1327c:	eaffff98 	b	130e4 <CUSBPrinterDevice::Configure()+0x40>
   13280:	e1a00005 	mov	r0, r5
   13284:	e59f1024 	ldr	r1, [pc, #36]	; 132b0 <CUSBPrinterDevice::Configure()+0x20c>
   13288:	ebffec4a 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   1328c:	eaffff94 	b	130e4 <CUSBPrinterDevice::Configure()+0x40>
   13290:	e59f1018 	ldr	r1, [pc, #24]	; 132b0 <CUSBPrinterDevice::Configure()+0x20c>
   13294:	ebffec47 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   13298:	eaffff91 	b	130e4 <CUSBPrinterDevice::Configure()+0x40>
   1329c:	e59f100c 	ldr	r1, [pc, #12]	; 132b0 <CUSBPrinterDevice::Configure()+0x20c>
   132a0:	ebffec44 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   132a4:	e3a04000 	mov	r4, #0
   132a8:	eaffff8d 	b	130e4 <CUSBPrinterDevice::Configure()+0x40>
   132ac:	00036534 	.word	0x00036534
   132b0:	00036510 	.word	0x00036510
   132b4:	0003dec4 	.word	0x0003dec4
   132b8:	00036554 	.word	0x00036554
   132bc:	00035810 	.word	0x00035810

000132c0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
   132c0:	e92d4010 	push	{r4, lr}
   132c4:	e3a0e000 	mov	lr, #0
   132c8:	e59d4008 	ldr	r4, [sp, #8]
   132cc:	e151000e 	cmp	r1, lr
   132d0:	e5801000 	str	r1, [r0]
   132d4:	e5802008 	str	r2, [r0, #8]
   132d8:	e580300c 	str	r3, [r0, #12]
   132dc:	e5804004 	str	r4, [r0, #4]
   132e0:	e580e010 	str	lr, [r0, #16]
   132e4:	e580e014 	str	lr, [r0, #20]
   132e8:	e580e018 	str	lr, [r0, #24]
   132ec:	e580e01c 	str	lr, [r0, #28]
   132f0:	e580e020 	str	lr, [r0, #32]
   132f4:	e5c0e024 	strb	lr, [r0, #36]	; 0x24
   132f8:	0a00000a 	beq	13328 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x68>
   132fc:	e2922000 	adds	r2, r2, #0
   13300:	13a02001 	movne	r2, #1
   13304:	e3530000 	cmp	r3, #0
   13308:	11a03002 	movne	r3, r2
   1330c:	03823001 	orreq	r3, r2, #1
   13310:	e3530000 	cmp	r3, #0
   13314:	18bd8010 	popne	{r4, pc}
   13318:	e3a02024 	mov	r2, #36	; 0x24
   1331c:	e59f1014 	ldr	r1, [pc, #20]	; 13338 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
   13320:	e59f0014 	ldr	r0, [pc, #20]	; 1333c <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x7c>
   13324:	eb0040d5 	bl	23680 <assertion_failed>
   13328:	e3a02023 	mov	r2, #35	; 0x23
   1332c:	e59f1004 	ldr	r1, [pc, #4]	; 13338 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
   13330:	e59f0008 	ldr	r0, [pc, #8]	; 13340 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x80>
   13334:	eb0040d1 	bl	23680 <assertion_failed>
   13338:	0003655c 	.word	0x0003655c
   1333c:	0003656c 	.word	0x0003656c
   13340:	0003501c 	.word	0x0003501c

00013344 <CUSBRequest::~CUSBRequest()>:
   13344:	e12fff1e 	bx	lr

00013348 <CUSBRequest::GetEndpoint() const>:
   13348:	e5900000 	ldr	r0, [r0]
   1334c:	e3500000 	cmp	r0, #0
   13350:	0a000000 	beq	13358 <CUSBRequest::GetEndpoint() const+0x10>
   13354:	e12fff1e 	bx	lr
   13358:	e92d4010 	push	{r4, lr}
   1335c:	e3a02031 	mov	r2, #49	; 0x31
   13360:	e59f1004 	ldr	r1, [pc, #4]	; 1336c <CUSBRequest::GetEndpoint() const+0x24>
   13364:	e59f0004 	ldr	r0, [pc, #4]	; 13370 <CUSBRequest::GetEndpoint() const+0x28>
   13368:	eb0040c4 	bl	23680 <assertion_failed>
   1336c:	0003655c 	.word	0x0003655c
   13370:	0003501c 	.word	0x0003501c

00013374 <CUSBRequest::SetStatus(int)>:
   13374:	e5801010 	str	r1, [r0, #16]
   13378:	e12fff1e 	bx	lr

0001337c <CUSBRequest::SetResultLen(unsigned int)>:
   1337c:	e5801014 	str	r1, [r0, #20]
   13380:	e12fff1e 	bx	lr

00013384 <CUSBRequest::GetStatus() const>:
   13384:	e5900010 	ldr	r0, [r0, #16]
   13388:	e12fff1e 	bx	lr

0001338c <CUSBRequest::GetResultLength() const>:
   1338c:	e5903010 	ldr	r3, [r0, #16]
   13390:	e3530000 	cmp	r3, #0
   13394:	0a000001 	beq	133a0 <CUSBRequest::GetResultLength() const+0x14>
   13398:	e5900014 	ldr	r0, [r0, #20]
   1339c:	e12fff1e 	bx	lr
   133a0:	e92d4010 	push	{r4, lr}
   133a4:	e3a02046 	mov	r2, #70	; 0x46
   133a8:	e59f1004 	ldr	r1, [pc, #4]	; 133b4 <CUSBRequest::GetResultLength() const+0x28>
   133ac:	e59f0004 	ldr	r0, [pc, #4]	; 133b8 <CUSBRequest::GetResultLength() const+0x2c>
   133b0:	eb0040b2 	bl	23680 <assertion_failed>
   133b4:	0003655c 	.word	0x0003655c
   133b8:	00036590 	.word	0x00036590

000133bc <CUSBRequest::GetSetupData()>:
   133bc:	e92d4010 	push	{r4, lr}
   133c0:	e1a04000 	mov	r4, r0
   133c4:	e5900000 	ldr	r0, [r0]
   133c8:	ebffea83 	bl	dddc <CUSBEndpoint::GetType() const>
   133cc:	e3500000 	cmp	r0, #0
   133d0:	1a000006 	bne	133f0 <CUSBRequest::GetSetupData()+0x34>
   133d4:	e5940004 	ldr	r0, [r4, #4]
   133d8:	e3500000 	cmp	r0, #0
   133dc:	18bd8010 	popne	{r4, pc}
   133e0:	e3a0204e 	mov	r2, #78	; 0x4e
   133e4:	e59f1014 	ldr	r1, [pc, #20]	; 13400 <CUSBRequest::GetSetupData()+0x44>
   133e8:	e59f0014 	ldr	r0, [pc, #20]	; 13404 <CUSBRequest::GetSetupData()+0x48>
   133ec:	eb0040a3 	bl	23680 <assertion_failed>
   133f0:	e3a0204d 	mov	r2, #77	; 0x4d
   133f4:	e59f1004 	ldr	r1, [pc, #4]	; 13400 <CUSBRequest::GetSetupData()+0x44>
   133f8:	e59f0008 	ldr	r0, [pc, #8]	; 13408 <CUSBRequest::GetSetupData()+0x4c>
   133fc:	eb00409f 	bl	23680 <assertion_failed>
   13400:	0003655c 	.word	0x0003655c
   13404:	000365cc 	.word	0x000365cc
   13408:	0003659c 	.word	0x0003659c

0001340c <CUSBRequest::GetBuffer()>:
   1340c:	e5903008 	ldr	r3, [r0, #8]
   13410:	e3530000 	cmp	r3, #0
   13414:	0a000001 	beq	13420 <CUSBRequest::GetBuffer()+0x14>
   13418:	e1a00003 	mov	r0, r3
   1341c:	e12fff1e 	bx	lr
   13420:	e590200c 	ldr	r2, [r0, #12]
   13424:	e3520000 	cmp	r2, #0
   13428:	0afffffa 	beq	13418 <CUSBRequest::GetBuffer()+0xc>
   1342c:	e92d4010 	push	{r4, lr}
   13430:	e3a02056 	mov	r2, #86	; 0x56
   13434:	e59f1004 	ldr	r1, [pc, #4]	; 13440 <CUSBRequest::GetBuffer()+0x34>
   13438:	e59f0004 	ldr	r0, [pc, #4]	; 13444 <CUSBRequest::GetBuffer()+0x38>
   1343c:	eb00408f 	bl	23680 <assertion_failed>
   13440:	0003655c 	.word	0x0003655c
   13444:	0003656c 	.word	0x0003656c

00013448 <CUSBRequest::GetBufLen() const>:
   13448:	e590000c 	ldr	r0, [r0, #12]
   1344c:	e12fff1e 	bx	lr

00013450 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
   13450:	e3510000 	cmp	r1, #0
   13454:	e5801018 	str	r1, [r0, #24]
   13458:	e580201c 	str	r2, [r0, #28]
   1345c:	e5803020 	str	r3, [r0, #32]
   13460:	0a000000 	beq	13468 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x18>
   13464:	e12fff1e 	bx	lr
   13468:	e92d4010 	push	{r4, lr}
   1346c:	e3a02066 	mov	r2, #102	; 0x66
   13470:	e59f1004 	ldr	r1, [pc, #4]	; 1347c <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x2c>
   13474:	e59f0004 	ldr	r0, [pc, #4]	; 13480 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x30>
   13478:	eb004080 	bl	23680 <assertion_failed>
   1347c:	0003655c 	.word	0x0003655c
   13480:	000365e0 	.word	0x000365e0

00013484 <CUSBRequest::CallCompletionRoutine()>:
   13484:	e92d4010 	push	{r4, lr}
   13488:	e590e018 	ldr	lr, [r0, #24]
   1348c:	e35e0000 	cmp	lr, #0
   13490:	0a000004 	beq	134a8 <CUSBRequest::CallCompletionRoutine()+0x24>
   13494:	e1a0300e 	mov	r3, lr
   13498:	e8bd4010 	pop	{r4, lr}
   1349c:	e5902020 	ldr	r2, [r0, #32]
   134a0:	e590101c 	ldr	r1, [r0, #28]
   134a4:	e12fff13 	bx	r3
   134a8:	e3a0206b 	mov	r2, #107	; 0x6b
   134ac:	e59f1004 	ldr	r1, [pc, #4]	; 134b8 <CUSBRequest::CallCompletionRoutine()+0x34>
   134b0:	e59f0004 	ldr	r0, [pc, #4]	; 134bc <CUSBRequest::CallCompletionRoutine()+0x38>
   134b4:	eb004071 	bl	23680 <assertion_failed>
   134b8:	0003655c 	.word	0x0003655c
   134bc:	000365e0 	.word	0x000365e0

000134c0 <CUSBRequest::SetCompleteOnNAK()>:
   134c0:	e3a03001 	mov	r3, #1
   134c4:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   134c8:	e12fff1e 	bx	lr

000134cc <CUSBRequest::IsCompleteOnNAK() const>:
   134cc:	e5d00024 	ldrb	r0, [r0, #36]	; 0x24
   134d0:	e12fff1e 	bx	lr

000134d4 <CUSBRequest::operator new(unsigned int)>:
   134d4:	e3500028 	cmp	r0, #40	; 0x28
   134d8:	e92d4010 	push	{r4, lr}
   134dc:	1a000005 	bne	134f8 <CUSBRequest::operator new(unsigned int)+0x24>
   134e0:	e59f3030 	ldr	r3, [pc, #48]	; 13518 <CUSBRequest::operator new(unsigned int)+0x44>
   134e4:	e5930000 	ldr	r0, [r3]
   134e8:	e3500000 	cmp	r0, #0
   134ec:	0a000005 	beq	13508 <CUSBRequest::operator new(unsigned int)+0x34>
   134f0:	e8bd4010 	pop	{r4, lr}
   134f4:	ea004167 	b	23a98 <CClassAllocator::Allocate()>
   134f8:	e3a0207a 	mov	r2, #122	; 0x7a
   134fc:	e59f1018 	ldr	r1, [pc, #24]	; 1351c <CUSBRequest::operator new(unsigned int)+0x48>
   13500:	e59f0018 	ldr	r0, [pc, #24]	; 13520 <CUSBRequest::operator new(unsigned int)+0x4c>
   13504:	eb00405d 	bl	23680 <assertion_failed>
   13508:	e3a0207a 	mov	r2, #122	; 0x7a
   1350c:	e59f1008 	ldr	r1, [pc, #8]	; 1351c <CUSBRequest::operator new(unsigned int)+0x48>
   13510:	e59f000c 	ldr	r0, [pc, #12]	; 13524 <CUSBRequest::operator new(unsigned int)+0x50>
   13514:	eb004059 	bl	23680 <assertion_failed>
   13518:	0003e374 	.word	0x0003e374
   1351c:	0003655c 	.word	0x0003655c
   13520:	000365fc 	.word	0x000365fc
   13524:	00034c88 	.word	0x00034c88

00013528 <CUSBRequest::operator delete(void*, unsigned int)>:
   13528:	e3510028 	cmp	r1, #40	; 0x28
   1352c:	e92d4010 	push	{r4, lr}
   13530:	1a000007 	bne	13554 <CUSBRequest::operator delete(void*, unsigned int)+0x2c>
   13534:	e59f3038 	ldr	r3, [pc, #56]	; 13574 <CUSBRequest::operator delete(void*, unsigned int)+0x4c>
   13538:	e5933000 	ldr	r3, [r3]
   1353c:	e3530000 	cmp	r3, #0
   13540:	0a000007 	beq	13564 <CUSBRequest::operator delete(void*, unsigned int)+0x3c>
   13544:	e8bd4010 	pop	{r4, lr}
   13548:	e1a01000 	mov	r1, r0
   1354c:	e1a00003 	mov	r0, r3
   13550:	ea00418b 	b	23b84 <CClassAllocator::Free(void*)>
   13554:	e3a0207a 	mov	r2, #122	; 0x7a
   13558:	e59f1018 	ldr	r1, [pc, #24]	; 13578 <CUSBRequest::operator delete(void*, unsigned int)+0x50>
   1355c:	e59f0018 	ldr	r0, [pc, #24]	; 1357c <CUSBRequest::operator delete(void*, unsigned int)+0x54>
   13560:	eb004046 	bl	23680 <assertion_failed>
   13564:	e3a0207a 	mov	r2, #122	; 0x7a
   13568:	e59f1008 	ldr	r1, [pc, #8]	; 13578 <CUSBRequest::operator delete(void*, unsigned int)+0x50>
   1356c:	e59f000c 	ldr	r0, [pc, #12]	; 13580 <CUSBRequest::operator delete(void*, unsigned int)+0x58>
   13570:	eb004042 	bl	23680 <assertion_failed>
   13574:	0003e374 	.word	0x0003e374
   13578:	0003655c 	.word	0x0003655c
   1357c:	000365fc 	.word	0x000365fc
   13580:	00034c88 	.word	0x00034c88

00013584 <CUSBRequest::InitAllocator(unsigned int)>:
   13584:	e92d4070 	push	{r4, r5, r6, lr}
   13588:	e59f4040 	ldr	r4, [pc, #64]	; 135d0 <CUSBRequest::InitAllocator(unsigned int)+0x4c>
   1358c:	e5943000 	ldr	r3, [r4]
   13590:	e3530000 	cmp	r3, #0
   13594:	1a000009 	bne	135c0 <CUSBRequest::InitAllocator(unsigned int)+0x3c>
   13598:	e1a05000 	mov	r5, r0
   1359c:	e3a0001c 	mov	r0, #28
   135a0:	eb005a53 	bl	29ef4 <operator new(unsigned int)>
   135a4:	e1a06000 	mov	r6, r0
   135a8:	e1a02005 	mov	r2, r5
   135ac:	e59f3020 	ldr	r3, [pc, #32]	; 135d4 <CUSBRequest::InitAllocator(unsigned int)+0x50>
   135b0:	e3a01028 	mov	r1, #40	; 0x28
   135b4:	eb00411e 	bl	23a34 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   135b8:	e5846000 	str	r6, [r4]
   135bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   135c0:	e3a0207a 	mov	r2, #122	; 0x7a
   135c4:	e59f100c 	ldr	r1, [pc, #12]	; 135d8 <CUSBRequest::InitAllocator(unsigned int)+0x54>
   135c8:	e59f000c 	ldr	r0, [pc, #12]	; 135dc <CUSBRequest::InitAllocator(unsigned int)+0x58>
   135cc:	eb00402b 	bl	23680 <assertion_failed>
   135d0:	0003e374 	.word	0x0003e374
   135d4:	0003661c 	.word	0x0003661c
   135d8:	0003655c 	.word	0x0003655c
   135dc:	00034c9c 	.word	0x00034c9c

000135e0 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
   135e0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   135e4:	e59f4054 	ldr	r4, [pc, #84]	; 13640 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   135e8:	e1a05000 	mov	r5, r0
   135ec:	e5940000 	ldr	r0, [r4]
   135f0:	e24dd00c 	sub	sp, sp, #12
   135f4:	e3500000 	cmp	r0, #0
   135f8:	1a00000c 	bne	13630 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
   135fc:	e1a06001 	mov	r6, r1
   13600:	e3a0001c 	mov	r0, #28
   13604:	eb005a3a 	bl	29ef4 <operator new(unsigned int)>
   13608:	e59f1034 	ldr	r1, [pc, #52]	; 13644 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   1360c:	e1a03006 	mov	r3, r6
   13610:	e58d1000 	str	r1, [sp]
   13614:	e1a02005 	mov	r2, r5
   13618:	e3a01028 	mov	r1, #40	; 0x28
   1361c:	e1a07000 	mov	r7, r0
   13620:	eb00410f 	bl	23a64 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   13624:	e5847000 	str	r7, [r4]
   13628:	e28dd00c 	add	sp, sp, #12
   1362c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13630:	e3a0207a 	mov	r2, #122	; 0x7a
   13634:	e59f100c 	ldr	r1, [pc, #12]	; 13648 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   13638:	e59f000c 	ldr	r0, [pc, #12]	; 1364c <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   1363c:	eb00400f 	bl	23680 <assertion_failed>
   13640:	0003e374 	.word	0x0003e374
   13644:	0003661c 	.word	0x0003661c
   13648:	0003655c 	.word	0x0003655c
   1364c:	00034c9c 	.word	0x00034c9c

00013650 <CUSBStandardHub::~CUSBStandardHub()>:
   13650:	e5902018 	ldr	r2, [r0, #24]
   13654:	e59f30b0 	ldr	r3, [pc, #176]	; 1370c <CUSBStandardHub::~CUSBStandardHub()+0xbc>
   13658:	e3520000 	cmp	r2, #0
   1365c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13660:	e1a07000 	mov	r7, r0
   13664:	e5803000 	str	r3, [r0]
   13668:	0a000013 	beq	136bc <CUSBStandardHub::~CUSBStandardHub()+0x6c>
   1366c:	e3a04000 	mov	r4, #0
   13670:	e3a09004 	mov	r9, #4
   13674:	e1a08004 	mov	r8, r4
   13678:	e2805020 	add	r5, r0, #32
   1367c:	e2806040 	add	r6, r0, #64	; 0x40
   13680:	e5960000 	ldr	r0, [r6]
   13684:	e1a01009 	mov	r1, r9
   13688:	eb005a27 	bl	29f2c <operator delete(void*, unsigned int)>
   1368c:	e5950000 	ldr	r0, [r5]
   13690:	e2844001 	add	r4, r4, #1
   13694:	e3500000 	cmp	r0, #0
   13698:	e4868004 	str	r8, [r6], #4
   1369c:	0a000002 	beq	136ac <CUSBStandardHub::~CUSBStandardHub()+0x5c>
   136a0:	e5903000 	ldr	r3, [r0]
   136a4:	e5933004 	ldr	r3, [r3, #4]
   136a8:	e12fff33 	blx	r3
   136ac:	e5973018 	ldr	r3, [r7, #24]
   136b0:	e4858004 	str	r8, [r5], #4
   136b4:	e1530004 	cmp	r3, r4
   136b8:	8afffff0 	bhi	13680 <CUSBStandardHub::~CUSBStandardHub()+0x30>
   136bc:	e3a03000 	mov	r3, #0
   136c0:	e5974014 	ldr	r4, [r7, #20]
   136c4:	e5873018 	str	r3, [r7, #24]
   136c8:	e1540003 	cmp	r4, r3
   136cc:	0a000004 	beq	136e4 <CUSBStandardHub::~CUSBStandardHub()+0x94>
   136d0:	e1a00004 	mov	r0, r4
   136d4:	ebffe9b2 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   136d8:	e1a00004 	mov	r0, r4
   136dc:	e3a01014 	mov	r1, #20
   136e0:	eb005a11 	bl	29f2c <operator delete(void*, unsigned int)>
   136e4:	e3a04000 	mov	r4, #0
   136e8:	e3a01009 	mov	r1, #9
   136ec:	e5970010 	ldr	r0, [r7, #16]
   136f0:	e5874014 	str	r4, [r7, #20]
   136f4:	eb005a0c 	bl	29f2c <operator delete(void*, unsigned int)>
   136f8:	e5874010 	str	r4, [r7, #16]
   136fc:	e1a00007 	mov	r0, r7
   13700:	ebffea13 	bl	df54 <CUSBFunction::~CUSBFunction()>
   13704:	e1a00007 	mov	r0, r7
   13708:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1370c:	00036630 	.word	0x00036630

00013710 <CUSBStandardHub::~CUSBStandardHub()>:
   13710:	e92d4010 	push	{r4, lr}
   13714:	e1a04000 	mov	r4, r0
   13718:	ebffffcc 	bl	13650 <CUSBStandardHub::~CUSBStandardHub()>
   1371c:	e1a00004 	mov	r0, r4
   13720:	e3a01068 	mov	r1, #104	; 0x68
   13724:	eb005a00 	bl	29f2c <operator delete(void*, unsigned int)>
   13728:	e1a00004 	mov	r0, r4
   1372c:	e8bd8010 	pop	{r4, pc}

00013730 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
   13730:	e92d4010 	push	{r4, lr}
   13734:	e1a04000 	mov	r4, r0
   13738:	ebffea96 	bl	e198 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1373c:	e3a03000 	mov	r3, #0
   13740:	e284c040 	add	ip, r4, #64	; 0x40
   13744:	e1a0000c 	mov	r0, ip
   13748:	e59f1038 	ldr	r1, [pc, #56]	; 13788 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x58>
   1374c:	e1a02003 	mov	r2, r3
   13750:	e5843010 	str	r3, [r4, #16]
   13754:	e5841000 	str	r1, [r4]
   13758:	e5843014 	str	r3, [r4, #20]
   1375c:	e5843018 	str	r3, [r4, #24]
   13760:	e5c4301c 	strb	r3, [r4, #28]
   13764:	e2841060 	add	r1, r4, #96	; 0x60
   13768:	e2843020 	add	r3, r4, #32
   1376c:	e4832004 	str	r2, [r3], #4
   13770:	e153000c 	cmp	r3, ip
   13774:	e4802004 	str	r2, [r0], #4
   13778:	e4c12001 	strb	r2, [r1], #1
   1377c:	1afffffa 	bne	1376c <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x3c>
   13780:	e1a00004 	mov	r0, r4
   13784:	e8bd8010 	pop	{r4, pc}
   13788:	00036630 	.word	0x00036630

0001378c <CUSBStandardHub::DisablePort(unsigned int)>:
   1378c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   13790:	e5903018 	ldr	r3, [r0, #24]
   13794:	e24dd014 	sub	sp, sp, #20
   13798:	e1530001 	cmp	r3, r1
   1379c:	9a000019 	bls	13808 <CUSBStandardHub::DisablePort(unsigned int)+0x7c>
   137a0:	e1a06001 	mov	r6, r1
   137a4:	e1a05000 	mov	r5, r0
   137a8:	ebffeaec 	bl	e360 <CUSBFunction::GetHost() const>
   137ac:	e3a04001 	mov	r4, #1
   137b0:	e1a09000 	mov	r9, r0
   137b4:	e1a00005 	mov	r0, r5
   137b8:	ebffeadd 	bl	e334 <CUSBFunction::GetEndpoint0() const>
   137bc:	e3a07000 	mov	r7, #0
   137c0:	e0868004 	add	r8, r6, r4
   137c4:	e6ff3078 	uxth	r3, r8
   137c8:	e1a01000 	mov	r1, r0
   137cc:	e58d3004 	str	r3, [sp, #4]
   137d0:	e1a00009 	mov	r0, r9
   137d4:	e58d700c 	str	r7, [sp, #12]
   137d8:	e58d7008 	str	r7, [sp, #8]
   137dc:	e58d4000 	str	r4, [sp]
   137e0:	e1a03004 	mov	r3, r4
   137e4:	e3a02023 	mov	r2, #35	; 0x23
   137e8:	ebfff6ae 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   137ec:	e1500007 	cmp	r0, r7
   137f0:	a0855006 	addge	r5, r5, r6
   137f4:	a1a00004 	movge	r0, r4
   137f8:	a5c57060 	strbge	r7, [r5, #96]	; 0x60
   137fc:	ba000005 	blt	13818 <CUSBStandardHub::DisablePort(unsigned int)+0x8c>
   13800:	e28dd014 	add	sp, sp, #20
   13804:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13808:	e3a020c7 	mov	r2, #199	; 0xc7
   1380c:	e59f1024 	ldr	r1, [pc, #36]	; 13838 <CUSBStandardHub::DisablePort(unsigned int)+0xac>
   13810:	e59f0024 	ldr	r0, [pc, #36]	; 1383c <CUSBStandardHub::DisablePort(unsigned int)+0xb0>
   13814:	eb003f99 	bl	23680 <assertion_failed>
   13818:	eb00488b 	bl	25a4c <CLogger::Get()>
   1381c:	e58d8000 	str	r8, [sp]
   13820:	e1a02004 	mov	r2, r4
   13824:	e59f3014 	ldr	r3, [pc, #20]	; 13840 <CUSBStandardHub::DisablePort(unsigned int)+0xb4>
   13828:	e59f1014 	ldr	r1, [pc, #20]	; 13844 <CUSBStandardHub::DisablePort(unsigned int)+0xb8>
   1382c:	eb0047c3 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13830:	e1a00007 	mov	r0, r7
   13834:	eafffff1 	b	13800 <CUSBStandardHub::DisablePort(unsigned int)+0x74>
   13838:	0003665c 	.word	0x0003665c
   1383c:	00036670 	.word	0x00036670
   13840:	00036688 	.word	0x00036688
   13844:	00036654 	.word	0x00036654

00013848 <CUSBStandardHub::RemoveDevice(unsigned int)>:
   13848:	e92d4070 	push	{r4, r5, r6, lr}
   1384c:	e1a04000 	mov	r4, r0
   13850:	e1a06001 	mov	r6, r1
   13854:	ebffffcc 	bl	1378c <CUSBStandardHub::DisablePort(unsigned int)>
   13858:	e2505000 	subs	r5, r0, #0
   1385c:	0a000008 	beq	13884 <CUSBStandardHub::RemoveDevice(unsigned int)+0x3c>
   13860:	e0844106 	add	r4, r4, r6, lsl #2
   13864:	e5940020 	ldr	r0, [r4, #32]
   13868:	e3500000 	cmp	r0, #0
   1386c:	0a000002 	beq	1387c <CUSBStandardHub::RemoveDevice(unsigned int)+0x34>
   13870:	e5903000 	ldr	r3, [r0]
   13874:	e5933004 	ldr	r3, [r3, #4]
   13878:	e12fff33 	blx	r3
   1387c:	e3a03000 	mov	r3, #0
   13880:	e5843020 	str	r3, [r4, #32]
   13884:	e1a00005 	mov	r0, r5
   13888:	e8bd8070 	pop	{r4, r5, r6, pc}

0001388c <CUSBStandardHub::Initialize()>:
   1388c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13890:	e24dd010 	sub	sp, sp, #16
   13894:	e1a04000 	mov	r4, r0
   13898:	ebffe9a9 	bl	df44 <CUSBFunction::Initialize()>
   1389c:	e2506000 	subs	r6, r0, #0
   138a0:	0a00001d 	beq	1391c <CUSBStandardHub::Initialize()+0x90>
   138a4:	e5945010 	ldr	r5, [r4, #16]
   138a8:	e3550000 	cmp	r5, #0
   138ac:	1a000039 	bne	13998 <CUSBStandardHub::Initialize()+0x10c>
   138b0:	e3a00009 	mov	r0, #9
   138b4:	eb00598e 	bl	29ef4 <operator new(unsigned int)>
   138b8:	e5840010 	str	r0, [r4, #16]
   138bc:	e1a00004 	mov	r0, r4
   138c0:	ebffeaa6 	bl	e360 <CUSBFunction::GetHost() const>
   138c4:	e1a08000 	mov	r8, r0
   138c8:	e1a00004 	mov	r0, r4
   138cc:	ebffea98 	bl	e334 <CUSBFunction::GetEndpoint0() const>
   138d0:	e3a07009 	mov	r7, #9
   138d4:	e3a020a0 	mov	r2, #160	; 0xa0
   138d8:	e5943010 	ldr	r3, [r4, #16]
   138dc:	e1a01000 	mov	r1, r0
   138e0:	e58d2008 	str	r2, [sp, #8]
   138e4:	e1a00008 	mov	r0, r8
   138e8:	e88d0088 	stm	sp, {r3, r7}
   138ec:	e58d500c 	str	r5, [sp, #12]
   138f0:	e1a03005 	mov	r3, r5
   138f4:	e3a02029 	mov	r2, #41	; 0x29
   138f8:	ebfff69c 	bl	11370 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   138fc:	e1500007 	cmp	r0, r7
   13900:	e1a08000 	mov	r8, r0
   13904:	1a000007 	bne	13928 <CUSBStandardHub::Initialize()+0x9c>
   13908:	e5943010 	ldr	r3, [r4, #16]
   1390c:	e5d33002 	ldrb	r3, [r3, #2]
   13910:	e3530008 	cmp	r3, #8
   13914:	e5843018 	str	r3, [r4, #24]
   13918:	8a00000f 	bhi	1395c <CUSBStandardHub::Initialize()+0xd0>
   1391c:	e1a00006 	mov	r0, r6
   13920:	e28dd010 	add	sp, sp, #16
   13924:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13928:	e1a06005 	mov	r6, r5
   1392c:	eb004846 	bl	25a4c <CLogger::Get()>
   13930:	e59f3070 	ldr	r3, [pc, #112]	; 139a8 <CUSBStandardHub::Initialize()+0x11c>
   13934:	e3a02001 	mov	r2, #1
   13938:	e59f106c 	ldr	r1, [pc, #108]	; 139ac <CUSBStandardHub::Initialize()+0x120>
   1393c:	eb00477f 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13940:	e5940010 	ldr	r0, [r4, #16]
   13944:	e1a01007 	mov	r1, r7
   13948:	eb005977 	bl	29f2c <operator delete(void*, unsigned int)>
   1394c:	e1a00006 	mov	r0, r6
   13950:	e5845010 	str	r5, [r4, #16]
   13954:	e28dd010 	add	sp, sp, #16
   13958:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1395c:	e1a06005 	mov	r6, r5
   13960:	eb004839 	bl	25a4c <CLogger::Get()>
   13964:	e5942018 	ldr	r2, [r4, #24]
   13968:	e59f3040 	ldr	r3, [pc, #64]	; 139b0 <CUSBStandardHub::Initialize()+0x124>
   1396c:	e58d2000 	str	r2, [sp]
   13970:	e59f1034 	ldr	r1, [pc, #52]	; 139ac <CUSBStandardHub::Initialize()+0x120>
   13974:	e3a02001 	mov	r2, #1
   13978:	eb004770 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1397c:	e5940010 	ldr	r0, [r4, #16]
   13980:	e1a01008 	mov	r1, r8
   13984:	eb005968 	bl	29f2c <operator delete(void*, unsigned int)>
   13988:	e1a00006 	mov	r0, r6
   1398c:	e5845010 	str	r5, [r4, #16]
   13990:	e28dd010 	add	sp, sp, #16
   13994:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13998:	e3a02055 	mov	r2, #85	; 0x55
   1399c:	e59f1010 	ldr	r1, [pc, #16]	; 139b4 <CUSBStandardHub::Initialize()+0x128>
   139a0:	e59f0010 	ldr	r0, [pc, #16]	; 139b8 <CUSBStandardHub::Initialize()+0x12c>
   139a4:	eb003f35 	bl	23680 <assertion_failed>
   139a8:	000366b0 	.word	0x000366b0
   139ac:	00036654 	.word	0x00036654
   139b0:	000366cc 	.word	0x000366cc
   139b4:	0003665c 	.word	0x0003665c
   139b8:	000366a0 	.word	0x000366a0

000139bc <CUSBStandardHub::EnumeratePorts()>:
   139bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139c0:	e24dd024 	sub	sp, sp, #36	; 0x24
   139c4:	e1a07000 	mov	r7, r0
   139c8:	ebffea64 	bl	e360 <CUSBFunction::GetHost() const>
   139cc:	e2509000 	subs	r9, r0, #0
   139d0:	0a000139 	beq	13ebc <CUSBStandardHub::EnumeratePorts()+0x500>
   139d4:	e1a00007 	mov	r0, r7
   139d8:	ebffea55 	bl	e334 <CUSBFunction::GetEndpoint0() const>
   139dc:	e2503000 	subs	r3, r0, #0
   139e0:	e58d3014 	str	r3, [sp, #20]
   139e4:	0a00013f 	beq	13ee8 <CUSBStandardHub::EnumeratePorts()+0x52c>
   139e8:	e5973018 	ldr	r3, [r7, #24]
   139ec:	e3530000 	cmp	r3, #0
   139f0:	0a000140 	beq	13ef8 <CUSBStandardHub::EnumeratePorts()+0x53c>
   139f4:	e5d7601c 	ldrb	r6, [r7, #28]
   139f8:	e3560000 	cmp	r6, #0
   139fc:	0a000074 	beq	13bd4 <CUSBStandardHub::EnumeratePorts()+0x218>
   13a00:	e2873020 	add	r3, r7, #32
   13a04:	e58d3018 	str	r3, [sp, #24]
   13a08:	e1a05003 	mov	r5, r3
   13a0c:	e3a04001 	mov	r4, #1
   13a10:	e2876040 	add	r6, r7, #64	; 0x40
   13a14:	ea000006 	b	13a34 <CUSBStandardHub::EnumeratePorts()+0x78>
   13a18:	ebffe3fe 	bl	ca18 <CUSBDevice::ReScanDevices()>
   13a1c:	e5973018 	ldr	r3, [r7, #24]
   13a20:	e2855004 	add	r5, r5, #4
   13a24:	e1530004 	cmp	r3, r4
   13a28:	e2866004 	add	r6, r6, #4
   13a2c:	e2844001 	add	r4, r4, #1
   13a30:	9a000089 	bls	13c5c <CUSBStandardHub::EnumeratePorts()+0x2a0>
   13a34:	e5950000 	ldr	r0, [r5]
   13a38:	e2448001 	sub	r8, r4, #1
   13a3c:	e3500000 	cmp	r0, #0
   13a40:	1afffff4 	bne	13a18 <CUSBStandardHub::EnumeratePorts()+0x5c>
   13a44:	e5963000 	ldr	r3, [r6]
   13a48:	e3530000 	cmp	r3, #0
   13a4c:	0a00005b 	beq	13bc0 <CUSBStandardHub::EnumeratePorts()+0x204>
   13a50:	e3a02004 	mov	r2, #4
   13a54:	e58d3008 	str	r3, [sp, #8]
   13a58:	e3a03000 	mov	r3, #0
   13a5c:	e6ffa074 	uxth	sl, r4
   13a60:	e58d200c 	str	r2, [sp, #12]
   13a64:	e88d0408 	stm	sp, {r3, sl}
   13a68:	e3a020a3 	mov	r2, #163	; 0xa3
   13a6c:	e59d1014 	ldr	r1, [sp, #20]
   13a70:	e1a00009 	mov	r0, r9
   13a74:	ebfff60b 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13a78:	e3500004 	cmp	r0, #4
   13a7c:	e1a0b000 	mov	fp, r0
   13a80:	0a000006 	beq	13aa0 <CUSBStandardHub::EnumeratePorts()+0xe4>
   13a84:	eb0047f0 	bl	25a4c <CLogger::Get()>
   13a88:	e58d4000 	str	r4, [sp]
   13a8c:	e59f35b4 	ldr	r3, [pc, #1460]	; 14048 <CUSBStandardHub::EnumeratePorts()+0x68c>
   13a90:	e3a02001 	mov	r2, #1
   13a94:	e59f15b0 	ldr	r1, [pc, #1456]	; 1404c <CUSBStandardHub::EnumeratePorts()+0x690>
   13a98:	eb004728 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13a9c:	eaffffde 	b	13a1c <CUSBStandardHub::EnumeratePorts()+0x60>
   13aa0:	e5962000 	ldr	r2, [r6]
   13aa4:	e5d23000 	ldrb	r3, [r2]
   13aa8:	e5d22001 	ldrb	r2, [r2, #1]
   13aac:	e1833402 	orr	r3, r3, r2, lsl #8
   13ab0:	e3130c01 	tst	r3, #256	; 0x100
   13ab4:	0a0000f5 	beq	13e90 <CUSBStandardHub::EnumeratePorts()+0x4d4>
   13ab8:	e3130001 	tst	r3, #1
   13abc:	0affffd6 	beq	13a1c <CUSBStandardHub::EnumeratePorts()+0x60>
   13ac0:	e3a03000 	mov	r3, #0
   13ac4:	e58d0000 	str	r0, [sp]
   13ac8:	e58d300c 	str	r3, [sp, #12]
   13acc:	e58d3008 	str	r3, [sp, #8]
   13ad0:	e58da004 	str	sl, [sp, #4]
   13ad4:	e3a03003 	mov	r3, #3
   13ad8:	e3a02023 	mov	r2, #35	; 0x23
   13adc:	e59d1014 	ldr	r1, [sp, #20]
   13ae0:	e1a00009 	mov	r0, r9
   13ae4:	ebfff5ef 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13ae8:	e3500000 	cmp	r0, #0
   13aec:	ba0000eb 	blt	13ea0 <CUSBStandardHub::EnumeratePorts()+0x4e4>
   13af0:	eb0054a2 	bl	28d80 <CTimer::Get()>
   13af4:	e3a00064 	mov	r0, #100	; 0x64
   13af8:	eb005467 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
   13afc:	e3a02000 	mov	r2, #0
   13b00:	e5963000 	ldr	r3, [r6]
   13b04:	e59d1014 	ldr	r1, [sp, #20]
   13b08:	e58d2000 	str	r2, [sp]
   13b0c:	e58d3008 	str	r3, [sp, #8]
   13b10:	e58db00c 	str	fp, [sp, #12]
   13b14:	e1a03002 	mov	r3, r2
   13b18:	e58da004 	str	sl, [sp, #4]
   13b1c:	e3a020a3 	mov	r2, #163	; 0xa3
   13b20:	e1a00009 	mov	r0, r9
   13b24:	ebfff5df 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13b28:	e3500004 	cmp	r0, #4
   13b2c:	1a00012e 	bne	13fec <CUSBStandardHub::EnumeratePorts()+0x630>
   13b30:	e5962000 	ldr	r2, [r6]
   13b34:	e5d23000 	ldrb	r3, [r2]
   13b38:	e5d22001 	ldrb	r2, [r2, #1]
   13b3c:	e1833402 	orr	r3, r3, r2, lsl #8
   13b40:	e3130002 	tst	r3, #2
   13b44:	0a0000e0 	beq	13ecc <CUSBStandardHub::EnumeratePorts()+0x510>
   13b48:	e3130008 	tst	r3, #8
   13b4c:	1a000128 	bne	13ff4 <CUSBStandardHub::EnumeratePorts()+0x638>
   13b50:	e3130c02 	tst	r3, #512	; 0x200
   13b54:	13a0b000 	movne	fp, #0
   13b58:	0a0000ac 	beq	13e10 <CUSBStandardHub::EnumeratePorts()+0x454>
   13b5c:	e5953000 	ldr	r3, [r5]
   13b60:	e3530000 	cmp	r3, #0
   13b64:	1a0000e7 	bne	13f08 <CUSBStandardHub::EnumeratePorts()+0x54c>
   13b68:	e3a00058 	mov	r0, #88	; 0x58
   13b6c:	eb0058e0 	bl	29ef4 <operator new(unsigned int)>
   13b70:	e1a0a000 	mov	sl, r0
   13b74:	e1a0200b 	mov	r2, fp
   13b78:	e1a03007 	mov	r3, r7
   13b7c:	e1a01009 	mov	r1, r9
   13b80:	e58d8000 	str	r8, [sp]
   13b84:	ebffe34b 	bl	c8b8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   13b88:	e585a000 	str	sl, [r5]
   13b8c:	e1a0000a 	mov	r0, sl
   13b90:	ebffe4cd 	bl	cecc <CUSBDevice::Initialize()>
   13b94:	e3500000 	cmp	r0, #0
   13b98:	1affff9f 	bne	13a1c <CUSBStandardHub::EnumeratePorts()+0x60>
   13b9c:	e5950000 	ldr	r0, [r5]
   13ba0:	e3500000 	cmp	r0, #0
   13ba4:	0a000002 	beq	13bb4 <CUSBStandardHub::EnumeratePorts()+0x1f8>
   13ba8:	e5903000 	ldr	r3, [r0]
   13bac:	e5933004 	ldr	r3, [r3, #4]
   13bb0:	e12fff33 	blx	r3
   13bb4:	e3a03000 	mov	r3, #0
   13bb8:	e5853000 	str	r3, [r5]
   13bbc:	eaffff96 	b	13a1c <CUSBStandardHub::EnumeratePorts()+0x60>
   13bc0:	e3a00004 	mov	r0, #4
   13bc4:	eb0058ca 	bl	29ef4 <operator new(unsigned int)>
   13bc8:	e1a03000 	mov	r3, r0
   13bcc:	e5860000 	str	r0, [r6]
   13bd0:	eaffff9e 	b	13a50 <CUSBStandardHub::EnumeratePorts()+0x94>
   13bd4:	e1a04006 	mov	r4, r6
   13bd8:	e1a05006 	mov	r5, r6
   13bdc:	e58d6018 	str	r6, [sp, #24]
   13be0:	e3a0b008 	mov	fp, #8
   13be4:	e3a0a003 	mov	sl, #3
   13be8:	e3a08023 	mov	r8, #35	; 0x23
   13bec:	e59d6014 	ldr	r6, [sp, #20]
   13bf0:	ea000002 	b	13c00 <CUSBStandardHub::EnumeratePorts()+0x244>
   13bf4:	e5973018 	ldr	r3, [r7, #24]
   13bf8:	e1530004 	cmp	r3, r4
   13bfc:	9a000093 	bls	13e50 <CUSBStandardHub::EnumeratePorts()+0x494>
   13c00:	e2844001 	add	r4, r4, #1
   13c04:	e6ff3074 	uxth	r3, r4
   13c08:	e58d3004 	str	r3, [sp, #4]
   13c0c:	e58d500c 	str	r5, [sp, #12]
   13c10:	e58d5008 	str	r5, [sp, #8]
   13c14:	e58db000 	str	fp, [sp]
   13c18:	e1a0300a 	mov	r3, sl
   13c1c:	e1a02008 	mov	r2, r8
   13c20:	e1a01006 	mov	r1, r6
   13c24:	e1a00009 	mov	r0, r9
   13c28:	ebfff59e 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13c2c:	e3500000 	cmp	r0, #0
   13c30:	aaffffef 	bge	13bf4 <CUSBStandardHub::EnumeratePorts()+0x238>
   13c34:	e59d6018 	ldr	r6, [sp, #24]
   13c38:	eb004783 	bl	25a4c <CLogger::Get()>
   13c3c:	e58d4000 	str	r4, [sp]
   13c40:	e59f3408 	ldr	r3, [pc, #1032]	; 14050 <CUSBStandardHub::EnumeratePorts()+0x694>
   13c44:	e3a02001 	mov	r2, #1
   13c48:	e59f13fc 	ldr	r1, [pc, #1020]	; 1404c <CUSBStandardHub::EnumeratePorts()+0x690>
   13c4c:	eb0046bb 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13c50:	e1a00006 	mov	r0, r6
   13c54:	e28dd024 	add	sp, sp, #36	; 0x24
   13c58:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c5c:	e3530000 	cmp	r3, #0
   13c60:	0a00002a 	beq	13d10 <CUSBStandardHub::EnumeratePorts()+0x354>
   13c64:	e3a04001 	mov	r4, #1
   13c68:	e58d901c 	str	r9, [sp, #28]
   13c6c:	e3a0a004 	mov	sl, #4
   13c70:	e1a06004 	mov	r6, r4
   13c74:	e3a0b002 	mov	fp, #2
   13c78:	e59f83cc 	ldr	r8, [pc, #972]	; 1404c <CUSBStandardHub::EnumeratePorts()+0x690>
   13c7c:	e2875060 	add	r5, r7, #96	; 0x60
   13c80:	e59d9018 	ldr	r9, [sp, #24]
   13c84:	ea000004 	b	13c9c <CUSBStandardHub::EnumeratePorts()+0x2e0>
   13c88:	e1530004 	cmp	r3, r4
   13c8c:	e2899004 	add	r9, r9, #4
   13c90:	e2844001 	add	r4, r4, #1
   13c94:	e2855001 	add	r5, r5, #1
   13c98:	9a00001b 	bls	13d0c <CUSBStandardHub::EnumeratePorts()+0x350>
   13c9c:	e5990000 	ldr	r0, [r9]
   13ca0:	e3500000 	cmp	r0, #0
   13ca4:	0afffff7 	beq	13c88 <CUSBStandardHub::EnumeratePorts()+0x2cc>
   13ca8:	e5d52000 	ldrb	r2, [r5]
   13cac:	e3520000 	cmp	r2, #0
   13cb0:	1afffff4 	bne	13c88 <CUSBStandardHub::EnumeratePorts()+0x2cc>
   13cb4:	e5903000 	ldr	r3, [r0]
   13cb8:	e5c56000 	strb	r6, [r5]
   13cbc:	e593300c 	ldr	r3, [r3, #12]
   13cc0:	e12fff33 	blx	r3
   13cc4:	e3500000 	cmp	r0, #0
   13cc8:	1a000048 	bne	13df0 <CUSBStandardHub::EnumeratePorts()+0x434>
   13ccc:	eb00475e 	bl	25a4c <CLogger::Get()>
   13cd0:	e58d4000 	str	r4, [sp]
   13cd4:	e59f3378 	ldr	r3, [pc, #888]	; 14054 <CUSBStandardHub::EnumeratePorts()+0x698>
   13cd8:	e1a0200b 	mov	r2, fp
   13cdc:	e1a01008 	mov	r1, r8
   13ce0:	eb004696 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13ce4:	e5990000 	ldr	r0, [r9]
   13ce8:	e3500000 	cmp	r0, #0
   13cec:	0a000002 	beq	13cfc <CUSBStandardHub::EnumeratePorts()+0x340>
   13cf0:	e5903000 	ldr	r3, [r0]
   13cf4:	e5933004 	ldr	r3, [r3, #4]
   13cf8:	e12fff33 	blx	r3
   13cfc:	e3a03000 	mov	r3, #0
   13d00:	e5893000 	str	r3, [r9]
   13d04:	e5973018 	ldr	r3, [r7, #24]
   13d08:	eaffffde 	b	13c88 <CUSBStandardHub::EnumeratePorts()+0x2cc>
   13d0c:	e59d901c 	ldr	r9, [sp, #28]
   13d10:	e3a00004 	mov	r0, #4
   13d14:	eb005876 	bl	29ef4 <operator new(unsigned int)>
   13d18:	e3a06000 	mov	r6, #0
   13d1c:	e3a04004 	mov	r4, #4
   13d20:	e58d0008 	str	r0, [sp, #8]
   13d24:	e1a0b000 	mov	fp, r0
   13d28:	e58d400c 	str	r4, [sp, #12]
   13d2c:	e58d6004 	str	r6, [sp, #4]
   13d30:	e58d6000 	str	r6, [sp]
   13d34:	e1a03006 	mov	r3, r6
   13d38:	e3a020a0 	mov	r2, #160	; 0xa0
   13d3c:	e59d1014 	ldr	r1, [sp, #20]
   13d40:	e1a00009 	mov	r0, r9
   13d44:	ebfff557 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13d48:	e1500004 	cmp	r0, r4
   13d4c:	e1a05000 	mov	r5, r0
   13d50:	1a000035 	bne	13e2c <CUSBStandardHub::EnumeratePorts()+0x470>
   13d54:	e5db3000 	ldrb	r3, [fp]
   13d58:	e2138002 	ands	r8, r3, #2
   13d5c:	0a00006d 	beq	13f18 <CUSBStandardHub::EnumeratePorts()+0x55c>
   13d60:	e5973018 	ldr	r3, [r7, #24]
   13d64:	e3530000 	cmp	r3, #0
   13d68:	0a000016 	beq	13dc8 <CUSBStandardHub::EnumeratePorts()+0x40c>
   13d6c:	e3a04001 	mov	r4, #1
   13d70:	e58db018 	str	fp, [sp, #24]
   13d74:	e1a0a004 	mov	sl, r4
   13d78:	e3a08008 	mov	r8, #8
   13d7c:	e3a05023 	mov	r5, #35	; 0x23
   13d80:	e59db014 	ldr	fp, [sp, #20]
   13d84:	ea000000 	b	13d8c <CUSBStandardHub::EnumeratePorts()+0x3d0>
   13d88:	e1a04002 	mov	r4, r2
   13d8c:	e6ff3074 	uxth	r3, r4
   13d90:	e58d3004 	str	r3, [sp, #4]
   13d94:	e1a02005 	mov	r2, r5
   13d98:	e1a0300a 	mov	r3, sl
   13d9c:	e58d600c 	str	r6, [sp, #12]
   13da0:	e58d6008 	str	r6, [sp, #8]
   13da4:	e58d8000 	str	r8, [sp]
   13da8:	e1a0100b 	mov	r1, fp
   13dac:	e1a00009 	mov	r0, r9
   13db0:	ebfff53c 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13db4:	e5973018 	ldr	r3, [r7, #24]
   13db8:	e2842001 	add	r2, r4, #1
   13dbc:	e1540003 	cmp	r4, r3
   13dc0:	3afffff0 	bcc	13d88 <CUSBStandardHub::EnumeratePorts()+0x3cc>
   13dc4:	e59db018 	ldr	fp, [sp, #24]
   13dc8:	eb00471f 	bl	25a4c <CLogger::Get()>
   13dcc:	e59f3284 	ldr	r3, [pc, #644]	; 14058 <CUSBStandardHub::EnumeratePorts()+0x69c>
   13dd0:	e3a02001 	mov	r2, #1
   13dd4:	e59f1270 	ldr	r1, [pc, #624]	; 1404c <CUSBStandardHub::EnumeratePorts()+0x690>
   13dd8:	eb004658 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13ddc:	e1a0000b 	mov	r0, fp
   13de0:	e3a01004 	mov	r1, #4
   13de4:	eb005850 	bl	29f2c <operator delete(void*, unsigned int)>
   13de8:	e3a06000 	mov	r6, #0
   13dec:	eaffff97 	b	13c50 <CUSBStandardHub::EnumeratePorts()+0x294>
   13df0:	eb004715 	bl	25a4c <CLogger::Get()>
   13df4:	e59f3260 	ldr	r3, [pc, #608]	; 1405c <CUSBStandardHub::EnumeratePorts()+0x6a0>
   13df8:	e58d4000 	str	r4, [sp]
   13dfc:	e1a0200a 	mov	r2, sl
   13e00:	e1a01008 	mov	r1, r8
   13e04:	eb00464d 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13e08:	e5973018 	ldr	r3, [r7, #24]
   13e0c:	eaffff9d 	b	13c88 <CUSBStandardHub::EnumeratePorts()+0x2cc>
   13e10:	e3130b01 	tst	r3, #1024	; 0x400
   13e14:	e5953000 	ldr	r3, [r5]
   13e18:	03a0b001 	moveq	fp, #1
   13e1c:	13a0b002 	movne	fp, #2
   13e20:	e3530000 	cmp	r3, #0
   13e24:	0affff4f 	beq	13b68 <CUSBStandardHub::EnumeratePorts()+0x1ac>
   13e28:	ea000036 	b	13f08 <CUSBStandardHub::EnumeratePorts()+0x54c>
   13e2c:	eb004706 	bl	25a4c <CLogger::Get()>
   13e30:	e59f3228 	ldr	r3, [pc, #552]	; 14060 <CUSBStandardHub::EnumeratePorts()+0x6a4>
   13e34:	e3a02001 	mov	r2, #1
   13e38:	e59f120c 	ldr	r1, [pc, #524]	; 1404c <CUSBStandardHub::EnumeratePorts()+0x690>
   13e3c:	eb00463f 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13e40:	e1a01004 	mov	r1, r4
   13e44:	e1a0000b 	mov	r0, fp
   13e48:	eb005837 	bl	29f2c <operator delete(void*, unsigned int)>
   13e4c:	eaffff7f 	b	13c50 <CUSBStandardHub::EnumeratePorts()+0x294>
   13e50:	e3a03001 	mov	r3, #1
   13e54:	e5c7301c 	strb	r3, [r7, #28]
   13e58:	eb0044ba 	bl	25148 <CKernelOptions::Get()>
   13e5c:	e3500000 	cmp	r0, #0
   13e60:	0a000002 	beq	13e70 <CUSBStandardHub::EnumeratePorts()+0x4b4>
   13e64:	eb0044aa 	bl	25114 <CKernelOptions::GetUSBPowerDelay() const>
   13e68:	e2504000 	subs	r4, r0, #0
   13e6c:	1a000000 	bne	13e74 <CUSBStandardHub::EnumeratePorts()+0x4b8>
   13e70:	e59f41ec 	ldr	r4, [pc, #492]	; 14064 <CUSBStandardHub::EnumeratePorts()+0x6a8>
   13e74:	eb0053c1 	bl	28d80 <CTimer::Get()>
   13e78:	e1a00004 	mov	r0, r4
   13e7c:	eb005386 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
   13e80:	e5973018 	ldr	r3, [r7, #24]
   13e84:	e3530000 	cmp	r3, #0
   13e88:	1afffedc 	bne	13a00 <CUSBStandardHub::EnumeratePorts()+0x44>
   13e8c:	eaffff9f 	b	13d10 <CUSBStandardHub::EnumeratePorts()+0x354>
   13e90:	e59f21d0 	ldr	r2, [pc, #464]	; 14068 <CUSBStandardHub::EnumeratePorts()+0x6ac>
   13e94:	e59f11d0 	ldr	r1, [pc, #464]	; 1406c <CUSBStandardHub::EnumeratePorts()+0x6b0>
   13e98:	e59f01d0 	ldr	r0, [pc, #464]	; 14070 <CUSBStandardHub::EnumeratePorts()+0x6b4>
   13e9c:	eb003df7 	bl	23680 <assertion_failed>
   13ea0:	eb0046e9 	bl	25a4c <CLogger::Get()>
   13ea4:	e58d4000 	str	r4, [sp]
   13ea8:	e59f31c4 	ldr	r3, [pc, #452]	; 14074 <CUSBStandardHub::EnumeratePorts()+0x6b8>
   13eac:	e3a02001 	mov	r2, #1
   13eb0:	e59f1194 	ldr	r1, [pc, #404]	; 1404c <CUSBStandardHub::EnumeratePorts()+0x690>
   13eb4:	eb004621 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13eb8:	eafffed7 	b	13a1c <CUSBStandardHub::EnumeratePorts()+0x60>
   13ebc:	e3a020e3 	mov	r2, #227	; 0xe3
   13ec0:	e59f11a4 	ldr	r1, [pc, #420]	; 1406c <CUSBStandardHub::EnumeratePorts()+0x6b0>
   13ec4:	e59f01ac 	ldr	r0, [pc, #428]	; 14078 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   13ec8:	eb003dec 	bl	23680 <assertion_failed>
   13ecc:	eb0046de 	bl	25a4c <CLogger::Get()>
   13ed0:	e58d4000 	str	r4, [sp]
   13ed4:	e59f31a0 	ldr	r3, [pc, #416]	; 1407c <CUSBStandardHub::EnumeratePorts()+0x6c0>
   13ed8:	e3a02001 	mov	r2, #1
   13edc:	e59f1168 	ldr	r1, [pc, #360]	; 1404c <CUSBStandardHub::EnumeratePorts()+0x690>
   13ee0:	eb004616 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13ee4:	eafffecc 	b	13a1c <CUSBStandardHub::EnumeratePorts()+0x60>
   13ee8:	e3a020e6 	mov	r2, #230	; 0xe6
   13eec:	e59f1178 	ldr	r1, [pc, #376]	; 1406c <CUSBStandardHub::EnumeratePorts()+0x6b0>
   13ef0:	e59f0188 	ldr	r0, [pc, #392]	; 14080 <CUSBStandardHub::EnumeratePorts()+0x6c4>
   13ef4:	eb003de1 	bl	23680 <assertion_failed>
   13ef8:	e3a020e8 	mov	r2, #232	; 0xe8
   13efc:	e59f1168 	ldr	r1, [pc, #360]	; 1406c <CUSBStandardHub::EnumeratePorts()+0x6b0>
   13f00:	e59f017c 	ldr	r0, [pc, #380]	; 14084 <CUSBStandardHub::EnumeratePorts()+0x6c8>
   13f04:	eb003ddd 	bl	23680 <assertion_failed>
   13f08:	e59f2178 	ldr	r2, [pc, #376]	; 14088 <CUSBStandardHub::EnumeratePorts()+0x6cc>
   13f0c:	e59f1158 	ldr	r1, [pc, #344]	; 1406c <CUSBStandardHub::EnumeratePorts()+0x6b0>
   13f10:	e59f0174 	ldr	r0, [pc, #372]	; 1408c <CUSBStandardHub::EnumeratePorts()+0x6d0>
   13f14:	eb003dd9 	bl	23680 <assertion_failed>
   13f18:	e1a0000b 	mov	r0, fp
   13f1c:	e1a01005 	mov	r1, r5
   13f20:	eb005801 	bl	29f2c <operator delete(void*, unsigned int)>
   13f24:	e5973018 	ldr	r3, [r7, #24]
   13f28:	e3530000 	cmp	r3, #0
   13f2c:	0a000043 	beq	14040 <CUSBStandardHub::EnumeratePorts()+0x684>
   13f30:	e3a04001 	mov	r4, #1
   13f34:	e1a0b005 	mov	fp, r5
   13f38:	e59da014 	ldr	sl, [sp, #20]
   13f3c:	e2875040 	add	r5, r7, #64	; 0x40
   13f40:	e58d4014 	str	r4, [sp, #20]
   13f44:	ea000004 	b	13f5c <CUSBStandardHub::EnumeratePorts()+0x5a0>
   13f48:	e5973018 	ldr	r3, [r7, #24]
   13f4c:	e2855004 	add	r5, r5, #4
   13f50:	e1540003 	cmp	r4, r3
   13f54:	e2844001 	add	r4, r4, #1
   13f58:	2a000021 	bcs	13fe4 <CUSBStandardHub::EnumeratePorts()+0x628>
   13f5c:	e5953000 	ldr	r3, [r5]
   13f60:	e6ff6074 	uxth	r6, r4
   13f64:	e58d3008 	str	r3, [sp, #8]
   13f68:	e58db00c 	str	fp, [sp, #12]
   13f6c:	e58d8000 	str	r8, [sp]
   13f70:	e58d6004 	str	r6, [sp, #4]
   13f74:	e3a03000 	mov	r3, #0
   13f78:	e3a020a3 	mov	r2, #163	; 0xa3
   13f7c:	e1a0100a 	mov	r1, sl
   13f80:	e1a00009 	mov	r0, r9
   13f84:	ebfff4c7 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13f88:	e3500004 	cmp	r0, #4
   13f8c:	1affffed 	bne	13f48 <CUSBStandardHub::EnumeratePorts()+0x58c>
   13f90:	e5953000 	ldr	r3, [r5]
   13f94:	e5d33000 	ldrb	r3, [r3]
   13f98:	e3130008 	tst	r3, #8
   13f9c:	0affffe9 	beq	13f48 <CUSBStandardHub::EnumeratePorts()+0x58c>
   13fa0:	e3a03008 	mov	r3, #8
   13fa4:	e3a02023 	mov	r2, #35	; 0x23
   13fa8:	e1a0100a 	mov	r1, sl
   13fac:	e58d3000 	str	r3, [sp]
   13fb0:	e58d800c 	str	r8, [sp, #12]
   13fb4:	e3a03001 	mov	r3, #1
   13fb8:	e98d0140 	stmib	sp, {r6, r8}
   13fbc:	e1a00009 	mov	r0, r9
   13fc0:	ebfff4b8 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13fc4:	eb0046a0 	bl	25a4c <CLogger::Get()>
   13fc8:	e58d4000 	str	r4, [sp]
   13fcc:	e59f30bc 	ldr	r3, [pc, #188]	; 14090 <CUSBStandardHub::EnumeratePorts()+0x6d4>
   13fd0:	e3a02001 	mov	r2, #1
   13fd4:	e59f1070 	ldr	r1, [pc, #112]	; 1404c <CUSBStandardHub::EnumeratePorts()+0x690>
   13fd8:	eb0045d8 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13fdc:	e58d8014 	str	r8, [sp, #20]
   13fe0:	eaffffd8 	b	13f48 <CUSBStandardHub::EnumeratePorts()+0x58c>
   13fe4:	e59d6014 	ldr	r6, [sp, #20]
   13fe8:	eaffff18 	b	13c50 <CUSBStandardHub::EnumeratePorts()+0x294>
   13fec:	e3a06000 	mov	r6, #0
   13ff0:	eaffff16 	b	13c50 <CUSBStandardHub::EnumeratePorts()+0x294>
   13ff4:	e3a02000 	mov	r2, #0
   13ff8:	e3a03008 	mov	r3, #8
   13ffc:	e59d1014 	ldr	r1, [sp, #20]
   14000:	e58d200c 	str	r2, [sp, #12]
   14004:	e58d2008 	str	r2, [sp, #8]
   14008:	e58d3000 	str	r3, [sp]
   1400c:	e3a02023 	mov	r2, #35	; 0x23
   14010:	e3a03001 	mov	r3, #1
   14014:	e58da004 	str	sl, [sp, #4]
   14018:	e1a00009 	mov	r0, r9
   1401c:	ebfff4a1 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14020:	eb004689 	bl	25a4c <CLogger::Get()>
   14024:	e58d4000 	str	r4, [sp]
   14028:	e59f3060 	ldr	r3, [pc, #96]	; 14090 <CUSBStandardHub::EnumeratePorts()+0x6d4>
   1402c:	e3a02001 	mov	r2, #1
   14030:	e59f1014 	ldr	r1, [pc, #20]	; 1404c <CUSBStandardHub::EnumeratePorts()+0x690>
   14034:	eb0045c1 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14038:	e3a06000 	mov	r6, #0
   1403c:	eaffff03 	b	13c50 <CUSBStandardHub::EnumeratePorts()+0x294>
   14040:	e3a06001 	mov	r6, #1
   14044:	eaffff01 	b	13c50 <CUSBStandardHub::EnumeratePorts()+0x294>
   14048:	00036718 	.word	0x00036718
   1404c:	00036654 	.word	0x00036654
   14050:	00036700 	.word	0x00036700
   14054:	000367d8 	.word	0x000367d8
   14058:	00036830 	.word	0x00036830
   1405c:	000367fc 	.word	0x000367fc
   14060:	00036818 	.word	0x00036818
   14064:	000001fe 	.word	0x000001fe
   14068:	00000125 	.word	0x00000125
   1406c:	0003665c 	.word	0x0003665c
   14070:	00036738 	.word	0x00036738
   14074:	0003676c 	.word	0x0003676c
   14078:	00036148 	.word	0x00036148
   1407c:	00036784 	.word	0x00036784
   14080:	000366e0 	.word	0x000366e0
   14084:	000366f0 	.word	0x000366f0
   14088:	00000162 	.word	0x00000162
   1408c:	000367c0 	.word	0x000367c0
   14090:	0003679c 	.word	0x0003679c

00014094 <CUSBStandardHub::ReScanDevices()>:
   14094:	eafffe48 	b	139bc <CUSBStandardHub::EnumeratePorts()>

00014098 <CUSBStandardHub::Configure()>:
   14098:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1409c:	e24dd010 	sub	sp, sp, #16
   140a0:	e1a04000 	mov	r4, r0
   140a4:	ebffe88b 	bl	e2d8 <CUSBFunction::GetNumEndpoints() const>
   140a8:	e3500001 	cmp	r0, #1
   140ac:	0a000006 	beq	140cc <CUSBStandardHub::Configure()+0x34>
   140b0:	e1a00004 	mov	r0, r4
   140b4:	e59f1110 	ldr	r1, [pc, #272]	; 141cc <CUSBStandardHub::Configure()+0x134>
   140b8:	ebffe8be 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   140bc:	e3a06000 	mov	r6, #0
   140c0:	e1a00006 	mov	r0, r6
   140c4:	e28dd010 	add	sp, sp, #16
   140c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   140cc:	e1a05000 	mov	r5, r0
   140d0:	e3a01005 	mov	r1, #5
   140d4:	e1a00004 	mov	r0, r4
   140d8:	ebffe8ab 	bl	e38c <CUSBFunction::GetDescriptor(unsigned char)>
   140dc:	e2506000 	subs	r6, r0, #0
   140e0:	0afffff2 	beq	140b0 <CUSBStandardHub::Configure()+0x18>
   140e4:	e1d630d2 	ldrsb	r3, [r6, #2]
   140e8:	e3530000 	cmp	r3, #0
   140ec:	aaffffef 	bge	140b0 <CUSBStandardHub::Configure()+0x18>
   140f0:	e5d63003 	ldrb	r3, [r6, #3]
   140f4:	e203303f 	and	r3, r3, #63	; 0x3f
   140f8:	e3530003 	cmp	r3, #3
   140fc:	1affffeb 	bne	140b0 <CUSBStandardHub::Configure()+0x18>
   14100:	e1a00004 	mov	r0, r4
   14104:	ebffe87f 	bl	e308 <CUSBFunction::GetDevice() const>
   14108:	e1a08000 	mov	r8, r0
   1410c:	e3a00014 	mov	r0, #20
   14110:	eb005777 	bl	29ef4 <operator new(unsigned int)>
   14114:	e1a07000 	mov	r7, r0
   14118:	e1a02006 	mov	r2, r6
   1411c:	e1a01008 	mov	r1, r8
   14120:	ebffe6b5 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14124:	e5847014 	str	r7, [r4, #20]
   14128:	e1a00004 	mov	r0, r4
   1412c:	ebffe7b1 	bl	dff8 <CUSBFunction::Configure()>
   14130:	e2506000 	subs	r6, r0, #0
   14134:	0a000018 	beq	1419c <CUSBStandardHub::Configure()+0x104>
   14138:	e1a0000d 	mov	r0, sp
   1413c:	eb004a28 	bl	269e4 <CString::CString()>
   14140:	e59f3088 	ldr	r3, [pc, #136]	; 141d0 <CUSBStandardHub::Configure()+0x138>
   14144:	e59f1088 	ldr	r1, [pc, #136]	; 141d4 <CUSBStandardHub::Configure()+0x13c>
   14148:	e5932000 	ldr	r2, [r3]
   1414c:	e1a0000d 	mov	r0, sp
   14150:	e282c001 	add	ip, r2, #1
   14154:	e583c000 	str	ip, [r3]
   14158:	eb004f64 	bl	27ef0 <CString::Format(char const*, ...)>
   1415c:	eb004021 	bl	241e8 <CDeviceNameService::Get()>
   14160:	e1a06000 	mov	r6, r0
   14164:	e1a0000d 	mov	r0, sp
   14168:	eb004a33 	bl	26a3c <CString::operator char const*() const>
   1416c:	e3a03000 	mov	r3, #0
   14170:	e1a01000 	mov	r1, r0
   14174:	e1a02004 	mov	r2, r4
   14178:	e1a00006 	mov	r0, r6
   1417c:	eb003f5f 	bl	23f00 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   14180:	e1a00004 	mov	r0, r4
   14184:	ebfffe0c 	bl	139bc <CUSBStandardHub::EnumeratePorts()>
   14188:	e2506000 	subs	r6, r0, #0
   1418c:	0a000008 	beq	141b4 <CUSBStandardHub::Configure()+0x11c>
   14190:	e1a0000d 	mov	r0, sp
   14194:	eb0049df 	bl	26918 <CString::~CString()>
   14198:	eaffffc8 	b	140c0 <CUSBStandardHub::Configure()+0x28>
   1419c:	eb00462a 	bl	25a4c <CLogger::Get()>
   141a0:	e1a02005 	mov	r2, r5
   141a4:	e59f302c 	ldr	r3, [pc, #44]	; 141d8 <CUSBStandardHub::Configure()+0x140>
   141a8:	e59f101c 	ldr	r1, [pc, #28]	; 141cc <CUSBStandardHub::Configure()+0x134>
   141ac:	eb004563 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   141b0:	eaffffc2 	b	140c0 <CUSBStandardHub::Configure()+0x28>
   141b4:	eb004624 	bl	25a4c <CLogger::Get()>
   141b8:	e1a02005 	mov	r2, r5
   141bc:	e59f3018 	ldr	r3, [pc, #24]	; 141dc <CUSBStandardHub::Configure()+0x144>
   141c0:	e59f1004 	ldr	r1, [pc, #4]	; 141cc <CUSBStandardHub::Configure()+0x134>
   141c4:	eb00455d 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   141c8:	eafffff0 	b	14190 <CUSBStandardHub::Configure()+0xf8>
   141cc:	00036654 	.word	0x00036654
   141d0:	0003dec8 	.word	0x0003dec8
   141d4:	0003684c 	.word	0x0003684c
   141d8:	00035810 	.word	0x00035810
   141dc:	00036854 	.word	0x00036854

000141e0 <CLAN7800Device::GetMACAddress() const>:
   141e0:	e280001c 	add	r0, r0, #28
   141e4:	e12fff1e 	bx	lr

000141e8 <non-virtual thunk to CLAN7800Device::GetMACAddress() const>:
   141e8:	e2400010 	sub	r0, r0, #16
   141ec:	eafffffb 	b	141e0 <CLAN7800Device::GetMACAddress() const>

000141f0 <CLAN7800Device::~CLAN7800Device()>:
   141f0:	e92d4070 	push	{r4, r5, r6, lr}
   141f4:	e59f3074 	ldr	r3, [pc, #116]	; 14270 <CLAN7800Device::~CLAN7800Device()+0x80>
   141f8:	e5905018 	ldr	r5, [r0, #24]
   141fc:	e2832040 	add	r2, r3, #64	; 0x40
   14200:	e3550000 	cmp	r5, #0
   14204:	e1a04000 	mov	r4, r0
   14208:	e5803000 	str	r3, [r0]
   1420c:	e5802010 	str	r2, [r0, #16]
   14210:	0a000004 	beq	14228 <CLAN7800Device::~CLAN7800Device()+0x38>
   14214:	e1a00005 	mov	r0, r5
   14218:	ebffe6e1 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   1421c:	e1a00005 	mov	r0, r5
   14220:	e3a01014 	mov	r1, #20
   14224:	eb005740 	bl	29f2c <operator delete(void*, unsigned int)>
   14228:	e3a03000 	mov	r3, #0
   1422c:	e5945014 	ldr	r5, [r4, #20]
   14230:	e5843018 	str	r3, [r4, #24]
   14234:	e1550003 	cmp	r5, r3
   14238:	0a000004 	beq	14250 <CLAN7800Device::~CLAN7800Device()+0x60>
   1423c:	e1a00005 	mov	r0, r5
   14240:	ebffe6d7 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   14244:	e1a00005 	mov	r0, r5
   14248:	e3a01014 	mov	r1, #20
   1424c:	eb005736 	bl	29f2c <operator delete(void*, unsigned int)>
   14250:	e3a03000 	mov	r3, #0
   14254:	e284001c 	add	r0, r4, #28
   14258:	e5843014 	str	r3, [r4, #20]
   1425c:	eb00563f 	bl	29b60 <CMACAddress::~CMACAddress()>
   14260:	e1a00004 	mov	r0, r4
   14264:	ebffe73a 	bl	df54 <CUSBFunction::~CUSBFunction()>
   14268:	e1a00004 	mov	r0, r4
   1426c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14270:	00036874 	.word	0x00036874

00014274 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   14274:	e2400010 	sub	r0, r0, #16
   14278:	eaffffdc 	b	141f0 <CLAN7800Device::~CLAN7800Device()>

0001427c <CLAN7800Device::~CLAN7800Device()>:
   1427c:	e92d4010 	push	{r4, lr}
   14280:	e1a04000 	mov	r4, r0
   14284:	ebffffd9 	bl	141f0 <CLAN7800Device::~CLAN7800Device()>
   14288:	e1a00004 	mov	r0, r4
   1428c:	e3a01024 	mov	r1, #36	; 0x24
   14290:	eb005725 	bl	29f2c <operator delete(void*, unsigned int)>
   14294:	e1a00004 	mov	r0, r4
   14298:	e8bd8010 	pop	{r4, pc}

0001429c <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   1429c:	e2400010 	sub	r0, r0, #16
   142a0:	eafffff5 	b	1427c <CLAN7800Device::~CLAN7800Device()>

000142a4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   142a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   142a8:	e5903014 	ldr	r3, [r0, #20]
   142ac:	e24dd030 	sub	sp, sp, #48	; 0x30
   142b0:	e3530000 	cmp	r3, #0
   142b4:	0a000034 	beq	1438c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe8>
   142b8:	e3510000 	cmp	r1, #0
   142bc:	e1a04001 	mov	r4, r1
   142c0:	0a000035 	beq	1439c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xf8>
   142c4:	e3a06000 	mov	r6, #0
   142c8:	e1a05000 	mov	r5, r0
   142cc:	e1a01003 	mov	r1, r3
   142d0:	e1a08002 	mov	r8, r2
   142d4:	e3a03d19 	mov	r3, #1600	; 0x640
   142d8:	e1a02004 	mov	r2, r4
   142dc:	e58d6000 	str	r6, [sp]
   142e0:	e28d0008 	add	r0, sp, #8
   142e4:	ebfffbf5 	bl	132c0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   142e8:	e1a00005 	mov	r0, r5
   142ec:	ebffe81b 	bl	e360 <CUSBFunction::GetHost() const>
   142f0:	e5903000 	ldr	r3, [r0]
   142f4:	e1a02006 	mov	r2, r6
   142f8:	e5933008 	ldr	r3, [r3, #8]
   142fc:	e28d1008 	add	r1, sp, #8
   14300:	e12fff33 	blx	r3
   14304:	e2505000 	subs	r5, r0, #0
   14308:	0a000019 	beq	14374 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd0>
   1430c:	e28d0008 	add	r0, sp, #8
   14310:	ebfffc1d 	bl	1338c <CUSBRequest::GetResultLength() const>
   14314:	e3500009 	cmp	r0, #9
   14318:	9a000015 	bls	14374 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd0>
   1431c:	e5947000 	ldr	r7, [r4]
   14320:	e3170501 	tst	r7, #4194304	; 0x400000
   14324:	1a000020 	bne	143ac <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x108>
   14328:	e1a03907 	lsl	r3, r7, #18
   1432c:	e1a03923 	lsr	r3, r3, #18
   14330:	e240200a 	sub	r2, r0, #10
   14334:	e1530002 	cmp	r3, r2
   14338:	1a000027 	bne	143dc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x138>
   1433c:	e3530004 	cmp	r3, #4
   14340:	9a000021 	bls	143cc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x128>
   14344:	e240600e 	sub	r6, r0, #14
   14348:	e1a02006 	mov	r2, r6
   1434c:	e284100a 	add	r1, r4, #10
   14350:	e1a00004 	mov	r0, r4
   14354:	eb00550d 	bl	29790 <memcpy>
   14358:	e3580000 	cmp	r8, #0
   1435c:	15886000 	strne	r6, [r8]
   14360:	1a000004 	bne	14378 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd4>
   14364:	e59f2080 	ldr	r2, [pc, #128]	; 143ec <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   14368:	e59f1080 	ldr	r1, [pc, #128]	; 143f0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   1436c:	e59f0080 	ldr	r0, [pc, #128]	; 143f4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x150>
   14370:	eb003cc2 	bl	23680 <assertion_failed>
   14374:	e3a05000 	mov	r5, #0
   14378:	e28d0008 	add	r0, sp, #8
   1437c:	ebfffbf0 	bl	13344 <CUSBRequest::~CUSBRequest()>
   14380:	e1a00005 	mov	r0, r5
   14384:	e28dd030 	add	sp, sp, #48	; 0x30
   14388:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1438c:	e59f2064 	ldr	r2, [pc, #100]	; 143f8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x154>
   14390:	e59f1058 	ldr	r1, [pc, #88]	; 143f0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   14394:	e59f0060 	ldr	r0, [pc, #96]	; 143fc <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x158>
   14398:	eb003cb8 	bl	23680 <assertion_failed>
   1439c:	e3a02d07 	mov	r2, #448	; 0x1c0
   143a0:	e59f1048 	ldr	r1, [pc, #72]	; 143f0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   143a4:	e59f0054 	ldr	r0, [pc, #84]	; 14400 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x15c>
   143a8:	eb003cb4 	bl	23680 <assertion_failed>
   143ac:	eb0045a6 	bl	25a4c <CLogger::Get()>
   143b0:	e58d7000 	str	r7, [sp]
   143b4:	e59f3048 	ldr	r3, [pc, #72]	; 14404 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   143b8:	e3a02002 	mov	r2, #2
   143bc:	e59f1044 	ldr	r1, [pc, #68]	; 14408 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x164>
   143c0:	e1a05006 	mov	r5, r6
   143c4:	eb0044dd 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   143c8:	eaffffea 	b	14378 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd4>
   143cc:	e3a02f76 	mov	r2, #472	; 0x1d8
   143d0:	e59f1018 	ldr	r1, [pc, #24]	; 143f0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   143d4:	e59f0030 	ldr	r0, [pc, #48]	; 1440c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x168>
   143d8:	eb003ca8 	bl	23680 <assertion_failed>
   143dc:	e59f202c 	ldr	r2, [pc, #44]	; 14410 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x16c>
   143e0:	e59f1008 	ldr	r1, [pc, #8]	; 143f0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   143e4:	e59f0028 	ldr	r0, [pc, #40]	; 14414 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x170>
   143e8:	eb003ca4 	bl	23680 <assertion_failed>
   143ec:	000001e3 	.word	0x000001e3
   143f0:	000368e4 	.word	0x000368e4
   143f4:	00036964 	.word	0x00036964
   143f8:	000001bf 	.word	0x000001bf
   143fc:	000368f0 	.word	0x000368f0
   14400:	00036138 	.word	0x00036138
   14404:	00036908 	.word	0x00036908
   14408:	000368dc 	.word	0x000368dc
   1440c:	00036950 	.word	0x00036950
   14410:	000001d7 	.word	0x000001d7
   14414:	00036920 	.word	0x00036920

00014418 <non-virtual thunk to CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   14418:	e2400010 	sub	r0, r0, #16
   1441c:	eaffffa0 	b	142a4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>

00014420 <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   14420:	e3520d19 	cmp	r2, #1600	; 0x640
   14424:	8a00001d 	bhi	144a0 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x80>
   14428:	e92d4070 	push	{r4, r5, r6, lr}
   1442c:	e3510000 	cmp	r1, #0
   14430:	e24dde65 	sub	sp, sp, #1616	; 0x650
   14434:	e24dd008 	sub	sp, sp, #8
   14438:	e1a05000 	mov	r5, r0
   1443c:	0a00001d 	beq	144b8 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x98>
   14440:	e1a04002 	mov	r4, r2
   14444:	e3a06000 	mov	r6, #0
   14448:	e28d0018 	add	r0, sp, #24
   1444c:	e2403008 	sub	r3, r0, #8
   14450:	e58d300c 	str	r3, [sp, #12]
   14454:	eb0054cd 	bl	29790 <memcpy>
   14458:	e5952018 	ldr	r2, [r5, #24]
   1445c:	e3843501 	orr	r3, r4, #4194304	; 0x400000
   14460:	e1520006 	cmp	r2, r6
   14464:	e58d6014 	str	r6, [sp, #20]
   14468:	e58d3010 	str	r3, [sp, #16]
   1446c:	0a00000d 	beq	144a8 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x88>
   14470:	e1a00005 	mov	r0, r5
   14474:	ebffe7b9 	bl	e360 <CUSBFunction::GetHost() const>
   14478:	e5951018 	ldr	r1, [r5, #24]
   1447c:	e2843008 	add	r3, r4, #8
   14480:	e58d6000 	str	r6, [sp]
   14484:	e59d200c 	ldr	r2, [sp, #12]
   14488:	ebfff3ec 	bl	11440 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1448c:	e1e00000 	mvn	r0, r0
   14490:	e1a00fa0 	lsr	r0, r0, #31
   14494:	e28dde65 	add	sp, sp, #1616	; 0x650
   14498:	e28dd008 	add	sp, sp, #8
   1449c:	e8bd8070 	pop	{r4, r5, r6, pc}
   144a0:	e3a00000 	mov	r0, #0
   144a4:	e12fff1e 	bx	lr
   144a8:	e59f2018 	ldr	r2, [pc, #24]	; 144c8 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xa8>
   144ac:	e59f1018 	ldr	r1, [pc, #24]	; 144cc <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   144b0:	e59f0018 	ldr	r0, [pc, #24]	; 144d0 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb0>
   144b4:	eb003c71 	bl	23680 <assertion_failed>
   144b8:	e59f2014 	ldr	r2, [pc, #20]	; 144d4 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb4>
   144bc:	e59f1008 	ldr	r1, [pc, #8]	; 144cc <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   144c0:	e59f0010 	ldr	r0, [pc, #16]	; 144d8 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb8>
   144c4:	eb003c6d 	bl	23680 <assertion_failed>
   144c8:	000001b9 	.word	0x000001b9
   144cc:	000368e4 	.word	0x000368e4
   144d0:	00036978 	.word	0x00036978
   144d4:	000001b2 	.word	0x000001b2
   144d8:	00036138 	.word	0x00036138

000144dc <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)>:
   144dc:	e2400010 	sub	r0, r0, #16
   144e0:	eaffffce 	b	14420 <CLAN7800Device::SendFrame(void const*, unsigned int)>

000144e4 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   144e4:	e92d4010 	push	{r4, lr}
   144e8:	e1a04000 	mov	r4, r0
   144ec:	ebffe729 	bl	e198 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   144f0:	e3a02000 	mov	r2, #0
   144f4:	e59f3024 	ldr	r3, [pc, #36]	; 14520 <CLAN7800Device::CLAN7800Device(CUSBFunction*)+0x3c>
   144f8:	e5842014 	str	r2, [r4, #20]
   144fc:	e2831008 	add	r1, r3, #8
   14500:	e2833048 	add	r3, r3, #72	; 0x48
   14504:	e5841000 	str	r1, [r4]
   14508:	e5843010 	str	r3, [r4, #16]
   1450c:	e5842018 	str	r2, [r4, #24]
   14510:	e284001c 	add	r0, r4, #28
   14514:	eb00558e 	bl	29b54 <CMACAddress::CMACAddress()>
   14518:	e1a00004 	mov	r0, r4
   1451c:	e8bd8010 	pop	{r4, pc}
   14520:	0003686c 	.word	0x0003686c

00014524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   14524:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14528:	e24dd01c 	sub	sp, sp, #28
   1452c:	e28d5018 	add	r5, sp, #24
   14530:	e1a06001 	mov	r6, r1
   14534:	e5252004 	str	r2, [r5, #-4]!
   14538:	e1a04000 	mov	r4, r0
   1453c:	ebffe787 	bl	e360 <CUSBFunction::GetHost() const>
   14540:	e1a07000 	mov	r7, r0
   14544:	e1a00004 	mov	r0, r4
   14548:	ebffe779 	bl	e334 <CUSBFunction::GetEndpoint0() const>
   1454c:	e3a04000 	mov	r4, #0
   14550:	e3a03004 	mov	r3, #4
   14554:	e6ff2076 	uxth	r2, r6
   14558:	e1a01000 	mov	r1, r0
   1455c:	e58d2004 	str	r2, [sp, #4]
   14560:	e58d300c 	str	r3, [sp, #12]
   14564:	e58d5008 	str	r5, [sp, #8]
   14568:	e1a00007 	mov	r0, r7
   1456c:	e58d4000 	str	r4, [sp]
   14570:	e3a030a0 	mov	r3, #160	; 0xa0
   14574:	e3a02040 	mov	r2, #64	; 0x40
   14578:	ebfff34a 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1457c:	e1500004 	cmp	r0, r4
   14580:	a3a00001 	movge	r0, #1
   14584:	ba000001 	blt	14590 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   14588:	e28dd01c 	add	sp, sp, #28
   1458c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14590:	eb00452d 	bl	25a4c <CLogger::Get()>
   14594:	e58d6000 	str	r6, [sp]
   14598:	e59f3014 	ldr	r3, [pc, #20]	; 145b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x90>
   1459c:	e3a02002 	mov	r2, #2
   145a0:	e59f1010 	ldr	r1, [pc, #16]	; 145b8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   145a4:	eb004465 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   145a8:	e1a00004 	mov	r0, r4
   145ac:	e28dd01c 	add	sp, sp, #28
   145b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   145b4:	00036990 	.word	0x00036990
   145b8:	000368dc 	.word	0x000368dc

000145bc <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   145bc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   145c0:	e24dd014 	sub	sp, sp, #20
   145c4:	e1a05001 	mov	r5, r1
   145c8:	e1a07002 	mov	r7, r2
   145cc:	e1a04000 	mov	r4, r0
   145d0:	ebffe762 	bl	e360 <CUSBFunction::GetHost() const>
   145d4:	e1a06000 	mov	r6, r0
   145d8:	e1a00004 	mov	r0, r4
   145dc:	ebffe754 	bl	e334 <CUSBFunction::GetEndpoint0() const>
   145e0:	e3a04000 	mov	r4, #0
   145e4:	e3a03004 	mov	r3, #4
   145e8:	e6ffc075 	uxth	ip, r5
   145ec:	e1a01000 	mov	r1, r0
   145f0:	e58d300c 	str	r3, [sp, #12]
   145f4:	e58d7008 	str	r7, [sp, #8]
   145f8:	e58dc004 	str	ip, [sp, #4]
   145fc:	e1a00006 	mov	r0, r6
   14600:	e58d4000 	str	r4, [sp]
   14604:	e3a030a1 	mov	r3, #161	; 0xa1
   14608:	e3a020c0 	mov	r2, #192	; 0xc0
   1460c:	ebfff325 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14610:	e3500004 	cmp	r0, #4
   14614:	03a00001 	moveq	r0, #1
   14618:	0a000006 	beq	14638 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x7c>
   1461c:	eb00450a 	bl	25a4c <CLogger::Get()>
   14620:	e58d5000 	str	r5, [sp]
   14624:	e59f3014 	ldr	r3, [pc, #20]	; 14640 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x84>
   14628:	e3a02002 	mov	r2, #2
   1462c:	e59f1010 	ldr	r1, [pc, #16]	; 14644 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x88>
   14630:	eb004442 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14634:	e1a00004 	mov	r0, r4
   14638:	e28dd014 	add	sp, sp, #20
   1463c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14640:	000369ac 	.word	0x000369ac
   14644:	000368dc 	.word	0x000368dc

00014648 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   14648:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1464c:	e24dd00c 	sub	sp, sp, #12
   14650:	e1a08000 	mov	r8, r0
   14654:	e1a09001 	mov	r9, r1
   14658:	e1a0a002 	mov	sl, r2
   1465c:	e1a0b003 	mov	fp, r3
   14660:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   14664:	e59d6034 	ldr	r6, [sp, #52]	; 0x34
   14668:	eb0051c4 	bl	28d80 <CTimer::Get()>
   1466c:	e2505000 	subs	r5, r0, #0
   14670:	0a000019 	beq	146dc <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x94>
   14674:	eb004f0b 	bl	282a8 <CTimer::GetTicks() const>
   14678:	e1a07000 	mov	r7, r0
   1467c:	ea00000e 	b	146bc <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   14680:	e1a00005 	mov	r0, r5
   14684:	eb004f07 	bl	282a8 <CTimer::GetTicks() const>
   14688:	e0400007 	sub	r0, r0, r7
   1468c:	e1500006 	cmp	r0, r6
   14690:	2a00000e 	bcs	146d0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   14694:	e28d2004 	add	r2, sp, #4
   14698:	e1a01009 	mov	r1, r9
   1469c:	e1a00008 	mov	r0, r8
   146a0:	ebffffc5 	bl	145bc <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   146a4:	e3500000 	cmp	r0, #0
   146a8:	0a000008 	beq	146d0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   146ac:	e59d3004 	ldr	r3, [sp, #4]
   146b0:	e003300a 	and	r3, r3, sl
   146b4:	e153000b 	cmp	r3, fp
   146b8:	0a000005 	beq	146d4 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   146bc:	e3540000 	cmp	r4, #0
   146c0:	0affffee 	beq	14680 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   146c4:	e1a00004 	mov	r0, r4
   146c8:	eb00517a 	bl	28cb8 <CTimer::SimpleusDelay(unsigned int)>
   146cc:	eaffffeb 	b	14680 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   146d0:	e3a00000 	mov	r0, #0
   146d4:	e28dd00c 	add	sp, sp, #12
   146d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146dc:	e59f2008 	ldr	r2, [pc, #8]	; 146ec <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa4>
   146e0:	e59f1008 	ldr	r1, [pc, #8]	; 146f0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa8>
   146e4:	e59f0008 	ldr	r0, [pc, #8]	; 146f4 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   146e8:	eb003be4 	bl	23680 <assertion_failed>
   146ec:	0000028e 	.word	0x0000028e
   146f0:	000368e4 	.word	0x000368e4
   146f4:	000369c8 	.word	0x000369c8

000146f8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   146f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   146fc:	e351001f 	cmp	r1, #31
   14700:	e24dd008 	sub	sp, sp, #8
   14704:	ca000025 	bgt	147a0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xa8>
   14708:	e3a05000 	mov	r5, #0
   1470c:	e3a06064 	mov	r6, #100	; 0x64
   14710:	e1a04001 	mov	r4, r1
   14714:	e1a08002 	mov	r8, r2
   14718:	e88d0060 	stm	sp, {r5, r6}
   1471c:	e1a03005 	mov	r3, r5
   14720:	e3a02001 	mov	r2, #1
   14724:	e3a01e12 	mov	r1, #288	; 0x120
   14728:	e1a07000 	mov	r7, r0
   1472c:	ebffffc5 	bl	14648 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   14730:	e1500005 	cmp	r0, r5
   14734:	1a000002 	bne	14744 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x4c>
   14738:	e3a00000 	mov	r0, #0
   1473c:	e28dd008 	add	sp, sp, #8
   14740:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14744:	e1a02008 	mov	r2, r8
   14748:	e3a01f49 	mov	r1, #292	; 0x124
   1474c:	e1a00007 	mov	r0, r7
   14750:	ebffff73 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14754:	e3500000 	cmp	r0, #0
   14758:	0afffff6 	beq	14738 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   1475c:	e1a02304 	lsl	r2, r4, #6
   14760:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   14764:	e3822b02 	orr	r2, r2, #2048	; 0x800
   14768:	e3822003 	orr	r2, r2, #3
   1476c:	e3a01e12 	mov	r1, #288	; 0x120
   14770:	e1a00007 	mov	r0, r7
   14774:	ebffff6a 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14778:	e3500000 	cmp	r0, #0
   1477c:	0affffed 	beq	14738 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   14780:	e88d0060 	stm	sp, {r5, r6}
   14784:	e1a03005 	mov	r3, r5
   14788:	e1a00007 	mov	r0, r7
   1478c:	e3a02001 	mov	r2, #1
   14790:	e3a01e12 	mov	r1, #288	; 0x120
   14794:	ebffffab 	bl	14648 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   14798:	e28dd008 	add	sp, sp, #8
   1479c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   147a0:	e59f2008 	ldr	r2, [pc, #8]	; 147b0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb8>
   147a4:	e59f1008 	ldr	r1, [pc, #8]	; 147b4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xbc>
   147a8:	e59f0008 	ldr	r0, [pc, #8]	; 147b8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xc0>
   147ac:	eb003bb3 	bl	23680 <assertion_failed>
   147b0:	00000259 	.word	0x00000259
   147b4:	000368e4 	.word	0x000368e4
   147b8:	000369d4 	.word	0x000369d4

000147bc <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   147bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   147c0:	e351001f 	cmp	r1, #31
   147c4:	e24dd010 	sub	sp, sp, #16
   147c8:	ca00002f 	bgt	1488c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd0>
   147cc:	e3a05000 	mov	r5, #0
   147d0:	e3a06064 	mov	r6, #100	; 0x64
   147d4:	e1a04001 	mov	r4, r1
   147d8:	e1a08002 	mov	r8, r2
   147dc:	e88d0060 	stm	sp, {r5, r6}
   147e0:	e1a03005 	mov	r3, r5
   147e4:	e3a02001 	mov	r2, #1
   147e8:	e3a01e12 	mov	r1, #288	; 0x120
   147ec:	e1a07000 	mov	r7, r0
   147f0:	ebffff94 	bl	14648 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   147f4:	e3500000 	cmp	r0, #0
   147f8:	1a000001 	bne	14804 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x48>
   147fc:	e28dd010 	add	sp, sp, #16
   14800:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14804:	e1a02304 	lsl	r2, r4, #6
   14808:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   1480c:	e3822b02 	orr	r2, r2, #2048	; 0x800
   14810:	e3822001 	orr	r2, r2, #1
   14814:	e3a01e12 	mov	r1, #288	; 0x120
   14818:	e1a00007 	mov	r0, r7
   1481c:	ebffff40 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14820:	e1500005 	cmp	r0, r5
   14824:	1a000002 	bne	14834 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x78>
   14828:	e3a00000 	mov	r0, #0
   1482c:	e28dd010 	add	sp, sp, #16
   14830:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14834:	e88d0060 	stm	sp, {r5, r6}
   14838:	e1a03005 	mov	r3, r5
   1483c:	e3a02001 	mov	r2, #1
   14840:	e3a01e12 	mov	r1, #288	; 0x120
   14844:	e1a00007 	mov	r0, r7
   14848:	ebffff7e 	bl	14648 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1484c:	e3500000 	cmp	r0, #0
   14850:	0afffff4 	beq	14828 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x6c>
   14854:	e1a00007 	mov	r0, r7
   14858:	e28d200c 	add	r2, sp, #12
   1485c:	e3a01f49 	mov	r1, #292	; 0x124
   14860:	ebffff55 	bl	145bc <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   14864:	e3500000 	cmp	r0, #0
   14868:	0affffee 	beq	14828 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x6c>
   1486c:	e3580000 	cmp	r8, #0
   14870:	159d300c 	ldrne	r3, [sp, #12]
   14874:	11c830b0 	strhne	r3, [r8]
   14878:	1affffdf 	bne	147fc <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x40>
   1487c:	e3a02fa1 	mov	r2, #644	; 0x284
   14880:	e59f1014 	ldr	r1, [pc, #20]	; 1489c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe0>
   14884:	e59f0014 	ldr	r0, [pc, #20]	; 148a0 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe4>
   14888:	eb003b7c 	bl	23680 <assertion_failed>
   1488c:	e3a02e27 	mov	r2, #624	; 0x270
   14890:	e59f1004 	ldr	r1, [pc, #4]	; 1489c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe0>
   14894:	e59f0008 	ldr	r0, [pc, #8]	; 148a4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe8>
   14898:	eb003b78 	bl	23680 <assertion_failed>
   1489c:	000368e4 	.word	0x000368e4
   148a0:	000369e4 	.word	0x000369e4
   148a4:	000369d4 	.word	0x000369d4

000148a8 <CLAN7800Device::IsLinkUp()>:
   148a8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   148ac:	e24dd00c 	sub	sp, sp, #12
   148b0:	e28d2006 	add	r2, sp, #6
   148b4:	e3a01001 	mov	r1, #1
   148b8:	ebffffbf 	bl	147bc <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   148bc:	e3500000 	cmp	r0, #0
   148c0:	11dd00b6 	ldrhne	r0, [sp, #6]
   148c4:	11a00120 	lsrne	r0, r0, #2
   148c8:	12000001 	andne	r0, r0, #1
   148cc:	e28dd00c 	add	sp, sp, #12
   148d0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000148d4 <non-virtual thunk to CLAN7800Device::IsLinkUp()>:
   148d4:	e2400010 	sub	r0, r0, #16
   148d8:	eafffff2 	b	148a8 <CLAN7800Device::IsLinkUp()>

000148dc <CLAN7800Device::GetLinkSpeed()>:
   148dc:	e92d4010 	push	{r4, lr}
   148e0:	e3a02000 	mov	r2, #0
   148e4:	e24dd008 	sub	sp, sp, #8
   148e8:	e3a0101f 	mov	r1, #31
   148ec:	e1a04000 	mov	r4, r0
   148f0:	ebffff80 	bl	146f8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   148f4:	e3500000 	cmp	r0, #0
   148f8:	1a000002 	bne	14908 <CLAN7800Device::GetLinkSpeed()+0x2c>
   148fc:	e3a00006 	mov	r0, #6
   14900:	e28dd008 	add	sp, sp, #8
   14904:	e8bd8010 	pop	{r4, pc}
   14908:	e1a00004 	mov	r0, r4
   1490c:	e28d2006 	add	r2, sp, #6
   14910:	e3a0101c 	mov	r1, #28
   14914:	ebffffa8 	bl	147bc <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   14918:	e3500000 	cmp	r0, #0
   1491c:	0afffff6 	beq	148fc <CLAN7800Device::GetLinkSpeed()+0x20>
   14920:	e1dd30b6 	ldrh	r3, [sp, #6]
   14924:	e3130901 	tst	r3, #16384	; 0x4000
   14928:	1a00000d 	bne	14964 <CLAN7800Device::GetLinkSpeed()+0x88>
   1492c:	e3130902 	tst	r3, #32768	; 0x8000
   14930:	0afffff1 	beq	148fc <CLAN7800Device::GetLinkSpeed()+0x20>
   14934:	e1a031c3 	asr	r3, r3, #3
   14938:	e2033007 	and	r3, r3, #7
   1493c:	e3530006 	cmp	r3, #6
   14940:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   14944:	eaffffec 	b	148fc <CLAN7800Device::GetLinkSpeed()+0x20>
   14948:	00014974 	.word	0x00014974
   1494c:	0001497c 	.word	0x0001497c
   14950:	0001499c 	.word	0x0001499c
   14954:	000148fc 	.word	0x000148fc
   14958:	00014994 	.word	0x00014994
   1495c:	0001498c 	.word	0x0001498c
   14960:	00014984 	.word	0x00014984
   14964:	e59f2038 	ldr	r2, [pc, #56]	; 149a4 <CLAN7800Device::GetLinkSpeed()+0xc8>
   14968:	e59f1038 	ldr	r1, [pc, #56]	; 149a8 <CLAN7800Device::GetLinkSpeed()+0xcc>
   1496c:	e59f0038 	ldr	r0, [pc, #56]	; 149ac <CLAN7800Device::GetLinkSpeed()+0xd0>
   14970:	eb003b42 	bl	23680 <assertion_failed>
   14974:	e3a00000 	mov	r0, #0
   14978:	eaffffe0 	b	14900 <CLAN7800Device::GetLinkSpeed()+0x24>
   1497c:	e3a00002 	mov	r0, #2
   14980:	eaffffde 	b	14900 <CLAN7800Device::GetLinkSpeed()+0x24>
   14984:	e3a00005 	mov	r0, #5
   14988:	eaffffdc 	b	14900 <CLAN7800Device::GetLinkSpeed()+0x24>
   1498c:	e3a00003 	mov	r0, #3
   14990:	eaffffda 	b	14900 <CLAN7800Device::GetLinkSpeed()+0x24>
   14994:	e3a00001 	mov	r0, #1
   14998:	eaffffd8 	b	14900 <CLAN7800Device::GetLinkSpeed()+0x24>
   1499c:	e3a00004 	mov	r0, #4
   149a0:	eaffffd6 	b	14900 <CLAN7800Device::GetLinkSpeed()+0x24>
   149a4:	00000203 	.word	0x00000203
   149a8:	000368e4 	.word	0x000368e4
   149ac:	000369f0 	.word	0x000369f0

000149b0 <non-virtual thunk to CLAN7800Device::GetLinkSpeed()>:
   149b0:	e2400010 	sub	r0, r0, #16
   149b4:	eaffffc8 	b	148dc <CLAN7800Device::GetLinkSpeed()>

000149b8 <CLAN7800Device::InitPHY()>:
   149b8:	e92d4010 	push	{r4, lr}
   149bc:	e3a02000 	mov	r2, #0
   149c0:	e24dd008 	sub	sp, sp, #8
   149c4:	e3a0101f 	mov	r1, #31
   149c8:	e1a04000 	mov	r4, r0
   149cc:	ebffff49 	bl	146f8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   149d0:	e3500000 	cmp	r0, #0
   149d4:	1a000001 	bne	149e0 <CLAN7800Device::InitPHY()+0x28>
   149d8:	e28dd008 	add	sp, sp, #8
   149dc:	e8bd8010 	pop	{r4, pc}
   149e0:	e28d2006 	add	r2, sp, #6
   149e4:	e3a0101d 	mov	r1, #29
   149e8:	e1a00004 	mov	r0, r4
   149ec:	ebffff72 	bl	147bc <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   149f0:	e3500000 	cmp	r0, #0
   149f4:	0afffff7 	beq	149d8 <CLAN7800Device::InitPHY()+0x20>
   149f8:	e1dd30b6 	ldrh	r3, [sp, #6]
   149fc:	e1a00004 	mov	r0, r4
   14a00:	e3c330ff 	bic	r3, r3, #255	; 0xff
   14a04:	e3833061 	orr	r3, r3, #97	; 0x61
   14a08:	e1a02003 	mov	r2, r3
   14a0c:	e3a0101d 	mov	r1, #29
   14a10:	e1cd30b6 	strh	r3, [sp, #6]
   14a14:	ebffff37 	bl	146f8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   14a18:	e28dd008 	add	sp, sp, #8
   14a1c:	e8bd8010 	pop	{r4, pc}

00014a20 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   14a20:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14a24:	e24dd00c 	sub	sp, sp, #12
   14a28:	e1a06002 	mov	r6, r2
   14a2c:	e28d2004 	add	r2, sp, #4
   14a30:	e1a04003 	mov	r4, r3
   14a34:	e1a05000 	mov	r5, r0
   14a38:	e1a07001 	mov	r7, r1
   14a3c:	ebfffede 	bl	145bc <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   14a40:	e3500000 	cmp	r0, #0
   14a44:	0a000007 	beq	14a68 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x48>
   14a48:	e59d3004 	ldr	r3, [sp, #4]
   14a4c:	e1a01007 	mov	r1, r7
   14a50:	e0044003 	and	r4, r4, r3
   14a54:	e1844006 	orr	r4, r4, r6
   14a58:	e1a00005 	mov	r0, r5
   14a5c:	e1a02004 	mov	r2, r4
   14a60:	e58d4004 	str	r4, [sp, #4]
   14a64:	ebfffeae 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14a68:	e28dd00c 	add	sp, sp, #12
   14a6c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00014a70 <CLAN7800Device::InitMACAddress()>:
   14a70:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14a74:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   14a78:	e3a01000 	mov	r1, #0
   14a7c:	e1a04000 	mov	r4, r0
   14a80:	e28d000c 	add	r0, sp, #12
   14a84:	eb003b1e 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   14a88:	e3a03000 	mov	r3, #0
   14a8c:	e28d000c 	add	r0, sp, #12
   14a90:	e58d3000 	str	r3, [sp]
   14a94:	e28d2024 	add	r2, sp, #36	; 0x24
   14a98:	e3a03014 	mov	r3, #20
   14a9c:	e59f10e0 	ldr	r1, [pc, #224]	; 14b84 <CLAN7800Device::InitMACAddress()+0x114>
   14aa0:	eb003b23 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   14aa4:	e3500000 	cmp	r0, #0
   14aa8:	1a000005 	bne	14ac4 <CLAN7800Device::InitMACAddress()+0x54>
   14aac:	e3a04000 	mov	r4, #0
   14ab0:	e28d000c 	add	r0, sp, #12
   14ab4:	eb003b19 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   14ab8:	e1a00004 	mov	r0, r4
   14abc:	e28dd03c 	add	sp, sp, #60	; 0x3c
   14ac0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14ac4:	e284601c 	add	r6, r4, #28
   14ac8:	e1a00006 	mov	r0, r6
   14acc:	e28d1030 	add	r1, sp, #48	; 0x30
   14ad0:	eb005440 	bl	29bd8 <CMACAddress::Set(unsigned char const*)>
   14ad4:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   14ad8:	e3a01f47 	mov	r1, #284	; 0x11c
   14adc:	e1a02005 	mov	r2, r5
   14ae0:	e1a00004 	mov	r0, r4
   14ae4:	e1dd73b4 	ldrh	r7, [sp, #52]	; 0x34
   14ae8:	ebfffe8d 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14aec:	e3500000 	cmp	r0, #0
   14af0:	0affffed 	beq	14aac <CLAN7800Device::InitMACAddress()+0x3c>
   14af4:	e1a02007 	mov	r2, r7
   14af8:	e3a01f46 	mov	r1, #280	; 0x118
   14afc:	e1a00004 	mov	r0, r4
   14b00:	ebfffe87 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14b04:	e3500000 	cmp	r0, #0
   14b08:	0affffe7 	beq	14aac <CLAN7800Device::InitMACAddress()+0x3c>
   14b0c:	e1a02005 	mov	r2, r5
   14b10:	e59f1070 	ldr	r1, [pc, #112]	; 14b88 <CLAN7800Device::InitMACAddress()+0x118>
   14b14:	e1a00004 	mov	r0, r4
   14b18:	ebfffe81 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14b1c:	e3500000 	cmp	r0, #0
   14b20:	0affffe1 	beq	14aac <CLAN7800Device::InitMACAddress()+0x3c>
   14b24:	e1a00004 	mov	r0, r4
   14b28:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   14b2c:	e3a01b01 	mov	r1, #1024	; 0x400
   14b30:	ebfffe7b 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14b34:	e2504000 	subs	r4, r0, #0
   14b38:	0affffdb 	beq	14aac <CLAN7800Device::InitMACAddress()+0x3c>
   14b3c:	e28d0014 	add	r0, sp, #20
   14b40:	eb0047a7 	bl	269e4 <CString::CString()>
   14b44:	e28d1014 	add	r1, sp, #20
   14b48:	e1a00006 	mov	r0, r6
   14b4c:	eb00547a 	bl	29d3c <CMACAddress::Format(CString*) const>
   14b50:	eb0043bd 	bl	25a4c <CLogger::Get()>
   14b54:	e1a05000 	mov	r5, r0
   14b58:	e28d0014 	add	r0, sp, #20
   14b5c:	eb0047b6 	bl	26a3c <CString::operator char const*() const>
   14b60:	e59f3024 	ldr	r3, [pc, #36]	; 14b8c <CLAN7800Device::InitMACAddress()+0x11c>
   14b64:	e58d0000 	str	r0, [sp]
   14b68:	e3a02004 	mov	r2, #4
   14b6c:	e1a00005 	mov	r0, r5
   14b70:	e59f1018 	ldr	r1, [pc, #24]	; 14b90 <CLAN7800Device::InitMACAddress()+0x120>
   14b74:	eb0042f1 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14b78:	e28d0014 	add	r0, sp, #20
   14b7c:	eb004765 	bl	26918 <CString::~CString()>
   14b80:	eaffffca 	b	14ab0 <CLAN7800Device::InitMACAddress()+0x40>
   14b84:	00010003 	.word	0x00010003
   14b88:	00000404 	.word	0x00000404
   14b8c:	00036a18 	.word	0x00036a18
   14b90:	000368dc 	.word	0x000368dc

00014b94 <CLAN7800Device::Configure()>:
   14b94:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   14b98:	e24dd014 	sub	sp, sp, #20
   14b9c:	e1a05000 	mov	r5, r0
   14ba0:	ebffe5cc 	bl	e2d8 <CUSBFunction::GetNumEndpoints() const>
   14ba4:	e3500003 	cmp	r0, #3
   14ba8:	03a06005 	moveq	r6, #5
   14bac:	03a07014 	moveq	r7, #20
   14bb0:	0a000004 	beq	14bc8 <CLAN7800Device::Configure()+0x34>
   14bb4:	ea000034 	b	14c8c <CLAN7800Device::Configure()+0xf8>
   14bb8:	e5d43003 	ldrb	r3, [r4, #3]
   14bbc:	e203303f 	and	r3, r3, #63	; 0x3f
   14bc0:	e3530002 	cmp	r3, #2
   14bc4:	0a00001f 	beq	14c48 <CLAN7800Device::Configure()+0xb4>
   14bc8:	e1a01006 	mov	r1, r6
   14bcc:	e1a00005 	mov	r0, r5
   14bd0:	ebffe5ed 	bl	e38c <CUSBFunction::GetDescriptor(unsigned char)>
   14bd4:	e2504000 	subs	r4, r0, #0
   14bd8:	1afffff6 	bne	14bb8 <CLAN7800Device::Configure()+0x24>
   14bdc:	e5953014 	ldr	r3, [r5, #20]
   14be0:	e1a00005 	mov	r0, r5
   14be4:	e3530000 	cmp	r3, #0
   14be8:	0a00004f 	beq	14d2c <CLAN7800Device::Configure()+0x198>
   14bec:	e5953018 	ldr	r3, [r5, #24]
   14bf0:	e3530000 	cmp	r3, #0
   14bf4:	0a00004c 	beq	14d2c <CLAN7800Device::Configure()+0x198>
   14bf8:	ebffe4fe 	bl	dff8 <CUSBFunction::Configure()>
   14bfc:	e2506000 	subs	r6, r0, #0
   14c00:	0a00004f 	beq	14d44 <CLAN7800Device::Configure()+0x1b0>
   14c04:	e28d200c 	add	r2, sp, #12
   14c08:	e1a01004 	mov	r1, r4
   14c0c:	e1a00005 	mov	r0, r5
   14c10:	ebfffe69 	bl	145bc <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   14c14:	e3500000 	cmp	r0, #0
   14c18:	1a000030 	bne	14ce0 <CLAN7800Device::Configure()+0x14c>
   14c1c:	eb00438a 	bl	25a4c <CLogger::Get()>
   14c20:	e1dd20be 	ldrh	r2, [sp, #14]
   14c24:	e59f33c0 	ldr	r3, [pc, #960]	; 14fec <CLAN7800Device::Configure()+0x458>
   14c28:	e58d2000 	str	r2, [sp]
   14c2c:	e59f13bc 	ldr	r1, [pc, #956]	; 14ff0 <CLAN7800Device::Configure()+0x45c>
   14c30:	e3a02001 	mov	r2, #1
   14c34:	eb0042c1 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14c38:	e3a06000 	mov	r6, #0
   14c3c:	e1a00006 	mov	r0, r6
   14c40:	e28dd014 	add	sp, sp, #20
   14c44:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14c48:	e1d430d2 	ldrsb	r3, [r4, #2]
   14c4c:	e3530000 	cmp	r3, #0
   14c50:	ba000014 	blt	14ca8 <CLAN7800Device::Configure()+0x114>
   14c54:	e5953018 	ldr	r3, [r5, #24]
   14c58:	e1a00005 	mov	r0, r5
   14c5c:	e3530000 	cmp	r3, #0
   14c60:	1a000031 	bne	14d2c <CLAN7800Device::Configure()+0x198>
   14c64:	ebffe5a7 	bl	e308 <CUSBFunction::GetDevice() const>
   14c68:	e1a09000 	mov	r9, r0
   14c6c:	e1a00007 	mov	r0, r7
   14c70:	eb00549f 	bl	29ef4 <operator new(unsigned int)>
   14c74:	e1a08000 	mov	r8, r0
   14c78:	e1a02004 	mov	r2, r4
   14c7c:	e1a01009 	mov	r1, r9
   14c80:	ebffe3dd 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14c84:	e5858018 	str	r8, [r5, #24]
   14c88:	eaffffce 	b	14bc8 <CLAN7800Device::Configure()+0x34>
   14c8c:	e3a06000 	mov	r6, #0
   14c90:	e1a00005 	mov	r0, r5
   14c94:	e59f1354 	ldr	r1, [pc, #852]	; 14ff0 <CLAN7800Device::Configure()+0x45c>
   14c98:	ebffe5c6 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   14c9c:	e1a00006 	mov	r0, r6
   14ca0:	e28dd014 	add	sp, sp, #20
   14ca4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14ca8:	e5953014 	ldr	r3, [r5, #20]
   14cac:	e1a00005 	mov	r0, r5
   14cb0:	e3530000 	cmp	r3, #0
   14cb4:	1a00001c 	bne	14d2c <CLAN7800Device::Configure()+0x198>
   14cb8:	ebffe592 	bl	e308 <CUSBFunction::GetDevice() const>
   14cbc:	e1a09000 	mov	r9, r0
   14cc0:	e1a00007 	mov	r0, r7
   14cc4:	eb00548a 	bl	29ef4 <operator new(unsigned int)>
   14cc8:	e1a08000 	mov	r8, r0
   14ccc:	e1a02004 	mov	r2, r4
   14cd0:	e1a01009 	mov	r1, r9
   14cd4:	ebffe3c8 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14cd8:	e5858014 	str	r8, [r5, #20]
   14cdc:	eaffffb9 	b	14bc8 <CLAN7800Device::Configure()+0x34>
   14ce0:	e1dd30be 	ldrh	r3, [sp, #14]
   14ce4:	e3530b1e 	cmp	r3, #30720	; 0x7800
   14ce8:	1affffcb 	bne	14c1c <CLAN7800Device::Configure()+0x88>
   14cec:	e3e03000 	mvn	r3, #0
   14cf0:	e3a02002 	mov	r2, #2
   14cf4:	e3a01010 	mov	r1, #16
   14cf8:	e1a00005 	mov	r0, r5
   14cfc:	ebffff47 	bl	14a20 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   14d00:	e3500000 	cmp	r0, #0
   14d04:	1a000016 	bne	14d64 <CLAN7800Device::Configure()+0x1d0>
   14d08:	e3a06000 	mov	r6, #0
   14d0c:	eb00434e 	bl	25a4c <CLogger::Get()>
   14d10:	e59f32dc 	ldr	r3, [pc, #732]	; 14ff4 <CLAN7800Device::Configure()+0x460>
   14d14:	e3a02001 	mov	r2, #1
   14d18:	e59f12d0 	ldr	r1, [pc, #720]	; 14ff0 <CLAN7800Device::Configure()+0x45c>
   14d1c:	eb004287 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14d20:	e1a00006 	mov	r0, r6
   14d24:	e28dd014 	add	sp, sp, #20
   14d28:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14d2c:	e3a06000 	mov	r6, #0
   14d30:	e59f12b8 	ldr	r1, [pc, #696]	; 14ff0 <CLAN7800Device::Configure()+0x45c>
   14d34:	ebffe59f 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   14d38:	e1a00006 	mov	r0, r6
   14d3c:	e28dd014 	add	sp, sp, #20
   14d40:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14d44:	eb004340 	bl	25a4c <CLogger::Get()>
   14d48:	e59f32a8 	ldr	r3, [pc, #680]	; 14ff8 <CLAN7800Device::Configure()+0x464>
   14d4c:	e3a02001 	mov	r2, #1
   14d50:	e59f1298 	ldr	r1, [pc, #664]	; 14ff0 <CLAN7800Device::Configure()+0x45c>
   14d54:	eb004279 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14d58:	e1a00006 	mov	r0, r6
   14d5c:	e28dd014 	add	sp, sp, #20
   14d60:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14d64:	e3a01064 	mov	r1, #100	; 0x64
   14d68:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   14d6c:	e58d1004 	str	r1, [sp, #4]
   14d70:	e58d2000 	str	r2, [sp]
   14d74:	e1a03004 	mov	r3, r4
   14d78:	e3a02002 	mov	r2, #2
   14d7c:	e3a01010 	mov	r1, #16
   14d80:	e1a00005 	mov	r0, r5
   14d84:	ebfffe2f 	bl	14648 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   14d88:	e3500000 	cmp	r0, #0
   14d8c:	0affffdd 	beq	14d08 <CLAN7800Device::Configure()+0x174>
   14d90:	e1a00005 	mov	r0, r5
   14d94:	ebffff35 	bl	14a70 <CLAN7800Device::InitMACAddress()>
   14d98:	e2506000 	subs	r6, r0, #0
   14d9c:	0a000052 	beq	14eec <CLAN7800Device::Configure()+0x358>
   14da0:	e3a02018 	mov	r2, #24
   14da4:	e3a01090 	mov	r1, #144	; 0x90
   14da8:	e1a00005 	mov	r0, r5
   14dac:	ebfffddc 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14db0:	e3500000 	cmp	r0, #0
   14db4:	0affff9f 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14db8:	e3a02b02 	mov	r2, #2048	; 0x800
   14dbc:	e3a01094 	mov	r1, #148	; 0x94
   14dc0:	e1a00005 	mov	r0, r5
   14dc4:	ebfffdd6 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14dc8:	e3500000 	cmp	r0, #0
   14dcc:	0affff99 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14dd0:	e3e03010 	mvn	r3, #16
   14dd4:	e3a02603 	mov	r2, #3145728	; 0x300000
   14dd8:	e3a01010 	mov	r1, #16
   14ddc:	e1a00005 	mov	r0, r5
   14de0:	ebffff0e 	bl	14a20 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   14de4:	e3500000 	cmp	r0, #0
   14de8:	0affff92 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14dec:	e3e03040 	mvn	r3, #64	; 0x40
   14df0:	e3a02020 	mov	r2, #32
   14df4:	e3a01080 	mov	r1, #128	; 0x80
   14df8:	e1a00005 	mov	r0, r5
   14dfc:	ebffff07 	bl	14a20 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   14e00:	e3500000 	cmp	r0, #0
   14e04:	0affff8b 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14e08:	e3a02017 	mov	r2, #23
   14e0c:	e3a010c8 	mov	r1, #200	; 0xc8
   14e10:	e1a00005 	mov	r0, r5
   14e14:	ebfffdc2 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14e18:	e3500000 	cmp	r0, #0
   14e1c:	0affff85 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14e20:	e3a02017 	mov	r2, #23
   14e24:	e3a010cc 	mov	r1, #204	; 0xcc
   14e28:	e1a00005 	mov	r0, r5
   14e2c:	ebfffdbc 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14e30:	e3500000 	cmp	r0, #0
   14e34:	0affff7f 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14e38:	e3a02000 	mov	r2, #0
   14e3c:	e3a01098 	mov	r1, #152	; 0x98
   14e40:	e1a00005 	mov	r0, r5
   14e44:	ebfffdb6 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14e48:	e3500000 	cmp	r0, #0
   14e4c:	0affff79 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14e50:	e3e02000 	mvn	r2, #0
   14e54:	e3a0100c 	mov	r1, #12
   14e58:	e1a00005 	mov	r0, r5
   14e5c:	ebfffdb0 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14e60:	e3500000 	cmp	r0, #0
   14e64:	0affff73 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14e68:	e3a02000 	mov	r2, #0
   14e6c:	e3a01f43 	mov	r1, #268	; 0x10c
   14e70:	e1a00005 	mov	r0, r5
   14e74:	ebfffdaa 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14e78:	e3500000 	cmp	r0, #0
   14e7c:	0affff6d 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14e80:	e3a02000 	mov	r2, #0
   14e84:	e3a010d0 	mov	r1, #208	; 0xd0
   14e88:	e1a00005 	mov	r0, r5
   14e8c:	ebfffda4 	bl	14524 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   14e90:	e3500000 	cmp	r0, #0
   14e94:	0affff67 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14e98:	e3e03000 	mvn	r3, #0
   14e9c:	e59f2158 	ldr	r2, [pc, #344]	; 14ffc <CLAN7800Device::Configure()+0x468>
   14ea0:	e3a010b0 	mov	r1, #176	; 0xb0
   14ea4:	e1a00005 	mov	r0, r5
   14ea8:	ebfffedc 	bl	14a20 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   14eac:	e3500000 	cmp	r0, #0
   14eb0:	0affff60 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14eb4:	e3e03000 	mvn	r3, #0
   14eb8:	e3a02010 	mov	r2, #16
   14ebc:	e3a01014 	mov	r1, #20
   14ec0:	e1a00005 	mov	r0, r5
   14ec4:	ebfffed5 	bl	14a20 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   14ec8:	e3500000 	cmp	r0, #0
   14ecc:	1a00000c 	bne	14f04 <CLAN7800Device::Configure()+0x370>
   14ed0:	eb0042dd 	bl	25a4c <CLogger::Get()>
   14ed4:	e59f3124 	ldr	r3, [pc, #292]	; 15000 <CLAN7800Device::Configure()+0x46c>
   14ed8:	e3a02001 	mov	r2, #1
   14edc:	e59f110c 	ldr	r1, [pc, #268]	; 14ff0 <CLAN7800Device::Configure()+0x45c>
   14ee0:	eb004216 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ee4:	e3a06000 	mov	r6, #0
   14ee8:	eaffff53 	b	14c3c <CLAN7800Device::Configure()+0xa8>
   14eec:	eb0042d6 	bl	25a4c <CLogger::Get()>
   14ef0:	e59f310c 	ldr	r3, [pc, #268]	; 15004 <CLAN7800Device::Configure()+0x470>
   14ef4:	e3a02001 	mov	r2, #1
   14ef8:	e59f10f0 	ldr	r1, [pc, #240]	; 14ff0 <CLAN7800Device::Configure()+0x45c>
   14efc:	eb00420f 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14f00:	eaffff4d 	b	14c3c <CLAN7800Device::Configure()+0xa8>
   14f04:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   14f08:	e3a03064 	mov	r3, #100	; 0x64
   14f0c:	e3a01014 	mov	r1, #20
   14f10:	e88d000c 	stm	sp, {r2, r3}
   14f14:	e1a00005 	mov	r0, r5
   14f18:	e3a03080 	mov	r3, #128	; 0x80
   14f1c:	e3a02090 	mov	r2, #144	; 0x90
   14f20:	ebfffdc8 	bl	14648 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   14f24:	e3500000 	cmp	r0, #0
   14f28:	0affffe8 	beq	14ed0 <CLAN7800Device::Configure()+0x33c>
   14f2c:	e3e03000 	mvn	r3, #0
   14f30:	e3a02b06 	mov	r2, #6144	; 0x1800
   14f34:	e3a01c01 	mov	r1, #256	; 0x100
   14f38:	e1a00005 	mov	r0, r5
   14f3c:	ebfffeb7 	bl	14a20 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   14f40:	e3500000 	cmp	r0, #0
   14f44:	0affff3b 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14f48:	e3e03000 	mvn	r3, #0
   14f4c:	e3a02001 	mov	r2, #1
   14f50:	e3a01f42 	mov	r1, #264	; 0x108
   14f54:	e1a00005 	mov	r0, r5
   14f58:	ebfffeb0 	bl	14a20 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   14f5c:	e3500000 	cmp	r0, #0
   14f60:	0affff34 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14f64:	e3e03000 	mvn	r3, #0
   14f68:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   14f6c:	e3a010c4 	mov	r1, #196	; 0xc4
   14f70:	e1a00005 	mov	r0, r5
   14f74:	ebfffea9 	bl	14a20 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   14f78:	e3500000 	cmp	r0, #0
   14f7c:	0affff2d 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14f80:	e59f3080 	ldr	r3, [pc, #128]	; 15008 <CLAN7800Device::Configure()+0x474>
   14f84:	e59f2080 	ldr	r2, [pc, #128]	; 1500c <CLAN7800Device::Configure()+0x478>
   14f88:	e3a01f41 	mov	r1, #260	; 0x104
   14f8c:	e1a00005 	mov	r0, r5
   14f90:	ebfffea2 	bl	14a20 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   14f94:	e3500000 	cmp	r0, #0
   14f98:	0affff26 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14f9c:	e3e03000 	mvn	r3, #0
   14fa0:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   14fa4:	e3a010c0 	mov	r1, #192	; 0xc0
   14fa8:	e1a00005 	mov	r0, r5
   14fac:	ebfffe9b 	bl	14a20 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   14fb0:	e3500000 	cmp	r0, #0
   14fb4:	0affff1f 	beq	14c38 <CLAN7800Device::Configure()+0xa4>
   14fb8:	e1a00005 	mov	r0, r5
   14fbc:	ebfffe7d 	bl	149b8 <CLAN7800Device::InitPHY()>
   14fc0:	e2506000 	subs	r6, r0, #0
   14fc4:	0a000002 	beq	14fd4 <CLAN7800Device::Configure()+0x440>
   14fc8:	e2850010 	add	r0, r5, #16
   14fcc:	eb00537b 	bl	29dc0 <CNetDevice::AddNetDevice()>
   14fd0:	eaffff19 	b	14c3c <CLAN7800Device::Configure()+0xa8>
   14fd4:	eb00429c 	bl	25a4c <CLogger::Get()>
   14fd8:	e59f3030 	ldr	r3, [pc, #48]	; 15010 <CLAN7800Device::Configure()+0x47c>
   14fdc:	e3a02001 	mov	r2, #1
   14fe0:	e59f1008 	ldr	r1, [pc, #8]	; 14ff0 <CLAN7800Device::Configure()+0x45c>
   14fe4:	eb0041d5 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14fe8:	eaffff13 	b	14c3c <CLAN7800Device::Configure()+0xa8>
   14fec:	00036a64 	.word	0x00036a64
   14ff0:	000368dc 	.word	0x000368dc
   14ff4:	00036a2c 	.word	0x00036a2c
   14ff8:	00035810 	.word	0x00035810
   14ffc:	00000402 	.word	0x00000402
   15000:	00036a7c 	.word	0x00036a7c
   15004:	00036a3c 	.word	0x00036a3c
   15008:	c000ffff 	.word	0xc000ffff
   1500c:	05ee0001 	.word	0x05ee0001
   15010:	00036a54 	.word	0x00036a54

00015014 <CNetDevice::GetType()>:
   15014:	e3a00000 	mov	r0, #0
   15018:	e12fff1e 	bx	lr

0001501c <CNetDevice::IsSendFrameAdvisable()>:
   1501c:	e3a00001 	mov	r0, #1
   15020:	e12fff1e 	bx	lr

00015024 <CNetDevice::UpdatePHY()>:
   15024:	e3a00000 	mov	r0, #0
   15028:	e12fff1e 	bx	lr

0001502c <CSMSC951xDevice::GetMACAddress() const>:
   1502c:	e280001c 	add	r0, r0, #28
   15030:	e12fff1e 	bx	lr

00015034 <non-virtual thunk to CSMSC951xDevice::GetMACAddress() const>:
   15034:	e2400010 	sub	r0, r0, #16
   15038:	eafffffb 	b	1502c <CSMSC951xDevice::GetMACAddress() const>

0001503c <CSMSC951xDevice::~CSMSC951xDevice()>:
   1503c:	e92d4070 	push	{r4, r5, r6, lr}
   15040:	e59f3074 	ldr	r3, [pc, #116]	; 150bc <CSMSC951xDevice::~CSMSC951xDevice()+0x80>
   15044:	e5905018 	ldr	r5, [r0, #24]
   15048:	e2832040 	add	r2, r3, #64	; 0x40
   1504c:	e3550000 	cmp	r5, #0
   15050:	e1a04000 	mov	r4, r0
   15054:	e5803000 	str	r3, [r0]
   15058:	e5802010 	str	r2, [r0, #16]
   1505c:	0a000004 	beq	15074 <CSMSC951xDevice::~CSMSC951xDevice()+0x38>
   15060:	e1a00005 	mov	r0, r5
   15064:	ebffe34e 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   15068:	e1a00005 	mov	r0, r5
   1506c:	e3a01014 	mov	r1, #20
   15070:	eb0053ad 	bl	29f2c <operator delete(void*, unsigned int)>
   15074:	e3a03000 	mov	r3, #0
   15078:	e5945014 	ldr	r5, [r4, #20]
   1507c:	e5843018 	str	r3, [r4, #24]
   15080:	e1550003 	cmp	r5, r3
   15084:	0a000004 	beq	1509c <CSMSC951xDevice::~CSMSC951xDevice()+0x60>
   15088:	e1a00005 	mov	r0, r5
   1508c:	ebffe344 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   15090:	e1a00005 	mov	r0, r5
   15094:	e3a01014 	mov	r1, #20
   15098:	eb0053a3 	bl	29f2c <operator delete(void*, unsigned int)>
   1509c:	e3a03000 	mov	r3, #0
   150a0:	e284001c 	add	r0, r4, #28
   150a4:	e5843014 	str	r3, [r4, #20]
   150a8:	eb0052ac 	bl	29b60 <CMACAddress::~CMACAddress()>
   150ac:	e1a00004 	mov	r0, r4
   150b0:	ebffe3a7 	bl	df54 <CUSBFunction::~CUSBFunction()>
   150b4:	e1a00004 	mov	r0, r4
   150b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   150bc:	00036a98 	.word	0x00036a98

000150c0 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   150c0:	e2400010 	sub	r0, r0, #16
   150c4:	eaffffdc 	b	1503c <CSMSC951xDevice::~CSMSC951xDevice()>

000150c8 <CSMSC951xDevice::~CSMSC951xDevice()>:
   150c8:	e92d4010 	push	{r4, lr}
   150cc:	e1a04000 	mov	r4, r0
   150d0:	ebffffd9 	bl	1503c <CSMSC951xDevice::~CSMSC951xDevice()>
   150d4:	e1a00004 	mov	r0, r4
   150d8:	e3a01024 	mov	r1, #36	; 0x24
   150dc:	eb005392 	bl	29f2c <operator delete(void*, unsigned int)>
   150e0:	e1a00004 	mov	r0, r4
   150e4:	e8bd8010 	pop	{r4, pc}

000150e8 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   150e8:	e2400010 	sub	r0, r0, #16
   150ec:	eafffff5 	b	150c8 <CSMSC951xDevice::~CSMSC951xDevice()>

000150f0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   150f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   150f4:	e5903014 	ldr	r3, [r0, #20]
   150f8:	e24dd030 	sub	sp, sp, #48	; 0x30
   150fc:	e3530000 	cmp	r3, #0
   15100:	0a000036 	beq	151e0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf0>
   15104:	e3510000 	cmp	r1, #0
   15108:	e1a04001 	mov	r4, r1
   1510c:	0a000037 	beq	151f0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x100>
   15110:	e3a06000 	mov	r6, #0
   15114:	e1a05000 	mov	r5, r0
   15118:	e1a01003 	mov	r1, r3
   1511c:	e1a07002 	mov	r7, r2
   15120:	e3a03d19 	mov	r3, #1600	; 0x640
   15124:	e1a02004 	mov	r2, r4
   15128:	e58d6000 	str	r6, [sp]
   1512c:	e28d0008 	add	r0, sp, #8
   15130:	ebfff862 	bl	132c0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15134:	e1a00005 	mov	r0, r5
   15138:	ebffe488 	bl	e360 <CUSBFunction::GetHost() const>
   1513c:	e5903000 	ldr	r3, [r0]
   15140:	e1a02006 	mov	r2, r6
   15144:	e5933008 	ldr	r3, [r3, #8]
   15148:	e28d1008 	add	r1, sp, #8
   1514c:	e12fff33 	blx	r3
   15150:	e2505000 	subs	r5, r0, #0
   15154:	0a00001b 	beq	151c8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   15158:	e28d0008 	add	r0, sp, #8
   1515c:	ebfff88a 	bl	1338c <CUSBRequest::GetResultLength() const>
   15160:	e3500003 	cmp	r0, #3
   15164:	9a000017 	bls	151c8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   15168:	e5948000 	ldr	r8, [r4]
   1516c:	e59f30cc 	ldr	r3, [pc, #204]	; 15240 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x150>
   15170:	e0033008 	and	r3, r3, r8
   15174:	e3530000 	cmp	r3, #0
   15178:	1a000020 	bne	15200 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x110>
   1517c:	e59f20c0 	ldr	r2, [pc, #192]	; 15244 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x154>
   15180:	e2400004 	sub	r0, r0, #4
   15184:	e0022828 	and	r2, r2, r8, lsr #16
   15188:	e1520000 	cmp	r2, r0
   1518c:	1a000027 	bne	15230 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x140>
   15190:	e3520004 	cmp	r2, #4
   15194:	9a000021 	bls	15220 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x130>
   15198:	e2426004 	sub	r6, r2, #4
   1519c:	e1a02006 	mov	r2, r6
   151a0:	e2841004 	add	r1, r4, #4
   151a4:	e1a00004 	mov	r0, r4
   151a8:	eb005178 	bl	29790 <memcpy>
   151ac:	e3570000 	cmp	r7, #0
   151b0:	15876000 	strne	r6, [r7]
   151b4:	1a000004 	bne	151cc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   151b8:	e59f2088 	ldr	r2, [pc, #136]	; 15248 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x158>
   151bc:	e59f1088 	ldr	r1, [pc, #136]	; 1524c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   151c0:	e59f0088 	ldr	r0, [pc, #136]	; 15250 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x160>
   151c4:	eb00392d 	bl	23680 <assertion_failed>
   151c8:	e3a05000 	mov	r5, #0
   151cc:	e28d0008 	add	r0, sp, #8
   151d0:	ebfff85b 	bl	13344 <CUSBRequest::~CUSBRequest()>
   151d4:	e1a00005 	mov	r0, r5
   151d8:	e28dd030 	add	sp, sp, #48	; 0x30
   151dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   151e0:	e59f206c 	ldr	r2, [pc, #108]	; 15254 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x164>
   151e4:	e59f1060 	ldr	r1, [pc, #96]	; 1524c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   151e8:	e59f0068 	ldr	r0, [pc, #104]	; 15258 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x168>
   151ec:	eb003923 	bl	23680 <assertion_failed>
   151f0:	e3a02f45 	mov	r2, #276	; 0x114
   151f4:	e59f1050 	ldr	r1, [pc, #80]	; 1524c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   151f8:	e59f005c 	ldr	r0, [pc, #92]	; 1525c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x16c>
   151fc:	eb00391f 	bl	23680 <assertion_failed>
   15200:	eb004211 	bl	25a4c <CLogger::Get()>
   15204:	e58d8000 	str	r8, [sp]
   15208:	e59f3050 	ldr	r3, [pc, #80]	; 15260 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   1520c:	e3a02002 	mov	r2, #2
   15210:	e59f104c 	ldr	r1, [pc, #76]	; 15264 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   15214:	e1a05006 	mov	r5, r6
   15218:	eb004148 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1521c:	eaffffea 	b	151cc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   15220:	e3a02f4b 	mov	r2, #300	; 0x12c
   15224:	e59f1020 	ldr	r1, [pc, #32]	; 1524c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   15228:	e59f0038 	ldr	r0, [pc, #56]	; 15268 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x178>
   1522c:	eb003913 	bl	23680 <assertion_failed>
   15230:	e59f2034 	ldr	r2, [pc, #52]	; 1526c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x17c>
   15234:	e59f1010 	ldr	r1, [pc, #16]	; 1524c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   15238:	e59f0030 	ldr	r0, [pc, #48]	; 15270 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x180>
   1523c:	eb00390f 	bl	23680 <assertion_failed>
   15240:	400090de 	.word	0x400090de
   15244:	00003fff 	.word	0x00003fff
   15248:	00000137 	.word	0x00000137
   1524c:	00036b14 	.word	0x00036b14
   15250:	00036964 	.word	0x00036964
   15254:	00000113 	.word	0x00000113
   15258:	000368f0 	.word	0x000368f0
   1525c:	00036138 	.word	0x00036138
   15260:	00036908 	.word	0x00036908
   15264:	00036b00 	.word	0x00036b00
   15268:	00036950 	.word	0x00036950
   1526c:	0000012b 	.word	0x0000012b
   15270:	00036b24 	.word	0x00036b24

00015274 <non-virtual thunk to CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   15274:	e2400010 	sub	r0, r0, #16
   15278:	eaffff9c 	b	150f0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>

0001527c <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   1527c:	e3520d19 	cmp	r2, #1600	; 0x640
   15280:	8a00001d 	bhi	152fc <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x80>
   15284:	e92d4030 	push	{r4, r5, lr}
   15288:	e3510000 	cmp	r1, #0
   1528c:	e24dde65 	sub	sp, sp, #1616	; 0x650
   15290:	e24dd00c 	sub	sp, sp, #12
   15294:	e1a05000 	mov	r5, r0
   15298:	0a00001d 	beq	15314 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x98>
   1529c:	e1a04002 	mov	r4, r2
   152a0:	e28d0018 	add	r0, sp, #24
   152a4:	e2403008 	sub	r3, r0, #8
   152a8:	e58d300c 	str	r3, [sp, #12]
   152ac:	eb005137 	bl	29790 <memcpy>
   152b0:	e5952018 	ldr	r2, [r5, #24]
   152b4:	e3843a03 	orr	r3, r4, #12288	; 0x3000
   152b8:	e3520000 	cmp	r2, #0
   152bc:	e58d4014 	str	r4, [sp, #20]
   152c0:	e58d3010 	str	r3, [sp, #16]
   152c4:	0a00000e 	beq	15304 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x88>
   152c8:	e1a00005 	mov	r0, r5
   152cc:	ebffe423 	bl	e360 <CUSBFunction::GetHost() const>
   152d0:	e3a0c000 	mov	ip, #0
   152d4:	e5951018 	ldr	r1, [r5, #24]
   152d8:	e2843008 	add	r3, r4, #8
   152dc:	e59d200c 	ldr	r2, [sp, #12]
   152e0:	e58dc000 	str	ip, [sp]
   152e4:	ebfff055 	bl	11440 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   152e8:	e1e00000 	mvn	r0, r0
   152ec:	e1a00fa0 	lsr	r0, r0, #31
   152f0:	e28dde65 	add	sp, sp, #1616	; 0x650
   152f4:	e28dd00c 	add	sp, sp, #12
   152f8:	e8bd8030 	pop	{r4, r5, pc}
   152fc:	e3a00000 	mov	r0, #0
   15300:	e12fff1e 	bx	lr
   15304:	e59f2018 	ldr	r2, [pc, #24]	; 15324 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xa8>
   15308:	e59f1018 	ldr	r1, [pc, #24]	; 15328 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   1530c:	e59f0018 	ldr	r0, [pc, #24]	; 1532c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb0>
   15310:	eb0038da 	bl	23680 <assertion_failed>
   15314:	e59f2014 	ldr	r2, [pc, #20]	; 15330 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb4>
   15318:	e59f1008 	ldr	r1, [pc, #8]	; 15328 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   1531c:	e59f0010 	ldr	r0, [pc, #16]	; 15334 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb8>
   15320:	eb0038d6 	bl	23680 <assertion_failed>
   15324:	0000010d 	.word	0x0000010d
   15328:	00036b14 	.word	0x00036b14
   1532c:	00036978 	.word	0x00036978
   15330:	00000106 	.word	0x00000106
   15334:	00036138 	.word	0x00036138

00015338 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   15338:	e2400010 	sub	r0, r0, #16
   1533c:	eaffffce 	b	1527c <CSMSC951xDevice::SendFrame(void const*, unsigned int)>

00015340 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   15340:	e92d4010 	push	{r4, lr}
   15344:	e1a04000 	mov	r4, r0
   15348:	ebffe392 	bl	e198 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1534c:	e3a02000 	mov	r2, #0
   15350:	e59f3024 	ldr	r3, [pc, #36]	; 1537c <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)+0x3c>
   15354:	e5842014 	str	r2, [r4, #20]
   15358:	e2831008 	add	r1, r3, #8
   1535c:	e2833048 	add	r3, r3, #72	; 0x48
   15360:	e5841000 	str	r1, [r4]
   15364:	e5843010 	str	r3, [r4, #16]
   15368:	e5842018 	str	r2, [r4, #24]
   1536c:	e284001c 	add	r0, r4, #28
   15370:	eb0051f7 	bl	29b54 <CMACAddress::CMACAddress()>
   15374:	e1a00004 	mov	r0, r4
   15378:	e8bd8010 	pop	{r4, pc}
   1537c:	00036a90 	.word	0x00036a90

00015380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   15380:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15384:	e24dd01c 	sub	sp, sp, #28
   15388:	e28d5018 	add	r5, sp, #24
   1538c:	e5252004 	str	r2, [r5, #-4]!
   15390:	e1a04001 	mov	r4, r1
   15394:	e1a07000 	mov	r7, r0
   15398:	ebffe3f0 	bl	e360 <CUSBFunction::GetHost() const>
   1539c:	e1a06000 	mov	r6, r0
   153a0:	e1a00007 	mov	r0, r7
   153a4:	ebffe3e2 	bl	e334 <CUSBFunction::GetEndpoint0() const>
   153a8:	e3a02004 	mov	r2, #4
   153ac:	e3a03000 	mov	r3, #0
   153b0:	e6ff4074 	uxth	r4, r4
   153b4:	e1a01000 	mov	r1, r0
   153b8:	e58d200c 	str	r2, [sp, #12]
   153bc:	e58d3000 	str	r3, [sp]
   153c0:	e58d5008 	str	r5, [sp, #8]
   153c4:	e58d4004 	str	r4, [sp, #4]
   153c8:	e1a00006 	mov	r0, r6
   153cc:	e3a030a0 	mov	r3, #160	; 0xa0
   153d0:	e3a02040 	mov	r2, #64	; 0x40
   153d4:	ebffefb3 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   153d8:	e1e00000 	mvn	r0, r0
   153dc:	e1a00fa0 	lsr	r0, r0, #31
   153e0:	e28dd01c 	add	sp, sp, #28
   153e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000153e8 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   153e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   153ec:	e24dd014 	sub	sp, sp, #20
   153f0:	e1a06002 	mov	r6, r2
   153f4:	e1a04001 	mov	r4, r1
   153f8:	e1a07000 	mov	r7, r0
   153fc:	ebffe3d7 	bl	e360 <CUSBFunction::GetHost() const>
   15400:	e1a05000 	mov	r5, r0
   15404:	e1a00007 	mov	r0, r7
   15408:	ebffe3c9 	bl	e334 <CUSBFunction::GetEndpoint0() const>
   1540c:	e3a0c004 	mov	ip, #4
   15410:	e3a03000 	mov	r3, #0
   15414:	e6ff4074 	uxth	r4, r4
   15418:	e1a01000 	mov	r1, r0
   1541c:	e58d3000 	str	r3, [sp]
   15420:	e58d6008 	str	r6, [sp, #8]
   15424:	e58d4004 	str	r4, [sp, #4]
   15428:	e1a00005 	mov	r0, r5
   1542c:	e58dc00c 	str	ip, [sp, #12]
   15430:	e3a030a1 	mov	r3, #161	; 0xa1
   15434:	e3a020c0 	mov	r2, #192	; 0xc0
   15438:	ebffef9a 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1543c:	e2400004 	sub	r0, r0, #4
   15440:	e16f0f10 	clz	r0, r0
   15444:	e1a002a0 	lsr	r0, r0, #5
   15448:	e28dd014 	add	sp, sp, #20
   1544c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00015450 <CSMSC951xDevice::PHYWaitNotBusy()>:
   15450:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15454:	e24dd00c 	sub	sp, sp, #12
   15458:	e1a06000 	mov	r6, r0
   1545c:	eb004e47 	bl	28d80 <CTimer::Get()>
   15460:	e2504000 	subs	r4, r0, #0
   15464:	0a000014 	beq	154bc <CSMSC951xDevice::PHYWaitNotBusy()+0x6c>
   15468:	eb004b8e 	bl	282a8 <CTimer::GetTicks() const>
   1546c:	e3a07f45 	mov	r7, #276	; 0x114
   15470:	e1a05000 	mov	r5, r0
   15474:	ea000008 	b	1549c <CSMSC951xDevice::PHYWaitNotBusy()+0x4c>
   15478:	e28d2004 	add	r2, sp, #4
   1547c:	e1a01007 	mov	r1, r7
   15480:	e1a00006 	mov	r0, r6
   15484:	ebffffd7 	bl	153e8 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   15488:	e3500000 	cmp	r0, #0
   1548c:	0a000007 	beq	154b0 <CSMSC951xDevice::PHYWaitNotBusy()+0x60>
   15490:	e59d3004 	ldr	r3, [sp, #4]
   15494:	e3130001 	tst	r3, #1
   15498:	0a000005 	beq	154b4 <CSMSC951xDevice::PHYWaitNotBusy()+0x64>
   1549c:	e1a00004 	mov	r0, r4
   154a0:	eb004b80 	bl	282a8 <CTimer::GetTicks() const>
   154a4:	e0400005 	sub	r0, r0, r5
   154a8:	e3500063 	cmp	r0, #99	; 0x63
   154ac:	9afffff1 	bls	15478 <CSMSC951xDevice::PHYWaitNotBusy()+0x28>
   154b0:	e3a00000 	mov	r0, #0
   154b4:	e28dd00c 	add	sp, sp, #12
   154b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   154bc:	e59f2008 	ldr	r2, [pc, #8]	; 154cc <CSMSC951xDevice::PHYWaitNotBusy()+0x7c>
   154c0:	e59f1008 	ldr	r1, [pc, #8]	; 154d0 <CSMSC951xDevice::PHYWaitNotBusy()+0x80>
   154c4:	e59f0008 	ldr	r0, [pc, #8]	; 154d4 <CSMSC951xDevice::PHYWaitNotBusy()+0x84>
   154c8:	eb00386c 	bl	23680 <assertion_failed>
   154cc:	0000018e 	.word	0x0000018e
   154d0:	00036b14 	.word	0x00036b14
   154d4:	000369c8 	.word	0x000369c8

000154d8 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   154d8:	e351001f 	cmp	r1, #31
   154dc:	e92d4070 	push	{r4, r5, r6, lr}
   154e0:	ca000017 	bgt	15544 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x6c>
   154e4:	e1a04001 	mov	r4, r1
   154e8:	e1a06002 	mov	r6, r2
   154ec:	e1a05000 	mov	r5, r0
   154f0:	ebffffd6 	bl	15450 <CSMSC951xDevice::PHYWaitNotBusy()>
   154f4:	e3500000 	cmp	r0, #0
   154f8:	1a000001 	bne	15504 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x2c>
   154fc:	e3a00000 	mov	r0, #0
   15500:	e8bd8070 	pop	{r4, r5, r6, pc}
   15504:	e1a02006 	mov	r2, r6
   15508:	e3a01f46 	mov	r1, #280	; 0x118
   1550c:	e1a00005 	mov	r0, r5
   15510:	ebffff9a 	bl	15380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15514:	e3500000 	cmp	r0, #0
   15518:	0afffff7 	beq	154fc <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   1551c:	e59f2030 	ldr	r2, [pc, #48]	; 15554 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x7c>
   15520:	e3a01f45 	mov	r1, #276	; 0x114
   15524:	e1822304 	orr	r2, r2, r4, lsl #6
   15528:	e1a00005 	mov	r0, r5
   1552c:	ebffff93 	bl	15380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15530:	e3500000 	cmp	r0, #0
   15534:	0afffff0 	beq	154fc <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   15538:	e1a00005 	mov	r0, r5
   1553c:	e8bd4070 	pop	{r4, r5, r6, lr}
   15540:	eaffffc2 	b	15450 <CSMSC951xDevice::PHYWaitNotBusy()>
   15544:	e59f200c 	ldr	r2, [pc, #12]	; 15558 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x80>
   15548:	e59f100c 	ldr	r1, [pc, #12]	; 1555c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x84>
   1554c:	e59f000c 	ldr	r0, [pc, #12]	; 15560 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x88>
   15550:	eb00384a 	bl	23680 <assertion_failed>
   15554:	00000803 	.word	0x00000803
   15558:	00000162 	.word	0x00000162
   1555c:	00036b14 	.word	0x00036b14
   15560:	000369d4 	.word	0x000369d4

00015564 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   15564:	e92d4070 	push	{r4, r5, r6, lr}
   15568:	e351001f 	cmp	r1, #31
   1556c:	e24dd008 	sub	sp, sp, #8
   15570:	ca000023 	bgt	15604 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xa0>
   15574:	e1a04001 	mov	r4, r1
   15578:	e1a06002 	mov	r6, r2
   1557c:	e1a05000 	mov	r5, r0
   15580:	ebffffb2 	bl	15450 <CSMSC951xDevice::PHYWaitNotBusy()>
   15584:	e3500000 	cmp	r0, #0
   15588:	1a000001 	bne	15594 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x30>
   1558c:	e28dd008 	add	sp, sp, #8
   15590:	e8bd8070 	pop	{r4, r5, r6, pc}
   15594:	e59f2078 	ldr	r2, [pc, #120]	; 15614 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb0>
   15598:	e3a01f45 	mov	r1, #276	; 0x114
   1559c:	e1822304 	orr	r2, r2, r4, lsl #6
   155a0:	e1a00005 	mov	r0, r5
   155a4:	ebffff75 	bl	15380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   155a8:	e3500000 	cmp	r0, #0
   155ac:	1a000002 	bne	155bc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x58>
   155b0:	e3a00000 	mov	r0, #0
   155b4:	e28dd008 	add	sp, sp, #8
   155b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   155bc:	e1a00005 	mov	r0, r5
   155c0:	ebffffa2 	bl	15450 <CSMSC951xDevice::PHYWaitNotBusy()>
   155c4:	e3500000 	cmp	r0, #0
   155c8:	0afffff8 	beq	155b0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x4c>
   155cc:	e1a00005 	mov	r0, r5
   155d0:	e28d2004 	add	r2, sp, #4
   155d4:	e3a01f46 	mov	r1, #280	; 0x118
   155d8:	ebffff82 	bl	153e8 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   155dc:	e3500000 	cmp	r0, #0
   155e0:	0afffff2 	beq	155b0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x4c>
   155e4:	e3560000 	cmp	r6, #0
   155e8:	159d3004 	ldrne	r3, [sp, #4]
   155ec:	11c630b0 	strhne	r3, [r6]
   155f0:	1affffe5 	bne	1558c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   155f4:	e59f201c 	ldr	r2, [pc, #28]	; 15618 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb4>
   155f8:	e59f101c 	ldr	r1, [pc, #28]	; 1561c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   155fc:	e59f001c 	ldr	r0, [pc, #28]	; 15620 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xbc>
   15600:	eb00381e 	bl	23680 <assertion_failed>
   15604:	e59f2018 	ldr	r2, [pc, #24]	; 15624 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc0>
   15608:	e59f100c 	ldr	r1, [pc, #12]	; 1561c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   1560c:	e59f0014 	ldr	r0, [pc, #20]	; 15628 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc4>
   15610:	eb00381a 	bl	23680 <assertion_failed>
   15614:	00000801 	.word	0x00000801
   15618:	00000185 	.word	0x00000185
   1561c:	00036b14 	.word	0x00036b14
   15620:	000369e4 	.word	0x000369e4
   15624:	00000175 	.word	0x00000175
   15628:	000369d4 	.word	0x000369d4

0001562c <CSMSC951xDevice::IsLinkUp()>:
   1562c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15630:	e24dd00c 	sub	sp, sp, #12
   15634:	e28d2006 	add	r2, sp, #6
   15638:	e3a01001 	mov	r1, #1
   1563c:	ebffffc8 	bl	15564 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   15640:	e3500000 	cmp	r0, #0
   15644:	11dd00b6 	ldrhne	r0, [sp, #6]
   15648:	11a00120 	lsrne	r0, r0, #2
   1564c:	12000001 	andne	r0, r0, #1
   15650:	e28dd00c 	add	sp, sp, #12
   15654:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015658 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()>:
   15658:	e2400010 	sub	r0, r0, #16
   1565c:	eafffff2 	b	1562c <CSMSC951xDevice::IsLinkUp()>

00015660 <CSMSC951xDevice::GetLinkSpeed()>:
   15660:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15664:	e24dd00c 	sub	sp, sp, #12
   15668:	e28d2006 	add	r2, sp, #6
   1566c:	e3a0101f 	mov	r1, #31
   15670:	ebffffbb 	bl	15564 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   15674:	e3500000 	cmp	r0, #0
   15678:	1a000002 	bne	15688 <CSMSC951xDevice::GetLinkSpeed()+0x28>
   1567c:	e3a00006 	mov	r0, #6
   15680:	e28dd00c 	add	sp, sp, #12
   15684:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   15688:	e1dd30b6 	ldrh	r3, [sp, #6]
   1568c:	e3130a01 	tst	r3, #4096	; 0x1000
   15690:	0afffff9 	beq	1567c <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   15694:	e1a03143 	asr	r3, r3, #2
   15698:	e2033007 	and	r3, r3, #7
   1569c:	e2433001 	sub	r3, r3, #1
   156a0:	e3530005 	cmp	r3, #5
   156a4:	8afffff4 	bhi	1567c <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   156a8:	e59f2008 	ldr	r2, [pc, #8]	; 156b8 <CSMSC951xDevice::GetLinkSpeed()+0x58>
   156ac:	e0823003 	add	r3, r2, r3
   156b0:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
   156b4:	eafffff1 	b	15680 <CSMSC951xDevice::GetLinkSpeed()+0x20>
   156b8:	00036a90 	.word	0x00036a90

000156bc <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()>:
   156bc:	e2400010 	sub	r0, r0, #16
   156c0:	eaffffe6 	b	15660 <CSMSC951xDevice::GetLinkSpeed()>

000156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   156c4:	e92d4030 	push	{r4, r5, lr}
   156c8:	e1a04002 	mov	r4, r2
   156cc:	e24dd014 	sub	sp, sp, #20
   156d0:	e1a05001 	mov	r5, r1
   156d4:	e28d200c 	add	r2, sp, #12
   156d8:	e1a01004 	mov	r1, r4
   156dc:	ebffff41 	bl	153e8 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   156e0:	e3500000 	cmp	r0, #0
   156e4:	0a000008 	beq	1570c <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x48>
   156e8:	eb0040d7 	bl	25a4c <CLogger::Get()>
   156ec:	e59d300c 	ldr	r3, [sp, #12]
   156f0:	e3a02004 	mov	r2, #4
   156f4:	e88d0028 	stm	sp, {r3, r5}
   156f8:	e59f102c 	ldr	r1, [pc, #44]	; 1572c <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   156fc:	e59f302c 	ldr	r3, [pc, #44]	; 15730 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x6c>
   15700:	eb00400e 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15704:	e28dd014 	add	sp, sp, #20
   15708:	e8bd8030 	pop	{r4, r5, pc}
   1570c:	eb0040ce 	bl	25a4c <CLogger::Get()>
   15710:	e58d4000 	str	r4, [sp]
   15714:	e59f3018 	ldr	r3, [pc, #24]	; 15734 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x70>
   15718:	e3a02001 	mov	r2, #1
   1571c:	e59f1008 	ldr	r1, [pc, #8]	; 1572c <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   15720:	eb004006 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15724:	e28dd014 	add	sp, sp, #20
   15728:	e8bd8030 	pop	{r4, r5, pc}
   1572c:	00036b00 	.word	0x00036b00
   15730:	00036b44 	.word	0x00036b44
   15734:	000369ac 	.word	0x000369ac

00015738 <CSMSC951xDevice::DumpRegs()>:
   15738:	e92d4010 	push	{r4, lr}
   1573c:	e1a04000 	mov	r4, r0
   15740:	e3a02000 	mov	r2, #0
   15744:	e59f1134 	ldr	r1, [pc, #308]	; 15880 <CSMSC951xDevice::DumpRegs()+0x148>
   15748:	ebffffdd 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1574c:	e1a00004 	mov	r0, r4
   15750:	e3a02008 	mov	r2, #8
   15754:	e59f1128 	ldr	r1, [pc, #296]	; 15884 <CSMSC951xDevice::DumpRegs()+0x14c>
   15758:	ebffffd9 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1575c:	e1a00004 	mov	r0, r4
   15760:	e3a0200c 	mov	r2, #12
   15764:	e59f111c 	ldr	r1, [pc, #284]	; 15888 <CSMSC951xDevice::DumpRegs()+0x150>
   15768:	ebffffd5 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1576c:	e1a00004 	mov	r0, r4
   15770:	e3a02010 	mov	r2, #16
   15774:	e59f1110 	ldr	r1, [pc, #272]	; 1588c <CSMSC951xDevice::DumpRegs()+0x154>
   15778:	ebffffd1 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1577c:	e1a00004 	mov	r0, r4
   15780:	e3a02014 	mov	r2, #20
   15784:	e59f1104 	ldr	r1, [pc, #260]	; 15890 <CSMSC951xDevice::DumpRegs()+0x158>
   15788:	ebffffcd 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1578c:	e1a00004 	mov	r0, r4
   15790:	e3a02018 	mov	r2, #24
   15794:	e59f10f8 	ldr	r1, [pc, #248]	; 15894 <CSMSC951xDevice::DumpRegs()+0x15c>
   15798:	ebffffc9 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1579c:	e1a00004 	mov	r0, r4
   157a0:	e3a02020 	mov	r2, #32
   157a4:	e59f10ec 	ldr	r1, [pc, #236]	; 15898 <CSMSC951xDevice::DumpRegs()+0x160>
   157a8:	ebffffc5 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   157ac:	e1a00004 	mov	r0, r4
   157b0:	e3a02024 	mov	r2, #36	; 0x24
   157b4:	e59f10e0 	ldr	r1, [pc, #224]	; 1589c <CSMSC951xDevice::DumpRegs()+0x164>
   157b8:	ebffffc1 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   157bc:	e1a00004 	mov	r0, r4
   157c0:	e3a02028 	mov	r2, #40	; 0x28
   157c4:	e59f10d4 	ldr	r1, [pc, #212]	; 158a0 <CSMSC951xDevice::DumpRegs()+0x168>
   157c8:	ebffffbd 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   157cc:	e1a00004 	mov	r0, r4
   157d0:	e3a0202c 	mov	r2, #44	; 0x2c
   157d4:	e59f10c8 	ldr	r1, [pc, #200]	; 158a4 <CSMSC951xDevice::DumpRegs()+0x16c>
   157d8:	ebffffb9 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   157dc:	e1a00004 	mov	r0, r4
   157e0:	e3a02038 	mov	r2, #56	; 0x38
   157e4:	e59f10bc 	ldr	r1, [pc, #188]	; 158a8 <CSMSC951xDevice::DumpRegs()+0x170>
   157e8:	ebffffb5 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   157ec:	e1a00004 	mov	r0, r4
   157f0:	e3a02068 	mov	r2, #104	; 0x68
   157f4:	e59f10b0 	ldr	r1, [pc, #176]	; 158ac <CSMSC951xDevice::DumpRegs()+0x174>
   157f8:	ebffffb1 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   157fc:	e1a00004 	mov	r0, r4
   15800:	e3a0206c 	mov	r2, #108	; 0x6c
   15804:	e59f10a4 	ldr	r1, [pc, #164]	; 158b0 <CSMSC951xDevice::DumpRegs()+0x178>
   15808:	ebffffad 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1580c:	e1a00004 	mov	r0, r4
   15810:	e3a02c01 	mov	r2, #256	; 0x100
   15814:	e59f1098 	ldr	r1, [pc, #152]	; 158b4 <CSMSC951xDevice::DumpRegs()+0x17c>
   15818:	ebffffa9 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1581c:	e1a00004 	mov	r0, r4
   15820:	e3a02f41 	mov	r2, #260	; 0x104
   15824:	e59f108c 	ldr	r1, [pc, #140]	; 158b8 <CSMSC951xDevice::DumpRegs()+0x180>
   15828:	ebffffa5 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1582c:	e1a00004 	mov	r0, r4
   15830:	e3a02f42 	mov	r2, #264	; 0x108
   15834:	e59f1080 	ldr	r1, [pc, #128]	; 158bc <CSMSC951xDevice::DumpRegs()+0x184>
   15838:	ebffffa1 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1583c:	e1a00004 	mov	r0, r4
   15840:	e3a02f43 	mov	r2, #268	; 0x10c
   15844:	e59f1074 	ldr	r1, [pc, #116]	; 158c0 <CSMSC951xDevice::DumpRegs()+0x188>
   15848:	ebffff9d 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1584c:	e1a00004 	mov	r0, r4
   15850:	e3a02e11 	mov	r2, #272	; 0x110
   15854:	e59f1068 	ldr	r1, [pc, #104]	; 158c4 <CSMSC951xDevice::DumpRegs()+0x18c>
   15858:	ebffff99 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1585c:	e1a00004 	mov	r0, r4
   15860:	e3a02f47 	mov	r2, #284	; 0x11c
   15864:	e59f105c 	ldr	r1, [pc, #92]	; 158c8 <CSMSC951xDevice::DumpRegs()+0x190>
   15868:	ebffff95 	bl	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1586c:	e1a00004 	mov	r0, r4
   15870:	e8bd4010 	pop	{r4, lr}
   15874:	e3a02f4b 	mov	r2, #300	; 0x12c
   15878:	e59f104c 	ldr	r1, [pc, #76]	; 158cc <CSMSC951xDevice::DumpRegs()+0x194>
   1587c:	eaffff90 	b	156c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   15880:	00036b4c 	.word	0x00036b4c
   15884:	00036b54 	.word	0x00036b54
   15888:	00036b5c 	.word	0x00036b5c
   1588c:	00036b64 	.word	0x00036b64
   15890:	00036b6c 	.word	0x00036b6c
   15894:	00036b74 	.word	0x00036b74
   15898:	00036b80 	.word	0x00036b80
   1589c:	00036b88 	.word	0x00036b88
   158a0:	00036b8c 	.word	0x00036b8c
   158a4:	00036b98 	.word	0x00036b98
   158a8:	00036ba0 	.word	0x00036ba0
   158ac:	00036bac 	.word	0x00036bac
   158b0:	00036bb8 	.word	0x00036bb8
   158b4:	00036bc4 	.word	0x00036bc4
   158b8:	00036bcc 	.word	0x00036bcc
   158bc:	00036bd4 	.word	0x00036bd4
   158c0:	00036bdc 	.word	0x00036bdc
   158c4:	00036be4 	.word	0x00036be4
   158c8:	00036bec 	.word	0x00036bec
   158cc:	00036bf4 	.word	0x00036bf4

000158d0 <CSMSC951xDevice::Configure()>:
   158d0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   158d4:	e3a06000 	mov	r6, #0
   158d8:	e24dd040 	sub	sp, sp, #64	; 0x40
   158dc:	e1a01006 	mov	r1, r6
   158e0:	e1a05000 	mov	r5, r0
   158e4:	e28d0014 	add	r0, sp, #20
   158e8:	eb003785 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   158ec:	e28d0014 	add	r0, sp, #20
   158f0:	e58d6000 	str	r6, [sp]
   158f4:	e3a03014 	mov	r3, #20
   158f8:	e28d202c 	add	r2, sp, #44	; 0x2c
   158fc:	e59f1274 	ldr	r1, [pc, #628]	; 15b78 <CSMSC951xDevice::Configure()+0x2a8>
   15900:	eb00378b 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   15904:	e2504000 	subs	r4, r0, #0
   15908:	0a00003c 	beq	15a00 <CSMSC951xDevice::Configure()+0x130>
   1590c:	e285701c 	add	r7, r5, #28
   15910:	e28d1038 	add	r1, sp, #56	; 0x38
   15914:	e1a00007 	mov	r0, r7
   15918:	eb0050ae 	bl	29bd8 <CMACAddress::Set(unsigned char const*)>
   1591c:	e28d001c 	add	r0, sp, #28
   15920:	eb00442f 	bl	269e4 <CString::CString()>
   15924:	e28d101c 	add	r1, sp, #28
   15928:	e1a00007 	mov	r0, r7
   1592c:	eb005102 	bl	29d3c <CMACAddress::Format(CString*) const>
   15930:	eb004045 	bl	25a4c <CLogger::Get()>
   15934:	e1a04000 	mov	r4, r0
   15938:	e28d001c 	add	r0, sp, #28
   1593c:	eb00443e 	bl	26a3c <CString::operator char const*() const>
   15940:	e59f3234 	ldr	r3, [pc, #564]	; 15b7c <CSMSC951xDevice::Configure()+0x2ac>
   15944:	e58d0000 	str	r0, [sp]
   15948:	e3a02004 	mov	r2, #4
   1594c:	e1a00004 	mov	r0, r4
   15950:	e59f1228 	ldr	r1, [pc, #552]	; 15b80 <CSMSC951xDevice::Configure()+0x2b0>
   15954:	eb003f79 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15958:	e1a00005 	mov	r0, r5
   1595c:	ebffe25d 	bl	e2d8 <CUSBFunction::GetNumEndpoints() const>
   15960:	e3500003 	cmp	r0, #3
   15964:	03a06005 	moveq	r6, #5
   15968:	03a08014 	moveq	r8, #20
   1596c:	0a00000e 	beq	159ac <CSMSC951xDevice::Configure()+0xdc>
   15970:	e1a00005 	mov	r0, r5
   15974:	e59f1204 	ldr	r1, [pc, #516]	; 15b80 <CSMSC951xDevice::Configure()+0x2b0>
   15978:	e1a04006 	mov	r4, r6
   1597c:	ebffe28d 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   15980:	e28d001c 	add	r0, sp, #28
   15984:	eb0043e3 	bl	26918 <CString::~CString()>
   15988:	e28d0014 	add	r0, sp, #20
   1598c:	eb003763 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   15990:	e1a00004 	mov	r0, r4
   15994:	e28dd040 	add	sp, sp, #64	; 0x40
   15998:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1599c:	e5d43003 	ldrb	r3, [r4, #3]
   159a0:	e203303f 	and	r3, r3, #63	; 0x3f
   159a4:	e3530002 	cmp	r3, #2
   159a8:	0a00001a 	beq	15a18 <CSMSC951xDevice::Configure()+0x148>
   159ac:	e1a01006 	mov	r1, r6
   159b0:	e1a00005 	mov	r0, r5
   159b4:	ebffe274 	bl	e38c <CUSBFunction::GetDescriptor(unsigned char)>
   159b8:	e2504000 	subs	r4, r0, #0
   159bc:	1afffff6 	bne	1599c <CSMSC951xDevice::Configure()+0xcc>
   159c0:	e5953014 	ldr	r3, [r5, #20]
   159c4:	e1a00005 	mov	r0, r5
   159c8:	e3530000 	cmp	r3, #0
   159cc:	0a000022 	beq	15a5c <CSMSC951xDevice::Configure()+0x18c>
   159d0:	e5953018 	ldr	r3, [r5, #24]
   159d4:	e3530000 	cmp	r3, #0
   159d8:	0a00001f 	beq	15a5c <CSMSC951xDevice::Configure()+0x18c>
   159dc:	ebffe185 	bl	dff8 <CUSBFunction::Configure()>
   159e0:	e2504000 	subs	r4, r0, #0
   159e4:	1a000020 	bne	15a6c <CSMSC951xDevice::Configure()+0x19c>
   159e8:	eb004017 	bl	25a4c <CLogger::Get()>
   159ec:	e59f3190 	ldr	r3, [pc, #400]	; 15b84 <CSMSC951xDevice::Configure()+0x2b4>
   159f0:	e3a02001 	mov	r2, #1
   159f4:	e59f1184 	ldr	r1, [pc, #388]	; 15b80 <CSMSC951xDevice::Configure()+0x2b0>
   159f8:	eb003f50 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   159fc:	eaffffdf 	b	15980 <CSMSC951xDevice::Configure()+0xb0>
   15a00:	eb004011 	bl	25a4c <CLogger::Get()>
   15a04:	e59f317c 	ldr	r3, [pc, #380]	; 15b88 <CSMSC951xDevice::Configure()+0x2b8>
   15a08:	e3a02001 	mov	r2, #1
   15a0c:	e59f116c 	ldr	r1, [pc, #364]	; 15b80 <CSMSC951xDevice::Configure()+0x2b0>
   15a10:	eb003f4a 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15a14:	eaffffdb 	b	15988 <CSMSC951xDevice::Configure()+0xb8>
   15a18:	e1d430d2 	ldrsb	r3, [r4, #2]
   15a1c:	e3530000 	cmp	r3, #0
   15a20:	ba000024 	blt	15ab8 <CSMSC951xDevice::Configure()+0x1e8>
   15a24:	e5953018 	ldr	r3, [r5, #24]
   15a28:	e1a00005 	mov	r0, r5
   15a2c:	e3530000 	cmp	r3, #0
   15a30:	1a000009 	bne	15a5c <CSMSC951xDevice::Configure()+0x18c>
   15a34:	ebffe233 	bl	e308 <CUSBFunction::GetDevice() const>
   15a38:	e1a0a000 	mov	sl, r0
   15a3c:	e1a00008 	mov	r0, r8
   15a40:	eb00512b 	bl	29ef4 <operator new(unsigned int)>
   15a44:	e1a09000 	mov	r9, r0
   15a48:	e1a02004 	mov	r2, r4
   15a4c:	e1a0100a 	mov	r1, sl
   15a50:	ebffe069 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15a54:	e5859018 	str	r9, [r5, #24]
   15a58:	eaffffd3 	b	159ac <CSMSC951xDevice::Configure()+0xdc>
   15a5c:	e59f111c 	ldr	r1, [pc, #284]	; 15b80 <CSMSC951xDevice::Configure()+0x2b0>
   15a60:	ebffe254 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   15a64:	e3a04000 	mov	r4, #0
   15a68:	eaffffc4 	b	15980 <CSMSC951xDevice::Configure()+0xb0>
   15a6c:	e1a00007 	mov	r0, r7
   15a70:	e28d100c 	add	r1, sp, #12
   15a74:	eb005081 	bl	29c80 <CMACAddress::CopyTo(unsigned char*) const>
   15a78:	e5dd2011 	ldrb	r2, [sp, #17]
   15a7c:	e5dd3010 	ldrb	r3, [sp, #16]
   15a80:	e3a01f41 	mov	r1, #260	; 0x104
   15a84:	e1832402 	orr	r2, r3, r2, lsl #8
   15a88:	e1a00005 	mov	r0, r5
   15a8c:	e59d400c 	ldr	r4, [sp, #12]
   15a90:	ebfffe3a 	bl	15380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15a94:	e3500000 	cmp	r0, #0
   15a98:	1a000014 	bne	15af0 <CSMSC951xDevice::Configure()+0x220>
   15a9c:	eb003fea 	bl	25a4c <CLogger::Get()>
   15aa0:	e59f30e4 	ldr	r3, [pc, #228]	; 15b8c <CSMSC951xDevice::Configure()+0x2bc>
   15aa4:	e3a02001 	mov	r2, #1
   15aa8:	e59f10d0 	ldr	r1, [pc, #208]	; 15b80 <CSMSC951xDevice::Configure()+0x2b0>
   15aac:	eb003f23 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15ab0:	e3a04000 	mov	r4, #0
   15ab4:	eaffffb1 	b	15980 <CSMSC951xDevice::Configure()+0xb0>
   15ab8:	e5953014 	ldr	r3, [r5, #20]
   15abc:	e1a00005 	mov	r0, r5
   15ac0:	e3530000 	cmp	r3, #0
   15ac4:	1affffe4 	bne	15a5c <CSMSC951xDevice::Configure()+0x18c>
   15ac8:	ebffe20e 	bl	e308 <CUSBFunction::GetDevice() const>
   15acc:	e1a0a000 	mov	sl, r0
   15ad0:	e1a00008 	mov	r0, r8
   15ad4:	eb005106 	bl	29ef4 <operator new(unsigned int)>
   15ad8:	e1a09000 	mov	r9, r0
   15adc:	e1a02004 	mov	r2, r4
   15ae0:	e1a0100a 	mov	r1, sl
   15ae4:	ebffe044 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15ae8:	e5859014 	str	r9, [r5, #20]
   15aec:	eaffffae 	b	159ac <CSMSC951xDevice::Configure()+0xdc>
   15af0:	e1a02004 	mov	r2, r4
   15af4:	e3a01f42 	mov	r1, #264	; 0x108
   15af8:	e1a00005 	mov	r0, r5
   15afc:	ebfffe1f 	bl	15380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15b00:	e3500000 	cmp	r0, #0
   15b04:	0affffe4 	beq	15a9c <CSMSC951xDevice::Configure()+0x1cc>
   15b08:	e59f2080 	ldr	r2, [pc, #128]	; 15b90 <CSMSC951xDevice::Configure()+0x2c0>
   15b0c:	e3a01024 	mov	r1, #36	; 0x24
   15b10:	e1a00005 	mov	r0, r5
   15b14:	ebfffe19 	bl	15380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15b18:	e3500000 	cmp	r0, #0
   15b1c:	1a000006 	bne	15b3c <CSMSC951xDevice::Configure()+0x26c>
   15b20:	eb003fc9 	bl	25a4c <CLogger::Get()>
   15b24:	e59f3068 	ldr	r3, [pc, #104]	; 15b94 <CSMSC951xDevice::Configure()+0x2c4>
   15b28:	e3a02001 	mov	r2, #1
   15b2c:	e59f104c 	ldr	r1, [pc, #76]	; 15b80 <CSMSC951xDevice::Configure()+0x2b0>
   15b30:	eb003f02 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15b34:	e3a04000 	mov	r4, #0
   15b38:	eaffff90 	b	15980 <CSMSC951xDevice::Configure()+0xb0>
   15b3c:	e59f2054 	ldr	r2, [pc, #84]	; 15b98 <CSMSC951xDevice::Configure()+0x2c8>
   15b40:	e3a01c01 	mov	r1, #256	; 0x100
   15b44:	e1a00005 	mov	r0, r5
   15b48:	ebfffe0c 	bl	15380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15b4c:	e3500000 	cmp	r0, #0
   15b50:	0afffff2 	beq	15b20 <CSMSC951xDevice::Configure()+0x250>
   15b54:	e3a02004 	mov	r2, #4
   15b58:	e3a01010 	mov	r1, #16
   15b5c:	e1a00005 	mov	r0, r5
   15b60:	ebfffe06 	bl	15380 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   15b64:	e2504000 	subs	r4, r0, #0
   15b68:	0affffec 	beq	15b20 <CSMSC951xDevice::Configure()+0x250>
   15b6c:	e2850010 	add	r0, r5, #16
   15b70:	eb005092 	bl	29dc0 <CNetDevice::AddNetDevice()>
   15b74:	eaffff81 	b	15980 <CSMSC951xDevice::Configure()+0xb0>
   15b78:	00010003 	.word	0x00010003
   15b7c:	00036a18 	.word	0x00036a18
   15b80:	00036b00 	.word	0x00036b00
   15b84:	00035810 	.word	0x00035810
   15b88:	00036bfc 	.word	0x00036bfc
   15b8c:	00036c14 	.word	0x00036c14
   15b90:	01110000 	.word	0x01110000
   15b94:	00036c2c 	.word	0x00036c2c
   15b98:	0080000c 	.word	0x0080000c

00015b9c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   15b9c:	e3a03000 	mov	r3, #0
   15ba0:	e92d4070 	push	{r4, r5, r6, lr}
   15ba4:	e1a04000 	mov	r4, r0
   15ba8:	e5900020 	ldr	r0, [r0, #32]
   15bac:	e59f20a0 	ldr	r2, [pc, #160]	; 15c54 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xb8>
   15bb0:	e1500003 	cmp	r0, r3
   15bb4:	e5842000 	str	r2, [r4]
   15bb8:	e5843024 	str	r3, [r4, #36]	; 0x24
   15bbc:	0a000000 	beq	15bc4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   15bc0:	eb0050d3 	bl	29f14 <operator delete[](void*)>
   15bc4:	e3a03000 	mov	r3, #0
   15bc8:	e5945018 	ldr	r5, [r4, #24]
   15bcc:	e5843020 	str	r3, [r4, #32]
   15bd0:	e1550003 	cmp	r5, r3
   15bd4:	0a000004 	beq	15bec <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x50>
   15bd8:	e1a00005 	mov	r0, r5
   15bdc:	ebffe070 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   15be0:	e1a00005 	mov	r0, r5
   15be4:	e3a01014 	mov	r1, #20
   15be8:	eb0050cf 	bl	29f2c <operator delete(void*, unsigned int)>
   15bec:	e3a03000 	mov	r3, #0
   15bf0:	e5945014 	ldr	r5, [r4, #20]
   15bf4:	e5843018 	str	r3, [r4, #24]
   15bf8:	e1550003 	cmp	r5, r3
   15bfc:	0a000004 	beq	15c14 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x78>
   15c00:	e1a00005 	mov	r0, r5
   15c04:	ebffe066 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   15c08:	e1a00005 	mov	r0, r5
   15c0c:	e3a01014 	mov	r1, #20
   15c10:	eb0050c5 	bl	29f2c <operator delete(void*, unsigned int)>
   15c14:	e3a03000 	mov	r3, #0
   15c18:	e5945010 	ldr	r5, [r4, #16]
   15c1c:	e5843014 	str	r3, [r4, #20]
   15c20:	e1550003 	cmp	r5, r3
   15c24:	0a000004 	beq	15c3c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa0>
   15c28:	e1a00005 	mov	r0, r5
   15c2c:	ebffe05c 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   15c30:	e1a00005 	mov	r0, r5
   15c34:	e3a01014 	mov	r1, #20
   15c38:	eb0050bb 	bl	29f2c <operator delete(void*, unsigned int)>
   15c3c:	e3a03000 	mov	r3, #0
   15c40:	e1a00004 	mov	r0, r4
   15c44:	e5843010 	str	r3, [r4, #16]
   15c48:	ebffe0c1 	bl	df54 <CUSBFunction::~CUSBFunction()>
   15c4c:	e1a00004 	mov	r0, r4
   15c50:	e8bd8070 	pop	{r4, r5, r6, pc}
   15c54:	00036c48 	.word	0x00036c48

00015c58 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   15c58:	e92d4010 	push	{r4, lr}
   15c5c:	e1a04000 	mov	r4, r0
   15c60:	ebffffcd 	bl	15b9c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   15c64:	e1a00004 	mov	r0, r4
   15c68:	e3a01028 	mov	r1, #40	; 0x28
   15c6c:	eb0050ae 	bl	29f2c <operator delete(void*, unsigned int)>
   15c70:	e1a00004 	mov	r0, r4
   15c74:	e8bd8010 	pop	{r4, pc}

00015c78 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   15c78:	e92d4010 	push	{r4, lr}
   15c7c:	e1a04000 	mov	r4, r0
   15c80:	ebffe144 	bl	e198 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15c84:	e3a03000 	mov	r3, #0
   15c88:	e59f2020 	ldr	r2, [pc, #32]	; 15cb0 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   15c8c:	e5843010 	str	r3, [r4, #16]
   15c90:	e5842000 	str	r2, [r4]
   15c94:	e5843014 	str	r3, [r4, #20]
   15c98:	e5843018 	str	r3, [r4, #24]
   15c9c:	e584301c 	str	r3, [r4, #28]
   15ca0:	e5843020 	str	r3, [r4, #32]
   15ca4:	e5843024 	str	r3, [r4, #36]	; 0x24
   15ca8:	e1a00004 	mov	r0, r4
   15cac:	e8bd8010 	pop	{r4, pc}
   15cb0:	00036c48 	.word	0x00036c48

00015cb4 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   15cb4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15cb8:	e24dd014 	sub	sp, sp, #20
   15cbc:	e1a06001 	mov	r6, r1
   15cc0:	e1a04002 	mov	r4, r2
   15cc4:	e1a07000 	mov	r7, r0
   15cc8:	ebffe1a4 	bl	e360 <CUSBFunction::GetHost() const>
   15ccc:	e1a05000 	mov	r5, r0
   15cd0:	e1a00007 	mov	r0, r7
   15cd4:	ebffe196 	bl	e334 <CUSBFunction::GetEndpoint0() const>
   15cd8:	e3a03000 	mov	r3, #0
   15cdc:	e6ff4074 	uxth	r4, r4
   15ce0:	e1a01000 	mov	r1, r0
   15ce4:	e58d6008 	str	r6, [sp, #8]
   15ce8:	e58d400c 	str	r4, [sp, #12]
   15cec:	e1a00005 	mov	r0, r5
   15cf0:	e58d3004 	str	r3, [sp, #4]
   15cf4:	e58d3000 	str	r3, [sp]
   15cf8:	e3a02020 	mov	r2, #32
   15cfc:	ebffed69 	bl	112a8 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15d00:	e1e00000 	mvn	r0, r0
   15d04:	e1a00fa0 	lsr	r0, r0, #31
   15d08:	e28dd014 	add	sp, sp, #20
   15d0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00015d10 <CUSBBluetoothDevice::StartRequest()>:
   15d10:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15d14:	e1a04000 	mov	r4, r0
   15d18:	e5900010 	ldr	r0, [r0, #16]
   15d1c:	e24dd00c 	sub	sp, sp, #12
   15d20:	e3500000 	cmp	r0, #0
   15d24:	0a00001e 	beq	15da4 <CUSBBluetoothDevice::StartRequest()+0x94>
   15d28:	e5943020 	ldr	r3, [r4, #32]
   15d2c:	e3530000 	cmp	r3, #0
   15d30:	0a00001f 	beq	15db4 <CUSBBluetoothDevice::StartRequest()+0xa4>
   15d34:	e594501c 	ldr	r5, [r4, #28]
   15d38:	e3550000 	cmp	r5, #0
   15d3c:	1a000020 	bne	15dc4 <CUSBBluetoothDevice::StartRequest()+0xb4>
   15d40:	ebffe02c 	bl	ddf8 <CUSBEndpoint::GetMaxPacketSize() const>
   15d44:	e1a07000 	mov	r7, r0
   15d48:	e3a00028 	mov	r0, #40	; 0x28
   15d4c:	ebfff5e0 	bl	134d4 <CUSBRequest::operator new(unsigned int)>
   15d50:	e1a06000 	mov	r6, r0
   15d54:	e5942020 	ldr	r2, [r4, #32]
   15d58:	e5941010 	ldr	r1, [r4, #16]
   15d5c:	e1a03007 	mov	r3, r7
   15d60:	e58d5000 	str	r5, [sp]
   15d64:	ebfff555 	bl	132c0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15d68:	e1a03004 	mov	r3, r4
   15d6c:	e1a02005 	mov	r2, r5
   15d70:	e1a00006 	mov	r0, r6
   15d74:	e59f1058 	ldr	r1, [pc, #88]	; 15dd4 <CUSBBluetoothDevice::StartRequest()+0xc4>
   15d78:	e584601c 	str	r6, [r4, #28]
   15d7c:	ebfff5b3 	bl	13450 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   15d80:	e1a00004 	mov	r0, r4
   15d84:	ebffe175 	bl	e360 <CUSBFunction::GetHost() const>
   15d88:	e1a02005 	mov	r2, r5
   15d8c:	e5903000 	ldr	r3, [r0]
   15d90:	e594101c 	ldr	r1, [r4, #28]
   15d94:	e593300c 	ldr	r3, [r3, #12]
   15d98:	e28dd00c 	add	sp, sp, #12
   15d9c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   15da0:	e12fff13 	bx	r3
   15da4:	e3a020a3 	mov	r2, #163	; 0xa3
   15da8:	e59f1028 	ldr	r1, [pc, #40]	; 15dd8 <CUSBBluetoothDevice::StartRequest()+0xc8>
   15dac:	e59f0028 	ldr	r0, [pc, #40]	; 15ddc <CUSBBluetoothDevice::StartRequest()+0xcc>
   15db0:	eb003632 	bl	23680 <assertion_failed>
   15db4:	e3a020a4 	mov	r2, #164	; 0xa4
   15db8:	e59f1018 	ldr	r1, [pc, #24]	; 15dd8 <CUSBBluetoothDevice::StartRequest()+0xc8>
   15dbc:	e59f001c 	ldr	r0, [pc, #28]	; 15de0 <CUSBBluetoothDevice::StartRequest()+0xd0>
   15dc0:	eb00362e 	bl	23680 <assertion_failed>
   15dc4:	e3a020a6 	mov	r2, #166	; 0xa6
   15dc8:	e59f1008 	ldr	r1, [pc, #8]	; 15dd8 <CUSBBluetoothDevice::StartRequest()+0xc8>
   15dcc:	e59f0010 	ldr	r0, [pc, #16]	; 15de4 <CUSBBluetoothDevice::StartRequest()+0xd4>
   15dd0:	eb00362a 	bl	23680 <assertion_failed>
   15dd4:	00015f38 	.word	0x00015f38
   15dd8:	00036c74 	.word	0x00036c74
   15ddc:	00036c88 	.word	0x00036c88
   15de0:	00036ca4 	.word	0x00036ca4
   15de4:	00035f74 	.word	0x00035f74

00015de8 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   15de8:	e3510000 	cmp	r1, #0
   15dec:	e5801024 	str	r1, [r0, #36]	; 0x24
   15df0:	0a000000 	beq	15df8 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x10>
   15df4:	eaffffc5 	b	15d10 <CUSBBluetoothDevice::StartRequest()>
   15df8:	e92d4010 	push	{r4, lr}
   15dfc:	e3a0209c 	mov	r2, #156	; 0x9c
   15e00:	e59f1004 	ldr	r1, [pc, #4]	; 15e0c <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x24>
   15e04:	e59f0004 	ldr	r0, [pc, #4]	; 15e10 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x28>
   15e08:	eb00361c 	bl	23680 <assertion_failed>
   15e0c:	00036c74 	.word	0x00036c74
   15e10:	00036cb8 	.word	0x00036cb8

00015e14 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   15e14:	e92d4070 	push	{r4, r5, r6, lr}
   15e18:	e2515000 	subs	r5, r1, #0
   15e1c:	0a000031 	beq	15ee8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   15e20:	e590301c 	ldr	r3, [r0, #28]
   15e24:	e1a04000 	mov	r4, r0
   15e28:	e1550003 	cmp	r5, r3
   15e2c:	1a000031 	bne	15ef8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   15e30:	e5903020 	ldr	r3, [r0, #32]
   15e34:	e3530000 	cmp	r3, #0
   15e38:	0a000032 	beq	15f08 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xf4>
   15e3c:	e1a00005 	mov	r0, r5
   15e40:	ebfff54f 	bl	13384 <CUSBRequest::GetStatus() const>
   15e44:	e3500000 	cmp	r0, #0
   15e48:	0a00001c 	beq	15ec0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xac>
   15e4c:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   15e50:	e3560000 	cmp	r6, #0
   15e54:	0a00001f 	beq	15ed8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   15e58:	e1a00005 	mov	r0, r5
   15e5c:	e5945020 	ldr	r5, [r4, #32]
   15e60:	ebfff549 	bl	1338c <CUSBRequest::GetResultLength() const>
   15e64:	e1a01000 	mov	r1, r0
   15e68:	e1a00005 	mov	r0, r5
   15e6c:	e12fff36 	blx	r6
   15e70:	e594501c 	ldr	r5, [r4, #28]
   15e74:	e3550000 	cmp	r5, #0
   15e78:	0a000004 	beq	15e90 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x7c>
   15e7c:	e1a00005 	mov	r0, r5
   15e80:	ebfff52f 	bl	13344 <CUSBRequest::~CUSBRequest()>
   15e84:	e1a00005 	mov	r0, r5
   15e88:	e3a01028 	mov	r1, #40	; 0x28
   15e8c:	ebfff5a5 	bl	13528 <CUSBRequest::operator delete(void*, unsigned int)>
   15e90:	e3a03000 	mov	r3, #0
   15e94:	e1a00004 	mov	r0, r4
   15e98:	e584301c 	str	r3, [r4, #28]
   15e9c:	ebffff9b 	bl	15d10 <CUSBBluetoothDevice::StartRequest()>
   15ea0:	e3500000 	cmp	r0, #0
   15ea4:	18bd8070 	popne	{r4, r5, r6, pc}
   15ea8:	eb003ee7 	bl	25a4c <CLogger::Get()>
   15eac:	e8bd4070 	pop	{r4, r5, r6, lr}
   15eb0:	e59f3060 	ldr	r3, [pc, #96]	; 15f18 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x104>
   15eb4:	e3a02001 	mov	r2, #1
   15eb8:	e59f105c 	ldr	r1, [pc, #92]	; 15f1c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x108>
   15ebc:	ea003e1f 	b	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15ec0:	eb003ee1 	bl	25a4c <CLogger::Get()>
   15ec4:	e59f3054 	ldr	r3, [pc, #84]	; 15f20 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x10c>
   15ec8:	e3a02002 	mov	r2, #2
   15ecc:	e59f1048 	ldr	r1, [pc, #72]	; 15f1c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x108>
   15ed0:	eb003e1a 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15ed4:	eaffffe5 	b	15e70 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   15ed8:	e3a020b8 	mov	r2, #184	; 0xb8
   15edc:	e59f1040 	ldr	r1, [pc, #64]	; 15f24 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   15ee0:	e59f0040 	ldr	r0, [pc, #64]	; 15f28 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   15ee4:	eb0035e5 	bl	23680 <assertion_failed>
   15ee8:	e3a020b2 	mov	r2, #178	; 0xb2
   15eec:	e59f1030 	ldr	r1, [pc, #48]	; 15f24 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   15ef0:	e59f0034 	ldr	r0, [pc, #52]	; 15f2c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x118>
   15ef4:	eb0035e1 	bl	23680 <assertion_failed>
   15ef8:	e3a020b3 	mov	r2, #179	; 0xb3
   15efc:	e59f1020 	ldr	r1, [pc, #32]	; 15f24 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   15f00:	e59f0028 	ldr	r0, [pc, #40]	; 15f30 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   15f04:	eb0035dd 	bl	23680 <assertion_failed>
   15f08:	e3a020b4 	mov	r2, #180	; 0xb4
   15f0c:	e59f1010 	ldr	r1, [pc, #16]	; 15f24 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   15f10:	e59f001c 	ldr	r0, [pc, #28]	; 15f34 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x120>
   15f14:	eb0035d9 	bl	23680 <assertion_failed>
   15f18:	00035fa8 	.word	0x00035fa8
   15f1c:	00036c6c 	.word	0x00036c6c
   15f20:	00036cd0 	.word	0x00036cd0
   15f24:	00036c74 	.word	0x00036c74
   15f28:	00036cb8 	.word	0x00036cb8
   15f2c:	00034758 	.word	0x00034758
   15f30:	00035f98 	.word	0x00035f98
   15f34:	00036ca4 	.word	0x00036ca4

00015f38 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   15f38:	e3520000 	cmp	r2, #0
   15f3c:	0a000002 	beq	15f4c <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   15f40:	e1a01000 	mov	r1, r0
   15f44:	e1a00002 	mov	r0, r2
   15f48:	eaffffb1 	b	15e14 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   15f4c:	e92d4010 	push	{r4, lr}
   15f50:	e3a020cc 	mov	r2, #204	; 0xcc
   15f54:	e59f1004 	ldr	r1, [pc, #4]	; 15f60 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   15f58:	e59f0004 	ldr	r0, [pc, #4]	; 15f64 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   15f5c:	eb0035c7 	bl	23680 <assertion_failed>
   15f60:	00036c74 	.word	0x00036c74
   15f64:	0003466c 	.word	0x0003466c

00015f68 <CUSBBluetoothDevice::Configure()>:
   15f68:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   15f6c:	e24dd014 	sub	sp, sp, #20
   15f70:	e1a05000 	mov	r5, r0
   15f74:	ebffe157 	bl	e4d8 <CUSBFunction::GetInterfaceNumber() const>
   15f78:	e2506000 	subs	r6, r0, #0
   15f7c:	1a000043 	bne	16090 <CUSBBluetoothDevice::Configure()+0x128>
   15f80:	e1a00005 	mov	r0, r5
   15f84:	ebffe0d3 	bl	e2d8 <CUSBFunction::GetNumEndpoints() const>
   15f88:	e3500003 	cmp	r0, #3
   15f8c:	03a06005 	moveq	r6, #5
   15f90:	03a07014 	moveq	r7, #20
   15f94:	1a000037 	bne	16078 <CUSBBluetoothDevice::Configure()+0x110>
   15f98:	e1a01006 	mov	r1, r6
   15f9c:	e1a00005 	mov	r0, r5
   15fa0:	ebffe0f9 	bl	e38c <CUSBFunction::GetDescriptor(unsigned char)>
   15fa4:	e2504000 	subs	r4, r0, #0
   15fa8:	0a000041 	beq	160b4 <CUSBBluetoothDevice::Configure()+0x14c>
   15fac:	e5d42003 	ldrb	r2, [r4, #3]
   15fb0:	e202203f 	and	r2, r2, #63	; 0x3f
   15fb4:	e3520002 	cmp	r2, #2
   15fb8:	0a00000f 	beq	15ffc <CUSBBluetoothDevice::Configure()+0x94>
   15fbc:	e3520003 	cmp	r2, #3
   15fc0:	1afffff4 	bne	15f98 <CUSBBluetoothDevice::Configure()+0x30>
   15fc4:	e5953010 	ldr	r3, [r5, #16]
   15fc8:	e1a00005 	mov	r0, r5
   15fcc:	e3530000 	cmp	r3, #0
   15fd0:	1a000060 	bne	16158 <CUSBBluetoothDevice::Configure()+0x1f0>
   15fd4:	ebffe0cb 	bl	e308 <CUSBFunction::GetDevice() const>
   15fd8:	e1a09000 	mov	r9, r0
   15fdc:	e1a00007 	mov	r0, r7
   15fe0:	eb004fc3 	bl	29ef4 <operator new(unsigned int)>
   15fe4:	e1a08000 	mov	r8, r0
   15fe8:	e1a02004 	mov	r2, r4
   15fec:	e1a01009 	mov	r1, r9
   15ff0:	ebffdf01 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15ff4:	e5858010 	str	r8, [r5, #16]
   15ff8:	eaffffe6 	b	15f98 <CUSBBluetoothDevice::Configure()+0x30>
   15ffc:	e1d430d2 	ldrsb	r3, [r4, #2]
   16000:	e3530000 	cmp	r3, #0
   16004:	ba00000d 	blt	16040 <CUSBBluetoothDevice::Configure()+0xd8>
   16008:	e5953018 	ldr	r3, [r5, #24]
   1600c:	e1a00005 	mov	r0, r5
   16010:	e3530000 	cmp	r3, #0
   16014:	1a00004f 	bne	16158 <CUSBBluetoothDevice::Configure()+0x1f0>
   16018:	ebffe0ba 	bl	e308 <CUSBFunction::GetDevice() const>
   1601c:	e1a09000 	mov	r9, r0
   16020:	e1a00007 	mov	r0, r7
   16024:	eb004fb2 	bl	29ef4 <operator new(unsigned int)>
   16028:	e1a08000 	mov	r8, r0
   1602c:	e1a02004 	mov	r2, r4
   16030:	e1a01009 	mov	r1, r9
   16034:	ebffdef0 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16038:	e5858018 	str	r8, [r5, #24]
   1603c:	eaffffd5 	b	15f98 <CUSBBluetoothDevice::Configure()+0x30>
   16040:	e5953014 	ldr	r3, [r5, #20]
   16044:	e1a00005 	mov	r0, r5
   16048:	e3530000 	cmp	r3, #0
   1604c:	1a000041 	bne	16158 <CUSBBluetoothDevice::Configure()+0x1f0>
   16050:	ebffe0ac 	bl	e308 <CUSBFunction::GetDevice() const>
   16054:	e1a09000 	mov	r9, r0
   16058:	e1a00007 	mov	r0, r7
   1605c:	eb004fa4 	bl	29ef4 <operator new(unsigned int)>
   16060:	e1a08000 	mov	r8, r0
   16064:	e1a02004 	mov	r2, r4
   16068:	e1a01009 	mov	r1, r9
   1606c:	ebffdee2 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16070:	e5858014 	str	r8, [r5, #20]
   16074:	eaffffc7 	b	15f98 <CUSBBluetoothDevice::Configure()+0x30>
   16078:	e1a00005 	mov	r0, r5
   1607c:	e59f1104 	ldr	r1, [pc, #260]	; 16188 <CUSBBluetoothDevice::Configure()+0x220>
   16080:	ebffe0cc 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   16084:	e1a00006 	mov	r0, r6
   16088:	e28dd014 	add	sp, sp, #20
   1608c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16090:	e3a06000 	mov	r6, #0
   16094:	eb003e6c 	bl	25a4c <CLogger::Get()>
   16098:	e59f30ec 	ldr	r3, [pc, #236]	; 1618c <CUSBBluetoothDevice::Configure()+0x224>
   1609c:	e3a02002 	mov	r2, #2
   160a0:	e59f10e0 	ldr	r1, [pc, #224]	; 16188 <CUSBBluetoothDevice::Configure()+0x220>
   160a4:	eb003da5 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   160a8:	e1a00006 	mov	r0, r6
   160ac:	e28dd014 	add	sp, sp, #20
   160b0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   160b4:	e5953014 	ldr	r3, [r5, #20]
   160b8:	e3530000 	cmp	r3, #0
   160bc:	0a000024 	beq	16154 <CUSBBluetoothDevice::Configure()+0x1ec>
   160c0:	e5953018 	ldr	r3, [r5, #24]
   160c4:	e3530000 	cmp	r3, #0
   160c8:	0a000021 	beq	16154 <CUSBBluetoothDevice::Configure()+0x1ec>
   160cc:	e5953010 	ldr	r3, [r5, #16]
   160d0:	e3530000 	cmp	r3, #0
   160d4:	0a00001e 	beq	16154 <CUSBBluetoothDevice::Configure()+0x1ec>
   160d8:	e1a00005 	mov	r0, r5
   160dc:	ebffdfc5 	bl	dff8 <CUSBFunction::Configure()>
   160e0:	e2506000 	subs	r6, r0, #0
   160e4:	0a000021 	beq	16170 <CUSBBluetoothDevice::Configure()+0x208>
   160e8:	e5950010 	ldr	r0, [r5, #16]
   160ec:	ebffdf41 	bl	ddf8 <CUSBEndpoint::GetMaxPacketSize() const>
   160f0:	eb004f80 	bl	29ef8 <operator new[](unsigned int)>
   160f4:	e5850020 	str	r0, [r5, #32]
   160f8:	e1a0000d 	mov	r0, sp
   160fc:	eb004238 	bl	269e4 <CString::CString()>
   16100:	e59f3088 	ldr	r3, [pc, #136]	; 16190 <CUSBBluetoothDevice::Configure()+0x228>
   16104:	e59f1088 	ldr	r1, [pc, #136]	; 16194 <CUSBBluetoothDevice::Configure()+0x22c>
   16108:	e5932000 	ldr	r2, [r3]
   1610c:	e1a0000d 	mov	r0, sp
   16110:	e282c001 	add	ip, r2, #1
   16114:	e583c000 	str	ip, [r3]
   16118:	eb004774 	bl	27ef0 <CString::Format(char const*, ...)>
   1611c:	eb003831 	bl	241e8 <CDeviceNameService::Get()>
   16120:	e1a07000 	mov	r7, r0
   16124:	e1a0000d 	mov	r0, sp
   16128:	eb004243 	bl	26a3c <CString::operator char const*() const>
   1612c:	e1a03004 	mov	r3, r4
   16130:	e1a01000 	mov	r1, r0
   16134:	e1a02005 	mov	r2, r5
   16138:	e1a00007 	mov	r0, r7
   1613c:	eb00376f 	bl	23f00 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   16140:	e1a0000d 	mov	r0, sp
   16144:	eb0041f3 	bl	26918 <CString::~CString()>
   16148:	e1a00006 	mov	r0, r6
   1614c:	e28dd014 	add	sp, sp, #20
   16150:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16154:	e1a00005 	mov	r0, r5
   16158:	e3a06000 	mov	r6, #0
   1615c:	e59f1024 	ldr	r1, [pc, #36]	; 16188 <CUSBBluetoothDevice::Configure()+0x220>
   16160:	ebffe094 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   16164:	e1a00006 	mov	r0, r6
   16168:	e28dd014 	add	sp, sp, #20
   1616c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16170:	eb003e35 	bl	25a4c <CLogger::Get()>
   16174:	e59f301c 	ldr	r3, [pc, #28]	; 16198 <CUSBBluetoothDevice::Configure()+0x230>
   16178:	e3a02001 	mov	r2, #1
   1617c:	e59f1004 	ldr	r1, [pc, #4]	; 16188 <CUSBBluetoothDevice::Configure()+0x220>
   16180:	eb003d6e 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16184:	eaffffbe 	b	16084 <CUSBBluetoothDevice::Configure()+0x11c>
   16188:	00036c6c 	.word	0x00036c6c
   1618c:	00036ce0 	.word	0x00036ce0
   16190:	0003decc 	.word	0x0003decc
   16194:	00036d04 	.word	0x00036d04
   16198:	00035810 	.word	0x00035810

0001619c <CUSBCDCEthernetDevice::GetMACAddress() const>:
   1619c:	e280001c 	add	r0, r0, #28
   161a0:	e12fff1e 	bx	lr

000161a4 <non-virtual thunk to CUSBCDCEthernetDevice::GetMACAddress() const>:
   161a4:	e2400010 	sub	r0, r0, #16
   161a8:	eafffffb 	b	1619c <CUSBCDCEthernetDevice::GetMACAddress() const>

000161ac <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   161ac:	e92d4070 	push	{r4, r5, r6, lr}
   161b0:	e59f3074 	ldr	r3, [pc, #116]	; 1622c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x80>
   161b4:	e5905018 	ldr	r5, [r0, #24]
   161b8:	e2832038 	add	r2, r3, #56	; 0x38
   161bc:	e3550000 	cmp	r5, #0
   161c0:	e1a04000 	mov	r4, r0
   161c4:	e5803000 	str	r3, [r0]
   161c8:	e5802010 	str	r2, [r0, #16]
   161cc:	0a000004 	beq	161e4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x38>
   161d0:	e1a00005 	mov	r0, r5
   161d4:	ebffdef2 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   161d8:	e1a00005 	mov	r0, r5
   161dc:	e3a01014 	mov	r1, #20
   161e0:	eb004f51 	bl	29f2c <operator delete(void*, unsigned int)>
   161e4:	e3a03000 	mov	r3, #0
   161e8:	e5945014 	ldr	r5, [r4, #20]
   161ec:	e5843018 	str	r3, [r4, #24]
   161f0:	e1550003 	cmp	r5, r3
   161f4:	0a000004 	beq	1620c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x60>
   161f8:	e1a00005 	mov	r0, r5
   161fc:	ebffdee8 	bl	dda4 <CUSBEndpoint::~CUSBEndpoint()>
   16200:	e1a00005 	mov	r0, r5
   16204:	e3a01014 	mov	r1, #20
   16208:	eb004f47 	bl	29f2c <operator delete(void*, unsigned int)>
   1620c:	e3a03000 	mov	r3, #0
   16210:	e284001c 	add	r0, r4, #28
   16214:	e5843014 	str	r3, [r4, #20]
   16218:	eb004e50 	bl	29b60 <CMACAddress::~CMACAddress()>
   1621c:	e1a00004 	mov	r0, r4
   16220:	ebffdf4b 	bl	df54 <CUSBFunction::~CUSBFunction()>
   16224:	e1a00004 	mov	r0, r4
   16228:	e8bd8070 	pop	{r4, r5, r6, pc}
   1622c:	00036d14 	.word	0x00036d14

00016230 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   16230:	e2400010 	sub	r0, r0, #16
   16234:	eaffffdc 	b	161ac <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

00016238 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   16238:	e92d4010 	push	{r4, lr}
   1623c:	e1a04000 	mov	r4, r0
   16240:	ebffffd9 	bl	161ac <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   16244:	e1a00004 	mov	r0, r4
   16248:	e3a01024 	mov	r1, #36	; 0x24
   1624c:	eb004f36 	bl	29f2c <operator delete(void*, unsigned int)>
   16250:	e1a00004 	mov	r0, r4
   16254:	e8bd8010 	pop	{r4, pc}

00016258 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   16258:	e2400010 	sub	r0, r0, #16
   1625c:	eafffff5 	b	16238 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

00016260 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   16260:	e92d4070 	push	{r4, r5, r6, lr}
   16264:	e5903014 	ldr	r3, [r0, #20]
   16268:	e24dd030 	sub	sp, sp, #48	; 0x30
   1626c:	e3530000 	cmp	r3, #0
   16270:	0a000026 	beq	16310 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xb0>
   16274:	e3510000 	cmp	r1, #0
   16278:	0a000028 	beq	16320 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xc0>
   1627c:	e3a05000 	mov	r5, #0
   16280:	e1a04000 	mov	r4, r0
   16284:	e1a06002 	mov	r6, r2
   16288:	e58d5000 	str	r5, [sp]
   1628c:	e1a02001 	mov	r2, r1
   16290:	e28d0008 	add	r0, sp, #8
   16294:	e1a01003 	mov	r1, r3
   16298:	e3a03d19 	mov	r3, #1600	; 0x640
   1629c:	ebfff407 	bl	132c0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   162a0:	e28d0008 	add	r0, sp, #8
   162a4:	ebfff485 	bl	134c0 <CUSBRequest::SetCompleteOnNAK()>
   162a8:	e1a00004 	mov	r0, r4
   162ac:	ebffe02b 	bl	e360 <CUSBFunction::GetHost() const>
   162b0:	e5903000 	ldr	r3, [r0]
   162b4:	e1a02005 	mov	r2, r5
   162b8:	e5933008 	ldr	r3, [r3, #8]
   162bc:	e28d1008 	add	r1, sp, #8
   162c0:	e12fff33 	blx	r3
   162c4:	e2504000 	subs	r4, r0, #0
   162c8:	0a00000a 	beq	162f8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x98>
   162cc:	e28d0008 	add	r0, sp, #8
   162d0:	ebfff42d 	bl	1338c <CUSBRequest::GetResultLength() const>
   162d4:	e3500000 	cmp	r0, #0
   162d8:	0a000006 	beq	162f8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x98>
   162dc:	e3560000 	cmp	r6, #0
   162e0:	15860000 	strne	r0, [r6]
   162e4:	1a000004 	bne	162fc <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x9c>
   162e8:	e3a020c3 	mov	r2, #195	; 0xc3
   162ec:	e59f103c 	ldr	r1, [pc, #60]	; 16330 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   162f0:	e59f003c 	ldr	r0, [pc, #60]	; 16334 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd4>
   162f4:	eb0034e1 	bl	23680 <assertion_failed>
   162f8:	e3a04000 	mov	r4, #0
   162fc:	e28d0008 	add	r0, sp, #8
   16300:	ebfff40f 	bl	13344 <CUSBRequest::~CUSBRequest()>
   16304:	e1a00004 	mov	r0, r4
   16308:	e28dd030 	add	sp, sp, #48	; 0x30
   1630c:	e8bd8070 	pop	{r4, r5, r6, pc}
   16310:	e3a020b2 	mov	r2, #178	; 0xb2
   16314:	e59f1014 	ldr	r1, [pc, #20]	; 16330 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   16318:	e59f0018 	ldr	r0, [pc, #24]	; 16338 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   1631c:	eb0034d7 	bl	23680 <assertion_failed>
   16320:	e3a020b3 	mov	r2, #179	; 0xb3
   16324:	e59f1004 	ldr	r1, [pc, #4]	; 16330 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   16328:	e59f000c 	ldr	r0, [pc, #12]	; 1633c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   1632c:	eb0034d3 	bl	23680 <assertion_failed>
   16330:	00036d7c 	.word	0x00036d7c
   16334:	00036964 	.word	0x00036964
   16338:	000368f0 	.word	0x000368f0
   1633c:	00036138 	.word	0x00036138

00016340 <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   16340:	e2400010 	sub	r0, r0, #16
   16344:	eaffffc5 	b	16260 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>

00016348 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   16348:	e92d4070 	push	{r4, r5, r6, lr}
   1634c:	e5903018 	ldr	r3, [r0, #24]
   16350:	e24dd008 	sub	sp, sp, #8
   16354:	e3530000 	cmp	r3, #0
   16358:	0a000011 	beq	163a4 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x5c>
   1635c:	e3510000 	cmp	r1, #0
   16360:	e1a05001 	mov	r5, r1
   16364:	0a000012 	beq	163b4 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x6c>
   16368:	e3520d19 	cmp	r2, #1600	; 0x640
   1636c:	e1a06002 	mov	r6, r2
   16370:	8a000013 	bhi	163c4 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x7c>
   16374:	e1a04000 	mov	r4, r0
   16378:	ebffdff8 	bl	e360 <CUSBFunction::GetHost() const>
   1637c:	e3a0c000 	mov	ip, #0
   16380:	e5941018 	ldr	r1, [r4, #24]
   16384:	e1a03006 	mov	r3, r6
   16388:	e1a02005 	mov	r2, r5
   1638c:	e58dc000 	str	ip, [sp]
   16390:	ebffec2a 	bl	11440 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   16394:	e1e00000 	mvn	r0, r0
   16398:	e1a00fa0 	lsr	r0, r0, #31
   1639c:	e28dd008 	add	sp, sp, #8
   163a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   163a4:	e3a020aa 	mov	r2, #170	; 0xaa
   163a8:	e59f1024 	ldr	r1, [pc, #36]	; 163d4 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   163ac:	e59f0024 	ldr	r0, [pc, #36]	; 163d8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x90>
   163b0:	eb0034b2 	bl	23680 <assertion_failed>
   163b4:	e3a020ab 	mov	r2, #171	; 0xab
   163b8:	e59f1014 	ldr	r1, [pc, #20]	; 163d4 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   163bc:	e59f0018 	ldr	r0, [pc, #24]	; 163dc <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x94>
   163c0:	eb0034ae 	bl	23680 <assertion_failed>
   163c4:	e3a020ac 	mov	r2, #172	; 0xac
   163c8:	e59f1004 	ldr	r1, [pc, #4]	; 163d4 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   163cc:	e59f000c 	ldr	r0, [pc, #12]	; 163e0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   163d0:	eb0034aa 	bl	23680 <assertion_failed>
   163d4:	00036d7c 	.word	0x00036d7c
   163d8:	00036978 	.word	0x00036978
   163dc:	00036138 	.word	0x00036138
   163e0:	00036d90 	.word	0x00036d90

000163e4 <non-virtual thunk to CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   163e4:	e2400010 	sub	r0, r0, #16
   163e8:	eaffffd6 	b	16348 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>

000163ec <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   163ec:	e92d4010 	push	{r4, lr}
   163f0:	e1a04000 	mov	r4, r0
   163f4:	ebffdf67 	bl	e198 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   163f8:	e3a02000 	mov	r2, #0
   163fc:	e59f3024 	ldr	r3, [pc, #36]	; 16428 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x3c>
   16400:	e5842014 	str	r2, [r4, #20]
   16404:	e2831008 	add	r1, r3, #8
   16408:	e2833040 	add	r3, r3, #64	; 0x40
   1640c:	e5841000 	str	r1, [r4]
   16410:	e5843010 	str	r3, [r4, #16]
   16414:	e5842018 	str	r2, [r4, #24]
   16418:	e284001c 	add	r0, r4, #28
   1641c:	eb004dcc 	bl	29b54 <CMACAddress::CMACAddress()>
   16420:	e1a00004 	mov	r0, r4
   16424:	e8bd8010 	pop	{r4, pc}
   16428:	00036d0c 	.word	0x00036d0c

0001642c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   1642c:	e92d4030 	push	{r4, r5, lr}
   16430:	e24dd01c 	sub	sp, sp, #28
   16434:	e1a04001 	mov	r4, r1
   16438:	e1a05000 	mov	r5, r0
   1643c:	ebffdfb1 	bl	e308 <CUSBFunction::GetDevice() const>
   16440:	e1a01000 	mov	r1, r0
   16444:	e28d000c 	add	r0, sp, #12
   16448:	eb00021c 	bl	16cc0 <CUSBString::CUSBString(CUSBDevice*)>
   1644c:	e3540000 	cmp	r4, #0
   16450:	1a000005 	bne	1646c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   16454:	e3a04000 	mov	r4, #0
   16458:	e28d000c 	add	r0, sp, #12
   1645c:	eb00025a 	bl	16dcc <CUSBString::~CUSBString()>
   16460:	e1a00004 	mov	r0, r4
   16464:	e28dd01c 	add	sp, sp, #28
   16468:	e8bd8030 	pop	{r4, r5, pc}
   1646c:	e28d000c 	add	r0, sp, #12
   16470:	eb0002ec 	bl	17028 <CUSBString::GetLanguageID()>
   16474:	e1a01004 	mov	r1, r4
   16478:	e1a02000 	mov	r2, r0
   1647c:	e28d000c 	add	r0, sp, #12
   16480:	eb000261 	bl	16e0c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   16484:	e2504000 	subs	r4, r0, #0
   16488:	0afffff1 	beq	16454 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1648c:	e28d000c 	add	r0, sp, #12
   16490:	eb0002e2 	bl	17020 <CUSBString::Get() const>
   16494:	e3500000 	cmp	r0, #0
   16498:	0a00001b 	beq	1650c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe0>
   1649c:	e2801002 	add	r1, r0, #2
   164a0:	e28dc003 	add	ip, sp, #3
   164a4:	e280000e 	add	r0, r0, #14
   164a8:	e15130d2 	ldrsb	r3, [r1, #-2]
   164ac:	e3530039 	cmp	r3, #57	; 0x39
   164b0:	c2433007 	subgt	r3, r3, #7
   164b4:	c6af3073 	sxtbgt	r3, r3
   164b8:	e2433030 	sub	r3, r3, #48	; 0x30
   164bc:	e6ef2073 	uxtb	r2, r3
   164c0:	e352000f 	cmp	r2, #15
   164c4:	8affffe2 	bhi	16454 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   164c8:	e15130d1 	ldrsb	r3, [r1, #-1]
   164cc:	e3530039 	cmp	r3, #57	; 0x39
   164d0:	c2433007 	subgt	r3, r3, #7
   164d4:	c6af3073 	sxtbgt	r3, r3
   164d8:	e2433030 	sub	r3, r3, #48	; 0x30
   164dc:	e6ef3073 	uxtb	r3, r3
   164e0:	e353000f 	cmp	r3, #15
   164e4:	8affffda 	bhi	16454 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   164e8:	e2811002 	add	r1, r1, #2
   164ec:	e1833202 	orr	r3, r3, r2, lsl #4
   164f0:	e1500001 	cmp	r0, r1
   164f4:	e5ec3001 	strb	r3, [ip, #1]!
   164f8:	1affffea 	bne	164a8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   164fc:	e285001c 	add	r0, r5, #28
   16500:	e28d1004 	add	r1, sp, #4
   16504:	eb004db3 	bl	29bd8 <CMACAddress::Set(unsigned char const*)>
   16508:	eaffffd2 	b	16458 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   1650c:	e3a020d3 	mov	r2, #211	; 0xd3
   16510:	e59f1004 	ldr	r1, [pc, #4]	; 1651c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf0>
   16514:	e59f0004 	ldr	r0, [pc, #4]	; 16520 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf4>
   16518:	eb003458 	bl	23680 <assertion_failed>
   1651c:	00036d7c 	.word	0x00036d7c
   16520:	00036db0 	.word	0x00036db0

00016524 <CUSBCDCEthernetDevice::Configure()>:
   16524:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   16528:	e1a05000 	mov	r5, r0
   1652c:	e24dd01c 	sub	sp, sp, #28
   16530:	e3a06024 	mov	r6, #36	; 0x24
   16534:	ea000002 	b	16544 <CUSBCDCEthernetDevice::Configure()+0x20>
   16538:	e5d43002 	ldrb	r3, [r4, #2]
   1653c:	e353000f 	cmp	r3, #15
   16540:	0a00000a 	beq	16570 <CUSBCDCEthernetDevice::Configure()+0x4c>
   16544:	e1a01006 	mov	r1, r6
   16548:	e1a00005 	mov	r0, r5
   1654c:	ebffdf8e 	bl	e38c <CUSBFunction::GetDescriptor(unsigned char)>
   16550:	e2504000 	subs	r4, r0, #0
   16554:	1afffff7 	bne	16538 <CUSBCDCEthernetDevice::Configure()+0x14>
   16558:	e1a00005 	mov	r0, r5
   1655c:	e59f11f0 	ldr	r1, [pc, #496]	; 16754 <CUSBCDCEthernetDevice::Configure()+0x230>
   16560:	ebffdf94 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   16564:	e1a00004 	mov	r0, r4
   16568:	e28dd01c 	add	sp, sp, #28
   1656c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16570:	e3a06004 	mov	r6, #4
   16574:	e1a01006 	mov	r1, r6
   16578:	e1a00005 	mov	r0, r5
   1657c:	ebffdf82 	bl	e38c <CUSBFunction::GetDescriptor(unsigned char)>
   16580:	e2503000 	subs	r3, r0, #0
   16584:	0a00003c 	beq	1667c <CUSBCDCEthernetDevice::Configure()+0x158>
   16588:	e5d32005 	ldrb	r2, [r3, #5]
   1658c:	e352000a 	cmp	r2, #10
   16590:	1afffff7 	bne	16574 <CUSBCDCEthernetDevice::Configure()+0x50>
   16594:	e5d32006 	ldrb	r2, [r3, #6]
   16598:	e3520000 	cmp	r2, #0
   1659c:	1afffff4 	bne	16574 <CUSBCDCEthernetDevice::Configure()+0x50>
   165a0:	e5d32007 	ldrb	r2, [r3, #7]
   165a4:	e3520000 	cmp	r2, #0
   165a8:	1afffff1 	bne	16574 <CUSBCDCEthernetDevice::Configure()+0x50>
   165ac:	e5d33004 	ldrb	r3, [r3, #4]
   165b0:	e3530001 	cmp	r3, #1
   165b4:	daffffee 	ble	16574 <CUSBCDCEthernetDevice::Configure()+0x50>
   165b8:	e5d41003 	ldrb	r1, [r4, #3]
   165bc:	e1a00005 	mov	r0, r5
   165c0:	ebffff99 	bl	1642c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   165c4:	e2504000 	subs	r4, r0, #0
   165c8:	0a000043 	beq	166dc <CUSBCDCEthernetDevice::Configure()+0x1b8>
   165cc:	e28d0008 	add	r0, sp, #8
   165d0:	eb004103 	bl	269e4 <CString::CString()>
   165d4:	e28d1008 	add	r1, sp, #8
   165d8:	e285001c 	add	r0, r5, #28
   165dc:	eb004dd6 	bl	29d3c <CMACAddress::Format(CString*) const>
   165e0:	eb003d19 	bl	25a4c <CLogger::Get()>
   165e4:	e1a04000 	mov	r4, r0
   165e8:	e28d0008 	add	r0, sp, #8
   165ec:	eb004112 	bl	26a3c <CString::operator char const*() const>
   165f0:	e59f3160 	ldr	r3, [pc, #352]	; 16758 <CUSBCDCEthernetDevice::Configure()+0x234>
   165f4:	e58d0000 	str	r0, [sp]
   165f8:	e3a02004 	mov	r2, #4
   165fc:	e1a00004 	mov	r0, r4
   16600:	e59f114c 	ldr	r1, [pc, #332]	; 16754 <CUSBCDCEthernetDevice::Configure()+0x230>
   16604:	eb003c4d 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16608:	e3a06005 	mov	r6, #5
   1660c:	e3a07014 	mov	r7, #20
   16610:	ea000003 	b	16624 <CUSBCDCEthernetDevice::Configure()+0x100>
   16614:	e5d43003 	ldrb	r3, [r4, #3]
   16618:	e203303f 	and	r3, r3, #63	; 0x3f
   1661c:	e3530002 	cmp	r3, #2
   16620:	0a00001c 	beq	16698 <CUSBCDCEthernetDevice::Configure()+0x174>
   16624:	e1a01006 	mov	r1, r6
   16628:	e1a00005 	mov	r0, r5
   1662c:	ebffdf56 	bl	e38c <CUSBFunction::GetDescriptor(unsigned char)>
   16630:	e2504000 	subs	r4, r0, #0
   16634:	1afffff6 	bne	16614 <CUSBCDCEthernetDevice::Configure()+0xf0>
   16638:	e5953014 	ldr	r3, [r5, #20]
   1663c:	e1a00005 	mov	r0, r5
   16640:	e3530000 	cmp	r3, #0
   16644:	0a000030 	beq	1670c <CUSBCDCEthernetDevice::Configure()+0x1e8>
   16648:	e5953018 	ldr	r3, [r5, #24]
   1664c:	e3530000 	cmp	r3, #0
   16650:	0a00002d 	beq	1670c <CUSBCDCEthernetDevice::Configure()+0x1e8>
   16654:	ebffde67 	bl	dff8 <CUSBFunction::Configure()>
   16658:	e2504000 	subs	r4, r0, #0
   1665c:	0a000024 	beq	166f4 <CUSBCDCEthernetDevice::Configure()+0x1d0>
   16660:	e2850010 	add	r0, r5, #16
   16664:	eb004dd5 	bl	29dc0 <CNetDevice::AddNetDevice()>
   16668:	e28d0008 	add	r0, sp, #8
   1666c:	eb0040a9 	bl	26918 <CString::~CString()>
   16670:	e1a00004 	mov	r0, r4
   16674:	e28dd01c 	add	sp, sp, #28
   16678:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1667c:	e1a04003 	mov	r4, r3
   16680:	e1a00005 	mov	r0, r5
   16684:	e59f10c8 	ldr	r1, [pc, #200]	; 16754 <CUSBCDCEthernetDevice::Configure()+0x230>
   16688:	ebffdf4a 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   1668c:	e1a00004 	mov	r0, r4
   16690:	e28dd01c 	add	sp, sp, #28
   16694:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   16698:	e1d430d2 	ldrsb	r3, [r4, #2]
   1669c:	e3530000 	cmp	r3, #0
   166a0:	ba00001d 	blt	1671c <CUSBCDCEthernetDevice::Configure()+0x1f8>
   166a4:	e5953018 	ldr	r3, [r5, #24]
   166a8:	e1a00005 	mov	r0, r5
   166ac:	e3530000 	cmp	r3, #0
   166b0:	1a000015 	bne	1670c <CUSBCDCEthernetDevice::Configure()+0x1e8>
   166b4:	ebffdf13 	bl	e308 <CUSBFunction::GetDevice() const>
   166b8:	e1a09000 	mov	r9, r0
   166bc:	e1a00007 	mov	r0, r7
   166c0:	eb004e0b 	bl	29ef4 <operator new(unsigned int)>
   166c4:	e1a08000 	mov	r8, r0
   166c8:	e1a02004 	mov	r2, r4
   166cc:	e1a01009 	mov	r1, r9
   166d0:	ebffdd49 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   166d4:	e5858018 	str	r8, [r5, #24]
   166d8:	eaffffd1 	b	16624 <CUSBCDCEthernetDevice::Configure()+0x100>
   166dc:	eb003cda 	bl	25a4c <CLogger::Get()>
   166e0:	e59f3074 	ldr	r3, [pc, #116]	; 1675c <CUSBCDCEthernetDevice::Configure()+0x238>
   166e4:	e3a02001 	mov	r2, #1
   166e8:	e59f1064 	ldr	r1, [pc, #100]	; 16754 <CUSBCDCEthernetDevice::Configure()+0x230>
   166ec:	eb003c13 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   166f0:	eaffff9b 	b	16564 <CUSBCDCEthernetDevice::Configure()+0x40>
   166f4:	eb003cd4 	bl	25a4c <CLogger::Get()>
   166f8:	e59f3060 	ldr	r3, [pc, #96]	; 16760 <CUSBCDCEthernetDevice::Configure()+0x23c>
   166fc:	e3a02001 	mov	r2, #1
   16700:	e59f104c 	ldr	r1, [pc, #76]	; 16754 <CUSBCDCEthernetDevice::Configure()+0x230>
   16704:	eb003c0d 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16708:	eaffffd6 	b	16668 <CUSBCDCEthernetDevice::Configure()+0x144>
   1670c:	e59f1040 	ldr	r1, [pc, #64]	; 16754 <CUSBCDCEthernetDevice::Configure()+0x230>
   16710:	ebffdf28 	bl	e3b8 <CUSBFunction::ConfigurationError(char const*) const>
   16714:	e3a04000 	mov	r4, #0
   16718:	eaffffd2 	b	16668 <CUSBCDCEthernetDevice::Configure()+0x144>
   1671c:	e5953014 	ldr	r3, [r5, #20]
   16720:	e1a00005 	mov	r0, r5
   16724:	e3530000 	cmp	r3, #0
   16728:	1afffff7 	bne	1670c <CUSBCDCEthernetDevice::Configure()+0x1e8>
   1672c:	ebffdef5 	bl	e308 <CUSBFunction::GetDevice() const>
   16730:	e1a09000 	mov	r9, r0
   16734:	e1a00007 	mov	r0, r7
   16738:	eb004ded 	bl	29ef4 <operator new(unsigned int)>
   1673c:	e1a08000 	mov	r8, r0
   16740:	e1a02004 	mov	r2, r4
   16744:	e1a01009 	mov	r1, r9
   16748:	ebffdd2b 	bl	dbfc <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1674c:	e5858014 	str	r8, [r5, #20]
   16750:	eaffffb3 	b	16624 <CUSBCDCEthernetDevice::Configure()+0x100>
   16754:	00036d74 	.word	0x00036d74
   16758:	00036a18 	.word	0x00036a18
   1675c:	00036bfc 	.word	0x00036bfc
   16760:	00035810 	.word	0x00035810

00016764 <CNetDevice::IsLinkUp()>:
   16764:	e3a00001 	mov	r0, #1
   16768:	e12fff1e 	bx	lr

0001676c <CNetDevice::GetLinkSpeed()>:
   1676c:	e3a00006 	mov	r0, #6
   16770:	e12fff1e 	bx	lr

00016774 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   16774:	e3a0c000 	mov	ip, #0
   16778:	e0813002 	add	r3, r1, r2
   1677c:	e151000c 	cmp	r1, ip
   16780:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16784:	e8800006 	stm	r0, {r1, r2}
   16788:	e5801010 	str	r1, [r0, #16]
   1678c:	e5801018 	str	r1, [r0, #24]
   16790:	e580300c 	str	r3, [r0, #12]
   16794:	e5c0c008 	strb	ip, [r0, #8]
   16798:	e580c014 	str	ip, [r0, #20]
   1679c:	0a000030 	beq	16864 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   167a0:	e242c004 	sub	ip, r2, #4
   167a4:	e35c0f7f 	cmp	ip, #508	; 0x1fc
   167a8:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   167ac:	e5d1c000 	ldrb	ip, [r1]
   167b0:	e35c0009 	cmp	ip, #9
   167b4:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   167b8:	e5d1c001 	ldrb	ip, [r1, #1]
   167bc:	e35c0002 	cmp	ip, #2
   167c0:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   167c4:	e5d1c002 	ldrb	ip, [r1, #2]
   167c8:	e5d1e003 	ldrb	lr, [r1, #3]
   167cc:	e18cc40e 	orr	ip, ip, lr, lsl #8
   167d0:	e15c0002 	cmp	ip, r2
   167d4:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   167d8:	e3a05000 	mov	r5, #0
   167dc:	3081300c 	addcc	r3, r1, ip
   167e0:	3580300c 	strcc	r3, [r0, #12]
   167e4:	e1a04005 	mov	r4, r5
   167e8:	e3a06009 	mov	r6, #9
   167ec:	e3a08007 	mov	r8, #7
   167f0:	e3a07001 	mov	r7, #1
   167f4:	ea000005 	b	16810 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x9c>
   167f8:	e3520005 	cmp	r2, #5
   167fc:	0a000020 	beq	16884 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x110>
   16800:	e3520002 	cmp	r2, #2
   16804:	0a00001a 	beq	16874 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x100>
   16808:	e1a0100c 	mov	r1, ip
   1680c:	e1a04002 	mov	r4, r2
   16810:	e2812002 	add	r2, r1, #2
   16814:	e1530002 	cmp	r3, r2
   16818:	9a000020 	bls	168a0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x12c>
   1681c:	e5d1e000 	ldrb	lr, [r1]
   16820:	e5d12001 	ldrb	r2, [r1, #1]
   16824:	e081c00e 	add	ip, r1, lr
   16828:	e15c0003 	cmp	ip, r3
   1682c:	8a00000a 	bhi	1685c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   16830:	e3520004 	cmp	r2, #4
   16834:	1affffef 	bne	167f8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x84>
   16838:	e3540000 	cmp	r4, #0
   1683c:	0a000006 	beq	1685c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   16840:	e5d15005 	ldrb	r5, [r1, #5]
   16844:	e1a04006 	mov	r4, r6
   16848:	e2455001 	sub	r5, r5, #1
   1684c:	e16f5f15 	clz	r5, r5
   16850:	e1a052a5 	lsr	r5, r5, #5
   16854:	e15e0004 	cmp	lr, r4
   16858:	0affffea 	beq	16808 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x94>
   1685c:	e5801018 	str	r1, [r0, #24]
   16860:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16864:	e3a02024 	mov	r2, #36	; 0x24
   16868:	e59f1044 	ldr	r1, [pc, #68]	; 168b4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x140>
   1686c:	e59f0044 	ldr	r0, [pc, #68]	; 168b8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x144>
   16870:	eb003382 	bl	23680 <assertion_failed>
   16874:	e3540000 	cmp	r4, #0
   16878:	1afffff7 	bne	1685c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   1687c:	e1a04006 	mov	r4, r6
   16880:	eafffff3 	b	16854 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe0>
   16884:	e31400fd 	tst	r4, #253	; 0xfd
   16888:	0afffff3 	beq	1685c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   1688c:	e3550000 	cmp	r5, #0
   16890:	11a04006 	movne	r4, r6
   16894:	11a05007 	movne	r5, r7
   16898:	01a04008 	moveq	r4, r8
   1689c:	eaffffec 	b	16854 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe0>
   168a0:	e1510003 	cmp	r1, r3
   168a4:	1affffec 	bne	1685c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   168a8:	e3a03001 	mov	r3, #1
   168ac:	e5c03008 	strb	r3, [r0, #8]
   168b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   168b4:	00036dc0 	.word	0x00036dc0
   168b8:	00036dd4 	.word	0x00036dd4

000168bc <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   168bc:	e3510000 	cmp	r1, #0
   168c0:	e92d4070 	push	{r4, r5, r6, lr}
   168c4:	0a00000d 	beq	16900 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x44>
   168c8:	e8910044 	ldm	r1, {r2, r6}
   168cc:	e5d15008 	ldrb	r5, [r1, #8]
   168d0:	e591400c 	ldr	r4, [r1, #12]
   168d4:	e591e010 	ldr	lr, [r1, #16]
   168d8:	e591c014 	ldr	ip, [r1, #20]
   168dc:	e5802000 	str	r2, [r0]
   168e0:	e5912018 	ldr	r2, [r1, #24]
   168e4:	e5806004 	str	r6, [r0, #4]
   168e8:	e5c05008 	strb	r5, [r0, #8]
   168ec:	e580400c 	str	r4, [r0, #12]
   168f0:	e580e010 	str	lr, [r0, #16]
   168f4:	e580c014 	str	ip, [r0, #20]
   168f8:	e5802018 	str	r2, [r0, #24]
   168fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   16900:	e3a02082 	mov	r2, #130	; 0x82
   16904:	e59f1004 	ldr	r1, [pc, #4]	; 16910 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x54>
   16908:	e59f0004 	ldr	r0, [pc, #4]	; 16914 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x58>
   1690c:	eb00335b 	bl	23680 <assertion_failed>
   16910:	00036dc0 	.word	0x00036dc0
   16914:	00036de4 	.word	0x00036de4

00016918 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   16918:	e12fff1e 	bx	lr

0001691c <CUSBConfigurationParser::IsValid() const>:
   1691c:	e5d00008 	ldrb	r0, [r0, #8]
   16920:	e12fff1e 	bx	lr

00016924 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   16924:	e5d03008 	ldrb	r3, [r0, #8]
   16928:	e92d4070 	push	{r4, r5, r6, lr}
   1692c:	e3530000 	cmp	r3, #0
   16930:	0a00002a 	beq	169e0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xbc>
   16934:	e590c010 	ldr	ip, [r0, #16]
   16938:	e590e00c 	ldr	lr, [r0, #12]
   1693c:	e15c000e 	cmp	ip, lr
   16940:	2a000022 	bcs	169d0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xac>
   16944:	e5dc3000 	ldrb	r3, [ip]
   16948:	e5dc2001 	ldrb	r2, [ip, #1]
   1694c:	e08c3003 	add	r3, ip, r3
   16950:	e153000e 	cmp	r3, lr
   16954:	8a000018 	bhi	169bc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x98>
   16958:	e2415005 	sub	r5, r1, #5
   1695c:	e16f5f15 	clz	r5, r5
   16960:	e3520004 	cmp	r2, #4
   16964:	03510005 	cmpeq	r1, #5
   16968:	e1a052a5 	lsr	r5, r5, #5
   1696c:	0a000017 	beq	169d0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xac>
   16970:	e1510002 	cmp	r1, r2
   16974:	1a000008 	bne	1699c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x78>
   16978:	ea000020 	b	16a00 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xdc>
   1697c:	e35c0004 	cmp	ip, #4
   16980:	13a04000 	movne	r4, #0
   16984:	02054001 	andeq	r4, r5, #1
   16988:	e3540000 	cmp	r4, #0
   1698c:	1a00000e 	bne	169cc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa8>
   16990:	e15c0001 	cmp	ip, r1
   16994:	0a000015 	beq	169f0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xcc>
   16998:	e1a03002 	mov	r3, r2
   1699c:	e153000e 	cmp	r3, lr
   169a0:	2a000009 	bcs	169cc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa8>
   169a4:	e5d32000 	ldrb	r2, [r3]
   169a8:	e5d3c001 	ldrb	ip, [r3, #1]
   169ac:	e0832002 	add	r2, r3, r2
   169b0:	e152000e 	cmp	r2, lr
   169b4:	9afffff0 	bls	1697c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x58>
   169b8:	e5803010 	str	r3, [r0, #16]
   169bc:	e3a020a9 	mov	r2, #169	; 0xa9
   169c0:	e59f1040 	ldr	r1, [pc, #64]	; 16a08 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xe4>
   169c4:	e59f0040 	ldr	r0, [pc, #64]	; 16a0c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xe8>
   169c8:	eb00332c 	bl	23680 <assertion_failed>
   169cc:	e5803010 	str	r3, [r0, #16]
   169d0:	e3a0c000 	mov	ip, #0
   169d4:	e580c014 	str	ip, [r0, #20]
   169d8:	e1a0000c 	mov	r0, ip
   169dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   169e0:	e3a0209f 	mov	r2, #159	; 0x9f
   169e4:	e59f101c 	ldr	r1, [pc, #28]	; 16a08 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xe4>
   169e8:	e59f0020 	ldr	r0, [pc, #32]	; 16a10 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xec>
   169ec:	eb003323 	bl	23680 <assertion_failed>
   169f0:	e1a0c003 	mov	ip, r3
   169f4:	e5802010 	str	r2, [r0, #16]
   169f8:	e580c018 	str	ip, [r0, #24]
   169fc:	eafffff4 	b	169d4 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xb0>
   16a00:	e1a02003 	mov	r2, r3
   16a04:	eafffffa 	b	169f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xd0>
   16a08:	00036dc0 	.word	0x00036dc0
   16a0c:	00036df4 	.word	0x00036df4
   16a10:	00034e1c 	.word	0x00034e1c

00016a14 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   16a14:	e5d03008 	ldrb	r3, [r0, #8]
   16a18:	e92d4010 	push	{r4, lr}
   16a1c:	e3530000 	cmp	r3, #0
   16a20:	0a000006 	beq	16a40 <CUSBConfigurationParser::GetCurrentDescriptor()+0x2c>
   16a24:	e5900014 	ldr	r0, [r0, #20]
   16a28:	e3500000 	cmp	r0, #0
   16a2c:	18bd8010 	popne	{r4, pc}
   16a30:	e3a020c8 	mov	r2, #200	; 0xc8
   16a34:	e59f1014 	ldr	r1, [pc, #20]	; 16a50 <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   16a38:	e59f0014 	ldr	r0, [pc, #20]	; 16a54 <CUSBConfigurationParser::GetCurrentDescriptor()+0x40>
   16a3c:	eb00330f 	bl	23680 <assertion_failed>
   16a40:	e3a020c7 	mov	r2, #199	; 0xc7
   16a44:	e59f1004 	ldr	r1, [pc, #4]	; 16a50 <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   16a48:	e59f0008 	ldr	r0, [pc, #8]	; 16a58 <CUSBConfigurationParser::GetCurrentDescriptor()+0x44>
   16a4c:	eb00330b 	bl	23680 <assertion_failed>
   16a50:	00036dc0 	.word	0x00036dc0
   16a54:	00036e10 	.word	0x00036e10
   16a58:	00034e1c 	.word	0x00034e1c

00016a5c <CUSBConfigurationParser::Error(char const*) const>:
   16a5c:	e92d4030 	push	{r4, r5, lr}
   16a60:	e2515000 	subs	r5, r1, #0
   16a64:	e24dd00c 	sub	sp, sp, #12
   16a68:	0a00000e 	beq	16aa8 <CUSBConfigurationParser::Error(char const*) const+0x4c>
   16a6c:	e1a04000 	mov	r4, r0
   16a70:	eb003bf5 	bl	25a4c <CLogger::Get()>
   16a74:	e5941000 	ldr	r1, [r4]
   16a78:	e5942018 	ldr	r2, [r4, #24]
   16a7c:	e59f3034 	ldr	r3, [pc, #52]	; 16ab8 <CUSBConfigurationParser::Error(char const*) const+0x5c>
   16a80:	e0422001 	sub	r2, r2, r1
   16a84:	e58d2000 	str	r2, [sp]
   16a88:	e1a01005 	mov	r1, r5
   16a8c:	e3a02001 	mov	r2, #1
   16a90:	eb003b2a 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16a94:	e8940003 	ldm	r4, {r0, r1}
   16a98:	e1a02005 	mov	r2, r5
   16a9c:	e28dd00c 	add	sp, sp, #12
   16aa0:	e8bd4030 	pop	{r4, r5, lr}
   16aa4:	ea003469 	b	23c50 <debug_hexdump(void const*, unsigned int, char const*)>
   16aa8:	e3a020cf 	mov	r2, #207	; 0xcf
   16aac:	e59f1008 	ldr	r1, [pc, #8]	; 16abc <CUSBConfigurationParser::Error(char const*) const+0x60>
   16ab0:	e59f0008 	ldr	r0, [pc, #8]	; 16ac0 <CUSBConfigurationParser::Error(char const*) const+0x64>
   16ab4:	eb0032f1 	bl	23680 <assertion_failed>
   16ab8:	00036e2c 	.word	0x00036e2c
   16abc:	00036dc0 	.word	0x00036dc0
   16ac0:	00035878 	.word	0x00035878

00016ac4 <CUSBGamePadDevice::GetInitialState()>:
   16ac4:	e2800024 	add	r0, r0, #36	; 0x24
   16ac8:	e12fff1e 	bx	lr

00016acc <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   16acc:	e3510000 	cmp	r1, #0
   16ad0:	012fff1e 	bxeq	lr
   16ad4:	e280cf4a 	add	ip, r0, #296	; 0x128
   16ad8:	e1dcc0b0 	ldrh	ip, [ip]
   16adc:	e92d4070 	push	{r4, r5, r6, lr}
   16ae0:	e15c0002 	cmp	ip, r2
   16ae4:	e1a04000 	mov	r4, r0
   16ae8:	18bd8070 	popne	{r4, r5, r6, pc}
   16aec:	e5902124 	ldr	r2, [r0, #292]	; 0x124
   16af0:	e3520000 	cmp	r2, #0
   16af4:	08bd8070 	popeq	{r4, r5, r6, pc}
   16af8:	e1a05000 	mov	r5, r0
   16afc:	e4953024 	ldr	r3, [r5], #36	; 0x24
   16b00:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   16b04:	e12fff33 	blx	r3
   16b08:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   16b0c:	e1a01005 	mov	r1, r5
   16b10:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   16b14:	e2400001 	sub	r0, r0, #1
   16b18:	e8bd4070 	pop	{r4, r5, r6, lr}
   16b1c:	e12fff13 	bx	r3

00016b20 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   16b20:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   16b24:	e92d4010 	push	{r4, lr}
   16b28:	e3530000 	cmp	r3, #0
   16b2c:	1a000006 	bne	16b4c <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x2c>
   16b30:	e3510000 	cmp	r1, #0
   16b34:	e5801124 	str	r1, [r0, #292]	; 0x124
   16b38:	18bd8010 	popne	{r4, pc}
   16b3c:	e3a0204d 	mov	r2, #77	; 0x4d
   16b40:	e59f1014 	ldr	r1, [pc, #20]	; 16b5c <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   16b44:	e59f0014 	ldr	r0, [pc, #20]	; 16b60 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x40>
   16b48:	eb0032cc 	bl	23680 <assertion_failed>
   16b4c:	e3a0204b 	mov	r2, #75	; 0x4b
   16b50:	e59f1004 	ldr	r1, [pc, #4]	; 16b5c <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   16b54:	e59f0008 	ldr	r0, [pc, #8]	; 16b64 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x44>
   16b58:	eb0032c8 	bl	23680 <assertion_failed>
   16b5c:	00036eb8 	.word	0x00036eb8
   16b60:	00036ee0 	.word	0x00036ee0
   16b64:	00036ec8 	.word	0x00036ec8

00016b68 <CUSBGamePadDevice::Configure()>:
   16b68:	e92d4030 	push	{r4, r5, lr}
   16b6c:	e2803f4a 	add	r3, r0, #296	; 0x128
   16b70:	e1d310b0 	ldrh	r1, [r3]
   16b74:	e24dd00c 	sub	sp, sp, #12
   16b78:	e3510000 	cmp	r1, #0
   16b7c:	0a00001a 	beq	16bec <CUSBGamePadDevice::Configure()+0x84>
   16b80:	e1a04000 	mov	r4, r0
   16b84:	ebffe81b 	bl	10bf8 <CUSBHIDDevice::Configure(unsigned int)>
   16b88:	e2505000 	subs	r5, r0, #0
   16b8c:	0a00000e 	beq	16bcc <CUSBGamePadDevice::Configure()+0x64>
   16b90:	e59f2064 	ldr	r2, [pc, #100]	; 16bfc <CUSBGamePadDevice::Configure()+0x94>
   16b94:	e5923000 	ldr	r3, [r2]
   16b98:	e584312c 	str	r3, [r4, #300]	; 0x12c
   16b9c:	e2833001 	add	r3, r3, #1
   16ba0:	e5823000 	str	r3, [r2]
   16ba4:	eb00358f 	bl	241e8 <CDeviceNameService::Get()>
   16ba8:	e3a03000 	mov	r3, #0
   16bac:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   16bb0:	e59f1048 	ldr	r1, [pc, #72]	; 16c00 <CUSBGamePadDevice::Configure()+0x98>
   16bb4:	e58d3000 	str	r3, [sp]
   16bb8:	e1a03004 	mov	r3, r4
   16bbc:	eb003596 	bl	2421c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   16bc0:	e1a00005 	mov	r0, r5
   16bc4:	e28dd00c 	add	sp, sp, #12
   16bc8:	e8bd8030 	pop	{r4, r5, pc}
   16bcc:	eb003b9e 	bl	25a4c <CLogger::Get()>
   16bd0:	e59f302c 	ldr	r3, [pc, #44]	; 16c04 <CUSBGamePadDevice::Configure()+0x9c>
   16bd4:	e3a02001 	mov	r2, #1
   16bd8:	e59f1028 	ldr	r1, [pc, #40]	; 16c08 <CUSBGamePadDevice::Configure()+0xa0>
   16bdc:	eb003ad7 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16be0:	e1a00005 	mov	r0, r5
   16be4:	e28dd00c 	add	sp, sp, #12
   16be8:	e8bd8030 	pop	{r4, r5, pc}
   16bec:	e3a02035 	mov	r2, #53	; 0x35
   16bf0:	e59f1014 	ldr	r1, [pc, #20]	; 16c0c <CUSBGamePadDevice::Configure()+0xa4>
   16bf4:	e59f0014 	ldr	r0, [pc, #20]	; 16c10 <CUSBGamePadDevice::Configure()+0xa8>
   16bf8:	eb0032a0 	bl	23680 <assertion_failed>
   16bfc:	0003ded0 	.word	0x0003ded0
   16c00:	00036e64 	.word	0x00036e64
   16c04:	00036044 	.word	0x00036044
   16c08:	00036e5c 	.word	0x00036e5c
   16c0c:	00036eb8 	.word	0x00036eb8
   16c10:	00035b40 	.word	0x00035b40

00016c14 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   16c14:	e92d4010 	push	{r4, lr}
   16c18:	e3a02000 	mov	r2, #0
   16c1c:	e1a04000 	mov	r4, r0
   16c20:	ebffe7b5 	bl	10afc <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   16c24:	e3a03000 	mov	r3, #0
   16c28:	e59f1028 	ldr	r1, [pc, #40]	; 16c58 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x44>
   16c2c:	e2842f4a 	add	r2, r4, #296	; 0x128
   16c30:	e5841000 	str	r1, [r4]
   16c34:	e5843124 	str	r3, [r4, #292]	; 0x124
   16c38:	e1a01003 	mov	r1, r3
   16c3c:	e1c230b0 	strh	r3, [r2]
   16c40:	e2840024 	add	r0, r4, #36	; 0x24
   16c44:	e584312c 	str	r3, [r4, #300]	; 0x12c
   16c48:	e3a02c01 	mov	r2, #256	; 0x100
   16c4c:	eb004858 	bl	28db4 <memset>
   16c50:	e1a00004 	mov	r0, r4
   16c54:	e8bd8010 	pop	{r4, pc}
   16c58:	00036e74 	.word	0x00036e74

00016c5c <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   16c5c:	e92d4070 	push	{r4, r5, r6, lr}
   16c60:	e3a06000 	mov	r6, #0
   16c64:	e1a04000 	mov	r4, r0
   16c68:	e59f502c 	ldr	r5, [pc, #44]	; 16c9c <CUSBGamePadDevice::~CUSBGamePadDevice()+0x40>
   16c6c:	e5806124 	str	r6, [r0, #292]	; 0x124
   16c70:	e2853018 	add	r3, r5, #24
   16c74:	e5803000 	str	r3, [r0]
   16c78:	eb00355a 	bl	241e8 <CDeviceNameService::Get()>
   16c7c:	e1a03006 	mov	r3, r6
   16c80:	e2851008 	add	r1, r5, #8
   16c84:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   16c88:	eb00357d 	bl	24284 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   16c8c:	e1a00004 	mov	r0, r4
   16c90:	ebffe7ad 	bl	10b4c <CUSBHIDDevice::~CUSBHIDDevice()>
   16c94:	e1a00004 	mov	r0, r4
   16c98:	e8bd8070 	pop	{r4, r5, r6, pc}
   16c9c:	00036e5c 	.word	0x00036e5c

00016ca0 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   16ca0:	e92d4010 	push	{r4, lr}
   16ca4:	e1a04000 	mov	r4, r0
   16ca8:	ebffffeb 	bl	16c5c <CUSBGamePadDevice::~CUSBGamePadDevice()>
   16cac:	e1a00004 	mov	r0, r4
   16cb0:	e3a01e13 	mov	r1, #304	; 0x130
   16cb4:	eb004c9c 	bl	29f2c <operator delete(void*, unsigned int)>
   16cb8:	e1a00004 	mov	r0, r4
   16cbc:	e8bd8010 	pop	{r4, pc}

00016cc0 <CUSBString::CUSBString(CUSBDevice*)>:
   16cc0:	e3a03000 	mov	r3, #0
   16cc4:	e92d4070 	push	{r4, r5, r6, lr}
   16cc8:	e880000a 	stm	r0, {r1, r3}
   16ccc:	e1a04000 	mov	r4, r0
   16cd0:	e3a00010 	mov	r0, #16
   16cd4:	eb004c86 	bl	29ef4 <operator new(unsigned int)>
   16cd8:	e1a05000 	mov	r5, r0
   16cdc:	eb003f40 	bl	269e4 <CString::CString()>
   16ce0:	e5943000 	ldr	r3, [r4]
   16ce4:	e5845008 	str	r5, [r4, #8]
   16ce8:	e3530000 	cmp	r3, #0
   16cec:	0a000001 	beq	16cf8 <CUSBString::CUSBString(CUSBDevice*)+0x38>
   16cf0:	e1a00004 	mov	r0, r4
   16cf4:	e8bd8070 	pop	{r4, r5, r6, pc}
   16cf8:	e3a02023 	mov	r2, #35	; 0x23
   16cfc:	e59f1004 	ldr	r1, [pc, #4]	; 16d08 <CUSBString::CUSBString(CUSBDevice*)+0x48>
   16d00:	e59f0004 	ldr	r0, [pc, #4]	; 16d0c <CUSBString::CUSBString(CUSBDevice*)+0x4c>
   16d04:	eb00325d 	bl	23680 <assertion_failed>
   16d08:	00036ef8 	.word	0x00036ef8
   16d0c:	0003503c 	.word	0x0003503c

00016d10 <CUSBString::CUSBString(CUSBString*)>:
   16d10:	e3a03000 	mov	r3, #0
   16d14:	e92d4070 	push	{r4, r5, r6, lr}
   16d18:	e5803004 	str	r3, [r0, #4]
   16d1c:	e1a04000 	mov	r4, r0
   16d20:	e3a00010 	mov	r0, #16
   16d24:	e1a05001 	mov	r5, r1
   16d28:	eb004c71 	bl	29ef4 <operator new(unsigned int)>
   16d2c:	e1a06000 	mov	r6, r0
   16d30:	eb003f2b 	bl	269e4 <CString::CString()>
   16d34:	e3550000 	cmp	r5, #0
   16d38:	e5846008 	str	r6, [r4, #8]
   16d3c:	0a000012 	beq	16d8c <CUSBString::CUSBString(CUSBString*)+0x7c>
   16d40:	e895000c 	ldm	r5, {r2, r3}
   16d44:	e3530000 	cmp	r3, #0
   16d48:	e5842000 	str	r2, [r4]
   16d4c:	0a000008 	beq	16d74 <CUSBString::CUSBString(CUSBString*)+0x64>
   16d50:	e5d30000 	ldrb	r0, [r3]
   16d54:	eb004c67 	bl	29ef8 <operator new[](unsigned int)>
   16d58:	e5840004 	str	r0, [r4, #4]
   16d5c:	e5951004 	ldr	r1, [r5, #4]
   16d60:	e5d12000 	ldrb	r2, [r1]
   16d64:	eb004a89 	bl	29790 <memcpy>
   16d68:	e5943008 	ldr	r3, [r4, #8]
   16d6c:	e3530000 	cmp	r3, #0
   16d70:	0a000009 	beq	16d9c <CUSBString::CUSBString(CUSBString*)+0x8c>
   16d74:	e5953008 	ldr	r3, [r5, #8]
   16d78:	e3530000 	cmp	r3, #0
   16d7c:	0a00000a 	beq	16dac <CUSBString::CUSBString(CUSBString*)+0x9c>
   16d80:	e5843008 	str	r3, [r4, #8]
   16d84:	e1a00004 	mov	r0, r4
   16d88:	e8bd8070 	pop	{r4, r5, r6, pc}
   16d8c:	e3a0202b 	mov	r2, #43	; 0x2b
   16d90:	e59f1024 	ldr	r1, [pc, #36]	; 16dbc <CUSBString::CUSBString(CUSBString*)+0xac>
   16d94:	e59f0024 	ldr	r0, [pc, #36]	; 16dc0 <CUSBString::CUSBString(CUSBString*)+0xb0>
   16d98:	eb003238 	bl	23680 <assertion_failed>
   16d9c:	e3a02035 	mov	r2, #53	; 0x35
   16da0:	e59f1014 	ldr	r1, [pc, #20]	; 16dbc <CUSBString::CUSBString(CUSBString*)+0xac>
   16da4:	e59f0018 	ldr	r0, [pc, #24]	; 16dc4 <CUSBString::CUSBString(CUSBString*)+0xb4>
   16da8:	eb003234 	bl	23680 <assertion_failed>
   16dac:	e3a02036 	mov	r2, #54	; 0x36
   16db0:	e59f1004 	ldr	r1, [pc, #4]	; 16dbc <CUSBString::CUSBString(CUSBString*)+0xac>
   16db4:	e59f000c 	ldr	r0, [pc, #12]	; 16dc8 <CUSBString::CUSBString(CUSBString*)+0xb8>
   16db8:	eb003230 	bl	23680 <assertion_failed>
   16dbc:	00036ef8 	.word	0x00036ef8
   16dc0:	00035534 	.word	0x00035534
   16dc4:	00036f08 	.word	0x00036f08
   16dc8:	00036f18 	.word	0x00036f18

00016dcc <CUSBString::~CUSBString()>:
   16dcc:	e92d4010 	push	{r4, lr}
   16dd0:	e1a04000 	mov	r4, r0
   16dd4:	e5900008 	ldr	r0, [r0, #8]
   16dd8:	e3500000 	cmp	r0, #0
   16ddc:	0a000002 	beq	16dec <CUSBString::~CUSBString()+0x20>
   16de0:	e5903000 	ldr	r3, [r0]
   16de4:	e5933004 	ldr	r3, [r3, #4]
   16de8:	e12fff33 	blx	r3
   16dec:	e3a03000 	mov	r3, #0
   16df0:	e5940004 	ldr	r0, [r4, #4]
   16df4:	e5843008 	str	r3, [r4, #8]
   16df8:	e1500003 	cmp	r0, r3
   16dfc:	0a000000 	beq	16e04 <CUSBString::~CUSBString()+0x38>
   16e00:	eb004c43 	bl	29f14 <operator delete[](void*)>
   16e04:	e1a00004 	mov	r0, r4
   16e08:	e8bd8010 	pop	{r4, pc}

00016e0c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   16e0c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e10:	e2516000 	subs	r6, r1, #0
   16e14:	e28db020 	add	fp, sp, #32
   16e18:	e24dd014 	sub	sp, sp, #20
   16e1c:	0a000052 	beq	16f6c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x160>
   16e20:	e1a04000 	mov	r4, r0
   16e24:	e5900004 	ldr	r0, [r0, #4]
   16e28:	e1a07002 	mov	r7, r2
   16e2c:	e3500000 	cmp	r0, #0
   16e30:	0a000000 	beq	16e38 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   16e34:	eb004c36 	bl	29f14 <operator delete[](void*)>
   16e38:	e3a00004 	mov	r0, #4
   16e3c:	eb004c2d 	bl	29ef8 <operator new[](unsigned int)>
   16e40:	e5943000 	ldr	r3, [r4]
   16e44:	e5840004 	str	r0, [r4, #4]
   16e48:	e3530000 	cmp	r3, #0
   16e4c:	0a00004a 	beq	16f7c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x170>
   16e50:	e1a00003 	mov	r0, r3
   16e54:	ebffd7b6 	bl	cd34 <CUSBDevice::GetHost() const>
   16e58:	e1a05000 	mov	r5, r0
   16e5c:	e5940000 	ldr	r0, [r4]
   16e60:	ebffd7a8 	bl	cd08 <CUSBDevice::GetEndpoint0() const>
   16e64:	e3a08080 	mov	r8, #128	; 0x80
   16e68:	e3a02004 	mov	r2, #4
   16e6c:	e5943004 	ldr	r3, [r4, #4]
   16e70:	e1a01000 	mov	r1, r0
   16e74:	e98d0104 	stmib	sp, {r2, r8}
   16e78:	e58d3000 	str	r3, [sp]
   16e7c:	e58d700c 	str	r7, [sp, #12]
   16e80:	e1a00005 	mov	r0, r5
   16e84:	e1a03006 	mov	r3, r6
   16e88:	e3a02003 	mov	r2, #3
   16e8c:	ebffe937 	bl	11370 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   16e90:	e3500000 	cmp	r0, #0
   16e94:	ba000008 	blt	16ebc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   16e98:	e5940004 	ldr	r0, [r4, #4]
   16e9c:	e5d05000 	ldrb	r5, [r0]
   16ea0:	e3550001 	cmp	r5, #1
   16ea4:	da000004 	ble	16ebc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   16ea8:	e3150001 	tst	r5, #1
   16eac:	1a000002 	bne	16ebc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   16eb0:	e5d09001 	ldrb	r9, [r0, #1]
   16eb4:	e3590003 	cmp	r9, #3
   16eb8:	0a000002 	beq	16ec8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xbc>
   16ebc:	e3a00000 	mov	r0, #0
   16ec0:	e24bd020 	sub	sp, fp, #32
   16ec4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ec8:	e3550004 	cmp	r5, #4
   16ecc:	ca00002e 	bgt	16f8c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x180>
   16ed0:	e3550002 	cmp	r5, #2
   16ed4:	0a000049 	beq	17000 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1f4>
   16ed8:	e2455002 	sub	r5, r5, #2
   16edc:	e1a0e0c5 	asr	lr, r5, #1
   16ee0:	e28e3008 	add	r3, lr, #8
   16ee4:	e3c33007 	bic	r3, r3, #7
   16ee8:	e35e0000 	cmp	lr, #0
   16eec:	e04dd003 	sub	sp, sp, r3
   16ef0:	e28d6010 	add	r6, sp, #16
   16ef4:	13a02000 	movne	r2, #0
   16ef8:	128d100f 	addne	r1, sp, #15
   16efc:	0a00000a 	beq	16f2c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x120>
   16f00:	e080c082 	add	ip, r0, r2, lsl #1
   16f04:	e5dc3002 	ldrb	r3, [ip, #2]
   16f08:	e5dcc003 	ldrb	ip, [ip, #3]
   16f0c:	e2822001 	add	r2, r2, #1
   16f10:	e183340c 	orr	r3, r3, ip, lsl #8
   16f14:	e243c020 	sub	ip, r3, #32
   16f18:	e35c005e 	cmp	ip, #94	; 0x5e
   16f1c:	83a0305f 	movhi	r3, #95	; 0x5f
   16f20:	e15e0002 	cmp	lr, r2
   16f24:	e5e13001 	strb	r3, [r1, #1]!
   16f28:	1afffff4 	bne	16f00 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xf4>
   16f2c:	e3a03000 	mov	r3, #0
   16f30:	e5940008 	ldr	r0, [r4, #8]
   16f34:	e7c630c5 	strb	r3, [r6, r5, asr #1]
   16f38:	e1500003 	cmp	r0, r3
   16f3c:	0a000002 	beq	16f4c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x140>
   16f40:	e5903000 	ldr	r3, [r0]
   16f44:	e5933004 	ldr	r3, [r3, #4]
   16f48:	e12fff33 	blx	r3
   16f4c:	e3a00010 	mov	r0, #16
   16f50:	eb004be7 	bl	29ef4 <operator new(unsigned int)>
   16f54:	e1a05000 	mov	r5, r0
   16f58:	e1a01006 	mov	r1, r6
   16f5c:	eb003ea6 	bl	269fc <CString::CString(char const*)>
   16f60:	e5845008 	str	r5, [r4, #8]
   16f64:	e3a00001 	mov	r0, #1
   16f68:	eaffffd4 	b	16ec0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   16f6c:	e3a02047 	mov	r2, #71	; 0x47
   16f70:	e59f1098 	ldr	r1, [pc, #152]	; 17010 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x204>
   16f74:	e59f0098 	ldr	r0, [pc, #152]	; 17014 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x208>
   16f78:	eb0031c0 	bl	23680 <assertion_failed>
   16f7c:	e3a0204d 	mov	r2, #77	; 0x4d
   16f80:	e59f1088 	ldr	r1, [pc, #136]	; 17010 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x204>
   16f84:	e59f008c 	ldr	r0, [pc, #140]	; 17018 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x20c>
   16f88:	eb0031bc 	bl	23680 <assertion_failed>
   16f8c:	e3a01002 	mov	r1, #2
   16f90:	eb004be5 	bl	29f2c <operator delete(void*, unsigned int)>
   16f94:	e1a00005 	mov	r0, r5
   16f98:	eb004bd6 	bl	29ef8 <operator new[](unsigned int)>
   16f9c:	e5840004 	str	r0, [r4, #4]
   16fa0:	e5940000 	ldr	r0, [r4]
   16fa4:	ebffd762 	bl	cd34 <CUSBDevice::GetHost() const>
   16fa8:	e1a0a000 	mov	sl, r0
   16fac:	e5940000 	ldr	r0, [r4]
   16fb0:	ebffd754 	bl	cd08 <CUSBDevice::GetEndpoint0() const>
   16fb4:	e594c004 	ldr	ip, [r4, #4]
   16fb8:	e1a01000 	mov	r1, r0
   16fbc:	e58d700c 	str	r7, [sp, #12]
   16fc0:	e1a0000a 	mov	r0, sl
   16fc4:	e98d0120 	stmib	sp, {r5, r8}
   16fc8:	e1a03006 	mov	r3, r6
   16fcc:	e1a02009 	mov	r2, r9
   16fd0:	e58dc000 	str	ip, [sp]
   16fd4:	ebffe8e5 	bl	11370 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   16fd8:	e1550000 	cmp	r5, r0
   16fdc:	1affffb6 	bne	16ebc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   16fe0:	e5940004 	ldr	r0, [r4, #4]
   16fe4:	e5d03000 	ldrb	r3, [r0]
   16fe8:	e1530005 	cmp	r3, r5
   16fec:	1affffb2 	bne	16ebc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   16ff0:	e5d03001 	ldrb	r3, [r0, #1]
   16ff4:	e3530003 	cmp	r3, #3
   16ff8:	1affffaf 	bne	16ebc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   16ffc:	eaffffb5 	b	16ed8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xcc>
   17000:	e3a02075 	mov	r2, #117	; 0x75
   17004:	e59f1004 	ldr	r1, [pc, #4]	; 17010 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x204>
   17008:	e59f000c 	ldr	r0, [pc, #12]	; 1701c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x210>
   1700c:	eb00319b 	bl	23680 <assertion_failed>
   17010:	00036ef8 	.word	0x00036ef8
   17014:	00036f30 	.word	0x00036f30
   17018:	0003503c 	.word	0x0003503c
   1701c:	00036f3c 	.word	0x00036f3c

00017020 <CUSBString::Get() const>:
   17020:	e5900008 	ldr	r0, [r0, #8]
   17024:	ea003e84 	b	26a3c <CString::operator char const*() const>

00017028 <CUSBString::GetLanguageID()>:
   17028:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1702c:	e1a05000 	mov	r5, r0
   17030:	e24dd010 	sub	sp, sp, #16
   17034:	e3a00004 	mov	r0, #4
   17038:	eb004bae 	bl	29ef8 <operator new[](unsigned int)>
   1703c:	e1a04000 	mov	r4, r0
   17040:	e5950000 	ldr	r0, [r5]
   17044:	e3500000 	cmp	r0, #0
   17048:	0a00004c 	beq	17180 <CUSBString::GetLanguageID()+0x158>
   1704c:	ebffd738 	bl	cd34 <CUSBDevice::GetHost() const>
   17050:	e1a06000 	mov	r6, r0
   17054:	e5950000 	ldr	r0, [r5]
   17058:	ebffd72a 	bl	cd08 <CUSBDevice::GetEndpoint0() const>
   1705c:	e3a07080 	mov	r7, #128	; 0x80
   17060:	e3a03000 	mov	r3, #0
   17064:	e3a02004 	mov	r2, #4
   17068:	e1a01000 	mov	r1, r0
   1706c:	e98d0084 	stmib	sp, {r2, r7}
   17070:	e58d4000 	str	r4, [sp]
   17074:	e1a00006 	mov	r0, r6
   17078:	e58d300c 	str	r3, [sp, #12]
   1707c:	e3a02003 	mov	r2, #3
   17080:	ebffe8ba 	bl	11370 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17084:	e3500000 	cmp	r0, #0
   17088:	ba000002 	blt	17098 <CUSBString::GetLanguageID()+0x70>
   1708c:	e5d46000 	ldrb	r6, [r4]
   17090:	e3560003 	cmp	r6, #3
   17094:	ca000005 	bgt	170b0 <CUSBString::GetLanguageID()+0x88>
   17098:	e1a00004 	mov	r0, r4
   1709c:	eb004b9c 	bl	29f14 <operator delete[](void*)>
   170a0:	e59f50f4 	ldr	r5, [pc, #244]	; 1719c <CUSBString::GetLanguageID()+0x174>
   170a4:	e1a00005 	mov	r0, r5
   170a8:	e28dd010 	add	sp, sp, #16
   170ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   170b0:	e2168001 	ands	r8, r6, #1
   170b4:	1afffff7 	bne	17098 <CUSBString::GetLanguageID()+0x70>
   170b8:	e5d49001 	ldrb	r9, [r4, #1]
   170bc:	e3590003 	cmp	r9, #3
   170c0:	1afffff4 	bne	17098 <CUSBString::GetLanguageID()+0x70>
   170c4:	e3560004 	cmp	r6, #4
   170c8:	0a000019 	beq	17134 <CUSBString::GetLanguageID()+0x10c>
   170cc:	e1a00004 	mov	r0, r4
   170d0:	eb004b8f 	bl	29f14 <operator delete[](void*)>
   170d4:	e1a00006 	mov	r0, r6
   170d8:	eb004b86 	bl	29ef8 <operator new[](unsigned int)>
   170dc:	e1a04000 	mov	r4, r0
   170e0:	e5950000 	ldr	r0, [r5]
   170e4:	ebffd712 	bl	cd34 <CUSBDevice::GetHost() const>
   170e8:	e1a0a000 	mov	sl, r0
   170ec:	e5950000 	ldr	r0, [r5]
   170f0:	ebffd704 	bl	cd08 <CUSBDevice::GetEndpoint0() const>
   170f4:	e58d4000 	str	r4, [sp]
   170f8:	e1a01000 	mov	r1, r0
   170fc:	e58d800c 	str	r8, [sp, #12]
   17100:	e1a0000a 	mov	r0, sl
   17104:	e98d00c0 	stmib	sp, {r6, r7}
   17108:	e1a03008 	mov	r3, r8
   1710c:	e1a02009 	mov	r2, r9
   17110:	ebffe896 	bl	11370 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17114:	e1560000 	cmp	r6, r0
   17118:	1affffde 	bne	17098 <CUSBString::GetLanguageID()+0x70>
   1711c:	e5d43000 	ldrb	r3, [r4]
   17120:	e1530006 	cmp	r3, r6
   17124:	1affffdb 	bne	17098 <CUSBString::GetLanguageID()+0x70>
   17128:	e5d43001 	ldrb	r3, [r4, #1]
   1712c:	e3530003 	cmp	r3, #3
   17130:	1affffd8 	bne	17098 <CUSBString::GetLanguageID()+0x70>
   17134:	e3a02000 	mov	r2, #0
   17138:	e2466002 	sub	r6, r6, #2
   1713c:	e59f5058 	ldr	r5, [pc, #88]	; 1719c <CUSBString::GetLanguageID()+0x174>
   17140:	e1a060c6 	asr	r6, r6, #1
   17144:	e0841082 	add	r1, r4, r2, lsl #1
   17148:	e5d13002 	ldrb	r3, [r1, #2]
   1714c:	e5d11003 	ldrb	r1, [r1, #3]
   17150:	e1833401 	orr	r3, r3, r1, lsl #8
   17154:	e1530005 	cmp	r3, r5
   17158:	0a00000c 	beq	17190 <CUSBString::GetLanguageID()+0x168>
   1715c:	e2822001 	add	r2, r2, #1
   17160:	e1560002 	cmp	r6, r2
   17164:	8afffff6 	bhi	17144 <CUSBString::GetLanguageID()+0x11c>
   17168:	e5d43002 	ldrb	r3, [r4, #2]
   1716c:	e5d42003 	ldrb	r2, [r4, #3]
   17170:	e1a00004 	mov	r0, r4
   17174:	e1835402 	orr	r5, r3, r2, lsl #8
   17178:	eb004b65 	bl	29f14 <operator delete[](void*)>
   1717c:	eaffffc8 	b	170a4 <CUSBString::GetLanguageID()+0x7c>
   17180:	e3a0209a 	mov	r2, #154	; 0x9a
   17184:	e59f1014 	ldr	r1, [pc, #20]	; 171a0 <CUSBString::GetLanguageID()+0x178>
   17188:	e59f0014 	ldr	r0, [pc, #20]	; 171a4 <CUSBString::GetLanguageID()+0x17c>
   1718c:	eb00313b 	bl	23680 <assertion_failed>
   17190:	e1a00004 	mov	r0, r4
   17194:	eb004b5e 	bl	29f14 <operator delete[](void*)>
   17198:	eaffffc1 	b	170a4 <CUSBString::GetLanguageID()+0x7c>
   1719c:	00000409 	.word	0x00000409
   171a0:	00036ef8 	.word	0x00036ef8
   171a4:	0003503c 	.word	0x0003503c

000171a8 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   171a8:	e92d4010 	push	{r4, lr}
   171ac:	e3a03000 	mov	r3, #0
   171b0:	e1a04000 	mov	r4, r0
   171b4:	e2800014 	add	r0, r0, #20
   171b8:	e5843000 	str	r3, [r4]
   171bc:	e5843004 	str	r3, [r4, #4]
   171c0:	e5843008 	str	r3, [r4, #8]
   171c4:	e5c4300c 	strb	r3, [r4, #12]
   171c8:	e5c4300d 	strb	r3, [r4, #13]
   171cc:	e5843010 	str	r3, [r4, #16]
   171d0:	eb000180 	bl	177d8 <CKeyMap::CKeyMap()>
   171d4:	e1a00004 	mov	r0, r4
   171d8:	e8bd8010 	pop	{r4, pc}

000171dc <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   171dc:	e92d4010 	push	{r4, lr}
   171e0:	e3a03000 	mov	r3, #0
   171e4:	e1a04000 	mov	r4, r0
   171e8:	e2800014 	add	r0, r0, #20
   171ec:	e5843000 	str	r3, [r4]
   171f0:	e5843004 	str	r3, [r4, #4]
   171f4:	e5843008 	str	r3, [r4, #8]
   171f8:	eb0000b2 	bl	174c8 <CKeyMap::~CKeyMap()>
   171fc:	e1a00004 	mov	r0, r4
   17200:	e8bd8010 	pop	{r4, pc}

00017204 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   17204:	e3510000 	cmp	r1, #0
   17208:	0a000001 	beq	17214 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x10>
   1720c:	e5801000 	str	r1, [r0]
   17210:	e12fff1e 	bx	lr
   17214:	e92d4010 	push	{r4, lr}
   17218:	e3a0202f 	mov	r2, #47	; 0x2f
   1721c:	e59f1004 	ldr	r1, [pc, #4]	; 17228 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x24>
   17220:	e59f0004 	ldr	r0, [pc, #4]	; 1722c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x28>
   17224:	eb003115 	bl	23680 <assertion_failed>
   17228:	00036f58 	.word	0x00036f58
   1722c:	00036f70 	.word	0x00036f70

00017230 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   17230:	e3510000 	cmp	r1, #0
   17234:	0a000001 	beq	17240 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x10>
   17238:	e5801004 	str	r1, [r0, #4]
   1723c:	e12fff1e 	bx	lr
   17240:	e92d4010 	push	{r4, lr}
   17244:	e3a02035 	mov	r2, #53	; 0x35
   17248:	e59f1004 	ldr	r1, [pc, #4]	; 17254 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x24>
   1724c:	e59f0004 	ldr	r0, [pc, #4]	; 17258 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x28>
   17250:	eb00310a 	bl	23680 <assertion_failed>
   17254:	00036f58 	.word	0x00036f58
   17258:	00036f88 	.word	0x00036f88

0001725c <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   1725c:	e3510000 	cmp	r1, #0
   17260:	0a000001 	beq	1726c <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x10>
   17264:	e5801008 	str	r1, [r0, #8]
   17268:	e12fff1e 	bx	lr
   1726c:	e92d4010 	push	{r4, lr}
   17270:	e3a0203b 	mov	r2, #59	; 0x3b
   17274:	e59f1004 	ldr	r1, [pc, #4]	; 17280 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x24>
   17278:	e59f0004 	ldr	r0, [pc, #4]	; 17284 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x28>
   1727c:	eb0030ff 	bl	23680 <assertion_failed>
   17280:	00036f58 	.word	0x00036f58
   17284:	00036fa4 	.word	0x00036fa4

00017288 <CKeyboardBehaviour::GetLEDStatus() const>:
   17288:	e2800014 	add	r0, r0, #20
   1728c:	ea000124 	b	17724 <CKeyMap::GetLEDStatus() const>

00017290 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   17290:	e92d4070 	push	{r4, r5, r6, lr}
   17294:	e5d0600c 	ldrb	r6, [r0, #12]
   17298:	e2805014 	add	r5, r0, #20
   1729c:	e24dd008 	sub	sp, sp, #8
   172a0:	e1a04000 	mov	r4, r0
   172a4:	e1a02006 	mov	r2, r6
   172a8:	e1a00005 	mov	r0, r5
   172ac:	eb0000a9 	bl	17558 <CKeyMap::Translate(unsigned char, unsigned char)>
   172b0:	e2403e13 	sub	r3, r0, #304	; 0x130
   172b4:	e2433003 	sub	r3, r3, #3
   172b8:	e353000f 	cmp	r3, #15
   172bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   172c0:	ea00001d 	b	1733c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xac>
   172c4:	0001731c 	.word	0x0001731c
   172c8:	0001731c 	.word	0x0001731c
   172cc:	0001731c 	.word	0x0001731c
   172d0:	00017304 	.word	0x00017304
   172d4:	00017304 	.word	0x00017304
   172d8:	00017304 	.word	0x00017304
   172dc:	00017304 	.word	0x00017304
   172e0:	00017304 	.word	0x00017304
   172e4:	00017304 	.word	0x00017304
   172e8:	00017304 	.word	0x00017304
   172ec:	00017304 	.word	0x00017304
   172f0:	00017304 	.word	0x00017304
   172f4:	00017304 	.word	0x00017304
   172f8:	00017304 	.word	0x00017304
   172fc:	00017304 	.word	0x00017304
   17300:	00017324 	.word	0x00017324
   17304:	e5943004 	ldr	r3, [r4, #4]
   17308:	e3530000 	cmp	r3, #0
   1730c:	0a000002 	beq	1731c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   17310:	e2400f4d 	sub	r0, r0, #308	; 0x134
   17314:	e2400002 	sub	r0, r0, #2
   17318:	e12fff33 	blx	r3
   1731c:	e28dd008 	add	sp, sp, #8
   17320:	e8bd8070 	pop	{r4, r5, r6, pc}
   17324:	e5943008 	ldr	r3, [r4, #8]
   17328:	e3530000 	cmp	r3, #0
   1732c:	0afffffa 	beq	1731c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   17330:	e12fff33 	blx	r3
   17334:	e28dd008 	add	sp, sp, #8
   17338:	e8bd8070 	pop	{r4, r5, r6, pc}
   1733c:	e1a01000 	mov	r1, r0
   17340:	e1a02006 	mov	r2, r6
   17344:	e1a00005 	mov	r0, r5
   17348:	e28d3004 	add	r3, sp, #4
   1734c:	eb0000c4 	bl	17664 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   17350:	e3500000 	cmp	r0, #0
   17354:	0afffff0 	beq	1731c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   17358:	e5943000 	ldr	r3, [r4]
   1735c:	e3530000 	cmp	r3, #0
   17360:	0affffed 	beq	1731c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   17364:	e12fff33 	blx	r3
   17368:	e28dd008 	add	sp, sp, #8
   1736c:	e8bd8070 	pop	{r4, r5, r6, pc}

00017370 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   17370:	e241c080 	sub	ip, r1, #128	; 0x80
   17374:	e6ef307c 	uxtb	r3, ip
   17378:	e3530007 	cmp	r3, #7
   1737c:	e1a03000 	mov	r3, r0
   17380:	8a000004 	bhi	17398 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x28>
   17384:	e3a01001 	mov	r1, #1
   17388:	e5d0200c 	ldrb	r2, [r0, #12]
   1738c:	e182cc11 	orr	ip, r2, r1, lsl ip
   17390:	e5c0c00c 	strb	ip, [r0, #12]
   17394:	e12fff1e 	bx	lr
   17398:	e5d0c00d 	ldrb	ip, [r0, #13]
   1739c:	e15c0001 	cmp	ip, r1
   173a0:	012fff1e 	bxeq	lr
   173a4:	e5c3100d 	strb	r1, [r3, #13]
   173a8:	eaffffb8 	b	17290 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

000173ac <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   173ac:	e2413080 	sub	r3, r1, #128	; 0x80
   173b0:	e6ef2073 	uxtb	r2, r3
   173b4:	e3520007 	cmp	r2, #7
   173b8:	8a000004 	bhi	173d0 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x24>
   173bc:	e3a01001 	mov	r1, #1
   173c0:	e5d0200c 	ldrb	r2, [r0, #12]
   173c4:	e1c23311 	bic	r3, r2, r1, lsl r3
   173c8:	e5c0300c 	strb	r3, [r0, #12]
   173cc:	e12fff1e 	bx	lr
   173d0:	e5d0300d 	ldrb	r3, [r0, #13]
   173d4:	e1530001 	cmp	r3, r1
   173d8:	112fff1e 	bxne	lr
   173dc:	e5903010 	ldr	r3, [r0, #16]
   173e0:	e92d4010 	push	{r4, lr}
   173e4:	e3530000 	cmp	r3, #0
   173e8:	e1a04000 	mov	r4, r0
   173ec:	1a000002 	bne	173fc <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   173f0:	e3a03000 	mov	r3, #0
   173f4:	e5c4300d 	strb	r3, [r4, #13]
   173f8:	e8bd8010 	pop	{r4, pc}
   173fc:	eb00465f 	bl	28d80 <CTimer::Get()>
   17400:	e5941010 	ldr	r1, [r4, #16]
   17404:	eb0044ec 	bl	287bc <CTimer::CancelKernelTimer(unsigned int)>
   17408:	e3a03000 	mov	r3, #0
   1740c:	e5843010 	str	r3, [r4, #16]
   17410:	eafffff6 	b	173f0 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

00017414 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   17414:	e92d4010 	push	{r4, lr}
   17418:	e5903010 	ldr	r3, [r0, #16]
   1741c:	e24dd008 	sub	sp, sp, #8
   17420:	e1530001 	cmp	r3, r1
   17424:	1a000013 	bne	17478 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x64>
   17428:	e5d0100d 	ldrb	r1, [r0, #13]
   1742c:	e1a04000 	mov	r4, r0
   17430:	e3510000 	cmp	r1, #0
   17434:	1a000001 	bne	17440 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x2c>
   17438:	e28dd008 	add	sp, sp, #8
   1743c:	e8bd8010 	pop	{r4, pc}
   17440:	ebffff92 	bl	17290 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   17444:	eb00464d 	bl	28d80 <CTimer::Get()>
   17448:	e58d4000 	str	r4, [sp]
   1744c:	e3a03000 	mov	r3, #0
   17450:	e59f2030 	ldr	r2, [pc, #48]	; 17488 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x74>
   17454:	e3a01008 	mov	r1, #8
   17458:	eb004488 	bl	28680 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1745c:	e3500000 	cmp	r0, #0
   17460:	e5840010 	str	r0, [r4, #16]
   17464:	1afffff3 	bne	17438 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x24>
   17468:	e3a020b7 	mov	r2, #183	; 0xb7
   1746c:	e59f1018 	ldr	r1, [pc, #24]	; 1748c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   17470:	e59f0018 	ldr	r0, [pc, #24]	; 17490 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x7c>
   17474:	eb003081 	bl	23680 <assertion_failed>
   17478:	e3a020b0 	mov	r2, #176	; 0xb0
   1747c:	e59f1008 	ldr	r1, [pc, #8]	; 1748c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   17480:	e59f000c 	ldr	r0, [pc, #12]	; 17494 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x80>
   17484:	eb00307d 	bl	23680 <assertion_failed>
   17488:	00017498 	.word	0x00017498
   1748c:	00036f58 	.word	0x00036f58
   17490:	00036468 	.word	0x00036468
   17494:	00036fbc 	.word	0x00036fbc

00017498 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   17498:	e3520000 	cmp	r2, #0
   1749c:	0a000002 	beq	174ac <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x14>
   174a0:	e1a01000 	mov	r1, r0
   174a4:	e1a00002 	mov	r0, r2
   174a8:	eaffffd9 	b	17414 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   174ac:	e92d4010 	push	{r4, lr}
   174b0:	e3a020be 	mov	r2, #190	; 0xbe
   174b4:	e59f1004 	ldr	r1, [pc, #4]	; 174c0 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x28>
   174b8:	e59f0004 	ldr	r0, [pc, #4]	; 174c4 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x2c>
   174bc:	eb00306f 	bl	23680 <assertion_failed>
   174c0:	00036f58 	.word	0x00036f58
   174c4:	0003466c 	.word	0x0003466c

000174c8 <CKeyMap::~CKeyMap()>:
   174c8:	e12fff1e 	bx	lr

000174cc <CKeyMap::ClearTable(unsigned char)>:
   174cc:	e3510003 	cmp	r1, #3
   174d0:	ca000009 	bgt	174fc <CKeyMap::ClearTable(unsigned char)+0x30>
   174d4:	e3a0c000 	mov	ip, #0
   174d8:	e1a03081 	lsl	r3, r1, #1
   174dc:	e2832b01 	add	r2, r3, #1024	; 0x400
   174e0:	e0802002 	add	r2, r0, r2
   174e4:	e0803003 	add	r3, r0, r3
   174e8:	e0c3c0b8 	strh	ip, [r3], #8
   174ec:	e1530002 	cmp	r3, r2
   174f0:	1afffffc 	bne	174e8 <CKeyMap::ClearTable(unsigned char)+0x1c>
   174f4:	e3a00001 	mov	r0, #1
   174f8:	e12fff1e 	bx	lr
   174fc:	e3a00000 	mov	r0, #0
   17500:	e12fff1e 	bx	lr

00017504 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   17504:	e16fcf12 	clz	ip, r2
   17508:	e1a0c2ac 	lsr	ip, ip, #5
   1750c:	e3510003 	cmp	r1, #3
   17510:	c38cc001 	orrgt	ip, ip, #1
   17514:	e35c0000 	cmp	ip, #0
   17518:	1a00000a 	bne	17548 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>
   1751c:	e352007f 	cmp	r2, #127	; 0x7f
   17520:	ca000009 	bgt	1754c <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x48>
   17524:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17528:	e59fe024 	ldr	lr, [pc, #36]	; 17554 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x50>
   1752c:	e153000e 	cmp	r3, lr
   17530:	d3a0c001 	movle	ip, #1
   17534:	d0811102 	addle	r1, r1, r2, lsl #2
   17538:	d1a01081 	lslle	r1, r1, #1
   1753c:	d18030b1 	strhle	r3, [r0, r1]
   17540:	e1a0000c 	mov	r0, ip
   17544:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17548:	e3a0c000 	mov	ip, #0
   1754c:	e1a0000c 	mov	r0, ip
   17550:	e12fff1e 	bx	lr
   17554:	00000132 	.word	0x00000132

00017558 <CKeyMap::Translate(unsigned char, unsigned char)>:
   17558:	e6af3071 	sxtb	r3, r1
   1755c:	e3530000 	cmp	r3, #0
   17560:	da000023 	ble	175f4 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   17564:	e1a03181 	lsl	r3, r1, #3
   17568:	e19030b3 	ldrh	r3, [r0, r3]
   1756c:	e3530f42 	cmp	r3, #264	; 0x108
   17570:	0a000022 	beq	17600 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   17574:	e243cf43 	sub	ip, r3, #268	; 0x10c
   17578:	e24cc003 	sub	ip, ip, #3
   1757c:	e35c000b 	cmp	ip, #11
   17580:	8a000003 	bhi	17594 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   17584:	e3120004 	tst	r2, #4
   17588:	12833027 	addne	r3, r3, #39	; 0x27
   1758c:	16ff3073 	uxthne	r3, r3
   17590:	1a000018 	bne	175f8 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   17594:	e312008c 	tst	r2, #140	; 0x8c
   17598:	1a000015 	bne	175f4 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   1759c:	e2413053 	sub	r3, r1, #83	; 0x53
   175a0:	e3530010 	cmp	r3, #16
   175a4:	9a00001b 	bls	17618 <CKeyMap::Translate(unsigned char, unsigned char)+0xc0>
   175a8:	e3120040 	tst	r2, #64	; 0x40
   175ac:	0a000025 	beq	17648 <CKeyMap::Translate(unsigned char, unsigned char)+0xf0>
   175b0:	e3120022 	tst	r2, #34	; 0x22
   175b4:	13a03003 	movne	r3, #3
   175b8:	03a03002 	moveq	r3, #2
   175bc:	e0831101 	add	r1, r3, r1, lsl #2
   175c0:	e1a01081 	lsl	r1, r1, #1
   175c4:	e19030b1 	ldrh	r3, [r0, r1]
   175c8:	e59f2088 	ldr	r2, [pc, #136]	; 17658 <CKeyMap::Translate(unsigned char, unsigned char)+0x100>
   175cc:	e1530002 	cmp	r3, r2
   175d0:	0a000017 	beq	17634 <CKeyMap::Translate(unsigned char, unsigned char)+0xdc>
   175d4:	e3530e12 	cmp	r3, #288	; 0x120
   175d8:	0a000010 	beq	17620 <CKeyMap::Translate(unsigned char, unsigned char)+0xc8>
   175dc:	e3530f47 	cmp	r3, #284	; 0x11c
   175e0:	05d02400 	ldrbeq	r2, [r0, #1024]	; 0x400
   175e4:	02833017 	addeq	r3, r3, #23
   175e8:	02222001 	eoreq	r2, r2, #1
   175ec:	05c02400 	strbeq	r2, [r0, #1024]	; 0x400
   175f0:	ea000000 	b	175f8 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   175f4:	e3a03000 	mov	r3, #0
   175f8:	e1a00003 	mov	r0, r3
   175fc:	e12fff1e 	bx	lr
   17600:	e3120011 	tst	r2, #17
   17604:	0affffe2 	beq	17594 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   17608:	e3120004 	tst	r2, #4
   1760c:	159f3048 	ldrne	r3, [pc, #72]	; 1765c <CKeyMap::Translate(unsigned char, unsigned char)+0x104>
   17610:	1afffff8 	bne	175f8 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   17614:	eaffffde 	b	17594 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   17618:	e5d03401 	ldrb	r3, [r0, #1025]	; 0x401
   1761c:	eaffffe6 	b	175bc <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   17620:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   17624:	e3a03f4d 	mov	r3, #308	; 0x134
   17628:	e2222001 	eor	r2, r2, #1
   1762c:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   17630:	eafffff0 	b	175f8 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   17634:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   17638:	e59f3020 	ldr	r3, [pc, #32]	; 17660 <CKeyMap::Translate(unsigned char, unsigned char)+0x108>
   1763c:	e2222001 	eor	r2, r2, #1
   17640:	e5c02402 	strb	r2, [r0, #1026]	; 0x402
   17644:	eaffffeb 	b	175f8 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   17648:	e3120022 	tst	r2, #34	; 0x22
   1764c:	13a03001 	movne	r3, #1
   17650:	03a03000 	moveq	r3, #0
   17654:	eaffffd8 	b	175bc <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   17658:	0000011e 	.word	0x0000011e
   1765c:	00000142 	.word	0x00000142
   17660:	00000135 	.word	0x00000135

00017664 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   17664:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   17668:	e241c021 	sub	ip, r1, #33	; 0x21
   1766c:	e59fe0a8 	ldr	lr, [pc, #168]	; 1771c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb8>
   17670:	e6ffc07c 	uxth	ip, ip
   17674:	e15c000e 	cmp	ip, lr
   17678:	8a000025 	bhi	17714 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   1767c:	e241cc01 	sub	ip, r1, #256	; 0x100
   17680:	e6ffe07c 	uxth	lr, ip
   17684:	e35e0032 	cmp	lr, #50	; 0x32
   17688:	9a00001e 	bls	17708 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa4>
   1768c:	e3120011 	tst	r2, #17
   17690:	e6af2071 	sxtb	r2, r1
   17694:	0a000009 	beq	176c0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x5c>
   17698:	e6ef1071 	uxtb	r1, r1
   1769c:	e2412061 	sub	r2, r1, #97	; 0x61
   176a0:	e3520019 	cmp	r2, #25
   176a4:	8a00001a 	bhi	17714 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   176a8:	e3a02000 	mov	r2, #0
   176ac:	e2411060 	sub	r1, r1, #96	; 0x60
   176b0:	e5c31000 	strb	r1, [r3]
   176b4:	e5c32001 	strb	r2, [r3, #1]
   176b8:	e1a00003 	mov	r0, r3
   176bc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   176c0:	e5d00400 	ldrb	r0, [r0, #1024]	; 0x400
   176c4:	e3500000 	cmp	r0, #0
   176c8:	0a000009 	beq	176f4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   176cc:	e6ef1071 	uxtb	r1, r1
   176d0:	e2410041 	sub	r0, r1, #65	; 0x41
   176d4:	e3500019 	cmp	r0, #25
   176d8:	92811020 	addls	r1, r1, #32
   176dc:	96af2071 	sxtbls	r2, r1
   176e0:	9a000003 	bls	176f4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   176e4:	e2410061 	sub	r0, r1, #97	; 0x61
   176e8:	e3500019 	cmp	r0, #25
   176ec:	92411020 	subls	r1, r1, #32
   176f0:	96af2071 	sxtbls	r2, r1
   176f4:	e3a01000 	mov	r1, #0
   176f8:	e5c32000 	strb	r2, [r3]
   176fc:	e5c31001 	strb	r1, [r3, #1]
   17700:	e1a00003 	mov	r0, r3
   17704:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17708:	e59f3010 	ldr	r3, [pc, #16]	; 17720 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xbc>
   1770c:	e793010c 	ldr	r0, [r3, ip, lsl #2]
   17710:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   17714:	e3a00000 	mov	r0, #0
   17718:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1771c:	00000111 	.word	0x00000111
   17720:	0003ded4 	.word	0x0003ded4

00017724 <CKeyMap::GetLEDStatus() const>:
   17724:	e5d03400 	ldrb	r3, [r0, #1024]	; 0x400
   17728:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   1772c:	e3530000 	cmp	r3, #0
   17730:	13a03002 	movne	r3, #2
   17734:	03a03000 	moveq	r3, #0
   17738:	e3520000 	cmp	r2, #0
   1773c:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   17740:	13833001 	orrne	r3, r3, #1
   17744:	e3520000 	cmp	r2, #0
   17748:	13833004 	orrne	r3, r3, #4
   1774c:	e1a00003 	mov	r0, r3
   17750:	e12fff1e 	bx	lr

00017754 <CKeyMap::LookupDefaultMap(char const*)>:
   17754:	e92d4070 	push	{r4, r5, r6, lr}
   17758:	e59f4064 	ldr	r4, [pc, #100]	; 177c4 <CKeyMap::LookupDefaultMap(char const*)+0x70>
   1775c:	e1a06000 	mov	r6, r0
   17760:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   17764:	e3500000 	cmp	r0, #0
   17768:	0a000013 	beq	177bc <CKeyMap::LookupDefaultMap(char const*)+0x68>
   1776c:	e3560000 	cmp	r6, #0
   17770:	13a05000 	movne	r5, #0
   17774:	128440d0 	addne	r4, r4, #208	; 0xd0
   17778:	1a000004 	bne	17790 <CKeyMap::LookupDefaultMap(char const*)+0x3c>
   1777c:	ea00000a 	b	177ac <CKeyMap::LookupDefaultMap(char const*)+0x58>
   17780:	e4940004 	ldr	r0, [r4], #4
   17784:	e2855001 	add	r5, r5, #1
   17788:	e3500000 	cmp	r0, #0
   1778c:	0a00000a 	beq	177bc <CKeyMap::LookupDefaultMap(char const*)+0x68>
   17790:	e1a01006 	mov	r1, r6
   17794:	eb0045e2 	bl	28f24 <strcmp>
   17798:	e3500000 	cmp	r0, #0
   1779c:	1afffff7 	bne	17780 <CKeyMap::LookupDefaultMap(char const*)+0x2c>
   177a0:	e59f0020 	ldr	r0, [pc, #32]	; 177c8 <CKeyMap::LookupDefaultMap(char const*)+0x74>
   177a4:	e0800505 	add	r0, r0, r5, lsl #10
   177a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   177ac:	e59f2018 	ldr	r2, [pc, #24]	; 177cc <CKeyMap::LookupDefaultMap(char const*)+0x78>
   177b0:	e59f1018 	ldr	r1, [pc, #24]	; 177d0 <CKeyMap::LookupDefaultMap(char const*)+0x7c>
   177b4:	e59f0018 	ldr	r0, [pc, #24]	; 177d4 <CKeyMap::LookupDefaultMap(char const*)+0x80>
   177b8:	eb002fb0 	bl	23680 <assertion_failed>
   177bc:	e3a00000 	mov	r0, #0
   177c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   177c4:	0003ded4 	.word	0x0003ded4
   177c8:	00036fd0 	.word	0x00036fd0
   177cc:	0000013f 	.word	0x0000013f
   177d0:	000387d0 	.word	0x000387d0
   177d4:	000387dc 	.word	0x000387dc

000177d8 <CKeyMap::CKeyMap()>:
   177d8:	e3a03000 	mov	r3, #0
   177dc:	e3a02001 	mov	r2, #1
   177e0:	e92d4010 	push	{r4, lr}
   177e4:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   177e8:	e5c03400 	strb	r3, [r0, #1024]	; 0x400
   177ec:	e5c03402 	strb	r3, [r0, #1026]	; 0x402
   177f0:	e1a04000 	mov	r4, r0
   177f4:	eb003653 	bl	25148 <CKernelOptions::Get()>
   177f8:	eb003643 	bl	2510c <CKernelOptions::GetKeyMap() const>
   177fc:	e3500000 	cmp	r0, #0
   17800:	0a00000f 	beq	17844 <CKeyMap::CKeyMap()+0x6c>
   17804:	ebffffd2 	bl	17754 <CKeyMap::LookupDefaultMap(char const*)>
   17808:	e2501000 	subs	r1, r0, #0
   1780c:	0a000004 	beq	17824 <CKeyMap::CKeyMap()+0x4c>
   17810:	e3a02b01 	mov	r2, #1024	; 0x400
   17814:	e1a00004 	mov	r0, r4
   17818:	eb0047dc 	bl	29790 <memcpy>
   1781c:	e1a00004 	mov	r0, r4
   17820:	e8bd8010 	pop	{r4, pc}
   17824:	e59f0028 	ldr	r0, [pc, #40]	; 17854 <CKeyMap::CKeyMap()+0x7c>
   17828:	ebffffc9 	bl	17754 <CKeyMap::LookupDefaultMap(char const*)>
   1782c:	e2501000 	subs	r1, r0, #0
   17830:	1afffff6 	bne	17810 <CKeyMap::CKeyMap()+0x38>
   17834:	e3a02080 	mov	r2, #128	; 0x80
   17838:	e59f1018 	ldr	r1, [pc, #24]	; 17858 <CKeyMap::CKeyMap()+0x80>
   1783c:	e59f0018 	ldr	r0, [pc, #24]	; 1785c <CKeyMap::CKeyMap()+0x84>
   17840:	eb002f8e 	bl	23680 <assertion_failed>
   17844:	e3a0207a 	mov	r2, #122	; 0x7a
   17848:	e59f1008 	ldr	r1, [pc, #8]	; 17858 <CKeyMap::CKeyMap()+0x80>
   1784c:	e59f000c 	ldr	r0, [pc, #12]	; 17860 <CKeyMap::CKeyMap()+0x88>
   17850:	eb002f8a 	bl	23680 <assertion_failed>
   17854:	000387ec 	.word	0x000387ec
   17858:	000387d0 	.word	0x000387d0
   1785c:	000387f0 	.word	0x000387f0
   17860:	000387dc 	.word	0x000387dc

00017864 <CMouseDevice::~CMouseDevice()>:
   17864:	e92d4070 	push	{r4, r5, r6, lr}
   17868:	e3a06000 	mov	r6, #0
   1786c:	e1a04000 	mov	r4, r0
   17870:	e59f5034 	ldr	r5, [pc, #52]	; 178ac <CMouseDevice::~CMouseDevice()+0x48>
   17874:	e5806020 	str	r6, [r0, #32]
   17878:	e2853008 	add	r3, r5, #8
   1787c:	e5803000 	str	r3, [r0]
   17880:	eb003258 	bl	241e8 <CDeviceNameService::Get()>
   17884:	e1a03006 	mov	r3, r6
   17888:	e2851020 	add	r1, r5, #32
   1788c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   17890:	eb00327b 	bl	24284 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   17894:	e2840004 	add	r0, r4, #4
   17898:	eb00005f 	bl	17a1c <CMouseBehaviour::~CMouseBehaviour()>
   1789c:	e1a00004 	mov	r0, r4
   178a0:	eb003159 	bl	23e0c <CDevice::~CDevice()>
   178a4:	e1a00004 	mov	r0, r4
   178a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   178ac:	000388dc 	.word	0x000388dc

000178b0 <CMouseDevice::~CMouseDevice()>:
   178b0:	e92d4010 	push	{r4, lr}
   178b4:	e1a04000 	mov	r4, r0
   178b8:	ebffffe9 	bl	17864 <CMouseDevice::~CMouseDevice()>
   178bc:	e1a00004 	mov	r0, r4
   178c0:	e3a01028 	mov	r1, #40	; 0x28
   178c4:	eb004998 	bl	29f2c <operator delete(void*, unsigned int)>
   178c8:	e1a00004 	mov	r0, r4
   178cc:	e8bd8010 	pop	{r4, pc}

000178d0 <CMouseDevice::CMouseDevice()>:
   178d0:	e92d4070 	push	{r4, r5, r6, lr}
   178d4:	e1a04000 	mov	r4, r0
   178d8:	e24dd008 	sub	sp, sp, #8
   178dc:	eb003158 	bl	23e44 <CDevice::CDevice()>
   178e0:	e1a00004 	mov	r0, r4
   178e4:	e3a06000 	mov	r6, #0
   178e8:	e59f5044 	ldr	r5, [pc, #68]	; 17934 <CMouseDevice::CMouseDevice()+0x64>
   178ec:	e2853008 	add	r3, r5, #8
   178f0:	e4803004 	str	r3, [r0], #4
   178f4:	eb00003e 	bl	179f4 <CMouseBehaviour::CMouseBehaviour()>
   178f8:	e59f2038 	ldr	r2, [pc, #56]	; 17938 <CMouseDevice::CMouseDevice()+0x68>
   178fc:	e5846020 	str	r6, [r4, #32]
   17900:	e5923000 	ldr	r3, [r2]
   17904:	e5843024 	str	r3, [r4, #36]	; 0x24
   17908:	e2833001 	add	r3, r3, #1
   1790c:	e5823000 	str	r3, [r2]
   17910:	eb003234 	bl	241e8 <CDeviceNameService::Get()>
   17914:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   17918:	e2851020 	add	r1, r5, #32
   1791c:	e58d6000 	str	r6, [sp]
   17920:	e1a03004 	mov	r3, r4
   17924:	eb00323c 	bl	2421c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   17928:	e1a00004 	mov	r0, r4
   1792c:	e28dd008 	add	sp, sp, #8
   17930:	e8bd8070 	pop	{r4, r5, r6, pc}
   17934:	000388dc 	.word	0x000388dc
   17938:	0003dfbc 	.word	0x0003dfbc

0001793c <CMouseDevice::Setup(unsigned int, unsigned int)>:
   1793c:	e2800004 	add	r0, r0, #4
   17940:	ea000036 	b	17a20 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

00017944 <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   17944:	e2800004 	add	r0, r0, #4
   17948:	ea00007c 	b	17b40 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>

0001794c <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   1794c:	e2800004 	add	r0, r0, #4
   17950:	ea000106 	b	17d70 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

00017954 <CMouseDevice::ShowCursor(bool)>:
   17954:	e2800004 	add	r0, r0, #4
   17958:	ea000128 	b	17e00 <CMouseBehaviour::ShowCursor(bool)>

0001795c <CMouseDevice::UpdateCursor()>:
   1795c:	e5903020 	ldr	r3, [r0, #32]
   17960:	e3530000 	cmp	r3, #0
   17964:	112fff1e 	bxne	lr
   17968:	e2800004 	add	r0, r0, #4
   1796c:	ea00013e 	b	17e6c <CMouseBehaviour::UpdateCursor()>

00017970 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   17970:	e5903020 	ldr	r3, [r0, #32]
   17974:	e92d4010 	push	{r4, lr}
   17978:	e3530000 	cmp	r3, #0
   1797c:	1a000006 	bne	1799c <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x2c>
   17980:	e3510000 	cmp	r1, #0
   17984:	e5801020 	str	r1, [r0, #32]
   17988:	18bd8010 	popne	{r4, pc}
   1798c:	e3a0204a 	mov	r2, #74	; 0x4a
   17990:	e59f1014 	ldr	r1, [pc, #20]	; 179ac <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x3c>
   17994:	e59f0014 	ldr	r0, [pc, #20]	; 179b0 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x40>
   17998:	eb002f38 	bl	23680 <assertion_failed>
   1799c:	e3a02048 	mov	r2, #72	; 0x48
   179a0:	e59f1004 	ldr	r1, [pc, #4]	; 179ac <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x3c>
   179a4:	e59f0008 	ldr	r0, [pc, #8]	; 179b4 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x44>
   179a8:	eb002f34 	bl	23680 <assertion_failed>
   179ac:	00038904 	.word	0x00038904
   179b0:	00036ee0 	.word	0x00036ee0
   179b4:	00036ec8 	.word	0x00036ec8

000179b8 <CMouseDevice::ReportHandler(unsigned int, int, int)>:
   179b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   179bc:	e1a04000 	mov	r4, r0
   179c0:	e2800004 	add	r0, r0, #4
   179c4:	e1a07003 	mov	r7, r3
   179c8:	e1a05001 	mov	r5, r1
   179cc:	e1a06002 	mov	r6, r2
   179d0:	eb00006c 	bl	17b88 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   179d4:	e5943020 	ldr	r3, [r4, #32]
   179d8:	e3530000 	cmp	r3, #0
   179dc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   179e0:	e1a02007 	mov	r2, r7
   179e4:	e1a01006 	mov	r1, r6
   179e8:	e1a00005 	mov	r0, r5
   179ec:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   179f0:	e12fff13 	bx	r3

000179f4 <CMouseBehaviour::CMouseBehaviour()>:
   179f4:	e3a02000 	mov	r2, #0
   179f8:	e5802000 	str	r2, [r0]
   179fc:	e5802004 	str	r2, [r0, #4]
   17a00:	e5802008 	str	r2, [r0, #8]
   17a04:	e580200c 	str	r2, [r0, #12]
   17a08:	e5c02010 	strb	r2, [r0, #16]
   17a0c:	e5c02011 	strb	r2, [r0, #17]
   17a10:	e5802014 	str	r2, [r0, #20]
   17a14:	e5802018 	str	r2, [r0, #24]
   17a18:	e12fff1e 	bx	lr

00017a1c <CMouseBehaviour::~CMouseBehaviour()>:
   17a1c:	e12fff1e 	bx	lr

00017a20 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   17a20:	e92d4010 	push	{r4, lr}
   17a24:	e5903000 	ldr	r3, [r0]
   17a28:	e24dd038 	sub	sp, sp, #56	; 0x38
   17a2c:	e3530000 	cmp	r3, #0
   17a30:	1a00002b 	bne	17ae4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xc4>
   17a34:	e3510000 	cmp	r1, #0
   17a38:	e5801000 	str	r1, [r0]
   17a3c:	0a00002c 	beq	17af4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd4>
   17a40:	e5904004 	ldr	r4, [r0, #4]
   17a44:	e3540000 	cmp	r4, #0
   17a48:	1a00002d 	bne	17b04 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xe4>
   17a4c:	e3520000 	cmp	r2, #0
   17a50:	e5802004 	str	r2, [r0, #4]
   17a54:	0a00002e 	beq	17b14 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf4>
   17a58:	e2811001 	add	r1, r1, #1
   17a5c:	e2822001 	add	r2, r2, #1
   17a60:	e1a020a2 	lsr	r2, r2, #1
   17a64:	e1a010a1 	lsr	r1, r1, #1
   17a68:	e5801008 	str	r1, [r0, #8]
   17a6c:	e580200c 	str	r2, [r0, #12]
   17a70:	e1a01004 	mov	r1, r4
   17a74:	e28d000c 	add	r0, sp, #12
   17a78:	eb002f21 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   17a7c:	e3a03018 	mov	r3, #24
   17a80:	e3a0e010 	mov	lr, #16
   17a84:	e59fc098 	ldr	ip, [pc, #152]	; 17b24 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x104>
   17a88:	e58d3000 	str	r3, [sp]
   17a8c:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   17a90:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   17a94:	e3a03024 	mov	r3, #36	; 0x24
   17a98:	e28d2014 	add	r2, sp, #20
   17a9c:	e59f1084 	ldr	r1, [pc, #132]	; 17b28 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x108>
   17aa0:	e28d000c 	add	r0, sp, #12
   17aa4:	e58d4028 	str	r4, [sp, #40]	; 0x28
   17aa8:	e58d4030 	str	r4, [sp, #48]	; 0x30
   17aac:	e58d4034 	str	r4, [sp, #52]	; 0x34
   17ab0:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   17ab4:	e58de020 	str	lr, [sp, #32]
   17ab8:	e58de024 	str	lr, [sp, #36]	; 0x24
   17abc:	eb002f1c 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   17ac0:	e2504000 	subs	r4, r0, #0
   17ac4:	159d4020 	ldrne	r4, [sp, #32]
   17ac8:	e28d000c 	add	r0, sp, #12
   17acc:	116f4f14 	clzne	r4, r4
   17ad0:	11a042a4 	lsrne	r4, r4, #5
   17ad4:	eb002f11 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   17ad8:	e1a00004 	mov	r0, r4
   17adc:	e28dd038 	add	sp, sp, #56	; 0x38
   17ae0:	e8bd8010 	pop	{r4, pc}
   17ae4:	e3a0204c 	mov	r2, #76	; 0x4c
   17ae8:	e59f103c 	ldr	r1, [pc, #60]	; 17b2c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   17aec:	e59f003c 	ldr	r0, [pc, #60]	; 17b30 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x110>
   17af0:	eb002ee2 	bl	23680 <assertion_failed>
   17af4:	e3a0204e 	mov	r2, #78	; 0x4e
   17af8:	e59f102c 	ldr	r1, [pc, #44]	; 17b2c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   17afc:	e59f0030 	ldr	r0, [pc, #48]	; 17b34 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x114>
   17b00:	eb002ede 	bl	23680 <assertion_failed>
   17b04:	e3a02050 	mov	r2, #80	; 0x50
   17b08:	e59f101c 	ldr	r1, [pc, #28]	; 17b2c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   17b0c:	e59f0024 	ldr	r0, [pc, #36]	; 17b38 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x118>
   17b10:	eb002eda 	bl	23680 <assertion_failed>
   17b14:	e3a02052 	mov	r2, #82	; 0x52
   17b18:	e59f100c 	ldr	r1, [pc, #12]	; 17b2c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   17b1c:	e59f0018 	ldr	r0, [pc, #24]	; 17b3c <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x11c>
   17b20:	eb002ed6 	bl	23680 <assertion_failed>
   17b24:	00038910 	.word	0x00038910
   17b28:	00008010 	.word	0x00008010
   17b2c:	00038d10 	.word	0x00038d10
   17b30:	00038d24 	.word	0x00038d24
   17b34:	00038d38 	.word	0x00038d38
   17b38:	00038d4c 	.word	0x00038d4c
   17b3c:	00038d64 	.word	0x00038d64

00017b40 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   17b40:	e5903018 	ldr	r3, [r0, #24]
   17b44:	e92d4010 	push	{r4, lr}
   17b48:	e3530000 	cmp	r3, #0
   17b4c:	1a000006 	bne	17b6c <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x2c>
   17b50:	e3510000 	cmp	r1, #0
   17b54:	e5801018 	str	r1, [r0, #24]
   17b58:	18bd8010 	popne	{r4, pc}
   17b5c:	e3a02070 	mov	r2, #112	; 0x70
   17b60:	e59f1014 	ldr	r1, [pc, #20]	; 17b7c <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x3c>
   17b64:	e59f0014 	ldr	r0, [pc, #20]	; 17b80 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x40>
   17b68:	eb002ec4 	bl	23680 <assertion_failed>
   17b6c:	e3a0206e 	mov	r2, #110	; 0x6e
   17b70:	e59f1004 	ldr	r1, [pc, #4]	; 17b7c <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x3c>
   17b74:	e59f0008 	ldr	r0, [pc, #8]	; 17b84 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x44>
   17b78:	eb002ec0 	bl	23680 <assertion_failed>
   17b7c:	00038d10 	.word	0x00038d10
   17b80:	00036cb8 	.word	0x00036cb8
   17b84:	00038d78 	.word	0x00038d78

00017b88 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   17b88:	e590c000 	ldr	ip, [r0]
   17b8c:	e35c0000 	cmp	ip, #0
   17b90:	012fff1e 	bxeq	lr
   17b94:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17b98:	e590e004 	ldr	lr, [r0, #4]
   17b9c:	e35e0000 	cmp	lr, #0
   17ba0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ba4:	e1a04000 	mov	r4, r0
   17ba8:	e1a05001 	mov	r5, r1
   17bac:	e0822182 	add	r2, r2, r2, lsl #3
   17bb0:	e59f113c 	ldr	r1, [pc, #316]	; 17cf4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x16c>
   17bb4:	e1a02082 	lsl	r2, r2, #1
   17bb8:	e0833183 	add	r3, r3, r3, lsl #3
   17bbc:	e0c60291 	smull	r0, r6, r1, r2
   17bc0:	e1a03083 	lsl	r3, r3, #1
   17bc4:	e0c10391 	smull	r0, r1, r1, r3
   17bc8:	e1a02fc2 	asr	r2, r2, #31
   17bcc:	e5940008 	ldr	r0, [r4, #8]
   17bd0:	e0622146 	rsb	r2, r2, r6, asr #2
   17bd4:	e1a03fc3 	asr	r3, r3, #31
   17bd8:	e0633141 	rsb	r3, r3, r1, asr #2
   17bdc:	e0822000 	add	r2, r2, r0
   17be0:	e594100c 	ldr	r1, [r4, #12]
   17be4:	e15c0002 	cmp	ip, r2
   17be8:	e0813003 	add	r3, r1, r3
   17bec:	9a00002c 	bls	17ca4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x11c>
   17bf0:	e15e0003 	cmp	lr, r3
   17bf4:	e584300c 	str	r3, [r4, #12]
   17bf8:	e5842008 	str	r2, [r4, #8]
   17bfc:	8a000037 	bhi	17ce0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x158>
   17c00:	e1500002 	cmp	r0, r2
   17c04:	e584100c 	str	r1, [r4, #12]
   17c08:	0a000008 	beq	17c30 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   17c0c:	e3a03001 	mov	r3, #1
   17c10:	e5946018 	ldr	r6, [r4, #24]
   17c14:	e5c43010 	strb	r3, [r4, #16]
   17c18:	e3560000 	cmp	r6, #0
   17c1c:	0a000027 	beq	17cc0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   17c20:	e594300c 	ldr	r3, [r4, #12]
   17c24:	e1a01005 	mov	r1, r5
   17c28:	e3a00000 	mov	r0, #0
   17c2c:	e12fff36 	blx	r6
   17c30:	e5943014 	ldr	r3, [r4, #20]
   17c34:	e1550003 	cmp	r5, r3
   17c38:	0a000020 	beq	17cc0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   17c3c:	e5942018 	ldr	r2, [r4, #24]
   17c40:	e3520000 	cmp	r2, #0
   17c44:	0a00001d 	beq	17cc0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   17c48:	e3a06000 	mov	r6, #0
   17c4c:	e3a07001 	mov	r7, #1
   17c50:	e1a01617 	lsl	r1, r7, r6
   17c54:	e1110003 	tst	r1, r3
   17c58:	e3a08002 	mov	r8, #2
   17c5c:	0a000008 	beq	17c84 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xfc>
   17c60:	e1150001 	tst	r5, r1
   17c64:	0a000017 	beq	17cc8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x140>
   17c68:	e2866001 	add	r6, r6, #1
   17c6c:	e3560003 	cmp	r6, #3
   17c70:	0a000012 	beq	17cc0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   17c74:	e5943014 	ldr	r3, [r4, #20]
   17c78:	e1a01617 	lsl	r1, r7, r6
   17c7c:	e1110003 	tst	r1, r3
   17c80:	1afffff6 	bne	17c60 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xd8>
   17c84:	e1150001 	tst	r5, r1
   17c88:	0afffff6 	beq	17c68 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   17c8c:	e5949018 	ldr	r9, [r4, #24]
   17c90:	e594300c 	ldr	r3, [r4, #12]
   17c94:	e5942008 	ldr	r2, [r4, #8]
   17c98:	e1a00007 	mov	r0, r7
   17c9c:	e12fff39 	blx	r9
   17ca0:	eafffff0 	b	17c68 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   17ca4:	e15e0003 	cmp	lr, r3
   17ca8:	e584300c 	str	r3, [r4, #12]
   17cac:	9a00000e 	bls	17cec <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x164>
   17cb0:	e1510003 	cmp	r1, r3
   17cb4:	11a02000 	movne	r2, r0
   17cb8:	1affffd3 	bne	17c0c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   17cbc:	eaffffdb 	b	17c30 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   17cc0:	e5845014 	str	r5, [r4, #20]
   17cc4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17cc8:	e5949018 	ldr	r9, [r4, #24]
   17ccc:	e594300c 	ldr	r3, [r4, #12]
   17cd0:	e5942008 	ldr	r2, [r4, #8]
   17cd4:	e1a00008 	mov	r0, r8
   17cd8:	e12fff39 	blx	r9
   17cdc:	eaffffe1 	b	17c68 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   17ce0:	e1500002 	cmp	r0, r2
   17ce4:	1affffc8 	bne	17c0c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   17ce8:	eafffff0 	b	17cb0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   17cec:	e584100c 	str	r1, [r4, #12]
   17cf0:	eaffffce 	b	17c30 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   17cf4:	66666667 	.word	0x66666667

00017cf8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   17cf8:	e92d4070 	push	{r4, r5, r6, lr}
   17cfc:	e24dd030 	sub	sp, sp, #48	; 0x30
   17d00:	e1a05000 	mov	r5, r0
   17d04:	e1a04001 	mov	r4, r1
   17d08:	e28d000c 	add	r0, sp, #12
   17d0c:	e3a01000 	mov	r1, #0
   17d10:	e1a06002 	mov	r6, r2
   17d14:	eb002e7a 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   17d18:	e3a03010 	mov	r3, #16
   17d1c:	e3a0c001 	mov	ip, #1
   17d20:	e58d3000 	str	r3, [sp]
   17d24:	e28d2014 	add	r2, sp, #20
   17d28:	e3a0301c 	mov	r3, #28
   17d2c:	e59f1038 	ldr	r1, [pc, #56]	; 17d6c <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)+0x74>
   17d30:	e28d000c 	add	r0, sp, #12
   17d34:	e58d4028 	str	r4, [sp, #40]	; 0x28
   17d38:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   17d3c:	e58d6020 	str	r6, [sp, #32]
   17d40:	e58d5024 	str	r5, [sp, #36]	; 0x24
   17d44:	eb002e7a 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   17d48:	e2504000 	subs	r4, r0, #0
   17d4c:	159d4020 	ldrne	r4, [sp, #32]
   17d50:	e28d000c 	add	r0, sp, #12
   17d54:	116f4f14 	clzne	r4, r4
   17d58:	11a042a4 	lsrne	r4, r4, #5
   17d5c:	eb002e6f 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   17d60:	e1a00004 	mov	r0, r4
   17d64:	e28dd030 	add	sp, sp, #48	; 0x30
   17d68:	e8bd8070 	pop	{r4, r5, r6, pc}
   17d6c:	00008011 	.word	0x00008011

00017d70 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   17d70:	e5903000 	ldr	r3, [r0]
   17d74:	e92d4010 	push	{r4, lr}
   17d78:	e3530000 	cmp	r3, #0
   17d7c:	0a000014 	beq	17dd4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   17d80:	e590c004 	ldr	ip, [r0, #4]
   17d84:	e35c0000 	cmp	ip, #0
   17d88:	0a000015 	beq	17de4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x74>
   17d8c:	e1530001 	cmp	r3, r1
   17d90:	815c0002 	cmphi	ip, r2
   17d94:	e1a0e001 	mov	lr, r1
   17d98:	9a000006 	bls	17db8 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x48>
   17d9c:	e5d03011 	ldrb	r3, [r0, #17]
   17da0:	e5801008 	str	r1, [r0, #8]
   17da4:	e3530000 	cmp	r3, #0
   17da8:	e580200c 	str	r2, [r0, #12]
   17dac:	1a000003 	bne	17dc0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x50>
   17db0:	e3a00001 	mov	r0, #1
   17db4:	e8bd8010 	pop	{r4, pc}
   17db8:	e3a00000 	mov	r0, #0
   17dbc:	e8bd8010 	pop	{r4, pc}
   17dc0:	e1a01002 	mov	r1, r2
   17dc4:	e1a0000e 	mov	r0, lr
   17dc8:	e8bd4010 	pop	{r4, lr}
   17dcc:	e3a02001 	mov	r2, #1
   17dd0:	eaffffc8 	b	17cf8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   17dd4:	e3a02075 	mov	r2, #117	; 0x75
   17dd8:	e59f1014 	ldr	r1, [pc, #20]	; 17df4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   17ddc:	e59f0014 	ldr	r0, [pc, #20]	; 17df8 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x88>
   17de0:	eb002e26 	bl	23680 <assertion_failed>
   17de4:	e3a02076 	mov	r2, #118	; 0x76
   17de8:	e59f1004 	ldr	r1, [pc, #4]	; 17df4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   17dec:	e59f0008 	ldr	r0, [pc, #8]	; 17dfc <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x8c>
   17df0:	eb002e22 	bl	23680 <assertion_failed>
   17df4:	00038d10 	.word	0x00038d10
   17df8:	00038d38 	.word	0x00038d38
   17dfc:	00038d64 	.word	0x00038d64

00017e00 <CMouseBehaviour::ShowCursor(bool)>:
   17e00:	e1a02001 	mov	r2, r1
   17e04:	e5903008 	ldr	r3, [r0, #8]
   17e08:	e5901000 	ldr	r1, [r0]
   17e0c:	e92d4010 	push	{r4, lr}
   17e10:	e1530001 	cmp	r3, r1
   17e14:	e5d04011 	ldrb	r4, [r0, #17]
   17e18:	e5c02011 	strb	r2, [r0, #17]
   17e1c:	2a000007 	bcs	17e40 <CMouseBehaviour::ShowCursor(bool)+0x40>
   17e20:	e590100c 	ldr	r1, [r0, #12]
   17e24:	e5900004 	ldr	r0, [r0, #4]
   17e28:	e1510000 	cmp	r1, r0
   17e2c:	2a000007 	bcs	17e50 <CMouseBehaviour::ShowCursor(bool)+0x50>
   17e30:	e1a00003 	mov	r0, r3
   17e34:	ebffffaf 	bl	17cf8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   17e38:	e1a00004 	mov	r0, r4
   17e3c:	e8bd8010 	pop	{r4, pc}
   17e40:	e3a0208d 	mov	r2, #141	; 0x8d
   17e44:	e59f1014 	ldr	r1, [pc, #20]	; 17e60 <CMouseBehaviour::ShowCursor(bool)+0x60>
   17e48:	e59f0014 	ldr	r0, [pc, #20]	; 17e64 <CMouseBehaviour::ShowCursor(bool)+0x64>
   17e4c:	eb002e0b 	bl	23680 <assertion_failed>
   17e50:	e3a0208e 	mov	r2, #142	; 0x8e
   17e54:	e59f1004 	ldr	r1, [pc, #4]	; 17e60 <CMouseBehaviour::ShowCursor(bool)+0x60>
   17e58:	e59f0008 	ldr	r0, [pc, #8]	; 17e68 <CMouseBehaviour::ShowCursor(bool)+0x68>
   17e5c:	eb002e07 	bl	23680 <assertion_failed>
   17e60:	00038d10 	.word	0x00038d10
   17e64:	00038d90 	.word	0x00038d90
   17e68:	00038dac 	.word	0x00038dac

00017e6c <CMouseBehaviour::UpdateCursor()>:
   17e6c:	e5d03011 	ldrb	r3, [r0, #17]
   17e70:	e3530000 	cmp	r3, #0
   17e74:	012fff1e 	bxeq	lr
   17e78:	e5d03010 	ldrb	r3, [r0, #16]
   17e7c:	e3530000 	cmp	r3, #0
   17e80:	012fff1e 	bxeq	lr
   17e84:	e3a03000 	mov	r3, #0
   17e88:	e590100c 	ldr	r1, [r0, #12]
   17e8c:	e5c03010 	strb	r3, [r0, #16]
   17e90:	e3a02001 	mov	r2, #1
   17e94:	e5900008 	ldr	r0, [r0, #8]
   17e98:	eaffff96 	b	17cf8 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

00017e9c <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   17e9c:	e92d4010 	push	{r4, lr}
   17ea0:	e1a04000 	mov	r4, r0
   17ea4:	e4801004 	str	r1, [r0], #4
   17ea8:	e1a01002 	mov	r1, r2
   17eac:	eb003ad2 	bl	269fc <CString::CString(char const*)>
   17eb0:	e3a03000 	mov	r3, #0
   17eb4:	e1a00004 	mov	r0, r4
   17eb8:	e5843014 	str	r3, [r4, #20]
   17ebc:	e5843018 	str	r3, [r4, #24]
   17ec0:	e584301c 	str	r3, [r4, #28]
   17ec4:	e5843020 	str	r3, [r4, #32]
   17ec8:	e8bd8010 	pop	{r4, pc}

00017ecc <CPartitionManager::~CPartitionManager()>:
   17ecc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ed0:	e3a05000 	mov	r5, #0
   17ed4:	e1a06000 	mov	r6, r0
   17ed8:	e1a0b005 	mov	fp, r5
   17edc:	e3a0a001 	mov	sl, #1
   17ee0:	e24dd014 	sub	sp, sp, #20
   17ee4:	e2808004 	add	r8, r0, #4
   17ee8:	e2804014 	add	r4, r0, #20
   17eec:	e2807024 	add	r7, r0, #36	; 0x24
   17ef0:	e5943000 	ldr	r3, [r4]
   17ef4:	e3530000 	cmp	r3, #0
   17ef8:	0a00001a 	beq	17f68 <CPartitionManager::~CPartitionManager()+0x9c>
   17efc:	e1a0000d 	mov	r0, sp
   17f00:	eb003ab7 	bl	269e4 <CString::CString()>
   17f04:	e1a00008 	mov	r0, r8
   17f08:	eb003acb 	bl	26a3c <CString::operator char const*() const>
   17f0c:	e2855001 	add	r5, r5, #1
   17f10:	e1a02000 	mov	r2, r0
   17f14:	e1a03005 	mov	r3, r5
   17f18:	e59f1070 	ldr	r1, [pc, #112]	; 17f90 <CPartitionManager::~CPartitionManager()+0xc4>
   17f1c:	e1a0000d 	mov	r0, sp
   17f20:	eb003ff2 	bl	27ef0 <CString::Format(char const*, ...)>
   17f24:	eb0030af 	bl	241e8 <CDeviceNameService::Get()>
   17f28:	e1a09000 	mov	r9, r0
   17f2c:	e1a0000d 	mov	r0, sp
   17f30:	eb003ac1 	bl	26a3c <CString::operator char const*() const>
   17f34:	e1a0200a 	mov	r2, sl
   17f38:	e1a01000 	mov	r1, r0
   17f3c:	e1a00009 	mov	r0, r9
   17f40:	eb00301b 	bl	23fb4 <CDeviceNameService::RemoveDevice(char const*, bool)>
   17f44:	e5940000 	ldr	r0, [r4]
   17f48:	e3500000 	cmp	r0, #0
   17f4c:	0a000002 	beq	17f5c <CPartitionManager::~CPartitionManager()+0x90>
   17f50:	e5903000 	ldr	r3, [r0]
   17f54:	e5933004 	ldr	r3, [r3, #4]
   17f58:	e12fff33 	blx	r3
   17f5c:	e584b000 	str	fp, [r4]
   17f60:	e1a0000d 	mov	r0, sp
   17f64:	eb003a6b 	bl	26918 <CString::~CString()>
   17f68:	e2844004 	add	r4, r4, #4
   17f6c:	e1540007 	cmp	r4, r7
   17f70:	1affffde 	bne	17ef0 <CPartitionManager::~CPartitionManager()+0x24>
   17f74:	e3a03000 	mov	r3, #0
   17f78:	e1a00008 	mov	r0, r8
   17f7c:	e5863000 	str	r3, [r6]
   17f80:	eb003a64 	bl	26918 <CString::~CString()>
   17f84:	e1a00006 	mov	r0, r6
   17f88:	e28dd014 	add	sp, sp, #20
   17f8c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f90:	00038dd0 	.word	0x00038dd0

00017f94 <CPartitionManager::Initialize()>:
   17f94:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f98:	e1a06000 	mov	r6, r0
   17f9c:	e5900000 	ldr	r0, [r0]
   17fa0:	e3a03000 	mov	r3, #0
   17fa4:	e5901000 	ldr	r1, [r0]
   17fa8:	e24ddf89 	sub	sp, sp, #548	; 0x224
   17fac:	e3a02000 	mov	r2, #0
   17fb0:	e5911010 	ldr	r1, [r1, #16]
   17fb4:	e12fff31 	blx	r1
   17fb8:	e1903001 	orrs	r3, r0, r1
   17fbc:	0a000007 	beq	17fe0 <CPartitionManager::Initialize()+0x4c>
   17fc0:	eb0036a1 	bl	25a4c <CLogger::Get()>
   17fc4:	e59f31e0 	ldr	r3, [pc, #480]	; 181ac <CPartitionManager::Initialize()+0x218>
   17fc8:	e3a02001 	mov	r2, #1
   17fcc:	e59f11dc 	ldr	r1, [pc, #476]	; 181b0 <CPartitionManager::Initialize()+0x21c>
   17fd0:	eb0035da 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17fd4:	e3a00000 	mov	r0, #0
   17fd8:	e28ddf89 	add	sp, sp, #548	; 0x224
   17fdc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fe0:	e5960000 	ldr	r0, [r6]
   17fe4:	e28d1020 	add	r1, sp, #32
   17fe8:	e5903000 	ldr	r3, [r0]
   17fec:	e3a02c02 	mov	r2, #512	; 0x200
   17ff0:	e5933008 	ldr	r3, [r3, #8]
   17ff4:	e12fff33 	blx	r3
   17ff8:	e3500c02 	cmp	r0, #512	; 0x200
   17ffc:	1affffef 	bne	17fc0 <CPartitionManager::Initialize()+0x2c>
   18000:	e28d3f87 	add	r3, sp, #540	; 0x21c
   18004:	e2833002 	add	r3, r3, #2
   18008:	e1d320b0 	ldrh	r2, [r3]
   1800c:	e59f31a0 	ldr	r3, [pc, #416]	; 181b4 <CPartitionManager::Initialize()+0x220>
   18010:	e1520003 	cmp	r2, r3
   18014:	1a00002e 	bne	180d4 <CPartitionManager::Initialize()+0x140>
   18018:	e3a04000 	mov	r4, #0
   1801c:	e3a0a020 	mov	sl, #32
   18020:	e1a09004 	mov	r9, r4
   18024:	e1a08004 	mov	r8, r4
   18028:	e59f7188 	ldr	r7, [pc, #392]	; 181b8 <CPartitionManager::Initialize()+0x224>
   1802c:	e2865014 	add	r5, r6, #20
   18030:	e286b004 	add	fp, r6, #4
   18034:	e28d3020 	add	r3, sp, #32
   18038:	e0833204 	add	r3, r3, r4, lsl #4
   1803c:	e5d321c2 	ldrb	r2, [r3, #450]	; 0x1c2
   18040:	e352000f 	cmp	r2, #15
   18044:	91e03237 	mvnls	r3, r7, lsr r2
   18048:	81a03008 	movhi	r3, r8
   1804c:	92033001 	andls	r3, r3, #1
   18050:	92233001 	eorls	r3, r3, #1
   18054:	e35200ef 	cmp	r2, #239	; 0xef
   18058:	03833001 	orreq	r3, r3, #1
   1805c:	e3530000 	cmp	r3, #0
   18060:	1a00000c 	bne	18098 <CPartitionManager::Initialize()+0x104>
   18064:	e28d2e22 	add	r2, sp, #544	; 0x220
   18068:	e284301c 	add	r3, r4, #28
   1806c:	e0823203 	add	r3, r2, r3, lsl #4
   18070:	e2431f7e 	sub	r1, r3, #504	; 0x1f8
   18074:	e15120b2 	ldrh	r2, [r1, #-2]
   18078:	e1d100b0 	ldrh	r0, [r1]
   1807c:	e1922800 	orrs	r2, r2, r0, lsl #16
   18080:	0a000004 	beq	18098 <CPartitionManager::Initialize()+0x104>
   18084:	e2433f7d 	sub	r3, r3, #500	; 0x1f4
   18088:	e15320b2 	ldrh	r2, [r3, #-2]
   1808c:	e1d300b0 	ldrh	r0, [r3]
   18090:	e1922800 	orrs	r2, r2, r0, lsl #16
   18094:	1a000016 	bne	180f4 <CPartitionManager::Initialize()+0x160>
   18098:	e2844001 	add	r4, r4, #1
   1809c:	e3540004 	cmp	r4, #4
   180a0:	e2855004 	add	r5, r5, #4
   180a4:	1affffe2 	bne	18034 <CPartitionManager::Initialize()+0xa0>
   180a8:	e3590000 	cmp	r9, #0
   180ac:	13a00001 	movne	r0, #1
   180b0:	1affffc8 	bne	17fd8 <CPartitionManager::Initialize()+0x44>
   180b4:	eb003664 	bl	25a4c <CLogger::Get()>
   180b8:	e59f30fc 	ldr	r3, [pc, #252]	; 181bc <CPartitionManager::Initialize()+0x228>
   180bc:	e3a02002 	mov	r2, #2
   180c0:	e59f10e8 	ldr	r1, [pc, #232]	; 181b0 <CPartitionManager::Initialize()+0x21c>
   180c4:	eb00359d 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   180c8:	e3a00001 	mov	r0, #1
   180cc:	e28ddf89 	add	sp, sp, #548	; 0x224
   180d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180d4:	eb00365c 	bl	25a4c <CLogger::Get()>
   180d8:	e59f30e0 	ldr	r3, [pc, #224]	; 181c0 <CPartitionManager::Initialize()+0x22c>
   180dc:	e3a02002 	mov	r2, #2
   180e0:	e59f10c8 	ldr	r1, [pc, #200]	; 181b0 <CPartitionManager::Initialize()+0x21c>
   180e4:	eb003595 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   180e8:	e3a00001 	mov	r0, #1
   180ec:	e28ddf89 	add	sp, sp, #548	; 0x224
   180f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180f4:	e5952000 	ldr	r2, [r5]
   180f8:	e3520000 	cmp	r2, #0
   180fc:	1a000026 	bne	1819c <CPartitionManager::Initialize()+0x208>
   18100:	e1a0000a 	mov	r0, sl
   18104:	e58d300c 	str	r3, [sp, #12]
   18108:	e58d1008 	str	r1, [sp, #8]
   1810c:	eb004778 	bl	29ef4 <operator new(unsigned int)>
   18110:	e59d300c 	ldr	r3, [sp, #12]
   18114:	e59d1008 	ldr	r1, [sp, #8]
   18118:	e58d0004 	str	r0, [sp, #4]
   1811c:	e153c0b2 	ldrh	ip, [r3, #-2]
   18120:	e15120b2 	ldrh	r2, [r1, #-2]
   18124:	e1d330b0 	ldrh	r3, [r3]
   18128:	e1d110b0 	ldrh	r1, [r1]
   1812c:	e18c3803 	orr	r3, ip, r3, lsl #16
   18130:	e1822801 	orr	r2, r2, r1, lsl #16
   18134:	e5961000 	ldr	r1, [r6]
   18138:	eb0000b8 	bl	18420 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   1813c:	e59d3004 	ldr	r3, [sp, #4]
   18140:	e28d0010 	add	r0, sp, #16
   18144:	e5853000 	str	r3, [r5]
   18148:	eb003a25 	bl	269e4 <CString::CString()>
   1814c:	e1a0000b 	mov	r0, fp
   18150:	eb003a39 	bl	26a3c <CString::operator char const*() const>
   18154:	e2899001 	add	r9, r9, #1
   18158:	e1a02000 	mov	r2, r0
   1815c:	e1a03009 	mov	r3, r9
   18160:	e59f105c 	ldr	r1, [pc, #92]	; 181c4 <CPartitionManager::Initialize()+0x230>
   18164:	e28d0010 	add	r0, sp, #16
   18168:	eb003f60 	bl	27ef0 <CString::Format(char const*, ...)>
   1816c:	eb00301d 	bl	241e8 <CDeviceNameService::Get()>
   18170:	e58d0004 	str	r0, [sp, #4]
   18174:	e28d0010 	add	r0, sp, #16
   18178:	eb003a2f 	bl	26a3c <CString::operator char const*() const>
   1817c:	e3a03001 	mov	r3, #1
   18180:	e1a01000 	mov	r1, r0
   18184:	e5952000 	ldr	r2, [r5]
   18188:	e59d0004 	ldr	r0, [sp, #4]
   1818c:	eb002f5b 	bl	23f00 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   18190:	e28d0010 	add	r0, sp, #16
   18194:	eb0039df 	bl	26918 <CString::~CString()>
   18198:	eaffffbe 	b	18098 <CPartitionManager::Initialize()+0x104>
   1819c:	e3a02078 	mov	r2, #120	; 0x78
   181a0:	e59f1020 	ldr	r1, [pc, #32]	; 181c8 <CPartitionManager::Initialize()+0x234>
   181a4:	e59f0020 	ldr	r0, [pc, #32]	; 181cc <CPartitionManager::Initialize()+0x238>
   181a8:	eb002d34 	bl	23680 <assertion_failed>
   181ac:	00038e40 	.word	0x00038e40
   181b0:	00038dc8 	.word	0x00038dc8
   181b4:	0000aa55 	.word	0x0000aa55
   181b8:	00008021 	.word	0x00008021
   181bc:	00038e1c 	.word	0x00038e1c
   181c0:	00038dd8 	.word	0x00038dd8
   181c4:	00038dd0 	.word	0x00038dd0
   181c8:	00038dec 	.word	0x00038dec
   181cc:	00038e04 	.word	0x00038e04

000181d0 <CPartition::~CPartition()>:
   181d0:	e3a02000 	mov	r2, #0
   181d4:	e92d4010 	push	{r4, lr}
   181d8:	e1a04000 	mov	r4, r0
   181dc:	e59f3010 	ldr	r3, [pc, #16]	; 181f4 <CPartition::~CPartition()+0x24>
   181e0:	e5802004 	str	r2, [r0, #4]
   181e4:	e5803000 	str	r3, [r0]
   181e8:	eb002f07 	bl	23e0c <CDevice::~CDevice()>
   181ec:	e1a00004 	mov	r0, r4
   181f0:	e8bd8010 	pop	{r4, pc}
   181f4:	00038e58 	.word	0x00038e58

000181f8 <CPartition::~CPartition()>:
   181f8:	e3a02000 	mov	r2, #0
   181fc:	e92d4010 	push	{r4, lr}
   18200:	e1a04000 	mov	r4, r0
   18204:	e59f301c 	ldr	r3, [pc, #28]	; 18228 <CPartition::~CPartition()+0x30>
   18208:	e5802004 	str	r2, [r0, #4]
   1820c:	e5803000 	str	r3, [r0]
   18210:	eb002efd 	bl	23e0c <CDevice::~CDevice()>
   18214:	e1a00004 	mov	r0, r4
   18218:	e3a01020 	mov	r1, #32
   1821c:	eb004742 	bl	29f2c <operator delete(void*, unsigned int)>
   18220:	e1a00004 	mov	r0, r4
   18224:	e8bd8010 	pop	{r4, pc}
   18228:	00038e58 	.word	0x00038e58

0001822c <CPartition::Read(void*, unsigned int)>:
   1822c:	e5d03018 	ldrb	r3, [r0, #24]
   18230:	e3530000 	cmp	r3, #0
   18234:	1a00001a 	bne	182a4 <CPartition::Read(void*, unsigned int)+0x78>
   18238:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1823c:	e1c061d0 	ldrd	r6, [r0, #16]
   18240:	e3a05000 	mov	r5, #0
   18244:	e3a09000 	mov	r9, #0
   18248:	e59f4064 	ldr	r4, [pc, #100]	; 182b4 <CPartition::Read(void*, unsigned int)+0x88>
   1824c:	e590800c 	ldr	r8, [r0, #12]
   18250:	e0944002 	adds	r4, r4, r2
   18254:	e2a55000 	adc	r5, r5, #0
   18258:	e0944006 	adds	r4, r4, r6
   1825c:	e0a55007 	adc	r5, r5, r7
   18260:	e1a064a4 	lsr	r6, r4, #9
   18264:	e1a074a5 	lsr	r7, r5, #9
   18268:	e1866b85 	orr	r6, r6, r5, lsl #23
   1826c:	e1570009 	cmp	r7, r9
   18270:	01560008 	cmpeq	r6, r8
   18274:	8a00000c 	bhi	182ac <CPartition::Read(void*, unsigned int)+0x80>
   18278:	e5900004 	ldr	r0, [r0, #4]
   1827c:	e3500000 	cmp	r0, #0
   18280:	0a000003 	beq	18294 <CPartition::Read(void*, unsigned int)+0x68>
   18284:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18288:	e5903000 	ldr	r3, [r0]
   1828c:	e5933008 	ldr	r3, [r3, #8]
   18290:	e12fff13 	bx	r3
   18294:	e3a02035 	mov	r2, #53	; 0x35
   18298:	e59f1018 	ldr	r1, [pc, #24]	; 182b8 <CPartition::Read(void*, unsigned int)+0x8c>
   1829c:	e59f0018 	ldr	r0, [pc, #24]	; 182bc <CPartition::Read(void*, unsigned int)+0x90>
   182a0:	eb002cf6 	bl	23680 <assertion_failed>
   182a4:	e3e00000 	mvn	r0, #0
   182a8:	e12fff1e 	bx	lr
   182ac:	e3e00000 	mvn	r0, #0
   182b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   182b4:	000001ff 	.word	0x000001ff
   182b8:	00038e70 	.word	0x00038e70
   182bc:	0003503c 	.word	0x0003503c

000182c0 <CPartition::Write(void const*, unsigned int)>:
   182c0:	e5d03018 	ldrb	r3, [r0, #24]
   182c4:	e3530000 	cmp	r3, #0
   182c8:	1a00001a 	bne	18338 <CPartition::Write(void const*, unsigned int)+0x78>
   182cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   182d0:	e1c061d0 	ldrd	r6, [r0, #16]
   182d4:	e3a05000 	mov	r5, #0
   182d8:	e3a09000 	mov	r9, #0
   182dc:	e59f4064 	ldr	r4, [pc, #100]	; 18348 <CPartition::Write(void const*, unsigned int)+0x88>
   182e0:	e590800c 	ldr	r8, [r0, #12]
   182e4:	e0944002 	adds	r4, r4, r2
   182e8:	e2a55000 	adc	r5, r5, #0
   182ec:	e0944006 	adds	r4, r4, r6
   182f0:	e0a55007 	adc	r5, r5, r7
   182f4:	e1a064a4 	lsr	r6, r4, #9
   182f8:	e1a074a5 	lsr	r7, r5, #9
   182fc:	e1866b85 	orr	r6, r6, r5, lsl #23
   18300:	e1570009 	cmp	r7, r9
   18304:	01560008 	cmpeq	r6, r8
   18308:	8a00000c 	bhi	18340 <CPartition::Write(void const*, unsigned int)+0x80>
   1830c:	e5900004 	ldr	r0, [r0, #4]
   18310:	e3500000 	cmp	r0, #0
   18314:	0a000003 	beq	18328 <CPartition::Write(void const*, unsigned int)+0x68>
   18318:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1831c:	e5903000 	ldr	r3, [r0]
   18320:	e593300c 	ldr	r3, [r3, #12]
   18324:	e12fff13 	bx	r3
   18328:	e3a02047 	mov	r2, #71	; 0x47
   1832c:	e59f1018 	ldr	r1, [pc, #24]	; 1834c <CPartition::Write(void const*, unsigned int)+0x8c>
   18330:	e59f0018 	ldr	r0, [pc, #24]	; 18350 <CPartition::Write(void const*, unsigned int)+0x90>
   18334:	eb002cd1 	bl	23680 <assertion_failed>
   18338:	e3e00000 	mvn	r0, #0
   1833c:	e12fff1e 	bx	lr
   18340:	e3e00000 	mvn	r0, #0
   18344:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18348:	000001ff 	.word	0x000001ff
   1834c:	00038e70 	.word	0x00038e70
   18350:	0003503c 	.word	0x0003503c

00018354 <CPartition::Seek(unsigned long long)>:
   18354:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18358:	e3a05000 	mov	r5, #0
   1835c:	e3a01001 	mov	r1, #1
   18360:	e59f40ac 	ldr	r4, [pc, #172]	; 18414 <CPartition::Seek(unsigned long long)+0xc0>
   18364:	e0055003 	and	r5, r5, r3
   18368:	e0044002 	and	r4, r4, r2
   1836c:	e194c005 	orrs	ip, r4, r5
   18370:	e5c01018 	strb	r1, [r0, #24]
   18374:	0a000002 	beq	18384 <CPartition::Seek(unsigned long long)+0x30>
   18378:	e3e00000 	mvn	r0, #0
   1837c:	e1a01000 	mov	r1, r0
   18380:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18384:	e3a07000 	mov	r7, #0
   18388:	e590600c 	ldr	r6, [r0, #12]
   1838c:	e1a044a2 	lsr	r4, r2, #9
   18390:	e1a054a3 	lsr	r5, r3, #9
   18394:	e1844b83 	orr	r4, r4, r3, lsl #23
   18398:	e1550007 	cmp	r5, r7
   1839c:	01540006 	cmpeq	r4, r6
   183a0:	2afffff4 	bcs	18378 <CPartition::Seek(unsigned long long)+0x24>
   183a4:	e1a04000 	mov	r4, r0
   183a8:	e9900003 	ldmib	r0, {r0, r1}
   183ac:	e1a08481 	lsl	r8, r1, #9
   183b0:	e0988002 	adds	r8, r8, r2
   183b4:	e1a09ba1 	lsr	r9, r1, #23
   183b8:	e0a99003 	adc	r9, r9, r3
   183bc:	e3500000 	cmp	r0, #0
   183c0:	e1a06002 	mov	r6, r2
   183c4:	e1a07003 	mov	r7, r3
   183c8:	0a00000d 	beq	18404 <CPartition::Seek(unsigned long long)+0xb0>
   183cc:	e5903000 	ldr	r3, [r0]
   183d0:	e1a02008 	mov	r2, r8
   183d4:	e5931010 	ldr	r1, [r3, #16]
   183d8:	e1a03009 	mov	r3, r9
   183dc:	e12fff31 	blx	r1
   183e0:	e1590001 	cmp	r9, r1
   183e4:	01580000 	cmpeq	r8, r0
   183e8:	1affffe2 	bne	18378 <CPartition::Seek(unsigned long long)+0x24>
   183ec:	e3a03000 	mov	r3, #0
   183f0:	e1a00006 	mov	r0, r6
   183f4:	e1a01007 	mov	r1, r7
   183f8:	e1c461f0 	strd	r6, [r4, #16]
   183fc:	e5c43018 	strb	r3, [r4, #24]
   18400:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18404:	e3a02059 	mov	r2, #89	; 0x59
   18408:	e59f1008 	ldr	r1, [pc, #8]	; 18418 <CPartition::Seek(unsigned long long)+0xc4>
   1840c:	e59f0008 	ldr	r0, [pc, #8]	; 1841c <CPartition::Seek(unsigned long long)+0xc8>
   18410:	eb002c9a 	bl	23680 <assertion_failed>
   18414:	000001ff 	.word	0x000001ff
   18418:	00038e70 	.word	0x00038e70
   1841c:	0003503c 	.word	0x0003503c

00018420 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   18420:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18424:	e1a05001 	mov	r5, r1
   18428:	e1a04000 	mov	r4, r0
   1842c:	e1a09002 	mov	r9, r2
   18430:	e1a08003 	mov	r8, r3
   18434:	e3a06000 	mov	r6, #0
   18438:	eb002e81 	bl	23e44 <CDevice::CDevice()>
   1843c:	e3a07000 	mov	r7, #0
   18440:	e3a01001 	mov	r1, #1
   18444:	e59f0030 	ldr	r0, [pc, #48]	; 1847c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x5c>
   18448:	e3550000 	cmp	r5, #0
   1844c:	e9840220 	stmib	r4, {r5, r9}
   18450:	e584800c 	str	r8, [r4, #12]
   18454:	e5840000 	str	r0, [r4]
   18458:	e1c461f0 	strd	r6, [r4, #16]
   1845c:	e5c41018 	strb	r1, [r4, #24]
   18460:	0a000001 	beq	1846c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   18464:	e1a00004 	mov	r0, r4
   18468:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1846c:	e3a0201f 	mov	r2, #31
   18470:	e59f1008 	ldr	r1, [pc, #8]	; 18480 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x60>
   18474:	e59f0008 	ldr	r0, [pc, #8]	; 18484 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   18478:	eb002c80 	bl	23680 <assertion_failed>
   1847c:	00038e58 	.word	0x00038e58
   18480:	00038e70 	.word	0x00038e70
   18484:	0003503c 	.word	0x0003503c

00018488 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>:
   18488:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1848c:	e1a04000 	mov	r4, r0
   18490:	e1a08001 	mov	r8, r1
   18494:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   18498:	e59fc10c 	ldr	ip, [pc, #268]	; 185ac <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x124>
   1849c:	e3510000 	cmp	r1, #0
   184a0:	01a0100c 	moveq	r1, ip
   184a4:	e2805010 	add	r5, r0, #16
   184a8:	e5dd7028 	ldrb	r7, [sp, #40]	; 0x28
   184ac:	e1a09003 	mov	r9, r3
   184b0:	e280603c 	add	r6, r0, #60	; 0x3c
   184b4:	e1a0a002 	mov	sl, r2
   184b8:	eb00394f 	bl	269fc <CString::CString(char const*)>
   184bc:	e1a00005 	mov	r0, r5
   184c0:	eb001da4 	bl	1fb58 <CNetConfig::CNetConfig()>
   184c4:	e1a02007 	mov	r2, r7
   184c8:	e1a01005 	mov	r1, r5
   184cc:	e1a00006 	mov	r0, r6
   184d0:	e2847060 	add	r7, r4, #96	; 0x60
   184d4:	eb0008d1 	bl	1a820 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>
   184d8:	e1a02006 	mov	r2, r6
   184dc:	e1a01005 	mov	r1, r5
   184e0:	e2846098 	add	r6, r4, #152	; 0x98
   184e4:	e1a00007 	mov	r0, r7
   184e8:	eb0006fa 	bl	1a0d8 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>
   184ec:	e1a02007 	mov	r2, r7
   184f0:	e1a01005 	mov	r1, r5
   184f4:	e1a00006 	mov	r0, r6
   184f8:	eb0004b7 	bl	197dc <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>
   184fc:	e1a02006 	mov	r2, r6
   18500:	e1a01005 	mov	r1, r5
   18504:	e28400d8 	add	r0, r4, #216	; 0xd8
   18508:	eb0000ef 	bl	188cc <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>
   1850c:	e3a00000 	mov	r0, #0
   18510:	e16f1f18 	clz	r1, r8
   18514:	e59f3094 	ldr	r3, [pc, #148]	; 185b0 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x128>
   18518:	e1a012a1 	lsr	r1, r1, #5
   1851c:	e5932000 	ldr	r2, [r3]
   18520:	e5840128 	str	r0, [r4, #296]	; 0x128
   18524:	e1520000 	cmp	r2, r0
   18528:	e5c41124 	strb	r1, [r4, #292]	; 0x124
   1852c:	1a00001a 	bne	1859c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x114>
   18530:	e1a00005 	mov	r0, r5
   18534:	e5834000 	str	r4, [r3]
   18538:	eb001d4d 	bl	1fa74 <CNetConfig::SetDHCP(bool)>
   1853c:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   18540:	e3530000 	cmp	r3, #0
   18544:	0a000001 	beq	18550 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xc8>
   18548:	e1a00004 	mov	r0, r4
   1854c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18550:	e1a01008 	mov	r1, r8
   18554:	e1a00005 	mov	r0, r5
   18558:	eb001d9d 	bl	1fbd4 <CNetConfig::SetIPAddress(unsigned char const*)>
   1855c:	e1a0100a 	mov	r1, sl
   18560:	e1a00005 	mov	r0, r5
   18564:	eb001da1 	bl	1fbf0 <CNetConfig::SetNetMask(unsigned char const*)>
   18568:	e3590000 	cmp	r9, #0
   1856c:	0a000002 	beq	1857c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xf4>
   18570:	e1a01009 	mov	r1, r9
   18574:	e1a00005 	mov	r0, r5
   18578:	eb001d43 	bl	1fa8c <CNetConfig::SetDefaultGateway(unsigned char const*)>
   1857c:	e59d3020 	ldr	r3, [sp, #32]
   18580:	e3530000 	cmp	r3, #0
   18584:	0affffef 	beq	18548 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xc0>
   18588:	e1a00005 	mov	r0, r5
   1858c:	e1a01003 	mov	r1, r3
   18590:	eb001d3f 	bl	1fa94 <CNetConfig::SetDNSServer(unsigned char const*)>
   18594:	e1a00004 	mov	r0, r4
   18598:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1859c:	e3a02026 	mov	r2, #38	; 0x26
   185a0:	e59f100c 	ldr	r1, [pc, #12]	; 185b4 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x12c>
   185a4:	e59f000c 	ldr	r0, [pc, #12]	; 185b8 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x130>
   185a8:	eb002c34 	bl	23680 <assertion_failed>
   185ac:	0003c7f8 	.word	0x0003c7f8
   185b0:	0003e378 	.word	0x0003e378
   185b4:	00038e80 	.word	0x00038e80
   185b8:	00038e94 	.word	0x00038e94

000185bc <CNetSubSystem::Process()>:
   185bc:	e59f3034 	ldr	r3, [pc, #52]	; 185f8 <CNetSubSystem::Process()+0x3c>
   185c0:	e5933000 	ldr	r3, [r3]
   185c4:	e3530000 	cmp	r3, #0
   185c8:	012fff1e 	bxeq	lr
   185cc:	e92d4010 	push	{r4, lr}
   185d0:	e1a04000 	mov	r4, r0
   185d4:	e280003c 	add	r0, r0, #60	; 0x3c
   185d8:	eb0008f6 	bl	1a9b8 <CNetDeviceLayer::Process()>
   185dc:	e2840060 	add	r0, r4, #96	; 0x60
   185e0:	eb00071d 	bl	1a25c <CLinkLayer::Process()>
   185e4:	e2840098 	add	r0, r4, #152	; 0x98
   185e8:	eb0004cb 	bl	1991c <CNetworkLayer::Process()>
   185ec:	e28400d8 	add	r0, r4, #216	; 0xd8
   185f0:	e8bd4010 	pop	{r4, lr}
   185f4:	ea0003b5 	b	194d0 <CTransportLayer::Process()>
   185f8:	0003e378 	.word	0x0003e378

000185fc <CNetSubSystem::GetConfig()>:
   185fc:	e2800010 	add	r0, r0, #16
   18600:	e12fff1e 	bx	lr

00018604 <CNetSubSystem::GetNetDeviceLayer()>:
   18604:	e280003c 	add	r0, r0, #60	; 0x3c
   18608:	e12fff1e 	bx	lr

0001860c <CNetSubSystem::GetLinkLayer()>:
   1860c:	e2800060 	add	r0, r0, #96	; 0x60
   18610:	e12fff1e 	bx	lr

00018614 <CNetSubSystem::GetTransportLayer()>:
   18614:	e28000d8 	add	r0, r0, #216	; 0xd8
   18618:	e12fff1e 	bx	lr

0001861c <CNetSubSystem::IsRunning() const>:
   1861c:	e5d03124 	ldrb	r3, [r0, #292]	; 0x124
   18620:	e3530000 	cmp	r3, #0
   18624:	0a000003 	beq	18638 <CNetSubSystem::IsRunning() const+0x1c>
   18628:	e5900128 	ldr	r0, [r0, #296]	; 0x128
   1862c:	e3500000 	cmp	r0, #0
   18630:	0a000002 	beq	18640 <CNetSubSystem::IsRunning() const+0x24>
   18634:	ea002072 	b	20804 <CDHCPClient::IsBound() const>
   18638:	e3a00001 	mov	r0, #1
   1863c:	e12fff1e 	bx	lr
   18640:	e92d4010 	push	{r4, lr}
   18644:	e3a0209d 	mov	r2, #157	; 0x9d
   18648:	e59f1004 	ldr	r1, [pc, #4]	; 18654 <CNetSubSystem::IsRunning() const+0x38>
   1864c:	e59f0004 	ldr	r0, [pc, #4]	; 18658 <CNetSubSystem::IsRunning() const+0x3c>
   18650:	eb002c0a 	bl	23680 <assertion_failed>
   18654:	00038e80 	.word	0x00038e80
   18658:	00038ea4 	.word	0x00038ea4

0001865c <CNetSubSystem::Initialize(bool)>:
   1865c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18660:	e2805010 	add	r5, r0, #16
   18664:	e1a04000 	mov	r4, r0
   18668:	e1a00005 	mov	r0, r5
   1866c:	e1a06001 	mov	r6, r1
   18670:	eb001d09 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   18674:	eb001e43 	bl	1ff88 <CIPAddress::IsNull() const>
   18678:	e1a01000 	mov	r1, r0
   1867c:	e1a00005 	mov	r0, r5
   18680:	e5c41124 	strb	r1, [r4, #292]	; 0x124
   18684:	eb001cfa 	bl	1fa74 <CNetConfig::SetDHCP(bool)>
   18688:	e1a01006 	mov	r1, r6
   1868c:	e284003c 	add	r0, r4, #60	; 0x3c
   18690:	eb000878 	bl	1a878 <CNetDeviceLayer::Initialize(bool)>
   18694:	e3500000 	cmp	r0, #0
   18698:	1a000002 	bne	186a8 <CNetSubSystem::Initialize(bool)+0x4c>
   1869c:	e3a05000 	mov	r5, #0
   186a0:	e1a00005 	mov	r0, r5
   186a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   186a8:	e2845060 	add	r5, r4, #96	; 0x60
   186ac:	e1a00005 	mov	r0, r5
   186b0:	eb0006be 	bl	1a1b0 <CLinkLayer::Initialize()>
   186b4:	e3500000 	cmp	r0, #0
   186b8:	0afffff7 	beq	1869c <CNetSubSystem::Initialize(bool)+0x40>
   186bc:	e2847098 	add	r7, r4, #152	; 0x98
   186c0:	e1a00007 	mov	r0, r7
   186c4:	eb00047b 	bl	198b8 <CNetworkLayer::Initialize()>
   186c8:	e3500000 	cmp	r0, #0
   186cc:	0afffff2 	beq	1869c <CNetSubSystem::Initialize(bool)+0x40>
   186d0:	e1a00005 	mov	r0, r5
   186d4:	e1a01007 	mov	r1, r7
   186d8:	eb0006cd 	bl	1a214 <CLinkLayer::AttachLayer(CNetworkLayer*)>
   186dc:	e28400d8 	add	r0, r4, #216	; 0xd8
   186e0:	eb00009f 	bl	18964 <CTransportLayer::Initialize()>
   186e4:	e2505000 	subs	r5, r0, #0
   186e8:	0affffeb 	beq	1869c <CNetSubSystem::Initialize(bool)+0x40>
   186ec:	e3a000e0 	mov	r0, #224	; 0xe0
   186f0:	eb0045ff 	bl	29ef4 <operator new(unsigned int)>
   186f4:	e1a01004 	mov	r1, r4
   186f8:	eb000068 	bl	188a0 <CNetTask::CNetTask(CNetSubSystem*)>
   186fc:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   18700:	e3530000 	cmp	r3, #0
   18704:	0a00000c 	beq	1873c <CNetSubSystem::Initialize(bool)+0xe0>
   18708:	e5943128 	ldr	r3, [r4, #296]	; 0x128
   1870c:	e3530000 	cmp	r3, #0
   18710:	1a000013 	bne	18764 <CNetSubSystem::Initialize(bool)+0x108>
   18714:	e1a00004 	mov	r0, r4
   18718:	eb0038c7 	bl	26a3c <CString::operator char const*() const>
   1871c:	e1a08000 	mov	r8, r0
   18720:	e3a00e1e 	mov	r0, #480	; 0x1e0
   18724:	eb0045f2 	bl	29ef4 <operator new(unsigned int)>
   18728:	e1a07000 	mov	r7, r0
   1872c:	e1a02008 	mov	r2, r8
   18730:	e1a01004 	mov	r1, r4
   18734:	eb001ffc 	bl	2072c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>
   18738:	e5847128 	str	r7, [r4, #296]	; 0x128
   1873c:	e3560000 	cmp	r6, #0
   18740:	1a000002 	bne	18750 <CNetSubSystem::Initialize(bool)+0xf4>
   18744:	eaffffd5 	b	186a0 <CNetSubSystem::Initialize(bool)+0x44>
   18748:	eb002b1e 	bl	233c8 <CScheduler::Get()>
   1874c:	eb002a8a 	bl	2317c <CScheduler::Yield()>
   18750:	e1a00004 	mov	r0, r4
   18754:	ebffffb0 	bl	1861c <CNetSubSystem::IsRunning() const>
   18758:	e3500000 	cmp	r0, #0
   1875c:	0afffff9 	beq	18748 <CNetSubSystem::Initialize(bool)+0xec>
   18760:	eaffffce 	b	186a0 <CNetSubSystem::Initialize(bool)+0x44>
   18764:	e3a02060 	mov	r2, #96	; 0x60
   18768:	e59f1004 	ldr	r1, [pc, #4]	; 18774 <CNetSubSystem::Initialize(bool)+0x118>
   1876c:	e59f0004 	ldr	r0, [pc, #4]	; 18778 <CNetSubSystem::Initialize(bool)+0x11c>
   18770:	eb002bc2 	bl	23680 <assertion_failed>
   18774:	00038e80 	.word	0x00038e80
   18778:	00038eb8 	.word	0x00038eb8

0001877c <CNetSubSystem::Get()>:
   1877c:	e59f3020 	ldr	r3, [pc, #32]	; 187a4 <CNetSubSystem::Get()+0x28>
   18780:	e5930000 	ldr	r0, [r3]
   18784:	e3500000 	cmp	r0, #0
   18788:	0a000000 	beq	18790 <CNetSubSystem::Get()+0x14>
   1878c:	e12fff1e 	bx	lr
   18790:	e92d4010 	push	{r4, lr}
   18794:	e3a020a3 	mov	r2, #163	; 0xa3
   18798:	e59f1008 	ldr	r1, [pc, #8]	; 187a8 <CNetSubSystem::Get()+0x2c>
   1879c:	e59f0008 	ldr	r0, [pc, #8]	; 187ac <CNetSubSystem::Get()+0x30>
   187a0:	eb002bb6 	bl	23680 <assertion_failed>
   187a4:	0003e378 	.word	0x0003e378
   187a8:	00038e80 	.word	0x00038e80
   187ac:	00038ecc 	.word	0x00038ecc

000187b0 <CNetSubSystem::~CNetSubSystem()>:
   187b0:	e92d4010 	push	{r4, lr}
   187b4:	e3a02000 	mov	r2, #0
   187b8:	e1a04000 	mov	r4, r0
   187bc:	e59f3038 	ldr	r3, [pc, #56]	; 187fc <CNetSubSystem::~CNetSubSystem()+0x4c>
   187c0:	e28000d8 	add	r0, r0, #216	; 0xd8
   187c4:	e5832000 	str	r2, [r3]
   187c8:	eb000336 	bl	194a8 <CTransportLayer::~CTransportLayer()>
   187cc:	e2840098 	add	r0, r4, #152	; 0x98
   187d0:	eb000420 	bl	19858 <CNetworkLayer::~CNetworkLayer()>
   187d4:	e2840060 	add	r0, r4, #96	; 0x60
   187d8:	eb00065d 	bl	1a154 <CLinkLayer::~CLinkLayer()>
   187dc:	e284003c 	add	r0, r4, #60	; 0x3c
   187e0:	eb000819 	bl	1a84c <CNetDeviceLayer::~CNetDeviceLayer()>
   187e4:	e2840010 	add	r0, r4, #16
   187e8:	eb001c93 	bl	1fa3c <CNetConfig::~CNetConfig()>
   187ec:	e1a00004 	mov	r0, r4
   187f0:	eb003848 	bl	26918 <CString::~CString()>
   187f4:	e1a00004 	mov	r0, r4
   187f8:	e8bd8010 	pop	{r4, pc}
   187fc:	0003e378 	.word	0x0003e378

00018800 <CNetTask::~CNetTask()>:
   18800:	e3a02000 	mov	r2, #0
   18804:	e92d4010 	push	{r4, lr}
   18808:	e1a04000 	mov	r4, r0
   1880c:	e59f3010 	ldr	r3, [pc, #16]	; 18824 <CNetTask::~CNetTask()+0x24>
   18810:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   18814:	e5803000 	str	r3, [r0]
   18818:	eb0028f4 	bl	22bf0 <CTask::~CTask()>
   1881c:	e1a00004 	mov	r0, r4
   18820:	e8bd8010 	pop	{r4, pc}
   18824:	00038ee4 	.word	0x00038ee4

00018828 <CNetTask::~CNetTask()>:
   18828:	e3a02000 	mov	r2, #0
   1882c:	e92d4010 	push	{r4, lr}
   18830:	e1a04000 	mov	r4, r0
   18834:	e59f301c 	ldr	r3, [pc, #28]	; 18858 <CNetTask::~CNetTask()+0x30>
   18838:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1883c:	e5803000 	str	r3, [r0]
   18840:	eb0028ea 	bl	22bf0 <CTask::~CTask()>
   18844:	e1a00004 	mov	r0, r4
   18848:	e3a010e0 	mov	r1, #224	; 0xe0
   1884c:	eb0045b6 	bl	29f2c <operator delete(void*, unsigned int)>
   18850:	e1a00004 	mov	r0, r4
   18854:	e8bd8010 	pop	{r4, pc}
   18858:	00038ee4 	.word	0x00038ee4

0001885c <CNetTask::Run()>:
   1885c:	e92d4010 	push	{r4, lr}
   18860:	e1a04000 	mov	r4, r0
   18864:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   18868:	e3500000 	cmp	r0, #0
   1886c:	0a000005 	beq	18888 <CNetTask::Run()+0x2c>
   18870:	ebffff51 	bl	185bc <CNetSubSystem::Process()>
   18874:	eb002ad3 	bl	233c8 <CScheduler::Get()>
   18878:	eb002a3f 	bl	2317c <CScheduler::Yield()>
   1887c:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   18880:	e3500000 	cmp	r0, #0
   18884:	1afffff9 	bne	18870 <CNetTask::Run()+0x14>
   18888:	e3a02026 	mov	r2, #38	; 0x26
   1888c:	e59f1004 	ldr	r1, [pc, #4]	; 18898 <CNetTask::Run()+0x3c>
   18890:	e59f0004 	ldr	r0, [pc, #4]	; 1889c <CNetTask::Run()+0x40>
   18894:	eb002b79 	bl	23680 <assertion_failed>
   18898:	00038ef0 	.word	0x00038ef0
   1889c:	00038efc 	.word	0x00038efc

000188a0 <CNetTask::CNetTask(CNetSubSystem*)>:
   188a0:	e92d4070 	push	{r4, r5, r6, lr}
   188a4:	e1a04000 	mov	r4, r0
   188a8:	e1a05001 	mov	r5, r1
   188ac:	e3a01902 	mov	r1, #32768	; 0x8000
   188b0:	eb002921 	bl	22d3c <CTask::CTask(unsigned int)>
   188b4:	e59f300c 	ldr	r3, [pc, #12]	; 188c8 <CNetTask::CNetTask(CNetSubSystem*)+0x28>
   188b8:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   188bc:	e5843000 	str	r3, [r4]
   188c0:	e1a00004 	mov	r0, r4
   188c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   188c8:	00038ee4 	.word	0x00038ee4

000188cc <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>:
   188cc:	e92d4070 	push	{r4, r5, r6, lr}
   188d0:	e1a06002 	mov	r6, r2
   188d4:	e3a02064 	mov	r2, #100	; 0x64
   188d8:	e1a04000 	mov	r4, r0
   188dc:	e5801000 	str	r1, [r0]
   188e0:	e1a05001 	mov	r5, r1
   188e4:	e5806004 	str	r6, [r0, #4]
   188e8:	e1a01002 	mov	r1, r2
   188ec:	e2800008 	add	r0, r0, #8
   188f0:	eb00375c 	bl	26668 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   188f4:	e3a03000 	mov	r3, #0
   188f8:	e59f0054 	ldr	r0, [pc, #84]	; 18954 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x88>
   188fc:	e584301c 	str	r3, [r4, #28]
   18900:	e1c401b8 	strh	r0, [r4, #24]
   18904:	e1a02006 	mov	r2, r6
   18908:	e1a01005 	mov	r1, r5
   1890c:	e2840020 	add	r0, r4, #32
   18910:	eb001b88 	bl	1f738 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>
   18914:	e5943000 	ldr	r3, [r4]
   18918:	e3530000 	cmp	r3, #0
   1891c:	0a000004 	beq	18934 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x68>
   18920:	e5943004 	ldr	r3, [r4, #4]
   18924:	e3530000 	cmp	r3, #0
   18928:	0a000005 	beq	18944 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x78>
   1892c:	e1a00004 	mov	r0, r4
   18930:	e8bd8070 	pop	{r4, r5, r6, pc}
   18934:	e3a02025 	mov	r2, #37	; 0x25
   18938:	e59f1018 	ldr	r1, [pc, #24]	; 18958 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x8c>
   1893c:	e59f0018 	ldr	r0, [pc, #24]	; 1895c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x90>
   18940:	eb002b4e 	bl	23680 <assertion_failed>
   18944:	e3a02026 	mov	r2, #38	; 0x26
   18948:	e59f1008 	ldr	r1, [pc, #8]	; 18958 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x8c>
   1894c:	e59f000c 	ldr	r0, [pc, #12]	; 18960 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x94>
   18950:	eb002b4a 	bl	23680 <assertion_failed>
   18954:	ffffea60 	.word	0xffffea60
   18958:	00038f14 	.word	0x00038f14
   1895c:	00038f28 	.word	0x00038f28
   18960:	00038f3c 	.word	0x00038f3c

00018964 <CTransportLayer::Initialize()>:
   18964:	e3a00001 	mov	r0, #1
   18968:	e12fff1e 	bx	lr

0001896c <CTransportLayer::Bind(unsigned short, int)>:
   1896c:	e3520011 	cmp	r2, #17
   18970:	1a00004d 	bne	18aac <CTransportLayer::Bind(unsigned short, int)+0x140>
   18974:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18978:	e1a06000 	mov	r6, r0
   1897c:	e590001c 	ldr	r0, [r0, #28]
   18980:	e1a07001 	mov	r7, r1
   18984:	e3500000 	cmp	r0, #0
   18988:	1a000038 	bne	18a70 <CTransportLayer::Bind(unsigned short, int)+0x104>
   1898c:	e3a04000 	mov	r4, #0
   18990:	e2865008 	add	r5, r6, #8
   18994:	ea000006 	b	189b4 <CTransportLayer::Bind(unsigned short, int)+0x48>
   18998:	e1a01004 	mov	r1, r4
   1899c:	e1a00005 	mov	r0, r5
   189a0:	eb003758 	bl	26708 <CPtrArray::operator[](unsigned int)>
   189a4:	e5903000 	ldr	r3, [r0]
   189a8:	e3530000 	cmp	r3, #0
   189ac:	0a000004 	beq	189c4 <CTransportLayer::Bind(unsigned short, int)+0x58>
   189b0:	e2844001 	add	r4, r4, #1
   189b4:	e1a00005 	mov	r0, r5
   189b8:	eb003750 	bl	26700 <CPtrArray::GetCount() const>
   189bc:	e1540000 	cmp	r4, r0
   189c0:	3afffff4 	bcc	18998 <CTransportLayer::Bind(unsigned short, int)+0x2c>
   189c4:	e1a00005 	mov	r0, r5
   189c8:	eb00374c 	bl	26700 <CPtrArray::GetCount() const>
   189cc:	e1540000 	cmp	r4, r0
   189d0:	2a000021 	bcs	18a5c <CTransportLayer::Bind(unsigned short, int)+0xf0>
   189d4:	e3570000 	cmp	r7, #0
   189d8:	0a00001a 	beq	18a48 <CTransportLayer::Bind(unsigned short, int)+0xdc>
   189dc:	e5963000 	ldr	r3, [r6]
   189e0:	e3530000 	cmp	r3, #0
   189e4:	0a000028 	beq	18a8c <CTransportLayer::Bind(unsigned short, int)+0x120>
   189e8:	e5963004 	ldr	r3, [r6, #4]
   189ec:	e3530000 	cmp	r3, #0
   189f0:	0a000029 	beq	18a9c <CTransportLayer::Bind(unsigned short, int)+0x130>
   189f4:	e3a00048 	mov	r0, #72	; 0x48
   189f8:	eb00453d 	bl	29ef4 <operator new(unsigned int)>
   189fc:	e8960006 	ldm	r6, {r1, r2}
   18a00:	e1a03007 	mov	r3, r7
   18a04:	e1a08000 	mov	r8, r0
   18a08:	eb0010f5 	bl	1cde4 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   18a0c:	e1a01004 	mov	r1, r4
   18a10:	e1a00005 	mov	r0, r5
   18a14:	eb00373b 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18a18:	e1a01004 	mov	r1, r4
   18a1c:	e5808000 	str	r8, [r0]
   18a20:	e1a00005 	mov	r0, r5
   18a24:	eb003737 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18a28:	e5903000 	ldr	r3, [r0]
   18a2c:	e3530000 	cmp	r3, #0
   18a30:	0a00001f 	beq	18ab4 <CTransportLayer::Bind(unsigned short, int)+0x148>
   18a34:	e596301c 	ldr	r3, [r6, #28]
   18a38:	e3530000 	cmp	r3, #0
   18a3c:	1a000010 	bne	18a84 <CTransportLayer::Bind(unsigned short, int)+0x118>
   18a40:	e1a00004 	mov	r0, r4
   18a44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18a48:	e596301c 	ldr	r3, [r6, #28]
   18a4c:	e3530000 	cmp	r3, #0
   18a50:	1a000008 	bne	18a78 <CTransportLayer::Bind(unsigned short, int)+0x10c>
   18a54:	e3e00000 	mvn	r0, #0
   18a58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18a5c:	e3a01000 	mov	r1, #0
   18a60:	e1a00005 	mov	r0, r5
   18a64:	eb00375f 	bl	267e8 <CPtrArray::Append(void*)>
   18a68:	e1a04000 	mov	r4, r0
   18a6c:	eaffffd8 	b	189d4 <CTransportLayer::Bind(unsigned short, int)+0x68>
   18a70:	eb004851 	bl	2abbc <EnterCritical>
   18a74:	eaffffc4 	b	1898c <CTransportLayer::Bind(unsigned short, int)+0x20>
   18a78:	eb00487a 	bl	2ac68 <LeaveCritical>
   18a7c:	e3e00000 	mvn	r0, #0
   18a80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18a84:	eb004877 	bl	2ac68 <LeaveCritical>
   18a88:	eaffffec 	b	18a40 <CTransportLayer::Bind(unsigned short, int)+0xd4>
   18a8c:	e3a020ad 	mov	r2, #173	; 0xad
   18a90:	e59f102c 	ldr	r1, [pc, #44]	; 18ac4 <CTransportLayer::Bind(unsigned short, int)+0x158>
   18a94:	e59f002c 	ldr	r0, [pc, #44]	; 18ac8 <CTransportLayer::Bind(unsigned short, int)+0x15c>
   18a98:	eb002af8 	bl	23680 <assertion_failed>
   18a9c:	e3a020ae 	mov	r2, #174	; 0xae
   18aa0:	e59f101c 	ldr	r1, [pc, #28]	; 18ac4 <CTransportLayer::Bind(unsigned short, int)+0x158>
   18aa4:	e59f0020 	ldr	r0, [pc, #32]	; 18acc <CTransportLayer::Bind(unsigned short, int)+0x160>
   18aa8:	eb002af4 	bl	23680 <assertion_failed>
   18aac:	e3e00000 	mvn	r0, #0
   18ab0:	e12fff1e 	bx	lr
   18ab4:	e3a020b0 	mov	r2, #176	; 0xb0
   18ab8:	e59f1004 	ldr	r1, [pc, #4]	; 18ac4 <CTransportLayer::Bind(unsigned short, int)+0x158>
   18abc:	e59f000c 	ldr	r0, [pc, #12]	; 18ad0 <CTransportLayer::Bind(unsigned short, int)+0x164>
   18ac0:	eb002aee 	bl	23680 <assertion_failed>
   18ac4:	00038f14 	.word	0x00038f14
   18ac8:	00038f28 	.word	0x00038f28
   18acc:	00038f3c 	.word	0x00038f3c
   18ad0:	00038f54 	.word	0x00038f54

00018ad4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>:
   18ad4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ad8:	e1a08000 	mov	r8, r0
   18adc:	e590001c 	ldr	r0, [r0, #28]
   18ae0:	e24dd014 	sub	sp, sp, #20
   18ae4:	e3500000 	cmp	r0, #0
   18ae8:	e58d1008 	str	r1, [sp, #8]
   18aec:	e58d200c 	str	r2, [sp, #12]
   18af0:	e1a06003 	mov	r6, r3
   18af4:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
   18af8:	1a000072 	bne	18cc8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1f4>
   18afc:	e3a07000 	mov	r7, #0
   18b00:	e2885008 	add	r5, r8, #8
   18b04:	ea000006 	b	18b24 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x50>
   18b08:	e1a01007 	mov	r1, r7
   18b0c:	e1a00005 	mov	r0, r5
   18b10:	eb0036fc 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18b14:	e5903000 	ldr	r3, [r0]
   18b18:	e3530000 	cmp	r3, #0
   18b1c:	0a000004 	beq	18b34 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x60>
   18b20:	e2877001 	add	r7, r7, #1
   18b24:	e1a00005 	mov	r0, r5
   18b28:	eb0036f4 	bl	26700 <CPtrArray::GetCount() const>
   18b2c:	e1570000 	cmp	r7, r0
   18b30:	3afffff4 	bcc	18b08 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x34>
   18b34:	e1a00005 	mov	r0, r5
   18b38:	eb0036f0 	bl	26700 <CPtrArray::GetCount() const>
   18b3c:	e1570000 	cmp	r7, r0
   18b40:	2a00005b 	bcs	18cb4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1e0>
   18b44:	e3560000 	cmp	r6, #0
   18b48:	1a000026 	bne	18be8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x114>
   18b4c:	e59fa200 	ldr	sl, [pc, #512]	; 18d54 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x280>
   18b50:	e59fb200 	ldr	fp, [pc, #512]	; 18d58 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x284>
   18b54:	e1d861b8 	ldrh	r6, [r8, #24]
   18b58:	e3a04000 	mov	r4, #0
   18b5c:	e2863001 	add	r3, r6, #1
   18b60:	e6ff3073 	uxth	r3, r3
   18b64:	e153000a 	cmp	r3, sl
   18b68:	91c831b8 	strhls	r3, [r8, #24]
   18b6c:	81c8b1b8 	strhhi	fp, [r8, #24]
   18b70:	ea000000 	b	18b78 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   18b74:	e2844001 	add	r4, r4, #1
   18b78:	e1a00005 	mov	r0, r5
   18b7c:	eb0036df 	bl	26700 <CPtrArray::GetCount() const>
   18b80:	e1540000 	cmp	r4, r0
   18b84:	2a000013 	bcs	18bd8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x104>
   18b88:	e1a01004 	mov	r1, r4
   18b8c:	e1a00005 	mov	r0, r5
   18b90:	eb0036dc 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18b94:	e5903000 	ldr	r3, [r0]
   18b98:	e3530000 	cmp	r3, #0
   18b9c:	0afffff4 	beq	18b74 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   18ba0:	e1a01004 	mov	r1, r4
   18ba4:	e1a00005 	mov	r0, r5
   18ba8:	eb0036d6 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18bac:	e5900000 	ldr	r0, [r0]
   18bb0:	eb000e0c 	bl	1c3e8 <CNetConnection::GetOwnPort() const>
   18bb4:	e1560000 	cmp	r6, r0
   18bb8:	1affffed 	bne	18b74 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   18bbc:	e1a01004 	mov	r1, r4
   18bc0:	e1a00005 	mov	r0, r5
   18bc4:	eb0036cf 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18bc8:	e5900000 	ldr	r0, [r0]
   18bcc:	eb000e10 	bl	1c414 <CNetConnection::GetProtocol() const>
   18bd0:	e1500009 	cmp	r0, r9
   18bd4:	1affffe6 	bne	18b74 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   18bd8:	e1a00005 	mov	r0, r5
   18bdc:	eb0036c7 	bl	26700 <CPtrArray::GetCount() const>
   18be0:	e1540000 	cmp	r4, r0
   18be4:	3affffda 	bcc	18b54 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x80>
   18be8:	e5983000 	ldr	r3, [r8]
   18bec:	e3530000 	cmp	r3, #0
   18bf0:	0a000049 	beq	18d1c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x248>
   18bf4:	e5983004 	ldr	r3, [r8, #4]
   18bf8:	e3530000 	cmp	r3, #0
   18bfc:	0a00004a 	beq	18d2c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x258>
   18c00:	e3590006 	cmp	r9, #6
   18c04:	0a000031 	beq	18cd0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1fc>
   18c08:	e3590011 	cmp	r9, #17
   18c0c:	1a000022 	bne	18c9c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1c8>
   18c10:	e3a00048 	mov	r0, #72	; 0x48
   18c14:	eb0044b6 	bl	29ef4 <operator new(unsigned int)>
   18c18:	e59d300c 	ldr	r3, [sp, #12]
   18c1c:	e5982004 	ldr	r2, [r8, #4]
   18c20:	e58d6004 	str	r6, [sp, #4]
   18c24:	e5981000 	ldr	r1, [r8]
   18c28:	e58d3000 	str	r3, [sp]
   18c2c:	e59d3008 	ldr	r3, [sp, #8]
   18c30:	e1a04000 	mov	r4, r0
   18c34:	eb00104f 	bl	1cd78 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   18c38:	e1a01007 	mov	r1, r7
   18c3c:	e1a00005 	mov	r0, r5
   18c40:	eb0036b0 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18c44:	e598301c 	ldr	r3, [r8, #28]
   18c48:	e5804000 	str	r4, [r0]
   18c4c:	e3530000 	cmp	r3, #0
   18c50:	1a00002f 	bne	18d14 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x240>
   18c54:	e1a01007 	mov	r1, r7
   18c58:	e1a00005 	mov	r0, r5
   18c5c:	eb0036a9 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18c60:	e5903000 	ldr	r3, [r0]
   18c64:	e3530000 	cmp	r3, #0
   18c68:	0a000035 	beq	18d44 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x270>
   18c6c:	e1a01007 	mov	r1, r7
   18c70:	e1a00005 	mov	r0, r5
   18c74:	eb0036a3 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18c78:	e5900000 	ldr	r0, [r0]
   18c7c:	e5903000 	ldr	r3, [r0]
   18c80:	e5933008 	ldr	r3, [r3, #8]
   18c84:	e12fff33 	blx	r3
   18c88:	e3500000 	cmp	r0, #0
   18c8c:	ba000005 	blt	18ca8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1d4>
   18c90:	e1a00007 	mov	r0, r7
   18c94:	e28dd014 	add	sp, sp, #20
   18c98:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c9c:	e598301c 	ldr	r3, [r8, #28]
   18ca0:	e3530000 	cmp	r3, #0
   18ca4:	1a000024 	bne	18d3c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x268>
   18ca8:	e3e00000 	mvn	r0, #0
   18cac:	e28dd014 	add	sp, sp, #20
   18cb0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cb4:	e3a01000 	mov	r1, #0
   18cb8:	e1a00005 	mov	r0, r5
   18cbc:	eb0036c9 	bl	267e8 <CPtrArray::Append(void*)>
   18cc0:	e1a07000 	mov	r7, r0
   18cc4:	eaffff9e 	b	18b44 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x70>
   18cc8:	eb0047bb 	bl	2abbc <EnterCritical>
   18ccc:	eaffff8a 	b	18afc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28>
   18cd0:	e3a000e0 	mov	r0, #224	; 0xe0
   18cd4:	eb004486 	bl	29ef4 <operator new(unsigned int)>
   18cd8:	e59d300c 	ldr	r3, [sp, #12]
   18cdc:	e5982004 	ldr	r2, [r8, #4]
   18ce0:	e58d6004 	str	r6, [sp, #4]
   18ce4:	e5981000 	ldr	r1, [r8]
   18ce8:	e58d3000 	str	r3, [sp]
   18cec:	e59d3008 	ldr	r3, [sp, #8]
   18cf0:	e1a04000 	mov	r4, r0
   18cf4:	eb0012ba 	bl	1d7e4 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   18cf8:	e1a01007 	mov	r1, r7
   18cfc:	e1a00005 	mov	r0, r5
   18d00:	eb003680 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18d04:	e598301c 	ldr	r3, [r8, #28]
   18d08:	e5804000 	str	r4, [r0]
   18d0c:	e3530000 	cmp	r3, #0
   18d10:	0affffcf 	beq	18c54 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x180>
   18d14:	eb0047d3 	bl	2ac68 <LeaveCritical>
   18d18:	eaffffcd 	b	18c54 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x180>
   18d1c:	e3a020e1 	mov	r2, #225	; 0xe1
   18d20:	e59f1034 	ldr	r1, [pc, #52]	; 18d5c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   18d24:	e59f0034 	ldr	r0, [pc, #52]	; 18d60 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28c>
   18d28:	eb002a54 	bl	23680 <assertion_failed>
   18d2c:	e3a020e2 	mov	r2, #226	; 0xe2
   18d30:	e59f1024 	ldr	r1, [pc, #36]	; 18d5c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   18d34:	e59f0028 	ldr	r0, [pc, #40]	; 18d64 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x290>
   18d38:	eb002a50 	bl	23680 <assertion_failed>
   18d3c:	eb0047c9 	bl	2ac68 <LeaveCritical>
   18d40:	eaffffd8 	b	18ca8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1d4>
   18d44:	e3a020f4 	mov	r2, #244	; 0xf4
   18d48:	e59f100c 	ldr	r1, [pc, #12]	; 18d5c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   18d4c:	e59f0014 	ldr	r0, [pc, #20]	; 18d68 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x294>
   18d50:	eb002a4a 	bl	23680 <assertion_failed>
   18d54:	0000ee47 	.word	0x0000ee47
   18d58:	ffffea60 	.word	0xffffea60
   18d5c:	00038f14 	.word	0x00038f14
   18d60:	00038f28 	.word	0x00038f28
   18d64:	00038f3c 	.word	0x00038f3c
   18d68:	00038f54 	.word	0x00038f54

00018d6c <CTransportLayer::Listen(unsigned short, int)>:
   18d6c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18d70:	e1a06000 	mov	r6, r0
   18d74:	e590001c 	ldr	r0, [r0, #28]
   18d78:	e1a07001 	mov	r7, r1
   18d7c:	e3500000 	cmp	r0, #0
   18d80:	e1a08002 	mov	r8, r2
   18d84:	1a00001f 	bne	18e08 <CTransportLayer::Listen(unsigned short, int)+0x9c>
   18d88:	e3a04000 	mov	r4, #0
   18d8c:	e2865008 	add	r5, r6, #8
   18d90:	ea000006 	b	18db0 <CTransportLayer::Listen(unsigned short, int)+0x44>
   18d94:	e1a01004 	mov	r1, r4
   18d98:	e1a00005 	mov	r0, r5
   18d9c:	eb003659 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18da0:	e5903000 	ldr	r3, [r0]
   18da4:	e3530000 	cmp	r3, #0
   18da8:	0a000004 	beq	18dc0 <CTransportLayer::Listen(unsigned short, int)+0x54>
   18dac:	e2844001 	add	r4, r4, #1
   18db0:	e1a00005 	mov	r0, r5
   18db4:	eb003651 	bl	26700 <CPtrArray::GetCount() const>
   18db8:	e1540000 	cmp	r4, r0
   18dbc:	3afffff4 	bcc	18d94 <CTransportLayer::Listen(unsigned short, int)+0x28>
   18dc0:	e1a00005 	mov	r0, r5
   18dc4:	eb00364d 	bl	26700 <CPtrArray::GetCount() const>
   18dc8:	e1540000 	cmp	r4, r0
   18dcc:	2a000008 	bcs	18df4 <CTransportLayer::Listen(unsigned short, int)+0x88>
   18dd0:	e3570000 	cmp	r7, #0
   18dd4:	0a000001 	beq	18de0 <CTransportLayer::Listen(unsigned short, int)+0x74>
   18dd8:	e3580006 	cmp	r8, #6
   18ddc:	0a00000e 	beq	18e1c <CTransportLayer::Listen(unsigned short, int)+0xb0>
   18de0:	e596301c 	ldr	r3, [r6, #28]
   18de4:	e3530000 	cmp	r3, #0
   18de8:	1a000008 	bne	18e10 <CTransportLayer::Listen(unsigned short, int)+0xa4>
   18dec:	e3e00000 	mvn	r0, #0
   18df0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18df4:	e3a01000 	mov	r1, #0
   18df8:	e1a00005 	mov	r0, r5
   18dfc:	eb003679 	bl	267e8 <CPtrArray::Append(void*)>
   18e00:	e1a04000 	mov	r4, r0
   18e04:	eafffff1 	b	18dd0 <CTransportLayer::Listen(unsigned short, int)+0x64>
   18e08:	eb00476b 	bl	2abbc <EnterCritical>
   18e0c:	eaffffdd 	b	18d88 <CTransportLayer::Listen(unsigned short, int)+0x1c>
   18e10:	eb004794 	bl	2ac68 <LeaveCritical>
   18e14:	e3e00000 	mvn	r0, #0
   18e18:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18e1c:	e5963000 	ldr	r3, [r6]
   18e20:	e3530000 	cmp	r3, #0
   18e24:	0a000019 	beq	18e90 <CTransportLayer::Listen(unsigned short, int)+0x124>
   18e28:	e5963004 	ldr	r3, [r6, #4]
   18e2c:	e3530000 	cmp	r3, #0
   18e30:	0a00001a 	beq	18ea0 <CTransportLayer::Listen(unsigned short, int)+0x134>
   18e34:	e3a000e0 	mov	r0, #224	; 0xe0
   18e38:	eb00442d 	bl	29ef4 <operator new(unsigned int)>
   18e3c:	e8960006 	ldm	r6, {r1, r2}
   18e40:	e1a03007 	mov	r3, r7
   18e44:	e1a08000 	mov	r8, r0
   18e48:	eb0010a8 	bl	1d0f0 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   18e4c:	e1a01004 	mov	r1, r4
   18e50:	e1a00005 	mov	r0, r5
   18e54:	eb00362b 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18e58:	e1a01004 	mov	r1, r4
   18e5c:	e5808000 	str	r8, [r0]
   18e60:	e1a00005 	mov	r0, r5
   18e64:	eb003627 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18e68:	e5903000 	ldr	r3, [r0]
   18e6c:	e3530000 	cmp	r3, #0
   18e70:	0a00000e 	beq	18eb0 <CTransportLayer::Listen(unsigned short, int)+0x144>
   18e74:	e596301c 	ldr	r3, [r6, #28]
   18e78:	e3530000 	cmp	r3, #0
   18e7c:	1a000001 	bne	18e88 <CTransportLayer::Listen(unsigned short, int)+0x11c>
   18e80:	e1a00004 	mov	r0, r4
   18e84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18e88:	eb004776 	bl	2ac68 <LeaveCritical>
   18e8c:	eafffffb 	b	18e80 <CTransportLayer::Listen(unsigned short, int)+0x114>
   18e90:	e59f2028 	ldr	r2, [pc, #40]	; 18ec0 <CTransportLayer::Listen(unsigned short, int)+0x154>
   18e94:	e59f1028 	ldr	r1, [pc, #40]	; 18ec4 <CTransportLayer::Listen(unsigned short, int)+0x158>
   18e98:	e59f0028 	ldr	r0, [pc, #40]	; 18ec8 <CTransportLayer::Listen(unsigned short, int)+0x15c>
   18e9c:	eb0029f7 	bl	23680 <assertion_failed>
   18ea0:	e59f2024 	ldr	r2, [pc, #36]	; 18ecc <CTransportLayer::Listen(unsigned short, int)+0x160>
   18ea4:	e59f1018 	ldr	r1, [pc, #24]	; 18ec4 <CTransportLayer::Listen(unsigned short, int)+0x158>
   18ea8:	e59f0020 	ldr	r0, [pc, #32]	; 18ed0 <CTransportLayer::Listen(unsigned short, int)+0x164>
   18eac:	eb0029f3 	bl	23680 <assertion_failed>
   18eb0:	e59f201c 	ldr	r2, [pc, #28]	; 18ed4 <CTransportLayer::Listen(unsigned short, int)+0x168>
   18eb4:	e59f1008 	ldr	r1, [pc, #8]	; 18ec4 <CTransportLayer::Listen(unsigned short, int)+0x158>
   18eb8:	e59f0018 	ldr	r0, [pc, #24]	; 18ed8 <CTransportLayer::Listen(unsigned short, int)+0x16c>
   18ebc:	eb0029ef 	bl	23680 <assertion_failed>
   18ec0:	0000011e 	.word	0x0000011e
   18ec4:	00038f14 	.word	0x00038f14
   18ec8:	00038f28 	.word	0x00038f28
   18ecc:	0000011f 	.word	0x0000011f
   18ed0:	00038f3c 	.word	0x00038f3c
   18ed4:	00000121 	.word	0x00000121
   18ed8:	00038f54 	.word	0x00038f54

00018edc <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>:
   18edc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18ee0:	e2535000 	subs	r5, r3, #0
   18ee4:	ba00001c 	blt	18f5c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x80>
   18ee8:	e2804008 	add	r4, r0, #8
   18eec:	e1a00004 	mov	r0, r4
   18ef0:	e1a06001 	mov	r6, r1
   18ef4:	e1a07002 	mov	r7, r2
   18ef8:	eb003600 	bl	26700 <CPtrArray::GetCount() const>
   18efc:	e1550000 	cmp	r5, r0
   18f00:	ba000001 	blt	18f0c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x30>
   18f04:	e3e00000 	mvn	r0, #0
   18f08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18f0c:	e1a01005 	mov	r1, r5
   18f10:	e1a00004 	mov	r0, r4
   18f14:	eb0035fb 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18f18:	e5903000 	ldr	r3, [r0]
   18f1c:	e3530000 	cmp	r3, #0
   18f20:	0afffff7 	beq	18f04 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x28>
   18f24:	e3560000 	cmp	r6, #0
   18f28:	0a00000f 	beq	18f6c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x90>
   18f2c:	e3570000 	cmp	r7, #0
   18f30:	0a000011 	beq	18f7c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xa0>
   18f34:	e1a01005 	mov	r1, r5
   18f38:	e1a00004 	mov	r0, r4
   18f3c:	eb0035f1 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18f40:	e5900000 	ldr	r0, [r0]
   18f44:	e1a02007 	mov	r2, r7
   18f48:	e5903000 	ldr	r3, [r0]
   18f4c:	e1a01006 	mov	r1, r6
   18f50:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   18f54:	e593300c 	ldr	r3, [r3, #12]
   18f58:	e12fff13 	bx	r3
   18f5c:	e59f2028 	ldr	r2, [pc, #40]	; 18f8c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb0>
   18f60:	e59f1028 	ldr	r1, [pc, #40]	; 18f90 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb4>
   18f64:	e59f0028 	ldr	r0, [pc, #40]	; 18f94 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb8>
   18f68:	eb0029c4 	bl	23680 <assertion_failed>
   18f6c:	e59f2024 	ldr	r2, [pc, #36]	; 18f98 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xbc>
   18f70:	e59f1018 	ldr	r1, [pc, #24]	; 18f90 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb4>
   18f74:	e59f0020 	ldr	r0, [pc, #32]	; 18f9c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc0>
   18f78:	eb0029c0 	bl	23680 <assertion_failed>
   18f7c:	e59f201c 	ldr	r2, [pc, #28]	; 18fa0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   18f80:	e59f1008 	ldr	r1, [pc, #8]	; 18f90 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb4>
   18f84:	e59f0018 	ldr	r0, [pc, #24]	; 18fa4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc8>
   18f88:	eb0029bc 	bl	23680 <assertion_failed>
   18f8c:	0000012a 	.word	0x0000012a
   18f90:	00038f14 	.word	0x00038f14
   18f94:	00038f6c 	.word	0x00038f6c
   18f98:	00000131 	.word	0x00000131
   18f9c:	00038f80 	.word	0x00038f80
   18fa0:	00000132 	.word	0x00000132
   18fa4:	00038f90 	.word	0x00038f90

00018fa8 <CTransportLayer::Disconnect(int)>:
   18fa8:	e92d4070 	push	{r4, r5, r6, lr}
   18fac:	e2515000 	subs	r5, r1, #0
   18fb0:	ba000014 	blt	19008 <CTransportLayer::Disconnect(int)+0x60>
   18fb4:	e2804008 	add	r4, r0, #8
   18fb8:	e1a00004 	mov	r0, r4
   18fbc:	eb0035cf 	bl	26700 <CPtrArray::GetCount() const>
   18fc0:	e1550000 	cmp	r5, r0
   18fc4:	ba000001 	blt	18fd0 <CTransportLayer::Disconnect(int)+0x28>
   18fc8:	e3e00000 	mvn	r0, #0
   18fcc:	e8bd8070 	pop	{r4, r5, r6, pc}
   18fd0:	e1a01005 	mov	r1, r5
   18fd4:	e1a00004 	mov	r0, r4
   18fd8:	eb0035ca 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18fdc:	e5903000 	ldr	r3, [r0]
   18fe0:	e3530000 	cmp	r3, #0
   18fe4:	0afffff7 	beq	18fc8 <CTransportLayer::Disconnect(int)+0x20>
   18fe8:	e1a01005 	mov	r1, r5
   18fec:	e1a00004 	mov	r0, r4
   18ff0:	eb0035c4 	bl	26708 <CPtrArray::operator[](unsigned int)>
   18ff4:	e8bd4070 	pop	{r4, r5, r6, lr}
   18ff8:	e5900000 	ldr	r0, [r0]
   18ffc:	e5903000 	ldr	r3, [r0]
   19000:	e5933010 	ldr	r3, [r3, #16]
   19004:	e12fff13 	bx	r3
   19008:	e3a02f4e 	mov	r2, #312	; 0x138
   1900c:	e59f1004 	ldr	r1, [pc, #4]	; 19018 <CTransportLayer::Disconnect(int)+0x70>
   19010:	e59f0004 	ldr	r0, [pc, #4]	; 1901c <CTransportLayer::Disconnect(int)+0x74>
   19014:	eb002999 	bl	23680 <assertion_failed>
   19018:	00038f14 	.word	0x00038f14
   1901c:	00038f6c 	.word	0x00038f6c

00019020 <CTransportLayer::Send(void const*, unsigned int, int, int)>:
   19020:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19024:	e59d5018 	ldr	r5, [sp, #24]
   19028:	e3550000 	cmp	r5, #0
   1902c:	ba00001f 	blt	190b0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x90>
   19030:	e2804008 	add	r4, r0, #8
   19034:	e1a00004 	mov	r0, r4
   19038:	e1a06001 	mov	r6, r1
   1903c:	e1a07002 	mov	r7, r2
   19040:	e1a08003 	mov	r8, r3
   19044:	eb0035ad 	bl	26700 <CPtrArray::GetCount() const>
   19048:	e1550000 	cmp	r5, r0
   1904c:	ba000001 	blt	19058 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x38>
   19050:	e3e00000 	mvn	r0, #0
   19054:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19058:	e1a01005 	mov	r1, r5
   1905c:	e1a00004 	mov	r0, r4
   19060:	eb0035a8 	bl	26708 <CPtrArray::operator[](unsigned int)>
   19064:	e5903000 	ldr	r3, [r0]
   19068:	e3530000 	cmp	r3, #0
   1906c:	0afffff7 	beq	19050 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x30>
   19070:	e3560000 	cmp	r6, #0
   19074:	0a000011 	beq	190c0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xa0>
   19078:	e3570000 	cmp	r7, #0
   1907c:	0a000013 	beq	190d0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xb0>
   19080:	e1a01005 	mov	r1, r5
   19084:	e1a00004 	mov	r0, r4
   19088:	eb00359e 	bl	26708 <CPtrArray::operator[](unsigned int)>
   1908c:	e5900000 	ldr	r0, [r0]
   19090:	e1a03008 	mov	r3, r8
   19094:	e590c000 	ldr	ip, [r0]
   19098:	e1a02007 	mov	r2, r7
   1909c:	e59ce014 	ldr	lr, [ip, #20]
   190a0:	e1a01006 	mov	r1, r6
   190a4:	e1a0c00e 	mov	ip, lr
   190a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   190ac:	e12fff1c 	bx	ip
   190b0:	e3a02f51 	mov	r2, #324	; 0x144
   190b4:	e59f1024 	ldr	r1, [pc, #36]	; 190e0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc0>
   190b8:	e59f0024 	ldr	r0, [pc, #36]	; 190e4 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc4>
   190bc:	eb00296f 	bl	23680 <assertion_failed>
   190c0:	e59f2020 	ldr	r2, [pc, #32]	; 190e8 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc8>
   190c4:	e59f1014 	ldr	r1, [pc, #20]	; 190e0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc0>
   190c8:	e59f001c 	ldr	r0, [pc, #28]	; 190ec <CTransportLayer::Send(void const*, unsigned int, int, int)+0xcc>
   190cc:	eb00296b 	bl	23680 <assertion_failed>
   190d0:	e3a02f53 	mov	r2, #332	; 0x14c
   190d4:	e59f1004 	ldr	r1, [pc, #4]	; 190e0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc0>
   190d8:	e59f0010 	ldr	r0, [pc, #16]	; 190f0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   190dc:	eb002967 	bl	23680 <assertion_failed>
   190e0:	00038f14 	.word	0x00038f14
   190e4:	00038f6c 	.word	0x00038f6c
   190e8:	0000014b 	.word	0x0000014b
   190ec:	00038fa4 	.word	0x00038fa4
   190f0:	00038fb0 	.word	0x00038fb0

000190f4 <CTransportLayer::Receive(void*, int, int)>:
   190f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   190f8:	e2535000 	subs	r5, r3, #0
   190fc:	ba00001a 	blt	1916c <CTransportLayer::Receive(void*, int, int)+0x78>
   19100:	e2804008 	add	r4, r0, #8
   19104:	e1a00004 	mov	r0, r4
   19108:	e1a06001 	mov	r6, r1
   1910c:	e1a07002 	mov	r7, r2
   19110:	eb00357a 	bl	26700 <CPtrArray::GetCount() const>
   19114:	e1550000 	cmp	r5, r0
   19118:	ba000001 	blt	19124 <CTransportLayer::Receive(void*, int, int)+0x30>
   1911c:	e3e00000 	mvn	r0, #0
   19120:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19124:	e1a01005 	mov	r1, r5
   19128:	e1a00004 	mov	r0, r4
   1912c:	eb003575 	bl	26708 <CPtrArray::operator[](unsigned int)>
   19130:	e5903000 	ldr	r3, [r0]
   19134:	e3530000 	cmp	r3, #0
   19138:	0afffff7 	beq	1911c <CTransportLayer::Receive(void*, int, int)+0x28>
   1913c:	e3560000 	cmp	r6, #0
   19140:	0a00000d 	beq	1917c <CTransportLayer::Receive(void*, int, int)+0x88>
   19144:	e1a01005 	mov	r1, r5
   19148:	e1a00004 	mov	r0, r4
   1914c:	eb00356d 	bl	26708 <CPtrArray::operator[](unsigned int)>
   19150:	e5900000 	ldr	r0, [r0]
   19154:	e1a02007 	mov	r2, r7
   19158:	e5903000 	ldr	r3, [r0]
   1915c:	e1a01006 	mov	r1, r6
   19160:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   19164:	e5933018 	ldr	r3, [r3, #24]
   19168:	e12fff13 	bx	r3
   1916c:	e59f2018 	ldr	r2, [pc, #24]	; 1918c <CTransportLayer::Receive(void*, int, int)+0x98>
   19170:	e59f1018 	ldr	r1, [pc, #24]	; 19190 <CTransportLayer::Receive(void*, int, int)+0x9c>
   19174:	e59f0018 	ldr	r0, [pc, #24]	; 19194 <CTransportLayer::Receive(void*, int, int)+0xa0>
   19178:	eb002940 	bl	23680 <assertion_failed>
   1917c:	e59f2014 	ldr	r2, [pc, #20]	; 19198 <CTransportLayer::Receive(void*, int, int)+0xa4>
   19180:	e59f1008 	ldr	r1, [pc, #8]	; 19190 <CTransportLayer::Receive(void*, int, int)+0x9c>
   19184:	e59f0010 	ldr	r0, [pc, #16]	; 1919c <CTransportLayer::Receive(void*, int, int)+0xa8>
   19188:	eb00293c 	bl	23680 <assertion_failed>
   1918c:	00000152 	.word	0x00000152
   19190:	00038f14 	.word	0x00038f14
   19194:	00038f6c 	.word	0x00038f6c
   19198:	00000159 	.word	0x00000159
   1919c:	00036138 	.word	0x00036138

000191a0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>:
   191a0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   191a4:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   191a8:	e59d9020 	ldr	r9, [sp, #32]
   191ac:	e3550000 	cmp	r5, #0
   191b0:	e1dda2b4 	ldrh	sl, [sp, #36]	; 0x24
   191b4:	ba000021 	blt	19240 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xa0>
   191b8:	e2804008 	add	r4, r0, #8
   191bc:	e1a00004 	mov	r0, r4
   191c0:	e1a06001 	mov	r6, r1
   191c4:	e1a07002 	mov	r7, r2
   191c8:	e1a08003 	mov	r8, r3
   191cc:	eb00354b 	bl	26700 <CPtrArray::GetCount() const>
   191d0:	e1550000 	cmp	r5, r0
   191d4:	ba000001 	blt	191e0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x40>
   191d8:	e3e00000 	mvn	r0, #0
   191dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   191e0:	e1a01005 	mov	r1, r5
   191e4:	e1a00004 	mov	r0, r4
   191e8:	eb003546 	bl	26708 <CPtrArray::operator[](unsigned int)>
   191ec:	e5903000 	ldr	r3, [r0]
   191f0:	e3530000 	cmp	r3, #0
   191f4:	0afffff7 	beq	191d8 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x38>
   191f8:	e3560000 	cmp	r6, #0
   191fc:	0a000013 	beq	19250 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xb0>
   19200:	e3570000 	cmp	r7, #0
   19204:	0a000015 	beq	19260 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xc0>
   19208:	e1a01005 	mov	r1, r5
   1920c:	e1a00004 	mov	r0, r4
   19210:	eb00353c 	bl	26708 <CPtrArray::operator[](unsigned int)>
   19214:	e5900000 	ldr	r0, [r0]
   19218:	e1a03008 	mov	r3, r8
   1921c:	e590c000 	ldr	ip, [r0]
   19220:	e58da024 	str	sl, [sp, #36]	; 0x24
   19224:	e58d9020 	str	r9, [sp, #32]
   19228:	e59ce01c 	ldr	lr, [ip, #28]
   1922c:	e1a02007 	mov	r2, r7
   19230:	e1a01006 	mov	r1, r6
   19234:	e1a0c00e 	mov	ip, lr
   19238:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1923c:	e12fff1c 	bx	ip
   19240:	e3a02e16 	mov	r2, #352	; 0x160
   19244:	e59f1024 	ldr	r1, [pc, #36]	; 19270 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd0>
   19248:	e59f0024 	ldr	r0, [pc, #36]	; 19274 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd4>
   1924c:	eb00290b 	bl	23680 <assertion_failed>
   19250:	e59f2020 	ldr	r2, [pc, #32]	; 19278 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd8>
   19254:	e59f1014 	ldr	r1, [pc, #20]	; 19270 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd0>
   19258:	e59f001c 	ldr	r0, [pc, #28]	; 1927c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xdc>
   1925c:	eb002907 	bl	23680 <assertion_failed>
   19260:	e3a02f5a 	mov	r2, #360	; 0x168
   19264:	e59f1004 	ldr	r1, [pc, #4]	; 19270 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd0>
   19268:	e59f0010 	ldr	r0, [pc, #16]	; 19280 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   1926c:	eb002903 	bl	23680 <assertion_failed>
   19270:	00038f14 	.word	0x00038f14
   19274:	00038f6c 	.word	0x00038f6c
   19278:	00000167 	.word	0x00000167
   1927c:	00038fa4 	.word	0x00038fa4
   19280:	00038fb0 	.word	0x00038fb0

00019284 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>:
   19284:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19288:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1928c:	e59d9020 	ldr	r9, [sp, #32]
   19290:	e3550000 	cmp	r5, #0
   19294:	ba00001e 	blt	19314 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x90>
   19298:	e2804008 	add	r4, r0, #8
   1929c:	e1a00004 	mov	r0, r4
   192a0:	e1a06001 	mov	r6, r1
   192a4:	e1a07002 	mov	r7, r2
   192a8:	e1a08003 	mov	r8, r3
   192ac:	eb003513 	bl	26700 <CPtrArray::GetCount() const>
   192b0:	e1550000 	cmp	r5, r0
   192b4:	ba000001 	blt	192c0 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x3c>
   192b8:	e3e00000 	mvn	r0, #0
   192bc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   192c0:	e1a01005 	mov	r1, r5
   192c4:	e1a00004 	mov	r0, r4
   192c8:	eb00350e 	bl	26708 <CPtrArray::operator[](unsigned int)>
   192cc:	e5903000 	ldr	r3, [r0]
   192d0:	e3530000 	cmp	r3, #0
   192d4:	0afffff7 	beq	192b8 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x34>
   192d8:	e3560000 	cmp	r6, #0
   192dc:	0a000010 	beq	19324 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xa0>
   192e0:	e1a01005 	mov	r1, r5
   192e4:	e1a00004 	mov	r0, r4
   192e8:	eb003506 	bl	26708 <CPtrArray::operator[](unsigned int)>
   192ec:	e5900000 	ldr	r0, [r0]
   192f0:	e1a03008 	mov	r3, r8
   192f4:	e590c000 	ldr	ip, [r0]
   192f8:	e58d9020 	str	r9, [sp, #32]
   192fc:	e59ce020 	ldr	lr, [ip, #32]
   19300:	e1a02007 	mov	r2, r7
   19304:	e1a01006 	mov	r1, r6
   19308:	e1a0c00e 	mov	ip, lr
   1930c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19310:	e12fff1c 	bx	ip
   19314:	e3a02e17 	mov	r2, #368	; 0x170
   19318:	e59f1014 	ldr	r1, [pc, #20]	; 19334 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb0>
   1931c:	e59f0014 	ldr	r0, [pc, #20]	; 19338 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb4>
   19320:	eb0028d6 	bl	23680 <assertion_failed>
   19324:	e59f2010 	ldr	r2, [pc, #16]	; 1933c <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb8>
   19328:	e59f1004 	ldr	r1, [pc, #4]	; 19334 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb0>
   1932c:	e59f000c 	ldr	r0, [pc, #12]	; 19340 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xbc>
   19330:	eb0028d2 	bl	23680 <assertion_failed>
   19334:	00038f14 	.word	0x00038f14
   19338:	00038f6c 	.word	0x00038f6c
   1933c:	00000177 	.word	0x00000177
   19340:	00036138 	.word	0x00036138

00019344 <CTransportLayer::SetOptionBroadcast(bool, int)>:
   19344:	e92d4070 	push	{r4, r5, r6, lr}
   19348:	e2525000 	subs	r5, r2, #0
   1934c:	ba000016 	blt	193ac <CTransportLayer::SetOptionBroadcast(bool, int)+0x68>
   19350:	e2804008 	add	r4, r0, #8
   19354:	e1a00004 	mov	r0, r4
   19358:	e1a06001 	mov	r6, r1
   1935c:	eb0034e7 	bl	26700 <CPtrArray::GetCount() const>
   19360:	e1550000 	cmp	r5, r0
   19364:	ba000001 	blt	19370 <CTransportLayer::SetOptionBroadcast(bool, int)+0x2c>
   19368:	e3e00000 	mvn	r0, #0
   1936c:	e8bd8070 	pop	{r4, r5, r6, pc}
   19370:	e1a01005 	mov	r1, r5
   19374:	e1a00004 	mov	r0, r4
   19378:	eb0034e2 	bl	26708 <CPtrArray::operator[](unsigned int)>
   1937c:	e5903000 	ldr	r3, [r0]
   19380:	e3530000 	cmp	r3, #0
   19384:	0afffff7 	beq	19368 <CTransportLayer::SetOptionBroadcast(bool, int)+0x24>
   19388:	e1a01005 	mov	r1, r5
   1938c:	e1a00004 	mov	r0, r4
   19390:	eb0034dc 	bl	26708 <CPtrArray::operator[](unsigned int)>
   19394:	e5900000 	ldr	r0, [r0]
   19398:	e1a01006 	mov	r1, r6
   1939c:	e8bd4070 	pop	{r4, r5, r6, lr}
   193a0:	e5903000 	ldr	r3, [r0]
   193a4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   193a8:	e12fff13 	bx	r3
   193ac:	e59f2008 	ldr	r2, [pc, #8]	; 193bc <CTransportLayer::SetOptionBroadcast(bool, int)+0x78>
   193b0:	e59f1008 	ldr	r1, [pc, #8]	; 193c0 <CTransportLayer::SetOptionBroadcast(bool, int)+0x7c>
   193b4:	e59f0008 	ldr	r0, [pc, #8]	; 193c4 <CTransportLayer::SetOptionBroadcast(bool, int)+0x80>
   193b8:	eb0028b0 	bl	23680 <assertion_failed>
   193bc:	0000017e 	.word	0x0000017e
   193c0:	00038f14 	.word	0x00038f14
   193c4:	00038f6c 	.word	0x00038f6c

000193c8 <CTransportLayer::IsConnected(int) const>:
   193c8:	e92d4070 	push	{r4, r5, r6, lr}
   193cc:	e2515000 	subs	r5, r1, #0
   193d0:	ba000012 	blt	19420 <CTransportLayer::IsConnected(int) const+0x58>
   193d4:	e2804008 	add	r4, r0, #8
   193d8:	e1a00004 	mov	r0, r4
   193dc:	eb0034c7 	bl	26700 <CPtrArray::GetCount() const>
   193e0:	e1550000 	cmp	r5, r0
   193e4:	ba000001 	blt	193f0 <CTransportLayer::IsConnected(int) const+0x28>
   193e8:	e3a00000 	mov	r0, #0
   193ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   193f0:	e1a01005 	mov	r1, r5
   193f4:	e1a00004 	mov	r0, r4
   193f8:	eb0034de 	bl	26778 <CPtrArray::operator[](unsigned int) const>
   193fc:	e3500000 	cmp	r0, #0
   19400:	0afffff8 	beq	193e8 <CTransportLayer::IsConnected(int) const+0x20>
   19404:	e1a01005 	mov	r1, r5
   19408:	e1a00004 	mov	r0, r4
   1940c:	eb0034d9 	bl	26778 <CPtrArray::operator[](unsigned int) const>
   19410:	e8bd4070 	pop	{r4, r5, r6, lr}
   19414:	e5903000 	ldr	r3, [r0]
   19418:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   1941c:	e12fff13 	bx	r3
   19420:	e59f2008 	ldr	r2, [pc, #8]	; 19430 <CTransportLayer::IsConnected(int) const+0x68>
   19424:	e59f1008 	ldr	r1, [pc, #8]	; 19434 <CTransportLayer::IsConnected(int) const+0x6c>
   19428:	e59f0008 	ldr	r0, [pc, #8]	; 19438 <CTransportLayer::IsConnected(int) const+0x70>
   1942c:	eb002893 	bl	23680 <assertion_failed>
   19430:	0000018a 	.word	0x0000018a
   19434:	00038f14 	.word	0x00038f14
   19438:	00038f6c 	.word	0x00038f6c

0001943c <CTransportLayer::GetForeignIP(int) const>:
   1943c:	e92d4070 	push	{r4, r5, r6, lr}
   19440:	e2515000 	subs	r5, r1, #0
   19444:	ba000010 	blt	1948c <CTransportLayer::GetForeignIP(int) const+0x50>
   19448:	e2804008 	add	r4, r0, #8
   1944c:	e1a00004 	mov	r0, r4
   19450:	eb0034aa 	bl	26700 <CPtrArray::GetCount() const>
   19454:	e1550000 	cmp	r5, r0
   19458:	ba000001 	blt	19464 <CTransportLayer::GetForeignIP(int) const+0x28>
   1945c:	e3a00000 	mov	r0, #0
   19460:	e8bd8070 	pop	{r4, r5, r6, pc}
   19464:	e1a01005 	mov	r1, r5
   19468:	e1a00004 	mov	r0, r4
   1946c:	eb0034c1 	bl	26778 <CPtrArray::operator[](unsigned int) const>
   19470:	e3500000 	cmp	r0, #0
   19474:	0afffff8 	beq	1945c <CTransportLayer::GetForeignIP(int) const+0x20>
   19478:	e1a01005 	mov	r1, r5
   1947c:	e1a00004 	mov	r0, r4
   19480:	eb0034bc 	bl	26778 <CPtrArray::operator[](unsigned int) const>
   19484:	e8bd4070 	pop	{r4, r5, r6, lr}
   19488:	ea000bd4 	b	1c3e0 <CNetConnection::GetForeignIP() const>
   1948c:	e59f2008 	ldr	r2, [pc, #8]	; 1949c <CTransportLayer::GetForeignIP(int) const+0x60>
   19490:	e59f1008 	ldr	r1, [pc, #8]	; 194a0 <CTransportLayer::GetForeignIP(int) const+0x64>
   19494:	e59f0008 	ldr	r0, [pc, #8]	; 194a4 <CTransportLayer::GetForeignIP(int) const+0x68>
   19498:	eb002878 	bl	23680 <assertion_failed>
   1949c:	00000196 	.word	0x00000196
   194a0:	00038f14 	.word	0x00038f14
   194a4:	00038f6c 	.word	0x00038f6c

000194a8 <CTransportLayer::~CTransportLayer()>:
   194a8:	e3a03000 	mov	r3, #0
   194ac:	e92d4010 	push	{r4, lr}
   194b0:	e1a04000 	mov	r4, r0
   194b4:	e5803004 	str	r3, [r0, #4]
   194b8:	e4803020 	str	r3, [r0], #32
   194bc:	eb00188a 	bl	1f6ec <CTCPRejector::~CTCPRejector()>
   194c0:	e2840008 	add	r0, r4, #8
   194c4:	eb003482 	bl	266d4 <CPtrArray::~CPtrArray()>
   194c8:	e1a00004 	mov	r0, r4
   194cc:	e8bd8010 	pop	{r4, pc}

000194d0 <CTransportLayer::Process()>:
   194d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194d4:	e1a07000 	mov	r7, r0
   194d8:	e24dde67 	sub	sp, sp, #1648	; 0x670
   194dc:	e24dd004 	sub	sp, sp, #4
   194e0:	e28d0020 	add	r0, sp, #32
   194e4:	e28d6028 	add	r6, sp, #40	; 0x28
   194e8:	eb0019c7 	bl	1fc0c <CIPAddress::CIPAddress()>
   194ec:	e1a00006 	mov	r0, r6
   194f0:	eb0019c5 	bl	1fc0c <CIPAddress::CIPAddress()>
   194f4:	e5970004 	ldr	r0, [r7, #4]
   194f8:	e3500000 	cmp	r0, #0
   194fc:	12874008 	addne	r4, r7, #8
   19500:	128d801c 	addne	r8, sp, #28
   19504:	12879020 	addne	r9, r7, #32
   19508:	0a0000a5 	beq	197a4 <CTransportLayer::Process()+0x2d4>
   1950c:	e88d0140 	stm	sp, {r6, r8}
   19510:	e28d3020 	add	r3, sp, #32
   19514:	e28d2018 	add	r2, sp, #24
   19518:	e28d1030 	add	r1, sp, #48	; 0x30
   1951c:	eb00022c 	bl	19dd4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>
   19520:	e3500000 	cmp	r0, #0
   19524:	0a000021 	beq	195b0 <CTransportLayer::Process()+0xe0>
   19528:	e3a05000 	mov	r5, #0
   1952c:	ea000015 	b	19588 <CTransportLayer::Process()+0xb8>
   19530:	e1a01005 	mov	r1, r5
   19534:	e1a00004 	mov	r0, r4
   19538:	eb003472 	bl	26708 <CPtrArray::operator[](unsigned int)>
   1953c:	e5903000 	ldr	r3, [r0]
   19540:	e3530000 	cmp	r3, #0
   19544:	0a00000e 	beq	19584 <CTransportLayer::Process()+0xb4>
   19548:	e1a01005 	mov	r1, r5
   1954c:	e1a00004 	mov	r0, r4
   19550:	eb00346c 	bl	26708 <CPtrArray::operator[](unsigned int)>
   19554:	e5900000 	ldr	r0, [r0]
   19558:	e59d101c 	ldr	r1, [sp, #28]
   1955c:	e5903000 	ldr	r3, [r0]
   19560:	e58d1004 	str	r1, [sp, #4]
   19564:	e58d6000 	str	r6, [sp]
   19568:	e593a034 	ldr	sl, [r3, #52]	; 0x34
   1956c:	e59d2018 	ldr	r2, [sp, #24]
   19570:	e28d3020 	add	r3, sp, #32
   19574:	e28d1030 	add	r1, sp, #48	; 0x30
   19578:	e12fff3a 	blx	sl
   1957c:	e3500000 	cmp	r0, #0
   19580:	1a000004 	bne	19598 <CTransportLayer::Process()+0xc8>
   19584:	e2855001 	add	r5, r5, #1
   19588:	e1a00004 	mov	r0, r4
   1958c:	eb00345b 	bl	26700 <CPtrArray::GetCount() const>
   19590:	e1550000 	cmp	r5, r0
   19594:	3affffe5 	bcc	19530 <CTransportLayer::Process()+0x60>
   19598:	e1a00004 	mov	r0, r4
   1959c:	eb003457 	bl	26700 <CPtrArray::GetCount() const>
   195a0:	e1550000 	cmp	r5, r0
   195a4:	2a000064 	bcs	1973c <CTransportLayer::Process()+0x26c>
   195a8:	e5970004 	ldr	r0, [r7, #4]
   195ac:	eaffffd6 	b	1950c <CTransportLayer::Process()+0x3c>
   195b0:	e28da016 	add	sl, sp, #22
   195b4:	e28d9014 	add	r9, sp, #20
   195b8:	e5970004 	ldr	r0, [r7, #4]
   195bc:	e1a03006 	mov	r3, r6
   195c0:	e58d8008 	str	r8, [sp, #8]
   195c4:	e88d0600 	stm	sp, {r9, sl}
   195c8:	e28d2020 	add	r2, sp, #32
   195cc:	e28d1013 	add	r1, sp, #19
   195d0:	eb000246 	bl	19ef0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>
   195d4:	e3500000 	cmp	r0, #0
   195d8:	0a00001c 	beq	19650 <CTransportLayer::Process()+0x180>
   195dc:	e3a05000 	mov	r5, #0
   195e0:	e1a00004 	mov	r0, r4
   195e4:	eb003445 	bl	26700 <CPtrArray::GetCount() const>
   195e8:	e1550000 	cmp	r5, r0
   195ec:	2afffff1 	bcs	195b8 <CTransportLayer::Process()+0xe8>
   195f0:	e1a01005 	mov	r1, r5
   195f4:	e1a00004 	mov	r0, r4
   195f8:	eb003442 	bl	26708 <CPtrArray::operator[](unsigned int)>
   195fc:	e5903000 	ldr	r3, [r0]
   19600:	e3530000 	cmp	r3, #0
   19604:	0a00000f 	beq	19648 <CTransportLayer::Process()+0x178>
   19608:	e1a01005 	mov	r1, r5
   1960c:	e1a00004 	mov	r0, r4
   19610:	eb00343c 	bl	26708 <CPtrArray::operator[](unsigned int)>
   19614:	e1dd21b4 	ldrh	r2, [sp, #20]
   19618:	e5900000 	ldr	r0, [r0]
   1961c:	e59de01c 	ldr	lr, [sp, #28]
   19620:	e1ddc1b6 	ldrh	ip, [sp, #22]
   19624:	e5903000 	ldr	r3, [r0]
   19628:	e88d5004 	stm	sp, {r2, ip, lr}
   1962c:	e5dd1013 	ldrb	r1, [sp, #19]
   19630:	e593b038 	ldr	fp, [r3, #56]	; 0x38
   19634:	e28d2020 	add	r2, sp, #32
   19638:	e1a03006 	mov	r3, r6
   1963c:	e12fff3b 	blx	fp
   19640:	e3500000 	cmp	r0, #0
   19644:	1affffdb 	bne	195b8 <CTransportLayer::Process()+0xe8>
   19648:	e2855001 	add	r5, r5, #1
   1964c:	eaffffe3 	b	195e0 <CTransportLayer::Process()+0x110>
   19650:	e1a05000 	mov	r5, r0
   19654:	e1a08000 	mov	r8, r0
   19658:	ea000005 	b	19674 <CTransportLayer::Process()+0x1a4>
   1965c:	eb003429 	bl	26708 <CPtrArray::operator[](unsigned int)>
   19660:	e5900000 	ldr	r0, [r0]
   19664:	e5903000 	ldr	r3, [r0]
   19668:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   1966c:	e12fff33 	blx	r3
   19670:	e2855001 	add	r5, r5, #1
   19674:	e1a00004 	mov	r0, r4
   19678:	eb003420 	bl	26700 <CPtrArray::GetCount() const>
   1967c:	e1550000 	cmp	r5, r0
   19680:	2a00001c 	bcs	196f8 <CTransportLayer::Process()+0x228>
   19684:	e1a01005 	mov	r1, r5
   19688:	e1a00004 	mov	r0, r4
   1968c:	eb00341d 	bl	26708 <CPtrArray::operator[](unsigned int)>
   19690:	e5903000 	ldr	r3, [r0]
   19694:	e3530000 	cmp	r3, #0
   19698:	0afffff4 	beq	19670 <CTransportLayer::Process()+0x1a0>
   1969c:	e1a01005 	mov	r1, r5
   196a0:	e1a00004 	mov	r0, r4
   196a4:	eb003417 	bl	26708 <CPtrArray::operator[](unsigned int)>
   196a8:	e5900000 	ldr	r0, [r0]
   196ac:	e5903000 	ldr	r3, [r0]
   196b0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   196b4:	e12fff33 	blx	r3
   196b8:	e3500000 	cmp	r0, #0
   196bc:	e1a01005 	mov	r1, r5
   196c0:	e1a00004 	mov	r0, r4
   196c4:	0affffe4 	beq	1965c <CTransportLayer::Process()+0x18c>
   196c8:	eb00340e 	bl	26708 <CPtrArray::operator[](unsigned int)>
   196cc:	e5900000 	ldr	r0, [r0]
   196d0:	e3500000 	cmp	r0, #0
   196d4:	0a000002 	beq	196e4 <CTransportLayer::Process()+0x214>
   196d8:	e5903000 	ldr	r3, [r0]
   196dc:	e5933004 	ldr	r3, [r3, #4]
   196e0:	e12fff33 	blx	r3
   196e4:	e1a01005 	mov	r1, r5
   196e8:	e1a00004 	mov	r0, r4
   196ec:	eb003405 	bl	26708 <CPtrArray::operator[](unsigned int)>
   196f0:	e5808000 	str	r8, [r0]
   196f4:	eaffffdd 	b	19670 <CTransportLayer::Process()+0x1a0>
   196f8:	e597001c 	ldr	r0, [r7, #28]
   196fc:	e3500000 	cmp	r0, #0
   19700:	1a000025 	bne	1979c <CTransportLayer::Process()+0x2cc>
   19704:	e1a00004 	mov	r0, r4
   19708:	eb0033fc 	bl	26700 <CPtrArray::GetCount() const>
   1970c:	e3500000 	cmp	r0, #0
   19710:	1a000014 	bne	19768 <CTransportLayer::Process()+0x298>
   19714:	e597301c 	ldr	r3, [r7, #28]
   19718:	e3530000 	cmp	r3, #0
   1971c:	1a00000f 	bne	19760 <CTransportLayer::Process()+0x290>
   19720:	e1a00006 	mov	r0, r6
   19724:	eb00194e 	bl	1fc64 <CIPAddress::~CIPAddress()>
   19728:	e28d0020 	add	r0, sp, #32
   1972c:	eb00194c 	bl	1fc64 <CIPAddress::~CIPAddress()>
   19730:	e28dde67 	add	sp, sp, #1648	; 0x670
   19734:	e28dd004 	add	sp, sp, #4
   19738:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1973c:	e59d301c 	ldr	r3, [sp, #28]
   19740:	e59d2018 	ldr	r2, [sp, #24]
   19744:	e58d3004 	str	r3, [sp, #4]
   19748:	e58d6000 	str	r6, [sp]
   1974c:	e28d3020 	add	r3, sp, #32
   19750:	e28d1030 	add	r1, sp, #48	; 0x30
   19754:	e1a00009 	mov	r0, r9
   19758:	eb001838 	bl	1f840 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>
   1975c:	eaffff91 	b	195a8 <CTransportLayer::Process()+0xd8>
   19760:	eb004540 	bl	2ac68 <LeaveCritical>
   19764:	eaffffed 	b	19720 <CTransportLayer::Process()+0x250>
   19768:	e2405001 	sub	r5, r0, #1
   1976c:	e1a01005 	mov	r1, r5
   19770:	e1a00004 	mov	r0, r4
   19774:	eb0033e3 	bl	26708 <CPtrArray::operator[](unsigned int)>
   19778:	e5903000 	ldr	r3, [r0]
   1977c:	e3530000 	cmp	r3, #0
   19780:	1affffe3 	bne	19714 <CTransportLayer::Process()+0x244>
   19784:	e2455001 	sub	r5, r5, #1
   19788:	e1a00004 	mov	r0, r4
   1978c:	eb003453 	bl	268e0 <CPtrArray::RemoveLast()>
   19790:	e3750001 	cmn	r5, #1
   19794:	0affffde 	beq	19714 <CTransportLayer::Process()+0x244>
   19798:	eafffff3 	b	1976c <CTransportLayer::Process()+0x29c>
   1979c:	eb004506 	bl	2abbc <EnterCritical>
   197a0:	eaffffd7 	b	19704 <CTransportLayer::Process()+0x234>
   197a4:	e3a0203a 	mov	r2, #58	; 0x3a
   197a8:	e59f1004 	ldr	r1, [pc, #4]	; 197b4 <CTransportLayer::Process()+0x2e4>
   197ac:	e59f0004 	ldr	r0, [pc, #4]	; 197b8 <CTransportLayer::Process()+0x2e8>
   197b0:	eb0027b2 	bl	23680 <assertion_failed>
   197b4:	00038f14 	.word	0x00038f14
   197b8:	00038f3c 	.word	0x00038f3c

000197bc <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>:
   197bc:	e92d4010 	push	{r4, lr}
   197c0:	e59f2008 	ldr	r2, [pc, #8]	; 197d0 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]+0x14>
   197c4:	e59f1008 	ldr	r1, [pc, #8]	; 197d4 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]+0x18>
   197c8:	e59f0008 	ldr	r0, [pc, #8]	; 197d8 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]+0x1c>
   197cc:	eb0027ab 	bl	23680 <assertion_failed>
   197d0:	0000012b 	.word	0x0000012b
   197d4:	00038fbc 	.word	0x00038fbc
   197d8:	00038fd0 	.word	0x00038fd0

000197dc <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>:
   197dc:	e3a03000 	mov	r3, #0
   197e0:	e92d4010 	push	{r4, lr}
   197e4:	e1a04000 	mov	r4, r0
   197e8:	e880000e 	stm	r0, {r1, r2, r3}
   197ec:	e280000c 	add	r0, r0, #12
   197f0:	eb001a51 	bl	2013c <CNetQueue::CNetQueue()>
   197f4:	e2840018 	add	r0, r4, #24
   197f8:	eb001a4f 	bl	2013c <CNetQueue::CNetQueue()>
   197fc:	e2840024 	add	r0, r4, #36	; 0x24
   19800:	eb001a4d 	bl	2013c <CNetQueue::CNetQueue()>
   19804:	e2840030 	add	r0, r4, #48	; 0x30
   19808:	eb000a04 	bl	1c020 <CRouteCache::CRouteCache()>
   1980c:	e5943000 	ldr	r3, [r4]
   19810:	e3530000 	cmp	r3, #0
   19814:	0a000004 	beq	1982c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x50>
   19818:	e5943004 	ldr	r3, [r4, #4]
   1981c:	e3530000 	cmp	r3, #0
   19820:	0a000005 	beq	1983c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x60>
   19824:	e1a00004 	mov	r0, r4
   19828:	e8bd8010 	pop	{r4, pc}
   1982c:	e3a0201f 	mov	r2, #31
   19830:	e59f1014 	ldr	r1, [pc, #20]	; 1984c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x70>
   19834:	e59f0014 	ldr	r0, [pc, #20]	; 19850 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x74>
   19838:	eb002790 	bl	23680 <assertion_failed>
   1983c:	e3a02020 	mov	r2, #32
   19840:	e59f1004 	ldr	r1, [pc, #4]	; 1984c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x70>
   19844:	e59f0008 	ldr	r0, [pc, #8]	; 19854 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x78>
   19848:	eb00278c 	bl	23680 <assertion_failed>
   1984c:	00038fbc 	.word	0x00038fbc
   19850:	00038f28 	.word	0x00038f28
   19854:	00038fe4 	.word	0x00038fe4

00019858 <CNetworkLayer::~CNetworkLayer()>:
   19858:	e92d4070 	push	{r4, r5, r6, lr}
   1985c:	e5905008 	ldr	r5, [r0, #8]
   19860:	e1a04000 	mov	r4, r0
   19864:	e3550000 	cmp	r5, #0
   19868:	0a000004 	beq	19880 <CNetworkLayer::~CNetworkLayer()+0x28>
   1986c:	e1a00005 	mov	r0, r5
   19870:	eb000850 	bl	1b9b8 <CICMPHandler::~CICMPHandler()>
   19874:	e1a00005 	mov	r0, r5
   19878:	e3a01010 	mov	r1, #16
   1987c:	eb0041aa 	bl	29f2c <operator delete(void*, unsigned int)>
   19880:	e3a03000 	mov	r3, #0
   19884:	e1a00004 	mov	r0, r4
   19888:	e5843008 	str	r3, [r4, #8]
   1988c:	e5843004 	str	r3, [r4, #4]
   19890:	e4803030 	str	r3, [r0], #48	; 0x30
   19894:	eb0009fb 	bl	1c088 <CRouteCache::~CRouteCache()>
   19898:	e2840024 	add	r0, r4, #36	; 0x24
   1989c:	eb001a60 	bl	20224 <CNetQueue::~CNetQueue()>
   198a0:	e2840018 	add	r0, r4, #24
   198a4:	eb001a5e 	bl	20224 <CNetQueue::~CNetQueue()>
   198a8:	e284000c 	add	r0, r4, #12
   198ac:	eb001a5c 	bl	20224 <CNetQueue::~CNetQueue()>
   198b0:	e1a00004 	mov	r0, r4
   198b4:	e8bd8070 	pop	{r4, r5, r6, pc}

000198b8 <CNetworkLayer::Initialize()>:
   198b8:	e92d4030 	push	{r4, r5, lr}
   198bc:	e5903008 	ldr	r3, [r0, #8]
   198c0:	e24dd00c 	sub	sp, sp, #12
   198c4:	e3530000 	cmp	r3, #0
   198c8:	1a00000d 	bne	19904 <CNetworkLayer::Initialize()+0x4c>
   198cc:	e1a04000 	mov	r4, r0
   198d0:	e3a00010 	mov	r0, #16
   198d4:	eb004186 	bl	29ef4 <operator new(unsigned int)>
   198d8:	e1a02004 	mov	r2, r4
   198dc:	e4921024 	ldr	r1, [r2], #36	; 0x24
   198e0:	e2843018 	add	r3, r4, #24
   198e4:	e58d2000 	str	r2, [sp]
   198e8:	e1a02004 	mov	r2, r4
   198ec:	e1a05000 	mov	r5, r0
   198f0:	eb000810 	bl	1b938 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>
   198f4:	e3a00001 	mov	r0, #1
   198f8:	e5845008 	str	r5, [r4, #8]
   198fc:	e28dd00c 	add	sp, sp, #12
   19900:	e8bd8030 	pop	{r4, r5, pc}
   19904:	e3a0202e 	mov	r2, #46	; 0x2e
   19908:	e59f1004 	ldr	r1, [pc, #4]	; 19914 <CNetworkLayer::Initialize()+0x5c>
   1990c:	e59f0004 	ldr	r0, [pc, #4]	; 19918 <CNetworkLayer::Initialize()+0x60>
   19910:	eb00275a 	bl	23680 <assertion_failed>
   19914:	00038fbc 	.word	0x00038fbc
   19918:	00038ff8 	.word	0x00038ff8

0001991c <CNetworkLayer::Process()>:
   1991c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19920:	e1a05000 	mov	r5, r0
   19924:	e5900000 	ldr	r0, [r0]
   19928:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1992c:	e3500000 	cmp	r0, #0
   19930:	e24dd00c 	sub	sp, sp, #12
   19934:	0a000062 	beq	19ac4 <CNetworkLayer::Process()+0x1a8>
   19938:	eb001857 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   1993c:	e2507000 	subs	r7, r0, #0
   19940:	0a000063 	beq	19ad4 <CNetworkLayer::Process()+0x1b8>
   19944:	e5950004 	ldr	r0, [r5, #4]
   19948:	e3500000 	cmp	r0, #0
   1994c:	0a000069 	beq	19af8 <CNetworkLayer::Process()+0x1dc>
   19950:	e28d3018 	add	r3, sp, #24
   19954:	e28d6010 	add	r6, sp, #16
   19958:	e283b00c 	add	fp, r3, #12
   1995c:	e3a0a009 	mov	sl, #9
   19960:	e3a08004 	mov	r8, #4
   19964:	e285900c 	add	r9, r5, #12
   19968:	ea000000 	b	19970 <CNetworkLayer::Process()+0x54>
   1996c:	e5950004 	ldr	r0, [r5, #4]
   19970:	e28d200c 	add	r2, sp, #12
   19974:	e28d1018 	add	r1, sp, #24
   19978:	eb00031a 	bl	1a5e8 <CLinkLayer::Receive(void*, unsigned int*)>
   1997c:	e3500000 	cmp	r0, #0
   19980:	0a000048 	beq	19aa8 <CNetworkLayer::Process()+0x18c>
   19984:	e59d300c 	ldr	r3, [sp, #12]
   19988:	e3530014 	cmp	r3, #20
   1998c:	9afffff6 	bls	1996c <CNetworkLayer::Process()+0x50>
   19990:	e5dd4018 	ldrb	r4, [sp, #24]
   19994:	e204400f 	and	r4, r4, #15
   19998:	e2442005 	sub	r2, r4, #5
   1999c:	e3520001 	cmp	r2, #1
   199a0:	8afffff1 	bhi	1996c <CNetworkLayer::Process()+0x50>
   199a4:	e1a04104 	lsl	r4, r4, #2
   199a8:	e1530004 	cmp	r3, r4
   199ac:	9affffee 	bls	1996c <CNetworkLayer::Process()+0x50>
   199b0:	e1a01004 	mov	r1, r4
   199b4:	e28d0018 	add	r0, sp, #24
   199b8:	eb001b2a 	bl	20668 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   199bc:	e3500000 	cmp	r0, #0
   199c0:	1affffe9 	bne	1996c <CNetworkLayer::Process()+0x50>
   199c4:	e5dd3018 	ldrb	r3, [sp, #24]
   199c8:	e1a03243 	asr	r3, r3, #4
   199cc:	e3530004 	cmp	r3, #4
   199d0:	1affffe5 	bne	1996c <CNetworkLayer::Process()+0x50>
   199d4:	e28d1028 	add	r1, sp, #40	; 0x28
   199d8:	e1a00006 	mov	r0, r6
   199dc:	eb001921 	bl	1fe68 <CIPAddress::CIPAddress(unsigned char const*)>
   199e0:	e1a00007 	mov	r0, r7
   199e4:	eb001967 	bl	1ff88 <CIPAddress::IsNull() const>
   199e8:	e3500000 	cmp	r0, #0
   199ec:	1a00003c 	bne	19ae4 <CNetworkLayer::Process()+0x1c8>
   199f0:	e1a01006 	mov	r1, r6
   199f4:	e1a00007 	mov	r0, r7
   199f8:	eb0018b2 	bl	1fcc8 <CIPAddress::operator!=(CIPAddress const&) const>
   199fc:	e3500000 	cmp	r0, #0
   19a00:	1a000044 	bne	19b18 <CNetworkLayer::Process()+0x1fc>
   19a04:	e1dd31be 	ldrh	r3, [sp, #30]
   19a08:	e3130020 	tst	r3, #32
   19a0c:	1a000022 	bne	19a9c <CNetworkLayer::Process()+0x180>
   19a10:	e6bf3fb3 	rev16	r3, r3
   19a14:	e2033c1f 	and	r3, r3, #7936	; 0x1f00
   19a18:	e3530000 	cmp	r3, #0
   19a1c:	1a00001e 	bne	19a9c <CNetworkLayer::Process()+0x180>
   19a20:	e1dd31ba 	ldrh	r3, [sp, #26]
   19a24:	e59d200c 	ldr	r2, [sp, #12]
   19a28:	e6bf3fb3 	rev16	r3, r3
   19a2c:	e6ff3073 	uxth	r3, r3
   19a30:	e1530002 	cmp	r3, r2
   19a34:	8a000018 	bhi	19a9c <CNetworkLayer::Process()+0x180>
   19a38:	e1a0000a 	mov	r0, sl
   19a3c:	e58d300c 	str	r3, [sp, #12]
   19a40:	eb00412b 	bl	29ef4 <operator new(unsigned int)>
   19a44:	e5dd1021 	ldrb	r1, [sp, #33]	; 0x21
   19a48:	e58d0004 	str	r0, [sp, #4]
   19a4c:	e1a02008 	mov	r2, r8
   19a50:	e4c01001 	strb	r1, [r0], #1
   19a54:	e1a0100b 	mov	r1, fp
   19a58:	eb003f4c 	bl	29790 <memcpy>
   19a5c:	e59d3004 	ldr	r3, [sp, #4]
   19a60:	e1a02008 	mov	r2, r8
   19a64:	e28d1028 	add	r1, sp, #40	; 0x28
   19a68:	e2830005 	add	r0, r3, #5
   19a6c:	eb003f47 	bl	29790 <memcpy>
   19a70:	e5dd1021 	ldrb	r1, [sp, #33]	; 0x21
   19a74:	e59d200c 	ldr	r2, [sp, #12]
   19a78:	e3510001 	cmp	r1, #1
   19a7c:	e28d1018 	add	r1, sp, #24
   19a80:	e0422004 	sub	r2, r2, r4
   19a84:	e59d3004 	ldr	r3, [sp, #4]
   19a88:	e0811004 	add	r1, r1, r4
   19a8c:	02850018 	addeq	r0, r5, #24
   19a90:	11a00009 	movne	r0, r9
   19a94:	e58d200c 	str	r2, [sp, #12]
   19a98:	eb0019e6 	bl	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   19a9c:	e1a00006 	mov	r0, r6
   19aa0:	eb00186f 	bl	1fc64 <CIPAddress::~CIPAddress()>
   19aa4:	eaffffb0 	b	1996c <CNetworkLayer::Process()+0x50>
   19aa8:	e5950008 	ldr	r0, [r5, #8]
   19aac:	e3500000 	cmp	r0, #0
   19ab0:	0a000014 	beq	19b08 <CNetworkLayer::Process()+0x1ec>
   19ab4:	eb0007fe 	bl	1bab4 <CICMPHandler::Process()>
   19ab8:	e28dde65 	add	sp, sp, #1616	; 0x650
   19abc:	e28dd00c 	add	sp, sp, #12
   19ac0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ac4:	e3a02037 	mov	r2, #55	; 0x37
   19ac8:	e59f1074 	ldr	r1, [pc, #116]	; 19b44 <CNetworkLayer::Process()+0x228>
   19acc:	e59f0074 	ldr	r0, [pc, #116]	; 19b48 <CNetworkLayer::Process()+0x22c>
   19ad0:	eb0026ea 	bl	23680 <assertion_failed>
   19ad4:	e3a02039 	mov	r2, #57	; 0x39
   19ad8:	e59f1064 	ldr	r1, [pc, #100]	; 19b44 <CNetworkLayer::Process()+0x228>
   19adc:	e59f0068 	ldr	r0, [pc, #104]	; 19b4c <CNetworkLayer::Process()+0x230>
   19ae0:	eb0026e6 	bl	23680 <assertion_failed>
   19ae4:	e1a00006 	mov	r0, r6
   19ae8:	eb001934 	bl	1ffc0 <CIPAddress::IsBroadcast() const>
   19aec:	e3500000 	cmp	r0, #0
   19af0:	1affffc3 	bne	19a04 <CNetworkLayer::Process()+0xe8>
   19af4:	eaffffe8 	b	19a9c <CNetworkLayer::Process()+0x180>
   19af8:	e3a0203d 	mov	r2, #61	; 0x3d
   19afc:	e59f1040 	ldr	r1, [pc, #64]	; 19b44 <CNetworkLayer::Process()+0x228>
   19b00:	e59f0048 	ldr	r0, [pc, #72]	; 19b50 <CNetworkLayer::Process()+0x234>
   19b04:	eb0026dd 	bl	23680 <assertion_failed>
   19b08:	e3a0208a 	mov	r2, #138	; 0x8a
   19b0c:	e59f1030 	ldr	r1, [pc, #48]	; 19b44 <CNetworkLayer::Process()+0x228>
   19b10:	e59f003c 	ldr	r0, [pc, #60]	; 19b54 <CNetworkLayer::Process()+0x238>
   19b14:	eb0026d9 	bl	23680 <assertion_failed>
   19b18:	e1a00006 	mov	r0, r6
   19b1c:	eb001927 	bl	1ffc0 <CIPAddress::IsBroadcast() const>
   19b20:	e3500000 	cmp	r0, #0
   19b24:	1affffb6 	bne	19a04 <CNetworkLayer::Process()+0xe8>
   19b28:	e5950000 	ldr	r0, [r5]
   19b2c:	eb0017e4 	bl	1fac4 <CNetConfig::GetBroadcastAddress() const>
   19b30:	e1a01006 	mov	r1, r6
   19b34:	eb001863 	bl	1fcc8 <CIPAddress::operator!=(CIPAddress const&) const>
   19b38:	e3500000 	cmp	r0, #0
   19b3c:	1affffd6 	bne	19a9c <CNetworkLayer::Process()+0x180>
   19b40:	eaffffaf 	b	19a04 <CNetworkLayer::Process()+0xe8>
   19b44:	00038fbc 	.word	0x00038fbc
   19b48:	00038f28 	.word	0x00038f28
   19b4c:	0003900c 	.word	0x0003900c
   19b50:	00038fe4 	.word	0x00038fe4
   19b54:	00038fd0 	.word	0x00038fd0

00019b58 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>:
   19b58:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b5c:	e59fc254 	ldr	ip, [pc, #596]	; 19db8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x260>
   19b60:	e243e001 	sub	lr, r3, #1
   19b64:	e28db020 	add	fp, sp, #32
   19b68:	e15e000c 	cmp	lr, ip
   19b6c:	e24dd014 	sub	sp, sp, #20
   19b70:	8a00004b 	bhi	19ca4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x14c>
   19b74:	e1a06000 	mov	r6, r0
   19b78:	e3a0a000 	mov	sl, #0
   19b7c:	e3a0c040 	mov	ip, #64	; 0x40
   19b80:	e3a0e045 	mov	lr, #69	; 0x45
   19b84:	e2838014 	add	r8, r3, #20
   19b88:	e1a07002 	mov	r7, r2
   19b8c:	e1a05001 	mov	r5, r1
   19b90:	e6bf2fb8 	rev16	r2, r8
   19b94:	e283101b 	add	r1, r3, #27
   19b98:	e6ff2072 	uxth	r2, r2
   19b9c:	e3c11007 	bic	r1, r1, #7
   19ba0:	e04dd001 	sub	sp, sp, r1
   19ba4:	e1a00422 	lsr	r0, r2, #8
   19ba8:	e5cd0003 	strb	r0, [sp, #3]
   19bac:	e5960000 	ldr	r0, [r6]
   19bb0:	e1a04003 	mov	r4, r3
   19bb4:	e5db3004 	ldrb	r3, [fp, #4]
   19bb8:	e150000a 	cmp	r0, sl
   19bbc:	e5cd2002 	strb	r2, [sp, #2]
   19bc0:	e5cd3009 	strb	r3, [sp, #9]
   19bc4:	e5cde000 	strb	lr, [sp]
   19bc8:	e50bd030 	str	sp, [fp, #-48]	; 0xffffffd0
   19bcc:	e5cda001 	strb	sl, [sp, #1]
   19bd0:	e5cda004 	strb	sl, [sp, #4]
   19bd4:	e5cda005 	strb	sl, [sp, #5]
   19bd8:	e5cda007 	strb	sl, [sp, #7]
   19bdc:	e5cdc006 	strb	ip, [sp, #6]
   19be0:	e5cdc008 	strb	ip, [sp, #8]
   19be4:	0a000044 	beq	19cfc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1a4>
   19be8:	eb0017ab 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   19bec:	e2509000 	subs	r9, r0, #0
   19bf0:	0a00002f 	beq	19cb4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x15c>
   19bf4:	e28d100c 	add	r1, sp, #12
   19bf8:	eb0018cb 	bl	1ff2c <CIPAddress::CopyTo(unsigned char*) const>
   19bfc:	e28d1010 	add	r1, sp, #16
   19c00:	e1a00005 	mov	r0, r5
   19c04:	eb0018c8 	bl	1ff2c <CIPAddress::CopyTo(unsigned char*) const>
   19c08:	e3a01014 	mov	r1, #20
   19c0c:	e1a0000d 	mov	r0, sp
   19c10:	e5cda00a 	strb	sl, [sp, #10]
   19c14:	e5cda00b 	strb	sl, [sp, #11]
   19c18:	eb001a92 	bl	20668 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   19c1c:	e3570000 	cmp	r7, #0
   19c20:	e1a03420 	lsr	r3, r0, #8
   19c24:	e5cd000a 	strb	r0, [sp, #10]
   19c28:	e5cd300b 	strb	r3, [sp, #11]
   19c2c:	0a00003a 	beq	19d1c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1c4>
   19c30:	e1a02004 	mov	r2, r4
   19c34:	e1a01007 	mov	r1, r7
   19c38:	e28d0014 	add	r0, sp, #20
   19c3c:	eb003ed3 	bl	29790 <memcpy>
   19c40:	e1a00009 	mov	r0, r9
   19c44:	eb0018cf 	bl	1ff88 <CIPAddress::IsNull() const>
   19c48:	e3500000 	cmp	r0, #0
   19c4c:	1a00001c 	bne	19cc4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x16c>
   19c50:	e24b002c 	sub	r0, fp, #44	; 0x2c
   19c54:	eb0017ec 	bl	1fc0c <CIPAddress::CIPAddress()>
   19c58:	e5960000 	ldr	r0, [r6]
   19c5c:	eb001792 	bl	1faac <CNetConfig::GetNetMask() const>
   19c60:	e1a01005 	mov	r1, r5
   19c64:	e1a02000 	mov	r2, r0
   19c68:	e1a00009 	mov	r0, r9
   19c6c:	eb001905 	bl	20088 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   19c70:	e2504000 	subs	r4, r0, #0
   19c74:	0a00002c 	beq	19d2c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1d4>
   19c78:	e5960004 	ldr	r0, [r6, #4]
   19c7c:	e3500000 	cmp	r0, #0
   19c80:	0a000021 	beq	19d0c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1b4>
   19c84:	e1a03008 	mov	r3, r8
   19c88:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   19c8c:	e1a01005 	mov	r1, r5
   19c90:	eb0001ea 	bl	1a440 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>
   19c94:	e1a04000 	mov	r4, r0
   19c98:	e24b002c 	sub	r0, fp, #44	; 0x2c
   19c9c:	eb0017f0 	bl	1fc64 <CIPAddress::~CIPAddress()>
   19ca0:	ea000000 	b	19ca8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x150>
   19ca4:	e3a04000 	mov	r4, #0
   19ca8:	e1a00004 	mov	r0, r4
   19cac:	e24bd020 	sub	sp, fp, #32
   19cb0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cb4:	e3a020a4 	mov	r2, #164	; 0xa4
   19cb8:	e59f10fc 	ldr	r1, [pc, #252]	; 19dbc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   19cbc:	e59f00fc 	ldr	r0, [pc, #252]	; 19dc0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x268>
   19cc0:	eb00266e 	bl	23680 <assertion_failed>
   19cc4:	e1a00005 	mov	r0, r5
   19cc8:	eb0018bc 	bl	1ffc0 <CIPAddress::IsBroadcast() const>
   19ccc:	e2504000 	subs	r4, r0, #0
   19cd0:	1affffde 	bne	19c50 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0xf8>
   19cd4:	e5960008 	ldr	r0, [r6, #8]
   19cd8:	e3500000 	cmp	r0, #0
   19cdc:	0a00001d 	beq	19d58 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x200>
   19ce0:	e1a03008 	mov	r3, r8
   19ce4:	e1a0200d 	mov	r2, sp
   19ce8:	e1a01004 	mov	r1, r4
   19cec:	eb000864 	bl	1be84 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   19cf0:	e1a00004 	mov	r0, r4
   19cf4:	e24bd020 	sub	sp, fp, #32
   19cf8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cfc:	e3a020a2 	mov	r2, #162	; 0xa2
   19d00:	e59f10b4 	ldr	r1, [pc, #180]	; 19dbc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   19d04:	e59f00b8 	ldr	r0, [pc, #184]	; 19dc4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x26c>
   19d08:	eb00265c 	bl	23680 <assertion_failed>
   19d0c:	e3a020d0 	mov	r2, #208	; 0xd0
   19d10:	e59f10a4 	ldr	r1, [pc, #164]	; 19dbc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   19d14:	e59f00ac 	ldr	r0, [pc, #172]	; 19dc8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x270>
   19d18:	eb002658 	bl	23680 <assertion_failed>
   19d1c:	e3a020ad 	mov	r2, #173	; 0xad
   19d20:	e59f1094 	ldr	r1, [pc, #148]	; 19dbc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   19d24:	e59f00a0 	ldr	r0, [pc, #160]	; 19dcc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x274>
   19d28:	eb002654 	bl	23680 <assertion_failed>
   19d2c:	e1a00005 	mov	r0, r5
   19d30:	eb001871 	bl	1fefc <CIPAddress::Get() const>
   19d34:	e1a01000 	mov	r1, r0
   19d38:	e2860030 	add	r0, r6, #48	; 0x30
   19d3c:	eb000912 	bl	1c18c <CRouteCache::GetRoute(unsigned char const*) const>
   19d40:	e2501000 	subs	r1, r0, #0
   19d44:	0a000004 	beq	19d5c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x204>
   19d48:	e24b002c 	sub	r0, fp, #44	; 0x2c
   19d4c:	eb001835 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   19d50:	e24b502c 	sub	r5, fp, #44	; 0x2c
   19d54:	eaffffc7 	b	19c78 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x120>
   19d58:	ebfffe97 	bl	197bc <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>
   19d5c:	e5960000 	ldr	r0, [r6]
   19d60:	eb001753 	bl	1fab4 <CNetConfig::GetDefaultGateway() const>
   19d64:	e1a05000 	mov	r5, r0
   19d68:	eb001886 	bl	1ff88 <CIPAddress::IsNull() const>
   19d6c:	e3500000 	cmp	r0, #0
   19d70:	0a000007 	beq	19d94 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x23c>
   19d74:	e5960008 	ldr	r0, [r6, #8]
   19d78:	e3500000 	cmp	r0, #0
   19d7c:	0afffff5 	beq	19d58 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x200>
   19d80:	e1a03008 	mov	r3, r8
   19d84:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   19d88:	e1a01004 	mov	r1, r4
   19d8c:	eb00083c 	bl	1be84 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   19d90:	eaffffc0 	b	19c98 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x140>
   19d94:	e5960004 	ldr	r0, [r6, #4]
   19d98:	e3500000 	cmp	r0, #0
   19d9c:	0affffda 	beq	19d0c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1b4>
   19da0:	e3550000 	cmp	r5, #0
   19da4:	1affffb6 	bne	19c84 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x12c>
   19da8:	e3a020d1 	mov	r2, #209	; 0xd1
   19dac:	e59f1008 	ldr	r1, [pc, #8]	; 19dbc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   19db0:	e59f0018 	ldr	r0, [pc, #24]	; 19dd0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x278>
   19db4:	eb002631 	bl	23680 <assertion_failed>
   19db8:	0000062b 	.word	0x0000062b
   19dbc:	00038fbc 	.word	0x00038fbc
   19dc0:	0003900c 	.word	0x0003900c
   19dc4:	00038f28 	.word	0x00038f28
   19dc8:	00038fe4 	.word	0x00038fe4
   19dcc:	00039020 	.word	0x00039020
   19dd0:	00039030 	.word	0x00039030

00019dd4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>:
   19dd4:	e92d4030 	push	{r4, r5, lr}
   19dd8:	e3510000 	cmp	r1, #0
   19ddc:	e24dd00c 	sub	sp, sp, #12
   19de0:	0a000023 	beq	19e74 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xa0>
   19de4:	e3520000 	cmp	r2, #0
   19de8:	e1a04002 	mov	r4, r2
   19dec:	0a000024 	beq	19e84 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xb0>
   19df0:	e280000c 	add	r0, r0, #12
   19df4:	e28d2004 	add	r2, sp, #4
   19df8:	e1a05003 	mov	r5, r3
   19dfc:	eb001953 	bl	20350 <CNetQueue::Dequeue(void*, void**)>
   19e00:	e3500000 	cmp	r0, #0
   19e04:	e5840000 	str	r0, [r4]
   19e08:	0a000017 	beq	19e6c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x98>
   19e0c:	e59d4004 	ldr	r4, [sp, #4]
   19e10:	e3540000 	cmp	r4, #0
   19e14:	0a00001e 	beq	19e94 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xc0>
   19e18:	e59d301c 	ldr	r3, [sp, #28]
   19e1c:	e3530000 	cmp	r3, #0
   19e20:	0a00001f 	beq	19ea4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xd0>
   19e24:	e5d43000 	ldrb	r3, [r4]
   19e28:	e59d201c 	ldr	r2, [sp, #28]
   19e2c:	e3550000 	cmp	r5, #0
   19e30:	e5823000 	str	r3, [r2]
   19e34:	0a00001e 	beq	19eb4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xe0>
   19e38:	e1a00005 	mov	r0, r5
   19e3c:	e2841001 	add	r1, r4, #1
   19e40:	eb0017f8 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   19e44:	e59d3018 	ldr	r3, [sp, #24]
   19e48:	e3530000 	cmp	r3, #0
   19e4c:	0a00001c 	beq	19ec4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xf0>
   19e50:	e2841005 	add	r1, r4, #5
   19e54:	e59d0018 	ldr	r0, [sp, #24]
   19e58:	eb0017f2 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   19e5c:	e1a00004 	mov	r0, r4
   19e60:	e3a01009 	mov	r1, #9
   19e64:	eb004030 	bl	29f2c <operator delete(void*, unsigned int)>
   19e68:	e3a00001 	mov	r0, #1
   19e6c:	e28dd00c 	add	sp, sp, #12
   19e70:	e8bd8030 	pop	{r4, r5, pc}
   19e74:	e3a020d9 	mov	r2, #217	; 0xd9
   19e78:	e59f1054 	ldr	r1, [pc, #84]	; 19ed4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   19e7c:	e59f0054 	ldr	r0, [pc, #84]	; 19ed8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x104>
   19e80:	eb0025fe 	bl	23680 <assertion_failed>
   19e84:	e3a020da 	mov	r2, #218	; 0xda
   19e88:	e59f1044 	ldr	r1, [pc, #68]	; 19ed4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   19e8c:	e59f0048 	ldr	r0, [pc, #72]	; 19edc <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x108>
   19e90:	eb0025fa 	bl	23680 <assertion_failed>
   19e94:	e3a020e2 	mov	r2, #226	; 0xe2
   19e98:	e59f1034 	ldr	r1, [pc, #52]	; 19ed4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   19e9c:	e59f003c 	ldr	r0, [pc, #60]	; 19ee0 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x10c>
   19ea0:	eb0025f6 	bl	23680 <assertion_failed>
   19ea4:	e3a020e4 	mov	r2, #228	; 0xe4
   19ea8:	e59f1024 	ldr	r1, [pc, #36]	; 19ed4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   19eac:	e59f0030 	ldr	r0, [pc, #48]	; 19ee4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x110>
   19eb0:	eb0025f2 	bl	23680 <assertion_failed>
   19eb4:	e3a020e7 	mov	r2, #231	; 0xe7
   19eb8:	e59f1014 	ldr	r1, [pc, #20]	; 19ed4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   19ebc:	e59f0024 	ldr	r0, [pc, #36]	; 19ee8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x114>
   19ec0:	eb0025ee 	bl	23680 <assertion_failed>
   19ec4:	e3a020ea 	mov	r2, #234	; 0xea
   19ec8:	e59f1004 	ldr	r1, [pc, #4]	; 19ed4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   19ecc:	e59f0018 	ldr	r0, [pc, #24]	; 19eec <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x118>
   19ed0:	eb0025ea 	bl	23680 <assertion_failed>
   19ed4:	00038fbc 	.word	0x00038fbc
   19ed8:	00036138 	.word	0x00036138
   19edc:	00036964 	.word	0x00036964
   19ee0:	00038fa4 	.word	0x00038fa4
   19ee4:	00039040 	.word	0x00039040
   19ee8:	00039050 	.word	0x00039050
   19eec:	00039060 	.word	0x00039060

00019ef0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>:
   19ef0:	e92d4070 	push	{r4, r5, r6, lr}
   19ef4:	e24dd010 	sub	sp, sp, #16
   19ef8:	e1a04001 	mov	r4, r1
   19efc:	e1a05002 	mov	r5, r2
   19f00:	e2800024 	add	r0, r0, #36	; 0x24
   19f04:	e3a02000 	mov	r2, #0
   19f08:	e1a0100d 	mov	r1, sp
   19f0c:	e1a06003 	mov	r6, r3
   19f10:	eb00190e 	bl	20350 <CNetQueue::Dequeue(void*, void**)>
   19f14:	e3500000 	cmp	r0, #0
   19f18:	0a000022 	beq	19fa8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xb8>
   19f1c:	e350000e 	cmp	r0, #14
   19f20:	1a000026 	bne	19fc0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xd0>
   19f24:	e3540000 	cmp	r4, #0
   19f28:	0a000020 	beq	19fb0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xc0>
   19f2c:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   19f30:	e5dd3000 	ldrb	r3, [sp]
   19f34:	e3520000 	cmp	r2, #0
   19f38:	e5c43000 	strb	r3, [r4]
   19f3c:	0a000023 	beq	19fd0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xe0>
   19f40:	e5dd3001 	ldrb	r3, [sp, #1]
   19f44:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   19f48:	e3550000 	cmp	r5, #0
   19f4c:	e5823000 	str	r3, [r2]
   19f50:	0a000022 	beq	19fe0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xf0>
   19f54:	e1a00005 	mov	r0, r5
   19f58:	e28d1002 	add	r1, sp, #2
   19f5c:	eb0017b1 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   19f60:	e3560000 	cmp	r6, #0
   19f64:	0a000021 	beq	19ff0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x100>
   19f68:	e1a00006 	mov	r0, r6
   19f6c:	e28d1006 	add	r1, sp, #6
   19f70:	eb0017ac 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   19f74:	e59d3020 	ldr	r3, [sp, #32]
   19f78:	e3530000 	cmp	r3, #0
   19f7c:	0a00001f 	beq	1a000 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x110>
   19f80:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   19f84:	e1dd30ba 	ldrh	r3, [sp, #10]
   19f88:	e3520000 	cmp	r2, #0
   19f8c:	e59d2020 	ldr	r2, [sp, #32]
   19f90:	e1c230b0 	strh	r3, [r2]
   19f94:	0a00001d 	beq	1a010 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x120>
   19f98:	e3a00001 	mov	r0, #1
   19f9c:	e1dd30bc 	ldrh	r3, [sp, #12]
   19fa0:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   19fa4:	e1c230b0 	strh	r3, [r2]
   19fa8:	e28dd010 	add	sp, sp, #16
   19fac:	e8bd8070 	pop	{r4, r5, r6, pc}
   19fb0:	e3a02c01 	mov	r2, #256	; 0x100
   19fb4:	e59f1064 	ldr	r1, [pc, #100]	; 1a020 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   19fb8:	e59f0064 	ldr	r0, [pc, #100]	; 1a024 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x134>
   19fbc:	eb0025af 	bl	23680 <assertion_failed>
   19fc0:	e3a020fe 	mov	r2, #254	; 0xfe
   19fc4:	e59f1054 	ldr	r1, [pc, #84]	; 1a020 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   19fc8:	e59f0058 	ldr	r0, [pc, #88]	; 1a028 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x138>
   19fcc:	eb0025ab 	bl	23680 <assertion_failed>
   19fd0:	e59f2054 	ldr	r2, [pc, #84]	; 1a02c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x13c>
   19fd4:	e59f1044 	ldr	r1, [pc, #68]	; 1a020 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   19fd8:	e59f0050 	ldr	r0, [pc, #80]	; 1a030 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x140>
   19fdc:	eb0025a7 	bl	23680 <assertion_failed>
   19fe0:	e59f204c 	ldr	r2, [pc, #76]	; 1a034 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x144>
   19fe4:	e59f1034 	ldr	r1, [pc, #52]	; 1a020 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   19fe8:	e59f0048 	ldr	r0, [pc, #72]	; 1a038 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x148>
   19fec:	eb0025a3 	bl	23680 <assertion_failed>
   19ff0:	e59f2044 	ldr	r2, [pc, #68]	; 1a03c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x14c>
   19ff4:	e59f1024 	ldr	r1, [pc, #36]	; 1a020 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   19ff8:	e59f0040 	ldr	r0, [pc, #64]	; 1a040 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x150>
   19ffc:	eb00259f 	bl	23680 <assertion_failed>
   1a000:	e3a02f43 	mov	r2, #268	; 0x10c
   1a004:	e59f1014 	ldr	r1, [pc, #20]	; 1a020 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1a008:	e59f0034 	ldr	r0, [pc, #52]	; 1a044 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x154>
   1a00c:	eb00259b 	bl	23680 <assertion_failed>
   1a010:	e59f2030 	ldr	r2, [pc, #48]	; 1a048 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x158>
   1a014:	e59f1004 	ldr	r1, [pc, #4]	; 1a020 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1a018:	e59f002c 	ldr	r0, [pc, #44]	; 1a04c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x15c>
   1a01c:	eb002597 	bl	23680 <assertion_failed>
   1a020:	00038fbc 	.word	0x00038fbc
   1a024:	00039090 	.word	0x00039090
   1a028:	00039070 	.word	0x00039070
   1a02c:	00000103 	.word	0x00000103
   1a030:	00039040 	.word	0x00039040
   1a034:	00000106 	.word	0x00000106
   1a038:	00039050 	.word	0x00039050
   1a03c:	00000109 	.word	0x00000109
   1a040:	00039060 	.word	0x00039060
   1a044:	0003909c 	.word	0x0003909c
   1a048:	0000010f 	.word	0x0000010f
   1a04c:	000390ac 	.word	0x000390ac

0001a050 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>:
   1a050:	e2800030 	add	r0, r0, #48	; 0x30
   1a054:	ea000812 	b	1c0a4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>

0001a058 <CNetworkLayer::GetGateway(unsigned char const*) const>:
   1a058:	e92d4010 	push	{r4, lr}
   1a05c:	e1a04000 	mov	r4, r0
   1a060:	e2800030 	add	r0, r0, #48	; 0x30
   1a064:	eb000848 	bl	1c18c <CRouteCache::GetRoute(unsigned char const*) const>
   1a068:	e3500000 	cmp	r0, #0
   1a06c:	18bd8010 	popne	{r4, pc}
   1a070:	e5940000 	ldr	r0, [r4]
   1a074:	e3500000 	cmp	r0, #0
   1a078:	0a000004 	beq	1a090 <CNetworkLayer::GetGateway(unsigned char const*) const+0x38>
   1a07c:	eb00168c 	bl	1fab4 <CNetConfig::GetDefaultGateway() const>
   1a080:	e3500000 	cmp	r0, #0
   1a084:	0a000005 	beq	1a0a0 <CNetworkLayer::GetGateway(unsigned char const*) const+0x48>
   1a088:	e8bd4010 	pop	{r4, lr}
   1a08c:	ea00179a 	b	1fefc <CIPAddress::Get() const>
   1a090:	e59f2018 	ldr	r2, [pc, #24]	; 1a0b0 <CNetworkLayer::GetGateway(unsigned char const*) const+0x58>
   1a094:	e59f1018 	ldr	r1, [pc, #24]	; 1a0b4 <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   1a098:	e59f0018 	ldr	r0, [pc, #24]	; 1a0b8 <CNetworkLayer::GetGateway(unsigned char const*) const+0x60>
   1a09c:	eb002577 	bl	23680 <assertion_failed>
   1a0a0:	e3a02f49 	mov	r2, #292	; 0x124
   1a0a4:	e59f1008 	ldr	r1, [pc, #8]	; 1a0b4 <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   1a0a8:	e59f000c 	ldr	r0, [pc, #12]	; 1a0bc <CNetworkLayer::GetGateway(unsigned char const*) const+0x64>
   1a0ac:	eb002573 	bl	23680 <assertion_failed>
   1a0b0:	00000122 	.word	0x00000122
   1a0b4:	00038fbc 	.word	0x00038fbc
   1a0b8:	00038f28 	.word	0x00038f28
   1a0bc:	000390c0 	.word	0x000390c0

0001a0c0 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>:
   1a0c0:	e5900008 	ldr	r0, [r0, #8]
   1a0c4:	e3500000 	cmp	r0, #0
   1a0c8:	0a000000 	beq	1a0d0 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)+0x10>
   1a0cc:	ea00076c 	b	1be84 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1a0d0:	e92d4010 	push	{r4, lr}
   1a0d4:	ebfffdb8 	bl	197bc <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>

0001a0d8 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>:
   1a0d8:	e92d4070 	push	{r4, r5, r6, lr}
   1a0dc:	e3a05000 	mov	r5, #0
   1a0e0:	e1a04000 	mov	r4, r0
   1a0e4:	e8800026 	stm	r0, {r1, r2, r5}
   1a0e8:	e580500c 	str	r5, [r0, #12]
   1a0ec:	e2800010 	add	r0, r0, #16
   1a0f0:	eb001811 	bl	2013c <CNetQueue::CNetQueue()>
   1a0f4:	e284001c 	add	r0, r4, #28
   1a0f8:	eb00180f 	bl	2013c <CNetQueue::CNetQueue()>
   1a0fc:	e2840028 	add	r0, r4, #40	; 0x28
   1a100:	eb00180d 	bl	2013c <CNetQueue::CNetQueue()>
   1a104:	e5943000 	ldr	r3, [r4]
   1a108:	e1c453b4 	strh	r5, [r4, #52]	; 0x34
   1a10c:	e1530005 	cmp	r3, r5
   1a110:	0a000004 	beq	1a128 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x50>
   1a114:	e5943004 	ldr	r3, [r4, #4]
   1a118:	e3530000 	cmp	r3, #0
   1a11c:	0a000005 	beq	1a138 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x60>
   1a120:	e1a00004 	mov	r0, r4
   1a124:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a128:	e3a02025 	mov	r2, #37	; 0x25
   1a12c:	e59f1014 	ldr	r1, [pc, #20]	; 1a148 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   1a130:	e59f0014 	ldr	r0, [pc, #20]	; 1a14c <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x74>
   1a134:	eb002551 	bl	23680 <assertion_failed>
   1a138:	e3a02026 	mov	r2, #38	; 0x26
   1a13c:	e59f1004 	ldr	r1, [pc, #4]	; 1a148 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   1a140:	e59f0008 	ldr	r0, [pc, #8]	; 1a150 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x78>
   1a144:	eb00254d 	bl	23680 <assertion_failed>
   1a148:	000390d8 	.word	0x000390d8
   1a14c:	00038f28 	.word	0x00038f28
   1a150:	000390e8 	.word	0x000390e8

0001a154 <CLinkLayer::~CLinkLayer()>:
   1a154:	e92d4070 	push	{r4, r5, r6, lr}
   1a158:	e590500c 	ldr	r5, [r0, #12]
   1a15c:	e1a04000 	mov	r4, r0
   1a160:	e3550000 	cmp	r5, #0
   1a164:	0a000004 	beq	1a17c <CLinkLayer::~CLinkLayer()+0x28>
   1a168:	e1a00005 	mov	r0, r5
   1a16c:	eb00030e 	bl	1adac <CARPHandler::~CARPHandler()>
   1a170:	e1a00005 	mov	r0, r5
   1a174:	e3a01f93 	mov	r1, #588	; 0x24c
   1a178:	eb003f6b 	bl	29f2c <operator delete(void*, unsigned int)>
   1a17c:	e3a03000 	mov	r3, #0
   1a180:	e1a00004 	mov	r0, r4
   1a184:	e584300c 	str	r3, [r4, #12]
   1a188:	e5843008 	str	r3, [r4, #8]
   1a18c:	e5843004 	str	r3, [r4, #4]
   1a190:	e4803028 	str	r3, [r0], #40	; 0x28
   1a194:	eb001822 	bl	20224 <CNetQueue::~CNetQueue()>
   1a198:	e284001c 	add	r0, r4, #28
   1a19c:	eb001820 	bl	20224 <CNetQueue::~CNetQueue()>
   1a1a0:	e2840010 	add	r0, r4, #16
   1a1a4:	eb00181e 	bl	20224 <CNetQueue::~CNetQueue()>
   1a1a8:	e1a00004 	mov	r0, r4
   1a1ac:	e8bd8070 	pop	{r4, r5, r6, pc}

0001a1b0 <CLinkLayer::Initialize()>:
   1a1b0:	e92d4030 	push	{r4, r5, lr}
   1a1b4:	e5903000 	ldr	r3, [r0]
   1a1b8:	e24dd00c 	sub	sp, sp, #12
   1a1bc:	e3530000 	cmp	r3, #0
   1a1c0:	0a00000d 	beq	1a1fc <CLinkLayer::Initialize()+0x4c>
   1a1c4:	e1a04000 	mov	r4, r0
   1a1c8:	e3a00f93 	mov	r0, #588	; 0x24c
   1a1cc:	eb003f48 	bl	29ef4 <operator new(unsigned int)>
   1a1d0:	e1a03004 	mov	r3, r4
   1a1d4:	e4931010 	ldr	r1, [r3], #16
   1a1d8:	e5942004 	ldr	r2, [r4, #4]
   1a1dc:	e58d3000 	str	r3, [sp]
   1a1e0:	e1a03004 	mov	r3, r4
   1a1e4:	e1a05000 	mov	r5, r0
   1a1e8:	eb0002c9 	bl	1ad14 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>
   1a1ec:	e3a00001 	mov	r0, #1
   1a1f0:	e584500c 	str	r5, [r4, #12]
   1a1f4:	e28dd00c 	add	sp, sp, #12
   1a1f8:	e8bd8030 	pop	{r4, r5, pc}
   1a1fc:	e3a02035 	mov	r2, #53	; 0x35
   1a200:	e59f1004 	ldr	r1, [pc, #4]	; 1a20c <CLinkLayer::Initialize()+0x5c>
   1a204:	e59f0004 	ldr	r0, [pc, #4]	; 1a210 <CLinkLayer::Initialize()+0x60>
   1a208:	eb00251c 	bl	23680 <assertion_failed>
   1a20c:	000390d8 	.word	0x000390d8
   1a210:	00038f28 	.word	0x00038f28

0001a214 <CLinkLayer::AttachLayer(CNetworkLayer*)>:
   1a214:	e5903008 	ldr	r3, [r0, #8]
   1a218:	e92d4010 	push	{r4, lr}
   1a21c:	e3530000 	cmp	r3, #0
   1a220:	1a000006 	bne	1a240 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x2c>
   1a224:	e3510000 	cmp	r1, #0
   1a228:	e5801008 	str	r1, [r0, #8]
   1a22c:	18bd8010 	popne	{r4, pc}
   1a230:	e3a02040 	mov	r2, #64	; 0x40
   1a234:	e59f1014 	ldr	r1, [pc, #20]	; 1a250 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x3c>
   1a238:	e59f0014 	ldr	r0, [pc, #20]	; 1a254 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x40>
   1a23c:	eb00250f 	bl	23680 <assertion_failed>
   1a240:	e3a0203e 	mov	r2, #62	; 0x3e
   1a244:	e59f1004 	ldr	r1, [pc, #4]	; 1a250 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x3c>
   1a248:	e59f0008 	ldr	r0, [pc, #8]	; 1a258 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x44>
   1a24c:	eb00250b 	bl	23680 <assertion_failed>
   1a250:	000390d8 	.word	0x000390d8
   1a254:	00038f3c 	.word	0x00038f3c
   1a258:	000390fc 	.word	0x000390fc

0001a25c <CLinkLayer::Process()>:
   1a25c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a260:	e1a04000 	mov	r4, r0
   1a264:	e5900004 	ldr	r0, [r0, #4]
   1a268:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1a26c:	e3500000 	cmp	r0, #0
   1a270:	e24dd00c 	sub	sp, sp, #12
   1a274:	0a00004a 	beq	1a3a4 <CLinkLayer::Process()+0x148>
   1a278:	eb000214 	bl	1aad0 <CNetDeviceLayer::GetMACAddress() const>
   1a27c:	e2506000 	subs	r6, r0, #0
   1a280:	0a00004f 	beq	1a3c4 <CLinkLayer::Process()+0x168>
   1a284:	e5940004 	ldr	r0, [r4, #4]
   1a288:	e3500000 	cmp	r0, #0
   1a28c:	0a000050 	beq	1a3d4 <CLinkLayer::Process()+0x178>
   1a290:	e28d3018 	add	r3, sp, #24
   1a294:	e28d5010 	add	r5, sp, #16
   1a298:	e283700e 	add	r7, r3, #14
   1a29c:	e284a01c 	add	sl, r4, #28
   1a2a0:	e3a09000 	mov	r9, #0
   1a2a4:	e59f8178 	ldr	r8, [pc, #376]	; 1a424 <CLinkLayer::Process()+0x1c8>
   1a2a8:	e3a0b006 	mov	fp, #6
   1a2ac:	ea000000 	b	1a2b4 <CLinkLayer::Process()+0x58>
   1a2b0:	e5940004 	ldr	r0, [r4, #4]
   1a2b4:	e28d200c 	add	r2, sp, #12
   1a2b8:	e28d1018 	add	r1, sp, #24
   1a2bc:	eb000213 	bl	1ab10 <CNetDeviceLayer::Receive(void*, unsigned int*)>
   1a2c0:	e3500000 	cmp	r0, #0
   1a2c4:	0a00002f 	beq	1a388 <CLinkLayer::Process()+0x12c>
   1a2c8:	e59d300c 	ldr	r3, [sp, #12]
   1a2cc:	e3530d19 	cmp	r3, #1600	; 0x640
   1a2d0:	8a000019 	bhi	1a33c <CLinkLayer::Process()+0xe0>
   1a2d4:	e353000e 	cmp	r3, #14
   1a2d8:	9afffff4 	bls	1a2b0 <CLinkLayer::Process()+0x54>
   1a2dc:	e28d1018 	add	r1, sp, #24
   1a2e0:	e1a00005 	mov	r0, r5
   1a2e4:	eb003e4b 	bl	29c18 <CMACAddress::CMACAddress(unsigned char const*)>
   1a2e8:	e1a01006 	mov	r1, r6
   1a2ec:	e1a00005 	mov	r0, r5
   1a2f0:	eb003e33 	bl	29bc4 <CMACAddress::operator!=(CMACAddress const&) const>
   1a2f4:	e3500000 	cmp	r0, #0
   1a2f8:	1a000018 	bne	1a360 <CLinkLayer::Process()+0x104>
   1a2fc:	e59d200c 	ldr	r2, [sp, #12]
   1a300:	e242200e 	sub	r2, r2, #14
   1a304:	e3520000 	cmp	r2, #0
   1a308:	e58d200c 	str	r2, [sp, #12]
   1a30c:	0a000028 	beq	1a3b4 <CLinkLayer::Process()+0x158>
   1a310:	e1dd32b4 	ldrh	r3, [sp, #36]	; 0x24
   1a314:	e3530008 	cmp	r3, #8
   1a318:	0a000015 	beq	1a374 <CLinkLayer::Process()+0x118>
   1a31c:	e1530008 	cmp	r3, r8
   1a320:	0a000009 	beq	1a34c <CLinkLayer::Process()+0xf0>
   1a324:	e1d423b4 	ldrh	r2, [r4, #52]	; 0x34
   1a328:	e1520003 	cmp	r2, r3
   1a32c:	0a00002c 	beq	1a3e4 <CLinkLayer::Process()+0x188>
   1a330:	e1a00005 	mov	r0, r5
   1a334:	eb003e09 	bl	29b60 <CMACAddress::~CMACAddress()>
   1a338:	eaffffdc 	b	1a2b0 <CLinkLayer::Process()+0x54>
   1a33c:	e3a0204e 	mov	r2, #78	; 0x4e
   1a340:	e59f10e0 	ldr	r1, [pc, #224]	; 1a428 <CLinkLayer::Process()+0x1cc>
   1a344:	e59f00e0 	ldr	r0, [pc, #224]	; 1a42c <CLinkLayer::Process()+0x1d0>
   1a348:	eb0024cc 	bl	23680 <assertion_failed>
   1a34c:	e1a03009 	mov	r3, r9
   1a350:	e1a01007 	mov	r1, r7
   1a354:	e2840010 	add	r0, r4, #16
   1a358:	eb0017b6 	bl	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1a35c:	eafffff3 	b	1a330 <CLinkLayer::Process()+0xd4>
   1a360:	e1a00005 	mov	r0, r5
   1a364:	eb003e5c 	bl	29cdc <CMACAddress::IsBroadcast() const>
   1a368:	e3500000 	cmp	r0, #0
   1a36c:	1affffe2 	bne	1a2fc <CLinkLayer::Process()+0xa0>
   1a370:	eaffffee 	b	1a330 <CLinkLayer::Process()+0xd4>
   1a374:	e1a03009 	mov	r3, r9
   1a378:	e1a01007 	mov	r1, r7
   1a37c:	e1a0000a 	mov	r0, sl
   1a380:	eb0017ac 	bl	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1a384:	eaffffe9 	b	1a330 <CLinkLayer::Process()+0xd4>
   1a388:	e594000c 	ldr	r0, [r4, #12]
   1a38c:	e3500000 	cmp	r0, #0
   1a390:	0a00001f 	beq	1a414 <CLinkLayer::Process()+0x1b8>
   1a394:	eb000385 	bl	1b1b0 <CARPHandler::Process()>
   1a398:	e28dde65 	add	sp, sp, #1616	; 0x650
   1a39c:	e28dd00c 	add	sp, sp, #12
   1a3a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3a4:	e3a02045 	mov	r2, #69	; 0x45
   1a3a8:	e59f1078 	ldr	r1, [pc, #120]	; 1a428 <CLinkLayer::Process()+0x1cc>
   1a3ac:	e59f007c 	ldr	r0, [pc, #124]	; 1a430 <CLinkLayer::Process()+0x1d4>
   1a3b0:	eb0024b2 	bl	23680 <assertion_failed>
   1a3b4:	e3a0205d 	mov	r2, #93	; 0x5d
   1a3b8:	e59f1068 	ldr	r1, [pc, #104]	; 1a428 <CLinkLayer::Process()+0x1cc>
   1a3bc:	e59f0070 	ldr	r0, [pc, #112]	; 1a434 <CLinkLayer::Process()+0x1d8>
   1a3c0:	eb0024ae 	bl	23680 <assertion_failed>
   1a3c4:	e3a02047 	mov	r2, #71	; 0x47
   1a3c8:	e59f1058 	ldr	r1, [pc, #88]	; 1a428 <CLinkLayer::Process()+0x1cc>
   1a3cc:	e59f0064 	ldr	r0, [pc, #100]	; 1a438 <CLinkLayer::Process()+0x1dc>
   1a3d0:	eb0024aa 	bl	23680 <assertion_failed>
   1a3d4:	e3a02049 	mov	r2, #73	; 0x49
   1a3d8:	e59f1048 	ldr	r1, [pc, #72]	; 1a428 <CLinkLayer::Process()+0x1cc>
   1a3dc:	e59f004c 	ldr	r0, [pc, #76]	; 1a430 <CLinkLayer::Process()+0x1d4>
   1a3e0:	eb0024a6 	bl	23680 <assertion_failed>
   1a3e4:	e1a0000b 	mov	r0, fp
   1a3e8:	eb003ec1 	bl	29ef4 <operator new(unsigned int)>
   1a3ec:	e1a0200b 	mov	r2, fp
   1a3f0:	e28d101e 	add	r1, sp, #30
   1a3f4:	e58d0004 	str	r0, [sp, #4]
   1a3f8:	eb003ce4 	bl	29790 <memcpy>
   1a3fc:	e59d3004 	ldr	r3, [sp, #4]
   1a400:	e59d200c 	ldr	r2, [sp, #12]
   1a404:	e1a01007 	mov	r1, r7
   1a408:	e2840028 	add	r0, r4, #40	; 0x28
   1a40c:	eb001789 	bl	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1a410:	eaffffc6 	b	1a330 <CLinkLayer::Process()+0xd4>
   1a414:	e3a02077 	mov	r2, #119	; 0x77
   1a418:	e59f1008 	ldr	r1, [pc, #8]	; 1a428 <CLinkLayer::Process()+0x1cc>
   1a41c:	e59f0018 	ldr	r0, [pc, #24]	; 1a43c <CLinkLayer::Process()+0x1e0>
   1a420:	eb002496 	bl	23680 <assertion_failed>
   1a424:	00000608 	.word	0x00000608
   1a428:	000390d8 	.word	0x000390d8
   1a42c:	00036d90 	.word	0x00036d90
   1a430:	000390e8 	.word	0x000390e8
   1a434:	00038fb0 	.word	0x00038fb0
   1a438:	00039114 	.word	0x00039114
   1a43c:	00039128 	.word	0x00039128

0001a440 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>:
   1a440:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a444:	e59fc180 	ldr	ip, [pc, #384]	; 1a5cc <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x18c>
   1a448:	e243e001 	sub	lr, r3, #1
   1a44c:	e28db01c 	add	fp, sp, #28
   1a450:	e15e000c 	cmp	lr, ip
   1a454:	e24dd010 	sub	sp, sp, #16
   1a458:	8a000034 	bhi	1a530 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xf0>
   1a45c:	e1a04003 	mov	r4, r3
   1a460:	e1a05000 	mov	r5, r0
   1a464:	e2833015 	add	r3, r3, #21
   1a468:	e5900004 	ldr	r0, [r0, #4]
   1a46c:	e3c33007 	bic	r3, r3, #7
   1a470:	e04dd003 	sub	sp, sp, r3
   1a474:	e3500000 	cmp	r0, #0
   1a478:	e1a06002 	mov	r6, r2
   1a47c:	e1a07001 	mov	r7, r1
   1a480:	e28d8008 	add	r8, sp, #8
   1a484:	e284900e 	add	r9, r4, #14
   1a488:	0a00003f 	beq	1a58c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x14c>
   1a48c:	eb00018f 	bl	1aad0 <CNetDeviceLayer::GetMACAddress() const>
   1a490:	e3500000 	cmp	r0, #0
   1a494:	0a000028 	beq	1a53c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xfc>
   1a498:	e28d100e 	add	r1, sp, #14
   1a49c:	eb003df7 	bl	29c80 <CMACAddress::CopyTo(unsigned char*) const>
   1a4a0:	e3a02000 	mov	r2, #0
   1a4a4:	e3a03008 	mov	r3, #8
   1a4a8:	e1560002 	cmp	r6, r2
   1a4ac:	e5c8200d 	strb	r2, [r8, #13]
   1a4b0:	e5c8300c 	strb	r3, [r8, #12]
   1a4b4:	0a000038 	beq	1a59c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x15c>
   1a4b8:	e1a02004 	mov	r2, r4
   1a4bc:	e1a01006 	mov	r1, r6
   1a4c0:	e28d0016 	add	r0, sp, #22
   1a4c4:	eb003cb1 	bl	29790 <memcpy>
   1a4c8:	e5953000 	ldr	r3, [r5]
   1a4cc:	e3530000 	cmp	r3, #0
   1a4d0:	0a000035 	beq	1a5ac <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x16c>
   1a4d4:	e595300c 	ldr	r3, [r5, #12]
   1a4d8:	e3530000 	cmp	r3, #0
   1a4dc:	0a000036 	beq	1a5bc <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x17c>
   1a4e0:	e24b0024 	sub	r0, fp, #36	; 0x24
   1a4e4:	eb003d9a 	bl	29b54 <CMACAddress::CMACAddress()>
   1a4e8:	e1a00007 	mov	r0, r7
   1a4ec:	eb0016b3 	bl	1ffc0 <CIPAddress::IsBroadcast() const>
   1a4f0:	e3500000 	cmp	r0, #0
   1a4f4:	0a000014 	beq	1a54c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x10c>
   1a4f8:	e24b0024 	sub	r0, fp, #36	; 0x24
   1a4fc:	eb003dca 	bl	29c2c <CMACAddress::SetBroadcast()>
   1a500:	e1a01008 	mov	r1, r8
   1a504:	e24b0024 	sub	r0, fp, #36	; 0x24
   1a508:	eb003ddc 	bl	29c80 <CMACAddress::CopyTo(unsigned char*) const>
   1a50c:	e1a02009 	mov	r2, r9
   1a510:	e1a01008 	mov	r1, r8
   1a514:	e5950004 	ldr	r0, [r5, #4]
   1a518:	eb000179 	bl	1ab04 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1a51c:	e24b0024 	sub	r0, fp, #36	; 0x24
   1a520:	eb003d8e 	bl	29b60 <CMACAddress::~CMACAddress()>
   1a524:	e3a00001 	mov	r0, #1
   1a528:	e24bd01c 	sub	sp, fp, #28
   1a52c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a530:	e3a00000 	mov	r0, #0
   1a534:	e24bd01c 	sub	sp, fp, #28
   1a538:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a53c:	e3a02089 	mov	r2, #137	; 0x89
   1a540:	e59f1088 	ldr	r1, [pc, #136]	; 1a5d0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1a544:	e59f0088 	ldr	r0, [pc, #136]	; 1a5d4 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x194>
   1a548:	eb00244c 	bl	23680 <assertion_failed>
   1a54c:	e5950000 	ldr	r0, [r5]
   1a550:	eb00155b 	bl	1fac4 <CNetConfig::GetBroadcastAddress() const>
   1a554:	e1a01000 	mov	r1, r0
   1a558:	e1a00007 	mov	r0, r7
   1a55c:	eb0015c1 	bl	1fc68 <CIPAddress::operator==(CIPAddress const&) const>
   1a560:	e3500000 	cmp	r0, #0
   1a564:	1affffe3 	bne	1a4f8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xb8>
   1a568:	e595000c 	ldr	r0, [r5, #12]
   1a56c:	e1a01007 	mov	r1, r7
   1a570:	e58d9000 	str	r9, [sp]
   1a574:	e1a03008 	mov	r3, r8
   1a578:	e24b2024 	sub	r2, fp, #36	; 0x24
   1a57c:	eb000417 	bl	1b5e0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>
   1a580:	e3500000 	cmp	r0, #0
   1a584:	1affffdd 	bne	1a500 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xc0>
   1a588:	eaffffe3 	b	1a51c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xdc>
   1a58c:	e3a02087 	mov	r2, #135	; 0x87
   1a590:	e59f1038 	ldr	r1, [pc, #56]	; 1a5d0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1a594:	e59f003c 	ldr	r0, [pc, #60]	; 1a5d8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x198>
   1a598:	eb002438 	bl	23680 <assertion_failed>
   1a59c:	e3a0208e 	mov	r2, #142	; 0x8e
   1a5a0:	e59f1028 	ldr	r1, [pc, #40]	; 1a5d0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1a5a4:	e59f0030 	ldr	r0, [pc, #48]	; 1a5dc <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x19c>
   1a5a8:	eb002434 	bl	23680 <assertion_failed>
   1a5ac:	e3a02092 	mov	r2, #146	; 0x92
   1a5b0:	e59f1018 	ldr	r1, [pc, #24]	; 1a5d0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1a5b4:	e59f0024 	ldr	r0, [pc, #36]	; 1a5e0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1a0>
   1a5b8:	eb002430 	bl	23680 <assertion_failed>
   1a5bc:	e3a02093 	mov	r2, #147	; 0x93
   1a5c0:	e59f1008 	ldr	r1, [pc, #8]	; 1a5d0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1a5c4:	e59f0018 	ldr	r0, [pc, #24]	; 1a5e4 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1a4>
   1a5c8:	eb00242c 	bl	23680 <assertion_failed>
   1a5cc:	00000631 	.word	0x00000631
   1a5d0:	000390d8 	.word	0x000390d8
   1a5d4:	00039114 	.word	0x00039114
   1a5d8:	000390e8 	.word	0x000390e8
   1a5dc:	0003913c 	.word	0x0003913c
   1a5e0:	00038f28 	.word	0x00038f28
   1a5e4:	00039128 	.word	0x00039128

0001a5e8 <CLinkLayer::Receive(void*, unsigned int*)>:
   1a5e8:	e3510000 	cmp	r1, #0
   1a5ec:	e92d4010 	push	{r4, lr}
   1a5f0:	0a000009 	beq	1a61c <CLinkLayer::Receive(void*, unsigned int*)+0x34>
   1a5f4:	e3520000 	cmp	r2, #0
   1a5f8:	e1a04002 	mov	r4, r2
   1a5fc:	0a00000a 	beq	1a62c <CLinkLayer::Receive(void*, unsigned int*)+0x44>
   1a600:	e3a02000 	mov	r2, #0
   1a604:	e280001c 	add	r0, r0, #28
   1a608:	eb001750 	bl	20350 <CNetQueue::Dequeue(void*, void**)>
   1a60c:	e5840000 	str	r0, [r4]
   1a610:	e2900000 	adds	r0, r0, #0
   1a614:	13a00001 	movne	r0, #1
   1a618:	e8bd8010 	pop	{r4, pc}
   1a61c:	e3a020a9 	mov	r2, #169	; 0xa9
   1a620:	e59f1014 	ldr	r1, [pc, #20]	; 1a63c <CLinkLayer::Receive(void*, unsigned int*)+0x54>
   1a624:	e59f0014 	ldr	r0, [pc, #20]	; 1a640 <CLinkLayer::Receive(void*, unsigned int*)+0x58>
   1a628:	eb002414 	bl	23680 <assertion_failed>
   1a62c:	e3a020aa 	mov	r2, #170	; 0xaa
   1a630:	e59f1004 	ldr	r1, [pc, #4]	; 1a63c <CLinkLayer::Receive(void*, unsigned int*)+0x54>
   1a634:	e59f0008 	ldr	r0, [pc, #8]	; 1a644 <CLinkLayer::Receive(void*, unsigned int*)+0x5c>
   1a638:	eb002410 	bl	23680 <assertion_failed>
   1a63c:	000390d8 	.word	0x000390d8
   1a640:	00036138 	.word	0x00036138
   1a644:	00036964 	.word	0x00036964

0001a648 <CLinkLayer::SendRaw(void const*, unsigned int)>:
   1a648:	e3510000 	cmp	r1, #0
   1a64c:	e92d4010 	push	{r4, lr}
   1a650:	0a000007 	beq	1a674 <CLinkLayer::SendRaw(void const*, unsigned int)+0x2c>
   1a654:	e3520000 	cmp	r2, #0
   1a658:	0a000009 	beq	1a684 <CLinkLayer::SendRaw(void const*, unsigned int)+0x3c>
   1a65c:	e5900004 	ldr	r0, [r0, #4]
   1a660:	e3500000 	cmp	r0, #0
   1a664:	0a00000a 	beq	1a694 <CLinkLayer::SendRaw(void const*, unsigned int)+0x4c>
   1a668:	eb000125 	bl	1ab04 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1a66c:	e3a00001 	mov	r0, #1
   1a670:	e8bd8010 	pop	{r4, pc}
   1a674:	e3a020b2 	mov	r2, #178	; 0xb2
   1a678:	e59f1024 	ldr	r1, [pc, #36]	; 1a6a4 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1a67c:	e59f0024 	ldr	r0, [pc, #36]	; 1a6a8 <CLinkLayer::SendRaw(void const*, unsigned int)+0x60>
   1a680:	eb0023fe 	bl	23680 <assertion_failed>
   1a684:	e3a020b3 	mov	r2, #179	; 0xb3
   1a688:	e59f1014 	ldr	r1, [pc, #20]	; 1a6a4 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1a68c:	e59f0018 	ldr	r0, [pc, #24]	; 1a6ac <CLinkLayer::SendRaw(void const*, unsigned int)+0x64>
   1a690:	eb0023fa 	bl	23680 <assertion_failed>
   1a694:	e3a020b4 	mov	r2, #180	; 0xb4
   1a698:	e59f1004 	ldr	r1, [pc, #4]	; 1a6a4 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1a69c:	e59f000c 	ldr	r0, [pc, #12]	; 1a6b0 <CLinkLayer::SendRaw(void const*, unsigned int)+0x68>
   1a6a0:	eb0023f6 	bl	23680 <assertion_failed>
   1a6a4:	000390d8 	.word	0x000390d8
   1a6a8:	0003914c 	.word	0x0003914c
   1a6ac:	00038fb0 	.word	0x00038fb0
   1a6b0:	000390e8 	.word	0x000390e8

0001a6b4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)>:
   1a6b4:	e92d4030 	push	{r4, r5, lr}
   1a6b8:	e3510000 	cmp	r1, #0
   1a6bc:	e24dd00c 	sub	sp, sp, #12
   1a6c0:	0a000017 	beq	1a724 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x70>
   1a6c4:	e3520000 	cmp	r2, #0
   1a6c8:	e1a04002 	mov	r4, r2
   1a6cc:	0a000018 	beq	1a734 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x80>
   1a6d0:	e2800028 	add	r0, r0, #40	; 0x28
   1a6d4:	e28d2004 	add	r2, sp, #4
   1a6d8:	e1a05003 	mov	r5, r3
   1a6dc:	eb00171b 	bl	20350 <CNetQueue::Dequeue(void*, void**)>
   1a6e0:	e3500000 	cmp	r0, #0
   1a6e4:	e5840000 	str	r0, [r4]
   1a6e8:	0a00000b 	beq	1a71c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x68>
   1a6ec:	e3550000 	cmp	r5, #0
   1a6f0:	e59d4004 	ldr	r4, [sp, #4]
   1a6f4:	0a000004 	beq	1a70c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x58>
   1a6f8:	e3540000 	cmp	r4, #0
   1a6fc:	0a000010 	beq	1a744 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x90>
   1a700:	e1a00005 	mov	r0, r5
   1a704:	e1a01004 	mov	r1, r4
   1a708:	eb003d32 	bl	29bd8 <CMACAddress::Set(unsigned char const*)>
   1a70c:	e1a00004 	mov	r0, r4
   1a710:	e3a01006 	mov	r1, #6
   1a714:	eb003e04 	bl	29f2c <operator delete(void*, unsigned int)>
   1a718:	e3a00001 	mov	r0, #1
   1a71c:	e28dd00c 	add	sp, sp, #12
   1a720:	e8bd8030 	pop	{r4, r5, pc}
   1a724:	e3a020bd 	mov	r2, #189	; 0xbd
   1a728:	e59f1024 	ldr	r1, [pc, #36]	; 1a754 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa0>
   1a72c:	e59f0024 	ldr	r0, [pc, #36]	; 1a758 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa4>
   1a730:	eb0023d2 	bl	23680 <assertion_failed>
   1a734:	e3a020be 	mov	r2, #190	; 0xbe
   1a738:	e59f1014 	ldr	r1, [pc, #20]	; 1a754 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa0>
   1a73c:	e59f0018 	ldr	r0, [pc, #24]	; 1a75c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa8>
   1a740:	eb0023ce 	bl	23680 <assertion_failed>
   1a744:	e3a020c9 	mov	r2, #201	; 0xc9
   1a748:	e59f1004 	ldr	r1, [pc, #4]	; 1a754 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa0>
   1a74c:	e59f000c 	ldr	r0, [pc, #12]	; 1a760 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xac>
   1a750:	eb0023ca 	bl	23680 <assertion_failed>
   1a754:	000390d8 	.word	0x000390d8
   1a758:	00036138 	.word	0x00036138
   1a75c:	00036964 	.word	0x00036964
   1a760:	00038fa4 	.word	0x00038fa4

0001a764 <CLinkLayer::EnableReceiveRaw(unsigned short)>:
   1a764:	e1d033b4 	ldrh	r3, [r0, #52]	; 0x34
   1a768:	e3530000 	cmp	r3, #0
   1a76c:	1a000005 	bne	1a788 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x24>
   1a770:	e3510000 	cmp	r1, #0
   1a774:	0a000005 	beq	1a790 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x2c>
   1a778:	e6bf1fb1 	rev16	r1, r1
   1a77c:	e1c013b4 	strh	r1, [r0, #52]	; 0x34
   1a780:	e3a00001 	mov	r0, #1
   1a784:	e12fff1e 	bx	lr
   1a788:	e3a00000 	mov	r0, #0
   1a78c:	e12fff1e 	bx	lr
   1a790:	e92d4010 	push	{r4, lr}
   1a794:	e3a020d9 	mov	r2, #217	; 0xd9
   1a798:	e59f1004 	ldr	r1, [pc, #4]	; 1a7a4 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x40>
   1a79c:	e59f0004 	ldr	r0, [pc, #4]	; 1a7a8 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x44>
   1a7a0:	eb0023b6 	bl	23680 <assertion_failed>
   1a7a4:	000390d8 	.word	0x000390d8
   1a7a8:	00039158 	.word	0x00039158

0001a7ac <CLinkLayer::ResolveFailed(void const*, unsigned int)>:
   1a7ac:	e3510000 	cmp	r1, #0
   1a7b0:	e92d4010 	push	{r4, lr}
   1a7b4:	0a000009 	beq	1a7e0 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x34>
   1a7b8:	e352000e 	cmp	r2, #14
   1a7bc:	9a00000b 	bls	1a7f0 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x44>
   1a7c0:	e5900008 	ldr	r0, [r0, #8]
   1a7c4:	e3500000 	cmp	r0, #0
   1a7c8:	0a00000c 	beq	1a800 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x54>
   1a7cc:	e8bd4010 	pop	{r4, lr}
   1a7d0:	e242300e 	sub	r3, r2, #14
   1a7d4:	e281200e 	add	r2, r1, #14
   1a7d8:	e3a01001 	mov	r1, #1
   1a7dc:	eafffe37 	b	1a0c0 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>
   1a7e0:	e3a020e1 	mov	r2, #225	; 0xe1
   1a7e4:	e59f1024 	ldr	r1, [pc, #36]	; 1a810 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1a7e8:	e59f0024 	ldr	r0, [pc, #36]	; 1a814 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x68>
   1a7ec:	eb0023a3 	bl	23680 <assertion_failed>
   1a7f0:	e3a020e2 	mov	r2, #226	; 0xe2
   1a7f4:	e59f1014 	ldr	r1, [pc, #20]	; 1a810 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1a7f8:	e59f0018 	ldr	r0, [pc, #24]	; 1a818 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x6c>
   1a7fc:	eb00239f 	bl	23680 <assertion_failed>
   1a800:	e3a020e3 	mov	r2, #227	; 0xe3
   1a804:	e59f1004 	ldr	r1, [pc, #4]	; 1a810 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1a808:	e59f000c 	ldr	r0, [pc, #12]	; 1a81c <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x70>
   1a80c:	eb00239b 	bl	23680 <assertion_failed>
   1a810:	000390d8 	.word	0x000390d8
   1a814:	0003916c 	.word	0x0003916c
   1a818:	00039180 	.word	0x00039180
   1a81c:	00038f3c 	.word	0x00038f3c

0001a820 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>:
   1a820:	e3a03000 	mov	r3, #0
   1a824:	e92d4010 	push	{r4, lr}
   1a828:	e1a04000 	mov	r4, r0
   1a82c:	e5c02000 	strb	r2, [r0]
   1a830:	e980000a 	stmib	r0, {r1, r3}
   1a834:	e280000c 	add	r0, r0, #12
   1a838:	eb00163f 	bl	2013c <CNetQueue::CNetQueue()>
   1a83c:	e2840018 	add	r0, r4, #24
   1a840:	eb00163d 	bl	2013c <CNetQueue::CNetQueue()>
   1a844:	e1a00004 	mov	r0, r4
   1a848:	e8bd8010 	pop	{r4, pc}

0001a84c <CNetDeviceLayer::~CNetDeviceLayer()>:
   1a84c:	e92d4010 	push	{r4, lr}
   1a850:	e3a03000 	mov	r3, #0
   1a854:	e1a04000 	mov	r4, r0
   1a858:	e2800018 	add	r0, r0, #24
   1a85c:	e5843008 	str	r3, [r4, #8]
   1a860:	e5843004 	str	r3, [r4, #4]
   1a864:	eb00166e 	bl	20224 <CNetQueue::~CNetQueue()>
   1a868:	e284000c 	add	r0, r4, #12
   1a86c:	eb00166c 	bl	20224 <CNetQueue::~CNetQueue()>
   1a870:	e1a00004 	mov	r0, r4
   1a874:	e8bd8010 	pop	{r4, pc}

0001a878 <CNetDeviceLayer::Initialize(bool)>:
   1a878:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1a87c:	e5903008 	ldr	r3, [r0, #8]
   1a880:	e24dd00c 	sub	sp, sp, #12
   1a884:	e3530000 	cmp	r3, #0
   1a888:	1a000039 	bne	1a974 <CNetDeviceLayer::Initialize(bool)+0xfc>
   1a88c:	e1a04000 	mov	r4, r0
   1a890:	e5d00000 	ldrb	r0, [r0]
   1a894:	e1a06001 	mov	r6, r1
   1a898:	eb003d60 	bl	29e20 <CNetDevice::GetNetDevice(TNetDeviceType)>
   1a89c:	e3500000 	cmp	r0, #0
   1a8a0:	e1a05000 	mov	r5, r0
   1a8a4:	e5840008 	str	r0, [r4, #8]
   1a8a8:	0a000035 	beq	1a984 <CNetDeviceLayer::Initialize(bool)+0x10c>
   1a8ac:	e3a000e0 	mov	r0, #224	; 0xe0
   1a8b0:	eb003d8f 	bl	29ef4 <operator new(unsigned int)>
   1a8b4:	e5941008 	ldr	r1, [r4, #8]
   1a8b8:	eb0000dd 	bl	1ac34 <CPHYTask::CPHYTask(CNetDevice*)>
   1a8bc:	e3560000 	cmp	r6, #0
   1a8c0:	1a000003 	bne	1a8d4 <CNetDeviceLayer::Initialize(bool)+0x5c>
   1a8c4:	e3a05001 	mov	r5, #1
   1a8c8:	e1a00005 	mov	r0, r5
   1a8cc:	e28dd00c 	add	sp, sp, #12
   1a8d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1a8d4:	eb003929 	bl	28d80 <CTimer::Get()>
   1a8d8:	eb003672 	bl	282a8 <CTimer::GetTicks() const>
   1a8dc:	e59f60b8 	ldr	r6, [pc, #184]	; 1a99c <CNetDeviceLayer::Initialize(bool)+0x124>
   1a8e0:	e1a07000 	mov	r7, r0
   1a8e4:	ea000005 	b	1a900 <CNetDeviceLayer::Initialize(bool)+0x88>
   1a8e8:	e5940008 	ldr	r0, [r4, #8]
   1a8ec:	e5903000 	ldr	r3, [r0]
   1a8f0:	e593301c 	ldr	r3, [r3, #28]
   1a8f4:	e12fff33 	blx	r3
   1a8f8:	e2505000 	subs	r5, r0, #0
   1a8fc:	1a00000a 	bne	1a92c <CNetDeviceLayer::Initialize(bool)+0xb4>
   1a900:	eb00391e 	bl	28d80 <CTimer::Get()>
   1a904:	eb003667 	bl	282a8 <CTimer::GetTicks() const>
   1a908:	e0400007 	sub	r0, r0, r7
   1a90c:	e1500006 	cmp	r0, r6
   1a910:	9afffff4 	bls	1a8e8 <CNetDeviceLayer::Initialize(bool)+0x70>
   1a914:	eb002c4c 	bl	25a4c <CLogger::Get()>
   1a918:	e59f3080 	ldr	r3, [pc, #128]	; 1a9a0 <CNetDeviceLayer::Initialize(bool)+0x128>
   1a91c:	e3a02002 	mov	r2, #2
   1a920:	e59f107c 	ldr	r1, [pc, #124]	; 1a9a4 <CNetDeviceLayer::Initialize(bool)+0x12c>
   1a924:	eb002b85 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a928:	eaffffe5 	b	1a8c4 <CNetDeviceLayer::Initialize(bool)+0x4c>
   1a92c:	e5940008 	ldr	r0, [r4, #8]
   1a930:	e5903000 	ldr	r3, [r0]
   1a934:	e5933020 	ldr	r3, [r3, #32]
   1a938:	e12fff33 	blx	r3
   1a93c:	e3500006 	cmp	r0, #6
   1a940:	e1a04000 	mov	r4, r0
   1a944:	0affffde 	beq	1a8c4 <CNetDeviceLayer::Initialize(bool)+0x4c>
   1a948:	eb002c3f 	bl	25a4c <CLogger::Get()>
   1a94c:	e1a06000 	mov	r6, r0
   1a950:	e1a00004 	mov	r0, r4
   1a954:	eb003d22 	bl	29de4 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>
   1a958:	e59f3048 	ldr	r3, [pc, #72]	; 1a9a8 <CNetDeviceLayer::Initialize(bool)+0x130>
   1a95c:	e58d0000 	str	r0, [sp]
   1a960:	e3a02003 	mov	r2, #3
   1a964:	e1a00006 	mov	r0, r6
   1a968:	e59f1034 	ldr	r1, [pc, #52]	; 1a9a4 <CNetDeviceLayer::Initialize(bool)+0x12c>
   1a96c:	eb002b73 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a970:	eaffffd4 	b	1a8c8 <CNetDeviceLayer::Initialize(bool)+0x50>
   1a974:	e3a02033 	mov	r2, #51	; 0x33
   1a978:	e59f102c 	ldr	r1, [pc, #44]	; 1a9ac <CNetDeviceLayer::Initialize(bool)+0x134>
   1a97c:	e59f002c 	ldr	r0, [pc, #44]	; 1a9b0 <CNetDeviceLayer::Initialize(bool)+0x138>
   1a980:	eb00233e 	bl	23680 <assertion_failed>
   1a984:	eb002c30 	bl	25a4c <CLogger::Get()>
   1a988:	e59f3024 	ldr	r3, [pc, #36]	; 1a9b4 <CNetDeviceLayer::Initialize(bool)+0x13c>
   1a98c:	e3a02001 	mov	r2, #1
   1a990:	e59f100c 	ldr	r1, [pc, #12]	; 1a9a4 <CNetDeviceLayer::Initialize(bool)+0x12c>
   1a994:	eb002b69 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a998:	eaffffca 	b	1a8c8 <CNetDeviceLayer::Initialize(bool)+0x50>
   1a99c:	0000018f 	.word	0x0000018f
   1a9a0:	000391d8 	.word	0x000391d8
   1a9a4:	000391a4 	.word	0x000391a4
   1a9a8:	000391e8 	.word	0x000391e8
   1a9ac:	000391ac 	.word	0x000391ac
   1a9b0:	00034f18 	.word	0x00034f18
   1a9b4:	000391bc 	.word	0x000391bc

0001a9b8 <CNetDeviceLayer::Process()>:
   1a9b8:	e92d4070 	push	{r4, r5, r6, lr}
   1a9bc:	e1a04000 	mov	r4, r0
   1a9c0:	e5900008 	ldr	r0, [r0, #8]
   1a9c4:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1a9c8:	e3500000 	cmp	r0, #0
   1a9cc:	e24dd008 	sub	sp, sp, #8
   1a9d0:	0a000035 	beq	1aaac <CNetDeviceLayer::Process()+0xf4>
   1a9d4:	e3a05000 	mov	r5, #0
   1a9d8:	e284600c 	add	r6, r4, #12
   1a9dc:	e5903000 	ldr	r3, [r0]
   1a9e0:	e5933010 	ldr	r3, [r3, #16]
   1a9e4:	e12fff33 	blx	r3
   1a9e8:	e3500000 	cmp	r0, #0
   1a9ec:	1a000015 	bne	1aa48 <CNetDeviceLayer::Process()+0x90>
   1a9f0:	e3a06000 	mov	r6, #0
   1a9f4:	e2845018 	add	r5, r4, #24
   1a9f8:	ea000003 	b	1aa0c <CNetDeviceLayer::Process()+0x54>
   1a9fc:	e1a03006 	mov	r3, r6
   1aa00:	e28d1008 	add	r1, sp, #8
   1aa04:	e1a00005 	mov	r0, r5
   1aa08:	eb00160a 	bl	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1aa0c:	e5940008 	ldr	r0, [r4, #8]
   1aa10:	e28d2004 	add	r2, sp, #4
   1aa14:	e5903000 	ldr	r3, [r0]
   1aa18:	e28d1008 	add	r1, sp, #8
   1aa1c:	e5933018 	ldr	r3, [r3, #24]
   1aa20:	e12fff33 	blx	r3
   1aa24:	e3500000 	cmp	r0, #0
   1aa28:	0a00001c 	beq	1aaa0 <CNetDeviceLayer::Process()+0xe8>
   1aa2c:	e59d2004 	ldr	r2, [sp, #4]
   1aa30:	e3520000 	cmp	r2, #0
   1aa34:	1afffff0 	bne	1a9fc <CNetDeviceLayer::Process()+0x44>
   1aa38:	e3a0206d 	mov	r2, #109	; 0x6d
   1aa3c:	e59f1078 	ldr	r1, [pc, #120]	; 1aabc <CNetDeviceLayer::Process()+0x104>
   1aa40:	e59f0078 	ldr	r0, [pc, #120]	; 1aac0 <CNetDeviceLayer::Process()+0x108>
   1aa44:	eb00230d 	bl	23680 <assertion_failed>
   1aa48:	e1a02005 	mov	r2, r5
   1aa4c:	e28d1008 	add	r1, sp, #8
   1aa50:	e1a00006 	mov	r0, r6
   1aa54:	eb00163d 	bl	20350 <CNetQueue::Dequeue(void*, void**)>
   1aa58:	e3500000 	cmp	r0, #0
   1aa5c:	e1a02000 	mov	r2, r0
   1aa60:	e58d0004 	str	r0, [sp, #4]
   1aa64:	0affffe1 	beq	1a9f0 <CNetDeviceLayer::Process()+0x38>
   1aa68:	e5940008 	ldr	r0, [r4, #8]
   1aa6c:	e28d1008 	add	r1, sp, #8
   1aa70:	e5903000 	ldr	r3, [r0]
   1aa74:	e5933014 	ldr	r3, [r3, #20]
   1aa78:	e12fff33 	blx	r3
   1aa7c:	e3500000 	cmp	r0, #0
   1aa80:	15940008 	ldrne	r0, [r4, #8]
   1aa84:	1affffd4 	bne	1a9dc <CNetDeviceLayer::Process()+0x24>
   1aa88:	eb002bef 	bl	25a4c <CLogger::Get()>
   1aa8c:	e59f3030 	ldr	r3, [pc, #48]	; 1aac4 <CNetDeviceLayer::Process()+0x10c>
   1aa90:	e3a02002 	mov	r2, #2
   1aa94:	e59f102c 	ldr	r1, [pc, #44]	; 1aac8 <CNetDeviceLayer::Process()+0x110>
   1aa98:	eb002b28 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1aa9c:	eaffffd3 	b	1a9f0 <CNetDeviceLayer::Process()+0x38>
   1aaa0:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1aaa4:	e28dd008 	add	sp, sp, #8
   1aaa8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1aaac:	e3a0205c 	mov	r2, #92	; 0x5c
   1aab0:	e59f1004 	ldr	r1, [pc, #4]	; 1aabc <CNetDeviceLayer::Process()+0x104>
   1aab4:	e59f0010 	ldr	r0, [pc, #16]	; 1aacc <CNetDeviceLayer::Process()+0x114>
   1aab8:	eb0022f0 	bl	23680 <assertion_failed>
   1aabc:	000391ac 	.word	0x000391ac
   1aac0:	00038fb0 	.word	0x00038fb0
   1aac4:	000391f4 	.word	0x000391f4
   1aac8:	000391a4 	.word	0x000391a4
   1aacc:	0003503c 	.word	0x0003503c

0001aad0 <CNetDeviceLayer::GetMACAddress() const>:
   1aad0:	e5900008 	ldr	r0, [r0, #8]
   1aad4:	e3500000 	cmp	r0, #0
   1aad8:	0a000002 	beq	1aae8 <CNetDeviceLayer::GetMACAddress() const+0x18>
   1aadc:	e5903000 	ldr	r3, [r0]
   1aae0:	e593300c 	ldr	r3, [r3, #12]
   1aae4:	e12fff13 	bx	r3
   1aae8:	e92d4010 	push	{r4, lr}
   1aaec:	e3a02074 	mov	r2, #116	; 0x74
   1aaf0:	e59f1004 	ldr	r1, [pc, #4]	; 1aafc <CNetDeviceLayer::GetMACAddress() const+0x2c>
   1aaf4:	e59f0004 	ldr	r0, [pc, #4]	; 1ab00 <CNetDeviceLayer::GetMACAddress() const+0x30>
   1aaf8:	eb0022e0 	bl	23680 <assertion_failed>
   1aafc:	000391ac 	.word	0x000391ac
   1ab00:	0003503c 	.word	0x0003503c

0001ab04 <CNetDeviceLayer::Send(void const*, unsigned int)>:
   1ab04:	e280000c 	add	r0, r0, #12
   1ab08:	e3a03000 	mov	r3, #0
   1ab0c:	ea0015c9 	b	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>

0001ab10 <CNetDeviceLayer::Receive(void*, unsigned int*)>:
   1ab10:	e92d4010 	push	{r4, lr}
   1ab14:	e2800018 	add	r0, r0, #24
   1ab18:	e1a04002 	mov	r4, r2
   1ab1c:	e3a02000 	mov	r2, #0
   1ab20:	eb00160a 	bl	20350 <CNetQueue::Dequeue(void*, void**)>
   1ab24:	e3500000 	cmp	r0, #0
   1ab28:	08bd8010 	popeq	{r4, pc}
   1ab2c:	e3540000 	cmp	r4, #0
   1ab30:	0a000002 	beq	1ab40 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x30>
   1ab34:	e5840000 	str	r0, [r4]
   1ab38:	e3a00001 	mov	r0, #1
   1ab3c:	e8bd8010 	pop	{r4, pc}
   1ab40:	e3a02085 	mov	r2, #133	; 0x85
   1ab44:	e59f1004 	ldr	r1, [pc, #4]	; 1ab50 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x40>
   1ab48:	e59f0004 	ldr	r0, [pc, #4]	; 1ab54 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x44>
   1ab4c:	eb0022cb 	bl	23680 <assertion_failed>
   1ab50:	000391ac 	.word	0x000391ac
   1ab54:	00036964 	.word	0x00036964

0001ab58 <CPHYTask::~CPHYTask()>:
   1ab58:	e3a02000 	mov	r2, #0
   1ab5c:	e92d4010 	push	{r4, lr}
   1ab60:	e1a04000 	mov	r4, r0
   1ab64:	e59f3010 	ldr	r3, [pc, #16]	; 1ab7c <CPHYTask::~CPHYTask()+0x24>
   1ab68:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1ab6c:	e5803000 	str	r3, [r0]
   1ab70:	eb00201e 	bl	22bf0 <CTask::~CTask()>
   1ab74:	e1a00004 	mov	r0, r4
   1ab78:	e8bd8010 	pop	{r4, pc}
   1ab7c:	0003920c 	.word	0x0003920c

0001ab80 <CPHYTask::~CPHYTask()>:
   1ab80:	e3a02000 	mov	r2, #0
   1ab84:	e92d4010 	push	{r4, lr}
   1ab88:	e1a04000 	mov	r4, r0
   1ab8c:	e59f301c 	ldr	r3, [pc, #28]	; 1abb0 <CPHYTask::~CPHYTask()+0x30>
   1ab90:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1ab94:	e5803000 	str	r3, [r0]
   1ab98:	eb002014 	bl	22bf0 <CTask::~CTask()>
   1ab9c:	e1a00004 	mov	r0, r4
   1aba0:	e3a010e0 	mov	r1, #224	; 0xe0
   1aba4:	eb003ce0 	bl	29f2c <operator delete(void*, unsigned int)>
   1aba8:	e1a00004 	mov	r0, r4
   1abac:	e8bd8010 	pop	{r4, pc}
   1abb0:	0003920c 	.word	0x0003920c

0001abb4 <CPHYTask::Run()>:
   1abb4:	e92d4070 	push	{r4, r5, r6, lr}
   1abb8:	e1a04000 	mov	r4, r0
   1abbc:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   1abc0:	e3500000 	cmp	r0, #0
   1abc4:	0a000013 	beq	1ac18 <CPHYTask::Run()+0x64>
   1abc8:	e5903000 	ldr	r3, [r0]
   1abcc:	e59f5054 	ldr	r5, [pc, #84]	; 1ac28 <CPHYTask::Run()+0x74>
   1abd0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1abd4:	e1530005 	cmp	r3, r5
   1abd8:	08bd8070 	popeq	{r4, r5, r6, pc}
   1abdc:	e3a06e7d 	mov	r6, #2000	; 0x7d0
   1abe0:	ea000003 	b	1abf4 <CPHYTask::Run()+0x40>
   1abe4:	e5903000 	ldr	r3, [r0]
   1abe8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1abec:	e1530005 	cmp	r3, r5
   1abf0:	08bd8070 	popeq	{r4, r5, r6, pc}
   1abf4:	e12fff33 	blx	r3
   1abf8:	e3500000 	cmp	r0, #0
   1abfc:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ac00:	eb0021f0 	bl	233c8 <CScheduler::Get()>
   1ac04:	e1a01006 	mov	r1, r6
   1ac08:	eb0021ca 	bl	23338 <CScheduler::MsSleep(unsigned int)>
   1ac0c:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   1ac10:	e3500000 	cmp	r0, #0
   1ac14:	1afffff2 	bne	1abe4 <CPHYTask::Run()+0x30>
   1ac18:	e3a02026 	mov	r2, #38	; 0x26
   1ac1c:	e59f1008 	ldr	r1, [pc, #8]	; 1ac2c <CPHYTask::Run()+0x78>
   1ac20:	e59f0008 	ldr	r0, [pc, #8]	; 1ac30 <CPHYTask::Run()+0x7c>
   1ac24:	eb002295 	bl	23680 <assertion_failed>
   1ac28:	00015024 	.word	0x00015024
   1ac2c:	00039218 	.word	0x00039218
   1ac30:	0003503c 	.word	0x0003503c

0001ac34 <CPHYTask::CPHYTask(CNetDevice*)>:
   1ac34:	e92d4070 	push	{r4, r5, r6, lr}
   1ac38:	e1a04000 	mov	r4, r0
   1ac3c:	e1a05001 	mov	r5, r1
   1ac40:	e3a01902 	mov	r1, #32768	; 0x8000
   1ac44:	eb00203c 	bl	22d3c <CTask::CTask(unsigned int)>
   1ac48:	e59f300c 	ldr	r3, [pc, #12]	; 1ac5c <CPHYTask::CPHYTask(CNetDevice*)+0x28>
   1ac4c:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   1ac50:	e5843000 	str	r3, [r4]
   1ac54:	e1a00004 	mov	r0, r4
   1ac58:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ac5c:	0003920c 	.word	0x0003920c

0001ac60 <CARPHandler::TimerHandler(unsigned int, void*, void*)>:
   1ac60:	e92d4070 	push	{r4, r5, r6, lr}
   1ac64:	e2524000 	subs	r4, r2, #0
   1ac68:	0a00001d 	beq	1ace4 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x84>
   1ac6c:	e5943010 	ldr	r3, [r4, #16]
   1ac70:	e1a05001 	mov	r5, r1
   1ac74:	e1510003 	cmp	r1, r3
   1ac78:	2a00001d 	bcs	1acf4 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x94>
   1ac7c:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1ac80:	e3500000 	cmp	r0, #0
   1ac84:	1a000006 	bne	1aca4 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x44>
   1ac88:	e1a01181 	lsl	r1, r1, #3
   1ac8c:	e0413005 	sub	r3, r1, r5
   1ac90:	e0843103 	add	r3, r4, r3, lsl #2
   1ac94:	e5d33014 	ldrb	r3, [r3, #20]
   1ac98:	e3530001 	cmp	r3, #1
   1ac9c:	0a000008 	beq	1acc4 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x64>
   1aca0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1aca4:	eb003fc4 	bl	2abbc <EnterCritical>
   1aca8:	e1a01185 	lsl	r1, r5, #3
   1acac:	e0413005 	sub	r3, r1, r5
   1acb0:	e0843103 	add	r3, r4, r3, lsl #2
   1acb4:	e5d33014 	ldrb	r3, [r3, #20]
   1acb8:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1acbc:	e3530001 	cmp	r3, #1
   1acc0:	1a000003 	bne	1acd4 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x74>
   1acc4:	e3a03002 	mov	r3, #2
   1acc8:	e0411005 	sub	r1, r1, r5
   1accc:	e0844311 	add	r4, r4, r1, lsl r3
   1acd0:	e5c43014 	strb	r3, [r4, #20]
   1acd4:	e3500000 	cmp	r0, #0
   1acd8:	08bd8070 	popeq	{r4, r5, r6, pc}
   1acdc:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ace0:	ea003fe0 	b	2ac68 <LeaveCritical>
   1ace4:	e59f2018 	ldr	r2, [pc, #24]	; 1ad04 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa4>
   1ace8:	e59f1018 	ldr	r1, [pc, #24]	; 1ad08 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa8>
   1acec:	e59f0018 	ldr	r0, [pc, #24]	; 1ad0c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xac>
   1acf0:	eb002262 	bl	23680 <assertion_failed>
   1acf4:	e3a02f6b 	mov	r2, #428	; 0x1ac
   1acf8:	e59f1008 	ldr	r1, [pc, #8]	; 1ad08 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa8>
   1acfc:	e59f000c 	ldr	r0, [pc, #12]	; 1ad10 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xb0>
   1ad00:	eb00225e 	bl	23680 <assertion_failed>
   1ad04:	000001a9 	.word	0x000001a9
   1ad08:	00039224 	.word	0x00039224
   1ad0c:	0003466c 	.word	0x0003466c
   1ad10:	00039234 	.word	0x00039234

0001ad14 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>:
   1ad14:	e92d4070 	push	{r4, r5, r6, lr}
   1ad18:	e3a0e000 	mov	lr, #0
   1ad1c:	e3a05001 	mov	r5, #1
   1ad20:	e59d4010 	ldr	r4, [sp, #16]
   1ad24:	e151000e 	cmp	r1, lr
   1ad28:	e880000e 	stm	r0, {r1, r2, r3}
   1ad2c:	e5805244 	str	r5, [r0, #580]	; 0x244
   1ad30:	e580400c 	str	r4, [r0, #12]
   1ad34:	e580e010 	str	lr, [r0, #16]
   1ad38:	e580e248 	str	lr, [r0, #584]	; 0x248
   1ad3c:	0a000009 	beq	1ad68 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x54>
   1ad40:	e3520000 	cmp	r2, #0
   1ad44:	0a00000b 	beq	1ad78 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x64>
   1ad48:	e3530000 	cmp	r3, #0
   1ad4c:	0a00000d 	beq	1ad88 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x74>
   1ad50:	e3540000 	cmp	r4, #0
   1ad54:	18bd8070 	popne	{r4, r5, r6, pc}
   1ad58:	e3a02045 	mov	r2, #69	; 0x45
   1ad5c:	e59f1034 	ldr	r1, [pc, #52]	; 1ad98 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1ad60:	e59f0034 	ldr	r0, [pc, #52]	; 1ad9c <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1ad64:	eb002245 	bl	23680 <assertion_failed>
   1ad68:	e3a02042 	mov	r2, #66	; 0x42
   1ad6c:	e59f1024 	ldr	r1, [pc, #36]	; 1ad98 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1ad70:	e59f0028 	ldr	r0, [pc, #40]	; 1ada0 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x8c>
   1ad74:	eb002241 	bl	23680 <assertion_failed>
   1ad78:	e3a02043 	mov	r2, #67	; 0x43
   1ad7c:	e59f1014 	ldr	r1, [pc, #20]	; 1ad98 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1ad80:	e59f001c 	ldr	r0, [pc, #28]	; 1ada4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x90>
   1ad84:	eb00223d 	bl	23680 <assertion_failed>
   1ad88:	e3a02044 	mov	r2, #68	; 0x44
   1ad8c:	e59f1004 	ldr	r1, [pc, #4]	; 1ad98 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1ad90:	e59f0010 	ldr	r0, [pc, #16]	; 1ada8 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x94>
   1ad94:	eb002239 	bl	23680 <assertion_failed>
   1ad98:	00039224 	.word	0x00039224
   1ad9c:	00039250 	.word	0x00039250
   1ada0:	00038f28 	.word	0x00038f28
   1ada4:	000390e8 	.word	0x000390e8
   1ada8:	00038fe4 	.word	0x00038fe4

0001adac <CARPHandler::~CARPHandler()>:
   1adac:	e5903010 	ldr	r3, [r0, #16]
   1adb0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1adb4:	e3530000 	cmp	r3, #0
   1adb8:	e1a08000 	mov	r8, r0
   1adbc:	0a000011 	beq	1ae08 <CARPHandler::~CARPHandler()+0x5c>
   1adc0:	e3a06000 	mov	r6, #0
   1adc4:	e1a04000 	mov	r4, r0
   1adc8:	e1a07006 	mov	r7, r6
   1adcc:	e3a0900c 	mov	r9, #12
   1add0:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
   1add4:	e2866001 	add	r6, r6, #1
   1add8:	e3550000 	cmp	r5, #0
   1addc:	0a000005 	beq	1adf8 <CARPHandler::~CARPHandler()+0x4c>
   1ade0:	e1a00005 	mov	r0, r5
   1ade4:	eb00150e 	bl	20224 <CNetQueue::~CNetQueue()>
   1ade8:	e1a01009 	mov	r1, r9
   1adec:	e1a00005 	mov	r0, r5
   1adf0:	eb003c4d 	bl	29f2c <operator delete(void*, unsigned int)>
   1adf4:	e5983010 	ldr	r3, [r8, #16]
   1adf8:	e1530006 	cmp	r3, r6
   1adfc:	e584702c 	str	r7, [r4, #44]	; 0x2c
   1ae00:	e284401c 	add	r4, r4, #28
   1ae04:	8afffff1 	bhi	1add0 <CARPHandler::~CARPHandler()+0x24>
   1ae08:	e1a00008 	mov	r0, r8
   1ae0c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001ae10 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>:
   1ae10:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ae14:	e1a06000 	mov	r6, r0
   1ae18:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1ae1c:	e1a09001 	mov	r9, r1
   1ae20:	e3500000 	cmp	r0, #0
   1ae24:	e1a08002 	mov	r8, r2
   1ae28:	1a000023 	bne	1aebc <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xac>
   1ae2c:	e5961010 	ldr	r1, [r6, #16]
   1ae30:	e3510000 	cmp	r1, #0
   1ae34:	0a00001f 	beq	1aeb8 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xa8>
   1ae38:	e3a05000 	mov	r5, #0
   1ae3c:	e1a04005 	mov	r4, r5
   1ae40:	ea000006 	b	1ae60 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x50>
   1ae44:	e5d33014 	ldrb	r3, [r3, #20]
   1ae48:	e3530002 	cmp	r3, #2
   1ae4c:	0a000009 	beq	1ae78 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x68>
   1ae50:	e2844001 	add	r4, r4, #1
   1ae54:	e1510004 	cmp	r1, r4
   1ae58:	e285501c 	add	r5, r5, #28
   1ae5c:	9a000010 	bls	1aea4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x94>
   1ae60:	e1a07184 	lsl	r7, r4, #3
   1ae64:	e0473004 	sub	r3, r7, r4
   1ae68:	e0863103 	add	r3, r6, r3, lsl #2
   1ae6c:	e5d32014 	ldrb	r2, [r3, #20]
   1ae70:	e3520001 	cmp	r2, #1
   1ae74:	1afffff2 	bne	1ae44 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x34>
   1ae78:	e2851015 	add	r1, r5, #21
   1ae7c:	e0861001 	add	r1, r6, r1
   1ae80:	e1a00009 	mov	r0, r9
   1ae84:	eb0013a6 	bl	1fd24 <CIPAddress::operator==(unsigned char const*) const>
   1ae88:	e3500000 	cmp	r0, #0
   1ae8c:	1a00000f 	bne	1aed0 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xc0>
   1ae90:	e5961010 	ldr	r1, [r6, #16]
   1ae94:	e2844001 	add	r4, r4, #1
   1ae98:	e1510004 	cmp	r1, r4
   1ae9c:	e285501c 	add	r5, r5, #28
   1aea0:	8affffee 	bhi	1ae60 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x50>
   1aea4:	e5963244 	ldr	r3, [r6, #580]	; 0x244
   1aea8:	e3530000 	cmp	r3, #0
   1aeac:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aeb0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aeb4:	ea003f6b 	b	2ac68 <LeaveCritical>
   1aeb8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aebc:	eb003f3e 	bl	2abbc <EnterCritical>
   1aec0:	e5961010 	ldr	r1, [r6, #16]
   1aec4:	e3510000 	cmp	r1, #0
   1aec8:	1affffda 	bne	1ae38 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x28>
   1aecc:	eafffff4 	b	1aea4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x94>
   1aed0:	e0474004 	sub	r4, r7, r4
   1aed4:	e0864104 	add	r4, r6, r4, lsl #2
   1aed8:	eb0037a8 	bl	28d80 <CTimer::Get()>
   1aedc:	e5941020 	ldr	r1, [r4, #32]
   1aee0:	eb003635 	bl	287bc <CTimer::CancelKernelTimer(unsigned int)>
   1aee4:	e2851019 	add	r1, r5, #25
   1aee8:	e0861001 	add	r1, r6, r1
   1aeec:	e1a00008 	mov	r0, r8
   1aef0:	eb003b62 	bl	29c80 <CMACAddress::CopyTo(unsigned char*) const>
   1aef4:	e3a03003 	mov	r3, #3
   1aef8:	e5c43014 	strb	r3, [r4, #20]
   1aefc:	eaffffe8 	b	1aea4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x94>

0001af00 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>:
   1af00:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af04:	e1a09000 	mov	r9, r0
   1af08:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1af0c:	e24dd00c 	sub	sp, sp, #12
   1af10:	e3500000 	cmp	r0, #0
   1af14:	e1a07001 	mov	r7, r1
   1af18:	e1a08002 	mov	r8, r2
   1af1c:	1a000038 	bne	1b004 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x104>
   1af20:	e5992010 	ldr	r2, [r9, #16]
   1af24:	e3520000 	cmp	r2, #0
   1af28:	e1a05002 	mov	r5, r2
   1af2c:	0a00004c 	beq	1b064 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x164>
   1af30:	e3a04000 	mov	r4, #0
   1af34:	e3a05014 	mov	r5, #20
   1af38:	e2896015 	add	r6, r9, #21
   1af3c:	ea000005 	b	1af58 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x58>
   1af40:	e3550014 	cmp	r5, #20
   1af44:	01a05004 	moveq	r5, r4
   1af48:	e2844001 	add	r4, r4, #1
   1af4c:	e1520004 	cmp	r2, r4
   1af50:	e286601c 	add	r6, r6, #28
   1af54:	9a00000e 	bls	1af94 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x94>
   1af58:	e0643184 	rsb	r3, r4, r4, lsl #3
   1af5c:	e0893103 	add	r3, r9, r3, lsl #2
   1af60:	e5d33014 	ldrb	r3, [r3, #20]
   1af64:	e3530000 	cmp	r3, #0
   1af68:	0afffff4 	beq	1af40 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x40>
   1af6c:	e1a01006 	mov	r1, r6
   1af70:	e1a00007 	mov	r0, r7
   1af74:	eb00136a 	bl	1fd24 <CIPAddress::operator==(unsigned char const*) const>
   1af78:	e3500000 	cmp	r0, #0
   1af7c:	1a000018 	bne	1afe4 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xe4>
   1af80:	e5992010 	ldr	r2, [r9, #16]
   1af84:	e2844001 	add	r4, r4, #1
   1af88:	e1520004 	cmp	r2, r4
   1af8c:	e286601c 	add	r6, r6, #28
   1af90:	8afffff0 	bhi	1af58 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x58>
   1af94:	e3550014 	cmp	r5, #20
   1af98:	0a00001b 	beq	1b00c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x10c>
   1af9c:	e1a0a185 	lsl	sl, r5, #3
   1afa0:	e04a6005 	sub	r6, sl, r5
   1afa4:	e1a06106 	lsl	r6, r6, #2
   1afa8:	e286b015 	add	fp, r6, #21
   1afac:	e2866019 	add	r6, r6, #25
   1afb0:	e089100b 	add	r1, r9, fp
   1afb4:	e1a00007 	mov	r0, r7
   1afb8:	eb0013db 	bl	1ff2c <CIPAddress::CopyTo(unsigned char*) const>
   1afbc:	e0891006 	add	r1, r9, r6
   1afc0:	e1a00008 	mov	r0, r8
   1afc4:	eb003b2d 	bl	29c80 <CMACAddress::CopyTo(unsigned char*) const>
   1afc8:	eb00376c 	bl	28d80 <CTimer::Get()>
   1afcc:	eb0034b5 	bl	282a8 <CTimer::GetTicks() const>
   1afd0:	e3a02004 	mov	r2, #4
   1afd4:	e04a3005 	sub	r3, sl, r5
   1afd8:	e0893103 	add	r3, r9, r3, lsl #2
   1afdc:	e5830028 	str	r0, [r3, #40]	; 0x28
   1afe0:	e5c32014 	strb	r2, [r3, #20]
   1afe4:	e5993244 	ldr	r3, [r9, #580]	; 0x244
   1afe8:	e3530000 	cmp	r3, #0
   1afec:	1a000001 	bne	1aff8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xf8>
   1aff0:	e28dd00c 	add	sp, sp, #12
   1aff4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aff8:	e28dd00c 	add	sp, sp, #12
   1affc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b000:	ea003f18 	b	2ac68 <LeaveCritical>
   1b004:	eb003eec 	bl	2abbc <EnterCritical>
   1b008:	eaffffc4 	b	1af20 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x20>
   1b00c:	e3520014 	cmp	r2, #20
   1b010:	0afffff3 	beq	1afe4 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xe4>
   1b014:	e1a05002 	mov	r5, r2
   1b018:	e0626182 	rsb	r6, r2, r2, lsl #3
   1b01c:	e1a06106 	lsl	r6, r6, #2
   1b020:	e286b015 	add	fp, r6, #21
   1b024:	e2866019 	add	r6, r6, #25
   1b028:	e3a03000 	mov	r3, #0
   1b02c:	e1a0a182 	lsl	sl, r2, #3
   1b030:	e04a2002 	sub	r2, sl, r2
   1b034:	e0894102 	add	r4, r9, r2, lsl #2
   1b038:	e5c43014 	strb	r3, [r4, #20]
   1b03c:	e3a0000c 	mov	r0, #12
   1b040:	eb003bab 	bl	29ef4 <operator new(unsigned int)>
   1b044:	e58d0004 	str	r0, [sp, #4]
   1b048:	eb00143b 	bl	2013c <CNetQueue::CNetQueue()>
   1b04c:	e5993010 	ldr	r3, [r9, #16]
   1b050:	e59d2004 	ldr	r2, [sp, #4]
   1b054:	e2833001 	add	r3, r3, #1
   1b058:	e584202c 	str	r2, [r4, #44]	; 0x2c
   1b05c:	e5893010 	str	r3, [r9, #16]
   1b060:	eaffffd2 	b	1afb0 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xb0>
   1b064:	e3a06019 	mov	r6, #25
   1b068:	e3a0b015 	mov	fp, #21
   1b06c:	eaffffed 	b	1b028 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x128>

0001b070 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>:
   1b070:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1b074:	e1a04000 	mov	r4, r0
   1b078:	e5900000 	ldr	r0, [r0]
   1b07c:	e24dd034 	sub	sp, sp, #52	; 0x34
   1b080:	e3500000 	cmp	r0, #0
   1b084:	0a000031 	beq	1b150 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xe0>
   1b088:	e1a05001 	mov	r5, r1
   1b08c:	e1a08002 	mov	r8, r2
   1b090:	e1a06003 	mov	r6, r3
   1b094:	eb001280 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   1b098:	e2509000 	subs	r9, r0, #0
   1b09c:	0a00002f 	beq	1b160 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xf0>
   1b0a0:	e5940004 	ldr	r0, [r4, #4]
   1b0a4:	e3500000 	cmp	r0, #0
   1b0a8:	0a000030 	beq	1b170 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x100>
   1b0ac:	ebfffe87 	bl	1aad0 <CNetDeviceLayer::GetMACAddress() const>
   1b0b0:	e2507000 	subs	r7, r0, #0
   1b0b4:	0a000031 	beq	1b180 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1b0b8:	e28d1004 	add	r1, sp, #4
   1b0bc:	e1a00006 	mov	r0, r6
   1b0c0:	eb003aee 	bl	29c80 <CMACAddress::CopyTo(unsigned char*) const>
   1b0c4:	e28d100a 	add	r1, sp, #10
   1b0c8:	e1a00007 	mov	r0, r7
   1b0cc:	eb003aeb 	bl	29c80 <CMACAddress::CopyTo(unsigned char*) const>
   1b0d0:	e3a03c01 	mov	r3, #256	; 0x100
   1b0d4:	e3550000 	cmp	r5, #0
   1b0d8:	e3a01008 	mov	r1, #8
   1b0dc:	13a05c01 	movne	r5, #256	; 0x100
   1b0e0:	03a05c02 	moveq	r5, #512	; 0x200
   1b0e4:	e3a0c006 	mov	ip, #6
   1b0e8:	e3a02004 	mov	r2, #4
   1b0ec:	e1cd31b2 	strh	r3, [sp, #18]
   1b0f0:	e59f3098 	ldr	r3, [pc, #152]	; 1b190 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x120>
   1b0f4:	e1a00007 	mov	r0, r7
   1b0f8:	e1cd11b4 	strh	r1, [sp, #20]
   1b0fc:	e28d101a 	add	r1, sp, #26
   1b100:	e5cdc016 	strb	ip, [sp, #22]
   1b104:	e5cd2017 	strb	r2, [sp, #23]
   1b108:	e1cd31b0 	strh	r3, [sp, #16]
   1b10c:	e1cd51b8 	strh	r5, [sp, #24]
   1b110:	eb003ada 	bl	29c80 <CMACAddress::CopyTo(unsigned char*) const>
   1b114:	e1a00009 	mov	r0, r9
   1b118:	e28d1020 	add	r1, sp, #32
   1b11c:	eb001382 	bl	1ff2c <CIPAddress::CopyTo(unsigned char*) const>
   1b120:	e1a00006 	mov	r0, r6
   1b124:	e28d1024 	add	r1, sp, #36	; 0x24
   1b128:	eb003ad4 	bl	29c80 <CMACAddress::CopyTo(unsigned char*) const>
   1b12c:	e1a00008 	mov	r0, r8
   1b130:	e28d102a 	add	r1, sp, #42	; 0x2a
   1b134:	eb00137c 	bl	1ff2c <CIPAddress::CopyTo(unsigned char*) const>
   1b138:	e28d1004 	add	r1, sp, #4
   1b13c:	e5940004 	ldr	r0, [r4, #4]
   1b140:	e3a0202a 	mov	r2, #42	; 0x2a
   1b144:	ebfffe6e 	bl	1ab04 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b148:	e28dd034 	add	sp, sp, #52	; 0x34
   1b14c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b150:	e59f203c 	ldr	r2, [pc, #60]	; 1b194 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x124>
   1b154:	e59f103c 	ldr	r1, [pc, #60]	; 1b198 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1b158:	e59f003c 	ldr	r0, [pc, #60]	; 1b19c <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x12c>
   1b15c:	eb002147 	bl	23680 <assertion_failed>
   1b160:	e3a02f63 	mov	r2, #396	; 0x18c
   1b164:	e59f102c 	ldr	r1, [pc, #44]	; 1b198 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1b168:	e59f0030 	ldr	r0, [pc, #48]	; 1b1a0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x130>
   1b16c:	eb002143 	bl	23680 <assertion_failed>
   1b170:	e59f202c 	ldr	r2, [pc, #44]	; 1b1a4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x134>
   1b174:	e59f101c 	ldr	r1, [pc, #28]	; 1b198 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1b178:	e59f0028 	ldr	r0, [pc, #40]	; 1b1a8 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x138>
   1b17c:	eb00213f 	bl	23680 <assertion_failed>
   1b180:	e3a02e19 	mov	r2, #400	; 0x190
   1b184:	e59f100c 	ldr	r1, [pc, #12]	; 1b198 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1b188:	e59f001c 	ldr	r0, [pc, #28]	; 1b1ac <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x13c>
   1b18c:	eb00213b 	bl	23680 <assertion_failed>
   1b190:	00000608 	.word	0x00000608
   1b194:	0000018a 	.word	0x0000018a
   1b198:	00039224 	.word	0x00039224
   1b19c:	00038f28 	.word	0x00038f28
   1b1a0:	0003900c 	.word	0x0003900c
   1b1a4:	0000018e 	.word	0x0000018e
   1b1a8:	000390e8 	.word	0x000390e8
   1b1ac:	00039114 	.word	0x00039114

0001b1b0 <CARPHandler::Process()>:
   1b1b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1b4:	e1a04000 	mov	r4, r0
   1b1b8:	e5900000 	ldr	r0, [r0]
   1b1bc:	e24dde66 	sub	sp, sp, #1632	; 0x660
   1b1c0:	e3500000 	cmp	r0, #0
   1b1c4:	e24dd004 	sub	sp, sp, #4
   1b1c8:	0a0000d7 	beq	1b52c <CARPHandler::Process()+0x37c>
   1b1cc:	eb001232 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   1b1d0:	e2507000 	subs	r7, r0, #0
   1b1d4:	0a0000d8 	beq	1b53c <CARPHandler::Process()+0x38c>
   1b1d8:	e594000c 	ldr	r0, [r4, #12]
   1b1dc:	e3500000 	cmp	r0, #0
   1b1e0:	0a0000d9 	beq	1b54c <CARPHandler::Process()+0x39c>
   1b1e4:	e28d3020 	add	r3, sp, #32
   1b1e8:	e28db038 	add	fp, sp, #56	; 0x38
   1b1ec:	e283a008 	add	sl, r3, #8
   1b1f0:	e283900e 	add	r9, r3, #14
   1b1f4:	e2438008 	sub	r8, r3, #8
   1b1f8:	e3a05000 	mov	r5, #0
   1b1fc:	ea000000 	b	1b204 <CARPHandler::Process()+0x54>
   1b200:	e594000c 	ldr	r0, [r4, #12]
   1b204:	e1a02005 	mov	r2, r5
   1b208:	e28d1020 	add	r1, sp, #32
   1b20c:	eb00144f 	bl	20350 <CNetQueue::Dequeue(void*, void**)>
   1b210:	e3500000 	cmp	r0, #0
   1b214:	0a00002a 	beq	1b2c4 <CARPHandler::Process()+0x114>
   1b218:	e350001b 	cmp	r0, #27
   1b21c:	9afffff7 	bls	1b200 <CARPHandler::Process()+0x50>
   1b220:	e1dd32b0 	ldrh	r3, [sp, #32]
   1b224:	e3530c01 	cmp	r3, #256	; 0x100
   1b228:	1afffff4 	bne	1b200 <CARPHandler::Process()+0x50>
   1b22c:	e1dd32b2 	ldrh	r3, [sp, #34]	; 0x22
   1b230:	e3530008 	cmp	r3, #8
   1b234:	1afffff1 	bne	1b200 <CARPHandler::Process()+0x50>
   1b238:	e5dd3024 	ldrb	r3, [sp, #36]	; 0x24
   1b23c:	e3530006 	cmp	r3, #6
   1b240:	1affffee 	bne	1b200 <CARPHandler::Process()+0x50>
   1b244:	e5dd3025 	ldrb	r3, [sp, #37]	; 0x25
   1b248:	e3530004 	cmp	r3, #4
   1b24c:	1affffeb 	bne	1b200 <CARPHandler::Process()+0x50>
   1b250:	e1a00007 	mov	r0, r7
   1b254:	eb00134b 	bl	1ff88 <CIPAddress::IsNull() const>
   1b258:	e3500000 	cmp	r0, #0
   1b25c:	1affffe7 	bne	1b200 <CARPHandler::Process()+0x50>
   1b260:	e1a0100b 	mov	r1, fp
   1b264:	e1a00007 	mov	r0, r7
   1b268:	eb0012c4 	bl	1fd80 <CIPAddress::operator!=(unsigned char const*) const>
   1b26c:	e3500000 	cmp	r0, #0
   1b270:	1affffe2 	bne	1b200 <CARPHandler::Process()+0x50>
   1b274:	e1a0100a 	mov	r1, sl
   1b278:	e28d0010 	add	r0, sp, #16
   1b27c:	eb003a65 	bl	29c18 <CMACAddress::CMACAddress(unsigned char const*)>
   1b280:	e1a01009 	mov	r1, r9
   1b284:	e1a00008 	mov	r0, r8
   1b288:	eb0012f6 	bl	1fe68 <CIPAddress::CIPAddress(unsigned char const*)>
   1b28c:	e1dd32b6 	ldrh	r3, [sp, #38]	; 0x26
   1b290:	e3530c01 	cmp	r3, #256	; 0x100
   1b294:	0a0000be 	beq	1b594 <CARPHandler::Process()+0x3e4>
   1b298:	e3530c02 	cmp	r3, #512	; 0x200
   1b29c:	1a000003 	bne	1b2b0 <CARPHandler::Process()+0x100>
   1b2a0:	e28d2010 	add	r2, sp, #16
   1b2a4:	e1a01008 	mov	r1, r8
   1b2a8:	e1a00004 	mov	r0, r4
   1b2ac:	ebfffed7 	bl	1ae10 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>
   1b2b0:	e1a00008 	mov	r0, r8
   1b2b4:	eb00126a 	bl	1fc64 <CIPAddress::~CIPAddress()>
   1b2b8:	e28d0010 	add	r0, sp, #16
   1b2bc:	eb003a27 	bl	29b60 <CMACAddress::~CMACAddress()>
   1b2c0:	eaffffce 	b	1b200 <CARPHandler::Process()+0x50>
   1b2c4:	e5943008 	ldr	r3, [r4, #8]
   1b2c8:	e3530000 	cmp	r3, #0
   1b2cc:	0a0000a2 	beq	1b55c <CARPHandler::Process()+0x3ac>
   1b2d0:	e5943004 	ldr	r3, [r4, #4]
   1b2d4:	e3530000 	cmp	r3, #0
   1b2d8:	0a0000a3 	beq	1b56c <CARPHandler::Process()+0x3bc>
   1b2dc:	e5942010 	ldr	r2, [r4, #16]
   1b2e0:	e3520000 	cmp	r2, #0
   1b2e4:	0a00002a 	beq	1b394 <CARPHandler::Process()+0x1e4>
   1b2e8:	e1a06000 	mov	r6, r0
   1b2ec:	e1a07000 	mov	r7, r0
   1b2f0:	e28d3018 	add	r3, sp, #24
   1b2f4:	e2845015 	add	r5, r4, #21
   1b2f8:	e58d300c 	str	r3, [sp, #12]
   1b2fc:	e1a08186 	lsl	r8, r6, #3
   1b300:	e0489006 	sub	r9, r8, r6
   1b304:	e0849109 	add	r9, r4, r9, lsl #2
   1b308:	e5d93014 	ldrb	r3, [r9, #20]
   1b30c:	e6ef3073 	uxtb	r3, r3
   1b310:	e3530002 	cmp	r3, #2
   1b314:	0a000049 	beq	1b440 <CARPHandler::Process()+0x290>
   1b318:	e3530003 	cmp	r3, #3
   1b31c:	1a000018 	bne	1b384 <CARPHandler::Process()+0x1d4>
   1b320:	e5950017 	ldr	r0, [r5, #23]
   1b324:	e3500000 	cmp	r0, #0
   1b328:	0a000077 	beq	1b50c <CARPHandler::Process()+0x35c>
   1b32c:	e285a004 	add	sl, r5, #4
   1b330:	e3a09006 	mov	r9, #6
   1b334:	ea000008 	b	1b35c <CARPHandler::Process()+0x1ac>
   1b338:	e1a02009 	mov	r2, r9
   1b33c:	e1a0100a 	mov	r1, sl
   1b340:	e28d0020 	add	r0, sp, #32
   1b344:	eb003911 	bl	29790 <memcpy>
   1b348:	e5940004 	ldr	r0, [r4, #4]
   1b34c:	e1a0200b 	mov	r2, fp
   1b350:	e28d1020 	add	r1, sp, #32
   1b354:	ebfffdea 	bl	1ab04 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b358:	e5950017 	ldr	r0, [r5, #23]
   1b35c:	e1a02007 	mov	r2, r7
   1b360:	e28d1020 	add	r1, sp, #32
   1b364:	eb0013f9 	bl	20350 <CNetQueue::Dequeue(void*, void**)>
   1b368:	e250b000 	subs	fp, r0, #0
   1b36c:	1afffff1 	bne	1b338 <CARPHandler::Process()+0x188>
   1b370:	e3a03004 	mov	r3, #4
   1b374:	e0488006 	sub	r8, r8, r6
   1b378:	e0848108 	add	r8, r4, r8, lsl #2
   1b37c:	e5c83014 	strb	r3, [r8, #20]
   1b380:	e5942010 	ldr	r2, [r4, #16]
   1b384:	e2866001 	add	r6, r6, #1
   1b388:	e1520006 	cmp	r2, r6
   1b38c:	e285501c 	add	r5, r5, #28
   1b390:	8affffd9 	bhi	1b2fc <CARPHandler::Process()+0x14c>
   1b394:	eb003679 	bl	28d80 <CTimer::Get()>
   1b398:	eb0033c2 	bl	282a8 <CTimer::GetTicks() const>
   1b39c:	e5943248 	ldr	r3, [r4, #584]	; 0x248
   1b3a0:	e59f2214 	ldr	r2, [pc, #532]	; 1b5bc <CARPHandler::Process()+0x40c>
   1b3a4:	e0403003 	sub	r3, r0, r3
   1b3a8:	e1530002 	cmp	r3, r2
   1b3ac:	e1a06000 	mov	r6, r0
   1b3b0:	9a00001f 	bls	1b434 <CARPHandler::Process()+0x284>
   1b3b4:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1b3b8:	e5846248 	str	r6, [r4, #584]	; 0x248
   1b3bc:	e3500000 	cmp	r0, #0
   1b3c0:	1a00006d 	bne	1b57c <CARPHandler::Process()+0x3cc>
   1b3c4:	e594e010 	ldr	lr, [r4, #16]
   1b3c8:	e35e0000 	cmp	lr, #0
   1b3cc:	0a000018 	beq	1b434 <CARPHandler::Process()+0x284>
   1b3d0:	e3a03000 	mov	r3, #0
   1b3d4:	e1a01004 	mov	r1, r4
   1b3d8:	e1a05003 	mov	r5, r3
   1b3dc:	ea000003 	b	1b3f0 <CARPHandler::Process()+0x240>
   1b3e0:	e2833001 	add	r3, r3, #1
   1b3e4:	e15e0003 	cmp	lr, r3
   1b3e8:	e281101c 	add	r1, r1, #28
   1b3ec:	9a00000d 	bls	1b428 <CARPHandler::Process()+0x278>
   1b3f0:	e0632183 	rsb	r2, r3, r3, lsl #3
   1b3f4:	e0842102 	add	r2, r4, r2, lsl #2
   1b3f8:	e5d2c014 	ldrb	ip, [r2, #20]
   1b3fc:	e35c0004 	cmp	ip, #4
   1b400:	1afffff6 	bne	1b3e0 <CARPHandler::Process()+0x230>
   1b404:	e591c028 	ldr	ip, [r1, #40]	; 0x28
   1b408:	e2833001 	add	r3, r3, #1
   1b40c:	e28cccea 	add	ip, ip, #59904	; 0xea00
   1b410:	e28cc060 	add	ip, ip, #96	; 0x60
   1b414:	e15c0006 	cmp	ip, r6
   1b418:	35c25014 	strbcc	r5, [r2, #20]
   1b41c:	e15e0003 	cmp	lr, r3
   1b420:	e281101c 	add	r1, r1, #28
   1b424:	8afffff1 	bhi	1b3f0 <CARPHandler::Process()+0x240>
   1b428:	e3500000 	cmp	r0, #0
   1b42c:	0a000000 	beq	1b434 <CARPHandler::Process()+0x284>
   1b430:	eb003e0c 	bl	2ac68 <LeaveCritical>
   1b434:	e28dde66 	add	sp, sp, #1632	; 0x660
   1b438:	e28dd004 	add	sp, sp, #4
   1b43c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b440:	e595300f 	ldr	r3, [r5, #15]
   1b444:	e3530002 	cmp	r3, #2
   1b448:	e2833001 	add	r3, r3, #1
   1b44c:	e585300f 	str	r3, [r5, #15]
   1b450:	9a000011 	bls	1b49c <CARPHandler::Process()+0x2ec>
   1b454:	e5950017 	ldr	r0, [r5, #23]
   1b458:	e3500000 	cmp	r0, #0
   1b45c:	1a000004 	bne	1b474 <CARPHandler::Process()+0x2c4>
   1b460:	ea00002d 	b	1b51c <CARPHandler::Process()+0x36c>
   1b464:	e5940008 	ldr	r0, [r4, #8]
   1b468:	e28d1020 	add	r1, sp, #32
   1b46c:	ebfffcce 	bl	1a7ac <CLinkLayer::ResolveFailed(void const*, unsigned int)>
   1b470:	e5950017 	ldr	r0, [r5, #23]
   1b474:	e1a02007 	mov	r2, r7
   1b478:	e28d1020 	add	r1, sp, #32
   1b47c:	eb0013b3 	bl	20350 <CNetQueue::Dequeue(void*, void**)>
   1b480:	e2502000 	subs	r2, r0, #0
   1b484:	1afffff6 	bne	1b464 <CARPHandler::Process()+0x2b4>
   1b488:	e0488006 	sub	r8, r8, r6
   1b48c:	e0848108 	add	r8, r4, r8, lsl #2
   1b490:	e5c82014 	strb	r2, [r8, #20]
   1b494:	e5942010 	ldr	r2, [r4, #16]
   1b498:	eaffffb9 	b	1b384 <CARPHandler::Process()+0x1d4>
   1b49c:	e59d800c 	ldr	r8, [sp, #12]
   1b4a0:	e1a01005 	mov	r1, r5
   1b4a4:	e1a00008 	mov	r0, r8
   1b4a8:	eb00126e 	bl	1fe68 <CIPAddress::CIPAddress(unsigned char const*)>
   1b4ac:	e28d0010 	add	r0, sp, #16
   1b4b0:	eb0039a7 	bl	29b54 <CMACAddress::CMACAddress()>
   1b4b4:	e28d0010 	add	r0, sp, #16
   1b4b8:	eb0039db 	bl	29c2c <CMACAddress::SetBroadcast()>
   1b4bc:	e1a02008 	mov	r2, r8
   1b4c0:	e3a01001 	mov	r1, #1
   1b4c4:	e28d3010 	add	r3, sp, #16
   1b4c8:	e1a00004 	mov	r0, r4
   1b4cc:	ebfffee7 	bl	1b070 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1b4d0:	e3a03001 	mov	r3, #1
   1b4d4:	e5c93014 	strb	r3, [r9, #20]
   1b4d8:	eb003628 	bl	28d80 <CTimer::Get()>
   1b4dc:	e59f20dc 	ldr	r2, [pc, #220]	; 1b5c0 <CARPHandler::Process()+0x410>
   1b4e0:	e1a03006 	mov	r3, r6
   1b4e4:	e3a01050 	mov	r1, #80	; 0x50
   1b4e8:	e58d4000 	str	r4, [sp]
   1b4ec:	eb003463 	bl	28680 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1b4f0:	e585000b 	str	r0, [r5, #11]
   1b4f4:	e28d0010 	add	r0, sp, #16
   1b4f8:	eb003998 	bl	29b60 <CMACAddress::~CMACAddress()>
   1b4fc:	e1a00008 	mov	r0, r8
   1b500:	eb0011d7 	bl	1fc64 <CIPAddress::~CIPAddress()>
   1b504:	e5942010 	ldr	r2, [r4, #16]
   1b508:	eaffff9d 	b	1b384 <CARPHandler::Process()+0x1d4>
   1b50c:	e3a020aa 	mov	r2, #170	; 0xaa
   1b510:	e59f10ac 	ldr	r1, [pc, #172]	; 1b5c4 <CARPHandler::Process()+0x414>
   1b514:	e59f00ac 	ldr	r0, [pc, #172]	; 1b5c8 <CARPHandler::Process()+0x418>
   1b518:	eb002058 	bl	23680 <assertion_failed>
   1b51c:	e3a0209f 	mov	r2, #159	; 0x9f
   1b520:	e59f109c 	ldr	r1, [pc, #156]	; 1b5c4 <CARPHandler::Process()+0x414>
   1b524:	e59f009c 	ldr	r0, [pc, #156]	; 1b5c8 <CARPHandler::Process()+0x418>
   1b528:	eb002054 	bl	23680 <assertion_failed>
   1b52c:	e3a02057 	mov	r2, #87	; 0x57
   1b530:	e59f108c 	ldr	r1, [pc, #140]	; 1b5c4 <CARPHandler::Process()+0x414>
   1b534:	e59f0090 	ldr	r0, [pc, #144]	; 1b5cc <CARPHandler::Process()+0x41c>
   1b538:	eb002050 	bl	23680 <assertion_failed>
   1b53c:	e3a02059 	mov	r2, #89	; 0x59
   1b540:	e59f107c 	ldr	r1, [pc, #124]	; 1b5c4 <CARPHandler::Process()+0x414>
   1b544:	e59f0084 	ldr	r0, [pc, #132]	; 1b5d0 <CARPHandler::Process()+0x420>
   1b548:	eb00204c 	bl	23680 <assertion_failed>
   1b54c:	e3a0205f 	mov	r2, #95	; 0x5f
   1b550:	e59f106c 	ldr	r1, [pc, #108]	; 1b5c4 <CARPHandler::Process()+0x414>
   1b554:	e59f0078 	ldr	r0, [pc, #120]	; 1b5d4 <CARPHandler::Process()+0x424>
   1b558:	eb002048 	bl	23680 <assertion_failed>
   1b55c:	e3a02088 	mov	r2, #136	; 0x88
   1b560:	e59f105c 	ldr	r1, [pc, #92]	; 1b5c4 <CARPHandler::Process()+0x414>
   1b564:	e59f006c 	ldr	r0, [pc, #108]	; 1b5d8 <CARPHandler::Process()+0x428>
   1b568:	eb002044 	bl	23680 <assertion_failed>
   1b56c:	e3a02089 	mov	r2, #137	; 0x89
   1b570:	e59f104c 	ldr	r1, [pc, #76]	; 1b5c4 <CARPHandler::Process()+0x414>
   1b574:	e59f0060 	ldr	r0, [pc, #96]	; 1b5dc <CARPHandler::Process()+0x42c>
   1b578:	eb002040 	bl	23680 <assertion_failed>
   1b57c:	eb003d8e 	bl	2abbc <EnterCritical>
   1b580:	e594e010 	ldr	lr, [r4, #16]
   1b584:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1b588:	e35e0000 	cmp	lr, #0
   1b58c:	1affff8f 	bne	1b3d0 <CARPHandler::Process()+0x220>
   1b590:	eaffffa4 	b	1b428 <CARPHandler::Process()+0x278>
   1b594:	e1a02008 	mov	r2, r8
   1b598:	e1a01005 	mov	r1, r5
   1b59c:	e1a00004 	mov	r0, r4
   1b5a0:	e28d3010 	add	r3, sp, #16
   1b5a4:	ebfffeb1 	bl	1b070 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1b5a8:	e28d2010 	add	r2, sp, #16
   1b5ac:	e1a01008 	mov	r1, r8
   1b5b0:	e1a00004 	mov	r0, r4
   1b5b4:	ebfffe51 	bl	1af00 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>
   1b5b8:	eaffff3c 	b	1b2b0 <CARPHandler::Process()+0x100>
   1b5bc:	0000176f 	.word	0x0000176f
   1b5c0:	0001ac60 	.word	0x0001ac60
   1b5c4:	00039224 	.word	0x00039224
   1b5c8:	00039260 	.word	0x00039260
   1b5cc:	00038f28 	.word	0x00038f28
   1b5d0:	0003900c 	.word	0x0003900c
   1b5d4:	00039250 	.word	0x00039250
   1b5d8:	00038fe4 	.word	0x00038fe4
   1b5dc:	000390e8 	.word	0x000390e8

0001b5e0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>:
   1b5e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5e4:	e1a05000 	mov	r5, r0
   1b5e8:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1b5ec:	e24dd024 	sub	sp, sp, #36	; 0x24
   1b5f0:	e3500000 	cmp	r0, #0
   1b5f4:	e1a0a001 	mov	sl, r1
   1b5f8:	e58d2014 	str	r2, [sp, #20]
   1b5fc:	e58d3010 	str	r3, [sp, #16]
   1b600:	1a000076 	bne	1b7e0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x200>
   1b604:	e5950010 	ldr	r0, [r5, #16]
   1b608:	e3500000 	cmp	r0, #0
   1b60c:	e1a08000 	mov	r8, r0
   1b610:	0a000084 	beq	1b828 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x248>
   1b614:	e3e09000 	mvn	r9, #0
   1b618:	e3e0b014 	mvn	fp, #20
   1b61c:	e3a04000 	mov	r4, #0
   1b620:	e3a08014 	mov	r8, #20
   1b624:	e58d900c 	str	r9, [sp, #12]
   1b628:	e04bb005 	sub	fp, fp, r5
   1b62c:	e2856015 	add	r6, r5, #21
   1b630:	e1a07184 	lsl	r7, r4, #3
   1b634:	e0473004 	sub	r3, r7, r4
   1b638:	e0853103 	add	r3, r5, r3, lsl #2
   1b63c:	e5d33014 	ldrb	r3, [r3, #20]
   1b640:	e3530004 	cmp	r3, #4
   1b644:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1b648:	ea000060 	b	1b7d0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x1f0>
   1b64c:	0001b7c4 	.word	0x0001b7c4
   1b650:	0001b768 	.word	0x0001b768
   1b654:	0001b768 	.word	0x0001b768
   1b658:	0001b768 	.word	0x0001b768
   1b65c:	0001b660 	.word	0x0001b660
   1b660:	e5963013 	ldr	r3, [r6, #19]
   1b664:	e1a01006 	mov	r1, r6
   1b668:	e1530009 	cmp	r3, r9
   1b66c:	31a09003 	movcc	r9, r3
   1b670:	e59d300c 	ldr	r3, [sp, #12]
   1b674:	31a03004 	movcc	r3, r4
   1b678:	e1a0000a 	mov	r0, sl
   1b67c:	e58d300c 	str	r3, [sp, #12]
   1b680:	eb0011a7 	bl	1fd24 <CIPAddress::operator==(unsigned char const*) const>
   1b684:	e3500000 	cmp	r0, #0
   1b688:	e08b1006 	add	r1, fp, r6
   1b68c:	1a000076 	bne	1b86c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x28c>
   1b690:	e5950010 	ldr	r0, [r5, #16]
   1b694:	e2844001 	add	r4, r4, #1
   1b698:	e1500004 	cmp	r0, r4
   1b69c:	e286601c 	add	r6, r6, #28
   1b6a0:	8affffe2 	bhi	1b630 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x50>
   1b6a4:	e3580014 	cmp	r8, #20
   1b6a8:	0a00004e 	beq	1b7e8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x208>
   1b6ac:	e1a06188 	lsl	r6, r8, #3
   1b6b0:	e0467008 	sub	r7, r6, r8
   1b6b4:	e1a07107 	lsl	r7, r7, #2
   1b6b8:	e2877015 	add	r7, r7, #21
   1b6bc:	e3a09001 	mov	r9, #1
   1b6c0:	e0464008 	sub	r4, r6, r8
   1b6c4:	e0854104 	add	r4, r5, r4, lsl #2
   1b6c8:	e1a0000a 	mov	r0, sl
   1b6cc:	e0851007 	add	r1, r5, r7
   1b6d0:	e5c49014 	strb	r9, [r4, #20]
   1b6d4:	eb001214 	bl	1ff2c <CIPAddress::CopyTo(unsigned char*) const>
   1b6d8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b6dc:	e3500000 	cmp	r0, #0
   1b6e0:	0a000075 	beq	1b8bc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2dc>
   1b6e4:	e59d1010 	ldr	r1, [sp, #16]
   1b6e8:	e3a03000 	mov	r3, #0
   1b6ec:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1b6f0:	eb0012d0 	bl	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b6f4:	eb0035a1 	bl	28d80 <CTimer::Get()>
   1b6f8:	eb0032ea 	bl	282a8 <CTimer::GetTicks() const>
   1b6fc:	e5849024 	str	r9, [r4, #36]	; 0x24
   1b700:	e5840028 	str	r0, [r4, #40]	; 0x28
   1b704:	eb00359d 	bl	28d80 <CTimer::Get()>
   1b708:	e1a03008 	mov	r3, r8
   1b70c:	e58d5000 	str	r5, [sp]
   1b710:	e59f21f8 	ldr	r2, [pc, #504]	; 1b910 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x330>
   1b714:	e3a01050 	mov	r1, #80	; 0x50
   1b718:	eb0033d8 	bl	28680 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1b71c:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   1b720:	e5840020 	str	r0, [r4, #32]
   1b724:	e3530000 	cmp	r3, #0
   1b728:	1a00004d 	bne	1b864 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x284>
   1b72c:	e28d0018 	add	r0, sp, #24
   1b730:	eb003907 	bl	29b54 <CMACAddress::CMACAddress()>
   1b734:	e28d0018 	add	r0, sp, #24
   1b738:	eb00393b 	bl	29c2c <CMACAddress::SetBroadcast()>
   1b73c:	e1a0200a 	mov	r2, sl
   1b740:	e28d3018 	add	r3, sp, #24
   1b744:	e1a00005 	mov	r0, r5
   1b748:	e3a01001 	mov	r1, #1
   1b74c:	ebfffe47 	bl	1b070 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1b750:	e28d0018 	add	r0, sp, #24
   1b754:	eb003901 	bl	29b60 <CMACAddress::~CMACAddress()>
   1b758:	e3a02000 	mov	r2, #0
   1b75c:	e1a00002 	mov	r0, r2
   1b760:	e28dd024 	add	sp, sp, #36	; 0x24
   1b764:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b768:	e1a01006 	mov	r1, r6
   1b76c:	e1a0000a 	mov	r0, sl
   1b770:	eb00116b 	bl	1fd24 <CIPAddress::operator==(unsigned char const*) const>
   1b774:	e3500000 	cmp	r0, #0
   1b778:	0affffc4 	beq	1b690 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xb0>
   1b77c:	e0474004 	sub	r4, r7, r4
   1b780:	e0854104 	add	r4, r5, r4, lsl #2
   1b784:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1b788:	e3500000 	cmp	r0, #0
   1b78c:	0a000052 	beq	1b8dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2fc>
   1b790:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1b794:	e59d1010 	ldr	r1, [sp, #16]
   1b798:	e3a03000 	mov	r3, #0
   1b79c:	eb0012a5 	bl	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b7a0:	eb003576 	bl	28d80 <CTimer::Get()>
   1b7a4:	eb0032bf 	bl	282a8 <CTimer::GetTicks() const>
   1b7a8:	e5952244 	ldr	r2, [r5, #580]	; 0x244
   1b7ac:	e5840028 	str	r0, [r4, #40]	; 0x28
   1b7b0:	e3520000 	cmp	r2, #0
   1b7b4:	0affffe8 	beq	1b75c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1b7b8:	eb003d2a 	bl	2ac68 <LeaveCritical>
   1b7bc:	e3a02000 	mov	r2, #0
   1b7c0:	eaffffe5 	b	1b75c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1b7c4:	e3580014 	cmp	r8, #20
   1b7c8:	01a08004 	moveq	r8, r4
   1b7cc:	eaffffb0 	b	1b694 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xb4>
   1b7d0:	e59f213c 	ldr	r2, [pc, #316]	; 1b914 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x334>
   1b7d4:	e59f113c 	ldr	r1, [pc, #316]	; 1b918 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1b7d8:	e59f013c 	ldr	r0, [pc, #316]	; 1b91c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x33c>
   1b7dc:	eb001fa7 	bl	23680 <assertion_failed>
   1b7e0:	eb003cf5 	bl	2abbc <EnterCritical>
   1b7e4:	eaffff86 	b	1b604 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x24>
   1b7e8:	e3500014 	cmp	r0, #20
   1b7ec:	1a000042 	bne	1b8fc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x31c>
   1b7f0:	e59d300c 	ldr	r3, [sp, #12]
   1b7f4:	e3530013 	cmp	r3, #19
   1b7f8:	8a000033 	bhi	1b8cc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2ec>
   1b7fc:	e3a02000 	mov	r2, #0
   1b800:	e59d100c 	ldr	r1, [sp, #12]
   1b804:	e1a03181 	lsl	r3, r1, #3
   1b808:	e0437001 	sub	r7, r3, r1
   1b80c:	e1a07107 	lsl	r7, r7, #2
   1b810:	e1a06003 	mov	r6, r3
   1b814:	e0853007 	add	r3, r5, r7
   1b818:	e1a08001 	mov	r8, r1
   1b81c:	e2877015 	add	r7, r7, #21
   1b820:	e5c32014 	strb	r2, [r3, #20]
   1b824:	eaffffa4 	b	1b6bc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xdc>
   1b828:	e3a07015 	mov	r7, #21
   1b82c:	e3a03000 	mov	r3, #0
   1b830:	e1a06180 	lsl	r6, r0, #3
   1b834:	e0460000 	sub	r0, r6, r0
   1b838:	e0854100 	add	r4, r5, r0, lsl #2
   1b83c:	e5c43014 	strb	r3, [r4, #20]
   1b840:	e3a0000c 	mov	r0, #12
   1b844:	eb0039aa 	bl	29ef4 <operator new(unsigned int)>
   1b848:	e1a09000 	mov	r9, r0
   1b84c:	eb00123a 	bl	2013c <CNetQueue::CNetQueue()>
   1b850:	e5953010 	ldr	r3, [r5, #16]
   1b854:	e584902c 	str	r9, [r4, #44]	; 0x2c
   1b858:	e2833001 	add	r3, r3, #1
   1b85c:	e5853010 	str	r3, [r5, #16]
   1b860:	eaffff95 	b	1b6bc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xdc>
   1b864:	eb003cff 	bl	2ac68 <LeaveCritical>
   1b868:	eaffffaf 	b	1b72c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x14c>
   1b86c:	e59d3014 	ldr	r3, [sp, #20]
   1b870:	e3530000 	cmp	r3, #0
   1b874:	0a00001c 	beq	1b8ec <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x30c>
   1b878:	e2811019 	add	r1, r1, #25
   1b87c:	e0851001 	add	r1, r5, r1
   1b880:	e58d000c 	str	r0, [sp, #12]
   1b884:	e59d0014 	ldr	r0, [sp, #20]
   1b888:	eb0038d2 	bl	29bd8 <CMACAddress::Set(unsigned char const*)>
   1b88c:	eb00353b 	bl	28d80 <CTimer::Get()>
   1b890:	eb003284 	bl	282a8 <CTimer::GetTicks() const>
   1b894:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   1b898:	e0474004 	sub	r4, r7, r4
   1b89c:	e0855104 	add	r5, r5, r4, lsl #2
   1b8a0:	e3530000 	cmp	r3, #0
   1b8a4:	e5850028 	str	r0, [r5, #40]	; 0x28
   1b8a8:	e59d200c 	ldr	r2, [sp, #12]
   1b8ac:	0affffaa 	beq	1b75c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1b8b0:	eb003cec 	bl	2ac68 <LeaveCritical>
   1b8b4:	e59d200c 	ldr	r2, [sp, #12]
   1b8b8:	eaffffa7 	b	1b75c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1b8bc:	e59f205c 	ldr	r2, [pc, #92]	; 1b920 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x340>
   1b8c0:	e59f1050 	ldr	r1, [pc, #80]	; 1b918 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1b8c4:	e59f0058 	ldr	r0, [pc, #88]	; 1b924 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x344>
   1b8c8:	eb001f6c 	bl	23680 <assertion_failed>
   1b8cc:	e59f2054 	ldr	r2, [pc, #84]	; 1b928 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x348>
   1b8d0:	e59f1040 	ldr	r1, [pc, #64]	; 1b918 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1b8d4:	e59f0050 	ldr	r0, [pc, #80]	; 1b92c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x34c>
   1b8d8:	eb001f68 	bl	23680 <assertion_failed>
   1b8dc:	e3a020eb 	mov	r2, #235	; 0xeb
   1b8e0:	e59f1030 	ldr	r1, [pc, #48]	; 1b918 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1b8e4:	e59f0044 	ldr	r0, [pc, #68]	; 1b930 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x350>
   1b8e8:	eb001f64 	bl	23680 <assertion_failed>
   1b8ec:	e3a020ff 	mov	r2, #255	; 0xff
   1b8f0:	e59f1020 	ldr	r1, [pc, #32]	; 1b918 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1b8f4:	e59f0038 	ldr	r0, [pc, #56]	; 1b934 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x354>
   1b8f8:	eb001f60 	bl	23680 <assertion_failed>
   1b8fc:	e3a0701c 	mov	r7, #28
   1b900:	e0070097 	mul	r7, r7, r0
   1b904:	e1a08000 	mov	r8, r0
   1b908:	e2877015 	add	r7, r7, #21
   1b90c:	eaffffc6 	b	1b82c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x24c>
   1b910:	0001ac60 	.word	0x0001ac60
   1b914:	0000010a 	.word	0x0000010a
   1b918:	00039224 	.word	0x00039224
   1b91c:	00035260 	.word	0x00035260
   1b920:	00000129 	.word	0x00000129
   1b924:	00039260 	.word	0x00039260
   1b928:	0000011d 	.word	0x0000011d
   1b92c:	000392ac 	.word	0x000392ac
   1b930:	00039278 	.word	0x00039278
   1b934:	00039298 	.word	0x00039298

0001b938 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>:
   1b938:	e92d4010 	push	{r4, lr}
   1b93c:	e59de008 	ldr	lr, [sp, #8]
   1b940:	e3510000 	cmp	r1, #0
   1b944:	e880400e 	stm	r0, {r1, r2, r3, lr}
   1b948:	0a000009 	beq	1b974 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x3c>
   1b94c:	e3520000 	cmp	r2, #0
   1b950:	0a00000b 	beq	1b984 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x4c>
   1b954:	e3530000 	cmp	r3, #0
   1b958:	0a00000d 	beq	1b994 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x5c>
   1b95c:	e35e0000 	cmp	lr, #0
   1b960:	18bd8010 	popne	{r4, pc}
   1b964:	e3a0203e 	mov	r2, #62	; 0x3e
   1b968:	e59f1034 	ldr	r1, [pc, #52]	; 1b9a4 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1b96c:	e59f0034 	ldr	r0, [pc, #52]	; 1b9a8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x70>
   1b970:	eb001f42 	bl	23680 <assertion_failed>
   1b974:	e3a0203b 	mov	r2, #59	; 0x3b
   1b978:	e59f1024 	ldr	r1, [pc, #36]	; 1b9a4 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1b97c:	e59f0028 	ldr	r0, [pc, #40]	; 1b9ac <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x74>
   1b980:	eb001f3e 	bl	23680 <assertion_failed>
   1b984:	e3a0203c 	mov	r2, #60	; 0x3c
   1b988:	e59f1014 	ldr	r1, [pc, #20]	; 1b9a4 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1b98c:	e59f001c 	ldr	r0, [pc, #28]	; 1b9b0 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x78>
   1b990:	eb001f3a 	bl	23680 <assertion_failed>
   1b994:	e3a0203d 	mov	r2, #61	; 0x3d
   1b998:	e59f1004 	ldr	r1, [pc, #4]	; 1b9a4 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1b99c:	e59f0010 	ldr	r0, [pc, #16]	; 1b9b4 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x7c>
   1b9a0:	eb001f36 	bl	23680 <assertion_failed>
   1b9a4:	000392d0 	.word	0x000392d0
   1b9a8:	000392e0 	.word	0x000392e0
   1b9ac:	00038f28 	.word	0x00038f28
   1b9b0:	00038f3c 	.word	0x00038f3c
   1b9b4:	00039250 	.word	0x00039250

0001b9b8 <CICMPHandler::~CICMPHandler()>:
   1b9b8:	e12fff1e 	bx	lr

0001b9bc <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>:
   1b9bc:	e92d4070 	push	{r4, r5, r6, lr}
   1b9c0:	e3510002 	cmp	r1, #2
   1b9c4:	e24dd010 	sub	sp, sp, #16
   1b9c8:	ca000024 	bgt	1ba60 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xa4>
   1b9cc:	e3520000 	cmp	r2, #0
   1b9d0:	e1a05002 	mov	r5, r2
   1b9d4:	e5cd1000 	strb	r1, [sp]
   1b9d8:	0a000024 	beq	1ba70 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xb4>
   1b9dc:	e1a04003 	mov	r4, r3
   1b9e0:	e5d23009 	ldrb	r3, [r2, #9]
   1b9e4:	e2851010 	add	r1, r5, #16
   1b9e8:	e3a02004 	mov	r2, #4
   1b9ec:	e1a06000 	mov	r6, r0
   1b9f0:	e28d0002 	add	r0, sp, #2
   1b9f4:	e5cd3001 	strb	r3, [sp, #1]
   1b9f8:	eb003764 	bl	29790 <memcpy>
   1b9fc:	e285100c 	add	r1, r5, #12
   1ba00:	e3a02004 	mov	r2, #4
   1ba04:	e28d0006 	add	r0, sp, #6
   1ba08:	eb003760 	bl	29790 <memcpy>
   1ba0c:	e3540000 	cmp	r4, #0
   1ba10:	0a00001a 	beq	1ba80 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xc4>
   1ba14:	e5d42002 	ldrb	r2, [r4, #2]
   1ba18:	e5d4c003 	ldrb	ip, [r4, #3]
   1ba1c:	e5d43000 	ldrb	r3, [r4]
   1ba20:	e5d41001 	ldrb	r1, [r4, #1]
   1ba24:	e596000c 	ldr	r0, [r6, #12]
   1ba28:	e182240c 	orr	r2, r2, ip, lsl #8
   1ba2c:	e1833401 	orr	r3, r3, r1, lsl #8
   1ba30:	e6bf2fb2 	rev16	r2, r2
   1ba34:	e6bf3fb3 	rev16	r3, r3
   1ba38:	e3500000 	cmp	r0, #0
   1ba3c:	e1cd20ba 	strh	r2, [sp, #10]
   1ba40:	e1cd30bc 	strh	r3, [sp, #12]
   1ba44:	0a000011 	beq	1ba90 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xd4>
   1ba48:	e1a0100d 	mov	r1, sp
   1ba4c:	e3a03000 	mov	r3, #0
   1ba50:	e3a0200e 	mov	r2, #14
   1ba54:	eb0011f7 	bl	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1ba58:	e28dd010 	add	sp, sp, #16
   1ba5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ba60:	e3a020ee 	mov	r2, #238	; 0xee
   1ba64:	e59f1034 	ldr	r1, [pc, #52]	; 1baa0 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1ba68:	e59f0034 	ldr	r0, [pc, #52]	; 1baa4 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe8>
   1ba6c:	eb001f03 	bl	23680 <assertion_failed>
   1ba70:	e3a020f3 	mov	r2, #243	; 0xf3
   1ba74:	e59f1024 	ldr	r1, [pc, #36]	; 1baa0 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1ba78:	e59f0028 	ldr	r0, [pc, #40]	; 1baa8 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xec>
   1ba7c:	eb001eff 	bl	23680 <assertion_failed>
   1ba80:	e3a020f8 	mov	r2, #248	; 0xf8
   1ba84:	e59f1014 	ldr	r1, [pc, #20]	; 1baa0 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1ba88:	e59f001c 	ldr	r0, [pc, #28]	; 1baac <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf0>
   1ba8c:	eb001efb 	bl	23680 <assertion_failed>
   1ba90:	e3a020fc 	mov	r2, #252	; 0xfc
   1ba94:	e59f1004 	ldr	r1, [pc, #4]	; 1baa0 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1ba98:	e59f0010 	ldr	r0, [pc, #16]	; 1bab0 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf4>
   1ba9c:	eb001ef7 	bl	23680 <assertion_failed>
   1baa0:	000392d0 	.word	0x000392d0
   1baa4:	000392fc 	.word	0x000392fc
   1baa8:	0003931c 	.word	0x0003931c
   1baac:	0003932c 	.word	0x0003932c
   1bab0:	000392e0 	.word	0x000392e0

0001bab4 <CICMPHandler::Process()>:
   1bab4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bab8:	e1a04000 	mov	r4, r0
   1babc:	e5900008 	ldr	r0, [r0, #8]
   1bac0:	e24dde67 	sub	sp, sp, #1648	; 0x670
   1bac4:	e3500000 	cmp	r0, #0
   1bac8:	e24dd004 	sub	sp, sp, #4
   1bacc:	0a00007e 	beq	1bccc <CICMPHandler::Process()+0x218>
   1bad0:	e59fb380 	ldr	fp, [pc, #896]	; 1be58 <CICMPHandler::Process()+0x3a4>
   1bad4:	e59f6380 	ldr	r6, [pc, #896]	; 1be5c <CICMPHandler::Process()+0x3a8>
   1bad8:	e59fa380 	ldr	sl, [pc, #896]	; 1be60 <CICMPHandler::Process()+0x3ac>
   1badc:	e59f9380 	ldr	r9, [pc, #896]	; 1be64 <CICMPHandler::Process()+0x3b0>
   1bae0:	e28d7048 	add	r7, sp, #72	; 0x48
   1bae4:	e28d2014 	add	r2, sp, #20
   1bae8:	e28d1030 	add	r1, sp, #48	; 0x30
   1baec:	eb001217 	bl	20350 <CNetQueue::Dequeue(void*, void**)>
   1baf0:	e2505000 	subs	r5, r0, #0
   1baf4:	0a000078 	beq	1bcdc <CICMPHandler::Process()+0x228>
   1baf8:	e59d8014 	ldr	r8, [sp, #20]
   1bafc:	e3580000 	cmp	r8, #0
   1bb00:	0a000050 	beq	1bc48 <CICMPHandler::Process()+0x194>
   1bb04:	e5d82000 	ldrb	r2, [r8]
   1bb08:	e3520001 	cmp	r2, #1
   1bb0c:	1a000051 	bne	1bc58 <CICMPHandler::Process()+0x1a4>
   1bb10:	e2881001 	add	r1, r8, #1
   1bb14:	e28d0018 	add	r0, sp, #24
   1bb18:	eb0010d2 	bl	1fe68 <CIPAddress::CIPAddress(unsigned char const*)>
   1bb1c:	e2881005 	add	r1, r8, #5
   1bb20:	e28d0020 	add	r0, sp, #32
   1bb24:	eb0010cf 	bl	1fe68 <CIPAddress::CIPAddress(unsigned char const*)>
   1bb28:	e1a00008 	mov	r0, r8
   1bb2c:	e3a01009 	mov	r1, #9
   1bb30:	eb0038fd 	bl	29f2c <operator delete(void*, unsigned int)>
   1bb34:	e5943000 	ldr	r3, [r4]
   1bb38:	e3530000 	cmp	r3, #0
   1bb3c:	0a000049 	beq	1bc68 <CICMPHandler::Process()+0x1b4>
   1bb40:	e28d0020 	add	r0, sp, #32
   1bb44:	eb00111d 	bl	1ffc0 <CIPAddress::IsBroadcast() const>
   1bb48:	e3500000 	cmp	r0, #0
   1bb4c:	0a000005 	beq	1bb68 <CICMPHandler::Process()+0xb4>
   1bb50:	e28d0020 	add	r0, sp, #32
   1bb54:	eb001042 	bl	1fc64 <CIPAddress::~CIPAddress()>
   1bb58:	e28d0018 	add	r0, sp, #24
   1bb5c:	eb001040 	bl	1fc64 <CIPAddress::~CIPAddress()>
   1bb60:	e5940008 	ldr	r0, [r4, #8]
   1bb64:	eaffffde 	b	1bae4 <CICMPHandler::Process()+0x30>
   1bb68:	e5940000 	ldr	r0, [r4]
   1bb6c:	eb000fd4 	bl	1fac4 <CNetConfig::GetBroadcastAddress() const>
   1bb70:	e1a01000 	mov	r1, r0
   1bb74:	e28d0020 	add	r0, sp, #32
   1bb78:	eb00103a 	bl	1fc68 <CIPAddress::operator==(CIPAddress const&) const>
   1bb7c:	e3500000 	cmp	r0, #0
   1bb80:	1afffff2 	bne	1bb50 <CICMPHandler::Process()+0x9c>
   1bb84:	e3550007 	cmp	r5, #7
   1bb88:	9afffff0 	bls	1bb50 <CICMPHandler::Process()+0x9c>
   1bb8c:	e1a01005 	mov	r1, r5
   1bb90:	e28d0030 	add	r0, sp, #48	; 0x30
   1bb94:	eb0012b3 	bl	20668 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1bb98:	e3500000 	cmp	r0, #0
   1bb9c:	1affffeb 	bne	1bb50 <CICMPHandler::Process()+0x9c>
   1bba0:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1bba4:	e3530008 	cmp	r3, #8
   1bba8:	0a000032 	beq	1bc78 <CICMPHandler::Process()+0x1c4>
   1bbac:	e355001c 	cmp	r5, #28
   1bbb0:	9affffe6 	bls	1bb50 <CICMPHandler::Process()+0x9c>
   1bbb4:	e5dd3038 	ldrb	r3, [sp, #56]	; 0x38
   1bbb8:	e203200f 	and	r2, r3, #15
   1bbbc:	e2421005 	sub	r1, r2, #5
   1bbc0:	e3510001 	cmp	r1, #1
   1bbc4:	8affffe1 	bhi	1bb50 <CICMPHandler::Process()+0x9c>
   1bbc8:	e1a03243 	asr	r3, r3, #4
   1bbcc:	e3530004 	cmp	r3, #4
   1bbd0:	1affffde 	bne	1bb50 <CICMPHandler::Process()+0x9c>
   1bbd4:	e5940000 	ldr	r0, [r4]
   1bbd8:	e58d200c 	str	r2, [sp, #12]
   1bbdc:	eb000fae 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   1bbe0:	e28d1044 	add	r1, sp, #68	; 0x44
   1bbe4:	eb001065 	bl	1fd80 <CIPAddress::operator!=(unsigned char const*) const>
   1bbe8:	e3500000 	cmp	r0, #0
   1bbec:	1affffd7 	bne	1bb50 <CICMPHandler::Process()+0x9c>
   1bbf0:	e59d200c 	ldr	r2, [sp, #12]
   1bbf4:	e1a02102 	lsl	r2, r2, #2
   1bbf8:	e2823010 	add	r3, r2, #16
   1bbfc:	e1550003 	cmp	r5, r3
   1bc00:	3affffd2 	bcc	1bb50 <CICMPHandler::Process()+0x9c>
   1bc04:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1bc08:	e28d5038 	add	r5, sp, #56	; 0x38
   1bc0c:	e2433003 	sub	r3, r3, #3
   1bc10:	e0855002 	add	r5, r5, r2
   1bc14:	e3530009 	cmp	r3, #9
   1bc18:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1bc1c:	eaffffcb 	b	1bb50 <CICMPHandler::Process()+0x9c>
   1bc20:	0001bd6c 	.word	0x0001bd6c
   1bc24:	0001bb50 	.word	0x0001bb50
   1bc28:	0001bd1c 	.word	0x0001bd1c
   1bc2c:	0001bb50 	.word	0x0001bb50
   1bc30:	0001bb50 	.word	0x0001bb50
   1bc34:	0001bb50 	.word	0x0001bb50
   1bc38:	0001bb50 	.word	0x0001bb50
   1bc3c:	0001bb50 	.word	0x0001bb50
   1bc40:	0001bda0 	.word	0x0001bda0
   1bc44:	0001bce8 	.word	0x0001bce8
   1bc48:	e3a02052 	mov	r2, #82	; 0x52
   1bc4c:	e59f1214 	ldr	r1, [pc, #532]	; 1be68 <CICMPHandler::Process()+0x3b4>
   1bc50:	e59f0214 	ldr	r0, [pc, #532]	; 1be6c <CICMPHandler::Process()+0x3b8>
   1bc54:	eb001e89 	bl	23680 <assertion_failed>
   1bc58:	e3a02053 	mov	r2, #83	; 0x53
   1bc5c:	e59f1204 	ldr	r1, [pc, #516]	; 1be68 <CICMPHandler::Process()+0x3b4>
   1bc60:	e59f0208 	ldr	r0, [pc, #520]	; 1be70 <CICMPHandler::Process()+0x3bc>
   1bc64:	eb001e85 	bl	23680 <assertion_failed>
   1bc68:	e3a0205b 	mov	r2, #91	; 0x5b
   1bc6c:	e59f11f4 	ldr	r1, [pc, #500]	; 1be68 <CICMPHandler::Process()+0x3b4>
   1bc70:	e59f01fc 	ldr	r0, [pc, #508]	; 1be74 <CICMPHandler::Process()+0x3c0>
   1bc74:	eb001e81 	bl	23680 <assertion_failed>
   1bc78:	e5dd3031 	ldrb	r3, [sp, #49]	; 0x31
   1bc7c:	e3530000 	cmp	r3, #0
   1bc80:	1affffb2 	bne	1bb50 <CICMPHandler::Process()+0x9c>
   1bc84:	e1a01005 	mov	r1, r5
   1bc88:	e28d0030 	add	r0, sp, #48	; 0x30
   1bc8c:	e5cd3030 	strb	r3, [sp, #48]	; 0x30
   1bc90:	e5cd3031 	strb	r3, [sp, #49]	; 0x31
   1bc94:	e1cd33b2 	strh	r3, [sp, #50]	; 0x32
   1bc98:	eb001272 	bl	20668 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1bc9c:	e5942004 	ldr	r2, [r4, #4]
   1bca0:	e1cd03b2 	strh	r0, [sp, #50]	; 0x32
   1bca4:	e3520000 	cmp	r2, #0
   1bca8:	0a000049 	beq	1bdd4 <CICMPHandler::Process()+0x320>
   1bcac:	e3a01001 	mov	r1, #1
   1bcb0:	e1a03005 	mov	r3, r5
   1bcb4:	e58d1000 	str	r1, [sp]
   1bcb8:	e1a00002 	mov	r0, r2
   1bcbc:	e28d1018 	add	r1, sp, #24
   1bcc0:	e28d2030 	add	r2, sp, #48	; 0x30
   1bcc4:	ebfff7a3 	bl	19b58 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1bcc8:	eaffffa0 	b	1bb50 <CICMPHandler::Process()+0x9c>
   1bccc:	e3a0204e 	mov	r2, #78	; 0x4e
   1bcd0:	e59f1190 	ldr	r1, [pc, #400]	; 1be68 <CICMPHandler::Process()+0x3b4>
   1bcd4:	e59f019c 	ldr	r0, [pc, #412]	; 1be78 <CICMPHandler::Process()+0x3c4>
   1bcd8:	eb001e68 	bl	23680 <assertion_failed>
   1bcdc:	e28dde67 	add	sp, sp, #1648	; 0x670
   1bce0:	e28dd004 	add	sp, sp, #4
   1bce4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bce8:	eb002757 	bl	25a4c <CLogger::Get()>
   1bcec:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1bcf0:	e1a0300b 	mov	r3, fp
   1bcf4:	e58d2000 	str	r2, [sp]
   1bcf8:	e1a01006 	mov	r1, r6
   1bcfc:	e3a02002 	mov	r2, #2
   1bd00:	eb00268e 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bd04:	e1a03005 	mov	r3, r5
   1bd08:	e28d2038 	add	r2, sp, #56	; 0x38
   1bd0c:	e3a01002 	mov	r1, #2
   1bd10:	e1a00004 	mov	r0, r4
   1bd14:	ebffff28 	bl	1b9bc <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1bd18:	eaffff8c 	b	1bb50 <CICMPHandler::Process()+0x9c>
   1bd1c:	e28d0028 	add	r0, sp, #40	; 0x28
   1bd20:	e28d1034 	add	r1, sp, #52	; 0x34
   1bd24:	eb00104f 	bl	1fe68 <CIPAddress::CIPAddress(unsigned char const*)>
   1bd28:	e5943004 	ldr	r3, [r4, #4]
   1bd2c:	e3530000 	cmp	r3, #0
   1bd30:	0a000044 	beq	1be48 <CICMPHandler::Process()+0x394>
   1bd34:	e5940000 	ldr	r0, [r4]
   1bd38:	eb000f57 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   1bd3c:	e1a05000 	mov	r5, r0
   1bd40:	e5940000 	ldr	r0, [r4]
   1bd44:	eb000f58 	bl	1faac <CNetConfig::GetNetMask() const>
   1bd48:	e1a01005 	mov	r1, r5
   1bd4c:	e1a02000 	mov	r2, r0
   1bd50:	e28d0028 	add	r0, sp, #40	; 0x28
   1bd54:	eb0010cb 	bl	20088 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   1bd58:	e3500000 	cmp	r0, #0
   1bd5c:	1a000020 	bne	1bde4 <CICMPHandler::Process()+0x330>
   1bd60:	e28d0028 	add	r0, sp, #40	; 0x28
   1bd64:	eb000fbe 	bl	1fc64 <CIPAddress::~CIPAddress()>
   1bd68:	eaffff78 	b	1bb50 <CICMPHandler::Process()+0x9c>
   1bd6c:	eb002736 	bl	25a4c <CLogger::Get()>
   1bd70:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1bd74:	e1a01006 	mov	r1, r6
   1bd78:	e58d2000 	str	r2, [sp]
   1bd7c:	e59f30f8 	ldr	r3, [pc, #248]	; 1be7c <CICMPHandler::Process()+0x3c8>
   1bd80:	e3a02004 	mov	r2, #4
   1bd84:	eb00266d 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bd88:	e1a03005 	mov	r3, r5
   1bd8c:	e28d2038 	add	r2, sp, #56	; 0x38
   1bd90:	e3a01000 	mov	r1, #0
   1bd94:	e1a00004 	mov	r0, r4
   1bd98:	ebffff07 	bl	1b9bc <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1bd9c:	eaffff6b 	b	1bb50 <CICMPHandler::Process()+0x9c>
   1bda0:	eb002729 	bl	25a4c <CLogger::Get()>
   1bda4:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1bda8:	e1a0300a 	mov	r3, sl
   1bdac:	e58d2000 	str	r2, [sp]
   1bdb0:	e1a01006 	mov	r1, r6
   1bdb4:	e3a02002 	mov	r2, #2
   1bdb8:	eb002660 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bdbc:	e1a03005 	mov	r3, r5
   1bdc0:	e28d2038 	add	r2, sp, #56	; 0x38
   1bdc4:	e3a01001 	mov	r1, #1
   1bdc8:	e1a00004 	mov	r0, r4
   1bdcc:	ebfffefa 	bl	1b9bc <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1bdd0:	eaffff5e 	b	1bb50 <CICMPHandler::Process()+0x9c>
   1bdd4:	e3a02078 	mov	r2, #120	; 0x78
   1bdd8:	e59f1088 	ldr	r1, [pc, #136]	; 1be68 <CICMPHandler::Process()+0x3b4>
   1bddc:	e59f009c 	ldr	r0, [pc, #156]	; 1be80 <CICMPHandler::Process()+0x3cc>
   1bde0:	eb001e26 	bl	23680 <assertion_failed>
   1bde4:	e1a01007 	mov	r1, r7
   1bde8:	e5940004 	ldr	r0, [r4, #4]
   1bdec:	ebfff899 	bl	1a058 <CNetworkLayer::GetGateway(unsigned char const*) const>
   1bdf0:	e1a01000 	mov	r1, r0
   1bdf4:	e28d0018 	add	r0, sp, #24
   1bdf8:	eb000fe0 	bl	1fd80 <CIPAddress::operator!=(unsigned char const*) const>
   1bdfc:	e3500000 	cmp	r0, #0
   1be00:	1affffd6 	bne	1bd60 <CICMPHandler::Process()+0x2ac>
   1be04:	eb002710 	bl	25a4c <CLogger::Get()>
   1be08:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1be0c:	e1a03009 	mov	r3, r9
   1be10:	e1a01006 	mov	r1, r6
   1be14:	e58d2000 	str	r2, [sp]
   1be18:	e3a02004 	mov	r2, #4
   1be1c:	eb002647 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1be20:	e28d0028 	add	r0, sp, #40	; 0x28
   1be24:	e5945004 	ldr	r5, [r4, #4]
   1be28:	eb001033 	bl	1fefc <CIPAddress::Get() const>
   1be2c:	e1a01007 	mov	r1, r7
   1be30:	e1a02000 	mov	r2, r0
   1be34:	e1a00005 	mov	r0, r5
   1be38:	ebfff884 	bl	1a050 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>
   1be3c:	e28d0028 	add	r0, sp, #40	; 0x28
   1be40:	eb000f87 	bl	1fc64 <CIPAddress::~CIPAddress()>
   1be44:	eaffff41 	b	1bb50 <CICMPHandler::Process()+0x9c>
   1be48:	e3a020a7 	mov	r2, #167	; 0xa7
   1be4c:	e59f1014 	ldr	r1, [pc, #20]	; 1be68 <CICMPHandler::Process()+0x3b4>
   1be50:	e59f0028 	ldr	r0, [pc, #40]	; 1be80 <CICMPHandler::Process()+0x3cc>
   1be54:	eb001e09 	bl	23680 <assertion_failed>
   1be58:	0003939c 	.word	0x0003939c
   1be5c:	000392c8 	.word	0x000392c8
   1be60:	00039388 	.word	0x00039388
   1be64:	000393b4 	.word	0x000393b4
   1be68:	000392d0 	.word	0x000392d0
   1be6c:	00038fa4 	.word	0x00038fa4
   1be70:	00039344 	.word	0x00039344
   1be74:	00038f28 	.word	0x00038f28
   1be78:	00039250 	.word	0x00039250
   1be7c:	00039368 	.word	0x00039368
   1be80:	00038f3c 	.word	0x00038f3c

0001be84 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>:
   1be84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1be88:	e2525000 	subs	r5, r2, #0
   1be8c:	e24dd020 	sub	sp, sp, #32
   1be90:	0a00003e 	beq	1bf90 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x10c>
   1be94:	e3530014 	cmp	r3, #20
   1be98:	e1a06003 	mov	r6, r3
   1be9c:	9a00003f 	bls	1bfa0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x11c>
   1bea0:	e1a08001 	mov	r8, r1
   1bea4:	e5d51000 	ldrb	r1, [r5]
   1bea8:	e201200f 	and	r2, r1, #15
   1beac:	e2423005 	sub	r3, r2, #5
   1beb0:	e3530001 	cmp	r3, #1
   1beb4:	8a00003d 	bhi	1bfb0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x12c>
   1beb8:	e1a01241 	asr	r1, r1, #4
   1bebc:	e3510004 	cmp	r1, #4
   1bec0:	e1a04102 	lsl	r4, r2, #2
   1bec4:	1a00003d 	bne	1bfc0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x13c>
   1bec8:	e1a07000 	mov	r7, r0
   1becc:	e5900000 	ldr	r0, [r0]
   1bed0:	eb000ef1 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   1bed4:	e285100c 	add	r1, r5, #12
   1bed8:	eb000f91 	bl	1fd24 <CIPAddress::operator==(unsigned char const*) const>
   1bedc:	e3500000 	cmp	r0, #0
   1bee0:	0a00003a 	beq	1bfd0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x14c>
   1bee4:	e2843008 	add	r3, r4, #8
   1bee8:	e1560003 	cmp	r6, r3
   1beec:	3a00003b 	bcc	1bfe0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x15c>
   1bef0:	e3580000 	cmp	r8, #0
   1bef4:	e0854004 	add	r4, r5, r4
   1bef8:	0a000022 	beq	1bf88 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x104>
   1befc:	e59f30ec 	ldr	r3, [pc, #236]	; 1bff0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x16c>
   1bf00:	e59f20ec 	ldr	r2, [pc, #236]	; 1bff4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x170>
   1bf04:	e3580001 	cmp	r8, #1
   1bf08:	01a08003 	moveq	r8, r3
   1bf0c:	11a08002 	movne	r8, r2
   1bf10:	e28d0010 	add	r0, sp, #16
   1bf14:	eb002ab2 	bl	269e4 <CString::CString()>
   1bf18:	e2851010 	add	r1, r5, #16
   1bf1c:	e28d0008 	add	r0, sp, #8
   1bf20:	eb000fd0 	bl	1fe68 <CIPAddress::CIPAddress(unsigned char const*)>
   1bf24:	e28d1010 	add	r1, sp, #16
   1bf28:	e28d0008 	add	r0, sp, #8
   1bf2c:	eb001034 	bl	20004 <CIPAddress::Format(CString*) const>
   1bf30:	eb0026c5 	bl	25a4c <CLogger::Get()>
   1bf34:	e1a06000 	mov	r6, r0
   1bf38:	e28d0010 	add	r0, sp, #16
   1bf3c:	eb002abe 	bl	26a3c <CString::operator char const*() const>
   1bf40:	e58d8000 	str	r8, [sp]
   1bf44:	e58d0004 	str	r0, [sp, #4]
   1bf48:	e59f30a8 	ldr	r3, [pc, #168]	; 1bff8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x174>
   1bf4c:	e1a00006 	mov	r0, r6
   1bf50:	e3a02004 	mov	r2, #4
   1bf54:	e59f10a0 	ldr	r1, [pc, #160]	; 1bffc <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x178>
   1bf58:	eb0025f8 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bf5c:	e1a03004 	mov	r3, r4
   1bf60:	e1a02005 	mov	r2, r5
   1bf64:	e3a01000 	mov	r1, #0
   1bf68:	e1a00007 	mov	r0, r7
   1bf6c:	ebfffe92 	bl	1b9bc <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1bf70:	e28d0008 	add	r0, sp, #8
   1bf74:	eb000f3a 	bl	1fc64 <CIPAddress::~CIPAddress()>
   1bf78:	e28d0010 	add	r0, sp, #16
   1bf7c:	eb002a65 	bl	26918 <CString::~CString()>
   1bf80:	e28dd020 	add	sp, sp, #32
   1bf84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bf88:	e59f8070 	ldr	r8, [pc, #112]	; 1c000 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x17c>
   1bf8c:	eaffffdf 	b	1bf10 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x8c>
   1bf90:	e3a020c9 	mov	r2, #201	; 0xc9
   1bf94:	e59f1068 	ldr	r1, [pc, #104]	; 1c004 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1bf98:	e59f0068 	ldr	r0, [pc, #104]	; 1c008 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1bf9c:	eb001db7 	bl	23680 <assertion_failed>
   1bfa0:	e3a020ca 	mov	r2, #202	; 0xca
   1bfa4:	e59f1058 	ldr	r1, [pc, #88]	; 1c004 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1bfa8:	e59f005c 	ldr	r0, [pc, #92]	; 1c00c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x188>
   1bfac:	eb001db3 	bl	23680 <assertion_failed>
   1bfb0:	e3a020cf 	mov	r2, #207	; 0xcf
   1bfb4:	e59f1048 	ldr	r1, [pc, #72]	; 1c004 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1bfb8:	e59f0050 	ldr	r0, [pc, #80]	; 1c010 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x18c>
   1bfbc:	eb001daf 	bl	23680 <assertion_failed>
   1bfc0:	e3a020d2 	mov	r2, #210	; 0xd2
   1bfc4:	e59f1038 	ldr	r1, [pc, #56]	; 1c004 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1bfc8:	e59f0044 	ldr	r0, [pc, #68]	; 1c014 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x190>
   1bfcc:	eb001dab 	bl	23680 <assertion_failed>
   1bfd0:	e3a020d3 	mov	r2, #211	; 0xd3
   1bfd4:	e59f1028 	ldr	r1, [pc, #40]	; 1c004 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1bfd8:	e59f0038 	ldr	r0, [pc, #56]	; 1c018 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x194>
   1bfdc:	eb001da7 	bl	23680 <assertion_failed>
   1bfe0:	e3a020d4 	mov	r2, #212	; 0xd4
   1bfe4:	e59f1018 	ldr	r1, [pc, #24]	; 1c004 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1bfe8:	e59f002c 	ldr	r0, [pc, #44]	; 1c01c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x198>
   1bfec:	eb001da3 	bl	23680 <assertion_failed>
   1bff0:	000393d0 	.word	0x000393d0
   1bff4:	0003c7f8 	.word	0x0003c7f8
   1bff8:	00039518 	.word	0x00039518
   1bffc:	000392c8 	.word	0x000392c8
   1c000:	000393c4 	.word	0x000393c4
   1c004:	000392d0 	.word	0x000392d0
   1c008:	000393d8 	.word	0x000393d8
   1c00c:	000393f0 	.word	0x000393f0
   1c010:	00039410 	.word	0x00039410
   1c014:	00039470 	.word	0x00039470
   1c018:	0003949c 	.word	0x0003949c
   1c01c:	000394d8 	.word	0x000394d8

0001c020 <CRouteCache::CRouteCache()>:
   1c020:	e3a02064 	mov	r2, #100	; 0x64
   1c024:	e92d4010 	push	{r4, lr}
   1c028:	e1a04000 	mov	r4, r0
   1c02c:	e1a01002 	mov	r1, r2
   1c030:	eb00298c 	bl	26668 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   1c034:	e1a00004 	mov	r0, r4
   1c038:	e8bd8010 	pop	{r4, pc}

0001c03c <CRouteCache::Flush()>:
   1c03c:	e92d4070 	push	{r4, r5, r6, lr}
   1c040:	e1a05000 	mov	r5, r0
   1c044:	eb0029ad 	bl	26700 <CPtrArray::GetCount() const>
   1c048:	e3500000 	cmp	r0, #0
   1c04c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1c050:	e3a06008 	mov	r6, #8
   1c054:	e2404001 	sub	r4, r0, #1
   1c058:	e1a01004 	mov	r1, r4
   1c05c:	e1a00005 	mov	r0, r5
   1c060:	eb0029a8 	bl	26708 <CPtrArray::operator[](unsigned int)>
   1c064:	e1a01006 	mov	r1, r6
   1c068:	e5900000 	ldr	r0, [r0]
   1c06c:	eb0037ae 	bl	29f2c <operator delete(void*, unsigned int)>
   1c070:	e2444001 	sub	r4, r4, #1
   1c074:	e1a00005 	mov	r0, r5
   1c078:	eb002a18 	bl	268e0 <CPtrArray::RemoveLast()>
   1c07c:	e3740001 	cmn	r4, #1
   1c080:	1afffff4 	bne	1c058 <CRouteCache::Flush()+0x1c>
   1c084:	e8bd8070 	pop	{r4, r5, r6, pc}

0001c088 <CRouteCache::~CRouteCache()>:
   1c088:	e92d4010 	push	{r4, lr}
   1c08c:	e1a04000 	mov	r4, r0
   1c090:	ebffffe9 	bl	1c03c <CRouteCache::Flush()>
   1c094:	e1a00004 	mov	r0, r4
   1c098:	eb00298d 	bl	266d4 <CPtrArray::~CPtrArray()>
   1c09c:	e1a00004 	mov	r0, r4
   1c0a0:	e8bd8010 	pop	{r4, pc}

0001c0a4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>:
   1c0a4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c0a8:	e2517000 	subs	r7, r1, #0
   1c0ac:	0a00002a 	beq	1c15c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xb8>
   1c0b0:	e3520000 	cmp	r2, #0
   1c0b4:	e1a0a002 	mov	sl, r2
   1c0b8:	0a00002b 	beq	1c16c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xc8>
   1c0bc:	e1a06000 	mov	r6, r0
   1c0c0:	eb00298e 	bl	26700 <CPtrArray::GetCount() const>
   1c0c4:	e2509000 	subs	r9, r0, #0
   1c0c8:	0a000015 	beq	1c124 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x80>
   1c0cc:	e3a04000 	mov	r4, #0
   1c0d0:	e3a08004 	mov	r8, #4
   1c0d4:	ea000008 	b	1c0fc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x58>
   1c0d8:	e1a02008 	mov	r2, r8
   1c0dc:	e1a01007 	mov	r1, r7
   1c0e0:	e1a00005 	mov	r0, r5
   1c0e4:	eb00336d 	bl	28ea0 <memcmp>
   1c0e8:	e3500000 	cmp	r0, #0
   1c0ec:	0a000015 	beq	1c148 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xa4>
   1c0f0:	e2844001 	add	r4, r4, #1
   1c0f4:	e1590004 	cmp	r9, r4
   1c0f8:	0a000009 	beq	1c124 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x80>
   1c0fc:	e1a01004 	mov	r1, r4
   1c100:	e1a00006 	mov	r0, r6
   1c104:	eb00297f 	bl	26708 <CPtrArray::operator[](unsigned int)>
   1c108:	e5905000 	ldr	r5, [r0]
   1c10c:	e3550000 	cmp	r5, #0
   1c110:	1afffff0 	bne	1c0d8 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x34>
   1c114:	e3a0203e 	mov	r2, #62	; 0x3e
   1c118:	e59f105c 	ldr	r1, [pc, #92]	; 1c17c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1c11c:	e59f005c 	ldr	r0, [pc, #92]	; 1c180 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xdc>
   1c120:	eb001d56 	bl	23680 <assertion_failed>
   1c124:	e3a00008 	mov	r0, #8
   1c128:	eb003771 	bl	29ef4 <operator new(unsigned int)>
   1c12c:	e1a05000 	mov	r5, r0
   1c130:	e1a01007 	mov	r1, r7
   1c134:	e3a02004 	mov	r2, #4
   1c138:	eb003594 	bl	29790 <memcpy>
   1c13c:	e1a01005 	mov	r1, r5
   1c140:	e1a00006 	mov	r0, r6
   1c144:	eb0029a7 	bl	267e8 <CPtrArray::Append(void*)>
   1c148:	e1a0100a 	mov	r1, sl
   1c14c:	e2850004 	add	r0, r5, #4
   1c150:	e3a02004 	mov	r2, #4
   1c154:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c158:	ea00358c 	b	29790 <memcpy>
   1c15c:	e3a02035 	mov	r2, #53	; 0x35
   1c160:	e59f1014 	ldr	r1, [pc, #20]	; 1c17c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1c164:	e59f0018 	ldr	r0, [pc, #24]	; 1c184 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xe0>
   1c168:	eb001d44 	bl	23680 <assertion_failed>
   1c16c:	e3a02036 	mov	r2, #54	; 0x36
   1c170:	e59f1004 	ldr	r1, [pc, #4]	; 1c17c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1c174:	e59f000c 	ldr	r0, [pc, #12]	; 1c188 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xe4>
   1c178:	eb001d40 	bl	23680 <assertion_failed>
   1c17c:	00039538 	.word	0x00039538
   1c180:	00039568 	.word	0x00039568
   1c184:	00039548 	.word	0x00039548
   1c188:	00039558 	.word	0x00039558

0001c18c <CRouteCache::GetRoute(unsigned char const*) const>:
   1c18c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c190:	e2517000 	subs	r7, r1, #0
   1c194:	0a00001b 	beq	1c208 <CRouteCache::GetRoute(unsigned char const*) const+0x7c>
   1c198:	e1a05000 	mov	r5, r0
   1c19c:	eb002957 	bl	26700 <CPtrArray::GetCount() const>
   1c1a0:	e2509000 	subs	r9, r0, #0
   1c1a4:	13a04000 	movne	r4, #0
   1c1a8:	13a08004 	movne	r8, #4
   1c1ac:	1a000008 	bne	1c1d4 <CRouteCache::GetRoute(unsigned char const*) const+0x48>
   1c1b0:	ea000010 	b	1c1f8 <CRouteCache::GetRoute(unsigned char const*) const+0x6c>
   1c1b4:	e1a02008 	mov	r2, r8
   1c1b8:	e1a01007 	mov	r1, r7
   1c1bc:	eb003337 	bl	28ea0 <memcmp>
   1c1c0:	e3500000 	cmp	r0, #0
   1c1c4:	0a00000d 	beq	1c200 <CRouteCache::GetRoute(unsigned char const*) const+0x74>
   1c1c8:	e2844001 	add	r4, r4, #1
   1c1cc:	e1590004 	cmp	r9, r4
   1c1d0:	0a000008 	beq	1c1f8 <CRouteCache::GetRoute(unsigned char const*) const+0x6c>
   1c1d4:	e1a01004 	mov	r1, r4
   1c1d8:	e1a00005 	mov	r0, r5
   1c1dc:	eb002965 	bl	26778 <CPtrArray::operator[](unsigned int) const>
   1c1e0:	e2506000 	subs	r6, r0, #0
   1c1e4:	1afffff2 	bne	1c1b4 <CRouteCache::GetRoute(unsigned char const*) const+0x28>
   1c1e8:	e3a0205d 	mov	r2, #93	; 0x5d
   1c1ec:	e59f1024 	ldr	r1, [pc, #36]	; 1c218 <CRouteCache::GetRoute(unsigned char const*) const+0x8c>
   1c1f0:	e59f0024 	ldr	r0, [pc, #36]	; 1c21c <CRouteCache::GetRoute(unsigned char const*) const+0x90>
   1c1f4:	eb001d21 	bl	23680 <assertion_failed>
   1c1f8:	e3a00000 	mov	r0, #0
   1c1fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c200:	e2860004 	add	r0, r6, #4
   1c204:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c208:	e3a02057 	mov	r2, #87	; 0x57
   1c20c:	e59f1004 	ldr	r1, [pc, #4]	; 1c218 <CRouteCache::GetRoute(unsigned char const*) const+0x8c>
   1c210:	e59f0008 	ldr	r0, [pc, #8]	; 1c220 <CRouteCache::GetRoute(unsigned char const*) const+0x94>
   1c214:	eb001d19 	bl	23680 <assertion_failed>
   1c218:	00039538 	.word	0x00039538
   1c21c:	00039568 	.word	0x00039568
   1c220:	00039548 	.word	0x00039548

0001c224 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>:
   1c224:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c228:	e1a05003 	mov	r5, r3
   1c22c:	e1a04000 	mov	r4, r0
   1c230:	e1a07001 	mov	r7, r1
   1c234:	e59f3088 	ldr	r3, [pc, #136]	; 1c2c4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1c238:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   1c23c:	e1dd92b0 	ldrh	r9, [sp, #32]
   1c240:	e1dd82b4 	ldrh	r8, [sp, #36]	; 0x24
   1c244:	e5802008 	str	r2, [r0, #8]
   1c248:	e5803000 	str	r3, [r0]
   1c24c:	e5801004 	str	r1, [r0, #4]
   1c250:	e1a01005 	mov	r1, r5
   1c254:	e280000c 	add	r0, r0, #12
   1c258:	eb000e72 	bl	1fc28 <CIPAddress::CIPAddress(CIPAddress const&)>
   1c25c:	e1c491b4 	strh	r9, [r4, #20]
   1c260:	e1c481b6 	strh	r8, [r4, #22]
   1c264:	e5846018 	str	r6, [r4, #24]
   1c268:	e1a00007 	mov	r0, r7
   1c26c:	eb000e0a 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   1c270:	e1a03006 	mov	r3, r6
   1c274:	e1a01000 	mov	r1, r0
   1c278:	e1a02005 	mov	r2, r5
   1c27c:	e284001c 	add	r0, r4, #28
   1c280:	eb001084 	bl	20498 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>
   1c284:	e5943004 	ldr	r3, [r4, #4]
   1c288:	e3530000 	cmp	r3, #0
   1c28c:	0a000004 	beq	1c2a4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x80>
   1c290:	e5943008 	ldr	r3, [r4, #8]
   1c294:	e3530000 	cmp	r3, #0
   1c298:	0a000005 	beq	1c2b4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x90>
   1c29c:	e1a00004 	mov	r0, r4
   1c2a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c2a4:	e3a02025 	mov	r2, #37	; 0x25
   1c2a8:	e59f1018 	ldr	r1, [pc, #24]	; 1c2c8 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   1c2ac:	e59f0018 	ldr	r0, [pc, #24]	; 1c2cc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa8>
   1c2b0:	eb001cf2 	bl	23680 <assertion_failed>
   1c2b4:	e3a02026 	mov	r2, #38	; 0x26
   1c2b8:	e59f1008 	ldr	r1, [pc, #8]	; 1c2c8 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   1c2bc:	e59f000c 	ldr	r0, [pc, #12]	; 1c2d0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xac>
   1c2c0:	eb001cee 	bl	23680 <assertion_failed>
   1c2c4:	0003957c 	.word	0x0003957c
   1c2c8:	000395b8 	.word	0x000395b8
   1c2cc:	00038f28 	.word	0x00038f28
   1c2d0:	00038f3c 	.word	0x00038f3c

0001c2d4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>:
   1c2d4:	e92d4070 	push	{r4, r5, r6, lr}
   1c2d8:	e1a05001 	mov	r5, r1
   1c2dc:	e59f1078 	ldr	r1, [pc, #120]	; 1c35c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x88>
   1c2e0:	e1a04000 	mov	r4, r0
   1c2e4:	e8800022 	stm	r0, {r1, r5}
   1c2e8:	e5802008 	str	r2, [r0, #8]
   1c2ec:	e280000c 	add	r0, r0, #12
   1c2f0:	e1a06003 	mov	r6, r3
   1c2f4:	eb000e44 	bl	1fc0c <CIPAddress::CIPAddress()>
   1c2f8:	e3a02000 	mov	r2, #0
   1c2fc:	e1c461b6 	strh	r6, [r4, #22]
   1c300:	e1c421b4 	strh	r2, [r4, #20]
   1c304:	e1a00005 	mov	r0, r5
   1c308:	eb000de3 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   1c30c:	e59d2010 	ldr	r2, [sp, #16]
   1c310:	e1a01000 	mov	r1, r0
   1c314:	e284001c 	add	r0, r4, #28
   1c318:	eb001052 	bl	20468 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>
   1c31c:	e5943004 	ldr	r3, [r4, #4]
   1c320:	e3530000 	cmp	r3, #0
   1c324:	0a000004 	beq	1c33c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x68>
   1c328:	e5943008 	ldr	r3, [r4, #8]
   1c32c:	e3530000 	cmp	r3, #0
   1c330:	0a000005 	beq	1c34c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x78>
   1c334:	e1a00004 	mov	r0, r4
   1c338:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c33c:	e3a02033 	mov	r2, #51	; 0x33
   1c340:	e59f1018 	ldr	r1, [pc, #24]	; 1c360 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x8c>
   1c344:	e59f0018 	ldr	r0, [pc, #24]	; 1c364 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x90>
   1c348:	eb001ccc 	bl	23680 <assertion_failed>
   1c34c:	e3a02034 	mov	r2, #52	; 0x34
   1c350:	e59f1008 	ldr	r1, [pc, #8]	; 1c360 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x8c>
   1c354:	e59f000c 	ldr	r0, [pc, #12]	; 1c368 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x94>
   1c358:	eb001cc8 	bl	23680 <assertion_failed>
   1c35c:	0003957c 	.word	0x0003957c
   1c360:	000395b8 	.word	0x000395b8
   1c364:	00038f28 	.word	0x00038f28
   1c368:	00038f3c 	.word	0x00038f3c

0001c36c <CNetConnection::~CNetConnection()>:
   1c36c:	e3a03000 	mov	r3, #0
   1c370:	e92d4010 	push	{r4, lr}
   1c374:	e1a04000 	mov	r4, r0
   1c378:	e59f201c 	ldr	r2, [pc, #28]	; 1c39c <CNetConnection::~CNetConnection()+0x30>
   1c37c:	e5803008 	str	r3, [r0, #8]
   1c380:	e880000c 	stm	r0, {r2, r3}
   1c384:	e280001c 	add	r0, r0, #28
   1c388:	eb001053 	bl	204dc <CChecksumCalculator::~CChecksumCalculator()>
   1c38c:	e284000c 	add	r0, r4, #12
   1c390:	eb000e33 	bl	1fc64 <CIPAddress::~CIPAddress()>
   1c394:	e1a00004 	mov	r0, r4
   1c398:	e8bd8010 	pop	{r4, pc}
   1c39c:	0003957c 	.word	0x0003957c

0001c3a0 <CNetConnection::~CNetConnection()>:
   1c3a0:	e3a03000 	mov	r3, #0
   1c3a4:	e92d4010 	push	{r4, lr}
   1c3a8:	e1a04000 	mov	r4, r0
   1c3ac:	e59f2028 	ldr	r2, [pc, #40]	; 1c3dc <CNetConnection::~CNetConnection()+0x3c>
   1c3b0:	e5803008 	str	r3, [r0, #8]
   1c3b4:	e880000c 	stm	r0, {r2, r3}
   1c3b8:	e280001c 	add	r0, r0, #28
   1c3bc:	eb001046 	bl	204dc <CChecksumCalculator::~CChecksumCalculator()>
   1c3c0:	e284000c 	add	r0, r4, #12
   1c3c4:	eb000e26 	bl	1fc64 <CIPAddress::~CIPAddress()>
   1c3c8:	e1a00004 	mov	r0, r4
   1c3cc:	e3a0102c 	mov	r1, #44	; 0x2c
   1c3d0:	eb0036d5 	bl	29f2c <operator delete(void*, unsigned int)>
   1c3d4:	e1a00004 	mov	r0, r4
   1c3d8:	e8bd8010 	pop	{r4, pc}
   1c3dc:	0003957c 	.word	0x0003957c

0001c3e0 <CNetConnection::GetForeignIP() const>:
   1c3e0:	e280000c 	add	r0, r0, #12
   1c3e4:	ea000ec4 	b	1fefc <CIPAddress::Get() const>

0001c3e8 <CNetConnection::GetOwnPort() const>:
   1c3e8:	e1d001b6 	ldrh	r0, [r0, #22]
   1c3ec:	e3500000 	cmp	r0, #0
   1c3f0:	0a000000 	beq	1c3f8 <CNetConnection::GetOwnPort() const+0x10>
   1c3f4:	e12fff1e 	bx	lr
   1c3f8:	e92d4010 	push	{r4, lr}
   1c3fc:	e3a02044 	mov	r2, #68	; 0x44
   1c400:	e59f1004 	ldr	r1, [pc, #4]	; 1c40c <CNetConnection::GetOwnPort() const+0x24>
   1c404:	e59f0004 	ldr	r0, [pc, #4]	; 1c410 <CNetConnection::GetOwnPort() const+0x28>
   1c408:	eb001c9c 	bl	23680 <assertion_failed>
   1c40c:	000395b8 	.word	0x000395b8
   1c410:	000395cc 	.word	0x000395cc

0001c414 <CNetConnection::GetProtocol() const>:
   1c414:	e5900018 	ldr	r0, [r0, #24]
   1c418:	e12fff1e 	bx	lr

0001c41c <CUDPConnection::Accept(CIPAddress*, unsigned short*)>:
   1c41c:	e3e00000 	mvn	r0, #0
   1c420:	e12fff1e 	bx	lr

0001c424 <CUDPConnection::Close()>:
   1c424:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1c428:	e3530000 	cmp	r3, #0
   1c42c:	13a03000 	movne	r3, #0
   1c430:	15c03029 	strbne	r3, [r0, #41]	; 0x29
   1c434:	11a00003 	movne	r0, r3
   1c438:	03e00000 	mvneq	r0, #0
   1c43c:	e12fff1e 	bx	lr

0001c440 <CUDPConnection::SetOptionBroadcast(bool)>:
   1c440:	e5c01040 	strb	r1, [r0, #64]	; 0x40
   1c444:	e3a00000 	mov	r0, #0
   1c448:	e12fff1e 	bx	lr

0001c44c <CUDPConnection::IsConnected() const>:
   1c44c:	e3a00000 	mov	r0, #0
   1c450:	e12fff1e 	bx	lr

0001c454 <CUDPConnection::IsTerminated() const>:
   1c454:	e5d00029 	ldrb	r0, [r0, #41]	; 0x29
   1c458:	e2200001 	eor	r0, r0, #1
   1c45c:	e12fff1e 	bx	lr

0001c460 <CUDPConnection::Process()>:
   1c460:	e12fff1e 	bx	lr

0001c464 <CUDPConnection::Send(void const*, unsigned int, int)>:
   1c464:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c468:	e28db01c 	add	fp, sp, #28
   1c46c:	e24dd008 	sub	sp, sp, #8
   1c470:	e5906044 	ldr	r6, [r0, #68]	; 0x44
   1c474:	e3560000 	cmp	r6, #0
   1c478:	b3a03000 	movlt	r3, #0
   1c47c:	b5803044 	strlt	r3, [r0, #68]	; 0x44
   1c480:	ba00004d 	blt	1c5bc <CUDPConnection::Send(void const*, unsigned int, int)+0x158>
   1c484:	e5d0c02a 	ldrb	ip, [r0, #42]	; 0x2a
   1c488:	e35c0000 	cmp	ip, #0
   1c48c:	0a000059 	beq	1c5f8 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1c490:	e3d33040 	bics	r3, r3, #64	; 0x40
   1c494:	1a000057 	bne	1c5f8 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1c498:	e59f3198 	ldr	r3, [pc, #408]	; 1c638 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d4>
   1c49c:	e242c001 	sub	ip, r2, #1
   1c4a0:	e15c0003 	cmp	ip, r3
   1c4a4:	e2827008 	add	r7, r2, #8
   1c4a8:	8a000052 	bhi	1c5f8 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1c4ac:	e5903004 	ldr	r3, [r0, #4]
   1c4b0:	e1a06002 	mov	r6, r2
   1c4b4:	e3530000 	cmp	r3, #0
   1c4b8:	e1a08001 	mov	r8, r1
   1c4bc:	e1a04000 	mov	r4, r0
   1c4c0:	0a000050 	beq	1c608 <CUDPConnection::Send(void const*, unsigned int, int)+0x1a4>
   1c4c4:	e5d03040 	ldrb	r3, [r0, #64]	; 0x40
   1c4c8:	e3530000 	cmp	r3, #0
   1c4cc:	0a00003d 	beq	1c5c8 <CUDPConnection::Send(void const*, unsigned int, int)+0x164>
   1c4d0:	e3a01000 	mov	r1, #0
   1c4d4:	e1d431b6 	ldrh	r3, [r4, #22]
   1c4d8:	e1d401b4 	ldrh	r0, [r4, #20]
   1c4dc:	e2872007 	add	r2, r7, #7
   1c4e0:	e3c22007 	bic	r2, r2, #7
   1c4e4:	e6bf3fb3 	rev16	r3, r3
   1c4e8:	e04dd002 	sub	sp, sp, r2
   1c4ec:	e6ff3073 	uxth	r3, r3
   1c4f0:	e6bf0fb0 	rev16	r0, r0
   1c4f4:	e6bf2fb7 	rev16	r2, r7
   1c4f8:	e28d5008 	add	r5, sp, #8
   1c4fc:	e1a0c423 	lsr	ip, r3, #8
   1c500:	e6ff0070 	uxth	r0, r0
   1c504:	e6ff2072 	uxth	r2, r2
   1c508:	e5cd3008 	strb	r3, [sp, #8]
   1c50c:	e1580001 	cmp	r8, r1
   1c510:	e5c5c001 	strb	ip, [r5, #1]
   1c514:	e1a03422 	lsr	r3, r2, #8
   1c518:	e1a0c420 	lsr	ip, r0, #8
   1c51c:	e5c50002 	strb	r0, [r5, #2]
   1c520:	e5c5c003 	strb	ip, [r5, #3]
   1c524:	e5c52004 	strb	r2, [r5, #4]
   1c528:	e5c53005 	strb	r3, [r5, #5]
   1c52c:	e5c51006 	strb	r1, [r5, #6]
   1c530:	e5c51007 	strb	r1, [r5, #7]
   1c534:	0a000037 	beq	1c618 <CUDPConnection::Send(void const*, unsigned int, int)+0x1b4>
   1c538:	e1a02006 	mov	r2, r6
   1c53c:	e1a01008 	mov	r1, r8
   1c540:	e2850008 	add	r0, r5, #8
   1c544:	eb003491 	bl	29790 <memcpy>
   1c548:	e5940004 	ldr	r0, [r4, #4]
   1c54c:	eb000d52 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   1c550:	e284801c 	add	r8, r4, #28
   1c554:	e1a01000 	mov	r1, r0
   1c558:	e284900c 	add	r9, r4, #12
   1c55c:	e1a00008 	mov	r0, r8
   1c560:	eb000fde 	bl	204e0 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1c564:	e1a00008 	mov	r0, r8
   1c568:	e1a01009 	mov	r1, r9
   1c56c:	eb000fdf 	bl	204f0 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1c570:	e1a02007 	mov	r2, r7
   1c574:	e1a01005 	mov	r1, r5
   1c578:	e1a00008 	mov	r0, r8
   1c57c:	eb001007 	bl	205a0 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1c580:	e594c008 	ldr	ip, [r4, #8]
   1c584:	e1a03420 	lsr	r3, r0, #8
   1c588:	e35c0000 	cmp	ip, #0
   1c58c:	e5c50006 	strb	r0, [r5, #6]
   1c590:	e5c53007 	strb	r3, [r5, #7]
   1c594:	0a000023 	beq	1c628 <CUDPConnection::Send(void const*, unsigned int, int)+0x1c4>
   1c598:	e3a0e011 	mov	lr, #17
   1c59c:	e1a03007 	mov	r3, r7
   1c5a0:	e1a02005 	mov	r2, r5
   1c5a4:	e1a01009 	mov	r1, r9
   1c5a8:	e1a0000c 	mov	r0, ip
   1c5ac:	e58de000 	str	lr, [sp]
   1c5b0:	ebfff568 	bl	19b58 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1c5b4:	e3500000 	cmp	r0, #0
   1c5b8:	0a00000e 	beq	1c5f8 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1c5bc:	e1a00006 	mov	r0, r6
   1c5c0:	e24bd01c 	sub	sp, fp, #28
   1c5c4:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c5c8:	e280500c 	add	r5, r0, #12
   1c5cc:	e1a00005 	mov	r0, r5
   1c5d0:	eb000e7a 	bl	1ffc0 <CIPAddress::IsBroadcast() const>
   1c5d4:	e3500000 	cmp	r0, #0
   1c5d8:	1a000006 	bne	1c5f8 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1c5dc:	e5940004 	ldr	r0, [r4, #4]
   1c5e0:	eb000d37 	bl	1fac4 <CNetConfig::GetBroadcastAddress() const>
   1c5e4:	e1a01000 	mov	r1, r0
   1c5e8:	e1a00005 	mov	r0, r5
   1c5ec:	eb000d9d 	bl	1fc68 <CIPAddress::operator==(CIPAddress const&) const>
   1c5f0:	e3500000 	cmp	r0, #0
   1c5f4:	0affffb5 	beq	1c4d0 <CUDPConnection::Send(void const*, unsigned int, int)+0x6c>
   1c5f8:	e3e06000 	mvn	r6, #0
   1c5fc:	e1a00006 	mov	r0, r6
   1c600:	e24bd01c 	sub	sp, fp, #28
   1c604:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c608:	e3a0207b 	mov	r2, #123	; 0x7b
   1c60c:	e59f1028 	ldr	r1, [pc, #40]	; 1c63c <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1c610:	e59f0028 	ldr	r0, [pc, #40]	; 1c640 <CUDPConnection::Send(void const*, unsigned int, int)+0x1dc>
   1c614:	eb001c19 	bl	23680 <assertion_failed>
   1c618:	e3a0208b 	mov	r2, #139	; 0x8b
   1c61c:	e59f1018 	ldr	r1, [pc, #24]	; 1c63c <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1c620:	e59f001c 	ldr	r0, [pc, #28]	; 1c644 <CUDPConnection::Send(void const*, unsigned int, int)+0x1e0>
   1c624:	eb001c15 	bl	23680 <assertion_failed>
   1c628:	e3a02093 	mov	r2, #147	; 0x93
   1c62c:	e59f1008 	ldr	r1, [pc, #8]	; 1c63c <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1c630:	e59f0010 	ldr	r0, [pc, #16]	; 1c648 <CUDPConnection::Send(void const*, unsigned int, int)+0x1e4>
   1c634:	eb001c11 	bl	23680 <assertion_failed>
   1c638:	00000637 	.word	0x00000637
   1c63c:	00039620 	.word	0x00039620
   1c640:	00038f28 	.word	0x00038f28
   1c644:	00038fa4 	.word	0x00038fa4
   1c648:	00038f3c 	.word	0x00038f3c

0001c64c <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1c64c:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   1c650:	e28db018 	add	fp, sp, #24
   1c654:	e24dd00c 	sub	sp, sp, #12
   1c658:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   1c65c:	e1a04000 	mov	r4, r0
   1c660:	e35c0000 	cmp	ip, #0
   1c664:	b3a03000 	movlt	r3, #0
   1c668:	e1db60b8 	ldrh	r6, [fp, #8]
   1c66c:	b5803044 	strlt	r3, [r0, #68]	; 0x44
   1c670:	ba00004c 	blt	1c7a8 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x15c>
   1c674:	e5d0c02a 	ldrb	ip, [r0, #42]	; 0x2a
   1c678:	e35c0000 	cmp	ip, #0
   1c67c:	1a000054 	bne	1c7d4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x188>
   1c680:	e1a0e003 	mov	lr, r3
   1c684:	e3de3040 	bics	r3, lr, #64	; 0x40
   1c688:	1a00004d 	bne	1c7c4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1c68c:	e1a05002 	mov	r5, r2
   1c690:	e59f31a8 	ldr	r3, [pc, #424]	; 1c840 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f4>
   1c694:	e2422001 	sub	r2, r2, #1
   1c698:	e1520003 	cmp	r2, r3
   1c69c:	e2858008 	add	r8, r5, #8
   1c6a0:	8a000047 	bhi	1c7c4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1c6a4:	e5903004 	ldr	r3, [r0, #4]
   1c6a8:	e3530000 	cmp	r3, #0
   1c6ac:	0a00004f 	beq	1c7f0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1a4>
   1c6b0:	e5d03040 	ldrb	r3, [r0, #64]	; 0x40
   1c6b4:	e1a07001 	mov	r7, r1
   1c6b8:	e3530000 	cmp	r3, #0
   1c6bc:	0a00003c 	beq	1c7b4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x168>
   1c6c0:	e3a00000 	mov	r0, #0
   1c6c4:	e1d411b6 	ldrh	r1, [r4, #22]
   1c6c8:	e2883007 	add	r3, r8, #7
   1c6cc:	e3c33007 	bic	r3, r3, #7
   1c6d0:	e04dd003 	sub	sp, sp, r3
   1c6d4:	e6bf6fb6 	rev16	r6, r6
   1c6d8:	e6bf1fb1 	rev16	r1, r1
   1c6dc:	e6bf3fb8 	rev16	r3, r8
   1c6e0:	e6ff2076 	uxth	r2, r6
   1c6e4:	e6ff1071 	uxth	r1, r1
   1c6e8:	e28d6008 	add	r6, sp, #8
   1c6ec:	e6ff3073 	uxth	r3, r3
   1c6f0:	e5cd1008 	strb	r1, [sp, #8]
   1c6f4:	e1a0c421 	lsr	ip, r1, #8
   1c6f8:	e5c62002 	strb	r2, [r6, #2]
   1c6fc:	e1a01422 	lsr	r1, r2, #8
   1c700:	e1570000 	cmp	r7, r0
   1c704:	e1a02423 	lsr	r2, r3, #8
   1c708:	e5c6c001 	strb	ip, [r6, #1]
   1c70c:	e5c61003 	strb	r1, [r6, #3]
   1c710:	e5c63004 	strb	r3, [r6, #4]
   1c714:	e5c62005 	strb	r2, [r6, #5]
   1c718:	e5c60006 	strb	r0, [r6, #6]
   1c71c:	e5c60007 	strb	r0, [r6, #7]
   1c720:	0a000036 	beq	1c800 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1c724:	e1a02005 	mov	r2, r5
   1c728:	e1a01007 	mov	r1, r7
   1c72c:	e2860008 	add	r0, r6, #8
   1c730:	eb003416 	bl	29790 <memcpy>
   1c734:	e5940004 	ldr	r0, [r4, #4]
   1c738:	eb000cd7 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   1c73c:	e284701c 	add	r7, r4, #28
   1c740:	e1a01000 	mov	r1, r0
   1c744:	e1a00007 	mov	r0, r7
   1c748:	eb000f64 	bl	204e0 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1c74c:	e59b1004 	ldr	r1, [fp, #4]
   1c750:	e1a00007 	mov	r0, r7
   1c754:	eb000f65 	bl	204f0 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1c758:	e1a01006 	mov	r1, r6
   1c75c:	e1a02008 	mov	r2, r8
   1c760:	e1a00007 	mov	r0, r7
   1c764:	eb000f8d 	bl	205a0 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1c768:	e5941008 	ldr	r1, [r4, #8]
   1c76c:	e1a03420 	lsr	r3, r0, #8
   1c770:	e3510000 	cmp	r1, #0
   1c774:	e5c60006 	strb	r0, [r6, #6]
   1c778:	e5c63007 	strb	r3, [r6, #7]
   1c77c:	0a00002b 	beq	1c830 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1e4>
   1c780:	e3a0c011 	mov	ip, #17
   1c784:	e1a00001 	mov	r0, r1
   1c788:	e1a03008 	mov	r3, r8
   1c78c:	e1a02006 	mov	r2, r6
   1c790:	e58dc000 	str	ip, [sp]
   1c794:	e59b1004 	ldr	r1, [fp, #4]
   1c798:	ebfff4ee 	bl	19b58 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1c79c:	e3500000 	cmp	r0, #0
   1c7a0:	0a000007 	beq	1c7c4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1c7a4:	e1a0c005 	mov	ip, r5
   1c7a8:	e1a0000c 	mov	r0, ip
   1c7ac:	e24bd018 	sub	sp, fp, #24
   1c7b0:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1c7b4:	e59b0004 	ldr	r0, [fp, #4]
   1c7b8:	eb000e00 	bl	1ffc0 <CIPAddress::IsBroadcast() const>
   1c7bc:	e3500000 	cmp	r0, #0
   1c7c0:	0a000012 	beq	1c810 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1c4>
   1c7c4:	e3e0c000 	mvn	ip, #0
   1c7c8:	e1a0000c 	mov	r0, ip
   1c7cc:	e24bd018 	sub	sp, fp, #24
   1c7d0:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1c7d4:	e590c000 	ldr	ip, [r0]
   1c7d8:	e59c4014 	ldr	r4, [ip, #20]
   1c7dc:	e12fff34 	blx	r4
   1c7e0:	e1a0c000 	mov	ip, r0
   1c7e4:	e1a0000c 	mov	r0, ip
   1c7e8:	e24bd018 	sub	sp, fp, #24
   1c7ec:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1c7f0:	e3a020e4 	mov	r2, #228	; 0xe4
   1c7f4:	e59f1048 	ldr	r1, [pc, #72]	; 1c844 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1c7f8:	e59f0048 	ldr	r0, [pc, #72]	; 1c848 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1fc>
   1c7fc:	eb001b9f 	bl	23680 <assertion_failed>
   1c800:	e3a020f4 	mov	r2, #244	; 0xf4
   1c804:	e59f1038 	ldr	r1, [pc, #56]	; 1c844 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1c808:	e59f003c 	ldr	r0, [pc, #60]	; 1c84c <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x200>
   1c80c:	eb001b9b 	bl	23680 <assertion_failed>
   1c810:	e5940004 	ldr	r0, [r4, #4]
   1c814:	eb000caa 	bl	1fac4 <CNetConfig::GetBroadcastAddress() const>
   1c818:	e1a01000 	mov	r1, r0
   1c81c:	e59b0004 	ldr	r0, [fp, #4]
   1c820:	eb000d10 	bl	1fc68 <CIPAddress::operator==(CIPAddress const&) const>
   1c824:	e3500000 	cmp	r0, #0
   1c828:	1affffe5 	bne	1c7c4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1c82c:	eaffffa3 	b	1c6c0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x74>
   1c830:	e3a020fc 	mov	r2, #252	; 0xfc
   1c834:	e59f1008 	ldr	r1, [pc, #8]	; 1c844 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1c838:	e59f0010 	ldr	r0, [pc, #16]	; 1c850 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x204>
   1c83c:	eb001b8f 	bl	23680 <assertion_failed>
   1c840:	00000637 	.word	0x00000637
   1c844:	00039620 	.word	0x00039620
   1c848:	00038f28 	.word	0x00038f28
   1c84c:	00038fa4 	.word	0x00038fa4
   1c850:	00038f3c 	.word	0x00038f3c

0001c854 <CUDPConnection::Receive(void*, int)>:
   1c854:	e5903044 	ldr	r3, [r0, #68]	; 0x44
   1c858:	e3530000 	cmp	r3, #0
   1c85c:	ba000028 	blt	1c904 <CUDPConnection::Receive(void*, int)+0xb0>
   1c860:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1c864:	e1a08002 	mov	r8, r2
   1c868:	e1a04001 	mov	r4, r1
   1c86c:	e1a05000 	mov	r5, r0
   1c870:	e24dd00c 	sub	sp, sp, #12
   1c874:	e280602c 	add	r6, r0, #44	; 0x2c
   1c878:	e2807038 	add	r7, r0, #56	; 0x38
   1c87c:	e3540000 	cmp	r4, #0
   1c880:	0a00001b 	beq	1c8f4 <CUDPConnection::Receive(void*, int)+0xa0>
   1c884:	e28d2004 	add	r2, sp, #4
   1c888:	e1a01004 	mov	r1, r4
   1c88c:	e1a00006 	mov	r0, r6
   1c890:	eb000eae 	bl	20350 <CNetQueue::Dequeue(void*, void**)>
   1c894:	e2509000 	subs	r9, r0, #0
   1c898:	1a00000c 	bne	1c8d0 <CUDPConnection::Receive(void*, int)+0x7c>
   1c89c:	e3580040 	cmp	r8, #64	; 0x40
   1c8a0:	0a00001b 	beq	1c914 <CUDPConnection::Receive(void*, int)+0xc0>
   1c8a4:	e1a00007 	mov	r0, r7
   1c8a8:	eb001aee 	bl	23468 <CSynchronizationEvent::Clear()>
   1c8ac:	e1a00007 	mov	r0, r7
   1c8b0:	eb001afd 	bl	234ac <CSynchronizationEvent::Wait()>
   1c8b4:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   1c8b8:	e3530000 	cmp	r3, #0
   1c8bc:	aaffffee 	bge	1c87c <CUDPConnection::Receive(void*, int)+0x28>
   1c8c0:	e5859044 	str	r9, [r5, #68]	; 0x44
   1c8c4:	e1a00003 	mov	r0, r3
   1c8c8:	e28dd00c 	add	sp, sp, #12
   1c8cc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c8d0:	e59d0004 	ldr	r0, [sp, #4]
   1c8d4:	e3500000 	cmp	r0, #0
   1c8d8:	0a00000f 	beq	1c91c <CUDPConnection::Receive(void*, int)+0xc8>
   1c8dc:	e3a01006 	mov	r1, #6
   1c8e0:	eb003591 	bl	29f2c <operator delete(void*, unsigned int)>
   1c8e4:	e1a03009 	mov	r3, r9
   1c8e8:	e1a00003 	mov	r0, r3
   1c8ec:	e28dd00c 	add	sp, sp, #12
   1c8f0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c8f4:	e3a020a7 	mov	r2, #167	; 0xa7
   1c8f8:	e59f102c 	ldr	r1, [pc, #44]	; 1c92c <CUDPConnection::Receive(void*, int)+0xd8>
   1c8fc:	e59f002c 	ldr	r0, [pc, #44]	; 1c930 <CUDPConnection::Receive(void*, int)+0xdc>
   1c900:	eb001b5e 	bl	23680 <assertion_failed>
   1c904:	e3a02000 	mov	r2, #0
   1c908:	e5802044 	str	r2, [r0, #68]	; 0x44
   1c90c:	e1a00003 	mov	r0, r3
   1c910:	e12fff1e 	bx	lr
   1c914:	e1a03009 	mov	r3, r9
   1c918:	eaffffe9 	b	1c8c4 <CUDPConnection::Receive(void*, int)+0x70>
   1c91c:	e3a020bf 	mov	r2, #191	; 0xbf
   1c920:	e59f1004 	ldr	r1, [pc, #4]	; 1c92c <CUDPConnection::Receive(void*, int)+0xd8>
   1c924:	e59f0008 	ldr	r0, [pc, #8]	; 1c934 <CUDPConnection::Receive(void*, int)+0xe0>
   1c928:	eb001b54 	bl	23680 <assertion_failed>
   1c92c:	00039620 	.word	0x00039620
   1c930:	00036138 	.word	0x00036138
   1c934:	00038fa4 	.word	0x00038fa4

0001c938 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1c938:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   1c93c:	e35c0000 	cmp	ip, #0
   1c940:	ba00002c 	blt	1c9f8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xc0>
   1c944:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c948:	e1a09003 	mov	r9, r3
   1c94c:	e1a08002 	mov	r8, r2
   1c950:	e1a04001 	mov	r4, r1
   1c954:	e1a05000 	mov	r5, r0
   1c958:	e24dd008 	sub	sp, sp, #8
   1c95c:	e280602c 	add	r6, r0, #44	; 0x2c
   1c960:	e2807038 	add	r7, r0, #56	; 0x38
   1c964:	e3540000 	cmp	r4, #0
   1c968:	0a00001e 	beq	1c9e8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xb0>
   1c96c:	e28d2004 	add	r2, sp, #4
   1c970:	e1a01004 	mov	r1, r4
   1c974:	e1a00006 	mov	r0, r6
   1c978:	eb000e74 	bl	20350 <CNetQueue::Dequeue(void*, void**)>
   1c97c:	e250a000 	subs	sl, r0, #0
   1c980:	1a00000a 	bne	1c9b0 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x78>
   1c984:	e3580040 	cmp	r8, #64	; 0x40
   1c988:	0a00001e 	beq	1ca08 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xd0>
   1c98c:	e1a00007 	mov	r0, r7
   1c990:	eb001ab4 	bl	23468 <CSynchronizationEvent::Clear()>
   1c994:	e1a00007 	mov	r0, r7
   1c998:	eb001ac3 	bl	234ac <CSynchronizationEvent::Wait()>
   1c99c:	e595c044 	ldr	ip, [r5, #68]	; 0x44
   1c9a0:	e35c0000 	cmp	ip, #0
   1c9a4:	aaffffee 	bge	1c964 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x2c>
   1c9a8:	e585a044 	str	sl, [r5, #68]	; 0x44
   1c9ac:	ea00000a 	b	1c9dc <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xa4>
   1c9b0:	e59d4004 	ldr	r4, [sp, #4]
   1c9b4:	e3540000 	cmp	r4, #0
   1c9b8:	0a00001b 	beq	1ca2c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xf4>
   1c9bc:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1c9c0:	e3590000 	cmp	r9, #0
   1c9c4:	13530000 	cmpne	r3, #0
   1c9c8:	1a000010 	bne	1ca10 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xd8>
   1c9cc:	e1a00004 	mov	r0, r4
   1c9d0:	e3a01006 	mov	r1, #6
   1c9d4:	eb003554 	bl	29f2c <operator delete(void*, unsigned int)>
   1c9d8:	e1a0c00a 	mov	ip, sl
   1c9dc:	e1a0000c 	mov	r0, ip
   1c9e0:	e28dd008 	add	sp, sp, #8
   1c9e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c9e8:	e3a02e11 	mov	r2, #272	; 0x110
   1c9ec:	e59f1048 	ldr	r1, [pc, #72]	; 1ca3c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x104>
   1c9f0:	e59f0048 	ldr	r0, [pc, #72]	; 1ca40 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x108>
   1c9f4:	eb001b21 	bl	23680 <assertion_failed>
   1c9f8:	e3a03000 	mov	r3, #0
   1c9fc:	e5803044 	str	r3, [r0, #68]	; 0x44
   1ca00:	e1a0000c 	mov	r0, ip
   1ca04:	e12fff1e 	bx	lr
   1ca08:	e1a0c00a 	mov	ip, sl
   1ca0c:	eafffff2 	b	1c9dc <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xa4>
   1ca10:	e1a00009 	mov	r0, r9
   1ca14:	e1a01004 	mov	r1, r4
   1ca18:	eb000d02 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   1ca1c:	e1d430b4 	ldrh	r3, [r4, #4]
   1ca20:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1ca24:	e1c230b0 	strh	r3, [r2]
   1ca28:	eaffffe7 	b	1c9cc <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x94>
   1ca2c:	e3a02f4a 	mov	r2, #296	; 0x128
   1ca30:	e59f1004 	ldr	r1, [pc, #4]	; 1ca3c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x104>
   1ca34:	e59f0008 	ldr	r0, [pc, #8]	; 1ca44 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x10c>
   1ca38:	eb001b10 	bl	23680 <assertion_failed>
   1ca3c:	00039620 	.word	0x00039620
   1ca40:	00036138 	.word	0x00036138
   1ca44:	00038fa4 	.word	0x00038fa4

0001ca48 <CUDPConnection::Connect()>:
   1ca48:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1ca4c:	e3530000 	cmp	r3, #0
   1ca50:	0a000001 	beq	1ca5c <CUDPConnection::Connect()+0x14>
   1ca54:	e3a00000 	mov	r0, #0
   1ca58:	e12fff1e 	bx	lr
   1ca5c:	e92d4010 	push	{r4, lr}
   1ca60:	e3a02049 	mov	r2, #73	; 0x49
   1ca64:	e59f1004 	ldr	r1, [pc, #4]	; 1ca70 <CUDPConnection::Connect()+0x28>
   1ca68:	e59f0004 	ldr	r0, [pc, #4]	; 1ca74 <CUDPConnection::Connect()+0x2c>
   1ca6c:	eb001b03 	bl	23680 <assertion_failed>
   1ca70:	00039620 	.word	0x00039620
   1ca74:	00039634 	.word	0x00039634

0001ca78 <CUDPConnection::~CUDPConnection()>:
   1ca78:	e5d02029 	ldrb	r2, [r0, #41]	; 0x29
   1ca7c:	e59f3040 	ldr	r3, [pc, #64]	; 1cac4 <CUDPConnection::~CUDPConnection()+0x4c>
   1ca80:	e3520000 	cmp	r2, #0
   1ca84:	e92d4010 	push	{r4, lr}
   1ca88:	e5803000 	str	r3, [r0]
   1ca8c:	1a000008 	bne	1cab4 <CUDPConnection::~CUDPConnection()+0x3c>
   1ca90:	e1a04000 	mov	r4, r0
   1ca94:	e2800038 	add	r0, r0, #56	; 0x38
   1ca98:	eb001a65 	bl	23434 <CSynchronizationEvent::~CSynchronizationEvent()>
   1ca9c:	e284002c 	add	r0, r4, #44	; 0x2c
   1caa0:	eb000ddf 	bl	20224 <CNetQueue::~CNetQueue()>
   1caa4:	e1a00004 	mov	r0, r4
   1caa8:	ebfffe2f 	bl	1c36c <CNetConnection::~CNetConnection()>
   1caac:	e1a00004 	mov	r0, r4
   1cab0:	e8bd8010 	pop	{r4, pc}
   1cab4:	e3a02044 	mov	r2, #68	; 0x44
   1cab8:	e59f1008 	ldr	r1, [pc, #8]	; 1cac8 <CUDPConnection::~CUDPConnection()+0x50>
   1cabc:	e59f0008 	ldr	r0, [pc, #8]	; 1cacc <CUDPConnection::~CUDPConnection()+0x54>
   1cac0:	eb001aee 	bl	23680 <assertion_failed>
   1cac4:	000395e4 	.word	0x000395e4
   1cac8:	00039620 	.word	0x00039620
   1cacc:	0003963c 	.word	0x0003963c

0001cad0 <CUDPConnection::~CUDPConnection()>:
   1cad0:	e92d4010 	push	{r4, lr}
   1cad4:	e1a04000 	mov	r4, r0
   1cad8:	ebffffe6 	bl	1ca78 <CUDPConnection::~CUDPConnection()>
   1cadc:	e1a00004 	mov	r0, r4
   1cae0:	e3a01048 	mov	r1, #72	; 0x48
   1cae4:	eb003510 	bl	29f2c <operator delete(void*, unsigned int)>
   1cae8:	e1a00004 	mov	r0, r4
   1caec:	e8bd8010 	pop	{r4, pc}

0001caf0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1caf0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1caf4:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1caf8:	e35c0011 	cmp	ip, #17
   1cafc:	0a000001 	beq	1cb08 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1cb00:	e3a00000 	mov	r0, #0
   1cb04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cb08:	e3520008 	cmp	r2, #8
   1cb0c:	9a000055 	bls	1cc68 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x178>
   1cb10:	e5d1c002 	ldrb	ip, [r1, #2]
   1cb14:	e5d14003 	ldrb	r4, [r1, #3]
   1cb18:	e1d0e1b6 	ldrh	lr, [r0, #22]
   1cb1c:	e18cc404 	orr	ip, ip, r4, lsl #8
   1cb20:	e6bfcfbc 	rev16	ip, ip
   1cb24:	e6ffc07c 	uxth	ip, ip
   1cb28:	e15e000c 	cmp	lr, ip
   1cb2c:	1afffff3 	bne	1cb00 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1cb30:	e1a06003 	mov	r6, r3
   1cb34:	e5903004 	ldr	r3, [r0, #4]
   1cb38:	e1a05002 	mov	r5, r2
   1cb3c:	e3530000 	cmp	r3, #0
   1cb40:	e1a04001 	mov	r4, r1
   1cb44:	e1a08000 	mov	r8, r0
   1cb48:	0a000054 	beq	1cca0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1b0>
   1cb4c:	e5d17000 	ldrb	r7, [r1]
   1cb50:	e5d12001 	ldrb	r2, [r1, #1]
   1cb54:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1cb58:	e1877402 	orr	r7, r7, r2, lsl #8
   1cb5c:	e6bf7fb7 	rev16	r7, r7
   1cb60:	e3530000 	cmp	r3, #0
   1cb64:	e6ff3077 	uxth	r3, r7
   1cb68:	0a000013 	beq	1cbbc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcc>
   1cb6c:	e1d021b4 	ldrh	r2, [r0, #20]
   1cb70:	e1520003 	cmp	r2, r3
   1cb74:	1affffe1 	bne	1cb00 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1cb78:	e280900c 	add	r9, r0, #12
   1cb7c:	e1a00009 	mov	r0, r9
   1cb80:	e1a01006 	mov	r1, r6
   1cb84:	eb000c4f 	bl	1fcc8 <CIPAddress::operator!=(CIPAddress const&) const>
   1cb88:	e3500000 	cmp	r0, #0
   1cb8c:	0a00000a 	beq	1cbbc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcc>
   1cb90:	e1a00009 	mov	r0, r9
   1cb94:	eb000d09 	bl	1ffc0 <CIPAddress::IsBroadcast() const>
   1cb98:	e3500000 	cmp	r0, #0
   1cb9c:	1a000006 	bne	1cbbc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcc>
   1cba0:	e5980004 	ldr	r0, [r8, #4]
   1cba4:	eb000bc6 	bl	1fac4 <CNetConfig::GetBroadcastAddress() const>
   1cba8:	e1a01000 	mov	r1, r0
   1cbac:	e1a00009 	mov	r0, r9
   1cbb0:	eb000c44 	bl	1fcc8 <CIPAddress::operator!=(CIPAddress const&) const>
   1cbb4:	e3500000 	cmp	r0, #0
   1cbb8:	1affffd0 	bne	1cb00 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1cbbc:	e5d43004 	ldrb	r3, [r4, #4]
   1cbc0:	e5d42005 	ldrb	r2, [r4, #5]
   1cbc4:	e1833402 	orr	r3, r3, r2, lsl #8
   1cbc8:	e6bf3fb3 	rev16	r3, r3
   1cbcc:	e6ff3073 	uxth	r3, r3
   1cbd0:	e1550003 	cmp	r5, r3
   1cbd4:	3a000023 	bcc	1cc68 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x178>
   1cbd8:	e5d43006 	ldrb	r3, [r4, #6]
   1cbdc:	e5d42007 	ldrb	r2, [r4, #7]
   1cbe0:	e1933402 	orrs	r3, r3, r2, lsl #8
   1cbe4:	1a000012 	bne	1cc34 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x144>
   1cbe8:	e5d83040 	ldrb	r3, [r8, #64]	; 0x40
   1cbec:	e3530000 	cmp	r3, #0
   1cbf0:	0a00001e 	beq	1cc70 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x180>
   1cbf4:	e3a00006 	mov	r0, #6
   1cbf8:	eb0034bd 	bl	29ef4 <operator new(unsigned int)>
   1cbfc:	e1a09000 	mov	r9, r0
   1cc00:	e1a01000 	mov	r1, r0
   1cc04:	e1a00006 	mov	r0, r6
   1cc08:	eb000cc7 	bl	1ff2c <CIPAddress::CopyTo(unsigned char*) const>
   1cc0c:	e288002c 	add	r0, r8, #44	; 0x2c
   1cc10:	e1a03009 	mov	r3, r9
   1cc14:	e2452008 	sub	r2, r5, #8
   1cc18:	e2841008 	add	r1, r4, #8
   1cc1c:	e1c970b4 	strh	r7, [r9, #4]
   1cc20:	eb000d84 	bl	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1cc24:	e2880038 	add	r0, r8, #56	; 0x38
   1cc28:	eb001a11 	bl	23474 <CSynchronizationEvent::Set()>
   1cc2c:	e3a00001 	mov	r0, #1
   1cc30:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cc34:	e288901c 	add	r9, r8, #28
   1cc38:	e1a00009 	mov	r0, r9
   1cc3c:	e1a01006 	mov	r1, r6
   1cc40:	eb000e26 	bl	204e0 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1cc44:	e59d1020 	ldr	r1, [sp, #32]
   1cc48:	e1a00009 	mov	r0, r9
   1cc4c:	eb000e27 	bl	204f0 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1cc50:	e1a02005 	mov	r2, r5
   1cc54:	e1a01004 	mov	r1, r4
   1cc58:	e1a00009 	mov	r0, r9
   1cc5c:	eb000e4f 	bl	205a0 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1cc60:	e3500000 	cmp	r0, #0
   1cc64:	0affffdf 	beq	1cbe8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xf8>
   1cc68:	e3e00000 	mvn	r0, #0
   1cc6c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cc70:	e59d0020 	ldr	r0, [sp, #32]
   1cc74:	eb000cd1 	bl	1ffc0 <CIPAddress::IsBroadcast() const>
   1cc78:	e3500000 	cmp	r0, #0
   1cc7c:	1affffea 	bne	1cc2c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x13c>
   1cc80:	e5980004 	ldr	r0, [r8, #4]
   1cc84:	eb000b8e 	bl	1fac4 <CNetConfig::GetBroadcastAddress() const>
   1cc88:	e1a01000 	mov	r1, r0
   1cc8c:	e59d0020 	ldr	r0, [sp, #32]
   1cc90:	eb000bf4 	bl	1fc68 <CIPAddress::operator==(CIPAddress const&) const>
   1cc94:	e3500000 	cmp	r0, #0
   1cc98:	1affffe3 	bne	1cc2c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x13c>
   1cc9c:	eaffffd4 	b	1cbf4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x104>
   1cca0:	e59f2008 	ldr	r2, [pc, #8]	; 1ccb0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c0>
   1cca4:	e59f1008 	ldr	r1, [pc, #8]	; 1ccb4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c4>
   1cca8:	e59f0008 	ldr	r0, [pc, #8]	; 1ccb8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c8>
   1ccac:	eb001a73 	bl	23680 <assertion_failed>
   1ccb0:	0000015e 	.word	0x0000015e
   1ccb4:	00039620 	.word	0x00039620
   1ccb8:	00038f28 	.word	0x00038f28

0001ccbc <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1ccbc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ccc0:	e59d1020 	ldr	r1, [sp, #32]
   1ccc4:	e1dd71b8 	ldrh	r7, [sp, #24]
   1ccc8:	e3510011 	cmp	r1, #17
   1cccc:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1ccd0:	0a000001 	beq	1ccdc <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x20>
   1ccd4:	e3a00000 	mov	r0, #0
   1ccd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ccdc:	e1d011b6 	ldrh	r1, [r0, #22]
   1cce0:	e151000c 	cmp	r1, ip
   1cce4:	1afffffa 	bne	1ccd4 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1cce8:	e1a04000 	mov	r4, r0
   1ccec:	e5900004 	ldr	r0, [r0, #4]
   1ccf0:	e1a05003 	mov	r5, r3
   1ccf4:	e3500000 	cmp	r0, #0
   1ccf8:	e1a06002 	mov	r6, r2
   1ccfc:	0a000016 	beq	1cd5c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1cd00:	eb000b65 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   1cd04:	e1a01000 	mov	r1, r0
   1cd08:	e1a00005 	mov	r0, r5
   1cd0c:	eb000bed 	bl	1fcc8 <CIPAddress::operator!=(CIPAddress const&) const>
   1cd10:	e3500000 	cmp	r0, #0
   1cd14:	1affffee 	bne	1ccd4 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1cd18:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1cd1c:	e3530000 	cmp	r3, #0
   1cd20:	0a000007 	beq	1cd44 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x88>
   1cd24:	e1d431b4 	ldrh	r3, [r4, #20]
   1cd28:	e1530007 	cmp	r3, r7
   1cd2c:	1affffe8 	bne	1ccd4 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1cd30:	e1a01006 	mov	r1, r6
   1cd34:	e284000c 	add	r0, r4, #12
   1cd38:	eb000be2 	bl	1fcc8 <CIPAddress::operator!=(CIPAddress const&) const>
   1cd3c:	e3500000 	cmp	r0, #0
   1cd40:	1affffe3 	bne	1ccd4 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1cd44:	e3e03000 	mvn	r3, #0
   1cd48:	e2840038 	add	r0, r4, #56	; 0x38
   1cd4c:	e5843044 	str	r3, [r4, #68]	; 0x44
   1cd50:	eb0019c7 	bl	23474 <CSynchronizationEvent::Set()>
   1cd54:	e3a00001 	mov	r0, #1
   1cd58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1cd5c:	e59f2008 	ldr	r2, [pc, #8]	; 1cd6c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb0>
   1cd60:	e59f1008 	ldr	r1, [pc, #8]	; 1cd70 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb4>
   1cd64:	e59f0008 	ldr	r0, [pc, #8]	; 1cd74 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb8>
   1cd68:	eb001a44 	bl	23680 <assertion_failed>
   1cd6c:	000001a7 	.word	0x000001a7
   1cd70:	00039620 	.word	0x00039620
   1cd74:	00038f28 	.word	0x00038f28

0001cd78 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1cd78:	e92d4010 	push	{r4, lr}
   1cd7c:	e3a04011 	mov	r4, #17
   1cd80:	e24dd010 	sub	sp, sp, #16
   1cd84:	e1dde1b8 	ldrh	lr, [sp, #24]
   1cd88:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1cd8c:	e58de000 	str	lr, [sp]
   1cd90:	e58dc004 	str	ip, [sp, #4]
   1cd94:	e58d4008 	str	r4, [sp, #8]
   1cd98:	e1a04000 	mov	r4, r0
   1cd9c:	ebfffd20 	bl	1c224 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1cda0:	e3a03001 	mov	r3, #1
   1cda4:	e59f2034 	ldr	r2, [pc, #52]	; 1cde0 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x68>
   1cda8:	e5c43029 	strb	r3, [r4, #41]	; 0x29
   1cdac:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1cdb0:	e5842000 	str	r2, [r4]
   1cdb4:	e284002c 	add	r0, r4, #44	; 0x2c
   1cdb8:	eb000cdf 	bl	2013c <CNetQueue::CNetQueue()>
   1cdbc:	e2840038 	add	r0, r4, #56	; 0x38
   1cdc0:	e3a01000 	mov	r1, #0
   1cdc4:	eb001996 	bl	23424 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1cdc8:	e3a03000 	mov	r3, #0
   1cdcc:	e1a00004 	mov	r0, r4
   1cdd0:	e5c43040 	strb	r3, [r4, #64]	; 0x40
   1cdd4:	e5843044 	str	r3, [r4, #68]	; 0x44
   1cdd8:	e28dd010 	add	sp, sp, #16
   1cddc:	e8bd8010 	pop	{r4, pc}
   1cde0:	000395e4 	.word	0x000395e4

0001cde4 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1cde4:	e3a0c011 	mov	ip, #17
   1cde8:	e92d4030 	push	{r4, r5, lr}
   1cdec:	e24dd00c 	sub	sp, sp, #12
   1cdf0:	e58dc000 	str	ip, [sp]
   1cdf4:	e1a04000 	mov	r4, r0
   1cdf8:	e3a05000 	mov	r5, #0
   1cdfc:	ebfffd34 	bl	1c2d4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1ce00:	e3a02001 	mov	r2, #1
   1ce04:	e59f3030 	ldr	r3, [pc, #48]	; 1ce3c <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0x58>
   1ce08:	e5c42029 	strb	r2, [r4, #41]	; 0x29
   1ce0c:	e5843000 	str	r3, [r4]
   1ce10:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1ce14:	e284002c 	add	r0, r4, #44	; 0x2c
   1ce18:	eb000cc7 	bl	2013c <CNetQueue::CNetQueue()>
   1ce1c:	e1a01005 	mov	r1, r5
   1ce20:	e2840038 	add	r0, r4, #56	; 0x38
   1ce24:	eb00197e 	bl	23424 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1ce28:	e1a00004 	mov	r0, r4
   1ce2c:	e5c45040 	strb	r5, [r4, #64]	; 0x40
   1ce30:	e5845044 	str	r5, [r4, #68]	; 0x44
   1ce34:	e28dd00c 	add	sp, sp, #12
   1ce38:	e8bd8030 	pop	{r4, r5, pc}
   1ce3c:	000395e4 	.word	0x000395e4

0001ce40 <CTCPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1ce40:	e590c000 	ldr	ip, [r0]
   1ce44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1ce48:	e59ce014 	ldr	lr, [ip, #20]
   1ce4c:	e1a0c00e 	mov	ip, lr
   1ce50:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1ce54:	e12fff1c 	bx	ip

0001ce58 <CTCPConnection::SetOptionBroadcast(bool)>:
   1ce58:	e3a00000 	mov	r0, #0
   1ce5c:	e12fff1e 	bx	lr

0001ce60 <CTCPConnection::IsConnected() const>:
   1ce60:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1ce64:	e3530002 	cmp	r3, #2
   1ce68:	da000003 	ble	1ce7c <CTCPConnection::IsConnected() const+0x1c>
   1ce6c:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1ce70:	e250000a 	subs	r0, r0, #10
   1ce74:	13a00001 	movne	r0, #1
   1ce78:	e12fff1e 	bx	lr
   1ce7c:	e3a00000 	mov	r0, #0
   1ce80:	e12fff1e 	bx	lr

0001ce84 <CTCPConnection::IsTerminated() const>:
   1ce84:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1ce88:	e16f0f10 	clz	r0, r0
   1ce8c:	e1a002a0 	lsr	r0, r0, #5
   1ce90:	e12fff1e 	bx	lr

0001ce94 <CTCPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1ce94:	e590c000 	ldr	ip, [r0]
   1ce98:	e92d4070 	push	{r4, r5, r6, lr}
   1ce9c:	e1a05003 	mov	r5, r3
   1cea0:	e59c3018 	ldr	r3, [ip, #24]
   1cea4:	e1a06000 	mov	r6, r0
   1cea8:	e59d4010 	ldr	r4, [sp, #16]
   1ceac:	e12fff33 	blx	r3
   1ceb0:	e3500000 	cmp	r0, #0
   1ceb4:	d8bd8070 	pople	{r4, r5, r6, pc}
   1ceb8:	e3550000 	cmp	r5, #0
   1cebc:	13540000 	cmpne	r4, #0
   1cec0:	13a00001 	movne	r0, #1
   1cec4:	03a00000 	moveq	r0, #0
   1cec8:	08bd8070 	popeq	{r4, r5, r6, pc}
   1cecc:	e1a00005 	mov	r0, r5
   1ced0:	e286100c 	add	r1, r6, #12
   1ced4:	eb000be8 	bl	1fe7c <CIPAddress::Set(CIPAddress const&)>
   1ced8:	e1d631b4 	ldrh	r3, [r6, #20]
   1cedc:	e3a00000 	mov	r0, #0
   1cee0:	e1c430b0 	strh	r3, [r4]
   1cee4:	e8bd8070 	pop	{r4, r5, r6, pc}

0001cee8 <CTCPConnection::Send(void const*, unsigned int, int)>:
   1cee8:	e3d3c040 	bics	ip, r3, #64	; 0x40
   1ceec:	1a000040 	bne	1cff4 <CTCPConnection::Send(void const*, unsigned int, int)+0x10c>
   1cef0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cef4:	e1a04001 	mov	r4, r1
   1cef8:	e590102c 	ldr	r1, [r0, #44]	; 0x2c
   1cefc:	e3510000 	cmp	r1, #0
   1cf00:	ba000030 	blt	1cfc8 <CTCPConnection::Send(void const*, unsigned int, int)+0xe0>
   1cf04:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1cf08:	e6ef1071 	uxtb	r1, r1
   1cf0c:	e351000a 	cmp	r1, #10
   1cf10:	9a00001c 	bls	1cf88 <CTCPConnection::Send(void const*, unsigned int, int)+0xa0>
   1cf14:	e3540000 	cmp	r4, #0
   1cf18:	e1a08002 	mov	r8, r2
   1cf1c:	e1a09000 	mov	r9, r0
   1cf20:	e1a0a003 	mov	sl, r3
   1cf24:	0a000029 	beq	1cfd0 <CTCPConnection::Send(void const*, unsigned int, int)+0xe8>
   1cf28:	e3520d19 	cmp	r2, #1600	; 0x640
   1cf2c:	9a00002b 	bls	1cfe0 <CTCPConnection::Send(void const*, unsigned int, int)+0xf8>
   1cf30:	e1a05002 	mov	r5, r2
   1cf34:	e3a0b000 	mov	fp, #0
   1cf38:	e3a07d19 	mov	r7, #1600	; 0x640
   1cf3c:	e2806030 	add	r6, r0, #48	; 0x30
   1cf40:	e1a01004 	mov	r1, r4
   1cf44:	e2455d19 	sub	r5, r5, #1600	; 0x640
   1cf48:	e1a0300b 	mov	r3, fp
   1cf4c:	e1a02007 	mov	r2, r7
   1cf50:	e1a00006 	mov	r0, r6
   1cf54:	eb000cb7 	bl	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1cf58:	e3550d19 	cmp	r5, #1600	; 0x640
   1cf5c:	e2844d19 	add	r4, r4, #1600	; 0x640
   1cf60:	8afffff6 	bhi	1cf40 <CTCPConnection::Send(void const*, unsigned int, int)+0x58>
   1cf64:	e1a02005 	mov	r2, r5
   1cf68:	e1a01004 	mov	r1, r4
   1cf6c:	e1a00006 	mov	r0, r6
   1cf70:	e3a03000 	mov	r3, #0
   1cf74:	eb000caf 	bl	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1cf78:	e31a0040 	tst	sl, #64	; 0x40
   1cf7c:	0a000007 	beq	1cfa0 <CTCPConnection::Send(void const*, unsigned int, int)+0xb8>
   1cf80:	e1a00008 	mov	r0, r8
   1cf84:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf88:	e3a0e001 	mov	lr, #1
   1cf8c:	e59fc068 	ldr	ip, [pc, #104]	; 1cffc <CTCPConnection::Send(void const*, unsigned int, int)+0x114>
   1cf90:	e01c111e 	ands	r1, ip, lr, lsl r1
   1cf94:	0affffde 	beq	1cf14 <CTCPConnection::Send(void const*, unsigned int, int)+0x2c>
   1cf98:	e3e00000 	mvn	r0, #0
   1cf9c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfa0:	e2894070 	add	r4, r9, #112	; 0x70
   1cfa4:	e1a00004 	mov	r0, r4
   1cfa8:	eb00192e 	bl	23468 <CSynchronizationEvent::Clear()>
   1cfac:	e1a00004 	mov	r0, r4
   1cfb0:	eb00193d 	bl	234ac <CSynchronizationEvent::Wait()>
   1cfb4:	e599302c 	ldr	r3, [r9, #44]	; 0x2c
   1cfb8:	e3530000 	cmp	r3, #0
   1cfbc:	aaffffef 	bge	1cf80 <CTCPConnection::Send(void const*, unsigned int, int)+0x98>
   1cfc0:	e599002c 	ldr	r0, [r9, #44]	; 0x2c
   1cfc4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfc8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1cfcc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cfd0:	e3a02d06 	mov	r2, #384	; 0x180
   1cfd4:	e59f1024 	ldr	r1, [pc, #36]	; 1d000 <CTCPConnection::Send(void const*, unsigned int, int)+0x118>
   1cfd8:	e59f0024 	ldr	r0, [pc, #36]	; 1d004 <CTCPConnection::Send(void const*, unsigned int, int)+0x11c>
   1cfdc:	eb0019a7 	bl	23680 <assertion_failed>
   1cfe0:	e3520000 	cmp	r2, #0
   1cfe4:	0affffe3 	beq	1cf78 <CTCPConnection::Send(void const*, unsigned int, int)+0x90>
   1cfe8:	e1a05002 	mov	r5, r2
   1cfec:	e2806030 	add	r6, r0, #48	; 0x30
   1cff0:	eaffffdb 	b	1cf64 <CTCPConnection::Send(void const*, unsigned int, int)+0x7c>
   1cff4:	e3e00000 	mvn	r0, #0
   1cff8:	e12fff1e 	bx	lr
   1cffc:	00000763 	.word	0x00000763
   1d000:	000396bc 	.word	0x000396bc
   1d004:	00038fa4 	.word	0x00038fa4

0001d008 <CTCPConnection::Receive(void*, int)>:
   1d008:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d00c:	e3d23040 	bics	r3, r2, #64	; 0x40
   1d010:	e24dd00c 	sub	sp, sp, #12
   1d014:	e58d3004 	str	r3, [sp, #4]
   1d018:	1a00002e 	bne	1d0d8 <CTCPConnection::Receive(void*, int)+0xd0>
   1d01c:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1d020:	e3530000 	cmp	r3, #0
   1d024:	ba000026 	blt	1d0c4 <CTCPConnection::Receive(void*, int)+0xbc>
   1d028:	e1a07001 	mov	r7, r1
   1d02c:	e1a04000 	mov	r4, r0
   1d030:	e59d9004 	ldr	r9, [sp, #4]
   1d034:	e3a0b001 	mov	fp, #1
   1d038:	e59fa0ac 	ldr	sl, [pc, #172]	; 1d0ec <CTCPConnection::Receive(void*, int)+0xe4>
   1d03c:	e2026040 	and	r6, r2, #64	; 0x40
   1d040:	e280803c 	add	r8, r0, #60	; 0x3c
   1d044:	e2805068 	add	r5, r0, #104	; 0x68
   1d048:	ea00000e 	b	1d088 <CTCPConnection::Receive(void*, int)+0x80>
   1d04c:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1d050:	e6ef3073 	uxtb	r3, r3
   1d054:	e353000a 	cmp	r3, #10
   1d058:	8a000001 	bhi	1d064 <CTCPConnection::Receive(void*, int)+0x5c>
   1d05c:	e01a331b 	ands	r3, sl, fp, lsl r3
   1d060:	1a00001c 	bne	1d0d8 <CTCPConnection::Receive(void*, int)+0xd0>
   1d064:	e3560000 	cmp	r6, #0
   1d068:	1a00000d 	bne	1d0a4 <CTCPConnection::Receive(void*, int)+0x9c>
   1d06c:	e1a00005 	mov	r0, r5
   1d070:	eb0018fc 	bl	23468 <CSynchronizationEvent::Clear()>
   1d074:	e1a00005 	mov	r0, r5
   1d078:	eb00190b 	bl	234ac <CSynchronizationEvent::Wait()>
   1d07c:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1d080:	e3530000 	cmp	r3, #0
   1d084:	ba000009 	blt	1d0b0 <CTCPConnection::Receive(void*, int)+0xa8>
   1d088:	e1a02009 	mov	r2, r9
   1d08c:	e1a01007 	mov	r1, r7
   1d090:	e1a00008 	mov	r0, r8
   1d094:	eb000cad 	bl	20350 <CNetQueue::Dequeue(void*, void**)>
   1d098:	e3500000 	cmp	r0, #0
   1d09c:	0affffea 	beq	1d04c <CTCPConnection::Receive(void*, int)+0x44>
   1d0a0:	e58d0004 	str	r0, [sp, #4]
   1d0a4:	e59d0004 	ldr	r0, [sp, #4]
   1d0a8:	e28dd00c 	add	sp, sp, #12
   1d0ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0b0:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1d0b4:	e58d3004 	str	r3, [sp, #4]
   1d0b8:	e59d0004 	ldr	r0, [sp, #4]
   1d0bc:	e28dd00c 	add	sp, sp, #12
   1d0c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0c4:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1d0c8:	e58d3004 	str	r3, [sp, #4]
   1d0cc:	e59d0004 	ldr	r0, [sp, #4]
   1d0d0:	e28dd00c 	add	sp, sp, #12
   1d0d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0d8:	e3e03000 	mvn	r3, #0
   1d0dc:	e58d3004 	str	r3, [sp, #4]
   1d0e0:	e59d0004 	ldr	r0, [sp, #4]
   1d0e4:	e28dd00c 	add	sp, sp, #12
   1d0e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0ec:	000007e3 	.word	0x000007e3

0001d0f0 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1d0f0:	e3a0c006 	mov	ip, #6
   1d0f4:	e92d4070 	push	{r4, r5, r6, lr}
   1d0f8:	e1a04000 	mov	r4, r0
   1d0fc:	e3a05000 	mov	r5, #0
   1d100:	e3a06001 	mov	r6, #1
   1d104:	e24dd008 	sub	sp, sp, #8
   1d108:	e58dc000 	str	ip, [sp]
   1d10c:	ebfffc70 	bl	1c2d4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1d110:	e59f30b0 	ldr	r3, [pc, #176]	; 1d1c8 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xd8>
   1d114:	e5c4602a 	strb	r6, [r4, #42]	; 0x2a
   1d118:	e5843000 	str	r3, [r4]
   1d11c:	e5c45029 	strb	r5, [r4, #41]	; 0x29
   1d120:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1d124:	e2840030 	add	r0, r4, #48	; 0x30
   1d128:	eb000c03 	bl	2013c <CNetQueue::CNetQueue()>
   1d12c:	e284003c 	add	r0, r4, #60	; 0x3c
   1d130:	eb000c01 	bl	2013c <CNetQueue::CNetQueue()>
   1d134:	e2840048 	add	r0, r4, #72	; 0x48
   1d138:	e3a01801 	mov	r1, #65536	; 0x10000
   1d13c:	eb0007c0 	bl	1f044 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1d140:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1d144:	e1a01005 	mov	r1, r5
   1d148:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1d14c:	e2840068 	add	r0, r4, #104	; 0x68
   1d150:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1d154:	e5845060 	str	r5, [r4, #96]	; 0x60
   1d158:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1d15c:	eb0018b0 	bl	23424 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1d160:	e1a01005 	mov	r1, r5
   1d164:	e2840070 	add	r0, r4, #112	; 0x70
   1d168:	eb0018ad 	bl	23424 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1d16c:	eb002f03 	bl	28d80 <CTimer::Get()>
   1d170:	e3a02f86 	mov	r2, #536	; 0x218
   1d174:	e59f3050 	ldr	r3, [pc, #80]	; 1d1cc <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xdc>
   1d178:	e5840078 	str	r0, [r4, #120]	; 0x78
   1d17c:	e1c42bb4 	strh	r2, [r4, #180]	; 0xb4
   1d180:	e5843094 	str	r3, [r4, #148]	; 0x94
   1d184:	e58430ac 	str	r3, [r4, #172]	; 0xac
   1d188:	e5846088 	str	r6, [r4, #136]	; 0x88
   1d18c:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   1d190:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1d194:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   1d198:	e28400b8 	add	r0, r4, #184	; 0xb8
   1d19c:	eb000893 	bl	1f3f0 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1d1a0:	e1a00004 	mov	r0, r4
   1d1a4:	e59f2024 	ldr	r2, [pc, #36]	; 1d1d0 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xe0>
   1d1a8:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1d1ac:	e5923000 	ldr	r3, [r2]
   1d1b0:	e5845080 	str	r5, [r4, #128]	; 0x80
   1d1b4:	e0833006 	add	r3, r3, r6
   1d1b8:	e5845084 	str	r5, [r4, #132]	; 0x84
   1d1bc:	e5823000 	str	r3, [r2]
   1d1c0:	e28dd008 	add	sp, sp, #8
   1d1c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d1c8:	00039650 	.word	0x00039650
   1d1cc:	00003908 	.word	0x00003908
   1d1d0:	0003e37c 	.word	0x0003e37c

0001d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>:
   1d1d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d1d8:	e2017c02 	and	r7, r1, #512	; 0x200
   1d1dc:	e3570000 	cmp	r7, #0
   1d1e0:	13a0e018 	movne	lr, #24
   1d1e4:	03a0e014 	moveq	lr, #20
   1d1e8:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1d1ec:	e24dd008 	sub	sp, sp, #8
   1d1f0:	e59dc664 	ldr	ip, [sp, #1636]	; 0x664
   1d1f4:	13a05006 	movne	r5, #6
   1d1f8:	03a05005 	moveq	r5, #5
   1d1fc:	e09c600e 	adds	r6, ip, lr
   1d200:	2a00003f 	bcs	1d304 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x130>
   1d204:	e1d081b6 	ldrh	r8, [r0, #22]
   1d208:	e1a04000 	mov	r4, r0
   1d20c:	e1d001b4 	ldrh	r0, [r0, #20]
   1d210:	e6bf2f32 	rev	r2, r2
   1d214:	e6bf8fb8 	rev16	r8, r8
   1d218:	e6bf0fb0 	rev16	r0, r0
   1d21c:	e58d200c 	str	r2, [sp, #12]
   1d220:	e2112a01 	ands	r2, r1, #4096	; 0x1000
   1d224:	e1cd80b8 	strh	r8, [sp, #8]
   1d228:	e1cd00ba 	strh	r0, [sp, #10]
   1d22c:	01a03002 	moveq	r3, r2
   1d230:	1a000031 	bne	1d2fc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x128>
   1d234:	e59400ac 	ldr	r0, [r4, #172]	; 0xac
   1d238:	e1d429b8 	ldrh	r2, [r4, #152]	; 0x98
   1d23c:	e1811205 	orr	r1, r1, r5, lsl #4
   1d240:	e6bf0fb0 	rev16	r0, r0
   1d244:	e6bf2fb2 	rev16	r2, r2
   1d248:	e3570000 	cmp	r7, #0
   1d24c:	e1cd11b4 	strh	r1, [sp, #20]
   1d250:	e58d3010 	str	r3, [sp, #16]
   1d254:	e1cd01b6 	strh	r0, [sp, #22]
   1d258:	e1cd21ba 	strh	r2, [sp, #26]
   1d25c:	1a00001d 	bne	1d2d8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x104>
   1d260:	e35c0000 	cmp	ip, #0
   1d264:	0a000007 	beq	1d288 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xb4>
   1d268:	e59d3660 	ldr	r3, [sp, #1632]	; 0x660
   1d26c:	e3530000 	cmp	r3, #0
   1d270:	0a00002b 	beq	1d324 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x150>
   1d274:	e28d3008 	add	r3, sp, #8
   1d278:	e1a0200c 	mov	r2, ip
   1d27c:	e083000e 	add	r0, r3, lr
   1d280:	e59d1660 	ldr	r1, [sp, #1632]	; 0x660
   1d284:	eb003141 	bl	29790 <memcpy>
   1d288:	e3a03000 	mov	r3, #0
   1d28c:	e1a02006 	mov	r2, r6
   1d290:	e28d1008 	add	r1, sp, #8
   1d294:	e284001c 	add	r0, r4, #28
   1d298:	e1cd31b8 	strh	r3, [sp, #24]
   1d29c:	eb000cbf 	bl	205a0 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d2a0:	e594c008 	ldr	ip, [r4, #8]
   1d2a4:	e1cd01b8 	strh	r0, [sp, #24]
   1d2a8:	e35c0000 	cmp	ip, #0
   1d2ac:	0a000018 	beq	1d314 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x140>
   1d2b0:	e3a0e006 	mov	lr, #6
   1d2b4:	e1a03006 	mov	r3, r6
   1d2b8:	e28d2008 	add	r2, sp, #8
   1d2bc:	e284100c 	add	r1, r4, #12
   1d2c0:	e1a0000c 	mov	r0, ip
   1d2c4:	e58de000 	str	lr, [sp]
   1d2c8:	ebfff222 	bl	19b58 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d2cc:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1d2d0:	e28dd008 	add	sp, sp, #8
   1d2d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d2d8:	e3a00002 	mov	r0, #2
   1d2dc:	e3a01004 	mov	r1, #4
   1d2e0:	e3a02005 	mov	r2, #5
   1d2e4:	e3e0304b 	mvn	r3, #75	; 0x4b
   1d2e8:	e5cd001c 	strb	r0, [sp, #28]
   1d2ec:	e5cd101d 	strb	r1, [sp, #29]
   1d2f0:	e5cd201e 	strb	r2, [sp, #30]
   1d2f4:	e5cd301f 	strb	r3, [sp, #31]
   1d2f8:	eaffffd8 	b	1d260 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x8c>
   1d2fc:	e6bf3f33 	rev	r3, r3
   1d300:	eaffffcb 	b	1d234 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x60>
   1d304:	e59f2028 	ldr	r2, [pc, #40]	; 1d334 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x160>
   1d308:	e59f1028 	ldr	r1, [pc, #40]	; 1d338 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x164>
   1d30c:	e59f0028 	ldr	r0, [pc, #40]	; 1d33c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x168>
   1d310:	eb0018da 	bl	23680 <assertion_failed>
   1d314:	e59f2024 	ldr	r2, [pc, #36]	; 1d340 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x16c>
   1d318:	e59f1018 	ldr	r1, [pc, #24]	; 1d338 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x164>
   1d31c:	e59f0020 	ldr	r0, [pc, #32]	; 1d344 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x170>
   1d320:	eb0018d6 	bl	23680 <assertion_failed>
   1d324:	e59f201c 	ldr	r2, [pc, #28]	; 1d348 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x174>
   1d328:	e59f1008 	ldr	r1, [pc, #8]	; 1d338 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x164>
   1d32c:	e59f0018 	ldr	r0, [pc, #24]	; 1d34c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x178>
   1d330:	eb0018d2 	bl	23680 <assertion_failed>
   1d334:	00000557 	.word	0x00000557
   1d338:	000396bc 	.word	0x000396bc
   1d33c:	000396d0 	.word	0x000396d0
   1d340:	00000587 	.word	0x00000587
   1d344:	00038f3c 	.word	0x00038f3c
   1d348:	00000571 	.word	0x00000571
   1d34c:	00038fa4 	.word	0x00038fa4

0001d350 <CTCPConnection::ScanOptions(TTCPHeader*)>:
   1d350:	e3510000 	cmp	r1, #0
   1d354:	e92d4010 	push	{r4, lr}
   1d358:	0a000021 	beq	1d3e4 <CTCPConnection::ScanOptions(TTCPHeader*)+0x94>
   1d35c:	e5d1300c 	ldrb	r3, [r1, #12]
   1d360:	e59fe08c 	ldr	lr, [pc, #140]	; 1d3f4 <CTCPConnection::ScanOptions(TTCPHeader*)+0xa4>
   1d364:	e1a03223 	lsr	r3, r3, #4
   1d368:	e0813103 	add	r3, r1, r3, lsl #2
   1d36c:	e2811014 	add	r1, r1, #20
   1d370:	e2812002 	add	r2, r1, #2
   1d374:	e1530002 	cmp	r3, r2
   1d378:	38bd8010 	popcc	{r4, pc}
   1d37c:	e5d12000 	ldrb	r2, [r1]
   1d380:	e3520001 	cmp	r2, #1
   1d384:	0a000007 	beq	1d3a8 <CTCPConnection::ScanOptions(TTCPHeader*)+0x58>
   1d388:	38bd8010 	popcc	{r4, pc}
   1d38c:	e3520002 	cmp	r2, #2
   1d390:	e5d12001 	ldrb	r2, [r1, #1]
   1d394:	1a000001 	bne	1d3a0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1d398:	e3520004 	cmp	r2, #4
   1d39c:	0a000003 	beq	1d3b0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x60>
   1d3a0:	e0811002 	add	r1, r1, r2
   1d3a4:	eafffff1 	b	1d370 <CTCPConnection::ScanOptions(TTCPHeader*)+0x20>
   1d3a8:	e2811001 	add	r1, r1, #1
   1d3ac:	eaffffef 	b	1d370 <CTCPConnection::ScanOptions(TTCPHeader*)+0x20>
   1d3b0:	e281c004 	add	ip, r1, #4
   1d3b4:	e153000c 	cmp	r3, ip
   1d3b8:	3afffff8 	bcc	1d3a0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1d3bc:	e5d14002 	ldrb	r4, [r1, #2]
   1d3c0:	e5d1c003 	ldrb	ip, [r1, #3]
   1d3c4:	e18cc404 	orr	ip, ip, r4, lsl #8
   1d3c8:	e28cc014 	add	ip, ip, #20
   1d3cc:	e15c000e 	cmp	ip, lr
   1d3d0:	21a0c00e 	movcs	ip, lr
   1d3d4:	e24cc014 	sub	ip, ip, #20
   1d3d8:	e35c0009 	cmp	ip, #9
   1d3dc:	81c0cbb4 	strhhi	ip, [r0, #180]	; 0xb4
   1d3e0:	eaffffee 	b	1d3a0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1d3e4:	e59f200c 	ldr	r2, [pc, #12]	; 1d3f8 <CTCPConnection::ScanOptions(TTCPHeader*)+0xa8>
   1d3e8:	e59f100c 	ldr	r1, [pc, #12]	; 1d3fc <CTCPConnection::ScanOptions(TTCPHeader*)+0xac>
   1d3ec:	e59f000c 	ldr	r0, [pc, #12]	; 1d400 <CTCPConnection::ScanOptions(TTCPHeader*)+0xb0>
   1d3f0:	eb0018a2 	bl	23680 <assertion_failed>
   1d3f4:	000005c8 	.word	0x000005c8
   1d3f8:	0000058d 	.word	0x0000058d
   1d3fc:	000396bc 	.word	0x000396bc
   1d400:	000396f0 	.word	0x000396f0

0001d404 <CTCPConnection::CalculateISN()>:
   1d404:	e92d4070 	push	{r4, r5, r6, lr}
   1d408:	e1a05000 	mov	r5, r0
   1d40c:	e5900078 	ldr	r0, [r0, #120]	; 0x78
   1d410:	e3500000 	cmp	r0, #0
   1d414:	0a00000d 	beq	1d450 <CTCPConnection::CalculateISN()+0x4c>
   1d418:	eb002ba6 	bl	282b8 <CTimer::GetTime() const>
   1d41c:	e1a04000 	mov	r4, r0
   1d420:	e5950078 	ldr	r0, [r5, #120]	; 0x78
   1d424:	eb002b9f 	bl	282a8 <CTimer::GetTicks() const>
   1d428:	e3a02064 	mov	r2, #100	; 0x64
   1d42c:	e59f302c 	ldr	r3, [pc, #44]	; 1d460 <CTCPConnection::CalculateISN()+0x5c>
   1d430:	e0831093 	umull	r1, r3, r3, r0
   1d434:	e1a032a3 	lsr	r3, r3, #5
   1d438:	e0030392 	mul	r3, r2, r3
   1d43c:	e0400003 	sub	r0, r0, r3
   1d440:	e0200492 	mla	r0, r2, r4, r0
   1d444:	e0800080 	add	r0, r0, r0, lsl #1
   1d448:	e0600180 	rsb	r0, r0, r0, lsl #3
   1d44c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d450:	e59f200c 	ldr	r2, [pc, #12]	; 1d464 <CTCPConnection::CalculateISN()+0x60>
   1d454:	e59f100c 	ldr	r1, [pc, #12]	; 1d468 <CTCPConnection::CalculateISN()+0x64>
   1d458:	e59f000c 	ldr	r0, [pc, #12]	; 1d46c <CTCPConnection::CalculateISN()+0x68>
   1d45c:	eb001887 	bl	23680 <assertion_failed>
   1d460:	51eb851f 	.word	0x51eb851f
   1d464:	000005b6 	.word	0x000005b6
   1d468:	000396bc 	.word	0x000396bc
   1d46c:	000346bc 	.word	0x000346bc

0001d470 <CTCPConnection::StopTimer(unsigned int)>:
   1d470:	e3510002 	cmp	r1, #2
   1d474:	e92d4070 	push	{r4, r5, r6, lr}
   1d478:	8a00001c 	bhi	1d4f0 <CTCPConnection::StopTimer(unsigned int)+0x80>
   1d47c:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1d480:	e1a05000 	mov	r5, r0
   1d484:	e3530000 	cmp	r3, #0
   1d488:	0a00001c 	beq	1d500 <CTCPConnection::StopTimer(unsigned int)+0x90>
   1d48c:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   1d490:	e281401e 	add	r4, r1, #30
   1d494:	e3500000 	cmp	r0, #0
   1d498:	1a000004 	bne	1d4b0 <CTCPConnection::StopTimer(unsigned int)+0x40>
   1d49c:	e0852104 	add	r2, r5, r4, lsl #2
   1d4a0:	e5921004 	ldr	r1, [r2, #4]
   1d4a4:	e3510000 	cmp	r1, #0
   1d4a8:	1a000006 	bne	1d4c8 <CTCPConnection::StopTimer(unsigned int)+0x58>
   1d4ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d4b0:	eb0035c1 	bl	2abbc <EnterCritical>
   1d4b4:	e0853104 	add	r3, r5, r4, lsl #2
   1d4b8:	e5931004 	ldr	r1, [r3, #4]
   1d4bc:	e3510000 	cmp	r1, #0
   1d4c0:	0a000005 	beq	1d4dc <CTCPConnection::StopTimer(unsigned int)+0x6c>
   1d4c4:	e5953078 	ldr	r3, [r5, #120]	; 0x78
   1d4c8:	e1a00003 	mov	r0, r3
   1d4cc:	eb002cba 	bl	287bc <CTimer::CancelKernelTimer(unsigned int)>
   1d4d0:	e3a03000 	mov	r3, #0
   1d4d4:	e0851104 	add	r1, r5, r4, lsl #2
   1d4d8:	e5813004 	str	r3, [r1, #4]
   1d4dc:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1d4e0:	e3530000 	cmp	r3, #0
   1d4e4:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d4e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d4ec:	ea0035dd 	b	2ac68 <LeaveCritical>
   1d4f0:	e59f2018 	ldr	r2, [pc, #24]	; 1d510 <CTCPConnection::StopTimer(unsigned int)+0xa0>
   1d4f4:	e59f1018 	ldr	r1, [pc, #24]	; 1d514 <CTCPConnection::StopTimer(unsigned int)+0xa4>
   1d4f8:	e59f0018 	ldr	r0, [pc, #24]	; 1d518 <CTCPConnection::StopTimer(unsigned int)+0xa8>
   1d4fc:	eb00185f 	bl	23680 <assertion_failed>
   1d500:	e59f2014 	ldr	r2, [pc, #20]	; 1d51c <CTCPConnection::StopTimer(unsigned int)+0xac>
   1d504:	e59f1008 	ldr	r1, [pc, #8]	; 1d514 <CTCPConnection::StopTimer(unsigned int)+0xa4>
   1d508:	e59f0010 	ldr	r0, [pc, #16]	; 1d520 <CTCPConnection::StopTimer(unsigned int)+0xb0>
   1d50c:	eb00185b 	bl	23680 <assertion_failed>
   1d510:	000005c9 	.word	0x000005c9
   1d514:	000396bc 	.word	0x000396bc
   1d518:	00039700 	.word	0x00039700
   1d51c:	000005ca 	.word	0x000005ca
   1d520:	000346bc 	.word	0x000346bc

0001d524 <CTCPConnection::~CTCPConnection()>:
   1d524:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1d528:	e59f30bc 	ldr	r3, [pc, #188]	; 1d5ec <CTCPConnection::~CTCPConnection()+0xc8>
   1d52c:	e21110ff 	ands	r1, r1, #255	; 0xff
   1d530:	e92d4070 	push	{r4, r5, r6, lr}
   1d534:	e5803000 	str	r3, [r0]
   1d538:	1a000023 	bne	1d5cc <CTCPConnection::~CTCPConnection()+0xa8>
   1d53c:	e1a04000 	mov	r4, r0
   1d540:	ebffffca 	bl	1d470 <CTCPConnection::StopTimer(unsigned int)>
   1d544:	e3a01001 	mov	r1, #1
   1d548:	e1a00004 	mov	r0, r4
   1d54c:	ebffffc7 	bl	1d470 <CTCPConnection::StopTimer(unsigned int)>
   1d550:	e2845068 	add	r5, r4, #104	; 0x68
   1d554:	e3a01002 	mov	r1, #2
   1d558:	e1a00004 	mov	r0, r4
   1d55c:	ebffffc3 	bl	1d470 <CTCPConnection::StopTimer(unsigned int)>
   1d560:	e2846070 	add	r6, r4, #112	; 0x70
   1d564:	e1a00005 	mov	r0, r5
   1d568:	eb0017c1 	bl	23474 <CSynchronizationEvent::Set()>
   1d56c:	e1a00006 	mov	r0, r6
   1d570:	eb0017bf 	bl	23474 <CSynchronizationEvent::Set()>
   1d574:	e59f2074 	ldr	r2, [pc, #116]	; 1d5f0 <CTCPConnection::~CTCPConnection()+0xcc>
   1d578:	e5923000 	ldr	r3, [r2]
   1d57c:	e3530000 	cmp	r3, #0
   1d580:	0a000015 	beq	1d5dc <CTCPConnection::~CTCPConnection()+0xb8>
   1d584:	e2433001 	sub	r3, r3, #1
   1d588:	e28400b8 	add	r0, r4, #184	; 0xb8
   1d58c:	e5823000 	str	r3, [r2]
   1d590:	eb0007ad 	bl	1f44c <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>
   1d594:	e1a00006 	mov	r0, r6
   1d598:	eb0017a5 	bl	23434 <CSynchronizationEvent::~CSynchronizationEvent()>
   1d59c:	e1a00005 	mov	r0, r5
   1d5a0:	eb0017a3 	bl	23434 <CSynchronizationEvent::~CSynchronizationEvent()>
   1d5a4:	e2840048 	add	r0, r4, #72	; 0x48
   1d5a8:	eb0006b9 	bl	1f094 <CRetransmissionQueue::~CRetransmissionQueue()>
   1d5ac:	e284003c 	add	r0, r4, #60	; 0x3c
   1d5b0:	eb000b1b 	bl	20224 <CNetQueue::~CNetQueue()>
   1d5b4:	e2840030 	add	r0, r4, #48	; 0x30
   1d5b8:	eb000b19 	bl	20224 <CNetQueue::~CNetQueue()>
   1d5bc:	e1a00004 	mov	r0, r4
   1d5c0:	ebfffb69 	bl	1c36c <CNetConnection::~CNetConnection()>
   1d5c4:	e1a00004 	mov	r0, r4
   1d5c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d5cc:	e3a020d1 	mov	r2, #209	; 0xd1
   1d5d0:	e59f101c 	ldr	r1, [pc, #28]	; 1d5f4 <CTCPConnection::~CTCPConnection()+0xd0>
   1d5d4:	e59f001c 	ldr	r0, [pc, #28]	; 1d5f8 <CTCPConnection::~CTCPConnection()+0xd4>
   1d5d8:	eb001828 	bl	23680 <assertion_failed>
   1d5dc:	e3a020dc 	mov	r2, #220	; 0xdc
   1d5e0:	e59f100c 	ldr	r1, [pc, #12]	; 1d5f4 <CTCPConnection::~CTCPConnection()+0xd0>
   1d5e4:	e59f0010 	ldr	r0, [pc, #16]	; 1d5fc <CTCPConnection::~CTCPConnection()+0xd8>
   1d5e8:	eb001824 	bl	23680 <assertion_failed>
   1d5ec:	00039650 	.word	0x00039650
   1d5f0:	0003e37c 	.word	0x0003e37c
   1d5f4:	000396bc 	.word	0x000396bc
   1d5f8:	0003971c 	.word	0x0003971c
   1d5fc:	00039738 	.word	0x00039738

0001d600 <CTCPConnection::~CTCPConnection()>:
   1d600:	e92d4010 	push	{r4, lr}
   1d604:	e1a04000 	mov	r4, r0
   1d608:	ebffffc5 	bl	1d524 <CTCPConnection::~CTCPConnection()>
   1d60c:	e1a00004 	mov	r0, r4
   1d610:	e3a010e0 	mov	r1, #224	; 0xe0
   1d614:	eb003244 	bl	29f2c <operator delete(void*, unsigned int)>
   1d618:	e1a00004 	mov	r0, r4
   1d61c:	e8bd8010 	pop	{r4, pc}

0001d620 <CTCPConnection::Close()>:
   1d620:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1d624:	e3530000 	cmp	r3, #0
   1d628:	ba000036 	blt	1d708 <CTCPConnection::Close()+0xe8>
   1d62c:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1d630:	e92d4010 	push	{r4, lr}
   1d634:	e1a04000 	mov	r4, r0
   1d638:	e353000a 	cmp	r3, #10
   1d63c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1d640:	ea000013 	b	1d694 <CTCPConnection::Close()+0x74>
   1d644:	0001d6b0 	.word	0x0001d6b0
   1d648:	0001d6b8 	.word	0x0001d6b8
   1d64c:	0001d6b8 	.word	0x0001d6b8
   1d650:	0001d6d8 	.word	0x0001d6d8
   1d654:	0001d6d8 	.word	0x0001d6d8
   1d658:	0001d694 	.word	0x0001d694
   1d65c:	0001d694 	.word	0x0001d694
   1d660:	0001d670 	.word	0x0001d670
   1d664:	0001d6b0 	.word	0x0001d6b0
   1d668:	0001d6b0 	.word	0x0001d6b0
   1d66c:	0001d6b0 	.word	0x0001d6b0
   1d670:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1d674:	e3530000 	cmp	r3, #0
   1d678:	1a000028 	bne	1d720 <CTCPConnection::Close()+0x100>
   1d67c:	e3a01005 	mov	r1, #5
   1d680:	e3a02009 	mov	r2, #9
   1d684:	e3a03001 	mov	r3, #1
   1d688:	e5801060 	str	r1, [r0, #96]	; 0x60
   1d68c:	e5c0205f 	strb	r2, [r0, #95]	; 0x5f
   1d690:	e5c0305e 	strb	r3, [r0, #94]	; 0x5e
   1d694:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1d698:	e3530000 	cmp	r3, #0
   1d69c:	ba000001 	blt	1d6a8 <CTCPConnection::Close()+0x88>
   1d6a0:	e3a00000 	mov	r0, #0
   1d6a4:	e8bd8010 	pop	{r4, pc}
   1d6a8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1d6ac:	e8bd8010 	pop	{r4, pc}
   1d6b0:	e3e00000 	mvn	r0, #0
   1d6b4:	e8bd8010 	pop	{r4, pc}
   1d6b8:	e3a01001 	mov	r1, #1
   1d6bc:	ebffff6b 	bl	1d470 <CTCPConnection::StopTimer(unsigned int)>
   1d6c0:	e3a03000 	mov	r3, #0
   1d6c4:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1d6c8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1d6cc:	e3530000 	cmp	r3, #0
   1d6d0:	aafffff2 	bge	1d6a0 <CTCPConnection::Close()+0x80>
   1d6d4:	eafffff3 	b	1d6a8 <CTCPConnection::Close()+0x88>
   1d6d8:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1d6dc:	e3530000 	cmp	r3, #0
   1d6e0:	1a00000a 	bne	1d710 <CTCPConnection::Close()+0xf0>
   1d6e4:	e3a03005 	mov	r3, #5
   1d6e8:	e3a02001 	mov	r2, #1
   1d6ec:	e5803060 	str	r3, [r0, #96]	; 0x60
   1d6f0:	e5c0205e 	strb	r2, [r0, #94]	; 0x5e
   1d6f4:	e5c0305f 	strb	r3, [r0, #95]	; 0x5f
   1d6f8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1d6fc:	e3530000 	cmp	r3, #0
   1d700:	aaffffe6 	bge	1d6a0 <CTCPConnection::Close()+0x80>
   1d704:	eaffffe7 	b	1d6a8 <CTCPConnection::Close()+0x88>
   1d708:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1d70c:	e12fff1e 	bx	lr
   1d710:	e3a02d05 	mov	r2, #320	; 0x140
   1d714:	e59f1014 	ldr	r1, [pc, #20]	; 1d730 <CTCPConnection::Close()+0x110>
   1d718:	e59f0014 	ldr	r0, [pc, #20]	; 1d734 <CTCPConnection::Close()+0x114>
   1d71c:	eb0017d7 	bl	23680 <assertion_failed>
   1d720:	e59f2010 	ldr	r2, [pc, #16]	; 1d738 <CTCPConnection::Close()+0x118>
   1d724:	e59f1004 	ldr	r1, [pc, #4]	; 1d730 <CTCPConnection::Close()+0x110>
   1d728:	e59f0004 	ldr	r0, [pc, #4]	; 1d734 <CTCPConnection::Close()+0x114>
   1d72c:	eb0017d3 	bl	23680 <assertion_failed>
   1d730:	000396bc 	.word	0x000396bc
   1d734:	0003974c 	.word	0x0003974c
   1d738:	0000014b 	.word	0x0000014b

0001d73c <CTCPConnection::StartTimer(unsigned int, unsigned int)>:
   1d73c:	e92d4070 	push	{r4, r5, r6, lr}
   1d740:	e3510002 	cmp	r1, #2
   1d744:	e24dd008 	sub	sp, sp, #8
   1d748:	8a000012 	bhi	1d798 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x5c>
   1d74c:	e3520000 	cmp	r2, #0
   1d750:	e1a06002 	mov	r6, r2
   1d754:	0a000013 	beq	1d7a8 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x6c>
   1d758:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1d75c:	e1a04000 	mov	r4, r0
   1d760:	e3530000 	cmp	r3, #0
   1d764:	0a000013 	beq	1d7b8 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x7c>
   1d768:	e1a05001 	mov	r5, r1
   1d76c:	ebffff3f 	bl	1d470 <CTCPConnection::StopTimer(unsigned int)>
   1d770:	e5940078 	ldr	r0, [r4, #120]	; 0x78
   1d774:	e1a01006 	mov	r1, r6
   1d778:	e58d4000 	str	r4, [sp]
   1d77c:	e1a03005 	mov	r3, r5
   1d780:	e59f2040 	ldr	r2, [pc, #64]	; 1d7c8 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x8c>
   1d784:	eb002bbd 	bl	28680 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1d788:	e0844105 	add	r4, r4, r5, lsl #2
   1d78c:	e584007c 	str	r0, [r4, #124]	; 0x7c
   1d790:	e28dd008 	add	sp, sp, #8
   1d794:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d798:	e59f202c 	ldr	r2, [pc, #44]	; 1d7cc <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x90>
   1d79c:	e59f102c 	ldr	r1, [pc, #44]	; 1d7d0 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1d7a0:	e59f002c 	ldr	r0, [pc, #44]	; 1d7d4 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x98>
   1d7a4:	eb0017b5 	bl	23680 <assertion_failed>
   1d7a8:	e59f2028 	ldr	r2, [pc, #40]	; 1d7d8 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x9c>
   1d7ac:	e59f101c 	ldr	r1, [pc, #28]	; 1d7d0 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1d7b0:	e59f0024 	ldr	r0, [pc, #36]	; 1d7dc <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xa0>
   1d7b4:	eb0017b1 	bl	23680 <assertion_failed>
   1d7b8:	e3a02d17 	mov	r2, #1472	; 0x5c0
   1d7bc:	e59f100c 	ldr	r1, [pc, #12]	; 1d7d0 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1d7c0:	e59f0018 	ldr	r0, [pc, #24]	; 1d7e0 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xa4>
   1d7c4:	eb0017ad 	bl	23680 <assertion_failed>
   1d7c8:	0001eff4 	.word	0x0001eff4
   1d7cc:	000005be 	.word	0x000005be
   1d7d0:	000396bc 	.word	0x000396bc
   1d7d4:	00039700 	.word	0x00039700
   1d7d8:	000005bf 	.word	0x000005bf
   1d7dc:	0003975c 	.word	0x0003975c
   1d7e0:	000346bc 	.word	0x000346bc

0001d7e4 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1d7e4:	e3a0c006 	mov	ip, #6
   1d7e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1d7ec:	e1a04000 	mov	r4, r0
   1d7f0:	e3a05000 	mov	r5, #0
   1d7f4:	e3a06001 	mov	r6, #1
   1d7f8:	e24dd014 	sub	sp, sp, #20
   1d7fc:	e1dde2b8 	ldrh	lr, [sp, #40]	; 0x28
   1d800:	e58dc008 	str	ip, [sp, #8]
   1d804:	e1ddc2bc 	ldrh	ip, [sp, #44]	; 0x2c
   1d808:	e58de000 	str	lr, [sp]
   1d80c:	e58dc004 	str	ip, [sp, #4]
   1d810:	ebfffa83 	bl	1c224 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1d814:	e59f3134 	ldr	r3, [pc, #308]	; 1d950 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x16c>
   1d818:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1d81c:	e5843000 	str	r3, [r4]
   1d820:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1d824:	e5c46029 	strb	r6, [r4, #41]	; 0x29
   1d828:	e2840030 	add	r0, r4, #48	; 0x30
   1d82c:	eb000a42 	bl	2013c <CNetQueue::CNetQueue()>
   1d830:	e284003c 	add	r0, r4, #60	; 0x3c
   1d834:	eb000a40 	bl	2013c <CNetQueue::CNetQueue()>
   1d838:	e3a01801 	mov	r1, #65536	; 0x10000
   1d83c:	e2840048 	add	r0, r4, #72	; 0x48
   1d840:	eb0005ff 	bl	1f044 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1d844:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1d848:	e1a01005 	mov	r1, r5
   1d84c:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1d850:	e2840068 	add	r0, r4, #104	; 0x68
   1d854:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1d858:	e5845060 	str	r5, [r4, #96]	; 0x60
   1d85c:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1d860:	eb0016ef 	bl	23424 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1d864:	e1a01005 	mov	r1, r5
   1d868:	e2840070 	add	r0, r4, #112	; 0x70
   1d86c:	eb0016ec 	bl	23424 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1d870:	eb002d42 	bl	28d80 <CTimer::Get()>
   1d874:	e3a02f86 	mov	r2, #536	; 0x218
   1d878:	e59f30d4 	ldr	r3, [pc, #212]	; 1d954 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x170>
   1d87c:	e28470b8 	add	r7, r4, #184	; 0xb8
   1d880:	e5840078 	str	r0, [r4, #120]	; 0x78
   1d884:	e1c42bb4 	strh	r2, [r4, #180]	; 0xb4
   1d888:	e5843094 	str	r3, [r4, #148]	; 0x94
   1d88c:	e58430ac 	str	r3, [r4, #172]	; 0xac
   1d890:	e5846088 	str	r6, [r4, #136]	; 0x88
   1d894:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   1d898:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1d89c:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   1d8a0:	e1a00007 	mov	r0, r7
   1d8a4:	eb0006d1 	bl	1f3f0 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1d8a8:	e59f20a8 	ldr	r2, [pc, #168]	; 1d958 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x174>
   1d8ac:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1d8b0:	e5923000 	ldr	r3, [r2]
   1d8b4:	e5845080 	str	r5, [r4, #128]	; 0x80
   1d8b8:	e0833006 	add	r3, r3, r6
   1d8bc:	e5845084 	str	r5, [r4, #132]	; 0x84
   1d8c0:	e1a00004 	mov	r0, r4
   1d8c4:	e5823000 	str	r3, [r2]
   1d8c8:	ebfffecd 	bl	1d404 <CTCPConnection::CalculateISN()>
   1d8cc:	e1a01000 	mov	r1, r0
   1d8d0:	e1a00007 	mov	r0, r7
   1d8d4:	e58410a4 	str	r1, [r4, #164]	; 0xa4
   1d8d8:	eb0006de 	bl	1f458 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1d8dc:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1d8e0:	e1a03005 	mov	r3, r5
   1d8e4:	e0821006 	add	r1, r2, r6
   1d8e8:	e58d5004 	str	r5, [sp, #4]
   1d8ec:	e58d5000 	str	r5, [sp]
   1d8f0:	e1a00004 	mov	r0, r4
   1d8f4:	e5841090 	str	r1, [r4, #144]	; 0x90
   1d8f8:	e584208c 	str	r2, [r4, #140]	; 0x8c
   1d8fc:	e3a01c02 	mov	r1, #512	; 0x200
   1d900:	ebfffe33 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1d904:	e1500005 	cmp	r0, r5
   1d908:	0a00000d 	beq	1d944 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x160>
   1d90c:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1d910:	e1a02006 	mov	r2, r6
   1d914:	e1a00007 	mov	r0, r7
   1d918:	eb0006eb 	bl	1f4cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1d91c:	e3a02002 	mov	r2, #2
   1d920:	e3a03005 	mov	r3, #5
   1d924:	e5c4202a 	strb	r2, [r4, #42]	; 0x2a
   1d928:	e1a00007 	mov	r0, r7
   1d92c:	e5843060 	str	r3, [r4, #96]	; 0x60
   1d930:	eb0006c6 	bl	1f450 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1d934:	e1a01006 	mov	r1, r6
   1d938:	e1a02000 	mov	r2, r0
   1d93c:	e1a00004 	mov	r0, r4
   1d940:	ebffff7d 	bl	1d73c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1d944:	e1a00004 	mov	r0, r4
   1d948:	e28dd014 	add	sp, sp, #20
   1d94c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1d950:	00039650 	.word	0x00039650
   1d954:	00003908 	.word	0x00003908
   1d958:	0003e37c 	.word	0x0003e37c

0001d95c <CTCPConnection::Process()>:
   1d95c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d960:	e5d03064 	ldrb	r3, [r0, #100]	; 0x64
   1d964:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1d968:	e3530000 	cmp	r3, #0
   1d96c:	e24dd00c 	sub	sp, sp, #12
   1d970:	e1a05000 	mov	r5, r0
   1d974:	1a000085 	bne	1db90 <CTCPConnection::Process()+0x234>
   1d978:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1d97c:	e6ef3073 	uxtb	r3, r3
   1d980:	e353000a 	cmp	r3, #10
   1d984:	9a00001c 	bls	1d9fc <CTCPConnection::Process()+0xa0>
   1d988:	e2856048 	add	r6, r5, #72	; 0x48
   1d98c:	e3a07000 	mov	r7, #0
   1d990:	e59f42f0 	ldr	r4, [pc, #752]	; 1dc88 <CTCPConnection::Process()+0x32c>
   1d994:	e2858030 	add	r8, r5, #48	; 0x30
   1d998:	e1a00006 	mov	r0, r6
   1d99c:	eb0005c9 	bl	1f0c8 <CRetransmissionQueue::GetFreeSpace() const>
   1d9a0:	e1500004 	cmp	r0, r4
   1d9a4:	8a000065 	bhi	1db40 <CTCPConnection::Process()+0x1e4>
   1d9a8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1d9ac:	e3530004 	cmp	r3, #4
   1d9b0:	0a00007f 	beq	1dbb4 <CTCPConnection::Process()+0x258>
   1d9b4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1d9b8:	e3530007 	cmp	r3, #7
   1d9bc:	0a00007c 	beq	1dbb4 <CTCPConnection::Process()+0x258>
   1d9c0:	e5d5305c 	ldrb	r3, [r5, #92]	; 0x5c
   1d9c4:	e3530000 	cmp	r3, #0
   1d9c8:	1a000082 	bne	1dbd8 <CTCPConnection::Process()+0x27c>
   1d9cc:	e3a0aa01 	mov	sl, #4096	; 0x1000
   1d9d0:	e3a09001 	mov	r9, #1
   1d9d4:	e28d8008 	add	r8, sp, #8
   1d9d8:	e285b030 	add	fp, r5, #48	; 0x30
   1d9dc:	e28570b8 	add	r7, r5, #184	; 0xb8
   1d9e0:	e1a00006 	mov	r0, r6
   1d9e4:	eb000608 	bl	1f20c <CRetransmissionQueue::GetBytesAvailable() const>
   1d9e8:	e3500000 	cmp	r0, #0
   1d9ec:	1a000029 	bne	1da98 <CTCPConnection::Process()+0x13c>
   1d9f0:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1d9f4:	e28dd00c 	add	sp, sp, #12
   1d9f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9fc:	e3a07001 	mov	r7, #1
   1da00:	e59f4284 	ldr	r4, [pc, #644]	; 1dc8c <CTCPConnection::Process()+0x330>
   1da04:	e1a03317 	lsl	r3, r7, r3
   1da08:	e0044003 	and	r4, r4, r3
   1da0c:	e3540000 	cmp	r4, #0
   1da10:	1afffff6 	bne	1d9f0 <CTCPConnection::Process()+0x94>
   1da14:	e2131e3b 	ands	r1, r3, #944	; 0x3b0
   1da18:	1a000075 	bne	1dbf4 <CTCPConnection::Process()+0x298>
   1da1c:	e313000c 	tst	r3, #12
   1da20:	0affffd8 	beq	1d988 <CTCPConnection::Process()+0x2c>
   1da24:	e5d0305d 	ldrb	r3, [r0, #93]	; 0x5d
   1da28:	e3530000 	cmp	r3, #0
   1da2c:	0affffef 	beq	1d9f0 <CTCPConnection::Process()+0x94>
   1da30:	e5c0105d 	strb	r1, [r0, #93]	; 0x5d
   1da34:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1da38:	e28540b8 	add	r4, r5, #184	; 0xb8
   1da3c:	e3530002 	cmp	r3, #2
   1da40:	059020a4 	ldreq	r2, [r0, #164]	; 0xa4
   1da44:	159020a4 	ldrne	r2, [r0, #164]	; 0xa4
   1da48:	058d1004 	streq	r1, [sp, #4]
   1da4c:	058d1000 	streq	r1, [sp]
   1da50:	01a03001 	moveq	r3, r1
   1da54:	159030a8 	ldrne	r3, [r0, #168]	; 0xa8
   1da58:	03a01c02 	moveq	r1, #512	; 0x200
   1da5c:	158d1004 	strne	r1, [sp, #4]
   1da60:	158d1000 	strne	r1, [sp]
   1da64:	13a01c12 	movne	r1, #4608	; 0x1200
   1da68:	ebfffdd9 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1da6c:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1da70:	e1a00004 	mov	r0, r4
   1da74:	e3a02001 	mov	r2, #1
   1da78:	eb000693 	bl	1f4cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1da7c:	e1a00004 	mov	r0, r4
   1da80:	eb000672 	bl	1f450 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1da84:	e3a01001 	mov	r1, #1
   1da88:	e1a02000 	mov	r2, r0
   1da8c:	e1a00005 	mov	r0, r5
   1da90:	ebffff29 	bl	1d73c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1da94:	eaffffd5 	b	1d9f0 <CTCPConnection::Process()+0x94>
   1da98:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1da9c:	e5954094 	ldr	r4, [r5, #148]	; 0x94
   1daa0:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1daa4:	e0834004 	add	r4, r3, r4
   1daa8:	e0543002 	subs	r3, r4, r2
   1daac:	0affffcf 	beq	1d9f0 <CTCPConnection::Process()+0x94>
   1dab0:	e1d54bb4 	ldrh	r4, [r5, #180]	; 0xb4
   1dab4:	e1540003 	cmp	r4, r3
   1dab8:	21a04003 	movcs	r4, r3
   1dabc:	e1540000 	cmp	r4, r0
   1dac0:	21a04000 	movcs	r4, r0
   1dac4:	e3540d19 	cmp	r4, #1600	; 0x640
   1dac8:	8a00002c 	bhi	1db80 <CTCPConnection::Process()+0x224>
   1dacc:	e1a02004 	mov	r2, r4
   1dad0:	e1a01008 	mov	r1, r8
   1dad4:	e1a00006 	mov	r0, r6
   1dad8:	eb0005ea 	bl	1f288 <CRetransmissionQueue::Read(void*, unsigned int)>
   1dadc:	e1a00006 	mov	r0, r6
   1dae0:	eb000572 	bl	1f0b0 <CRetransmissionQueue::IsEmpty() const>
   1dae4:	e3500000 	cmp	r0, #0
   1dae8:	1a00001e 	bne	1db68 <CTCPConnection::Process()+0x20c>
   1daec:	e1a0100a 	mov	r1, sl
   1daf0:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1daf4:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1daf8:	e1a00005 	mov	r0, r5
   1dafc:	e58d4004 	str	r4, [sp, #4]
   1db00:	e58d8000 	str	r8, [sp]
   1db04:	ebfffdb2 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1db08:	e1a02004 	mov	r2, r4
   1db0c:	e5951090 	ldr	r1, [r5, #144]	; 0x90
   1db10:	e1a00007 	mov	r0, r7
   1db14:	eb00066c 	bl	1f4cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1db18:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1db1c:	e1a00007 	mov	r0, r7
   1db20:	e0834004 	add	r4, r3, r4
   1db24:	e5854090 	str	r4, [r5, #144]	; 0x90
   1db28:	eb000648 	bl	1f450 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1db2c:	e1a01009 	mov	r1, r9
   1db30:	e1a02000 	mov	r2, r0
   1db34:	e1a00005 	mov	r0, r5
   1db38:	ebfffeff 	bl	1d73c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1db3c:	eaffffa7 	b	1d9e0 <CTCPConnection::Process()+0x84>
   1db40:	e1a02007 	mov	r2, r7
   1db44:	e28d1008 	add	r1, sp, #8
   1db48:	e1a00008 	mov	r0, r8
   1db4c:	eb0009ff 	bl	20350 <CNetQueue::Dequeue(void*, void**)>
   1db50:	e2502000 	subs	r2, r0, #0
   1db54:	0affff93 	beq	1d9a8 <CTCPConnection::Process()+0x4c>
   1db58:	e28d1008 	add	r1, sp, #8
   1db5c:	e1a00006 	mov	r0, r6
   1db60:	eb000578 	bl	1f148 <CRetransmissionQueue::Write(void const*, unsigned int)>
   1db64:	eaffff8b 	b	1d998 <CTCPConnection::Process()+0x3c>
   1db68:	e1a0000b 	mov	r0, fp
   1db6c:	eb000977 	bl	20150 <CNetQueue::IsEmpty() const>
   1db70:	e3500000 	cmp	r0, #0
   1db74:	0affffdc 	beq	1daec <CTCPConnection::Process()+0x190>
   1db78:	e3a01b06 	mov	r1, #6144	; 0x1800
   1db7c:	eaffffdb 	b	1daf0 <CTCPConnection::Process()+0x194>
   1db80:	e59f2108 	ldr	r2, [pc, #264]	; 1dc90 <CTCPConnection::Process()+0x334>
   1db84:	e59f1108 	ldr	r1, [pc, #264]	; 1dc94 <CTCPConnection::Process()+0x338>
   1db88:	e59f0108 	ldr	r0, [pc, #264]	; 1dc98 <CTCPConnection::Process()+0x33c>
   1db8c:	eb0016bb 	bl	23680 <assertion_failed>
   1db90:	e3e02000 	mvn	r2, #0
   1db94:	e3a03000 	mov	r3, #0
   1db98:	e580202c 	str	r2, [r0, #44]	; 0x2c
   1db9c:	e2800068 	add	r0, r0, #104	; 0x68
   1dba0:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1dba4:	eb001632 	bl	23474 <CSynchronizationEvent::Set()>
   1dba8:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1dbac:	e28dd00c 	add	sp, sp, #12
   1dbb0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbb4:	e2850030 	add	r0, r5, #48	; 0x30
   1dbb8:	eb000964 	bl	20150 <CNetQueue::IsEmpty() const>
   1dbbc:	e3500000 	cmp	r0, #0
   1dbc0:	0affff7e 	beq	1d9c0 <CTCPConnection::Process()+0x64>
   1dbc4:	e2850070 	add	r0, r5, #112	; 0x70
   1dbc8:	eb001629 	bl	23474 <CSynchronizationEvent::Set()>
   1dbcc:	e5d5305c 	ldrb	r3, [r5, #92]	; 0x5c
   1dbd0:	e3530000 	cmp	r3, #0
   1dbd4:	0affff7c 	beq	1d9cc <CTCPConnection::Process()+0x70>
   1dbd8:	e3a03000 	mov	r3, #0
   1dbdc:	e1a00006 	mov	r0, r6
   1dbe0:	e5c5305c 	strb	r3, [r5, #92]	; 0x5c
   1dbe4:	eb0005f9 	bl	1f3d0 <CRetransmissionQueue::Reset()>
   1dbe8:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1dbec:	e5853090 	str	r3, [r5, #144]	; 0x90
   1dbf0:	eaffff75 	b	1d9cc <CTCPConnection::Process()+0x70>
   1dbf4:	e2806048 	add	r6, r0, #72	; 0x48
   1dbf8:	e1a00006 	mov	r0, r6
   1dbfc:	eb00052b 	bl	1f0b0 <CRetransmissionQueue::IsEmpty() const>
   1dc00:	e3500000 	cmp	r0, #0
   1dc04:	0affff60 	beq	1d98c <CTCPConnection::Process()+0x30>
   1dc08:	e2850030 	add	r0, r5, #48	; 0x30
   1dc0c:	eb00094f 	bl	20150 <CNetQueue::IsEmpty() const>
   1dc10:	e3500000 	cmp	r0, #0
   1dc14:	0affff5c 	beq	1d98c <CTCPConnection::Process()+0x30>
   1dc18:	e5d5305e 	ldrb	r3, [r5, #94]	; 0x5e
   1dc1c:	e3530000 	cmp	r3, #0
   1dc20:	0affff59 	beq	1d98c <CTCPConnection::Process()+0x30>
   1dc24:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1dc28:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1dc2c:	e28580b8 	add	r8, r5, #184	; 0xb8
   1dc30:	e58d4004 	str	r4, [sp, #4]
   1dc34:	e58d4000 	str	r4, [sp]
   1dc38:	e3a01c11 	mov	r1, #4352	; 0x1100
   1dc3c:	e1a00005 	mov	r0, r5
   1dc40:	ebfffd63 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1dc44:	e5951090 	ldr	r1, [r5, #144]	; 0x90
   1dc48:	e1a00008 	mov	r0, r8
   1dc4c:	e1a02007 	mov	r2, r7
   1dc50:	eb00061d 	bl	1f4cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1dc54:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1dc58:	e5d5205f 	ldrb	r2, [r5, #95]	; 0x5f
   1dc5c:	e2833001 	add	r3, r3, #1
   1dc60:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1dc64:	e1a00008 	mov	r0, r8
   1dc68:	e5853090 	str	r3, [r5, #144]	; 0x90
   1dc6c:	e5c5405e 	strb	r4, [r5, #94]	; 0x5e
   1dc70:	eb0005f6 	bl	1f450 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1dc74:	e1a01007 	mov	r1, r7
   1dc78:	e1a02000 	mov	r2, r0
   1dc7c:	e1a00005 	mov	r0, r5
   1dc80:	ebfffead 	bl	1d73c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1dc84:	eaffff40 	b	1d98c <CTCPConnection::Process()+0x30>
   1dc88:	0000063f 	.word	0x0000063f
   1dc8c:	00000443 	.word	0x00000443
   1dc90:	0000025b 	.word	0x0000025b
   1dc94:	000396bc 	.word	0x000396bc
   1dc98:	00036d90 	.word	0x00036d90

0001dc9c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1dc9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1dca0:	e59d1020 	ldr	r1, [sp, #32]
   1dca4:	e1dd61b8 	ldrh	r6, [sp, #24]
   1dca8:	e3510006 	cmp	r1, #6
   1dcac:	e1dd71bc 	ldrh	r7, [sp, #28]
   1dcb0:	0a000001 	beq	1dcbc <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x20>
   1dcb4:	e3a00000 	mov	r0, #0
   1dcb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1dcbc:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1dcc0:	e3510001 	cmp	r1, #1
   1dcc4:	dafffffa 	ble	1dcb4 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1dcc8:	e1a01002 	mov	r1, r2
   1dccc:	e1a04000 	mov	r4, r0
   1dcd0:	e280000c 	add	r0, r0, #12
   1dcd4:	e1a05003 	mov	r5, r3
   1dcd8:	eb0007fa 	bl	1fcc8 <CIPAddress::operator!=(CIPAddress const&) const>
   1dcdc:	e3500000 	cmp	r0, #0
   1dce0:	1afffff3 	bne	1dcb4 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1dce4:	e1d431b4 	ldrh	r3, [r4, #20]
   1dce8:	e1530006 	cmp	r3, r6
   1dcec:	1afffff0 	bne	1dcb4 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1dcf0:	e5940004 	ldr	r0, [r4, #4]
   1dcf4:	e3500000 	cmp	r0, #0
   1dcf8:	0a000017 	beq	1dd5c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xc0>
   1dcfc:	eb000766 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   1dd00:	e1a01000 	mov	r1, r0
   1dd04:	e1a00005 	mov	r0, r5
   1dd08:	eb0007ee 	bl	1fcc8 <CIPAddress::operator!=(CIPAddress const&) const>
   1dd0c:	e3500000 	cmp	r0, #0
   1dd10:	1affffe7 	bne	1dcb4 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1dd14:	e1d431b6 	ldrh	r3, [r4, #22]
   1dd18:	e1530007 	cmp	r3, r7
   1dd1c:	1affffe4 	bne	1dcb4 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1dd20:	e3e03000 	mvn	r3, #0
   1dd24:	e1a00004 	mov	r0, r4
   1dd28:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1dd2c:	e3a01001 	mov	r1, #1
   1dd30:	ebfffdce 	bl	1d470 <CTCPConnection::StopTimer(unsigned int)>
   1dd34:	e3a0300a 	mov	r3, #10
   1dd38:	e59f202c 	ldr	r2, [pc, #44]	; 1dd6c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd0>
   1dd3c:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1dd40:	e3a01002 	mov	r1, #2
   1dd44:	e1a00004 	mov	r0, r4
   1dd48:	ebfffe7b 	bl	1d73c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1dd4c:	e2840068 	add	r0, r4, #104	; 0x68
   1dd50:	eb0015c7 	bl	23474 <CSynchronizationEvent::Set()>
   1dd54:	e3a00001 	mov	r0, #1
   1dd58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1dd5c:	e59f200c 	ldr	r2, [pc, #12]	; 1dd70 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd4>
   1dd60:	e59f100c 	ldr	r1, [pc, #12]	; 1dd74 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd8>
   1dd64:	e59f000c 	ldr	r0, [pc, #12]	; 1dd78 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xdc>
   1dd68:	eb001644 	bl	23680 <assertion_failed>
   1dd6c:	00001770 	.word	0x00001770
   1dd70:	00000539 	.word	0x00000539
   1dd74:	000396bc 	.word	0x000396bc
   1dd78:	00038f28 	.word	0x00038f28

0001dd7c <CTCPConnection::DumpStatus()>:
   1dd7c:	e92d4070 	push	{r4, r5, r6, lr}
   1dd80:	e1a04000 	mov	r4, r0
   1dd84:	e24dd020 	sub	sp, sp, #32
   1dd88:	eb001f2f 	bl	25a4c <CLogger::Get()>
   1dd8c:	e594c0a4 	ldr	ip, [r4, #164]	; 0xa4
   1dd90:	e594e0b0 	ldr	lr, [r4, #176]	; 0xb0
   1dd94:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   1dd98:	e594208c 	ldr	r2, [r4, #140]	; 0x8c
   1dd9c:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1dda0:	e5d4602a 	ldrb	r6, [r4, #42]	; 0x2a
   1dda4:	e1d451b4 	ldrh	r5, [r4, #20]
   1dda8:	e041100c 	sub	r1, r1, ip
   1ddac:	e042200c 	sub	r2, r2, ip
   1ddb0:	e043300e 	sub	r3, r3, lr
   1ddb4:	e594c094 	ldr	ip, [r4, #148]	; 0x94
   1ddb8:	e594e0ac 	ldr	lr, [r4, #172]	; 0xac
   1ddbc:	e58d1008 	str	r1, [sp, #8]
   1ddc0:	e58d2004 	str	r2, [sp, #4]
   1ddc4:	e58d3010 	str	r3, [sp, #16]
   1ddc8:	e58d6000 	str	r6, [sp]
   1ddcc:	e58d5018 	str	r5, [sp, #24]
   1ddd0:	e58de014 	str	lr, [sp, #20]
   1ddd4:	e58dc00c 	str	ip, [sp, #12]
   1ddd8:	e59f3010 	ldr	r3, [pc, #16]	; 1ddf0 <CTCPConnection::DumpStatus()+0x74>
   1dddc:	e3a02004 	mov	r2, #4
   1dde0:	e59f100c 	ldr	r1, [pc, #12]	; 1ddf4 <CTCPConnection::DumpStatus()+0x78>
   1dde4:	eb001e55 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1dde8:	e28dd020 	add	sp, sp, #32
   1ddec:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ddf0:	00039764 	.word	0x00039764
   1ddf4:	0003968c 	.word	0x0003968c

0001ddf8 <CTCPConnection::NewState(TTCPState, unsigned int)>:
   1ddf8:	e92d4070 	push	{r4, r5, r6, lr}
   1ddfc:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1de00:	e24dd010 	sub	sp, sp, #16
   1de04:	e353000a 	cmp	r3, #10
   1de08:	8a000015 	bhi	1de64 <CTCPConnection::NewState(TTCPState, unsigned int)+0x6c>
   1de0c:	e351000a 	cmp	r1, #10
   1de10:	e1a04001 	mov	r4, r1
   1de14:	8a000016 	bhi	1de74 <CTCPConnection::NewState(TTCPState, unsigned int)+0x7c>
   1de18:	e1a05000 	mov	r5, r0
   1de1c:	e1a06002 	mov	r6, r2
   1de20:	eb001f09 	bl	25a4c <CLogger::Get()>
   1de24:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1de28:	e59f1054 	ldr	r1, [pc, #84]	; 1de84 <CTCPConnection::NewState(TTCPState, unsigned int)+0x8c>
   1de2c:	e58d6008 	str	r6, [sp, #8]
   1de30:	e081c104 	add	ip, r1, r4, lsl #2
   1de34:	e0813103 	add	r3, r1, r3, lsl #2
   1de38:	e5932048 	ldr	r2, [r3, #72]	; 0x48
   1de3c:	e59c3048 	ldr	r3, [ip, #72]	; 0x48
   1de40:	e2811044 	add	r1, r1, #68	; 0x44
   1de44:	e88d000c 	stm	sp, {r2, r3}
   1de48:	e59f3038 	ldr	r3, [pc, #56]	; 1de88 <CTCPConnection::NewState(TTCPState, unsigned int)+0x90>
   1de4c:	e3a02004 	mov	r2, #4
   1de50:	eb001e3a 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1de54:	e1a00004 	mov	r0, r4
   1de58:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1de5c:	e28dd010 	add	sp, sp, #16
   1de60:	e8bd8070 	pop	{r4, r5, r6, pc}
   1de64:	e59f2020 	ldr	r2, [pc, #32]	; 1de8c <CTCPConnection::NewState(TTCPState, unsigned int)+0x94>
   1de68:	e59f1020 	ldr	r1, [pc, #32]	; 1de90 <CTCPConnection::NewState(TTCPState, unsigned int)+0x98>
   1de6c:	e59f0020 	ldr	r0, [pc, #32]	; 1de94 <CTCPConnection::NewState(TTCPState, unsigned int)+0x9c>
   1de70:	eb001602 	bl	23680 <assertion_failed>
   1de74:	e59f201c 	ldr	r2, [pc, #28]	; 1de98 <CTCPConnection::NewState(TTCPState, unsigned int)+0xa0>
   1de78:	e59f1010 	ldr	r1, [pc, #16]	; 1de90 <CTCPConnection::NewState(TTCPState, unsigned int)+0x98>
   1de7c:	e59f0018 	ldr	r0, [pc, #24]	; 1de9c <CTCPConnection::NewState(TTCPState, unsigned int)+0xa4>
   1de80:	eb0015fe 	bl	23680 <assertion_failed>
   1de84:	00039648 	.word	0x00039648
   1de88:	00039800 	.word	0x00039800
   1de8c:	00000647 	.word	0x00000647
   1de90:	000396bc 	.word	0x000396bc
   1de94:	0003979c 	.word	0x0003979c
   1de98:	00000648 	.word	0x00000648
   1de9c:	000397d0 	.word	0x000397d0

0001dea0 <CTCPConnection::UnexpectedState(unsigned int)>:
   1dea0:	e92d4030 	push	{r4, r5, lr}
   1dea4:	e1a05000 	mov	r5, r0
   1dea8:	e1a04001 	mov	r4, r1
   1deac:	e24dd00c 	sub	sp, sp, #12
   1deb0:	ebffffb1 	bl	1dd7c <CTCPConnection::DumpStatus()>
   1deb4:	eb001ee4 	bl	25a4c <CLogger::Get()>
   1deb8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1debc:	e3a02000 	mov	r2, #0
   1dec0:	e88d0018 	stm	sp, {r3, r4}
   1dec4:	e59f100c 	ldr	r1, [pc, #12]	; 1ded8 <CTCPConnection::UnexpectedState(unsigned int)+0x38>
   1dec8:	e59f300c 	ldr	r3, [pc, #12]	; 1dedc <CTCPConnection::UnexpectedState(unsigned int)+0x3c>
   1decc:	eb001e1b 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ded0:	e28dd00c 	add	sp, sp, #12
   1ded4:	e8bd8030 	pop	{r4, r5, pc}
   1ded8:	0003968c 	.word	0x0003968c
   1dedc:	0003981c 	.word	0x0003981c

0001dee0 <CTCPConnection::Connect()>:
   1dee0:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   1dee4:	e92d4070 	push	{r4, r5, r6, lr}
   1dee8:	e3520000 	cmp	r2, #0
   1deec:	e1a04000 	mov	r4, r0
   1def0:	ba00000d 	blt	1df2c <CTCPConnection::Connect()+0x4c>
   1def4:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1def8:	e6ef3073 	uxtb	r3, r3
   1defc:	e353000a 	cmp	r3, #10
   1df00:	8a000009 	bhi	1df2c <CTCPConnection::Connect()+0x4c>
   1df04:	e3a02001 	mov	r2, #1
   1df08:	e59f1058 	ldr	r1, [pc, #88]	; 1df68 <CTCPConnection::Connect()+0x88>
   1df0c:	e1a02312 	lsl	r2, r2, r3
   1df10:	e0011002 	and	r1, r1, r2
   1df14:	e3510000 	cmp	r1, #0
   1df18:	1a00000e 	bne	1df58 <CTCPConnection::Connect()+0x78>
   1df1c:	e3530000 	cmp	r3, #0
   1df20:	0a00000a 	beq	1df50 <CTCPConnection::Connect()+0x70>
   1df24:	e312000c 	tst	r2, #12
   1df28:	1a000001 	bne	1df34 <CTCPConnection::Connect()+0x54>
   1df2c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1df30:	e8bd8070 	pop	{r4, r5, r6, pc}
   1df34:	e2805068 	add	r5, r0, #104	; 0x68
   1df38:	e1a00005 	mov	r0, r5
   1df3c:	eb001549 	bl	23468 <CSynchronizationEvent::Clear()>
   1df40:	e1a00005 	mov	r0, r5
   1df44:	eb001558 	bl	234ac <CSynchronizationEvent::Wait()>
   1df48:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1df4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1df50:	e3e00000 	mvn	r0, #0
   1df54:	e8bd8070 	pop	{r4, r5, r6, pc}
   1df58:	e3a010f9 	mov	r1, #249	; 0xf9
   1df5c:	ebffffcf 	bl	1dea0 <CTCPConnection::UnexpectedState(unsigned int)>
   1df60:	e3e00000 	mvn	r0, #0
   1df64:	e8bd8070 	pop	{r4, r5, r6, pc}
   1df68:	000007e2 	.word	0x000007e2

0001df6c <CTCPConnection::Accept(CIPAddress*, unsigned short*)>:
   1df6c:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1df70:	e3530000 	cmp	r3, #0
   1df74:	ba000028 	blt	1e01c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xb0>
   1df78:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1df7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1df80:	e1a06002 	mov	r6, r2
   1df84:	e1a05001 	mov	r5, r1
   1df88:	e1a04000 	mov	r4, r0
   1df8c:	e353000a 	cmp	r3, #10
   1df90:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1df94:	ea000015 	b	1dff0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x84>
   1df98:	0001dfc4 	.word	0x0001dfc4
   1df9c:	0001dfdc 	.word	0x0001dfdc
   1dfa0:	0001dfcc 	.word	0x0001dfcc
   1dfa4:	0001dff0 	.word	0x0001dff0
   1dfa8:	0001dff0 	.word	0x0001dff0
   1dfac:	0001dfc4 	.word	0x0001dfc4
   1dfb0:	0001dfc4 	.word	0x0001dfc4
   1dfb4:	0001dfc4 	.word	0x0001dfc4
   1dfb8:	0001dfc4 	.word	0x0001dfc4
   1dfbc:	0001dfc4 	.word	0x0001dfc4
   1dfc0:	0001dfc4 	.word	0x0001dfc4
   1dfc4:	e3e00000 	mvn	r0, #0
   1dfc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1dfcc:	e59f1070 	ldr	r1, [pc, #112]	; 1e044 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xd8>
   1dfd0:	ebffffb2 	bl	1dea0 <CTCPConnection::UnexpectedState(unsigned int)>
   1dfd4:	e3e00000 	mvn	r0, #0
   1dfd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1dfdc:	e2807068 	add	r7, r0, #104	; 0x68
   1dfe0:	e1a00007 	mov	r0, r7
   1dfe4:	eb00151f 	bl	23468 <CSynchronizationEvent::Clear()>
   1dfe8:	e1a00007 	mov	r0, r7
   1dfec:	eb00152e 	bl	234ac <CSynchronizationEvent::Wait()>
   1dff0:	e3550000 	cmp	r5, #0
   1dff4:	0a00000a 	beq	1e024 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xb8>
   1dff8:	e1a00005 	mov	r0, r5
   1dffc:	e284100c 	add	r1, r4, #12
   1e000:	eb00079d 	bl	1fe7c <CIPAddress::Set(CIPAddress const&)>
   1e004:	e3560000 	cmp	r6, #0
   1e008:	0a000009 	beq	1e034 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xc8>
   1e00c:	e1d431b4 	ldrh	r3, [r4, #20]
   1e010:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e014:	e1c630b0 	strh	r3, [r6]
   1e018:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e01c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e020:	e12fff1e 	bx	lr
   1e024:	e59f201c 	ldr	r2, [pc, #28]	; 1e048 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xdc>
   1e028:	e59f101c 	ldr	r1, [pc, #28]	; 1e04c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe0>
   1e02c:	e59f001c 	ldr	r0, [pc, #28]	; 1e050 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe4>
   1e030:	eb001592 	bl	23680 <assertion_failed>
   1e034:	e59f2018 	ldr	r2, [pc, #24]	; 1e054 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe8>
   1e038:	e59f100c 	ldr	r1, [pc, #12]	; 1e04c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe0>
   1e03c:	e59f0014 	ldr	r0, [pc, #20]	; 1e058 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xec>
   1e040:	eb00158e 	bl	23680 <assertion_failed>
   1e044:	0000010d 	.word	0x0000010d
   1e048:	00000123 	.word	0x00000123
   1e04c:	000396bc 	.word	0x000396bc
   1e050:	00038f80 	.word	0x00038f80
   1e054:	00000126 	.word	0x00000126
   1e058:	00038f90 	.word	0x00038f90

0001e05c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1e05c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e060:	e24dd024 	sub	sp, sp, #36	; 0x24
   1e064:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   1e068:	e35c0006 	cmp	ip, #6
   1e06c:	0a000002 	beq	1e07c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x20>
   1e070:	e3a00000 	mov	r0, #0
   1e074:	e28dd024 	add	sp, sp, #36	; 0x24
   1e078:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e07c:	e3520013 	cmp	r2, #19
   1e080:	9a0000e5 	bls	1e41c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3c0>
   1e084:	e3510000 	cmp	r1, #0
   1e088:	e1a07003 	mov	r7, r3
   1e08c:	e1a06002 	mov	r6, r2
   1e090:	e1a04001 	mov	r4, r1
   1e094:	e1a05000 	mov	r5, r0
   1e098:	0a0000db 	beq	1e40c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3b0>
   1e09c:	e5d13002 	ldrb	r3, [r1, #2]
   1e0a0:	e5d11003 	ldrb	r1, [r1, #3]
   1e0a4:	e1d021b6 	ldrh	r2, [r0, #22]
   1e0a8:	e1833401 	orr	r3, r3, r1, lsl #8
   1e0ac:	e6bf3fb3 	rev16	r3, r3
   1e0b0:	e6ff3073 	uxth	r3, r3
   1e0b4:	e1520003 	cmp	r2, r3
   1e0b8:	1affffec 	bne	1e070 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1e0bc:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e0c0:	e3530001 	cmp	r3, #1
   1e0c4:	0a00004a 	beq	1e1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x198>
   1e0c8:	e1a01007 	mov	r1, r7
   1e0cc:	e280000c 	add	r0, r0, #12
   1e0d0:	eb0006fc 	bl	1fcc8 <CIPAddress::operator!=(CIPAddress const&) const>
   1e0d4:	e3500000 	cmp	r0, #0
   1e0d8:	1affffe4 	bne	1e070 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1e0dc:	e5d43000 	ldrb	r3, [r4]
   1e0e0:	e5d41001 	ldrb	r1, [r4, #1]
   1e0e4:	e1d521b4 	ldrh	r2, [r5, #20]
   1e0e8:	e1833401 	orr	r3, r3, r1, lsl #8
   1e0ec:	e6bf3fb3 	rev16	r3, r3
   1e0f0:	e6ff3073 	uxth	r3, r3
   1e0f4:	e1520003 	cmp	r2, r3
   1e0f8:	0285a01c 	addeq	sl, r5, #28
   1e0fc:	1affffdb 	bne	1e070 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1e100:	e1a02006 	mov	r2, r6
   1e104:	e1a01004 	mov	r1, r4
   1e108:	e1a0000a 	mov	r0, sl
   1e10c:	eb000923 	bl	205a0 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1e110:	e3500000 	cmp	r0, #0
   1e114:	1affffd5 	bne	1e070 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1e118:	e5d43005 	ldrb	r3, [r4, #5]
   1e11c:	e5d42004 	ldrb	r2, [r4, #4]
   1e120:	e5d48008 	ldrb	r8, [r4, #8]
   1e124:	e5d4c009 	ldrb	ip, [r4, #9]
   1e128:	e5d40006 	ldrb	r0, [r4, #6]
   1e12c:	e5d4100a 	ldrb	r1, [r4, #10]
   1e130:	e5d4900d 	ldrb	r9, [r4, #13]
   1e134:	e1822403 	orr	r2, r2, r3, lsl #8
   1e138:	e5d4300c 	ldrb	r3, [r4, #12]
   1e13c:	e188840c 	orr	r8, r8, ip, lsl #8
   1e140:	e1839409 	orr	r9, r3, r9, lsl #8
   1e144:	e1822800 	orr	r2, r2, r0, lsl #16
   1e148:	e1888801 	orr	r8, r8, r1, lsl #16
   1e14c:	e5d40007 	ldrb	r0, [r4, #7]
   1e150:	e5d4100b 	ldrb	r1, [r4, #11]
   1e154:	e1a03223 	lsr	r3, r3, #4
   1e158:	e1a03103 	lsl	r3, r3, #2
   1e15c:	e0466003 	sub	r6, r6, r3
   1e160:	e1822c00 	orr	r2, r2, r0, lsl #24
   1e164:	e1888c01 	orr	r8, r8, r1, lsl #24
   1e168:	e2191c02 	ands	r1, r9, #512	; 0x200
   1e16c:	e58d3014 	str	r3, [sp, #20]
   1e170:	e6bf2f32 	rev	r2, r2
   1e174:	1286b001 	addne	fp, r6, #1
   1e178:	01a0b006 	moveq	fp, r6
   1e17c:	e2193c01 	ands	r3, r9, #256	; 0x100
   1e180:	e58d1018 	str	r1, [sp, #24]
   1e184:	e58d200c 	str	r2, [sp, #12]
   1e188:	e58d301c 	str	r3, [sp, #28]
   1e18c:	e5d4300e 	ldrb	r3, [r4, #14]
   1e190:	e5d4200f 	ldrb	r2, [r4, #15]
   1e194:	e1a01004 	mov	r1, r4
   1e198:	e1833402 	orr	r3, r3, r2, lsl #8
   1e19c:	e6bf3fb3 	rev16	r3, r3
   1e1a0:	e6ff3073 	uxth	r3, r3
   1e1a4:	e1a00005 	mov	r0, r5
   1e1a8:	e58d3010 	str	r3, [sp, #16]
   1e1ac:	128bb001 	addne	fp, fp, #1
   1e1b0:	ebfffc66 	bl	1d350 <CTCPConnection::ScanOptions(TTCPHeader*)>
   1e1b4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e1b8:	e6bf8f38 	rev	r8, r8
   1e1bc:	e353000a 	cmp	r3, #10
   1e1c0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e1c4:	ea000031 	b	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e1c8:	0001e3ac 	.word	0x0001e3ac
   1e1cc:	0001e298 	.word	0x0001e298
   1e1d0:	0001e270 	.word	0x0001e270
   1e1d4:	0001e214 	.word	0x0001e214
   1e1d8:	0001e214 	.word	0x0001e214
   1e1dc:	0001e214 	.word	0x0001e214
   1e1e0:	0001e214 	.word	0x0001e214
   1e1e4:	0001e214 	.word	0x0001e214
   1e1e8:	0001e214 	.word	0x0001e214
   1e1ec:	0001e214 	.word	0x0001e214
   1e1f0:	0001e214 	.word	0x0001e214
   1e1f4:	e5d4300d 	ldrb	r3, [r4, #13]
   1e1f8:	e3130002 	tst	r3, #2
   1e1fc:	0affff9b 	beq	1e070 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1e200:	e280a01c 	add	sl, r0, #28
   1e204:	e1a0000a 	mov	r0, sl
   1e208:	e1a01007 	mov	r1, r7
   1e20c:	eb0008b7 	bl	204f0 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1e210:	eaffffba 	b	1e100 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa4>
   1e214:	e59530ac 	ldr	r3, [r5, #172]	; 0xac
   1e218:	e3530000 	cmp	r3, #0
   1e21c:	0a000080 	beq	1e424 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3c8>
   1e220:	e59520a8 	ldr	r2, [r5, #168]	; 0xa8
   1e224:	e59d100c 	ldr	r1, [sp, #12]
   1e228:	e35b0000 	cmp	fp, #0
   1e22c:	e0421001 	sub	r1, r2, r1
   1e230:	1a000116 	bne	1e690 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x634>
   1e234:	e3510000 	cmp	r1, #0
   1e238:	da0001ea 	ble	1e9e8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x98c>
   1e23c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e240:	e3530003 	cmp	r3, #3
   1e244:	0a00007c 	beq	1e43c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1e248:	e3a01000 	mov	r1, #0
   1e24c:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1e250:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1e254:	e1a00005 	mov	r0, r5
   1e258:	e58d1004 	str	r1, [sp, #4]
   1e25c:	e58d1000 	str	r1, [sp]
   1e260:	e3a01a01 	mov	r1, #4096	; 0x1000
   1e264:	ebfffbda 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e268:	e3a00001 	mov	r0, #1
   1e26c:	eaffff80 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e270:	e3190a01 	tst	r9, #4096	; 0x1000
   1e274:	0a000095 	beq	1e4d0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x474>
   1e278:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1e27c:	e0433008 	sub	r3, r3, r8
   1e280:	e3530000 	cmp	r3, #0
   1e284:	ba0001bf 	blt	1e988 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x92c>
   1e288:	e2193b01 	ands	r3, r9, #1024	; 0x400
   1e28c:	0a0000fc 	beq	1e684 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x628>
   1e290:	e3a00001 	mov	r0, #1
   1e294:	eaffff76 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e298:	e2193b01 	ands	r3, r9, #1024	; 0x400
   1e29c:	1afffffb 	bne	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e2a0:	e2199a01 	ands	r9, r9, #4096	; 0x1000
   1e2a4:	1a0000e9 	bne	1e650 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5f4>
   1e2a8:	e59d3018 	ldr	r3, [sp, #24]
   1e2ac:	e3530000 	cmp	r3, #0
   1e2b0:	0afffff6 	beq	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e2b4:	e59f3b30 	ldr	r3, [pc, #2864]	; 1edec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd90>
   1e2b8:	e5933000 	ldr	r3, [r3]
   1e2bc:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   1e2c0:	2a0000ce 	bcs	1e600 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5a4>
   1e2c4:	e59d200c 	ldr	r2, [sp, #12]
   1e2c8:	e59d1010 	ldr	r1, [sp, #16]
   1e2cc:	e2823001 	add	r3, r2, #1
   1e2d0:	e35b0000 	cmp	fp, #0
   1e2d4:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1e2d8:	e5851094 	str	r1, [r5, #148]	; 0x94
   1e2dc:	e585209c 	str	r2, [r5, #156]	; 0x9c
   1e2e0:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1e2e4:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1e2e8:	0a0001f9 	beq	1ead4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa78>
   1e2ec:	e3560000 	cmp	r6, #0
   1e2f0:	0a000005 	beq	1e30c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x2b0>
   1e2f4:	e59d1014 	ldr	r1, [sp, #20]
   1e2f8:	e1a03009 	mov	r3, r9
   1e2fc:	e1a02006 	mov	r2, r6
   1e300:	e0841001 	add	r1, r4, r1
   1e304:	e285003c 	add	r0, r5, #60	; 0x3c
   1e308:	eb0007ca 	bl	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e30c:	e1a00005 	mov	r0, r5
   1e310:	ebfffc3b 	bl	1d404 <CTCPConnection::CalculateISN()>
   1e314:	e28560b8 	add	r6, r5, #184	; 0xb8
   1e318:	e1a01000 	mov	r1, r0
   1e31c:	e58500a4 	str	r0, [r5, #164]	; 0xa4
   1e320:	e1a00006 	mov	r0, r6
   1e324:	eb00044b 	bl	1f458 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1e328:	e1a01007 	mov	r1, r7
   1e32c:	e285000c 	add	r0, r5, #12
   1e330:	eb0006d1 	bl	1fe7c <CIPAddress::Set(CIPAddress const&)>
   1e334:	e5d42001 	ldrb	r2, [r4, #1]
   1e338:	e5d43000 	ldrb	r3, [r4]
   1e33c:	e1a01007 	mov	r1, r7
   1e340:	e1833402 	orr	r3, r3, r2, lsl #8
   1e344:	e6bf3fb3 	rev16	r3, r3
   1e348:	e1a0000a 	mov	r0, sl
   1e34c:	e1c531b4 	strh	r3, [r5, #20]
   1e350:	eb000866 	bl	204f0 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1e354:	e3a01000 	mov	r1, #0
   1e358:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1e35c:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1e360:	e1a00005 	mov	r0, r5
   1e364:	e58d1004 	str	r1, [sp, #4]
   1e368:	e58d1000 	str	r1, [sp]
   1e36c:	e3a01c12 	mov	r1, #4608	; 0x1200
   1e370:	ebfffb97 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e374:	e1a00006 	mov	r0, r6
   1e378:	e3a02001 	mov	r2, #1
   1e37c:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1e380:	eb000451 	bl	1f4cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1e384:	e3a02003 	mov	r2, #3
   1e388:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1e38c:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1e390:	e2832001 	add	r2, r3, #1
   1e394:	e2850068 	add	r0, r5, #104	; 0x68
   1e398:	e585308c 	str	r3, [r5, #140]	; 0x8c
   1e39c:	e5852090 	str	r2, [r5, #144]	; 0x90
   1e3a0:	eb001433 	bl	23474 <CSynchronizationEvent::Set()>
   1e3a4:	e3a00001 	mov	r0, #1
   1e3a8:	eaffff31 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e3ac:	e2196b01 	ands	r6, r9, #1024	; 0x400
   1e3b0:	1affffb6 	bne	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e3b4:	e2199a01 	ands	r9, r9, #4096	; 0x1000
   1e3b8:	e1a01007 	mov	r1, r7
   1e3bc:	e285000c 	add	r0, r5, #12
   1e3c0:	0a000090 	beq	1e608 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5ac>
   1e3c4:	eb0006ac 	bl	1fe7c <CIPAddress::Set(CIPAddress const&)>
   1e3c8:	e5d43000 	ldrb	r3, [r4]
   1e3cc:	e5d42001 	ldrb	r2, [r4, #1]
   1e3d0:	e1a01007 	mov	r1, r7
   1e3d4:	e1833402 	orr	r3, r3, r2, lsl #8
   1e3d8:	e6bf3fb3 	rev16	r3, r3
   1e3dc:	e1c531b4 	strh	r3, [r5, #20]
   1e3e0:	e1a0000a 	mov	r0, sl
   1e3e4:	eb000841 	bl	204f0 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1e3e8:	e1a03006 	mov	r3, r6
   1e3ec:	e58d6004 	str	r6, [sp, #4]
   1e3f0:	e58d6000 	str	r6, [sp]
   1e3f4:	e1a02008 	mov	r2, r8
   1e3f8:	e1a00005 	mov	r0, r5
   1e3fc:	e3a01b01 	mov	r1, #1024	; 0x400
   1e400:	ebfffb73 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e404:	e3a00001 	mov	r0, #1
   1e408:	eaffff19 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e40c:	e3a02f9f 	mov	r2, #636	; 0x27c
   1e410:	e59f19d8 	ldr	r1, [pc, #2520]	; 1edf0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd94>
   1e414:	e59f09d8 	ldr	r0, [pc, #2520]	; 1edf4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd98>
   1e418:	eb001498 	bl	23680 <assertion_failed>
   1e41c:	e3e00000 	mvn	r0, #0
   1e420:	eaffff13 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e424:	e35b0000 	cmp	fp, #0
   1e428:	1affff83 	bne	1e23c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1e42c:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1e430:	e59d200c 	ldr	r2, [sp, #12]
   1e434:	e1520003 	cmp	r2, r3
   1e438:	1affff7f 	bne	1e23c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1e43c:	e3190b01 	tst	r9, #1024	; 0x400
   1e440:	0a000054 	beq	1e598 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x53c>
   1e444:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e448:	e2433003 	sub	r3, r3, #3
   1e44c:	e3530007 	cmp	r3, #7
   1e450:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e454:	ea00015e 	b	1e9d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x978>
   1e458:	0001e4b0 	.word	0x0001e4b0
   1e45c:	0001e478 	.word	0x0001e478
   1e460:	0001e478 	.word	0x0001e478
   1e464:	0001e478 	.word	0x0001e478
   1e468:	0001e478 	.word	0x0001e478
   1e46c:	0001e498 	.word	0x0001e498
   1e470:	0001e498 	.word	0x0001e498
   1e474:	0001e498 	.word	0x0001e498
   1e478:	e3e03000 	mvn	r3, #0
   1e47c:	e2850048 	add	r0, r5, #72	; 0x48
   1e480:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1e484:	eb0003d4 	bl	1f3dc <CRetransmissionQueue::Flush()>
   1e488:	e2850030 	add	r0, r5, #48	; 0x30
   1e48c:	eb000733 	bl	20160 <CNetQueue::Flush()>
   1e490:	e285003c 	add	r0, r5, #60	; 0x3c
   1e494:	eb000731 	bl	20160 <CNetQueue::Flush()>
   1e498:	e3a03000 	mov	r3, #0
   1e49c:	e2850068 	add	r0, r5, #104	; 0x68
   1e4a0:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1e4a4:	eb0013f2 	bl	23474 <CSynchronizationEvent::Set()>
   1e4a8:	e3a00001 	mov	r0, #1
   1e4ac:	eafffef0 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e4b0:	e2850048 	add	r0, r5, #72	; 0x48
   1e4b4:	eb0003c8 	bl	1f3dc <CRetransmissionQueue::Flush()>
   1e4b8:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1e4bc:	e3530000 	cmp	r3, #0
   1e4c0:	1a00018b 	bne	1eaf4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa98>
   1e4c4:	e3a00001 	mov	r0, #1
   1e4c8:	e5c5002a 	strb	r0, [r5, #42]	; 0x2a
   1e4cc:	eafffee8 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e4d0:	e3190b01 	tst	r9, #1024	; 0x400
   1e4d4:	1affff6d 	bne	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e4d8:	e2193c02 	ands	r3, r9, #512	; 0x200
   1e4dc:	e3530000 	cmp	r3, #0
   1e4e0:	0affff6a 	beq	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e4e4:	e59d200c 	ldr	r2, [sp, #12]
   1e4e8:	e2823001 	add	r3, r2, #1
   1e4ec:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1e4f0:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1e4f4:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1e4f8:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1e4fc:	e0423003 	sub	r3, r2, r3
   1e500:	e3530000 	cmp	r3, #0
   1e504:	ba000156 	blt	1ea64 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa08>
   1e508:	e3a07000 	mov	r7, #0
   1e50c:	e3a03003 	mov	r3, #3
   1e510:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1e514:	e58d7004 	str	r7, [sp, #4]
   1e518:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1e51c:	e58d7000 	str	r7, [sp]
   1e520:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1e524:	e3a01c12 	mov	r1, #4608	; 0x1200
   1e528:	e28580b8 	add	r8, r5, #184	; 0xb8
   1e52c:	e1a00005 	mov	r0, r5
   1e530:	ebfffb27 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e534:	e3a02001 	mov	r2, #1
   1e538:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1e53c:	e1a00008 	mov	r0, r8
   1e540:	eb0003e1 	bl	1f4cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1e544:	e3a03005 	mov	r3, #5
   1e548:	e1a00008 	mov	r0, r8
   1e54c:	e5853060 	str	r3, [r5, #96]	; 0x60
   1e550:	eb0003be 	bl	1f450 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1e554:	e3a01001 	mov	r1, #1
   1e558:	e1a02000 	mov	r2, r0
   1e55c:	e1a00005 	mov	r0, r5
   1e560:	ebfffc75 	bl	1d73c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1e564:	e59d301c 	ldr	r3, [sp, #28]
   1e568:	e1530007 	cmp	r3, r7
   1e56c:	1a000129 	bne	1ea18 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9bc>
   1e570:	e1560007 	cmp	r6, r7
   1e574:	0affff45 	beq	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e578:	e59d3014 	ldr	r3, [sp, #20]
   1e57c:	e285003c 	add	r0, r5, #60	; 0x3c
   1e580:	e0841003 	add	r1, r4, r3
   1e584:	e1a02006 	mov	r2, r6
   1e588:	e3a03000 	mov	r3, #0
   1e58c:	eb000729 	bl	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e590:	e3a00001 	mov	r0, #1
   1e594:	eafffeb6 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e598:	e2193c02 	ands	r3, r9, #512	; 0x200
   1e59c:	e3530000 	cmp	r3, #0
   1e5a0:	0a000047 	beq	1e6c4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x668>
   1e5a4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e5a8:	e3530003 	cmp	r3, #3
   1e5ac:	0a000128 	beq	1ea54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9f8>
   1e5b0:	e3a04000 	mov	r4, #0
   1e5b4:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1e5b8:	e3a01b01 	mov	r1, #1024	; 0x400
   1e5bc:	e1a03004 	mov	r3, r4
   1e5c0:	e58d4004 	str	r4, [sp, #4]
   1e5c4:	e58d4000 	str	r4, [sp]
   1e5c8:	e1a00005 	mov	r0, r5
   1e5cc:	ebfffb00 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e5d0:	e3e03000 	mvn	r3, #0
   1e5d4:	e2850048 	add	r0, r5, #72	; 0x48
   1e5d8:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1e5dc:	eb00037e 	bl	1f3dc <CRetransmissionQueue::Flush()>
   1e5e0:	e2850030 	add	r0, r5, #48	; 0x30
   1e5e4:	eb0006dd 	bl	20160 <CNetQueue::Flush()>
   1e5e8:	e285003c 	add	r0, r5, #60	; 0x3c
   1e5ec:	eb0006db 	bl	20160 <CNetQueue::Flush()>
   1e5f0:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1e5f4:	e2850068 	add	r0, r5, #104	; 0x68
   1e5f8:	eb00139d 	bl	23474 <CSynchronizationEvent::Set()>
   1e5fc:	eaffff23 	b	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e600:	e1a01007 	mov	r1, r7
   1e604:	e285000c 	add	r0, r5, #12
   1e608:	eb00061b 	bl	1fe7c <CIPAddress::Set(CIPAddress const&)>
   1e60c:	e5d42001 	ldrb	r2, [r4, #1]
   1e610:	e5d43000 	ldrb	r3, [r4]
   1e614:	e1a01007 	mov	r1, r7
   1e618:	e1833402 	orr	r3, r3, r2, lsl #8
   1e61c:	e6bf3fb3 	rev16	r3, r3
   1e620:	e1a0000a 	mov	r0, sl
   1e624:	e1c531b4 	strh	r3, [r5, #20]
   1e628:	eb0007b0 	bl	204f0 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1e62c:	e59d300c 	ldr	r3, [sp, #12]
   1e630:	e58d9004 	str	r9, [sp, #4]
   1e634:	e58d9000 	str	r9, [sp]
   1e638:	e083300b 	add	r3, r3, fp
   1e63c:	e1a02009 	mov	r2, r9
   1e640:	e1a00005 	mov	r0, r5
   1e644:	e3a01b05 	mov	r1, #5120	; 0x1400
   1e648:	ebfffae1 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e64c:	eaffff0f 	b	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e650:	e1a01007 	mov	r1, r7
   1e654:	e285000c 	add	r0, r5, #12
   1e658:	e58d300c 	str	r3, [sp, #12]
   1e65c:	eb000606 	bl	1fe7c <CIPAddress::Set(CIPAddress const&)>
   1e660:	e5d40001 	ldrb	r0, [r4, #1]
   1e664:	e5d42000 	ldrb	r2, [r4]
   1e668:	e1a01007 	mov	r1, r7
   1e66c:	e1822400 	orr	r2, r2, r0, lsl #8
   1e670:	e6bf2fb2 	rev16	r2, r2
   1e674:	e1a0000a 	mov	r0, sl
   1e678:	e1c521b4 	strh	r2, [r5, #20]
   1e67c:	eb00079b 	bl	204f0 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1e680:	e59d300c 	ldr	r3, [sp, #12]
   1e684:	e58d3004 	str	r3, [sp, #4]
   1e688:	e58d3000 	str	r3, [sp]
   1e68c:	eaffff58 	b	1e3f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x398>
   1e690:	e3510000 	cmp	r1, #0
   1e694:	da0000d9 	ble	1ea00 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9a4>
   1e698:	e59d100c 	ldr	r1, [sp, #12]
   1e69c:	e081000b 	add	r0, r1, fp
   1e6a0:	e2821001 	add	r1, r2, #1
   1e6a4:	e0411000 	sub	r1, r1, r0
   1e6a8:	e3510000 	cmp	r1, #0
   1e6ac:	cafffee2 	bgt	1e23c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1e6b0:	e0833002 	add	r3, r3, r2
   1e6b4:	e1e03003 	mvn	r3, r3
   1e6b8:	e1730000 	cmn	r3, r0
   1e6bc:	5afffede 	bpl	1e23c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1e6c0:	eaffff5d 	b	1e43c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1e6c4:	e3190a01 	tst	r9, #4096	; 0x1000
   1e6c8:	0afffef0 	beq	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e6cc:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e6d0:	e2433003 	sub	r3, r3, #3
   1e6d4:	e3530007 	cmp	r3, #7
   1e6d8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e6dc:	ea000100 	b	1eae4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa88>
   1e6e0:	0001e8b0 	.word	0x0001e8b0
   1e6e4:	0001e860 	.word	0x0001e860
   1e6e8:	0001e860 	.word	0x0001e860
   1e6ec:	0001e860 	.word	0x0001e860
   1e6f0:	0001e860 	.word	0x0001e860
   1e6f4:	0001e860 	.word	0x0001e860
   1e6f8:	0001e838 	.word	0x0001e838
   1e6fc:	0001e700 	.word	0x0001e700
   1e700:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1e704:	e1580003 	cmp	r8, r3
   1e708:	0a000120 	beq	1eb90 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb34>
   1e70c:	e35b0000 	cmp	fp, #0
   1e710:	0afffede 	beq	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e714:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e718:	e2433004 	sub	r3, r3, #4
   1e71c:	e3530006 	cmp	r3, #6
   1e720:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e724:	ea0000fa 	b	1eb14 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xab8>
   1e728:	0001e744 	.word	0x0001e744
   1e72c:	0001e744 	.word	0x0001e744
   1e730:	0001e744 	.word	0x0001e744
   1e734:	0001e7ac 	.word	0x0001e7ac
   1e738:	0001e7ac 	.word	0x0001e7ac
   1e73c:	0001e7ac 	.word	0x0001e7ac
   1e740:	0001e7ac 	.word	0x0001e7ac
   1e744:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1e748:	e59d200c 	ldr	r2, [sp, #12]
   1e74c:	e1520003 	cmp	r2, r3
   1e750:	1a000105 	bne	1eb6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb10>
   1e754:	e3560000 	cmp	r6, #0
   1e758:	0a000013 	beq	1e7ac <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x750>
   1e75c:	e59d3014 	ldr	r3, [sp, #20]
   1e760:	e1a02006 	mov	r2, r6
   1e764:	e0841003 	add	r1, r4, r3
   1e768:	e285003c 	add	r0, r5, #60	; 0x3c
   1e76c:	e3a03000 	mov	r3, #0
   1e770:	eb0006b0 	bl	20238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e774:	e3a02000 	mov	r2, #0
   1e778:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1e77c:	e58d2004 	str	r2, [sp, #4]
   1e780:	e0863003 	add	r3, r6, r3
   1e784:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1e788:	e58d2000 	str	r2, [sp]
   1e78c:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1e790:	e3a01a01 	mov	r1, #4096	; 0x1000
   1e794:	e1a00005 	mov	r0, r5
   1e798:	ebfffa8d 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e79c:	e3190b02 	tst	r9, #2048	; 0x800
   1e7a0:	0a000001 	beq	1e7ac <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x750>
   1e7a4:	e2850068 	add	r0, r5, #104	; 0x68
   1e7a8:	eb001331 	bl	23474 <CSynchronizationEvent::Set()>
   1e7ac:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e7b0:	e3530000 	cmp	r3, #0
   1e7b4:	0afffeb5 	beq	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e7b8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e7bc:	e3530001 	cmp	r3, #1
   1e7c0:	0afffeb2 	beq	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e7c4:	e5d5202a 	ldrb	r2, [r5, #42]	; 0x2a
   1e7c8:	e59d301c 	ldr	r3, [sp, #28]
   1e7cc:	e3530000 	cmp	r3, #0
   1e7d0:	13520002 	cmpne	r2, #2
   1e7d4:	03a02001 	moveq	r2, #1
   1e7d8:	13a02000 	movne	r2, #0
   1e7dc:	0afffeab 	beq	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e7e0:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1e7e4:	e58d2004 	str	r2, [sp, #4]
   1e7e8:	e2833001 	add	r3, r3, #1
   1e7ec:	e58d2000 	str	r2, [sp]
   1e7f0:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1e7f4:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1e7f8:	e3a01a01 	mov	r1, #4096	; 0x1000
   1e7fc:	e1a00005 	mov	r0, r5
   1e800:	ebfffa73 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e804:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e808:	e2433003 	sub	r3, r3, #3
   1e80c:	e3530007 	cmp	r3, #7
   1e810:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e814:	ea000143 	b	1ed28 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xccc>
   1e818:	0001ed10 	.word	0x0001ed10
   1e81c:	0001ed10 	.word	0x0001ed10
   1e820:	0001ed3c 	.word	0x0001ed3c
   1e824:	0001ecd8 	.word	0x0001ecd8
   1e828:	0001e290 	.word	0x0001e290
   1e82c:	0001e290 	.word	0x0001e290
   1e830:	0001e290 	.word	0x0001e290
   1e834:	0001ebc8 	.word	0x0001ebc8
   1e838:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1e83c:	e1580003 	cmp	r8, r3
   1e840:	1affffb1 	bne	1e70c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1e844:	e3a03000 	mov	r3, #0
   1e848:	e2850068 	add	r0, r5, #104	; 0x68
   1e84c:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1e850:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1e854:	eb001306 	bl	23474 <CSynchronizationEvent::Set()>
   1e858:	e3a00001 	mov	r0, #1
   1e85c:	eafffe04 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e860:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1e864:	e0532008 	subs	r2, r3, r8
   1e868:	4a000112 	bmi	1ecb8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc5c>
   1e86c:	e0483003 	sub	r3, r8, r3
   1e870:	e3530000 	cmp	r3, #0
   1e874:	c5952090 	ldrgt	r2, [r5, #144]	; 0x90
   1e878:	da0000f7 	ble	1ec5c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc00>
   1e87c:	e0423008 	sub	r3, r2, r8
   1e880:	e3530000 	cmp	r3, #0
   1e884:	ba0000eb 	blt	1ec38 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbdc>
   1e888:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1e88c:	e2433004 	sub	r3, r3, #4
   1e890:	e3530004 	cmp	r3, #4
   1e894:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e898:	ea0000e2 	b	1ec28 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbcc>
   1e89c:	0001e70c 	.word	0x0001e70c
   1e8a0:	0001e928 	.word	0x0001e928
   1e8a4:	0001e96c 	.word	0x0001e96c
   1e8a8:	0001e70c 	.word	0x0001e70c
   1e8ac:	0001e8e0 	.word	0x0001e8e0
   1e8b0:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1e8b4:	e0433008 	sub	r3, r3, r8
   1e8b8:	e3530000 	cmp	r3, #0
   1e8bc:	da000098 	ble	1eb24 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xac8>
   1e8c0:	e3a03000 	mov	r3, #0
   1e8c4:	e1a02008 	mov	r2, r8
   1e8c8:	e58d3004 	str	r3, [sp, #4]
   1e8cc:	e58d3000 	str	r3, [sp]
   1e8d0:	e3a01b01 	mov	r1, #1024	; 0x400
   1e8d4:	e1a00005 	mov	r0, r5
   1e8d8:	ebfffa3d 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1e8dc:	eaffff8a 	b	1e70c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1e8e0:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1e8e4:	e1580003 	cmp	r8, r3
   1e8e8:	1affff87 	bne	1e70c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1e8ec:	e1a01008 	mov	r1, r8
   1e8f0:	e28500b8 	add	r0, r5, #184	; 0xb8
   1e8f4:	eb000359 	bl	1f660 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1e8f8:	e3a03000 	mov	r3, #0
   1e8fc:	e1a00005 	mov	r0, r5
   1e900:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1e904:	e3a01001 	mov	r1, #1
   1e908:	ebfffad8 	bl	1d470 <CTCPConnection::StopTimer(unsigned int)>
   1e90c:	e3a0300a 	mov	r3, #10
   1e910:	e59f24e0 	ldr	r2, [pc, #1248]	; 1edf8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1e914:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1e918:	e3a01002 	mov	r1, #2
   1e91c:	e1a00005 	mov	r0, r5
   1e920:	ebfffb85 	bl	1d73c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1e924:	eaffff78 	b	1e70c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1e928:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1e92c:	e1580003 	cmp	r8, r3
   1e930:	1affff75 	bne	1e70c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1e934:	e1a01008 	mov	r1, r8
   1e938:	e28500b8 	add	r0, r5, #184	; 0xb8
   1e93c:	eb000347 	bl	1f660 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1e940:	e3a03000 	mov	r3, #0
   1e944:	e3a01001 	mov	r1, #1
   1e948:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1e94c:	e1a00005 	mov	r0, r5
   1e950:	ebfffac6 	bl	1d470 <CTCPConnection::StopTimer(unsigned int)>
   1e954:	e3a03006 	mov	r3, #6
   1e958:	e59f2498 	ldr	r2, [pc, #1176]	; 1edf8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1e95c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1e960:	e3a01002 	mov	r1, #2
   1e964:	e1a00005 	mov	r0, r5
   1e968:	ebfffb73 	bl	1d73c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1e96c:	e2850048 	add	r0, r5, #72	; 0x48
   1e970:	eb0001ce 	bl	1f0b0 <CRetransmissionQueue::IsEmpty() const>
   1e974:	e3500000 	cmp	r0, #0
   1e978:	0affff63 	beq	1e70c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1e97c:	e2850068 	add	r0, r5, #104	; 0x68
   1e980:	eb0012bb 	bl	23474 <CSynchronizationEvent::Set()>
   1e984:	eaffff60 	b	1e70c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1e988:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1e98c:	e0483003 	sub	r3, r8, r3
   1e990:	e3530000 	cmp	r3, #0
   1e994:	cafffe3b 	bgt	1e288 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x22c>
   1e998:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1e99c:	e0433008 	sub	r3, r3, r8
   1e9a0:	e3530000 	cmp	r3, #0
   1e9a4:	cafffe39 	bgt	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1e9a8:	e3190b01 	tst	r9, #1024	; 0x400
   1e9ac:	0a00008a 	beq	1ebdc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb80>
   1e9b0:	e3a03000 	mov	r3, #0
   1e9b4:	e3e02000 	mvn	r2, #0
   1e9b8:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1e9bc:	e2850068 	add	r0, r5, #104	; 0x68
   1e9c0:	e5c5305d 	strb	r3, [r5, #93]	; 0x5d
   1e9c4:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1e9c8:	eb0012a9 	bl	23474 <CSynchronizationEvent::Set()>
   1e9cc:	e3a00001 	mov	r0, #1
   1e9d0:	eafffda7 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e9d4:	e1a00005 	mov	r0, r5
   1e9d8:	e59f141c 	ldr	r1, [pc, #1052]	; 1edfc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xda0>
   1e9dc:	ebfffd2f 	bl	1dea0 <CTCPConnection::UnexpectedState(unsigned int)>
   1e9e0:	e3a00001 	mov	r0, #1
   1e9e4:	eafffda2 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1e9e8:	e0833002 	add	r3, r3, r2
   1e9ec:	e59d200c 	ldr	r2, [sp, #12]
   1e9f0:	e0423003 	sub	r3, r2, r3
   1e9f4:	e3530000 	cmp	r3, #0
   1e9f8:	aafffe0f 	bge	1e23c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1e9fc:	eafffe8e 	b	1e43c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1ea00:	e59d000c 	ldr	r0, [sp, #12]
   1ea04:	e0831002 	add	r1, r3, r2
   1ea08:	e0401001 	sub	r1, r0, r1
   1ea0c:	e3510000 	cmp	r1, #0
   1ea10:	aaffff20 	bge	1e698 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x63c>
   1ea14:	eafffe88 	b	1e43c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1ea18:	e58d7004 	str	r7, [sp, #4]
   1ea1c:	e58d7000 	str	r7, [sp]
   1ea20:	e1a03007 	mov	r3, r7
   1ea24:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1ea28:	e3a01b01 	mov	r1, #1024	; 0x400
   1ea2c:	e1a00005 	mov	r0, r5
   1ea30:	ebfff9e7 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ea34:	e3e03000 	mvn	r3, #0
   1ea38:	e5c5702a 	strb	r7, [r5, #42]	; 0x2a
   1ea3c:	e2850068 	add	r0, r5, #104	; 0x68
   1ea40:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1ea44:	eb00128a 	bl	23474 <CSynchronizationEvent::Set()>
   1ea48:	e3560000 	cmp	r6, #0
   1ea4c:	0afffe0f 	beq	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1ea50:	eafffec8 	b	1e578 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x51c>
   1ea54:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1ea58:	e3530000 	cmp	r3, #0
   1ea5c:	1afffed3 	bne	1e5b0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x554>
   1ea60:	eafffe97 	b	1e4c4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x468>
   1ea64:	e3a07000 	mov	r7, #0
   1ea68:	e3a03004 	mov	r3, #4
   1ea6c:	e3a01001 	mov	r1, #1
   1ea70:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1ea74:	e1a00005 	mov	r0, r5
   1ea78:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1ea7c:	ebfffa7b 	bl	1d470 <CTCPConnection::StopTimer(unsigned int)>
   1ea80:	e3a03005 	mov	r3, #5
   1ea84:	e2850068 	add	r0, r5, #104	; 0x68
   1ea88:	e5853060 	str	r3, [r5, #96]	; 0x60
   1ea8c:	eb001278 	bl	23474 <CSynchronizationEvent::Set()>
   1ea90:	e59d3010 	ldr	r3, [sp, #16]
   1ea94:	e58d7004 	str	r7, [sp, #4]
   1ea98:	e58d7000 	str	r7, [sp]
   1ea9c:	e5853094 	str	r3, [r5, #148]	; 0x94
   1eaa0:	e59d300c 	ldr	r3, [sp, #12]
   1eaa4:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1eaa8:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1eaac:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1eab0:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1eab4:	e3a01a01 	mov	r1, #4096	; 0x1000
   1eab8:	e1a00005 	mov	r0, r5
   1eabc:	ebfff9c4 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1eac0:	e2193c01 	ands	r3, r9, #256	; 0x100
   1eac4:	e1530007 	cmp	r3, r7
   1eac8:	01560007 	cmpeq	r6, r7
   1eacc:	1affff0e 	bne	1e70c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1ead0:	eafffdee 	b	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1ead4:	e59f2324 	ldr	r2, [pc, #804]	; 1ee00 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xda4>
   1ead8:	e59f1310 	ldr	r1, [pc, #784]	; 1edf0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd94>
   1eadc:	e59f0320 	ldr	r0, [pc, #800]	; 1ee04 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xda8>
   1eae0:	eb0012e6 	bl	23680 <assertion_failed>
   1eae4:	e59f131c 	ldr	r1, [pc, #796]	; 1ee08 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdac>
   1eae8:	e1a00005 	mov	r0, r5
   1eaec:	ebfffceb 	bl	1dea0 <CTCPConnection::UnexpectedState(unsigned int)>
   1eaf0:	eaffff05 	b	1e70c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1eaf4:	e3e02000 	mvn	r2, #0
   1eaf8:	e3a03000 	mov	r3, #0
   1eafc:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1eb00:	e2850068 	add	r0, r5, #104	; 0x68
   1eb04:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1eb08:	eb001259 	bl	23474 <CSynchronizationEvent::Set()>
   1eb0c:	e3a00001 	mov	r0, #1
   1eb10:	eafffd57 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1eb14:	e59f12f0 	ldr	r1, [pc, #752]	; 1ee0c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdb0>
   1eb18:	e1a00005 	mov	r0, r5
   1eb1c:	ebfffcdf 	bl	1dea0 <CTCPConnection::UnexpectedState(unsigned int)>
   1eb20:	eaffff21 	b	1e7ac <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x750>
   1eb24:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1eb28:	e0483003 	sub	r3, r8, r3
   1eb2c:	e3530000 	cmp	r3, #0
   1eb30:	caffff62 	bgt	1e8c0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x864>
   1eb34:	e59d3010 	ldr	r3, [sp, #16]
   1eb38:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1eb3c:	e5853094 	str	r3, [r5, #148]	; 0x94
   1eb40:	e59d300c 	ldr	r3, [sp, #12]
   1eb44:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1eb48:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1eb4c:	e1a01008 	mov	r1, r8
   1eb50:	e28500b8 	add	r0, r5, #184	; 0xb8
   1eb54:	eb0002c1 	bl	1f660 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1eb58:	e3a02004 	mov	r2, #4
   1eb5c:	e3a03005 	mov	r3, #5
   1eb60:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1eb64:	e5853060 	str	r3, [r5, #96]	; 0x60
   1eb68:	eafffee7 	b	1e70c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1eb6c:	e3a02000 	mov	r2, #0
   1eb70:	e58d2004 	str	r2, [sp, #4]
   1eb74:	e58d2000 	str	r2, [sp]
   1eb78:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1eb7c:	e1a00005 	mov	r0, r5
   1eb80:	e3a01a01 	mov	r1, #4096	; 0x1000
   1eb84:	ebfff992 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1eb88:	e3a00001 	mov	r0, #1
   1eb8c:	eafffd38 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1eb90:	e3a02000 	mov	r2, #0
   1eb94:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1eb98:	e5c5205e 	strb	r2, [r5, #94]	; 0x5e
   1eb9c:	e3a01a01 	mov	r1, #4096	; 0x1000
   1eba0:	e58d2004 	str	r2, [sp, #4]
   1eba4:	e58d2000 	str	r2, [sp]
   1eba8:	e1a00005 	mov	r0, r5
   1ebac:	e1a02008 	mov	r2, r8
   1ebb0:	ebfff987 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ebb4:	e59f223c 	ldr	r2, [pc, #572]	; 1edf8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1ebb8:	e3a01002 	mov	r1, #2
   1ebbc:	e1a00005 	mov	r0, r5
   1ebc0:	ebfffadd 	bl	1d73c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ebc4:	eafffed0 	b	1e70c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1ebc8:	e1a00005 	mov	r0, r5
   1ebcc:	e59f2224 	ldr	r2, [pc, #548]	; 1edf8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1ebd0:	e3a01002 	mov	r1, #2
   1ebd4:	ebfffad8 	bl	1d73c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ebd8:	eafffdac 	b	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1ebdc:	e2193c02 	ands	r3, r9, #512	; 0x200
   1ebe0:	e3530000 	cmp	r3, #0
   1ebe4:	0afffda9 	beq	1e290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1ebe8:	e59d200c 	ldr	r2, [sp, #12]
   1ebec:	e1a01008 	mov	r1, r8
   1ebf0:	e2823001 	add	r3, r2, #1
   1ebf4:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1ebf8:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1ebfc:	e28500b8 	add	r0, r5, #184	; 0xb8
   1ec00:	eb000296 	bl	1f660 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1ec04:	e595108c 	ldr	r1, [r5, #140]	; 0x8c
   1ec08:	e0481001 	sub	r1, r8, r1
   1ec0c:	e3510001 	cmp	r1, #1
   1ec10:	9a000002 	bls	1ec20 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc4>
   1ec14:	e2411001 	sub	r1, r1, #1
   1ec18:	e2850048 	add	r0, r5, #72	; 0x48
   1ec1c:	eb0001ca 	bl	1f34c <CRetransmissionQueue::Advance(unsigned int)>
   1ec20:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1ec24:	eafffe32 	b	1e4f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x498>
   1ec28:	e3a01e49 	mov	r1, #1168	; 0x490
   1ec2c:	e1a00005 	mov	r0, r5
   1ec30:	ebfffc9a 	bl	1dea0 <CTCPConnection::UnexpectedState(unsigned int)>
   1ec34:	eafffeb4 	b	1e70c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1ec38:	e3a03000 	mov	r3, #0
   1ec3c:	e58d3004 	str	r3, [sp, #4]
   1ec40:	e58d3000 	str	r3, [sp]
   1ec44:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1ec48:	e1a00005 	mov	r0, r5
   1ec4c:	e3a01a01 	mov	r1, #4096	; 0x1000
   1ec50:	ebfff95f 	bl	1d1d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ec54:	e3a00001 	mov	r0, #1
   1ec58:	eafffd05 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1ec5c:	e3520000 	cmp	r2, #0
   1ec60:	1affff08 	bne	1e888 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1ec64:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1ec68:	e0483003 	sub	r3, r8, r3
   1ec6c:	e3530000 	cmp	r3, #0
   1ec70:	caffff04 	bgt	1e888 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1ec74:	e595309c 	ldr	r3, [r5, #156]	; 0x9c
   1ec78:	e59d100c 	ldr	r1, [sp, #12]
   1ec7c:	e0432001 	sub	r2, r3, r1
   1ec80:	e3520000 	cmp	r2, #0
   1ec84:	ba000005 	blt	1eca0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc44>
   1ec88:	e1510003 	cmp	r1, r3
   1ec8c:	1afffefd 	bne	1e888 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1ec90:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1ec94:	e0433008 	sub	r3, r3, r8
   1ec98:	e3530000 	cmp	r3, #0
   1ec9c:	cafffef9 	bgt	1e888 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1eca0:	e59d3010 	ldr	r3, [sp, #16]
   1eca4:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1eca8:	e5853094 	str	r3, [r5, #148]	; 0x94
   1ecac:	e59d300c 	ldr	r3, [sp, #12]
   1ecb0:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1ecb4:	eafffef3 	b	1e888 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1ecb8:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1ecbc:	e0481002 	sub	r1, r8, r2
   1ecc0:	e3510000 	cmp	r1, #0
   1ecc4:	da000026 	ble	1ed64 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd08>
   1ecc8:	e0483003 	sub	r3, r8, r3
   1eccc:	e3530000 	cmp	r3, #0
   1ecd0:	cafffee9 	bgt	1e87c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x820>
   1ecd4:	eafffeeb 	b	1e888 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1ecd8:	e3a01001 	mov	r1, #1
   1ecdc:	e1a00005 	mov	r0, r5
   1ece0:	ebfff9e2 	bl	1d470 <CTCPConnection::StopTimer(unsigned int)>
   1ece4:	e3a01000 	mov	r1, #0
   1ece8:	e1a00005 	mov	r0, r5
   1ecec:	ebfff9df 	bl	1d470 <CTCPConnection::StopTimer(unsigned int)>
   1ecf0:	e3a0300a 	mov	r3, #10
   1ecf4:	e1a00005 	mov	r0, r5
   1ecf8:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1ecfc:	e59f20f4 	ldr	r2, [pc, #244]	; 1edf8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1ed00:	e3a01002 	mov	r1, #2
   1ed04:	ebfffa8c 	bl	1d73c <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ed08:	e3a00001 	mov	r0, #1
   1ed0c:	eafffcd8 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1ed10:	e3a03007 	mov	r3, #7
   1ed14:	e2850068 	add	r0, r5, #104	; 0x68
   1ed18:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1ed1c:	eb0011d4 	bl	23474 <CSynchronizationEvent::Set()>
   1ed20:	e3a00001 	mov	r0, #1
   1ed24:	eafffcd2 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1ed28:	e1a00005 	mov	r0, r5
   1ed2c:	e59f10dc 	ldr	r1, [pc, #220]	; 1ee10 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdb4>
   1ed30:	ebfffc5a 	bl	1dea0 <CTCPConnection::UnexpectedState(unsigned int)>
   1ed34:	e3a00001 	mov	r0, #1
   1ed38:	eafffccd 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1ed3c:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1ed40:	e1580003 	cmp	r8, r3
   1ed44:	03a04000 	moveq	r4, #0
   1ed48:	03a01001 	moveq	r1, #1
   1ed4c:	05c5405e 	strbeq	r4, [r5, #94]	; 0x5e
   1ed50:	0affffe1 	beq	1ecdc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc80>
   1ed54:	e3a03008 	mov	r3, #8
   1ed58:	e3a00001 	mov	r0, #1
   1ed5c:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1ed60:	eafffcc3 	b	1e074 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1ed64:	e1a01008 	mov	r1, r8
   1ed68:	e28500b8 	add	r0, r5, #184	; 0xb8
   1ed6c:	eb00023b 	bl	1f660 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1ed70:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1ed74:	e595708c 	ldr	r7, [r5, #140]	; 0x8c
   1ed78:	e1580003 	cmp	r8, r3
   1ed7c:	e0487007 	sub	r7, r8, r7
   1ed80:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1ed84:	1a000004 	bne	1ed9c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd40>
   1ed88:	e3a01001 	mov	r1, #1
   1ed8c:	e1a00005 	mov	r0, r5
   1ed90:	ebfff9b6 	bl	1d470 <CTCPConnection::StopTimer(unsigned int)>
   1ed94:	e3a03005 	mov	r3, #5
   1ed98:	e5853060 	str	r3, [r5, #96]	; 0x60
   1ed9c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1eda0:	e3530005 	cmp	r3, #5
   1eda4:	0a00000c 	beq	1eddc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd80>
   1eda8:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1edac:	e3530008 	cmp	r3, #8
   1edb0:	0a000009 	beq	1eddc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd80>
   1edb4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1edb8:	e3530004 	cmp	r3, #4
   1edbc:	03570001 	cmpeq	r7, #1
   1edc0:	0affffab 	beq	1ec74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc18>
   1edc4:	e3570000 	cmp	r7, #0
   1edc8:	0affffa9 	beq	1ec74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc18>
   1edcc:	e1a01007 	mov	r1, r7
   1edd0:	e2850048 	add	r0, r5, #72	; 0x48
   1edd4:	eb00015c 	bl	1f34c <CRetransmissionQueue::Advance(unsigned int)>
   1edd8:	eaffffa5 	b	1ec74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc18>
   1eddc:	e3a03000 	mov	r3, #0
   1ede0:	e2477001 	sub	r7, r7, #1
   1ede4:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1ede8:	eafffff1 	b	1edb4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd58>
   1edec:	0003e37c 	.word	0x0003e37c
   1edf0:	000396bc 	.word	0x000396bc
   1edf4:	00039020 	.word	0x00039020
   1edf8:	00001770 	.word	0x00001770
   1edfc:	000003e3 	.word	0x000003e3
   1ee00:	00000301 	.word	0x00000301
   1ee04:	0003983c 	.word	0x0003983c
   1ee08:	000004a9 	.word	0x000004a9
   1ee0c:	000004dc 	.word	0x000004dc
   1ee10:	00000519 	.word	0x00000519

0001ee14 <CTCPConnection::TimerHandler(unsigned int)>:
   1ee14:	e3510002 	cmp	r1, #2
   1ee18:	e92d4070 	push	{r4, r5, r6, lr}
   1ee1c:	8a000040 	bhi	1ef24 <CTCPConnection::TimerHandler(unsigned int)+0x110>
   1ee20:	e1a04000 	mov	r4, r0
   1ee24:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   1ee28:	e1a05001 	mov	r5, r1
   1ee2c:	e3500000 	cmp	r0, #0
   1ee30:	1a00000d 	bne	1ee6c <CTCPConnection::TimerHandler(unsigned int)+0x58>
   1ee34:	e281301e 	add	r3, r1, #30
   1ee38:	e0843103 	add	r3, r4, r3, lsl #2
   1ee3c:	e5932004 	ldr	r2, [r3, #4]
   1ee40:	e3520000 	cmp	r2, #0
   1ee44:	15830004 	strne	r0, [r3, #4]
   1ee48:	0a000006 	beq	1ee68 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   1ee4c:	e3550001 	cmp	r5, #1
   1ee50:	0a00001c 	beq	1eec8 <CTCPConnection::TimerHandler(unsigned int)+0xb4>
   1ee54:	e3550002 	cmp	r5, #2
   1ee58:	1a00000e 	bne	1ee98 <CTCPConnection::TimerHandler(unsigned int)+0x84>
   1ee5c:	e3a03000 	mov	r3, #0
   1ee60:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1ee64:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ee68:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ee6c:	eb002f52 	bl	2abbc <EnterCritical>
   1ee70:	e285301e 	add	r3, r5, #30
   1ee74:	e0843103 	add	r3, r4, r3, lsl #2
   1ee78:	e5932004 	ldr	r2, [r3, #4]
   1ee7c:	e3520000 	cmp	r2, #0
   1ee80:	1a000008 	bne	1eea8 <CTCPConnection::TimerHandler(unsigned int)+0x94>
   1ee84:	e5943088 	ldr	r3, [r4, #136]	; 0x88
   1ee88:	e3530000 	cmp	r3, #0
   1ee8c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1ee90:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ee94:	ea002f73 	b	2ac68 <LeaveCritical>
   1ee98:	e59f2124 	ldr	r2, [pc, #292]	; 1efc4 <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   1ee9c:	e59f1124 	ldr	r1, [pc, #292]	; 1efc8 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   1eea0:	e59f0124 	ldr	r0, [pc, #292]	; 1efcc <CTCPConnection::TimerHandler(unsigned int)+0x1b8>
   1eea4:	eb0011f5 	bl	23680 <assertion_failed>
   1eea8:	e3a01000 	mov	r1, #0
   1eeac:	e5942088 	ldr	r2, [r4, #136]	; 0x88
   1eeb0:	e5831004 	str	r1, [r3, #4]
   1eeb4:	e1520001 	cmp	r2, r1
   1eeb8:	0affffe3 	beq	1ee4c <CTCPConnection::TimerHandler(unsigned int)+0x38>
   1eebc:	eb002f69 	bl	2ac68 <LeaveCritical>
   1eec0:	e3550001 	cmp	r5, #1
   1eec4:	1affffe2 	bne	1ee54 <CTCPConnection::TimerHandler(unsigned int)+0x40>
   1eec8:	e28400b8 	add	r0, r4, #184	; 0xb8
   1eecc:	eb0001a4 	bl	1f564 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>
   1eed0:	e5943060 	ldr	r3, [r4, #96]	; 0x60
   1eed4:	e3530000 	cmp	r3, #0
   1eed8:	e2433001 	sub	r3, r3, #1
   1eedc:	e5843060 	str	r3, [r4, #96]	; 0x60
   1eee0:	0a000029 	beq	1ef8c <CTCPConnection::TimerHandler(unsigned int)+0x178>
   1eee4:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1eee8:	e353000a 	cmp	r3, #10
   1eeec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1eef0:	ea00000a 	b	1ef20 <CTCPConnection::TimerHandler(unsigned int)+0x10c>
   1eef4:	0001ef64 	.word	0x0001ef64
   1eef8:	0001ef64 	.word	0x0001ef64
   1eefc:	0001ef74 	.word	0x0001ef74
   1ef00:	0001ef74 	.word	0x0001ef74
   1ef04:	0001ef4c 	.word	0x0001ef4c
   1ef08:	0001ef34 	.word	0x0001ef34
   1ef0c:	0001ef64 	.word	0x0001ef64
   1ef10:	0001ef4c 	.word	0x0001ef4c
   1ef14:	0001ef34 	.word	0x0001ef34
   1ef18:	0001ef34 	.word	0x0001ef34
   1ef1c:	0001ef64 	.word	0x0001ef64
   1ef20:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ef24:	e59f20a4 	ldr	r2, [pc, #164]	; 1efd0 <CTCPConnection::TimerHandler(unsigned int)+0x1bc>
   1ef28:	e59f1098 	ldr	r1, [pc, #152]	; 1efc8 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   1ef2c:	e59f00a0 	ldr	r0, [pc, #160]	; 1efd4 <CTCPConnection::TimerHandler(unsigned int)+0x1c0>
   1ef30:	eb0011d2 	bl	23680 <assertion_failed>
   1ef34:	e5d4305e 	ldrb	r3, [r4, #94]	; 0x5e
   1ef38:	e3530000 	cmp	r3, #0
   1ef3c:	1a000014 	bne	1ef94 <CTCPConnection::TimerHandler(unsigned int)+0x180>
   1ef40:	e3a03001 	mov	r3, #1
   1ef44:	e5c4305e 	strb	r3, [r4, #94]	; 0x5e
   1ef48:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ef4c:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   1ef50:	e3530000 	cmp	r3, #0
   1ef54:	1a000012 	bne	1efa4 <CTCPConnection::TimerHandler(unsigned int)+0x190>
   1ef58:	e3a03001 	mov	r3, #1
   1ef5c:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
   1ef60:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ef64:	e1a00004 	mov	r0, r4
   1ef68:	e8bd4070 	pop	{r4, r5, r6, lr}
   1ef6c:	e59f1064 	ldr	r1, [pc, #100]	; 1efd8 <CTCPConnection::TimerHandler(unsigned int)+0x1c4>
   1ef70:	eafffbca 	b	1dea0 <CTCPConnection::UnexpectedState(unsigned int)>
   1ef74:	e5d4305d 	ldrb	r3, [r4, #93]	; 0x5d
   1ef78:	e3530000 	cmp	r3, #0
   1ef7c:	1a00000c 	bne	1efb4 <CTCPConnection::TimerHandler(unsigned int)+0x1a0>
   1ef80:	e3a03001 	mov	r3, #1
   1ef84:	e5c4305d 	strb	r3, [r4, #93]	; 0x5d
   1ef88:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ef8c:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1ef90:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ef94:	e59f2040 	ldr	r2, [pc, #64]	; 1efdc <CTCPConnection::TimerHandler(unsigned int)+0x1c8>
   1ef98:	e59f1028 	ldr	r1, [pc, #40]	; 1efc8 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   1ef9c:	e59f003c 	ldr	r0, [pc, #60]	; 1efe0 <CTCPConnection::TimerHandler(unsigned int)+0x1cc>
   1efa0:	eb0011b6 	bl	23680 <assertion_failed>
   1efa4:	e59f2038 	ldr	r2, [pc, #56]	; 1efe4 <CTCPConnection::TimerHandler(unsigned int)+0x1d0>
   1efa8:	e59f1018 	ldr	r1, [pc, #24]	; 1efc8 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   1efac:	e59f0034 	ldr	r0, [pc, #52]	; 1efe8 <CTCPConnection::TimerHandler(unsigned int)+0x1d4>
   1efb0:	eb0011b2 	bl	23680 <assertion_failed>
   1efb4:	e59f2030 	ldr	r2, [pc, #48]	; 1efec <CTCPConnection::TimerHandler(unsigned int)+0x1d8>
   1efb8:	e59f1008 	ldr	r1, [pc, #8]	; 1efc8 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   1efbc:	e59f002c 	ldr	r0, [pc, #44]	; 1eff0 <CTCPConnection::TimerHandler(unsigned int)+0x1dc>
   1efc0:	eb0011ae 	bl	23680 <assertion_failed>
   1efc4:	00000617 	.word	0x00000617
   1efc8:	000396bc 	.word	0x000396bc
   1efcc:	00035260 	.word	0x00035260
   1efd0:	000005d9 	.word	0x000005d9
   1efd4:	00039700 	.word	0x00039700
   1efd8:	000005f9 	.word	0x000005f9
   1efdc:	0000060b 	.word	0x0000060b
   1efe0:	0003974c 	.word	0x0003974c
   1efe4:	00000604 	.word	0x00000604
   1efe8:	00039858 	.word	0x00039858
   1efec:	000005fe 	.word	0x000005fe
   1eff0:	0003984c 	.word	0x0003984c

0001eff4 <CTCPConnection::TimerStub(unsigned int, void*, void*)>:
   1eff4:	e2520000 	subs	r0, r2, #0
   1eff8:	e92d4010 	push	{r4, lr}
   1effc:	0a000003 	beq	1f010 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x1c>
   1f000:	e3510002 	cmp	r1, #2
   1f004:	8a000005 	bhi	1f020 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x2c>
   1f008:	e8bd4010 	pop	{r4, lr}
   1f00c:	eaffff80 	b	1ee14 <CTCPConnection::TimerHandler(unsigned int)>
   1f010:	e59f2018 	ldr	r2, [pc, #24]	; 1f030 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x3c>
   1f014:	e59f1018 	ldr	r1, [pc, #24]	; 1f034 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   1f018:	e59f0018 	ldr	r0, [pc, #24]	; 1f038 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x44>
   1f01c:	eb001197 	bl	23680 <assertion_failed>
   1f020:	e59f2014 	ldr	r2, [pc, #20]	; 1f03c <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x48>
   1f024:	e59f1008 	ldr	r1, [pc, #8]	; 1f034 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   1f028:	e59f0010 	ldr	r0, [pc, #16]	; 1f040 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x4c>
   1f02c:	eb001193 	bl	23680 <assertion_failed>
   1f030:	0000061f 	.word	0x0000061f
   1f034:	000396bc 	.word	0x000396bc
   1f038:	0003466c 	.word	0x0003466c
   1f03c:	00000622 	.word	0x00000622
   1f040:	00039700 	.word	0x00039700

0001f044 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>:
   1f044:	e3a03000 	mov	r3, #0
   1f048:	e3510001 	cmp	r1, #1
   1f04c:	e92d4010 	push	{r4, lr}
   1f050:	e880000a 	stm	r0, {r1, r3}
   1f054:	e5803008 	str	r3, [r0, #8]
   1f058:	e580300c 	str	r3, [r0, #12]
   1f05c:	e5803010 	str	r3, [r0, #16]
   1f060:	9a000005 	bls	1f07c <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x38>
   1f064:	e1a04000 	mov	r4, r0
   1f068:	e1a00001 	mov	r0, r1
   1f06c:	eb002ba1 	bl	29ef8 <operator new[](unsigned int)>
   1f070:	e5840004 	str	r0, [r4, #4]
   1f074:	e1a00004 	mov	r0, r4
   1f078:	e8bd8010 	pop	{r4, pc}
   1f07c:	e3a0201e 	mov	r2, #30
   1f080:	e59f1004 	ldr	r1, [pc, #4]	; 1f08c <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x48>
   1f084:	e59f0004 	ldr	r0, [pc, #4]	; 1f090 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x4c>
   1f088:	eb00117c 	bl	23680 <assertion_failed>
   1f08c:	000398e4 	.word	0x000398e4
   1f090:	000398fc 	.word	0x000398fc

0001f094 <CRetransmissionQueue::~CRetransmissionQueue()>:
   1f094:	e92d4010 	push	{r4, lr}
   1f098:	e1a04000 	mov	r4, r0
   1f09c:	e3a01001 	mov	r1, #1
   1f0a0:	e5900004 	ldr	r0, [r0, #4]
   1f0a4:	eb002ba0 	bl	29f2c <operator delete(void*, unsigned int)>
   1f0a8:	e1a00004 	mov	r0, r4
   1f0ac:	e8bd8010 	pop	{r4, pc}

0001f0b0 <CRetransmissionQueue::IsEmpty() const>:
   1f0b0:	e590200c 	ldr	r2, [r0, #12]
   1f0b4:	e5900008 	ldr	r0, [r0, #8]
   1f0b8:	e0420000 	sub	r0, r2, r0
   1f0bc:	e16f0f10 	clz	r0, r0
   1f0c0:	e1a002a0 	lsr	r0, r0, #5
   1f0c4:	e12fff1e 	bx	lr

0001f0c8 <CRetransmissionQueue::GetFreeSpace() const>:
   1f0c8:	e5903000 	ldr	r3, [r0]
   1f0cc:	e92d4010 	push	{r4, lr}
   1f0d0:	e3530001 	cmp	r3, #1
   1f0d4:	9a00000b 	bls	1f108 <CRetransmissionQueue::GetFreeSpace() const+0x40>
   1f0d8:	e5902008 	ldr	r2, [r0, #8]
   1f0dc:	e1530002 	cmp	r3, r2
   1f0e0:	9a00000c 	bls	1f118 <CRetransmissionQueue::GetFreeSpace() const+0x50>
   1f0e4:	e590000c 	ldr	r0, [r0, #12]
   1f0e8:	e1530000 	cmp	r3, r0
   1f0ec:	9a00000d 	bls	1f128 <CRetransmissionQueue::GetFreeSpace() const+0x60>
   1f0f0:	e1520000 	cmp	r2, r0
   1f0f4:	20833000 	addcs	r3, r3, r0
   1f0f8:	22433001 	subcs	r3, r3, #1
   1f0fc:	32403001 	subcc	r3, r0, #1
   1f100:	e0430002 	sub	r0, r3, r2
   1f104:	e8bd8010 	pop	{r4, pc}
   1f108:	e3a02033 	mov	r2, #51	; 0x33
   1f10c:	e59f1024 	ldr	r1, [pc, #36]	; 1f138 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   1f110:	e59f0024 	ldr	r0, [pc, #36]	; 1f13c <CRetransmissionQueue::GetFreeSpace() const+0x74>
   1f114:	eb001159 	bl	23680 <assertion_failed>
   1f118:	e3a02034 	mov	r2, #52	; 0x34
   1f11c:	e59f1014 	ldr	r1, [pc, #20]	; 1f138 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   1f120:	e59f0018 	ldr	r0, [pc, #24]	; 1f140 <CRetransmissionQueue::GetFreeSpace() const+0x78>
   1f124:	eb001155 	bl	23680 <assertion_failed>
   1f128:	e3a02035 	mov	r2, #53	; 0x35
   1f12c:	e59f1004 	ldr	r1, [pc, #4]	; 1f138 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   1f130:	e59f000c 	ldr	r0, [pc, #12]	; 1f144 <CRetransmissionQueue::GetFreeSpace() const+0x7c>
   1f134:	eb001151 	bl	23680 <assertion_failed>
   1f138:	000398e4 	.word	0x000398e4
   1f13c:	000398fc 	.word	0x000398fc
   1f140:	00039908 	.word	0x00039908
   1f144:	0003991c 	.word	0x0003991c

0001f148 <CRetransmissionQueue::Write(void const*, unsigned int)>:
   1f148:	e92d4070 	push	{r4, r5, r6, lr}
   1f14c:	e2526000 	subs	r6, r2, #0
   1f150:	0a000018 	beq	1f1b8 <CRetransmissionQueue::Write(void const*, unsigned int)+0x70>
   1f154:	e1a05001 	mov	r5, r1
   1f158:	e1a04000 	mov	r4, r0
   1f15c:	ebffffd9 	bl	1f0c8 <CRetransmissionQueue::GetFreeSpace() const>
   1f160:	e1560000 	cmp	r6, r0
   1f164:	8a000017 	bhi	1f1c8 <CRetransmissionQueue::Write(void const*, unsigned int)+0x80>
   1f168:	e3550000 	cmp	r5, #0
   1f16c:	0a000019 	beq	1f1d8 <CRetransmissionQueue::Write(void const*, unsigned int)+0x90>
   1f170:	e5943004 	ldr	r3, [r4, #4]
   1f174:	e3530000 	cmp	r3, #0
   1f178:	0a00001a 	beq	1f1e8 <CRetransmissionQueue::Write(void const*, unsigned int)+0xa0>
   1f17c:	e0856006 	add	r6, r5, r6
   1f180:	e5941008 	ldr	r1, [r4, #8]
   1f184:	ea000000 	b	1f18c <CRetransmissionQueue::Write(void const*, unsigned int)+0x44>
   1f188:	e5943004 	ldr	r3, [r4, #4]
   1f18c:	e2812001 	add	r2, r1, #1
   1f190:	e5842008 	str	r2, [r4, #8]
   1f194:	e4d52001 	ldrb	r2, [r5], #1
   1f198:	e7c32001 	strb	r2, [r3, r1]
   1f19c:	e5940008 	ldr	r0, [r4, #8]
   1f1a0:	e5941000 	ldr	r1, [r4]
   1f1a4:	eb004563 	bl	30738 <__aeabi_uidivmod>
   1f1a8:	e1560005 	cmp	r6, r5
   1f1ac:	e5841008 	str	r1, [r4, #8]
   1f1b0:	1afffff4 	bne	1f188 <CRetransmissionQueue::Write(void const*, unsigned int)+0x40>
   1f1b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f1b8:	e3a02041 	mov	r2, #65	; 0x41
   1f1bc:	e59f1034 	ldr	r1, [pc, #52]	; 1f1f8 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   1f1c0:	e59f0034 	ldr	r0, [pc, #52]	; 1f1fc <CRetransmissionQueue::Write(void const*, unsigned int)+0xb4>
   1f1c4:	eb00112d 	bl	23680 <assertion_failed>
   1f1c8:	e3a02042 	mov	r2, #66	; 0x42
   1f1cc:	e59f1024 	ldr	r1, [pc, #36]	; 1f1f8 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   1f1d0:	e59f0028 	ldr	r0, [pc, #40]	; 1f200 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb8>
   1f1d4:	eb001129 	bl	23680 <assertion_failed>
   1f1d8:	e3a02045 	mov	r2, #69	; 0x45
   1f1dc:	e59f1014 	ldr	r1, [pc, #20]	; 1f1f8 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   1f1e0:	e59f001c 	ldr	r0, [pc, #28]	; 1f204 <CRetransmissionQueue::Write(void const*, unsigned int)+0xbc>
   1f1e4:	eb001125 	bl	23680 <assertion_failed>
   1f1e8:	e3a02046 	mov	r2, #70	; 0x46
   1f1ec:	e59f1004 	ldr	r1, [pc, #4]	; 1f1f8 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   1f1f0:	e59f0010 	ldr	r0, [pc, #16]	; 1f208 <CRetransmissionQueue::Write(void const*, unsigned int)+0xc0>
   1f1f4:	eb001121 	bl	23680 <assertion_failed>
   1f1f8:	000398e4 	.word	0x000398e4
   1f1fc:	00038fb0 	.word	0x00038fb0
   1f200:	00039930 	.word	0x00039930
   1f204:	0003994c 	.word	0x0003994c
   1f208:	00036dd4 	.word	0x00036dd4

0001f20c <CRetransmissionQueue::GetBytesAvailable() const>:
   1f20c:	e5903000 	ldr	r3, [r0]
   1f210:	e92d4010 	push	{r4, lr}
   1f214:	e3530001 	cmp	r3, #1
   1f218:	9a00000a 	bls	1f248 <CRetransmissionQueue::GetBytesAvailable() const+0x3c>
   1f21c:	e5902008 	ldr	r2, [r0, #8]
   1f220:	e1530002 	cmp	r3, r2
   1f224:	9a00000b 	bls	1f258 <CRetransmissionQueue::GetBytesAvailable() const+0x4c>
   1f228:	e5900010 	ldr	r0, [r0, #16]
   1f22c:	e1530000 	cmp	r3, r0
   1f230:	9a00000c 	bls	1f268 <CRetransmissionQueue::GetBytesAvailable() const+0x5c>
   1f234:	e1520000 	cmp	r2, r0
   1f238:	30833002 	addcc	r3, r3, r2
   1f23c:	30430000 	subcc	r0, r3, r0
   1f240:	20420000 	subcs	r0, r2, r0
   1f244:	e8bd8010 	pop	{r4, pc}
   1f248:	e3a02051 	mov	r2, #81	; 0x51
   1f24c:	e59f1024 	ldr	r1, [pc, #36]	; 1f278 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   1f250:	e59f0024 	ldr	r0, [pc, #36]	; 1f27c <CRetransmissionQueue::GetBytesAvailable() const+0x70>
   1f254:	eb001109 	bl	23680 <assertion_failed>
   1f258:	e3a02052 	mov	r2, #82	; 0x52
   1f25c:	e59f1014 	ldr	r1, [pc, #20]	; 1f278 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   1f260:	e59f0018 	ldr	r0, [pc, #24]	; 1f280 <CRetransmissionQueue::GetBytesAvailable() const+0x74>
   1f264:	eb001105 	bl	23680 <assertion_failed>
   1f268:	e3a02053 	mov	r2, #83	; 0x53
   1f26c:	e59f1004 	ldr	r1, [pc, #4]	; 1f278 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   1f270:	e59f000c 	ldr	r0, [pc, #12]	; 1f284 <CRetransmissionQueue::GetBytesAvailable() const+0x78>
   1f274:	eb001101 	bl	23680 <assertion_failed>
   1f278:	000398e4 	.word	0x000398e4
   1f27c:	000398fc 	.word	0x000398fc
   1f280:	00039908 	.word	0x00039908
   1f284:	00039954 	.word	0x00039954

0001f288 <CRetransmissionQueue::Read(void*, unsigned int)>:
   1f288:	e92d4070 	push	{r4, r5, r6, lr}
   1f28c:	e2526000 	subs	r6, r2, #0
   1f290:	0a000018 	beq	1f2f8 <CRetransmissionQueue::Read(void*, unsigned int)+0x70>
   1f294:	e1a05001 	mov	r5, r1
   1f298:	e1a04000 	mov	r4, r0
   1f29c:	ebffffda 	bl	1f20c <CRetransmissionQueue::GetBytesAvailable() const>
   1f2a0:	e1560000 	cmp	r6, r0
   1f2a4:	8a000017 	bhi	1f308 <CRetransmissionQueue::Read(void*, unsigned int)+0x80>
   1f2a8:	e3550000 	cmp	r5, #0
   1f2ac:	0a000019 	beq	1f318 <CRetransmissionQueue::Read(void*, unsigned int)+0x90>
   1f2b0:	e5943004 	ldr	r3, [r4, #4]
   1f2b4:	e3530000 	cmp	r3, #0
   1f2b8:	0a00001a 	beq	1f328 <CRetransmissionQueue::Read(void*, unsigned int)+0xa0>
   1f2bc:	e0856006 	add	r6, r5, r6
   1f2c0:	e5941010 	ldr	r1, [r4, #16]
   1f2c4:	ea000000 	b	1f2cc <CRetransmissionQueue::Read(void*, unsigned int)+0x44>
   1f2c8:	e5943004 	ldr	r3, [r4, #4]
   1f2cc:	e2812001 	add	r2, r1, #1
   1f2d0:	e5842010 	str	r2, [r4, #16]
   1f2d4:	e7d33001 	ldrb	r3, [r3, r1]
   1f2d8:	e4c53001 	strb	r3, [r5], #1
   1f2dc:	e5940010 	ldr	r0, [r4, #16]
   1f2e0:	e5941000 	ldr	r1, [r4]
   1f2e4:	eb004513 	bl	30738 <__aeabi_uidivmod>
   1f2e8:	e1560005 	cmp	r6, r5
   1f2ec:	e5841010 	str	r1, [r4, #16]
   1f2f0:	1afffff4 	bne	1f2c8 <CRetransmissionQueue::Read(void*, unsigned int)+0x40>
   1f2f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f2f8:	e3a0205f 	mov	r2, #95	; 0x5f
   1f2fc:	e59f1034 	ldr	r1, [pc, #52]	; 1f338 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   1f300:	e59f0034 	ldr	r0, [pc, #52]	; 1f33c <CRetransmissionQueue::Read(void*, unsigned int)+0xb4>
   1f304:	eb0010dd 	bl	23680 <assertion_failed>
   1f308:	e3a02060 	mov	r2, #96	; 0x60
   1f30c:	e59f1024 	ldr	r1, [pc, #36]	; 1f338 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   1f310:	e59f0028 	ldr	r0, [pc, #40]	; 1f340 <CRetransmissionQueue::Read(void*, unsigned int)+0xb8>
   1f314:	eb0010d9 	bl	23680 <assertion_failed>
   1f318:	e3a02063 	mov	r2, #99	; 0x63
   1f31c:	e59f1014 	ldr	r1, [pc, #20]	; 1f338 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   1f320:	e59f001c 	ldr	r0, [pc, #28]	; 1f344 <CRetransmissionQueue::Read(void*, unsigned int)+0xbc>
   1f324:	eb0010d5 	bl	23680 <assertion_failed>
   1f328:	e3a02064 	mov	r2, #100	; 0x64
   1f32c:	e59f1004 	ldr	r1, [pc, #4]	; 1f338 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   1f330:	e59f0010 	ldr	r0, [pc, #16]	; 1f348 <CRetransmissionQueue::Read(void*, unsigned int)+0xc0>
   1f334:	eb0010d1 	bl	23680 <assertion_failed>
   1f338:	000398e4 	.word	0x000398e4
   1f33c:	00038fb0 	.word	0x00038fb0
   1f340:	0003996c 	.word	0x0003996c
   1f344:	0003994c 	.word	0x0003994c
   1f348:	00036dd4 	.word	0x00036dd4

0001f34c <CRetransmissionQueue::Advance(unsigned int)>:
   1f34c:	e5903000 	ldr	r3, [r0]
   1f350:	e92d4010 	push	{r4, lr}
   1f354:	e3530001 	cmp	r3, #1
   1f358:	9a00000c 	bls	1f390 <CRetransmissionQueue::Advance(unsigned int)+0x44>
   1f35c:	e590200c 	ldr	r2, [r0, #12]
   1f360:	e1a04000 	mov	r4, r0
   1f364:	e1530002 	cmp	r3, r2
   1f368:	9a00000c 	bls	1f3a0 <CRetransmissionQueue::Advance(unsigned int)+0x54>
   1f36c:	e1a00001 	mov	r0, r1
   1f370:	e5941010 	ldr	r1, [r4, #16]
   1f374:	e1530001 	cmp	r3, r1
   1f378:	9a00000c 	bls	1f3b0 <CRetransmissionQueue::Advance(unsigned int)+0x64>
   1f37c:	e1a01003 	mov	r1, r3
   1f380:	e0820000 	add	r0, r2, r0
   1f384:	eb0044eb 	bl	30738 <__aeabi_uidivmod>
   1f388:	e584100c 	str	r1, [r4, #12]
   1f38c:	e8bd8010 	pop	{r4, pc}
   1f390:	e3a0206f 	mov	r2, #111	; 0x6f
   1f394:	e59f1024 	ldr	r1, [pc, #36]	; 1f3c0 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   1f398:	e59f0024 	ldr	r0, [pc, #36]	; 1f3c4 <CRetransmissionQueue::Advance(unsigned int)+0x78>
   1f39c:	eb0010b7 	bl	23680 <assertion_failed>
   1f3a0:	e3a02070 	mov	r2, #112	; 0x70
   1f3a4:	e59f1014 	ldr	r1, [pc, #20]	; 1f3c0 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   1f3a8:	e59f0018 	ldr	r0, [pc, #24]	; 1f3c8 <CRetransmissionQueue::Advance(unsigned int)+0x7c>
   1f3ac:	eb0010b3 	bl	23680 <assertion_failed>
   1f3b0:	e3a02071 	mov	r2, #113	; 0x71
   1f3b4:	e59f1004 	ldr	r1, [pc, #4]	; 1f3c0 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   1f3b8:	e59f000c 	ldr	r0, [pc, #12]	; 1f3cc <CRetransmissionQueue::Advance(unsigned int)+0x80>
   1f3bc:	eb0010af 	bl	23680 <assertion_failed>
   1f3c0:	000398e4 	.word	0x000398e4
   1f3c4:	000398fc 	.word	0x000398fc
   1f3c8:	0003991c 	.word	0x0003991c
   1f3cc:	00039954 	.word	0x00039954

0001f3d0 <CRetransmissionQueue::Reset()>:
   1f3d0:	e590300c 	ldr	r3, [r0, #12]
   1f3d4:	e5803010 	str	r3, [r0, #16]
   1f3d8:	e12fff1e 	bx	lr

0001f3dc <CRetransmissionQueue::Flush()>:
   1f3dc:	e3a03000 	mov	r3, #0
   1f3e0:	e5803008 	str	r3, [r0, #8]
   1f3e4:	e580300c 	str	r3, [r0, #12]
   1f3e8:	e5803010 	str	r3, [r0, #16]
   1f3ec:	e12fff1e 	bx	lr

0001f3f0 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>:
   1f3f0:	e92d4010 	push	{r4, lr}
   1f3f4:	e1a04000 	mov	r4, r0
   1f3f8:	eb002660 	bl	28d80 <CTimer::Get()>
   1f3fc:	e3a03000 	mov	r3, #0
   1f400:	e3a02001 	mov	r2, #1
   1f404:	e3a01f4b 	mov	r1, #300	; 0x12c
   1f408:	e1500003 	cmp	r0, r3
   1f40c:	e5840000 	str	r0, [r4]
   1f410:	e5841008 	str	r1, [r4, #8]
   1f414:	e5843004 	str	r3, [r4, #4]
   1f418:	e5c43018 	strb	r3, [r4, #24]
   1f41c:	e5843020 	str	r3, [r4, #32]
   1f420:	e5c4200c 	strb	r2, [r4, #12]
   1f424:	e5842024 	str	r2, [r4, #36]	; 0x24
   1f428:	0a000001 	beq	1f434 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x44>
   1f42c:	e1a00004 	mov	r0, r4
   1f430:	e8bd8010 	pop	{r4, pc}
   1f434:	e3a02033 	mov	r2, #51	; 0x33
   1f438:	e59f1004 	ldr	r1, [pc, #4]	; 1f444 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x54>
   1f43c:	e59f0004 	ldr	r0, [pc, #4]	; 1f448 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x58>
   1f440:	eb00108e 	bl	23680 <assertion_failed>
   1f444:	0003998c 	.word	0x0003998c
   1f448:	000346bc 	.word	0x000346bc

0001f44c <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>:
   1f44c:	e12fff1e 	bx	lr

0001f450 <CRetransmissionTimeoutCalculator::GetRTO() const>:
   1f450:	e5900008 	ldr	r0, [r0, #8]
   1f454:	e12fff1e 	bx	lr

0001f458 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>:
   1f458:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   1f45c:	e3530000 	cmp	r3, #0
   1f460:	1a000007 	bne	1f484 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)+0x2c>
   1f464:	e3a0cf4b 	mov	ip, #300	; 0x12c
   1f468:	e3a02001 	mov	r2, #1
   1f46c:	e5801004 	str	r1, [r0, #4]
   1f470:	e5c03018 	strb	r3, [r0, #24]
   1f474:	e5803020 	str	r3, [r0, #32]
   1f478:	e580c008 	str	ip, [r0, #8]
   1f47c:	e5c0200c 	strb	r2, [r0, #12]
   1f480:	e12fff1e 	bx	lr
   1f484:	e92d4070 	push	{r4, r5, r6, lr}
   1f488:	e1a04000 	mov	r4, r0
   1f48c:	e1a00003 	mov	r0, r3
   1f490:	e1a05001 	mov	r5, r1
   1f494:	eb002dc8 	bl	2abbc <EnterCritical>
   1f498:	e3a03000 	mov	r3, #0
   1f49c:	e3a01f4b 	mov	r1, #300	; 0x12c
   1f4a0:	e3a02001 	mov	r2, #1
   1f4a4:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   1f4a8:	e5845004 	str	r5, [r4, #4]
   1f4ac:	e1500003 	cmp	r0, r3
   1f4b0:	e5841008 	str	r1, [r4, #8]
   1f4b4:	e5c4200c 	strb	r2, [r4, #12]
   1f4b8:	e5c43018 	strb	r3, [r4, #24]
   1f4bc:	e5843020 	str	r3, [r4, #32]
   1f4c0:	08bd8070 	popeq	{r4, r5, r6, pc}
   1f4c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   1f4c8:	ea002de6 	b	2ac68 <LeaveCritical>

0001f4cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>:
   1f4cc:	e92d4010 	push	{r4, lr}
   1f4d0:	e1a04000 	mov	r4, r0
   1f4d4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1f4d8:	e3500000 	cmp	r0, #0
   1f4dc:	1a000012 	bne	1f52c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x60>
   1f4e0:	e5d43018 	ldrb	r3, [r4, #24]
   1f4e4:	e3530000 	cmp	r3, #0
   1f4e8:	1a00000e 	bne	1f528 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x5c>
   1f4ec:	e5943020 	ldr	r3, [r4, #32]
   1f4f0:	e3530000 	cmp	r3, #0
   1f4f4:	1a000006 	bne	1f514 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1f4f8:	e3a03001 	mov	r3, #1
   1f4fc:	e5940000 	ldr	r0, [r4]
   1f500:	e5c43018 	strb	r3, [r4, #24]
   1f504:	e3500000 	cmp	r0, #0
   1f508:	0a00000f 	beq	1f54c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x80>
   1f50c:	eb002365 	bl	282a8 <CTimer::GetTicks() const>
   1f510:	e584001c 	str	r0, [r4, #28]
   1f514:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1f518:	e3530000 	cmp	r3, #0
   1f51c:	08bd8010 	popeq	{r4, pc}
   1f520:	e8bd4010 	pop	{r4, lr}
   1f524:	ea002dcf 	b	2ac68 <LeaveCritical>
   1f528:	e8bd8010 	pop	{r4, pc}
   1f52c:	eb002da2 	bl	2abbc <EnterCritical>
   1f530:	e5d43018 	ldrb	r3, [r4, #24]
   1f534:	e3530000 	cmp	r3, #0
   1f538:	1afffff5 	bne	1f514 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1f53c:	e5943020 	ldr	r3, [r4, #32]
   1f540:	e3530000 	cmp	r3, #0
   1f544:	1afffff2 	bne	1f514 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   1f548:	eaffffea 	b	1f4f8 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x2c>
   1f54c:	e3a0205f 	mov	r2, #95	; 0x5f
   1f550:	e59f1004 	ldr	r1, [pc, #4]	; 1f55c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x90>
   1f554:	e59f0004 	ldr	r0, [pc, #4]	; 1f560 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x94>
   1f558:	eb001048 	bl	23680 <assertion_failed>
   1f55c:	0003998c 	.word	0x0003998c
   1f560:	000346bc 	.word	0x000346bc

0001f564 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>:
   1f564:	e92d4010 	push	{r4, lr}
   1f568:	e1a04000 	mov	r4, r0
   1f56c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1f570:	e3500000 	cmp	r0, #0
   1f574:	1a000011 	bne	1f5c0 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x5c>
   1f578:	e5943008 	ldr	r3, [r4, #8]
   1f57c:	e59f2048 	ldr	r2, [pc, #72]	; 1f5cc <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x68>
   1f580:	e1a03083 	lsl	r3, r3, #1
   1f584:	e1530002 	cmp	r3, r2
   1f588:	21a03002 	movcs	r3, r2
   1f58c:	e5942020 	ldr	r2, [r4, #32]
   1f590:	e5843008 	str	r3, [r4, #8]
   1f594:	e2823001 	add	r3, r2, #1
   1f598:	e3530002 	cmp	r3, #2
   1f59c:	e5843020 	str	r3, [r4, #32]
   1f5a0:	83a03001 	movhi	r3, #1
   1f5a4:	85c4300c 	strbhi	r3, [r4, #12]
   1f5a8:	e3a03000 	mov	r3, #0
   1f5ac:	e1500003 	cmp	r0, r3
   1f5b0:	e5c43018 	strb	r3, [r4, #24]
   1f5b4:	08bd8010 	popeq	{r4, pc}
   1f5b8:	e8bd4010 	pop	{r4, lr}
   1f5bc:	ea002da9 	b	2ac68 <LeaveCritical>
   1f5c0:	eb002d7d 	bl	2abbc <EnterCritical>
   1f5c4:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   1f5c8:	eaffffea 	b	1f578 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x14>
   1f5cc:	00002ee0 	.word	0x00002ee0

0001f5d0 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>:
   1f5d0:	e5d0300c 	ldrb	r3, [r0, #12]
   1f5d4:	e3530000 	cmp	r3, #0
   1f5d8:	0a00000e 	beq	1f618 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x48>
   1f5dc:	e3a02000 	mov	r2, #0
   1f5e0:	e1a030a1 	lsr	r3, r1, #1
   1f5e4:	e5801010 	str	r1, [r0, #16]
   1f5e8:	e5c0200c 	strb	r2, [r0, #12]
   1f5ec:	e5803014 	str	r3, [r0, #20]
   1f5f0:	e1b03103 	lsls	r3, r3, #2
   1f5f4:	03a03001 	moveq	r3, #1
   1f5f8:	e0833001 	add	r3, r3, r1
   1f5fc:	e3530063 	cmp	r3, #99	; 0x63
   1f600:	9a000012 	bls	1f650 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x80>
   1f604:	e59f1050 	ldr	r1, [pc, #80]	; 1f65c <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x8c>
   1f608:	e1530001 	cmp	r3, r1
   1f60c:	21a03001 	movcs	r3, r1
   1f610:	e5803008 	str	r3, [r0, #8]
   1f614:	e12fff1e 	bx	lr
   1f618:	e5903010 	ldr	r3, [r0, #16]
   1f61c:	e5902014 	ldr	r2, [r0, #20]
   1f620:	e043c001 	sub	ip, r3, r1
   1f624:	e35c0000 	cmp	ip, #0
   1f628:	b26cc000 	rsblt	ip, ip, #0
   1f62c:	e0633183 	rsb	r3, r3, r3, lsl #3
   1f630:	e0822082 	add	r2, r2, r2, lsl #1
   1f634:	e0833001 	add	r3, r3, r1
   1f638:	e082200c 	add	r2, r2, ip
   1f63c:	e1a011a3 	lsr	r1, r3, #3
   1f640:	e1a03122 	lsr	r3, r2, #2
   1f644:	e5801010 	str	r1, [r0, #16]
   1f648:	e5803014 	str	r3, [r0, #20]
   1f64c:	eaffffe7 	b	1f5f0 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x20>
   1f650:	e3a03064 	mov	r3, #100	; 0x64
   1f654:	e5803008 	str	r3, [r0, #8]
   1f658:	e12fff1e 	bx	lr
   1f65c:	00002ee0 	.word	0x00002ee0

0001f660 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>:
   1f660:	e92d4010 	push	{r4, lr}
   1f664:	e1a04000 	mov	r4, r0
   1f668:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   1f66c:	e3500000 	cmp	r0, #0
   1f670:	1a000015 	bne	1f6cc <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x6c>
   1f674:	e5d43018 	ldrb	r3, [r4, #24]
   1f678:	e3530000 	cmp	r3, #0
   1f67c:	0a00000a 	beq	1f6ac <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x4c>
   1f680:	e5943020 	ldr	r3, [r4, #32]
   1f684:	e3530000 	cmp	r3, #0
   1f688:	1a000007 	bne	1f6ac <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x4c>
   1f68c:	e5940000 	ldr	r0, [r4]
   1f690:	e3500000 	cmp	r0, #0
   1f694:	0a00000e 	beq	1f6d4 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x74>
   1f698:	eb002302 	bl	282a8 <CTimer::GetTicks() const>
   1f69c:	e594101c 	ldr	r1, [r4, #28]
   1f6a0:	e0401001 	sub	r1, r0, r1
   1f6a4:	e1a00004 	mov	r0, r4
   1f6a8:	ebffffc8 	bl	1f5d0 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>
   1f6ac:	e3a03000 	mov	r3, #0
   1f6b0:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   1f6b4:	e5c43018 	strb	r3, [r4, #24]
   1f6b8:	e1520003 	cmp	r2, r3
   1f6bc:	e5843020 	str	r3, [r4, #32]
   1f6c0:	08bd8010 	popeq	{r4, pc}
   1f6c4:	e8bd4010 	pop	{r4, lr}
   1f6c8:	ea002d66 	b	2ac68 <LeaveCritical>
   1f6cc:	eb002d3a 	bl	2abbc <EnterCritical>
   1f6d0:	eaffffe7 	b	1f674 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x14>
   1f6d4:	e3a02074 	mov	r2, #116	; 0x74
   1f6d8:	e59f1004 	ldr	r1, [pc, #4]	; 1f6e4 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x84>
   1f6dc:	e59f0004 	ldr	r0, [pc, #4]	; 1f6e8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x88>
   1f6e0:	eb000fe6 	bl	23680 <assertion_failed>
   1f6e4:	0003998c 	.word	0x0003998c
   1f6e8:	000346bc 	.word	0x000346bc

0001f6ec <CTCPRejector::~CTCPRejector()>:
   1f6ec:	e92d4010 	push	{r4, lr}
   1f6f0:	e1a04000 	mov	r4, r0
   1f6f4:	e59f300c 	ldr	r3, [pc, #12]	; 1f708 <CTCPRejector::~CTCPRejector()+0x1c>
   1f6f8:	e5803000 	str	r3, [r0]
   1f6fc:	ebfff31a 	bl	1c36c <CNetConnection::~CNetConnection()>
   1f700:	e1a00004 	mov	r0, r4
   1f704:	e8bd8010 	pop	{r4, pc}
   1f708:	000399ac 	.word	0x000399ac

0001f70c <CTCPRejector::~CTCPRejector()>:
   1f70c:	e92d4010 	push	{r4, lr}
   1f710:	e1a04000 	mov	r4, r0
   1f714:	e59f3018 	ldr	r3, [pc, #24]	; 1f734 <CTCPRejector::~CTCPRejector()+0x28>
   1f718:	e5803000 	str	r3, [r0]
   1f71c:	ebfff312 	bl	1c36c <CNetConnection::~CNetConnection()>
   1f720:	e1a00004 	mov	r0, r4
   1f724:	e3a0102c 	mov	r1, #44	; 0x2c
   1f728:	eb0029ff 	bl	29f2c <operator delete(void*, unsigned int)>
   1f72c:	e1a00004 	mov	r0, r4
   1f730:	e8bd8010 	pop	{r4, pc}
   1f734:	000399ac 	.word	0x000399ac

0001f738 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>:
   1f738:	e3a03006 	mov	r3, #6
   1f73c:	e92d4010 	push	{r4, lr}
   1f740:	e1a04000 	mov	r4, r0
   1f744:	e24dd008 	sub	sp, sp, #8
   1f748:	e58d3000 	str	r3, [sp]
   1f74c:	e3a03000 	mov	r3, #0
   1f750:	ebfff2df 	bl	1c2d4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1f754:	e1a00004 	mov	r0, r4
   1f758:	e59f3008 	ldr	r3, [pc, #8]	; 1f768 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)+0x30>
   1f75c:	e5843000 	str	r3, [r4]
   1f760:	e28dd008 	add	sp, sp, #8
   1f764:	e8bd8010 	pop	{r4, pc}
   1f768:	000399ac 	.word	0x000399ac

0001f76c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>:
   1f76c:	e92d4010 	push	{r4, lr}
   1f770:	e3110c02 	tst	r1, #512	; 0x200
   1f774:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1f778:	e24dd008 	sub	sp, sp, #8
   1f77c:	1a000024 	bne	1f814 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xa8>
   1f780:	e211ea01 	ands	lr, r1, #4096	; 0x1000
   1f784:	e1a04000 	mov	r4, r0
   1f788:	01a0300e 	moveq	r3, lr
   1f78c:	e3a0e000 	mov	lr, #0
   1f790:	e1d0c1b6 	ldrh	ip, [r0, #22]
   1f794:	e1d001b4 	ldrh	r0, [r0, #20]
   1f798:	e6bf2f32 	rev	r2, r2
   1f79c:	e6bfcfbc 	rev16	ip, ip
   1f7a0:	e6bf0fb0 	rev16	r0, r0
   1f7a4:	16bf3f33 	revne	r3, r3
   1f7a8:	e58d200c 	str	r2, [sp, #12]
   1f7ac:	e1cdc0b8 	strh	ip, [sp, #8]
   1f7b0:	e1cd00ba 	strh	r0, [sp, #10]
   1f7b4:	e381c050 	orr	ip, r1, #80	; 0x50
   1f7b8:	e3a02014 	mov	r2, #20
   1f7bc:	e28d1008 	add	r1, sp, #8
   1f7c0:	e284001c 	add	r0, r4, #28
   1f7c4:	e58d3010 	str	r3, [sp, #16]
   1f7c8:	e1cdc1b4 	strh	ip, [sp, #20]
   1f7cc:	e1cde1b6 	strh	lr, [sp, #22]
   1f7d0:	e1cde1ba 	strh	lr, [sp, #26]
   1f7d4:	e1cde1b8 	strh	lr, [sp, #24]
   1f7d8:	eb000370 	bl	205a0 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1f7dc:	e5943008 	ldr	r3, [r4, #8]
   1f7e0:	e1cd01b8 	strh	r0, [sp, #24]
   1f7e4:	e3530000 	cmp	r3, #0
   1f7e8:	0a00000d 	beq	1f824 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xb8>
   1f7ec:	e3a0c006 	mov	ip, #6
   1f7f0:	e28d2008 	add	r2, sp, #8
   1f7f4:	e284100c 	add	r1, r4, #12
   1f7f8:	e1a00003 	mov	r0, r3
   1f7fc:	e58dc000 	str	ip, [sp]
   1f800:	e3a03014 	mov	r3, #20
   1f804:	ebffe8d3 	bl	19b58 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1f808:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1f80c:	e28dd008 	add	sp, sp, #8
   1f810:	e8bd8010 	pop	{r4, pc}
   1f814:	e3a020a1 	mov	r2, #161	; 0xa1
   1f818:	e59f1014 	ldr	r1, [pc, #20]	; 1f834 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc8>
   1f81c:	e59f0014 	ldr	r0, [pc, #20]	; 1f838 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xcc>
   1f820:	eb000f96 	bl	23680 <assertion_failed>
   1f824:	e3a020c7 	mov	r2, #199	; 0xc7
   1f828:	e59f1004 	ldr	r1, [pc, #4]	; 1f834 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc8>
   1f82c:	e59f0008 	ldr	r0, [pc, #8]	; 1f83c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xd0>
   1f830:	eb000f92 	bl	23680 <assertion_failed>
   1f834:	000399e8 	.word	0x000399e8
   1f838:	000399f8 	.word	0x000399f8
   1f83c:	00038f3c 	.word	0x00038f3c

0001f840 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1f840:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f844:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1f848:	e35c0006 	cmp	ip, #6
   1f84c:	0a000001 	beq	1f858 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f850:	e3a00000 	mov	r0, #0
   1f854:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f858:	e3520013 	cmp	r2, #19
   1f85c:	9a00005a 	bls	1f9cc <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18c>
   1f860:	e3510000 	cmp	r1, #0
   1f864:	e1a06003 	mov	r6, r3
   1f868:	e1a07002 	mov	r7, r2
   1f86c:	e1a04001 	mov	r4, r1
   1f870:	e1a05000 	mov	r5, r0
   1f874:	0a00004c 	beq	1f9ac <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x16c>
   1f878:	e5d43003 	ldrb	r3, [r4, #3]
   1f87c:	e5d11002 	ldrb	r1, [r1, #2]
   1f880:	e1811403 	orr	r1, r1, r3, lsl #8
   1f884:	e6bf1fb1 	rev16	r1, r1
   1f888:	e6ff3071 	uxth	r3, r1
   1f88c:	e3530000 	cmp	r3, #0
   1f890:	e1c011b6 	strh	r1, [r0, #22]
   1f894:	0a00004c 	beq	1f9cc <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18c>
   1f898:	e5900004 	ldr	r0, [r0, #4]
   1f89c:	e3500000 	cmp	r0, #0
   1f8a0:	0a000045 	beq	1f9bc <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x17c>
   1f8a4:	eb00007c 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   1f8a8:	eb0001b6 	bl	1ff88 <CIPAddress::IsNull() const>
   1f8ac:	e3500000 	cmp	r0, #0
   1f8b0:	1affffe6 	bne	1f850 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1f8b4:	e5950004 	ldr	r0, [r5, #4]
   1f8b8:	eb000077 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   1f8bc:	e285801c 	add	r8, r5, #28
   1f8c0:	e1a01000 	mov	r1, r0
   1f8c4:	e1a00008 	mov	r0, r8
   1f8c8:	eb000304 	bl	204e0 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1f8cc:	e1a01006 	mov	r1, r6
   1f8d0:	e1a00008 	mov	r0, r8
   1f8d4:	eb000305 	bl	204f0 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f8d8:	e1a02007 	mov	r2, r7
   1f8dc:	e1a01004 	mov	r1, r4
   1f8e0:	e1a00008 	mov	r0, r8
   1f8e4:	eb00032d 	bl	205a0 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1f8e8:	e3500000 	cmp	r0, #0
   1f8ec:	1affffd7 	bne	1f850 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1f8f0:	e5d40005 	ldrb	r0, [r4, #5]
   1f8f4:	e5d49004 	ldrb	r9, [r4, #4]
   1f8f8:	e5d43009 	ldrb	r3, [r4, #9]
   1f8fc:	e5d41008 	ldrb	r1, [r4, #8]
   1f900:	e1899400 	orr	r9, r9, r0, lsl #8
   1f904:	e5d4000a 	ldrb	r0, [r4, #10]
   1f908:	e1811403 	orr	r1, r1, r3, lsl #8
   1f90c:	e5d4a00d 	ldrb	sl, [r4, #13]
   1f910:	e5d4300c 	ldrb	r3, [r4, #12]
   1f914:	e5d42006 	ldrb	r2, [r4, #6]
   1f918:	e1811800 	orr	r1, r1, r0, lsl #16
   1f91c:	e5d4000b 	ldrb	r0, [r4, #11]
   1f920:	e183a40a 	orr	sl, r3, sl, lsl #8
   1f924:	e1a03223 	lsr	r3, r3, #4
   1f928:	e0477103 	sub	r7, r7, r3, lsl #2
   1f92c:	e1811c00 	orr	r1, r1, r0, lsl #24
   1f930:	e1899802 	orr	r9, r9, r2, lsl #16
   1f934:	e31a0c02 	tst	sl, #512	; 0x200
   1f938:	e5d42007 	ldrb	r2, [r4, #7]
   1f93c:	12877001 	addne	r7, r7, #1
   1f940:	e6bf8f31 	rev	r8, r1
   1f944:	e31a0c01 	tst	sl, #256	; 0x100
   1f948:	e1a01006 	mov	r1, r6
   1f94c:	e285000c 	add	r0, r5, #12
   1f950:	e1899c02 	orr	r9, r9, r2, lsl #24
   1f954:	12877001 	addne	r7, r7, #1
   1f958:	eb000147 	bl	1fe7c <CIPAddress::Set(CIPAddress const&)>
   1f95c:	e5d42000 	ldrb	r2, [r4]
   1f960:	e5d41001 	ldrb	r1, [r4, #1]
   1f964:	e21a3b01 	ands	r3, sl, #1024	; 0x400
   1f968:	e1822401 	orr	r2, r2, r1, lsl #8
   1f96c:	e6bf2fb2 	rev16	r2, r2
   1f970:	e6bf9f39 	rev	r9, r9
   1f974:	e1c521b4 	strh	r2, [r5, #20]
   1f978:	1a000009 	bne	1f9a4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   1f97c:	e21a2a01 	ands	r2, sl, #4096	; 0x1000
   1f980:	00893007 	addeq	r3, r9, r7
   1f984:	01a00005 	moveq	r0, r5
   1f988:	03a01b05 	moveq	r1, #5120	; 0x1400
   1f98c:	11a02008 	movne	r2, r8
   1f990:	11a00005 	movne	r0, r5
   1f994:	13a01b01 	movne	r1, #1024	; 0x400
   1f998:	ebffff73 	bl	1f76c <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>
   1f99c:	e3a00001 	mov	r0, #1
   1f9a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f9a4:	e3a00001 	mov	r0, #1
   1f9a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f9ac:	e3a02052 	mov	r2, #82	; 0x52
   1f9b0:	e59f101c 	ldr	r1, [pc, #28]	; 1f9d4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x194>
   1f9b4:	e59f001c 	ldr	r0, [pc, #28]	; 1f9d8 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x198>
   1f9b8:	eb000f30 	bl	23680 <assertion_failed>
   1f9bc:	e3a0205b 	mov	r2, #91	; 0x5b
   1f9c0:	e59f100c 	ldr	r1, [pc, #12]	; 1f9d4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x194>
   1f9c4:	e59f0010 	ldr	r0, [pc, #16]	; 1f9dc <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x19c>
   1f9c8:	eb000f2c 	bl	23680 <assertion_failed>
   1f9cc:	e3e00000 	mvn	r0, #0
   1f9d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f9d4:	000399e8 	.word	0x000399e8
   1f9d8:	00039020 	.word	0x00039020
   1f9dc:	00038f28 	.word	0x00038f28

0001f9e0 <CTCPRejector::Connect()>:
   1f9e0:	e3e00000 	mvn	r0, #0
   1f9e4:	e12fff1e 	bx	lr

0001f9e8 <CTCPRejector::Accept(CIPAddress*, unsigned short*)>:
   1f9e8:	e3e00000 	mvn	r0, #0
   1f9ec:	e12fff1e 	bx	lr

0001f9f0 <CTCPRejector::Close()>:
   1f9f0:	e3e00000 	mvn	r0, #0
   1f9f4:	e12fff1e 	bx	lr

0001f9f8 <CTCPRejector::Send(void const*, unsigned int, int)>:
   1f9f8:	e3e00000 	mvn	r0, #0
   1f9fc:	e12fff1e 	bx	lr

0001fa00 <CTCPRejector::Receive(void*, int)>:
   1fa00:	e3e00000 	mvn	r0, #0
   1fa04:	e12fff1e 	bx	lr

0001fa08 <CTCPRejector::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1fa08:	e3e00000 	mvn	r0, #0
   1fa0c:	e12fff1e 	bx	lr

0001fa10 <CTCPRejector::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1fa10:	e3e00000 	mvn	r0, #0
   1fa14:	e12fff1e 	bx	lr

0001fa18 <CTCPRejector::SetOptionBroadcast(bool)>:
   1fa18:	e3e00000 	mvn	r0, #0
   1fa1c:	e12fff1e 	bx	lr

0001fa20 <CTCPRejector::IsConnected() const>:
   1fa20:	e3a00000 	mov	r0, #0
   1fa24:	e12fff1e 	bx	lr

0001fa28 <CTCPRejector::IsTerminated() const>:
   1fa28:	e3a00000 	mov	r0, #0
   1fa2c:	e12fff1e 	bx	lr

0001fa30 <CTCPRejector::Process()>:
   1fa30:	e12fff1e 	bx	lr

0001fa34 <CTCPRejector::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1fa34:	e3a00000 	mov	r0, #0
   1fa38:	e12fff1e 	bx	lr

0001fa3c <CNetConfig::~CNetConfig()>:
   1fa3c:	e92d4010 	push	{r4, lr}
   1fa40:	e1a04000 	mov	r4, r0
   1fa44:	e2800024 	add	r0, r0, #36	; 0x24
   1fa48:	eb000085 	bl	1fc64 <CIPAddress::~CIPAddress()>
   1fa4c:	e284001c 	add	r0, r4, #28
   1fa50:	eb000083 	bl	1fc64 <CIPAddress::~CIPAddress()>
   1fa54:	e2840014 	add	r0, r4, #20
   1fa58:	eb000081 	bl	1fc64 <CIPAddress::~CIPAddress()>
   1fa5c:	e284000c 	add	r0, r4, #12
   1fa60:	eb00007f 	bl	1fc64 <CIPAddress::~CIPAddress()>
   1fa64:	e2840004 	add	r0, r4, #4
   1fa68:	eb00007d 	bl	1fc64 <CIPAddress::~CIPAddress()>
   1fa6c:	e1a00004 	mov	r0, r4
   1fa70:	e8bd8010 	pop	{r4, pc}

0001fa74 <CNetConfig::SetDHCP(bool)>:
   1fa74:	e5c01000 	strb	r1, [r0]
   1fa78:	e12fff1e 	bx	lr

0001fa7c <CNetConfig::SetDefaultGateway(unsigned int)>:
   1fa7c:	e2800014 	add	r0, r0, #20
   1fa80:	ea0000e4 	b	1fe18 <CIPAddress::Set(unsigned int)>

0001fa84 <CNetConfig::SetDNSServer(unsigned int)>:
   1fa84:	e280001c 	add	r0, r0, #28
   1fa88:	ea0000e2 	b	1fe18 <CIPAddress::Set(unsigned int)>

0001fa8c <CNetConfig::SetDefaultGateway(unsigned char const*)>:
   1fa8c:	e2800014 	add	r0, r0, #20
   1fa90:	ea0000e4 	b	1fe28 <CIPAddress::Set(unsigned char const*)>

0001fa94 <CNetConfig::SetDNSServer(unsigned char const*)>:
   1fa94:	e280001c 	add	r0, r0, #28
   1fa98:	ea0000e2 	b	1fe28 <CIPAddress::Set(unsigned char const*)>

0001fa9c <CNetConfig::GetIPAddress() const>:
   1fa9c:	e2800004 	add	r0, r0, #4
   1faa0:	e12fff1e 	bx	lr

0001faa4 <CNetConfig::IsDHCPUsed() const>:
   1faa4:	e5d00000 	ldrb	r0, [r0]
   1faa8:	e12fff1e 	bx	lr

0001faac <CNetConfig::GetNetMask() const>:
   1faac:	e280000c 	add	r0, r0, #12
   1fab0:	ea000111 	b	1fefc <CIPAddress::Get() const>

0001fab4 <CNetConfig::GetDefaultGateway() const>:
   1fab4:	e2800014 	add	r0, r0, #20
   1fab8:	e12fff1e 	bx	lr

0001fabc <CNetConfig::GetDNSServer() const>:
   1fabc:	e280001c 	add	r0, r0, #28
   1fac0:	e12fff1e 	bx	lr

0001fac4 <CNetConfig::GetBroadcastAddress() const>:
   1fac4:	e2800024 	add	r0, r0, #36	; 0x24
   1fac8:	e12fff1e 	bx	lr

0001facc <CNetConfig::UpdateBroadcastAddress()>:
   1facc:	e92d4010 	push	{r4, lr}
   1fad0:	e1a04000 	mov	r4, r0
   1fad4:	e24dd008 	sub	sp, sp, #8
   1fad8:	e1a0100d 	mov	r1, sp
   1fadc:	e2800004 	add	r0, r0, #4
   1fae0:	eb000111 	bl	1ff2c <CIPAddress::CopyTo(unsigned char*) const>
   1fae4:	e284000c 	add	r0, r4, #12
   1fae8:	e28d1004 	add	r1, sp, #4
   1faec:	eb00010e 	bl	1ff2c <CIPAddress::CopyTo(unsigned char*) const>
   1faf0:	e89d000a 	ldm	sp, {r1, r3}
   1faf4:	e1e03003 	mvn	r3, r3
   1faf8:	e2840024 	add	r0, r4, #36	; 0x24
   1fafc:	e1831001 	orr	r1, r3, r1
   1fb00:	eb0000c4 	bl	1fe18 <CIPAddress::Set(unsigned int)>
   1fb04:	e28dd008 	add	sp, sp, #8
   1fb08:	e8bd8010 	pop	{r4, pc}

0001fb0c <CNetConfig::Reset()>:
   1fb0c:	e92d4070 	push	{r4, r5, r6, lr}
   1fb10:	e1a04000 	mov	r4, r0
   1fb14:	e59f5038 	ldr	r5, [pc, #56]	; 1fb54 <CNetConfig::Reset()+0x48>
   1fb18:	e2800004 	add	r0, r0, #4
   1fb1c:	e1a01005 	mov	r1, r5
   1fb20:	eb0000c0 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   1fb24:	e1a01005 	mov	r1, r5
   1fb28:	e284000c 	add	r0, r4, #12
   1fb2c:	eb0000bd 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   1fb30:	e1a01005 	mov	r1, r5
   1fb34:	e2840014 	add	r0, r4, #20
   1fb38:	eb0000ba 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   1fb3c:	e284001c 	add	r0, r4, #28
   1fb40:	e1a01005 	mov	r1, r5
   1fb44:	eb0000b7 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   1fb48:	e1a00004 	mov	r0, r4
   1fb4c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1fb50:	eaffffdd 	b	1facc <CNetConfig::UpdateBroadcastAddress()>
   1fb54:	00039a14 	.word	0x00039a14

0001fb58 <CNetConfig::CNetConfig()>:
   1fb58:	e3a03001 	mov	r3, #1
   1fb5c:	e92d4010 	push	{r4, lr}
   1fb60:	e1a04000 	mov	r4, r0
   1fb64:	e4c03004 	strb	r3, [r0], #4
   1fb68:	eb000027 	bl	1fc0c <CIPAddress::CIPAddress()>
   1fb6c:	e284000c 	add	r0, r4, #12
   1fb70:	eb000025 	bl	1fc0c <CIPAddress::CIPAddress()>
   1fb74:	e2840014 	add	r0, r4, #20
   1fb78:	eb000023 	bl	1fc0c <CIPAddress::CIPAddress()>
   1fb7c:	e284001c 	add	r0, r4, #28
   1fb80:	eb000021 	bl	1fc0c <CIPAddress::CIPAddress()>
   1fb84:	e2840024 	add	r0, r4, #36	; 0x24
   1fb88:	eb00001f 	bl	1fc0c <CIPAddress::CIPAddress()>
   1fb8c:	e1a00004 	mov	r0, r4
   1fb90:	ebffffdd 	bl	1fb0c <CNetConfig::Reset()>
   1fb94:	e1a00004 	mov	r0, r4
   1fb98:	e8bd8010 	pop	{r4, pc}

0001fb9c <CNetConfig::SetIPAddress(unsigned int)>:
   1fb9c:	e92d4010 	push	{r4, lr}
   1fba0:	e1a04000 	mov	r4, r0
   1fba4:	e2800004 	add	r0, r0, #4
   1fba8:	eb00009a 	bl	1fe18 <CIPAddress::Set(unsigned int)>
   1fbac:	e1a00004 	mov	r0, r4
   1fbb0:	e8bd4010 	pop	{r4, lr}
   1fbb4:	eaffffc4 	b	1facc <CNetConfig::UpdateBroadcastAddress()>

0001fbb8 <CNetConfig::SetNetMask(unsigned int)>:
   1fbb8:	e92d4010 	push	{r4, lr}
   1fbbc:	e1a04000 	mov	r4, r0
   1fbc0:	e280000c 	add	r0, r0, #12
   1fbc4:	eb000093 	bl	1fe18 <CIPAddress::Set(unsigned int)>
   1fbc8:	e1a00004 	mov	r0, r4
   1fbcc:	e8bd4010 	pop	{r4, lr}
   1fbd0:	eaffffbd 	b	1facc <CNetConfig::UpdateBroadcastAddress()>

0001fbd4 <CNetConfig::SetIPAddress(unsigned char const*)>:
   1fbd4:	e92d4010 	push	{r4, lr}
   1fbd8:	e1a04000 	mov	r4, r0
   1fbdc:	e2800004 	add	r0, r0, #4
   1fbe0:	eb000090 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   1fbe4:	e1a00004 	mov	r0, r4
   1fbe8:	e8bd4010 	pop	{r4, lr}
   1fbec:	eaffffb6 	b	1facc <CNetConfig::UpdateBroadcastAddress()>

0001fbf0 <CNetConfig::SetNetMask(unsigned char const*)>:
   1fbf0:	e92d4010 	push	{r4, lr}
   1fbf4:	e1a04000 	mov	r4, r0
   1fbf8:	e280000c 	add	r0, r0, #12
   1fbfc:	eb000089 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   1fc00:	e1a00004 	mov	r0, r4
   1fc04:	e8bd4010 	pop	{r4, lr}
   1fc08:	eaffffaf 	b	1facc <CNetConfig::UpdateBroadcastAddress()>

0001fc0c <CIPAddress::CIPAddress()>:
   1fc0c:	e3a02000 	mov	r2, #0
   1fc10:	e5c02000 	strb	r2, [r0]
   1fc14:	e12fff1e 	bx	lr

0001fc18 <CIPAddress::CIPAddress(unsigned int)>:
   1fc18:	e3a02001 	mov	r2, #1
   1fc1c:	e5801004 	str	r1, [r0, #4]
   1fc20:	e5c02000 	strb	r2, [r0]
   1fc24:	e12fff1e 	bx	lr

0001fc28 <CIPAddress::CIPAddress(CIPAddress const&)>:
   1fc28:	e5d12000 	ldrb	r2, [r1]
   1fc2c:	e3520000 	cmp	r2, #0
   1fc30:	0a000004 	beq	1fc48 <CIPAddress::CIPAddress(CIPAddress const&)+0x20>
   1fc34:	e3a0c001 	mov	ip, #1
   1fc38:	e5912004 	ldr	r2, [r1, #4]
   1fc3c:	e5c0c000 	strb	ip, [r0]
   1fc40:	e5802004 	str	r2, [r0, #4]
   1fc44:	e12fff1e 	bx	lr
   1fc48:	e92d4010 	push	{r4, lr}
   1fc4c:	e3a0202e 	mov	r2, #46	; 0x2e
   1fc50:	e59f1004 	ldr	r1, [pc, #4]	; 1fc5c <CIPAddress::CIPAddress(CIPAddress const&)+0x34>
   1fc54:	e59f0004 	ldr	r0, [pc, #4]	; 1fc60 <CIPAddress::CIPAddress(CIPAddress const&)+0x38>
   1fc58:	eb000e88 	bl	23680 <assertion_failed>
   1fc5c:	00039a18 	.word	0x00039a18
   1fc60:	00039a28 	.word	0x00039a28

0001fc64 <CIPAddress::~CIPAddress()>:
   1fc64:	e12fff1e 	bx	lr

0001fc68 <CIPAddress::operator==(CIPAddress const&) const>:
   1fc68:	e5d03000 	ldrb	r3, [r0]
   1fc6c:	e92d4010 	push	{r4, lr}
   1fc70:	e3530000 	cmp	r3, #0
   1fc74:	0a000008 	beq	1fc9c <CIPAddress::operator==(CIPAddress const&) const+0x34>
   1fc78:	e5d13000 	ldrb	r3, [r1]
   1fc7c:	e3530000 	cmp	r3, #0
   1fc80:	0a000009 	beq	1fcac <CIPAddress::operator==(CIPAddress const&) const+0x44>
   1fc84:	e5900004 	ldr	r0, [r0, #4]
   1fc88:	e5913004 	ldr	r3, [r1, #4]
   1fc8c:	e0400003 	sub	r0, r0, r3
   1fc90:	e16f0f10 	clz	r0, r0
   1fc94:	e1a002a0 	lsr	r0, r0, #5
   1fc98:	e8bd8010 	pop	{r4, pc}
   1fc9c:	e3a0203e 	mov	r2, #62	; 0x3e
   1fca0:	e59f1014 	ldr	r1, [pc, #20]	; 1fcbc <CIPAddress::operator==(CIPAddress const&) const+0x54>
   1fca4:	e59f0014 	ldr	r0, [pc, #20]	; 1fcc0 <CIPAddress::operator==(CIPAddress const&) const+0x58>
   1fca8:	eb000e74 	bl	23680 <assertion_failed>
   1fcac:	e3a0203f 	mov	r2, #63	; 0x3f
   1fcb0:	e59f1004 	ldr	r1, [pc, #4]	; 1fcbc <CIPAddress::operator==(CIPAddress const&) const+0x54>
   1fcb4:	e59f0008 	ldr	r0, [pc, #8]	; 1fcc4 <CIPAddress::operator==(CIPAddress const&) const+0x5c>
   1fcb8:	eb000e70 	bl	23680 <assertion_failed>
   1fcbc:	00039a18 	.word	0x00039a18
   1fcc0:	00034e1c 	.word	0x00034e1c
   1fcc4:	00039a3c 	.word	0x00039a3c

0001fcc8 <CIPAddress::operator!=(CIPAddress const&) const>:
   1fcc8:	e5d03000 	ldrb	r3, [r0]
   1fccc:	e92d4010 	push	{r4, lr}
   1fcd0:	e3530000 	cmp	r3, #0
   1fcd4:	0a000007 	beq	1fcf8 <CIPAddress::operator!=(CIPAddress const&) const+0x30>
   1fcd8:	e5d13000 	ldrb	r3, [r1]
   1fcdc:	e3530000 	cmp	r3, #0
   1fce0:	0a000008 	beq	1fd08 <CIPAddress::operator!=(CIPAddress const&) const+0x40>
   1fce4:	e5900004 	ldr	r0, [r0, #4]
   1fce8:	e5913004 	ldr	r3, [r1, #4]
   1fcec:	e0500003 	subs	r0, r0, r3
   1fcf0:	13a00001 	movne	r0, #1
   1fcf4:	e8bd8010 	pop	{r4, pc}
   1fcf8:	e3a02045 	mov	r2, #69	; 0x45
   1fcfc:	e59f1014 	ldr	r1, [pc, #20]	; 1fd18 <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   1fd00:	e59f0014 	ldr	r0, [pc, #20]	; 1fd1c <CIPAddress::operator!=(CIPAddress const&) const+0x54>
   1fd04:	eb000e5d 	bl	23680 <assertion_failed>
   1fd08:	e3a02046 	mov	r2, #70	; 0x46
   1fd0c:	e59f1004 	ldr	r1, [pc, #4]	; 1fd18 <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   1fd10:	e59f0008 	ldr	r0, [pc, #8]	; 1fd20 <CIPAddress::operator!=(CIPAddress const&) const+0x58>
   1fd14:	eb000e59 	bl	23680 <assertion_failed>
   1fd18:	00039a18 	.word	0x00039a18
   1fd1c:	00034e1c 	.word	0x00034e1c
   1fd20:	00039a3c 	.word	0x00039a3c

0001fd24 <CIPAddress::operator==(unsigned char const*) const>:
   1fd24:	e5d03000 	ldrb	r3, [r0]
   1fd28:	e92d4010 	push	{r4, lr}
   1fd2c:	e3530000 	cmp	r3, #0
   1fd30:	0a000007 	beq	1fd54 <CIPAddress::operator==(unsigned char const*) const+0x30>
   1fd34:	e3510000 	cmp	r1, #0
   1fd38:	0a000009 	beq	1fd64 <CIPAddress::operator==(unsigned char const*) const+0x40>
   1fd3c:	e3a02004 	mov	r2, #4
   1fd40:	e2800004 	add	r0, r0, #4
   1fd44:	eb002455 	bl	28ea0 <memcmp>
   1fd48:	e16f0f10 	clz	r0, r0
   1fd4c:	e1a002a0 	lsr	r0, r0, #5
   1fd50:	e8bd8010 	pop	{r4, pc}
   1fd54:	e3a0204c 	mov	r2, #76	; 0x4c
   1fd58:	e59f1014 	ldr	r1, [pc, #20]	; 1fd74 <CIPAddress::operator==(unsigned char const*) const+0x50>
   1fd5c:	e59f0014 	ldr	r0, [pc, #20]	; 1fd78 <CIPAddress::operator==(unsigned char const*) const+0x54>
   1fd60:	eb000e46 	bl	23680 <assertion_failed>
   1fd64:	e3a0204d 	mov	r2, #77	; 0x4d
   1fd68:	e59f1004 	ldr	r1, [pc, #4]	; 1fd74 <CIPAddress::operator==(unsigned char const*) const+0x50>
   1fd6c:	e59f0008 	ldr	r0, [pc, #8]	; 1fd7c <CIPAddress::operator==(unsigned char const*) const+0x58>
   1fd70:	eb000e42 	bl	23680 <assertion_failed>
   1fd74:	00039a18 	.word	0x00039a18
   1fd78:	00034e1c 	.word	0x00034e1c
   1fd7c:	00039a50 	.word	0x00039a50

0001fd80 <CIPAddress::operator!=(unsigned char const*) const>:
   1fd80:	e92d4010 	push	{r4, lr}
   1fd84:	ebffffe6 	bl	1fd24 <CIPAddress::operator==(unsigned char const*) const>
   1fd88:	e2200001 	eor	r0, r0, #1
   1fd8c:	e6ef0070 	uxtb	r0, r0
   1fd90:	e8bd8010 	pop	{r4, pc}

0001fd94 <CIPAddress::operator==(unsigned int) const>:
   1fd94:	e5d03000 	ldrb	r3, [r0]
   1fd98:	e3530000 	cmp	r3, #0
   1fd9c:	0a000004 	beq	1fdb4 <CIPAddress::operator==(unsigned int) const+0x20>
   1fda0:	e5900004 	ldr	r0, [r0, #4]
   1fda4:	e0400001 	sub	r0, r0, r1
   1fda8:	e16f0f10 	clz	r0, r0
   1fdac:	e1a002a0 	lsr	r0, r0, #5
   1fdb0:	e12fff1e 	bx	lr
   1fdb4:	e92d4010 	push	{r4, lr}
   1fdb8:	e3a02058 	mov	r2, #88	; 0x58
   1fdbc:	e59f1004 	ldr	r1, [pc, #4]	; 1fdc8 <CIPAddress::operator==(unsigned int) const+0x34>
   1fdc0:	e59f0004 	ldr	r0, [pc, #4]	; 1fdcc <CIPAddress::operator==(unsigned int) const+0x38>
   1fdc4:	eb000e2d 	bl	23680 <assertion_failed>
   1fdc8:	00039a18 	.word	0x00039a18
   1fdcc:	00034e1c 	.word	0x00034e1c

0001fdd0 <CIPAddress::operator!=(unsigned int) const>:
   1fdd0:	e5d03000 	ldrb	r3, [r0]
   1fdd4:	e3530000 	cmp	r3, #0
   1fdd8:	0a000003 	beq	1fdec <CIPAddress::operator!=(unsigned int) const+0x1c>
   1fddc:	e5900004 	ldr	r0, [r0, #4]
   1fde0:	e0500001 	subs	r0, r0, r1
   1fde4:	13a00001 	movne	r0, #1
   1fde8:	e12fff1e 	bx	lr
   1fdec:	e92d4010 	push	{r4, lr}
   1fdf0:	e3a0205e 	mov	r2, #94	; 0x5e
   1fdf4:	e59f1004 	ldr	r1, [pc, #4]	; 1fe00 <CIPAddress::operator!=(unsigned int) const+0x30>
   1fdf8:	e59f0004 	ldr	r0, [pc, #4]	; 1fe04 <CIPAddress::operator!=(unsigned int) const+0x34>
   1fdfc:	eb000e1f 	bl	23680 <assertion_failed>
   1fe00:	00039a18 	.word	0x00039a18
   1fe04:	00034e1c 	.word	0x00034e1c

0001fe08 <CIPAddress::operator=(unsigned int)>:
   1fe08:	e3a02001 	mov	r2, #1
   1fe0c:	e5801004 	str	r1, [r0, #4]
   1fe10:	e5c02000 	strb	r2, [r0]
   1fe14:	e12fff1e 	bx	lr

0001fe18 <CIPAddress::Set(unsigned int)>:
   1fe18:	e3a03001 	mov	r3, #1
   1fe1c:	e5801004 	str	r1, [r0, #4]
   1fe20:	e5c03000 	strb	r3, [r0]
   1fe24:	e12fff1e 	bx	lr

0001fe28 <CIPAddress::Set(unsigned char const*)>:
   1fe28:	e3510000 	cmp	r1, #0
   1fe2c:	e92d4010 	push	{r4, lr}
   1fe30:	0a000006 	beq	1fe50 <CIPAddress::Set(unsigned char const*)+0x28>
   1fe34:	e3a02004 	mov	r2, #4
   1fe38:	e1a04000 	mov	r4, r0
   1fe3c:	e0800002 	add	r0, r0, r2
   1fe40:	eb002652 	bl	29790 <memcpy>
   1fe44:	e3a03001 	mov	r3, #1
   1fe48:	e5c43000 	strb	r3, [r4]
   1fe4c:	e8bd8010 	pop	{r4, pc}
   1fe50:	e3a02075 	mov	r2, #117	; 0x75
   1fe54:	e59f1004 	ldr	r1, [pc, #4]	; 1fe60 <CIPAddress::Set(unsigned char const*)+0x38>
   1fe58:	e59f0004 	ldr	r0, [pc, #4]	; 1fe64 <CIPAddress::Set(unsigned char const*)+0x3c>
   1fe5c:	eb000e07 	bl	23680 <assertion_failed>
   1fe60:	00039a18 	.word	0x00039a18
   1fe64:	00039a60 	.word	0x00039a60

0001fe68 <CIPAddress::CIPAddress(unsigned char const*)>:
   1fe68:	e92d4010 	push	{r4, lr}
   1fe6c:	e1a04000 	mov	r4, r0
   1fe70:	ebffffec 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   1fe74:	e1a00004 	mov	r0, r4
   1fe78:	e8bd8010 	pop	{r4, pc}

0001fe7c <CIPAddress::Set(CIPAddress const&)>:
   1fe7c:	e5d13000 	ldrb	r3, [r1]
   1fe80:	e3530000 	cmp	r3, #0
   1fe84:	0a000004 	beq	1fe9c <CIPAddress::Set(CIPAddress const&)+0x20>
   1fe88:	e3a02001 	mov	r2, #1
   1fe8c:	e5913004 	ldr	r3, [r1, #4]
   1fe90:	e5c02000 	strb	r2, [r0]
   1fe94:	e5803004 	str	r3, [r0, #4]
   1fe98:	e12fff1e 	bx	lr
   1fe9c:	e92d4010 	push	{r4, lr}
   1fea0:	e3a0207e 	mov	r2, #126	; 0x7e
   1fea4:	e59f1004 	ldr	r1, [pc, #4]	; 1feb0 <CIPAddress::Set(CIPAddress const&)+0x34>
   1fea8:	e59f0004 	ldr	r0, [pc, #4]	; 1feb4 <CIPAddress::Set(CIPAddress const&)+0x38>
   1feac:	eb000df3 	bl	23680 <assertion_failed>
   1feb0:	00039a18 	.word	0x00039a18
   1feb4:	00039a28 	.word	0x00039a28

0001feb8 <CIPAddress::SetBroadcast()>:
   1feb8:	e3e02000 	mvn	r2, #0
   1febc:	e3a03001 	mov	r3, #1
   1fec0:	e5802004 	str	r2, [r0, #4]
   1fec4:	e5c03000 	strb	r3, [r0]
   1fec8:	e12fff1e 	bx	lr

0001fecc <CIPAddress::operator unsigned int() const>:
   1fecc:	e5d03000 	ldrb	r3, [r0]
   1fed0:	e3530000 	cmp	r3, #0
   1fed4:	0a000001 	beq	1fee0 <CIPAddress::operator unsigned int() const+0x14>
   1fed8:	e5900004 	ldr	r0, [r0, #4]
   1fedc:	e12fff1e 	bx	lr
   1fee0:	e92d4010 	push	{r4, lr}
   1fee4:	e3a0208f 	mov	r2, #143	; 0x8f
   1fee8:	e59f1004 	ldr	r1, [pc, #4]	; 1fef4 <CIPAddress::operator unsigned int() const+0x28>
   1feec:	e59f0004 	ldr	r0, [pc, #4]	; 1fef8 <CIPAddress::operator unsigned int() const+0x2c>
   1fef0:	eb000de2 	bl	23680 <assertion_failed>
   1fef4:	00039a18 	.word	0x00039a18
   1fef8:	00034e1c 	.word	0x00034e1c

0001fefc <CIPAddress::Get() const>:
   1fefc:	e5d03000 	ldrb	r3, [r0]
   1ff00:	e3530000 	cmp	r3, #0
   1ff04:	0a000001 	beq	1ff10 <CIPAddress::Get() const+0x14>
   1ff08:	e2800004 	add	r0, r0, #4
   1ff0c:	e12fff1e 	bx	lr
   1ff10:	e92d4010 	push	{r4, lr}
   1ff14:	e3a02095 	mov	r2, #149	; 0x95
   1ff18:	e59f1004 	ldr	r1, [pc, #4]	; 1ff24 <CIPAddress::Get() const+0x28>
   1ff1c:	e59f0004 	ldr	r0, [pc, #4]	; 1ff28 <CIPAddress::Get() const+0x2c>
   1ff20:	eb000dd6 	bl	23680 <assertion_failed>
   1ff24:	00039a18 	.word	0x00039a18
   1ff28:	00034e1c 	.word	0x00034e1c

0001ff2c <CIPAddress::CopyTo(unsigned char*) const>:
   1ff2c:	e5d02000 	ldrb	r2, [r0]
   1ff30:	e92d4010 	push	{r4, lr}
   1ff34:	e3520000 	cmp	r2, #0
   1ff38:	0a000007 	beq	1ff5c <CIPAddress::CopyTo(unsigned char*) const+0x30>
   1ff3c:	e3510000 	cmp	r1, #0
   1ff40:	e1a03001 	mov	r3, r1
   1ff44:	0a000008 	beq	1ff6c <CIPAddress::CopyTo(unsigned char*) const+0x40>
   1ff48:	e8bd4010 	pop	{r4, lr}
   1ff4c:	e2801004 	add	r1, r0, #4
   1ff50:	e3a02004 	mov	r2, #4
   1ff54:	e1a00003 	mov	r0, r3
   1ff58:	ea00260c 	b	29790 <memcpy>
   1ff5c:	e3a0209b 	mov	r2, #155	; 0x9b
   1ff60:	e59f1014 	ldr	r1, [pc, #20]	; 1ff7c <CIPAddress::CopyTo(unsigned char*) const+0x50>
   1ff64:	e59f0014 	ldr	r0, [pc, #20]	; 1ff80 <CIPAddress::CopyTo(unsigned char*) const+0x54>
   1ff68:	eb000dc4 	bl	23680 <assertion_failed>
   1ff6c:	e3a0209c 	mov	r2, #156	; 0x9c
   1ff70:	e59f1004 	ldr	r1, [pc, #4]	; 1ff7c <CIPAddress::CopyTo(unsigned char*) const+0x50>
   1ff74:	e59f0008 	ldr	r0, [pc, #8]	; 1ff84 <CIPAddress::CopyTo(unsigned char*) const+0x58>
   1ff78:	eb000dc0 	bl	23680 <assertion_failed>
   1ff7c:	00039a18 	.word	0x00039a18
   1ff80:	00034e1c 	.word	0x00034e1c
   1ff84:	00036138 	.word	0x00036138

0001ff88 <CIPAddress::IsNull() const>:
   1ff88:	e5d03000 	ldrb	r3, [r0]
   1ff8c:	e3530000 	cmp	r3, #0
   1ff90:	0a000003 	beq	1ffa4 <CIPAddress::IsNull() const+0x1c>
   1ff94:	e5900004 	ldr	r0, [r0, #4]
   1ff98:	e16f0f10 	clz	r0, r0
   1ff9c:	e1a002a0 	lsr	r0, r0, #5
   1ffa0:	e12fff1e 	bx	lr
   1ffa4:	e92d4010 	push	{r4, lr}
   1ffa8:	e3a020a2 	mov	r2, #162	; 0xa2
   1ffac:	e59f1004 	ldr	r1, [pc, #4]	; 1ffb8 <CIPAddress::IsNull() const+0x30>
   1ffb0:	e59f0004 	ldr	r0, [pc, #4]	; 1ffbc <CIPAddress::IsNull() const+0x34>
   1ffb4:	eb000db1 	bl	23680 <assertion_failed>
   1ffb8:	00039a18 	.word	0x00039a18
   1ffbc:	00034e1c 	.word	0x00034e1c

0001ffc0 <CIPAddress::IsBroadcast() const>:
   1ffc0:	e5d03000 	ldrb	r3, [r0]
   1ffc4:	e3530000 	cmp	r3, #0
   1ffc8:	0a000004 	beq	1ffe0 <CIPAddress::IsBroadcast() const+0x20>
   1ffcc:	e5900004 	ldr	r0, [r0, #4]
   1ffd0:	e3700001 	cmn	r0, #1
   1ffd4:	13a00000 	movne	r0, #0
   1ffd8:	03a00001 	moveq	r0, #1
   1ffdc:	e12fff1e 	bx	lr
   1ffe0:	e92d4010 	push	{r4, lr}
   1ffe4:	e3a020a8 	mov	r2, #168	; 0xa8
   1ffe8:	e59f1004 	ldr	r1, [pc, #4]	; 1fff4 <CIPAddress::IsBroadcast() const+0x34>
   1ffec:	e59f0004 	ldr	r0, [pc, #4]	; 1fff8 <CIPAddress::IsBroadcast() const+0x38>
   1fff0:	eb000da2 	bl	23680 <assertion_failed>
   1fff4:	00039a18 	.word	0x00039a18
   1fff8:	00034e1c 	.word	0x00034e1c

0001fffc <CIPAddress::GetSize() const>:
   1fffc:	e3a00004 	mov	r0, #4
   20000:	e12fff1e 	bx	lr

00020004 <CIPAddress::Format(CString*) const>:
   20004:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   20008:	e5d03000 	ldrb	r3, [r0]
   2000c:	e24dd00c 	sub	sp, sp, #12
   20010:	e3530000 	cmp	r3, #0
   20014:	0a00000f 	beq	20058 <CIPAddress::Format(CString*) const+0x54>
   20018:	e3510000 	cmp	r1, #0
   2001c:	0a000011 	beq	20068 <CIPAddress::Format(CString*) const+0x64>
   20020:	e5902004 	ldr	r2, [r0, #4]
   20024:	e1a00001 	mov	r0, r1
   20028:	e1a01822 	lsr	r1, r2, #16
   2002c:	e1a0cc22 	lsr	ip, r2, #24
   20030:	e6ef1071 	uxtb	r1, r1
   20034:	e1a03422 	lsr	r3, r2, #8
   20038:	e58d1000 	str	r1, [sp]
   2003c:	e6ef3073 	uxtb	r3, r3
   20040:	e58dc004 	str	ip, [sp, #4]
   20044:	e6ef2072 	uxtb	r2, r2
   20048:	e59f1028 	ldr	r1, [pc, #40]	; 20078 <CIPAddress::Format(CString*) const+0x74>
   2004c:	eb001fa7 	bl	27ef0 <CString::Format(char const*, ...)>
   20050:	e28dd00c 	add	sp, sp, #12
   20054:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   20058:	e3a020b3 	mov	r2, #179	; 0xb3
   2005c:	e59f1018 	ldr	r1, [pc, #24]	; 2007c <CIPAddress::Format(CString*) const+0x78>
   20060:	e59f0018 	ldr	r0, [pc, #24]	; 20080 <CIPAddress::Format(CString*) const+0x7c>
   20064:	eb000d85 	bl	23680 <assertion_failed>
   20068:	e3a020b4 	mov	r2, #180	; 0xb4
   2006c:	e59f1008 	ldr	r1, [pc, #8]	; 2007c <CIPAddress::Format(CString*) const+0x78>
   20070:	e59f000c 	ldr	r0, [pc, #12]	; 20084 <CIPAddress::Format(CString*) const+0x80>
   20074:	eb000d81 	bl	23680 <assertion_failed>
   20078:	00039a80 	.word	0x00039a80
   2007c:	00039a18 	.word	0x00039a18
   20080:	00034e1c 	.word	0x00034e1c
   20084:	00039a70 	.word	0x00039a70

00020088 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>:
   20088:	e92d4030 	push	{r4, r5, lr}
   2008c:	e5d13000 	ldrb	r3, [r1]
   20090:	e24dd00c 	sub	sp, sp, #12
   20094:	e3530000 	cmp	r3, #0
   20098:	0a000018 	beq	20100 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x78>
   2009c:	e1a04001 	mov	r4, r1
   200a0:	e5911004 	ldr	r1, [r1, #4]
   200a4:	e3710001 	cmn	r1, #1
   200a8:	0a000011 	beq	200f4 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x6c>
   200ac:	e3520000 	cmp	r2, #0
   200b0:	0a000016 	beq	20110 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x88>
   200b4:	e1a01002 	mov	r1, r2
   200b8:	e3a02004 	mov	r2, #4
   200bc:	e1a05000 	mov	r5, r0
   200c0:	e08d0002 	add	r0, sp, r2
   200c4:	eb0025b1 	bl	29790 <memcpy>
   200c8:	e5d53000 	ldrb	r3, [r5]
   200cc:	e3530000 	cmp	r3, #0
   200d0:	0a000012 	beq	20120 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x98>
   200d4:	e59d2004 	ldr	r2, [sp, #4]
   200d8:	e5953004 	ldr	r3, [r5, #4]
   200dc:	e5941004 	ldr	r1, [r4, #4]
   200e0:	e0033002 	and	r3, r3, r2
   200e4:	e0022001 	and	r2, r2, r1
   200e8:	e0433002 	sub	r3, r3, r2
   200ec:	e16f3f13 	clz	r3, r3
   200f0:	e1a032a3 	lsr	r3, r3, #5
   200f4:	e1a00003 	mov	r0, r3
   200f8:	e28dd00c 	add	sp, sp, #12
   200fc:	e8bd8030 	pop	{r4, r5, pc}
   20100:	e3a020a8 	mov	r2, #168	; 0xa8
   20104:	e59f1024 	ldr	r1, [pc, #36]	; 20130 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   20108:	e59f0024 	ldr	r0, [pc, #36]	; 20134 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xac>
   2010c:	eb000d5b 	bl	23680 <assertion_failed>
   20110:	e3a020c1 	mov	r2, #193	; 0xc1
   20114:	e59f1014 	ldr	r1, [pc, #20]	; 20130 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   20118:	e59f0018 	ldr	r0, [pc, #24]	; 20138 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xb0>
   2011c:	eb000d57 	bl	23680 <assertion_failed>
   20120:	e3a020c5 	mov	r2, #197	; 0xc5
   20124:	e59f1004 	ldr	r1, [pc, #4]	; 20130 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   20128:	e59f0004 	ldr	r0, [pc, #4]	; 20134 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xac>
   2012c:	eb000d53 	bl	23680 <assertion_failed>
   20130:	00039a18 	.word	0x00039a18
   20134:	00034e1c 	.word	0x00034e1c
   20138:	00039a8c 	.word	0x00039a8c

0002013c <CNetQueue::CNetQueue()>:
   2013c:	e3a02000 	mov	r2, #0
   20140:	e5802000 	str	r2, [r0]
   20144:	e5802004 	str	r2, [r0, #4]
   20148:	e5802008 	str	r2, [r0, #8]
   2014c:	e12fff1e 	bx	lr

00020150 <CNetQueue::IsEmpty() const>:
   20150:	e5900000 	ldr	r0, [r0]
   20154:	e16f0f10 	clz	r0, r0
   20158:	e1a002a0 	lsr	r0, r0, #5
   2015c:	e12fff1e 	bx	lr

00020160 <CNetQueue::Flush()>:
   20160:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20164:	e5904000 	ldr	r4, [r0]
   20168:	e3540000 	cmp	r4, #0
   2016c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   20170:	e1a05000 	mov	r5, r0
   20174:	e3a07000 	mov	r7, #0
   20178:	e3a06e65 	mov	r6, #1616	; 0x650
   2017c:	ea00000f 	b	201c0 <CNetQueue::Flush()+0x60>
   20180:	e3540000 	cmp	r4, #0
   20184:	0a000014 	beq	201dc <CNetQueue::Flush()+0x7c>
   20188:	e5943004 	ldr	r3, [r4, #4]
   2018c:	e3530000 	cmp	r3, #0
   20190:	e5853000 	str	r3, [r5]
   20194:	15837000 	strne	r7, [r3]
   20198:	0a000016 	beq	201f8 <CNetQueue::Flush()+0x98>
   2019c:	e5953008 	ldr	r3, [r5, #8]
   201a0:	e3530000 	cmp	r3, #0
   201a4:	1a000010 	bne	201ec <CNetQueue::Flush()+0x8c>
   201a8:	e1a00004 	mov	r0, r4
   201ac:	e1a01006 	mov	r1, r6
   201b0:	eb00275d 	bl	29f2c <operator delete(void*, unsigned int)>
   201b4:	e5954000 	ldr	r4, [r5]
   201b8:	e3540000 	cmp	r4, #0
   201bc:	0a00000c 	beq	201f4 <CNetQueue::Flush()+0x94>
   201c0:	e5950008 	ldr	r0, [r5, #8]
   201c4:	e3500000 	cmp	r0, #0
   201c8:	0affffec 	beq	20180 <CNetQueue::Flush()+0x20>
   201cc:	eb002a7a 	bl	2abbc <EnterCritical>
   201d0:	e5954000 	ldr	r4, [r5]
   201d4:	e3540000 	cmp	r4, #0
   201d8:	1affffea 	bne	20188 <CNetQueue::Flush()+0x28>
   201dc:	e3a0203a 	mov	r2, #58	; 0x3a
   201e0:	e59f1030 	ldr	r1, [pc, #48]	; 20218 <CNetQueue::Flush()+0xb8>
   201e4:	e59f0030 	ldr	r0, [pc, #48]	; 2021c <CNetQueue::Flush()+0xbc>
   201e8:	eb000d24 	bl	23680 <assertion_failed>
   201ec:	eb002a9d 	bl	2ac68 <LeaveCritical>
   201f0:	eaffffec 	b	201a8 <CNetQueue::Flush()+0x48>
   201f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   201f8:	e5952004 	ldr	r2, [r5, #4]
   201fc:	e1540002 	cmp	r4, r2
   20200:	05853004 	streq	r3, [r5, #4]
   20204:	0affffe4 	beq	2019c <CNetQueue::Flush()+0x3c>
   20208:	e3a02043 	mov	r2, #67	; 0x43
   2020c:	e59f1004 	ldr	r1, [pc, #4]	; 20218 <CNetQueue::Flush()+0xb8>
   20210:	e59f0008 	ldr	r0, [pc, #8]	; 20220 <CNetQueue::Flush()+0xc0>
   20214:	eb000d19 	bl	23680 <assertion_failed>
   20218:	00039a9c 	.word	0x00039a9c
   2021c:	00039568 	.word	0x00039568
   20220:	00039aac 	.word	0x00039aac

00020224 <CNetQueue::~CNetQueue()>:
   20224:	e92d4010 	push	{r4, lr}
   20228:	e1a04000 	mov	r4, r0
   2022c:	ebffffcb 	bl	20160 <CNetQueue::Flush()>
   20230:	e1a00004 	mov	r0, r4
   20234:	e8bd8010 	pop	{r4, pc}

00020238 <CNetQueue::Enqueue(void const*, unsigned int, void*)>:
   20238:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2023c:	e1a05002 	mov	r5, r2
   20240:	e1a06000 	mov	r6, r0
   20244:	e3a00e65 	mov	r0, #1616	; 0x650
   20248:	e1a07001 	mov	r7, r1
   2024c:	e1a08003 	mov	r8, r3
   20250:	eb002727 	bl	29ef4 <operator new(unsigned int)>
   20254:	e3550000 	cmp	r5, #0
   20258:	0a000026 	beq	202f8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xc0>
   2025c:	e3550d19 	cmp	r5, #1600	; 0x640
   20260:	8a000028 	bhi	20308 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xd0>
   20264:	e3570000 	cmp	r7, #0
   20268:	e1a04000 	mov	r4, r0
   2026c:	e5805008 	str	r5, [r0, #8]
   20270:	0a000028 	beq	20318 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xe0>
   20274:	e1a02005 	mov	r2, r5
   20278:	e1a01007 	mov	r1, r7
   2027c:	e280000c 	add	r0, r0, #12
   20280:	eb002542 	bl	29790 <memcpy>
   20284:	e5960008 	ldr	r0, [r6, #8]
   20288:	e584864c 	str	r8, [r4, #1612]	; 0x64c
   2028c:	e3500000 	cmp	r0, #0
   20290:	1a000012 	bne	202e0 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xa8>
   20294:	e896000a 	ldm	r6, {r1, r3}
   20298:	e3a02000 	mov	r2, #0
   2029c:	e1510002 	cmp	r1, r2
   202a0:	e5842004 	str	r2, [r4, #4]
   202a4:	e5843000 	str	r3, [r4]
   202a8:	05864000 	streq	r4, [r6]
   202ac:	0a000005 	beq	202c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x90>
   202b0:	e3530000 	cmp	r3, #0
   202b4:	0a00001b 	beq	20328 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xf0>
   202b8:	e5932004 	ldr	r2, [r3, #4]
   202bc:	e3520000 	cmp	r2, #0
   202c0:	05834004 	streq	r4, [r3, #4]
   202c4:	1a000007 	bne	202e8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xb0>
   202c8:	e5963008 	ldr	r3, [r6, #8]
   202cc:	e5864004 	str	r4, [r6, #4]
   202d0:	e3530000 	cmp	r3, #0
   202d4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   202d8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   202dc:	ea002a61 	b	2ac68 <LeaveCritical>
   202e0:	eb002a35 	bl	2abbc <EnterCritical>
   202e4:	eaffffea 	b	20294 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x5c>
   202e8:	e3a02067 	mov	r2, #103	; 0x67
   202ec:	e59f1044 	ldr	r1, [pc, #68]	; 20338 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   202f0:	e59f0044 	ldr	r0, [pc, #68]	; 2033c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x104>
   202f4:	eb000ce1 	bl	23680 <assertion_failed>
   202f8:	e3a02052 	mov	r2, #82	; 0x52
   202fc:	e59f1034 	ldr	r1, [pc, #52]	; 20338 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   20300:	e59f0038 	ldr	r0, [pc, #56]	; 20340 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x108>
   20304:	eb000cdd 	bl	23680 <assertion_failed>
   20308:	e3a02053 	mov	r2, #83	; 0x53
   2030c:	e59f1024 	ldr	r1, [pc, #36]	; 20338 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   20310:	e59f002c 	ldr	r0, [pc, #44]	; 20344 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x10c>
   20314:	eb000cd9 	bl	23680 <assertion_failed>
   20318:	e3a02056 	mov	r2, #86	; 0x56
   2031c:	e59f1014 	ldr	r1, [pc, #20]	; 20338 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   20320:	e59f0020 	ldr	r0, [pc, #32]	; 20348 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x110>
   20324:	eb000cd5 	bl	23680 <assertion_failed>
   20328:	e3a02066 	mov	r2, #102	; 0x66
   2032c:	e59f1004 	ldr	r1, [pc, #4]	; 20338 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   20330:	e59f0014 	ldr	r0, [pc, #20]	; 2034c <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x114>
   20334:	eb000cd1 	bl	23680 <assertion_failed>
   20338:	00039a9c 	.word	0x00039a9c
   2033c:	00039ad0 	.word	0x00039ad0
   20340:	00038fb0 	.word	0x00038fb0
   20344:	00036d90 	.word	0x00036d90
   20348:	00036138 	.word	0x00036138
   2034c:	00039ac0 	.word	0x00039ac0

00020350 <CNetQueue::Dequeue(void*, void**)>:
   20350:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20354:	e5905000 	ldr	r5, [r0]
   20358:	e3550000 	cmp	r5, #0
   2035c:	0a000031 	beq	20428 <CNetQueue::Dequeue(void*, void**)+0xd8>
   20360:	e1a04000 	mov	r4, r0
   20364:	e5900008 	ldr	r0, [r0, #8]
   20368:	e1a06002 	mov	r6, r2
   2036c:	e3500000 	cmp	r0, #0
   20370:	e1a07001 	mov	r7, r1
   20374:	1a000019 	bne	203e0 <CNetQueue::Dequeue(void*, void**)+0x90>
   20378:	e5953004 	ldr	r3, [r5, #4]
   2037c:	e3530000 	cmp	r3, #0
   20380:	e5843000 	str	r3, [r4]
   20384:	0a00001f 	beq	20408 <CNetQueue::Dequeue(void*, void**)+0xb8>
   20388:	e3a02000 	mov	r2, #0
   2038c:	e5832000 	str	r2, [r3]
   20390:	e5943008 	ldr	r3, [r4, #8]
   20394:	e3530000 	cmp	r3, #0
   20398:	1a000018 	bne	20400 <CNetQueue::Dequeue(void*, void**)+0xb0>
   2039c:	e5954008 	ldr	r4, [r5, #8]
   203a0:	e3540000 	cmp	r4, #0
   203a4:	0a000022 	beq	20434 <CNetQueue::Dequeue(void*, void**)+0xe4>
   203a8:	e3540d19 	cmp	r4, #1600	; 0x640
   203ac:	8a000024 	bhi	20444 <CNetQueue::Dequeue(void*, void**)+0xf4>
   203b0:	e1a02004 	mov	r2, r4
   203b4:	e285100c 	add	r1, r5, #12
   203b8:	e1a00007 	mov	r0, r7
   203bc:	eb0024f3 	bl	29790 <memcpy>
   203c0:	e3560000 	cmp	r6, #0
   203c4:	1595364c 	ldrne	r3, [r5, #1612]	; 0x64c
   203c8:	e1a00005 	mov	r0, r5
   203cc:	15863000 	strne	r3, [r6]
   203d0:	e3a01e65 	mov	r1, #1616	; 0x650
   203d4:	eb0026d4 	bl	29f2c <operator delete(void*, unsigned int)>
   203d8:	e1a00004 	mov	r0, r4
   203dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   203e0:	eb0029f5 	bl	2abbc <EnterCritical>
   203e4:	e5945000 	ldr	r5, [r4]
   203e8:	e3550000 	cmp	r5, #0
   203ec:	1affffe1 	bne	20378 <CNetQueue::Dequeue(void*, void**)+0x28>
   203f0:	e3a02078 	mov	r2, #120	; 0x78
   203f4:	e59f1058 	ldr	r1, [pc, #88]	; 20454 <CNetQueue::Dequeue(void*, void**)+0x104>
   203f8:	e59f0058 	ldr	r0, [pc, #88]	; 20458 <CNetQueue::Dequeue(void*, void**)+0x108>
   203fc:	eb000c9f 	bl	23680 <assertion_failed>
   20400:	eb002a18 	bl	2ac68 <LeaveCritical>
   20404:	eaffffe4 	b	2039c <CNetQueue::Dequeue(void*, void**)+0x4c>
   20408:	e5942004 	ldr	r2, [r4, #4]
   2040c:	e1520005 	cmp	r2, r5
   20410:	05843004 	streq	r3, [r4, #4]
   20414:	0affffdd 	beq	20390 <CNetQueue::Dequeue(void*, void**)+0x40>
   20418:	e3a02081 	mov	r2, #129	; 0x81
   2041c:	e59f1030 	ldr	r1, [pc, #48]	; 20454 <CNetQueue::Dequeue(void*, void**)+0x104>
   20420:	e59f0034 	ldr	r0, [pc, #52]	; 2045c <CNetQueue::Dequeue(void*, void**)+0x10c>
   20424:	eb000c95 	bl	23680 <assertion_failed>
   20428:	e1a04005 	mov	r4, r5
   2042c:	e1a00004 	mov	r0, r4
   20430:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20434:	e3a02088 	mov	r2, #136	; 0x88
   20438:	e59f1014 	ldr	r1, [pc, #20]	; 20454 <CNetQueue::Dequeue(void*, void**)+0x104>
   2043c:	e59f001c 	ldr	r0, [pc, #28]	; 20460 <CNetQueue::Dequeue(void*, void**)+0x110>
   20440:	eb000c8e 	bl	23680 <assertion_failed>
   20444:	e3a02089 	mov	r2, #137	; 0x89
   20448:	e59f1004 	ldr	r1, [pc, #4]	; 20454 <CNetQueue::Dequeue(void*, void**)+0x104>
   2044c:	e59f0010 	ldr	r0, [pc, #16]	; 20464 <CNetQueue::Dequeue(void*, void**)+0x114>
   20450:	eb000c8a 	bl	23680 <assertion_failed>
   20454:	00039a9c 	.word	0x00039a9c
   20458:	00039568 	.word	0x00039568
   2045c:	00039aac 	.word	0x00039aac
   20460:	00039ae4 	.word	0x00039ae4
   20464:	00039af0 	.word	0x00039af0

00020468 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>:
   20468:	e92d4070 	push	{r4, r5, r6, lr}
   2046c:	e1a04000 	mov	r4, r0
   20470:	e3a05000 	mov	r5, #0
   20474:	e1a06002 	mov	r6, r2
   20478:	e1a00001 	mov	r0, r1
   2047c:	e5c4500c 	strb	r5, [r4, #12]
   20480:	e1a01004 	mov	r1, r4
   20484:	ebfffea8 	bl	1ff2c <CIPAddress::CopyTo(unsigned char*) const>
   20488:	e5c45008 	strb	r5, [r4, #8]
   2048c:	e5c46009 	strb	r6, [r4, #9]
   20490:	e1a00004 	mov	r0, r4
   20494:	e8bd8070 	pop	{r4, r5, r6, pc}

00020498 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>:
   20498:	e92d4070 	push	{r4, r5, r6, lr}
   2049c:	e3a0c001 	mov	ip, #1
   204a0:	e1a04000 	mov	r4, r0
   204a4:	e1a06002 	mov	r6, r2
   204a8:	e1a00001 	mov	r0, r1
   204ac:	e5c4c00c 	strb	ip, [r4, #12]
   204b0:	e1a01004 	mov	r1, r4
   204b4:	e1a05003 	mov	r5, r3
   204b8:	ebfffe9b 	bl	1ff2c <CIPAddress::CopyTo(unsigned char*) const>
   204bc:	e1a00006 	mov	r0, r6
   204c0:	e2841004 	add	r1, r4, #4
   204c4:	ebfffe98 	bl	1ff2c <CIPAddress::CopyTo(unsigned char*) const>
   204c8:	e3a02000 	mov	r2, #0
   204cc:	e5c45009 	strb	r5, [r4, #9]
   204d0:	e5c42008 	strb	r2, [r4, #8]
   204d4:	e1a00004 	mov	r0, r4
   204d8:	e8bd8070 	pop	{r4, r5, r6, pc}

000204dc <CChecksumCalculator::~CChecksumCalculator()>:
   204dc:	e12fff1e 	bx	lr

000204e0 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>:
   204e0:	e1a03001 	mov	r3, r1
   204e4:	e1a01000 	mov	r1, r0
   204e8:	e1a00003 	mov	r0, r3
   204ec:	eafffe8e 	b	1ff2c <CIPAddress::CopyTo(unsigned char*) const>

000204f0 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>:
   204f0:	e92d4010 	push	{r4, lr}
   204f4:	e1a04000 	mov	r4, r0
   204f8:	e1a00001 	mov	r0, r1
   204fc:	e2841004 	add	r1, r4, #4
   20500:	ebfffe89 	bl	1ff2c <CIPAddress::CopyTo(unsigned char*) const>
   20504:	e3a03001 	mov	r3, #1
   20508:	e5c4300c 	strb	r3, [r4, #12]
   2050c:	e8bd8010 	pop	{r4, pc}

00020510 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>:
   20510:	e3500000 	cmp	r0, #0
   20514:	e92d4010 	push	{r4, lr}
   20518:	0a000015 	beq	20574 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x64>
   2051c:	e3510000 	cmp	r1, #0
   20520:	0a000017 	beq	20584 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x74>
   20524:	e3510001 	cmp	r1, #1
   20528:	9a00000c 	bls	20560 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x50>
   2052c:	e1a0c000 	mov	ip, r0
   20530:	e1a03001 	mov	r3, r1
   20534:	e2433002 	sub	r3, r3, #2
   20538:	e0dce0b2 	ldrh	lr, [ip], #2
   2053c:	e3530001 	cmp	r3, #1
   20540:	e082200e 	add	r2, r2, lr
   20544:	8afffffa 	bhi	20534 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x24>
   20548:	e2413002 	sub	r3, r1, #2
   2054c:	e3c33001 	bic	r3, r3, #1
   20550:	e2833002 	add	r3, r3, #2
   20554:	e3110001 	tst	r1, #1
   20558:	e0800003 	add	r0, r0, r3
   2055c:	0a000002 	beq	2056c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x5c>
   20560:	e5d00000 	ldrb	r0, [r0]
   20564:	e0800002 	add	r0, r0, r2
   20568:	e8bd8010 	pop	{r4, pc}
   2056c:	e1a00002 	mov	r0, r2
   20570:	e8bd8010 	pop	{r4, pc}
   20574:	e3a02054 	mov	r2, #84	; 0x54
   20578:	e59f1014 	ldr	r1, [pc, #20]	; 20594 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x84>
   2057c:	e59f0014 	ldr	r0, [pc, #20]	; 20598 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x88>
   20580:	eb000c3e 	bl	23680 <assertion_failed>
   20584:	e3a02055 	mov	r2, #85	; 0x55
   20588:	e59f1004 	ldr	r1, [pc, #4]	; 20594 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x84>
   2058c:	e59f0008 	ldr	r0, [pc, #8]	; 2059c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x8c>
   20590:	eb000c3a 	bl	23680 <assertion_failed>
   20594:	00039b10 	.word	0x00039b10
   20598:	00039b28 	.word	0x00039b28
   2059c:	00038fb0 	.word	0x00038fb0

000205a0 <CChecksumCalculator::Calculate(void const*, unsigned int)>:
   205a0:	e5d0300c 	ldrb	r3, [r0, #12]
   205a4:	e92d4070 	push	{r4, r5, r6, lr}
   205a8:	e3530000 	cmp	r3, #0
   205ac:	0a00001d 	beq	20628 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x88>
   205b0:	e1a05001 	mov	r5, r1
   205b4:	e6bf3fb2 	rev16	r3, r2
   205b8:	e6ff3073 	uxth	r3, r3
   205bc:	e1a04002 	mov	r4, r2
   205c0:	e1a02423 	lsr	r2, r3, #8
   205c4:	e5c0200b 	strb	r2, [r0, #11]
   205c8:	e5c0300a 	strb	r3, [r0, #10]
   205cc:	e3a02000 	mov	r2, #0
   205d0:	e3a0100c 	mov	r1, #12
   205d4:	ebffffcd 	bl	20510 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   205d8:	e3550000 	cmp	r5, #0
   205dc:	0a000015 	beq	20638 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x98>
   205e0:	e3540000 	cmp	r4, #0
   205e4:	0a000017 	beq	20648 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xa8>
   205e8:	e1a02000 	mov	r2, r0
   205ec:	e1a01004 	mov	r1, r4
   205f0:	e1a00005 	mov	r0, r5
   205f4:	ebffffc5 	bl	20510 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   205f8:	e1a03820 	lsr	r3, r0, #16
   205fc:	e3530000 	cmp	r3, #0
   20600:	e6ff3073 	uxth	r3, r3
   20604:	0a000004 	beq	2061c <CChecksumCalculator::Calculate(void const*, unsigned int)+0x7c>
   20608:	e3a02001 	mov	r2, #1
   2060c:	e6f30070 	uxtah	r0, r3, r0
   20610:	e1b03820 	lsrs	r3, r0, #16
   20614:	e1a03002 	mov	r3, r2
   20618:	1afffffb 	bne	2060c <CChecksumCalculator::Calculate(void const*, unsigned int)+0x6c>
   2061c:	e1e00000 	mvn	r0, r0
   20620:	e6ff0070 	uxth	r0, r0
   20624:	e8bd8070 	pop	{r4, r5, r6, pc}
   20628:	e3a0203c 	mov	r2, #60	; 0x3c
   2062c:	e59f1024 	ldr	r1, [pc, #36]	; 20658 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   20630:	e59f0024 	ldr	r0, [pc, #36]	; 2065c <CChecksumCalculator::Calculate(void const*, unsigned int)+0xbc>
   20634:	eb000c11 	bl	23680 <assertion_failed>
   20638:	e3a02041 	mov	r2, #65	; 0x41
   2063c:	e59f1014 	ldr	r1, [pc, #20]	; 20658 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   20640:	e59f0018 	ldr	r0, [pc, #24]	; 20660 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xc0>
   20644:	eb000c0d 	bl	23680 <assertion_failed>
   20648:	e3a02042 	mov	r2, #66	; 0x42
   2064c:	e59f1004 	ldr	r1, [pc, #4]	; 20658 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   20650:	e59f000c 	ldr	r0, [pc, #12]	; 20664 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xc4>
   20654:	eb000c09 	bl	23680 <assertion_failed>
   20658:	00039b10 	.word	0x00039b10
   2065c:	00039b38 	.word	0x00039b38
   20660:	00036138 	.word	0x00036138
   20664:	00038fb0 	.word	0x00038fb0

00020668 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>:
   20668:	e3500000 	cmp	r0, #0
   2066c:	e92d4010 	push	{r4, lr}
   20670:	0a00000f 	beq	206b4 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x4c>
   20674:	e3510000 	cmp	r1, #0
   20678:	0a000011 	beq	206c4 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x5c>
   2067c:	e3a02000 	mov	r2, #0
   20680:	ebffffa2 	bl	20510 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   20684:	e1a03820 	lsr	r3, r0, #16
   20688:	e3530000 	cmp	r3, #0
   2068c:	e6ff3073 	uxth	r3, r3
   20690:	0a000004 	beq	206a8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x40>
   20694:	e3a02001 	mov	r2, #1
   20698:	e6f30070 	uxtah	r0, r3, r0
   2069c:	e1b03820 	lsrs	r3, r0, #16
   206a0:	e1a03002 	mov	r3, r2
   206a4:	1afffffb 	bne	20698 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x30>
   206a8:	e1e00000 	mvn	r0, r0
   206ac:	e6ff0070 	uxth	r0, r0
   206b0:	e8bd8010 	pop	{r4, pc}
   206b4:	e3a0204a 	mov	r2, #74	; 0x4a
   206b8:	e59f1014 	ldr	r1, [pc, #20]	; 206d4 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x6c>
   206bc:	e59f0014 	ldr	r0, [pc, #20]	; 206d8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x70>
   206c0:	eb000bee 	bl	23680 <assertion_failed>
   206c4:	e3a0204b 	mov	r2, #75	; 0x4b
   206c8:	e59f1004 	ldr	r1, [pc, #4]	; 206d4 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x6c>
   206cc:	e59f0008 	ldr	r0, [pc, #8]	; 206dc <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x74>
   206d0:	eb000bea 	bl	23680 <assertion_failed>
   206d4:	00039b10 	.word	0x00039b10
   206d8:	00036138 	.word	0x00036138
   206dc:	00038fb0 	.word	0x00038fb0

000206e0 <CChecksumCalculator::FoldResult(unsigned int)>:
   206e0:	e1a03820 	lsr	r3, r0, #16
   206e4:	e3530000 	cmp	r3, #0
   206e8:	e6ff3073 	uxth	r3, r3
   206ec:	0a000004 	beq	20704 <CChecksumCalculator::FoldResult(unsigned int)+0x24>
   206f0:	e3a02001 	mov	r2, #1
   206f4:	e6f30070 	uxtah	r0, r3, r0
   206f8:	e1b03820 	lsrs	r3, r0, #16
   206fc:	e1a03002 	mov	r3, r2
   20700:	1afffffb 	bne	206f4 <CChecksumCalculator::FoldResult(unsigned int)+0x14>
   20704:	e6ff0070 	uxth	r0, r0
   20708:	e12fff1e 	bx	lr

0002070c <CDHCPClient::HaltNetwork() [clone .part.0]>:
   2070c:	e92d4010 	push	{r4, lr}
   20710:	e59f2008 	ldr	r2, [pc, #8]	; 20720 <CDHCPClient::HaltNetwork() [clone .part.0]+0x14>
   20714:	e59f1008 	ldr	r1, [pc, #8]	; 20724 <CDHCPClient::HaltNetwork() [clone .part.0]+0x18>
   20718:	e59f0008 	ldr	r0, [pc, #8]	; 20728 <CDHCPClient::HaltNetwork() [clone .part.0]+0x1c>
   2071c:	eb000bd7 	bl	23680 <assertion_failed>
   20720:	000001ae 	.word	0x000001ae
   20724:	00039b90 	.word	0x00039b90
   20728:	00038f28 	.word	0x00038f28

0002072c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>:
   2072c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20730:	e1a04000 	mov	r4, r0
   20734:	e1a05001 	mov	r5, r1
   20738:	e3a01902 	mov	r1, #32768	; 0x8000
   2073c:	e1a06002 	mov	r6, r2
   20740:	eb00097d 	bl	22d3c <CTask::CTask(unsigned int)>
   20744:	e59f30a0 	ldr	r3, [pc, #160]	; 207ec <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc0>
   20748:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   2074c:	e5843000 	str	r3, [r4]
   20750:	e1a00005 	mov	r0, r5
   20754:	ebffdfa8 	bl	185fc <CNetSubSystem::GetConfig()>
   20758:	e28470e4 	add	r7, r4, #228	; 0xe4
   2075c:	e3560000 	cmp	r6, #0
   20760:	e59f1088 	ldr	r1, [pc, #136]	; 207f0 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc4>
   20764:	e58400e0 	str	r0, [r4, #224]	; 0xe0
   20768:	11a01006 	movne	r1, r6
   2076c:	e1a00007 	mov	r0, r7
   20770:	eb0018a1 	bl	269fc <CString::CString(char const*)>
   20774:	e3a02011 	mov	r2, #17
   20778:	e1a01005 	mov	r1, r5
   2077c:	e28400f4 	add	r0, r4, #244	; 0xf4
   20780:	eb00065a 	bl	220f0 <CSocket::CSocket(CNetSubSystem*, int)>
   20784:	e3a02000 	mov	r2, #0
   20788:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   2078c:	e5c42194 	strb	r2, [r4, #404]	; 0x194
   20790:	e1530002 	cmp	r3, r2
   20794:	0a000008 	beq	207bc <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0x90>
   20798:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
   2079c:	e3530000 	cmp	r3, #0
   207a0:	0a000009 	beq	207cc <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xa0>
   207a4:	e1a00007 	mov	r0, r7
   207a8:	eb0018d1 	bl	26af4 <CString::GetLength() const>
   207ac:	e350001e 	cmp	r0, #30
   207b0:	8a000009 	bhi	207dc <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xb0>
   207b4:	e1a00004 	mov	r0, r4
   207b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   207bc:	e3a02073 	mov	r2, #115	; 0x73
   207c0:	e59f102c 	ldr	r1, [pc, #44]	; 207f4 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   207c4:	e59f002c 	ldr	r0, [pc, #44]	; 207f8 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xcc>
   207c8:	eb000bac 	bl	23680 <assertion_failed>
   207cc:	e3a02074 	mov	r2, #116	; 0x74
   207d0:	e59f101c 	ldr	r1, [pc, #28]	; 207f4 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   207d4:	e59f0020 	ldr	r0, [pc, #32]	; 207fc <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd0>
   207d8:	eb000ba8 	bl	23680 <assertion_failed>
   207dc:	e3a02076 	mov	r2, #118	; 0x76
   207e0:	e59f100c 	ldr	r1, [pc, #12]	; 207f4 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   207e4:	e59f0014 	ldr	r0, [pc, #20]	; 20800 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd4>
   207e8:	eb000ba4 	bl	23680 <assertion_failed>
   207ec:	00039b54 	.word	0x00039b54
   207f0:	0003c7f8 	.word	0x0003c7f8
   207f4:	00039b90 	.word	0x00039b90
   207f8:	00038efc 	.word	0x00038efc
   207fc:	00038f28 	.word	0x00038f28
   20800:	00039ba0 	.word	0x00039ba0

00020804 <CDHCPClient::IsBound() const>:
   20804:	e5d00194 	ldrb	r0, [r0, #404]	; 0x194
   20808:	e12fff1e 	bx	lr

0002080c <CDHCPClient::HaltNetwork()>:
   2080c:	e3a02000 	mov	r2, #0
   20810:	e59030e0 	ldr	r3, [r0, #224]	; 0xe0
   20814:	e5c02194 	strb	r2, [r0, #404]	; 0x194
   20818:	e1530002 	cmp	r3, r2
   2081c:	0a000001 	beq	20828 <CDHCPClient::HaltNetwork()+0x1c>
   20820:	e1a00003 	mov	r0, r3
   20824:	eafffcb8 	b	1fb0c <CNetConfig::Reset()>
   20828:	e92d4010 	push	{r4, lr}
   2082c:	ebffffb6 	bl	2070c <CDHCPClient::HaltNetwork() [clone .part.0]>

00020830 <CDHCPClient::CheckConfig()>:
   20830:	e92d4030 	push	{r4, r5, lr}
   20834:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   20838:	e24dd014 	sub	sp, sp, #20
   2083c:	e3530000 	cmp	r3, #0
   20840:	e1a04000 	mov	r4, r0
   20844:	0a00002e 	beq	20904 <CDHCPClient::CheckConfig()+0xd4>
   20848:	e59021c0 	ldr	r2, [r0, #448]	; 0x1c0
   2084c:	e3520000 	cmp	r2, #0
   20850:	0a00002b 	beq	20904 <CDHCPClient::CheckConfig()+0xd4>
   20854:	e59011c4 	ldr	r1, [r0, #452]	; 0x1c4
   20858:	e3510000 	cmp	r1, #0
   2085c:	0a000028 	beq	20904 <CDHCPClient::CheckConfig()+0xd4>
   20860:	e59001c8 	ldr	r0, [r0, #456]	; 0x1c8
   20864:	e3500000 	cmp	r0, #0
   20868:	0a000025 	beq	20904 <CDHCPClient::CheckConfig()+0xd4>
   2086c:	e0233001 	eor	r3, r3, r1
   20870:	e1130002 	tst	r3, r2
   20874:	1a000037 	bne	20958 <CDHCPClient::CheckConfig()+0x128>
   20878:	e59451cc 	ldr	r5, [r4, #460]	; 0x1cc
   2087c:	e3550000 	cmp	r5, #0
   20880:	0a000041 	beq	2098c <CDHCPClient::CheckConfig()+0x15c>
   20884:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   20888:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   2088c:	e3520000 	cmp	r2, #0
   20890:	1a00002b 	bne	20944 <CDHCPClient::CheckConfig()+0x114>
   20894:	e3530000 	cmp	r3, #0
   20898:	01a020a5 	lsreq	r2, r5, #1
   2089c:	004531a5 	subeq	r3, r5, r5, lsr #3
   208a0:	10652083 	rsbne	r2, r5, r3, lsl #1
   208a4:	058421d8 	streq	r2, [r4, #472]	; 0x1d8
   208a8:	058431dc 	streq	r3, [r4, #476]	; 0x1dc
   208ac:	158421d8 	strne	r2, [r4, #472]	; 0x1d8
   208b0:	e1550003 	cmp	r5, r3
   208b4:	23a00000 	movcs	r0, #0
   208b8:	33a00001 	movcc	r0, #1
   208bc:	e1520003 	cmp	r2, r3
   208c0:	83800001 	orrhi	r0, r0, #1
   208c4:	e3500000 	cmp	r0, #0
   208c8:	03a00001 	moveq	r0, #1
   208cc:	0a00001a 	beq	2093c <CDHCPClient::CheckConfig()+0x10c>
   208d0:	eb00145d 	bl	25a4c <CLogger::Get()>
   208d4:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   208d8:	e59421dc 	ldr	r2, [r4, #476]	; 0x1dc
   208dc:	e59431d8 	ldr	r3, [r4, #472]	; 0x1d8
   208e0:	e58d1008 	str	r1, [sp, #8]
   208e4:	e58d2004 	str	r2, [sp, #4]
   208e8:	e58d3000 	str	r3, [sp]
   208ec:	e3a02002 	mov	r2, #2
   208f0:	e59f30b0 	ldr	r3, [pc, #176]	; 209a8 <CDHCPClient::CheckConfig()+0x178>
   208f4:	e59f10b0 	ldr	r1, [pc, #176]	; 209ac <CDHCPClient::CheckConfig()+0x17c>
   208f8:	eb001390 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   208fc:	e3a00000 	mov	r0, #0
   20900:	ea00000d 	b	2093c <CDHCPClient::CheckConfig()+0x10c>
   20904:	eb001450 	bl	25a4c <CLogger::Get()>
   20908:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   2090c:	e59421c0 	ldr	r2, [r4, #448]	; 0x1c0
   20910:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   20914:	e594c1c8 	ldr	ip, [r4, #456]	; 0x1c8
   20918:	e58d1008 	str	r1, [sp, #8]
   2091c:	e58d2004 	str	r2, [sp, #4]
   20920:	e58d3000 	str	r3, [sp]
   20924:	e58dc00c 	str	ip, [sp, #12]
   20928:	e59f3080 	ldr	r3, [pc, #128]	; 209b0 <CDHCPClient::CheckConfig()+0x180>
   2092c:	e3a02002 	mov	r2, #2
   20930:	e59f1074 	ldr	r1, [pc, #116]	; 209ac <CDHCPClient::CheckConfig()+0x17c>
   20934:	eb001381 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   20938:	e3a00000 	mov	r0, #0
   2093c:	e28dd014 	add	sp, sp, #20
   20940:	e8bd8030 	pop	{r4, r5, pc}
   20944:	e3530000 	cmp	r3, #0
   20948:	00453002 	subeq	r3, r5, r2
   2094c:	008230a3 	addeq	r3, r2, r3, lsr #1
   20950:	058431dc 	streq	r3, [r4, #476]	; 0x1dc
   20954:	eaffffd5 	b	208b0 <CDHCPClient::CheckConfig()+0x80>
   20958:	eb00143b 	bl	25a4c <CLogger::Get()>
   2095c:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   20960:	e59421c4 	ldr	r2, [r4, #452]	; 0x1c4
   20964:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   20968:	e58d1008 	str	r1, [sp, #8]
   2096c:	e58d2004 	str	r2, [sp, #4]
   20970:	e58d3000 	str	r3, [sp]
   20974:	e3a02002 	mov	r2, #2
   20978:	e59f3034 	ldr	r3, [pc, #52]	; 209b4 <CDHCPClient::CheckConfig()+0x184>
   2097c:	e59f1028 	ldr	r1, [pc, #40]	; 209ac <CDHCPClient::CheckConfig()+0x17c>
   20980:	eb00136e 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   20984:	e3a00000 	mov	r0, #0
   20988:	eaffffeb 	b	2093c <CDHCPClient::CheckConfig()+0x10c>
   2098c:	eb00142e 	bl	25a4c <CLogger::Get()>
   20990:	e59f3020 	ldr	r3, [pc, #32]	; 209b8 <CDHCPClient::CheckConfig()+0x188>
   20994:	e3a02002 	mov	r2, #2
   20998:	e59f100c 	ldr	r1, [pc, #12]	; 209ac <CDHCPClient::CheckConfig()+0x17c>
   2099c:	eb001367 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   209a0:	e1a00005 	mov	r0, r5
   209a4:	eaffffe4 	b	2093c <CDHCPClient::CheckConfig()+0x10c>
   209a8:	00039c34 	.word	0x00039c34
   209ac:	00039b60 	.word	0x00039b60
   209b0:	00039bc0 	.word	0x00039bc0
   209b4:	00039bf0 	.word	0x00039bf0
   209b8:	00039c1c 	.word	0x00039c1c

000209bc <CDHCPClient::GetUnaligned(void const*)>:
   209bc:	e3500000 	cmp	r0, #0
   209c0:	0a000001 	beq	209cc <CDHCPClient::GetUnaligned(void const*)+0x10>
   209c4:	e5900000 	ldr	r0, [r0]
   209c8:	e12fff1e 	bx	lr
   209cc:	e92d4010 	push	{r4, lr}
   209d0:	e3a02e36 	mov	r2, #864	; 0x360
   209d4:	e59f1004 	ldr	r1, [pc, #4]	; 209e0 <CDHCPClient::GetUnaligned(void const*)+0x24>
   209d8:	e59f0004 	ldr	r0, [pc, #4]	; 209e4 <CDHCPClient::GetUnaligned(void const*)+0x28>
   209dc:	eb000b27 	bl	23680 <assertion_failed>
   209e0:	00039b90 	.word	0x00039b90
   209e4:	00039c54 	.word	0x00039c54

000209e8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>:
   209e8:	e3510000 	cmp	r1, #0
   209ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   209f0:	11a07000 	movne	r7, r0
   209f4:	11a04001 	movne	r4, r1
   209f8:	10816002 	addne	r6, r1, r2
   209fc:	0a000079 	beq	20be8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x200>
   20a00:	e2840002 	add	r0, r4, #2
   20a04:	e1560000 	cmp	r6, r0
   20a08:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
   20a0c:	e5d43000 	ldrb	r3, [r4]
   20a10:	e3530034 	cmp	r3, #52	; 0x34
   20a14:	0a000034 	beq	20aec <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x104>
   20a18:	8a00000d 	bhi	20a54 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x6c>
   20a1c:	e3530003 	cmp	r3, #3
   20a20:	0a000043 	beq	20b34 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x14c>
   20a24:	8a00001a 	bhi	20a94 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xac>
   20a28:	e3530000 	cmp	r3, #0
   20a2c:	02844001 	addeq	r4, r4, #1
   20a30:	0afffff2 	beq	20a00 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   20a34:	e3530001 	cmp	r3, #1
   20a38:	1a000027 	bne	20adc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xf4>
   20a3c:	e5d45001 	ldrb	r5, [r4, #1]
   20a40:	e3550004 	cmp	r5, #4
   20a44:	0a000061 	beq	20bd0 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1e8>
   20a48:	e2855002 	add	r5, r5, #2
   20a4c:	e0844005 	add	r4, r4, r5
   20a50:	eaffffea 	b	20a00 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   20a54:	e353003a 	cmp	r3, #58	; 0x3a
   20a58:	0a000049 	beq	20b84 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x19c>
   20a5c:	8a00001a 	bhi	20acc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xe4>
   20a60:	e3530035 	cmp	r3, #53	; 0x35
   20a64:	0a00003e 	beq	20b64 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x17c>
   20a68:	e3530036 	cmp	r3, #54	; 0x36
   20a6c:	1a00001a 	bne	20adc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xf4>
   20a70:	e5d45001 	ldrb	r5, [r4, #1]
   20a74:	e3550004 	cmp	r5, #4
   20a78:	1afffff2 	bne	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20a7c:	e2843006 	add	r3, r4, #6
   20a80:	e1560003 	cmp	r6, r3
   20a84:	3affffef 	bcc	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20a88:	ebffffcb 	bl	209bc <CDHCPClient::GetUnaligned(void const*)>
   20a8c:	e58701d4 	str	r0, [r7, #468]	; 0x1d4
   20a90:	eaffffec 	b	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20a94:	e3530006 	cmp	r3, #6
   20a98:	0a000043 	beq	20bac <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1c4>
   20a9c:	e3530033 	cmp	r3, #51	; 0x33
   20aa0:	1a00000d 	bne	20adc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xf4>
   20aa4:	e5d45001 	ldrb	r5, [r4, #1]
   20aa8:	e3550004 	cmp	r5, #4
   20aac:	1affffe5 	bne	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20ab0:	e2843006 	add	r3, r4, #6
   20ab4:	e1560003 	cmp	r6, r3
   20ab8:	3affffe2 	bcc	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20abc:	ebffffbe 	bl	209bc <CDHCPClient::GetUnaligned(void const*)>
   20ac0:	e6bf0f30 	rev	r0, r0
   20ac4:	e58701cc 	str	r0, [r7, #460]	; 0x1cc
   20ac8:	eaffffde 	b	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20acc:	e353003b 	cmp	r3, #59	; 0x3b
   20ad0:	0a00000d 	beq	20b0c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x124>
   20ad4:	e35300ff 	cmp	r3, #255	; 0xff
   20ad8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   20adc:	e5d45001 	ldrb	r5, [r4, #1]
   20ae0:	e2855002 	add	r5, r5, #2
   20ae4:	e0844005 	add	r4, r4, r5
   20ae8:	eaffffc4 	b	20a00 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   20aec:	e5d45001 	ldrb	r5, [r4, #1]
   20af0:	e3550001 	cmp	r5, #1
   20af4:	1affffd3 	bne	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20af8:	e2843003 	add	r3, r4, #3
   20afc:	e1560003 	cmp	r6, r3
   20b00:	25d43002 	ldrbcs	r3, [r4, #2]
   20b04:	25c731d0 	strbcs	r3, [r7, #464]	; 0x1d0
   20b08:	eaffffce 	b	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20b0c:	e5d45001 	ldrb	r5, [r4, #1]
   20b10:	e3550004 	cmp	r5, #4
   20b14:	1affffcb 	bne	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20b18:	e2843006 	add	r3, r4, #6
   20b1c:	e1560003 	cmp	r6, r3
   20b20:	3affffc8 	bcc	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20b24:	ebffffa4 	bl	209bc <CDHCPClient::GetUnaligned(void const*)>
   20b28:	e6bf0f30 	rev	r0, r0
   20b2c:	e58701dc 	str	r0, [r7, #476]	; 0x1dc
   20b30:	eaffffc4 	b	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20b34:	e5d45001 	ldrb	r5, [r4, #1]
   20b38:	e3550003 	cmp	r5, #3
   20b3c:	daffffc1 	ble	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20b40:	e2843006 	add	r3, r4, #6
   20b44:	e1560003 	cmp	r6, r3
   20b48:	3affffbe 	bcc	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20b4c:	e59731c4 	ldr	r3, [r7, #452]	; 0x1c4
   20b50:	e3530000 	cmp	r3, #0
   20b54:	1affffbb 	bne	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20b58:	ebffff97 	bl	209bc <CDHCPClient::GetUnaligned(void const*)>
   20b5c:	e58701c4 	str	r0, [r7, #452]	; 0x1c4
   20b60:	eaffffb8 	b	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20b64:	e5d45001 	ldrb	r5, [r4, #1]
   20b68:	e3550001 	cmp	r5, #1
   20b6c:	1affffb5 	bne	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20b70:	e2843003 	add	r3, r4, #3
   20b74:	e1560003 	cmp	r6, r3
   20b78:	25d43002 	ldrbcs	r3, [r4, #2]
   20b7c:	25c731d1 	strbcs	r3, [r7, #465]	; 0x1d1
   20b80:	eaffffb0 	b	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20b84:	e5d45001 	ldrb	r5, [r4, #1]
   20b88:	e3550004 	cmp	r5, #4
   20b8c:	1affffad 	bne	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20b90:	e2843006 	add	r3, r4, #6
   20b94:	e1560003 	cmp	r6, r3
   20b98:	3affffaa 	bcc	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20b9c:	ebffff86 	bl	209bc <CDHCPClient::GetUnaligned(void const*)>
   20ba0:	e6bf0f30 	rev	r0, r0
   20ba4:	e58701d8 	str	r0, [r7, #472]	; 0x1d8
   20ba8:	eaffffa6 	b	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20bac:	e5d45001 	ldrb	r5, [r4, #1]
   20bb0:	e3550003 	cmp	r5, #3
   20bb4:	daffffa3 	ble	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20bb8:	e2843006 	add	r3, r4, #6
   20bbc:	e1560003 	cmp	r6, r3
   20bc0:	3affffa0 	bcc	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20bc4:	ebffff7c 	bl	209bc <CDHCPClient::GetUnaligned(void const*)>
   20bc8:	e58701c8 	str	r0, [r7, #456]	; 0x1c8
   20bcc:	eaffff9d 	b	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20bd0:	e2843006 	add	r3, r4, #6
   20bd4:	e1560003 	cmp	r6, r3
   20bd8:	3affff9a 	bcc	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20bdc:	ebffff76 	bl	209bc <CDHCPClient::GetUnaligned(void const*)>
   20be0:	e58701c0 	str	r0, [r7, #448]	; 0x1c0
   20be4:	eaffff97 	b	20a48 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   20be8:	e59f2008 	ldr	r2, [pc, #8]	; 20bf8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x210>
   20bec:	e59f1008 	ldr	r1, [pc, #8]	; 20bfc <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x214>
   20bf0:	e59f0008 	ldr	r0, [pc, #8]	; 20c00 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x218>
   20bf4:	eb000aa1 	bl	23680 <assertion_failed>
   20bf8:	000002ad 	.word	0x000002ad
   20bfc:	00039b90 	.word	0x00039b90
   20c00:	00039c60 	.word	0x00039c60

00020c04 <CDHCPClient::GetXID() const>:
   20c04:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   20c08:	e92d4010 	push	{r4, lr}
   20c0c:	e3500000 	cmp	r0, #0
   20c10:	0a00000b 	beq	20c44 <CDHCPClient::GetXID() const+0x40>
   20c14:	ebffde7a 	bl	18604 <CNetSubSystem::GetNetDeviceLayer()>
   20c18:	ebffe7ac 	bl	1aad0 <CNetDeviceLayer::GetMACAddress() const>
   20c1c:	eb00240b 	bl	29c50 <CMACAddress::Get() const>
   20c20:	e2504000 	subs	r4, r0, #0
   20c24:	0a00000a 	beq	20c54 <CDHCPClient::GetXID() const+0x50>
   20c28:	eb002054 	bl	28d80 <CTimer::Get()>
   20c2c:	e2840002 	add	r0, r4, #2
   20c30:	ebffff61 	bl	209bc <CDHCPClient::GetUnaligned(void const*)>
   20c34:	e1a04000 	mov	r4, r0
   20c38:	eb001d93 	bl	2828c <CTimer::GetClockTicks()>
   20c3c:	e0840000 	add	r0, r4, r0
   20c40:	e8bd8010 	pop	{r4, pc}
   20c44:	e59f2018 	ldr	r2, [pc, #24]	; 20c64 <CDHCPClient::GetXID() const+0x60>
   20c48:	e59f1018 	ldr	r1, [pc, #24]	; 20c68 <CDHCPClient::GetXID() const+0x64>
   20c4c:	e59f0018 	ldr	r0, [pc, #24]	; 20c6c <CDHCPClient::GetXID() const+0x68>
   20c50:	eb000a8a 	bl	23680 <assertion_failed>
   20c54:	e3a02fd6 	mov	r2, #856	; 0x358
   20c58:	e59f1008 	ldr	r1, [pc, #8]	; 20c68 <CDHCPClient::GetXID() const+0x64>
   20c5c:	e59f000c 	ldr	r0, [pc, #12]	; 20c70 <CDHCPClient::GetXID() const+0x6c>
   20c60:	eb000a86 	bl	23680 <assertion_failed>
   20c64:	00000356 	.word	0x00000356
   20c68:	00039b90 	.word	0x00039b90
   20c6c:	00038efc 	.word	0x00038efc
   20c70:	00039298 	.word	0x00039298

00020c74 <CDHCPClient::SetUnaligned(void*, unsigned int)>:
   20c74:	e3500000 	cmp	r0, #0
   20c78:	0a000007 	beq	20c9c <CDHCPClient::SetUnaligned(void*, unsigned int)+0x28>
   20c7c:	e1a0c421 	lsr	ip, r1, #8
   20c80:	e1a02821 	lsr	r2, r1, #16
   20c84:	e1a03c21 	lsr	r3, r1, #24
   20c88:	e5c01000 	strb	r1, [r0]
   20c8c:	e5c0c001 	strb	ip, [r0, #1]
   20c90:	e5c02002 	strb	r2, [r0, #2]
   20c94:	e5c03003 	strb	r3, [r0, #3]
   20c98:	e12fff1e 	bx	lr
   20c9c:	e92d4010 	push	{r4, lr}
   20ca0:	e59f2008 	ldr	r2, [pc, #8]	; 20cb0 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x3c>
   20ca4:	e59f1008 	ldr	r1, [pc, #8]	; 20cb4 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x40>
   20ca8:	e59f0008 	ldr	r0, [pc, #8]	; 20cb8 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x44>
   20cac:	eb000a73 	bl	23680 <assertion_failed>
   20cb0:	0000036d 	.word	0x0000036d
   20cb4:	00039b90 	.word	0x00039b90
   20cb8:	00039c54 	.word	0x00039c54

00020cbc <CDHCPClient::~CDHCPClient()>:
   20cbc:	e3a02000 	mov	r2, #0
   20cc0:	e92d4010 	push	{r4, lr}
   20cc4:	e1a04000 	mov	r4, r0
   20cc8:	e59f3024 	ldr	r3, [pc, #36]	; 20cf4 <CDHCPClient::~CDHCPClient()+0x38>
   20ccc:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   20cd0:	e5803000 	str	r3, [r0]
   20cd4:	e28000f4 	add	r0, r0, #244	; 0xf4
   20cd8:	eb0003f5 	bl	21cb4 <CSocket::~CSocket()>
   20cdc:	e28400e4 	add	r0, r4, #228	; 0xe4
   20ce0:	eb00170c 	bl	26918 <CString::~CString()>
   20ce4:	e1a00004 	mov	r0, r4
   20ce8:	eb0007c0 	bl	22bf0 <CTask::~CTask()>
   20cec:	e1a00004 	mov	r0, r4
   20cf0:	e8bd8010 	pop	{r4, pc}
   20cf4:	00039b54 	.word	0x00039b54

00020cf8 <CDHCPClient::~CDHCPClient()>:
   20cf8:	e92d4010 	push	{r4, lr}
   20cfc:	e1a04000 	mov	r4, r0
   20d00:	ebffffed 	bl	20cbc <CDHCPClient::~CDHCPClient()>
   20d04:	e1a00004 	mov	r0, r4
   20d08:	e3a01e1e 	mov	r1, #480	; 0x1e0
   20d0c:	eb002486 	bl	29f2c <operator delete(void*, unsigned int)>
   20d10:	e1a00004 	mov	r0, r4
   20d14:	e8bd8010 	pop	{r4, pc}

00020d18 <CDHCPClient::ReceiveMessage()>:
   20d18:	e92d4070 	push	{r4, r5, r6, lr}
   20d1c:	e24dde23 	sub	sp, sp, #560	; 0x230
   20d20:	e1a04000 	mov	r4, r0
   20d24:	e3a03040 	mov	r3, #64	; 0x40
   20d28:	e28000f4 	add	r0, r0, #244	; 0xf4
   20d2c:	e3a02f89 	mov	r2, #548	; 0x224
   20d30:	e28d100c 	add	r1, sp, #12
   20d34:	eb00046a 	bl	21ee4 <CSocket::Receive(void*, unsigned int, int)>
   20d38:	e35000ef 	cmp	r0, #239	; 0xef
   20d3c:	da000002 	ble	20d4c <CDHCPClient::ReceiveMessage()+0x34>
   20d40:	e5dd300c 	ldrb	r3, [sp, #12]
   20d44:	e3530002 	cmp	r3, #2
   20d48:	0a000003 	beq	20d5c <CDHCPClient::ReceiveMessage()+0x44>
   20d4c:	e3a04000 	mov	r4, #0
   20d50:	e1a00004 	mov	r0, r4
   20d54:	e28dde23 	add	sp, sp, #560	; 0x230
   20d58:	e8bd8070 	pop	{r4, r5, r6, pc}
   20d5c:	e5dd300d 	ldrb	r3, [sp, #13]
   20d60:	e3530001 	cmp	r3, #1
   20d64:	1afffff8 	bne	20d4c <CDHCPClient::ReceiveMessage()+0x34>
   20d68:	e5dd300e 	ldrb	r3, [sp, #14]
   20d6c:	e3530006 	cmp	r3, #6
   20d70:	1afffff5 	bne	20d4c <CDHCPClient::ReceiveMessage()+0x34>
   20d74:	e59d2010 	ldr	r2, [sp, #16]
   20d78:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
   20d7c:	e1520003 	cmp	r2, r3
   20d80:	1afffff1 	bne	20d4c <CDHCPClient::ReceiveMessage()+0x34>
   20d84:	e59f3114 	ldr	r3, [pc, #276]	; 20ea0 <CDHCPClient::ReceiveMessage()+0x188>
   20d88:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   20d8c:	e1520003 	cmp	r2, r3
   20d90:	1affffed 	bne	20d4c <CDHCPClient::ReceiveMessage()+0x34>
   20d94:	e1a05000 	mov	r5, r0
   20d98:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   20d9c:	e3500000 	cmp	r0, #0
   20da0:	0a000036 	beq	20e80 <CDHCPClient::ReceiveMessage()+0x168>
   20da4:	ebffde16 	bl	18604 <CNetSubSystem::GetNetDeviceLayer()>
   20da8:	ebffe748 	bl	1aad0 <CNetDeviceLayer::GetMACAddress() const>
   20dac:	e2506000 	subs	r6, r0, #0
   20db0:	0a000036 	beq	20e90 <CDHCPClient::ReceiveMessage()+0x178>
   20db4:	e28d1028 	add	r1, sp, #40	; 0x28
   20db8:	e28d0004 	add	r0, sp, #4
   20dbc:	eb002395 	bl	29c18 <CMACAddress::CMACAddress(unsigned char const*)>
   20dc0:	e1a01006 	mov	r1, r6
   20dc4:	e28d0004 	add	r0, sp, #4
   20dc8:	eb00237d 	bl	29bc4 <CMACAddress::operator!=(CMACAddress const&) const>
   20dcc:	e3500000 	cmp	r0, #0
   20dd0:	13a04000 	movne	r4, #0
   20dd4:	0a000002 	beq	20de4 <CDHCPClient::ReceiveMessage()+0xcc>
   20dd8:	e28d0004 	add	r0, sp, #4
   20ddc:	eb00235f 	bl	29b60 <CMACAddress::~CMACAddress()>
   20de0:	eaffffda 	b	20d50 <CDHCPClient::ReceiveMessage()+0x38>
   20de4:	e59d301c 	ldr	r3, [sp, #28]
   20de8:	e24520f0 	sub	r2, r5, #240	; 0xf0
   20dec:	e58401c0 	str	r0, [r4, #448]	; 0x1c0
   20df0:	e58401c4 	str	r0, [r4, #452]	; 0x1c4
   20df4:	e58401c8 	str	r0, [r4, #456]	; 0x1c8
   20df8:	e58401cc 	str	r0, [r4, #460]	; 0x1cc
   20dfc:	e5c401d0 	strb	r0, [r4, #464]	; 0x1d0
   20e00:	e5c401d1 	strb	r0, [r4, #465]	; 0x1d1
   20e04:	e58401d4 	str	r0, [r4, #468]	; 0x1d4
   20e08:	e58401d8 	str	r0, [r4, #472]	; 0x1d8
   20e0c:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   20e10:	e58431bc 	str	r3, [r4, #444]	; 0x1bc
   20e14:	e28d10fc 	add	r1, sp, #252	; 0xfc
   20e18:	e1a00004 	mov	r0, r4
   20e1c:	ebfffef1 	bl	209e8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   20e20:	e5d431d0 	ldrb	r3, [r4, #464]	; 0x1d0
   20e24:	e3530002 	cmp	r3, #2
   20e28:	0a00000e 	beq	20e68 <CDHCPClient::ReceiveMessage()+0x150>
   20e2c:	e3530003 	cmp	r3, #3
   20e30:	0a000008 	beq	20e58 <CDHCPClient::ReceiveMessage()+0x140>
   20e34:	e3530001 	cmp	r3, #1
   20e38:	13a04001 	movne	r4, #1
   20e3c:	1affffe5 	bne	20dd8 <CDHCPClient::ReceiveMessage()+0xc0>
   20e40:	e1a00004 	mov	r0, r4
   20e44:	e3a02080 	mov	r2, #128	; 0x80
   20e48:	e28d1078 	add	r1, sp, #120	; 0x78
   20e4c:	e1a04003 	mov	r4, r3
   20e50:	ebfffee4 	bl	209e8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   20e54:	eaffffdf 	b	20dd8 <CDHCPClient::ReceiveMessage()+0xc0>
   20e58:	e3a02080 	mov	r2, #128	; 0x80
   20e5c:	e28d1078 	add	r1, sp, #120	; 0x78
   20e60:	e1a00004 	mov	r0, r4
   20e64:	ebfffedf 	bl	209e8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   20e68:	e1a00004 	mov	r0, r4
   20e6c:	e3a02040 	mov	r2, #64	; 0x40
   20e70:	e28d1038 	add	r1, sp, #56	; 0x38
   20e74:	ebfffedb 	bl	209e8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   20e78:	e3a04001 	mov	r4, #1
   20e7c:	eaffffd5 	b	20dd8 <CDHCPClient::ReceiveMessage()+0xc0>
   20e80:	e59f201c 	ldr	r2, [pc, #28]	; 20ea4 <CDHCPClient::ReceiveMessage()+0x18c>
   20e84:	e59f101c 	ldr	r1, [pc, #28]	; 20ea8 <CDHCPClient::ReceiveMessage()+0x190>
   20e88:	e59f001c 	ldr	r0, [pc, #28]	; 20eac <CDHCPClient::ReceiveMessage()+0x194>
   20e8c:	eb0009fb 	bl	23680 <assertion_failed>
   20e90:	e59f2018 	ldr	r2, [pc, #24]	; 20eb0 <CDHCPClient::ReceiveMessage()+0x198>
   20e94:	e59f100c 	ldr	r1, [pc, #12]	; 20ea8 <CDHCPClient::ReceiveMessage()+0x190>
   20e98:	e59f0014 	ldr	r0, [pc, #20]	; 20eb4 <CDHCPClient::ReceiveMessage()+0x19c>
   20e9c:	eb0009f7 	bl	23680 <assertion_failed>
   20ea0:	63538263 	.word	0x63538263
   20ea4:	0000027b 	.word	0x0000027b
   20ea8:	00039b90 	.word	0x00039b90
   20eac:	00038efc 	.word	0x00038efc
   20eb0:	0000027d 	.word	0x0000027d
   20eb4:	00039114 	.word	0x00039114

00020eb8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>:
   20eb8:	e92d4070 	push	{r4, r5, r6, lr}
   20ebc:	e1a04000 	mov	r4, r0
   20ec0:	e24ddf8a 	sub	sp, sp, #552	; 0x228
   20ec4:	e1a05001 	mov	r5, r1
   20ec8:	e1a06002 	mov	r6, r2
   20ecc:	e3a01000 	mov	r1, #0
   20ed0:	e3a02f89 	mov	r2, #548	; 0x224
   20ed4:	e28d0004 	add	r0, sp, #4
   20ed8:	eb001fb5 	bl	28db4 <memset>
   20edc:	e5d431b0 	ldrb	r3, [r4, #432]	; 0x1b0
   20ee0:	e3a02001 	mov	r2, #1
   20ee4:	e3530000 	cmp	r3, #0
   20ee8:	13a03080 	movne	r3, #128	; 0x80
   20eec:	03a03000 	moveq	r3, #0
   20ef0:	e3a01006 	mov	r1, #6
   20ef4:	e1cd30be 	strh	r3, [sp, #14]
   20ef8:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
   20efc:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   20f00:	e58d3008 	str	r3, [sp, #8]
   20f04:	e59431b8 	ldr	r3, [r4, #440]	; 0x1b8
   20f08:	e3500000 	cmp	r0, #0
   20f0c:	e58d3010 	str	r3, [sp, #16]
   20f10:	e59f30b0 	ldr	r3, [pc, #176]	; 20fc8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x110>
   20f14:	e5cd2004 	strb	r2, [sp, #4]
   20f18:	e5cd2005 	strb	r2, [sp, #5]
   20f1c:	e5cd1006 	strb	r1, [sp, #6]
   20f20:	e58d30f0 	str	r3, [sp, #240]	; 0xf0
   20f24:	0a000017 	beq	20f88 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xd0>
   20f28:	ebffddb5 	bl	18604 <CNetSubSystem::GetNetDeviceLayer()>
   20f2c:	ebffe6e7 	bl	1aad0 <CNetDeviceLayer::GetMACAddress() const>
   20f30:	e3500000 	cmp	r0, #0
   20f34:	0a000017 	beq	20f98 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xe0>
   20f38:	e28d1020 	add	r1, sp, #32
   20f3c:	eb00234f 	bl	29c80 <CMACAddress::CopyTo(unsigned char*) const>
   20f40:	e3550000 	cmp	r5, #0
   20f44:	0a000017 	beq	20fa8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xf0>
   20f48:	e3560f4d 	cmp	r6, #308	; 0x134
   20f4c:	8a000019 	bhi	20fb8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x100>
   20f50:	e1a02006 	mov	r2, r6
   20f54:	e1a01005 	mov	r1, r5
   20f58:	e28d00f4 	add	r0, sp, #244	; 0xf4
   20f5c:	eb00220b 	bl	29790 <memcpy>
   20f60:	e28d1004 	add	r1, sp, #4
   20f64:	e28400f4 	add	r0, r4, #244	; 0xf4
   20f68:	e3a03000 	mov	r3, #0
   20f6c:	e3a02f89 	mov	r2, #548	; 0x224
   20f70:	eb0003be 	bl	21e70 <CSocket::Send(void const*, unsigned int, int)>
   20f74:	e2400f89 	sub	r0, r0, #548	; 0x224
   20f78:	e16f0f10 	clz	r0, r0
   20f7c:	e1a002a0 	lsr	r0, r0, #5
   20f80:	e28ddf8a 	add	sp, sp, #552	; 0x228
   20f84:	e8bd8070 	pop	{r4, r5, r6, pc}
   20f88:	e3a02f96 	mov	r2, #600	; 0x258
   20f8c:	e59f1038 	ldr	r1, [pc, #56]	; 20fcc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   20f90:	e59f0038 	ldr	r0, [pc, #56]	; 20fd0 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x118>
   20f94:	eb0009b9 	bl	23680 <assertion_failed>
   20f98:	e59f2034 	ldr	r2, [pc, #52]	; 20fd4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x11c>
   20f9c:	e59f1028 	ldr	r1, [pc, #40]	; 20fcc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   20fa0:	e59f0030 	ldr	r0, [pc, #48]	; 20fd8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x120>
   20fa4:	eb0009b5 	bl	23680 <assertion_failed>
   20fa8:	e59f202c 	ldr	r2, [pc, #44]	; 20fdc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x124>
   20fac:	e59f1018 	ldr	r1, [pc, #24]	; 20fcc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   20fb0:	e59f0028 	ldr	r0, [pc, #40]	; 20fe0 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x128>
   20fb4:	eb0009b1 	bl	23680 <assertion_failed>
   20fb8:	e59f2024 	ldr	r2, [pc, #36]	; 20fe4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x12c>
   20fbc:	e59f1008 	ldr	r1, [pc, #8]	; 20fcc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   20fc0:	e59f0020 	ldr	r0, [pc, #32]	; 20fe8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x130>
   20fc4:	eb0009ad 	bl	23680 <assertion_failed>
   20fc8:	63538263 	.word	0x63538263
   20fcc:	00039b90 	.word	0x00039b90
   20fd0:	00038efc 	.word	0x00038efc
   20fd4:	0000025a 	.word	0x0000025a
   20fd8:	00039298 	.word	0x00039298
   20fdc:	0000025d 	.word	0x0000025d
   20fe0:	00039c60 	.word	0x00039c60
   20fe4:	0000025e 	.word	0x0000025e
   20fe8:	00039c70 	.word	0x00039c70

00020fec <CDHCPClient::SendDiscover()>:
   20fec:	e3a01000 	mov	r1, #0
   20ff0:	e3a0200c 	mov	r2, #12
   20ff4:	e58011b8 	str	r1, [r0, #440]	; 0x1b8
   20ff8:	e59f1000 	ldr	r1, [pc]	; 21000 <CDHCPClient::SendDiscover()+0x14>
   20ffc:	eaffffad 	b	20eb8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   21000:	00039b68 	.word	0x00039b68

00021004 <CDHCPClient::SendRequest(unsigned int)>:
   21004:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21008:	e3510000 	cmp	r1, #0
   2100c:	e28db01c 	add	fp, sp, #28
   21010:	e1a06000 	mov	r6, r0
   21014:	e58011b8 	str	r1, [r0, #440]	; 0x1b8
   21018:	1a000036 	bne	210f8 <CDHCPClient::SendRequest(unsigned int)+0xf4>
   2101c:	e59021a0 	ldr	r2, [r0, #416]	; 0x1a0
   21020:	e59f1104 	ldr	r1, [pc, #260]	; 2112c <CDHCPClient::SendRequest(unsigned int)+0x128>
   21024:	e1a05822 	lsr	r5, r2, #16
   21028:	e1a04c22 	lsr	r4, r2, #24
   2102c:	e5c15007 	strb	r5, [r1, #7]
   21030:	e5c14008 	strb	r4, [r1, #8]
   21034:	e3a05018 	mov	r5, #24
   21038:	e1a04001 	mov	r4, r1
   2103c:	e590319c 	ldr	r3, [r0, #412]	; 0x19c
   21040:	e1a00422 	lsr	r0, r2, #8
   21044:	e1a0e423 	lsr	lr, r3, #8
   21048:	e1a0c823 	lsr	ip, r3, #16
   2104c:	e5c10006 	strb	r0, [r1, #6]
   21050:	e1a00c23 	lsr	r0, r3, #24
   21054:	e5c12005 	strb	r2, [r1, #5]
   21058:	e5c1300b 	strb	r3, [r1, #11]
   2105c:	e5c1e00c 	strb	lr, [r1, #12]
   21060:	e5c1c00d 	strb	ip, [r1, #13]
   21064:	e5c1000e 	strb	r0, [r1, #14]
   21068:	e28680e4 	add	r8, r6, #228	; 0xe4
   2106c:	e1a00008 	mov	r0, r8
   21070:	eb00169f 	bl	26af4 <CString::GetLength() const>
   21074:	e2507000 	subs	r7, r0, #0
   21078:	0a000021 	beq	21104 <CDHCPClient::SendRequest(unsigned int)+0x100>
   2107c:	e35700ff 	cmp	r7, #255	; 0xff
   21080:	8a000025 	bhi	2111c <CDHCPClient::SendRequest(unsigned int)+0x118>
   21084:	e085c007 	add	ip, r5, r7
   21088:	e28c3009 	add	r3, ip, #9
   2108c:	e3c33007 	bic	r3, r3, #7
   21090:	e04dd003 	sub	sp, sp, r3
   21094:	e1a01004 	mov	r1, r4
   21098:	e1a02005 	mov	r2, r5
   2109c:	e1a0000d 	mov	r0, sp
   210a0:	e28c9002 	add	r9, ip, #2
   210a4:	eb0021b9 	bl	29790 <memcpy>
   210a8:	e3a0200c 	mov	r2, #12
   210ac:	e2455001 	sub	r5, r5, #1
   210b0:	e08d3005 	add	r3, sp, r5
   210b4:	e7cd2005 	strb	r2, [sp, r5]
   210b8:	e1a00008 	mov	r0, r8
   210bc:	e5c37001 	strb	r7, [r3, #1]
   210c0:	e2834002 	add	r4, r3, #2
   210c4:	eb00165c 	bl	26a3c <CString::operator char const*() const>
   210c8:	e1a02007 	mov	r2, r7
   210cc:	e1a01000 	mov	r1, r0
   210d0:	e1a00004 	mov	r0, r4
   210d4:	eb0021ad 	bl	29790 <memcpy>
   210d8:	e3e03000 	mvn	r3, #0
   210dc:	e1a02009 	mov	r2, r9
   210e0:	e1a00006 	mov	r0, r6
   210e4:	e1a0100d 	mov	r1, sp
   210e8:	e7c43007 	strb	r3, [r4, r7]
   210ec:	ebffff71 	bl	20eb8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   210f0:	e24bd01c 	sub	sp, fp, #28
   210f4:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   210f8:	e3a0500c 	mov	r5, #12
   210fc:	e59f402c 	ldr	r4, [pc, #44]	; 21130 <CDHCPClient::SendRequest(unsigned int)+0x12c>
   21100:	eaffffd8 	b	21068 <CDHCPClient::SendRequest(unsigned int)+0x64>
   21104:	e1a02005 	mov	r2, r5
   21108:	e1a01004 	mov	r1, r4
   2110c:	e1a00006 	mov	r0, r6
   21110:	ebffff68 	bl	20eb8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   21114:	e24bd01c 	sub	sp, fp, #28
   21118:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2111c:	e59f2010 	ldr	r2, [pc, #16]	; 21134 <CDHCPClient::SendRequest(unsigned int)+0x130>
   21120:	e59f1010 	ldr	r1, [pc, #16]	; 21138 <CDHCPClient::SendRequest(unsigned int)+0x134>
   21124:	e59f0010 	ldr	r0, [pc, #16]	; 2113c <CDHCPClient::SendRequest(unsigned int)+0x138>
   21128:	eb000954 	bl	23680 <assertion_failed>
   2112c:	0003dfc0 	.word	0x0003dfc0
   21130:	00039b74 	.word	0x00039b74
   21134:	00000231 	.word	0x00000231
   21138:	00039b90 	.word	0x00039b90
   2113c:	00039c98 	.word	0x00039c98

00021140 <CDHCPClient::SendAndReceive(bool, unsigned int)>:
   21140:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21144:	e1a04000 	mov	r4, r0
   21148:	e1a07001 	mov	r7, r1
   2114c:	e3a0b002 	mov	fp, #2
   21150:	e24dd014 	sub	sp, sp, #20
   21154:	e59f8160 	ldr	r8, [pc, #352]	; 212bc <CDHCPClient::SendAndReceive(bool, unsigned int)+0x17c>
   21158:	e59fa160 	ldr	sl, [pc, #352]	; 212c0 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x180>
   2115c:	e58d200c 	str	r2, [sp, #12]
   21160:	e3570000 	cmp	r7, #0
   21164:	0a00003f 	beq	21268 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x128>
   21168:	e59d100c 	ldr	r1, [sp, #12]
   2116c:	e1a00004 	mov	r0, r4
   21170:	ebffffa3 	bl	21004 <CDHCPClient::SendRequest(unsigned int)>
   21174:	e2200001 	eor	r0, r0, #1
   21178:	e6ef0070 	uxtb	r0, r0
   2117c:	e3500000 	cmp	r0, #0
   21180:	1a000040 	bne	21288 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x148>
   21184:	eb001efd 	bl	28d80 <CTimer::Get()>
   21188:	eb001c46 	bl	282a8 <CTimer::GetTicks() const>
   2118c:	e4985004 	ldr	r5, [r8], #4
   21190:	e1a06000 	mov	r6, r0
   21194:	ea000004 	b	211ac <CDHCPClient::SendAndReceive(bool, unsigned int)+0x6c>
   21198:	e2433005 	sub	r3, r3, #5
   2119c:	e3530001 	cmp	r3, #1
   211a0:	9a000016 	bls	21200 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc0>
   211a4:	eb000887 	bl	233c8 <CScheduler::Get()>
   211a8:	eb0007f3 	bl	2317c <CScheduler::Yield()>
   211ac:	eb001ef3 	bl	28d80 <CTimer::Get()>
   211b0:	eb001c3c 	bl	282a8 <CTimer::GetTicks() const>
   211b4:	e0400006 	sub	r0, r0, r6
   211b8:	e1550000 	cmp	r5, r0
   211bc:	9a000012 	bls	2120c <CDHCPClient::SendAndReceive(bool, unsigned int)+0xcc>
   211c0:	e1a00004 	mov	r0, r4
   211c4:	ebfffed3 	bl	20d18 <CDHCPClient::ReceiveMessage()>
   211c8:	e2509000 	subs	r9, r0, #0
   211cc:	0afffff4 	beq	211a4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   211d0:	e3570000 	cmp	r7, #0
   211d4:	e5d431d1 	ldrb	r3, [r4, #465]	; 0x1d1
   211d8:	1affffee 	bne	21198 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x58>
   211dc:	e3530002 	cmp	r3, #2
   211e0:	1affffef 	bne	211a4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   211e4:	e1a00004 	mov	r0, r4
   211e8:	ebfffd90 	bl	20830 <CDHCPClient::CheckConfig()>
   211ec:	e3500000 	cmp	r0, #0
   211f0:	0affffeb 	beq	211a4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   211f4:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   211f8:	e3530000 	cmp	r3, #0
   211fc:	0affffe8 	beq	211a4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   21200:	e1a00009 	mov	r0, r9
   21204:	e28dd014 	add	sp, sp, #20
   21208:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2120c:	eb00120e 	bl	25a4c <CLogger::Get()>
   21210:	e1a0300a 	mov	r3, sl
   21214:	e1a0200b 	mov	r2, fp
   21218:	e59f10a4 	ldr	r1, [pc, #164]	; 212c4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   2121c:	eb001147 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21220:	e59f30a0 	ldr	r3, [pc, #160]	; 212c8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x188>
   21224:	e1530008 	cmp	r3, r8
   21228:	1affffcc 	bne	21160 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x20>
   2122c:	eb001206 	bl	25a4c <CLogger::Get()>
   21230:	e59f2094 	ldr	r2, [pc, #148]	; 212cc <CDHCPClient::SendAndReceive(bool, unsigned int)+0x18c>
   21234:	e59f1094 	ldr	r1, [pc, #148]	; 212d0 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x190>
   21238:	e3570000 	cmp	r7, #0
   2123c:	01a07002 	moveq	r7, r2
   21240:	11a07001 	movne	r7, r1
   21244:	e3a09000 	mov	r9, #0
   21248:	e59f3084 	ldr	r3, [pc, #132]	; 212d4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x194>
   2124c:	e3a02002 	mov	r2, #2
   21250:	e58d7000 	str	r7, [sp]
   21254:	e59f1068 	ldr	r1, [pc, #104]	; 212c4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   21258:	eb001138 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2125c:	e1a00009 	mov	r0, r9
   21260:	e28dd014 	add	sp, sp, #20
   21264:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21268:	e58471b8 	str	r7, [r4, #440]	; 0x1b8
   2126c:	e3a0200c 	mov	r2, #12
   21270:	e59f1060 	ldr	r1, [pc, #96]	; 212d8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x198>
   21274:	e1a00004 	mov	r0, r4
   21278:	ebffff0e 	bl	20eb8 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   2127c:	e2200001 	eor	r0, r0, #1
   21280:	e6ef0070 	uxtb	r0, r0
   21284:	eaffffbc 	b	2117c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x3c>
   21288:	eb0011ef 	bl	25a4c <CLogger::Get()>
   2128c:	e59f2048 	ldr	r2, [pc, #72]	; 212dc <CDHCPClient::SendAndReceive(bool, unsigned int)+0x19c>
   21290:	e59f1048 	ldr	r1, [pc, #72]	; 212e0 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a0>
   21294:	e3570000 	cmp	r7, #0
   21298:	01a07002 	moveq	r7, r2
   2129c:	11a07001 	movne	r7, r1
   212a0:	e59f303c 	ldr	r3, [pc, #60]	; 212e4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a4>
   212a4:	e3a02001 	mov	r2, #1
   212a8:	e58d7000 	str	r7, [sp]
   212ac:	e59f1010 	ldr	r1, [pc, #16]	; 212c4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   212b0:	eb001122 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   212b4:	e3a09000 	mov	r9, #0
   212b8:	eaffffd0 	b	21200 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc0>
   212bc:	00039b80 	.word	0x00039b80
   212c0:	00039ce4 	.word	0x00039ce4
   212c4:	00039b60 	.word	0x00039b60
   212c8:	00039b90 	.word	0x00039b90
   212cc:	00039ccc 	.word	0x00039ccc
   212d0:	00039cc0 	.word	0x00039cc0
   212d4:	00039d08 	.word	0x00039d08
   212d8:	00039b68 	.word	0x00039b68
   212dc:	00039cb4 	.word	0x00039cb4
   212e0:	00039cac 	.word	0x00039cac
   212e4:	00039cd4 	.word	0x00039cd4

000212e8 <CDHCPClient::SelectAndRequest()>:
   212e8:	e92d4070 	push	{r4, r5, r6, lr}
   212ec:	e3a05001 	mov	r5, #1
   212f0:	e1a04000 	mov	r4, r0
   212f4:	e24dd028 	sub	sp, sp, #40	; 0x28
   212f8:	e5c051b0 	strb	r5, [r0, #432]	; 0x1b0
   212fc:	e28d0008 	add	r0, sp, #8
   21300:	ebfffa41 	bl	1fc0c <CIPAddress::CIPAddress()>
   21304:	e28460f4 	add	r6, r4, #244	; 0xf4
   21308:	e28d0008 	add	r0, sp, #8
   2130c:	ebfffae9 	bl	1feb8 <CIPAddress::SetBroadcast()>
   21310:	e1a00006 	mov	r0, r6
   21314:	e28d1008 	add	r1, sp, #8
   21318:	e3a02043 	mov	r2, #67	; 0x43
   2131c:	eb0001f1 	bl	21ae8 <CSocket::Connect(CIPAddress&, unsigned short)>
   21320:	e3500000 	cmp	r0, #0
   21324:	ba00001a 	blt	21394 <CDHCPClient::SelectAndRequest()+0xac>
   21328:	e1a00006 	mov	r0, r6
   2132c:	e1a01005 	mov	r1, r5
   21330:	eb000347 	bl	22054 <CSocket::SetOptionBroadcast(bool)>
   21334:	e2506000 	subs	r6, r0, #0
   21338:	1a00000e 	bne	21378 <CDHCPClient::SelectAndRequest()+0x90>
   2133c:	e1a00004 	mov	r0, r4
   21340:	ebfffe2f 	bl	20c04 <CDHCPClient::GetXID() const>
   21344:	e1a02006 	mov	r2, r6
   21348:	e58401b4 	str	r0, [r4, #436]	; 0x1b4
   2134c:	e1a01006 	mov	r1, r6
   21350:	e1a00004 	mov	r0, r4
   21354:	ebffff79 	bl	21140 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   21358:	e3500000 	cmp	r0, #0
   2135c:	1a000015 	bne	213b8 <CDHCPClient::SelectAndRequest()+0xd0>
   21360:	e3a04002 	mov	r4, #2
   21364:	e28d0008 	add	r0, sp, #8
   21368:	ebfffa3d 	bl	1fc64 <CIPAddress::~CIPAddress()>
   2136c:	e1a00004 	mov	r0, r4
   21370:	e28dd028 	add	sp, sp, #40	; 0x28
   21374:	e8bd8070 	pop	{r4, r5, r6, pc}
   21378:	eb0011b3 	bl	25a4c <CLogger::Get()>
   2137c:	e59f31f0 	ldr	r3, [pc, #496]	; 21574 <CDHCPClient::SelectAndRequest()+0x28c>
   21380:	e1a02005 	mov	r2, r5
   21384:	e59f11ec 	ldr	r1, [pc, #492]	; 21578 <CDHCPClient::SelectAndRequest()+0x290>
   21388:	e1a04005 	mov	r4, r5
   2138c:	eb0010eb 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21390:	eafffff3 	b	21364 <CDHCPClient::SelectAndRequest()+0x7c>
   21394:	eb0011ac 	bl	25a4c <CLogger::Get()>
   21398:	e3a02043 	mov	r2, #67	; 0x43
   2139c:	e59f31d8 	ldr	r3, [pc, #472]	; 2157c <CDHCPClient::SelectAndRequest()+0x294>
   213a0:	e58d2000 	str	r2, [sp]
   213a4:	e59f11cc 	ldr	r1, [pc, #460]	; 21578 <CDHCPClient::SelectAndRequest()+0x290>
   213a8:	e1a02005 	mov	r2, r5
   213ac:	e1a04005 	mov	r4, r5
   213b0:	eb0010e2 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   213b4:	eaffffea 	b	21364 <CDHCPClient::SelectAndRequest()+0x7c>
   213b8:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   213bc:	e3530000 	cmp	r3, #0
   213c0:	e584319c 	str	r3, [r4, #412]	; 0x19c
   213c4:	0a000023 	beq	21458 <CDHCPClient::SelectAndRequest()+0x170>
   213c8:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   213cc:	e3530000 	cmp	r3, #0
   213d0:	e58431a0 	str	r3, [r4, #416]	; 0x1a0
   213d4:	0a000023 	beq	21468 <CDHCPClient::SelectAndRequest()+0x180>
   213d8:	e1a02006 	mov	r2, r6
   213dc:	e1a01005 	mov	r1, r5
   213e0:	e1a00004 	mov	r0, r4
   213e4:	ebffff55 	bl	21140 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   213e8:	e3500000 	cmp	r0, #0
   213ec:	0affffdb 	beq	21360 <CDHCPClient::SelectAndRequest()+0x78>
   213f0:	e5d431d1 	ldrb	r3, [r4, #465]	; 0x1d1
   213f4:	e3530006 	cmp	r3, #6
   213f8:	0a00000f 	beq	2143c <CDHCPClient::SelectAndRequest()+0x154>
   213fc:	e1a00004 	mov	r0, r4
   21400:	ebfffd0a 	bl	20830 <CDHCPClient::CheckConfig()>
   21404:	e3500000 	cmp	r0, #0
   21408:	03a04004 	moveq	r4, #4
   2140c:	0affffd4 	beq	21364 <CDHCPClient::SelectAndRequest()+0x7c>
   21410:	e594219c 	ldr	r2, [r4, #412]	; 0x19c
   21414:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   21418:	e1520003 	cmp	r2, r3
   2141c:	0a000015 	beq	21478 <CDHCPClient::SelectAndRequest()+0x190>
   21420:	eb001189 	bl	25a4c <CLogger::Get()>
   21424:	e59f3154 	ldr	r3, [pc, #340]	; 21580 <CDHCPClient::SelectAndRequest()+0x298>
   21428:	e3a02002 	mov	r2, #2
   2142c:	e59f1144 	ldr	r1, [pc, #324]	; 21578 <CDHCPClient::SelectAndRequest()+0x290>
   21430:	eb0010c2 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21434:	e3a04005 	mov	r4, #5
   21438:	eaffffc9 	b	21364 <CDHCPClient::SelectAndRequest()+0x7c>
   2143c:	eb001182 	bl	25a4c <CLogger::Get()>
   21440:	e59f313c 	ldr	r3, [pc, #316]	; 21584 <CDHCPClient::SelectAndRequest()+0x29c>
   21444:	e3a02002 	mov	r2, #2
   21448:	e59f1128 	ldr	r1, [pc, #296]	; 21578 <CDHCPClient::SelectAndRequest()+0x290>
   2144c:	eb0010bb 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21450:	e3a04003 	mov	r4, #3
   21454:	eaffffc2 	b	21364 <CDHCPClient::SelectAndRequest()+0x7c>
   21458:	e3a020f9 	mov	r2, #249	; 0xf9
   2145c:	e59f1124 	ldr	r1, [pc, #292]	; 21588 <CDHCPClient::SelectAndRequest()+0x2a0>
   21460:	e59f0124 	ldr	r0, [pc, #292]	; 2158c <CDHCPClient::SelectAndRequest()+0x2a4>
   21464:	eb000885 	bl	23680 <assertion_failed>
   21468:	e3a020fc 	mov	r2, #252	; 0xfc
   2146c:	e59f1114 	ldr	r1, [pc, #276]	; 21588 <CDHCPClient::SelectAndRequest()+0x2a0>
   21470:	e59f0118 	ldr	r0, [pc, #280]	; 21590 <CDHCPClient::SelectAndRequest()+0x2a8>
   21474:	eb000881 	bl	23680 <assertion_failed>
   21478:	e59421a0 	ldr	r2, [r4, #416]	; 0x1a0
   2147c:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   21480:	e1520003 	cmp	r2, r3
   21484:	0a000006 	beq	214a4 <CDHCPClient::SelectAndRequest()+0x1bc>
   21488:	eb00116f 	bl	25a4c <CLogger::Get()>
   2148c:	e59f3100 	ldr	r3, [pc, #256]	; 21594 <CDHCPClient::SelectAndRequest()+0x2ac>
   21490:	e3a02002 	mov	r2, #2
   21494:	e59f10dc 	ldr	r1, [pc, #220]	; 21578 <CDHCPClient::SelectAndRequest()+0x290>
   21498:	eb0010a8 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2149c:	e3a04005 	mov	r4, #5
   214a0:	eaffffaf 	b	21364 <CDHCPClient::SelectAndRequest()+0x7c>
   214a4:	e28d0010 	add	r0, sp, #16
   214a8:	ebfff9d7 	bl	1fc0c <CIPAddress::CIPAddress()>
   214ac:	e594119c 	ldr	r1, [r4, #412]	; 0x19c
   214b0:	e28d0010 	add	r0, sp, #16
   214b4:	ebfffa57 	bl	1fe18 <CIPAddress::Set(unsigned int)>
   214b8:	e28d0018 	add	r0, sp, #24
   214bc:	eb001548 	bl	269e4 <CString::CString()>
   214c0:	e28d1018 	add	r1, sp, #24
   214c4:	e28d0010 	add	r0, sp, #16
   214c8:	ebfffacd 	bl	20004 <CIPAddress::Format(CString*) const>
   214cc:	eb00115e 	bl	25a4c <CLogger::Get()>
   214d0:	e1a05000 	mov	r5, r0
   214d4:	e28d0018 	add	r0, sp, #24
   214d8:	eb001557 	bl	26a3c <CString::operator char const*() const>
   214dc:	e59f30b4 	ldr	r3, [pc, #180]	; 21598 <CDHCPClient::SelectAndRequest()+0x2b0>
   214e0:	e58d0000 	str	r0, [sp]
   214e4:	e3a02003 	mov	r2, #3
   214e8:	e1a00005 	mov	r0, r5
   214ec:	e59f1084 	ldr	r1, [pc, #132]	; 21578 <CDHCPClient::SelectAndRequest()+0x290>
   214f0:	eb001092 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   214f4:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   214f8:	e3500000 	cmp	r0, #0
   214fc:	0a000018 	beq	21564 <CDHCPClient::SelectAndRequest()+0x27c>
   21500:	e594119c 	ldr	r1, [r4, #412]	; 0x19c
   21504:	ebfff9a4 	bl	1fb9c <CNetConfig::SetIPAddress(unsigned int)>
   21508:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   2150c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   21510:	ebfff9a8 	bl	1fbb8 <CNetConfig::SetNetMask(unsigned int)>
   21514:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   21518:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   2151c:	ebfff956 	bl	1fa7c <CNetConfig::SetDefaultGateway(unsigned int)>
   21520:	e59411c8 	ldr	r1, [r4, #456]	; 0x1c8
   21524:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   21528:	ebfff955 	bl	1fa84 <CNetConfig::SetDNSServer(unsigned int)>
   2152c:	e3a0c001 	mov	ip, #1
   21530:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   21534:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   21538:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   2153c:	e5c4c194 	strb	ip, [r4, #404]	; 0x194
   21540:	e58411a4 	str	r1, [r4, #420]	; 0x1a4
   21544:	e58421a8 	str	r2, [r4, #424]	; 0x1a8
   21548:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
   2154c:	e28d0018 	add	r0, sp, #24
   21550:	eb0014f0 	bl	26918 <CString::~CString()>
   21554:	e28d0010 	add	r0, sp, #16
   21558:	ebfff9c1 	bl	1fc64 <CIPAddress::~CIPAddress()>
   2155c:	e3a04000 	mov	r4, #0
   21560:	eaffff7f 	b	21364 <CDHCPClient::SelectAndRequest()+0x7c>
   21564:	e59f2030 	ldr	r2, [pc, #48]	; 2159c <CDHCPClient::SelectAndRequest()+0x2b4>
   21568:	e59f1018 	ldr	r1, [pc, #24]	; 21588 <CDHCPClient::SelectAndRequest()+0x2a0>
   2156c:	e59f002c 	ldr	r0, [pc, #44]	; 215a0 <CDHCPClient::SelectAndRequest()+0x2b8>
   21570:	eb000842 	bl	23680 <assertion_failed>
   21574:	00039d40 	.word	0x00039d40
   21578:	00039b60 	.word	0x00039b60
   2157c:	00039d1c 	.word	0x00039d1c
   21580:	00039dac 	.word	0x00039dac
   21584:	00039d90 	.word	0x00039d90
   21588:	00039b90 	.word	0x00039b90
   2158c:	00039d5c 	.word	0x00039d5c
   21590:	00039d74 	.word	0x00039d74
   21594:	00039dc4 	.word	0x00039dc4
   21598:	00039de4 	.word	0x00039de4
   2159c:	00000126 	.word	0x00000126
   215a0:	00038f28 	.word	0x00038f28

000215a4 <CDHCPClient::RenewOrRebind(bool, unsigned int)>:
   215a4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   215a8:	e1a05000 	mov	r5, r0
   215ac:	e24dd014 	sub	sp, sp, #20
   215b0:	e1a04001 	mov	r4, r1
   215b4:	e1a06002 	mov	r6, r2
   215b8:	eb001df0 	bl	28d80 <CTimer::Get()>
   215bc:	eb001b3b 	bl	282b0 <CTimer::GetUptime() const>
   215c0:	e5953198 	ldr	r3, [r5, #408]	; 0x198
   215c4:	e0400003 	sub	r0, r0, r3
   215c8:	e1500006 	cmp	r0, r6
   215cc:	23a04002 	movcs	r4, #2
   215d0:	3a000002 	bcc	215e0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x3c>
   215d4:	e1a00004 	mov	r0, r4
   215d8:	e28dd014 	add	sp, sp, #20
   215dc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   215e0:	eb001119 	bl	25a4c <CLogger::Get()>
   215e4:	e3540000 	cmp	r4, #0
   215e8:	0a00003d 	beq	216e4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x140>
   215ec:	e59f92b8 	ldr	r9, [pc, #696]	; 218ac <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x308>
   215f0:	e59f32b8 	ldr	r3, [pc, #696]	; 218b0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x30c>
   215f4:	e59f12b8 	ldr	r1, [pc, #696]	; 218b4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   215f8:	e3a02004 	mov	r2, #4
   215fc:	e28d8008 	add	r8, sp, #8
   21600:	e58d9000 	str	r9, [sp]
   21604:	eb00104d 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21608:	e1a00008 	mov	r0, r8
   2160c:	ebfff97e 	bl	1fc0c <CIPAddress::CIPAddress()>
   21610:	e3a03000 	mov	r3, #0
   21614:	e1a00008 	mov	r0, r8
   21618:	e5c531b0 	strb	r3, [r5, #432]	; 0x1b0
   2161c:	e59511a0 	ldr	r1, [r5, #416]	; 0x1a0
   21620:	ebfff9fc 	bl	1fe18 <CIPAddress::Set(unsigned int)>
   21624:	e28540f4 	add	r4, r5, #244	; 0xf4
   21628:	e1a00004 	mov	r0, r4
   2162c:	e3a02043 	mov	r2, #67	; 0x43
   21630:	e1a01008 	mov	r1, r8
   21634:	eb00012b 	bl	21ae8 <CSocket::Connect(CIPAddress&, unsigned short)>
   21638:	e3500000 	cmp	r0, #0
   2163c:	ba000036 	blt	2171c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x178>
   21640:	e1a00004 	mov	r0, r4
   21644:	e5d511b0 	ldrb	r1, [r5, #432]	; 0x1b0
   21648:	eb000281 	bl	22054 <CSocket::SetOptionBroadcast(bool)>
   2164c:	e3500000 	cmp	r0, #0
   21650:	03a07001 	moveq	r7, #1
   21654:	0a000016 	beq	216b4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x110>
   21658:	ea00003e 	b	21758 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x1b4>
   2165c:	e1a00005 	mov	r0, r5
   21660:	ebfffd67 	bl	20c04 <CDHCPClient::GetXID() const>
   21664:	e595219c 	ldr	r2, [r5, #412]	; 0x19c
   21668:	e58501b4 	str	r0, [r5, #436]	; 0x1b4
   2166c:	e1a01007 	mov	r1, r7
   21670:	e1a00005 	mov	r0, r5
   21674:	ebfffeb1 	bl	21140 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   21678:	e3500000 	cmp	r0, #0
   2167c:	1a00003c 	bne	21774 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x1d0>
   21680:	eb001dbe 	bl	28d80 <CTimer::Get()>
   21684:	eb001b09 	bl	282b0 <CTimer::GetUptime() const>
   21688:	e5951198 	ldr	r1, [r5, #408]	; 0x198
   2168c:	e0400001 	sub	r0, r0, r1
   21690:	e1560000 	cmp	r6, r0
   21694:	9a00000c 	bls	216cc <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x128>
   21698:	e0460000 	sub	r0, r6, r0
   2169c:	e1a040a0 	lsr	r4, r0, #1
   216a0:	eb000748 	bl	233c8 <CScheduler::Get()>
   216a4:	e354003c 	cmp	r4, #60	; 0x3c
   216a8:	21a01004 	movcs	r1, r4
   216ac:	33a0103c 	movcc	r1, #60	; 0x3c
   216b0:	eb00070a 	bl	232e0 <CScheduler::Sleep(unsigned int)>
   216b4:	eb001db1 	bl	28d80 <CTimer::Get()>
   216b8:	eb001afc 	bl	282b0 <CTimer::GetUptime() const>
   216bc:	e5953198 	ldr	r3, [r5, #408]	; 0x198
   216c0:	e0400003 	sub	r0, r0, r3
   216c4:	e1560000 	cmp	r6, r0
   216c8:	8affffe3 	bhi	2165c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0xb8>
   216cc:	e3a04002 	mov	r4, #2
   216d0:	e1a00008 	mov	r0, r8
   216d4:	ebfff962 	bl	1fc64 <CIPAddress::~CIPAddress()>
   216d8:	e1a00004 	mov	r0, r4
   216dc:	e28dd014 	add	sp, sp, #20
   216e0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   216e4:	e59f91cc 	ldr	r9, [pc, #460]	; 218b8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   216e8:	e59f31c0 	ldr	r3, [pc, #448]	; 218b0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x30c>
   216ec:	e3a02004 	mov	r2, #4
   216f0:	e59f11bc 	ldr	r1, [pc, #444]	; 218b4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   216f4:	e28d8008 	add	r8, sp, #8
   216f8:	e58d9000 	str	r9, [sp]
   216fc:	eb00100f 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21700:	e1a00008 	mov	r0, r8
   21704:	ebfff940 	bl	1fc0c <CIPAddress::CIPAddress()>
   21708:	e3a03001 	mov	r3, #1
   2170c:	e1a00008 	mov	r0, r8
   21710:	e5c531b0 	strb	r3, [r5, #432]	; 0x1b0
   21714:	ebfff9e7 	bl	1feb8 <CIPAddress::SetBroadcast()>
   21718:	eaffffc1 	b	21624 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x80>
   2171c:	eb0010ca 	bl	25a4c <CLogger::Get()>
   21720:	e5d5c1b0 	ldrb	ip, [r5, #432]	; 0x1b0
   21724:	e59f1190 	ldr	r1, [pc, #400]	; 218bc <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x318>
   21728:	e35c0000 	cmp	ip, #0
   2172c:	e59f318c 	ldr	r3, [pc, #396]	; 218c0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x31c>
   21730:	e3a02043 	mov	r2, #67	; 0x43
   21734:	01a03001 	moveq	r3, r1
   21738:	e58d2004 	str	r2, [sp, #4]
   2173c:	e58d3000 	str	r3, [sp]
   21740:	e3a02001 	mov	r2, #1
   21744:	e59f3178 	ldr	r3, [pc, #376]	; 218c4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x320>
   21748:	e59f1164 	ldr	r1, [pc, #356]	; 218b4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   2174c:	eb000ffb 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21750:	e3a04001 	mov	r4, #1
   21754:	eaffffdd 	b	216d0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   21758:	eb0010bb 	bl	25a4c <CLogger::Get()>
   2175c:	e59f3164 	ldr	r3, [pc, #356]	; 218c8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x324>
   21760:	e3a02001 	mov	r2, #1
   21764:	e59f1148 	ldr	r1, [pc, #328]	; 218b4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   21768:	eb000ff4 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2176c:	e3a04001 	mov	r4, #1
   21770:	eaffffd6 	b	216d0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   21774:	e5d531d1 	ldrb	r3, [r5, #465]	; 0x1d1
   21778:	e3530006 	cmp	r3, #6
   2177c:	0a00001f 	beq	21800 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x25c>
   21780:	e1a00005 	mov	r0, r5
   21784:	ebfffc29 	bl	20830 <CDHCPClient::CheckConfig()>
   21788:	e3500000 	cmp	r0, #0
   2178c:	0a000019 	beq	217f8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x254>
   21790:	e59531d4 	ldr	r3, [r5, #468]	; 0x1d4
   21794:	e3530000 	cmp	r3, #0
   21798:	e58531a0 	str	r3, [r5, #416]	; 0x1a0
   2179c:	0a00001e 	beq	2181c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x278>
   217a0:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   217a4:	e3500000 	cmp	r0, #0
   217a8:	0a00003b 	beq	2189c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2f8>
   217ac:	ebfff8ba 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   217b0:	e59511bc 	ldr	r1, [r5, #444]	; 0x1bc
   217b4:	ebfff985 	bl	1fdd0 <CIPAddress::operator!=(unsigned int) const>
   217b8:	e3500000 	cmp	r0, #0
   217bc:	1a00001d 	bne	21838 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x294>
   217c0:	e59511cc 	ldr	r1, [r5, #460]	; 0x1cc
   217c4:	e59521d8 	ldr	r2, [r5, #472]	; 0x1d8
   217c8:	e59531dc 	ldr	r3, [r5, #476]	; 0x1dc
   217cc:	e58511a4 	str	r1, [r5, #420]	; 0x1a4
   217d0:	e58521a8 	str	r2, [r5, #424]	; 0x1a8
   217d4:	e58531ac 	str	r3, [r5, #428]	; 0x1ac
   217d8:	eb00109b 	bl	25a4c <CLogger::Get()>
   217dc:	e58d9000 	str	r9, [sp]
   217e0:	e59f30e4 	ldr	r3, [pc, #228]	; 218cc <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x328>
   217e4:	e3a02004 	mov	r2, #4
   217e8:	e59f10c4 	ldr	r1, [pc, #196]	; 218b4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   217ec:	eb000fd3 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   217f0:	e3a04000 	mov	r4, #0
   217f4:	eaffffb5 	b	216d0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   217f8:	e3a04004 	mov	r4, #4
   217fc:	eaffffb3 	b	216d0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   21800:	eb001091 	bl	25a4c <CLogger::Get()>
   21804:	e59f30c4 	ldr	r3, [pc, #196]	; 218d0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x32c>
   21808:	e3a02002 	mov	r2, #2
   2180c:	e59f10a0 	ldr	r1, [pc, #160]	; 218b4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   21810:	eb000fca 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21814:	e3a04003 	mov	r4, #3
   21818:	eaffffac 	b	216d0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   2181c:	eb00108a 	bl	25a4c <CLogger::Get()>
   21820:	e59f30ac 	ldr	r3, [pc, #172]	; 218d4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x330>
   21824:	e3a02002 	mov	r2, #2
   21828:	e59f1084 	ldr	r1, [pc, #132]	; 218b4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   2182c:	eb000fc3 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21830:	e3a04004 	mov	r4, #4
   21834:	eaffffa5 	b	216d0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   21838:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   2183c:	ebfff89a 	bl	1faac <CNetConfig::GetNetMask() const>
   21840:	e59531c0 	ldr	r3, [r5, #448]	; 0x1c0
   21844:	e5902000 	ldr	r2, [r0]
   21848:	e1520003 	cmp	r2, r3
   2184c:	0affffdb 	beq	217c0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x21c>
   21850:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   21854:	ebfff896 	bl	1fab4 <CNetConfig::GetDefaultGateway() const>
   21858:	e59511c4 	ldr	r1, [r5, #452]	; 0x1c4
   2185c:	ebfff95b 	bl	1fdd0 <CIPAddress::operator!=(unsigned int) const>
   21860:	e3500000 	cmp	r0, #0
   21864:	0affffd5 	beq	217c0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x21c>
   21868:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   2186c:	ebfff892 	bl	1fabc <CNetConfig::GetDNSServer() const>
   21870:	e59511c8 	ldr	r1, [r5, #456]	; 0x1c8
   21874:	ebfff955 	bl	1fdd0 <CIPAddress::operator!=(unsigned int) const>
   21878:	e3500000 	cmp	r0, #0
   2187c:	0affffcf 	beq	217c0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x21c>
   21880:	eb001071 	bl	25a4c <CLogger::Get()>
   21884:	e59f304c 	ldr	r3, [pc, #76]	; 218d8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x334>
   21888:	e3a02002 	mov	r2, #2
   2188c:	e59f1020 	ldr	r1, [pc, #32]	; 218b4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   21890:	eb000faa 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21894:	e3a04005 	mov	r4, #5
   21898:	eaffff8c 	b	216d0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   2189c:	e59f2038 	ldr	r2, [pc, #56]	; 218dc <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x338>
   218a0:	e59f1038 	ldr	r1, [pc, #56]	; 218e0 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   218a4:	e59f0038 	ldr	r0, [pc, #56]	; 218e4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x340>
   218a8:	eb000774 	bl	23680 <assertion_failed>
   218ac:	00039df8 	.word	0x00039df8
   218b0:	00039e60 	.word	0x00039e60
   218b4:	00039b60 	.word	0x00039b60
   218b8:	00039e04 	.word	0x00039e04
   218bc:	00039e18 	.word	0x00039e18
   218c0:	00039e10 	.word	0x00039e10
   218c4:	00039e1c 	.word	0x00039e1c
   218c8:	00039d40 	.word	0x00039d40
   218cc:	0003cce8 	.word	0x0003cce8
   218d0:	00039d90 	.word	0x00039d90
   218d4:	00039e40 	.word	0x00039e40
   218d8:	00039e6c 	.word	0x00039e6c
   218dc:	00000195 	.word	0x00000195
   218e0:	00039b90 	.word	0x00039b90
   218e4:	00038f28 	.word	0x00038f28

000218e8 <CDHCPClient::Run()>:
   218e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   218ec:	e28040f4 	add	r4, r0, #244	; 0xf4
   218f0:	e24ddf8d 	sub	sp, sp, #564	; 0x234
   218f4:	e1a07000 	mov	r7, r0
   218f8:	e3a01044 	mov	r1, #68	; 0x44
   218fc:	e1a00004 	mov	r0, r4
   21900:	eb000061 	bl	21a8c <CSocket::Bind(unsigned short)>
   21904:	e3500000 	cmp	r0, #0
   21908:	ba000053 	blt	21a5c <CDHCPClient::Run()+0x174>
   2190c:	e3a06040 	mov	r6, #64	; 0x40
   21910:	e3a05f89 	mov	r5, #548	; 0x224
   21914:	e3a0800a 	mov	r8, #10
   21918:	e59fa160 	ldr	sl, [pc, #352]	; 21a80 <CDHCPClient::Run()+0x198>
   2191c:	e59fb160 	ldr	fp, [pc, #352]	; 21a84 <CDHCPClient::Run()+0x19c>
   21920:	e1a00007 	mov	r0, r7
   21924:	ebfffe6f 	bl	212e8 <CDHCPClient::SelectAndRequest()>
   21928:	e3500001 	cmp	r0, #1
   2192c:	0a000009 	beq	21958 <CDHCPClient::Run()+0x70>
   21930:	3a00000a 	bcc	21960 <CDHCPClient::Run()+0x78>
   21934:	e3500005 	cmp	r0, #5
   21938:	8a000008 	bhi	21960 <CDHCPClient::Run()+0x78>
   2193c:	eb0006a1 	bl	233c8 <CScheduler::Get()>
   21940:	e3a0103c 	mov	r1, #60	; 0x3c
   21944:	eb000665 	bl	232e0 <CScheduler::Sleep(unsigned int)>
   21948:	e1a00007 	mov	r0, r7
   2194c:	ebfffe65 	bl	212e8 <CDHCPClient::SelectAndRequest()>
   21950:	e3500001 	cmp	r0, #1
   21954:	1afffff5 	bne	21930 <CDHCPClient::Run()+0x48>
   21958:	e28ddf8d 	add	sp, sp, #564	; 0x234
   2195c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21960:	e3a09001 	mov	r9, #1
   21964:	eb001d05 	bl	28d80 <CTimer::Get()>
   21968:	eb001a50 	bl	282b0 <CTimer::GetUptime() const>
   2196c:	e5870198 	str	r0, [r7, #408]	; 0x198
   21970:	eb001d02 	bl	28d80 <CTimer::Get()>
   21974:	eb001a4d 	bl	282b0 <CTimer::GetUptime() const>
   21978:	e5973198 	ldr	r3, [r7, #408]	; 0x198
   2197c:	e59721a8 	ldr	r2, [r7, #424]	; 0x1a8
   21980:	e0400003 	sub	r0, r0, r3
   21984:	e1500002 	cmp	r0, r2
   21988:	3a000002 	bcc	21998 <CDHCPClient::Run()+0xb0>
   2198c:	ea00000c 	b	219c4 <CDHCPClient::Run()+0xdc>
   21990:	eb00068c 	bl	233c8 <CScheduler::Get()>
   21994:	eb0005f8 	bl	2317c <CScheduler::Yield()>
   21998:	e1a03006 	mov	r3, r6
   2199c:	e1a02005 	mov	r2, r5
   219a0:	e28d100c 	add	r1, sp, #12
   219a4:	e1a00004 	mov	r0, r4
   219a8:	eb00014d 	bl	21ee4 <CSocket::Receive(void*, unsigned int, int)>
   219ac:	e3500000 	cmp	r0, #0
   219b0:	cafffff6 	bgt	21990 <CDHCPClient::Run()+0xa8>
   219b4:	eb000683 	bl	233c8 <CScheduler::Get()>
   219b8:	e1a01008 	mov	r1, r8
   219bc:	eb000647 	bl	232e0 <CScheduler::Sleep(unsigned int)>
   219c0:	eaffffea 	b	21970 <CDHCPClient::Run()+0x88>
   219c4:	e59721ac 	ldr	r2, [r7, #428]	; 0x1ac
   219c8:	e1a01009 	mov	r1, r9
   219cc:	e1a00007 	mov	r0, r7
   219d0:	ebfffef3 	bl	215a4 <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   219d4:	e3500005 	cmp	r0, #5
   219d8:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   219dc:	ea000011 	b	21a28 <CDHCPClient::Run()+0x140>
   219e0:	00021964 	.word	0x00021964
   219e4:	00021958 	.word	0x00021958
   219e8:	00021a28 	.word	0x00021a28
   219ec:	00021a0c 	.word	0x00021a0c
   219f0:	00021a0c 	.word	0x00021a0c
   219f4:	00021a0c 	.word	0x00021a0c
   219f8:	eb001013 	bl	25a4c <CLogger::Get()>
   219fc:	e1a0300a 	mov	r3, sl
   21a00:	e3a02001 	mov	r2, #1
   21a04:	e1a0100b 	mov	r1, fp
   21a08:	eb000f4c 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21a0c:	e3a03000 	mov	r3, #0
   21a10:	e59700e0 	ldr	r0, [r7, #224]	; 0xe0
   21a14:	e5c73194 	strb	r3, [r7, #404]	; 0x194
   21a18:	e1500003 	cmp	r0, r3
   21a1c:	0a000016 	beq	21a7c <CDHCPClient::Run()+0x194>
   21a20:	ebfff839 	bl	1fb0c <CNetConfig::Reset()>
   21a24:	eaffffbd 	b	21920 <CDHCPClient::Run()+0x38>
   21a28:	e59721a4 	ldr	r2, [r7, #420]	; 0x1a4
   21a2c:	e3a01000 	mov	r1, #0
   21a30:	e1a00007 	mov	r0, r7
   21a34:	ebfffeda 	bl	215a4 <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   21a38:	e3500005 	cmp	r0, #5
   21a3c:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   21a40:	eaffffec 	b	219f8 <CDHCPClient::Run()+0x110>
   21a44:	00021964 	.word	0x00021964
   21a48:	00021958 	.word	0x00021958
   21a4c:	000219f8 	.word	0x000219f8
   21a50:	00021a0c 	.word	0x00021a0c
   21a54:	00021a0c 	.word	0x00021a0c
   21a58:	00021a0c 	.word	0x00021a0c
   21a5c:	eb000ffa 	bl	25a4c <CLogger::Get()>
   21a60:	e3a02044 	mov	r2, #68	; 0x44
   21a64:	e59f301c 	ldr	r3, [pc, #28]	; 21a88 <CDHCPClient::Run()+0x1a0>
   21a68:	e58d2000 	str	r2, [sp]
   21a6c:	e59f1010 	ldr	r1, [pc, #16]	; 21a84 <CDHCPClient::Run()+0x19c>
   21a70:	e3a02001 	mov	r2, #1
   21a74:	eb000f31 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21a78:	eaffffb6 	b	21958 <CDHCPClient::Run()+0x70>
   21a7c:	ebfffb22 	bl	2070c <CDHCPClient::HaltNetwork() [clone .part.0]>
   21a80:	00039ea8 	.word	0x00039ea8
   21a84:	00039b60 	.word	0x00039b60
   21a88:	00039e90 	.word	0x00039e90

00021a8c <CSocket::Bind(unsigned short)>:
   21a8c:	e251c000 	subs	ip, r1, #0
   21a90:	0a00000b 	beq	21ac4 <CSocket::Bind(unsigned short)+0x38>
   21a94:	e1d031b4 	ldrh	r3, [r0, #20]
   21a98:	e3530000 	cmp	r3, #0
   21a9c:	1a000008 	bne	21ac4 <CSocket::Bind(unsigned short)+0x38>
   21aa0:	e5902018 	ldr	r2, [r0, #24]
   21aa4:	e3520000 	cmp	r2, #0
   21aa8:	aa000005 	bge	21ac4 <CSocket::Bind(unsigned short)+0x38>
   21aac:	e5902010 	ldr	r2, [r0, #16]
   21ab0:	e1c0c1b4 	strh	ip, [r0, #20]
   21ab4:	e3520011 	cmp	r2, #17
   21ab8:	0a000003 	beq	21acc <CSocket::Bind(unsigned short)+0x40>
   21abc:	e1a00003 	mov	r0, r3
   21ac0:	e12fff1e 	bx	lr
   21ac4:	e3e00000 	mvn	r0, #0
   21ac8:	e12fff1e 	bx	lr
   21acc:	e92d4010 	push	{r4, lr}
   21ad0:	e1a04000 	mov	r4, r0
   21ad4:	e590000c 	ldr	r0, [r0, #12]
   21ad8:	ebffdba3 	bl	1896c <CTransportLayer::Bind(unsigned short, int)>
   21adc:	e5840018 	str	r0, [r4, #24]
   21ae0:	e0000fc0 	and	r0, r0, r0, asr #31
   21ae4:	e8bd8010 	pop	{r4, pc}

00021ae8 <CSocket::Connect(CIPAddress&, unsigned short)>:
   21ae8:	e92d4070 	push	{r4, r5, r6, lr}
   21aec:	e2525000 	subs	r5, r2, #0
   21af0:	e24dd008 	sub	sp, sp, #8
   21af4:	0a000017 	beq	21b58 <CSocket::Connect(CIPAddress&, unsigned short)+0x70>
   21af8:	e1a04000 	mov	r4, r0
   21afc:	e590000c 	ldr	r0, [r0, #12]
   21b00:	e1a06001 	mov	r6, r1
   21b04:	e3500000 	cmp	r0, #0
   21b08:	0a000024 	beq	21ba0 <CSocket::Connect(CIPAddress&, unsigned short)+0xb8>
   21b0c:	e5941018 	ldr	r1, [r4, #24]
   21b10:	e3510000 	cmp	r1, #0
   21b14:	ba000005 	blt	21b30 <CSocket::Connect(CIPAddress&, unsigned short)+0x48>
   21b18:	e5943010 	ldr	r3, [r4, #16]
   21b1c:	e3530011 	cmp	r3, #17
   21b20:	1a00000c 	bne	21b58 <CSocket::Connect(CIPAddress&, unsigned short)+0x70>
   21b24:	ebffdd1f 	bl	18fa8 <CTransportLayer::Disconnect(int)>
   21b28:	e3e03000 	mvn	r3, #0
   21b2c:	e5843018 	str	r3, [r4, #24]
   21b30:	e5940008 	ldr	r0, [r4, #8]
   21b34:	e3500000 	cmp	r0, #0
   21b38:	0a00001c 	beq	21bb0 <CSocket::Connect(CIPAddress&, unsigned short)+0xc8>
   21b3c:	ebfff7d6 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   21b40:	ebfff910 	bl	1ff88 <CIPAddress::IsNull() const>
   21b44:	e3500000 	cmp	r0, #0
   21b48:	0a000009 	beq	21b74 <CSocket::Connect(CIPAddress&, unsigned short)+0x8c>
   21b4c:	e5943010 	ldr	r3, [r4, #16]
   21b50:	e3530011 	cmp	r3, #17
   21b54:	0a000002 	beq	21b64 <CSocket::Connect(CIPAddress&, unsigned short)+0x7c>
   21b58:	e3e00000 	mvn	r0, #0
   21b5c:	e28dd008 	add	sp, sp, #8
   21b60:	e8bd8070 	pop	{r4, r5, r6, pc}
   21b64:	e1a00006 	mov	r0, r6
   21b68:	ebfff914 	bl	1ffc0 <CIPAddress::IsBroadcast() const>
   21b6c:	e3500000 	cmp	r0, #0
   21b70:	0afffff8 	beq	21b58 <CSocket::Connect(CIPAddress&, unsigned short)+0x70>
   21b74:	e594c010 	ldr	ip, [r4, #16]
   21b78:	e1d431b4 	ldrh	r3, [r4, #20]
   21b7c:	e594000c 	ldr	r0, [r4, #12]
   21b80:	e1a02005 	mov	r2, r5
   21b84:	e1a01006 	mov	r1, r6
   21b88:	e58dc000 	str	ip, [sp]
   21b8c:	ebffdbd0 	bl	18ad4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>
   21b90:	e5840018 	str	r0, [r4, #24]
   21b94:	e0000fc0 	and	r0, r0, r0, asr #31
   21b98:	e28dd008 	add	sp, sp, #8
   21b9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   21ba0:	e3a02070 	mov	r2, #112	; 0x70
   21ba4:	e59f1014 	ldr	r1, [pc, #20]	; 21bc0 <CSocket::Connect(CIPAddress&, unsigned short)+0xd8>
   21ba8:	e59f0014 	ldr	r0, [pc, #20]	; 21bc4 <CSocket::Connect(CIPAddress&, unsigned short)+0xdc>
   21bac:	eb0006b3 	bl	23680 <assertion_failed>
   21bb0:	e3a0207d 	mov	r2, #125	; 0x7d
   21bb4:	e59f1004 	ldr	r1, [pc, #4]	; 21bc0 <CSocket::Connect(CIPAddress&, unsigned short)+0xd8>
   21bb8:	e59f0008 	ldr	r0, [pc, #8]	; 21bc8 <CSocket::Connect(CIPAddress&, unsigned short)+0xe0>
   21bbc:	eb0006af 	bl	23680 <assertion_failed>
   21bc0:	00039ef4 	.word	0x00039ef4
   21bc4:	00039f00 	.word	0x00039f00
   21bc8:	00038f28 	.word	0x00038f28

00021bcc <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   21bcc:	e16fcf12 	clz	ip, r2
   21bd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21bd4:	e590e018 	ldr	lr, [r0, #24]
   21bd8:	e1a0c2ac 	lsr	ip, ip, #5
   21bdc:	e24dd010 	sub	sp, sp, #16
   21be0:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   21be4:	e1dd82bc 	ldrh	r8, [sp, #44]	; 0x2c
   21be8:	1a000024 	bne	21c80 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb4>
   21bec:	e1a04000 	mov	r4, r0
   21bf0:	e5900008 	ldr	r0, [r0, #8]
   21bf4:	e1a06002 	mov	r6, r2
   21bf8:	e3500000 	cmp	r0, #0
   21bfc:	e1a07003 	mov	r7, r3
   21c00:	e1a05001 	mov	r5, r1
   21c04:	0a000015 	beq	21c60 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x94>
   21c08:	ebfff7a3 	bl	1fa9c <CNetConfig::GetIPAddress() const>
   21c0c:	ebfff8dd 	bl	1ff88 <CIPAddress::IsNull() const>
   21c10:	e3580000 	cmp	r8, #0
   21c14:	03800001 	orreq	r0, r0, #1
   21c18:	e31000ff 	tst	r0, #255	; 0xff
   21c1c:	1a000017 	bne	21c80 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb4>
   21c20:	e594000c 	ldr	r0, [r4, #12]
   21c24:	e3500000 	cmp	r0, #0
   21c28:	0a000010 	beq	21c70 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xa4>
   21c2c:	e3550000 	cmp	r5, #0
   21c30:	0a000014 	beq	21c88 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xbc>
   21c34:	e5943018 	ldr	r3, [r4, #24]
   21c38:	e1a02006 	mov	r2, r6
   21c3c:	e58d3008 	str	r3, [sp, #8]
   21c40:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   21c44:	e58d8004 	str	r8, [sp, #4]
   21c48:	e58d3000 	str	r3, [sp]
   21c4c:	e1a01005 	mov	r1, r5
   21c50:	e1a03007 	mov	r3, r7
   21c54:	ebffdd51 	bl	191a0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>
   21c58:	e28dd010 	add	sp, sp, #16
   21c5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21c60:	e59f2030 	ldr	r2, [pc, #48]	; 21c98 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xcc>
   21c64:	e59f1030 	ldr	r1, [pc, #48]	; 21c9c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   21c68:	e59f0030 	ldr	r0, [pc, #48]	; 21ca0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd4>
   21c6c:	eb000683 	bl	23680 <assertion_failed>
   21c70:	e59f202c 	ldr	r2, [pc, #44]	; 21ca4 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd8>
   21c74:	e59f1020 	ldr	r1, [pc, #32]	; 21c9c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   21c78:	e59f0028 	ldr	r0, [pc, #40]	; 21ca8 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xdc>
   21c7c:	eb00067f 	bl	23680 <assertion_failed>
   21c80:	e3e00000 	mvn	r0, #0
   21c84:	eafffff3 	b	21c58 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x8c>
   21c88:	e59f201c 	ldr	r2, [pc, #28]	; 21cac <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe0>
   21c8c:	e59f1008 	ldr	r1, [pc, #8]	; 21c9c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   21c90:	e59f0018 	ldr	r0, [pc, #24]	; 21cb0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe4>
   21c94:	eb000679 	bl	23680 <assertion_failed>
   21c98:	0000011e 	.word	0x0000011e
   21c9c:	00039ef4 	.word	0x00039ef4
   21ca0:	00038f28 	.word	0x00038f28
   21ca4:	00000129 	.word	0x00000129
   21ca8:	00039f00 	.word	0x00039f00
   21cac:	0000012a 	.word	0x0000012a
   21cb0:	00036138 	.word	0x00036138

00021cb4 <CSocket::~CSocket()>:
   21cb4:	e92d4070 	push	{r4, r5, r6, lr}
   21cb8:	e1a04000 	mov	r4, r0
   21cbc:	e590000c 	ldr	r0, [r0, #12]
   21cc0:	e59f309c 	ldr	r3, [pc, #156]	; 21d64 <CSocket::~CSocket()+0xb0>
   21cc4:	e3500000 	cmp	r0, #0
   21cc8:	e5843000 	str	r3, [r4]
   21ccc:	0a00001c 	beq	21d44 <CSocket::~CSocket()+0x90>
   21cd0:	e5941018 	ldr	r1, [r4, #24]
   21cd4:	e594301c 	ldr	r3, [r4, #28]
   21cd8:	e3510000 	cmp	r1, #0
   21cdc:	ba00000b 	blt	21d10 <CSocket::~CSocket()+0x5c>
   21ce0:	e3530000 	cmp	r3, #0
   21ce4:	1a00001a 	bne	21d54 <CSocket::~CSocket()+0xa0>
   21ce8:	ebffdcae 	bl	18fa8 <CTransportLayer::Disconnect(int)>
   21cec:	e3e03000 	mvn	r3, #0
   21cf0:	e5843018 	str	r3, [r4, #24]
   21cf4:	e3a03000 	mov	r3, #0
   21cf8:	e1a00004 	mov	r0, r4
   21cfc:	e584300c 	str	r3, [r4, #12]
   21d00:	e5843008 	str	r3, [r4, #8]
   21d04:	eb00021e 	bl	22584 <CNetSocket::~CNetSocket()>
   21d08:	e1a00004 	mov	r0, r4
   21d0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   21d10:	e3530000 	cmp	r3, #0
   21d14:	0afffff6 	beq	21cf4 <CSocket::~CSocket()+0x40>
   21d18:	e284601c 	add	r6, r4, #28
   21d1c:	e3a05000 	mov	r5, #0
   21d20:	ea000000 	b	21d28 <CSocket::~CSocket()+0x74>
   21d24:	e594000c 	ldr	r0, [r4, #12]
   21d28:	e5b61004 	ldr	r1, [r6, #4]!
   21d2c:	ebffdc9d 	bl	18fa8 <CTransportLayer::Disconnect(int)>
   21d30:	e594301c 	ldr	r3, [r4, #28]
   21d34:	e2855001 	add	r5, r5, #1
   21d38:	e1530005 	cmp	r3, r5
   21d3c:	8afffff8 	bhi	21d24 <CSocket::~CSocket()+0x70>
   21d40:	eaffffeb 	b	21cf4 <CSocket::~CSocket()+0x40>
   21d44:	e3a02036 	mov	r2, #54	; 0x36
   21d48:	e59f1018 	ldr	r1, [pc, #24]	; 21d68 <CSocket::~CSocket()+0xb4>
   21d4c:	e59f0018 	ldr	r0, [pc, #24]	; 21d6c <CSocket::~CSocket()+0xb8>
   21d50:	eb00064a 	bl	23680 <assertion_failed>
   21d54:	e3a0203a 	mov	r2, #58	; 0x3a
   21d58:	e59f1008 	ldr	r1, [pc, #8]	; 21d68 <CSocket::~CSocket()+0xb4>
   21d5c:	e59f000c 	ldr	r0, [pc, #12]	; 21d70 <CSocket::~CSocket()+0xbc>
   21d60:	eb000646 	bl	23680 <assertion_failed>
   21d64:	00039ec0 	.word	0x00039ec0
   21d68:	00039ef4 	.word	0x00039ef4
   21d6c:	00039f00 	.word	0x00039f00
   21d70:	00039f18 	.word	0x00039f18

00021d74 <CSocket::~CSocket()>:
   21d74:	e92d4010 	push	{r4, lr}
   21d78:	e1a04000 	mov	r4, r0
   21d7c:	ebffffcc 	bl	21cb4 <CSocket::~CSocket()>
   21d80:	e1a00004 	mov	r0, r4
   21d84:	e3a010a0 	mov	r1, #160	; 0xa0
   21d88:	eb002067 	bl	29f2c <operator delete(void*, unsigned int)>
   21d8c:	e1a00004 	mov	r0, r4
   21d90:	e8bd8010 	pop	{r4, pc}

00021d94 <CSocket::Listen(unsigned int)>:
   21d94:	e5902010 	ldr	r2, [r0, #16]
   21d98:	e3520006 	cmp	r2, #6
   21d9c:	1a000023 	bne	21e30 <CSocket::Listen(unsigned int)+0x9c>
   21da0:	e1a03001 	mov	r3, r1
   21da4:	e1d011b4 	ldrh	r1, [r0, #20]
   21da8:	e3510000 	cmp	r1, #0
   21dac:	0a00001f 	beq	21e30 <CSocket::Listen(unsigned int)+0x9c>
   21db0:	e590c018 	ldr	ip, [r0, #24]
   21db4:	e35c0000 	cmp	ip, #0
   21db8:	aa00001c 	bge	21e30 <CSocket::Listen(unsigned int)+0x9c>
   21dbc:	e243c001 	sub	ip, r3, #1
   21dc0:	e35c001f 	cmp	ip, #31
   21dc4:	8a000019 	bhi	21e30 <CSocket::Listen(unsigned int)+0x9c>
   21dc8:	e92d4070 	push	{r4, r5, r6, lr}
   21dcc:	e590501c 	ldr	r5, [r0, #28]
   21dd0:	e1a04000 	mov	r4, r0
   21dd4:	e3550000 	cmp	r5, #0
   21dd8:	1a000018 	bne	21e40 <CSocket::Listen(unsigned int)+0xac>
   21ddc:	e590000c 	ldr	r0, [r0, #12]
   21de0:	e584301c 	str	r3, [r4, #28]
   21de4:	e3500000 	cmp	r0, #0
   21de8:	1a000007 	bne	21e0c <CSocket::Listen(unsigned int)+0x78>
   21dec:	ea000017 	b	21e50 <CSocket::Listen(unsigned int)+0xbc>
   21df0:	e594301c 	ldr	r3, [r4, #28]
   21df4:	e2855001 	add	r5, r5, #1
   21df8:	e1530005 	cmp	r3, r5
   21dfc:	9a00000d 	bls	21e38 <CSocket::Listen(unsigned int)+0xa4>
   21e00:	e594000c 	ldr	r0, [r4, #12]
   21e04:	e1d411b4 	ldrh	r1, [r4, #20]
   21e08:	e5942010 	ldr	r2, [r4, #16]
   21e0c:	ebffdbd6 	bl	18d6c <CTransportLayer::Listen(unsigned short, int)>
   21e10:	e0843105 	add	r3, r4, r5, lsl #2
   21e14:	e3500000 	cmp	r0, #0
   21e18:	e5830020 	str	r0, [r3, #32]
   21e1c:	aafffff3 	bge	21df0 <CSocket::Listen(unsigned int)+0x5c>
   21e20:	e3a020a5 	mov	r2, #165	; 0xa5
   21e24:	e59f1034 	ldr	r1, [pc, #52]	; 21e60 <CSocket::Listen(unsigned int)+0xcc>
   21e28:	e59f0034 	ldr	r0, [pc, #52]	; 21e64 <CSocket::Listen(unsigned int)+0xd0>
   21e2c:	eb000613 	bl	23680 <assertion_failed>
   21e30:	e3e00000 	mvn	r0, #0
   21e34:	e12fff1e 	bx	lr
   21e38:	e3a00000 	mov	r0, #0
   21e3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   21e40:	e3a0209d 	mov	r2, #157	; 0x9d
   21e44:	e59f1014 	ldr	r1, [pc, #20]	; 21e60 <CSocket::Listen(unsigned int)+0xcc>
   21e48:	e59f0018 	ldr	r0, [pc, #24]	; 21e68 <CSocket::Listen(unsigned int)+0xd4>
   21e4c:	eb00060b 	bl	23680 <assertion_failed>
   21e50:	e3a020a0 	mov	r2, #160	; 0xa0
   21e54:	e59f1004 	ldr	r1, [pc, #4]	; 21e60 <CSocket::Listen(unsigned int)+0xcc>
   21e58:	e59f000c 	ldr	r0, [pc, #12]	; 21e6c <CSocket::Listen(unsigned int)+0xd8>
   21e5c:	eb000607 	bl	23680 <assertion_failed>
   21e60:	00039ef4 	.word	0x00039ef4
   21e64:	00039f28 	.word	0x00039f28
   21e68:	00039f18 	.word	0x00039f18
   21e6c:	00039f00 	.word	0x00039f00

00021e70 <CSocket::Send(void const*, unsigned int, int)>:
   21e70:	e16fcf12 	clz	ip, r2
   21e74:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   21e78:	e590e018 	ldr	lr, [r0, #24]
   21e7c:	e1a0c2ac 	lsr	ip, ip, #5
   21e80:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   21e84:	e24dd00c 	sub	sp, sp, #12
   21e88:	1a000010 	bne	21ed0 <CSocket::Send(void const*, unsigned int, int)+0x60>
   21e8c:	e590000c 	ldr	r0, [r0, #12]
   21e90:	e3500000 	cmp	r0, #0
   21e94:	0a000005 	beq	21eb0 <CSocket::Send(void const*, unsigned int, int)+0x40>
   21e98:	e3510000 	cmp	r1, #0
   21e9c:	0a000007 	beq	21ec0 <CSocket::Send(void const*, unsigned int, int)+0x50>
   21ea0:	e58de000 	str	lr, [sp]
   21ea4:	ebffdc5d 	bl	19020 <CTransportLayer::Send(void const*, unsigned int, int, int)>
   21ea8:	e28dd00c 	add	sp, sp, #12
   21eac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   21eb0:	e3a020ed 	mov	r2, #237	; 0xed
   21eb4:	e59f101c 	ldr	r1, [pc, #28]	; 21ed8 <CSocket::Send(void const*, unsigned int, int)+0x68>
   21eb8:	e59f001c 	ldr	r0, [pc, #28]	; 21edc <CSocket::Send(void const*, unsigned int, int)+0x6c>
   21ebc:	eb0005ef 	bl	23680 <assertion_failed>
   21ec0:	e3a020ee 	mov	r2, #238	; 0xee
   21ec4:	e59f100c 	ldr	r1, [pc, #12]	; 21ed8 <CSocket::Send(void const*, unsigned int, int)+0x68>
   21ec8:	e59f0010 	ldr	r0, [pc, #16]	; 21ee0 <CSocket::Send(void const*, unsigned int, int)+0x70>
   21ecc:	eb0005eb 	bl	23680 <assertion_failed>
   21ed0:	e3e00000 	mvn	r0, #0
   21ed4:	eafffff3 	b	21ea8 <CSocket::Send(void const*, unsigned int, int)+0x38>
   21ed8:	00039ef4 	.word	0x00039ef4
   21edc:	00039f00 	.word	0x00039f00
   21ee0:	00036138 	.word	0x00036138

00021ee4 <CSocket::Receive(void*, unsigned int, int)>:
   21ee4:	e16fcf12 	clz	ip, r2
   21ee8:	e92d4070 	push	{r4, r5, r6, lr}
   21eec:	e590e018 	ldr	lr, [r0, #24]
   21ef0:	e1a0c2ac 	lsr	ip, ip, #5
   21ef4:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   21ef8:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   21efc:	1a00001d 	bne	21f78 <CSocket::Receive(void*, unsigned int, int)+0x94>
   21f00:	e590000c 	ldr	r0, [r0, #12]
   21f04:	e1a05002 	mov	r5, r2
   21f08:	e3500000 	cmp	r0, #0
   21f0c:	e1a02003 	mov	r2, r3
   21f10:	e1a06001 	mov	r6, r1
   21f14:	0a00000f 	beq	21f58 <CSocket::Receive(void*, unsigned int, int)+0x74>
   21f18:	e1a0300e 	mov	r3, lr
   21f1c:	e1a0100d 	mov	r1, sp
   21f20:	ebffdc73 	bl	190f4 <CTransportLayer::Receive(void*, int, int)>
   21f24:	e2504000 	subs	r4, r0, #0
   21f28:	ba000007 	blt	21f4c <CSocket::Receive(void*, unsigned int, int)+0x68>
   21f2c:	e1540005 	cmp	r4, r5
   21f30:	21a04005 	movcs	r4, r5
   21f34:	e3560000 	cmp	r6, #0
   21f38:	0a00000a 	beq	21f68 <CSocket::Receive(void*, unsigned int, int)+0x84>
   21f3c:	e1a0100d 	mov	r1, sp
   21f40:	e1a00006 	mov	r0, r6
   21f44:	e1a02004 	mov	r2, r4
   21f48:	eb001e10 	bl	29790 <memcpy>
   21f4c:	e1a00004 	mov	r0, r4
   21f50:	e28ddd19 	add	sp, sp, #1600	; 0x640
   21f54:	e8bd8070 	pop	{r4, r5, r6, pc}
   21f58:	e3a020fe 	mov	r2, #254	; 0xfe
   21f5c:	e59f101c 	ldr	r1, [pc, #28]	; 21f80 <CSocket::Receive(void*, unsigned int, int)+0x9c>
   21f60:	e59f001c 	ldr	r0, [pc, #28]	; 21f84 <CSocket::Receive(void*, unsigned int, int)+0xa0>
   21f64:	eb0005c5 	bl	23680 <assertion_failed>
   21f68:	e59f2018 	ldr	r2, [pc, #24]	; 21f88 <CSocket::Receive(void*, unsigned int, int)+0xa4>
   21f6c:	e59f100c 	ldr	r1, [pc, #12]	; 21f80 <CSocket::Receive(void*, unsigned int, int)+0x9c>
   21f70:	e59f0014 	ldr	r0, [pc, #20]	; 21f8c <CSocket::Receive(void*, unsigned int, int)+0xa8>
   21f74:	eb0005c1 	bl	23680 <assertion_failed>
   21f78:	e3e04000 	mvn	r4, #0
   21f7c:	eafffff2 	b	21f4c <CSocket::Receive(void*, unsigned int, int)+0x68>
   21f80:	00039ef4 	.word	0x00039ef4
   21f84:	00039f00 	.word	0x00039f00
   21f88:	0000010b 	.word	0x0000010b
   21f8c:	00036138 	.word	0x00036138

00021f90 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   21f90:	e16fcf12 	clz	ip, r2
   21f94:	e92d4070 	push	{r4, r5, r6, lr}
   21f98:	e590e018 	ldr	lr, [r0, #24]
   21f9c:	e1a0c2ac 	lsr	ip, ip, #5
   21fa0:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   21fa4:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   21fa8:	e24dd008 	sub	sp, sp, #8
   21fac:	1a000021 	bne	22038 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xa8>
   21fb0:	e590000c 	ldr	r0, [r0, #12]
   21fb4:	e1a05002 	mov	r5, r2
   21fb8:	e3500000 	cmp	r0, #0
   21fbc:	e1a02003 	mov	r2, r3
   21fc0:	e1a06001 	mov	r6, r1
   21fc4:	0a000013 	beq	22018 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x88>
   21fc8:	e59d365c 	ldr	r3, [sp, #1628]	; 0x65c
   21fcc:	e58de004 	str	lr, [sp, #4]
   21fd0:	e58d3000 	str	r3, [sp]
   21fd4:	e28d1008 	add	r1, sp, #8
   21fd8:	e59d3658 	ldr	r3, [sp, #1624]	; 0x658
   21fdc:	ebffdca8 	bl	19284 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>
   21fe0:	e2504000 	subs	r4, r0, #0
   21fe4:	ba000007 	blt	22008 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x78>
   21fe8:	e1540005 	cmp	r4, r5
   21fec:	21a04005 	movcs	r4, r5
   21ff0:	e3560000 	cmp	r6, #0
   21ff4:	0a00000b 	beq	22028 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x98>
   21ff8:	e28d1008 	add	r1, sp, #8
   21ffc:	e1a00006 	mov	r0, r6
   22000:	e1a02004 	mov	r2, r4
   22004:	eb001de1 	bl	29790 <memcpy>
   22008:	e1a00004 	mov	r0, r4
   2200c:	e28ddd19 	add	sp, sp, #1600	; 0x640
   22010:	e28dd008 	add	sp, sp, #8
   22014:	e8bd8070 	pop	{r4, r5, r6, pc}
   22018:	e59f2020 	ldr	r2, [pc, #32]	; 22040 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb0>
   2201c:	e59f1020 	ldr	r1, [pc, #32]	; 22044 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb4>
   22020:	e59f0020 	ldr	r0, [pc, #32]	; 22048 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb8>
   22024:	eb000595 	bl	23680 <assertion_failed>
   22028:	e59f201c 	ldr	r2, [pc, #28]	; 2204c <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xbc>
   2202c:	e59f1010 	ldr	r1, [pc, #16]	; 22044 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb4>
   22030:	e59f0018 	ldr	r0, [pc, #24]	; 22050 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xc0>
   22034:	eb000591 	bl	23680 <assertion_failed>
   22038:	e3e04000 	mvn	r4, #0
   2203c:	eafffff1 	b	22008 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x78>
   22040:	0000013b 	.word	0x0000013b
   22044:	00039ef4 	.word	0x00039ef4
   22048:	00039f00 	.word	0x00039f00
   2204c:	00000149 	.word	0x00000149
   22050:	00036138 	.word	0x00036138

00022054 <CSocket::SetOptionBroadcast(bool)>:
   22054:	e5902018 	ldr	r2, [r0, #24]
   22058:	e3520000 	cmp	r2, #0
   2205c:	ba00000d 	blt	22098 <CSocket::SetOptionBroadcast(bool)+0x44>
   22060:	e5903010 	ldr	r3, [r0, #16]
   22064:	e3530011 	cmp	r3, #17
   22068:	0a000001 	beq	22074 <CSocket::SetOptionBroadcast(bool)+0x20>
   2206c:	e3a00000 	mov	r0, #0
   22070:	e12fff1e 	bx	lr
   22074:	e590000c 	ldr	r0, [r0, #12]
   22078:	e3500000 	cmp	r0, #0
   2207c:	0a000000 	beq	22084 <CSocket::SetOptionBroadcast(bool)+0x30>
   22080:	eaffdcaf 	b	19344 <CTransportLayer::SetOptionBroadcast(bool, int)>
   22084:	e92d4010 	push	{r4, lr}
   22088:	e59f2010 	ldr	r2, [pc, #16]	; 220a0 <CSocket::SetOptionBroadcast(bool)+0x4c>
   2208c:	e59f1010 	ldr	r1, [pc, #16]	; 220a4 <CSocket::SetOptionBroadcast(bool)+0x50>
   22090:	e59f0010 	ldr	r0, [pc, #16]	; 220a8 <CSocket::SetOptionBroadcast(bool)+0x54>
   22094:	eb000579 	bl	23680 <assertion_failed>
   22098:	e3e00000 	mvn	r0, #0
   2209c:	e12fff1e 	bx	lr
   220a0:	0000015b 	.word	0x0000015b
   220a4:	00039ef4 	.word	0x00039ef4
   220a8:	00039f00 	.word	0x00039f00

000220ac <CSocket::GetForeignIP() const>:
   220ac:	e5901018 	ldr	r1, [r0, #24]
   220b0:	e3510000 	cmp	r1, #0
   220b4:	ba000008 	blt	220dc <CSocket::GetForeignIP() const+0x30>
   220b8:	e590000c 	ldr	r0, [r0, #12]
   220bc:	e3500000 	cmp	r0, #0
   220c0:	0a000000 	beq	220c8 <CSocket::GetForeignIP() const+0x1c>
   220c4:	eaffdcdc 	b	1943c <CTransportLayer::GetForeignIP(int) const>
   220c8:	e92d4010 	push	{r4, lr}
   220cc:	e59f2010 	ldr	r2, [pc, #16]	; 220e4 <CSocket::GetForeignIP() const+0x38>
   220d0:	e59f1010 	ldr	r1, [pc, #16]	; 220e8 <CSocket::GetForeignIP() const+0x3c>
   220d4:	e59f0010 	ldr	r0, [pc, #16]	; 220ec <CSocket::GetForeignIP() const+0x40>
   220d8:	eb000568 	bl	23680 <assertion_failed>
   220dc:	e3a00000 	mov	r0, #0
   220e0:	e12fff1e 	bx	lr
   220e4:	00000166 	.word	0x00000166
   220e8:	00039ef4 	.word	0x00039ef4
   220ec:	00039f00 	.word	0x00039f00

000220f0 <CSocket::CSocket(CNetSubSystem*, int)>:
   220f0:	e92d4070 	push	{r4, r5, r6, lr}
   220f4:	e1a04000 	mov	r4, r0
   220f8:	e1a05001 	mov	r5, r1
   220fc:	e1a06002 	mov	r6, r2
   22100:	eb000111 	bl	2254c <CNetSocket::CNetSocket(CNetSubSystem*)>
   22104:	e59f306c 	ldr	r3, [pc, #108]	; 22178 <CSocket::CSocket(CNetSubSystem*, int)+0x88>
   22108:	e1a00005 	mov	r0, r5
   2210c:	e5843000 	str	r3, [r4]
   22110:	ebffd939 	bl	185fc <CNetSubSystem::GetConfig()>
   22114:	e5840008 	str	r0, [r4, #8]
   22118:	e1a00005 	mov	r0, r5
   2211c:	ebffd93c 	bl	18614 <CNetSubSystem::GetTransportLayer()>
   22120:	e3a03000 	mov	r3, #0
   22124:	e3e01000 	mvn	r1, #0
   22128:	e594c008 	ldr	ip, [r4, #8]
   2212c:	e5846010 	str	r6, [r4, #16]
   22130:	e15c0003 	cmp	ip, r3
   22134:	e584000c 	str	r0, [r4, #12]
   22138:	e5841018 	str	r1, [r4, #24]
   2213c:	e1c431b4 	strh	r3, [r4, #20]
   22140:	e584301c 	str	r3, [r4, #28]
   22144:	0a000003 	beq	22158 <CSocket::CSocket(CNetSubSystem*, int)+0x68>
   22148:	e3500000 	cmp	r0, #0
   2214c:	0a000005 	beq	22168 <CSocket::CSocket(CNetSubSystem*, int)+0x78>
   22150:	e1a00004 	mov	r0, r4
   22154:	e8bd8070 	pop	{r4, r5, r6, pc}
   22158:	e3a02023 	mov	r2, #35	; 0x23
   2215c:	e59f1018 	ldr	r1, [pc, #24]	; 2217c <CSocket::CSocket(CNetSubSystem*, int)+0x8c>
   22160:	e59f0018 	ldr	r0, [pc, #24]	; 22180 <CSocket::CSocket(CNetSubSystem*, int)+0x90>
   22164:	eb000545 	bl	23680 <assertion_failed>
   22168:	e3a02024 	mov	r2, #36	; 0x24
   2216c:	e59f1008 	ldr	r1, [pc, #8]	; 2217c <CSocket::CSocket(CNetSubSystem*, int)+0x8c>
   22170:	e59f000c 	ldr	r0, [pc, #12]	; 22184 <CSocket::CSocket(CNetSubSystem*, int)+0x94>
   22174:	eb000541 	bl	23680 <assertion_failed>
   22178:	00039ec0 	.word	0x00039ec0
   2217c:	00039ef4 	.word	0x00039ef4
   22180:	00038f28 	.word	0x00038f28
   22184:	00039f00 	.word	0x00039f00

00022188 <CSocket::CSocket(CSocket&, int)>:
   22188:	e92d4070 	push	{r4, r5, r6, lr}
   2218c:	e1a04000 	mov	r4, r0
   22190:	e1a00001 	mov	r0, r1
   22194:	e1a05001 	mov	r5, r1
   22198:	e1a06002 	mov	r6, r2
   2219c:	eb0000ff 	bl	225a0 <CNetSocket::GetNetSubSystem()>
   221a0:	e1a01000 	mov	r1, r0
   221a4:	e1a00004 	mov	r0, r4
   221a8:	eb0000e7 	bl	2254c <CNetSocket::CNetSocket(CNetSubSystem*)>
   221ac:	e3a00000 	mov	r0, #0
   221b0:	e5953008 	ldr	r3, [r5, #8]
   221b4:	e595100c 	ldr	r1, [r5, #12]
   221b8:	e595c010 	ldr	ip, [r5, #16]
   221bc:	e1d521b4 	ldrh	r2, [r5, #20]
   221c0:	e59fe050 	ldr	lr, [pc, #80]	; 22218 <CSocket::CSocket(CSocket&, int)+0x90>
   221c4:	e1530000 	cmp	r3, r0
   221c8:	e584e000 	str	lr, [r4]
   221cc:	e5843008 	str	r3, [r4, #8]
   221d0:	e584100c 	str	r1, [r4, #12]
   221d4:	e584c010 	str	ip, [r4, #16]
   221d8:	e1c421b4 	strh	r2, [r4, #20]
   221dc:	e5846018 	str	r6, [r4, #24]
   221e0:	e584001c 	str	r0, [r4, #28]
   221e4:	0a000003 	beq	221f8 <CSocket::CSocket(CSocket&, int)+0x70>
   221e8:	e3510000 	cmp	r1, #0
   221ec:	0a000005 	beq	22208 <CSocket::CSocket(CSocket&, int)+0x80>
   221f0:	e1a00004 	mov	r0, r4
   221f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   221f8:	e3a02030 	mov	r2, #48	; 0x30
   221fc:	e59f1018 	ldr	r1, [pc, #24]	; 2221c <CSocket::CSocket(CSocket&, int)+0x94>
   22200:	e59f0018 	ldr	r0, [pc, #24]	; 22220 <CSocket::CSocket(CSocket&, int)+0x98>
   22204:	eb00051d 	bl	23680 <assertion_failed>
   22208:	e3a02031 	mov	r2, #49	; 0x31
   2220c:	e59f1008 	ldr	r1, [pc, #8]	; 2221c <CSocket::CSocket(CSocket&, int)+0x94>
   22210:	e59f000c 	ldr	r0, [pc, #12]	; 22224 <CSocket::CSocket(CSocket&, int)+0x9c>
   22214:	eb000519 	bl	23680 <assertion_failed>
   22218:	00039ec0 	.word	0x00039ec0
   2221c:	00039ef4 	.word	0x00039ef4
   22220:	00038f28 	.word	0x00038f28
   22224:	00039f00 	.word	0x00039f00

00022228 <CSocket::Accept(CIPAddress*, unsigned short*)>:
   22228:	e590301c 	ldr	r3, [r0, #28]
   2222c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22230:	e3530000 	cmp	r3, #0
   22234:	0a000048 	beq	2235c <CSocket::Accept(CIPAddress*, unsigned short*)+0x134>
   22238:	e1d041b4 	ldrh	r4, [r0, #20]
   2223c:	e3540000 	cmp	r4, #0
   22240:	0a00003f 	beq	22344 <CSocket::Accept(CIPAddress*, unsigned short*)+0x11c>
   22244:	e1a06000 	mov	r6, r0
   22248:	e590000c 	ldr	r0, [r0, #12]
   2224c:	e1a0a002 	mov	sl, r2
   22250:	e3500000 	cmp	r0, #0
   22254:	e1a09001 	mov	r9, r1
   22258:	0a000042 	beq	22368 <CSocket::Accept(CIPAddress*, unsigned short*)+0x140>
   2225c:	e3530020 	cmp	r3, #32
   22260:	8a000044 	bhi	22378 <CSocket::Accept(CIPAddress*, unsigned short*)+0x150>
   22264:	e3a08020 	mov	r8, #32
   22268:	e3e05102 	mvn	r5, #-2147483648	; 0x80000000
   2226c:	e3a04000 	mov	r4, #0
   22270:	e286701c 	add	r7, r6, #28
   22274:	ea000008 	b	2229c <CSocket::Accept(CIPAddress*, unsigned short*)+0x74>
   22278:	e5b73004 	ldr	r3, [r7, #4]!
   2227c:	e596201c 	ldr	r2, [r6, #28]
   22280:	e1530005 	cmp	r3, r5
   22284:	b1a08004 	movlt	r8, r4
   22288:	e2844001 	add	r4, r4, #1
   2228c:	b1a05003 	movlt	r5, r3
   22290:	e1520004 	cmp	r2, r4
   22294:	9a000007 	bls	222b8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x90>
   22298:	e596000c 	ldr	r0, [r6, #12]
   2229c:	e5971004 	ldr	r1, [r7, #4]
   222a0:	ebffdc48 	bl	193c8 <CTransportLayer::IsConnected(int) const>
   222a4:	e3500000 	cmp	r0, #0
   222a8:	0afffff2 	beq	22278 <CSocket::Accept(CIPAddress*, unsigned short*)+0x50>
   222ac:	e1a08004 	mov	r8, r4
   222b0:	e2843008 	add	r3, r4, #8
   222b4:	e7965103 	ldr	r5, [r6, r3, lsl #2]
   222b8:	e1e03005 	mvn	r3, r5
   222bc:	e3750106 	cmn	r5, #-2147483647	; 0x80000001
   222c0:	e1a03fa3 	lsr	r3, r3, #31
   222c4:	03a03000 	moveq	r3, #0
   222c8:	e3530000 	cmp	r3, #0
   222cc:	0a00002d 	beq	22388 <CSocket::Accept(CIPAddress*, unsigned short*)+0x160>
   222d0:	e596301c 	ldr	r3, [r6, #28]
   222d4:	e1530008 	cmp	r3, r8
   222d8:	9a00002e 	bls	22398 <CSocket::Accept(CIPAddress*, unsigned short*)+0x170>
   222dc:	e3590000 	cmp	r9, #0
   222e0:	0a000019 	beq	2234c <CSocket::Accept(CIPAddress*, unsigned short*)+0x124>
   222e4:	e35a0000 	cmp	sl, #0
   222e8:	0a000032 	beq	223b8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   222ec:	e1a0200a 	mov	r2, sl
   222f0:	e1a01009 	mov	r1, r9
   222f4:	e1a03005 	mov	r3, r5
   222f8:	e596000c 	ldr	r0, [r6, #12]
   222fc:	ebffdaf6 	bl	18edc <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>
   22300:	e3500000 	cmp	r0, #0
   22304:	b3a04000 	movlt	r4, #0
   22308:	ba000005 	blt	22324 <CSocket::Accept(CIPAddress*, unsigned short*)+0xfc>
   2230c:	e3a000a0 	mov	r0, #160	; 0xa0
   22310:	eb001ef7 	bl	29ef4 <operator new(unsigned int)>
   22314:	e1a02005 	mov	r2, r5
   22318:	e1a01006 	mov	r1, r6
   2231c:	e1a04000 	mov	r4, r0
   22320:	ebffff98 	bl	22188 <CSocket::CSocket(CSocket&, int)>
   22324:	e5962010 	ldr	r2, [r6, #16]
   22328:	e1d611b4 	ldrh	r1, [r6, #20]
   2232c:	e596000c 	ldr	r0, [r6, #12]
   22330:	ebffda8d 	bl	18d6c <CTransportLayer::Listen(unsigned short, int)>
   22334:	e2888008 	add	r8, r8, #8
   22338:	e3500000 	cmp	r0, #0
   2233c:	e7860108 	str	r0, [r6, r8, lsl #2]
   22340:	ba000018 	blt	223a8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x180>
   22344:	e1a00004 	mov	r0, r4
   22348:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2234c:	e3a020d0 	mov	r2, #208	; 0xd0
   22350:	e59f1070 	ldr	r1, [pc, #112]	; 223c8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   22354:	e59f0070 	ldr	r0, [pc, #112]	; 223cc <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a4>
   22358:	eb0004c8 	bl	23680 <assertion_failed>
   2235c:	e1a04003 	mov	r4, r3
   22360:	e1a00004 	mov	r0, r4
   22364:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22368:	e3a020b3 	mov	r2, #179	; 0xb3
   2236c:	e59f1054 	ldr	r1, [pc, #84]	; 223c8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   22370:	e59f0058 	ldr	r0, [pc, #88]	; 223d0 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a8>
   22374:	eb0004c1 	bl	23680 <assertion_failed>
   22378:	e3a020b4 	mov	r2, #180	; 0xb4
   2237c:	e59f1044 	ldr	r1, [pc, #68]	; 223c8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   22380:	e59f004c 	ldr	r0, [pc, #76]	; 223d4 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1ac>
   22384:	eb0004bd 	bl	23680 <assertion_failed>
   22388:	e3a020cb 	mov	r2, #203	; 0xcb
   2238c:	e59f1034 	ldr	r1, [pc, #52]	; 223c8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   22390:	e59f0040 	ldr	r0, [pc, #64]	; 223d8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1b0>
   22394:	eb0004b9 	bl	23680 <assertion_failed>
   22398:	e3a020cc 	mov	r2, #204	; 0xcc
   2239c:	e59f1024 	ldr	r1, [pc, #36]	; 223c8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   223a0:	e59f0034 	ldr	r0, [pc, #52]	; 223dc <CSocket::Accept(CIPAddress*, unsigned short*)+0x1b4>
   223a4:	eb0004b5 	bl	23680 <assertion_failed>
   223a8:	e3a020dc 	mov	r2, #220	; 0xdc
   223ac:	e59f1014 	ldr	r1, [pc, #20]	; 223c8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   223b0:	e59f0028 	ldr	r0, [pc, #40]	; 223e0 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1b8>
   223b4:	eb0004b1 	bl	23680 <assertion_failed>
   223b8:	e3a020d1 	mov	r2, #209	; 0xd1
   223bc:	e59f1004 	ldr	r1, [pc, #4]	; 223c8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   223c0:	e59f001c 	ldr	r0, [pc, #28]	; 223e4 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1bc>
   223c4:	eb0004ad 	bl	23680 <assertion_failed>
   223c8:	00039ef4 	.word	0x00039ef4
   223cc:	00038f80 	.word	0x00038f80
   223d0:	00039f00 	.word	0x00039f00
   223d4:	00039fa8 	.word	0x00039fa8
   223d8:	00039f44 	.word	0x00039f44
   223dc:	00039f70 	.word	0x00039f70
   223e0:	00039f84 	.word	0x00039f84
   223e4:	00038f90 	.word	0x00038f90

000223e8 <CNetSocket::Connect(char const*, char const*)>:
   223e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   223ec:	e2516000 	subs	r6, r1, #0
   223f0:	e24dd01c 	sub	sp, sp, #28
   223f4:	0a000038 	beq	224dc <CNetSocket::Connect(char const*, char const*)+0xf4>
   223f8:	e3520000 	cmp	r2, #0
   223fc:	e1a05002 	mov	r5, r2
   22400:	0a000039 	beq	224ec <CNetSocket::Connect(char const*, char const*)+0x104>
   22404:	e3a03000 	mov	r3, #0
   22408:	e28d1018 	add	r1, sp, #24
   2240c:	e5213010 	str	r3, [r1, #-16]!
   22410:	e1a04000 	mov	r4, r0
   22414:	e3a0200a 	mov	r2, #10
   22418:	e1a00005 	mov	r0, r5
   2241c:	eb001c03 	bl	29430 <strtoul>
   22420:	e59d3008 	ldr	r3, [sp, #8]
   22424:	e1a07000 	mov	r7, r0
   22428:	e3530000 	cmp	r3, #0
   2242c:	0a000002 	beq	2243c <CNetSocket::Connect(char const*, char const*)+0x54>
   22430:	e1d330d0 	ldrsb	r3, [r3]
   22434:	e3530000 	cmp	r3, #0
   22438:	1a000033 	bne	2250c <CNetSocket::Connect(char const*, char const*)+0x124>
   2243c:	e59f30e8 	ldr	r3, [pc, #232]	; 2252c <CNetSocket::Connect(char const*, char const*)+0x144>
   22440:	e2472001 	sub	r2, r7, #1
   22444:	e1520003 	cmp	r2, r3
   22448:	8a00002f 	bhi	2250c <CNetSocket::Connect(char const*, char const*)+0x124>
   2244c:	e5943004 	ldr	r3, [r4, #4]
   22450:	e3530000 	cmp	r3, #0
   22454:	0a000028 	beq	224fc <CNetSocket::Connect(char const*, char const*)+0x114>
   22458:	e28d0010 	add	r0, sp, #16
   2245c:	ebfff5ea 	bl	1fc0c <CIPAddress::CIPAddress()>
   22460:	e5941004 	ldr	r1, [r4, #4]
   22464:	e28d000c 	add	r0, sp, #12
   22468:	eb000063 	bl	225fc <CDNSClient::CDNSClient(CNetSubSystem*)>
   2246c:	e28d2010 	add	r2, sp, #16
   22470:	e1a01006 	mov	r1, r6
   22474:	e28d000c 	add	r0, sp, #12
   22478:	eb0000b3 	bl	2274c <CDNSClient::Resolve(char const*, CIPAddress*)>
   2247c:	e3500000 	cmp	r0, #0
   22480:	0a00000d 	beq	224bc <CNetSocket::Connect(char const*, char const*)+0xd4>
   22484:	e5943000 	ldr	r3, [r4]
   22488:	e1a00004 	mov	r0, r4
   2248c:	e6ff2077 	uxth	r2, r7
   22490:	e593300c 	ldr	r3, [r3, #12]
   22494:	e28d1010 	add	r1, sp, #16
   22498:	e12fff33 	blx	r3
   2249c:	e1a04000 	mov	r4, r0
   224a0:	e28d000c 	add	r0, sp, #12
   224a4:	eb00005f 	bl	22628 <CDNSClient::~CDNSClient()>
   224a8:	e28d0010 	add	r0, sp, #16
   224ac:	ebfff5ec 	bl	1fc64 <CIPAddress::~CIPAddress()>
   224b0:	e1a00004 	mov	r0, r4
   224b4:	e28dd01c 	add	sp, sp, #28
   224b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   224bc:	eb000d62 	bl	25a4c <CLogger::Get()>
   224c0:	e58d6000 	str	r6, [sp]
   224c4:	e59f3064 	ldr	r3, [pc, #100]	; 22530 <CNetSocket::Connect(char const*, char const*)+0x148>
   224c8:	e3a02004 	mov	r2, #4
   224cc:	e59f1060 	ldr	r1, [pc, #96]	; 22534 <CNetSocket::Connect(char const*, char const*)+0x14c>
   224d0:	eb000c9a 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   224d4:	e3e04000 	mvn	r4, #0
   224d8:	eafffff0 	b	224a0 <CNetSocket::Connect(char const*, char const*)+0xb8>
   224dc:	e3a0202a 	mov	r2, #42	; 0x2a
   224e0:	e59f1050 	ldr	r1, [pc, #80]	; 22538 <CNetSocket::Connect(char const*, char const*)+0x150>
   224e4:	e59f0050 	ldr	r0, [pc, #80]	; 2253c <CNetSocket::Connect(char const*, char const*)+0x154>
   224e8:	eb000464 	bl	23680 <assertion_failed>
   224ec:	e3a0202b 	mov	r2, #43	; 0x2b
   224f0:	e59f1040 	ldr	r1, [pc, #64]	; 22538 <CNetSocket::Connect(char const*, char const*)+0x150>
   224f4:	e59f0044 	ldr	r0, [pc, #68]	; 22540 <CNetSocket::Connect(char const*, char const*)+0x158>
   224f8:	eb000460 	bl	23680 <assertion_failed>
   224fc:	e3a02037 	mov	r2, #55	; 0x37
   22500:	e59f1030 	ldr	r1, [pc, #48]	; 22538 <CNetSocket::Connect(char const*, char const*)+0x150>
   22504:	e59f0038 	ldr	r0, [pc, #56]	; 22544 <CNetSocket::Connect(char const*, char const*)+0x15c>
   22508:	eb00045c 	bl	23680 <assertion_failed>
   2250c:	eb000d4e 	bl	25a4c <CLogger::Get()>
   22510:	e58d5000 	str	r5, [sp]
   22514:	e59f302c 	ldr	r3, [pc, #44]	; 22548 <CNetSocket::Connect(char const*, char const*)+0x160>
   22518:	e3a02004 	mov	r2, #4
   2251c:	e59f1010 	ldr	r1, [pc, #16]	; 22534 <CNetSocket::Connect(char const*, char const*)+0x14c>
   22520:	eb000c86 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22524:	e3e04000 	mvn	r4, #0
   22528:	eaffffe0 	b	224b0 <CNetSocket::Connect(char const*, char const*)+0xc8>
   2252c:	0000fffe 	.word	0x0000fffe
   22530:	0003a04c 	.word	0x0003a04c
   22534:	00039fd0 	.word	0x00039fd0
   22538:	0003a018 	.word	0x0003a018
   2253c:	00036148 	.word	0x00036148
   22540:	0003a028 	.word	0x0003a028
   22544:	00038efc 	.word	0x00038efc
   22548:	0003a034 	.word	0x0003a034

0002254c <CNetSocket::CNetSocket(CNetSubSystem*)>:
   2254c:	e59f2024 	ldr	r2, [pc, #36]	; 22578 <CNetSocket::CNetSocket(CNetSubSystem*)+0x2c>
   22550:	e3510000 	cmp	r1, #0
   22554:	e5801004 	str	r1, [r0, #4]
   22558:	e5802000 	str	r2, [r0]
   2255c:	0a000000 	beq	22564 <CNetSocket::CNetSocket(CNetSubSystem*)+0x18>
   22560:	e12fff1e 	bx	lr
   22564:	e92d4010 	push	{r4, lr}
   22568:	e3a02020 	mov	r2, #32
   2256c:	e59f1008 	ldr	r1, [pc, #8]	; 2257c <CNetSocket::CNetSocket(CNetSubSystem*)+0x30>
   22570:	e59f0008 	ldr	r0, [pc, #8]	; 22580 <CNetSocket::CNetSocket(CNetSubSystem*)+0x34>
   22574:	eb000441 	bl	23680 <assertion_failed>
   22578:	00039fe4 	.word	0x00039fe4
   2257c:	0003a018 	.word	0x0003a018
   22580:	00038efc 	.word	0x00038efc

00022584 <CNetSocket::~CNetSocket()>:
   22584:	e12fff1e 	bx	lr

00022588 <CNetSocket::~CNetSocket()>:
   22588:	e92d4010 	push	{r4, lr}
   2258c:	e1a04000 	mov	r4, r0
   22590:	e3a01008 	mov	r1, #8
   22594:	eb001e64 	bl	29f2c <operator delete(void*, unsigned int)>
   22598:	e1a00004 	mov	r0, r4
   2259c:	e8bd8010 	pop	{r4, pc}

000225a0 <CNetSocket::GetNetSubSystem()>:
   225a0:	e5900004 	ldr	r0, [r0, #4]
   225a4:	e3500000 	cmp	r0, #0
   225a8:	0a000000 	beq	225b0 <CNetSocket::GetNetSubSystem()+0x10>
   225ac:	e12fff1e 	bx	lr
   225b0:	e92d4010 	push	{r4, lr}
   225b4:	e3a02046 	mov	r2, #70	; 0x46
   225b8:	e59f1004 	ldr	r1, [pc, #4]	; 225c4 <CNetSocket::GetNetSubSystem()+0x24>
   225bc:	e59f0004 	ldr	r0, [pc, #4]	; 225c8 <CNetSocket::GetNetSubSystem()+0x28>
   225c0:	eb00042e 	bl	23680 <assertion_failed>
   225c4:	0003a018 	.word	0x0003a018
   225c8:	00038efc 	.word	0x00038efc

000225cc <CNetSocket::Bind(unsigned short)>:
   225cc:	e3e00000 	mvn	r0, #0
   225d0:	e12fff1e 	bx	lr

000225d4 <CNetSocket::Listen(unsigned int)>:
   225d4:	e3e00000 	mvn	r0, #0
   225d8:	e12fff1e 	bx	lr

000225dc <CNetSocket::Accept(CIPAddress*, unsigned short*)>:
   225dc:	e3a00000 	mov	r0, #0
   225e0:	e12fff1e 	bx	lr

000225e4 <CNetSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   225e4:	e3e00000 	mvn	r0, #0
   225e8:	e12fff1e 	bx	lr

000225ec <CNetSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   225ec:	e3e00000 	mvn	r0, #0
   225f0:	e12fff1e 	bx	lr

000225f4 <CNetSocket::SetOptionBroadcast(bool)>:
   225f4:	e3e00000 	mvn	r0, #0
   225f8:	e12fff1e 	bx	lr

000225fc <CDNSClient::CDNSClient(CNetSubSystem*)>:
   225fc:	e3510000 	cmp	r1, #0
   22600:	e5801000 	str	r1, [r0]
   22604:	0a000000 	beq	2260c <CDNSClient::CDNSClient(CNetSubSystem*)+0x10>
   22608:	e12fff1e 	bx	lr
   2260c:	e92d4010 	push	{r4, lr}
   22610:	e3a02056 	mov	r2, #86	; 0x56
   22614:	e59f1004 	ldr	r1, [pc, #4]	; 22620 <CDNSClient::CDNSClient(CNetSubSystem*)+0x24>
   22618:	e59f0004 	ldr	r0, [pc, #4]	; 22624 <CDNSClient::CDNSClient(CNetSubSystem*)+0x28>
   2261c:	eb000417 	bl	23680 <assertion_failed>
   22620:	0003a060 	.word	0x0003a060
   22624:	00038efc 	.word	0x00038efc

00022628 <CDNSClient::~CDNSClient()>:
   22628:	e12fff1e 	bx	lr

0002262c <CDNSClient::ConvertIPString(char const*, CIPAddress*)>:
   2262c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   22630:	e3a04000 	mov	r4, #0
   22634:	e1a00001 	mov	r0, r1
   22638:	e1a05004 	mov	r5, r4
   2263c:	e24dd00c 	sub	sp, sp, #12
   22640:	e3500000 	cmp	r0, #0
   22644:	e1a07002 	mov	r7, r2
   22648:	e3a0600a 	mov	r6, #10
   2264c:	e58d5004 	str	r5, [sp, #4]
   22650:	0a000013 	beq	226a4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x78>
   22654:	e1a02006 	mov	r2, r6
   22658:	e28d1004 	add	r1, sp, #4
   2265c:	eb001b73 	bl	29430 <strtoul>
   22660:	e3540003 	cmp	r4, #3
   22664:	e1a03000 	mov	r3, r0
   22668:	0a000014 	beq	226c0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x94>
   2266c:	e59d0004 	ldr	r0, [sp, #4]
   22670:	e3500000 	cmp	r0, #0
   22674:	0a00000e 	beq	226b4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   22678:	e1d020d0 	ldrsb	r2, [r0]
   2267c:	e352002e 	cmp	r2, #46	; 0x2e
   22680:	1a00000b 	bne	226b4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   22684:	e35300ff 	cmp	r3, #255	; 0xff
   22688:	8a000009 	bhi	226b4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   2268c:	e2800001 	add	r0, r0, #1
   22690:	e3500000 	cmp	r0, #0
   22694:	e7cd3004 	strb	r3, [sp, r4]
   22698:	e58d5004 	str	r5, [sp, #4]
   2269c:	e2844001 	add	r4, r4, #1
   226a0:	1affffeb 	bne	22654 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x28>
   226a4:	e59f2084 	ldr	r2, [pc, #132]	; 22730 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x104>
   226a8:	e59f1084 	ldr	r1, [pc, #132]	; 22734 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   226ac:	e59f0084 	ldr	r0, [pc, #132]	; 22738 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x10c>
   226b0:	eb0003f2 	bl	23680 <assertion_failed>
   226b4:	e3a00000 	mov	r0, #0
   226b8:	e28dd00c 	add	sp, sp, #12
   226bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   226c0:	e59d2004 	ldr	r2, [sp, #4]
   226c4:	e3520000 	cmp	r2, #0
   226c8:	0a000011 	beq	22714 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   226cc:	e1d220d0 	ldrsb	r2, [r2]
   226d0:	e3520000 	cmp	r2, #0
   226d4:	1afffff6 	bne	226b4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   226d8:	e35000ff 	cmp	r0, #255	; 0xff
   226dc:	8afffff4 	bhi	226b4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   226e0:	e3570000 	cmp	r7, #0
   226e4:	e5cd3003 	strb	r3, [sp, #3]
   226e8:	0a000005 	beq	22704 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xd8>
   226ec:	e1a00007 	mov	r0, r7
   226f0:	e1a0100d 	mov	r1, sp
   226f4:	ebfff5cb 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   226f8:	e3a00001 	mov	r0, #1
   226fc:	e28dd00c 	add	sp, sp, #12
   22700:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22704:	e59f2030 	ldr	r2, [pc, #48]	; 2273c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x110>
   22708:	e59f1024 	ldr	r1, [pc, #36]	; 22734 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   2270c:	e59f002c 	ldr	r0, [pc, #44]	; 22740 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x114>
   22710:	eb0003da 	bl	23680 <assertion_failed>
   22714:	e35000ff 	cmp	r0, #255	; 0xff
   22718:	8affffe5 	bhi	226b4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   2271c:	e59f2020 	ldr	r2, [pc, #32]	; 22744 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x118>
   22720:	e59f100c 	ldr	r1, [pc, #12]	; 22734 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   22724:	e59f001c 	ldr	r0, [pc, #28]	; 22748 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x11c>
   22728:	e5cd3003 	strb	r3, [sp, #3]
   2272c:	eb0003d3 	bl	23680 <assertion_failed>
   22730:	0000011a 	.word	0x0000011a
   22734:	0003a060 	.word	0x0003a060
   22738:	0003a070 	.word	0x0003a070
   2273c:	00000139 	.word	0x00000139
   22740:	0003a080 	.word	0x0003a080
   22744:	00000135 	.word	0x00000135
   22748:	0003a090 	.word	0x0003a090

0002274c <CDNSClient::Resolve(char const*, CIPAddress*)>:
   2274c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22750:	e24ddd17 	sub	sp, sp, #1472	; 0x5c0
   22754:	e24dd00c 	sub	sp, sp, #12
   22758:	e2518000 	subs	r8, r1, #0
   2275c:	e58d2000 	str	r2, [sp]
   22760:	0a000063 	beq	228f4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1a8>
   22764:	e5d83000 	ldrb	r3, [r8]
   22768:	e1a04000 	mov	r4, r0
   2276c:	e2433031 	sub	r3, r3, #49	; 0x31
   22770:	e3530008 	cmp	r3, #8
   22774:	9a000057 	bls	228d8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x18c>
   22778:	e5940000 	ldr	r0, [r4]
   2277c:	e3500000 	cmp	r0, #0
   22780:	0a00005f 	beq	22904 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1b8>
   22784:	ebffd79c 	bl	185fc <CNetSubSystem::GetConfig()>
   22788:	ebfff4cb 	bl	1fabc <CNetConfig::GetDNSServer() const>
   2278c:	ebfff5da 	bl	1fefc <CIPAddress::Get() const>
   22790:	e1a01000 	mov	r1, r0
   22794:	e28d0010 	add	r0, sp, #16
   22798:	ebfff5b2 	bl	1fe68 <CIPAddress::CIPAddress(unsigned char const*)>
   2279c:	e28d0010 	add	r0, sp, #16
   227a0:	ebfff5f8 	bl	1ff88 <CIPAddress::IsNull() const>
   227a4:	e2505000 	subs	r5, r0, #0
   227a8:	0a000006 	beq	227c8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x7c>
   227ac:	e3a05000 	mov	r5, #0
   227b0:	e28d0010 	add	r0, sp, #16
   227b4:	ebfff52a 	bl	1fc64 <CIPAddress::~CIPAddress()>
   227b8:	e1a00005 	mov	r0, r5
   227bc:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   227c0:	e28dd00c 	add	sp, sp, #12
   227c4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   227c8:	e5941000 	ldr	r1, [r4]
   227cc:	e3a02011 	mov	r2, #17
   227d0:	e28d0028 	add	r0, sp, #40	; 0x28
   227d4:	ebfffe45 	bl	220f0 <CSocket::CSocket(CNetSubSystem*, int)>
   227d8:	e28d0028 	add	r0, sp, #40	; 0x28
   227dc:	e3a02035 	mov	r2, #53	; 0x35
   227e0:	e28d1010 	add	r1, sp, #16
   227e4:	ebfffcbf 	bl	21ae8 <CSocket::Connect(CIPAddress&, unsigned short)>
   227e8:	e3500000 	cmp	r0, #0
   227ec:	1a000036 	bne	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   227f0:	e28d4f72 	add	r4, sp, #456	; 0x1c8
   227f4:	e3a02c02 	mov	r2, #512	; 0x200
   227f8:	e1a01005 	mov	r1, r5
   227fc:	e1a00004 	mov	r0, r4
   22800:	eb00196b 	bl	28db4 <memset>
   22804:	e3a02001 	mov	r2, #1
   22808:	e3a00c01 	mov	r0, #256	; 0x100
   2280c:	e59f3338 	ldr	r3, [pc, #824]	; 22b4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x400>
   22810:	e1c420b2 	strh	r2, [r4, #2]
   22814:	e1d360b0 	ldrh	r6, [r3]
   22818:	e1a01008 	mov	r1, r8
   2281c:	e0862002 	add	r2, r6, r2
   22820:	e6bf6fb6 	rev16	r6, r6
   22824:	e1c320b0 	strh	r2, [r3]
   22828:	e1c400b4 	strh	r0, [r4, #4]
   2282c:	e6ff3076 	uxth	r3, r6
   22830:	e3a020ff 	mov	r2, #255	; 0xff
   22834:	e1c460b0 	strh	r6, [r4]
   22838:	e28d00c8 	add	r0, sp, #200	; 0xc8
   2283c:	e58d3004 	str	r3, [sp, #4]
   22840:	eb001a76 	bl	29220 <strncpy>
   22844:	e28d00c8 	add	r0, sp, #200	; 0xc8
   22848:	e28d2008 	add	r2, sp, #8
   2284c:	e59f12fc 	ldr	r1, [pc, #764]	; 22b50 <CDNSClient::Resolve(char const*, CIPAddress*)+0x404>
   22850:	e5cd51c7 	strb	r5, [sp, #455]	; 0x1c7
   22854:	eb001ac2 	bl	29364 <strtok_r>
   22858:	e2506000 	subs	r6, r0, #0
   2285c:	028d9f75 	addeq	r9, sp, #468	; 0x1d4
   22860:	0a00002b 	beq	22914 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1c8>
   22864:	e1a0b005 	mov	fp, r5
   22868:	e59fa2e0 	ldr	sl, [pc, #736]	; 22b50 <CDNSClient::Resolve(char const*, CIPAddress*)+0x404>
   2286c:	e28d9f75 	add	r9, sp, #468	; 0x1d4
   22870:	ea000010 	b	228b8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x16c>
   22874:	e0493004 	sub	r3, r9, r4
   22878:	e2633c02 	rsb	r3, r3, #512	; 0x200
   2287c:	e2802002 	add	r2, r0, #2
   22880:	e1520003 	cmp	r2, r3
   22884:	aa000010 	bge	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   22888:	e2898001 	add	r8, r9, #1
   2288c:	e5c90000 	strb	r0, [r9]
   22890:	e1a01006 	mov	r1, r6
   22894:	e1a00008 	mov	r0, r8
   22898:	eb001a55 	bl	291f4 <strcpy>
   2289c:	e28d2008 	add	r2, sp, #8
   228a0:	e1a0100a 	mov	r1, sl
   228a4:	e1a0000b 	mov	r0, fp
   228a8:	eb001aad 	bl	29364 <strtok_r>
   228ac:	e2506000 	subs	r6, r0, #0
   228b0:	e0889007 	add	r9, r8, r7
   228b4:	0a000016 	beq	22914 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1c8>
   228b8:	e1a00006 	mov	r0, r6
   228bc:	eb00198e 	bl	28efc <strlen>
   228c0:	e35000ff 	cmp	r0, #255	; 0xff
   228c4:	e1a07000 	mov	r7, r0
   228c8:	9affffe9 	bls	22874 <CDNSClient::Resolve(char const*, CIPAddress*)+0x128>
   228cc:	e28d0028 	add	r0, sp, #40	; 0x28
   228d0:	ebfffcf7 	bl	21cb4 <CSocket::~CSocket()>
   228d4:	eaffffb5 	b	227b0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x64>
   228d8:	ebffff53 	bl	2262c <CDNSClient::ConvertIPString(char const*, CIPAddress*)>
   228dc:	e2505000 	subs	r5, r0, #0
   228e0:	0affffa4 	beq	22778 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2c>
   228e4:	e1a00005 	mov	r0, r5
   228e8:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   228ec:	e28dd00c 	add	sp, sp, #12
   228f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   228f4:	e3a02060 	mov	r2, #96	; 0x60
   228f8:	e59f1254 	ldr	r1, [pc, #596]	; 22b54 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   228fc:	e59f0254 	ldr	r0, [pc, #596]	; 22b58 <CDNSClient::Resolve(char const*, CIPAddress*)+0x40c>
   22900:	eb00035e 	bl	23680 <assertion_failed>
   22904:	e3a0206a 	mov	r2, #106	; 0x6a
   22908:	e59f1244 	ldr	r1, [pc, #580]	; 22b54 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   2290c:	e59f0248 	ldr	r0, [pc, #584]	; 22b5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x410>
   22910:	eb00035a 	bl	23680 <assertion_failed>
   22914:	e3a02c01 	mov	r2, #256	; 0x100
   22918:	e3a08000 	mov	r8, #0
   2291c:	e2890001 	add	r0, r9, #1
   22920:	e0403004 	sub	r3, r0, r4
   22924:	e2633c02 	rsb	r3, r3, #512	; 0x200
   22928:	e28d100c 	add	r1, sp, #12
   2292c:	e3530003 	cmp	r3, #3
   22930:	e5c98000 	strb	r8, [r9]
   22934:	e1cd20bc 	strh	r2, [sp, #12]
   22938:	e1c120b2 	strh	r2, [r1, #2]
   2293c:	daffffe2 	ble	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   22940:	e3a02004 	mov	r2, #4
   22944:	e2899005 	add	r9, r9, #5
   22948:	eb001b90 	bl	29790 <memcpy>
   2294c:	e0493004 	sub	r3, r9, r4
   22950:	e3530c02 	cmp	r3, #512	; 0x200
   22954:	ca000053 	bgt	22aa8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x35c>
   22958:	e1a07008 	mov	r7, r8
   2295c:	e3a0bffa 	mov	fp, #1000	; 0x3e8
   22960:	e3a08003 	mov	r8, #3
   22964:	e3a0a040 	mov	sl, #64	; 0x40
   22968:	e1a06003 	mov	r6, r3
   2296c:	e28d9ff2 	add	r9, sp, #968	; 0x3c8
   22970:	e1a03007 	mov	r3, r7
   22974:	e1a02006 	mov	r2, r6
   22978:	e1a01004 	mov	r1, r4
   2297c:	e28d0028 	add	r0, sp, #40	; 0x28
   22980:	ebfffd3a 	bl	21e70 <CSocket::Send(void const*, unsigned int, int)>
   22984:	e1560000 	cmp	r6, r0
   22988:	1affffcf 	bne	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   2298c:	eb00028d 	bl	233c8 <CScheduler::Get()>
   22990:	e1a0100b 	mov	r1, fp
   22994:	eb000267 	bl	23338 <CScheduler::MsSleep(unsigned int)>
   22998:	e1a0300a 	mov	r3, sl
   2299c:	e3a02c02 	mov	r2, #512	; 0x200
   229a0:	e1a01009 	mov	r1, r9
   229a4:	e28d0028 	add	r0, sp, #40	; 0x28
   229a8:	ebfffd4d 	bl	21ee4 <CSocket::Receive(void*, unsigned int, int)>
   229ac:	e59f31ac 	ldr	r3, [pc, #428]	; 22b60 <CDNSClient::Resolve(char const*, CIPAddress*)+0x414>
   229b0:	e1500003 	cmp	r0, r3
   229b4:	ca000006 	bgt	229d4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x288>
   229b8:	e3500000 	cmp	r0, #0
   229bc:	baffffc2 	blt	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   229c0:	e3500019 	cmp	r0, #25
   229c4:	ca000006 	bgt	229e4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x298>
   229c8:	e2588001 	subs	r8, r8, #1
   229cc:	0affffbe 	beq	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   229d0:	eaffffe6 	b	22970 <CDNSClient::Resolve(char const*, CIPAddress*)+0x224>
   229d4:	e3a020ba 	mov	r2, #186	; 0xba
   229d8:	e59f1174 	ldr	r1, [pc, #372]	; 22b54 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   229dc:	e59f0180 	ldr	r0, [pc, #384]	; 22b64 <CDNSClient::Resolve(char const*, CIPAddress*)+0x418>
   229e0:	eb000326 	bl	23680 <assertion_failed>
   229e4:	e1d920b0 	ldrh	r2, [r9]
   229e8:	e59d1004 	ldr	r1, [sp, #4]
   229ec:	e1a03000 	mov	r3, r0
   229f0:	e1520001 	cmp	r2, r1
   229f4:	1affffb4 	bne	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   229f8:	e1d910b2 	ldrh	r1, [r9, #2]
   229fc:	e59f2164 	ldr	r2, [pc, #356]	; 22b68 <CDNSClient::Resolve(char const*, CIPAddress*)+0x41c>
   22a00:	e0022001 	and	r2, r2, r1
   22a04:	e3520080 	cmp	r2, #128	; 0x80
   22a08:	1affffaf 	bne	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   22a0c:	e1d920b4 	ldrh	r2, [r9, #4]
   22a10:	e3520c01 	cmp	r2, #256	; 0x100
   22a14:	1affffac 	bne	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   22a18:	e1d920b6 	ldrh	r2, [r9, #6]
   22a1c:	e3520000 	cmp	r2, #0
   22a20:	0affffa9 	beq	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   22a24:	e28d2ff5 	add	r2, sp, #980	; 0x3d4
   22a28:	ea000004 	b	22a40 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2f4>
   22a2c:	e2811001 	add	r1, r1, #1
   22a30:	e0822001 	add	r2, r2, r1
   22a34:	e0421009 	sub	r1, r2, r9
   22a38:	e1530001 	cmp	r3, r1
   22a3c:	daffffa2 	ble	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   22a40:	e5d21000 	ldrb	r1, [r2]
   22a44:	e3510000 	cmp	r1, #0
   22a48:	1afffff7 	bne	22a2c <CDNSClient::Resolve(char const*, CIPAddress*)+0x2e0>
   22a4c:	e2822005 	add	r2, r2, #5
   22a50:	e0421009 	sub	r1, r2, r9
   22a54:	e1530001 	cmp	r3, r1
   22a58:	daffff9b 	ble	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   22a5c:	e3a0800e 	mov	r8, #14
   22a60:	e1a07003 	mov	r7, r3
   22a64:	e243600e 	sub	r6, r3, #14
   22a68:	e5d23000 	ldrb	r3, [r2]
   22a6c:	e2824001 	add	r4, r2, #1
   22a70:	e20310c0 	and	r1, r3, #192	; 0xc0
   22a74:	e35100c0 	cmp	r1, #192	; 0xc0
   22a78:	02824002 	addeq	r4, r2, #2
   22a7c:	1a000004 	bne	22a94 <CDNSClient::Resolve(char const*, CIPAddress*)+0x348>
   22a80:	ea00000c 	b	22ab8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x36c>
   22a84:	e5d43000 	ldrb	r3, [r4]
   22a88:	e2844001 	add	r4, r4, #1
   22a8c:	e3530000 	cmp	r3, #0
   22a90:	0a000008 	beq	22ab8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x36c>
   22a94:	e0844003 	add	r4, r4, r3
   22a98:	e0443009 	sub	r3, r4, r9
   22a9c:	e1570003 	cmp	r7, r3
   22aa0:	cafffff7 	bgt	22a84 <CDNSClient::Resolve(char const*, CIPAddress*)+0x338>
   22aa4:	eaffff88 	b	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   22aa8:	e3a020a9 	mov	r2, #169	; 0xa9
   22aac:	e59f10a0 	ldr	r1, [pc, #160]	; 22b54 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   22ab0:	e59f00b4 	ldr	r0, [pc, #180]	; 22b6c <CDNSClient::Resolve(char const*, CIPAddress*)+0x420>
   22ab4:	eb0002f1 	bl	23680 <assertion_failed>
   22ab8:	e0443009 	sub	r3, r4, r9
   22abc:	e1530006 	cmp	r3, r6
   22ac0:	caffff81 	bgt	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   22ac4:	e1a02008 	mov	r2, r8
   22ac8:	e1a01004 	mov	r1, r4
   22acc:	e28d0018 	add	r0, sp, #24
   22ad0:	eb001b2e 	bl	29790 <memcpy>
   22ad4:	e1dd31b8 	ldrh	r3, [sp, #24]
   22ad8:	e3530c01 	cmp	r3, #256	; 0x100
   22adc:	0a000008 	beq	22b04 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3b8>
   22ae0:	e1dd22b0 	ldrh	r2, [sp, #32]
   22ae4:	e6bf2fb2 	rev16	r2, r2
   22ae8:	e6ff2072 	uxth	r2, r2
   22aec:	e282200a 	add	r2, r2, #10
   22af0:	e0842002 	add	r2, r4, r2
   22af4:	e0423009 	sub	r3, r2, r9
   22af8:	e1570003 	cmp	r7, r3
   22afc:	caffffd9 	bgt	22a68 <CDNSClient::Resolve(char const*, CIPAddress*)+0x31c>
   22b00:	eaffff71 	b	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   22b04:	e1dd31ba 	ldrh	r3, [sp, #26]
   22b08:	e3530c01 	cmp	r3, #256	; 0x100
   22b0c:	1afffff3 	bne	22ae0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x394>
   22b10:	e1dd32b0 	ldrh	r3, [sp, #32]
   22b14:	e3530b01 	cmp	r3, #1024	; 0x400
   22b18:	1afffff0 	bne	22ae0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x394>
   22b1c:	e59d3000 	ldr	r3, [sp]
   22b20:	e3530000 	cmp	r3, #0
   22b24:	0a000004 	beq	22b3c <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f0>
   22b28:	e28d1022 	add	r1, sp, #34	; 0x22
   22b2c:	e59d0000 	ldr	r0, [sp]
   22b30:	ebfff4bc 	bl	1fe28 <CIPAddress::Set(unsigned char const*)>
   22b34:	e3a05001 	mov	r5, #1
   22b38:	eaffff63 	b	228cc <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   22b3c:	e59f202c 	ldr	r2, [pc, #44]	; 22b70 <CDNSClient::Resolve(char const*, CIPAddress*)+0x424>
   22b40:	e59f100c 	ldr	r1, [pc, #12]	; 22b54 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   22b44:	e59f0028 	ldr	r0, [pc, #40]	; 22b74 <CDNSClient::Resolve(char const*, CIPAddress*)+0x428>
   22b48:	eb0002cc 	bl	23680 <assertion_failed>
   22b4c:	0003dfd8 	.word	0x0003dfd8
   22b50:	00034634 	.word	0x00034634
   22b54:	0003a060 	.word	0x0003a060
   22b58:	0003a09c 	.word	0x0003a09c
   22b5c:	00038efc 	.word	0x00038efc
   22b60:	000001ff 	.word	0x000001ff
   22b64:	0003a0cc 	.word	0x0003a0cc
   22b68:	00000ffa 	.word	0x00000ffa
   22b6c:	0003a0ac 	.word	0x0003a0ac
   22b70:	0000010d 	.word	0x0000010d
   22b74:	0003a080 	.word	0x0003a080

00022b78 <CTask::Run()>:
   22b78:	e92d4010 	push	{r4, lr}
   22b7c:	e3a0203f 	mov	r2, #63	; 0x3f
   22b80:	e59f1004 	ldr	r1, [pc, #4]	; 22b8c <CTask::Run()+0x14>
   22b84:	e59f0004 	ldr	r0, [pc, #4]	; 22b90 <CTask::Run()+0x18>
   22b88:	eb0002bc 	bl	23680 <assertion_failed>
   22b8c:	0003a104 	.word	0x0003a104
   22b90:	00035260 	.word	0x00035260

00022b94 <CTask::TaskEntry(void*)>:
   22b94:	e92d4010 	push	{r4, lr}
   22b98:	e2504000 	subs	r4, r0, #0
   22b9c:	0a00000c 	beq	22bd4 <CTask::TaskEntry(void*)+0x40>
   22ba0:	e5943000 	ldr	r3, [r4]
   22ba4:	e5933008 	ldr	r3, [r3, #8]
   22ba8:	e12fff33 	blx	r3
   22bac:	e3a03003 	mov	r3, #3
   22bb0:	e28400d4 	add	r0, r4, #212	; 0xd4
   22bb4:	e5c43004 	strb	r3, [r4, #4]
   22bb8:	eb00022d 	bl	23474 <CSynchronizationEvent::Set()>
   22bbc:	eb000201 	bl	233c8 <CScheduler::Get()>
   22bc0:	eb00016d 	bl	2317c <CScheduler::Yield()>
   22bc4:	e3a0208c 	mov	r2, #140	; 0x8c
   22bc8:	e59f1014 	ldr	r1, [pc, #20]	; 22be4 <CTask::TaskEntry(void*)+0x50>
   22bcc:	e59f0014 	ldr	r0, [pc, #20]	; 22be8 <CTask::TaskEntry(void*)+0x54>
   22bd0:	eb0002aa 	bl	23680 <assertion_failed>
   22bd4:	e3a02084 	mov	r2, #132	; 0x84
   22bd8:	e59f1004 	ldr	r1, [pc, #4]	; 22be4 <CTask::TaskEntry(void*)+0x50>
   22bdc:	e59f0008 	ldr	r0, [pc, #8]	; 22bec <CTask::TaskEntry(void*)+0x58>
   22be0:	eb0002a6 	bl	23680 <assertion_failed>
   22be4:	0003a104 	.word	0x0003a104
   22be8:	00035260 	.word	0x00035260
   22bec:	0003466c 	.word	0x0003466c

00022bf0 <CTask::~CTask()>:
   22bf0:	e5d02004 	ldrb	r2, [r0, #4]
   22bf4:	e59f3050 	ldr	r3, [pc, #80]	; 22c4c <CTask::~CTask()+0x5c>
   22bf8:	e3520003 	cmp	r2, #3
   22bfc:	e92d4010 	push	{r4, lr}
   22c00:	e5803000 	str	r3, [r0]
   22c04:	1a00000c 	bne	22c3c <CTask::~CTask()+0x4c>
   22c08:	e1a04000 	mov	r4, r0
   22c0c:	e3a03004 	mov	r3, #4
   22c10:	e59000c8 	ldr	r0, [r0, #200]	; 0xc8
   22c14:	e5c43004 	strb	r3, [r4, #4]
   22c18:	e3500000 	cmp	r0, #0
   22c1c:	0a000000 	beq	22c24 <CTask::~CTask()+0x34>
   22c20:	eb001cbb 	bl	29f14 <operator delete[](void*)>
   22c24:	e3a03000 	mov	r3, #0
   22c28:	e28400d4 	add	r0, r4, #212	; 0xd4
   22c2c:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   22c30:	eb0001ff 	bl	23434 <CSynchronizationEvent::~CSynchronizationEvent()>
   22c34:	e1a00004 	mov	r0, r4
   22c38:	e8bd8010 	pop	{r4, pc}
   22c3c:	e3a02036 	mov	r2, #54	; 0x36
   22c40:	e59f1008 	ldr	r1, [pc, #8]	; 22c50 <CTask::~CTask()+0x60>
   22c44:	e59f0008 	ldr	r0, [pc, #8]	; 22c54 <CTask::~CTask()+0x64>
   22c48:	eb00028c 	bl	23680 <assertion_failed>
   22c4c:	0003a0f8 	.word	0x0003a0f8
   22c50:	0003a104 	.word	0x0003a104
   22c54:	0003a110 	.word	0x0003a110

00022c58 <CTask::~CTask()>:
   22c58:	e92d4010 	push	{r4, lr}
   22c5c:	e1a04000 	mov	r4, r0
   22c60:	ebffffe2 	bl	22bf0 <CTask::~CTask()>
   22c64:	e1a00004 	mov	r0, r4
   22c68:	e3a010dc 	mov	r1, #220	; 0xdc
   22c6c:	eb001cae 	bl	29f2c <operator delete(void*, unsigned int)>
   22c70:	e1a00004 	mov	r0, r4
   22c74:	e8bd8010 	pop	{r4, pc}

00022c78 <CTask::Terminate()>:
   22c78:	e1a03000 	mov	r3, r0
   22c7c:	e3a02003 	mov	r2, #3
   22c80:	e92d4010 	push	{r4, lr}
   22c84:	e28000d4 	add	r0, r0, #212	; 0xd4
   22c88:	e5c32004 	strb	r2, [r3, #4]
   22c8c:	eb0001f8 	bl	23474 <CSynchronizationEvent::Set()>
   22c90:	eb0001cc 	bl	233c8 <CScheduler::Get()>
   22c94:	eb000138 	bl	2317c <CScheduler::Yield()>
   22c98:	e3a02048 	mov	r2, #72	; 0x48
   22c9c:	e59f1004 	ldr	r1, [pc, #4]	; 22ca8 <CTask::Terminate()+0x30>
   22ca0:	e59f0004 	ldr	r0, [pc, #4]	; 22cac <CTask::Terminate()+0x34>
   22ca4:	eb000275 	bl	23680 <assertion_failed>
   22ca8:	0003a104 	.word	0x0003a104
   22cac:	00035260 	.word	0x00035260

00022cb0 <CTask::WaitForTermination()>:
   22cb0:	e28000d4 	add	r0, r0, #212	; 0xd4
   22cb4:	ea0001fc 	b	234ac <CSynchronizationEvent::Wait()>

00022cb8 <CTask::SetUserData(void*, unsigned int)>:
   22cb8:	e0802102 	add	r2, r0, r2, lsl #2
   22cbc:	e58210cc 	str	r1, [r2, #204]	; 0xcc
   22cc0:	e12fff1e 	bx	lr

00022cc4 <CTask::GetUserData(unsigned int)>:
   22cc4:	e0801101 	add	r1, r0, r1, lsl #2
   22cc8:	e59100cc 	ldr	r0, [r1, #204]	; 0xcc
   22ccc:	e12fff1e 	bx	lr

00022cd0 <CTask::InitializeRegs()>:
   22cd0:	e92d4010 	push	{r4, lr}
   22cd4:	e1a04000 	mov	r4, r0
   22cd8:	e3a020b8 	mov	r2, #184	; 0xb8
   22cdc:	e280000c 	add	r0, r0, #12
   22ce0:	e3a01000 	mov	r1, #0
   22ce4:	eb001832 	bl	28db4 <memset>
   22ce8:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   22cec:	e584400c 	str	r4, [r4, #12]
   22cf0:	e3530000 	cmp	r3, #0
   22cf4:	0a000009 	beq	22d20 <CTask::InitializeRegs()+0x50>
   22cf8:	e3a00101 	mov	r0, #1073741824	; 0x40000000
   22cfc:	e3a01402 	mov	r1, #33554432	; 0x2000000
   22d00:	e594c0c4 	ldr	ip, [r4, #196]	; 0xc4
   22d04:	e59f2024 	ldr	r2, [pc, #36]	; 22d30 <CTask::InitializeRegs()+0x60>
   22d08:	e083300c 	add	r3, r3, ip
   22d0c:	e584303c 	str	r3, [r4, #60]	; 0x3c
   22d10:	e5840010 	str	r0, [r4, #16]
   22d14:	e5841014 	str	r1, [r4, #20]
   22d18:	e5842040 	str	r2, [r4, #64]	; 0x40
   22d1c:	e8bd8010 	pop	{r4, pc}
   22d20:	e3a02062 	mov	r2, #98	; 0x62
   22d24:	e59f1008 	ldr	r1, [pc, #8]	; 22d34 <CTask::InitializeRegs()+0x64>
   22d28:	e59f0008 	ldr	r0, [pc, #8]	; 22d38 <CTask::InitializeRegs()+0x68>
   22d2c:	eb000253 	bl	23680 <assertion_failed>
   22d30:	00022b94 	.word	0x00022b94
   22d34:	0003a104 	.word	0x0003a104
   22d38:	0003a130 	.word	0x0003a130

00022d3c <CTask::CTask(unsigned int)>:
   22d3c:	e92d4070 	push	{r4, r5, r6, lr}
   22d40:	e3a05000 	mov	r5, #0
   22d44:	e1a04000 	mov	r4, r0
   22d48:	e59f3080 	ldr	r3, [pc, #128]	; 22dd0 <CTask::CTask(unsigned int)+0x94>
   22d4c:	e58010c4 	str	r1, [r0, #196]	; 0xc4
   22d50:	e5803000 	str	r3, [r0]
   22d54:	e5c05004 	strb	r5, [r0, #4]
   22d58:	e58050c8 	str	r5, [r0, #200]	; 0xc8
   22d5c:	e1a01005 	mov	r1, r5
   22d60:	e28000d4 	add	r0, r0, #212	; 0xd4
   22d64:	eb0001ae 	bl	23424 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   22d68:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   22d6c:	e58450cc 	str	r5, [r4, #204]	; 0xcc
   22d70:	e1500005 	cmp	r0, r5
   22d74:	e58450d0 	str	r5, [r4, #208]	; 0xd0
   22d78:	0a000007 	beq	22d9c <CTask::CTask(unsigned int)+0x60>
   22d7c:	e3500b01 	cmp	r0, #1024	; 0x400
   22d80:	3a00000a 	bcc	22db0 <CTask::CTask(unsigned int)+0x74>
   22d84:	e3100003 	tst	r0, #3
   22d88:	1a00000c 	bne	22dc0 <CTask::CTask(unsigned int)+0x84>
   22d8c:	eb001c59 	bl	29ef8 <operator new[](unsigned int)>
   22d90:	e58400c8 	str	r0, [r4, #200]	; 0xc8
   22d94:	e1a00004 	mov	r0, r4
   22d98:	ebffffcc 	bl	22cd0 <CTask::InitializeRegs()>
   22d9c:	eb000189 	bl	233c8 <CScheduler::Get()>
   22da0:	e1a01004 	mov	r1, r4
   22da4:	eb000054 	bl	22efc <CScheduler::AddTask(CTask*)>
   22da8:	e1a00004 	mov	r0, r4
   22dac:	e8bd8070 	pop	{r4, r5, r6, pc}
   22db0:	e3a02025 	mov	r2, #37	; 0x25
   22db4:	e59f1018 	ldr	r1, [pc, #24]	; 22dd4 <CTask::CTask(unsigned int)+0x98>
   22db8:	e59f0018 	ldr	r0, [pc, #24]	; 22dd8 <CTask::CTask(unsigned int)+0x9c>
   22dbc:	eb00022f 	bl	23680 <assertion_failed>
   22dc0:	e3a02027 	mov	r2, #39	; 0x27
   22dc4:	e59f1008 	ldr	r1, [pc, #8]	; 22dd4 <CTask::CTask(unsigned int)+0x98>
   22dc8:	e59f000c 	ldr	r0, [pc, #12]	; 22ddc <CTask::CTask(unsigned int)+0xa0>
   22dcc:	eb00022b 	bl	23680 <assertion_failed>
   22dd0:	0003a0f8 	.word	0x0003a0f8
   22dd4:	0003a104 	.word	0x0003a104
   22dd8:	0003a140 	.word	0x0003a140
   22ddc:	0003a158 	.word	0x0003a158

00022de0 <CScheduler::CScheduler()>:
   22de0:	e3a03000 	mov	r3, #0
   22de4:	e59f2058 	ldr	r2, [pc, #88]	; 22e44 <CScheduler::CScheduler()+0x64>
   22de8:	e92d4070 	push	{r4, r5, r6, lr}
   22dec:	e5925000 	ldr	r5, [r2]
   22df0:	e5803050 	str	r3, [r0, #80]	; 0x50
   22df4:	e1550003 	cmp	r5, r3
   22df8:	e5803054 	str	r3, [r0, #84]	; 0x54
   22dfc:	e5803058 	str	r3, [r0, #88]	; 0x58
   22e00:	e580305c 	str	r3, [r0, #92]	; 0x5c
   22e04:	e5803060 	str	r3, [r0, #96]	; 0x60
   22e08:	1a000009 	bne	22e34 <CScheduler::CScheduler()+0x54>
   22e0c:	e1a04000 	mov	r4, r0
   22e10:	e3a000dc 	mov	r0, #220	; 0xdc
   22e14:	e5824000 	str	r4, [r2]
   22e18:	eb001c35 	bl	29ef4 <operator new(unsigned int)>
   22e1c:	e1a06000 	mov	r6, r0
   22e20:	e1a01005 	mov	r1, r5
   22e24:	ebffffc4 	bl	22d3c <CTask::CTask(unsigned int)>
   22e28:	e5846054 	str	r6, [r4, #84]	; 0x54
   22e2c:	e1a00004 	mov	r0, r4
   22e30:	e8bd8070 	pop	{r4, r5, r6, pc}
   22e34:	e3a02024 	mov	r2, #36	; 0x24
   22e38:	e59f1008 	ldr	r1, [pc, #8]	; 22e48 <CScheduler::CScheduler()+0x68>
   22e3c:	e59f0008 	ldr	r0, [pc, #8]	; 22e4c <CScheduler::CScheduler()+0x6c>
   22e40:	eb00020e 	bl	23680 <assertion_failed>
   22e44:	0003e380 	.word	0x0003e380
   22e48:	0003a178 	.word	0x0003a178
   22e4c:	00038e94 	.word	0x00038e94

00022e50 <CScheduler::~CScheduler()>:
   22e50:	e3a02000 	mov	r2, #0
   22e54:	e59f3004 	ldr	r3, [pc, #4]	; 22e60 <CScheduler::~CScheduler()+0x10>
   22e58:	e5832000 	str	r2, [r3]
   22e5c:	e12fff1e 	bx	lr
   22e60:	0003e380 	.word	0x0003e380

00022e64 <CScheduler::GetCurrentTask()>:
   22e64:	e5900054 	ldr	r0, [r0, #84]	; 0x54
   22e68:	e12fff1e 	bx	lr

00022e6c <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))>:
   22e6c:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
   22e70:	e92d4010 	push	{r4, lr}
   22e74:	e3530000 	cmp	r3, #0
   22e78:	1a000006 	bne	22e98 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x2c>
   22e7c:	e3510000 	cmp	r1, #0
   22e80:	e580105c 	str	r1, [r0, #92]	; 0x5c
   22e84:	18bd8010 	popne	{r4, pc}
   22e88:	e3a02080 	mov	r2, #128	; 0x80
   22e8c:	e59f1014 	ldr	r1, [pc, #20]	; 22ea8 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x3c>
   22e90:	e59f0014 	ldr	r0, [pc, #20]	; 22eac <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x40>
   22e94:	eb0001f9 	bl	23680 <assertion_failed>
   22e98:	e3a0207e 	mov	r2, #126	; 0x7e
   22e9c:	e59f1004 	ldr	r1, [pc, #4]	; 22ea8 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x3c>
   22ea0:	e59f0008 	ldr	r0, [pc, #8]	; 22eb0 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x44>
   22ea4:	eb0001f5 	bl	23680 <assertion_failed>
   22ea8:	0003a178 	.word	0x0003a178
   22eac:	0003a1a4 	.word	0x0003a1a4
   22eb0:	0003a188 	.word	0x0003a188

00022eb4 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))>:
   22eb4:	e5903060 	ldr	r3, [r0, #96]	; 0x60
   22eb8:	e92d4010 	push	{r4, lr}
   22ebc:	e3530000 	cmp	r3, #0
   22ec0:	1a000006 	bne	22ee0 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x2c>
   22ec4:	e3510000 	cmp	r1, #0
   22ec8:	e5801060 	str	r1, [r0, #96]	; 0x60
   22ecc:	18bd8010 	popne	{r4, pc}
   22ed0:	e3a02087 	mov	r2, #135	; 0x87
   22ed4:	e59f1014 	ldr	r1, [pc, #20]	; 22ef0 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x3c>
   22ed8:	e59f0014 	ldr	r0, [pc, #20]	; 22ef4 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x40>
   22edc:	eb0001e7 	bl	23680 <assertion_failed>
   22ee0:	e3a02085 	mov	r2, #133	; 0x85
   22ee4:	e59f1004 	ldr	r1, [pc, #4]	; 22ef0 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x3c>
   22ee8:	e59f0008 	ldr	r0, [pc, #8]	; 22ef8 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x44>
   22eec:	eb0001e3 	bl	23680 <assertion_failed>
   22ef0:	0003a178 	.word	0x0003a178
   22ef4:	0003a1e0 	.word	0x0003a1e0
   22ef8:	0003a1c0 	.word	0x0003a1c0

00022efc <CScheduler::AddTask(CTask*)>:
   22efc:	e92d4070 	push	{r4, r5, r6, lr}
   22f00:	e2515000 	subs	r5, r1, #0
   22f04:	0a00001c 	beq	22f7c <CScheduler::AddTask(CTask*)+0x80>
   22f08:	e1a04000 	mov	r4, r0
   22f0c:	e5900050 	ldr	r0, [r0, #80]	; 0x50
   22f10:	e3500000 	cmp	r0, #0
   22f14:	0a00001c 	beq	22f8c <CScheduler::AddTask(CTask*)+0x90>
   22f18:	e5943000 	ldr	r3, [r4]
   22f1c:	e3530000 	cmp	r3, #0
   22f20:	11a02004 	movne	r2, r4
   22f24:	13a03000 	movne	r3, #0
   22f28:	1a000003 	bne	22f3c <CScheduler::AddTask(CTask*)+0x40>
   22f2c:	ea000009 	b	22f58 <CScheduler::AddTask(CTask*)+0x5c>
   22f30:	e5b21004 	ldr	r1, [r2, #4]!
   22f34:	e3510000 	cmp	r1, #0
   22f38:	0a000006 	beq	22f58 <CScheduler::AddTask(CTask*)+0x5c>
   22f3c:	e2833001 	add	r3, r3, #1
   22f40:	e1530000 	cmp	r3, r0
   22f44:	1afffff9 	bne	22f30 <CScheduler::AddTask(CTask*)+0x34>
   22f48:	e3530014 	cmp	r3, #20
   22f4c:	0a000003 	beq	22f60 <CScheduler::AddTask(CTask*)+0x64>
   22f50:	e2832001 	add	r2, r3, #1
   22f54:	e5842050 	str	r2, [r4, #80]	; 0x50
   22f58:	e7845103 	str	r5, [r4, r3, lsl #2]
   22f5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22f60:	eb000ab9 	bl	25a4c <CLogger::Get()>
   22f64:	e59f3028 	ldr	r3, [pc, #40]	; 22f94 <CScheduler::AddTask(CTask*)+0x98>
   22f68:	e3a02000 	mov	r2, #0
   22f6c:	e59f1024 	ldr	r1, [pc, #36]	; 22f98 <CScheduler::AddTask(CTask*)+0x9c>
   22f70:	eb0009f2 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22f74:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   22f78:	eafffff4 	b	22f50 <CScheduler::AddTask(CTask*)+0x54>
   22f7c:	e3a0208c 	mov	r2, #140	; 0x8c
   22f80:	e59f1014 	ldr	r1, [pc, #20]	; 22f9c <CScheduler::AddTask(CTask*)+0xa0>
   22f84:	e59f0014 	ldr	r0, [pc, #20]	; 22fa0 <CScheduler::AddTask(CTask*)+0xa4>
   22f88:	eb0001bc 	bl	23680 <assertion_failed>
   22f8c:	e1a03000 	mov	r3, r0
   22f90:	eaffffee 	b	22f50 <CScheduler::AddTask(CTask*)+0x54>
   22f94:	0003a20c 	.word	0x0003a20c
   22f98:	0003a170 	.word	0x0003a170
   22f9c:	0003a178 	.word	0x0003a178
   22fa0:	0003a200 	.word	0x0003a200

00022fa4 <CScheduler::RemoveTask(CTask*)>:
   22fa4:	e92d4010 	push	{r4, lr}
   22fa8:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   22fac:	e35e0000 	cmp	lr, #0
   22fb0:	0a000012 	beq	23000 <CScheduler::RemoveTask(CTask*)+0x5c>
   22fb4:	e5903000 	ldr	r3, [r0]
   22fb8:	e1510003 	cmp	r1, r3
   22fbc:	11a02000 	movne	r2, r0
   22fc0:	13a03000 	movne	r3, #0
   22fc4:	0a00000b 	beq	22ff8 <CScheduler::RemoveTask(CTask*)+0x54>
   22fc8:	e2833001 	add	r3, r3, #1
   22fcc:	e153000e 	cmp	r3, lr
   22fd0:	0a00000a 	beq	23000 <CScheduler::RemoveTask(CTask*)+0x5c>
   22fd4:	e5b2c004 	ldr	ip, [r2, #4]!
   22fd8:	e15c0001 	cmp	ip, r1
   22fdc:	1afffff9 	bne	22fc8 <CScheduler::RemoveTask(CTask*)+0x24>
   22fe0:	e3a02000 	mov	r2, #0
   22fe4:	e24ee001 	sub	lr, lr, #1
   22fe8:	e15e0003 	cmp	lr, r3
   22fec:	e7802103 	str	r2, [r0, r3, lsl #2]
   22ff0:	05803050 	streq	r3, [r0, #80]	; 0x50
   22ff4:	e8bd8010 	pop	{r4, pc}
   22ff8:	e3a03000 	mov	r3, #0
   22ffc:	eafffff7 	b	22fe0 <CScheduler::RemoveTask(CTask*)+0x3c>
   23000:	e3a020b2 	mov	r2, #178	; 0xb2
   23004:	e59f1004 	ldr	r1, [pc, #4]	; 23010 <CScheduler::RemoveTask(CTask*)+0x6c>
   23008:	e59f0004 	ldr	r0, [pc, #4]	; 23014 <CScheduler::RemoveTask(CTask*)+0x70>
   2300c:	eb00019b 	bl	23680 <assertion_failed>
   23010:	0003a178 	.word	0x0003a178
   23014:	00035260 	.word	0x00035260

00023018 <CScheduler::WakeTask(CTask**)>:
   23018:	e3510000 	cmp	r1, #0
   2301c:	e92d4010 	push	{r4, lr}
   23020:	0a000009 	beq	2304c <CScheduler::WakeTask(CTask**)+0x34>
   23024:	e3a02000 	mov	r2, #0
   23028:	e5913000 	ldr	r3, [r1]
   2302c:	e5812000 	str	r2, [r1]
   23030:	e1530002 	cmp	r3, r2
   23034:	0a000008 	beq	2305c <CScheduler::WakeTask(CTask**)+0x44>
   23038:	e5d31004 	ldrb	r1, [r3, #4]
   2303c:	e3510001 	cmp	r1, #1
   23040:	1a000009 	bne	2306c <CScheduler::WakeTask(CTask**)+0x54>
   23044:	e5c32004 	strb	r2, [r3, #4]
   23048:	e8bd8010 	pop	{r4, pc}
   2304c:	e3a020c3 	mov	r2, #195	; 0xc3
   23050:	e59f1024 	ldr	r1, [pc, #36]	; 2307c <CScheduler::WakeTask(CTask**)+0x64>
   23054:	e59f0024 	ldr	r0, [pc, #36]	; 23080 <CScheduler::WakeTask(CTask**)+0x68>
   23058:	eb000188 	bl	23680 <assertion_failed>
   2305c:	e3a020cf 	mov	r2, #207	; 0xcf
   23060:	e59f1014 	ldr	r1, [pc, #20]	; 2307c <CScheduler::WakeTask(CTask**)+0x64>
   23064:	e59f0018 	ldr	r0, [pc, #24]	; 23084 <CScheduler::WakeTask(CTask**)+0x6c>
   23068:	eb000184 	bl	23680 <assertion_failed>
   2306c:	e3a020d0 	mov	r2, #208	; 0xd0
   23070:	e59f1004 	ldr	r1, [pc, #4]	; 2307c <CScheduler::WakeTask(CTask**)+0x64>
   23074:	e59f000c 	ldr	r0, [pc, #12]	; 23088 <CScheduler::WakeTask(CTask**)+0x70>
   23078:	eb000180 	bl	23680 <assertion_failed>
   2307c:	0003a178 	.word	0x0003a178
   23080:	0003a22c 	.word	0x0003a22c
   23084:	0003a200 	.word	0x0003a200
   23088:	0003a238 	.word	0x0003a238

0002308c <CScheduler::GetNextTask()>:
   2308c:	e92d4070 	push	{r4, r5, r6, lr}
   23090:	e1a06000 	mov	r6, r0
   23094:	e5904058 	ldr	r4, [r0, #88]	; 0x58
   23098:	eb001738 	bl	28d80 <CTimer::Get()>
   2309c:	eb00147a 	bl	2828c <CTimer::GetClockTicks()>
   230a0:	e5963050 	ldr	r3, [r6, #80]	; 0x50
   230a4:	e3540013 	cmp	r4, #19
   230a8:	83a04000 	movhi	r4, #0
   230ac:	e3530000 	cmp	r3, #0
   230b0:	0a000015 	beq	2310c <CScheduler::GetNextTask()+0x80>
   230b4:	e3a01001 	mov	r1, #1
   230b8:	e2844001 	add	r4, r4, #1
   230bc:	e1540003 	cmp	r4, r3
   230c0:	23a04000 	movcs	r4, #0
   230c4:	e7965104 	ldr	r5, [r6, r4, lsl #2]
   230c8:	e3550000 	cmp	r5, #0
   230cc:	0a00000b 	beq	23100 <CScheduler::GetNextTask()+0x74>
   230d0:	e5d52004 	ldrb	r2, [r5, #4]
   230d4:	e3520003 	cmp	r2, #3
   230d8:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   230dc:	ea00001c 	b	23154 <CScheduler::GetNextTask()+0xc8>
   230e0:	00023110 	.word	0x00023110
   230e4:	00023100 	.word	0x00023100
   230e8:	000230f0 	.word	0x000230f0
   230ec:	00023118 	.word	0x00023118
   230f0:	e5952008 	ldr	r2, [r5, #8]
   230f4:	e0422000 	sub	r2, r2, r0
   230f8:	e3520000 	cmp	r2, #0
   230fc:	da000018 	ble	23164 <CScheduler::GetNextTask()+0xd8>
   23100:	e2811001 	add	r1, r1, #1
   23104:	e1510003 	cmp	r1, r3
   23108:	9affffea 	bls	230b8 <CScheduler::GetNextTask()+0x2c>
   2310c:	e3a04014 	mov	r4, #20
   23110:	e1a00004 	mov	r0, r4
   23114:	e8bd8070 	pop	{r4, r5, r6, pc}
   23118:	e5963060 	ldr	r3, [r6, #96]	; 0x60
   2311c:	e3530000 	cmp	r3, #0
   23120:	0a000001 	beq	2312c <CScheduler::GetNextTask()+0xa0>
   23124:	e1a00005 	mov	r0, r5
   23128:	e12fff33 	blx	r3
   2312c:	e3a04014 	mov	r4, #20
   23130:	e1a00006 	mov	r0, r6
   23134:	e1a01005 	mov	r1, r5
   23138:	ebffff99 	bl	22fa4 <CScheduler::RemoveTask(CTask*)>
   2313c:	e5953000 	ldr	r3, [r5]
   23140:	e1a00005 	mov	r0, r5
   23144:	e5933004 	ldr	r3, [r3, #4]
   23148:	e12fff33 	blx	r3
   2314c:	e1a00004 	mov	r0, r4
   23150:	e8bd8070 	pop	{r4, r5, r6, pc}
   23154:	e59f2014 	ldr	r2, [pc, #20]	; 23170 <CScheduler::GetNextTask()+0xe4>
   23158:	e59f1014 	ldr	r1, [pc, #20]	; 23174 <CScheduler::GetNextTask()+0xe8>
   2315c:	e59f0014 	ldr	r0, [pc, #20]	; 23178 <CScheduler::GetNextTask()+0xec>
   23160:	eb000146 	bl	23680 <assertion_failed>
   23164:	e3a03000 	mov	r3, #0
   23168:	e5c53004 	strb	r3, [r5, #4]
   2316c:	eaffffe7 	b	23110 <CScheduler::GetNextTask()+0x84>
   23170:	00000103 	.word	0x00000103
   23174:	0003a178 	.word	0x0003a178
   23178:	00035260 	.word	0x00035260

0002317c <CScheduler::Yield()>:
   2317c:	e92d4070 	push	{r4, r5, r6, lr}
   23180:	e1a04000 	mov	r4, r0
   23184:	e1a00004 	mov	r0, r4
   23188:	ebffffbf 	bl	2308c <CScheduler::GetNextTask()>
   2318c:	e3500014 	cmp	r0, #20
   23190:	e5840058 	str	r0, [r4, #88]	; 0x58
   23194:	1a000006 	bne	231b4 <CScheduler::Yield()+0x38>
   23198:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   2319c:	e3530000 	cmp	r3, #0
   231a0:	1afffff7 	bne	23184 <CScheduler::Yield()+0x8>
   231a4:	e3a02037 	mov	r2, #55	; 0x37
   231a8:	e59f10a0 	ldr	r1, [pc, #160]	; 23250 <CScheduler::Yield()+0xd4>
   231ac:	e59f00a0 	ldr	r0, [pc, #160]	; 23254 <CScheduler::Yield()+0xd8>
   231b0:	eb000132 	bl	23680 <assertion_failed>
   231b4:	e3500013 	cmp	r0, #19
   231b8:	8a000018 	bhi	23220 <CScheduler::Yield()+0xa4>
   231bc:	e7940100 	ldr	r0, [r4, r0, lsl #2]
   231c0:	e3500000 	cmp	r0, #0
   231c4:	0a000019 	beq	23230 <CScheduler::Yield()+0xb4>
   231c8:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   231cc:	e1500003 	cmp	r0, r3
   231d0:	08bd8070 	popeq	{r4, r5, r6, pc}
   231d4:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   231d8:	e5840054 	str	r0, [r4, #84]	; 0x54
   231dc:	e3520000 	cmp	r2, #0
   231e0:	e283500c 	add	r5, r3, #12
   231e4:	e280400c 	add	r4, r0, #12
   231e8:	0a000000 	beq	231f0 <CScheduler::Yield()+0x74>
   231ec:	e12fff32 	blx	r2
   231f0:	e3550000 	cmp	r5, #0
   231f4:	0a000011 	beq	23240 <CScheduler::Yield()+0xc4>
   231f8:	e3540000 	cmp	r4, #0
   231fc:	0a000003 	beq	23210 <CScheduler::Yield()+0x94>
   23200:	e1a01004 	mov	r1, r4
   23204:	e1a00005 	mov	r0, r5
   23208:	e8bd4070 	pop	{r4, r5, r6, lr}
   2320c:	ea00007b 	b	23400 <TaskSwitch>
   23210:	e3a0204c 	mov	r2, #76	; 0x4c
   23214:	e59f1034 	ldr	r1, [pc, #52]	; 23250 <CScheduler::Yield()+0xd4>
   23218:	e59f0038 	ldr	r0, [pc, #56]	; 23258 <CScheduler::Yield()+0xdc>
   2321c:	eb000117 	bl	23680 <assertion_failed>
   23220:	e3a0203a 	mov	r2, #58	; 0x3a
   23224:	e59f1024 	ldr	r1, [pc, #36]	; 23250 <CScheduler::Yield()+0xd4>
   23228:	e59f002c 	ldr	r0, [pc, #44]	; 2325c <CScheduler::Yield()+0xe0>
   2322c:	eb000113 	bl	23680 <assertion_failed>
   23230:	e3a0203c 	mov	r2, #60	; 0x3c
   23234:	e59f1014 	ldr	r1, [pc, #20]	; 23250 <CScheduler::Yield()+0xd4>
   23238:	e59f0020 	ldr	r0, [pc, #32]	; 23260 <CScheduler::Yield()+0xe4>
   2323c:	eb00010f 	bl	23680 <assertion_failed>
   23240:	e3a0204b 	mov	r2, #75	; 0x4b
   23244:	e59f1004 	ldr	r1, [pc, #4]	; 23250 <CScheduler::Yield()+0xd4>
   23248:	e59f0014 	ldr	r0, [pc, #20]	; 23264 <CScheduler::Yield()+0xe8>
   2324c:	eb00010b 	bl	23680 <assertion_failed>
   23250:	0003a178 	.word	0x0003a178
   23254:	0003a260 	.word	0x0003a260
   23258:	0003a2a4 	.word	0x0003a2a4
   2325c:	0003a270 	.word	0x0003a270
   23260:	0003a288 	.word	0x0003a288
   23264:	0003a294 	.word	0x0003a294

00023268 <CScheduler::usSleep(unsigned int)>:
   23268:	e92d4070 	push	{r4, r5, r6, lr}
   2326c:	e2514000 	subs	r4, r1, #0
   23270:	08bd8070 	popeq	{r4, r5, r6, pc}
   23274:	e1a05000 	mov	r5, r0
   23278:	eb0016c0 	bl	28d80 <CTimer::Get()>
   2327c:	eb001402 	bl	2828c <CTimer::GetClockTicks()>
   23280:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   23284:	e3530000 	cmp	r3, #0
   23288:	0a000009 	beq	232b4 <CScheduler::usSleep(unsigned int)+0x4c>
   2328c:	e5d32004 	ldrb	r2, [r3, #4]
   23290:	e3520000 	cmp	r2, #0
   23294:	1a00000a 	bne	232c4 <CScheduler::usSleep(unsigned int)+0x5c>
   23298:	e3a02002 	mov	r2, #2
   2329c:	e0841000 	add	r1, r4, r0
   232a0:	e5831008 	str	r1, [r3, #8]
   232a4:	e1a00005 	mov	r0, r5
   232a8:	e8bd4070 	pop	{r4, r5, r6, lr}
   232ac:	e5c32004 	strb	r2, [r3, #4]
   232b0:	eaffffb1 	b	2317c <CScheduler::Yield()>
   232b4:	e3a0206e 	mov	r2, #110	; 0x6e
   232b8:	e59f1014 	ldr	r1, [pc, #20]	; 232d4 <CScheduler::usSleep(unsigned int)+0x6c>
   232bc:	e59f0014 	ldr	r0, [pc, #20]	; 232d8 <CScheduler::usSleep(unsigned int)+0x70>
   232c0:	eb0000ee 	bl	23680 <assertion_failed>
   232c4:	e3a0206f 	mov	r2, #111	; 0x6f
   232c8:	e59f1004 	ldr	r1, [pc, #4]	; 232d4 <CScheduler::usSleep(unsigned int)+0x6c>
   232cc:	e59f0008 	ldr	r0, [pc, #8]	; 232dc <CScheduler::usSleep(unsigned int)+0x74>
   232d0:	eb0000ea 	bl	23680 <assertion_failed>
   232d4:	0003a178 	.word	0x0003a178
   232d8:	0003a2b4 	.word	0x0003a2b4
   232dc:	0003a2c4 	.word	0x0003a2c4

000232e0 <CScheduler::Sleep(unsigned int)>:
   232e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   232e4:	e59f5040 	ldr	r5, [pc, #64]	; 2332c <CScheduler::Sleep(unsigned int)+0x4c>
   232e8:	e1a04001 	mov	r4, r1
   232ec:	e1510005 	cmp	r1, r5
   232f0:	e1a06000 	mov	r6, r0
   232f4:	9a000007 	bls	23318 <CScheduler::Sleep(unsigned int)+0x38>
   232f8:	e59f7030 	ldr	r7, [pc, #48]	; 23330 <CScheduler::Sleep(unsigned int)+0x50>
   232fc:	e2444c07 	sub	r4, r4, #1792	; 0x700
   23300:	e1a01007 	mov	r1, r7
   23304:	e1a00006 	mov	r0, r6
   23308:	e2444008 	sub	r4, r4, #8
   2330c:	ebffffd5 	bl	23268 <CScheduler::usSleep(unsigned int)>
   23310:	e1540005 	cmp	r4, r5
   23314:	8afffff8 	bhi	232fc <CScheduler::Sleep(unsigned int)+0x1c>
   23318:	e59f1014 	ldr	r1, [pc, #20]	; 23334 <CScheduler::Sleep(unsigned int)+0x54>
   2331c:	e1a00006 	mov	r0, r6
   23320:	e0010491 	mul	r1, r1, r4
   23324:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   23328:	eaffffce 	b	23268 <CScheduler::usSleep(unsigned int)>
   2332c:	00000708 	.word	0x00000708
   23330:	6b49d200 	.word	0x6b49d200
   23334:	000f4240 	.word	0x000f4240

00023338 <CScheduler::MsSleep(unsigned int)>:
   23338:	e3510000 	cmp	r1, #0
   2333c:	012fff1e 	bxeq	lr
   23340:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   23344:	e0010193 	mul	r1, r3, r1
   23348:	eaffffc6 	b	23268 <CScheduler::usSleep(unsigned int)>

0002334c <CScheduler::BlockTask(CTask**)>:
   2334c:	e3510000 	cmp	r1, #0
   23350:	e92d4010 	push	{r4, lr}
   23354:	0a00000b 	beq	23388 <CScheduler::BlockTask(CTask**)+0x3c>
   23358:	e5902054 	ldr	r2, [r0, #84]	; 0x54
   2335c:	e5812000 	str	r2, [r1]
   23360:	e5903054 	ldr	r3, [r0, #84]	; 0x54
   23364:	e3530000 	cmp	r3, #0
   23368:	0a00000a 	beq	23398 <CScheduler::BlockTask(CTask**)+0x4c>
   2336c:	e5d32004 	ldrb	r2, [r3, #4]
   23370:	e3520000 	cmp	r2, #0
   23374:	1a00000b 	bne	233a8 <CScheduler::BlockTask(CTask**)+0x5c>
   23378:	e8bd4010 	pop	{r4, lr}
   2337c:	e3a02001 	mov	r2, #1
   23380:	e5c32004 	strb	r2, [r3, #4]
   23384:	eaffff7c 	b	2317c <CScheduler::Yield()>
   23388:	e3a020b7 	mov	r2, #183	; 0xb7
   2338c:	e59f1024 	ldr	r1, [pc, #36]	; 233b8 <CScheduler::BlockTask(CTask**)+0x6c>
   23390:	e59f0024 	ldr	r0, [pc, #36]	; 233bc <CScheduler::BlockTask(CTask**)+0x70>
   23394:	eb0000b9 	bl	23680 <assertion_failed>
   23398:	e3a020ba 	mov	r2, #186	; 0xba
   2339c:	e59f1014 	ldr	r1, [pc, #20]	; 233b8 <CScheduler::BlockTask(CTask**)+0x6c>
   233a0:	e59f0018 	ldr	r0, [pc, #24]	; 233c0 <CScheduler::BlockTask(CTask**)+0x74>
   233a4:	eb0000b5 	bl	23680 <assertion_failed>
   233a8:	e3a020bb 	mov	r2, #187	; 0xbb
   233ac:	e59f1004 	ldr	r1, [pc, #4]	; 233b8 <CScheduler::BlockTask(CTask**)+0x6c>
   233b0:	e59f000c 	ldr	r0, [pc, #12]	; 233c4 <CScheduler::BlockTask(CTask**)+0x78>
   233b4:	eb0000b1 	bl	23680 <assertion_failed>
   233b8:	0003a178 	.word	0x0003a178
   233bc:	0003a22c 	.word	0x0003a22c
   233c0:	0003a2b4 	.word	0x0003a2b4
   233c4:	0003a2c4 	.word	0x0003a2c4

000233c8 <CScheduler::Get()>:
   233c8:	e59f3020 	ldr	r3, [pc, #32]	; 233f0 <CScheduler::Get()+0x28>
   233cc:	e5930000 	ldr	r0, [r3]
   233d0:	e3500000 	cmp	r0, #0
   233d4:	0a000000 	beq	233dc <CScheduler::Get()+0x14>
   233d8:	e12fff1e 	bx	lr
   233dc:	e92d4010 	push	{r4, lr}
   233e0:	e59f200c 	ldr	r2, [pc, #12]	; 233f4 <CScheduler::Get()+0x2c>
   233e4:	e59f100c 	ldr	r1, [pc, #12]	; 233f8 <CScheduler::Get()+0x30>
   233e8:	e59f000c 	ldr	r0, [pc, #12]	; 233fc <CScheduler::Get()+0x34>
   233ec:	eb0000a3 	bl	23680 <assertion_failed>
   233f0:	0003e380 	.word	0x0003e380
   233f4:	0000010d 	.word	0x0000010d
   233f8:	0003a178 	.word	0x0003a178
   233fc:	00038ecc 	.word	0x00038ecc

00023400 <TaskSwitch>:
   23400:	eef82a10 	vmrs	r2, fpexc
   23404:	eef13a10 	vmrs	r3, fpscr
   23408:	e8a07ffd 	stmia	r0!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   2340c:	ec800b20 	vstmia	r0, {d0-d15}
   23410:	e8b17ffd 	ldm	r1!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   23414:	eee82a10 	vmsr	fpexc, r2
   23418:	eee13a10 	vmsr	fpscr, r3
   2341c:	ec910b20 	vldmia	r1, {d0-d15}
   23420:	e12fff1e 	bx	lr

00023424 <CSynchronizationEvent::CSynchronizationEvent(bool)>:
   23424:	e3a02000 	mov	r2, #0
   23428:	e5c01000 	strb	r1, [r0]
   2342c:	e5802004 	str	r2, [r0, #4]
   23430:	e12fff1e 	bx	lr

00023434 <CSynchronizationEvent::~CSynchronizationEvent()>:
   23434:	e5903004 	ldr	r3, [r0, #4]
   23438:	e3530000 	cmp	r3, #0
   2343c:	1a000000 	bne	23444 <CSynchronizationEvent::~CSynchronizationEvent()+0x10>
   23440:	e12fff1e 	bx	lr
   23444:	e92d4010 	push	{r4, lr}
   23448:	e3a02023 	mov	r2, #35	; 0x23
   2344c:	e59f1004 	ldr	r1, [pc, #4]	; 23458 <CSynchronizationEvent::~CSynchronizationEvent()+0x24>
   23450:	e59f0004 	ldr	r0, [pc, #4]	; 2345c <CSynchronizationEvent::~CSynchronizationEvent()+0x28>
   23454:	eb000089 	bl	23680 <assertion_failed>
   23458:	0003a2f0 	.word	0x0003a2f0
   2345c:	0003a30c 	.word	0x0003a30c

00023460 <CSynchronizationEvent::GetState()>:
   23460:	e5d00000 	ldrb	r0, [r0]
   23464:	e12fff1e 	bx	lr

00023468 <CSynchronizationEvent::Clear()>:
   23468:	e3a03000 	mov	r3, #0
   2346c:	e5c03000 	strb	r3, [r0]
   23470:	e12fff1e 	bx	lr

00023474 <CSynchronizationEvent::Set()>:
   23474:	e5d03000 	ldrb	r3, [r0]
   23478:	e3530000 	cmp	r3, #0
   2347c:	112fff1e 	bxne	lr
   23480:	e3a02001 	mov	r2, #1
   23484:	e5903004 	ldr	r3, [r0, #4]
   23488:	e5c02000 	strb	r2, [r0]
   2348c:	e3530000 	cmp	r3, #0
   23490:	012fff1e 	bxeq	lr
   23494:	e92d4010 	push	{r4, lr}
   23498:	e1a04000 	mov	r4, r0
   2349c:	ebffffc9 	bl	233c8 <CScheduler::Get()>
   234a0:	e2841004 	add	r1, r4, #4
   234a4:	e8bd4010 	pop	{r4, lr}
   234a8:	eafffeda 	b	23018 <CScheduler::WakeTask(CTask**)>

000234ac <CSynchronizationEvent::Wait()>:
   234ac:	e5d03000 	ldrb	r3, [r0]
   234b0:	e3530000 	cmp	r3, #0
   234b4:	112fff1e 	bxne	lr
   234b8:	e5903004 	ldr	r3, [r0, #4]
   234bc:	e92d4010 	push	{r4, lr}
   234c0:	e3530000 	cmp	r3, #0
   234c4:	e1a04000 	mov	r4, r0
   234c8:	1a000009 	bne	234f4 <CSynchronizationEvent::Wait()+0x48>
   234cc:	ebffffbd 	bl	233c8 <CScheduler::Get()>
   234d0:	e2841004 	add	r1, r4, #4
   234d4:	ebffff9c 	bl	2334c <CScheduler::BlockTask(CTask**)>
   234d8:	e5d43000 	ldrb	r3, [r4]
   234dc:	e3530000 	cmp	r3, #0
   234e0:	18bd8010 	popne	{r4, pc}
   234e4:	e3a0204c 	mov	r2, #76	; 0x4c
   234e8:	e59f1014 	ldr	r1, [pc, #20]	; 23504 <CSynchronizationEvent::Wait()+0x58>
   234ec:	e59f0014 	ldr	r0, [pc, #20]	; 23508 <CSynchronizationEvent::Wait()+0x5c>
   234f0:	eb000062 	bl	23680 <assertion_failed>
   234f4:	e3a02049 	mov	r2, #73	; 0x49
   234f8:	e59f1004 	ldr	r1, [pc, #4]	; 23504 <CSynchronizationEvent::Wait()+0x58>
   234fc:	e59f0008 	ldr	r0, [pc, #8]	; 2350c <CSynchronizationEvent::Wait()+0x60>
   23500:	eb00005e 	bl	23680 <assertion_failed>
   23504:	0003a2f0 	.word	0x0003a2f0
   23508:	0003a320 	.word	0x0003a320
   2350c:	0003a30c 	.word	0x0003a30c

00023510 <CActLED::CActLED(bool)>:
   23510:	e3a03000 	mov	r3, #0
   23514:	e59f2088 	ldr	r2, [pc, #136]	; 235a4 <CActLED::CActLED(bool)+0x94>
   23518:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2351c:	e5803000 	str	r3, [r0]
   23520:	e5803004 	str	r3, [r0, #4]
   23524:	e1a07001 	mov	r7, r1
   23528:	e5820000 	str	r0, [r2]
   2352c:	e1a05000 	mov	r5, r0
   23530:	eb000c3f 	bl	26634 <CMachineInfo::Get()>
   23534:	eb000b68 	bl	262dc <CMachineInfo::GetActLEDInfo() const>
   23538:	e2106080 	ands	r6, r0, #128	; 0x80
   2353c:	e1a04000 	mov	r4, r0
   23540:	1a00000f 	bne	23584 <CActLED::CActLED(bool)+0x74>
   23544:	e3a00028 	mov	r0, #40	; 0x28
   23548:	eb001a69 	bl	29ef4 <operator new(unsigned int)>
   2354c:	e1a07000 	mov	r7, r0
   23550:	e1a03006 	mov	r3, r6
   23554:	e3a02001 	mov	r2, #1
   23558:	e204103f 	and	r1, r4, #63	; 0x3f
   2355c:	eb0003cb 	bl	24490 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   23560:	e5857000 	str	r7, [r5]
   23564:	e1a04324 	lsr	r4, r4, #6
   23568:	e2244001 	eor	r4, r4, #1
   2356c:	e2044001 	and	r4, r4, #1
   23570:	e1a00005 	mov	r0, r5
   23574:	e5c54008 	strb	r4, [r5, #8]
   23578:	eb00001b 	bl	235ec <CActLED::Off()>
   2357c:	e1a00005 	mov	r0, r5
   23580:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23584:	e3a00014 	mov	r0, #20
   23588:	eb001a59 	bl	29ef4 <operator new(unsigned int)>
   2358c:	e1a06000 	mov	r6, r0
   23590:	e1a02007 	mov	r2, r7
   23594:	e204103f 	and	r1, r4, #63	; 0x3f
   23598:	eb001893 	bl	297ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   2359c:	e5856004 	str	r6, [r5, #4]
   235a0:	eaffffef 	b	23564 <CActLED::CActLED(bool)+0x54>
   235a4:	0003e384 	.word	0x0003e384

000235a8 <CActLED::~CActLED()>:
   235a8:	e3a02000 	mov	r2, #0
   235ac:	e59f3004 	ldr	r3, [pc, #4]	; 235b8 <CActLED::~CActLED()+0x10>
   235b0:	e5832000 	str	r2, [r3]
   235b4:	e12fff1e 	bx	lr
   235b8:	0003e384 	.word	0x0003e384

000235bc <CActLED::On()>:
   235bc:	e5903000 	ldr	r3, [r0]
   235c0:	e3530000 	cmp	r3, #0
   235c4:	0a000002 	beq	235d4 <CActLED::On()+0x18>
   235c8:	e5d01008 	ldrb	r1, [r0, #8]
   235cc:	e1a00003 	mov	r0, r3
   235d0:	ea000453 	b	24724 <CGPIOPin::Write(unsigned int)>
   235d4:	e5903004 	ldr	r3, [r0, #4]
   235d8:	e3530000 	cmp	r3, #0
   235dc:	012fff1e 	bxeq	lr
   235e0:	e5d01008 	ldrb	r1, [r0, #8]
   235e4:	e1a00003 	mov	r0, r3
   235e8:	ea0018d8 	b	29950 <CVirtualGPIOPin::Write(unsigned int)>

000235ec <CActLED::Off()>:
   235ec:	e5903000 	ldr	r3, [r0]
   235f0:	e3530000 	cmp	r3, #0
   235f4:	0a000003 	beq	23608 <CActLED::Off()+0x1c>
   235f8:	e5d01008 	ldrb	r1, [r0, #8]
   235fc:	e1a00003 	mov	r0, r3
   23600:	e2211001 	eor	r1, r1, #1
   23604:	ea000446 	b	24724 <CGPIOPin::Write(unsigned int)>
   23608:	e5903004 	ldr	r3, [r0, #4]
   2360c:	e3530000 	cmp	r3, #0
   23610:	012fff1e 	bxeq	lr
   23614:	e5d01008 	ldrb	r1, [r0, #8]
   23618:	e1a00003 	mov	r0, r3
   2361c:	e2211001 	eor	r1, r1, #1
   23620:	ea0018ca 	b	29950 <CVirtualGPIOPin::Write(unsigned int)>

00023624 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   23624:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23628:	e2516000 	subs	r6, r1, #0
   2362c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   23630:	e1a08003 	mov	r8, r3
   23634:	e1a07002 	mov	r7, r2
   23638:	e1a05000 	mov	r5, r0
   2363c:	e3a04001 	mov	r4, #1
   23640:	e1a00005 	mov	r0, r5
   23644:	ebffffdc 	bl	235bc <CActLED::On()>
   23648:	e1a00007 	mov	r0, r7
   2364c:	eb001592 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
   23650:	e1a00005 	mov	r0, r5
   23654:	ebffffe4 	bl	235ec <CActLED::Off()>
   23658:	e2844001 	add	r4, r4, #1
   2365c:	e1a00008 	mov	r0, r8
   23660:	eb00158d 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
   23664:	e1560004 	cmp	r6, r4
   23668:	2afffff4 	bcs	23640 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
   2366c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00023670 <CActLED::Get()>:
   23670:	e59f3004 	ldr	r3, [pc, #4]	; 2367c <CActLED::Get()+0xc>
   23674:	e5930000 	ldr	r0, [r3]
   23678:	e12fff1e 	bx	lr
   2367c:	0003e384 	.word	0x0003e384

00023680 <assertion_failed>:
   23680:	e92d4080 	push	{r7, lr}
   23684:	e1a05000 	mov	r5, r0
   23688:	e24dd018 	sub	sp, sp, #24
   2368c:	e1a06001 	mov	r6, r1
   23690:	e1a07002 	mov	r7, r2
   23694:	e1a0400d 	mov	r4, sp
   23698:	eb001ea7 	bl	2b13c <CInterruptSystem::DisableFIQ()>
   2369c:	f1080040 	cpsie	f
   236a0:	e28d0008 	add	r0, sp, #8
   236a4:	eb000cce 	bl	269e4 <CString::CString()>
   236a8:	e1a03007 	mov	r3, r7
   236ac:	e1a02006 	mov	r2, r6
   236b0:	e59f1044 	ldr	r1, [pc, #68]	; 236fc <assertion_failed+0x7c>
   236b4:	e28d0008 	add	r0, sp, #8
   236b8:	eb00120c 	bl	27ef0 <CString::Format(char const*, ...)>
   236bc:	e28d0008 	add	r0, sp, #8
   236c0:	eb000cdd 	bl	26a3c <CString::operator char const*() const>
   236c4:	e1a01000 	mov	r1, r0
   236c8:	e1a00004 	mov	r0, r4
   236cc:	eb0001a5 	bl	23d68 <debug_stacktrace(unsigned int const*, char const*)>
   236d0:	eb0008dd 	bl	25a4c <CLogger::Get()>
   236d4:	e1a04000 	mov	r4, r0
   236d8:	e28d0008 	add	r0, sp, #8
   236dc:	eb000cd6 	bl	26a3c <CString::operator char const*() const>
   236e0:	e58d5000 	str	r5, [sp]
   236e4:	e1a01000 	mov	r1, r0
   236e8:	e59f3010 	ldr	r3, [pc, #16]	; 23700 <assertion_failed+0x80>
   236ec:	e1a00004 	mov	r0, r4
   236f0:	e3a02000 	mov	r2, #0
   236f4:	eb000811 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   236f8:	eafffffe 	b	236f8 <assertion_failed+0x78>
   236fc:	0003a32c 	.word	0x0003a32c
   23700:	0003a334 	.word	0x0003a334

00023704 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   23704:	e92d4010 	push	{r4, lr}
   23708:	e1a04000 	mov	r4, r0
   2370c:	e1a02001 	mov	r2, r1
   23710:	e3a01008 	mov	r1, #8
   23714:	eb001f25 	bl	2b3b0 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   23718:	e1a00004 	mov	r0, r4
   2371c:	e8bd8010 	pop	{r4, pc}

00023720 <CBcmPropertyTags::~CBcmPropertyTags()>:
   23720:	e92d4010 	push	{r4, lr}
   23724:	e1a04000 	mov	r4, r0
   23728:	eb001f23 	bl	2b3bc <CBcmMailBox::~CBcmMailBox()>
   2372c:	e1a00004 	mov	r0, r4
   23730:	e8bd8010 	pop	{r4, pc}

00023734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   23734:	e92d4070 	push	{r4, r5, r6, lr}
   23738:	e2524000 	subs	r4, r2, #0
   2373c:	0a000030 	beq	23804 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd0>
   23740:	e353000f 	cmp	r3, #15
   23744:	9a000032 	bls	23814 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   23748:	e59d2010 	ldr	r2, [sp, #16]
   2374c:	e243e00c 	sub	lr, r3, #12
   23750:	e3c2c102 	bic	ip, r2, #-2147483648	; 0x80000000
   23754:	e1a0582e 	lsr	r5, lr, #16
   23758:	e1a0642e 	lsr	r6, lr, #8
   2375c:	e5c4e004 	strb	lr, [r4, #4]
   23760:	e1a02003 	mov	r2, r3
   23764:	e1a0ec2e 	lsr	lr, lr, #24
   23768:	e1a0342c 	lsr	r3, ip, #8
   2376c:	e5c41000 	strb	r1, [r4]
   23770:	e5c45006 	strb	r5, [r4, #6]
   23774:	e5c4e007 	strb	lr, [r4, #7]
   23778:	e1a0582c 	lsr	r5, ip, #16
   2377c:	e1a0ec2c 	lsr	lr, ip, #24
   23780:	e5c4c008 	strb	ip, [r4, #8]
   23784:	e5c43009 	strb	r3, [r4, #9]
   23788:	e1a0c421 	lsr	ip, r1, #8
   2378c:	e1a03821 	lsr	r3, r1, #16
   23790:	e1a01c21 	lsr	r1, r1, #24
   23794:	e5c41003 	strb	r1, [r4, #3]
   23798:	e5c46005 	strb	r6, [r4, #5]
   2379c:	e5c4500a 	strb	r5, [r4, #10]
   237a0:	e5c4e00b 	strb	lr, [r4, #11]
   237a4:	e5c4c001 	strb	ip, [r4, #1]
   237a8:	e5c43002 	strb	r3, [r4, #2]
   237ac:	e1a01004 	mov	r1, r4
   237b0:	eb00001c 	bl	23828 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   237b4:	e3500000 	cmp	r0, #0
   237b8:	08bd8070 	popeq	{r4, r5, r6, pc}
   237bc:	e5d42009 	ldrb	r2, [r4, #9]
   237c0:	e5d43008 	ldrb	r3, [r4, #8]
   237c4:	e5d4100a 	ldrb	r1, [r4, #10]
   237c8:	e1833402 	orr	r3, r3, r2, lsl #8
   237cc:	e5d4200b 	ldrb	r2, [r4, #11]
   237d0:	e1833801 	orr	r3, r3, r1, lsl #16
   237d4:	e1833c02 	orr	r3, r3, r2, lsl #24
   237d8:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   237dc:	e2930000 	adds	r0, r3, #0
   237e0:	e1a0c423 	lsr	ip, r3, #8
   237e4:	e1a01823 	lsr	r1, r3, #16
   237e8:	e1a02c23 	lsr	r2, r3, #24
   237ec:	13a00001 	movne	r0, #1
   237f0:	e5c43008 	strb	r3, [r4, #8]
   237f4:	e5c4c009 	strb	ip, [r4, #9]
   237f8:	e5c4100a 	strb	r1, [r4, #10]
   237fc:	e5c4200b 	strb	r2, [r4, #11]
   23800:	e8bd8070 	pop	{r4, r5, r6, pc}
   23804:	e59f1018 	ldr	r1, [pc, #24]	; 23824 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   23808:	e3a02033 	mov	r2, #51	; 0x33
   2380c:	e2810014 	add	r0, r1, #20
   23810:	ebffff9a 	bl	23680 <assertion_failed>
   23814:	e59f1008 	ldr	r1, [pc, #8]	; 23824 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   23818:	e3a02034 	mov	r2, #52	; 0x34
   2381c:	e2810020 	add	r0, r1, #32
   23820:	ebffff96 	bl	23680 <assertion_failed>
   23824:	0003a34c 	.word	0x0003a34c

00023828 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   23828:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2382c:	e2519000 	subs	r9, r1, #0
   23830:	0a000034 	beq	23908 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
   23834:	e352000f 	cmp	r2, #15
   23838:	e1a07002 	mov	r7, r2
   2383c:	9a000035 	bls	23918 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   23840:	e282600c 	add	r6, r2, #12
   23844:	e2165003 	ands	r5, r6, #3
   23848:	1a000036 	bne	23928 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x100>
   2384c:	e1a0a000 	mov	sl, r0
   23850:	e1a00005 	mov	r0, r5
   23854:	eb001c96 	bl	2aab4 <CMemorySystem::GetCoherentPage(unsigned int)>
   23858:	e1a01426 	lsr	r1, r6, #8
   2385c:	e1a02826 	lsr	r2, r6, #16
   23860:	e1a03c26 	lsr	r3, r6, #24
   23864:	e2808008 	add	r8, r0, #8
   23868:	e5c06000 	strb	r6, [r0]
   2386c:	e5c05004 	strb	r5, [r0, #4]
   23870:	e5c05005 	strb	r5, [r0, #5]
   23874:	e5c05006 	strb	r5, [r0, #6]
   23878:	e5c05007 	strb	r5, [r0, #7]
   2387c:	e5c01001 	strb	r1, [r0, #1]
   23880:	e5c02002 	strb	r2, [r0, #2]
   23884:	e5c03003 	strb	r3, [r0, #3]
   23888:	e1a04000 	mov	r4, r0
   2388c:	e1a02007 	mov	r2, r7
   23890:	e1a00008 	mov	r0, r8
   23894:	e1a01009 	mov	r1, r9
   23898:	eb0017bc 	bl	29790 <memcpy>
   2389c:	e7885007 	str	r5, [r8, r7]
   238a0:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   238a4:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
   238a8:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
   238ac:	e1a0000a 	mov	r0, sl
   238b0:	e1a01006 	mov	r1, r6
   238b4:	eb001ec1 	bl	2b3c0 <CBcmMailBox::WriteRead(unsigned int)>
   238b8:	e1560000 	cmp	r6, r0
   238bc:	0a000001 	beq	238c8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
   238c0:	e3a00000 	mov	r0, #0
   238c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   238c8:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   238cc:	e5d42005 	ldrb	r2, [r4, #5]
   238d0:	e5d43004 	ldrb	r3, [r4, #4]
   238d4:	e5d41006 	ldrb	r1, [r4, #6]
   238d8:	e1833402 	orr	r3, r3, r2, lsl #8
   238dc:	e5d42007 	ldrb	r2, [r4, #7]
   238e0:	e1833801 	orr	r3, r3, r1, lsl #16
   238e4:	e1833c02 	orr	r3, r3, r2, lsl #24
   238e8:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   238ec:	1afffff3 	bne	238c0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x98>
   238f0:	e1a02007 	mov	r2, r7
   238f4:	e1a01008 	mov	r1, r8
   238f8:	e1a00009 	mov	r0, r9
   238fc:	eb0017a3 	bl	29790 <memcpy>
   23900:	e3a00001 	mov	r0, #1
   23904:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23908:	e59f1028 	ldr	r1, [pc, #40]	; 23938 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   2390c:	e3a0204b 	mov	r2, #75	; 0x4b
   23910:	e2810048 	add	r0, r1, #72	; 0x48
   23914:	ebffff59 	bl	23680 <assertion_failed>
   23918:	e59f1018 	ldr	r1, [pc, #24]	; 23938 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   2391c:	e3a0204c 	mov	r2, #76	; 0x4c
   23920:	e2810054 	add	r0, r1, #84	; 0x54
   23924:	ebffff55 	bl	23680 <assertion_failed>
   23928:	e59f1008 	ldr	r1, [pc, #8]	; 23938 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   2392c:	e3a0204e 	mov	r2, #78	; 0x4e
   23930:	e2810080 	add	r0, r1, #128	; 0x80
   23934:	ebffff51 	bl	23680 <assertion_failed>
   23938:	0003a34c 	.word	0x0003a34c

0002393c <CClassAllocator::~CClassAllocator()>:
   2393c:	e3a03000 	mov	r3, #0
   23940:	e92d4010 	push	{r4, lr}
   23944:	e1a04000 	mov	r4, r0
   23948:	e590000c 	ldr	r0, [r0, #12]
   2394c:	e5843010 	str	r3, [r4, #16]
   23950:	e1500003 	cmp	r0, r3
   23954:	0a000000 	beq	2395c <CClassAllocator::~CClassAllocator()+0x20>
   23958:	eb001e64 	bl	2b2f0 <free>
   2395c:	e1a00004 	mov	r0, r4
   23960:	e8bd8010 	pop	{r4, pc}

00023964 <CClassAllocator::Init(unsigned int, unsigned int)>:
   23964:	e3510000 	cmp	r1, #0
   23968:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2396c:	e1a06000 	mov	r6, r0
   23970:	03a00020 	moveq	r0, #32
   23974:	1281301f 	addne	r3, r1, #31
   23978:	13c3000f 	bicne	r0, r3, #15
   2397c:	e3520000 	cmp	r2, #0
   23980:	e5860000 	str	r0, [r6]
   23984:	0a00001b 	beq	239f8 <CClassAllocator::Init(unsigned int, unsigned int)+0x94>
   23988:	e5862004 	str	r2, [r6, #4]
   2398c:	e0000290 	mul	r0, r0, r2
   23990:	eb001e50 	bl	2b2d8 <malloc>
   23994:	e3500000 	cmp	r0, #0
   23998:	e586000c 	str	r0, [r6, #12]
   2399c:	0a000019 	beq	23a08 <CClassAllocator::Init(unsigned int, unsigned int)+0xa4>
   239a0:	e210100f 	ands	r1, r0, #15
   239a4:	1a000019 	bne	23a10 <CClassAllocator::Init(unsigned int, unsigned int)+0xac>
   239a8:	e5965004 	ldr	r5, [r6, #4]
   239ac:	e3550000 	cmp	r5, #0
   239b0:	0a00001a 	beq	23a20 <CClassAllocator::Init(unsigned int, unsigned int)+0xbc>
   239b4:	e5964000 	ldr	r4, [r6]
   239b8:	e596c010 	ldr	ip, [r6, #16]
   239bc:	e1a03000 	mov	r3, r0
   239c0:	e59f705c 	ldr	r7, [pc, #92]	; 23a24 <CClassAllocator::Init(unsigned int, unsigned int)+0xc0>
   239c4:	ea000000 	b	239cc <CClassAllocator::Init(unsigned int, unsigned int)+0x68>
   239c8:	e1a01002 	mov	r1, r2
   239cc:	e2812001 	add	r2, r1, #1
   239d0:	e1550002 	cmp	r5, r2
   239d4:	e583c00c 	str	ip, [r3, #12]
   239d8:	e1a0e003 	mov	lr, r3
   239dc:	e5837000 	str	r7, [r3]
   239e0:	e1a0c003 	mov	ip, r3
   239e4:	e0833004 	add	r3, r3, r4
   239e8:	1afffff6 	bne	239c8 <CClassAllocator::Init(unsigned int, unsigned int)+0x64>
   239ec:	e0210491 	mla	r1, r1, r4, r0
   239f0:	e5861010 	str	r1, [r6, #16]
   239f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   239f8:	e3a02055 	mov	r2, #85	; 0x55
   239fc:	e59f1024 	ldr	r1, [pc, #36]	; 23a28 <CClassAllocator::Init(unsigned int, unsigned int)+0xc4>
   23a00:	e59f0024 	ldr	r0, [pc, #36]	; 23a2c <CClassAllocator::Init(unsigned int, unsigned int)+0xc8>
   23a04:	ebffff1d 	bl	23680 <assertion_failed>
   23a08:	e5860004 	str	r0, [r6, #4]
   23a0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23a10:	e3a0205f 	mov	r2, #95	; 0x5f
   23a14:	e59f100c 	ldr	r1, [pc, #12]	; 23a28 <CClassAllocator::Init(unsigned int, unsigned int)+0xc4>
   23a18:	e59f0010 	ldr	r0, [pc, #16]	; 23a30 <CClassAllocator::Init(unsigned int, unsigned int)+0xcc>
   23a1c:	ebffff17 	bl	23680 <assertion_failed>
   23a20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23a24:	4f425350 	.word	0x4f425350
   23a28:	0003a3e4 	.word	0x0003a3e4
   23a2c:	0003a3f8 	.word	0x0003a3f8
   23a30:	0003a410 	.word	0x0003a410

00023a34 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   23a34:	e92d4010 	push	{r4, lr}
   23a38:	e3a0c000 	mov	ip, #0
   23a3c:	e3a0e001 	mov	lr, #1
   23a40:	e1a04000 	mov	r4, r0
   23a44:	e5803008 	str	r3, [r0, #8]
   23a48:	e580e018 	str	lr, [r0, #24]
   23a4c:	e580c00c 	str	ip, [r0, #12]
   23a50:	e580c010 	str	ip, [r0, #16]
   23a54:	e5c0c014 	strb	ip, [r0, #20]
   23a58:	ebffffc1 	bl	23964 <CClassAllocator::Init(unsigned int, unsigned int)>
   23a5c:	e1a00004 	mov	r0, r4
   23a60:	e8bd8010 	pop	{r4, pc}

00023a64 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   23a64:	e92d4070 	push	{r4, r5, r6, lr}
   23a68:	e3a0c000 	mov	ip, #0
   23a6c:	e3a0e001 	mov	lr, #1
   23a70:	e1a04000 	mov	r4, r0
   23a74:	e59d5010 	ldr	r5, [sp, #16]
   23a78:	e5803018 	str	r3, [r0, #24]
   23a7c:	e5805008 	str	r5, [r0, #8]
   23a80:	e5c0e014 	strb	lr, [r0, #20]
   23a84:	e580c00c 	str	ip, [r0, #12]
   23a88:	e580c010 	str	ip, [r0, #16]
   23a8c:	ebffffb4 	bl	23964 <CClassAllocator::Init(unsigned int, unsigned int)>
   23a90:	e1a00004 	mov	r0, r4
   23a94:	e8bd8070 	pop	{r4, r5, r6, pc}

00023a98 <CClassAllocator::Allocate()>:
   23a98:	e92d4030 	push	{r4, r5, lr}
   23a9c:	e5d03014 	ldrb	r3, [r0, #20]
   23aa0:	e24dd00c 	sub	sp, sp, #12
   23aa4:	e3530000 	cmp	r3, #0
   23aa8:	e1a05000 	mov	r5, r0
   23aac:	0a000002 	beq	23abc <CClassAllocator::Allocate()+0x24>
   23ab0:	e5900018 	ldr	r0, [r0, #24]
   23ab4:	e3500000 	cmp	r0, #0
   23ab8:	1a000015 	bne	23b14 <CClassAllocator::Allocate()+0x7c>
   23abc:	e5954010 	ldr	r4, [r5, #16]
   23ac0:	e3540000 	cmp	r4, #0
   23ac4:	0a00001d 	beq	23b40 <CClassAllocator::Allocate()+0xa8>
   23ac8:	e59f30a4 	ldr	r3, [pc, #164]	; 23b74 <CClassAllocator::Allocate()+0xdc>
   23acc:	e5942000 	ldr	r2, [r4]
   23ad0:	e1520003 	cmp	r2, r3
   23ad4:	1a000022 	bne	23b64 <CClassAllocator::Allocate()+0xcc>
   23ad8:	e3a03000 	mov	r3, #0
   23adc:	e5d51014 	ldrb	r1, [r5, #20]
   23ae0:	e594200c 	ldr	r2, [r4, #12]
   23ae4:	e1510003 	cmp	r1, r3
   23ae8:	e5852010 	str	r2, [r5, #16]
   23aec:	e584300c 	str	r3, [r4, #12]
   23af0:	1a000002 	bne	23b00 <CClassAllocator::Allocate()+0x68>
   23af4:	e2840010 	add	r0, r4, #16
   23af8:	e28dd00c 	add	sp, sp, #12
   23afc:	e8bd8030 	pop	{r4, r5, pc}
   23b00:	e5953018 	ldr	r3, [r5, #24]
   23b04:	e3530000 	cmp	r3, #0
   23b08:	0afffff9 	beq	23af4 <CClassAllocator::Allocate()+0x5c>
   23b0c:	eb001c55 	bl	2ac68 <LeaveCritical>
   23b10:	eafffff7 	b	23af4 <CClassAllocator::Allocate()+0x5c>
   23b14:	eb001c28 	bl	2abbc <EnterCritical>
   23b18:	e5954010 	ldr	r4, [r5, #16]
   23b1c:	e3540000 	cmp	r4, #0
   23b20:	1affffe8 	bne	23ac8 <CClassAllocator::Allocate()+0x30>
   23b24:	e5d53014 	ldrb	r3, [r5, #20]
   23b28:	e3530000 	cmp	r3, #0
   23b2c:	0a000003 	beq	23b40 <CClassAllocator::Allocate()+0xa8>
   23b30:	e5953018 	ldr	r3, [r5, #24]
   23b34:	e3530000 	cmp	r3, #0
   23b38:	0a000000 	beq	23b40 <CClassAllocator::Allocate()+0xa8>
   23b3c:	eb001c49 	bl	2ac68 <LeaveCritical>
   23b40:	eb0007c1 	bl	25a4c <CLogger::Get()>
   23b44:	e5953004 	ldr	r3, [r5, #4]
   23b48:	e5951008 	ldr	r1, [r5, #8]
   23b4c:	e3a02000 	mov	r2, #0
   23b50:	e58d3000 	str	r3, [sp]
   23b54:	e59f301c 	ldr	r3, [pc, #28]	; 23b78 <CClassAllocator::Allocate()+0xe0>
   23b58:	eb0006f8 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23b5c:	e3a00000 	mov	r0, #0
   23b60:	eaffffe4 	b	23af8 <CClassAllocator::Allocate()+0x60>
   23b64:	e3a02082 	mov	r2, #130	; 0x82
   23b68:	e59f100c 	ldr	r1, [pc, #12]	; 23b7c <CClassAllocator::Allocate()+0xe4>
   23b6c:	e59f000c 	ldr	r0, [pc, #12]	; 23b80 <CClassAllocator::Allocate()+0xe8>
   23b70:	ebfffec2 	bl	23680 <assertion_failed>
   23b74:	4f425350 	.word	0x4f425350
   23b78:	0003a44c 	.word	0x0003a44c
   23b7c:	0003a3e4 	.word	0x0003a3e4
   23b80:	0003a478 	.word	0x0003a478

00023b84 <CClassAllocator::Free(void*)>:
   23b84:	e92d4070 	push	{r4, r5, r6, lr}
   23b88:	e2514000 	subs	r4, r1, #0
   23b8c:	0a00001e 	beq	23c0c <CClassAllocator::Free(void*)+0x88>
   23b90:	e59f30a4 	ldr	r3, [pc, #164]	; 23c3c <CClassAllocator::Free(void*)+0xb8>
   23b94:	e5142010 	ldr	r2, [r4, #-16]
   23b98:	e2446010 	sub	r6, r4, #16
   23b9c:	e1520003 	cmp	r2, r3
   23ba0:	1a00001d 	bne	23c1c <CClassAllocator::Free(void*)+0x98>
   23ba4:	e5143004 	ldr	r3, [r4, #-4]
   23ba8:	e3530000 	cmp	r3, #0
   23bac:	1a00001e 	bne	23c2c <CClassAllocator::Free(void*)+0xa8>
   23bb0:	e5d03014 	ldrb	r3, [r0, #20]
   23bb4:	e1a05000 	mov	r5, r0
   23bb8:	e3530000 	cmp	r3, #0
   23bbc:	0a000002 	beq	23bcc <CClassAllocator::Free(void*)+0x48>
   23bc0:	e5900018 	ldr	r0, [r0, #24]
   23bc4:	e3500000 	cmp	r0, #0
   23bc8:	1a000003 	bne	23bdc <CClassAllocator::Free(void*)+0x58>
   23bcc:	e5953010 	ldr	r3, [r5, #16]
   23bd0:	e5043004 	str	r3, [r4, #-4]
   23bd4:	e5856010 	str	r6, [r5, #16]
   23bd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   23bdc:	eb001bf6 	bl	2abbc <EnterCritical>
   23be0:	e5d52014 	ldrb	r2, [r5, #20]
   23be4:	e5953010 	ldr	r3, [r5, #16]
   23be8:	e3520000 	cmp	r2, #0
   23bec:	e5043004 	str	r3, [r4, #-4]
   23bf0:	e5856010 	str	r6, [r5, #16]
   23bf4:	08bd8070 	popeq	{r4, r5, r6, pc}
   23bf8:	e5950018 	ldr	r0, [r5, #24]
   23bfc:	e3500000 	cmp	r0, #0
   23c00:	08bd8070 	popeq	{r4, r5, r6, pc}
   23c04:	e8bd4070 	pop	{r4, r5, r6, lr}
   23c08:	ea001c16 	b	2ac68 <LeaveCritical>
   23c0c:	e3a02090 	mov	r2, #144	; 0x90
   23c10:	e59f1028 	ldr	r1, [pc, #40]	; 23c40 <CClassAllocator::Free(void*)+0xbc>
   23c14:	e59f0028 	ldr	r0, [pc, #40]	; 23c44 <CClassAllocator::Free(void*)+0xc0>
   23c18:	ebfffe98 	bl	23680 <assertion_failed>
   23c1c:	e3a02094 	mov	r2, #148	; 0x94
   23c20:	e59f1018 	ldr	r1, [pc, #24]	; 23c40 <CClassAllocator::Free(void*)+0xbc>
   23c24:	e59f001c 	ldr	r0, [pc, #28]	; 23c48 <CClassAllocator::Free(void*)+0xc4>
   23c28:	ebfffe94 	bl	23680 <assertion_failed>
   23c2c:	e3a02095 	mov	r2, #149	; 0x95
   23c30:	e59f1008 	ldr	r1, [pc, #8]	; 23c40 <CClassAllocator::Free(void*)+0xbc>
   23c34:	e59f0010 	ldr	r0, [pc, #16]	; 23c4c <CClassAllocator::Free(void*)+0xc8>
   23c38:	ebfffe90 	bl	23680 <assertion_failed>
   23c3c:	4f425350 	.word	0x4f425350
   23c40:	0003a3e4 	.word	0x0003a3e4
   23c44:	0003a498 	.word	0x0003a498
   23c48:	0003a4a4 	.word	0x0003a4a4
   23c4c:	0003a4c0 	.word	0x0003a4c0

00023c50 <debug_hexdump(void const*, unsigned int, char const*)>:
   23c50:	e3520000 	cmp	r2, #0
   23c54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c58:	e1a05001 	mov	r5, r1
   23c5c:	e59f60f4 	ldr	r6, [pc, #244]	; 23d58 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   23c60:	e1a04000 	mov	r4, r0
   23c64:	11a06002 	movne	r6, r2
   23c68:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   23c6c:	eb000776 	bl	25a4c <CLogger::Get()>
   23c70:	e58d4004 	str	r4, [sp, #4]
   23c74:	e58d5000 	str	r5, [sp]
   23c78:	e1a01006 	mov	r1, r6
   23c7c:	e59f30d8 	ldr	r3, [pc, #216]	; 23d5c <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   23c80:	e3a02004 	mov	r2, #4
   23c84:	eb0006ad 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23c88:	e3550000 	cmp	r5, #0
   23c8c:	0a00002b 	beq	23d40 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
   23c90:	e3a09004 	mov	r9, #4
   23c94:	e59f80c4 	ldr	r8, [pc, #196]	; 23d60 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
   23c98:	e59f70c4 	ldr	r7, [pc, #196]	; 23d64 <debug_hexdump(void const*, unsigned int, char const*)+0x114>
   23c9c:	eb00076a 	bl	25a4c <CLogger::Get()>
   23ca0:	e5d4a00f 	ldrb	sl, [r4, #15]
   23ca4:	e5d4e00e 	ldrb	lr, [r4, #14]
   23ca8:	e5d4c00d 	ldrb	ip, [r4, #13]
   23cac:	e5d4300c 	ldrb	r3, [r4, #12]
   23cb0:	e5d4200b 	ldrb	r2, [r4, #11]
   23cb4:	e5d4100a 	ldrb	r1, [r4, #10]
   23cb8:	e5d4b009 	ldrb	fp, [r4, #9]
   23cbc:	e58da040 	str	sl, [sp, #64]	; 0x40
   23cc0:	e5d4a008 	ldrb	sl, [r4, #8]
   23cc4:	e58de03c 	str	lr, [sp, #60]	; 0x3c
   23cc8:	e5d4e007 	ldrb	lr, [r4, #7]
   23ccc:	e58dc038 	str	ip, [sp, #56]	; 0x38
   23cd0:	e5d4c006 	ldrb	ip, [r4, #6]
   23cd4:	e58d3034 	str	r3, [sp, #52]	; 0x34
   23cd8:	e5d43005 	ldrb	r3, [r4, #5]
   23cdc:	e58d2030 	str	r2, [sp, #48]	; 0x30
   23ce0:	e5d42004 	ldrb	r2, [r4, #4]
   23ce4:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   23ce8:	e5d41003 	ldrb	r1, [r4, #3]
   23cec:	e58db028 	str	fp, [sp, #40]	; 0x28
   23cf0:	e5d4b002 	ldrb	fp, [r4, #2]
   23cf4:	e58da024 	str	sl, [sp, #36]	; 0x24
   23cf8:	e5d4a001 	ldrb	sl, [r4, #1]
   23cfc:	e58de020 	str	lr, [sp, #32]
   23d00:	e5d4e000 	ldrb	lr, [r4]
   23d04:	e58dc01c 	str	ip, [sp, #28]
   23d08:	e58d3018 	str	r3, [sp, #24]
   23d0c:	e004c008 	and	ip, r4, r8
   23d10:	e58d2014 	str	r2, [sp, #20]
   23d14:	e58d1010 	str	r1, [sp, #16]
   23d18:	e1a03007 	mov	r3, r7
   23d1c:	e1a02009 	mov	r2, r9
   23d20:	e1a01006 	mov	r1, r6
   23d24:	e58db00c 	str	fp, [sp, #12]
   23d28:	e58da008 	str	sl, [sp, #8]
   23d2c:	e88d5000 	stm	sp, {ip, lr}
   23d30:	eb000682 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23d34:	e355000f 	cmp	r5, #15
   23d38:	e2844010 	add	r4, r4, #16
   23d3c:	8a000001 	bhi	23d48 <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
   23d40:	e28dd04c 	add	sp, sp, #76	; 0x4c
   23d44:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d48:	e2555010 	subs	r5, r5, #16
   23d4c:	1affffd2 	bne	23c9c <debug_hexdump(void const*, unsigned int, char const*)+0x4c>
   23d50:	e28dd04c 	add	sp, sp, #76	; 0x4c
   23d54:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d58:	0003a4d4 	.word	0x0003a4d4
   23d5c:	0003a4dc 	.word	0x0003a4dc
   23d60:	0000ffff 	.word	0x0000ffff
   23d64:	0003a504 	.word	0x0003a504

00023d68 <debug_stacktrace(unsigned int const*, char const*)>:
   23d68:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23d6c:	e3510000 	cmp	r1, #0
   23d70:	e59f8084 	ldr	r8, [pc, #132]	; 23dfc <debug_stacktrace(unsigned int const*, char const*)+0x94>
   23d74:	e24dd008 	sub	sp, sp, #8
   23d78:	e1a05000 	mov	r5, r0
   23d7c:	11a08001 	movne	r8, r1
   23d80:	e3a04000 	mov	r4, #0
   23d84:	e3a0a004 	mov	sl, #4
   23d88:	e59f6070 	ldr	r6, [pc, #112]	; 23e00 <debug_stacktrace(unsigned int const*, char const*)+0x98>
   23d8c:	e59f7070 	ldr	r7, [pc, #112]	; 23e04 <debug_stacktrace(unsigned int const*, char const*)+0x9c>
   23d90:	e59f9070 	ldr	r9, [pc, #112]	; 23e08 <debug_stacktrace(unsigned int const*, char const*)+0xa0>
   23d94:	ea000003 	b	23da8 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   23d98:	e2844001 	add	r4, r4, #1
   23d9c:	e3540040 	cmp	r4, #64	; 0x40
   23da0:	e2855004 	add	r5, r5, #4
   23da4:	0a000012 	beq	23df4 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
   23da8:	e5953000 	ldr	r3, [r5]
   23dac:	e1530006 	cmp	r3, r6
   23db0:	9afffff8 	bls	23d98 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   23db4:	e1530007 	cmp	r3, r7
   23db8:	2afffff6 	bcs	23d98 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   23dbc:	e3130003 	tst	r3, #3
   23dc0:	1afffff4 	bne	23d98 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   23dc4:	eb000720 	bl	25a4c <CLogger::Get()>
   23dc8:	e5953000 	ldr	r3, [r5]
   23dcc:	e1a0200a 	mov	r2, sl
   23dd0:	e58d4000 	str	r4, [sp]
   23dd4:	e58d3004 	str	r3, [sp, #4]
   23dd8:	e1a01008 	mov	r1, r8
   23ddc:	e1a03009 	mov	r3, r9
   23de0:	e2844001 	add	r4, r4, #1
   23de4:	eb000655 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23de8:	e3540040 	cmp	r4, #64	; 0x40
   23dec:	e2855004 	add	r5, r5, #4
   23df0:	1affffec 	bne	23da8 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   23df4:	e28dd008 	add	sp, sp, #8
   23df8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23dfc:	0003a4d4 	.word	0x0003a4d4
   23e00:	00007fff 	.word	0x00007fff
   23e04:	00034548 	.word	0x00034548
   23e08:	0003a55c 	.word	0x0003a55c

00023e0c <CDevice::~CDevice()>:
   23e0c:	e12fff1e 	bx	lr

00023e10 <CDevice::Read(void*, unsigned int)>:
   23e10:	e3e00000 	mvn	r0, #0
   23e14:	e12fff1e 	bx	lr

00023e18 <CDevice::Seek(unsigned long long)>:
   23e18:	e3e00000 	mvn	r0, #0
   23e1c:	e3e01000 	mvn	r1, #0
   23e20:	e12fff1e 	bx	lr

00023e24 <CDevice::RemoveDevice()>:
   23e24:	e3a00000 	mov	r0, #0
   23e28:	e12fff1e 	bx	lr

00023e2c <CDevice::~CDevice()>:
   23e2c:	e92d4010 	push	{r4, lr}
   23e30:	e1a04000 	mov	r4, r0
   23e34:	e3a01004 	mov	r1, #4
   23e38:	eb00183b 	bl	29f2c <operator delete(void*, unsigned int)>
   23e3c:	e1a00004 	mov	r0, r4
   23e40:	e8bd8010 	pop	{r4, pc}

00023e44 <CDevice::CDevice()>:
   23e44:	e59f3004 	ldr	r3, [pc, #4]	; 23e50 <CDevice::CDevice()+0xc>
   23e48:	e5803000 	str	r3, [r0]
   23e4c:	e12fff1e 	bx	lr
   23e50:	0003a578 	.word	0x0003a578

00023e54 <CDeviceNameService::CDeviceNameService()>:
   23e54:	e3a02000 	mov	r2, #0
   23e58:	e59f102c 	ldr	r1, [pc, #44]	; 23e8c <CDeviceNameService::CDeviceNameService()+0x38>
   23e5c:	e5802000 	str	r2, [r0]
   23e60:	e591c000 	ldr	ip, [r1]
   23e64:	e5802004 	str	r2, [r0, #4]
   23e68:	e15c0002 	cmp	ip, r2
   23e6c:	1a000001 	bne	23e78 <CDeviceNameService::CDeviceNameService()+0x24>
   23e70:	e5810000 	str	r0, [r1]
   23e74:	e12fff1e 	bx	lr
   23e78:	e92d4010 	push	{r4, lr}
   23e7c:	e3a0201f 	mov	r2, #31
   23e80:	e59f1008 	ldr	r1, [pc, #8]	; 23e90 <CDeviceNameService::CDeviceNameService()+0x3c>
   23e84:	e59f0008 	ldr	r0, [pc, #8]	; 23e94 <CDeviceNameService::CDeviceNameService()+0x40>
   23e88:	ebfffdfc 	bl	23680 <assertion_failed>
   23e8c:	0003e388 	.word	0x0003e388
   23e90:	0003a590 	.word	0x0003a590
   23e94:	0003a5a8 	.word	0x0003a5a8

00023e98 <CDeviceNameService::~CDeviceNameService()>:
   23e98:	e5903000 	ldr	r3, [r0]
   23e9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23ea0:	e3530000 	cmp	r3, #0
   23ea4:	e1a05000 	mov	r5, r0
   23ea8:	0a00000e 	beq	23ee8 <CDeviceNameService::~CDeviceNameService()+0x50>
   23eac:	e3a06000 	mov	r6, #0
   23eb0:	e3a07010 	mov	r7, #16
   23eb4:	e5930004 	ldr	r0, [r3, #4]
   23eb8:	e5934000 	ldr	r4, [r3]
   23ebc:	e3500000 	cmp	r0, #0
   23ec0:	0a000000 	beq	23ec8 <CDeviceNameService::~CDeviceNameService()+0x30>
   23ec4:	eb001812 	bl	29f14 <operator delete[](void*)>
   23ec8:	e5950000 	ldr	r0, [r5]
   23ecc:	e1a01007 	mov	r1, r7
   23ed0:	e5806004 	str	r6, [r0, #4]
   23ed4:	e5806008 	str	r6, [r0, #8]
   23ed8:	eb001813 	bl	29f2c <operator delete(void*, unsigned int)>
   23edc:	e2543000 	subs	r3, r4, #0
   23ee0:	e5854000 	str	r4, [r5]
   23ee4:	1afffff2 	bne	23eb4 <CDeviceNameService::~CDeviceNameService()+0x1c>
   23ee8:	e3a02000 	mov	r2, #0
   23eec:	e59f3008 	ldr	r3, [pc, #8]	; 23efc <CDeviceNameService::~CDeviceNameService()+0x64>
   23ef0:	e1a00005 	mov	r0, r5
   23ef4:	e5832000 	str	r2, [r3]
   23ef8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   23efc:	0003e388 	.word	0x0003e388

00023f00 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   23f00:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23f04:	e1a05000 	mov	r5, r0
   23f08:	e5900004 	ldr	r0, [r0, #4]
   23f0c:	e1a06001 	mov	r6, r1
   23f10:	e3500000 	cmp	r0, #0
   23f14:	e1a07002 	mov	r7, r2
   23f18:	e1a08003 	mov	r8, r3
   23f1c:	1a000017 	bne	23f80 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
   23f20:	e3a00010 	mov	r0, #16
   23f24:	eb0017f2 	bl	29ef4 <operator new(unsigned int)>
   23f28:	e3560000 	cmp	r6, #0
   23f2c:	e1a04000 	mov	r4, r0
   23f30:	0a000014 	beq	23f88 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
   23f34:	e1a00006 	mov	r0, r6
   23f38:	eb0013ef 	bl	28efc <strlen>
   23f3c:	e2800001 	add	r0, r0, #1
   23f40:	eb0017ec 	bl	29ef8 <operator new[](unsigned int)>
   23f44:	e1a01006 	mov	r1, r6
   23f48:	e5840004 	str	r0, [r4, #4]
   23f4c:	eb0014a8 	bl	291f4 <strcpy>
   23f50:	e3570000 	cmp	r7, #0
   23f54:	0a00000f 	beq	23f98 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x98>
   23f58:	e5952004 	ldr	r2, [r5, #4]
   23f5c:	e5953000 	ldr	r3, [r5]
   23f60:	e3520000 	cmp	r2, #0
   23f64:	e5847008 	str	r7, [r4, #8]
   23f68:	e5c4800c 	strb	r8, [r4, #12]
   23f6c:	e5843000 	str	r3, [r4]
   23f70:	e5854000 	str	r4, [r5]
   23f74:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   23f78:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   23f7c:	ea001b39 	b	2ac68 <LeaveCritical>
   23f80:	eb001b0d 	bl	2abbc <EnterCritical>
   23f84:	eaffffe5 	b	23f20 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
   23f88:	e3a0203b 	mov	r2, #59	; 0x3b
   23f8c:	e59f1014 	ldr	r1, [pc, #20]	; 23fa8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   23f90:	e59f0014 	ldr	r0, [pc, #20]	; 23fac <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xac>
   23f94:	ebfffdb9 	bl	23680 <assertion_failed>
   23f98:	e3a02040 	mov	r2, #64	; 0x40
   23f9c:	e59f1004 	ldr	r1, [pc, #4]	; 23fa8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   23fa0:	e59f0008 	ldr	r0, [pc, #8]	; 23fb0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
   23fa4:	ebfffdb5 	bl	23680 <assertion_failed>
   23fa8:	0003a590 	.word	0x0003a590
   23fac:	00035220 	.word	0x00035220
   23fb0:	0003a5b4 	.word	0x0003a5b4

00023fb4 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   23fb4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23fb8:	e2515000 	subs	r5, r1, #0
   23fbc:	0a00003c 	beq	240b4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
   23fc0:	e1a08000 	mov	r8, r0
   23fc4:	e5900004 	ldr	r0, [r0, #4]
   23fc8:	e1a07002 	mov	r7, r2
   23fcc:	e3500000 	cmp	r0, #0
   23fd0:	1a00002c 	bne	24088 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd4>
   23fd4:	e5984000 	ldr	r4, [r8]
   23fd8:	e3540000 	cmp	r4, #0
   23fdc:	0a00003b 	beq	240d0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x11c>
   23fe0:	e5941004 	ldr	r1, [r4, #4]
   23fe4:	e3510000 	cmp	r1, #0
   23fe8:	13a06000 	movne	r6, #0
   23fec:	1a000001 	bne	23ff8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x44>
   23ff0:	ea00000e 	b	24030 <CDeviceNameService::RemoveDevice(char const*, bool)+0x7c>
   23ff4:	e1a04003 	mov	r4, r3
   23ff8:	e1a00005 	mov	r0, r5
   23ffc:	eb0013c8 	bl	28f24 <strcmp>
   24000:	e3500000 	cmp	r0, #0
   24004:	1a000002 	bne	24014 <CDeviceNameService::RemoveDevice(char const*, bool)+0x60>
   24008:	e5d4300c 	ldrb	r3, [r4, #12]
   2400c:	e1530007 	cmp	r3, r7
   24010:	0a00000a 	beq	24040 <CDeviceNameService::RemoveDevice(char const*, bool)+0x8c>
   24014:	e5943000 	ldr	r3, [r4]
   24018:	e3530000 	cmp	r3, #0
   2401c:	0a00001d 	beq	24098 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe4>
   24020:	e5931004 	ldr	r1, [r3, #4]
   24024:	e1a06004 	mov	r6, r4
   24028:	e3510000 	cmp	r1, #0
   2402c:	1afffff0 	bne	23ff4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
   24030:	e3a0205e 	mov	r2, #94	; 0x5e
   24034:	e59f1098 	ldr	r1, [pc, #152]	; 240d4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x120>
   24038:	e59f0098 	ldr	r0, [pc, #152]	; 240d8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x124>
   2403c:	ebfffd8f 	bl	23680 <assertion_failed>
   24040:	e3560000 	cmp	r6, #0
   24044:	0a00001e 	beq	240c4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
   24048:	e5943000 	ldr	r3, [r4]
   2404c:	e5863000 	str	r3, [r6]
   24050:	e5983004 	ldr	r3, [r8, #4]
   24054:	e3530000 	cmp	r3, #0
   24058:	1a000013 	bne	240ac <CDeviceNameService::RemoveDevice(char const*, bool)+0xf8>
   2405c:	e5940004 	ldr	r0, [r4, #4]
   24060:	e3500000 	cmp	r0, #0
   24064:	0a000000 	beq	2406c <CDeviceNameService::RemoveDevice(char const*, bool)+0xb8>
   24068:	eb0017a9 	bl	29f14 <operator delete[](void*)>
   2406c:	e3a03000 	mov	r3, #0
   24070:	e1a00004 	mov	r0, r4
   24074:	e5843004 	str	r3, [r4, #4]
   24078:	e5843008 	str	r3, [r4, #8]
   2407c:	e3a01010 	mov	r1, #16
   24080:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   24084:	ea0017a8 	b	29f2c <operator delete(void*, unsigned int)>
   24088:	eb001acb 	bl	2abbc <EnterCritical>
   2408c:	e5984000 	ldr	r4, [r8]
   24090:	e3540000 	cmp	r4, #0
   24094:	1affffd1 	bne	23fe0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   24098:	e5983004 	ldr	r3, [r8, #4]
   2409c:	e3530000 	cmp	r3, #0
   240a0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   240a4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   240a8:	ea001aee 	b	2ac68 <LeaveCritical>
   240ac:	eb001aed 	bl	2ac68 <LeaveCritical>
   240b0:	eaffffe9 	b	2405c <CDeviceNameService::RemoveDevice(char const*, bool)+0xa8>
   240b4:	e3a02056 	mov	r2, #86	; 0x56
   240b8:	e59f1014 	ldr	r1, [pc, #20]	; 240d4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x120>
   240bc:	e59f0018 	ldr	r0, [pc, #24]	; 240dc <CDeviceNameService::RemoveDevice(char const*, bool)+0x128>
   240c0:	ebfffd6e 	bl	23680 <assertion_failed>
   240c4:	e5943000 	ldr	r3, [r4]
   240c8:	e5883000 	str	r3, [r8]
   240cc:	eaffffdf 	b	24050 <CDeviceNameService::RemoveDevice(char const*, bool)+0x9c>
   240d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   240d4:	0003a590 	.word	0x0003a590
   240d8:	0003a5c4 	.word	0x0003a5c4
   240dc:	00035220 	.word	0x00035220

000240e0 <CDeviceNameService::GetDevice(char const*, bool)>:
   240e0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   240e4:	e2515000 	subs	r5, r1, #0
   240e8:	e24dd00c 	sub	sp, sp, #12
   240ec:	0a00002b 	beq	241a0 <CDeviceNameService::GetDevice(char const*, bool)+0xc0>
   240f0:	e1a07000 	mov	r7, r0
   240f4:	e5900004 	ldr	r0, [r0, #4]
   240f8:	e1a06002 	mov	r6, r2
   240fc:	e3500000 	cmp	r0, #0
   24100:	1a000014 	bne	24158 <CDeviceNameService::GetDevice(char const*, bool)+0x78>
   24104:	e5974000 	ldr	r4, [r7]
   24108:	e3540000 	cmp	r4, #0
   2410c:	1a00000a 	bne	2413c <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   24110:	ea000017 	b	24174 <CDeviceNameService::GetDevice(char const*, bool)+0x94>
   24114:	e1a00005 	mov	r0, r5
   24118:	eb001381 	bl	28f24 <strcmp>
   2411c:	e3500000 	cmp	r0, #0
   24120:	1a000002 	bne	24130 <CDeviceNameService::GetDevice(char const*, bool)+0x50>
   24124:	e5d4300c 	ldrb	r3, [r4, #12]
   24128:	e1530006 	cmp	r3, r6
   2412c:	0a000013 	beq	24180 <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
   24130:	e5944000 	ldr	r4, [r4]
   24134:	e3540000 	cmp	r4, #0
   24138:	0a00000a 	beq	24168 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   2413c:	e5941004 	ldr	r1, [r4, #4]
   24140:	e3510000 	cmp	r1, #0
   24144:	1afffff2 	bne	24114 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   24148:	e3a02092 	mov	r2, #146	; 0x92
   2414c:	e59f1084 	ldr	r1, [pc, #132]	; 241d8 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   24150:	e59f0084 	ldr	r0, [pc, #132]	; 241dc <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
   24154:	ebfffd49 	bl	23680 <assertion_failed>
   24158:	eb001a97 	bl	2abbc <EnterCritical>
   2415c:	e5974000 	ldr	r4, [r7]
   24160:	e3540000 	cmp	r4, #0
   24164:	1afffff4 	bne	2413c <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   24168:	e5973004 	ldr	r3, [r7, #4]
   2416c:	e3530000 	cmp	r3, #0
   24170:	1a00000e 	bne	241b0 <CDeviceNameService::GetDevice(char const*, bool)+0xd0>
   24174:	e3a00000 	mov	r0, #0
   24178:	e28dd00c 	add	sp, sp, #12
   2417c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   24180:	e5973004 	ldr	r3, [r7, #4]
   24184:	e5940008 	ldr	r0, [r4, #8]
   24188:	e3530000 	cmp	r3, #0
   2418c:	1a000009 	bne	241b8 <CDeviceNameService::GetDevice(char const*, bool)+0xd8>
   24190:	e3500000 	cmp	r0, #0
   24194:	0a00000b 	beq	241c8 <CDeviceNameService::GetDevice(char const*, bool)+0xe8>
   24198:	e28dd00c 	add	sp, sp, #12
   2419c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   241a0:	e3a0208b 	mov	r2, #139	; 0x8b
   241a4:	e59f102c 	ldr	r1, [pc, #44]	; 241d8 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   241a8:	e59f0030 	ldr	r0, [pc, #48]	; 241e0 <CDeviceNameService::GetDevice(char const*, bool)+0x100>
   241ac:	ebfffd33 	bl	23680 <assertion_failed>
   241b0:	eb001aac 	bl	2ac68 <LeaveCritical>
   241b4:	eaffffee 	b	24174 <CDeviceNameService::GetDevice(char const*, bool)+0x94>
   241b8:	e58d0004 	str	r0, [sp, #4]
   241bc:	eb001aa9 	bl	2ac68 <LeaveCritical>
   241c0:	e59d0004 	ldr	r0, [sp, #4]
   241c4:	eafffff1 	b	24190 <CDeviceNameService::GetDevice(char const*, bool)+0xb0>
   241c8:	e3a0209a 	mov	r2, #154	; 0x9a
   241cc:	e59f1004 	ldr	r1, [pc, #4]	; 241d8 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   241d0:	e59f000c 	ldr	r0, [pc, #12]	; 241e4 <CDeviceNameService::GetDevice(char const*, bool)+0x104>
   241d4:	ebfffd29 	bl	23680 <assertion_failed>
   241d8:	0003a590 	.word	0x0003a590
   241dc:	0003a5c4 	.word	0x0003a5c4
   241e0:	00035220 	.word	0x00035220
   241e4:	0003a5d8 	.word	0x0003a5d8

000241e8 <CDeviceNameService::Get()>:
   241e8:	e59f3020 	ldr	r3, [pc, #32]	; 24210 <CDeviceNameService::Get()+0x28>
   241ec:	e5930000 	ldr	r0, [r3]
   241f0:	e3500000 	cmp	r0, #0
   241f4:	0a000000 	beq	241fc <CDeviceNameService::Get()+0x14>
   241f8:	e12fff1e 	bx	lr
   241fc:	e92d4010 	push	{r4, lr}
   24200:	e3a020cc 	mov	r2, #204	; 0xcc
   24204:	e59f1008 	ldr	r1, [pc, #8]	; 24214 <CDeviceNameService::Get()+0x2c>
   24208:	e59f0008 	ldr	r0, [pc, #8]	; 24218 <CDeviceNameService::Get()+0x30>
   2420c:	ebfffd1b 	bl	23680 <assertion_failed>
   24210:	0003e388 	.word	0x0003e388
   24214:	0003a590 	.word	0x0003a590
   24218:	0003a5e8 	.word	0x0003a5e8

0002421c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   2421c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24220:	e1a07001 	mov	r7, r1
   24224:	e1a08002 	mov	r8, r2
   24228:	e24dd010 	sub	sp, sp, #16
   2422c:	e1a04000 	mov	r4, r0
   24230:	e1a0000d 	mov	r0, sp
   24234:	e1a05003 	mov	r5, r3
   24238:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
   2423c:	eb0009e8 	bl	269e4 <CString::CString()>
   24240:	e1a03008 	mov	r3, r8
   24244:	e1a02007 	mov	r2, r7
   24248:	e1a0000d 	mov	r0, sp
   2424c:	e59f102c 	ldr	r1, [pc, #44]	; 24280 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
   24250:	eb000f26 	bl	27ef0 <CString::Format(char const*, ...)>
   24254:	e1a0000d 	mov	r0, sp
   24258:	eb0009f7 	bl	26a3c <CString::operator char const*() const>
   2425c:	e1a03006 	mov	r3, r6
   24260:	e1a01000 	mov	r1, r0
   24264:	e1a02005 	mov	r2, r5
   24268:	e1a00004 	mov	r0, r4
   2426c:	ebffff23 	bl	23f00 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   24270:	e1a0000d 	mov	r0, sp
   24274:	eb0009a7 	bl	26918 <CString::~CString()>
   24278:	e28dd010 	add	sp, sp, #16
   2427c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24280:	0003a5f4 	.word	0x0003a5f4

00024284 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   24284:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   24288:	e1a06001 	mov	r6, r1
   2428c:	e1a07002 	mov	r7, r2
   24290:	e24dd014 	sub	sp, sp, #20
   24294:	e1a04000 	mov	r4, r0
   24298:	e1a0000d 	mov	r0, sp
   2429c:	e1a05003 	mov	r5, r3
   242a0:	eb0009cf 	bl	269e4 <CString::CString()>
   242a4:	e1a03007 	mov	r3, r7
   242a8:	e1a02006 	mov	r2, r6
   242ac:	e1a0000d 	mov	r0, sp
   242b0:	e59f1028 	ldr	r1, [pc, #40]	; 242e0 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
   242b4:	eb000f0d 	bl	27ef0 <CString::Format(char const*, ...)>
   242b8:	e1a0000d 	mov	r0, sp
   242bc:	eb0009de 	bl	26a3c <CString::operator char const*() const>
   242c0:	e1a02005 	mov	r2, r5
   242c4:	e1a01000 	mov	r1, r0
   242c8:	e1a00004 	mov	r0, r4
   242cc:	ebffff38 	bl	23fb4 <CDeviceNameService::RemoveDevice(char const*, bool)>
   242d0:	e1a0000d 	mov	r0, sp
   242d4:	eb00098f 	bl	26918 <CString::~CString()>
   242d8:	e28dd014 	add	sp, sp, #20
   242dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   242e0:	0003a5f4 	.word	0x0003a5f4

000242e4 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   242e4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   242e8:	e1a06001 	mov	r6, r1
   242ec:	e1a07002 	mov	r7, r2
   242f0:	e24dd014 	sub	sp, sp, #20
   242f4:	e1a04000 	mov	r4, r0
   242f8:	e1a0000d 	mov	r0, sp
   242fc:	e1a05003 	mov	r5, r3
   24300:	eb0009b7 	bl	269e4 <CString::CString()>
   24304:	e1a03007 	mov	r3, r7
   24308:	e1a02006 	mov	r2, r6
   2430c:	e1a0000d 	mov	r0, sp
   24310:	e59f1030 	ldr	r1, [pc, #48]	; 24348 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
   24314:	eb000ef5 	bl	27ef0 <CString::Format(char const*, ...)>
   24318:	e1a0000d 	mov	r0, sp
   2431c:	eb0009c6 	bl	26a3c <CString::operator char const*() const>
   24320:	e1a02005 	mov	r2, r5
   24324:	e1a01000 	mov	r1, r0
   24328:	e1a00004 	mov	r0, r4
   2432c:	ebffff6b 	bl	240e0 <CDeviceNameService::GetDevice(char const*, bool)>
   24330:	e1a04000 	mov	r4, r0
   24334:	e1a0000d 	mov	r0, sp
   24338:	eb000976 	bl	26918 <CString::~CString()>
   2433c:	e1a00004 	mov	r0, r4
   24340:	e28dd014 	add	sp, sp, #20
   24344:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   24348:	0003a5f4 	.word	0x0003a5f4

0002434c <CDeviceNameService::ListDevices(CDevice*)>:
   2434c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24350:	e2516000 	subs	r6, r1, #0
   24354:	e24dd018 	sub	sp, sp, #24
   24358:	0a000034 	beq	24430 <CDeviceNameService::ListDevices(CDevice*)+0xe4>
   2435c:	e5904000 	ldr	r4, [r0]
   24360:	e3540000 	cmp	r4, #0
   24364:	0a00002f 	beq	24428 <CDeviceNameService::ListDevices(CDevice*)+0xdc>
   24368:	e3a05000 	mov	r5, #0
   2436c:	e59f90cc 	ldr	r9, [pc, #204]	; 24440 <CDeviceNameService::ListDevices(CDevice*)+0xf4>
   24370:	ea00001b 	b	243e4 <CDeviceNameService::ListDevices(CDevice*)+0x98>
   24374:	e2855001 	add	r5, r5, #1
   24378:	e215a003 	ands	sl, r5, #3
   2437c:	13a01020 	movne	r1, #32
   24380:	03a0100a 	moveq	r1, #10
   24384:	e5d4200c 	ldrb	r2, [r4, #12]
   24388:	e28d0008 	add	r0, sp, #8
   2438c:	e3520000 	cmp	r2, #0
   24390:	03a02063 	moveq	r2, #99	; 0x63
   24394:	13a02062 	movne	r2, #98	; 0x62
   24398:	e58d1000 	str	r1, [sp]
   2439c:	e1a01009 	mov	r1, r9
   243a0:	eb000ed2 	bl	27ef0 <CString::Format(char const*, ...)>
   243a4:	e5963000 	ldr	r3, [r6]
   243a8:	e28d0008 	add	r0, sp, #8
   243ac:	e593700c 	ldr	r7, [r3, #12]
   243b0:	eb0009a1 	bl	26a3c <CString::operator char const*() const>
   243b4:	e1a08000 	mov	r8, r0
   243b8:	e28d0008 	add	r0, sp, #8
   243bc:	eb0009cc 	bl	26af4 <CString::GetLength() const>
   243c0:	e1a01008 	mov	r1, r8
   243c4:	e1a02000 	mov	r2, r0
   243c8:	e1a00006 	mov	r0, r6
   243cc:	e12fff37 	blx	r7
   243d0:	e5944000 	ldr	r4, [r4]
   243d4:	e28d0008 	add	r0, sp, #8
   243d8:	eb00094e 	bl	26918 <CString::~CString()>
   243dc:	e3540000 	cmp	r4, #0
   243e0:	0a000008 	beq	24408 <CDeviceNameService::ListDevices(CDevice*)+0xbc>
   243e4:	e28d0008 	add	r0, sp, #8
   243e8:	eb00097d 	bl	269e4 <CString::CString()>
   243ec:	e5943004 	ldr	r3, [r4, #4]
   243f0:	e3530000 	cmp	r3, #0
   243f4:	1affffde 	bne	24374 <CDeviceNameService::ListDevices(CDevice*)+0x28>
   243f8:	e3a020b9 	mov	r2, #185	; 0xb9
   243fc:	e59f1040 	ldr	r1, [pc, #64]	; 24444 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   24400:	e59f0040 	ldr	r0, [pc, #64]	; 24448 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
   24404:	ebfffc9d 	bl	23680 <assertion_failed>
   24408:	e35a0000 	cmp	sl, #0
   2440c:	0a000005 	beq	24428 <CDeviceNameService::ListDevices(CDevice*)+0xdc>
   24410:	e5963000 	ldr	r3, [r6]
   24414:	e1a00006 	mov	r0, r6
   24418:	e593300c 	ldr	r3, [r3, #12]
   2441c:	e3a02001 	mov	r2, #1
   24420:	e59f1024 	ldr	r1, [pc, #36]	; 2444c <CDeviceNameService::ListDevices(CDevice*)+0x100>
   24424:	e12fff33 	blx	r3
   24428:	e28dd018 	add	sp, sp, #24
   2442c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24430:	e3a020b0 	mov	r2, #176	; 0xb0
   24434:	e59f1008 	ldr	r1, [pc, #8]	; 24444 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   24438:	e59f0010 	ldr	r0, [pc, #16]	; 24450 <CDeviceNameService::ListDevices(CDevice*)+0x104>
   2443c:	ebfffc8f 	bl	23680 <assertion_failed>
   24440:	0003a60c 	.word	0x0003a60c
   24444:	0003a590 	.word	0x0003a590
   24448:	0003a5c4 	.word	0x0003a5c4
   2444c:	00038820 	.word	0x00038820
   24450:	0003a5fc 	.word	0x0003a5fc

00024454 <CGPIOPin::CGPIOPin()>:
   24454:	e92d4010 	push	{r4, lr}
   24458:	e3a01000 	mov	r1, #0
   2445c:	e3a02006 	mov	r2, #6
   24460:	e3a04036 	mov	r4, #54	; 0x36
   24464:	e3a0c00a 	mov	ip, #10
   24468:	e59fe01c 	ldr	lr, [pc, #28]	; 2448c <CGPIOPin::CGPIOPin()+0x38>
   2446c:	e5804004 	str	r4, [r0, #4]
   24470:	e580e000 	str	lr, [r0]
   24474:	e5c0c010 	strb	ip, [r0, #16]
   24478:	e5801018 	str	r1, [r0, #24]
   2447c:	e580101c 	str	r1, [r0, #28]
   24480:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   24484:	e5c02026 	strb	r2, [r0, #38]	; 0x26
   24488:	e8bd8010 	pop	{r4, pc}
   2448c:	0003a620 	.word	0x0003a620

00024490 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   24490:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24494:	e3a0c006 	mov	ip, #6
   24498:	e3a0e000 	mov	lr, #0
   2449c:	e3a07036 	mov	r7, #54	; 0x36
   244a0:	e3a0600a 	mov	r6, #10
   244a4:	e1a04000 	mov	r4, r0
   244a8:	e1a05002 	mov	r5, r2
   244ac:	e5803018 	str	r3, [r0, #24]
   244b0:	e59f302c 	ldr	r3, [pc, #44]	; 244e4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
   244b4:	e580e01c 	str	lr, [r0, #28]
   244b8:	e8800088 	stm	r0, {r3, r7}
   244bc:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
   244c0:	e5c0c026 	strb	ip, [r0, #38]	; 0x26
   244c4:	e5c06010 	strb	r6, [r0, #16]
   244c8:	eb00000d 	bl	24504 <CGPIOPin::AssignPin(unsigned int)>
   244cc:	e1a00004 	mov	r0, r4
   244d0:	e1a01005 	mov	r1, r5
   244d4:	e3a02001 	mov	r2, #1
   244d8:	eb00002a 	bl	24588 <CGPIOPin::SetMode(TGPIOMode, bool)>
   244dc:	e1a00004 	mov	r0, r4
   244e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   244e4:	0003a620 	.word	0x0003a620

000244e8 <CGPIOPin::~CGPIOPin()>:
   244e8:	e12fff1e 	bx	lr

000244ec <CGPIOPin::~CGPIOPin()>:
   244ec:	e92d4010 	push	{r4, lr}
   244f0:	e1a04000 	mov	r4, r0
   244f4:	e3a01028 	mov	r1, #40	; 0x28
   244f8:	eb00168b 	bl	29f2c <operator delete(void*, unsigned int)>
   244fc:	e1a00004 	mov	r0, r4
   24500:	e8bd8010 	pop	{r4, pc}

00024504 <CGPIOPin::AssignPin(unsigned int)>:
   24504:	e5903004 	ldr	r3, [r0, #4]
   24508:	e92d4070 	push	{r4, r5, r6, lr}
   2450c:	e3530036 	cmp	r3, #54	; 0x36
   24510:	1a000017 	bne	24574 <CGPIOPin::AssignPin(unsigned int)+0x70>
   24514:	e1a05000 	mov	r5, r0
   24518:	e3510035 	cmp	r1, #53	; 0x35
   2451c:	e1a04001 	mov	r4, r1
   24520:	e5851004 	str	r1, [r5, #4]
   24524:	8a000007 	bhi	24548 <CGPIOPin::AssignPin(unsigned int)+0x44>
   24528:	e3a03001 	mov	r3, #1
   2452c:	e204201f 	and	r2, r4, #31
   24530:	e1a042a4 	lsr	r4, r4, #5
   24534:	e1a03213 	lsl	r3, r3, r2
   24538:	e1a04104 	lsl	r4, r4, #2
   2453c:	e585300c 	str	r3, [r5, #12]
   24540:	e5854008 	str	r4, [r5, #8]
   24544:	e8bd8070 	pop	{r4, r5, r6, pc}
   24548:	eb000839 	bl	26634 <CMachineInfo::Get()>
   2454c:	e6ef1074 	uxtb	r1, r4
   24550:	eb000799 	bl	263bc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   24554:	e3500035 	cmp	r0, #53	; 0x35
   24558:	e1a04000 	mov	r4, r0
   2455c:	e5850004 	str	r0, [r5, #4]
   24560:	9afffff0 	bls	24528 <CGPIOPin::AssignPin(unsigned int)+0x24>
   24564:	e59f1018 	ldr	r1, [pc, #24]	; 24584 <CGPIOPin::AssignPin(unsigned int)+0x80>
   24568:	e3a02047 	mov	r2, #71	; 0x47
   2456c:	e2810020 	add	r0, r1, #32
   24570:	ebfffc42 	bl	23680 <assertion_failed>
   24574:	e59f1008 	ldr	r1, [pc, #8]	; 24584 <CGPIOPin::AssignPin(unsigned int)+0x80>
   24578:	e3a02040 	mov	r2, #64	; 0x40
   2457c:	e281000c 	add	r0, r1, #12
   24580:	ebfffc3e 	bl	23680 <assertion_failed>
   24584:	0003a628 	.word	0x0003a628

00024588 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   24588:	e3510009 	cmp	r1, #9
   2458c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24590:	ca000049 	bgt	246bc <CGPIOPin::SetMode(TGPIOMode, bool)+0x134>
   24594:	e1a06002 	mov	r6, r2
   24598:	e1a04000 	mov	r4, r0
   2459c:	e5c01010 	strb	r1, [r0, #16]
   245a0:	e3a02000 	mov	r2, #0
   245a4:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   245a8:	e5d03010 	ldrb	r3, [r0, #16]
   245ac:	e2431004 	sub	r1, r3, #4
   245b0:	e6efc071 	uxtb	ip, r1
   245b4:	e35c0005 	cmp	ip, #5
   245b8:	8a00000a 	bhi	245e8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x60>
   245bc:	e1560002 	cmp	r6, r2
   245c0:	0a000003 	beq	245d4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
   245c4:	e1a01002 	mov	r1, r2
   245c8:	eb000205 	bl	24de4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   245cc:	e5d43010 	ldrb	r3, [r4, #16]
   245d0:	e2431004 	sub	r1, r3, #4
   245d4:	e1a00004 	mov	r0, r4
   245d8:	eb000229 	bl	24e84 <CGPIOPin::SetAlternateFunction(unsigned int)>
   245dc:	e3a03000 	mov	r3, #0
   245e0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   245e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   245e8:	e3530001 	cmp	r3, #1
   245ec:	13a03000 	movne	r3, #0
   245f0:	02063001 	andeq	r3, r6, #1
   245f4:	e3530000 	cmp	r3, #0
   245f8:	1a00003f 	bne	246fc <CGPIOPin::SetMode(TGPIOMode, bool)+0x174>
   245fc:	e5943004 	ldr	r3, [r4, #4]
   24600:	e3530035 	cmp	r3, #53	; 0x35
   24604:	8a00003f 	bhi	24708 <CGPIOPin::SetMode(TGPIOMode, bool)+0x180>
   24608:	e59f5108 	ldr	r5, [pc, #264]	; 24718 <CGPIOPin::SetMode(TGPIOMode, bool)+0x190>
   2460c:	e59f8108 	ldr	r8, [pc, #264]	; 2471c <CGPIOPin::SetMode(TGPIOMode, bool)+0x194>
   24610:	e0852395 	umull	r2, r5, r5, r3
   24614:	e5980000 	ldr	r0, [r8]
   24618:	e1a051a5 	lsr	r5, r5, #3
   2461c:	e2857302 	add	r7, r5, #134217728	; 0x8000000
   24620:	e0855105 	add	r5, r5, r5, lsl #2
   24624:	e2877702 	add	r7, r7, #524288	; 0x80000
   24628:	e0435085 	sub	r5, r3, r5, lsl #1
   2462c:	e3500000 	cmp	r0, #0
   24630:	e1a07107 	lsl	r7, r7, #2
   24634:	e0855085 	add	r5, r5, r5, lsl #1
   24638:	1a00001d 	bne	246b4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
   2463c:	e5d42010 	ldrb	r2, [r4, #16]
   24640:	e3a01007 	mov	r1, #7
   24644:	e2422001 	sub	r2, r2, #1
   24648:	e16f2f12 	clz	r2, r2
   2464c:	e5973000 	ldr	r3, [r7]
   24650:	e1a022a2 	lsr	r2, r2, #5
   24654:	e1c33511 	bic	r3, r3, r1, lsl r5
   24658:	e1835512 	orr	r5, r3, r2, lsl r5
   2465c:	e5875000 	str	r5, [r7]
   24660:	e5983000 	ldr	r3, [r8]
   24664:	e3530000 	cmp	r3, #0
   24668:	1a00000f 	bne	246ac <CGPIOPin::SetMode(TGPIOMode, bool)+0x124>
   2466c:	e3560000 	cmp	r6, #0
   24670:	0a00000a 	beq	246a0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   24674:	e5d43010 	ldrb	r3, [r4, #16]
   24678:	e3530003 	cmp	r3, #3
   2467c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   24680:	ea000006 	b	246a0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   24684:	000246cc 	.word	0x000246cc
   24688:	000246dc 	.word	0x000246dc
   2468c:	000246ec 	.word	0x000246ec
   24690:	00024694 	.word	0x00024694
   24694:	e1a00004 	mov	r0, r4
   24698:	e3a01001 	mov	r1, #1
   2469c:	eb0001d0 	bl	24de4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   246a0:	e3a03000 	mov	r3, #0
   246a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   246a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   246ac:	eb00196d 	bl	2ac68 <LeaveCritical>
   246b0:	eaffffed 	b	2466c <CGPIOPin::SetMode(TGPIOMode, bool)+0xe4>
   246b4:	eb001940 	bl	2abbc <EnterCritical>
   246b8:	eaffffdf 	b	2463c <CGPIOPin::SetMode(TGPIOMode, bool)+0xb4>
   246bc:	e59f105c 	ldr	r1, [pc, #92]	; 24720 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
   246c0:	e3a0204f 	mov	r2, #79	; 0x4f
   246c4:	e2810034 	add	r0, r1, #52	; 0x34
   246c8:	ebfffbec 	bl	23680 <assertion_failed>
   246cc:	e1a00004 	mov	r0, r4
   246d0:	e3a01000 	mov	r1, #0
   246d4:	eb0001c2 	bl	24de4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   246d8:	eafffff0 	b	246a0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   246dc:	e1a00004 	mov	r0, r4
   246e0:	e3a01000 	mov	r1, #0
   246e4:	eb00000e 	bl	24724 <CGPIOPin::Write(unsigned int)>
   246e8:	eaffffec 	b	246a0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   246ec:	e1a00004 	mov	r0, r4
   246f0:	e3a01002 	mov	r1, #2
   246f4:	eb0001ba 	bl	24de4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   246f8:	eaffffe8 	b	246a0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   246fc:	e1a01002 	mov	r1, r2
   24700:	eb0001b7 	bl	24de4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   24704:	eaffffbc 	b	245fc <CGPIOPin::SetMode(TGPIOMode, bool)+0x74>
   24708:	e59f1010 	ldr	r1, [pc, #16]	; 24720 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
   2470c:	e3a02068 	mov	r2, #104	; 0x68
   24710:	e2810020 	add	r0, r1, #32
   24714:	ebfffbd9 	bl	23680 <assertion_failed>
   24718:	cccccccd 	.word	0xcccccccd
   2471c:	0003e38c 	.word	0x0003e38c
   24720:	0003a628 	.word	0x0003a628

00024724 <CGPIOPin::Write(unsigned int)>:
   24724:	e5903004 	ldr	r3, [r0, #4]
   24728:	e92d4010 	push	{r4, lr}
   2472c:	e3530035 	cmp	r3, #53	; 0x35
   24730:	8a000010 	bhi	24778 <CGPIOPin::Write(unsigned int)+0x54>
   24734:	e5d03010 	ldrb	r3, [r0, #16]
   24738:	e3530003 	cmp	r3, #3
   2473c:	ca000011 	bgt	24788 <CGPIOPin::Write(unsigned int)+0x64>
   24740:	e3a02000 	mov	r2, #0
   24744:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   24748:	e3510001 	cmp	r1, #1
   2474c:	8a000011 	bhi	24798 <CGPIOPin::Write(unsigned int)+0x74>
   24750:	e59fc050 	ldr	ip, [pc, #80]	; 247a8 <CGPIOPin::Write(unsigned int)+0x84>
   24754:	e3510000 	cmp	r1, #0
   24758:	e59f304c 	ldr	r3, [pc, #76]	; 247ac <CGPIOPin::Write(unsigned int)+0x88>
   2475c:	01a0300c 	moveq	r3, ip
   24760:	e590e00c 	ldr	lr, [r0, #12]
   24764:	e590c008 	ldr	ip, [r0, #8]
   24768:	e5801014 	str	r1, [r0, #20]
   2476c:	e783e00c 	str	lr, [r3, ip]
   24770:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   24774:	e8bd8010 	pop	{r4, pc}
   24778:	e59f1030 	ldr	r1, [pc, #48]	; 247b0 <CGPIOPin::Write(unsigned int)+0x8c>
   2477c:	e3a02091 	mov	r2, #145	; 0x91
   24780:	e2810020 	add	r0, r1, #32
   24784:	ebfffbbd 	bl	23680 <assertion_failed>
   24788:	e59f1020 	ldr	r1, [pc, #32]	; 247b0 <CGPIOPin::Write(unsigned int)+0x8c>
   2478c:	e3a02094 	mov	r2, #148	; 0x94
   24790:	e281004c 	add	r0, r1, #76	; 0x4c
   24794:	ebfffbb9 	bl	23680 <assertion_failed>
   24798:	e59f1010 	ldr	r1, [pc, #16]	; 247b0 <CGPIOPin::Write(unsigned int)+0x8c>
   2479c:	e3a02098 	mov	r2, #152	; 0x98
   247a0:	e2810070 	add	r0, r1, #112	; 0x70
   247a4:	ebfffbb5 	bl	23680 <assertion_failed>
   247a8:	20200028 	.word	0x20200028
   247ac:	2020001c 	.word	0x2020001c
   247b0:	0003a628 	.word	0x0003a628

000247b4 <CGPIOPin::Read() const>:
   247b4:	e5903004 	ldr	r3, [r0, #4]
   247b8:	e92d4010 	push	{r4, lr}
   247bc:	e3530035 	cmp	r3, #53	; 0x35
   247c0:	8a00000f 	bhi	24804 <CGPIOPin::Read() const+0x50>
   247c4:	e5d03010 	ldrb	r3, [r0, #16]
   247c8:	e2432002 	sub	r2, r3, #2
   247cc:	e3530000 	cmp	r3, #0
   247d0:	13520001 	cmpne	r2, #1
   247d4:	8a00000e 	bhi	24814 <CGPIOPin::Read() const+0x60>
   247d8:	e3a03000 	mov	r3, #0
   247dc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   247e0:	e59f103c 	ldr	r1, [pc, #60]	; 24824 <CGPIOPin::Read() const+0x70>
   247e4:	e590c008 	ldr	ip, [r0, #8]
   247e8:	e590200c 	ldr	r2, [r0, #12]
   247ec:	e79c1001 	ldr	r1, [ip, r1]
   247f0:	e1110002 	tst	r1, r2
   247f4:	13a00001 	movne	r0, #1
   247f8:	01a00003 	moveq	r0, r3
   247fc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   24800:	e8bd8010 	pop	{r4, pc}
   24804:	e59f101c 	ldr	r1, [pc, #28]	; 24828 <CGPIOPin::Read() const+0x74>
   24808:	e3a020a4 	mov	r2, #164	; 0xa4
   2480c:	e2810020 	add	r0, r1, #32
   24810:	ebfffb9a 	bl	23680 <assertion_failed>
   24814:	e59f100c 	ldr	r1, [pc, #12]	; 24828 <CGPIOPin::Read() const+0x74>
   24818:	e3a020a8 	mov	r2, #168	; 0xa8
   2481c:	e2810090 	add	r0, r1, #144	; 0x90
   24820:	ebfffb96 	bl	23680 <assertion_failed>
   24824:	20200034 	.word	0x20200034
   24828:	0003a628 	.word	0x0003a628

0002482c <CGPIOPin::Invert()>:
   2482c:	e5d02010 	ldrb	r2, [r0, #16]
   24830:	e3520001 	cmp	r2, #1
   24834:	1a000002 	bne	24844 <CGPIOPin::Invert()+0x18>
   24838:	e5901014 	ldr	r1, [r0, #20]
   2483c:	e2211001 	eor	r1, r1, #1
   24840:	eaffffb7 	b	24724 <CGPIOPin::Write(unsigned int)>
   24844:	e59f100c 	ldr	r1, [pc, #12]	; 24858 <CGPIOPin::Invert()+0x2c>
   24848:	e92d4010 	push	{r4, lr}
   2484c:	e3a020b5 	mov	r2, #181	; 0xb5
   24850:	e28100ec 	add	r0, r1, #236	; 0xec
   24854:	ebfffb89 	bl	23680 <assertion_failed>
   24858:	0003a628 	.word	0x0003a628

0002485c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   2485c:	e5d0c010 	ldrb	ip, [r0, #16]
   24860:	e92d4010 	push	{r4, lr}
   24864:	e24ce002 	sub	lr, ip, #2
   24868:	e35c0000 	cmp	ip, #0
   2486c:	135e0001 	cmpne	lr, #1
   24870:	8a000028 	bhi	24918 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
   24874:	e5d0c025 	ldrb	ip, [r0, #37]	; 0x25
   24878:	e35c0006 	cmp	ip, #6
   2487c:	1a000011 	bne	248c8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
   24880:	e5d0c026 	ldrb	ip, [r0, #38]	; 0x26
   24884:	e35c0006 	cmp	ip, #6
   24888:	1a000012 	bne	248d8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
   2488c:	e3510000 	cmp	r1, #0
   24890:	0a000014 	beq	248e8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   24894:	e590c01c 	ldr	ip, [r0, #28]
   24898:	e35c0000 	cmp	ip, #0
   2489c:	1a000015 	bne	248f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
   248a0:	e590c018 	ldr	ip, [r0, #24]
   248a4:	e580101c 	str	r1, [r0, #28]
   248a8:	e35c0000 	cmp	ip, #0
   248ac:	e5802020 	str	r2, [r0, #32]
   248b0:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   248b4:	0a000013 	beq	24908 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
   248b8:	e8bd4010 	pop	{r4, lr}
   248bc:	e1a01000 	mov	r1, r0
   248c0:	e1a0000c 	mov	r0, ip
   248c4:	ea001b7f 	b	2b6c8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   248c8:	e59f1058 	ldr	r1, [pc, #88]	; 24928 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   248cc:	e3a020c0 	mov	r2, #192	; 0xc0
   248d0:	e2810f42 	add	r0, r1, #264	; 0x108
   248d4:	ebfffb69 	bl	23680 <assertion_failed>
   248d8:	e59f1048 	ldr	r1, [pc, #72]	; 24928 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   248dc:	e3a020c1 	mov	r2, #193	; 0xc1
   248e0:	e2810f4b 	add	r0, r1, #300	; 0x12c
   248e4:	ebfffb65 	bl	23680 <assertion_failed>
   248e8:	e59f1038 	ldr	r1, [pc, #56]	; 24928 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   248ec:	e3a020c3 	mov	r2, #195	; 0xc3
   248f0:	e2810f55 	add	r0, r1, #340	; 0x154
   248f4:	ebfffb61 	bl	23680 <assertion_failed>
   248f8:	e59f1028 	ldr	r1, [pc, #40]	; 24928 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   248fc:	e3a020c4 	mov	r2, #196	; 0xc4
   24900:	e2810f59 	add	r0, r1, #356	; 0x164
   24904:	ebfffb5d 	bl	23680 <assertion_failed>
   24908:	e59f1018 	ldr	r1, [pc, #24]	; 24928 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2490c:	e3a020cb 	mov	r2, #203	; 0xcb
   24910:	e2810f5d 	add	r0, r1, #372	; 0x174
   24914:	ebfffb59 	bl	23680 <assertion_failed>
   24918:	e59f1008 	ldr	r1, [pc, #8]	; 24928 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2491c:	e3a020be 	mov	r2, #190	; 0xbe
   24920:	e2810090 	add	r0, r1, #144	; 0x90
   24924:	ebfffb55 	bl	23680 <assertion_failed>
   24928:	0003a628 	.word	0x0003a628

0002492c <CGPIOPin::DisconnectInterrupt()>:
   2492c:	e5d03010 	ldrb	r3, [r0, #16]
   24930:	e92d4010 	push	{r4, lr}
   24934:	e2432002 	sub	r2, r3, #2
   24938:	e3530000 	cmp	r3, #0
   2493c:	13520001 	cmpne	r2, #1
   24940:	8a000020 	bhi	249c8 <CGPIOPin::DisconnectInterrupt()+0x9c>
   24944:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   24948:	e1a01000 	mov	r1, r0
   2494c:	e3530006 	cmp	r3, #6
   24950:	1a00000c 	bne	24988 <CGPIOPin::DisconnectInterrupt()+0x5c>
   24954:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   24958:	e3530006 	cmp	r3, #6
   2495c:	1a00000d 	bne	24998 <CGPIOPin::DisconnectInterrupt()+0x6c>
   24960:	e590301c 	ldr	r3, [r0, #28]
   24964:	e3530000 	cmp	r3, #0
   24968:	0a00000e 	beq	249a8 <CGPIOPin::DisconnectInterrupt()+0x7c>
   2496c:	e3a03000 	mov	r3, #0
   24970:	e5900018 	ldr	r0, [r0, #24]
   24974:	e581301c 	str	r3, [r1, #28]
   24978:	e1500003 	cmp	r0, r3
   2497c:	0a00000d 	beq	249b8 <CGPIOPin::DisconnectInterrupt()+0x8c>
   24980:	e8bd4010 	pop	{r4, lr}
   24984:	ea001b73 	b	2b758 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   24988:	e59f1048 	ldr	r1, [pc, #72]	; 249d8 <CGPIOPin::DisconnectInterrupt()+0xac>
   2498c:	e3a020d5 	mov	r2, #213	; 0xd5
   24990:	e2810f42 	add	r0, r1, #264	; 0x108
   24994:	ebfffb39 	bl	23680 <assertion_failed>
   24998:	e59f1038 	ldr	r1, [pc, #56]	; 249d8 <CGPIOPin::DisconnectInterrupt()+0xac>
   2499c:	e3a020d6 	mov	r2, #214	; 0xd6
   249a0:	e2810f4b 	add	r0, r1, #300	; 0x12c
   249a4:	ebfffb35 	bl	23680 <assertion_failed>
   249a8:	e59f1028 	ldr	r1, [pc, #40]	; 249d8 <CGPIOPin::DisconnectInterrupt()+0xac>
   249ac:	e3a020d8 	mov	r2, #216	; 0xd8
   249b0:	e2810f61 	add	r0, r1, #388	; 0x184
   249b4:	ebfffb31 	bl	23680 <assertion_failed>
   249b8:	e59f1018 	ldr	r1, [pc, #24]	; 249d8 <CGPIOPin::DisconnectInterrupt()+0xac>
   249bc:	e3a020db 	mov	r2, #219	; 0xdb
   249c0:	e2810f5d 	add	r0, r1, #372	; 0x174
   249c4:	ebfffb2d 	bl	23680 <assertion_failed>
   249c8:	e59f1008 	ldr	r1, [pc, #8]	; 249d8 <CGPIOPin::DisconnectInterrupt()+0xac>
   249cc:	e3a020d3 	mov	r2, #211	; 0xd3
   249d0:	e2810090 	add	r0, r1, #144	; 0x90
   249d4:	ebfffb29 	bl	23680 <assertion_failed>
   249d8:	0003a628 	.word	0x0003a628

000249dc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   249dc:	e5d03010 	ldrb	r3, [r0, #16]
   249e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   249e4:	e2432002 	sub	r2, r3, #2
   249e8:	e3530000 	cmp	r3, #0
   249ec:	13520001 	cmpne	r2, #1
   249f0:	8a000030 	bhi	24ab8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
   249f4:	e590301c 	ldr	r3, [r0, #28]
   249f8:	e1a04000 	mov	r4, r0
   249fc:	e3530000 	cmp	r3, #0
   24a00:	0a00001c 	beq	24a78 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
   24a04:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   24a08:	e3530006 	cmp	r3, #6
   24a0c:	1a00001d 	bne	24a88 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
   24a10:	e3510005 	cmp	r1, #5
   24a14:	ca00001f 	bgt	24a98 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xbc>
   24a18:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   24a1c:	e1530001 	cmp	r3, r1
   24a20:	0a000020 	beq	24aa8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
   24a24:	e59f709c 	ldr	r7, [pc, #156]	; 24ac8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
   24a28:	e5903008 	ldr	r3, [r0, #8]
   24a2c:	e5970000 	ldr	r0, [r7]
   24a30:	e59f6094 	ldr	r6, [pc, #148]	; 24acc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
   24a34:	e0815081 	add	r5, r1, r1, lsl #1
   24a38:	e3500000 	cmp	r0, #0
   24a3c:	e5c41025 	strb	r1, [r4, #37]	; 0x25
   24a40:	e1a05105 	lsl	r5, r5, #2
   24a44:	e0836006 	add	r6, r3, r6
   24a48:	1a000008 	bne	24a70 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   24a4c:	e594200c 	ldr	r2, [r4, #12]
   24a50:	e7963005 	ldr	r3, [r6, r5]
   24a54:	e1833002 	orr	r3, r3, r2
   24a58:	e7863005 	str	r3, [r6, r5]
   24a5c:	e5973000 	ldr	r3, [r7]
   24a60:	e3530000 	cmp	r3, #0
   24a64:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   24a68:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   24a6c:	ea00187d 	b	2ac68 <LeaveCritical>
   24a70:	eb001851 	bl	2abbc <EnterCritical>
   24a74:	eafffff4 	b	24a4c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x70>
   24a78:	e59f1050 	ldr	r1, [pc, #80]	; 24ad0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   24a7c:	e3a020e4 	mov	r2, #228	; 0xe4
   24a80:	e2810f61 	add	r0, r1, #388	; 0x184
   24a84:	ebfffafd 	bl	23680 <assertion_failed>
   24a88:	e59f1040 	ldr	r1, [pc, #64]	; 24ad0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   24a8c:	e3a020e6 	mov	r2, #230	; 0xe6
   24a90:	e2810f42 	add	r0, r1, #264	; 0x108
   24a94:	ebfffaf9 	bl	23680 <assertion_failed>
   24a98:	e59f1030 	ldr	r1, [pc, #48]	; 24ad0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   24a9c:	e3a020e7 	mov	r2, #231	; 0xe7
   24aa0:	e2810f65 	add	r0, r1, #404	; 0x194
   24aa4:	ebfffaf5 	bl	23680 <assertion_failed>
   24aa8:	e59f1020 	ldr	r1, [pc, #32]	; 24ad0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   24aac:	e3a020e8 	mov	r2, #232	; 0xe8
   24ab0:	e2810f6e 	add	r0, r1, #440	; 0x1b8
   24ab4:	ebfffaf1 	bl	23680 <assertion_failed>
   24ab8:	e59f1010 	ldr	r1, [pc, #16]	; 24ad0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   24abc:	e3a020e3 	mov	r2, #227	; 0xe3
   24ac0:	e2810090 	add	r0, r1, #144	; 0x90
   24ac4:	ebfffaed 	bl	23680 <assertion_failed>
   24ac8:	0003e38c 	.word	0x0003e38c
   24acc:	2020004c 	.word	0x2020004c
   24ad0:	0003a628 	.word	0x0003a628

00024ad4 <CGPIOPin::DisableInterrupt()>:
   24ad4:	e5d03010 	ldrb	r3, [r0, #16]
   24ad8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24adc:	e2432002 	sub	r2, r3, #2
   24ae0:	e3530000 	cmp	r3, #0
   24ae4:	13520001 	cmpne	r2, #1
   24ae8:	8a00001d 	bhi	24b64 <CGPIOPin::DisableInterrupt()+0x90>
   24aec:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   24af0:	e1a05000 	mov	r5, r0
   24af4:	e3530005 	cmp	r3, #5
   24af8:	ca000015 	bgt	24b54 <CGPIOPin::DisableInterrupt()+0x80>
   24afc:	e59f7070 	ldr	r7, [pc, #112]	; 24b74 <CGPIOPin::DisableInterrupt()+0xa0>
   24b00:	e5902008 	ldr	r2, [r0, #8]
   24b04:	e5970000 	ldr	r0, [r7]
   24b08:	e59f6068 	ldr	r6, [pc, #104]	; 24b78 <CGPIOPin::DisableInterrupt()+0xa4>
   24b0c:	e0833083 	add	r3, r3, r3, lsl #1
   24b10:	e3500000 	cmp	r0, #0
   24b14:	e1a04103 	lsl	r4, r3, #2
   24b18:	e0826006 	add	r6, r2, r6
   24b1c:	1a00000a 	bne	24b4c <CGPIOPin::DisableInterrupt()+0x78>
   24b20:	e7963004 	ldr	r3, [r6, r4]
   24b24:	e595200c 	ldr	r2, [r5, #12]
   24b28:	e1c33002 	bic	r3, r3, r2
   24b2c:	e7863004 	str	r3, [r6, r4]
   24b30:	e5973000 	ldr	r3, [r7]
   24b34:	e3530000 	cmp	r3, #0
   24b38:	0a000000 	beq	24b40 <CGPIOPin::DisableInterrupt()+0x6c>
   24b3c:	eb001849 	bl	2ac68 <LeaveCritical>
   24b40:	e3a03006 	mov	r3, #6
   24b44:	e5c53025 	strb	r3, [r5, #37]	; 0x25
   24b48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24b4c:	eb00181a 	bl	2abbc <EnterCritical>
   24b50:	eafffff2 	b	24b20 <CGPIOPin::DisableInterrupt()+0x4c>
   24b54:	e59f1020 	ldr	r1, [pc, #32]	; 24b7c <CGPIOPin::DisableInterrupt()+0xa8>
   24b58:	e3a020fb 	mov	r2, #251	; 0xfb
   24b5c:	e2810f75 	add	r0, r1, #468	; 0x1d4
   24b60:	ebfffac6 	bl	23680 <assertion_failed>
   24b64:	e59f1010 	ldr	r1, [pc, #16]	; 24b7c <CGPIOPin::DisableInterrupt()+0xa8>
   24b68:	e3a020f9 	mov	r2, #249	; 0xf9
   24b6c:	e2810090 	add	r0, r1, #144	; 0x90
   24b70:	ebfffac2 	bl	23680 <assertion_failed>
   24b74:	0003e38c 	.word	0x0003e38c
   24b78:	2020004c 	.word	0x2020004c
   24b7c:	0003a628 	.word	0x0003a628

00024b80 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   24b80:	e5d03010 	ldrb	r3, [r0, #16]
   24b84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24b88:	e2432002 	sub	r2, r3, #2
   24b8c:	e3530000 	cmp	r3, #0
   24b90:	13520001 	cmpne	r2, #1
   24b94:	8a000030 	bhi	24c5c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
   24b98:	e590301c 	ldr	r3, [r0, #28]
   24b9c:	e1a04000 	mov	r4, r0
   24ba0:	e3530000 	cmp	r3, #0
   24ba4:	0a00001c 	beq	24c1c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
   24ba8:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   24bac:	e3530006 	cmp	r3, #6
   24bb0:	1a00001d 	bne	24c2c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
   24bb4:	e3510005 	cmp	r1, #5
   24bb8:	ca00001f 	bgt	24c3c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xbc>
   24bbc:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   24bc0:	e1530001 	cmp	r3, r1
   24bc4:	0a000020 	beq	24c4c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
   24bc8:	e59f709c 	ldr	r7, [pc, #156]	; 24c6c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
   24bcc:	e5903008 	ldr	r3, [r0, #8]
   24bd0:	e5970000 	ldr	r0, [r7]
   24bd4:	e59f6094 	ldr	r6, [pc, #148]	; 24c70 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
   24bd8:	e0815081 	add	r5, r1, r1, lsl #1
   24bdc:	e3500000 	cmp	r0, #0
   24be0:	e5c41026 	strb	r1, [r4, #38]	; 0x26
   24be4:	e1a05105 	lsl	r5, r5, #2
   24be8:	e0836006 	add	r6, r3, r6
   24bec:	1a000008 	bne	24c14 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   24bf0:	e594200c 	ldr	r2, [r4, #12]
   24bf4:	e7963005 	ldr	r3, [r6, r5]
   24bf8:	e1833002 	orr	r3, r3, r2
   24bfc:	e7863005 	str	r3, [r6, r5]
   24c00:	e5973000 	ldr	r3, [r7]
   24c04:	e3530000 	cmp	r3, #0
   24c08:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   24c0c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   24c10:	ea001814 	b	2ac68 <LeaveCritical>
   24c14:	eb0017e8 	bl	2abbc <EnterCritical>
   24c18:	eafffff4 	b	24bf0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x70>
   24c1c:	e59f1050 	ldr	r1, [pc, #80]	; 24c74 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   24c20:	e59f2050 	ldr	r2, [pc, #80]	; 24c78 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
   24c24:	e2810f61 	add	r0, r1, #388	; 0x184
   24c28:	ebfffa94 	bl	23680 <assertion_failed>
   24c2c:	e59f1040 	ldr	r1, [pc, #64]	; 24c74 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   24c30:	e59f2044 	ldr	r2, [pc, #68]	; 24c7c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
   24c34:	e2810f4b 	add	r0, r1, #300	; 0x12c
   24c38:	ebfffa90 	bl	23680 <assertion_failed>
   24c3c:	e59f1030 	ldr	r1, [pc, #48]	; 24c74 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   24c40:	e3a02e11 	mov	r2, #272	; 0x110
   24c44:	e2810f65 	add	r0, r1, #404	; 0x194
   24c48:	ebfffa8c 	bl	23680 <assertion_failed>
   24c4c:	e59f1020 	ldr	r1, [pc, #32]	; 24c74 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   24c50:	e59f2028 	ldr	r2, [pc, #40]	; 24c80 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x100>
   24c54:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   24c58:	ebfffa88 	bl	23680 <assertion_failed>
   24c5c:	e59f1010 	ldr	r1, [pc, #16]	; 24c74 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   24c60:	e3a02f43 	mov	r2, #268	; 0x10c
   24c64:	e2810090 	add	r0, r1, #144	; 0x90
   24c68:	ebfffa84 	bl	23680 <assertion_failed>
   24c6c:	0003e38c 	.word	0x0003e38c
   24c70:	2020004c 	.word	0x2020004c
   24c74:	0003a628 	.word	0x0003a628
   24c78:	0000010d 	.word	0x0000010d
   24c7c:	0000010f 	.word	0x0000010f
   24c80:	00000111 	.word	0x00000111

00024c84 <CGPIOPin::DisableInterrupt2()>:
   24c84:	e5d03010 	ldrb	r3, [r0, #16]
   24c88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24c8c:	e2432002 	sub	r2, r3, #2
   24c90:	e3530000 	cmp	r3, #0
   24c94:	13520001 	cmpne	r2, #1
   24c98:	8a00001d 	bhi	24d14 <CGPIOPin::DisableInterrupt2()+0x90>
   24c9c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   24ca0:	e1a05000 	mov	r5, r0
   24ca4:	e3530005 	cmp	r3, #5
   24ca8:	ca000015 	bgt	24d04 <CGPIOPin::DisableInterrupt2()+0x80>
   24cac:	e59f7070 	ldr	r7, [pc, #112]	; 24d24 <CGPIOPin::DisableInterrupt2()+0xa0>
   24cb0:	e5902008 	ldr	r2, [r0, #8]
   24cb4:	e5970000 	ldr	r0, [r7]
   24cb8:	e59f6068 	ldr	r6, [pc, #104]	; 24d28 <CGPIOPin::DisableInterrupt2()+0xa4>
   24cbc:	e0833083 	add	r3, r3, r3, lsl #1
   24cc0:	e3500000 	cmp	r0, #0
   24cc4:	e1a04103 	lsl	r4, r3, #2
   24cc8:	e0826006 	add	r6, r2, r6
   24ccc:	1a00000a 	bne	24cfc <CGPIOPin::DisableInterrupt2()+0x78>
   24cd0:	e7963004 	ldr	r3, [r6, r4]
   24cd4:	e595200c 	ldr	r2, [r5, #12]
   24cd8:	e1c33002 	bic	r3, r3, r2
   24cdc:	e7863004 	str	r3, [r6, r4]
   24ce0:	e5973000 	ldr	r3, [r7]
   24ce4:	e3530000 	cmp	r3, #0
   24ce8:	0a000000 	beq	24cf0 <CGPIOPin::DisableInterrupt2()+0x6c>
   24cec:	eb0017dd 	bl	2ac68 <LeaveCritical>
   24cf0:	e3a03006 	mov	r3, #6
   24cf4:	e5c53026 	strb	r3, [r5, #38]	; 0x26
   24cf8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24cfc:	eb0017ae 	bl	2abbc <EnterCritical>
   24d00:	eafffff2 	b	24cd0 <CGPIOPin::DisableInterrupt2()+0x4c>
   24d04:	e59f1020 	ldr	r1, [pc, #32]	; 24d2c <CGPIOPin::DisableInterrupt2()+0xa8>
   24d08:	e3a02f49 	mov	r2, #292	; 0x124
   24d0c:	e2810f85 	add	r0, r1, #532	; 0x214
   24d10:	ebfffa5a 	bl	23680 <assertion_failed>
   24d14:	e59f1010 	ldr	r1, [pc, #16]	; 24d2c <CGPIOPin::DisableInterrupt2()+0xa8>
   24d18:	e59f2010 	ldr	r2, [pc, #16]	; 24d30 <CGPIOPin::DisableInterrupt2()+0xac>
   24d1c:	e2810090 	add	r0, r1, #144	; 0x90
   24d20:	ebfffa56 	bl	23680 <assertion_failed>
   24d24:	0003e38c 	.word	0x0003e38c
   24d28:	2020004c 	.word	0x2020004c
   24d2c:	0003a628 	.word	0x0003a628
   24d30:	00000122 	.word	0x00000122

00024d34 <CGPIOPin::AcknowledgeInterrupt()>:
   24d34:	e590301c 	ldr	r3, [r0, #28]
   24d38:	e92d4010 	push	{r4, lr}
   24d3c:	e3530000 	cmp	r3, #0
   24d40:	0a000009 	beq	24d6c <CGPIOPin::AcknowledgeInterrupt()+0x38>
   24d44:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
   24d48:	e3530000 	cmp	r3, #0
   24d4c:	1a00000a 	bne	24d7c <CGPIOPin::AcknowledgeInterrupt()+0x48>
   24d50:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   24d54:	e59f2030 	ldr	r2, [pc, #48]	; 24d8c <CGPIOPin::AcknowledgeInterrupt()+0x58>
   24d58:	e590c00c 	ldr	ip, [r0, #12]
   24d5c:	e5901008 	ldr	r1, [r0, #8]
   24d60:	e781c002 	str	ip, [r1, r2]
   24d64:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   24d68:	e8bd8010 	pop	{r4, pc}
   24d6c:	e59f101c 	ldr	r1, [pc, #28]	; 24d90 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   24d70:	e59f201c 	ldr	r2, [pc, #28]	; 24d94 <CGPIOPin::AcknowledgeInterrupt()+0x60>
   24d74:	e2810f61 	add	r0, r1, #388	; 0x184
   24d78:	ebfffa40 	bl	23680 <assertion_failed>
   24d7c:	e59f100c 	ldr	r1, [pc, #12]	; 24d90 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   24d80:	e3a02f4d 	mov	r2, #308	; 0x134
   24d84:	e2810f8e 	add	r0, r1, #568	; 0x238
   24d88:	ebfffa3c 	bl	23680 <assertion_failed>
   24d8c:	20200040 	.word	0x20200040
   24d90:	0003a628 	.word	0x0003a628
   24d94:	00000133 	.word	0x00000133

00024d98 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   24d98:	e3a03000 	mov	r3, #0
   24d9c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   24da0:	e1d13000 	bics	r3, r1, r0
   24da4:	159f2018 	ldrne	r2, [pc, #24]	; 24dc4 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   24da8:	15823028 	strne	r3, [r2, #40]	; 0x28
   24dac:	e0100001 	ands	r0, r0, r1
   24db0:	159f300c 	ldrne	r3, [pc, #12]	; 24dc4 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   24db4:	1583001c 	strne	r0, [r3, #28]
   24db8:	e3a03000 	mov	r3, #0
   24dbc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   24dc0:	e12fff1e 	bx	lr
   24dc4:	20200000 	.word	0x20200000

00024dc8 <CGPIOPin::ReadAll()>:
   24dc8:	e3a03000 	mov	r3, #0
   24dcc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   24dd0:	e59f2008 	ldr	r2, [pc, #8]	; 24de0 <CGPIOPin::ReadAll()+0x18>
   24dd4:	e5920034 	ldr	r0, [r2, #52]	; 0x34
   24dd8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   24ddc:	e12fff1e 	bx	lr
   24de0:	20200000 	.word	0x20200000

00024de4 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   24de4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24de8:	e59f5080 	ldr	r5, [pc, #128]	; 24e70 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x8c>
   24dec:	e1a06000 	mov	r6, r0
   24df0:	e5950000 	ldr	r0, [r5]
   24df4:	e1a07001 	mov	r7, r1
   24df8:	e3500000 	cmp	r0, #0
   24dfc:	1a000015 	bne	24e58 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x74>
   24e00:	e3a04000 	mov	r4, #0
   24e04:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   24e08:	e3570002 	cmp	r7, #2
   24e0c:	e5969008 	ldr	r9, [r6, #8]
   24e10:	e59f805c 	ldr	r8, [pc, #92]	; 24e74 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   24e14:	ca000011 	bgt	24e60 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x7c>
   24e18:	e59fa058 	ldr	sl, [pc, #88]	; 24e78 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x94>
   24e1c:	e3a00005 	mov	r0, #5
   24e20:	e58a7094 	str	r7, [sl, #148]	; 0x94
   24e24:	eb000fa3 	bl	28cb8 <CTimer::SimpleusDelay(unsigned int)>
   24e28:	e596300c 	ldr	r3, [r6, #12]
   24e2c:	e3a00005 	mov	r0, #5
   24e30:	e7893008 	str	r3, [r9, r8]
   24e34:	eb000f9f 	bl	28cb8 <CTimer::SimpleusDelay(unsigned int)>
   24e38:	e58a4094 	str	r4, [sl, #148]	; 0x94
   24e3c:	e7894008 	str	r4, [r9, r8]
   24e40:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   24e44:	e5953000 	ldr	r3, [r5]
   24e48:	e3530000 	cmp	r3, #0
   24e4c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   24e50:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   24e54:	ea001783 	b	2ac68 <LeaveCritical>
   24e58:	eb001757 	bl	2abbc <EnterCritical>
   24e5c:	eaffffe7 	b	24e00 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x1c>
   24e60:	e59f1014 	ldr	r1, [pc, #20]	; 24e7c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x98>
   24e64:	e59f2014 	ldr	r2, [pc, #20]	; 24e80 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x9c>
   24e68:	e2810f91 	add	r0, r1, #580	; 0x244
   24e6c:	ebfffa03 	bl	23680 <assertion_failed>
   24e70:	0003e38c 	.word	0x0003e38c
   24e74:	20200098 	.word	0x20200098
   24e78:	20200000 	.word	0x20200000
   24e7c:	0003a628 	.word	0x0003a628
   24e80:	00000165 	.word	0x00000165

00024e84 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   24e84:	e5903004 	ldr	r3, [r0, #4]
   24e88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24e8c:	e3530035 	cmp	r3, #53	; 0x35
   24e90:	8a00001e 	bhi	24f10 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
   24e94:	e59f2094 	ldr	r2, [pc, #148]	; 24f30 <CGPIOPin::SetAlternateFunction(unsigned int)+0xac>
   24e98:	e1a06001 	mov	r6, r1
   24e9c:	e3510005 	cmp	r1, #5
   24ea0:	e0821392 	umull	r1, r2, r2, r3
   24ea4:	e1a021a2 	lsr	r2, r2, #3
   24ea8:	e2825302 	add	r5, r2, #134217728	; 0x8000000
   24eac:	e0822102 	add	r2, r2, r2, lsl #2
   24eb0:	e2855702 	add	r5, r5, #524288	; 0x80000
   24eb4:	e0433082 	sub	r3, r3, r2, lsl #1
   24eb8:	e1a05105 	lsl	r5, r5, #2
   24ebc:	e0834083 	add	r4, r3, r3, lsl #1
   24ec0:	8a000016 	bhi	24f20 <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
   24ec4:	e59f7068 	ldr	r7, [pc, #104]	; 24f34 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
   24ec8:	e5970000 	ldr	r0, [r7]
   24ecc:	e3500000 	cmp	r0, #0
   24ed0:	1a00000c 	bne	24f08 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
   24ed4:	e3a00007 	mov	r0, #7
   24ed8:	e59f1058 	ldr	r1, [pc, #88]	; 24f38 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb4>
   24edc:	e5953000 	ldr	r3, [r5]
   24ee0:	e0816106 	add	r6, r1, r6, lsl #2
   24ee4:	e5962260 	ldr	r2, [r6, #608]	; 0x260
   24ee8:	e1c33410 	bic	r3, r3, r0, lsl r4
   24eec:	e1833412 	orr	r3, r3, r2, lsl r4
   24ef0:	e5853000 	str	r3, [r5]
   24ef4:	e5973000 	ldr	r3, [r7]
   24ef8:	e3530000 	cmp	r3, #0
   24efc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   24f00:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   24f04:	ea001757 	b	2ac68 <LeaveCritical>
   24f08:	eb00172b 	bl	2abbc <EnterCritical>
   24f0c:	eafffff0 	b	24ed4 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
   24f10:	e59f1024 	ldr	r1, [pc, #36]	; 24f3c <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   24f14:	e59f2024 	ldr	r2, [pc, #36]	; 24f40 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
   24f18:	e2810020 	add	r0, r1, #32
   24f1c:	ebfff9d7 	bl	23680 <assertion_failed>
   24f20:	e59f1014 	ldr	r1, [pc, #20]	; 24f3c <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   24f24:	e59f2018 	ldr	r2, [pc, #24]	; 24f44 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
   24f28:	e2810f9a 	add	r0, r1, #616	; 0x268
   24f2c:	ebfff9d3 	bl	23680 <assertion_failed>
   24f30:	cccccccd 	.word	0xcccccccd
   24f34:	0003e38c 	.word	0x0003e38c
   24f38:	0003a618 	.word	0x0003a618
   24f3c:	0003a628 	.word	0x0003a628
   24f40:	00000181 	.word	0x00000181
   24f44:	00000185 	.word	0x00000185

00024f48 <CGPIOPin::InterruptHandler()>:
   24f48:	e5d03010 	ldrb	r3, [r0, #16]
   24f4c:	e92d4010 	push	{r4, lr}
   24f50:	e2432002 	sub	r2, r3, #2
   24f54:	e3530000 	cmp	r3, #0
   24f58:	13520001 	cmpne	r2, #1
   24f5c:	8a000013 	bhi	24fb0 <CGPIOPin::InterruptHandler()+0x68>
   24f60:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   24f64:	e3530005 	cmp	r3, #5
   24f68:	ca000005 	bgt	24f84 <CGPIOPin::InterruptHandler()+0x3c>
   24f6c:	e590301c 	ldr	r3, [r0, #28]
   24f70:	e3530000 	cmp	r3, #0
   24f74:	0a000009 	beq	24fa0 <CGPIOPin::InterruptHandler()+0x58>
   24f78:	e8bd4010 	pop	{r4, lr}
   24f7c:	e5900020 	ldr	r0, [r0, #32]
   24f80:	e12fff13 	bx	r3
   24f84:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   24f88:	e3530005 	cmp	r3, #5
   24f8c:	dafffff6 	ble	24f6c <CGPIOPin::InterruptHandler()+0x24>
   24f90:	e59f1028 	ldr	r1, [pc, #40]	; 24fc0 <CGPIOPin::InterruptHandler()+0x78>
   24f94:	e59f2028 	ldr	r2, [pc, #40]	; 24fc4 <CGPIOPin::InterruptHandler()+0x7c>
   24f98:	e2810f9e 	add	r0, r1, #632	; 0x278
   24f9c:	ebfff9b7 	bl	23680 <assertion_failed>
   24fa0:	e59f1018 	ldr	r1, [pc, #24]	; 24fc0 <CGPIOPin::InterruptHandler()+0x78>
   24fa4:	e3a02f66 	mov	r2, #408	; 0x198
   24fa8:	e2810f61 	add	r0, r1, #388	; 0x184
   24fac:	ebfff9b3 	bl	23680 <assertion_failed>
   24fb0:	e59f1008 	ldr	r1, [pc, #8]	; 24fc0 <CGPIOPin::InterruptHandler()+0x78>
   24fb4:	e3a02f65 	mov	r2, #404	; 0x194
   24fb8:	e2810090 	add	r0, r1, #144	; 0x90
   24fbc:	ebfff9af 	bl	23680 <assertion_failed>
   24fc0:	0003a628 	.word	0x0003a628
   24fc4:	00000196 	.word	0x00000196

00024fc8 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   24fc8:	e3500035 	cmp	r0, #53	; 0x35
   24fcc:	e92d4070 	push	{r4, r5, r6, lr}
   24fd0:	8a000018 	bhi	25038 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   24fd4:	e3a02001 	mov	r2, #1
   24fd8:	e59f6068 	ldr	r6, [pc, #104]	; 25048 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x80>
   24fdc:	e59f4068 	ldr	r4, [pc, #104]	; 2504c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   24fe0:	e5963000 	ldr	r3, [r6]
   24fe4:	e08442a0 	add	r4, r4, r0, lsr #5
   24fe8:	e200501f 	and	r5, r0, #31
   24fec:	e3530000 	cmp	r3, #0
   24ff0:	e1a04104 	lsl	r4, r4, #2
   24ff4:	e1a05512 	lsl	r5, r2, r5
   24ff8:	1a00000b 	bne	2502c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
   24ffc:	e1e02005 	mvn	r2, r5
   25000:	e59f1048 	ldr	r1, [pc, #72]	; 25050 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
   25004:	e5943000 	ldr	r3, [r4]
   25008:	e0033002 	and	r3, r3, r2
   2500c:	e484300c 	str	r3, [r4], #12
   25010:	e1540001 	cmp	r4, r1
   25014:	9afffffa 	bls	25004 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
   25018:	e5963000 	ldr	r3, [r6]
   2501c:	e3530000 	cmp	r3, #0
   25020:	08bd8070 	popeq	{r4, r5, r6, pc}
   25024:	e8bd4070 	pop	{r4, r5, r6, lr}
   25028:	ea00170e 	b	2ac68 <LeaveCritical>
   2502c:	e1a00003 	mov	r0, r3
   25030:	eb0016e1 	bl	2abbc <EnterCritical>
   25034:	eafffff0 	b	24ffc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x34>
   25038:	e59f1014 	ldr	r1, [pc, #20]	; 25054 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
   2503c:	e59f2014 	ldr	r2, [pc, #20]	; 25058 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x90>
   25040:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   25044:	ebfff98d 	bl	23680 <assertion_failed>
   25048:	0003e38c 	.word	0x0003e38c
   2504c:	08080013 	.word	0x08080013
   25050:	2020008b 	.word	0x2020008b
   25054:	0003a628 	.word	0x0003a628
   25058:	0000019e 	.word	0x0000019e

0002505c <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   2505c:	e3a02001 	mov	r2, #1
   25060:	e59f3004 	ldr	r3, [pc, #4]	; 2506c <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
   25064:	e5832000 	str	r2, [r3]
   25068:	e12fff1e 	bx	lr
   2506c:	0003e38c 	.word	0x0003e38c

00025070 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   25070:	e3a01000 	mov	r1, #0
   25074:	ea00000a 	b	250a4 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
   25078:	e3520009 	cmp	r2, #9
   2507c:	8a000011 	bhi	250c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   25080:	e3730001 	cmn	r3, #1
   25084:	13a02000 	movne	r2, #0
   25088:	03a02001 	moveq	r2, #1
   2508c:	e1510003 	cmp	r1, r3
   25090:	91a01002 	movls	r1, r2
   25094:	83821001 	orrhi	r1, r2, #1
   25098:	e3510000 	cmp	r1, #0
   2509c:	1a000009 	bne	250c8 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   250a0:	e1a01003 	mov	r1, r3
   250a4:	e0d0c0d1 	ldrsb	ip, [r0], #1
   250a8:	e0813101 	add	r3, r1, r1, lsl #2
   250ac:	e24c2030 	sub	r2, ip, #48	; 0x30
   250b0:	e35c0000 	cmp	ip, #0
   250b4:	e0823083 	add	r3, r2, r3, lsl #1
   250b8:	e6ef2072 	uxtb	r2, r2
   250bc:	1affffed 	bne	25078 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
   250c0:	e1a00001 	mov	r0, r1
   250c4:	e12fff1e 	bx	lr
   250c8:	e3e01000 	mvn	r1, #0
   250cc:	e1a00001 	mov	r0, r1
   250d0:	e12fff1e 	bx	lr

000250d4 <CKernelOptions::~CKernelOptions()>:
   250d4:	e3a02000 	mov	r2, #0
   250d8:	e59f3004 	ldr	r3, [pc, #4]	; 250e4 <CKernelOptions::~CKernelOptions()+0x10>
   250dc:	e5832000 	str	r2, [r3]
   250e0:	e12fff1e 	bx	lr
   250e4:	0003e390 	.word	0x0003e390

000250e8 <CKernelOptions::GetWidth() const>:
   250e8:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   250ec:	e12fff1e 	bx	lr

000250f0 <CKernelOptions::GetHeight() const>:
   250f0:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   250f4:	e12fff1e 	bx	lr

000250f8 <CKernelOptions::GetLogDevice() const>:
   250f8:	e2800e81 	add	r0, r0, #2064	; 0x810
   250fc:	e2800008 	add	r0, r0, #8
   25100:	e12fff1e 	bx	lr

00025104 <CKernelOptions::GetLogLevel() const>:
   25104:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   25108:	e12fff1e 	bx	lr

0002510c <CKernelOptions::GetKeyMap() const>:
   2510c:	e2800e83 	add	r0, r0, #2096	; 0x830
   25110:	e12fff1e 	bx	lr

00025114 <CKernelOptions::GetUSBPowerDelay() const>:
   25114:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   25118:	e12fff1e 	bx	lr

0002511c <CKernelOptions::GetUSBFullSpeed() const>:
   2511c:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
   25120:	e12fff1e 	bx	lr

00025124 <CKernelOptions::GetSoundDevice() const>:
   25124:	e2800e83 	add	r0, r0, #2096	; 0x830
   25128:	e2800009 	add	r0, r0, #9
   2512c:	e12fff1e 	bx	lr

00025130 <CKernelOptions::GetSoundOption() const>:
   25130:	e5900850 	ldr	r0, [r0, #2128]	; 0x850
   25134:	e12fff1e 	bx	lr

00025138 <CKernelOptions::GetCPUSpeed() const>:
   25138:	e5d00854 	ldrb	r0, [r0, #2132]	; 0x854
   2513c:	e12fff1e 	bx	lr

00025140 <CKernelOptions::GetSoCMaxTemp() const>:
   25140:	e5900858 	ldr	r0, [r0, #2136]	; 0x858
   25144:	e12fff1e 	bx	lr

00025148 <CKernelOptions::Get()>:
   25148:	e59f3004 	ldr	r3, [pc, #4]	; 25154 <CKernelOptions::Get()+0xc>
   2514c:	e5930000 	ldr	r0, [r3]
   25150:	e12fff1e 	bx	lr
   25154:	0003e390 	.word	0x0003e390

00025158 <CKernelOptions::GetToken()>:
   25158:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
   2515c:	e1d320d0 	ldrsb	r2, [r3]
   25160:	e3520000 	cmp	r2, #0
   25164:	1a000005 	bne	25180 <CKernelOptions::GetToken()+0x28>
   25168:	ea000016 	b	251c8 <CKernelOptions::GetToken()+0x70>
   2516c:	e2833001 	add	r3, r3, #1
   25170:	e580380c 	str	r3, [r0, #2060]	; 0x80c
   25174:	e1d320d0 	ldrsb	r2, [r3]
   25178:	e3520000 	cmp	r2, #0
   2517c:	0a000011 	beq	251c8 <CKernelOptions::GetToken()+0x70>
   25180:	e3520020 	cmp	r2, #32
   25184:	0afffff8 	beq	2516c <CKernelOptions::GetToken()+0x14>
   25188:	e1a02003 	mov	r2, r3
   2518c:	ea000000 	b	25194 <CKernelOptions::GetToken()+0x3c>
   25190:	e1a02001 	mov	r2, r1
   25194:	e2821001 	add	r1, r2, #1
   25198:	e580180c 	str	r1, [r0, #2060]	; 0x80c
   2519c:	e1d2c0d1 	ldrsb	ip, [r2, #1]
   251a0:	e35c0000 	cmp	ip, #0
   251a4:	0a000008 	beq	251cc <CKernelOptions::GetToken()+0x74>
   251a8:	e35c0020 	cmp	ip, #32
   251ac:	1afffff7 	bne	25190 <CKernelOptions::GetToken()+0x38>
   251b0:	e3a0c000 	mov	ip, #0
   251b4:	e2822002 	add	r2, r2, #2
   251b8:	e580280c 	str	r2, [r0, #2060]	; 0x80c
   251bc:	e5c1c000 	strb	ip, [r1]
   251c0:	e1a00003 	mov	r0, r3
   251c4:	e12fff1e 	bx	lr
   251c8:	e3a03000 	mov	r3, #0
   251cc:	e1a00003 	mov	r0, r3
   251d0:	e12fff1e 	bx	lr

000251d4 <CKernelOptions::CKernelOptions()>:
   251d4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   251d8:	e3a02004 	mov	r2, #4
   251dc:	e1a04000 	mov	r4, r0
   251e0:	e3a05000 	mov	r5, #0
   251e4:	e3a0303c 	mov	r3, #60	; 0x3c
   251e8:	e2807e81 	add	r7, r0, #2064	; 0x810
   251ec:	e2877008 	add	r7, r7, #8
   251f0:	e580282c 	str	r2, [r0, #2092]	; 0x82c
   251f4:	e5803858 	str	r3, [r0, #2136]	; 0x858
   251f8:	e24dd014 	sub	sp, sp, #20
   251fc:	e59f1380 	ldr	r1, [pc, #896]	; 25584 <CKernelOptions::CKernelOptions()+0x3b0>
   25200:	e1a00007 	mov	r0, r7
   25204:	e5845810 	str	r5, [r4, #2064]	; 0x810
   25208:	e5845814 	str	r5, [r4, #2068]	; 0x814
   2520c:	e5845834 	str	r5, [r4, #2100]	; 0x834
   25210:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
   25214:	e5845850 	str	r5, [r4, #2128]	; 0x850
   25218:	e5c45854 	strb	r5, [r4, #2132]	; 0x854
   2521c:	e2849e83 	add	r9, r4, #2096	; 0x830
   25220:	eb000ff3 	bl	291f4 <strcpy>
   25224:	e59f135c 	ldr	r1, [pc, #860]	; 25588 <CKernelOptions::CKernelOptions()+0x3b4>
   25228:	e1a00009 	mov	r0, r9
   2522c:	eb000ff0 	bl	291f4 <strcpy>
   25230:	e59f3354 	ldr	r3, [pc, #852]	; 2558c <CKernelOptions::CKernelOptions()+0x3b8>
   25234:	e1a01005 	mov	r1, r5
   25238:	e5c45839 	strb	r5, [r4, #2105]	; 0x839
   2523c:	e28d0008 	add	r0, sp, #8
   25240:	e5834000 	str	r4, [r3]
   25244:	ebfff92e 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   25248:	e58d5000 	str	r5, [sp]
   2524c:	e1a02004 	mov	r2, r4
   25250:	e28d0008 	add	r0, sp, #8
   25254:	e59f3334 	ldr	r3, [pc, #820]	; 25590 <CKernelOptions::CKernelOptions()+0x3bc>
   25258:	e59f1334 	ldr	r1, [pc, #820]	; 25594 <CKernelOptions::CKernelOptions()+0x3c0>
   2525c:	ebfff934 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   25260:	e1500005 	cmp	r0, r5
   25264:	0a000037 	beq	25348 <CKernelOptions::CKernelOptions()+0x174>
   25268:	e5943008 	ldr	r3, [r4, #8]
   2526c:	e3530b02 	cmp	r3, #2048	; 0x800
   25270:	2a000034 	bcs	25348 <CKernelOptions::CKernelOptions()+0x174>
   25274:	e0843003 	add	r3, r4, r3
   25278:	e284200c 	add	r2, r4, #12
   2527c:	e59f8314 	ldr	r8, [pc, #788]	; 25598 <CKernelOptions::CKernelOptions()+0x3c4>
   25280:	e59fa314 	ldr	sl, [pc, #788]	; 2559c <CKernelOptions::CKernelOptions()+0x3c8>
   25284:	e5c3500c 	strb	r5, [r3, #12]
   25288:	e584280c 	str	r2, [r4, #2060]	; 0x80c
   2528c:	e1a00004 	mov	r0, r4
   25290:	ebffffb0 	bl	25158 <CKernelOptions::GetToken()>
   25294:	e2506000 	subs	r6, r0, #0
   25298:	0a00002a 	beq	25348 <CKernelOptions::CKernelOptions()+0x174>
   2529c:	e1d630d0 	ldrsb	r3, [r6]
   252a0:	e3530000 	cmp	r3, #0
   252a4:	0a000008 	beq	252cc <CKernelOptions::CKernelOptions()+0xf8>
   252a8:	e353003d 	cmp	r3, #61	; 0x3d
   252ac:	e1a05006 	mov	r5, r6
   252b0:	1a000002 	bne	252c0 <CKernelOptions::CKernelOptions()+0xec>
   252b4:	ea000028 	b	2535c <CKernelOptions::CKernelOptions()+0x188>
   252b8:	e353003d 	cmp	r3, #61	; 0x3d
   252bc:	0a000026 	beq	2535c <CKernelOptions::CKernelOptions()+0x188>
   252c0:	e1f530d1 	ldrsb	r3, [r5, #1]!
   252c4:	e3530000 	cmp	r3, #0
   252c8:	1afffffa 	bne	252b8 <CKernelOptions::CKernelOptions()+0xe4>
   252cc:	e1a01008 	mov	r1, r8
   252d0:	e1a00006 	mov	r0, r6
   252d4:	eb000f12 	bl	28f24 <strcmp>
   252d8:	e3500000 	cmp	r0, #0
   252dc:	0affffea 	beq	2528c <CKernelOptions::CKernelOptions()+0xb8>
   252e0:	e1a0100a 	mov	r1, sl
   252e4:	e1a00006 	mov	r0, r6
   252e8:	eb000f0d 	bl	28f24 <strcmp>
   252ec:	e3500000 	cmp	r0, #0
   252f0:	13a0b000 	movne	fp, #0
   252f4:	0affffe4 	beq	2528c <CKernelOptions::CKernelOptions()+0xb8>
   252f8:	e59f12a0 	ldr	r1, [pc, #672]	; 255a0 <CKernelOptions::CKernelOptions()+0x3cc>
   252fc:	e1a00006 	mov	r0, r6
   25300:	eb000f07 	bl	28f24 <strcmp>
   25304:	e2505000 	subs	r5, r0, #0
   25308:	0a000027 	beq	253ac <CKernelOptions::CKernelOptions()+0x1d8>
   2530c:	e59f1290 	ldr	r1, [pc, #656]	; 255a4 <CKernelOptions::CKernelOptions()+0x3d0>
   25310:	e1a00006 	mov	r0, r6
   25314:	eb000f02 	bl	28f24 <strcmp>
   25318:	e3500000 	cmp	r0, #0
   2531c:	1a000028 	bne	253c4 <CKernelOptions::CKernelOptions()+0x1f0>
   25320:	e35b0000 	cmp	fp, #0
   25324:	0affffd8 	beq	2528c <CKernelOptions::CKernelOptions()+0xb8>
   25328:	e1db30d0 	ldrsb	r3, [fp]
   2532c:	e3530000 	cmp	r3, #0
   25330:	0affffd5 	beq	2528c <CKernelOptions::CKernelOptions()+0xb8>
   25334:	e1a0000b 	mov	r0, fp
   25338:	ebffff4c 	bl	25070 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   2533c:	e3500004 	cmp	r0, #4
   25340:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
   25344:	eaffffd0 	b	2528c <CKernelOptions::CKernelOptions()+0xb8>
   25348:	e28d0008 	add	r0, sp, #8
   2534c:	ebfff8f3 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   25350:	e1a00004 	mov	r0, r4
   25354:	e28dd014 	add	sp, sp, #20
   25358:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2535c:	e3a03000 	mov	r3, #0
   25360:	e1a01008 	mov	r1, r8
   25364:	e5c53000 	strb	r3, [r5]
   25368:	e1a00006 	mov	r0, r6
   2536c:	eb000eec 	bl	28f24 <strcmp>
   25370:	e3500000 	cmp	r0, #0
   25374:	e285b001 	add	fp, r5, #1
   25378:	1a000044 	bne	25490 <CKernelOptions::CKernelOptions()+0x2bc>
   2537c:	e35b0000 	cmp	fp, #0
   25380:	0affffc1 	beq	2528c <CKernelOptions::CKernelOptions()+0xb8>
   25384:	e1d530d1 	ldrsb	r3, [r5, #1]
   25388:	e3530000 	cmp	r3, #0
   2538c:	0affffbe 	beq	2528c <CKernelOptions::CKernelOptions()+0xb8>
   25390:	e1a0000b 	mov	r0, fp
   25394:	ebffff35 	bl	25070 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   25398:	e59f3208 	ldr	r3, [pc, #520]	; 255a8 <CKernelOptions::CKernelOptions()+0x3d4>
   2539c:	e2402d0a 	sub	r2, r0, #640	; 0x280
   253a0:	e1520003 	cmp	r2, r3
   253a4:	95840810 	strls	r0, [r4, #2064]	; 0x810
   253a8:	eaffffb7 	b	2528c <CKernelOptions::CKernelOptions()+0xb8>
   253ac:	e1a0100b 	mov	r1, fp
   253b0:	e3a02013 	mov	r2, #19
   253b4:	e1a00007 	mov	r0, r7
   253b8:	eb000f98 	bl	29220 <strncpy>
   253bc:	e5c4582b 	strb	r5, [r4, #2091]	; 0x82b
   253c0:	eaffffb1 	b	2528c <CKernelOptions::CKernelOptions()+0xb8>
   253c4:	e59f11e0 	ldr	r1, [pc, #480]	; 255ac <CKernelOptions::CKernelOptions()+0x3d8>
   253c8:	e1a00006 	mov	r0, r6
   253cc:	eb000ed4 	bl	28f24 <strcmp>
   253d0:	e2505000 	subs	r5, r0, #0
   253d4:	1a000005 	bne	253f0 <CKernelOptions::CKernelOptions()+0x21c>
   253d8:	e1a0100b 	mov	r1, fp
   253dc:	e3a02002 	mov	r2, #2
   253e0:	e1a00009 	mov	r0, r9
   253e4:	eb000f8d 	bl	29220 <strncpy>
   253e8:	e5c45832 	strb	r5, [r4, #2098]	; 0x832
   253ec:	eaffffa6 	b	2528c <CKernelOptions::CKernelOptions()+0xb8>
   253f0:	e59f11b8 	ldr	r1, [pc, #440]	; 255b0 <CKernelOptions::CKernelOptions()+0x3dc>
   253f4:	e1a00006 	mov	r0, r6
   253f8:	eb000ec9 	bl	28f24 <strcmp>
   253fc:	e3500000 	cmp	r0, #0
   25400:	1a00000b 	bne	25434 <CKernelOptions::CKernelOptions()+0x260>
   25404:	e35b0000 	cmp	fp, #0
   25408:	0affff9f 	beq	2528c <CKernelOptions::CKernelOptions()+0xb8>
   2540c:	e1db30d0 	ldrsb	r3, [fp]
   25410:	e3530000 	cmp	r3, #0
   25414:	0affff9c 	beq	2528c <CKernelOptions::CKernelOptions()+0xb8>
   25418:	e1a0000b 	mov	r0, fp
   2541c:	ebffff13 	bl	25070 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   25420:	e59f318c 	ldr	r3, [pc, #396]	; 255b4 <CKernelOptions::CKernelOptions()+0x3e0>
   25424:	e24020c8 	sub	r2, r0, #200	; 0xc8
   25428:	e1520003 	cmp	r2, r3
   2542c:	95840834 	strls	r0, [r4, #2100]	; 0x834
   25430:	eaffff95 	b	2528c <CKernelOptions::CKernelOptions()+0xb8>
   25434:	e59f117c 	ldr	r1, [pc, #380]	; 255b8 <CKernelOptions::CKernelOptions()+0x3e4>
   25438:	e1a00006 	mov	r0, r6
   2543c:	eb000eb8 	bl	28f24 <strcmp>
   25440:	e3500000 	cmp	r0, #0
   25444:	1a000006 	bne	25464 <CKernelOptions::CKernelOptions()+0x290>
   25448:	e1a0000b 	mov	r0, fp
   2544c:	e59f1168 	ldr	r1, [pc, #360]	; 255bc <CKernelOptions::CKernelOptions()+0x3e8>
   25450:	eb000eb3 	bl	28f24 <strcmp>
   25454:	e3500000 	cmp	r0, #0
   25458:	03a03001 	moveq	r3, #1
   2545c:	05c43838 	strbeq	r3, [r4, #2104]	; 0x838
   25460:	eaffff89 	b	2528c <CKernelOptions::CKernelOptions()+0xb8>
   25464:	e59f1154 	ldr	r1, [pc, #340]	; 255c0 <CKernelOptions::CKernelOptions()+0x3ec>
   25468:	e1a00006 	mov	r0, r6
   2546c:	eb000eac 	bl	28f24 <strcmp>
   25470:	e2505000 	subs	r5, r0, #0
   25474:	1a000015 	bne	254d0 <CKernelOptions::CKernelOptions()+0x2fc>
   25478:	e1a0100b 	mov	r1, fp
   2547c:	e3a02013 	mov	r2, #19
   25480:	e2890009 	add	r0, r9, #9
   25484:	eb000f65 	bl	29220 <strncpy>
   25488:	e5c4584c 	strb	r5, [r4, #2124]	; 0x84c
   2548c:	eaffff7e 	b	2528c <CKernelOptions::CKernelOptions()+0xb8>
   25490:	e1a0100a 	mov	r1, sl
   25494:	e1a00006 	mov	r0, r6
   25498:	eb000ea1 	bl	28f24 <strcmp>
   2549c:	e3500000 	cmp	r0, #0
   254a0:	1affff94 	bne	252f8 <CKernelOptions::CKernelOptions()+0x124>
   254a4:	e35b0000 	cmp	fp, #0
   254a8:	0affff77 	beq	2528c <CKernelOptions::CKernelOptions()+0xb8>
   254ac:	e1d530d1 	ldrsb	r3, [r5, #1]
   254b0:	e3530000 	cmp	r3, #0
   254b4:	0affff74 	beq	2528c <CKernelOptions::CKernelOptions()+0xb8>
   254b8:	e1a0000b 	mov	r0, fp
   254bc:	ebfffeeb 	bl	25070 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   254c0:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   254c4:	e3530f96 	cmp	r3, #600	; 0x258
   254c8:	95840814 	strls	r0, [r4, #2068]	; 0x814
   254cc:	eaffff6e 	b	2528c <CKernelOptions::CKernelOptions()+0xb8>
   254d0:	e59f10ec 	ldr	r1, [pc, #236]	; 255c4 <CKernelOptions::CKernelOptions()+0x3f0>
   254d4:	e1a00006 	mov	r0, r6
   254d8:	eb000e91 	bl	28f24 <strcmp>
   254dc:	e3500000 	cmp	r0, #0
   254e0:	1a000009 	bne	2550c <CKernelOptions::CKernelOptions()+0x338>
   254e4:	e35b0000 	cmp	fp, #0
   254e8:	0affff67 	beq	2528c <CKernelOptions::CKernelOptions()+0xb8>
   254ec:	e1db30d0 	ldrsb	r3, [fp]
   254f0:	e3530000 	cmp	r3, #0
   254f4:	0affff64 	beq	2528c <CKernelOptions::CKernelOptions()+0xb8>
   254f8:	e1a0000b 	mov	r0, fp
   254fc:	ebfffedb 	bl	25070 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   25500:	e3500002 	cmp	r0, #2
   25504:	95840850 	strls	r0, [r4, #2128]	; 0x850
   25508:	eaffff5f 	b	2528c <CKernelOptions::CKernelOptions()+0xb8>
   2550c:	e59f10b4 	ldr	r1, [pc, #180]	; 255c8 <CKernelOptions::CKernelOptions()+0x3f4>
   25510:	e1a00006 	mov	r0, r6
   25514:	eb000e82 	bl	28f24 <strcmp>
   25518:	e3500000 	cmp	r0, #0
   2551c:	1a000006 	bne	2553c <CKernelOptions::CKernelOptions()+0x368>
   25520:	e1a0000b 	mov	r0, fp
   25524:	e59f10a0 	ldr	r1, [pc, #160]	; 255cc <CKernelOptions::CKernelOptions()+0x3f8>
   25528:	eb000e7d 	bl	28f24 <strcmp>
   2552c:	e3500000 	cmp	r0, #0
   25530:	03a03001 	moveq	r3, #1
   25534:	05c43854 	strbeq	r3, [r4, #2132]	; 0x854
   25538:	eaffff53 	b	2528c <CKernelOptions::CKernelOptions()+0xb8>
   2553c:	e1a00006 	mov	r0, r6
   25540:	e59f1088 	ldr	r1, [pc, #136]	; 255d0 <CKernelOptions::CKernelOptions()+0x3fc>
   25544:	eb000e76 	bl	28f24 <strcmp>
   25548:	e2903000 	adds	r3, r0, #0
   2554c:	13a03001 	movne	r3, #1
   25550:	e35b0000 	cmp	fp, #0
   25554:	03833001 	orreq	r3, r3, #1
   25558:	e3530000 	cmp	r3, #0
   2555c:	1affff4a 	bne	2528c <CKernelOptions::CKernelOptions()+0xb8>
   25560:	e1db30d0 	ldrsb	r3, [fp]
   25564:	e3530000 	cmp	r3, #0
   25568:	0affff47 	beq	2528c <CKernelOptions::CKernelOptions()+0xb8>
   2556c:	e1a0000b 	mov	r0, fp
   25570:	ebfffebe 	bl	25070 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   25574:	e2403028 	sub	r3, r0, #40	; 0x28
   25578:	e3530026 	cmp	r3, #38	; 0x26
   2557c:	95840858 	strls	r0, [r4, #2136]	; 0x858
   25580:	eaffff41 	b	2528c <CKernelOptions::CKernelOptions()+0xb8>
   25584:	0003a900 	.word	0x0003a900
   25588:	000387ec 	.word	0x000387ec
   2558c:	0003e390 	.word	0x0003e390
   25590:	0000080c 	.word	0x0000080c
   25594:	00050001 	.word	0x00050001
   25598:	0003a984 	.word	0x0003a984
   2559c:	0003a908 	.word	0x0003a908
   255a0:	0003a910 	.word	0x0003a910
   255a4:	0003a918 	.word	0x0003a918
   255a8:	0000053c 	.word	0x0000053c
   255ac:	0003a924 	.word	0x0003a924
   255b0:	0003a92c 	.word	0x0003a92c
   255b4:	00001e78 	.word	0x00001e78
   255b8:	0003a93c 	.word	0x0003a93c
   255bc:	0003a948 	.word	0x0003a948
   255c0:	0003a950 	.word	0x0003a950
   255c4:	0003a95c 	.word	0x0003a95c
   255c8:	0003a968 	.word	0x0003a968
   255cc:	0003a970 	.word	0x0003a970
   255d0:	0003a978 	.word	0x0003a978

000255d4 <CKernelOptions::GetOptionValue(char*)>:
   255d4:	e1d030d0 	ldrsb	r3, [r0]
   255d8:	e3530000 	cmp	r3, #0
   255dc:	1a000003 	bne	255f0 <CKernelOptions::GetOptionValue(char*)+0x1c>
   255e0:	ea000007 	b	25604 <CKernelOptions::GetOptionValue(char*)+0x30>
   255e4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   255e8:	e3530000 	cmp	r3, #0
   255ec:	0a000004 	beq	25604 <CKernelOptions::GetOptionValue(char*)+0x30>
   255f0:	e353003d 	cmp	r3, #61	; 0x3d
   255f4:	1afffffa 	bne	255e4 <CKernelOptions::GetOptionValue(char*)+0x10>
   255f8:	e3a02000 	mov	r2, #0
   255fc:	e2803001 	add	r3, r0, #1
   25600:	e5c02000 	strb	r2, [r0]
   25604:	e1a00003 	mov	r0, r3
   25608:	e12fff1e 	bx	lr

0002560c <CKernelOptions::GetDecimal(char*)>:
   2560c:	e2503000 	subs	r3, r0, #0
   25610:	0a000002 	beq	25620 <CKernelOptions::GetDecimal(char*)+0x14>
   25614:	e1d330d0 	ldrsb	r3, [r3]
   25618:	e3530000 	cmp	r3, #0
   2561c:	1a000001 	bne	25628 <CKernelOptions::GetDecimal(char*)+0x1c>
   25620:	e3e00000 	mvn	r0, #0
   25624:	e12fff1e 	bx	lr
   25628:	eafffe90 	b	25070 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0002562c <CLogger::CLogger(unsigned int, CTimer*)>:
   2562c:	e92d4010 	push	{r4, lr}
   25630:	e3a03000 	mov	r3, #0
   25634:	e1a04000 	mov	r4, r0
   25638:	e3a00001 	mov	r0, #1
   2563c:	e884000e 	stm	r4, {r1, r2, r3}
   25640:	e584300c 	str	r3, [r4, #12]
   25644:	e5843010 	str	r3, [r4, #16]
   25648:	e5843014 	str	r3, [r4, #20]
   2564c:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   25650:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   25654:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   25658:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   2565c:	e5840018 	str	r0, [r4, #24]
   25660:	e58400ec 	str	r0, [r4, #236]	; 0xec
   25664:	e3a00901 	mov	r0, #16384	; 0x4000
   25668:	eb001222 	bl	29ef8 <operator new[](unsigned int)>
   2566c:	e59f300c 	ldr	r3, [pc, #12]	; 25680 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
   25670:	e584000c 	str	r0, [r4, #12]
   25674:	e5834000 	str	r4, [r3]
   25678:	e1a00004 	mov	r0, r4
   2567c:	e8bd8010 	pop	{r4, pc}
   25680:	0003e394 	.word	0x0003e394

00025684 <CLogger::~CLogger()>:
   25684:	e3a02000 	mov	r2, #0
   25688:	e59f1064 	ldr	r1, [pc, #100]	; 256f4 <CLogger::~CLogger()+0x70>
   2568c:	e92d4070 	push	{r4, r5, r6, lr}
   25690:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
   25694:	e1a04000 	mov	r4, r0
   25698:	e1a06002 	mov	r6, r2
   2569c:	e3a05f42 	mov	r5, #264	; 0x108
   256a0:	e5812000 	str	r2, [r1]
   256a4:	ea000008 	b	256cc <CLogger::~CLogger()+0x48>
   256a8:	e591001c 	ldr	r0, [r1, #28]
   256ac:	e1a01005 	mov	r1, r5
   256b0:	eb00121d 	bl	29f2c <operator delete(void*, unsigned int)>
   256b4:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   256b8:	e2833001 	add	r3, r3, #1
   256bc:	e3530032 	cmp	r3, #50	; 0x32
   256c0:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   256c4:	03a03000 	moveq	r3, #0
   256c8:	058460e8 	streq	r6, [r4, #232]	; 0xe8
   256cc:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   256d0:	e0841103 	add	r1, r4, r3, lsl #2
   256d4:	e1520003 	cmp	r2, r3
   256d8:	1afffff2 	bne	256a8 <CLogger::~CLogger()+0x24>
   256dc:	e594000c 	ldr	r0, [r4, #12]
   256e0:	e3500000 	cmp	r0, #0
   256e4:	0a000000 	beq	256ec <CLogger::~CLogger()+0x68>
   256e8:	eb001209 	bl	29f14 <operator delete[](void*)>
   256ec:	e1a00004 	mov	r0, r4
   256f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   256f4:	0003e394 	.word	0x0003e394

000256f8 <CLogger::Initialize(CDevice*)>:
   256f8:	e92d4010 	push	{r4, lr}
   256fc:	e5801008 	str	r1, [r0, #8]
   25700:	e24dd008 	sub	sp, sp, #8
   25704:	e1a04000 	mov	r4, r0
   25708:	eb0003c9 	bl	26634 <CMachineInfo::Get()>
   2570c:	eb0002dc 	bl	26284 <CMachineInfo::GetMachineName() const>
   25710:	e59f301c 	ldr	r3, [pc, #28]	; 25734 <CLogger::Initialize(CDevice*)+0x3c>
   25714:	e58d0000 	str	r0, [sp]
   25718:	e283101c 	add	r1, r3, #28
   2571c:	e1a00004 	mov	r0, r4
   25720:	e3a02003 	mov	r2, #3
   25724:	eb000005 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   25728:	e3a00001 	mov	r0, #1
   2572c:	e28dd008 	add	sp, sp, #8
   25730:	e8bd8010 	pop	{r4, pc}
   25734:	0003a98c 	.word	0x0003a98c

00025738 <CLogger::SetNewTarget(CDevice*)>:
   25738:	e5801008 	str	r1, [r0, #8]
   2573c:	e12fff1e 	bx	lr

00025740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   25740:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   25744:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   25748:	e24dd010 	sub	sp, sp, #16
   2574c:	e28dc018 	add	ip, sp, #24
   25750:	e58dc000 	str	ip, [sp]
   25754:	e59d3014 	ldr	r3, [sp, #20]
   25758:	e58dc00c 	str	ip, [sp, #12]
   2575c:	eb000003 	bl	25770 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   25760:	e28dd010 	add	sp, sp, #16
   25764:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   25768:	e28dd004 	add	sp, sp, #4
   2576c:	e12fff1e 	bx	lr

00025770 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   25770:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25774:	e1a07003 	mov	r7, r3
   25778:	e24dd024 	sub	sp, sp, #36	; 0x24
   2577c:	e1a04000 	mov	r4, r0
   25780:	e1a0000d 	mov	r0, sp
   25784:	e1a05002 	mov	r5, r2
   25788:	e1a06001 	mov	r6, r1
   2578c:	eb000494 	bl	269e4 <CString::CString()>
   25790:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   25794:	e1a01007 	mov	r1, r7
   25798:	e1a0000d 	mov	r0, sp
   2579c:	eb0006ab 	bl	27250 <CString::FormatV(char const*, std::__va_list)>
   257a0:	e1a0000d 	mov	r0, sp
   257a4:	eb0004a4 	bl	26a3c <CString::operator char const*() const>
   257a8:	e1a02005 	mov	r2, r5
   257ac:	e1a03000 	mov	r3, r0
   257b0:	e1a01006 	mov	r1, r6
   257b4:	e1a00004 	mov	r0, r4
   257b8:	eb000103 	bl	25bcc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   257bc:	e5943000 	ldr	r3, [r4]
   257c0:	e1550003 	cmp	r5, r3
   257c4:	8a00002c 	bhi	2587c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
   257c8:	e28d0010 	add	r0, sp, #16
   257cc:	eb000484 	bl	269e4 <CString::CString()>
   257d0:	e3550000 	cmp	r5, #0
   257d4:	0a00002c 	beq	2588c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>
   257d8:	e5940004 	ldr	r0, [r4, #4]
   257dc:	e3500000 	cmp	r0, #0
   257e0:	0a00004c 	beq	25918 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a8>
   257e4:	eb000b24 	bl	2847c <CTimer::GetTimeString()>
   257e8:	e2507000 	subs	r7, r0, #0
   257ec:	0a000049 	beq	25918 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a8>
   257f0:	e1a00007 	mov	r0, r7
   257f4:	eb000490 	bl	26a3c <CString::operator char const*() const>
   257f8:	e1a01000 	mov	r1, r0
   257fc:	e28d0010 	add	r0, sp, #16
   25800:	eb0004bf 	bl	26b04 <CString::Append(char const*)>
   25804:	e59f114c 	ldr	r1, [pc, #332]	; 25958 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
   25808:	e28d0010 	add	r0, sp, #16
   2580c:	eb0004bc 	bl	26b04 <CString::Append(char const*)>
   25810:	e5973000 	ldr	r3, [r7]
   25814:	e1a00007 	mov	r0, r7
   25818:	e5933004 	ldr	r3, [r3, #4]
   2581c:	e12fff33 	blx	r3
   25820:	e1a01006 	mov	r1, r6
   25824:	e28d0010 	add	r0, sp, #16
   25828:	eb0004b5 	bl	26b04 <CString::Append(char const*)>
   2582c:	e59f1128 	ldr	r1, [pc, #296]	; 2595c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   25830:	e28d0010 	add	r0, sp, #16
   25834:	eb0004b2 	bl	26b04 <CString::Append(char const*)>
   25838:	e1a0000d 	mov	r0, sp
   2583c:	eb00047e 	bl	26a3c <CString::operator char const*() const>
   25840:	e1a01000 	mov	r1, r0
   25844:	e28d0010 	add	r0, sp, #16
   25848:	eb0004ad 	bl	26b04 <CString::Append(char const*)>
   2584c:	e3550000 	cmp	r5, #0
   25850:	0a00001e 	beq	258d0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   25854:	e59f1104 	ldr	r1, [pc, #260]	; 25960 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
   25858:	e28d0010 	add	r0, sp, #16
   2585c:	eb0004a8 	bl	26b04 <CString::Append(char const*)>
   25860:	e28d0010 	add	r0, sp, #16
   25864:	eb000474 	bl	26a3c <CString::operator char const*() const>
   25868:	e1a01000 	mov	r1, r0
   2586c:	e1a00004 	mov	r0, r4
   25870:	eb000079 	bl	25a5c <CLogger::Write(char const*)>
   25874:	e28d0010 	add	r0, sp, #16
   25878:	eb000426 	bl	26918 <CString::~CString()>
   2587c:	e1a0000d 	mov	r0, sp
   25880:	eb000424 	bl	26918 <CString::~CString()>
   25884:	e28dd024 	add	sp, sp, #36	; 0x24
   25888:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2588c:	e59f10d0 	ldr	r1, [pc, #208]	; 25964 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f4>
   25890:	e28d0010 	add	r0, sp, #16
   25894:	eb00046e 	bl	26a54 <CString::operator=(char const*)>
   25898:	e5940004 	ldr	r0, [r4, #4]
   2589c:	e3500000 	cmp	r0, #0
   258a0:	1a000028 	bne	25948 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
   258a4:	e1a01006 	mov	r1, r6
   258a8:	e28d0010 	add	r0, sp, #16
   258ac:	eb000494 	bl	26b04 <CString::Append(char const*)>
   258b0:	e59f10a4 	ldr	r1, [pc, #164]	; 2595c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   258b4:	e28d0010 	add	r0, sp, #16
   258b8:	eb000491 	bl	26b04 <CString::Append(char const*)>
   258bc:	e1a0000d 	mov	r0, sp
   258c0:	eb00045d 	bl	26a3c <CString::operator char const*() const>
   258c4:	e1a01000 	mov	r1, r0
   258c8:	e28d0010 	add	r0, sp, #16
   258cc:	eb00048c 	bl	26b04 <CString::Append(char const*)>
   258d0:	e59f1090 	ldr	r1, [pc, #144]	; 25968 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f8>
   258d4:	e28d0010 	add	r0, sp, #16
   258d8:	eb000489 	bl	26b04 <CString::Append(char const*)>
   258dc:	e59f107c 	ldr	r1, [pc, #124]	; 25960 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
   258e0:	e28d0010 	add	r0, sp, #16
   258e4:	eb000486 	bl	26b04 <CString::Append(char const*)>
   258e8:	e28d0010 	add	r0, sp, #16
   258ec:	eb000452 	bl	26a3c <CString::operator char const*() const>
   258f0:	e1a01000 	mov	r1, r0
   258f4:	e1a00004 	mov	r0, r4
   258f8:	eb000057 	bl	25a5c <CLogger::Write(char const*)>
   258fc:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   25900:	e3530000 	cmp	r3, #0
   25904:	0a000000 	beq	2590c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
   25908:	e12fff33 	blx	r3
   2590c:	e3a000ff 	mov	r0, #255	; 0xff
   25910:	eb000986 	bl	27f30 <set_qemu_exit_status>
   25914:	eb000989 	bl	27f40 <halt>
   25918:	e1a01006 	mov	r1, r6
   2591c:	e28d0010 	add	r0, sp, #16
   25920:	eb000477 	bl	26b04 <CString::Append(char const*)>
   25924:	e59f1030 	ldr	r1, [pc, #48]	; 2595c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   25928:	e28d0010 	add	r0, sp, #16
   2592c:	eb000474 	bl	26b04 <CString::Append(char const*)>
   25930:	e1a0000d 	mov	r0, sp
   25934:	eb000440 	bl	26a3c <CString::operator char const*() const>
   25938:	e1a01000 	mov	r1, r0
   2593c:	e28d0010 	add	r0, sp, #16
   25940:	eb00046f 	bl	26b04 <CString::Append(char const*)>
   25944:	eaffffc2 	b	25854 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
   25948:	eb000acb 	bl	2847c <CTimer::GetTimeString()>
   2594c:	e2507000 	subs	r7, r0, #0
   25950:	1affffa6 	bne	257f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x80>
   25954:	eaffffd2 	b	258a4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
   25958:	0003a9b8 	.word	0x0003a9b8
   2595c:	0003a9bc 	.word	0x0003a9bc
   25960:	0003a9c8 	.word	0x0003a9c8
   25964:	0003a9b0 	.word	0x0003a9b0
   25968:	0003a9c0 	.word	0x0003a9c0

0002596c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   2596c:	e590c000 	ldr	ip, [r0]
   25970:	e152000c 	cmp	r2, ip
   25974:	812fff1e 	bxhi	lr
   25978:	e92d4070 	push	{r4, r5, r6, lr}
   2597c:	e1a05003 	mov	r5, r3
   25980:	e3a03000 	mov	r3, #0
   25984:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   25988:	e1520003 	cmp	r2, r3
   2598c:	e1a04000 	mov	r4, r0
   25990:	e5cd3000 	strb	r3, [sp]
   25994:	0a00000f 	beq	259d8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   25998:	e1a0000d 	mov	r0, sp
   2599c:	eb000e32 	bl	2926c <strcat>
   259a0:	e1a0000d 	mov	r0, sp
   259a4:	e59f1090 	ldr	r1, [pc, #144]	; 25a3c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   259a8:	eb000e2f 	bl	2926c <strcat>
   259ac:	e1a01005 	mov	r1, r5
   259b0:	e1a0000d 	mov	r0, sp
   259b4:	eb000e2c 	bl	2926c <strcat>
   259b8:	e1a0000d 	mov	r0, sp
   259bc:	e59f107c 	ldr	r1, [pc, #124]	; 25a40 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   259c0:	eb000e29 	bl	2926c <strcat>
   259c4:	e1a0100d 	mov	r1, sp
   259c8:	e1a00004 	mov	r0, r4
   259cc:	eb000022 	bl	25a5c <CLogger::Write(char const*)>
   259d0:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   259d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   259d8:	e1a06001 	mov	r6, r1
   259dc:	e1a0000d 	mov	r0, sp
   259e0:	e59f105c 	ldr	r1, [pc, #92]	; 25a44 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   259e4:	eb000e02 	bl	291f4 <strcpy>
   259e8:	e1a01006 	mov	r1, r6
   259ec:	e1a0000d 	mov	r0, sp
   259f0:	eb000e1d 	bl	2926c <strcat>
   259f4:	e59f1040 	ldr	r1, [pc, #64]	; 25a3c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   259f8:	e1a0000d 	mov	r0, sp
   259fc:	eb000e1a 	bl	2926c <strcat>
   25a00:	e1a01005 	mov	r1, r5
   25a04:	e1a0000d 	mov	r0, sp
   25a08:	eb000e17 	bl	2926c <strcat>
   25a0c:	e59f1034 	ldr	r1, [pc, #52]	; 25a48 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
   25a10:	e1a0000d 	mov	r0, sp
   25a14:	eb000e14 	bl	2926c <strcat>
   25a18:	e59f1020 	ldr	r1, [pc, #32]	; 25a40 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   25a1c:	e1a0000d 	mov	r0, sp
   25a20:	eb000e11 	bl	2926c <strcat>
   25a24:	e1a0100d 	mov	r1, sp
   25a28:	e1a00004 	mov	r0, r4
   25a2c:	eb00000a 	bl	25a5c <CLogger::Write(char const*)>
   25a30:	e3a000ff 	mov	r0, #255	; 0xff
   25a34:	eb00093d 	bl	27f30 <set_qemu_exit_status>
   25a38:	eb000940 	bl	27f40 <halt>
   25a3c:	0003a9bc 	.word	0x0003a9bc
   25a40:	0003a9c8 	.word	0x0003a9c8
   25a44:	0003a9b0 	.word	0x0003a9b0
   25a48:	0003a9c0 	.word	0x0003a9c0

00025a4c <CLogger::Get()>:
   25a4c:	e59f3004 	ldr	r3, [pc, #4]	; 25a58 <CLogger::Get()+0xc>
   25a50:	e5930000 	ldr	r0, [r3]
   25a54:	e12fff1e 	bx	lr
   25a58:	0003e394 	.word	0x0003e394

00025a5c <CLogger::Write(char const*)>:
   25a5c:	e92d4070 	push	{r4, r5, r6, lr}
   25a60:	e1a04000 	mov	r4, r0
   25a64:	e1a00001 	mov	r0, r1
   25a68:	e1a05001 	mov	r5, r1
   25a6c:	eb000d22 	bl	28efc <strlen>
   25a70:	e1a06000 	mov	r6, r0
   25a74:	e5940008 	ldr	r0, [r4, #8]
   25a78:	e1a02006 	mov	r2, r6
   25a7c:	e5903000 	ldr	r3, [r0]
   25a80:	e1a01005 	mov	r1, r5
   25a84:	e593300c 	ldr	r3, [r3, #12]
   25a88:	e12fff33 	blx	r3
   25a8c:	e5940018 	ldr	r0, [r4, #24]
   25a90:	e3500000 	cmp	r0, #0
   25a94:	1a000018 	bne	25afc <CLogger::Write(char const*)+0xa0>
   25a98:	e59f2064 	ldr	r2, [pc, #100]	; 25b04 <CLogger::Write(char const*)+0xa8>
   25a9c:	e0850006 	add	r0, r5, r6
   25aa0:	e1550000 	cmp	r5, r0
   25aa4:	0a00000f 	beq	25ae8 <CLogger::Write(char const*)+0x8c>
   25aa8:	e0d510d1 	ldrsb	r1, [r5], #1
   25aac:	e351000d 	cmp	r1, #13
   25ab0:	0afffffa 	beq	25aa0 <CLogger::Write(char const*)+0x44>
   25ab4:	e594c010 	ldr	ip, [r4, #16]
   25ab8:	e594e00c 	ldr	lr, [r4, #12]
   25abc:	e7ce100c 	strb	r1, [lr, ip]
   25ac0:	e5943010 	ldr	r3, [r4, #16]
   25ac4:	e5941014 	ldr	r1, [r4, #20]
   25ac8:	e2833001 	add	r3, r3, #1
   25acc:	e0033002 	and	r3, r3, r2
   25ad0:	e1530001 	cmp	r3, r1
   25ad4:	e5843010 	str	r3, [r4, #16]
   25ad8:	1afffff0 	bne	25aa0 <CLogger::Write(char const*)+0x44>
   25adc:	e2433001 	sub	r3, r3, #1
   25ae0:	e0033002 	and	r3, r3, r2
   25ae4:	e5843010 	str	r3, [r4, #16]
   25ae8:	e5943018 	ldr	r3, [r4, #24]
   25aec:	e3530000 	cmp	r3, #0
   25af0:	08bd8070 	popeq	{r4, r5, r6, pc}
   25af4:	e8bd4070 	pop	{r4, r5, r6, lr}
   25af8:	ea00145a 	b	2ac68 <LeaveCritical>
   25afc:	eb00142e 	bl	2abbc <EnterCritical>
   25b00:	eaffffe4 	b	25a98 <CLogger::Write(char const*)+0x3c>
   25b04:	00003fff 	.word	0x00003fff

00025b08 <CLogger::Read(void*, unsigned int)>:
   25b08:	e92d4070 	push	{r4, r5, r6, lr}
   25b0c:	e1a04000 	mov	r4, r0
   25b10:	e5900018 	ldr	r0, [r0, #24]
   25b14:	e1a05001 	mov	r5, r1
   25b18:	e3500000 	cmp	r0, #0
   25b1c:	e1a06002 	mov	r6, r2
   25b20:	1a00001c 	bne	25b98 <CLogger::Read(void*, unsigned int)+0x90>
   25b24:	e5942010 	ldr	r2, [r4, #16]
   25b28:	e5943014 	ldr	r3, [r4, #20]
   25b2c:	e1520003 	cmp	r2, r3
   25b30:	0a000021 	beq	25bbc <CLogger::Read(void*, unsigned int)+0xb4>
   25b34:	e1a01005 	mov	r1, r5
   25b38:	e59f2088 	ldr	r2, [pc, #136]	; 25bc8 <CLogger::Read(void*, unsigned int)+0xc0>
   25b3c:	e3a05000 	mov	r5, #0
   25b40:	ea00000a 	b	25b70 <CLogger::Read(void*, unsigned int)+0x68>
   25b44:	e594000c 	ldr	r0, [r4, #12]
   25b48:	e2855001 	add	r5, r5, #1
   25b4c:	e19030d3 	ldrsb	r3, [r0, r3]
   25b50:	e4c13001 	strb	r3, [r1], #1
   25b54:	e5943014 	ldr	r3, [r4, #20]
   25b58:	e5940010 	ldr	r0, [r4, #16]
   25b5c:	e2833001 	add	r3, r3, #1
   25b60:	e0033002 	and	r3, r3, r2
   25b64:	e1530000 	cmp	r3, r0
   25b68:	e5843014 	str	r3, [r4, #20]
   25b6c:	0a000001 	beq	25b78 <CLogger::Read(void*, unsigned int)+0x70>
   25b70:	e1550006 	cmp	r5, r6
   25b74:	1afffff2 	bne	25b44 <CLogger::Read(void*, unsigned int)+0x3c>
   25b78:	e5943018 	ldr	r3, [r4, #24]
   25b7c:	e3530000 	cmp	r3, #0
   25b80:	1a000001 	bne	25b8c <CLogger::Read(void*, unsigned int)+0x84>
   25b84:	e1a00005 	mov	r0, r5
   25b88:	e8bd8070 	pop	{r4, r5, r6, pc}
   25b8c:	eb001435 	bl	2ac68 <LeaveCritical>
   25b90:	e1a00005 	mov	r0, r5
   25b94:	e8bd8070 	pop	{r4, r5, r6, pc}
   25b98:	eb001407 	bl	2abbc <EnterCritical>
   25b9c:	e5942010 	ldr	r2, [r4, #16]
   25ba0:	e5943014 	ldr	r3, [r4, #20]
   25ba4:	e1520003 	cmp	r2, r3
   25ba8:	1affffe1 	bne	25b34 <CLogger::Read(void*, unsigned int)+0x2c>
   25bac:	e5943018 	ldr	r3, [r4, #24]
   25bb0:	e3530000 	cmp	r3, #0
   25bb4:	0a000000 	beq	25bbc <CLogger::Read(void*, unsigned int)+0xb4>
   25bb8:	eb00142a 	bl	2ac68 <LeaveCritical>
   25bbc:	e3e05000 	mvn	r5, #0
   25bc0:	e1a00005 	mov	r0, r5
   25bc4:	e8bd8070 	pop	{r4, r5, r6, pc}
   25bc8:	00003fff 	.word	0x00003fff

00025bcc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   25bcc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   25bd0:	e1a05000 	mov	r5, r0
   25bd4:	e24dd00c 	sub	sp, sp, #12
   25bd8:	e3a00f42 	mov	r0, #264	; 0x108
   25bdc:	e1a07003 	mov	r7, r3
   25be0:	e1a09002 	mov	r9, r2
   25be4:	e1a08001 	mov	r8, r1
   25be8:	eb0010c1 	bl	29ef4 <operator new(unsigned int)>
   25bec:	e3a06000 	mov	r6, #0
   25bf0:	e1a04000 	mov	r4, r0
   25bf4:	e1a01008 	mov	r1, r8
   25bf8:	e3a02032 	mov	r2, #50	; 0x32
   25bfc:	e4c09001 	strb	r9, [r0], #1
   25c00:	eb000d86 	bl	29220 <strncpy>
   25c04:	e1a01007 	mov	r1, r7
   25c08:	e2840033 	add	r0, r4, #51	; 0x33
   25c0c:	e3a020c8 	mov	r2, #200	; 0xc8
   25c10:	e5c46032 	strb	r6, [r4, #50]	; 0x32
   25c14:	eb000d81 	bl	29220 <strncpy>
   25c18:	e5950004 	ldr	r0, [r5, #4]
   25c1c:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
   25c20:	e1500006 	cmp	r0, r6
   25c24:	0a000004 	beq	25c3c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   25c28:	e28d2004 	add	r2, sp, #4
   25c2c:	e1a0100d 	mov	r1, sp
   25c30:	eb0009a2 	bl	282c0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   25c34:	e1500006 	cmp	r0, r6
   25c38:	1a000021 	bne	25cc4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   25c3c:	e3a03000 	mov	r3, #0
   25c40:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   25c44:	e58430fc 	str	r3, [r4, #252]	; 0xfc
   25c48:	e3500000 	cmp	r0, #0
   25c4c:	e5843100 	str	r3, [r4, #256]	; 0x100
   25c50:	e5843104 	str	r3, [r4, #260]	; 0x104
   25c54:	1a000027 	bne	25cf8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
   25c58:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
   25c5c:	e2823001 	add	r3, r2, #1
   25c60:	e3530032 	cmp	r3, #50	; 0x32
   25c64:	e0852102 	add	r2, r5, r2, lsl #2
   25c68:	e582401c 	str	r4, [r2, #28]
   25c6c:	03a02000 	moveq	r2, #0
   25c70:	01a03002 	moveq	r3, r2
   25c74:	058520e4 	streq	r2, [r5, #228]	; 0xe4
   25c78:	e59520e8 	ldr	r2, [r5, #232]	; 0xe8
   25c7c:	158530e4 	strne	r3, [r5, #228]	; 0xe4
   25c80:	e1520003 	cmp	r2, r3
   25c84:	0a00001e 	beq	25d04 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
   25c88:	e3500000 	cmp	r0, #0
   25c8c:	13a04000 	movne	r4, #0
   25c90:	0a000005 	beq	25cac <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   25c94:	eb0013f3 	bl	2ac68 <LeaveCritical>
   25c98:	e3540000 	cmp	r4, #0
   25c9c:	0a000002 	beq	25cac <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   25ca0:	e1a00004 	mov	r0, r4
   25ca4:	e3a01f42 	mov	r1, #264	; 0x108
   25ca8:	eb00109f 	bl	29f2c <operator delete(void*, unsigned int)>
   25cac:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
   25cb0:	e3530000 	cmp	r3, #0
   25cb4:	0a000000 	beq	25cbc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
   25cb8:	e12fff33 	blx	r3
   25cbc:	e28dd00c 	add	sp, sp, #12
   25cc0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   25cc4:	e59d3004 	ldr	r3, [sp, #4]
   25cc8:	e59f105c 	ldr	r1, [pc, #92]	; 25d2c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x160>
   25ccc:	e59d2000 	ldr	r2, [sp]
   25cd0:	e0831391 	umull	r1, r3, r1, r3
   25cd4:	e1a036a3 	lsr	r3, r3, #13
   25cd8:	e5950004 	ldr	r0, [r5, #4]
   25cdc:	e5843100 	str	r3, [r4, #256]	; 0x100
   25ce0:	e58420fc 	str	r2, [r4, #252]	; 0xfc
   25ce4:	eb000947 	bl	28208 <CTimer::GetTimeZone() const>
   25ce8:	e5840104 	str	r0, [r4, #260]	; 0x104
   25cec:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   25cf0:	e3500000 	cmp	r0, #0
   25cf4:	0affffd7 	beq	25c58 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   25cf8:	eb0013af 	bl	2abbc <EnterCritical>
   25cfc:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   25d00:	eaffffd4 	b	25c58 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   25d04:	e2832001 	add	r2, r3, #1
   25d08:	e3520032 	cmp	r2, #50	; 0x32
   25d0c:	e0853103 	add	r3, r5, r3, lsl #2
   25d10:	e593401c 	ldr	r4, [r3, #28]
   25d14:	03a03000 	moveq	r3, #0
   25d18:	158520e8 	strne	r2, [r5, #232]	; 0xe8
   25d1c:	058530e8 	streq	r3, [r5, #232]	; 0xe8
   25d20:	e3500000 	cmp	r0, #0
   25d24:	0affffdb 	beq	25c98 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
   25d28:	eaffffd9 	b	25c94 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
   25d2c:	d1b71759 	.word	0xd1b71759

00025d30 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   25d30:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25d34:	e1a04000 	mov	r4, r0
   25d38:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   25d3c:	e1a07001 	mov	r7, r1
   25d40:	e3500000 	cmp	r0, #0
   25d44:	e1a08002 	mov	r8, r2
   25d48:	e1a06003 	mov	r6, r3
   25d4c:	1a000022 	bne	25ddc <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
   25d50:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   25d54:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   25d58:	e1530002 	cmp	r3, r2
   25d5c:	0a000028 	beq	25e04 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   25d60:	e283c001 	add	ip, r3, #1
   25d64:	e35c0032 	cmp	ip, #50	; 0x32
   25d68:	e0843103 	add	r3, r4, r3, lsl #2
   25d6c:	e593501c 	ldr	r5, [r3, #28]
   25d70:	03a03000 	moveq	r3, #0
   25d74:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
   25d78:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   25d7c:	e3500000 	cmp	r0, #0
   25d80:	1a000021 	bne	25e0c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
   25d84:	e1a01005 	mov	r1, r5
   25d88:	e4d12001 	ldrb	r2, [r1], #1
   25d8c:	e1a00008 	mov	r0, r8
   25d90:	e5c72000 	strb	r2, [r7]
   25d94:	eb000d16 	bl	291f4 <strcpy>
   25d98:	e2851033 	add	r1, r5, #51	; 0x33
   25d9c:	e1a00006 	mov	r0, r6
   25da0:	eb000d13 	bl	291f4 <strcpy>
   25da4:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
   25da8:	e59d1018 	ldr	r1, [sp, #24]
   25dac:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   25db0:	e5812000 	str	r2, [r1]
   25db4:	e59d201c 	ldr	r2, [sp, #28]
   25db8:	e1a00005 	mov	r0, r5
   25dbc:	e5823000 	str	r3, [r2]
   25dc0:	e5953104 	ldr	r3, [r5, #260]	; 0x104
   25dc4:	e59d2020 	ldr	r2, [sp, #32]
   25dc8:	e3a01f42 	mov	r1, #264	; 0x108
   25dcc:	e5823000 	str	r3, [r2]
   25dd0:	eb001055 	bl	29f2c <operator delete(void*, unsigned int)>
   25dd4:	e3a00001 	mov	r0, #1
   25dd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25ddc:	eb001376 	bl	2abbc <EnterCritical>
   25de0:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   25de4:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   25de8:	e1520003 	cmp	r2, r3
   25dec:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
   25df0:	1affffda 	bne	25d60 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
   25df4:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   25df8:	e3530000 	cmp	r3, #0
   25dfc:	0a000000 	beq	25e04 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   25e00:	eb001398 	bl	2ac68 <LeaveCritical>
   25e04:	e3a00000 	mov	r0, #0
   25e08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25e0c:	eb001395 	bl	2ac68 <LeaveCritical>
   25e10:	eaffffdb 	b	25d84 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

00025e14 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   25e14:	e58010f0 	str	r1, [r0, #240]	; 0xf0
   25e18:	e12fff1e 	bx	lr

00025e1c <CLogger::RegisterPanicHandler(void (*)())>:
   25e1c:	e58010f4 	str	r1, [r0, #244]	; 0xf4
   25e20:	e12fff1e 	bx	lr

00025e24 <CMachineInfo::CMachineInfo()>:
   25e24:	e92d4810 	push	{r4, fp, lr}
   25e28:	e28db008 	add	fp, sp, #8
   25e2c:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   25e30:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
   25e34:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25e38:	e3a02000 	mov	r2, #0
   25e3c:	e5832000 	str	r2, [r3]
   25e40:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25e44:	e3a02010 	mov	r2, #16
   25e48:	e5c32004 	strb	r2, [r3, #4]
   25e4c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25e50:	e3a02000 	mov	r2, #0
   25e54:	e5832008 	str	r2, [r3, #8]
   25e58:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25e5c:	e3a02000 	mov	r2, #0
   25e60:	e583200c 	str	r2, [r3, #12]
   25e64:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25e68:	e3a02004 	mov	r2, #4
   25e6c:	e5c32010 	strb	r2, [r3, #16]
   25e70:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25e74:	e3a02000 	mov	r2, #0
   25e78:	e5832014 	str	r2, [r3, #20]
   25e7c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25e80:	e59f23b8 	ldr	r2, [pc, #952]	; 26240 <CMachineInfo::CMachineInfo()+0x41c>
   25e84:	e1c321b8 	strh	r2, [r3, #24]
   25e88:	e59f33b4 	ldr	r3, [pc, #948]	; 26244 <CMachineInfo::CMachineInfo()+0x420>
   25e8c:	e5933000 	ldr	r3, [r3]
   25e90:	e3530000 	cmp	r3, #0
   25e94:	0a00001e 	beq	25f14 <CMachineInfo::CMachineInfo()+0xf0>
   25e98:	e59f33a4 	ldr	r3, [pc, #932]	; 26244 <CMachineInfo::CMachineInfo()+0x420>
   25e9c:	e5933000 	ldr	r3, [r3]
   25ea0:	e5932000 	ldr	r2, [r3]
   25ea4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25ea8:	e5832000 	str	r2, [r3]
   25eac:	e59f3390 	ldr	r3, [pc, #912]	; 26244 <CMachineInfo::CMachineInfo()+0x420>
   25eb0:	e5933000 	ldr	r3, [r3]
   25eb4:	e5d32004 	ldrb	r2, [r3, #4]
   25eb8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25ebc:	e5c32004 	strb	r2, [r3, #4]
   25ec0:	e59f337c 	ldr	r3, [pc, #892]	; 26244 <CMachineInfo::CMachineInfo()+0x420>
   25ec4:	e5933000 	ldr	r3, [r3]
   25ec8:	e5932008 	ldr	r2, [r3, #8]
   25ecc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25ed0:	e5832008 	str	r2, [r3, #8]
   25ed4:	e59f3368 	ldr	r3, [pc, #872]	; 26244 <CMachineInfo::CMachineInfo()+0x420>
   25ed8:	e5933000 	ldr	r3, [r3]
   25edc:	e593200c 	ldr	r2, [r3, #12]
   25ee0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25ee4:	e583200c 	str	r2, [r3, #12]
   25ee8:	e59f3354 	ldr	r3, [pc, #852]	; 26244 <CMachineInfo::CMachineInfo()+0x420>
   25eec:	e5933000 	ldr	r3, [r3]
   25ef0:	e5d32010 	ldrb	r2, [r3, #16]
   25ef4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25ef8:	e5c32010 	strb	r2, [r3, #16]
   25efc:	e59f3340 	ldr	r3, [pc, #832]	; 26244 <CMachineInfo::CMachineInfo()+0x420>
   25f00:	e5933000 	ldr	r3, [r3]
   25f04:	e5932014 	ldr	r2, [r3, #20]
   25f08:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25f0c:	e5832014 	str	r2, [r3, #20]
   25f10:	ea0000c6 	b	26230 <CMachineInfo::CMachineInfo()+0x40c>
   25f14:	e59f2328 	ldr	r2, [pc, #808]	; 26244 <CMachineInfo::CMachineInfo()+0x420>
   25f18:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25f1c:	e5823000 	str	r3, [r2]
   25f20:	e24b3020 	sub	r3, fp, #32
   25f24:	e3a01001 	mov	r1, #1
   25f28:	e1a00003 	mov	r0, r3
   25f2c:	ebfff5f4 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   25f30:	e24b2030 	sub	r2, fp, #48	; 0x30
   25f34:	e24b0020 	sub	r0, fp, #32
   25f38:	e3a03000 	mov	r3, #0
   25f3c:	e58d3000 	str	r3, [sp]
   25f40:	e3a03010 	mov	r3, #16
   25f44:	e59f12fc 	ldr	r1, [pc, #764]	; 26248 <CMachineInfo::CMachineInfo()+0x424>
   25f48:	ebfff5f9 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   25f4c:	e1a03000 	mov	r3, r0
   25f50:	e3530000 	cmp	r3, #0
   25f54:	0a000003 	beq	25f68 <CMachineInfo::CMachineInfo()+0x144>
   25f58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25f5c:	e6ff2073 	uxth	r2, r3
   25f60:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25f64:	e1c321b8 	strh	r2, [r3, #24]
   25f68:	e24b2040 	sub	r2, fp, #64	; 0x40
   25f6c:	e24b0020 	sub	r0, fp, #32
   25f70:	e3a03000 	mov	r3, #0
   25f74:	e58d3000 	str	r3, [sp]
   25f78:	e3a03010 	mov	r3, #16
   25f7c:	e59f12c8 	ldr	r1, [pc, #712]	; 2624c <CMachineInfo::CMachineInfo()+0x428>
   25f80:	ebfff5eb 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   25f84:	e1a03000 	mov	r3, r0
   25f88:	e2233001 	eor	r3, r3, #1
   25f8c:	e6ef3073 	uxtb	r3, r3
   25f90:	e3530000 	cmp	r3, #0
   25f94:	0a000001 	beq	25fa0 <CMachineInfo::CMachineInfo()+0x17c>
   25f98:	e3a04000 	mov	r4, #0
   25f9c:	ea00009e 	b	2621c <CMachineInfo::CMachineInfo()+0x3f8>
   25fa0:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   25fa4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25fa8:	e5832000 	str	r2, [r3]
   25fac:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25fb0:	e5933000 	ldr	r3, [r3]
   25fb4:	e2033502 	and	r3, r3, #8388608	; 0x800000
   25fb8:	e3530000 	cmp	r3, #0
   25fbc:	0a000064 	beq	26154 <CMachineInfo::CMachineInfo()+0x330>
   25fc0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   25fc4:	e5933000 	ldr	r3, [r3]
   25fc8:	e1a03223 	lsr	r3, r3, #4
   25fcc:	e6ef3073 	uxtb	r3, r3
   25fd0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   25fd4:	e3a03000 	mov	r3, #0
   25fd8:	e50b3010 	str	r3, [fp, #-16]
   25fdc:	e51b3010 	ldr	r3, [fp, #-16]
   25fe0:	e353000d 	cmp	r3, #13
   25fe4:	8a00000f 	bhi	26028 <CMachineInfo::CMachineInfo()+0x204>
   25fe8:	e59f1260 	ldr	r1, [pc, #608]	; 26250 <CMachineInfo::CMachineInfo()+0x42c>
   25fec:	e51b2010 	ldr	r2, [fp, #-16]
   25ff0:	e1a03002 	mov	r3, r2
   25ff4:	e1a03083 	lsl	r3, r3, #1
   25ff8:	e0833002 	add	r3, r3, r2
   25ffc:	e1a03103 	lsl	r3, r3, #2
   26000:	e0813003 	add	r3, r1, r3
   26004:	e5932000 	ldr	r2, [r3]
   26008:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2600c:	e1520003 	cmp	r2, r3
   26010:	0a000003 	beq	26024 <CMachineInfo::CMachineInfo()+0x200>
   26014:	e51b3010 	ldr	r3, [fp, #-16]
   26018:	e2833001 	add	r3, r3, #1
   2601c:	e50b3010 	str	r3, [fp, #-16]
   26020:	eaffffed 	b	25fdc <CMachineInfo::CMachineInfo()+0x1b8>
   26024:	e320f000 	nop	{0}
   26028:	e51b3010 	ldr	r3, [fp, #-16]
   2602c:	e353000d 	cmp	r3, #13
   26030:	9a000001 	bls	2603c <CMachineInfo::CMachineInfo()+0x218>
   26034:	e3a04000 	mov	r4, #0
   26038:	ea000077 	b	2621c <CMachineInfo::CMachineInfo()+0x3f8>
   2603c:	e59f120c 	ldr	r1, [pc, #524]	; 26250 <CMachineInfo::CMachineInfo()+0x42c>
   26040:	e51b2010 	ldr	r2, [fp, #-16]
   26044:	e1a03002 	mov	r3, r2
   26048:	e1a03083 	lsl	r3, r3, #1
   2604c:	e0833002 	add	r3, r3, r2
   26050:	e1a03103 	lsl	r3, r3, #2
   26054:	e0813003 	add	r3, r1, r3
   26058:	e2833004 	add	r3, r3, #4
   2605c:	e5d32000 	ldrb	r2, [r3]
   26060:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26064:	e5c32004 	strb	r2, [r3, #4]
   26068:	e59f11e0 	ldr	r1, [pc, #480]	; 26250 <CMachineInfo::CMachineInfo()+0x42c>
   2606c:	e51b2010 	ldr	r2, [fp, #-16]
   26070:	e1a03002 	mov	r3, r2
   26074:	e1a03083 	lsl	r3, r3, #1
   26078:	e0833002 	add	r3, r3, r2
   2607c:	e1a03103 	lsl	r3, r3, #2
   26080:	e0813003 	add	r3, r1, r3
   26084:	e2833008 	add	r3, r3, #8
   26088:	e5932000 	ldr	r2, [r3]
   2608c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26090:	e5832008 	str	r2, [r3, #8]
   26094:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26098:	e5933000 	ldr	r3, [r3]
   2609c:	e203300f 	and	r3, r3, #15
   260a0:	e2832001 	add	r2, r3, #1
   260a4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   260a8:	e583200c 	str	r2, [r3, #12]
   260ac:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   260b0:	e5933000 	ldr	r3, [r3]
   260b4:	e1a03623 	lsr	r3, r3, #12
   260b8:	e6ef3073 	uxtb	r3, r3
   260bc:	e203300f 	and	r3, r3, #15
   260c0:	e6ef2073 	uxtb	r2, r3
   260c4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   260c8:	e5c32010 	strb	r2, [r3, #16]
   260cc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   260d0:	e5933000 	ldr	r3, [r3]
   260d4:	e1a03a23 	lsr	r3, r3, #20
   260d8:	e2033007 	and	r3, r3, #7
   260dc:	e3a02c01 	mov	r2, #256	; 0x100
   260e0:	e1a03312 	lsl	r3, r2, r3
   260e4:	e1a02003 	mov	r2, r3
   260e8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   260ec:	e5832014 	str	r2, [r3, #20]
   260f0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   260f4:	e5d33010 	ldrb	r3, [r3, #16]
   260f8:	e3530003 	cmp	r3, #3
   260fc:	da000002 	ble	2610c <CMachineInfo::CMachineInfo()+0x2e8>
   26100:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26104:	e3a02004 	mov	r2, #4
   26108:	e5c32010 	strb	r2, [r3, #16]
   2610c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26110:	e5d33004 	ldrb	r3, [r3, #4]
   26114:	e3530003 	cmp	r3, #3
   26118:	1a00003e 	bne	26218 <CMachineInfo::CMachineInfo()+0x3f4>
   2611c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26120:	e5933014 	ldr	r3, [r3, #20]
   26124:	e3530c01 	cmp	r3, #256	; 0x100
   26128:	1a00003a 	bne	26218 <CMachineInfo::CMachineInfo()+0x3f4>
   2612c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26130:	e593300c 	ldr	r3, [r3, #12]
   26134:	e3530001 	cmp	r3, #1
   26138:	1a000001 	bne	26144 <CMachineInfo::CMachineInfo()+0x320>
   2613c:	e3a02001 	mov	r2, #1
   26140:	ea000000 	b	26148 <CMachineInfo::CMachineInfo()+0x324>
   26144:	e3a02002 	mov	r2, #2
   26148:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2614c:	e5c32004 	strb	r2, [r3, #4]
   26150:	ea000030 	b	26218 <CMachineInfo::CMachineInfo()+0x3f4>
   26154:	e3a03000 	mov	r3, #0
   26158:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2615c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26160:	e3530010 	cmp	r3, #16
   26164:	8a00000b 	bhi	26198 <CMachineInfo::CMachineInfo()+0x374>
   26168:	e59f20e4 	ldr	r2, [pc, #228]	; 26254 <CMachineInfo::CMachineInfo()+0x430>
   2616c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26170:	e7922203 	ldr	r2, [r2, r3, lsl #4]
   26174:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26178:	e5933000 	ldr	r3, [r3]
   2617c:	e1520003 	cmp	r2, r3
   26180:	0a000003 	beq	26194 <CMachineInfo::CMachineInfo()+0x370>
   26184:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26188:	e2833001 	add	r3, r3, #1
   2618c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   26190:	eafffff1 	b	2615c <CMachineInfo::CMachineInfo()+0x338>
   26194:	e320f000 	nop	{0}
   26198:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2619c:	e3530010 	cmp	r3, #16
   261a0:	9a000001 	bls	261ac <CMachineInfo::CMachineInfo()+0x388>
   261a4:	e3a04000 	mov	r4, #0
   261a8:	ea00001b 	b	2621c <CMachineInfo::CMachineInfo()+0x3f8>
   261ac:	e59f20a0 	ldr	r2, [pc, #160]	; 26254 <CMachineInfo::CMachineInfo()+0x430>
   261b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   261b4:	e1a03203 	lsl	r3, r3, #4
   261b8:	e0823003 	add	r3, r2, r3
   261bc:	e5d32004 	ldrb	r2, [r3, #4]
   261c0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   261c4:	e5c32004 	strb	r2, [r3, #4]
   261c8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   261cc:	e3a02001 	mov	r2, #1
   261d0:	e5832008 	str	r2, [r3, #8]
   261d4:	e59f2078 	ldr	r2, [pc, #120]	; 26254 <CMachineInfo::CMachineInfo()+0x430>
   261d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   261dc:	e1a03203 	lsl	r3, r3, #4
   261e0:	e0823003 	add	r3, r2, r3
   261e4:	e5932008 	ldr	r2, [r3, #8]
   261e8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   261ec:	e583200c 	str	r2, [r3, #12]
   261f0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   261f4:	e3a02000 	mov	r2, #0
   261f8:	e5c32010 	strb	r2, [r3, #16]
   261fc:	e59f2050 	ldr	r2, [pc, #80]	; 26254 <CMachineInfo::CMachineInfo()+0x430>
   26200:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26204:	e1a03203 	lsl	r3, r3, #4
   26208:	e0823003 	add	r3, r2, r3
   2620c:	e593200c 	ldr	r2, [r3, #12]
   26210:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26214:	e5832014 	str	r2, [r3, #20]
   26218:	e3a04001 	mov	r4, #1
   2621c:	e24b3020 	sub	r3, fp, #32
   26220:	e1a00003 	mov	r0, r3
   26224:	ebfff53d 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   26228:	e3540001 	cmp	r4, #1
   2622c:	e320f000 	nop	{0}
   26230:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26234:	e1a00003 	mov	r0, r3
   26238:	e24bd008 	sub	sp, fp, #8
   2623c:	e8bd8810 	pop	{r4, fp, pc}
   26240:	00001f35 	.word	0x00001f35
   26244:	0003e398 	.word	0x0003e398
   26248:	00060001 	.word	0x00060001
   2624c:	00010002 	.word	0x00010002
   26250:	0003e0ec 	.word	0x0003e0ec
   26254:	0003dfdc 	.word	0x0003dfdc

00026258 <CMachineInfo::~CMachineInfo()>:
   26258:	e3a02010 	mov	r2, #16
   2625c:	e59f3014 	ldr	r3, [pc, #20]	; 26278 <CMachineInfo::~CMachineInfo()+0x20>
   26260:	e5c02004 	strb	r2, [r0, #4]
   26264:	e5932000 	ldr	r2, [r3]
   26268:	e1500002 	cmp	r0, r2
   2626c:	03a02000 	moveq	r2, #0
   26270:	05832000 	streq	r2, [r3]
   26274:	e12fff1e 	bx	lr
   26278:	0003e398 	.word	0x0003e398

0002627c <CMachineInfo::GetMachineModel() const>:
   2627c:	e5d00004 	ldrb	r0, [r0, #4]
   26280:	e12fff1e 	bx	lr

00026284 <CMachineInfo::GetMachineName() const>:
   26284:	e5d02004 	ldrb	r2, [r0, #4]
   26288:	e59f3008 	ldr	r3, [pc, #8]	; 26298 <CMachineInfo::GetMachineName() const+0x14>
   2628c:	e0833102 	add	r3, r3, r2, lsl #2
   26290:	e59301b8 	ldr	r0, [r3, #440]	; 0x1b8
   26294:	e12fff1e 	bx	lr
   26298:	0003dfdc 	.word	0x0003dfdc

0002629c <CMachineInfo::GetModelMajor() const>:
   2629c:	e5900008 	ldr	r0, [r0, #8]
   262a0:	e12fff1e 	bx	lr

000262a4 <CMachineInfo::GetModelRevision() const>:
   262a4:	e590000c 	ldr	r0, [r0, #12]
   262a8:	e12fff1e 	bx	lr

000262ac <CMachineInfo::GetSoCType() const>:
   262ac:	e5d00010 	ldrb	r0, [r0, #16]
   262b0:	e12fff1e 	bx	lr

000262b4 <CMachineInfo::GetRAMSize() const>:
   262b4:	e5900014 	ldr	r0, [r0, #20]
   262b8:	e12fff1e 	bx	lr

000262bc <CMachineInfo::GetSoCName() const>:
   262bc:	e5d02010 	ldrb	r2, [r0, #16]
   262c0:	e59f3008 	ldr	r3, [pc, #8]	; 262d0 <CMachineInfo::GetSoCName() const+0x14>
   262c4:	e0833102 	add	r3, r3, r2, lsl #2
   262c8:	e59301fc 	ldr	r0, [r3, #508]	; 0x1fc
   262cc:	e12fff1e 	bx	lr
   262d0:	0003dfdc 	.word	0x0003dfdc

000262d4 <CMachineInfo::GetRevisionRaw() const>:
   262d4:	e5900000 	ldr	r0, [r0]
   262d8:	e12fff1e 	bx	lr

000262dc <CMachineInfo::GetActLEDInfo() const>:
   262dc:	e5d02004 	ldrb	r2, [r0, #4]
   262e0:	e59f3008 	ldr	r3, [pc, #8]	; 262f0 <CMachineInfo::GetActLEDInfo() const+0x14>
   262e4:	e0833102 	add	r3, r3, r2, lsl #2
   262e8:	e5930210 	ldr	r0, [r3, #528]	; 0x210
   262ec:	e12fff1e 	bx	lr
   262f0:	0003dfdc 	.word	0x0003dfdc

000262f4 <CMachineInfo::GetClockRate(unsigned int) const>:
   262f4:	e92d4030 	push	{r4, r5, lr}
   262f8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   262fc:	e1a04001 	mov	r4, r1
   26300:	e1a05000 	mov	r5, r0
   26304:	e3a01000 	mov	r1, #0
   26308:	e28d000c 	add	r0, sp, #12
   2630c:	ebfff4fc 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   26310:	e3a03004 	mov	r3, #4
   26314:	e58d3000 	str	r3, [sp]
   26318:	e3a03014 	mov	r3, #20
   2631c:	e28d000c 	add	r0, sp, #12
   26320:	e08d2003 	add	r2, sp, r3
   26324:	e59f1074 	ldr	r1, [pc, #116]	; 263a0 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
   26328:	e58d4020 	str	r4, [sp, #32]
   2632c:	ebfff500 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   26330:	e3500000 	cmp	r0, #0
   26334:	1a000009 	bne	26360 <CMachineInfo::GetClockRate(unsigned int) const+0x6c>
   26338:	e3540002 	cmp	r4, #2
   2633c:	0a00000d 	beq	26378 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
   26340:	e3540004 	cmp	r4, #4
   26344:	0a00000f 	beq	26388 <CMachineInfo::GetClockRate(unsigned int) const+0x94>
   26348:	e3540001 	cmp	r4, #1
   2634c:	0a00000b 	beq	26380 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   26350:	e59f104c 	ldr	r1, [pc, #76]	; 263a4 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
   26354:	e59f204c 	ldr	r2, [pc, #76]	; 263a8 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
   26358:	e2810010 	add	r0, r1, #16
   2635c:	ebfff4c7 	bl	23680 <assertion_failed>
   26360:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   26364:	e28d000c 	add	r0, sp, #12
   26368:	ebfff4ec 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   2636c:	e1a00004 	mov	r0, r4
   26370:	e28dd02c 	add	sp, sp, #44	; 0x2c
   26374:	e8bd8030 	pop	{r4, r5, pc}
   26378:	e59f402c 	ldr	r4, [pc, #44]	; 263ac <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
   2637c:	eafffff8 	b	26364 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   26380:	e59f4028 	ldr	r4, [pc, #40]	; 263b0 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
   26384:	eafffff6 	b	26364 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   26388:	e5952008 	ldr	r2, [r5, #8]
   2638c:	e59f3020 	ldr	r3, [pc, #32]	; 263b4 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
   26390:	e3520002 	cmp	r2, #2
   26394:	e59f401c 	ldr	r4, [pc, #28]	; 263b8 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
   26398:	81a04003 	movhi	r4, r3
   2639c:	eafffff0 	b	26364 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   263a0:	00030002 	.word	0x00030002
   263a4:	0003ab44 	.word	0x0003ab44
   263a8:	00000141 	.word	0x00000141
   263ac:	02dc6c00 	.word	0x02dc6c00
   263b0:	05f5e100 	.word	0x05f5e100
   263b4:	11e1a300 	.word	0x11e1a300
   263b8:	0ee6b280 	.word	0x0ee6b280

000263bc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   263bc:	e3510036 	cmp	r1, #54	; 0x36
   263c0:	0a00000b 	beq	263f4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x38>
   263c4:	e3510037 	cmp	r1, #55	; 0x37
   263c8:	1a000004 	bne	263e0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   263cc:	e5d00004 	ldrb	r0, [r0, #4]
   263d0:	e3500003 	cmp	r0, #3
   263d4:	c3a00028 	movgt	r0, #40	; 0x28
   263d8:	d3a0002d 	movle	r0, #45	; 0x2d
   263dc:	e12fff1e 	bx	lr
   263e0:	e59f1030 	ldr	r1, [pc, #48]	; 26418 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
   263e4:	e92d4010 	push	{r4, lr}
   263e8:	e59f202c 	ldr	r2, [pc, #44]	; 2641c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
   263ec:	e2810010 	add	r0, r1, #16
   263f0:	ebfff4a2 	bl	23680 <assertion_failed>
   263f4:	e5d03004 	ldrb	r3, [r0, #4]
   263f8:	e3530003 	cmp	r3, #3
   263fc:	d3a00028 	movle	r0, #40	; 0x28
   26400:	dafffff5 	ble	263dc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x20>
   26404:	e5900008 	ldr	r0, [r0, #8]
   26408:	e3500002 	cmp	r0, #2
   2640c:	93a0002d 	movls	r0, #45	; 0x2d
   26410:	83a00029 	movhi	r0, #41	; 0x29
   26414:	e12fff1e 	bx	lr
   26418:	0003ab44 	.word	0x0003ab44
   2641c:	0000017a 	.word	0x0000017a

00026420 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   26420:	e5903008 	ldr	r3, [r0, #8]
   26424:	e3530003 	cmp	r3, #3
   26428:	8a000005 	bhi	26444 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x24>
   2642c:	e3510001 	cmp	r1, #1
   26430:	0a00000b 	beq	26464 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
   26434:	e3510006 	cmp	r1, #6
   26438:	e59f002c 	ldr	r0, [pc, #44]	; 2646c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x4c>
   2643c:	13a00000 	movne	r0, #0
   26440:	e12fff1e 	bx	lr
   26444:	e3510001 	cmp	r1, #1
   26448:	0a000003 	beq	2645c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x3c>
   2644c:	e3510006 	cmp	r1, #6
   26450:	e59f0018 	ldr	r0, [pc, #24]	; 26470 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
   26454:	13a00000 	movne	r0, #0
   26458:	e12fff1e 	bx	lr
   2645c:	e59f0010 	ldr	r0, [pc, #16]	; 26474 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x54>
   26460:	e12fff1e 	bx	lr
   26464:	e59f000c 	ldr	r0, [pc, #12]	; 26478 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x58>
   26468:	e12fff1e 	bx	lr
   2646c:	1dcd6500 	.word	0x1dcd6500
   26470:	2cb41780 	.word	0x2cb41780
   26474:	0337f980 	.word	0x0337f980
   26478:	0124f800 	.word	0x0124f800

0002647c <CMachineInfo::GetDevice(TDeviceId) const>:
   2647c:	e3510000 	cmp	r1, #0
   26480:	1a000003 	bne	26494 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   26484:	e5d00004 	ldrb	r0, [r0, #4]
   26488:	e2500001 	subs	r0, r0, #1
   2648c:	13a00001 	movne	r0, #1
   26490:	e12fff1e 	bx	lr
   26494:	e59f100c 	ldr	r1, [pc, #12]	; 264a8 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
   26498:	e92d4010 	push	{r4, lr}
   2649c:	e59f2008 	ldr	r2, [pc, #8]	; 264ac <CMachineInfo::GetDevice(TDeviceId) const+0x30>
   264a0:	e2810010 	add	r0, r1, #16
   264a4:	ebfff475 	bl	23680 <assertion_failed>
   264a8:	0003ab44 	.word	0x0003ab44
   264ac:	000001b5 	.word	0x000001b5

000264b0 <CMachineInfo::ArePWMChannelsSwapped() const>:
   264b0:	e5d03004 	ldrb	r3, [r0, #4]
   264b4:	e2430004 	sub	r0, r3, #4
   264b8:	e6ef0070 	uxtb	r0, r0
   264bc:	e35000fb 	cmp	r0, #251	; 0xfb
   264c0:	e2433006 	sub	r3, r3, #6
   264c4:	93a00001 	movls	r0, #1
   264c8:	83a00000 	movhi	r0, #0
   264cc:	e3530001 	cmp	r3, #1
   264d0:	93a00000 	movls	r0, #0
   264d4:	e12fff1e 	bx	lr

000264d8 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   264d8:	e59f30b4 	ldr	r3, [pc, #180]	; 26594 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   264dc:	e92d4010 	push	{r4, lr}
   264e0:	e5933000 	ldr	r3, [r3]
   264e4:	ea000002 	b	264f4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c>
   264e8:	e1500003 	cmp	r0, r3
   264ec:	0a000006 	beq	2650c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x34>
   264f0:	e1a00003 	mov	r0, r3
   264f4:	e3530000 	cmp	r3, #0
   264f8:	1afffffa 	bne	264e8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x10>
   264fc:	e59f1094 	ldr	r1, [pc, #148]	; 26598 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   26500:	e59f2094 	ldr	r2, [pc, #148]	; 2659c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc4>
   26504:	e2810014 	add	r0, r1, #20
   26508:	ebfff45c 	bl	23680 <assertion_failed>
   2650c:	e3d1300f 	bics	r3, r1, #15
   26510:	1a000007 	bne	26534 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x5c>
   26514:	e351000c 	cmp	r1, #12
   26518:	8a000019 	bhi	26584 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xac>
   2651c:	e1d031b8 	ldrh	r3, [r0, #24]
   26520:	e1a02153 	asr	r2, r3, r1
   26524:	e3120001 	tst	r2, #1
   26528:	1a000010 	bne	26570 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x98>
   2652c:	e3a00080 	mov	r0, #128	; 0x80
   26530:	e8bd8010 	pop	{r4, pc}
   26534:	e3510081 	cmp	r1, #129	; 0x81
   26538:	13a0100c 	movne	r1, #12
   2653c:	03a01006 	moveq	r1, #6
   26540:	e1d021b8 	ldrh	r2, [r0, #24]
   26544:	e1a03152 	asr	r3, r2, r1
   26548:	e3130001 	tst	r3, #1
   2654c:	1a000002 	bne	2655c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x84>
   26550:	e2511001 	subs	r1, r1, #1
   26554:	2afffffa 	bcs	26544 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x6c>
   26558:	eafffff3 	b	2652c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x54>
   2655c:	e3a03001 	mov	r3, #1
   26560:	e1c22113 	bic	r2, r2, r3, lsl r1
   26564:	e1c021b8 	strh	r2, [r0, #24]
   26568:	e1a00001 	mov	r0, r1
   2656c:	e8bd8010 	pop	{r4, pc}
   26570:	e3a02001 	mov	r2, #1
   26574:	e1c33112 	bic	r3, r3, r2, lsl r1
   26578:	e1c031b8 	strh	r3, [r0, #24]
   2657c:	e1a00001 	mov	r0, r1
   26580:	e8bd8010 	pop	{r4, pc}
   26584:	e59f100c 	ldr	r1, [pc, #12]	; 26598 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   26588:	e59f2010 	ldr	r2, [pc, #16]	; 265a0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc8>
   2658c:	e2810024 	add	r0, r1, #36	; 0x24
   26590:	ebfff43a 	bl	23680 <assertion_failed>
   26594:	0003e398 	.word	0x0003e398
   26598:	0003ab44 	.word	0x0003ab44
   2659c:	000001c5 	.word	0x000001c5
   265a0:	000001ce 	.word	0x000001ce

000265a4 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   265a4:	e59f3074 	ldr	r3, [pc, #116]	; 26620 <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
   265a8:	e92d4010 	push	{r4, lr}
   265ac:	e5933000 	ldr	r3, [r3]
   265b0:	ea000002 	b	265c0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
   265b4:	e1530000 	cmp	r3, r0
   265b8:	0a000006 	beq	265d8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x34>
   265bc:	e1a00003 	mov	r0, r3
   265c0:	e3530000 	cmp	r3, #0
   265c4:	1afffffa 	bne	265b4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x10>
   265c8:	e59f1054 	ldr	r1, [pc, #84]	; 26624 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   265cc:	e59f2054 	ldr	r2, [pc, #84]	; 26628 <CMachineInfo::FreeDMAChannel(unsigned int)+0x84>
   265d0:	e2810014 	add	r0, r1, #20
   265d4:	ebfff429 	bl	23680 <assertion_failed>
   265d8:	e351000c 	cmp	r1, #12
   265dc:	8a000007 	bhi	26600 <CMachineInfo::FreeDMAChannel(unsigned int)+0x5c>
   265e0:	e1d321b8 	ldrh	r2, [r3, #24]
   265e4:	e1a00152 	asr	r0, r2, r1
   265e8:	e3100001 	tst	r0, #1
   265ec:	1a000007 	bne	26610 <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>
   265f0:	e3a00001 	mov	r0, #1
   265f4:	e1821110 	orr	r1, r2, r0, lsl r1
   265f8:	e1c311b8 	strh	r1, [r3, #24]
   265fc:	e8bd8010 	pop	{r4, pc}
   26600:	e59f101c 	ldr	r1, [pc, #28]	; 26624 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   26604:	e59f2020 	ldr	r2, [pc, #32]	; 2662c <CMachineInfo::FreeDMAChannel(unsigned int)+0x88>
   26608:	e2810024 	add	r0, r1, #36	; 0x24
   2660c:	ebfff41b 	bl	23680 <assertion_failed>
   26610:	e59f100c 	ldr	r1, [pc, #12]	; 26624 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   26614:	e59f2014 	ldr	r2, [pc, #20]	; 26630 <CMachineInfo::FreeDMAChannel(unsigned int)+0x8c>
   26618:	e2810040 	add	r0, r1, #64	; 0x40
   2661c:	ebfff417 	bl	23680 <assertion_failed>
   26620:	0003e398 	.word	0x0003e398
   26624:	0003ab44 	.word	0x0003ab44
   26628:	000001f2 	.word	0x000001f2
   2662c:	000001fa 	.word	0x000001fa
   26630:	000001fb 	.word	0x000001fb

00026634 <CMachineInfo::Get()>:
   26634:	e59f3020 	ldr	r3, [pc, #32]	; 2665c <CMachineInfo::Get()+0x28>
   26638:	e5930000 	ldr	r0, [r3]
   2663c:	e3500000 	cmp	r0, #0
   26640:	0a000000 	beq	26648 <CMachineInfo::Get()+0x14>
   26644:	e12fff1e 	bx	lr
   26648:	e59f1010 	ldr	r1, [pc, #16]	; 26660 <CMachineInfo::Get()+0x2c>
   2664c:	e92d4010 	push	{r4, lr}
   26650:	e59f200c 	ldr	r2, [pc, #12]	; 26664 <CMachineInfo::Get()+0x30>
   26654:	e2810014 	add	r0, r1, #20
   26658:	ebfff408 	bl	23680 <assertion_failed>
   2665c:	0003e398 	.word	0x0003e398
   26660:	0003ab44 	.word	0x0003ab44
   26664:	00000201 	.word	0x00000201

00026668 <CPtrArray::CPtrArray(unsigned int, unsigned int)>:
   26668:	e3a03000 	mov	r3, #0
   2666c:	e1510003 	cmp	r1, r3
   26670:	e92d4010 	push	{r4, lr}
   26674:	e880000e 	stm	r0, {r1, r2, r3}
   26678:	e580300c 	str	r3, [r0, #12]
   2667c:	0a000009 	beq	266a8 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x40>
   26680:	e3520000 	cmp	r2, #0
   26684:	0a00000b 	beq	266b8 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x50>
   26688:	e371022e 	cmn	r1, #-536870910	; 0xe0000002
   2668c:	e1a04000 	mov	r4, r0
   26690:	91a00101 	lslls	r0, r1, #2
   26694:	83e00000 	mvnhi	r0, #0
   26698:	eb000e16 	bl	29ef8 <operator new[](unsigned int)>
   2669c:	e584000c 	str	r0, [r4, #12]
   266a0:	e1a00004 	mov	r0, r4
   266a4:	e8bd8010 	pop	{r4, pc}
   266a8:	e3a0201e 	mov	r2, #30
   266ac:	e59f1014 	ldr	r1, [pc, #20]	; 266c8 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x60>
   266b0:	e59f0014 	ldr	r0, [pc, #20]	; 266cc <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x64>
   266b4:	ebfff3f1 	bl	23680 <assertion_failed>
   266b8:	e3a0201f 	mov	r2, #31
   266bc:	e59f1004 	ldr	r1, [pc, #4]	; 266c8 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x60>
   266c0:	e59f0008 	ldr	r0, [pc, #8]	; 266d0 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x68>
   266c4:	ebfff3ed 	bl	23680 <assertion_failed>
   266c8:	0003abac 	.word	0x0003abac
   266cc:	0003abbc 	.word	0x0003abbc
   266d0:	0003abd0 	.word	0x0003abd0

000266d4 <CPtrArray::~CPtrArray()>:
   266d4:	e3a03000 	mov	r3, #0
   266d8:	e92d4010 	push	{r4, lr}
   266dc:	e1a04000 	mov	r4, r0
   266e0:	e590000c 	ldr	r0, [r0, #12]
   266e4:	e5843000 	str	r3, [r4]
   266e8:	e1500003 	cmp	r0, r3
   266ec:	e5843004 	str	r3, [r4, #4]
   266f0:	0a000000 	beq	266f8 <CPtrArray::~CPtrArray()+0x24>
   266f4:	eb000e06 	bl	29f14 <operator delete[](void*)>
   266f8:	e1a00004 	mov	r0, r4
   266fc:	e8bd8010 	pop	{r4, pc}

00026700 <CPtrArray::GetCount() const>:
   26700:	e5900008 	ldr	r0, [r0, #8]
   26704:	e12fff1e 	bx	lr

00026708 <CPtrArray::operator[](unsigned int)>:
   26708:	e5903008 	ldr	r3, [r0, #8]
   2670c:	e92d4010 	push	{r4, lr}
   26710:	e1530001 	cmp	r3, r1
   26714:	9a000007 	bls	26738 <CPtrArray::operator[](unsigned int)+0x30>
   26718:	e5902000 	ldr	r2, [r0]
   2671c:	e1530002 	cmp	r3, r2
   26720:	8a000008 	bhi	26748 <CPtrArray::operator[](unsigned int)+0x40>
   26724:	e590000c 	ldr	r0, [r0, #12]
   26728:	e3500000 	cmp	r0, #0
   2672c:	0a000009 	beq	26758 <CPtrArray::operator[](unsigned int)+0x50>
   26730:	e0800101 	add	r0, r0, r1, lsl #2
   26734:	e8bd8010 	pop	{r4, pc}
   26738:	e3a02035 	mov	r2, #53	; 0x35
   2673c:	e59f1024 	ldr	r1, [pc, #36]	; 26768 <CPtrArray::operator[](unsigned int)+0x60>
   26740:	e59f0024 	ldr	r0, [pc, #36]	; 2676c <CPtrArray::operator[](unsigned int)+0x64>
   26744:	ebfff3cd 	bl	23680 <assertion_failed>
   26748:	e3a02036 	mov	r2, #54	; 0x36
   2674c:	e59f1014 	ldr	r1, [pc, #20]	; 26768 <CPtrArray::operator[](unsigned int)+0x60>
   26750:	e59f0018 	ldr	r0, [pc, #24]	; 26770 <CPtrArray::operator[](unsigned int)+0x68>
   26754:	ebfff3c9 	bl	23680 <assertion_failed>
   26758:	e3a02037 	mov	r2, #55	; 0x37
   2675c:	e59f1004 	ldr	r1, [pc, #4]	; 26768 <CPtrArray::operator[](unsigned int)+0x60>
   26760:	e59f000c 	ldr	r0, [pc, #12]	; 26774 <CPtrArray::operator[](unsigned int)+0x6c>
   26764:	ebfff3c5 	bl	23680 <assertion_failed>
   26768:	0003abac 	.word	0x0003abac
   2676c:	0003abe8 	.word	0x0003abe8
   26770:	0003ac00 	.word	0x0003ac00
   26774:	0003ac20 	.word	0x0003ac20

00026778 <CPtrArray::operator[](unsigned int) const>:
   26778:	e5903008 	ldr	r3, [r0, #8]
   2677c:	e92d4010 	push	{r4, lr}
   26780:	e1530001 	cmp	r3, r1
   26784:	9a000007 	bls	267a8 <CPtrArray::operator[](unsigned int) const+0x30>
   26788:	e5902000 	ldr	r2, [r0]
   2678c:	e1530002 	cmp	r3, r2
   26790:	8a000008 	bhi	267b8 <CPtrArray::operator[](unsigned int) const+0x40>
   26794:	e590300c 	ldr	r3, [r0, #12]
   26798:	e3530000 	cmp	r3, #0
   2679c:	0a000009 	beq	267c8 <CPtrArray::operator[](unsigned int) const+0x50>
   267a0:	e7930101 	ldr	r0, [r3, r1, lsl #2]
   267a4:	e8bd8010 	pop	{r4, pc}
   267a8:	e3a0203e 	mov	r2, #62	; 0x3e
   267ac:	e59f1024 	ldr	r1, [pc, #36]	; 267d8 <CPtrArray::operator[](unsigned int) const+0x60>
   267b0:	e59f0024 	ldr	r0, [pc, #36]	; 267dc <CPtrArray::operator[](unsigned int) const+0x64>
   267b4:	ebfff3b1 	bl	23680 <assertion_failed>
   267b8:	e3a0203f 	mov	r2, #63	; 0x3f
   267bc:	e59f1014 	ldr	r1, [pc, #20]	; 267d8 <CPtrArray::operator[](unsigned int) const+0x60>
   267c0:	e59f0018 	ldr	r0, [pc, #24]	; 267e0 <CPtrArray::operator[](unsigned int) const+0x68>
   267c4:	ebfff3ad 	bl	23680 <assertion_failed>
   267c8:	e3a02040 	mov	r2, #64	; 0x40
   267cc:	e59f1004 	ldr	r1, [pc, #4]	; 267d8 <CPtrArray::operator[](unsigned int) const+0x60>
   267d0:	e59f000c 	ldr	r0, [pc, #12]	; 267e4 <CPtrArray::operator[](unsigned int) const+0x6c>
   267d4:	ebfff3a9 	bl	23680 <assertion_failed>
   267d8:	0003abac 	.word	0x0003abac
   267dc:	0003abe8 	.word	0x0003abe8
   267e0:	0003ac00 	.word	0x0003ac00
   267e4:	0003ac20 	.word	0x0003ac20

000267e8 <CPtrArray::Append(void*)>:
   267e8:	e5903000 	ldr	r3, [r0]
   267ec:	e92d4070 	push	{r4, r5, r6, lr}
   267f0:	e3530000 	cmp	r3, #0
   267f4:	0a000024 	beq	2688c <CPtrArray::Append(void*)+0xa4>
   267f8:	e590500c 	ldr	r5, [r0, #12]
   267fc:	e1a04000 	mov	r4, r0
   26800:	e3550000 	cmp	r5, #0
   26804:	0a000024 	beq	2689c <CPtrArray::Append(void*)+0xb4>
   26808:	e5900008 	ldr	r0, [r0, #8]
   2680c:	e1530000 	cmp	r3, r0
   26810:	3a000025 	bcc	268ac <CPtrArray::Append(void*)+0xc4>
   26814:	e1a06001 	mov	r6, r1
   26818:	0a000003 	beq	2682c <CPtrArray::Append(void*)+0x44>
   2681c:	e2803001 	add	r3, r0, #1
   26820:	e7856100 	str	r6, [r5, r0, lsl #2]
   26824:	e5843008 	str	r3, [r4, #8]
   26828:	e8bd8070 	pop	{r4, r5, r6, pc}
   2682c:	e5940004 	ldr	r0, [r4, #4]
   26830:	e3500000 	cmp	r0, #0
   26834:	0a000020 	beq	268bc <CPtrArray::Append(void*)+0xd4>
   26838:	e0833000 	add	r3, r3, r0
   2683c:	e373022e 	cmn	r3, #-536870910	; 0xe0000002
   26840:	91a00103 	lslls	r0, r3, #2
   26844:	83e00000 	mvnhi	r0, #0
   26848:	eb000daa 	bl	29ef8 <operator new[](unsigned int)>
   2684c:	e5942000 	ldr	r2, [r4]
   26850:	e594100c 	ldr	r1, [r4, #12]
   26854:	e1a02102 	lsl	r2, r2, #2
   26858:	e1a05000 	mov	r5, r0
   2685c:	eb000bcb 	bl	29790 <memcpy>
   26860:	e594000c 	ldr	r0, [r4, #12]
   26864:	e3500000 	cmp	r0, #0
   26868:	0a000000 	beq	26870 <CPtrArray::Append(void*)+0x88>
   2686c:	eb000da8 	bl	29f14 <operator delete[](void*)>
   26870:	e5943000 	ldr	r3, [r4]
   26874:	e5942004 	ldr	r2, [r4, #4]
   26878:	e5940008 	ldr	r0, [r4, #8]
   2687c:	e0833002 	add	r3, r3, r2
   26880:	e584500c 	str	r5, [r4, #12]
   26884:	e5843000 	str	r3, [r4]
   26888:	eaffffe3 	b	2681c <CPtrArray::Append(void*)+0x34>
   2688c:	e3a02047 	mov	r2, #71	; 0x47
   26890:	e59f1034 	ldr	r1, [pc, #52]	; 268cc <CPtrArray::Append(void*)+0xe4>
   26894:	e59f0034 	ldr	r0, [pc, #52]	; 268d0 <CPtrArray::Append(void*)+0xe8>
   26898:	ebfff378 	bl	23680 <assertion_failed>
   2689c:	e3a02048 	mov	r2, #72	; 0x48
   268a0:	e59f1024 	ldr	r1, [pc, #36]	; 268cc <CPtrArray::Append(void*)+0xe4>
   268a4:	e59f0028 	ldr	r0, [pc, #40]	; 268d4 <CPtrArray::Append(void*)+0xec>
   268a8:	ebfff374 	bl	23680 <assertion_failed>
   268ac:	e3a0204a 	mov	r2, #74	; 0x4a
   268b0:	e59f1014 	ldr	r1, [pc, #20]	; 268cc <CPtrArray::Append(void*)+0xe4>
   268b4:	e59f001c 	ldr	r0, [pc, #28]	; 268d8 <CPtrArray::Append(void*)+0xf0>
   268b8:	ebfff370 	bl	23680 <assertion_failed>
   268bc:	e3a0204d 	mov	r2, #77	; 0x4d
   268c0:	e59f1004 	ldr	r1, [pc, #4]	; 268cc <CPtrArray::Append(void*)+0xe4>
   268c4:	e59f0010 	ldr	r0, [pc, #16]	; 268dc <CPtrArray::Append(void*)+0xf4>
   268c8:	ebfff36c 	bl	23680 <assertion_failed>
   268cc:	0003abac 	.word	0x0003abac
   268d0:	0003abbc 	.word	0x0003abbc
   268d4:	0003ac20 	.word	0x0003ac20
   268d8:	0003ac00 	.word	0x0003ac00
   268dc:	0003abd0 	.word	0x0003abd0

000268e0 <CPtrArray::RemoveLast()>:
   268e0:	e5903008 	ldr	r3, [r0, #8]
   268e4:	e3530000 	cmp	r3, #0
   268e8:	0a000002 	beq	268f8 <CPtrArray::RemoveLast()+0x18>
   268ec:	e2433001 	sub	r3, r3, #1
   268f0:	e5803008 	str	r3, [r0, #8]
   268f4:	e12fff1e 	bx	lr
   268f8:	e92d4010 	push	{r4, lr}
   268fc:	e3a02060 	mov	r2, #96	; 0x60
   26900:	e59f1004 	ldr	r1, [pc, #4]	; 2690c <CPtrArray::RemoveLast()+0x2c>
   26904:	e59f0004 	ldr	r0, [pc, #4]	; 26910 <CPtrArray::RemoveLast()+0x30>
   26908:	ebfff35c 	bl	23680 <assertion_failed>
   2690c:	0003abac 	.word	0x0003abac
   26910:	0003ac30 	.word	0x0003ac30
   26914:	00000000 	.word	0x00000000

00026918 <CString::~CString()>:
   26918:	e92d4010 	push	{r4, lr}
   2691c:	e1a04000 	mov	r4, r0
   26920:	e5900004 	ldr	r0, [r0, #4]
   26924:	e59f3014 	ldr	r3, [pc, #20]	; 26940 <CString::~CString()+0x28>
   26928:	e3500000 	cmp	r0, #0
   2692c:	e5843000 	str	r3, [r4]
   26930:	0a000000 	beq	26938 <CString::~CString()+0x20>
   26934:	eb000d76 	bl	29f14 <operator delete[](void*)>
   26938:	e1a00004 	mov	r0, r4
   2693c:	e8bd8010 	pop	{r4, pc}
   26940:	0003ac4c 	.word	0x0003ac4c

00026944 <CString::~CString()>:
   26944:	e92d4010 	push	{r4, lr}
   26948:	e1a04000 	mov	r4, r0
   2694c:	e5900004 	ldr	r0, [r0, #4]
   26950:	e59f3020 	ldr	r3, [pc, #32]	; 26978 <CString::~CString()+0x34>
   26954:	e3500000 	cmp	r0, #0
   26958:	e5843000 	str	r3, [r4]
   2695c:	0a000000 	beq	26964 <CString::~CString()+0x20>
   26960:	eb000d6b 	bl	29f14 <operator delete[](void*)>
   26964:	e1a00004 	mov	r0, r4
   26968:	e3a01010 	mov	r1, #16
   2696c:	eb000d6e 	bl	29f2c <operator delete(void*, unsigned int)>
   26970:	e1a00004 	mov	r0, r4
   26974:	e8bd8010 	pop	{r4, pc}
   26978:	0003ac4c 	.word	0x0003ac4c

0002697c <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   2697c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26980:	e990002c 	ldmib	r0, {r2, r3, r5}
   26984:	e0455002 	sub	r5, r5, r2
   26988:	e0851001 	add	r1, r5, r1
   2698c:	e2812001 	add	r2, r1, #1
   26990:	e1520003 	cmp	r2, r3
   26994:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   26998:	e1a04000 	mov	r4, r0
   2699c:	e2816041 	add	r6, r1, #65	; 0x41
   269a0:	e1a00006 	mov	r0, r6
   269a4:	eb000d53 	bl	29ef8 <operator new[](unsigned int)>
   269a8:	e3a02000 	mov	r2, #0
   269ac:	e594300c 	ldr	r3, [r4, #12]
   269b0:	e1a07000 	mov	r7, r0
   269b4:	e5c32000 	strb	r2, [r3]
   269b8:	e5941004 	ldr	r1, [r4, #4]
   269bc:	eb000a0c 	bl	291f4 <strcpy>
   269c0:	e5940004 	ldr	r0, [r4, #4]
   269c4:	e3500000 	cmp	r0, #0
   269c8:	0a000000 	beq	269d0 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   269cc:	eb000d50 	bl	29f14 <operator delete[](void*)>
   269d0:	e0875005 	add	r5, r7, r5
   269d4:	e584500c 	str	r5, [r4, #12]
   269d8:	e5847004 	str	r7, [r4, #4]
   269dc:	e5846008 	str	r6, [r4, #8]
   269e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000269e4 <CString::CString()>:
   269e4:	e3a02000 	mov	r2, #0
   269e8:	e59f1008 	ldr	r1, [pc, #8]	; 269f8 <CString::CString()+0x14>
   269ec:	e5802008 	str	r2, [r0, #8]
   269f0:	e8800006 	stm	r0, {r1, r2}
   269f4:	e12fff1e 	bx	lr
   269f8:	0003ac4c 	.word	0x0003ac4c

000269fc <CString::CString(char const*)>:
   269fc:	e92d4070 	push	{r4, r5, r6, lr}
   26a00:	e1a04000 	mov	r4, r0
   26a04:	e59f302c 	ldr	r3, [pc, #44]	; 26a38 <CString::CString(char const*)+0x3c>
   26a08:	e1a00001 	mov	r0, r1
   26a0c:	e5843000 	str	r3, [r4]
   26a10:	e1a05001 	mov	r5, r1
   26a14:	eb000938 	bl	28efc <strlen>
   26a18:	e2800001 	add	r0, r0, #1
   26a1c:	e5840008 	str	r0, [r4, #8]
   26a20:	eb000d34 	bl	29ef8 <operator new[](unsigned int)>
   26a24:	e1a01005 	mov	r1, r5
   26a28:	e5840004 	str	r0, [r4, #4]
   26a2c:	eb0009f0 	bl	291f4 <strcpy>
   26a30:	e1a00004 	mov	r0, r4
   26a34:	e8bd8070 	pop	{r4, r5, r6, pc}
   26a38:	0003ac4c 	.word	0x0003ac4c

00026a3c <CString::operator char const*() const>:
   26a3c:	e5900004 	ldr	r0, [r0, #4]
   26a40:	e59f3008 	ldr	r3, [pc, #8]	; 26a50 <CString::operator char const*() const+0x14>
   26a44:	e3500000 	cmp	r0, #0
   26a48:	01a00003 	moveq	r0, r3
   26a4c:	e12fff1e 	bx	lr
   26a50:	0003c7f8 	.word	0x0003c7f8

00026a54 <CString::operator=(char const*)>:
   26a54:	e92d4070 	push	{r4, r5, r6, lr}
   26a58:	e1a04000 	mov	r4, r0
   26a5c:	e5900004 	ldr	r0, [r0, #4]
   26a60:	e1a05001 	mov	r5, r1
   26a64:	e3500000 	cmp	r0, #0
   26a68:	0a000000 	beq	26a70 <CString::operator=(char const*)+0x1c>
   26a6c:	eb000d28 	bl	29f14 <operator delete[](void*)>
   26a70:	e1a00005 	mov	r0, r5
   26a74:	eb000920 	bl	28efc <strlen>
   26a78:	e2800001 	add	r0, r0, #1
   26a7c:	e5840008 	str	r0, [r4, #8]
   26a80:	eb000d1c 	bl	29ef8 <operator new[](unsigned int)>
   26a84:	e1a01005 	mov	r1, r5
   26a88:	e5840004 	str	r0, [r4, #4]
   26a8c:	eb0009d8 	bl	291f4 <strcpy>
   26a90:	e5940004 	ldr	r0, [r4, #4]
   26a94:	e8bd8070 	pop	{r4, r5, r6, pc}

00026a98 <CString::operator=(CString const&)>:
   26a98:	e92d4070 	push	{r4, r5, r6, lr}
   26a9c:	e1a04000 	mov	r4, r0
   26aa0:	e5900004 	ldr	r0, [r0, #4]
   26aa4:	e1a06001 	mov	r6, r1
   26aa8:	e3500000 	cmp	r0, #0
   26aac:	0a000000 	beq	26ab4 <CString::operator=(CString const&)+0x1c>
   26ab0:	eb000d17 	bl	29f14 <operator delete[](void*)>
   26ab4:	e5960004 	ldr	r0, [r6, #4]
   26ab8:	e59f5030 	ldr	r5, [pc, #48]	; 26af0 <CString::operator=(CString const&)+0x58>
   26abc:	e3500000 	cmp	r0, #0
   26ac0:	01a00005 	moveq	r0, r5
   26ac4:	eb00090c 	bl	28efc <strlen>
   26ac8:	e2800001 	add	r0, r0, #1
   26acc:	e5840008 	str	r0, [r4, #8]
   26ad0:	eb000d08 	bl	29ef8 <operator new[](unsigned int)>
   26ad4:	e5840004 	str	r0, [r4, #4]
   26ad8:	e5961004 	ldr	r1, [r6, #4]
   26adc:	e3510000 	cmp	r1, #0
   26ae0:	01a01005 	moveq	r1, r5
   26ae4:	eb0009c2 	bl	291f4 <strcpy>
   26ae8:	e1a00004 	mov	r0, r4
   26aec:	e8bd8070 	pop	{r4, r5, r6, pc}
   26af0:	0003c7f8 	.word	0x0003c7f8

00026af4 <CString::GetLength() const>:
   26af4:	e5900004 	ldr	r0, [r0, #4]
   26af8:	e3500000 	cmp	r0, #0
   26afc:	012fff1e 	bxeq	lr
   26b00:	ea0008fd 	b	28efc <strlen>

00026b04 <CString::Append(char const*)>:
   26b04:	e92d4070 	push	{r4, r5, r6, lr}
   26b08:	e3a03001 	mov	r3, #1
   26b0c:	e1a04000 	mov	r4, r0
   26b10:	e5900004 	ldr	r0, [r0, #4]
   26b14:	e1a06001 	mov	r6, r1
   26b18:	e3500000 	cmp	r0, #0
   26b1c:	e5843008 	str	r3, [r4, #8]
   26b20:	0a000003 	beq	26b34 <CString::Append(char const*)+0x30>
   26b24:	eb0008f4 	bl	28efc <strlen>
   26b28:	e5943008 	ldr	r3, [r4, #8]
   26b2c:	e0830000 	add	r0, r3, r0
   26b30:	e5840008 	str	r0, [r4, #8]
   26b34:	e1a00006 	mov	r0, r6
   26b38:	eb0008ef 	bl	28efc <strlen>
   26b3c:	e5943008 	ldr	r3, [r4, #8]
   26b40:	e0800003 	add	r0, r0, r3
   26b44:	e5840008 	str	r0, [r4, #8]
   26b48:	eb000cea 	bl	29ef8 <operator new[](unsigned int)>
   26b4c:	e5941004 	ldr	r1, [r4, #4]
   26b50:	e1a05000 	mov	r5, r0
   26b54:	e3510000 	cmp	r1, #0
   26b58:	05c01000 	strbeq	r1, [r0]
   26b5c:	0a000004 	beq	26b74 <CString::Append(char const*)+0x70>
   26b60:	eb0009a3 	bl	291f4 <strcpy>
   26b64:	e5940004 	ldr	r0, [r4, #4]
   26b68:	e3500000 	cmp	r0, #0
   26b6c:	0a000000 	beq	26b74 <CString::Append(char const*)+0x70>
   26b70:	eb000ce7 	bl	29f14 <operator delete[](void*)>
   26b74:	e1a01006 	mov	r1, r6
   26b78:	e1a00005 	mov	r0, r5
   26b7c:	eb0009ba 	bl	2926c <strcat>
   26b80:	e5845004 	str	r5, [r4, #4]
   26b84:	e8bd8070 	pop	{r4, r5, r6, pc}

00026b88 <CString::Compare(char const*) const>:
   26b88:	e5900004 	ldr	r0, [r0, #4]
   26b8c:	ea0008e4 	b	28f24 <strcmp>

00026b90 <CString::Find(char) const>:
   26b90:	e5902004 	ldr	r2, [r0, #4]
   26b94:	e1d230d0 	ldrsb	r3, [r2]
   26b98:	e3530000 	cmp	r3, #0
   26b9c:	0a000009 	beq	26bc8 <CString::Find(char) const+0x38>
   26ba0:	e1510003 	cmp	r1, r3
   26ba4:	e3a00000 	mov	r0, #0
   26ba8:	1a000002 	bne	26bb8 <CString::Find(char) const+0x28>
   26bac:	ea000007 	b	26bd0 <CString::Find(char) const+0x40>
   26bb0:	e1530001 	cmp	r3, r1
   26bb4:	012fff1e 	bxeq	lr
   26bb8:	e1f230d1 	ldrsb	r3, [r2, #1]!
   26bbc:	e2800001 	add	r0, r0, #1
   26bc0:	e3530000 	cmp	r3, #0
   26bc4:	1afffff9 	bne	26bb0 <CString::Find(char) const+0x20>
   26bc8:	e3e00000 	mvn	r0, #0
   26bcc:	e12fff1e 	bx	lr
   26bd0:	e12fff1e 	bx	lr

00026bd4 <CString::PutChar(char, unsigned int)>:
   26bd4:	e92d4070 	push	{r4, r5, r6, lr}
   26bd8:	e2524000 	subs	r4, r2, #0
   26bdc:	08bd8070 	popeq	{r4, r5, r6, pc}
   26be0:	e1a06001 	mov	r6, r1
   26be4:	e1a01004 	mov	r1, r4
   26be8:	e1a05000 	mov	r5, r0
   26bec:	ebffff62 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26bf0:	e2443001 	sub	r3, r4, #1
   26bf4:	e595200c 	ldr	r2, [r5, #12]
   26bf8:	e2433001 	sub	r3, r3, #1
   26bfc:	e2820001 	add	r0, r2, #1
   26c00:	e3730001 	cmn	r3, #1
   26c04:	e585000c 	str	r0, [r5, #12]
   26c08:	e5c26000 	strb	r6, [r2]
   26c0c:	1afffff8 	bne	26bf4 <CString::PutChar(char, unsigned int)+0x20>
   26c10:	e8bd8070 	pop	{r4, r5, r6, pc}

00026c14 <CString::PutString(char const*)>:
   26c14:	e92d4070 	push	{r4, r5, r6, lr}
   26c18:	e1a04000 	mov	r4, r0
   26c1c:	e1a00001 	mov	r0, r1
   26c20:	e1a05001 	mov	r5, r1
   26c24:	eb0008b4 	bl	28efc <strlen>
   26c28:	e2506000 	subs	r6, r0, #0
   26c2c:	0a000002 	beq	26c3c <CString::PutString(char const*)+0x28>
   26c30:	e1a01006 	mov	r1, r6
   26c34:	e1a00004 	mov	r0, r4
   26c38:	ebffff4f 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26c3c:	e1a01005 	mov	r1, r5
   26c40:	e594000c 	ldr	r0, [r4, #12]
   26c44:	eb00096a 	bl	291f4 <strcpy>
   26c48:	e594100c 	ldr	r1, [r4, #12]
   26c4c:	e0811006 	add	r1, r1, r6
   26c50:	e584100c 	str	r1, [r4, #12]
   26c54:	e8bd8070 	pop	{r4, r5, r6, pc}

00026c58 <CString::Replace(char const*, char const*)>:
   26c58:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c5c:	e1d180d0 	ldrsb	r8, [r1]
   26c60:	e24dd014 	sub	sp, sp, #20
   26c64:	e3580000 	cmp	r8, #0
   26c68:	1a000002 	bne	26c78 <CString::Replace(char const*, char const*)+0x20>
   26c6c:	e1a00008 	mov	r0, r8
   26c70:	e28dd014 	add	sp, sp, #20
   26c74:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c78:	e1a0a000 	mov	sl, r0
   26c7c:	e1a07001 	mov	r7, r1
   26c80:	e5901004 	ldr	r1, [r0, #4]
   26c84:	e1a0000d 	mov	r0, sp
   26c88:	e1a09002 	mov	r9, r2
   26c8c:	ebffff5a 	bl	269fc <CString::CString(char const*)>
   26c90:	e59a0004 	ldr	r0, [sl, #4]
   26c94:	e3500000 	cmp	r0, #0
   26c98:	0a000000 	beq	26ca0 <CString::Replace(char const*, char const*)+0x48>
   26c9c:	eb000c9c 	bl	29f14 <operator delete[](void*)>
   26ca0:	e3a00040 	mov	r0, #64	; 0x40
   26ca4:	e58a0008 	str	r0, [sl, #8]
   26ca8:	eb000c92 	bl	29ef8 <operator new[](unsigned int)>
   26cac:	e3a08000 	mov	r8, #0
   26cb0:	e3a06001 	mov	r6, #1
   26cb4:	e59d4004 	ldr	r4, [sp, #4]
   26cb8:	e58a0004 	str	r0, [sl, #4]
   26cbc:	e58a000c 	str	r0, [sl, #12]
   26cc0:	e1d710d0 	ldrsb	r1, [r7]
   26cc4:	e1a00004 	mov	r0, r4
   26cc8:	eb000978 	bl	292b0 <strchr>
   26ccc:	e2505000 	subs	r5, r0, #0
   26cd0:	0a00002d 	beq	26d8c <CString::Replace(char const*, char const*)+0x134>
   26cd4:	e1540005 	cmp	r4, r5
   26cd8:	2a000039 	bcs	26dc4 <CString::Replace(char const*, char const*)+0x16c>
   26cdc:	e1a01006 	mov	r1, r6
   26ce0:	e1a0000a 	mov	r0, sl
   26ce4:	e0d4b0d1 	ldrsb	fp, [r4], #1
   26ce8:	ebffff23 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26cec:	e59a300c 	ldr	r3, [sl, #12]
   26cf0:	e1550004 	cmp	r5, r4
   26cf4:	e2832001 	add	r2, r3, #1
   26cf8:	e58a200c 	str	r2, [sl, #12]
   26cfc:	e5c3b000 	strb	fp, [r3]
   26d00:	1afffff5 	bne	26cdc <CString::Replace(char const*, char const*)+0x84>
   26d04:	e1a0c005 	mov	ip, r5
   26d08:	e2854001 	add	r4, r5, #1
   26d0c:	e1d730d1 	ldrsb	r3, [r7, #1]
   26d10:	e2871001 	add	r1, r7, #1
   26d14:	e3530000 	cmp	r3, #0
   26d18:	0a00000c 	beq	26d50 <CString::Replace(char const*, char const*)+0xf8>
   26d1c:	e1d520d1 	ldrsb	r2, [r5, #1]
   26d20:	e1520003 	cmp	r2, r3
   26d24:	1a00000e 	bne	26d64 <CString::Replace(char const*, char const*)+0x10c>
   26d28:	e2853002 	add	r3, r5, #2
   26d2c:	ea000003 	b	26d40 <CString::Replace(char const*, char const*)+0xe8>
   26d30:	e1d400d0 	ldrsb	r0, [r4]
   26d34:	e2833001 	add	r3, r3, #1
   26d38:	e1500002 	cmp	r0, r2
   26d3c:	1a000008 	bne	26d64 <CString::Replace(char const*, char const*)+0x10c>
   26d40:	e1f120d1 	ldrsb	r2, [r1, #1]!
   26d44:	e1a04003 	mov	r4, r3
   26d48:	e3520000 	cmp	r2, #0
   26d4c:	1afffff7 	bne	26d30 <CString::Replace(char const*, char const*)+0xd8>
   26d50:	e1a01009 	mov	r1, r9
   26d54:	e1a0000a 	mov	r0, sl
   26d58:	e2888001 	add	r8, r8, #1
   26d5c:	ebffffac 	bl	26c14 <CString::PutString(char const*)>
   26d60:	eaffffd6 	b	26cc0 <CString::Replace(char const*, char const*)+0x68>
   26d64:	e1a01006 	mov	r1, r6
   26d68:	e1a0000a 	mov	r0, sl
   26d6c:	e1dc50d0 	ldrsb	r5, [ip]
   26d70:	e28c4001 	add	r4, ip, #1
   26d74:	ebffff00 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   26d78:	e59a300c 	ldr	r3, [sl, #12]
   26d7c:	e2832001 	add	r2, r3, #1
   26d80:	e58a200c 	str	r2, [sl, #12]
   26d84:	e5c35000 	strb	r5, [r3]
   26d88:	eaffffcc 	b	26cc0 <CString::Replace(char const*, char const*)+0x68>
   26d8c:	e1a0000a 	mov	r0, sl
   26d90:	e1a01004 	mov	r1, r4
   26d94:	ebffff9e 	bl	26c14 <CString::PutString(char const*)>
   26d98:	e59a200c 	ldr	r2, [sl, #12]
   26d9c:	e59f302c 	ldr	r3, [pc, #44]	; 26dd0 <CString::Replace(char const*, char const*)+0x178>
   26da0:	e5c25000 	strb	r5, [r2]
   26da4:	e59d0004 	ldr	r0, [sp, #4]
   26da8:	e58d3000 	str	r3, [sp]
   26dac:	e3500000 	cmp	r0, #0
   26db0:	0affffad 	beq	26c6c <CString::Replace(char const*, char const*)+0x14>
   26db4:	eb000c56 	bl	29f14 <operator delete[](void*)>
   26db8:	e1a00008 	mov	r0, r8
   26dbc:	e28dd014 	add	sp, sp, #20
   26dc0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26dc4:	e1a0c004 	mov	ip, r4
   26dc8:	e2854001 	add	r4, r5, #1
   26dcc:	eaffffce 	b	26d0c <CString::Replace(char const*, char const*)+0xb4>
   26dd0:	0003ac4c 	.word	0x0003ac4c

00026dd4 <CString::ReserveSpace(unsigned int)>:
   26dd4:	e3510000 	cmp	r1, #0
   26dd8:	012fff1e 	bxeq	lr
   26ddc:	eafffee6 	b	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>

00026de0 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   26de0:	e1510002 	cmp	r1, r2
   26de4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26de8:	e1a05001 	mov	r5, r1
   26dec:	e1a07002 	mov	r7, r2
   26df0:	e1a09000 	mov	r9, r0
   26df4:	e1a08003 	mov	r8, r3
   26df8:	23a0a001 	movcs	sl, #1
   26dfc:	3a000022 	bcc	26e8c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xac>
   26e00:	e00a0a97 	mul	sl, r7, sl
   26e04:	e1a00005 	mov	r0, r5
   26e08:	e1a0100a 	mov	r1, sl
   26e0c:	eb00260c 	bl	30644 <__aeabi_uidiv>
   26e10:	e1500007 	cmp	r0, r7
   26e14:	e1a04000 	mov	r4, r0
   26e18:	2afffff8 	bcs	26e00 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
   26e1c:	e3580000 	cmp	r8, #0
   26e20:	13a08037 	movne	r8, #55	; 0x37
   26e24:	03a08057 	moveq	r8, #87	; 0x57
   26e28:	e1a06009 	mov	r6, r9
   26e2c:	ea000003 	b	26e40 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
   26e30:	e1a0100a 	mov	r1, sl
   26e34:	e1a00005 	mov	r0, r5
   26e38:	eb002601 	bl	30644 <__aeabi_uidiv>
   26e3c:	e1a04000 	mov	r4, r0
   26e40:	e1a00005 	mov	r0, r5
   26e44:	e1a0100a 	mov	r1, sl
   26e48:	eb00263a 	bl	30738 <__aeabi_uidivmod>
   26e4c:	e3540009 	cmp	r4, #9
   26e50:	e2843030 	add	r3, r4, #48	; 0x30
   26e54:	80884004 	addhi	r4, r8, r4
   26e58:	96af4073 	sxtbls	r4, r3
   26e5c:	86af4074 	sxtbhi	r4, r4
   26e60:	e2866001 	add	r6, r6, #1
   26e64:	e1a0000a 	mov	r0, sl
   26e68:	e1a05001 	mov	r5, r1
   26e6c:	e5464001 	strb	r4, [r6, #-1]
   26e70:	e1a01007 	mov	r1, r7
   26e74:	eb0025f2 	bl	30644 <__aeabi_uidiv>
   26e78:	e250a000 	subs	sl, r0, #0
   26e7c:	1affffeb 	bne	26e30 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
   26e80:	e5c6a000 	strb	sl, [r6]
   26e84:	e1a00009 	mov	r0, r9
   26e88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26e8c:	e1a04001 	mov	r4, r1
   26e90:	e3a0a001 	mov	sl, #1
   26e94:	eaffffe0 	b	26e1c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

00026e98 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   26e98:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26e9c:	e3a0b000 	mov	fp, #0
   26ea0:	e24dd014 	sub	sp, sp, #20
   26ea4:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   26ea8:	e153000b 	cmp	r3, fp
   26eac:	e1a07003 	mov	r7, r3
   26eb0:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   26eb4:	01520001 	cmpeq	r2, r1
   26eb8:	e1a06002 	mov	r6, r2
   26ebc:	e1a0a001 	mov	sl, r1
   26ec0:	e58d000c 	str	r0, [sp, #12]
   26ec4:	e58d3000 	str	r3, [sp]
   26ec8:	23a04001 	movcs	r4, #1
   26ecc:	23a05000 	movcs	r5, #0
   26ed0:	3a00003a 	bcc	26fc0 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x128>
   26ed4:	e0030b94 	mul	r3, r4, fp
   26ed8:	e023359a 	mla	r3, sl, r5, r3
   26edc:	e0854a94 	umull	r4, r5, r4, sl
   26ee0:	e0835005 	add	r5, r3, r5
   26ee4:	e1a02004 	mov	r2, r4
   26ee8:	e1a03005 	mov	r3, r5
   26eec:	e1a00006 	mov	r0, r6
   26ef0:	e1a01007 	mov	r1, r7
   26ef4:	eb002618 	bl	3075c <__aeabi_uldivmod>
   26ef8:	e151000b 	cmp	r1, fp
   26efc:	0150000a 	cmpeq	r0, sl
   26f00:	e1a08000 	mov	r8, r0
   26f04:	e1a09001 	mov	r9, r1
   26f08:	2afffff1 	bcs	26ed4 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x3c>
   26f0c:	e59d3000 	ldr	r3, [sp]
   26f10:	e1cda0f0 	strd	sl, [sp]
   26f14:	e3530000 	cmp	r3, #0
   26f18:	13a03037 	movne	r3, #55	; 0x37
   26f1c:	03a03057 	moveq	r3, #87	; 0x57
   26f20:	e58d3008 	str	r3, [sp, #8]
   26f24:	e59d300c 	ldr	r3, [sp, #12]
   26f28:	e1a0b003 	mov	fp, r3
   26f2c:	ea000006 	b	26f4c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0xb4>
   26f30:	e1a02000 	mov	r2, r0
   26f34:	e1a03001 	mov	r3, r1
   26f38:	e1a00006 	mov	r0, r6
   26f3c:	e1a01007 	mov	r1, r7
   26f40:	eb002605 	bl	3075c <__aeabi_uldivmod>
   26f44:	e1a08000 	mov	r8, r0
   26f48:	e1a09001 	mov	r9, r1
   26f4c:	e1a00006 	mov	r0, r6
   26f50:	e1a01007 	mov	r1, r7
   26f54:	e1a02004 	mov	r2, r4
   26f58:	e1a03005 	mov	r3, r5
   26f5c:	eb0025fe 	bl	3075c <__aeabi_uldivmod>
   26f60:	e3590000 	cmp	r9, #0
   26f64:	03580009 	cmpeq	r8, #9
   26f68:	e1a07003 	mov	r7, r3
   26f6c:	e2883030 	add	r3, r8, #48	; 0x30
   26f70:	859d3008 	ldrhi	r3, [sp, #8]
   26f74:	96af8073 	sxtbls	r8, r3
   26f78:	80838008 	addhi	r8, r3, r8
   26f7c:	86af8078 	sxtbhi	r8, r8
   26f80:	e28bb001 	add	fp, fp, #1
   26f84:	e1a00004 	mov	r0, r4
   26f88:	e1a01005 	mov	r1, r5
   26f8c:	e1a06002 	mov	r6, r2
   26f90:	e1cd20d0 	ldrd	r2, [sp]
   26f94:	e54b8001 	strb	r8, [fp, #-1]
   26f98:	eb0025ef 	bl	3075c <__aeabi_uldivmod>
   26f9c:	e1a04000 	mov	r4, r0
   26fa0:	e1a05001 	mov	r5, r1
   26fa4:	e1943005 	orrs	r3, r4, r5
   26fa8:	1affffe0 	bne	26f30 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x98>
   26fac:	e3a03000 	mov	r3, #0
   26fb0:	e59d000c 	ldr	r0, [sp, #12]
   26fb4:	e5cb3000 	strb	r3, [fp]
   26fb8:	e28dd014 	add	sp, sp, #20
   26fbc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26fc0:	e1a08002 	mov	r8, r2
   26fc4:	e1a09007 	mov	r9, r7
   26fc8:	e3a04001 	mov	r4, #1
   26fcc:	e3a05000 	mov	r5, #0
   26fd0:	eaffffcd 	b	26f0c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x74>

00026fd4 <CString::ftoa(char*, double, unsigned int)>:
   26fd4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26fd8:	ed2d8b02 	vpush	{d8}
   26fdc:	ec432b18 	vmov	d8, r2, r3
   26fe0:	eeb58bc0 	vcmpe.f64	d8, #0.0
   26fe4:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   26fe8:	ed9f7b92 	vldr	d7, [pc, #584]	; 27238 <CString::ftoa(char*, double, unsigned int)+0x264>
   26fec:	4eb18b48 	vnegmi.f64	d8, d8
   26ff0:	43a0302d 	movmi	r3, #45	; 0x2d
   26ff4:	eeb48bc7 	vcmpe.f64	d8, d7
   26ff8:	45c03000 	strbmi	r3, [r0]
   26ffc:	4280b001 	addmi	fp, r0, #1
   27000:	51a0b000 	movpl	fp, r0
   27004:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   27008:	e24dd01c 	sub	sp, sp, #28
   2700c:	e1a0a000 	mov	sl, r0
   27010:	ca000079 	bgt	271fc <CString::ftoa(char*, double, unsigned int)+0x228>
   27014:	eefc7bc8 	vcvt.u32.f64	s15, d8
   27018:	ee177a90 	vmov	r7, s15
   2701c:	e3570009 	cmp	r7, #9
   27020:	83a04001 	movhi	r4, #1
   27024:	9a00007b 	bls	27218 <CString::ftoa(char*, double, unsigned int)+0x244>
   27028:	e0844104 	add	r4, r4, r4, lsl #2
   2702c:	e1a04084 	lsl	r4, r4, #1
   27030:	e1a01004 	mov	r1, r4
   27034:	e1a00007 	mov	r0, r7
   27038:	eb002581 	bl	30644 <__aeabi_uidiv>
   2703c:	e3500009 	cmp	r0, #9
   27040:	e1a05000 	mov	r5, r0
   27044:	8afffff7 	bhi	27028 <CString::ftoa(char*, double, unsigned int)+0x54>
   27048:	e1a0600b 	mov	r6, fp
   2704c:	e1a09007 	mov	r9, r7
   27050:	e59f81f0 	ldr	r8, [pc, #496]	; 27248 <CString::ftoa(char*, double, unsigned int)+0x274>
   27054:	ea000003 	b	27068 <CString::ftoa(char*, double, unsigned int)+0x94>
   27058:	e1a01004 	mov	r1, r4
   2705c:	e1a00009 	mov	r0, r9
   27060:	eb002577 	bl	30644 <__aeabi_uidiv>
   27064:	e1a05000 	mov	r5, r0
   27068:	e1a00009 	mov	r0, r9
   2706c:	e1a01004 	mov	r1, r4
   27070:	eb0025b0 	bl	30738 <__aeabi_uidivmod>
   27074:	e0843498 	umull	r3, r4, r8, r4
   27078:	e3550009 	cmp	r5, #9
   2707c:	e2852030 	add	r2, r5, #48	; 0x30
   27080:	82855057 	addhi	r5, r5, #87	; 0x57
   27084:	96af5072 	sxtbls	r5, r2
   27088:	86af5075 	sxtbhi	r5, r5
   2708c:	e2866001 	add	r6, r6, #1
   27090:	e1b041a4 	lsrs	r4, r4, #3
   27094:	e1a09001 	mov	r9, r1
   27098:	e5465001 	strb	r5, [r6, #-1]
   2709c:	1affffed 	bne	27058 <CString::ftoa(char*, double, unsigned int)+0x84>
   270a0:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
   270a4:	e5c64000 	strb	r4, [r6]
   270a8:	e3530000 	cmp	r3, #0
   270ac:	1a000003 	bne	270c0 <CString::ftoa(char*, double, unsigned int)+0xec>
   270b0:	e1a0000a 	mov	r0, sl
   270b4:	e28dd01c 	add	sp, sp, #28
   270b8:	ecbd8b02 	vpop	{d8}
   270bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   270c0:	e1a0000b 	mov	r0, fp
   270c4:	eb00078c 	bl	28efc <strlen>
   270c8:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
   270cc:	e08b2000 	add	r2, fp, r0
   270d0:	e3530009 	cmp	r3, #9
   270d4:	31a09003 	movcc	r9, r3
   270d8:	23a09009 	movcs	r9, #9
   270dc:	e3a0302e 	mov	r3, #46	; 0x2e
   270e0:	e3590001 	cmp	r9, #1
   270e4:	e7cb3000 	strb	r3, [fp, r0]
   270e8:	e58d2004 	str	r2, [sp, #4]
   270ec:	e282b001 	add	fp, r2, #1
   270f0:	0a00004e 	beq	27230 <CString::ftoa(char*, double, unsigned int)+0x25c>
   270f4:	e3a02002 	mov	r2, #2
   270f8:	e3a0300a 	mov	r3, #10
   270fc:	e2822001 	add	r2, r2, #1
   27100:	e0833103 	add	r3, r3, r3, lsl #2
   27104:	e1520009 	cmp	r2, r9
   27108:	e1a03083 	lsl	r3, r3, #1
   2710c:	9afffffa 	bls	270fc <CString::ftoa(char*, double, unsigned int)+0x128>
   27110:	ee073a90 	vmov	s15, r3
   27114:	eeb87b67 	vcvt.f64.u32	d7, s15
   27118:	ee067a90 	vmov	s13, r7
   2711c:	eeb86b66 	vcvt.f64.u32	d6, s13
   27120:	ee386b46 	vsub.f64	d6, d8, d6
   27124:	ee267b07 	vmul.f64	d7, d6, d7
   27128:	eefc7bc7 	vcvt.u32.f64	s15, d7
   2712c:	ee178a90 	vmov	r8, s15
   27130:	e3580009 	cmp	r8, #9
   27134:	83a04001 	movhi	r4, #1
   27138:	9a000039 	bls	27224 <CString::ftoa(char*, double, unsigned int)+0x250>
   2713c:	e0844104 	add	r4, r4, r4, lsl #2
   27140:	e1a04084 	lsl	r4, r4, #1
   27144:	e1a01004 	mov	r1, r4
   27148:	e1a00008 	mov	r0, r8
   2714c:	eb00253c 	bl	30644 <__aeabi_uidiv>
   27150:	e3500009 	cmp	r0, #9
   27154:	e1a05000 	mov	r5, r0
   27158:	8afffff7 	bhi	2713c <CString::ftoa(char*, double, unsigned int)+0x168>
   2715c:	e28d600c 	add	r6, sp, #12
   27160:	e59f70e0 	ldr	r7, [pc, #224]	; 27248 <CString::ftoa(char*, double, unsigned int)+0x274>
   27164:	ea000003 	b	27178 <CString::ftoa(char*, double, unsigned int)+0x1a4>
   27168:	e1a01004 	mov	r1, r4
   2716c:	e1a00008 	mov	r0, r8
   27170:	eb002533 	bl	30644 <__aeabi_uidiv>
   27174:	e1a05000 	mov	r5, r0
   27178:	e1a00008 	mov	r0, r8
   2717c:	e1a01004 	mov	r1, r4
   27180:	eb00256c 	bl	30738 <__aeabi_uidivmod>
   27184:	e0843497 	umull	r3, r4, r7, r4
   27188:	e3550009 	cmp	r5, #9
   2718c:	e2852030 	add	r2, r5, #48	; 0x30
   27190:	82855057 	addhi	r5, r5, #87	; 0x57
   27194:	96af5072 	sxtbls	r5, r2
   27198:	86af5075 	sxtbhi	r5, r5
   2719c:	e2866001 	add	r6, r6, #1
   271a0:	e1b041a4 	lsrs	r4, r4, #3
   271a4:	e1a08001 	mov	r8, r1
   271a8:	e5465001 	strb	r5, [r6, #-1]
   271ac:	1affffed 	bne	27168 <CString::ftoa(char*, double, unsigned int)+0x194>
   271b0:	e28d000c 	add	r0, sp, #12
   271b4:	e5c64000 	strb	r4, [r6]
   271b8:	eb00074f 	bl	28efc <strlen>
   271bc:	e0599000 	subs	r9, r9, r0
   271c0:	0a000006 	beq	271e0 <CString::ftoa(char*, double, unsigned int)+0x20c>
   271c4:	e3a02030 	mov	r2, #48	; 0x30
   271c8:	e59d8004 	ldr	r8, [sp, #4]
   271cc:	e0883009 	add	r3, r8, r9
   271d0:	e5e82001 	strb	r2, [r8, #1]!
   271d4:	e1580003 	cmp	r8, r3
   271d8:	1afffffc 	bne	271d0 <CString::ftoa(char*, double, unsigned int)+0x1fc>
   271dc:	e08bb009 	add	fp, fp, r9
   271e0:	e28d100c 	add	r1, sp, #12
   271e4:	e1a0000b 	mov	r0, fp
   271e8:	eb000801 	bl	291f4 <strcpy>
   271ec:	e1a0000a 	mov	r0, sl
   271f0:	e28dd01c 	add	sp, sp, #28
   271f4:	ecbd8b02 	vpop	{d8}
   271f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   271fc:	e1a0000b 	mov	r0, fp
   27200:	e59f1044 	ldr	r1, [pc, #68]	; 2724c <CString::ftoa(char*, double, unsigned int)+0x278>
   27204:	eb0007fa 	bl	291f4 <strcpy>
   27208:	e1a0000a 	mov	r0, sl
   2720c:	e28dd01c 	add	sp, sp, #28
   27210:	ecbd8b02 	vpop	{d8}
   27214:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27218:	ee175a90 	vmov	r5, s15
   2721c:	e3a04001 	mov	r4, #1
   27220:	eaffff88 	b	27048 <CString::ftoa(char*, double, unsigned int)+0x74>
   27224:	ee175a90 	vmov	r5, s15
   27228:	e3a04001 	mov	r4, #1
   2722c:	eaffffca 	b	2715c <CString::ftoa(char*, double, unsigned int)+0x188>
   27230:	ed9f7b02 	vldr	d7, [pc, #8]	; 27240 <CString::ftoa(char*, double, unsigned int)+0x26c>
   27234:	eaffffb7 	b	27118 <CString::ftoa(char*, double, unsigned int)+0x144>
   27238:	ffe00000 	.word	0xffe00000
   2723c:	41efffff 	.word	0x41efffff
   27240:	00000000 	.word	0x00000000
   27244:	40240000 	.word	0x40240000
   27248:	cccccccd 	.word	0xcccccccd
   2724c:	0003ac54 	.word	0x0003ac54

00027250 <CString::FormatV(char const*, std::__va_list)>:
   27250:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27254:	e24dd064 	sub	sp, sp, #100	; 0x64
   27258:	e58d000c 	str	r0, [sp, #12]
   2725c:	e5900004 	ldr	r0, [r0, #4]
   27260:	e1a09001 	mov	r9, r1
   27264:	e3500000 	cmp	r0, #0
   27268:	e58d2018 	str	r2, [sp, #24]
   2726c:	0a000000 	beq	27274 <CString::FormatV(char const*, std::__va_list)+0x24>
   27270:	eb000b27 	bl	29f14 <operator delete[](void*)>
   27274:	e3a00040 	mov	r0, #64	; 0x40
   27278:	e59d400c 	ldr	r4, [sp, #12]
   2727c:	e1a05009 	mov	r5, r9
   27280:	e5840008 	str	r0, [r4, #8]
   27284:	eb000b1b 	bl	29ef8 <operator new[](unsigned int)>
   27288:	e1a03004 	mov	r3, r4
   2728c:	e5840004 	str	r0, [r4, #4]
   27290:	e584000c 	str	r0, [r4, #12]
   27294:	e1d540d0 	ldrsb	r4, [r5]
   27298:	e3540000 	cmp	r4, #0
   2729c:	0a00009f 	beq	27520 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   272a0:	e3540025 	cmp	r4, #37	; 0x25
   272a4:	1a0001d7 	bne	27a08 <CString::FormatV(char const*, std::__va_list)+0x7b8>
   272a8:	e1d560d1 	ldrsb	r6, [r5, #1]
   272ac:	e3560025 	cmp	r6, #37	; 0x25
   272b0:	0a0001f5 	beq	27a8c <CString::FormatV(char const*, std::__va_list)+0x83c>
   272b4:	e3560023 	cmp	r6, #35	; 0x23
   272b8:	01d560d2 	ldrsbeq	r6, [r5, #2]
   272bc:	12855001 	addne	r5, r5, #1
   272c0:	02855002 	addeq	r5, r5, #2
   272c4:	13a02000 	movne	r2, #0
   272c8:	03a02001 	moveq	r2, #1
   272cc:	e356002d 	cmp	r6, #45	; 0x2d
   272d0:	03a03001 	moveq	r3, #1
   272d4:	13a03000 	movne	r3, #0
   272d8:	01d560d1 	ldrsbeq	r6, [r5, #1]
   272dc:	058d301c 	streq	r3, [sp, #28]
   272e0:	00855003 	addeq	r5, r5, r3
   272e4:	158d301c 	strne	r3, [sp, #28]
   272e8:	e3560030 	cmp	r6, #48	; 0x30
   272ec:	03a03001 	moveq	r3, #1
   272f0:	13a03000 	movne	r3, #0
   272f4:	01d560d1 	ldrsbeq	r6, [r5, #1]
   272f8:	058d3024 	streq	r3, [sp, #36]	; 0x24
   272fc:	00855003 	addeq	r5, r5, r3
   27300:	158d3024 	strne	r3, [sp, #36]	; 0x24
   27304:	e2463030 	sub	r3, r6, #48	; 0x30
   27308:	e6ef3073 	uxtb	r3, r3
   2730c:	e3530009 	cmp	r3, #9
   27310:	e3a04000 	mov	r4, #0
   27314:	8a000007 	bhi	27338 <CString::FormatV(char const*, std::__va_list)+0xe8>
   27318:	e0844104 	add	r4, r4, r4, lsl #2
   2731c:	e0864084 	add	r4, r6, r4, lsl #1
   27320:	e1f560d1 	ldrsb	r6, [r5, #1]!
   27324:	e2444030 	sub	r4, r4, #48	; 0x30
   27328:	e2463030 	sub	r3, r6, #48	; 0x30
   2732c:	e6ef3073 	uxtb	r3, r3
   27330:	e3530009 	cmp	r3, #9
   27334:	9afffff7 	bls	27318 <CString::FormatV(char const*, std::__va_list)+0xc8>
   27338:	e356002e 	cmp	r6, #46	; 0x2e
   2733c:	0a0001c2 	beq	27a4c <CString::FormatV(char const*, std::__va_list)+0x7fc>
   27340:	e3a01006 	mov	r1, #6
   27344:	e1d5a0d0 	ldrsb	sl, [r5]
   27348:	e35a006c 	cmp	sl, #108	; 0x6c
   2734c:	13a06000 	movne	r6, #0
   27350:	0a0001b5 	beq	27a2c <CString::FormatV(char const*, std::__va_list)+0x7dc>
   27354:	e24a3058 	sub	r3, sl, #88	; 0x58
   27358:	e3530020 	cmp	r3, #32
   2735c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   27360:	ea000196 	b	279c0 <CString::FormatV(char const*, std::__va_list)+0x770>
   27364:	00027990 	.word	0x00027990
   27368:	000279c0 	.word	0x000279c0
   2736c:	000279c0 	.word	0x000279c0
   27370:	000279c0 	.word	0x000279c0
   27374:	000279c0 	.word	0x000279c0
   27378:	000279c0 	.word	0x000279c0
   2737c:	000279c0 	.word	0x000279c0
   27380:	000279c0 	.word	0x000279c0
   27384:	000279c0 	.word	0x000279c0
   27388:	000279c0 	.word	0x000279c0
   2738c:	000279c0 	.word	0x000279c0
   27390:	00027910 	.word	0x00027910
   27394:	0002763c 	.word	0x0002763c
   27398:	000279c0 	.word	0x000279c0
   2739c:	000275b0 	.word	0x000275b0
   273a0:	000279c0 	.word	0x000279c0
   273a4:	000279c0 	.word	0x000279c0
   273a8:	0002763c 	.word	0x0002763c
   273ac:	000279c0 	.word	0x000279c0
   273b0:	000279c0 	.word	0x000279c0
   273b4:	000279c0 	.word	0x000279c0
   273b8:	000279c0 	.word	0x000279c0
   273bc:	000279c0 	.word	0x000279c0
   273c0:	00027770 	.word	0x00027770
   273c4:	00027990 	.word	0x00027990
   273c8:	000279c0 	.word	0x000279c0
   273cc:	000279c0 	.word	0x000279c0
   273d0:	00027534 	.word	0x00027534
   273d4:	000279c0 	.word	0x000279c0
   273d8:	000273e8 	.word	0x000273e8
   273dc:	000279c0 	.word	0x000279c0
   273e0:	000279c0 	.word	0x000279c0
   273e4:	00027990 	.word	0x00027990
   273e8:	e3a0700a 	mov	r7, #10
   273ec:	e3560000 	cmp	r6, #0
   273f0:	1a0000ee 	bne	277b0 <CString::FormatV(char const*, std::__va_list)+0x560>
   273f4:	e59d3018 	ldr	r3, [sp, #24]
   273f8:	e5936000 	ldr	r6, [r3]
   273fc:	e2833004 	add	r3, r3, #4
   27400:	e1570006 	cmp	r7, r6
   27404:	e58d3018 	str	r3, [sp, #24]
   27408:	93a0b001 	movls	fp, #1
   2740c:	8a000298 	bhi	27e74 <CString::FormatV(char const*, std::__va_list)+0xc24>
   27410:	e00b0b97 	mul	fp, r7, fp
   27414:	e1a00006 	mov	r0, r6
   27418:	e1a0100b 	mov	r1, fp
   2741c:	eb002488 	bl	30644 <__aeabi_uidiv>
   27420:	e1570000 	cmp	r7, r0
   27424:	9afffff9 	bls	27410 <CString::FormatV(char const*, std::__va_list)+0x1c0>
   27428:	e1a09000 	mov	r9, r0
   2742c:	e28d303c 	add	r3, sp, #60	; 0x3c
   27430:	e35a0058 	cmp	sl, #88	; 0x58
   27434:	e58d3020 	str	r3, [sp, #32]
   27438:	13a0a057 	movne	sl, #87	; 0x57
   2743c:	03a0a037 	moveq	sl, #55	; 0x37
   27440:	e1a08003 	mov	r8, r3
   27444:	ea000003 	b	27458 <CString::FormatV(char const*, std::__va_list)+0x208>
   27448:	e1a0100b 	mov	r1, fp
   2744c:	e1a00006 	mov	r0, r6
   27450:	eb00247b 	bl	30644 <__aeabi_uidiv>
   27454:	e1a09000 	mov	r9, r0
   27458:	e1a00006 	mov	r0, r6
   2745c:	e1a0100b 	mov	r1, fp
   27460:	eb0024b4 	bl	30738 <__aeabi_uidivmod>
   27464:	e3590009 	cmp	r9, #9
   27468:	e2893030 	add	r3, r9, #48	; 0x30
   2746c:	808a9009 	addhi	r9, sl, r9
   27470:	96af9073 	sxtbls	r9, r3
   27474:	86af9079 	sxtbhi	r9, r9
   27478:	e2888001 	add	r8, r8, #1
   2747c:	e1a0000b 	mov	r0, fp
   27480:	e1a06001 	mov	r6, r1
   27484:	e5489001 	strb	r9, [r8, #-1]
   27488:	e1a01007 	mov	r1, r7
   2748c:	eb00246c 	bl	30644 <__aeabi_uidiv>
   27490:	e250b000 	subs	fp, r0, #0
   27494:	1affffeb 	bne	27448 <CString::FormatV(char const*, std::__va_list)+0x1f8>
   27498:	e5c8b000 	strb	fp, [r8]
   2749c:	e59d0020 	ldr	r0, [sp, #32]
   274a0:	eb000695 	bl	28efc <strlen>
   274a4:	e59d301c 	ldr	r3, [sp, #28]
   274a8:	e1a06000 	mov	r6, r0
   274ac:	e3530000 	cmp	r3, #0
   274b0:	1a00017f 	bne	27ab4 <CString::FormatV(char const*, std::__va_list)+0x864>
   274b4:	e1500004 	cmp	r0, r4
   274b8:	2a000011 	bcs	27504 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   274bc:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   274c0:	e59d600c 	ldr	r6, [sp, #12]
   274c4:	e0444000 	sub	r4, r4, r0
   274c8:	e3530000 	cmp	r3, #0
   274cc:	e1a01004 	mov	r1, r4
   274d0:	e1a00006 	mov	r0, r6
   274d4:	03a07020 	moveq	r7, #32
   274d8:	13a07030 	movne	r7, #48	; 0x30
   274dc:	ebfffd26 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   274e0:	e1a01006 	mov	r1, r6
   274e4:	e2443001 	sub	r3, r4, #1
   274e8:	e591200c 	ldr	r2, [r1, #12]
   274ec:	e2433001 	sub	r3, r3, #1
   274f0:	e2820001 	add	r0, r2, #1
   274f4:	e3730001 	cmn	r3, #1
   274f8:	e581000c 	str	r0, [r1, #12]
   274fc:	e5c27000 	strb	r7, [r2]
   27500:	1afffff8 	bne	274e8 <CString::FormatV(char const*, std::__va_list)+0x298>
   27504:	e59d1020 	ldr	r1, [sp, #32]
   27508:	e59d000c 	ldr	r0, [sp, #12]
   2750c:	ebfffdc0 	bl	26c14 <CString::PutString(char const*)>
   27510:	e2855001 	add	r5, r5, #1
   27514:	e1d540d0 	ldrsb	r4, [r5]
   27518:	e3540000 	cmp	r4, #0
   2751c:	1affff5f 	bne	272a0 <CString::FormatV(char const*, std::__va_list)+0x50>
   27520:	e59d300c 	ldr	r3, [sp, #12]
   27524:	e593300c 	ldr	r3, [r3, #12]
   27528:	e5c34000 	strb	r4, [r3]
   2752c:	e28dd064 	add	sp, sp, #100	; 0x64
   27530:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27534:	e59d3018 	ldr	r3, [sp, #24]
   27538:	e5938000 	ldr	r8, [r3]
   2753c:	e2836004 	add	r6, r3, #4
   27540:	e1a00008 	mov	r0, r8
   27544:	eb00066c 	bl	28efc <strlen>
   27548:	e59d301c 	ldr	r3, [sp, #28]
   2754c:	e1a07000 	mov	r7, r0
   27550:	e3530000 	cmp	r3, #0
   27554:	1a0001fd 	bne	27d50 <CString::FormatV(char const*, std::__va_list)+0xb00>
   27558:	e1500004 	cmp	r0, r4
   2755c:	2a00000e 	bcs	2759c <CString::FormatV(char const*, std::__va_list)+0x34c>
   27560:	e59d700c 	ldr	r7, [sp, #12]
   27564:	e0444000 	sub	r4, r4, r0
   27568:	e1a01004 	mov	r1, r4
   2756c:	e1a00007 	mov	r0, r7
   27570:	ebfffd01 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27574:	e1a01007 	mov	r1, r7
   27578:	e2443001 	sub	r3, r4, #1
   2757c:	e591200c 	ldr	r2, [r1, #12]
   27580:	e2433001 	sub	r3, r3, #1
   27584:	e2820001 	add	r0, r2, #1
   27588:	e581000c 	str	r0, [r1, #12]
   2758c:	e3a00020 	mov	r0, #32
   27590:	e3730001 	cmn	r3, #1
   27594:	e5c20000 	strb	r0, [r2]
   27598:	1afffff7 	bne	2757c <CString::FormatV(char const*, std::__va_list)+0x32c>
   2759c:	e1a01008 	mov	r1, r8
   275a0:	e59d000c 	ldr	r0, [sp, #12]
   275a4:	e58d6018 	str	r6, [sp, #24]
   275a8:	ebfffd99 	bl	26c14 <CString::PutString(char const*)>
   275ac:	eaffffd7 	b	27510 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   275b0:	e28d003c 	add	r0, sp, #60	; 0x3c
   275b4:	e1a06000 	mov	r6, r0
   275b8:	e59d3018 	ldr	r3, [sp, #24]
   275bc:	e58d0020 	str	r0, [sp, #32]
   275c0:	e283c007 	add	ip, r3, #7
   275c4:	e3ccc007 	bic	ip, ip, #7
   275c8:	e1cc20d0 	ldrd	r2, [ip]
   275cc:	e58d1000 	str	r1, [sp]
   275d0:	e28c1008 	add	r1, ip, #8
   275d4:	e58d1018 	str	r1, [sp, #24]
   275d8:	ebfffe7d 	bl	26fd4 <CString::ftoa(char*, double, unsigned int)>
   275dc:	e1a00006 	mov	r0, r6
   275e0:	eb000645 	bl	28efc <strlen>
   275e4:	e59d301c 	ldr	r3, [sp, #28]
   275e8:	e1a06000 	mov	r6, r0
   275ec:	e3530000 	cmp	r3, #0
   275f0:	1a0001eb 	bne	27da4 <CString::FormatV(char const*, std::__va_list)+0xb54>
   275f4:	e1500004 	cmp	r0, r4
   275f8:	2affffc1 	bcs	27504 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   275fc:	e59d600c 	ldr	r6, [sp, #12]
   27600:	e0444000 	sub	r4, r4, r0
   27604:	e1a01004 	mov	r1, r4
   27608:	e1a00006 	mov	r0, r6
   2760c:	ebfffcda 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27610:	e1a01006 	mov	r1, r6
   27614:	e2443001 	sub	r3, r4, #1
   27618:	e591200c 	ldr	r2, [r1, #12]
   2761c:	e2433001 	sub	r3, r3, #1
   27620:	e2820001 	add	r0, r2, #1
   27624:	e581000c 	str	r0, [r1, #12]
   27628:	e3a00020 	mov	r0, #32
   2762c:	e3730001 	cmn	r3, #1
   27630:	e5c20000 	strb	r0, [r2]
   27634:	1afffff7 	bne	27618 <CString::FormatV(char const*, std::__va_list)+0x3c8>
   27638:	eaffffb1 	b	27504 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   2763c:	e3560000 	cmp	r6, #0
   27640:	e59d3018 	ldr	r3, [sp, #24]
   27644:	1a00016a 	bne	27bf4 <CString::FormatV(char const*, std::__va_list)+0x9a4>
   27648:	e5936000 	ldr	r6, [r3]
   2764c:	e2833004 	add	r3, r3, #4
   27650:	e3560000 	cmp	r6, #0
   27654:	e58d3018 	str	r3, [sp, #24]
   27658:	aa000208 	bge	27e80 <CString::FormatV(char const*, std::__va_list)+0xc30>
   2765c:	e3a0b001 	mov	fp, #1
   27660:	e2666000 	rsb	r6, r6, #0
   27664:	e58db010 	str	fp, [sp, #16]
   27668:	e3560009 	cmp	r6, #9
   2766c:	e1a07006 	mov	r7, r6
   27670:	da000218 	ble	27ed8 <CString::FormatV(char const*, std::__va_list)+0xc88>
   27674:	e3a08001 	mov	r8, #1
   27678:	e0888108 	add	r8, r8, r8, lsl #2
   2767c:	e1a08088 	lsl	r8, r8, #1
   27680:	e1a01008 	mov	r1, r8
   27684:	e1a00006 	mov	r0, r6
   27688:	eb0023ed 	bl	30644 <__aeabi_uidiv>
   2768c:	e3500009 	cmp	r0, #9
   27690:	8afffff8 	bhi	27678 <CString::FormatV(char const*, std::__va_list)+0x428>
   27694:	e1a09000 	mov	r9, r0
   27698:	e28d303c 	add	r3, sp, #60	; 0x3c
   2769c:	e58d3020 	str	r3, [sp, #32]
   276a0:	e1a06003 	mov	r6, r3
   276a4:	ea000003 	b	276b8 <CString::FormatV(char const*, std::__va_list)+0x468>
   276a8:	e1a01008 	mov	r1, r8
   276ac:	e1a00007 	mov	r0, r7
   276b0:	eb0023e3 	bl	30644 <__aeabi_uidiv>
   276b4:	e1a09000 	mov	r9, r0
   276b8:	e1a00007 	mov	r0, r7
   276bc:	e1a01008 	mov	r1, r8
   276c0:	eb00241c 	bl	30738 <__aeabi_uidivmod>
   276c4:	e3590009 	cmp	r9, #9
   276c8:	e2893030 	add	r3, r9, #48	; 0x30
   276cc:	96af9073 	sxtbls	r9, r3
   276d0:	e59f380c 	ldr	r3, [pc, #2060]	; 27ee4 <CString::FormatV(char const*, std::__va_list)+0xc94>
   276d4:	82899057 	addhi	r9, r9, #87	; 0x57
   276d8:	e0883893 	umull	r3, r8, r3, r8
   276dc:	86af9079 	sxtbhi	r9, r9
   276e0:	e2866001 	add	r6, r6, #1
   276e4:	e1b081a8 	lsrs	r8, r8, #3
   276e8:	e1a07001 	mov	r7, r1
   276ec:	e5469001 	strb	r9, [r6, #-1]
   276f0:	1affffec 	bne	276a8 <CString::FormatV(char const*, std::__va_list)+0x458>
   276f4:	e5c68000 	strb	r8, [r6]
   276f8:	e59d0020 	ldr	r0, [sp, #32]
   276fc:	eb0005fe 	bl	28efc <strlen>
   27700:	e59d301c 	ldr	r3, [sp, #28]
   27704:	e080b00b 	add	fp, r0, fp
   27708:	e3530000 	cmp	r3, #0
   2770c:	0a0000fd 	beq	27b08 <CString::FormatV(char const*, std::__va_list)+0x8b8>
   27710:	e59d3010 	ldr	r3, [sp, #16]
   27714:	e3530000 	cmp	r3, #0
   27718:	1a0001cb 	bne	27e4c <CString::FormatV(char const*, std::__va_list)+0xbfc>
   2771c:	e59d1020 	ldr	r1, [sp, #32]
   27720:	e59d000c 	ldr	r0, [sp, #12]
   27724:	ebfffd3a 	bl	26c14 <CString::PutString(char const*)>
   27728:	e15b0004 	cmp	fp, r4
   2772c:	2affff77 	bcs	27510 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   27730:	e59d600c 	ldr	r6, [sp, #12]
   27734:	e044400b 	sub	r4, r4, fp
   27738:	e1a01004 	mov	r1, r4
   2773c:	e1a00006 	mov	r0, r6
   27740:	ebfffc8d 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27744:	e1a01006 	mov	r1, r6
   27748:	e2443001 	sub	r3, r4, #1
   2774c:	e591200c 	ldr	r2, [r1, #12]
   27750:	e2433001 	sub	r3, r3, #1
   27754:	e2820001 	add	r0, r2, #1
   27758:	e581000c 	str	r0, [r1, #12]
   2775c:	e3a00020 	mov	r0, #32
   27760:	e3730001 	cmn	r3, #1
   27764:	e5c20000 	strb	r0, [r2]
   27768:	1afffff7 	bne	2774c <CString::FormatV(char const*, std::__va_list)+0x4fc>
   2776c:	eaffff67 	b	27510 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   27770:	e3520000 	cmp	r2, #0
   27774:	03a07008 	moveq	r7, #8
   27778:	0affff1b 	beq	273ec <CString::FormatV(char const*, std::__va_list)+0x19c>
   2777c:	e59d700c 	ldr	r7, [sp, #12]
   27780:	e3a01001 	mov	r1, #1
   27784:	e1a00007 	mov	r0, r7
   27788:	ebfffc7b 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2778c:	e3a02030 	mov	r2, #48	; 0x30
   27790:	e597300c 	ldr	r3, [r7, #12]
   27794:	e3560000 	cmp	r6, #0
   27798:	e2831001 	add	r1, r3, #1
   2779c:	e587100c 	str	r1, [r7, #12]
   277a0:	e5c32000 	strb	r2, [r3]
   277a4:	e1d5a0d0 	ldrsb	sl, [r5]
   277a8:	e3a07008 	mov	r7, #8
   277ac:	0affff10 	beq	273f4 <CString::FormatV(char const*, std::__va_list)+0x1a4>
   277b0:	e3a03000 	mov	r3, #0
   277b4:	e1a01003 	mov	r1, r3
   277b8:	e59d3018 	ldr	r3, [sp, #24]
   277bc:	e1a02007 	mov	r2, r7
   277c0:	e2833007 	add	r3, r3, #7
   277c4:	e3c33007 	bic	r3, r3, #7
   277c8:	e1a00007 	mov	r0, r7
   277cc:	e1c360d0 	ldrd	r6, [r3]
   277d0:	e1a08006 	mov	r8, r6
   277d4:	e1a09007 	mov	r9, r7
   277d8:	e1510007 	cmp	r1, r7
   277dc:	e2833008 	add	r3, r3, #8
   277e0:	01520006 	cmpeq	r2, r6
   277e4:	e1cd01f0 	strd	r0, [sp, #16]
   277e8:	e1cd82f8 	strd	r8, [sp, #40]	; 0x28
   277ec:	e58d3018 	str	r3, [sp, #24]
   277f0:	8a0001a5 	bhi	27e8c <CString::FormatV(char const*, std::__va_list)+0xc3c>
   277f4:	e58da020 	str	sl, [sp, #32]
   277f8:	e58d4030 	str	r4, [sp, #48]	; 0x30
   277fc:	e58d5034 	str	r5, [sp, #52]	; 0x34
   27800:	e3a06001 	mov	r6, #1
   27804:	e3a07000 	mov	r7, #0
   27808:	e1a0a008 	mov	sl, r8
   2780c:	e1a0b009 	mov	fp, r9
   27810:	e1a04002 	mov	r4, r2
   27814:	e1a05001 	mov	r5, r1
   27818:	e0030596 	mul	r3, r6, r5
   2781c:	e0233794 	mla	r3, r4, r7, r3
   27820:	e0876496 	umull	r6, r7, r6, r4
   27824:	e0837007 	add	r7, r3, r7
   27828:	e1a02006 	mov	r2, r6
   2782c:	e1a03007 	mov	r3, r7
   27830:	e1a0000a 	mov	r0, sl
   27834:	e1a0100b 	mov	r1, fp
   27838:	eb0023c7 	bl	3075c <__aeabi_uldivmod>
   2783c:	e1550001 	cmp	r5, r1
   27840:	01540000 	cmpeq	r4, r0
   27844:	e1a08000 	mov	r8, r0
   27848:	e1a09001 	mov	r9, r1
   2784c:	9afffff1 	bls	27818 <CString::FormatV(char const*, std::__va_list)+0x5c8>
   27850:	e59da020 	ldr	sl, [sp, #32]
   27854:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   27858:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   2785c:	e35a0058 	cmp	sl, #88	; 0x58
   27860:	e28d303c 	add	r3, sp, #60	; 0x3c
   27864:	e58d4030 	str	r4, [sp, #48]	; 0x30
   27868:	e58d5034 	str	r5, [sp, #52]	; 0x34
   2786c:	e58d3020 	str	r3, [sp, #32]
   27870:	13a0b057 	movne	fp, #87	; 0x57
   27874:	e1cd42d8 	ldrd	r4, [sp, #40]	; 0x28
   27878:	03a0b037 	moveq	fp, #55	; 0x37
   2787c:	e1a0a003 	mov	sl, r3
   27880:	ea000006 	b	278a0 <CString::FormatV(char const*, std::__va_list)+0x650>
   27884:	e1a02000 	mov	r2, r0
   27888:	e1a03001 	mov	r3, r1
   2788c:	e1a00004 	mov	r0, r4
   27890:	e1a01005 	mov	r1, r5
   27894:	eb0023b0 	bl	3075c <__aeabi_uldivmod>
   27898:	e1a08000 	mov	r8, r0
   2789c:	e1a09001 	mov	r9, r1
   278a0:	e1a00004 	mov	r0, r4
   278a4:	e1a01005 	mov	r1, r5
   278a8:	e1a02006 	mov	r2, r6
   278ac:	e1a03007 	mov	r3, r7
   278b0:	eb0023a9 	bl	3075c <__aeabi_uldivmod>
   278b4:	e3590000 	cmp	r9, #0
   278b8:	03580009 	cmpeq	r8, #9
   278bc:	e1a05003 	mov	r5, r3
   278c0:	e2883030 	add	r3, r8, #48	; 0x30
   278c4:	808b8008 	addhi	r8, fp, r8
   278c8:	96af8073 	sxtbls	r8, r3
   278cc:	86af8078 	sxtbhi	r8, r8
   278d0:	e28aa001 	add	sl, sl, #1
   278d4:	e1a00006 	mov	r0, r6
   278d8:	e1a01007 	mov	r1, r7
   278dc:	e1a04002 	mov	r4, r2
   278e0:	e1cd21d0 	ldrd	r2, [sp, #16]
   278e4:	e54a8001 	strb	r8, [sl, #-1]
   278e8:	eb00239b 	bl	3075c <__aeabi_uldivmod>
   278ec:	e1a06000 	mov	r6, r0
   278f0:	e1a07001 	mov	r7, r1
   278f4:	e1963007 	orrs	r3, r6, r7
   278f8:	1affffe1 	bne	27884 <CString::FormatV(char const*, std::__va_list)+0x634>
   278fc:	e3a03000 	mov	r3, #0
   27900:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   27904:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   27908:	e5ca3000 	strb	r3, [sl]
   2790c:	eafffee2 	b	2749c <CString::FormatV(char const*, std::__va_list)+0x24c>
   27910:	e59d301c 	ldr	r3, [sp, #28]
   27914:	e3530000 	cmp	r3, #0
   27918:	e59d3018 	ldr	r3, [sp, #24]
   2791c:	e2836004 	add	r6, r3, #4
   27920:	e1d370d0 	ldrsb	r7, [r3]
   27924:	1a000098 	bne	27b8c <CString::FormatV(char const*, std::__va_list)+0x93c>
   27928:	e3540001 	cmp	r4, #1
   2792c:	9a00000d 	bls	27968 <CString::FormatV(char const*, std::__va_list)+0x718>
   27930:	e59d800c 	ldr	r8, [sp, #12]
   27934:	e2441001 	sub	r1, r4, #1
   27938:	e1a00008 	mov	r0, r8
   2793c:	ebfffc0e 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27940:	e1a02008 	mov	r2, r8
   27944:	e2444002 	sub	r4, r4, #2
   27948:	e592300c 	ldr	r3, [r2, #12]
   2794c:	e2444001 	sub	r4, r4, #1
   27950:	e2831001 	add	r1, r3, #1
   27954:	e582100c 	str	r1, [r2, #12]
   27958:	e3a01020 	mov	r1, #32
   2795c:	e3740001 	cmn	r4, #1
   27960:	e5c31000 	strb	r1, [r3]
   27964:	1afffff7 	bne	27948 <CString::FormatV(char const*, std::__va_list)+0x6f8>
   27968:	e59d400c 	ldr	r4, [sp, #12]
   2796c:	e3a01001 	mov	r1, #1
   27970:	e1a00004 	mov	r0, r4
   27974:	ebfffc00 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27978:	e594300c 	ldr	r3, [r4, #12]
   2797c:	e58d6018 	str	r6, [sp, #24]
   27980:	e2832001 	add	r2, r3, #1
   27984:	e584200c 	str	r2, [r4, #12]
   27988:	e5c37000 	strb	r7, [r3]
   2798c:	eafffedf 	b	27510 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   27990:	e3520000 	cmp	r2, #0
   27994:	03a07010 	moveq	r7, #16
   27998:	0afffe93 	beq	273ec <CString::FormatV(char const*, std::__va_list)+0x19c>
   2799c:	e59f3544 	ldr	r3, [pc, #1348]	; 27ee8 <CString::FormatV(char const*, std::__va_list)+0xc98>
   279a0:	e35a0058 	cmp	sl, #88	; 0x58
   279a4:	e59f1540 	ldr	r1, [pc, #1344]	; 27eec <CString::FormatV(char const*, std::__va_list)+0xc9c>
   279a8:	e59d000c 	ldr	r0, [sp, #12]
   279ac:	11a01003 	movne	r1, r3
   279b0:	ebfffc97 	bl	26c14 <CString::PutString(char const*)>
   279b4:	e3a07010 	mov	r7, #16
   279b8:	e1d5a0d0 	ldrsb	sl, [r5]
   279bc:	eafffe8a 	b	273ec <CString::FormatV(char const*, std::__va_list)+0x19c>
   279c0:	e59d600c 	ldr	r6, [sp, #12]
   279c4:	e3a01001 	mov	r1, #1
   279c8:	e1a00006 	mov	r0, r6
   279cc:	ebfffbea 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   279d0:	e3a01001 	mov	r1, #1
   279d4:	e596300c 	ldr	r3, [r6, #12]
   279d8:	e1a00006 	mov	r0, r6
   279dc:	e0832001 	add	r2, r3, r1
   279e0:	e586200c 	str	r2, [r6, #12]
   279e4:	e3a02025 	mov	r2, #37	; 0x25
   279e8:	e5c32000 	strb	r2, [r3]
   279ec:	e1d540d0 	ldrsb	r4, [r5]
   279f0:	ebfffbe1 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   279f4:	e596300c 	ldr	r3, [r6, #12]
   279f8:	e2832001 	add	r2, r3, #1
   279fc:	e586200c 	str	r2, [r6, #12]
   27a00:	e5c34000 	strb	r4, [r3]
   27a04:	eafffec1 	b	27510 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   27a08:	e59d600c 	ldr	r6, [sp, #12]
   27a0c:	e3a01001 	mov	r1, #1
   27a10:	e1a00006 	mov	r0, r6
   27a14:	ebfffbd8 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27a18:	e596300c 	ldr	r3, [r6, #12]
   27a1c:	e2832001 	add	r2, r3, #1
   27a20:	e586200c 	str	r2, [r6, #12]
   27a24:	e5c34000 	strb	r4, [r3]
   27a28:	eafffeb8 	b	27510 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   27a2c:	e1d5a0d1 	ldrsb	sl, [r5, #1]
   27a30:	e35a006c 	cmp	sl, #108	; 0x6c
   27a34:	03a06001 	moveq	r6, #1
   27a38:	01d5a0d2 	ldrsbeq	sl, [r5, #2]
   27a3c:	00855006 	addeq	r5, r5, r6
   27a40:	13a06000 	movne	r6, #0
   27a44:	e2855001 	add	r5, r5, #1
   27a48:	eafffe41 	b	27354 <CString::FormatV(char const*, std::__va_list)+0x104>
   27a4c:	e1d5a0d1 	ldrsb	sl, [r5, #1]
   27a50:	e3a01000 	mov	r1, #0
   27a54:	e24a3030 	sub	r3, sl, #48	; 0x30
   27a58:	e6ef3073 	uxtb	r3, r3
   27a5c:	e3530009 	cmp	r3, #9
   27a60:	e2855001 	add	r5, r5, #1
   27a64:	8afffe37 	bhi	27348 <CString::FormatV(char const*, std::__va_list)+0xf8>
   27a68:	e0811101 	add	r1, r1, r1, lsl #2
   27a6c:	e08a1081 	add	r1, sl, r1, lsl #1
   27a70:	e1f5a0d1 	ldrsb	sl, [r5, #1]!
   27a74:	e2411030 	sub	r1, r1, #48	; 0x30
   27a78:	e24a3030 	sub	r3, sl, #48	; 0x30
   27a7c:	e6ef3073 	uxtb	r3, r3
   27a80:	e3530009 	cmp	r3, #9
   27a84:	9afffff7 	bls	27a68 <CString::FormatV(char const*, std::__va_list)+0x818>
   27a88:	eafffe2e 	b	27348 <CString::FormatV(char const*, std::__va_list)+0xf8>
   27a8c:	e59d400c 	ldr	r4, [sp, #12]
   27a90:	e3a01001 	mov	r1, #1
   27a94:	e1a00004 	mov	r0, r4
   27a98:	ebfffbb7 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27a9c:	e594300c 	ldr	r3, [r4, #12]
   27aa0:	e2855002 	add	r5, r5, #2
   27aa4:	e2832001 	add	r2, r3, #1
   27aa8:	e584200c 	str	r2, [r4, #12]
   27aac:	e5c36000 	strb	r6, [r3]
   27ab0:	eafffdf7 	b	27294 <CString::FormatV(char const*, std::__va_list)+0x44>
   27ab4:	e59d700c 	ldr	r7, [sp, #12]
   27ab8:	e59d1020 	ldr	r1, [sp, #32]
   27abc:	e1a00007 	mov	r0, r7
   27ac0:	ebfffc53 	bl	26c14 <CString::PutString(char const*)>
   27ac4:	e1560004 	cmp	r6, r4
   27ac8:	2afffe90 	bcs	27510 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   27acc:	e0444006 	sub	r4, r4, r6
   27ad0:	e1a01004 	mov	r1, r4
   27ad4:	e1a00007 	mov	r0, r7
   27ad8:	ebfffba7 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27adc:	e1a01007 	mov	r1, r7
   27ae0:	e2443001 	sub	r3, r4, #1
   27ae4:	e591200c 	ldr	r2, [r1, #12]
   27ae8:	e2433001 	sub	r3, r3, #1
   27aec:	e2820001 	add	r0, r2, #1
   27af0:	e581000c 	str	r0, [r1, #12]
   27af4:	e3a00020 	mov	r0, #32
   27af8:	e3730001 	cmn	r3, #1
   27afc:	e5c20000 	strb	r0, [r2]
   27b00:	1afffff7 	bne	27ae4 <CString::FormatV(char const*, std::__va_list)+0x894>
   27b04:	eafffe81 	b	27510 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   27b08:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   27b0c:	e3530000 	cmp	r3, #0
   27b10:	1a0000b8 	bne	27df8 <CString::FormatV(char const*, std::__va_list)+0xba8>
   27b14:	e15b0004 	cmp	fp, r4
   27b18:	2a00000e 	bcs	27b58 <CString::FormatV(char const*, std::__va_list)+0x908>
   27b1c:	e59d600c 	ldr	r6, [sp, #12]
   27b20:	e044400b 	sub	r4, r4, fp
   27b24:	e1a01004 	mov	r1, r4
   27b28:	e1a00006 	mov	r0, r6
   27b2c:	ebfffb92 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27b30:	e1a01006 	mov	r1, r6
   27b34:	e2443001 	sub	r3, r4, #1
   27b38:	e591200c 	ldr	r2, [r1, #12]
   27b3c:	e2433001 	sub	r3, r3, #1
   27b40:	e2820001 	add	r0, r2, #1
   27b44:	e581000c 	str	r0, [r1, #12]
   27b48:	e3a00020 	mov	r0, #32
   27b4c:	e3730001 	cmn	r3, #1
   27b50:	e5c20000 	strb	r0, [r2]
   27b54:	1afffff7 	bne	27b38 <CString::FormatV(char const*, std::__va_list)+0x8e8>
   27b58:	e59d3010 	ldr	r3, [sp, #16]
   27b5c:	e3530000 	cmp	r3, #0
   27b60:	0afffe67 	beq	27504 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   27b64:	e59d400c 	ldr	r4, [sp, #12]
   27b68:	e3a01001 	mov	r1, #1
   27b6c:	e1a00004 	mov	r0, r4
   27b70:	ebfffb81 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27b74:	e3a0202d 	mov	r2, #45	; 0x2d
   27b78:	e594300c 	ldr	r3, [r4, #12]
   27b7c:	e2831001 	add	r1, r3, #1
   27b80:	e584100c 	str	r1, [r4, #12]
   27b84:	e5c32000 	strb	r2, [r3]
   27b88:	eafffe5d 	b	27504 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   27b8c:	e59d800c 	ldr	r8, [sp, #12]
   27b90:	e3a01001 	mov	r1, #1
   27b94:	e1a00008 	mov	r0, r8
   27b98:	ebfffb77 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27b9c:	e598300c 	ldr	r3, [r8, #12]
   27ba0:	e3540001 	cmp	r4, #1
   27ba4:	e2832001 	add	r2, r3, #1
   27ba8:	e588200c 	str	r2, [r8, #12]
   27bac:	e1a00008 	mov	r0, r8
   27bb0:	e5c37000 	strb	r7, [r3]
   27bb4:	9a00000c 	bls	27bec <CString::FormatV(char const*, std::__va_list)+0x99c>
   27bb8:	e2441001 	sub	r1, r4, #1
   27bbc:	ebfffb6e 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27bc0:	e1a07008 	mov	r7, r8
   27bc4:	e1a02008 	mov	r2, r8
   27bc8:	e2444002 	sub	r4, r4, #2
   27bcc:	e592300c 	ldr	r3, [r2, #12]
   27bd0:	e2444001 	sub	r4, r4, #1
   27bd4:	e2831001 	add	r1, r3, #1
   27bd8:	e582100c 	str	r1, [r2, #12]
   27bdc:	e3a01020 	mov	r1, #32
   27be0:	e3740001 	cmn	r4, #1
   27be4:	e5c31000 	strb	r1, [r3]
   27be8:	1afffff7 	bne	27bcc <CString::FormatV(char const*, std::__va_list)+0x97c>
   27bec:	e58d6018 	str	r6, [sp, #24]
   27bf0:	eafffe46 	b	27510 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   27bf4:	e2833007 	add	r3, r3, #7
   27bf8:	e3c33007 	bic	r3, r3, #7
   27bfc:	e1c300d0 	ldrd	r0, [r3]
   27c00:	e3500000 	cmp	r0, #0
   27c04:	e2d12000 	sbcs	r2, r1, #0
   27c08:	a3a0b000 	movge	fp, #0
   27c0c:	e2833008 	add	r3, r3, #8
   27c10:	e58d3018 	str	r3, [sp, #24]
   27c14:	a58db010 	strge	fp, [sp, #16]
   27c18:	aa000005 	bge	27c34 <CString::FormatV(char const*, std::__va_list)+0x9e4>
   27c1c:	e2702000 	rsbs	r2, r0, #0
   27c20:	e2e13000 	rsc	r3, r1, #0
   27c24:	e3a0b001 	mov	fp, #1
   27c28:	e1a00002 	mov	r0, r2
   27c2c:	e1a01003 	mov	r1, r3
   27c30:	e58db010 	str	fp, [sp, #16]
   27c34:	e1a03001 	mov	r3, r1
   27c38:	e1a02000 	mov	r2, r0
   27c3c:	e350000a 	cmp	r0, #10
   27c40:	e1cd22f8 	strd	r2, [sp, #40]	; 0x28
   27c44:	e2d33000 	sbcs	r3, r3, #0
   27c48:	ba00009d 	blt	27ec4 <CString::FormatV(char const*, std::__va_list)+0xc74>
   27c4c:	e58d4020 	str	r4, [sp, #32]
   27c50:	e58d5030 	str	r5, [sp, #48]	; 0x30
   27c54:	e3a08001 	mov	r8, #1
   27c58:	e3a09000 	mov	r9, #0
   27c5c:	e3a0a00a 	mov	sl, #10
   27c60:	e1a04000 	mov	r4, r0
   27c64:	e1a05001 	mov	r5, r1
   27c68:	e003099a 	mul	r3, sl, r9
   27c6c:	e0898a98 	umull	r8, r9, r8, sl
   27c70:	e0839009 	add	r9, r3, r9
   27c74:	e1a02008 	mov	r2, r8
   27c78:	e1a03009 	mov	r3, r9
   27c7c:	e1a00004 	mov	r0, r4
   27c80:	e1a01005 	mov	r1, r5
   27c84:	eb0022b4 	bl	3075c <__aeabi_uldivmod>
   27c88:	e3510000 	cmp	r1, #0
   27c8c:	03500009 	cmpeq	r0, #9
   27c90:	e1a06000 	mov	r6, r0
   27c94:	e1a07001 	mov	r7, r1
   27c98:	8afffff2 	bhi	27c68 <CString::FormatV(char const*, std::__va_list)+0xa18>
   27c9c:	e59d4020 	ldr	r4, [sp, #32]
   27ca0:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   27ca4:	e28d303c 	add	r3, sp, #60	; 0x3c
   27ca8:	e58d4030 	str	r4, [sp, #48]	; 0x30
   27cac:	e58d5034 	str	r5, [sp, #52]	; 0x34
   27cb0:	e58d3020 	str	r3, [sp, #32]
   27cb4:	e1a0a003 	mov	sl, r3
   27cb8:	e1cd42d8 	ldrd	r4, [sp, #40]	; 0x28
   27cbc:	ea000006 	b	27cdc <CString::FormatV(char const*, std::__va_list)+0xa8c>
   27cc0:	e1a02000 	mov	r2, r0
   27cc4:	e1a03001 	mov	r3, r1
   27cc8:	e1a00004 	mov	r0, r4
   27ccc:	e1a01005 	mov	r1, r5
   27cd0:	eb0022a1 	bl	3075c <__aeabi_uldivmod>
   27cd4:	e1a06000 	mov	r6, r0
   27cd8:	e1a07001 	mov	r7, r1
   27cdc:	e1a00004 	mov	r0, r4
   27ce0:	e1a01005 	mov	r1, r5
   27ce4:	e1a02008 	mov	r2, r8
   27ce8:	e1a03009 	mov	r3, r9
   27cec:	eb00229a 	bl	3075c <__aeabi_uldivmod>
   27cf0:	e3570000 	cmp	r7, #0
   27cf4:	03560009 	cmpeq	r6, #9
   27cf8:	e1a05003 	mov	r5, r3
   27cfc:	e2863030 	add	r3, r6, #48	; 0x30
   27d00:	82866057 	addhi	r6, r6, #87	; 0x57
   27d04:	96af6073 	sxtbls	r6, r3
   27d08:	86af6076 	sxtbhi	r6, r6
   27d0c:	e28aa001 	add	sl, sl, #1
   27d10:	e1a00008 	mov	r0, r8
   27d14:	e1a01009 	mov	r1, r9
   27d18:	e3a03000 	mov	r3, #0
   27d1c:	e1a04002 	mov	r4, r2
   27d20:	e54a6001 	strb	r6, [sl, #-1]
   27d24:	e3a0200a 	mov	r2, #10
   27d28:	eb00228b 	bl	3075c <__aeabi_uldivmod>
   27d2c:	e1a08000 	mov	r8, r0
   27d30:	e1a09001 	mov	r9, r1
   27d34:	e1983009 	orrs	r3, r8, r9
   27d38:	1affffe0 	bne	27cc0 <CString::FormatV(char const*, std::__va_list)+0xa70>
   27d3c:	e3a03000 	mov	r3, #0
   27d40:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   27d44:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   27d48:	e5ca3000 	strb	r3, [sl]
   27d4c:	eafffe69 	b	276f8 <CString::FormatV(char const*, std::__va_list)+0x4a8>
   27d50:	e1a01008 	mov	r1, r8
   27d54:	e59d800c 	ldr	r8, [sp, #12]
   27d58:	e1a00008 	mov	r0, r8
   27d5c:	ebfffbac 	bl	26c14 <CString::PutString(char const*)>
   27d60:	e1570004 	cmp	r7, r4
   27d64:	2affffa0 	bcs	27bec <CString::FormatV(char const*, std::__va_list)+0x99c>
   27d68:	e0444007 	sub	r4, r4, r7
   27d6c:	e1a01004 	mov	r1, r4
   27d70:	e1a00008 	mov	r0, r8
   27d74:	ebfffb00 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27d78:	e1a01008 	mov	r1, r8
   27d7c:	e2443001 	sub	r3, r4, #1
   27d80:	e591200c 	ldr	r2, [r1, #12]
   27d84:	e2433001 	sub	r3, r3, #1
   27d88:	e2820001 	add	r0, r2, #1
   27d8c:	e581000c 	str	r0, [r1, #12]
   27d90:	e3a00020 	mov	r0, #32
   27d94:	e3730001 	cmn	r3, #1
   27d98:	e5c20000 	strb	r0, [r2]
   27d9c:	1afffff7 	bne	27d80 <CString::FormatV(char const*, std::__va_list)+0xb30>
   27da0:	eaffff91 	b	27bec <CString::FormatV(char const*, std::__va_list)+0x99c>
   27da4:	e59d700c 	ldr	r7, [sp, #12]
   27da8:	e59d1020 	ldr	r1, [sp, #32]
   27dac:	e1a00007 	mov	r0, r7
   27db0:	ebfffb97 	bl	26c14 <CString::PutString(char const*)>
   27db4:	e1560004 	cmp	r6, r4
   27db8:	2afffdd4 	bcs	27510 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   27dbc:	e0444006 	sub	r4, r4, r6
   27dc0:	e1a01004 	mov	r1, r4
   27dc4:	e1a00007 	mov	r0, r7
   27dc8:	ebfffaeb 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27dcc:	e1a01007 	mov	r1, r7
   27dd0:	e2443001 	sub	r3, r4, #1
   27dd4:	e591200c 	ldr	r2, [r1, #12]
   27dd8:	e2433001 	sub	r3, r3, #1
   27ddc:	e2820001 	add	r0, r2, #1
   27de0:	e581000c 	str	r0, [r1, #12]
   27de4:	e3a00020 	mov	r0, #32
   27de8:	e3730001 	cmn	r3, #1
   27dec:	e5c20000 	strb	r0, [r2]
   27df0:	1afffff7 	bne	27dd4 <CString::FormatV(char const*, std::__va_list)+0xb84>
   27df4:	eafffdc5 	b	27510 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   27df8:	e59d3010 	ldr	r3, [sp, #16]
   27dfc:	e3530000 	cmp	r3, #0
   27e00:	1a000025 	bne	27e9c <CString::FormatV(char const*, std::__va_list)+0xc4c>
   27e04:	e15b0004 	cmp	fp, r4
   27e08:	2afffdbd 	bcs	27504 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   27e0c:	e59d600c 	ldr	r6, [sp, #12]
   27e10:	e044400b 	sub	r4, r4, fp
   27e14:	e1a01004 	mov	r1, r4
   27e18:	e1a00006 	mov	r0, r6
   27e1c:	ebfffad6 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27e20:	e3a00030 	mov	r0, #48	; 0x30
   27e24:	e1a01006 	mov	r1, r6
   27e28:	e2443001 	sub	r3, r4, #1
   27e2c:	e591200c 	ldr	r2, [r1, #12]
   27e30:	e2433001 	sub	r3, r3, #1
   27e34:	e282c001 	add	ip, r2, #1
   27e38:	e3730001 	cmn	r3, #1
   27e3c:	e581c00c 	str	ip, [r1, #12]
   27e40:	e5c20000 	strb	r0, [r2]
   27e44:	1afffff8 	bne	27e2c <CString::FormatV(char const*, std::__va_list)+0xbdc>
   27e48:	eafffdad 	b	27504 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   27e4c:	e59d600c 	ldr	r6, [sp, #12]
   27e50:	e3a01001 	mov	r1, #1
   27e54:	e1a00006 	mov	r0, r6
   27e58:	ebfffac7 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27e5c:	e3a0202d 	mov	r2, #45	; 0x2d
   27e60:	e596300c 	ldr	r3, [r6, #12]
   27e64:	e2831001 	add	r1, r3, #1
   27e68:	e586100c 	str	r1, [r6, #12]
   27e6c:	e5c32000 	strb	r2, [r3]
   27e70:	eafffe29 	b	2771c <CString::FormatV(char const*, std::__va_list)+0x4cc>
   27e74:	e1a09006 	mov	r9, r6
   27e78:	e3a0b001 	mov	fp, #1
   27e7c:	eafffd6a 	b	2742c <CString::FormatV(char const*, std::__va_list)+0x1dc>
   27e80:	e3a0b000 	mov	fp, #0
   27e84:	e58db010 	str	fp, [sp, #16]
   27e88:	eafffdf6 	b	27668 <CString::FormatV(char const*, std::__va_list)+0x418>
   27e8c:	e1cd82d8 	ldrd	r8, [sp, #40]	; 0x28
   27e90:	e3a06001 	mov	r6, #1
   27e94:	e3a07000 	mov	r7, #0
   27e98:	eafffe6f 	b	2785c <CString::FormatV(char const*, std::__va_list)+0x60c>
   27e9c:	e59d600c 	ldr	r6, [sp, #12]
   27ea0:	e3a01001 	mov	r1, #1
   27ea4:	e1a00006 	mov	r0, r6
   27ea8:	ebfffab3 	bl	2697c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27eac:	e3a0202d 	mov	r2, #45	; 0x2d
   27eb0:	e596300c 	ldr	r3, [r6, #12]
   27eb4:	e2831001 	add	r1, r3, #1
   27eb8:	e586100c 	str	r1, [r6, #12]
   27ebc:	e5c32000 	strb	r2, [r3]
   27ec0:	eaffffcf 	b	27e04 <CString::FormatV(char const*, std::__va_list)+0xbb4>
   27ec4:	e1a06000 	mov	r6, r0
   27ec8:	e1a07001 	mov	r7, r1
   27ecc:	e3a08001 	mov	r8, #1
   27ed0:	e3a09000 	mov	r9, #0
   27ed4:	eaffff72 	b	27ca4 <CString::FormatV(char const*, std::__va_list)+0xa54>
   27ed8:	e1a09007 	mov	r9, r7
   27edc:	e3a08001 	mov	r8, #1
   27ee0:	eafffdec 	b	27698 <CString::FormatV(char const*, std::__va_list)+0x448>
   27ee4:	cccccccd 	.word	0xcccccccd
   27ee8:	0003ac64 	.word	0x0003ac64
   27eec:	0003ac60 	.word	0x0003ac60

00027ef0 <CString::Format(char const*, ...)>:
   27ef0:	e92d000e 	push	{r1, r2, r3}
   27ef4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   27ef8:	e24dd008 	sub	sp, sp, #8
   27efc:	e28d3010 	add	r3, sp, #16
   27f00:	e1a02003 	mov	r2, r3
   27f04:	e59d100c 	ldr	r1, [sp, #12]
   27f08:	e58d3004 	str	r3, [sp, #4]
   27f0c:	ebfffccf 	bl	27250 <CString::FormatV(char const*, std::__va_list)>
   27f10:	e28dd008 	add	sp, sp, #8
   27f14:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   27f18:	e28dd00c 	add	sp, sp, #12
   27f1c:	e12fff1e 	bx	lr

00027f20 <__aeabi_atexit>:
   27f20:	e12fff1e 	bx	lr

00027f24 <__errno>:
   27f24:	e59f0000 	ldr	r0, [pc]	; 27f2c <__errno+0x8>
   27f28:	e12fff1e 	bx	lr
   27f2c:	0003e3a0 	.word	0x0003e3a0

00027f30 <set_qemu_exit_status>:
   27f30:	e59f3004 	ldr	r3, [pc, #4]	; 27f3c <set_qemu_exit_status+0xc>
   27f34:	e5830008 	str	r0, [r3, #8]
   27f38:	e12fff1e 	bx	lr
   27f3c:	0003e39c 	.word	0x0003e39c

00027f40 <halt>:
   27f40:	f10c0080 	cpsid	i
   27f44:	f10c0040 	cpsid	f
   27f48:	eafffffe 	b	27f48 <halt+0x8>

00027f4c <reboot>:
   27f4c:	e3a03000 	mov	r3, #0
   27f50:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   27f54:	e59f3010 	ldr	r3, [pc, #16]	; 27f6c <reboot+0x20>
   27f58:	e59f1010 	ldr	r1, [pc, #16]	; 27f70 <reboot+0x24>
   27f5c:	e59f2010 	ldr	r2, [pc, #16]	; 27f74 <reboot+0x28>
   27f60:	e5831024 	str	r1, [r3, #36]	; 0x24
   27f64:	e583201c 	str	r2, [r3, #28]
   27f68:	eafffffe 	b	27f68 <reboot+0x1c>
   27f6c:	20100000 	.word	0x20100000
   27f70:	5a000001 	.word	0x5a000001
   27f74:	5a000020 	.word	0x5a000020

00027f78 <sysinit>:
   27f78:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   27f7c:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   27f80:	f1080040 	cpsie	f
   27f84:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   27f88:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   27f8c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   27f90:	e3a04000 	mov	r4, #0
   27f94:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   27f98:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   27f9c:	eee83a10 	vmsr	fpexc, r3
   27fa0:	e3a03402 	mov	r3, #33554432	; 0x2000000
   27fa4:	eee13a10 	vmsr	fpscr, r3
   27fa8:	e59f0088 	ldr	r0, [pc, #136]	; 28038 <sysinit+0xc0>
   27fac:	e59f2088 	ldr	r2, [pc, #136]	; 2803c <sysinit+0xc4>
   27fb0:	e1a01004 	mov	r1, r4
   27fb4:	e0422000 	sub	r2, r2, r0
   27fb8:	eb00037d 	bl	28db4 <memset>
   27fbc:	e1a0000d 	mov	r0, sp
   27fc0:	ebfff797 	bl	25e24 <CMachineInfo::CMachineInfo()>
   27fc4:	e28d001c 	add	r0, sp, #28
   27fc8:	e3a01001 	mov	r1, #1
   27fcc:	eb000a05 	bl	2a7e8 <CMemorySystem::CMemorySystem(bool)>
   27fd0:	e59f5068 	ldr	r5, [pc, #104]	; 28040 <sysinit+0xc8>
   27fd4:	e59f3068 	ldr	r3, [pc, #104]	; 28044 <sysinit+0xcc>
   27fd8:	e1550003 	cmp	r5, r3
   27fdc:	31e06005 	mvncc	r6, r5
   27fe0:	30866003 	addcc	r6, r6, r3
   27fe4:	31a06126 	lsrcc	r6, r6, #2
   27fe8:	32866001 	addcc	r6, r6, #1
   27fec:	2a000004 	bcs	28004 <sysinit+0x8c>
   27ff0:	e2844001 	add	r4, r4, #1
   27ff4:	e4953004 	ldr	r3, [r5], #4
   27ff8:	e12fff33 	blx	r3
   27ffc:	e1540006 	cmp	r4, r6
   28000:	1afffffa 	bne	27ff0 <sysinit+0x78>
   28004:	ebff8017 	bl	8068 <main>
   28008:	e3500001 	cmp	r0, #1
   2800c:	0a000000 	beq	28014 <sysinit+0x9c>
   28010:	ebffffca 	bl	27f40 <halt>
   28014:	eb0006c3 	bl	29b28 <IsChainBootEnabled>
   28018:	e3500000 	cmp	r0, #0
   2801c:	1a000000 	bne	28024 <sysinit+0xac>
   28020:	ebffffc9 	bl	27f4c <reboot>
   28024:	e28d001c 	add	r0, sp, #28
   28028:	eb000a4f 	bl	2a96c <CMemorySystem::Destructor()>
   2802c:	f10c0040 	cpsid	f
   28030:	eb0006c2 	bl	29b40 <DoChainBoot>
   28034:	eafffff9 	b	28020 <sysinit+0xa8>
   28038:	0003e350 	.word	0x0003e350
   2803c:	0003e520 	.word	0x0003e520
   28040:	0003dea0 	.word	0x0003dea0
   28044:	0003deac 	.word	0x0003deac

00028048 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>:
   28048:	e2800001 	add	r0, r0, #1
   2804c:	e3a03000 	mov	r3, #0
   28050:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   28054:	e59f3020 	ldr	r3, [pc, #32]	; 2807c <CTimer::SimpleusDelay(unsigned int) [clone .part.3]+0x34>
   28058:	e1a01003 	mov	r1, r3
   2805c:	e5932004 	ldr	r2, [r3, #4]
   28060:	e5913004 	ldr	r3, [r1, #4]
   28064:	e0433002 	sub	r3, r3, r2
   28068:	e1500003 	cmp	r0, r3
   2806c:	8afffffb 	bhi	28060 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]+0x18>
   28070:	e3a03000 	mov	r3, #0
   28074:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   28078:	e12fff1e 	bx	lr
   2807c:	20003000 	.word	0x20003000

00028080 <CTimer::CTimer(CInterruptSystem*)>:
   28080:	e92d4070 	push	{r4, r5, r6, lr}
   28084:	e3a05000 	mov	r5, #0
   28088:	e3a06001 	mov	r6, #1
   2808c:	e1a04000 	mov	r4, r0
   28090:	e5805004 	str	r5, [r0, #4]
   28094:	e5801000 	str	r1, [r0]
   28098:	e5805008 	str	r5, [r0, #8]
   2809c:	e5805014 	str	r5, [r0, #20]
   280a0:	e5806010 	str	r6, [r0, #16]
   280a4:	e580500c 	str	r5, [r0, #12]
   280a8:	e2800018 	add	r0, r0, #24
   280ac:	eb000e0b 	bl	2b8e0 <CPtrList::CPtrList()>
   280b0:	e3a020c8 	mov	r2, #200	; 0xc8
   280b4:	e59f3038 	ldr	r3, [pc, #56]	; 280f4 <CTimer::CTimer(CInterruptSystem*)+0x74>
   280b8:	e59f1038 	ldr	r1, [pc, #56]	; 280f8 <CTimer::CTimer(CInterruptSystem*)+0x78>
   280bc:	e5930000 	ldr	r0, [r3]
   280c0:	e584601c 	str	r6, [r4, #28]
   280c4:	e1500005 	cmp	r0, r5
   280c8:	e5845038 	str	r5, [r4, #56]	; 0x38
   280cc:	e5841020 	str	r1, [r4, #32]
   280d0:	e5842024 	str	r2, [r4, #36]	; 0x24
   280d4:	1a000002 	bne	280e4 <CTimer::CTimer(CInterruptSystem*)+0x64>
   280d8:	e5834000 	str	r4, [r3]
   280dc:	e1a00004 	mov	r0, r4
   280e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   280e4:	e3a02041 	mov	r2, #65	; 0x41
   280e8:	e59f100c 	ldr	r1, [pc, #12]	; 280fc <CTimer::CTimer(CInterruptSystem*)+0x7c>
   280ec:	e59f000c 	ldr	r0, [pc, #12]	; 28100 <CTimer::CTimer(CInterruptSystem*)+0x80>
   280f0:	ebffed62 	bl	23680 <assertion_failed>
   280f4:	0003e3a8 	.word	0x0003e3a8
   280f8:	00030d40 	.word	0x00030d40
   280fc:	0003aca0 	.word	0x0003aca0
   28100:	00038e94 	.word	0x00038e94

00028104 <CTimer::~CTimer()>:
   28104:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28108:	e1a09000 	mov	r9, r0
   2810c:	e5900000 	ldr	r0, [r0]
   28110:	e3500000 	cmp	r0, #0
   28114:	0a000028 	beq	281bc <CTimer::~CTimer()+0xb8>
   28118:	e3a01003 	mov	r1, #3
   2811c:	e2894018 	add	r4, r9, #24
   28120:	eb000bda 	bl	2b090 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   28124:	e1a00004 	mov	r0, r4
   28128:	eb000dfa 	bl	2b918 <CPtrList::GetFirst()>
   2812c:	e2505000 	subs	r5, r0, #0
   28130:	e3a08014 	mov	r8, #20
   28134:	e59f7090 	ldr	r7, [pc, #144]	; 281cc <CTimer::~CTimer()+0xc8>
   28138:	0a000011 	beq	28184 <CTimer::~CTimer()+0x80>
   2813c:	e1a01005 	mov	r1, r5
   28140:	e1a00004 	mov	r0, r4
   28144:	eb000e0a 	bl	2b974 <CPtrList::GetPtr(TPtrListElement*)>
   28148:	e2506000 	subs	r6, r0, #0
   2814c:	0a000012 	beq	2819c <CTimer::~CTimer()+0x98>
   28150:	e5963000 	ldr	r3, [r6]
   28154:	e1530007 	cmp	r3, r7
   28158:	1a000013 	bne	281ac <CTimer::~CTimer()+0xa8>
   2815c:	e1a01005 	mov	r1, r5
   28160:	e1a00004 	mov	r0, r4
   28164:	eb000e89 	bl	2bb90 <CPtrList::Remove(TPtrListElement*)>
   28168:	e1a01008 	mov	r1, r8
   2816c:	e1a00006 	mov	r0, r6
   28170:	eb00076d 	bl	29f2c <operator delete(void*, unsigned int)>
   28174:	e1a00004 	mov	r0, r4
   28178:	eb000de6 	bl	2b918 <CPtrList::GetFirst()>
   2817c:	e2505000 	subs	r5, r0, #0
   28180:	1affffed 	bne	2813c <CTimer::~CTimer()+0x38>
   28184:	e59f3044 	ldr	r3, [pc, #68]	; 281d0 <CTimer::~CTimer()+0xcc>
   28188:	e1a00004 	mov	r0, r4
   2818c:	e5835000 	str	r5, [r3]
   28190:	eb000dd5 	bl	2b8ec <CPtrList::~CPtrList()>
   28194:	e1a00009 	mov	r0, r9
   28198:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2819c:	e3a02058 	mov	r2, #88	; 0x58
   281a0:	e59f102c 	ldr	r1, [pc, #44]	; 281d4 <CTimer::~CTimer()+0xd0>
   281a4:	e59f002c 	ldr	r0, [pc, #44]	; 281d8 <CTimer::~CTimer()+0xd4>
   281a8:	ebffed34 	bl	23680 <assertion_failed>
   281ac:	e3a02059 	mov	r2, #89	; 0x59
   281b0:	e59f101c 	ldr	r1, [pc, #28]	; 281d4 <CTimer::~CTimer()+0xd0>
   281b4:	e59f0020 	ldr	r0, [pc, #32]	; 281dc <CTimer::~CTimer()+0xd8>
   281b8:	ebffed30 	bl	23680 <assertion_failed>
   281bc:	e3a02047 	mov	r2, #71	; 0x47
   281c0:	e59f100c 	ldr	r1, [pc, #12]	; 281d4 <CTimer::~CTimer()+0xd0>
   281c4:	e59f0014 	ldr	r0, [pc, #20]	; 281e0 <CTimer::~CTimer()+0xdc>
   281c8:	ebffed2c 	bl	23680 <assertion_failed>
   281cc:	4b544d43 	.word	0x4b544d43
   281d0:	0003e3a8 	.word	0x0003e3a8
   281d4:	0003aca0 	.word	0x0003aca0
   281d8:	000369c8 	.word	0x000369c8
   281dc:	0003acac 	.word	0x0003acac
   281e0:	000346a4 	.word	0x000346a4

000281e4 <CTimer::SetTimeZone(int)>:
   281e4:	e59f2018 	ldr	r2, [pc, #24]	; 28204 <CTimer::SetTimeZone(int)+0x20>
   281e8:	e2813e59 	add	r3, r1, #1424	; 0x590
   281ec:	e283300f 	add	r3, r3, #15
   281f0:	e1530002 	cmp	r3, r2
   281f4:	95801014 	strls	r1, [r0, #20]
   281f8:	93a00001 	movls	r0, #1
   281fc:	83a00000 	movhi	r0, #0
   28200:	e12fff1e 	bx	lr
   28204:	00000b3e 	.word	0x00000b3e

00028208 <CTimer::GetTimeZone() const>:
   28208:	e5900014 	ldr	r0, [r0, #20]
   2820c:	e12fff1e 	bx	lr

00028210 <CTimer::SetTime(unsigned int, bool)>:
   28210:	e3520000 	cmp	r2, #0
   28214:	e92d4070 	push	{r4, r5, r6, lr}
   28218:	e1a04000 	mov	r4, r0
   2821c:	e1a05001 	mov	r5, r1
   28220:	1a000004 	bne	28238 <CTimer::SetTime(unsigned int, bool)+0x28>
   28224:	e5903014 	ldr	r3, [r0, #20]
   28228:	e0633203 	rsb	r3, r3, r3, lsl #4
   2822c:	e1b03103 	lsls	r3, r3, #2
   28230:	4a00000e 	bmi	28270 <CTimer::SetTime(unsigned int, bool)+0x60>
   28234:	e0855003 	add	r5, r5, r3
   28238:	e5940010 	ldr	r0, [r4, #16]
   2823c:	e3500000 	cmp	r0, #0
   28240:	1a000002 	bne	28250 <CTimer::SetTime(unsigned int, bool)+0x40>
   28244:	e3a00001 	mov	r0, #1
   28248:	e584500c 	str	r5, [r4, #12]
   2824c:	e8bd8070 	pop	{r4, r5, r6, pc}
   28250:	eb000a59 	bl	2abbc <EnterCritical>
   28254:	e5943010 	ldr	r3, [r4, #16]
   28258:	e584500c 	str	r5, [r4, #12]
   2825c:	e3530000 	cmp	r3, #0
   28260:	0a000007 	beq	28284 <CTimer::SetTime(unsigned int, bool)+0x74>
   28264:	eb000a7f 	bl	2ac68 <LeaveCritical>
   28268:	e3a00001 	mov	r0, #1
   2826c:	e8bd8070 	pop	{r4, r5, r6, pc}
   28270:	e2631000 	rsb	r1, r3, #0
   28274:	e1510005 	cmp	r1, r5
   28278:	daffffed 	ble	28234 <CTimer::SetTime(unsigned int, bool)+0x24>
   2827c:	e1a00002 	mov	r0, r2
   28280:	e8bd8070 	pop	{r4, r5, r6, pc}
   28284:	e3a00001 	mov	r0, #1
   28288:	e8bd8070 	pop	{r4, r5, r6, pc}

0002828c <CTimer::GetClockTicks()>:
   2828c:	e3a03000 	mov	r3, #0
   28290:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   28294:	e59f2008 	ldr	r2, [pc, #8]	; 282a4 <CTimer::GetClockTicks()+0x18>
   28298:	e5920004 	ldr	r0, [r2, #4]
   2829c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   282a0:	e12fff1e 	bx	lr
   282a4:	20003000 	.word	0x20003000

000282a8 <CTimer::GetTicks() const>:
   282a8:	e5900004 	ldr	r0, [r0, #4]
   282ac:	e12fff1e 	bx	lr

000282b0 <CTimer::GetUptime() const>:
   282b0:	e5900008 	ldr	r0, [r0, #8]
   282b4:	e12fff1e 	bx	lr

000282b8 <CTimer::GetTime() const>:
   282b8:	e590000c 	ldr	r0, [r0, #12]
   282bc:	e12fff1e 	bx	lr

000282c0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   282c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   282c4:	e1a04000 	mov	r4, r0
   282c8:	e5900010 	ldr	r0, [r0, #16]
   282cc:	e1a06001 	mov	r6, r1
   282d0:	e3500000 	cmp	r0, #0
   282d4:	e1a05002 	mov	r5, r2
   282d8:	1a000011 	bne	28324 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
   282dc:	e594700c 	ldr	r7, [r4, #12]
   282e0:	e5944004 	ldr	r4, [r4, #4]
   282e4:	e3560000 	cmp	r6, #0
   282e8:	0a000016 	beq	28348 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
   282ec:	e3550000 	cmp	r5, #0
   282f0:	e5867000 	str	r7, [r6]
   282f4:	0a000017 	beq	28358 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x98>
   282f8:	e3a00064 	mov	r0, #100	; 0x64
   282fc:	e59f3064 	ldr	r3, [pc, #100]	; 28368 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa8>
   28300:	e59f1064 	ldr	r1, [pc, #100]	; 2836c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   28304:	e0832493 	umull	r2, r3, r3, r4
   28308:	e1a032a3 	lsr	r3, r3, #5
   2830c:	e0030390 	mul	r3, r0, r3
   28310:	e0444003 	sub	r4, r4, r3
   28314:	e0040491 	mul	r4, r1, r4
   28318:	e3a00001 	mov	r0, #1
   2831c:	e5854000 	str	r4, [r5]
   28320:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28324:	eb000a24 	bl	2abbc <EnterCritical>
   28328:	e5943010 	ldr	r3, [r4, #16]
   2832c:	e594700c 	ldr	r7, [r4, #12]
   28330:	e3530000 	cmp	r3, #0
   28334:	e5944004 	ldr	r4, [r4, #4]
   28338:	0affffe9 	beq	282e4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   2833c:	eb000a49 	bl	2ac68 <LeaveCritical>
   28340:	e3560000 	cmp	r6, #0
   28344:	1affffe8 	bne	282ec <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   28348:	e3a02f41 	mov	r2, #260	; 0x104
   2834c:	e59f101c 	ldr	r1, [pc, #28]	; 28370 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   28350:	e59f001c 	ldr	r0, [pc, #28]	; 28374 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   28354:	ebffecc9 	bl	23680 <assertion_failed>
   28358:	e59f2018 	ldr	r2, [pc, #24]	; 28378 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   2835c:	e59f100c 	ldr	r1, [pc, #12]	; 28370 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   28360:	e59f0014 	ldr	r0, [pc, #20]	; 2837c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   28364:	ebffecc5 	bl	23680 <assertion_failed>
   28368:	51eb851f 	.word	0x51eb851f
   2836c:	00002710 	.word	0x00002710
   28370:	0003aca0 	.word	0x0003aca0
   28374:	0003acd4 	.word	0x0003acd4
   28378:	00000107 	.word	0x00000107
   2837c:	0003ace4 	.word	0x0003ace4

00028380 <CTimer::GetUniversalTime() const>:
   28380:	e5903014 	ldr	r3, [r0, #20]
   28384:	e590000c 	ldr	r0, [r0, #12]
   28388:	e0633203 	rsb	r3, r3, r3, lsl #4
   2838c:	e1a03103 	lsl	r3, r3, #2
   28390:	e1530000 	cmp	r3, r0
   28394:	d0400003 	suble	r0, r0, r3
   28398:	c3a00000 	movgt	r0, #0
   2839c:	e12fff1e 	bx	lr

000283a0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   283a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   283a4:	e1a04000 	mov	r4, r0
   283a8:	e5900010 	ldr	r0, [r0, #16]
   283ac:	e1a08001 	mov	r8, r1
   283b0:	e3500000 	cmp	r0, #0
   283b4:	e1a06002 	mov	r6, r2
   283b8:	1a000019 	bne	28424 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   283bc:	e594500c 	ldr	r5, [r4, #12]
   283c0:	e5947004 	ldr	r7, [r4, #4]
   283c4:	e5943014 	ldr	r3, [r4, #20]
   283c8:	e0633203 	rsb	r3, r3, r3, lsl #4
   283cc:	e1a03103 	lsl	r3, r3, #2
   283d0:	e1530005 	cmp	r3, r5
   283d4:	ca000010 	bgt	2841c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
   283d8:	e3580000 	cmp	r8, #0
   283dc:	0a00001c 	beq	28454 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb4>
   283e0:	e0453003 	sub	r3, r5, r3
   283e4:	e3560000 	cmp	r6, #0
   283e8:	e5883000 	str	r3, [r8]
   283ec:	0a000014 	beq	28444 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
   283f0:	e3a03064 	mov	r3, #100	; 0x64
   283f4:	e59f1068 	ldr	r1, [pc, #104]	; 28464 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xc4>
   283f8:	e59f2068 	ldr	r2, [pc, #104]	; 28468 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xc8>
   283fc:	e0810791 	umull	r0, r1, r1, r7
   28400:	e1a012a1 	lsr	r1, r1, #5
   28404:	e0030193 	mul	r3, r3, r1
   28408:	e0473003 	sub	r3, r7, r3
   2840c:	e0030392 	mul	r3, r2, r3
   28410:	e3a00001 	mov	r0, #1
   28414:	e5863000 	str	r3, [r6]
   28418:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2841c:	e3a00000 	mov	r0, #0
   28420:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28424:	eb0009e4 	bl	2abbc <EnterCritical>
   28428:	e5943010 	ldr	r3, [r4, #16]
   2842c:	e594500c 	ldr	r5, [r4, #12]
   28430:	e3530000 	cmp	r3, #0
   28434:	e5947004 	ldr	r7, [r4, #4]
   28438:	0affffe1 	beq	283c4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   2843c:	eb000a09 	bl	2ac68 <LeaveCritical>
   28440:	eaffffdf 	b	283c4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   28444:	e3a02f4b 	mov	r2, #300	; 0x12c
   28448:	e59f101c 	ldr	r1, [pc, #28]	; 2846c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   2844c:	e59f001c 	ldr	r0, [pc, #28]	; 28470 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   28450:	ebffec8a 	bl	23680 <assertion_failed>
   28454:	e59f2018 	ldr	r2, [pc, #24]	; 28474 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   28458:	e59f100c 	ldr	r1, [pc, #12]	; 2846c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   2845c:	e59f0014 	ldr	r0, [pc, #20]	; 28478 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   28460:	ebffec86 	bl	23680 <assertion_failed>
   28464:	51eb851f 	.word	0x51eb851f
   28468:	00002710 	.word	0x00002710
   2846c:	0003aca0 	.word	0x0003aca0
   28470:	0003ace4 	.word	0x0003ace4
   28474:	00000129 	.word	0x00000129
   28478:	0003acd4 	.word	0x0003acd4

0002847c <CTimer::GetTimeString()>:
   2847c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28480:	e1a05000 	mov	r5, r0
   28484:	e5900010 	ldr	r0, [r0, #16]
   28488:	e24dd014 	sub	sp, sp, #20
   2848c:	e3500000 	cmp	r0, #0
   28490:	1a000065 	bne	2862c <CTimer::GetTimeString()+0x1b0>
   28494:	e595400c 	ldr	r4, [r5, #12]
   28498:	e5959004 	ldr	r9, [r5, #4]
   2849c:	e1940009 	orrs	r0, r4, r9
   284a0:	0a00003e 	beq	285a0 <CTimer::GetTimeString()+0x124>
   284a4:	e59f61a0 	ldr	r6, [pc, #416]	; 2864c <CTimer::GetTimeString()+0x1d0>
   284a8:	e59f81a0 	ldr	r8, [pc, #416]	; 28650 <CTimer::GetTimeString()+0x1d4>
   284ac:	e0873496 	umull	r3, r7, r6, r4
   284b0:	e1a072a7 	lsr	r7, r7, #5
   284b4:	e0863796 	umull	r3, r6, r6, r7
   284b8:	e59f3194 	ldr	r3, [pc, #404]	; 28654 <CTimer::GetTimeString()+0x1d8>
   284bc:	e0882498 	umull	r2, r8, r8, r4
   284c0:	e0832493 	umull	r2, r3, r3, r4
   284c4:	e1a062a6 	lsr	r6, r6, #5
   284c8:	e0666206 	rsb	r6, r6, r6, lsl #4
   284cc:	e0672207 	rsb	r2, r7, r7, lsl #4
   284d0:	e0476106 	sub	r6, r7, r6, lsl #2
   284d4:	e3a0a064 	mov	sl, #100	; 0x64
   284d8:	e0447102 	sub	r7, r4, r2, lsl #2
   284dc:	e3a0be19 	mov	fp, #400	; 0x190
   284e0:	e59f5170 	ldr	r5, [pc, #368]	; 28658 <CTimer::GetTimeString()+0x1dc>
   284e4:	e59fe170 	ldr	lr, [pc, #368]	; 2865c <CTimer::GetTimeString()+0x1e0>
   284e8:	e59fc170 	ldr	ip, [pc, #368]	; 28660 <CTimer::GetTimeString()+0x1e4>
   284ec:	e59f0170 	ldr	r0, [pc, #368]	; 28664 <CTimer::GetTimeString()+0x1e8>
   284f0:	e1a085a8 	lsr	r8, r8, #11
   284f4:	e1a04823 	lsr	r4, r3, #16
   284f8:	ea00000a 	b	28528 <CTimer::GetTimeString()+0xac>
   284fc:	e001019b 	mul	r1, fp, r1
   28500:	e0451001 	sub	r1, r5, r1
   28504:	e16f1f11 	clz	r1, r1
   28508:	e1a012a1 	lsr	r1, r1, #5
   2850c:	e3510000 	cmp	r1, #0
   28510:	01a0300c 	moveq	r3, ip
   28514:	11a03000 	movne	r3, r0
   28518:	e1540003 	cmp	r4, r3
   2851c:	3a000021 	bcc	285a8 <CTimer::GetTimeString()+0x12c>
   28520:	e0444003 	sub	r4, r4, r3
   28524:	e2855001 	add	r5, r5, #1
   28528:	e081359e 	umull	r3, r1, lr, r5
   2852c:	e1a032a1 	lsr	r3, r1, #5
   28530:	e003039a 	mul	r3, sl, r3
   28534:	e1550003 	cmp	r5, r3
   28538:	e1a013a1 	lsr	r1, r1, #7
   2853c:	0affffee 	beq	284fc <CTimer::GetTimeString()+0x80>
   28540:	e3150003 	tst	r5, #3
   28544:	03a01001 	moveq	r1, #1
   28548:	13a01000 	movne	r1, #0
   2854c:	eaffffee 	b	2850c <CTimer::GetTimeString()+0x90>
   28550:	e3a03064 	mov	r3, #100	; 0x64
   28554:	e59fb100 	ldr	fp, [pc, #256]	; 2865c <CTimer::GetTimeString()+0x1e0>
   28558:	e3a00010 	mov	r0, #16
   2855c:	e08b299b 	umull	r2, fp, fp, r9
   28560:	e1a0b2ab 	lsr	fp, fp, #5
   28564:	e00b0b93 	mul	fp, r3, fp
   28568:	eb000661 	bl	29ef4 <operator new(unsigned int)>
   2856c:	e049b00b 	sub	fp, r9, fp
   28570:	e1a09000 	mov	r9, r0
   28574:	ebfff91a 	bl	269e4 <CString::CString()>
   28578:	e59f30e8 	ldr	r3, [pc, #232]	; 28668 <CTimer::GetTimeString()+0x1ec>
   2857c:	e1550003 	cmp	r5, r3
   28580:	8a000018 	bhi	285e8 <CTimer::GetTimeString()+0x16c>
   28584:	e1a00009 	mov	r0, r9
   28588:	e88d0880 	stm	sp, {r7, fp}
   2858c:	e1a03006 	mov	r3, r6
   28590:	e1a02008 	mov	r2, r8
   28594:	e59f10d0 	ldr	r1, [pc, #208]	; 2866c <CTimer::GetTimeString()+0x1f0>
   28598:	ebfffe54 	bl	27ef0 <CString::Format(char const*, ...)>
   2859c:	e1a00009 	mov	r0, r9
   285a0:	e28dd014 	add	sp, sp, #20
   285a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285a8:	e3a0a000 	mov	sl, #0
   285ac:	e3a0001d 	mov	r0, #29
   285b0:	e59f20b8 	ldr	r2, [pc, #184]	; 28670 <CTimer::GetTimeString()+0x1f4>
   285b4:	ea000004 	b	285cc <CTimer::GetTimeString()+0x150>
   285b8:	e1a03000 	mov	r3, r0
   285bc:	e1540003 	cmp	r4, r3
   285c0:	3affffe2 	bcc	28550 <CTimer::GetTimeString()+0xd4>
   285c4:	e0444003 	sub	r4, r4, r3
   285c8:	e28aa001 	add	sl, sl, #1
   285cc:	e35a0001 	cmp	sl, #1
   285d0:	13a03000 	movne	r3, #0
   285d4:	02013001 	andeq	r3, r1, #1
   285d8:	e3530000 	cmp	r3, #0
   285dc:	1afffff5 	bne	285b8 <CTimer::GetTimeString()+0x13c>
   285e0:	e792310a 	ldr	r3, [r2, sl, lsl #2]
   285e4:	eafffff4 	b	285bc <CTimer::GetTimeString()+0x140>
   285e8:	e59f3084 	ldr	r3, [pc, #132]	; 28674 <CTimer::GetTimeString()+0x1f8>
   285ec:	e58db00c 	str	fp, [sp, #12]
   285f0:	e0832893 	umull	r2, r3, r3, r8
   285f4:	e1a03223 	lsr	r3, r3, #4
   285f8:	e0833083 	add	r3, r3, r3, lsl #1
   285fc:	e59f2074 	ldr	r2, [pc, #116]	; 28678 <CTimer::GetTimeString()+0x1fc>
   28600:	e0488183 	sub	r8, r8, r3, lsl #3
   28604:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   28608:	e1a00009 	mov	r0, r9
   2860c:	e98d00c0 	stmib	sp, {r6, r7}
   28610:	e2843001 	add	r3, r4, #1
   28614:	e58d8000 	str	r8, [sp]
   28618:	e59f105c 	ldr	r1, [pc, #92]	; 2867c <CTimer::GetTimeString()+0x200>
   2861c:	ebfffe33 	bl	27ef0 <CString::Format(char const*, ...)>
   28620:	e1a00009 	mov	r0, r9
   28624:	e28dd014 	add	sp, sp, #20
   28628:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2862c:	eb000962 	bl	2abbc <EnterCritical>
   28630:	e5953010 	ldr	r3, [r5, #16]
   28634:	e595400c 	ldr	r4, [r5, #12]
   28638:	e3530000 	cmp	r3, #0
   2863c:	e5959004 	ldr	r9, [r5, #4]
   28640:	0affff95 	beq	2849c <CTimer::GetTimeString()+0x20>
   28644:	eb000987 	bl	2ac68 <LeaveCritical>
   28648:	eaffff93 	b	2849c <CTimer::GetTimeString()+0x20>
   2864c:	88888889 	.word	0x88888889
   28650:	91a2b3c5 	.word	0x91a2b3c5
   28654:	c22e4507 	.word	0xc22e4507
   28658:	000007b2 	.word	0x000007b2
   2865c:	51eb851f 	.word	0x51eb851f
   28660:	0000016d 	.word	0x0000016d
   28664:	0000016e 	.word	0x0000016e
   28668:	000007b7 	.word	0x000007b7
   2866c:	0003ad14 	.word	0x0003ad14
   28670:	0003ac68 	.word	0x0003ac68
   28674:	aaaaaaab 	.word	0xaaaaaaab
   28678:	0003e230 	.word	0x0003e230
   2867c:	0003acf8 	.word	0x0003acf8

00028680 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   28680:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28684:	e1a09000 	mov	r9, r0
   28688:	e1a04002 	mov	r4, r2
   2868c:	e1a05001 	mov	r5, r1
   28690:	e3a00014 	mov	r0, #20
   28694:	e1a08003 	mov	r8, r3
   28698:	eb000615 	bl	29ef4 <operator new(unsigned int)>
   2869c:	e5996004 	ldr	r6, [r9, #4]
   286a0:	e3540000 	cmp	r4, #0
   286a4:	e0866005 	add	r6, r6, r5
   286a8:	0a000033 	beq	2877c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
   286ac:	e1a07000 	mov	r7, r0
   286b0:	e599001c 	ldr	r0, [r9, #28]
   286b4:	e59f30e4 	ldr	r3, [pc, #228]	; 287a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
   286b8:	e59d2020 	ldr	r2, [sp, #32]
   286bc:	e3500000 	cmp	r0, #0
   286c0:	e9870150 	stmib	r7, {r4, r6, r8}
   286c4:	e5872010 	str	r2, [r7, #16]
   286c8:	e5873000 	str	r3, [r7]
   286cc:	1a000020 	bne	28754 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd4>
   286d0:	e2895018 	add	r5, r9, #24
   286d4:	e1a00005 	mov	r0, r5
   286d8:	eb000c8e 	bl	2b918 <CPtrList::GetFirst()>
   286dc:	e2504000 	subs	r4, r0, #0
   286e0:	0a000029 	beq	2878c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   286e4:	e59f80b4 	ldr	r8, [pc, #180]	; 287a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
   286e8:	e1a01004 	mov	r1, r4
   286ec:	e1a00005 	mov	r0, r5
   286f0:	eb000c9f 	bl	2b974 <CPtrList::GetPtr(TPtrListElement*)>
   286f4:	e3500000 	cmp	r0, #0
   286f8:	0a00000d 	beq	28734 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xb4>
   286fc:	e5903000 	ldr	r3, [r0]
   28700:	e1530008 	cmp	r3, r8
   28704:	1a00000e 	bne	28744 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc4>
   28708:	e5903008 	ldr	r3, [r0, #8]
   2870c:	e1a01004 	mov	r1, r4
   28710:	e0433006 	sub	r3, r3, r6
   28714:	e3530000 	cmp	r3, #0
   28718:	e1a00005 	mov	r0, r5
   2871c:	ca00000e 	bgt	2875c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
   28720:	eb000c7e 	bl	2b920 <CPtrList::GetNext(TPtrListElement*)>
   28724:	e3500000 	cmp	r0, #0
   28728:	0a000017 	beq	2878c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   2872c:	e1a04000 	mov	r4, r0
   28730:	eaffffec 	b	286e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x68>
   28734:	e59f2068 	ldr	r2, [pc, #104]	; 287a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x124>
   28738:	e59f1068 	ldr	r1, [pc, #104]	; 287a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   2873c:	e59f0068 	ldr	r0, [pc, #104]	; 287ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   28740:	ebffebce 	bl	23680 <assertion_failed>
   28744:	e3a02f65 	mov	r2, #404	; 0x194
   28748:	e59f1058 	ldr	r1, [pc, #88]	; 287a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   2874c:	e59f005c 	ldr	r0, [pc, #92]	; 287b0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
   28750:	ebffebca 	bl	23680 <assertion_failed>
   28754:	eb000918 	bl	2abbc <EnterCritical>
   28758:	eaffffdc 	b	286d0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x50>
   2875c:	e1a02007 	mov	r2, r7
   28760:	eb000c98 	bl	2b9c8 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   28764:	e599301c 	ldr	r3, [r9, #28]
   28768:	e3530000 	cmp	r3, #0
   2876c:	0a000000 	beq	28774 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf4>
   28770:	eb00093c 	bl	2ac68 <LeaveCritical>
   28774:	e1a00007 	mov	r0, r7
   28778:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2877c:	e59f2030 	ldr	r2, [pc, #48]	; 287b4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   28780:	e59f1020 	ldr	r1, [pc, #32]	; 287a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   28784:	e59f002c 	ldr	r0, [pc, #44]	; 287b8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
   28788:	ebffebbc 	bl	23680 <assertion_failed>
   2878c:	e1a01004 	mov	r1, r4
   28790:	e1a00005 	mov	r0, r5
   28794:	e1a02007 	mov	r2, r7
   28798:	eb000cc3 	bl	2baac <CPtrList::InsertAfter(TPtrListElement*, void*)>
   2879c:	eafffff0 	b	28764 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe4>
   287a0:	4b544d43 	.word	0x4b544d43
   287a4:	00000193 	.word	0x00000193
   287a8:	0003aca0 	.word	0x0003aca0
   287ac:	0003ad28 	.word	0x0003ad28
   287b0:	0003ad38 	.word	0x0003ad38
   287b4:	00000183 	.word	0x00000183
   287b8:	0003b194 	.word	0x0003b194

000287bc <CTimer::CancelKernelTimer(unsigned int)>:
   287bc:	e92d4070 	push	{r4, r5, r6, lr}
   287c0:	e2514000 	subs	r4, r1, #0
   287c4:	0a00001b 	beq	28838 <CTimer::CancelKernelTimer(unsigned int)+0x7c>
   287c8:	e1a05000 	mov	r5, r0
   287cc:	e590001c 	ldr	r0, [r0, #28]
   287d0:	e3500000 	cmp	r0, #0
   287d4:	1a000015 	bne	28830 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   287d8:	e2856018 	add	r6, r5, #24
   287dc:	e1a01004 	mov	r1, r4
   287e0:	e1a00006 	mov	r0, r6
   287e4:	eb000d30 	bl	2bcac <CPtrList::Find(void*)>
   287e8:	e2501000 	subs	r1, r0, #0
   287ec:	0a00000a 	beq	2881c <CTimer::CancelKernelTimer(unsigned int)+0x60>
   287f0:	e59f3060 	ldr	r3, [pc, #96]	; 28858 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
   287f4:	e5942000 	ldr	r2, [r4]
   287f8:	e1520003 	cmp	r2, r3
   287fc:	1a000011 	bne	28848 <CTimer::CancelKernelTimer(unsigned int)+0x8c>
   28800:	e1a00006 	mov	r0, r6
   28804:	eb000ce1 	bl	2bb90 <CPtrList::Remove(TPtrListElement*)>
   28808:	e3a03000 	mov	r3, #0
   2880c:	e1a00004 	mov	r0, r4
   28810:	e5843000 	str	r3, [r4]
   28814:	e3a01014 	mov	r1, #20
   28818:	eb0005c3 	bl	29f2c <operator delete(void*, unsigned int)>
   2881c:	e595301c 	ldr	r3, [r5, #28]
   28820:	e3530000 	cmp	r3, #0
   28824:	08bd8070 	popeq	{r4, r5, r6, pc}
   28828:	e8bd4070 	pop	{r4, r5, r6, lr}
   2882c:	ea00090d 	b	2ac68 <LeaveCritical>
   28830:	eb0008e1 	bl	2abbc <EnterCritical>
   28834:	eaffffe7 	b	287d8 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   28838:	e3a02e1b 	mov	r2, #432	; 0x1b0
   2883c:	e59f1018 	ldr	r1, [pc, #24]	; 2885c <CTimer::CancelKernelTimer(unsigned int)+0xa0>
   28840:	e59f0018 	ldr	r0, [pc, #24]	; 28860 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   28844:	ebffeb8d 	bl	23680 <assertion_failed>
   28848:	e59f2014 	ldr	r2, [pc, #20]	; 28864 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
   2884c:	e59f1008 	ldr	r1, [pc, #8]	; 2885c <CTimer::CancelKernelTimer(unsigned int)+0xa0>
   28850:	e59f0010 	ldr	r0, [pc, #16]	; 28868 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   28854:	ebffeb89 	bl	23680 <assertion_failed>
   28858:	4b544d43 	.word	0x4b544d43
   2885c:	0003aca0 	.word	0x0003aca0
   28860:	000369c8 	.word	0x000369c8
   28864:	000001b7 	.word	0x000001b7
   28868:	0003acac 	.word	0x0003acac

0002886c <CTimer::PollKernelTimers()>:
   2886c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28870:	e1a06000 	mov	r6, r0
   28874:	e590001c 	ldr	r0, [r0, #28]
   28878:	e3500000 	cmp	r0, #0
   2887c:	1a000045 	bne	28998 <CTimer::PollKernelTimers()+0x12c>
   28880:	e2867018 	add	r7, r6, #24
   28884:	e1a00007 	mov	r0, r7
   28888:	eb000c22 	bl	2b918 <CPtrList::GetFirst()>
   2888c:	e2505000 	subs	r5, r0, #0
   28890:	0a000029 	beq	2893c <CTimer::PollKernelTimers()+0xd0>
   28894:	e3a0a000 	mov	sl, #0
   28898:	e3a09014 	mov	r9, #20
   2889c:	e59f80fc 	ldr	r8, [pc, #252]	; 289a0 <CTimer::PollKernelTimers()+0x134>
   288a0:	e1a01005 	mov	r1, r5
   288a4:	e1a00007 	mov	r0, r7
   288a8:	eb000c31 	bl	2b974 <CPtrList::GetPtr(TPtrListElement*)>
   288ac:	e2504000 	subs	r4, r0, #0
   288b0:	0a000030 	beq	28978 <CTimer::PollKernelTimers()+0x10c>
   288b4:	e5943000 	ldr	r3, [r4]
   288b8:	e1530008 	cmp	r3, r8
   288bc:	1a000031 	bne	28988 <CTimer::PollKernelTimers()+0x11c>
   288c0:	e5962004 	ldr	r2, [r6, #4]
   288c4:	e5943008 	ldr	r3, [r4, #8]
   288c8:	e0433002 	sub	r3, r3, r2
   288cc:	e3530000 	cmp	r3, #0
   288d0:	ca000019 	bgt	2893c <CTimer::PollKernelTimers()+0xd0>
   288d4:	e1a01005 	mov	r1, r5
   288d8:	e1a00007 	mov	r0, r7
   288dc:	eb000c0f 	bl	2b920 <CPtrList::GetNext(TPtrListElement*)>
   288e0:	e1a01005 	mov	r1, r5
   288e4:	e1a0b000 	mov	fp, r0
   288e8:	e1a00007 	mov	r0, r7
   288ec:	eb000ca7 	bl	2bb90 <CPtrList::Remove(TPtrListElement*)>
   288f0:	e596301c 	ldr	r3, [r6, #28]
   288f4:	e3530000 	cmp	r3, #0
   288f8:	1a000014 	bne	28950 <CTimer::PollKernelTimers()+0xe4>
   288fc:	e5943004 	ldr	r3, [r4, #4]
   28900:	e3530000 	cmp	r3, #0
   28904:	0a000015 	beq	28960 <CTimer::PollKernelTimers()+0xf4>
   28908:	e5942010 	ldr	r2, [r4, #16]
   2890c:	e594100c 	ldr	r1, [r4, #12]
   28910:	e1a00004 	mov	r0, r4
   28914:	e12fff33 	blx	r3
   28918:	e1a00004 	mov	r0, r4
   2891c:	e584a000 	str	sl, [r4]
   28920:	e1a01009 	mov	r1, r9
   28924:	eb000580 	bl	29f2c <operator delete(void*, unsigned int)>
   28928:	e596001c 	ldr	r0, [r6, #28]
   2892c:	e3500000 	cmp	r0, #0
   28930:	1a00000e 	bne	28970 <CTimer::PollKernelTimers()+0x104>
   28934:	e25b5000 	subs	r5, fp, #0
   28938:	1affffd8 	bne	288a0 <CTimer::PollKernelTimers()+0x34>
   2893c:	e596301c 	ldr	r3, [r6, #28]
   28940:	e3530000 	cmp	r3, #0
   28944:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28948:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2894c:	ea0008c5 	b	2ac68 <LeaveCritical>
   28950:	eb0008c4 	bl	2ac68 <LeaveCritical>
   28954:	e5943004 	ldr	r3, [r4, #4]
   28958:	e3530000 	cmp	r3, #0
   2895c:	1affffe9 	bne	28908 <CTimer::PollKernelTimers()+0x9c>
   28960:	e59f203c 	ldr	r2, [pc, #60]	; 289a4 <CTimer::PollKernelTimers()+0x138>
   28964:	e59f103c 	ldr	r1, [pc, #60]	; 289a8 <CTimer::PollKernelTimers()+0x13c>
   28968:	e59f003c 	ldr	r0, [pc, #60]	; 289ac <CTimer::PollKernelTimers()+0x140>
   2896c:	ebffeb43 	bl	23680 <assertion_failed>
   28970:	eb000891 	bl	2abbc <EnterCritical>
   28974:	eaffffee 	b	28934 <CTimer::PollKernelTimers()+0xc8>
   28978:	e3a02f73 	mov	r2, #460	; 0x1cc
   2897c:	e59f1024 	ldr	r1, [pc, #36]	; 289a8 <CTimer::PollKernelTimers()+0x13c>
   28980:	e59f0028 	ldr	r0, [pc, #40]	; 289b0 <CTimer::PollKernelTimers()+0x144>
   28984:	ebffeb3d 	bl	23680 <assertion_failed>
   28988:	e59f2024 	ldr	r2, [pc, #36]	; 289b4 <CTimer::PollKernelTimers()+0x148>
   2898c:	e59f1014 	ldr	r1, [pc, #20]	; 289a8 <CTimer::PollKernelTimers()+0x13c>
   28990:	e59f0020 	ldr	r0, [pc, #32]	; 289b8 <CTimer::PollKernelTimers()+0x14c>
   28994:	ebffeb39 	bl	23680 <assertion_failed>
   28998:	eb000887 	bl	2abbc <EnterCritical>
   2899c:	eaffffb7 	b	28880 <CTimer::PollKernelTimers()+0x14>
   289a0:	4b544d43 	.word	0x4b544d43
   289a4:	000001db 	.word	0x000001db
   289a8:	0003aca0 	.word	0x0003aca0
   289ac:	0003b194 	.word	0x0003b194
   289b0:	000369c8 	.word	0x000369c8
   289b4:	000001cd 	.word	0x000001cd
   289b8:	0003acac 	.word	0x0003acac

000289bc <CTimer::InterruptHandler()>:
   289bc:	e92d4070 	push	{r4, r5, r6, lr}
   289c0:	e3a03000 	mov	r3, #0
   289c4:	e1a04000 	mov	r4, r0
   289c8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   289cc:	e59f20fc 	ldr	r2, [pc, #252]	; 28ad0 <CTimer::InterruptHandler()+0x114>
   289d0:	e5923018 	ldr	r3, [r2, #24]
   289d4:	e2833c27 	add	r3, r3, #9984	; 0x2700
   289d8:	e2833010 	add	r3, r3, #16
   289dc:	e5823018 	str	r3, [r2, #24]
   289e0:	e5921004 	ldr	r1, [r2, #4]
   289e4:	e1530001 	cmp	r3, r1
   289e8:	e3a01008 	mov	r1, #8
   289ec:	35923004 	ldrcc	r3, [r2, #4]
   289f0:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   289f4:	32833010 	addcc	r3, r3, #16
   289f8:	35823018 	strcc	r3, [r2, #24]
   289fc:	e59f20cc 	ldr	r2, [pc, #204]	; 28ad0 <CTimer::InterruptHandler()+0x114>
   28a00:	e3a03000 	mov	r3, #0
   28a04:	e5821000 	str	r1, [r2]
   28a08:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   28a0c:	e5900010 	ldr	r0, [r0, #16]
   28a10:	e1500003 	cmp	r0, r3
   28a14:	1a000017 	bne	28a78 <CTimer::InterruptHandler()+0xbc>
   28a18:	e3a01064 	mov	r1, #100	; 0x64
   28a1c:	e5942004 	ldr	r2, [r4, #4]
   28a20:	e59f30ac 	ldr	r3, [pc, #172]	; 28ad4 <CTimer::InterruptHandler()+0x118>
   28a24:	e2822001 	add	r2, r2, #1
   28a28:	e0830293 	umull	r0, r3, r3, r2
   28a2c:	e1a032a3 	lsr	r3, r3, #5
   28a30:	e0030391 	mul	r3, r1, r3
   28a34:	e0523003 	subs	r3, r2, r3
   28a38:	e5842004 	str	r2, [r4, #4]
   28a3c:	0a000019 	beq	28aa8 <CTimer::InterruptHandler()+0xec>
   28a40:	e1a00004 	mov	r0, r4
   28a44:	ebffff88 	bl	2886c <CTimer::PollKernelTimers()>
   28a48:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   28a4c:	e3530000 	cmp	r3, #0
   28a50:	08bd8070 	popeq	{r4, r5, r6, pc}
   28a54:	e3a05000 	mov	r5, #0
   28a58:	e2846028 	add	r6, r4, #40	; 0x28
   28a5c:	e4963004 	ldr	r3, [r6], #4
   28a60:	e12fff33 	blx	r3
   28a64:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   28a68:	e2855001 	add	r5, r5, #1
   28a6c:	e1530005 	cmp	r3, r5
   28a70:	8afffff9 	bhi	28a5c <CTimer::InterruptHandler()+0xa0>
   28a74:	e8bd8070 	pop	{r4, r5, r6, pc}
   28a78:	eb00084f 	bl	2abbc <EnterCritical>
   28a7c:	e3a01064 	mov	r1, #100	; 0x64
   28a80:	e5943004 	ldr	r3, [r4, #4]
   28a84:	e59f2048 	ldr	r2, [pc, #72]	; 28ad4 <CTimer::InterruptHandler()+0x118>
   28a88:	e2833001 	add	r3, r3, #1
   28a8c:	e0820392 	umull	r0, r2, r2, r3
   28a90:	e1a022a2 	lsr	r2, r2, #5
   28a94:	e0020291 	mul	r2, r1, r2
   28a98:	e1530002 	cmp	r3, r2
   28a9c:	e5843004 	str	r3, [r4, #4]
   28aa0:	e5943010 	ldr	r3, [r4, #16]
   28aa4:	1a000005 	bne	28ac0 <CTimer::InterruptHandler()+0x104>
   28aa8:	e5942008 	ldr	r2, [r4, #8]
   28aac:	e2822001 	add	r2, r2, #1
   28ab0:	e5842008 	str	r2, [r4, #8]
   28ab4:	e594200c 	ldr	r2, [r4, #12]
   28ab8:	e2822001 	add	r2, r2, #1
   28abc:	e584200c 	str	r2, [r4, #12]
   28ac0:	e3530000 	cmp	r3, #0
   28ac4:	0affffdd 	beq	28a40 <CTimer::InterruptHandler()+0x84>
   28ac8:	eb000866 	bl	2ac68 <LeaveCritical>
   28acc:	eaffffdb 	b	28a40 <CTimer::InterruptHandler()+0x84>
   28ad0:	20003000 	.word	0x20003000
   28ad4:	51eb851f 	.word	0x51eb851f

00028ad8 <CTimer::InterruptHandler(void*)>:
   28ad8:	e3500000 	cmp	r0, #0
   28adc:	0a000000 	beq	28ae4 <CTimer::InterruptHandler(void*)+0xc>
   28ae0:	eaffffb5 	b	289bc <CTimer::InterruptHandler()>
   28ae4:	e92d4010 	push	{r4, lr}
   28ae8:	e59f2008 	ldr	r2, [pc, #8]	; 28af8 <CTimer::InterruptHandler(void*)+0x20>
   28aec:	e59f1008 	ldr	r1, [pc, #8]	; 28afc <CTimer::InterruptHandler(void*)+0x24>
   28af0:	e59f0008 	ldr	r0, [pc, #8]	; 28b00 <CTimer::InterruptHandler(void*)+0x28>
   28af4:	ebffeae1 	bl	23680 <assertion_failed>
   28af8:	00000223 	.word	0x00000223
   28afc:	0003aca0 	.word	0x0003aca0
   28b00:	0003466c 	.word	0x0003466c

00028b04 <CTimer::TuneMsDelay()>:
   28b04:	e92d4070 	push	{r4, r5, r6, lr}
   28b08:	e1a05000 	mov	r5, r0
   28b0c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   28b10:	e5953020 	ldr	r3, [r5, #32]
   28b14:	e24dd008 	sub	sp, sp, #8
   28b18:	e0000390 	mul	r0, r0, r3
   28b1c:	e5954004 	ldr	r4, [r5, #4]
   28b20:	eb000a9e 	bl	2b5a0 <DelayLoop>
   28b24:	e5951004 	ldr	r1, [r5, #4]
   28b28:	e59f0068 	ldr	r0, [pc, #104]	; 28b98 <CTimer::TuneMsDelay()+0x94>
   28b2c:	e0411004 	sub	r1, r1, r4
   28b30:	eb001ec3 	bl	30644 <__aeabi_uidiv>
   28b34:	e5953020 	ldr	r3, [r5, #32]
   28b38:	e59f405c 	ldr	r4, [pc, #92]	; 28b9c <CTimer::TuneMsDelay()+0x98>
   28b3c:	e0030093 	mul	r3, r3, r0
   28b40:	e0832394 	umull	r2, r3, r4, r3
   28b44:	e59f1054 	ldr	r1, [pc, #84]	; 28ba0 <CTimer::TuneMsDelay()+0x9c>
   28b48:	e1a032a3 	lsr	r3, r3, #5
   28b4c:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   28b50:	e0821291 	umull	r1, r2, r1, r2
   28b54:	e1a06000 	mov	r6, r0
   28b58:	e1a02322 	lsr	r2, r2, #6
   28b5c:	e5852024 	str	r2, [r5, #36]	; 0x24
   28b60:	e5853020 	str	r3, [r5, #32]
   28b64:	ebfff3b8 	bl	25a4c <CLogger::Get()>
   28b68:	e3a03064 	mov	r3, #100	; 0x64
   28b6c:	e0842694 	umull	r2, r4, r4, r6
   28b70:	e1a042a4 	lsr	r4, r4, #5
   28b74:	e0030493 	mul	r3, r3, r4
   28b78:	e0466003 	sub	r6, r6, r3
   28b7c:	e88d0050 	stm	sp, {r4, r6}
   28b80:	e59f301c 	ldr	r3, [pc, #28]	; 28ba4 <CTimer::TuneMsDelay()+0xa0>
   28b84:	e3a02003 	mov	r2, #3
   28b88:	e59f1018 	ldr	r1, [pc, #24]	; 28ba8 <CTimer::TuneMsDelay()+0xa4>
   28b8c:	ebfff2eb 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   28b90:	e28dd008 	add	sp, sp, #8
   28b94:	e8bd8070 	pop	{r4, r5, r6, pc}
   28b98:	00002710 	.word	0x00002710
   28b9c:	51eb851f 	.word	0x51eb851f
   28ba0:	10624dd3 	.word	0x10624dd3
   28ba4:	0003ad60 	.word	0x0003ad60
   28ba8:	0003ac98 	.word	0x0003ac98

00028bac <CTimer::Initialize()>:
   28bac:	e92d4070 	push	{r4, r5, r6, lr}
   28bb0:	e1a04000 	mov	r4, r0
   28bb4:	e5900000 	ldr	r0, [r0]
   28bb8:	e3500000 	cmp	r0, #0
   28bbc:	0a000011 	beq	28c08 <CTimer::Initialize()+0x5c>
   28bc0:	e1a03004 	mov	r3, r4
   28bc4:	e59f204c 	ldr	r2, [pc, #76]	; 28c18 <CTimer::Initialize()+0x6c>
   28bc8:	e3a01003 	mov	r1, #3
   28bcc:	eb0008fb 	bl	2afc0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   28bd0:	e3a05000 	mov	r5, #0
   28bd4:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   28bd8:	e59f203c 	ldr	r2, [pc, #60]	; 28c1c <CTimer::Initialize()+0x70>
   28bdc:	e59f303c 	ldr	r3, [pc, #60]	; 28c20 <CTimer::Initialize()+0x74>
   28be0:	e1a00004 	mov	r0, r4
   28be4:	e5823004 	str	r3, [r2, #4]
   28be8:	e5923004 	ldr	r3, [r2, #4]
   28bec:	e2833c27 	add	r3, r3, #9984	; 0x2700
   28bf0:	e2833010 	add	r3, r3, #16
   28bf4:	e5823018 	str	r3, [r2, #24]
   28bf8:	ebffffc1 	bl	28b04 <CTimer::TuneMsDelay()>
   28bfc:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   28c00:	e3a00001 	mov	r0, #1
   28c04:	e8bd8070 	pop	{r4, r5, r6, pc}
   28c08:	e3a02065 	mov	r2, #101	; 0x65
   28c0c:	e59f1010 	ldr	r1, [pc, #16]	; 28c24 <CTimer::Initialize()+0x78>
   28c10:	e59f0010 	ldr	r0, [pc, #16]	; 28c28 <CTimer::Initialize()+0x7c>
   28c14:	ebffea99 	bl	23680 <assertion_failed>
   28c18:	00028ad8 	.word	0x00028ad8
   28c1c:	20003000 	.word	0x20003000
   28c20:	fe363c80 	.word	0xfe363c80
   28c24:	0003aca0 	.word	0x0003aca0
   28c28:	000346a4 	.word	0x000346a4

00028c2c <CTimer::RegisterPeriodicHandler(void (*)())>:
   28c2c:	e3510000 	cmp	r1, #0
   28c30:	e92d4010 	push	{r4, lr}
   28c34:	0a00000b 	beq	28c68 <CTimer::RegisterPeriodicHandler(void (*)())+0x3c>
   28c38:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   28c3c:	e3530003 	cmp	r3, #3
   28c40:	8a00000c 	bhi	28c78 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   28c44:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   28c48:	e3a02000 	mov	r2, #0
   28c4c:	e283300a 	add	r3, r3, #10
   28c50:	e7801103 	str	r1, [r0, r3, lsl #2]
   28c54:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   28c58:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   28c5c:	e2833001 	add	r3, r3, #1
   28c60:	e5803038 	str	r3, [r0, #56]	; 0x38
   28c64:	e8bd8010 	pop	{r4, pc}
   28c68:	e59f2018 	ldr	r2, [pc, #24]	; 28c88 <CTimer::RegisterPeriodicHandler(void (*)())+0x5c>
   28c6c:	e59f1018 	ldr	r1, [pc, #24]	; 28c8c <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   28c70:	e59f0018 	ldr	r0, [pc, #24]	; 28c90 <CTimer::RegisterPeriodicHandler(void (*)())+0x64>
   28c74:	ebffea81 	bl	23680 <assertion_failed>
   28c78:	e59f2014 	ldr	r2, [pc, #20]	; 28c94 <CTimer::RegisterPeriodicHandler(void (*)())+0x68>
   28c7c:	e59f1008 	ldr	r1, [pc, #8]	; 28c8c <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   28c80:	e59f0010 	ldr	r0, [pc, #16]	; 28c98 <CTimer::RegisterPeriodicHandler(void (*)())+0x6c>
   28c84:	ebffea7d 	bl	23680 <assertion_failed>
   28c88:	00000239 	.word	0x00000239
   28c8c:	0003aca0 	.word	0x0003aca0
   28c90:	0003b194 	.word	0x0003b194
   28c94:	0000023b 	.word	0x0000023b
   28c98:	0003ad78 	.word	0x0003ad78

00028c9c <CTimer::SimpleMsDelay(unsigned int)>:
   28c9c:	e3500000 	cmp	r0, #0
   28ca0:	012fff1e 	bxeq	lr
   28ca4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   28ca8:	e0000093 	mul	r0, r3, r0
   28cac:	e3500000 	cmp	r0, #0
   28cb0:	012fff1e 	bxeq	lr
   28cb4:	eafffce3 	b	28048 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>

00028cb8 <CTimer::SimpleusDelay(unsigned int)>:
   28cb8:	e3500000 	cmp	r0, #0
   28cbc:	012fff1e 	bxeq	lr
   28cc0:	eafffce0 	b	28048 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>

00028cc4 <CTimer::IsLeapYear(unsigned int)>:
   28cc4:	e3a02064 	mov	r2, #100	; 0x64
   28cc8:	e59f303c 	ldr	r3, [pc, #60]	; 28d0c <CTimer::IsLeapYear(unsigned int)+0x48>
   28ccc:	e0831093 	umull	r1, r3, r3, r0
   28cd0:	e1a012a3 	lsr	r1, r3, #5
   28cd4:	e0020192 	mul	r2, r2, r1
   28cd8:	e1500002 	cmp	r0, r2
   28cdc:	0a000003 	beq	28cf0 <CTimer::IsLeapYear(unsigned int)+0x2c>
   28ce0:	e3100003 	tst	r0, #3
   28ce4:	03a00001 	moveq	r0, #1
   28ce8:	13a00000 	movne	r0, #0
   28cec:	e12fff1e 	bx	lr
   28cf0:	e3a02e19 	mov	r2, #400	; 0x190
   28cf4:	e1a033a3 	lsr	r3, r3, #7
   28cf8:	e0030392 	mul	r3, r2, r3
   28cfc:	e0400003 	sub	r0, r0, r3
   28d00:	e16f0f10 	clz	r0, r0
   28d04:	e1a002a0 	lsr	r0, r0, #5
   28d08:	e12fff1e 	bx	lr
   28d0c:	51eb851f 	.word	0x51eb851f

00028d10 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   28d10:	e3500001 	cmp	r0, #1
   28d14:	0a000002 	beq	28d24 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   28d18:	e59f3058 	ldr	r3, [pc, #88]	; 28d78 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
   28d1c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   28d20:	e12fff1e 	bx	lr
   28d24:	e3a02064 	mov	r2, #100	; 0x64
   28d28:	e59f304c 	ldr	r3, [pc, #76]	; 28d7c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
   28d2c:	e083c193 	umull	ip, r3, r3, r1
   28d30:	e1a0c2a3 	lsr	ip, r3, #5
   28d34:	e0020c92 	mul	r2, r2, ip
   28d38:	e1510002 	cmp	r1, r2
   28d3c:	0a000006 	beq	28d5c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
   28d40:	e3110003 	tst	r1, #3
   28d44:	03a01001 	moveq	r1, #1
   28d48:	13a01000 	movne	r1, #0
   28d4c:	e3510000 	cmp	r1, #0
   28d50:	0afffff0 	beq	28d18 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   28d54:	e3a0001d 	mov	r0, #29
   28d58:	e12fff1e 	bx	lr
   28d5c:	e3a02e19 	mov	r2, #400	; 0x190
   28d60:	e1a033a3 	lsr	r3, r3, #7
   28d64:	e0030392 	mul	r3, r2, r3
   28d68:	e0411003 	sub	r1, r1, r3
   28d6c:	e16f1f11 	clz	r1, r1
   28d70:	e1a012a1 	lsr	r1, r1, #5
   28d74:	eafffff4 	b	28d4c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
   28d78:	0003ac68 	.word	0x0003ac68
   28d7c:	51eb851f 	.word	0x51eb851f

00028d80 <CTimer::Get()>:
   28d80:	e59f3020 	ldr	r3, [pc, #32]	; 28da8 <CTimer::Get()+0x28>
   28d84:	e5930000 	ldr	r0, [r3]
   28d88:	e3500000 	cmp	r0, #0
   28d8c:	0a000000 	beq	28d94 <CTimer::Get()+0x14>
   28d90:	e12fff1e 	bx	lr
   28d94:	e92d4010 	push	{r4, lr}
   28d98:	e3a02f9f 	mov	r2, #636	; 0x27c
   28d9c:	e59f1008 	ldr	r1, [pc, #8]	; 28dac <CTimer::Get()+0x2c>
   28da0:	e59f0008 	ldr	r0, [pc, #8]	; 28db0 <CTimer::Get()+0x30>
   28da4:	ebffea35 	bl	23680 <assertion_failed>
   28da8:	0003e3a8 	.word	0x0003e3a8
   28dac:	0003aca0 	.word	0x0003aca0
   28db0:	00038ecc 	.word	0x00038ecc

00028db4 <memset>:
   28db4:	e3100003 	tst	r0, #3
   28db8:	03a03001 	moveq	r3, #1
   28dbc:	13a03000 	movne	r3, #0
   28dc0:	e352000f 	cmp	r2, #15
   28dc4:	93a03000 	movls	r3, #0
   28dc8:	82033001 	andhi	r3, r3, #1
   28dcc:	e3530000 	cmp	r3, #0
   28dd0:	0a000019 	beq	28e3c <memset+0x88>
   28dd4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   28dd8:	e1a0e002 	mov	lr, r2
   28ddc:	e181c401 	orr	ip, r1, r1, lsl #8
   28de0:	e18cc80c 	orr	ip, ip, ip, lsl #16
   28de4:	e2803010 	add	r3, r0, #16
   28de8:	e24ee010 	sub	lr, lr, #16
   28dec:	e35e000f 	cmp	lr, #15
   28df0:	e503c010 	str	ip, [r3, #-16]
   28df4:	e503c00c 	str	ip, [r3, #-12]
   28df8:	e503c008 	str	ip, [r3, #-8]
   28dfc:	e503c004 	str	ip, [r3, #-4]
   28e00:	e2833010 	add	r3, r3, #16
   28e04:	8afffff7 	bhi	28de8 <memset+0x34>
   28e08:	e2423010 	sub	r3, r2, #16
   28e0c:	e3c3300f 	bic	r3, r3, #15
   28e10:	e202200f 	and	r2, r2, #15
   28e14:	e2833010 	add	r3, r3, #16
   28e18:	e3520000 	cmp	r2, #0
   28e1c:	e0803003 	add	r3, r0, r3
   28e20:	0a00000f 	beq	28e64 <memset+0xb0>
   28e24:	e6af1071 	sxtb	r1, r1
   28e28:	e0832002 	add	r2, r3, r2
   28e2c:	e4c31001 	strb	r1, [r3], #1
   28e30:	e1530002 	cmp	r3, r2
   28e34:	1afffffc 	bne	28e2c <memset+0x78>
   28e38:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   28e3c:	e3520000 	cmp	r2, #0
   28e40:	e1a03000 	mov	r3, r0
   28e44:	16af1071 	sxtbne	r1, r1
   28e48:	10802002 	addne	r2, r0, r2
   28e4c:	0a000003 	beq	28e60 <memset+0xac>
   28e50:	e4c31001 	strb	r1, [r3], #1
   28e54:	e1530002 	cmp	r3, r2
   28e58:	1afffffc 	bne	28e50 <memset+0x9c>
   28e5c:	e12fff1e 	bx	lr
   28e60:	e12fff1e 	bx	lr
   28e64:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00028e68 <memmove>:
   28e68:	e1500001 	cmp	r0, r1
   28e6c:	9a00000a 	bls	28e9c <memmove+0x34>
   28e70:	e0813002 	add	r3, r1, r2
   28e74:	e1500003 	cmp	r0, r3
   28e78:	2a000007 	bcs	28e9c <memmove+0x34>
   28e7c:	e3520000 	cmp	r2, #0
   28e80:	e0802002 	add	r2, r0, r2
   28e84:	012fff1e 	bxeq	lr
   28e88:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   28e8c:	e1510003 	cmp	r1, r3
   28e90:	e562c001 	strb	ip, [r2, #-1]!
   28e94:	1afffffb 	bne	28e88 <memmove+0x20>
   28e98:	e12fff1e 	bx	lr
   28e9c:	ea00023b 	b	29790 <memcpy>

00028ea0 <memcmp>:
   28ea0:	e3520000 	cmp	r2, #0
   28ea4:	0a00000e 	beq	28ee4 <memcmp+0x44>
   28ea8:	e5d0c000 	ldrb	ip, [r0]
   28eac:	e5d13000 	ldrb	r3, [r1]
   28eb0:	e15c0003 	cmp	ip, r3
   28eb4:	ca00000c 	bgt	28eec <memcmp+0x4c>
   28eb8:	ba00000d 	blt	28ef4 <memcmp+0x54>
   28ebc:	e0812002 	add	r2, r1, r2
   28ec0:	e2811001 	add	r1, r1, #1
   28ec4:	ea000004 	b	28edc <memcmp+0x3c>
   28ec8:	e5f0c001 	ldrb	ip, [r0, #1]!
   28ecc:	e4d13001 	ldrb	r3, [r1], #1
   28ed0:	e15c0003 	cmp	ip, r3
   28ed4:	ca000004 	bgt	28eec <memcmp+0x4c>
   28ed8:	ba000005 	blt	28ef4 <memcmp+0x54>
   28edc:	e1510002 	cmp	r1, r2
   28ee0:	1afffff8 	bne	28ec8 <memcmp+0x28>
   28ee4:	e3a00000 	mov	r0, #0
   28ee8:	e12fff1e 	bx	lr
   28eec:	e3a00001 	mov	r0, #1
   28ef0:	e12fff1e 	bx	lr
   28ef4:	e3e00000 	mvn	r0, #0
   28ef8:	e12fff1e 	bx	lr

00028efc <strlen>:
   28efc:	e1d010d0 	ldrsb	r1, [r0]
   28f00:	e2803001 	add	r3, r0, #1
   28f04:	e3510000 	cmp	r1, #0
   28f08:	0a000003 	beq	28f1c <strlen+0x20>
   28f0c:	e0431000 	sub	r1, r3, r0
   28f10:	e0d320d1 	ldrsb	r2, [r3], #1
   28f14:	e3520000 	cmp	r2, #0
   28f18:	1afffffb 	bne	28f0c <strlen+0x10>
   28f1c:	e1a00001 	mov	r0, r1
   28f20:	e12fff1e 	bx	lr

00028f24 <strcmp>:
   28f24:	e1d030d0 	ldrsb	r3, [r0]
   28f28:	e1d120d0 	ldrsb	r2, [r1]
   28f2c:	e3530000 	cmp	r3, #0
   28f30:	1a000007 	bne	28f54 <strcmp+0x30>
   28f34:	ea000008 	b	28f5c <strcmp+0x38>
   28f38:	e1530002 	cmp	r3, r2
   28f3c:	ca00000b 	bgt	28f70 <strcmp+0x4c>
   28f40:	ba00000c 	blt	28f78 <strcmp+0x54>
   28f44:	e1f030d1 	ldrsb	r3, [r0, #1]!
   28f48:	e3530000 	cmp	r3, #0
   28f4c:	0a00000b 	beq	28f80 <strcmp+0x5c>
   28f50:	e1f120d1 	ldrsb	r2, [r1, #1]!
   28f54:	e3520000 	cmp	r2, #0
   28f58:	1afffff6 	bne	28f38 <strcmp+0x14>
   28f5c:	e1530002 	cmp	r3, r2
   28f60:	ca000002 	bgt	28f70 <strcmp+0x4c>
   28f64:	b3e00000 	mvnlt	r0, #0
   28f68:	a3a00000 	movge	r0, #0
   28f6c:	e12fff1e 	bx	lr
   28f70:	e3a00001 	mov	r0, #1
   28f74:	e12fff1e 	bx	lr
   28f78:	e3e00000 	mvn	r0, #0
   28f7c:	e12fff1e 	bx	lr
   28f80:	e1d120d1 	ldrsb	r2, [r1, #1]
   28f84:	e1530002 	cmp	r3, r2
   28f88:	dafffff5 	ble	28f64 <strcmp+0x40>
   28f8c:	eafffff7 	b	28f70 <strcmp+0x4c>

00028f90 <strcasecmp>:
   28f90:	e2400001 	sub	r0, r0, #1
   28f94:	e1f030d1 	ldrsb	r3, [r0, #1]!
   28f98:	e2432061 	sub	r2, r3, #97	; 0x61
   28f9c:	e3520019 	cmp	r2, #25
   28fa0:	92433020 	subls	r3, r3, #32
   28fa4:	e3530000 	cmp	r3, #0
   28fa8:	0a00001f 	beq	2902c <strcasecmp+0x9c>
   28fac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   28fb0:	e0d120d1 	ldrsb	r2, [r1], #1
   28fb4:	e242c061 	sub	ip, r2, #97	; 0x61
   28fb8:	e35c0019 	cmp	ip, #25
   28fbc:	81a0e002 	movhi	lr, r2
   28fc0:	9242e020 	subls	lr, r2, #32
   28fc4:	e35e0000 	cmp	lr, #0
   28fc8:	1a000006 	bne	28fe8 <strcasecmp+0x58>
   28fcc:	e35c0019 	cmp	ip, #25
   28fd0:	92422020 	subls	r2, r2, #32
   28fd4:	e1530002 	cmp	r3, r2
   28fd8:	ca000011 	bgt	29024 <strcasecmp+0x94>
   28fdc:	b3e00000 	mvnlt	r0, #0
   28fe0:	a3a00000 	movge	r0, #0
   28fe4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   28fe8:	e153000e 	cmp	r3, lr
   28fec:	ca00000c 	bgt	29024 <strcasecmp+0x94>
   28ff0:	ba000016 	blt	29050 <strcasecmp+0xc0>
   28ff4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   28ff8:	e2432061 	sub	r2, r3, #97	; 0x61
   28ffc:	e3520019 	cmp	r2, #25
   29000:	92433020 	subls	r3, r3, #32
   29004:	e3530000 	cmp	r3, #0
   29008:	1affffe8 	bne	28fb0 <strcasecmp+0x20>
   2900c:	e1d120d0 	ldrsb	r2, [r1]
   29010:	e242c061 	sub	ip, r2, #97	; 0x61
   29014:	e35c0019 	cmp	ip, #25
   29018:	92422020 	subls	r2, r2, #32
   2901c:	e1530002 	cmp	r3, r2
   29020:	daffffed 	ble	28fdc <strcasecmp+0x4c>
   29024:	e3a00001 	mov	r0, #1
   29028:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2902c:	e1d120d0 	ldrsb	r2, [r1]
   29030:	e242c061 	sub	ip, r2, #97	; 0x61
   29034:	e35c0019 	cmp	ip, #25
   29038:	92422020 	subls	r2, r2, #32
   2903c:	e1530002 	cmp	r3, r2
   29040:	ca000004 	bgt	29058 <strcasecmp+0xc8>
   29044:	b3e00000 	mvnlt	r0, #0
   29048:	a3a00000 	movge	r0, #0
   2904c:	e12fff1e 	bx	lr
   29050:	e3e00000 	mvn	r0, #0
   29054:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   29058:	e3a00001 	mov	r0, #1
   2905c:	e12fff1e 	bx	lr

00029060 <strncmp>:
   29060:	e3520000 	cmp	r2, #0
   29064:	0a000016 	beq	290c4 <strncmp+0x64>
   29068:	e1d030d0 	ldrsb	r3, [r0]
   2906c:	e1d1c0d0 	ldrsb	ip, [r1]
   29070:	e3530000 	cmp	r3, #0
   29074:	0a000015 	beq	290d0 <strncmp+0x70>
   29078:	e35c0000 	cmp	ip, #0
   2907c:	0a000013 	beq	290d0 <strncmp+0x70>
   29080:	e15c0003 	cmp	ip, r3
   29084:	ba000016 	blt	290e4 <strncmp+0x84>
   29088:	d0802002 	addle	r2, r0, r2
   2908c:	d2800001 	addle	r0, r0, #1
   29090:	da000009 	ble	290bc <strncmp+0x5c>
   29094:	ea000014 	b	290ec <strncmp+0x8c>
   29098:	e0d030d1 	ldrsb	r3, [r0], #1
   2909c:	e3530000 	cmp	r3, #0
   290a0:	0a000009 	beq	290cc <strncmp+0x6c>
   290a4:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   290a8:	e35c0000 	cmp	ip, #0
   290ac:	0a000007 	beq	290d0 <strncmp+0x70>
   290b0:	e153000c 	cmp	r3, ip
   290b4:	ca00000a 	bgt	290e4 <strncmp+0x84>
   290b8:	ba00000b 	blt	290ec <strncmp+0x8c>
   290bc:	e1500002 	cmp	r0, r2
   290c0:	1afffff4 	bne	29098 <strncmp+0x38>
   290c4:	e3a00000 	mov	r0, #0
   290c8:	e12fff1e 	bx	lr
   290cc:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   290d0:	e153000c 	cmp	r3, ip
   290d4:	ca000002 	bgt	290e4 <strncmp+0x84>
   290d8:	b3e00000 	mvnlt	r0, #0
   290dc:	a3a00000 	movge	r0, #0
   290e0:	e12fff1e 	bx	lr
   290e4:	e3a00001 	mov	r0, #1
   290e8:	e12fff1e 	bx	lr
   290ec:	e3e00000 	mvn	r0, #0
   290f0:	e12fff1e 	bx	lr

000290f4 <strncasecmp>:
   290f4:	e3520000 	cmp	r2, #0
   290f8:	0a00002c 	beq	291b0 <strncasecmp+0xbc>
   290fc:	e1a0c001 	mov	ip, r1
   29100:	e92d4010 	push	{r4, lr}
   29104:	e2400001 	sub	r0, r0, #1
   29108:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2910c:	e2431061 	sub	r1, r3, #97	; 0x61
   29110:	e3510019 	cmp	r1, #25
   29114:	92433020 	subls	r3, r3, #32
   29118:	e3530000 	cmp	r3, #0
   2911c:	0a00001c 	beq	29194 <strncasecmp+0xa0>
   29120:	e0dc10d1 	ldrsb	r1, [ip], #1
   29124:	e241e061 	sub	lr, r1, #97	; 0x61
   29128:	e35e0019 	cmp	lr, #25
   2912c:	81a04001 	movhi	r4, r1
   29130:	92414020 	subls	r4, r1, #32
   29134:	e3540000 	cmp	r4, #0
   29138:	1a000006 	bne	29158 <strncasecmp+0x64>
   2913c:	e35e0019 	cmp	lr, #25
   29140:	9a00000e 	bls	29180 <strncasecmp+0x8c>
   29144:	e1510003 	cmp	r1, r3
   29148:	ba000014 	blt	291a0 <strncasecmp+0xac>
   2914c:	c3e00000 	mvngt	r0, #0
   29150:	d3a00000 	movle	r0, #0
   29154:	e8bd8010 	pop	{r4, pc}
   29158:	e1530004 	cmp	r3, r4
   2915c:	ca00000f 	bgt	291a0 <strncasecmp+0xac>
   29160:	ba000010 	blt	291a8 <strncasecmp+0xb4>
   29164:	e2522001 	subs	r2, r2, #1
   29168:	1affffe6 	bne	29108 <strncasecmp+0x14>
   2916c:	e1dc10d0 	ldrsb	r1, [ip]
   29170:	e2412061 	sub	r2, r1, #97	; 0x61
   29174:	e3520019 	cmp	r2, #25
   29178:	93a02000 	movls	r2, #0
   2917c:	8a000002 	bhi	2918c <strncasecmp+0x98>
   29180:	e3520000 	cmp	r2, #0
   29184:	e2411020 	sub	r1, r1, #32
   29188:	1affffed 	bne	29144 <strncasecmp+0x50>
   2918c:	e3a00000 	mov	r0, #0
   29190:	e8bd8010 	pop	{r4, pc}
   29194:	e1dc10d0 	ldrsb	r1, [ip]
   29198:	e241e061 	sub	lr, r1, #97	; 0x61
   2919c:	eaffffe6 	b	2913c <strncasecmp+0x48>
   291a0:	e3a00001 	mov	r0, #1
   291a4:	e8bd8010 	pop	{r4, pc}
   291a8:	e3e00000 	mvn	r0, #0
   291ac:	e8bd8010 	pop	{r4, pc}
   291b0:	e1d110d0 	ldrsb	r1, [r1]
   291b4:	e2412061 	sub	r2, r1, #97	; 0x61
   291b8:	e3520019 	cmp	r2, #25
   291bc:	8a00000a 	bhi	291ec <strncasecmp+0xf8>
   291c0:	e3a02000 	mov	r2, #0
   291c4:	e3520000 	cmp	r2, #0
   291c8:	e2411020 	sub	r1, r1, #32
   291cc:	0a000006 	beq	291ec <strncasecmp+0xf8>
   291d0:	e1510003 	cmp	r1, r3
   291d4:	ba000002 	blt	291e4 <strncasecmp+0xf0>
   291d8:	c3e00000 	mvngt	r0, #0
   291dc:	d3a00000 	movle	r0, #0
   291e0:	e12fff1e 	bx	lr
   291e4:	e3a00001 	mov	r0, #1
   291e8:	e12fff1e 	bx	lr
   291ec:	e3a00000 	mov	r0, #0
   291f0:	e12fff1e 	bx	lr

000291f4 <strcpy>:
   291f4:	e1d130d0 	ldrsb	r3, [r1]
   291f8:	e1a02000 	mov	r2, r0
   291fc:	e3530000 	cmp	r3, #0
   29200:	0a000003 	beq	29214 <strcpy+0x20>
   29204:	e4c23001 	strb	r3, [r2], #1
   29208:	e1f130d1 	ldrsb	r3, [r1, #1]!
   2920c:	e3530000 	cmp	r3, #0
   29210:	1afffffb 	bne	29204 <strcpy+0x10>
   29214:	e3a03000 	mov	r3, #0
   29218:	e5c23000 	strb	r3, [r2]
   2921c:	e12fff1e 	bx	lr

00029220 <strncpy>:
   29220:	e3520000 	cmp	r2, #0
   29224:	012fff1e 	bxeq	lr
   29228:	e1d1c0d0 	ldrsb	ip, [r1]
   2922c:	e35c0000 	cmp	ip, #0
   29230:	0a000009 	beq	2925c <strncpy+0x3c>
   29234:	e0802002 	add	r2, r0, r2
   29238:	e1a03000 	mov	r3, r0
   2923c:	ea000002 	b	2924c <strncpy+0x2c>
   29240:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   29244:	e35c0000 	cmp	ip, #0
   29248:	0a000004 	beq	29260 <strncpy+0x40>
   2924c:	e4c3c001 	strb	ip, [r3], #1
   29250:	e1530002 	cmp	r3, r2
   29254:	1afffff9 	bne	29240 <strncpy+0x20>
   29258:	e12fff1e 	bx	lr
   2925c:	e1a03000 	mov	r3, r0
   29260:	e3a02000 	mov	r2, #0
   29264:	e5c32000 	strb	r2, [r3]
   29268:	e12fff1e 	bx	lr

0002926c <strcat>:
   2926c:	e1d030d0 	ldrsb	r3, [r0]
   29270:	e3530000 	cmp	r3, #0
   29274:	e1a03000 	mov	r3, r0
   29278:	0a000002 	beq	29288 <strcat+0x1c>
   2927c:	e1f320d1 	ldrsb	r2, [r3, #1]!
   29280:	e3520000 	cmp	r2, #0
   29284:	1afffffc 	bne	2927c <strcat+0x10>
   29288:	e1d120d0 	ldrsb	r2, [r1]
   2928c:	e3520000 	cmp	r2, #0
   29290:	0a000003 	beq	292a4 <strcat+0x38>
   29294:	e4c32001 	strb	r2, [r3], #1
   29298:	e1f120d1 	ldrsb	r2, [r1, #1]!
   2929c:	e3520000 	cmp	r2, #0
   292a0:	1afffffb 	bne	29294 <strcat+0x28>
   292a4:	e3a02000 	mov	r2, #0
   292a8:	e5c32000 	strb	r2, [r3]
   292ac:	e12fff1e 	bx	lr

000292b0 <strchr>:
   292b0:	e1d020d0 	ldrsb	r2, [r0]
   292b4:	e3520000 	cmp	r2, #0
   292b8:	0a000009 	beq	292e4 <strchr+0x34>
   292bc:	e1510002 	cmp	r1, r2
   292c0:	1a000002 	bne	292d0 <strchr+0x20>
   292c4:	ea000008 	b	292ec <strchr+0x3c>
   292c8:	e1530001 	cmp	r3, r1
   292cc:	012fff1e 	bxeq	lr
   292d0:	e1f030d1 	ldrsb	r3, [r0, #1]!
   292d4:	e3530000 	cmp	r3, #0
   292d8:	1afffffa 	bne	292c8 <strchr+0x18>
   292dc:	e1a00003 	mov	r0, r3
   292e0:	e12fff1e 	bx	lr
   292e4:	e1a00002 	mov	r0, r2
   292e8:	e12fff1e 	bx	lr
   292ec:	e12fff1e 	bx	lr

000292f0 <strstr>:
   292f0:	e1d030d0 	ldrsb	r3, [r0]
   292f4:	e3530000 	cmp	r3, #0
   292f8:	1a000003 	bne	2930c <strstr+0x1c>
   292fc:	e1d130d0 	ldrsb	r3, [r1]
   29300:	e3530000 	cmp	r3, #0
   29304:	13a00000 	movne	r0, #0
   29308:	e12fff1e 	bx	lr
   2930c:	e92d4010 	push	{r4, lr}
   29310:	e1d140d0 	ldrsb	r4, [r1]
   29314:	e3540000 	cmp	r4, #0
   29318:	08bd8010 	popeq	{r4, pc}
   2931c:	e1d030d0 	ldrsb	r3, [r0]
   29320:	e1530004 	cmp	r3, r4
   29324:	01a02001 	moveq	r2, r1
   29328:	01a0c000 	moveq	ip, r0
   2932c:	0a000003 	beq	29340 <strstr+0x50>
   29330:	ea000006 	b	29350 <strstr+0x60>
   29334:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   29338:	e15e0003 	cmp	lr, r3
   2933c:	1a000003 	bne	29350 <strstr+0x60>
   29340:	e1f230d1 	ldrsb	r3, [r2, #1]!
   29344:	e3530000 	cmp	r3, #0
   29348:	1afffff9 	bne	29334 <strstr+0x44>
   2934c:	e8bd8010 	pop	{r4, pc}
   29350:	e1f030d1 	ldrsb	r3, [r0, #1]!
   29354:	e3530000 	cmp	r3, #0
   29358:	1affffed 	bne	29314 <strstr+0x24>
   2935c:	e1a00003 	mov	r0, r3
   29360:	e8bd8010 	pop	{r4, pc}

00029364 <strtok_r>:
   29364:	e3500000 	cmp	r0, #0
   29368:	0a00002c 	beq	29420 <strtok_r+0xbc>
   2936c:	e92d4030 	push	{r4, r5, lr}
   29370:	e1d0e0d0 	ldrsb	lr, [r0]
   29374:	e35e0000 	cmp	lr, #0
   29378:	11d140d0 	ldrsbne	r4, [r1]
   2937c:	0a000024 	beq	29414 <strtok_r+0xb0>
   29380:	e3540000 	cmp	r4, #0
   29384:	0a000008 	beq	293ac <strtok_r+0x48>
   29388:	e15e0004 	cmp	lr, r4
   2938c:	0a000019 	beq	293f8 <strtok_r+0x94>
   29390:	e1a0c001 	mov	ip, r1
   29394:	ea000001 	b	293a0 <strtok_r+0x3c>
   29398:	e15e0003 	cmp	lr, r3
   2939c:	0a000015 	beq	293f8 <strtok_r+0x94>
   293a0:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   293a4:	e3530000 	cmp	r3, #0
   293a8:	1afffffa 	bne	29398 <strtok_r+0x34>
   293ac:	e35e0000 	cmp	lr, #0
   293b0:	0a000017 	beq	29414 <strtok_r+0xb0>
   293b4:	e1a05000 	mov	r5, r0
   293b8:	e3540000 	cmp	r4, #0
   293bc:	0a000008 	beq	293e4 <strtok_r+0x80>
   293c0:	e15e0004 	cmp	lr, r4
   293c4:	0a00000d 	beq	29400 <strtok_r+0x9c>
   293c8:	e1a0c001 	mov	ip, r1
   293cc:	ea000001 	b	293d8 <strtok_r+0x74>
   293d0:	e15e0003 	cmp	lr, r3
   293d4:	0a000009 	beq	29400 <strtok_r+0x9c>
   293d8:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   293dc:	e3530000 	cmp	r3, #0
   293e0:	1afffffa 	bne	293d0 <strtok_r+0x6c>
   293e4:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   293e8:	e35e0000 	cmp	lr, #0
   293ec:	1afffff1 	bne	293b8 <strtok_r+0x54>
   293f0:	e5825000 	str	r5, [r2]
   293f4:	e8bd8030 	pop	{r4, r5, pc}
   293f8:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   293fc:	eaffffdf 	b	29380 <strtok_r+0x1c>
   29400:	e3a03000 	mov	r3, #0
   29404:	e2855001 	add	r5, r5, #1
   29408:	e5453001 	strb	r3, [r5, #-1]
   2940c:	e5825000 	str	r5, [r2]
   29410:	e8bd8030 	pop	{r4, r5, pc}
   29414:	e3a00000 	mov	r0, #0
   29418:	e5820000 	str	r0, [r2]
   2941c:	e8bd8030 	pop	{r4, r5, pc}
   29420:	e5920000 	ldr	r0, [r2]
   29424:	e3500000 	cmp	r0, #0
   29428:	1affffcf 	bne	2936c <strtok_r+0x8>
   2942c:	e12fff1e 	bx	lr

00029430 <strtoul>:
   29430:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   29434:	e3510000 	cmp	r1, #0
   29438:	e2425002 	sub	r5, r2, #2
   2943c:	15810000 	strne	r0, [r1]
   29440:	e3520000 	cmp	r2, #0
   29444:	13550022 	cmpne	r5, #34	; 0x22
   29448:	e3c2e010 	bic	lr, r2, #16
   2944c:	83a05001 	movhi	r5, #1
   29450:	93a05000 	movls	r5, #0
   29454:	8a000037 	bhi	29538 <strtoul+0x108>
   29458:	e1d0c0d0 	ldrsb	ip, [r0]
   2945c:	e1a04000 	mov	r4, r0
   29460:	e24c3009 	sub	r3, ip, #9
   29464:	e35c0020 	cmp	ip, #32
   29468:	e2800001 	add	r0, r0, #1
   2946c:	e6ef3073 	uxtb	r3, r3
   29470:	0afffff8 	beq	29458 <strtoul+0x28>
   29474:	e3530004 	cmp	r3, #4
   29478:	9afffff6 	bls	29458 <strtoul+0x28>
   2947c:	e35c002b 	cmp	ip, #43	; 0x2b
   29480:	0a00002e 	beq	29540 <strtoul+0x110>
   29484:	e35c002d 	cmp	ip, #45	; 0x2d
   29488:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   2948c:	03a07001 	moveq	r7, #1
   29490:	01a04000 	moveq	r4, r0
   29494:	13a07000 	movne	r7, #0
   29498:	e35c0030 	cmp	ip, #48	; 0x30
   2949c:	0a00002c 	beq	29554 <strtoul+0x124>
   294a0:	e3520000 	cmp	r2, #0
   294a4:	03a0200a 	moveq	r2, #10
   294a8:	e35c002f 	cmp	ip, #47	; 0x2f
   294ac:	e1a0300c 	mov	r3, ip
   294b0:	da00001d 	ble	2952c <strtoul+0xfc>
   294b4:	e3a0e000 	mov	lr, #0
   294b8:	e3a05001 	mov	r5, #1
   294bc:	e1a0600e 	mov	r6, lr
   294c0:	ea000008 	b	294e8 <strtoul+0xb8>
   294c4:	e020329e 	mla	r0, lr, r2, r3
   294c8:	e150000e 	cmp	r0, lr
   294cc:	3a000029 	bcc	29578 <strtoul+0x148>
   294d0:	e1f430d1 	ldrsb	r3, [r4, #1]!
   294d4:	e1a05006 	mov	r5, r6
   294d8:	e353002f 	cmp	r3, #47	; 0x2f
   294dc:	e1a0c003 	mov	ip, r3
   294e0:	da000029 	ble	2958c <strtoul+0x15c>
   294e4:	e1a0e000 	mov	lr, r0
   294e8:	e24cc061 	sub	ip, ip, #97	; 0x61
   294ec:	e35c0019 	cmp	ip, #25
   294f0:	92433020 	subls	r3, r3, #32
   294f4:	e3530040 	cmp	r3, #64	; 0x40
   294f8:	c2433007 	subgt	r3, r3, #7
   294fc:	e2433030 	sub	r3, r3, #48	; 0x30
   29500:	e1520003 	cmp	r2, r3
   29504:	caffffee 	bgt	294c4 <strtoul+0x94>
   29508:	e1a0000e 	mov	r0, lr
   2950c:	e2255001 	eor	r5, r5, #1
   29510:	e3510000 	cmp	r1, #0
   29514:	e0055007 	and	r5, r5, r7
   29518:	0a000000 	beq	29520 <strtoul+0xf0>
   2951c:	e5814000 	str	r4, [r1]
   29520:	e3550000 	cmp	r5, #0
   29524:	12600000 	rsbne	r0, r0, #0
   29528:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2952c:	e3510000 	cmp	r1, #0
   29530:	13a00000 	movne	r0, #0
   29534:	1afffff8 	bne	2951c <strtoul+0xec>
   29538:	e3a00000 	mov	r0, #0
   2953c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   29540:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   29544:	e3a07000 	mov	r7, #0
   29548:	e35c0030 	cmp	ip, #48	; 0x30
   2954c:	e1a04000 	mov	r4, r0
   29550:	1affffd2 	bne	294a0 <strtoul+0x70>
   29554:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   29558:	e2840001 	add	r0, r4, #1
   2955c:	e3cc3020 	bic	r3, ip, #32
   29560:	e3530058 	cmp	r3, #88	; 0x58
   29564:	0a00000a 	beq	29594 <strtoul+0x164>
   29568:	e3520000 	cmp	r2, #0
   2956c:	e1a04000 	mov	r4, r0
   29570:	03a02008 	moveq	r2, #8
   29574:	eaffffcb 	b	294a8 <strtoul+0x78>
   29578:	e3510000 	cmp	r1, #0
   2957c:	0a00000a 	beq	295ac <strtoul+0x17c>
   29580:	e5814000 	str	r4, [r1]
   29584:	e3e00000 	mvn	r0, #0
   29588:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2958c:	e3a05001 	mov	r5, #1
   29590:	eaffffde 	b	29510 <strtoul+0xe0>
   29594:	e35e0000 	cmp	lr, #0
   29598:	1affffe6 	bne	29538 <strtoul+0x108>
   2959c:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   295a0:	e3a02010 	mov	r2, #16
   295a4:	e2844002 	add	r4, r4, #2
   295a8:	eaffffbe 	b	294a8 <strtoul+0x78>
   295ac:	e3e00000 	mvn	r0, #0
   295b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000295b4 <strtoull>:
   295b4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   295b8:	e251e000 	subs	lr, r1, #0
   295bc:	e242b002 	sub	fp, r2, #2
   295c0:	158e0000 	strne	r0, [lr]
   295c4:	e3520000 	cmp	r2, #0
   295c8:	135b0022 	cmpne	fp, #34	; 0x22
   295cc:	e3c21010 	bic	r1, r2, #16
   295d0:	83a0b001 	movhi	fp, #1
   295d4:	93a0b000 	movls	fp, #0
   295d8:	8a000041 	bhi	296e4 <strtoull+0x130>
   295dc:	e1d0a0d0 	ldrsb	sl, [r0]
   295e0:	e1a0c000 	mov	ip, r0
   295e4:	e24a3009 	sub	r3, sl, #9
   295e8:	e35a0020 	cmp	sl, #32
   295ec:	e2800001 	add	r0, r0, #1
   295f0:	e6ef3073 	uxtb	r3, r3
   295f4:	0afffff8 	beq	295dc <strtoull+0x28>
   295f8:	e3530004 	cmp	r3, #4
   295fc:	9afffff6 	bls	295dc <strtoull+0x28>
   29600:	e35a002b 	cmp	sl, #43	; 0x2b
   29604:	0a000039 	beq	296f0 <strtoull+0x13c>
   29608:	e35a002d 	cmp	sl, #45	; 0x2d
   2960c:	01dca0d1 	ldrsbeq	sl, [ip, #1]
   29610:	03a09001 	moveq	r9, #1
   29614:	01a0c000 	moveq	ip, r0
   29618:	13a09000 	movne	r9, #0
   2961c:	e35a0030 	cmp	sl, #48	; 0x30
   29620:	0a000037 	beq	29704 <strtoull+0x150>
   29624:	e3520000 	cmp	r2, #0
   29628:	03a0200a 	moveq	r2, #10
   2962c:	e35a002f 	cmp	sl, #47	; 0x2f
   29630:	e1a0300a 	mov	r3, sl
   29634:	da00004c 	ble	2976c <strtoull+0x1b8>
   29638:	e3a0b001 	mov	fp, #1
   2963c:	e3a04000 	mov	r4, #0
   29640:	e3a05000 	mov	r5, #0
   29644:	e1a06002 	mov	r6, r2
   29648:	e1a07fc2 	asr	r7, r2, #31
   2964c:	e3a08000 	mov	r8, #0
   29650:	ea00000f 	b	29694 <strtoull+0xe0>
   29654:	e00a0592 	mul	sl, r2, r5
   29658:	e0810492 	umull	r0, r1, r2, r4
   2965c:	e02aa794 	mla	sl, r4, r7, sl
   29660:	e0900003 	adds	r0, r0, r3
   29664:	e08a1001 	add	r1, sl, r1
   29668:	e0a11fc3 	adc	r1, r1, r3, asr #31
   2966c:	e1510005 	cmp	r1, r5
   29670:	01500004 	cmpeq	r0, r4
   29674:	3a00002b 	bcc	29728 <strtoull+0x174>
   29678:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2967c:	e1a0b008 	mov	fp, r8
   29680:	e353002f 	cmp	r3, #47	; 0x2f
   29684:	e1a0a003 	mov	sl, r3
   29688:	da00002c 	ble	29740 <strtoull+0x18c>
   2968c:	e1a04000 	mov	r4, r0
   29690:	e1a05001 	mov	r5, r1
   29694:	e24aa061 	sub	sl, sl, #97	; 0x61
   29698:	e35a0019 	cmp	sl, #25
   2969c:	92433020 	subls	r3, r3, #32
   296a0:	e3530040 	cmp	r3, #64	; 0x40
   296a4:	c2433007 	subgt	r3, r3, #7
   296a8:	e2433030 	sub	r3, r3, #48	; 0x30
   296ac:	e1520003 	cmp	r2, r3
   296b0:	caffffe7 	bgt	29654 <strtoull+0xa0>
   296b4:	e1a00004 	mov	r0, r4
   296b8:	e1a01005 	mov	r1, r5
   296bc:	e22bb001 	eor	fp, fp, #1
   296c0:	e35e0000 	cmp	lr, #0
   296c4:	e00bb009 	and	fp, fp, r9
   296c8:	0a000000 	beq	296d0 <strtoull+0x11c>
   296cc:	e58ec000 	str	ip, [lr]
   296d0:	e35b0000 	cmp	fp, #0
   296d4:	08bd8ff0 	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296d8:	e2700000 	rsbs	r0, r0, #0
   296dc:	e2e11000 	rsc	r1, r1, #0
   296e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296e4:	e3a00000 	mov	r0, #0
   296e8:	e3a01000 	mov	r1, #0
   296ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296f0:	e1dca0d1 	ldrsb	sl, [ip, #1]
   296f4:	e3a09000 	mov	r9, #0
   296f8:	e35a0030 	cmp	sl, #48	; 0x30
   296fc:	e1a0c000 	mov	ip, r0
   29700:	1affffc7 	bne	29624 <strtoull+0x70>
   29704:	e1dca0d1 	ldrsb	sl, [ip, #1]
   29708:	e28c0001 	add	r0, ip, #1
   2970c:	e3ca3020 	bic	r3, sl, #32
   29710:	e3530058 	cmp	r3, #88	; 0x58
   29714:	0a00000b 	beq	29748 <strtoull+0x194>
   29718:	e3520000 	cmp	r2, #0
   2971c:	e1a0c000 	mov	ip, r0
   29720:	03a02008 	moveq	r2, #8
   29724:	eaffffc0 	b	2962c <strtoull+0x78>
   29728:	e35e0000 	cmp	lr, #0
   2972c:	0a00000b 	beq	29760 <strtoull+0x1ac>
   29730:	e58ec000 	str	ip, [lr]
   29734:	e3e00000 	mvn	r0, #0
   29738:	e3a01000 	mov	r1, #0
   2973c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29740:	e3a0b001 	mov	fp, #1
   29744:	eaffffdd 	b	296c0 <strtoull+0x10c>
   29748:	e3510000 	cmp	r1, #0
   2974c:	1affffe4 	bne	296e4 <strtoull+0x130>
   29750:	e1dca0d2 	ldrsb	sl, [ip, #2]
   29754:	e3a02010 	mov	r2, #16
   29758:	e28cc002 	add	ip, ip, #2
   2975c:	eaffffb2 	b	2962c <strtoull+0x78>
   29760:	e3e00000 	mvn	r0, #0
   29764:	e3a01000 	mov	r1, #0
   29768:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2976c:	e35e0000 	cmp	lr, #0
   29770:	e3a00000 	mov	r0, #0
   29774:	e3a01000 	mov	r1, #0
   29778:	1affffd3 	bne	296cc <strtoull+0x118>
   2977c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029780 <atoi>:
   29780:	e3a0200a 	mov	r2, #10
   29784:	e3a01000 	mov	r1, #0
   29788:	eaffff28 	b	29430 <strtoul>

0002978c <char2int>:
   2978c:	e12fff1e 	bx	lr

00029790 <memcpy>:
   29790:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   29794:	e352007f 	cmp	r2, #127	; 0x7f
   29798:	9a00000b 	bls	297cc <memcpy+0x3c>
   2979c:	e3110003 	tst	r1, #3
   297a0:	1a000009 	bne	297cc <memcpy+0x3c>
   297a4:	e3100003 	tst	r0, #3
   297a8:	1a000007 	bne	297cc <memcpy+0x3c>
   297ac:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   297b0:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   297b4:	e2422020 	sub	r2, r2, #32
   297b8:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   297bc:	f5d1f040 	pld	[r1, #64]	; 0x40
   297c0:	e352001f 	cmp	r2, #31
   297c4:	8afffff9 	bhi	297b0 <memcpy+0x20>
   297c8:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   297cc:	e3520000 	cmp	r2, #0
   297d0:	0a000003 	beq	297e4 <memcpy+0x54>
   297d4:	e4d13001 	ldrb	r3, [r1], #1
   297d8:	e2522001 	subs	r2, r2, #1
   297dc:	e4c03001 	strb	r3, [r0], #1
   297e0:	1afffffb 	bne	297d4 <memcpy+0x44>
   297e4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   297e8:	e12fff1e 	bx	lr

000297ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   297ec:	e3a03000 	mov	r3, #0
   297f0:	e3510001 	cmp	r1, #1
   297f4:	91a0c002 	movls	ip, r2
   297f8:	8382c001 	orrhi	ip, r2, #1
   297fc:	e92d4070 	push	{r4, r5, r6, lr}
   29800:	e1a04000 	mov	r4, r0
   29804:	e59f0118 	ldr	r0, [pc, #280]	; 29924 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x138>
   29808:	e15c0003 	cmp	ip, r3
   2980c:	e24dd020 	sub	sp, sp, #32
   29810:	e5c42004 	strb	r2, [r4, #4]
   29814:	e5841008 	str	r1, [r4, #8]
   29818:	e5840000 	str	r0, [r4]
   2981c:	e1c431b0 	strh	r3, [r4, #16]
   29820:	e1c431b2 	strh	r3, [r4, #18]
   29824:	0a000002 	beq	29834 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x48>
   29828:	e1a00004 	mov	r0, r4
   2982c:	e28dd020 	add	sp, sp, #32
   29830:	e8bd8070 	pop	{r4, r5, r6, pc}
   29834:	e59f50ec 	ldr	r5, [pc, #236]	; 29928 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x13c>
   29838:	e5950004 	ldr	r0, [r5, #4]
   2983c:	e1500003 	cmp	r0, r3
   29840:	1a000027 	bne	298e4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf8>
   29844:	e5956000 	ldr	r6, [r5]
   29848:	e3560000 	cmp	r6, #0
   2984c:	0a00000b 	beq	29880 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x94>
   29850:	e3a02000 	mov	r2, #0
   29854:	e5943008 	ldr	r3, [r4, #8]
   29858:	e7862103 	str	r2, [r6, r3, lsl #2]
   2985c:	e5953004 	ldr	r3, [r5, #4]
   29860:	e3530000 	cmp	r3, #0
   29864:	1a000020 	bne	298ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x100>
   29868:	e1a00004 	mov	r0, r4
   2986c:	e3a01000 	mov	r1, #0
   29870:	eb000036 	bl	29950 <CVirtualGPIOPin::Write(unsigned int)>
   29874:	e1a00004 	mov	r0, r4
   29878:	e28dd020 	add	sp, sp, #32
   2987c:	e8bd8070 	pop	{r4, r5, r6, pc}
   29880:	e3a00001 	mov	r0, #1
   29884:	eb00048a 	bl	2aab4 <CMemorySystem::GetCoherentPage(unsigned int)>
   29888:	e1a01006 	mov	r1, r6
   2988c:	e5850000 	str	r0, [r5]
   29890:	e28d0008 	add	r0, sp, #8
   29894:	ebffe79a 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   29898:	e3a03004 	mov	r3, #4
   2989c:	e595c000 	ldr	ip, [r5]
   298a0:	e58d3000 	str	r3, [sp]
   298a4:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   298a8:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   298ac:	e28d0008 	add	r0, sp, #8
   298b0:	e28d2010 	add	r2, sp, #16
   298b4:	e3a03010 	mov	r3, #16
   298b8:	e59f106c 	ldr	r1, [pc, #108]	; 2992c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x140>
   298bc:	e58dc01c 	str	ip, [sp, #28]
   298c0:	ebffe79b 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   298c4:	e3500000 	cmp	r0, #0
   298c8:	0a000009 	beq	298f4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x108>
   298cc:	e28d0008 	add	r0, sp, #8
   298d0:	ebffe792 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   298d4:	e5956000 	ldr	r6, [r5]
   298d8:	e3560000 	cmp	r6, #0
   298dc:	0affffde 	beq	2985c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x70>
   298e0:	eaffffda 	b	29850 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x64>
   298e4:	eb0004b4 	bl	2abbc <EnterCritical>
   298e8:	eaffffd5 	b	29844 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x58>
   298ec:	eb0004dd 	bl	2ac68 <LeaveCritical>
   298f0:	eaffffdc 	b	29868 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x7c>
   298f4:	e3a03010 	mov	r3, #16
   298f8:	e58d0000 	str	r0, [sp]
   298fc:	e28d2010 	add	r2, sp, #16
   29900:	e59f1028 	ldr	r1, [pc, #40]	; 29930 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x144>
   29904:	e28d0008 	add	r0, sp, #8
   29908:	ebffe789 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2990c:	e3500000 	cmp	r0, #0
   29910:	159d301c 	ldrne	r3, [sp, #28]
   29914:	05850000 	streq	r0, [r5]
   29918:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   2991c:	15853000 	strne	r3, [r5]
   29920:	eaffffe9 	b	298cc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xe0>
   29924:	0003ade4 	.word	0x0003ade4
   29928:	0003e3ac 	.word	0x0003e3ac
   2992c:	00048020 	.word	0x00048020
   29930:	00040010 	.word	0x00040010

00029934 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   29934:	e12fff1e 	bx	lr

00029938 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   29938:	e92d4010 	push	{r4, lr}
   2993c:	e1a04000 	mov	r4, r0
   29940:	e3a01014 	mov	r1, #20
   29944:	eb000178 	bl	29f2c <operator delete(void*, unsigned int)>
   29948:	e1a00004 	mov	r0, r4
   2994c:	e8bd8010 	pop	{r4, pc}

00029950 <CVirtualGPIOPin::Write(unsigned int)>:
   29950:	e92d4070 	push	{r4, r5, r6, lr}
   29954:	e5d03004 	ldrb	r3, [r0, #4]
   29958:	e24dd028 	sub	sp, sp, #40	; 0x28
   2995c:	e3530000 	cmp	r3, #0
   29960:	e1a04000 	mov	r4, r0
   29964:	e1a05001 	mov	r5, r1
   29968:	0a000012 	beq	299b8 <CVirtualGPIOPin::Write(unsigned int)+0x68>
   2996c:	e5901008 	ldr	r1, [r0, #8]
   29970:	e3510000 	cmp	r1, #0
   29974:	1a000033 	bne	29a48 <CVirtualGPIOPin::Write(unsigned int)+0xf8>
   29978:	e28d000c 	add	r0, sp, #12
   2997c:	ebffe760 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   29980:	e3a03008 	mov	r3, #8
   29984:	e58d3000 	str	r3, [sp]
   29988:	e3a03014 	mov	r3, #20
   2998c:	e3a0c082 	mov	ip, #130	; 0x82
   29990:	e28d000c 	add	r0, sp, #12
   29994:	e08d2003 	add	r2, sp, r3
   29998:	e59f10d8 	ldr	r1, [pc, #216]	; 29a78 <CVirtualGPIOPin::Write(unsigned int)+0x128>
   2999c:	e58d5024 	str	r5, [sp, #36]	; 0x24
   299a0:	e58dc020 	str	ip, [sp, #32]
   299a4:	ebffe762 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   299a8:	e28d000c 	add	r0, sp, #12
   299ac:	ebffe75b 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   299b0:	e28dd028 	add	sp, sp, #40	; 0x28
   299b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   299b8:	e5903008 	ldr	r3, [r0, #8]
   299bc:	e3530001 	cmp	r3, #1
   299c0:	8afffffa 	bhi	299b0 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   299c4:	e3510001 	cmp	r1, #1
   299c8:	93a03000 	movls	r3, #0
   299cc:	83a03001 	movhi	r3, #1
   299d0:	e59f60a4 	ldr	r6, [pc, #164]	; 29a7c <CVirtualGPIOPin::Write(unsigned int)+0x12c>
   299d4:	e5962000 	ldr	r2, [r6]
   299d8:	e3520000 	cmp	r2, #0
   299dc:	03833001 	orreq	r3, r3, #1
   299e0:	e3530000 	cmp	r3, #0
   299e4:	1afffff1 	bne	299b0 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   299e8:	e5960004 	ldr	r0, [r6, #4]
   299ec:	e3500000 	cmp	r0, #0
   299f0:	1a000018 	bne	29a58 <CVirtualGPIOPin::Write(unsigned int)+0x108>
   299f4:	e1d411b0 	ldrh	r1, [r4, #16]
   299f8:	e1d431b2 	ldrh	r3, [r4, #18]
   299fc:	e584500c 	str	r5, [r4, #12]
   29a00:	e0412003 	sub	r2, r1, r3
   29a04:	e6bf2072 	sxth	r2, r2
   29a08:	e3520000 	cmp	r2, #0
   29a0c:	da000013 	ble	29a60 <CVirtualGPIOPin::Write(unsigned int)+0x110>
   29a10:	e3550000 	cmp	r5, #0
   29a14:	1a000006 	bne	29a34 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   29a18:	e2833001 	add	r3, r3, #1
   29a1c:	e6ff3073 	uxth	r3, r3
   29a20:	e1c431b2 	strh	r3, [r4, #18]
   29a24:	e5940008 	ldr	r0, [r4, #8]
   29a28:	e5962000 	ldr	r2, [r6]
   29a2c:	e1833801 	orr	r3, r3, r1, lsl #16
   29a30:	e7823100 	str	r3, [r2, r0, lsl #2]
   29a34:	e5963004 	ldr	r3, [r6, #4]
   29a38:	e3530000 	cmp	r3, #0
   29a3c:	0affffdb 	beq	299b0 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   29a40:	eb000488 	bl	2ac68 <LeaveCritical>
   29a44:	eaffffd9 	b	299b0 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   29a48:	e59f1030 	ldr	r1, [pc, #48]	; 29a80 <CVirtualGPIOPin::Write(unsigned int)+0x130>
   29a4c:	e3a0205b 	mov	r2, #91	; 0x5b
   29a50:	e2810014 	add	r0, r1, #20
   29a54:	ebffe709 	bl	23680 <assertion_failed>
   29a58:	eb000457 	bl	2abbc <EnterCritical>
   29a5c:	eaffffe4 	b	299f4 <CVirtualGPIOPin::Write(unsigned int)+0xa4>
   29a60:	e3550000 	cmp	r5, #0
   29a64:	0afffff2 	beq	29a34 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   29a68:	e2811001 	add	r1, r1, #1
   29a6c:	e6ff1071 	uxth	r1, r1
   29a70:	e1c411b0 	strh	r1, [r4, #16]
   29a74:	eaffffea 	b	29a24 <CVirtualGPIOPin::Write(unsigned int)+0xd4>
   29a78:	00038041 	.word	0x00038041
   29a7c:	0003e3ac 	.word	0x0003e3ac
   29a80:	0003adec 	.word	0x0003adec

00029a84 <CVirtualGPIOPin::Invert()>:
   29a84:	e590100c 	ldr	r1, [r0, #12]
   29a88:	e2211001 	eor	r1, r1, #1
   29a8c:	eaffffaf 	b	29950 <CVirtualGPIOPin::Write(unsigned int)>

00029a90 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   29a90:	e3a02000 	mov	r2, #0
   29a94:	e59f3004 	ldr	r3, [pc, #4]	; 29aa0 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   29a98:	e5832004 	str	r2, [r3, #4]
   29a9c:	e12fff1e 	bx	lr
   29aa0:	0003e3ac 	.word	0x0003e3ac

00029aa4 <ChainBootStub(void const*, unsigned int)>:
   29aa4:	e2811003 	add	r1, r1, #3
   29aa8:	e1b01121 	lsrs	r1, r1, #2
   29aac:	11a03000 	movne	r3, r0
   29ab0:	159f2030 	ldrne	r2, [pc, #48]	; 29ae8 <ChainBootStub(void const*, unsigned int)+0x44>
   29ab4:	10800101 	addne	r0, r0, r1, lsl #2
   29ab8:	0a000003 	beq	29acc <ChainBootStub(void const*, unsigned int)+0x28>
   29abc:	e4931004 	ldr	r1, [r3], #4
   29ac0:	e1500003 	cmp	r0, r3
   29ac4:	e5a21004 	str	r1, [r2, #4]!
   29ac8:	1afffffb 	bne	29abc <ChainBootStub(void const*, unsigned int)+0x18>
   29acc:	e3a03000 	mov	r3, #0
   29ad0:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   29ad4:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   29ad8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29adc:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   29ae0:	e3a03902 	mov	r3, #32768	; 0x8000
   29ae4:	e12fff13 	bx	r3
   29ae8:	00007ffc 	.word	0x00007ffc

00029aec <EnableChainBoot>:
   29aec:	e59f302c 	ldr	r3, [pc, #44]	; 29b20 <EnableChainBoot+0x34>
   29af0:	e92d4010 	push	{r4, lr}
   29af4:	e3a02b01 	mov	r2, #1024	; 0x400
   29af8:	e8830003 	stm	r3, {r0, r1}
   29afc:	e59f1020 	ldr	r1, [pc, #32]	; 29b24 <EnableChainBoot+0x38>
   29b00:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   29b04:	ebffff21 	bl	29790 <memcpy>
   29b08:	e3a03000 	mov	r3, #0
   29b0c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   29b10:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   29b14:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29b18:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   29b1c:	e8bd8010 	pop	{r4, pc}
   29b20:	0003e3b4 	.word	0x0003e3b4
   29b24:	00029aa4 	.word	0x00029aa4

00029b28 <IsChainBootEnabled>:
   29b28:	e59f300c 	ldr	r3, [pc, #12]	; 29b3c <IsChainBootEnabled+0x14>
   29b2c:	e5930000 	ldr	r0, [r3]
   29b30:	e2900000 	adds	r0, r0, #0
   29b34:	13a00001 	movne	r0, #1
   29b38:	e12fff1e 	bx	lr
   29b3c:	0003e3b4 	.word	0x0003e3b4

00029b40 <DoChainBoot>:
   29b40:	e59f3008 	ldr	r3, [pc, #8]	; 29b50 <DoChainBoot+0x10>
   29b44:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   29b48:	e8930003 	ldm	r3, {r0, r1}
   29b4c:	e12fff12 	bx	r2
   29b50:	0003e3b4 	.word	0x0003e3b4

00029b54 <CMACAddress::CMACAddress()>:
   29b54:	e3a02000 	mov	r2, #0
   29b58:	e5c02000 	strb	r2, [r0]
   29b5c:	e12fff1e 	bx	lr

00029b60 <CMACAddress::~CMACAddress()>:
   29b60:	e12fff1e 	bx	lr

00029b64 <CMACAddress::operator==(CMACAddress const&) const>:
   29b64:	e5d03000 	ldrb	r3, [r0]
   29b68:	e92d4010 	push	{r4, lr}
   29b6c:	e3530000 	cmp	r3, #0
   29b70:	0a000009 	beq	29b9c <CMACAddress::operator==(CMACAddress const&) const+0x38>
   29b74:	e5d13000 	ldrb	r3, [r1]
   29b78:	e2800001 	add	r0, r0, #1
   29b7c:	e3530000 	cmp	r3, #0
   29b80:	0a000009 	beq	29bac <CMACAddress::operator==(CMACAddress const&) const+0x48>
   29b84:	e2811001 	add	r1, r1, #1
   29b88:	e3a02006 	mov	r2, #6
   29b8c:	ebfffcc3 	bl	28ea0 <memcmp>
   29b90:	e16f0f10 	clz	r0, r0
   29b94:	e1a002a0 	lsr	r0, r0, #5
   29b98:	e8bd8010 	pop	{r4, pc}
   29b9c:	e3a02029 	mov	r2, #41	; 0x29
   29ba0:	e59f1014 	ldr	r1, [pc, #20]	; 29bbc <CMACAddress::operator==(CMACAddress const&) const+0x58>
   29ba4:	e59f0014 	ldr	r0, [pc, #20]	; 29bc0 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   29ba8:	ebffe6b4 	bl	23680 <assertion_failed>
   29bac:	e3a02041 	mov	r2, #65	; 0x41
   29bb0:	e59f1004 	ldr	r1, [pc, #4]	; 29bbc <CMACAddress::operator==(CMACAddress const&) const+0x58>
   29bb4:	e59f0004 	ldr	r0, [pc, #4]	; 29bc0 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   29bb8:	ebffe6b0 	bl	23680 <assertion_failed>
   29bbc:	0003ae0c 	.word	0x0003ae0c
   29bc0:	00034e1c 	.word	0x00034e1c

00029bc4 <CMACAddress::operator!=(CMACAddress const&) const>:
   29bc4:	e92d4010 	push	{r4, lr}
   29bc8:	ebffffe5 	bl	29b64 <CMACAddress::operator==(CMACAddress const&) const>
   29bcc:	e2200001 	eor	r0, r0, #1
   29bd0:	e6ef0070 	uxtb	r0, r0
   29bd4:	e8bd8010 	pop	{r4, pc}

00029bd8 <CMACAddress::Set(unsigned char const*)>:
   29bd8:	e3510000 	cmp	r1, #0
   29bdc:	e92d4010 	push	{r4, lr}
   29be0:	0a000006 	beq	29c00 <CMACAddress::Set(unsigned char const*)+0x28>
   29be4:	e1a04000 	mov	r4, r0
   29be8:	e3a02006 	mov	r2, #6
   29bec:	e2800001 	add	r0, r0, #1
   29bf0:	ebfffee6 	bl	29790 <memcpy>
   29bf4:	e3a03001 	mov	r3, #1
   29bf8:	e5c43000 	strb	r3, [r4]
   29bfc:	e8bd8010 	pop	{r4, pc}
   29c00:	e3a02034 	mov	r2, #52	; 0x34
   29c04:	e59f1004 	ldr	r1, [pc, #4]	; 29c10 <CMACAddress::Set(unsigned char const*)+0x38>
   29c08:	e59f0004 	ldr	r0, [pc, #4]	; 29c14 <CMACAddress::Set(unsigned char const*)+0x3c>
   29c0c:	ebffe69b 	bl	23680 <assertion_failed>
   29c10:	0003ae0c 	.word	0x0003ae0c
   29c14:	00039a60 	.word	0x00039a60

00029c18 <CMACAddress::CMACAddress(unsigned char const*)>:
   29c18:	e92d4010 	push	{r4, lr}
   29c1c:	e1a04000 	mov	r4, r0
   29c20:	ebffffec 	bl	29bd8 <CMACAddress::Set(unsigned char const*)>
   29c24:	e1a00004 	mov	r0, r4
   29c28:	e8bd8010 	pop	{r4, pc}

00029c2c <CMACAddress::SetBroadcast()>:
   29c2c:	e92d4010 	push	{r4, lr}
   29c30:	e3a02006 	mov	r2, #6
   29c34:	e1a04000 	mov	r4, r0
   29c38:	e3a010ff 	mov	r1, #255	; 0xff
   29c3c:	e2800001 	add	r0, r0, #1
   29c40:	ebfffc5b 	bl	28db4 <memset>
   29c44:	e3a03001 	mov	r3, #1
   29c48:	e5c43000 	strb	r3, [r4]
   29c4c:	e8bd8010 	pop	{r4, pc}

00029c50 <CMACAddress::Get() const>:
   29c50:	e5d03000 	ldrb	r3, [r0]
   29c54:	e3530000 	cmp	r3, #0
   29c58:	0a000001 	beq	29c64 <CMACAddress::Get() const+0x14>
   29c5c:	e2800001 	add	r0, r0, #1
   29c60:	e12fff1e 	bx	lr
   29c64:	e92d4010 	push	{r4, lr}
   29c68:	e3a02041 	mov	r2, #65	; 0x41
   29c6c:	e59f1004 	ldr	r1, [pc, #4]	; 29c78 <CMACAddress::Get() const+0x28>
   29c70:	e59f0004 	ldr	r0, [pc, #4]	; 29c7c <CMACAddress::Get() const+0x2c>
   29c74:	ebffe681 	bl	23680 <assertion_failed>
   29c78:	0003ae0c 	.word	0x0003ae0c
   29c7c:	00034e1c 	.word	0x00034e1c

00029c80 <CMACAddress::CopyTo(unsigned char*) const>:
   29c80:	e5d02000 	ldrb	r2, [r0]
   29c84:	e92d4010 	push	{r4, lr}
   29c88:	e3520000 	cmp	r2, #0
   29c8c:	0a000007 	beq	29cb0 <CMACAddress::CopyTo(unsigned char*) const+0x30>
   29c90:	e3510000 	cmp	r1, #0
   29c94:	e1a03001 	mov	r3, r1
   29c98:	0a000008 	beq	29cc0 <CMACAddress::CopyTo(unsigned char*) const+0x40>
   29c9c:	e8bd4010 	pop	{r4, lr}
   29ca0:	e2801001 	add	r1, r0, #1
   29ca4:	e3a02006 	mov	r2, #6
   29ca8:	e1a00003 	mov	r0, r3
   29cac:	eafffeb7 	b	29790 <memcpy>
   29cb0:	e3a02047 	mov	r2, #71	; 0x47
   29cb4:	e59f1014 	ldr	r1, [pc, #20]	; 29cd0 <CMACAddress::CopyTo(unsigned char*) const+0x50>
   29cb8:	e59f0014 	ldr	r0, [pc, #20]	; 29cd4 <CMACAddress::CopyTo(unsigned char*) const+0x54>
   29cbc:	ebffe66f 	bl	23680 <assertion_failed>
   29cc0:	e3a02048 	mov	r2, #72	; 0x48
   29cc4:	e59f1004 	ldr	r1, [pc, #4]	; 29cd0 <CMACAddress::CopyTo(unsigned char*) const+0x50>
   29cc8:	e59f0008 	ldr	r0, [pc, #8]	; 29cd8 <CMACAddress::CopyTo(unsigned char*) const+0x58>
   29ccc:	ebffe66b 	bl	23680 <assertion_failed>
   29cd0:	0003ae0c 	.word	0x0003ae0c
   29cd4:	00034e1c 	.word	0x00034e1c
   29cd8:	00036138 	.word	0x00036138

00029cdc <CMACAddress::IsBroadcast() const>:
   29cdc:	e5d0c000 	ldrb	ip, [r0]
   29ce0:	e35c0000 	cmp	ip, #0
   29ce4:	12803001 	addne	r3, r0, #1
   29ce8:	12802007 	addne	r2, r0, #7
   29cec:	0a000009 	beq	29d18 <CMACAddress::IsBroadcast() const+0x3c>
   29cf0:	e4d31001 	ldrb	r1, [r3], #1
   29cf4:	e35100ff 	cmp	r1, #255	; 0xff
   29cf8:	1a000003 	bne	29d0c <CMACAddress::IsBroadcast() const+0x30>
   29cfc:	e1530002 	cmp	r3, r2
   29d00:	1afffffa 	bne	29cf0 <CMACAddress::IsBroadcast() const+0x14>
   29d04:	e1a0000c 	mov	r0, ip
   29d08:	e12fff1e 	bx	lr
   29d0c:	e3a0c000 	mov	ip, #0
   29d10:	e1a0000c 	mov	r0, ip
   29d14:	e12fff1e 	bx	lr
   29d18:	e92d4010 	push	{r4, lr}
   29d1c:	e3a0204e 	mov	r2, #78	; 0x4e
   29d20:	e59f1004 	ldr	r1, [pc, #4]	; 29d2c <CMACAddress::IsBroadcast() const+0x50>
   29d24:	e59f0004 	ldr	r0, [pc, #4]	; 29d30 <CMACAddress::IsBroadcast() const+0x54>
   29d28:	ebffe654 	bl	23680 <assertion_failed>
   29d2c:	0003ae0c 	.word	0x0003ae0c
   29d30:	00034e1c 	.word	0x00034e1c

00029d34 <CMACAddress::GetSize() const>:
   29d34:	e3a00006 	mov	r0, #6
   29d38:	e12fff1e 	bx	lr

00029d3c <CMACAddress::Format(CString*) const>:
   29d3c:	e92d4030 	push	{r4, r5, lr}
   29d40:	e5d03000 	ldrb	r3, [r0]
   29d44:	e24dd014 	sub	sp, sp, #20
   29d48:	e3530000 	cmp	r3, #0
   29d4c:	0a00000f 	beq	29d90 <CMACAddress::Format(CString*) const+0x54>
   29d50:	e3510000 	cmp	r1, #0
   29d54:	0a000011 	beq	29da0 <CMACAddress::Format(CString*) const+0x64>
   29d58:	e5d05006 	ldrb	r5, [r0, #6]
   29d5c:	e5d04005 	ldrb	r4, [r0, #5]
   29d60:	e5d0e004 	ldrb	lr, [r0, #4]
   29d64:	e5d0c003 	ldrb	ip, [r0, #3]
   29d68:	e5d03002 	ldrb	r3, [r0, #2]
   29d6c:	e5d02001 	ldrb	r2, [r0, #1]
   29d70:	e1a00001 	mov	r0, r1
   29d74:	e58d500c 	str	r5, [sp, #12]
   29d78:	e58d4008 	str	r4, [sp, #8]
   29d7c:	e88d5000 	stm	sp, {ip, lr}
   29d80:	e59f1028 	ldr	r1, [pc, #40]	; 29db0 <CMACAddress::Format(CString*) const+0x74>
   29d84:	ebfff859 	bl	27ef0 <CString::Format(char const*, ...)>
   29d88:	e28dd014 	add	sp, sp, #20
   29d8c:	e8bd8030 	pop	{r4, r5, pc}
   29d90:	e3a02062 	mov	r2, #98	; 0x62
   29d94:	e59f1018 	ldr	r1, [pc, #24]	; 29db4 <CMACAddress::Format(CString*) const+0x78>
   29d98:	e59f0018 	ldr	r0, [pc, #24]	; 29db8 <CMACAddress::Format(CString*) const+0x7c>
   29d9c:	ebffe637 	bl	23680 <assertion_failed>
   29da0:	e3a02063 	mov	r2, #99	; 0x63
   29da4:	e59f1008 	ldr	r1, [pc, #8]	; 29db4 <CMACAddress::Format(CString*) const+0x78>
   29da8:	e59f000c 	ldr	r0, [pc, #12]	; 29dbc <CMACAddress::Format(CString*) const+0x80>
   29dac:	ebffe633 	bl	23680 <assertion_failed>
   29db0:	0003ae1c 	.word	0x0003ae1c
   29db4:	0003ae0c 	.word	0x0003ae0c
   29db8:	00034e1c 	.word	0x00034e1c
   29dbc:	00039a70 	.word	0x00039a70

00029dc0 <CNetDevice::AddNetDevice()>:
   29dc0:	e59f2018 	ldr	r2, [pc, #24]	; 29de0 <CNetDevice::AddNetDevice()+0x20>
   29dc4:	e5923000 	ldr	r3, [r2]
   29dc8:	e3530004 	cmp	r3, #4
   29dcc:	92831001 	addls	r1, r3, #1
   29dd0:	90823103 	addls	r3, r2, r3, lsl #2
   29dd4:	95821000 	strls	r1, [r2]
   29dd8:	95830004 	strls	r0, [r3, #4]
   29ddc:	e12fff1e 	bx	lr
   29de0:	0003e3bc 	.word	0x0003e3bc

00029de4 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   29de4:	e3500005 	cmp	r0, #5
   29de8:	d59f3008 	ldrle	r3, [pc, #8]	; 29df8 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x14>
   29dec:	d7930100 	ldrle	r0, [r3, r0, lsl #2]
   29df0:	c59f0004 	ldrgt	r0, [pc, #4]	; 29dfc <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x18>
   29df4:	e12fff1e 	bx	lr
   29df8:	0003e260 	.word	0x0003e260
   29dfc:	0003ae3c 	.word	0x0003ae3c

00029e00 <CNetDevice::GetNetDevice(unsigned int)>:
   29e00:	e59f3014 	ldr	r3, [pc, #20]	; 29e1c <CNetDevice::GetNetDevice(unsigned int)+0x1c>
   29e04:	e5932000 	ldr	r2, [r3]
   29e08:	e1520000 	cmp	r2, r0
   29e0c:	80833100 	addhi	r3, r3, r0, lsl #2
   29e10:	85930004 	ldrhi	r0, [r3, #4]
   29e14:	93a00000 	movls	r0, #0
   29e18:	e12fff1e 	bx	lr
   29e1c:	0003e3bc 	.word	0x0003e3bc

00029e20 <CNetDevice::GetNetDevice(TNetDeviceType)>:
   29e20:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29e24:	e59f608c 	ldr	r6, [pc, #140]	; 29eb8 <CNetDevice::GetNetDevice(TNetDeviceType)+0x98>
   29e28:	e5963000 	ldr	r3, [r6]
   29e2c:	e3530000 	cmp	r3, #0
   29e30:	0a00001a 	beq	29ea0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   29e34:	e5965004 	ldr	r5, [r6, #4]
   29e38:	e3550000 	cmp	r5, #0
   29e3c:	0a000017 	beq	29ea0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   29e40:	e3500002 	cmp	r0, #2
   29e44:	0a000013 	beq	29e98 <CNetDevice::GetNetDevice(TNetDeviceType)+0x78>
   29e48:	e3a04000 	mov	r4, #0
   29e4c:	e1a08000 	mov	r8, r0
   29e50:	e59f9064 	ldr	r9, [pc, #100]	; 29ebc <CNetDevice::GetNetDevice(TNetDeviceType)+0x9c>
   29e54:	e1a0a004 	mov	sl, r4
   29e58:	e2867004 	add	r7, r6, #4
   29e5c:	ea000005 	b	29e78 <CNetDevice::GetNetDevice(TNetDeviceType)+0x58>
   29e60:	e5963000 	ldr	r3, [r6]
   29e64:	e1530004 	cmp	r3, r4
   29e68:	9a00000c 	bls	29ea0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   29e6c:	e7975104 	ldr	r5, [r7, r4, lsl #2]
   29e70:	e3550000 	cmp	r5, #0
   29e74:	0a000009 	beq	29ea0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   29e78:	e5953000 	ldr	r3, [r5]
   29e7c:	e5933008 	ldr	r3, [r3, #8]
   29e80:	e1530009 	cmp	r3, r9
   29e84:	01a0000a 	moveq	r0, sl
   29e88:	1a000007 	bne	29eac <CNetDevice::GetNetDevice(TNetDeviceType)+0x8c>
   29e8c:	e1580000 	cmp	r8, r0
   29e90:	e2844001 	add	r4, r4, #1
   29e94:	1afffff1 	bne	29e60 <CNetDevice::GetNetDevice(TNetDeviceType)+0x40>
   29e98:	e1a00005 	mov	r0, r5
   29e9c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29ea0:	e3a05000 	mov	r5, #0
   29ea4:	e1a00005 	mov	r0, r5
   29ea8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29eac:	e1a00005 	mov	r0, r5
   29eb0:	e12fff33 	blx	r3
   29eb4:	eafffff4 	b	29e8c <CNetDevice::GetNetDevice(TNetDeviceType)+0x6c>
   29eb8:	0003e3bc 	.word	0x0003e3bc
   29ebc:	00015014 	.word	0x00015014

00029ec0 <operator new(unsigned int, int)>:
   29ec0:	eaffffff 	b	29ec4 <operator new[](unsigned int, int)>

00029ec4 <operator new[](unsigned int, int)>:
   29ec4:	e3510000 	cmp	r1, #0
   29ec8:	0a000001 	beq	29ed4 <operator new[](unsigned int, int)+0x10>
   29ecc:	e3510002 	cmp	r1, #2
   29ed0:	1a000004 	bne	29ee8 <operator new[](unsigned int, int)+0x24>
   29ed4:	e59f3014 	ldr	r3, [pc, #20]	; 29ef0 <operator new[](unsigned int, int)+0x2c>
   29ed8:	e1a01000 	mov	r1, r0
   29edc:	e5930000 	ldr	r0, [r3]
   29ee0:	e280000c 	add	r0, r0, #12
   29ee4:	ea000036 	b	29fc4 <CHeapAllocator::Allocate(unsigned int)>
   29ee8:	e3a00000 	mov	r0, #0
   29eec:	e12fff1e 	bx	lr
   29ef0:	0003e3d8 	.word	0x0003e3d8

00029ef4 <operator new(unsigned int)>:
   29ef4:	eaffffff 	b	29ef8 <operator new[](unsigned int)>

00029ef8 <operator new[](unsigned int)>:
   29ef8:	e59f300c 	ldr	r3, [pc, #12]	; 29f0c <operator new[](unsigned int)+0x14>
   29efc:	e1a01000 	mov	r1, r0
   29f00:	e5930000 	ldr	r0, [r3]
   29f04:	e280000c 	add	r0, r0, #12
   29f08:	ea00002d 	b	29fc4 <CHeapAllocator::Allocate(unsigned int)>
   29f0c:	0003e3d8 	.word	0x0003e3d8

00029f10 <operator delete(void*)>:
   29f10:	eaffffff 	b	29f14 <operator delete[](void*)>

00029f14 <operator delete[](void*)>:
   29f14:	e59f300c 	ldr	r3, [pc, #12]	; 29f28 <operator delete[](void*)+0x14>
   29f18:	e1a01000 	mov	r1, r0
   29f1c:	e5930000 	ldr	r0, [r3]
   29f20:	e280000c 	add	r0, r0, #12
   29f24:	ea0000a4 	b	2a1bc <CHeapAllocator::Free(void*)>
   29f28:	0003e3d8 	.word	0x0003e3d8

00029f2c <operator delete(void*, unsigned int)>:
   29f2c:	eaffffff 	b	29f30 <operator delete[](void*, unsigned int)>

00029f30 <operator delete[](void*, unsigned int)>:
   29f30:	e59f300c 	ldr	r3, [pc, #12]	; 29f44 <operator delete[](void*, unsigned int)+0x14>
   29f34:	e1a01000 	mov	r1, r0
   29f38:	e5930000 	ldr	r0, [r3]
   29f3c:	e280000c 	add	r0, r0, #12
   29f40:	ea00009d 	b	2a1bc <CHeapAllocator::Free(void*)>
   29f44:	0003e3d8 	.word	0x0003e3d8

00029f48 <CHeapAllocator::CHeapAllocator(char const*)>:
   29f48:	e3a03000 	mov	r3, #0
   29f4c:	e3a02001 	mov	r2, #1
   29f50:	e92d4010 	push	{r4, lr}
   29f54:	e1a04000 	mov	r4, r0
   29f58:	e5801000 	str	r1, [r0]
   29f5c:	e58020b8 	str	r2, [r0, #184]	; 0xb8
   29f60:	e5803004 	str	r3, [r0, #4]
   29f64:	e5803008 	str	r3, [r0, #8]
   29f68:	e580300c 	str	r3, [r0, #12]
   29f6c:	e1a01003 	mov	r1, r3
   29f70:	e3a020a8 	mov	r2, #168	; 0xa8
   29f74:	e2800010 	add	r0, r0, #16
   29f78:	ebfffb8d 	bl	28db4 <memset>
   29f7c:	e1a03004 	mov	r3, r4
   29f80:	e59f201c 	ldr	r2, [pc, #28]	; 29fa4 <CHeapAllocator::CHeapAllocator(char const*)+0x5c>
   29f84:	e2840038 	add	r0, r4, #56	; 0x38
   29f88:	e4921004 	ldr	r1, [r2], #4
   29f8c:	e2833008 	add	r3, r3, #8
   29f90:	e5831008 	str	r1, [r3, #8]
   29f94:	e1530000 	cmp	r3, r0
   29f98:	1afffffa 	bne	29f88 <CHeapAllocator::CHeapAllocator(char const*)+0x40>
   29f9c:	e1a00004 	mov	r0, r4
   29fa0:	e8bd8010 	pop	{r4, pc}
   29fa4:	0003e278 	.word	0x0003e278

00029fa8 <CHeapAllocator::~CHeapAllocator()>:
   29fa8:	e12fff1e 	bx	lr

00029fac <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   29fac:	e0812002 	add	r2, r1, r2
   29fb0:	e980000e 	stmib	r0, {r1, r2, r3}
   29fb4:	e12fff1e 	bx	lr

00029fb8 <CHeapAllocator::GetFreeSpace() const>:
   29fb8:	e9900005 	ldmib	r0, {r0, r2}
   29fbc:	e0420000 	sub	r0, r2, r0
   29fc0:	e12fff1e 	bx	lr

00029fc4 <CHeapAllocator::Allocate(unsigned int)>:
   29fc4:	e5903004 	ldr	r3, [r0, #4]
   29fc8:	e3530000 	cmp	r3, #0
   29fcc:	0a000073 	beq	2a1a0 <CHeapAllocator::Allocate(unsigned int)+0x1dc>
   29fd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29fd4:	e1a06000 	mov	r6, r0
   29fd8:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   29fdc:	e1a04001 	mov	r4, r1
   29fe0:	e3500000 	cmp	r0, #0
   29fe4:	1a000042 	bne	2a0f4 <CHeapAllocator::Allocate(unsigned int)+0x130>
   29fe8:	e5963010 	ldr	r3, [r6, #16]
   29fec:	e2862010 	add	r2, r6, #16
   29ff0:	e3530000 	cmp	r3, #0
   29ff4:	0a000007 	beq	2a018 <CHeapAllocator::Allocate(unsigned int)+0x54>
   29ff8:	e1540003 	cmp	r4, r3
   29ffc:	8a000002 	bhi	2a00c <CHeapAllocator::Allocate(unsigned int)+0x48>
   2a000:	ea000016 	b	2a060 <CHeapAllocator::Allocate(unsigned int)+0x9c>
   2a004:	e1530004 	cmp	r3, r4
   2a008:	2a000014 	bcs	2a060 <CHeapAllocator::Allocate(unsigned int)+0x9c>
   2a00c:	e5b23008 	ldr	r3, [r2, #8]!
   2a010:	e3530000 	cmp	r3, #0
   2a014:	1afffffa 	bne	2a004 <CHeapAllocator::Allocate(unsigned int)+0x40>
   2a018:	e5965004 	ldr	r5, [r6, #4]
   2a01c:	e284301f 	add	r3, r4, #31
   2a020:	e3c3300f 	bic	r3, r3, #15
   2a024:	e0853003 	add	r3, r5, r3
   2a028:	e1550003 	cmp	r5, r3
   2a02c:	e596700c 	ldr	r7, [r6, #12]
   2a030:	2a000003 	bcs	2a044 <CHeapAllocator::Allocate(unsigned int)+0x80>
   2a034:	e5962008 	ldr	r2, [r6, #8]
   2a038:	e0422007 	sub	r2, r2, r7
   2a03c:	e1530002 	cmp	r3, r2
   2a040:	9a00002d 	bls	2a0fc <CHeapAllocator::Allocate(unsigned int)+0x138>
   2a044:	e3570000 	cmp	r7, #0
   2a048:	1a000047 	bne	2a16c <CHeapAllocator::Allocate(unsigned int)+0x1a8>
   2a04c:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2a050:	e3530000 	cmp	r3, #0
   2a054:	1a00003d 	bne	2a150 <CHeapAllocator::Allocate(unsigned int)+0x18c>
   2a058:	e3a00000 	mov	r0, #0
   2a05c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2a060:	e5925004 	ldr	r5, [r2, #4]
   2a064:	e3550000 	cmp	r5, #0
   2a068:	01a04003 	moveq	r4, r3
   2a06c:	0affffe9 	beq	2a018 <CHeapAllocator::Allocate(unsigned int)+0x54>
   2a070:	e5d50001 	ldrb	r0, [r5, #1]
   2a074:	e5d53000 	ldrb	r3, [r5]
   2a078:	e5d51002 	ldrb	r1, [r5, #2]
   2a07c:	e1833400 	orr	r3, r3, r0, lsl #8
   2a080:	e5d50003 	ldrb	r0, [r5, #3]
   2a084:	e1833801 	orr	r3, r3, r1, lsl #16
   2a088:	e59f1118 	ldr	r1, [pc, #280]	; 2a1a8 <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   2a08c:	e1833c00 	orr	r3, r3, r0, lsl #24
   2a090:	e1530001 	cmp	r3, r1
   2a094:	1a000030 	bne	2a15c <CHeapAllocator::Allocate(unsigned int)+0x198>
   2a098:	e5d51009 	ldrb	r1, [r5, #9]
   2a09c:	e5d53008 	ldrb	r3, [r5, #8]
   2a0a0:	e5d5000a 	ldrb	r0, [r5, #10]
   2a0a4:	e1833401 	orr	r3, r3, r1, lsl #8
   2a0a8:	e5d5100b 	ldrb	r1, [r5, #11]
   2a0ac:	e1833800 	orr	r3, r3, r0, lsl #16
   2a0b0:	e1833c01 	orr	r3, r3, r1, lsl #24
   2a0b4:	e5823004 	str	r3, [r2, #4]
   2a0b8:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2a0bc:	e3530000 	cmp	r3, #0
   2a0c0:	1a000020 	bne	2a148 <CHeapAllocator::Allocate(unsigned int)+0x184>
   2a0c4:	e3a03000 	mov	r3, #0
   2a0c8:	e2850010 	add	r0, r5, #16
   2a0cc:	e310000f 	tst	r0, #15
   2a0d0:	e5c53008 	strb	r3, [r5, #8]
   2a0d4:	e5c53009 	strb	r3, [r5, #9]
   2a0d8:	e5c5300a 	strb	r3, [r5, #10]
   2a0dc:	e5c5300b 	strb	r3, [r5, #11]
   2a0e0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2a0e4:	e3a0208e 	mov	r2, #142	; 0x8e
   2a0e8:	e59f10bc 	ldr	r1, [pc, #188]	; 2a1ac <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   2a0ec:	e59f00bc 	ldr	r0, [pc, #188]	; 2a1b0 <CHeapAllocator::Allocate(unsigned int)+0x1ec>
   2a0f0:	ebffe562 	bl	23680 <assertion_failed>
   2a0f4:	eb0002b0 	bl	2abbc <EnterCritical>
   2a0f8:	eaffffba 	b	29fe8 <CHeapAllocator::Allocate(unsigned int)+0x24>
   2a0fc:	e3a0e043 	mov	lr, #67	; 0x43
   2a100:	e3a0c04d 	mov	ip, #77	; 0x4d
   2a104:	e3a0004c 	mov	r0, #76	; 0x4c
   2a108:	e3a01042 	mov	r1, #66	; 0x42
   2a10c:	e5863004 	str	r3, [r6, #4]
   2a110:	e1a03824 	lsr	r3, r4, #16
   2a114:	e5c53006 	strb	r3, [r5, #6]
   2a118:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2a11c:	e1a02424 	lsr	r2, r4, #8
   2a120:	e5c54004 	strb	r4, [r5, #4]
   2a124:	e3530000 	cmp	r3, #0
   2a128:	e1a04c24 	lsr	r4, r4, #24
   2a12c:	e5c5e000 	strb	lr, [r5]
   2a130:	e5c5c001 	strb	ip, [r5, #1]
   2a134:	e5c50002 	strb	r0, [r5, #2]
   2a138:	e5c51003 	strb	r1, [r5, #3]
   2a13c:	e5c52005 	strb	r2, [r5, #5]
   2a140:	e5c54007 	strb	r4, [r5, #7]
   2a144:	0affffde 	beq	2a0c4 <CHeapAllocator::Allocate(unsigned int)+0x100>
   2a148:	eb0002c6 	bl	2ac68 <LeaveCritical>
   2a14c:	eaffffdc 	b	2a0c4 <CHeapAllocator::Allocate(unsigned int)+0x100>
   2a150:	eb0002c4 	bl	2ac68 <LeaveCritical>
   2a154:	e1a00007 	mov	r0, r7
   2a158:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2a15c:	e3a0205e 	mov	r2, #94	; 0x5e
   2a160:	e59f1044 	ldr	r1, [pc, #68]	; 2a1ac <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   2a164:	e59f0048 	ldr	r0, [pc, #72]	; 2a1b4 <CHeapAllocator::Allocate(unsigned int)+0x1f0>
   2a168:	ebffe544 	bl	23680 <assertion_failed>
   2a16c:	e3a02000 	mov	r2, #0
   2a170:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2a174:	e586200c 	str	r2, [r6, #12]
   2a178:	e1530002 	cmp	r3, r2
   2a17c:	0a000000 	beq	2a184 <CHeapAllocator::Allocate(unsigned int)+0x1c0>
   2a180:	eb0002b8 	bl	2ac68 <LeaveCritical>
   2a184:	ebffee30 	bl	25a4c <CLogger::Get()>
   2a188:	e5961000 	ldr	r1, [r6]
   2a18c:	e59f3024 	ldr	r3, [pc, #36]	; 2a1b8 <CHeapAllocator::Allocate(unsigned int)+0x1f4>
   2a190:	e3a02000 	mov	r2, #0
   2a194:	ebffed69 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a198:	e3a00000 	mov	r0, #0
   2a19c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2a1a0:	e3a00000 	mov	r0, #0
   2a1a4:	e12fff1e 	bx	lr
   2a1a8:	424c4d43 	.word	0x424c4d43
   2a1ac:	0003aed4 	.word	0x0003aed4
   2a1b0:	0003af24 	.word	0x0003af24
   2a1b4:	0003aee8 	.word	0x0003aee8
   2a1b8:	0003af14 	.word	0x0003af14

0002a1bc <CHeapAllocator::Free(void*)>:
   2a1bc:	e3510000 	cmp	r1, #0
   2a1c0:	012fff1e 	bxeq	lr
   2a1c4:	e92d4070 	push	{r4, r5, r6, lr}
   2a1c8:	e2415010 	sub	r5, r1, #16
   2a1cc:	e5513010 	ldrb	r3, [r1, #-16]
   2a1d0:	e5d51001 	ldrb	r1, [r5, #1]
   2a1d4:	e5d52002 	ldrb	r2, [r5, #2]
   2a1d8:	e1833401 	orr	r3, r3, r1, lsl #8
   2a1dc:	e5d51003 	ldrb	r1, [r5, #3]
   2a1e0:	e1833802 	orr	r3, r3, r2, lsl #16
   2a1e4:	e59f20dc 	ldr	r2, [pc, #220]	; 2a2c8 <CHeapAllocator::Free(void*)+0x10c>
   2a1e8:	e1833c01 	orr	r3, r3, r1, lsl #24
   2a1ec:	e1530002 	cmp	r3, r2
   2a1f0:	e1a06000 	mov	r6, r0
   2a1f4:	1a00002f 	bne	2a2b8 <CHeapAllocator::Free(void*)+0xfc>
   2a1f8:	e5903010 	ldr	r3, [r0, #16]
   2a1fc:	e2804010 	add	r4, r0, #16
   2a200:	e3530000 	cmp	r3, #0
   2a204:	08bd8070 	popeq	{r4, r5, r6, pc}
   2a208:	e5d51005 	ldrb	r1, [r5, #5]
   2a20c:	e5d52004 	ldrb	r2, [r5, #4]
   2a210:	e5d50006 	ldrb	r0, [r5, #6]
   2a214:	e1822401 	orr	r2, r2, r1, lsl #8
   2a218:	e5d51007 	ldrb	r1, [r5, #7]
   2a21c:	e1822800 	orr	r2, r2, r0, lsl #16
   2a220:	e1822c01 	orr	r2, r2, r1, lsl #24
   2a224:	e1530002 	cmp	r3, r2
   2a228:	1a000002 	bne	2a238 <CHeapAllocator::Free(void*)+0x7c>
   2a22c:	ea000005 	b	2a248 <CHeapAllocator::Free(void*)+0x8c>
   2a230:	e1520003 	cmp	r2, r3
   2a234:	0a000003 	beq	2a248 <CHeapAllocator::Free(void*)+0x8c>
   2a238:	e5b43008 	ldr	r3, [r4, #8]!
   2a23c:	e3530000 	cmp	r3, #0
   2a240:	1afffffa 	bne	2a230 <CHeapAllocator::Free(void*)+0x74>
   2a244:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a248:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   2a24c:	e3500000 	cmp	r0, #0
   2a250:	1a000009 	bne	2a27c <CHeapAllocator::Free(void*)+0xc0>
   2a254:	e5d40004 	ldrb	r0, [r4, #4]
   2a258:	e5d41005 	ldrb	r1, [r4, #5]
   2a25c:	e5d42006 	ldrb	r2, [r4, #6]
   2a260:	e5d43007 	ldrb	r3, [r4, #7]
   2a264:	e5c50008 	strb	r0, [r5, #8]
   2a268:	e5c51009 	strb	r1, [r5, #9]
   2a26c:	e5c5200a 	strb	r2, [r5, #10]
   2a270:	e5c5300b 	strb	r3, [r5, #11]
   2a274:	e5845004 	str	r5, [r4, #4]
   2a278:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a27c:	eb00024e 	bl	2abbc <EnterCritical>
   2a280:	e596c0b8 	ldr	ip, [r6, #184]	; 0xb8
   2a284:	e5d40004 	ldrb	r0, [r4, #4]
   2a288:	e5d41005 	ldrb	r1, [r4, #5]
   2a28c:	e5d42006 	ldrb	r2, [r4, #6]
   2a290:	e5d43007 	ldrb	r3, [r4, #7]
   2a294:	e35c0000 	cmp	ip, #0
   2a298:	e5c50008 	strb	r0, [r5, #8]
   2a29c:	e5c51009 	strb	r1, [r5, #9]
   2a2a0:	e5c5200a 	strb	r2, [r5, #10]
   2a2a4:	e5c5300b 	strb	r3, [r5, #11]
   2a2a8:	e5845004 	str	r5, [r4, #4]
   2a2ac:	08bd8070 	popeq	{r4, r5, r6, pc}
   2a2b0:	e8bd4070 	pop	{r4, r5, r6, lr}
   2a2b4:	ea00026b 	b	2ac68 <LeaveCritical>
   2a2b8:	e3a020bf 	mov	r2, #191	; 0xbf
   2a2bc:	e59f1008 	ldr	r1, [pc, #8]	; 2a2cc <CHeapAllocator::Free(void*)+0x110>
   2a2c0:	e59f0008 	ldr	r0, [pc, #8]	; 2a2d0 <CHeapAllocator::Free(void*)+0x114>
   2a2c4:	ebffe4ed 	bl	23680 <assertion_failed>
   2a2c8:	424c4d43 	.word	0x424c4d43
   2a2cc:	0003aed4 	.word	0x0003aed4
   2a2d0:	0003aee8 	.word	0x0003aee8

0002a2d4 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   2a2d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2a2d8:	e2515000 	subs	r5, r1, #0
   2a2dc:	e24dd00c 	sub	sp, sp, #12
   2a2e0:	0a000031 	beq	2a3ac <CHeapAllocator::ReAllocate(void*, unsigned int)+0xd8>
   2a2e4:	e3520000 	cmp	r2, #0
   2a2e8:	0a000033 	beq	2a3bc <CHeapAllocator::ReAllocate(void*, unsigned int)+0xe8>
   2a2ec:	e2454010 	sub	r4, r5, #16
   2a2f0:	e5d4c001 	ldrb	ip, [r4, #1]
   2a2f4:	e5553010 	ldrb	r3, [r5, #-16]
   2a2f8:	e5d41002 	ldrb	r1, [r4, #2]
   2a2fc:	e183340c 	orr	r3, r3, ip, lsl #8
   2a300:	e5d4c003 	ldrb	ip, [r4, #3]
   2a304:	e1833801 	orr	r3, r3, r1, lsl #16
   2a308:	e59f10c8 	ldr	r1, [pc, #200]	; 2a3d8 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x104>
   2a30c:	e1833c0c 	orr	r3, r3, ip, lsl #24
   2a310:	e1530001 	cmp	r3, r1
   2a314:	1a000020 	bne	2a39c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc8>
   2a318:	e5d41005 	ldrb	r1, [r4, #5]
   2a31c:	e5d43004 	ldrb	r3, [r4, #4]
   2a320:	e5d4c006 	ldrb	ip, [r4, #6]
   2a324:	e1833401 	orr	r3, r3, r1, lsl #8
   2a328:	e5d41007 	ldrb	r1, [r4, #7]
   2a32c:	e183380c 	orr	r3, r3, ip, lsl #16
   2a330:	e1833c01 	orr	r3, r3, r1, lsl #24
   2a334:	e1520003 	cmp	r2, r3
   2a338:	8a000002 	bhi	2a348 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x74>
   2a33c:	e1a00005 	mov	r0, r5
   2a340:	e28dd00c 	add	sp, sp, #12
   2a344:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2a348:	e1a01002 	mov	r1, r2
   2a34c:	e1a06000 	mov	r6, r0
   2a350:	ebffff1b 	bl	29fc4 <CHeapAllocator::Allocate(unsigned int)>
   2a354:	e2507000 	subs	r7, r0, #0
   2a358:	0a00001c 	beq	2a3d0 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xfc>
   2a35c:	e5d42005 	ldrb	r2, [r4, #5]
   2a360:	e5d43004 	ldrb	r3, [r4, #4]
   2a364:	e5d41006 	ldrb	r1, [r4, #6]
   2a368:	e1833402 	orr	r3, r3, r2, lsl #8
   2a36c:	e5d42007 	ldrb	r2, [r4, #7]
   2a370:	e1833801 	orr	r3, r3, r1, lsl #16
   2a374:	e1832c02 	orr	r2, r3, r2, lsl #24
   2a378:	e1a01005 	mov	r1, r5
   2a37c:	ebfffd03 	bl	29790 <memcpy>
   2a380:	e1a01005 	mov	r1, r5
   2a384:	e1a05007 	mov	r5, r7
   2a388:	e1a00006 	mov	r0, r6
   2a38c:	ebffff8a 	bl	2a1bc <CHeapAllocator::Free(void*)>
   2a390:	e1a00005 	mov	r0, r5
   2a394:	e28dd00c 	add	sp, sp, #12
   2a398:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2a39c:	e3a020a3 	mov	r2, #163	; 0xa3
   2a3a0:	e59f1034 	ldr	r1, [pc, #52]	; 2a3dc <CHeapAllocator::ReAllocate(void*, unsigned int)+0x108>
   2a3a4:	e59f0034 	ldr	r0, [pc, #52]	; 2a3e0 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x10c>
   2a3a8:	ebffe4b4 	bl	23680 <assertion_failed>
   2a3ac:	e1a01002 	mov	r1, r2
   2a3b0:	e28dd00c 	add	sp, sp, #12
   2a3b4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   2a3b8:	eaffff01 	b	29fc4 <CHeapAllocator::Allocate(unsigned int)>
   2a3bc:	e58d2004 	str	r2, [sp, #4]
   2a3c0:	ebffff7d 	bl	2a1bc <CHeapAllocator::Free(void*)>
   2a3c4:	e59d2004 	ldr	r2, [sp, #4]
   2a3c8:	e1a05002 	mov	r5, r2
   2a3cc:	eaffffda 	b	2a33c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x68>
   2a3d0:	e1a05007 	mov	r5, r7
   2a3d4:	eaffffd8 	b	2a33c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x68>
   2a3d8:	424c4d43 	.word	0x424c4d43
   2a3dc:	0003aed4 	.word	0x0003aed4
   2a3e0:	0003aee8 	.word	0x0003aee8

0002a3e4 <CExceptionHandler::Get() [clone .part.1]>:
   2a3e4:	e92d4010 	push	{r4, lr}
   2a3e8:	e3a02087 	mov	r2, #135	; 0x87
   2a3ec:	e59f1004 	ldr	r1, [pc, #4]	; 2a3f8 <CExceptionHandler::Get() [clone .part.1]+0x14>
   2a3f0:	e59f0004 	ldr	r0, [pc, #4]	; 2a3fc <CExceptionHandler::Get() [clone .part.1]+0x18>
   2a3f4:	ebffe4a1 	bl	23680 <assertion_failed>
   2a3f8:	0003af58 	.word	0x0003af58
   2a3fc:	00038ecc 	.word	0x00038ecc

0002a400 <CExceptionHandler::CExceptionHandler()>:
   2a400:	e59fc06c 	ldr	ip, [pc, #108]	; 2a474 <CExceptionHandler::CExceptionHandler()+0x74>
   2a404:	e92d4010 	push	{r4, lr}
   2a408:	e1a04000 	mov	r4, r0
   2a40c:	e59c0000 	ldr	r0, [ip]
   2a410:	e3500000 	cmp	r0, #0
   2a414:	1a000012 	bne	2a464 <CExceptionHandler::CExceptionHandler()+0x64>
   2a418:	e59f1058 	ldr	r1, [pc, #88]	; 2a478 <CExceptionHandler::CExceptionHandler()+0x78>
   2a41c:	e59f2058 	ldr	r2, [pc, #88]	; 2a47c <CExceptionHandler::CExceptionHandler()+0x7c>
   2a420:	e59f3058 	ldr	r3, [pc, #88]	; 2a480 <CExceptionHandler::CExceptionHandler()+0x80>
   2a424:	e1a01141 	asr	r1, r1, #2
   2a428:	e1a02142 	asr	r2, r2, #2
   2a42c:	e1a03143 	asr	r3, r3, #2
   2a430:	e2411002 	sub	r1, r1, #2
   2a434:	e2422002 	sub	r2, r2, #2
   2a438:	e2433002 	sub	r3, r3, #2
   2a43c:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   2a440:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2a444:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2a448:	e58c4000 	str	r4, [ip]
   2a44c:	e5801004 	str	r1, [r0, #4]
   2a450:	e580200c 	str	r2, [r0, #12]
   2a454:	e5803010 	str	r3, [r0, #16]
   2a458:	eb000227 	bl	2acfc <SyncDataAndInstructionCache>
   2a45c:	e1a00004 	mov	r0, r4
   2a460:	e8bd8010 	pop	{r4, pc}
   2a464:	e3a02030 	mov	r2, #48	; 0x30
   2a468:	e59f1014 	ldr	r1, [pc, #20]	; 2a484 <CExceptionHandler::CExceptionHandler()+0x84>
   2a46c:	e59f0014 	ldr	r0, [pc, #20]	; 2a488 <CExceptionHandler::CExceptionHandler()+0x88>
   2a470:	ebffe482 	bl	23680 <assertion_failed>
   2a474:	0003e3d4 	.word	0x0003e3d4
   2a478:	0002a74c 	.word	0x0002a74c
   2a47c:	0002a6a4 	.word	0x0002a6a4
   2a480:	0002a6f0 	.word	0x0002a6f0
   2a484:	0003af58 	.word	0x0003af58
   2a488:	00038e94 	.word	0x00038e94

0002a48c <CExceptionHandler::~CExceptionHandler()>:
   2a48c:	e3a02000 	mov	r2, #0
   2a490:	e59f3004 	ldr	r3, [pc, #4]	; 2a49c <CExceptionHandler::~CExceptionHandler()+0x10>
   2a494:	e5832000 	str	r2, [r3]
   2a498:	e12fff1e 	bx	lr
   2a49c:	0003e3d4 	.word	0x0003e3d4

0002a4a0 <CExceptionHandler::Throw(unsigned int)>:
   2a4a0:	e92d4010 	push	{r4, lr}
   2a4a4:	e1a04001 	mov	r4, r1
   2a4a8:	e24dd008 	sub	sp, sp, #8
   2a4ac:	ebffed66 	bl	25a4c <CLogger::Get()>
   2a4b0:	e59f201c 	ldr	r2, [pc, #28]	; 2a4d4 <CExceptionHandler::Throw(unsigned int)+0x34>
   2a4b4:	e59f301c 	ldr	r3, [pc, #28]	; 2a4d8 <CExceptionHandler::Throw(unsigned int)+0x38>
   2a4b8:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   2a4bc:	e3a02000 	mov	r2, #0
   2a4c0:	e58d1000 	str	r1, [sp]
   2a4c4:	e59f1010 	ldr	r1, [pc, #16]	; 2a4dc <CExceptionHandler::Throw(unsigned int)+0x3c>
   2a4c8:	ebffec9c 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a4cc:	e28dd008 	add	sp, sp, #8
   2a4d0:	e8bd8010 	pop	{r4, pc}
   2a4d4:	0003e294 	.word	0x0003e294
   2a4d8:	0003af70 	.word	0x0003af70
   2a4dc:	0003af50 	.word	0x0003af50

0002a4e0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   2a4e0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2a4e4:	e3510002 	cmp	r1, #2
   2a4e8:	e24dd024 	sub	sp, sp, #36	; 0x24
   2a4ec:	e1a05001 	mov	r5, r1
   2a4f0:	e1a04002 	mov	r4, r2
   2a4f4:	0a00002a 	beq	2a5a4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
   2a4f8:	e3510003 	cmp	r1, #3
   2a4fc:	0a000020 	beq	2a584 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
   2a500:	e3a08000 	mov	r8, #0
   2a504:	e1a09008 	mov	r9, r8
   2a508:	e3540000 	cmp	r4, #0
   2a50c:	0a000020 	beq	2a594 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   2a510:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   2a514:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   2a518:	e203301f 	and	r3, r3, #31
   2a51c:	e3530011 	cmp	r3, #17
   2a520:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   2a524:	0a000021 	beq	2a5b0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd0>
   2a528:	e3530012 	cmp	r3, #18
   2a52c:	089400c0 	ldmeq	r4, {r6, r7}
   2a530:	e59f1084 	ldr	r1, [pc, #132]	; 2a5bc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2a534:	e1a00006 	mov	r0, r6
   2a538:	ebffe60a 	bl	23d68 <debug_stacktrace(unsigned int const*, char const*)>
   2a53c:	ebffed42 	bl	25a4c <CLogger::Get()>
   2a540:	e59f3078 	ldr	r3, [pc, #120]	; 2a5c0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   2a544:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   2a548:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   2a54c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   2a550:	e58d1000 	str	r1, [sp]
   2a554:	e58d2018 	str	r2, [sp, #24]
   2a558:	e58d3004 	str	r3, [sp, #4]
   2a55c:	e58d7014 	str	r7, [sp, #20]
   2a560:	e58d6010 	str	r6, [sp, #16]
   2a564:	e58d800c 	str	r8, [sp, #12]
   2a568:	e58d9008 	str	r9, [sp, #8]
   2a56c:	e59f3050 	ldr	r3, [pc, #80]	; 2a5c4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   2a570:	e3a02000 	mov	r2, #0
   2a574:	e59f1040 	ldr	r1, [pc, #64]	; 2a5bc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2a578:	ebffec70 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a57c:	e28dd024 	add	sp, sp, #36	; 0x24
   2a580:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2a584:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   2a588:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   2a58c:	e3540000 	cmp	r4, #0
   2a590:	1affffde 	bne	2a510 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   2a594:	e3a02069 	mov	r2, #105	; 0x69
   2a598:	e59f1028 	ldr	r1, [pc, #40]	; 2a5c8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   2a59c:	e59f0028 	ldr	r0, [pc, #40]	; 2a5cc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   2a5a0:	ebffe436 	bl	23680 <assertion_failed>
   2a5a4:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   2a5a8:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   2a5ac:	eaffffd5 	b	2a508 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   2a5b0:	e594700c 	ldr	r7, [r4, #12]
   2a5b4:	e5946008 	ldr	r6, [r4, #8]
   2a5b8:	eaffffdc 	b	2a530 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   2a5bc:	0003af50 	.word	0x0003af50
   2a5c0:	0003e294 	.word	0x0003e294
   2a5c4:	0003af80 	.word	0x0003af80
   2a5c8:	0003af58 	.word	0x0003af58
   2a5cc:	0003914c 	.word	0x0003914c

0002a5d0 <CExceptionHandler::Get()>:
   2a5d0:	e59f3014 	ldr	r3, [pc, #20]	; 2a5ec <CExceptionHandler::Get()+0x1c>
   2a5d4:	e5930000 	ldr	r0, [r3]
   2a5d8:	e3500000 	cmp	r0, #0
   2a5dc:	0a000000 	beq	2a5e4 <CExceptionHandler::Get()+0x14>
   2a5e0:	e12fff1e 	bx	lr
   2a5e4:	e92d4010 	push	{r4, lr}
   2a5e8:	ebffff7d 	bl	2a3e4 <CExceptionHandler::Get() [clone .part.1]>
   2a5ec:	0003e3d4 	.word	0x0003e3d4

0002a5f0 <ExceptionHandler>:
   2a5f0:	e92d4070 	push	{r4, r5, r6, lr}
   2a5f4:	e3a03000 	mov	r3, #0
   2a5f8:	e1a04000 	mov	r4, r0
   2a5fc:	e1a05001 	mov	r5, r1
   2a600:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2a604:	eb0002cc 	bl	2b13c <CInterruptSystem::DisableFIQ()>
   2a608:	f1080040 	cpsie	f
   2a60c:	e59f301c 	ldr	r3, [pc, #28]	; 2a630 <ExceptionHandler+0x40>
   2a610:	e5930000 	ldr	r0, [r3]
   2a614:	e3500000 	cmp	r0, #0
   2a618:	0a000003 	beq	2a62c <ExceptionHandler+0x3c>
   2a61c:	e1a02005 	mov	r2, r5
   2a620:	e1a01004 	mov	r1, r4
   2a624:	e8bd4070 	pop	{r4, r5, r6, lr}
   2a628:	eaffffac 	b	2a4e0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   2a62c:	ebffff6c 	bl	2a3e4 <CExceptionHandler::Get() [clone .part.1]>
   2a630:	0003e3d4 	.word	0x0003e3d4

0002a634 <raise>:
   2a634:	e59f3020 	ldr	r3, [pc, #32]	; 2a65c <raise+0x28>
   2a638:	e92d4010 	push	{r4, lr}
   2a63c:	e5930000 	ldr	r0, [r3]
   2a640:	e3500000 	cmp	r0, #0
   2a644:	0a000003 	beq	2a658 <raise+0x24>
   2a648:	e3a01004 	mov	r1, #4
   2a64c:	ebffff93 	bl	2a4a0 <CExceptionHandler::Throw(unsigned int)>
   2a650:	e3a00000 	mov	r0, #0
   2a654:	e8bd8010 	pop	{r4, pc}
   2a658:	ebffff61 	bl	2a3e4 <CExceptionHandler::Get() [clone .part.1]>
   2a65c:	0003e3d4 	.word	0x0003e3d4

0002a660 <UndefinedInstructionInternal>:
   2a660:	e24dd004 	sub	sp, sp, #4
   2a664:	e24ee004 	sub	lr, lr, #4
   2a668:	e92d4000 	stmfd	sp!, {lr}
   2a66c:	e14fe000 	mrs	lr, SPSR
   2a670:	e92d4000 	stmfd	sp!, {lr}
   2a674:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2a678:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2a67c:	e1a0100d 	mov	r1, sp
   2a680:	f1020012 	cps	#18
   2a684:	e1a0200d 	mov	r2, sp
   2a688:	e1a0300e 	mov	r3, lr
   2a68c:	f1020011 	cps	#17
   2a690:	e1a0400d 	mov	r4, sp
   2a694:	e1a0500e 	mov	r5, lr
   2a698:	f102001f 	cps	#31
   2a69c:	e1a0d001 	mov	sp, r1
   2a6a0:	e92d003c 	push	{r2, r3, r4, r5}
   2a6a4:	e1a0100d 	mov	r1, sp
   2a6a8:	e3a00001 	mov	r0, #1
   2a6ac:	eaffffcf 	b	2a5f0 <ExceptionHandler>

0002a6b0 <PrefetchAbortStub>:
   2a6b0:	e24dd004 	sub	sp, sp, #4
   2a6b4:	e24ee004 	sub	lr, lr, #4
   2a6b8:	e92d4000 	stmfd	sp!, {lr}
   2a6bc:	e14fe000 	mrs	lr, SPSR
   2a6c0:	e92d4000 	stmfd	sp!, {lr}
   2a6c4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2a6c8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2a6cc:	e1a0100d 	mov	r1, sp
   2a6d0:	f1020012 	cps	#18
   2a6d4:	e1a0200d 	mov	r2, sp
   2a6d8:	e1a0300e 	mov	r3, lr
   2a6dc:	f1020011 	cps	#17
   2a6e0:	e1a0400d 	mov	r4, sp
   2a6e4:	e1a0500e 	mov	r5, lr
   2a6e8:	f102001f 	cps	#31
   2a6ec:	e1a0d001 	mov	sp, r1
   2a6f0:	e92d003c 	push	{r2, r3, r4, r5}
   2a6f4:	e1a0100d 	mov	r1, sp
   2a6f8:	e3a00002 	mov	r0, #2
   2a6fc:	eaffffbb 	b	2a5f0 <ExceptionHandler>

0002a700 <DataAbortStub>:
   2a700:	e24dd004 	sub	sp, sp, #4
   2a704:	e24ee008 	sub	lr, lr, #8
   2a708:	e92d4000 	stmfd	sp!, {lr}
   2a70c:	e14fe000 	mrs	lr, SPSR
   2a710:	e92d4000 	stmfd	sp!, {lr}
   2a714:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2a718:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2a71c:	e1a0100d 	mov	r1, sp
   2a720:	f1020012 	cps	#18
   2a724:	e1a0200d 	mov	r2, sp
   2a728:	e1a0300e 	mov	r3, lr
   2a72c:	f1020011 	cps	#17
   2a730:	e1a0400d 	mov	r4, sp
   2a734:	e1a0500e 	mov	r5, lr
   2a738:	f102001f 	cps	#31
   2a73c:	e1a0d001 	mov	sp, r1
   2a740:	e92d003c 	push	{r2, r3, r4, r5}
   2a744:	e1a0100d 	mov	r1, sp
   2a748:	e3a00003 	mov	r0, #3
   2a74c:	eaffffa7 	b	2a5f0 <ExceptionHandler>

0002a750 <UndefinedInstructionStub>:
   2a750:	e92d4001 	push	{r0, lr}
   2a754:	eef80a10 	vmrs	r0, fpexc
   2a758:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   2a75c:	0affffbf 	beq	2a660 <UndefinedInstructionInternal>
   2a760:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   2a764:	eee80a10 	vmsr	fpexc, r0
   2a768:	e8fd8001 	ldm	sp!, {r0, pc}^

0002a76c <IRQStub>:
   2a76c:	e24ee004 	sub	lr, lr, #4
   2a770:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2a774:	e59f0060 	ldr	r0, [pc, #96]	; 2a7dc <FIQStub+0x58>
   2a778:	e580e000 	str	lr, [r0]
   2a77c:	eb0002c8 	bl	2b2a4 <InterruptHandler>
   2a780:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

0002a784 <FIQStub>:
   2a784:	e24ee004 	sub	lr, lr, #4
   2a788:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2a78c:	e3a03000 	mov	r3, #0
   2a790:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2a794:	e59f2044 	ldr	r2, [pc, #68]	; 2a7e0 <FIQStub+0x5c>
   2a798:	e5921000 	ldr	r1, [r2]
   2a79c:	e3510000 	cmp	r1, #0
   2a7a0:	0a000004 	beq	2a7b8 <FIQStub+0x34>
   2a7a4:	e5920004 	ldr	r0, [r2, #4]
   2a7a8:	e12fff31 	blx	r1
   2a7ac:	e3a03000 	mov	r3, #0
   2a7b0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2a7b4:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2a7b8:	e3a03000 	mov	r3, #0
   2a7bc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2a7c0:	e59f101c 	ldr	r1, [pc, #28]	; 2a7e4 <FIQStub+0x60>
   2a7c4:	e3a00000 	mov	r0, #0
   2a7c8:	e5810000 	str	r0, [r1]
   2a7cc:	e3a03000 	mov	r3, #0
   2a7d0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2a7d4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2a7d8:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2a7dc:	0003e2b4 	.word	0x0003e2b4
   2a7e0:	0003e2a8 	.word	0x0003e2a8
   2a7e4:	2000b20c 	.word	0x2000b20c

0002a7e8 <CMemorySystem::CMemorySystem(bool)>:
   2a7e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2a7ec:	e1a04000 	mov	r4, r0
   2a7f0:	e3a05000 	mov	r5, #0
   2a7f4:	e280700c 	add	r7, r0, #12
   2a7f8:	e5c01000 	strb	r1, [r0]
   2a7fc:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   2a800:	e5845004 	str	r5, [r4, #4]
   2a804:	e5845008 	str	r5, [r4, #8]
   2a808:	e59f10fc 	ldr	r1, [pc, #252]	; 2a90c <CMemorySystem::CMemorySystem(bool)+0x124>
   2a80c:	e1a00007 	mov	r0, r7
   2a810:	e28460c8 	add	r6, r4, #200	; 0xc8
   2a814:	ebfffdcb 	bl	29f48 <CHeapAllocator::CHeapAllocator(char const*)>
   2a818:	e1a00006 	mov	r0, r6
   2a81c:	eb00053f 	bl	2bd20 <CPageAllocator::CPageAllocator()>
   2a820:	e59f30e8 	ldr	r3, [pc, #232]	; 2a910 <CMemorySystem::CMemorySystem(bool)+0x128>
   2a824:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2a828:	e5935000 	ldr	r5, [r3]
   2a82c:	e3550000 	cmp	r5, #0
   2a830:	0a000002 	beq	2a840 <CMemorySystem::CMemorySystem(bool)+0x58>
   2a834:	e1a00004 	mov	r0, r4
   2a838:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2a83c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2a840:	e3a01001 	mov	r1, #1
   2a844:	e28d000c 	add	r0, sp, #12
   2a848:	e5834000 	str	r4, [r3]
   2a84c:	ebffe3ac 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2a850:	e3a03014 	mov	r3, #20
   2a854:	e58d5000 	str	r5, [sp]
   2a858:	e28d000c 	add	r0, sp, #12
   2a85c:	e08d2003 	add	r2, sp, r3
   2a860:	e59f10ac 	ldr	r1, [pc, #172]	; 2a914 <CMemorySystem::CMemorySystem(bool)+0x12c>
   2a864:	ebffe3b2 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2a868:	e3500000 	cmp	r0, #0
   2a86c:	0a00001c 	beq	2a8e4 <CMemorySystem::CMemorySystem(bool)+0xfc>
   2a870:	e59d3020 	ldr	r3, [sp, #32]
   2a874:	e3530000 	cmp	r3, #0
   2a878:	1a00001f 	bne	2a8fc <CMemorySystem::CMemorySystem(bool)+0x114>
   2a87c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2a880:	e2432609 	sub	r2, r3, #9437184	; 0x900000
   2a884:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   2a888:	e5843004 	str	r3, [r4, #4]
   2a88c:	e1a00007 	mov	r0, r7
   2a890:	e3a03701 	mov	r3, #262144	; 0x40000
   2a894:	e3a01605 	mov	r1, #5242880	; 0x500000
   2a898:	ebfffdc3 	bl	29fac <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   2a89c:	e1a01005 	mov	r1, r5
   2a8a0:	e1a00006 	mov	r0, r6
   2a8a4:	e3a02501 	mov	r2, #4194304	; 0x400000
   2a8a8:	eb000524 	bl	2bd40 <CPageAllocator::Setup(unsigned int, unsigned int)>
   2a8ac:	e5d43000 	ldrb	r3, [r4]
   2a8b0:	e3530000 	cmp	r3, #0
   2a8b4:	0a000007 	beq	2a8d8 <CMemorySystem::CMemorySystem(bool)+0xf0>
   2a8b8:	e3a00004 	mov	r0, #4
   2a8bc:	ebfffd8c 	bl	29ef4 <operator new(unsigned int)>
   2a8c0:	e1a05000 	mov	r5, r0
   2a8c4:	e5941004 	ldr	r1, [r4, #4]
   2a8c8:	eb000087 	bl	2aaec <CPageTable::CPageTable(unsigned int)>
   2a8cc:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2a8d0:	e1a00004 	mov	r0, r4
   2a8d4:	eb000049 	bl	2aa00 <CMemorySystem::EnableMMU()>
   2a8d8:	e28d000c 	add	r0, sp, #12
   2a8dc:	ebffe38f 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   2a8e0:	eaffffd3 	b	2a834 <CMemorySystem::CMemorySystem(bool)+0x4c>
   2a8e4:	e3a03303 	mov	r3, #201326592	; 0xc000000
   2a8e8:	e58d0020 	str	r0, [sp, #32]
   2a8ec:	e58d3024 	str	r3, [sp, #36]	; 0x24
   2a8f0:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   2a8f4:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   2a8f8:	eaffffe2 	b	2a888 <CMemorySystem::CMemorySystem(bool)+0xa0>
   2a8fc:	e59f1014 	ldr	r1, [pc, #20]	; 2a918 <CMemorySystem::CMemorySystem(bool)+0x130>
   2a900:	e3a0204e 	mov	r2, #78	; 0x4e
   2a904:	e281000c 	add	r0, r1, #12
   2a908:	ebffe35c 	bl	23680 <assertion_failed>
   2a90c:	0003b008 	.word	0x0003b008
   2a910:	0003e3d8 	.word	0x0003e3d8
   2a914:	00010005 	.word	0x00010005
   2a918:	0003b010 	.word	0x0003b010

0002a91c <CMemorySystem::~CMemorySystem()>:
   2a91c:	e59f3044 	ldr	r3, [pc, #68]	; 2a968 <CMemorySystem::~CMemorySystem()+0x4c>
   2a920:	e92d4010 	push	{r4, lr}
   2a924:	e5932000 	ldr	r2, [r3]
   2a928:	e1a04000 	mov	r4, r0
   2a92c:	e1500002 	cmp	r0, r2
   2a930:	0a000005 	beq	2a94c <CMemorySystem::~CMemorySystem()+0x30>
   2a934:	e28400c8 	add	r0, r4, #200	; 0xc8
   2a938:	eb0004ff 	bl	2bd3c <CPageAllocator::~CPageAllocator()>
   2a93c:	e284000c 	add	r0, r4, #12
   2a940:	ebfffd98 	bl	29fa8 <CHeapAllocator::~CHeapAllocator()>
   2a944:	e1a00004 	mov	r0, r4
   2a948:	e8bd8010 	pop	{r4, pc}
   2a94c:	e3a01000 	mov	r1, #0
   2a950:	e5d02000 	ldrb	r2, [r0]
   2a954:	e5831000 	str	r1, [r3]
   2a958:	e1520001 	cmp	r2, r1
   2a95c:	0afffff4 	beq	2a934 <CMemorySystem::~CMemorySystem()+0x18>
   2a960:	eb000056 	bl	2aac0 <CMemorySystem::Destructor() [clone .part.0]>
   2a964:	eafffff2 	b	2a934 <CMemorySystem::~CMemorySystem()+0x18>
   2a968:	0003e3d8 	.word	0x0003e3d8

0002a96c <CMemorySystem::Destructor()>:
   2a96c:	e59f3020 	ldr	r3, [pc, #32]	; 2a994 <CMemorySystem::Destructor()+0x28>
   2a970:	e5932000 	ldr	r2, [r3]
   2a974:	e1520000 	cmp	r2, r0
   2a978:	112fff1e 	bxne	lr
   2a97c:	e3a01000 	mov	r1, #0
   2a980:	e5d22000 	ldrb	r2, [r2]
   2a984:	e5831000 	str	r1, [r3]
   2a988:	e1520001 	cmp	r2, r1
   2a98c:	012fff1e 	bxeq	lr
   2a990:	ea00004a 	b	2aac0 <CMemorySystem::Destructor() [clone .part.0]>
   2a994:	0003e3d8 	.word	0x0003e3d8

0002a998 <CMemorySystem::GetMemSize() const>:
   2a998:	e59f3028 	ldr	r3, [pc, #40]	; 2a9c8 <CMemorySystem::GetMemSize() const+0x30>
   2a99c:	e5933000 	ldr	r3, [r3]
   2a9a0:	e3530000 	cmp	r3, #0
   2a9a4:	0a000002 	beq	2a9b4 <CMemorySystem::GetMemSize() const+0x1c>
   2a9a8:	e9930009 	ldmib	r3, {r0, r3}
   2a9ac:	e0800003 	add	r0, r0, r3
   2a9b0:	e12fff1e 	bx	lr
   2a9b4:	e59f1010 	ldr	r1, [pc, #16]	; 2a9cc <CMemorySystem::GetMemSize() const+0x34>
   2a9b8:	e92d4010 	push	{r4, lr}
   2a9bc:	e3a020a0 	mov	r2, #160	; 0xa0
   2a9c0:	e2810028 	add	r0, r1, #40	; 0x28
   2a9c4:	ebffe32d 	bl	23680 <assertion_failed>
   2a9c8:	0003e3d8 	.word	0x0003e3d8
   2a9cc:	0003b010 	.word	0x0003b010

0002a9d0 <CMemorySystem::Get()>:
   2a9d0:	e59f3020 	ldr	r3, [pc, #32]	; 2a9f8 <CMemorySystem::Get()+0x28>
   2a9d4:	e5930000 	ldr	r0, [r3]
   2a9d8:	e3500000 	cmp	r0, #0
   2a9dc:	0a000000 	beq	2a9e4 <CMemorySystem::Get()+0x14>
   2a9e0:	e12fff1e 	bx	lr
   2a9e4:	e59f1010 	ldr	r1, [pc, #16]	; 2a9fc <CMemorySystem::Get()+0x2c>
   2a9e8:	e92d4010 	push	{r4, lr}
   2a9ec:	e3a020a6 	mov	r2, #166	; 0xa6
   2a9f0:	e2810028 	add	r0, r1, #40	; 0x28
   2a9f4:	ebffe321 	bl	23680 <assertion_failed>
   2a9f8:	0003e3d8 	.word	0x0003e3d8
   2a9fc:	0003b010 	.word	0x0003b010

0002aa00 <CMemorySystem::EnableMMU()>:
   2aa00:	e5d03000 	ldrb	r3, [r0]
   2aa04:	e92d4010 	push	{r4, lr}
   2aa08:	e3530000 	cmp	r3, #0
   2aa0c:	0a00001a 	beq	2aa7c <CMemorySystem::EnableMMU()+0x7c>
   2aa10:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   2aa14:	e3833040 	orr	r3, r3, #64	; 0x40
   2aa18:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   2aa1c:	ee104f70 	mrc	15, 0, r4, cr0, cr0, {3}
   2aa20:	e2144001 	ands	r4, r4, #1
   2aa24:	1a000018 	bne	2aa8c <CMemorySystem::EnableMMU()+0x8c>
   2aa28:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   2aa2c:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   2aa30:	e3500000 	cmp	r0, #0
   2aa34:	0a000018 	beq	2aa9c <CMemorySystem::EnableMMU()+0x9c>
   2aa38:	eb000056 	bl	2ab98 <CPageTable::GetBaseAddress() const>
   2aa3c:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   2aa40:	e3a03001 	mov	r3, #1
   2aa44:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   2aa48:	ee074f16 	mcr	15, 0, r4, cr7, cr6, {0}
   2aa4c:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2aa50:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   2aa54:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   2aa58:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   2aa5c:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2aa60:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   2aa64:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   2aa68:	e59f203c 	ldr	r2, [pc, #60]	; 2aaac <CMemorySystem::EnableMMU()+0xac>
   2aa6c:	e3c33002 	bic	r3, r3, #2
   2aa70:	e1832002 	orr	r2, r3, r2
   2aa74:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
   2aa78:	e8bd8010 	pop	{r4, pc}
   2aa7c:	e59f102c 	ldr	r1, [pc, #44]	; 2aab0 <CMemorySystem::EnableMMU()+0xb0>
   2aa80:	e3a020ac 	mov	r2, #172	; 0xac
   2aa84:	e2810038 	add	r0, r1, #56	; 0x38
   2aa88:	ebffe2fc 	bl	23680 <assertion_failed>
   2aa8c:	e59f101c 	ldr	r1, [pc, #28]	; 2aab0 <CMemorySystem::EnableMMU()+0xb0>
   2aa90:	e3a020ba 	mov	r2, #186	; 0xba
   2aa94:	e2810048 	add	r0, r1, #72	; 0x48
   2aa98:	ebffe2f8 	bl	23680 <assertion_failed>
   2aa9c:	e59f100c 	ldr	r1, [pc, #12]	; 2aab0 <CMemorySystem::EnableMMU()+0xb0>
   2aaa0:	e3a020c0 	mov	r2, #192	; 0xc0
   2aaa4:	e2810074 	add	r0, r1, #116	; 0x74
   2aaa8:	ebffe2f4 	bl	23680 <assertion_failed>
   2aaac:	00c01805 	.word	0x00c01805
   2aab0:	0003b010 	.word	0x0003b010

0002aab4 <CMemorySystem::GetCoherentPage(unsigned int)>:
   2aab4:	e1a00600 	lsl	r0, r0, #12
   2aab8:	e2800501 	add	r0, r0, #4194304	; 0x400000
   2aabc:	e12fff1e 	bx	lr

0002aac0 <CMemorySystem::Destructor() [clone .part.0]>:
   2aac0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   2aac4:	e3c33005 	bic	r3, r3, #5
   2aac8:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   2aacc:	e3a03000 	mov	r3, #0
   2aad0:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2aad4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2aad8:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   2aadc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2aae0:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   2aae4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2aae8:	e12fff1e 	bx	lr

0002aaec <CPageTable::CPageTable(unsigned int)>:
   2aaec:	e3a02709 	mov	r2, #2359296	; 0x240000
   2aaf0:	e3a03000 	mov	r3, #0
   2aaf4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2aaf8:	e59fc074 	ldr	ip, [pc, #116]	; 2ab74 <CPageTable::CPageTable(unsigned int)+0x88>
   2aafc:	e59f4074 	ldr	r4, [pc, #116]	; 2ab78 <CPageTable::CPageTable(unsigned int)+0x8c>
   2ab00:	e59f5074 	ldr	r5, [pc, #116]	; 2ab7c <CPageTable::CPageTable(unsigned int)+0x90>
   2ab04:	e59f9074 	ldr	r9, [pc, #116]	; 2ab80 <CPageTable::CPageTable(unsigned int)+0x94>
   2ab08:	e59f8074 	ldr	r8, [pc, #116]	; 2ab84 <CPageTable::CPageTable(unsigned int)+0x98>
   2ab0c:	e59f7074 	ldr	r7, [pc, #116]	; 2ab88 <CPageTable::CPageTable(unsigned int)+0x9c>
   2ab10:	e59f6074 	ldr	r6, [pc, #116]	; 2ab8c <CPageTable::CPageTable(unsigned int)+0xa0>
   2ab14:	e59fe074 	ldr	lr, [pc, #116]	; 2ab90 <CPageTable::CPageTable(unsigned int)+0xa4>
   2ab18:	e5802000 	str	r2, [r0]
   2ab1c:	e1530004 	cmp	r3, r4
   2ab20:	31a02005 	movcc	r2, r5
   2ab24:	3a000007 	bcc	2ab48 <CPageTable::CPageTable(unsigned int)+0x5c>
   2ab28:	e3530501 	cmp	r3, #4194304	; 0x400000
   2ab2c:	0a00000e 	beq	2ab6c <CPageTable::CPageTable(unsigned int)+0x80>
   2ab30:	e1510003 	cmp	r1, r3
   2ab34:	81a02008 	movhi	r2, r8
   2ab38:	8a000002 	bhi	2ab48 <CPageTable::CPageTable(unsigned int)+0x5c>
   2ab3c:	e1530007 	cmp	r3, r7
   2ab40:	91a02006 	movls	r2, r6
   2ab44:	83a02000 	movhi	r2, #0
   2ab48:	e1822003 	orr	r2, r2, r3
   2ab4c:	e5ac2004 	str	r2, [ip, #4]!
   2ab50:	e15c000e 	cmp	ip, lr
   2ab54:	e2833601 	add	r3, r3, #1048576	; 0x100000
   2ab58:	1affffef 	bne	2ab1c <CPageTable::CPageTable(unsigned int)+0x30>
   2ab5c:	e3a03000 	mov	r3, #0
   2ab60:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2ab64:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ab68:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2ab6c:	e1a02009 	mov	r2, r9
   2ab70:	eafffff4 	b	2ab48 <CPageTable::CPageTable(unsigned int)+0x5c>
   2ab74:	0023fffc 	.word	0x0023fffc
   2ab78:	00034548 	.word	0x00034548
   2ab7c:	0000040e 	.word	0x0000040e
   2ab80:	00010412 	.word	0x00010412
   2ab84:	0000041e 	.word	0x0000041e
   2ab88:	20fffffe 	.word	0x20fffffe
   2ab8c:	00010416 	.word	0x00010416
   2ab90:	00243ffc 	.word	0x00243ffc

0002ab94 <CPageTable::~CPageTable()>:
   2ab94:	e12fff1e 	bx	lr

0002ab98 <CPageTable::GetBaseAddress() const>:
   2ab98:	e5900000 	ldr	r0, [r0]
   2ab9c:	e3800001 	orr	r0, r0, #1
   2aba0:	e12fff1e 	bx	lr

0002aba4 <CurrentExecutionLevel>:
   2aba4:	e10f0000 	mrs	r0, CPSR
   2aba8:	e3100040 	tst	r0, #64	; 0x40
   2abac:	01a003a0 	lsreq	r0, r0, #7
   2abb0:	02000001 	andeq	r0, r0, #1
   2abb4:	13a00002 	movne	r0, #2
   2abb8:	e12fff1e 	bx	lr

0002abbc <EnterCritical>:
   2abbc:	e2403001 	sub	r3, r0, #1
   2abc0:	e3530001 	cmp	r3, #1
   2abc4:	e92d4010 	push	{r4, lr}
   2abc8:	8a000013 	bhi	2ac1c <EnterCritical+0x60>
   2abcc:	e10f1000 	mrs	r1, CPSR
   2abd0:	e3500002 	cmp	r0, #2
   2abd4:	1a000014 	bne	2ac2c <EnterCritical+0x70>
   2abd8:	f10c00c0 	cpsid	if
   2abdc:	e59f3070 	ldr	r3, [pc, #112]	; 2ac54 <EnterCritical+0x98>
   2abe0:	e5932000 	ldr	r2, [r3]
   2abe4:	e3520013 	cmp	r2, #19
   2abe8:	8a000015 	bhi	2ac44 <EnterCritical+0x88>
   2abec:	e5932000 	ldr	r2, [r3]
   2abf0:	e3500001 	cmp	r0, #1
   2abf4:	e2820001 	add	r0, r2, #1
   2abf8:	e0832102 	add	r2, r3, r2, lsl #2
   2abfc:	e5830000 	str	r0, [r3]
   2ac00:	e5821004 	str	r1, [r2, #4]
   2ac04:	0a000002 	beq	2ac14 <EnterCritical+0x58>
   2ac08:	e3a03000 	mov	r3, #0
   2ac0c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2ac10:	e8bd8010 	pop	{r4, pc}
   2ac14:	f1080040 	cpsie	f
   2ac18:	eafffffa 	b	2ac08 <EnterCritical+0x4c>
   2ac1c:	e3a02064 	mov	r2, #100	; 0x64
   2ac20:	e59f1030 	ldr	r1, [pc, #48]	; 2ac58 <EnterCritical+0x9c>
   2ac24:	e59f0030 	ldr	r0, [pc, #48]	; 2ac5c <EnterCritical+0xa0>
   2ac28:	ebffe294 	bl	23680 <assertion_failed>
   2ac2c:	e3110040 	tst	r1, #64	; 0x40
   2ac30:	0affffe8 	beq	2abd8 <EnterCritical+0x1c>
   2ac34:	e3a0206a 	mov	r2, #106	; 0x6a
   2ac38:	e59f1018 	ldr	r1, [pc, #24]	; 2ac58 <EnterCritical+0x9c>
   2ac3c:	e59f001c 	ldr	r0, [pc, #28]	; 2ac60 <EnterCritical+0xa4>
   2ac40:	ebffe28e 	bl	23680 <assertion_failed>
   2ac44:	e3a0206e 	mov	r2, #110	; 0x6e
   2ac48:	e59f1008 	ldr	r1, [pc, #8]	; 2ac58 <EnterCritical+0x9c>
   2ac4c:	e59f0010 	ldr	r0, [pc, #16]	; 2ac64 <EnterCritical+0xa8>
   2ac50:	ebffe28a 	bl	23680 <assertion_failed>
   2ac54:	0003e3dc 	.word	0x0003e3dc
   2ac58:	0003b098 	.word	0x0003b098
   2ac5c:	0003b0a8 	.word	0x0003b0a8
   2ac60:	0003b0e0 	.word	0x0003b0e0
   2ac64:	0003b110 	.word	0x0003b110

0002ac68 <LeaveCritical>:
   2ac68:	e3a03000 	mov	r3, #0
   2ac6c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2ac70:	f10c0040 	cpsid	f
   2ac74:	e59f3038 	ldr	r3, [pc, #56]	; 2acb4 <LeaveCritical+0x4c>
   2ac78:	e5932000 	ldr	r2, [r3]
   2ac7c:	e3520000 	cmp	r2, #0
   2ac80:	0a000006 	beq	2aca0 <LeaveCritical+0x38>
   2ac84:	e5932000 	ldr	r2, [r3]
   2ac88:	e2422001 	sub	r2, r2, #1
   2ac8c:	e5832000 	str	r2, [r3]
   2ac90:	e0833102 	add	r3, r3, r2, lsl #2
   2ac94:	e5933004 	ldr	r3, [r3, #4]
   2ac98:	e121f003 	msr	CPSR_c, r3
   2ac9c:	e12fff1e 	bx	lr
   2aca0:	e92d4010 	push	{r4, lr}
   2aca4:	e3a0207f 	mov	r2, #127	; 0x7f
   2aca8:	e59f1008 	ldr	r1, [pc, #8]	; 2acb8 <LeaveCritical+0x50>
   2acac:	e59f0008 	ldr	r0, [pc, #8]	; 2acbc <LeaveCritical+0x54>
   2acb0:	ebffe272 	bl	23680 <assertion_failed>
   2acb4:	0003e3dc 	.word	0x0003e3dc
   2acb8:	0003b098 	.word	0x0003b098
   2acbc:	0003b138 	.word	0x0003b138

0002acc0 <CleanAndInvalidateDataCacheRange>:
   2acc0:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2acc4:	e2813020 	add	r3, r1, #32
   2acc8:	e353001f 	cmp	r3, #31
   2accc:	82800020 	addhi	r0, r0, #32
   2acd0:	83c1101f 	bichi	r1, r1, #31
   2acd4:	80801001 	addhi	r1, r0, r1
   2acd8:	8a000001 	bhi	2ace4 <CleanAndInvalidateDataCacheRange+0x24>
   2acdc:	ea000003 	b	2acf0 <CleanAndInvalidateDataCacheRange+0x30>
   2ace0:	e2800020 	add	r0, r0, #32
   2ace4:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2ace8:	e1510000 	cmp	r1, r0
   2acec:	1afffffb 	bne	2ace0 <CleanAndInvalidateDataCacheRange+0x20>
   2acf0:	e3a03000 	mov	r3, #0
   2acf4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2acf8:	e12fff1e 	bx	lr

0002acfc <SyncDataAndInstructionCache>:
   2acfc:	e3a03000 	mov	r3, #0
   2ad00:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2ad04:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ad08:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2ad0c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2ad10:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ad14:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2ad18:	e12fff1e 	bx	lr

0002ad1c <CInterruptSystem::CInterruptSystem()>:
   2ad1c:	e1a0c000 	mov	ip, r0
   2ad20:	e2802f47 	add	r2, r0, #284	; 0x11c
   2ad24:	e1a00002 	mov	r0, r2
   2ad28:	e3a01000 	mov	r1, #0
   2ad2c:	e24c3004 	sub	r3, ip, #4
   2ad30:	e5a31004 	str	r1, [r3, #4]!
   2ad34:	e1530000 	cmp	r3, r0
   2ad38:	e5a21004 	str	r1, [r2, #4]!
   2ad3c:	1afffffb 	bne	2ad30 <CInterruptSystem::CInterruptSystem()+0x14>
   2ad40:	e59f3008 	ldr	r3, [pc, #8]	; 2ad50 <CInterruptSystem::CInterruptSystem()+0x34>
   2ad44:	e1a0000c 	mov	r0, ip
   2ad48:	e583c000 	str	ip, [r3]
   2ad4c:	e12fff1e 	bx	lr
   2ad50:	0003e430 	.word	0x0003e430

0002ad54 <CInterruptSystem::~CInterruptSystem()>:
   2ad54:	f10c0080 	cpsid	i
   2ad58:	e3a03000 	mov	r3, #0
   2ad5c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ad60:	e3e01000 	mvn	r1, #0
   2ad64:	e59f201c 	ldr	r2, [pc, #28]	; 2ad88 <CInterruptSystem::~CInterruptSystem()+0x34>
   2ad68:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2ad6c:	e582121c 	str	r1, [r2, #540]	; 0x21c
   2ad70:	e5821220 	str	r1, [r2, #544]	; 0x220
   2ad74:	e5821224 	str	r1, [r2, #548]	; 0x224
   2ad78:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2ad7c:	e59f2008 	ldr	r2, [pc, #8]	; 2ad8c <CInterruptSystem::~CInterruptSystem()+0x38>
   2ad80:	e5823000 	str	r3, [r2]
   2ad84:	e12fff1e 	bx	lr
   2ad88:	2000b000 	.word	0x2000b000
   2ad8c:	0003e430 	.word	0x0003e430

0002ad90 <CInterruptSystem::Initialize()>:
   2ad90:	e92d4010 	push	{r4, lr}
   2ad94:	e3a04000 	mov	r4, #0
   2ad98:	e59f2050 	ldr	r2, [pc, #80]	; 2adf0 <CInterruptSystem::Initialize()+0x60>
   2ad9c:	e59f3050 	ldr	r3, [pc, #80]	; 2adf4 <CInterruptSystem::Initialize()+0x64>
   2ada0:	e1a02142 	asr	r2, r2, #2
   2ada4:	e1a03143 	asr	r3, r3, #2
   2ada8:	e2422002 	sub	r2, r2, #2
   2adac:	e2433002 	sub	r3, r3, #2
   2adb0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2adb4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2adb8:	e5842018 	str	r2, [r4, #24]
   2adbc:	e584301c 	str	r3, [r4, #28]
   2adc0:	ebffffcd 	bl	2acfc <SyncDataAndInstructionCache>
   2adc4:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2adc8:	e3e02000 	mvn	r2, #0
   2adcc:	e59f3024 	ldr	r3, [pc, #36]	; 2adf8 <CInterruptSystem::Initialize()+0x68>
   2add0:	e583420c 	str	r4, [r3, #524]	; 0x20c
   2add4:	e583221c 	str	r2, [r3, #540]	; 0x21c
   2add8:	e5832220 	str	r2, [r3, #544]	; 0x220
   2addc:	e5832224 	str	r2, [r3, #548]	; 0x224
   2ade0:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2ade4:	f1080080 	cpsie	i
   2ade8:	e3a00001 	mov	r0, #1
   2adec:	e8bd8010 	pop	{r4, pc}
   2adf0:	0002a754 	.word	0x0002a754
   2adf4:	0002a768 	.word	0x0002a768
   2adf8:	2000b000 	.word	0x2000b000

0002adfc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   2adfc:	e3510047 	cmp	r1, #71	; 0x47
   2ae00:	e92d4070 	push	{r4, r5, r6, lr}
   2ae04:	8a00001e 	bhi	2ae84 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   2ae08:	e3520000 	cmp	r2, #0
   2ae0c:	0a000020 	beq	2ae94 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   2ae10:	e59f009c 	ldr	r0, [pc, #156]	; 2aeb4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   2ae14:	e5d0e001 	ldrb	lr, [r0, #1]
   2ae18:	e5d0c000 	ldrb	ip, [r0]
   2ae1c:	e5d04002 	ldrb	r4, [r0, #2]
   2ae20:	e18cc40e 	orr	ip, ip, lr, lsl #8
   2ae24:	e5d0e003 	ldrb	lr, [r0, #3]
   2ae28:	e18cc804 	orr	ip, ip, r4, lsl #16
   2ae2c:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   2ae30:	1a00001b 	bne	2aea4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa8>
   2ae34:	e1a06422 	lsr	r6, r2, #8
   2ae38:	e1a05822 	lsr	r5, r2, #16
   2ae3c:	e1a04c22 	lsr	r4, r2, #24
   2ae40:	e1a0e423 	lsr	lr, r3, #8
   2ae44:	e5c02000 	strb	r2, [r0]
   2ae48:	e5c03004 	strb	r3, [r0, #4]
   2ae4c:	e1a02823 	lsr	r2, r3, #16
   2ae50:	e1a03c23 	lsr	r3, r3, #24
   2ae54:	e5c06001 	strb	r6, [r0, #1]
   2ae58:	e5c05002 	strb	r5, [r0, #2]
   2ae5c:	e5c04003 	strb	r4, [r0, #3]
   2ae60:	e5c0e005 	strb	lr, [r0, #5]
   2ae64:	e5c02006 	strb	r2, [r0, #6]
   2ae68:	e5c03007 	strb	r3, [r0, #7]
   2ae6c:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
   2ae70:	e59f3040 	ldr	r3, [pc, #64]	; 2aeb8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xbc>
   2ae74:	e3811080 	orr	r1, r1, #128	; 0x80
   2ae78:	e583120c 	str	r1, [r3, #524]	; 0x20c
   2ae7c:	ee07cfba 	mcr	15, 0, ip, cr7, cr10, {5}
   2ae80:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ae84:	e3a0208f 	mov	r2, #143	; 0x8f
   2ae88:	e59f102c 	ldr	r1, [pc, #44]	; 2aebc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2ae8c:	e59f002c 	ldr	r0, [pc, #44]	; 2aec0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   2ae90:	ebffe1fa 	bl	23680 <assertion_failed>
   2ae94:	e3a02090 	mov	r2, #144	; 0x90
   2ae98:	e59f101c 	ldr	r1, [pc, #28]	; 2aebc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2ae9c:	e59f0020 	ldr	r0, [pc, #32]	; 2aec4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   2aea0:	ebffe1f6 	bl	23680 <assertion_failed>
   2aea4:	e3a02091 	mov	r2, #145	; 0x91
   2aea8:	e59f100c 	ldr	r1, [pc, #12]	; 2aebc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2aeac:	e59f0014 	ldr	r0, [pc, #20]	; 2aec8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   2aeb0:	ebffe1f2 	bl	23680 <assertion_failed>
   2aeb4:	0003e2a8 	.word	0x0003e2a8
   2aeb8:	2000b000 	.word	0x2000b000
   2aebc:	0003b150 	.word	0x0003b150
   2aec0:	0003b160 	.word	0x0003b160
   2aec4:	0003b194 	.word	0x0003b194
   2aec8:	0003b174 	.word	0x0003b174

0002aecc <CInterruptSystem::DisconnectFIQ()>:
   2aecc:	e59f3068 	ldr	r3, [pc, #104]	; 2af3c <CInterruptSystem::DisconnectFIQ()+0x70>
   2aed0:	e5d31001 	ldrb	r1, [r3, #1]
   2aed4:	e5d32000 	ldrb	r2, [r3]
   2aed8:	e5d30002 	ldrb	r0, [r3, #2]
   2aedc:	e1822401 	orr	r2, r2, r1, lsl #8
   2aee0:	e5d31003 	ldrb	r1, [r3, #3]
   2aee4:	e1822800 	orr	r2, r2, r0, lsl #16
   2aee8:	e1922c01 	orrs	r2, r2, r1, lsl #24
   2aeec:	0a00000d 	beq	2af28 <CInterruptSystem::DisconnectFIQ()+0x5c>
   2aef0:	e3a02000 	mov	r2, #0
   2aef4:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2aef8:	e59f1040 	ldr	r1, [pc, #64]	; 2af40 <CInterruptSystem::DisconnectFIQ()+0x74>
   2aefc:	e581220c 	str	r2, [r1, #524]	; 0x20c
   2af00:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   2af04:	e5c32000 	strb	r2, [r3]
   2af08:	e5c32001 	strb	r2, [r3, #1]
   2af0c:	e5c32002 	strb	r2, [r3, #2]
   2af10:	e5c32003 	strb	r2, [r3, #3]
   2af14:	e5c32004 	strb	r2, [r3, #4]
   2af18:	e5c32005 	strb	r2, [r3, #5]
   2af1c:	e5c32006 	strb	r2, [r3, #6]
   2af20:	e5c32007 	strb	r2, [r3, #7]
   2af24:	e12fff1e 	bx	lr
   2af28:	e92d4010 	push	{r4, lr}
   2af2c:	e3a0209b 	mov	r2, #155	; 0x9b
   2af30:	e59f100c 	ldr	r1, [pc, #12]	; 2af44 <CInterruptSystem::DisconnectFIQ()+0x78>
   2af34:	e59f000c 	ldr	r0, [pc, #12]	; 2af48 <CInterruptSystem::DisconnectFIQ()+0x7c>
   2af38:	ebffe1d0 	bl	23680 <assertion_failed>
   2af3c:	0003e2a8 	.word	0x0003e2a8
   2af40:	2000b000 	.word	0x2000b000
   2af44:	0003b150 	.word	0x0003b150
   2af48:	0003b18c 	.word	0x0003b18c

0002af4c <CInterruptSystem::EnableIRQ(unsigned int)>:
   2af4c:	e3a03000 	mov	r3, #0
   2af50:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2af54:	e3500047 	cmp	r0, #71	; 0x47
   2af58:	8a00000e 	bhi	2af98 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
   2af5c:	e350001f 	cmp	r0, #31
   2af60:	9a00000a 	bls	2af90 <CInterruptSystem::EnableIRQ(unsigned int)+0x44>
   2af64:	e59f3040 	ldr	r3, [pc, #64]	; 2afac <CInterruptSystem::EnableIRQ(unsigned int)+0x60>
   2af68:	e350003f 	cmp	r0, #63	; 0x3f
   2af6c:	e59f203c 	ldr	r2, [pc, #60]	; 2afb0 <CInterruptSystem::EnableIRQ(unsigned int)+0x64>
   2af70:	91a02003 	movls	r2, r3
   2af74:	e3a03001 	mov	r3, #1
   2af78:	e200001f 	and	r0, r0, #31
   2af7c:	e1a00013 	lsl	r0, r3, r0
   2af80:	e5820000 	str	r0, [r2]
   2af84:	e3a03000 	mov	r3, #0
   2af88:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2af8c:	e12fff1e 	bx	lr
   2af90:	e59f201c 	ldr	r2, [pc, #28]	; 2afb4 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
   2af94:	eafffff6 	b	2af74 <CInterruptSystem::EnableIRQ(unsigned int)+0x28>
   2af98:	e92d4010 	push	{r4, lr}
   2af9c:	e3a020a7 	mov	r2, #167	; 0xa7
   2afa0:	e59f1010 	ldr	r1, [pc, #16]	; 2afb8 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   2afa4:	e59f0010 	ldr	r0, [pc, #16]	; 2afbc <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   2afa8:	ebffe1b4 	bl	23680 <assertion_failed>
   2afac:	2000b214 	.word	0x2000b214
   2afb0:	2000b218 	.word	0x2000b218
   2afb4:	2000b210 	.word	0x2000b210
   2afb8:	0003b150 	.word	0x0003b150
   2afbc:	0003b1a4 	.word	0x0003b1a4

0002afc0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   2afc0:	e3510047 	cmp	r1, #71	; 0x47
   2afc4:	e92d4010 	push	{r4, lr}
   2afc8:	8a000008 	bhi	2aff0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x30>
   2afcc:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   2afd0:	e080e101 	add	lr, r0, r1, lsl #2
   2afd4:	e35c0000 	cmp	ip, #0
   2afd8:	1a000008 	bne	2b000 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x40>
   2afdc:	e7802101 	str	r2, [r0, r1, lsl #2]
   2afe0:	e58e3120 	str	r3, [lr, #288]	; 0x120
   2afe4:	e1a00001 	mov	r0, r1
   2afe8:	e8bd4010 	pop	{r4, lr}
   2afec:	eaffffd6 	b	2af4c <CInterruptSystem::EnableIRQ(unsigned int)>
   2aff0:	e3a02076 	mov	r2, #118	; 0x76
   2aff4:	e59f1014 	ldr	r1, [pc, #20]	; 2b010 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   2aff8:	e59f0014 	ldr	r0, [pc, #20]	; 2b014 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x54>
   2affc:	ebffe19f 	bl	23680 <assertion_failed>
   2b000:	e3a02077 	mov	r2, #119	; 0x77
   2b004:	e59f1004 	ldr	r1, [pc, #4]	; 2b010 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   2b008:	e59f0008 	ldr	r0, [pc, #8]	; 2b018 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
   2b00c:	ebffe19b 	bl	23680 <assertion_failed>
   2b010:	0003b150 	.word	0x0003b150
   2b014:	0003b1a4 	.word	0x0003b1a4
   2b018:	0003b1b8 	.word	0x0003b1b8

0002b01c <CInterruptSystem::DisableIRQ(unsigned int)>:
   2b01c:	e3a03000 	mov	r3, #0
   2b020:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b024:	e3500047 	cmp	r0, #71	; 0x47
   2b028:	8a00000e 	bhi	2b068 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
   2b02c:	e350001f 	cmp	r0, #31
   2b030:	9a00000a 	bls	2b060 <CInterruptSystem::DisableIRQ(unsigned int)+0x44>
   2b034:	e59f3040 	ldr	r3, [pc, #64]	; 2b07c <CInterruptSystem::DisableIRQ(unsigned int)+0x60>
   2b038:	e350003f 	cmp	r0, #63	; 0x3f
   2b03c:	e59f203c 	ldr	r2, [pc, #60]	; 2b080 <CInterruptSystem::DisableIRQ(unsigned int)+0x64>
   2b040:	91a02003 	movls	r2, r3
   2b044:	e3a03001 	mov	r3, #1
   2b048:	e200001f 	and	r0, r0, #31
   2b04c:	e1a00013 	lsl	r0, r3, r0
   2b050:	e5820000 	str	r0, [r2]
   2b054:	e3a03000 	mov	r3, #0
   2b058:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b05c:	e12fff1e 	bx	lr
   2b060:	e59f201c 	ldr	r2, [pc, #28]	; 2b084 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
   2b064:	eafffff6 	b	2b044 <CInterruptSystem::DisableIRQ(unsigned int)+0x28>
   2b068:	e92d4010 	push	{r4, lr}
   2b06c:	e3a020bf 	mov	r2, #191	; 0xbf
   2b070:	e59f1010 	ldr	r1, [pc, #16]	; 2b088 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   2b074:	e59f0010 	ldr	r0, [pc, #16]	; 2b08c <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   2b078:	ebffe180 	bl	23680 <assertion_failed>
   2b07c:	2000b220 	.word	0x2000b220
   2b080:	2000b224 	.word	0x2000b224
   2b084:	2000b21c 	.word	0x2000b21c
   2b088:	0003b150 	.word	0x0003b150
   2b08c:	0003b1a4 	.word	0x0003b1a4

0002b090 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   2b090:	e3510047 	cmp	r1, #71	; 0x47
   2b094:	e92d4070 	push	{r4, r5, r6, lr}
   2b098:	8a00000b 	bhi	2b0cc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   2b09c:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   2b0a0:	e1a04001 	mov	r4, r1
   2b0a4:	e3530000 	cmp	r3, #0
   2b0a8:	e1a05000 	mov	r5, r0
   2b0ac:	e0806101 	add	r6, r0, r1, lsl #2
   2b0b0:	0a000009 	beq	2b0dc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   2b0b4:	e1a00001 	mov	r0, r1
   2b0b8:	ebffffd7 	bl	2b01c <CInterruptSystem::DisableIRQ(unsigned int)>
   2b0bc:	e3a03000 	mov	r3, #0
   2b0c0:	e7853104 	str	r3, [r5, r4, lsl #2]
   2b0c4:	e5863120 	str	r3, [r6, #288]	; 0x120
   2b0c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b0cc:	e3a02081 	mov	r2, #129	; 0x81
   2b0d0:	e59f1014 	ldr	r1, [pc, #20]	; 2b0ec <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   2b0d4:	e59f0014 	ldr	r0, [pc, #20]	; 2b0f0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x60>
   2b0d8:	ebffe168 	bl	23680 <assertion_failed>
   2b0dc:	e3a02082 	mov	r2, #130	; 0x82
   2b0e0:	e59f1004 	ldr	r1, [pc, #4]	; 2b0ec <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   2b0e4:	e59f0008 	ldr	r0, [pc, #8]	; 2b0f4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   2b0e8:	ebffe164 	bl	23680 <assertion_failed>
   2b0ec:	0003b150 	.word	0x0003b150
   2b0f0:	0003b1a4 	.word	0x0003b1a4
   2b0f4:	0003b1d4 	.word	0x0003b1d4

0002b0f8 <CInterruptSystem::EnableFIQ(unsigned int)>:
   2b0f8:	e3a03000 	mov	r3, #0
   2b0fc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b100:	e3500047 	cmp	r0, #71	; 0x47
   2b104:	8a000004 	bhi	2b11c <CInterruptSystem::EnableFIQ(unsigned int)+0x24>
   2b108:	e59f2020 	ldr	r2, [pc, #32]	; 2b130 <CInterruptSystem::EnableFIQ(unsigned int)+0x38>
   2b10c:	e3800080 	orr	r0, r0, #128	; 0x80
   2b110:	e582020c 	str	r0, [r2, #524]	; 0x20c
   2b114:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b118:	e12fff1e 	bx	lr
   2b11c:	e92d4010 	push	{r4, lr}
   2b120:	e3a020d7 	mov	r2, #215	; 0xd7
   2b124:	e59f1008 	ldr	r1, [pc, #8]	; 2b134 <CInterruptSystem::EnableFIQ(unsigned int)+0x3c>
   2b128:	e59f0008 	ldr	r0, [pc, #8]	; 2b138 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   2b12c:	ebffe153 	bl	23680 <assertion_failed>
   2b130:	2000b000 	.word	0x2000b000
   2b134:	0003b150 	.word	0x0003b150
   2b138:	0003b160 	.word	0x0003b160

0002b13c <CInterruptSystem::DisableFIQ()>:
   2b13c:	e3a03000 	mov	r3, #0
   2b140:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b144:	e59f2008 	ldr	r2, [pc, #8]	; 2b154 <CInterruptSystem::DisableFIQ()+0x18>
   2b148:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2b14c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b150:	e12fff1e 	bx	lr
   2b154:	2000b000 	.word	0x2000b000

0002b158 <CInterruptSystem::Get()>:
   2b158:	e59f3020 	ldr	r3, [pc, #32]	; 2b180 <CInterruptSystem::Get()+0x28>
   2b15c:	e5930000 	ldr	r0, [r3]
   2b160:	e3500000 	cmp	r0, #0
   2b164:	0a000000 	beq	2b16c <CInterruptSystem::Get()+0x14>
   2b168:	e12fff1e 	bx	lr
   2b16c:	e92d4010 	push	{r4, lr}
   2b170:	e3a020e9 	mov	r2, #233	; 0xe9
   2b174:	e59f1008 	ldr	r1, [pc, #8]	; 2b184 <CInterruptSystem::Get()+0x2c>
   2b178:	e59f0008 	ldr	r0, [pc, #8]	; 2b188 <CInterruptSystem::Get()+0x30>
   2b17c:	ebffe13f 	bl	23680 <assertion_failed>
   2b180:	0003e430 	.word	0x0003e430
   2b184:	0003b150 	.word	0x0003b150
   2b188:	00038ecc 	.word	0x00038ecc

0002b18c <CInterruptSystem::CallIRQHandler(unsigned int)>:
   2b18c:	e3510047 	cmp	r1, #71	; 0x47
   2b190:	e92d4010 	push	{r4, lr}
   2b194:	8a00000b 	bhi	2b1c8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   2b198:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   2b19c:	e0800101 	add	r0, r0, r1, lsl #2
   2b1a0:	e3540000 	cmp	r4, #0
   2b1a4:	0a000003 	beq	2b1b8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   2b1a8:	e5900120 	ldr	r0, [r0, #288]	; 0x120
   2b1ac:	e12fff34 	blx	r4
   2b1b0:	e3a00001 	mov	r0, #1
   2b1b4:	e8bd8010 	pop	{r4, pc}
   2b1b8:	e1a00001 	mov	r0, r1
   2b1bc:	ebffff96 	bl	2b01c <CInterruptSystem::DisableIRQ(unsigned int)>
   2b1c0:	e1a00004 	mov	r0, r4
   2b1c4:	e8bd8010 	pop	{r4, pc}
   2b1c8:	e3a020ef 	mov	r2, #239	; 0xef
   2b1cc:	e59f1004 	ldr	r1, [pc, #4]	; 2b1d8 <CInterruptSystem::CallIRQHandler(unsigned int)+0x4c>
   2b1d0:	e59f0004 	ldr	r0, [pc, #4]	; 2b1dc <CInterruptSystem::CallIRQHandler(unsigned int)+0x50>
   2b1d4:	ebffe129 	bl	23680 <assertion_failed>
   2b1d8:	0003b150 	.word	0x0003b150
   2b1dc:	0003b1a4 	.word	0x0003b1a4

0002b1e0 <CInterruptSystem::InterruptHandler()>:
   2b1e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2b1e4:	e59f70a4 	ldr	r7, [pc, #164]	; 2b290 <CInterruptSystem::InterruptHandler()+0xb0>
   2b1e8:	e24dd010 	sub	sp, sp, #16
   2b1ec:	e5973000 	ldr	r3, [r7]
   2b1f0:	e3530000 	cmp	r3, #0
   2b1f4:	0a000021 	beq	2b280 <CInterruptSystem::InterruptHandler()+0xa0>
   2b1f8:	e3a06000 	mov	r6, #0
   2b1fc:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   2b200:	e59f308c 	ldr	r3, [pc, #140]	; 2b294 <CInterruptSystem::InterruptHandler()+0xb4>
   2b204:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   2b208:	e58d2004 	str	r2, [sp, #4]
   2b20c:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   2b210:	e58d2008 	str	r2, [sp, #8]
   2b214:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   2b218:	e6ef3073 	uxtb	r3, r3
   2b21c:	e58d300c 	str	r3, [sp, #12]
   2b220:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   2b224:	e28d8004 	add	r8, sp, #4
   2b228:	e4984004 	ldr	r4, [r8], #4
   2b22c:	e3540000 	cmp	r4, #0
   2b230:	0a00000d 	beq	2b26c <CInterruptSystem::InterruptHandler()+0x8c>
   2b234:	e1a05006 	mov	r5, r6
   2b238:	ea000002 	b	2b248 <CInterruptSystem::InterruptHandler()+0x68>
   2b23c:	e1b040a4 	lsrs	r4, r4, #1
   2b240:	e2855001 	add	r5, r5, #1
   2b244:	0a000008 	beq	2b26c <CInterruptSystem::InterruptHandler()+0x8c>
   2b248:	e3140001 	tst	r4, #1
   2b24c:	0afffffa 	beq	2b23c <CInterruptSystem::InterruptHandler()+0x5c>
   2b250:	e1a01005 	mov	r1, r5
   2b254:	e5970000 	ldr	r0, [r7]
   2b258:	ebffffcb 	bl	2b18c <CInterruptSystem::CallIRQHandler(unsigned int)>
   2b25c:	e3500000 	cmp	r0, #0
   2b260:	0afffff5 	beq	2b23c <CInterruptSystem::InterruptHandler()+0x5c>
   2b264:	e28dd010 	add	sp, sp, #16
   2b268:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b26c:	e2866020 	add	r6, r6, #32
   2b270:	e3560060 	cmp	r6, #96	; 0x60
   2b274:	1affffeb 	bne	2b228 <CInterruptSystem::InterruptHandler()+0x48>
   2b278:	e28dd010 	add	sp, sp, #16
   2b27c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b280:	e59f2010 	ldr	r2, [pc, #16]	; 2b298 <CInterruptSystem::InterruptHandler()+0xb8>
   2b284:	e59f1010 	ldr	r1, [pc, #16]	; 2b29c <CInterruptSystem::InterruptHandler()+0xbc>
   2b288:	e59f0010 	ldr	r0, [pc, #16]	; 2b2a0 <CInterruptSystem::InterruptHandler()+0xc0>
   2b28c:	ebffe0fb 	bl	23680 <assertion_failed>
   2b290:	0003e430 	.word	0x0003e430
   2b294:	2000b000 	.word	0x2000b000
   2b298:	00000102 	.word	0x00000102
   2b29c:	0003b150 	.word	0x0003b150
   2b2a0:	00038ecc 	.word	0x00038ecc

0002b2a4 <InterruptHandler>:
   2b2a4:	e92d4010 	push	{r4, lr}
   2b2a8:	e3a04000 	mov	r4, #0
   2b2ac:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2b2b0:	ebffffca 	bl	2b1e0 <CInterruptSystem::InterruptHandler()>
   2b2b4:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2b2b8:	e8bd8010 	pop	{r4, pc}

0002b2bc <__cxa_pure_virtual>:
   2b2bc:	e92d4010 	push	{r4, lr}
   2b2c0:	e3a02018 	mov	r2, #24
   2b2c4:	e59f1004 	ldr	r1, [pc, #4]	; 2b2d0 <__cxa_pure_virtual+0x14>
   2b2c8:	e59f0004 	ldr	r0, [pc, #4]	; 2b2d4 <__cxa_pure_virtual+0x18>
   2b2cc:	ebffe0eb 	bl	23680 <assertion_failed>
   2b2d0:	0003b1f0 	.word	0x0003b1f0
   2b2d4:	00035260 	.word	0x00035260

0002b2d8 <malloc>:
   2b2d8:	e59f300c 	ldr	r3, [pc, #12]	; 2b2ec <malloc+0x14>
   2b2dc:	e1a01000 	mov	r1, r0
   2b2e0:	e5930000 	ldr	r0, [r3]
   2b2e4:	e280000c 	add	r0, r0, #12
   2b2e8:	eafffb35 	b	29fc4 <CHeapAllocator::Allocate(unsigned int)>
   2b2ec:	0003e3d8 	.word	0x0003e3d8

0002b2f0 <free>:
   2b2f0:	e59f300c 	ldr	r3, [pc, #12]	; 2b304 <free+0x14>
   2b2f4:	e1a01000 	mov	r1, r0
   2b2f8:	e5930000 	ldr	r0, [r3]
   2b2fc:	e280000c 	add	r0, r0, #12
   2b300:	eafffbad 	b	2a1bc <CHeapAllocator::Free(void*)>
   2b304:	0003e3d8 	.word	0x0003e3d8

0002b308 <calloc>:
   2b308:	e92d4070 	push	{r4, r5, r6, lr}
   2b30c:	e0040190 	mul	r4, r0, r1
   2b310:	e3540000 	cmp	r4, #0
   2b314:	03a04001 	moveq	r4, #1
   2b318:	e1540000 	cmp	r4, r0
   2b31c:	3a00000b 	bcc	2b350 <calloc+0x48>
   2b320:	e59f3038 	ldr	r3, [pc, #56]	; 2b360 <calloc+0x58>
   2b324:	e1a01004 	mov	r1, r4
   2b328:	e5930000 	ldr	r0, [r3]
   2b32c:	e280000c 	add	r0, r0, #12
   2b330:	ebfffb23 	bl	29fc4 <CHeapAllocator::Allocate(unsigned int)>
   2b334:	e2505000 	subs	r5, r0, #0
   2b338:	0a000002 	beq	2b348 <calloc+0x40>
   2b33c:	e1a02004 	mov	r2, r4
   2b340:	e3a01000 	mov	r1, #0
   2b344:	ebfff69a 	bl	28db4 <memset>
   2b348:	e1a00005 	mov	r0, r5
   2b34c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b350:	e59f100c 	ldr	r1, [pc, #12]	; 2b364 <calloc+0x5c>
   2b354:	e3a0202b 	mov	r2, #43	; 0x2b
   2b358:	e281000c 	add	r0, r1, #12
   2b35c:	ebffe0c7 	bl	23680 <assertion_failed>
   2b360:	0003e3d8 	.word	0x0003e3d8
   2b364:	0003b200 	.word	0x0003b200

0002b368 <realloc>:
   2b368:	e59f3010 	ldr	r3, [pc, #16]	; 2b380 <realloc+0x18>
   2b36c:	e1a02001 	mov	r2, r1
   2b370:	e5933000 	ldr	r3, [r3]
   2b374:	e1a01000 	mov	r1, r0
   2b378:	e283000c 	add	r0, r3, #12
   2b37c:	eafffbd4 	b	2a2d4 <CHeapAllocator::ReAllocate(void*, unsigned int)>
   2b380:	0003e3d8 	.word	0x0003e3d8

0002b384 <palloc>:
   2b384:	e59f3008 	ldr	r3, [pc, #8]	; 2b394 <palloc+0x10>
   2b388:	e5930000 	ldr	r0, [r3]
   2b38c:	e28000c8 	add	r0, r0, #200	; 0xc8
   2b390:	ea000287 	b	2bdb4 <CPageAllocator::Allocate()>
   2b394:	0003e3d8 	.word	0x0003e3d8

0002b398 <pfree>:
   2b398:	e59f300c 	ldr	r3, [pc, #12]	; 2b3ac <pfree+0x14>
   2b39c:	e1a01000 	mov	r1, r0
   2b3a0:	e5930000 	ldr	r0, [r3]
   2b3a4:	e28000c8 	add	r0, r0, #200	; 0xc8
   2b3a8:	ea0002b6 	b	2be88 <CPageAllocator::Free(void*)>
   2b3ac:	0003e3d8 	.word	0x0003e3d8

0002b3b0 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   2b3b0:	e5801000 	str	r1, [r0]
   2b3b4:	e5c02004 	strb	r2, [r0, #4]
   2b3b8:	e12fff1e 	bx	lr

0002b3bc <CBcmMailBox::~CBcmMailBox()>:
   2b3bc:	e12fff1e 	bx	lr

0002b3c0 <CBcmMailBox::WriteRead(unsigned int)>:
   2b3c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b3c4:	e3a03000 	mov	r3, #0
   2b3c8:	e24dd00c 	sub	sp, sp, #12
   2b3cc:	e1a05000 	mov	r5, r0
   2b3d0:	e1a06001 	mov	r6, r1
   2b3d4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b3d8:	e5d03004 	ldrb	r3, [r0, #4]
   2b3dc:	e3530000 	cmp	r3, #0
   2b3e0:	1a000003 	bne	2b3f4 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   2b3e4:	e59f30e0 	ldr	r3, [pc, #224]	; 2b4cc <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2b3e8:	e5930000 	ldr	r0, [r3]
   2b3ec:	e3500000 	cmp	r0, #0
   2b3f0:	1a00002f 	bne	2b4b4 <CBcmMailBox::WriteRead(unsigned int)+0xf4>
   2b3f4:	e59f40d4 	ldr	r4, [pc, #212]	; 2b4d0 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2b3f8:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2b3fc:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2b400:	1a000006 	bne	2b420 <CBcmMailBox::WriteRead(unsigned int)+0x60>
   2b404:	e3a07014 	mov	r7, #20
   2b408:	e1a00007 	mov	r0, r7
   2b40c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2b410:	ebfff621 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
   2b414:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2b418:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2b41c:	0afffff9 	beq	2b408 <CBcmMailBox::WriteRead(unsigned int)+0x48>
   2b420:	e59f10a8 	ldr	r1, [pc, #168]	; 2b4d0 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2b424:	e59138b8 	ldr	r3, [r1, #2232]	; 0x8b8
   2b428:	e3530000 	cmp	r3, #0
   2b42c:	bafffffc 	blt	2b424 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   2b430:	e316000f 	tst	r6, #15
   2b434:	1a000020 	bne	2b4bc <CBcmMailBox::WriteRead(unsigned int)+0xfc>
   2b438:	e5953000 	ldr	r3, [r5]
   2b43c:	e59f208c 	ldr	r2, [pc, #140]	; 2b4d0 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2b440:	e1866003 	orr	r6, r6, r3
   2b444:	e58168a0 	str	r6, [r1, #2208]	; 0x8a0
   2b448:	e5950000 	ldr	r0, [r5]
   2b44c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2b450:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2b454:	1afffffc 	bne	2b44c <CBcmMailBox::WriteRead(unsigned int)+0x8c>
   2b458:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   2b45c:	e203100f 	and	r1, r3, #15
   2b460:	e1510000 	cmp	r1, r0
   2b464:	1afffff8 	bne	2b44c <CBcmMailBox::WriteRead(unsigned int)+0x8c>
   2b468:	e5d52004 	ldrb	r2, [r5, #4]
   2b46c:	e3c3000f 	bic	r0, r3, #15
   2b470:	e3520000 	cmp	r2, #0
   2b474:	1a000003 	bne	2b488 <CBcmMailBox::WriteRead(unsigned int)+0xc8>
   2b478:	e59f304c 	ldr	r3, [pc, #76]	; 2b4cc <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2b47c:	e5933000 	ldr	r3, [r3]
   2b480:	e3530000 	cmp	r3, #0
   2b484:	1a000003 	bne	2b498 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   2b488:	e3a03000 	mov	r3, #0
   2b48c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b490:	e28dd00c 	add	sp, sp, #12
   2b494:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b498:	e58d0004 	str	r0, [sp, #4]
   2b49c:	ebfffdf1 	bl	2ac68 <LeaveCritical>
   2b4a0:	e59d0004 	ldr	r0, [sp, #4]
   2b4a4:	e3a03000 	mov	r3, #0
   2b4a8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b4ac:	e28dd00c 	add	sp, sp, #12
   2b4b0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b4b4:	ebfffdc0 	bl	2abbc <EnterCritical>
   2b4b8:	eaffffcd 	b	2b3f4 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   2b4bc:	e3a02062 	mov	r2, #98	; 0x62
   2b4c0:	e59f100c 	ldr	r1, [pc, #12]	; 2b4d4 <CBcmMailBox::WriteRead(unsigned int)+0x114>
   2b4c4:	e59f000c 	ldr	r0, [pc, #12]	; 2b4d8 <CBcmMailBox::WriteRead(unsigned int)+0x118>
   2b4c8:	ebffe06c 	bl	23680 <assertion_failed>
   2b4cc:	0003e434 	.word	0x0003e434
   2b4d0:	2000b000 	.word	0x2000b000
   2b4d4:	0003b220 	.word	0x0003b220
   2b4d8:	0003b230 	.word	0x0003b230

0002b4dc <CBcmMailBox::Flush()>:
   2b4dc:	e92d4070 	push	{r4, r5, r6, lr}
   2b4e0:	e59f4028 	ldr	r4, [pc, #40]	; 2b510 <CBcmMailBox::Flush()+0x34>
   2b4e4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2b4e8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2b4ec:	18bd8070 	popne	{r4, r5, r6, pc}
   2b4f0:	e3a05014 	mov	r5, #20
   2b4f4:	e1a00005 	mov	r0, r5
   2b4f8:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2b4fc:	ebfff5e6 	bl	28c9c <CTimer::SimpleMsDelay(unsigned int)>
   2b500:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2b504:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2b508:	0afffff9 	beq	2b4f4 <CBcmMailBox::Flush()+0x18>
   2b50c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b510:	2000b000 	.word	0x2000b000

0002b514 <CBcmMailBox::Read()>:
   2b514:	e5901000 	ldr	r1, [r0]
   2b518:	e59f2020 	ldr	r2, [pc, #32]	; 2b540 <CBcmMailBox::Read()+0x2c>
   2b51c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2b520:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2b524:	1afffffc 	bne	2b51c <CBcmMailBox::Read()+0x8>
   2b528:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   2b52c:	e200300f 	and	r3, r0, #15
   2b530:	e1510003 	cmp	r1, r3
   2b534:	1afffff8 	bne	2b51c <CBcmMailBox::Read()+0x8>
   2b538:	e3c0000f 	bic	r0, r0, #15
   2b53c:	e12fff1e 	bx	lr
   2b540:	2000b000 	.word	0x2000b000

0002b544 <CBcmMailBox::Write(unsigned int)>:
   2b544:	e59f2034 	ldr	r2, [pc, #52]	; 2b580 <CBcmMailBox::Write(unsigned int)+0x3c>
   2b548:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   2b54c:	e3530000 	cmp	r3, #0
   2b550:	bafffffc 	blt	2b548 <CBcmMailBox::Write(unsigned int)+0x4>
   2b554:	e311000f 	tst	r1, #15
   2b558:	1a000003 	bne	2b56c <CBcmMailBox::Write(unsigned int)+0x28>
   2b55c:	e5903000 	ldr	r3, [r0]
   2b560:	e1811003 	orr	r1, r1, r3
   2b564:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   2b568:	e12fff1e 	bx	lr
   2b56c:	e92d4010 	push	{r4, lr}
   2b570:	e3a02062 	mov	r2, #98	; 0x62
   2b574:	e59f1008 	ldr	r1, [pc, #8]	; 2b584 <CBcmMailBox::Write(unsigned int)+0x40>
   2b578:	e59f0008 	ldr	r0, [pc, #8]	; 2b588 <CBcmMailBox::Write(unsigned int)+0x44>
   2b57c:	ebffe03f 	bl	23680 <assertion_failed>
   2b580:	2000b000 	.word	0x2000b000
   2b584:	0003b220 	.word	0x0003b220
   2b588:	0003b230 	.word	0x0003b230

0002b58c <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   2b58c:	e3a02000 	mov	r2, #0
   2b590:	e59f3004 	ldr	r3, [pc, #4]	; 2b59c <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   2b594:	e5832000 	str	r2, [r3]
   2b598:	e12fff1e 	bx	lr
   2b59c:	0003e434 	.word	0x0003e434

0002b5a0 <DelayLoop>:
   2b5a0:	e1a01001 	mov	r1, r1
   2b5a4:	e1a02002 	mov	r2, r2
   2b5a8:	e2500001 	subs	r0, r0, #1
   2b5ac:	8afffffb 	bhi	2b5a0 <DelayLoop>
   2b5b0:	e1a0f00e 	mov	pc, lr

0002b5b4 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   2b5b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2b5b8:	e3a0e000 	mov	lr, #0
   2b5bc:	e1a03000 	mov	r3, r0
   2b5c0:	e1a0c00e 	mov	ip, lr
   2b5c4:	e5801000 	str	r1, [r0]
   2b5c8:	e28020dc 	add	r2, r0, #220	; 0xdc
   2b5cc:	e5e3e004 	strb	lr, [r3, #4]!
   2b5d0:	e5a3c004 	str	ip, [r3, #4]!
   2b5d4:	e1530002 	cmp	r3, r2
   2b5d8:	1afffffc 	bne	2b5d0 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   2b5dc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002b5e0 <CGPIOManager::~CGPIOManager()>:
   2b5e0:	e92d4010 	push	{r4, lr}
   2b5e4:	e2803004 	add	r3, r0, #4
   2b5e8:	e1a04000 	mov	r4, r0
   2b5ec:	e28010dc 	add	r1, r0, #220	; 0xdc
   2b5f0:	ea000001 	b	2b5fc <CGPIOManager::~CGPIOManager()+0x1c>
   2b5f4:	e1530001 	cmp	r3, r1
   2b5f8:	0a000006 	beq	2b618 <CGPIOManager::~CGPIOManager()+0x38>
   2b5fc:	e5b32004 	ldr	r2, [r3, #4]!
   2b600:	e3520000 	cmp	r2, #0
   2b604:	0afffffa 	beq	2b5f4 <CGPIOManager::~CGPIOManager()+0x14>
   2b608:	e3a0202c 	mov	r2, #44	; 0x2c
   2b60c:	e59f103c 	ldr	r1, [pc, #60]	; 2b650 <CGPIOManager::~CGPIOManager()+0x70>
   2b610:	e59f003c 	ldr	r0, [pc, #60]	; 2b654 <CGPIOManager::~CGPIOManager()+0x74>
   2b614:	ebffe019 	bl	23680 <assertion_failed>
   2b618:	e5d43004 	ldrb	r3, [r4, #4]
   2b61c:	e3530000 	cmp	r3, #0
   2b620:	0a000004 	beq	2b638 <CGPIOManager::~CGPIOManager()+0x58>
   2b624:	e5940000 	ldr	r0, [r4]
   2b628:	e3500000 	cmp	r0, #0
   2b62c:	0a000003 	beq	2b640 <CGPIOManager::~CGPIOManager()+0x60>
   2b630:	e3a01034 	mov	r1, #52	; 0x34
   2b634:	ebfffe95 	bl	2b090 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2b638:	e1a00004 	mov	r0, r4
   2b63c:	e8bd8010 	pop	{r4, pc}
   2b640:	e3a02032 	mov	r2, #50	; 0x32
   2b644:	e59f1004 	ldr	r1, [pc, #4]	; 2b650 <CGPIOManager::~CGPIOManager()+0x70>
   2b648:	e59f0008 	ldr	r0, [pc, #8]	; 2b658 <CGPIOManager::~CGPIOManager()+0x78>
   2b64c:	ebffe00b 	bl	23680 <assertion_failed>
   2b650:	0003b244 	.word	0x0003b244
   2b654:	0003b254 	.word	0x0003b254
   2b658:	0003b268 	.word	0x0003b268

0002b65c <CGPIOManager::Initialize()>:
   2b65c:	e5d03004 	ldrb	r3, [r0, #4]
   2b660:	e92d4010 	push	{r4, lr}
   2b664:	e3530000 	cmp	r3, #0
   2b668:	1a00000a 	bne	2b698 <CGPIOManager::Initialize()+0x3c>
   2b66c:	e1a04000 	mov	r4, r0
   2b670:	e5900000 	ldr	r0, [r0]
   2b674:	e3500000 	cmp	r0, #0
   2b678:	0a00000a 	beq	2b6a8 <CGPIOManager::Initialize()+0x4c>
   2b67c:	e1a03004 	mov	r3, r4
   2b680:	e59f2030 	ldr	r2, [pc, #48]	; 2b6b8 <CGPIOManager::Initialize()+0x5c>
   2b684:	e3a01034 	mov	r1, #52	; 0x34
   2b688:	ebfffe4c 	bl	2afc0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2b68c:	e3a00001 	mov	r0, #1
   2b690:	e5c40004 	strb	r0, [r4, #4]
   2b694:	e8bd8010 	pop	{r4, pc}
   2b698:	e3a0203b 	mov	r2, #59	; 0x3b
   2b69c:	e59f1018 	ldr	r1, [pc, #24]	; 2b6bc <CGPIOManager::Initialize()+0x60>
   2b6a0:	e59f0018 	ldr	r0, [pc, #24]	; 2b6c0 <CGPIOManager::Initialize()+0x64>
   2b6a4:	ebffdff5 	bl	23680 <assertion_failed>
   2b6a8:	e3a0203c 	mov	r2, #60	; 0x3c
   2b6ac:	e59f1008 	ldr	r1, [pc, #8]	; 2b6bc <CGPIOManager::Initialize()+0x60>
   2b6b0:	e59f000c 	ldr	r0, [pc, #12]	; 2b6c4 <CGPIOManager::Initialize()+0x68>
   2b6b4:	ebffdff1 	bl	23680 <assertion_failed>
   2b6b8:	0002b8b8 	.word	0x0002b8b8
   2b6bc:	0003b244 	.word	0x0003b244
   2b6c0:	0003b27c 	.word	0x0003b27c
   2b6c4:	0003b268 	.word	0x0003b268

0002b6c8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   2b6c8:	e5d03004 	ldrb	r3, [r0, #4]
   2b6cc:	e92d4010 	push	{r4, lr}
   2b6d0:	e3530000 	cmp	r3, #0
   2b6d4:	0a00000a 	beq	2b704 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   2b6d8:	e3510000 	cmp	r1, #0
   2b6dc:	0a00000c 	beq	2b714 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   2b6e0:	e5913004 	ldr	r3, [r1, #4]
   2b6e4:	e3530035 	cmp	r3, #53	; 0x35
   2b6e8:	8a00000d 	bhi	2b724 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   2b6ec:	e0800103 	add	r0, r0, r3, lsl #2
   2b6f0:	e5903008 	ldr	r3, [r0, #8]
   2b6f4:	e3530000 	cmp	r3, #0
   2b6f8:	1a00000d 	bne	2b734 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   2b6fc:	e5801008 	str	r1, [r0, #8]
   2b700:	e8bd8010 	pop	{r4, pc}
   2b704:	e3a02045 	mov	r2, #69	; 0x45
   2b708:	e59f1034 	ldr	r1, [pc, #52]	; 2b744 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2b70c:	e59f0034 	ldr	r0, [pc, #52]	; 2b748 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   2b710:	ebffdfda 	bl	23680 <assertion_failed>
   2b714:	e3a02047 	mov	r2, #71	; 0x47
   2b718:	e59f1024 	ldr	r1, [pc, #36]	; 2b744 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2b71c:	e59f0028 	ldr	r0, [pc, #40]	; 2b74c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   2b720:	ebffdfd6 	bl	23680 <assertion_failed>
   2b724:	e3a02049 	mov	r2, #73	; 0x49
   2b728:	e59f1014 	ldr	r1, [pc, #20]	; 2b744 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2b72c:	e59f001c 	ldr	r0, [pc, #28]	; 2b750 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x88>
   2b730:	ebffdfd2 	bl	23680 <assertion_failed>
   2b734:	e3a0204b 	mov	r2, #75	; 0x4b
   2b738:	e59f1004 	ldr	r1, [pc, #4]	; 2b744 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2b73c:	e59f0010 	ldr	r0, [pc, #16]	; 2b754 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x8c>
   2b740:	ebffdfce 	bl	23680 <assertion_failed>
   2b744:	0003b244 	.word	0x0003b244
   2b748:	0003b290 	.word	0x0003b290
   2b74c:	0003b2a0 	.word	0x0003b2a0
   2b750:	0003b2ac 	.word	0x0003b2ac
   2b754:	0003b254 	.word	0x0003b254

0002b758 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   2b758:	e5d03004 	ldrb	r3, [r0, #4]
   2b75c:	e92d4010 	push	{r4, lr}
   2b760:	e3530000 	cmp	r3, #0
   2b764:	0a00000b 	beq	2b798 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   2b768:	e3510000 	cmp	r1, #0
   2b76c:	0a00000d 	beq	2b7a8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   2b770:	e5913004 	ldr	r3, [r1, #4]
   2b774:	e3530035 	cmp	r3, #53	; 0x35
   2b778:	8a00000e 	bhi	2b7b8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x60>
   2b77c:	e0800103 	add	r0, r0, r3, lsl #2
   2b780:	e5903008 	ldr	r3, [r0, #8]
   2b784:	e3530000 	cmp	r3, #0
   2b788:	0a00000e 	beq	2b7c8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   2b78c:	e3a03000 	mov	r3, #0
   2b790:	e5803008 	str	r3, [r0, #8]
   2b794:	e8bd8010 	pop	{r4, pc}
   2b798:	e3a02052 	mov	r2, #82	; 0x52
   2b79c:	e59f1034 	ldr	r1, [pc, #52]	; 2b7d8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2b7a0:	e59f0034 	ldr	r0, [pc, #52]	; 2b7dc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x84>
   2b7a4:	ebffdfb5 	bl	23680 <assertion_failed>
   2b7a8:	e3a02054 	mov	r2, #84	; 0x54
   2b7ac:	e59f1024 	ldr	r1, [pc, #36]	; 2b7d8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2b7b0:	e59f0028 	ldr	r0, [pc, #40]	; 2b7e0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   2b7b4:	ebffdfb1 	bl	23680 <assertion_failed>
   2b7b8:	e3a02056 	mov	r2, #86	; 0x56
   2b7bc:	e59f1014 	ldr	r1, [pc, #20]	; 2b7d8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2b7c0:	e59f001c 	ldr	r0, [pc, #28]	; 2b7e4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   2b7c4:	ebffdfad 	bl	23680 <assertion_failed>
   2b7c8:	e3a02058 	mov	r2, #88	; 0x58
   2b7cc:	e59f1004 	ldr	r1, [pc, #4]	; 2b7d8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2b7d0:	e59f0010 	ldr	r0, [pc, #16]	; 2b7e8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   2b7d4:	ebffdfa9 	bl	23680 <assertion_failed>
   2b7d8:	0003b244 	.word	0x0003b244
   2b7dc:	0003b290 	.word	0x0003b290
   2b7e0:	0003b2a0 	.word	0x0003b2a0
   2b7e4:	0003b2ac 	.word	0x0003b2ac
   2b7e8:	0003b2c0 	.word	0x0003b2c0

0002b7ec <CGPIOManager::InterruptHandler()>:
   2b7ec:	e5d03004 	ldrb	r3, [r0, #4]
   2b7f0:	e92d4070 	push	{r4, r5, r6, lr}
   2b7f4:	e3530000 	cmp	r3, #0
   2b7f8:	0a00001b 	beq	2b86c <CGPIOManager::InterruptHandler()+0x80>
   2b7fc:	e3a04000 	mov	r4, #0
   2b800:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2b804:	e59f2098 	ldr	r2, [pc, #152]	; 2b8a4 <CGPIOManager::InterruptHandler()+0xb8>
   2b808:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   2b80c:	ea000005 	b	2b828 <CGPIOManager::InterruptHandler()+0x3c>
   2b810:	e2844001 	add	r4, r4, #1
   2b814:	e314001f 	tst	r4, #31
   2b818:	11a030a3 	lsrne	r3, r3, #1
   2b81c:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   2b820:	e3540036 	cmp	r4, #54	; 0x36
   2b824:	0a00000d 	beq	2b860 <CGPIOManager::InterruptHandler()+0x74>
   2b828:	e3130001 	tst	r3, #1
   2b82c:	0afffff7 	beq	2b810 <CGPIOManager::InterruptHandler()+0x24>
   2b830:	e2843002 	add	r3, r4, #2
   2b834:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   2b838:	e3550000 	cmp	r5, #0
   2b83c:	0a00000e 	beq	2b87c <CGPIOManager::InterruptHandler()+0x90>
   2b840:	e1a00005 	mov	r0, r5
   2b844:	ebffe5bf 	bl	24f48 <CGPIOPin::InterruptHandler()>
   2b848:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   2b84c:	e3530000 	cmp	r3, #0
   2b850:	1595100c 	ldrne	r1, [r5, #12]
   2b854:	15952008 	ldrne	r2, [r5, #8]
   2b858:	159f3048 	ldrne	r3, [pc, #72]	; 2b8a8 <CGPIOManager::InterruptHandler()+0xbc>
   2b85c:	17821003 	strne	r1, [r2, r3]
   2b860:	e3a03000 	mov	r3, #0
   2b864:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b868:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b86c:	e3a0205e 	mov	r2, #94	; 0x5e
   2b870:	e59f1034 	ldr	r1, [pc, #52]	; 2b8ac <CGPIOManager::InterruptHandler()+0xc0>
   2b874:	e59f0034 	ldr	r0, [pc, #52]	; 2b8b0 <CGPIOManager::InterruptHandler()+0xc4>
   2b878:	ebffdf80 	bl	23680 <assertion_failed>
   2b87c:	e1a00004 	mov	r0, r4
   2b880:	ebffe5d0 	bl	24fc8 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   2b884:	e3a02001 	mov	r2, #1
   2b888:	e59f3024 	ldr	r3, [pc, #36]	; 2b8b4 <CGPIOManager::InterruptHandler()+0xc8>
   2b88c:	e204101f 	and	r1, r4, #31
   2b890:	e08332a4 	add	r3, r3, r4, lsr #5
   2b894:	e1a03103 	lsl	r3, r3, #2
   2b898:	e1a02112 	lsl	r2, r2, r1
   2b89c:	e5832000 	str	r2, [r3]
   2b8a0:	eaffffee 	b	2b860 <CGPIOManager::InterruptHandler()+0x74>
   2b8a4:	20200000 	.word	0x20200000
   2b8a8:	20200040 	.word	0x20200040
   2b8ac:	0003b244 	.word	0x0003b244
   2b8b0:	0003b290 	.word	0x0003b290
   2b8b4:	08080010 	.word	0x08080010

0002b8b8 <CGPIOManager::InterruptStub(void*)>:
   2b8b8:	e3500000 	cmp	r0, #0
   2b8bc:	0a000000 	beq	2b8c4 <CGPIOManager::InterruptStub(void*)+0xc>
   2b8c0:	eaffffc9 	b	2b7ec <CGPIOManager::InterruptHandler()>
   2b8c4:	e92d4010 	push	{r4, lr}
   2b8c8:	e3a0208e 	mov	r2, #142	; 0x8e
   2b8cc:	e59f1004 	ldr	r1, [pc, #4]	; 2b8d8 <CGPIOManager::InterruptStub(void*)+0x20>
   2b8d0:	e59f0004 	ldr	r0, [pc, #4]	; 2b8dc <CGPIOManager::InterruptStub(void*)+0x24>
   2b8d4:	ebffdf69 	bl	23680 <assertion_failed>
   2b8d8:	0003b244 	.word	0x0003b244
   2b8dc:	00034728 	.word	0x00034728

0002b8e0 <CPtrList::CPtrList()>:
   2b8e0:	e3a02000 	mov	r2, #0
   2b8e4:	e5802000 	str	r2, [r0]
   2b8e8:	e12fff1e 	bx	lr

0002b8ec <CPtrList::~CPtrList()>:
   2b8ec:	e5903000 	ldr	r3, [r0]
   2b8f0:	e3530000 	cmp	r3, #0
   2b8f4:	1a000000 	bne	2b8fc <CPtrList::~CPtrList()+0x10>
   2b8f8:	e12fff1e 	bx	lr
   2b8fc:	e92d4010 	push	{r4, lr}
   2b900:	e3a0202a 	mov	r2, #42	; 0x2a
   2b904:	e59f1004 	ldr	r1, [pc, #4]	; 2b910 <CPtrList::~CPtrList()+0x24>
   2b908:	e59f0004 	ldr	r0, [pc, #4]	; 2b914 <CPtrList::~CPtrList()+0x28>
   2b90c:	ebffdf5b 	bl	23680 <assertion_failed>
   2b910:	0003b2d4 	.word	0x0003b2d4
   2b914:	0003b2e0 	.word	0x0003b2e0

0002b918 <CPtrList::GetFirst()>:
   2b918:	e5900000 	ldr	r0, [r0]
   2b91c:	e12fff1e 	bx	lr

0002b920 <CPtrList::GetNext(TPtrListElement*)>:
   2b920:	e3510000 	cmp	r1, #0
   2b924:	e92d4010 	push	{r4, lr}
   2b928:	0a000005 	beq	2b944 <CPtrList::GetNext(TPtrListElement*)+0x24>
   2b92c:	e59f3030 	ldr	r3, [pc, #48]	; 2b964 <CPtrList::GetNext(TPtrListElement*)+0x44>
   2b930:	e5912000 	ldr	r2, [r1]
   2b934:	e1520003 	cmp	r2, r3
   2b938:	1a000005 	bne	2b954 <CPtrList::GetNext(TPtrListElement*)+0x34>
   2b93c:	e5910008 	ldr	r0, [r1, #8]
   2b940:	e8bd8010 	pop	{r4, pc}
   2b944:	e3a02034 	mov	r2, #52	; 0x34
   2b948:	e59f1018 	ldr	r1, [pc, #24]	; 2b968 <CPtrList::GetNext(TPtrListElement*)+0x48>
   2b94c:	e59f0018 	ldr	r0, [pc, #24]	; 2b96c <CPtrList::GetNext(TPtrListElement*)+0x4c>
   2b950:	ebffdf4a 	bl	23680 <assertion_failed>
   2b954:	e3a02035 	mov	r2, #53	; 0x35
   2b958:	e59f1008 	ldr	r1, [pc, #8]	; 2b968 <CPtrList::GetNext(TPtrListElement*)+0x48>
   2b95c:	e59f000c 	ldr	r0, [pc, #12]	; 2b970 <CPtrList::GetNext(TPtrListElement*)+0x50>
   2b960:	ebffdf46 	bl	23680 <assertion_failed>
   2b964:	504c4d43 	.word	0x504c4d43
   2b968:	0003b2d4 	.word	0x0003b2d4
   2b96c:	0003b2f0 	.word	0x0003b2f0
   2b970:	0003b300 	.word	0x0003b300

0002b974 <CPtrList::GetPtr(TPtrListElement*)>:
   2b974:	e3510000 	cmp	r1, #0
   2b978:	e92d4010 	push	{r4, lr}
   2b97c:	0a000005 	beq	2b998 <CPtrList::GetPtr(TPtrListElement*)+0x24>
   2b980:	e59f3030 	ldr	r3, [pc, #48]	; 2b9b8 <CPtrList::GetPtr(TPtrListElement*)+0x44>
   2b984:	e5912000 	ldr	r2, [r1]
   2b988:	e1520003 	cmp	r2, r3
   2b98c:	1a000005 	bne	2b9a8 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   2b990:	e591000c 	ldr	r0, [r1, #12]
   2b994:	e8bd8010 	pop	{r4, pc}
   2b998:	e3a0203c 	mov	r2, #60	; 0x3c
   2b99c:	e59f1018 	ldr	r1, [pc, #24]	; 2b9bc <CPtrList::GetPtr(TPtrListElement*)+0x48>
   2b9a0:	e59f0018 	ldr	r0, [pc, #24]	; 2b9c0 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   2b9a4:	ebffdf35 	bl	23680 <assertion_failed>
   2b9a8:	e3a0203d 	mov	r2, #61	; 0x3d
   2b9ac:	e59f1008 	ldr	r1, [pc, #8]	; 2b9bc <CPtrList::GetPtr(TPtrListElement*)+0x48>
   2b9b0:	e59f000c 	ldr	r0, [pc, #12]	; 2b9c4 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   2b9b4:	ebffdf31 	bl	23680 <assertion_failed>
   2b9b8:	504c4d43 	.word	0x504c4d43
   2b9bc:	0003b2d4 	.word	0x0003b2d4
   2b9c0:	0003b2f0 	.word	0x0003b2f0
   2b9c4:	0003b300 	.word	0x0003b300

0002b9c8 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   2b9c8:	e92d4070 	push	{r4, r5, r6, lr}
   2b9cc:	e1a05000 	mov	r5, r0
   2b9d0:	e3a00010 	mov	r0, #16
   2b9d4:	e1a04001 	mov	r4, r1
   2b9d8:	e1a06002 	mov	r6, r2
   2b9dc:	ebfff944 	bl	29ef4 <operator new(unsigned int)>
   2b9e0:	e5953000 	ldr	r3, [r5]
   2b9e4:	e59f10a8 	ldr	r1, [pc, #168]	; 2ba94 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xcc>
   2b9e8:	e3530000 	cmp	r3, #0
   2b9ec:	e580600c 	str	r6, [r0, #12]
   2b9f0:	e5801000 	str	r1, [r0]
   2b9f4:	0a000015 	beq	2ba50 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x88>
   2b9f8:	e3540000 	cmp	r4, #0
   2b9fc:	0a000017 	beq	2ba60 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x98>
   2ba00:	e5942000 	ldr	r2, [r4]
   2ba04:	e1520001 	cmp	r2, r1
   2ba08:	1a000018 	bne	2ba70 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa8>
   2ba0c:	e1530004 	cmp	r3, r4
   2ba10:	0a00001a 	beq	2ba80 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb8>
   2ba14:	e5943004 	ldr	r3, [r4, #4]
   2ba18:	e5804008 	str	r4, [r0, #8]
   2ba1c:	e3530000 	cmp	r3, #0
   2ba20:	e5803004 	str	r3, [r0, #4]
   2ba24:	0a000003 	beq	2ba38 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   2ba28:	e5931000 	ldr	r1, [r3]
   2ba2c:	e1510002 	cmp	r1, r2
   2ba30:	05830008 	streq	r0, [r3, #8]
   2ba34:	1a000001 	bne	2ba40 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   2ba38:	e5840004 	str	r0, [r4, #4]
   2ba3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ba40:	e3a02060 	mov	r2, #96	; 0x60
   2ba44:	e59f104c 	ldr	r1, [pc, #76]	; 2ba98 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2ba48:	e59f004c 	ldr	r0, [pc, #76]	; 2ba9c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2ba4c:	ebffdf0b 	bl	23680 <assertion_failed>
   2ba50:	e3a0204c 	mov	r2, #76	; 0x4c
   2ba54:	e59f103c 	ldr	r1, [pc, #60]	; 2ba98 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2ba58:	e59f0040 	ldr	r0, [pc, #64]	; 2baa0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   2ba5c:	ebffdf07 	bl	23680 <assertion_failed>
   2ba60:	e3a0204d 	mov	r2, #77	; 0x4d
   2ba64:	e59f102c 	ldr	r1, [pc, #44]	; 2ba98 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2ba68:	e59f0034 	ldr	r0, [pc, #52]	; 2baa4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>
   2ba6c:	ebffdf03 	bl	23680 <assertion_failed>
   2ba70:	e3a0204e 	mov	r2, #78	; 0x4e
   2ba74:	e59f101c 	ldr	r1, [pc, #28]	; 2ba98 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2ba78:	e59f0028 	ldr	r0, [pc, #40]	; 2baa8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   2ba7c:	ebffdeff 	bl	23680 <assertion_failed>
   2ba80:	e3a02000 	mov	r2, #0
   2ba84:	e980000c 	stmib	r0, {r2, r3}
   2ba88:	e5830004 	str	r0, [r3, #4]
   2ba8c:	e5850000 	str	r0, [r5]
   2ba90:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ba94:	504c4d43 	.word	0x504c4d43
   2ba98:	0003b2d4 	.word	0x0003b2d4
   2ba9c:	0003b364 	.word	0x0003b364
   2baa0:	0003b324 	.word	0x0003b324
   2baa4:	0003b334 	.word	0x0003b334
   2baa8:	0003b340 	.word	0x0003b340

0002baac <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   2baac:	e92d4070 	push	{r4, r5, r6, lr}
   2bab0:	e1a04001 	mov	r4, r1
   2bab4:	e1a05000 	mov	r5, r0
   2bab8:	e3a00010 	mov	r0, #16
   2babc:	e1a06002 	mov	r6, r2
   2bac0:	ebfff90b 	bl	29ef4 <operator new(unsigned int)>
   2bac4:	e59f30ac 	ldr	r3, [pc, #172]	; 2bb78 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   2bac8:	e3540000 	cmp	r4, #0
   2bacc:	e580600c 	str	r6, [r0, #12]
   2bad0:	e5803000 	str	r3, [r0]
   2bad4:	0a000014 	beq	2bb2c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x80>
   2bad8:	e5952000 	ldr	r2, [r5]
   2badc:	e3520000 	cmp	r2, #0
   2bae0:	0a000018 	beq	2bb48 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   2bae4:	e5942000 	ldr	r2, [r4]
   2bae8:	e1520003 	cmp	r2, r3
   2baec:	1a000019 	bne	2bb58 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xac>
   2baf0:	e5943008 	ldr	r3, [r4, #8]
   2baf4:	e5804004 	str	r4, [r0, #4]
   2baf8:	e3530000 	cmp	r3, #0
   2bafc:	e5803008 	str	r3, [r0, #8]
   2bb00:	0a000003 	beq	2bb14 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   2bb04:	e5931000 	ldr	r1, [r3]
   2bb08:	e1510002 	cmp	r1, r2
   2bb0c:	05830004 	streq	r0, [r3, #4]
   2bb10:	1a000001 	bne	2bb1c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x70>
   2bb14:	e5840008 	str	r0, [r4, #8]
   2bb18:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bb1c:	e3a02085 	mov	r2, #133	; 0x85
   2bb20:	e59f1054 	ldr	r1, [pc, #84]	; 2bb7c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2bb24:	e59f0054 	ldr	r0, [pc, #84]	; 2bb80 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd4>
   2bb28:	ebffded4 	bl	23680 <assertion_failed>
   2bb2c:	e5953000 	ldr	r3, [r5]
   2bb30:	e3530000 	cmp	r3, #0
   2bb34:	1a00000b 	bne	2bb68 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   2bb38:	e5803004 	str	r3, [r0, #4]
   2bb3c:	e5803008 	str	r3, [r0, #8]
   2bb40:	e5850000 	str	r0, [r5]
   2bb44:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bb48:	e3a0207d 	mov	r2, #125	; 0x7d
   2bb4c:	e59f1028 	ldr	r1, [pc, #40]	; 2bb7c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2bb50:	e59f002c 	ldr	r0, [pc, #44]	; 2bb84 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   2bb54:	ebffdec9 	bl	23680 <assertion_failed>
   2bb58:	e3a0207e 	mov	r2, #126	; 0x7e
   2bb5c:	e59f1018 	ldr	r1, [pc, #24]	; 2bb7c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2bb60:	e59f0020 	ldr	r0, [pc, #32]	; 2bb88 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   2bb64:	ebffdec5 	bl	23680 <assertion_failed>
   2bb68:	e3a02074 	mov	r2, #116	; 0x74
   2bb6c:	e59f1008 	ldr	r1, [pc, #8]	; 2bb7c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2bb70:	e59f0014 	ldr	r0, [pc, #20]	; 2bb8c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   2bb74:	ebffdec1 	bl	23680 <assertion_failed>
   2bb78:	504c4d43 	.word	0x504c4d43
   2bb7c:	0003b2d4 	.word	0x0003b2d4
   2bb80:	0003b3b0 	.word	0x0003b3b0
   2bb84:	0003b324 	.word	0x0003b324
   2bb88:	0003b38c 	.word	0x0003b38c
   2bb8c:	0003b2e0 	.word	0x0003b2e0

0002bb90 <CPtrList::Remove(TPtrListElement*)>:
   2bb90:	e3510000 	cmp	r1, #0
   2bb94:	e92d4010 	push	{r4, lr}
   2bb98:	0a00002c 	beq	2bc50 <CPtrList::Remove(TPtrListElement*)+0xc0>
   2bb9c:	e59f30ec 	ldr	r3, [pc, #236]	; 2bc90 <CPtrList::Remove(TPtrListElement*)+0x100>
   2bba0:	e5912000 	ldr	r2, [r1]
   2bba4:	e1520003 	cmp	r2, r3
   2bba8:	1a00002c 	bne	2bc60 <CPtrList::Remove(TPtrListElement*)+0xd0>
   2bbac:	e5903000 	ldr	r3, [r0]
   2bbb0:	e1510003 	cmp	r1, r3
   2bbb4:	0a000018 	beq	2bc1c <CPtrList::Remove(TPtrListElement*)+0x8c>
   2bbb8:	e5913004 	ldr	r3, [r1, #4]
   2bbbc:	e3530000 	cmp	r3, #0
   2bbc0:	0a00002a 	beq	2bc70 <CPtrList::Remove(TPtrListElement*)+0xe0>
   2bbc4:	e5930000 	ldr	r0, [r3]
   2bbc8:	e1500002 	cmp	r0, r2
   2bbcc:	1a00002b 	bne	2bc80 <CPtrList::Remove(TPtrListElement*)+0xf0>
   2bbd0:	e5912008 	ldr	r2, [r1, #8]
   2bbd4:	e5832008 	str	r2, [r3, #8]
   2bbd8:	e5912008 	ldr	r2, [r1, #8]
   2bbdc:	e3520000 	cmp	r2, #0
   2bbe0:	0a000003 	beq	2bbf4 <CPtrList::Remove(TPtrListElement*)+0x64>
   2bbe4:	e592c000 	ldr	ip, [r2]
   2bbe8:	e15c0000 	cmp	ip, r0
   2bbec:	05823004 	streq	r3, [r2, #4]
   2bbf0:	1a000005 	bne	2bc0c <CPtrList::Remove(TPtrListElement*)+0x7c>
   2bbf4:	e8bd4010 	pop	{r4, lr}
   2bbf8:	e3a03000 	mov	r3, #0
   2bbfc:	e1a00001 	mov	r0, r1
   2bc00:	e5813000 	str	r3, [r1]
   2bc04:	e3a01010 	mov	r1, #16
   2bc08:	eafff8c7 	b	29f2c <operator delete(void*, unsigned int)>
   2bc0c:	e3a020a4 	mov	r2, #164	; 0xa4
   2bc10:	e59f107c 	ldr	r1, [pc, #124]	; 2bc94 <CPtrList::Remove(TPtrListElement*)+0x104>
   2bc14:	e59f007c 	ldr	r0, [pc, #124]	; 2bc98 <CPtrList::Remove(TPtrListElement*)+0x108>
   2bc18:	ebffde98 	bl	23680 <assertion_failed>
   2bc1c:	e5913008 	ldr	r3, [r1, #8]
   2bc20:	e3530000 	cmp	r3, #0
   2bc24:	e5803000 	str	r3, [r0]
   2bc28:	0afffff1 	beq	2bbf4 <CPtrList::Remove(TPtrListElement*)+0x64>
   2bc2c:	e5930000 	ldr	r0, [r3]
   2bc30:	e1500002 	cmp	r0, r2
   2bc34:	03a02000 	moveq	r2, #0
   2bc38:	05832004 	streq	r2, [r3, #4]
   2bc3c:	0affffec 	beq	2bbf4 <CPtrList::Remove(TPtrListElement*)+0x64>
   2bc40:	e3a02098 	mov	r2, #152	; 0x98
   2bc44:	e59f1048 	ldr	r1, [pc, #72]	; 2bc94 <CPtrList::Remove(TPtrListElement*)+0x104>
   2bc48:	e59f0048 	ldr	r0, [pc, #72]	; 2bc98 <CPtrList::Remove(TPtrListElement*)+0x108>
   2bc4c:	ebffde8b 	bl	23680 <assertion_failed>
   2bc50:	e3a0208f 	mov	r2, #143	; 0x8f
   2bc54:	e59f1038 	ldr	r1, [pc, #56]	; 2bc94 <CPtrList::Remove(TPtrListElement*)+0x104>
   2bc58:	e59f003c 	ldr	r0, [pc, #60]	; 2bc9c <CPtrList::Remove(TPtrListElement*)+0x10c>
   2bc5c:	ebffde87 	bl	23680 <assertion_failed>
   2bc60:	e3a02090 	mov	r2, #144	; 0x90
   2bc64:	e59f1028 	ldr	r1, [pc, #40]	; 2bc94 <CPtrList::Remove(TPtrListElement*)+0x104>
   2bc68:	e59f0030 	ldr	r0, [pc, #48]	; 2bca0 <CPtrList::Remove(TPtrListElement*)+0x110>
   2bc6c:	ebffde83 	bl	23680 <assertion_failed>
   2bc70:	e3a0209e 	mov	r2, #158	; 0x9e
   2bc74:	e59f1018 	ldr	r1, [pc, #24]	; 2bc94 <CPtrList::Remove(TPtrListElement*)+0x104>
   2bc78:	e59f0024 	ldr	r0, [pc, #36]	; 2bca4 <CPtrList::Remove(TPtrListElement*)+0x114>
   2bc7c:	ebffde7f 	bl	23680 <assertion_failed>
   2bc80:	e3a0209f 	mov	r2, #159	; 0x9f
   2bc84:	e59f1008 	ldr	r1, [pc, #8]	; 2bc94 <CPtrList::Remove(TPtrListElement*)+0x104>
   2bc88:	e59f0018 	ldr	r0, [pc, #24]	; 2bca8 <CPtrList::Remove(TPtrListElement*)+0x118>
   2bc8c:	ebffde7b 	bl	23680 <assertion_failed>
   2bc90:	504c4d43 	.word	0x504c4d43
   2bc94:	0003b2d4 	.word	0x0003b2d4
   2bc98:	0003b3dc 	.word	0x0003b3dc
   2bc9c:	0003b2f0 	.word	0x0003b2f0
   2bca0:	0003b300 	.word	0x0003b300
   2bca4:	0003b408 	.word	0x0003b408
   2bca8:	0003b420 	.word	0x0003b420

0002bcac <CPtrList::Find(void*)>:
   2bcac:	e5900000 	ldr	r0, [r0]
   2bcb0:	e3500000 	cmp	r0, #0
   2bcb4:	0a000015 	beq	2bd10 <CPtrList::Find(void*)+0x64>
   2bcb8:	e59f3054 	ldr	r3, [pc, #84]	; 2bd14 <CPtrList::Find(void*)+0x68>
   2bcbc:	e5902000 	ldr	r2, [r0]
   2bcc0:	e1520003 	cmp	r2, r3
   2bcc4:	1a00000c 	bne	2bcfc <CPtrList::Find(void*)+0x50>
   2bcc8:	e590300c 	ldr	r3, [r0, #12]
   2bccc:	e1510003 	cmp	r1, r3
   2bcd0:	1a000003 	bne	2bce4 <CPtrList::Find(void*)+0x38>
   2bcd4:	ea00000d 	b	2bd10 <CPtrList::Find(void*)+0x64>
   2bcd8:	e590300c 	ldr	r3, [r0, #12]
   2bcdc:	e1530001 	cmp	r3, r1
   2bce0:	0a00000a 	beq	2bd10 <CPtrList::Find(void*)+0x64>
   2bce4:	e5900008 	ldr	r0, [r0, #8]
   2bce8:	e3500000 	cmp	r0, #0
   2bcec:	0a000007 	beq	2bd10 <CPtrList::Find(void*)+0x64>
   2bcf0:	e5903000 	ldr	r3, [r0]
   2bcf4:	e1530002 	cmp	r3, r2
   2bcf8:	0afffff6 	beq	2bcd8 <CPtrList::Find(void*)+0x2c>
   2bcfc:	e92d4010 	push	{r4, lr}
   2bd00:	e3a020b3 	mov	r2, #179	; 0xb3
   2bd04:	e59f100c 	ldr	r1, [pc, #12]	; 2bd18 <CPtrList::Find(void*)+0x6c>
   2bd08:	e59f000c 	ldr	r0, [pc, #12]	; 2bd1c <CPtrList::Find(void*)+0x70>
   2bd0c:	ebffde5b 	bl	23680 <assertion_failed>
   2bd10:	e12fff1e 	bx	lr
   2bd14:	504c4d43 	.word	0x504c4d43
   2bd18:	0003b2d4 	.word	0x0003b2d4
   2bd1c:	0003b300 	.word	0x0003b300

0002bd20 <CPageAllocator::CPageAllocator()>:
   2bd20:	e3a02000 	mov	r2, #0
   2bd24:	e3a01001 	mov	r1, #1
   2bd28:	e5802000 	str	r2, [r0]
   2bd2c:	e580100c 	str	r1, [r0, #12]
   2bd30:	e5802004 	str	r2, [r0, #4]
   2bd34:	e5802008 	str	r2, [r0, #8]
   2bd38:	e12fff1e 	bx	lr

0002bd3c <CPageAllocator::~CPageAllocator()>:
   2bd3c:	e12fff1e 	bx	lr

0002bd40 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   2bd40:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2bd44:	e28db000 	add	fp, sp, #0
   2bd48:	e24dd014 	sub	sp, sp, #20
   2bd4c:	e50b0008 	str	r0, [fp, #-8]
   2bd50:	e50b100c 	str	r1, [fp, #-12]
   2bd54:	e50b2010 	str	r2, [fp, #-16]
   2bd58:	e51b300c 	ldr	r3, [fp, #-12]
   2bd5c:	e2833eff 	add	r3, r3, #4080	; 0xff0
   2bd60:	e283300f 	add	r3, r3, #15
   2bd64:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2bd68:	e3c3300f 	bic	r3, r3, #15
   2bd6c:	e1a02003 	mov	r2, r3
   2bd70:	e51b3008 	ldr	r3, [fp, #-8]
   2bd74:	e5832000 	str	r2, [r3]
   2bd78:	e51b200c 	ldr	r2, [fp, #-12]
   2bd7c:	e51b3010 	ldr	r3, [fp, #-16]
   2bd80:	e0823003 	add	r3, r2, r3
   2bd84:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2bd88:	e3c3300f 	bic	r3, r3, #15
   2bd8c:	e1a02003 	mov	r2, r3
   2bd90:	e51b3008 	ldr	r3, [fp, #-8]
   2bd94:	e5832004 	str	r2, [r3, #4]
   2bd98:	e320f000 	nop	{0}
   2bd9c:	e28bd000 	add	sp, fp, #0
   2bda0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2bda4:	e12fff1e 	bx	lr

0002bda8 <CPageAllocator::GetFreeSpace() const>:
   2bda8:	e8900005 	ldm	r0, {r0, r2}
   2bdac:	e0420000 	sub	r0, r2, r0
   2bdb0:	e12fff1e 	bx	lr

0002bdb4 <CPageAllocator::Allocate()>:
   2bdb4:	e5903000 	ldr	r3, [r0]
   2bdb8:	e92d4070 	push	{r4, r5, r6, lr}
   2bdbc:	e3530000 	cmp	r3, #0
   2bdc0:	0a000026 	beq	2be60 <CPageAllocator::Allocate()+0xac>
   2bdc4:	e1a05000 	mov	r5, r0
   2bdc8:	e590000c 	ldr	r0, [r0, #12]
   2bdcc:	e3500000 	cmp	r0, #0
   2bdd0:	1a000012 	bne	2be20 <CPageAllocator::Allocate()+0x6c>
   2bdd4:	e5954008 	ldr	r4, [r5, #8]
   2bdd8:	e3540000 	cmp	r4, #0
   2bddc:	0a000013 	beq	2be30 <CPageAllocator::Allocate()+0x7c>
   2bde0:	e59f3098 	ldr	r3, [pc, #152]	; 2be80 <CPageAllocator::Allocate()+0xcc>
   2bde4:	e5942000 	ldr	r2, [r4]
   2bde8:	e1520003 	cmp	r2, r3
   2bdec:	1a00001f 	bne	2be70 <CPageAllocator::Allocate()+0xbc>
   2bdf0:	e3a03000 	mov	r3, #0
   2bdf4:	e5942004 	ldr	r2, [r4, #4]
   2bdf8:	e5852008 	str	r2, [r5, #8]
   2bdfc:	e5843000 	str	r3, [r4]
   2be00:	e595300c 	ldr	r3, [r5, #12]
   2be04:	e3530000 	cmp	r3, #0
   2be08:	1a000001 	bne	2be14 <CPageAllocator::Allocate()+0x60>
   2be0c:	e1a00004 	mov	r0, r4
   2be10:	e8bd8070 	pop	{r4, r5, r6, pc}
   2be14:	ebfffb93 	bl	2ac68 <LeaveCritical>
   2be18:	e1a00004 	mov	r0, r4
   2be1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2be20:	ebfffb65 	bl	2abbc <EnterCritical>
   2be24:	e5954008 	ldr	r4, [r5, #8]
   2be28:	e3540000 	cmp	r4, #0
   2be2c:	1affffeb 	bne	2bde0 <CPageAllocator::Allocate()+0x2c>
   2be30:	e5954000 	ldr	r4, [r5]
   2be34:	e5952004 	ldr	r2, [r5, #4]
   2be38:	e2843a01 	add	r3, r4, #4096	; 0x1000
   2be3c:	e1530002 	cmp	r3, r2
   2be40:	e5853000 	str	r3, [r5]
   2be44:	9affffed 	bls	2be00 <CPageAllocator::Allocate()+0x4c>
   2be48:	e595400c 	ldr	r4, [r5, #12]
   2be4c:	e3540000 	cmp	r4, #0
   2be50:	0affffed 	beq	2be0c <CPageAllocator::Allocate()+0x58>
   2be54:	ebfffb83 	bl	2ac68 <LeaveCritical>
   2be58:	e3a00000 	mov	r0, #0
   2be5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2be60:	e59f101c 	ldr	r1, [pc, #28]	; 2be84 <CPageAllocator::Allocate()+0xd0>
   2be64:	e3a02036 	mov	r2, #54	; 0x36
   2be68:	e2810014 	add	r0, r1, #20
   2be6c:	ebffde03 	bl	23680 <assertion_failed>
   2be70:	e59f100c 	ldr	r1, [pc, #12]	; 2be84 <CPageAllocator::Allocate()+0xd0>
   2be74:	e3a02044 	mov	r2, #68	; 0x44
   2be78:	e2810024 	add	r0, r1, #36	; 0x24
   2be7c:	ebffddff 	bl	23680 <assertion_failed>
   2be80:	50474d43 	.word	0x50474d43
   2be84:	0003b44c 	.word	0x0003b44c

0002be88 <CPageAllocator::Free(void*)>:
   2be88:	e92d4070 	push	{r4, r5, r6, lr}
   2be8c:	e2515000 	subs	r5, r1, #0
   2be90:	08bd8070 	popeq	{r4, r5, r6, pc}
   2be94:	e590300c 	ldr	r3, [r0, #12]
   2be98:	e3530000 	cmp	r3, #0
   2be9c:	1a000004 	bne	2beb4 <CPageAllocator::Free(void*)+0x2c>
   2bea0:	e5903008 	ldr	r3, [r0, #8]
   2bea4:	e59f2038 	ldr	r2, [pc, #56]	; 2bee4 <CPageAllocator::Free(void*)+0x5c>
   2bea8:	e885000c 	stm	r5, {r2, r3}
   2beac:	e5805008 	str	r5, [r0, #8]
   2beb0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2beb4:	e1a04000 	mov	r4, r0
   2beb8:	e1a00003 	mov	r0, r3
   2bebc:	ebfffb3e 	bl	2abbc <EnterCritical>
   2bec0:	e594100c 	ldr	r1, [r4, #12]
   2bec4:	e5943008 	ldr	r3, [r4, #8]
   2bec8:	e59f2014 	ldr	r2, [pc, #20]	; 2bee4 <CPageAllocator::Free(void*)+0x5c>
   2becc:	e3510000 	cmp	r1, #0
   2bed0:	e885000c 	stm	r5, {r2, r3}
   2bed4:	e5845008 	str	r5, [r4, #8]
   2bed8:	08bd8070 	popeq	{r4, r5, r6, pc}
   2bedc:	e8bd4070 	pop	{r4, r5, r6, lr}
   2bee0:	eafffb60 	b	2ac68 <LeaveCritical>
   2bee4:	50474d43 	.word	0x50474d43

0002bee8 <FastScreen::FastScreen(unsigned int, unsigned int, bool)>:
   2bee8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2beec:	e1a04000 	mov	r4, r0
   2bef0:	e3a05000 	mov	r5, #0
   2bef4:	e1a08001 	mov	r8, r1
   2bef8:	e1a07002 	mov	r7, r2
   2befc:	e1a06003 	mov	r6, r3
   2bf00:	ebffdfcf 	bl	23e44 <CDevice::CDevice()>
   2bf04:	e59f0060 	ldr	r0, [pc, #96]	; 2bf6c <FastScreen::FastScreen(unsigned int, unsigned int, bool)+0x84>
   2bf08:	e5c4600c 	strb	r6, [r4, #12]
   2bf0c:	e5840000 	str	r0, [r4]
   2bf10:	e5848004 	str	r8, [r4, #4]
   2bf14:	e5847008 	str	r7, [r4, #8]
   2bf18:	e5845010 	str	r5, [r4, #16]
   2bf1c:	e2840014 	add	r0, r4, #20
   2bf20:	eb001abc 	bl	32a18 <CCharGenerator::CCharGenerator()>
   2bf24:	e3a06001 	mov	r6, #1
   2bf28:	e3e03020 	mvn	r3, #32
   2bf2c:	e5845018 	str	r5, [r4, #24]
   2bf30:	e5845030 	str	r5, [r4, #48]	; 0x30
   2bf34:	e5845034 	str	r5, [r4, #52]	; 0x34
   2bf38:	e584503c 	str	r5, [r4, #60]	; 0x3c
   2bf3c:	e5845040 	str	r5, [r4, #64]	; 0x40
   2bf40:	e5c45048 	strb	r5, [r4, #72]	; 0x48
   2bf44:	e5c45054 	strb	r5, [r4, #84]	; 0x54
   2bf48:	e1a02005 	mov	r2, r5
   2bf4c:	e1c434b6 	strh	r3, [r4, #70]	; 0x46
   2bf50:	e5c46044 	strb	r6, [r4, #68]	; 0x44
   2bf54:	e2840058 	add	r0, r4, #88	; 0x58
   2bf58:	e3a01081 	mov	r1, #129	; 0x81
   2bf5c:	eb001ad2 	bl	32aac <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
   2bf60:	e5846080 	str	r6, [r4, #128]	; 0x80
   2bf64:	e1a00004 	mov	r0, r4
   2bf68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2bf6c:	0003b49c 	.word	0x0003b49c

0002bf70 <FastScreen::~FastScreen()>:
   2bf70:	e5d0200c 	ldrb	r2, [r0, #12]
   2bf74:	e59f3070 	ldr	r3, [pc, #112]	; 2bfec <FastScreen::~FastScreen()+0x7c>
   2bf78:	e3520000 	cmp	r2, #0
   2bf7c:	e92d4070 	push	{r4, r5, r6, lr}
   2bf80:	e1a04000 	mov	r4, r0
   2bf84:	e5803000 	str	r3, [r0]
   2bf88:	0a000003 	beq	2bf9c <FastScreen::~FastScreen()+0x2c>
   2bf8c:	e5900018 	ldr	r0, [r0, #24]
   2bf90:	e3500000 	cmp	r0, #0
   2bf94:	0a000000 	beq	2bf9c <FastScreen::~FastScreen()+0x2c>
   2bf98:	ebfff7dd 	bl	29f14 <operator delete[](void*)>
   2bf9c:	e3a03000 	mov	r3, #0
   2bfa0:	e5945010 	ldr	r5, [r4, #16]
   2bfa4:	e5843018 	str	r3, [r4, #24]
   2bfa8:	e1550003 	cmp	r5, r3
   2bfac:	0a000004 	beq	2bfc4 <FastScreen::~FastScreen()+0x54>
   2bfb0:	e1a00005 	mov	r0, r5
   2bfb4:	eb0019de 	bl	32734 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   2bfb8:	e1a00005 	mov	r0, r5
   2bfbc:	e3a01094 	mov	r1, #148	; 0x94
   2bfc0:	ebfff7d9 	bl	29f2c <operator delete(void*, unsigned int)>
   2bfc4:	e3a03000 	mov	r3, #0
   2bfc8:	e2840058 	add	r0, r4, #88	; 0x58
   2bfcc:	e5843010 	str	r3, [r4, #16]
   2bfd0:	eb001af6 	bl	32bb0 <CDMAChannel::~CDMAChannel()>
   2bfd4:	e2840014 	add	r0, r4, #20
   2bfd8:	eb001a91 	bl	32a24 <CCharGenerator::~CCharGenerator()>
   2bfdc:	e1a00004 	mov	r0, r4
   2bfe0:	ebffdf89 	bl	23e0c <CDevice::~CDevice()>
   2bfe4:	e1a00004 	mov	r0, r4
   2bfe8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bfec:	0003b49c 	.word	0x0003b49c

0002bff0 <FastScreen::~FastScreen()>:
   2bff0:	e92d4010 	push	{r4, lr}
   2bff4:	e1a04000 	mov	r4, r0
   2bff8:	ebffffdc 	bl	2bf70 <FastScreen::~FastScreen()>
   2bffc:	e1a00004 	mov	r0, r4
   2c000:	e3a01084 	mov	r1, #132	; 0x84
   2c004:	ebfff7c8 	bl	29f2c <operator delete(void*, unsigned int)>
   2c008:	e1a00004 	mov	r0, r4
   2c00c:	e8bd8010 	pop	{r4, pc}

0002c010 <FastScreen::Initialize()>:
   2c010:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2c014:	e5d0500c 	ldrb	r5, [r0, #12]
   2c018:	e24dd00c 	sub	sp, sp, #12
   2c01c:	e3550000 	cmp	r5, #0
   2c020:	e1a04000 	mov	r4, r0
   2c024:	0a00002a 	beq	2c0d4 <FastScreen::Initialize()+0xc4>
   2c028:	e5903004 	ldr	r3, [r0, #4]
   2c02c:	e5902008 	ldr	r2, [r0, #8]
   2c030:	e5803024 	str	r3, [r0, #36]	; 0x24
   2c034:	e0000392 	mul	r0, r2, r3
   2c038:	e370010f 	cmn	r0, #-1073741821	; 0xc0000003
   2c03c:	e1a00080 	lsl	r0, r0, #1
   2c040:	e584001c 	str	r0, [r4, #28]
   2c044:	e5843020 	str	r3, [r4, #32]
   2c048:	23e00000 	mvncs	r0, #0
   2c04c:	e5842028 	str	r2, [r4, #40]	; 0x28
   2c050:	ebfff7a8 	bl	29ef8 <operator new[](unsigned int)>
   2c054:	e5947028 	ldr	r7, [r4, #40]	; 0x28
   2c058:	e5840018 	str	r0, [r4, #24]
   2c05c:	e2846014 	add	r6, r4, #20
   2c060:	e1a00006 	mov	r0, r6
   2c064:	eb001a71 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2c068:	e1a01000 	mov	r1, r0
   2c06c:	e1a00007 	mov	r0, r7
   2c070:	eb001173 	bl	30644 <__aeabi_uidiv>
   2c074:	e1a05000 	mov	r5, r0
   2c078:	e1a00006 	mov	r0, r6
   2c07c:	eb001a6b 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2c080:	e3a02000 	mov	r2, #0
   2c084:	e0000590 	mul	r0, r0, r5
   2c088:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   2c08c:	e584002c 	str	r0, [r4, #44]	; 0x2c
   2c090:	e5840038 	str	r0, [r4, #56]	; 0x38
   2c094:	e5843040 	str	r3, [r4, #64]	; 0x40
   2c098:	e584203c 	str	r2, [r4, #60]	; 0x3c
   2c09c:	e1a00004 	mov	r0, r4
   2c0a0:	eb000224 	bl	2c938 <FastScreen::ClearDisplayEnd()>
   2c0a4:	e5d43044 	ldrb	r3, [r4, #68]	; 0x44
   2c0a8:	e3530000 	cmp	r3, #0
   2c0ac:	1a00002f 	bne	2c170 <FastScreen::Initialize()+0x160>
   2c0b0:	ebffe04c 	bl	241e8 <CDeviceNameService::Get()>
   2c0b4:	e1a02004 	mov	r2, r4
   2c0b8:	e3a03000 	mov	r3, #0
   2c0bc:	e59f10b8 	ldr	r1, [pc, #184]	; 2c17c <FastScreen::Initialize()+0x16c>
   2c0c0:	ebffdf8e 	bl	23f00 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   2c0c4:	e3a05001 	mov	r5, #1
   2c0c8:	e1a00005 	mov	r0, r5
   2c0cc:	e28dd00c 	add	sp, sp, #12
   2c0d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2c0d4:	e3a00094 	mov	r0, #148	; 0x94
   2c0d8:	ebfff785 	bl	29ef4 <operator new(unsigned int)>
   2c0dc:	e9940006 	ldmib	r4, {r1, r2}
   2c0e0:	e1a06000 	mov	r6, r0
   2c0e4:	e3a03010 	mov	r3, #16
   2c0e8:	e58d5004 	str	r5, [sp, #4]
   2c0ec:	e58d5000 	str	r5, [sp]
   2c0f0:	eb001940 	bl	325f8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   2c0f4:	e5846010 	str	r6, [r4, #16]
   2c0f8:	e1a00006 	mov	r0, r6
   2c0fc:	eb0019b7 	bl	327e0 <CBcmFrameBuffer::Initialize()>
   2c100:	e3500000 	cmp	r0, #0
   2c104:	0affffef 	beq	2c0c8 <FastScreen::Initialize()+0xb8>
   2c108:	e5940010 	ldr	r0, [r4, #16]
   2c10c:	eb0019ee 	bl	328cc <CBcmFrameBuffer::GetDepth() const>
   2c110:	e3500010 	cmp	r0, #16
   2c114:	1affffeb 	bne	2c0c8 <FastScreen::Initialize()+0xb8>
   2c118:	e5940010 	ldr	r0, [r4, #16]
   2c11c:	eb0019ec 	bl	328d4 <CBcmFrameBuffer::GetBuffer() const>
   2c120:	e5840018 	str	r0, [r4, #24]
   2c124:	e5940010 	ldr	r0, [r4, #16]
   2c128:	eb0019eb 	bl	328dc <CBcmFrameBuffer::GetSize() const>
   2c12c:	e584001c 	str	r0, [r4, #28]
   2c130:	e5940010 	ldr	r0, [r4, #16]
   2c134:	eb0019e2 	bl	328c4 <CBcmFrameBuffer::GetPitch() const>
   2c138:	e5840020 	str	r0, [r4, #32]
   2c13c:	e5940010 	ldr	r0, [r4, #16]
   2c140:	eb0019d7 	bl	328a4 <CBcmFrameBuffer::GetWidth() const>
   2c144:	e5840024 	str	r0, [r4, #36]	; 0x24
   2c148:	e5940010 	ldr	r0, [r4, #16]
   2c14c:	eb0019d6 	bl	328ac <CBcmFrameBuffer::GetHeight() const>
   2c150:	e5943020 	ldr	r3, [r4, #32]
   2c154:	e1a07000 	mov	r7, r0
   2c158:	e3130003 	tst	r3, #3
   2c15c:	01a030a3 	lsreq	r3, r3, #1
   2c160:	e5840028 	str	r0, [r4, #40]	; 0x28
   2c164:	05843020 	streq	r3, [r4, #32]
   2c168:	0affffbb 	beq	2c05c <FastScreen::Initialize()+0x4c>
   2c16c:	eaffffd5 	b	2c0c8 <FastScreen::Initialize()+0xb8>
   2c170:	e1a00004 	mov	r0, r4
   2c174:	eb0003d1 	bl	2d0c0 <FastScreen::InvertCursor() [clone .part.6]>
   2c178:	eaffffcc 	b	2c0b0 <FastScreen::Initialize()+0xa0>
   2c17c:	0003a900 	.word	0x0003a900

0002c180 <FastScreen::GetWidth() const>:
   2c180:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   2c184:	e12fff1e 	bx	lr

0002c188 <FastScreen::GetHeight() const>:
   2c188:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   2c18c:	e12fff1e 	bx	lr

0002c190 <FastScreen::GetColumns() const>:
   2c190:	e92d4010 	push	{r4, lr}
   2c194:	e2800014 	add	r0, r0, #20
   2c198:	e5904010 	ldr	r4, [r0, #16]
   2c19c:	eb001a21 	bl	32a28 <CCharGenerator::GetCharWidth() const>
   2c1a0:	e1a01000 	mov	r1, r0
   2c1a4:	e1a00004 	mov	r0, r4
   2c1a8:	eb001125 	bl	30644 <__aeabi_uidiv>
   2c1ac:	e8bd8010 	pop	{r4, pc}

0002c1b0 <FastScreen::GetRows() const>:
   2c1b0:	e92d4010 	push	{r4, lr}
   2c1b4:	e2800014 	add	r0, r0, #20
   2c1b8:	e5904018 	ldr	r4, [r0, #24]
   2c1bc:	eb001a1b 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2c1c0:	e1a01000 	mov	r1, r0
   2c1c4:	e1a00004 	mov	r0, r4
   2c1c8:	eb00111d 	bl	30644 <__aeabi_uidiv>
   2c1cc:	e8bd8010 	pop	{r4, pc}

0002c1d0 <FastScreen::GetFrameBuffer()>:
   2c1d0:	e5900010 	ldr	r0, [r0, #16]
   2c1d4:	e12fff1e 	bx	lr

0002c1d8 <FastScreen::GetStatus()>:
   2c1d8:	e591c018 	ldr	ip, [r1, #24]
   2c1dc:	e591201c 	ldr	r2, [r1, #28]
   2c1e0:	e92d4070 	push	{r4, r5, r6, lr}
   2c1e4:	e580c000 	str	ip, [r0]
   2c1e8:	e5915030 	ldr	r5, [r1, #48]	; 0x30
   2c1ec:	e5914034 	ldr	r4, [r1, #52]	; 0x34
   2c1f0:	e591e038 	ldr	lr, [r1, #56]	; 0x38
   2c1f4:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
   2c1f8:	e5802004 	str	r2, [r0, #4]
   2c1fc:	e5912040 	ldr	r2, [r1, #64]	; 0x40
   2c200:	e5805008 	str	r5, [r0, #8]
   2c204:	e5d16044 	ldrb	r6, [r1, #68]	; 0x44
   2c208:	e580400c 	str	r4, [r0, #12]
   2c20c:	e1d154b6 	ldrh	r5, [r1, #70]	; 0x46
   2c210:	e580e010 	str	lr, [r0, #16]
   2c214:	e5d14048 	ldrb	r4, [r1, #72]	; 0x48
   2c218:	e580c014 	str	ip, [r0, #20]
   2c21c:	e591e04c 	ldr	lr, [r1, #76]	; 0x4c
   2c220:	e5802018 	str	r2, [r0, #24]
   2c224:	e591c050 	ldr	ip, [r1, #80]	; 0x50
   2c228:	e5d12054 	ldrb	r2, [r1, #84]	; 0x54
   2c22c:	e5c0601c 	strb	r6, [r0, #28]
   2c230:	e1c051be 	strh	r5, [r0, #30]
   2c234:	e5c04020 	strb	r4, [r0, #32]
   2c238:	e580e024 	str	lr, [r0, #36]	; 0x24
   2c23c:	e580c028 	str	ip, [r0, #40]	; 0x28
   2c240:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
   2c244:	e8bd8070 	pop	{r4, r5, r6, pc}

0002c248 <FastScreen::SetStatus(FastScreenStatus const&)>:
   2c248:	e590201c 	ldr	r2, [r0, #28]
   2c24c:	e5913004 	ldr	r3, [r1, #4]
   2c250:	e1520003 	cmp	r2, r3
   2c254:	0a000001 	beq	2c260 <FastScreen::SetStatus(FastScreenStatus const&)+0x18>
   2c258:	e3a00000 	mov	r0, #0
   2c25c:	e12fff1e 	bx	lr
   2c260:	e590c020 	ldr	ip, [r0, #32]
   2c264:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   2c268:	e15c0003 	cmp	ip, r3
   2c26c:	1afffff9 	bne	2c258 <FastScreen::SetStatus(FastScreenStatus const&)+0x10>
   2c270:	e92d4070 	push	{r4, r5, r6, lr}
   2c274:	e1a04000 	mov	r4, r0
   2c278:	e5900080 	ldr	r0, [r0, #128]	; 0x80
   2c27c:	e1a05001 	mov	r5, r1
   2c280:	e3500000 	cmp	r0, #0
   2c284:	1a000023 	bne	2c318 <FastScreen::SetStatus(FastScreenStatus const&)+0xd0>
   2c288:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
   2c28c:	e3530000 	cmp	r3, #0
   2c290:	1a000002 	bne	2c2a0 <FastScreen::SetStatus(FastScreenStatus const&)+0x58>
   2c294:	e5d1302c 	ldrb	r3, [r1, #44]	; 0x2c
   2c298:	e3530000 	cmp	r3, #0
   2c29c:	0a000001 	beq	2c2a8 <FastScreen::SetStatus(FastScreenStatus const&)+0x60>
   2c2a0:	e3a00000 	mov	r0, #0
   2c2a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c2a8:	e5951000 	ldr	r1, [r5]
   2c2ac:	e5940018 	ldr	r0, [r4, #24]
   2c2b0:	ebfff536 	bl	29790 <memcpy>
   2c2b4:	e5940080 	ldr	r0, [r4, #128]	; 0x80
   2c2b8:	e2851008 	add	r1, r5, #8
   2c2bc:	e891004e 	ldm	r1, {r1, r2, r3, r6}
   2c2c0:	e595e018 	ldr	lr, [r5, #24]
   2c2c4:	e5d5c01c 	ldrb	ip, [r5, #28]
   2c2c8:	e3500000 	cmp	r0, #0
   2c2cc:	e5841030 	str	r1, [r4, #48]	; 0x30
   2c2d0:	e1d501be 	ldrh	r0, [r5, #30]
   2c2d4:	e5d51020 	ldrb	r1, [r5, #32]
   2c2d8:	e5842034 	str	r2, [r4, #52]	; 0x34
   2c2dc:	e5843038 	str	r3, [r4, #56]	; 0x38
   2c2e0:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   2c2e4:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   2c2e8:	e584603c 	str	r6, [r4, #60]	; 0x3c
   2c2ec:	e584e040 	str	lr, [r4, #64]	; 0x40
   2c2f0:	e5c4c044 	strb	ip, [r4, #68]	; 0x44
   2c2f4:	e1c404b6 	strh	r0, [r4, #70]	; 0x46
   2c2f8:	e5c41048 	strb	r1, [r4, #72]	; 0x48
   2c2fc:	e584204c 	str	r2, [r4, #76]	; 0x4c
   2c300:	e5843050 	str	r3, [r4, #80]	; 0x50
   2c304:	1a000010 	bne	2c34c <FastScreen::SetStatus(FastScreenStatus const&)+0x104>
   2c308:	e3a03000 	mov	r3, #0
   2c30c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c310:	e3a00001 	mov	r0, #1
   2c314:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c318:	ebfffa27 	bl	2abbc <EnterCritical>
   2c31c:	e5d43054 	ldrb	r3, [r4, #84]	; 0x54
   2c320:	e3530000 	cmp	r3, #0
   2c324:	1a000003 	bne	2c338 <FastScreen::SetStatus(FastScreenStatus const&)+0xf0>
   2c328:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
   2c32c:	e3530000 	cmp	r3, #0
   2c330:	0594201c 	ldreq	r2, [r4, #28]
   2c334:	0affffdb 	beq	2c2a8 <FastScreen::SetStatus(FastScreenStatus const&)+0x60>
   2c338:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   2c33c:	e3530000 	cmp	r3, #0
   2c340:	0affffd6 	beq	2c2a0 <FastScreen::SetStatus(FastScreenStatus const&)+0x58>
   2c344:	ebfffa47 	bl	2ac68 <LeaveCritical>
   2c348:	eaffffd4 	b	2c2a0 <FastScreen::SetStatus(FastScreenStatus const&)+0x58>
   2c34c:	ebfffa45 	bl	2ac68 <LeaveCritical>
   2c350:	eaffffec 	b	2c308 <FastScreen::SetStatus(FastScreenStatus const&)+0xc0>

0002c354 <FastScreen::Write(void const*, unsigned int)>:
   2c354:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c358:	e1a05000 	mov	r5, r0
   2c35c:	e5900080 	ldr	r0, [r0, #128]	; 0x80
   2c360:	e1a07001 	mov	r7, r1
   2c364:	e3500000 	cmp	r0, #0
   2c368:	e1a04002 	mov	r4, r2
   2c36c:	1a000028 	bne	2c414 <FastScreen::Write(void const*, unsigned int)+0xc0>
   2c370:	e3a02001 	mov	r2, #1
   2c374:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
   2c378:	e5c52054 	strb	r2, [r5, #84]	; 0x54
   2c37c:	e3530000 	cmp	r3, #0
   2c380:	1a00001c 	bne	2c3f8 <FastScreen::Write(void const*, unsigned int)+0xa4>
   2c384:	e3540000 	cmp	r4, #0
   2c388:	e2446001 	sub	r6, r4, #1
   2c38c:	01a06004 	moveq	r6, r4
   2c390:	0a00000b 	beq	2c3c4 <FastScreen::Write(void const*, unsigned int)+0x70>
   2c394:	e1a04007 	mov	r4, r7
   2c398:	e0d410d1 	ldrsb	r1, [r4], #1
   2c39c:	e1a00005 	mov	r0, r5
   2c3a0:	eb00001d 	bl	2c41c <FastScreen::Write(char)>
   2c3a4:	e2643001 	rsb	r3, r4, #1
   2c3a8:	e0833006 	add	r3, r3, r6
   2c3ac:	e1770003 	cmn	r7, r3
   2c3b0:	1afffff8 	bne	2c398 <FastScreen::Write(void const*, unsigned int)+0x44>
   2c3b4:	e2866001 	add	r6, r6, #1
   2c3b8:	e5d53044 	ldrb	r3, [r5, #68]	; 0x44
   2c3bc:	e3530000 	cmp	r3, #0
   2c3c0:	1a000009 	bne	2c3ec <FastScreen::Write(void const*, unsigned int)+0x98>
   2c3c4:	e3a02000 	mov	r2, #0
   2c3c8:	e5953080 	ldr	r3, [r5, #128]	; 0x80
   2c3cc:	e5c52054 	strb	r2, [r5, #84]	; 0x54
   2c3d0:	e1530002 	cmp	r3, r2
   2c3d4:	0a000000 	beq	2c3dc <FastScreen::Write(void const*, unsigned int)+0x88>
   2c3d8:	ebfffa22 	bl	2ac68 <LeaveCritical>
   2c3dc:	e3a03000 	mov	r3, #0
   2c3e0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c3e4:	e1a00006 	mov	r0, r6
   2c3e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c3ec:	e1a00005 	mov	r0, r5
   2c3f0:	eb000332 	bl	2d0c0 <FastScreen::InvertCursor() [clone .part.6]>
   2c3f4:	eafffff2 	b	2c3c4 <FastScreen::Write(void const*, unsigned int)+0x70>
   2c3f8:	e1a00005 	mov	r0, r5
   2c3fc:	eb00032f 	bl	2d0c0 <FastScreen::InvertCursor() [clone .part.6]>
   2c400:	e3540000 	cmp	r4, #0
   2c404:	e2446001 	sub	r6, r4, #1
   2c408:	1affffe1 	bne	2c394 <FastScreen::Write(void const*, unsigned int)+0x40>
   2c40c:	e1a06004 	mov	r6, r4
   2c410:	eaffffe8 	b	2c3b8 <FastScreen::Write(void const*, unsigned int)+0x64>
   2c414:	ebfff9e8 	bl	2abbc <EnterCritical>
   2c418:	eaffffd4 	b	2c370 <FastScreen::Write(void const*, unsigned int)+0x1c>

0002c41c <FastScreen::Write(char)>:
   2c41c:	e92d4010 	push	{r4, lr}
   2c420:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   2c424:	e24dd008 	sub	sp, sp, #8
   2c428:	e1a04000 	mov	r4, r0
   2c42c:	e3530007 	cmp	r3, #7
   2c430:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2c434:	ea000010 	b	2c47c <FastScreen::Write(char)+0x60>
   2c438:	0002c4c8 	.word	0x0002c4c8
   2c43c:	0002c528 	.word	0x0002c528
   2c440:	0002c544 	.word	0x0002c544
   2c444:	0002c59c 	.word	0x0002c59c
   2c448:	0002c678 	.word	0x0002c678
   2c44c:	0002c698 	.word	0x0002c698
   2c450:	0002c6b8 	.word	0x0002c6b8
   2c454:	0002c48c 	.word	0x0002c48c
   2c458:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   2c45c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   2c460:	e1520003 	cmp	r2, r3
   2c464:	2a000004 	bcs	2c47c <FastScreen::Write(char)+0x60>
   2c468:	e2800014 	add	r0, r0, #20
   2c46c:	eb00196f 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2c470:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   2c474:	e0433000 	sub	r3, r3, r0
   2c478:	e5843040 	str	r3, [r4, #64]	; 0x40
   2c47c:	e3a03000 	mov	r3, #0
   2c480:	e5843030 	str	r3, [r4, #48]	; 0x30
   2c484:	e28dd008 	add	sp, sp, #8
   2c488:	e8bd8010 	pop	{r4, pc}
   2c48c:	e3510068 	cmp	r1, #104	; 0x68
   2c490:	0a000097 	beq	2c6f4 <FastScreen::Write(char)+0x2d8>
   2c494:	e351006c 	cmp	r1, #108	; 0x6c
   2c498:	0a000095 	beq	2c6f4 <FastScreen::Write(char)+0x2d8>
   2c49c:	e2411030 	sub	r1, r1, #48	; 0x30
   2c4a0:	e6ef3071 	uxtb	r3, r1
   2c4a4:	e3530009 	cmp	r3, #9
   2c4a8:	8afffff3 	bhi	2c47c <FastScreen::Write(char)+0x60>
   2c4ac:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   2c4b0:	e0833103 	add	r3, r3, r3, lsl #2
   2c4b4:	e0811083 	add	r1, r1, r3, lsl #1
   2c4b8:	e3510063 	cmp	r1, #99	; 0x63
   2c4bc:	e584104c 	str	r1, [r4, #76]	; 0x4c
   2c4c0:	8affffed 	bhi	2c47c <FastScreen::Write(char)+0x60>
   2c4c4:	eaffffee 	b	2c484 <FastScreen::Write(char)+0x68>
   2c4c8:	e2413008 	sub	r3, r1, #8
   2c4cc:	e3530013 	cmp	r3, #19
   2c4d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2c4d4:	ea0000d3 	b	2c828 <FastScreen::Write(char)+0x40c>
   2c4d8:	0002c760 	.word	0x0002c760
   2c4dc:	0002c754 	.word	0x0002c754
   2c4e0:	0002c740 	.word	0x0002c740
   2c4e4:	0002c828 	.word	0x0002c828
   2c4e8:	0002c828 	.word	0x0002c828
   2c4ec:	0002c734 	.word	0x0002c734
   2c4f0:	0002c828 	.word	0x0002c828
   2c4f4:	0002c828 	.word	0x0002c828
   2c4f8:	0002c828 	.word	0x0002c828
   2c4fc:	0002c828 	.word	0x0002c828
   2c500:	0002c828 	.word	0x0002c828
   2c504:	0002c828 	.word	0x0002c828
   2c508:	0002c828 	.word	0x0002c828
   2c50c:	0002c828 	.word	0x0002c828
   2c510:	0002c828 	.word	0x0002c828
   2c514:	0002c828 	.word	0x0002c828
   2c518:	0002c828 	.word	0x0002c828
   2c51c:	0002c828 	.word	0x0002c828
   2c520:	0002c828 	.word	0x0002c828
   2c524:	0002c728 	.word	0x0002c728
   2c528:	e351004d 	cmp	r1, #77	; 0x4d
   2c52c:	0affffd2 	beq	2c47c <FastScreen::Write(char)+0x60>
   2c530:	e351005b 	cmp	r1, #91	; 0x5b
   2c534:	03a03002 	moveq	r3, #2
   2c538:	05803030 	streq	r3, [r0, #48]	; 0x30
   2c53c:	0affffd0 	beq	2c484 <FastScreen::Write(char)+0x68>
   2c540:	eaffffcd 	b	2c47c <FastScreen::Write(char)+0x60>
   2c544:	e241303f 	sub	r3, r1, #63	; 0x3f
   2c548:	e3530011 	cmp	r3, #17
   2c54c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2c550:	ea0000de 	b	2c8d0 <FastScreen::Write(char)+0x4b4>
   2c554:	0002c884 	.word	0x0002c884
   2c558:	0002c8d0 	.word	0x0002c8d0
   2c55c:	0002c458 	.word	0x0002c458
   2c560:	0002c8b0 	.word	0x0002c8b0
   2c564:	0002c8a0 	.word	0x0002c8a0
   2c568:	0002c890 	.word	0x0002c890
   2c56c:	0002c8d0 	.word	0x0002c8d0
   2c570:	0002c8d0 	.word	0x0002c8d0
   2c574:	0002c8d0 	.word	0x0002c8d0
   2c578:	0002c86c 	.word	0x0002c86c
   2c57c:	0002c8d0 	.word	0x0002c8d0
   2c580:	0002c85c 	.word	0x0002c85c
   2c584:	0002c8c0 	.word	0x0002c8c0
   2c588:	0002c47c 	.word	0x0002c47c
   2c58c:	0002c47c 	.word	0x0002c47c
   2c590:	0002c8d0 	.word	0x0002c8d0
   2c594:	0002c8d0 	.word	0x0002c8d0
   2c598:	0002c47c 	.word	0x0002c47c
   2c59c:	e241303b 	sub	r3, r1, #59	; 0x3b
   2c5a0:	e3530032 	cmp	r3, #50	; 0x32
   2c5a4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2c5a8:	eaffffbb 	b	2c49c <FastScreen::Write(char)+0x80>
   2c5ac:	0002c81c 	.word	0x0002c81c
   2c5b0:	0002c49c 	.word	0x0002c49c
   2c5b4:	0002c49c 	.word	0x0002c49c
   2c5b8:	0002c49c 	.word	0x0002c49c
   2c5bc:	0002c49c 	.word	0x0002c49c
   2c5c0:	0002c49c 	.word	0x0002c49c
   2c5c4:	0002c49c 	.word	0x0002c49c
   2c5c8:	0002c49c 	.word	0x0002c49c
   2c5cc:	0002c49c 	.word	0x0002c49c
   2c5d0:	0002c49c 	.word	0x0002c49c
   2c5d4:	0002c49c 	.word	0x0002c49c
   2c5d8:	0002c49c 	.word	0x0002c49c
   2c5dc:	0002c49c 	.word	0x0002c49c
   2c5e0:	0002c49c 	.word	0x0002c49c
   2c5e4:	0002c49c 	.word	0x0002c49c
   2c5e8:	0002c49c 	.word	0x0002c49c
   2c5ec:	0002c49c 	.word	0x0002c49c
   2c5f0:	0002c47c 	.word	0x0002c47c
   2c5f4:	0002c47c 	.word	0x0002c47c
   2c5f8:	0002c49c 	.word	0x0002c49c
   2c5fc:	0002c49c 	.word	0x0002c49c
   2c600:	0002c47c 	.word	0x0002c47c
   2c604:	0002c49c 	.word	0x0002c49c
   2c608:	0002c49c 	.word	0x0002c49c
   2c60c:	0002c49c 	.word	0x0002c49c
   2c610:	0002c49c 	.word	0x0002c49c
   2c614:	0002c49c 	.word	0x0002c49c
   2c618:	0002c49c 	.word	0x0002c49c
   2c61c:	0002c49c 	.word	0x0002c49c
   2c620:	0002c76c 	.word	0x0002c76c
   2c624:	0002c49c 	.word	0x0002c49c
   2c628:	0002c49c 	.word	0x0002c49c
   2c62c:	0002c49c 	.word	0x0002c49c
   2c630:	0002c49c 	.word	0x0002c49c
   2c634:	0002c49c 	.word	0x0002c49c
   2c638:	0002c49c 	.word	0x0002c49c
   2c63c:	0002c49c 	.word	0x0002c49c
   2c640:	0002c49c 	.word	0x0002c49c
   2c644:	0002c49c 	.word	0x0002c49c
   2c648:	0002c49c 	.word	0x0002c49c
   2c64c:	0002c49c 	.word	0x0002c49c
   2c650:	0002c49c 	.word	0x0002c49c
   2c654:	0002c49c 	.word	0x0002c49c
   2c658:	0002c49c 	.word	0x0002c49c
   2c65c:	0002c49c 	.word	0x0002c49c
   2c660:	0002c780 	.word	0x0002c780
   2c664:	0002c49c 	.word	0x0002c49c
   2c668:	0002c49c 	.word	0x0002c49c
   2c66c:	0002c49c 	.word	0x0002c49c
   2c670:	0002c780 	.word	0x0002c780
   2c674:	0002c79c 	.word	0x0002c79c
   2c678:	e2411030 	sub	r1, r1, #48	; 0x30
   2c67c:	e6ef3071 	uxtb	r3, r1
   2c680:	e3530009 	cmp	r3, #9
   2c684:	8affff7c 	bhi	2c47c <FastScreen::Write(char)+0x60>
   2c688:	e3a03007 	mov	r3, #7
   2c68c:	e580104c 	str	r1, [r0, #76]	; 0x4c
   2c690:	e5803030 	str	r3, [r0, #48]	; 0x30
   2c694:	eaffff7a 	b	2c484 <FastScreen::Write(char)+0x68>
   2c698:	e2411030 	sub	r1, r1, #48	; 0x30
   2c69c:	e6ef3071 	uxtb	r3, r1
   2c6a0:	e3530009 	cmp	r3, #9
   2c6a4:	8affff74 	bhi	2c47c <FastScreen::Write(char)+0x60>
   2c6a8:	e3a03006 	mov	r3, #6
   2c6ac:	e5801050 	str	r1, [r0, #80]	; 0x50
   2c6b0:	e5803030 	str	r3, [r0, #48]	; 0x30
   2c6b4:	eaffff72 	b	2c484 <FastScreen::Write(char)+0x68>
   2c6b8:	e3510048 	cmp	r1, #72	; 0x48
   2c6bc:	0a000094 	beq	2c914 <FastScreen::Write(char)+0x4f8>
   2c6c0:	e3510072 	cmp	r1, #114	; 0x72
   2c6c4:	0a000011 	beq	2c710 <FastScreen::Write(char)+0x2f4>
   2c6c8:	e2411030 	sub	r1, r1, #48	; 0x30
   2c6cc:	e6ef3071 	uxtb	r3, r1
   2c6d0:	e3530009 	cmp	r3, #9
   2c6d4:	8affff68 	bhi	2c47c <FastScreen::Write(char)+0x60>
   2c6d8:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   2c6dc:	e0833103 	add	r3, r3, r3, lsl #2
   2c6e0:	e0811083 	add	r1, r1, r3, lsl #1
   2c6e4:	e35100c7 	cmp	r1, #199	; 0xc7
   2c6e8:	e5801050 	str	r1, [r0, #80]	; 0x50
   2c6ec:	8affff62 	bhi	2c47c <FastScreen::Write(char)+0x60>
   2c6f0:	eaffff63 	b	2c484 <FastScreen::Write(char)+0x68>
   2c6f4:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   2c6f8:	e3530019 	cmp	r3, #25
   2c6fc:	02411068 	subeq	r1, r1, #104	; 0x68
   2c700:	016f1f11 	clzeq	r1, r1
   2c704:	01a012a1 	lsreq	r1, r1, #5
   2c708:	05c41044 	strbeq	r1, [r4, #68]	; 0x44
   2c70c:	eaffff5a 	b	2c47c <FastScreen::Write(char)+0x60>
   2c710:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   2c714:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   2c718:	eb00013c 	bl	2cc10 <FastScreen::SetScrollRegion(unsigned int, unsigned int)>
   2c71c:	e3a03000 	mov	r3, #0
   2c720:	e5843030 	str	r3, [r4, #48]	; 0x30
   2c724:	eaffff56 	b	2c484 <FastScreen::Write(char)+0x68>
   2c728:	e3a03001 	mov	r3, #1
   2c72c:	e5803030 	str	r3, [r0, #48]	; 0x30
   2c730:	eaffff53 	b	2c484 <FastScreen::Write(char)+0x68>
   2c734:	e3a03000 	mov	r3, #0
   2c738:	e580303c 	str	r3, [r0, #60]	; 0x3c
   2c73c:	eaffff50 	b	2c484 <FastScreen::Write(char)+0x68>
   2c740:	e3a03000 	mov	r3, #0
   2c744:	e580303c 	str	r3, [r0, #60]	; 0x3c
   2c748:	e28dd008 	add	sp, sp, #8
   2c74c:	e8bd4010 	pop	{r4, lr}
   2c750:	ea0000ab 	b	2ca04 <FastScreen::CursorDown()>
   2c754:	e28dd008 	add	sp, sp, #8
   2c758:	e8bd4010 	pop	{r4, lr}
   2c75c:	ea000172 	b	2cd2c <FastScreen::Tabulator()>
   2c760:	e28dd008 	add	sp, sp, #8
   2c764:	e8bd4010 	pop	{r4, lr}
   2c768:	ea0000bd 	b	2ca64 <FastScreen::CursorLeft()>
   2c76c:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   2c770:	e3510000 	cmp	r1, #0
   2c774:	0affff40 	beq	2c47c <FastScreen::Write(char)+0x60>
   2c778:	eb000238 	bl	2d060 <FastScreen::EraseChars(unsigned int) [clone .part.4]>
   2c77c:	eaffff3e 	b	2c47c <FastScreen::Write(char)+0x60>
   2c780:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   2c784:	e3530004 	cmp	r3, #4
   2c788:	02411068 	subeq	r1, r1, #104	; 0x68
   2c78c:	016f1f11 	clzeq	r1, r1
   2c790:	01a012a1 	lsreq	r1, r1, #5
   2c794:	05c01048 	strbeq	r1, [r0, #72]	; 0x48
   2c798:	eaffff37 	b	2c47c <FastScreen::Write(char)+0x60>
   2c79c:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   2c7a0:	e353001b 	cmp	r3, #27
   2c7a4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2c7a8:	eaffff33 	b	2c47c <FastScreen::Write(char)+0x60>
   2c7ac:	0002c908 	.word	0x0002c908
   2c7b0:	0002c8fc 	.word	0x0002c8fc
   2c7b4:	0002c8f0 	.word	0x0002c8f0
   2c7b8:	0002c47c 	.word	0x0002c47c
   2c7bc:	0002c47c 	.word	0x0002c47c
   2c7c0:	0002c47c 	.word	0x0002c47c
   2c7c4:	0002c47c 	.word	0x0002c47c
   2c7c8:	0002c47c 	.word	0x0002c47c
   2c7cc:	0002c47c 	.word	0x0002c47c
   2c7d0:	0002c47c 	.word	0x0002c47c
   2c7d4:	0002c47c 	.word	0x0002c47c
   2c7d8:	0002c47c 	.word	0x0002c47c
   2c7dc:	0002c47c 	.word	0x0002c47c
   2c7e0:	0002c47c 	.word	0x0002c47c
   2c7e4:	0002c47c 	.word	0x0002c47c
   2c7e8:	0002c47c 	.word	0x0002c47c
   2c7ec:	0002c47c 	.word	0x0002c47c
   2c7f0:	0002c47c 	.word	0x0002c47c
   2c7f4:	0002c47c 	.word	0x0002c47c
   2c7f8:	0002c47c 	.word	0x0002c47c
   2c7fc:	0002c47c 	.word	0x0002c47c
   2c800:	0002c47c 	.word	0x0002c47c
   2c804:	0002c47c 	.word	0x0002c47c
   2c808:	0002c47c 	.word	0x0002c47c
   2c80c:	0002c47c 	.word	0x0002c47c
   2c810:	0002c47c 	.word	0x0002c47c
   2c814:	0002c47c 	.word	0x0002c47c
   2c818:	0002c908 	.word	0x0002c908
   2c81c:	e3a03005 	mov	r3, #5
   2c820:	e5803030 	str	r3, [r0, #48]	; 0x30
   2c824:	eaffff16 	b	2c484 <FastScreen::Write(char)+0x68>
   2c828:	e6ef3071 	uxtb	r3, r1
   2c82c:	e353001f 	cmp	r3, #31
   2c830:	9affff13 	bls	2c484 <FastScreen::Write(char)+0x68>
   2c834:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   2c838:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   2c83c:	e1d004b6 	ldrh	r0, [r0, #70]	; 0x46
   2c840:	e58d0000 	str	r0, [sp]
   2c844:	e1a00004 	mov	r0, r4
   2c848:	eb00017a 	bl	2ce38 <FastScreen::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   2c84c:	e1a00004 	mov	r0, r4
   2c850:	e28dd008 	add	sp, sp, #8
   2c854:	e8bd4010 	pop	{r4, lr}
   2c858:	ea0000b4 	b	2cb30 <FastScreen::CursorRight()>
   2c85c:	eb000035 	bl	2c938 <FastScreen::ClearDisplayEnd()>
   2c860:	e3a03000 	mov	r3, #0
   2c864:	e5843030 	str	r3, [r4, #48]	; 0x30
   2c868:	eaffff05 	b	2c484 <FastScreen::Write(char)+0x68>
   2c86c:	e3a03000 	mov	r3, #0
   2c870:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   2c874:	e580303c 	str	r3, [r0, #60]	; 0x3c
   2c878:	e5803030 	str	r3, [r0, #48]	; 0x30
   2c87c:	e5802040 	str	r2, [r0, #64]	; 0x40
   2c880:	eafffeff 	b	2c484 <FastScreen::Write(char)+0x68>
   2c884:	e3a03004 	mov	r3, #4
   2c888:	e5803030 	str	r3, [r0, #48]	; 0x30
   2c88c:	eafffefc 	b	2c484 <FastScreen::Write(char)+0x68>
   2c890:	eb000073 	bl	2ca64 <FastScreen::CursorLeft()>
   2c894:	e3a03000 	mov	r3, #0
   2c898:	e5843030 	str	r3, [r4, #48]	; 0x30
   2c89c:	eafffef8 	b	2c484 <FastScreen::Write(char)+0x68>
   2c8a0:	eb0000a2 	bl	2cb30 <FastScreen::CursorRight()>
   2c8a4:	e3a03000 	mov	r3, #0
   2c8a8:	e5843030 	str	r3, [r4, #48]	; 0x30
   2c8ac:	eafffef4 	b	2c484 <FastScreen::Write(char)+0x68>
   2c8b0:	eb000053 	bl	2ca04 <FastScreen::CursorDown()>
   2c8b4:	e3a03000 	mov	r3, #0
   2c8b8:	e5843030 	str	r3, [r4, #48]	; 0x30
   2c8bc:	eafffef0 	b	2c484 <FastScreen::Write(char)+0x68>
   2c8c0:	eb00003d 	bl	2c9bc <FastScreen::ClearLineEnd()>
   2c8c4:	e3a03000 	mov	r3, #0
   2c8c8:	e5843030 	str	r3, [r4, #48]	; 0x30
   2c8cc:	eafffeec 	b	2c484 <FastScreen::Write(char)+0x68>
   2c8d0:	e2411030 	sub	r1, r1, #48	; 0x30
   2c8d4:	e6ef3071 	uxtb	r3, r1
   2c8d8:	e3530009 	cmp	r3, #9
   2c8dc:	8afffee6 	bhi	2c47c <FastScreen::Write(char)+0x60>
   2c8e0:	e3a03003 	mov	r3, #3
   2c8e4:	e580104c 	str	r1, [r0, #76]	; 0x4c
   2c8e8:	e5803030 	str	r3, [r0, #48]	; 0x30
   2c8ec:	eafffee4 	b	2c484 <FastScreen::Write(char)+0x68>
   2c8f0:	e3a0301f 	mov	r3, #31
   2c8f4:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   2c8f8:	eafffedf 	b	2c47c <FastScreen::Write(char)+0x60>
   2c8fc:	e3a03b3e 	mov	r3, #63488	; 0xf800
   2c900:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   2c904:	eafffedc 	b	2c47c <FastScreen::Write(char)+0x60>
   2c908:	e3e03020 	mvn	r3, #32
   2c90c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   2c910:	eafffed9 	b	2c47c <FastScreen::Write(char)+0x60>
   2c914:	e5902050 	ldr	r2, [r0, #80]	; 0x50
   2c918:	e590104c 	ldr	r1, [r0, #76]	; 0x4c
   2c91c:	eb00006b 	bl	2cad0 <FastScreen::CursorMove(unsigned int, unsigned int)>
   2c920:	e3a03000 	mov	r3, #0
   2c924:	e5843030 	str	r3, [r4, #48]	; 0x30
   2c928:	eafffed5 	b	2c484 <FastScreen::Write(char)+0x68>

0002c92c <FastScreen::CarriageReturn()>:
   2c92c:	e3a03000 	mov	r3, #0
   2c930:	e580303c 	str	r3, [r0, #60]	; 0x3c
   2c934:	e12fff1e 	bx	lr

0002c938 <FastScreen::ClearDisplayEnd()>:
   2c938:	e92d4070 	push	{r4, r5, r6, lr}
   2c93c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   2c940:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   2c944:	e1a05000 	mov	r5, r0
   2c948:	e1540003 	cmp	r4, r3
   2c94c:	e2806014 	add	r6, r0, #20
   2c950:	2a000009 	bcs	2c97c <FastScreen::ClearDisplayEnd()+0x44>
   2c954:	e1a01004 	mov	r1, r4
   2c958:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   2c95c:	e1a00005 	mov	r0, r5
   2c960:	eb000169 	bl	2cf0c <FastScreen::EraseChar(unsigned int, unsigned int)>
   2c964:	e1a00006 	mov	r0, r6
   2c968:	eb00182e 	bl	32a28 <CCharGenerator::GetCharWidth() const>
   2c96c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   2c970:	e0844000 	add	r4, r4, r0
   2c974:	e1530004 	cmp	r3, r4
   2c978:	8afffff5 	bhi	2c954 <FastScreen::ClearDisplayEnd()+0x1c>
   2c97c:	e1a00006 	mov	r0, r6
   2c980:	e5954040 	ldr	r4, [r5, #64]	; 0x40
   2c984:	eb001829 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2c988:	e5953020 	ldr	r3, [r5, #32]
   2c98c:	e0840000 	add	r0, r4, r0
   2c990:	e0000093 	mul	r0, r3, r0
   2c994:	e595201c 	ldr	r2, [r5, #28]
   2c998:	e5953018 	ldr	r3, [r5, #24]
   2c99c:	e07020a2 	rsbs	r2, r0, r2, lsr #1
   2c9a0:	0a000004 	beq	2c9b8 <FastScreen::ClearDisplayEnd()+0x80>
   2c9a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   2c9a8:	e1a02082 	lsl	r2, r2, #1
   2c9ac:	e0830080 	add	r0, r3, r0, lsl #1
   2c9b0:	e3a01000 	mov	r1, #0
   2c9b4:	eafff0fe 	b	28db4 <memset>
   2c9b8:	e8bd8070 	pop	{r4, r5, r6, pc}

0002c9bc <FastScreen::ClearLineEnd()>:
   2c9bc:	e92d4070 	push	{r4, r5, r6, lr}
   2c9c0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   2c9c4:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
   2c9c8:	e1540003 	cmp	r4, r3
   2c9cc:	28bd8070 	popcs	{r4, r5, r6, pc}
   2c9d0:	e1a05000 	mov	r5, r0
   2c9d4:	e2806014 	add	r6, r0, #20
   2c9d8:	e1a01004 	mov	r1, r4
   2c9dc:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   2c9e0:	e1a00005 	mov	r0, r5
   2c9e4:	eb000148 	bl	2cf0c <FastScreen::EraseChar(unsigned int, unsigned int)>
   2c9e8:	e1a00006 	mov	r0, r6
   2c9ec:	eb00180d 	bl	32a28 <CCharGenerator::GetCharWidth() const>
   2c9f0:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   2c9f4:	e0844000 	add	r4, r4, r0
   2c9f8:	e1530004 	cmp	r3, r4
   2c9fc:	8afffff5 	bhi	2c9d8 <FastScreen::ClearLineEnd()+0x1c>
   2ca00:	e8bd8070 	pop	{r4, r5, r6, pc}

0002ca04 <FastScreen::CursorDown()>:
   2ca04:	e92d4070 	push	{r4, r5, r6, lr}
   2ca08:	e1a04000 	mov	r4, r0
   2ca0c:	e2805014 	add	r5, r0, #20
   2ca10:	e1a00005 	mov	r0, r5
   2ca14:	eb001805 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2ca18:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   2ca1c:	e5942038 	ldr	r2, [r4, #56]	; 0x38
   2ca20:	e0800003 	add	r0, r0, r3
   2ca24:	e1500002 	cmp	r0, r2
   2ca28:	e5840040 	str	r0, [r4, #64]	; 0x40
   2ca2c:	38bd8070 	popcc	{r4, r5, r6, pc}
   2ca30:	e1a00004 	mov	r0, r4
   2ca34:	eb0000cf 	bl	2cd78 <FastScreen::Scroll()>
   2ca38:	e1a00005 	mov	r0, r5
   2ca3c:	eb0017fb 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2ca40:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   2ca44:	e0430000 	sub	r0, r3, r0
   2ca48:	e5840040 	str	r0, [r4, #64]	; 0x40
   2ca4c:	e8bd8070 	pop	{r4, r5, r6, pc}

0002ca50 <FastScreen::CursorHome()>:
   2ca50:	e3a02000 	mov	r2, #0
   2ca54:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   2ca58:	e580203c 	str	r2, [r0, #60]	; 0x3c
   2ca5c:	e5803040 	str	r3, [r0, #64]	; 0x40
   2ca60:	e12fff1e 	bx	lr

0002ca64 <FastScreen::CursorLeft()>:
   2ca64:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
   2ca68:	e92d4070 	push	{r4, r5, r6, lr}
   2ca6c:	e3530000 	cmp	r3, #0
   2ca70:	e1a04000 	mov	r4, r0
   2ca74:	1a00000f 	bne	2cab8 <FastScreen::CursorLeft()+0x54>
   2ca78:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   2ca7c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   2ca80:	e1520003 	cmp	r2, r3
   2ca84:	98bd8070 	popls	{r4, r5, r6, pc}
   2ca88:	e2806014 	add	r6, r0, #20
   2ca8c:	e1a00006 	mov	r0, r6
   2ca90:	e5945024 	ldr	r5, [r4, #36]	; 0x24
   2ca94:	eb0017e3 	bl	32a28 <CCharGenerator::GetCharWidth() const>
   2ca98:	e0450000 	sub	r0, r5, r0
   2ca9c:	e584003c 	str	r0, [r4, #60]	; 0x3c
   2caa0:	e1a00006 	mov	r0, r6
   2caa4:	eb0017e1 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2caa8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   2caac:	e0430000 	sub	r0, r3, r0
   2cab0:	e5840040 	str	r0, [r4, #64]	; 0x40
   2cab4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cab8:	e2800014 	add	r0, r0, #20
   2cabc:	eb0017d9 	bl	32a28 <CCharGenerator::GetCharWidth() const>
   2cac0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   2cac4:	e0430000 	sub	r0, r3, r0
   2cac8:	e584003c 	str	r0, [r4, #60]	; 0x3c
   2cacc:	e8bd8070 	pop	{r4, r5, r6, pc}

0002cad0 <FastScreen::CursorMove(unsigned int, unsigned int)>:
   2cad0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2cad4:	e2806014 	add	r6, r0, #20
   2cad8:	e1a04002 	mov	r4, r2
   2cadc:	e1a05000 	mov	r5, r0
   2cae0:	e1a00006 	mov	r0, r6
   2cae4:	e1a07001 	mov	r7, r1
   2cae8:	eb0017ce 	bl	32a28 <CCharGenerator::GetCharWidth() const>
   2caec:	e2444001 	sub	r4, r4, #1
   2caf0:	e0040490 	mul	r4, r0, r4
   2caf4:	e1a00006 	mov	r0, r6
   2caf8:	eb0017cc 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2cafc:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   2cb00:	e1540003 	cmp	r4, r3
   2cb04:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   2cb08:	e2477001 	sub	r7, r7, #1
   2cb0c:	e0000790 	mul	r0, r0, r7
   2cb10:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   2cb14:	e1500003 	cmp	r0, r3
   2cb18:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
   2cb1c:	e5953038 	ldr	r3, [r5, #56]	; 0x38
   2cb20:	e1500003 	cmp	r0, r3
   2cb24:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
   2cb28:	35850040 	strcc	r0, [r5, #64]	; 0x40
   2cb2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002cb30 <FastScreen::CursorRight()>:
   2cb30:	e92d4010 	push	{r4, lr}
   2cb34:	e1a04000 	mov	r4, r0
   2cb38:	e2800014 	add	r0, r0, #20
   2cb3c:	eb0017b9 	bl	32a28 <CCharGenerator::GetCharWidth() const>
   2cb40:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   2cb44:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   2cb48:	e0800003 	add	r0, r0, r3
   2cb4c:	e1500002 	cmp	r0, r2
   2cb50:	e584003c 	str	r0, [r4, #60]	; 0x3c
   2cb54:	38bd8010 	popcc	{r4, pc}
   2cb58:	e3a03000 	mov	r3, #0
   2cb5c:	e1a00004 	mov	r0, r4
   2cb60:	e584303c 	str	r3, [r4, #60]	; 0x3c
   2cb64:	e8bd4010 	pop	{r4, lr}
   2cb68:	eaffffa5 	b	2ca04 <FastScreen::CursorDown()>

0002cb6c <FastScreen::CursorUp()>:
   2cb6c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
   2cb70:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   2cb74:	e1520003 	cmp	r2, r3
   2cb78:	912fff1e 	bxls	lr
   2cb7c:	e92d4010 	push	{r4, lr}
   2cb80:	e1a04000 	mov	r4, r0
   2cb84:	e2800014 	add	r0, r0, #20
   2cb88:	eb0017a8 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2cb8c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
   2cb90:	e0430000 	sub	r0, r3, r0
   2cb94:	e5840040 	str	r0, [r4, #64]	; 0x40
   2cb98:	e8bd8010 	pop	{r4, pc}

0002cb9c <FastScreen::DeleteChars(unsigned int)>:
   2cb9c:	e12fff1e 	bx	lr

0002cba0 <FastScreen::DeleteLines(unsigned int)>:
   2cba0:	e12fff1e 	bx	lr

0002cba4 <FastScreen::DisplayChar(char)>:
   2cba4:	e6ef3071 	uxtb	r3, r1
   2cba8:	e353001f 	cmp	r3, #31
   2cbac:	912fff1e 	bxls	lr
   2cbb0:	e92d4010 	push	{r4, lr}
   2cbb4:	e1a04000 	mov	r4, r0
   2cbb8:	e1d0c4b6 	ldrh	ip, [r0, #70]	; 0x46
   2cbbc:	e24dd008 	sub	sp, sp, #8
   2cbc0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
   2cbc4:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
   2cbc8:	e58dc000 	str	ip, [sp]
   2cbcc:	eb000099 	bl	2ce38 <FastScreen::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   2cbd0:	e1a00004 	mov	r0, r4
   2cbd4:	e28dd008 	add	sp, sp, #8
   2cbd8:	e8bd4010 	pop	{r4, lr}
   2cbdc:	eaffffd3 	b	2cb30 <FastScreen::CursorRight()>

0002cbe0 <FastScreen::EraseChars(unsigned int)>:
   2cbe0:	e3510000 	cmp	r1, #0
   2cbe4:	012fff1e 	bxeq	lr
   2cbe8:	ea00011c 	b	2d060 <FastScreen::EraseChars(unsigned int) [clone .part.4]>

0002cbec <FastScreen::InsertLines(unsigned int)>:
   2cbec:	e12fff1e 	bx	lr

0002cbf0 <FastScreen::InsertMode(bool)>:
   2cbf0:	e5c01048 	strb	r1, [r0, #72]	; 0x48
   2cbf4:	e12fff1e 	bx	lr

0002cbf8 <FastScreen::NewLine()>:
   2cbf8:	e3a02000 	mov	r2, #0
   2cbfc:	e580203c 	str	r2, [r0, #60]	; 0x3c
   2cc00:	eaffff7f 	b	2ca04 <FastScreen::CursorDown()>

0002cc04 <FastScreen::ReverseScroll()>:
   2cc04:	e12fff1e 	bx	lr

0002cc08 <FastScreen::SetCursorMode(bool)>:
   2cc08:	e5c01044 	strb	r1, [r0, #68]	; 0x44
   2cc0c:	e12fff1e 	bx	lr

0002cc10 <FastScreen::SetScrollRegion(unsigned int, unsigned int)>:
   2cc10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2cc14:	e2807014 	add	r7, r0, #20
   2cc18:	e1a06000 	mov	r6, r0
   2cc1c:	e1a04001 	mov	r4, r1
   2cc20:	e1a00007 	mov	r0, r7
   2cc24:	e1a05002 	mov	r5, r2
   2cc28:	eb001780 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2cc2c:	e2444001 	sub	r4, r4, #1
   2cc30:	e0040490 	mul	r4, r0, r4
   2cc34:	e1a00007 	mov	r0, r7
   2cc38:	eb00177c 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2cc3c:	e0000095 	mul	r0, r5, r0
   2cc40:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
   2cc44:	e3500000 	cmp	r0, #0
   2cc48:	11540002 	cmpne	r4, r2
   2cc4c:	33a03001 	movcc	r3, #1
   2cc50:	23a03000 	movcs	r3, #0
   2cc54:	e1500002 	cmp	r0, r2
   2cc58:	83a03000 	movhi	r3, #0
   2cc5c:	92033001 	andls	r3, r3, #1
   2cc60:	e1540000 	cmp	r4, r0
   2cc64:	23a03000 	movcs	r3, #0
   2cc68:	32033001 	andcc	r3, r3, #1
   2cc6c:	e3530000 	cmp	r3, #0
   2cc70:	e3a03000 	mov	r3, #0
   2cc74:	05964034 	ldreq	r4, [r6, #52]	; 0x34
   2cc78:	15864034 	strne	r4, [r6, #52]	; 0x34
   2cc7c:	15860038 	strne	r0, [r6, #56]	; 0x38
   2cc80:	e5864040 	str	r4, [r6, #64]	; 0x40
   2cc84:	e586303c 	str	r3, [r6, #60]	; 0x3c
   2cc88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002cc8c <FastScreen::SetStandoutMode(unsigned int)>:
   2cc8c:	e351001b 	cmp	r1, #27
   2cc90:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   2cc94:	ea00001d 	b	2cd10 <FastScreen::SetStandoutMode(unsigned int)+0x84>
   2cc98:	0002cd20 	.word	0x0002cd20
   2cc9c:	0002cd14 	.word	0x0002cd14
   2cca0:	0002cd08 	.word	0x0002cd08
   2cca4:	0002cd10 	.word	0x0002cd10
   2cca8:	0002cd10 	.word	0x0002cd10
   2ccac:	0002cd10 	.word	0x0002cd10
   2ccb0:	0002cd10 	.word	0x0002cd10
   2ccb4:	0002cd10 	.word	0x0002cd10
   2ccb8:	0002cd10 	.word	0x0002cd10
   2ccbc:	0002cd10 	.word	0x0002cd10
   2ccc0:	0002cd10 	.word	0x0002cd10
   2ccc4:	0002cd10 	.word	0x0002cd10
   2ccc8:	0002cd10 	.word	0x0002cd10
   2cccc:	0002cd10 	.word	0x0002cd10
   2ccd0:	0002cd10 	.word	0x0002cd10
   2ccd4:	0002cd10 	.word	0x0002cd10
   2ccd8:	0002cd10 	.word	0x0002cd10
   2ccdc:	0002cd10 	.word	0x0002cd10
   2cce0:	0002cd10 	.word	0x0002cd10
   2cce4:	0002cd10 	.word	0x0002cd10
   2cce8:	0002cd10 	.word	0x0002cd10
   2ccec:	0002cd10 	.word	0x0002cd10
   2ccf0:	0002cd10 	.word	0x0002cd10
   2ccf4:	0002cd10 	.word	0x0002cd10
   2ccf8:	0002cd10 	.word	0x0002cd10
   2ccfc:	0002cd10 	.word	0x0002cd10
   2cd00:	0002cd10 	.word	0x0002cd10
   2cd04:	0002cd20 	.word	0x0002cd20
   2cd08:	e3a0301f 	mov	r3, #31
   2cd0c:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   2cd10:	e12fff1e 	bx	lr
   2cd14:	e3a03b3e 	mov	r3, #63488	; 0xf800
   2cd18:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   2cd1c:	e12fff1e 	bx	lr
   2cd20:	e3e03020 	mvn	r3, #32
   2cd24:	e1c034b6 	strh	r3, [r0, #70]	; 0x46
   2cd28:	e12fff1e 	bx	lr

0002cd2c <FastScreen::Tabulator()>:
   2cd2c:	e92d4070 	push	{r4, r5, r6, lr}
   2cd30:	e1a05000 	mov	r5, r0
   2cd34:	e2800014 	add	r0, r0, #20
   2cd38:	eb00173a 	bl	32a28 <CCharGenerator::GetCharWidth() const>
   2cd3c:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   2cd40:	e1a04180 	lsl	r4, r0, #3
   2cd44:	e0840003 	add	r0, r4, r3
   2cd48:	e1a01004 	mov	r1, r4
   2cd4c:	eb000e3c 	bl	30644 <__aeabi_uidiv>
   2cd50:	e0000094 	mul	r0, r4, r0
   2cd54:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   2cd58:	e585003c 	str	r0, [r5, #60]	; 0x3c
   2cd5c:	e1500003 	cmp	r0, r3
   2cd60:	38bd8070 	popcc	{r4, r5, r6, pc}
   2cd64:	e3a03000 	mov	r3, #0
   2cd68:	e1a00005 	mov	r0, r5
   2cd6c:	e585303c 	str	r3, [r5, #60]	; 0x3c
   2cd70:	e8bd4070 	pop	{r4, r5, r6, lr}
   2cd74:	eaffff22 	b	2ca04 <FastScreen::CursorDown()>

0002cd78 <FastScreen::Scroll()>:
   2cd78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2cd7c:	e1a05000 	mov	r5, r0
   2cd80:	e24dd008 	sub	sp, sp, #8
   2cd84:	e2800014 	add	r0, r0, #20
   2cd88:	eb001728 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2cd8c:	e5951034 	ldr	r1, [r5, #52]	; 0x34
   2cd90:	e5954038 	ldr	r4, [r5, #56]	; 0x38
   2cd94:	e5952020 	ldr	r2, [r5, #32]
   2cd98:	e0444001 	sub	r4, r4, r1
   2cd9c:	e1a03082 	lsl	r3, r2, #1
   2cda0:	e0444000 	sub	r4, r4, r0
   2cda4:	e0040493 	mul	r4, r3, r4
   2cda8:	e0070192 	mul	r7, r2, r1
   2cdac:	e5952018 	ldr	r2, [r5, #24]
   2cdb0:	e3540000 	cmp	r4, #0
   2cdb4:	e1a06000 	mov	r6, r0
   2cdb8:	e0827087 	add	r7, r2, r7, lsl #1
   2cdbc:	1a000008 	bne	2cde4 <FastScreen::Scroll()+0x6c>
   2cdc0:	e0030693 	mul	r3, r3, r6
   2cdc4:	e1b03123 	lsrs	r3, r3, #2
   2cdc8:	0a000018 	beq	2ce30 <FastScreen::Scroll()+0xb8>
   2cdcc:	e1a00007 	mov	r0, r7
   2cdd0:	e3a01000 	mov	r1, #0
   2cdd4:	e1a02103 	lsl	r2, r3, #2
   2cdd8:	e28dd008 	add	sp, sp, #8
   2cddc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2cde0:	eaffeff3 	b	28db4 <memset>
   2cde4:	e3a0c000 	mov	ip, #0
   2cde8:	e3a00002 	mov	r0, #2
   2cdec:	e2858058 	add	r8, r5, #88	; 0x58
   2cdf0:	e0861001 	add	r1, r6, r1
   2cdf4:	e0222193 	mla	r2, r3, r1, r2
   2cdf8:	e88d1001 	stm	sp, {r0, ip}
   2cdfc:	e1a03004 	mov	r3, r4
   2ce00:	e1a01007 	mov	r1, r7
   2ce04:	e1a00008 	mov	r0, r8
   2ce08:	eb0017a6 	bl	32ca8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
   2ce0c:	e1a00008 	mov	r0, r8
   2ce10:	eb001993 	bl	33464 <CDMAChannel::Start()>
   2ce14:	e1a00008 	mov	r0, r8
   2ce18:	eb0019eb 	bl	335cc <CDMAChannel::Wait()>
   2ce1c:	e5953020 	ldr	r3, [r5, #32]
   2ce20:	e3c44003 	bic	r4, r4, #3
   2ce24:	e1a03083 	lsl	r3, r3, #1
   2ce28:	e0877004 	add	r7, r7, r4
   2ce2c:	eaffffe3 	b	2cdc0 <FastScreen::Scroll()+0x48>
   2ce30:	e28dd008 	add	sp, sp, #8
   2ce34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002ce38 <FastScreen::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   2ce38:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ce3c:	e2806014 	add	r6, r0, #20
   2ce40:	e24dd00c 	sub	sp, sp, #12
   2ce44:	e1a07000 	mov	r7, r0
   2ce48:	e1a00006 	mov	r0, r6
   2ce4c:	e1a0a001 	mov	sl, r1
   2ce50:	e1a09002 	mov	r9, r2
   2ce54:	e58d3004 	str	r3, [sp, #4]
   2ce58:	e3a08000 	mov	r8, #0
   2ce5c:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
   2ce60:	eb0016f2 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2ce64:	e1580000 	cmp	r8, r0
   2ce68:	2a000025 	bcs	2cf04 <FastScreen::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
   2ce6c:	e59d3004 	ldr	r3, [sp, #4]
   2ce70:	e3a04000 	mov	r4, #0
   2ce74:	e0883003 	add	r3, r8, r3
   2ce78:	e58d3000 	str	r3, [sp]
   2ce7c:	ea000000 	b	2ce84 <FastScreen::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x4c>
   2ce80:	e2844001 	add	r4, r4, #1
   2ce84:	e1a00006 	mov	r0, r6
   2ce88:	eb0016e6 	bl	32a28 <CCharGenerator::GetCharWidth() const>
   2ce8c:	e1540000 	cmp	r4, r0
   2ce90:	e0845009 	add	r5, r4, r9
   2ce94:	2a000015 	bcs	2cef0 <FastScreen::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xb8>
   2ce98:	e1a03008 	mov	r3, r8
   2ce9c:	e1a02004 	mov	r2, r4
   2cea0:	e1a0100a 	mov	r1, sl
   2cea4:	e1a00006 	mov	r0, r6
   2cea8:	eb0016e4 	bl	32a40 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   2ceac:	e5973024 	ldr	r3, [r7, #36]	; 0x24
   2ceb0:	e3500000 	cmp	r0, #0
   2ceb4:	11a0000b 	movne	r0, fp
   2ceb8:	03a00000 	moveq	r0, #0
   2cebc:	e1550003 	cmp	r5, r3
   2cec0:	2affffee 	bcs	2ce80 <FastScreen::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
   2cec4:	e5973028 	ldr	r3, [r7, #40]	; 0x28
   2cec8:	e59d2000 	ldr	r2, [sp]
   2cecc:	e1520003 	cmp	r2, r3
   2ced0:	2affffea 	bcs	2ce80 <FastScreen::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
   2ced4:	e5973020 	ldr	r3, [r7, #32]
   2ced8:	e59d1000 	ldr	r1, [sp]
   2cedc:	e5972018 	ldr	r2, [r7, #24]
   2cee0:	e0255193 	mla	r5, r3, r1, r5
   2cee4:	e1a05085 	lsl	r5, r5, #1
   2cee8:	e18200b5 	strh	r0, [r2, r5]
   2ceec:	eaffffe3 	b	2ce80 <FastScreen::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
   2cef0:	e1a00006 	mov	r0, r6
   2cef4:	eb0016cd 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2cef8:	e2888001 	add	r8, r8, #1
   2cefc:	e1580000 	cmp	r8, r0
   2cf00:	3affffd9 	bcc	2ce6c <FastScreen::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
   2cf04:	e28dd00c 	add	sp, sp, #12
   2cf08:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002cf0c <FastScreen::EraseChar(unsigned int, unsigned int)>:
   2cf0c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cf10:	e3a08000 	mov	r8, #0
   2cf14:	e1a0b000 	mov	fp, r0
   2cf18:	e1a06001 	mov	r6, r1
   2cf1c:	e1a0a002 	mov	sl, r2
   2cf20:	e1a09008 	mov	r9, r8
   2cf24:	e2805014 	add	r5, r0, #20
   2cf28:	e1a00005 	mov	r0, r5
   2cf2c:	eb0016bf 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2cf30:	e1580000 	cmp	r8, r0
   2cf34:	28bd8ff8 	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cf38:	e3a04000 	mov	r4, #0
   2cf3c:	e088700a 	add	r7, r8, sl
   2cf40:	e1a00005 	mov	r0, r5
   2cf44:	eb0016b7 	bl	32a28 <CCharGenerator::GetCharWidth() const>
   2cf48:	e1540000 	cmp	r4, r0
   2cf4c:	e0843006 	add	r3, r4, r6
   2cf50:	2a00000c 	bcs	2cf88 <FastScreen::EraseChar(unsigned int, unsigned int)+0x7c>
   2cf54:	e59b2024 	ldr	r2, [fp, #36]	; 0x24
   2cf58:	e2844001 	add	r4, r4, #1
   2cf5c:	e1530002 	cmp	r3, r2
   2cf60:	2afffff6 	bcs	2cf40 <FastScreen::EraseChar(unsigned int, unsigned int)+0x34>
   2cf64:	e59b2028 	ldr	r2, [fp, #40]	; 0x28
   2cf68:	e1570002 	cmp	r7, r2
   2cf6c:	2afffff3 	bcs	2cf40 <FastScreen::EraseChar(unsigned int, unsigned int)+0x34>
   2cf70:	e59b2020 	ldr	r2, [fp, #32]
   2cf74:	e59b1018 	ldr	r1, [fp, #24]
   2cf78:	e0233792 	mla	r3, r2, r7, r3
   2cf7c:	e1a03083 	lsl	r3, r3, #1
   2cf80:	e18190b3 	strh	r9, [r1, r3]
   2cf84:	eaffffed 	b	2cf40 <FastScreen::EraseChar(unsigned int, unsigned int)+0x34>
   2cf88:	e2888001 	add	r8, r8, #1
   2cf8c:	eaffffe5 	b	2cf28 <FastScreen::EraseChar(unsigned int, unsigned int)+0x1c>

0002cf90 <FastScreen::InvertCursor()>:
   2cf90:	e5d03044 	ldrb	r3, [r0, #68]	; 0x44
   2cf94:	e3530000 	cmp	r3, #0
   2cf98:	012fff1e 	bxeq	lr
   2cf9c:	ea000047 	b	2d0c0 <FastScreen::InvertCursor() [clone .part.6]>

0002cfa0 <FastScreen::SetPixel(unsigned int, unsigned int, unsigned short)>:
   2cfa0:	e590c024 	ldr	ip, [r0, #36]	; 0x24
   2cfa4:	e15c0001 	cmp	ip, r1
   2cfa8:	912fff1e 	bxls	lr
   2cfac:	e590c028 	ldr	ip, [r0, #40]	; 0x28
   2cfb0:	e15c0002 	cmp	ip, r2
   2cfb4:	8590c020 	ldrhi	ip, [r0, #32]
   2cfb8:	85900018 	ldrhi	r0, [r0, #24]
   2cfbc:	8022129c 	mlahi	r2, ip, r2, r1
   2cfc0:	81a02082 	lslhi	r2, r2, #1
   2cfc4:	818030b2 	strhhi	r3, [r0, r2]
   2cfc8:	e12fff1e 	bx	lr

0002cfcc <FastScreen::GetPixel(unsigned int, unsigned int)>:
   2cfcc:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   2cfd0:	e1530001 	cmp	r3, r1
   2cfd4:	9a000008 	bls	2cffc <FastScreen::GetPixel(unsigned int, unsigned int)+0x30>
   2cfd8:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   2cfdc:	e1530002 	cmp	r3, r2
   2cfe0:	9a000005 	bls	2cffc <FastScreen::GetPixel(unsigned int, unsigned int)+0x30>
   2cfe4:	e590c020 	ldr	ip, [r0, #32]
   2cfe8:	e5903018 	ldr	r3, [r0, #24]
   2cfec:	e022129c 	mla	r2, ip, r2, r1
   2cff0:	e1a02082 	lsl	r2, r2, #1
   2cff4:	e19300b2 	ldrh	r0, [r3, r2]
   2cff8:	e12fff1e 	bx	lr
   2cffc:	e3a00000 	mov	r0, #0
   2d000:	e12fff1e 	bx	lr

0002d004 <FastScreen::Rotor(unsigned int, unsigned int)>:
   2d004:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2d008:	e1a05000 	mov	r5, r0
   2d00c:	e24dd00c 	sub	sp, sp, #12
   2d010:	e1a04001 	mov	r4, r1
   2d014:	e2800014 	add	r0, r0, #20
   2d018:	e1a06002 	mov	r6, r2
   2d01c:	e5957024 	ldr	r7, [r5, #36]	; 0x24
   2d020:	eb001680 	bl	32a28 <CCharGenerator::GetCharWidth() const>
   2d024:	e3a0cb3e 	mov	ip, #63488	; 0xf800
   2d028:	e2044003 	and	r4, r4, #3
   2d02c:	e0200094 	mla	r0, r4, r0, r0
   2d030:	e59f3024 	ldr	r3, [pc, #36]	; 2d05c <FastScreen::Rotor(unsigned int, unsigned int)+0x58>
   2d034:	e2066003 	and	r6, r6, #3
   2d038:	e0833006 	add	r3, r3, r6
   2d03c:	e1d312d0 	ldrsb	r1, [r3, #32]
   2d040:	e0472000 	sub	r2, r7, r0
   2d044:	e58dc000 	str	ip, [sp]
   2d048:	e1a00005 	mov	r0, r5
   2d04c:	e3a03000 	mov	r3, #0
   2d050:	ebffff78 	bl	2ce38 <FastScreen::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   2d054:	e28dd00c 	add	sp, sp, #12
   2d058:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2d05c:	0003b494 	.word	0x0003b494

0002d060 <FastScreen::EraseChars(unsigned int) [clone .part.4]>:
   2d060:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d064:	e1a05000 	mov	r5, r0
   2d068:	e2807014 	add	r7, r0, #20
   2d06c:	e1a00007 	mov	r0, r7
   2d070:	e1a06001 	mov	r6, r1
   2d074:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
   2d078:	eb00166a 	bl	32a28 <CCharGenerator::GetCharWidth() const>
   2d07c:	e0204096 	mla	r0, r6, r0, r4
   2d080:	e5956024 	ldr	r6, [r5, #36]	; 0x24
   2d084:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
   2d088:	e1500006 	cmp	r0, r6
   2d08c:	31a06000 	movcc	r6, r0
   2d090:	e1540006 	cmp	r4, r6
   2d094:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   2d098:	e1a01004 	mov	r1, r4
   2d09c:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   2d0a0:	e1a00005 	mov	r0, r5
   2d0a4:	ebffff98 	bl	2cf0c <FastScreen::EraseChar(unsigned int, unsigned int)>
   2d0a8:	e1a00007 	mov	r0, r7
   2d0ac:	eb00165d 	bl	32a28 <CCharGenerator::GetCharWidth() const>
   2d0b0:	e0844000 	add	r4, r4, r0
   2d0b4:	e1540006 	cmp	r4, r6
   2d0b8:	3afffff6 	bcc	2d098 <FastScreen::EraseChars(unsigned int) [clone .part.4]+0x38>
   2d0bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002d0c0 <FastScreen::InvertCursor() [clone .part.6]>:
   2d0c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d0c4:	e2806014 	add	r6, r0, #20
   2d0c8:	e1a05000 	mov	r5, r0
   2d0cc:	e1a00006 	mov	r0, r6
   2d0d0:	eb001658 	bl	32a38 <CCharGenerator::GetUnderline() const>
   2d0d4:	e3a08000 	mov	r8, #0
   2d0d8:	e1a07000 	mov	r7, r0
   2d0dc:	e1a00006 	mov	r0, r6
   2d0e0:	eb001652 	bl	32a30 <CCharGenerator::GetCharHeight() const>
   2d0e4:	e1500007 	cmp	r0, r7
   2d0e8:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   2d0ec:	e3a04000 	mov	r4, #0
   2d0f0:	ea000013 	b	2d144 <FastScreen::InvertCursor() [clone .part.6]+0x84>
   2d0f4:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   2d0f8:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   2d0fc:	e0843003 	add	r3, r4, r3
   2d100:	e1530002 	cmp	r3, r2
   2d104:	2a00000d 	bcs	2d140 <FastScreen::InvertCursor() [clone .part.6]+0x80>
   2d108:	e5952040 	ldr	r2, [r5, #64]	; 0x40
   2d10c:	e5951028 	ldr	r1, [r5, #40]	; 0x28
   2d110:	e0872002 	add	r2, r7, r2
   2d114:	e1520001 	cmp	r2, r1
   2d118:	2a000008 	bcs	2d140 <FastScreen::InvertCursor() [clone .part.6]+0x80>
   2d11c:	e5950020 	ldr	r0, [r5, #32]
   2d120:	e5951018 	ldr	r1, [r5, #24]
   2d124:	e0233290 	mla	r3, r0, r2, r3
   2d128:	e1a03083 	lsl	r3, r3, #1
   2d12c:	e19120b3 	ldrh	r2, [r1, r3]
   2d130:	e3520000 	cmp	r2, #0
   2d134:	01d524b6 	ldrheq	r2, [r5, #70]	; 0x46
   2d138:	118180b3 	strhne	r8, [r1, r3]
   2d13c:	018120b3 	strheq	r2, [r1, r3]
   2d140:	e2844001 	add	r4, r4, #1
   2d144:	e1a00006 	mov	r0, r6
   2d148:	eb001636 	bl	32a28 <CCharGenerator::GetCharWidth() const>
   2d14c:	e1500004 	cmp	r0, r4
   2d150:	8affffe7 	bhi	2d0f4 <FastScreen::InvertCursor() [clone .part.6]+0x34>
   2d154:	e2877001 	add	r7, r7, #1
   2d158:	eaffffdf 	b	2d0dc <FastScreen::InvertCursor() [clone .part.6]+0x1c>

0002d15c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   2d15c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d160:	e1a04000 	mov	r4, r0
   2d164:	e3a0b000 	mov	fp, #0
   2d168:	e1a06002 	mov	r6, r2
   2d16c:	e1a07001 	mov	r7, r1
   2d170:	e1a05003 	mov	r5, r3
   2d174:	e24dd00c 	sub	sp, sp, #12
   2d178:	e280a018 	add	sl, r0, #24
   2d17c:	ebffdb30 	bl	23e44 <CDevice::CDevice()>
   2d180:	e59f31d8 	ldr	r3, [pc, #472]	; 2d360 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x204>
   2d184:	e5c46008 	strb	r6, [r4, #8]
   2d188:	e5843000 	str	r3, [r4]
   2d18c:	e5847004 	str	r7, [r4, #4]
   2d190:	e2849040 	add	r9, r4, #64	; 0x40
   2d194:	e584500c 	str	r5, [r4, #12]
   2d198:	e1a0000a 	mov	r0, sl
   2d19c:	e584b010 	str	fp, [r4, #16]
   2d1a0:	e5c4b014 	strb	fp, [r4, #20]
   2d1a4:	ebffdcaa 	bl	24454 <CGPIOPin::CGPIOPin()>
   2d1a8:	e2848068 	add	r8, r4, #104	; 0x68
   2d1ac:	e1a00009 	mov	r0, r9
   2d1b0:	ebffdca7 	bl	24454 <CGPIOPin::CGPIOPin()>
   2d1b4:	e2847090 	add	r7, r4, #144	; 0x90
   2d1b8:	e1a00008 	mov	r0, r8
   2d1bc:	ebffdca4 	bl	24454 <CGPIOPin::CGPIOPin()>
   2d1c0:	e1a00007 	mov	r0, r7
   2d1c4:	ebffdca2 	bl	24454 <CGPIOPin::CGPIOPin()>
   2d1c8:	e156000b 	cmp	r6, fp
   2d1cc:	13a06002 	movne	r6, #2
   2d1d0:	03a06001 	moveq	r6, #1
   2d1d4:	e3a03001 	mov	r3, #1
   2d1d8:	e594000c 	ldr	r0, [r4, #12]
   2d1dc:	e2841901 	add	r1, r4, #16384	; 0x4000
   2d1e0:	e150000b 	cmp	r0, fp
   2d1e4:	e584b0bc 	str	fp, [r4, #188]	; 0xbc
   2d1e8:	e584b0b8 	str	fp, [r4, #184]	; 0xb8
   2d1ec:	e584b0c0 	str	fp, [r4, #192]	; 0xc0
   2d1f0:	e584b0c4 	str	fp, [r4, #196]	; 0xc4
   2d1f4:	e584b0d0 	str	fp, [r4, #208]	; 0xd0
   2d1f8:	e5c4b0c8 	strb	fp, [r4, #200]	; 0xc8
   2d1fc:	e5c4b0c9 	strb	fp, [r4, #201]	; 0xc9
   2d200:	e584b0cc 	str	fp, [r4, #204]	; 0xcc
   2d204:	e584b0d8 	str	fp, [r4, #216]	; 0xd8
   2d208:	e584b0d4 	str	fp, [r4, #212]	; 0xd4
   2d20c:	e5c4b0dc 	strb	fp, [r4, #220]	; 0xdc
   2d210:	e584b0f4 	str	fp, [r4, #244]	; 0xf4
   2d214:	e584b0e4 	str	fp, [r4, #228]	; 0xe4
   2d218:	e584b0e8 	str	fp, [r4, #232]	; 0xe8
   2d21c:	e584b0ec 	str	fp, [r4, #236]	; 0xec
   2d220:	e584b0f0 	str	fp, [r4, #240]	; 0xf0
   2d224:	e584b0e0 	str	fp, [r4, #224]	; 0xe0
   2d228:	e5816f28 	str	r6, [r1, #3880]	; 0xf28
   2d22c:	e581bf1c 	str	fp, [r1, #3868]	; 0xf1c
   2d230:	e5813f18 	str	r3, [r1, #3864]	; 0xf18
   2d234:	e5813f2c 	str	r3, [r1, #3884]	; 0xf2c
   2d238:	1a000029 	bne	2d2e4 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x188>
   2d23c:	e59f6120 	ldr	r6, [pc, #288]	; 2d364 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x208>
   2d240:	e1a02205 	lsl	r2, r5, #4
   2d244:	e1a0b002 	mov	fp, r2
   2d248:	e0862002 	add	r2, r6, r2
   2d24c:	e5922004 	ldr	r2, [r2, #4]
   2d250:	e3520035 	cmp	r2, #53	; 0x35
   2d254:	8a000022 	bhi	2d2e4 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x188>
   2d258:	e59f2108 	ldr	r2, [pc, #264]	; 2d368 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x20c>
   2d25c:	e5921020 	ldr	r1, [r2, #32]
   2d260:	e3510000 	cmp	r1, #0
   2d264:	1a000033 	bne	2d338 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1dc>
   2d268:	e7961105 	ldr	r1, [r6, r5, lsl #2]
   2d26c:	e5824020 	str	r4, [r2, #32]
   2d270:	e3510000 	cmp	r1, #0
   2d274:	e5841010 	str	r1, [r4, #16]
   2d278:	0a000033 	beq	2d34c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1f0>
   2d27c:	e3550000 	cmp	r5, #0
   2d280:	0a00001a 	beq	2d2f0 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x194>
   2d284:	e086600b 	add	r6, r6, fp
   2d288:	e5961004 	ldr	r1, [r6, #4]
   2d28c:	e1a00008 	mov	r0, r8
   2d290:	ebffdc9b 	bl	24504 <CGPIOPin::AssignPin(unsigned int)>
   2d294:	e5961008 	ldr	r1, [r6, #8]
   2d298:	e3a02001 	mov	r2, #1
   2d29c:	e2811004 	add	r1, r1, #4
   2d2a0:	e1a00008 	mov	r0, r8
   2d2a4:	e6ef1071 	uxtb	r1, r1
   2d2a8:	ebffdcb6 	bl	24588 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d2ac:	e596100c 	ldr	r1, [r6, #12]
   2d2b0:	e1a00007 	mov	r0, r7
   2d2b4:	ebffdc92 	bl	24504 <CGPIOPin::AssignPin(unsigned int)>
   2d2b8:	e5961010 	ldr	r1, [r6, #16]
   2d2bc:	e3a02001 	mov	r2, #1
   2d2c0:	e2811004 	add	r1, r1, #4
   2d2c4:	e6ef1071 	uxtb	r1, r1
   2d2c8:	e1a00007 	mov	r0, r7
   2d2cc:	ebffdcad 	bl	24588 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d2d0:	e1a00007 	mov	r0, r7
   2d2d4:	e3a01002 	mov	r1, #2
   2d2d8:	ebffdec1 	bl	24de4 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2d2dc:	e3a03001 	mov	r3, #1
   2d2e0:	e5c43014 	strb	r3, [r4, #20]
   2d2e4:	e1a00004 	mov	r0, r4
   2d2e8:	e28dd00c 	add	sp, sp, #12
   2d2ec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d2f0:	e1a0000a 	mov	r0, sl
   2d2f4:	e3a01020 	mov	r1, #32
   2d2f8:	e58d3004 	str	r3, [sp, #4]
   2d2fc:	ebffdc80 	bl	24504 <CGPIOPin::AssignPin(unsigned int)>
   2d300:	e59d3004 	ldr	r3, [sp, #4]
   2d304:	e1a01005 	mov	r1, r5
   2d308:	e1a02003 	mov	r2, r3
   2d30c:	e1a0000a 	mov	r0, sl
   2d310:	ebffdc9c 	bl	24588 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d314:	e1a00009 	mov	r0, r9
   2d318:	e3a01021 	mov	r1, #33	; 0x21
   2d31c:	ebffdc78 	bl	24504 <CGPIOPin::AssignPin(unsigned int)>
   2d320:	e59d3004 	ldr	r3, [sp, #4]
   2d324:	e1a01005 	mov	r1, r5
   2d328:	e1a02003 	mov	r2, r3
   2d32c:	e1a00009 	mov	r0, r9
   2d330:	ebffdc94 	bl	24588 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d334:	eaffffd2 	b	2d284 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x128>
   2d338:	e59f3020 	ldr	r3, [pc, #32]	; 2d360 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x204>
   2d33c:	e3a020bd 	mov	r2, #189	; 0xbd
   2d340:	e2831018 	add	r1, r3, #24
   2d344:	e2830034 	add	r0, r3, #52	; 0x34
   2d348:	ebffd8cc 	bl	23680 <assertion_failed>
   2d34c:	e59f300c 	ldr	r3, [pc, #12]	; 2d360 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x204>
   2d350:	e3a020c1 	mov	r2, #193	; 0xc1
   2d354:	e2831018 	add	r1, r3, #24
   2d358:	e283004c 	add	r0, r3, #76	; 0x4c
   2d35c:	ebffd8c7 	bl	23680 <assertion_failed>
   2d360:	0003b4d0 	.word	0x0003b4d0
   2d364:	0003e2b8 	.word	0x0003e2b8
   2d368:	0003e438 	.word	0x0003e438

0002d36c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>:
   2d36c:	e5d03014 	ldrb	r3, [r0, #20]
   2d370:	e59fc16c 	ldr	ip, [pc, #364]	; 2d4e4 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x178>
   2d374:	e3530000 	cmp	r3, #0
   2d378:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d37c:	e1a04000 	mov	r4, r0
   2d380:	e580c000 	str	ip, [r0]
   2d384:	0a00004a 	beq	2d4b4 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x148>
   2d388:	e3a00001 	mov	r0, #1
   2d38c:	e59f5154 	ldr	r5, [pc, #340]	; 2d4e8 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x17c>
   2d390:	e594100c 	ldr	r1, [r4, #12]
   2d394:	e595201c 	ldr	r2, [r5, #28]
   2d398:	e3a03000 	mov	r3, #0
   2d39c:	e1c22110 	bic	r2, r2, r0, lsl r1
   2d3a0:	e585201c 	str	r2, [r5, #28]
   2d3a4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d3a8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d3ac:	e5942010 	ldr	r2, [r4, #16]
   2d3b0:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d3b4:	e5942010 	ldr	r2, [r4, #16]
   2d3b8:	e5823030 	str	r3, [r2, #48]	; 0x30
   2d3bc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2d3c0:	e5943004 	ldr	r3, [r4, #4]
   2d3c4:	e3530000 	cmp	r3, #0
   2d3c8:	0a000004 	beq	2d3e0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x74>
   2d3cc:	e5953010 	ldr	r3, [r5, #16]
   2d3d0:	e2433001 	sub	r3, r3, #1
   2d3d4:	e3530000 	cmp	r3, #0
   2d3d8:	e5853010 	str	r3, [r5, #16]
   2d3dc:	0a000026 	beq	2d47c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x110>
   2d3e0:	e2846068 	add	r6, r4, #104	; 0x68
   2d3e4:	e1a00006 	mov	r0, r6
   2d3e8:	e3a02001 	mov	r2, #1
   2d3ec:	e3a01000 	mov	r1, #0
   2d3f0:	e2847090 	add	r7, r4, #144	; 0x90
   2d3f4:	ebffdc63 	bl	24588 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d3f8:	e1a00007 	mov	r0, r7
   2d3fc:	e3a02001 	mov	r2, #1
   2d400:	e3a01000 	mov	r1, #0
   2d404:	ebffdc5f 	bl	24588 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d408:	e59400b8 	ldr	r0, [r4, #184]	; 0xb8
   2d40c:	e3500000 	cmp	r0, #0
   2d410:	0a000002 	beq	2d420 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xb4>
   2d414:	e5d430c8 	ldrb	r3, [r4, #200]	; 0xc8
   2d418:	e3530000 	cmp	r3, #0
   2d41c:	1a00002a 	bne	2d4cc <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x160>
   2d420:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   2d424:	e3500000 	cmp	r0, #0
   2d428:	0a000002 	beq	2d438 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xcc>
   2d42c:	e5d430dc 	ldrb	r3, [r4, #220]	; 0xdc
   2d430:	e3530000 	cmp	r3, #0
   2d434:	1a00001c 	bne	2d4ac <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x140>
   2d438:	e3a02000 	mov	r2, #0
   2d43c:	e594300c 	ldr	r3, [r4, #12]
   2d440:	e1a00007 	mov	r0, r7
   2d444:	e0855103 	add	r5, r5, r3, lsl #2
   2d448:	e5c42014 	strb	r2, [r4, #20]
   2d44c:	e5852020 	str	r2, [r5, #32]
   2d450:	ebffdc24 	bl	244e8 <CGPIOPin::~CGPIOPin()>
   2d454:	e1a00006 	mov	r0, r6
   2d458:	ebffdc22 	bl	244e8 <CGPIOPin::~CGPIOPin()>
   2d45c:	e2840040 	add	r0, r4, #64	; 0x40
   2d460:	ebffdc20 	bl	244e8 <CGPIOPin::~CGPIOPin()>
   2d464:	e2840018 	add	r0, r4, #24
   2d468:	ebffdc1e 	bl	244e8 <CGPIOPin::~CGPIOPin()>
   2d46c:	e1a00004 	mov	r0, r4
   2d470:	ebffda65 	bl	23e0c <CDevice::~CDevice()>
   2d474:	e1a00004 	mov	r0, r4
   2d478:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d47c:	e5950014 	ldr	r0, [r5, #20]
   2d480:	e3500000 	cmp	r0, #0
   2d484:	0a000012 	beq	2d4d4 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x168>
   2d488:	e5d53018 	ldrb	r3, [r5, #24]
   2d48c:	e3530000 	cmp	r3, #0
   2d490:	1a00000b 	bne	2d4c4 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x158>
   2d494:	e3a01039 	mov	r1, #57	; 0x39
   2d498:	ebfff6fc 	bl	2b090 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2d49c:	e3a03000 	mov	r3, #0
   2d4a0:	e5853014 	str	r3, [r5, #20]
   2d4a4:	e5c53018 	strb	r3, [r5, #24]
   2d4a8:	eaffffcc 	b	2d3e0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x74>
   2d4ac:	ebfff298 	bl	29f14 <operator delete[](void*)>
   2d4b0:	eaffffe0 	b	2d438 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xcc>
   2d4b4:	e2800090 	add	r0, r0, #144	; 0x90
   2d4b8:	ebffdc0a 	bl	244e8 <CGPIOPin::~CGPIOPin()>
   2d4bc:	e2840068 	add	r0, r4, #104	; 0x68
   2d4c0:	eaffffe4 	b	2d458 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xec>
   2d4c4:	ebfff680 	bl	2aecc <CInterruptSystem::DisconnectFIQ()>
   2d4c8:	eafffff3 	b	2d49c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x130>
   2d4cc:	ebfff290 	bl	29f14 <operator delete[](void*)>
   2d4d0:	eaffffd2 	b	2d420 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xb4>
   2d4d4:	e3a020ed 	mov	r2, #237	; 0xed
   2d4d8:	e28c1018 	add	r1, ip, #24
   2d4dc:	e28c0060 	add	r0, ip, #96	; 0x60
   2d4e0:	ebffd866 	bl	23680 <assertion_failed>
   2d4e4:	0003b4d0 	.word	0x0003b4d0
   2d4e8:	0003e438 	.word	0x0003e438

0002d4ec <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>:
   2d4ec:	e92d4010 	push	{r4, lr}
   2d4f0:	e1a04000 	mov	r4, r0
   2d4f4:	ebffff9c 	bl	2d36c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>
   2d4f8:	e1a00004 	mov	r0, r4
   2d4fc:	e59f1008 	ldr	r1, [pc, #8]	; 2d50c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x20>
   2d500:	ebfff289 	bl	29f2c <operator delete(void*, unsigned int)>
   2d504:	e1a00004 	mov	r0, r4
   2d508:	e8bd8010 	pop	{r4, pc}
   2d50c:	00004f30 	.word	0x00004f30

0002d510 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)>:
   2d510:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d514:	e5d05014 	ldrb	r5, [r0, #20]
   2d518:	e24dd014 	sub	sp, sp, #20
   2d51c:	e3550000 	cmp	r5, #0
   2d520:	1a000002 	bne	2d530 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x20>
   2d524:	e1a00005 	mov	r0, r5
   2d528:	e28dd014 	add	sp, sp, #20
   2d52c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d530:	e1a08003 	mov	r8, r3
   2d534:	e1a07002 	mov	r7, r2
   2d538:	e3a03001 	mov	r3, #1
   2d53c:	e59f2280 	ldr	r2, [pc, #640]	; 2d7c4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b4>
   2d540:	e1a06001 	mov	r6, r1
   2d544:	e3a01002 	mov	r1, #2
   2d548:	e1a04000 	mov	r4, r0
   2d54c:	eb0000ac 	bl	2d804 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)>
   2d550:	ebffe437 	bl	26634 <CMachineInfo::Get()>
   2d554:	e3a01002 	mov	r1, #2
   2d558:	ebffe365 	bl	262f4 <CMachineInfo::GetClockRate(unsigned int) const>
   2d55c:	e250b000 	subs	fp, r0, #0
   2d560:	0a00007b 	beq	2d754 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x244>
   2d564:	e59f325c 	ldr	r3, [pc, #604]	; 2d7c8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b8>
   2d568:	e2462f4b 	sub	r2, r6, #300	; 0x12c
   2d56c:	e1520003 	cmp	r2, r3
   2d570:	8a00007b 	bhi	2d764 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x254>
   2d574:	e1a09206 	lsl	r9, r6, #4
   2d578:	e1a01009 	mov	r1, r9
   2d57c:	eb000c30 	bl	30644 <__aeabi_uidiv>
   2d580:	e59f3244 	ldr	r3, [pc, #580]	; 2d7cc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2bc>
   2d584:	e2402001 	sub	r2, r0, #1
   2d588:	e1520003 	cmp	r2, r3
   2d58c:	e1a0a000 	mov	sl, r0
   2d590:	8a000077 	bhi	2d774 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x264>
   2d594:	e1a01009 	mov	r1, r9
   2d598:	e1a0000b 	mov	r0, fp
   2d59c:	eb000c65 	bl	30738 <__aeabi_uidivmod>
   2d5a0:	e1a00181 	lsl	r0, r1, #3
   2d5a4:	e1a01006 	mov	r1, r6
   2d5a8:	eb000c25 	bl	30644 <__aeabi_uidiv>
   2d5ac:	e2009001 	and	r9, r0, #1
   2d5b0:	e08990a0 	add	r9, r9, r0, lsr #1
   2d5b4:	e359003f 	cmp	r9, #63	; 0x3f
   2d5b8:	8a000071 	bhi	2d784 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x274>
   2d5bc:	e59f620c 	ldr	r6, [pc, #524]	; 2d7d0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c0>
   2d5c0:	e28410f8 	add	r1, r4, #248	; 0xf8
   2d5c4:	e28420bc 	add	r2, r4, #188	; 0xbc
   2d5c8:	e98d0042 	stmib	sp, {r1, r6}
   2d5cc:	e1a03007 	mov	r3, r7
   2d5d0:	e58d2000 	str	r2, [sp]
   2d5d4:	e28410b8 	add	r1, r4, #184	; 0xb8
   2d5d8:	e28420c8 	add	r2, r4, #200	; 0xc8
   2d5dc:	e1a00004 	mov	r0, r4
   2d5e0:	eb000264 	bl	2df78 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>
   2d5e4:	e2842b0a 	add	r2, r4, #10240	; 0x2800
   2d5e8:	e2822008 	add	r2, r2, #8
   2d5ec:	e28410d0 	add	r1, r4, #208	; 0xd0
   2d5f0:	e88d0006 	stm	sp, {r1, r2}
   2d5f4:	e58d6008 	str	r6, [sp, #8]
   2d5f8:	e1a00004 	mov	r0, r4
   2d5fc:	e1a03008 	mov	r3, r8
   2d600:	e28420dc 	add	r2, r4, #220	; 0xdc
   2d604:	e28410cc 	add	r1, r4, #204	; 0xcc
   2d608:	eb00025a 	bl	2df78 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>
   2d60c:	e5940004 	ldr	r0, [r4, #4]
   2d610:	e59f61bc 	ldr	r6, [pc, #444]	; 2d7d4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c4>
   2d614:	e3500000 	cmp	r0, #0
   2d618:	0a000013 	beq	2d66c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x15c>
   2d61c:	e5963010 	ldr	r3, [r6, #16]
   2d620:	e3530000 	cmp	r3, #0
   2d624:	1a00003d 	bne	2d720 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x210>
   2d628:	e5d42008 	ldrb	r2, [r4, #8]
   2d62c:	e5860014 	str	r0, [r6, #20]
   2d630:	e3520000 	cmp	r2, #0
   2d634:	e5c62018 	strb	r2, [r6, #24]
   2d638:	1a000041 	bne	2d744 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x234>
   2d63c:	e1a03002 	mov	r3, r2
   2d640:	e3a01039 	mov	r1, #57	; 0x39
   2d644:	e59f218c 	ldr	r2, [pc, #396]	; 2d7d8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c8>
   2d648:	ebfff65c 	bl	2afc0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2d64c:	e5963008 	ldr	r3, [r6, #8]
   2d650:	e2833001 	add	r3, r3, #1
   2d654:	e5863008 	str	r3, [r6, #8]
   2d658:	e5963010 	ldr	r3, [r6, #16]
   2d65c:	e3530000 	cmp	r3, #0
   2d660:	1a00004f 	bne	2d7a4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x294>
   2d664:	e3a03001 	mov	r3, #1
   2d668:	e5863010 	str	r3, [r6, #16]
   2d66c:	e3a03000 	mov	r3, #0
   2d670:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d674:	e5942010 	ldr	r2, [r4, #16]
   2d678:	e59f015c 	ldr	r0, [pc, #348]	; 2d7dc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2cc>
   2d67c:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d680:	e5942010 	ldr	r2, [r4, #16]
   2d684:	e5941004 	ldr	r1, [r4, #4]
   2d688:	e5820044 	str	r0, [r2, #68]	; 0x44
   2d68c:	e5942010 	ldr	r2, [r4, #16]
   2d690:	e1510003 	cmp	r1, r3
   2d694:	e582a024 	str	sl, [r2, #36]	; 0x24
   2d698:	e5942010 	ldr	r2, [r4, #16]
   2d69c:	e5829028 	str	r9, [r2, #40]	; 0x28
   2d6a0:	0a000043 	beq	2d7b4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2a4>
   2d6a4:	e3a0e011 	mov	lr, #17
   2d6a8:	e3a0c070 	mov	ip, #112	; 0x70
   2d6ac:	e3a01e45 	mov	r1, #1104	; 0x450
   2d6b0:	e3a00001 	mov	r0, #1
   2d6b4:	e5942010 	ldr	r2, [r4, #16]
   2d6b8:	e582e034 	str	lr, [r2, #52]	; 0x34
   2d6bc:	e5942010 	ldr	r2, [r4, #16]
   2d6c0:	e582c02c 	str	ip, [r2, #44]	; 0x2c
   2d6c4:	e5942010 	ldr	r2, [r4, #16]
   2d6c8:	e5821038 	str	r1, [r2, #56]	; 0x38
   2d6cc:	e596201c 	ldr	r2, [r6, #28]
   2d6d0:	e594100c 	ldr	r1, [r4, #12]
   2d6d4:	e1822110 	orr	r2, r2, r0, lsl r1
   2d6d8:	e586201c 	str	r2, [r6, #28]
   2d6dc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d6e0:	e5942010 	ldr	r2, [r4, #16]
   2d6e4:	e59f10f4 	ldr	r1, [pc, #244]	; 2d7e0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d6e8:	e59f30f4 	ldr	r3, [pc, #244]	; 2d7e4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d4>
   2d6ec:	e5821030 	str	r1, [r2, #48]	; 0x30
   2d6f0:	e5933214 	ldr	r3, [r3, #532]	; 0x214
   2d6f4:	e3a07000 	mov	r7, #0
   2d6f8:	e586300c 	str	r3, [r6, #12]
   2d6fc:	ee077fba 	mcr	15, 0, r7, cr7, cr10, {5}
   2d700:	ebffdab8 	bl	241e8 <CDeviceNameService::Get()>
   2d704:	e1a03007 	mov	r3, r7
   2d708:	e1a02004 	mov	r2, r4
   2d70c:	e59f10d4 	ldr	r1, [pc, #212]	; 2d7e8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d8>
   2d710:	ebffd9fa 	bl	23f00 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   2d714:	e1a00005 	mov	r0, r5
   2d718:	e28dd014 	add	sp, sp, #20
   2d71c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d720:	e5963014 	ldr	r3, [r6, #20]
   2d724:	e1500003 	cmp	r0, r3
   2d728:	0a000019 	beq	2d794 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x284>
   2d72c:	e3a05000 	mov	r5, #0
   2d730:	e594300c 	ldr	r3, [r4, #12]
   2d734:	e5c45014 	strb	r5, [r4, #20]
   2d738:	e0866103 	add	r6, r6, r3, lsl #2
   2d73c:	e5865020 	str	r5, [r6, #32]
   2d740:	eaffff77 	b	2d524 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x14>
   2d744:	e59f208c 	ldr	r2, [pc, #140]	; 2d7d8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c8>
   2d748:	e3a01039 	mov	r1, #57	; 0x39
   2d74c:	ebfff5aa 	bl	2adfc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   2d750:	eaffffc0 	b	2d658 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x148>
   2d754:	e59f1090 	ldr	r1, [pc, #144]	; 2d7ec <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d758:	e59f2090 	ldr	r2, [pc, #144]	; 2d7f0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e0>
   2d75c:	e2810060 	add	r0, r1, #96	; 0x60
   2d760:	ebffd7c6 	bl	23680 <assertion_failed>
   2d764:	e59f1080 	ldr	r1, [pc, #128]	; 2d7ec <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d768:	e59f2084 	ldr	r2, [pc, #132]	; 2d7f4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e4>
   2d76c:	e2810070 	add	r0, r1, #112	; 0x70
   2d770:	ebffd7c2 	bl	23680 <assertion_failed>
   2d774:	e59f1070 	ldr	r1, [pc, #112]	; 2d7ec <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d778:	e59f2078 	ldr	r2, [pc, #120]	; 2d7f8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e8>
   2d77c:	e281009c 	add	r0, r1, #156	; 0x9c
   2d780:	ebffd7be 	bl	23680 <assertion_failed>
   2d784:	e59f1060 	ldr	r1, [pc, #96]	; 2d7ec <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d788:	e59f206c 	ldr	r2, [pc, #108]	; 2d7fc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2ec>
   2d78c:	e28100c0 	add	r0, r1, #192	; 0xc0
   2d790:	ebffd7ba 	bl	23680 <assertion_failed>
   2d794:	e5d42008 	ldrb	r2, [r4, #8]
   2d798:	e5d63018 	ldrb	r3, [r6, #24]
   2d79c:	e1520003 	cmp	r2, r3
   2d7a0:	1affffe1 	bne	2d72c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x21c>
   2d7a4:	e59f1040 	ldr	r1, [pc, #64]	; 2d7ec <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d7a8:	e59f2050 	ldr	r2, [pc, #80]	; 2d800 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2f0>
   2d7ac:	e28100d4 	add	r0, r1, #212	; 0xd4
   2d7b0:	ebffd7b2 	bl	23680 <assertion_failed>
   2d7b4:	e3a02060 	mov	r2, #96	; 0x60
   2d7b8:	e5943010 	ldr	r3, [r4, #16]
   2d7bc:	e583202c 	str	r2, [r3, #44]	; 0x2c
   2d7c0:	eaffffc6 	b	2d6e0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x1d0>
   2d7c4:	01e84800 	.word	0x01e84800
   2d7c8:	003d07d4 	.word	0x003d07d4
   2d7cc:	0000fffe 	.word	0x0000fffe
   2d7d0:	00002710 	.word	0x00002710
   2d7d4:	0003e438 	.word	0x0003e438
   2d7d8:	0002df28 	.word	0x0002df28
   2d7dc:	000007ff 	.word	0x000007ff
   2d7e0:	00000301 	.word	0x00000301
   2d7e4:	2000b000 	.word	0x2000b000
   2d7e8:	0003b5e4 	.word	0x0003b5e4
   2d7ec:	0003b4e8 	.word	0x0003b4e8
   2d7f0:	00000115 	.word	0x00000115
   2d7f4:	00000117 	.word	0x00000117
   2d7f8:	0000011a 	.word	0x0000011a
   2d7fc:	0000011d 	.word	0x0000011d
   2d800:	00000149 	.word	0x00000149

0002d804 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)>:
   2d804:	e92d4070 	push	{r4, r5, r6, lr}
   2d808:	e24dd028 	sub	sp, sp, #40	; 0x28
   2d80c:	e1a06001 	mov	r6, r1
   2d810:	e28d0008 	add	r0, sp, #8
   2d814:	e3a01000 	mov	r1, #0
   2d818:	e1a05002 	mov	r5, r2
   2d81c:	e1a04003 	mov	r4, r3
   2d820:	ebffd7b7 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2d824:	e3a0300c 	mov	r3, #12
   2d828:	e28d2010 	add	r2, sp, #16
   2d82c:	e58d3000 	str	r3, [sp]
   2d830:	e59f102c 	ldr	r1, [pc, #44]	; 2d864 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)+0x60>
   2d834:	e3a03018 	mov	r3, #24
   2d838:	e28d0008 	add	r0, sp, #8
   2d83c:	e58d4024 	str	r4, [sp, #36]	; 0x24
   2d840:	e58d601c 	str	r6, [sp, #28]
   2d844:	e58d5020 	str	r5, [sp, #32]
   2d848:	ebffd7b9 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2d84c:	e1a04000 	mov	r4, r0
   2d850:	e28d0008 	add	r0, sp, #8
   2d854:	ebffd7b1 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   2d858:	e1a00004 	mov	r0, r4
   2d85c:	e28dd028 	add	sp, sp, #40	; 0x28
   2d860:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d864:	00038002 	.word	0x00038002

0002d868 <CUartMaxiSerialDevice::Clear()>:
   2d868:	e3a03000 	mov	r3, #0
   2d86c:	e58030bc 	str	r3, [r0, #188]	; 0xbc
   2d870:	e58030f4 	str	r3, [r0, #244]	; 0xf4
   2d874:	e58030c0 	str	r3, [r0, #192]	; 0xc0
   2d878:	e58030e4 	str	r3, [r0, #228]	; 0xe4
   2d87c:	e58030e8 	str	r3, [r0, #232]	; 0xe8
   2d880:	e58030ec 	str	r3, [r0, #236]	; 0xec
   2d884:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   2d888:	e58030e0 	str	r3, [r0, #224]	; 0xe0
   2d88c:	e12fff1e 	bx	lr

0002d890 <CUartMaxiSerialDevice::AvailableForWrite()>:
   2d890:	e59030d4 	ldr	r3, [r0, #212]	; 0xd4
   2d894:	e59010d0 	ldr	r1, [r0, #208]	; 0xd0
   2d898:	e59020d8 	ldr	r2, [r0, #216]	; 0xd8
   2d89c:	e59000d0 	ldr	r0, [r0, #208]	; 0xd0
   2d8a0:	e1530001 	cmp	r3, r1
   2d8a4:	80800002 	addhi	r0, r0, r2
   2d8a8:	e0400003 	sub	r0, r0, r3
   2d8ac:	e0420000 	sub	r0, r2, r0
   2d8b0:	e12fff1e 	bx	lr

0002d8b4 <CUartMaxiSerialDevice::WriteBase(unsigned int)>:
   2d8b4:	e1a03000 	mov	r3, r0
   2d8b8:	e59000cc 	ldr	r0, [r0, #204]	; 0xcc
   2d8bc:	e3500000 	cmp	r0, #0
   2d8c0:	012fff1e 	bxeq	lr
   2d8c4:	e59320d8 	ldr	r2, [r3, #216]	; 0xd8
   2d8c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2d8cc:	e3520000 	cmp	r2, #0
   2d8d0:	0a00001d 	beq	2d94c <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x98>
   2d8d4:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d8d8:	e593c0d4 	ldr	ip, [r3, #212]	; 0xd4
   2d8dc:	e15e000c 	cmp	lr, ip
   2d8e0:	0a000008 	beq	2d908 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x54>
   2d8e4:	e593c0d4 	ldr	ip, [r3, #212]	; 0xd4
   2d8e8:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d8ec:	e15c000e 	cmp	ip, lr
   2d8f0:	2a000011 	bcs	2d93c <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x88>
   2d8f4:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d8f8:	e2422001 	sub	r2, r2, #1
   2d8fc:	e35c0000 	cmp	ip, #0
   2d900:	0152000e 	cmpeq	r2, lr
   2d904:	0a000010 	beq	2d94c <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x98>
   2d908:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d90c:	e7c01002 	strb	r1, [r0, r2]
   2d910:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d914:	e59310d8 	ldr	r1, [r3, #216]	; 0xd8
   2d918:	e2822001 	add	r2, r2, #1
   2d91c:	e58320d0 	str	r2, [r3, #208]	; 0xd0
   2d920:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d924:	e1520001 	cmp	r2, r1
   2d928:	23a02000 	movcs	r2, #0
   2d92c:	23a00001 	movcs	r0, #1
   2d930:	258320d0 	strcs	r2, [r3, #208]	; 0xd0
   2d934:	33a00001 	movcc	r0, #1
   2d938:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2d93c:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d940:	e04cc002 	sub	ip, ip, r2
   2d944:	e35c0001 	cmp	ip, #1
   2d948:	8affffee 	bhi	2d908 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x54>
   2d94c:	e59320f4 	ldr	r2, [r3, #244]	; 0xf4
   2d950:	e3a00000 	mov	r0, #0
   2d954:	e2822001 	add	r2, r2, #1
   2d958:	e58320f4 	str	r2, [r3, #244]	; 0xf4
   2d95c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002d960 <CUartMaxiSerialDevice::Write(unsigned int)>:
   2d960:	e92d4070 	push	{r4, r5, r6, lr}
   2d964:	e1a05000 	mov	r5, r0
   2d968:	ebffffd1 	bl	2d8b4 <CUartMaxiSerialDevice::WriteBase(unsigned int)>
   2d96c:	e1a04000 	mov	r4, r0
   2d970:	e1a00005 	mov	r0, r5
   2d974:	eb00001e 	bl	2d9f4 <CUartMaxiSerialDevice::TxPumpPrime()>
   2d978:	e1a00004 	mov	r0, r4
   2d97c:	e8bd8070 	pop	{r4, r5, r6, pc}

0002d980 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>:
   2d980:	e3520000 	cmp	r2, #0
   2d984:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d988:	e1a07000 	mov	r7, r0
   2d98c:	0a00000c 	beq	2d9c4 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x44>
   2d990:	e1a04001 	mov	r4, r1
   2d994:	e3a05000 	mov	r5, #0
   2d998:	e0816002 	add	r6, r1, r2
   2d99c:	e4d41001 	ldrb	r1, [r4], #1
   2d9a0:	e1a00007 	mov	r0, r7
   2d9a4:	ebffffc2 	bl	2d8b4 <CUartMaxiSerialDevice::WriteBase(unsigned int)>
   2d9a8:	e1540006 	cmp	r4, r6
   2d9ac:	e0855000 	add	r5, r5, r0
   2d9b0:	1afffff9 	bne	2d99c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x1c>
   2d9b4:	e1a00007 	mov	r0, r7
   2d9b8:	eb00000d 	bl	2d9f4 <CUartMaxiSerialDevice::TxPumpPrime()>
   2d9bc:	e1a00005 	mov	r0, r5
   2d9c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d9c4:	e1a05002 	mov	r5, r2
   2d9c8:	eafffff9 	b	2d9b4 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x34>

0002d9cc <CUartMaxiSerialDevice::WriteStr(char const*)>:
   2d9cc:	e92d4070 	push	{r4, r5, r6, lr}
   2d9d0:	e1a05000 	mov	r5, r0
   2d9d4:	e1a00001 	mov	r0, r1
   2d9d8:	e1a04001 	mov	r4, r1
   2d9dc:	ebffed46 	bl	28efc <strlen>
   2d9e0:	e1a01004 	mov	r1, r4
   2d9e4:	e1a02000 	mov	r2, r0
   2d9e8:	e1a00005 	mov	r0, r5
   2d9ec:	e8bd4070 	pop	{r4, r5, r6, lr}
   2d9f0:	eaffffe2 	b	2d980 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>

0002d9f4 <CUartMaxiSerialDevice::TxPumpPrime()>:
   2d9f4:	e92d4010 	push	{r4, lr}
   2d9f8:	e1a04000 	mov	r4, r0
   2d9fc:	e3a00001 	mov	r0, #1
   2da00:	ebfff46d 	bl	2abbc <EnterCritical>
   2da04:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
   2da08:	e59420d4 	ldr	r2, [r4, #212]	; 0xd4
   2da0c:	e1520003 	cmp	r2, r3
   2da10:	0a000020 	beq	2da98 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2da14:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   2da18:	e3530000 	cmp	r3, #0
   2da1c:	0a00001d 	beq	2da98 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2da20:	e3a03000 	mov	r3, #0
   2da24:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2da28:	e59f1088 	ldr	r1, [pc, #136]	; 2dab8 <CUartMaxiSerialDevice::TxPumpPrime()+0xc4>
   2da2c:	e5912018 	ldr	r2, [r1, #24]
   2da30:	e2122020 	ands	r2, r2, #32
   2da34:	0a000007 	beq	2da58 <CUartMaxiSerialDevice::TxPumpPrime()+0x64>
   2da38:	ea000018 	b	2daa0 <CUartMaxiSerialDevice::TxPumpPrime()+0xac>
   2da3c:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   2da40:	e3530000 	cmp	r3, #0
   2da44:	0a000013 	beq	2da98 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2da48:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2da4c:	e5913018 	ldr	r3, [r1, #24]
   2da50:	e3130020 	tst	r3, #32
   2da54:	1a000011 	bne	2daa0 <CUartMaxiSerialDevice::TxPumpPrime()+0xac>
   2da58:	e59400d4 	ldr	r0, [r4, #212]	; 0xd4
   2da5c:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   2da60:	e594c0cc 	ldr	ip, [r4, #204]	; 0xcc
   2da64:	e2833001 	add	r3, r3, #1
   2da68:	e7dc0000 	ldrb	r0, [ip, r0]
   2da6c:	e58430d4 	str	r3, [r4, #212]	; 0xd4
   2da70:	e594c0d4 	ldr	ip, [r4, #212]	; 0xd4
   2da74:	e59430d8 	ldr	r3, [r4, #216]	; 0xd8
   2da78:	e15c0003 	cmp	ip, r3
   2da7c:	258420d4 	strcs	r2, [r4, #212]	; 0xd4
   2da80:	e5810000 	str	r0, [r1]
   2da84:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   2da88:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   2da8c:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   2da90:	e1500003 	cmp	r0, r3
   2da94:	1affffe8 	bne	2da3c <CUartMaxiSerialDevice::TxPumpPrime()+0x48>
   2da98:	e8bd4010 	pop	{r4, lr}
   2da9c:	eafff471 	b	2ac68 <LeaveCritical>
   2daa0:	e59f2010 	ldr	r2, [pc, #16]	; 2dab8 <CUartMaxiSerialDevice::TxPumpPrime()+0xc4>
   2daa4:	e8bd4010 	pop	{r4, lr}
   2daa8:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   2daac:	e3833020 	orr	r3, r3, #32
   2dab0:	e5823038 	str	r3, [r2, #56]	; 0x38
   2dab4:	eafff46b 	b	2ac68 <LeaveCritical>
   2dab8:	20201000 	.word	0x20201000

0002dabc <CUartMaxiSerialDevice::Read()>:
   2dabc:	e59010b8 	ldr	r1, [r0, #184]	; 0xb8
   2dac0:	e1a03000 	mov	r3, r0
   2dac4:	e3510000 	cmp	r1, #0
   2dac8:	0a000010 	beq	2db10 <CUartMaxiSerialDevice::Read()+0x54>
   2dacc:	e59000bc 	ldr	r0, [r0, #188]	; 0xbc
   2dad0:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
   2dad4:	e1500002 	cmp	r0, r2
   2dad8:	0a00000c 	beq	2db10 <CUartMaxiSerialDevice::Read()+0x54>
   2dadc:	e59300c0 	ldr	r0, [r3, #192]	; 0xc0
   2dae0:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
   2dae4:	e7d10000 	ldrb	r0, [r1, r0]
   2dae8:	e2822001 	add	r2, r2, #1
   2daec:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   2daf0:	e59310c0 	ldr	r1, [r3, #192]	; 0xc0
   2daf4:	e59320c4 	ldr	r2, [r3, #196]	; 0xc4
   2daf8:	e1510002 	cmp	r1, r2
   2dafc:	3a000002 	bcc	2db0c <CUartMaxiSerialDevice::Read()+0x50>
   2db00:	e3a02000 	mov	r2, #0
   2db04:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   2db08:	e12fff1e 	bx	lr
   2db0c:	e12fff1e 	bx	lr
   2db10:	e3e00000 	mvn	r0, #0
   2db14:	e12fff1e 	bx	lr

0002db18 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)>:
   2db18:	e1a03000 	mov	r3, r0
   2db1c:	e59f0090 	ldr	r0, [pc, #144]	; 2dbb4 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x9c>
   2db20:	e92d4010 	push	{r4, lr}
   2db24:	e593e0b8 	ldr	lr, [r3, #184]	; 0xb8
   2db28:	e590c040 	ldr	ip, [r0, #64]	; 0x40
   2db2c:	e59f0084 	ldr	r0, [pc, #132]	; 2dbb8 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0xa0>
   2db30:	e35e0000 	cmp	lr, #0
   2db34:	e580c004 	str	ip, [r0, #4]
   2db38:	0a00001b 	beq	2dbac <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x94>
   2db3c:	e59300bc 	ldr	r0, [r3, #188]	; 0xbc
   2db40:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2db44:	e3520000 	cmp	r2, #0
   2db48:	1150000c 	cmpne	r0, ip
   2db4c:	13a00001 	movne	r0, #1
   2db50:	03a00000 	moveq	r0, #0
   2db54:	08bd8010 	popeq	{r4, pc}
   2db58:	e3a00000 	mov	r0, #0
   2db5c:	e1a04000 	mov	r4, r0
   2db60:	e2411001 	sub	r1, r1, #1
   2db64:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2db68:	e2800001 	add	r0, r0, #1
   2db6c:	e7dec00c 	ldrb	ip, [lr, ip]
   2db70:	e5e1c001 	strb	ip, [r1, #1]!
   2db74:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2db78:	e593e0c4 	ldr	lr, [r3, #196]	; 0xc4
   2db7c:	e28cc001 	add	ip, ip, #1
   2db80:	e583c0c0 	str	ip, [r3, #192]	; 0xc0
   2db84:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2db88:	e15c000e 	cmp	ip, lr
   2db8c:	258340c0 	strcs	r4, [r3, #192]	; 0xc0
   2db90:	e593e0bc 	ldr	lr, [r3, #188]	; 0xbc
   2db94:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2db98:	e15e000c 	cmp	lr, ip
   2db9c:	11520000 	cmpne	r2, r0
   2dba0:	98bd8010 	popls	{r4, pc}
   2dba4:	e593e0b8 	ldr	lr, [r3, #184]	; 0xb8
   2dba8:	eaffffed 	b	2db64 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x4c>
   2dbac:	e1a0000e 	mov	r0, lr
   2dbb0:	e8bd8010 	pop	{r4, pc}
   2dbb4:	20201000 	.word	0x20201000
   2dbb8:	0003e438 	.word	0x0003e438

0002dbbc <CUartMaxiSerialDevice::CanGet()>:
   2dbbc:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2dbc0:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
   2dbc4:	e0520000 	subs	r0, r2, r0
   2dbc8:	13a00001 	movne	r0, #1
   2dbcc:	e12fff1e 	bx	lr

0002dbd0 <CUartMaxiSerialDevice::Peek()>:
   2dbd0:	e59030b8 	ldr	r3, [r0, #184]	; 0xb8
   2dbd4:	e3530000 	cmp	r3, #0
   2dbd8:	0a000006 	beq	2dbf8 <CUartMaxiSerialDevice::Peek()+0x28>
   2dbdc:	e59010bc 	ldr	r1, [r0, #188]	; 0xbc
   2dbe0:	e59020c0 	ldr	r2, [r0, #192]	; 0xc0
   2dbe4:	e1510002 	cmp	r1, r2
   2dbe8:	0a000002 	beq	2dbf8 <CUartMaxiSerialDevice::Peek()+0x28>
   2dbec:	e59020c0 	ldr	r2, [r0, #192]	; 0xc0
   2dbf0:	e7d30002 	ldrb	r0, [r3, r2]
   2dbf4:	e12fff1e 	bx	lr
   2dbf8:	e3e00000 	mvn	r0, #0
   2dbfc:	e12fff1e 	bx	lr

0002dc00 <CUartMaxiSerialDevice::AvailableForRead()>:
   2dc00:	e59030c0 	ldr	r3, [r0, #192]	; 0xc0
   2dc04:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2dc08:	e1530002 	cmp	r3, r2
   2dc0c:	859020bc 	ldrhi	r2, [r0, #188]	; 0xbc
   2dc10:	859000c4 	ldrhi	r0, [r0, #196]	; 0xc4
   2dc14:	959000bc 	ldrls	r0, [r0, #188]	; 0xbc
   2dc18:	80820000 	addhi	r0, r2, r0
   2dc1c:	e0400003 	sub	r0, r0, r3
   2dc20:	e12fff1e 	bx	lr

0002dc24 <CUartMaxiSerialDevice::GetOptions() const>:
   2dc24:	e2800901 	add	r0, r0, #16384	; 0x4000
   2dc28:	e5900f18 	ldr	r0, [r0, #3864]	; 0xf18
   2dc2c:	e12fff1e 	bx	lr

0002dc30 <CUartMaxiSerialDevice::SetOptions(unsigned int)>:
   2dc30:	e2800901 	add	r0, r0, #16384	; 0x4000
   2dc34:	e5801f18 	str	r1, [r0, #3864]	; 0xf18
   2dc38:	e12fff1e 	bx	lr

0002dc3c <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   2dc3c:	e5903004 	ldr	r3, [r0, #4]
   2dc40:	e92d4010 	push	{r4, lr}
   2dc44:	e3530000 	cmp	r3, #0
   2dc48:	0a00000e 	beq	2dc88 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
   2dc4c:	e2800901 	add	r0, r0, #16384	; 0x4000
   2dc50:	e5903f1c 	ldr	r3, [r0, #3868]	; 0xf1c
   2dc54:	e3530000 	cmp	r3, #0
   2dc58:	1a00000e 	bne	2dc98 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x5c>
   2dc5c:	e3510000 	cmp	r1, #0
   2dc60:	0a000010 	beq	2dca8 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x6c>
   2dc64:	e1d130d0 	ldrsb	r3, [r1]
   2dc68:	e3530000 	cmp	r3, #0
   2dc6c:	0a000011 	beq	2dcb8 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x7c>
   2dc70:	e3520000 	cmp	r2, #0
   2dc74:	0a000013 	beq	2dcc8 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
   2dc78:	e5802f24 	str	r2, [r0, #3876]	; 0xf24
   2dc7c:	e5801f20 	str	r1, [r0, #3872]	; 0xf20
   2dc80:	e5801f1c 	str	r1, [r0, #3868]	; 0xf1c
   2dc84:	e8bd8010 	pop	{r4, pc}
   2dc88:	e59f1048 	ldr	r1, [pc, #72]	; 2dcd8 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2dc8c:	e59f2048 	ldr	r2, [pc, #72]	; 2dcdc <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa0>
   2dc90:	e2810f41 	add	r0, r1, #260	; 0x104
   2dc94:	ebffd679 	bl	23680 <assertion_failed>
   2dc98:	e59f1038 	ldr	r1, [pc, #56]	; 2dcd8 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2dc9c:	e59f203c 	ldr	r2, [pc, #60]	; 2dce0 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa4>
   2dca0:	e2810f47 	add	r0, r1, #284	; 0x11c
   2dca4:	ebffd675 	bl	23680 <assertion_failed>
   2dca8:	e59f1028 	ldr	r1, [pc, #40]	; 2dcd8 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2dcac:	e3a02f87 	mov	r2, #540	; 0x21c
   2dcb0:	e2810f4b 	add	r0, r1, #300	; 0x12c
   2dcb4:	ebffd671 	bl	23680 <assertion_failed>
   2dcb8:	e59f1018 	ldr	r1, [pc, #24]	; 2dcd8 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2dcbc:	e59f2020 	ldr	r2, [pc, #32]	; 2dce4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
   2dcc0:	e2810f4e 	add	r0, r1, #312	; 0x138
   2dcc4:	ebffd66d 	bl	23680 <assertion_failed>
   2dcc8:	e59f1008 	ldr	r1, [pc, #8]	; 2dcd8 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2dccc:	e59f2014 	ldr	r2, [pc, #20]	; 2dce8 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xac>
   2dcd0:	e2810f52 	add	r0, r1, #328	; 0x148
   2dcd4:	ebffd669 	bl	23680 <assertion_failed>
   2dcd8:	0003b4e8 	.word	0x0003b4e8
   2dcdc:	00000219 	.word	0x00000219
   2dce0:	0000021a 	.word	0x0000021a
   2dce4:	0000021d 	.word	0x0000021d
   2dce8:	0000021e 	.word	0x0000021e

0002dcec <CUartMaxiSerialDevice::InterruptHandler()>:
   2dcec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2dcf0:	e3a0e000 	mov	lr, #0
   2dcf4:	ee07ef9a 	mcr	15, 0, lr, cr7, cr10, {4}
   2dcf8:	e59f3224 	ldr	r3, [pc, #548]	; 2df24 <CUartMaxiSerialDevice::InterruptHandler()+0x238>
   2dcfc:	e1a0700e 	mov	r7, lr
   2dd00:	e1a01003 	mov	r1, r3
   2dd04:	e3a04003 	mov	r4, #3
   2dd08:	e3a08002 	mov	r8, #2
   2dd0c:	e3a06001 	mov	r6, #1
   2dd10:	e3a05004 	mov	r5, #4
   2dd14:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   2dd18:	e280c901 	add	ip, r0, #16384	; 0x4000
   2dd1c:	e5832044 	str	r2, [r3, #68]	; 0x44
   2dd20:	e5913018 	ldr	r3, [r1, #24]
   2dd24:	e3130010 	tst	r3, #16
   2dd28:	1a000036 	bne	2de08 <CUartMaxiSerialDevice::InterruptHandler()+0x11c>
   2dd2c:	e5913000 	ldr	r3, [r1]
   2dd30:	e3130b01 	tst	r3, #1024	; 0x400
   2dd34:	0a000060 	beq	2debc <CUartMaxiSerialDevice::InterruptHandler()+0x1d0>
   2dd38:	e59020ec 	ldr	r2, [r0, #236]	; 0xec
   2dd3c:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2dd40:	e2822001 	add	r2, r2, #1
   2dd44:	e3590000 	cmp	r9, #0
   2dd48:	e58020ec 	str	r2, [r0, #236]	; 0xec
   2dd4c:	05c060c9 	strbeq	r6, [r0, #201]	; 0xc9
   2dd50:	e59020c4 	ldr	r2, [r0, #196]	; 0xc4
   2dd54:	e3520000 	cmp	r2, #0
   2dd58:	0a000050 	beq	2dea0 <CUartMaxiSerialDevice::InterruptHandler()+0x1b4>
   2dd5c:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2dd60:	e59090c0 	ldr	r9, [r0, #192]	; 0xc0
   2dd64:	e15a0009 	cmp	sl, r9
   2dd68:	0a000008 	beq	2dd90 <CUartMaxiSerialDevice::InterruptHandler()+0xa4>
   2dd6c:	e59090c0 	ldr	r9, [r0, #192]	; 0xc0
   2dd70:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2dd74:	e159000a 	cmp	r9, sl
   2dd78:	2a000044 	bcs	2de90 <CUartMaxiSerialDevice::InterruptHandler()+0x1a4>
   2dd7c:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2dd80:	e2422001 	sub	r2, r2, #1
   2dd84:	e3590000 	cmp	r9, #0
   2dd88:	0152000a 	cmpeq	r2, sl
   2dd8c:	0a000043 	beq	2dea0 <CUartMaxiSerialDevice::InterruptHandler()+0x1b4>
   2dd90:	e59020b8 	ldr	r2, [r0, #184]	; 0xb8
   2dd94:	e3520000 	cmp	r2, #0
   2dd98:	0a000040 	beq	2dea0 <CUartMaxiSerialDevice::InterruptHandler()+0x1b4>
   2dd9c:	e59090bc 	ldr	r9, [r0, #188]	; 0xbc
   2dda0:	e7c23009 	strb	r3, [r2, r9]
   2dda4:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2dda8:	e59090c4 	ldr	r9, [r0, #196]	; 0xc4
   2ddac:	e2822001 	add	r2, r2, #1
   2ddb0:	e58020bc 	str	r2, [r0, #188]	; 0xbc
   2ddb4:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2ddb8:	e1520009 	cmp	r2, r9
   2ddbc:	e59c2f1c 	ldr	r2, [ip, #3868]	; 0xf1c
   2ddc0:	258070bc 	strcs	r7, [r0, #188]	; 0xbc
   2ddc4:	e3520000 	cmp	r2, #0
   2ddc8:	0affffd4 	beq	2dd20 <CUartMaxiSerialDevice::InterruptHandler()+0x34>
   2ddcc:	e59c9f20 	ldr	r9, [ip, #3872]	; 0xf20
   2ddd0:	e6af3073 	sxtb	r3, r3
   2ddd4:	e1d9a0d0 	ldrsb	sl, [r9]
   2ddd8:	e15a0003 	cmp	sl, r3
   2dddc:	158c2f20 	strne	r2, [ip, #3872]	; 0xf20
   2dde0:	0a000047 	beq	2df04 <CUartMaxiSerialDevice::InterruptHandler()+0x218>
   2dde4:	e59030e4 	ldr	r3, [r0, #228]	; 0xe4
   2dde8:	e5d020c9 	ldrb	r2, [r0, #201]	; 0xc9
   2ddec:	e2833001 	add	r3, r3, #1
   2ddf0:	e58030e4 	str	r3, [r0, #228]	; 0xe4
   2ddf4:	e5913018 	ldr	r3, [r1, #24]
   2ddf8:	e3520000 	cmp	r2, #0
   2ddfc:	05c040c9 	strbeq	r4, [r0, #201]	; 0xc9
   2de00:	e3130010 	tst	r3, #16
   2de04:	0affffc8 	beq	2dd2c <CUartMaxiSerialDevice::InterruptHandler()+0x40>
   2de08:	e59f1114 	ldr	r1, [pc, #276]	; 2df24 <CUartMaxiSerialDevice::InterruptHandler()+0x238>
   2de0c:	ea00000c 	b	2de44 <CUartMaxiSerialDevice::InterruptHandler()+0x158>
   2de10:	e59020cc 	ldr	r2, [r0, #204]	; 0xcc
   2de14:	e3520000 	cmp	r2, #0
   2de18:	0a000010 	beq	2de60 <CUartMaxiSerialDevice::InterruptHandler()+0x174>
   2de1c:	e590c0d4 	ldr	ip, [r0, #212]	; 0xd4
   2de20:	e7d2200c 	ldrb	r2, [r2, ip]
   2de24:	e5812000 	str	r2, [r1]
   2de28:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2de2c:	e590c0d8 	ldr	ip, [r0, #216]	; 0xd8
   2de30:	e2822001 	add	r2, r2, #1
   2de34:	e58020d4 	str	r2, [r0, #212]	; 0xd4
   2de38:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2de3c:	e152000c 	cmp	r2, ip
   2de40:	2a000035 	bcs	2df1c <CUartMaxiSerialDevice::InterruptHandler()+0x230>
   2de44:	e5913018 	ldr	r3, [r1, #24]
   2de48:	e2133020 	ands	r3, r3, #32
   2de4c:	1a000007 	bne	2de70 <CUartMaxiSerialDevice::InterruptHandler()+0x184>
   2de50:	e590c0d0 	ldr	ip, [r0, #208]	; 0xd0
   2de54:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2de58:	e15c0002 	cmp	ip, r2
   2de5c:	1affffeb 	bne	2de10 <CUartMaxiSerialDevice::InterruptHandler()+0x124>
   2de60:	e59f20bc 	ldr	r2, [pc, #188]	; 2df24 <CUartMaxiSerialDevice::InterruptHandler()+0x238>
   2de64:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   2de68:	e3c33020 	bic	r3, r3, #32
   2de6c:	e5823038 	str	r3, [r2, #56]	; 0x38
   2de70:	e35e0000 	cmp	lr, #0
   2de74:	0a000002 	beq	2de84 <CUartMaxiSerialDevice::InterruptHandler()+0x198>
   2de78:	e2800901 	add	r0, r0, #16384	; 0x4000
   2de7c:	e5903f24 	ldr	r3, [r0, #3876]	; 0xf24
   2de80:	e12fff33 	blx	r3
   2de84:	e3a03000 	mov	r3, #0
   2de88:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2de8c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2de90:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2de94:	e0499002 	sub	r9, r9, r2
   2de98:	e3590001 	cmp	r9, #1
   2de9c:	8affffbb 	bhi	2dd90 <CUartMaxiSerialDevice::InterruptHandler()+0xa4>
   2dea0:	e59030f0 	ldr	r3, [r0, #240]	; 0xf0
   2dea4:	e5d020c9 	ldrb	r2, [r0, #201]	; 0xc9
   2dea8:	e2833001 	add	r3, r3, #1
   2deac:	e3520000 	cmp	r2, #0
   2deb0:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   2deb4:	05c050c9 	strbeq	r5, [r0, #201]	; 0xc9
   2deb8:	eaffff98 	b	2dd20 <CUartMaxiSerialDevice::InterruptHandler()+0x34>
   2debc:	e3130b02 	tst	r3, #2048	; 0x800
   2dec0:	0a000006 	beq	2dee0 <CUartMaxiSerialDevice::InterruptHandler()+0x1f4>
   2dec4:	e59020e8 	ldr	r2, [r0, #232]	; 0xe8
   2dec8:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2decc:	e2822001 	add	r2, r2, #1
   2ded0:	e3590000 	cmp	r9, #0
   2ded4:	e58020e8 	str	r2, [r0, #232]	; 0xe8
   2ded8:	05c080c9 	strbeq	r8, [r0, #201]	; 0xc9
   2dedc:	eaffff9b 	b	2dd50 <CUartMaxiSerialDevice::InterruptHandler()+0x64>
   2dee0:	e3130c01 	tst	r3, #256	; 0x100
   2dee4:	0affff99 	beq	2dd50 <CUartMaxiSerialDevice::InterruptHandler()+0x64>
   2dee8:	e59020e4 	ldr	r2, [r0, #228]	; 0xe4
   2deec:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2def0:	e2822001 	add	r2, r2, #1
   2def4:	e3590000 	cmp	r9, #0
   2def8:	e58020e4 	str	r2, [r0, #228]	; 0xe4
   2defc:	05c040c9 	strbeq	r4, [r0, #201]	; 0xc9
   2df00:	eaffff92 	b	2dd50 <CUartMaxiSerialDevice::InterruptHandler()+0x64>
   2df04:	e2893001 	add	r3, r9, #1
   2df08:	e58c3f20 	str	r3, [ip, #3872]	; 0xf20
   2df0c:	e1d930d1 	ldrsb	r3, [r9, #1]
   2df10:	e3530000 	cmp	r3, #0
   2df14:	03a0e001 	moveq	lr, #1
   2df18:	eaffffb1 	b	2dde4 <CUartMaxiSerialDevice::InterruptHandler()+0xf8>
   2df1c:	e58030d4 	str	r3, [r0, #212]	; 0xd4
   2df20:	eaffffc7 	b	2de44 <CUartMaxiSerialDevice::InterruptHandler()+0x158>
   2df24:	20201000 	.word	0x20201000

0002df28 <CUartMaxiSerialDevice::InterruptStub(void*)>:
   2df28:	e59f3040 	ldr	r3, [pc, #64]	; 2df70 <CUartMaxiSerialDevice::InterruptStub(void*)+0x48>
   2df2c:	e3a01000 	mov	r1, #0
   2df30:	e5932000 	ldr	r2, [r3]
   2df34:	e2822001 	add	r2, r2, #1
   2df38:	e5832000 	str	r2, [r3]
   2df3c:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
   2df40:	e593201c 	ldr	r2, [r3, #28]
   2df44:	e3120001 	tst	r2, #1
   2df48:	012fff1e 	bxeq	lr
   2df4c:	e5930020 	ldr	r0, [r3, #32]
   2df50:	e1500001 	cmp	r0, r1
   2df54:	0a000000 	beq	2df5c <CUartMaxiSerialDevice::InterruptStub(void*)+0x34>
   2df58:	eaffff63 	b	2dcec <CUartMaxiSerialDevice::InterruptHandler()>
   2df5c:	e59f1010 	ldr	r1, [pc, #16]	; 2df74 <CUartMaxiSerialDevice::InterruptStub(void*)+0x4c>
   2df60:	e92d4010 	push	{r4, lr}
   2df64:	e3a02fa9 	mov	r2, #676	; 0x2a4
   2df68:	e2810f56 	add	r0, r1, #344	; 0x158
   2df6c:	ebffd5c3 	bl	23680 <assertion_failed>
   2df70:	0003e438 	.word	0x0003e438
   2df74:	0003b4e8 	.word	0x0003b4e8

0002df78 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>:
   2df78:	e5910000 	ldr	r0, [r1]
   2df7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2df80:	e3500000 	cmp	r0, #0
   2df84:	e1a06001 	mov	r6, r1
   2df88:	e1a07002 	mov	r7, r2
   2df8c:	e1a05003 	mov	r5, r3
   2df90:	e59d4018 	ldr	r4, [sp, #24]
   2df94:	0a00000c 	beq	2dfcc <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x54>
   2df98:	e5943008 	ldr	r3, [r4, #8]
   2df9c:	e1530005 	cmp	r3, r5
   2dfa0:	0a00001d 	beq	2e01c <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0xa4>
   2dfa4:	e5d23000 	ldrb	r3, [r2]
   2dfa8:	e3530000 	cmp	r3, #0
   2dfac:	0a000006 	beq	2dfcc <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x54>
   2dfb0:	ebffefd7 	bl	29f14 <operator delete[](void*)>
   2dfb4:	e3a03000 	mov	r3, #0
   2dfb8:	e5863000 	str	r3, [r6]
   2dfbc:	e5c73000 	strb	r3, [r7]
   2dfc0:	e5843000 	str	r3, [r4]
   2dfc4:	e5843008 	str	r3, [r4, #8]
   2dfc8:	e5843004 	str	r3, [r4, #4]
   2dfcc:	e3550000 	cmp	r5, #0
   2dfd0:	1a000007 	bne	2dff4 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x7c>
   2dfd4:	e59d301c 	ldr	r3, [sp, #28]
   2dfd8:	e5863000 	str	r3, [r6]
   2dfdc:	e59d3020 	ldr	r3, [sp, #32]
   2dfe0:	e5c75000 	strb	r5, [r7]
   2dfe4:	e5845000 	str	r5, [r4]
   2dfe8:	e5843008 	str	r3, [r4, #8]
   2dfec:	e5845004 	str	r5, [r4, #4]
   2dff0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2dff4:	e1a00005 	mov	r0, r5
   2dff8:	ebffefbe 	bl	29ef8 <operator new[](unsigned int)>
   2dffc:	e3a03000 	mov	r3, #0
   2e000:	e3a02001 	mov	r2, #1
   2e004:	e5860000 	str	r0, [r6]
   2e008:	e5c72000 	strb	r2, [r7]
   2e00c:	e5843000 	str	r3, [r4]
   2e010:	e5845008 	str	r5, [r4, #8]
   2e014:	e5843004 	str	r3, [r4, #4]
   2e018:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e01c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002e020 <micros>:
   2e020:	eaffe899 	b	2828c <CTimer::GetClockTicks()>

0002e024 <millis>:
   2e024:	e92d4010 	push	{r4, lr}
   2e028:	ebffe897 	bl	2828c <CTimer::GetClockTicks()>
   2e02c:	e59f3008 	ldr	r3, [pc, #8]	; 2e03c <millis+0x18>
   2e030:	e0803093 	umull	r3, r0, r3, r0
   2e034:	e1a00320 	lsr	r0, r0, #6
   2e038:	e8bd8010 	pop	{r4, pc}
   2e03c:	10624dd3 	.word	0x10624dd3

0002e040 <microsDelay>:
   2e040:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e044:	e1a06000 	mov	r6, r0
   2e048:	ebffe88f 	bl	2828c <CTimer::GetClockTicks()>
   2e04c:	e1a04000 	mov	r4, r0
   2e050:	e1e05000 	mvn	r5, r0
   2e054:	e0867000 	add	r7, r6, r0
   2e058:	ea000004 	b	2e070 <microsDelay+0x30>
   2e05c:	e1570000 	cmp	r7, r0
   2e060:	23a00000 	movcs	r0, #0
   2e064:	33a00001 	movcc	r0, #1
   2e068:	e3500000 	cmp	r0, #0
   2e06c:	1a000008 	bne	2e094 <microsDelay+0x54>
   2e070:	ebffe885 	bl	2828c <CTimer::GetClockTicks()>
   2e074:	e1540000 	cmp	r4, r0
   2e078:	e0853000 	add	r3, r5, r0
   2e07c:	9afffff6 	bls	2e05c <microsDelay+0x1c>
   2e080:	e1560003 	cmp	r6, r3
   2e084:	23a00000 	movcs	r0, #0
   2e088:	33a00001 	movcc	r0, #1
   2e08c:	e3500000 	cmp	r0, #0
   2e090:	0afffff6 	beq	2e070 <microsDelay+0x30>
   2e094:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002e098 <isTimeout>:
   2e098:	e1500001 	cmp	r0, r1
   2e09c:	2a000005 	bcs	2e0b8 <isTimeout+0x20>
   2e0a0:	e0400001 	sub	r0, r0, r1
   2e0a4:	e2400001 	sub	r0, r0, #1
   2e0a8:	e1520000 	cmp	r2, r0
   2e0ac:	23a00000 	movcs	r0, #0
   2e0b0:	33a00001 	movcc	r0, #1
   2e0b4:	e12fff1e 	bx	lr
   2e0b8:	e0812002 	add	r2, r1, r2
   2e0bc:	e1500002 	cmp	r0, r2
   2e0c0:	93a00000 	movls	r0, #0
   2e0c4:	83a00001 	movhi	r0, #1
   2e0c8:	e12fff1e 	bx	lr

0002e0cc <timeToTimeout>:
   2e0cc:	e1500001 	cmp	r0, r1
   2e0d0:	3a000004 	bcc	2e0e8 <timeToTimeout+0x1c>
   2e0d4:	e0811002 	add	r1, r1, r2
   2e0d8:	e1500001 	cmp	r0, r1
   2e0dc:	9a000008 	bls	2e104 <timeToTimeout+0x38>
   2e0e0:	e3a00000 	mov	r0, #0
   2e0e4:	e12fff1e 	bx	lr
   2e0e8:	e0411000 	sub	r1, r1, r0
   2e0ec:	e1e03001 	mvn	r3, r1
   2e0f0:	e1520003 	cmp	r2, r3
   2e0f4:	3afffff9 	bcc	2e0e0 <timeToTimeout+0x14>
   2e0f8:	e2820001 	add	r0, r2, #1
   2e0fc:	e0800001 	add	r0, r0, r1
   2e100:	e12fff1e 	bx	lr
   2e104:	e0410000 	sub	r0, r1, r0
   2e108:	e12fff1e 	bx	lr

0002e10c <strlcpy>:
   2e10c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e110:	e1a07000 	mov	r7, r0
   2e114:	e1a00001 	mov	r0, r1
   2e118:	e1a04002 	mov	r4, r2
   2e11c:	e1a06001 	mov	r6, r1
   2e120:	ebffeb75 	bl	28efc <strlen>
   2e124:	e2802001 	add	r2, r0, #1
   2e128:	e1520004 	cmp	r2, r4
   2e12c:	e1a05000 	mov	r5, r0
   2e130:	3a00000c 	bcc	2e168 <strlcpy+0x5c>
   2e134:	e3540000 	cmp	r4, #0
   2e138:	1a000001 	bne	2e144 <strlcpy+0x38>
   2e13c:	e1a00005 	mov	r0, r5
   2e140:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e144:	e2444001 	sub	r4, r4, #1
   2e148:	e1a01006 	mov	r1, r6
   2e14c:	e1a02004 	mov	r2, r4
   2e150:	e1a00007 	mov	r0, r7
   2e154:	ebffed8d 	bl	29790 <memcpy>
   2e158:	e3a03000 	mov	r3, #0
   2e15c:	e1a00005 	mov	r0, r5
   2e160:	e7c73004 	strb	r3, [r7, r4]
   2e164:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e168:	e1a01006 	mov	r1, r6
   2e16c:	e1a00007 	mov	r0, r7
   2e170:	ebffed86 	bl	29790 <memcpy>
   2e174:	e1a00005 	mov	r0, r5
   2e178:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002e17c <strlcat>:
   2e17c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e180:	e1a05002 	mov	r5, r2
   2e184:	e1a08000 	mov	r8, r0
   2e188:	e1a00001 	mov	r0, r1
   2e18c:	e1a06001 	mov	r6, r1
   2e190:	ebffeb59 	bl	28efc <strlen>
   2e194:	e3550000 	cmp	r5, #0
   2e198:	e1a07000 	mov	r7, r0
   2e19c:	0a000021 	beq	2e228 <strlcat+0xac>
   2e1a0:	e1d800d0 	ldrsb	r0, [r8]
   2e1a4:	e3500000 	cmp	r0, #0
   2e1a8:	11a03008 	movne	r3, r8
   2e1ac:	13a04000 	movne	r4, #0
   2e1b0:	1a000003 	bne	2e1c4 <strlcat+0x48>
   2e1b4:	ea000007 	b	2e1d8 <strlcat+0x5c>
   2e1b8:	e1f3c0d1 	ldrsb	ip, [r3, #1]!
   2e1bc:	e35c0000 	cmp	ip, #0
   2e1c0:	0a000005 	beq	2e1dc <strlcat+0x60>
   2e1c4:	e2844001 	add	r4, r4, #1
   2e1c8:	e1550004 	cmp	r5, r4
   2e1cc:	1afffff9 	bne	2e1b8 <strlcat+0x3c>
   2e1d0:	e0870004 	add	r0, r7, r4
   2e1d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e1d8:	e1a04000 	mov	r4, r0
   2e1dc:	e0453004 	sub	r3, r5, r4
   2e1e0:	e1570003 	cmp	r7, r3
   2e1e4:	2a000005 	bcs	2e200 <strlcat+0x84>
   2e1e8:	e1a01006 	mov	r1, r6
   2e1ec:	e0880004 	add	r0, r8, r4
   2e1f0:	e2872001 	add	r2, r7, #1
   2e1f4:	ebffed65 	bl	29790 <memcpy>
   2e1f8:	e0870004 	add	r0, r7, r4
   2e1fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e200:	e2455001 	sub	r5, r5, #1
   2e204:	e1a02005 	mov	r2, r5
   2e208:	e1a01006 	mov	r1, r6
   2e20c:	e0880004 	add	r0, r8, r4
   2e210:	ebffed5e 	bl	29790 <memcpy>
   2e214:	e3a03000 	mov	r3, #0
   2e218:	e0885005 	add	r5, r8, r5
   2e21c:	e7c53004 	strb	r3, [r5, r4]
   2e220:	e0870004 	add	r0, r7, r4
   2e224:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e228:	e1a04005 	mov	r4, r5
   2e22c:	eaffffe7 	b	2e1d0 <strlcat+0x54>

0002e230 <strnlen>:
   2e230:	e3510000 	cmp	r1, #0
   2e234:	0a00000c 	beq	2e26c <strnlen+0x3c>
   2e238:	e1d030d0 	ldrsb	r3, [r0]
   2e23c:	e3530000 	cmp	r3, #0
   2e240:	0a00000b 	beq	2e274 <strnlen+0x44>
   2e244:	e1a03000 	mov	r3, r0
   2e248:	e3a00000 	mov	r0, #0
   2e24c:	ea000002 	b	2e25c <strnlen+0x2c>
   2e250:	e1f320d1 	ldrsb	r2, [r3, #1]!
   2e254:	e3520000 	cmp	r2, #0
   2e258:	012fff1e 	bxeq	lr
   2e25c:	e2800001 	add	r0, r0, #1
   2e260:	e1510000 	cmp	r1, r0
   2e264:	1afffff9 	bne	2e250 <strnlen+0x20>
   2e268:	e12fff1e 	bx	lr
   2e26c:	e1a00001 	mov	r0, r1
   2e270:	e12fff1e 	bx	lr
   2e274:	e1a00003 	mov	r0, r3
   2e278:	e12fff1e 	bx	lr

0002e27c <sprintf>:
   2e27c:	e92d000e 	push	{r1, r2, r3}
   2e280:	e92d4010 	push	{r4, lr}
   2e284:	e24dd01c 	sub	sp, sp, #28
   2e288:	e28d3028 	add	r3, sp, #40	; 0x28
   2e28c:	e1a04000 	mov	r4, r0
   2e290:	e28d0008 	add	r0, sp, #8
   2e294:	e58d3004 	str	r3, [sp, #4]
   2e298:	ebffe1d1 	bl	269e4 <CString::CString()>
   2e29c:	e59d2004 	ldr	r2, [sp, #4]
   2e2a0:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   2e2a4:	e28d0008 	add	r0, sp, #8
   2e2a8:	ebffe3e8 	bl	27250 <CString::FormatV(char const*, std::__va_list)>
   2e2ac:	e28d0008 	add	r0, sp, #8
   2e2b0:	ebffe1e1 	bl	26a3c <CString::operator char const*() const>
   2e2b4:	e1a01000 	mov	r1, r0
   2e2b8:	e1a00004 	mov	r0, r4
   2e2bc:	ebffebcc 	bl	291f4 <strcpy>
   2e2c0:	e28d0008 	add	r0, sp, #8
   2e2c4:	ebffe20a 	bl	26af4 <CString::GetLength() const>
   2e2c8:	e1a04000 	mov	r4, r0
   2e2cc:	e28d0008 	add	r0, sp, #8
   2e2d0:	ebffe190 	bl	26918 <CString::~CString()>
   2e2d4:	e1a00004 	mov	r0, r4
   2e2d8:	e28dd01c 	add	sp, sp, #28
   2e2dc:	e8bd4010 	pop	{r4, lr}
   2e2e0:	e28dd00c 	add	sp, sp, #12
   2e2e4:	e12fff1e 	bx	lr

0002e2e8 <snprintf>:
   2e2e8:	e92d000c 	push	{r2, r3}
   2e2ec:	e92d4030 	push	{r4, r5, lr}
   2e2f0:	e24dd01c 	sub	sp, sp, #28
   2e2f4:	e28d302c 	add	r3, sp, #44	; 0x2c
   2e2f8:	e1a05000 	mov	r5, r0
   2e2fc:	e28d0008 	add	r0, sp, #8
   2e300:	e58d3004 	str	r3, [sp, #4]
   2e304:	e1a04001 	mov	r4, r1
   2e308:	ebffe1b5 	bl	269e4 <CString::CString()>
   2e30c:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   2e310:	e59d2004 	ldr	r2, [sp, #4]
   2e314:	e28d0008 	add	r0, sp, #8
   2e318:	ebffe3cc 	bl	27250 <CString::FormatV(char const*, std::__va_list)>
   2e31c:	e28d0008 	add	r0, sp, #8
   2e320:	ebffe1f3 	bl	26af4 <CString::GetLength() const>
   2e324:	e2444001 	sub	r4, r4, #1
   2e328:	e1540000 	cmp	r4, r0
   2e32c:	21a04000 	movcs	r4, r0
   2e330:	e28d0008 	add	r0, sp, #8
   2e334:	ebffe1c0 	bl	26a3c <CString::operator char const*() const>
   2e338:	e1a02004 	mov	r2, r4
   2e33c:	e1a01000 	mov	r1, r0
   2e340:	e1a00005 	mov	r0, r5
   2e344:	ebffed11 	bl	29790 <memcpy>
   2e348:	e3a03000 	mov	r3, #0
   2e34c:	e28d0008 	add	r0, sp, #8
   2e350:	e7c53004 	strb	r3, [r5, r4]
   2e354:	ebffe16f 	bl	26918 <CString::~CString()>
   2e358:	e1a00004 	mov	r0, r4
   2e35c:	e28dd01c 	add	sp, sp, #28
   2e360:	e8bd4030 	pop	{r4, r5, lr}
   2e364:	e28dd008 	add	sp, sp, #8
   2e368:	e12fff1e 	bx	lr

0002e36c <vsnprintf>:
   2e36c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2e370:	e1a07003 	mov	r7, r3
   2e374:	e1a06002 	mov	r6, r2
   2e378:	e24dd014 	sub	sp, sp, #20
   2e37c:	e1a05000 	mov	r5, r0
   2e380:	e1a0000d 	mov	r0, sp
   2e384:	e1a04001 	mov	r4, r1
   2e388:	ebffe195 	bl	269e4 <CString::CString()>
   2e38c:	e1a02007 	mov	r2, r7
   2e390:	e1a01006 	mov	r1, r6
   2e394:	e1a0000d 	mov	r0, sp
   2e398:	ebffe3ac 	bl	27250 <CString::FormatV(char const*, std::__va_list)>
   2e39c:	e1a0000d 	mov	r0, sp
   2e3a0:	ebffe1d3 	bl	26af4 <CString::GetLength() const>
   2e3a4:	e2444001 	sub	r4, r4, #1
   2e3a8:	e1540000 	cmp	r4, r0
   2e3ac:	21a04000 	movcs	r4, r0
   2e3b0:	e1a0000d 	mov	r0, sp
   2e3b4:	ebffe1a0 	bl	26a3c <CString::operator char const*() const>
   2e3b8:	e1a02004 	mov	r2, r4
   2e3bc:	e1a01000 	mov	r1, r0
   2e3c0:	e1a00005 	mov	r0, r5
   2e3c4:	ebffecf1 	bl	29790 <memcpy>
   2e3c8:	e3a03000 	mov	r3, #0
   2e3cc:	e1a0000d 	mov	r0, sp
   2e3d0:	e7c53004 	strb	r3, [r5, r4]
   2e3d4:	ebffe14f 	bl	26918 <CString::~CString()>
   2e3d8:	e1a00004 	mov	r0, r4
   2e3dc:	e28dd014 	add	sp, sp, #20
   2e3e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002e3e4 <CommsManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   2e3e4:	e3a00000 	mov	r0, #0
   2e3e8:	e12fff1e 	bx	lr

0002e3ec <CommsManager::serialPutStr(unsigned char const*, unsigned int)>:
   2e3ec:	e59f301c 	ldr	r3, [pc, #28]	; 2e410 <CommsManager::serialPutStr(unsigned char const*, unsigned int)+0x24>
   2e3f0:	e5933000 	ldr	r3, [r3]
   2e3f4:	e59338fc 	ldr	r3, [r3, #2300]	; 0x8fc
   2e3f8:	e3530000 	cmp	r3, #0
   2e3fc:	012fff1e 	bxeq	lr
   2e400:	e1a02001 	mov	r2, r1
   2e404:	e1a01000 	mov	r1, r0
   2e408:	e1a00003 	mov	r0, r3
   2e40c:	eafffd5b 	b	2d980 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>
   2e410:	0003e45c 	.word	0x0003e45c

0002e414 <CommsManager::serialTxAvailable()>:
   2e414:	e59f3010 	ldr	r3, [pc, #16]	; 2e42c <CommsManager::serialTxAvailable()+0x18>
   2e418:	e5933000 	ldr	r3, [r3]
   2e41c:	e59308fc 	ldr	r0, [r3, #2300]	; 0x8fc
   2e420:	e3500000 	cmp	r0, #0
   2e424:	012fff1e 	bxeq	lr
   2e428:	eafffd18 	b	2d890 <CUartMaxiSerialDevice::AvailableForWrite()>
   2e42c:	0003e45c 	.word	0x0003e45c

0002e430 <CommsManager::performUpdate(unsigned char const*, unsigned int)>:
   2e430:	e92d4030 	push	{r4, r5, lr}
   2e434:	e1a05001 	mov	r5, r1
   2e438:	e1a04000 	mov	r4, r0
   2e43c:	e24dd014 	sub	sp, sp, #20
   2e440:	ebffdd81 	bl	25a4c <CLogger::Get()>
   2e444:	e0843005 	add	r3, r4, r5
   2e448:	e5532001 	ldrb	r2, [r3, #-1]
   2e44c:	e5d43000 	ldrb	r3, [r4]
   2e450:	e59f102c 	ldr	r1, [pc, #44]	; 2e484 <CommsManager::performUpdate(unsigned char const*, unsigned int)+0x54>
   2e454:	e58d2008 	str	r2, [sp, #8]
   2e458:	e58d3004 	str	r3, [sp, #4]
   2e45c:	e3a02004 	mov	r2, #4
   2e460:	e59f3020 	ldr	r3, [pc, #32]	; 2e488 <CommsManager::performUpdate(unsigned char const*, unsigned int)+0x58>
   2e464:	e58d5000 	str	r5, [sp]
   2e468:	ebffdcb4 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2e46c:	e1a00004 	mov	r0, r4
   2e470:	e1a01005 	mov	r1, r5
   2e474:	ebffed9c 	bl	29aec <EnableChainBoot>
   2e478:	e3a00001 	mov	r0, #1
   2e47c:	e28dd014 	add	sp, sp, #20
   2e480:	e8bd8030 	pop	{r4, r5, pc}
   2e484:	0003b688 	.word	0x0003b688
   2e488:	0003b650 	.word	0x0003b650

0002e48c <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)>:
   2e48c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e490:	e1a04000 	mov	r4, r0
   2e494:	e1a08001 	mov	r8, r1
   2e498:	e1a07002 	mov	r7, r2
   2e49c:	e59f6034 	ldr	r6, [pc, #52]	; 2e4d8 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x4c>
   2e4a0:	eb00006d 	bl	2e65c <CommandHandler::CommandHandler()>
   2e4a4:	e59f5030 	ldr	r5, [pc, #48]	; 2e4dc <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x50>
   2e4a8:	e59fe030 	ldr	lr, [pc, #48]	; 2e4e0 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x54>
   2e4ac:	e59f3030 	ldr	r3, [pc, #48]	; 2e4e4 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x58>
   2e4b0:	e59fc030 	ldr	ip, [pc, #48]	; 2e4e8 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x5c>
   2e4b4:	e58488fc 	str	r8, [r4, #2300]	; 0x8fc
   2e4b8:	e5847900 	str	r7, [r4, #2304]	; 0x900
   2e4bc:	e59f0028 	ldr	r0, [pc, #40]	; 2e4ec <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x60>
   2e4c0:	e5864000 	str	r4, [r6]
   2e4c4:	e58e5000 	str	r5, [lr]
   2e4c8:	e583c000 	str	ip, [r3]
   2e4cc:	eb000082 	bl	2e6dc <CommandHandler::commsSocketAdd(CommsSocketInfo&)>
   2e4d0:	e1a00004 	mov	r0, r4
   2e4d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e4d8:	0003e45c 	.word	0x0003e45c
   2e4dc:	0002e3ec 	.word	0x0002e3ec
   2e4e0:	0003e468 	.word	0x0003e468
   2e4e4:	0003e510 	.word	0x0003e510
   2e4e8:	0002e414 	.word	0x0002e414
   2e4ec:	0003e2cc 	.word	0x0003e2cc

0002e4f0 <CommsManager::~CommsManager()>:
   2e4f0:	e92d4010 	push	{r4, lr}
   2e4f4:	e1a04000 	mov	r4, r0
   2e4f8:	eb000493 	bl	2f74c <CommandHandler::~CommandHandler()>
   2e4fc:	e1a00004 	mov	r0, r4
   2e500:	e8bd8010 	pop	{r4, pc}

0002e504 <CommsManager::setup()>:
   2e504:	e3a00001 	mov	r0, #1
   2e508:	e12fff1e 	bx	lr

0002e50c <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)>:
   2e50c:	e92d4010 	push	{r4, lr}
   2e510:	e1a04001 	mov	r4, r1
   2e514:	e24dd008 	sub	sp, sp, #8
   2e518:	ebffdd4b 	bl	25a4c <CLogger::Get()>
   2e51c:	e59fe04c 	ldr	lr, [pc, #76]	; 2e570 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x64>
   2e520:	e5d41000 	ldrb	r1, [r4]
   2e524:	e59e3004 	ldr	r3, [lr, #4]
   2e528:	e5d42001 	ldrb	r2, [r4, #1]
   2e52c:	e59f4040 	ldr	r4, [pc, #64]	; 2e574 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x68>
   2e530:	e283c001 	add	ip, r3, #1
   2e534:	e0822401 	add	r2, r2, r1, lsl #8
   2e538:	e58d2004 	str	r2, [sp, #4]
   2e53c:	e58d3000 	str	r3, [sp]
   2e540:	e1a01004 	mov	r1, r4
   2e544:	e59f302c 	ldr	r3, [pc, #44]	; 2e578 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x6c>
   2e548:	e3a02003 	mov	r2, #3
   2e54c:	e58ec004 	str	ip, [lr, #4]
   2e550:	ebffdc7a 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2e554:	ebffdd3c 	bl	25a4c <CLogger::Get()>
   2e558:	e1a01004 	mov	r1, r4
   2e55c:	e3a02003 	mov	r2, #3
   2e560:	e59f3014 	ldr	r3, [pc, #20]	; 2e57c <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x70>
   2e564:	e28dd008 	add	sp, sp, #8
   2e568:	e8bd4010 	pop	{r4, lr}
   2e56c:	eaffdc73 	b	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2e570:	0003e45c 	.word	0x0003e45c
   2e574:	0003b688 	.word	0x0003b688
   2e578:	0003b698 	.word	0x0003b698
   2e57c:	0003b6ac 	.word	0x0003b6ac

0002e580 <CommsManager::hdlcFrameRxCBStatic(unsigned char const*, unsigned int)>:
   2e580:	e59f300c 	ldr	r3, [pc, #12]	; 2e594 <CommsManager::hdlcFrameRxCBStatic(unsigned char const*, unsigned int)+0x14>
   2e584:	e1a02001 	mov	r2, r1
   2e588:	e1a01000 	mov	r1, r0
   2e58c:	e5930000 	ldr	r0, [r3]
   2e590:	eaffffdd 	b	2e50c <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)>
   2e594:	0003e45c 	.word	0x0003e45c

0002e598 <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)>:
   2e598:	e59f301c 	ldr	r3, [pc, #28]	; 2e5bc <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)+0x24>
   2e59c:	e5933000 	ldr	r3, [r3]
   2e5a0:	e59338fc 	ldr	r3, [r3, #2300]	; 0x8fc
   2e5a4:	e3530000 	cmp	r3, #0
   2e5a8:	012fff1e 	bxeq	lr
   2e5ac:	e1a02001 	mov	r2, r1
   2e5b0:	e1a01000 	mov	r1, r0
   2e5b4:	e1a00003 	mov	r0, r3
   2e5b8:	eafffcf0 	b	2d980 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>
   2e5bc:	0003e45c 	.word	0x0003e45c

0002e5c0 <CommsManager::hdlcFrameTxCB(unsigned char const*, unsigned int)>:
   2e5c0:	e59008fc 	ldr	r0, [r0, #2300]	; 0x8fc
   2e5c4:	e3500000 	cmp	r0, #0
   2e5c8:	012fff1e 	bxeq	lr
   2e5cc:	eafffceb 	b	2d980 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>

0002e5d0 <CommsManager::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
   2e5d0:	e1a00001 	mov	r0, r1
   2e5d4:	e1a01002 	mov	r1, r2
   2e5d8:	e1a02003 	mov	r2, r3
   2e5dc:	e89d1008 	ldm	sp, {r3, ip}
   2e5e0:	e58dc000 	str	ip, [sp]
   2e5e4:	ea000182 	b	2ebf4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>

0002e5e8 <CommsManager::serviceGetFromSerial()>:
   2e5e8:	e59008fc 	ldr	r0, [r0, #2300]	; 0x8fc
   2e5ec:	e3500000 	cmp	r0, #0
   2e5f0:	012fff1e 	bxeq	lr
   2e5f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2e5f8:	e24ddffb 	sub	sp, sp, #1004	; 0x3ec
   2e5fc:	e1a0100d 	mov	r1, sp
   2e600:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   2e604:	ebfffd43 	bl	2db18 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)>
   2e608:	e2501000 	subs	r1, r0, #0
   2e60c:	da000001 	ble	2e618 <CommsManager::serviceGetFromSerial()+0x30>
   2e610:	e1a0000d 	mov	r0, sp
   2e614:	eb000045 	bl	2e730 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)>
   2e618:	e28ddffb 	add	sp, sp, #1004	; 0x3ec
   2e61c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002e620 <CommsManager::service()>:
   2e620:	e92d4010 	push	{r4, lr}
   2e624:	e1a04000 	mov	r4, r0
   2e628:	eb000404 	bl	2f640 <CommandHandler::service()>
   2e62c:	e1a00004 	mov	r0, r4
   2e630:	e8bd4010 	pop	{r4, lr}
   2e634:	eaffffeb 	b	2e5e8 <CommsManager::serviceGetFromSerial()>

0002e638 <CommandHandler::hdlcFrameTxStatic(unsigned char const*, unsigned int)>:
   2e638:	e59f3018 	ldr	r3, [pc, #24]	; 2e658 <CommandHandler::hdlcFrameTxStatic(unsigned char const*, unsigned int)+0x20>
   2e63c:	e5932000 	ldr	r2, [r3]
   2e640:	e3520000 	cmp	r2, #0
   2e644:	012fff1e 	bxeq	lr
   2e648:	e5933004 	ldr	r3, [r3, #4]
   2e64c:	e3530000 	cmp	r3, #0
   2e650:	012fff1e 	bxeq	lr
   2e654:	e12fff13 	bx	r3
   2e658:	0003e464 	.word	0x0003e464

0002e65c <CommandHandler::CommandHandler()>:
   2e65c:	e92d4030 	push	{r4, r5, lr}
   2e660:	e3a02001 	mov	r2, #1
   2e664:	e3a05000 	mov	r5, #0
   2e668:	e1a04000 	mov	r4, r0
   2e66c:	e59f3058 	ldr	r3, [pc, #88]	; 2e6cc <CommandHandler::CommandHandler()+0x70>
   2e670:	e24dd014 	sub	sp, sp, #20
   2e674:	e98d0024 	stmib	sp, {r2, r5}
   2e678:	e58d3000 	str	r3, [sp]
   2e67c:	e59f204c 	ldr	r2, [pc, #76]	; 2e6d0 <CommandHandler::CommandHandler()+0x74>
   2e680:	e59f104c 	ldr	r1, [pc, #76]	; 2e6d4 <CommandHandler::CommandHandler()+0x78>
   2e684:	eb00046e 	bl	2f844 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned long, unsigned long, bool, bool)>
   2e688:	e3a02032 	mov	r2, #50	; 0x32
   2e68c:	e1a00004 	mov	r0, r4
   2e690:	e59f3040 	ldr	r3, [pc, #64]	; 2e6d8 <CommandHandler::CommandHandler()+0x7c>
   2e694:	e58458b8 	str	r5, [r4, #2232]	; 0x8b8
   2e698:	e5c45048 	strb	r5, [r4, #72]	; 0x48
   2e69c:	e58458bc 	str	r5, [r4, #2236]	; 0x8bc
   2e6a0:	e5c450ad 	strb	r5, [r4, #173]	; 0xad
   2e6a4:	e5c450d6 	strb	r5, [r4, #214]	; 0xd6
   2e6a8:	e58458a8 	str	r5, [r4, #2216]	; 0x8a8
   2e6ac:	e58458ac 	str	r5, [r4, #2220]	; 0x8ac
   2e6b0:	e58458b0 	str	r5, [r4, #2224]	; 0x8b0
   2e6b4:	e58458b4 	str	r5, [r4, #2228]	; 0x8b4
   2e6b8:	e58458f8 	str	r5, [r4, #2296]	; 0x8f8
   2e6bc:	e58428c0 	str	r2, [r4, #2240]	; 0x8c0
   2e6c0:	e5834000 	str	r4, [r3]
   2e6c4:	e28dd014 	add	sp, sp, #20
   2e6c8:	e8bd8030 	pop	{r4, r5, pc}
   2e6cc:	00002710 	.word	0x00002710
   2e6d0:	0002f398 	.word	0x0002f398
   2e6d4:	0002e638 	.word	0x0002e638
   2e6d8:	0003e464 	.word	0x0003e464

0002e6dc <CommandHandler::commsSocketAdd(CommsSocketInfo&)>:
   2e6dc:	e92d4030 	push	{r4, r5, lr}
   2e6e0:	e59f4028 	ldr	r4, [pc, #40]	; 2e710 <CommandHandler::commsSocketAdd(CommsSocketInfo&)+0x34>
   2e6e4:	e594c008 	ldr	ip, [r4, #8]
   2e6e8:	e35c0009 	cmp	ip, #9
   2e6ec:	9084e20c 	addls	lr, r4, ip, lsl #4
   2e6f0:	928ee00c 	addls	lr, lr, #12
   2e6f4:	928c5001 	addls	r5, ip, #1
   2e6f8:	9890000f 	ldmls	r0, {r0, r1, r2, r3}
   2e6fc:	95845008 	strls	r5, [r4, #8]
   2e700:	988e000f 	stmls	lr, {r0, r1, r2, r3}
   2e704:	91a0000c 	movls	r0, ip
   2e708:	83e00000 	mvnhi	r0, #0
   2e70c:	e8bd8030 	pop	{r4, r5, pc}
   2e710:	0003e464 	.word	0x0003e464

0002e714 <CommandHandler::commsSocketEnable(unsigned int, bool)>:
   2e714:	e59f3010 	ldr	r3, [pc, #16]	; 2e72c <CommandHandler::commsSocketEnable(unsigned int, bool)+0x18>
   2e718:	e5932008 	ldr	r2, [r3, #8]
   2e71c:	e1520000 	cmp	r2, r0
   2e720:	80833200 	addhi	r3, r3, r0, lsl #4
   2e724:	85c3100c 	strbhi	r1, [r3, #12]
   2e728:	e12fff1e 	bx	lr
   2e72c:	0003e464 	.word	0x0003e464

0002e730 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)>:
   2e730:	e59f3018 	ldr	r3, [pc, #24]	; 2e750 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)+0x20>
   2e734:	e5933000 	ldr	r3, [r3]
   2e738:	e3530000 	cmp	r3, #0
   2e73c:	012fff1e 	bxeq	lr
   2e740:	e1a02001 	mov	r2, r1
   2e744:	e1a01000 	mov	r1, r0
   2e748:	e1a00003 	mov	r0, r3
   2e74c:	ea00052a 	b	2fbfc <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)>
   2e750:	0003e464 	.word	0x0003e464

0002e754 <CommandHandler::hdlcTxAvailableStatic()>:
   2e754:	e59f3018 	ldr	r3, [pc, #24]	; 2e774 <CommandHandler::hdlcTxAvailableStatic()+0x20>
   2e758:	e5930000 	ldr	r0, [r3]
   2e75c:	e3500000 	cmp	r0, #0
   2e760:	012fff1e 	bxeq	lr
   2e764:	e59300ac 	ldr	r0, [r3, #172]	; 0xac
   2e768:	e3500000 	cmp	r0, #0
   2e76c:	012fff1e 	bxeq	lr
   2e770:	e12fff10 	bx	r0
   2e774:	0003e464 	.word	0x0003e464

0002e778 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>:
   2e778:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e77c:	e59f70e8 	ldr	r7, [pc, #232]	; 2e86c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xf4>
   2e780:	e1a09001 	mov	r9, r1
   2e784:	e5971008 	ldr	r1, [r7, #8]
   2e788:	e24dd00c 	sub	sp, sp, #12
   2e78c:	e3510000 	cmp	r1, #0
   2e790:	e1a0a002 	mov	sl, r2
   2e794:	e1a0b003 	mov	fp, r3
   2e798:	0a000027 	beq	2e83c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xc4>
   2e79c:	e59f80cc 	ldr	r8, [pc, #204]	; 2e870 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xf8>
   2e7a0:	e3a04000 	mov	r4, #0
   2e7a4:	e1a05008 	mov	r5, r8
   2e7a8:	ea000010 	b	2e7f0 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x78>
   2e7ac:	e5956004 	ldr	r6, [r5, #4]
   2e7b0:	e3560000 	cmp	r6, #0
   2e7b4:	0a000017 	beq	2e818 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xa0>
   2e7b8:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   2e7bc:	e1a0200b 	mov	r2, fp
   2e7c0:	e58d3000 	str	r3, [sp]
   2e7c4:	e1a0100a 	mov	r1, sl
   2e7c8:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   2e7cc:	e1a00009 	mov	r0, r9
   2e7d0:	e12fff36 	blx	r6
   2e7d4:	e3500000 	cmp	r0, #0
   2e7d8:	1a000021 	bne	2e864 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xec>
   2e7dc:	e5973008 	ldr	r3, [r7, #8]
   2e7e0:	e2844001 	add	r4, r4, #1
   2e7e4:	e1530004 	cmp	r3, r4
   2e7e8:	e2855010 	add	r5, r5, #16
   2e7ec:	9a00001c 	bls	2e864 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xec>
   2e7f0:	e7d83204 	ldrb	r3, [r8, r4, lsl #4]
   2e7f4:	e3530000 	cmp	r3, #0
   2e7f8:	1affffeb 	bne	2e7ac <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x34>
   2e7fc:	ebffdc92 	bl	25a4c <CLogger::Get()>
   2e800:	e58d4000 	str	r4, [sp]
   2e804:	e59f3068 	ldr	r3, [pc, #104]	; 2e874 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xfc>
   2e808:	e3a02004 	mov	r2, #4
   2e80c:	e59f1064 	ldr	r1, [pc, #100]	; 2e878 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x100>
   2e810:	ebffdbca 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2e814:	eafffff0 	b	2e7dc <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x64>
   2e818:	e3540000 	cmp	r4, #0
   2e81c:	0affffee 	beq	2e7dc <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x64>
   2e820:	ebffdc89 	bl	25a4c <CLogger::Get()>
   2e824:	e58d4000 	str	r4, [sp]
   2e828:	e59f304c 	ldr	r3, [pc, #76]	; 2e87c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x104>
   2e82c:	e3a02004 	mov	r2, #4
   2e830:	e59f1040 	ldr	r1, [pc, #64]	; 2e878 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x100>
   2e834:	ebffdbc1 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2e838:	eaffffe7 	b	2e7dc <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x64>
   2e83c:	ebffdc82 	bl	25a4c <CLogger::Get()>
   2e840:	e5972008 	ldr	r2, [r7, #8]
   2e844:	e59f3034 	ldr	r3, [pc, #52]	; 2e880 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x108>
   2e848:	e58d2000 	str	r2, [sp]
   2e84c:	e59f1024 	ldr	r1, [pc, #36]	; 2e878 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x100>
   2e850:	e3a02004 	mov	r2, #4
   2e854:	ebffdbb9 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2e858:	e5973008 	ldr	r3, [r7, #8]
   2e85c:	e3530000 	cmp	r3, #0
   2e860:	1affffcd 	bne	2e79c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x24>
   2e864:	e28dd00c 	add	sp, sp, #12
   2e868:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e86c:	0003e464 	.word	0x0003e464
   2e870:	0003e470 	.word	0x0003e470
   2e874:	0003b6fc 	.word	0x0003b6fc
   2e878:	0003b6b4 	.word	0x0003b6b4
   2e87c:	0003b714 	.word	0x0003b714
   2e880:	0003b6c4 	.word	0x0003b6c4

0002e884 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>:
   2e884:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e888:	e59f6098 	ldr	r6, [pc, #152]	; 2e928 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0xa4>
   2e88c:	e5dd7020 	ldrb	r7, [sp, #32]
   2e890:	e5960008 	ldr	r0, [r6, #8]
   2e894:	e3500000 	cmp	r0, #0
   2e898:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e89c:	e1a09003 	mov	r9, r3
   2e8a0:	e1a08002 	mov	r8, r2
   2e8a4:	e1a0a001 	mov	sl, r1
   2e8a8:	e3a05000 	mov	r5, #0
   2e8ac:	e286400c 	add	r4, r6, #12
   2e8b0:	ea00000c 	b	2e8e8 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x64>
   2e8b4:	e5943008 	ldr	r3, [r4, #8]
   2e8b8:	e3530000 	cmp	r3, #0
   2e8bc:	0a000004 	beq	2e8d4 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x50>
   2e8c0:	e1a01009 	mov	r1, r9
   2e8c4:	e1a00008 	mov	r0, r8
   2e8c8:	e12fff33 	blx	r3
   2e8cc:	e3500000 	cmp	r0, #0
   2e8d0:	1a000012 	bne	2e920 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x9c>
   2e8d4:	e5963008 	ldr	r3, [r6, #8]
   2e8d8:	e2855001 	add	r5, r5, #1
   2e8dc:	e1530005 	cmp	r3, r5
   2e8e0:	e2844010 	add	r4, r4, #16
   2e8e4:	9a00000e 	bls	2e924 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0xa0>
   2e8e8:	e5d40000 	ldrb	r0, [r4]
   2e8ec:	e3500000 	cmp	r0, #0
   2e8f0:	0afffff7 	beq	2e8d4 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x50>
   2e8f4:	e3570000 	cmp	r7, #0
   2e8f8:	1affffed 	bne	2e8b4 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x30>
   2e8fc:	e594300c 	ldr	r3, [r4, #12]
   2e900:	e3530000 	cmp	r3, #0
   2e904:	0afffff2 	beq	2e8d4 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x50>
   2e908:	e1a02009 	mov	r2, r9
   2e90c:	e1a01008 	mov	r1, r8
   2e910:	e1a0000a 	mov	r0, sl
   2e914:	e12fff33 	blx	r3
   2e918:	e3500000 	cmp	r0, #0
   2e91c:	0affffec 	beq	2e8d4 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x50>
   2e920:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e924:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e928:	0003e464 	.word	0x0003e464

0002e92c <CommandHandler::handleFileStart(char const*)>:
   2e92c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2e930:	e2805048 	add	r5, r0, #72	; 0x48
   2e934:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   2e938:	e1a04000 	mov	r4, r0
   2e93c:	e1a02005 	mov	r2, r5
   2e940:	e3a03064 	mov	r3, #100	; 0x64
   2e944:	e59f00d0 	ldr	r0, [pc, #208]	; 2ea1c <CommandHandler::handleFileStart(char const*)+0xf0>
   2e948:	e1a06001 	mov	r6, r1
   2e94c:	eb0013a9 	bl	337f8 <jsonGetValueForKey>
   2e950:	e3500000 	cmp	r0, #0
   2e954:	1a000001 	bne	2e960 <CommandHandler::handleFileStart(char const*)+0x34>
   2e958:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2e95c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2e960:	e3a03028 	mov	r3, #40	; 0x28
   2e964:	e28420ad 	add	r2, r4, #173	; 0xad
   2e968:	e1a01006 	mov	r1, r6
   2e96c:	e59f00ac 	ldr	r0, [pc, #172]	; 2ea20 <CommandHandler::handleFileStart(char const*)+0xf4>
   2e970:	eb0013a0 	bl	337f8 <jsonGetValueForKey>
   2e974:	e3500000 	cmp	r0, #0
   2e978:	0afffff6 	beq	2e958 <CommandHandler::handleFileStart(char const*)+0x2c>
   2e97c:	e28d2010 	add	r2, sp, #16
   2e980:	e3a03014 	mov	r3, #20
   2e984:	e1a01006 	mov	r1, r6
   2e988:	e59f0094 	ldr	r0, [pc, #148]	; 2ea24 <CommandHandler::handleFileStart(char const*)+0xf8>
   2e98c:	eb001399 	bl	337f8 <jsonGetValueForKey>
   2e990:	e3500000 	cmp	r0, #0
   2e994:	0affffef 	beq	2e958 <CommandHandler::handleFileStart(char const*)+0x2c>
   2e998:	e3a0200a 	mov	r2, #10
   2e99c:	e3a01000 	mov	r1, #0
   2e9a0:	e28d0010 	add	r0, sp, #16
   2e9a4:	ebffeaa1 	bl	29430 <strtoul>
   2e9a8:	e1a01006 	mov	r1, r6
   2e9ac:	e1a07000 	mov	r7, r0
   2e9b0:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   2e9b4:	e28400d6 	add	r0, r4, #214	; 0xd6
   2e9b8:	ebfffdd3 	bl	2e10c <strlcpy>
   2e9bc:	e59408a8 	ldr	r0, [r4, #2216]	; 0x8a8
   2e9c0:	e3500000 	cmp	r0, #0
   2e9c4:	0a000000 	beq	2e9cc <CommandHandler::handleFileStart(char const*)+0xa0>
   2e9c8:	ebffed51 	bl	29f14 <operator delete[](void*)>
   2e9cc:	e1a00007 	mov	r0, r7
   2e9d0:	ebffed48 	bl	29ef8 <operator new[](unsigned int)>
   2e9d4:	e3a03000 	mov	r3, #0
   2e9d8:	e58408a8 	str	r0, [r4, #2216]	; 0x8a8
   2e9dc:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   2e9e0:	e58438b4 	str	r3, [r4, #2228]	; 0x8b4
   2e9e4:	e58478ac 	str	r7, [r4, #2220]	; 0x8ac
   2e9e8:	ebffdc17 	bl	25a4c <CLogger::Get()>
   2e9ec:	e59428ac 	ldr	r2, [r4, #2220]	; 0x8ac
   2e9f0:	e59438a8 	ldr	r3, [r4, #2216]	; 0x8a8
   2e9f4:	e59f102c 	ldr	r1, [pc, #44]	; 2ea28 <CommandHandler::handleFileStart(char const*)+0xfc>
   2e9f8:	e58d2008 	str	r2, [sp, #8]
   2e9fc:	e58d3004 	str	r3, [sp, #4]
   2ea00:	e3a02004 	mov	r2, #4
   2ea04:	e59f3020 	ldr	r3, [pc, #32]	; 2ea2c <CommandHandler::handleFileStart(char const*)+0x100>
   2ea08:	e58d5000 	str	r5, [sp]
   2ea0c:	ebffdb4b 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2ea10:	ebfffd83 	bl	2e024 <millis>
   2ea14:	e58408f8 	str	r0, [r4, #2296]	; 0x8f8
   2ea18:	eaffffce 	b	2e958 <CommandHandler::handleFileStart(char const*)+0x2c>
   2ea1c:	0003b728 	.word	0x0003b728
   2ea20:	0003b734 	.word	0x0003b734
   2ea24:	0003b740 	.word	0x0003b740
   2ea28:	0003b6b4 	.word	0x0003b6b4
   2ea2c:	0003b748 	.word	0x0003b748

0002ea30 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)>:
   2ea30:	e590c8a8 	ldr	ip, [r0, #2216]	; 0x8a8
   2ea34:	e35c0000 	cmp	ip, #0
   2ea38:	012fff1e 	bxeq	lr
   2ea3c:	e92d4070 	push	{r4, r5, r6, lr}
   2ea40:	e24dd018 	sub	sp, sp, #24
   2ea44:	e1a06003 	mov	r6, r3
   2ea48:	e1a05002 	mov	r5, r2
   2ea4c:	e1a04000 	mov	r4, r0
   2ea50:	e1a0200d 	mov	r2, sp
   2ea54:	e3a03014 	mov	r3, #20
   2ea58:	e59f0068 	ldr	r0, [pc, #104]	; 2eac8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x98>
   2ea5c:	eb001365 	bl	337f8 <jsonGetValueForKey>
   2ea60:	e3500000 	cmp	r0, #0
   2ea64:	1a000001 	bne	2ea70 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x40>
   2ea68:	e28dd018 	add	sp, sp, #24
   2ea6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ea70:	e3a0200a 	mov	r2, #10
   2ea74:	e1a0000d 	mov	r0, sp
   2ea78:	e3a01000 	mov	r1, #0
   2ea7c:	ebffea6b 	bl	29430 <strtoul>
   2ea80:	e59438ac 	ldr	r3, [r4, #2220]	; 0x8ac
   2ea84:	e0802006 	add	r2, r0, r6
   2ea88:	e1520003 	cmp	r2, r3
   2ea8c:	8afffff5 	bhi	2ea68 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x38>
   2ea90:	e59438a8 	ldr	r3, [r4, #2216]	; 0x8a8
   2ea94:	e1a01005 	mov	r1, r5
   2ea98:	e0830000 	add	r0, r3, r0
   2ea9c:	e1a02006 	mov	r2, r6
   2eaa0:	ebffeb3a 	bl	29790 <memcpy>
   2eaa4:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   2eaa8:	e59428b4 	ldr	r2, [r4, #2228]	; 0x8b4
   2eaac:	e0833006 	add	r3, r3, r6
   2eab0:	e2822001 	add	r2, r2, #1
   2eab4:	e58438b0 	str	r3, [r4, #2224]	; 0x8b0
   2eab8:	e58428b4 	str	r2, [r4, #2228]	; 0x8b4
   2eabc:	ebfffd58 	bl	2e024 <millis>
   2eac0:	e58408f8 	str	r0, [r4, #2296]	; 0x8f8
   2eac4:	eaffffe7 	b	2ea68 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x38>
   2eac8:	0003b770 	.word	0x0003b770

0002eacc <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)>:
   2eacc:	e59038ac 	ldr	r3, [r0, #2220]	; 0x8ac
   2ead0:	e3530000 	cmp	r3, #0
   2ead4:	0a000006 	beq	2eaf4 <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)+0x28>
   2ead8:	e590c8b0 	ldr	ip, [r0, #2224]	; 0x8b0
   2eadc:	e153000c 	cmp	r3, ip
   2eae0:	0a000003 	beq	2eaf4 <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)+0x28>
   2eae4:	e5813000 	str	r3, [r1]
   2eae8:	e3a00001 	mov	r0, #1
   2eaec:	e582c000 	str	ip, [r2]
   2eaf0:	e12fff1e 	bx	lr
   2eaf4:	e3a00000 	mov	r0, #0
   2eaf8:	e12fff1e 	bx	lr

0002eafc <CommandHandler::sendKeyStrToTarget(char const*)>:
   2eafc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2eb00:	e3a04000 	mov	r4, #0
   2eb04:	e1a05000 	mov	r5, r0
   2eb08:	e1a06001 	mov	r6, r1
   2eb0c:	e1a08004 	mov	r8, r4
   2eb10:	e59f7094 	ldr	r7, [pc, #148]	; 2ebac <CommandHandler::sendKeyStrToTarget(char const*)+0xb0>
   2eb14:	ea00000e 	b	2eb54 <CommandHandler::sendKeyStrToTarget(char const*)+0x58>
   2eb18:	e3510000 	cmp	r1, #0
   2eb1c:	01520003 	cmpeq	r2, r3
   2eb20:	0a00000a 	beq	2eb50 <CommandHandler::sendKeyStrToTarget(char const*)+0x54>
   2eb24:	e59538b8 	ldr	r3, [r5, #2232]	; 0x8b8
   2eb28:	e7d62004 	ldrb	r2, [r6, r4]
   2eb2c:	e0853003 	add	r3, r5, r3
   2eb30:	e5c328c4 	strb	r2, [r3, #2244]	; 0x8c4
   2eb34:	e59538b8 	ldr	r3, [r5, #2232]	; 0x8b8
   2eb38:	e59528c0 	ldr	r2, [r5, #2240]	; 0x8c0
   2eb3c:	e2833001 	add	r3, r3, #1
   2eb40:	e58538b8 	str	r3, [r5, #2232]	; 0x8b8
   2eb44:	e59538b8 	ldr	r3, [r5, #2232]	; 0x8b8
   2eb48:	e1530002 	cmp	r3, r2
   2eb4c:	258588b8 	strcs	r8, [r5, #2232]	; 0x8b8
   2eb50:	e2844001 	add	r4, r4, #1
   2eb54:	e1a00006 	mov	r0, r6
   2eb58:	ebffe8e7 	bl	28efc <strlen>
   2eb5c:	e1540000 	cmp	r4, r0
   2eb60:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   2eb64:	e5973000 	ldr	r3, [r7]
   2eb68:	e59328c0 	ldr	r2, [r3, #2240]	; 0x8c0
   2eb6c:	e3520000 	cmp	r2, #0
   2eb70:	0afffff6 	beq	2eb50 <CommandHandler::sendKeyStrToTarget(char const*)+0x54>
   2eb74:	e59308b8 	ldr	r0, [r3, #2232]	; 0x8b8
   2eb78:	e59318bc 	ldr	r1, [r3, #2236]	; 0x8bc
   2eb7c:	e2422001 	sub	r2, r2, #1
   2eb80:	e1500001 	cmp	r0, r1
   2eb84:	0affffe6 	beq	2eb24 <CommandHandler::sendKeyStrToTarget(char const*)+0x28>
   2eb88:	e59318bc 	ldr	r1, [r3, #2236]	; 0x8bc
   2eb8c:	e59308b8 	ldr	r0, [r3, #2232]	; 0x8b8
   2eb90:	e59338b8 	ldr	r3, [r3, #2232]	; 0x8b8
   2eb94:	e1510000 	cmp	r1, r0
   2eb98:	3affffde 	bcc	2eb18 <CommandHandler::sendKeyStrToTarget(char const*)+0x1c>
   2eb9c:	e0411003 	sub	r1, r1, r3
   2eba0:	e3510001 	cmp	r1, #1
   2eba4:	8affffde 	bhi	2eb24 <CommandHandler::sendKeyStrToTarget(char const*)+0x28>
   2eba8:	eaffffe8 	b	2eb50 <CommandHandler::sendKeyStrToTarget(char const*)+0x54>
   2ebac:	0003e464 	.word	0x0003e464

0002ebb0 <CommandHandler::sendKeyStrToTargetStatic(char const*)>:
   2ebb0:	e59f3014 	ldr	r3, [pc, #20]	; 2ebcc <CommandHandler::sendKeyStrToTargetStatic(char const*)+0x1c>
   2ebb4:	e5933000 	ldr	r3, [r3]
   2ebb8:	e3530000 	cmp	r3, #0
   2ebbc:	012fff1e 	bxeq	lr
   2ebc0:	e1a01000 	mov	r1, r0
   2ebc4:	e1a00003 	mov	r0, r3
   2ebc8:	eaffffcb 	b	2eafc <CommandHandler::sendKeyStrToTarget(char const*)>
   2ebcc:	0003e464 	.word	0x0003e464

0002ebd0 <CommandHandler::getTxAvailable()>:
   2ebd0:	e59f3018 	ldr	r3, [pc, #24]	; 2ebf0 <CommandHandler::getTxAvailable()+0x20>
   2ebd4:	e5930000 	ldr	r0, [r3]
   2ebd8:	e3500000 	cmp	r0, #0
   2ebdc:	012fff1e 	bxeq	lr
   2ebe0:	e59300ac 	ldr	r0, [r3, #172]	; 0xac
   2ebe4:	e3500000 	cmp	r0, #0
   2ebe8:	012fff1e 	bxeq	lr
   2ebec:	e12fff10 	bx	r0
   2ebf0:	0003e464 	.word	0x0003e464

0002ebf4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
   2ebf4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2ebf8:	e1a06000 	mov	r6, r0
   2ebfc:	e1a05001 	mov	r5, r1
   2ec00:	e24ddc4e 	sub	sp, sp, #19968	; 0x4e00
   2ec04:	e24dd054 	sub	sp, sp, #84	; 0x54
   2ec08:	e28d0c4e 	add	r0, sp, #19968	; 0x4e00
   2ec0c:	e2800068 	add	r0, r0, #104	; 0x68
   2ec10:	e5904000 	ldr	r4, [r0]
   2ec14:	e3a01014 	mov	r1, #20
   2ec18:	e1a07003 	mov	r7, r3
   2ec1c:	e28d0008 	add	r0, sp, #8
   2ec20:	e1a03002 	mov	r3, r2
   2ec24:	e59f216c 	ldr	r2, [pc, #364]	; 2ed98 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1a4>
   2ec28:	ebfffdae 	bl	2e2e8 <snprintf>
   2ec2c:	e28d3030 	add	r3, sp, #48	; 0x30
   2ec30:	e58d3004 	str	r3, [sp, #4]
   2ec34:	e59f215c 	ldr	r2, [pc, #348]	; 2ed98 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1a4>
   2ec38:	e1a03004 	mov	r3, r4
   2ec3c:	e3a01014 	mov	r1, #20
   2ec40:	e28d001c 	add	r0, sp, #28
   2ec44:	ebfffda7 	bl	2e2e8 <snprintf>
   2ec48:	e59f214c 	ldr	r2, [pc, #332]	; 2ed9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1a8>
   2ec4c:	e59f114c 	ldr	r1, [pc, #332]	; 2eda0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1ac>
   2ec50:	e59d0004 	ldr	r0, [sp, #4]
   2ec54:	ebfffd2c 	bl	2e10c <strlcpy>
   2ec58:	e1a01006 	mov	r1, r6
   2ec5c:	e59f2138 	ldr	r2, [pc, #312]	; 2ed9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1a8>
   2ec60:	e59d0004 	ldr	r0, [sp, #4]
   2ec64:	ebfffd44 	bl	2e17c <strlcat>
   2ec68:	e59f212c 	ldr	r2, [pc, #300]	; 2ed9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1a8>
   2ec6c:	e59f1130 	ldr	r1, [pc, #304]	; 2eda4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b0>
   2ec70:	e59d0004 	ldr	r0, [sp, #4]
   2ec74:	ebfffd40 	bl	2e17c <strlcat>
   2ec78:	e1a00005 	mov	r0, r5
   2ec7c:	ebffe89e 	bl	28efc <strlen>
   2ec80:	e3500000 	cmp	r0, #0
   2ec84:	1a00003a 	bne	2ed74 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x180>
   2ec88:	e59f210c 	ldr	r2, [pc, #268]	; 2ed9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1a8>
   2ec8c:	e59f1114 	ldr	r1, [pc, #276]	; 2eda8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b4>
   2ec90:	e59d0004 	ldr	r0, [sp, #4]
   2ec94:	ebfffd38 	bl	2e17c <strlcat>
   2ec98:	e28d1008 	add	r1, sp, #8
   2ec9c:	e59f20f8 	ldr	r2, [pc, #248]	; 2ed9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1a8>
   2eca0:	e59d0004 	ldr	r0, [sp, #4]
   2eca4:	ebfffd34 	bl	2e17c <strlcat>
   2eca8:	e59f20ec 	ldr	r2, [pc, #236]	; 2ed9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1a8>
   2ecac:	e59f10f8 	ldr	r1, [pc, #248]	; 2edac <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ecb0:	e59d0004 	ldr	r0, [sp, #4]
   2ecb4:	ebfffd30 	bl	2e17c <strlcat>
   2ecb8:	e28d101c 	add	r1, sp, #28
   2ecbc:	e59f20d8 	ldr	r2, [pc, #216]	; 2ed9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1a8>
   2ecc0:	e59d0004 	ldr	r0, [sp, #4]
   2ecc4:	ebfffd2c 	bl	2e17c <strlcat>
   2ecc8:	e59f20cc 	ldr	r2, [pc, #204]	; 2ed9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1a8>
   2eccc:	e59f10dc 	ldr	r1, [pc, #220]	; 2edb0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1bc>
   2ecd0:	e59d0004 	ldr	r0, [sp, #4]
   2ecd4:	ebfffd28 	bl	2e17c <strlcat>
   2ecd8:	e59d0004 	ldr	r0, [sp, #4]
   2ecdc:	ebffe886 	bl	28efc <strlen>
   2ece0:	e2800001 	add	r0, r0, #1
   2ece4:	e0845000 	add	r5, r4, r0
   2ece8:	e59f30c4 	ldr	r3, [pc, #196]	; 2edb4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c0>
   2ecec:	e2856001 	add	r6, r5, #1
   2ecf0:	e1560003 	cmp	r6, r3
   2ecf4:	8a000016 	bhi	2ed54 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x160>
   2ecf8:	e3540000 	cmp	r4, #0
   2ecfc:	0a000006 	beq	2ed1c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x128>
   2ed00:	e3570000 	cmp	r7, #0
   2ed04:	0a00000f 	beq	2ed48 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x154>
   2ed08:	e59d3004 	ldr	r3, [sp, #4]
   2ed0c:	e1a02004 	mov	r2, r4
   2ed10:	e1a01007 	mov	r1, r7
   2ed14:	e0830000 	add	r0, r3, r0
   2ed18:	ebffea9c 	bl	29790 <memcpy>
   2ed1c:	e3a03000 	mov	r3, #0
   2ed20:	e59f2090 	ldr	r2, [pc, #144]	; 2edb8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c4>
   2ed24:	e5920000 	ldr	r0, [r2]
   2ed28:	e28d2ee5 	add	r2, sp, #3664	; 0xe50
   2ed2c:	e0825005 	add	r5, r2, r5
   2ed30:	e1500003 	cmp	r0, r3
   2ed34:	e5453e20 	strb	r3, [r5, #-3616]	; 0xfffff1e0
   2ed38:	0a000002 	beq	2ed48 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x154>
   2ed3c:	e1a02006 	mov	r2, r6
   2ed40:	e59d1004 	ldr	r1, [sp, #4]
   2ed44:	eb00042e 	bl	2fe04 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>
   2ed48:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   2ed4c:	e28dd054 	add	sp, sp, #84	; 0x54
   2ed50:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2ed54:	ebffdb3c 	bl	25a4c <CLogger::Get()>
   2ed58:	e59f305c 	ldr	r3, [pc, #92]	; 2edbc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c8>
   2ed5c:	e3a02002 	mov	r2, #2
   2ed60:	e59f1058 	ldr	r1, [pc, #88]	; 2edc0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1cc>
   2ed64:	ebffda75 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2ed68:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   2ed6c:	e28dd054 	add	sp, sp, #84	; 0x54
   2ed70:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2ed74:	e59f2020 	ldr	r2, [pc, #32]	; 2ed9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1a8>
   2ed78:	e59f1044 	ldr	r1, [pc, #68]	; 2edc4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d0>
   2ed7c:	e59d0004 	ldr	r0, [sp, #4]
   2ed80:	ebfffcfd 	bl	2e17c <strlcat>
   2ed84:	e1a01005 	mov	r1, r5
   2ed88:	e59f200c 	ldr	r2, [pc, #12]	; 2ed9c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1a8>
   2ed8c:	e59d0004 	ldr	r0, [sp, #4]
   2ed90:	ebfffcf9 	bl	2e17c <strlcat>
   2ed94:	eaffffbb 	b	2ec88 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x94>
   2ed98:	0003b778 	.word	0x0003b778
   2ed9c:	00004e20 	.word	0x00004e20
   2eda0:	0003b77c 	.word	0x0003b77c
   2eda4:	0003b78c 	.word	0x0003b78c
   2eda8:	0003b790 	.word	0x0003b790
   2edac:	0003b79c 	.word	0x0003b79c
   2edb0:	0003b7c4 	.word	0x0003b7c4
   2edb4:	00004e1f 	.word	0x00004e1f
   2edb8:	0003e464 	.word	0x0003e464
   2edbc:	0003b7a8 	.word	0x0003b7a8
   2edc0:	0003b6b4 	.word	0x0003b6b4
   2edc4:	000388d8 	.word	0x000388d8

0002edc8 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>:
   2edc8:	e92d4070 	push	{r4, r5, r6, lr}
   2edcc:	e1a04000 	mov	r4, r0
   2edd0:	e1a06001 	mov	r6, r1
   2edd4:	e1a05002 	mov	r5, r2
   2edd8:	e24ddc27 	sub	sp, sp, #9984	; 0x2700
   2eddc:	e24dd030 	sub	sp, sp, #48	; 0x30
   2ede0:	e28d3020 	add	r3, sp, #32
   2ede4:	e58d300c 	str	r3, [sp, #12]
   2ede8:	e59f20c0 	ldr	r2, [pc, #192]	; 2eeb0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xe8>
   2edec:	e1a03004 	mov	r3, r4
   2edf0:	e3a0100a 	mov	r1, #10
   2edf4:	e28d0014 	add	r0, sp, #20
   2edf8:	ebfffd3a 	bl	2e2e8 <snprintf>
   2edfc:	e59f20b0 	ldr	r2, [pc, #176]	; 2eeb4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xec>
   2ee00:	e59f10b0 	ldr	r1, [pc, #176]	; 2eeb8 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   2ee04:	e59d000c 	ldr	r0, [sp, #12]
   2ee08:	ebfffcbf 	bl	2e10c <strlcpy>
   2ee0c:	e1a01006 	mov	r1, r6
   2ee10:	e59f209c 	ldr	r2, [pc, #156]	; 2eeb4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xec>
   2ee14:	e59d000c 	ldr	r0, [sp, #12]
   2ee18:	ebfffcd7 	bl	2e17c <strlcat>
   2ee1c:	e59f2090 	ldr	r2, [pc, #144]	; 2eeb4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xec>
   2ee20:	e59f1094 	ldr	r1, [pc, #148]	; 2eebc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf4>
   2ee24:	e59d000c 	ldr	r0, [sp, #12]
   2ee28:	ebfffcd3 	bl	2e17c <strlcat>
   2ee2c:	e59f2080 	ldr	r2, [pc, #128]	; 2eeb4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xec>
   2ee30:	e59f1088 	ldr	r1, [pc, #136]	; 2eec0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf8>
   2ee34:	e59d000c 	ldr	r0, [sp, #12]
   2ee38:	ebfffccf 	bl	2e17c <strlcat>
   2ee3c:	e1a01005 	mov	r1, r5
   2ee40:	e59d000c 	ldr	r0, [sp, #12]
   2ee44:	e59f2068 	ldr	r2, [pc, #104]	; 2eeb4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xec>
   2ee48:	ebfffccb 	bl	2e17c <strlcat>
   2ee4c:	e3740001 	cmn	r4, #1
   2ee50:	0a000007 	beq	2ee74 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xac>
   2ee54:	e59f2058 	ldr	r2, [pc, #88]	; 2eeb4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xec>
   2ee58:	e59f1064 	ldr	r1, [pc, #100]	; 2eec4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xfc>
   2ee5c:	e59d000c 	ldr	r0, [sp, #12]
   2ee60:	ebfffcc5 	bl	2e17c <strlcat>
   2ee64:	e28d1014 	add	r1, sp, #20
   2ee68:	e59f2044 	ldr	r2, [pc, #68]	; 2eeb4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xec>
   2ee6c:	e59d000c 	ldr	r0, [sp, #12]
   2ee70:	ebfffcc1 	bl	2e17c <strlcat>
   2ee74:	e59f2038 	ldr	r2, [pc, #56]	; 2eeb4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xec>
   2ee78:	e59f1048 	ldr	r1, [pc, #72]	; 2eec8 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x100>
   2ee7c:	e59d000c 	ldr	r0, [sp, #12]
   2ee80:	ebfffcbd 	bl	2e17c <strlcat>
   2ee84:	e59d000c 	ldr	r0, [sp, #12]
   2ee88:	ebffe81b 	bl	28efc <strlen>
   2ee8c:	e59d300c 	ldr	r3, [sp, #12]
   2ee90:	e58d0000 	str	r0, [sp]
   2ee94:	e1a02004 	mov	r2, r4
   2ee98:	e59f102c 	ldr	r1, [pc, #44]	; 2eecc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x104>
   2ee9c:	e59f002c 	ldr	r0, [pc, #44]	; 2eed0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x108>
   2eea0:	ebffff53 	bl	2ebf4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2eea4:	e28ddc27 	add	sp, sp, #9984	; 0x2700
   2eea8:	e28dd030 	add	sp, sp, #48	; 0x30
   2eeac:	e8bd8070 	pop	{r4, r5, r6, pc}
   2eeb0:	0003b778 	.word	0x0003b778
   2eeb4:	00002710 	.word	0x00002710
   2eeb8:	0003b77c 	.word	0x0003b77c
   2eebc:	0003b78c 	.word	0x0003b78c
   2eec0:	000388d8 	.word	0x000388d8
   2eec4:	0003b790 	.word	0x0003b790
   2eec8:	0003b7b8 	.word	0x0003b7b8
   2eecc:	0003c7f8 	.word	0x0003c7f8
   2eed0:	0003b7c8 	.word	0x0003b7c8

0002eed4 <CommandHandler::sendUnnumberedMsg(char const*, char const*)>:
   2eed4:	e1a02001 	mov	r2, r1
   2eed8:	e1a01000 	mov	r1, r0
   2eedc:	e3e00000 	mvn	r0, #0
   2eee0:	eaffffb8 	b	2edc8 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>

0002eee4 <CommandHandler::handleFileEnd(char const*) [clone .part.0]>:
   2eee4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2eee8:	e24dd094 	sub	sp, sp, #148	; 0x94
   2eeec:	e1a04000 	mov	r4, r0
   2eef0:	e28d2014 	add	r2, sp, #20
   2eef4:	e3a03014 	mov	r3, #20
   2eef8:	e59f0178 	ldr	r0, [pc, #376]	; 2f078 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x194>
   2eefc:	eb00123d 	bl	337f8 <jsonGetValueForKey>
   2ef00:	e2505000 	subs	r5, r0, #0
   2ef04:	1a000020 	bne	2ef8c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0xa8>
   2ef08:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   2ef0c:	e28d002c 	add	r0, sp, #44	; 0x2c
   2ef10:	e58d5000 	str	r5, [sp]
   2ef14:	e59f2160 	ldr	r2, [pc, #352]	; 2f07c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x198>
   2ef18:	e3a01064 	mov	r1, #100	; 0x64
   2ef1c:	ebfffcf1 	bl	2e2e8 <snprintf>
   2ef20:	e59438b4 	ldr	r3, [r4, #2228]	; 0x8b4
   2ef24:	e1550003 	cmp	r5, r3
   2ef28:	0a00001d 	beq	2efa4 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0xc0>
   2ef2c:	ebffdac6 	bl	25a4c <CLogger::Get()>
   2ef30:	e59428b4 	ldr	r2, [r4, #2228]	; 0x8b4
   2ef34:	e2843048 	add	r3, r4, #72	; 0x48
   2ef38:	e98d0024 	stmib	sp, {r2, r5}
   2ef3c:	e58d3000 	str	r3, [sp]
   2ef40:	e3a02002 	mov	r2, #2
   2ef44:	e59f3134 	ldr	r3, [pc, #308]	; 2f080 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x19c>
   2ef48:	e59f1134 	ldr	r1, [pc, #308]	; 2f084 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1a0>
   2ef4c:	ebffd9fb 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2ef50:	e3a03000 	mov	r3, #0
   2ef54:	e28d102c 	add	r1, sp, #44	; 0x2c
   2ef58:	e58d3000 	str	r3, [sp]
   2ef5c:	e1a02003 	mov	r2, r3
   2ef60:	e59f0120 	ldr	r0, [pc, #288]	; 2f088 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1a4>
   2ef64:	ebffff22 	bl	2ebf4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2ef68:	e59408a8 	ldr	r0, [r4, #2216]	; 0x8a8
   2ef6c:	e3500000 	cmp	r0, #0
   2ef70:	0a000000 	beq	2ef78 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x94>
   2ef74:	ebffebe6 	bl	29f14 <operator delete[](void*)>
   2ef78:	e3a03000 	mov	r3, #0
   2ef7c:	e58438a8 	str	r3, [r4, #2216]	; 0x8a8
   2ef80:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
   2ef84:	e28dd094 	add	sp, sp, #148	; 0x94
   2ef88:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2ef8c:	e28d0014 	add	r0, sp, #20
   2ef90:	e3a0200a 	mov	r2, #10
   2ef94:	e3a01000 	mov	r1, #0
   2ef98:	ebffe924 	bl	29430 <strtoul>
   2ef9c:	e1a05000 	mov	r5, r0
   2efa0:	eaffffd8 	b	2ef08 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x24>
   2efa4:	e3a03000 	mov	r3, #0
   2efa8:	e28d102c 	add	r1, sp, #44	; 0x2c
   2efac:	e58d3000 	str	r3, [sp]
   2efb0:	e1a02003 	mov	r2, r3
   2efb4:	e59f00d0 	ldr	r0, [pc, #208]	; 2f08c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1a8>
   2efb8:	ebffff0d 	bl	2ebf4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2efbc:	e59f10cc 	ldr	r1, [pc, #204]	; 2f090 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1ac>
   2efc0:	e28400ad 	add	r0, r4, #173	; 0xad
   2efc4:	ebffe7f1 	bl	28f90 <strcasecmp>
   2efc8:	e3500000 	cmp	r0, #0
   2efcc:	03a06001 	moveq	r6, #1
   2efd0:	13a06000 	movne	r6, #0
   2efd4:	0a000017 	beq	2f038 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x154>
   2efd8:	ebffda9b 	bl	25a4c <CLogger::Get()>
   2efdc:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   2efe0:	e2845048 	add	r5, r4, #72	; 0x48
   2efe4:	e58d3004 	str	r3, [sp, #4]
   2efe8:	e58d5000 	str	r5, [sp]
   2efec:	e59f30a0 	ldr	r3, [pc, #160]	; 2f094 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1b0>
   2eff0:	e3a02004 	mov	r2, #4
   2eff4:	e59f1088 	ldr	r1, [pc, #136]	; 2f084 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1a0>
   2eff8:	ebffd9d0 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2effc:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   2f000:	e59428a8 	ldr	r2, [r4, #2216]	; 0x8a8
   2f004:	e28410d6 	add	r1, r4, #214	; 0xd6
   2f008:	e1a00004 	mov	r0, r4
   2f00c:	e58d6000 	str	r6, [sp]
   2f010:	ebfffe1b 	bl	2e884 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>
   2f014:	ebffda8c 	bl	25a4c <CLogger::Get()>
   2f018:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   2f01c:	e3a02004 	mov	r2, #4
   2f020:	e58d3004 	str	r3, [sp, #4]
   2f024:	e58d5000 	str	r5, [sp]
   2f028:	e59f3068 	ldr	r3, [pc, #104]	; 2f098 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1b4>
   2f02c:	e59f1050 	ldr	r1, [pc, #80]	; 2f084 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1a0>
   2f030:	ebffd9c2 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2f034:	eaffffcb 	b	2ef68 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x84>
   2f038:	e59418b0 	ldr	r1, [r4, #2224]	; 0x8b0
   2f03c:	e59408a8 	ldr	r0, [r4, #2216]	; 0x8a8
   2f040:	eb0003ab 	bl	2fef4 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>
   2f044:	e1a07000 	mov	r7, r0
   2f048:	ebffda7f 	bl	25a4c <CLogger::Get()>
   2f04c:	e59438b0 	ldr	r3, [r4, #2224]	; 0x8b0
   2f050:	e2845048 	add	r5, r4, #72	; 0x48
   2f054:	e98d0088 	stmib	sp, {r3, r7}
   2f058:	e58d5000 	str	r5, [sp]
   2f05c:	e59f3038 	ldr	r3, [pc, #56]	; 2f09c <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1b8>
   2f060:	e3a02004 	mov	r2, #4
   2f064:	e59f1018 	ldr	r1, [pc, #24]	; 2f084 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1a0>
   2f068:	ebffd9b4 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2f06c:	e59f002c 	ldr	r0, [pc, #44]	; 2f0a0 <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x1bc>
   2f070:	ebfffbf2 	bl	2e040 <microsDelay>
   2f074:	eaffffe0 	b	2effc <CommandHandler::handleFileEnd(char const*) [clone .part.0]+0x118>
   2f078:	0003b7cc 	.word	0x0003b7cc
   2f07c:	0003b7d8 	.word	0x0003b7d8
   2f080:	0003b7f4 	.word	0x0003b7f4
   2f084:	0003b6b4 	.word	0x0003b6b4
   2f088:	0003b820 	.word	0x0003b820
   2f08c:	0003b82c 	.word	0x0003b82c
   2f090:	0003b838 	.word	0x0003b838
   2f094:	0003b87c 	.word	0x0003b87c
   2f098:	0003b894 	.word	0x0003b894
   2f09c:	0003b844 	.word	0x0003b844
   2f0a0:	000186a0 	.word	0x000186a0

0002f0a4 <CommandHandler::handleFileEnd(char const*)>:
   2f0a4:	e59038a8 	ldr	r3, [r0, #2216]	; 0x8a8
   2f0a8:	e3530000 	cmp	r3, #0
   2f0ac:	012fff1e 	bxeq	lr
   2f0b0:	eaffff8b 	b	2eee4 <CommandHandler::handleFileEnd(char const*) [clone .part.0]>

0002f0b4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)>:
   2f0b4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2f0b8:	e24ddc57 	sub	sp, sp, #22272	; 0x5700
   2f0bc:	e24dd0bc 	sub	sp, sp, #188	; 0xbc
   2f0c0:	e28dc0f8 	add	ip, sp, #248	; 0xf8
   2f0c4:	e1a05000 	mov	r5, r0
   2f0c8:	e1a07002 	mov	r7, r2
   2f0cc:	e1a06003 	mov	r6, r3
   2f0d0:	e1a0200c 	mov	r2, ip
   2f0d4:	e3a030c8 	mov	r3, #200	; 0xc8
   2f0d8:	e59f023c 	ldr	r0, [pc, #572]	; 2f31c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x268>
   2f0dc:	e58dc00c 	str	ip, [sp, #12]
   2f0e0:	e1a04001 	mov	r4, r1
   2f0e4:	eb0011c3 	bl	337f8 <jsonGetValueForKey>
   2f0e8:	e3500000 	cmp	r0, #0
   2f0ec:	1a000002 	bne	2f0fc <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x48>
   2f0f0:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   2f0f4:	e28dd0bc 	add	sp, sp, #188	; 0xbc
   2f0f8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f0fc:	e3a08000 	mov	r8, #0
   2f100:	e28d201c 	add	r2, sp, #28
   2f104:	e3a03014 	mov	r3, #20
   2f108:	e1a01004 	mov	r1, r4
   2f10c:	e59f020c 	ldr	r0, [pc, #524]	; 2f320 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x26c>
   2f110:	e5cd801c 	strb	r8, [sp, #28]
   2f114:	eb0011b7 	bl	337f8 <jsonGetValueForKey>
   2f118:	e59f1204 	ldr	r1, [pc, #516]	; 2f324 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x270>
   2f11c:	e59d000c 	ldr	r0, [sp, #12]
   2f120:	ebffe79a 	bl	28f90 <strcasecmp>
   2f124:	e1500008 	cmp	r0, r8
   2f128:	0a00000a 	beq	2f158 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0xa4>
   2f12c:	e59f11f4 	ldr	r1, [pc, #500]	; 2f328 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x274>
   2f130:	e59d000c 	ldr	r0, [sp, #12]
   2f134:	ebffe795 	bl	28f90 <strcasecmp>
   2f138:	e3500000 	cmp	r0, #0
   2f13c:	1a00000b 	bne	2f170 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0xbc>
   2f140:	e1a03006 	mov	r3, r6
   2f144:	e1a02007 	mov	r2, r7
   2f148:	e1a01004 	mov	r1, r4
   2f14c:	e1a00005 	mov	r0, r5
   2f150:	ebfffe36 	bl	2ea30 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)>
   2f154:	eaffffe5 	b	2f0f0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   2f158:	e1a01004 	mov	r1, r4
   2f15c:	e1a00005 	mov	r0, r5
   2f160:	ebfffdf1 	bl	2e92c <CommandHandler::handleFileStart(char const*)>
   2f164:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   2f168:	e28dd0bc 	add	sp, sp, #188	; 0xbc
   2f16c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f170:	e59f11b4 	ldr	r1, [pc, #436]	; 2f32c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x278>
   2f174:	e59d000c 	ldr	r0, [sp, #12]
   2f178:	ebffe784 	bl	28f90 <strcasecmp>
   2f17c:	e3500000 	cmp	r0, #0
   2f180:	1a000006 	bne	2f1a0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0xec>
   2f184:	e59538a8 	ldr	r3, [r5, #2216]	; 0x8a8
   2f188:	e3530000 	cmp	r3, #0
   2f18c:	0affffd7 	beq	2f0f0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   2f190:	e1a01004 	mov	r1, r4
   2f194:	e1a00005 	mov	r0, r5
   2f198:	ebffff51 	bl	2eee4 <CommandHandler::handleFileEnd(char const*) [clone .part.0]>
   2f19c:	eaffffd3 	b	2f0f0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   2f1a0:	e59f1188 	ldr	r1, [pc, #392]	; 2f330 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x27c>
   2f1a4:	e59d000c 	ldr	r0, [sp, #12]
   2f1a8:	e5cd81c4 	strb	r8, [sp, #452]	; 0x1c4
   2f1ac:	ebffe777 	bl	28f90 <strcasecmp>
   2f1b0:	e2501000 	subs	r1, r0, #0
   2f1b4:	0a00001f 	beq	2f238 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x184>
   2f1b8:	e28d3e9b 	add	r3, sp, #2480	; 0x9b0
   2f1bc:	e59fc170 	ldr	ip, [pc, #368]	; 2f334 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x280>
   2f1c0:	e2833008 	add	r3, r3, #8
   2f1c4:	e2439020 	sub	r9, r3, #32
   2f1c8:	e28de030 	add	lr, sp, #48	; 0x30
   2f1cc:	e1a03006 	mov	r3, r6
   2f1d0:	e88d1200 	stm	sp, {r9, ip}
   2f1d4:	e1a02007 	mov	r2, r7
   2f1d8:	e1a01004 	mov	r1, r4
   2f1dc:	e1a00005 	mov	r0, r5
   2f1e0:	e58de010 	str	lr, [sp, #16]
   2f1e4:	e5cd8998 	strb	r8, [sp, #2456]	; 0x998
   2f1e8:	ebfffd62 	bl	2e778 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>
   2f1ec:	e59d100c 	ldr	r1, [sp, #12]
   2f1f0:	e3a020c8 	mov	r2, #200	; 0xc8
   2f1f4:	e59d0010 	ldr	r0, [sp, #16]
   2f1f8:	ebfffbc3 	bl	2e10c <strlcpy>
   2f1fc:	e3a020c8 	mov	r2, #200	; 0xc8
   2f200:	e59f1130 	ldr	r1, [pc, #304]	; 2f338 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x284>
   2f204:	e59d0010 	ldr	r0, [sp, #16]
   2f208:	ebfffbdb 	bl	2e17c <strlcat>
   2f20c:	e1a00009 	mov	r0, r9
   2f210:	ebffe739 	bl	28efc <strlen>
   2f214:	e3500000 	cmp	r0, #0
   2f218:	0affffb4 	beq	2f0f0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   2f21c:	e58d8000 	str	r8, [sp]
   2f220:	e1a01009 	mov	r1, r9
   2f224:	e59d0010 	ldr	r0, [sp, #16]
   2f228:	e1a03008 	mov	r3, r8
   2f22c:	e1a02008 	mov	r2, r8
   2f230:	ebfffe6f 	bl	2ebf4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2f234:	eaffffad 	b	2f0f0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   2f238:	e3a0200a 	mov	r2, #10
   2f23c:	e28d001c 	add	r0, sp, #28
   2f240:	ebffe87a 	bl	29430 <strtoul>
   2f244:	e28d3f71 	add	r3, sp, #452	; 0x1c4
   2f248:	e1a01007 	mov	r1, r7
   2f24c:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   2f250:	e1a08000 	mov	r8, r0
   2f254:	e1a00003 	mov	r0, r3
   2f258:	e58d3010 	str	r3, [sp, #16]
   2f25c:	ebfffbaa 	bl	2e10c <strlcpy>
   2f260:	e59d0010 	ldr	r0, [sp, #16]
   2f264:	ebffe724 	bl	28efc <strlen>
   2f268:	e2466001 	sub	r6, r6, #1
   2f26c:	e0566000 	subs	r6, r6, r0
   2f270:	e0877000 	add	r7, r7, r0
   2f274:	e3a030c8 	mov	r3, #200	; 0xc8
   2f278:	e59d200c 	ldr	r2, [sp, #12]
   2f27c:	e59d1010 	ldr	r1, [sp, #16]
   2f280:	e59f0094 	ldr	r0, [pc, #148]	; 2f31c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x268>
   2f284:	12877001 	addne	r7, r7, #1
   2f288:	eb00115a 	bl	337f8 <jsonGetValueForKey>
   2f28c:	e28d201c 	add	r2, sp, #28
   2f290:	e3a03014 	mov	r3, #20
   2f294:	e59d1010 	ldr	r1, [sp, #16]
   2f298:	e59f0080 	ldr	r0, [pc, #128]	; 2f320 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x26c>
   2f29c:	eb001155 	bl	337f8 <jsonGetValueForKey>
   2f2a0:	e3a0c000 	mov	ip, #0
   2f2a4:	e28d3e9b 	add	r3, sp, #2480	; 0x9b0
   2f2a8:	e59fe084 	ldr	lr, [pc, #132]	; 2f334 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x280>
   2f2ac:	e2833008 	add	r3, r3, #8
   2f2b0:	e2434020 	sub	r4, r3, #32
   2f2b4:	e28d3030 	add	r3, sp, #48	; 0x30
   2f2b8:	e88d4010 	stm	sp, {r4, lr}
   2f2bc:	e58d3014 	str	r3, [sp, #20]
   2f2c0:	e1a02007 	mov	r2, r7
   2f2c4:	e1a03006 	mov	r3, r6
   2f2c8:	e59d1010 	ldr	r1, [sp, #16]
   2f2cc:	e1a00005 	mov	r0, r5
   2f2d0:	e5cdc998 	strb	ip, [sp, #2456]	; 0x998
   2f2d4:	ebfffd27 	bl	2e778 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>
   2f2d8:	e59d100c 	ldr	r1, [sp, #12]
   2f2dc:	e3a020c8 	mov	r2, #200	; 0xc8
   2f2e0:	e59d0014 	ldr	r0, [sp, #20]
   2f2e4:	ebfffb88 	bl	2e10c <strlcpy>
   2f2e8:	e3a020c8 	mov	r2, #200	; 0xc8
   2f2ec:	e59f1044 	ldr	r1, [pc, #68]	; 2f338 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x284>
   2f2f0:	e59d0014 	ldr	r0, [sp, #20]
   2f2f4:	ebfffba0 	bl	2e17c <strlcat>
   2f2f8:	e1a00004 	mov	r0, r4
   2f2fc:	ebffe6fe 	bl	28efc <strlen>
   2f300:	e3500000 	cmp	r0, #0
   2f304:	0affff79 	beq	2f0f0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   2f308:	e1a02004 	mov	r2, r4
   2f30c:	e59d1014 	ldr	r1, [sp, #20]
   2f310:	e1a00008 	mov	r0, r8
   2f314:	ebfffeab 	bl	2edc8 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>
   2f318:	eaffff74 	b	2f0f0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   2f31c:	0003b8b4 	.word	0x0003b8b4
   2f320:	0003b8bc 	.word	0x0003b8bc
   2f324:	0003b8c4 	.word	0x0003b8c4
   2f328:	0003b8cc 	.word	0x0003b8cc
   2f32c:	0003b8d4 	.word	0x0003b8d4
   2f330:	0003b7c8 	.word	0x0003b7c8
   2f334:	00004e20 	.word	0x00004e20
   2f338:	0003b8dc 	.word	0x0003b8dc

0002f33c <CommandHandler::hdlcFrameRx(unsigned char const*, unsigned int)>:
   2f33c:	e92d4070 	push	{r4, r5, r6, lr}
   2f340:	e24dde7e 	sub	sp, sp, #2016	; 0x7e0
   2f344:	e3520e7d 	cmp	r2, #2000	; 0x7d0
   2f348:	e28d300c 	add	r3, sp, #12
   2f34c:	e1a04002 	mov	r4, r2
   2f350:	e1a06000 	mov	r6, r0
   2f354:	92822001 	addls	r2, r2, #1
   2f358:	83a02e7d 	movhi	r2, #2000	; 0x7d0
   2f35c:	e1a00003 	mov	r0, r3
   2f360:	e1a05001 	mov	r5, r1
   2f364:	e58d3004 	str	r3, [sp, #4]
   2f368:	ebfffb67 	bl	2e10c <strlcpy>
   2f36c:	e59d0004 	ldr	r0, [sp, #4]
   2f370:	ebffe6e1 	bl	28efc <strlen>
   2f374:	e2444001 	sub	r4, r4, #1
   2f378:	e2802001 	add	r2, r0, #1
   2f37c:	e0443000 	sub	r3, r4, r0
   2f380:	e59d1004 	ldr	r1, [sp, #4]
   2f384:	e0852002 	add	r2, r5, r2
   2f388:	e1a00006 	mov	r0, r6
   2f38c:	ebffff48 	bl	2f0b4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)>
   2f390:	e28dde7e 	add	sp, sp, #2016	; 0x7e0
   2f394:	e8bd8070 	pop	{r4, r5, r6, pc}

0002f398 <CommandHandler::hdlcFrameRxStatic(unsigned char const*, unsigned int)>:
   2f398:	e59f3018 	ldr	r3, [pc, #24]	; 2f3b8 <CommandHandler::hdlcFrameRxStatic(unsigned char const*, unsigned int)+0x20>
   2f39c:	e5933000 	ldr	r3, [r3]
   2f3a0:	e3530000 	cmp	r3, #0
   2f3a4:	012fff1e 	bxeq	lr
   2f3a8:	e1a02001 	mov	r2, r1
   2f3ac:	e1a01000 	mov	r1, r0
   2f3b0:	e1a00003 	mov	r0, r3
   2f3b4:	eaffffe0 	b	2f33c <CommandHandler::hdlcFrameRx(unsigned char const*, unsigned int)>
   2f3b8:	0003e464 	.word	0x0003e464

0002f3bc <CommandHandler::sendAPIReq(char const*)>:
   2f3bc:	e92d4010 	push	{r4, lr}
   2f3c0:	e24dd070 	sub	sp, sp, #112	; 0x70
   2f3c4:	e3a02064 	mov	r2, #100	; 0x64
   2f3c8:	e59f1070 	ldr	r1, [pc, #112]	; 2f440 <CommandHandler::sendAPIReq(char const*)+0x84>
   2f3cc:	e1a04000 	mov	r4, r0
   2f3d0:	e28d0008 	add	r0, sp, #8
   2f3d4:	ebfffb4c 	bl	2e10c <strlcpy>
   2f3d8:	e28d0008 	add	r0, sp, #8
   2f3dc:	ebffe6c6 	bl	28efc <strlen>
   2f3e0:	e28d3008 	add	r3, sp, #8
   2f3e4:	e1a01004 	mov	r1, r4
   2f3e8:	e0830000 	add	r0, r3, r0
   2f3ec:	e3a02064 	mov	r2, #100	; 0x64
   2f3f0:	ebfffb45 	bl	2e10c <strlcpy>
   2f3f4:	e28d0008 	add	r0, sp, #8
   2f3f8:	ebffe6bf 	bl	28efc <strlen>
   2f3fc:	e28d3008 	add	r3, sp, #8
   2f400:	e0830000 	add	r0, r3, r0
   2f404:	e3a02064 	mov	r2, #100	; 0x64
   2f408:	e59f1034 	ldr	r1, [pc, #52]	; 2f444 <CommandHandler::sendAPIReq(char const*)+0x88>
   2f40c:	ebfffb3e 	bl	2e10c <strlcpy>
   2f410:	e59f3030 	ldr	r3, [pc, #48]	; 2f448 <CommandHandler::sendAPIReq(char const*)+0x8c>
   2f414:	e5933000 	ldr	r3, [r3]
   2f418:	e3530000 	cmp	r3, #0
   2f41c:	0a000005 	beq	2f438 <CommandHandler::sendAPIReq(char const*)+0x7c>
   2f420:	e3a03000 	mov	r3, #0
   2f424:	e28d1008 	add	r1, sp, #8
   2f428:	e58d3000 	str	r3, [sp]
   2f42c:	e1a02003 	mov	r2, r3
   2f430:	e59f0014 	ldr	r0, [pc, #20]	; 2f44c <CommandHandler::sendAPIReq(char const*)+0x90>
   2f434:	ebfffdee 	bl	2ebf4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2f438:	e28dd070 	add	sp, sp, #112	; 0x70
   2f43c:	e8bd8010 	pop	{r4, pc}
   2f440:	0003b8e4 	.word	0x0003b8e4
   2f444:	0003b78c 	.word	0x0003b78c
   2f448:	0003e464 	.word	0x0003e464
   2f44c:	0003b8ec 	.word	0x0003b8ec

0002f450 <CommandHandler::logDebugMessage(char const*)>:
   2f450:	e92d4030 	push	{r4, r5, lr}
   2f454:	e1a05001 	mov	r5, r1
   2f458:	e24ddc4e 	sub	sp, sp, #19968	; 0x4e00
   2f45c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2f460:	e59f4058 	ldr	r4, [pc, #88]	; 2f4c0 <CommandHandler::logDebugMessage(char const*)+0x70>
   2f464:	e28d3014 	add	r3, sp, #20
   2f468:	e1a00003 	mov	r0, r3
   2f46c:	e1a02004 	mov	r2, r4
   2f470:	e59f104c 	ldr	r1, [pc, #76]	; 2f4c4 <CommandHandler::logDebugMessage(char const*)+0x74>
   2f474:	e58d300c 	str	r3, [sp, #12]
   2f478:	ebfffb23 	bl	2e10c <strlcpy>
   2f47c:	e1a02004 	mov	r2, r4
   2f480:	e1a01005 	mov	r1, r5
   2f484:	e59d000c 	ldr	r0, [sp, #12]
   2f488:	ebfffb3b 	bl	2e17c <strlcat>
   2f48c:	e1a02004 	mov	r2, r4
   2f490:	e59d000c 	ldr	r0, [sp, #12]
   2f494:	e59f102c 	ldr	r1, [pc, #44]	; 2f4c8 <CommandHandler::logDebugMessage(char const*)+0x78>
   2f498:	ebfffb37 	bl	2e17c <strlcat>
   2f49c:	e3a03000 	mov	r3, #0
   2f4a0:	e59d100c 	ldr	r1, [sp, #12]
   2f4a4:	e58d3000 	str	r3, [sp]
   2f4a8:	e1a02003 	mov	r2, r3
   2f4ac:	e59f0018 	ldr	r0, [pc, #24]	; 2f4cc <CommandHandler::logDebugMessage(char const*)+0x7c>
   2f4b0:	ebfffdcf 	bl	2ebf4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2f4b4:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   2f4b8:	e28dd03c 	add	sp, sp, #60	; 0x3c
   2f4bc:	e8bd8030 	pop	{r4, r5, pc}
   2f4c0:	00004e20 	.word	0x00004e20
   2f4c4:	0003b8f4 	.word	0x0003b8f4
   2f4c8:	0003b78c 	.word	0x0003b78c
   2f4cc:	0003b8fc 	.word	0x0003b8fc

0002f4d0 <CommandHandler::logDebugJson(char const*)>:
   2f4d0:	e3a03000 	mov	r3, #0
   2f4d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2f4d8:	e24dd00c 	sub	sp, sp, #12
   2f4dc:	e59f0010 	ldr	r0, [pc, #16]	; 2f4f4 <CommandHandler::logDebugJson(char const*)+0x24>
   2f4e0:	e58d3000 	str	r3, [sp]
   2f4e4:	e1a02003 	mov	r2, r3
   2f4e8:	ebfffdc1 	bl	2ebf4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2f4ec:	e28dd00c 	add	sp, sp, #12
   2f4f0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2f4f4:	0003b8fc 	.word	0x0003b8fc

0002f4f8 <CommandHandler::logDebug(char const*, char const*, char const*)>:
   2f4f8:	e92d4030 	push	{r4, r5, lr}
   2f4fc:	e1a05000 	mov	r5, r0
   2f500:	e24ddd9e 	sub	sp, sp, #10112	; 0x2780
   2f504:	e24dd00c 	sub	sp, sp, #12
   2f508:	e28d3074 	add	r3, sp, #116	; 0x74
   2f50c:	e1a00002 	mov	r0, r2
   2f510:	e1a04001 	mov	r4, r1
   2f514:	e59f2100 	ldr	r2, [pc, #256]	; 2f61c <CommandHandler::logDebug(char const*, char const*, char const*)+0x124>
   2f518:	e1a01003 	mov	r1, r3
   2f51c:	e58d300c 	str	r3, [sp, #12]
   2f520:	eb00115f 	bl	33aa4 <jsonEscape>
   2f524:	e28d3b05 	add	r3, sp, #5120	; 0x1400
   2f528:	e2833008 	add	r3, r3, #8
   2f52c:	e243300c 	sub	r3, r3, #12
   2f530:	e1a00003 	mov	r0, r3
   2f534:	e59f20e0 	ldr	r2, [pc, #224]	; 2f61c <CommandHandler::logDebug(char const*, char const*, char const*)+0x124>
   2f538:	e59f10e0 	ldr	r1, [pc, #224]	; 2f620 <CommandHandler::logDebug(char const*, char const*, char const*)+0x128>
   2f53c:	e58d3008 	str	r3, [sp, #8]
   2f540:	ebfffaf1 	bl	2e10c <strlcpy>
   2f544:	e59d100c 	ldr	r1, [sp, #12]
   2f548:	e59f20cc 	ldr	r2, [pc, #204]	; 2f61c <CommandHandler::logDebug(char const*, char const*, char const*)+0x124>
   2f54c:	e59d0008 	ldr	r0, [sp, #8]
   2f550:	ebfffb09 	bl	2e17c <strlcat>
   2f554:	e59f20c0 	ldr	r2, [pc, #192]	; 2f61c <CommandHandler::logDebug(char const*, char const*, char const*)+0x124>
   2f558:	e59f10c4 	ldr	r1, [pc, #196]	; 2f624 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   2f55c:	e59d0008 	ldr	r0, [sp, #8]
   2f560:	ebfffb05 	bl	2e17c <strlcat>
   2f564:	e59f20b0 	ldr	r2, [pc, #176]	; 2f61c <CommandHandler::logDebug(char const*, char const*, char const*)+0x124>
   2f568:	e59f10b8 	ldr	r1, [pc, #184]	; 2f628 <CommandHandler::logDebug(char const*, char const*, char const*)+0x130>
   2f56c:	e59d0008 	ldr	r0, [sp, #8]
   2f570:	ebfffb01 	bl	2e17c <strlcat>
   2f574:	e1a01005 	mov	r1, r5
   2f578:	e59f209c 	ldr	r2, [pc, #156]	; 2f61c <CommandHandler::logDebug(char const*, char const*, char const*)+0x124>
   2f57c:	e59d0008 	ldr	r0, [sp, #8]
   2f580:	ebfffafd 	bl	2e17c <strlcat>
   2f584:	e59f2090 	ldr	r2, [pc, #144]	; 2f61c <CommandHandler::logDebug(char const*, char const*, char const*)+0x124>
   2f588:	e59f1094 	ldr	r1, [pc, #148]	; 2f624 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   2f58c:	e59d0008 	ldr	r0, [sp, #8]
   2f590:	ebfffaf9 	bl	2e17c <strlcat>
   2f594:	e59f2080 	ldr	r2, [pc, #128]	; 2f61c <CommandHandler::logDebug(char const*, char const*, char const*)+0x124>
   2f598:	e59f108c 	ldr	r1, [pc, #140]	; 2f62c <CommandHandler::logDebug(char const*, char const*, char const*)+0x134>
   2f59c:	e59d0008 	ldr	r0, [sp, #8]
   2f5a0:	ebfffaf5 	bl	2e17c <strlcat>
   2f5a4:	ebfffa9d 	bl	2e020 <micros>
   2f5a8:	e28d3010 	add	r3, sp, #16
   2f5ac:	e58d300c 	str	r3, [sp, #12]
   2f5b0:	e59f2078 	ldr	r2, [pc, #120]	; 2f630 <CommandHandler::logDebug(char const*, char const*, char const*)+0x138>
   2f5b4:	e1a03000 	mov	r3, r0
   2f5b8:	e3a01064 	mov	r1, #100	; 0x64
   2f5bc:	e58d4000 	str	r4, [sp]
   2f5c0:	e59d000c 	ldr	r0, [sp, #12]
   2f5c4:	ebfffb47 	bl	2e2e8 <snprintf>
   2f5c8:	e59d100c 	ldr	r1, [sp, #12]
   2f5cc:	e59f2048 	ldr	r2, [pc, #72]	; 2f61c <CommandHandler::logDebug(char const*, char const*, char const*)+0x124>
   2f5d0:	e59d0008 	ldr	r0, [sp, #8]
   2f5d4:	ebfffae8 	bl	2e17c <strlcat>
   2f5d8:	e59d0008 	ldr	r0, [sp, #8]
   2f5dc:	e59f2038 	ldr	r2, [pc, #56]	; 2f61c <CommandHandler::logDebug(char const*, char const*, char const*)+0x124>
   2f5e0:	e59f104c 	ldr	r1, [pc, #76]	; 2f634 <CommandHandler::logDebug(char const*, char const*, char const*)+0x13c>
   2f5e4:	ebfffae4 	bl	2e17c <strlcat>
   2f5e8:	e59f3048 	ldr	r3, [pc, #72]	; 2f638 <CommandHandler::logDebug(char const*, char const*, char const*)+0x140>
   2f5ec:	e5933000 	ldr	r3, [r3]
   2f5f0:	e3530000 	cmp	r3, #0
   2f5f4:	0a000005 	beq	2f610 <CommandHandler::logDebug(char const*, char const*, char const*)+0x118>
   2f5f8:	e3a03000 	mov	r3, #0
   2f5fc:	e59d1008 	ldr	r1, [sp, #8]
   2f600:	e58d3000 	str	r3, [sp]
   2f604:	e1a02003 	mov	r2, r3
   2f608:	e59f002c 	ldr	r0, [pc, #44]	; 2f63c <CommandHandler::logDebug(char const*, char const*, char const*)+0x144>
   2f60c:	ebfffd78 	bl	2ebf4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   2f610:	e28ddd9e 	add	sp, sp, #10112	; 0x2780
   2f614:	e28dd00c 	add	sp, sp, #12
   2f618:	e8bd8030 	pop	{r4, r5, pc}
   2f61c:	00001388 	.word	0x00001388
   2f620:	0003b8f4 	.word	0x0003b8f4
   2f624:	0003b900 	.word	0x0003b900
   2f628:	0003b904 	.word	0x0003b904
   2f62c:	0003b90c 	.word	0x0003b90c
   2f630:	0003b914 	.word	0x0003b914
   2f634:	0003b78c 	.word	0x0003b78c
   2f638:	0003e464 	.word	0x0003e464
   2f63c:	0003b8fc 	.word	0x0003b8fc

0002f640 <CommandHandler::service()>:
   2f640:	e92d4010 	push	{r4, lr}
   2f644:	e59028b8 	ldr	r2, [r0, #2232]	; 0x8b8
   2f648:	e59038bc 	ldr	r3, [r0, #2236]	; 0x8bc
   2f64c:	e24dd068 	sub	sp, sp, #104	; 0x68
   2f650:	e1520003 	cmp	r2, r3
   2f654:	e1a04000 	mov	r4, r0
   2f658:	0a000014 	beq	2f6b0 <CommandHandler::service()+0x70>
   2f65c:	e59038bc 	ldr	r3, [r0, #2236]	; 0x8bc
   2f660:	e59028bc 	ldr	r2, [r0, #2236]	; 0x8bc
   2f664:	e0803003 	add	r3, r0, r3
   2f668:	e2822001 	add	r2, r2, #1
   2f66c:	e5d338c4 	ldrb	r3, [r3, #2244]	; 0x8c4
   2f670:	e58028bc 	str	r2, [r0, #2236]	; 0x8bc
   2f674:	e59018bc 	ldr	r1, [r0, #2236]	; 0x8bc
   2f678:	e59028c0 	ldr	r2, [r0, #2240]	; 0x8c0
   2f67c:	e1510002 	cmp	r1, r2
   2f680:	23a02000 	movcs	r2, #0
   2f684:	e3a01064 	mov	r1, #100	; 0x64
   2f688:	258028bc 	strcs	r2, [r0, #2236]	; 0x8bc
   2f68c:	e59f2080 	ldr	r2, [pc, #128]	; 2f714 <CommandHandler::service()+0xd4>
   2f690:	e28d0004 	add	r0, sp, #4
   2f694:	ebfffb13 	bl	2e2e8 <snprintf>
   2f698:	e28d0004 	add	r0, sp, #4
   2f69c:	ebffe616 	bl	28efc <strlen>
   2f6a0:	e28d1004 	add	r1, sp, #4
   2f6a4:	e2802001 	add	r2, r0, #1
   2f6a8:	e1a00004 	mov	r0, r4
   2f6ac:	eb0001d4 	bl	2fe04 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>
   2f6b0:	e59438a8 	ldr	r3, [r4, #2216]	; 0x8a8
   2f6b4:	e3530000 	cmp	r3, #0
   2f6b8:	0a000005 	beq	2f6d4 <CommandHandler::service()+0x94>
   2f6bc:	ebfffa58 	bl	2e024 <millis>
   2f6c0:	e59f2050 	ldr	r2, [pc, #80]	; 2f718 <CommandHandler::service()+0xd8>
   2f6c4:	e59418f8 	ldr	r1, [r4, #2296]	; 0x8f8
   2f6c8:	ebfffa72 	bl	2e098 <isTimeout>
   2f6cc:	e3500000 	cmp	r0, #0
   2f6d0:	1a000001 	bne	2f6dc <CommandHandler::service()+0x9c>
   2f6d4:	e28dd068 	add	sp, sp, #104	; 0x68
   2f6d8:	e8bd8010 	pop	{r4, pc}
   2f6dc:	ebffd8da 	bl	25a4c <CLogger::Get()>
   2f6e0:	e59f3034 	ldr	r3, [pc, #52]	; 2f71c <CommandHandler::service()+0xdc>
   2f6e4:	e3a02004 	mov	r2, #4
   2f6e8:	e59f1030 	ldr	r1, [pc, #48]	; 2f720 <CommandHandler::service()+0xe0>
   2f6ec:	ebffd813 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2f6f0:	e59408a8 	ldr	r0, [r4, #2216]	; 0x8a8
   2f6f4:	e3500000 	cmp	r0, #0
   2f6f8:	0a000000 	beq	2f700 <CommandHandler::service()+0xc0>
   2f6fc:	ebffea04 	bl	29f14 <operator delete[](void*)>
   2f700:	e3a03000 	mov	r3, #0
   2f704:	e58438a8 	str	r3, [r4, #2216]	; 0x8a8
   2f708:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
   2f70c:	e28dd068 	add	sp, sp, #104	; 0x68
   2f710:	e8bd8010 	pop	{r4, pc}
   2f714:	0003b91c 	.word	0x0003b91c
   2f718:	00000bb8 	.word	0x00000bb8
   2f71c:	0003b93c 	.word	0x0003b93c
   2f720:	0003b6b4 	.word	0x0003b6b4

0002f724 <CommandHandler::fileReceiveCleardown()>:
   2f724:	e92d4010 	push	{r4, lr}
   2f728:	e1a04000 	mov	r4, r0
   2f72c:	e59008a8 	ldr	r0, [r0, #2216]	; 0x8a8
   2f730:	e3500000 	cmp	r0, #0
   2f734:	0a000000 	beq	2f73c <CommandHandler::fileReceiveCleardown()+0x18>
   2f738:	ebffe9f5 	bl	29f14 <operator delete[](void*)>
   2f73c:	e3a03000 	mov	r3, #0
   2f740:	e58438a8 	str	r3, [r4, #2216]	; 0x8a8
   2f744:	e58438ac 	str	r3, [r4, #2220]	; 0x8ac
   2f748:	e8bd8010 	pop	{r4, pc}

0002f74c <CommandHandler::~CommandHandler()>:
   2f74c:	e92d4010 	push	{r4, lr}
   2f750:	e1a04000 	mov	r4, r0
   2f754:	eb000001 	bl	2f760 <MiniHDLC::~MiniHDLC()>
   2f758:	e1a00004 	mov	r0, r4
   2f75c:	e8bd8010 	pop	{r4, pc}

0002f760 <MiniHDLC::~MiniHDLC()>:
   2f760:	e92d4010 	push	{r4, lr}
   2f764:	e1a04000 	mov	r4, r0
   2f768:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   2f76c:	e59f3024 	ldr	r3, [pc, #36]	; 2f798 <MiniHDLC::~MiniHDLC()+0x38>
   2f770:	e3500000 	cmp	r0, #0
   2f774:	e5843000 	str	r3, [r4]
   2f778:	0a000000 	beq	2f780 <MiniHDLC::~MiniHDLC()+0x20>
   2f77c:	ebffe9e4 	bl	29f14 <operator delete[](void*)>
   2f780:	e594001c 	ldr	r0, [r4, #28]
   2f784:	e3500000 	cmp	r0, #0
   2f788:	0a000000 	beq	2f790 <MiniHDLC::~MiniHDLC()+0x30>
   2f78c:	ebffe9e0 	bl	29f14 <operator delete[](void*)>
   2f790:	e1a00004 	mov	r0, r4
   2f794:	e8bd8010 	pop	{r4, pc}
   2f798:	0003b958 	.word	0x0003b958

0002f79c <MiniHDLC::~MiniHDLC()>:
   2f79c:	e92d4010 	push	{r4, lr}
   2f7a0:	e1a04000 	mov	r4, r0
   2f7a4:	ebffffed 	bl	2f760 <MiniHDLC::~MiniHDLC()>
   2f7a8:	e1a00004 	mov	r0, r4
   2f7ac:	e3a01048 	mov	r1, #72	; 0x48
   2f7b0:	ebffe9dd 	bl	29f2c <operator delete(void*, unsigned int)>
   2f7b4:	e1a00004 	mov	r0, r4
   2f7b8:	e8bd8010 	pop	{r4, pc}

0002f7bc <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), bool, bool)>:
   2f7bc:	e3a0c000 	mov	ip, #0
   2f7c0:	e92d4070 	push	{r4, r5, r6, lr}
   2f7c4:	e3a06ffa 	mov	r6, #1000	; 0x3e8
   2f7c8:	e3e05000 	mvn	r5, #0
   2f7cc:	e59fe068 	ldr	lr, [pc, #104]	; 2f83c <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), bool, bool)+0x80>
   2f7d0:	e5801020 	str	r1, [r0, #32]
   2f7d4:	e580e000 	str	lr, [r0]
   2f7d8:	e59f1060 	ldr	r1, [pc, #96]	; 2f840 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), bool, bool)+0x84>
   2f7dc:	e5dd4010 	ldrb	r4, [sp, #16]
   2f7e0:	e5dde014 	ldrb	lr, [sp, #20]
   2f7e4:	e5806028 	str	r6, [r0, #40]	; 0x28
   2f7e8:	e1c050bc 	strh	r5, [r0, #12]
   2f7ec:	e5c04005 	strb	r4, [r0, #5]
   2f7f0:	e5c0e004 	strb	lr, [r0, #4]
   2f7f4:	e580c038 	str	ip, [r0, #56]	; 0x38
   2f7f8:	e580c03c 	str	ip, [r0, #60]	; 0x3c
   2f7fc:	e580c040 	str	ip, [r0, #64]	; 0x40
   2f800:	e580c044 	str	ip, [r0, #68]	; 0x44
   2f804:	e580c008 	str	ip, [r0, #8]
   2f808:	e5c0c00e 	strb	ip, [r0, #14]
   2f80c:	e5c0c00f 	strb	ip, [r0, #15]
   2f810:	e5c0c010 	strb	ip, [r0, #16]
   2f814:	e580c014 	str	ip, [r0, #20]
   2f818:	e580c018 	str	ip, [r0, #24]
   2f81c:	e580c01c 	str	ip, [r0, #28]
   2f820:	e580c024 	str	ip, [r0, #36]	; 0x24
   2f824:	e580c02c 	str	ip, [r0, #44]	; 0x2c
   2f828:	e580c030 	str	ip, [r0, #48]	; 0x30
   2f82c:	e580c034 	str	ip, [r0, #52]	; 0x34
   2f830:	e581c000 	str	ip, [r1]
   2f834:	e5813004 	str	r3, [r1, #4]
   2f838:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f83c:	0003b958 	.word	0x0003b958
   2f840:	0003e514 	.word	0x0003e514

0002f844 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned long, unsigned long, bool, bool)>:
   2f844:	e92d4030 	push	{r4, r5, lr}
   2f848:	e3e04000 	mvn	r4, #0
   2f84c:	e3a0e000 	mov	lr, #0
   2f850:	e59f5068 	ldr	r5, [pc, #104]	; 2f8c0 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned long, unsigned long, bool, bool)+0x7c>
   2f854:	e5803028 	str	r3, [r0, #40]	; 0x28
   2f858:	e5dd3010 	ldrb	r3, [sp, #16]
   2f85c:	e5805000 	str	r5, [r0]
   2f860:	e1c040bc 	strh	r4, [r0, #12]
   2f864:	e5dd5014 	ldrb	r5, [sp, #20]
   2f868:	e59d400c 	ldr	r4, [sp, #12]
   2f86c:	e5c03005 	strb	r3, [r0, #5]
   2f870:	e59f304c 	ldr	r3, [pc, #76]	; 2f8c4 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned long, unsigned long, bool, bool)+0x80>
   2f874:	e5c05004 	strb	r5, [r0, #4]
   2f878:	e5804020 	str	r4, [r0, #32]
   2f87c:	e580e038 	str	lr, [r0, #56]	; 0x38
   2f880:	e580e03c 	str	lr, [r0, #60]	; 0x3c
   2f884:	e580e040 	str	lr, [r0, #64]	; 0x40
   2f888:	e580e044 	str	lr, [r0, #68]	; 0x44
   2f88c:	e580e008 	str	lr, [r0, #8]
   2f890:	e5c0e00e 	strb	lr, [r0, #14]
   2f894:	e5c0e00f 	strb	lr, [r0, #15]
   2f898:	e5c0e010 	strb	lr, [r0, #16]
   2f89c:	e580e014 	str	lr, [r0, #20]
   2f8a0:	e580e018 	str	lr, [r0, #24]
   2f8a4:	e580e01c 	str	lr, [r0, #28]
   2f8a8:	e580e024 	str	lr, [r0, #36]	; 0x24
   2f8ac:	e580e02c 	str	lr, [r0, #44]	; 0x2c
   2f8b0:	e580e030 	str	lr, [r0, #48]	; 0x30
   2f8b4:	e580e034 	str	lr, [r0, #52]	; 0x34
   2f8b8:	e8830006 	stm	r3, {r1, r2}
   2f8bc:	e8bd8030 	pop	{r4, r5, pc}
   2f8c0:	0003b958 	.word	0x0003b958
   2f8c4:	0003e514 	.word	0x0003e514

0002f8c8 <MiniHDLC::clear()>:
   2f8c8:	e3a03000 	mov	r3, #0
   2f8cc:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   2f8d0:	e3e0c000 	mvn	ip, #0
   2f8d4:	e59f1048 	ldr	r1, [pc, #72]	; 2f924 <MiniHDLC::clear()+0x5c>
   2f8d8:	e1c0c0bc 	strh	ip, [r0, #12]
   2f8dc:	e5c03005 	strb	r3, [r0, #5]
   2f8e0:	e5c03004 	strb	r3, [r0, #4]
   2f8e4:	e5803008 	str	r3, [r0, #8]
   2f8e8:	e5c0300e 	strb	r3, [r0, #14]
   2f8ec:	e5c0300f 	strb	r3, [r0, #15]
   2f8f0:	e5c03010 	strb	r3, [r0, #16]
   2f8f4:	e5803014 	str	r3, [r0, #20]
   2f8f8:	e5803018 	str	r3, [r0, #24]
   2f8fc:	e580301c 	str	r3, [r0, #28]
   2f900:	e5803024 	str	r3, [r0, #36]	; 0x24
   2f904:	e580302c 	str	r3, [r0, #44]	; 0x2c
   2f908:	e5803030 	str	r3, [r0, #48]	; 0x30
   2f90c:	e5803034 	str	r3, [r0, #52]	; 0x34
   2f910:	e5813004 	str	r3, [r1, #4]
   2f914:	e5813000 	str	r3, [r1]
   2f918:	e5802020 	str	r2, [r0, #32]
   2f91c:	e5802028 	str	r2, [r0, #40]	; 0x28
   2f920:	e12fff1e 	bx	lr
   2f924:	0003e514 	.word	0x0003e514

0002f928 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
   2f928:	e59f3014 	ldr	r3, [pc, #20]	; 2f944 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
   2f92c:	e0211420 	eor	r1, r1, r0, lsr #8
   2f930:	e0833081 	add	r3, r3, r1, lsl #1
   2f934:	e1d331b0 	ldrh	r3, [r3, #16]
   2f938:	e0230400 	eor	r0, r3, r0, lsl #8
   2f93c:	e6ff0070 	uxth	r0, r0
   2f940:	e12fff1e 	bx	lr
   2f944:	0003b950 	.word	0x0003b950

0002f948 <MiniHDLC::checkRxBufferAllocation(unsigned long)>:
   2f948:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   2f94c:	e2811001 	add	r1, r1, #1
   2f950:	e1510003 	cmp	r1, r3
   2f954:	9a00001c 	bls	2f9cc <MiniHDLC::checkRxBufferAllocation(unsigned long)+0x84>
   2f958:	e5903020 	ldr	r3, [r0, #32]
   2f95c:	e1510003 	cmp	r1, r3
   2f960:	9a000001 	bls	2f96c <MiniHDLC::checkRxBufferAllocation(unsigned long)+0x24>
   2f964:	e3a00002 	mov	r0, #2
   2f968:	e12fff1e 	bx	lr
   2f96c:	e3510b01 	cmp	r1, #1024	; 0x400
   2f970:	e92d4070 	push	{r4, r5, r6, lr}
   2f974:	93a04b01 	movls	r4, #1024	; 0x400
   2f978:	81a01a81 	lslhi	r1, r1, #21
   2f97c:	81a01aa1 	lsrhi	r1, r1, #21
   2f980:	82811001 	addhi	r1, r1, #1
   2f984:	e1a05000 	mov	r5, r0
   2f988:	81a04581 	lslhi	r4, r1, #11
   2f98c:	e1a00004 	mov	r0, r4
   2f990:	ebffe958 	bl	29ef8 <operator new[](unsigned int)>
   2f994:	e595101c 	ldr	r1, [r5, #28]
   2f998:	e1a06000 	mov	r6, r0
   2f99c:	e3510000 	cmp	r1, #0
   2f9a0:	0a000005 	beq	2f9bc <MiniHDLC::checkRxBufferAllocation(unsigned long)+0x74>
   2f9a4:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   2f9a8:	ebffe778 	bl	29790 <memcpy>
   2f9ac:	e595001c 	ldr	r0, [r5, #28]
   2f9b0:	e3500000 	cmp	r0, #0
   2f9b4:	0a000000 	beq	2f9bc <MiniHDLC::checkRxBufferAllocation(unsigned long)+0x74>
   2f9b8:	ebffe955 	bl	29f14 <operator delete[](void*)>
   2f9bc:	e585601c 	str	r6, [r5, #28]
   2f9c0:	e5854024 	str	r4, [r5, #36]	; 0x24
   2f9c4:	e3a00000 	mov	r0, #0
   2f9c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f9cc:	e3a00000 	mov	r0, #0
   2f9d0:	e12fff1e 	bx	lr

0002f9d4 <MiniHDLC::handleChar(unsigned char)>:
   2f9d4:	e35100e7 	cmp	r1, #231	; 0xe7
   2f9d8:	e92d4070 	push	{r4, r5, r6, lr}
   2f9dc:	e1a04000 	mov	r4, r0
   2f9e0:	0a00002e 	beq	2faa0 <MiniHDLC::handleChar(unsigned char)+0xcc>
   2f9e4:	e5d0300e 	ldrb	r3, [r0, #14]
   2f9e8:	e1a05001 	mov	r5, r1
   2f9ec:	e3530000 	cmp	r3, #0
   2f9f0:	1a000019 	bne	2fa5c <MiniHDLC::handleChar(unsigned char)+0x88>
   2f9f4:	e35100d7 	cmp	r1, #215	; 0xd7
   2f9f8:	0a000044 	beq	2fb10 <MiniHDLC::handleChar(unsigned char)+0x13c>
   2f9fc:	e5941008 	ldr	r1, [r4, #8]
   2fa00:	e1a00004 	mov	r0, r4
   2fa04:	ebffffcf 	bl	2f948 <MiniHDLC::checkRxBufferAllocation(unsigned long)>
   2fa08:	e3500000 	cmp	r0, #0
   2fa0c:	1a000016 	bne	2fa6c <MiniHDLC::handleChar(unsigned char)+0x98>
   2fa10:	e5943008 	ldr	r3, [r4, #8]
   2fa14:	e594201c 	ldr	r2, [r4, #28]
   2fa18:	e7c25003 	strb	r5, [r2, r3]
   2fa1c:	e5943008 	ldr	r3, [r4, #8]
   2fa20:	e3530001 	cmp	r3, #1
   2fa24:	da000009 	ble	2fa50 <MiniHDLC::handleChar(unsigned char)+0x7c>
   2fa28:	e594101c 	ldr	r1, [r4, #28]
   2fa2c:	e1d4c0bc 	ldrh	ip, [r4, #12]
   2fa30:	e0811003 	add	r1, r1, r3
   2fa34:	e5510002 	ldrb	r0, [r1, #-2]
   2fa38:	e59f1144 	ldr	r1, [pc, #324]	; 2fb84 <MiniHDLC::handleChar(unsigned char)+0x1b0>
   2fa3c:	e020042c 	eor	r0, r0, ip, lsr #8
   2fa40:	e0811080 	add	r1, r1, r0, lsl #1
   2fa44:	e1d121b0 	ldrh	r2, [r1, #16]
   2fa48:	e022240c 	eor	r2, r2, ip, lsl #8
   2fa4c:	e1c420bc 	strh	r2, [r4, #12]
   2fa50:	e2833001 	add	r3, r3, #1
   2fa54:	e5843008 	str	r3, [r4, #8]
   2fa58:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fa5c:	e3a03000 	mov	r3, #0
   2fa60:	e2215020 	eor	r5, r1, #32
   2fa64:	e5c0300e 	strb	r3, [r0, #14]
   2fa68:	eaffffe3 	b	2f9fc <MiniHDLC::handleChar(unsigned char)+0x28>
   2fa6c:	e3a01000 	mov	r1, #0
   2fa70:	e3e02000 	mvn	r2, #0
   2fa74:	e3500001 	cmp	r0, #1
   2fa78:	05943044 	ldreq	r3, [r4, #68]	; 0x44
   2fa7c:	15943040 	ldrne	r3, [r4, #64]	; 0x40
   2fa80:	02833001 	addeq	r3, r3, #1
   2fa84:	12833001 	addne	r3, r3, #1
   2fa88:	05841008 	streq	r1, [r4, #8]
   2fa8c:	05843044 	streq	r3, [r4, #68]	; 0x44
   2fa90:	15841008 	strne	r1, [r4, #8]
   2fa94:	15843040 	strne	r3, [r4, #64]	; 0x40
   2fa98:	e1c420bc 	strh	r2, [r4, #12]
   2fa9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2faa0:	e5901008 	ldr	r1, [r0, #8]
   2faa4:	e3510001 	cmp	r1, #1
   2faa8:	da00000f 	ble	2faec <MiniHDLC::handleChar(unsigned char)+0x118>
   2faac:	e590201c 	ldr	r2, [r0, #28]
   2fab0:	e5d03005 	ldrb	r3, [r0, #5]
   2fab4:	e0822001 	add	r2, r2, r1
   2fab8:	e3530000 	cmp	r3, #0
   2fabc:	e5520002 	ldrb	r0, [r2, #-2]
   2fac0:	e5523001 	ldrb	r3, [r2, #-1]
   2fac4:	e1d420bc 	ldrh	r2, [r4, #12]
   2fac8:	01803403 	orreq	r3, r0, r3, lsl #8
   2facc:	11833400 	orrne	r3, r3, r0, lsl #8
   2fad0:	e6bf3073 	sxth	r3, r3
   2fad4:	e6ff3073 	uxth	r3, r3
   2fad8:	e1520003 	cmp	r2, r3
   2fadc:	0a00000e 	beq	2fb1c <MiniHDLC::handleChar(unsigned char)+0x148>
   2fae0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   2fae4:	e2833001 	add	r3, r3, #1
   2fae8:	e584303c 	str	r3, [r4, #60]	; 0x3c
   2faec:	e3a02000 	mov	r2, #0
   2faf0:	e3e01000 	mvn	r1, #0
   2faf4:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   2faf8:	e5c4200e 	strb	r2, [r4, #14]
   2fafc:	e2833001 	add	r3, r3, #1
   2fb00:	e5843038 	str	r3, [r4, #56]	; 0x38
   2fb04:	e5842008 	str	r2, [r4, #8]
   2fb08:	e1c410bc 	strh	r1, [r4, #12]
   2fb0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fb10:	e3a03001 	mov	r3, #1
   2fb14:	e5c0300e 	strb	r3, [r0, #14]
   2fb18:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fb1c:	e2411002 	sub	r1, r1, #2
   2fb20:	e1a00004 	mov	r0, r4
   2fb24:	ebffff87 	bl	2f948 <MiniHDLC::checkRxBufferAllocation(unsigned long)>
   2fb28:	e3500000 	cmp	r0, #0
   2fb2c:	1a00000c 	bne	2fb64 <MiniHDLC::handleChar(unsigned char)+0x190>
   2fb30:	e594301c 	ldr	r3, [r4, #28]
   2fb34:	e5941008 	ldr	r1, [r4, #8]
   2fb38:	e59f2048 	ldr	r2, [pc, #72]	; 2fb88 <MiniHDLC::handleChar(unsigned char)+0x1b4>
   2fb3c:	e0833001 	add	r3, r3, r1
   2fb40:	e5430002 	strb	r0, [r3, #-2]
   2fb44:	e5923004 	ldr	r3, [r2, #4]
   2fb48:	e3530000 	cmp	r3, #0
   2fb4c:	0affffe6 	beq	2faec <MiniHDLC::handleChar(unsigned char)+0x118>
   2fb50:	e5941008 	ldr	r1, [r4, #8]
   2fb54:	e594001c 	ldr	r0, [r4, #28]
   2fb58:	e2411002 	sub	r1, r1, #2
   2fb5c:	e12fff33 	blx	r3
   2fb60:	eaffffe1 	b	2faec <MiniHDLC::handleChar(unsigned char)+0x118>
   2fb64:	e3500001 	cmp	r0, #1
   2fb68:	05943044 	ldreq	r3, [r4, #68]	; 0x44
   2fb6c:	15943040 	ldrne	r3, [r4, #64]	; 0x40
   2fb70:	02833001 	addeq	r3, r3, #1
   2fb74:	12833001 	addne	r3, r3, #1
   2fb78:	05843044 	streq	r3, [r4, #68]	; 0x44
   2fb7c:	15843040 	strne	r3, [r4, #64]	; 0x40
   2fb80:	eaffffd9 	b	2faec <MiniHDLC::handleChar(unsigned char)+0x118>
   2fb84:	0003b950 	.word	0x0003b950
   2fb88:	0003e514 	.word	0x0003e514

0002fb8c <MiniHDLC::handleBit(unsigned char)>:
   2fb8c:	e3510000 	cmp	r1, #0
   2fb90:	13e0307f 	mvnne	r3, #127	; 0x7f
   2fb94:	03a03000 	moveq	r3, #0
   2fb98:	e5d0100f 	ldrb	r1, [r0, #15]
   2fb9c:	e92d4010 	push	{r4, lr}
   2fba0:	e18310a1 	orr	r1, r3, r1, lsr #1
   2fba4:	e6ef1071 	uxtb	r1, r1
   2fba8:	e35100e7 	cmp	r1, #231	; 0xe7
   2fbac:	e1a04000 	mov	r4, r0
   2fbb0:	e5c0100f 	strb	r1, [r0, #15]
   2fbb4:	0a00000b 	beq	2fbe8 <MiniHDLC::handleBit(unsigned char)+0x5c>
   2fbb8:	e20110fc 	and	r1, r1, #252	; 0xfc
   2fbbc:	e351007c 	cmp	r1, #124	; 0x7c
   2fbc0:	08bd8010 	popeq	{r4, pc}
   2fbc4:	e5d01010 	ldrb	r1, [r0, #16]
   2fbc8:	e5902014 	ldr	r2, [r0, #20]
   2fbcc:	e18310a1 	orr	r1, r3, r1, lsr #1
   2fbd0:	e2823001 	add	r3, r2, #1
   2fbd4:	e6ef1071 	uxtb	r1, r1
   2fbd8:	e3530008 	cmp	r3, #8
   2fbdc:	e5c01010 	strb	r1, [r0, #16]
   2fbe0:	e5803014 	str	r3, [r0, #20]
   2fbe4:	18bd8010 	popne	{r4, pc}
   2fbe8:	ebffff79 	bl	2f9d4 <MiniHDLC::handleChar(unsigned char)>
   2fbec:	e3a03000 	mov	r3, #0
   2fbf0:	e5c43010 	strb	r3, [r4, #16]
   2fbf4:	e5843014 	str	r3, [r4, #20]
   2fbf8:	e8bd8010 	pop	{r4, pc}

0002fbfc <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)>:
   2fbfc:	e92d4070 	push	{r4, r5, r6, lr}
   2fc00:	e2525000 	subs	r5, r2, #0
   2fc04:	08bd8070 	popeq	{r4, r5, r6, pc}
   2fc08:	e1a06000 	mov	r6, r0
   2fc0c:	e1a04001 	mov	r4, r1
   2fc10:	e0815005 	add	r5, r1, r5
   2fc14:	e4d41001 	ldrb	r1, [r4], #1
   2fc18:	e1a00006 	mov	r0, r6
   2fc1c:	ebffff6c 	bl	2f9d4 <MiniHDLC::handleChar(unsigned char)>
   2fc20:	e1540005 	cmp	r4, r5
   2fc24:	1afffffa 	bne	2fc14 <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)+0x18>
   2fc28:	e8bd8070 	pop	{r4, r5, r6, pc}

0002fc2c <MiniHDLC::setFrameRxMaxLen(unsigned long)>:
   2fc2c:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   2fc30:	e1530001 	cmp	r3, r1
   2fc34:	95801020 	strls	r1, [r0, #32]
   2fc38:	e12fff1e 	bx	lr

0002fc3c <MiniHDLC::putCharToFrame(unsigned char)>:
   2fc3c:	e92d4030 	push	{r4, r5, lr}
   2fc40:	e590502c 	ldr	r5, [r0, #44]	; 0x2c
   2fc44:	e24dd00c 	sub	sp, sp, #12
   2fc48:	e3550000 	cmp	r5, #0
   2fc4c:	e1a04000 	mov	r4, r0
   2fc50:	0a000028 	beq	2fcf8 <MiniHDLC::putCharToFrame(unsigned char)+0xbc>
   2fc54:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   2fc58:	e5942028 	ldr	r2, [r4, #40]	; 0x28
   2fc5c:	e1530002 	cmp	r3, r2
   2fc60:	2a00001b 	bcs	2fcd4 <MiniHDLC::putCharToFrame(unsigned char)+0x98>
   2fc64:	e5d42004 	ldrb	r2, [r4, #4]
   2fc68:	e3520000 	cmp	r2, #0
   2fc6c:	1a000004 	bne	2fc84 <MiniHDLC::putCharToFrame(unsigned char)+0x48>
   2fc70:	e2832001 	add	r2, r3, #1
   2fc74:	e5842030 	str	r2, [r4, #48]	; 0x30
   2fc78:	e7c51003 	strb	r1, [r5, r3]
   2fc7c:	e28dd00c 	add	sp, sp, #12
   2fc80:	e8bd8030 	pop	{r4, r5, pc}
   2fc84:	e5942034 	ldr	r2, [r4, #52]	; 0x34
   2fc88:	e3520000 	cmp	r2, #0
   2fc8c:	0a000015 	beq	2fce8 <MiniHDLC::putCharToFrame(unsigned char)+0xac>
   2fc90:	e3510000 	cmp	r1, #0
   2fc94:	03a02000 	moveq	r2, #0
   2fc98:	13e0207f 	mvnne	r2, #127	; 0x7f
   2fc9c:	e7d51003 	ldrb	r1, [r5, r3]
   2fca0:	e18220a1 	orr	r2, r2, r1, lsr #1
   2fca4:	e7c52003 	strb	r2, [r5, r3]
   2fca8:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   2fcac:	e2833001 	add	r3, r3, #1
   2fcb0:	e3530008 	cmp	r3, #8
   2fcb4:	03a02000 	moveq	r2, #0
   2fcb8:	05943030 	ldreq	r3, [r4, #48]	; 0x30
   2fcbc:	15843034 	strne	r3, [r4, #52]	; 0x34
   2fcc0:	02833001 	addeq	r3, r3, #1
   2fcc4:	05842034 	streq	r2, [r4, #52]	; 0x34
   2fcc8:	05843030 	streq	r3, [r4, #48]	; 0x30
   2fccc:	e28dd00c 	add	sp, sp, #12
   2fcd0:	e8bd8030 	pop	{r4, r5, pc}
   2fcd4:	e3a03000 	mov	r3, #0
   2fcd8:	e5843030 	str	r3, [r4, #48]	; 0x30
   2fcdc:	e5843034 	str	r3, [r4, #52]	; 0x34
   2fce0:	e28dd00c 	add	sp, sp, #12
   2fce4:	e8bd8030 	pop	{r4, r5, pc}
   2fce8:	e3510000 	cmp	r1, #0
   2fcec:	13a01080 	movne	r1, #128	; 0x80
   2fcf0:	e7c51003 	strb	r1, [r5, r3]
   2fcf4:	eaffffeb 	b	2fca8 <MiniHDLC::putCharToFrame(unsigned char)+0x6c>
   2fcf8:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   2fcfc:	e58d1004 	str	r1, [sp, #4]
   2fd00:	ebffe87c 	bl	29ef8 <operator new[](unsigned int)>
   2fd04:	e5845030 	str	r5, [r4, #48]	; 0x30
   2fd08:	e5845034 	str	r5, [r4, #52]	; 0x34
   2fd0c:	e584002c 	str	r0, [r4, #44]	; 0x2c
   2fd10:	e1a05000 	mov	r5, r0
   2fd14:	e59d1004 	ldr	r1, [sp, #4]
   2fd18:	eaffffcd 	b	2fc54 <MiniHDLC::putCharToFrame(unsigned char)+0x18>

0002fd1c <MiniHDLC::sendChar(unsigned char)>:
   2fd1c:	e5d03004 	ldrb	r3, [r0, #4]
   2fd20:	e3530000 	cmp	r3, #0
   2fd24:	0a00000a 	beq	2fd54 <MiniHDLC::sendChar(unsigned char)+0x38>
   2fd28:	e92d4070 	push	{r4, r5, r6, lr}
   2fd2c:	e1a06000 	mov	r6, r0
   2fd30:	e1a04001 	mov	r4, r1
   2fd34:	e3a05008 	mov	r5, #8
   2fd38:	e2041001 	and	r1, r4, #1
   2fd3c:	e1a00006 	mov	r0, r6
   2fd40:	ebffffbd 	bl	2fc3c <MiniHDLC::putCharToFrame(unsigned char)>
   2fd44:	e2555001 	subs	r5, r5, #1
   2fd48:	e1a040a4 	lsr	r4, r4, #1
   2fd4c:	1afffff9 	bne	2fd38 <MiniHDLC::sendChar(unsigned char)+0x1c>
   2fd50:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fd54:	eaffffb8 	b	2fc3c <MiniHDLC::putCharToFrame(unsigned char)>

0002fd58 <MiniHDLC::sendCharWithStuffing(unsigned char)>:
   2fd58:	e5d03004 	ldrb	r3, [r0, #4]
   2fd5c:	e3530000 	cmp	r3, #0
   2fd60:	0a000019 	beq	2fdcc <MiniHDLC::sendCharWithStuffing(unsigned char)+0x74>
   2fd64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2fd68:	e1a07000 	mov	r7, r0
   2fd6c:	e1a05001 	mov	r5, r1
   2fd70:	e3a06008 	mov	r6, #8
   2fd74:	e3a08000 	mov	r8, #0
   2fd78:	e2054001 	and	r4, r5, #1
   2fd7c:	e1a01004 	mov	r1, r4
   2fd80:	e1a00007 	mov	r0, r7
   2fd84:	ebffffac 	bl	2fc3c <MiniHDLC::putCharToFrame(unsigned char)>
   2fd88:	e3540000 	cmp	r4, #0
   2fd8c:	05874018 	streq	r4, [r7, #24]
   2fd90:	0a000004 	beq	2fda8 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x50>
   2fd94:	e5973018 	ldr	r3, [r7, #24]
   2fd98:	e2833001 	add	r3, r3, #1
   2fd9c:	e3530005 	cmp	r3, #5
   2fda0:	e5873018 	str	r3, [r7, #24]
   2fda4:	0a000003 	beq	2fdb8 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x60>
   2fda8:	e2566001 	subs	r6, r6, #1
   2fdac:	e1a050a5 	lsr	r5, r5, #1
   2fdb0:	1afffff0 	bne	2fd78 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x20>
   2fdb4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2fdb8:	e1a01008 	mov	r1, r8
   2fdbc:	e1a00007 	mov	r0, r7
   2fdc0:	ebffff9d 	bl	2fc3c <MiniHDLC::putCharToFrame(unsigned char)>
   2fdc4:	e5878018 	str	r8, [r7, #24]
   2fdc8:	eafffff6 	b	2fda8 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x50>
   2fdcc:	eaffffd2 	b	2fd1c <MiniHDLC::sendChar(unsigned char)>

0002fdd0 <MiniHDLC::sendEscaped(unsigned char)>:
   2fdd0:	e2813029 	add	r3, r1, #41	; 0x29
   2fdd4:	e31300ef 	tst	r3, #239	; 0xef
   2fdd8:	e92d4070 	push	{r4, r5, r6, lr}
   2fddc:	e1a04001 	mov	r4, r1
   2fde0:	e1a05000 	mov	r5, r0
   2fde4:	1a000002 	bne	2fdf4 <MiniHDLC::sendEscaped(unsigned char)+0x24>
   2fde8:	e3a010d7 	mov	r1, #215	; 0xd7
   2fdec:	ebffffd9 	bl	2fd58 <MiniHDLC::sendCharWithStuffing(unsigned char)>
   2fdf0:	e2244020 	eor	r4, r4, #32
   2fdf4:	e1a01004 	mov	r1, r4
   2fdf8:	e1a00005 	mov	r0, r5
   2fdfc:	e8bd4070 	pop	{r4, r5, r6, lr}
   2fe00:	eaffffd4 	b	2fd58 <MiniHDLC::sendCharWithStuffing(unsigned char)>

0002fe04 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>:
   2fe04:	e3a03000 	mov	r3, #0
   2fe08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2fe0c:	e1a08002 	mov	r8, r2
   2fe10:	e1a05001 	mov	r5, r1
   2fe14:	e5803030 	str	r3, [r0, #48]	; 0x30
   2fe18:	e5803034 	str	r3, [r0, #52]	; 0x34
   2fe1c:	e3a010e7 	mov	r1, #231	; 0xe7
   2fe20:	e1a06000 	mov	r6, r0
   2fe24:	ebffffbc 	bl	2fd1c <MiniHDLC::sendChar(unsigned char)>
   2fe28:	e3580000 	cmp	r8, #0
   2fe2c:	0a00002a 	beq	2fedc <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xd8>
   2fe30:	e59fc0b0 	ldr	ip, [pc, #176]	; 2fee8 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xe4>
   2fe34:	e59f70b0 	ldr	r7, [pc, #176]	; 2feec <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xe8>
   2fe38:	e4d51001 	ldrb	r1, [r5], #1
   2fe3c:	e1a00006 	mov	r0, r6
   2fe40:	e021342c 	eor	r3, r1, ip, lsr #8
   2fe44:	e0873083 	add	r3, r7, r3, lsl #1
   2fe48:	e1d341b0 	ldrh	r4, [r3, #16]
   2fe4c:	e024440c 	eor	r4, r4, ip, lsl #8
   2fe50:	e6bf4074 	sxth	r4, r4
   2fe54:	ebffffdd 	bl	2fdd0 <MiniHDLC::sendEscaped(unsigned char)>
   2fe58:	e2588001 	subs	r8, r8, #1
   2fe5c:	e6ffc074 	uxth	ip, r4
   2fe60:	1afffff4 	bne	2fe38 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0x34>
   2fe64:	e6ef1074 	uxtb	r1, r4
   2fe68:	e1a0c42c 	lsr	ip, ip, #8
   2fe6c:	e5d63005 	ldrb	r3, [r6, #5]
   2fe70:	e1a00006 	mov	r0, r6
   2fe74:	e3530000 	cmp	r3, #0
   2fe78:	11a05001 	movne	r5, r1
   2fe7c:	01a0500c 	moveq	r5, ip
   2fe80:	11a0100c 	movne	r1, ip
   2fe84:	ebffffd1 	bl	2fdd0 <MiniHDLC::sendEscaped(unsigned char)>
   2fe88:	e1a01005 	mov	r1, r5
   2fe8c:	e1a00006 	mov	r0, r6
   2fe90:	ebffffce 	bl	2fdd0 <MiniHDLC::sendEscaped(unsigned char)>
   2fe94:	e3a010e7 	mov	r1, #231	; 0xe7
   2fe98:	e1a00006 	mov	r0, r6
   2fe9c:	ebffff9e 	bl	2fd1c <MiniHDLC::sendChar(unsigned char)>
   2fea0:	e59f3048 	ldr	r3, [pc, #72]	; 2fef0 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xec>
   2fea4:	e5933000 	ldr	r3, [r3]
   2fea8:	e3530000 	cmp	r3, #0
   2feac:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2feb0:	e596002c 	ldr	r0, [r6, #44]	; 0x2c
   2feb4:	e3500000 	cmp	r0, #0
   2feb8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2febc:	e5961030 	ldr	r1, [r6, #48]	; 0x30
   2fec0:	e3510000 	cmp	r1, #0
   2fec4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2fec8:	e12fff33 	blx	r3
   2fecc:	e3a03000 	mov	r3, #0
   2fed0:	e5863030 	str	r3, [r6, #48]	; 0x30
   2fed4:	e5863034 	str	r3, [r6, #52]	; 0x34
   2fed8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2fedc:	e3a0c0ff 	mov	ip, #255	; 0xff
   2fee0:	e1a0100c 	mov	r1, ip
   2fee4:	eaffffe0 	b	2fe6c <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0x68>
   2fee8:	0000ffff 	.word	0x0000ffff
   2feec:	0003b950 	.word	0x0003b950
   2fef0:	0003e514 	.word	0x0003e514

0002fef4 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>:
   2fef4:	e3510000 	cmp	r1, #0
   2fef8:	0a00000c 	beq	2ff30 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x3c>
   2fefc:	e1a02000 	mov	r2, r0
   2ff00:	e59fc030 	ldr	ip, [pc, #48]	; 2ff38 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x44>
   2ff04:	e59f0030 	ldr	r0, [pc, #48]	; 2ff3c <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x48>
   2ff08:	e0821001 	add	r1, r2, r1
   2ff0c:	e4d23001 	ldrb	r3, [r2], #1
   2ff10:	e0233420 	eor	r3, r3, r0, lsr #8
   2ff14:	e08c3083 	add	r3, ip, r3, lsl #1
   2ff18:	e1d331b0 	ldrh	r3, [r3, #16]
   2ff1c:	e1510002 	cmp	r1, r2
   2ff20:	e0230400 	eor	r0, r3, r0, lsl #8
   2ff24:	e6ff0070 	uxth	r0, r0
   2ff28:	1afffff7 	bne	2ff0c <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x18>
   2ff2c:	e12fff1e 	bx	lr
   2ff30:	e59f0004 	ldr	r0, [pc, #4]	; 2ff3c <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x48>
   2ff34:	e12fff1e 	bx	lr
   2ff38:	0003b950 	.word	0x0003b950
   2ff3c:	0000ffff 	.word	0x0000ffff

0002ff40 <CHTTPBootServer::CHTTPBootServer(CNetSubSystem*, unsigned short, unsigned int, CSocket*)>:
   2ff40:	e92d4070 	push	{r4, r5, r6, lr}
   2ff44:	e1a04000 	mov	r4, r0
   2ff48:	e24dd008 	sub	sp, sp, #8
   2ff4c:	e1a06002 	mov	r6, r2
   2ff50:	e1a05003 	mov	r5, r3
   2ff54:	e58d2000 	str	r2, [sp]
   2ff58:	e58d3004 	str	r3, [sp, #4]
   2ff5c:	e59d2018 	ldr	r2, [sp, #24]
   2ff60:	e3a03efa 	mov	r3, #4000	; 0xfa0
   2ff64:	eb00028a 	bl	30994 <CHTTPDaemon::CHTTPDaemon(CNetSubSystem*, CSocket*, unsigned int, unsigned short, unsigned int)>
   2ff68:	e1a00004 	mov	r0, r4
   2ff6c:	e2843a01 	add	r3, r4, #4096	; 0x1000
   2ff70:	e59f1014 	ldr	r1, [pc, #20]	; 2ff8c <CHTTPBootServer::CHTTPBootServer(CNetSubSystem*, unsigned short, unsigned int, CSocket*)+0x4c>
   2ff74:	e2832e97 	add	r2, r3, #2416	; 0x970
   2ff78:	e5841000 	str	r1, [r4]
   2ff7c:	e1c260b0 	strh	r6, [r2]
   2ff80:	e5835974 	str	r5, [r3, #2420]	; 0x974
   2ff84:	e28dd008 	add	sp, sp, #8
   2ff88:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ff8c:	0003c3f8 	.word	0x0003c3f8

0002ff90 <CHTTPBootServer::~CHTTPBootServer()>:
   2ff90:	e92d4010 	push	{r4, lr}
   2ff94:	e1a04000 	mov	r4, r0
   2ff98:	e59f300c 	ldr	r3, [pc, #12]	; 2ffac <CHTTPBootServer::~CHTTPBootServer()+0x1c>
   2ff9c:	e5803000 	str	r3, [r0]
   2ffa0:	eb00029a 	bl	30a10 <CHTTPDaemon::~CHTTPDaemon()>
   2ffa4:	e1a00004 	mov	r0, r4
   2ffa8:	e8bd8010 	pop	{r4, pc}
   2ffac:	0003c3f8 	.word	0x0003c3f8

0002ffb0 <CHTTPBootServer::~CHTTPBootServer()>:
   2ffb0:	e92d4010 	push	{r4, lr}
   2ffb4:	e1a04000 	mov	r4, r0
   2ffb8:	e59f3018 	ldr	r3, [pc, #24]	; 2ffd8 <CHTTPBootServer::~CHTTPBootServer()+0x28>
   2ffbc:	e5803000 	str	r3, [r0]
   2ffc0:	eb000292 	bl	30a10 <CHTTPDaemon::~CHTTPDaemon()>
   2ffc4:	e1a00004 	mov	r0, r4
   2ffc8:	e59f100c 	ldr	r1, [pc, #12]	; 2ffdc <CHTTPBootServer::~CHTTPBootServer()+0x2c>
   2ffcc:	ebffe7d6 	bl	29f2c <operator delete(void*, unsigned int)>
   2ffd0:	e1a00004 	mov	r0, r4
   2ffd4:	e8bd8010 	pop	{r4, pc}
   2ffd8:	0003c3f8 	.word	0x0003c3f8
   2ffdc:	00001978 	.word	0x00001978

0002ffe0 <CHTTPBootServer::CreateWorker(CNetSubSystem*, CSocket*)>:
   2ffe0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2ffe4:	e1a04000 	mov	r4, r0
   2ffe8:	e24dd008 	sub	sp, sp, #8
   2ffec:	e59f0058 	ldr	r0, [pc, #88]	; 3004c <CHTTPBootServer::CreateWorker(CNetSubSystem*, CSocket*)+0x6c>
   2fff0:	e1a08002 	mov	r8, r2
   2fff4:	e1a07001 	mov	r7, r1
   2fff8:	ebffe7bd 	bl	29ef4 <operator new(unsigned int)>
   2fffc:	e1a05000 	mov	r5, r0
   30000:	e2843a01 	add	r3, r4, #4096	; 0x1000
   30004:	e2832e97 	add	r2, r3, #2416	; 0x970
   30008:	e1d260b0 	ldrh	r6, [r2]
   3000c:	e5934974 	ldr	r4, [r3, #2420]	; 0x974
   30010:	e1a02008 	mov	r2, r8
   30014:	e1a01007 	mov	r1, r7
   30018:	e58d6000 	str	r6, [sp]
   3001c:	e58d4004 	str	r4, [sp, #4]
   30020:	e3a03efa 	mov	r3, #4000	; 0xfa0
   30024:	eb00025a 	bl	30994 <CHTTPDaemon::CHTTPDaemon(CNetSubSystem*, CSocket*, unsigned int, unsigned short, unsigned int)>
   30028:	e1a00005 	mov	r0, r5
   3002c:	e2853a01 	add	r3, r5, #4096	; 0x1000
   30030:	e59f1018 	ldr	r1, [pc, #24]	; 30050 <CHTTPBootServer::CreateWorker(CNetSubSystem*, CSocket*)+0x70>
   30034:	e2832e97 	add	r2, r3, #2416	; 0x970
   30038:	e5851000 	str	r1, [r5]
   3003c:	e1c260b0 	strh	r6, [r2]
   30040:	e5834974 	str	r4, [r3, #2420]	; 0x974
   30044:	e28dd008 	add	sp, sp, #8
   30048:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3004c:	00001978 	.word	0x00001978
   30050:	0003c3f8 	.word	0x0003c3f8

00030054 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)>:
   30054:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   30058:	e2517000 	subs	r7, r1, #0
   3005c:	e24dd028 	sub	sp, sp, #40	; 0x28
   30060:	e59d5044 	ldr	r5, [sp, #68]	; 0x44
   30064:	e59d6048 	ldr	r6, [sp, #72]	; 0x48
   30068:	0a00008d 	beq	302a4 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x250>
   3006c:	e3560000 	cmp	r6, #0
   30070:	0a000090 	beq	302b8 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x264>
   30074:	e59f42c8 	ldr	r4, [pc, #712]	; 30344 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2f0>
   30078:	e1a08000 	mov	r8, r0
   3007c:	e28d0018 	add	r0, sp, #24
   30080:	ebffda57 	bl	269e4 <CString::CString()>
   30084:	e2841008 	add	r1, r4, #8
   30088:	e1a00007 	mov	r0, r7
   3008c:	ebffe3a4 	bl	28f24 <strcmp>
   30090:	e3500000 	cmp	r0, #0
   30094:	1a00005e 	bne	30214 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x1c0>
   30098:	e1a00008 	mov	r0, r8
   3009c:	e28d3014 	add	r3, sp, #20
   300a0:	e28d2010 	add	r2, sp, #16
   300a4:	e28d100c 	add	r1, sp, #12
   300a8:	eb000440 	bl	311b0 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)>
   300ac:	e3500000 	cmp	r0, #0
   300b0:	1a000028 	bne	30158 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x104>
   300b4:	e59f428c 	ldr	r4, [pc, #652]	; 30348 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2f4>
   300b8:	ebffd95d 	bl	26634 <CMachineInfo::Get()>
   300bc:	ebffd870 	bl	26284 <CMachineInfo::GetMachineName() const>
   300c0:	e59f8284 	ldr	r8, [pc, #644]	; 3034c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2f8>
   300c4:	e1a02004 	mov	r2, r4
   300c8:	e288300c 	add	r3, r8, #12
   300cc:	e2481d27 	sub	r1, r8, #2496	; 0x9c0
   300d0:	e58d0000 	str	r0, [sp]
   300d4:	e28d0018 	add	r0, sp, #24
   300d8:	ebffdf84 	bl	27ef0 <CString::Format(char const*, ...)>
   300dc:	e28d0018 	add	r0, sp, #24
   300e0:	ebffda55 	bl	26a3c <CString::operator char const*() const>
   300e4:	e1a04000 	mov	r4, r0
   300e8:	e28d0018 	add	r0, sp, #24
   300ec:	ebffda80 	bl	26af4 <CString::GetLength() const>
   300f0:	e1a07000 	mov	r7, r0
   300f4:	e2888014 	add	r8, r8, #20
   300f8:	e5868000 	str	r8, [r6]
   300fc:	e3550000 	cmp	r5, #0
   30100:	0a000071 	beq	302cc <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x278>
   30104:	e5953000 	ldr	r3, [r5]
   30108:	e1570003 	cmp	r7, r3
   3010c:	8a000051 	bhi	30258 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x204>
   30110:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
   30114:	e3530000 	cmp	r3, #0
   30118:	0a00006f 	beq	302dc <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x288>
   3011c:	e3540000 	cmp	r4, #0
   30120:	0a00007d 	beq	3031c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2c8>
   30124:	e3570000 	cmp	r7, #0
   30128:	0a000080 	beq	30330 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2dc>
   3012c:	e1a01004 	mov	r1, r4
   30130:	e3a040c8 	mov	r4, #200	; 0xc8
   30134:	e1a02007 	mov	r2, r7
   30138:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
   3013c:	ebffe593 	bl	29790 <memcpy>
   30140:	e5857000 	str	r7, [r5]
   30144:	e28d0018 	add	r0, sp, #24
   30148:	ebffd9f2 	bl	26918 <CString::~CString()>
   3014c:	e1a00004 	mov	r0, r4
   30150:	e28dd028 	add	sp, sp, #40	; 0x28
   30154:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   30158:	e59d000c 	ldr	r0, [sp, #12]
   3015c:	e3500000 	cmp	r0, #0
   30160:	0a000062 	beq	302f0 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x29c>
   30164:	e59f11e4 	ldr	r1, [pc, #484]	; 30350 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2fc>
   30168:	ebffe460 	bl	292f0 <strstr>
   3016c:	e3500000 	cmp	r0, #0
   30170:	0a000036 	beq	30250 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x1fc>
   30174:	e59f11d8 	ldr	r1, [pc, #472]	; 30354 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x300>
   30178:	e59d000c 	ldr	r0, [sp, #12]
   3017c:	ebffe45b 	bl	292f0 <strstr>
   30180:	e3500000 	cmp	r0, #0
   30184:	0a000031 	beq	30250 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x1fc>
   30188:	e59f41c8 	ldr	r4, [pc, #456]	; 30358 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x304>
   3018c:	e59d000c 	ldr	r0, [sp, #12]
   30190:	e2841004 	add	r1, r4, #4
   30194:	ebffe455 	bl	292f0 <strstr>
   30198:	e3500000 	cmp	r0, #0
   3019c:	0a00002b 	beq	30250 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x1fc>
   301a0:	e59d0014 	ldr	r0, [sp, #20]
   301a4:	e3500000 	cmp	r0, #0
   301a8:	0a000028 	beq	30250 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x1fc>
   301ac:	ebffe751 	bl	29ef8 <operator new[](unsigned int)>
   301b0:	e59d1010 	ldr	r1, [sp, #16]
   301b4:	e1a07000 	mov	r7, r0
   301b8:	e3510000 	cmp	r1, #0
   301bc:	0a000050 	beq	30304 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2b0>
   301c0:	e59d2014 	ldr	r2, [sp, #20]
   301c4:	ebffe571 	bl	29790 <memcpy>
   301c8:	e59d1014 	ldr	r1, [sp, #20]
   301cc:	e1a00007 	mov	r0, r7
   301d0:	ebffff47 	bl	2fef4 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>
   301d4:	e1a08000 	mov	r8, r0
   301d8:	ebffd61b 	bl	25a4c <CLogger::Get()>
   301dc:	e59d3014 	ldr	r3, [sp, #20]
   301e0:	e3a02004 	mov	r2, #4
   301e4:	e2441f43 	sub	r1, r4, #268	; 0x10c
   301e8:	e88d0108 	stm	sp, {r3, r8}
   301ec:	e284301c 	add	r3, r4, #28
   301f0:	ebffd552 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   301f4:	ebffcc73 	bl	233c8 <CScheduler::Get()>
   301f8:	e3a01005 	mov	r1, #5
   301fc:	ebffcc37 	bl	232e0 <CScheduler::Sleep(unsigned int)>
   30200:	e1a00007 	mov	r0, r7
   30204:	e59d1014 	ldr	r1, [sp, #20]
   30208:	ebffe637 	bl	29aec <EnableChainBoot>
   3020c:	e244408c 	sub	r4, r4, #140	; 0x8c
   30210:	eaffffa8 	b	300b8 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x64>
   30214:	e284100c 	add	r1, r4, #12
   30218:	e1a00007 	mov	r0, r7
   3021c:	ebffe340 	bl	28f24 <strcmp>
   30220:	e3500000 	cmp	r0, #0
   30224:	0affff9b 	beq	30098 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x44>
   30228:	e2841f52 	add	r1, r4, #328	; 0x148
   3022c:	e1a00007 	mov	r0, r7
   30230:	ebffe33b 	bl	28f24 <strcmp>
   30234:	e3500000 	cmp	r0, #0
   30238:	1a00000e 	bne	30278 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x224>
   3023c:	e28440b4 	add	r4, r4, #180	; 0xb4
   30240:	e5864000 	str	r4, [r6]
   30244:	e3a07f5d 	mov	r7, #372	; 0x174
   30248:	e59f410c 	ldr	r4, [pc, #268]	; 3035c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x308>
   3024c:	eaffffaa 	b	300fc <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0xa8>
   30250:	e59f4108 	ldr	r4, [pc, #264]	; 30360 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x30c>
   30254:	eaffff97 	b	300b8 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x64>
   30258:	ebffd5fb 	bl	25a4c <CLogger::Get()>
   3025c:	e59f3100 	ldr	r3, [pc, #256]	; 30364 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x310>
   30260:	e58d7000 	str	r7, [sp]
   30264:	e2431f6b 	sub	r1, r3, #428	; 0x1ac
   30268:	e3a02001 	mov	r2, #1
   3026c:	ebffd533 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30270:	e3a04f7d 	mov	r4, #500	; 0x1f4
   30274:	eaffffb2 	b	30144 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0xf0>
   30278:	e1a00007 	mov	r0, r7
   3027c:	e28410c0 	add	r1, r4, #192	; 0xc0
   30280:	ebffe327 	bl	28f24 <strcmp>
   30284:	e3500000 	cmp	r0, #0
   30288:	1a000021 	bne	30314 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x2c0>
   3028c:	e28430d0 	add	r3, r4, #208	; 0xd0
   30290:	e2444d15 	sub	r4, r4, #1344	; 0x540
   30294:	e59f70cc 	ldr	r7, [pc, #204]	; 30368 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x314>
   30298:	e5863000 	str	r3, [r6]
   3029c:	e2844004 	add	r4, r4, #4
   302a0:	eaffff95 	b	300fc <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0xa8>
   302a4:	e59f00c0 	ldr	r0, [pc, #192]	; 3036c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x318>
   302a8:	e3a02049 	mov	r2, #73	; 0x49
   302ac:	e2801004 	add	r1, r0, #4
   302b0:	e2800018 	add	r0, r0, #24
   302b4:	ebffccf1 	bl	23680 <assertion_failed>
   302b8:	e59f00ac 	ldr	r0, [pc, #172]	; 3036c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x318>
   302bc:	e3a0204a 	mov	r2, #74	; 0x4a
   302c0:	e2801004 	add	r1, r0, #4
   302c4:	e2800024 	add	r0, r0, #36	; 0x24
   302c8:	ebffccec 	bl	23680 <assertion_failed>
   302cc:	e59f109c 	ldr	r1, [pc, #156]	; 30370 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x31c>
   302d0:	e3a02098 	mov	r2, #152	; 0x98
   302d4:	e2810f43 	add	r0, r1, #268	; 0x10c
   302d8:	ebffcce8 	bl	23680 <assertion_failed>
   302dc:	e59f0088 	ldr	r0, [pc, #136]	; 3036c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x318>
   302e0:	e3a020a1 	mov	r2, #161	; 0xa1
   302e4:	e2801004 	add	r1, r0, #4
   302e8:	e2800f53 	add	r0, r0, #332	; 0x14c
   302ec:	ebffcce3 	bl	23680 <assertion_failed>
   302f0:	e59f0074 	ldr	r0, [pc, #116]	; 3036c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x318>
   302f4:	e3a0205a 	mov	r2, #90	; 0x5a
   302f8:	e2801004 	add	r1, r0, #4
   302fc:	e2800048 	add	r0, r0, #72	; 0x48
   30300:	ebffccde 	bl	23680 <assertion_failed>
   30304:	e3a02063 	mov	r2, #99	; 0x63
   30308:	e244107c 	sub	r1, r4, #124	; 0x7c
   3030c:	e284000c 	add	r0, r4, #12
   30310:	ebffccda 	bl	23680 <assertion_failed>
   30314:	e3a04f65 	mov	r4, #404	; 0x194
   30318:	eaffff89 	b	30144 <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0xf0>
   3031c:	e59f0048 	ldr	r0, [pc, #72]	; 3036c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x318>
   30320:	e3a020a2 	mov	r2, #162	; 0xa2
   30324:	e2801004 	add	r1, r0, #4
   30328:	e2800f57 	add	r0, r0, #348	; 0x15c
   3032c:	ebffccd3 	bl	23680 <assertion_failed>
   30330:	e59f0034 	ldr	r0, [pc, #52]	; 3036c <CHTTPBootServer::GetContent(char const*, char const*, char const*, unsigned char*, unsigned int*, char const**)+0x318>
   30334:	e3a020a3 	mov	r2, #163	; 0xa3
   30338:	e2801004 	add	r1, r0, #4
   3033c:	e2800f5b 	add	r0, r0, #364	; 0x16c
   30340:	ebffccce 	bl	23680 <assertion_failed>
   30344:	0003c4a0 	.word	0x0003c4a0
   30348:	0003c41c 	.word	0x0003c41c
   3034c:	0003c520 	.word	0x0003c520
   30350:	0003c4cc 	.word	0x0003c4cc
   30354:	0003c4e0 	.word	0x0003c4e0
   30358:	0003c4f0 	.word	0x0003c4f0
   3035c:	0003bdec 	.word	0x0003bdec
   30360:	0003c40c 	.word	0x0003c40c
   30364:	0003c590 	.word	0x0003c590
   30368:	0000047e 	.word	0x0000047e
   3036c:	0003c470 	.word	0x0003c470
   30370:	0003c474 	.word	0x0003c474

00030374 <CTFTPBootServer::FileOpen(char const*)>:
   30374:	e3a00000 	mov	r0, #0
   30378:	e12fff1e 	bx	lr

0003037c <CTFTPBootServer::FileRead(void*, unsigned int)>:
   3037c:	e3e00000 	mvn	r0, #0
   30380:	e12fff1e 	bx	lr

00030384 <CTFTPBootServer::~CTFTPBootServer()>:
   30384:	e5d020ec 	ldrb	r2, [r0, #236]	; 0xec
   30388:	e59f3048 	ldr	r3, [pc, #72]	; 303d8 <CTFTPBootServer::~CTFTPBootServer()+0x54>
   3038c:	e3520000 	cmp	r2, #0
   30390:	e92d4010 	push	{r4, lr}
   30394:	e5803000 	str	r3, [r0]
   30398:	1a00000a 	bne	303c8 <CTFTPBootServer::~CTFTPBootServer()+0x44>
   3039c:	e1a04000 	mov	r4, r0
   303a0:	e59000f0 	ldr	r0, [r0, #240]	; 0xf0
   303a4:	e3500000 	cmp	r0, #0
   303a8:	0a000000 	beq	303b0 <CTFTPBootServer::~CTFTPBootServer()+0x2c>
   303ac:	ebffe6d8 	bl	29f14 <operator delete[](void*)>
   303b0:	e3a03000 	mov	r3, #0
   303b4:	e1a00004 	mov	r0, r4
   303b8:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   303bc:	eb00058e 	bl	319fc <CTFTPDaemon::~CTFTPDaemon()>
   303c0:	e1a00004 	mov	r0, r4
   303c4:	e8bd8010 	pop	{r4, pc}
   303c8:	e3a02026 	mov	r2, #38	; 0x26
   303cc:	e59f1008 	ldr	r1, [pc, #8]	; 303dc <CTFTPBootServer::~CTFTPBootServer()+0x58>
   303d0:	e59f0008 	ldr	r0, [pc, #8]	; 303e0 <CTFTPBootServer::~CTFTPBootServer()+0x5c>
   303d4:	ebffcca9 	bl	23680 <assertion_failed>
   303d8:	0003c5fc 	.word	0x0003c5fc
   303dc:	0003c638 	.word	0x0003c638
   303e0:	0003c64c 	.word	0x0003c64c

000303e4 <CTFTPBootServer::~CTFTPBootServer()>:
   303e4:	e92d4010 	push	{r4, lr}
   303e8:	e1a04000 	mov	r4, r0
   303ec:	ebffffe4 	bl	30384 <CTFTPBootServer::~CTFTPBootServer()>
   303f0:	e1a00004 	mov	r0, r4
   303f4:	e3a010f8 	mov	r1, #248	; 0xf8
   303f8:	ebffe6cb 	bl	29f2c <operator delete(void*, unsigned int)>
   303fc:	e1a00004 	mov	r0, r4
   30400:	e8bd8010 	pop	{r4, pc}

00030404 <CTFTPBootServer::FileCreate(char const*)>:
   30404:	e5d030ec 	ldrb	r3, [r0, #236]	; 0xec
   30408:	e3530000 	cmp	r3, #0
   3040c:	1a000027 	bne	304b0 <CTFTPBootServer::FileCreate(char const*)+0xac>
   30410:	e92d4030 	push	{r4, r5, lr}
   30414:	e3510000 	cmp	r1, #0
   30418:	e24dd00c 	sub	sp, sp, #12
   3041c:	e1a04001 	mov	r4, r1
   30420:	e1a05000 	mov	r5, r0
   30424:	0a000023 	beq	304b8 <CTFTPBootServer::FileCreate(char const*)+0xb4>
   30428:	e3a02006 	mov	r2, #6
   3042c:	e59f10b4 	ldr	r1, [pc, #180]	; 304e8 <CTFTPBootServer::FileCreate(char const*)+0xe4>
   30430:	e1a00004 	mov	r0, r4
   30434:	ebffe309 	bl	29060 <strncmp>
   30438:	e3500000 	cmp	r0, #0
   3043c:	0a000002 	beq	3044c <CTFTPBootServer::FileCreate(char const*)+0x48>
   30440:	e3a00000 	mov	r0, #0
   30444:	e28dd00c 	add	sp, sp, #12
   30448:	e8bd8030 	pop	{r4, r5, pc}
   3044c:	e1a00004 	mov	r0, r4
   30450:	ebffe2a9 	bl	28efc <strlen>
   30454:	e3500005 	cmp	r0, #5
   30458:	9a00001a 	bls	304c8 <CTFTPBootServer::FileCreate(char const*)+0xc4>
   3045c:	e2400004 	sub	r0, r0, #4
   30460:	e0840000 	add	r0, r4, r0
   30464:	e59f1080 	ldr	r1, [pc, #128]	; 304ec <CTFTPBootServer::FileCreate(char const*)+0xe8>
   30468:	ebffe2ad 	bl	28f24 <strcmp>
   3046c:	e3500000 	cmp	r0, #0
   30470:	1afffff2 	bne	30440 <CTFTPBootServer::FileCreate(char const*)+0x3c>
   30474:	ebffd574 	bl	25a4c <CLogger::Get()>
   30478:	e59f3070 	ldr	r3, [pc, #112]	; 304f0 <CTFTPBootServer::FileCreate(char const*)+0xec>
   3047c:	e58d4000 	str	r4, [sp]
   30480:	e3a02004 	mov	r2, #4
   30484:	e59f1068 	ldr	r1, [pc, #104]	; 304f4 <CTFTPBootServer::FileCreate(char const*)+0xf0>
   30488:	ebffd4ac 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3048c:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
   30490:	e3530000 	cmp	r3, #0
   30494:	0a00000f 	beq	304d8 <CTFTPBootServer::FileCreate(char const*)+0xd4>
   30498:	e3a03001 	mov	r3, #1
   3049c:	e3a02000 	mov	r2, #0
   304a0:	e1a00003 	mov	r0, r3
   304a4:	e5c530ec 	strb	r3, [r5, #236]	; 0xec
   304a8:	e58520f4 	str	r2, [r5, #244]	; 0xf4
   304ac:	eaffffe4 	b	30444 <CTFTPBootServer::FileCreate(char const*)+0x40>
   304b0:	e3a00000 	mov	r0, #0
   304b4:	e12fff1e 	bx	lr
   304b8:	e3a02038 	mov	r2, #56	; 0x38
   304bc:	e59f1034 	ldr	r1, [pc, #52]	; 304f8 <CTFTPBootServer::FileCreate(char const*)+0xf4>
   304c0:	e59f0034 	ldr	r0, [pc, #52]	; 304fc <CTFTPBootServer::FileCreate(char const*)+0xf8>
   304c4:	ebffcc6d 	bl	23680 <assertion_failed>
   304c8:	e3a02042 	mov	r2, #66	; 0x42
   304cc:	e59f1024 	ldr	r1, [pc, #36]	; 304f8 <CTFTPBootServer::FileCreate(char const*)+0xf4>
   304d0:	e59f0028 	ldr	r0, [pc, #40]	; 30500 <CTFTPBootServer::FileCreate(char const*)+0xfc>
   304d4:	ebffcc69 	bl	23680 <assertion_failed>
   304d8:	e59500e8 	ldr	r0, [r5, #232]	; 0xe8
   304dc:	ebffe685 	bl	29ef8 <operator new[](unsigned int)>
   304e0:	e58500f0 	str	r0, [r5, #240]	; 0xf0
   304e4:	eaffffeb 	b	30498 <CTFTPBootServer::FileCreate(char const*)+0x94>
   304e8:	0003c61c 	.word	0x0003c61c
   304ec:	0003c624 	.word	0x0003c624
   304f0:	0003c684 	.word	0x0003c684
   304f4:	0003c62c 	.word	0x0003c62c
   304f8:	0003c638 	.word	0x0003c638
   304fc:	0003c65c 	.word	0x0003c65c
   30500:	0003c66c 	.word	0x0003c66c

00030504 <CTFTPBootServer::FileClose()>:
   30504:	e92d4010 	push	{r4, lr}
   30508:	e5d030ec 	ldrb	r3, [r0, #236]	; 0xec
   3050c:	e24dd008 	sub	sp, sp, #8
   30510:	e3530000 	cmp	r3, #0
   30514:	0a000011 	beq	30560 <CTFTPBootServer::FileClose()+0x5c>
   30518:	e1a04000 	mov	r4, r0
   3051c:	ebffd54a 	bl	25a4c <CLogger::Get()>
   30520:	e59420f4 	ldr	r2, [r4, #244]	; 0xf4
   30524:	e59f3044 	ldr	r3, [pc, #68]	; 30570 <CTFTPBootServer::FileClose()+0x6c>
   30528:	e58d2000 	str	r2, [sp]
   3052c:	e59f1040 	ldr	r1, [pc, #64]	; 30574 <CTFTPBootServer::FileClose()+0x70>
   30530:	e3a02004 	mov	r2, #4
   30534:	ebffd481 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30538:	e3a03000 	mov	r3, #0
   3053c:	e59410f4 	ldr	r1, [r4, #244]	; 0xf4
   30540:	e5c430ec 	strb	r3, [r4, #236]	; 0xec
   30544:	e1510003 	cmp	r1, r3
   30548:	0a000001 	beq	30554 <CTFTPBootServer::FileClose()+0x50>
   3054c:	e59400f0 	ldr	r0, [r4, #240]	; 0xf0
   30550:	ebffe565 	bl	29aec <EnableChainBoot>
   30554:	e3a00001 	mov	r0, #1
   30558:	e28dd008 	add	sp, sp, #8
   3055c:	e8bd8010 	pop	{r4, pc}
   30560:	e3a0205b 	mov	r2, #91	; 0x5b
   30564:	e59f100c 	ldr	r1, [pc, #12]	; 30578 <CTFTPBootServer::FileClose()+0x74>
   30568:	e59f000c 	ldr	r0, [pc, #12]	; 3057c <CTFTPBootServer::FileClose()+0x78>
   3056c:	ebffcc43 	bl	23680 <assertion_failed>
   30570:	0003c6a4 	.word	0x0003c6a4
   30574:	0003c62c 	.word	0x0003c62c
   30578:	0003c638 	.word	0x0003c638
   3057c:	0003c698 	.word	0x0003c698

00030580 <CTFTPBootServer::FileWrite(void const*, unsigned int)>:
   30580:	e5d030ec 	ldrb	r3, [r0, #236]	; 0xec
   30584:	e92d4070 	push	{r4, r5, r6, lr}
   30588:	e3530000 	cmp	r3, #0
   3058c:	0a000010 	beq	305d4 <CTFTPBootServer::FileWrite(void const*, unsigned int)+0x54>
   30590:	e59030f4 	ldr	r3, [r0, #244]	; 0xf4
   30594:	e590c0e8 	ldr	ip, [r0, #232]	; 0xe8
   30598:	e083e002 	add	lr, r3, r2
   3059c:	e15e000c 	cmp	lr, ip
   305a0:	e1a04000 	mov	r4, r0
   305a4:	e1a05002 	mov	r5, r2
   305a8:	8a000011 	bhi	305f4 <CTFTPBootServer::FileWrite(void const*, unsigned int)+0x74>
   305ac:	e3510000 	cmp	r1, #0
   305b0:	0a00000b 	beq	305e4 <CTFTPBootServer::FileWrite(void const*, unsigned int)+0x64>
   305b4:	e59400f0 	ldr	r0, [r4, #240]	; 0xf0
   305b8:	e0800003 	add	r0, r0, r3
   305bc:	ebffe473 	bl	29790 <memcpy>
   305c0:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   305c4:	e1a00005 	mov	r0, r5
   305c8:	e0835005 	add	r5, r3, r5
   305cc:	e58450f4 	str	r5, [r4, #244]	; 0xf4
   305d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   305d4:	e3a02070 	mov	r2, #112	; 0x70
   305d8:	e59f1024 	ldr	r1, [pc, #36]	; 30604 <CTFTPBootServer::FileWrite(void const*, unsigned int)+0x84>
   305dc:	e59f0024 	ldr	r0, [pc, #36]	; 30608 <CTFTPBootServer::FileWrite(void const*, unsigned int)+0x88>
   305e0:	ebffcc26 	bl	23680 <assertion_failed>
   305e4:	e3a02079 	mov	r2, #121	; 0x79
   305e8:	e59f1014 	ldr	r1, [pc, #20]	; 30604 <CTFTPBootServer::FileWrite(void const*, unsigned int)+0x84>
   305ec:	e59f0018 	ldr	r0, [pc, #24]	; 3060c <CTFTPBootServer::FileWrite(void const*, unsigned int)+0x8c>
   305f0:	ebffcc22 	bl	23680 <assertion_failed>
   305f4:	e3a03000 	mov	r3, #0
   305f8:	e3e00000 	mvn	r0, #0
   305fc:	e5c430ec 	strb	r3, [r4, #236]	; 0xec
   30600:	e8bd8070 	pop	{r4, r5, r6, pc}
   30604:	0003c638 	.word	0x0003c638
   30608:	0003c698 	.word	0x0003c698
   3060c:	00036138 	.word	0x00036138

00030610 <CTFTPBootServer::CTFTPBootServer(CNetSubSystem*, unsigned int)>:
   30610:	e92d4070 	push	{r4, r5, r6, lr}
   30614:	e1a04000 	mov	r4, r0
   30618:	e1a05002 	mov	r5, r2
   3061c:	eb0004e8 	bl	319c4 <CTFTPDaemon::CTFTPDaemon(CNetSubSystem*)>
   30620:	e3a03000 	mov	r3, #0
   30624:	e59f1014 	ldr	r1, [pc, #20]	; 30640 <CTFTPBootServer::CTFTPBootServer(CNetSubSystem*, unsigned int)+0x30>
   30628:	e58450e8 	str	r5, [r4, #232]	; 0xe8
   3062c:	e5841000 	str	r1, [r4]
   30630:	e5c430ec 	strb	r3, [r4, #236]	; 0xec
   30634:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   30638:	e1a00004 	mov	r0, r4
   3063c:	e8bd8070 	pop	{r4, r5, r6, pc}
   30640:	0003c5fc 	.word	0x0003c5fc

00030644 <__aeabi_uidiv>:
   30644:	e2512001 	subs	r2, r1, #1
   30648:	012fff1e 	bxeq	lr
   3064c:	3a000036 	bcc	3072c <__aeabi_uidiv+0xe8>
   30650:	e1500001 	cmp	r0, r1
   30654:	9a000022 	bls	306e4 <__aeabi_uidiv+0xa0>
   30658:	e1110002 	tst	r1, r2
   3065c:	0a000023 	beq	306f0 <__aeabi_uidiv+0xac>
   30660:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   30664:	01a01181 	lsleq	r1, r1, #3
   30668:	03a03008 	moveq	r3, #8
   3066c:	13a03001 	movne	r3, #1
   30670:	e3510201 	cmp	r1, #268435456	; 0x10000000
   30674:	31510000 	cmpcc	r1, r0
   30678:	31a01201 	lslcc	r1, r1, #4
   3067c:	31a03203 	lslcc	r3, r3, #4
   30680:	3afffffa 	bcc	30670 <__aeabi_uidiv+0x2c>
   30684:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   30688:	31510000 	cmpcc	r1, r0
   3068c:	31a01081 	lslcc	r1, r1, #1
   30690:	31a03083 	lslcc	r3, r3, #1
   30694:	3afffffa 	bcc	30684 <__aeabi_uidiv+0x40>
   30698:	e3a02000 	mov	r2, #0
   3069c:	e1500001 	cmp	r0, r1
   306a0:	20400001 	subcs	r0, r0, r1
   306a4:	21822003 	orrcs	r2, r2, r3
   306a8:	e15000a1 	cmp	r0, r1, lsr #1
   306ac:	204000a1 	subcs	r0, r0, r1, lsr #1
   306b0:	218220a3 	orrcs	r2, r2, r3, lsr #1
   306b4:	e1500121 	cmp	r0, r1, lsr #2
   306b8:	20400121 	subcs	r0, r0, r1, lsr #2
   306bc:	21822123 	orrcs	r2, r2, r3, lsr #2
   306c0:	e15001a1 	cmp	r0, r1, lsr #3
   306c4:	204001a1 	subcs	r0, r0, r1, lsr #3
   306c8:	218221a3 	orrcs	r2, r2, r3, lsr #3
   306cc:	e3500000 	cmp	r0, #0
   306d0:	11b03223 	lsrsne	r3, r3, #4
   306d4:	11a01221 	lsrne	r1, r1, #4
   306d8:	1affffef 	bne	3069c <__aeabi_uidiv+0x58>
   306dc:	e1a00002 	mov	r0, r2
   306e0:	e12fff1e 	bx	lr
   306e4:	03a00001 	moveq	r0, #1
   306e8:	13a00000 	movne	r0, #0
   306ec:	e12fff1e 	bx	lr
   306f0:	e3510801 	cmp	r1, #65536	; 0x10000
   306f4:	21a01821 	lsrcs	r1, r1, #16
   306f8:	23a02010 	movcs	r2, #16
   306fc:	33a02000 	movcc	r2, #0
   30700:	e3510c01 	cmp	r1, #256	; 0x100
   30704:	21a01421 	lsrcs	r1, r1, #8
   30708:	22822008 	addcs	r2, r2, #8
   3070c:	e3510010 	cmp	r1, #16
   30710:	21a01221 	lsrcs	r1, r1, #4
   30714:	22822004 	addcs	r2, r2, #4
   30718:	e3510004 	cmp	r1, #4
   3071c:	82822003 	addhi	r2, r2, #3
   30720:	908220a1 	addls	r2, r2, r1, lsr #1
   30724:	e1a00230 	lsr	r0, r0, r2
   30728:	e12fff1e 	bx	lr
   3072c:	e3500000 	cmp	r0, #0
   30730:	13e00000 	mvnne	r0, #0
   30734:	ea000007 	b	30758 <__aeabi_idiv0>

00030738 <__aeabi_uidivmod>:
   30738:	e3510000 	cmp	r1, #0
   3073c:	0afffffa 	beq	3072c <__aeabi_uidiv+0xe8>
   30740:	e92d4003 	push	{r0, r1, lr}
   30744:	ebffffbe 	bl	30644 <__aeabi_uidiv>
   30748:	e8bd4006 	pop	{r1, r2, lr}
   3074c:	e0030092 	mul	r3, r2, r0
   30750:	e0411003 	sub	r1, r1, r3
   30754:	e12fff1e 	bx	lr

00030758 <__aeabi_idiv0>:
   30758:	e12fff1e 	bx	lr

0003075c <__aeabi_uldivmod>:
   3075c:	e3530000 	cmp	r3, #0
   30760:	03520000 	cmpeq	r2, #0
   30764:	1a000004 	bne	3077c <__aeabi_uldivmod+0x20>
   30768:	e3510000 	cmp	r1, #0
   3076c:	03500000 	cmpeq	r0, #0
   30770:	13e01000 	mvnne	r1, #0
   30774:	13e00000 	mvnne	r0, #0
   30778:	eafffff6 	b	30758 <__aeabi_idiv0>
   3077c:	e24dd008 	sub	sp, sp, #8
   30780:	e92d6000 	push	{sp, lr}
   30784:	eb000003 	bl	30798 <__udivmoddi4>
   30788:	e59de004 	ldr	lr, [sp, #4]
   3078c:	e28dd008 	add	sp, sp, #8
   30790:	e8bd000c 	pop	{r2, r3}
   30794:	e12fff1e 	bx	lr

00030798 <__udivmoddi4>:
   30798:	e1510003 	cmp	r1, r3
   3079c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   307a0:	01500002 	cmpeq	r0, r2
   307a4:	e1a04000 	mov	r4, r0
   307a8:	e1a05001 	mov	r5, r1
   307ac:	e59da028 	ldr	sl, [sp, #40]	; 0x28
   307b0:	33a00000 	movcc	r0, #0
   307b4:	33a01000 	movcc	r1, #0
   307b8:	3a00003d 	bcc	308b4 <__udivmoddi4+0x11c>
   307bc:	e1a00002 	mov	r0, r2
   307c0:	e1a01003 	mov	r1, r3
   307c4:	e1a08002 	mov	r8, r2
   307c8:	e1a09003 	mov	r9, r3
   307cc:	eb00003c 	bl	308c4 <__clzdi2>
   307d0:	e1a01005 	mov	r1, r5
   307d4:	e1a0b000 	mov	fp, r0
   307d8:	e1a00004 	mov	r0, r4
   307dc:	eb000038 	bl	308c4 <__clzdi2>
   307e0:	e04bb000 	sub	fp, fp, r0
   307e4:	e24b2020 	sub	r2, fp, #32
   307e8:	e1a07b19 	lsl	r7, r9, fp
   307ec:	e1877218 	orr	r7, r7, r8, lsl r2
   307f0:	e26bc020 	rsb	ip, fp, #32
   307f4:	e1877c38 	orr	r7, r7, r8, lsr ip
   307f8:	e1550007 	cmp	r5, r7
   307fc:	e1a06b18 	lsl	r6, r8, fp
   30800:	01540006 	cmpeq	r4, r6
   30804:	33a00000 	movcc	r0, #0
   30808:	33a01000 	movcc	r1, #0
   3080c:	3a000005 	bcc	30828 <__udivmoddi4+0x90>
   30810:	e3a0e001 	mov	lr, #1
   30814:	e0544006 	subs	r4, r4, r6
   30818:	e1a0121e 	lsl	r1, lr, r2
   3081c:	e1811c3e 	orr	r1, r1, lr, lsr ip
   30820:	e0c55007 	sbc	r5, r5, r7
   30824:	e1a00b1e 	lsl	r0, lr, fp
   30828:	e35b0000 	cmp	fp, #0
   3082c:	0a000020 	beq	308b4 <__udivmoddi4+0x11c>
   30830:	e1b070a7 	lsrs	r7, r7, #1
   30834:	e1a06066 	rrx	r6, r6
   30838:	e1a0e00b 	mov	lr, fp
   3083c:	ea000007 	b	30860 <__udivmoddi4+0xc8>
   30840:	e0544006 	subs	r4, r4, r6
   30844:	e0c55007 	sbc	r5, r5, r7
   30848:	e0944004 	adds	r4, r4, r4
   3084c:	e0a55005 	adc	r5, r5, r5
   30850:	e2944001 	adds	r4, r4, #1
   30854:	e2a55000 	adc	r5, r5, #0
   30858:	e25ee001 	subs	lr, lr, #1
   3085c:	0a000006 	beq	3087c <__udivmoddi4+0xe4>
   30860:	e1550007 	cmp	r5, r7
   30864:	01540006 	cmpeq	r4, r6
   30868:	2afffff4 	bcs	30840 <__udivmoddi4+0xa8>
   3086c:	e0944004 	adds	r4, r4, r4
   30870:	e0a55005 	adc	r5, r5, r5
   30874:	e25ee001 	subs	lr, lr, #1
   30878:	1afffff8 	bne	30860 <__udivmoddi4+0xc8>
   3087c:	e1a0eb34 	lsr	lr, r4, fp
   30880:	e18eec15 	orr	lr, lr, r5, lsl ip
   30884:	e18ee235 	orr	lr, lr, r5, lsr r2
   30888:	e0906004 	adds	r6, r0, r4
   3088c:	e1a0400e 	mov	r4, lr
   30890:	e0a17005 	adc	r7, r1, r5
   30894:	e1a01b35 	lsr	r1, r5, fp
   30898:	e1a05001 	mov	r5, r1
   3089c:	e1a01b11 	lsl	r1, r1, fp
   308a0:	e181121e 	orr	r1, r1, lr, lsl r2
   308a4:	e1a00b1e 	lsl	r0, lr, fp
   308a8:	e1811c3e 	orr	r1, r1, lr, lsr ip
   308ac:	e0560000 	subs	r0, r6, r0
   308b0:	e0c71001 	sbc	r1, r7, r1
   308b4:	e35a0000 	cmp	sl, #0
   308b8:	188a0030 	stmne	sl, {r4, r5}
   308bc:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   308c0:	e12fff1e 	bx	lr

000308c4 <__clzdi2>:
   308c4:	e92d4010 	push	{r4, lr}
   308c8:	e3510000 	cmp	r1, #0
   308cc:	1a000002 	bne	308dc <__clzdi2+0x18>
   308d0:	eb000005 	bl	308ec <__clzsi2>
   308d4:	e2800020 	add	r0, r0, #32
   308d8:	ea000001 	b	308e4 <__clzdi2+0x20>
   308dc:	e1a00001 	mov	r0, r1
   308e0:	eb000001 	bl	308ec <__clzsi2>
   308e4:	e8bd4010 	pop	{r4, lr}
   308e8:	e12fff1e 	bx	lr

000308ec <__clzsi2>:
   308ec:	e3a0101c 	mov	r1, #28
   308f0:	e3500801 	cmp	r0, #65536	; 0x10000
   308f4:	21a00820 	lsrcs	r0, r0, #16
   308f8:	22411010 	subcs	r1, r1, #16
   308fc:	e3500c01 	cmp	r0, #256	; 0x100
   30900:	21a00420 	lsrcs	r0, r0, #8
   30904:	22411008 	subcs	r1, r1, #8
   30908:	e3500010 	cmp	r0, #16
   3090c:	21a00220 	lsrcs	r0, r0, #4
   30910:	22411004 	subcs	r1, r1, #4
   30914:	e28f2008 	add	r2, pc, #8
   30918:	e7d20000 	ldrb	r0, [r2, r0]
   3091c:	e0800001 	add	r0, r0, r1
   30920:	e12fff1e 	bx	lr
   30924:	02020304 	.word	0x02020304
   30928:	01010101 	.word	0x01010101
	...

00030934 <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.2]>:
   30934:	e1530001 	cmp	r3, r1
   30938:	8a000013 	bhi	3098c <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.2]+0x58>
   3093c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   30940:	e1a05001 	mov	r5, r1
   30944:	e1a06003 	mov	r6, r3
   30948:	e1a07002 	mov	r7, r2
   3094c:	e1a04000 	mov	r4, r0
   30950:	ea000002 	b	30960 <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.2]+0x2c>
   30954:	e1560005 	cmp	r6, r5
   30958:	e2844001 	add	r4, r4, #1
   3095c:	8a000008 	bhi	30984 <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.2]+0x50>
   30960:	e1a02006 	mov	r2, r6
   30964:	e1a01007 	mov	r1, r7
   30968:	e1a00004 	mov	r0, r4
   3096c:	ebffe14b 	bl	28ea0 <memcmp>
   30970:	e3500000 	cmp	r0, #0
   30974:	e2455001 	sub	r5, r5, #1
   30978:	1afffff5 	bne	30954 <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.2]+0x20>
   3097c:	e1a00004 	mov	r0, r4
   30980:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   30984:	e3a00000 	mov	r0, #0
   30988:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3098c:	e3a00000 	mov	r0, #0
   30990:	e12fff1e 	bx	lr

00030994 <CHTTPDaemon::CHTTPDaemon(CNetSubSystem*, CSocket*, unsigned int, unsigned short, unsigned int)>:
   30994:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   30998:	e1a07001 	mov	r7, r1
   3099c:	e3a01902 	mov	r1, #32768	; 0x8000
   309a0:	e1a04000 	mov	r4, r0
   309a4:	e1a05003 	mov	r5, r3
   309a8:	e1a09002 	mov	r9, r2
   309ac:	e1dd82b0 	ldrh	r8, [sp, #32]
   309b0:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   309b4:	ebffc8e0 	bl	22d3c <CTask::CTask(unsigned int)>
   309b8:	e3a00000 	mov	r0, #0
   309bc:	e59f3044 	ldr	r3, [pc, #68]	; 30a08 <CHTTPDaemon::CHTTPDaemon(CNetSubSystem*, CSocket*, unsigned int, unsigned short, unsigned int)+0x74>
   309c0:	e59f2044 	ldr	r2, [pc, #68]	; 30a0c <CHTTPDaemon::CHTTPDaemon(CNetSubSystem*, CSocket*, unsigned int, unsigned short, unsigned int)+0x78>
   309c4:	e5931000 	ldr	r1, [r3]
   309c8:	e1550000 	cmp	r5, r0
   309cc:	e2811001 	add	r1, r1, #1
   309d0:	e5842000 	str	r2, [r4]
   309d4:	e58470dc 	str	r7, [r4, #220]	; 0xdc
   309d8:	e58490e0 	str	r9, [r4, #224]	; 0xe0
   309dc:	e58450e4 	str	r5, [r4, #228]	; 0xe4
   309e0:	e1c48eb8 	strh	r8, [r4, #232]	; 0xe8
   309e4:	e58460ec 	str	r6, [r4, #236]	; 0xec
   309e8:	e58400f0 	str	r0, [r4, #240]	; 0xf0
   309ec:	e5831000 	str	r1, [r3]
   309f0:	0a000002 	beq	30a00 <CHTTPDaemon::CHTTPDaemon(CNetSubSystem*, CSocket*, unsigned int, unsigned short, unsigned int)+0x6c>
   309f4:	e1a00005 	mov	r0, r5
   309f8:	ebffe53e 	bl	29ef8 <operator new[](unsigned int)>
   309fc:	e58400f0 	str	r0, [r4, #240]	; 0xf0
   30a00:	e1a00004 	mov	r0, r4
   30a04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   30a08:	0003e51c 	.word	0x0003e51c
   30a0c:	0003c6c0 	.word	0x0003c6c0

00030a10 <CHTTPDaemon::~CHTTPDaemon()>:
   30a10:	e92d4070 	push	{r4, r5, r6, lr}
   30a14:	e59050e0 	ldr	r5, [r0, #224]	; 0xe0
   30a18:	e59f3050 	ldr	r3, [pc, #80]	; 30a70 <CHTTPDaemon::~CHTTPDaemon()+0x60>
   30a1c:	e3550000 	cmp	r5, #0
   30a20:	e5803000 	str	r3, [r0]
   30a24:	1a00000d 	bne	30a60 <CHTTPDaemon::~CHTTPDaemon()+0x50>
   30a28:	e1a04000 	mov	r4, r0
   30a2c:	e3a01001 	mov	r1, #1
   30a30:	e59000f0 	ldr	r0, [r0, #240]	; 0xf0
   30a34:	ebffe53c 	bl	29f2c <operator delete(void*, unsigned int)>
   30a38:	e59f2034 	ldr	r2, [pc, #52]	; 30a74 <CHTTPDaemon::~CHTTPDaemon()+0x64>
   30a3c:	e58450f0 	str	r5, [r4, #240]	; 0xf0
   30a40:	e5923000 	ldr	r3, [r2]
   30a44:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   30a48:	e2433001 	sub	r3, r3, #1
   30a4c:	e1a00004 	mov	r0, r4
   30a50:	e5823000 	str	r3, [r2]
   30a54:	ebffc865 	bl	22bf0 <CTask::~CTask()>
   30a58:	e1a00004 	mov	r0, r4
   30a5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   30a60:	e3a02040 	mov	r2, #64	; 0x40
   30a64:	e59f100c 	ldr	r1, [pc, #12]	; 30a78 <CHTTPDaemon::~CHTTPDaemon()+0x68>
   30a68:	e59f000c 	ldr	r0, [pc, #12]	; 30a7c <CHTTPDaemon::~CHTTPDaemon()+0x6c>
   30a6c:	ebffcb03 	bl	23680 <assertion_failed>
   30a70:	0003c6c0 	.word	0x0003c6c0
   30a74:	0003e51c 	.word	0x0003e51c
   30a78:	0003c6e8 	.word	0x0003c6e8
   30a7c:	0003c6f8 	.word	0x0003c6f8

00030a80 <CHTTPDaemon::~CHTTPDaemon()>:
   30a80:	e92d4010 	push	{r4, lr}
   30a84:	e1a04000 	mov	r4, r0
   30a88:	ebffffe0 	bl	30a10 <CHTTPDaemon::~CHTTPDaemon()>
   30a8c:	e1a00004 	mov	r0, r4
   30a90:	e59f1008 	ldr	r1, [pc, #8]	; 30aa0 <CHTTPDaemon::~CHTTPDaemon()+0x20>
   30a94:	ebffe524 	bl	29f2c <operator delete(void*, unsigned int)>
   30a98:	e1a00004 	mov	r0, r4
   30a9c:	e8bd8010 	pop	{r4, pc}
   30aa0:	00001970 	.word	0x00001970

00030aa4 <CHTTPDaemon::ParseMethod(char*)>:
   30aa4:	e92d4030 	push	{r4, r5, lr}
   30aa8:	e3510000 	cmp	r1, #0
   30aac:	e24dd00c 	sub	sp, sp, #12
   30ab0:	0a000043 	beq	30bc4 <CHTTPDaemon::ParseMethod(char*)+0x120>
   30ab4:	e1a04000 	mov	r4, r0
   30ab8:	e28d2004 	add	r2, sp, #4
   30abc:	e1a00001 	mov	r0, r1
   30ac0:	e59f1118 	ldr	r1, [pc, #280]	; 30be0 <CHTTPDaemon::ParseMethod(char*)+0x13c>
   30ac4:	ebffe226 	bl	29364 <strtok_r>
   30ac8:	e2505000 	subs	r5, r0, #0
   30acc:	0a000036 	beq	30bac <CHTTPDaemon::ParseMethod(char*)+0x108>
   30ad0:	e59f110c 	ldr	r1, [pc, #268]	; 30be4 <CHTTPDaemon::ParseMethod(char*)+0x140>
   30ad4:	ebffe112 	bl	28f24 <strcmp>
   30ad8:	e3500000 	cmp	r0, #0
   30adc:	05c400f4 	strbeq	r0, [r4, #244]	; 0xf4
   30ae0:	1a000027 	bne	30b84 <CHTTPDaemon::ParseMethod(char*)+0xe0>
   30ae4:	e28d2004 	add	r2, sp, #4
   30ae8:	e59f10f0 	ldr	r1, [pc, #240]	; 30be0 <CHTTPDaemon::ParseMethod(char*)+0x13c>
   30aec:	e3a00000 	mov	r0, #0
   30af0:	ebffe21b 	bl	29364 <strtok_r>
   30af4:	e2505000 	subs	r5, r0, #0
   30af8:	0a00001e 	beq	30b78 <CHTTPDaemon::ParseMethod(char*)+0xd4>
   30afc:	ebffe0fe 	bl	28efc <strlen>
   30b00:	e3500b02 	cmp	r0, #2048	; 0x800
   30b04:	859f00dc 	ldrhi	r0, [pc, #220]	; 30be8 <CHTTPDaemon::ParseMethod(char*)+0x144>
   30b08:	9a000001 	bls	30b14 <CHTTPDaemon::ParseMethod(char*)+0x70>
   30b0c:	e28dd00c 	add	sp, sp, #12
   30b10:	e8bd8030 	pop	{r4, r5, pc}
   30b14:	e1a01005 	mov	r1, r5
   30b18:	e28400f5 	add	r0, r4, #245	; 0xf5
   30b1c:	ebffe1b4 	bl	291f4 <strcpy>
   30b20:	e28d2004 	add	r2, sp, #4
   30b24:	e59f10c0 	ldr	r1, [pc, #192]	; 30bec <CHTTPDaemon::ParseMethod(char*)+0x148>
   30b28:	e3a00000 	mov	r0, #0
   30b2c:	ebffe20c 	bl	29364 <strtok_r>
   30b30:	e3500000 	cmp	r0, #0
   30b34:	0a00000f 	beq	30b78 <CHTTPDaemon::ParseMethod(char*)+0xd4>
   30b38:	e59f10b0 	ldr	r1, [pc, #176]	; 30bf0 <CHTTPDaemon::ParseMethod(char*)+0x14c>
   30b3c:	ebffe0f8 	bl	28f24 <strcmp>
   30b40:	e3500000 	cmp	r0, #0
   30b44:	1a00000b 	bne	30b78 <CHTTPDaemon::ParseMethod(char*)+0xd4>
   30b48:	e28d2004 	add	r2, sp, #4
   30b4c:	e59f10a0 	ldr	r1, [pc, #160]	; 30bf4 <CHTTPDaemon::ParseMethod(char*)+0x150>
   30b50:	ebffe203 	bl	29364 <strtok_r>
   30b54:	e3500000 	cmp	r0, #0
   30b58:	0a000006 	beq	30b78 <CHTTPDaemon::ParseMethod(char*)+0xd4>
   30b5c:	e59f1094 	ldr	r1, [pc, #148]	; 30bf8 <CHTTPDaemon::ParseMethod(char*)+0x154>
   30b60:	ebffe0ef 	bl	28f24 <strcmp>
   30b64:	e59f3090 	ldr	r3, [pc, #144]	; 30bfc <CHTTPDaemon::ParseMethod(char*)+0x158>
   30b68:	e3500000 	cmp	r0, #0
   30b6c:	11a00003 	movne	r0, r3
   30b70:	03a000c8 	moveq	r0, #200	; 0xc8
   30b74:	eaffffe4 	b	30b0c <CHTTPDaemon::ParseMethod(char*)+0x68>
   30b78:	e3a00e19 	mov	r0, #400	; 0x190
   30b7c:	e28dd00c 	add	sp, sp, #12
   30b80:	e8bd8030 	pop	{r4, r5, pc}
   30b84:	e59f1074 	ldr	r1, [pc, #116]	; 30c00 <CHTTPDaemon::ParseMethod(char*)+0x15c>
   30b88:	e1a00005 	mov	r0, r5
   30b8c:	ebffe0e4 	bl	28f24 <strcmp>
   30b90:	e3500000 	cmp	r0, #0
   30b94:	0a000007 	beq	30bb8 <CHTTPDaemon::ParseMethod(char*)+0x114>
   30b98:	e1a00005 	mov	r0, r5
   30b9c:	e59f1060 	ldr	r1, [pc, #96]	; 30c04 <CHTTPDaemon::ParseMethod(char*)+0x160>
   30ba0:	ebffe0df 	bl	28f24 <strcmp>
   30ba4:	e3500000 	cmp	r0, #0
   30ba8:	0a000009 	beq	30bd4 <CHTTPDaemon::ParseMethod(char*)+0x130>
   30bac:	e59f0054 	ldr	r0, [pc, #84]	; 30c08 <CHTTPDaemon::ParseMethod(char*)+0x164>
   30bb0:	e28dd00c 	add	sp, sp, #12
   30bb4:	e8bd8030 	pop	{r4, r5, pc}
   30bb8:	e3a03001 	mov	r3, #1
   30bbc:	e5c430f4 	strb	r3, [r4, #244]	; 0xf4
   30bc0:	eaffffc7 	b	30ae4 <CHTTPDaemon::ParseMethod(char*)+0x40>
   30bc4:	e59f2040 	ldr	r2, [pc, #64]	; 30c0c <CHTTPDaemon::ParseMethod(char*)+0x168>
   30bc8:	e59f1040 	ldr	r1, [pc, #64]	; 30c10 <CHTTPDaemon::ParseMethod(char*)+0x16c>
   30bcc:	e59f0040 	ldr	r0, [pc, #64]	; 30c14 <CHTTPDaemon::ParseMethod(char*)+0x170>
   30bd0:	ebffcaaa 	bl	23680 <assertion_failed>
   30bd4:	e3a03002 	mov	r3, #2
   30bd8:	e5c430f4 	strb	r3, [r4, #244]	; 0xf4
   30bdc:	eaffffc0 	b	30ae4 <CHTTPDaemon::ParseMethod(char*)+0x40>
   30be0:	000393d4 	.word	0x000393d4
   30be4:	0003c714 	.word	0x0003c714
   30be8:	0000019e 	.word	0x0000019e
   30bec:	000388ac 	.word	0x000388ac
   30bf0:	0003c728 	.word	0x0003c728
   30bf4:	0003c734 	.word	0x0003c734
   30bf8:	0003c730 	.word	0x0003c730
   30bfc:	000001f9 	.word	0x000001f9
   30c00:	0003c718 	.word	0x0003c718
   30c04:	0003c720 	.word	0x0003c720
   30c08:	000001f5 	.word	0x000001f5
   30c0c:	000001cb 	.word	0x000001cb
   30c10:	0003c6e8 	.word	0x0003c6e8
   30c14:	0003c708 	.word	0x0003c708

00030c18 <CHTTPDaemon::ParseHeaderField(char*)>:
   30c18:	e92d4030 	push	{r4, r5, lr}
   30c1c:	e3510000 	cmp	r1, #0
   30c20:	e24dd00c 	sub	sp, sp, #12
   30c24:	0a000059 	beq	30d90 <CHTTPDaemon::ParseHeaderField(char*)+0x178>
   30c28:	e1a05000 	mov	r5, r0
   30c2c:	e28d2004 	add	r2, sp, #4
   30c30:	e1a00001 	mov	r0, r1
   30c34:	e59f116c 	ldr	r1, [pc, #364]	; 30da8 <CHTTPDaemon::ParseHeaderField(char*)+0x190>
   30c38:	ebffe1c9 	bl	29364 <strtok_r>
   30c3c:	e2504000 	subs	r4, r0, #0
   30c40:	0a00001a 	beq	30cb0 <CHTTPDaemon::ParseHeaderField(char*)+0x98>
   30c44:	e59f1160 	ldr	r1, [pc, #352]	; 30dac <CHTTPDaemon::ParseHeaderField(char*)+0x194>
   30c48:	ebffe0b5 	bl	28f24 <strcmp>
   30c4c:	e3500000 	cmp	r0, #0
   30c50:	0a000007 	beq	30c74 <CHTTPDaemon::ParseHeaderField(char*)+0x5c>
   30c54:	e1a00004 	mov	r0, r4
   30c58:	e59f1150 	ldr	r1, [pc, #336]	; 30db0 <CHTTPDaemon::ParseHeaderField(char*)+0x198>
   30c5c:	ebffe0b0 	bl	28f24 <strcmp>
   30c60:	e2504000 	subs	r4, r0, #0
   30c64:	0a000032 	beq	30d34 <CHTTPDaemon::ParseHeaderField(char*)+0x11c>
   30c68:	e3a000c8 	mov	r0, #200	; 0xc8
   30c6c:	e28dd00c 	add	sp, sp, #12
   30c70:	e8bd8030 	pop	{r4, r5, pc}
   30c74:	e28d2004 	add	r2, sp, #4
   30c78:	e59f1134 	ldr	r1, [pc, #308]	; 30db4 <CHTTPDaemon::ParseHeaderField(char*)+0x19c>
   30c7c:	ebffe1b8 	bl	29364 <strtok_r>
   30c80:	e2504000 	subs	r4, r0, #0
   30c84:	0a000009 	beq	30cb0 <CHTTPDaemon::ParseHeaderField(char*)+0x98>
   30c88:	e59f1128 	ldr	r1, [pc, #296]	; 30db8 <CHTTPDaemon::ParseHeaderField(char*)+0x1a0>
   30c8c:	ebffe0a4 	bl	28f24 <strcmp>
   30c90:	e3500000 	cmp	r0, #0
   30c94:	1a000008 	bne	30cbc <CHTTPDaemon::ParseHeaderField(char*)+0xa4>
   30c98:	e3a03001 	mov	r3, #1
   30c9c:	e3a000c8 	mov	r0, #200	; 0xc8
   30ca0:	e2855a01 	add	r5, r5, #4096	; 0x1000
   30ca4:	e5c530f7 	strb	r3, [r5, #247]	; 0xf7
   30ca8:	e28dd00c 	add	sp, sp, #12
   30cac:	e8bd8030 	pop	{r4, r5, pc}
   30cb0:	e3a00e19 	mov	r0, #400	; 0x190
   30cb4:	e28dd00c 	add	sp, sp, #12
   30cb8:	e8bd8030 	pop	{r4, r5, pc}
   30cbc:	e1a00004 	mov	r0, r4
   30cc0:	e59f10f4 	ldr	r1, [pc, #244]	; 30dbc <CHTTPDaemon::ParseHeaderField(char*)+0x1a4>
   30cc4:	ebffe096 	bl	28f24 <strcmp>
   30cc8:	e3500000 	cmp	r0, #0
   30ccc:	1affffe5 	bne	30c68 <CHTTPDaemon::ParseHeaderField(char*)+0x50>
   30cd0:	e28d2004 	add	r2, sp, #4
   30cd4:	e59f10e4 	ldr	r1, [pc, #228]	; 30dc0 <CHTTPDaemon::ParseHeaderField(char*)+0x1a8>
   30cd8:	ebffe1a1 	bl	29364 <strtok_r>
   30cdc:	e3500000 	cmp	r0, #0
   30ce0:	0afffff2 	beq	30cb0 <CHTTPDaemon::ParseHeaderField(char*)+0x98>
   30ce4:	e59f10d8 	ldr	r1, [pc, #216]	; 30dc4 <CHTTPDaemon::ParseHeaderField(char*)+0x1ac>
   30ce8:	ebffe08d 	bl	28f24 <strcmp>
   30cec:	e3500000 	cmp	r0, #0
   30cf0:	1affffee 	bne	30cb0 <CHTTPDaemon::ParseHeaderField(char*)+0x98>
   30cf4:	e28d2004 	add	r2, sp, #4
   30cf8:	e59f10c8 	ldr	r1, [pc, #200]	; 30dc8 <CHTTPDaemon::ParseHeaderField(char*)+0x1b0>
   30cfc:	ebffe198 	bl	29364 <strtok_r>
   30d00:	e2504000 	subs	r4, r0, #0
   30d04:	0affffe9 	beq	30cb0 <CHTTPDaemon::ParseHeaderField(char*)+0x98>
   30d08:	ebffe07b 	bl	28efc <strlen>
   30d0c:	e3500064 	cmp	r0, #100	; 0x64
   30d10:	8affffe6 	bhi	30cb0 <CHTTPDaemon::ParseHeaderField(char*)+0x98>
   30d14:	e3a02001 	mov	r2, #1
   30d18:	e2853a01 	add	r3, r5, #4096	; 0x1000
   30d1c:	e2850d63 	add	r0, r5, #6336	; 0x18c0
   30d20:	e1a01004 	mov	r1, r4
   30d24:	e5c328fd 	strb	r2, [r3, #2301]	; 0x8fd
   30d28:	e280003e 	add	r0, r0, #62	; 0x3e
   30d2c:	ebffe130 	bl	291f4 <strcpy>
   30d30:	eaffffcc 	b	30c68 <CHTTPDaemon::ParseHeaderField(char*)+0x50>
   30d34:	e28d2004 	add	r2, sp, #4
   30d38:	e59f108c 	ldr	r1, [pc, #140]	; 30dcc <CHTTPDaemon::ParseHeaderField(char*)+0x1b4>
   30d3c:	ebffe188 	bl	29364 <strtok_r>
   30d40:	e3500000 	cmp	r0, #0
   30d44:	0affffd9 	beq	30cb0 <CHTTPDaemon::ParseHeaderField(char*)+0x98>
   30d48:	e1a03004 	mov	r3, r4
   30d4c:	e59f107c 	ldr	r1, [pc, #124]	; 30dd0 <CHTTPDaemon::ParseHeaderField(char*)+0x1b8>
   30d50:	e2400001 	sub	r0, r0, #1
   30d54:	ea000006 	b	30d74 <CHTTPDaemon::ParseHeaderField(char*)+0x15c>
   30d58:	e2422030 	sub	r2, r2, #48	; 0x30
   30d5c:	e3520009 	cmp	r2, #9
   30d60:	8affffd2 	bhi	30cb0 <CHTTPDaemon::ParseHeaderField(char*)+0x98>
   30d64:	e0833103 	add	r3, r3, r3, lsl #2
   30d68:	e0823083 	add	r3, r2, r3, lsl #1
   30d6c:	e1530001 	cmp	r3, r1
   30d70:	8a00000a 	bhi	30da0 <CHTTPDaemon::ParseHeaderField(char*)+0x188>
   30d74:	e1f020d1 	ldrsb	r2, [r0, #1]!
   30d78:	e3520000 	cmp	r2, #0
   30d7c:	1afffff5 	bne	30d58 <CHTTPDaemon::ParseHeaderField(char*)+0x140>
   30d80:	e2855a01 	add	r5, r5, #4096	; 0x1000
   30d84:	e58530f8 	str	r3, [r5, #248]	; 0xf8
   30d88:	e3a000c8 	mov	r0, #200	; 0xc8
   30d8c:	eaffffb6 	b	30c6c <CHTTPDaemon::ParseHeaderField(char*)+0x54>
   30d90:	e59f203c 	ldr	r2, [pc, #60]	; 30dd4 <CHTTPDaemon::ParseHeaderField(char*)+0x1bc>
   30d94:	e59f103c 	ldr	r1, [pc, #60]	; 30dd8 <CHTTPDaemon::ParseHeaderField(char*)+0x1c0>
   30d98:	e59f003c 	ldr	r0, [pc, #60]	; 30ddc <CHTTPDaemon::ParseHeaderField(char*)+0x1c4>
   30d9c:	ebffca37 	bl	23680 <assertion_failed>
   30da0:	e59f0038 	ldr	r0, [pc, #56]	; 30de0 <CHTTPDaemon::ParseHeaderField(char*)+0x1c8>
   30da4:	eaffffb0 	b	30c6c <CHTTPDaemon::ParseHeaderField(char*)+0x54>
   30da8:	0003c738 	.word	0x0003c738
   30dac:	0003c73c 	.word	0x0003c73c
   30db0:	0003c79c 	.word	0x0003c79c
   30db4:	0003c74c 	.word	0x0003c74c
   30db8:	0003c750 	.word	0x0003c750
   30dbc:	0003c774 	.word	0x0003c774
   30dc0:	0003c788 	.word	0x0003c788
   30dc4:	0003c78c 	.word	0x0003c78c
   30dc8:	0003c798 	.word	0x0003c798
   30dcc:	000393d4 	.word	0x000393d4
   30dd0:	3b9aca00 	.word	0x3b9aca00
   30dd4:	00000206 	.word	0x00000206
   30dd8:	0003c6e8 	.word	0x0003c6e8
   30ddc:	0003c708 	.word	0x0003c708
   30de0:	0000019d 	.word	0x0000019d

00030de4 <CHTTPDaemon::ParseRequest()>:
   30de4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30de8:	e3a03003 	mov	r3, #3
   30dec:	e3a06000 	mov	r6, #0
   30df0:	e2807a01 	add	r7, r0, #4096	; 0x1000
   30df4:	e5c030f4 	strb	r3, [r0, #244]	; 0xf4
   30df8:	e5c060f5 	strb	r6, [r0, #245]	; 0xf5
   30dfc:	e5c068f6 	strb	r6, [r0, #2294]	; 0x8f6
   30e00:	e5c069f7 	strb	r6, [r0, #2551]	; 0x9f7
   30e04:	e5c760fc 	strb	r6, [r7, #252]	; 0xfc
   30e08:	e5c768fe 	strb	r6, [r7, #2302]	; 0x8fe
   30e0c:	e1a08000 	mov	r8, r0
   30e10:	e59000e0 	ldr	r0, [r0, #224]	; 0xe0
   30e14:	e24ddee5 	sub	sp, sp, #3664	; 0xe50
   30e18:	e1500006 	cmp	r0, r6
   30e1c:	e24dd00c 	sub	sp, sp, #12
   30e20:	e5c760f7 	strb	r6, [r7, #247]	; 0xf7
   30e24:	e58760f8 	str	r6, [r7, #248]	; 0xf8
   30e28:	e5c768fd 	strb	r6, [r7, #2301]	; 0x8fd
   30e2c:	e5876964 	str	r6, [r7, #2404]	; 0x964
   30e30:	e5876968 	str	r6, [r7, #2408]	; 0x968
   30e34:	0a0000cc 	beq	3116c <CHTTPDaemon::ParseRequest()+0x388>
   30e38:	e1a05006 	mov	r5, r6
   30e3c:	e1a0b006 	mov	fp, r6
   30e40:	e3a0a0c8 	mov	sl, #200	; 0xc8
   30e44:	e28d3e65 	add	r3, sp, #1616	; 0x650
   30e48:	e2833008 	add	r3, r3, #8
   30e4c:	e2433004 	sub	r3, r3, #4
   30e50:	e59f9338 	ldr	r9, [pc, #824]	; 31190 <CHTTPDaemon::ParseRequest()+0x3ac>
   30e54:	e58d6000 	str	r6, [sp]
   30e58:	e58d3004 	str	r3, [sp, #4]
   30e5c:	e5903000 	ldr	r3, [r0]
   30e60:	e3a02d19 	mov	r2, #1600	; 0x640
   30e64:	e5934020 	ldr	r4, [r3, #32]
   30e68:	e28d1014 	add	r1, sp, #20
   30e6c:	e1a0300b 	mov	r3, fp
   30e70:	e12fff34 	blx	r4
   30e74:	e2503000 	subs	r3, r0, #0
   30e78:	da000094 	ble	310d0 <CHTTPDaemon::ParseRequest()+0x2ec>
   30e7c:	e1a0100a 	mov	r1, sl
   30e80:	e3a04001 	mov	r4, #1
   30e84:	e1a0a008 	mov	sl, r8
   30e88:	e3a02003 	mov	r2, #3
   30e8c:	e1a08007 	mov	r8, r7
   30e90:	e1a07003 	mov	r7, r3
   30e94:	e59d3000 	ldr	r3, [sp]
   30e98:	ea000011 	b	30ee4 <CHTTPDaemon::ParseRequest()+0x100>
   30e9c:	e350000d 	cmp	r0, #13
   30ea0:	0a00000c 	beq	30ed8 <CHTTPDaemon::ParseRequest()+0xf4>
   30ea4:	e350000a 	cmp	r0, #10
   30ea8:	0a000030 	beq	30f70 <CHTTPDaemon::ParseRequest()+0x18c>
   30eac:	e1560009 	cmp	r6, r9
   30eb0:	859f12dc 	ldrhi	r1, [pc, #732]	; 31194 <CHTTPDaemon::ParseRequest()+0x3b0>
   30eb4:	8a000007 	bhi	30ed8 <CHTTPDaemon::ParseRequest()+0xf4>
   30eb8:	e28deee5 	add	lr, sp, #3664	; 0xe50
   30ebc:	e28ee008 	add	lr, lr, #8
   30ec0:	e286c001 	add	ip, r6, #1
   30ec4:	e08e6006 	add	r6, lr, r6
   30ec8:	e5460804 	strb	r0, [r6, #-2052]	; 0xfffff7fc
   30ecc:	e1a0600c 	mov	r6, ip
   30ed0:	e08ee00c 	add	lr, lr, ip
   30ed4:	e54e5804 	strb	r5, [lr, #-2052]	; 0xfffff7fc
   30ed8:	e1540007 	cmp	r4, r7
   30edc:	2a000030 	bcs	30fa4 <CHTTPDaemon::ParseRequest()+0x1c0>
   30ee0:	e2844001 	add	r4, r4, #1
   30ee4:	e28d0014 	add	r0, sp, #20
   30ee8:	e0800004 	add	r0, r0, r4
   30eec:	e3550000 	cmp	r5, #0
   30ef0:	e15000d1 	ldrsb	r0, [r0, #-1]
   30ef4:	0affffe8 	beq	30e9c <CHTTPDaemon::ParseRequest()+0xb8>
   30ef8:	e3550001 	cmp	r5, #1
   30efc:	0a000005 	beq	30f18 <CHTTPDaemon::ParseRequest()+0x134>
   30f00:	e3550002 	cmp	r5, #2
   30f04:	0a00002c 	beq	30fbc <CHTTPDaemon::ParseRequest()+0x1d8>
   30f08:	e1540007 	cmp	r4, r7
   30f0c:	2a00000e 	bcs	30f4c <CHTTPDaemon::ParseRequest()+0x168>
   30f10:	e1a05002 	mov	r5, r2
   30f14:	eafffff1 	b	30ee0 <CHTTPDaemon::ParseRequest()+0xfc>
   30f18:	e286e001 	add	lr, r6, #1
   30f1c:	e08ac00e 	add	ip, sl, lr
   30f20:	e08a6006 	add	r6, sl, r6
   30f24:	e2866d43 	add	r6, r6, #4288	; 0x10c0
   30f28:	e28ccd43 	add	ip, ip, #4288	; 0x10c0
   30f2c:	e5c6003c 	strb	r0, [r6, #60]	; 0x3c
   30f30:	e5ccb03c 	strb	fp, [ip, #60]	; 0x3c
   30f34:	e59800f8 	ldr	r0, [r8, #248]	; 0xf8
   30f38:	e1a0600e 	mov	r6, lr
   30f3c:	e15e0000 	cmp	lr, r0
   30f40:	3affffe4 	bcc	30ed8 <CHTTPDaemon::ParseRequest()+0xf4>
   30f44:	e1540007 	cmp	r4, r7
   30f48:	3afffff0 	bcc	30f10 <CHTTPDaemon::ParseRequest()+0x12c>
   30f4c:	e1a0800a 	mov	r8, sl
   30f50:	e1a0a001 	mov	sl, r1
   30f54:	e58d3000 	str	r3, [sp]
   30f58:	e35a00c8 	cmp	sl, #200	; 0xc8
   30f5c:	0a000066 	beq	310fc <CHTTPDaemon::ParseRequest()+0x318>
   30f60:	e1a0000a 	mov	r0, sl
   30f64:	e28ddee5 	add	sp, sp, #3664	; 0xe50
   30f68:	e28dd00c 	add	sp, sp, #12
   30f6c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30f70:	e3560000 	cmp	r6, #0
   30f74:	1a00001b 	bne	30fe8 <CHTTPDaemon::ParseRequest()+0x204>
   30f78:	e5d800f7 	ldrb	r0, [r8, #247]	; 0xf7
   30f7c:	e3500000 	cmp	r0, #0
   30f80:	0a000038 	beq	31068 <CHTTPDaemon::ParseRequest()+0x284>
   30f84:	e59800f8 	ldr	r0, [r8, #248]	; 0xf8
   30f88:	e3500000 	cmp	r0, #0
   30f8c:	0affffdd 	beq	30f08 <CHTTPDaemon::ParseRequest()+0x124>
   30f90:	e3500b02 	cmp	r0, #2048	; 0x800
   30f94:	8a00004b 	bhi	310c8 <CHTTPDaemon::ParseRequest()+0x2e4>
   30f98:	e1540007 	cmp	r4, r7
   30f9c:	e3a05001 	mov	r5, #1
   30fa0:	3affffce 	bcc	30ee0 <CHTTPDaemon::ParseRequest()+0xfc>
   30fa4:	e1a07008 	mov	r7, r8
   30fa8:	e1a0800a 	mov	r8, sl
   30fac:	e58d3000 	str	r3, [sp]
   30fb0:	e1a0a001 	mov	sl, r1
   30fb4:	e59800e0 	ldr	r0, [r8, #224]	; 0xe0
   30fb8:	eaffffa7 	b	30e5c <CHTTPDaemon::ParseRequest()+0x78>
   30fbc:	e598e968 	ldr	lr, [r8, #2408]	; 0x968
   30fc0:	e286c001 	add	ip, r6, #1
   30fc4:	e7ce0006 	strb	r0, [lr, r6]
   30fc8:	e5980964 	ldr	r0, [r8, #2404]	; 0x964
   30fcc:	e15c0000 	cmp	ip, r0
   30fd0:	25980968 	ldrcs	r0, [r8, #2408]	; 0x968
   30fd4:	21a0600c 	movcs	r6, ip
   30fd8:	2588096c 	strcs	r0, [r8, #2412]	; 0x96c
   30fdc:	2affffc9 	bcs	30f08 <CHTTPDaemon::ParseRequest()+0x124>
   30fe0:	e1a0600c 	mov	r6, ip
   30fe4:	eaffffbb 	b	30ed8 <CHTTPDaemon::ParseRequest()+0xf4>
   30fe8:	e3530000 	cmp	r3, #0
   30fec:	e283c001 	add	ip, r3, #1
   30ff0:	1a00000e 	bne	31030 <CHTTPDaemon::ParseRequest()+0x24c>
   30ff4:	e35100c8 	cmp	r1, #200	; 0xc8
   30ff8:	11a05003 	movne	r5, r3
   30ffc:	11a0600b 	movne	r6, fp
   31000:	13a03001 	movne	r3, #1
   31004:	1affffb3 	bne	30ed8 <CHTTPDaemon::ParseRequest()+0xf4>
   31008:	e59d1004 	ldr	r1, [sp, #4]
   3100c:	e1a0000a 	mov	r0, sl
   31010:	e58d2000 	str	r2, [sp]
   31014:	e1a05003 	mov	r5, r3
   31018:	ebfffea1 	bl	30aa4 <CHTTPDaemon::ParseMethod(char*)>
   3101c:	e1a0600b 	mov	r6, fp
   31020:	e1a01000 	mov	r1, r0
   31024:	e3a03001 	mov	r3, #1
   31028:	e59d2000 	ldr	r2, [sp]
   3102c:	eaffffa9 	b	30ed8 <CHTTPDaemon::ParseRequest()+0xf4>
   31030:	e35100c8 	cmp	r1, #200	; 0xc8
   31034:	11a0300c 	movne	r3, ip
   31038:	11a0600b 	movne	r6, fp
   3103c:	1affffa5 	bne	30ed8 <CHTTPDaemon::ParseRequest()+0xf4>
   31040:	e59d1004 	ldr	r1, [sp, #4]
   31044:	e1a0000a 	mov	r0, sl
   31048:	e58d2008 	str	r2, [sp, #8]
   3104c:	e58dc000 	str	ip, [sp]
   31050:	ebfffef0 	bl	30c18 <CHTTPDaemon::ParseHeaderField(char*)>
   31054:	e1a0600b 	mov	r6, fp
   31058:	e1a01000 	mov	r1, r0
   3105c:	e59d3000 	ldr	r3, [sp]
   31060:	e59d2008 	ldr	r2, [sp, #8]
   31064:	eaffff9b 	b	30ed8 <CHTTPDaemon::ParseRequest()+0xf4>
   31068:	e5d808fd 	ldrb	r0, [r8, #2301]	; 0x8fd
   3106c:	e3500000 	cmp	r0, #0
   31070:	0affffa4 	beq	30f08 <CHTTPDaemon::ParseRequest()+0x124>
   31074:	e59800f8 	ldr	r0, [r8, #248]	; 0xf8
   31078:	e3500000 	cmp	r0, #0
   3107c:	0affffa1 	beq	30f08 <CHTTPDaemon::ParseRequest()+0x124>
   31080:	e59ac0ec 	ldr	ip, [sl, #236]	; 0xec
   31084:	e5880964 	str	r0, [r8, #2404]	; 0x964
   31088:	e150000c 	cmp	r0, ip
   3108c:	e58860f8 	str	r6, [r8, #248]	; 0xf8
   31090:	8a00000c 	bhi	310c8 <CHTTPDaemon::ParseRequest()+0x2e4>
   31094:	e598c968 	ldr	ip, [r8, #2408]	; 0x968
   31098:	e35c0000 	cmp	ip, #0
   3109c:	1a00002e 	bne	3115c <CHTTPDaemon::ParseRequest()+0x378>
   310a0:	e58d100c 	str	r1, [sp, #12]
   310a4:	e58d3008 	str	r3, [sp, #8]
   310a8:	e58d2000 	str	r2, [sp]
   310ac:	ebffe391 	bl	29ef8 <operator new[](unsigned int)>
   310b0:	e3a05002 	mov	r5, #2
   310b4:	e5880968 	str	r0, [r8, #2408]	; 0x968
   310b8:	e59d2000 	ldr	r2, [sp]
   310bc:	e59d3008 	ldr	r3, [sp, #8]
   310c0:	e59d100c 	ldr	r1, [sp, #12]
   310c4:	eaffff83 	b	30ed8 <CHTTPDaemon::ParseRequest()+0xf4>
   310c8:	e59f10c4 	ldr	r1, [pc, #196]	; 31194 <CHTTPDaemon::ParseRequest()+0x3b0>
   310cc:	eaffff8d 	b	30f08 <CHTTPDaemon::ParseRequest()+0x124>
   310d0:	aaffffa0 	bge	30f58 <CHTTPDaemon::ParseRequest()+0x174>
   310d4:	e3a0af82 	mov	sl, #520	; 0x208
   310d8:	ebffd25b 	bl	25a4c <CLogger::Get()>
   310dc:	e59f30b4 	ldr	r3, [pc, #180]	; 31198 <CHTTPDaemon::ParseRequest()+0x3b4>
   310e0:	e3a02001 	mov	r2, #1
   310e4:	e59f10b0 	ldr	r1, [pc, #176]	; 3119c <CHTTPDaemon::ParseRequest()+0x3b8>
   310e8:	ebffd194 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   310ec:	e1a0000a 	mov	r0, sl
   310f0:	e28ddee5 	add	sp, sp, #3664	; 0xe50
   310f4:	e28dd00c 	add	sp, sp, #12
   310f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   310fc:	e59d3000 	ldr	r3, [sp]
   31100:	e3530000 	cmp	r3, #0
   31104:	03a0af82 	moveq	sl, #520	; 0x208
   31108:	0affff94 	beq	30f60 <CHTTPDaemon::ParseRequest()+0x17c>
   3110c:	e28840f5 	add	r4, r8, #245	; 0xf5
   31110:	e1a00004 	mov	r0, r4
   31114:	e3a0103f 	mov	r1, #63	; 0x3f
   31118:	ebffe064 	bl	292b0 <strchr>
   3111c:	e2506000 	subs	r6, r0, #0
   31120:	0a000015 	beq	3117c <CHTTPDaemon::ParseRequest()+0x398>
   31124:	e0465004 	sub	r5, r6, r4
   31128:	e2880e8f 	add	r0, r8, #2288	; 0x8f0
   3112c:	e1a01004 	mov	r1, r4
   31130:	e1a02005 	mov	r2, r5
   31134:	e2800006 	add	r0, r0, #6
   31138:	ebffe038 	bl	29220 <strncpy>
   3113c:	e3a03000 	mov	r3, #0
   31140:	e0885005 	add	r5, r8, r5
   31144:	e2880e9f 	add	r0, r8, #2544	; 0x9f0
   31148:	e2861001 	add	r1, r6, #1
   3114c:	e5c538f6 	strb	r3, [r5, #2294]	; 0x8f6
   31150:	e2800007 	add	r0, r0, #7
   31154:	ebffe026 	bl	291f4 <strcpy>
   31158:	eaffff80 	b	30f60 <CHTTPDaemon::ParseRequest()+0x17c>
   3115c:	e3a02e15 	mov	r2, #336	; 0x150
   31160:	e59f1038 	ldr	r1, [pc, #56]	; 311a0 <CHTTPDaemon::ParseRequest()+0x3bc>
   31164:	e59f0038 	ldr	r0, [pc, #56]	; 311a4 <CHTTPDaemon::ParseRequest()+0x3c0>
   31168:	ebffc944 	bl	23680 <assertion_failed>
   3116c:	e59f2034 	ldr	r2, [pc, #52]	; 311a8 <CHTTPDaemon::ParseRequest()+0x3c4>
   31170:	e59f1028 	ldr	r1, [pc, #40]	; 311a0 <CHTTPDaemon::ParseRequest()+0x3bc>
   31174:	e59f0030 	ldr	r0, [pc, #48]	; 311ac <CHTTPDaemon::ParseRequest()+0x3c8>
   31178:	ebffc940 	bl	23680 <assertion_failed>
   3117c:	e2880e8f 	add	r0, r8, #2288	; 0x8f0
   31180:	e1a01004 	mov	r1, r4
   31184:	e2800006 	add	r0, r0, #6
   31188:	ebffe019 	bl	291f4 <strcpy>
   3118c:	eaffff73 	b	30f60 <CHTTPDaemon::ParseRequest()+0x17c>
   31190:	000007ff 	.word	0x000007ff
   31194:	0000019d 	.word	0x0000019d
   31198:	0003c7d4 	.word	0x0003c7d4
   3119c:	0003c6d4 	.word	0x0003c6d4
   311a0:	0003c6e8 	.word	0x0003c6e8
   311a4:	0003c7bc 	.word	0x0003c7bc
   311a8:	00000127 	.word	0x00000127
   311ac:	0003c7ac 	.word	0x0003c7ac

000311b0 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)>:
   311b0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   311b4:	e2804a01 	add	r4, r0, #4096	; 0x1000
   311b8:	e5d468fd 	ldrb	r6, [r4, #2301]	; 0x8fd
   311bc:	e3560000 	cmp	r6, #0
   311c0:	0a00002a 	beq	31270 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0xc0>
   311c4:	e594c96c 	ldr	ip, [r4, #2412]	; 0x96c
   311c8:	e35c0000 	cmp	ip, #0
   311cc:	0a000027 	beq	31270 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0xc0>
   311d0:	e3510000 	cmp	r1, #0
   311d4:	e1a08003 	mov	r8, r3
   311d8:	e1a07002 	mov	r7, r2
   311dc:	e1a05000 	mov	r5, r0
   311e0:	0a000045 	beq	312fc <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x14c>
   311e4:	e581c000 	str	ip, [r1]
   311e8:	e594096c 	ldr	r0, [r4, #2412]	; 0x96c
   311ec:	e3a03004 	mov	r3, #4
   311f0:	e59f2154 	ldr	r2, [pc, #340]	; 3134c <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x19c>
   311f4:	e5941964 	ldr	r1, [r4, #2404]	; 0x964
   311f8:	ebfffdcd 	bl	30934 <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.2]>
   311fc:	e2509000 	subs	r9, r0, #0
   31200:	0a00001a 	beq	31270 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0xc0>
   31204:	e3a03000 	mov	r3, #0
   31208:	e1570003 	cmp	r7, r3
   3120c:	e4c93004 	strb	r3, [r9], #4
   31210:	0a00003d 	beq	3130c <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x15c>
   31214:	e594296c 	ldr	r2, [r4, #2412]	; 0x96c
   31218:	e5943964 	ldr	r3, [r4, #2404]	; 0x964
   3121c:	e0492002 	sub	r2, r9, r2
   31220:	e2855d63 	add	r5, r5, #6336	; 0x18c0
   31224:	e0433002 	sub	r3, r3, r2
   31228:	e285503e 	add	r5, r5, #62	; 0x3e
   3122c:	e5879000 	str	r9, [r7]
   31230:	e1a00005 	mov	r0, r5
   31234:	e584996c 	str	r9, [r4, #2412]	; 0x96c
   31238:	e5843964 	str	r3, [r4, #2404]	; 0x964
   3123c:	ebffdf2e 	bl	28efc <strlen>
   31240:	e2507000 	subs	r7, r0, #0
   31244:	0a000034 	beq	3131c <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x16c>
   31248:	e1a02005 	mov	r2, r5
   3124c:	e1a03007 	mov	r3, r7
   31250:	e5941964 	ldr	r1, [r4, #2404]	; 0x964
   31254:	e1a00009 	mov	r0, r9
   31258:	ebfffdb5 	bl	30934 <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.2]>
   3125c:	e3500000 	cmp	r0, #0
   31260:	0a000002 	beq	31270 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0xc0>
   31264:	e0403009 	sub	r3, r0, r9
   31268:	e3530003 	cmp	r3, #3
   3126c:	ca000002 	bgt	3127c <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0xcc>
   31270:	e3a06000 	mov	r6, #0
   31274:	e1a00006 	mov	r0, r6
   31278:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3127c:	e2405004 	sub	r5, r0, #4
   31280:	e1a00005 	mov	r0, r5
   31284:	e3a02004 	mov	r2, #4
   31288:	e59f10c0 	ldr	r1, [pc, #192]	; 31350 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1a0>
   3128c:	ebffdf03 	bl	28ea0 <memcmp>
   31290:	e3500000 	cmp	r0, #0
   31294:	1afffff5 	bne	31270 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0xc0>
   31298:	e3580000 	cmp	r8, #0
   3129c:	e0450009 	sub	r0, r5, r9
   312a0:	0a000021 	beq	3132c <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x17c>
   312a4:	e5880000 	str	r0, [r8]
   312a8:	e5943964 	ldr	r3, [r4, #2404]	; 0x964
   312ac:	e594596c 	ldr	r5, [r4, #2412]	; 0x96c
   312b0:	e0433000 	sub	r3, r3, r0
   312b4:	e2872004 	add	r2, r7, #4
   312b8:	e0850000 	add	r0, r5, r0
   312bc:	e1530002 	cmp	r3, r2
   312c0:	e5843964 	str	r3, [r4, #2404]	; 0x964
   312c4:	e584096c 	str	r0, [r4, #2412]	; 0x96c
   312c8:	3a00001b 	bcc	3133c <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x18c>
   312cc:	e0433002 	sub	r3, r3, r2
   312d0:	e1570003 	cmp	r7, r3
   312d4:	e5843964 	str	r3, [r4, #2404]	; 0x964
   312d8:	83a03000 	movhi	r3, #0
   312dc:	e0800002 	add	r0, r0, r2
   312e0:	e584096c 	str	r0, [r4, #2412]	; 0x96c
   312e4:	92433002 	subls	r3, r3, #2
   312e8:	92800002 	addls	r0, r0, #2
   312ec:	95843964 	strls	r3, [r4, #2404]	; 0x964
   312f0:	9584096c 	strls	r0, [r4, #2412]	; 0x96c
   312f4:	8584396c 	strhi	r3, [r4, #2412]	; 0x96c
   312f8:	eaffffdd 	b	31274 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0xc4>
   312fc:	e59f2050 	ldr	r2, [pc, #80]	; 31354 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1a4>
   31300:	e59f1050 	ldr	r1, [pc, #80]	; 31358 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1a8>
   31304:	e59f0050 	ldr	r0, [pc, #80]	; 3135c <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1ac>
   31308:	ebffc8dc 	bl	23680 <assertion_failed>
   3130c:	e59f204c 	ldr	r2, [pc, #76]	; 31360 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1b0>
   31310:	e59f1040 	ldr	r1, [pc, #64]	; 31358 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1a8>
   31314:	e59f0048 	ldr	r0, [pc, #72]	; 31364 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1b4>
   31318:	ebffc8d8 	bl	23680 <assertion_failed>
   3131c:	e59f2044 	ldr	r2, [pc, #68]	; 31368 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1b8>
   31320:	e59f1030 	ldr	r1, [pc, #48]	; 31358 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1a8>
   31324:	e59f0040 	ldr	r0, [pc, #64]	; 3136c <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1bc>
   31328:	ebffc8d4 	bl	23680 <assertion_failed>
   3132c:	e3a02f9e 	mov	r2, #632	; 0x278
   31330:	e59f1020 	ldr	r1, [pc, #32]	; 31358 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1a8>
   31334:	e59f0034 	ldr	r0, [pc, #52]	; 31370 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1c0>
   31338:	ebffc8d0 	bl	23680 <assertion_failed>
   3133c:	e59f2030 	ldr	r2, [pc, #48]	; 31374 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1c4>
   31340:	e59f1010 	ldr	r1, [pc, #16]	; 31358 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1a8>
   31344:	e59f002c 	ldr	r0, [pc, #44]	; 31378 <CHTTPDaemon::GetMultipartFormPart(char const**, unsigned char const**, unsigned int*)+0x1c8>
   31348:	ebffc8cc 	bl	23680 <assertion_failed>
   3134c:	0003c7f4 	.word	0x0003c7f4
   31350:	0003c81c 	.word	0x0003c81c
   31354:	0000024e 	.word	0x0000024e
   31358:	0003c6e8 	.word	0x0003c6e8
   3135c:	0003c7e4 	.word	0x0003c7e4
   31360:	0000025b 	.word	0x0000025b
   31364:	0003c7fc 	.word	0x0003c7fc
   31368:	00000263 	.word	0x00000263
   3136c:	0003c808 	.word	0x0003c808
   31370:	0003c824 	.word	0x0003c824
   31374:	00000281 	.word	0x00000281
   31378:	0003c834 	.word	0x0003c834

0003137c <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int)>:
   3137c:	e59dc000 	ldr	ip, [sp]
   31380:	e1a00001 	mov	r0, r1
   31384:	e35c0000 	cmp	ip, #0
   31388:	e1a01002 	mov	r1, r2
   3138c:	e1a02003 	mov	r2, r3
   31390:	012fff1e 	bxeq	lr
   31394:	e1a0300c 	mov	r3, ip
   31398:	eafffd65 	b	30934 <CHTTPDaemon::Search(void const*, unsigned int, void const*, unsigned int) [clone .part.2]>

0003139c <CHTTPDaemon::Worker()>:
   3139c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   313a0:	e59030e0 	ldr	r3, [r0, #224]	; 0xe0
   313a4:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   313a8:	e3530000 	cmp	r3, #0
   313ac:	0a0000cd 	beq	316e8 <CHTTPDaemon::Worker()+0x34c>
   313b0:	e1a04000 	mov	r4, r0
   313b4:	ebfffe8a 	bl	30de4 <CHTTPDaemon::ParseRequest()>
   313b8:	e3500f82 	cmp	r0, #520	; 0x208
   313bc:	e1a05000 	mov	r5, r0
   313c0:	0a00002d 	beq	3147c <CHTTPDaemon::Worker()+0xe0>
   313c4:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   313c8:	e59f83c0 	ldr	r8, [pc, #960]	; 31790 <CHTTPDaemon::Worker()+0x3f4>
   313cc:	e35000c8 	cmp	r0, #200	; 0xc8
   313d0:	e58d3018 	str	r3, [sp, #24]
   313d4:	e58d801c 	str	r8, [sp, #28]
   313d8:	0a00003b 	beq	314cc <CHTTPDaemon::Worker()+0x130>
   313dc:	e59f33b0 	ldr	r3, [pc, #944]	; 31794 <CHTTPDaemon::Worker()+0x3f8>
   313e0:	e1550003 	cmp	r5, r3
   313e4:	0a0000bd 	beq	316e0 <CHTTPDaemon::Worker()+0x344>
   313e8:	8a00002d 	bhi	314a4 <CHTTPDaemon::Worker()+0x108>
   313ec:	e3550f65 	cmp	r5, #404	; 0x194
   313f0:	0a0000b6 	beq	316d0 <CHTTPDaemon::Worker()+0x334>
   313f4:	e2433001 	sub	r3, r3, #1
   313f8:	e1550003 	cmp	r5, r3
   313fc:	0a0000c1 	beq	31708 <CHTTPDaemon::Worker()+0x36c>
   31400:	e3550e19 	cmp	r5, #400	; 0x190
   31404:	0a0000bd 	beq	31700 <CHTTPDaemon::Worker()+0x364>
   31408:	e59f7388 	ldr	r7, [pc, #904]	; 31798 <CHTTPDaemon::Worker()+0x3fc>
   3140c:	e28d6038 	add	r6, sp, #56	; 0x38
   31410:	e1a00006 	mov	r0, r6
   31414:	ebffd572 	bl	269e4 <CString::CString()>
   31418:	e1a03007 	mov	r3, r7
   3141c:	e1a00006 	mov	r0, r6
   31420:	e1a02005 	mov	r2, r5
   31424:	e59f1370 	ldr	r1, [pc, #880]	; 3179c <CHTTPDaemon::Worker()+0x400>
   31428:	e58d7000 	str	r7, [sp]
   3142c:	ebffdaaf 	bl	27ef0 <CString::Format(char const*, ...)>
   31430:	e1a00006 	mov	r0, r6
   31434:	ebffd5ae 	bl	26af4 <CString::GetLength() const>
   31438:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   3143c:	e59490f0 	ldr	r9, [r4, #240]	; 0xf0
   31440:	e1500003 	cmp	r0, r3
   31444:	e58d0018 	str	r0, [sp, #24]
   31448:	858d3018 	strhi	r3, [sp, #24]
   3144c:	e3590000 	cmp	r9, #0
   31450:	0a0000ae 	beq	31710 <CHTTPDaemon::Worker()+0x374>
   31454:	e1a00006 	mov	r0, r6
   31458:	ebffd577 	bl	26a3c <CString::operator char const*() const>
   3145c:	e59d2018 	ldr	r2, [sp, #24]
   31460:	e1a01000 	mov	r1, r0
   31464:	e1a00009 	mov	r0, r9
   31468:	ebffe0c8 	bl	29790 <memcpy>
   3146c:	e1a00006 	mov	r0, r6
   31470:	e58d801c 	str	r8, [sp, #28]
   31474:	ebffd527 	bl	26918 <CString::~CString()>
   31478:	ea000037 	b	3155c <CHTTPDaemon::Worker()+0x1c0>
   3147c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   31480:	e3500000 	cmp	r0, #0
   31484:	0a000002 	beq	31494 <CHTTPDaemon::Worker()+0xf8>
   31488:	e5903000 	ldr	r3, [r0]
   3148c:	e5933004 	ldr	r3, [r3, #4]
   31490:	e12fff33 	blx	r3
   31494:	e3a03000 	mov	r3, #0
   31498:	e58430e0 	str	r3, [r4, #224]	; 0xe0
   3149c:	e28dd04c 	add	sp, sp, #76	; 0x4c
   314a0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   314a4:	e59f32f4 	ldr	r3, [pc, #756]	; 317a0 <CHTTPDaemon::Worker()+0x404>
   314a8:	e1550003 	cmp	r5, r3
   314ac:	0a000089 	beq	316d8 <CHTTPDaemon::Worker()+0x33c>
   314b0:	e2833004 	add	r3, r3, #4
   314b4:	e1550003 	cmp	r5, r3
   314b8:	0a00008e 	beq	316f8 <CHTTPDaemon::Worker()+0x35c>
   314bc:	e3550f7d 	cmp	r5, #500	; 0x1f4
   314c0:	1affffd0 	bne	31408 <CHTTPDaemon::Worker()+0x6c>
   314c4:	e59f72d8 	ldr	r7, [pc, #728]	; 317a4 <CHTTPDaemon::Worker()+0x408>
   314c8:	eaffffcf 	b	3140c <CHTTPDaemon::Worker()+0x70>
   314cc:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
   314d0:	e3530000 	cmp	r3, #0
   314d4:	0a00009a 	beq	31744 <CHTTPDaemon::Worker()+0x3a8>
   314d8:	e5940000 	ldr	r0, [r4]
   314dc:	e28d101c 	add	r1, sp, #28
   314e0:	e28d2018 	add	r2, sp, #24
   314e4:	e58d3000 	str	r3, [sp]
   314e8:	e58d1008 	str	r1, [sp, #8]
   314ec:	e58d2004 	str	r2, [sp, #4]
   314f0:	e2843d43 	add	r3, r4, #4288	; 0x10c0
   314f4:	e2842e9f 	add	r2, r4, #2544	; 0x9f0
   314f8:	e2841e8f 	add	r1, r4, #2288	; 0x8f0
   314fc:	e5905010 	ldr	r5, [r0, #16]
   31500:	e283303c 	add	r3, r3, #60	; 0x3c
   31504:	e2822007 	add	r2, r2, #7
   31508:	e2811006 	add	r1, r1, #6
   3150c:	e1a00004 	mov	r0, r4
   31510:	e12fff35 	blx	r5
   31514:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   31518:	e59d3018 	ldr	r3, [sp, #24]
   3151c:	e1a05000 	mov	r5, r0
   31520:	e1520003 	cmp	r2, r3
   31524:	3a00008a 	bcc	31754 <CHTTPDaemon::Worker()+0x3b8>
   31528:	e59d301c 	ldr	r3, [sp, #28]
   3152c:	e3530000 	cmp	r3, #0
   31530:	0a00008b 	beq	31764 <CHTTPDaemon::Worker()+0x3c8>
   31534:	e2846a01 	add	r6, r4, #4096	; 0x1000
   31538:	e5960968 	ldr	r0, [r6, #2408]	; 0x968
   3153c:	e3500000 	cmp	r0, #0
   31540:	0a000000 	beq	31548 <CHTTPDaemon::Worker()+0x1ac>
   31544:	ebffe272 	bl	29f14 <operator delete[](void*)>
   31548:	e3a03000 	mov	r3, #0
   3154c:	e35500c8 	cmp	r5, #200	; 0xc8
   31550:	e5863968 	str	r3, [r6, #2408]	; 0x968
   31554:	1affffa0 	bne	313dc <CHTTPDaemon::Worker()+0x40>
   31558:	e59f7248 	ldr	r7, [pc, #584]	; 317a8 <CHTTPDaemon::Worker()+0x40c>
   3155c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   31560:	e5903000 	ldr	r3, [r0]
   31564:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   31568:	e12fff33 	blx	r3
   3156c:	e2501000 	subs	r1, r0, #0
   31570:	0affffc1 	beq	3147c <CHTTPDaemon::Worker()+0xe0>
   31574:	e28d0020 	add	r0, sp, #32
   31578:	ebffba3a 	bl	1fe68 <CIPAddress::CIPAddress(unsigned char const*)>
   3157c:	e28d0028 	add	r0, sp, #40	; 0x28
   31580:	ebffd517 	bl	269e4 <CString::CString()>
   31584:	e28d1028 	add	r1, sp, #40	; 0x28
   31588:	e28d0020 	add	r0, sp, #32
   3158c:	ebffba9c 	bl	20004 <CIPAddress::Format(CString*) const>
   31590:	e5d430f4 	ldrb	r3, [r4, #244]	; 0xf4
   31594:	e3530002 	cmp	r3, #2
   31598:	959f220c 	ldrls	r2, [pc, #524]	; 317ac <CHTTPDaemon::Worker()+0x410>
   3159c:	859f620c 	ldrhi	r6, [pc, #524]	; 317b0 <CHTTPDaemon::Worker()+0x414>
   315a0:	90823103 	addls	r3, r2, r3, lsl #2
   315a4:	95936024 	ldrls	r6, [r3, #36]	; 0x24
   315a8:	ebffd127 	bl	25a4c <CLogger::Get()>
   315ac:	e1a08000 	mov	r8, r0
   315b0:	e28d0028 	add	r0, sp, #40	; 0x28
   315b4:	ebffd520 	bl	26a3c <CString::operator char const*() const>
   315b8:	e59d2018 	ldr	r2, [sp, #24]
   315bc:	e28430f5 	add	r3, r4, #245	; 0xf5
   315c0:	e59f11ec 	ldr	r1, [pc, #492]	; 317b4 <CHTTPDaemon::Worker()+0x418>
   315c4:	e58d0000 	str	r0, [sp]
   315c8:	e58d500c 	str	r5, [sp, #12]
   315cc:	e1a00008 	mov	r0, r8
   315d0:	e58d6004 	str	r6, [sp, #4]
   315d4:	e58d2010 	str	r2, [sp, #16]
   315d8:	e28d6038 	add	r6, sp, #56	; 0x38
   315dc:	e3a02004 	mov	r2, #4
   315e0:	e58d3008 	str	r3, [sp, #8]
   315e4:	e59f31cc 	ldr	r3, [pc, #460]	; 317b8 <CHTTPDaemon::Worker()+0x41c>
   315e8:	ebffd054 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   315ec:	e1a00006 	mov	r0, r6
   315f0:	ebffd4fb 	bl	269e4 <CString::CString()>
   315f4:	e59dc018 	ldr	ip, [sp, #24]
   315f8:	e59d101c 	ldr	r1, [sp, #28]
   315fc:	e1a02005 	mov	r2, r5
   31600:	e88d1002 	stm	sp, {r1, ip}
   31604:	e1a03007 	mov	r3, r7
   31608:	e59f11ac 	ldr	r1, [pc, #428]	; 317bc <CHTTPDaemon::Worker()+0x420>
   3160c:	e1a00006 	mov	r0, r6
   31610:	ebffda36 	bl	27ef0 <CString::Format(char const*, ...)>
   31614:	e59450e0 	ldr	r5, [r4, #224]	; 0xe0
   31618:	e1a00006 	mov	r0, r6
   3161c:	e5953000 	ldr	r3, [r5]
   31620:	e593701c 	ldr	r7, [r3, #28]
   31624:	ebffd504 	bl	26a3c <CString::operator char const*() const>
   31628:	e1a08000 	mov	r8, r0
   3162c:	e1a00006 	mov	r0, r6
   31630:	ebffd52f 	bl	26af4 <CString::GetLength() const>
   31634:	e1a01008 	mov	r1, r8
   31638:	e1a02000 	mov	r2, r0
   3163c:	e3a03040 	mov	r3, #64	; 0x40
   31640:	e1a00005 	mov	r0, r5
   31644:	e12fff37 	blx	r7
   31648:	e3500000 	cmp	r0, #0
   3164c:	ba000033 	blt	31720 <CHTTPDaemon::Worker()+0x384>
   31650:	e5d430f4 	ldrb	r3, [r4, #244]	; 0xf4
   31654:	e3530001 	cmp	r3, #1
   31658:	0a00000c 	beq	31690 <CHTTPDaemon::Worker()+0x2f4>
   3165c:	e59d2018 	ldr	r2, [sp, #24]
   31660:	e3520000 	cmp	r2, #0
   31664:	0a000009 	beq	31690 <CHTTPDaemon::Worker()+0x2f4>
   31668:	e59410f0 	ldr	r1, [r4, #240]	; 0xf0
   3166c:	e3510000 	cmp	r1, #0
   31670:	0a000042 	beq	31780 <CHTTPDaemon::Worker()+0x3e4>
   31674:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   31678:	e5903000 	ldr	r3, [r0]
   3167c:	e593501c 	ldr	r5, [r3, #28]
   31680:	e3a03040 	mov	r3, #64	; 0x40
   31684:	e12fff35 	blx	r5
   31688:	e3500000 	cmp	r0, #0
   3168c:	ba000038 	blt	31774 <CHTTPDaemon::Worker()+0x3d8>
   31690:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   31694:	e3500000 	cmp	r0, #0
   31698:	0a000002 	beq	316a8 <CHTTPDaemon::Worker()+0x30c>
   3169c:	e5903000 	ldr	r3, [r0]
   316a0:	e5933004 	ldr	r3, [r3, #4]
   316a4:	e12fff33 	blx	r3
   316a8:	e3a03000 	mov	r3, #0
   316ac:	e1a00006 	mov	r0, r6
   316b0:	e58430e0 	str	r3, [r4, #224]	; 0xe0
   316b4:	ebffd497 	bl	26918 <CString::~CString()>
   316b8:	e28d0028 	add	r0, sp, #40	; 0x28
   316bc:	ebffd495 	bl	26918 <CString::~CString()>
   316c0:	e28d0020 	add	r0, sp, #32
   316c4:	ebffb966 	bl	1fc64 <CIPAddress::~CIPAddress()>
   316c8:	e28dd04c 	add	sp, sp, #76	; 0x4c
   316cc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   316d0:	e59f70e8 	ldr	r7, [pc, #232]	; 317c0 <CHTTPDaemon::Worker()+0x424>
   316d4:	eaffff4c 	b	3140c <CHTTPDaemon::Worker()+0x70>
   316d8:	e59f70e4 	ldr	r7, [pc, #228]	; 317c4 <CHTTPDaemon::Worker()+0x428>
   316dc:	eaffff4a 	b	3140c <CHTTPDaemon::Worker()+0x70>
   316e0:	e59f70e0 	ldr	r7, [pc, #224]	; 317c8 <CHTTPDaemon::Worker()+0x42c>
   316e4:	eaffff48 	b	3140c <CHTTPDaemon::Worker()+0x70>
   316e8:	e3a0208b 	mov	r2, #139	; 0x8b
   316ec:	e59f10d8 	ldr	r1, [pc, #216]	; 317cc <CHTTPDaemon::Worker()+0x430>
   316f0:	e59f00d8 	ldr	r0, [pc, #216]	; 317d0 <CHTTPDaemon::Worker()+0x434>
   316f4:	ebffc7e1 	bl	23680 <assertion_failed>
   316f8:	e59f70d4 	ldr	r7, [pc, #212]	; 317d4 <CHTTPDaemon::Worker()+0x438>
   316fc:	eaffff42 	b	3140c <CHTTPDaemon::Worker()+0x70>
   31700:	e59f70d0 	ldr	r7, [pc, #208]	; 317d8 <CHTTPDaemon::Worker()+0x43c>
   31704:	eaffff40 	b	3140c <CHTTPDaemon::Worker()+0x70>
   31708:	e59f70cc 	ldr	r7, [pc, #204]	; 317dc <CHTTPDaemon::Worker()+0x440>
   3170c:	eaffff3e 	b	3140c <CHTTPDaemon::Worker()+0x70>
   31710:	e3a020c5 	mov	r2, #197	; 0xc5
   31714:	e59f10b0 	ldr	r1, [pc, #176]	; 317cc <CHTTPDaemon::Worker()+0x430>
   31718:	e59f00c0 	ldr	r0, [pc, #192]	; 317e0 <CHTTPDaemon::Worker()+0x444>
   3171c:	ebffc7d7 	bl	23680 <assertion_failed>
   31720:	ebffd0c9 	bl	25a4c <CLogger::Get()>
   31724:	e59f30b8 	ldr	r3, [pc, #184]	; 317e4 <CHTTPDaemon::Worker()+0x448>
   31728:	e3a02001 	mov	r2, #1
   3172c:	e59f1080 	ldr	r1, [pc, #128]	; 317b4 <CHTTPDaemon::Worker()+0x418>
   31730:	ebffd002 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   31734:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   31738:	e3500000 	cmp	r0, #0
   3173c:	1affffd6 	bne	3169c <CHTTPDaemon::Worker()+0x300>
   31740:	eaffffd8 	b	316a8 <CHTTPDaemon::Worker()+0x30c>
   31744:	e3a020a0 	mov	r2, #160	; 0xa0
   31748:	e59f107c 	ldr	r1, [pc, #124]	; 317cc <CHTTPDaemon::Worker()+0x430>
   3174c:	e59f008c 	ldr	r0, [pc, #140]	; 317e0 <CHTTPDaemon::Worker()+0x444>
   31750:	ebffc7ca 	bl	23680 <assertion_failed>
   31754:	e3a020a3 	mov	r2, #163	; 0xa3
   31758:	e59f106c 	ldr	r1, [pc, #108]	; 317cc <CHTTPDaemon::Worker()+0x430>
   3175c:	e59f0084 	ldr	r0, [pc, #132]	; 317e8 <CHTTPDaemon::Worker()+0x44c>
   31760:	ebffc7c6 	bl	23680 <assertion_failed>
   31764:	e3a020a4 	mov	r2, #164	; 0xa4
   31768:	e59f105c 	ldr	r1, [pc, #92]	; 317cc <CHTTPDaemon::Worker()+0x430>
   3176c:	e59f0078 	ldr	r0, [pc, #120]	; 317ec <CHTTPDaemon::Worker()+0x450>
   31770:	ebffc7c2 	bl	23680 <assertion_failed>
   31774:	ebffd0b4 	bl	25a4c <CLogger::Get()>
   31778:	e59f3070 	ldr	r3, [pc, #112]	; 317f0 <CHTTPDaemon::Worker()+0x454>
   3177c:	eaffffe9 	b	31728 <CHTTPDaemon::Worker()+0x38c>
   31780:	e3a020fb 	mov	r2, #251	; 0xfb
   31784:	e59f1040 	ldr	r1, [pc, #64]	; 317cc <CHTTPDaemon::Worker()+0x430>
   31788:	e59f0050 	ldr	r0, [pc, #80]	; 317e0 <CHTTPDaemon::Worker()+0x444>
   3178c:	ebffc7bb 	bl	23680 <assertion_failed>
   31790:	0003c90c 	.word	0x0003c90c
   31794:	0000019e 	.word	0x0000019e
   31798:	0003c8f0 	.word	0x0003c8f0
   3179c:	0003c968 	.word	0x0003c968
   317a0:	000001f5 	.word	0x000001f5
   317a4:	0003c8a8 	.word	0x0003c8a8
   317a8:	0003c900 	.word	0x0003c900
   317ac:	0003c6b8 	.word	0x0003c6b8
   317b0:	0003c904 	.word	0x0003c904
   317b4:	0003c6d4 	.word	0x0003c6d4
   317b8:	0003c9c4 	.word	0x0003c9c4
   317bc:	0003c9d8 	.word	0x0003c9d8
   317c0:	0003c868 	.word	0x0003c868
   317c4:	0003c8c0 	.word	0x0003c8c0
   317c8:	0003c890 	.word	0x0003c890
   317cc:	0003c6e8 	.word	0x0003c6e8
   317d0:	0003c7ac 	.word	0x0003c7ac
   317d4:	0003c8d8 	.word	0x0003c8d8
   317d8:	0003c85c 	.word	0x0003c85c
   317dc:	0003c874 	.word	0x0003c874
   317e0:	0003c918 	.word	0x0003c918
   317e4:	0003ca48 	.word	0x0003ca48
   317e8:	0003c930 	.word	0x0003c930
   317ec:	0003c954 	.word	0x0003c954
   317f0:	0003ca64 	.word	0x0003ca64

000317f4 <CHTTPDaemon::Listener()>:
   317f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   317f8:	e59030dc 	ldr	r3, [r0, #220]	; 0xdc
   317fc:	e24dd018 	sub	sp, sp, #24
   31800:	e3530000 	cmp	r3, #0
   31804:	0a000040 	beq	3190c <CHTTPDaemon::Listener()+0x118>
   31808:	e1a04000 	mov	r4, r0
   3180c:	e3a000a0 	mov	r0, #160	; 0xa0
   31810:	ebffe1b7 	bl	29ef4 <operator new(unsigned int)>
   31814:	e1a05000 	mov	r5, r0
   31818:	e3a02006 	mov	r2, #6
   3181c:	e59410dc 	ldr	r1, [r4, #220]	; 0xdc
   31820:	ebffc232 	bl	220f0 <CSocket::CSocket(CNetSubSystem*, int)>
   31824:	e58450e0 	str	r5, [r4, #224]	; 0xe0
   31828:	e1a00005 	mov	r0, r5
   3182c:	e1d41eb8 	ldrh	r1, [r4, #232]	; 0xe8
   31830:	ebffc095 	bl	21a8c <CSocket::Bind(unsigned short)>
   31834:	e3500000 	cmp	r0, #0
   31838:	ba000046 	blt	31958 <CHTTPDaemon::Listener()+0x164>
   3183c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   31840:	e3a0100a 	mov	r1, #10
   31844:	e5903000 	ldr	r3, [r0]
   31848:	e5933014 	ldr	r3, [r3, #20]
   3184c:	e12fff33 	blx	r3
   31850:	e3500000 	cmp	r0, #0
   31854:	ba000030 	blt	3191c <CHTTPDaemon::Listener()+0x128>
   31858:	e3a08002 	mov	r8, #2
   3185c:	e59f612c 	ldr	r6, [pc, #300]	; 31990 <CHTTPDaemon::Listener()+0x19c>
   31860:	e59f912c 	ldr	r9, [pc, #300]	; 31994 <CHTTPDaemon::Listener()+0x1a0>
   31864:	e59f712c 	ldr	r7, [pc, #300]	; 31998 <CHTTPDaemon::Listener()+0x1a4>
   31868:	e59fa12c 	ldr	sl, [pc, #300]	; 3199c <CHTTPDaemon::Listener()+0x1a8>
   3186c:	e28d0010 	add	r0, sp, #16
   31870:	ebffb8e5 	bl	1fc0c <CIPAddress::CIPAddress()>
   31874:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   31878:	e28d200e 	add	r2, sp, #14
   3187c:	e5903000 	ldr	r3, [r0]
   31880:	e28d1010 	add	r1, sp, #16
   31884:	e5933018 	ldr	r3, [r3, #24]
   31888:	e12fff33 	blx	r3
   3188c:	e2505000 	subs	r5, r0, #0
   31890:	0a000017 	beq	318f4 <CHTTPDaemon::Listener()+0x100>
   31894:	e5963000 	ldr	r3, [r6]
   31898:	e353000a 	cmp	r3, #10
   3189c:	9a00000b 	bls	318d0 <CHTTPDaemon::Listener()+0xdc>
   318a0:	ebffd069 	bl	25a4c <CLogger::Get()>
   318a4:	e1a03009 	mov	r3, r9
   318a8:	e1a02008 	mov	r2, r8
   318ac:	e1a01007 	mov	r1, r7
   318b0:	ebffcfa2 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   318b4:	e5953000 	ldr	r3, [r5]
   318b8:	e1a00005 	mov	r0, r5
   318bc:	e5933004 	ldr	r3, [r3, #4]
   318c0:	e12fff33 	blx	r3
   318c4:	e28d0010 	add	r0, sp, #16
   318c8:	ebffb8e5 	bl	1fc64 <CIPAddress::~CIPAddress()>
   318cc:	eaffffe6 	b	3186c <CHTTPDaemon::Listener()+0x78>
   318d0:	e5943000 	ldr	r3, [r4]
   318d4:	e1a02005 	mov	r2, r5
   318d8:	e593300c 	ldr	r3, [r3, #12]
   318dc:	e59410dc 	ldr	r1, [r4, #220]	; 0xdc
   318e0:	e1a00004 	mov	r0, r4
   318e4:	e12fff33 	blx	r3
   318e8:	e28d0010 	add	r0, sp, #16
   318ec:	ebffb8dc 	bl	1fc64 <CIPAddress::~CIPAddress()>
   318f0:	eaffffdd 	b	3186c <CHTTPDaemon::Listener()+0x78>
   318f4:	ebffd054 	bl	25a4c <CLogger::Get()>
   318f8:	e1a0300a 	mov	r3, sl
   318fc:	e1a02008 	mov	r2, r8
   31900:	e1a01007 	mov	r1, r7
   31904:	ebffcf8d 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   31908:	eaffffed 	b	318c4 <CHTTPDaemon::Listener()+0xd0>
   3190c:	e3a02058 	mov	r2, #88	; 0x58
   31910:	e59f1088 	ldr	r1, [pc, #136]	; 319a0 <CHTTPDaemon::Listener()+0x1ac>
   31914:	e59f0088 	ldr	r0, [pc, #136]	; 319a4 <CHTTPDaemon::Listener()+0x1b0>
   31918:	ebffc758 	bl	23680 <assertion_failed>
   3191c:	ebffd04a 	bl	25a4c <CLogger::Get()>
   31920:	e59f3080 	ldr	r3, [pc, #128]	; 319a8 <CHTTPDaemon::Listener()+0x1b4>
   31924:	e3a02001 	mov	r2, #1
   31928:	e59f1068 	ldr	r1, [pc, #104]	; 31998 <CHTTPDaemon::Listener()+0x1a4>
   3192c:	ebffcf83 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   31930:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   31934:	e3500000 	cmp	r0, #0
   31938:	0a000002 	beq	31948 <CHTTPDaemon::Listener()+0x154>
   3193c:	e5903000 	ldr	r3, [r0]
   31940:	e5933004 	ldr	r3, [r3, #4]
   31944:	e12fff33 	blx	r3
   31948:	e3a03000 	mov	r3, #0
   3194c:	e58430e0 	str	r3, [r4, #224]	; 0xe0
   31950:	e28dd018 	add	sp, sp, #24
   31954:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31958:	ebffd03b 	bl	25a4c <CLogger::Get()>
   3195c:	e1d42eb8 	ldrh	r2, [r4, #232]	; 0xe8
   31960:	e59f3044 	ldr	r3, [pc, #68]	; 319ac <CHTTPDaemon::Listener()+0x1b8>
   31964:	e58d2000 	str	r2, [sp]
   31968:	e59f1028 	ldr	r1, [pc, #40]	; 31998 <CHTTPDaemon::Listener()+0x1a4>
   3196c:	e3a02001 	mov	r2, #1
   31970:	ebffcf72 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   31974:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   31978:	e3500000 	cmp	r0, #0
   3197c:	1affffee 	bne	3193c <CHTTPDaemon::Listener()+0x148>
   31980:	e3a03000 	mov	r3, #0
   31984:	e58430e0 	str	r3, [r4, #224]	; 0xe0
   31988:	e28dd018 	add	sp, sp, #24
   3198c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31990:	0003e51c 	.word	0x0003e51c
   31994:	0003cad0 	.word	0x0003cad0
   31998:	0003c6d4 	.word	0x0003c6d4
   3199c:	0003cab4 	.word	0x0003cab4
   319a0:	0003c6e8 	.word	0x0003c6e8
   319a4:	00038efc 	.word	0x00038efc
   319a8:	0003ca9c 	.word	0x0003ca9c
   319ac:	0003ca7c 	.word	0x0003ca7c

000319b0 <CHTTPDaemon::Run()>:
   319b0:	e59030e0 	ldr	r3, [r0, #224]	; 0xe0
   319b4:	e3530000 	cmp	r3, #0
   319b8:	0a000000 	beq	319c0 <CHTTPDaemon::Run()+0x10>
   319bc:	eafffe76 	b	3139c <CHTTPDaemon::Worker()>
   319c0:	eaffff8b 	b	317f4 <CHTTPDaemon::Listener()>

000319c4 <CTFTPDaemon::CTFTPDaemon(CNetSubSystem*)>:
   319c4:	e92d4070 	push	{r4, r5, r6, lr}
   319c8:	e1a05001 	mov	r5, r1
   319cc:	e3a01902 	mov	r1, #32768	; 0x8000
   319d0:	e1a04000 	mov	r4, r0
   319d4:	ebffc4d8 	bl	22d3c <CTask::CTask(unsigned int)>
   319d8:	e3a03000 	mov	r3, #0
   319dc:	e59f2014 	ldr	r2, [pc, #20]	; 319f8 <CTFTPDaemon::CTFTPDaemon(CNetSubSystem*)+0x34>
   319e0:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   319e4:	e5842000 	str	r2, [r4]
   319e8:	e58430e0 	str	r3, [r4, #224]	; 0xe0
   319ec:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   319f0:	e1a00004 	mov	r0, r4
   319f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   319f8:	0003caec 	.word	0x0003caec

000319fc <CTFTPDaemon::~CTFTPDaemon()>:
   319fc:	e92d4010 	push	{r4, lr}
   31a00:	e1a04000 	mov	r4, r0
   31a04:	e59000e4 	ldr	r0, [r0, #228]	; 0xe4
   31a08:	e59f3050 	ldr	r3, [pc, #80]	; 31a60 <CTFTPDaemon::~CTFTPDaemon()+0x64>
   31a0c:	e3500000 	cmp	r0, #0
   31a10:	e5843000 	str	r3, [r4]
   31a14:	0a000002 	beq	31a24 <CTFTPDaemon::~CTFTPDaemon()+0x28>
   31a18:	e5903000 	ldr	r3, [r0]
   31a1c:	e5933004 	ldr	r3, [r3, #4]
   31a20:	e12fff33 	blx	r3
   31a24:	e3a03000 	mov	r3, #0
   31a28:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   31a2c:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   31a30:	e1500003 	cmp	r0, r3
   31a34:	0a000002 	beq	31a44 <CTFTPDaemon::~CTFTPDaemon()+0x48>
   31a38:	e5903000 	ldr	r3, [r0]
   31a3c:	e5933004 	ldr	r3, [r3, #4]
   31a40:	e12fff33 	blx	r3
   31a44:	e3a03000 	mov	r3, #0
   31a48:	e1a00004 	mov	r0, r4
   31a4c:	e58430e0 	str	r3, [r4, #224]	; 0xe0
   31a50:	e58430dc 	str	r3, [r4, #220]	; 0xdc
   31a54:	ebffc465 	bl	22bf0 <CTask::~CTask()>
   31a58:	e1a00004 	mov	r0, r4
   31a5c:	e8bd8010 	pop	{r4, pc}
   31a60:	0003caec 	.word	0x0003caec

00031a64 <CTFTPDaemon::~CTFTPDaemon()>:
   31a64:	e92d4010 	push	{r4, lr}
   31a68:	e1a04000 	mov	r4, r0
   31a6c:	ebffffe2 	bl	319fc <CTFTPDaemon::~CTFTPDaemon()>
   31a70:	e1a00004 	mov	r0, r4
   31a74:	e3a010e8 	mov	r1, #232	; 0xe8
   31a78:	ebffe12b 	bl	29f2c <operator delete(void*, unsigned int)>
   31a7c:	e1a00004 	mov	r0, r4
   31a80:	e8bd8010 	pop	{r4, pc}

00031a84 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>:
   31a84:	e92d4070 	push	{r4, r5, r6, lr}
   31a88:	e1a04003 	mov	r4, r3
   31a8c:	e3a03c05 	mov	r3, #1280	; 0x500
   31a90:	e24dd090 	sub	sp, sp, #144	; 0x90
   31a94:	e6bfcfb1 	rev16	ip, r1
   31a98:	e1a06000 	mov	r6, r0
   31a9c:	e1a01002 	mov	r1, r2
   31aa0:	e28d0010 	add	r0, sp, #16
   31aa4:	e1cdc0be 	strh	ip, [sp, #14]
   31aa8:	e1cd30bc 	strh	r3, [sp, #12]
   31aac:	e1dd5ab0 	ldrh	r5, [sp, #160]	; 0xa0
   31ab0:	ebffddcf 	bl	291f4 <strcpy>
   31ab4:	e3540000 	cmp	r4, #0
   31ab8:	0a00000d 	beq	31af4 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0x70>
   31abc:	e59600e0 	ldr	r0, [r6, #224]	; 0xe0
   31ac0:	e3500000 	cmp	r0, #0
   31ac4:	0a000015 	beq	31b20 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0x9c>
   31ac8:	e3550000 	cmp	r5, #0
   31acc:	0a000017 	beq	31b30 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0xac>
   31ad0:	e5903000 	ldr	r3, [r0]
   31ad4:	e88d0030 	stm	sp, {r4, r5}
   31ad8:	e28d100c 	add	r1, sp, #12
   31adc:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   31ae0:	e3a02084 	mov	r2, #132	; 0x84
   31ae4:	e3a03040 	mov	r3, #64	; 0x40
   31ae8:	e12fff34 	blx	r4
   31aec:	e28dd090 	add	sp, sp, #144	; 0x90
   31af0:	e8bd8070 	pop	{r4, r5, r6, pc}
   31af4:	e59600e4 	ldr	r0, [r6, #228]	; 0xe4
   31af8:	e3500000 	cmp	r0, #0
   31afc:	0a00000f 	beq	31b40 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0xbc>
   31b00:	e5903000 	ldr	r3, [r0]
   31b04:	e28d100c 	add	r1, sp, #12
   31b08:	e593401c 	ldr	r4, [r3, #28]
   31b0c:	e3a02084 	mov	r2, #132	; 0x84
   31b10:	e3a03040 	mov	r3, #64	; 0x40
   31b14:	e12fff34 	blx	r4
   31b18:	e28dd090 	add	sp, sp, #144	; 0x90
   31b1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   31b20:	e3a02e1d 	mov	r2, #464	; 0x1d0
   31b24:	e59f1024 	ldr	r1, [pc, #36]	; 31b50 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0xcc>
   31b28:	e59f0024 	ldr	r0, [pc, #36]	; 31b54 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0xd0>
   31b2c:	ebffc6d3 	bl	23680 <assertion_failed>
   31b30:	e59f2020 	ldr	r2, [pc, #32]	; 31b58 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0xd4>
   31b34:	e59f1014 	ldr	r1, [pc, #20]	; 31b50 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0xcc>
   31b38:	e59f001c 	ldr	r0, [pc, #28]	; 31b5c <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0xd8>
   31b3c:	ebffc6cf 	bl	23680 <assertion_failed>
   31b40:	e59f2018 	ldr	r2, [pc, #24]	; 31b60 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0xdc>
   31b44:	e59f1004 	ldr	r1, [pc, #4]	; 31b50 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0xcc>
   31b48:	e59f0014 	ldr	r0, [pc, #20]	; 31b64 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)+0xe0>
   31b4c:	ebffc6cb 	bl	23680 <assertion_failed>
   31b50:	0003cb14 	.word	0x0003cb14
   31b54:	0003cb24 	.word	0x0003cb24
   31b58:	000001d1 	.word	0x000001d1
   31b5c:	0003cb3c 	.word	0x0003cb3c
   31b60:	000001d6 	.word	0x000001d6
   31b64:	0003cb48 	.word	0x0003cb48

00031b68 <CTFTPDaemon::DoRead(char const*) [clone .part.0]>:
   31b68:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31b6c:	e24ddf93 	sub	sp, sp, #588	; 0x24c
   31b70:	e1a06000 	mov	r6, r0
   31b74:	e28d001c 	add	r0, sp, #28
   31b78:	ebffb61c 	bl	1f3f0 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   31b7c:	e28d001c 	add	r0, sp, #28
   31b80:	e3a01000 	mov	r1, #0
   31b84:	ebffb633 	bl	1f458 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   31b88:	e3a03001 	mov	r3, #1
   31b8c:	e3a0ac01 	mov	sl, #256	; 0x100
   31b90:	e3a07040 	mov	r7, #64	; 0x40
   31b94:	e3a0b004 	mov	fp, #4
   31b98:	e58d3014 	str	r3, [sp, #20]
   31b9c:	e3a02c03 	mov	r2, #768	; 0x300
   31ba0:	e5963000 	ldr	r3, [r6]
   31ba4:	e1cd24b4 	strh	r2, [sp, #68]	; 0x44
   31ba8:	e1cda4b6 	strh	sl, [sp, #70]	; 0x46
   31bac:	e5933018 	ldr	r3, [r3, #24]
   31bb0:	e3a02c02 	mov	r2, #512	; 0x200
   31bb4:	e28d1048 	add	r1, sp, #72	; 0x48
   31bb8:	e1a00006 	mov	r0, r6
   31bbc:	e12fff33 	blx	r3
   31bc0:	e2508000 	subs	r8, r0, #0
   31bc4:	ba00006e 	blt	31d84 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x21c>
   31bc8:	ebffdc6c 	bl	28d80 <CTimer::Get()>
   31bcc:	ebffd9b5 	bl	282a8 <CTimer::GetTicks() const>
   31bd0:	e1a09000 	mov	r9, r0
   31bd4:	e59d3014 	ldr	r3, [sp, #20]
   31bd8:	e2433001 	sub	r3, r3, #1
   31bdc:	e1a03483 	lsl	r3, r3, #9
   31be0:	e58d3010 	str	r3, [sp, #16]
   31be4:	e2883004 	add	r3, r8, #4
   31be8:	e58d300c 	str	r3, [sp, #12]
   31bec:	ebffdc63 	bl	28d80 <CTimer::Get()>
   31bf0:	ebffd9ac 	bl	282a8 <CTimer::GetTicks() const>
   31bf4:	e59f31d8 	ldr	r3, [pc, #472]	; 31dd4 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x26c>
   31bf8:	e0400009 	sub	r0, r0, r9
   31bfc:	e1500003 	cmp	r0, r3
   31c00:	8a000046 	bhi	31d20 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x1b8>
   31c04:	e59600e4 	ldr	r0, [r6, #228]	; 0xe4
   31c08:	e1a03007 	mov	r3, r7
   31c0c:	e5902000 	ldr	r2, [r0]
   31c10:	e28d1044 	add	r1, sp, #68	; 0x44
   31c14:	e592401c 	ldr	r4, [r2, #28]
   31c18:	e59d200c 	ldr	r2, [sp, #12]
   31c1c:	e12fff34 	blx	r4
   31c20:	e3500000 	cmp	r0, #0
   31c24:	ba00004c 	blt	31d5c <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x1f4>
   31c28:	e1a02008 	mov	r2, r8
   31c2c:	e59d1010 	ldr	r1, [sp, #16]
   31c30:	e28d001c 	add	r0, sp, #28
   31c34:	ebffb624 	bl	1f4cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   31c38:	ebffdc50 	bl	28d80 <CTimer::Get()>
   31c3c:	ebffd999 	bl	282a8 <CTimer::GetTicks() const>
   31c40:	e1a05000 	mov	r5, r0
   31c44:	ea000012 	b	31c94 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x12c>
   31c48:	ebffc5de 	bl	233c8 <CScheduler::Get()>
   31c4c:	ebffc54a 	bl	2317c <CScheduler::Yield()>
   31c50:	e59600e4 	ldr	r0, [r6, #228]	; 0xe4
   31c54:	e1a03007 	mov	r3, r7
   31c58:	e5902000 	ldr	r2, [r0]
   31c5c:	e28d1018 	add	r1, sp, #24
   31c60:	e5924020 	ldr	r4, [r2, #32]
   31c64:	e1a0200b 	mov	r2, fp
   31c68:	e12fff34 	blx	r4
   31c6c:	e3500000 	cmp	r0, #0
   31c70:	ba000018 	blt	31cd8 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x170>
   31c74:	e3500004 	cmp	r0, #4
   31c78:	0a00000c 	beq	31cb0 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x148>
   31c7c:	e1dd31b8 	ldrh	r3, [sp, #24]
   31c80:	e3530b01 	cmp	r3, #1024	; 0x400
   31c84:	0a000009 	beq	31cb0 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x148>
   31c88:	e1dd31ba 	ldrh	r3, [sp, #26]
   31c8c:	e153000a 	cmp	r3, sl
   31c90:	0a000006 	beq	31cb0 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x148>
   31c94:	ebffdc39 	bl	28d80 <CTimer::Get()>
   31c98:	ebffd982 	bl	282a8 <CTimer::GetTicks() const>
   31c9c:	e0404005 	sub	r4, r0, r5
   31ca0:	e28d001c 	add	r0, sp, #28
   31ca4:	ebffb5e9 	bl	1f450 <CRetransmissionTimeoutCalculator::GetRTO() const>
   31ca8:	e1540000 	cmp	r4, r0
   31cac:	3affffe5 	bcc	31c48 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0xe0>
   31cb0:	ebffdc32 	bl	28d80 <CTimer::Get()>
   31cb4:	ebffd97b 	bl	282a8 <CTimer::GetTicks() const>
   31cb8:	e0405005 	sub	r5, r0, r5
   31cbc:	e28d001c 	add	r0, sp, #28
   31cc0:	ebffb5e2 	bl	1f450 <CRetransmissionTimeoutCalculator::GetRTO() const>
   31cc4:	e1550000 	cmp	r5, r0
   31cc8:	3a000011 	bcc	31d14 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x1ac>
   31ccc:	e28d001c 	add	r0, sp, #28
   31cd0:	ebffb623 	bl	1f564 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>
   31cd4:	eaffffc4 	b	31bec <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x84>
   31cd8:	ebffcf5b 	bl	25a4c <CLogger::Get()>
   31cdc:	e3a02001 	mov	r2, #1
   31ce0:	e59f30f0 	ldr	r3, [pc, #240]	; 31dd8 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x270>
   31ce4:	e59f10f0 	ldr	r1, [pc, #240]	; 31ddc <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x274>
   31ce8:	ebffce94 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   31cec:	e5963000 	ldr	r3, [r6]
   31cf0:	e1a00006 	mov	r0, r6
   31cf4:	e5933014 	ldr	r3, [r3, #20]
   31cf8:	e12fff33 	blx	r3
   31cfc:	e3a04000 	mov	r4, #0
   31d00:	e28d001c 	add	r0, sp, #28
   31d04:	ebffb5d0 	bl	1f44c <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>
   31d08:	e1a00004 	mov	r0, r4
   31d0c:	e28ddf93 	add	sp, sp, #588	; 0x24c
   31d10:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31d14:	e59d1010 	ldr	r1, [sp, #16]
   31d18:	e28d001c 	add	r0, sp, #28
   31d1c:	ebffb64f 	bl	1f660 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   31d20:	ebffdc16 	bl	28d80 <CTimer::Get()>
   31d24:	ebffd95f 	bl	282a8 <CTimer::GetTicks() const>
   31d28:	e59f30a4 	ldr	r3, [pc, #164]	; 31dd4 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x26c>
   31d2c:	e0400009 	sub	r0, r0, r9
   31d30:	e1500003 	cmp	r0, r3
   31d34:	8a000022 	bhi	31dc4 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x25c>
   31d38:	e59d3014 	ldr	r3, [sp, #20]
   31d3c:	e3580c02 	cmp	r8, #512	; 0x200
   31d40:	e2833001 	add	r3, r3, #1
   31d44:	e6ff3073 	uxth	r3, r3
   31d48:	e58d3014 	str	r3, [sp, #20]
   31d4c:	1a000006 	bne	31d6c <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x204>
   31d50:	e6bfafb3 	rev16	sl, r3
   31d54:	e6ffa07a 	uxth	sl, sl
   31d58:	eaffff8f 	b	31b9c <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x34>
   31d5c:	ebffcf3a 	bl	25a4c <CLogger::Get()>
   31d60:	e59f3078 	ldr	r3, [pc, #120]	; 31de0 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x278>
   31d64:	e3a02001 	mov	r2, #1
   31d68:	eaffffdd 	b	31ce4 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x17c>
   31d6c:	e5963000 	ldr	r3, [r6]
   31d70:	e1a00006 	mov	r0, r6
   31d74:	e5933014 	ldr	r3, [r3, #20]
   31d78:	e12fff33 	blx	r3
   31d7c:	e3a04001 	mov	r4, #1
   31d80:	eaffffde 	b	31d00 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x198>
   31d84:	ebffcf30 	bl	25a4c <CLogger::Get()>
   31d88:	e59f3054 	ldr	r3, [pc, #84]	; 31de4 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x27c>
   31d8c:	e3a02001 	mov	r2, #1
   31d90:	e59f1044 	ldr	r1, [pc, #68]	; 31ddc <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x274>
   31d94:	ebffce69 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   31d98:	e3a03000 	mov	r3, #0
   31d9c:	e1a00006 	mov	r0, r6
   31da0:	e58d3000 	str	r3, [sp]
   31da4:	e1a01003 	mov	r1, r3
   31da8:	e59f2038 	ldr	r2, [pc, #56]	; 31de8 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x280>
   31dac:	ebffff34 	bl	31a84 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>
   31db0:	e5963000 	ldr	r3, [r6]
   31db4:	e1a00006 	mov	r0, r6
   31db8:	e5933014 	ldr	r3, [r3, #20]
   31dbc:	e12fff33 	blx	r3
   31dc0:	eaffffcd 	b	31cfc <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x194>
   31dc4:	ebffcf20 	bl	25a4c <CLogger::Get()>
   31dc8:	e59f301c 	ldr	r3, [pc, #28]	; 31dec <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x284>
   31dcc:	e3a02004 	mov	r2, #4
   31dd0:	eaffffc3 	b	31ce4 <CTFTPDaemon::DoRead(char const*) [clone .part.0]+0x17c>
   31dd4:	000009c3 	.word	0x000009c3
   31dd8:	0003cb94 	.word	0x0003cb94
   31ddc:	0003cb0c 	.word	0x0003cb0c
   31de0:	0003cb80 	.word	0x0003cb80
   31de4:	0003cb60 	.word	0x0003cb60
   31de8:	0003cb6c 	.word	0x0003cb6c
   31dec:	0003cba8 	.word	0x0003cba8

00031df0 <CTFTPDaemon::DoRead(char const*)>:
   31df0:	e92d4030 	push	{r4, r5, lr}
   31df4:	e59030e4 	ldr	r3, [r0, #228]	; 0xe4
   31df8:	e24dd00c 	sub	sp, sp, #12
   31dfc:	e3530000 	cmp	r3, #0
   31e00:	0a000014 	beq	31e58 <CTFTPDaemon::DoRead(char const*)+0x68>
   31e04:	e3510000 	cmp	r1, #0
   31e08:	0a000016 	beq	31e68 <CTFTPDaemon::DoRead(char const*)+0x78>
   31e0c:	e5903000 	ldr	r3, [r0]
   31e10:	e1a04000 	mov	r4, r0
   31e14:	e593300c 	ldr	r3, [r3, #12]
   31e18:	e12fff33 	blx	r3
   31e1c:	e2505000 	subs	r5, r0, #0
   31e20:	0a000003 	beq	31e34 <CTFTPDaemon::DoRead(char const*)+0x44>
   31e24:	e1a00004 	mov	r0, r4
   31e28:	e28dd00c 	add	sp, sp, #12
   31e2c:	e8bd4030 	pop	{r4, r5, lr}
   31e30:	eaffff4c 	b	31b68 <CTFTPDaemon::DoRead(char const*) [clone .part.0]>
   31e34:	e1a00004 	mov	r0, r4
   31e38:	e58d5000 	str	r5, [sp]
   31e3c:	e1a03005 	mov	r3, r5
   31e40:	e59f2030 	ldr	r2, [pc, #48]	; 31e78 <CTFTPDaemon::DoRead(char const*)+0x88>
   31e44:	e3a01001 	mov	r1, #1
   31e48:	ebffff0d 	bl	31a84 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>
   31e4c:	e1a00005 	mov	r0, r5
   31e50:	e28dd00c 	add	sp, sp, #12
   31e54:	e8bd8030 	pop	{r4, r5, pc}
   31e58:	e3a020e8 	mov	r2, #232	; 0xe8
   31e5c:	e59f1018 	ldr	r1, [pc, #24]	; 31e7c <CTFTPDaemon::DoRead(char const*)+0x8c>
   31e60:	e59f0018 	ldr	r0, [pc, #24]	; 31e80 <CTFTPDaemon::DoRead(char const*)+0x90>
   31e64:	ebffc605 	bl	23680 <assertion_failed>
   31e68:	e3a020ea 	mov	r2, #234	; 0xea
   31e6c:	e59f1008 	ldr	r1, [pc, #8]	; 31e7c <CTFTPDaemon::DoRead(char const*)+0x8c>
   31e70:	e59f000c 	ldr	r0, [pc, #12]	; 31e84 <CTFTPDaemon::DoRead(char const*)+0x94>
   31e74:	ebffc601 	bl	23680 <assertion_failed>
   31e78:	0003cbbc 	.word	0x0003cbbc
   31e7c:	0003cb14 	.word	0x0003cb14
   31e80:	0003cb48 	.word	0x0003cb48
   31e84:	0003c65c 	.word	0x0003c65c

00031e88 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]>:
   31e88:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31e8c:	e3a04000 	mov	r4, #0
   31e90:	e3a06b01 	mov	r6, #1024	; 0x400
   31e94:	e1a05000 	mov	r5, r0
   31e98:	e59000e4 	ldr	r0, [r0, #228]	; 0xe4
   31e9c:	e24ddf87 	sub	sp, sp, #540	; 0x21c
   31ea0:	e5903000 	ldr	r3, [r0]
   31ea4:	e28d1014 	add	r1, sp, #20
   31ea8:	e593701c 	ldr	r7, [r3, #28]
   31eac:	e3a02004 	mov	r2, #4
   31eb0:	e1cd61b4 	strh	r6, [sp, #20]
   31eb4:	e1cd41b6 	strh	r4, [sp, #22]
   31eb8:	e3a03040 	mov	r3, #64	; 0x40
   31ebc:	e12fff37 	blx	r7
   31ec0:	e1500004 	cmp	r0, r4
   31ec4:	ba00005a 	blt	32034 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x1ac>
   31ec8:	e3a0b001 	mov	fp, #1
   31ecc:	e3a07f7d 	mov	r7, #500	; 0x1f4
   31ed0:	e3a08040 	mov	r8, #64	; 0x40
   31ed4:	e3a09f81 	mov	r9, #516	; 0x204
   31ed8:	e58d600c 	str	r6, [sp, #12]
   31edc:	e6bf6fbb 	rev16	r6, fp
   31ee0:	e6ff6076 	uxth	r6, r6
   31ee4:	ebffdba5 	bl	28d80 <CTimer::Get()>
   31ee8:	ebffd8ee 	bl	282a8 <CTimer::GetTicks() const>
   31eec:	e1a04000 	mov	r4, r0
   31ef0:	ea00000b 	b	31f24 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x9c>
   31ef4:	ebffc533 	bl	233c8 <CScheduler::Get()>
   31ef8:	ebffc49f 	bl	2317c <CScheduler::Yield()>
   31efc:	e59500e4 	ldr	r0, [r5, #228]	; 0xe4
   31f00:	e1a03008 	mov	r3, r8
   31f04:	e5902000 	ldr	r2, [r0]
   31f08:	e28d1014 	add	r1, sp, #20
   31f0c:	e592a020 	ldr	sl, [r2, #32]
   31f10:	e1a02009 	mov	r2, r9
   31f14:	e12fff3a 	blx	sl
   31f18:	e3500000 	cmp	r0, #0
   31f1c:	ba000011 	blt	31f68 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0xe0>
   31f20:	1a000014 	bne	31f78 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0xf0>
   31f24:	ebffdb95 	bl	28d80 <CTimer::Get()>
   31f28:	ebffd8de 	bl	282a8 <CTimer::GetTicks() const>
   31f2c:	e0400004 	sub	r0, r0, r4
   31f30:	e1500007 	cmp	r0, r7
   31f34:	3affffee 	bcc	31ef4 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x6c>
   31f38:	ebffcec3 	bl	25a4c <CLogger::Get()>
   31f3c:	e3a02004 	mov	r2, #4
   31f40:	e59f3164 	ldr	r3, [pc, #356]	; 320ac <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x224>
   31f44:	e59f1164 	ldr	r1, [pc, #356]	; 320b0 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x228>
   31f48:	ebffcdfc 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   31f4c:	e5953000 	ldr	r3, [r5]
   31f50:	e1a00005 	mov	r0, r5
   31f54:	e5933014 	ldr	r3, [r3, #20]
   31f58:	e12fff33 	blx	r3
   31f5c:	e3a00000 	mov	r0, #0
   31f60:	e28ddf87 	add	sp, sp, #540	; 0x21c
   31f64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31f68:	ebffceb7 	bl	25a4c <CLogger::Get()>
   31f6c:	e59f3140 	ldr	r3, [pc, #320]	; 320b4 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x22c>
   31f70:	e3a02001 	mov	r2, #1
   31f74:	eafffff2 	b	31f44 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0xbc>
   31f78:	e2504004 	subs	r4, r0, #4
   31f7c:	4affffd8 	bmi	31ee4 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x5c>
   31f80:	e1dd31b4 	ldrh	r3, [sp, #20]
   31f84:	e3530c03 	cmp	r3, #768	; 0x300
   31f88:	1affffd5 	bne	31ee4 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x5c>
   31f8c:	e1dd21b6 	ldrh	r2, [sp, #22]
   31f90:	e6bf3fb2 	rev16	r3, r2
   31f94:	e6ff3073 	uxth	r3, r3
   31f98:	e04b3003 	sub	r3, fp, r3
   31f9c:	e3530000 	cmp	r3, #0
   31fa0:	ba00000c 	blt	31fd8 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x150>
   31fa4:	e1dd30bc 	ldrh	r3, [sp, #12]
   31fa8:	e59500e4 	ldr	r0, [r5, #228]	; 0xe4
   31fac:	e1cd31b0 	strh	r3, [sp, #16]
   31fb0:	e5903000 	ldr	r3, [r0]
   31fb4:	e28d1010 	add	r1, sp, #16
   31fb8:	e1cd21b2 	strh	r2, [sp, #18]
   31fbc:	e593a01c 	ldr	sl, [r3, #28]
   31fc0:	e3a02004 	mov	r2, #4
   31fc4:	e1a03008 	mov	r3, r8
   31fc8:	e12fff3a 	blx	sl
   31fcc:	e3500000 	cmp	r0, #0
   31fd0:	ba000022 	blt	32060 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x1d8>
   31fd4:	e1dd21b6 	ldrh	r2, [sp, #22]
   31fd8:	e1560002 	cmp	r6, r2
   31fdc:	1affffc0 	bne	31ee4 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x5c>
   31fe0:	e3540000 	cmp	r4, #0
   31fe4:	0a00000c 	beq	3201c <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x194>
   31fe8:	e5953000 	ldr	r3, [r5]
   31fec:	e1a02004 	mov	r2, r4
   31ff0:	e593301c 	ldr	r3, [r3, #28]
   31ff4:	e28d1018 	add	r1, sp, #24
   31ff8:	e1a00005 	mov	r0, r5
   31ffc:	e12fff33 	blx	r3
   32000:	e1540000 	cmp	r4, r0
   32004:	1a000018 	bne	3206c <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x1e4>
   32008:	e28bb001 	add	fp, fp, #1
   3200c:	e3540c02 	cmp	r4, #512	; 0x200
   32010:	e6ffb07b 	uxth	fp, fp
   32014:	e59f709c 	ldr	r7, [pc, #156]	; 320b8 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x230>
   32018:	0affffaf 	beq	31edc <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x54>
   3201c:	e5953000 	ldr	r3, [r5]
   32020:	e1a00005 	mov	r0, r5
   32024:	e5933014 	ldr	r3, [r3, #20]
   32028:	e12fff33 	blx	r3
   3202c:	e3a00001 	mov	r0, #1
   32030:	eaffffca 	b	31f60 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0xd8>
   32034:	ebffce84 	bl	25a4c <CLogger::Get()>
   32038:	e59f307c 	ldr	r3, [pc, #124]	; 320bc <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x234>
   3203c:	e3a02001 	mov	r2, #1
   32040:	e59f1068 	ldr	r1, [pc, #104]	; 320b0 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x228>
   32044:	ebffcdbd 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32048:	e5953000 	ldr	r3, [r5]
   3204c:	e1a00005 	mov	r0, r5
   32050:	e5933014 	ldr	r3, [r3, #20]
   32054:	e12fff33 	blx	r3
   32058:	e1a00004 	mov	r0, r4
   3205c:	eaffffbf 	b	31f60 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0xd8>
   32060:	ebffce79 	bl	25a4c <CLogger::Get()>
   32064:	e59f3050 	ldr	r3, [pc, #80]	; 320bc <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x234>
   32068:	eaffffc0 	b	31f70 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0xe8>
   3206c:	ebffce76 	bl	25a4c <CLogger::Get()>
   32070:	e59f3048 	ldr	r3, [pc, #72]	; 320c0 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x238>
   32074:	e3a02001 	mov	r2, #1
   32078:	e59f1030 	ldr	r1, [pc, #48]	; 320b0 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x228>
   3207c:	ebffcdaf 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32080:	e3a03000 	mov	r3, #0
   32084:	e1a00005 	mov	r0, r5
   32088:	e58d3000 	str	r3, [sp]
   3208c:	e59f2030 	ldr	r2, [pc, #48]	; 320c4 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0x23c>
   32090:	e3a01003 	mov	r1, #3
   32094:	ebfffe7a 	bl	31a84 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>
   32098:	e5953000 	ldr	r3, [r5]
   3209c:	e1a00005 	mov	r0, r5
   320a0:	e5933014 	ldr	r3, [r3, #20]
   320a4:	e12fff33 	blx	r3
   320a8:	eaffffab 	b	31f5c <CTFTPDaemon::DoWrite(char const*) [clone .part.1]+0xd4>
   320ac:	0003cba8 	.word	0x0003cba8
   320b0:	0003cb0c 	.word	0x0003cb0c
   320b4:	0003cbdc 	.word	0x0003cbdc
   320b8:	000009c4 	.word	0x000009c4
   320bc:	0003cbcc 	.word	0x0003cbcc
   320c0:	0003cbf0 	.word	0x0003cbf0
   320c4:	0003cc00 	.word	0x0003cc00

000320c8 <CTFTPDaemon::DoWrite(char const*)>:
   320c8:	e92d4030 	push	{r4, r5, lr}
   320cc:	e59030e4 	ldr	r3, [r0, #228]	; 0xe4
   320d0:	e24dd00c 	sub	sp, sp, #12
   320d4:	e3530000 	cmp	r3, #0
   320d8:	0a000014 	beq	32130 <CTFTPDaemon::DoWrite(char const*)+0x68>
   320dc:	e3510000 	cmp	r1, #0
   320e0:	0a000016 	beq	32140 <CTFTPDaemon::DoWrite(char const*)+0x78>
   320e4:	e5903000 	ldr	r3, [r0]
   320e8:	e1a04000 	mov	r4, r0
   320ec:	e5933010 	ldr	r3, [r3, #16]
   320f0:	e12fff33 	blx	r3
   320f4:	e2505000 	subs	r5, r0, #0
   320f8:	0a000003 	beq	3210c <CTFTPDaemon::DoWrite(char const*)+0x44>
   320fc:	e1a00004 	mov	r0, r4
   32100:	e28dd00c 	add	sp, sp, #12
   32104:	e8bd4030 	pop	{r4, r5, lr}
   32108:	eaffff5e 	b	31e88 <CTFTPDaemon::DoWrite(char const*) [clone .part.1]>
   3210c:	e1a00004 	mov	r0, r4
   32110:	e58d5000 	str	r5, [sp]
   32114:	e1a03005 	mov	r3, r5
   32118:	e59f2030 	ldr	r2, [pc, #48]	; 32150 <CTFTPDaemon::DoWrite(char const*)+0x88>
   3211c:	e3a01002 	mov	r1, #2
   32120:	ebfffe57 	bl	31a84 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>
   32124:	e1a00005 	mov	r0, r5
   32128:	e28dd00c 	add	sp, sp, #12
   3212c:	e8bd8030 	pop	{r4, r5, pc}
   32130:	e59f201c 	ldr	r2, [pc, #28]	; 32154 <CTFTPDaemon::DoWrite(char const*)+0x8c>
   32134:	e59f101c 	ldr	r1, [pc, #28]	; 32158 <CTFTPDaemon::DoWrite(char const*)+0x90>
   32138:	e59f001c 	ldr	r0, [pc, #28]	; 3215c <CTFTPDaemon::DoWrite(char const*)+0x94>
   3213c:	ebffc54f 	bl	23680 <assertion_failed>
   32140:	e59f2018 	ldr	r2, [pc, #24]	; 32160 <CTFTPDaemon::DoWrite(char const*)+0x98>
   32144:	e59f100c 	ldr	r1, [pc, #12]	; 32158 <CTFTPDaemon::DoWrite(char const*)+0x90>
   32148:	e59f0014 	ldr	r0, [pc, #20]	; 32164 <CTFTPDaemon::DoWrite(char const*)+0x9c>
   3214c:	ebffc54b 	bl	23680 <assertion_failed>
   32150:	0003cc0c 	.word	0x0003cc0c
   32154:	00000153 	.word	0x00000153
   32158:	0003cb14 	.word	0x0003cb14
   3215c:	0003cb48 	.word	0x0003cb48
   32160:	00000155 	.word	0x00000155
   32164:	0003c65c 	.word	0x0003c65c

00032168 <CTFTPDaemon::Run()>:
   32168:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3216c:	e59030e0 	ldr	r3, [r0, #224]	; 0xe0
   32170:	e24dd0bc 	sub	sp, sp, #188	; 0xbc
   32174:	e3530000 	cmp	r3, #0
   32178:	1a0000ca 	bne	324a8 <CTFTPDaemon::Run()+0x340>
   3217c:	e59030dc 	ldr	r3, [r0, #220]	; 0xdc
   32180:	e1a06000 	mov	r6, r0
   32184:	e3530000 	cmp	r3, #0
   32188:	0a0000ca 	beq	324b8 <CTFTPDaemon::Run()+0x350>
   3218c:	e3a000a0 	mov	r0, #160	; 0xa0
   32190:	ebffdf57 	bl	29ef4 <operator new(unsigned int)>
   32194:	e1a04000 	mov	r4, r0
   32198:	e3a02011 	mov	r2, #17
   3219c:	e59610dc 	ldr	r1, [r6, #220]	; 0xdc
   321a0:	ebffbfd2 	bl	220f0 <CSocket::CSocket(CNetSubSystem*, int)>
   321a4:	e58640e0 	str	r4, [r6, #224]	; 0xe0
   321a8:	e1a00004 	mov	r0, r4
   321ac:	e3a01045 	mov	r1, #69	; 0x45
   321b0:	ebffbe35 	bl	21a8c <CSocket::Bind(unsigned short)>
   321b4:	e3500000 	cmp	r0, #0
   321b8:	ba0000c2 	blt	324c8 <CTFTPDaemon::Run()+0x360>
   321bc:	e28d400c 	add	r4, sp, #12
   321c0:	e28d800a 	add	r8, sp, #10
   321c4:	e59fa320 	ldr	sl, [pc, #800]	; 324ec <CTFTPDaemon::Run()+0x384>
   321c8:	e59fb320 	ldr	fp, [pc, #800]	; 324f0 <CTFTPDaemon::Run()+0x388>
   321cc:	e59f9320 	ldr	r9, [pc, #800]	; 324f4 <CTFTPDaemon::Run()+0x38c>
   321d0:	ea000008 	b	321f8 <CTFTPDaemon::Run()+0x90>
   321d4:	e1dd20ba 	ldrh	r2, [sp, #10]
   321d8:	e1a03004 	mov	r3, r4
   321dc:	e58d2000 	str	r2, [sp]
   321e0:	e3a01004 	mov	r1, #4
   321e4:	e59f230c 	ldr	r2, [pc, #780]	; 324f8 <CTFTPDaemon::Run()+0x390>
   321e8:	e1a00006 	mov	r0, r6
   321ec:	ebfffe24 	bl	31a84 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>
   321f0:	e1a00004 	mov	r0, r4
   321f4:	ebffb69a 	bl	1fc64 <CIPAddress::~CIPAddress()>
   321f8:	e1a00004 	mov	r0, r4
   321fc:	ebffb682 	bl	1fc0c <CIPAddress::CIPAddress()>
   32200:	e3a02094 	mov	r2, #148	; 0x94
   32204:	e3a01000 	mov	r1, #0
   32208:	e28d0024 	add	r0, sp, #36	; 0x24
   3220c:	ebffdae8 	bl	28db4 <memset>
   32210:	e59600e0 	ldr	r0, [r6, #224]	; 0xe0
   32214:	e3a03000 	mov	r3, #0
   32218:	e5902000 	ldr	r2, [r0]
   3221c:	e88d0110 	stm	sp, {r4, r8}
   32220:	e28d1024 	add	r1, sp, #36	; 0x24
   32224:	e5925028 	ldr	r5, [r2, #40]	; 0x28
   32228:	e3a02092 	mov	r2, #146	; 0x92
   3222c:	e12fff35 	blx	r5
   32230:	e3500000 	cmp	r0, #0
   32234:	ba00004d 	blt	32370 <CTFTPDaemon::Run()+0x208>
   32238:	e2400002 	sub	r0, r0, #2
   3223c:	e3500003 	cmp	r0, #3
   32240:	daffffea 	ble	321f0 <CTFTPDaemon::Run()+0x88>
   32244:	e1dd52b4 	ldrh	r5, [sp, #36]	; 0x24
   32248:	e6bf5fb5 	rev16	r5, r5
   3224c:	e6ff5075 	uxth	r5, r5
   32250:	e2453001 	sub	r3, r5, #1
   32254:	e3530001 	cmp	r3, #1
   32258:	8affffdd 	bhi	321d4 <CTFTPDaemon::Run()+0x6c>
   3225c:	e28d0026 	add	r0, sp, #38	; 0x26
   32260:	ebffdb25 	bl	28efc <strlen>
   32264:	e2403001 	sub	r3, r0, #1
   32268:	e353007f 	cmp	r3, #127	; 0x7f
   3226c:	8a000045 	bhi	32388 <CTFTPDaemon::Run()+0x220>
   32270:	e2800001 	add	r0, r0, #1
   32274:	e28d3026 	add	r3, sp, #38	; 0x26
   32278:	e0837000 	add	r7, r3, r0
   3227c:	e1a00007 	mov	r0, r7
   32280:	e1a0100a 	mov	r1, sl
   32284:	ebffdb26 	bl	28f24 <strcmp>
   32288:	e3500000 	cmp	r0, #0
   3228c:	1a000045 	bne	323a8 <CTFTPDaemon::Run()+0x240>
   32290:	e28d0014 	add	r0, sp, #20
   32294:	ebffd1d2 	bl	269e4 <CString::CString()>
   32298:	e28d1014 	add	r1, sp, #20
   3229c:	e1a00004 	mov	r0, r4
   322a0:	ebffb757 	bl	20004 <CIPAddress::Format(CString*) const>
   322a4:	ebffcde8 	bl	25a4c <CLogger::Get()>
   322a8:	e1a07000 	mov	r7, r0
   322ac:	e28d0014 	add	r0, sp, #20
   322b0:	ebffd1e1 	bl	26a3c <CString::operator char const*() const>
   322b4:	e3550001 	cmp	r5, #1
   322b8:	e59f323c 	ldr	r3, [pc, #572]	; 324fc <CTFTPDaemon::Run()+0x394>
   322bc:	01a0300b 	moveq	r3, fp
   322c0:	e58d0004 	str	r0, [sp, #4]
   322c4:	e58d3000 	str	r3, [sp]
   322c8:	e1a00007 	mov	r0, r7
   322cc:	e59f322c 	ldr	r3, [pc, #556]	; 32500 <CTFTPDaemon::Run()+0x398>
   322d0:	e3a02004 	mov	r2, #4
   322d4:	e1a01009 	mov	r1, r9
   322d8:	ebffcd18 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   322dc:	e59630e4 	ldr	r3, [r6, #228]	; 0xe4
   322e0:	e3530000 	cmp	r3, #0
   322e4:	1a00006b 	bne	32498 <CTFTPDaemon::Run()+0x330>
   322e8:	e3a000a0 	mov	r0, #160	; 0xa0
   322ec:	ebffdf00 	bl	29ef4 <operator new(unsigned int)>
   322f0:	e1a07000 	mov	r7, r0
   322f4:	e3a02011 	mov	r2, #17
   322f8:	e59610dc 	ldr	r1, [r6, #220]	; 0xdc
   322fc:	ebffbf7b 	bl	220f0 <CSocket::CSocket(CNetSubSystem*, int)>
   32300:	e58670e4 	str	r7, [r6, #228]	; 0xe4
   32304:	e1a00007 	mov	r0, r7
   32308:	e1dd20ba 	ldrh	r2, [sp, #10]
   3230c:	e1a01004 	mov	r1, r4
   32310:	ebffbdf4 	bl	21ae8 <CSocket::Connect(CIPAddress&, unsigned short)>
   32314:	e3500000 	cmp	r0, #0
   32318:	ba000048 	blt	32440 <CTFTPDaemon::Run()+0x2d8>
   3231c:	e3550002 	cmp	r5, #2
   32320:	e28d1026 	add	r1, sp, #38	; 0x26
   32324:	e1a00006 	mov	r0, r6
   32328:	1a000030 	bne	323f0 <CTFTPDaemon::Run()+0x288>
   3232c:	ebffff65 	bl	320c8 <CTFTPDaemon::DoWrite(char const*)>
   32330:	e1a07000 	mov	r7, r0
   32334:	e59600e4 	ldr	r0, [r6, #228]	; 0xe4
   32338:	e3500000 	cmp	r0, #0
   3233c:	0a000002 	beq	3234c <CTFTPDaemon::Run()+0x1e4>
   32340:	e5903000 	ldr	r3, [r0]
   32344:	e5933004 	ldr	r3, [r3, #4]
   32348:	e12fff33 	blx	r3
   3234c:	e3a03000 	mov	r3, #0
   32350:	e1570003 	cmp	r7, r3
   32354:	e58630e4 	str	r3, [r6, #228]	; 0xe4
   32358:	1a000027 	bne	323fc <CTFTPDaemon::Run()+0x294>
   3235c:	e28d0014 	add	r0, sp, #20
   32360:	ebffd16c 	bl	26918 <CString::~CString()>
   32364:	e1a00004 	mov	r0, r4
   32368:	ebffb63d 	bl	1fc64 <CIPAddress::~CIPAddress()>
   3236c:	eaffffa1 	b	321f8 <CTFTPDaemon::Run()+0x90>
   32370:	ebffcdb5 	bl	25a4c <CLogger::Get()>
   32374:	e59f3188 	ldr	r3, [pc, #392]	; 32504 <CTFTPDaemon::Run()+0x39c>
   32378:	e3a02001 	mov	r2, #1
   3237c:	e1a01009 	mov	r1, r9
   32380:	ebffccee 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32384:	eaffff99 	b	321f0 <CTFTPDaemon::Run()+0x88>
   32388:	e1dd20ba 	ldrh	r2, [sp, #10]
   3238c:	e1a03004 	mov	r3, r4
   32390:	e58d2000 	str	r2, [sp]
   32394:	e3a01000 	mov	r1, #0
   32398:	e59f2168 	ldr	r2, [pc, #360]	; 32508 <CTFTPDaemon::Run()+0x3a0>
   3239c:	e1a00006 	mov	r0, r6
   323a0:	ebfffdb7 	bl	31a84 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>
   323a4:	eaffff91 	b	321f0 <CTFTPDaemon::Run()+0x88>
   323a8:	e59f115c 	ldr	r1, [pc, #348]	; 3250c <CTFTPDaemon::Run()+0x3a4>
   323ac:	e1a00007 	mov	r0, r7
   323b0:	ebffdadb 	bl	28f24 <strcmp>
   323b4:	e3500000 	cmp	r0, #0
   323b8:	0affffb4 	beq	32290 <CTFTPDaemon::Run()+0x128>
   323bc:	e1a00007 	mov	r0, r7
   323c0:	e59f1148 	ldr	r1, [pc, #328]	; 32510 <CTFTPDaemon::Run()+0x3a8>
   323c4:	ebffdad6 	bl	28f24 <strcmp>
   323c8:	e3500000 	cmp	r0, #0
   323cc:	0affffaf 	beq	32290 <CTFTPDaemon::Run()+0x128>
   323d0:	e1dd20ba 	ldrh	r2, [sp, #10]
   323d4:	e1a03004 	mov	r3, r4
   323d8:	e58d2000 	str	r2, [sp]
   323dc:	e3a01000 	mov	r1, #0
   323e0:	e59f212c 	ldr	r2, [pc, #300]	; 32514 <CTFTPDaemon::Run()+0x3ac>
   323e4:	e1a00006 	mov	r0, r6
   323e8:	ebfffda5 	bl	31a84 <CTFTPDaemon::SendError(unsigned short, char const*, CIPAddress*, unsigned short)>
   323ec:	eaffff7f 	b	321f0 <CTFTPDaemon::Run()+0x88>
   323f0:	ebfffe7e 	bl	31df0 <CTFTPDaemon::DoRead(char const*)>
   323f4:	e1a07000 	mov	r7, r0
   323f8:	eaffffcd 	b	32334 <CTFTPDaemon::Run()+0x1cc>
   323fc:	ebffcd92 	bl	25a4c <CLogger::Get()>
   32400:	e59f3110 	ldr	r3, [pc, #272]	; 32518 <CTFTPDaemon::Run()+0x3b0>
   32404:	e3550001 	cmp	r5, #1
   32408:	e59f210c 	ldr	r2, [pc, #268]	; 3251c <CTFTPDaemon::Run()+0x3b4>
   3240c:	11a02003 	movne	r2, r3
   32410:	e1a07000 	mov	r7, r0
   32414:	e28d0014 	add	r0, sp, #20
   32418:	e1a05002 	mov	r5, r2
   3241c:	ebffd186 	bl	26a3c <CString::operator char const*() const>
   32420:	e58d5000 	str	r5, [sp]
   32424:	e58d0004 	str	r0, [sp, #4]
   32428:	e59f30f0 	ldr	r3, [pc, #240]	; 32520 <CTFTPDaemon::Run()+0x3b8>
   3242c:	e1a00007 	mov	r0, r7
   32430:	e3a02004 	mov	r2, #4
   32434:	e1a01009 	mov	r1, r9
   32438:	ebffccc0 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3243c:	eaffffc6 	b	3235c <CTFTPDaemon::Run()+0x1f4>
   32440:	ebffcd81 	bl	25a4c <CLogger::Get()>
   32444:	e1a05000 	mov	r5, r0
   32448:	e28d0014 	add	r0, sp, #20
   3244c:	ebffd17a 	bl	26a3c <CString::operator char const*() const>
   32450:	e1dd30ba 	ldrh	r3, [sp, #10]
   32454:	e3a02001 	mov	r2, #1
   32458:	e88d0009 	stm	sp, {r0, r3}
   3245c:	e1a01009 	mov	r1, r9
   32460:	e1a00005 	mov	r0, r5
   32464:	e59f30b8 	ldr	r3, [pc, #184]	; 32524 <CTFTPDaemon::Run()+0x3bc>
   32468:	ebffccb4 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3246c:	e59600e4 	ldr	r0, [r6, #228]	; 0xe4
   32470:	e3500000 	cmp	r0, #0
   32474:	0a000002 	beq	32484 <CTFTPDaemon::Run()+0x31c>
   32478:	e5903000 	ldr	r3, [r0]
   3247c:	e5933004 	ldr	r3, [r3, #4]
   32480:	e12fff33 	blx	r3
   32484:	e3a03000 	mov	r3, #0
   32488:	e28d0014 	add	r0, sp, #20
   3248c:	e58630e4 	str	r3, [r6, #228]	; 0xe4
   32490:	ebffd120 	bl	26918 <CString::~CString()>
   32494:	eaffff55 	b	321f0 <CTFTPDaemon::Run()+0x88>
   32498:	e3a020ba 	mov	r2, #186	; 0xba
   3249c:	e59f1084 	ldr	r1, [pc, #132]	; 32528 <CTFTPDaemon::Run()+0x3c0>
   324a0:	e59f0084 	ldr	r0, [pc, #132]	; 3252c <CTFTPDaemon::Run()+0x3c4>
   324a4:	ebffc475 	bl	23680 <assertion_failed>
   324a8:	e3a02073 	mov	r2, #115	; 0x73
   324ac:	e59f1074 	ldr	r1, [pc, #116]	; 32528 <CTFTPDaemon::Run()+0x3c0>
   324b0:	e59f0078 	ldr	r0, [pc, #120]	; 32530 <CTFTPDaemon::Run()+0x3c8>
   324b4:	ebffc471 	bl	23680 <assertion_failed>
   324b8:	e3a02074 	mov	r2, #116	; 0x74
   324bc:	e59f1064 	ldr	r1, [pc, #100]	; 32528 <CTFTPDaemon::Run()+0x3c0>
   324c0:	e59f006c 	ldr	r0, [pc, #108]	; 32534 <CTFTPDaemon::Run()+0x3cc>
   324c4:	ebffc46d 	bl	23680 <assertion_failed>
   324c8:	ebffcd5f 	bl	25a4c <CLogger::Get()>
   324cc:	e3a02045 	mov	r2, #69	; 0x45
   324d0:	e59f3060 	ldr	r3, [pc, #96]	; 32538 <CTFTPDaemon::Run()+0x3d0>
   324d4:	e58d2000 	str	r2, [sp]
   324d8:	e59f1014 	ldr	r1, [pc, #20]	; 324f4 <CTFTPDaemon::Run()+0x38c>
   324dc:	e3a02001 	mov	r2, #1
   324e0:	ebffcc96 	bl	25740 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   324e4:	e28dd0bc 	add	sp, sp, #188	; 0xbc
   324e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   324ec:	0003cc94 	.word	0x0003cc94
   324f0:	0003cc34 	.word	0x0003cc34
   324f4:	0003cb0c 	.word	0x0003cb0c
   324f8:	0003cc6c 	.word	0x0003cc6c
   324fc:	0003cc2c 	.word	0x0003cc2c
   32500:	0003cd14 	.word	0x0003cd14
   32504:	0003cc54 	.word	0x0003cc54
   32508:	0003cc80 	.word	0x0003cc80
   3250c:	0003cc9c 	.word	0x0003cc9c
   32510:	0003cca4 	.word	0x0003cca4
   32514:	0003ccf8 	.word	0x0003ccf8
   32518:	0003cc24 	.word	0x0003cc24
   3251c:	0003cc20 	.word	0x0003cc20
   32520:	0003ccdc 	.word	0x0003ccdc
   32524:	0003ccc4 	.word	0x0003ccc4
   32528:	0003cb14 	.word	0x0003cb14
   3252c:	0003ccac 	.word	0x0003ccac
   32530:	0003cc3c 	.word	0x0003cc3c
   32534:	00038efc 	.word	0x00038efc
   32538:	00039e90 	.word	0x00039e90

0003253c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   3253c:	e3a01000 	mov	r1, #0
   32540:	e3a02001 	mov	r2, #1
   32544:	e92d4030 	push	{r4, r5, lr}
   32548:	e1a04000 	mov	r4, r0
   3254c:	e5903020 	ldr	r3, [r0, #32]
   32550:	e24dd014 	sub	sp, sp, #20
   32554:	e5c32011 	strb	r2, [r3, #17]
   32558:	e5c3100c 	strb	r1, [r3, #12]
   3255c:	e5c3100d 	strb	r1, [r3, #13]
   32560:	e5c3100e 	strb	r1, [r3, #14]
   32564:	e5c3100f 	strb	r1, [r3, #15]
   32568:	e5c31010 	strb	r1, [r3, #16]
   3256c:	e5c31012 	strb	r1, [r3, #18]
   32570:	e5c31013 	strb	r1, [r3, #19]
   32574:	e28d0008 	add	r0, sp, #8
   32578:	ebffc461 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3257c:	e59f306c 	ldr	r3, [pc, #108]	; 325f0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   32580:	e5942020 	ldr	r2, [r4, #32]
   32584:	e28d0008 	add	r0, sp, #8
   32588:	e58d3000 	str	r3, [sp]
   3258c:	e59f1060 	ldr	r1, [pc, #96]	; 325f4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   32590:	e283300c 	add	r3, r3, #12
   32594:	ebffc466 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   32598:	e2505000 	subs	r5, r0, #0
   3259c:	0a000008 	beq	325c4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   325a0:	e5942020 	ldr	r2, [r4, #32]
   325a4:	e5d2300c 	ldrb	r3, [r2, #12]
   325a8:	e5d2000d 	ldrb	r0, [r2, #13]
   325ac:	e5d2100e 	ldrb	r1, [r2, #14]
   325b0:	e1833400 	orr	r3, r3, r0, lsl #8
   325b4:	e5d2200f 	ldrb	r2, [r2, #15]
   325b8:	e1833801 	orr	r3, r3, r1, lsl #16
   325bc:	e1933c02 	orrs	r3, r3, r2, lsl #24
   325c0:	0a000005 	beq	325dc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   325c4:	e3a05000 	mov	r5, #0
   325c8:	e28d0008 	add	r0, sp, #8
   325cc:	ebffc453 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   325d0:	e1a00005 	mov	r0, r5
   325d4:	e28dd014 	add	sp, sp, #20
   325d8:	e8bd8030 	pop	{r4, r5, pc}
   325dc:	e28d0008 	add	r0, sp, #8
   325e0:	ebffc44e 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   325e4:	e1a00005 	mov	r0, r5
   325e8:	e28dd014 	add	sp, sp, #20
   325ec:	e8bd8030 	pop	{r4, r5, pc}
   325f0:	00000408 	.word	0x00000408
   325f4:	0004800b 	.word	0x0004800b

000325f8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   325f8:	e92d4030 	push	{r4, r5, lr}
   325fc:	e3510000 	cmp	r1, #0
   32600:	13520000 	cmpne	r2, #0
   32604:	e1a04000 	mov	r4, r0
   32608:	e3a05000 	mov	r5, #0
   3260c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   32610:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
   32614:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   32618:	e8840006 	stm	r4, {r1, r2}
   3261c:	e5843010 	str	r3, [r4, #16]
   32620:	e584c00c 	str	ip, [r4, #12]
   32624:	e5840008 	str	r0, [r4, #8]
   32628:	e5845014 	str	r5, [r4, #20]
   3262c:	e5845018 	str	r5, [r4, #24]
   32630:	e584501c 	str	r5, [r4, #28]
   32634:	e5845020 	str	r5, [r4, #32]
   32638:	1a000011 	bne	32684 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   3263c:	e1a01005 	mov	r1, r5
   32640:	e28d000c 	add	r0, sp, #12
   32644:	ebffc42e 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   32648:	e3a03014 	mov	r3, #20
   3264c:	e58d5000 	str	r5, [sp]
   32650:	e28d000c 	add	r0, sp, #12
   32654:	e08d2003 	add	r2, sp, r3
   32658:	e59f10c8 	ldr	r1, [pc, #200]	; 32728 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x130>
   3265c:	ebffc434 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   32660:	e1500005 	cmp	r0, r5
   32664:	1a000026 	bne	32704 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x10c>
   32668:	e3a02d0a 	mov	r2, #640	; 0x280
   3266c:	e3a03e1e 	mov	r3, #480	; 0x1e0
   32670:	e884000c 	stm	r4, {r2, r3}
   32674:	e28d000c 	add	r0, sp, #12
   32678:	ebffc428 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   3267c:	e5940008 	ldr	r0, [r4, #8]
   32680:	e5943010 	ldr	r3, [r4, #16]
   32684:	e3500000 	cmp	r0, #0
   32688:	0a000019 	beq	326f4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   3268c:	e594200c 	ldr	r2, [r4, #12]
   32690:	e3520000 	cmp	r2, #0
   32694:	0a000016 	beq	326f4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   32698:	e3530008 	cmp	r3, #8
   3269c:	8a000006 	bhi	326bc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc4>
   326a0:	e59f0084 	ldr	r0, [pc, #132]	; 3272c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
   326a4:	ebffde13 	bl	29ef8 <operator new[](unsigned int)>
   326a8:	e3a02b01 	mov	r2, #1024	; 0x400
   326ac:	e5840020 	str	r0, [r4, #32]
   326b0:	e3a01000 	mov	r1, #0
   326b4:	e2800014 	add	r0, r0, #20
   326b8:	ebffd9bd 	bl	28db4 <memset>
   326bc:	e3a02070 	mov	r2, #112	; 0x70
   326c0:	e59f1068 	ldr	r1, [pc, #104]	; 32730 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x138>
   326c4:	e2840024 	add	r0, r4, #36	; 0x24
   326c8:	ebffdc30 	bl	29790 <memcpy>
   326cc:	e994000f 	ldmib	r4, {r0, r1, r2, r3}
   326d0:	e5840034 	str	r0, [r4, #52]	; 0x34
   326d4:	e1a00004 	mov	r0, r4
   326d8:	e594c000 	ldr	ip, [r4]
   326dc:	e5841044 	str	r1, [r4, #68]	; 0x44
   326e0:	e584c030 	str	ip, [r4, #48]	; 0x30
   326e4:	e5842048 	str	r2, [r4, #72]	; 0x48
   326e8:	e5843058 	str	r3, [r4, #88]	; 0x58
   326ec:	e28dd02c 	add	sp, sp, #44	; 0x2c
   326f0:	e8bd8030 	pop	{r4, r5, pc}
   326f4:	e8940006 	ldm	r4, {r1, r2}
   326f8:	e5841008 	str	r1, [r4, #8]
   326fc:	e584200c 	str	r2, [r4, #12]
   32700:	eaffffe4 	b	32698 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   32704:	e59d2020 	ldr	r2, [sp, #32]
   32708:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   3270c:	e2420d0a 	sub	r0, r2, #640	; 0x280
   32710:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   32714:	e3510f96 	cmp	r1, #600	; 0x258
   32718:	93500c05 	cmpls	r0, #1280	; 0x500
   3271c:	e884000c 	stm	r4, {r2, r3}
   32720:	9affffd3 	bls	32674 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   32724:	eaffffcf 	b	32668 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>
   32728:	00040003 	.word	0x00040003
   3272c:	00000414 	.word	0x00000414
   32730:	0003e2dc 	.word	0x0003e2dc

00032734 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   32734:	e92d4010 	push	{r4, lr}
   32738:	e1a04000 	mov	r4, r0
   3273c:	e3a01014 	mov	r1, #20
   32740:	e5900020 	ldr	r0, [r0, #32]
   32744:	ebffddf8 	bl	29f2c <operator delete(void*, unsigned int)>
   32748:	e1a00004 	mov	r0, r4
   3274c:	e8bd8010 	pop	{r4, pc}

00032750 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   32750:	e5903010 	ldr	r3, [r0, #16]
   32754:	e3530008 	cmp	r3, #8
   32758:	812fff1e 	bxhi	lr
   3275c:	e1a03982 	lsl	r3, r2, #19
   32760:	e1a0c5a2 	lsr	ip, r2, #11
   32764:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   32768:	e183318c 	orr	r3, r3, ip, lsl #3
   3276c:	e1a02282 	lsl	r2, r2, #5
   32770:	e5900020 	ldr	r0, [r0, #32]
   32774:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   32778:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   3277c:	e1822003 	orr	r2, r2, r3
   32780:	e2811004 	add	r1, r1, #4
   32784:	e0801101 	add	r1, r0, r1, lsl #2
   32788:	e1a0c422 	lsr	ip, r2, #8
   3278c:	e1a00822 	lsr	r0, r2, #16
   32790:	e1a03c22 	lsr	r3, r2, #24
   32794:	e5c12004 	strb	r2, [r1, #4]
   32798:	e5c1c005 	strb	ip, [r1, #5]
   3279c:	e5c10006 	strb	r0, [r1, #6]
   327a0:	e5c13007 	strb	r3, [r1, #7]
   327a4:	e12fff1e 	bx	lr

000327a8 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   327a8:	e5903010 	ldr	r3, [r0, #16]
   327ac:	e3530008 	cmp	r3, #8
   327b0:	812fff1e 	bxhi	lr
   327b4:	e5903020 	ldr	r3, [r0, #32]
   327b8:	e2811004 	add	r1, r1, #4
   327bc:	e0831101 	add	r1, r3, r1, lsl #2
   327c0:	e1a0c422 	lsr	ip, r2, #8
   327c4:	e1a00822 	lsr	r0, r2, #16
   327c8:	e1a03c22 	lsr	r3, r2, #24
   327cc:	e5c12004 	strb	r2, [r1, #4]
   327d0:	e5c1c005 	strb	ip, [r1, #5]
   327d4:	e5c10006 	strb	r0, [r1, #6]
   327d8:	e5c13007 	strb	r3, [r1, #7]
   327dc:	e12fff1e 	bx	lr

000327e0 <CBcmFrameBuffer::Initialize()>:
   327e0:	e92d4030 	push	{r4, r5, lr}
   327e4:	e1a04000 	mov	r4, r0
   327e8:	e24dd00c 	sub	sp, sp, #12
   327ec:	e3a01000 	mov	r1, #0
   327f0:	e1a0000d 	mov	r0, sp
   327f4:	ebffc3c2 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   327f8:	e2841024 	add	r1, r4, #36	; 0x24
   327fc:	e1a0000d 	mov	r0, sp
   32800:	e3a02070 	mov	r2, #112	; 0x70
   32804:	ebffc407 	bl	23828 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   32808:	e2505000 	subs	r5, r0, #0
   3280c:	0a00001f 	beq	32890 <CBcmFrameBuffer::Initialize()+0xb0>
   32810:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   32814:	e3530000 	cmp	r3, #0
   32818:	0a00001b 	beq	3288c <CBcmFrameBuffer::Initialize()+0xac>
   3281c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   32820:	e3530000 	cmp	r3, #0
   32824:	0a000018 	beq	3288c <CBcmFrameBuffer::Initialize()+0xac>
   32828:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   3282c:	e3530000 	cmp	r3, #0
   32830:	0a000015 	beq	3288c <CBcmFrameBuffer::Initialize()+0xac>
   32834:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   32838:	e3530000 	cmp	r3, #0
   3283c:	0a000012 	beq	3288c <CBcmFrameBuffer::Initialize()+0xac>
   32840:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   32844:	e3530000 	cmp	r3, #0
   32848:	0a00000f 	beq	3288c <CBcmFrameBuffer::Initialize()+0xac>
   3284c:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   32850:	e3530000 	cmp	r3, #0
   32854:	0a00000c 	beq	3288c <CBcmFrameBuffer::Initialize()+0xac>
   32858:	e5940010 	ldr	r0, [r4, #16]
   3285c:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   32860:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   32864:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   32868:	e3500008 	cmp	r0, #8
   3286c:	e5843014 	str	r3, [r4, #20]
   32870:	e5841018 	str	r1, [r4, #24]
   32874:	e584201c 	str	r2, [r4, #28]
   32878:	8a000004 	bhi	32890 <CBcmFrameBuffer::Initialize()+0xb0>
   3287c:	e1a00004 	mov	r0, r4
   32880:	ebffff2d 	bl	3253c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   32884:	e1a05000 	mov	r5, r0
   32888:	ea000000 	b	32890 <CBcmFrameBuffer::Initialize()+0xb0>
   3288c:	e1a05003 	mov	r5, r3
   32890:	e1a0000d 	mov	r0, sp
   32894:	ebffc3a1 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   32898:	e1a00005 	mov	r0, r5
   3289c:	e28dd00c 	add	sp, sp, #12
   328a0:	e8bd8030 	pop	{r4, r5, pc}

000328a4 <CBcmFrameBuffer::GetWidth() const>:
   328a4:	e5900000 	ldr	r0, [r0]
   328a8:	e12fff1e 	bx	lr

000328ac <CBcmFrameBuffer::GetHeight() const>:
   328ac:	e5900004 	ldr	r0, [r0, #4]
   328b0:	e12fff1e 	bx	lr

000328b4 <CBcmFrameBuffer::GetVirtWidth() const>:
   328b4:	e5900008 	ldr	r0, [r0, #8]
   328b8:	e12fff1e 	bx	lr

000328bc <CBcmFrameBuffer::GetVirtHeight() const>:
   328bc:	e590000c 	ldr	r0, [r0, #12]
   328c0:	e12fff1e 	bx	lr

000328c4 <CBcmFrameBuffer::GetPitch() const>:
   328c4:	e590001c 	ldr	r0, [r0, #28]
   328c8:	e12fff1e 	bx	lr

000328cc <CBcmFrameBuffer::GetDepth() const>:
   328cc:	e5900010 	ldr	r0, [r0, #16]
   328d0:	e12fff1e 	bx	lr

000328d4 <CBcmFrameBuffer::GetBuffer() const>:
   328d4:	e5900014 	ldr	r0, [r0, #20]
   328d8:	e12fff1e 	bx	lr

000328dc <CBcmFrameBuffer::GetSize() const>:
   328dc:	e5900018 	ldr	r0, [r0, #24]
   328e0:	e12fff1e 	bx	lr

000328e4 <CBcmFrameBuffer::UpdatePalette()>:
   328e4:	e5903010 	ldr	r3, [r0, #16]
   328e8:	e3530008 	cmp	r3, #8
   328ec:	9a000001 	bls	328f8 <CBcmFrameBuffer::UpdatePalette()+0x14>
   328f0:	e3a00001 	mov	r0, #1
   328f4:	e12fff1e 	bx	lr
   328f8:	eaffff0f 	b	3253c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

000328fc <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   328fc:	e92d4070 	push	{r4, r5, r6, lr}
   32900:	e24dd028 	sub	sp, sp, #40	; 0x28
   32904:	e1a05001 	mov	r5, r1
   32908:	e28d000c 	add	r0, sp, #12
   3290c:	e3a01000 	mov	r1, #0
   32910:	e1a06002 	mov	r6, r2
   32914:	ebffc37a 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   32918:	e3a03008 	mov	r3, #8
   3291c:	e58d3000 	str	r3, [sp]
   32920:	e3a03014 	mov	r3, #20
   32924:	e28d000c 	add	r0, sp, #12
   32928:	e08d2003 	add	r2, sp, r3
   3292c:	e59f1040 	ldr	r1, [pc, #64]	; 32974 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x78>
   32930:	e58d5020 	str	r5, [sp, #32]
   32934:	e58d6024 	str	r6, [sp, #36]	; 0x24
   32938:	ebffc37d 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3293c:	e2504000 	subs	r4, r0, #0
   32940:	0a000006 	beq	32960 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   32944:	e59d3020 	ldr	r3, [sp, #32]
   32948:	e1550003 	cmp	r5, r3
   3294c:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   32950:	13a04000 	movne	r4, #0
   32954:	00444006 	subeq	r4, r4, r6
   32958:	016f4f14 	clzeq	r4, r4
   3295c:	01a042a4 	lsreq	r4, r4, #5
   32960:	e28d000c 	add	r0, sp, #12
   32964:	ebffc36d 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   32968:	e1a00004 	mov	r0, r4
   3296c:	e28dd028 	add	sp, sp, #40	; 0x28
   32970:	e8bd8070 	pop	{r4, r5, r6, pc}
   32974:	00048009 	.word	0x00048009

00032978 <CBcmFrameBuffer::WaitForVerticalSync()>:
   32978:	e92d4010 	push	{r4, lr}
   3297c:	e24dd020 	sub	sp, sp, #32
   32980:	e28d0008 	add	r0, sp, #8
   32984:	e3a01000 	mov	r1, #0
   32988:	ebffc35d 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3298c:	e3a03000 	mov	r3, #0
   32990:	e58d3000 	str	r3, [sp]
   32994:	e3a03010 	mov	r3, #16
   32998:	e59f1020 	ldr	r1, [pc, #32]	; 329c0 <CBcmFrameBuffer::WaitForVerticalSync()+0x48>
   3299c:	e08d2003 	add	r2, sp, r3
   329a0:	e28d0008 	add	r0, sp, #8
   329a4:	ebffc362 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   329a8:	e1a04000 	mov	r4, r0
   329ac:	e28d0008 	add	r0, sp, #8
   329b0:	ebffc35a 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   329b4:	e1a00004 	mov	r0, r4
   329b8:	e28dd020 	add	sp, sp, #32
   329bc:	e8bd8010 	pop	{r4, pc}
   329c0:	0004800e 	.word	0x0004800e

000329c4 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   329c4:	e92d4010 	push	{r4, lr}
   329c8:	e24dd020 	sub	sp, sp, #32
   329cc:	e1a04001 	mov	r4, r1
   329d0:	e28d0008 	add	r0, sp, #8
   329d4:	e3a01000 	mov	r1, #0
   329d8:	ebffc349 	bl	23704 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   329dc:	e3a03004 	mov	r3, #4
   329e0:	e58d3000 	str	r3, [sp]
   329e4:	e3a03010 	mov	r3, #16
   329e8:	e59f1024 	ldr	r1, [pc, #36]	; 32a14 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)+0x50>
   329ec:	e08d2003 	add	r2, sp, r3
   329f0:	e28d0008 	add	r0, sp, #8
   329f4:	e58d401c 	str	r4, [sp, #28]
   329f8:	ebffc34d 	bl	23734 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   329fc:	e1a04000 	mov	r4, r0
   32a00:	e28d0008 	add	r0, sp, #8
   32a04:	ebffc345 	bl	23720 <CBcmPropertyTags::~CBcmPropertyTags()>
   32a08:	e1a00004 	mov	r0, r4
   32a0c:	e28dd020 	add	sp, sp, #32
   32a10:	e8bd8010 	pop	{r4, pc}
   32a14:	0004800f 	.word	0x0004800f

00032a18 <CCharGenerator::CCharGenerator()>:
   32a18:	e3a03008 	mov	r3, #8
   32a1c:	e5803000 	str	r3, [r0]
   32a20:	e12fff1e 	bx	lr

00032a24 <CCharGenerator::~CCharGenerator()>:
   32a24:	e12fff1e 	bx	lr

00032a28 <CCharGenerator::GetCharWidth() const>:
   32a28:	e5900000 	ldr	r0, [r0]
   32a2c:	e12fff1e 	bx	lr

00032a30 <CCharGenerator::GetCharHeight() const>:
   32a30:	e3a00013 	mov	r0, #19
   32a34:	e12fff1e 	bx	lr

00032a38 <CCharGenerator::GetUnderline() const>:
   32a38:	e3a00010 	mov	r0, #16
   32a3c:	e12fff1e 	bx	lr

00032a40 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   32a40:	e6ef1071 	uxtb	r1, r1
   32a44:	e2411021 	sub	r1, r1, #33	; 0x21
   32a48:	e35100de 	cmp	r1, #222	; 0xde
   32a4c:	8a00000c 	bhi	32a84 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x44>
   32a50:	e5900000 	ldr	r0, [r0]
   32a54:	e1500002 	cmp	r0, r2
   32a58:	9a00000b 	bls	32a8c <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x4c>
   32a5c:	e353000f 	cmp	r3, #15
   32a60:	8a000007 	bhi	32a84 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x44>
   32a64:	e3a0c080 	mov	ip, #128	; 0x80
   32a68:	e59f0030 	ldr	r0, [pc, #48]	; 32aa0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x60>
   32a6c:	e0801201 	add	r1, r0, r1, lsl #4
   32a70:	e7d13003 	ldrb	r3, [r1, r3]
   32a74:	e013325c 	ands	r3, r3, ip, asr r2
   32a78:	13a00001 	movne	r0, #1
   32a7c:	03a00000 	moveq	r0, #0
   32a80:	e12fff1e 	bx	lr
   32a84:	e3a00000 	mov	r0, #0
   32a88:	e12fff1e 	bx	lr
   32a8c:	e92d4010 	push	{r4, lr}
   32a90:	e3a0204e 	mov	r2, #78	; 0x4e
   32a94:	e59f1008 	ldr	r1, [pc, #8]	; 32aa4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x64>
   32a98:	e59f0008 	ldr	r0, [pc, #8]	; 32aa8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x68>
   32a9c:	ebffc2f7 	bl	23680 <assertion_failed>
   32aa0:	0003cd30 	.word	0x0003cd30
   32aa4:	0003db20 	.word	0x0003db20
   32aa8:	0003db34 	.word	0x0003db34

00032aac <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   32aac:	e92d4070 	push	{r4, r5, r6, lr}
   32ab0:	e1a05001 	mov	r5, r1
   32ab4:	e1a04000 	mov	r4, r0
   32ab8:	e1a06002 	mov	r6, r2
   32abc:	ebffcedc 	bl	26634 <CMachineInfo::Get()>
   32ac0:	e1a01005 	mov	r1, r5
   32ac4:	ebffce83 	bl	264d8 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   32ac8:	e3a05000 	mov	r5, #0
   32acc:	e5840000 	str	r0, [r4]
   32ad0:	e584600c 	str	r6, [r4, #12]
   32ad4:	e5845004 	str	r5, [r4, #4]
   32ad8:	e5845008 	str	r5, [r4, #8]
   32adc:	e5c45010 	strb	r5, [r4, #16]
   32ae0:	e5845014 	str	r5, [r4, #20]
   32ae4:	e5845018 	str	r5, [r4, #24]
   32ae8:	e5c4501c 	strb	r5, [r4, #28]
   32aec:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   32af0:	e5943000 	ldr	r3, [r4]
   32af4:	e3530080 	cmp	r3, #128	; 0x80
   32af8:	0a000022 	beq	32b88 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xdc>
   32afc:	e353000c 	cmp	r3, #12
   32b00:	8a000024 	bhi	32b98 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xec>
   32b04:	e1a01005 	mov	r1, r5
   32b08:	e3a0003f 	mov	r0, #63	; 0x3f
   32b0c:	ebffdcec 	bl	29ec4 <operator new[](unsigned int, int)>
   32b10:	e3a0c001 	mov	ip, #1
   32b14:	e280301f 	add	r3, r0, #31
   32b18:	e3c3301f 	bic	r3, r3, #31
   32b1c:	e59f2084 	ldr	r2, [pc, #132]	; 32ba8 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xfc>
   32b20:	e9840009 	stmib	r4, {r0, r3}
   32b24:	e5835018 	str	r5, [r3, #24]
   32b28:	e583501c 	str	r5, [r3, #28]
   32b2c:	e5923ff0 	ldr	r3, [r2, #4080]	; 0xff0
   32b30:	e5941000 	ldr	r1, [r4]
   32b34:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32b38:	e183311c 	orr	r3, r3, ip, lsl r1
   32b3c:	e5823ff0 	str	r3, [r2, #4080]	; 0xff0
   32b40:	ebffd85c 	bl	28cb8 <CTimer::SimpleusDelay(unsigned int)>
   32b44:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   32b48:	e5943000 	ldr	r3, [r4]
   32b4c:	e2833602 	add	r3, r3, #2097152	; 0x200000
   32b50:	e2833070 	add	r3, r3, #112	; 0x70
   32b54:	e1a03403 	lsl	r3, r3, #8
   32b58:	e5832000 	str	r2, [r3]
   32b5c:	e5942000 	ldr	r2, [r4]
   32b60:	e2822602 	add	r2, r2, #2097152	; 0x200000
   32b64:	e2822070 	add	r2, r2, #112	; 0x70
   32b68:	e1a02402 	lsl	r2, r2, #8
   32b6c:	e5923000 	ldr	r3, [r2]
   32b70:	e3530000 	cmp	r3, #0
   32b74:	bafffffc 	blt	32b6c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xc0>
   32b78:	e3a03000 	mov	r3, #0
   32b7c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   32b80:	e1a00004 	mov	r0, r4
   32b84:	e8bd8070 	pop	{r4, r5, r6, pc}
   32b88:	e59f101c 	ldr	r1, [pc, #28]	; 32bac <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x100>
   32b8c:	e3a02064 	mov	r2, #100	; 0x64
   32b90:	e2810010 	add	r0, r1, #16
   32b94:	ebffc2b9 	bl	23680 <assertion_failed>
   32b98:	e59f100c 	ldr	r1, [pc, #12]	; 32bac <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x100>
   32b9c:	e3a02065 	mov	r2, #101	; 0x65
   32ba0:	e2810030 	add	r0, r1, #48	; 0x30
   32ba4:	ebffc2b5 	bl	23680 <assertion_failed>
   32ba8:	20007000 	.word	0x20007000
   32bac:	0003db4c 	.word	0x0003db4c

00032bb0 <CDMAChannel::~CDMAChannel()>:
   32bb0:	e92d4010 	push	{r4, lr}
   32bb4:	e3a03000 	mov	r3, #0
   32bb8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   32bbc:	e5903000 	ldr	r3, [r0]
   32bc0:	e353000c 	cmp	r3, #12
   32bc4:	8a00002d 	bhi	32c80 <CDMAChannel::~CDMAChannel()+0xd0>
   32bc8:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   32bcc:	e2833602 	add	r3, r3, #2097152	; 0x200000
   32bd0:	e2833070 	add	r3, r3, #112	; 0x70
   32bd4:	e1a03403 	lsl	r3, r3, #8
   32bd8:	e5832000 	str	r2, [r3]
   32bdc:	e1a04000 	mov	r4, r0
   32be0:	e5900000 	ldr	r0, [r0]
   32be4:	e2802602 	add	r2, r0, #2097152	; 0x200000
   32be8:	e2822070 	add	r2, r2, #112	; 0x70
   32bec:	e1a02402 	lsl	r2, r2, #8
   32bf0:	e5923000 	ldr	r3, [r2]
   32bf4:	e3530000 	cmp	r3, #0
   32bf8:	bafffffc 	blt	32bf0 <CDMAChannel::~CDMAChannel()+0x40>
   32bfc:	e3a0c001 	mov	ip, #1
   32c00:	e59f1098 	ldr	r1, [pc, #152]	; 32ca0 <CDMAChannel::~CDMAChannel()+0xf0>
   32c04:	e3a02000 	mov	r2, #0
   32c08:	e5913ff0 	ldr	r3, [r1, #4080]	; 0xff0
   32c0c:	e1c3301c 	bic	r3, r3, ip, lsl r0
   32c10:	e5813ff0 	str	r3, [r1, #4080]	; 0xff0
   32c14:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   32c18:	e594000c 	ldr	r0, [r4, #12]
   32c1c:	e5842014 	str	r2, [r4, #20]
   32c20:	e1500002 	cmp	r0, r2
   32c24:	0a000004 	beq	32c3c <CDMAChannel::~CDMAChannel()+0x8c>
   32c28:	e5d43010 	ldrb	r3, [r4, #16]
   32c2c:	e1530002 	cmp	r3, r2
   32c30:	1a00000c 	bne	32c68 <CDMAChannel::~CDMAChannel()+0xb8>
   32c34:	e3a03000 	mov	r3, #0
   32c38:	e584300c 	str	r3, [r4, #12]
   32c3c:	ebffce7c 	bl	26634 <CMachineInfo::Get()>
   32c40:	e5941000 	ldr	r1, [r4]
   32c44:	ebffce56 	bl	265a4 <CMachineInfo::FreeDMAChannel(unsigned int)>
   32c48:	e3a03000 	mov	r3, #0
   32c4c:	e5940004 	ldr	r0, [r4, #4]
   32c50:	e5843008 	str	r3, [r4, #8]
   32c54:	e1500003 	cmp	r0, r3
   32c58:	0a000000 	beq	32c60 <CDMAChannel::~CDMAChannel()+0xb0>
   32c5c:	ebffdcac 	bl	29f14 <operator delete[](void*)>
   32c60:	e1a00004 	mov	r0, r4
   32c64:	e8bd8010 	pop	{r4, pc}
   32c68:	e5941000 	ldr	r1, [r4]
   32c6c:	e351000c 	cmp	r1, #12
   32c70:	8a000006 	bhi	32c90 <CDMAChannel::~CDMAChannel()+0xe0>
   32c74:	e2811010 	add	r1, r1, #16
   32c78:	ebffe104 	bl	2b090 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   32c7c:	eaffffec 	b	32c34 <CDMAChannel::~CDMAChannel()+0x84>
   32c80:	e59f101c 	ldr	r1, [pc, #28]	; 32ca4 <CDMAChannel::~CDMAChannel()+0xf4>
   32c84:	e3a0208d 	mov	r2, #141	; 0x8d
   32c88:	e2810030 	add	r0, r1, #48	; 0x30
   32c8c:	ebffc27b 	bl	23680 <assertion_failed>
   32c90:	e59f100c 	ldr	r1, [pc, #12]	; 32ca4 <CDMAChannel::~CDMAChannel()+0xf4>
   32c94:	e3a0209f 	mov	r2, #159	; 0x9f
   32c98:	e281004c 	add	r0, r1, #76	; 0x4c
   32c9c:	ebffc277 	bl	23680 <assertion_failed>
   32ca0:	20007000 	.word	0x20007000
   32ca4:	0003db4c 	.word	0x0003db4c

00032ca8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   32ca8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   32cac:	e2514000 	subs	r4, r1, #0
   32cb0:	e24dd00c 	sub	sp, sp, #12
   32cb4:	e59dc020 	ldr	ip, [sp, #32]
   32cb8:	e5dd7024 	ldrb	r7, [sp, #36]	; 0x24
   32cbc:	0a000052 	beq	32e0c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x164>
   32cc0:	e3520000 	cmp	r2, #0
   32cc4:	0a000054 	beq	32e1c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x174>
   32cc8:	e3530000 	cmp	r3, #0
   32ccc:	0a000056 	beq	32e2c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x184>
   32cd0:	e35c000f 	cmp	ip, #15
   32cd4:	8a000058 	bhi	32e3c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x194>
   32cd8:	e5901008 	ldr	r1, [r0, #8]
   32cdc:	e3510000 	cmp	r1, #0
   32ce0:	0a000059 	beq	32e4c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1a4>
   32ce4:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   32ce8:	8a00005b 	bhi	32e5c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1b4>
   32cec:	e590e000 	ldr	lr, [r0]
   32cf0:	e28ee602 	add	lr, lr, #2097152	; 0x200000
   32cf4:	e28ee070 	add	lr, lr, #112	; 0x70
   32cf8:	e1a0e40e 	lsl	lr, lr, #8
   32cfc:	e59ee020 	ldr	lr, [lr, #32]
   32d00:	e1a0ee2e 	lsr	lr, lr, #28
   32d04:	e22ee001 	eor	lr, lr, #1
   32d08:	e3530801 	cmp	r3, #65536	; 0x10000
   32d0c:	338ee001 	orrcc	lr, lr, #1
   32d10:	e31e0001 	tst	lr, #1
   32d14:	0a000054 	beq	32e6c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c4>
   32d18:	e3a0e000 	mov	lr, #0
   32d1c:	e1a0c60c 	lsl	ip, ip, #12
   32d20:	e38cce33 	orr	ip, ip, #816	; 0x330
   32d24:	e1a0542c 	lsr	r5, ip, #8
   32d28:	e3c26103 	bic	r6, r2, #-1073741824	; 0xc0000000
   32d2c:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
   32d30:	e5c1c000 	strb	ip, [r1]
   32d34:	e5c15001 	strb	r5, [r1, #1]
   32d38:	e1a0582c 	lsr	r5, ip, #16
   32d3c:	e1a0cc2c 	lsr	ip, ip, #24
   32d40:	e5c15002 	strb	r5, [r1, #2]
   32d44:	e5c1c003 	strb	ip, [r1, #3]
   32d48:	e3c45103 	bic	r5, r4, #-1073741824	; 0xc0000000
   32d4c:	e1a0c426 	lsr	ip, r6, #8
   32d50:	e3855101 	orr	r5, r5, #1073741824	; 0x40000000
   32d54:	e5c1c005 	strb	ip, [r1, #5]
   32d58:	e1a0c826 	lsr	ip, r6, #16
   32d5c:	e5c1c006 	strb	ip, [r1, #6]
   32d60:	e1a0c425 	lsr	ip, r5, #8
   32d64:	e5c16004 	strb	r6, [r1, #4]
   32d68:	e5c15008 	strb	r5, [r1, #8]
   32d6c:	e1a06c26 	lsr	r6, r6, #24
   32d70:	e5c1c009 	strb	ip, [r1, #9]
   32d74:	e1a0c825 	lsr	ip, r5, #16
   32d78:	e1a05c25 	lsr	r5, r5, #24
   32d7c:	e157000e 	cmp	r7, lr
   32d80:	e5c16007 	strb	r6, [r1, #7]
   32d84:	e5c1c00a 	strb	ip, [r1, #10]
   32d88:	e1a06423 	lsr	r6, r3, #8
   32d8c:	e5c1500b 	strb	r5, [r1, #11]
   32d90:	e1a0cc23 	lsr	ip, r3, #24
   32d94:	e1a05823 	lsr	r5, r3, #16
   32d98:	e5c1e010 	strb	lr, [r1, #16]
   32d9c:	e5c1e011 	strb	lr, [r1, #17]
   32da0:	e5c1e012 	strb	lr, [r1, #18]
   32da4:	e5c1e013 	strb	lr, [r1, #19]
   32da8:	e5c1e014 	strb	lr, [r1, #20]
   32dac:	e5c1e015 	strb	lr, [r1, #21]
   32db0:	e5c1e016 	strb	lr, [r1, #22]
   32db4:	e5c1e017 	strb	lr, [r1, #23]
   32db8:	e5c1300c 	strb	r3, [r1, #12]
   32dbc:	e5c1600d 	strb	r6, [r1, #13]
   32dc0:	e1a0e005 	mov	lr, r5
   32dc4:	e5c1500e 	strb	r5, [r1, #14]
   32dc8:	e5c1c00f 	strb	ip, [r1, #15]
   32dcc:	1a000002 	bne	32ddc <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x134>
   32dd0:	e5807020 	str	r7, [r0, #32]
   32dd4:	e28dd00c 	add	sp, sp, #12
   32dd8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   32ddc:	e5804020 	str	r4, [r0, #32]
   32de0:	e5803024 	str	r3, [r0, #36]	; 0x24
   32de4:	e1a01003 	mov	r1, r3
   32de8:	e1a00002 	mov	r0, r2
   32dec:	e58d3004 	str	r3, [sp, #4]
   32df0:	ebffdfb2 	bl	2acc0 <CleanAndInvalidateDataCacheRange>
   32df4:	e59d3004 	ldr	r3, [sp, #4]
   32df8:	e1a00004 	mov	r0, r4
   32dfc:	e1a01003 	mov	r1, r3
   32e00:	e28dd00c 	add	sp, sp, #12
   32e04:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   32e08:	eaffdfac 	b	2acc0 <CleanAndInvalidateDataCacheRange>
   32e0c:	e59f1068 	ldr	r1, [pc, #104]	; 32e7c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   32e10:	e3a020ba 	mov	r2, #186	; 0xba
   32e14:	e2810060 	add	r0, r1, #96	; 0x60
   32e18:	ebffc218 	bl	23680 <assertion_failed>
   32e1c:	e59f1058 	ldr	r1, [pc, #88]	; 32e7c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   32e20:	e3a020bb 	mov	r2, #187	; 0xbb
   32e24:	e2810074 	add	r0, r1, #116	; 0x74
   32e28:	ebffc214 	bl	23680 <assertion_failed>
   32e2c:	e59f1048 	ldr	r1, [pc, #72]	; 32e7c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   32e30:	e3a020bc 	mov	r2, #188	; 0xbc
   32e34:	e2810084 	add	r0, r1, #132	; 0x84
   32e38:	ebffc210 	bl	23680 <assertion_failed>
   32e3c:	e59f1038 	ldr	r1, [pc, #56]	; 32e7c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   32e40:	e3a020bd 	mov	r2, #189	; 0xbd
   32e44:	e2810090 	add	r0, r1, #144	; 0x90
   32e48:	ebffc20c 	bl	23680 <assertion_failed>
   32e4c:	e59f1028 	ldr	r1, [pc, #40]	; 32e7c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   32e50:	e3a020bf 	mov	r2, #191	; 0xbf
   32e54:	e28100a4 	add	r0, r1, #164	; 0xa4
   32e58:	ebffc208 	bl	23680 <assertion_failed>
   32e5c:	e59f1018 	ldr	r1, [pc, #24]	; 32e7c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   32e60:	e3a020c0 	mov	r2, #192	; 0xc0
   32e64:	e28100bc 	add	r0, r1, #188	; 0xbc
   32e68:	ebffc204 	bl	23680 <assertion_failed>
   32e6c:	e59f1008 	ldr	r1, [pc, #8]	; 32e7c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1d4>
   32e70:	e3a020c2 	mov	r2, #194	; 0xc2
   32e74:	e28100d4 	add	r0, r1, #212	; 0xd4
   32e78:	ebffc200 	bl	23680 <assertion_failed>
   32e7c:	0003db4c 	.word	0x0003db4c

00032e80 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   32e80:	e92d4070 	push	{r4, r5, r6, lr}
   32e84:	e251c000 	subs	ip, r1, #0
   32e88:	e5dde010 	ldrb	lr, [sp, #16]
   32e8c:	0a000043 	beq	32fa0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x120>
   32e90:	e3530000 	cmp	r3, #0
   32e94:	0a000045 	beq	32fb0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x130>
   32e98:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   32e9c:	8a000047 	bhi	32fc0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x140>
   32ea0:	e5901000 	ldr	r1, [r0]
   32ea4:	e2811602 	add	r1, r1, #2097152	; 0x200000
   32ea8:	e2811070 	add	r1, r1, #112	; 0x70
   32eac:	e1a01401 	lsl	r1, r1, #8
   32eb0:	e5911020 	ldr	r1, [r1, #32]
   32eb4:	e1a01e21 	lsr	r1, r1, #28
   32eb8:	e2211001 	eor	r1, r1, #1
   32ebc:	e3530801 	cmp	r3, #65536	; 0x10000
   32ec0:	33811001 	orrcc	r1, r1, #1
   32ec4:	e3110001 	tst	r1, #1
   32ec8:	0a000048 	beq	32ff0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x170>
   32ecc:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
   32ed0:	0a00003e 	beq	32fd0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x150>
   32ed4:	e5901008 	ldr	r1, [r0, #8]
   32ed8:	e282247e 	add	r2, r2, #2113929216	; 0x7e000000
   32edc:	e3510000 	cmp	r1, #0
   32ee0:	0a00003e 	beq	32fe0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x160>
   32ee4:	e3a05000 	mov	r5, #0
   32ee8:	e59f4110 	ldr	r4, [pc, #272]	; 33000 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x180>
   32eec:	e5c12004 	strb	r2, [r1, #4]
   32ef0:	e184480e 	orr	r4, r4, lr, lsl #16
   32ef4:	e1a06424 	lsr	r6, r4, #8
   32ef8:	e3cce103 	bic	lr, ip, #-1073741824	; 0xc0000000
   32efc:	e38ee101 	orr	lr, lr, #1073741824	; 0x40000000
   32f00:	e5c14000 	strb	r4, [r1]
   32f04:	e5c16001 	strb	r6, [r1, #1]
   32f08:	e1a06824 	lsr	r6, r4, #16
   32f0c:	e1a04c24 	lsr	r4, r4, #24
   32f10:	e5c14003 	strb	r4, [r1, #3]
   32f14:	e1a0442e 	lsr	r4, lr, #8
   32f18:	e5c1e008 	strb	lr, [r1, #8]
   32f1c:	e5c14009 	strb	r4, [r1, #9]
   32f20:	e1a0482e 	lsr	r4, lr, #16
   32f24:	e1a0ec2e 	lsr	lr, lr, #24
   32f28:	e5c1400a 	strb	r4, [r1, #10]
   32f2c:	e5c1e00b 	strb	lr, [r1, #11]
   32f30:	e1a04422 	lsr	r4, r2, #8
   32f34:	e1a0e822 	lsr	lr, r2, #16
   32f38:	e5c15010 	strb	r5, [r1, #16]
   32f3c:	e5c15011 	strb	r5, [r1, #17]
   32f40:	e5c15012 	strb	r5, [r1, #18]
   32f44:	e5c15013 	strb	r5, [r1, #19]
   32f48:	e5c15014 	strb	r5, [r1, #20]
   32f4c:	e5c15015 	strb	r5, [r1, #21]
   32f50:	e5c15016 	strb	r5, [r1, #22]
   32f54:	e5c15017 	strb	r5, [r1, #23]
   32f58:	e5c14005 	strb	r4, [r1, #5]
   32f5c:	e5c1e006 	strb	lr, [r1, #6]
   32f60:	e1a05423 	lsr	r5, r3, #8
   32f64:	e1a04823 	lsr	r4, r3, #16
   32f68:	e1a0ec23 	lsr	lr, r3, #24
   32f6c:	e1a02c22 	lsr	r2, r2, #24
   32f70:	e5c16002 	strb	r6, [r1, #2]
   32f74:	e5c1500d 	strb	r5, [r1, #13]
   32f78:	e5c1400e 	strb	r4, [r1, #14]
   32f7c:	e5c1e00f 	strb	lr, [r1, #15]
   32f80:	e5c1300c 	strb	r3, [r1, #12]
   32f84:	e5c12007 	strb	r2, [r1, #7]
   32f88:	e8bd4070 	pop	{r4, r5, r6, lr}
   32f8c:	e580c020 	str	ip, [r0, #32]
   32f90:	e5803024 	str	r3, [r0, #36]	; 0x24
   32f94:	e1a01003 	mov	r1, r3
   32f98:	e1a0000c 	mov	r0, ip
   32f9c:	eaffdf47 	b	2acc0 <CleanAndInvalidateDataCacheRange>
   32fa0:	e59f105c 	ldr	r1, [pc, #92]	; 33004 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x184>
   32fa4:	e3a020e8 	mov	r2, #232	; 0xe8
   32fa8:	e2810060 	add	r0, r1, #96	; 0x60
   32fac:	ebffc1b3 	bl	23680 <assertion_failed>
   32fb0:	e59f104c 	ldr	r1, [pc, #76]	; 33004 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x184>
   32fb4:	e3a020e9 	mov	r2, #233	; 0xe9
   32fb8:	e2810084 	add	r0, r1, #132	; 0x84
   32fbc:	ebffc1af 	bl	23680 <assertion_failed>
   32fc0:	e59f103c 	ldr	r1, [pc, #60]	; 33004 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x184>
   32fc4:	e3a020ea 	mov	r2, #234	; 0xea
   32fc8:	e28100bc 	add	r0, r1, #188	; 0xbc
   32fcc:	ebffc1ab 	bl	23680 <assertion_failed>
   32fd0:	e59f102c 	ldr	r1, [pc, #44]	; 33004 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x184>
   32fd4:	e3a020ef 	mov	r2, #239	; 0xef
   32fd8:	e2810f4b 	add	r0, r1, #300	; 0x12c
   32fdc:	ebffc1a7 	bl	23680 <assertion_failed>
   32fe0:	e59f101c 	ldr	r1, [pc, #28]	; 33004 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x184>
   32fe4:	e3a020f2 	mov	r2, #242	; 0xf2
   32fe8:	e28100a4 	add	r0, r1, #164	; 0xa4
   32fec:	ebffc1a3 	bl	23680 <assertion_failed>
   32ff0:	e59f100c 	ldr	r1, [pc, #12]	; 33004 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x184>
   32ff4:	e3a020ec 	mov	r2, #236	; 0xec
   32ff8:	e28100d4 	add	r0, r1, #212	; 0xd4
   32ffc:	ebffc19f 	bl	23680 <assertion_failed>
   33000:	00000438 	.word	0x00000438
   33004:	0003db4c 	.word	0x0003db4c

00033008 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   33008:	e92d4070 	push	{r4, r5, r6, lr}
   3300c:	e3520000 	cmp	r2, #0
   33010:	e1a05000 	mov	r5, r0
   33014:	e5dd0010 	ldrb	r0, [sp, #16]
   33018:	0a000042 	beq	33128 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x120>
   3301c:	e3530000 	cmp	r3, #0
   33020:	0a000044 	beq	33138 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x130>
   33024:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   33028:	8a000046 	bhi	33148 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x140>
   3302c:	e595c000 	ldr	ip, [r5]
   33030:	e28cc602 	add	ip, ip, #2097152	; 0x200000
   33034:	e28cc070 	add	ip, ip, #112	; 0x70
   33038:	e1a0c40c 	lsl	ip, ip, #8
   3303c:	e59cc020 	ldr	ip, [ip, #32]
   33040:	e1a0ce2c 	lsr	ip, ip, #28
   33044:	e22cc001 	eor	ip, ip, #1
   33048:	e3530801 	cmp	r3, #65536	; 0x10000
   3304c:	338cc001 	orrcc	ip, ip, #1
   33050:	e31c0001 	tst	ip, #1
   33054:	0a000047 	beq	33178 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x170>
   33058:	e3d114ff 	bics	r1, r1, #-16777216	; 0xff000000
   3305c:	0a00003d 	beq	33158 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x150>
   33060:	e595c008 	ldr	ip, [r5, #8]
   33064:	e281e47e 	add	lr, r1, #2113929216	; 0x7e000000
   33068:	e35c0000 	cmp	ip, #0
   3306c:	0a00003d 	beq	33168 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x160>
   33070:	e3a04000 	mov	r4, #0
   33074:	e1a00800 	lsl	r0, r0, #16
   33078:	e3800fd2 	orr	r0, r0, #840	; 0x348
   3307c:	e1a06420 	lsr	r6, r0, #8
   33080:	e3c21103 	bic	r1, r2, #-1073741824	; 0xc0000000
   33084:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
   33088:	e5cc0000 	strb	r0, [ip]
   3308c:	e5cc6001 	strb	r6, [ip, #1]
   33090:	e1a06820 	lsr	r6, r0, #16
   33094:	e1a00c20 	lsr	r0, r0, #24
   33098:	e5cc6002 	strb	r6, [ip, #2]
   3309c:	e5cc0003 	strb	r0, [ip, #3]
   330a0:	e1a06421 	lsr	r6, r1, #8
   330a4:	e1a00002 	mov	r0, r2
   330a8:	e1a02821 	lsr	r2, r1, #16
   330ac:	e5cc1004 	strb	r1, [ip, #4]
   330b0:	e5cc6005 	strb	r6, [ip, #5]
   330b4:	e1a01c21 	lsr	r1, r1, #24
   330b8:	e1a0642e 	lsr	r6, lr, #8
   330bc:	e5cc2006 	strb	r2, [ip, #6]
   330c0:	e1a0282e 	lsr	r2, lr, #16
   330c4:	e5cce008 	strb	lr, [ip, #8]
   330c8:	e5cc1007 	strb	r1, [ip, #7]
   330cc:	e1a0ec2e 	lsr	lr, lr, #24
   330d0:	e5cc6009 	strb	r6, [ip, #9]
   330d4:	e5cc200a 	strb	r2, [ip, #10]
   330d8:	e1a06423 	lsr	r6, r3, #8
   330dc:	e1a01823 	lsr	r1, r3, #16
   330e0:	e1a02c23 	lsr	r2, r3, #24
   330e4:	e5cc4010 	strb	r4, [ip, #16]
   330e8:	e5cc4011 	strb	r4, [ip, #17]
   330ec:	e5cc4012 	strb	r4, [ip, #18]
   330f0:	e5cc4013 	strb	r4, [ip, #19]
   330f4:	e5cc4014 	strb	r4, [ip, #20]
   330f8:	e5cc4015 	strb	r4, [ip, #21]
   330fc:	e5cc4016 	strb	r4, [ip, #22]
   33100:	e5cc4017 	strb	r4, [ip, #23]
   33104:	e5cce00b 	strb	lr, [ip, #11]
   33108:	e5cc600d 	strb	r6, [ip, #13]
   3310c:	e5cc100e 	strb	r1, [ip, #14]
   33110:	e5cc300c 	strb	r3, [ip, #12]
   33114:	e5cc200f 	strb	r2, [ip, #15]
   33118:	e1a01003 	mov	r1, r3
   3311c:	e5854020 	str	r4, [r5, #32]
   33120:	e8bd4070 	pop	{r4, r5, r6, lr}
   33124:	eaffdee5 	b	2acc0 <CleanAndInvalidateDataCacheRange>
   33128:	e59f1058 	ldr	r1, [pc, #88]	; 33188 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x180>
   3312c:	e3a02e11 	mov	r2, #272	; 0x110
   33130:	e2810074 	add	r0, r1, #116	; 0x74
   33134:	ebffc151 	bl	23680 <assertion_failed>
   33138:	e59f1048 	ldr	r1, [pc, #72]	; 33188 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x180>
   3313c:	e59f2048 	ldr	r2, [pc, #72]	; 3318c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x184>
   33140:	e2810084 	add	r0, r1, #132	; 0x84
   33144:	ebffc14d 	bl	23680 <assertion_failed>
   33148:	e59f1038 	ldr	r1, [pc, #56]	; 33188 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x180>
   3314c:	e59f203c 	ldr	r2, [pc, #60]	; 33190 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x188>
   33150:	e28100bc 	add	r0, r1, #188	; 0xbc
   33154:	ebffc149 	bl	23680 <assertion_failed>
   33158:	e59f1028 	ldr	r1, [pc, #40]	; 33188 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x180>
   3315c:	e59f2030 	ldr	r2, [pc, #48]	; 33194 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x18c>
   33160:	e2810f4b 	add	r0, r1, #300	; 0x12c
   33164:	ebffc145 	bl	23680 <assertion_failed>
   33168:	e59f1018 	ldr	r1, [pc, #24]	; 33188 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x180>
   3316c:	e59f2024 	ldr	r2, [pc, #36]	; 33198 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x190>
   33170:	e28100a4 	add	r0, r1, #164	; 0xa4
   33174:	ebffc141 	bl	23680 <assertion_failed>
   33178:	e59f1008 	ldr	r1, [pc, #8]	; 33188 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x180>
   3317c:	e3a02f45 	mov	r2, #276	; 0x114
   33180:	e28100d4 	add	r0, r1, #212	; 0xd4
   33184:	ebffc13d 	bl	23680 <assertion_failed>
   33188:	0003db4c 	.word	0x0003db4c
   3318c:	00000111 	.word	0x00000111
   33190:	00000112 	.word	0x00000112
   33194:	00000117 	.word	0x00000117
   33198:	0000011a 	.word	0x0000011a

0003319c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   3319c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   331a0:	e3510000 	cmp	r1, #0
   331a4:	e1a05000 	mov	r5, r0
   331a8:	e59d6020 	ldr	r6, [sp, #32]
   331ac:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   331b0:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
   331b4:	0a000052 	beq	33304 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x168>
   331b8:	e3520000 	cmp	r2, #0
   331bc:	0a000054 	beq	33314 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x178>
   331c0:	e3530000 	cmp	r3, #0
   331c4:	0a000056 	beq	33324 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x188>
   331c8:	e59fc1c4 	ldr	ip, [pc, #452]	; 33394 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f8>
   331cc:	e153000c 	cmp	r3, ip
   331d0:	8a000057 	bhi	33334 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x198>
   331d4:	e3560000 	cmp	r6, #0
   331d8:	0a000059 	beq	33344 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
   331dc:	e3560901 	cmp	r6, #16384	; 0x4000
   331e0:	2a00005b 	bcs	33354 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b8>
   331e4:	e154000c 	cmp	r4, ip
   331e8:	8a000041 	bhi	332f4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
   331ec:	e350000f 	cmp	r0, #15
   331f0:	8a00005b 	bhi	33364 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c8>
   331f4:	e595c000 	ldr	ip, [r5]
   331f8:	e28cc602 	add	ip, ip, #2097152	; 0x200000
   331fc:	e28cc070 	add	ip, ip, #112	; 0x70
   33200:	e1a0c40c 	lsl	ip, ip, #8
   33204:	e59cc020 	ldr	ip, [ip, #32]
   33208:	e31c0201 	tst	ip, #268435456	; 0x10000000
   3320c:	1a000058 	bne	33374 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1d8>
   33210:	e595c008 	ldr	ip, [r5, #8]
   33214:	e35c0000 	cmp	ip, #0
   33218:	0a000059 	beq	33384 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e8>
   3321c:	e3a07000 	mov	r7, #0
   33220:	e3c11103 	bic	r1, r1, #-1073741824	; 0xc0000000
   33224:	e381e101 	orr	lr, r1, #1073741824	; 0x40000000
   33228:	e59f9168 	ldr	r9, [pc, #360]	; 33398 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1fc>
   3322c:	e1a0142e 	lsr	r1, lr, #8
   33230:	e1890600 	orr	r0, r9, r0, lsl #12
   33234:	e5cce008 	strb	lr, [ip, #8]
   33238:	e5cc1009 	strb	r1, [ip, #9]
   3323c:	e1a0182e 	lsr	r1, lr, #16
   33240:	e1a0ec2e 	lsr	lr, lr, #24
   33244:	e5cce00b 	strb	lr, [ip, #11]
   33248:	e1a0e420 	lsr	lr, r0, #8
   3324c:	e5cc100a 	strb	r1, [ip, #10]
   33250:	e5cce001 	strb	lr, [ip, #1]
   33254:	e3c21103 	bic	r1, r2, #-1073741824	; 0xc0000000
   33258:	e1a0e820 	lsr	lr, r0, #16
   3325c:	e3811101 	orr	r1, r1, #1073741824	; 0x40000000
   33260:	e5cc0000 	strb	r0, [ip]
   33264:	e5cce002 	strb	lr, [ip, #2]
   33268:	e1a00c20 	lsr	r0, r0, #24
   3326c:	e246e001 	sub	lr, r6, #1
   33270:	e183e80e 	orr	lr, r3, lr, lsl #16
   33274:	e5cc0003 	strb	r0, [ip, #3]
   33278:	e1a09421 	lsr	r9, r1, #8
   3327c:	e1a00002 	mov	r0, r2
   33280:	e1a02c21 	lsr	r2, r1, #24
   33284:	e1a04804 	lsl	r4, r4, #16
   33288:	e5cc9005 	strb	r9, [ip, #5]
   3328c:	e5cc2007 	strb	r2, [ip, #7]
   33290:	e1a09821 	lsr	r9, r1, #16
   33294:	e1a0282e 	lsr	r2, lr, #16
   33298:	e5cc1004 	strb	r1, [ip, #4]
   3329c:	e5cc9006 	strb	r9, [ip, #6]
   332a0:	e5cce00c 	strb	lr, [ip, #12]
   332a4:	e1a0942e 	lsr	r9, lr, #8
   332a8:	e5cc200e 	strb	r2, [ip, #14]
   332ac:	e0010396 	mul	r1, r6, r3
   332b0:	e1a02824 	lsr	r2, r4, #16
   332b4:	e1a03c2e 	lsr	r3, lr, #24
   332b8:	e6efe074 	uxtb	lr, r4
   332bc:	e1a04c24 	lsr	r4, r4, #24
   332c0:	e5cc900d 	strb	r9, [ip, #13]
   332c4:	e5cc300f 	strb	r3, [ip, #15]
   332c8:	e5cce010 	strb	lr, [ip, #16]
   332cc:	e5cc2012 	strb	r2, [ip, #18]
   332d0:	e5cc4013 	strb	r4, [ip, #19]
   332d4:	e5cc7014 	strb	r7, [ip, #20]
   332d8:	e5cc7015 	strb	r7, [ip, #21]
   332dc:	e5cc7016 	strb	r7, [ip, #22]
   332e0:	e5cc7017 	strb	r7, [ip, #23]
   332e4:	e5cc7011 	strb	r7, [ip, #17]
   332e8:	e5857020 	str	r7, [r5, #32]
   332ec:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   332f0:	eaffde72 	b	2acc0 <CleanAndInvalidateDataCacheRange>
   332f4:	e59f10a0 	ldr	r1, [pc, #160]	; 3339c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   332f8:	e3a02d05 	mov	r2, #320	; 0x140
   332fc:	e2810e19 	add	r0, r1, #400	; 0x190
   33300:	ebffc0de 	bl	23680 <assertion_failed>
   33304:	e59f1090 	ldr	r1, [pc, #144]	; 3339c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   33308:	e59f2090 	ldr	r2, [pc, #144]	; 333a0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x204>
   3330c:	e2810060 	add	r0, r1, #96	; 0x60
   33310:	ebffc0da 	bl	23680 <assertion_failed>
   33314:	e59f1080 	ldr	r1, [pc, #128]	; 3339c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   33318:	e59f2084 	ldr	r2, [pc, #132]	; 333a4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x208>
   3331c:	e2810074 	add	r0, r1, #116	; 0x74
   33320:	ebffc0d6 	bl	23680 <assertion_failed>
   33324:	e3a02f4f 	mov	r2, #316	; 0x13c
   33328:	e59f106c 	ldr	r1, [pc, #108]	; 3339c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   3332c:	e0810002 	add	r0, r1, r2
   33330:	ebffc0d2 	bl	23680 <assertion_failed>
   33334:	e59f1060 	ldr	r1, [pc, #96]	; 3339c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   33338:	e59f2068 	ldr	r2, [pc, #104]	; 333a8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x20c>
   3333c:	e2810e15 	add	r0, r1, #336	; 0x150
   33340:	ebffc0ce 	bl	23680 <assertion_failed>
   33344:	e59f1050 	ldr	r1, [pc, #80]	; 3339c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   33348:	e59f205c 	ldr	r2, [pc, #92]	; 333ac <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
   3334c:	e2810f5a 	add	r0, r1, #360	; 0x168
   33350:	ebffc0ca 	bl	23680 <assertion_failed>
   33354:	e59f1040 	ldr	r1, [pc, #64]	; 3339c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   33358:	e59f2050 	ldr	r2, [pc, #80]	; 333b0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x214>
   3335c:	e2810f5e 	add	r0, r1, #376	; 0x178
   33360:	ebffc0c6 	bl	23680 <assertion_failed>
   33364:	e59f1030 	ldr	r1, [pc, #48]	; 3339c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   33368:	e59f2044 	ldr	r2, [pc, #68]	; 333b4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x218>
   3336c:	e2810090 	add	r0, r1, #144	; 0x90
   33370:	ebffc0c2 	bl	23680 <assertion_failed>
   33374:	e59f1020 	ldr	r1, [pc, #32]	; 3339c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   33378:	e59f2038 	ldr	r2, [pc, #56]	; 333b8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x21c>
   3337c:	e2810f6a 	add	r0, r1, #424	; 0x1a8
   33380:	ebffc0be 	bl	23680 <assertion_failed>
   33384:	e59f1010 	ldr	r1, [pc, #16]	; 3339c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x200>
   33388:	e59f202c 	ldr	r2, [pc, #44]	; 333bc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x220>
   3338c:	e28100a4 	add	r0, r1, #164	; 0xa4
   33390:	ebffc0ba 	bl	23680 <assertion_failed>
   33394:	0000ffff 	.word	0x0000ffff
   33398:	00000332 	.word	0x00000332
   3339c:	0003db4c 	.word	0x0003db4c
   333a0:	0000013a 	.word	0x0000013a
   333a4:	0000013b 	.word	0x0000013b
   333a8:	0000013d 	.word	0x0000013d
   333ac:	0000013e 	.word	0x0000013e
   333b0:	0000013f 	.word	0x0000013f
   333b4:	00000141 	.word	0x00000141
   333b8:	00000143 	.word	0x00000143
   333bc:	00000145 	.word	0x00000145

000333c0 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   333c0:	e5903000 	ldr	r3, [r0]
   333c4:	e92d4070 	push	{r4, r5, r6, lr}
   333c8:	e353000d 	cmp	r3, #13
   333cc:	8a000014 	bhi	33424 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x64>
   333d0:	e1a04000 	mov	r4, r0
   333d4:	e590000c 	ldr	r0, [r0, #12]
   333d8:	e3500000 	cmp	r0, #0
   333dc:	0a000014 	beq	33434 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x74>
   333e0:	e1a06002 	mov	r6, r2
   333e4:	e5d42010 	ldrb	r2, [r4, #16]
   333e8:	e1a05001 	mov	r5, r1
   333ec:	e3520000 	cmp	r2, #0
   333f0:	0a000004 	beq	33408 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x48>
   333f4:	e3550000 	cmp	r5, #0
   333f8:	e5845014 	str	r5, [r4, #20]
   333fc:	0a000010 	beq	33444 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x84>
   33400:	e5846018 	str	r6, [r4, #24]
   33404:	e8bd8070 	pop	{r4, r5, r6, pc}
   33408:	e2831010 	add	r1, r3, #16
   3340c:	e59f2040 	ldr	r2, [pc, #64]	; 33454 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x94>
   33410:	e1a03004 	mov	r3, r4
   33414:	ebffdee9 	bl	2afc0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   33418:	e3a03001 	mov	r3, #1
   3341c:	e5c43010 	strb	r3, [r4, #16]
   33420:	eafffff3 	b	333f4 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x34>
   33424:	e59f102c 	ldr	r1, [pc, #44]	; 33458 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x98>
   33428:	e3a02f59 	mov	r2, #356	; 0x164
   3342c:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   33430:	ebffc092 	bl	23680 <assertion_failed>
   33434:	e59f101c 	ldr	r1, [pc, #28]	; 33458 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x98>
   33438:	e59f201c 	ldr	r2, [pc, #28]	; 3345c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x9c>
   3343c:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   33440:	ebffc08e 	bl	23680 <assertion_failed>
   33444:	e59f100c 	ldr	r1, [pc, #12]	; 33458 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x98>
   33448:	e59f2010 	ldr	r2, [pc, #16]	; 33460 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xa0>
   3344c:	e2810f85 	add	r0, r1, #532	; 0x214
   33450:	ebffc08a 	bl	23680 <assertion_failed>
   33454:	000337d0 	.word	0x000337d0
   33458:	0003db4c 	.word	0x0003db4c
   3345c:	00000165 	.word	0x00000165
   33460:	0000016f 	.word	0x0000016f

00033464 <CDMAChannel::Start()>:
   33464:	e5903000 	ldr	r3, [r0]
   33468:	e92d4070 	push	{r4, r5, r6, lr}
   3346c:	e353000c 	cmp	r3, #12
   33470:	8a000037 	bhi	33554 <CDMAChannel::Start()+0xf0>
   33474:	e5902008 	ldr	r2, [r0, #8]
   33478:	e1a04000 	mov	r4, r0
   3347c:	e3520000 	cmp	r2, #0
   33480:	0a000037 	beq	33564 <CDMAChannel::Start()+0x100>
   33484:	e5903014 	ldr	r3, [r0, #20]
   33488:	e3530000 	cmp	r3, #0
   3348c:	0a000014 	beq	334e4 <CDMAChannel::Start()+0x80>
   33490:	e590300c 	ldr	r3, [r0, #12]
   33494:	e3530000 	cmp	r3, #0
   33498:	0a000035 	beq	33574 <CDMAChannel::Start()+0x110>
   3349c:	e5d03010 	ldrb	r3, [r0, #16]
   334a0:	e3530000 	cmp	r3, #0
   334a4:	0a00003a 	beq	33594 <CDMAChannel::Start()+0x130>
   334a8:	e5d21001 	ldrb	r1, [r2, #1]
   334ac:	e5d23000 	ldrb	r3, [r2]
   334b0:	e5d20002 	ldrb	r0, [r2, #2]
   334b4:	e1833401 	orr	r3, r3, r1, lsl #8
   334b8:	e5d21003 	ldrb	r1, [r2, #3]
   334bc:	e1833800 	orr	r3, r3, r0, lsl #16
   334c0:	e1833c01 	orr	r3, r3, r1, lsl #24
   334c4:	e3833001 	orr	r3, r3, #1
   334c8:	e1a0c423 	lsr	ip, r3, #8
   334cc:	e1a00823 	lsr	r0, r3, #16
   334d0:	e1a01c23 	lsr	r1, r3, #24
   334d4:	e5c23000 	strb	r3, [r2]
   334d8:	e5c2c001 	strb	ip, [r2, #1]
   334dc:	e5c20002 	strb	r0, [r2, #2]
   334e0:	e5c21003 	strb	r1, [r2, #3]
   334e4:	e3a03000 	mov	r3, #0
   334e8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   334ec:	e5942000 	ldr	r2, [r4]
   334f0:	e2823602 	add	r3, r2, #2097152	; 0x200000
   334f4:	e2833070 	add	r3, r3, #112	; 0x70
   334f8:	e1a03403 	lsl	r3, r3, #8
   334fc:	e5931000 	ldr	r1, [r3]
   33500:	e3110004 	tst	r1, #4
   33504:	1a00001e 	bne	33584 <CDMAChannel::Start()+0x120>
   33508:	e3a05001 	mov	r5, #1
   3350c:	e59f10a0 	ldr	r1, [pc, #160]	; 335b4 <CDMAChannel::Start()+0x150>
   33510:	e5911fe0 	ldr	r1, [r1, #4064]	; 0xfe0
   33514:	e0115215 	ands	r5, r1, r5, lsl r2
   33518:	1a000021 	bne	335a4 <CDMAChannel::Start()+0x140>
   3351c:	e5940008 	ldr	r0, [r4, #8]
   33520:	e3a01020 	mov	r1, #32
   33524:	e3c0c103 	bic	ip, r0, #-1073741824	; 0xc0000000
   33528:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   3352c:	e583c004 	str	ip, [r3, #4]
   33530:	ebffdde2 	bl	2acc0 <CleanAndInvalidateDataCacheRange>
   33534:	e5943000 	ldr	r3, [r4]
   33538:	e59f2078 	ldr	r2, [pc, #120]	; 335b8 <CDMAChannel::Start()+0x154>
   3353c:	e2833602 	add	r3, r3, #2097152	; 0x200000
   33540:	e2833070 	add	r3, r3, #112	; 0x70
   33544:	e1a03403 	lsl	r3, r3, #8
   33548:	e5832000 	str	r2, [r3]
   3354c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   33550:	e8bd8070 	pop	{r4, r5, r6, pc}
   33554:	e59f1060 	ldr	r1, [pc, #96]	; 335bc <CDMAChannel::Start()+0x158>
   33558:	e59f2060 	ldr	r2, [pc, #96]	; 335c0 <CDMAChannel::Start()+0x15c>
   3355c:	e2810030 	add	r0, r1, #48	; 0x30
   33560:	ebffc046 	bl	23680 <assertion_failed>
   33564:	e59f1050 	ldr	r1, [pc, #80]	; 335bc <CDMAChannel::Start()+0x158>
   33568:	e3a02d06 	mov	r2, #384	; 0x180
   3356c:	e28100a4 	add	r0, r1, #164	; 0xa4
   33570:	ebffc042 	bl	23680 <assertion_failed>
   33574:	e59f1040 	ldr	r1, [pc, #64]	; 335bc <CDMAChannel::Start()+0x158>
   33578:	e3a02f61 	mov	r2, #388	; 0x184
   3357c:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   33580:	ebffc03e 	bl	23680 <assertion_failed>
   33584:	e59f1030 	ldr	r1, [pc, #48]	; 335bc <CDMAChannel::Start()+0x158>
   33588:	e59f2034 	ldr	r2, [pc, #52]	; 335c4 <CDMAChannel::Start()+0x160>
   3358c:	e2810d09 	add	r0, r1, #576	; 0x240
   33590:	ebffc03a 	bl	23680 <assertion_failed>
   33594:	e59f1020 	ldr	r1, [pc, #32]	; 335bc <CDMAChannel::Start()+0x158>
   33598:	e59f2028 	ldr	r2, [pc, #40]	; 335c8 <CDMAChannel::Start()+0x164>
   3359c:	e2810e23 	add	r0, r1, #560	; 0x230
   335a0:	ebffc036 	bl	23680 <assertion_failed>
   335a4:	e59f1010 	ldr	r1, [pc, #16]	; 335bc <CDMAChannel::Start()+0x158>
   335a8:	e3a02f63 	mov	r2, #396	; 0x18c
   335ac:	e2810f9d 	add	r0, r1, #628	; 0x274
   335b0:	ebffc032 	bl	23680 <assertion_failed>
   335b4:	20007000 	.word	0x20007000
   335b8:	10f10001 	.word	0x10f10001
   335bc:	0003db4c 	.word	0x0003db4c
   335c0:	0000017f 	.word	0x0000017f
   335c4:	0000018b 	.word	0x0000018b
   335c8:	00000185 	.word	0x00000185

000335cc <CDMAChannel::Wait()>:
   335cc:	e5903000 	ldr	r3, [r0]
   335d0:	e92d4010 	push	{r4, lr}
   335d4:	e353000c 	cmp	r3, #12
   335d8:	8a000019 	bhi	33644 <CDMAChannel::Wait()+0x78>
   335dc:	e5903014 	ldr	r3, [r0, #20]
   335e0:	e1a04000 	mov	r4, r0
   335e4:	e3530000 	cmp	r3, #0
   335e8:	1a000019 	bne	33654 <CDMAChannel::Wait()+0x88>
   335ec:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   335f0:	e5902000 	ldr	r2, [r0]
   335f4:	e2822602 	add	r2, r2, #2097152	; 0x200000
   335f8:	e2822070 	add	r2, r2, #112	; 0x70
   335fc:	e1a02402 	lsl	r2, r2, #8
   33600:	e5923000 	ldr	r3, [r2]
   33604:	e3130001 	tst	r3, #1
   33608:	1afffffc 	bne	33600 <CDMAChannel::Wait()+0x34>
   3360c:	e1a03423 	lsr	r3, r3, #8
   33610:	e5940020 	ldr	r0, [r4, #32]
   33614:	e2233001 	eor	r3, r3, #1
   33618:	e2033001 	and	r3, r3, #1
   3361c:	e3500000 	cmp	r0, #0
   33620:	e5c4301c 	strb	r3, [r4, #28]
   33624:	1a000003 	bne	33638 <CDMAChannel::Wait()+0x6c>
   33628:	e3a03000 	mov	r3, #0
   3362c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   33630:	e5d4001c 	ldrb	r0, [r4, #28]
   33634:	e8bd8010 	pop	{r4, pc}
   33638:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   3363c:	ebffdd9f 	bl	2acc0 <CleanAndInvalidateDataCacheRange>
   33640:	eafffff8 	b	33628 <CDMAChannel::Wait()+0x5c>
   33644:	e59f1018 	ldr	r1, [pc, #24]	; 33664 <CDMAChannel::Wait()+0x98>
   33648:	e59f2018 	ldr	r2, [pc, #24]	; 33668 <CDMAChannel::Wait()+0x9c>
   3364c:	e2810030 	add	r0, r1, #48	; 0x30
   33650:	ebffc00a 	bl	23680 <assertion_failed>
   33654:	e59f1008 	ldr	r1, [pc, #8]	; 33664 <CDMAChannel::Wait()+0x98>
   33658:	e3a02f69 	mov	r2, #420	; 0x1a4
   3365c:	e2810faa 	add	r0, r1, #680	; 0x2a8
   33660:	ebffc006 	bl	23680 <assertion_failed>
   33664:	0003db4c 	.word	0x0003db4c
   33668:	000001a3 	.word	0x000001a3

0003366c <CDMAChannel::GetStatus()>:
   3366c:	e5903000 	ldr	r3, [r0]
   33670:	e92d4010 	push	{r4, lr}
   33674:	e353000c 	cmp	r3, #12
   33678:	8a000007 	bhi	3369c <CDMAChannel::GetStatus()+0x30>
   3367c:	e2833602 	add	r3, r3, #2097152	; 0x200000
   33680:	e2833070 	add	r3, r3, #112	; 0x70
   33684:	e1a03403 	lsl	r3, r3, #8
   33688:	e5933000 	ldr	r3, [r3]
   3368c:	e3130001 	tst	r3, #1
   33690:	1a000005 	bne	336ac <CDMAChannel::GetStatus()+0x40>
   33694:	e5d0001c 	ldrb	r0, [r0, #28]
   33698:	e8bd8010 	pop	{r4, pc}
   3369c:	e59f1018 	ldr	r1, [pc, #24]	; 336bc <CDMAChannel::GetStatus()+0x50>
   336a0:	e59f2018 	ldr	r2, [pc, #24]	; 336c0 <CDMAChannel::GetStatus()+0x54>
   336a4:	e2810030 	add	r0, r1, #48	; 0x30
   336a8:	ebffbff4 	bl	23680 <assertion_failed>
   336ac:	e59f1008 	ldr	r1, [pc, #8]	; 336bc <CDMAChannel::GetStatus()+0x50>
   336b0:	e3a02f71 	mov	r2, #452	; 0x1c4
   336b4:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   336b8:	ebffbff0 	bl	23680 <assertion_failed>
   336bc:	0003db4c 	.word	0x0003db4c
   336c0:	000001c3 	.word	0x000001c3

000336c4 <CDMAChannel::InterruptHandler()>:
   336c4:	e92d4010 	push	{r4, lr}
   336c8:	e1a04000 	mov	r4, r0
   336cc:	e5900020 	ldr	r0, [r0, #32]
   336d0:	e3500000 	cmp	r0, #0
   336d4:	1a000022 	bne	33764 <CDMAChannel::InterruptHandler()+0xa0>
   336d8:	e3a03000 	mov	r3, #0
   336dc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   336e0:	e5942000 	ldr	r2, [r4]
   336e4:	e352000c 	cmp	r2, #12
   336e8:	8a000020 	bhi	33770 <CDMAChannel::InterruptHandler()+0xac>
   336ec:	e3a03001 	mov	r3, #1
   336f0:	e59f10c8 	ldr	r1, [pc, #200]	; 337c0 <CDMAChannel::InterruptHandler()+0xfc>
   336f4:	e1a03213 	lsl	r3, r3, r2
   336f8:	e5912fe0 	ldr	r2, [r1, #4064]	; 0xfe0
   336fc:	e1130002 	tst	r3, r2
   33700:	0a00001e 	beq	33780 <CDMAChannel::InterruptHandler()+0xbc>
   33704:	e5813fe0 	str	r3, [r1, #4064]	; 0xfe0
   33708:	e5943000 	ldr	r3, [r4]
   3370c:	e2833602 	add	r3, r3, #2097152	; 0x200000
   33710:	e2833070 	add	r3, r3, #112	; 0x70
   33714:	e1a03403 	lsl	r3, r3, #8
   33718:	e5931000 	ldr	r1, [r3]
   3371c:	e3110004 	tst	r1, #4
   33720:	0a00001a 	beq	33790 <CDMAChannel::InterruptHandler()+0xcc>
   33724:	e2112001 	ands	r2, r1, #1
   33728:	1a00001c 	bne	337a0 <CDMAChannel::InterruptHandler()+0xdc>
   3372c:	e3a00004 	mov	r0, #4
   33730:	e5830000 	str	r0, [r3]
   33734:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   33738:	e1a01421 	lsr	r1, r1, #8
   3373c:	e5943014 	ldr	r3, [r4, #20]
   33740:	e2211001 	eor	r1, r1, #1
   33744:	e2011001 	and	r1, r1, #1
   33748:	e3530000 	cmp	r3, #0
   3374c:	e5c4101c 	strb	r1, [r4, #28]
   33750:	0a000016 	beq	337b0 <CDMAChannel::InterruptHandler()+0xec>
   33754:	e5942018 	ldr	r2, [r4, #24]
   33758:	e5940000 	ldr	r0, [r4]
   3375c:	e8bd4010 	pop	{r4, lr}
   33760:	e12fff13 	bx	r3
   33764:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   33768:	ebffdd54 	bl	2acc0 <CleanAndInvalidateDataCacheRange>
   3376c:	eaffffd9 	b	336d8 <CDMAChannel::InterruptHandler()+0x14>
   33770:	e59f104c 	ldr	r1, [pc, #76]	; 337c4 <CDMAChannel::InterruptHandler()+0x100>
   33774:	e59f204c 	ldr	r2, [pc, #76]	; 337c8 <CDMAChannel::InterruptHandler()+0x104>
   33778:	e2810030 	add	r0, r1, #48	; 0x30
   3377c:	ebffbfbf 	bl	23680 <assertion_failed>
   33780:	e59f103c 	ldr	r1, [pc, #60]	; 337c4 <CDMAChannel::InterruptHandler()+0x100>
   33784:	e3a02f76 	mov	r2, #472	; 0x1d8
   33788:	e2810fbe 	add	r0, r1, #760	; 0x2f8
   3378c:	ebffbfbb 	bl	23680 <assertion_failed>
   33790:	e59f102c 	ldr	r1, [pc, #44]	; 337c4 <CDMAChannel::InterruptHandler()+0x100>
   33794:	e3a02f77 	mov	r2, #476	; 0x1dc
   33798:	e2810e31 	add	r0, r1, #784	; 0x310
   3379c:	ebffbfb7 	bl	23680 <assertion_failed>
   337a0:	e59f101c 	ldr	r1, [pc, #28]	; 337c4 <CDMAChannel::InterruptHandler()+0x100>
   337a4:	e59f2020 	ldr	r2, [pc, #32]	; 337cc <CDMAChannel::InterruptHandler()+0x108>
   337a8:	e2810e32 	add	r0, r1, #800	; 0x320
   337ac:	ebffbfb3 	bl	23680 <assertion_failed>
   337b0:	e59f100c 	ldr	r1, [pc, #12]	; 337c4 <CDMAChannel::InterruptHandler()+0x100>
   337b4:	e3a02f79 	mov	r2, #484	; 0x1e4
   337b8:	e2810f85 	add	r0, r1, #532	; 0x214
   337bc:	ebffbfaf 	bl	23680 <assertion_failed>
   337c0:	20007000 	.word	0x20007000
   337c4:	0003db4c 	.word	0x0003db4c
   337c8:	000001d2 	.word	0x000001d2
   337cc:	000001dd 	.word	0x000001dd

000337d0 <CDMAChannel::InterruptStub(void*)>:
   337d0:	e3500000 	cmp	r0, #0
   337d4:	0a000000 	beq	337dc <CDMAChannel::InterruptStub(void*)+0xc>
   337d8:	eaffffb9 	b	336c4 <CDMAChannel::InterruptHandler()>
   337dc:	e59f100c 	ldr	r1, [pc, #12]	; 337f0 <CDMAChannel::InterruptStub(void*)+0x20>
   337e0:	e92d4010 	push	{r4, lr}
   337e4:	e59f2008 	ldr	r2, [pc, #8]	; 337f4 <CDMAChannel::InterruptStub(void*)+0x24>
   337e8:	e2810fcd 	add	r0, r1, #820	; 0x334
   337ec:	ebffbfa3 	bl	23680 <assertion_failed>
   337f0:	0003db4c 	.word	0x0003db4c
   337f4:	000001eb 	.word	0x000001eb

000337f8 <jsonGetValueForKey>:
   337f8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   337fc:	e1a08001 	mov	r8, r1
   33800:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   33804:	e24dd018 	sub	sp, sp, #24
   33808:	e1a07000 	mov	r7, r0
   3380c:	e28d000c 	add	r0, sp, #12
   33810:	e1a09002 	mov	r9, r2
   33814:	e1a0a003 	mov	sl, r3
   33818:	eb000139 	bl	33d04 <JSMNR_init>
   3381c:	e1a00008 	mov	r0, r8
   33820:	ebffd5b5 	bl	28efc <strlen>
   33824:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   33828:	e1a02000 	mov	r2, r0
   3382c:	e28d3018 	add	r3, sp, #24
   33830:	e28d000c 	add	r0, sp, #12
   33834:	e1a01008 	mov	r1, r8
   33838:	e58dc000 	str	ip, [sp]
   3383c:	eb00014c 	bl	33d74 <JSMNR_parse>
   33840:	e2506000 	subs	r6, r0, #0
   33844:	c28d4018 	addgt	r4, sp, #24
   33848:	c3a05000 	movgt	r5, #0
   3384c:	ca000003 	bgt	33860 <jsonGetValueForKey+0x68>
   33850:	ea00001d 	b	338cc <jsonGetValueForKey+0xd4>
   33854:	e1560005 	cmp	r6, r5
   33858:	e2844010 	add	r4, r4, #16
   3385c:	0a00001a 	beq	338cc <jsonGetValueForKey+0xd4>
   33860:	e5d43000 	ldrb	r3, [r4]
   33864:	e2855001 	add	r5, r5, #1
   33868:	e3530003 	cmp	r3, #3
   3386c:	1afffff8 	bne	33854 <jsonGetValueForKey+0x5c>
   33870:	e1a00007 	mov	r0, r7
   33874:	ebffd5a0 	bl	28efc <strlen>
   33878:	e994000a 	ldmib	r4, {r1, r3}
   3387c:	e0433001 	sub	r3, r3, r1
   33880:	e1500003 	cmp	r0, r3
   33884:	1afffff2 	bne	33854 <jsonGetValueForKey+0x5c>
   33888:	e1a02000 	mov	r2, r0
   3388c:	e0880001 	add	r0, r8, r1
   33890:	e1a01007 	mov	r1, r7
   33894:	ebffd5f1 	bl	29060 <strncmp>
   33898:	e3500000 	cmp	r0, #0
   3389c:	1affffec 	bne	33854 <jsonGetValueForKey+0x5c>
   338a0:	e5941014 	ldr	r1, [r4, #20]
   338a4:	e5942018 	ldr	r2, [r4, #24]
   338a8:	e0422001 	sub	r2, r2, r1
   338ac:	e152000a 	cmp	r2, sl
   338b0:	aa000005 	bge	338cc <jsonGetValueForKey+0xd4>
   338b4:	e2822001 	add	r2, r2, #1
   338b8:	e0881001 	add	r1, r8, r1
   338bc:	e1a00009 	mov	r0, r9
   338c0:	ebffea11 	bl	2e10c <strlcpy>
   338c4:	e3a00001 	mov	r0, #1
   338c8:	ea000000 	b	338d0 <jsonGetValueForKey+0xd8>
   338cc:	e3a00000 	mov	r0, #0
   338d0:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   338d4:	e28dd018 	add	sp, sp, #24
   338d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000338dc <jsonGetArrayLen>:
   338dc:	e92d4010 	push	{r4, lr}
   338e0:	e1a04000 	mov	r4, r0
   338e4:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   338e8:	e24dd018 	sub	sp, sp, #24
   338ec:	e28d000c 	add	r0, sp, #12
   338f0:	eb000103 	bl	33d04 <JSMNR_init>
   338f4:	e1a00004 	mov	r0, r4
   338f8:	ebffd57f 	bl	28efc <strlen>
   338fc:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   33900:	e1a02000 	mov	r2, r0
   33904:	e28d3018 	add	r3, sp, #24
   33908:	e28d000c 	add	r0, sp, #12
   3390c:	e1a01004 	mov	r1, r4
   33910:	e58dc000 	str	ip, [sp]
   33914:	eb000116 	bl	33d74 <JSMNR_parse>
   33918:	e3500000 	cmp	r0, #0
   3391c:	b3a00000 	movlt	r0, #0
   33920:	ba000004 	blt	33938 <jsonGetArrayLen+0x5c>
   33924:	0a000006 	beq	33944 <jsonGetArrayLen+0x68>
   33928:	e5dd3018 	ldrb	r3, [sp, #24]
   3392c:	e3530002 	cmp	r3, #2
   33930:	1a000003 	bne	33944 <jsonGetArrayLen+0x68>
   33934:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   33938:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   3393c:	e28dd018 	add	sp, sp, #24
   33940:	e8bd8010 	pop	{r4, pc}
   33944:	e3e00000 	mvn	r0, #0
   33948:	eafffffa 	b	33938 <jsonGetArrayLen+0x5c>

0003394c <jsonGetArrayElem>:
   3394c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   33950:	e1a06002 	mov	r6, r2
   33954:	e1a04001 	mov	r4, r1
   33958:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   3395c:	e24dd01c 	sub	sp, sp, #28
   33960:	e1a02003 	mov	r2, r3
   33964:	e59f1134 	ldr	r1, [pc, #308]	; 33aa0 <jsonGetArrayElem+0x154>
   33968:	e1a07000 	mov	r7, r0
   3396c:	e1a00006 	mov	r0, r6
   33970:	e1a05003 	mov	r5, r3
   33974:	ebffe9e4 	bl	2e10c <strlcpy>
   33978:	e28d000c 	add	r0, sp, #12
   3397c:	eb0000e0 	bl	33d04 <JSMNR_init>
   33980:	e1a00004 	mov	r0, r4
   33984:	ebffd55c 	bl	28efc <strlen>
   33988:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   3398c:	e1a02000 	mov	r2, r0
   33990:	e28d3018 	add	r3, sp, #24
   33994:	e28d000c 	add	r0, sp, #12
   33998:	e1a01004 	mov	r1, r4
   3399c:	e58dc000 	str	ip, [sp]
   339a0:	eb0000f3 	bl	33d74 <JSMNR_parse>
   339a4:	e3500000 	cmp	r0, #0
   339a8:	da000002 	ble	339b8 <jsonGetArrayElem+0x6c>
   339ac:	e5dd3018 	ldrb	r3, [sp, #24]
   339b0:	e3530002 	cmp	r3, #2
   339b4:	0a000003 	beq	339c8 <jsonGetArrayElem+0x7c>
   339b8:	e3a00000 	mov	r0, #0
   339bc:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   339c0:	e28dd01c 	add	sp, sp, #28
   339c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   339c8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   339cc:	e1530007 	cmp	r3, r7
   339d0:	dafffff8 	ble	339b8 <jsonGetArrayElem+0x6c>
   339d4:	e3570000 	cmp	r7, #0
   339d8:	0a00002b 	beq	33a8c <jsonGetArrayElem+0x140>
   339dc:	e3a0e000 	mov	lr, #0
   339e0:	e3a02001 	mov	r2, #1
   339e4:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   339e8:	e1500002 	cmp	r0, r2
   339ec:	dafffff1 	ble	339b8 <jsonGetArrayElem+0x6c>
   339f0:	e28d1ef5 	add	r1, sp, #3920	; 0xf50
   339f4:	e1a03202 	lsl	r3, r2, #4
   339f8:	e2811008 	add	r1, r1, #8
   339fc:	e0811003 	add	r1, r1, r3
   33a00:	e5111f3c 	ldr	r1, [r1, #-3900]	; 0xfffff0c4
   33a04:	e151000c 	cmp	r1, ip
   33a08:	d28d1018 	addle	r1, sp, #24
   33a0c:	d0813003 	addle	r3, r1, r3
   33a10:	da000003 	ble	33a24 <jsonGetArrayElem+0xd8>
   33a14:	ea00000c 	b	33a4c <jsonGetArrayElem+0x100>
   33a18:	e5931004 	ldr	r1, [r3, #4]
   33a1c:	e151000c 	cmp	r1, ip
   33a20:	ca000004 	bgt	33a38 <jsonGetArrayElem+0xec>
   33a24:	e2822001 	add	r2, r2, #1
   33a28:	e1500002 	cmp	r0, r2
   33a2c:	e2833010 	add	r3, r3, #16
   33a30:	1afffff8 	bne	33a18 <jsonGetArrayElem+0xcc>
   33a34:	eaffffdf 	b	339b8 <jsonGetArrayElem+0x6c>
   33a38:	e28d1ef5 	add	r1, sp, #3920	; 0xf50
   33a3c:	e1a03202 	lsl	r3, r2, #4
   33a40:	e2811008 	add	r1, r1, #8
   33a44:	e0811003 	add	r1, r1, r3
   33a48:	e511cf38 	ldr	ip, [r1, #-3896]	; 0xfffff0c8
   33a4c:	e28ee001 	add	lr, lr, #1
   33a50:	e157000e 	cmp	r7, lr
   33a54:	1affffe3 	bne	339e8 <jsonGetArrayElem+0x9c>
   33a58:	e28d2ef5 	add	r2, sp, #3920	; 0xf50
   33a5c:	e2822008 	add	r2, r2, #8
   33a60:	e0823003 	add	r3, r2, r3
   33a64:	e5131f3c 	ldr	r1, [r3, #-3900]	; 0xfffff0c4
   33a68:	e1a00006 	mov	r0, r6
   33a6c:	e04c2001 	sub	r2, ip, r1
   33a70:	e2822001 	add	r2, r2, #1
   33a74:	e1520005 	cmp	r2, r5
   33a78:	a1a02005 	movge	r2, r5
   33a7c:	e0841001 	add	r1, r4, r1
   33a80:	ebffe9a1 	bl	2e10c <strlcpy>
   33a84:	e3a00001 	mov	r0, #1
   33a88:	eaffffcb 	b	339bc <jsonGetArrayElem+0x70>
   33a8c:	e3500001 	cmp	r0, #1
   33a90:	daffffc8 	ble	339b8 <jsonGetArrayElem+0x6c>
   33a94:	e3a03010 	mov	r3, #16
   33a98:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   33a9c:	eaffffed 	b	33a58 <jsonGetArrayElem+0x10c>
   33aa0:	0003c7f8 	.word	0x0003c7f8

00033aa4 <jsonEscape>:
   33aa4:	e1d030d0 	ldrsb	r3, [r0]
   33aa8:	e92d4070 	push	{r4, r5, r6, lr}
   33aac:	e3530000 	cmp	r3, #0
   33ab0:	0a00002d 	beq	33b6c <jsonEscape+0xc8>
   33ab4:	e3520002 	cmp	r2, #2
   33ab8:	da00002b 	ble	33b6c <jsonEscape+0xc8>
   33abc:	e3a0c002 	mov	ip, #2
   33ac0:	e3a0e000 	mov	lr, #0
   33ac4:	e3a0505c 	mov	r5, #92	; 0x5c
   33ac8:	e3a0606e 	mov	r6, #110	; 0x6e
   33acc:	ea000011 	b	33b18 <jsonEscape+0x74>
   33ad0:	e353005c 	cmp	r3, #92	; 0x5c
   33ad4:	0a00001e 	beq	33b54 <jsonEscape+0xb0>
   33ad8:	e353000a 	cmp	r3, #10
   33adc:	15c13000 	strbne	r3, [r1]
   33ae0:	128ee001 	addne	lr, lr, #1
   33ae4:	12811001 	addne	r1, r1, #1
   33ae8:	1a000004 	bne	33b00 <jsonEscape+0x5c>
   33aec:	e1a03001 	mov	r3, r1
   33af0:	e4c35002 	strb	r5, [r3], #2
   33af4:	e1a0e00c 	mov	lr, ip
   33af8:	e5c16001 	strb	r6, [r1, #1]
   33afc:	e1a01003 	mov	r1, r3
   33b00:	e1f030d1 	ldrsb	r3, [r0, #1]!
   33b04:	e28ec002 	add	ip, lr, #2
   33b08:	e3530000 	cmp	r3, #0
   33b0c:	0a00000c 	beq	33b44 <jsonEscape+0xa0>
   33b10:	e15c0002 	cmp	ip, r2
   33b14:	aa00000a 	bge	33b44 <jsonEscape+0xa0>
   33b18:	e3530022 	cmp	r3, #34	; 0x22
   33b1c:	1affffeb 	bne	33ad0 <jsonEscape+0x2c>
   33b20:	e1a04001 	mov	r4, r1
   33b24:	e1a0e00c 	mov	lr, ip
   33b28:	e4c45002 	strb	r5, [r4], #2
   33b2c:	e5c13001 	strb	r3, [r1, #1]
   33b30:	e1f030d1 	ldrsb	r3, [r0, #1]!
   33b34:	e1a01004 	mov	r1, r4
   33b38:	e3530000 	cmp	r3, #0
   33b3c:	e28ec002 	add	ip, lr, #2
   33b40:	1afffff2 	bne	33b10 <jsonEscape+0x6c>
   33b44:	e152000e 	cmp	r2, lr
   33b48:	c3a03000 	movgt	r3, #0
   33b4c:	c5c13000 	strbgt	r3, [r1]
   33b50:	e8bd8070 	pop	{r4, r5, r6, pc}
   33b54:	e1a04001 	mov	r4, r1
   33b58:	e4c43002 	strb	r3, [r4], #2
   33b5c:	e1a0e00c 	mov	lr, ip
   33b60:	e5c13001 	strb	r3, [r1, #1]
   33b64:	e1a01004 	mov	r1, r4
   33b68:	eaffffe4 	b	33b00 <jsonEscape+0x5c>
   33b6c:	e3a0e000 	mov	lr, #0
   33b70:	eafffff3 	b	33b44 <jsonEscape+0xa0>

00033b74 <rdisspace>:
   33b74:	e3500020 	cmp	r0, #32
   33b78:	0a000004 	beq	33b90 <rdisspace+0x1c>
   33b7c:	e2400009 	sub	r0, r0, #9
   33b80:	e3500004 	cmp	r0, #4
   33b84:	83a00000 	movhi	r0, #0
   33b88:	93a00001 	movls	r0, #1
   33b8c:	e12fff1e 	bx	lr
   33b90:	e3a00001 	mov	r0, #1
   33b94:	e12fff1e 	bx	lr

00033b98 <rdisdigit>:
   33b98:	e2400030 	sub	r0, r0, #48	; 0x30
   33b9c:	e3500009 	cmp	r0, #9
   33ba0:	83a00000 	movhi	r0, #0
   33ba4:	93a00001 	movls	r0, #1
   33ba8:	e12fff1e 	bx	lr

00033bac <rdisupper>:
   33bac:	e2400041 	sub	r0, r0, #65	; 0x41
   33bb0:	e3500019 	cmp	r0, #25
   33bb4:	83a00000 	movhi	r0, #0
   33bb8:	93a00001 	movls	r0, #1
   33bbc:	e12fff1e 	bx	lr

00033bc0 <rdislower>:
   33bc0:	e2400061 	sub	r0, r0, #97	; 0x61
   33bc4:	e3500019 	cmp	r0, #25
   33bc8:	83a00000 	movhi	r0, #0
   33bcc:	93a00001 	movls	r0, #1
   33bd0:	e12fff1e 	bx	lr

00033bd4 <rdtolower>:
   33bd4:	e6ef3070 	uxtb	r3, r0
   33bd8:	e2432041 	sub	r2, r3, #65	; 0x41
   33bdc:	e3520019 	cmp	r2, #25
   33be0:	92833020 	addls	r3, r3, #32
   33be4:	96af0073 	sxtbls	r0, r3
   33be8:	e12fff1e 	bx	lr

00033bec <rdtoupper>:
   33bec:	e6ef3070 	uxtb	r3, r0
   33bf0:	e2432061 	sub	r2, r3, #97	; 0x61
   33bf4:	e3520019 	cmp	r2, #25
   33bf8:	92433020 	subls	r3, r3, #32
   33bfc:	96af0073 	sxtbls	r0, r3
   33c00:	e12fff1e 	bx	lr

00033c04 <rdisalpha>:
   33c04:	e3c00020 	bic	r0, r0, #32
   33c08:	e2400041 	sub	r0, r0, #65	; 0x41
   33c0c:	e3500019 	cmp	r0, #25
   33c10:	83a00000 	movhi	r0, #0
   33c14:	93a00001 	movls	r0, #1
   33c18:	e12fff1e 	bx	lr

00033c1c <rdstrrev>:
   33c1c:	e92d4010 	push	{r4, lr}
   33c20:	e1a04000 	mov	r4, r0
   33c24:	ebffd4b4 	bl	28efc <strlen>
   33c28:	e2402001 	sub	r2, r0, #1
   33c2c:	e3520000 	cmp	r2, #0
   33c30:	d8bd8010 	pople	{r4, pc}
   33c34:	e3a01000 	mov	r1, #0
   33c38:	e0840000 	add	r0, r4, r0
   33c3c:	e2443001 	sub	r3, r4, #1
   33c40:	e5d3c001 	ldrb	ip, [r3, #1]
   33c44:	e550e001 	ldrb	lr, [r0, #-1]
   33c48:	e2811001 	add	r1, r1, #1
   33c4c:	e2422001 	sub	r2, r2, #1
   33c50:	e1510002 	cmp	r1, r2
   33c54:	e5e3e001 	strb	lr, [r3, #1]!
   33c58:	e560c001 	strb	ip, [r0, #-1]!
   33c5c:	bafffff7 	blt	33c40 <rdstrrev+0x24>
   33c60:	e8bd8010 	pop	{r4, pc}

00033c64 <rditoa>:
   33c64:	e3520000 	cmp	r2, #0
   33c68:	0a000023 	beq	33cfc <rditoa+0x98>
   33c6c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33c70:	e1a04000 	mov	r4, r0
   33c74:	e1a09001 	mov	r9, r1
   33c78:	e1a07003 	mov	r7, r3
   33c7c:	e1a06001 	mov	r6, r1
   33c80:	e3a05001 	mov	r5, #1
   33c84:	e2428001 	sub	r8, r2, #1
   33c88:	ea000003 	b	33c9c <rditoa+0x38>
   33c8c:	e15a0008 	cmp	sl, r8
   33c90:	e2855001 	add	r5, r5, #1
   33c94:	e2866001 	add	r6, r6, #1
   33c98:	aa000014 	bge	33cf0 <rditoa+0x8c>
   33c9c:	e1a00004 	mov	r0, r4
   33ca0:	e1a01007 	mov	r1, r7
   33ca4:	eb00021f 	bl	34528 <__aeabi_idivmod>
   33ca8:	e3510009 	cmp	r1, #9
   33cac:	e2813030 	add	r3, r1, #48	; 0x30
   33cb0:	c2811037 	addgt	r1, r1, #55	; 0x37
   33cb4:	c5c61000 	strbgt	r1, [r6]
   33cb8:	d5c63000 	strble	r3, [r6]
   33cbc:	e1a00004 	mov	r0, r4
   33cc0:	e1a01007 	mov	r1, r7
   33cc4:	d1a0a005 	movle	sl, r5
   33cc8:	c1a0a005 	movgt	sl, r5
   33ccc:	eb0001cb 	bl	34400 <__aeabi_idiv>
   33cd0:	e2504000 	subs	r4, r0, #0
   33cd4:	1affffec 	bne	33c8c <rditoa+0x28>
   33cd8:	e3a04000 	mov	r4, #0
   33cdc:	e1a00009 	mov	r0, r9
   33ce0:	e7c9400a 	strb	r4, [r9, sl]
   33ce4:	ebffffcc 	bl	33c1c <rdstrrev>
   33ce8:	e1a00004 	mov	r0, r4
   33cec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33cf0:	1afffff8 	bne	33cd8 <rditoa+0x74>
   33cf4:	e3e00000 	mvn	r0, #0
   33cf8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33cfc:	e3e00000 	mvn	r0, #0
   33d00:	e12fff1e 	bx	lr

00033d04 <JSMNR_init>:
   33d04:	e3a03000 	mov	r3, #0
   33d08:	e3e02000 	mvn	r2, #0
   33d0c:	e5803000 	str	r3, [r0]
   33d10:	e5802008 	str	r2, [r0, #8]
   33d14:	e5803004 	str	r3, [r0, #4]
   33d18:	e12fff1e 	bx	lr

00033d1c <JSMNR_logLongStr>:
   33d1c:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   33d20:	e3a04000 	mov	r4, #0
   33d24:	e28db01c 	add	fp, sp, #28
   33d28:	e1a05001 	mov	r5, r1
   33d2c:	e1a08004 	mov	r8, r4
   33d30:	e3a07051 	mov	r7, #81	; 0x51
   33d34:	ea000007 	b	33d58 <JSMNR_logLongStr+0x3c>
   33d38:	e1a0600d 	mov	r6, sp
   33d3c:	e24dd058 	sub	sp, sp, #88	; 0x58
   33d40:	e1a0000d 	mov	r0, sp
   33d44:	e1a02007 	mov	r2, r7
   33d48:	ebffe8ef 	bl	2e10c <strlcpy>
   33d4c:	e5cd8050 	strb	r8, [sp, #80]	; 0x50
   33d50:	e1a0d006 	mov	sp, r6
   33d54:	e2844050 	add	r4, r4, #80	; 0x50
   33d58:	e1a00005 	mov	r0, r5
   33d5c:	ebffd466 	bl	28efc <strlen>
   33d60:	e1540000 	cmp	r4, r0
   33d64:	e0851004 	add	r1, r5, r4
   33d68:	3afffff2 	bcc	33d38 <JSMNR_logLongStr+0x1c>
   33d6c:	e24bd01c 	sub	sp, fp, #28
   33d70:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00033d74 <JSMNR_parse>:
   33d74:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33d78:	e590e000 	ldr	lr, [r0]
   33d7c:	e5905004 	ldr	r5, [r0, #4]
   33d80:	e152000e 	cmp	r2, lr
   33d84:	9a0000b7 	bls	34068 <JSMNR_parse+0x2f4>
   33d88:	e191c0de 	ldrsb	ip, [r1, lr]
   33d8c:	e35c0000 	cmp	ip, #0
   33d90:	0a0000b4 	beq	34068 <JSMNR_parse+0x2f4>
   33d94:	e3a0b000 	mov	fp, #0
   33d98:	ea00000e 	b	33dd8 <JSMNR_parse+0x64>
   33d9c:	e35c005d 	cmp	ip, #93	; 0x5d
   33da0:	0a0000c7 	beq	340c4 <JSMNR_parse+0x350>
   33da4:	ca0000c2 	bgt	340b4 <JSMNR_parse+0x340>
   33da8:	e35c003a 	cmp	ip, #58	; 0x3a
   33dac:	1a0000dd 	bne	34128 <JSMNR_parse+0x3b4>
   33db0:	e8905000 	ldm	r0, {ip, lr}
   33db4:	e24ee001 	sub	lr, lr, #1
   33db8:	e580e008 	str	lr, [r0, #8]
   33dbc:	e28ce001 	add	lr, ip, #1
   33dc0:	e152000e 	cmp	r2, lr
   33dc4:	e580e000 	str	lr, [r0]
   33dc8:	9a0000a6 	bls	34068 <JSMNR_parse+0x2f4>
   33dcc:	e191c0de 	ldrsb	ip, [r1, lr]
   33dd0:	e35c0000 	cmp	ip, #0
   33dd4:	0a0000a3 	beq	34068 <JSMNR_parse+0x2f4>
   33dd8:	e35c002c 	cmp	ip, #44	; 0x2c
   33ddc:	0a0000ef 	beq	341a0 <JSMNR_parse+0x42c>
   33de0:	caffffed 	bgt	33d9c <JSMNR_parse+0x28>
   33de4:	e35c000d 	cmp	ip, #13
   33de8:	0a000099 	beq	34054 <JSMNR_parse+0x2e0>
   33dec:	da00010a 	ble	3421c <JSMNR_parse+0x4a8>
   33df0:	e35c0020 	cmp	ip, #32
   33df4:	0a000096 	beq	34054 <JSMNR_parse+0x2e0>
   33df8:	e35c0022 	cmp	ip, #34	; 0x22
   33dfc:	1a000109 	bne	34228 <JSMNR_parse+0x4b4>
   33e00:	e28e7001 	add	r7, lr, #1
   33e04:	e1520007 	cmp	r2, r7
   33e08:	e5807000 	str	r7, [r0]
   33e0c:	e1a0c007 	mov	ip, r7
   33e10:	9a000085 	bls	3402c <JSMNR_parse+0x2b8>
   33e14:	e19140d7 	ldrsb	r4, [r1, r7]
   33e18:	e3540000 	cmp	r4, #0
   33e1c:	1a000008 	bne	33e44 <JSMNR_parse+0xd0>
   33e20:	ea000081 	b	3402c <JSMNR_parse+0x2b8>
   33e24:	e5904000 	ldr	r4, [r0]
   33e28:	e284c001 	add	ip, r4, #1
   33e2c:	e152000c 	cmp	r2, ip
   33e30:	e580c000 	str	ip, [r0]
   33e34:	9a00007c 	bls	3402c <JSMNR_parse+0x2b8>
   33e38:	e19140dc 	ldrsb	r4, [r1, ip]
   33e3c:	e3540000 	cmp	r4, #0
   33e40:	0a000079 	beq	3402c <JSMNR_parse+0x2b8>
   33e44:	e3540022 	cmp	r4, #34	; 0x22
   33e48:	0a00014f 	beq	3438c <JSMNR_parse+0x618>
   33e4c:	e354005c 	cmp	r4, #92	; 0x5c
   33e50:	1afffff3 	bne	33e24 <JSMNR_parse+0xb0>
   33e54:	e28c4001 	add	r4, ip, #1
   33e58:	e1520004 	cmp	r2, r4
   33e5c:	9afffff0 	bls	33e24 <JSMNR_parse+0xb0>
   33e60:	e5804000 	str	r4, [r0]
   33e64:	e19160d4 	ldrsb	r6, [r1, r4]
   33e68:	e0819004 	add	r9, r1, r4
   33e6c:	e2466022 	sub	r6, r6, #34	; 0x22
   33e70:	e3560053 	cmp	r6, #83	; 0x53
   33e74:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
   33e78:	ea00006f 	b	3403c <JSMNR_parse+0x2c8>
   33e7c:	00033e28 	.word	0x00033e28
   33e80:	0003403c 	.word	0x0003403c
   33e84:	0003403c 	.word	0x0003403c
   33e88:	0003403c 	.word	0x0003403c
   33e8c:	0003403c 	.word	0x0003403c
   33e90:	0003403c 	.word	0x0003403c
   33e94:	0003403c 	.word	0x0003403c
   33e98:	0003403c 	.word	0x0003403c
   33e9c:	0003403c 	.word	0x0003403c
   33ea0:	0003403c 	.word	0x0003403c
   33ea4:	0003403c 	.word	0x0003403c
   33ea8:	0003403c 	.word	0x0003403c
   33eac:	0003403c 	.word	0x0003403c
   33eb0:	00033e28 	.word	0x00033e28
   33eb4:	0003403c 	.word	0x0003403c
   33eb8:	0003403c 	.word	0x0003403c
   33ebc:	0003403c 	.word	0x0003403c
   33ec0:	0003403c 	.word	0x0003403c
   33ec4:	0003403c 	.word	0x0003403c
   33ec8:	0003403c 	.word	0x0003403c
   33ecc:	0003403c 	.word	0x0003403c
   33ed0:	0003403c 	.word	0x0003403c
   33ed4:	0003403c 	.word	0x0003403c
   33ed8:	0003403c 	.word	0x0003403c
   33edc:	0003403c 	.word	0x0003403c
   33ee0:	0003403c 	.word	0x0003403c
   33ee4:	0003403c 	.word	0x0003403c
   33ee8:	0003403c 	.word	0x0003403c
   33eec:	0003403c 	.word	0x0003403c
   33ef0:	0003403c 	.word	0x0003403c
   33ef4:	0003403c 	.word	0x0003403c
   33ef8:	0003403c 	.word	0x0003403c
   33efc:	0003403c 	.word	0x0003403c
   33f00:	0003403c 	.word	0x0003403c
   33f04:	0003403c 	.word	0x0003403c
   33f08:	0003403c 	.word	0x0003403c
   33f0c:	0003403c 	.word	0x0003403c
   33f10:	0003403c 	.word	0x0003403c
   33f14:	0003403c 	.word	0x0003403c
   33f18:	0003403c 	.word	0x0003403c
   33f1c:	0003403c 	.word	0x0003403c
   33f20:	0003403c 	.word	0x0003403c
   33f24:	0003403c 	.word	0x0003403c
   33f28:	0003403c 	.word	0x0003403c
   33f2c:	0003403c 	.word	0x0003403c
   33f30:	0003403c 	.word	0x0003403c
   33f34:	0003403c 	.word	0x0003403c
   33f38:	0003403c 	.word	0x0003403c
   33f3c:	0003403c 	.word	0x0003403c
   33f40:	0003403c 	.word	0x0003403c
   33f44:	0003403c 	.word	0x0003403c
   33f48:	0003403c 	.word	0x0003403c
   33f4c:	0003403c 	.word	0x0003403c
   33f50:	0003403c 	.word	0x0003403c
   33f54:	0003403c 	.word	0x0003403c
   33f58:	0003403c 	.word	0x0003403c
   33f5c:	0003403c 	.word	0x0003403c
   33f60:	0003403c 	.word	0x0003403c
   33f64:	00033e28 	.word	0x00033e28
   33f68:	0003403c 	.word	0x0003403c
   33f6c:	0003403c 	.word	0x0003403c
   33f70:	0003403c 	.word	0x0003403c
   33f74:	0003403c 	.word	0x0003403c
   33f78:	0003403c 	.word	0x0003403c
   33f7c:	00033e28 	.word	0x00033e28
   33f80:	0003403c 	.word	0x0003403c
   33f84:	0003403c 	.word	0x0003403c
   33f88:	0003403c 	.word	0x0003403c
   33f8c:	00033e28 	.word	0x00033e28
   33f90:	0003403c 	.word	0x0003403c
   33f94:	0003403c 	.word	0x0003403c
   33f98:	0003403c 	.word	0x0003403c
   33f9c:	0003403c 	.word	0x0003403c
   33fa0:	0003403c 	.word	0x0003403c
   33fa4:	0003403c 	.word	0x0003403c
   33fa8:	0003403c 	.word	0x0003403c
   33fac:	00033e28 	.word	0x00033e28
   33fb0:	0003403c 	.word	0x0003403c
   33fb4:	0003403c 	.word	0x0003403c
   33fb8:	0003403c 	.word	0x0003403c
   33fbc:	00033e28 	.word	0x00033e28
   33fc0:	0003403c 	.word	0x0003403c
   33fc4:	00033e28 	.word	0x00033e28
   33fc8:	00033fcc 	.word	0x00033fcc
   33fcc:	e28c4002 	add	r4, ip, #2
   33fd0:	e5804000 	str	r4, [r0]
   33fd4:	e28cc006 	add	ip, ip, #6
   33fd8:	e1520004 	cmp	r2, r4
   33fdc:	0a00000d 	beq	34018 <JSMNR_parse+0x2a4>
   33fe0:	e1f9a0d1 	ldrsb	sl, [r9, #1]!
   33fe4:	e6ef607a 	uxtb	r6, sl
   33fe8:	e3c68020 	bic	r8, r6, #32
   33fec:	e35a0000 	cmp	sl, #0
   33ff0:	e2488041 	sub	r8, r8, #65	; 0x41
   33ff4:	e2466030 	sub	r6, r6, #48	; 0x30
   33ff8:	0a000006 	beq	34018 <JSMNR_parse+0x2a4>
   33ffc:	e3580005 	cmp	r8, #5
   34000:	83560009 	cmphi	r6, #9
   34004:	e2844001 	add	r4, r4, #1
   34008:	8a00000b 	bhi	3403c <JSMNR_parse+0x2c8>
   3400c:	e154000c 	cmp	r4, ip
   34010:	e5804000 	str	r4, [r0]
   34014:	1affffef 	bne	33fd8 <JSMNR_parse+0x264>
   34018:	e2444001 	sub	r4, r4, #1
   3401c:	e284c001 	add	ip, r4, #1
   34020:	e152000c 	cmp	r2, ip
   34024:	e580c000 	str	ip, [r0]
   34028:	8affff82 	bhi	33e38 <JSMNR_parse+0xc4>
   3402c:	e3e05002 	mvn	r5, #2
   34030:	e580e000 	str	lr, [r0]
   34034:	e1a00005 	mov	r0, r5
   34038:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3403c:	e3e05001 	mvn	r5, #1
   34040:	e580e000 	str	lr, [r0]
   34044:	e1a00005 	mov	r0, r5
   34048:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3404c:	e37c0001 	cmn	ip, #1
   34050:	0a00002f 	beq	34114 <JSMNR_parse+0x3a0>
   34054:	e590c000 	ldr	ip, [r0]
   34058:	e28ce001 	add	lr, ip, #1
   3405c:	e152000e 	cmp	r2, lr
   34060:	e580e000 	str	lr, [r0]
   34064:	8affff58 	bhi	33dcc <JSMNR_parse+0x58>
   34068:	e3530000 	cmp	r3, #0
   3406c:	0afffff4 	beq	34044 <JSMNR_parse+0x2d0>
   34070:	e5901004 	ldr	r1, [r0, #4]
   34074:	e2512001 	subs	r2, r1, #1
   34078:	4afffff1 	bmi	34044 <JSMNR_parse+0x2d0>
   3407c:	e0833201 	add	r3, r3, r1, lsl #4
   34080:	ea000002 	b	34090 <JSMNR_parse+0x31c>
   34084:	e3720001 	cmn	r2, #1
   34088:	e2433010 	sub	r3, r3, #16
   3408c:	0affffec 	beq	34044 <JSMNR_parse+0x2d0>
   34090:	e513100c 	ldr	r1, [r3, #-12]
   34094:	e2422001 	sub	r2, r2, #1
   34098:	e3710001 	cmn	r1, #1
   3409c:	0afffff8 	beq	34084 <JSMNR_parse+0x310>
   340a0:	e5131008 	ldr	r1, [r3, #-8]
   340a4:	e3710001 	cmn	r1, #1
   340a8:	1afffff5 	bne	34084 <JSMNR_parse+0x310>
   340ac:	e3e05002 	mvn	r5, #2
   340b0:	eaffffe3 	b	34044 <JSMNR_parse+0x2d0>
   340b4:	e35c007b 	cmp	ip, #123	; 0x7b
   340b8:	0a00001c 	beq	34130 <JSMNR_parse+0x3bc>
   340bc:	e35c007d 	cmp	ip, #125	; 0x7d
   340c0:	1a000058 	bne	34228 <JSMNR_parse+0x4b4>
   340c4:	e3530000 	cmp	r3, #0
   340c8:	0affffe1 	beq	34054 <JSMNR_parse+0x2e0>
   340cc:	e5904004 	ldr	r4, [r0, #4]
   340d0:	e35c007d 	cmp	ip, #125	; 0x7d
   340d4:	13a07002 	movne	r7, #2
   340d8:	03a07001 	moveq	r7, #1
   340dc:	e254c001 	subs	ip, r4, #1
   340e0:	4affffd9 	bmi	3404c <JSMNR_parse+0x2d8>
   340e4:	e244421f 	sub	r4, r4, #-268435455	; 0xf0000001
   340e8:	e0834204 	add	r4, r3, r4, lsl #4
   340ec:	e5946004 	ldr	r6, [r4, #4]
   340f0:	e3760001 	cmn	r6, #1
   340f4:	0a000002 	beq	34104 <JSMNR_parse+0x390>
   340f8:	e5946008 	ldr	r6, [r4, #8]
   340fc:	e3760001 	cmn	r6, #1
   34100:	0a00008b 	beq	34334 <JSMNR_parse+0x5c0>
   34104:	e24cc001 	sub	ip, ip, #1
   34108:	e37c0001 	cmn	ip, #1
   3410c:	e2444010 	sub	r4, r4, #16
   34110:	1afffff5 	bne	340ec <JSMNR_parse+0x378>
   34114:	e3a02001 	mov	r2, #1
   34118:	e59f02dc 	ldr	r0, [pc, #732]	; 343fc <JSMNR_parse+0x688>
   3411c:	ebfffefe 	bl	33d1c <JSMNR_logLongStr>
   34120:	e3e05001 	mvn	r5, #1
   34124:	eaffffc6 	b	34044 <JSMNR_parse+0x2d0>
   34128:	e35c005b 	cmp	ip, #91	; 0x5b
   3412c:	1a00003d 	bne	34228 <JSMNR_parse+0x4b4>
   34130:	e3530000 	cmp	r3, #0
   34134:	e2855001 	add	r5, r5, #1
   34138:	0affffc5 	beq	34054 <JSMNR_parse+0x2e0>
   3413c:	e5904004 	ldr	r4, [r0, #4]
   34140:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   34144:	e1560004 	cmp	r6, r4
   34148:	9a000060 	bls	342d0 <JSMNR_parse+0x55c>
   3414c:	e2848001 	add	r8, r4, #1
   34150:	e5808004 	str	r8, [r0, #4]
   34154:	e3e08000 	mvn	r8, #0
   34158:	e5907008 	ldr	r7, [r0, #8]
   3415c:	e0836204 	add	r6, r3, r4, lsl #4
   34160:	e3770001 	cmn	r7, #1
   34164:	10837207 	addne	r7, r3, r7, lsl #4
   34168:	e586b00c 	str	fp, [r6, #12]
   3416c:	e5868004 	str	r8, [r6, #4]
   34170:	e5868008 	str	r8, [r6, #8]
   34174:	1597800c 	ldrne	r8, [r7, #12]
   34178:	12888001 	addne	r8, r8, #1
   3417c:	1587800c 	strne	r8, [r7, #12]
   34180:	e35c007b 	cmp	ip, #123	; 0x7b
   34184:	13a07002 	movne	r7, #2
   34188:	03a07001 	moveq	r7, #1
   3418c:	e590c000 	ldr	ip, [r0]
   34190:	e7c37204 	strb	r7, [r3, r4, lsl #4]
   34194:	e586e004 	str	lr, [r6, #4]
   34198:	e5804008 	str	r4, [r0, #8]
   3419c:	eaffff06 	b	33dbc <JSMNR_parse+0x48>
   341a0:	e3530000 	cmp	r3, #0
   341a4:	0affffaa 	beq	34054 <JSMNR_parse+0x2e0>
   341a8:	e590c008 	ldr	ip, [r0, #8]
   341ac:	e37c0001 	cmn	ip, #1
   341b0:	0affffa7 	beq	34054 <JSMNR_parse+0x2e0>
   341b4:	e7d3c20c 	ldrb	ip, [r3, ip, lsl #4]
   341b8:	e24cc001 	sub	ip, ip, #1
   341bc:	e35c0001 	cmp	ip, #1
   341c0:	9affffa3 	bls	34054 <JSMNR_parse+0x2e0>
   341c4:	e590e004 	ldr	lr, [r0, #4]
   341c8:	e25e4001 	subs	r4, lr, #1
   341cc:	4affffa0 	bmi	34054 <JSMNR_parse+0x2e0>
   341d0:	e083e20e 	add	lr, r3, lr, lsl #4
   341d4:	ea000003 	b	341e8 <JSMNR_parse+0x474>
   341d8:	e2444001 	sub	r4, r4, #1
   341dc:	e3740001 	cmn	r4, #1
   341e0:	e24ee010 	sub	lr, lr, #16
   341e4:	0affff9a 	beq	34054 <JSMNR_parse+0x2e0>
   341e8:	e55ec010 	ldrb	ip, [lr, #-16]
   341ec:	e24cc001 	sub	ip, ip, #1
   341f0:	e35c0001 	cmp	ip, #1
   341f4:	8afffff7 	bhi	341d8 <JSMNR_parse+0x464>
   341f8:	e51ec00c 	ldr	ip, [lr, #-12]
   341fc:	e37c0001 	cmn	ip, #1
   34200:	0afffff4 	beq	341d8 <JSMNR_parse+0x464>
   34204:	e51ec008 	ldr	ip, [lr, #-8]
   34208:	e37c0001 	cmn	ip, #1
   3420c:	1afffff1 	bne	341d8 <JSMNR_parse+0x464>
   34210:	e5804008 	str	r4, [r0, #8]
   34214:	e590c000 	ldr	ip, [r0]
   34218:	eafffee7 	b	33dbc <JSMNR_parse+0x48>
   3421c:	e24c7009 	sub	r7, ip, #9
   34220:	e3570001 	cmp	r7, #1
   34224:	9affff8a 	bls	34054 <JSMNR_parse+0x2e0>
   34228:	e5904000 	ldr	r4, [r0]
   3422c:	e1520004 	cmp	r2, r4
   34230:	9a00001d 	bls	342ac <JSMNR_parse+0x538>
   34234:	e191c0d4 	ldrsb	ip, [r1, r4]
   34238:	e0816004 	add	r6, r1, r4
   3423c:	e35c0000 	cmp	ip, #0
   34240:	1a000011 	bne	3428c <JSMNR_parse+0x518>
   34244:	ea000018 	b	342ac <JSMNR_parse+0x538>
   34248:	e35c0009 	cmp	ip, #9
   3424c:	ba000003 	blt	34260 <JSMNR_parse+0x4ec>
   34250:	e35c000a 	cmp	ip, #10
   34254:	da000014 	ble	342ac <JSMNR_parse+0x538>
   34258:	e35c000d 	cmp	ip, #13
   3425c:	0a000012 	beq	342ac <JSMNR_parse+0x538>
   34260:	e24cc020 	sub	ip, ip, #32
   34264:	e6efc07c 	uxtb	ip, ip
   34268:	e35c005e 	cmp	ip, #94	; 0x5e
   3426c:	8affff72 	bhi	3403c <JSMNR_parse+0x2c8>
   34270:	e2844001 	add	r4, r4, #1
   34274:	e1520004 	cmp	r2, r4
   34278:	e5804000 	str	r4, [r0]
   3427c:	0a00000a 	beq	342ac <JSMNR_parse+0x538>
   34280:	e1f6c0d1 	ldrsb	ip, [r6, #1]!
   34284:	e35c0000 	cmp	ip, #0
   34288:	0a000007 	beq	342ac <JSMNR_parse+0x538>
   3428c:	e35c0020 	cmp	ip, #32
   34290:	0a000005 	beq	342ac <JSMNR_parse+0x538>
   34294:	daffffeb 	ble	34248 <JSMNR_parse+0x4d4>
   34298:	e35c003a 	cmp	ip, #58	; 0x3a
   3429c:	0a000002 	beq	342ac <JSMNR_parse+0x538>
   342a0:	ca00000c 	bgt	342d8 <JSMNR_parse+0x564>
   342a4:	e35c002c 	cmp	ip, #44	; 0x2c
   342a8:	1affffec 	bne	34260 <JSMNR_parse+0x4ec>
   342ac:	e3530000 	cmp	r3, #0
   342b0:	0244c001 	subeq	ip, r4, #1
   342b4:	02855001 	addeq	r5, r5, #1
   342b8:	0afffebf 	beq	33dbc <JSMNR_parse+0x48>
   342bc:	e590c004 	ldr	ip, [r0, #4]
   342c0:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   342c4:	e156000c 	cmp	r6, ip
   342c8:	8a000007 	bhi	342ec <JSMNR_parse+0x578>
   342cc:	e580e000 	str	lr, [r0]
   342d0:	e3e05000 	mvn	r5, #0
   342d4:	eaffff5a 	b	34044 <JSMNR_parse+0x2d0>
   342d8:	e35c005d 	cmp	ip, #93	; 0x5d
   342dc:	0afffff2 	beq	342ac <JSMNR_parse+0x538>
   342e0:	e35c007d 	cmp	ip, #125	; 0x7d
   342e4:	1affffdd 	bne	34260 <JSMNR_parse+0x4ec>
   342e8:	eaffffef 	b	342ac <JSMNR_parse+0x538>
   342ec:	e3a08004 	mov	r8, #4
   342f0:	e5906008 	ldr	r6, [r0, #8]
   342f4:	e28c7001 	add	r7, ip, #1
   342f8:	e5807004 	str	r7, [r0, #4]
   342fc:	e3760001 	cmn	r6, #1
   34300:	e083720c 	add	r7, r3, ip, lsl #4
   34304:	e7c3820c 	strb	r8, [r3, ip, lsl #4]
   34308:	10836206 	addne	r6, r3, r6, lsl #4
   3430c:	e587b00c 	str	fp, [r7, #12]
   34310:	e587e004 	str	lr, [r7, #4]
   34314:	1596e00c 	ldrne	lr, [r6, #12]
   34318:	e244c001 	sub	ip, r4, #1
   3431c:	128ee001 	addne	lr, lr, #1
   34320:	e5874008 	str	r4, [r7, #8]
   34324:	e2855001 	add	r5, r5, #1
   34328:	e580c000 	str	ip, [r0]
   3432c:	1586e00c 	strne	lr, [r6, #12]
   34330:	eafffea1 	b	33dbc <JSMNR_parse+0x48>
   34334:	e5d48000 	ldrb	r8, [r4]
   34338:	e1580007 	cmp	r8, r7
   3433c:	1a00002c 	bne	343f4 <JSMNR_parse+0x680>
   34340:	e28ee001 	add	lr, lr, #1
   34344:	e5806008 	str	r6, [r0, #8]
   34348:	e083620c 	add	r6, r3, ip, lsl #4
   3434c:	e584e008 	str	lr, [r4, #8]
   34350:	e596e004 	ldr	lr, [r6, #4]
   34354:	e37e0001 	cmn	lr, #1
   34358:	0a000002 	beq	34368 <JSMNR_parse+0x5f4>
   3435c:	e596e008 	ldr	lr, [r6, #8]
   34360:	e37e0001 	cmn	lr, #1
   34364:	0a000005 	beq	34380 <JSMNR_parse+0x60c>
   34368:	e24cc001 	sub	ip, ip, #1
   3436c:	e37c0001 	cmn	ip, #1
   34370:	e2466010 	sub	r6, r6, #16
   34374:	1afffff5 	bne	34350 <JSMNR_parse+0x5dc>
   34378:	e590c000 	ldr	ip, [r0]
   3437c:	eaffff35 	b	34058 <JSMNR_parse+0x2e4>
   34380:	e580c008 	str	ip, [r0, #8]
   34384:	e590c000 	ldr	ip, [r0]
   34388:	eafffe8b 	b	33dbc <JSMNR_parse+0x48>
   3438c:	e3530000 	cmp	r3, #0
   34390:	0a000014 	beq	343e8 <JSMNR_parse+0x674>
   34394:	e5906004 	ldr	r6, [r0, #4]
   34398:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   3439c:	e1540006 	cmp	r4, r6
   343a0:	9affffc9 	bls	342cc <JSMNR_parse+0x558>
   343a4:	e3a08003 	mov	r8, #3
   343a8:	e590e008 	ldr	lr, [r0, #8]
   343ac:	e2864001 	add	r4, r6, #1
   343b0:	e5804004 	str	r4, [r0, #4]
   343b4:	e37e0001 	cmn	lr, #1
   343b8:	e0834206 	add	r4, r3, r6, lsl #4
   343bc:	e7c38206 	strb	r8, [r3, r6, lsl #4]
   343c0:	e2855001 	add	r5, r5, #1
   343c4:	e9841080 	stmib	r4, {r7, ip}
   343c8:	e584b00c 	str	fp, [r4, #12]
   343cc:	0affff20 	beq	34054 <JSMNR_parse+0x2e0>
   343d0:	e083e20e 	add	lr, r3, lr, lsl #4
   343d4:	e59e400c 	ldr	r4, [lr, #12]
   343d8:	e590c000 	ldr	ip, [r0]
   343dc:	e2844001 	add	r4, r4, #1
   343e0:	e58e400c 	str	r4, [lr, #12]
   343e4:	eafffe74 	b	33dbc <JSMNR_parse+0x48>
   343e8:	e2855001 	add	r5, r5, #1
   343ec:	e590c000 	ldr	ip, [r0]
   343f0:	eafffe71 	b	33dbc <JSMNR_parse+0x48>
   343f4:	e3e05001 	mvn	r5, #1
   343f8:	eaffff11 	b	34044 <JSMNR_parse+0x2d0>
   343fc:	0003de8c 	.word	0x0003de8c

00034400 <__aeabi_idiv>:
   34400:	e3510000 	cmp	r1, #0
   34404:	0a000043 	beq	34518 <.divsi3_skip_div0_test+0x110>

00034408 <.divsi3_skip_div0_test>:
   34408:	e020c001 	eor	ip, r0, r1
   3440c:	42611000 	rsbmi	r1, r1, #0
   34410:	e2512001 	subs	r2, r1, #1
   34414:	0a000027 	beq	344b8 <.divsi3_skip_div0_test+0xb0>
   34418:	e1b03000 	movs	r3, r0
   3441c:	42603000 	rsbmi	r3, r0, #0
   34420:	e1530001 	cmp	r3, r1
   34424:	9a000026 	bls	344c4 <.divsi3_skip_div0_test+0xbc>
   34428:	e1110002 	tst	r1, r2
   3442c:	0a000028 	beq	344d4 <.divsi3_skip_div0_test+0xcc>
   34430:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   34434:	01a01181 	lsleq	r1, r1, #3
   34438:	03a02008 	moveq	r2, #8
   3443c:	13a02001 	movne	r2, #1
   34440:	e3510201 	cmp	r1, #268435456	; 0x10000000
   34444:	31510003 	cmpcc	r1, r3
   34448:	31a01201 	lslcc	r1, r1, #4
   3444c:	31a02202 	lslcc	r2, r2, #4
   34450:	3afffffa 	bcc	34440 <.divsi3_skip_div0_test+0x38>
   34454:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   34458:	31510003 	cmpcc	r1, r3
   3445c:	31a01081 	lslcc	r1, r1, #1
   34460:	31a02082 	lslcc	r2, r2, #1
   34464:	3afffffa 	bcc	34454 <.divsi3_skip_div0_test+0x4c>
   34468:	e3a00000 	mov	r0, #0
   3446c:	e1530001 	cmp	r3, r1
   34470:	20433001 	subcs	r3, r3, r1
   34474:	21800002 	orrcs	r0, r0, r2
   34478:	e15300a1 	cmp	r3, r1, lsr #1
   3447c:	204330a1 	subcs	r3, r3, r1, lsr #1
   34480:	218000a2 	orrcs	r0, r0, r2, lsr #1
   34484:	e1530121 	cmp	r3, r1, lsr #2
   34488:	20433121 	subcs	r3, r3, r1, lsr #2
   3448c:	21800122 	orrcs	r0, r0, r2, lsr #2
   34490:	e15301a1 	cmp	r3, r1, lsr #3
   34494:	204331a1 	subcs	r3, r3, r1, lsr #3
   34498:	218001a2 	orrcs	r0, r0, r2, lsr #3
   3449c:	e3530000 	cmp	r3, #0
   344a0:	11b02222 	lsrsne	r2, r2, #4
   344a4:	11a01221 	lsrne	r1, r1, #4
   344a8:	1affffef 	bne	3446c <.divsi3_skip_div0_test+0x64>
   344ac:	e35c0000 	cmp	ip, #0
   344b0:	42600000 	rsbmi	r0, r0, #0
   344b4:	e12fff1e 	bx	lr
   344b8:	e13c0000 	teq	ip, r0
   344bc:	42600000 	rsbmi	r0, r0, #0
   344c0:	e12fff1e 	bx	lr
   344c4:	33a00000 	movcc	r0, #0
   344c8:	01a00fcc 	asreq	r0, ip, #31
   344cc:	03800001 	orreq	r0, r0, #1
   344d0:	e12fff1e 	bx	lr
   344d4:	e3510801 	cmp	r1, #65536	; 0x10000
   344d8:	21a01821 	lsrcs	r1, r1, #16
   344dc:	23a02010 	movcs	r2, #16
   344e0:	33a02000 	movcc	r2, #0
   344e4:	e3510c01 	cmp	r1, #256	; 0x100
   344e8:	21a01421 	lsrcs	r1, r1, #8
   344ec:	22822008 	addcs	r2, r2, #8
   344f0:	e3510010 	cmp	r1, #16
   344f4:	21a01221 	lsrcs	r1, r1, #4
   344f8:	22822004 	addcs	r2, r2, #4
   344fc:	e3510004 	cmp	r1, #4
   34500:	82822003 	addhi	r2, r2, #3
   34504:	908220a1 	addls	r2, r2, r1, lsr #1
   34508:	e35c0000 	cmp	ip, #0
   3450c:	e1a00233 	lsr	r0, r3, r2
   34510:	42600000 	rsbmi	r0, r0, #0
   34514:	e12fff1e 	bx	lr
   34518:	e3500000 	cmp	r0, #0
   3451c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
   34520:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
   34524:	eafff08b 	b	30758 <__aeabi_idiv0>

00034528 <__aeabi_idivmod>:
   34528:	e3510000 	cmp	r1, #0
   3452c:	0afffff9 	beq	34518 <.divsi3_skip_div0_test+0x110>
   34530:	e92d4003 	push	{r0, r1, lr}
   34534:	ebffffb3 	bl	34408 <.divsi3_skip_div0_test>
   34538:	e8bd4006 	pop	{r1, r2, lr}
   3453c:	e0030092 	mul	r3, r2, r0
   34540:	e0411003 	sub	r1, r1, r3
   34544:	e12fff1e 	bx	lr
