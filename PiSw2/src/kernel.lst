
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <SET_BIT15+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea008428 	b	29108 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e92d4010 	push	{r4, lr}
    806c:	e24dd945 	sub	sp, sp, #1130496	; 0x114000
    8070:	e24ddeb3 	sub	sp, sp, #2864	; 0xb30
    8074:	e24dd008 	sub	sp, sp, #8
    8078:	e1a0000d 	mov	r0, sp
    807c:	eb00000f 	bl	80c0 <CKernel::CKernel()>
    8080:	e1a0000d 	mov	r0, sp
    8084:	eb0000a5 	bl	8320 <CKernel::Initialize()>
    8088:	e2504000 	subs	r4, r0, #0
    808c:	0a000004 	beq	80a4 <main+0x3c>
    8090:	e1a0000d 	mov	r0, sp
    8094:	eb0000e9 	bl	8440 <CKernel::Run()>
    8098:	e2404002 	sub	r4, r0, #2
    809c:	e16f4f14 	clz	r4, r4
    80a0:	e1a042a4 	lsr	r4, r4, #5
    80a4:	e1a0000d 	mov	r0, sp
    80a8:	eb000074 	bl	8280 <CKernel::~CKernel()>
    80ac:	e1a00004 	mov	r0, r4
    80b0:	e28dd945 	add	sp, sp, #1130496	; 0x114000
    80b4:	e28ddeb3 	add	sp, sp, #2864	; 0xb30
    80b8:	e28dd008 	add	sp, sp, #8
    80bc:	e8bd8010 	pop	{r4, pc}

000080c0 <CKernel::CKernel()>:
    80c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    80c4:	e1a04000 	mov	r4, r0
    80c8:	e24dd010 	sub	sp, sp, #16
    80cc:	eb00d14d 	bl	3c608 <Display::Display()>
    80d0:	e2840efa 	add	r0, r4, #4000	; 0xfa0
    80d4:	e3a01001 	mov	r1, #1
    80d8:	eb008e26 	bl	2b978 <CMemorySystem::CMemorySystem(bool)>
    80dc:	e2848d42 	add	r8, r4, #4224	; 0x1080
    80e0:	e2840d41 	add	r0, r4, #4160	; 0x1040
    80e4:	e3a01000 	mov	r1, #0
    80e8:	e2888008 	add	r8, r8, #8
    80ec:	e280003c 	add	r0, r0, #60	; 0x3c
    80f0:	eb00716a 	bl	246a0 <CActLED::CActLED(bool)>
    80f4:	e2845d63 	add	r5, r4, #6336	; 0x18c0
    80f8:	e1a00008 	mov	r0, r8
    80fc:	eb007898 	bl	26364 <CKernelOptions::CKernelOptions()>
    8100:	e2850024 	add	r0, r5, #36	; 0x24
    8104:	eb0073b6 	bl	24fe4 <CDeviceNameService::CDeviceNameService()>
    8108:	e2856030 	add	r6, r5, #48	; 0x30
    810c:	e285002c 	add	r0, r5, #44	; 0x2c
    8110:	eb008d1e 	bl	2b590 <CExceptionHandler::CExceptionHandler()>
    8114:	e1a00006 	mov	r0, r6
    8118:	eb008f63 	bl	2beac <CInterruptSystem::CInterruptSystem()>
    811c:	e3a03000 	mov	r3, #0
    8120:	e2847c1b 	add	r7, r4, #6912	; 0x1b00
    8124:	e284ac6a 	add	sl, r4, #27136	; 0x6a00
    8128:	e2877030 	add	r7, r7, #48	; 0x30
    812c:	e1a02003 	mov	r2, r3
    8130:	e28a9060 	add	r9, sl, #96	; 0x60
    8134:	e1a01006 	mov	r1, r6
    8138:	e1a00007 	mov	r0, r7
    813c:	e1a05003 	mov	r5, r3
    8140:	eb0093cc 	bl	2d078 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8144:	e1a01006 	mov	r1, r6
    8148:	e1a00009 	mov	r0, r9
    814c:	eb00842f 	bl	29210 <CTimer::CTimer(CInterruptSystem*)>
    8150:	e1a00008 	mov	r0, r8
    8154:	eb00784e 	bl	26294 <CKernelOptions::GetLogLevel() const>
    8158:	e1a02009 	mov	r2, r9
    815c:	e1a01000 	mov	r1, r0
    8160:	e28a009c 	add	r0, sl, #156	; 0x9c
    8164:	eb007994 	bl	267bc <CLogger::CLogger(unsigned int, CTimer*)>
    8168:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    816c:	e1a02009 	mov	r2, r9
    8170:	e1a01006 	mov	r1, r6
    8174:	e2800094 	add	r0, r0, #148	; 0x94
    8178:	e2846b1b 	add	r6, r4, #27648	; 0x6c00
    817c:	eb00067e 	bl	9b7c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>
    8180:	e2860018 	add	r0, r6, #24
    8184:	eb006f79 	bl	23f70 <CScheduler::CScheduler()>
    8188:	e59fc0d8 	ldr	ip, [pc, #216]	; 8268 <CKernel::CKernel()+0x1a8>
    818c:	e1a03005 	mov	r3, r5
    8190:	e58dc004 	str	ip, [sp, #4]
    8194:	e1a02005 	mov	r2, r5
    8198:	e1a01005 	mov	r1, r5
    819c:	e286007c 	add	r0, r6, #124	; 0x7c
    81a0:	e58d5008 	str	r5, [sp, #8]
    81a4:	e58d5000 	str	r5, [sp]
    81a8:	e2846c6d 	add	r6, r4, #27904	; 0x6d00
    81ac:	eb004519 	bl	19618 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>
    81b0:	e28660a8 	add	r6, r6, #168	; 0xa8
    81b4:	e1a01007 	mov	r1, r7
    81b8:	e2847ce5 	add	r7, r4, #58624	; 0xe500
    81bc:	e1a02005 	mov	r2, r5
    81c0:	e28770c4 	add	r7, r7, #196	; 0xc4
    81c4:	e1a00006 	mov	r0, r6
    81c8:	e284ab3a 	add	sl, r4, #59392	; 0xe800
    81cc:	e59f8098 	ldr	r8, [pc, #152]	; 826c <CKernel::CKernel()+0x1ac>
    81d0:	eb00a33d 	bl	30ecc <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)>
    81d4:	e28aa044 	add	sl, sl, #68	; 0x44
    81d8:	e1a00007 	mov	r0, r7
    81dc:	eb00a428 	bl	31284 <BusAccess::BusAccess()>
    81e0:	e0848008 	add	r8, r4, r8
    81e4:	e1a0000a 	mov	r0, sl
    81e8:	eb00b0be 	bl	344e8 <TargetProgrammer::TargetProgrammer()>
    81ec:	e1a02007 	mov	r2, r7
    81f0:	e1a01006 	mov	r1, r6
    81f4:	e1a00008 	mov	r0, r8
    81f8:	eb00b15d 	bl	34774 <HwManager::HwManager(CommandHandler&, BusAccess&)>
    81fc:	e59f906c 	ldr	r9, [pc, #108]	; 8270 <CKernel::CKernel()+0x1b0>
    8200:	e59f006c 	ldr	r0, [pc, #108]	; 8274 <CKernel::CKernel()+0x1b4>
    8204:	e1a03007 	mov	r3, r7
    8208:	e1a02008 	mov	r2, r8
    820c:	e1a01006 	mov	r1, r6
    8210:	e0849009 	add	r9, r4, r9
    8214:	e0840000 	add	r0, r4, r0
    8218:	eb00b5c0 	bl	35920 <BusControlAPI::BusControlAPI(CommandHandler&, HwManager&, BusAccess&)>
    821c:	e1a03008 	mov	r3, r8
    8220:	e1a02006 	mov	r2, r6
    8224:	e1a01004 	mov	r1, r4
    8228:	e88d0480 	stm	sp, {r7, sl}
    822c:	e1a00009 	mov	r0, r9
    8230:	eb00bc27 	bl	372d4 <McManager::McManager(DisplayBase*, CommandHandler&, HwManager&, BusAccess&, TargetProgrammer&)>
    8234:	e59f003c 	ldr	r0, [pc, #60]	; 8278 <CKernel::CKernel()+0x1b8>
    8238:	e1a03009 	mov	r3, r9
    823c:	e1a02006 	mov	r2, r6
    8240:	e1a01004 	mov	r1, r4
    8244:	e0840000 	add	r0, r4, r0
    8248:	eb0000db 	bl	85bc <BusRaiderApp::BusRaiderApp(Display&, CommsManager&, McManager&)>
    824c:	e1a00004 	mov	r0, r4
    8250:	e59f2024 	ldr	r2, [pc, #36]	; 827c <CKernel::CKernel()+0x1bc>
    8254:	e2843945 	add	r3, r4, #1130496	; 0x114000
    8258:	e5824000 	str	r4, [r2]
    825c:	e5c35b34 	strb	r5, [r3, #2868]	; 0xb34
    8260:	e28dd010 	add	sp, sp, #16
    8264:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8268:	0003eda8 	.word	0x0003eda8
    826c:	0010e934 	.word	0x0010e934
    8270:	0010ee68 	.word	0x0010ee68
    8274:	0010e974 	.word	0x0010e974
    8278:	001115f8 	.word	0x001115f8
    827c:	0004e1d8 	.word	0x0004e1d8

00008280 <CKernel::~CKernel()>:
    8280:	e92d4070 	push	{r4, r5, r6, lr}
    8284:	e1a04000 	mov	r4, r0
    8288:	e2800c6d 	add	r0, r0, #27904	; 0x6d00
    828c:	e2845b1b 	add	r5, r4, #27648	; 0x6c00
    8290:	e28000a8 	add	r0, r0, #168	; 0xa8
    8294:	eb00a332 	bl	30f64 <CommsManager::~CommsManager()>
    8298:	e285007c 	add	r0, r5, #124	; 0x7c
    829c:	eb0045a7 	bl	19940 <CNetSubSystem::~CNetSubSystem()>
    82a0:	e2850018 	add	r0, r5, #24
    82a4:	eb006f4d 	bl	23fe0 <CScheduler::~CScheduler()>
    82a8:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    82ac:	e2845c6a 	add	r5, r4, #27136	; 0x6a00
    82b0:	e2800094 	add	r0, r0, #148	; 0x94
    82b4:	eb000ee6 	bl	be54 <CDWHCIDevice::~CDWHCIDevice()>
    82b8:	e285009c 	add	r0, r5, #156	; 0x9c
    82bc:	eb007954 	bl	26814 <CLogger::~CLogger()>
    82c0:	e2850060 	add	r0, r5, #96	; 0x60
    82c4:	eb0083f2 	bl	29294 <CTimer::~CTimer()>
    82c8:	e2840c1b 	add	r0, r4, #6912	; 0x1b00
    82cc:	e2845d63 	add	r5, r4, #6336	; 0x18c0
    82d0:	e2800030 	add	r0, r0, #48	; 0x30
    82d4:	eb0093eb 	bl	2d288 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>
    82d8:	e2850030 	add	r0, r5, #48	; 0x30
    82dc:	eb008f00 	bl	2bee4 <CInterruptSystem::~CInterruptSystem()>
    82e0:	e285002c 	add	r0, r5, #44	; 0x2c
    82e4:	eb008ccc 	bl	2b61c <CExceptionHandler::~CExceptionHandler()>
    82e8:	e2850024 	add	r0, r5, #36	; 0x24
    82ec:	eb00734d 	bl	25028 <CDeviceNameService::~CDeviceNameService()>
    82f0:	e2840d42 	add	r0, r4, #4224	; 0x1080
    82f4:	e2800008 	add	r0, r0, #8
    82f8:	eb0077d9 	bl	26264 <CKernelOptions::~CKernelOptions()>
    82fc:	e2840d41 	add	r0, r4, #4160	; 0x1040
    8300:	e280003c 	add	r0, r0, #60	; 0x3c
    8304:	eb00710b 	bl	24738 <CActLED::~CActLED()>
    8308:	e2840efa 	add	r0, r4, #4000	; 0xfa0
    830c:	eb008de6 	bl	2baac <CMemorySystem::~CMemorySystem()>
    8310:	e1a00004 	mov	r0, r4
    8314:	eb00d031 	bl	3c3e0 <Display::~Display()>
    8318:	e1a00004 	mov	r0, r4
    831c:	e8bd8070 	pop	{r4, r5, r6, pc}

00008320 <CKernel::Initialize()>:
    8320:	e92d4070 	push	{r4, r5, r6, lr}
    8324:	e2805d63 	add	r5, r0, #6336	; 0x18c0
    8328:	e1a04000 	mov	r4, r0
    832c:	e2850030 	add	r0, r5, #48	; 0x30
    8330:	eb008efa 	bl	2bf20 <CInterruptSystem::Initialize()>
    8334:	e3500000 	cmp	r0, #0
    8338:	1a000002 	bne	8348 <CKernel::Initialize()+0x28>
    833c:	e3a05000 	mov	r5, #0
    8340:	e1a00005 	mov	r0, r5
    8344:	e8bd8070 	pop	{r4, r5, r6, pc}
    8348:	e1a00004 	mov	r0, r4
    834c:	eb00d0b9 	bl	3c638 <Display::init()>
    8350:	e3500000 	cmp	r0, #0
    8354:	0afffff8 	beq	833c <CKernel::Initialize()+0x1c>
    8358:	e2840d42 	add	r0, r4, #4224	; 0x1080
    835c:	e2800008 	add	r0, r0, #8
    8360:	eb0077c8 	bl	26288 <CKernelOptions::GetLogDevice() const>
    8364:	e3a02000 	mov	r2, #0
    8368:	e1a01000 	mov	r1, r0
    836c:	e2850024 	add	r0, r5, #36	; 0x24
    8370:	eb0073be 	bl	25270 <CDeviceNameService::GetDevice(char const*, bool)>
    8374:	e2845c6a 	add	r5, r4, #27136	; 0x6a00
    8378:	e3500000 	cmp	r0, #0
    837c:	11a01000 	movne	r1, r0
    8380:	01a01004 	moveq	r1, r4
    8384:	e285009c 	add	r0, r5, #156	; 0x9c
    8388:	eb00793e 	bl	26888 <CLogger::Initialize(CDevice*)>
    838c:	e3500000 	cmp	r0, #0
    8390:	0affffe9 	beq	833c <CKernel::Initialize()+0x1c>
    8394:	e59f3090 	ldr	r3, [pc, #144]	; 842c <CKernel::Initialize()+0x10c>
    8398:	e2840c1b 	add	r0, r4, #6912	; 0x1b00
    839c:	e1a02003 	mov	r2, r3
    83a0:	e2800030 	add	r0, r0, #48	; 0x30
    83a4:	e3a01ae1 	mov	r1, #921600	; 0xe1000
    83a8:	eb00941f 	bl	2d42c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)>
    83ac:	e3500000 	cmp	r0, #0
    83b0:	0affffe1 	beq	833c <CKernel::Initialize()+0x1c>
    83b4:	e2850060 	add	r0, r5, #96	; 0x60
    83b8:	eb00865f 	bl	29d3c <CTimer::Initialize()>
    83bc:	e3500000 	cmp	r0, #0
    83c0:	0affffdd 	beq	833c <CKernel::Initialize()+0x1c>
    83c4:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    83c8:	e2800094 	add	r0, r0, #148	; 0x94
    83cc:	eb000f05 	bl	bfe8 <CDWHCIDevice::Initialize()>
    83d0:	e3500000 	cmp	r0, #0
    83d4:	0affffd8 	beq	833c <CKernel::Initialize()+0x1c>
    83d8:	e2840c6d 	add	r0, r4, #27904	; 0x6d00
    83dc:	e28000a8 	add	r0, r0, #168	; 0xa8
    83e0:	eb00a2e4 	bl	30f78 <CommsManager::setup()>
    83e4:	e1a05000 	mov	r5, r0
    83e8:	e2840ce5 	add	r0, r4, #58624	; 0xe500
    83ec:	e28000c4 	add	r0, r0, #196	; 0xc4
    83f0:	eb00a3d8 	bl	31358 <BusAccess::init()>
    83f4:	e59f0034 	ldr	r0, [pc, #52]	; 8430 <CKernel::Initialize()+0x110>
    83f8:	e0840000 	add	r0, r4, r0
    83fc:	eb00b0eb 	bl	347b0 <HwManager::init()>
    8400:	e59f002c 	ldr	r0, [pc, #44]	; 8434 <CKernel::Initialize()+0x114>
    8404:	e0840000 	add	r0, r4, r0
    8408:	eb00b557 	bl	3596c <BusControlAPI::init()>
    840c:	e59f0024 	ldr	r0, [pc, #36]	; 8438 <CKernel::Initialize()+0x118>
    8410:	e0840000 	add	r0, r4, r0
    8414:	eb00bbce 	bl	37354 <McManager::init()>
    8418:	e59f001c 	ldr	r0, [pc, #28]	; 843c <CKernel::Initialize()+0x11c>
    841c:	e0840000 	add	r0, r4, r0
    8420:	eb000087 	bl	8644 <BusRaiderApp::init()>
    8424:	e1a00005 	mov	r0, r5
    8428:	e8bd8070 	pop	{r4, r5, r6, pc}
    842c:	000f4240 	.word	0x000f4240
    8430:	0010e934 	.word	0x0010e934
    8434:	0010e974 	.word	0x0010e974
    8438:	0010ee68 	.word	0x0010ee68
    843c:	001115f8 	.word	0x001115f8

00008440 <CKernel::Run()>:
    8440:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8444:	e1a04000 	mov	r4, r0
    8448:	e2809c6a 	add	r9, r0, #27136	; 0x6a00
    844c:	e289909c 	add	r9, r9, #156	; 0x9c
    8450:	e1a00009 	mov	r0, r9
    8454:	e59f3114 	ldr	r3, [pc, #276]	; 8570 <CKernel::Run()+0x130>
    8458:	e3a02003 	mov	r2, #3
    845c:	e59f1110 	ldr	r1, [pc, #272]	; 8574 <CKernel::Run()+0x134>
    8460:	eb00791a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8464:	e2840d63 	add	r0, r4, #6336	; 0x18c0
    8468:	e2800024 	add	r0, r0, #36	; 0x24
    846c:	e3a02000 	mov	r2, #0
    8470:	e59f1100 	ldr	r1, [pc, #256]	; 8578 <CKernel::Run()+0x138>
    8474:	eb00737d 	bl	25270 <CDeviceNameService::GetDevice(char const*, bool)>
    8478:	e2506000 	subs	r6, r0, #0
    847c:	0a00002f 	beq	8540 <CKernel::Run()+0x100>
    8480:	e3a02001 	mov	r2, #1
    8484:	e59f50f0 	ldr	r5, [pc, #240]	; 857c <CKernel::Run()+0x13c>
    8488:	e1a01002 	mov	r1, r2
    848c:	e0845005 	add	r5, r4, r5
    8490:	e1a00005 	mov	r0, r5
    8494:	eb00009f 	bl	8718 <BusRaiderApp::peripheralStatus(bool, bool)>
    8498:	e1a00006 	mov	r0, r6
    849c:	e59f10dc 	ldr	r1, [pc, #220]	; 8580 <CKernel::Run()+0x140>
    84a0:	eb00051a 	bl	9910 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>
    84a4:	e59f80d8 	ldr	r8, [pc, #216]	; 8584 <CKernel::Run()+0x144>
    84a8:	e59f70d8 	ldr	r7, [pc, #216]	; 8588 <CKernel::Run()+0x148>
    84ac:	e59f60d8 	ldr	r6, [pc, #216]	; 858c <CKernel::Run()+0x14c>
    84b0:	e0848008 	add	r8, r4, r8
    84b4:	e0847007 	add	r7, r4, r7
    84b8:	e0846006 	add	r6, r4, r6
    84bc:	eb0089fd 	bl	2acb8 <IsChainBootEnabled>
    84c0:	e3500000 	cmp	r0, #0
    84c4:	e2843945 	add	r3, r4, #1130496	; 0x114000
    84c8:	1a000004 	bne	84e0 <CKernel::Run()+0xa0>
    84cc:	e5d33b34 	ldrb	r3, [r3, #2868]	; 0xb34
    84d0:	e2840ce5 	add	r0, r4, #58624	; 0xe500
    84d4:	e3530000 	cmp	r3, #0
    84d8:	e28000c4 	add	r0, r0, #196	; 0xc4
    84dc:	0a00000a 	beq	850c <CKernel::Run()+0xcc>
    84e0:	e1a00009 	mov	r0, r9
    84e4:	e59f30a4 	ldr	r3, [pc, #164]	; 8590 <CKernel::Run()+0x150>
    84e8:	e3a02003 	mov	r2, #3
    84ec:	e59f1080 	ldr	r1, [pc, #128]	; 8574 <CKernel::Run()+0x134>
    84f0:	eb0078f6 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    84f4:	e2840b1b 	add	r0, r4, #27648	; 0x6c00
    84f8:	e2800018 	add	r0, r0, #24
    84fc:	e3a01001 	mov	r1, #1
    8500:	eb006fda 	bl	24470 <CScheduler::Sleep(unsigned int)>
    8504:	e3a00002 	mov	r0, #2
    8508:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    850c:	eb00a707 	bl	32130 <BusAccess::service()>
    8510:	e1a00008 	mov	r0, r8
    8514:	eb00b0dc 	bl	3488c <HwManager::service()>
    8518:	e1a00007 	mov	r0, r7
    851c:	eb00b74e 	bl	3625c <BusControlAPI::service()>
    8520:	e1a00006 	mov	r0, r6
    8524:	eb00bd4e 	bl	37a64 <McManager::service()>
    8528:	e1a00005 	mov	r0, r5
    852c:	eb000333 	bl	9200 <BusRaiderApp::service()>
    8530:	e2840c6d 	add	r0, r4, #27904	; 0x6d00
    8534:	e28000a8 	add	r0, r0, #168	; 0xa8
    8538:	eb00a2d6 	bl	31098 <CommsManager::service()>
    853c:	eaffffde 	b	84bc <CKernel::Run()+0x7c>
    8540:	e59f5034 	ldr	r5, [pc, #52]	; 857c <CKernel::Run()+0x13c>
    8544:	e1a00009 	mov	r0, r9
    8548:	e59f3044 	ldr	r3, [pc, #68]	; 8594 <CKernel::Run()+0x154>
    854c:	e0845005 	add	r5, r4, r5
    8550:	e3a02001 	mov	r2, #1
    8554:	e59f1018 	ldr	r1, [pc, #24]	; 8574 <CKernel::Run()+0x134>
    8558:	eb0078dc 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    855c:	e1a00005 	mov	r0, r5
    8560:	e1a02006 	mov	r2, r6
    8564:	e3a01001 	mov	r1, #1
    8568:	eb00006a 	bl	8718 <BusRaiderApp::peripheralStatus(bool, bool)>
    856c:	eaffffc9 	b	8498 <CKernel::Run()+0x58>
    8570:	0003edb4 	.word	0x0003edb4
    8574:	0003eda0 	.word	0x0003eda0
    8578:	0003edd8 	.word	0x0003edd8
    857c:	001115f8 	.word	0x001115f8
    8580:	00008598 	.word	0x00008598
    8584:	0010e934 	.word	0x0010e934
    8588:	0010e974 	.word	0x0010e974
    858c:	0010ee68 	.word	0x0010ee68
    8590:	0003edf4 	.word	0x0003edf4
    8594:	0003ede0 	.word	0x0003ede0

00008598 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)>:
    8598:	e59f3014 	ldr	r3, [pc, #20]	; 85b4 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x1c>
    859c:	e1a02001 	mov	r2, r1
    85a0:	e5933000 	ldr	r3, [r3]
    85a4:	e1a01000 	mov	r1, r0
    85a8:	e59f0008 	ldr	r0, [pc, #8]	; 85b8 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x20>
    85ac:	e0830000 	add	r0, r3, r0
    85b0:	ea0001a4 	b	8c48 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)>
    85b4:	0004e1d8 	.word	0x0004e1d8
    85b8:	001115f8 	.word	0x001115f8

000085bc <BusRaiderApp::BusRaiderApp(Display&, CommsManager&, McManager&)>:
    85bc:	e3a0c000 	mov	ip, #0
    85c0:	e92d4030 	push	{r4, r5, lr}
    85c4:	e3a05064 	mov	r5, #100	; 0x64
    85c8:	e3e04000 	mvn	r4, #0
    85cc:	e5801078 	str	r1, [r0, #120]	; 0x78
    85d0:	e59f1068 	ldr	r1, [pc, #104]	; 8640 <BusRaiderApp::BusRaiderApp(Display&, CommsManager&, McManager&)+0x84>
    85d4:	e580207c 	str	r2, [r0, #124]	; 0x7c
    85d8:	e2802a03 	add	r2, r0, #12288	; 0x3000
    85dc:	e5803080 	str	r3, [r0, #128]	; 0x80
    85e0:	e5c0c008 	strb	ip, [r0, #8]
    85e4:	e580c070 	str	ip, [r0, #112]	; 0x70
    85e8:	e5810000 	str	r0, [r1]
    85ec:	e582c528 	str	ip, [r2, #1320]	; 0x528
    85f0:	e5c2c534 	strb	ip, [r2, #1332]	; 0x534
    85f4:	e582c52c 	str	ip, [r2, #1324]	; 0x52c
    85f8:	e5825530 	str	r5, [r2, #1328]	; 0x530
    85fc:	e1a0e000 	mov	lr, r0
    8600:	e580c004 	str	ip, [r0, #4]
    8604:	e580c074 	str	ip, [r0, #116]	; 0x74
    8608:	e5c0c084 	strb	ip, [r0, #132]	; 0x84
    860c:	e5c0c000 	strb	ip, [r0]
    8610:	e5c0c854 	strb	ip, [r0, #2132]	; 0x854
    8614:	e5c0c872 	strb	ip, [r0, #2162]	; 0x872
    8618:	e5c0c890 	strb	ip, [r0, #2192]	; 0x890
    861c:	e5c0c8f4 	strb	ip, [r0, #2292]	; 0x8f4
    8620:	e5c0c958 	strb	ip, [r0, #2392]	; 0x958
    8624:	e580c95c 	str	ip, [r0, #2396]	; 0x95c
    8628:	e5c0c960 	strb	ip, [r0, #2400]	; 0x960
    862c:	e582c070 	str	ip, [r2, #112]	; 0x70
    8630:	e582c074 	str	ip, [r2, #116]	; 0x74
    8634:	e5c2c535 	strb	ip, [r2, #1333]	; 0x535
    8638:	e5824538 	str	r4, [r2, #1336]	; 0x538
    863c:	e8bd8030 	pop	{r4, r5, pc}
    8640:	0004e1dc 	.word	0x0004e1dc

00008644 <BusRaiderApp::init()>:
    8644:	e1a01000 	mov	r1, r0
    8648:	e3a03000 	mov	r3, #0
    864c:	e3e0c000 	mvn	ip, #0
    8650:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8654:	e2812a03 	add	r2, r1, #12288	; 0x3000
    8658:	e24dd00c 	sub	sp, sp, #12
    865c:	e590007c 	ldr	r0, [r0, #124]	; 0x7c
    8660:	e5813004 	str	r3, [r1, #4]
    8664:	e5c13008 	strb	r3, [r1, #8]
    8668:	e5813070 	str	r3, [r1, #112]	; 0x70
    866c:	e5813074 	str	r3, [r1, #116]	; 0x74
    8670:	e5c13084 	strb	r3, [r1, #132]	; 0x84
    8674:	e5c13000 	strb	r3, [r1]
    8678:	e5c13854 	strb	r3, [r1, #2132]	; 0x854
    867c:	e5c13872 	strb	r3, [r1, #2162]	; 0x872
    8680:	e5c13890 	strb	r3, [r1, #2192]	; 0x890
    8684:	e5c138f4 	strb	r3, [r1, #2292]	; 0x8f4
    8688:	e5c13958 	strb	r3, [r1, #2392]	; 0x958
    868c:	e581395c 	str	r3, [r1, #2396]	; 0x95c
    8690:	e5c13960 	strb	r3, [r1, #2400]	; 0x960
    8694:	e58d3004 	str	r3, [sp, #4]
    8698:	e5823070 	str	r3, [r2, #112]	; 0x70
    869c:	e5823074 	str	r3, [r2, #116]	; 0x74
    86a0:	e5c23535 	strb	r3, [r2, #1333]	; 0x535
    86a4:	e58d3000 	str	r3, [sp]
    86a8:	e582c538 	str	ip, [r2, #1336]	; 0x538
    86ac:	e59f300c 	ldr	r3, [pc, #12]	; 86c0 <BusRaiderApp::init()+0x7c>
    86b0:	e3a02001 	mov	r2, #1
    86b4:	eb009d1f 	bl	2fb38 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
    86b8:	e28dd00c 	add	sp, sp, #12
    86bc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    86c0:	00009660 	.word	0x00009660

000086c4 <BusRaiderApp::clear()>:
    86c4:	e3a03000 	mov	r3, #0
    86c8:	e3e01000 	mvn	r1, #0
    86cc:	e2802a03 	add	r2, r0, #12288	; 0x3000
    86d0:	e5803004 	str	r3, [r0, #4]
    86d4:	e5c03008 	strb	r3, [r0, #8]
    86d8:	e5803070 	str	r3, [r0, #112]	; 0x70
    86dc:	e5803074 	str	r3, [r0, #116]	; 0x74
    86e0:	e5c03084 	strb	r3, [r0, #132]	; 0x84
    86e4:	e5c03000 	strb	r3, [r0]
    86e8:	e5c03854 	strb	r3, [r0, #2132]	; 0x854
    86ec:	e5c03872 	strb	r3, [r0, #2162]	; 0x872
    86f0:	e5c03890 	strb	r3, [r0, #2192]	; 0x890
    86f4:	e5c038f4 	strb	r3, [r0, #2292]	; 0x8f4
    86f8:	e5c03958 	strb	r3, [r0, #2392]	; 0x958
    86fc:	e580395c 	str	r3, [r0, #2396]	; 0x95c
    8700:	e5c03960 	strb	r3, [r0, #2400]	; 0x960
    8704:	e5823070 	str	r3, [r2, #112]	; 0x70
    8708:	e5823074 	str	r3, [r2, #116]	; 0x74
    870c:	e5c23535 	strb	r3, [r2, #1333]	; 0x535
    8710:	e5821538 	str	r1, [r2, #1336]	; 0x538
    8714:	e12fff1e 	bx	lr

00008718 <BusRaiderApp::peripheralStatus(bool, bool)>:
    8718:	e3510000 	cmp	r1, #0
    871c:	0a00000a 	beq	874c <BusRaiderApp::peripheralStatus(bool, bool)+0x34>
    8720:	e3520000 	cmp	r2, #0
    8724:	e5900078 	ldr	r0, [r0, #120]	; 0x78
    8728:	0a000003 	beq	873c <BusRaiderApp::peripheralStatus(bool, bool)+0x24>
    872c:	e59f302c 	ldr	r3, [pc, #44]	; 8760 <BusRaiderApp::peripheralStatus(bool, bool)+0x48>
    8730:	e3a02002 	mov	r2, #2
    8734:	e3a01008 	mov	r1, #8
    8738:	ea00d00e 	b	3c778 <Display::statusPut(int, int, char const*)>
    873c:	e59f3020 	ldr	r3, [pc, #32]	; 8764 <BusRaiderApp::peripheralStatus(bool, bool)+0x4c>
    8740:	e3a02001 	mov	r2, #1
    8744:	e3a01008 	mov	r1, #8
    8748:	ea00d00a 	b	3c778 <Display::statusPut(int, int, char const*)>
    874c:	e1a02001 	mov	r2, r1
    8750:	e5900078 	ldr	r0, [r0, #120]	; 0x78
    8754:	e59f300c 	ldr	r3, [pc, #12]	; 8768 <BusRaiderApp::peripheralStatus(bool, bool)+0x50>
    8758:	e3a01008 	mov	r1, #8
    875c:	ea00d005 	b	3c778 <Display::statusPut(int, int, char const*)>
    8760:	0003ee14 	.word	0x0003ee14
    8764:	0003ee34 	.word	0x0003ee34
    8768:	0003ee48 	.word	0x0003ee48

0000876c <BusRaiderApp::statusDisplayUpdate()>:
    876c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8770:	e1a06000 	mov	r6, r0
    8774:	e5903080 	ldr	r3, [r0, #128]	; 0x80
    8778:	e24dd0d4 	sub	sp, sp, #212	; 0xd4
    877c:	e593400c 	ldr	r4, [r3, #12]
    8780:	e590507c 	ldr	r5, [r0, #124]	; 0x7c
    8784:	eb0095ec 	bl	2df3c <micros>
    8788:	e5961004 	ldr	r1, [r6, #4]
    878c:	e59f244c 	ldr	r2, [pc, #1100]	; 8be0 <BusRaiderApp::statusDisplayUpdate()+0x474>
    8790:	eb009607 	bl	2dfb4 <isTimeout>
    8794:	e3500000 	cmp	r0, #0
    8798:	1a000001 	bne	87a4 <BusRaiderApp::statusDisplayUpdate()+0x38>
    879c:	e28dd0d4 	add	sp, sp, #212	; 0xd4
    87a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    87a4:	eb0095e4 	bl	2df3c <micros>
    87a8:	e3a02000 	mov	r2, #0
    87ac:	e59f7430 	ldr	r7, [pc, #1072]	; 8be4 <BusRaiderApp::statusDisplayUpdate()+0x478>
    87b0:	e1a01002 	mov	r1, r2
    87b4:	e5973000 	ldr	r3, [r7]
    87b8:	e5860004 	str	r0, [r6, #4]
    87bc:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    87c0:	eb00cfec 	bl	3c778 <Display::statusPut(int, int, char const*)>
    87c4:	e5973004 	ldr	r3, [r7, #4]
    87c8:	e3a02000 	mov	r2, #0
    87cc:	e3a01001 	mov	r1, #1
    87d0:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    87d4:	e2867e8f 	add	r7, r6, #2288	; 0x8f0
    87d8:	eb00cfe6 	bl	3c778 <Display::statusPut(int, int, char const*)>
    87dc:	e2877004 	add	r7, r7, #4
    87e0:	e3a02032 	mov	r2, #50	; 0x32
    87e4:	e59f13fc 	ldr	r1, [pc, #1020]	; 8be8 <BusRaiderApp::statusDisplayUpdate()+0x47c>
    87e8:	e28d005c 	add	r0, sp, #92	; 0x5c
    87ec:	eb00960d 	bl	2e028 <strlcpy>
    87f0:	e1a00007 	mov	r0, r7
    87f4:	eb008624 	bl	2a08c <strlen>
    87f8:	e3500000 	cmp	r0, #0
    87fc:	0a0000ab 	beq	8ab0 <BusRaiderApp::statusDisplayUpdate()+0x344>
    8800:	e1a01007 	mov	r1, r7
    8804:	e3a02032 	mov	r2, #50	; 0x32
    8808:	e28d005c 	add	r0, sp, #92	; 0x5c
    880c:	eb009621 	bl	2e098 <strlcat>
    8810:	e5942000 	ldr	r2, [r4]
    8814:	e59f13d0 	ldr	r1, [pc, #976]	; 8bec <BusRaiderApp::statusDisplayUpdate()+0x480>
    8818:	e1a03fc2 	asr	r3, r2, #31
    881c:	e0c10291 	smull	r0, r1, r1, r2
    8820:	e0633141 	rsb	r3, r3, r1, asr #2
    8824:	e0831103 	add	r1, r3, r3, lsl #2
    8828:	e0422081 	sub	r2, r2, r1, lsl #1
    882c:	e58d2000 	str	r2, [sp]
    8830:	e3a0101e 	mov	r1, #30
    8834:	e59f23b4 	ldr	r2, [pc, #948]	; 8bf0 <BusRaiderApp::statusDisplayUpdate()+0x484>
    8838:	e28d0090 	add	r0, sp, #144	; 0x90
    883c:	eb009670 	bl	2e204 <snprintf>
    8840:	e28d1090 	add	r1, sp, #144	; 0x90
    8844:	e3a02032 	mov	r2, #50	; 0x32
    8848:	e28d005c 	add	r0, sp, #92	; 0x5c
    884c:	eb009611 	bl	2e098 <strlcat>
    8850:	e3a02032 	mov	r2, #50	; 0x32
    8854:	e59f1398 	ldr	r1, [pc, #920]	; 8bf4 <BusRaiderApp::statusDisplayUpdate()+0x488>
    8858:	e28d005c 	add	r0, sp, #92	; 0x5c
    885c:	eb00960d 	bl	2e098 <strlcat>
    8860:	e28d305c 	add	r3, sp, #92	; 0x5c
    8864:	e3a02000 	mov	r2, #0
    8868:	e3a01002 	mov	r1, #2
    886c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8870:	eb00cfc0 	bl	3c778 <Display::statusPut(int, int, char const*)>
    8874:	e3a02000 	mov	r2, #0
    8878:	e5d63872 	ldrb	r3, [r6, #2162]	; 0x872
    887c:	e5cd205c 	strb	r2, [sp, #92]	; 0x5c
    8880:	e3530043 	cmp	r3, #67	; 0x43
    8884:	e3a02032 	mov	r2, #50	; 0x32
    8888:	1a0000be 	bne	8b88 <BusRaiderApp::statusDisplayUpdate()+0x41c>
    888c:	e59f1364 	ldr	r1, [pc, #868]	; 8bf8 <BusRaiderApp::statusDisplayUpdate()+0x48c>
    8890:	e28d005c 	add	r0, sp, #92	; 0x5c
    8894:	eb0095e3 	bl	2e028 <strlcpy>
    8898:	e5d63958 	ldrb	r3, [r6, #2392]	; 0x958
    889c:	e3530000 	cmp	r3, #0
    88a0:	1a0000c6 	bne	8bc0 <BusRaiderApp::statusDisplayUpdate()+0x454>
    88a4:	e3a02032 	mov	r2, #50	; 0x32
    88a8:	e59f1344 	ldr	r1, [pc, #836]	; 8bf4 <BusRaiderApp::statusDisplayUpdate()+0x488>
    88ac:	e28d005c 	add	r0, sp, #92	; 0x5c
    88b0:	eb0095f8 	bl	2e098 <strlcat>
    88b4:	e28d305c 	add	r3, sp, #92	; 0x5c
    88b8:	e3a02000 	mov	r2, #0
    88bc:	e3a01003 	mov	r1, #3
    88c0:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    88c4:	eb00cfab 	bl	3c778 <Display::statusPut(int, int, char const*)>
    88c8:	e3a02032 	mov	r2, #50	; 0x32
    88cc:	e59f1328 	ldr	r1, [pc, #808]	; 8bfc <BusRaiderApp::statusDisplayUpdate()+0x490>
    88d0:	e28d005c 	add	r0, sp, #92	; 0x5c
    88d4:	eb0095d3 	bl	2e028 <strlcpy>
    88d8:	e5960080 	ldr	r0, [r6, #128]	; 0x80
    88dc:	eb00bae2 	bl	3746c <McManager::getMachineName()>
    88e0:	e3a02032 	mov	r2, #50	; 0x32
    88e4:	e1a01000 	mov	r1, r0
    88e8:	e28d005c 	add	r0, sp, #92	; 0x5c
    88ec:	eb0095e9 	bl	2e098 <strlcat>
    88f0:	e3a02028 	mov	r2, #40	; 0x28
    88f4:	e59f1304 	ldr	r1, [pc, #772]	; 8c00 <BusRaiderApp::statusDisplayUpdate()+0x494>
    88f8:	e28d005c 	add	r0, sp, #92	; 0x5c
    88fc:	eb0095e5 	bl	2e098 <strlcat>
    8900:	e3a02000 	mov	r2, #0
    8904:	e28d305c 	add	r3, sp, #92	; 0x5c
    8908:	e3a01004 	mov	r1, #4
    890c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8910:	eb00cf98 	bl	3c778 <Display::statusPut(int, int, char const*)>
    8914:	e5960080 	ldr	r0, [r6, #128]	; 0x80
    8918:	eb00bb3f 	bl	3761c <McManager::getMachineClock()>
    891c:	e59f12e0 	ldr	r1, [pc, #736]	; 8c04 <BusRaiderApp::statusDisplayUpdate()+0x498>
    8920:	e1a03fc0 	asr	r3, r0, #31
    8924:	e0c12091 	smull	r2, r1, r1, r0
    8928:	e59f22d8 	ldr	r2, [pc, #728]	; 8c08 <BusRaiderApp::statusDisplayUpdate()+0x49c>
    892c:	e0633941 	rsb	r3, r3, r1, asr #18
    8930:	e0200392 	mla	r0, r2, r3, r0
    8934:	e59f12d0 	ldr	r1, [pc, #720]	; 8c0c <BusRaiderApp::statusDisplayUpdate()+0x4a0>
    8938:	e1a02fc0 	asr	r2, r0, #31
    893c:	e0c01091 	smull	r1, r0, r1, r0
    8940:	e0620340 	rsb	r0, r2, r0, asr #6
    8944:	e3500063 	cmp	r0, #99	; 0x63
    8948:	ca00008b 	bgt	8b7c <BusRaiderApp::statusDisplayUpdate()+0x410>
    894c:	e59f22bc 	ldr	r2, [pc, #700]	; 8c10 <BusRaiderApp::statusDisplayUpdate()+0x4a4>
    8950:	e3500009 	cmp	r0, #9
    8954:	d1a01002 	movle	r1, r2
    8958:	ca00009e 	bgt	8bd8 <BusRaiderApp::statusDisplayUpdate()+0x46c>
    895c:	e58d0008 	str	r0, [sp, #8]
    8960:	e58d1004 	str	r1, [sp, #4]
    8964:	e58d2000 	str	r2, [sp]
    8968:	e3a01032 	mov	r1, #50	; 0x32
    896c:	e59f22a0 	ldr	r2, [pc, #672]	; 8c14 <BusRaiderApp::statusDisplayUpdate()+0x4a8>
    8970:	e28d005c 	add	r0, sp, #92	; 0x5c
    8974:	eb009622 	bl	2e204 <snprintf>
    8978:	e3a02032 	mov	r2, #50	; 0x32
    897c:	e59f1294 	ldr	r1, [pc, #660]	; 8c18 <BusRaiderApp::statusDisplayUpdate()+0x4ac>
    8980:	e28d005c 	add	r0, sp, #92	; 0x5c
    8984:	eb0095c3 	bl	2e098 <strlcat>
    8988:	e28d305c 	add	r3, sp, #92	; 0x5c
    898c:	e3a02000 	mov	r2, #0
    8990:	e3a01005 	mov	r1, #5
    8994:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8998:	eb00cf76 	bl	3c778 <Display::statusPut(int, int, char const*)>
    899c:	e3a03000 	mov	r3, #0
    89a0:	e3a02032 	mov	r2, #50	; 0x32
    89a4:	e59f1270 	ldr	r1, [pc, #624]	; 8c1c <BusRaiderApp::statusDisplayUpdate()+0x4b0>
    89a8:	e28d005c 	add	r0, sp, #92	; 0x5c
    89ac:	e5cd305c 	strb	r3, [sp, #92]	; 0x5c
    89b0:	eb00959c 	bl	2e028 <strlcpy>
    89b4:	e1a00004 	mov	r0, r4
    89b8:	eb00a651 	bl	32304 <BusAccess::isUnderControl()>
    89bc:	e3500000 	cmp	r0, #0
    89c0:	1a000079 	bne	8bac <BusRaiderApp::statusDisplayUpdate()+0x440>
    89c4:	e28d305c 	add	r3, sp, #92	; 0x5c
    89c8:	e3a02000 	mov	r2, #0
    89cc:	e3a01006 	mov	r1, #6
    89d0:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    89d4:	eb00cf67 	bl	3c778 <Display::statusPut(int, int, char const*)>
    89d8:	e5960080 	ldr	r0, [r6, #128]	; 0x80
    89dc:	eb00bc5d 	bl	37b58 <McManager::getDisplayRefreshRate()>
    89e0:	e1a04000 	mov	r4, r0
    89e4:	e5d61000 	ldrb	r1, [r6]
    89e8:	e59f3230 	ldr	r3, [pc, #560]	; 8c20 <BusRaiderApp::statusDisplayUpdate()+0x4b4>
    89ec:	e59f2230 	ldr	r2, [pc, #560]	; 8c24 <BusRaiderApp::statusDisplayUpdate()+0x4b8>
    89f0:	e3510000 	cmp	r1, #0
    89f4:	11a01002 	movne	r1, r2
    89f8:	01a01003 	moveq	r1, r3
    89fc:	e3a02028 	mov	r2, #40	; 0x28
    8a00:	e28d0030 	add	r0, sp, #48	; 0x30
    8a04:	eb009587 	bl	2e028 <strlcpy>
    8a08:	e5d63000 	ldrb	r3, [r6]
    8a0c:	e3a02028 	mov	r2, #40	; 0x28
    8a10:	e2233001 	eor	r3, r3, #1
    8a14:	e5c63000 	strb	r3, [r6]
    8a18:	e59f1208 	ldr	r1, [pc, #520]	; 8c28 <BusRaiderApp::statusDisplayUpdate()+0x4bc>
    8a1c:	e28d0030 	add	r0, sp, #48	; 0x30
    8a20:	eb00959c 	bl	2e098 <strlcat>
    8a24:	e1a00004 	mov	r0, r4
    8a28:	e3a04000 	mov	r4, #0
    8a2c:	e3a0300a 	mov	r3, #10
    8a30:	e28d101c 	add	r1, sp, #28
    8a34:	e3a02028 	mov	r2, #40	; 0x28
    8a38:	eb00974b 	bl	2e76c <rditoa>
    8a3c:	e28d101c 	add	r1, sp, #28
    8a40:	e3a02028 	mov	r2, #40	; 0x28
    8a44:	e28d0030 	add	r0, sp, #48	; 0x30
    8a48:	eb009592 	bl	2e098 <strlcat>
    8a4c:	e3a02028 	mov	r2, #40	; 0x28
    8a50:	e59f11d4 	ldr	r1, [pc, #468]	; 8c2c <BusRaiderApp::statusDisplayUpdate()+0x4c0>
    8a54:	e28d0030 	add	r0, sp, #48	; 0x30
    8a58:	eb00958e 	bl	2e098 <strlcat>
    8a5c:	e28d3030 	add	r3, sp, #48	; 0x30
    8a60:	e3a02000 	mov	r2, #0
    8a64:	e3a01007 	mov	r1, #7
    8a68:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8a6c:	eb00cf41 	bl	3c778 <Display::statusPut(int, int, char const*)>
    8a70:	e28d20d0 	add	r2, sp, #208	; 0xd0
    8a74:	e52240b8 	str	r4, [r2, #-184]!	; 0xffffff48
    8a78:	e1a00005 	mov	r0, r5
    8a7c:	e28d1014 	add	r1, sp, #20
    8a80:	e58d4014 	str	r4, [sp, #20]
    8a84:	eb009cc6 	bl	2fda4 <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)>
    8a88:	e3500000 	cmp	r0, #0
    8a8c:	058d0014 	streq	r0, [sp, #20]
    8a90:	1a000010 	bne	8ad8 <BusRaiderApp::statusDisplayUpdate()+0x36c>
    8a94:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8a98:	e59f3190 	ldr	r3, [pc, #400]	; 8c30 <BusRaiderApp::statusDisplayUpdate()+0x4c4>
    8a9c:	e3a02001 	mov	r2, #1
    8aa0:	e3a0100a 	mov	r1, #10
    8aa4:	eb00cf33 	bl	3c778 <Display::statusPut(int, int, char const*)>
    8aa8:	e28dd0d4 	add	sp, sp, #212	; 0xd4
    8aac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8ab0:	e3a02032 	mov	r2, #50	; 0x32
    8ab4:	e59f1178 	ldr	r1, [pc, #376]	; 8c34 <BusRaiderApp::statusDisplayUpdate()+0x4c8>
    8ab8:	e28d005c 	add	r0, sp, #92	; 0x5c
    8abc:	eb009575 	bl	2e098 <strlcat>
    8ac0:	e28d305c 	add	r3, sp, #92	; 0x5c
    8ac4:	e3a02001 	mov	r2, #1
    8ac8:	e3a01002 	mov	r1, #2
    8acc:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8ad0:	eb00cf28 	bl	3c778 <Display::statusPut(int, int, char const*)>
    8ad4:	eaffff66 	b	8874 <BusRaiderApp::statusDisplayUpdate()+0x108>
    8ad8:	e59d1014 	ldr	r1, [sp, #20]
    8adc:	e3510000 	cmp	r1, #0
    8ae0:	0affffeb 	beq	8a94 <BusRaiderApp::statusDisplayUpdate()+0x328>
    8ae4:	e59d0018 	ldr	r0, [sp, #24]
    8ae8:	e0800100 	add	r0, r0, r0, lsl #2
    8aec:	e1a00180 	lsl	r0, r0, #3
    8af0:	eb00d497 	bl	3dd54 <__aeabi_uidiv>
    8af4:	e2505000 	subs	r5, r0, #0
    8af8:	daffffe5 	ble	8a94 <BusRaiderApp::statusDisplayUpdate()+0x328>
    8afc:	e3a0203c 	mov	r2, #60	; 0x3c
    8b00:	e59f1130 	ldr	r1, [pc, #304]	; 8c38 <BusRaiderApp::statusDisplayUpdate()+0x4cc>
    8b04:	e28d0090 	add	r0, sp, #144	; 0x90
    8b08:	eb009546 	bl	2e028 <strlcpy>
    8b0c:	e28d0090 	add	r0, sp, #144	; 0x90
    8b10:	eb00855d 	bl	2a08c <strlen>
    8b14:	e28d1090 	add	r1, sp, #144	; 0x90
    8b18:	e2402001 	sub	r2, r0, #1
    8b1c:	e0812002 	add	r2, r1, r2
    8b20:	e1a03004 	mov	r3, r4
    8b24:	e3a01023 	mov	r1, #35	; 0x23
    8b28:	ea000002 	b	8b38 <BusRaiderApp::statusDisplayUpdate()+0x3cc>
    8b2c:	e1550003 	cmp	r5, r3
    8b30:	c3a01023 	movgt	r1, #35	; 0x23
    8b34:	d3a01020 	movle	r1, #32
    8b38:	e2833001 	add	r3, r3, #1
    8b3c:	e3530028 	cmp	r3, #40	; 0x28
    8b40:	e5e21001 	strb	r1, [r2, #1]!
    8b44:	1afffff8 	bne	8b2c <BusRaiderApp::statusDisplayUpdate()+0x3c0>
    8b48:	e3a0e000 	mov	lr, #0
    8b4c:	e3a0405d 	mov	r4, #93	; 0x5d
    8b50:	e28d30d0 	add	r3, sp, #208	; 0xd0
    8b54:	e083c000 	add	ip, r3, r0
    8b58:	e3a02001 	mov	r2, #1
    8b5c:	e28d3090 	add	r3, sp, #144	; 0x90
    8b60:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8b64:	e3a0100a 	mov	r1, #10
    8b68:	e54c4018 	strb	r4, [ip, #-24]	; 0xffffffe8
    8b6c:	e54ce017 	strb	lr, [ip, #-23]	; 0xffffffe9
    8b70:	eb00cf00 	bl	3c778 <Display::statusPut(int, int, char const*)>
    8b74:	e28dd0d4 	add	sp, sp, #212	; 0xd4
    8b78:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8b7c:	e59f20b8 	ldr	r2, [pc, #184]	; 8c3c <BusRaiderApp::statusDisplayUpdate()+0x4d0>
    8b80:	e1a01002 	mov	r1, r2
    8b84:	eaffff74 	b	895c <BusRaiderApp::statusDisplayUpdate()+0x1f0>
    8b88:	e59f10b0 	ldr	r1, [pc, #176]	; 8c40 <BusRaiderApp::statusDisplayUpdate()+0x4d4>
    8b8c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8b90:	eb009524 	bl	2e028 <strlcpy>
    8b94:	e28d305c 	add	r3, sp, #92	; 0x5c
    8b98:	e3a02001 	mov	r2, #1
    8b9c:	e3a01003 	mov	r1, #3
    8ba0:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8ba4:	eb00cef3 	bl	3c778 <Display::statusPut(int, int, char const*)>
    8ba8:	eaffff46 	b	88c8 <BusRaiderApp::statusDisplayUpdate()+0x15c>
    8bac:	e3a02032 	mov	r2, #50	; 0x32
    8bb0:	e59f108c 	ldr	r1, [pc, #140]	; 8c44 <BusRaiderApp::statusDisplayUpdate()+0x4d8>
    8bb4:	e28d005c 	add	r0, sp, #92	; 0x5c
    8bb8:	eb009536 	bl	2e098 <strlcat>
    8bbc:	eaffff80 	b	89c4 <BusRaiderApp::statusDisplayUpdate()+0x258>
    8bc0:	e2861e85 	add	r1, r6, #2128	; 0x850
    8bc4:	e2811004 	add	r1, r1, #4
    8bc8:	e3a02032 	mov	r2, #50	; 0x32
    8bcc:	e28d005c 	add	r0, sp, #92	; 0x5c
    8bd0:	eb009530 	bl	2e098 <strlcat>
    8bd4:	eaffff32 	b	88a4 <BusRaiderApp::statusDisplayUpdate()+0x138>
    8bd8:	e59f105c 	ldr	r1, [pc, #92]	; 8c3c <BusRaiderApp::statusDisplayUpdate()+0x4d0>
    8bdc:	eaffff5e 	b	895c <BusRaiderApp::statusDisplayUpdate()+0x1f0>
    8be0:	000f4240 	.word	0x000f4240
    8be4:	00047f98 	.word	0x00047f98
    8be8:	0003ee6c 	.word	0x0003ee6c
    8bec:	66666667 	.word	0x66666667
    8bf0:	0003ee94 	.word	0x0003ee94
    8bf4:	0003eea4 	.word	0x0003eea4
    8bf8:	0003eeb0 	.word	0x0003eeb0
    8bfc:	0003eed4 	.word	0x0003eed4
    8c00:	0003eedc 	.word	0x0003eedc
    8c04:	431bde83 	.word	0x431bde83
    8c08:	fff0bdc0 	.word	0xfff0bdc0
    8c0c:	10624dd3 	.word	0x10624dd3
    8c10:	0003fe24 	.word	0x0003fe24
    8c14:	0003eef4 	.word	0x0003eef4
    8c18:	0003eea8 	.word	0x0003eea8
    8c1c:	0003ef08 	.word	0x0003ef08
    8c20:	0003ee68 	.word	0x0003ee68
    8c24:	0003ee64 	.word	0x0003ee64
    8c28:	0003ef20 	.word	0x0003ef20
    8c2c:	0003ef2c 	.word	0x0003ef2c
    8c30:	0003ef44 	.word	0x0003ef44
    8c34:	0003ee7c 	.word	0x0003ee7c
    8c38:	0003ef38 	.word	0x0003ef38
    8c3c:	00047884 	.word	0x00047884
    8c40:	0003eebc 	.word	0x0003eebc
    8c44:	0003ef10 	.word	0x0003ef10

00008c48 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)>:
    8c48:	e59f30bc 	ldr	r3, [pc, #188]	; 8d0c <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xc4>
    8c4c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8c50:	e5934000 	ldr	r4, [r3]
    8c54:	e284ca03 	add	ip, r4, #12288	; 0x3000
    8c58:	e59c6530 	ldr	r6, [ip, #1328]	; 0x530
    8c5c:	e3560000 	cmp	r6, #0
    8c60:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
    8c64:	e59c0528 	ldr	r0, [ip, #1320]	; 0x528
    8c68:	e59c352c 	ldr	r3, [ip, #1324]	; 0x52c
    8c6c:	e1500003 	cmp	r0, r3
    8c70:	0a000008 	beq	8c98 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x50>
    8c74:	e59c352c 	ldr	r3, [ip, #1324]	; 0x52c
    8c78:	e59c0528 	ldr	r0, [ip, #1320]	; 0x528
    8c7c:	e1530000 	cmp	r3, r0
    8c80:	e59c0528 	ldr	r0, [ip, #1320]	; 0x528
    8c84:	2a00001b 	bcs	8cf8 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xb0>
    8c88:	e246e001 	sub	lr, r6, #1
    8c8c:	e3530000 	cmp	r3, #0
    8c90:	015e0000 	cmpeq	lr, r0
    8c94:	0a00001b 	beq	8d08 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xc0>
    8c98:	e59c7528 	ldr	r7, [ip, #1320]	; 0x528
    8c9c:	e2423001 	sub	r3, r2, #1
    8ca0:	e1a05087 	lsl	r5, r7, #1
    8ca4:	e0850007 	add	r0, r5, r7
    8ca8:	e0840100 	add	r0, r4, r0, lsl #2
    8cac:	e2800dc1 	add	r0, r0, #12352	; 0x3040
    8cb0:	e2800038 	add	r0, r0, #56	; 0x38
    8cb4:	e2822005 	add	r2, r2, #5
    8cb8:	e5f3e001 	ldrb	lr, [r3, #1]!
    8cbc:	e1530002 	cmp	r3, r2
    8cc0:	e4c0e001 	strb	lr, [r0], #1
    8cc4:	1afffffb 	bne	8cb8 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x70>
    8cc8:	e59c3528 	ldr	r3, [ip, #1320]	; 0x528
    8ccc:	e0855007 	add	r5, r5, r7
    8cd0:	e0844105 	add	r4, r4, r5, lsl #2
    8cd4:	e2833001 	add	r3, r3, #1
    8cd8:	e2844dc2 	add	r4, r4, #12416	; 0x3080
    8cdc:	e5841000 	str	r1, [r4]
    8ce0:	e58c3528 	str	r3, [ip, #1320]	; 0x528
    8ce4:	e59c3528 	ldr	r3, [ip, #1320]	; 0x528
    8ce8:	e1530006 	cmp	r3, r6
    8cec:	23a03000 	movcs	r3, #0
    8cf0:	258c3528 	strcs	r3, [ip, #1320]	; 0x528
    8cf4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8cf8:	e0433000 	sub	r3, r3, r0
    8cfc:	e3530001 	cmp	r3, #1
    8d00:	8affffe4 	bhi	8c98 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x50>
    8d04:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8d08:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8d0c:	0004e1dc 	.word	0x0004e1dc

00008d10 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)>:
    8d10:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d14:	e590407c 	ldr	r4, [r0, #124]	; 0x7c
    8d18:	e24ddb1e 	sub	sp, sp, #30720	; 0x7800
    8d1c:	e24dd014 	sub	sp, sp, #20
    8d20:	e1a06000 	mov	r6, r0
    8d24:	e1a08001 	mov	r8, r1
    8d28:	e1a07002 	mov	r7, r2
    8d2c:	e1a01004 	mov	r1, r4
    8d30:	e3a02e19 	mov	r2, #400	; 0x190
    8d34:	e28d0004 	add	r0, sp, #4
    8d38:	eb0086f8 	bl	2a920 <memcpy>
    8d3c:	e2843f65 	add	r3, r4, #404	; 0x194
    8d40:	e5945190 	ldr	r5, [r4, #400]	; 0x190
    8d44:	e1d310bc 	ldrh	r1, [r3, #12]
    8d48:	e5d4e198 	ldrb	lr, [r4, #408]	; 0x198
    8d4c:	e5d4c199 	ldrb	ip, [r4, #409]	; 0x199
    8d50:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
    8d54:	e5d4019b 	ldrb	r0, [r4, #411]	; 0x19b
    8d58:	e28d2f69 	add	r2, sp, #420	; 0x1a4
    8d5c:	e594919c 	ldr	r9, [r4, #412]	; 0x19c
    8d60:	e58d5194 	str	r5, [sp, #404]	; 0x194
    8d64:	e1c210b0 	strh	r1, [r2]
    8d68:	e5d451a3 	ldrb	r5, [r4, #419]	; 0x1a3
    8d6c:	e5d421a2 	ldrb	r2, [r4, #418]	; 0x1a2
    8d70:	e59f1458 	ldr	r1, [pc, #1112]	; 91d0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4c0>
    8d74:	e59fa458 	ldr	sl, [pc, #1112]	; 91d4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4c4>
    8d78:	e5cde19c 	strb	lr, [sp, #412]	; 0x19c
    8d7c:	e5cdc19d 	strb	ip, [sp, #413]	; 0x19d
    8d80:	e5d4e1a4 	ldrb	lr, [r4, #420]	; 0x1a4
    8d84:	e594c1a8 	ldr	ip, [r4, #424]	; 0x1a8
    8d88:	e5cd319e 	strb	r3, [sp, #414]	; 0x19e
    8d8c:	e5cd019f 	strb	r0, [sp, #415]	; 0x19f
    8d90:	e59431ac 	ldr	r3, [r4, #428]	; 0x1ac
    8d94:	e28d0d07 	add	r0, sp, #448	; 0x1c0
    8d98:	e58d1198 	str	r1, [sp, #408]	; 0x198
    8d9c:	e5cd21a6 	strb	r2, [sp, #422]	; 0x1a6
    8da0:	e2841f6d 	add	r1, r4, #436	; 0x1b4
    8da4:	e59f242c 	ldr	r2, [pc, #1068]	; 91d8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4c8>
    8da8:	e5cd51a7 	strb	r5, [sp, #423]	; 0x1a7
    8dac:	e2400008 	sub	r0, r0, #8
    8db0:	e2845a02 	add	r5, r4, #8192	; 0x2000
    8db4:	e58d91a0 	str	r9, [sp, #416]	; 0x1a0
    8db8:	e5cde1a8 	strb	lr, [sp, #424]	; 0x1a8
    8dbc:	e58dc1ac 	str	ip, [sp, #428]	; 0x1ac
    8dc0:	e58d31b0 	str	r3, [sp, #432]	; 0x1b0
    8dc4:	e58da1b4 	str	sl, [sp, #436]	; 0x1b4
    8dc8:	eb0086d4 	bl	2a920 <memcpy>
    8dcc:	e595e8c4 	ldr	lr, [r5, #2244]	; 0x8c4
    8dd0:	e595c8c8 	ldr	ip, [r5, #2248]	; 0x8c8
    8dd4:	e28d3b0a 	add	r3, sp, #10240	; 0x2800
    8dd8:	e2833010 	add	r3, r3, #16
    8ddc:	e28d9b12 	add	r9, sp, #18432	; 0x4800
    8de0:	e2899010 	add	r9, r9, #16
    8de4:	e2851e8d 	add	r1, r5, #2256	; 0x8d0
    8de8:	e583a0c0 	str	sl, [r3, #192]	; 0xc0
    8dec:	e583e0b8 	str	lr, [r3, #184]	; 0xb8
    8df0:	e583c0bc 	str	ip, [r3, #188]	; 0xbc
    8df4:	e28300c4 	add	r0, r3, #196	; 0xc4
    8df8:	e59f23d8 	ldr	r2, [pc, #984]	; 91d8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4c8>
    8dfc:	eb0086c7 	bl	2a920 <memcpy>
    8e00:	e1a0c009 	mov	ip, r9
    8e04:	e2843901 	add	r3, r4, #16384	; 0x4000
    8e08:	e5930fec 	ldr	r0, [r3, #4076]	; 0xfec
    8e0c:	e5931fe0 	ldr	r1, [r3, #4064]	; 0xfe0
    8e10:	e5932fe4 	ldr	r2, [r3, #4068]	; 0xfe4
    8e14:	e593efe8 	ldr	lr, [r3, #4072]	; 0xfe8
    8e18:	e2845a05 	add	r5, r4, #20480	; 0x5000
    8e1c:	e5ac07e0 	str	r0, [ip, #2016]!	; 0x7e0
    8e20:	e2833eff 	add	r3, r3, #4080	; 0xff0
    8e24:	e289ae7f 	add	sl, r9, #2032	; 0x7f0
    8e28:	e58917d4 	str	r1, [r9, #2004]	; 0x7d4
    8e2c:	e58927d8 	str	r2, [r9, #2008]	; 0x7d8
    8e30:	e589e7dc 	str	lr, [r9, #2012]	; 0x7dc
    8e34:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    8e38:	e98c000f 	stmib	ip, {r0, r1, r2, r3}
    8e3c:	e1a01005 	mov	r1, r5
    8e40:	e3a02065 	mov	r2, #101	; 0x65
    8e44:	e28a0004 	add	r0, sl, #4
    8e48:	eb0086b4 	bl	2a920 <memcpy>
    8e4c:	e2893e85 	add	r3, r9, #2128	; 0x850
    8e50:	e2833009 	add	r3, r3, #9
    8e54:	e2852065 	add	r2, r5, #101	; 0x65
    8e58:	e2851085 	add	r1, r5, #133	; 0x85
    8e5c:	e5929000 	ldr	r9, [r2]
    8e60:	e592e004 	ldr	lr, [r2, #4]
    8e64:	e592c008 	ldr	ip, [r2, #8]
    8e68:	e592000c 	ldr	r0, [r2, #12]
    8e6c:	e2822010 	add	r2, r2, #16
    8e70:	e1520001 	cmp	r2, r1
    8e74:	e5839000 	str	r9, [r3]
    8e78:	e583e004 	str	lr, [r3, #4]
    8e7c:	e583c008 	str	ip, [r3, #8]
    8e80:	e583000c 	str	r0, [r3, #12]
    8e84:	e2833010 	add	r3, r3, #16
    8e88:	1afffff3 	bne	8e5c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x14c>
    8e8c:	e5920000 	ldr	r0, [r2]
    8e90:	e5921004 	ldr	r1, [r2, #4]
    8e94:	e1a09005 	mov	r9, r5
    8e98:	e5830000 	str	r0, [r3]
    8e9c:	e5831004 	str	r1, [r3, #4]
    8ea0:	e5d2c008 	ldrb	ip, [r2, #8]
    8ea4:	e28d2a05 	add	r2, sp, #20480	; 0x5000
    8ea8:	e2822090 	add	r2, r2, #144	; 0x90
    8eac:	e285108e 	add	r1, r5, #142	; 0x8e
    8eb0:	e5c3c008 	strb	ip, [r3, #8]
    8eb4:	e2820002 	add	r0, r2, #2
    8eb8:	e59f231c 	ldr	r2, [pc, #796]	; 91dc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4cc>
    8ebc:	eb008697 	bl	2a920 <memcpy>
    8ec0:	e28deb16 	add	lr, sp, #22528	; 0x5800
    8ec4:	e5952868 	ldr	r2, [r5, #2152]	; 0x868
    8ec8:	e28ee010 	add	lr, lr, #16
    8ecc:	e595b860 	ldr	fp, [r5, #2144]	; 0x860
    8ed0:	e595a864 	ldr	sl, [r5, #2148]	; 0x864
    8ed4:	e58e205c 	str	r2, [lr, #92]	; 0x5c
    8ed8:	e595286c 	ldr	r2, [r5, #2156]	; 0x86c
    8edc:	e28e3064 	add	r3, lr, #100	; 0x64
    8ee0:	e285ce87 	add	ip, r5, #2160	; 0x870
    8ee4:	e58e2060 	str	r2, [lr, #96]	; 0x60
    8ee8:	e89c0007 	ldm	ip, {r0, r1, r2}
    8eec:	e8830007 	stm	r3, {r0, r1, r2}
    8ef0:	e28e5070 	add	r5, lr, #112	; 0x70
    8ef4:	e28cc00c 	add	ip, ip, #12
    8ef8:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8efc:	e8a5000f 	stmia	r5!, {r0, r1, r2, r3}
    8f00:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8f04:	e8a5000f 	stmia	r5!, {r0, r1, r2, r3}
    8f08:	e58eb054 	str	fp, [lr, #84]	; 0x54
    8f0c:	e58ea058 	str	sl, [lr, #88]	; 0x58
    8f10:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8f14:	e8a5000f 	stmia	r5!, {r0, r1, r2, r3}
    8f18:	e59c3000 	ldr	r3, [ip]
    8f1c:	e28e00a8 	add	r0, lr, #168	; 0xa8
    8f20:	e1c530b0 	strh	r3, [r5]
    8f24:	e5b938b0 	ldr	r3, [r9, #2224]!	; 0x8b0
    8f28:	e28d5b1a 	add	r5, sp, #26624	; 0x6800
    8f2c:	e3a02efa 	mov	r2, #4000	; 0xfa0
    8f30:	e2891004 	add	r1, r9, #4
    8f34:	e58e30a4 	str	r3, [lr, #164]	; 0xa4
    8f38:	e2855010 	add	r5, r5, #16
    8f3c:	eb008677 	bl	2a920 <memcpy>
    8f40:	e2841b1a 	add	r1, r4, #26624	; 0x6800
    8f44:	e2811054 	add	r1, r1, #84	; 0x54
    8f48:	e3a02efa 	mov	r2, #4000	; 0xfa0
    8f4c:	e2850048 	add	r0, r5, #72	; 0x48
    8f50:	eb008672 	bl	2a920 <memcpy>
    8f54:	e2844a07 	add	r4, r4, #28672	; 0x7000
    8f58:	e5d71000 	ldrb	r1, [r7]
    8f5c:	e59427f4 	ldr	r2, [r4, #2036]	; 0x7f4
    8f60:	e5d437f8 	ldrb	r3, [r4, #2040]	; 0x7f8
    8f64:	e28dcb1e 	add	ip, sp, #30720	; 0x7800
    8f68:	e2844e7f 	add	r4, r4, #2032	; 0x7f0
    8f6c:	e284400c 	add	r4, r4, #12
    8f70:	e351003b 	cmp	r1, #59	; 0x3b
    8f74:	e28cc010 	add	ip, ip, #16
    8f78:	e5852fe8 	str	r2, [r5, #4072]	; 0xfe8
    8f7c:	e5c53fec 	strb	r3, [r5, #4076]	; 0xfec
    8f80:	e894000f 	ldm	r4, {r0, r1, r2, r3}
    8f84:	e90c000f 	stmdb	ip, {r0, r1, r2, r3}
    8f88:	e5d63008 	ldrb	r3, [r6, #8]
    8f8c:	0a00000a 	beq	8fbc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2ac>
    8f90:	e3530000 	cmp	r3, #0
    8f94:	0a00000e 	beq	8fd4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2c4>
    8f98:	e5963070 	ldr	r3, [r6, #112]	; 0x70
    8f9c:	e3530063 	cmp	r3, #99	; 0x63
    8fa0:	da000025 	ble	903c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x32c>
    8fa4:	e28d4004 	add	r4, sp, #4
    8fa8:	e1a00004 	mov	r0, r4
    8fac:	eb009f8f 	bl	30df0 <CommandHandler::~CommandHandler()>
    8fb0:	e28ddb1e 	add	sp, sp, #30720	; 0x7800
    8fb4:	e28dd014 	add	sp, sp, #20
    8fb8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8fbc:	e3530000 	cmp	r3, #0
    8fc0:	0a00000d 	beq	8ffc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2ec>
    8fc4:	e3a03001 	mov	r3, #1
    8fc8:	e28d4004 	add	r4, sp, #4
    8fcc:	e5c63008 	strb	r3, [r6, #8]
    8fd0:	eafffff4 	b	8fa8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x298>
    8fd4:	e5960080 	ldr	r0, [r6, #128]	; 0x80
    8fd8:	eb00b920 	bl	37460 <McManager::getMachine()>
    8fdc:	e2503000 	subs	r3, r0, #0
    8fe0:	0affffef 	beq	8fa4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x294>
    8fe4:	e5933000 	ldr	r3, [r3]
    8fe8:	e1a02007 	mov	r2, r7
    8fec:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    8ff0:	e1a01008 	mov	r1, r8
    8ff4:	e12fff33 	blx	r3
    8ff8:	eaffffe9 	b	8fa4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x294>
    8ffc:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    9000:	e59f11d8 	ldr	r1, [pc, #472]	; 91e0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4d0>
    9004:	eb00ce3a 	bl	3c8f4 <Display::consolePut(char const*)>
    9008:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    900c:	e59f11d0 	ldr	r1, [pc, #464]	; 91e4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4d4>
    9010:	eb00ce37 	bl	3c8f4 <Display::consolePut(char const*)>
    9014:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    9018:	e59f11c8 	ldr	r1, [pc, #456]	; 91e8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4d8>
    901c:	eb00ce34 	bl	3c8f4 <Display::consolePut(char const*)>
    9020:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    9024:	e59f11c0 	ldr	r1, [pc, #448]	; 91ec <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4dc>
    9028:	eb00ce31 	bl	3c8f4 <Display::consolePut(char const*)>
    902c:	e59f11bc 	ldr	r1, [pc, #444]	; 91f0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4e0>
    9030:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    9034:	eb00ce2e 	bl	3c8f4 <Display::consolePut(char const*)>
    9038:	eaffffe1 	b	8fc4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2b4>
    903c:	e1a01007 	mov	r1, r7
    9040:	e1a00008 	mov	r0, r8
    9044:	eb00c056 	bl	391a4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
    9048:	e1a05000 	mov	r5, r0
    904c:	eb00840e 	bl	2a08c <strlen>
    9050:	e3500000 	cmp	r0, #0
    9054:	0affffd2 	beq	8fa4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x294>
    9058:	e1d530d0 	ldrsb	r3, [r5]
    905c:	e3530008 	cmp	r3, #8
    9060:	0a000040 	beq	9168 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x458>
    9064:	e353000d 	cmp	r3, #13
    9068:	0a00000e 	beq	90a8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x398>
    906c:	e2433020 	sub	r3, r3, #32
    9070:	e6ef3073 	uxtb	r3, r3
    9074:	e353005e 	cmp	r3, #94	; 0x5e
    9078:	8affffc9 	bhi	8fa4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x294>
    907c:	e5963070 	ldr	r3, [r6, #112]	; 0x70
    9080:	e28d4004 	add	r4, sp, #4
    9084:	e2832001 	add	r2, r3, #1
    9088:	e5862070 	str	r2, [r6, #112]	; 0x70
    908c:	e1d520d0 	ldrsb	r2, [r5]
    9090:	e0863003 	add	r3, r6, r3
    9094:	e5c32009 	strb	r2, [r3, #9]
    9098:	e1d510d0 	ldrsb	r1, [r5]
    909c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    90a0:	eb00ce18 	bl	3c908 <Display::consolePut(int)>
    90a4:	eaffffbf 	b	8fa8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x298>
    90a8:	e3a02000 	mov	r2, #0
    90ac:	e5963070 	ldr	r3, [r6, #112]	; 0x70
    90b0:	e5c62008 	strb	r2, [r6, #8]
    90b4:	e1530002 	cmp	r3, r2
    90b8:	e0863003 	add	r3, r6, r3
    90bc:	e5c32009 	strb	r2, [r3, #9]
    90c0:	da000034 	ble	9198 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x488>
    90c4:	e1d600d9 	ldrsb	r0, [r6, #9]
    90c8:	eb009583 	bl	2e6dc <rdtolower>
    90cc:	e3500074 	cmp	r0, #116	; 0x74
    90d0:	0a000030 	beq	9198 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x488>
    90d4:	e1d600d9 	ldrsb	r0, [r6, #9]
    90d8:	eb00957f 	bl	2e6dc <rdtolower>
    90dc:	e350006d 	cmp	r0, #109	; 0x6d
    90e0:	0a00002e 	beq	91a0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x490>
    90e4:	e1d600d9 	ldrsb	r0, [r6, #9]
    90e8:	eb00957b 	bl	2e6dc <rdtolower>
    90ec:	e3500062 	cmp	r0, #98	; 0x62
    90f0:	0a000028 	beq	9198 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x488>
    90f4:	e1d600d9 	ldrsb	r0, [r6, #9]
    90f8:	eb009577 	bl	2e6dc <rdtolower>
    90fc:	e3500072 	cmp	r0, #114	; 0x72
    9100:	0a000024 	beq	9198 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x488>
    9104:	e1d600d9 	ldrsb	r0, [r6, #9]
    9108:	eb009573 	bl	2e6dc <rdtolower>
    910c:	e3500073 	cmp	r0, #115	; 0x73
    9110:	0a000020 	beq	9198 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x488>
    9114:	e2865009 	add	r5, r6, #9
    9118:	e28d4004 	add	r4, sp, #4
    911c:	e1a00004 	mov	r0, r4
    9120:	e1a01005 	mov	r1, r5
    9124:	eb009caf 	bl	303e8 <CommandHandler::sendAPIReq(char const*)>
    9128:	e59f10c4 	ldr	r1, [pc, #196]	; 91f4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4e4>
    912c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    9130:	eb00cdef 	bl	3c8f4 <Display::consolePut(char const*)>
    9134:	e1a01005 	mov	r1, r5
    9138:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    913c:	eb00cdec 	bl	3c8f4 <Display::consolePut(char const*)>
    9140:	e59f10b0 	ldr	r1, [pc, #176]	; 91f8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4e8>
    9144:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    9148:	eb00cde9 	bl	3c8f4 <Display::consolePut(char const*)>
    914c:	e3a05000 	mov	r5, #0
    9150:	e59f10a4 	ldr	r1, [pc, #164]	; 91fc <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4ec>
    9154:	e5865070 	str	r5, [r6, #112]	; 0x70
    9158:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    915c:	eb00cde4 	bl	3c8f4 <Display::consolePut(char const*)>
    9160:	e5c65008 	strb	r5, [r6, #8]
    9164:	eaffff8f 	b	8fa8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x298>
    9168:	e5963070 	ldr	r3, [r6, #112]	; 0x70
    916c:	e3a01008 	mov	r1, #8
    9170:	e3530000 	cmp	r3, #0
    9174:	c2433001 	subgt	r3, r3, #1
    9178:	c5863070 	strgt	r3, [r6, #112]	; 0x70
    917c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    9180:	eb00cde0 	bl	3c908 <Display::consolePut(int)>
    9184:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    9188:	e3a01020 	mov	r1, #32
    918c:	eb00cddd 	bl	3c908 <Display::consolePut(int)>
    9190:	e28d4004 	add	r4, sp, #4
    9194:	eaffff83 	b	8fa8 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x298>
    9198:	e28d4004 	add	r4, sp, #4
    919c:	eaffffea 	b	914c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x43c>
    91a0:	e3a02001 	mov	r2, #1
    91a4:	e5963080 	ldr	r3, [r6, #128]	; 0x80
    91a8:	e2865a03 	add	r5, r6, #12288	; 0x3000
    91ac:	e5c52535 	strb	r2, [r5, #1333]	; 0x535
    91b0:	e5961078 	ldr	r1, [r6, #120]	; 0x78
    91b4:	e593200c 	ldr	r2, [r3, #12]
    91b8:	e1a00006 	mov	r0, r6
    91bc:	eb00c28f 	bl	39c00 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)>
    91c0:	e3a03000 	mov	r3, #0
    91c4:	e28d4004 	add	r4, sp, #4
    91c8:	e5c53535 	strb	r3, [r5, #1333]	; 0x535
    91cc:	eaffffde 	b	914c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x43c>
    91d0:	00046374 	.word	0x00046374
    91d4:	0003ee0c 	.word	0x0003ee0c
    91d8:	00002710 	.word	0x00002710
    91dc:	000007d1 	.word	0x000007d1
    91e0:	0003ef78 	.word	0x0003ef78
    91e4:	0003ef88 	.word	0x0003ef88
    91e8:	0003efc8 	.word	0x0003efc8
    91ec:	0003eff0 	.word	0x0003eff0
    91f0:	0003f018 	.word	0x0003f018
    91f4:	0003f050 	.word	0x0003f050
    91f8:	00047700 	.word	0x00047700
    91fc:	0003f040 	.word	0x0003f040

00009200 <BusRaiderApp::service()>:
    9200:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9204:	e1a05000 	mov	r5, r0
    9208:	e24dde7d 	sub	sp, sp, #2000	; 0x7d0
    920c:	e24dd00c 	sub	sp, sp, #12
    9210:	e590607c 	ldr	r6, [r0, #124]	; 0x7c
    9214:	eb009348 	bl	2df3c <micros>
    9218:	e5951074 	ldr	r1, [r5, #116]	; 0x74
    921c:	e59f21f4 	ldr	r2, [pc, #500]	; 9418 <BusRaiderApp::service()+0x218>
    9220:	eb009363 	bl	2dfb4 <isTimeout>
    9224:	e3500000 	cmp	r0, #0
    9228:	0a000005 	beq	9244 <BusRaiderApp::service()+0x44>
    922c:	e59f31e8 	ldr	r3, [pc, #488]	; 941c <BusRaiderApp::service()+0x21c>
    9230:	e5933000 	ldr	r3, [r3]
    9234:	e2833a05 	add	r3, r3, #20480	; 0x5000
    9238:	e5934860 	ldr	r4, [r3, #2144]	; 0x860
    923c:	e3540000 	cmp	r4, #0
    9240:	0a000055 	beq	939c <BusRaiderApp::service()+0x19c>
    9244:	eb00933d 	bl	2df40 <millis>
    9248:	e59f21d0 	ldr	r2, [pc, #464]	; 9420 <BusRaiderApp::service()+0x220>
    924c:	e595195c 	ldr	r1, [r5, #2396]	; 0x95c
    9250:	eb009357 	bl	2dfb4 <isTimeout>
    9254:	e3500000 	cmp	r0, #0
    9258:	0a000007 	beq	927c <BusRaiderApp::service()+0x7c>
    925c:	e59f31b8 	ldr	r3, [pc, #440]	; 941c <BusRaiderApp::service()+0x21c>
    9260:	e5933000 	ldr	r3, [r3]
    9264:	e2833a05 	add	r3, r3, #20480	; 0x5000
    9268:	e5933860 	ldr	r3, [r3, #2144]	; 0x860
    926c:	e3530000 	cmp	r3, #0
    9270:	0a000058 	beq	93d8 <BusRaiderApp::service()+0x1d8>
    9274:	eb009331 	bl	2df40 <millis>
    9278:	e585095c 	str	r0, [r5, #2396]	; 0x95c
    927c:	e2854a03 	add	r4, r5, #12288	; 0x3000
    9280:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    9284:	e3530000 	cmp	r3, #0
    9288:	0a000037 	beq	936c <BusRaiderApp::service()+0x16c>
    928c:	e1a00005 	mov	r0, r5
    9290:	ebfffd35 	bl	876c <BusRaiderApp::statusDisplayUpdate()>
    9294:	e5d46534 	ldrb	r6, [r4, #1332]	; 0x534
    9298:	e3560000 	cmp	r6, #0
    929c:	0a000002 	beq	92ac <BusRaiderApp::service()+0xac>
    92a0:	e5d43535 	ldrb	r3, [r4, #1333]	; 0x535
    92a4:	e3530000 	cmp	r3, #0
    92a8:	0a00001c 	beq	9320 <BusRaiderApp::service()+0x120>
    92ac:	e5942528 	ldr	r2, [r4, #1320]	; 0x528
    92b0:	e594352c 	ldr	r3, [r4, #1324]	; 0x52c
    92b4:	e1520003 	cmp	r2, r3
    92b8:	0a000018 	beq	9320 <BusRaiderApp::service()+0x120>
    92bc:	e594352c 	ldr	r3, [r4, #1324]	; 0x52c
    92c0:	e594252c 	ldr	r2, [r4, #1324]	; 0x52c
    92c4:	e5941530 	ldr	r1, [r4, #1328]	; 0x530
    92c8:	e2822001 	add	r2, r2, #1
    92cc:	e584252c 	str	r2, [r4, #1324]	; 0x52c
    92d0:	e594252c 	ldr	r2, [r4, #1324]	; 0x52c
    92d4:	e1520001 	cmp	r2, r1
    92d8:	23a02000 	movcs	r2, #0
    92dc:	2584252c 	strcs	r2, [r4, #1324]	; 0x52c
    92e0:	e3560000 	cmp	r6, #0
    92e4:	0a000010 	beq	932c <BusRaiderApp::service()+0x12c>
    92e8:	e0833083 	add	r3, r3, r3, lsl #1
    92ec:	e1a03103 	lsl	r3, r3, #2
    92f0:	e2831dc1 	add	r1, r3, #12352	; 0x3040
    92f4:	e0853003 	add	r3, r5, r3
    92f8:	e2833dc2 	add	r3, r3, #12416	; 0x3080
    92fc:	e2811038 	add	r1, r1, #56	; 0x38
    9300:	e0851001 	add	r1, r5, r1
    9304:	e5d30000 	ldrb	r0, [r3]
    9308:	eb00bfa5 	bl	391a4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
    930c:	e1a05000 	mov	r5, r0
    9310:	eb00835d 	bl	2a08c <strlen>
    9314:	e3500000 	cmp	r0, #0
    9318:	11d530d0 	ldrsbne	r3, [r5]
    931c:	15843538 	strne	r3, [r4, #1336]	; 0x538
    9320:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
    9324:	e28dd00c 	add	sp, sp, #12
    9328:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    932c:	e3a0c001 	mov	ip, #1
    9330:	e0833c13 	add	r3, r3, r3, lsl ip
    9334:	e1a03103 	lsl	r3, r3, #2
    9338:	e2832dc1 	add	r2, r3, #12352	; 0x3040
    933c:	e0853003 	add	r3, r5, r3
    9340:	e2833dc2 	add	r3, r3, #12416	; 0x3080
    9344:	e2822038 	add	r2, r2, #56	; 0x38
    9348:	e5d31000 	ldrb	r1, [r3]
    934c:	e0852002 	add	r2, r5, r2
    9350:	e1a00005 	mov	r0, r5
    9354:	e5c4c534 	strb	ip, [r4, #1332]	; 0x534
    9358:	ebfffe6c 	bl	8d10 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)>
    935c:	e5c46534 	strb	r6, [r4, #1332]	; 0x534
    9360:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
    9364:	e28dd00c 	add	sp, sp, #12
    9368:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    936c:	eb0092f2 	bl	2df3c <micros>
    9370:	e59f20ac 	ldr	r2, [pc, #172]	; 9424 <BusRaiderApp::service()+0x224>
    9374:	e5941074 	ldr	r1, [r4, #116]	; 0x74
    9378:	eb00930d 	bl	2dfb4 <isTimeout>
    937c:	e3500000 	cmp	r0, #0
    9380:	0affffc1 	beq	928c <BusRaiderApp::service()+0x8c>
    9384:	e1a00006 	mov	r0, r6
    9388:	e59f1098 	ldr	r1, [pc, #152]	; 9428 <BusRaiderApp::service()+0x228>
    938c:	eb009c15 	bl	303e8 <CommandHandler::sendAPIReq(char const*)>
    9390:	eb0092e9 	bl	2df3c <micros>
    9394:	e5840074 	str	r0, [r4, #116]	; 0x74
    9398:	eaffffbb 	b	928c <BusRaiderApp::service()+0x8c>
    939c:	e5950080 	ldr	r0, [r5, #128]	; 0x80
    93a0:	eb00b83b 	bl	37494 <McManager::getMachineJSON()>
    93a4:	e2857084 	add	r7, r5, #132	; 0x84
    93a8:	e1a01000 	mov	r1, r0
    93ac:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    93b0:	e28d0008 	add	r0, sp, #8
    93b4:	eb00931b 	bl	2e028 <strlcpy>
    93b8:	e28d0008 	add	r0, sp, #8
    93bc:	e1a01007 	mov	r1, r7
    93c0:	eb00833b 	bl	2a0b4 <strcmp>
    93c4:	e3500000 	cmp	r0, #0
    93c8:	1a000006 	bne	93e8 <BusRaiderApp::service()+0x1e8>
    93cc:	eb0092da 	bl	2df3c <micros>
    93d0:	e5850074 	str	r0, [r5, #116]	; 0x74
    93d4:	eaffff9a 	b	9244 <BusRaiderApp::service()+0x44>
    93d8:	e59f104c 	ldr	r1, [pc, #76]	; 942c <BusRaiderApp::service()+0x22c>
    93dc:	e1a00006 	mov	r0, r6
    93e0:	eb009c00 	bl	303e8 <CommandHandler::sendAPIReq(char const*)>
    93e4:	eaffffa2 	b	9274 <BusRaiderApp::service()+0x74>
    93e8:	e28d1008 	add	r1, sp, #8
    93ec:	e1a00007 	mov	r0, r7
    93f0:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    93f4:	eb00930b 	bl	2e028 <strlcpy>
    93f8:	e58d4004 	str	r4, [sp, #4]
    93fc:	e58d4000 	str	r4, [sp]
    9400:	e1a03004 	mov	r3, r4
    9404:	e28d2008 	add	r2, sp, #8
    9408:	e59f1020 	ldr	r1, [pc, #32]	; 9430 <BusRaiderApp::service()+0x230>
    940c:	e1a00006 	mov	r0, r6
    9410:	eb009aad 	bl	2fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
    9414:	eaffffec 	b	93cc <BusRaiderApp::service()+0x1cc>
    9418:	000f4240 	.word	0x000f4240
    941c:	0004e2ec 	.word	0x0004e2ec
    9420:	00001388 	.word	0x00001388
    9424:	004c4b40 	.word	0x004c4b40
    9428:	0003f088 	.word	0x0003f088
    942c:	0003f078 	.word	0x0003f078
    9430:	0003f068 	.word	0x0003f068

00009434 <BusRaiderApp::getPiStatus(char*, int)>:
    9434:	e92d4070 	push	{r4, r5, r6, lr}
    9438:	e1a04001 	mov	r4, r1
    943c:	e5900080 	ldr	r0, [r0, #128]	; 0x80
    9440:	e1a05002 	mov	r5, r2
    9444:	eb00b812 	bl	37494 <McManager::getMachineJSON()>
    9448:	e3540000 	cmp	r4, #0
    944c:	08bd8070 	popeq	{r4, r5, r6, pc}
    9450:	e1a02005 	mov	r2, r5
    9454:	e1a01000 	mov	r1, r0
    9458:	e1a00004 	mov	r0, r4
    945c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9460:	ea0092f0 	b	2e028 <strlcpy>

00009464 <BusRaiderApp::storeESP32StatusInfo(char const*)>:
    9464:	e92d4030 	push	{r4, r5, lr}
    9468:	e24dde45 	sub	sp, sp, #1104	; 0x450
    946c:	e24dd00c 	sub	sp, sp, #12
    9470:	e1a04000 	mov	r4, r0
    9474:	e1a05001 	mov	r5, r1
    9478:	eb0092b0 	bl	2df40 <millis>
    947c:	e584095c 	str	r0, [r4, #2396]	; 0x95c
    9480:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    9484:	eb0092b4 	bl	2df5c <microsDelay>
    9488:	e1a01005 	mov	r1, r5
    948c:	e2845e85 	add	r5, r4, #2128	; 0x850
    9490:	e28d2070 	add	r2, sp, #112	; 0x70
    9494:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    9498:	e2855004 	add	r5, r5, #4
    949c:	e59f00c8 	ldr	r0, [pc, #200]	; 956c <BusRaiderApp::storeESP32StatusInfo(char const*)+0x108>
    94a0:	eb009396 	bl	2e300 <jsonGetValueForKey>
    94a4:	e1a02005 	mov	r2, r5
    94a8:	e3a0301e 	mov	r3, #30
    94ac:	e28d1070 	add	r1, sp, #112	; 0x70
    94b0:	e59f00b8 	ldr	r0, [pc, #184]	; 9570 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x10c>
    94b4:	eb009391 	bl	2e300 <jsonGetValueForKey>
    94b8:	e59f10b4 	ldr	r1, [pc, #180]	; 9574 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x110>
    94bc:	e1a00005 	mov	r0, r5
    94c0:	eb0082fb 	bl	2a0b4 <strcmp>
    94c4:	e2900000 	adds	r0, r0, #0
    94c8:	13a00001 	movne	r0, #1
    94cc:	e2842e87 	add	r2, r4, #2160	; 0x870
    94d0:	e5c40958 	strb	r0, [r4, #2392]	; 0x958
    94d4:	e2822002 	add	r2, r2, #2
    94d8:	e28d1070 	add	r1, sp, #112	; 0x70
    94dc:	e3a0301e 	mov	r3, #30
    94e0:	e59f0090 	ldr	r0, [pc, #144]	; 9578 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x114>
    94e4:	eb009385 	bl	2e300 <jsonGetValueForKey>
    94e8:	e2842e89 	add	r2, r4, #2192	; 0x890
    94ec:	e28d1070 	add	r1, sp, #112	; 0x70
    94f0:	e3a03064 	mov	r3, #100	; 0x64
    94f4:	e59f0080 	ldr	r0, [pc, #128]	; 957c <BusRaiderApp::storeESP32StatusInfo(char const*)+0x118>
    94f8:	eb009380 	bl	2e300 <jsonGetValueForKey>
    94fc:	e2842e8f 	add	r2, r4, #2288	; 0x8f0
    9500:	e2822004 	add	r2, r2, #4
    9504:	e28d1070 	add	r1, sp, #112	; 0x70
    9508:	e3a03064 	mov	r3, #100	; 0x64
    950c:	e59f006c 	ldr	r0, [pc, #108]	; 9580 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x11c>
    9510:	eb00937a 	bl	2e300 <jsonGetValueForKey>
    9514:	e3a0c000 	mov	ip, #0
    9518:	e28d300c 	add	r3, sp, #12
    951c:	e1a02003 	mov	r2, r3
    9520:	e58d3004 	str	r3, [sp, #4]
    9524:	e28d1070 	add	r1, sp, #112	; 0x70
    9528:	e3a03064 	mov	r3, #100	; 0x64
    952c:	e59f0050 	ldr	r0, [pc, #80]	; 9584 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x120>
    9530:	e5cdc00c 	strb	ip, [sp, #12]
    9534:	eb009371 	bl	2e300 <jsonGetValueForKey>
    9538:	e59d0004 	ldr	r0, [sp, #4]
    953c:	eb0082d2 	bl	2a08c <strlen>
    9540:	e3500000 	cmp	r0, #0
    9544:	03a00014 	moveq	r0, #20
    9548:	0a000001 	beq	9554 <BusRaiderApp::storeESP32StatusInfo(char const*)+0xf0>
    954c:	e59d0004 	ldr	r0, [sp, #4]
    9550:	eb0084ee 	bl	2a910 <atoi>
    9554:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    9558:	e593300c 	ldr	r3, [r3, #12]
    955c:	e5830000 	str	r0, [r3]
    9560:	e28dde45 	add	sp, sp, #1104	; 0x450
    9564:	e28dd00c 	add	sp, sp, #12
    9568:	e8bd8030 	pop	{r4, r5, pc}
    956c:	0003f094 	.word	0x0003f094
    9570:	0003f0a0 	.word	0x0003f0a0
    9574:	0003f0a8 	.word	0x0003f0a8
    9578:	0003f0b0 	.word	0x0003f0b0
    957c:	0003f0bc 	.word	0x0003f0bc
    9580:	0003f0c4 	.word	0x0003f0c4
    9584:	0003f0cc 	.word	0x0003f0cc

00009588 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
    9588:	e92d4070 	push	{r4, r5, r6, lr}
    958c:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    9590:	e1a05000 	mov	r5, r0
    9594:	e28d2004 	add	r2, sp, #4
    9598:	e3a030c8 	mov	r3, #200	; 0xc8
    959c:	e59f00ac 	ldr	r0, [pc, #172]	; 9650 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc8>
    95a0:	e1a06001 	mov	r6, r1
    95a4:	eb009355 	bl	2e300 <jsonGetValueForKey>
    95a8:	e2504000 	subs	r4, r0, #0
    95ac:	1a000003 	bne	95c0 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
    95b0:	e3a04000 	mov	r4, #0
    95b4:	e1a00004 	mov	r0, r4
    95b8:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    95bc:	e8bd8070 	pop	{r4, r5, r6, pc}
    95c0:	e3a03000 	mov	r3, #0
    95c4:	e59d20e0 	ldr	r2, [sp, #224]	; 0xe0
    95c8:	e59f1084 	ldr	r1, [pc, #132]	; 9654 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc>
    95cc:	e5c23000 	strb	r3, [r2]
    95d0:	e28d0004 	add	r0, sp, #4
    95d4:	eb0082d1 	bl	2a120 <strcasecmp>
    95d8:	e3500000 	cmp	r0, #0
    95dc:	0a000014 	beq	9634 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xac>
    95e0:	e59f1070 	ldr	r1, [pc, #112]	; 9658 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd0>
    95e4:	e28d0004 	add	r0, sp, #4
    95e8:	eb0082cc 	bl	2a120 <strcasecmp>
    95ec:	e3500000 	cmp	r0, #0
    95f0:	0a00000b 	beq	9624 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9c>
    95f4:	e28d0004 	add	r0, sp, #4
    95f8:	e59f105c 	ldr	r1, [pc, #92]	; 965c <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd4>
    95fc:	eb0082c7 	bl	2a120 <strcasecmp>
    9600:	e3500000 	cmp	r0, #0
    9604:	1affffe9 	bne	95b0 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x28>
    9608:	e5950080 	ldr	r0, [r5, #128]	; 0x80
    960c:	e1a01006 	mov	r1, r6
    9610:	eb00b811 	bl	3765c <McManager::setupMachine(char const*)>
    9614:	e3a03001 	mov	r3, #1
    9618:	e2855a03 	add	r5, r5, #12288	; 0x3000
    961c:	e5853070 	str	r3, [r5, #112]	; 0x70
    9620:	eaffffe3 	b	95b4 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c>
    9624:	e1a01006 	mov	r1, r6
    9628:	e1a00005 	mov	r0, r5
    962c:	ebffff8c 	bl	9464 <BusRaiderApp::storeESP32StatusInfo(char const*)>
    9630:	eaffffdf 	b	95b4 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c>
    9634:	e1a00005 	mov	r0, r5
    9638:	e59d20e4 	ldr	r2, [sp, #228]	; 0xe4
    963c:	e59d10e0 	ldr	r1, [sp, #224]	; 0xe0
    9640:	ebffff7b 	bl	9434 <BusRaiderApp::getPiStatus(char*, int)>
    9644:	e1a00004 	mov	r0, r4
    9648:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    964c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9650:	0003f0d4 	.word	0x0003f0d4
    9654:	0003f0dc 	.word	0x0003f0dc
    9658:	0003f0e8 	.word	0x0003f0e8
    965c:	0003f0fc 	.word	0x0003f0fc

00009660 <BusRaiderApp::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
    9660:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9664:	e99d5000 	ldmib	sp, {ip, lr}
    9668:	e3500000 	cmp	r0, #0
    966c:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
    9670:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    9674:	eaffffc3 	b	9588 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

00009678 <BusRaiderApp::selfTestHelperService()>:
    9678:	eafffee0 	b	9200 <BusRaiderApp::service()>

0000967c <BusRaiderApp::selfTestKeyboardGet()>:
    967c:	e3e02000 	mvn	r2, #0
    9680:	e2803a03 	add	r3, r0, #12288	; 0x3000
    9684:	e5930538 	ldr	r0, [r3, #1336]	; 0x538
    9688:	e5832538 	str	r2, [r3, #1336]	; 0x538
    968c:	e12fff1e 	bx	lr

00009690 <SimpleBuffer::~SimpleBuffer()>:
    9690:	e12fff1e 	bx	lr

00009694 <SimpleBuffer::~SimpleBuffer()>:
    9694:	e92d4010 	push	{r4, lr}
    9698:	e1a04000 	mov	r4, r0
    969c:	e59f1008 	ldr	r1, [pc, #8]	; 96ac <SimpleBuffer::~SimpleBuffer()+0x18>
    96a0:	eb008685 	bl	2b0bc <operator delete(void*, unsigned int)>
    96a4:	e1a00004 	mov	r0, r4
    96a8:	e8bd8010 	pop	{r4, pc}
    96ac:	00002718 	.word	0x00002718

000096b0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
    96b0:	e92d4070 	push	{r4, r5, r6, lr}
    96b4:	e3a06000 	mov	r6, #0
    96b8:	e1a04000 	mov	r4, r0
    96bc:	e59f5034 	ldr	r5, [pc, #52]	; 96f8 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x48>
    96c0:	e580643c 	str	r6, [r0, #1084]	; 0x43c
    96c4:	e2853008 	add	r3, r5, #8
    96c8:	e5803000 	str	r3, [r0]
    96cc:	eb006f29 	bl	25378 <CDeviceNameService::Get()>
    96d0:	e1a03006 	mov	r3, r6
    96d4:	e2851030 	add	r1, r5, #48	; 0x30
    96d8:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
    96dc:	eb006f4c 	bl	25414 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    96e0:	e2840024 	add	r0, r4, #36	; 0x24
    96e4:	eb003b20 	bl	1836c <CKeyboardBehaviour::~CKeyboardBehaviour()>
    96e8:	e1a00004 	mov	r0, r4
    96ec:	eb002280 	bl	120f4 <CUSBHIDDevice::~CUSBHIDDevice()>
    96f0:	e1a00004 	mov	r0, r4
    96f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    96f8:	0003f15c 	.word	0x0003f15c

000096fc <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
    96fc:	e92d4010 	push	{r4, lr}
    9700:	e1a04000 	mov	r4, r0
    9704:	ebffffe9 	bl	96b0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
    9708:	e1a00004 	mov	r0, r4
    970c:	e3a01e45 	mov	r1, #1104	; 0x450
    9710:	eb008669 	bl	2b0bc <operator delete(void*, unsigned int)>
    9714:	e1a00004 	mov	r0, r4
    9718:	e8bd8010 	pop	{r4, pc}

0000971c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
    971c:	e2522008 	subs	r2, r2, #8
    9720:	13a02001 	movne	r2, #1
    9724:	e3510000 	cmp	r1, #0
    9728:	03822001 	orreq	r2, r2, #1
    972c:	e3520000 	cmp	r2, #0
    9730:	112fff1e 	bxne	lr
    9734:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9738:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
    973c:	e24dd00c 	sub	sp, sp, #12
    9740:	e3530000 	cmp	r3, #0
    9744:	e1a07001 	mov	r7, r1
    9748:	0a000004 	beq	9760 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
    974c:	e5d70000 	ldrb	r0, [r7]
    9750:	e2811002 	add	r1, r1, #2
    9754:	e28dd00c 	add	sp, sp, #12
    9758:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    975c:	e12fff13 	bx	r3
    9760:	e1a06000 	mov	r6, r0
    9764:	e1a04003 	mov	r4, r3
    9768:	e3a05080 	mov	r5, #128	; 0x80
    976c:	e3a09001 	mov	r9, #1
    9770:	e2808024 	add	r8, r0, #36	; 0x24
    9774:	ea000006 	b	9794 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x78>
    9778:	e1120003 	tst	r2, r3
    977c:	1a00003d 	bne	9878 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x15c>
    9780:	e2844001 	add	r4, r4, #1
    9784:	e2855001 	add	r5, r5, #1
    9788:	e3540008 	cmp	r4, #8
    978c:	e6ef5075 	uxtb	r5, r5
    9790:	0a00000a 	beq	97c0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xa4>
    9794:	e5d72000 	ldrb	r2, [r7]
    9798:	e1a03419 	lsl	r3, r9, r4
    979c:	e1120003 	tst	r2, r3
    97a0:	e5d62440 	ldrb	r2, [r6, #1088]	; 0x440
    97a4:	0afffff3 	beq	9778 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x5c>
    97a8:	e1120003 	tst	r2, r3
    97ac:	1afffff3 	bne	9780 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
    97b0:	e1a01005 	mov	r1, r5
    97b4:	e1a00008 	mov	r0, r8
    97b8:	eb003b50 	bl	18500 <CKeyboardBehaviour::KeyPressed(unsigned char)>
    97bc:	eaffffef 	b	9780 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
    97c0:	e2868d11 	add	r8, r6, #1088	; 0x440
    97c4:	e2885002 	add	r5, r8, #2
    97c8:	e1a0b005 	mov	fp, r5
    97cc:	e2863024 	add	r3, r6, #36	; 0x24
    97d0:	e2884008 	add	r4, r8, #8
    97d4:	e2879002 	add	r9, r7, #2
    97d8:	e287a008 	add	sl, r7, #8
    97dc:	e58d3004 	str	r3, [sp, #4]
    97e0:	e4db1001 	ldrb	r1, [fp], #1
    97e4:	e3510000 	cmp	r1, #0
    97e8:	0a000007 	beq	980c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>
    97ec:	e1a03009 	mov	r3, r9
    97f0:	e4d30001 	ldrb	r0, [r3], #1
    97f4:	e1500001 	cmp	r0, r1
    97f8:	0a000003 	beq	980c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>
    97fc:	e153000a 	cmp	r3, sl
    9800:	1afffffa 	bne	97f0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd4>
    9804:	e59d0004 	ldr	r0, [sp, #4]
    9808:	eb003b4b 	bl	1853c <CKeyboardBehaviour::KeyReleased(unsigned char)>
    980c:	e15b0004 	cmp	fp, r4
    9810:	1afffff2 	bne	97e0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc4>
    9814:	e2866024 	add	r6, r6, #36	; 0x24
    9818:	e2879001 	add	r9, r7, #1
    981c:	e287a007 	add	sl, r7, #7
    9820:	ea000001 	b	982c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
    9824:	e159000a 	cmp	r9, sl
    9828:	0a00000c 	beq	9860 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x144>
    982c:	e5f91001 	ldrb	r1, [r9, #1]!
    9830:	e3510000 	cmp	r1, #0
    9834:	11a03005 	movne	r3, r5
    9838:	0afffff9 	beq	9824 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
    983c:	e4d32001 	ldrb	r2, [r3], #1
    9840:	e1520001 	cmp	r2, r1
    9844:	0afffff6 	beq	9824 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
    9848:	e1530004 	cmp	r3, r4
    984c:	1afffffa 	bne	983c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x120>
    9850:	e1a00006 	mov	r0, r6
    9854:	eb003b29 	bl	18500 <CKeyboardBehaviour::KeyPressed(unsigned char)>
    9858:	e159000a 	cmp	r9, sl
    985c:	1afffff2 	bne	982c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
    9860:	e1a01007 	mov	r1, r7
    9864:	e1a00008 	mov	r0, r8
    9868:	e3a02008 	mov	r2, #8
    986c:	e28dd00c 	add	sp, sp, #12
    9870:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9874:	ea008429 	b	2a920 <memcpy>
    9878:	e1a01005 	mov	r1, r5
    987c:	e1a00008 	mov	r0, r8
    9880:	eb003b2d 	bl	1853c <CKeyboardBehaviour::KeyReleased(unsigned char)>
    9884:	eaffffbd 	b	9780 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>

00009888 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
    9888:	e92d4010 	push	{r4, lr}
    988c:	e1a04000 	mov	r4, r0
    9890:	e3a02008 	mov	r2, #8
    9894:	eb002202 	bl	120a4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
    9898:	e1a00004 	mov	r0, r4
    989c:	e59f3028 	ldr	r3, [pc, #40]	; 98cc <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x44>
    98a0:	e4803024 	str	r3, [r0], #36	; 0x24
    98a4:	eb003aa3 	bl	18338 <CKeyboardBehaviour::CKeyboardBehaviour()>
    98a8:	e3a01000 	mov	r1, #0
    98ac:	e2840d11 	add	r0, r4, #1088	; 0x440
    98b0:	e584143c 	str	r1, [r4, #1084]	; 0x43c
    98b4:	e5c41448 	strb	r1, [r4, #1096]	; 0x448
    98b8:	e584144c 	str	r1, [r4, #1100]	; 0x44c
    98bc:	e3a02008 	mov	r2, #8
    98c0:	eb00819f 	bl	29f44 <memset>
    98c4:	e1a00004 	mov	r0, r4
    98c8:	e8bd8010 	pop	{r4, pc}
    98cc:	0003f164 	.word	0x0003f164

000098d0 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
    98d0:	e2800024 	add	r0, r0, #36	; 0x24
    98d4:	ea003aae 	b	18394 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

000098d8 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
    98d8:	e2800024 	add	r0, r0, #36	; 0x24
    98dc:	ea003ab7 	b	183c0 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

000098e0 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
    98e0:	e2800024 	add	r0, r0, #36	; 0x24
    98e4:	ea003ac0 	b	183ec <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

000098e8 <CUSBKeyboardDevice::GetLEDStatus() const>:
    98e8:	e92d4010 	push	{r4, lr}
    98ec:	e2800024 	add	r0, r0, #36	; 0x24
    98f0:	eb003ac8 	bl	18418 <CKeyboardBehaviour::GetLEDStatus() const>
    98f4:	e2003001 	and	r3, r0, #1
    98f8:	e3100002 	tst	r0, #2
    98fc:	13833002 	orrne	r3, r3, #2
    9900:	e3100004 	tst	r0, #4
    9904:	13833004 	orrne	r3, r3, #4
    9908:	e1a00003 	mov	r0, r3
    990c:	e8bd8010 	pop	{r4, pc}

00009910 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
    9910:	e3510000 	cmp	r1, #0
    9914:	0a000001 	beq	9920 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x10>
    9918:	e580143c 	str	r1, [r0, #1084]	; 0x43c
    991c:	e12fff1e 	bx	lr
    9920:	e92d4010 	push	{r4, lr}
    9924:	e3a0207d 	mov	r2, #125	; 0x7d
    9928:	e59f1004 	ldr	r1, [pc, #4]	; 9934 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x24>
    992c:	e59f0004 	ldr	r0, [pc, #4]	; 9938 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x28>
    9930:	eb006bb6 	bl	24810 <assertion_failed>
    9934:	0003f19c 	.word	0x0003f19c
    9938:	0003f1ac 	.word	0x0003f1ac

0000993c <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
    993c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9940:	e24dd01c 	sub	sp, sp, #28
    9944:	e28d4018 	add	r4, sp, #24
    9948:	e5641004 	strb	r1, [r4, #-4]!
    994c:	e1a05000 	mov	r5, r0
    9950:	eb0017ec 	bl	f908 <CUSBFunction::GetHost() const>
    9954:	e1a06000 	mov	r6, r0
    9958:	e1a00005 	mov	r0, r5
    995c:	eb0017de 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
    9960:	e1a07000 	mov	r7, r0
    9964:	e1a00005 	mov	r0, r5
    9968:	eb001844 	bl	fa80 <CUSBFunction::GetInterfaceNumber() const>
    996c:	e3a02001 	mov	r2, #1
    9970:	e3a03c02 	mov	r3, #512	; 0x200
    9974:	e6ff0070 	uxth	r0, r0
    9978:	e98d0011 	stmib	sp, {r0, r4}
    997c:	e58d200c 	str	r2, [sp, #12]
    9980:	e58d3000 	str	r3, [sp]
    9984:	e1a01007 	mov	r1, r7
    9988:	e1a00006 	mov	r0, r6
    998c:	e3a03009 	mov	r3, #9
    9990:	e3a02021 	mov	r2, #33	; 0x21
    9994:	eb0023ad 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    9998:	e1e00000 	mvn	r0, r0
    999c:	e1a00fa0 	lsr	r0, r0, #31
    99a0:	e28dd01c 	add	sp, sp, #28
    99a4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000099a8 <CUSBKeyboardDevice::Configure()>:
    99a8:	e92d4030 	push	{r4, r5, lr}
    99ac:	e3a01000 	mov	r1, #0
    99b0:	e24dd00c 	sub	sp, sp, #12
    99b4:	e1a04000 	mov	r4, r0
    99b8:	eb0021f8 	bl	121a0 <CUSBHIDDevice::Configure(unsigned int)>
    99bc:	e2505000 	subs	r5, r0, #0
    99c0:	0a000012 	beq	9a10 <CUSBKeyboardDevice::Configure()+0x68>
    99c4:	e5d41448 	ldrb	r1, [r4, #1096]	; 0x448
    99c8:	e1a00004 	mov	r0, r4
    99cc:	ebffffda 	bl	993c <CUSBKeyboardDevice::SetLEDs(unsigned char)>
    99d0:	e59f2058 	ldr	r2, [pc, #88]	; 9a30 <CUSBKeyboardDevice::Configure()+0x88>
    99d4:	e5923000 	ldr	r3, [r2]
    99d8:	e584344c 	str	r3, [r4, #1100]	; 0x44c
    99dc:	e2833001 	add	r3, r3, #1
    99e0:	e5823000 	str	r3, [r2]
    99e4:	eb006e63 	bl	25378 <CDeviceNameService::Get()>
    99e8:	e3a03000 	mov	r3, #0
    99ec:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
    99f0:	e59f103c 	ldr	r1, [pc, #60]	; 9a34 <CUSBKeyboardDevice::Configure()+0x8c>
    99f4:	e58d3000 	str	r3, [sp]
    99f8:	e1a03004 	mov	r3, r4
    99fc:	eb006e6a 	bl	253ac <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    9a00:	e1a00004 	mov	r0, r4
    9a04:	e28dd00c 	add	sp, sp, #12
    9a08:	e8bd4030 	pop	{r4, r5, lr}
    9a0c:	ea002302 	b	1261c <CUSBHIDDevice::StartRequest()>
    9a10:	eb007471 	bl	26bdc <CLogger::Get()>
    9a14:	e59f301c 	ldr	r3, [pc, #28]	; 9a38 <CUSBKeyboardDevice::Configure()+0x90>
    9a18:	e3a02001 	mov	r2, #1
    9a1c:	e59f1018 	ldr	r1, [pc, #24]	; 9a3c <CUSBKeyboardDevice::Configure()+0x94>
    9a20:	eb0073aa 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9a24:	e1a00005 	mov	r0, r5
    9a28:	e28dd00c 	add	sp, sp, #12
    9a2c:	e8bd8030 	pop	{r4, r5, pc}
    9a30:	00047fa0 	.word	0x00047fa0
    9a34:	0003f18c 	.word	0x0003f18c
    9a38:	0003f1c8 	.word	0x0003f1c8
    9a3c:	0003f194 	.word	0x0003f194

00009a40 <CUSBKeyboardDevice::UpdateLEDs()>:
    9a40:	e590243c 	ldr	r2, [r0, #1084]	; 0x43c
    9a44:	e3520000 	cmp	r2, #0
    9a48:	112fff1e 	bxne	lr
    9a4c:	e92d4010 	push	{r4, lr}
    9a50:	e1a04000 	mov	r4, r0
    9a54:	ebffffa3 	bl	98e8 <CUSBKeyboardDevice::GetLEDStatus() const>
    9a58:	e5d43448 	ldrb	r3, [r4, #1096]	; 0x448
    9a5c:	e1530000 	cmp	r3, r0
    9a60:	08bd8010 	popeq	{r4, pc}
    9a64:	e5c40448 	strb	r0, [r4, #1096]	; 0x448
    9a68:	e1a01000 	mov	r1, r0
    9a6c:	e1a00004 	mov	r0, r4
    9a70:	ebffffb1 	bl	993c <CUSBKeyboardDevice::SetLEDs(unsigned char)>
    9a74:	e3500000 	cmp	r0, #0
    9a78:	18bd8010 	popne	{r4, pc}
    9a7c:	eb007456 	bl	26bdc <CLogger::Get()>
    9a80:	e8bd4010 	pop	{r4, lr}
    9a84:	e59f3008 	ldr	r3, [pc, #8]	; 9a94 <CUSBKeyboardDevice::UpdateLEDs()+0x54>
    9a88:	e3a02001 	mov	r2, #1
    9a8c:	e59f1004 	ldr	r1, [pc, #4]	; 9a98 <CUSBKeyboardDevice::UpdateLEDs()+0x58>
    9a90:	ea00738e 	b	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9a94:	0003f1e4 	.word	0x0003f1e4
    9a98:	0003f194 	.word	0x0003f194

00009a9c <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
    9a9c:	e0802002 	add	r2, r0, r2
    9aa0:	ea000002 	b	9ab0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
    9aa4:	e4d03001 	ldrb	r3, [r0], #1
    9aa8:	e1530001 	cmp	r3, r1
    9aac:	0a000003 	beq	9ac0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
    9ab0:	e1500002 	cmp	r0, r2
    9ab4:	1afffffa 	bne	9aa4 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
    9ab8:	e3a00000 	mov	r0, #0
    9abc:	e12fff1e 	bx	lr
    9ac0:	e3a00001 	mov	r0, #1
    9ac4:	e12fff1e 	bx	lr

00009ac8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    9ac8:	e3520000 	cmp	r2, #0
    9acc:	e92d4010 	push	{r4, lr}
    9ad0:	0a000005 	beq	9aec <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x24>
    9ad4:	e351000f 	cmp	r1, #15
    9ad8:	8a000007 	bhi	9afc <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x34>
    9adc:	e3a03000 	mov	r3, #0
    9ae0:	e0822001 	add	r2, r2, r1
    9ae4:	e5c2305c 	strb	r3, [r2, #92]	; 0x5c
    9ae8:	e8bd8010 	pop	{r4, pc}
    9aec:	e59f2018 	ldr	r2, [pc, #24]	; 9b0c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x44>
    9af0:	e59f1018 	ldr	r1, [pc, #24]	; 9b10 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    9af4:	e59f0018 	ldr	r0, [pc, #24]	; 9b14 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x4c>
    9af8:	eb006b44 	bl	24810 <assertion_failed>
    9afc:	e59f2014 	ldr	r2, [pc, #20]	; 9b18 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x50>
    9b00:	e59f1008 	ldr	r1, [pc, #8]	; 9b10 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    9b04:	e59f0010 	ldr	r0, [pc, #16]	; 9b1c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x54>
    9b08:	eb006b40 	bl	24810 <assertion_failed>
    9b0c:	000002ab 	.word	0x000002ab
    9b10:	0003f220 	.word	0x0003f220
    9b14:	0003f230 	.word	0x0003f230
    9b18:	000002ae 	.word	0x000002ae
    9b1c:	0003f23c 	.word	0x0003f23c

00009b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>:
    9b20:	e92d4030 	push	{r4, r5, lr}
    9b24:	e24dd01c 	sub	sp, sp, #28
    9b28:	e1a05000 	mov	r5, r0
    9b2c:	e28d000c 	add	r0, sp, #12
    9b30:	eb000c3e 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9b34:	e3a03000 	mov	r3, #0
    9b38:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9b3c:	eb007426 	bl	26bdc <CLogger::Get()>
    9b40:	e1a04000 	mov	r4, r0
    9b44:	e28d000c 	add	r0, sp, #12
    9b48:	eb000c41 	bl	cc54 <CDWHCIRegister::Read()>
    9b4c:	e59f3020 	ldr	r3, [pc, #32]	; 9b74 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]+0x54>
    9b50:	e88d0021 	stm	sp, {r0, r5}
    9b54:	e3a02004 	mov	r2, #4
    9b58:	e1a00004 	mov	r0, r4
    9b5c:	e59f1014 	ldr	r1, [pc, #20]	; 9b78 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]+0x58>
    9b60:	eb00735a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9b64:	e28d000c 	add	r0, sp, #12
    9b68:	eb000c38 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    9b6c:	e28dd01c 	add	sp, sp, #28
    9b70:	e8bd8030 	pop	{r4, r5, pc}
    9b74:	0003f25c 	.word	0x0003f25c
    9b78:	0003f1fc 	.word	0x0003f1fc

00009b7c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>:
    9b7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9b80:	e1a04000 	mov	r4, r0
    9b84:	e3a05000 	mov	r5, #0
    9b88:	e1a07001 	mov	r7, r1
    9b8c:	e1a06002 	mov	r6, r2
    9b90:	eb002323 	bl	12824 <CUSBHostController::CUSBHostController()>
    9b94:	e3a03001 	mov	r3, #1
    9b98:	e59f00a8 	ldr	r0, [pc, #168]	; 9c48 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xcc>
    9b9c:	e5845010 	str	r5, [r4, #16]
    9ba0:	e5840000 	str	r0, [r4]
    9ba4:	e5843014 	str	r3, [r4, #20]
    9ba8:	e5843058 	str	r3, [r4, #88]	; 0x58
    9bac:	e5847004 	str	r7, [r4, #4]
    9bb0:	e5846008 	str	r6, [r4, #8]
    9bb4:	e584500c 	str	r5, [r4, #12]
    9bb8:	e584506c 	str	r5, [r4, #108]	; 0x6c
    9bbc:	e5845070 	str	r5, [r4, #112]	; 0x70
    9bc0:	e1a01004 	mov	r1, r4
    9bc4:	e2840074 	add	r0, r4, #116	; 0x74
    9bc8:	eb000d0c 	bl	d000 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    9bcc:	e5943004 	ldr	r3, [r4, #4]
    9bd0:	e5c45080 	strb	r5, [r4, #128]	; 0x80
    9bd4:	e1530005 	cmp	r3, r5
    9bd8:	e5c45081 	strb	r5, [r4, #129]	; 0x81
    9bdc:	0a000011 	beq	9c28 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xac>
    9be0:	e5943008 	ldr	r3, [r4, #8]
    9be4:	e3530000 	cmp	r3, #0
    9be8:	11a02005 	movne	r2, r5
    9bec:	12843014 	addne	r3, r4, #20
    9bf0:	12841054 	addne	r1, r4, #84	; 0x54
    9bf4:	0a00000f 	beq	9c38 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xbc>
    9bf8:	e5a32004 	str	r2, [r3, #4]!
    9bfc:	e1510003 	cmp	r1, r3
    9c00:	1afffffc 	bne	9bf8 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x7c>
    9c04:	e3a03000 	mov	r3, #0
    9c08:	e1a01003 	mov	r1, r3
    9c0c:	e0842003 	add	r2, r4, r3
    9c10:	e2833001 	add	r3, r3, #1
    9c14:	e3530010 	cmp	r3, #16
    9c18:	e5c2105c 	strb	r1, [r2, #92]	; 0x5c
    9c1c:	1afffffa 	bne	9c0c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x90>
    9c20:	e1a00004 	mov	r0, r4
    9c24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9c28:	e3a0204b 	mov	r2, #75	; 0x4b
    9c2c:	e59f1018 	ldr	r1, [pc, #24]	; 9c4c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9c30:	e59f0018 	ldr	r0, [pc, #24]	; 9c50 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd4>
    9c34:	eb006af5 	bl	24810 <assertion_failed>
    9c38:	e3a0204c 	mov	r2, #76	; 0x4c
    9c3c:	e59f1008 	ldr	r1, [pc, #8]	; 9c4c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9c40:	e59f000c 	ldr	r0, [pc, #12]	; 9c54 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd8>
    9c44:	eb006af1 	bl	24810 <assertion_failed>
    9c48:	0003f20c 	.word	0x0003f20c
    9c4c:	0003f220 	.word	0x0003f220
    9c50:	0003f268 	.word	0x0003f268
    9c54:	0003f280 	.word	0x0003f280

00009c58 <CDWHCIDevice::GetPortSpeed()>:
    9c58:	e92d4010 	push	{r4, lr}
    9c5c:	e24dd010 	sub	sp, sp, #16
    9c60:	e59f103c 	ldr	r1, [pc, #60]	; 9ca4 <CDWHCIDevice::GetPortSpeed()+0x4c>
    9c64:	e28d0004 	add	r0, sp, #4
    9c68:	eb000bf0 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9c6c:	e28d0004 	add	r0, sp, #4
    9c70:	eb000bf7 	bl	cc54 <CDWHCIRegister::Read()>
    9c74:	e1a008a0 	lsr	r0, r0, #17
    9c78:	e2000003 	and	r0, r0, #3
    9c7c:	e3500003 	cmp	r0, #3
    9c80:	03a04004 	moveq	r4, #4
    9c84:	159f301c 	ldrne	r3, [pc, #28]	; 9ca8 <CDWHCIDevice::GetPortSpeed()+0x50>
    9c88:	10830000 	addne	r0, r3, r0
    9c8c:	15d04020 	ldrbne	r4, [r0, #32]
    9c90:	e28d0004 	add	r0, sp, #4
    9c94:	eb000bed 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    9c98:	e1a00004 	mov	r0, r4
    9c9c:	e28dd010 	add	sp, sp, #16
    9ca0:	e8bd8010 	pop	{r4, pc}
    9ca4:	20980440 	.word	0x20980440
    9ca8:	0003f1fc 	.word	0x0003f1fc

00009cac <CDWHCIDevice::OvercurrentDetected()>:
    9cac:	e92d4010 	push	{r4, lr}
    9cb0:	e24dd010 	sub	sp, sp, #16
    9cb4:	e59f1028 	ldr	r1, [pc, #40]	; 9ce4 <CDWHCIDevice::OvercurrentDetected()+0x38>
    9cb8:	e28d0004 	add	r0, sp, #4
    9cbc:	eb000bdb 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9cc0:	e28d0004 	add	r0, sp, #4
    9cc4:	eb000be2 	bl	cc54 <CDWHCIRegister::Read()>
    9cc8:	e1a04000 	mov	r4, r0
    9ccc:	e28d0004 	add	r0, sp, #4
    9cd0:	eb000bde 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    9cd4:	e1a00224 	lsr	r0, r4, #4
    9cd8:	e2000001 	and	r0, r0, #1
    9cdc:	e28dd010 	add	sp, sp, #16
    9ce0:	e8bd8010 	pop	{r4, pc}
    9ce4:	20980440 	.word	0x20980440

00009ce8 <CDWHCIDevice::DisableRootPort(bool)>:
    9ce8:	e3a03000 	mov	r3, #0
    9cec:	e92d4010 	push	{r4, lr}
    9cf0:	e1a04001 	mov	r4, r1
    9cf4:	e24dd010 	sub	sp, sp, #16
    9cf8:	e5c03080 	strb	r3, [r0, #128]	; 0x80
    9cfc:	e59f1044 	ldr	r1, [pc, #68]	; 9d48 <CDWHCIDevice::DisableRootPort(bool)+0x60>
    9d00:	e28d0004 	add	r0, sp, #4
    9d04:	eb000bc9 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9d08:	e28d0004 	add	r0, sp, #4
    9d0c:	eb000bd0 	bl	cc54 <CDWHCIRegister::Read()>
    9d10:	e28d0004 	add	r0, sp, #4
    9d14:	e3e01004 	mvn	r1, #4
    9d18:	eb000c01 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    9d1c:	e3540000 	cmp	r4, #0
    9d20:	0a000002 	beq	9d30 <CDWHCIDevice::DisableRootPort(bool)+0x48>
    9d24:	e3e01a01 	mvn	r1, #4096	; 0x1000
    9d28:	e28d0004 	add	r0, sp, #4
    9d2c:	eb000bfc 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    9d30:	e28d0004 	add	r0, sp, #4
    9d34:	eb000bcd 	bl	cc70 <CDWHCIRegister::Write()>
    9d38:	e28d0004 	add	r0, sp, #4
    9d3c:	eb000bc3 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    9d40:	e28dd010 	add	sp, sp, #16
    9d44:	e8bd8010 	pop	{r4, pc}
    9d48:	20980440 	.word	0x20980440

00009d4c <CDWHCIDevice::PowerOn()>:
    9d4c:	e3a01000 	mov	r1, #0
    9d50:	e92d4030 	push	{r4, r5, lr}
    9d54:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    9d58:	e28d000c 	add	r0, sp, #12
    9d5c:	e1a05001 	mov	r5, r1
    9d60:	eb006acb 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    9d64:	e3a03014 	mov	r3, #20
    9d68:	e3a0c003 	mov	ip, #3
    9d6c:	e28d000c 	add	r0, sp, #12
    9d70:	e58d5000 	str	r5, [sp]
    9d74:	e08d2003 	add	r2, sp, r3
    9d78:	e59f1034 	ldr	r1, [pc, #52]	; 9db4 <CDWHCIDevice::PowerOn()+0x68>
    9d7c:	e58dc020 	str	ip, [sp, #32]
    9d80:	e58dc024 	str	ip, [sp, #36]	; 0x24
    9d84:	eb006ace 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9d88:	e2504000 	subs	r4, r0, #0
    9d8c:	0a000003 	beq	9da0 <CDWHCIDevice::PowerOn()+0x54>
    9d90:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    9d94:	e3140002 	tst	r4, #2
    9d98:	11a04005 	movne	r4, r5
    9d9c:	02044001 	andeq	r4, r4, #1
    9da0:	e28d000c 	add	r0, sp, #12
    9da4:	eb006ac1 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
    9da8:	e1a00004 	mov	r0, r4
    9dac:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9db0:	e8bd8030 	pop	{r4, r5, pc}
    9db4:	00028001 	.word	0x00028001

00009db8 <CDWHCIDevice::EnableGlobalInterrupts()>:
    9db8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9dbc:	e24dd014 	sub	sp, sp, #20
    9dc0:	e59f1030 	ldr	r1, [pc, #48]	; 9df8 <CDWHCIDevice::EnableGlobalInterrupts()+0x40>
    9dc4:	e28d0004 	add	r0, sp, #4
    9dc8:	eb000b98 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9dcc:	e28d0004 	add	r0, sp, #4
    9dd0:	eb000b9f 	bl	cc54 <CDWHCIRegister::Read()>
    9dd4:	e3a01001 	mov	r1, #1
    9dd8:	e28d0004 	add	r0, sp, #4
    9ddc:	eb000bde 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    9de0:	e28d0004 	add	r0, sp, #4
    9de4:	eb000ba1 	bl	cc70 <CDWHCIRegister::Write()>
    9de8:	e28d0004 	add	r0, sp, #4
    9dec:	eb000b97 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    9df0:	e28dd014 	add	sp, sp, #20
    9df4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9df8:	20980008 	.word	0x20980008

00009dfc <CDWHCIDevice::EnableCommonInterrupts()>:
    9dfc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9e00:	e24dd014 	sub	sp, sp, #20
    9e04:	e59f1024 	ldr	r1, [pc, #36]	; 9e30 <CDWHCIDevice::EnableCommonInterrupts()+0x34>
    9e08:	e28d0004 	add	r0, sp, #4
    9e0c:	eb000b87 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9e10:	e28d0004 	add	r0, sp, #4
    9e14:	eb000c0f 	bl	ce58 <CDWHCIRegister::SetAll()>
    9e18:	e28d0004 	add	r0, sp, #4
    9e1c:	eb000b93 	bl	cc70 <CDWHCIRegister::Write()>
    9e20:	e28d0004 	add	r0, sp, #4
    9e24:	eb000b89 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    9e28:	e28dd014 	add	sp, sp, #20
    9e2c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9e30:	20980014 	.word	0x20980014

00009e34 <CDWHCIDevice::EnableHostInterrupts()>:
    9e34:	e92d4010 	push	{r4, lr}
    9e38:	e1a04000 	mov	r4, r0
    9e3c:	e24dd010 	sub	sp, sp, #16
    9e40:	e3a02000 	mov	r2, #0
    9e44:	e59f1040 	ldr	r1, [pc, #64]	; 9e8c <CDWHCIDevice::EnableHostInterrupts()+0x58>
    9e48:	e28d0004 	add	r0, sp, #4
    9e4c:	eb000b7b 	bl	cc40 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9e50:	e28d0004 	add	r0, sp, #4
    9e54:	eb000b85 	bl	cc70 <CDWHCIRegister::Write()>
    9e58:	e1a00004 	mov	r0, r4
    9e5c:	ebffffe6 	bl	9dfc <CDWHCIDevice::EnableCommonInterrupts()>
    9e60:	e28d0004 	add	r0, sp, #4
    9e64:	eb000b7a 	bl	cc54 <CDWHCIRegister::Read()>
    9e68:	e3a01402 	mov	r1, #33554432	; 0x2000000
    9e6c:	e28d0004 	add	r0, sp, #4
    9e70:	eb000bb9 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    9e74:	e28d0004 	add	r0, sp, #4
    9e78:	eb000b7c 	bl	cc70 <CDWHCIRegister::Write()>
    9e7c:	e28d0004 	add	r0, sp, #4
    9e80:	eb000b72 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    9e84:	e28dd010 	add	sp, sp, #16
    9e88:	e8bd8010 	pop	{r4, pc}
    9e8c:	20980018 	.word	0x20980018

00009e90 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    9e90:	e92d4030 	push	{r4, r5, lr}
    9e94:	e1a04000 	mov	r4, r0
    9e98:	e24dd014 	sub	sp, sp, #20
    9e9c:	e1a05001 	mov	r5, r1
    9ea0:	e28d0004 	add	r0, sp, #4
    9ea4:	e59f1054 	ldr	r1, [pc, #84]	; 9f00 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x70>
    9ea8:	eb000b60 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9eac:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    9eb0:	e3500000 	cmp	r0, #0
    9eb4:	1a00000f 	bne	9ef8 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x68>
    9eb8:	e28d0004 	add	r0, sp, #4
    9ebc:	eb000b64 	bl	cc54 <CDWHCIRegister::Read()>
    9ec0:	e3a01001 	mov	r1, #1
    9ec4:	e28d0004 	add	r0, sp, #4
    9ec8:	e1a01511 	lsl	r1, r1, r5
    9ecc:	eb000ba2 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    9ed0:	e28d0004 	add	r0, sp, #4
    9ed4:	eb000b65 	bl	cc70 <CDWHCIRegister::Write()>
    9ed8:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    9edc:	e3530000 	cmp	r3, #0
    9ee0:	0a000000 	beq	9ee8 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x58>
    9ee4:	eb0087c3 	bl	2bdf8 <LeaveCritical>
    9ee8:	e28d0004 	add	r0, sp, #4
    9eec:	eb000b57 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    9ef0:	e28dd014 	add	sp, sp, #20
    9ef4:	e8bd8030 	pop	{r4, r5, pc}
    9ef8:	eb008793 	bl	2bd4c <EnterCritical>
    9efc:	eaffffed 	b	9eb8 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x28>
    9f00:	20980418 	.word	0x20980418

00009f04 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    9f04:	e92d4030 	push	{r4, r5, lr}
    9f08:	e1a04000 	mov	r4, r0
    9f0c:	e24dd014 	sub	sp, sp, #20
    9f10:	e1a05001 	mov	r5, r1
    9f14:	e28d0004 	add	r0, sp, #4
    9f18:	e59f1054 	ldr	r1, [pc, #84]	; 9f74 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x70>
    9f1c:	eb000b43 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9f20:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    9f24:	e3500000 	cmp	r0, #0
    9f28:	1a00000f 	bne	9f6c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x68>
    9f2c:	e28d0004 	add	r0, sp, #4
    9f30:	eb000b47 	bl	cc54 <CDWHCIRegister::Read()>
    9f34:	e3a01001 	mov	r1, #1
    9f38:	e28d0004 	add	r0, sp, #4
    9f3c:	e1e01511 	mvn	r1, r1, lsl r5
    9f40:	eb000b77 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    9f44:	e28d0004 	add	r0, sp, #4
    9f48:	eb000b48 	bl	cc70 <CDWHCIRegister::Write()>
    9f4c:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    9f50:	e3530000 	cmp	r3, #0
    9f54:	0a000000 	beq	9f5c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x58>
    9f58:	eb0087a6 	bl	2bdf8 <LeaveCritical>
    9f5c:	e28d0004 	add	r0, sp, #4
    9f60:	eb000b3a 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    9f64:	e28dd014 	add	sp, sp, #20
    9f68:	e8bd8030 	pop	{r4, r5, pc}
    9f6c:	eb008776 	bl	2bd4c <EnterCritical>
    9f70:	eaffffed 	b	9f2c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x28>
    9f74:	20980418 	.word	0x20980418

00009f78 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    9f78:	e92d4070 	push	{r4, r5, r6, lr}
    9f7c:	e2514000 	subs	r4, r1, #0
    9f80:	e24dd048 	sub	sp, sp, #72	; 0x48
    9f84:	0a0000dd 	beq	a300 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x388>
    9f88:	e1a06000 	mov	r6, r0
    9f8c:	e1a00004 	mov	r0, r4
    9f90:	eb000d17 	bl	d3f4 <CDWHCITransferStageData::GetChannelNumber() const>
    9f94:	e596300c 	ldr	r3, [r6, #12]
    9f98:	e1a05000 	mov	r5, r0
    9f9c:	e1500003 	cmp	r0, r3
    9fa0:	2a0000da 	bcs	a310 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x398>
    9fa4:	e3a01001 	mov	r1, #1
    9fa8:	e1a00004 	mov	r0, r4
    9fac:	eb000d0a 	bl	d3dc <CDWHCITransferStageData::SetSubState(unsigned int)>
    9fb0:	e59f1368 	ldr	r1, [pc, #872]	; a320 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a8>
    9fb4:	e1a05285 	lsl	r5, r5, #5
    9fb8:	e0851001 	add	r1, r5, r1
    9fbc:	e1a0000d 	mov	r0, sp
    9fc0:	eb000b1a 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9fc4:	e1a0000d 	mov	r0, sp
    9fc8:	eb000ba2 	bl	ce58 <CDWHCIRegister::SetAll()>
    9fcc:	e1a0000d 	mov	r0, sp
    9fd0:	eb000b26 	bl	cc70 <CDWHCIRegister::Write()>
    9fd4:	e59f1348 	ldr	r1, [pc, #840]	; a324 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3ac>
    9fd8:	e3a02000 	mov	r2, #0
    9fdc:	e0851001 	add	r1, r5, r1
    9fe0:	e28d000c 	add	r0, sp, #12
    9fe4:	eb000b15 	bl	cc40 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9fe8:	e1a00004 	mov	r0, r4
    9fec:	eb000e39 	bl	d8d8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    9ff0:	e3c014ff 	bic	r1, r0, #-16777216	; 0xff000000
    9ff4:	e3c1173e 	bic	r1, r1, #16252928	; 0xf80000
    9ff8:	e28d000c 	add	r0, sp, #12
    9ffc:	eb000b56 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a000:	e1a00004 	mov	r0, r4
    a004:	eb000e35 	bl	d8e0 <CDWHCITransferStageData::GetPacketsToTransfer() const>
    a008:	e59f1318 	ldr	r1, [pc, #792]	; a328 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b0>
    a00c:	e0011980 	and	r1, r1, r0, lsl #19
    a010:	e28d000c 	add	r0, sp, #12
    a014:	eb000b50 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a018:	e1a00004 	mov	r0, r4
    a01c:	eb000e00 	bl	d824 <CDWHCITransferStageData::GetPID() const>
    a020:	e1a01e80 	lsl	r1, r0, #29
    a024:	e28d000c 	add	r0, sp, #12
    a028:	eb000b4b 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a02c:	e28d000c 	add	r0, sp, #12
    a030:	eb000b0e 	bl	cc70 <CDWHCIRegister::Write()>
    a034:	e1a00004 	mov	r0, r4
    a038:	eb000e1a 	bl	d8a8 <CDWHCITransferStageData::GetDMAAddress() const>
    a03c:	e59f12e8 	ldr	r1, [pc, #744]	; a32c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b4>
    a040:	e3c02103 	bic	r2, r0, #-1073741824	; 0xc0000000
    a044:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
    a048:	e0851001 	add	r1, r5, r1
    a04c:	e28d0018 	add	r0, sp, #24
    a050:	eb000afa 	bl	cc40 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a054:	e28d0018 	add	r0, sp, #24
    a058:	eb000b04 	bl	cc70 <CDWHCIRegister::Write()>
    a05c:	e1a00004 	mov	r0, r4
    a060:	eb000e10 	bl	d8a8 <CDWHCITransferStageData::GetDMAAddress() const>
    a064:	e1a06000 	mov	r6, r0
    a068:	e1a00004 	mov	r0, r4
    a06c:	eb000e19 	bl	d8d8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a070:	e1a01000 	mov	r1, r0
    a074:	e1a00006 	mov	r0, r6
    a078:	eb008774 	bl	2be50 <CleanAndInvalidateDataCacheRange>
    a07c:	e59f12ac 	ldr	r1, [pc, #684]	; a330 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b8>
    a080:	e3a02000 	mov	r2, #0
    a084:	e0851001 	add	r1, r5, r1
    a088:	e28d0024 	add	r0, sp, #36	; 0x24
    a08c:	eb000aeb 	bl	cc40 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a090:	e1a00004 	mov	r0, r4
    a094:	eb000e13 	bl	d8e8 <CDWHCITransferStageData::IsSplit() const>
    a098:	e3500000 	cmp	r0, #0
    a09c:	1a00007c 	bne	a294 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x31c>
    a0a0:	e28d0024 	add	r0, sp, #36	; 0x24
    a0a4:	eb000af1 	bl	cc70 <CDWHCIRegister::Write()>
    a0a8:	e59f1284 	ldr	r1, [pc, #644]	; a334 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3bc>
    a0ac:	e28d0030 	add	r0, sp, #48	; 0x30
    a0b0:	e0851001 	add	r1, r5, r1
    a0b4:	eb000add 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a0b8:	e28d0030 	add	r0, sp, #48	; 0x30
    a0bc:	eb000ae4 	bl	cc54 <CDWHCIRegister::Read()>
    a0c0:	e59f1270 	ldr	r1, [pc, #624]	; a338 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c0>
    a0c4:	e28d0030 	add	r0, sp, #48	; 0x30
    a0c8:	eb000b15 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    a0cc:	e1a00004 	mov	r0, r4
    a0d0:	eb000dcf 	bl	d814 <CDWHCITransferStageData::GetMaxPacketSize() const>
    a0d4:	e1a01a80 	lsl	r1, r0, #21
    a0d8:	e1a01aa1 	lsr	r1, r1, #21
    a0dc:	e28d0030 	add	r0, sp, #48	; 0x30
    a0e0:	eb000b1d 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a0e4:	e28d0030 	add	r0, sp, #48	; 0x30
    a0e8:	e3e01603 	mvn	r1, #3145728	; 0x300000
    a0ec:	eb000b0c 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    a0f0:	e28d0030 	add	r0, sp, #48	; 0x30
    a0f4:	e3a01601 	mov	r1, #1048576	; 0x100000
    a0f8:	eb000b17 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a0fc:	e1a00004 	mov	r0, r4
    a100:	eb000de4 	bl	d898 <CDWHCITransferStageData::IsDirectionIn() const>
    a104:	e3500000 	cmp	r0, #0
    a108:	1a000052 	bne	a258 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2e0>
    a10c:	e3e01902 	mvn	r1, #32768	; 0x8000
    a110:	e28d0030 	add	r0, sp, #48	; 0x30
    a114:	eb000b02 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    a118:	e1a00004 	mov	r0, r4
    a11c:	eb000dbe 	bl	d81c <CDWHCITransferStageData::GetSpeed() const>
    a120:	e3500000 	cmp	r0, #0
    a124:	1a000052 	bne	a274 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2fc>
    a128:	e3a01802 	mov	r1, #131072	; 0x20000
    a12c:	e28d0030 	add	r0, sp, #48	; 0x30
    a130:	eb000b09 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a134:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    a138:	e28d0030 	add	r0, sp, #48	; 0x30
    a13c:	eb000af8 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    a140:	e1a00004 	mov	r0, r4
    a144:	eb000d7d 	bl	d740 <CDWHCITransferStageData::GetDeviceAddress() const>
    a148:	e1a01b00 	lsl	r1, r0, #22
    a14c:	e28d0030 	add	r0, sp, #48	; 0x30
    a150:	eb000b01 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a154:	e3e01703 	mvn	r1, #786432	; 0xc0000
    a158:	e28d0030 	add	r0, sp, #48	; 0x30
    a15c:	eb000af0 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    a160:	e1a00004 	mov	r0, r4
    a164:	eb000d81 	bl	d770 <CDWHCITransferStageData::GetEndpointType() const>
    a168:	e1a01900 	lsl	r1, r0, #18
    a16c:	e28d0030 	add	r0, sp, #48	; 0x30
    a170:	eb000af9 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a174:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    a178:	e28d0030 	add	r0, sp, #48	; 0x30
    a17c:	eb000ae8 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    a180:	e1a00004 	mov	r0, r4
    a184:	eb000d96 	bl	d7e4 <CDWHCITransferStageData::GetEndpointNumber() const>
    a188:	e1a01580 	lsl	r1, r0, #11
    a18c:	e28d0030 	add	r0, sp, #48	; 0x30
    a190:	eb000af1 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a194:	e1a00004 	mov	r0, r4
    a198:	eb000e4a 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    a19c:	e2506000 	subs	r6, r0, #0
    a1a0:	0a00000b 	beq	a1d4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x25c>
    a1a4:	e5963000 	ldr	r3, [r6]
    a1a8:	e5933014 	ldr	r3, [r3, #20]
    a1ac:	e12fff33 	blx	r3
    a1b0:	e5963000 	ldr	r3, [r6]
    a1b4:	e1a00006 	mov	r0, r6
    a1b8:	e5933018 	ldr	r3, [r3, #24]
    a1bc:	e12fff33 	blx	r3
    a1c0:	e3500000 	cmp	r0, #0
    a1c4:	1a00002e 	bne	a284 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x30c>
    a1c8:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    a1cc:	e28d0030 	add	r0, sp, #48	; 0x30
    a1d0:	eb000ad3 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    a1d4:	e59f1160 	ldr	r1, [pc, #352]	; a33c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c4>
    a1d8:	e28d003c 	add	r0, sp, #60	; 0x3c
    a1dc:	e0851001 	add	r1, r5, r1
    a1e0:	eb000a92 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a1e4:	e1a00004 	mov	r0, r4
    a1e8:	eb000df9 	bl	d9d4 <CDWHCITransferStageData::GetStatusMask() const>
    a1ec:	e1a01000 	mov	r1, r0
    a1f0:	e28d003c 	add	r0, sp, #60	; 0x3c
    a1f4:	eb000ab7 	bl	ccd8 <CDWHCIRegister::Set(unsigned int)>
    a1f8:	e28d003c 	add	r0, sp, #60	; 0x3c
    a1fc:	eb000a9b 	bl	cc70 <CDWHCIRegister::Write()>
    a200:	e28d0030 	add	r0, sp, #48	; 0x30
    a204:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a208:	eb000ad3 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a20c:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    a210:	e28d0030 	add	r0, sp, #48	; 0x30
    a214:	eb000ac2 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    a218:	e28d0030 	add	r0, sp, #48	; 0x30
    a21c:	eb000a93 	bl	cc70 <CDWHCIRegister::Write()>
    a220:	e28d003c 	add	r0, sp, #60	; 0x3c
    a224:	eb000a89 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    a228:	e28d0030 	add	r0, sp, #48	; 0x30
    a22c:	eb000a87 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    a230:	e28d0024 	add	r0, sp, #36	; 0x24
    a234:	eb000a85 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    a238:	e28d0018 	add	r0, sp, #24
    a23c:	eb000a83 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    a240:	e28d000c 	add	r0, sp, #12
    a244:	eb000a81 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    a248:	e1a0000d 	mov	r0, sp
    a24c:	eb000a7f 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    a250:	e28dd048 	add	sp, sp, #72	; 0x48
    a254:	e8bd8070 	pop	{r4, r5, r6, pc}
    a258:	e3a01902 	mov	r1, #32768	; 0x8000
    a25c:	e28d0030 	add	r0, sp, #48	; 0x30
    a260:	eb000abd 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a264:	e1a00004 	mov	r0, r4
    a268:	eb000d6b 	bl	d81c <CDWHCITransferStageData::GetSpeed() const>
    a26c:	e3500000 	cmp	r0, #0
    a270:	0affffac 	beq	a128 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1b0>
    a274:	e3e01802 	mvn	r1, #131072	; 0x20000
    a278:	e28d0030 	add	r0, sp, #48	; 0x30
    a27c:	eb000aa8 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    a280:	eaffffab 	b	a134 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1bc>
    a284:	e3a01202 	mov	r1, #536870912	; 0x20000000
    a288:	e28d0030 	add	r0, sp, #48	; 0x30
    a28c:	eb000ab2 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a290:	eaffffcf 	b	a1d4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x25c>
    a294:	e1a00004 	mov	r0, r4
    a298:	eb000db6 	bl	d978 <CDWHCITransferStageData::GetHubPortAddress() const>
    a29c:	e1a01000 	mov	r1, r0
    a2a0:	e28d0024 	add	r0, sp, #36	; 0x24
    a2a4:	eb000aac 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a2a8:	e1a00004 	mov	r0, r4
    a2ac:	eb000d9c 	bl	d924 <CDWHCITransferStageData::GetHubAddress() const>
    a2b0:	e1a01380 	lsl	r1, r0, #7
    a2b4:	e28d0024 	add	r0, sp, #36	; 0x24
    a2b8:	eb000aa7 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a2bc:	e1a00004 	mov	r0, r4
    a2c0:	eb000dc1 	bl	d9cc <CDWHCITransferStageData::GetSplitPosition() const>
    a2c4:	e1a01700 	lsl	r1, r0, #14
    a2c8:	e28d0024 	add	r0, sp, #36	; 0x24
    a2cc:	eb000aa2 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a2d0:	e1a00004 	mov	r0, r4
    a2d4:	eb000d85 	bl	d8f0 <CDWHCITransferStageData::IsSplitComplete() const>
    a2d8:	e3500000 	cmp	r0, #0
    a2dc:	1a000003 	bne	a2f0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x378>
    a2e0:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a2e4:	e28d0024 	add	r0, sp, #36	; 0x24
    a2e8:	eb000a9b 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a2ec:	eaffff6b 	b	a0a0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x128>
    a2f0:	e3a01801 	mov	r1, #65536	; 0x10000
    a2f4:	e28d0024 	add	r0, sp, #36	; 0x24
    a2f8:	eb000a97 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a2fc:	eafffff7 	b	a2e0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x368>
    a300:	e59f2038 	ldr	r2, [pc, #56]	; a340 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c8>
    a304:	e59f1038 	ldr	r1, [pc, #56]	; a344 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    a308:	e59f0038 	ldr	r0, [pc, #56]	; a348 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d0>
    a30c:	eb00693f 	bl	24810 <assertion_failed>
    a310:	e3a02e35 	mov	r2, #848	; 0x350
    a314:	e59f1028 	ldr	r1, [pc, #40]	; a344 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    a318:	e59f002c 	ldr	r0, [pc, #44]	; a34c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d4>
    a31c:	eb00693b 	bl	24810 <assertion_failed>
    a320:	20980508 	.word	0x20980508
    a324:	20980510 	.word	0x20980510
    a328:	1ff80000 	.word	0x1ff80000
    a32c:	20980514 	.word	0x20980514
    a330:	20980504 	.word	0x20980504
    a334:	20980500 	.word	0x20980500
    a338:	fffff800 	.word	0xfffff800
    a33c:	2098050c 	.word	0x2098050c
    a340:	0000034e 	.word	0x0000034e
    a344:	0003f220 	.word	0x0003f220
    a348:	0003f290 	.word	0x0003f290
    a34c:	0003f2a0 	.word	0x0003f2a0

0000a350 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    a350:	e92d4070 	push	{r4, r5, r6, lr}
    a354:	e2515000 	subs	r5, r1, #0
    a358:	e24dd018 	sub	sp, sp, #24
    a35c:	0a000032 	beq	a42c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xdc>
    a360:	e1a06000 	mov	r6, r0
    a364:	e1a00005 	mov	r0, r5
    a368:	eb000c21 	bl	d3f4 <CDWHCITransferStageData::GetChannelNumber() const>
    a36c:	e596300c 	ldr	r3, [r6, #12]
    a370:	e1500003 	cmp	r0, r3
    a374:	2a000030 	bcs	a43c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xec>
    a378:	e59f10cc 	ldr	r1, [pc, #204]	; a44c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xfc>
    a37c:	e0801001 	add	r1, r0, r1
    a380:	e1a04281 	lsl	r4, r1, #5
    a384:	e1a01004 	mov	r1, r4
    a388:	e1a0000d 	mov	r0, sp
    a38c:	eb000a27 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a390:	e1a0000d 	mov	r0, sp
    a394:	eb000a2e 	bl	cc54 <CDWHCIRegister::Read()>
    a398:	e1a0000d 	mov	r0, sp
    a39c:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a3a0:	eb000a50 	bl	cce8 <CDWHCIRegister::IsSet(unsigned int) const>
    a3a4:	e3500000 	cmp	r0, #0
    a3a8:	1a000006 	bne	a3c8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x78>
    a3ac:	e1a01005 	mov	r1, r5
    a3b0:	e1a00006 	mov	r0, r6
    a3b4:	ebfffeef 	bl	9f78 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    a3b8:	e1a0000d 	mov	r0, sp
    a3bc:	eb000a23 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    a3c0:	e28dd018 	add	sp, sp, #24
    a3c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a3c8:	e1a00005 	mov	r0, r5
    a3cc:	e3a01000 	mov	r1, #0
    a3d0:	eb000c01 	bl	d3dc <CDWHCITransferStageData::SetSubState(unsigned int)>
    a3d4:	e1a0000d 	mov	r0, sp
    a3d8:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    a3dc:	eb000a50 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    a3e0:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    a3e4:	e1a0000d 	mov	r0, sp
    a3e8:	eb000a5b 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    a3ec:	e1a0000d 	mov	r0, sp
    a3f0:	eb000a1e 	bl	cc70 <CDWHCIRegister::Write()>
    a3f4:	e284100c 	add	r1, r4, #12
    a3f8:	e28d000c 	add	r0, sp, #12
    a3fc:	eb000a0b 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a400:	e3a01002 	mov	r1, #2
    a404:	e28d000c 	add	r0, sp, #12
    a408:	eb000a32 	bl	ccd8 <CDWHCIRegister::Set(unsigned int)>
    a40c:	e28d000c 	add	r0, sp, #12
    a410:	eb000a16 	bl	cc70 <CDWHCIRegister::Write()>
    a414:	e28d000c 	add	r0, sp, #12
    a418:	eb000a0c 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    a41c:	e1a0000d 	mov	r0, sp
    a420:	eb000a0a 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    a424:	e28dd018 	add	sp, sp, #24
    a428:	e8bd8070 	pop	{r4, r5, r6, pc}
    a42c:	e59f201c 	ldr	r2, [pc, #28]	; a450 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x100>
    a430:	e59f101c 	ldr	r1, [pc, #28]	; a454 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    a434:	e59f001c 	ldr	r0, [pc, #28]	; a458 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x108>
    a438:	eb0068f4 	bl	24810 <assertion_failed>
    a43c:	e59f2018 	ldr	r2, [pc, #24]	; a45c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x10c>
    a440:	e59f100c 	ldr	r1, [pc, #12]	; a454 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    a444:	e59f0014 	ldr	r0, [pc, #20]	; a460 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x110>
    a448:	eb0068f0 	bl	24810 <assertion_failed>
    a44c:	0104c028 	.word	0x0104c028
    a450:	00000333 	.word	0x00000333
    a454:	0003f220 	.word	0x0003f220
    a458:	0003f290 	.word	0x0003f290
    a45c:	00000335 	.word	0x00000335
    a460:	0003f2a0 	.word	0x0003f2a0

0000a464 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>:
    a464:	e92d4070 	push	{r4, r5, r6, lr}
    a468:	e3a05000 	mov	r5, #0
    a46c:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    a470:	e1510005 	cmp	r1, r5
    a474:	0a00001d 	beq	a4f0 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x8c>
    a478:	e1a06000 	mov	r6, r0
    a47c:	e1a00001 	mov	r0, r1
    a480:	e1a04001 	mov	r4, r1
    a484:	eb000bd2 	bl	d3d4 <CDWHCITransferStageData::GetState() const>
    a488:	e3500003 	cmp	r0, #3
    a48c:	1a00001b 	bne	a500 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x9c>
    a490:	e1a00004 	mov	r0, r4
    a494:	eb000d13 	bl	d8e8 <CDWHCITransferStageData::IsSplit() const>
    a498:	e2501000 	subs	r1, r0, #0
    a49c:	1a000007 	bne	a4c0 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x5c>
    a4a0:	e1a00004 	mov	r0, r4
    a4a4:	eb000bc8 	bl	d3cc <CDWHCITransferStageData::SetState(unsigned int)>
    a4a8:	e1a01004 	mov	r1, r4
    a4ac:	e1a00006 	mov	r0, r6
    a4b0:	ebffffa6 	bl	a350 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a4b4:	e3a03000 	mov	r3, #0
    a4b8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a4bc:	e8bd8070 	pop	{r4, r5, r6, pc}
    a4c0:	e1a00004 	mov	r0, r4
    a4c4:	e3a01001 	mov	r1, #1
    a4c8:	eb000bbf 	bl	d3cc <CDWHCITransferStageData::SetState(unsigned int)>
    a4cc:	e1a01005 	mov	r1, r5
    a4d0:	e1a00004 	mov	r0, r4
    a4d4:	eb000bb0 	bl	d39c <CDWHCITransferStageData::SetSplitComplete(bool)>
    a4d8:	e1a00004 	mov	r0, r4
    a4dc:	eb000d79 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    a4e0:	e5903000 	ldr	r3, [r0]
    a4e4:	e5933008 	ldr	r3, [r3, #8]
    a4e8:	e12fff33 	blx	r3
    a4ec:	eaffffed 	b	a4a8 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x44>
    a4f0:	e59f2018 	ldr	r2, [pc, #24]	; a510 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xac>
    a4f4:	e59f1018 	ldr	r1, [pc, #24]	; a514 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    a4f8:	e59f0018 	ldr	r0, [pc, #24]	; a518 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb4>
    a4fc:	eb0068c3 	bl	24810 <assertion_failed>
    a500:	e59f2014 	ldr	r2, [pc, #20]	; a51c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb8>
    a504:	e59f1008 	ldr	r1, [pc, #8]	; a514 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    a508:	e59f0010 	ldr	r0, [pc, #16]	; a520 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xbc>
    a50c:	eb0068bf 	bl	24810 <assertion_failed>
    a510:	0000053d 	.word	0x0000053d
    a514:	0003f220 	.word	0x0003f220
    a518:	0003f290 	.word	0x0003f290
    a51c:	0000053e 	.word	0x0000053e
    a520:	0003f2b8 	.word	0x0003f2b8

0000a524 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)>:
    a524:	e2520000 	subs	r0, r2, #0
    a528:	e92d4010 	push	{r4, lr}
    a52c:	0a000003 	beq	a540 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x1c>
    a530:	e3510000 	cmp	r1, #0
    a534:	0a000005 	beq	a550 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
    a538:	e8bd4010 	pop	{r4, lr}
    a53c:	eaffffc8 	b	a464 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    a540:	e59f2018 	ldr	r2, [pc, #24]	; a560 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
    a544:	e59f1018 	ldr	r1, [pc, #24]	; a564 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x40>
    a548:	e59f0018 	ldr	r0, [pc, #24]	; a568 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x44>
    a54c:	eb0068af 	bl	24810 <assertion_failed>
    a550:	e59f2014 	ldr	r2, [pc, #20]	; a56c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x48>
    a554:	e59f1008 	ldr	r1, [pc, #8]	; a564 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x40>
    a558:	e59f0010 	ldr	r0, [pc, #16]	; a570 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
    a55c:	eb0068ab 	bl	24810 <assertion_failed>
    a560:	00000554 	.word	0x00000554
    a564:	0003f220 	.word	0x0003f220
    a568:	0003f230 	.word	0x0003f230
    a56c:	00000557 	.word	0x00000557
    a570:	0003f2ec 	.word	0x0003f2ec

0000a574 <CDWHCIDevice::AllocateChannel()>:
    a574:	e92d4010 	push	{r4, lr}
    a578:	e590c014 	ldr	ip, [r0, #20]
    a57c:	e24dd008 	sub	sp, sp, #8
    a580:	e35c0000 	cmp	ip, #0
    a584:	e1a04000 	mov	r4, r0
    a588:	1a000014 	bne	a5e0 <CDWHCIDevice::AllocateChannel()+0x6c>
    a58c:	e590100c 	ldr	r1, [r0, #12]
    a590:	e3510000 	cmp	r1, #0
    a594:	0a00000e 	beq	a5d4 <CDWHCIDevice::AllocateChannel()+0x60>
    a598:	e5903010 	ldr	r3, [r0, #16]
    a59c:	e2130001 	ands	r0, r3, #1
    a5a0:	0a000025 	beq	a63c <CDWHCIDevice::AllocateChannel()+0xc8>
    a5a4:	e3a00000 	mov	r0, #0
    a5a8:	e3a03001 	mov	r3, #1
    a5ac:	ea000002 	b	a5bc <CDWHCIDevice::AllocateChannel()+0x48>
    a5b0:	e5942010 	ldr	r2, [r4, #16]
    a5b4:	e1120003 	tst	r2, r3
    a5b8:	0a000013 	beq	a60c <CDWHCIDevice::AllocateChannel()+0x98>
    a5bc:	e2800001 	add	r0, r0, #1
    a5c0:	e1500001 	cmp	r0, r1
    a5c4:	e1a03083 	lsl	r3, r3, #1
    a5c8:	3afffff8 	bcc	a5b0 <CDWHCIDevice::AllocateChannel()+0x3c>
    a5cc:	e35c0000 	cmp	ip, #0
    a5d0:	1a000017 	bne	a634 <CDWHCIDevice::AllocateChannel()+0xc0>
    a5d4:	e3a00010 	mov	r0, #16
    a5d8:	e28dd008 	add	sp, sp, #8
    a5dc:	e8bd8010 	pop	{r4, pc}
    a5e0:	e1a0000c 	mov	r0, ip
    a5e4:	eb0085d8 	bl	2bd4c <EnterCritical>
    a5e8:	e594100c 	ldr	r1, [r4, #12]
    a5ec:	e3510000 	cmp	r1, #0
    a5f0:	0594c014 	ldreq	ip, [r4, #20]
    a5f4:	0afffff4 	beq	a5cc <CDWHCIDevice::AllocateChannel()+0x58>
    a5f8:	e5943010 	ldr	r3, [r4, #16]
    a5fc:	e594c014 	ldr	ip, [r4, #20]
    a600:	e2130001 	ands	r0, r3, #1
    a604:	1affffe6 	bne	a5a4 <CDWHCIDevice::AllocateChannel()+0x30>
    a608:	e3a03001 	mov	r3, #1
    a60c:	e5942010 	ldr	r2, [r4, #16]
    a610:	e35c0000 	cmp	ip, #0
    a614:	e1823003 	orr	r3, r2, r3
    a618:	e5843010 	str	r3, [r4, #16]
    a61c:	0affffed 	beq	a5d8 <CDWHCIDevice::AllocateChannel()+0x64>
    a620:	e58d0004 	str	r0, [sp, #4]
    a624:	eb0085f3 	bl	2bdf8 <LeaveCritical>
    a628:	e59d0004 	ldr	r0, [sp, #4]
    a62c:	e28dd008 	add	sp, sp, #8
    a630:	e8bd8010 	pop	{r4, pc}
    a634:	eb0085ef 	bl	2bdf8 <LeaveCritical>
    a638:	eaffffe5 	b	a5d4 <CDWHCIDevice::AllocateChannel()+0x60>
    a63c:	e5943010 	ldr	r3, [r4, #16]
    a640:	e3833001 	orr	r3, r3, #1
    a644:	e5843010 	str	r3, [r4, #16]
    a648:	eaffffe2 	b	a5d8 <CDWHCIDevice::AllocateChannel()+0x64>

0000a64c <CDWHCIDevice::FreeChannel(unsigned int)>:
    a64c:	e590300c 	ldr	r3, [r0, #12]
    a650:	e92d4070 	push	{r4, r5, r6, lr}
    a654:	e1530001 	cmp	r3, r1
    a658:	9a000012 	bls	a6a8 <CDWHCIDevice::FreeChannel(unsigned int)+0x5c>
    a65c:	e3a05001 	mov	r5, #1
    a660:	e1a04000 	mov	r4, r0
    a664:	e5900014 	ldr	r0, [r0, #20]
    a668:	e1a05115 	lsl	r5, r5, r1
    a66c:	e3500000 	cmp	r0, #0
    a670:	1a00000a 	bne	a6a0 <CDWHCIDevice::FreeChannel(unsigned int)+0x54>
    a674:	e5943010 	ldr	r3, [r4, #16]
    a678:	e1150003 	tst	r5, r3
    a67c:	0a00000d 	beq	a6b8 <CDWHCIDevice::FreeChannel(unsigned int)+0x6c>
    a680:	e5941010 	ldr	r1, [r4, #16]
    a684:	e5943014 	ldr	r3, [r4, #20]
    a688:	e1c15005 	bic	r5, r1, r5
    a68c:	e3530000 	cmp	r3, #0
    a690:	e5845010 	str	r5, [r4, #16]
    a694:	08bd8070 	popeq	{r4, r5, r6, pc}
    a698:	e8bd4070 	pop	{r4, r5, r6, lr}
    a69c:	ea0085d5 	b	2bdf8 <LeaveCritical>
    a6a0:	eb0085a9 	bl	2bd4c <EnterCritical>
    a6a4:	eafffff2 	b	a674 <CDWHCIDevice::FreeChannel(unsigned int)+0x28>
    a6a8:	e59f2018 	ldr	r2, [pc, #24]	; a6c8 <CDWHCIDevice::FreeChannel(unsigned int)+0x7c>
    a6ac:	e59f1018 	ldr	r1, [pc, #24]	; a6cc <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    a6b0:	e59f0018 	ldr	r0, [pc, #24]	; a6d0 <CDWHCIDevice::FreeChannel(unsigned int)+0x84>
    a6b4:	eb006855 	bl	24810 <assertion_failed>
    a6b8:	e59f2014 	ldr	r2, [pc, #20]	; a6d4 <CDWHCIDevice::FreeChannel(unsigned int)+0x88>
    a6bc:	e59f1008 	ldr	r1, [pc, #8]	; a6cc <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    a6c0:	e59f0010 	ldr	r0, [pc, #16]	; a6d8 <CDWHCIDevice::FreeChannel(unsigned int)+0x8c>
    a6c4:	eb006851 	bl	24810 <assertion_failed>
    a6c8:	00000578 	.word	0x00000578
    a6cc:	0003f220 	.word	0x0003f220
    a6d0:	0003f2a0 	.word	0x0003f2a0
    a6d4:	0000057d 	.word	0x0000057d
    a6d8:	0003f2f8 	.word	0x0003f2f8

0000a6dc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    a6dc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a6e0:	e2516000 	subs	r6, r1, #0
    a6e4:	e24dd00c 	sub	sp, sp, #12
    a6e8:	0a00003a 	beq	a7d8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xfc>
    a6ec:	e1a05000 	mov	r5, r0
    a6f0:	e1a09003 	mov	r9, r3
    a6f4:	e1a08002 	mov	r8, r2
    a6f8:	ebffff9d 	bl	a574 <CDWHCIDevice::AllocateChannel()>
    a6fc:	e595300c 	ldr	r3, [r5, #12]
    a700:	e1a04000 	mov	r4, r0
    a704:	e1500003 	cmp	r0, r3
    a708:	23a06000 	movcs	r6, #0
    a70c:	3a000002 	bcc	a71c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x40>
    a710:	e1a00006 	mov	r0, r6
    a714:	e28dd00c 	add	sp, sp, #12
    a718:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a71c:	e3a00054 	mov	r0, #84	; 0x54
    a720:	eb000cea 	bl	dad0 <CDWHCITransferStageData::operator new(unsigned int)>
    a724:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    a728:	e58d9000 	str	r9, [sp]
    a72c:	e58d3004 	str	r3, [sp, #4]
    a730:	e1a02006 	mov	r2, r6
    a734:	e1a03008 	mov	r3, r8
    a738:	e1a01004 	mov	r1, r4
    a73c:	e0858104 	add	r8, r5, r4, lsl #2
    a740:	e1a07000 	mov	r7, r0
    a744:	eb000b3d 	bl	d440 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    a748:	e5989018 	ldr	r9, [r8, #24]
    a74c:	e3590000 	cmp	r9, #0
    a750:	1a000030 	bne	a818 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x13c>
    a754:	e1a01004 	mov	r1, r4
    a758:	e1a00005 	mov	r0, r5
    a75c:	e5887018 	str	r7, [r8, #24]
    a760:	ebfffdca 	bl	9e90 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    a764:	e1a00007 	mov	r0, r7
    a768:	eb000c5e 	bl	d8e8 <CDWHCITransferStageData::IsSplit() const>
    a76c:	e2501000 	subs	r1, r0, #0
    a770:	e1a00007 	mov	r0, r7
    a774:	1a000007 	bne	a798 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xbc>
    a778:	eb000b13 	bl	d3cc <CDWHCITransferStageData::SetState(unsigned int)>
    a77c:	e3a06001 	mov	r6, #1
    a780:	e1a00005 	mov	r0, r5
    a784:	e1a01007 	mov	r1, r7
    a788:	ebfffef0 	bl	a350 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a78c:	e1a00006 	mov	r0, r6
    a790:	e28dd00c 	add	sp, sp, #12
    a794:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a798:	eb000b13 	bl	d3ec <CDWHCITransferStageData::BeginSplitCycle()>
    a79c:	e2506000 	subs	r6, r0, #0
    a7a0:	1a000010 	bne	a7e8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    a7a4:	e1a01004 	mov	r1, r4
    a7a8:	e1a00005 	mov	r0, r5
    a7ac:	ebfffdd4 	bl	9f04 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a7b0:	e1a00007 	mov	r0, r7
    a7b4:	eb000a7e 	bl	d1b4 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    a7b8:	e1a00007 	mov	r0, r7
    a7bc:	e3a01054 	mov	r1, #84	; 0x54
    a7c0:	eb000cd8 	bl	db28 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    a7c4:	e5886018 	str	r6, [r8, #24]
    a7c8:	e1a01004 	mov	r1, r4
    a7cc:	e1a00005 	mov	r0, r5
    a7d0:	ebffff9d 	bl	a64c <CDWHCIDevice::FreeChannel(unsigned int)>
    a7d4:	eaffffcd 	b	a710 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x34>
    a7d8:	e59f2048 	ldr	r2, [pc, #72]	; a828 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x14c>
    a7dc:	e59f1048 	ldr	r1, [pc, #72]	; a82c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x150>
    a7e0:	e59f0048 	ldr	r0, [pc, #72]	; a830 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x154>
    a7e4:	eb006809 	bl	24810 <assertion_failed>
    a7e8:	e1a00007 	mov	r0, r7
    a7ec:	e3a01001 	mov	r1, #1
    a7f0:	eb000af5 	bl	d3cc <CDWHCITransferStageData::SetState(unsigned int)>
    a7f4:	e1a01009 	mov	r1, r9
    a7f8:	e1a00007 	mov	r0, r7
    a7fc:	eb000ae6 	bl	d39c <CDWHCITransferStageData::SetSplitComplete(bool)>
    a800:	e1a00007 	mov	r0, r7
    a804:	eb000caf 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    a808:	e5903000 	ldr	r3, [r0]
    a80c:	e5933008 	ldr	r3, [r3, #8]
    a810:	e12fff33 	blx	r3
    a814:	eaffffd8 	b	a77c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xa0>
    a818:	e59f2014 	ldr	r2, [pc, #20]	; a834 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x158>
    a81c:	e59f1008 	ldr	r1, [pc, #8]	; a82c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x150>
    a820:	e59f0010 	ldr	r0, [pc, #16]	; a838 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x15c>
    a824:	eb0067f9 	bl	24810 <assertion_failed>
    a828:	000002b6 	.word	0x000002b6
    a82c:	0003f220 	.word	0x0003f220
    a830:	0003f31c 	.word	0x0003f31c
    a834:	000002c7 	.word	0x000002c7
    a838:	0003f328 	.word	0x0003f328

0000a83c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    a83c:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    a840:	e21330ff 	ands	r3, r3, #255	; 0xff
    a844:	1a000020 	bne	a8cc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x90>
    a848:	e92d4070 	push	{r4, r5, r6, lr}
    a84c:	e1a06002 	mov	r6, r2
    a850:	e24dd008 	sub	sp, sp, #8
    a854:	e1a04001 	mov	r4, r1
    a858:	e1a05000 	mov	r5, r0
    a85c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a860:	e3510000 	cmp	r1, #0
    a864:	0a000027 	beq	a908 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xcc>
    a868:	e1a00001 	mov	r0, r1
    a86c:	eb002719 	bl	144d8 <CUSBRequest::GetEndpoint() const>
    a870:	eb0012c3 	bl	f384 <CUSBEndpoint::GetType() const>
    a874:	e3500001 	cmp	r0, #1
    a878:	1a000015 	bne	a8d4 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x98>
    a87c:	e1a00004 	mov	r0, r4
    a880:	eb002754 	bl	145d8 <CUSBRequest::GetBufLen() const>
    a884:	e3500000 	cmp	r0, #0
    a888:	0a00001a 	beq	a8f8 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xbc>
    a88c:	e3a01000 	mov	r1, #0
    a890:	e1a00004 	mov	r0, r4
    a894:	eb00271a 	bl	14504 <CUSBRequest::SetStatus(int)>
    a898:	e1a00004 	mov	r0, r4
    a89c:	eb00270d 	bl	144d8 <CUSBRequest::GetEndpoint() const>
    a8a0:	eb0012b9 	bl	f38c <CUSBEndpoint::IsDirectionIn() const>
    a8a4:	e58d6000 	str	r6, [sp]
    a8a8:	e1a02000 	mov	r2, r0
    a8ac:	e1a01004 	mov	r1, r4
    a8b0:	e1a00005 	mov	r0, r5
    a8b4:	e3a03000 	mov	r3, #0
    a8b8:	ebffff87 	bl	a6dc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    a8bc:	e3a03000 	mov	r3, #0
    a8c0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a8c4:	e28dd008 	add	sp, sp, #8
    a8c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    a8cc:	e3a00000 	mov	r0, #0
    a8d0:	e12fff1e 	bx	lr
    a8d4:	e1a00004 	mov	r0, r4
    a8d8:	eb0026fe 	bl	144d8 <CUSBRequest::GetEndpoint() const>
    a8dc:	eb0012a8 	bl	f384 <CUSBEndpoint::GetType() const>
    a8e0:	e3500002 	cmp	r0, #2
    a8e4:	0affffe4 	beq	a87c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x40>
    a8e8:	e59f2028 	ldr	r2, [pc, #40]	; a918 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    a8ec:	e59f1028 	ldr	r1, [pc, #40]	; a91c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    a8f0:	e59f0028 	ldr	r0, [pc, #40]	; a920 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe4>
    a8f4:	eb0067c5 	bl	24810 <assertion_failed>
    a8f8:	e59f2024 	ldr	r2, [pc, #36]	; a924 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe8>
    a8fc:	e59f1018 	ldr	r1, [pc, #24]	; a91c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    a900:	e59f0020 	ldr	r0, [pc, #32]	; a928 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xec>
    a904:	eb0067c1 	bl	24810 <assertion_failed>
    a908:	e3a02f45 	mov	r2, #276	; 0x114
    a90c:	e59f1008 	ldr	r1, [pc, #8]	; a91c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    a910:	e59f0014 	ldr	r0, [pc, #20]	; a92c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xf0>
    a914:	eb0067bd 	bl	24810 <assertion_failed>
    a918:	00000116 	.word	0x00000116
    a91c:	0003f220 	.word	0x0003f220
    a920:	0003f344 	.word	0x0003f344
    a924:	00000117 	.word	0x00000117
    a928:	0003f3b8 	.word	0x0003f3b8
    a92c:	0003f31c 	.word	0x0003f31c

0000a930 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>:
    a930:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a934:	e0807101 	add	r7, r0, r1, lsl #2
    a938:	e5974018 	ldr	r4, [r7, #24]
    a93c:	e24dd020 	sub	sp, sp, #32
    a940:	e3540000 	cmp	r4, #0
    a944:	0a00008d 	beq	ab80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x250>
    a948:	e1a05000 	mov	r5, r0
    a94c:	e1a00004 	mov	r0, r4
    a950:	e1a06001 	mov	r6, r1
    a954:	eb000c50 	bl	da9c <CDWHCITransferStageData::GetURB() const>
    a958:	e2509000 	subs	r9, r0, #0
    a95c:	0a00008b 	beq	ab90 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x260>
    a960:	e1a00004 	mov	r0, r4
    a964:	eb000a9e 	bl	d3e4 <CDWHCITransferStageData::GetSubState() const>
    a968:	e3500000 	cmp	r0, #0
    a96c:	0a00004a 	beq	aa9c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x16c>
    a970:	e3500001 	cmp	r0, #1
    a974:	1a000044 	bne	aa8c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x15c>
    a978:	e1a00004 	mov	r0, r4
    a97c:	eb000bc9 	bl	d8a8 <CDWHCITransferStageData::GetDMAAddress() const>
    a980:	e1a08000 	mov	r8, r0
    a984:	e1a00004 	mov	r0, r4
    a988:	eb000bd2 	bl	d8d8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a98c:	e1a01000 	mov	r1, r0
    a990:	e1a00008 	mov	r0, r8
    a994:	eb00852d 	bl	2be50 <CleanAndInvalidateDataCacheRange>
    a998:	e59f148c 	ldr	r1, [pc, #1164]	; ae2c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4fc>
    a99c:	e1a08286 	lsl	r8, r6, #5
    a9a0:	e0881001 	add	r1, r8, r1
    a9a4:	e28d0008 	add	r0, sp, #8
    a9a8:	eb0008a0 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a9ac:	e28d0008 	add	r0, sp, #8
    a9b0:	eb0008a7 	bl	cc54 <CDWHCIRegister::Read()>
    a9b4:	e59f1474 	ldr	r1, [pc, #1140]	; ae30 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x500>
    a9b8:	e28d0014 	add	r0, sp, #20
    a9bc:	e0881001 	add	r1, r8, r1
    a9c0:	eb00089a 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a9c4:	e28d0014 	add	r0, sp, #20
    a9c8:	eb0008a1 	bl	cc54 <CDWHCIRegister::Read()>
    a9cc:	e3500002 	cmp	r0, #2
    a9d0:	0a000072 	beq	aba0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x270>
    a9d4:	e1a00004 	mov	r0, r4
    a9d8:	eb000a87 	bl	d3fc <CDWHCITransferStageData::IsPeriodic() const>
    a9dc:	e3500000 	cmp	r0, #0
    a9e0:	1a0000aa 	bne	ac90 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x360>
    a9e4:	e28d0014 	add	r0, sp, #20
    a9e8:	eb000899 	bl	cc54 <CDWHCIRegister::Read()>
    a9ec:	e1a0a000 	mov	sl, r0
    a9f0:	e28d0008 	add	r0, sp, #8
    a9f4:	eb0008ab 	bl	cca8 <CDWHCIRegister::Get() const>
    a9f8:	e1a08000 	mov	r8, r0
    a9fc:	e28d0008 	add	r0, sp, #8
    aa00:	eb0008a8 	bl	cca8 <CDWHCIRegister::Get() const>
    aa04:	e59f2428 	ldr	r2, [pc, #1064]	; ae34 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x504>
    aa08:	e3c034ff 	bic	r3, r0, #-16777216	; 0xff000000
    aa0c:	e00229a8 	and	r2, r2, r8, lsr #19
    aa10:	e3c3373e 	bic	r3, r3, #16252928	; 0xf80000
    aa14:	e1a0100a 	mov	r1, sl
    aa18:	e1a00004 	mov	r0, r4
    aa1c:	eb0009f7 	bl	d200 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    aa20:	e28d0014 	add	r0, sp, #20
    aa24:	eb000889 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    aa28:	e28d0008 	add	r0, sp, #8
    aa2c:	eb000887 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    aa30:	e1a00004 	mov	r0, r4
    aa34:	eb000a66 	bl	d3d4 <CDWHCITransferStageData::GetState() const>
    aa38:	e3500001 	cmp	r0, #1
    aa3c:	e1a08000 	mov	r8, r0
    aa40:	0a00001a 	beq	aab0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x180>
    aa44:	3a000061 	bcc	abd0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2a0>
    aa48:	e3500002 	cmp	r0, #2
    aa4c:	1a00005b 	bne	abc0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x290>
    aa50:	e1a00004 	mov	r0, r4
    aa54:	eb000beb 	bl	da08 <CDWHCITransferStageData::GetTransactionStatus() const>
    aa58:	e59f33d8 	ldr	r3, [pc, #984]	; ae38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x508>
    aa5c:	e1a08000 	mov	r8, r0
    aa60:	e0033000 	and	r3, r3, r0
    aa64:	e3530000 	cmp	r3, #0
    aa68:	0a000081 	beq	ac74 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x344>
    aa6c:	eb00705a 	bl	26bdc <CLogger::Get()>
    aa70:	e59f13c4 	ldr	r1, [pc, #964]	; ae3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x50c>
    aa74:	e58d8000 	str	r8, [sp]
    aa78:	e59f33c0 	ldr	r3, [pc, #960]	; ae40 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x510>
    aa7c:	e3a02001 	mov	r2, #1
    aa80:	eb006f92 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    aa84:	e3a01000 	mov	r1, #0
    aa88:	ea00005e 	b	ac08 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2d8>
    aa8c:	e59f23b0 	ldr	r2, [pc, #944]	; ae44 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x514>
    aa90:	e59f13b0 	ldr	r1, [pc, #944]	; ae48 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    aa94:	e59f03b0 	ldr	r0, [pc, #944]	; ae4c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x51c>
    aa98:	eb00675c 	bl	24810 <assertion_failed>
    aa9c:	e1a01004 	mov	r1, r4
    aaa0:	e1a00005 	mov	r0, r5
    aaa4:	ebfffd33 	bl	9f78 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    aaa8:	e28dd020 	add	sp, sp, #32
    aaac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    aab0:	e1a00004 	mov	r0, r4
    aab4:	eb000bd3 	bl	da08 <CDWHCITransferStageData::GetTransactionStatus() const>
    aab8:	e59f3390 	ldr	r3, [pc, #912]	; ae50 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x520>
    aabc:	e1a0a000 	mov	sl, r0
    aac0:	e0033000 	and	r3, r3, r0
    aac4:	e3530000 	cmp	r3, #0
    aac8:	1a000061 	bne	ac54 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x324>
    aacc:	e1a00004 	mov	r0, r4
    aad0:	eb000bfc 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    aad4:	e5903000 	ldr	r3, [r0]
    aad8:	e1a0100a 	mov	r1, sl
    aadc:	e5933010 	ldr	r3, [r3, #16]
    aae0:	e12fff33 	blx	r3
    aae4:	e3a01002 	mov	r1, #2
    aae8:	e1a00004 	mov	r0, r4
    aaec:	eb000a36 	bl	d3cc <CDWHCITransferStageData::SetState(unsigned int)>
    aaf0:	e1a01008 	mov	r1, r8
    aaf4:	e1a00004 	mov	r0, r4
    aaf8:	eb000a27 	bl	d39c <CDWHCITransferStageData::SetSplitComplete(bool)>
    aafc:	e1a00004 	mov	r0, r4
    ab00:	eb000bf0 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    ab04:	e5903000 	ldr	r3, [r0]
    ab08:	e593300c 	ldr	r3, [r3, #12]
    ab0c:	e12fff33 	blx	r3
    ab10:	e3500000 	cmp	r0, #0
    ab14:	1a000086 	bne	ad34 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x404>
    ab18:	e1a00004 	mov	r0, r4
    ab1c:	eb000bc5 	bl	da38 <CDWHCITransferStageData::IsStageComplete() const>
    ab20:	e2508000 	subs	r8, r0, #0
    ab24:	1a00006c 	bne	acdc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3ac>
    ab28:	e1a00004 	mov	r0, r4
    ab2c:	eb000a2e 	bl	d3ec <CDWHCITransferStageData::BeginSplitCycle()>
    ab30:	e250a000 	subs	sl, r0, #0
    ab34:	1a00009b 	bne	ada8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x478>
    ab38:	e1a0100a 	mov	r1, sl
    ab3c:	e1a00009 	mov	r0, r9
    ab40:	eb00266f 	bl	14504 <CUSBRequest::SetStatus(int)>
    ab44:	e1a01006 	mov	r1, r6
    ab48:	e1a00005 	mov	r0, r5
    ab4c:	ebfffcec 	bl	9f04 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ab50:	e1a00004 	mov	r0, r4
    ab54:	eb000996 	bl	d1b4 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    ab58:	e1a00004 	mov	r0, r4
    ab5c:	e3a01054 	mov	r1, #84	; 0x54
    ab60:	eb000bf0 	bl	db28 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    ab64:	e587a018 	str	sl, [r7, #24]
    ab68:	e1a00005 	mov	r0, r5
    ab6c:	e1a01006 	mov	r1, r6
    ab70:	ebfffeb5 	bl	a64c <CDWHCIDevice::FreeChannel(unsigned int)>
    ab74:	e1a00009 	mov	r0, r9
    ab78:	eb0026a5 	bl	14614 <CUSBRequest::CallCompletionRoutine()>
    ab7c:	eaffffc9 	b	aaa8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    ab80:	e59f22cc 	ldr	r2, [pc, #716]	; ae54 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x524>
    ab84:	e59f12bc 	ldr	r1, [pc, #700]	; ae48 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    ab88:	e59f02c8 	ldr	r0, [pc, #712]	; ae58 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x528>
    ab8c:	eb00671f 	bl	24810 <assertion_failed>
    ab90:	e59f22c4 	ldr	r2, [pc, #708]	; ae5c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x52c>
    ab94:	e59f12ac 	ldr	r1, [pc, #684]	; ae48 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    ab98:	e59f02c0 	ldr	r0, [pc, #704]	; ae60 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x530>
    ab9c:	eb00671b 	bl	24810 <assertion_failed>
    aba0:	e1a01004 	mov	r1, r4
    aba4:	e1a00005 	mov	r0, r5
    aba8:	ebfffde8 	bl	a350 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    abac:	e28d0014 	add	r0, sp, #20
    abb0:	eb000826 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    abb4:	e28d0008 	add	r0, sp, #8
    abb8:	eb000824 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    abbc:	eaffffb9 	b	aaa8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    abc0:	e59f229c 	ldr	r2, [pc, #668]	; ae64 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x534>
    abc4:	e59f127c 	ldr	r1, [pc, #636]	; ae48 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    abc8:	e59f027c 	ldr	r0, [pc, #636]	; ae4c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x51c>
    abcc:	eb00670f 	bl	24810 <assertion_failed>
    abd0:	e1a00004 	mov	r0, r4
    abd4:	eb000b8b 	bl	da08 <CDWHCITransferStageData::GetTransactionStatus() const>
    abd8:	e59f8258 	ldr	r8, [pc, #600]	; ae38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x508>
    abdc:	e1a0a000 	mov	sl, r0
    abe0:	e0088000 	and	r8, r8, r0
    abe4:	e3580000 	cmp	r8, #0
    abe8:	1a000031 	bne	acb4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x384>
    abec:	e3100050 	tst	r0, #80	; 0x50
    abf0:	1a000053 	bne	ad44 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x414>
    abf4:	e1a00004 	mov	r0, r4
    abf8:	eb000b28 	bl	d8a0 <CDWHCITransferStageData::IsStatusStage() const>
    abfc:	e3500000 	cmp	r0, #0
    ac00:	0a000083 	beq	ae14 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4e4>
    ac04:	e3a01001 	mov	r1, #1
    ac08:	e1a00009 	mov	r0, r9
    ac0c:	eb00263c 	bl	14504 <CUSBRequest::SetStatus(int)>
    ac10:	e1a01006 	mov	r1, r6
    ac14:	e1a00005 	mov	r0, r5
    ac18:	ebfffcb9 	bl	9f04 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ac1c:	e1a00004 	mov	r0, r4
    ac20:	eb000963 	bl	d1b4 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    ac24:	e1a00004 	mov	r0, r4
    ac28:	e3a01054 	mov	r1, #84	; 0x54
    ac2c:	eb000bbd 	bl	db28 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    ac30:	e3a03000 	mov	r3, #0
    ac34:	e1a01006 	mov	r1, r6
    ac38:	e1a00005 	mov	r0, r5
    ac3c:	e5873018 	str	r3, [r7, #24]
    ac40:	ebfffe81 	bl	a64c <CDWHCIDevice::FreeChannel(unsigned int)>
    ac44:	e1a00009 	mov	r0, r9
    ac48:	eb002671 	bl	14614 <CUSBRequest::CallCompletionRoutine()>
    ac4c:	e28dd020 	add	sp, sp, #32
    ac50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ac54:	eb006fe0 	bl	26bdc <CLogger::Get()>
    ac58:	e59f11dc 	ldr	r1, [pc, #476]	; ae3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x50c>
    ac5c:	e58da000 	str	sl, [sp]
    ac60:	e1a02008 	mov	r2, r8
    ac64:	e59f31d4 	ldr	r3, [pc, #468]	; ae40 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x510>
    ac68:	eb006f18 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ac6c:	e3a01000 	mov	r1, #0
    ac70:	eaffffe4 	b	ac08 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2d8>
    ac74:	e1a00004 	mov	r0, r4
    ac78:	eb000b92 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    ac7c:	e5903000 	ldr	r3, [r0]
    ac80:	e1a01008 	mov	r1, r8
    ac84:	e5933010 	ldr	r3, [r3, #16]
    ac88:	e12fff33 	blx	r3
    ac8c:	eaffff9a 	b	aafc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x1cc>
    ac90:	e28d0008 	add	r0, sp, #8
    ac94:	eb000803 	bl	cca8 <CDWHCIRegister::Get() const>
    ac98:	e2200206 	eor	r0, r0, #1610612736	; 0x60000000
    ac9c:	e3100206 	tst	r0, #1610612736	; 0x60000000
    aca0:	1affff4f 	bne	a9e4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0xb4>
    aca4:	e59f21bc 	ldr	r2, [pc, #444]	; ae68 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x538>
    aca8:	e59f1198 	ldr	r1, [pc, #408]	; ae48 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    acac:	e59f01b8 	ldr	r0, [pc, #440]	; ae6c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x53c>
    acb0:	eb0066d6 	bl	24810 <assertion_failed>
    acb4:	eb006fc8 	bl	26bdc <CLogger::Get()>
    acb8:	e58da000 	str	sl, [sp]
    acbc:	e59f317c 	ldr	r3, [pc, #380]	; ae40 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x510>
    acc0:	e3a02001 	mov	r2, #1
    acc4:	e59f1170 	ldr	r1, [pc, #368]	; ae3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x50c>
    acc8:	eb006f00 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    accc:	e3a01000 	mov	r1, #0
    acd0:	e1a00009 	mov	r0, r9
    acd4:	eb00260a 	bl	14504 <CUSBRequest::SetStatus(int)>
    acd8:	eaffffcc 	b	ac10 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2e0>
    acdc:	e1a01006 	mov	r1, r6
    ace0:	e1a00005 	mov	r0, r5
    ace4:	ebfffc86 	bl	9f04 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ace8:	e1a00004 	mov	r0, r4
    acec:	eb000aeb 	bl	d8a0 <CDWHCITransferStageData::IsStatusStage() const>
    acf0:	e3500000 	cmp	r0, #0
    acf4:	0a000040 	beq	adfc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4cc>
    acf8:	e3a01001 	mov	r1, #1
    acfc:	e1a00009 	mov	r0, r9
    ad00:	eb0025ff 	bl	14504 <CUSBRequest::SetStatus(int)>
    ad04:	eaffffc4 	b	ac1c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2ec>
    ad08:	e3a01001 	mov	r1, #1
    ad0c:	e1a00004 	mov	r0, r4
    ad10:	eb0009ad 	bl	d3cc <CDWHCITransferStageData::SetState(unsigned int)>
    ad14:	e1a0100a 	mov	r1, sl
    ad18:	e1a00004 	mov	r0, r4
    ad1c:	eb00099e 	bl	d39c <CDWHCITransferStageData::SetSplitComplete(bool)>
    ad20:	e1a00004 	mov	r0, r4
    ad24:	eb000b67 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    ad28:	e5903000 	ldr	r3, [r0]
    ad2c:	e5933008 	ldr	r3, [r3, #8]
    ad30:	e12fff33 	blx	r3
    ad34:	e1a01004 	mov	r1, r4
    ad38:	e1a00005 	mov	r0, r5
    ad3c:	ebfffd83 	bl	a350 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    ad40:	eaffff58 	b	aaa8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    ad44:	e1a00004 	mov	r0, r4
    ad48:	eb0009ab 	bl	d3fc <CDWHCITransferStageData::IsPeriodic() const>
    ad4c:	e3500000 	cmp	r0, #0
    ad50:	0affffa7 	beq	abf4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2c4>
    ad54:	e1a00004 	mov	r0, r4
    ad58:	eb000b3f 	bl	da5c <CDWHCITransferStageData::IsTimeout() const>
    ad5c:	e3500000 	cmp	r0, #0
    ad60:	1affffd9 	bne	accc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x39c>
    ad64:	e3a01003 	mov	r1, #3
    ad68:	e1a00004 	mov	r0, r4
    ad6c:	eb000996 	bl	d3cc <CDWHCITransferStageData::SetState(unsigned int)>
    ad70:	e1a00009 	mov	r0, r9
    ad74:	eb0025d7 	bl	144d8 <CUSBRequest::GetEndpoint() const>
    ad78:	eb00118a 	bl	f3a8 <CUSBEndpoint::GetInterval() const>
    ad7c:	e3a03064 	mov	r3, #100	; 0x64
    ad80:	e0030093 	mul	r3, r3, r0
    ad84:	e59f10e4 	ldr	r1, [pc, #228]	; ae70 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x540>
    ad88:	e5950008 	ldr	r0, [r5, #8]
    ad8c:	e0813391 	umull	r3, r1, r1, r3
    ad90:	e58d5000 	str	r5, [sp]
    ad94:	e1a03004 	mov	r3, r4
    ad98:	e1a01321 	lsr	r1, r1, #6
    ad9c:	e59f20d0 	ldr	r2, [pc, #208]	; ae74 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x544>
    ada0:	eb007a9a 	bl	29810 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    ada4:	eaffff3f 	b	aaa8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    ada8:	e1a00004 	mov	r0, r4
    adac:	eb000992 	bl	d3fc <CDWHCITransferStageData::IsPeriodic() const>
    adb0:	e250a000 	subs	sl, r0, #0
    adb4:	0affffd3 	beq	ad08 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3d8>
    adb8:	e1a00004 	mov	r0, r4
    adbc:	eb000b26 	bl	da5c <CDWHCITransferStageData::IsTimeout() const>
    adc0:	e3500000 	cmp	r0, #0
    adc4:	0affffe6 	beq	ad64 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x434>
    adc8:	e1a01006 	mov	r1, r6
    adcc:	e1a00005 	mov	r0, r5
    add0:	ebfffc4b 	bl	9f04 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    add4:	e1a01008 	mov	r1, r8
    add8:	e1a00009 	mov	r0, r9
    addc:	eb0025c8 	bl	14504 <CUSBRequest::SetStatus(int)>
    ade0:	e1a00004 	mov	r0, r4
    ade4:	eb0008f2 	bl	d1b4 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    ade8:	e1a00004 	mov	r0, r4
    adec:	e3a01054 	mov	r1, #84	; 0x54
    adf0:	eb000b4c 	bl	db28 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    adf4:	e5878018 	str	r8, [r7, #24]
    adf8:	eaffff5a 	b	ab68 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x238>
    adfc:	e1a00004 	mov	r0, r4
    ae00:	eb000b10 	bl	da48 <CDWHCITransferStageData::GetResultLen() const>
    ae04:	e1a01000 	mov	r1, r0
    ae08:	e1a00009 	mov	r0, r9
    ae0c:	eb0025be 	bl	1450c <CUSBRequest::SetResultLen(unsigned int)>
    ae10:	eaffffb8 	b	acf8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3c8>
    ae14:	e1a00004 	mov	r0, r4
    ae18:	eb000b0a 	bl	da48 <CDWHCITransferStageData::GetResultLen() const>
    ae1c:	e1a01000 	mov	r1, r0
    ae20:	e1a00009 	mov	r0, r9
    ae24:	eb0025b8 	bl	1450c <CUSBRequest::SetResultLen(unsigned int)>
    ae28:	eaffff75 	b	ac04 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2d4>
    ae2c:	20980510 	.word	0x20980510
    ae30:	20980508 	.word	0x20980508
    ae34:	000003ff 	.word	0x000003ff
    ae38:	0000078c 	.word	0x0000078c
    ae3c:	0003f1fc 	.word	0x0003f1fc
    ae40:	0003f448 	.word	0x0003f448
    ae44:	000003eb 	.word	0x000003eb
    ae48:	0003f220 	.word	0x0003f220
    ae4c:	0003fe24 	.word	0x0003fe24
    ae50:	000007dc 	.word	0x000007dc
    ae54:	000003c1 	.word	0x000003c1
    ae58:	0003f290 	.word	0x0003f290
    ae5c:	000003c3 	.word	0x000003c3
    ae60:	0003f31c 	.word	0x0003f31c
    ae64:	000004cc 	.word	0x000004cc
    ae68:	000003e3 	.word	0x000003e3
    ae6c:	0003f3d0 	.word	0x0003f3d0
    ae70:	10624dd3 	.word	0x10624dd3
    ae74:	0000a524 	.word	0x0000a524

0000ae78 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    ae78:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    ae7c:	e3530000 	cmp	r3, #0
    ae80:	112fff1e 	bxne	lr
    ae84:	eafffea9 	b	a930 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>

0000ae88 <CDWHCIDevice::InterruptHandler()>:
    ae88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ae8c:	e1a07000 	mov	r7, r0
    ae90:	e24dd028 	sub	sp, sp, #40	; 0x28
    ae94:	e3a04000 	mov	r4, #0
    ae98:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    ae9c:	e59f10e8 	ldr	r1, [pc, #232]	; af8c <CDWHCIDevice::InterruptHandler()+0x104>
    aea0:	e28d0004 	add	r0, sp, #4
    aea4:	eb000761 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aea8:	e28d0004 	add	r0, sp, #4
    aeac:	eb000768 	bl	cc54 <CDWHCIRegister::Read()>
    aeb0:	e28d0004 	add	r0, sp, #4
    aeb4:	eb00077b 	bl	cca8 <CDWHCIRegister::Get() const>
    aeb8:	e3100402 	tst	r0, #33554432	; 0x2000000
    aebc:	1a000007 	bne	aee0 <CDWHCIDevice::InterruptHandler()+0x58>
    aec0:	e28d0004 	add	r0, sp, #4
    aec4:	eb000769 	bl	cc70 <CDWHCIRegister::Write()>
    aec8:	e3a03000 	mov	r3, #0
    aecc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    aed0:	e28d0004 	add	r0, sp, #4
    aed4:	eb00075d 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    aed8:	e28dd028 	add	sp, sp, #40	; 0x28
    aedc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    aee0:	e59f10a8 	ldr	r1, [pc, #168]	; af90 <CDWHCIDevice::InterruptHandler()+0x108>
    aee4:	e28d0010 	add	r0, sp, #16
    aee8:	eb000750 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aeec:	e28d0010 	add	r0, sp, #16
    aef0:	eb000757 	bl	cc54 <CDWHCIRegister::Read()>
    aef4:	e28d0010 	add	r0, sp, #16
    aef8:	eb00075c 	bl	cc70 <CDWHCIRegister::Write()>
    aefc:	e597300c 	ldr	r3, [r7, #12]
    af00:	e1530004 	cmp	r3, r4
    af04:	0a000019 	beq	af70 <CDWHCIDevice::InterruptHandler()+0xe8>
    af08:	e3a05001 	mov	r5, #1
    af0c:	e1a08004 	mov	r8, r4
    af10:	e59f607c 	ldr	r6, [pc, #124]	; af94 <CDWHCIDevice::InterruptHandler()+0x10c>
    af14:	ea000005 	b	af30 <CDWHCIDevice::InterruptHandler()+0xa8>
    af18:	e597300c 	ldr	r3, [r7, #12]
    af1c:	e2844001 	add	r4, r4, #1
    af20:	e1530004 	cmp	r3, r4
    af24:	e1a05085 	lsl	r5, r5, #1
    af28:	e2866020 	add	r6, r6, #32
    af2c:	9a00000f 	bls	af70 <CDWHCIDevice::InterruptHandler()+0xe8>
    af30:	e28d0010 	add	r0, sp, #16
    af34:	eb00075b 	bl	cca8 <CDWHCIRegister::Get() const>
    af38:	e1100005 	tst	r0, r5
    af3c:	0afffff5 	beq	af18 <CDWHCIDevice::InterruptHandler()+0x90>
    af40:	e1a02008 	mov	r2, r8
    af44:	e1a01006 	mov	r1, r6
    af48:	e28d001c 	add	r0, sp, #28
    af4c:	eb00073b 	bl	cc40 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    af50:	e28d001c 	add	r0, sp, #28
    af54:	eb000745 	bl	cc70 <CDWHCIRegister::Write()>
    af58:	e5d73081 	ldrb	r3, [r7, #129]	; 0x81
    af5c:	e3530000 	cmp	r3, #0
    af60:	0a000005 	beq	af7c <CDWHCIDevice::InterruptHandler()+0xf4>
    af64:	e28d001c 	add	r0, sp, #28
    af68:	eb000738 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    af6c:	eaffffe9 	b	af18 <CDWHCIDevice::InterruptHandler()+0x90>
    af70:	e28d0010 	add	r0, sp, #16
    af74:	eb000735 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    af78:	eaffffd0 	b	aec0 <CDWHCIDevice::InterruptHandler()+0x38>
    af7c:	e1a01004 	mov	r1, r4
    af80:	e1a00007 	mov	r0, r7
    af84:	ebfffe69 	bl	a930 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>
    af88:	eafffff5 	b	af64 <CDWHCIDevice::InterruptHandler()+0xdc>
    af8c:	20980014 	.word	0x20980014
    af90:	20980414 	.word	0x20980414
    af94:	2098050c 	.word	0x2098050c

0000af98 <CDWHCIDevice::InterruptStub(void*)>:
    af98:	e3500000 	cmp	r0, #0
    af9c:	0a000000 	beq	afa4 <CDWHCIDevice::InterruptStub(void*)+0xc>
    afa0:	eaffffb8 	b	ae88 <CDWHCIDevice::InterruptHandler()>
    afa4:	e92d4010 	push	{r4, lr}
    afa8:	e59f2008 	ldr	r2, [pc, #8]	; afb8 <CDWHCIDevice::InterruptStub(void*)+0x20>
    afac:	e59f1008 	ldr	r1, [pc, #8]	; afbc <CDWHCIDevice::InterruptStub(void*)+0x24>
    afb0:	e59f0008 	ldr	r0, [pc, #8]	; afc0 <CDWHCIDevice::InterruptStub(void*)+0x28>
    afb4:	eb006615 	bl	24810 <assertion_failed>
    afb8:	00000532 	.word	0x00000532
    afbc:	0003f220 	.word	0x0003f220
    afc0:	0003f230 	.word	0x0003f230

0000afc4 <CDWHCIDevice::AllocateWaitBlock()>:
    afc4:	e92d4070 	push	{r4, r5, r6, lr}
    afc8:	e1a05000 	mov	r5, r0
    afcc:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    afd0:	e3500000 	cmp	r0, #0
    afd4:	1a000014 	bne	b02c <CDWHCIDevice::AllocateWaitBlock()+0x68>
    afd8:	e3a04000 	mov	r4, #0
    afdc:	e3a03001 	mov	r3, #1
    afe0:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    afe4:	e1120003 	tst	r2, r3
    afe8:	0a000007 	beq	b00c <CDWHCIDevice::AllocateWaitBlock()+0x48>
    afec:	e2844001 	add	r4, r4, #1
    aff0:	e3540010 	cmp	r4, #16
    aff4:	e1a03083 	lsl	r3, r3, #1
    aff8:	1afffff8 	bne	afe0 <CDWHCIDevice::AllocateWaitBlock()+0x1c>
    affc:	e3500000 	cmp	r0, #0
    b000:	1a000006 	bne	b020 <CDWHCIDevice::AllocateWaitBlock()+0x5c>
    b004:	e1a00004 	mov	r0, r4
    b008:	e8bd8070 	pop	{r4, r5, r6, pc}
    b00c:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    b010:	e3500000 	cmp	r0, #0
    b014:	e1823003 	orr	r3, r2, r3
    b018:	e585306c 	str	r3, [r5, #108]	; 0x6c
    b01c:	0afffff8 	beq	b004 <CDWHCIDevice::AllocateWaitBlock()+0x40>
    b020:	eb008374 	bl	2bdf8 <LeaveCritical>
    b024:	e1a00004 	mov	r0, r4
    b028:	e8bd8070 	pop	{r4, r5, r6, pc}
    b02c:	eb008346 	bl	2bd4c <EnterCritical>
    b030:	e5950070 	ldr	r0, [r5, #112]	; 0x70
    b034:	eaffffe7 	b	afd8 <CDWHCIDevice::AllocateWaitBlock()+0x14>

0000b038 <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    b038:	e351000f 	cmp	r1, #15
    b03c:	e92d4070 	push	{r4, r5, r6, lr}
    b040:	8a000012 	bhi	b090 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x58>
    b044:	e3a05001 	mov	r5, #1
    b048:	e1a04000 	mov	r4, r0
    b04c:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    b050:	e1a05115 	lsl	r5, r5, r1
    b054:	e3500000 	cmp	r0, #0
    b058:	1a00000a 	bne	b088 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x50>
    b05c:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    b060:	e1150003 	tst	r5, r3
    b064:	0a00000d 	beq	b0a0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x68>
    b068:	e594106c 	ldr	r1, [r4, #108]	; 0x6c
    b06c:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    b070:	e1c15005 	bic	r5, r1, r5
    b074:	e3530000 	cmp	r3, #0
    b078:	e584506c 	str	r5, [r4, #108]	; 0x6c
    b07c:	08bd8070 	popeq	{r4, r5, r6, pc}
    b080:	e8bd4070 	pop	{r4, r5, r6, lr}
    b084:	ea00835b 	b	2bdf8 <LeaveCritical>
    b088:	eb00832f 	bl	2bd4c <EnterCritical>
    b08c:	eafffff2 	b	b05c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x24>
    b090:	e59f2018 	ldr	r2, [pc, #24]	; b0b0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x78>
    b094:	e59f1018 	ldr	r1, [pc, #24]	; b0b4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    b098:	e59f0018 	ldr	r0, [pc, #24]	; b0b8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x80>
    b09c:	eb0065db 	bl	24810 <assertion_failed>
    b0a0:	e59f2014 	ldr	r2, [pc, #20]	; b0bc <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x84>
    b0a4:	e59f1008 	ldr	r1, [pc, #8]	; b0b4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    b0a8:	e59f0010 	ldr	r0, [pc, #16]	; b0c0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x88>
    b0ac:	eb0065d7 	bl	24810 <assertion_failed>
    b0b0:	0000059d 	.word	0x0000059d
    b0b4:	0003f220 	.word	0x0003f220
    b0b8:	0003f23c 	.word	0x0003f23c
    b0bc:	000005a2 	.word	0x000005a2
    b0c0:	0003f46c 	.word	0x0003f46c

0000b0c4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    b0c4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b0c8:	e24dd00c 	sub	sp, sp, #12
    b0cc:	e1a07001 	mov	r7, r1
    b0d0:	e1a08002 	mov	r8, r2
    b0d4:	e1a09003 	mov	r9, r3
    b0d8:	e1a06000 	mov	r6, r0
    b0dc:	ebffffb8 	bl	afc4 <CDWHCIDevice::AllocateWaitBlock()>
    b0e0:	e350000f 	cmp	r0, #15
    b0e4:	8a000023 	bhi	b178 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb4>
    b0e8:	e3570000 	cmp	r7, #0
    b0ec:	0a000030 	beq	b1b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xf0>
    b0f0:	e1a05000 	mov	r5, r0
    b0f4:	e1a03006 	mov	r3, r6
    b0f8:	e1a02000 	mov	r2, r0
    b0fc:	e59f10c0 	ldr	r1, [pc, #192]	; b1c4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x100>
    b100:	e1a00007 	mov	r0, r7
    b104:	e0864005 	add	r4, r6, r5
    b108:	eb002534 	bl	145e0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    b10c:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    b110:	e3530000 	cmp	r3, #0
    b114:	1a00001b 	bne	b188 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xc4>
    b118:	e3a01001 	mov	r1, #1
    b11c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    b120:	e1a02008 	mov	r2, r8
    b124:	e58d3000 	str	r3, [sp]
    b128:	e1a00006 	mov	r0, r6
    b12c:	e5c4105c 	strb	r1, [r4, #92]	; 0x5c
    b130:	e1a03009 	mov	r3, r9
    b134:	e1a01007 	mov	r1, r7
    b138:	ebfffd67 	bl	a6dc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    b13c:	e2508000 	subs	r8, r0, #0
    b140:	0a000014 	beq	b198 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xd4>
    b144:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    b148:	e3530000 	cmp	r3, #0
    b14c:	1afffffc 	bne	b144 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x80>
    b150:	e1a01005 	mov	r1, r5
    b154:	e1a00006 	mov	r0, r6
    b158:	ebffffb6 	bl	b038 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b15c:	e1a00007 	mov	r0, r7
    b160:	eb0024eb 	bl	14514 <CUSBRequest::GetStatus() const>
    b164:	e2908000 	adds	r8, r0, #0
    b168:	13a08001 	movne	r8, #1
    b16c:	e1a00008 	mov	r0, r8
    b170:	e28dd00c 	add	sp, sp, #12
    b174:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b178:	e3a08000 	mov	r8, #0
    b17c:	e1a00008 	mov	r0, r8
    b180:	e28dd00c 	add	sp, sp, #12
    b184:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b188:	e59f2038 	ldr	r2, [pc, #56]	; b1c8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    b18c:	e59f1038 	ldr	r1, [pc, #56]	; b1cc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    b190:	e59f0038 	ldr	r0, [pc, #56]	; b1d0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    b194:	eb00659d 	bl	24810 <assertion_failed>
    b198:	e1a00006 	mov	r0, r6
    b19c:	e5c4805c 	strb	r8, [r4, #92]	; 0x5c
    b1a0:	e1a01005 	mov	r1, r5
    b1a4:	ebffffa3 	bl	b038 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b1a8:	e1a00008 	mov	r0, r8
    b1ac:	e28dd00c 	add	sp, sp, #12
    b1b0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b1b4:	e3a02e29 	mov	r2, #656	; 0x290
    b1b8:	e59f100c 	ldr	r1, [pc, #12]	; b1cc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    b1bc:	e59f0010 	ldr	r0, [pc, #16]	; b1d4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x110>
    b1c0:	eb006592 	bl	24810 <assertion_failed>
    b1c4:	00009ac8 	.word	0x00009ac8
    b1c8:	00000293 	.word	0x00000293
    b1cc:	0003f220 	.word	0x0003f220
    b1d0:	0003f494 	.word	0x0003f494
    b1d4:	0003f31c 	.word	0x0003f31c

0000b1d8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    b1d8:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    b1dc:	e21330ff 	ands	r3, r3, #255	; 0xff
    b1e0:	1a000027 	bne	b284 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xac>
    b1e4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b1e8:	e1a06002 	mov	r6, r2
    b1ec:	e24dd00c 	sub	sp, sp, #12
    b1f0:	e1a04001 	mov	r4, r1
    b1f4:	e1a05000 	mov	r5, r0
    b1f8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b1fc:	e3510000 	cmp	r1, #0
    b200:	0a000067 	beq	b3a4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1cc>
    b204:	e1a01003 	mov	r1, r3
    b208:	e1a00004 	mov	r0, r4
    b20c:	eb0024bc 	bl	14504 <CUSBRequest::SetStatus(int)>
    b210:	e1a00004 	mov	r0, r4
    b214:	eb0024af 	bl	144d8 <CUSBRequest::GetEndpoint() const>
    b218:	eb001059 	bl	f384 <CUSBEndpoint::GetType() const>
    b21c:	e3500000 	cmp	r0, #0
    b220:	1a000019 	bne	b28c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xb4>
    b224:	e3560000 	cmp	r6, #0
    b228:	1a000061 	bne	b3b4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1dc>
    b22c:	e1a00004 	mov	r0, r4
    b230:	eb0024c5 	bl	1454c <CUSBRequest::GetSetupData()>
    b234:	e3500000 	cmp	r0, #0
    b238:	0a000061 	beq	b3c4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1ec>
    b23c:	e1d030d0 	ldrsb	r3, [r0]
    b240:	e1a00004 	mov	r0, r4
    b244:	e3530000 	cmp	r3, #0
    b248:	ba000039 	blt	b334 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x15c>
    b24c:	eb0024e1 	bl	145d8 <CUSBRequest::GetBufLen() const>
    b250:	e2507000 	subs	r7, r0, #0
    b254:	0a000025 	beq	b2f0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x118>
    b258:	e58d6000 	str	r6, [sp]
    b25c:	e1a03006 	mov	r3, r6
    b260:	e1a02006 	mov	r2, r6
    b264:	e1a01004 	mov	r1, r4
    b268:	e1a00005 	mov	r0, r5
    b26c:	ebffff94 	bl	b0c4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b270:	e3500000 	cmp	r0, #0
    b274:	1a000056 	bne	b3d4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1fc>
    b278:	e3a00000 	mov	r0, #0
    b27c:	e28dd00c 	add	sp, sp, #12
    b280:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b284:	e3a00000 	mov	r0, #0
    b288:	e12fff1e 	bx	lr
    b28c:	e1a00004 	mov	r0, r4
    b290:	eb002490 	bl	144d8 <CUSBRequest::GetEndpoint() const>
    b294:	eb00103a 	bl	f384 <CUSBEndpoint::GetType() const>
    b298:	e3500001 	cmp	r0, #1
    b29c:	1a000057 	bne	b400 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x228>
    b2a0:	e1a00004 	mov	r0, r4
    b2a4:	eb0024cb 	bl	145d8 <CUSBRequest::GetBufLen() const>
    b2a8:	e3500000 	cmp	r0, #0
    b2ac:	0a00005c 	beq	b424 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24c>
    b2b0:	e1a00004 	mov	r0, r4
    b2b4:	eb002487 	bl	144d8 <CUSBRequest::GetEndpoint() const>
    b2b8:	eb001033 	bl	f38c <CUSBEndpoint::IsDirectionIn() const>
    b2bc:	e58d6000 	str	r6, [sp]
    b2c0:	e1a02000 	mov	r2, r0
    b2c4:	e1a01004 	mov	r1, r4
    b2c8:	e1a00005 	mov	r0, r5
    b2cc:	e3a03000 	mov	r3, #0
    b2d0:	ebffff7b 	bl	b0c4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b2d4:	e3500000 	cmp	r0, #0
    b2d8:	0affffe6 	beq	b278 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    b2dc:	e3a03000 	mov	r3, #0
    b2e0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b2e4:	e3a00001 	mov	r0, #1
    b2e8:	e28dd00c 	add	sp, sp, #12
    b2ec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b2f0:	e1a03007 	mov	r3, r7
    b2f4:	e58d7000 	str	r7, [sp]
    b2f8:	e1a02007 	mov	r2, r7
    b2fc:	e1a01004 	mov	r1, r4
    b300:	e1a00005 	mov	r0, r5
    b304:	ebffff6e 	bl	b0c4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b308:	e3500000 	cmp	r0, #0
    b30c:	13a03001 	movne	r3, #1
    b310:	158d7000 	strne	r7, [sp]
    b314:	0affffd7 	beq	b278 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    b318:	e1a01004 	mov	r1, r4
    b31c:	e1a00005 	mov	r0, r5
    b320:	e1a02003 	mov	r2, r3
    b324:	ebffff66 	bl	b0c4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b328:	e3500000 	cmp	r0, #0
    b32c:	1affffea 	bne	b2dc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x104>
    b330:	eaffffd0 	b	b278 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    b334:	eb0024a7 	bl	145d8 <CUSBRequest::GetBufLen() const>
    b338:	e3500000 	cmp	r0, #0
    b33c:	0a00003c 	beq	b434 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b340:	e58d6000 	str	r6, [sp]
    b344:	e1a03006 	mov	r3, r6
    b348:	e1a02006 	mov	r2, r6
    b34c:	e1a01004 	mov	r1, r4
    b350:	e1a00005 	mov	r0, r5
    b354:	ebffff5a 	bl	b0c4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b358:	e3500000 	cmp	r0, #0
    b35c:	0affffc5 	beq	b278 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    b360:	e58d6000 	str	r6, [sp]
    b364:	e1a03006 	mov	r3, r6
    b368:	e3a02001 	mov	r2, #1
    b36c:	e1a01004 	mov	r1, r4
    b370:	e1a00005 	mov	r0, r5
    b374:	ebffff52 	bl	b0c4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b378:	e3500000 	cmp	r0, #0
    b37c:	0affffbd 	beq	b278 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    b380:	e58d6000 	str	r6, [sp]
    b384:	e1a02006 	mov	r2, r6
    b388:	e1a01004 	mov	r1, r4
    b38c:	e1a00005 	mov	r0, r5
    b390:	e3a03001 	mov	r3, #1
    b394:	ebffff4a 	bl	b0c4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b398:	e3500000 	cmp	r0, #0
    b39c:	0affffb5 	beq	b278 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    b3a0:	eaffffcd 	b	b2dc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x104>
    b3a4:	e3a020cf 	mov	r2, #207	; 0xcf
    b3a8:	e59f1094 	ldr	r1, [pc, #148]	; b444 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b3ac:	e59f0094 	ldr	r0, [pc, #148]	; b448 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x270>
    b3b0:	eb006516 	bl	24810 <assertion_failed>
    b3b4:	e3a020d5 	mov	r2, #213	; 0xd5
    b3b8:	e59f1084 	ldr	r1, [pc, #132]	; b444 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b3bc:	e59f0088 	ldr	r0, [pc, #136]	; b44c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x274>
    b3c0:	eb006512 	bl	24810 <assertion_failed>
    b3c4:	e3a020d8 	mov	r2, #216	; 0xd8
    b3c8:	e59f1074 	ldr	r1, [pc, #116]	; b444 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b3cc:	e59f007c 	ldr	r0, [pc, #124]	; b450 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x278>
    b3d0:	eb00650e 	bl	24810 <assertion_failed>
    b3d4:	e58d6000 	str	r6, [sp]
    b3d8:	e1a03006 	mov	r3, r6
    b3dc:	e1a02006 	mov	r2, r6
    b3e0:	e1a01004 	mov	r1, r4
    b3e4:	e1a00005 	mov	r0, r5
    b3e8:	ebffff35 	bl	b0c4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b3ec:	e3500000 	cmp	r0, #0
    b3f0:	0affffa0 	beq	b278 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    b3f4:	e3a03001 	mov	r3, #1
    b3f8:	e58d6000 	str	r6, [sp]
    b3fc:	eaffffc5 	b	b318 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x140>
    b400:	e1a00004 	mov	r0, r4
    b404:	eb002433 	bl	144d8 <CUSBRequest::GetEndpoint() const>
    b408:	eb000fdd 	bl	f384 <CUSBEndpoint::GetType() const>
    b40c:	e3500002 	cmp	r0, #2
    b410:	0affffa2 	beq	b2a0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xc8>
    b414:	e3a020fd 	mov	r2, #253	; 0xfd
    b418:	e59f1024 	ldr	r1, [pc, #36]	; b444 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b41c:	e59f0030 	ldr	r0, [pc, #48]	; b454 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x27c>
    b420:	eb0064fa 	bl	24810 <assertion_failed>
    b424:	e3a020fe 	mov	r2, #254	; 0xfe
    b428:	e59f1014 	ldr	r1, [pc, #20]	; b444 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b42c:	e59f0024 	ldr	r0, [pc, #36]	; b458 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x280>
    b430:	eb0064f6 	bl	24810 <assertion_failed>
    b434:	e3a020dc 	mov	r2, #220	; 0xdc
    b438:	e59f1004 	ldr	r1, [pc, #4]	; b444 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b43c:	e59f0014 	ldr	r0, [pc, #20]	; b458 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x280>
    b440:	eb0064f2 	bl	24810 <assertion_failed>
    b444:	0003f220 	.word	0x0003f220
    b448:	0003f31c 	.word	0x0003f31c
    b44c:	0003f4ac 	.word	0x0003f4ac
    b450:	0003f4cc 	.word	0x0003f4cc
    b454:	0003f344 	.word	0x0003f344
    b458:	0003f3b8 	.word	0x0003f3b8

0000b45c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    b45c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b460:	e2516000 	subs	r6, r1, #0
    b464:	e59d4020 	ldr	r4, [sp, #32]
    b468:	0a00001f 	beq	b4ec <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x90>
    b46c:	e3520000 	cmp	r2, #0
    b470:	e1a05002 	mov	r5, r2
    b474:	0a000020 	beq	b4fc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xa0>
    b478:	e3540000 	cmp	r4, #0
    b47c:	11a09003 	movne	r9, r3
    b480:	13a08001 	movne	r8, #1
    b484:	11a07000 	movne	r7, r0
    b488:	1029a008 	eorne	sl, r9, r8
    b48c:	1a000004 	bne	b4a4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x48>
    b490:	ea00001d 	b	b50c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xb0>
    b494:	e1a00008 	mov	r0, r8
    b498:	eb007a63 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
    b49c:	e2544001 	subs	r4, r4, #1
    b4a0:	0a00000f 	beq	b4e4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x88>
    b4a4:	e1a00006 	mov	r0, r6
    b4a8:	eb0005e9 	bl	cc54 <CDWHCIRegister::Read()>
    b4ac:	e1150000 	tst	r5, r0
    b4b0:	11a0300a 	movne	r3, sl
    b4b4:	01a03009 	moveq	r3, r9
    b4b8:	e3530000 	cmp	r3, #0
    b4bc:	0a000006 	beq	b4dc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x80>
    b4c0:	e5973008 	ldr	r3, [r7, #8]
    b4c4:	e3530000 	cmp	r3, #0
    b4c8:	1afffff1 	bne	b494 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x38>
    b4cc:	e59f2048 	ldr	r2, [pc, #72]	; b51c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    b4d0:	e59f1048 	ldr	r1, [pc, #72]	; b520 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    b4d4:	e59f0048 	ldr	r0, [pc, #72]	; b524 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc8>
    b4d8:	eb0064cc 	bl	24810 <assertion_failed>
    b4dc:	e3a00001 	mov	r0, #1
    b4e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b4e4:	e1a00004 	mov	r0, r4
    b4e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b4ec:	e59f2034 	ldr	r2, [pc, #52]	; b528 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xcc>
    b4f0:	e59f1028 	ldr	r1, [pc, #40]	; b520 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    b4f4:	e59f0030 	ldr	r0, [pc, #48]	; b52c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd0>
    b4f8:	eb0064c4 	bl	24810 <assertion_failed>
    b4fc:	e59f202c 	ldr	r2, [pc, #44]	; b530 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd4>
    b500:	e59f1018 	ldr	r1, [pc, #24]	; b520 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    b504:	e59f0028 	ldr	r0, [pc, #40]	; b534 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd8>
    b508:	eb0064c0 	bl	24810 <assertion_failed>
    b50c:	e59f2024 	ldr	r2, [pc, #36]	; b538 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xdc>
    b510:	e59f1008 	ldr	r1, [pc, #8]	; b520 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    b514:	e59f0020 	ldr	r0, [pc, #32]	; b53c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe0>
    b518:	eb0064bc 	bl	24810 <assertion_failed>
    b51c:	000005b3 	.word	0x000005b3
    b520:	0003f220 	.word	0x0003f220
    b524:	0003f280 	.word	0x0003f280
    b528:	000005ad 	.word	0x000005ad
    b52c:	0003f4d8 	.word	0x0003f4d8
    b530:	000005ae 	.word	0x000005ae
    b534:	0003f4e8 	.word	0x0003f4e8
    b538:	000005af 	.word	0x000005af
    b53c:	0003f4f4 	.word	0x0003f4f4

0000b540 <CDWHCIDevice::EnableRootPort()>:
    b540:	e92d4030 	push	{r4, r5, lr}
    b544:	e24dd01c 	sub	sp, sp, #28
    b548:	e1a05000 	mov	r5, r0
    b54c:	eb006b61 	bl	262d8 <CKernelOptions::Get()>
    b550:	e3500000 	cmp	r0, #0
    b554:	0a00002c 	beq	b60c <CDWHCIDevice::EnableRootPort()+0xcc>
    b558:	eb006b51 	bl	262a4 <CKernelOptions::GetUSBPowerDelay() const>
    b55c:	e2504000 	subs	r4, r0, #0
    b560:	0a000029 	beq	b60c <CDWHCIDevice::EnableRootPort()+0xcc>
    b564:	e59f10a8 	ldr	r1, [pc, #168]	; b614 <CDWHCIDevice::EnableRootPort()+0xd4>
    b568:	e28d000c 	add	r0, sp, #12
    b56c:	eb0005af 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b570:	e3a03001 	mov	r3, #1
    b574:	e58d4000 	str	r4, [sp]
    b578:	e1a00005 	mov	r0, r5
    b57c:	e28d100c 	add	r1, sp, #12
    b580:	e1a02003 	mov	r2, r3
    b584:	ebffffb4 	bl	b45c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b588:	e2504000 	subs	r4, r0, #0
    b58c:	0a000019 	beq	b5f8 <CDWHCIDevice::EnableRootPort()+0xb8>
    b590:	e3a00064 	mov	r0, #100	; 0x64
    b594:	eb007a24 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
    b598:	e28d000c 	add	r0, sp, #12
    b59c:	eb0005ac 	bl	cc54 <CDWHCIRegister::Read()>
    b5a0:	e3e0102e 	mvn	r1, #46	; 0x2e
    b5a4:	e28d000c 	add	r0, sp, #12
    b5a8:	eb0005dd 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    b5ac:	e3a01c01 	mov	r1, #256	; 0x100
    b5b0:	e28d000c 	add	r0, sp, #12
    b5b4:	eb0005e8 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    b5b8:	e28d000c 	add	r0, sp, #12
    b5bc:	eb0005ab 	bl	cc70 <CDWHCIRegister::Write()>
    b5c0:	e3a00032 	mov	r0, #50	; 0x32
    b5c4:	eb007a18 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
    b5c8:	e28d000c 	add	r0, sp, #12
    b5cc:	eb0005a0 	bl	cc54 <CDWHCIRegister::Read()>
    b5d0:	e3e0102e 	mvn	r1, #46	; 0x2e
    b5d4:	e28d000c 	add	r0, sp, #12
    b5d8:	eb0005d1 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    b5dc:	e3e01c01 	mvn	r1, #256	; 0x100
    b5e0:	e28d000c 	add	r0, sp, #12
    b5e4:	eb0005ce 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    b5e8:	e28d000c 	add	r0, sp, #12
    b5ec:	eb00059f 	bl	cc70 <CDWHCIRegister::Write()>
    b5f0:	e3a00014 	mov	r0, #20
    b5f4:	eb007a0c 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
    b5f8:	e28d000c 	add	r0, sp, #12
    b5fc:	eb000593 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    b600:	e1a00004 	mov	r0, r4
    b604:	e28dd01c 	add	sp, sp, #28
    b608:	e8bd8030 	pop	{r4, r5, pc}
    b60c:	e59f4004 	ldr	r4, [pc, #4]	; b618 <CDWHCIDevice::EnableRootPort()+0xd8>
    b610:	eaffffd3 	b	b564 <CDWHCIDevice::EnableRootPort()+0x24>
    b614:	20980440 	.word	0x20980440
    b618:	000001fe 	.word	0x000001fe

0000b61c <CDWHCIDevice::Reset()>:
    b61c:	e92d4030 	push	{r4, r5, lr}
    b620:	e1a04000 	mov	r4, r0
    b624:	e3a05064 	mov	r5, #100	; 0x64
    b628:	e24dd01c 	sub	sp, sp, #28
    b62c:	e3a02000 	mov	r2, #0
    b630:	e59f1080 	ldr	r1, [pc, #128]	; b6b8 <CDWHCIDevice::Reset()+0x9c>
    b634:	e28d000c 	add	r0, sp, #12
    b638:	eb000580 	bl	cc40 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b63c:	e28d100c 	add	r1, sp, #12
    b640:	e1a00004 	mov	r0, r4
    b644:	e58d5000 	str	r5, [sp]
    b648:	e3a03001 	mov	r3, #1
    b64c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    b650:	ebffff81 	bl	b45c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b654:	e3500000 	cmp	r0, #0
    b658:	1a000005 	bne	b674 <CDWHCIDevice::Reset()+0x58>
    b65c:	e3a04000 	mov	r4, #0
    b660:	e28d000c 	add	r0, sp, #12
    b664:	eb000579 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    b668:	e1a00004 	mov	r0, r4
    b66c:	e28dd01c 	add	sp, sp, #28
    b670:	e8bd8030 	pop	{r4, r5, pc}
    b674:	e3a01001 	mov	r1, #1
    b678:	e28d000c 	add	r0, sp, #12
    b67c:	eb0005b6 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    b680:	e28d000c 	add	r0, sp, #12
    b684:	eb000579 	bl	cc70 <CDWHCIRegister::Write()>
    b688:	e3a0300a 	mov	r3, #10
    b68c:	e1a00004 	mov	r0, r4
    b690:	e58d3000 	str	r3, [sp]
    b694:	e3a02001 	mov	r2, #1
    b698:	e3a03000 	mov	r3, #0
    b69c:	e28d100c 	add	r1, sp, #12
    b6a0:	ebffff6d 	bl	b45c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b6a4:	e2504000 	subs	r4, r0, #0
    b6a8:	0affffeb 	beq	b65c <CDWHCIDevice::Reset()+0x40>
    b6ac:	e1a00005 	mov	r0, r5
    b6b0:	eb0079dd 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
    b6b4:	eaffffe9 	b	b660 <CDWHCIDevice::Reset()+0x44>
    b6b8:	20980010 	.word	0x20980010

0000b6bc <CDWHCIDevice::InitCore()>:
    b6bc:	e92d4030 	push	{r4, r5, lr}
    b6c0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    b6c4:	e59f1234 	ldr	r1, [pc, #564]	; b900 <CDWHCIDevice::InitCore()+0x244>
    b6c8:	e1a04000 	mov	r4, r0
    b6cc:	e28d0004 	add	r0, sp, #4
    b6d0:	eb000556 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b6d4:	e28d0004 	add	r0, sp, #4
    b6d8:	eb00055d 	bl	cc54 <CDWHCIRegister::Read()>
    b6dc:	eb006afd 	bl	262d8 <CKernelOptions::Get()>
    b6e0:	eb006af1 	bl	262ac <CKernelOptions::GetUSBFullSpeed() const>
    b6e4:	e3500000 	cmp	r0, #0
    b6e8:	1a000067 	bne	b88c <CDWHCIDevice::InitCore()+0x1d0>
    b6ec:	e3e01601 	mvn	r1, #1048576	; 0x100000
    b6f0:	e28d0004 	add	r0, sp, #4
    b6f4:	eb00058a 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    b6f8:	e3e01501 	mvn	r1, #4194304	; 0x400000
    b6fc:	e28d0004 	add	r0, sp, #4
    b700:	eb000587 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    b704:	e28d0004 	add	r0, sp, #4
    b708:	eb000558 	bl	cc70 <CDWHCIRegister::Write()>
    b70c:	e1a00004 	mov	r0, r4
    b710:	ebffffc1 	bl	b61c <CDWHCIDevice::Reset()>
    b714:	e2505000 	subs	r5, r0, #0
    b718:	0a000055 	beq	b874 <CDWHCIDevice::InitCore()+0x1b8>
    b71c:	e28d0004 	add	r0, sp, #4
    b720:	eb00054b 	bl	cc54 <CDWHCIRegister::Read()>
    b724:	e3e01010 	mvn	r1, #16
    b728:	e28d0004 	add	r0, sp, #4
    b72c:	eb00057c 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    b730:	e3e01008 	mvn	r1, #8
    b734:	e28d0004 	add	r0, sp, #4
    b738:	eb000579 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    b73c:	e28d0004 	add	r0, sp, #4
    b740:	eb00054a 	bl	cc70 <CDWHCIRegister::Write()>
    b744:	e59f11b8 	ldr	r1, [pc, #440]	; b904 <CDWHCIDevice::InitCore()+0x248>
    b748:	e28d0010 	add	r0, sp, #16
    b74c:	eb000537 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b750:	e28d0010 	add	r0, sp, #16
    b754:	eb00053e 	bl	cc54 <CDWHCIRegister::Read()>
    b758:	e28d0010 	add	r0, sp, #16
    b75c:	eb000551 	bl	cca8 <CDWHCIRegister::Get() const>
    b760:	e1a001a0 	lsr	r0, r0, #3
    b764:	e2000003 	and	r0, r0, #3
    b768:	e3500002 	cmp	r0, #2
    b76c:	1a00005b 	bne	b8e0 <CDWHCIDevice::InitCore()+0x224>
    b770:	e28d0004 	add	r0, sp, #4
    b774:	eb000536 	bl	cc54 <CDWHCIRegister::Read()>
    b778:	e28d0010 	add	r0, sp, #16
    b77c:	eb000549 	bl	cca8 <CDWHCIRegister::Get() const>
    b780:	e1a00320 	lsr	r0, r0, #6
    b784:	e2000003 	and	r0, r0, #3
    b788:	e3500002 	cmp	r0, #2
    b78c:	0a000042 	beq	b89c <CDWHCIDevice::InitCore()+0x1e0>
    b790:	e3e01802 	mvn	r1, #131072	; 0x20000
    b794:	e28d0004 	add	r0, sp, #4
    b798:	eb000561 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    b79c:	e3e01702 	mvn	r1, #524288	; 0x80000
    b7a0:	e28d0004 	add	r0, sp, #4
    b7a4:	eb00055e 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    b7a8:	e28d0004 	add	r0, sp, #4
    b7ac:	eb00052f 	bl	cc70 <CDWHCIRegister::Write()>
    b7b0:	e594300c 	ldr	r3, [r4, #12]
    b7b4:	e3530000 	cmp	r3, #0
    b7b8:	1a000044 	bne	b8d0 <CDWHCIDevice::InitCore()+0x214>
    b7bc:	e28d0010 	add	r0, sp, #16
    b7c0:	eb000538 	bl	cca8 <CDWHCIRegister::Get() const>
    b7c4:	e1a00720 	lsr	r0, r0, #14
    b7c8:	e200000f 	and	r0, r0, #15
    b7cc:	e2403003 	sub	r3, r0, #3
    b7d0:	e353000c 	cmp	r3, #12
    b7d4:	e2800001 	add	r0, r0, #1
    b7d8:	e584000c 	str	r0, [r4, #12]
    b7dc:	8a000043 	bhi	b8f0 <CDWHCIDevice::InitCore()+0x234>
    b7e0:	e59f1120 	ldr	r1, [pc, #288]	; b908 <CDWHCIDevice::InitCore()+0x24c>
    b7e4:	e28d001c 	add	r0, sp, #28
    b7e8:	eb000510 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b7ec:	e28d001c 	add	r0, sp, #28
    b7f0:	eb000517 	bl	cc54 <CDWHCIRegister::Read()>
    b7f4:	e28d001c 	add	r0, sp, #28
    b7f8:	e3a01020 	mov	r1, #32
    b7fc:	eb000556 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    b800:	e28d001c 	add	r0, sp, #28
    b804:	e3a01010 	mov	r1, #16
    b808:	eb000553 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    b80c:	e3e01006 	mvn	r1, #6
    b810:	e28d001c 	add	r0, sp, #28
    b814:	eb000542 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    b818:	e28d001c 	add	r0, sp, #28
    b81c:	eb000513 	bl	cc70 <CDWHCIRegister::Write()>
    b820:	e28d0004 	add	r0, sp, #4
    b824:	eb00050a 	bl	cc54 <CDWHCIRegister::Read()>
    b828:	e3e01c02 	mvn	r1, #512	; 0x200
    b82c:	e28d0004 	add	r0, sp, #4
    b830:	eb00053b 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    b834:	e3e01c01 	mvn	r1, #256	; 0x100
    b838:	e28d0004 	add	r0, sp, #4
    b83c:	eb000538 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    b840:	e28d0004 	add	r0, sp, #4
    b844:	eb000509 	bl	cc70 <CDWHCIRegister::Write()>
    b848:	e1a00004 	mov	r0, r4
    b84c:	ebfff96a 	bl	9dfc <CDWHCIDevice::EnableCommonInterrupts()>
    b850:	e28d001c 	add	r0, sp, #28
    b854:	eb0004fd 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    b858:	e28d0010 	add	r0, sp, #16
    b85c:	eb0004fb 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    b860:	e28d0004 	add	r0, sp, #4
    b864:	eb0004f9 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    b868:	e1a00005 	mov	r0, r5
    b86c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b870:	e8bd8030 	pop	{r4, r5, pc}
    b874:	eb006cd8 	bl	26bdc <CLogger::Get()>
    b878:	e59f308c 	ldr	r3, [pc, #140]	; b90c <CDWHCIDevice::InitCore()+0x250>
    b87c:	e3a02001 	mov	r2, #1
    b880:	e59f1088 	ldr	r1, [pc, #136]	; b910 <CDWHCIDevice::InitCore()+0x254>
    b884:	eb006c11 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b888:	eafffff4 	b	b860 <CDWHCIDevice::InitCore()+0x1a4>
    b88c:	e3a01040 	mov	r1, #64	; 0x40
    b890:	e28d0004 	add	r0, sp, #4
    b894:	eb000530 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    b898:	eaffff93 	b	b6ec <CDWHCIDevice::InitCore()+0x30>
    b89c:	e28d0010 	add	r0, sp, #16
    b8a0:	eb000500 	bl	cca8 <CDWHCIRegister::Get() const>
    b8a4:	e1a00420 	lsr	r0, r0, #8
    b8a8:	e2000003 	and	r0, r0, #3
    b8ac:	e3500001 	cmp	r0, #1
    b8b0:	1affffb6 	bne	b790 <CDWHCIDevice::InitCore()+0xd4>
    b8b4:	e28d0004 	add	r0, sp, #4
    b8b8:	e3a01802 	mov	r1, #131072	; 0x20000
    b8bc:	eb000526 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    b8c0:	e3a01702 	mov	r1, #524288	; 0x80000
    b8c4:	e28d0004 	add	r0, sp, #4
    b8c8:	eb000523 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    b8cc:	eaffffb5 	b	b7a8 <CDWHCIDevice::InitCore()+0xec>
    b8d0:	e59f203c 	ldr	r2, [pc, #60]	; b914 <CDWHCIDevice::InitCore()+0x258>
    b8d4:	e59f103c 	ldr	r1, [pc, #60]	; b918 <CDWHCIDevice::InitCore()+0x25c>
    b8d8:	e59f003c 	ldr	r0, [pc, #60]	; b91c <CDWHCIDevice::InitCore()+0x260>
    b8dc:	eb0063cb 	bl	24810 <assertion_failed>
    b8e0:	e59f2038 	ldr	r2, [pc, #56]	; b920 <CDWHCIDevice::InitCore()+0x264>
    b8e4:	e59f102c 	ldr	r1, [pc, #44]	; b918 <CDWHCIDevice::InitCore()+0x25c>
    b8e8:	e59f0034 	ldr	r0, [pc, #52]	; b924 <CDWHCIDevice::InitCore()+0x268>
    b8ec:	eb0063c7 	bl	24810 <assertion_failed>
    b8f0:	e59f2030 	ldr	r2, [pc, #48]	; b928 <CDWHCIDevice::InitCore()+0x26c>
    b8f4:	e59f101c 	ldr	r1, [pc, #28]	; b918 <CDWHCIDevice::InitCore()+0x25c>
    b8f8:	e59f002c 	ldr	r0, [pc, #44]	; b92c <CDWHCIDevice::InitCore()+0x270>
    b8fc:	eb0063c3 	bl	24810 <assertion_failed>
    b900:	2098000c 	.word	0x2098000c
    b904:	20980048 	.word	0x20980048
    b908:	20980008 	.word	0x20980008
    b90c:	0003f504 	.word	0x0003f504
    b910:	0003f1fc 	.word	0x0003f1fc
    b914:	00000185 	.word	0x00000185
    b918:	0003f220 	.word	0x0003f220
    b91c:	0003f54c 	.word	0x0003f54c
    b920:	00000175 	.word	0x00000175
    b924:	0003f514 	.word	0x0003f514
    b928:	00000187 	.word	0x00000187
    b92c:	0003f560 	.word	0x0003f560

0000b930 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    b930:	e92d4030 	push	{r4, r5, lr}
    b934:	e1a05001 	mov	r5, r1
    b938:	e24dd01c 	sub	sp, sp, #28
    b93c:	e3a02000 	mov	r2, #0
    b940:	e1a04000 	mov	r4, r0
    b944:	e59f107c 	ldr	r1, [pc, #124]	; b9c8 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x98>
    b948:	e28d000c 	add	r0, sp, #12
    b94c:	eb0004bb 	bl	cc40 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b950:	e28d000c 	add	r0, sp, #12
    b954:	e3a01020 	mov	r1, #32
    b958:	eb0004ff 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    b95c:	e28d000c 	add	r0, sp, #12
    b960:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    b964:	eb0004ee 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    b968:	e1a01305 	lsl	r1, r5, #6
    b96c:	e28d000c 	add	r0, sp, #12
    b970:	eb0004f9 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    b974:	e28d000c 	add	r0, sp, #12
    b978:	eb0004bc 	bl	cc70 <CDWHCIRegister::Write()>
    b97c:	e3a0300a 	mov	r3, #10
    b980:	e1a00004 	mov	r0, r4
    b984:	e58d3000 	str	r3, [sp]
    b988:	e28d100c 	add	r1, sp, #12
    b98c:	e3a03000 	mov	r3, #0
    b990:	e3a02020 	mov	r2, #32
    b994:	ebfffeb0 	bl	b45c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b998:	e3500000 	cmp	r0, #0
    b99c:	1a000003 	bne	b9b0 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x80>
    b9a0:	e28d000c 	add	r0, sp, #12
    b9a4:	eb0004a9 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    b9a8:	e28dd01c 	add	sp, sp, #28
    b9ac:	e8bd8030 	pop	{r4, r5, pc}
    b9b0:	e3a00001 	mov	r0, #1
    b9b4:	eb007923 	bl	29e48 <CTimer::SimpleusDelay(unsigned int)>
    b9b8:	e28d000c 	add	r0, sp, #12
    b9bc:	eb0004a3 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    b9c0:	e28dd01c 	add	sp, sp, #28
    b9c4:	e8bd8030 	pop	{r4, r5, pc}
    b9c8:	20980010 	.word	0x20980010

0000b9cc <CDWHCIDevice::FlushRxFIFO()>:
    b9cc:	e92d4010 	push	{r4, lr}
    b9d0:	e24dd018 	sub	sp, sp, #24
    b9d4:	e3a02000 	mov	r2, #0
    b9d8:	e1a04000 	mov	r4, r0
    b9dc:	e59f1064 	ldr	r1, [pc, #100]	; ba48 <CDWHCIDevice::FlushRxFIFO()+0x7c>
    b9e0:	e28d000c 	add	r0, sp, #12
    b9e4:	eb000495 	bl	cc40 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b9e8:	e3a01010 	mov	r1, #16
    b9ec:	e28d000c 	add	r0, sp, #12
    b9f0:	eb0004d9 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    b9f4:	e28d000c 	add	r0, sp, #12
    b9f8:	eb00049c 	bl	cc70 <CDWHCIRegister::Write()>
    b9fc:	e3a0300a 	mov	r3, #10
    ba00:	e1a00004 	mov	r0, r4
    ba04:	e58d3000 	str	r3, [sp]
    ba08:	e28d100c 	add	r1, sp, #12
    ba0c:	e3a03000 	mov	r3, #0
    ba10:	e3a02010 	mov	r2, #16
    ba14:	ebfffe90 	bl	b45c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    ba18:	e3500000 	cmp	r0, #0
    ba1c:	1a000003 	bne	ba30 <CDWHCIDevice::FlushRxFIFO()+0x64>
    ba20:	e28d000c 	add	r0, sp, #12
    ba24:	eb000489 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    ba28:	e28dd018 	add	sp, sp, #24
    ba2c:	e8bd8010 	pop	{r4, pc}
    ba30:	e3a00001 	mov	r0, #1
    ba34:	eb007903 	bl	29e48 <CTimer::SimpleusDelay(unsigned int)>
    ba38:	e28d000c 	add	r0, sp, #12
    ba3c:	eb000483 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    ba40:	e28dd018 	add	sp, sp, #24
    ba44:	e8bd8010 	pop	{r4, pc}
    ba48:	20980010 	.word	0x20980010

0000ba4c <CDWHCIDevice::InitHost()>:
    ba4c:	e92d4010 	push	{r4, lr}
    ba50:	e24dd068 	sub	sp, sp, #104	; 0x68
    ba54:	e3a02000 	mov	r2, #0
    ba58:	e59f11cc 	ldr	r1, [pc, #460]	; bc2c <CDWHCIDevice::InitHost()+0x1e0>
    ba5c:	e1a04000 	mov	r4, r0
    ba60:	e28d0008 	add	r0, sp, #8
    ba64:	eb000475 	bl	cc40 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    ba68:	e28d0008 	add	r0, sp, #8
    ba6c:	eb00047f 	bl	cc70 <CDWHCIRegister::Write()>
    ba70:	e59f11b8 	ldr	r1, [pc, #440]	; bc30 <CDWHCIDevice::InitHost()+0x1e4>
    ba74:	e28d0014 	add	r0, sp, #20
    ba78:	eb00046c 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ba7c:	e28d0014 	add	r0, sp, #20
    ba80:	eb000473 	bl	cc54 <CDWHCIRegister::Read()>
    ba84:	e28d0014 	add	r0, sp, #20
    ba88:	e3e01003 	mvn	r1, #3
    ba8c:	eb0004a4 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    ba90:	e59f119c 	ldr	r1, [pc, #412]	; bc34 <CDWHCIDevice::InitHost()+0x1e8>
    ba94:	e28d0020 	add	r0, sp, #32
    ba98:	eb000464 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ba9c:	e59f1194 	ldr	r1, [pc, #404]	; bc38 <CDWHCIDevice::InitHost()+0x1ec>
    baa0:	e28d002c 	add	r0, sp, #44	; 0x2c
    baa4:	eb000461 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    baa8:	e28d0020 	add	r0, sp, #32
    baac:	eb000468 	bl	cc54 <CDWHCIRegister::Read()>
    bab0:	e1a00320 	lsr	r0, r0, #6
    bab4:	e2000003 	and	r0, r0, #3
    bab8:	e3500002 	cmp	r0, #2
    babc:	0a00004d 	beq	bbf8 <CDWHCIDevice::InitHost()+0x1ac>
    bac0:	e3a01000 	mov	r1, #0
    bac4:	e28d0014 	add	r0, sp, #20
    bac8:	eb0004a3 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    bacc:	e28d0014 	add	r0, sp, #20
    bad0:	eb000466 	bl	cc70 <CDWHCIRegister::Write()>
    bad4:	e3a02b01 	mov	r2, #1024	; 0x400
    bad8:	e59f115c 	ldr	r1, [pc, #348]	; bc3c <CDWHCIDevice::InitHost()+0x1f0>
    badc:	e28d0038 	add	r0, sp, #56	; 0x38
    bae0:	eb000456 	bl	cc40 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bae4:	e28d0038 	add	r0, sp, #56	; 0x38
    bae8:	eb000460 	bl	cc70 <CDWHCIRegister::Write()>
    baec:	e3a02000 	mov	r2, #0
    baf0:	e59f1148 	ldr	r1, [pc, #328]	; bc40 <CDWHCIDevice::InitHost()+0x1f4>
    baf4:	e28d0044 	add	r0, sp, #68	; 0x44
    baf8:	eb000450 	bl	cc40 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bafc:	e28d0044 	add	r0, sp, #68	; 0x44
    bb00:	e3a01b01 	mov	r1, #1024	; 0x400
    bb04:	eb000494 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    bb08:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bb0c:	e28d0044 	add	r0, sp, #68	; 0x44
    bb10:	eb000491 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    bb14:	e28d0044 	add	r0, sp, #68	; 0x44
    bb18:	eb000454 	bl	cc70 <CDWHCIRegister::Write()>
    bb1c:	e3a02000 	mov	r2, #0
    bb20:	e59f111c 	ldr	r1, [pc, #284]	; bc44 <CDWHCIDevice::InitHost()+0x1f8>
    bb24:	e28d0050 	add	r0, sp, #80	; 0x50
    bb28:	eb000444 	bl	cc40 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bb2c:	e28d0050 	add	r0, sp, #80	; 0x50
    bb30:	e3a01b02 	mov	r1, #2048	; 0x800
    bb34:	eb000488 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    bb38:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bb3c:	e28d0050 	add	r0, sp, #80	; 0x50
    bb40:	eb000485 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    bb44:	e28d0050 	add	r0, sp, #80	; 0x50
    bb48:	eb000448 	bl	cc70 <CDWHCIRegister::Write()>
    bb4c:	e3a01010 	mov	r1, #16
    bb50:	e1a00004 	mov	r0, r4
    bb54:	ebffff75 	bl	b930 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    bb58:	e1a00004 	mov	r0, r4
    bb5c:	ebffff9a 	bl	b9cc <CDWHCIDevice::FlushRxFIFO()>
    bb60:	e59f10e0 	ldr	r1, [pc, #224]	; bc48 <CDWHCIDevice::InitHost()+0x1fc>
    bb64:	e28d005c 	add	r0, sp, #92	; 0x5c
    bb68:	eb000430 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb6c:	e28d005c 	add	r0, sp, #92	; 0x5c
    bb70:	eb000437 	bl	cc54 <CDWHCIRegister::Read()>
    bb74:	e28d005c 	add	r0, sp, #92	; 0x5c
    bb78:	e3e0102e 	mvn	r1, #46	; 0x2e
    bb7c:	eb000468 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    bb80:	e28d005c 	add	r0, sp, #92	; 0x5c
    bb84:	eb000447 	bl	cca8 <CDWHCIRegister::Get() const>
    bb88:	e3100a01 	tst	r0, #4096	; 0x1000
    bb8c:	1a000004 	bne	bba4 <CDWHCIDevice::InitHost()+0x158>
    bb90:	e28d005c 	add	r0, sp, #92	; 0x5c
    bb94:	e3a01a01 	mov	r1, #4096	; 0x1000
    bb98:	eb00046f 	bl	cd5c <CDWHCIRegister::Or(unsigned int)>
    bb9c:	e28d005c 	add	r0, sp, #92	; 0x5c
    bba0:	eb000432 	bl	cc70 <CDWHCIRegister::Write()>
    bba4:	e1a00004 	mov	r0, r4
    bba8:	ebfff8a1 	bl	9e34 <CDWHCIDevice::EnableHostInterrupts()>
    bbac:	e28d005c 	add	r0, sp, #92	; 0x5c
    bbb0:	eb000426 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    bbb4:	e28d0050 	add	r0, sp, #80	; 0x50
    bbb8:	eb000424 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    bbbc:	e28d0044 	add	r0, sp, #68	; 0x44
    bbc0:	eb000422 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    bbc4:	e28d0038 	add	r0, sp, #56	; 0x38
    bbc8:	eb000420 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    bbcc:	e28d002c 	add	r0, sp, #44	; 0x2c
    bbd0:	eb00041e 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    bbd4:	e28d0020 	add	r0, sp, #32
    bbd8:	eb00041c 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    bbdc:	e28d0014 	add	r0, sp, #20
    bbe0:	eb00041a 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    bbe4:	e28d0008 	add	r0, sp, #8
    bbe8:	eb000418 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    bbec:	e3a00001 	mov	r0, #1
    bbf0:	e28dd068 	add	sp, sp, #104	; 0x68
    bbf4:	e8bd8010 	pop	{r4, pc}
    bbf8:	e28d0020 	add	r0, sp, #32
    bbfc:	eb000429 	bl	cca8 <CDWHCIRegister::Get() const>
    bc00:	e1a01420 	lsr	r1, r0, #8
    bc04:	e2011003 	and	r1, r1, #3
    bc08:	e3510001 	cmp	r1, #1
    bc0c:	1affffab 	bne	bac0 <CDWHCIDevice::InitHost()+0x74>
    bc10:	e28d002c 	add	r0, sp, #44	; 0x2c
    bc14:	e58d1004 	str	r1, [sp, #4]
    bc18:	eb00040d 	bl	cc54 <CDWHCIRegister::Read()>
    bc1c:	e3100802 	tst	r0, #131072	; 0x20000
    bc20:	e59d1004 	ldr	r1, [sp, #4]
    bc24:	1affffa6 	bne	bac4 <CDWHCIDevice::InitHost()+0x78>
    bc28:	eaffffa4 	b	bac0 <CDWHCIDevice::InitHost()+0x74>
    bc2c:	20980e00 	.word	0x20980e00
    bc30:	20980400 	.word	0x20980400
    bc34:	20980048 	.word	0x20980048
    bc38:	2098000c 	.word	0x2098000c
    bc3c:	20980024 	.word	0x20980024
    bc40:	20980028 	.word	0x20980028
    bc44:	20980100 	.word	0x20980100
    bc48:	20980440 	.word	0x20980440

0000bc4c <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    bc4c:	e92d4030 	push	{r4, r5, lr}
    bc50:	e24dd01c 	sub	sp, sp, #28
    bc54:	e1a05001 	mov	r5, r1
    bc58:	e28d000c 	add	r0, sp, #12
    bc5c:	e1a01002 	mov	r1, r2
    bc60:	eb0003f2 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bc64:	e3a03000 	mov	r3, #0
    bc68:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bc6c:	eb006bda 	bl	26bdc <CLogger::Get()>
    bc70:	e1a04000 	mov	r4, r0
    bc74:	e28d000c 	add	r0, sp, #12
    bc78:	eb0003f5 	bl	cc54 <CDWHCIRegister::Read()>
    bc7c:	e59f3020 	ldr	r3, [pc, #32]	; bca4 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x58>
    bc80:	e88d0021 	stm	sp, {r0, r5}
    bc84:	e3a02004 	mov	r2, #4
    bc88:	e1a00004 	mov	r0, r4
    bc8c:	e59f1014 	ldr	r1, [pc, #20]	; bca8 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    bc90:	eb006b0e 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bc94:	e28d000c 	add	r0, sp, #12
    bc98:	eb0003ec 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    bc9c:	e28dd01c 	add	sp, sp, #28
    bca0:	e8bd8030 	pop	{r4, r5, pc}
    bca4:	0003f25c 	.word	0x0003f25c
    bca8:	0003f1fc 	.word	0x0003f1fc

0000bcac <CDWHCIDevice::DumpStatus(unsigned int)>:
    bcac:	e92d4070 	push	{r4, r5, r6, lr}
    bcb0:	e1a05001 	mov	r5, r1
    bcb4:	e59f0104 	ldr	r0, [pc, #260]	; bdc0 <CDWHCIDevice::DumpStatus(unsigned int)+0x114>
    bcb8:	e59f1104 	ldr	r1, [pc, #260]	; bdc4 <CDWHCIDevice::DumpStatus(unsigned int)+0x118>
    bcbc:	ebfff797 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bcc0:	e59f1100 	ldr	r1, [pc, #256]	; bdc8 <CDWHCIDevice::DumpStatus(unsigned int)+0x11c>
    bcc4:	e59f0100 	ldr	r0, [pc, #256]	; bdcc <CDWHCIDevice::DumpStatus(unsigned int)+0x120>
    bcc8:	ebfff794 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bccc:	e59f10fc 	ldr	r1, [pc, #252]	; bdd0 <CDWHCIDevice::DumpStatus(unsigned int)+0x124>
    bcd0:	e59f00fc 	ldr	r0, [pc, #252]	; bdd4 <CDWHCIDevice::DumpStatus(unsigned int)+0x128>
    bcd4:	ebfff791 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bcd8:	e59f10f8 	ldr	r1, [pc, #248]	; bdd8 <CDWHCIDevice::DumpStatus(unsigned int)+0x12c>
    bcdc:	e59f00f8 	ldr	r0, [pc, #248]	; bddc <CDWHCIDevice::DumpStatus(unsigned int)+0x130>
    bce0:	ebfff78e 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bce4:	e59f10f4 	ldr	r1, [pc, #244]	; bde0 <CDWHCIDevice::DumpStatus(unsigned int)+0x134>
    bce8:	e59f00f4 	ldr	r0, [pc, #244]	; bde4 <CDWHCIDevice::DumpStatus(unsigned int)+0x138>
    bcec:	ebfff78b 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bcf0:	e59f10f0 	ldr	r1, [pc, #240]	; bde8 <CDWHCIDevice::DumpStatus(unsigned int)+0x13c>
    bcf4:	e59f00f0 	ldr	r0, [pc, #240]	; bdec <CDWHCIDevice::DumpStatus(unsigned int)+0x140>
    bcf8:	ebfff788 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bcfc:	e59f10ec 	ldr	r1, [pc, #236]	; bdf0 <CDWHCIDevice::DumpStatus(unsigned int)+0x144>
    bd00:	e59f00ec 	ldr	r0, [pc, #236]	; bdf4 <CDWHCIDevice::DumpStatus(unsigned int)+0x148>
    bd04:	ebfff785 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd08:	e59f10e8 	ldr	r1, [pc, #232]	; bdf8 <CDWHCIDevice::DumpStatus(unsigned int)+0x14c>
    bd0c:	e59f00e8 	ldr	r0, [pc, #232]	; bdfc <CDWHCIDevice::DumpStatus(unsigned int)+0x150>
    bd10:	ebfff782 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd14:	e59f10e4 	ldr	r1, [pc, #228]	; be00 <CDWHCIDevice::DumpStatus(unsigned int)+0x154>
    bd18:	e59f00e4 	ldr	r0, [pc, #228]	; be04 <CDWHCIDevice::DumpStatus(unsigned int)+0x158>
    bd1c:	ebfff77f 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd20:	e59f10e0 	ldr	r1, [pc, #224]	; be08 <CDWHCIDevice::DumpStatus(unsigned int)+0x15c>
    bd24:	e59f00e0 	ldr	r0, [pc, #224]	; be0c <CDWHCIDevice::DumpStatus(unsigned int)+0x160>
    bd28:	ebfff77c 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd2c:	e59f10dc 	ldr	r1, [pc, #220]	; be10 <CDWHCIDevice::DumpStatus(unsigned int)+0x164>
    bd30:	e59f00dc 	ldr	r0, [pc, #220]	; be14 <CDWHCIDevice::DumpStatus(unsigned int)+0x168>
    bd34:	ebfff779 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd38:	e59f40d8 	ldr	r4, [pc, #216]	; be18 <CDWHCIDevice::DumpStatus(unsigned int)+0x16c>
    bd3c:	e59f10d8 	ldr	r1, [pc, #216]	; be1c <CDWHCIDevice::DumpStatus(unsigned int)+0x170>
    bd40:	e59f00d8 	ldr	r0, [pc, #216]	; be20 <CDWHCIDevice::DumpStatus(unsigned int)+0x174>
    bd44:	ebfff775 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd48:	e59f10d4 	ldr	r1, [pc, #212]	; be24 <CDWHCIDevice::DumpStatus(unsigned int)+0x178>
    bd4c:	e59f00d4 	ldr	r0, [pc, #212]	; be28 <CDWHCIDevice::DumpStatus(unsigned int)+0x17c>
    bd50:	ebfff772 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd54:	e0854004 	add	r4, r5, r4
    bd58:	e59f10cc 	ldr	r1, [pc, #204]	; be2c <CDWHCIDevice::DumpStatus(unsigned int)+0x180>
    bd5c:	e59f00cc 	ldr	r0, [pc, #204]	; be30 <CDWHCIDevice::DumpStatus(unsigned int)+0x184>
    bd60:	e1a04284 	lsl	r4, r4, #5
    bd64:	ebfff76d 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd68:	e59f10c4 	ldr	r1, [pc, #196]	; be34 <CDWHCIDevice::DumpStatus(unsigned int)+0x188>
    bd6c:	e59f00c4 	ldr	r0, [pc, #196]	; be38 <CDWHCIDevice::DumpStatus(unsigned int)+0x18c>
    bd70:	ebfff76a 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd74:	e1a01004 	mov	r1, r4
    bd78:	e59f00bc 	ldr	r0, [pc, #188]	; be3c <CDWHCIDevice::DumpStatus(unsigned int)+0x190>
    bd7c:	ebfff767 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd80:	e2841004 	add	r1, r4, #4
    bd84:	e59f00b4 	ldr	r0, [pc, #180]	; be40 <CDWHCIDevice::DumpStatus(unsigned int)+0x194>
    bd88:	ebfff764 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd8c:	e2841008 	add	r1, r4, #8
    bd90:	e59f00ac 	ldr	r0, [pc, #172]	; be44 <CDWHCIDevice::DumpStatus(unsigned int)+0x198>
    bd94:	ebfff761 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd98:	e284100c 	add	r1, r4, #12
    bd9c:	e59f00a4 	ldr	r0, [pc, #164]	; be48 <CDWHCIDevice::DumpStatus(unsigned int)+0x19c>
    bda0:	ebfff75e 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bda4:	e2841010 	add	r1, r4, #16
    bda8:	e59f009c 	ldr	r0, [pc, #156]	; be4c <CDWHCIDevice::DumpStatus(unsigned int)+0x1a0>
    bdac:	ebfff75b 	bl	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bdb0:	e2841014 	add	r1, r4, #20
    bdb4:	e59f0094 	ldr	r0, [pc, #148]	; be50 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a4>
    bdb8:	e8bd4070 	pop	{r4, r5, r6, lr}
    bdbc:	eafff757 	b	9b20 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bdc0:	0003f598 	.word	0x0003f598
    bdc4:	20980000 	.word	0x20980000
    bdc8:	20980008 	.word	0x20980008
    bdcc:	0003f5a4 	.word	0x0003f5a4
    bdd0:	2098000c 	.word	0x2098000c
    bdd4:	0003f5ac 	.word	0x0003f5ac
    bdd8:	20980010 	.word	0x20980010
    bddc:	0003f5b4 	.word	0x0003f5b4
    bde0:	20980014 	.word	0x20980014
    bde4:	0003f5bc 	.word	0x0003f5bc
    bde8:	20980018 	.word	0x20980018
    bdec:	0003f5c8 	.word	0x0003f5c8
    bdf0:	20980024 	.word	0x20980024
    bdf4:	0003f5d4 	.word	0x0003f5d4
    bdf8:	20980028 	.word	0x20980028
    bdfc:	0003f5e0 	.word	0x0003f5e0
    be00:	2098002c 	.word	0x2098002c
    be04:	0003f5f4 	.word	0x0003f5f4
    be08:	20980100 	.word	0x20980100
    be0c:	0003f604 	.word	0x0003f604
    be10:	20980400 	.word	0x20980400
    be14:	0003f61c 	.word	0x0003f61c
    be18:	0104c028 	.word	0x0104c028
    be1c:	20980410 	.word	0x20980410
    be20:	0003f628 	.word	0x0003f628
    be24:	20980414 	.word	0x20980414
    be28:	0003f640 	.word	0x0003f640
    be2c:	20980418 	.word	0x20980418
    be30:	0003f654 	.word	0x0003f654
    be34:	20980440 	.word	0x20980440
    be38:	0003f66c 	.word	0x0003f66c
    be3c:	0003f678 	.word	0x0003f678
    be40:	0003f690 	.word	0x0003f690
    be44:	0003f6a8 	.word	0x0003f6a8
    be48:	0003f6bc 	.word	0x0003f6bc
    be4c:	0003f6d4 	.word	0x0003f6d4
    be50:	0003f6ec 	.word	0x0003f6ec

0000be54 <CDWHCIDevice::~CDWHCIDevice()>:
    be54:	e3a03001 	mov	r3, #1
    be58:	e92d4030 	push	{r4, r5, lr}
    be5c:	e5901008 	ldr	r1, [r0, #8]
    be60:	e59f20bc 	ldr	r2, [pc, #188]	; bf24 <CDWHCIDevice::~CDWHCIDevice()+0xd0>
    be64:	e3510000 	cmp	r1, #0
    be68:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    be6c:	e5802000 	str	r2, [r0]
    be70:	e5c03081 	strb	r3, [r0, #129]	; 0x81
    be74:	0a000022 	beq	bf04 <CDWHCIDevice::~CDWHCIDevice()+0xb0>
    be78:	e1a04000 	mov	r4, r0
    be7c:	e3a000c8 	mov	r0, #200	; 0xc8
    be80:	eb0077e9 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
    be84:	e5940004 	ldr	r0, [r4, #4]
    be88:	e3500000 	cmp	r0, #0
    be8c:	0a000020 	beq	bf14 <CDWHCIDevice::~CDWHCIDevice()+0xc0>
    be90:	e3a05000 	mov	r5, #0
    be94:	e3a01009 	mov	r1, #9
    be98:	eb0080e0 	bl	2c220 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    be9c:	e1a00004 	mov	r0, r4
    bea0:	ebfffddd 	bl	b61c <CDWHCIDevice::Reset()>
    bea4:	e1a01005 	mov	r1, r5
    bea8:	e28d000c 	add	r0, sp, #12
    beac:	eb006278 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    beb0:	e3a03014 	mov	r3, #20
    beb4:	e3a01003 	mov	r1, #3
    beb8:	e3a0c002 	mov	ip, #2
    bebc:	e08d2003 	add	r2, sp, r3
    bec0:	e58d1020 	str	r1, [sp, #32]
    bec4:	e28d000c 	add	r0, sp, #12
    bec8:	e59f1058 	ldr	r1, [pc, #88]	; bf28 <CDWHCIDevice::~CDWHCIDevice()+0xd4>
    becc:	e58d5000 	str	r5, [sp]
    bed0:	e58dc024 	str	ip, [sp, #36]	; 0x24
    bed4:	eb00627a 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    bed8:	e5845004 	str	r5, [r4, #4]
    bedc:	e5845008 	str	r5, [r4, #8]
    bee0:	e28d000c 	add	r0, sp, #12
    bee4:	eb006271 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
    bee8:	e2840074 	add	r0, r4, #116	; 0x74
    beec:	eb0003ff 	bl	cef0 <CDWHCIRootPort::~CDWHCIRootPort()>
    bef0:	e1a00004 	mov	r0, r4
    bef4:	eb001a4e 	bl	12834 <CUSBHostController::~CUSBHostController()>
    bef8:	e1a00004 	mov	r0, r4
    befc:	e28dd02c 	add	sp, sp, #44	; 0x2c
    bf00:	e8bd8030 	pop	{r4, r5, pc}
    bf04:	e3a0205d 	mov	r2, #93	; 0x5d
    bf08:	e59f101c 	ldr	r1, [pc, #28]	; bf2c <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    bf0c:	e59f001c 	ldr	r0, [pc, #28]	; bf30 <CDWHCIDevice::~CDWHCIDevice()+0xdc>
    bf10:	eb00623e 	bl	24810 <assertion_failed>
    bf14:	e3a02060 	mov	r2, #96	; 0x60
    bf18:	e59f100c 	ldr	r1, [pc, #12]	; bf2c <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    bf1c:	e59f0010 	ldr	r0, [pc, #16]	; bf34 <CDWHCIDevice::~CDWHCIDevice()+0xe0>
    bf20:	eb00623a 	bl	24810 <assertion_failed>
    bf24:	0003f20c 	.word	0x0003f20c
    bf28:	00028001 	.word	0x00028001
    bf2c:	0003f220 	.word	0x0003f220
    bf30:	0003f280 	.word	0x0003f280
    bf34:	0003f268 	.word	0x0003f268

0000bf38 <CDWHCIDevice::~CDWHCIDevice()>:
    bf38:	e92d4010 	push	{r4, lr}
    bf3c:	e1a04000 	mov	r4, r0
    bf40:	ebffffc3 	bl	be54 <CDWHCIDevice::~CDWHCIDevice()>
    bf44:	e1a00004 	mov	r0, r4
    bf48:	e3a01084 	mov	r1, #132	; 0x84
    bf4c:	eb007c5a 	bl	2b0bc <operator delete(void*, unsigned int)>
    bf50:	e1a00004 	mov	r0, r4
    bf54:	e8bd8010 	pop	{r4, pc}

0000bf58 <CDWHCIDevice::ReScanDevices()>:
    bf58:	e92d4010 	push	{r4, lr}
    bf5c:	e3a03000 	mov	r3, #0
    bf60:	e1a04000 	mov	r4, r0
    bf64:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    bf68:	e5d03080 	ldrb	r3, [r0, #128]	; 0x80
    bf6c:	e3530000 	cmp	r3, #0
    bf70:	1a00000e 	bne	bfb0 <CDWHCIDevice::ReScanDevices()+0x58>
    bf74:	ebfffd71 	bl	b540 <CDWHCIDevice::EnableRootPort()>
    bf78:	e3500000 	cmp	r0, #0
    bf7c:	0a000010 	beq	bfc4 <CDWHCIDevice::ReScanDevices()+0x6c>
    bf80:	e3a03001 	mov	r3, #1
    bf84:	e2840074 	add	r0, r4, #116	; 0x74
    bf88:	e5c43080 	strb	r3, [r4, #128]	; 0x80
    bf8c:	eb00042b 	bl	d040 <CDWHCIRootPort::Initialize()>
    bf90:	e3500000 	cmp	r0, #0
    bf94:	1a000007 	bne	bfb8 <CDWHCIDevice::ReScanDevices()+0x60>
    bf98:	eb006b0f 	bl	26bdc <CLogger::Get()>
    bf9c:	e59f3038 	ldr	r3, [pc, #56]	; bfdc <CDWHCIDevice::ReScanDevices()+0x84>
    bfa0:	e3a02002 	mov	r2, #2
    bfa4:	e59f1034 	ldr	r1, [pc, #52]	; bfe0 <CDWHCIDevice::ReScanDevices()+0x88>
    bfa8:	eb006a48 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bfac:	ea000001 	b	bfb8 <CDWHCIDevice::ReScanDevices()+0x60>
    bfb0:	e2800074 	add	r0, r0, #116	; 0x74
    bfb4:	eb000401 	bl	cfc0 <CDWHCIRootPort::ReScanDevices()>
    bfb8:	e3a03000 	mov	r3, #0
    bfbc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bfc0:	e8bd8010 	pop	{r4, pc}
    bfc4:	eb006b04 	bl	26bdc <CLogger::Get()>
    bfc8:	e59f3014 	ldr	r3, [pc, #20]	; bfe4 <CDWHCIDevice::ReScanDevices()+0x8c>
    bfcc:	e3a02002 	mov	r2, #2
    bfd0:	e59f1008 	ldr	r1, [pc, #8]	; bfe0 <CDWHCIDevice::ReScanDevices()+0x88>
    bfd4:	eb006a3d 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bfd8:	eafffff6 	b	bfb8 <CDWHCIDevice::ReScanDevices()+0x60>
    bfdc:	0003f704 	.word	0x0003f704
    bfe0:	0003f1fc 	.word	0x0003f1fc
    bfe4:	0003f720 	.word	0x0003f720

0000bfe8 <CDWHCIDevice::Initialize()>:
    bfe8:	e92d4070 	push	{r4, r5, r6, lr}
    bfec:	e3a01001 	mov	r1, #1
    bff0:	e24dd020 	sub	sp, sp, #32
    bff4:	e1a04000 	mov	r4, r0
    bff8:	e3a00020 	mov	r0, #32
    bffc:	eb0021db 	bl	14770 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    c000:	e3a01001 	mov	r1, #1
    c004:	e3a00010 	mov	r0, #16
    c008:	eb0006f6 	bl	dbe8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    c00c:	e3a01001 	mov	r1, #1
    c010:	e3a00010 	mov	r0, #16
    c014:	eb000137 	bl	c4f8 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    c018:	e3a01001 	mov	r1, #1
    c01c:	e3a00010 	mov	r0, #16
    c020:	eb0002e6 	bl	cbc0 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    c024:	e3a01001 	mov	r1, #1
    c028:	e3a00010 	mov	r0, #16
    c02c:	eb0001d1 	bl	c778 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    c030:	e3a05000 	mov	r5, #0
    c034:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    c038:	e5943004 	ldr	r3, [r4, #4]
    c03c:	e1530005 	cmp	r3, r5
    c040:	0a000041 	beq	c14c <CDWHCIDevice::Initialize()+0x164>
    c044:	e5943008 	ldr	r3, [r4, #8]
    c048:	e3530000 	cmp	r3, #0
    c04c:	0a000042 	beq	c15c <CDWHCIDevice::Initialize()+0x174>
    c050:	e59f1164 	ldr	r1, [pc, #356]	; c1bc <CDWHCIDevice::Initialize()+0x1d4>
    c054:	e28d0008 	add	r0, sp, #8
    c058:	eb0002f4 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c05c:	e28d0008 	add	r0, sp, #8
    c060:	eb0002fb 	bl	cc54 <CDWHCIRegister::Read()>
    c064:	e59f3154 	ldr	r3, [pc, #340]	; c1c0 <CDWHCIDevice::Initialize()+0x1d8>
    c068:	e1500003 	cmp	r0, r3
    c06c:	0a00000f 	beq	c0b0 <CDWHCIDevice::Initialize()+0xc8>
    c070:	eb006ad9 	bl	26bdc <CLogger::Get()>
    c074:	e1a04000 	mov	r4, r0
    c078:	e28d0008 	add	r0, sp, #8
    c07c:	eb000309 	bl	cca8 <CDWHCIRegister::Get() const>
    c080:	e59f313c 	ldr	r3, [pc, #316]	; c1c4 <CDWHCIDevice::Initialize()+0x1dc>
    c084:	e58d0000 	str	r0, [sp]
    c088:	e3a02001 	mov	r2, #1
    c08c:	e1a00004 	mov	r0, r4
    c090:	e59f1130 	ldr	r1, [pc, #304]	; c1c8 <CDWHCIDevice::Initialize()+0x1e0>
    c094:	e1a06005 	mov	r6, r5
    c098:	eb006a0c 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c09c:	e28d0008 	add	r0, sp, #8
    c0a0:	eb0002ea 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    c0a4:	e1a00006 	mov	r0, r6
    c0a8:	e28dd020 	add	sp, sp, #32
    c0ac:	e8bd8070 	pop	{r4, r5, r6, pc}
    c0b0:	e1a00004 	mov	r0, r4
    c0b4:	ebfff724 	bl	9d4c <CDWHCIDevice::PowerOn()>
    c0b8:	e2506000 	subs	r6, r0, #0
    c0bc:	0a00001c 	beq	c134 <CDWHCIDevice::Initialize()+0x14c>
    c0c0:	e59f1104 	ldr	r1, [pc, #260]	; c1cc <CDWHCIDevice::Initialize()+0x1e4>
    c0c4:	e28d0014 	add	r0, sp, #20
    c0c8:	eb0002d8 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c0cc:	e28d0014 	add	r0, sp, #20
    c0d0:	eb0002df 	bl	cc54 <CDWHCIRegister::Read()>
    c0d4:	e28d0014 	add	r0, sp, #20
    c0d8:	e3e01001 	mvn	r1, #1
    c0dc:	eb000310 	bl	cd24 <CDWHCIRegister::And(unsigned int)>
    c0e0:	e28d0014 	add	r0, sp, #20
    c0e4:	eb0002e1 	bl	cc70 <CDWHCIRegister::Write()>
    c0e8:	e5940004 	ldr	r0, [r4, #4]
    c0ec:	e3500000 	cmp	r0, #0
    c0f0:	0a00002d 	beq	c1ac <CDWHCIDevice::Initialize()+0x1c4>
    c0f4:	e1a03004 	mov	r3, r4
    c0f8:	e59f20d0 	ldr	r2, [pc, #208]	; c1d0 <CDWHCIDevice::Initialize()+0x1e8>
    c0fc:	e3a01009 	mov	r1, #9
    c100:	eb008012 	bl	2c150 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    c104:	e1a00004 	mov	r0, r4
    c108:	ebfffd6b 	bl	b6bc <CDWHCIDevice::InitCore()>
    c10c:	e2506000 	subs	r6, r0, #0
    c110:	1a000015 	bne	c16c <CDWHCIDevice::Initialize()+0x184>
    c114:	eb006ab0 	bl	26bdc <CLogger::Get()>
    c118:	e59f30b4 	ldr	r3, [pc, #180]	; c1d4 <CDWHCIDevice::Initialize()+0x1ec>
    c11c:	e3a02001 	mov	r2, #1
    c120:	e59f10a0 	ldr	r1, [pc, #160]	; c1c8 <CDWHCIDevice::Initialize()+0x1e0>
    c124:	eb0069e9 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c128:	e28d0014 	add	r0, sp, #20
    c12c:	eb0002c7 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    c130:	eaffffd9 	b	c09c <CDWHCIDevice::Initialize()+0xb4>
    c134:	eb006aa8 	bl	26bdc <CLogger::Get()>
    c138:	e59f3098 	ldr	r3, [pc, #152]	; c1d8 <CDWHCIDevice::Initialize()+0x1f0>
    c13c:	e3a02001 	mov	r2, #1
    c140:	e59f1080 	ldr	r1, [pc, #128]	; c1c8 <CDWHCIDevice::Initialize()+0x1e0>
    c144:	eb0069e1 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c148:	eaffffd3 	b	c09c <CDWHCIDevice::Initialize()+0xb4>
    c14c:	e3a0207a 	mov	r2, #122	; 0x7a
    c150:	e59f1084 	ldr	r1, [pc, #132]	; c1dc <CDWHCIDevice::Initialize()+0x1f4>
    c154:	e59f0084 	ldr	r0, [pc, #132]	; c1e0 <CDWHCIDevice::Initialize()+0x1f8>
    c158:	eb0061ac 	bl	24810 <assertion_failed>
    c15c:	e3a0207b 	mov	r2, #123	; 0x7b
    c160:	e59f1074 	ldr	r1, [pc, #116]	; c1dc <CDWHCIDevice::Initialize()+0x1f4>
    c164:	e59f0078 	ldr	r0, [pc, #120]	; c1e4 <CDWHCIDevice::Initialize()+0x1fc>
    c168:	eb0061a8 	bl	24810 <assertion_failed>
    c16c:	e1a00004 	mov	r0, r4
    c170:	ebfff710 	bl	9db8 <CDWHCIDevice::EnableGlobalInterrupts()>
    c174:	e1a00004 	mov	r0, r4
    c178:	ebfffe33 	bl	ba4c <CDWHCIDevice::InitHost()>
    c17c:	e2506000 	subs	r6, r0, #0
    c180:	1a000005 	bne	c19c <CDWHCIDevice::Initialize()+0x1b4>
    c184:	eb006a94 	bl	26bdc <CLogger::Get()>
    c188:	e59f3058 	ldr	r3, [pc, #88]	; c1e8 <CDWHCIDevice::Initialize()+0x200>
    c18c:	e3a02001 	mov	r2, #1
    c190:	e59f1030 	ldr	r1, [pc, #48]	; c1c8 <CDWHCIDevice::Initialize()+0x1e0>
    c194:	eb0069cd 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c198:	eaffffe2 	b	c128 <CDWHCIDevice::Initialize()+0x140>
    c19c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    c1a0:	e1a00004 	mov	r0, r4
    c1a4:	ebffff6b 	bl	bf58 <CDWHCIDevice::ReScanDevices()>
    c1a8:	eaffffde 	b	c128 <CDWHCIDevice::Initialize()+0x140>
    c1ac:	e3a02090 	mov	r2, #144	; 0x90
    c1b0:	e59f1024 	ldr	r1, [pc, #36]	; c1dc <CDWHCIDevice::Initialize()+0x1f4>
    c1b4:	e59f0024 	ldr	r0, [pc, #36]	; c1e0 <CDWHCIDevice::Initialize()+0x1f8>
    c1b8:	eb006194 	bl	24810 <assertion_failed>
    c1bc:	20980040 	.word	0x20980040
    c1c0:	4f54280a 	.word	0x4f54280a
    c1c4:	0003f744 	.word	0x0003f744
    c1c8:	0003f1fc 	.word	0x0003f1fc
    c1cc:	20980008 	.word	0x20980008
    c1d0:	0000af98 	.word	0x0000af98
    c1d4:	0003f76c 	.word	0x0003f76c
    c1d8:	0003f75c 	.word	0x0003f75c
    c1dc:	0003f220 	.word	0x0003f220
    c1e0:	0003f268 	.word	0x0003f268
    c1e4:	0003f280 	.word	0x0003f280
    c1e8:	0003f784 	.word	0x0003f784

0000c1ec <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    c1ec:	e12fff1e 	bx	lr

0000c1f0 <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
    c1f0:	e3a03000 	mov	r3, #0
    c1f4:	e5803008 	str	r3, [r0, #8]
    c1f8:	e12fff1e 	bx	lr

0000c1fc <CDWHCIFrameSchedulerNonPeriodic::WaitForFrame()>:
    c1fc:	e12fff1e 	bx	lr

0000c200 <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
    c200:	e3a00000 	mov	r0, #0
    c204:	e12fff1e 	bx	lr

0000c208 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
    c208:	e5903008 	ldr	r3, [r0, #8]
    c20c:	e92d4010 	push	{r4, lr}
    c210:	e2433001 	sub	r3, r3, #1
    c214:	e3530004 	cmp	r3, #4
    c218:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c21c:	ea000010 	b	c264 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x5c>
    c220:	0000c24c 	.word	0x0000c24c
    c224:	0000c23c 	.word	0x0000c23c
    c228:	0000c23c 	.word	0x0000c23c
    c22c:	0000c234 	.word	0x0000c234
    c230:	0000c234 	.word	0x0000c234
    c234:	e3a00000 	mov	r0, #0
    c238:	e8bd8010 	pop	{r4, pc}
    c23c:	e59f0030 	ldr	r0, [pc, #48]	; c274 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x6c>
    c240:	eb007700 	bl	29e48 <CTimer::SimpleusDelay(unsigned int)>
    c244:	e3a00001 	mov	r0, #1
    c248:	e8bd8010 	pop	{r4, pc}
    c24c:	e3a02002 	mov	r2, #2
    c250:	e3a03003 	mov	r3, #3
    c254:	e5802008 	str	r2, [r0, #8]
    c258:	e580300c 	str	r3, [r0, #12]
    c25c:	e3a00001 	mov	r0, #1
    c260:	e8bd8010 	pop	{r4, pc}
    c264:	e3a0205f 	mov	r2, #95	; 0x5f
    c268:	e59f1008 	ldr	r1, [pc, #8]	; c278 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x70>
    c26c:	e59f0008 	ldr	r0, [pc, #8]	; c27c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x74>
    c270:	eb006166 	bl	24810 <assertion_failed>
    c274:	00000271 	.word	0x00000271
    c278:	0003f7c0 	.word	0x0003f7c0
    c27c:	0003fe24 	.word	0x0003fe24

0000c280 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
    c280:	e92d4010 	push	{r4, lr}
    c284:	e5903008 	ldr	r3, [r0, #8]
    c288:	e24dd010 	sub	sp, sp, #16
    c28c:	e3530000 	cmp	r3, #0
    c290:	e1a04000 	mov	r4, r0
    c294:	0a000017 	beq	c2f8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x78>
    c298:	e2433002 	sub	r3, r3, #2
    c29c:	e3530001 	cmp	r3, #1
    c2a0:	8a000010 	bhi	c2e8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x68>
    c2a4:	e3110001 	tst	r1, #1
    c2a8:	13a03004 	movne	r3, #4
    c2ac:	15803008 	strne	r3, [r0, #8]
    c2b0:	1a00000a 	bne	c2e0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    c2b4:	e3110060 	tst	r1, #96	; 0x60
    c2b8:	1a000016 	bne	c318 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x98>
    c2bc:	e3110010 	tst	r1, #16
    c2c0:	0a00001f 	beq	c344 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xc4>
    c2c4:	e590300c 	ldr	r3, [r0, #12]
    c2c8:	e3530000 	cmp	r3, #0
    c2cc:	e2433001 	sub	r3, r3, #1
    c2d0:	e580300c 	str	r3, [r0, #12]
    c2d4:	0a000017 	beq	c338 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb8>
    c2d8:	e3a03003 	mov	r3, #3
    c2dc:	e5843008 	str	r3, [r4, #8]
    c2e0:	e28dd010 	add	sp, sp, #16
    c2e4:	e8bd8010 	pop	{r4, pc}
    c2e8:	e3a0209b 	mov	r2, #155	; 0x9b
    c2ec:	e59f1080 	ldr	r1, [pc, #128]	; c374 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf4>
    c2f0:	e59f0080 	ldr	r0, [pc, #128]	; c378 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    c2f4:	eb006145 	bl	24810 <assertion_failed>
    c2f8:	e3110020 	tst	r1, #32
    c2fc:	13a03001 	movne	r3, #1
    c300:	15803008 	strne	r3, [r0, #8]
    c304:	1afffff5 	bne	c2e0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    c308:	e3a0206b 	mov	r2, #107	; 0x6b
    c30c:	e59f1060 	ldr	r1, [pc, #96]	; c374 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf4>
    c310:	e59f0064 	ldr	r0, [pc, #100]	; c37c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xfc>
    c314:	eb00613d 	bl	24810 <assertion_failed>
    c318:	e590300c 	ldr	r3, [r0, #12]
    c31c:	e3530000 	cmp	r3, #0
    c320:	e2433001 	sub	r3, r3, #1
    c324:	e580300c 	str	r3, [r0, #12]
    c328:	1affffea 	bne	c2d8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x58>
    c32c:	e3a03005 	mov	r3, #5
    c330:	e5843008 	str	r3, [r4, #8]
    c334:	eaffffe9 	b	c2e0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    c338:	e59f0040 	ldr	r0, [pc, #64]	; c380 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x100>
    c33c:	eb0076c1 	bl	29e48 <CTimer::SimpleusDelay(unsigned int)>
    c340:	eafffff9 	b	c32c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xac>
    c344:	e58d100c 	str	r1, [sp, #12]
    c348:	eb006a23 	bl	26bdc <CLogger::Get()>
    c34c:	e59d100c 	ldr	r1, [sp, #12]
    c350:	e3a02001 	mov	r2, #1
    c354:	e58d1000 	str	r1, [sp]
    c358:	e59f3024 	ldr	r3, [pc, #36]	; c384 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x104>
    c35c:	e59f1024 	ldr	r1, [pc, #36]	; c388 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x108>
    c360:	eb00695a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c364:	e3a02096 	mov	r2, #150	; 0x96
    c368:	e59f1004 	ldr	r1, [pc, #4]	; c374 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf4>
    c36c:	e59f0004 	ldr	r0, [pc, #4]	; c378 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    c370:	eb006126 	bl	24810 <assertion_failed>
    c374:	0003f7c0 	.word	0x0003f7c0
    c378:	0003fe24 	.word	0x0003fe24
    c37c:	0003f7d8 	.word	0x0003f7d8
    c380:	00000271 	.word	0x00000271
    c384:	0003f7fc 	.word	0x0003f7fc
    c388:	0003f810 	.word	0x0003f810

0000c38c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
    c38c:	e59f3034 	ldr	r3, [pc, #52]	; c3c8 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x3c>
    c390:	e92d4010 	push	{r4, lr}
    c394:	e5803000 	str	r3, [r0]
    c398:	e1a04000 	mov	r4, r0
    c39c:	eb0076db 	bl	29f10 <CTimer::Get()>
    c3a0:	e3a03006 	mov	r3, #6
    c3a4:	e3500000 	cmp	r0, #0
    c3a8:	e9840009 	stmib	r4, {r0, r3}
    c3ac:	0a000001 	beq	c3b8 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x2c>
    c3b0:	e1a00004 	mov	r0, r4
    c3b4:	e8bd8010 	pop	{r4, pc}
    c3b8:	e3a0202e 	mov	r2, #46	; 0x2e
    c3bc:	e59f1008 	ldr	r1, [pc, #8]	; c3cc <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x40>
    c3c0:	e59f0008 	ldr	r0, [pc, #8]	; c3d0 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x44>
    c3c4:	eb006111 	bl	24810 <assertion_failed>
    c3c8:	0003f7a4 	.word	0x0003f7a4
    c3cc:	0003f7c0 	.word	0x0003f7c0
    c3d0:	0003f280 	.word	0x0003f280

0000c3d4 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
    c3d4:	e3500010 	cmp	r0, #16
    c3d8:	e92d4010 	push	{r4, lr}
    c3dc:	1a000005 	bne	c3f8 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x24>
    c3e0:	e59f3030 	ldr	r3, [pc, #48]	; c418 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x44>
    c3e4:	e5930000 	ldr	r0, [r3]
    c3e8:	e3500000 	cmp	r0, #0
    c3ec:	0a000005 	beq	c408 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x34>
    c3f0:	e8bd4010 	pop	{r4, lr}
    c3f4:	ea00620b 	b	24c28 <CClassAllocator::Allocate()>
    c3f8:	e3a020bd 	mov	r2, #189	; 0xbd
    c3fc:	e59f1018 	ldr	r1, [pc, #24]	; c41c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    c400:	e59f0018 	ldr	r0, [pc, #24]	; c420 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x4c>
    c404:	eb006101 	bl	24810 <assertion_failed>
    c408:	e3a020bd 	mov	r2, #189	; 0xbd
    c40c:	e59f1008 	ldr	r1, [pc, #8]	; c41c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    c410:	e59f000c 	ldr	r0, [pc, #12]	; c424 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x50>
    c414:	eb0060fd 	bl	24810 <assertion_failed>
    c418:	0004e1e0 	.word	0x0004e1e0
    c41c:	0003f7c0 	.word	0x0003f7c0
    c420:	0003f818 	.word	0x0003f818
    c424:	0003f84c 	.word	0x0003f84c

0000c428 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
    c428:	e3510010 	cmp	r1, #16
    c42c:	e92d4010 	push	{r4, lr}
    c430:	1a000007 	bne	c454 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x2c>
    c434:	e59f3038 	ldr	r3, [pc, #56]	; c474 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x4c>
    c438:	e5933000 	ldr	r3, [r3]
    c43c:	e3530000 	cmp	r3, #0
    c440:	0a000007 	beq	c464 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x3c>
    c444:	e8bd4010 	pop	{r4, lr}
    c448:	e1a01000 	mov	r1, r0
    c44c:	e1a00003 	mov	r0, r3
    c450:	ea00622f 	b	24d14 <CClassAllocator::Free(void*)>
    c454:	e3a020bd 	mov	r2, #189	; 0xbd
    c458:	e59f1018 	ldr	r1, [pc, #24]	; c478 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x50>
    c45c:	e59f0018 	ldr	r0, [pc, #24]	; c47c <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x54>
    c460:	eb0060ea 	bl	24810 <assertion_failed>
    c464:	e3a020bd 	mov	r2, #189	; 0xbd
    c468:	e59f1008 	ldr	r1, [pc, #8]	; c478 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x50>
    c46c:	e59f000c 	ldr	r0, [pc, #12]	; c480 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x58>
    c470:	eb0060e6 	bl	24810 <assertion_failed>
    c474:	0004e1e0 	.word	0x0004e1e0
    c478:	0003f7c0 	.word	0x0003f7c0
    c47c:	0003f818 	.word	0x0003f818
    c480:	0003f84c 	.word	0x0003f84c

0000c484 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    c484:	e92d4010 	push	{r4, lr}
    c488:	e1a04000 	mov	r4, r0
    c48c:	e3a01010 	mov	r1, #16
    c490:	ebffffe4 	bl	c428 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>
    c494:	e1a00004 	mov	r0, r4
    c498:	e8bd8010 	pop	{r4, pc}

0000c49c <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
    c49c:	e92d4070 	push	{r4, r5, r6, lr}
    c4a0:	e59f4040 	ldr	r4, [pc, #64]	; c4e8 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x4c>
    c4a4:	e5943000 	ldr	r3, [r4]
    c4a8:	e3530000 	cmp	r3, #0
    c4ac:	1a000009 	bne	c4d8 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x3c>
    c4b0:	e1a05000 	mov	r5, r0
    c4b4:	e3a0001c 	mov	r0, #28
    c4b8:	eb007af1 	bl	2b084 <operator new(unsigned int)>
    c4bc:	e1a06000 	mov	r6, r0
    c4c0:	e1a02005 	mov	r2, r5
    c4c4:	e59f3020 	ldr	r3, [pc, #32]	; c4ec <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x50>
    c4c8:	e3a01010 	mov	r1, #16
    c4cc:	eb0061bc 	bl	24bc4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c4d0:	e5846000 	str	r6, [r4]
    c4d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    c4d8:	e3a020bd 	mov	r2, #189	; 0xbd
    c4dc:	e59f100c 	ldr	r1, [pc, #12]	; c4f0 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x54>
    c4e0:	e59f000c 	ldr	r0, [pc, #12]	; c4f4 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x58>
    c4e4:	eb0060c9 	bl	24810 <assertion_failed>
    c4e8:	0004e1e0 	.word	0x0004e1e0
    c4ec:	0003f874 	.word	0x0003f874
    c4f0:	0003f7c0 	.word	0x0003f7c0
    c4f4:	0003f860 	.word	0x0003f860

0000c4f8 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    c4f8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c4fc:	e59f4054 	ldr	r4, [pc, #84]	; c558 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    c500:	e1a05000 	mov	r5, r0
    c504:	e5940000 	ldr	r0, [r4]
    c508:	e24dd00c 	sub	sp, sp, #12
    c50c:	e3500000 	cmp	r0, #0
    c510:	1a00000c 	bne	c548 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    c514:	e1a06001 	mov	r6, r1
    c518:	e3a0001c 	mov	r0, #28
    c51c:	eb007ad8 	bl	2b084 <operator new(unsigned int)>
    c520:	e59f1034 	ldr	r1, [pc, #52]	; c55c <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    c524:	e1a03006 	mov	r3, r6
    c528:	e58d1000 	str	r1, [sp]
    c52c:	e1a02005 	mov	r2, r5
    c530:	e3a01010 	mov	r1, #16
    c534:	e1a07000 	mov	r7, r0
    c538:	eb0061ad 	bl	24bf4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c53c:	e5847000 	str	r7, [r4]
    c540:	e28dd00c 	add	sp, sp, #12
    c544:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c548:	e3a020bd 	mov	r2, #189	; 0xbd
    c54c:	e59f100c 	ldr	r1, [pc, #12]	; c560 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    c550:	e59f000c 	ldr	r0, [pc, #12]	; c564 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    c554:	eb0060ad 	bl	24810 <assertion_failed>
    c558:	0004e1e0 	.word	0x0004e1e0
    c55c:	0003f874 	.word	0x0003f874
    c560:	0003f7c0 	.word	0x0003f7c0
    c564:	0003f860 	.word	0x0003f860

0000c568 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    c568:	e12fff1e 	bx	lr

0000c56c <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
    c56c:	e1d000b6 	ldrh	r0, [r0, #6]
    c570:	e2000001 	and	r0, r0, #1
    c574:	e12fff1e 	bx	lr

0000c578 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
    c578:	e92d4010 	push	{r4, lr}
    c57c:	e3a02026 	mov	r2, #38	; 0x26
    c580:	e59f1004 	ldr	r1, [pc, #4]	; c58c <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x14>
    c584:	e59f0004 	ldr	r0, [pc, #4]	; c590 <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x18>
    c588:	eb0060a0 	bl	24810 <assertion_failed>
    c58c:	0003f8b8 	.word	0x0003f8b8
    c590:	0003fe24 	.word	0x0003fe24

0000c594 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
    c594:	e92d4010 	push	{r4, lr}
    c598:	e3a0202b 	mov	r2, #43	; 0x2b
    c59c:	e59f1004 	ldr	r1, [pc, #4]	; c5a8 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x14>
    c5a0:	e59f0004 	ldr	r0, [pc, #4]	; c5ac <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x18>
    c5a4:	eb006099 	bl	24810 <assertion_failed>
    c5a8:	0003f8b8 	.word	0x0003f8b8
    c5ac:	0003fe24 	.word	0x0003fe24

0000c5b0 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
    c5b0:	e92d4010 	push	{r4, lr}
    c5b4:	e3a02031 	mov	r2, #49	; 0x31
    c5b8:	e59f1004 	ldr	r1, [pc, #4]	; c5c4 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x14>
    c5bc:	e59f0004 	ldr	r0, [pc, #4]	; c5c8 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x18>
    c5c0:	eb006092 	bl	24810 <assertion_failed>
    c5c4:	0003f8b8 	.word	0x0003f8b8
    c5c8:	0003fe24 	.word	0x0003fe24

0000c5cc <CDWHCIFrameSchedulerNoSplit::WaitForFrame()>:
    c5cc:	e92d4030 	push	{r4, r5, lr}
    c5d0:	e24dd014 	sub	sp, sp, #20
    c5d4:	e1a05000 	mov	r5, r0
    c5d8:	e59f1050 	ldr	r1, [pc, #80]	; c630 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x64>
    c5dc:	e28d0004 	add	r0, sp, #4
    c5e0:	eb000192 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c5e4:	e28d0004 	add	r0, sp, #4
    c5e8:	eb000199 	bl	cc54 <CDWHCIRegister::Read()>
    c5ec:	e59f4040 	ldr	r4, [pc, #64]	; c634 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x68>
    c5f0:	e5d53004 	ldrb	r3, [r5, #4]
    c5f4:	e2800001 	add	r0, r0, #1
    c5f8:	e0000004 	and	r0, r0, r4
    c5fc:	e3530000 	cmp	r3, #0
    c600:	e1c500b6 	strh	r0, [r5, #6]
    c604:	1a000005 	bne	c620 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x54>
    c608:	e28d0004 	add	r0, sp, #4
    c60c:	eb000190 	bl	cc54 <CDWHCIRegister::Read()>
    c610:	e1d530b6 	ldrh	r3, [r5, #6]
    c614:	e0000004 	and	r0, r0, r4
    c618:	e1500003 	cmp	r0, r3
    c61c:	1afffff9 	bne	c608 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x3c>
    c620:	e28d0004 	add	r0, sp, #4
    c624:	eb000189 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    c628:	e28dd014 	add	sp, sp, #20
    c62c:	e8bd8030 	pop	{r4, r5, pc}
    c630:	20980408 	.word	0x20980408
    c634:	00003fff 	.word	0x00003fff

0000c638 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
    c638:	e3a02901 	mov	r2, #16384	; 0x4000
    c63c:	e59fc00c 	ldr	ip, [pc, #12]	; c650 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
    c640:	e5c01004 	strb	r1, [r0, #4]
    c644:	e580c000 	str	ip, [r0]
    c648:	e1c020b6 	strh	r2, [r0, #6]
    c64c:	e12fff1e 	bx	lr
    c650:	0003f89c 	.word	0x0003f89c

0000c654 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
    c654:	e3500008 	cmp	r0, #8
    c658:	e92d4010 	push	{r4, lr}
    c65c:	1a000005 	bne	c678 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x24>
    c660:	e59f3030 	ldr	r3, [pc, #48]	; c698 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x44>
    c664:	e5930000 	ldr	r0, [r3]
    c668:	e3500000 	cmp	r0, #0
    c66c:	0a000005 	beq	c688 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x34>
    c670:	e8bd4010 	pop	{r4, lr}
    c674:	ea00616b 	b	24c28 <CClassAllocator::Allocate()>
    c678:	e3a0205a 	mov	r2, #90	; 0x5a
    c67c:	e59f1018 	ldr	r1, [pc, #24]	; c69c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    c680:	e59f0018 	ldr	r0, [pc, #24]	; c6a0 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x4c>
    c684:	eb006061 	bl	24810 <assertion_failed>
    c688:	e3a0205a 	mov	r2, #90	; 0x5a
    c68c:	e59f1008 	ldr	r1, [pc, #8]	; c69c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    c690:	e59f000c 	ldr	r0, [pc, #12]	; c6a4 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x50>
    c694:	eb00605d 	bl	24810 <assertion_failed>
    c698:	0004e1e4 	.word	0x0004e1e4
    c69c:	0003f8b8 	.word	0x0003f8b8
    c6a0:	0003f8d4 	.word	0x0003f8d4
    c6a4:	0003f84c 	.word	0x0003f84c

0000c6a8 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
    c6a8:	e3510008 	cmp	r1, #8
    c6ac:	e92d4010 	push	{r4, lr}
    c6b0:	1a000007 	bne	c6d4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x2c>
    c6b4:	e59f3038 	ldr	r3, [pc, #56]	; c6f4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x4c>
    c6b8:	e5933000 	ldr	r3, [r3]
    c6bc:	e3530000 	cmp	r3, #0
    c6c0:	0a000007 	beq	c6e4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x3c>
    c6c4:	e8bd4010 	pop	{r4, lr}
    c6c8:	e1a01000 	mov	r1, r0
    c6cc:	e1a00003 	mov	r0, r3
    c6d0:	ea00618f 	b	24d14 <CClassAllocator::Free(void*)>
    c6d4:	e3a0205a 	mov	r2, #90	; 0x5a
    c6d8:	e59f1018 	ldr	r1, [pc, #24]	; c6f8 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x50>
    c6dc:	e59f0018 	ldr	r0, [pc, #24]	; c6fc <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x54>
    c6e0:	eb00604a 	bl	24810 <assertion_failed>
    c6e4:	e3a0205a 	mov	r2, #90	; 0x5a
    c6e8:	e59f1008 	ldr	r1, [pc, #8]	; c6f8 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x50>
    c6ec:	e59f000c 	ldr	r0, [pc, #12]	; c700 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x58>
    c6f0:	eb006046 	bl	24810 <assertion_failed>
    c6f4:	0004e1e4 	.word	0x0004e1e4
    c6f8:	0003f8b8 	.word	0x0003f8b8
    c6fc:	0003f8d4 	.word	0x0003f8d4
    c700:	0003f84c 	.word	0x0003f84c

0000c704 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    c704:	e92d4010 	push	{r4, lr}
    c708:	e1a04000 	mov	r4, r0
    c70c:	e3a01008 	mov	r1, #8
    c710:	ebffffe4 	bl	c6a8 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>
    c714:	e1a00004 	mov	r0, r4
    c718:	e8bd8010 	pop	{r4, pc}

0000c71c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
    c71c:	e92d4070 	push	{r4, r5, r6, lr}
    c720:	e59f4040 	ldr	r4, [pc, #64]	; c768 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x4c>
    c724:	e5943000 	ldr	r3, [r4]
    c728:	e3530000 	cmp	r3, #0
    c72c:	1a000009 	bne	c758 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x3c>
    c730:	e1a05000 	mov	r5, r0
    c734:	e3a0001c 	mov	r0, #28
    c738:	eb007a51 	bl	2b084 <operator new(unsigned int)>
    c73c:	e1a06000 	mov	r6, r0
    c740:	e1a02005 	mov	r2, r5
    c744:	e59f3020 	ldr	r3, [pc, #32]	; c76c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x50>
    c748:	e3a01008 	mov	r1, #8
    c74c:	eb00611c 	bl	24bc4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c750:	e5846000 	str	r6, [r4]
    c754:	e8bd8070 	pop	{r4, r5, r6, pc}
    c758:	e3a0205a 	mov	r2, #90	; 0x5a
    c75c:	e59f100c 	ldr	r1, [pc, #12]	; c770 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x54>
    c760:	e59f000c 	ldr	r0, [pc, #12]	; c774 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x58>
    c764:	eb006029 	bl	24810 <assertion_failed>
    c768:	0004e1e4 	.word	0x0004e1e4
    c76c:	0003f904 	.word	0x0003f904
    c770:	0003f8b8 	.word	0x0003f8b8
    c774:	0003f860 	.word	0x0003f860

0000c778 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
    c778:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c77c:	e59f4054 	ldr	r4, [pc, #84]	; c7d8 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    c780:	e1a05000 	mov	r5, r0
    c784:	e5940000 	ldr	r0, [r4]
    c788:	e24dd00c 	sub	sp, sp, #12
    c78c:	e3500000 	cmp	r0, #0
    c790:	1a00000c 	bne	c7c8 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    c794:	e1a06001 	mov	r6, r1
    c798:	e3a0001c 	mov	r0, #28
    c79c:	eb007a38 	bl	2b084 <operator new(unsigned int)>
    c7a0:	e59f1034 	ldr	r1, [pc, #52]	; c7dc <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    c7a4:	e1a03006 	mov	r3, r6
    c7a8:	e58d1000 	str	r1, [sp]
    c7ac:	e1a02005 	mov	r2, r5
    c7b0:	e3a01008 	mov	r1, #8
    c7b4:	e1a07000 	mov	r7, r0
    c7b8:	eb00610d 	bl	24bf4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c7bc:	e5847000 	str	r7, [r4]
    c7c0:	e28dd00c 	add	sp, sp, #12
    c7c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c7c8:	e3a0205a 	mov	r2, #90	; 0x5a
    c7cc:	e59f100c 	ldr	r1, [pc, #12]	; c7e0 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    c7d0:	e59f000c 	ldr	r0, [pc, #12]	; c7e4 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    c7d4:	eb00600d 	bl	24810 <assertion_failed>
    c7d8:	0004e1e4 	.word	0x0004e1e4
    c7dc:	0003f904 	.word	0x0003f904
    c7e0:	0003f8b8 	.word	0x0003f8b8
    c7e4:	0003f860 	.word	0x0003f860

0000c7e8 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    c7e8:	e12fff1e 	bx	lr

0000c7ec <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
    c7ec:	e3a02901 	mov	r2, #16384	; 0x4000
    c7f0:	e3a03000 	mov	r3, #0
    c7f4:	e1c021b0 	strh	r2, [r0, #16]
    c7f8:	e5803008 	str	r3, [r0, #8]
    c7fc:	e12fff1e 	bx	lr

0000c800 <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
    c800:	e1d001b0 	ldrh	r0, [r0, #16]
    c804:	e2000001 	and	r0, r0, #1
    c808:	e12fff1e 	bx	lr

0000c80c <CDWHCIFrameSchedulerPeriodic::WaitForFrame()>:
    c80c:	e92d4010 	push	{r4, lr}
    c810:	e1a04000 	mov	r4, r0
    c814:	e24dd010 	sub	sp, sp, #16
    c818:	e28d0004 	add	r0, sp, #4
    c81c:	e59f1054 	ldr	r1, [pc, #84]	; c878 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x6c>
    c820:	eb000102 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c824:	e1d431b0 	ldrh	r3, [r4, #16]
    c828:	e3530901 	cmp	r3, #16384	; 0x4000
    c82c:	0a000009 	beq	c858 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x4c>
    c830:	e28d0004 	add	r0, sp, #4
    c834:	eb000106 	bl	cc54 <CDWHCIRegister::Read()>
    c838:	e1d431b0 	ldrh	r3, [r4, #16]
    c83c:	e2000007 	and	r0, r0, #7
    c840:	e1500003 	cmp	r0, r3
    c844:	1afffff9 	bne	c830 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
    c848:	e28d0004 	add	r0, sp, #4
    c84c:	eb0000ff 	bl	cc50 <CDWHCIRegister::~CDWHCIRegister()>
    c850:	e28dd010 	add	sp, sp, #16
    c854:	e8bd8010 	pop	{r4, pc}
    c858:	e28d0004 	add	r0, sp, #4
    c85c:	eb0000fc 	bl	cc54 <CDWHCIRegister::Read()>
    c860:	e2803001 	add	r3, r0, #1
    c864:	e2033007 	and	r3, r3, #7
    c868:	e3530006 	cmp	r3, #6
    c86c:	03a03007 	moveq	r3, #7
    c870:	e1c431b0 	strh	r3, [r4, #16]
    c874:	eaffffed 	b	c830 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
    c878:	20980408 	.word	0x20980408

0000c87c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
    c87c:	e5903008 	ldr	r3, [r0, #8]
    c880:	e92d4010 	push	{r4, lr}
    c884:	e2433001 	sub	r3, r3, #1
    c888:	e3530004 	cmp	r3, #4
    c88c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c890:	ea00001c 	b	c908 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x8c>
    c894:	0000c8d0 	.word	0x0000c8d0
    c898:	0000c908 	.word	0x0000c908
    c89c:	0000c8b0 	.word	0x0000c8b0
    c8a0:	0000c8a8 	.word	0x0000c8a8
    c8a4:	0000c8a8 	.word	0x0000c8a8
    c8a8:	e3a00000 	mov	r0, #0
    c8ac:	e8bd8010 	pop	{r4, pc}
    c8b0:	e1d031b0 	ldrh	r3, [r0, #16]
    c8b4:	e3530901 	cmp	r3, #16384	; 0x4000
    c8b8:	0a000016 	beq	c918 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x9c>
    c8bc:	e2833001 	add	r3, r3, #1
    c8c0:	e2033007 	and	r3, r3, #7
    c8c4:	e1c031b0 	strh	r3, [r0, #16]
    c8c8:	e3a00001 	mov	r0, #1
    c8cc:	e8bd8010 	pop	{r4, pc}
    c8d0:	e3a02002 	mov	r2, #2
    c8d4:	e1d031b0 	ldrh	r3, [r0, #16]
    c8d8:	e5802008 	str	r2, [r0, #8]
    c8dc:	e3530901 	cmp	r3, #16384	; 0x4000
    c8e0:	0a000010 	beq	c928 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xac>
    c8e4:	e3530005 	cmp	r3, #5
    c8e8:	13a02003 	movne	r2, #3
    c8ec:	03a02002 	moveq	r2, #2
    c8f0:	e2833002 	add	r3, r3, #2
    c8f4:	e2033007 	and	r3, r3, #7
    c8f8:	e1c031b0 	strh	r3, [r0, #16]
    c8fc:	e580200c 	str	r2, [r0, #12]
    c900:	e3a00001 	mov	r0, #1
    c904:	e8bd8010 	pop	{r4, pc}
    c908:	e3a0206e 	mov	r2, #110	; 0x6e
    c90c:	e59f1024 	ldr	r1, [pc, #36]	; c938 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    c910:	e59f0024 	ldr	r0, [pc, #36]	; c93c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc0>
    c914:	eb005fbd 	bl	24810 <assertion_failed>
    c918:	e3a02062 	mov	r2, #98	; 0x62
    c91c:	e59f1014 	ldr	r1, [pc, #20]	; c938 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    c920:	e59f0018 	ldr	r0, [pc, #24]	; c940 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc4>
    c924:	eb005fb9 	bl	24810 <assertion_failed>
    c928:	e3a02054 	mov	r2, #84	; 0x54
    c92c:	e59f1004 	ldr	r1, [pc, #4]	; c938 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    c930:	e59f0008 	ldr	r0, [pc, #8]	; c940 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc4>
    c934:	eb005fb5 	bl	24810 <assertion_failed>
    c938:	0003f944 	.word	0x0003f944
    c93c:	0003fe24 	.word	0x0003fe24
    c940:	0003f95c 	.word	0x0003f95c

0000c944 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
    c944:	e92d4010 	push	{r4, lr}
    c948:	e5903008 	ldr	r3, [r0, #8]
    c94c:	e24dd010 	sub	sp, sp, #16
    c950:	e3530000 	cmp	r3, #0
    c954:	e1a04000 	mov	r4, r0
    c958:	0a000014 	beq	c9b0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x6c>
    c95c:	e2433002 	sub	r3, r3, #2
    c960:	e3530001 	cmp	r3, #1
    c964:	8a00000d 	bhi	c9a0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x5c>
    c968:	e3110001 	tst	r1, #1
    c96c:	13a03004 	movne	r3, #4
    c970:	15803008 	strne	r3, [r0, #8]
    c974:	1a000007 	bne	c998 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    c978:	e3110060 	tst	r1, #96	; 0x60
    c97c:	1a000013 	bne	c9d0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x8c>
    c980:	e3110010 	tst	r1, #16
    c984:	0a00001e 	beq	ca04 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xc0>
    c988:	e59f00a4 	ldr	r0, [pc, #164]	; ca34 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf0>
    c98c:	eb00752d 	bl	29e48 <CTimer::SimpleusDelay(unsigned int)>
    c990:	e3a03005 	mov	r3, #5
    c994:	e5843008 	str	r3, [r4, #8]
    c998:	e28dd010 	add	sp, sp, #16
    c99c:	e8bd8010 	pop	{r4, pc}
    c9a0:	e3a020a6 	mov	r2, #166	; 0xa6
    c9a4:	e59f108c 	ldr	r1, [pc, #140]	; ca38 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    c9a8:	e59f008c 	ldr	r0, [pc, #140]	; ca3c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
    c9ac:	eb005f97 	bl	24810 <assertion_failed>
    c9b0:	e3110020 	tst	r1, #32
    c9b4:	13a03001 	movne	r3, #1
    c9b8:	15803008 	strne	r3, [r0, #8]
    c9bc:	1afffff5 	bne	c998 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    c9c0:	e3a0207a 	mov	r2, #122	; 0x7a
    c9c4:	e59f106c 	ldr	r1, [pc, #108]	; ca38 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    c9c8:	e59f0070 	ldr	r0, [pc, #112]	; ca40 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xfc>
    c9cc:	eb005f8f 	bl	24810 <assertion_failed>
    c9d0:	e590300c 	ldr	r3, [r0, #12]
    c9d4:	e3530000 	cmp	r3, #0
    c9d8:	e2433001 	sub	r3, r3, #1
    c9dc:	e580300c 	str	r3, [r0, #12]
    c9e0:	13a03003 	movne	r3, #3
    c9e4:	15803008 	strne	r3, [r0, #8]
    c9e8:	1affffea 	bne	c998 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    c9ec:	e3a03005 	mov	r3, #5
    c9f0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    c9f4:	e5843008 	str	r3, [r4, #8]
    c9f8:	e28dd010 	add	sp, sp, #16
    c9fc:	e8bd4010 	pop	{r4, lr}
    ca00:	ea007510 	b	29e48 <CTimer::SimpleusDelay(unsigned int)>
    ca04:	e58d100c 	str	r1, [sp, #12]
    ca08:	eb006873 	bl	26bdc <CLogger::Get()>
    ca0c:	e59d100c 	ldr	r1, [sp, #12]
    ca10:	e3a02001 	mov	r2, #1
    ca14:	e58d1000 	str	r1, [sp]
    ca18:	e59f3024 	ldr	r3, [pc, #36]	; ca44 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x100>
    ca1c:	e59f1024 	ldr	r1, [pc, #36]	; ca48 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x104>
    ca20:	eb0067aa 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ca24:	e3a020a1 	mov	r2, #161	; 0xa1
    ca28:	e59f1008 	ldr	r1, [pc, #8]	; ca38 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    ca2c:	e59f0008 	ldr	r0, [pc, #8]	; ca3c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
    ca30:	eb005f76 	bl	24810 <assertion_failed>
    ca34:	00000271 	.word	0x00000271
    ca38:	0003f944 	.word	0x0003f944
    ca3c:	0003fe24 	.word	0x0003fe24
    ca40:	0003f7d8 	.word	0x0003f7d8
    ca44:	0003f7fc 	.word	0x0003f7fc
    ca48:	0003f810 	.word	0x0003f810

0000ca4c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
    ca4c:	e59f303c 	ldr	r3, [pc, #60]	; ca90 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x44>
    ca50:	e92d4010 	push	{r4, lr}
    ca54:	e5803000 	str	r3, [r0]
    ca58:	e1a04000 	mov	r4, r0
    ca5c:	eb00752b 	bl	29f10 <CTimer::Get()>
    ca60:	e3a02006 	mov	r2, #6
    ca64:	e3a03901 	mov	r3, #16384	; 0x4000
    ca68:	e3500000 	cmp	r0, #0
    ca6c:	e9840005 	stmib	r4, {r0, r2}
    ca70:	e1c431b0 	strh	r3, [r4, #16]
    ca74:	0a000001 	beq	ca80 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x34>
    ca78:	e1a00004 	mov	r0, r4
    ca7c:	e8bd8010 	pop	{r4, pc}
    ca80:	e3a02034 	mov	r2, #52	; 0x34
    ca84:	e59f1008 	ldr	r1, [pc, #8]	; ca94 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x48>
    ca88:	e59f0008 	ldr	r0, [pc, #8]	; ca98 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x4c>
    ca8c:	eb005f5f 	bl	24810 <assertion_failed>
    ca90:	0003f928 	.word	0x0003f928
    ca94:	0003f944 	.word	0x0003f944
    ca98:	0003f280 	.word	0x0003f280

0000ca9c <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
    ca9c:	e3500014 	cmp	r0, #20
    caa0:	e92d4010 	push	{r4, lr}
    caa4:	1a000005 	bne	cac0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x24>
    caa8:	e59f3030 	ldr	r3, [pc, #48]	; cae0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x44>
    caac:	e5930000 	ldr	r0, [r3]
    cab0:	e3500000 	cmp	r0, #0
    cab4:	0a000005 	beq	cad0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x34>
    cab8:	e8bd4010 	pop	{r4, lr}
    cabc:	ea006059 	b	24c28 <CClassAllocator::Allocate()>
    cac0:	e3a020e2 	mov	r2, #226	; 0xe2
    cac4:	e59f1018 	ldr	r1, [pc, #24]	; cae4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    cac8:	e59f0018 	ldr	r0, [pc, #24]	; cae8 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x4c>
    cacc:	eb005f4f 	bl	24810 <assertion_failed>
    cad0:	e3a020e2 	mov	r2, #226	; 0xe2
    cad4:	e59f1008 	ldr	r1, [pc, #8]	; cae4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    cad8:	e59f000c 	ldr	r0, [pc, #12]	; caec <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x50>
    cadc:	eb005f4b 	bl	24810 <assertion_failed>
    cae0:	0004e1e8 	.word	0x0004e1e8
    cae4:	0003f944 	.word	0x0003f944
    cae8:	0003f97c 	.word	0x0003f97c
    caec:	0003f84c 	.word	0x0003f84c

0000caf0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
    caf0:	e3510014 	cmp	r1, #20
    caf4:	e92d4010 	push	{r4, lr}
    caf8:	1a000007 	bne	cb1c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x2c>
    cafc:	e59f3038 	ldr	r3, [pc, #56]	; cb3c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x4c>
    cb00:	e5933000 	ldr	r3, [r3]
    cb04:	e3530000 	cmp	r3, #0
    cb08:	0a000007 	beq	cb2c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x3c>
    cb0c:	e8bd4010 	pop	{r4, lr}
    cb10:	e1a01000 	mov	r1, r0
    cb14:	e1a00003 	mov	r0, r3
    cb18:	ea00607d 	b	24d14 <CClassAllocator::Free(void*)>
    cb1c:	e3a020e2 	mov	r2, #226	; 0xe2
    cb20:	e59f1018 	ldr	r1, [pc, #24]	; cb40 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x50>
    cb24:	e59f0018 	ldr	r0, [pc, #24]	; cb44 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x54>
    cb28:	eb005f38 	bl	24810 <assertion_failed>
    cb2c:	e3a020e2 	mov	r2, #226	; 0xe2
    cb30:	e59f1008 	ldr	r1, [pc, #8]	; cb40 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x50>
    cb34:	e59f000c 	ldr	r0, [pc, #12]	; cb48 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x58>
    cb38:	eb005f34 	bl	24810 <assertion_failed>
    cb3c:	0004e1e8 	.word	0x0004e1e8
    cb40:	0003f944 	.word	0x0003f944
    cb44:	0003f97c 	.word	0x0003f97c
    cb48:	0003f84c 	.word	0x0003f84c

0000cb4c <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    cb4c:	e92d4010 	push	{r4, lr}
    cb50:	e1a04000 	mov	r4, r0
    cb54:	e3a01014 	mov	r1, #20
    cb58:	ebffffe4 	bl	caf0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>
    cb5c:	e1a00004 	mov	r0, r4
    cb60:	e8bd8010 	pop	{r4, pc}

0000cb64 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
    cb64:	e92d4070 	push	{r4, r5, r6, lr}
    cb68:	e59f4040 	ldr	r4, [pc, #64]	; cbb0 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x4c>
    cb6c:	e5943000 	ldr	r3, [r4]
    cb70:	e3530000 	cmp	r3, #0
    cb74:	1a000009 	bne	cba0 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x3c>
    cb78:	e1a05000 	mov	r5, r0
    cb7c:	e3a0001c 	mov	r0, #28
    cb80:	eb00793f 	bl	2b084 <operator new(unsigned int)>
    cb84:	e1a06000 	mov	r6, r0
    cb88:	e1a02005 	mov	r2, r5
    cb8c:	e59f3020 	ldr	r3, [pc, #32]	; cbb4 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x50>
    cb90:	e3a01014 	mov	r1, #20
    cb94:	eb00600a 	bl	24bc4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    cb98:	e5846000 	str	r6, [r4]
    cb9c:	e8bd8070 	pop	{r4, r5, r6, pc}
    cba0:	e3a020e2 	mov	r2, #226	; 0xe2
    cba4:	e59f100c 	ldr	r1, [pc, #12]	; cbb8 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x54>
    cba8:	e59f000c 	ldr	r0, [pc, #12]	; cbbc <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x58>
    cbac:	eb005f17 	bl	24810 <assertion_failed>
    cbb0:	0004e1e8 	.word	0x0004e1e8
    cbb4:	0003f9ac 	.word	0x0003f9ac
    cbb8:	0003f944 	.word	0x0003f944
    cbbc:	0003f860 	.word	0x0003f860

0000cbc0 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    cbc0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    cbc4:	e59f4054 	ldr	r4, [pc, #84]	; cc20 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    cbc8:	e1a05000 	mov	r5, r0
    cbcc:	e5940000 	ldr	r0, [r4]
    cbd0:	e24dd00c 	sub	sp, sp, #12
    cbd4:	e3500000 	cmp	r0, #0
    cbd8:	1a00000c 	bne	cc10 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    cbdc:	e1a06001 	mov	r6, r1
    cbe0:	e3a0001c 	mov	r0, #28
    cbe4:	eb007926 	bl	2b084 <operator new(unsigned int)>
    cbe8:	e59f1034 	ldr	r1, [pc, #52]	; cc24 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    cbec:	e1a03006 	mov	r3, r6
    cbf0:	e58d1000 	str	r1, [sp]
    cbf4:	e1a02005 	mov	r2, r5
    cbf8:	e3a01014 	mov	r1, #20
    cbfc:	e1a07000 	mov	r7, r0
    cc00:	eb005ffb 	bl	24bf4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    cc04:	e5847000 	str	r7, [r4]
    cc08:	e28dd00c 	add	sp, sp, #12
    cc0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    cc10:	e3a020e2 	mov	r2, #226	; 0xe2
    cc14:	e59f100c 	ldr	r1, [pc, #12]	; cc28 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    cc18:	e59f000c 	ldr	r0, [pc, #12]	; cc2c <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    cc1c:	eb005efb 	bl	24810 <assertion_failed>
    cc20:	0004e1e8 	.word	0x0004e1e8
    cc24:	0003f9ac 	.word	0x0003f9ac
    cc28:	0003f944 	.word	0x0003f944
    cc2c:	0003f860 	.word	0x0003f860

0000cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    cc30:	e3a02000 	mov	r2, #0
    cc34:	e5801004 	str	r1, [r0, #4]
    cc38:	e5c02000 	strb	r2, [r0]
    cc3c:	e12fff1e 	bx	lr

0000cc40 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    cc40:	e3a0c001 	mov	ip, #1
    cc44:	e9800006 	stmib	r0, {r1, r2}
    cc48:	e5c0c000 	strb	ip, [r0]
    cc4c:	e12fff1e 	bx	lr

0000cc50 <CDWHCIRegister::~CDWHCIRegister()>:
    cc50:	e12fff1e 	bx	lr

0000cc54 <CDWHCIRegister::Read()>:
    cc54:	e1a03000 	mov	r3, r0
    cc58:	e3a02001 	mov	r2, #1
    cc5c:	e5901004 	ldr	r1, [r0, #4]
    cc60:	e5910000 	ldr	r0, [r1]
    cc64:	e5c32000 	strb	r2, [r3]
    cc68:	e5830008 	str	r0, [r3, #8]
    cc6c:	e12fff1e 	bx	lr

0000cc70 <CDWHCIRegister::Write()>:
    cc70:	e5d03000 	ldrb	r3, [r0]
    cc74:	e3530000 	cmp	r3, #0
    cc78:	0a000003 	beq	cc8c <CDWHCIRegister::Write()+0x1c>
    cc7c:	e5902008 	ldr	r2, [r0, #8]
    cc80:	e5903004 	ldr	r3, [r0, #4]
    cc84:	e5832000 	str	r2, [r3]
    cc88:	e12fff1e 	bx	lr
    cc8c:	e92d4010 	push	{r4, lr}
    cc90:	e3a02035 	mov	r2, #53	; 0x35
    cc94:	e59f1004 	ldr	r1, [pc, #4]	; cca0 <CDWHCIRegister::Write()+0x30>
    cc98:	e59f0004 	ldr	r0, [pc, #4]	; cca4 <CDWHCIRegister::Write()+0x34>
    cc9c:	eb005edb 	bl	24810 <assertion_failed>
    cca0:	0003f9cc 	.word	0x0003f9cc
    cca4:	0003f9e0 	.word	0x0003f9e0

0000cca8 <CDWHCIRegister::Get() const>:
    cca8:	e5d03000 	ldrb	r3, [r0]
    ccac:	e3530000 	cmp	r3, #0
    ccb0:	0a000001 	beq	ccbc <CDWHCIRegister::Get() const+0x14>
    ccb4:	e5900008 	ldr	r0, [r0, #8]
    ccb8:	e12fff1e 	bx	lr
    ccbc:	e92d4010 	push	{r4, lr}
    ccc0:	e3a0203b 	mov	r2, #59	; 0x3b
    ccc4:	e59f1004 	ldr	r1, [pc, #4]	; ccd0 <CDWHCIRegister::Get() const+0x28>
    ccc8:	e59f0004 	ldr	r0, [pc, #4]	; ccd4 <CDWHCIRegister::Get() const+0x2c>
    cccc:	eb005ecf 	bl	24810 <assertion_failed>
    ccd0:	0003f9cc 	.word	0x0003f9cc
    ccd4:	0003f9e0 	.word	0x0003f9e0

0000ccd8 <CDWHCIRegister::Set(unsigned int)>:
    ccd8:	e3a03001 	mov	r3, #1
    ccdc:	e5801008 	str	r1, [r0, #8]
    cce0:	e5c03000 	strb	r3, [r0]
    cce4:	e12fff1e 	bx	lr

0000cce8 <CDWHCIRegister::IsSet(unsigned int) const>:
    cce8:	e5d03000 	ldrb	r3, [r0]
    ccec:	e3530000 	cmp	r3, #0
    ccf0:	0a000004 	beq	cd08 <CDWHCIRegister::IsSet(unsigned int) const+0x20>
    ccf4:	e5903008 	ldr	r3, [r0, #8]
    ccf8:	e1110003 	tst	r1, r3
    ccfc:	13a00001 	movne	r0, #1
    cd00:	03a00000 	moveq	r0, #0
    cd04:	e12fff1e 	bx	lr
    cd08:	e92d4010 	push	{r4, lr}
    cd0c:	e3a02047 	mov	r2, #71	; 0x47
    cd10:	e59f1004 	ldr	r1, [pc, #4]	; cd1c <CDWHCIRegister::IsSet(unsigned int) const+0x34>
    cd14:	e59f0004 	ldr	r0, [pc, #4]	; cd20 <CDWHCIRegister::IsSet(unsigned int) const+0x38>
    cd18:	eb005ebc 	bl	24810 <assertion_failed>
    cd1c:	0003f9cc 	.word	0x0003f9cc
    cd20:	0003f9e0 	.word	0x0003f9e0

0000cd24 <CDWHCIRegister::And(unsigned int)>:
    cd24:	e5d03000 	ldrb	r3, [r0]
    cd28:	e3530000 	cmp	r3, #0
    cd2c:	0a000003 	beq	cd40 <CDWHCIRegister::And(unsigned int)+0x1c>
    cd30:	e5903008 	ldr	r3, [r0, #8]
    cd34:	e0011003 	and	r1, r1, r3
    cd38:	e5801008 	str	r1, [r0, #8]
    cd3c:	e12fff1e 	bx	lr
    cd40:	e92d4010 	push	{r4, lr}
    cd44:	e3a0204d 	mov	r2, #77	; 0x4d
    cd48:	e59f1004 	ldr	r1, [pc, #4]	; cd54 <CDWHCIRegister::And(unsigned int)+0x30>
    cd4c:	e59f0004 	ldr	r0, [pc, #4]	; cd58 <CDWHCIRegister::And(unsigned int)+0x34>
    cd50:	eb005eae 	bl	24810 <assertion_failed>
    cd54:	0003f9cc 	.word	0x0003f9cc
    cd58:	0003f9e0 	.word	0x0003f9e0

0000cd5c <CDWHCIRegister::Or(unsigned int)>:
    cd5c:	e5d03000 	ldrb	r3, [r0]
    cd60:	e3530000 	cmp	r3, #0
    cd64:	0a000003 	beq	cd78 <CDWHCIRegister::Or(unsigned int)+0x1c>
    cd68:	e5903008 	ldr	r3, [r0, #8]
    cd6c:	e1831001 	orr	r1, r3, r1
    cd70:	e5801008 	str	r1, [r0, #8]
    cd74:	e12fff1e 	bx	lr
    cd78:	e92d4010 	push	{r4, lr}
    cd7c:	e3a02053 	mov	r2, #83	; 0x53
    cd80:	e59f1004 	ldr	r1, [pc, #4]	; cd8c <CDWHCIRegister::Or(unsigned int)+0x30>
    cd84:	e59f0004 	ldr	r0, [pc, #4]	; cd90 <CDWHCIRegister::Or(unsigned int)+0x34>
    cd88:	eb005ea0 	bl	24810 <assertion_failed>
    cd8c:	0003f9cc 	.word	0x0003f9cc
    cd90:	0003f9e0 	.word	0x0003f9e0

0000cd94 <CDWHCIRegister::ClearBit(unsigned int)>:
    cd94:	e5d03000 	ldrb	r3, [r0]
    cd98:	e92d4010 	push	{r4, lr}
    cd9c:	e3530000 	cmp	r3, #0
    cda0:	0a000006 	beq	cdc0 <CDWHCIRegister::ClearBit(unsigned int)+0x2c>
    cda4:	e351001f 	cmp	r1, #31
    cda8:	8a000008 	bhi	cdd0 <CDWHCIRegister::ClearBit(unsigned int)+0x3c>
    cdac:	e3a02001 	mov	r2, #1
    cdb0:	e5903008 	ldr	r3, [r0, #8]
    cdb4:	e1c31112 	bic	r1, r3, r2, lsl r1
    cdb8:	e5801008 	str	r1, [r0, #8]
    cdbc:	e8bd8010 	pop	{r4, pc}
    cdc0:	e3a02059 	mov	r2, #89	; 0x59
    cdc4:	e59f1014 	ldr	r1, [pc, #20]	; cde0 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    cdc8:	e59f0014 	ldr	r0, [pc, #20]	; cde4 <CDWHCIRegister::ClearBit(unsigned int)+0x50>
    cdcc:	eb005e8f 	bl	24810 <assertion_failed>
    cdd0:	e3a0205a 	mov	r2, #90	; 0x5a
    cdd4:	e59f1004 	ldr	r1, [pc, #4]	; cde0 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    cdd8:	e59f0008 	ldr	r0, [pc, #8]	; cde8 <CDWHCIRegister::ClearBit(unsigned int)+0x54>
    cddc:	eb005e8b 	bl	24810 <assertion_failed>
    cde0:	0003f9cc 	.word	0x0003f9cc
    cde4:	0003f9e0 	.word	0x0003f9e0
    cde8:	0003f9ec 	.word	0x0003f9ec

0000cdec <CDWHCIRegister::SetBit(unsigned int)>:
    cdec:	e5d03000 	ldrb	r3, [r0]
    cdf0:	e92d4010 	push	{r4, lr}
    cdf4:	e3530000 	cmp	r3, #0
    cdf8:	0a000006 	beq	ce18 <CDWHCIRegister::SetBit(unsigned int)+0x2c>
    cdfc:	e351001f 	cmp	r1, #31
    ce00:	8a000008 	bhi	ce28 <CDWHCIRegister::SetBit(unsigned int)+0x3c>
    ce04:	e3a02001 	mov	r2, #1
    ce08:	e5903008 	ldr	r3, [r0, #8]
    ce0c:	e1831112 	orr	r1, r3, r2, lsl r1
    ce10:	e5801008 	str	r1, [r0, #8]
    ce14:	e8bd8010 	pop	{r4, pc}
    ce18:	e3a02060 	mov	r2, #96	; 0x60
    ce1c:	e59f1014 	ldr	r1, [pc, #20]	; ce38 <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    ce20:	e59f0014 	ldr	r0, [pc, #20]	; ce3c <CDWHCIRegister::SetBit(unsigned int)+0x50>
    ce24:	eb005e79 	bl	24810 <assertion_failed>
    ce28:	e3a02061 	mov	r2, #97	; 0x61
    ce2c:	e59f1004 	ldr	r1, [pc, #4]	; ce38 <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    ce30:	e59f0008 	ldr	r0, [pc, #8]	; ce40 <CDWHCIRegister::SetBit(unsigned int)+0x54>
    ce34:	eb005e75 	bl	24810 <assertion_failed>
    ce38:	0003f9cc 	.word	0x0003f9cc
    ce3c:	0003f9e0 	.word	0x0003f9e0
    ce40:	0003f9ec 	.word	0x0003f9ec

0000ce44 <CDWHCIRegister::ClearAll()>:
    ce44:	e3a02000 	mov	r2, #0
    ce48:	e3a03001 	mov	r3, #1
    ce4c:	e5802008 	str	r2, [r0, #8]
    ce50:	e5c03000 	strb	r3, [r0]
    ce54:	e12fff1e 	bx	lr

0000ce58 <CDWHCIRegister::SetAll()>:
    ce58:	e3e02000 	mvn	r2, #0
    ce5c:	e3a03001 	mov	r3, #1
    ce60:	e5802008 	str	r2, [r0, #8]
    ce64:	e5c03000 	strb	r3, [r0]
    ce68:	e12fff1e 	bx	lr

0000ce6c <CDWHCIRegister::Dump() const>:
    ce6c:	e92d4010 	push	{r4, lr}
    ce70:	e5d03000 	ldrb	r3, [r0]
    ce74:	e24dd008 	sub	sp, sp, #8
    ce78:	e3530000 	cmp	r3, #0
    ce7c:	e1a04000 	mov	r4, r0
    ce80:	1a00000a 	bne	ceb0 <CDWHCIRegister::Dump() const+0x44>
    ce84:	eb006754 	bl	26bdc <CLogger::Get()>
    ce88:	e5942004 	ldr	r2, [r4, #4]
    ce8c:	e59f3050 	ldr	r3, [pc, #80]	; cee4 <CDWHCIRegister::Dump() const+0x78>
    ce90:	e1a02a02 	lsl	r2, r2, #20
    ce94:	e1a02a22 	lsr	r2, r2, #20
    ce98:	e58d2000 	str	r2, [sp]
    ce9c:	e59f1044 	ldr	r1, [pc, #68]	; cee8 <CDWHCIRegister::Dump() const+0x7c>
    cea0:	e3a02004 	mov	r2, #4
    cea4:	eb006689 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cea8:	e28dd008 	add	sp, sp, #8
    ceac:	e8bd8010 	pop	{r4, pc}
    ceb0:	eb006749 	bl	26bdc <CLogger::Get()>
    ceb4:	e5943004 	ldr	r3, [r4, #4]
    ceb8:	e5942008 	ldr	r2, [r4, #8]
    cebc:	e1a03a03 	lsl	r3, r3, #20
    cec0:	e1a03a23 	lsr	r3, r3, #20
    cec4:	e58d3000 	str	r3, [sp]
    cec8:	e58d2004 	str	r2, [sp, #4]
    cecc:	e59f3018 	ldr	r3, [pc, #24]	; ceec <CDWHCIRegister::Dump() const+0x80>
    ced0:	e3a02004 	mov	r2, #4
    ced4:	e59f100c 	ldr	r1, [pc, #12]	; cee8 <CDWHCIRegister::Dump() const+0x7c>
    ced8:	eb00667c 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cedc:	e28dd008 	add	sp, sp, #8
    cee0:	e8bd8010 	pop	{r4, pc}
    cee4:	0003fa2c 	.word	0x0003fa2c
    cee8:	0003fa24 	.word	0x0003fa24
    ceec:	0003fa08 	.word	0x0003fa08

0000cef0 <CDWHCIRootPort::~CDWHCIRootPort()>:
    cef0:	e92d4010 	push	{r4, lr}
    cef4:	e1a04000 	mov	r4, r0
    cef8:	e5900008 	ldr	r0, [r0, #8]
    cefc:	e59f301c 	ldr	r3, [pc, #28]	; cf20 <CDWHCIRootPort::~CDWHCIRootPort()+0x30>
    cf00:	e3500000 	cmp	r0, #0
    cf04:	e5843000 	str	r3, [r4]
    cf08:	0a000002 	beq	cf18 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    cf0c:	e5903000 	ldr	r3, [r0]
    cf10:	e5933004 	ldr	r3, [r3, #4]
    cf14:	e12fff33 	blx	r3
    cf18:	e1a00004 	mov	r0, r4
    cf1c:	e8bd8010 	pop	{r4, pc}
    cf20:	0003fa54 	.word	0x0003fa54

0000cf24 <CDWHCIRootPort::~CDWHCIRootPort()>:
    cf24:	e92d4010 	push	{r4, lr}
    cf28:	e1a04000 	mov	r4, r0
    cf2c:	e5900008 	ldr	r0, [r0, #8]
    cf30:	e59f3028 	ldr	r3, [pc, #40]	; cf60 <CDWHCIRootPort::~CDWHCIRootPort()+0x3c>
    cf34:	e3500000 	cmp	r0, #0
    cf38:	e5843000 	str	r3, [r4]
    cf3c:	0a000002 	beq	cf4c <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    cf40:	e5903000 	ldr	r3, [r0]
    cf44:	e5933004 	ldr	r3, [r3, #4]
    cf48:	e12fff33 	blx	r3
    cf4c:	e1a00004 	mov	r0, r4
    cf50:	e3a0100c 	mov	r1, #12
    cf54:	eb007858 	bl	2b0bc <operator delete(void*, unsigned int)>
    cf58:	e1a00004 	mov	r0, r4
    cf5c:	e8bd8010 	pop	{r4, pc}
    cf60:	0003fa54 	.word	0x0003fa54

0000cf64 <CDWHCIRootPort::RemoveDevice()>:
    cf64:	e92d4010 	push	{r4, lr}
    cf68:	e1a04000 	mov	r4, r0
    cf6c:	e5900004 	ldr	r0, [r0, #4]
    cf70:	e3500000 	cmp	r0, #0
    cf74:	0a00000b 	beq	cfa8 <CDWHCIRootPort::RemoveDevice()+0x44>
    cf78:	e3a01000 	mov	r1, #0
    cf7c:	ebfff359 	bl	9ce8 <CDWHCIDevice::DisableRootPort(bool)>
    cf80:	e5940008 	ldr	r0, [r4, #8]
    cf84:	e3500000 	cmp	r0, #0
    cf88:	0a000002 	beq	cf98 <CDWHCIRootPort::RemoveDevice()+0x34>
    cf8c:	e5903000 	ldr	r3, [r0]
    cf90:	e5933004 	ldr	r3, [r3, #4]
    cf94:	e12fff33 	blx	r3
    cf98:	e3a03000 	mov	r3, #0
    cf9c:	e3a00001 	mov	r0, #1
    cfa0:	e5843008 	str	r3, [r4, #8]
    cfa4:	e8bd8010 	pop	{r4, pc}
    cfa8:	e3a0206d 	mov	r2, #109	; 0x6d
    cfac:	e59f1004 	ldr	r1, [pc, #4]	; cfb8 <CDWHCIRootPort::RemoveDevice()+0x54>
    cfb0:	e59f0004 	ldr	r0, [pc, #4]	; cfbc <CDWHCIRootPort::RemoveDevice()+0x58>
    cfb4:	eb005e15 	bl	24810 <assertion_failed>
    cfb8:	0003fa6c 	.word	0x0003fa6c
    cfbc:	0003fa80 	.word	0x0003fa80

0000cfc0 <CDWHCIRootPort::ReScanDevices()>:
    cfc0:	e92d4010 	push	{r4, lr}
    cfc4:	e5904008 	ldr	r4, [r0, #8]
    cfc8:	e3540000 	cmp	r4, #0
    cfcc:	0a000002 	beq	cfdc <CDWHCIRootPort::ReScanDevices()+0x1c>
    cfd0:	e1a00004 	mov	r0, r4
    cfd4:	e8bd4010 	pop	{r4, lr}
    cfd8:	ea0003f8 	b	dfc0 <CUSBDevice::ReScanDevices()>
    cfdc:	eb0066fe 	bl	26bdc <CLogger::Get()>
    cfe0:	e59f3010 	ldr	r3, [pc, #16]	; cff8 <CDWHCIRootPort::ReScanDevices()+0x38>
    cfe4:	e3a02002 	mov	r2, #2
    cfe8:	e59f100c 	ldr	r1, [pc, #12]	; cffc <CDWHCIRootPort::ReScanDevices()+0x3c>
    cfec:	eb006637 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cff0:	e1a00004 	mov	r0, r4
    cff4:	e8bd8010 	pop	{r4, pc}
    cff8:	0003fa90 	.word	0x0003fa90
    cffc:	0003fa64 	.word	0x0003fa64

0000d000 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
    d000:	e3a02000 	mov	r2, #0
    d004:	e59fc028 	ldr	ip, [pc, #40]	; d034 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x34>
    d008:	e1510002 	cmp	r1, r2
    d00c:	e5801004 	str	r1, [r0, #4]
    d010:	e580c000 	str	ip, [r0]
    d014:	e5802008 	str	r2, [r0, #8]
    d018:	0a000000 	beq	d020 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x20>
    d01c:	e12fff1e 	bx	lr
    d020:	e92d4010 	push	{r4, lr}
    d024:	e3a0201f 	mov	r2, #31
    d028:	e59f1008 	ldr	r1, [pc, #8]	; d038 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x38>
    d02c:	e59f0008 	ldr	r0, [pc, #8]	; d03c <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x3c>
    d030:	eb005df6 	bl	24810 <assertion_failed>
    d034:	0003fa54 	.word	0x0003fa54
    d038:	0003fa6c 	.word	0x0003fa6c
    d03c:	0003fa80 	.word	0x0003fa80

0000d040 <CDWHCIRootPort::Initialize()>:
    d040:	e92d4070 	push	{r4, r5, r6, lr}
    d044:	e1a04000 	mov	r4, r0
    d048:	e5900004 	ldr	r0, [r0, #4]
    d04c:	e3500000 	cmp	r0, #0
    d050:	0a00002b 	beq	d104 <CDWHCIRootPort::Initialize()+0xc4>
    d054:	ebfff2ff 	bl	9c58 <CDWHCIDevice::GetPortSpeed()>
    d058:	e3500004 	cmp	r0, #4
    d05c:	e1a05000 	mov	r5, r0
    d060:	0a000040 	beq	d168 <CDWHCIRootPort::Initialize()+0x128>
    d064:	e5943008 	ldr	r3, [r4, #8]
    d068:	e3530000 	cmp	r3, #0
    d06c:	1a000044 	bne	d184 <CDWHCIRootPort::Initialize()+0x144>
    d070:	e3a00058 	mov	r0, #88	; 0x58
    d074:	eb007802 	bl	2b084 <operator new(unsigned int)>
    d078:	e1a06000 	mov	r6, r0
    d07c:	e1a03004 	mov	r3, r4
    d080:	e1a02005 	mov	r2, r5
    d084:	e5941004 	ldr	r1, [r4, #4]
    d088:	eb000344 	bl	dda0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>
    d08c:	e5846008 	str	r6, [r4, #8]
    d090:	e1a00006 	mov	r0, r6
    d094:	eb0004f6 	bl	e474 <CUSBDevice::Initialize()>
    d098:	e3500000 	cmp	r0, #0
    d09c:	e5940008 	ldr	r0, [r4, #8]
    d0a0:	1a000009 	bne	d0cc <CDWHCIRootPort::Initialize()+0x8c>
    d0a4:	e3500000 	cmp	r0, #0
    d0a8:	0a000002 	beq	d0b8 <CDWHCIRootPort::Initialize()+0x78>
    d0ac:	e5903000 	ldr	r3, [r0]
    d0b0:	e5933004 	ldr	r3, [r3, #4]
    d0b4:	e12fff33 	blx	r3
    d0b8:	e3a00000 	mov	r0, #0
    d0bc:	e1a05000 	mov	r5, r0
    d0c0:	e5840008 	str	r0, [r4, #8]
    d0c4:	e1a00005 	mov	r0, r5
    d0c8:	e8bd8070 	pop	{r4, r5, r6, pc}
    d0cc:	e5903000 	ldr	r3, [r0]
    d0d0:	e593300c 	ldr	r3, [r3, #12]
    d0d4:	e12fff33 	blx	r3
    d0d8:	e2505000 	subs	r5, r0, #0
    d0dc:	1a00000c 	bne	d114 <CDWHCIRootPort::Initialize()+0xd4>
    d0e0:	eb0066bd 	bl	26bdc <CLogger::Get()>
    d0e4:	e59f30a8 	ldr	r3, [pc, #168]	; d194 <CDWHCIRootPort::Initialize()+0x154>
    d0e8:	e3a02002 	mov	r2, #2
    d0ec:	e59f10a4 	ldr	r1, [pc, #164]	; d198 <CDWHCIRootPort::Initialize()+0x158>
    d0f0:	eb0065f6 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d0f4:	e5940008 	ldr	r0, [r4, #8]
    d0f8:	e3500000 	cmp	r0, #0
    d0fc:	1affffea 	bne	d0ac <CDWHCIRootPort::Initialize()+0x6c>
    d100:	eaffffec 	b	d0b8 <CDWHCIRootPort::Initialize()+0x78>
    d104:	e3a0202c 	mov	r2, #44	; 0x2c
    d108:	e59f108c 	ldr	r1, [pc, #140]	; d19c <CDWHCIRootPort::Initialize()+0x15c>
    d10c:	e59f008c 	ldr	r0, [pc, #140]	; d1a0 <CDWHCIRootPort::Initialize()+0x160>
    d110:	eb005dbe 	bl	24810 <assertion_failed>
    d114:	eb0066b0 	bl	26bdc <CLogger::Get()>
    d118:	e59f3084 	ldr	r3, [pc, #132]	; d1a4 <CDWHCIRootPort::Initialize()+0x164>
    d11c:	e3a02004 	mov	r2, #4
    d120:	e59f1070 	ldr	r1, [pc, #112]	; d198 <CDWHCIRootPort::Initialize()+0x158>
    d124:	eb0065e9 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d128:	e5940004 	ldr	r0, [r4, #4]
    d12c:	ebfff2de 	bl	9cac <CDWHCIDevice::OvercurrentDetected()>
    d130:	e3500000 	cmp	r0, #0
    d134:	0affffe2 	beq	d0c4 <CDWHCIRootPort::Initialize()+0x84>
    d138:	eb0066a7 	bl	26bdc <CLogger::Get()>
    d13c:	e59f3064 	ldr	r3, [pc, #100]	; d1a8 <CDWHCIRootPort::Initialize()+0x168>
    d140:	e3a02001 	mov	r2, #1
    d144:	e59f104c 	ldr	r1, [pc, #76]	; d198 <CDWHCIRootPort::Initialize()+0x158>
    d148:	eb0065e0 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d14c:	e5940004 	ldr	r0, [r4, #4]
    d150:	e3a01001 	mov	r1, #1
    d154:	ebfff2e3 	bl	9ce8 <CDWHCIDevice::DisableRootPort(bool)>
    d158:	e5940008 	ldr	r0, [r4, #8]
    d15c:	e3500000 	cmp	r0, #0
    d160:	1affffd1 	bne	d0ac <CDWHCIRootPort::Initialize()+0x6c>
    d164:	eaffffd3 	b	d0b8 <CDWHCIRootPort::Initialize()+0x78>
    d168:	eb00669b 	bl	26bdc <CLogger::Get()>
    d16c:	e59f3038 	ldr	r3, [pc, #56]	; d1ac <CDWHCIRootPort::Initialize()+0x16c>
    d170:	e3a02001 	mov	r2, #1
    d174:	e59f101c 	ldr	r1, [pc, #28]	; d198 <CDWHCIRootPort::Initialize()+0x158>
    d178:	eb0065d4 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d17c:	e3a05000 	mov	r5, #0
    d180:	eaffffcf 	b	d0c4 <CDWHCIRootPort::Initialize()+0x84>
    d184:	e3a02036 	mov	r2, #54	; 0x36
    d188:	e59f100c 	ldr	r1, [pc, #12]	; d19c <CDWHCIRootPort::Initialize()+0x15c>
    d18c:	e59f001c 	ldr	r0, [pc, #28]	; d1b0 <CDWHCIRootPort::Initialize()+0x170>
    d190:	eb005d9e 	bl	24810 <assertion_failed>
    d194:	0003faec 	.word	0x0003faec
    d198:	0003fa64 	.word	0x0003fa64
    d19c:	0003fa6c 	.word	0x0003fa6c
    d1a0:	0003fa80 	.word	0x0003fa80
    d1a4:	0003fb04 	.word	0x0003fb04
    d1a8:	0003fb18 	.word	0x0003fb18
    d1ac:	0003fac0 	.word	0x0003fac0
    d1b0:	0003fadc 	.word	0x0003fadc

0000d1b4 <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    d1b4:	e92d4010 	push	{r4, lr}
    d1b8:	e1a04000 	mov	r4, r0
    d1bc:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    d1c0:	e3500000 	cmp	r0, #0
    d1c4:	0a000002 	beq	d1d4 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    d1c8:	e5903000 	ldr	r3, [r0]
    d1cc:	e5933004 	ldr	r3, [r3, #4]
    d1d0:	e12fff33 	blx	r3
    d1d4:	e3a03000 	mov	r3, #0
    d1d8:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    d1dc:	e5843050 	str	r3, [r4, #80]	; 0x50
    d1e0:	e1500003 	cmp	r0, r3
    d1e4:	e5843048 	str	r3, [r4, #72]	; 0x48
    d1e8:	0a000000 	beq	d1f0 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    d1ec:	eb0077ac 	bl	2b0a4 <operator delete[](void*)>
    d1f0:	e1a00004 	mov	r0, r4
    d1f4:	e8bd8010 	pop	{r4, pc}

0000d1f8 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    d1f8:	e5801000 	str	r1, [r0]
    d1fc:	e12fff1e 	bx	lr

0000d200 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    d200:	e92d4070 	push	{r4, r5, r6, lr}
    d204:	e1a04000 	mov	r4, r0
    d208:	e59f0174 	ldr	r0, [pc, #372]	; d384 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x184>
    d20c:	e5841040 	str	r1, [r4, #64]	; 0x40
    d210:	e0000001 	and	r0, r0, r1
    d214:	e3500000 	cmp	r0, #0
    d218:	0a000006 	beq	d238 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x38>
    d21c:	e3110010 	tst	r1, #16
    d220:	08bd8070 	popeq	{r4, r5, r6, pc}
    d224:	e5940004 	ldr	r0, [r4, #4]
    d228:	eb001d0b 	bl	1465c <CUSBRequest::IsCompleteOnNAK() const>
    d22c:	e3500000 	cmp	r0, #0
    d230:	1a000039 	bne	d31c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x11c>
    d234:	e8bd8070 	pop	{r4, r5, r6, pc}
    d238:	e5d40010 	ldrb	r0, [r4, #16]
    d23c:	e5945030 	ldr	r5, [r4, #48]	; 0x30
    d240:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
    d244:	e3500000 	cmp	r0, #0
    d248:	e0455002 	sub	r5, r5, r2
    d24c:	e0413003 	sub	r3, r1, r3
    d250:	1a000018 	bne	d2b8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb8>
    d254:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d258:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    d25c:	e0811003 	add	r1, r1, r3
    d260:	e0823003 	add	r3, r2, r3
    d264:	e5841034 	str	r1, [r4, #52]	; 0x34
    d268:	e5843048 	str	r3, [r4, #72]	; 0x48
    d26c:	e5d42009 	ldrb	r2, [r4, #9]
    d270:	e1a01005 	mov	r1, r5
    d274:	e5940018 	ldr	r0, [r4, #24]
    d278:	eb000866 	bl	f418 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    d27c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    d280:	e1550002 	cmp	r5, r2
    d284:	8a00002e 	bhi	d344 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x144>
    d288:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    d28c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    d290:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    d294:	e0410003 	sub	r0, r1, r3
    d298:	e0422005 	sub	r2, r2, r5
    d29c:	e150000c 	cmp	r0, ip
    d2a0:	e5842028 	str	r2, [r4, #40]	; 0x28
    d2a4:	28bd8070 	popcs	{r4, r5, r6, pc}
    d2a8:	e1510003 	cmp	r1, r3
    d2ac:	3a000028 	bcc	d354 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x154>
    d2b0:	e584002c 	str	r0, [r4, #44]	; 0x2c
    d2b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d2b8:	e5d40011 	ldrb	r0, [r4, #17]
    d2bc:	e3530000 	cmp	r3, #0
    d2c0:	13a02000 	movne	r2, #0
    d2c4:	02002001 	andeq	r2, r0, #1
    d2c8:	e3520000 	cmp	r2, #0
    d2cc:	0a000009 	beq	d2f8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xf8>
    d2d0:	e3510000 	cmp	r1, #0
    d2d4:	15941020 	ldrne	r1, [r4, #32]
    d2d8:	10010591 	mulne	r1, r1, r5
    d2dc:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    d2e0:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    d2e4:	e0822001 	add	r2, r2, r1
    d2e8:	e0831001 	add	r1, r3, r1
    d2ec:	e5842034 	str	r2, [r4, #52]	; 0x34
    d2f0:	e5841048 	str	r1, [r4, #72]	; 0x48
    d2f4:	eaffffdc 	b	d26c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x6c>
    d2f8:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d2fc:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    d300:	e0811003 	add	r1, r1, r3
    d304:	e3500000 	cmp	r0, #0
    d308:	e0823003 	add	r3, r2, r3
    d30c:	e5841034 	str	r1, [r4, #52]	; 0x34
    d310:	e5843048 	str	r3, [r4, #72]	; 0x48
    d314:	0affffd8 	beq	d27c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x7c>
    d318:	eaffffd3 	b	d26c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x6c>
    d31c:	e5940018 	ldr	r0, [r4, #24]
    d320:	eb000817 	bl	f384 <CUSBEndpoint::GetType() const>
    d324:	e3500001 	cmp	r0, #1
    d328:	1a00000d 	bne	d364 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x164>
    d32c:	e5d43008 	ldrb	r3, [r4, #8]
    d330:	e3530000 	cmp	r3, #0
    d334:	0a00000e 	beq	d374 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x174>
    d338:	e3a03000 	mov	r3, #0
    d33c:	e5843028 	str	r3, [r4, #40]	; 0x28
    d340:	e8bd8070 	pop	{r4, r5, r6, pc}
    d344:	e3a020d6 	mov	r2, #214	; 0xd6
    d348:	e59f1038 	ldr	r1, [pc, #56]	; d388 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    d34c:	e59f0038 	ldr	r0, [pc, #56]	; d38c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    d350:	eb005d2e 	bl	24810 <assertion_failed>
    d354:	e3a020dc 	mov	r2, #220	; 0xdc
    d358:	e59f1028 	ldr	r1, [pc, #40]	; d388 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    d35c:	e59f002c 	ldr	r0, [pc, #44]	; d390 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x190>
    d360:	eb005d2a 	bl	24810 <assertion_failed>
    d364:	e3a020b9 	mov	r2, #185	; 0xb9
    d368:	e59f1018 	ldr	r1, [pc, #24]	; d388 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    d36c:	e59f0020 	ldr	r0, [pc, #32]	; d394 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x194>
    d370:	eb005d26 	bl	24810 <assertion_failed>
    d374:	e3a020ba 	mov	r2, #186	; 0xba
    d378:	e59f1008 	ldr	r1, [pc, #8]	; d388 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    d37c:	e59f0014 	ldr	r0, [pc, #20]	; d398 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x198>
    d380:	eb005d22 	bl	24810 <assertion_failed>
    d384:	000007dc 	.word	0x000007dc
    d388:	0003fb30 	.word	0x0003fb30
    d38c:	0003fb7c 	.word	0x0003fb7c
    d390:	0003fba0 	.word	0x0003fba0
    d394:	0003fb48 	.word	0x0003fb48
    d398:	0003fb74 	.word	0x0003fb74

0000d39c <CDWHCITransferStageData::SetSplitComplete(bool)>:
    d39c:	e5d03010 	ldrb	r3, [r0, #16]
    d3a0:	e3530000 	cmp	r3, #0
    d3a4:	0a000001 	beq	d3b0 <CDWHCITransferStageData::SetSplitComplete(bool)+0x14>
    d3a8:	e5c01011 	strb	r1, [r0, #17]
    d3ac:	e12fff1e 	bx	lr
    d3b0:	e92d4010 	push	{r4, lr}
    d3b4:	e3a020e3 	mov	r2, #227	; 0xe3
    d3b8:	e59f1004 	ldr	r1, [pc, #4]	; d3c4 <CDWHCITransferStageData::SetSplitComplete(bool)+0x28>
    d3bc:	e59f0004 	ldr	r0, [pc, #4]	; d3c8 <CDWHCITransferStageData::SetSplitComplete(bool)+0x2c>
    d3c0:	eb005d12 	bl	24810 <assertion_failed>
    d3c4:	0003fb30 	.word	0x0003fb30
    d3c8:	0003fbcc 	.word	0x0003fbcc

0000d3cc <CDWHCITransferStageData::SetState(unsigned int)>:
    d3cc:	e5801038 	str	r1, [r0, #56]	; 0x38
    d3d0:	e12fff1e 	bx	lr

0000d3d4 <CDWHCITransferStageData::GetState() const>:
    d3d4:	e5900038 	ldr	r0, [r0, #56]	; 0x38
    d3d8:	e12fff1e 	bx	lr

0000d3dc <CDWHCITransferStageData::SetSubState(unsigned int)>:
    d3dc:	e580103c 	str	r1, [r0, #60]	; 0x3c
    d3e0:	e12fff1e 	bx	lr

0000d3e4 <CDWHCITransferStageData::GetSubState() const>:
    d3e4:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    d3e8:	e12fff1e 	bx	lr

0000d3ec <CDWHCITransferStageData::BeginSplitCycle()>:
    d3ec:	e3a00001 	mov	r0, #1
    d3f0:	e12fff1e 	bx	lr

0000d3f4 <CDWHCITransferStageData::GetChannelNumber() const>:
    d3f4:	e5900000 	ldr	r0, [r0]
    d3f8:	e12fff1e 	bx	lr

0000d3fc <CDWHCITransferStageData::IsPeriodic() const>:
    d3fc:	e5900018 	ldr	r0, [r0, #24]
    d400:	e92d4010 	push	{r4, lr}
    d404:	e3500000 	cmp	r0, #0
    d408:	0a000006 	beq	d428 <CDWHCITransferStageData::IsPeriodic() const+0x2c>
    d40c:	eb0007dc 	bl	f384 <CUSBEndpoint::GetType() const>
    d410:	e2400002 	sub	r0, r0, #2
    d414:	e6ef0070 	uxtb	r0, r0
    d418:	e3500001 	cmp	r0, #1
    d41c:	83a00000 	movhi	r0, #0
    d420:	93a00001 	movls	r0, #1
    d424:	e8bd8010 	pop	{r4, pc}
    d428:	e3a02f42 	mov	r2, #264	; 0x108
    d42c:	e59f1004 	ldr	r1, [pc, #4]	; d438 <CDWHCITransferStageData::IsPeriodic() const+0x3c>
    d430:	e59f0004 	ldr	r0, [pc, #4]	; d43c <CDWHCITransferStageData::IsPeriodic() const+0x40>
    d434:	eb005cf5 	bl	24810 <assertion_failed>
    d438:	0003fb30 	.word	0x0003fb30
    d43c:	0003fbe0 	.word	0x0003fbe0

0000d440 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    d440:	e92d4070 	push	{r4, r5, r6, lr}
    d444:	e1a05002 	mov	r5, r2
    d448:	e3a02000 	mov	r2, #0
    d44c:	e5dd6010 	ldrb	r6, [sp, #16]
    d450:	e1550002 	cmp	r5, r2
    d454:	e8800022 	stm	r0, {r1, r5}
    d458:	e5c03008 	strb	r3, [r0, #8]
    d45c:	e5c06009 	strb	r6, [r0, #9]
    d460:	e580200c 	str	r2, [r0, #12]
    d464:	e5c02011 	strb	r2, [r0, #17]
    d468:	e5802034 	str	r2, [r0, #52]	; 0x34
    d46c:	e5802038 	str	r2, [r0, #56]	; 0x38
    d470:	e580203c 	str	r2, [r0, #60]	; 0x3c
    d474:	e5802040 	str	r2, [r0, #64]	; 0x40
    d478:	e5802044 	str	r2, [r0, #68]	; 0x44
    d47c:	e580204c 	str	r2, [r0, #76]	; 0x4c
    d480:	e5802050 	str	r2, [r0, #80]	; 0x50
    d484:	0a00008b 	beq	d6b8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x278>
    d488:	e1a04000 	mov	r4, r0
    d48c:	e1a00005 	mov	r0, r5
    d490:	eb001c10 	bl	144d8 <CUSBRequest::GetEndpoint() const>
    d494:	e3500000 	cmp	r0, #0
    d498:	e5840018 	str	r0, [r4, #24]
    d49c:	0a000089 	beq	d6c8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x288>
    d4a0:	eb0007aa 	bl	f350 <CUSBEndpoint::GetDevice() const>
    d4a4:	e3500000 	cmp	r0, #0
    d4a8:	e5840014 	str	r0, [r4, #20]
    d4ac:	0a000089 	beq	d6d8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x298>
    d4b0:	eb000374 	bl	e288 <CUSBDevice::GetSpeed() const>
    d4b4:	e5c4001c 	strb	r0, [r4, #28]
    d4b8:	e5940018 	ldr	r0, [r4, #24]
    d4bc:	eb0007b7 	bl	f3a0 <CUSBEndpoint::GetMaxPacketSize() const>
    d4c0:	e5840020 	str	r0, [r4, #32]
    d4c4:	e5940014 	ldr	r0, [r4, #20]
    d4c8:	eb000370 	bl	e290 <CUSBDevice::IsSplit() const>
    d4cc:	e3560000 	cmp	r6, #0
    d4d0:	e5c40010 	strb	r0, [r4, #16]
    d4d4:	0a00002f 	beq	d598 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x158>
    d4d8:	e5945044 	ldr	r5, [r4, #68]	; 0x44
    d4dc:	e3550000 	cmp	r5, #0
    d4e0:	1a00006c 	bne	d698 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x258>
    d4e4:	e3a00004 	mov	r0, #4
    d4e8:	eb0076e6 	bl	2b088 <operator new[](unsigned int)>
    d4ec:	e3a03001 	mov	r3, #1
    d4f0:	e5840044 	str	r0, [r4, #68]	; 0x44
    d4f4:	e5840048 	str	r0, [r4, #72]	; 0x48
    d4f8:	e5845024 	str	r5, [r4, #36]	; 0x24
    d4fc:	e584502c 	str	r5, [r4, #44]	; 0x2c
    d500:	e5843028 	str	r3, [r4, #40]	; 0x28
    d504:	e5843030 	str	r3, [r4, #48]	; 0x30
    d508:	e3100003 	tst	r0, #3
    d50c:	1a000075 	bne	d6e8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a8>
    d510:	e5d43010 	ldrb	r3, [r4, #16]
    d514:	e3530000 	cmp	r3, #0
    d518:	0a00000d 	beq	d554 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x114>
    d51c:	e1a00004 	mov	r0, r4
    d520:	ebffffb5 	bl	d3fc <CDWHCITransferStageData::IsPeriodic() const>
    d524:	e3500000 	cmp	r0, #0
    d528:	0a00003b 	beq	d61c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1dc>
    d52c:	e3a00014 	mov	r0, #20
    d530:	ebfffd59 	bl	ca9c <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    d534:	e1a05000 	mov	r5, r0
    d538:	ebfffd43 	bl	ca4c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    d53c:	e5845050 	str	r5, [r4, #80]	; 0x50
    d540:	e59d3014 	ldr	r3, [sp, #20]
    d544:	e3530000 	cmp	r3, #0
    d548:	1a00003b 	bne	d63c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1fc>
    d54c:	e1a00004 	mov	r0, r4
    d550:	e8bd8070 	pop	{r4, r5, r6, pc}
    d554:	e5940014 	ldr	r0, [r4, #20]
    d558:	eb00034e 	bl	e298 <CUSBDevice::GetHubAddress() const>
    d55c:	e3500000 	cmp	r0, #0
    d560:	1afffff6 	bne	d540 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x100>
    d564:	e5d4301c 	ldrb	r3, [r4, #28]
    d568:	e3530002 	cmp	r3, #2
    d56c:	0afffff3 	beq	d540 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x100>
    d570:	e1a00004 	mov	r0, r4
    d574:	ebffffa0 	bl	d3fc <CDWHCITransferStageData::IsPeriodic() const>
    d578:	e1a06000 	mov	r6, r0
    d57c:	e3a00008 	mov	r0, #8
    d580:	ebfffc33 	bl	c654 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
    d584:	e1a05000 	mov	r5, r0
    d588:	e1a01006 	mov	r1, r6
    d58c:	ebfffc29 	bl	c638 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
    d590:	e5845050 	str	r5, [r4, #80]	; 0x50
    d594:	eaffffe9 	b	d540 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x100>
    d598:	e1a01006 	mov	r1, r6
    d59c:	e5940018 	ldr	r0, [r4, #24]
    d5a0:	eb00078c 	bl	f3d8 <CUSBEndpoint::GetNextPID(bool)>
    d5a4:	e3500000 	cmp	r0, #0
    d5a8:	e1a00005 	mov	r0, r5
    d5ac:	0a000034 	beq	d684 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x244>
    d5b0:	eb001bf9 	bl	1459c <CUSBRequest::GetBuffer()>
    d5b4:	e5840048 	str	r0, [r4, #72]	; 0x48
    d5b8:	e1a00005 	mov	r0, r5
    d5bc:	eb001c05 	bl	145d8 <CUSBRequest::GetBufLen() const>
    d5c0:	e1a05000 	mov	r5, r0
    d5c4:	e5840024 	str	r0, [r4, #36]	; 0x24
    d5c8:	e5946020 	ldr	r6, [r4, #32]
    d5cc:	e2460001 	sub	r0, r6, #1
    d5d0:	e0800005 	add	r0, r0, r5
    d5d4:	e1a01006 	mov	r1, r6
    d5d8:	eb00c1dd 	bl	3dd54 <__aeabi_uidiv>
    d5dc:	e5d43010 	ldrb	r3, [r4, #16]
    d5e0:	e5840028 	str	r0, [r4, #40]	; 0x28
    d5e4:	e3530000 	cmp	r3, #0
    d5e8:	0a00002e 	beq	d6a8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x268>
    d5ec:	e1560005 	cmp	r6, r5
    d5f0:	31a05006 	movcc	r5, r6
    d5f4:	e3a03001 	mov	r3, #1
    d5f8:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    d5fc:	e584502c 	str	r5, [r4, #44]	; 0x2c
    d600:	e5843030 	str	r3, [r4, #48]	; 0x30
    d604:	e3500000 	cmp	r0, #0
    d608:	1affffbe 	bne	d508 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xc8>
    d60c:	e3a0206c 	mov	r2, #108	; 0x6c
    d610:	e59f1100 	ldr	r1, [pc, #256]	; d718 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d614:	e59f0100 	ldr	r0, [pc, #256]	; d71c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2dc>
    d618:	eb005c7c 	bl	24810 <assertion_failed>
    d61c:	e3a00010 	mov	r0, #16
    d620:	ebfffb6b 	bl	c3d4 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
    d624:	e1a05000 	mov	r5, r0
    d628:	ebfffb57 	bl	c38c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    d62c:	e59d3014 	ldr	r3, [sp, #20]
    d630:	e5845050 	str	r5, [r4, #80]	; 0x50
    d634:	e3530000 	cmp	r3, #0
    d638:	0affffc3 	beq	d54c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x10c>
    d63c:	e5940018 	ldr	r0, [r4, #24]
    d640:	eb00074f 	bl	f384 <CUSBEndpoint::GetType() const>
    d644:	e3500002 	cmp	r0, #2
    d648:	1a00002a 	bne	d6f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b8>
    d64c:	e3a03064 	mov	r3, #100	; 0x64
    d650:	e59d2014 	ldr	r2, [sp, #20]
    d654:	e0030293 	mul	r3, r3, r2
    d658:	e59f20c0 	ldr	r2, [pc, #192]	; d720 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e0>
    d65c:	e0832392 	umull	r2, r3, r2, r3
    d660:	e1a03323 	lsr	r3, r3, #6
    d664:	e3530000 	cmp	r3, #0
    d668:	e584300c 	str	r3, [r4, #12]
    d66c:	0a000025 	beq	d708 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2c8>
    d670:	eb007226 	bl	29f10 <CTimer::Get()>
    d674:	eb006f6f 	bl	29438 <CTimer::GetTicks() const>
    d678:	e584004c 	str	r0, [r4, #76]	; 0x4c
    d67c:	e1a00004 	mov	r0, r4
    d680:	e8bd8070 	pop	{r4, r5, r6, pc}
    d684:	eb001bb0 	bl	1454c <CUSBRequest::GetSetupData()>
    d688:	e3a05008 	mov	r5, #8
    d68c:	e5840048 	str	r0, [r4, #72]	; 0x48
    d690:	e5845024 	str	r5, [r4, #36]	; 0x24
    d694:	eaffffcb 	b	d5c8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x188>
    d698:	e3a02061 	mov	r2, #97	; 0x61
    d69c:	e59f1074 	ldr	r1, [pc, #116]	; d718 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d6a0:	e59f007c 	ldr	r0, [pc, #124]	; d724 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e4>
    d6a4:	eb005c59 	bl	24810 <assertion_failed>
    d6a8:	e5840030 	str	r0, [r4, #48]	; 0x30
    d6ac:	e584502c 	str	r5, [r4, #44]	; 0x2c
    d6b0:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    d6b4:	eaffffd2 	b	d604 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1c4>
    d6b8:	e3a02031 	mov	r2, #49	; 0x31
    d6bc:	e59f1054 	ldr	r1, [pc, #84]	; d718 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d6c0:	e59f0060 	ldr	r0, [pc, #96]	; d728 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e8>
    d6c4:	eb005c51 	bl	24810 <assertion_failed>
    d6c8:	e3a02034 	mov	r2, #52	; 0x34
    d6cc:	e59f1044 	ldr	r1, [pc, #68]	; d718 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d6d0:	e59f0054 	ldr	r0, [pc, #84]	; d72c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2ec>
    d6d4:	eb005c4d 	bl	24810 <assertion_failed>
    d6d8:	e3a02036 	mov	r2, #54	; 0x36
    d6dc:	e59f1034 	ldr	r1, [pc, #52]	; d718 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d6e0:	e59f0048 	ldr	r0, [pc, #72]	; d730 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f0>
    d6e4:	eb005c49 	bl	24810 <assertion_failed>
    d6e8:	e3a0206d 	mov	r2, #109	; 0x6d
    d6ec:	e59f1024 	ldr	r1, [pc, #36]	; d718 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d6f0:	e59f003c 	ldr	r0, [pc, #60]	; d734 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f4>
    d6f4:	eb005c45 	bl	24810 <assertion_failed>
    d6f8:	e3a02088 	mov	r2, #136	; 0x88
    d6fc:	e59f1014 	ldr	r1, [pc, #20]	; d718 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d700:	e59f0030 	ldr	r0, [pc, #48]	; d738 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d704:	eb005c41 	bl	24810 <assertion_failed>
    d708:	e3a0208b 	mov	r2, #139	; 0x8b
    d70c:	e59f1004 	ldr	r1, [pc, #4]	; d718 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d710:	e59f0024 	ldr	r0, [pc, #36]	; d73c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2fc>
    d714:	eb005c3d 	bl	24810 <assertion_failed>
    d718:	0003fb30 	.word	0x0003fb30
    d71c:	0003fc24 	.word	0x0003fc24
    d720:	10624dd3 	.word	0x10624dd3
    d724:	0003fc10 	.word	0x0003fc10
    d728:	0003fbf4 	.word	0x0003fbf4
    d72c:	0003fbe0 	.word	0x0003fbe0
    d730:	0003fc00 	.word	0x0003fc00
    d734:	0003fc3c 	.word	0x0003fc3c
    d738:	0003fc64 	.word	0x0003fc64
    d73c:	0003fc98 	.word	0x0003fc98

0000d740 <CDWHCITransferStageData::GetDeviceAddress() const>:
    d740:	e5900014 	ldr	r0, [r0, #20]
    d744:	e3500000 	cmp	r0, #0
    d748:	0a000000 	beq	d750 <CDWHCITransferStageData::GetDeviceAddress() const+0x10>
    d74c:	ea0002cb 	b	e280 <CUSBDevice::GetAddress() const>
    d750:	e92d4010 	push	{r4, lr}
    d754:	e59f2008 	ldr	r2, [pc, #8]	; d764 <CDWHCITransferStageData::GetDeviceAddress() const+0x24>
    d758:	e59f1008 	ldr	r1, [pc, #8]	; d768 <CDWHCITransferStageData::GetDeviceAddress() const+0x28>
    d75c:	e59f0008 	ldr	r0, [pc, #8]	; d76c <CDWHCITransferStageData::GetDeviceAddress() const+0x2c>
    d760:	eb005c2a 	bl	24810 <assertion_failed>
    d764:	00000111 	.word	0x00000111
    d768:	0003fb30 	.word	0x0003fb30
    d76c:	0003fc00 	.word	0x0003fc00

0000d770 <CDWHCITransferStageData::GetEndpointType() const>:
    d770:	e5900018 	ldr	r0, [r0, #24]
    d774:	e92d4010 	push	{r4, lr}
    d778:	e3500000 	cmp	r0, #0
    d77c:	0a00000f 	beq	d7c0 <CDWHCITransferStageData::GetEndpointType() const+0x50>
    d780:	eb0006ff 	bl	f384 <CUSBEndpoint::GetType() const>
    d784:	e3500001 	cmp	r0, #1
    d788:	0a00000a 	beq	d7b8 <CDWHCITransferStageData::GetEndpointType() const+0x48>
    d78c:	3a000003 	bcc	d7a0 <CDWHCITransferStageData::GetEndpointType() const+0x30>
    d790:	e3500002 	cmp	r0, #2
    d794:	1a000003 	bne	d7a8 <CDWHCITransferStageData::GetEndpointType() const+0x38>
    d798:	e3a00003 	mov	r0, #3
    d79c:	e8bd8010 	pop	{r4, pc}
    d7a0:	e3a00000 	mov	r0, #0
    d7a4:	e8bd8010 	pop	{r4, pc}
    d7a8:	e59f2020 	ldr	r2, [pc, #32]	; d7d0 <CDWHCITransferStageData::GetEndpointType() const+0x60>
    d7ac:	e59f1020 	ldr	r1, [pc, #32]	; d7d4 <CDWHCITransferStageData::GetEndpointType() const+0x64>
    d7b0:	e59f0020 	ldr	r0, [pc, #32]	; d7d8 <CDWHCITransferStageData::GetEndpointType() const+0x68>
    d7b4:	eb005c15 	bl	24810 <assertion_failed>
    d7b8:	e3a00002 	mov	r0, #2
    d7bc:	e8bd8010 	pop	{r4, pc}
    d7c0:	e59f2014 	ldr	r2, [pc, #20]	; d7dc <CDWHCITransferStageData::GetEndpointType() const+0x6c>
    d7c4:	e59f1008 	ldr	r1, [pc, #8]	; d7d4 <CDWHCITransferStageData::GetEndpointType() const+0x64>
    d7c8:	e59f0010 	ldr	r0, [pc, #16]	; d7e0 <CDWHCITransferStageData::GetEndpointType() const+0x70>
    d7cc:	eb005c0f 	bl	24810 <assertion_failed>
    d7d0:	0000012a 	.word	0x0000012a
    d7d4:	0003fb30 	.word	0x0003fb30
    d7d8:	0003fe24 	.word	0x0003fe24
    d7dc:	00000117 	.word	0x00000117
    d7e0:	0003fbe0 	.word	0x0003fbe0

0000d7e4 <CDWHCITransferStageData::GetEndpointNumber() const>:
    d7e4:	e5900018 	ldr	r0, [r0, #24]
    d7e8:	e3500000 	cmp	r0, #0
    d7ec:	0a000000 	beq	d7f4 <CDWHCITransferStageData::GetEndpointNumber() const+0x10>
    d7f0:	ea0006e1 	b	f37c <CUSBEndpoint::GetNumber() const>
    d7f4:	e92d4010 	push	{r4, lr}
    d7f8:	e59f2008 	ldr	r2, [pc, #8]	; d808 <CDWHCITransferStageData::GetEndpointNumber() const+0x24>
    d7fc:	e59f1008 	ldr	r1, [pc, #8]	; d80c <CDWHCITransferStageData::GetEndpointNumber() const+0x28>
    d800:	e59f0008 	ldr	r0, [pc, #8]	; d810 <CDWHCITransferStageData::GetEndpointNumber() const+0x2c>
    d804:	eb005c01 	bl	24810 <assertion_failed>
    d808:	00000133 	.word	0x00000133
    d80c:	0003fb30 	.word	0x0003fb30
    d810:	0003fbe0 	.word	0x0003fbe0

0000d814 <CDWHCITransferStageData::GetMaxPacketSize() const>:
    d814:	e5900020 	ldr	r0, [r0, #32]
    d818:	e12fff1e 	bx	lr

0000d81c <CDWHCITransferStageData::GetSpeed() const>:
    d81c:	e5d0001c 	ldrb	r0, [r0, #28]
    d820:	e12fff1e 	bx	lr

0000d824 <CDWHCITransferStageData::GetPID() const>:
    d824:	e5903018 	ldr	r3, [r0, #24]
    d828:	e92d4010 	push	{r4, lr}
    d82c:	e3530000 	cmp	r3, #0
    d830:	0a00000f 	beq	d874 <CDWHCITransferStageData::GetPID() const+0x50>
    d834:	e5d01009 	ldrb	r1, [r0, #9]
    d838:	e1a00003 	mov	r0, r3
    d83c:	eb0006e5 	bl	f3d8 <CUSBEndpoint::GetNextPID(bool)>
    d840:	e3500001 	cmp	r0, #1
    d844:	0a000008 	beq	d86c <CDWHCITransferStageData::GetPID() const+0x48>
    d848:	3a000005 	bcc	d864 <CDWHCITransferStageData::GetPID() const+0x40>
    d84c:	e3500002 	cmp	r0, #2
    d850:	08bd8010 	popeq	{r4, pc}
    d854:	e59f2028 	ldr	r2, [pc, #40]	; d884 <CDWHCITransferStageData::GetPID() const+0x60>
    d858:	e59f1028 	ldr	r1, [pc, #40]	; d888 <CDWHCITransferStageData::GetPID() const+0x64>
    d85c:	e59f0028 	ldr	r0, [pc, #40]	; d88c <CDWHCITransferStageData::GetPID() const+0x68>
    d860:	eb005bea 	bl	24810 <assertion_failed>
    d864:	e3a00003 	mov	r0, #3
    d868:	e8bd8010 	pop	{r4, pc}
    d86c:	e3a00000 	mov	r0, #0
    d870:	e8bd8010 	pop	{r4, pc}
    d874:	e59f2014 	ldr	r2, [pc, #20]	; d890 <CDWHCITransferStageData::GetPID() const+0x6c>
    d878:	e59f1008 	ldr	r1, [pc, #8]	; d888 <CDWHCITransferStageData::GetPID() const+0x64>
    d87c:	e59f0010 	ldr	r0, [pc, #16]	; d894 <CDWHCITransferStageData::GetPID() const+0x70>
    d880:	eb005be2 	bl	24810 <assertion_failed>
    d884:	00000156 	.word	0x00000156
    d888:	0003fb30 	.word	0x0003fb30
    d88c:	0003fe24 	.word	0x0003fe24
    d890:	00000143 	.word	0x00000143
    d894:	0003fbe0 	.word	0x0003fbe0

0000d898 <CDWHCITransferStageData::IsDirectionIn() const>:
    d898:	e5d00008 	ldrb	r0, [r0, #8]
    d89c:	e12fff1e 	bx	lr

0000d8a0 <CDWHCITransferStageData::IsStatusStage() const>:
    d8a0:	e5d00009 	ldrb	r0, [r0, #9]
    d8a4:	e12fff1e 	bx	lr

0000d8a8 <CDWHCITransferStageData::GetDMAAddress() const>:
    d8a8:	e5900048 	ldr	r0, [r0, #72]	; 0x48
    d8ac:	e3500000 	cmp	r0, #0
    d8b0:	0a000000 	beq	d8b8 <CDWHCITransferStageData::GetDMAAddress() const+0x10>
    d8b4:	e12fff1e 	bx	lr
    d8b8:	e92d4010 	push	{r4, lr}
    d8bc:	e59f2008 	ldr	r2, [pc, #8]	; d8cc <CDWHCITransferStageData::GetDMAAddress() const+0x24>
    d8c0:	e59f1008 	ldr	r1, [pc, #8]	; d8d0 <CDWHCITransferStageData::GetDMAAddress() const+0x28>
    d8c4:	e59f0008 	ldr	r0, [pc, #8]	; d8d4 <CDWHCITransferStageData::GetDMAAddress() const+0x2c>
    d8c8:	eb005bd0 	bl	24810 <assertion_failed>
    d8cc:	00000169 	.word	0x00000169
    d8d0:	0003fb30 	.word	0x0003fb30
    d8d4:	0003fc24 	.word	0x0003fc24

0000d8d8 <CDWHCITransferStageData::GetBytesToTransfer() const>:
    d8d8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d8dc:	e12fff1e 	bx	lr

0000d8e0 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    d8e0:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    d8e4:	e12fff1e 	bx	lr

0000d8e8 <CDWHCITransferStageData::IsSplit() const>:
    d8e8:	e5d00010 	ldrb	r0, [r0, #16]
    d8ec:	e12fff1e 	bx	lr

0000d8f0 <CDWHCITransferStageData::IsSplitComplete() const>:
    d8f0:	e5d03010 	ldrb	r3, [r0, #16]
    d8f4:	e3530000 	cmp	r3, #0
    d8f8:	0a000001 	beq	d904 <CDWHCITransferStageData::IsSplitComplete() const+0x14>
    d8fc:	e5d00011 	ldrb	r0, [r0, #17]
    d900:	e12fff1e 	bx	lr
    d904:	e92d4010 	push	{r4, lr}
    d908:	e59f2008 	ldr	r2, [pc, #8]	; d918 <CDWHCITransferStageData::IsSplitComplete() const+0x28>
    d90c:	e59f1008 	ldr	r1, [pc, #8]	; d91c <CDWHCITransferStageData::IsSplitComplete() const+0x2c>
    d910:	e59f0008 	ldr	r0, [pc, #8]	; d920 <CDWHCITransferStageData::IsSplitComplete() const+0x30>
    d914:	eb005bbd 	bl	24810 <assertion_failed>
    d918:	0000017f 	.word	0x0000017f
    d91c:	0003fb30 	.word	0x0003fb30
    d920:	0003fbcc 	.word	0x0003fbcc

0000d924 <CDWHCITransferStageData::GetHubAddress() const>:
    d924:	e5d03010 	ldrb	r3, [r0, #16]
    d928:	e92d4010 	push	{r4, lr}
    d92c:	e3530000 	cmp	r3, #0
    d930:	0a000004 	beq	d948 <CDWHCITransferStageData::GetHubAddress() const+0x24>
    d934:	e5900014 	ldr	r0, [r0, #20]
    d938:	e3500000 	cmp	r0, #0
    d93c:	0a000005 	beq	d958 <CDWHCITransferStageData::GetHubAddress() const+0x34>
    d940:	e8bd4010 	pop	{r4, lr}
    d944:	ea000253 	b	e298 <CUSBDevice::GetHubAddress() const>
    d948:	e59f2018 	ldr	r2, [pc, #24]	; d968 <CDWHCITransferStageData::GetHubAddress() const+0x44>
    d94c:	e59f1018 	ldr	r1, [pc, #24]	; d96c <CDWHCITransferStageData::GetHubAddress() const+0x48>
    d950:	e59f0018 	ldr	r0, [pc, #24]	; d970 <CDWHCITransferStageData::GetHubAddress() const+0x4c>
    d954:	eb005bad 	bl	24810 <assertion_failed>
    d958:	e3a02f62 	mov	r2, #392	; 0x188
    d95c:	e59f1008 	ldr	r1, [pc, #8]	; d96c <CDWHCITransferStageData::GetHubAddress() const+0x48>
    d960:	e59f000c 	ldr	r0, [pc, #12]	; d974 <CDWHCITransferStageData::GetHubAddress() const+0x50>
    d964:	eb005ba9 	bl	24810 <assertion_failed>
    d968:	00000186 	.word	0x00000186
    d96c:	0003fb30 	.word	0x0003fb30
    d970:	0003fbcc 	.word	0x0003fbcc
    d974:	0003fc00 	.word	0x0003fc00

0000d978 <CDWHCITransferStageData::GetHubPortAddress() const>:
    d978:	e5d03010 	ldrb	r3, [r0, #16]
    d97c:	e92d4010 	push	{r4, lr}
    d980:	e3530000 	cmp	r3, #0
    d984:	0a000004 	beq	d99c <CDWHCITransferStageData::GetHubPortAddress() const+0x24>
    d988:	e5900014 	ldr	r0, [r0, #20]
    d98c:	e3500000 	cmp	r0, #0
    d990:	0a000005 	beq	d9ac <CDWHCITransferStageData::GetHubPortAddress() const+0x34>
    d994:	e8bd4010 	pop	{r4, lr}
    d998:	ea000240 	b	e2a0 <CUSBDevice::GetHubPortNumber() const>
    d99c:	e59f2018 	ldr	r2, [pc, #24]	; d9bc <CDWHCITransferStageData::GetHubPortAddress() const+0x44>
    d9a0:	e59f1018 	ldr	r1, [pc, #24]	; d9c0 <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
    d9a4:	e59f0018 	ldr	r0, [pc, #24]	; d9c4 <CDWHCITransferStageData::GetHubPortAddress() const+0x4c>
    d9a8:	eb005b98 	bl	24810 <assertion_failed>
    d9ac:	e3a02e19 	mov	r2, #400	; 0x190
    d9b0:	e59f1008 	ldr	r1, [pc, #8]	; d9c0 <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
    d9b4:	e59f000c 	ldr	r0, [pc, #12]	; d9c8 <CDWHCITransferStageData::GetHubPortAddress() const+0x50>
    d9b8:	eb005b94 	bl	24810 <assertion_failed>
    d9bc:	0000018e 	.word	0x0000018e
    d9c0:	0003fb30 	.word	0x0003fb30
    d9c4:	0003fbcc 	.word	0x0003fbcc
    d9c8:	0003fc00 	.word	0x0003fc00

0000d9cc <CDWHCITransferStageData::GetSplitPosition() const>:
    d9cc:	e3a00003 	mov	r0, #3
    d9d0:	e12fff1e 	bx	lr

0000d9d4 <CDWHCITransferStageData::GetStatusMask() const>:
    d9d4:	e5d03010 	ldrb	r3, [r0, #16]
    d9d8:	e3530000 	cmp	r3, #0
    d9dc:	0a000001 	beq	d9e8 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    d9e0:	e59f0018 	ldr	r0, [pc, #24]	; da00 <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    d9e4:	e12fff1e 	bx	lr
    d9e8:	e92d4010 	push	{r4, lr}
    d9ec:	ebfffe82 	bl	d3fc <CDWHCITransferStageData::IsPeriodic() const>
    d9f0:	e3500000 	cmp	r0, #0
    d9f4:	059f0008 	ldreq	r0, [pc, #8]	; da04 <CDWHCITransferStageData::GetStatusMask() const+0x30>
    d9f8:	159f0000 	ldrne	r0, [pc]	; da00 <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    d9fc:	e8bd8010 	pop	{r4, pc}
    da00:	000007ff 	.word	0x000007ff
    da04:	0000078f 	.word	0x0000078f

0000da08 <CDWHCITransferStageData::GetTransactionStatus() const>:
    da08:	e5900040 	ldr	r0, [r0, #64]	; 0x40
    da0c:	e3500000 	cmp	r0, #0
    da10:	0a000000 	beq	da18 <CDWHCITransferStageData::GetTransactionStatus() const+0x10>
    da14:	e12fff1e 	bx	lr
    da18:	e92d4010 	push	{r4, lr}
    da1c:	e59f2008 	ldr	r2, [pc, #8]	; da2c <CDWHCITransferStageData::GetTransactionStatus() const+0x24>
    da20:	e59f1008 	ldr	r1, [pc, #8]	; da30 <CDWHCITransferStageData::GetTransactionStatus() const+0x28>
    da24:	e59f0008 	ldr	r0, [pc, #8]	; da34 <CDWHCITransferStageData::GetTransactionStatus() const+0x2c>
    da28:	eb005b78 	bl	24810 <assertion_failed>
    da2c:	000001ad 	.word	0x000001ad
    da30:	0003fb30 	.word	0x0003fb30
    da34:	0003fcac 	.word	0x0003fcac

0000da38 <CDWHCITransferStageData::IsStageComplete() const>:
    da38:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    da3c:	e16f0f10 	clz	r0, r0
    da40:	e1a002a0 	lsr	r0, r0, #5
    da44:	e12fff1e 	bx	lr

0000da48 <CDWHCITransferStageData::GetResultLen() const>:
    da48:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    da4c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    da50:	e1520000 	cmp	r2, r0
    da54:	31a00002 	movcc	r0, r2
    da58:	e12fff1e 	bx	lr

0000da5c <CDWHCITransferStageData::IsTimeout() const>:
    da5c:	e590300c 	ldr	r3, [r0, #12]
    da60:	e3530000 	cmp	r3, #0
    da64:	1a000001 	bne	da70 <CDWHCITransferStageData::IsTimeout() const+0x14>
    da68:	e1a00003 	mov	r0, r3
    da6c:	e12fff1e 	bx	lr
    da70:	e92d4010 	push	{r4, lr}
    da74:	e1a04000 	mov	r4, r0
    da78:	eb007124 	bl	29f10 <CTimer::Get()>
    da7c:	eb006e6d 	bl	29438 <CTimer::GetTicks() const>
    da80:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    da84:	e594200c 	ldr	r2, [r4, #12]
    da88:	e0400003 	sub	r0, r0, r3
    da8c:	e1500002 	cmp	r0, r2
    da90:	33a00000 	movcc	r0, #0
    da94:	23a00001 	movcs	r0, #1
    da98:	e8bd8010 	pop	{r4, pc}

0000da9c <CDWHCITransferStageData::GetURB() const>:
    da9c:	e5900004 	ldr	r0, [r0, #4]
    daa0:	e3500000 	cmp	r0, #0
    daa4:	0a000000 	beq	daac <CDWHCITransferStageData::GetURB() const+0x10>
    daa8:	e12fff1e 	bx	lr
    daac:	e92d4010 	push	{r4, lr}
    dab0:	e3a02f73 	mov	r2, #460	; 0x1cc
    dab4:	e59f1004 	ldr	r1, [pc, #4]	; dac0 <CDWHCITransferStageData::GetURB() const+0x24>
    dab8:	e59f0004 	ldr	r0, [pc, #4]	; dac4 <CDWHCITransferStageData::GetURB() const+0x28>
    dabc:	eb005b53 	bl	24810 <assertion_failed>
    dac0:	0003fb30 	.word	0x0003fb30
    dac4:	0003fbf4 	.word	0x0003fbf4

0000dac8 <CDWHCITransferStageData::GetFrameScheduler() const>:
    dac8:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    dacc:	e12fff1e 	bx	lr

0000dad0 <CDWHCITransferStageData::operator new(unsigned int)>:
    dad0:	e3500054 	cmp	r0, #84	; 0x54
    dad4:	e92d4010 	push	{r4, lr}
    dad8:	1a000005 	bne	daf4 <CDWHCITransferStageData::operator new(unsigned int)+0x24>
    dadc:	e59f3030 	ldr	r3, [pc, #48]	; db14 <CDWHCITransferStageData::operator new(unsigned int)+0x44>
    dae0:	e5930000 	ldr	r0, [r3]
    dae4:	e3500000 	cmp	r0, #0
    dae8:	0a000005 	beq	db04 <CDWHCITransferStageData::operator new(unsigned int)+0x34>
    daec:	e8bd4010 	pop	{r4, lr}
    daf0:	ea005c4c 	b	24c28 <CClassAllocator::Allocate()>
    daf4:	e59f201c 	ldr	r2, [pc, #28]	; db18 <CDWHCITransferStageData::operator new(unsigned int)+0x48>
    daf8:	e59f101c 	ldr	r1, [pc, #28]	; db1c <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
    dafc:	e59f001c 	ldr	r0, [pc, #28]	; db20 <CDWHCITransferStageData::operator new(unsigned int)+0x50>
    db00:	eb005b42 	bl	24810 <assertion_failed>
    db04:	e59f200c 	ldr	r2, [pc, #12]	; db18 <CDWHCITransferStageData::operator new(unsigned int)+0x48>
    db08:	e59f100c 	ldr	r1, [pc, #12]	; db1c <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
    db0c:	e59f0010 	ldr	r0, [pc, #16]	; db24 <CDWHCITransferStageData::operator new(unsigned int)+0x54>
    db10:	eb005b3e 	bl	24810 <assertion_failed>
    db14:	0004e1ec 	.word	0x0004e1ec
    db18:	000001d5 	.word	0x000001d5
    db1c:	0003fb30 	.word	0x0003fb30
    db20:	0003fcc8 	.word	0x0003fcc8
    db24:	0003f84c 	.word	0x0003f84c

0000db28 <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
    db28:	e3510054 	cmp	r1, #84	; 0x54
    db2c:	e92d4010 	push	{r4, lr}
    db30:	1a000007 	bne	db54 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x2c>
    db34:	e59f3038 	ldr	r3, [pc, #56]	; db74 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x4c>
    db38:	e5933000 	ldr	r3, [r3]
    db3c:	e3530000 	cmp	r3, #0
    db40:	0a000007 	beq	db64 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x3c>
    db44:	e8bd4010 	pop	{r4, lr}
    db48:	e1a01000 	mov	r1, r0
    db4c:	e1a00003 	mov	r0, r3
    db50:	ea005c6f 	b	24d14 <CClassAllocator::Free(void*)>
    db54:	e59f201c 	ldr	r2, [pc, #28]	; db78 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
    db58:	e59f101c 	ldr	r1, [pc, #28]	; db7c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x54>
    db5c:	e59f001c 	ldr	r0, [pc, #28]	; db80 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x58>
    db60:	eb005b2a 	bl	24810 <assertion_failed>
    db64:	e59f200c 	ldr	r2, [pc, #12]	; db78 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
    db68:	e59f100c 	ldr	r1, [pc, #12]	; db7c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x54>
    db6c:	e59f0010 	ldr	r0, [pc, #16]	; db84 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x5c>
    db70:	eb005b26 	bl	24810 <assertion_failed>
    db74:	0004e1ec 	.word	0x0004e1ec
    db78:	000001d5 	.word	0x000001d5
    db7c:	0003fb30 	.word	0x0003fb30
    db80:	0003fcc8 	.word	0x0003fcc8
    db84:	0003f84c 	.word	0x0003f84c

0000db88 <CDWHCITransferStageData::InitAllocator(unsigned int)>:
    db88:	e92d4070 	push	{r4, r5, r6, lr}
    db8c:	e59f4040 	ldr	r4, [pc, #64]	; dbd4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x4c>
    db90:	e5943000 	ldr	r3, [r4]
    db94:	e3530000 	cmp	r3, #0
    db98:	1a000009 	bne	dbc4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x3c>
    db9c:	e1a05000 	mov	r5, r0
    dba0:	e3a0001c 	mov	r0, #28
    dba4:	eb007536 	bl	2b084 <operator new(unsigned int)>
    dba8:	e1a06000 	mov	r6, r0
    dbac:	e1a02005 	mov	r2, r5
    dbb0:	e59f3020 	ldr	r3, [pc, #32]	; dbd8 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x50>
    dbb4:	e3a01054 	mov	r1, #84	; 0x54
    dbb8:	eb005c01 	bl	24bc4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    dbbc:	e5846000 	str	r6, [r4]
    dbc0:	e8bd8070 	pop	{r4, r5, r6, pc}
    dbc4:	e59f2010 	ldr	r2, [pc, #16]	; dbdc <CDWHCITransferStageData::InitAllocator(unsigned int)+0x54>
    dbc8:	e59f1010 	ldr	r1, [pc, #16]	; dbe0 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x58>
    dbcc:	e59f0010 	ldr	r0, [pc, #16]	; dbe4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x5c>
    dbd0:	eb005b0e 	bl	24810 <assertion_failed>
    dbd4:	0004e1ec 	.word	0x0004e1ec
    dbd8:	0003fcf4 	.word	0x0003fcf4
    dbdc:	000001d5 	.word	0x000001d5
    dbe0:	0003fb30 	.word	0x0003fb30
    dbe4:	0003f860 	.word	0x0003f860

0000dbe8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
    dbe8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    dbec:	e59f4054 	ldr	r4, [pc, #84]	; dc48 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    dbf0:	e1a05000 	mov	r5, r0
    dbf4:	e5940000 	ldr	r0, [r4]
    dbf8:	e24dd00c 	sub	sp, sp, #12
    dbfc:	e3500000 	cmp	r0, #0
    dc00:	1a00000c 	bne	dc38 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    dc04:	e1a06001 	mov	r6, r1
    dc08:	e3a0001c 	mov	r0, #28
    dc0c:	eb00751c 	bl	2b084 <operator new(unsigned int)>
    dc10:	e59f1034 	ldr	r1, [pc, #52]	; dc4c <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    dc14:	e1a03006 	mov	r3, r6
    dc18:	e58d1000 	str	r1, [sp]
    dc1c:	e1a02005 	mov	r2, r5
    dc20:	e3a01054 	mov	r1, #84	; 0x54
    dc24:	e1a07000 	mov	r7, r0
    dc28:	eb005bf1 	bl	24bf4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    dc2c:	e5847000 	str	r7, [r4]
    dc30:	e28dd00c 	add	sp, sp, #12
    dc34:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    dc38:	e59f2010 	ldr	r2, [pc, #16]	; dc50 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    dc3c:	e59f1010 	ldr	r1, [pc, #16]	; dc54 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    dc40:	e59f0010 	ldr	r0, [pc, #16]	; dc58 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x70>
    dc44:	eb005af1 	bl	24810 <assertion_failed>
    dc48:	0004e1ec 	.word	0x0004e1ec
    dc4c:	0003fcf4 	.word	0x0003fcf4
    dc50:	000001d5 	.word	0x000001d5
    dc54:	0003fb30 	.word	0x0003fb30
    dc58:	0003f860 	.word	0x0003f860

0000dc5c <CUSBDevice::~CUSBDevice()>:
    dc5c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    dc60:	e1a04000 	mov	r4, r0
    dc64:	e1a05000 	mov	r5, r0
    dc68:	e3a06000 	mov	r6, #0
    dc6c:	e59f30fc 	ldr	r3, [pc, #252]	; dd70 <CUSBDevice::~CUSBDevice()+0x114>
    dc70:	e2807054 	add	r7, r0, #84	; 0x54
    dc74:	e484302c 	str	r3, [r4], #44	; 0x2c
    dc78:	e5940004 	ldr	r0, [r4, #4]
    dc7c:	e3500000 	cmp	r0, #0
    dc80:	0a000002 	beq	dc90 <CUSBDevice::~CUSBDevice()+0x34>
    dc84:	e5903000 	ldr	r3, [r0]
    dc88:	e5933004 	ldr	r3, [r3, #4]
    dc8c:	e12fff33 	blx	r3
    dc90:	e5a46004 	str	r6, [r4, #4]!
    dc94:	e1540007 	cmp	r4, r7
    dc98:	1afffff6 	bne	dc78 <CUSBDevice::~CUSBDevice()+0x1c>
    dc9c:	e5d51014 	ldrb	r1, [r5, #20]
    dca0:	e3510000 	cmp	r1, #0
    dca4:	0a000011 	beq	dcf0 <CUSBDevice::~CUSBDevice()+0x94>
    dca8:	e3a03000 	mov	r3, #0
    dcac:	e59f00c0 	ldr	r0, [pc, #192]	; dd74 <CUSBDevice::~CUSBDevice()+0x118>
    dcb0:	e261c020 	rsb	ip, r1, #32
    dcb4:	e1c080d0 	ldrd	r8, [r0]
    dcb8:	e1a02138 	lsr	r2, r8, r1
    dcbc:	e1822c19 	orr	r2, r2, r9, lsl ip
    dcc0:	e241e020 	sub	lr, r1, #32
    dcc4:	e1822e39 	orr	r2, r2, r9, lsr lr
    dcc8:	e2022001 	and	r2, r2, #1
    dccc:	e1923003 	orrs	r3, r2, r3
    dcd0:	0a000022 	beq	dd60 <CUSBDevice::~CUSBDevice()+0x104>
    dcd4:	e3a04001 	mov	r4, #1
    dcd8:	e1a03e14 	lsl	r3, r4, lr
    dcdc:	e1833c34 	orr	r3, r3, r4, lsr ip
    dce0:	e1a02114 	lsl	r2, r4, r1
    dce4:	e1c88002 	bic	r8, r8, r2
    dce8:	e1c99003 	bic	r9, r9, r3
    dcec:	e1c080f0 	strd	r8, [r0]
    dcf0:	e595402c 	ldr	r4, [r5, #44]	; 0x2c
    dcf4:	e3540000 	cmp	r4, #0
    dcf8:	0a000004 	beq	dd10 <CUSBDevice::~CUSBDevice()+0xb4>
    dcfc:	e1a00004 	mov	r0, r4
    dd00:	eb002768 	bl	17aa8 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    dd04:	e1a00004 	mov	r0, r4
    dd08:	e3a0101c 	mov	r1, #28
    dd0c:	eb0074ea 	bl	2b0bc <operator delete(void*, unsigned int)>
    dd10:	e3a04000 	mov	r4, #0
    dd14:	e3a01009 	mov	r1, #9
    dd18:	e5950028 	ldr	r0, [r5, #40]	; 0x28
    dd1c:	e585402c 	str	r4, [r5, #44]	; 0x2c
    dd20:	eb0074e5 	bl	2b0bc <operator delete(void*, unsigned int)>
    dd24:	e5854028 	str	r4, [r5, #40]	; 0x28
    dd28:	e3a01012 	mov	r1, #18
    dd2c:	e5950024 	ldr	r0, [r5, #36]	; 0x24
    dd30:	eb0074e1 	bl	2b0bc <operator delete(void*, unsigned int)>
    dd34:	e5956018 	ldr	r6, [r5, #24]
    dd38:	e5854024 	str	r4, [r5, #36]	; 0x24
    dd3c:	e1560004 	cmp	r6, r4
    dd40:	0a000004 	beq	dd58 <CUSBDevice::~CUSBDevice()+0xfc>
    dd44:	e1a00006 	mov	r0, r6
    dd48:	eb00057f 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
    dd4c:	e1a00006 	mov	r0, r6
    dd50:	e3a01014 	mov	r1, #20
    dd54:	eb0074d8 	bl	2b0bc <operator delete(void*, unsigned int)>
    dd58:	e1a00005 	mov	r0, r5
    dd5c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    dd60:	e3a02088 	mov	r2, #136	; 0x88
    dd64:	e59f100c 	ldr	r1, [pc, #12]	; dd78 <CUSBDevice::~CUSBDevice()+0x11c>
    dd68:	e59f000c 	ldr	r0, [pc, #12]	; dd7c <CUSBDevice::~CUSBDevice()+0x120>
    dd6c:	eb005aa7 	bl	24810 <assertion_failed>
    dd70:	0003fd14 	.word	0x0003fd14
    dd74:	0004e1f0 	.word	0x0004e1f0
    dd78:	0003fd2c 	.word	0x0003fd2c
    dd7c:	0003fd3c 	.word	0x0003fd3c

0000dd80 <CUSBDevice::~CUSBDevice()>:
    dd80:	e92d4010 	push	{r4, lr}
    dd84:	e1a04000 	mov	r4, r0
    dd88:	ebffffb3 	bl	dc5c <CUSBDevice::~CUSBDevice()>
    dd8c:	e1a00004 	mov	r0, r4
    dd90:	e3a01058 	mov	r1, #88	; 0x58
    dd94:	eb0074c8 	bl	2b0bc <operator delete(void*, unsigned int)>
    dd98:	e1a00004 	mov	r0, r4
    dd9c:	e8bd8010 	pop	{r4, pc}

0000dda0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>:
    dda0:	e92d4070 	push	{r4, r5, r6, lr}
    dda4:	e3a05000 	mov	r5, #0
    dda8:	e1a04000 	mov	r4, r0
    ddac:	e3a00001 	mov	r0, #1
    ddb0:	e59fc098 	ldr	ip, [pc, #152]	; de50 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb0>
    ddb4:	e1510005 	cmp	r1, r5
    ddb8:	e5841004 	str	r1, [r4, #4]
    ddbc:	e5c42015 	strb	r2, [r4, #21]
    ddc0:	e5843008 	str	r3, [r4, #8]
    ddc4:	e584c000 	str	ip, [r4]
    ddc8:	e5c4001e 	strb	r0, [r4, #30]
    ddcc:	e584500c 	str	r5, [r4, #12]
    ddd0:	e5c45014 	strb	r5, [r4, #20]
    ddd4:	e5845018 	str	r5, [r4, #24]
    ddd8:	e5c4501c 	strb	r5, [r4, #28]
    dddc:	e5c4501d 	strb	r5, [r4, #29]
    dde0:	e5845020 	str	r5, [r4, #32]
    dde4:	e5845024 	str	r5, [r4, #36]	; 0x24
    dde8:	e5845028 	str	r5, [r4, #40]	; 0x28
    ddec:	e584502c 	str	r5, [r4, #44]	; 0x2c
    ddf0:	0a00000e 	beq	de30 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x90>
    ddf4:	e3530000 	cmp	r3, #0
    ddf8:	0a000010 	beq	de40 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xa0>
    ddfc:	e3a00014 	mov	r0, #20
    de00:	eb00749f 	bl	2b084 <operator new(unsigned int)>
    de04:	e1a06000 	mov	r6, r0
    de08:	e1a01004 	mov	r1, r4
    de0c:	eb0004d1 	bl	f158 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    de10:	e5846018 	str	r6, [r4, #24]
    de14:	e284302c 	add	r3, r4, #44	; 0x2c
    de18:	e2842054 	add	r2, r4, #84	; 0x54
    de1c:	e5a35004 	str	r5, [r3, #4]!
    de20:	e1530002 	cmp	r3, r2
    de24:	1afffffc 	bne	de1c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x7c>
    de28:	e1a00004 	mov	r0, r4
    de2c:	e8bd8070 	pop	{r4, r5, r6, pc}
    de30:	e3a02038 	mov	r2, #56	; 0x38
    de34:	e59f1018 	ldr	r1, [pc, #24]	; de54 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb4>
    de38:	e59f0018 	ldr	r0, [pc, #24]	; de58 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb8>
    de3c:	eb005a73 	bl	24810 <assertion_failed>
    de40:	e3a02039 	mov	r2, #57	; 0x39
    de44:	e59f1008 	ldr	r1, [pc, #8]	; de54 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb4>
    de48:	e59f000c 	ldr	r0, [pc, #12]	; de5c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xbc>
    de4c:	eb005a6f 	bl	24810 <assertion_failed>
    de50:	0003fd14 	.word	0x0003fd14
    de54:	0003fd2c 	.word	0x0003fd2c
    de58:	0003fa80 	.word	0x0003fa80
    de5c:	0003fd6c 	.word	0x0003fd6c

0000de60 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
    de60:	e3a0c000 	mov	ip, #0
    de64:	e92d4070 	push	{r4, r5, r6, lr}
    de68:	e1a04000 	mov	r4, r0
    de6c:	e59fe134 	ldr	lr, [pc, #308]	; dfa8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x148>
    de70:	e59d0010 	ldr	r0, [sp, #16]
    de74:	e151000c 	cmp	r1, ip
    de78:	e5841004 	str	r1, [r4, #4]
    de7c:	e5c42015 	strb	r2, [r4, #21]
    de80:	e584300c 	str	r3, [r4, #12]
    de84:	e584e000 	str	lr, [r4]
    de88:	e5840010 	str	r0, [r4, #16]
    de8c:	e584c008 	str	ip, [r4, #8]
    de90:	e5c4c014 	strb	ip, [r4, #20]
    de94:	e584c018 	str	ip, [r4, #24]
    de98:	e584c024 	str	ip, [r4, #36]	; 0x24
    de9c:	e584c028 	str	ip, [r4, #40]	; 0x28
    dea0:	e584c02c 	str	ip, [r4, #44]	; 0x2c
    dea4:	0a00002f 	beq	df68 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x108>
    dea8:	e3530000 	cmp	r3, #0
    deac:	0a000031 	beq	df78 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x118>
    deb0:	e1a00003 	mov	r0, r3
    deb4:	eb00067d 	bl	f8b0 <CUSBFunction::GetDevice() const>
    deb8:	e3500000 	cmp	r0, #0
    debc:	0a000031 	beq	df88 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x128>
    dec0:	e5d0301c 	ldrb	r3, [r0, #28]
    dec4:	e5c4301c 	strb	r3, [r4, #28]
    dec8:	e5d0201d 	ldrb	r2, [r0, #29]
    decc:	e3530000 	cmp	r3, #0
    ded0:	e5c4201d 	strb	r2, [r4, #29]
    ded4:	e5d0301e 	ldrb	r3, [r0, #30]
    ded8:	e5c4301e 	strb	r3, [r4, #30]
    dedc:	e5903020 	ldr	r3, [r0, #32]
    dee0:	e5843020 	str	r3, [r4, #32]
    dee4:	0a000010 	beq	df2c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xcc>
    dee8:	e5945018 	ldr	r5, [r4, #24]
    deec:	e3550000 	cmp	r5, #0
    def0:	1a000028 	bne	df98 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x138>
    def4:	e3a00014 	mov	r0, #20
    def8:	eb007461 	bl	2b084 <operator new(unsigned int)>
    defc:	e1a01004 	mov	r1, r4
    df00:	e1a06000 	mov	r6, r0
    df04:	eb000493 	bl	f158 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    df08:	e1a02005 	mov	r2, r5
    df0c:	e5846018 	str	r6, [r4, #24]
    df10:	e284302c 	add	r3, r4, #44	; 0x2c
    df14:	e2841054 	add	r1, r4, #84	; 0x54
    df18:	e5a32004 	str	r2, [r3, #4]!
    df1c:	e1510003 	cmp	r1, r3
    df20:	1afffffc 	bne	df18 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xb8>
    df24:	e1a00004 	mov	r0, r4
    df28:	e8bd8070 	pop	{r4, r5, r6, pc}
    df2c:	e5d03015 	ldrb	r3, [r0, #21]
    df30:	e3530002 	cmp	r3, #2
    df34:	1affffeb 	bne	dee8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    df38:	e5d43015 	ldrb	r3, [r4, #21]
    df3c:	e3530001 	cmp	r3, #1
    df40:	caffffe8 	bgt	dee8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    df44:	e3a02001 	mov	r2, #1
    df48:	e5943010 	ldr	r3, [r4, #16]
    df4c:	e5c4201c 	strb	r2, [r4, #28]
    df50:	e5d02014 	ldrb	r2, [r0, #20]
    df54:	e2833001 	add	r3, r3, #1
    df58:	e5c4201d 	strb	r2, [r4, #29]
    df5c:	e5840020 	str	r0, [r4, #32]
    df60:	e5c4301e 	strb	r3, [r4, #30]
    df64:	eaffffdf 	b	dee8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    df68:	e3a02057 	mov	r2, #87	; 0x57
    df6c:	e59f1038 	ldr	r1, [pc, #56]	; dfac <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    df70:	e59f0038 	ldr	r0, [pc, #56]	; dfb0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x150>
    df74:	eb005a25 	bl	24810 <assertion_failed>
    df78:	e3a02058 	mov	r2, #88	; 0x58
    df7c:	e59f1028 	ldr	r1, [pc, #40]	; dfac <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    df80:	e59f002c 	ldr	r0, [pc, #44]	; dfb4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x154>
    df84:	eb005a21 	bl	24810 <assertion_failed>
    df88:	e3a0205b 	mov	r2, #91	; 0x5b
    df8c:	e59f1018 	ldr	r1, [pc, #24]	; dfac <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    df90:	e59f0020 	ldr	r0, [pc, #32]	; dfb8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x158>
    df94:	eb005a1d 	bl	24810 <assertion_failed>
    df98:	e3a02073 	mov	r2, #115	; 0x73
    df9c:	e59f1008 	ldr	r1, [pc, #8]	; dfac <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    dfa0:	e59f0014 	ldr	r0, [pc, #20]	; dfbc <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x15c>
    dfa4:	eb005a19 	bl	24810 <assertion_failed>
    dfa8:	0003fd14 	.word	0x0003fd14
    dfac:	0003fd2c 	.word	0x0003fd2c
    dfb0:	0003fa80 	.word	0x0003fa80
    dfb4:	0003fd80 	.word	0x0003fd80
    dfb8:	0003fd8c 	.word	0x0003fd8c
    dfbc:	0003fd9c 	.word	0x0003fd9c

0000dfc0 <CUSBDevice::ReScanDevices()>:
    dfc0:	e92d4070 	push	{r4, r5, r6, lr}
    dfc4:	e3a05000 	mov	r5, #0
    dfc8:	e280402c 	add	r4, r0, #44	; 0x2c
    dfcc:	e2806054 	add	r6, r0, #84	; 0x54
    dfd0:	e5b40004 	ldr	r0, [r4, #4]!
    dfd4:	e3500000 	cmp	r0, #0
    dfd8:	0a000004 	beq	dff0 <CUSBDevice::ReScanDevices()+0x30>
    dfdc:	e5903000 	ldr	r3, [r0]
    dfe0:	e5933020 	ldr	r3, [r3, #32]
    dfe4:	e12fff33 	blx	r3
    dfe8:	e3500000 	cmp	r0, #0
    dfec:	11a05000 	movne	r5, r0
    dff0:	e1540006 	cmp	r4, r6
    dff4:	1afffff5 	bne	dfd0 <CUSBDevice::ReScanDevices()+0x10>
    dff8:	e1a00005 	mov	r0, r5
    dffc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e000 <CUSBDevice::RemoveDevice()>:
    e000:	e5903008 	ldr	r3, [r0, #8]
    e004:	e3530000 	cmp	r3, #0
    e008:	0a000003 	beq	e01c <CUSBDevice::RemoveDevice()+0x1c>
    e00c:	e5932000 	ldr	r2, [r3]
    e010:	e1a00003 	mov	r0, r3
    e014:	e592300c 	ldr	r3, [r2, #12]
    e018:	e12fff13 	bx	r3
    e01c:	e590300c 	ldr	r3, [r0, #12]
    e020:	e3530000 	cmp	r3, #0
    e024:	0a000002 	beq	e034 <CUSBDevice::RemoveDevice()+0x34>
    e028:	e5901010 	ldr	r1, [r0, #16]
    e02c:	e1a00003 	mov	r0, r3
    e030:	ea001a68 	b	149d8 <CUSBStandardHub::RemoveDevice(unsigned int)>
    e034:	e92d4010 	push	{r4, lr}
    e038:	e3a02f7e 	mov	r2, #504	; 0x1f8
    e03c:	e59f1004 	ldr	r1, [pc, #4]	; e048 <CUSBDevice::RemoveDevice()+0x48>
    e040:	e59f0004 	ldr	r0, [pc, #4]	; e04c <CUSBDevice::RemoveDevice()+0x4c>
    e044:	eb0059f1 	bl	24810 <assertion_failed>
    e048:	0003fd2c 	.word	0x0003fd2c
    e04c:	0003fd80 	.word	0x0003fd80

0000e050 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    e050:	e92d4070 	push	{r4, r5, r6, lr}
    e054:	e1a06000 	mov	r6, r0
    e058:	e24dd008 	sub	sp, sp, #8
    e05c:	e3a00010 	mov	r0, #16
    e060:	e1a04001 	mov	r4, r1
    e064:	eb007406 	bl	2b084 <operator new(unsigned int)>
    e068:	e1a05000 	mov	r5, r0
    e06c:	eb0066c0 	bl	27b74 <CString::CString()>
    e070:	e3540000 	cmp	r4, #0
    e074:	0a000013 	beq	e0c8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x78>
    e078:	e3540001 	cmp	r4, #1
    e07c:	1a00000d 	bne	e0b8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x68>
    e080:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    e084:	e3510000 	cmp	r1, #0
    e088:	0a000026 	beq	e128 <CUSBDevice::GetName(TDeviceNameSelector) const+0xd8>
    e08c:	e5d12004 	ldrb	r2, [r1, #4]
    e090:	e2423001 	sub	r3, r2, #1
    e094:	e6ef3073 	uxtb	r3, r3
    e098:	e35300fd 	cmp	r3, #253	; 0xfd
    e09c:	9a000018 	bls	e104 <CUSBDevice::GetName(TDeviceNameSelector) const+0xb4>
    e0a0:	e59f10a0 	ldr	r1, [pc, #160]	; e148 <CUSBDevice::GetName(TDeviceNameSelector) const+0xf8>
    e0a4:	e1a00005 	mov	r0, r5
    e0a8:	eb0066cd 	bl	27be4 <CString::operator=(char const*)>
    e0ac:	e1a00005 	mov	r0, r5
    e0b0:	e28dd008 	add	sp, sp, #8
    e0b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0b8:	e3a02f86 	mov	r2, #536	; 0x218
    e0bc:	e59f1088 	ldr	r1, [pc, #136]	; e14c <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    e0c0:	e59f0088 	ldr	r0, [pc, #136]	; e150 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    e0c4:	eb0059d1 	bl	24810 <assertion_failed>
    e0c8:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    e0cc:	e3510000 	cmp	r1, #0
    e0d0:	0a000018 	beq	e138 <CUSBDevice::GetName(TDeviceNameSelector) const+0xe8>
    e0d4:	e5d1000b 	ldrb	r0, [r1, #11]
    e0d8:	e5d1300a 	ldrb	r3, [r1, #10]
    e0dc:	e5d12008 	ldrb	r2, [r1, #8]
    e0e0:	e5d11009 	ldrb	r1, [r1, #9]
    e0e4:	e1833400 	orr	r3, r3, r0, lsl #8
    e0e8:	e1822401 	orr	r2, r2, r1, lsl #8
    e0ec:	e1a00005 	mov	r0, r5
    e0f0:	e59f105c 	ldr	r1, [pc, #92]	; e154 <CUSBDevice::GetName(TDeviceNameSelector) const+0x104>
    e0f4:	eb006be1 	bl	29080 <CString::Format(char const*, ...)>
    e0f8:	e1a00005 	mov	r0, r5
    e0fc:	e28dd008 	add	sp, sp, #8
    e100:	e8bd8070 	pop	{r4, r5, r6, pc}
    e104:	e5d13005 	ldrb	r3, [r1, #5]
    e108:	e5d11006 	ldrb	r1, [r1, #6]
    e10c:	e1a00005 	mov	r0, r5
    e110:	e58d1000 	str	r1, [sp]
    e114:	e59f103c 	ldr	r1, [pc, #60]	; e158 <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    e118:	eb006bd8 	bl	29080 <CString::Format(char const*, ...)>
    e11c:	e1a00005 	mov	r0, r5
    e120:	e28dd008 	add	sp, sp, #8
    e124:	e8bd8070 	pop	{r4, r5, r6, pc}
    e128:	e59f202c 	ldr	r2, [pc, #44]	; e15c <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
    e12c:	e59f1018 	ldr	r1, [pc, #24]	; e14c <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    e130:	e59f0028 	ldr	r0, [pc, #40]	; e160 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
    e134:	eb0059b5 	bl	24810 <assertion_failed>
    e138:	e3a02f81 	mov	r2, #516	; 0x204
    e13c:	e59f1008 	ldr	r1, [pc, #8]	; e14c <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    e140:	e59f0018 	ldr	r0, [pc, #24]	; e160 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
    e144:	eb0059b1 	bl	24810 <assertion_failed>
    e148:	0003fddc 	.word	0x0003fddc
    e14c:	0003fd2c 	.word	0x0003fd2c
    e150:	0003fe24 	.word	0x0003fe24
    e154:	0003fdc4 	.word	0x0003fdc4
    e158:	0003fdd0 	.word	0x0003fdd0
    e15c:	0000020b 	.word	0x0000020b
    e160:	0003fdb0 	.word	0x0003fdb0

0000e164 <CUSBDevice::GetNames() const>:
    e164:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e168:	e1a07000 	mov	r7, r0
    e16c:	e3a00010 	mov	r0, #16
    e170:	eb0073c3 	bl	2b084 <operator new(unsigned int)>
    e174:	e3a04000 	mov	r4, #0
    e178:	e1a06000 	mov	r6, r0
    e17c:	eb00667c 	bl	27b74 <CString::CString()>
    e180:	e59f80b4 	ldr	r8, [pc, #180]	; e23c <CUSBDevice::GetNames() const+0xd8>
    e184:	e59f90b4 	ldr	r9, [pc, #180]	; e240 <CUSBDevice::GetNames() const+0xdc>
    e188:	e6ef1074 	uxtb	r1, r4
    e18c:	e1a00007 	mov	r0, r7
    e190:	ebffffae 	bl	e050 <CUSBDevice::GetName(TDeviceNameSelector) const>
    e194:	e2505000 	subs	r5, r0, #0
    e198:	0a00001f 	beq	e21c <CUSBDevice::GetNames() const+0xb8>
    e19c:	e1a01008 	mov	r1, r8
    e1a0:	eb0066dc 	bl	27d18 <CString::Compare(char const*) const>
    e1a4:	e3500000 	cmp	r0, #0
    e1a8:	1a000011 	bne	e1f4 <CUSBDevice::GetNames() const+0x90>
    e1ac:	e5953000 	ldr	r3, [r5]
    e1b0:	e2844001 	add	r4, r4, #1
    e1b4:	e5933004 	ldr	r3, [r3, #4]
    e1b8:	e1a00005 	mov	r0, r5
    e1bc:	e12fff33 	blx	r3
    e1c0:	e3540002 	cmp	r4, #2
    e1c4:	1affffef 	bne	e188 <CUSBDevice::GetNames() const+0x24>
    e1c8:	e1a00006 	mov	r0, r6
    e1cc:	eb0066ac 	bl	27c84 <CString::GetLength() const>
    e1d0:	e3500000 	cmp	r0, #0
    e1d4:	0a000001 	beq	e1e0 <CUSBDevice::GetNames() const+0x7c>
    e1d8:	e1a00006 	mov	r0, r6
    e1dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e1e0:	e59f1054 	ldr	r1, [pc, #84]	; e23c <CUSBDevice::GetNames() const+0xd8>
    e1e4:	e1a00006 	mov	r0, r6
    e1e8:	eb00667d 	bl	27be4 <CString::operator=(char const*)>
    e1ec:	e1a00006 	mov	r0, r6
    e1f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e1f4:	e1a00006 	mov	r0, r6
    e1f8:	eb0066a1 	bl	27c84 <CString::GetLength() const>
    e1fc:	e3500000 	cmp	r0, #0
    e200:	1a000009 	bne	e22c <CUSBDevice::GetNames() const+0xc8>
    e204:	e1a00005 	mov	r0, r5
    e208:	eb00666f 	bl	27bcc <CString::operator char const*() const>
    e20c:	e1a01000 	mov	r1, r0
    e210:	e1a00006 	mov	r0, r6
    e214:	eb00669e 	bl	27c94 <CString::Append(char const*)>
    e218:	eaffffe3 	b	e1ac <CUSBDevice::GetNames() const+0x48>
    e21c:	e59f2020 	ldr	r2, [pc, #32]	; e244 <CUSBDevice::GetNames() const+0xe0>
    e220:	e59f1020 	ldr	r1, [pc, #32]	; e248 <CUSBDevice::GetNames() const+0xe4>
    e224:	e59f0020 	ldr	r0, [pc, #32]	; e24c <CUSBDevice::GetNames() const+0xe8>
    e228:	eb005978 	bl	24810 <assertion_failed>
    e22c:	e1a01009 	mov	r1, r9
    e230:	e1a00006 	mov	r0, r6
    e234:	eb006696 	bl	27c94 <CString::Append(char const*)>
    e238:	eafffff1 	b	e204 <CUSBDevice::GetNames() const+0xa0>
    e23c:	0003fddc 	.word	0x0003fddc
    e240:	0003fdf0 	.word	0x0003fdf0
    e244:	00000229 	.word	0x00000229
    e248:	0003fd2c 	.word	0x0003fd2c
    e24c:	0003fde4 	.word	0x0003fde4

0000e250 <CUSBDevice::SetAddress(unsigned char)>:
    e250:	e351003f 	cmp	r1, #63	; 0x3f
    e254:	ca000001 	bgt	e260 <CUSBDevice::SetAddress(unsigned char)+0x10>
    e258:	e5c01014 	strb	r1, [r0, #20]
    e25c:	e12fff1e 	bx	lr
    e260:	e92d4010 	push	{r4, lr}
    e264:	e59f2008 	ldr	r2, [pc, #8]	; e274 <CUSBDevice::SetAddress(unsigned char)+0x24>
    e268:	e59f1008 	ldr	r1, [pc, #8]	; e278 <CUSBDevice::SetAddress(unsigned char)+0x28>
    e26c:	e59f0008 	ldr	r0, [pc, #8]	; e27c <CUSBDevice::SetAddress(unsigned char)+0x2c>
    e270:	eb005966 	bl	24810 <assertion_failed>
    e274:	00000243 	.word	0x00000243
    e278:	0003fd2c 	.word	0x0003fd2c
    e27c:	0003fdf4 	.word	0x0003fdf4

0000e280 <CUSBDevice::GetAddress() const>:
    e280:	e5d00014 	ldrb	r0, [r0, #20]
    e284:	e12fff1e 	bx	lr

0000e288 <CUSBDevice::GetSpeed() const>:
    e288:	e5d00015 	ldrb	r0, [r0, #21]
    e28c:	e12fff1e 	bx	lr

0000e290 <CUSBDevice::IsSplit() const>:
    e290:	e5d0001c 	ldrb	r0, [r0, #28]
    e294:	e12fff1e 	bx	lr

0000e298 <CUSBDevice::GetHubAddress() const>:
    e298:	e5d0001d 	ldrb	r0, [r0, #29]
    e29c:	e12fff1e 	bx	lr

0000e2a0 <CUSBDevice::GetHubPortNumber() const>:
    e2a0:	e5d0001e 	ldrb	r0, [r0, #30]
    e2a4:	e12fff1e 	bx	lr

0000e2a8 <CUSBDevice::GetTTHubDevice() const>:
    e2a8:	e5900020 	ldr	r0, [r0, #32]
    e2ac:	e12fff1e 	bx	lr

0000e2b0 <CUSBDevice::GetEndpoint0() const>:
    e2b0:	e5900018 	ldr	r0, [r0, #24]
    e2b4:	e3500000 	cmp	r0, #0
    e2b8:	0a000000 	beq	e2c0 <CUSBDevice::GetEndpoint0() const+0x10>
    e2bc:	e12fff1e 	bx	lr
    e2c0:	e92d4010 	push	{r4, lr}
    e2c4:	e3a02f9b 	mov	r2, #620	; 0x26c
    e2c8:	e59f1004 	ldr	r1, [pc, #4]	; e2d4 <CUSBDevice::GetEndpoint0() const+0x24>
    e2cc:	e59f0004 	ldr	r0, [pc, #4]	; e2d8 <CUSBDevice::GetEndpoint0() const+0x28>
    e2d0:	eb00594e 	bl	24810 <assertion_failed>
    e2d4:	0003fd2c 	.word	0x0003fd2c
    e2d8:	0003fe14 	.word	0x0003fe14

0000e2dc <CUSBDevice::GetHost() const>:
    e2dc:	e5900004 	ldr	r0, [r0, #4]
    e2e0:	e3500000 	cmp	r0, #0
    e2e4:	0a000000 	beq	e2ec <CUSBDevice::GetHost() const+0x10>
    e2e8:	e12fff1e 	bx	lr
    e2ec:	e92d4010 	push	{r4, lr}
    e2f0:	e59f2008 	ldr	r2, [pc, #8]	; e300 <CUSBDevice::GetHost() const+0x24>
    e2f4:	e59f1008 	ldr	r1, [pc, #8]	; e304 <CUSBDevice::GetHost() const+0x28>
    e2f8:	e59f0008 	ldr	r0, [pc, #8]	; e308 <CUSBDevice::GetHost() const+0x2c>
    e2fc:	eb005943 	bl	24810 <assertion_failed>
    e300:	00000272 	.word	0x00000272
    e304:	0003fd2c 	.word	0x0003fd2c
    e308:	0003fa80 	.word	0x0003fa80

0000e30c <CUSBDevice::GetDeviceDescriptor() const>:
    e30c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    e310:	e3500000 	cmp	r0, #0
    e314:	0a000000 	beq	e31c <CUSBDevice::GetDeviceDescriptor() const+0x10>
    e318:	e12fff1e 	bx	lr
    e31c:	e92d4010 	push	{r4, lr}
    e320:	e3a02f9e 	mov	r2, #632	; 0x278
    e324:	e59f1004 	ldr	r1, [pc, #4]	; e330 <CUSBDevice::GetDeviceDescriptor() const+0x24>
    e328:	e59f0004 	ldr	r0, [pc, #4]	; e334 <CUSBDevice::GetDeviceDescriptor() const+0x28>
    e32c:	eb005937 	bl	24810 <assertion_failed>
    e330:	0003fd2c 	.word	0x0003fd2c
    e334:	0003fdb0 	.word	0x0003fdb0

0000e338 <CUSBDevice::GetConfigurationDescriptor() const>:
    e338:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    e33c:	e3500000 	cmp	r0, #0
    e340:	0a000000 	beq	e348 <CUSBDevice::GetConfigurationDescriptor() const+0x10>
    e344:	e12fff1e 	bx	lr
    e348:	e92d4010 	push	{r4, lr}
    e34c:	e59f2008 	ldr	r2, [pc, #8]	; e35c <CUSBDevice::GetConfigurationDescriptor() const+0x24>
    e350:	e59f1008 	ldr	r1, [pc, #8]	; e360 <CUSBDevice::GetConfigurationDescriptor() const+0x28>
    e354:	e59f0008 	ldr	r0, [pc, #8]	; e364 <CUSBDevice::GetConfigurationDescriptor() const+0x2c>
    e358:	eb00592c 	bl	24810 <assertion_failed>
    e35c:	0000027e 	.word	0x0000027e
    e360:	0003fd2c 	.word	0x0003fd2c
    e364:	0003fe28 	.word	0x0003fe28

0000e368 <CUSBDevice::GetDescriptor(unsigned char)>:
    e368:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e36c:	e3500000 	cmp	r0, #0
    e370:	0a000000 	beq	e378 <CUSBDevice::GetDescriptor(unsigned char)+0x10>
    e374:	ea0025ce 	b	17ab4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e378:	e92d4010 	push	{r4, lr}
    e37c:	e3a02fa1 	mov	r2, #644	; 0x284
    e380:	e59f1004 	ldr	r1, [pc, #4]	; e38c <CUSBDevice::GetDescriptor(unsigned char)+0x24>
    e384:	e59f0004 	ldr	r0, [pc, #4]	; e390 <CUSBDevice::GetDescriptor(unsigned char)+0x28>
    e388:	eb005920 	bl	24810 <assertion_failed>
    e38c:	0003fd2c 	.word	0x0003fd2c
    e390:	0003fe3c 	.word	0x0003fe3c

0000e394 <CUSBDevice::ConfigurationError(char const*) const>:
    e394:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e398:	e3500000 	cmp	r0, #0
    e39c:	0a000000 	beq	e3a4 <CUSBDevice::ConfigurationError(char const*) const+0x10>
    e3a0:	ea002611 	b	17bec <CUSBConfigurationParser::Error(char const*) const>
    e3a4:	e92d4010 	push	{r4, lr}
    e3a8:	e59f2008 	ldr	r2, [pc, #8]	; e3b8 <CUSBDevice::ConfigurationError(char const*) const+0x24>
    e3ac:	e59f1008 	ldr	r1, [pc, #8]	; e3bc <CUSBDevice::ConfigurationError(char const*) const+0x28>
    e3b0:	e59f0008 	ldr	r0, [pc, #8]	; e3c0 <CUSBDevice::ConfigurationError(char const*) const+0x2c>
    e3b4:	eb005915 	bl	24810 <assertion_failed>
    e3b8:	0000028a 	.word	0x0000028a
    e3bc:	0003fd2c 	.word	0x0003fd2c
    e3c0:	0003fe3c 	.word	0x0003fe3c

0000e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    e3c4:	e92d000c 	push	{r2, r3}
    e3c8:	e92d4070 	push	{r4, r5, r6, lr}
    e3cc:	e24dd020 	sub	sp, sp, #32
    e3d0:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    e3d4:	e3540000 	cmp	r4, #0
    e3d8:	0a00001d 	beq	e454 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x90>
    e3dc:	e1a05000 	mov	r5, r0
    e3e0:	e28d0010 	add	r0, sp, #16
    e3e4:	e1a06001 	mov	r6, r1
    e3e8:	eb0065e1 	bl	27b74 <CString::CString()>
    e3ec:	e5d5201e 	ldrb	r2, [r5, #30]
    e3f0:	e5d5301d 	ldrb	r3, [r5, #29]
    e3f4:	e59f1068 	ldr	r1, [pc, #104]	; e464 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa0>
    e3f8:	e28d0010 	add	r0, sp, #16
    e3fc:	e58d2000 	str	r2, [sp]
    e400:	e59f2060 	ldr	r2, [pc, #96]	; e468 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa4>
    e404:	eb006b1d 	bl	29080 <CString::Format(char const*, ...)>
    e408:	e28d3034 	add	r3, sp, #52	; 0x34
    e40c:	e58d300c 	str	r3, [sp, #12]
    e410:	eb0061f1 	bl	26bdc <CLogger::Get()>
    e414:	e1a05000 	mov	r5, r0
    e418:	e28d0010 	add	r0, sp, #16
    e41c:	eb0065ea 	bl	27bcc <CString::operator char const*() const>
    e420:	e59dc00c 	ldr	ip, [sp, #12]
    e424:	e1a01000 	mov	r1, r0
    e428:	e1a03004 	mov	r3, r4
    e42c:	e1a00005 	mov	r0, r5
    e430:	e1a02006 	mov	r2, r6
    e434:	e58dc000 	str	ip, [sp]
    e438:	eb006130 	bl	26900 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    e43c:	e28d0010 	add	r0, sp, #16
    e440:	eb006598 	bl	27aa8 <CString::~CString()>
    e444:	e28dd020 	add	sp, sp, #32
    e448:	e8bd4070 	pop	{r4, r5, r6, lr}
    e44c:	e28dd008 	add	sp, sp, #8
    e450:	e12fff1e 	bx	lr
    e454:	e3a02e29 	mov	r2, #656	; 0x290
    e458:	e59f100c 	ldr	r1, [pc, #12]	; e46c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa8>
    e45c:	e59f000c 	ldr	r0, [pc, #12]	; e470 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xac>
    e460:	eb0058ea 	bl	24810 <assertion_failed>
    e464:	0003fe64 	.word	0x0003fe64
    e468:	0003fd24 	.word	0x0003fd24
    e46c:	0003fd2c 	.word	0x0003fd2c
    e470:	0003fe54 	.word	0x0003fe54

0000e474 <CUSBDevice::Initialize()>:
    e474:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e478:	e5906024 	ldr	r6, [r0, #36]	; 0x24
    e47c:	e24dd014 	sub	sp, sp, #20
    e480:	e3560000 	cmp	r6, #0
    e484:	1a000033 	bne	e558 <CUSBDevice::Initialize()+0xe4>
    e488:	e1a04000 	mov	r4, r0
    e48c:	e3a00012 	mov	r0, #18
    e490:	eb0072fb 	bl	2b084 <operator new(unsigned int)>
    e494:	e5943004 	ldr	r3, [r4, #4]
    e498:	e5840024 	str	r0, [r4, #36]	; 0x24
    e49c:	e3530000 	cmp	r3, #0
    e4a0:	0a000030 	beq	e568 <CUSBDevice::Initialize()+0xf4>
    e4a4:	e5941018 	ldr	r1, [r4, #24]
    e4a8:	e3510000 	cmp	r1, #0
    e4ac:	0a000031 	beq	e578 <CUSBDevice::Initialize()+0x104>
    e4b0:	e3a02008 	mov	r2, #8
    e4b4:	e3a07080 	mov	r7, #128	; 0x80
    e4b8:	e58d0000 	str	r0, [sp]
    e4bc:	e98d0084 	stmib	sp, {r2, r7}
    e4c0:	e1a00003 	mov	r0, r3
    e4c4:	e58d600c 	str	r6, [sp, #12]
    e4c8:	e1a03006 	mov	r3, r6
    e4cc:	e3a02001 	mov	r2, #1
    e4d0:	eb001110 	bl	12918 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e4d4:	e3500008 	cmp	r0, #8
    e4d8:	1a000012 	bne	e528 <CUSBDevice::Initialize()+0xb4>
    e4dc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e4e0:	e5d3b000 	ldrb	fp, [r3]
    e4e4:	e35b0012 	cmp	fp, #18
    e4e8:	1a000002 	bne	e4f8 <CUSBDevice::Initialize()+0x84>
    e4ec:	e5d3a001 	ldrb	sl, [r3, #1]
    e4f0:	e35a0001 	cmp	sl, #1
    e4f4:	0a000023 	beq	e588 <CUSBDevice::Initialize()+0x114>
    e4f8:	e3a05000 	mov	r5, #0
    e4fc:	e59f2668 	ldr	r2, [pc, #1640]	; eb6c <CUSBDevice::Initialize()+0x6f8>
    e500:	e1a00004 	mov	r0, r4
    e504:	e3a01001 	mov	r1, #1
    e508:	ebffffad 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e50c:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    e510:	e3a01012 	mov	r1, #18
    e514:	eb0072e8 	bl	2b0bc <operator delete(void*, unsigned int)>
    e518:	e1a00005 	mov	r0, r5
    e51c:	e5845024 	str	r5, [r4, #36]	; 0x24
    e520:	e28dd014 	add	sp, sp, #20
    e524:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e528:	e3a01001 	mov	r1, #1
    e52c:	e59f263c 	ldr	r2, [pc, #1596]	; eb70 <CUSBDevice::Initialize()+0x6fc>
    e530:	e1a05006 	mov	r5, r6
    e534:	e1a00004 	mov	r0, r4
    e538:	ebffffa1 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e53c:	e3a01012 	mov	r1, #18
    e540:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    e544:	eb0072dc 	bl	2b0bc <operator delete(void*, unsigned int)>
    e548:	e5846024 	str	r6, [r4, #36]	; 0x24
    e54c:	e1a00005 	mov	r0, r5
    e550:	e28dd014 	add	sp, sp, #20
    e554:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e558:	e3a020a7 	mov	r2, #167	; 0xa7
    e55c:	e59f1610 	ldr	r1, [pc, #1552]	; eb74 <CUSBDevice::Initialize()+0x700>
    e560:	e59f0610 	ldr	r0, [pc, #1552]	; eb78 <CUSBDevice::Initialize()+0x704>
    e564:	eb0058a9 	bl	24810 <assertion_failed>
    e568:	e3a020ab 	mov	r2, #171	; 0xab
    e56c:	e59f1600 	ldr	r1, [pc, #1536]	; eb74 <CUSBDevice::Initialize()+0x700>
    e570:	e59f0604 	ldr	r0, [pc, #1540]	; eb7c <CUSBDevice::Initialize()+0x708>
    e574:	eb0058a5 	bl	24810 <assertion_failed>
    e578:	e3a020ac 	mov	r2, #172	; 0xac
    e57c:	e59f15f0 	ldr	r1, [pc, #1520]	; eb74 <CUSBDevice::Initialize()+0x700>
    e580:	e59f05f8 	ldr	r0, [pc, #1528]	; eb80 <CUSBDevice::Initialize()+0x70c>
    e584:	eb0058a1 	bl	24810 <assertion_failed>
    e588:	e5d31007 	ldrb	r1, [r3, #7]
    e58c:	e5940018 	ldr	r0, [r4, #24]
    e590:	eb00037f 	bl	f394 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    e594:	e2505000 	subs	r5, r0, #0
    e598:	0a000027 	beq	e63c <CUSBDevice::Initialize()+0x1c8>
    e59c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e5a0:	e5941018 	ldr	r1, [r4, #24]
    e5a4:	e5940004 	ldr	r0, [r4, #4]
    e5a8:	e1a0200a 	mov	r2, sl
    e5ac:	e88d0808 	stm	sp, {r3, fp}
    e5b0:	e58d600c 	str	r6, [sp, #12]
    e5b4:	e58d7008 	str	r7, [sp, #8]
    e5b8:	e1a03006 	mov	r3, r6
    e5bc:	eb0010d5 	bl	12918 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e5c0:	e3500012 	cmp	r0, #18
    e5c4:	1a000025 	bne	e660 <CUSBDevice::Initialize()+0x1ec>
    e5c8:	e59fc5b4 	ldr	ip, [pc, #1460]	; eb84 <CUSBDevice::Initialize()+0x710>
    e5cc:	e1cc20d0 	ldrd	r2, [ip]
    e5d0:	e1b010a3 	lsrs	r1, r3, #1
    e5d4:	e1a00062 	rrx	r0, r2
    e5d8:	e3a01000 	mov	r1, #0
    e5dc:	e2000001 	and	r0, r0, #1
    e5e0:	e1901001 	orrs	r1, r0, r1
    e5e4:	0a000020 	beq	e66c <CUSBDevice::Initialize()+0x1f8>
    e5e8:	e3a0e002 	mov	lr, #2
    e5ec:	e26e1020 	rsb	r1, lr, #32
    e5f0:	e1a08e32 	lsr	r8, r2, lr
    e5f4:	e1888113 	orr	r8, r8, r3, lsl r1
    e5f8:	e24e1020 	sub	r1, lr, #32
    e5fc:	e1888133 	orr	r8, r8, r3, lsr r1
    e600:	e3a01000 	mov	r1, #0
    e604:	e2080001 	and	r0, r8, #1
    e608:	e1901001 	orrs	r1, r0, r1
    e60c:	e6ef607e 	uxtb	r6, lr
    e610:	e1a0a00e 	mov	sl, lr
    e614:	0a000015 	beq	e670 <CUSBDevice::Initialize()+0x1fc>
    e618:	e28ee001 	add	lr, lr, #1
    e61c:	e35e0040 	cmp	lr, #64	; 0x40
    e620:	1afffff1 	bne	e5ec <CUSBDevice::Initialize()+0x178>
    e624:	e1a00004 	mov	r0, r4
    e628:	e59f2558 	ldr	r2, [pc, #1368]	; eb88 <CUSBDevice::Initialize()+0x714>
    e62c:	e3a01001 	mov	r1, #1
    e630:	ebffff63 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e634:	e3a05000 	mov	r5, #0
    e638:	eaffffc3 	b	e54c <CUSBDevice::Initialize()+0xd8>
    e63c:	e1a0100a 	mov	r1, sl
    e640:	e59f2544 	ldr	r2, [pc, #1348]	; eb8c <CUSBDevice::Initialize()+0x718>
    e644:	e1a00004 	mov	r0, r4
    e648:	ebffff5d 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e64c:	e1a0100b 	mov	r1, fp
    e650:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    e654:	eb007298 	bl	2b0bc <operator delete(void*, unsigned int)>
    e658:	e5845024 	str	r5, [r4, #36]	; 0x24
    e65c:	eaffffba 	b	e54c <CUSBDevice::Initialize()+0xd8>
    e660:	e1a0100a 	mov	r1, sl
    e664:	e59f2524 	ldr	r2, [pc, #1316]	; eb90 <CUSBDevice::Initialize()+0x71c>
    e668:	eaffffb0 	b	e530 <CUSBDevice::Initialize()+0xbc>
    e66c:	e1a0600a 	mov	r6, sl
    e670:	e3a07001 	mov	r7, #1
    e674:	e24ae020 	sub	lr, sl, #32
    e678:	e1a09e17 	lsl	r9, r7, lr
    e67c:	e26ae020 	rsb	lr, sl, #32
    e680:	e1899e37 	orr	r9, r9, r7, lsr lr
    e684:	e1a08a17 	lsl	r8, r7, sl
    e688:	e1888002 	orr	r8, r8, r2
    e68c:	e1899003 	orr	r9, r9, r3
    e690:	e5940004 	ldr	r0, [r4, #4]
    e694:	e1a02006 	mov	r2, r6
    e698:	e5941018 	ldr	r1, [r4, #24]
    e69c:	e1cc80f0 	strd	r8, [ip]
    e6a0:	eb0010aa 	bl	12950 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    e6a4:	e2505000 	subs	r5, r0, #0
    e6a8:	0a000036 	beq	e788 <CUSBDevice::Initialize()+0x314>
    e6ac:	e5945028 	ldr	r5, [r4, #40]	; 0x28
    e6b0:	e5c46014 	strb	r6, [r4, #20]
    e6b4:	e3550000 	cmp	r5, #0
    e6b8:	1a000069 	bne	e864 <CUSBDevice::Initialize()+0x3f0>
    e6bc:	e3a00009 	mov	r0, #9
    e6c0:	eb00726f 	bl	2b084 <operator new(unsigned int)>
    e6c4:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    e6c8:	e5840028 	str	r0, [r4, #40]	; 0x28
    e6cc:	e5d12008 	ldrb	r2, [r1, #8]
    e6d0:	e5d1c009 	ldrb	ip, [r1, #9]
    e6d4:	e59f34b8 	ldr	r3, [pc, #1208]	; eb94 <CUSBDevice::Initialize()+0x720>
    e6d8:	e182240c 	orr	r2, r2, ip, lsl #8
    e6dc:	e1520003 	cmp	r2, r3
    e6e0:	0a00002e 	beq	e7a0 <CUSBDevice::Initialize()+0x32c>
    e6e4:	e3a07009 	mov	r7, #9
    e6e8:	e3a06000 	mov	r6, #0
    e6ec:	e3a08080 	mov	r8, #128	; 0x80
    e6f0:	e5943004 	ldr	r3, [r4, #4]
    e6f4:	e5941018 	ldr	r1, [r4, #24]
    e6f8:	e3a02002 	mov	r2, #2
    e6fc:	e58d0000 	str	r0, [sp]
    e700:	e58d600c 	str	r6, [sp, #12]
    e704:	e1a00003 	mov	r0, r3
    e708:	e98d0180 	stmib	sp, {r7, r8}
    e70c:	e1a03005 	mov	r3, r5
    e710:	eb001080 	bl	12918 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e714:	e1500007 	cmp	r0, r7
    e718:	1a000010 	bne	e760 <CUSBDevice::Initialize()+0x2ec>
    e71c:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e720:	e5d07000 	ldrb	r7, [r0]
    e724:	e3570009 	cmp	r7, #9
    e728:	1a000002 	bne	e738 <CUSBDevice::Initialize()+0x2c4>
    e72c:	e5d0a001 	ldrb	sl, [r0, #1]
    e730:	e35a0002 	cmp	sl, #2
    e734:	0a000021 	beq	e7c0 <CUSBDevice::Initialize()+0x34c>
    e738:	e3a05000 	mov	r5, #0
    e73c:	e59f2454 	ldr	r2, [pc, #1108]	; eb98 <CUSBDevice::Initialize()+0x724>
    e740:	e3a01001 	mov	r1, #1
    e744:	e1a00004 	mov	r0, r4
    e748:	ebffff1d 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e74c:	e3a01009 	mov	r1, #9
    e750:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e754:	eb007258 	bl	2b0bc <operator delete(void*, unsigned int)>
    e758:	e5845028 	str	r5, [r4, #40]	; 0x28
    e75c:	eaffff7a 	b	e54c <CUSBDevice::Initialize()+0xd8>
    e760:	e59f2434 	ldr	r2, [pc, #1076]	; eb9c <CUSBDevice::Initialize()+0x728>
    e764:	e3a01001 	mov	r1, #1
    e768:	e1a00004 	mov	r0, r4
    e76c:	ebffff14 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e770:	e1a01007 	mov	r1, r7
    e774:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e778:	eb00724f 	bl	2b0bc <operator delete(void*, unsigned int)>
    e77c:	e1a05006 	mov	r5, r6
    e780:	e5846028 	str	r6, [r4, #40]	; 0x28
    e784:	eaffff70 	b	e54c <CUSBDevice::Initialize()+0xd8>
    e788:	e1a03006 	mov	r3, r6
    e78c:	e1a01007 	mov	r1, r7
    e790:	e1a00004 	mov	r0, r4
    e794:	e59f2404 	ldr	r2, [pc, #1028]	; eba0 <CUSBDevice::Initialize()+0x72c>
    e798:	ebffff09 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e79c:	eaffff6a 	b	e54c <CUSBDevice::Initialize()+0xd8>
    e7a0:	e5d1500a 	ldrb	r5, [r1, #10]
    e7a4:	e5d1200b 	ldrb	r2, [r1, #11]
    e7a8:	e59f33f4 	ldr	r3, [pc, #1012]	; eba4 <CUSBDevice::Initialize()+0x730>
    e7ac:	e1855402 	orr	r5, r5, r2, lsl #8
    e7b0:	e0455003 	sub	r5, r5, r3
    e7b4:	e16f5f15 	clz	r5, r5
    e7b8:	e1a052a5 	lsr	r5, r5, #5
    e7bc:	eaffffc8 	b	e6e4 <CUSBDevice::Initialize()+0x270>
    e7c0:	e5d09002 	ldrb	r9, [r0, #2]
    e7c4:	e5d03003 	ldrb	r3, [r0, #3]
    e7c8:	e1899403 	orr	r9, r9, r3, lsl #8
    e7cc:	e3590c02 	cmp	r9, #512	; 0x200
    e7d0:	caffffd8 	bgt	e738 <CUSBDevice::Initialize()+0x2c4>
    e7d4:	e1a01007 	mov	r1, r7
    e7d8:	eb007237 	bl	2b0bc <operator delete(void*, unsigned int)>
    e7dc:	e1a00009 	mov	r0, r9
    e7e0:	eb007228 	bl	2b088 <operator new[](unsigned int)>
    e7e4:	e58d600c 	str	r6, [sp, #12]
    e7e8:	e5840028 	str	r0, [r4, #40]	; 0x28
    e7ec:	e58d0000 	str	r0, [sp]
    e7f0:	e58d8008 	str	r8, [sp, #8]
    e7f4:	e58d9004 	str	r9, [sp, #4]
    e7f8:	e1a03005 	mov	r3, r5
    e7fc:	e1a0200a 	mov	r2, sl
    e800:	e5941018 	ldr	r1, [r4, #24]
    e804:	e5940004 	ldr	r0, [r4, #4]
    e808:	eb001042 	bl	12918 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e80c:	e1590000 	cmp	r9, r0
    e810:	1a000017 	bne	e874 <CUSBDevice::Initialize()+0x400>
    e814:	e594602c 	ldr	r6, [r4, #44]	; 0x2c
    e818:	e3560000 	cmp	r6, #0
    e81c:	1a000016 	bne	e87c <CUSBDevice::Initialize()+0x408>
    e820:	e3a0001c 	mov	r0, #28
    e824:	eb007216 	bl	2b084 <operator new(unsigned int)>
    e828:	e1a05000 	mov	r5, r0
    e82c:	e1a02009 	mov	r2, r9
    e830:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    e834:	eb002432 	bl	17904 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    e838:	e584502c 	str	r5, [r4, #44]	; 0x2c
    e83c:	e1a00005 	mov	r0, r5
    e840:	eb002499 	bl	17aac <CUSBConfigurationParser::IsValid() const>
    e844:	e2505000 	subs	r5, r0, #0
    e848:	1a000013 	bne	e89c <CUSBDevice::Initialize()+0x428>
    e84c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e850:	e3500000 	cmp	r0, #0
    e854:	0a00000c 	beq	e88c <CUSBDevice::Initialize()+0x418>
    e858:	e59f1348 	ldr	r1, [pc, #840]	; eba8 <CUSBDevice::Initialize()+0x734>
    e85c:	eb0024e2 	bl	17bec <CUSBConfigurationParser::Error(char const*) const>
    e860:	eaffff39 	b	e54c <CUSBDevice::Initialize()+0xd8>
    e864:	e3a02c01 	mov	r2, #256	; 0x100
    e868:	e59f1304 	ldr	r1, [pc, #772]	; eb74 <CUSBDevice::Initialize()+0x700>
    e86c:	e59f0338 	ldr	r0, [pc, #824]	; ebac <CUSBDevice::Initialize()+0x738>
    e870:	eb0057e6 	bl	24810 <assertion_failed>
    e874:	e59f2334 	ldr	r2, [pc, #820]	; ebb0 <CUSBDevice::Initialize()+0x73c>
    e878:	eaffffb9 	b	e764 <CUSBDevice::Initialize()+0x2f0>
    e87c:	e59f2330 	ldr	r2, [pc, #816]	; ebb4 <CUSBDevice::Initialize()+0x740>
    e880:	e59f12ec 	ldr	r1, [pc, #748]	; eb74 <CUSBDevice::Initialize()+0x700>
    e884:	e59f032c 	ldr	r0, [pc, #812]	; ebb8 <CUSBDevice::Initialize()+0x744>
    e888:	eb0057e0 	bl	24810 <assertion_failed>
    e88c:	e59f2328 	ldr	r2, [pc, #808]	; ebbc <CUSBDevice::Initialize()+0x748>
    e890:	e59f12dc 	ldr	r1, [pc, #732]	; eb74 <CUSBDevice::Initialize()+0x700>
    e894:	e59f0324 	ldr	r0, [pc, #804]	; ebc0 <CUSBDevice::Initialize()+0x74c>
    e898:	eb0057dc 	bl	24810 <assertion_failed>
    e89c:	e1a00004 	mov	r0, r4
    e8a0:	ebfffe2f 	bl	e164 <CUSBDevice::GetNames() const>
    e8a4:	e2507000 	subs	r7, r0, #0
    e8a8:	0a000051 	beq	e9f4 <CUSBDevice::Initialize()+0x580>
    e8ac:	eb0064c6 	bl	27bcc <CString::operator char const*() const>
    e8b0:	e59f230c 	ldr	r2, [pc, #780]	; ebc4 <CUSBDevice::Initialize()+0x750>
    e8b4:	e1a03000 	mov	r3, r0
    e8b8:	e3a01003 	mov	r1, #3
    e8bc:	e1a00004 	mov	r0, r4
    e8c0:	ebfffebf 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e8c4:	e5973000 	ldr	r3, [r7]
    e8c8:	e1a00007 	mov	r0, r7
    e8cc:	e5933004 	ldr	r3, [r3, #4]
    e8d0:	e12fff33 	blx	r3
    e8d4:	e1a07006 	mov	r7, r6
    e8d8:	e1a0a006 	mov	sl, r6
    e8dc:	e3a01004 	mov	r1, #4
    e8e0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e8e4:	eb002472 	bl	17ab4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e8e8:	e3500000 	cmp	r0, #0
    e8ec:	0a000038 	beq	e9d4 <CUSBDevice::Initialize()+0x560>
    e8f0:	e5d09002 	ldrb	r9, [r0, #2]
    e8f4:	e1590006 	cmp	r9, r6
    e8f8:	da000028 	ble	e9a0 <CUSBDevice::Initialize()+0x52c>
    e8fc:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    e900:	e3530000 	cmp	r3, #0
    e904:	0a00002e 	beq	e9c4 <CUSBDevice::Initialize()+0x550>
    e908:	e0846107 	add	r6, r4, r7, lsl #2
    e90c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    e910:	e3530000 	cmp	r3, #0
    e914:	1a000086 	bne	eb34 <CUSBDevice::Initialize()+0x6c0>
    e918:	e3a00010 	mov	r0, #16
    e91c:	eb0071d8 	bl	2b084 <operator new(unsigned int)>
    e920:	e1a08000 	mov	r8, r0
    e924:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    e928:	e1a01004 	mov	r1, r4
    e92c:	eb000357 	bl	f690 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    e930:	e3570000 	cmp	r7, #0
    e934:	e5868030 	str	r8, [r6, #48]	; 0x30
    e938:	0a00005c 	beq	eab0 <CUSBDevice::Initialize()+0x63c>
    e93c:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    e940:	eb0003b3 	bl	f814 <CUSBFunction::GetInterfaceName() const>
    e944:	e2508000 	subs	r8, r0, #0
    e948:	0a00004d 	beq	ea84 <CUSBDevice::Initialize()+0x610>
    e94c:	e59f1274 	ldr	r1, [pc, #628]	; ebc8 <CUSBDevice::Initialize()+0x754>
    e950:	eb0064f0 	bl	27d18 <CString::Compare(char const*) const>
    e954:	e250b000 	subs	fp, r0, #0
    e958:	1a000029 	bne	ea04 <CUSBDevice::Initialize()+0x590>
    e95c:	e5983000 	ldr	r3, [r8]
    e960:	e1a00008 	mov	r0, r8
    e964:	e5933004 	ldr	r3, [r3, #4]
    e968:	e12fff33 	blx	r3
    e96c:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    e970:	e3500000 	cmp	r0, #0
    e974:	0a000003 	beq	e988 <CUSBDevice::Initialize()+0x514>
    e978:	e5903000 	ldr	r3, [r0]
    e97c:	e5933004 	ldr	r3, [r3, #4]
    e980:	e12fff33 	blx	r3
    e984:	e586b030 	str	fp, [r6, #48]	; 0x30
    e988:	e59f223c 	ldr	r2, [pc, #572]	; ebcc <CUSBDevice::Initialize()+0x758>
    e98c:	e3a01002 	mov	r1, #2
    e990:	e1a00004 	mov	r0, r4
    e994:	ebfffe8a 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e998:	e1a06009 	mov	r6, r9
    e99c:	eaffffce 	b	e8dc <CUSBDevice::Initialize()+0x468>
    e9a0:	e1560009 	cmp	r6, r9
    e9a4:	0affffd4 	beq	e8fc <CUSBDevice::Initialize()+0x488>
    e9a8:	e5d03003 	ldrb	r3, [r0, #3]
    e9ac:	e59f221c 	ldr	r2, [pc, #540]	; ebd0 <CUSBDevice::Initialize()+0x75c>
    e9b0:	e3a01004 	mov	r1, #4
    e9b4:	e1a00004 	mov	r0, r4
    e9b8:	e1a09006 	mov	r9, r6
    e9bc:	ebfffe80 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e9c0:	eafffff4 	b	e998 <CUSBDevice::Initialize()+0x524>
    e9c4:	e59f2208 	ldr	r2, [pc, #520]	; ebd4 <CUSBDevice::Initialize()+0x760>
    e9c8:	e59f11a4 	ldr	r1, [pc, #420]	; eb74 <CUSBDevice::Initialize()+0x700>
    e9cc:	e59f01ec 	ldr	r0, [pc, #492]	; ebc0 <CUSBDevice::Initialize()+0x74c>
    e9d0:	eb00578e 	bl	24810 <assertion_failed>
    e9d4:	e3570000 	cmp	r7, #0
    e9d8:	1afffedb 	bne	e54c <CUSBDevice::Initialize()+0xd8>
    e9dc:	e1a00004 	mov	r0, r4
    e9e0:	e59f21f0 	ldr	r2, [pc, #496]	; ebd8 <CUSBDevice::Initialize()+0x764>
    e9e4:	e3a01002 	mov	r1, #2
    e9e8:	e1a05007 	mov	r5, r7
    e9ec:	ebfffe74 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e9f0:	eafffed5 	b	e54c <CUSBDevice::Initialize()+0xd8>
    e9f4:	e59f21e0 	ldr	r2, [pc, #480]	; ebdc <CUSBDevice::Initialize()+0x768>
    e9f8:	e59f1174 	ldr	r1, [pc, #372]	; eb74 <CUSBDevice::Initialize()+0x700>
    e9fc:	e59f01dc 	ldr	r0, [pc, #476]	; ebe0 <CUSBDevice::Initialize()+0x76c>
    ea00:	eb005782 	bl	24810 <assertion_failed>
    ea04:	e1a00008 	mov	r0, r8
    ea08:	eb00646f 	bl	27bcc <CString::operator char const*() const>
    ea0c:	e59f21d0 	ldr	r2, [pc, #464]	; ebe4 <CUSBDevice::Initialize()+0x770>
    ea10:	e1a03000 	mov	r3, r0
    ea14:	e3a01003 	mov	r1, #3
    ea18:	e1a00004 	mov	r0, r4
    ea1c:	ebfffe68 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ea20:	e1a01008 	mov	r1, r8
    ea24:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    ea28:	eb0000b1 	bl	ecf4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    ea2c:	e1a08000 	mov	r8, r0
    ea30:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    ea34:	e3500000 	cmp	r0, #0
    ea38:	0a000002 	beq	ea48 <CUSBDevice::Initialize()+0x5d4>
    ea3c:	e5903000 	ldr	r3, [r0]
    ea40:	e5933004 	ldr	r3, [r3, #4]
    ea44:	e12fff33 	blx	r3
    ea48:	e3580000 	cmp	r8, #0
    ea4c:	0a000036 	beq	eb2c <CUSBDevice::Initialize()+0x6b8>
    ea50:	e5983000 	ldr	r3, [r8]
    ea54:	e1a00008 	mov	r0, r8
    ea58:	e5868030 	str	r8, [r6, #48]	; 0x30
    ea5c:	e5933018 	ldr	r3, [r3, #24]
    ea60:	e12fff33 	blx	r3
    ea64:	e3500000 	cmp	r0, #0
    ea68:	0a000023 	beq	eafc <CUSBDevice::Initialize()+0x688>
    ea6c:	e2877001 	add	r7, r7, #1
    ea70:	e357000a 	cmp	r7, #10
    ea74:	0a000006 	beq	ea94 <CUSBDevice::Initialize()+0x620>
    ea78:	e2899001 	add	r9, r9, #1
    ea7c:	e6ef9079 	uxtb	r9, r9
    ea80:	eaffffc4 	b	e998 <CUSBDevice::Initialize()+0x524>
    ea84:	e3a02d06 	mov	r2, #384	; 0x180
    ea88:	e59f10e4 	ldr	r1, [pc, #228]	; eb74 <CUSBDevice::Initialize()+0x700>
    ea8c:	e59f0154 	ldr	r0, [pc, #340]	; ebe8 <CUSBDevice::Initialize()+0x774>
    ea90:	eb00575e 	bl	24810 <assertion_failed>
    ea94:	e1a03000 	mov	r3, r0
    ea98:	e59f214c 	ldr	r2, [pc, #332]	; ebec <CUSBDevice::Initialize()+0x778>
    ea9c:	e1a00004 	mov	r0, r4
    eaa0:	e3a01002 	mov	r1, #2
    eaa4:	e1a05003 	mov	r5, r3
    eaa8:	ebfffe45 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    eaac:	eafffea6 	b	e54c <CUSBDevice::Initialize()+0xd8>
    eab0:	e1a0100a 	mov	r1, sl
    eab4:	e1a00004 	mov	r0, r4
    eab8:	ebfffd64 	bl	e050 <CUSBDevice::GetName(TDeviceNameSelector) const>
    eabc:	e1a01000 	mov	r1, r0
    eac0:	e1a00008 	mov	r0, r8
    eac4:	eb00008a 	bl	ecf4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    eac8:	e2508000 	subs	r8, r0, #0
    eacc:	0a00001c 	beq	eb44 <CUSBDevice::Initialize()+0x6d0>
    ead0:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    ead4:	e3500000 	cmp	r0, #0
    ead8:	1affffd7 	bne	ea3c <CUSBDevice::Initialize()+0x5c8>
    eadc:	e5983000 	ldr	r3, [r8]
    eae0:	e1a00008 	mov	r0, r8
    eae4:	e5848030 	str	r8, [r4, #48]	; 0x30
    eae8:	e5933018 	ldr	r3, [r3, #24]
    eaec:	e12fff33 	blx	r3
    eaf0:	e3500000 	cmp	r0, #0
    eaf4:	13a07001 	movne	r7, #1
    eaf8:	1affffde 	bne	ea78 <CUSBDevice::Initialize()+0x604>
    eafc:	e1a00004 	mov	r0, r4
    eb00:	e59f20e8 	ldr	r2, [pc, #232]	; ebf0 <CUSBDevice::Initialize()+0x77c>
    eb04:	e3a01001 	mov	r1, #1
    eb08:	ebfffe2d 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    eb0c:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    eb10:	e3500000 	cmp	r0, #0
    eb14:	0a000002 	beq	eb24 <CUSBDevice::Initialize()+0x6b0>
    eb18:	e5903000 	ldr	r3, [r0]
    eb1c:	e5933004 	ldr	r3, [r3, #4]
    eb20:	e12fff33 	blx	r3
    eb24:	e586a030 	str	sl, [r6, #48]	; 0x30
    eb28:	eaffff9a 	b	e998 <CUSBDevice::Initialize()+0x524>
    eb2c:	e5868030 	str	r8, [r6, #48]	; 0x30
    eb30:	eaffff94 	b	e988 <CUSBDevice::Initialize()+0x514>
    eb34:	e59f20b8 	ldr	r2, [pc, #184]	; ebf4 <CUSBDevice::Initialize()+0x780>
    eb38:	e59f1034 	ldr	r1, [pc, #52]	; eb74 <CUSBDevice::Initialize()+0x700>
    eb3c:	e59f00b4 	ldr	r0, [pc, #180]	; ebf8 <CUSBDevice::Initialize()+0x784>
    eb40:	eb005732 	bl	24810 <assertion_failed>
    eb44:	e3a01001 	mov	r1, #1
    eb48:	e1a00004 	mov	r0, r4
    eb4c:	e5948030 	ldr	r8, [r4, #48]	; 0x30
    eb50:	ebfffd3e 	bl	e050 <CUSBDevice::GetName(TDeviceNameSelector) const>
    eb54:	e1a01000 	mov	r1, r0
    eb58:	e1a00008 	mov	r0, r8
    eb5c:	eb000064 	bl	ecf4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    eb60:	e2508000 	subs	r8, r0, #0
    eb64:	1affffd9 	bne	ead0 <CUSBDevice::Initialize()+0x65c>
    eb68:	eaffff73 	b	e93c <CUSBDevice::Initialize()+0x4c8>
    eb6c:	0003fea8 	.word	0x0003fea8
    eb70:	0003fe80 	.word	0x0003fe80
    eb74:	0003fd2c 	.word	0x0003fd2c
    eb78:	0003fe6c 	.word	0x0003fe6c
    eb7c:	0003fa80 	.word	0x0003fa80
    eb80:	0003fe14 	.word	0x0003fe14
    eb84:	0004e1f0 	.word	0x0004e1f0
    eb88:	000400ac 	.word	0x000400ac
    eb8c:	0003fec4 	.word	0x0003fec4
    eb90:	0003feec 	.word	0x0003feec
    eb94:	00000525 	.word	0x00000525
    eb98:	0003ff64 	.word	0x0003ff64
    eb9c:	0003ff38 	.word	0x0003ff38
    eba0:	0003ff0c 	.word	0x0003ff0c
    eba4:	0000a4a2 	.word	0x0000a4a2
    eba8:	0003fd24 	.word	0x0003fd24
    ebac:	0003ff24 	.word	0x0003ff24
    ebb0:	0003ff88 	.word	0x0003ff88
    ebb4:	0000013e 	.word	0x0000013e
    ebb8:	0003ffac 	.word	0x0003ffac
    ebbc:	0000028a 	.word	0x0000028a
    ebc0:	0003fe3c 	.word	0x0003fe3c
    ebc4:	0003ffd0 	.word	0x0003ffd0
    ebc8:	0003fddc 	.word	0x0003fddc
    ebcc:	00040030 	.word	0x00040030
    ebd0:	0003ffe0 	.word	0x0003ffe0
    ebd4:	0000016d 	.word	0x0000016d
    ebd8:	00040088 	.word	0x00040088
    ebdc:	0000014a 	.word	0x0000014a
    ebe0:	0003ffc4 	.word	0x0003ffc4
    ebe4:	0004001c 	.word	0x0004001c
    ebe8:	0003fde4 	.word	0x0003fde4
    ebec:	00040068 	.word	0x00040068
    ebf0:	0004004c 	.word	0x0004004c
    ebf4:	0000016e 	.word	0x0000016e
    ebf8:	00040000 	.word	0x00040000

0000ebfc <CUSBDevice::Configure()>:
    ebfc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ec00:	e1a05000 	mov	r5, r0
    ec04:	e5900004 	ldr	r0, [r0, #4]
    ec08:	e3500000 	cmp	r0, #0
    ec0c:	0a00002a 	beq	ecbc <CUSBDevice::Configure()+0xc0>
    ec10:	e5951018 	ldr	r1, [r5, #24]
    ec14:	e3510000 	cmp	r1, #0
    ec18:	0a00002b 	beq	eccc <CUSBDevice::Configure()+0xd0>
    ec1c:	e5956028 	ldr	r6, [r5, #40]	; 0x28
    ec20:	e3560000 	cmp	r6, #0
    ec24:	0a00001a 	beq	ec94 <CUSBDevice::Configure()+0x98>
    ec28:	e5d62005 	ldrb	r2, [r6, #5]
    ec2c:	eb000f5a 	bl	1299c <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    ec30:	e2506000 	subs	r6, r0, #0
    ec34:	0a000018 	beq	ec9c <CUSBDevice::Configure()+0xa0>
    ec38:	e3a06000 	mov	r6, #0
    ec3c:	e1a07006 	mov	r7, r6
    ec40:	e2854030 	add	r4, r5, #48	; 0x30
    ec44:	e2855058 	add	r5, r5, #88	; 0x58
    ec48:	e5940000 	ldr	r0, [r4]
    ec4c:	e3500000 	cmp	r0, #0
    ec50:	0a00000c 	beq	ec88 <CUSBDevice::Configure()+0x8c>
    ec54:	e5903000 	ldr	r3, [r0]
    ec58:	e593301c 	ldr	r3, [r3, #28]
    ec5c:	e12fff33 	blx	r3
    ec60:	e3500000 	cmp	r0, #0
    ec64:	11a06000 	movne	r6, r0
    ec68:	1a000006 	bne	ec88 <CUSBDevice::Configure()+0x8c>
    ec6c:	e5940000 	ldr	r0, [r4]
    ec70:	e3500000 	cmp	r0, #0
    ec74:	0a000002 	beq	ec84 <CUSBDevice::Configure()+0x88>
    ec78:	e5903000 	ldr	r3, [r0]
    ec7c:	e5933004 	ldr	r3, [r3, #4]
    ec80:	e12fff33 	blx	r3
    ec84:	e5847000 	str	r7, [r4]
    ec88:	e2844004 	add	r4, r4, #4
    ec8c:	e1550004 	cmp	r5, r4
    ec90:	1affffec 	bne	ec48 <CUSBDevice::Configure()+0x4c>
    ec94:	e1a00006 	mov	r0, r6
    ec98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ec9c:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    eca0:	e1a00005 	mov	r0, r5
    eca4:	e5d33005 	ldrb	r3, [r3, #5]
    eca8:	e59f202c 	ldr	r2, [pc, #44]	; ecdc <CUSBDevice::Configure()+0xe0>
    ecac:	e3a01001 	mov	r1, #1
    ecb0:	ebfffdc3 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ecb4:	e1a00006 	mov	r0, r6
    ecb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ecbc:	e59f201c 	ldr	r2, [pc, #28]	; ece0 <CUSBDevice::Configure()+0xe4>
    ecc0:	e59f101c 	ldr	r1, [pc, #28]	; ece4 <CUSBDevice::Configure()+0xe8>
    ecc4:	e59f001c 	ldr	r0, [pc, #28]	; ece8 <CUSBDevice::Configure()+0xec>
    ecc8:	eb0056d0 	bl	24810 <assertion_failed>
    eccc:	e59f2018 	ldr	r2, [pc, #24]	; ecec <CUSBDevice::Configure()+0xf0>
    ecd0:	e59f100c 	ldr	r1, [pc, #12]	; ece4 <CUSBDevice::Configure()+0xe8>
    ecd4:	e59f0014 	ldr	r0, [pc, #20]	; ecf0 <CUSBDevice::Configure()+0xf4>
    ecd8:	eb0056cc 	bl	24810 <assertion_failed>
    ecdc:	000400c0 	.word	0x000400c0
    ece0:	000001b9 	.word	0x000001b9
    ece4:	0003fd2c 	.word	0x0003fd2c
    ece8:	0003fa80 	.word	0x0003fa80
    ecec:	000001ba 	.word	0x000001ba
    ecf0:	0003fe14 	.word	0x0003fe14

0000ecf4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    ecf4:	e92d4070 	push	{r4, r5, r6, lr}
    ecf8:	e2506000 	subs	r6, r0, #0
    ecfc:	0a000042 	beq	ee0c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x118>
    ed00:	e3510000 	cmp	r1, #0
    ed04:	e1a04001 	mov	r4, r1
    ed08:	0a000043 	beq	ee1c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x128>
    ed0c:	e59f13d0 	ldr	r1, [pc, #976]	; f0e4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f0>
    ed10:	e1a00004 	mov	r0, r4
    ed14:	eb0063ff 	bl	27d18 <CString::Compare(char const*) const>
    ed18:	e3500000 	cmp	r0, #0
    ed1c:	1a000014 	bne	ed74 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x80>
    ed20:	e3a00068 	mov	r0, #104	; 0x68
    ed24:	eb0070d6 	bl	2b084 <operator new(unsigned int)>
    ed28:	e1a01006 	mov	r1, r6
    ed2c:	e1a05000 	mov	r5, r0
    ed30:	eb0016e2 	bl	148c0 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    ed34:	e1a00005 	mov	r0, r5
    ed38:	eb0002dc 	bl	f8b0 <CUSBFunction::GetDevice() const>
    ed3c:	e1a06000 	mov	r6, r0
    ed40:	e1a00004 	mov	r0, r4
    ed44:	eb0063a0 	bl	27bcc <CString::operator char const*() const>
    ed48:	e59f2398 	ldr	r2, [pc, #920]	; f0e8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f4>
    ed4c:	e1a03000 	mov	r3, r0
    ed50:	e3a01003 	mov	r1, #3
    ed54:	e1a00006 	mov	r0, r6
    ed58:	ebfffd99 	bl	e3c4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ed5c:	e5943000 	ldr	r3, [r4]
    ed60:	e1a00004 	mov	r0, r4
    ed64:	e5933004 	ldr	r3, [r3, #4]
    ed68:	e12fff33 	blx	r3
    ed6c:	e1a00005 	mov	r0, r5
    ed70:	e8bd8070 	pop	{r4, r5, r6, pc}
    ed74:	e59f1370 	ldr	r1, [pc, #880]	; f0ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f8>
    ed78:	e1a00004 	mov	r0, r4
    ed7c:	eb0063e5 	bl	27d18 <CString::Compare(char const*) const>
    ed80:	e3500000 	cmp	r0, #0
    ed84:	0affffe5 	beq	ed20 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2c>
    ed88:	e59f1360 	ldr	r1, [pc, #864]	; f0f0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3fc>
    ed8c:	e1a00004 	mov	r0, r4
    ed90:	eb0063e0 	bl	27d18 <CString::Compare(char const*) const>
    ed94:	e3500000 	cmp	r0, #0
    ed98:	1a000005 	bne	edb4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xc0>
    ed9c:	e3a00030 	mov	r0, #48	; 0x30
    eda0:	eb0070b7 	bl	2b084 <operator new(unsigned int)>
    eda4:	e1a01006 	mov	r1, r6
    eda8:	e1a05000 	mov	r5, r0
    edac:	eb000f75 	bl	12b88 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    edb0:	eaffffdf 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    edb4:	e59f1338 	ldr	r1, [pc, #824]	; f0f4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x400>
    edb8:	e1a00004 	mov	r0, r4
    edbc:	eb0063d5 	bl	27d18 <CString::Compare(char const*) const>
    edc0:	e3500000 	cmp	r0, #0
    edc4:	0a00000a 	beq	edf4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x100>
    edc8:	e59f1328 	ldr	r1, [pc, #808]	; f0f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x404>
    edcc:	e1a00004 	mov	r0, r4
    edd0:	eb0063d0 	bl	27d18 <CString::Compare(char const*) const>
    edd4:	e3500000 	cmp	r0, #0
    edd8:	1a000013 	bne	ee2c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x138>
    eddc:	e3a00030 	mov	r0, #48	; 0x30
    ede0:	eb0070a7 	bl	2b084 <operator new(unsigned int)>
    ede4:	e1a01006 	mov	r1, r6
    ede8:	e1a05000 	mov	r5, r0
    edec:	eb0014ad 	bl	140a8 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    edf0:	eaffffcf 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    edf4:	e3a00e45 	mov	r0, #1104	; 0x450
    edf8:	eb0070a1 	bl	2b084 <operator new(unsigned int)>
    edfc:	e1a01006 	mov	r1, r6
    ee00:	e1a05000 	mov	r5, r0
    ee04:	ebffea9f 	bl	9888 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    ee08:	eaffffc9 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ee0c:	e3a0202b 	mov	r2, #43	; 0x2b
    ee10:	e59f12e4 	ldr	r1, [pc, #740]	; f0fc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x408>
    ee14:	e59f02e4 	ldr	r0, [pc, #740]	; f100 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40c>
    ee18:	eb00567c 	bl	24810 <assertion_failed>
    ee1c:	e3a0202c 	mov	r2, #44	; 0x2c
    ee20:	e59f12d4 	ldr	r1, [pc, #724]	; f0fc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x408>
    ee24:	e59f02d8 	ldr	r0, [pc, #728]	; f104 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x410>
    ee28:	eb005678 	bl	24810 <assertion_failed>
    ee2c:	e59f12d4 	ldr	r1, [pc, #724]	; f108 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x414>
    ee30:	e1a00004 	mov	r0, r4
    ee34:	eb0063b7 	bl	27d18 <CString::Compare(char const*) const>
    ee38:	e3500000 	cmp	r0, #0
    ee3c:	0a00000a 	beq	ee6c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x178>
    ee40:	e59f12c4 	ldr	r1, [pc, #708]	; f10c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
    ee44:	e1a00004 	mov	r0, r4
    ee48:	eb0063b2 	bl	27d18 <CString::Compare(char const*) const>
    ee4c:	e3500000 	cmp	r0, #0
    ee50:	1a00000c 	bne	ee88 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x194>
    ee54:	e3a00f5b 	mov	r0, #364	; 0x16c
    ee58:	eb007089 	bl	2b084 <operator new(unsigned int)>
    ee5c:	e1a01006 	mov	r1, r6
    ee60:	e1a05000 	mov	r5, r0
    ee64:	eb0003b1 	bl	fd30 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
    ee68:	eaffffb1 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ee6c:	e3a00f4f 	mov	r0, #316	; 0x13c
    ee70:	eb007083 	bl	2b084 <operator new(unsigned int)>
    ee74:	e1a01006 	mov	r1, r6
    ee78:	e3a02001 	mov	r2, #1
    ee7c:	e1a05000 	mov	r5, r0
    ee80:	eb0006c0 	bl	10988 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    ee84:	eaffffaa 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ee88:	e59f1280 	ldr	r1, [pc, #640]	; f110 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x41c>
    ee8c:	e1a00004 	mov	r0, r4
    ee90:	eb0063a0 	bl	27d18 <CString::Compare(char const*) const>
    ee94:	e3500000 	cmp	r0, #0
    ee98:	1a000005 	bne	eeb4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1c0>
    ee9c:	e3a00f53 	mov	r0, #332	; 0x14c
    eea0:	eb007077 	bl	2b084 <operator new(unsigned int)>
    eea4:	e1a01006 	mov	r1, r6
    eea8:	e1a05000 	mov	r5, r0
    eeac:	eb000508 	bl	102d4 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
    eeb0:	eaffff9f 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eeb4:	e59f1258 	ldr	r1, [pc, #600]	; f114 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x420>
    eeb8:	e1a00004 	mov	r0, r4
    eebc:	eb006395 	bl	27d18 <CString::Compare(char const*) const>
    eec0:	e3500000 	cmp	r0, #0
    eec4:	0afffff4 	beq	ee9c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1a8>
    eec8:	e59f1248 	ldr	r1, [pc, #584]	; f118 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x424>
    eecc:	e1a00004 	mov	r0, r4
    eed0:	eb006390 	bl	27d18 <CString::Compare(char const*) const>
    eed4:	e3500000 	cmp	r0, #0
    eed8:	1a000005 	bne	eef4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x200>
    eedc:	e3a00e13 	mov	r0, #304	; 0x130
    eee0:	eb007067 	bl	2b084 <operator new(unsigned int)>
    eee4:	e1a01006 	mov	r1, r6
    eee8:	e1a05000 	mov	r5, r0
    eeec:	eb000ae4 	bl	11a84 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
    eef0:	eaffff8f 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eef4:	e59f1220 	ldr	r1, [pc, #544]	; f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x428>
    eef8:	e1a00004 	mov	r0, r4
    eefc:	eb006385 	bl	27d18 <CString::Compare(char const*) const>
    ef00:	e3500000 	cmp	r0, #0
    ef04:	0afffff4 	beq	eedc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1e8>
    ef08:	e59f1210 	ldr	r1, [pc, #528]	; f120 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x42c>
    ef0c:	e1a00004 	mov	r0, r4
    ef10:	eb006380 	bl	27d18 <CString::Compare(char const*) const>
    ef14:	e3500000 	cmp	r0, #0
    ef18:	1a000005 	bne	ef34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x240>
    ef1c:	e3a00f4d 	mov	r0, #308	; 0x134
    ef20:	eb007057 	bl	2b084 <operator new(unsigned int)>
    ef24:	e1a01006 	mov	r1, r6
    ef28:	e1a05000 	mov	r5, r0
    ef2c:	eb000bec 	bl	11ee4 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
    ef30:	eaffff7f 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef34:	e59f11e8 	ldr	r1, [pc, #488]	; f124 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x430>
    ef38:	e1a00004 	mov	r0, r4
    ef3c:	eb006375 	bl	27d18 <CString::Compare(char const*) const>
    ef40:	e3500000 	cmp	r0, #0
    ef44:	0afffff4 	beq	ef1c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x228>
    ef48:	e59f11d8 	ldr	r1, [pc, #472]	; f128 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x434>
    ef4c:	e1a00004 	mov	r0, r4
    ef50:	eb006370 	bl	27d18 <CString::Compare(char const*) const>
    ef54:	e3500000 	cmp	r0, #0
    ef58:	0affffef 	beq	ef1c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x228>
    ef5c:	e59f11c8 	ldr	r1, [pc, #456]	; f12c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x438>
    ef60:	e1a00004 	mov	r0, r4
    ef64:	eb00636b 	bl	27d18 <CString::Compare(char const*) const>
    ef68:	e3500000 	cmp	r0, #0
    ef6c:	0affffea 	beq	ef1c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x228>
    ef70:	e59f11b8 	ldr	r1, [pc, #440]	; f130 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x43c>
    ef74:	e1a00004 	mov	r0, r4
    ef78:	eb006366 	bl	27d18 <CString::Compare(char const*) const>
    ef7c:	e3500000 	cmp	r0, #0
    ef80:	1a000005 	bne	ef9c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2a8>
    ef84:	e3a00f4d 	mov	r0, #308	; 0x134
    ef88:	eb00703d 	bl	2b084 <operator new(unsigned int)>
    ef8c:	e1a01006 	mov	r1, r6
    ef90:	e1a05000 	mov	r5, r0
    ef94:	eb00093e 	bl	11494 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
    ef98:	eaffff65 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef9c:	e59f1190 	ldr	r1, [pc, #400]	; f134 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x440>
    efa0:	e1a00004 	mov	r0, r4
    efa4:	eb00635b 	bl	27d18 <CString::Compare(char const*) const>
    efa8:	e3500000 	cmp	r0, #0
    efac:	1a000005 	bne	efc8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2d4>
    efb0:	e3a0001c 	mov	r0, #28
    efb4:	eb007032 	bl	2b084 <operator new(unsigned int)>
    efb8:	e1a01006 	mov	r1, r6
    efbc:	e1a05000 	mov	r5, r0
    efc0:	eb00148f 	bl	14204 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    efc4:	eaffff5a 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    efc8:	e59f1168 	ldr	r1, [pc, #360]	; f138 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x444>
    efcc:	e1a00004 	mov	r0, r4
    efd0:	eb006350 	bl	27d18 <CString::Compare(char const*) const>
    efd4:	e3500000 	cmp	r0, #0
    efd8:	0afffff4 	beq	efb0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2bc>
    efdc:	e59f1158 	ldr	r1, [pc, #344]	; f13c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x448>
    efe0:	e1a00004 	mov	r0, r4
    efe4:	eb00634b 	bl	27d18 <CString::Compare(char const*) const>
    efe8:	e3500000 	cmp	r0, #0
    efec:	1a000005 	bne	f008 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x314>
    eff0:	e3a00024 	mov	r0, #36	; 0x24
    eff4:	eb007022 	bl	2b084 <operator new(unsigned int)>
    eff8:	e1a01006 	mov	r1, r6
    effc:	e1a05000 	mov	r5, r0
    f000:	eb001d32 	bl	164d0 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    f004:	eaffff4a 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f008:	e59f1130 	ldr	r1, [pc, #304]	; f140 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44c>
    f00c:	e1a00004 	mov	r0, r4
    f010:	eb006340 	bl	27d18 <CString::Compare(char const*) const>
    f014:	e3500000 	cmp	r0, #0
    f018:	1a000005 	bne	f034 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x340>
    f01c:	e3a00024 	mov	r0, #36	; 0x24
    f020:	eb007017 	bl	2b084 <operator new(unsigned int)>
    f024:	e1a01006 	mov	r1, r6
    f028:	e1a05000 	mov	r5, r0
    f02c:	eb001990 	bl	15674 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
    f030:	eaffff3f 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f034:	e59f1108 	ldr	r1, [pc, #264]	; f144 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x450>
    f038:	e1a00004 	mov	r0, r4
    f03c:	eb006335 	bl	27d18 <CString::Compare(char const*) const>
    f040:	e3500000 	cmp	r0, #0
    f044:	1a000005 	bne	f060 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x36c>
    f048:	e3a00028 	mov	r0, #40	; 0x28
    f04c:	eb00700c 	bl	2b084 <operator new(unsigned int)>
    f050:	e1a01006 	mov	r1, r6
    f054:	e1a05000 	mov	r5, r0
    f058:	eb001f6a 	bl	16e08 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    f05c:	eaffff34 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f060:	e59f10e0 	ldr	r1, [pc, #224]	; f148 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x454>
    f064:	e1a00004 	mov	r0, r4
    f068:	eb00632a 	bl	27d18 <CString::Compare(char const*) const>
    f06c:	e3500000 	cmp	r0, #0
    f070:	0afffff4 	beq	f048 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x354>
    f074:	e59f10d0 	ldr	r1, [pc, #208]	; f14c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x458>
    f078:	e1a00004 	mov	r0, r4
    f07c:	eb006325 	bl	27d18 <CString::Compare(char const*) const>
    f080:	e3500000 	cmp	r0, #0
    f084:	1a000005 	bne	f0a0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3ac>
    f088:	e3a00028 	mov	r0, #40	; 0x28
    f08c:	eb006ffc 	bl	2b084 <operator new(unsigned int)>
    f090:	e1a01006 	mov	r1, r6
    f094:	e1a05000 	mov	r5, r0
    f098:	eb0011f9 	bl	13884 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
    f09c:	eaffff24 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f0a0:	e59f10a8 	ldr	r1, [pc, #168]	; f150 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x45c>
    f0a4:	e1a00004 	mov	r0, r4
    f0a8:	eb00631a 	bl	27d18 <CString::Compare(char const*) const>
    f0ac:	e3500000 	cmp	r0, #0
    f0b0:	0afffff4 	beq	f088 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x394>
    f0b4:	e59f1098 	ldr	r1, [pc, #152]	; f154 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x460>
    f0b8:	e1a00004 	mov	r0, r4
    f0bc:	eb006315 	bl	27d18 <CString::Compare(char const*) const>
    f0c0:	e3500000 	cmp	r0, #0
    f0c4:	13a05000 	movne	r5, #0
    f0c8:	1affff23 	bne	ed5c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
    f0cc:	e3a00024 	mov	r0, #36	; 0x24
    f0d0:	eb006feb 	bl	2b084 <operator new(unsigned int)>
    f0d4:	e1a01006 	mov	r1, r6
    f0d8:	e1a05000 	mov	r5, r0
    f0dc:	eb002126 	bl	1757c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    f0e0:	eaffff13 	b	ed34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f0e4:	00040108 	.word	0x00040108
    f0e8:	00040234 	.word	0x00040234
    f0ec:	00040114 	.word	0x00040114
    f0f0:	000401e0 	.word	0x000401e0
    f0f4:	00040120 	.word	0x00040120
    f0f8:	0004012c 	.word	0x0004012c
    f0fc:	000400e0 	.word	0x000400e0
    f100:	000400f8 	.word	0x000400f8
    f104:	0003fde4 	.word	0x0003fde4
    f108:	00040138 	.word	0x00040138
    f10c:	00040144 	.word	0x00040144
    f110:	00040150 	.word	0x00040150
    f114:	0004015c 	.word	0x0004015c
    f118:	000401ec 	.word	0x000401ec
    f11c:	00040168 	.word	0x00040168
    f120:	000401f8 	.word	0x000401f8
    f124:	00040174 	.word	0x00040174
    f128:	00040180 	.word	0x00040180
    f12c:	0004018c 	.word	0x0004018c
    f130:	00040204 	.word	0x00040204
    f134:	00040198 	.word	0x00040198
    f138:	000401a4 	.word	0x000401a4
    f13c:	00040210 	.word	0x00040210
    f140:	000401b0 	.word	0x000401b0
    f144:	000401bc 	.word	0x000401bc
    f148:	000401c8 	.word	0x000401c8
    f14c:	0004021c 	.word	0x0004021c
    f150:	000401d4 	.word	0x000401d4
    f154:	00040228 	.word	0x00040228

0000f158 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    f158:	e3a02000 	mov	r2, #0
    f15c:	e92d4010 	push	{r4, lr}
    f160:	e3a0c001 	mov	ip, #1
    f164:	e3a0e008 	mov	lr, #8
    f168:	e1510002 	cmp	r1, r2
    f16c:	e5801000 	str	r1, [r0]
    f170:	e580e008 	str	lr, [r0, #8]
    f174:	e580c00c 	str	ip, [r0, #12]
    f178:	e5c02004 	strb	r2, [r0, #4]
    f17c:	e5c02005 	strb	r2, [r0, #5]
    f180:	e5c02006 	strb	r2, [r0, #6]
    f184:	e5c02010 	strb	r2, [r0, #16]
    f188:	18bd8010 	popne	{r4, pc}
    f18c:	e3a02023 	mov	r2, #35	; 0x23
    f190:	e59f1004 	ldr	r1, [pc, #4]	; f19c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x44>
    f194:	e59f0004 	ldr	r0, [pc, #4]	; f1a0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x48>
    f198:	eb00559c 	bl	24810 <assertion_failed>
    f19c:	00040250 	.word	0x00040250
    f1a0:	0003fc00 	.word	0x0003fc00

0000f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    f1a4:	e92d4070 	push	{r4, r5, r6, lr}
    f1a8:	e3a05001 	mov	r5, #1
    f1ac:	e3510000 	cmp	r1, #0
    f1b0:	e5801000 	str	r1, [r0]
    f1b4:	e580500c 	str	r5, [r0, #12]
    f1b8:	e5c05010 	strb	r5, [r0, #16]
    f1bc:	0a000041 	beq	f2c8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x124>
    f1c0:	e3520000 	cmp	r2, #0
    f1c4:	0a000043 	beq	f2d8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x134>
    f1c8:	e5d23000 	ldrb	r3, [r2]
    f1cc:	e3530006 	cmp	r3, #6
    f1d0:	9a000044 	bls	f2e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x144>
    f1d4:	e5d23001 	ldrb	r3, [r2, #1]
    f1d8:	e3530005 	cmp	r3, #5
    f1dc:	1a000045 	bne	f2f8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x154>
    f1e0:	e5d23003 	ldrb	r3, [r2, #3]
    f1e4:	e1a04000 	mov	r4, r0
    f1e8:	e2033003 	and	r3, r3, #3
    f1ec:	e3530002 	cmp	r3, #2
    f1f0:	0a000022 	beq	f280 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xdc>
    f1f4:	e3530003 	cmp	r3, #3
    f1f8:	1a00002e 	bne	f2b8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x114>
    f1fc:	e3a03002 	mov	r3, #2
    f200:	e5c03005 	strb	r3, [r0, #5]
    f204:	e5d23002 	ldrb	r3, [r2, #2]
    f208:	e203000f 	and	r0, r3, #15
    f20c:	e1a033a3 	lsr	r3, r3, #7
    f210:	e5c40004 	strb	r0, [r4, #4]
    f214:	e5c43006 	strb	r3, [r4, #6]
    f218:	e5d23004 	ldrb	r3, [r2, #4]
    f21c:	e5d20005 	ldrb	r0, [r2, #5]
    f220:	e1833400 	orr	r3, r3, r0, lsl #8
    f224:	e1a03a83 	lsl	r3, r3, #21
    f228:	e1a03aa3 	lsr	r3, r3, #21
    f22c:	e5843008 	str	r3, [r4, #8]
    f230:	e5d26006 	ldrb	r6, [r2, #6]
    f234:	e3560000 	cmp	r6, #0
    f238:	0a000032 	beq	f308 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x164>
    f23c:	e1a00001 	mov	r0, r1
    f240:	ebfffc10 	bl	e288 <CUSBDevice::GetSpeed() const>
    f244:	e3500001 	cmp	r0, #1
    f248:	da000037 	ble	f32c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x188>
    f24c:	e3560010 	cmp	r6, #16
    f250:	c3a03a01 	movgt	r3, #4096	; 0x1000
    f254:	c584300c 	strgt	r3, [r4, #12]
    f258:	ca000014 	bgt	f2b0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x10c>
    f25c:	e2466001 	sub	r6, r6, #1
    f260:	e1a05615 	lsl	r5, r5, r6
    f264:	e1a061a5 	lsr	r6, r5, #3
    f268:	e3560000 	cmp	r6, #0
    f26c:	e584600c 	str	r6, [r4, #12]
    f270:	0a000028 	beq	f318 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x174>
    f274:	e3560013 	cmp	r6, #19
    f278:	9a000026 	bls	f318 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x174>
    f27c:	ea00000b 	b	f2b0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x10c>
    f280:	e5c05005 	strb	r5, [r0, #5]
    f284:	e5d23002 	ldrb	r3, [r2, #2]
    f288:	e203100f 	and	r1, r3, #15
    f28c:	e1a033a3 	lsr	r3, r3, #7
    f290:	e5c01004 	strb	r1, [r0, #4]
    f294:	e5c03006 	strb	r3, [r0, #6]
    f298:	e5d23004 	ldrb	r3, [r2, #4]
    f29c:	e5d22005 	ldrb	r2, [r2, #5]
    f2a0:	e1833402 	orr	r3, r3, r2, lsl #8
    f2a4:	e1a03a83 	lsl	r3, r3, #21
    f2a8:	e1a03aa3 	lsr	r3, r3, #21
    f2ac:	e5803008 	str	r3, [r0, #8]
    f2b0:	e1a00004 	mov	r0, r4
    f2b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    f2b8:	e3a02043 	mov	r2, #67	; 0x43
    f2bc:	e59f1070 	ldr	r1, [pc, #112]	; f334 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    f2c0:	e59f0070 	ldr	r0, [pc, #112]	; f338 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x194>
    f2c4:	eb005551 	bl	24810 <assertion_failed>
    f2c8:	e3a02032 	mov	r2, #50	; 0x32
    f2cc:	e59f1060 	ldr	r1, [pc, #96]	; f334 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    f2d0:	e59f0064 	ldr	r0, [pc, #100]	; f33c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x198>
    f2d4:	eb00554d 	bl	24810 <assertion_failed>
    f2d8:	e3a02034 	mov	r2, #52	; 0x34
    f2dc:	e59f1050 	ldr	r1, [pc, #80]	; f334 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    f2e0:	e59f0058 	ldr	r0, [pc, #88]	; f340 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x19c>
    f2e4:	eb005549 	bl	24810 <assertion_failed>
    f2e8:	e3a02035 	mov	r2, #53	; 0x35
    f2ec:	e59f1040 	ldr	r1, [pc, #64]	; f334 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    f2f0:	e59f004c 	ldr	r0, [pc, #76]	; f344 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a0>
    f2f4:	eb005545 	bl	24810 <assertion_failed>
    f2f8:	e3a02036 	mov	r2, #54	; 0x36
    f2fc:	e59f1030 	ldr	r1, [pc, #48]	; f334 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    f300:	e59f0040 	ldr	r0, [pc, #64]	; f348 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    f304:	eb005541 	bl	24810 <assertion_failed>
    f308:	e1a00001 	mov	r0, r1
    f30c:	ebfffbdd 	bl	e288 <CUSBDevice::GetSpeed() const>
    f310:	e3500001 	cmp	r0, #1
    f314:	da000003 	ble	f328 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x184>
    f318:	e3a03014 	mov	r3, #20
    f31c:	e1a00004 	mov	r0, r4
    f320:	e584300c 	str	r3, [r4, #12]
    f324:	e8bd8070 	pop	{r4, r5, r6, pc}
    f328:	e1a06005 	mov	r6, r5
    f32c:	e584600c 	str	r6, [r4, #12]
    f330:	eaffffcf 	b	f274 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd0>
    f334:	00040250 	.word	0x00040250
    f338:	0003fe24 	.word	0x0003fe24
    f33c:	0003fc00 	.word	0x0003fc00
    f340:	00040260 	.word	0x00040260
    f344:	0004026c 	.word	0x0004026c
    f348:	0004028c 	.word	0x0004028c

0000f34c <CUSBEndpoint::~CUSBEndpoint()>:
    f34c:	e12fff1e 	bx	lr

0000f350 <CUSBEndpoint::GetDevice() const>:
    f350:	e5900000 	ldr	r0, [r0]
    f354:	e3500000 	cmp	r0, #0
    f358:	0a000000 	beq	f360 <CUSBEndpoint::GetDevice() const+0x10>
    f35c:	e12fff1e 	bx	lr
    f360:	e92d4010 	push	{r4, lr}
    f364:	e3a02086 	mov	r2, #134	; 0x86
    f368:	e59f1004 	ldr	r1, [pc, #4]	; f374 <CUSBEndpoint::GetDevice() const+0x24>
    f36c:	e59f0004 	ldr	r0, [pc, #4]	; f378 <CUSBEndpoint::GetDevice() const+0x28>
    f370:	eb005526 	bl	24810 <assertion_failed>
    f374:	00040250 	.word	0x00040250
    f378:	0003fc00 	.word	0x0003fc00

0000f37c <CUSBEndpoint::GetNumber() const>:
    f37c:	e5d00004 	ldrb	r0, [r0, #4]
    f380:	e12fff1e 	bx	lr

0000f384 <CUSBEndpoint::GetType() const>:
    f384:	e5d00005 	ldrb	r0, [r0, #5]
    f388:	e12fff1e 	bx	lr

0000f38c <CUSBEndpoint::IsDirectionIn() const>:
    f38c:	e5d00006 	ldrb	r0, [r0, #6]
    f390:	e12fff1e 	bx	lr

0000f394 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
    f394:	e5801008 	str	r1, [r0, #8]
    f398:	e3a00001 	mov	r0, #1
    f39c:	e12fff1e 	bx	lr

0000f3a0 <CUSBEndpoint::GetMaxPacketSize() const>:
    f3a0:	e5900008 	ldr	r0, [r0, #8]
    f3a4:	e12fff1e 	bx	lr

0000f3a8 <CUSBEndpoint::GetInterval() const>:
    f3a8:	e5d03005 	ldrb	r3, [r0, #5]
    f3ac:	e3530002 	cmp	r3, #2
    f3b0:	1a000001 	bne	f3bc <CUSBEndpoint::GetInterval() const+0x14>
    f3b4:	e590000c 	ldr	r0, [r0, #12]
    f3b8:	e12fff1e 	bx	lr
    f3bc:	e92d4010 	push	{r4, lr}
    f3c0:	e3a020ae 	mov	r2, #174	; 0xae
    f3c4:	e59f1004 	ldr	r1, [pc, #4]	; f3d0 <CUSBEndpoint::GetInterval() const+0x28>
    f3c8:	e59f0004 	ldr	r0, [pc, #4]	; f3d4 <CUSBEndpoint::GetInterval() const+0x2c>
    f3cc:	eb00550f 	bl	24810 <assertion_failed>
    f3d0:	00040250 	.word	0x00040250
    f3d4:	000402bc 	.word	0x000402bc

0000f3d8 <CUSBEndpoint::GetNextPID(bool)>:
    f3d8:	e3510000 	cmp	r1, #0
    f3dc:	0a000004 	beq	f3f4 <CUSBEndpoint::GetNextPID(bool)+0x1c>
    f3e0:	e5d03005 	ldrb	r3, [r0, #5]
    f3e4:	e3530000 	cmp	r3, #0
    f3e8:	03a00002 	moveq	r0, #2
    f3ec:	1a000002 	bne	f3fc <CUSBEndpoint::GetNextPID(bool)+0x24>
    f3f0:	e12fff1e 	bx	lr
    f3f4:	e5d00010 	ldrb	r0, [r0, #16]
    f3f8:	e12fff1e 	bx	lr
    f3fc:	e92d4010 	push	{r4, lr}
    f400:	e3a020b7 	mov	r2, #183	; 0xb7
    f404:	e59f1004 	ldr	r1, [pc, #4]	; f410 <CUSBEndpoint::GetNextPID(bool)+0x38>
    f408:	e59f0004 	ldr	r0, [pc, #4]	; f414 <CUSBEndpoint::GetNextPID(bool)+0x3c>
    f40c:	eb0054ff 	bl	24810 <assertion_failed>
    f410:	00040250 	.word	0x00040250
    f414:	000402dc 	.word	0x000402dc

0000f418 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
    f418:	e5d03005 	ldrb	r3, [r0, #5]
    f41c:	e92d4010 	push	{r4, lr}
    f420:	e3530002 	cmp	r3, #2
    f424:	8a000018 	bhi	f48c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x74>
    f428:	e3520000 	cmp	r2, #0
    f42c:	1a000009 	bne	f458 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x40>
    f430:	e5d03010 	ldrb	r3, [r0, #16]
    f434:	e3530001 	cmp	r3, #1
    f438:	0a00000e 	beq	f478 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x60>
    f43c:	3a00000f 	bcc	f480 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x68>
    f440:	e3530002 	cmp	r3, #2
    f444:	1a000007 	bne	f468 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x50>
    f448:	e3110001 	tst	r1, #1
    f44c:	13a03001 	movne	r3, #1
    f450:	15c03010 	strbne	r3, [r0, #16]
    f454:	e8bd8010 	pop	{r4, pc}
    f458:	e3530000 	cmp	r3, #0
    f45c:	1a00000e 	bne	f49c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x84>
    f460:	e5c03010 	strb	r3, [r0, #16]
    f464:	e8bd8010 	pop	{r4, pc}
    f468:	e3a020dc 	mov	r2, #220	; 0xdc
    f46c:	e59f1038 	ldr	r1, [pc, #56]	; f4ac <CUSBEndpoint::SkipPID(unsigned int, bool)+0x94>
    f470:	e59f0038 	ldr	r0, [pc, #56]	; f4b0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
    f474:	eb0054e5 	bl	24810 <assertion_failed>
    f478:	e3110001 	tst	r1, #1
    f47c:	08bd8010 	popeq	{r4, pc}
    f480:	e3a03002 	mov	r3, #2
    f484:	e5c03010 	strb	r3, [r0, #16]
    f488:	e8bd8010 	pop	{r4, pc}
    f48c:	e3a020c3 	mov	r2, #195	; 0xc3
    f490:	e59f1014 	ldr	r1, [pc, #20]	; f4ac <CUSBEndpoint::SkipPID(unsigned int, bool)+0x94>
    f494:	e59f0018 	ldr	r0, [pc, #24]	; f4b4 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x9c>
    f498:	eb0054dc 	bl	24810 <assertion_failed>
    f49c:	e3a020e2 	mov	r2, #226	; 0xe2
    f4a0:	e59f1004 	ldr	r1, [pc, #4]	; f4ac <CUSBEndpoint::SkipPID(unsigned int, bool)+0x94>
    f4a4:	e59f000c 	ldr	r0, [pc, #12]	; f4b8 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa0>
    f4a8:	eb0054d8 	bl	24810 <assertion_failed>
    f4ac:	00040250 	.word	0x00040250
    f4b0:	0003fe24 	.word	0x0003fe24
    f4b4:	000402fc 	.word	0x000402fc
    f4b8:	000402dc 	.word	0x000402dc

0000f4bc <CUSBEndpoint::ResetPID()>:
    f4bc:	e5d03005 	ldrb	r3, [r0, #5]
    f4c0:	e3530001 	cmp	r3, #1
    f4c4:	1a000001 	bne	f4d0 <CUSBEndpoint::ResetPID()+0x14>
    f4c8:	e5c03010 	strb	r3, [r0, #16]
    f4cc:	e12fff1e 	bx	lr
    f4d0:	e92d4010 	push	{r4, lr}
    f4d4:	e3a020ed 	mov	r2, #237	; 0xed
    f4d8:	e59f1004 	ldr	r1, [pc, #4]	; f4e4 <CUSBEndpoint::ResetPID()+0x28>
    f4dc:	e59f0004 	ldr	r0, [pc, #4]	; f4e8 <CUSBEndpoint::ResetPID()+0x2c>
    f4e0:	eb0054ca 	bl	24810 <assertion_failed>
    f4e4:	00040250 	.word	0x00040250
    f4e8:	0004035c 	.word	0x0004035c

0000f4ec <CUSBFunction::Initialize()>:
    f4ec:	e3a00001 	mov	r0, #1
    f4f0:	e12fff1e 	bx	lr

0000f4f4 <CUSBFunction::ReScanDevices()>:
    f4f4:	e3a00000 	mov	r0, #0
    f4f8:	e12fff1e 	bx	lr

0000f4fc <CUSBFunction::~CUSBFunction()>:
    f4fc:	e3a03000 	mov	r3, #0
    f500:	e92d4070 	push	{r4, r5, r6, lr}
    f504:	e5905008 	ldr	r5, [r0, #8]
    f508:	e59f2040 	ldr	r2, [pc, #64]	; f550 <CUSBFunction::~CUSBFunction()+0x54>
    f50c:	e1550003 	cmp	r5, r3
    f510:	e1a04000 	mov	r4, r0
    f514:	e5802000 	str	r2, [r0]
    f518:	e580300c 	str	r3, [r0, #12]
    f51c:	0a000004 	beq	f534 <CUSBFunction::~CUSBFunction()+0x38>
    f520:	e1a00005 	mov	r0, r5
    f524:	eb00215f 	bl	17aa8 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    f528:	e1a00005 	mov	r0, r5
    f52c:	e3a0101c 	mov	r1, #28
    f530:	eb006ee1 	bl	2b0bc <operator delete(void*, unsigned int)>
    f534:	e3a03000 	mov	r3, #0
    f538:	e1a00004 	mov	r0, r4
    f53c:	e5843008 	str	r3, [r4, #8]
    f540:	e5843004 	str	r3, [r4, #4]
    f544:	eb005694 	bl	24f9c <CDevice::~CDevice()>
    f548:	e1a00004 	mov	r0, r4
    f54c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f550:	00040380 	.word	0x00040380

0000f554 <CUSBFunction::~CUSBFunction()>:
    f554:	e92d4010 	push	{r4, lr}
    f558:	e1a04000 	mov	r4, r0
    f55c:	ebffffe6 	bl	f4fc <CUSBFunction::~CUSBFunction()>
    f560:	e1a00004 	mov	r0, r4
    f564:	e3a01010 	mov	r1, #16
    f568:	eb006ed3 	bl	2b0bc <operator delete(void*, unsigned int)>
    f56c:	e1a00004 	mov	r0, r4
    f570:	e8bd8010 	pop	{r4, pc}

0000f574 <CUSBFunction::RemoveDevice()>:
    f574:	e5900004 	ldr	r0, [r0, #4]
    f578:	e3500000 	cmp	r0, #0
    f57c:	0a000000 	beq	f584 <CUSBFunction::RemoveDevice()+0x10>
    f580:	eafffa9e 	b	e000 <CUSBDevice::RemoveDevice()>
    f584:	e92d4010 	push	{r4, lr}
    f588:	e3a02066 	mov	r2, #102	; 0x66
    f58c:	e59f1004 	ldr	r1, [pc, #4]	; f598 <CUSBFunction::RemoveDevice()+0x24>
    f590:	e59f0004 	ldr	r0, [pc, #4]	; f59c <CUSBFunction::RemoveDevice()+0x28>
    f594:	eb00549d 	bl	24810 <assertion_failed>
    f598:	000403ac 	.word	0x000403ac
    f59c:	0003fc00 	.word	0x0003fc00

0000f5a0 <CUSBFunction::Configure()>:
    f5a0:	e92d4070 	push	{r4, r5, r6, lr}
    f5a4:	e590300c 	ldr	r3, [r0, #12]
    f5a8:	e24dd010 	sub	sp, sp, #16
    f5ac:	e3530000 	cmp	r3, #0
    f5b0:	0a000029 	beq	f65c <CUSBFunction::Configure()+0xbc>
    f5b4:	e5d33003 	ldrb	r3, [r3, #3]
    f5b8:	e3530000 	cmp	r3, #0
    f5bc:	0a000018 	beq	f624 <CUSBFunction::Configure()+0x84>
    f5c0:	e1a04000 	mov	r4, r0
    f5c4:	e5900004 	ldr	r0, [r0, #4]
    f5c8:	e3500000 	cmp	r0, #0
    f5cc:	0a00001e 	beq	f64c <CUSBFunction::Configure()+0xac>
    f5d0:	ebfffb41 	bl	e2dc <CUSBDevice::GetHost() const>
    f5d4:	e1a06000 	mov	r6, r0
    f5d8:	e5940004 	ldr	r0, [r4, #4]
    f5dc:	e3500000 	cmp	r0, #0
    f5e0:	0a000021 	beq	f66c <CUSBFunction::Configure()+0xcc>
    f5e4:	e3a05000 	mov	r5, #0
    f5e8:	ebfffb30 	bl	e2b0 <CUSBDevice::GetEndpoint0() const>
    f5ec:	e594300c 	ldr	r3, [r4, #12]
    f5f0:	e58d500c 	str	r5, [sp, #12]
    f5f4:	e58d5008 	str	r5, [sp, #8]
    f5f8:	e5d32002 	ldrb	r2, [r3, #2]
    f5fc:	e1a01000 	mov	r1, r0
    f600:	e58d2004 	str	r2, [sp, #4]
    f604:	e5d33003 	ldrb	r3, [r3, #3]
    f608:	e1a00006 	mov	r0, r6
    f60c:	e58d3000 	str	r3, [sp]
    f610:	e3a02001 	mov	r2, #1
    f614:	e3a0300b 	mov	r3, #11
    f618:	eb000c8c 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f61c:	e1500005 	cmp	r0, r5
    f620:	ba000002 	blt	f630 <CUSBFunction::Configure()+0x90>
    f624:	e3a00001 	mov	r0, #1
    f628:	e28dd010 	add	sp, sp, #16
    f62c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f630:	eb005d69 	bl	26bdc <CLogger::Get()>
    f634:	e59f3040 	ldr	r3, [pc, #64]	; f67c <CUSBFunction::Configure()+0xdc>
    f638:	e3a02001 	mov	r2, #1
    f63c:	e59f103c 	ldr	r1, [pc, #60]	; f680 <CUSBFunction::Configure()+0xe0>
    f640:	eb005ca2 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f644:	e1a00005 	mov	r0, r5
    f648:	eafffff6 	b	f628 <CUSBFunction::Configure()+0x88>
    f64c:	e3a02090 	mov	r2, #144	; 0x90
    f650:	e59f102c 	ldr	r1, [pc, #44]	; f684 <CUSBFunction::Configure()+0xe4>
    f654:	e59f002c 	ldr	r0, [pc, #44]	; f688 <CUSBFunction::Configure()+0xe8>
    f658:	eb00546c 	bl	24810 <assertion_failed>
    f65c:	e3a0204e 	mov	r2, #78	; 0x4e
    f660:	e59f101c 	ldr	r1, [pc, #28]	; f684 <CUSBFunction::Configure()+0xe4>
    f664:	e59f0020 	ldr	r0, [pc, #32]	; f68c <CUSBFunction::Configure()+0xec>
    f668:	eb005468 	bl	24810 <assertion_failed>
    f66c:	e3a0208a 	mov	r2, #138	; 0x8a
    f670:	e59f100c 	ldr	r1, [pc, #12]	; f684 <CUSBFunction::Configure()+0xe4>
    f674:	e59f000c 	ldr	r0, [pc, #12]	; f688 <CUSBFunction::Configure()+0xe8>
    f678:	eb005464 	bl	24810 <assertion_failed>
    f67c:	000403d4 	.word	0x000403d4
    f680:	000403a4 	.word	0x000403a4
    f684:	000403ac 	.word	0x000403ac
    f688:	0003fc00 	.word	0x0003fc00
    f68c:	000403bc 	.word	0x000403bc

0000f690 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
    f690:	e92d4070 	push	{r4, r5, r6, lr}
    f694:	e1a04000 	mov	r4, r0
    f698:	e1a05001 	mov	r5, r1
    f69c:	e1a06002 	mov	r6, r2
    f6a0:	eb00564b 	bl	24fd4 <CDevice::CDevice()>
    f6a4:	e3a03000 	mov	r3, #0
    f6a8:	e59f207c 	ldr	r2, [pc, #124]	; f72c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x9c>
    f6ac:	e1550003 	cmp	r5, r3
    f6b0:	e8840024 	stm	r4, {r2, r5}
    f6b4:	e5843008 	str	r3, [r4, #8]
    f6b8:	e584300c 	str	r3, [r4, #12]
    f6bc:	0a00000e 	beq	f6fc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x6c>
    f6c0:	e3560000 	cmp	r6, #0
    f6c4:	0a000010 	beq	f70c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x7c>
    f6c8:	e3a0001c 	mov	r0, #28
    f6cc:	eb006e6c 	bl	2b084 <operator new(unsigned int)>
    f6d0:	e1a05000 	mov	r5, r0
    f6d4:	e1a01006 	mov	r1, r6
    f6d8:	eb0020db 	bl	17a4c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    f6dc:	e5845008 	str	r5, [r4, #8]
    f6e0:	e1a00005 	mov	r0, r5
    f6e4:	eb00212e 	bl	17ba4 <CUSBConfigurationParser::GetCurrentDescriptor()>
    f6e8:	e3500000 	cmp	r0, #0
    f6ec:	e584000c 	str	r0, [r4, #12]
    f6f0:	0a000009 	beq	f71c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x8c>
    f6f4:	e1a00004 	mov	r0, r4
    f6f8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f6fc:	e3a02022 	mov	r2, #34	; 0x22
    f700:	e59f1028 	ldr	r1, [pc, #40]	; f730 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f704:	e59f0028 	ldr	r0, [pc, #40]	; f734 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa4>
    f708:	eb005440 	bl	24810 <assertion_failed>
    f70c:	e3a02024 	mov	r2, #36	; 0x24
    f710:	e59f1018 	ldr	r1, [pc, #24]	; f730 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f714:	e59f001c 	ldr	r0, [pc, #28]	; f738 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa8>
    f718:	eb00543c 	bl	24810 <assertion_failed>
    f71c:	e3a02029 	mov	r2, #41	; 0x29
    f720:	e59f1008 	ldr	r1, [pc, #8]	; f730 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f724:	e59f0010 	ldr	r0, [pc, #16]	; f73c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xac>
    f728:	eb005438 	bl	24810 <assertion_failed>
    f72c:	00040380 	.word	0x00040380
    f730:	000403ac 	.word	0x000403ac
    f734:	0003fc00 	.word	0x0003fc00
    f738:	000403ec 	.word	0x000403ec
    f73c:	000403bc 	.word	0x000403bc

0000f740 <CUSBFunction::CUSBFunction(CUSBFunction*)>:
    f740:	e92d4070 	push	{r4, r5, r6, lr}
    f744:	e1a04000 	mov	r4, r0
    f748:	e1a05001 	mov	r5, r1
    f74c:	eb005620 	bl	24fd4 <CDevice::CDevice()>
    f750:	e3a03000 	mov	r3, #0
    f754:	e59f20a0 	ldr	r2, [pc, #160]	; f7fc <CUSBFunction::CUSBFunction(CUSBFunction*)+0xbc>
    f758:	e1550003 	cmp	r5, r3
    f75c:	e884000c 	stm	r4, {r2, r3}
    f760:	e5843008 	str	r3, [r4, #8]
    f764:	e584300c 	str	r3, [r4, #12]
    f768:	0a000013 	beq	f7bc <CUSBFunction::CUSBFunction(CUSBFunction*)+0x7c>
    f76c:	e5953004 	ldr	r3, [r5, #4]
    f770:	e3530000 	cmp	r3, #0
    f774:	e5843004 	str	r3, [r4, #4]
    f778:	0a000013 	beq	f7cc <CUSBFunction::CUSBFunction(CUSBFunction*)+0x8c>
    f77c:	e5953008 	ldr	r3, [r5, #8]
    f780:	e3530000 	cmp	r3, #0
    f784:	0a000014 	beq	f7dc <CUSBFunction::CUSBFunction(CUSBFunction*)+0x9c>
    f788:	e3a0001c 	mov	r0, #28
    f78c:	eb006e3c 	bl	2b084 <operator new(unsigned int)>
    f790:	e1a06000 	mov	r6, r0
    f794:	e5951008 	ldr	r1, [r5, #8]
    f798:	eb0020ab 	bl	17a4c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    f79c:	e5846008 	str	r6, [r4, #8]
    f7a0:	e1a00006 	mov	r0, r6
    f7a4:	eb0020fe 	bl	17ba4 <CUSBConfigurationParser::GetCurrentDescriptor()>
    f7a8:	e3500000 	cmp	r0, #0
    f7ac:	e584000c 	str	r0, [r4, #12]
    f7b0:	0a00000d 	beq	f7ec <CUSBFunction::CUSBFunction(CUSBFunction*)+0xac>
    f7b4:	e1a00004 	mov	r0, r4
    f7b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f7bc:	e3a02031 	mov	r2, #49	; 0x31
    f7c0:	e59f1038 	ldr	r1, [pc, #56]	; f800 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f7c4:	e59f0038 	ldr	r0, [pc, #56]	; f804 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc4>
    f7c8:	eb005410 	bl	24810 <assertion_failed>
    f7cc:	e3a02033 	mov	r2, #51	; 0x33
    f7d0:	e59f1028 	ldr	r1, [pc, #40]	; f800 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f7d4:	e59f002c 	ldr	r0, [pc, #44]	; f808 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc8>
    f7d8:	eb00540c 	bl	24810 <assertion_failed>
    f7dc:	e3a02035 	mov	r2, #53	; 0x35
    f7e0:	e59f1018 	ldr	r1, [pc, #24]	; f800 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f7e4:	e59f0020 	ldr	r0, [pc, #32]	; f80c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xcc>
    f7e8:	eb005408 	bl	24810 <assertion_failed>
    f7ec:	e3a0203a 	mov	r2, #58	; 0x3a
    f7f0:	e59f1008 	ldr	r1, [pc, #8]	; f800 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f7f4:	e59f0014 	ldr	r0, [pc, #20]	; f810 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xd0>
    f7f8:	eb005404 	bl	24810 <assertion_failed>
    f7fc:	00040380 	.word	0x00040380
    f800:	000403ac 	.word	0x000403ac
    f804:	00040400 	.word	0x00040400
    f808:	0003fc00 	.word	0x0003fc00
    f80c:	00040410 	.word	0x00040410
    f810:	000403bc 	.word	0x000403bc

0000f814 <CUSBFunction::GetInterfaceName() const>:
    f814:	e92d4030 	push	{r4, r5, lr}
    f818:	e1a05000 	mov	r5, r0
    f81c:	e24dd00c 	sub	sp, sp, #12
    f820:	e3a00010 	mov	r0, #16
    f824:	eb006e16 	bl	2b084 <operator new(unsigned int)>
    f828:	e59f1048 	ldr	r1, [pc, #72]	; f878 <CUSBFunction::GetInterfaceName() const+0x64>
    f82c:	e1a04000 	mov	r4, r0
    f830:	eb0060d5 	bl	27b8c <CString::CString(char const*)>
    f834:	e595100c 	ldr	r1, [r5, #12]
    f838:	e3510000 	cmp	r1, #0
    f83c:	0a00000a 	beq	f86c <CUSBFunction::GetInterfaceName() const+0x58>
    f840:	e5d12005 	ldrb	r2, [r1, #5]
    f844:	e2423001 	sub	r3, r2, #1
    f848:	e6ef3073 	uxtb	r3, r3
    f84c:	e35300fd 	cmp	r3, #253	; 0xfd
    f850:	8a000005 	bhi	f86c <CUSBFunction::GetInterfaceName() const+0x58>
    f854:	e5d13006 	ldrb	r3, [r1, #6]
    f858:	e5d11007 	ldrb	r1, [r1, #7]
    f85c:	e1a00004 	mov	r0, r4
    f860:	e58d1000 	str	r1, [sp]
    f864:	e59f1010 	ldr	r1, [pc, #16]	; f87c <CUSBFunction::GetInterfaceName() const+0x68>
    f868:	eb006604 	bl	29080 <CString::Format(char const*, ...)>
    f86c:	e1a00004 	mov	r0, r4
    f870:	e28dd00c 	add	sp, sp, #12
    f874:	e8bd8030 	pop	{r4, r5, pc}
    f878:	0003fddc 	.word	0x0003fddc
    f87c:	00040430 	.word	0x00040430

0000f880 <CUSBFunction::GetNumEndpoints() const>:
    f880:	e590300c 	ldr	r3, [r0, #12]
    f884:	e3530000 	cmp	r3, #0
    f888:	0a000001 	beq	f894 <CUSBFunction::GetNumEndpoints() const+0x14>
    f88c:	e5d30004 	ldrb	r0, [r3, #4]
    f890:	e12fff1e 	bx	lr
    f894:	e92d4010 	push	{r4, lr}
    f898:	e3a0207e 	mov	r2, #126	; 0x7e
    f89c:	e59f1004 	ldr	r1, [pc, #4]	; f8a8 <CUSBFunction::GetNumEndpoints() const+0x28>
    f8a0:	e59f0004 	ldr	r0, [pc, #4]	; f8ac <CUSBFunction::GetNumEndpoints() const+0x2c>
    f8a4:	eb0053d9 	bl	24810 <assertion_failed>
    f8a8:	000403ac 	.word	0x000403ac
    f8ac:	000403bc 	.word	0x000403bc

0000f8b0 <CUSBFunction::GetDevice() const>:
    f8b0:	e5900004 	ldr	r0, [r0, #4]
    f8b4:	e3500000 	cmp	r0, #0
    f8b8:	0a000000 	beq	f8c0 <CUSBFunction::GetDevice() const+0x10>
    f8bc:	e12fff1e 	bx	lr
    f8c0:	e92d4010 	push	{r4, lr}
    f8c4:	e3a02084 	mov	r2, #132	; 0x84
    f8c8:	e59f1004 	ldr	r1, [pc, #4]	; f8d4 <CUSBFunction::GetDevice() const+0x24>
    f8cc:	e59f0004 	ldr	r0, [pc, #4]	; f8d8 <CUSBFunction::GetDevice() const+0x28>
    f8d0:	eb0053ce 	bl	24810 <assertion_failed>
    f8d4:	000403ac 	.word	0x000403ac
    f8d8:	0003fc00 	.word	0x0003fc00

0000f8dc <CUSBFunction::GetEndpoint0() const>:
    f8dc:	e5900004 	ldr	r0, [r0, #4]
    f8e0:	e3500000 	cmp	r0, #0
    f8e4:	0a000000 	beq	f8ec <CUSBFunction::GetEndpoint0() const+0x10>
    f8e8:	eafffa70 	b	e2b0 <CUSBDevice::GetEndpoint0() const>
    f8ec:	e92d4010 	push	{r4, lr}
    f8f0:	e3a0208a 	mov	r2, #138	; 0x8a
    f8f4:	e59f1004 	ldr	r1, [pc, #4]	; f900 <CUSBFunction::GetEndpoint0() const+0x24>
    f8f8:	e59f0004 	ldr	r0, [pc, #4]	; f904 <CUSBFunction::GetEndpoint0() const+0x28>
    f8fc:	eb0053c3 	bl	24810 <assertion_failed>
    f900:	000403ac 	.word	0x000403ac
    f904:	0003fc00 	.word	0x0003fc00

0000f908 <CUSBFunction::GetHost() const>:
    f908:	e5900004 	ldr	r0, [r0, #4]
    f90c:	e3500000 	cmp	r0, #0
    f910:	0a000000 	beq	f918 <CUSBFunction::GetHost() const+0x10>
    f914:	eafffa70 	b	e2dc <CUSBDevice::GetHost() const>
    f918:	e92d4010 	push	{r4, lr}
    f91c:	e3a02090 	mov	r2, #144	; 0x90
    f920:	e59f1004 	ldr	r1, [pc, #4]	; f92c <CUSBFunction::GetHost() const+0x24>
    f924:	e59f0004 	ldr	r0, [pc, #4]	; f930 <CUSBFunction::GetHost() const+0x28>
    f928:	eb0053b8 	bl	24810 <assertion_failed>
    f92c:	000403ac 	.word	0x000403ac
    f930:	0003fc00 	.word	0x0003fc00

0000f934 <CUSBFunction::GetDescriptor(unsigned char)>:
    f934:	e5900008 	ldr	r0, [r0, #8]
    f938:	e3500000 	cmp	r0, #0
    f93c:	0a000000 	beq	f944 <CUSBFunction::GetDescriptor(unsigned char)+0x10>
    f940:	ea00205b 	b	17ab4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    f944:	e92d4010 	push	{r4, lr}
    f948:	e3a02096 	mov	r2, #150	; 0x96
    f94c:	e59f1004 	ldr	r1, [pc, #4]	; f958 <CUSBFunction::GetDescriptor(unsigned char)+0x24>
    f950:	e59f0004 	ldr	r0, [pc, #4]	; f95c <CUSBFunction::GetDescriptor(unsigned char)+0x28>
    f954:	eb0053ad 	bl	24810 <assertion_failed>
    f958:	000403ac 	.word	0x000403ac
    f95c:	0003fe3c 	.word	0x0003fe3c

0000f960 <CUSBFunction::ConfigurationError(char const*) const>:
    f960:	e5900008 	ldr	r0, [r0, #8]
    f964:	e92d4010 	push	{r4, lr}
    f968:	e3500000 	cmp	r0, #0
    f96c:	0a000003 	beq	f980 <CUSBFunction::ConfigurationError(char const*) const+0x20>
    f970:	e3510000 	cmp	r1, #0
    f974:	0a000005 	beq	f990 <CUSBFunction::ConfigurationError(char const*) const+0x30>
    f978:	e8bd4010 	pop	{r4, lr}
    f97c:	ea00209a 	b	17bec <CUSBConfigurationParser::Error(char const*) const>
    f980:	e3a0209c 	mov	r2, #156	; 0x9c
    f984:	e59f1014 	ldr	r1, [pc, #20]	; f9a0 <CUSBFunction::ConfigurationError(char const*) const+0x40>
    f988:	e59f0014 	ldr	r0, [pc, #20]	; f9a4 <CUSBFunction::ConfigurationError(char const*) const+0x44>
    f98c:	eb00539f 	bl	24810 <assertion_failed>
    f990:	e3a0209d 	mov	r2, #157	; 0x9d
    f994:	e59f1004 	ldr	r1, [pc, #4]	; f9a0 <CUSBFunction::ConfigurationError(char const*) const+0x40>
    f998:	e59f0008 	ldr	r0, [pc, #8]	; f9a8 <CUSBFunction::ConfigurationError(char const*) const+0x48>
    f99c:	eb00539b 	bl	24810 <assertion_failed>
    f9a0:	000403ac 	.word	0x000403ac
    f9a4:	0003fe3c 	.word	0x0003fe3c
    f9a8:	0004043c 	.word	0x0004043c

0000f9ac <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
    f9ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f9b0:	e1a04000 	mov	r4, r0
    f9b4:	e590000c 	ldr	r0, [r0, #12]
    f9b8:	e3500000 	cmp	r0, #0
    f9bc:	0a00001f 	beq	fa40 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x94>
    f9c0:	e1a08003 	mov	r8, r3
    f9c4:	e5943008 	ldr	r3, [r4, #8]
    f9c8:	e3530000 	cmp	r3, #0
    f9cc:	0a00001f 	beq	fa50 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xa4>
    f9d0:	e5943004 	ldr	r3, [r4, #4]
    f9d4:	e3530000 	cmp	r3, #0
    f9d8:	11a06001 	movne	r6, r1
    f9dc:	11a07002 	movne	r7, r2
    f9e0:	13a05004 	movne	r5, #4
    f9e4:	1a000009 	bne	fa10 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x64>
    f9e8:	ea00001c 	b	fa60 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xb4>
    f9ec:	e1a01005 	mov	r1, r5
    f9f0:	e5940004 	ldr	r0, [r4, #4]
    f9f4:	ebfffa5b 	bl	e368 <CUSBDevice::GetDescriptor(unsigned char)>
    f9f8:	e1a01005 	mov	r1, r5
    f9fc:	e5940008 	ldr	r0, [r4, #8]
    fa00:	eb00202b 	bl	17ab4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    fa04:	e3500000 	cmp	r0, #0
    fa08:	e584000c 	str	r0, [r4, #12]
    fa0c:	0a00000a 	beq	fa3c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x90>
    fa10:	e5d03005 	ldrb	r3, [r0, #5]
    fa14:	e1530006 	cmp	r3, r6
    fa18:	1afffff3 	bne	f9ec <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
    fa1c:	e5d03006 	ldrb	r3, [r0, #6]
    fa20:	e1530007 	cmp	r3, r7
    fa24:	1afffff0 	bne	f9ec <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
    fa28:	e5d03007 	ldrb	r3, [r0, #7]
    fa2c:	e1530008 	cmp	r3, r8
    fa30:	1affffed 	bne	f9ec <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
    fa34:	e3a00001 	mov	r0, #1
    fa38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fa3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fa40:	e3a020a3 	mov	r2, #163	; 0xa3
    fa44:	e59f1024 	ldr	r1, [pc, #36]	; fa70 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    fa48:	e59f0024 	ldr	r0, [pc, #36]	; fa74 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc8>
    fa4c:	eb00536f 	bl	24810 <assertion_failed>
    fa50:	e3a020a4 	mov	r2, #164	; 0xa4
    fa54:	e59f1014 	ldr	r1, [pc, #20]	; fa70 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    fa58:	e59f0018 	ldr	r0, [pc, #24]	; fa78 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xcc>
    fa5c:	eb00536b 	bl	24810 <assertion_failed>
    fa60:	e3a020a5 	mov	r2, #165	; 0xa5
    fa64:	e59f1004 	ldr	r1, [pc, #4]	; fa70 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    fa68:	e59f000c 	ldr	r0, [pc, #12]	; fa7c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd0>
    fa6c:	eb005367 	bl	24810 <assertion_failed>
    fa70:	000403ac 	.word	0x000403ac
    fa74:	000403bc 	.word	0x000403bc
    fa78:	0003fe3c 	.word	0x0003fe3c
    fa7c:	0003fc00 	.word	0x0003fc00

0000fa80 <CUSBFunction::GetInterfaceNumber() const>:
    fa80:	e590300c 	ldr	r3, [r0, #12]
    fa84:	e3530000 	cmp	r3, #0
    fa88:	0a000001 	beq	fa94 <CUSBFunction::GetInterfaceNumber() const+0x14>
    fa8c:	e5d30002 	ldrb	r0, [r3, #2]
    fa90:	e12fff1e 	bx	lr
    fa94:	e92d4010 	push	{r4, lr}
    fa98:	e3a020bb 	mov	r2, #187	; 0xbb
    fa9c:	e59f1004 	ldr	r1, [pc, #4]	; faa8 <CUSBFunction::GetInterfaceNumber() const+0x28>
    faa0:	e59f0004 	ldr	r0, [pc, #4]	; faac <CUSBFunction::GetInterfaceNumber() const+0x2c>
    faa4:	eb005359 	bl	24810 <assertion_failed>
    faa8:	000403ac 	.word	0x000403ac
    faac:	000403bc 	.word	0x000403bc

0000fab0 <CUSBFunction::GetInterfaceClass() const>:
    fab0:	e590300c 	ldr	r3, [r0, #12]
    fab4:	e3530000 	cmp	r3, #0
    fab8:	0a000001 	beq	fac4 <CUSBFunction::GetInterfaceClass() const+0x14>
    fabc:	e5d30005 	ldrb	r0, [r3, #5]
    fac0:	e12fff1e 	bx	lr
    fac4:	e92d4010 	push	{r4, lr}
    fac8:	e3a020c1 	mov	r2, #193	; 0xc1
    facc:	e59f1004 	ldr	r1, [pc, #4]	; fad8 <CUSBFunction::GetInterfaceClass() const+0x28>
    fad0:	e59f0004 	ldr	r0, [pc, #4]	; fadc <CUSBFunction::GetInterfaceClass() const+0x2c>
    fad4:	eb00534d 	bl	24810 <assertion_failed>
    fad8:	000403ac 	.word	0x000403ac
    fadc:	000403bc 	.word	0x000403bc

0000fae0 <CUSBFunction::GetInterfaceSubClass() const>:
    fae0:	e590300c 	ldr	r3, [r0, #12]
    fae4:	e3530000 	cmp	r3, #0
    fae8:	0a000001 	beq	faf4 <CUSBFunction::GetInterfaceSubClass() const+0x14>
    faec:	e5d30006 	ldrb	r0, [r3, #6]
    faf0:	e12fff1e 	bx	lr
    faf4:	e92d4010 	push	{r4, lr}
    faf8:	e3a020c7 	mov	r2, #199	; 0xc7
    fafc:	e59f1004 	ldr	r1, [pc, #4]	; fb08 <CUSBFunction::GetInterfaceSubClass() const+0x28>
    fb00:	e59f0004 	ldr	r0, [pc, #4]	; fb0c <CUSBFunction::GetInterfaceSubClass() const+0x2c>
    fb04:	eb005341 	bl	24810 <assertion_failed>
    fb08:	000403ac 	.word	0x000403ac
    fb0c:	000403bc 	.word	0x000403bc

0000fb10 <CUSBFunction::GetInterfaceProtocol() const>:
    fb10:	e590300c 	ldr	r3, [r0, #12]
    fb14:	e3530000 	cmp	r3, #0
    fb18:	0a000001 	beq	fb24 <CUSBFunction::GetInterfaceProtocol() const+0x14>
    fb1c:	e5d30007 	ldrb	r0, [r3, #7]
    fb20:	e12fff1e 	bx	lr
    fb24:	e92d4010 	push	{r4, lr}
    fb28:	e3a020cd 	mov	r2, #205	; 0xcd
    fb2c:	e59f1004 	ldr	r1, [pc, #4]	; fb38 <CUSBFunction::GetInterfaceProtocol() const+0x28>
    fb30:	e59f0004 	ldr	r0, [pc, #4]	; fb3c <CUSBFunction::GetInterfaceProtocol() const+0x2c>
    fb34:	eb005335 	bl	24810 <assertion_failed>
    fb38:	000403ac 	.word	0x000403ac
    fb3c:	000403bc 	.word	0x000403bc

0000fb40 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    fb40:	e92d4010 	push	{r4, lr}
    fb44:	e1a04000 	mov	r4, r0
    fb48:	e59f300c 	ldr	r3, [pc, #12]	; fb5c <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
    fb4c:	e5803000 	str	r3, [r0]
    fb50:	eb000375 	bl	1092c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    fb54:	e1a00004 	mov	r0, r4
    fb58:	e8bd8010 	pop	{r4, pc}
    fb5c:	00040454 	.word	0x00040454

0000fb60 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    fb60:	e92d4010 	push	{r4, lr}
    fb64:	e1a04000 	mov	r4, r0
    fb68:	e59f3018 	ldr	r3, [pc, #24]	; fb88 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
    fb6c:	e5803000 	str	r3, [r0]
    fb70:	eb00036d 	bl	1092c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    fb74:	e1a00004 	mov	r0, r4
    fb78:	e3a01f5b 	mov	r1, #364	; 0x16c
    fb7c:	eb006d4e 	bl	2b0bc <operator delete(void*, unsigned int)>
    fb80:	e1a00004 	mov	r0, r4
    fb84:	e8bd8010 	pop	{r4, pc}
    fb88:	00040454 	.word	0x00040454

0000fb8c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
    fb8c:	e92d4070 	push	{r4, r5, r6, lr}
    fb90:	e1a05001 	mov	r5, r1
    fb94:	e24dd040 	sub	sp, sp, #64	; 0x40
    fb98:	e2801f4f 	add	r1, r0, #316	; 0x13c
    fb9c:	e1a04000 	mov	r4, r0
    fba0:	e3a02030 	mov	r2, #48	; 0x30
    fba4:	e28d0010 	add	r0, sp, #16
    fba8:	eb006b5c 	bl	2a920 <memcpy>
    fbac:	e3550001 	cmp	r5, #1
    fbb0:	0a00002c 	beq	fc68 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xdc>
    fbb4:	3a000025 	bcc	fc50 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xc4>
    fbb8:	e3550002 	cmp	r5, #2
    fbbc:	1a00001f 	bne	fc40 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xb4>
    fbc0:	e3e03001 	mvn	r3, #1
    fbc4:	e3a01000 	mov	r1, #0
    fbc8:	e3e02000 	mvn	r2, #0
    fbcc:	e5cd3011 	strb	r3, [sp, #17]
    fbd0:	e5cd3013 	strb	r3, [sp, #19]
    fbd4:	e5cd1012 	strb	r1, [sp, #18]
    fbd8:	e5cd2014 	strb	r2, [sp, #20]
    fbdc:	e1a00004 	mov	r0, r4
    fbe0:	ebffff48 	bl	f908 <CUSBFunction::GetHost() const>
    fbe4:	e1a05000 	mov	r5, r0
    fbe8:	e1a00004 	mov	r0, r4
    fbec:	ebffff3a 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
    fbf0:	e1a06000 	mov	r6, r0
    fbf4:	e1a00004 	mov	r0, r4
    fbf8:	ebffffa0 	bl	fa80 <CUSBFunction::GetInterfaceNumber() const>
    fbfc:	e3a02030 	mov	r2, #48	; 0x30
    fc00:	e59f3080 	ldr	r3, [pc, #128]	; fc88 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xfc>
    fc04:	e28dc010 	add	ip, sp, #16
    fc08:	e6ff0070 	uxth	r0, r0
    fc0c:	e58d0004 	str	r0, [sp, #4]
    fc10:	e58d200c 	str	r2, [sp, #12]
    fc14:	e58d3000 	str	r3, [sp]
    fc18:	e1a01006 	mov	r1, r6
    fc1c:	e1a00005 	mov	r0, r5
    fc20:	e58dc008 	str	ip, [sp, #8]
    fc24:	e3a03009 	mov	r3, #9
    fc28:	e3a02021 	mov	r2, #33	; 0x21
    fc2c:	eb000b07 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fc30:	e1e00000 	mvn	r0, r0
    fc34:	e1a00fa0 	lsr	r0, r0, #31
    fc38:	e28dd040 	add	sp, sp, #64	; 0x40
    fc3c:	e8bd8070 	pop	{r4, r5, r6, pc}
    fc40:	e59f2044 	ldr	r2, [pc, #68]	; fc8c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x100>
    fc44:	e59f1044 	ldr	r1, [pc, #68]	; fc90 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x104>
    fc48:	e59f0044 	ldr	r0, [pc, #68]	; fc94 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x108>
    fc4c:	eb0052ef 	bl	24810 <assertion_failed>
    fc50:	e3a03000 	mov	r3, #0
    fc54:	e5cd3011 	strb	r3, [sp, #17]
    fc58:	e5cd3012 	strb	r3, [sp, #18]
    fc5c:	e5cd3013 	strb	r3, [sp, #19]
    fc60:	e5cd3014 	strb	r3, [sp, #20]
    fc64:	eaffffdc 	b	fbdc <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
    fc68:	e3e03001 	mvn	r3, #1
    fc6c:	e3e01000 	mvn	r1, #0
    fc70:	e3a02000 	mov	r2, #0
    fc74:	e5cd3011 	strb	r3, [sp, #17]
    fc78:	e5cd3013 	strb	r3, [sp, #19]
    fc7c:	e5cd1012 	strb	r1, [sp, #18]
    fc80:	e5cd2014 	strb	r2, [sp, #20]
    fc84:	eaffffd4 	b	fbdc <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
    fc88:	00000201 	.word	0x00000201
    fc8c:	0000010e 	.word	0x0000010e
    fc90:	00040510 	.word	0x00040510
    fc94:	0003fe24 	.word	0x0003fe24

0000fc98 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
    fc98:	e351000a 	cmp	r1, #10
    fc9c:	9a000001 	bls	fca8 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
    fca0:	e3a00000 	mov	r0, #0
    fca4:	e12fff1e 	bx	lr
    fca8:	e59f3078 	ldr	r3, [pc, #120]	; fd28 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x90>
    fcac:	e92d4070 	push	{r4, r5, r6, lr}
    fcb0:	e0831001 	add	r1, r3, r1
    fcb4:	e5d1304c 	ldrb	r3, [r1, #76]	; 0x4c
    fcb8:	e24dd010 	sub	sp, sp, #16
    fcbc:	e1a03083 	lsl	r3, r3, #1
    fcc0:	e5c03145 	strb	r3, [r0, #325]	; 0x145
    fcc4:	e1a04000 	mov	r4, r0
    fcc8:	ebffff0e 	bl	f908 <CUSBFunction::GetHost() const>
    fccc:	e1a05000 	mov	r5, r0
    fcd0:	e1a00004 	mov	r0, r4
    fcd4:	ebffff00 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
    fcd8:	e1a06000 	mov	r6, r0
    fcdc:	e1a00004 	mov	r0, r4
    fce0:	ebffff66 	bl	fa80 <CUSBFunction::GetInterfaceNumber() const>
    fce4:	e3a02030 	mov	r2, #48	; 0x30
    fce8:	e59f303c 	ldr	r3, [pc, #60]	; fd2c <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x94>
    fcec:	e6ff0070 	uxth	r0, r0
    fcf0:	e2844f4f 	add	r4, r4, #316	; 0x13c
    fcf4:	e58d0004 	str	r0, [sp, #4]
    fcf8:	e58d200c 	str	r2, [sp, #12]
    fcfc:	e58d3000 	str	r3, [sp]
    fd00:	e1a01006 	mov	r1, r6
    fd04:	e1a00005 	mov	r0, r5
    fd08:	e58d4008 	str	r4, [sp, #8]
    fd0c:	e3a03009 	mov	r3, #9
    fd10:	e3a02021 	mov	r2, #33	; 0x21
    fd14:	eb000acd 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fd18:	e1e00000 	mvn	r0, r0
    fd1c:	e1a00fa0 	lsr	r0, r0, #31
    fd20:	e28dd010 	add	sp, sp, #16
    fd24:	e8bd8070 	pop	{r4, r5, r6, pc}
    fd28:	0004044c 	.word	0x0004044c
    fd2c:	00000201 	.word	0x00000201

0000fd30 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
    fd30:	e92d4070 	push	{r4, r5, r6, lr}
    fd34:	e3a02000 	mov	r2, #0
    fd38:	e1a04000 	mov	r4, r0
    fd3c:	eb000311 	bl	10988 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    fd40:	e3a03000 	mov	r3, #0
    fd44:	e59f5030 	ldr	r5, [pc, #48]	; fd7c <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)+0x4c>
    fd48:	e1a00004 	mov	r0, r4
    fd4c:	e2852008 	add	r2, r5, #8
    fd50:	e5842000 	str	r2, [r4]
    fd54:	e3a01003 	mov	r1, #3
    fd58:	e1a02003 	mov	r2, r3
    fd5c:	ebffff12 	bl	f9ac <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
    fd60:	e2851058 	add	r1, r5, #88	; 0x58
    fd64:	e5c4013a 	strb	r0, [r4, #314]	; 0x13a
    fd68:	e3a02030 	mov	r2, #48	; 0x30
    fd6c:	e2840f4f 	add	r0, r4, #316	; 0x13c
    fd70:	eb006aea 	bl	2a920 <memcpy>
    fd74:	e1a00004 	mov	r0, r4
    fd78:	e8bd8070 	pop	{r4, r5, r6, pc}
    fd7c:	0004044c 	.word	0x0004044c

0000fd80 <CUSBGamePadPS3Device::PS3Enable()>:
    fd80:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fd84:	e3a02042 	mov	r2, #66	; 0x42
    fd88:	e3a0300c 	mov	r3, #12
    fd8c:	e3a04000 	mov	r4, #0
    fd90:	e24dd01c 	sub	sp, sp, #28
    fd94:	e5cd2014 	strb	r2, [sp, #20]
    fd98:	e5cd3015 	strb	r3, [sp, #21]
    fd9c:	e1a05000 	mov	r5, r0
    fda0:	e5cd4016 	strb	r4, [sp, #22]
    fda4:	e5cd4017 	strb	r4, [sp, #23]
    fda8:	ebfffed6 	bl	f908 <CUSBFunction::GetHost() const>
    fdac:	e1a06000 	mov	r6, r0
    fdb0:	e1a00005 	mov	r0, r5
    fdb4:	ebfffec8 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
    fdb8:	e1a07000 	mov	r7, r0
    fdbc:	e1a00005 	mov	r0, r5
    fdc0:	ebffff2e 	bl	fa80 <CUSBFunction::GetInterfaceNumber() const>
    fdc4:	e3a0c004 	mov	ip, #4
    fdc8:	e3a02ffd 	mov	r2, #1012	; 0x3f4
    fdcc:	e6ff0070 	uxth	r0, r0
    fdd0:	e28d3014 	add	r3, sp, #20
    fdd4:	e58d0004 	str	r0, [sp, #4]
    fdd8:	e58d2000 	str	r2, [sp]
    fddc:	e58d3008 	str	r3, [sp, #8]
    fde0:	e1a01007 	mov	r1, r7
    fde4:	e1a00006 	mov	r0, r6
    fde8:	e58dc00c 	str	ip, [sp, #12]
    fdec:	e3a03009 	mov	r3, #9
    fdf0:	e3a02021 	mov	r2, #33	; 0x21
    fdf4:	eb000a95 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fdf8:	e1500004 	cmp	r0, r4
    fdfc:	b1a00004 	movlt	r0, r4
    fe00:	ba000004 	blt	fe18 <CUSBGamePadPS3Device::PS3Enable()+0x98>
    fe04:	e5953000 	ldr	r3, [r5]
    fe08:	e5d5112c 	ldrb	r1, [r5, #300]	; 0x12c
    fe0c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    fe10:	e1a00005 	mov	r0, r5
    fe14:	e12fff33 	blx	r3
    fe18:	e28dd01c 	add	sp, sp, #28
    fe1c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000fe20 <CUSBGamePadPS3Device::Configure()>:
    fe20:	e92d4030 	push	{r4, r5, lr}
    fe24:	e5d0513a 	ldrb	r5, [r0, #314]	; 0x13a
    fe28:	e24dd00c 	sub	sp, sp, #12
    fe2c:	e3550000 	cmp	r5, #0
    fe30:	0a00001e 	beq	feb0 <CUSBGamePadPS3Device::Configure()+0x90>
    fe34:	e1a04000 	mov	r4, r0
    fe38:	eb000449 	bl	10f64 <CUSBGamePadStandardDevice::Configure()>
    fe3c:	e2505000 	subs	r5, r0, #0
    fe40:	0a00002a 	beq	fef0 <CUSBGamePadPS3Device::Configure()+0xd0>
    fe44:	e2845f4a 	add	r5, r4, #296	; 0x128
    fe48:	e1d530b0 	ldrh	r3, [r5]
    fe4c:	e2433031 	sub	r3, r3, #49	; 0x31
    fe50:	e3530001 	cmp	r3, #1
    fe54:	8a00001a 	bhi	fec4 <CUSBGamePadPS3Device::Configure()+0xa4>
    fe58:	e3a01010 	mov	r1, #16
    fe5c:	e3a0c013 	mov	ip, #19
    fe60:	e1a03004 	mov	r3, r4
    fe64:	e3a02000 	mov	r2, #0
    fe68:	e3a000ff 	mov	r0, #255	; 0xff
    fe6c:	e5841024 	str	r1, [r4, #36]	; 0x24
    fe70:	e584c104 	str	ip, [r4, #260]	; 0x104
    fe74:	e28410c0 	add	r1, r4, #192	; 0xc0
    fe78:	e583202c 	str	r2, [r3, #44]	; 0x2c
    fe7c:	e5830030 	str	r0, [r3, #48]	; 0x30
    fe80:	e283300c 	add	r3, r3, #12
    fe84:	e1530001 	cmp	r3, r1
    fe88:	1afffffa 	bne	fe78 <CUSBGamePadPS3Device::Configure()+0x58>
    fe8c:	e58420e8 	str	r2, [r4, #232]	; 0xe8
    fe90:	e1a00004 	mov	r0, r4
    fe94:	ebffffb9 	bl	fd80 <CUSBGamePadPS3Device::PS3Enable()>
    fe98:	e2505000 	subs	r5, r0, #0
    fe9c:	0a00001b 	beq	ff10 <CUSBGamePadPS3Device::Configure()+0xf0>
    fea0:	e1a00004 	mov	r0, r4
    fea4:	e28dd00c 	add	sp, sp, #12
    fea8:	e8bd4030 	pop	{r4, r5, lr}
    feac:	ea0009da 	b	1261c <CUSBHIDDevice::StartRequest()>
    feb0:	e59f1078 	ldr	r1, [pc, #120]	; ff30 <CUSBGamePadPS3Device::Configure()+0x110>
    feb4:	ebfffea9 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
    feb8:	e1a00005 	mov	r0, r5
    febc:	e28dd00c 	add	sp, sp, #12
    fec0:	e8bd8030 	pop	{r4, r5, pc}
    fec4:	eb005b44 	bl	26bdc <CLogger::Get()>
    fec8:	e1d520b0 	ldrh	r2, [r5]
    fecc:	e3a05000 	mov	r5, #0
    fed0:	e58d2000 	str	r2, [sp]
    fed4:	e59f3058 	ldr	r3, [pc, #88]	; ff34 <CUSBGamePadPS3Device::Configure()+0x114>
    fed8:	e3a02001 	mov	r2, #1
    fedc:	e59f104c 	ldr	r1, [pc, #76]	; ff30 <CUSBGamePadPS3Device::Configure()+0x110>
    fee0:	eb005a7a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fee4:	e1a00005 	mov	r0, r5
    fee8:	e28dd00c 	add	sp, sp, #12
    feec:	e8bd8030 	pop	{r4, r5, pc}
    fef0:	eb005b39 	bl	26bdc <CLogger::Get()>
    fef4:	e59f303c 	ldr	r3, [pc, #60]	; ff38 <CUSBGamePadPS3Device::Configure()+0x118>
    fef8:	e3a02001 	mov	r2, #1
    fefc:	e59f102c 	ldr	r1, [pc, #44]	; ff30 <CUSBGamePadPS3Device::Configure()+0x110>
    ff00:	eb005a72 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff04:	e1a00005 	mov	r0, r5
    ff08:	e28dd00c 	add	sp, sp, #12
    ff0c:	e8bd8030 	pop	{r4, r5, pc}
    ff10:	eb005b31 	bl	26bdc <CLogger::Get()>
    ff14:	e59f3020 	ldr	r3, [pc, #32]	; ff3c <CUSBGamePadPS3Device::Configure()+0x11c>
    ff18:	e3a02001 	mov	r2, #1
    ff1c:	e59f100c 	ldr	r1, [pc, #12]	; ff30 <CUSBGamePadPS3Device::Configure()+0x110>
    ff20:	eb005a6a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff24:	e1a00005 	mov	r0, r5
    ff28:	e28dd00c 	add	sp, sp, #12
    ff2c:	e8bd8030 	pop	{r4, r5, pc}
    ff30:	000404d4 	.word	0x000404d4
    ff34:	00040544 	.word	0x00040544
    ff38:	00040524 	.word	0x00040524
    ff3c:	00040560 	.word	0x00040560

0000ff40 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
    ff40:	e2803f4a 	add	r3, r0, #296	; 0x128
    ff44:	e1d330b0 	ldrh	r3, [r3]
    ff48:	e92d4010 	push	{r4, lr}
    ff4c:	e3530031 	cmp	r3, #49	; 0x31
    ff50:	e1a0c000 	mov	ip, r0
    ff54:	e1a0e001 	mov	lr, r1
    ff58:	0a000008 	beq	ff80 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x40>
    ff5c:	e3530032 	cmp	r3, #50	; 0x32
    ff60:	0a000005 	beq	ff7c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x3c>
    ff64:	e3530000 	cmp	r3, #0
    ff68:	0a000040 	beq	10070 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x130>
    ff6c:	e3a02092 	mov	r2, #146	; 0x92
    ff70:	e59f1110 	ldr	r1, [pc, #272]	; 10088 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x148>
    ff74:	e59f0110 	ldr	r0, [pc, #272]	; 1008c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x14c>
    ff78:	eb005224 	bl	24810 <assertion_failed>
    ff7c:	e281e001 	add	lr, r1, #1
    ff80:	e35e0000 	cmp	lr, #0
    ff84:	0a00003b 	beq	10078 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x138>
    ff88:	e5de0003 	ldrb	r0, [lr, #3]
    ff8c:	e5de2002 	ldrb	r2, [lr, #2]
    ff90:	e5de1004 	ldrb	r1, [lr, #4]
    ff94:	e1822400 	orr	r2, r2, r0, lsl #8
    ff98:	e5de0005 	ldrb	r0, [lr, #5]
    ff9c:	e1822801 	orr	r2, r2, r1, lsl #16
    ffa0:	e59f10e8 	ldr	r1, [pc, #232]	; 10090 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
    ffa4:	e1822c00 	orr	r2, r2, r0, lsl #24
    ffa8:	e59f00e4 	ldr	r0, [pc, #228]	; 10094 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x154>
    ffac:	e1a04682 	lsl	r4, r2, #13
    ffb0:	e00112a2 	and	r1, r1, r2, lsr #5
    ffb4:	e1811ea4 	orr	r1, r1, r4, lsr #29
    ffb8:	e0002582 	and	r2, r0, r2, lsl #11
    ffbc:	e1812002 	orr	r2, r1, r2
    ffc0:	e58c2108 	str	r2, [ip, #264]	; 0x108
    ffc4:	e5de2006 	ldrb	r2, [lr, #6]
    ffc8:	e3a03006 	mov	r3, #6
    ffcc:	e58c2028 	str	r2, [ip, #40]	; 0x28
    ffd0:	e5de1007 	ldrb	r1, [lr, #7]
    ffd4:	e59f00bc 	ldr	r0, [pc, #188]	; 10098 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x158>
    ffd8:	e58c1034 	str	r1, [ip, #52]	; 0x34
    ffdc:	e5de1008 	ldrb	r1, [lr, #8]
    ffe0:	e28e200d 	add	r2, lr, #13
    ffe4:	e58c1040 	str	r1, [ip, #64]	; 0x40
    ffe8:	e5de1009 	ldrb	r1, [lr, #9]
    ffec:	e28e4019 	add	r4, lr, #25
    fff0:	e58c104c 	str	r1, [ip, #76]	; 0x4c
    fff4:	ea000000 	b	fffc <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xbc>
    fff8:	e5b03004 	ldr	r3, [r0, #4]!
    fffc:	e5f21001 	ldrb	r1, [r2, #1]!
   10000:	e0833083 	add	r3, r3, r3, lsl #1
   10004:	e08c3103 	add	r3, ip, r3, lsl #2
   10008:	e1520004 	cmp	r2, r4
   1000c:	e5831028 	str	r1, [r3, #40]	; 0x28
   10010:	1afffff8 	bne	fff8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb8>
   10014:	e3a01000 	mov	r1, #0
   10018:	e59f407c 	ldr	r4, [pc, #124]	; 1009c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x15c>
   1001c:	e28c0f43 	add	r0, ip, #268	; 0x10c
   10020:	e2812014 	add	r2, r1, #20
   10024:	e08e2082 	add	r2, lr, r2, lsl #1
   10028:	e5d23001 	ldrb	r3, [r2, #1]
   1002c:	e5d22002 	ldrb	r2, [r2, #2]
   10030:	e2811001 	add	r1, r1, #1
   10034:	e1833402 	orr	r3, r3, r2, lsl #8
   10038:	e6bf3fb3 	rev16	r3, r3
   1003c:	e6ff3073 	uxth	r3, r3
   10040:	e0443003 	sub	r3, r4, r3
   10044:	e3510003 	cmp	r1, #3
   10048:	e4803004 	str	r3, [r0], #4
   1004c:	1afffff3 	bne	10020 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xe0>
   10050:	e5de302f 	ldrb	r3, [lr, #47]	; 0x2f
   10054:	e5de2030 	ldrb	r2, [lr, #48]	; 0x30
   10058:	e1833402 	orr	r3, r3, r2, lsl #8
   1005c:	e6bf3fb3 	rev16	r3, r3
   10060:	e6ff3073 	uxth	r3, r3
   10064:	e2433006 	sub	r3, r3, #6
   10068:	e58c3120 	str	r3, [ip, #288]	; 0x120
   1006c:	e8bd8010 	pop	{r4, pc}
   10070:	e8bd4010 	pop	{r4, lr}
   10074:	ea00029d 	b	10af0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
   10078:	e3a02097 	mov	r2, #151	; 0x97
   1007c:	e59f1004 	ldr	r1, [pc, #4]	; 10088 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x148>
   10080:	e59f0018 	ldr	r0, [pc, #24]	; 100a0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x160>
   10084:	eb0051e1 	bl	24810 <assertion_failed>
   10088:	00040510 	.word	0x00040510
   1008c:	0003fe24 	.word	0x0003fe24
   10090:	000007f8 	.word	0x000007f8
   10094:	0007f800 	.word	0x0007f800
   10098:	000404e0 	.word	0x000404e0
   1009c:	000001ff 	.word	0x000001ff
   100a0:	00040580 	.word	0x00040580

000100a4 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   100a4:	e3a00000 	mov	r0, #0
   100a8:	e12fff1e 	bx	lr

000100ac <CUSBGamePadPS3Device::GetProperties()>:
   100ac:	e3a0001b 	mov	r0, #27
   100b0:	e12fff1e 	bx	lr

000100b4 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   100b4:	e5d13001 	ldrb	r3, [r1, #1]
   100b8:	e5d12005 	ldrb	r2, [r1, #5]
   100bc:	e5803028 	str	r3, [r0, #40]	; 0x28
   100c0:	e5d13002 	ldrb	r3, [r1, #2]
   100c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   100c8:	e5803034 	str	r3, [r0, #52]	; 0x34
   100cc:	e5d13003 	ldrb	r3, [r1, #3]
   100d0:	e59fc18c 	ldr	ip, [pc, #396]	; 10264 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x1b0>
   100d4:	e5803040 	str	r3, [r0, #64]	; 0x40
   100d8:	e5d1e004 	ldrb	lr, [r1, #4]
   100dc:	e5d13005 	ldrb	r3, [r1, #5]
   100e0:	e580e04c 	str	lr, [r0, #76]	; 0x4c
   100e4:	e202200f 	and	r2, r2, #15
   100e8:	e5d1e008 	ldrb	lr, [r1, #8]
   100ec:	e79cc102 	ldr	ip, [ip, r2, lsl #2]
   100f0:	e3130080 	tst	r3, #128	; 0x80
   100f4:	e580e058 	str	lr, [r0, #88]	; 0x58
   100f8:	e5d1e009 	ldrb	lr, [r1, #9]
   100fc:	e580c108 	str	ip, [r0, #264]	; 0x108
   10100:	138cc080 	orrne	ip, ip, #128	; 0x80
   10104:	1580c108 	strne	ip, [r0, #264]	; 0x108
   10108:	e3130040 	tst	r3, #64	; 0x40
   1010c:	e58020ec 	str	r2, [r0, #236]	; 0xec
   10110:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10114:	e580e064 	str	lr, [r0, #100]	; 0x64
   10118:	13822c01 	orrne	r2, r2, #256	; 0x100
   1011c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10120:	e3130020 	tst	r3, #32
   10124:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10128:	13822c02 	orrne	r2, r2, #512	; 0x200
   1012c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10130:	e3130010 	tst	r3, #16
   10134:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10138:	13833b01 	orrne	r3, r3, #1024	; 0x400
   1013c:	15803108 	strne	r3, [r0, #264]	; 0x108
   10140:	e5d13006 	ldrb	r3, [r1, #6]
   10144:	e3130080 	tst	r3, #128	; 0x80
   10148:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1014c:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   10150:	15802108 	strne	r2, [r0, #264]	; 0x108
   10154:	e3130040 	tst	r3, #64	; 0x40
   10158:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1015c:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   10160:	15802108 	strne	r2, [r0, #264]	; 0x108
   10164:	e3130020 	tst	r3, #32
   10168:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1016c:	13822901 	orrne	r2, r2, #16384	; 0x4000
   10170:	15802108 	strne	r2, [r0, #264]	; 0x108
   10174:	e3130010 	tst	r3, #16
   10178:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1017c:	13822b02 	orrne	r2, r2, #2048	; 0x800
   10180:	15802108 	strne	r2, [r0, #264]	; 0x108
   10184:	e3130008 	tst	r3, #8
   10188:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1018c:	13822010 	orrne	r2, r2, #16
   10190:	15802108 	strne	r2, [r0, #264]	; 0x108
   10194:	e3130004 	tst	r3, #4
   10198:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1019c:	13822008 	orrne	r2, r2, #8
   101a0:	15802108 	strne	r2, [r0, #264]	; 0x108
   101a4:	e3130002 	tst	r3, #2
   101a8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   101ac:	13822040 	orrne	r2, r2, #64	; 0x40
   101b0:	15802108 	strne	r2, [r0, #264]	; 0x108
   101b4:	e3130001 	tst	r3, #1
   101b8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   101bc:	13833020 	orrne	r3, r3, #32
   101c0:	15803108 	strne	r3, [r0, #264]	; 0x108
   101c4:	e5d13007 	ldrb	r3, [r1, #7]
   101c8:	e3130002 	tst	r3, #2
   101cc:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   101d0:	13822602 	orrne	r2, r2, #2097152	; 0x200000
   101d4:	15802108 	strne	r2, [r0, #264]	; 0x108
   101d8:	e3130001 	tst	r3, #1
   101dc:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   101e0:	13833001 	orrne	r3, r3, #1
   101e4:	15803108 	strne	r3, [r0, #264]	; 0x108
   101e8:	e5d12014 	ldrb	r2, [r1, #20]
   101ec:	e5d13013 	ldrb	r3, [r1, #19]
   101f0:	e1833402 	orr	r3, r3, r2, lsl #8
   101f4:	e6bf3073 	sxth	r3, r3
   101f8:	e580310c 	str	r3, [r0, #268]	; 0x10c
   101fc:	e5d12018 	ldrb	r2, [r1, #24]
   10200:	e5d13017 	ldrb	r3, [r1, #23]
   10204:	e1833402 	orr	r3, r3, r2, lsl #8
   10208:	e6bf3073 	sxth	r3, r3
   1020c:	e5803110 	str	r3, [r0, #272]	; 0x110
   10210:	e5d12016 	ldrb	r2, [r1, #22]
   10214:	e5d13015 	ldrb	r3, [r1, #21]
   10218:	e1833402 	orr	r3, r3, r2, lsl #8
   1021c:	e6bf3073 	sxth	r3, r3
   10220:	e5803114 	str	r3, [r0, #276]	; 0x114
   10224:	e5d12012 	ldrb	r2, [r1, #18]
   10228:	e5d13011 	ldrb	r3, [r1, #17]
   1022c:	e1833402 	orr	r3, r3, r2, lsl #8
   10230:	e6bf3073 	sxth	r3, r3
   10234:	e5803118 	str	r3, [r0, #280]	; 0x118
   10238:	e5d1200e 	ldrb	r2, [r1, #14]
   1023c:	e5d1300d 	ldrb	r3, [r1, #13]
   10240:	e1833402 	orr	r3, r3, r2, lsl #8
   10244:	e6bf3073 	sxth	r3, r3
   10248:	e580311c 	str	r3, [r0, #284]	; 0x11c
   1024c:	e5d1300f 	ldrb	r3, [r1, #15]
   10250:	e5d12010 	ldrb	r2, [r1, #16]
   10254:	e1833402 	orr	r3, r3, r2, lsl #8
   10258:	e6bf3073 	sxth	r3, r3
   1025c:	e5803120 	str	r3, [r0, #288]	; 0x120
   10260:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   10264:	00040590 	.word	0x00040590

00010268 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   10268:	e92d4010 	push	{r4, lr}
   1026c:	e1a04000 	mov	r4, r0
   10270:	e5900140 	ldr	r0, [r0, #320]	; 0x140
   10274:	e59f3034 	ldr	r3, [pc, #52]	; 102b0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
   10278:	e3500000 	cmp	r0, #0
   1027c:	e5843000 	str	r3, [r4]
   10280:	0a000002 	beq	10290 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
   10284:	e5903000 	ldr	r3, [r0]
   10288:	e5933004 	ldr	r3, [r3, #4]
   1028c:	e12fff33 	blx	r3
   10290:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   10294:	e3500000 	cmp	r0, #0
   10298:	0a000000 	beq	102a0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
   1029c:	eb006b80 	bl	2b0a4 <operator delete[](void*)>
   102a0:	e1a00004 	mov	r0, r4
   102a4:	eb001ed0 	bl	17dec <CUSBGamePadDevice::~CUSBGamePadDevice()>
   102a8:	e1a00004 	mov	r0, r4
   102ac:	e8bd8010 	pop	{r4, pc}
   102b0:	000405bc 	.word	0x000405bc

000102b4 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   102b4:	e92d4010 	push	{r4, lr}
   102b8:	e1a04000 	mov	r4, r0
   102bc:	ebffffe9 	bl	10268 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>
   102c0:	e1a00004 	mov	r0, r4
   102c4:	e3a01f53 	mov	r1, #332	; 0x14c
   102c8:	eb006b7b 	bl	2b0bc <operator delete(void*, unsigned int)>
   102cc:	e1a00004 	mov	r0, r4
   102d0:	e8bd8010 	pop	{r4, pc}

000102d4 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   102d4:	e92d4010 	push	{r4, lr}
   102d8:	e1a04000 	mov	r4, r0
   102dc:	eb001eb0 	bl	17da4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   102e0:	e3a03000 	mov	r3, #0
   102e4:	e59f2030 	ldr	r2, [pc, #48]	; 1031c <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x48>
   102e8:	e1a00004 	mov	r0, r4
   102ec:	e5842000 	str	r2, [r4]
   102f0:	e3a01003 	mov	r1, #3
   102f4:	e1a02003 	mov	r2, r3
   102f8:	ebfffdab 	bl	f9ac <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   102fc:	e3a03000 	mov	r3, #0
   10300:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   10304:	e584313c 	str	r3, [r4, #316]	; 0x13c
   10308:	e5843140 	str	r3, [r4, #320]	; 0x140
   1030c:	e5c43144 	strb	r3, [r4, #324]	; 0x144
   10310:	e5c43145 	strb	r3, [r4, #325]	; 0x145
   10314:	e1a00004 	mov	r0, r4
   10318:	e8bd8010 	pop	{r4, pc}
   1031c:	000405bc 	.word	0x000405bc

00010320 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   10320:	e5d13007 	ldrb	r3, [r1, #7]
   10324:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10328:	e2133002 	ands	r3, r3, #2
   1032c:	e1a06001 	mov	r6, r1
   10330:	e1a05000 	mov	r5, r0
   10334:	1a000058 	bne	1049c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x17c>
   10338:	e5d00144 	ldrb	r0, [r0, #324]	; 0x144
   1033c:	e3500000 	cmp	r0, #0
   10340:	1a000059 	bne	104ac <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x18c>
   10344:	e5d67021 	ldrb	r7, [r6, #33]	; 0x21
   10348:	e5d64023 	ldrb	r4, [r6, #35]	; 0x23
   1034c:	e2473001 	sub	r3, r7, #1
   10350:	e3530002 	cmp	r3, #2
   10354:	83a07001 	movhi	r7, #1
   10358:	e1b043a4 	lsrs	r4, r4, #7
   1035c:	1a000047 	bne	10480 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x160>
   10360:	e1a03004 	mov	r3, r4
   10364:	e5d5c145 	ldrb	ip, [r5, #325]	; 0x145
   10368:	e0833004 	add	r3, r3, r4
   1036c:	e35c0000 	cmp	ip, #0
   10370:	e0863003 	add	r3, r6, r3
   10374:	1a000022 	bne	10404 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe4>
   10378:	e5d32025 	ldrb	r2, [r3, #37]	; 0x25
   1037c:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
   10380:	e5d3e024 	ldrb	lr, [r3, #36]	; 0x24
   10384:	e1a01201 	lsl	r1, r1, #4
   10388:	e202300f 	and	r3, r2, #15
   1038c:	e18ee403 	orr	lr, lr, r3, lsl #8
   10390:	e1811222 	orr	r1, r1, r2, lsr #4
   10394:	e1a0300c 	mov	r3, ip
   10398:	e1a0200c 	mov	r2, ip
   1039c:	e2859f51 	add	r9, r5, #324	; 0x144
   103a0:	e2858f52 	add	r8, r5, #328	; 0x148
   103a4:	e3a0a001 	mov	sl, #1
   103a8:	e190000c 	orrs	r0, r0, ip
   103ac:	e5c5a145 	strb	sl, [r5, #325]	; 0x145
   103b0:	e1c9e0b2 	strh	lr, [r9, #2]
   103b4:	e1c810b0 	strh	r1, [r8]
   103b8:	0a000004 	beq	103d0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb0>
   103bc:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   103c0:	e3500000 	cmp	r0, #0
   103c4:	0a000029 	beq	10470 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x150>
   103c8:	e5d51144 	ldrb	r1, [r5, #324]	; 0x144
   103cc:	eb0021dd 	bl	18b48 <CMouseDevice::ReportHandler(unsigned int, int, int)>
   103d0:	e3a01000 	mov	r1, #0
   103d4:	e2844001 	add	r4, r4, #1
   103d8:	e1570004 	cmp	r7, r4
   103dc:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   103e0:	e1a03184 	lsl	r3, r4, #3
   103e4:	e0832004 	add	r2, r3, r4
   103e8:	e0862002 	add	r2, r6, r2
   103ec:	e5d22023 	ldrb	r2, [r2, #35]	; 0x23
   103f0:	e1a00001 	mov	r0, r1
   103f4:	e1b023a2 	lsrs	r2, r2, #7
   103f8:	0affffd9 	beq	10364 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x44>
   103fc:	e5c51145 	strb	r1, [r5, #325]	; 0x145
   10400:	eafffff3 	b	103d4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb4>
   10404:	e5d3a025 	ldrb	sl, [r3, #37]	; 0x25
   10408:	e5d3e024 	ldrb	lr, [r3, #36]	; 0x24
   1040c:	e2859f51 	add	r9, r5, #324	; 0x144
   10410:	e20a100f 	and	r1, sl, #15
   10414:	e1d920b2 	ldrh	r2, [r9, #2]
   10418:	e18ee401 	orr	lr, lr, r1, lsl #8
   1041c:	e04e2002 	sub	r2, lr, r2
   10420:	e352007f 	cmp	r2, #127	; 0x7f
   10424:	e3e0c07e 	mvn	ip, #126	; 0x7e
   10428:	a3a0207f 	movge	r2, #127	; 0x7f
   1042c:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
   10430:	e2858f52 	add	r8, r5, #328	; 0x148
   10434:	e1a01201 	lsl	r1, r1, #4
   10438:	e1d830b0 	ldrh	r3, [r8]
   1043c:	e181122a 	orr	r1, r1, sl, lsr #4
   10440:	e0413003 	sub	r3, r1, r3
   10444:	e152000c 	cmp	r2, ip
   10448:	b1a0200c 	movlt	r2, ip
   1044c:	e353007f 	cmp	r3, #127	; 0x7f
   10450:	a3a0307f 	movge	r3, #127	; 0x7f
   10454:	e153000c 	cmp	r3, ip
   10458:	b1a0300c 	movlt	r3, ip
   1045c:	e3530000 	cmp	r3, #0
   10460:	03520000 	cmpeq	r2, #0
   10464:	13a0c001 	movne	ip, #1
   10468:	03a0c000 	moveq	ip, #0
   1046c:	eaffffcc 	b	103a4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x84>
   10470:	e59f2050 	ldr	r2, [pc, #80]	; 104c8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1a8>
   10474:	e59f1050 	ldr	r1, [pc, #80]	; 104cc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1ac>
   10478:	e59f0050 	ldr	r0, [pc, #80]	; 104d0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1b0>
   1047c:	eb0050e3 	bl	24810 <assertion_failed>
   10480:	e3a04000 	mov	r4, #0
   10484:	e1500004 	cmp	r0, r4
   10488:	e5c54145 	strb	r4, [r5, #325]	; 0x145
   1048c:	0a00000b 	beq	104c0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1a0>
   10490:	e1a03004 	mov	r3, r4
   10494:	e1a02004 	mov	r2, r4
   10498:	eaffffc7 	b	103bc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x9c>
   1049c:	e5d02144 	ldrb	r2, [r0, #324]	; 0x144
   104a0:	e3520000 	cmp	r2, #0
   104a4:	13a00000 	movne	r0, #0
   104a8:	1affffa5 	bne	10344 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
   104ac:	e2933000 	adds	r3, r3, #0
   104b0:	13a03001 	movne	r3, #1
   104b4:	e3a00001 	mov	r0, #1
   104b8:	e5c53144 	strb	r3, [r5, #324]	; 0x144
   104bc:	eaffffa0 	b	10344 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
   104c0:	e1a04000 	mov	r4, r0
   104c4:	eaffffc1 	b	103d0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb0>
   104c8:	0000015a 	.word	0x0000015a
   104cc:	0004060c 	.word	0x0004060c
   104d0:	00040620 	.word	0x00040620

000104d4 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   104d4:	e2913000 	adds	r3, r1, #0
   104d8:	13a03001 	movne	r3, #1
   104dc:	e3520040 	cmp	r2, #64	; 0x40
   104e0:	13a03000 	movne	r3, #0
   104e4:	e2532000 	subs	r2, r3, #0
   104e8:	012fff1e 	bxeq	lr
   104ec:	e92d4070 	push	{r4, r5, r6, lr}
   104f0:	e1a04000 	mov	r4, r0
   104f4:	e5903000 	ldr	r3, [r0]
   104f8:	e1a05001 	mov	r5, r1
   104fc:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   10500:	e12fff33 	blx	r3
   10504:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   10508:	e3530000 	cmp	r3, #0
   1050c:	0a000003 	beq	10520 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x4c>
   10510:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   10514:	e2841024 	add	r1, r4, #36	; 0x24
   10518:	e2400001 	sub	r0, r0, #1
   1051c:	e12fff33 	blx	r3
   10520:	e5943140 	ldr	r3, [r4, #320]	; 0x140
   10524:	e3530000 	cmp	r3, #0
   10528:	08bd8070 	popeq	{r4, r5, r6, pc}
   1052c:	e1a01005 	mov	r1, r5
   10530:	e1a00004 	mov	r0, r4
   10534:	e8bd4070 	pop	{r4, r5, r6, lr}
   10538:	eaffff78 	b	10320 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

0001053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   1053c:	e92d4010 	push	{r4, lr}
   10540:	e590213c 	ldr	r2, [r0, #316]	; 0x13c
   10544:	e5d0c131 	ldrb	ip, [r0, #305]	; 0x131
   10548:	e3a03000 	mov	r3, #0
   1054c:	e5c2c003 	strb	ip, [r2, #3]
   10550:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10554:	e5d0e133 	ldrb	lr, [r0, #307]	; 0x133
   10558:	e3a02020 	mov	r2, #32
   1055c:	e5cce004 	strb	lr, [ip, #4]
   10560:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10564:	e5d0e132 	ldrb	lr, [r0, #306]	; 0x132
   10568:	e5cce005 	strb	lr, [ip, #5]
   1056c:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10570:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
   10574:	e5cce006 	strb	lr, [ip, #6]
   10578:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   1057c:	e5d0e135 	ldrb	lr, [r0, #309]	; 0x135
   10580:	e5cce007 	strb	lr, [ip, #7]
   10584:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10588:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
   1058c:	e5cce008 	strb	lr, [ip, #8]
   10590:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10594:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
   10598:	e5cce009 	strb	lr, [ip, #9]
   1059c:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   105a0:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
   105a4:	e5cce00a 	strb	lr, [ip, #10]
   105a8:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   105ac:	eb000790 	bl	123f4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   105b0:	e2504000 	subs	r4, r0, #0
   105b4:	1a000004 	bne	105cc <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x90>
   105b8:	eb005987 	bl	26bdc <CLogger::Get()>
   105bc:	e59f3010 	ldr	r3, [pc, #16]	; 105d4 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x98>
   105c0:	e3a02001 	mov	r2, #1
   105c4:	e59f100c 	ldr	r1, [pc, #12]	; 105d8 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x9c>
   105c8:	eb0058c0 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   105cc:	e1a00004 	mov	r0, r4
   105d0:	e8bd8010 	pop	{r4, pc}
   105d4:	00040634 	.word	0x00040634
   105d8:	00040600 	.word	0x00040600

000105dc <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   105dc:	e2411001 	sub	r1, r1, #1
   105e0:	e3510006 	cmp	r1, #6
   105e4:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   105e8:	ea000044 	b	10700 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x124>
   105ec:	00010628 	.word	0x00010628
   105f0:	0001064c 	.word	0x0001064c
   105f4:	00010670 	.word	0x00010670
   105f8:	00010694 	.word	0x00010694
   105fc:	000106b8 	.word	0x000106b8
   10600:	000106dc 	.word	0x000106dc
   10604:	00010608 	.word	0x00010608
   10608:	e3e03000 	mvn	r3, #0
   1060c:	e3a0207f 	mov	r2, #127	; 0x7f
   10610:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   10614:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   10618:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   1061c:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   10620:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   10624:	eaffffc4 	b	1053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10628:	e3a02000 	mov	r2, #0
   1062c:	e3e03000 	mvn	r3, #0
   10630:	e3a0107f 	mov	r1, #127	; 0x7f
   10634:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   10638:	e5c02135 	strb	r2, [r0, #309]	; 0x135
   1063c:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   10640:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   10644:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   10648:	eaffffbb 	b	1053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1064c:	e3e02000 	mvn	r2, #0
   10650:	e3a03000 	mov	r3, #0
   10654:	e3a0107f 	mov	r1, #127	; 0x7f
   10658:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   1065c:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   10660:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   10664:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   10668:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   1066c:	eaffffb2 	b	1053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10670:	e3e03000 	mvn	r3, #0
   10674:	e3a01000 	mov	r1, #0
   10678:	e3a0207f 	mov	r2, #127	; 0x7f
   1067c:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   10680:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   10684:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   10688:	e5c01135 	strb	r1, [r0, #309]	; 0x135
   1068c:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   10690:	eaffffa9 	b	1053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10694:	e3a02000 	mov	r2, #0
   10698:	e3e03000 	mvn	r3, #0
   1069c:	e3a0107f 	mov	r1, #127	; 0x7f
   106a0:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   106a4:	e5c02136 	strb	r2, [r0, #310]	; 0x136
   106a8:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   106ac:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   106b0:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   106b4:	eaffffa0 	b	1053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   106b8:	e3e03000 	mvn	r3, #0
   106bc:	e3a01000 	mov	r1, #0
   106c0:	e3a0207f 	mov	r2, #127	; 0x7f
   106c4:	e5c01134 	strb	r1, [r0, #308]	; 0x134
   106c8:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   106cc:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   106d0:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   106d4:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   106d8:	eaffff97 	b	1053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   106dc:	e3e03000 	mvn	r3, #0
   106e0:	e3a01000 	mov	r1, #0
   106e4:	e3a0207f 	mov	r2, #127	; 0x7f
   106e8:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   106ec:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   106f0:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   106f4:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   106f8:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   106fc:	eaffff8e 	b	1053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10700:	e3a03000 	mov	r3, #0
   10704:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   10708:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   1070c:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   10710:	e5c03137 	strb	r3, [r0, #311]	; 0x137
   10714:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   10718:	eaffff87 	b	1053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0001071c <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   1071c:	e92d4010 	push	{r4, lr}
   10720:	e1a04821 	lsr	r4, r1, #16
   10724:	e1a0e421 	lsr	lr, r1, #8
   10728:	e5c04134 	strb	r4, [r0, #308]	; 0x134
   1072c:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   10730:	e5c0e135 	strb	lr, [r0, #309]	; 0x135
   10734:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   10738:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   1073c:	e8bd4010 	pop	{r4, lr}
   10740:	eaffff7d 	b	1053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00010744 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   10744:	e3510001 	cmp	r1, #1
   10748:	0a000011 	beq	10794 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   1074c:	3a00000a 	bcc	1077c <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x38>
   10750:	e3510002 	cmp	r1, #2
   10754:	1a000006 	bne	10774 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x30>
   10758:	e3e0100c 	mvn	r1, #12
   1075c:	e3a02000 	mov	r2, #0
   10760:	e3e03000 	mvn	r3, #0
   10764:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   10768:	e5c02133 	strb	r2, [r0, #307]	; 0x133
   1076c:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   10770:	eaffff71 	b	1053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10774:	e3a00001 	mov	r0, #1
   10778:	e12fff1e 	bx	lr
   1077c:	e3a03000 	mov	r3, #0
   10780:	e3e0200f 	mvn	r2, #15
   10784:	e5c03133 	strb	r3, [r0, #307]	; 0x133
   10788:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   1078c:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   10790:	eaffff69 	b	1053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10794:	e3e0100c 	mvn	r1, #12
   10798:	e3e02000 	mvn	r2, #0
   1079c:	e3a03000 	mov	r3, #0
   107a0:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   107a4:	e5c02133 	strb	r2, [r0, #307]	; 0x133
   107a8:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   107ac:	eaffff62 	b	1053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

000107b0 <CUSBGamePadPS4Device::DisableTouchpad()>:
   107b0:	e3a02000 	mov	r2, #0
   107b4:	e59f3004 	ldr	r3, [pc, #4]	; 107c0 <CUSBGamePadPS4Device::DisableTouchpad()+0x10>
   107b8:	e5c32000 	strb	r2, [r3]
   107bc:	e12fff1e 	bx	lr
   107c0:	00047fa4 	.word	0x00047fa4

000107c4 <CUSBGamePadPS4Device::Configure()>:
   107c4:	e92d4070 	push	{r4, r5, r6, lr}
   107c8:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   107cc:	e3550000 	cmp	r5, #0
   107d0:	0a00003f 	beq	108d4 <CUSBGamePadPS4Device::Configure()+0x110>
   107d4:	e3a02040 	mov	r2, #64	; 0x40
   107d8:	e2803f4a 	add	r3, r0, #296	; 0x128
   107dc:	e1c320b0 	strh	r2, [r3]
   107e0:	e1a04000 	mov	r4, r0
   107e4:	eb001d43 	bl	17cf8 <CUSBGamePadDevice::Configure()>
   107e8:	e2505000 	subs	r5, r0, #0
   107ec:	0a00003c 	beq	108e4 <CUSBGamePadPS4Device::Configure()+0x120>
   107f0:	e59f3120 	ldr	r3, [pc, #288]	; 10918 <CUSBGamePadPS4Device::Configure()+0x154>
   107f4:	e5d33000 	ldrb	r3, [r3]
   107f8:	e3530000 	cmp	r3, #0
   107fc:	1a00003f 	bne	10900 <CUSBGamePadPS4Device::Configure()+0x13c>
   10800:	e3a02006 	mov	r2, #6
   10804:	e3a0c00e 	mov	ip, #14
   10808:	e3a00001 	mov	r0, #1
   1080c:	e1a03004 	mov	r3, r4
   10810:	e3a05000 	mov	r5, #0
   10814:	e3a010ff 	mov	r1, #255	; 0xff
   10818:	e5842024 	str	r2, [r4, #36]	; 0x24
   1081c:	e584c104 	str	ip, [r4, #260]	; 0x104
   10820:	e58400e8 	str	r0, [r4, #232]	; 0xe8
   10824:	e2842048 	add	r2, r4, #72	; 0x48
   10828:	e583502c 	str	r5, [r3, #44]	; 0x2c
   1082c:	e5831030 	str	r1, [r3, #48]	; 0x30
   10830:	e283300c 	add	r3, r3, #12
   10834:	e1520003 	cmp	r2, r3
   10838:	1afffffa 	bne	10828 <CUSBGamePadPS4Device::Configure()+0x64>
   1083c:	e3a00020 	mov	r0, #32
   10840:	eb006a10 	bl	2b088 <operator new[](unsigned int)>
   10844:	e3a06005 	mov	r6, #5
   10848:	e3a02020 	mov	r2, #32
   1084c:	e584013c 	str	r0, [r4, #316]	; 0x13c
   10850:	e3a01000 	mov	r1, #0
   10854:	eb0065ba 	bl	29f44 <memset>
   10858:	e3a0c007 	mov	ip, #7
   1085c:	e3e03000 	mvn	r3, #0
   10860:	e3a0e004 	mov	lr, #4
   10864:	e3e0100f 	mvn	r1, #15
   10868:	e3a0207f 	mov	r2, #127	; 0x7f
   1086c:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   10870:	e5c06000 	strb	r6, [r0]
   10874:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   10878:	e5c0c001 	strb	ip, [r0, #1]
   1087c:	e594c13c 	ldr	ip, [r4, #316]	; 0x13c
   10880:	e1a00004 	mov	r0, r4
   10884:	e5cce002 	strb	lr, [ip, #2]
   10888:	e5c41131 	strb	r1, [r4, #305]	; 0x131
   1088c:	e5c43134 	strb	r3, [r4, #308]	; 0x134
   10890:	e5c43135 	strb	r3, [r4, #309]	; 0x135
   10894:	e5c43136 	strb	r3, [r4, #310]	; 0x136
   10898:	e5c43138 	strb	r3, [r4, #312]	; 0x138
   1089c:	e5c42137 	strb	r2, [r4, #311]	; 0x137
   108a0:	e5c45133 	strb	r5, [r4, #307]	; 0x133
   108a4:	e5c45132 	strb	r5, [r4, #306]	; 0x132
   108a8:	ebffff23 	bl	1053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   108ac:	e5c45134 	strb	r5, [r4, #308]	; 0x134
   108b0:	e5c45135 	strb	r5, [r4, #309]	; 0x135
   108b4:	e5c45136 	strb	r5, [r4, #310]	; 0x136
   108b8:	e3a000fa 	mov	r0, #250	; 0xfa
   108bc:	eb00655a 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
   108c0:	e1a00004 	mov	r0, r4
   108c4:	ebffff1c 	bl	1053c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   108c8:	e1a00004 	mov	r0, r4
   108cc:	e8bd4070 	pop	{r4, r5, r6, lr}
   108d0:	ea000751 	b	1261c <CUSBHIDDevice::StartRequest()>
   108d4:	e59f1040 	ldr	r1, [pc, #64]	; 1091c <CUSBGamePadPS4Device::Configure()+0x158>
   108d8:	ebfffc20 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   108dc:	e1a00005 	mov	r0, r5
   108e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   108e4:	eb0058bc 	bl	26bdc <CLogger::Get()>
   108e8:	e59f3030 	ldr	r3, [pc, #48]	; 10920 <CUSBGamePadPS4Device::Configure()+0x15c>
   108ec:	e3a02001 	mov	r2, #1
   108f0:	e59f1024 	ldr	r1, [pc, #36]	; 1091c <CUSBGamePadPS4Device::Configure()+0x158>
   108f4:	eb0057f5 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   108f8:	e1a00005 	mov	r0, r5
   108fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   10900:	e3a00028 	mov	r0, #40	; 0x28
   10904:	eb0069de 	bl	2b084 <operator new(unsigned int)>
   10908:	e1a05000 	mov	r5, r0
   1090c:	eb002053 	bl	18a60 <CMouseDevice::CMouseDevice()>
   10910:	e5845140 	str	r5, [r4, #320]	; 0x140
   10914:	eaffffb9 	b	10800 <CUSBGamePadPS4Device::Configure()+0x3c>
   10918:	00047fa4 	.word	0x00047fa4
   1091c:	00040600 	.word	0x00040600
   10920:	00040524 	.word	0x00040524

00010924 <CUSBGamePadPS4Device::GetProperties()>:
   10924:	e3a0003f 	mov	r0, #63	; 0x3f
   10928:	e12fff1e 	bx	lr

0001092c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   1092c:	e92d4010 	push	{r4, lr}
   10930:	e1a04000 	mov	r4, r0
   10934:	e5900134 	ldr	r0, [r0, #308]	; 0x134
   10938:	e59f3024 	ldr	r3, [pc, #36]	; 10964 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
   1093c:	e3500000 	cmp	r0, #0
   10940:	e5843000 	str	r3, [r4]
   10944:	0a000000 	beq	1094c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
   10948:	eb0069d5 	bl	2b0a4 <operator delete[](void*)>
   1094c:	e3a03000 	mov	r3, #0
   10950:	e1a00004 	mov	r0, r4
   10954:	e5843134 	str	r3, [r4, #308]	; 0x134
   10958:	eb001d23 	bl	17dec <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1095c:	e1a00004 	mov	r0, r4
   10960:	e8bd8010 	pop	{r4, pc}
   10964:	0004065c 	.word	0x0004065c

00010968 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   10968:	e92d4010 	push	{r4, lr}
   1096c:	e1a04000 	mov	r4, r0
   10970:	ebffffed 	bl	1092c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   10974:	e1a00004 	mov	r0, r4
   10978:	e3a01f4f 	mov	r1, #316	; 0x13c
   1097c:	eb0069ce 	bl	2b0bc <operator delete(void*, unsigned int)>
   10980:	e1a00004 	mov	r0, r4
   10984:	e8bd8010 	pop	{r4, pc}

00010988 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   10988:	e92d4070 	push	{r4, r5, r6, lr}
   1098c:	e1a04000 	mov	r4, r0
   10990:	e1a05002 	mov	r5, r2
   10994:	eb001d02 	bl	17da4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   10998:	e3a03000 	mov	r3, #0
   1099c:	e59f0018 	ldr	r0, [pc, #24]	; 109bc <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
   109a0:	e2841f4e 	add	r1, r4, #312	; 0x138
   109a4:	e5840000 	str	r0, [r4]
   109a8:	e5c45130 	strb	r5, [r4, #304]	; 0x130
   109ac:	e5843134 	str	r3, [r4, #308]	; 0x134
   109b0:	e1a00004 	mov	r0, r4
   109b4:	e1c130b0 	strh	r3, [r1]
   109b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   109bc:	0004065c 	.word	0x0004065c

000109c0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   109c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109c4:	e0814002 	add	r4, r1, r2
   109c8:	e2846007 	add	r6, r4, #7
   109cc:	e1a061a6 	lsr	r6, r6, #3
   109d0:	e1a0e1a1 	lsr	lr, r1, #3
   109d4:	e15e0006 	cmp	lr, r6
   109d8:	e24dd00c 	sub	sp, sp, #12
   109dc:	2a000037 	bcs	10ac0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x100>
   109e0:	e3a07001 	mov	r7, #1
   109e4:	e3a05000 	mov	r5, #0
   109e8:	e2011007 	and	r1, r1, #7
   109ec:	e0828001 	add	r8, r2, r1
   109f0:	e1a08817 	lsl	r8, r7, r8
   109f4:	e6ef8078 	uxtb	r8, r8
   109f8:	e1a07117 	lsl	r7, r7, r1
   109fc:	e6ef7077 	uxtb	r7, r7
   10a00:	e2489001 	sub	r9, r8, #1
   10a04:	e2444001 	sub	r4, r4, #1
   10a08:	e0488007 	sub	r8, r8, r7
   10a0c:	e6ef9079 	uxtb	r9, r9
   10a10:	e2677000 	rsb	r7, r7, #0
   10a14:	e1a03005 	mov	r3, r5
   10a18:	e1a0c00e 	mov	ip, lr
   10a1c:	e1a041a4 	lsr	r4, r4, #3
   10a20:	e080000e 	add	r0, r0, lr
   10a24:	e58d9004 	str	r9, [sp, #4]
   10a28:	e6ef8078 	uxtb	r8, r8
   10a2c:	e6ef7077 	uxtb	r7, r7
   10a30:	e261b008 	rsb	fp, r1, #8
   10a34:	ea00000e 	b	10a74 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
   10a38:	e15e000c 	cmp	lr, ip
   10a3c:	0a000018 	beq	10aa4 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xe4>
   10a40:	e15c0004 	cmp	ip, r4
   10a44:	05d09000 	ldrbeq	r9, [r0]
   10a48:	059da004 	ldreq	sl, [sp, #4]
   10a4c:	12855008 	addne	r5, r5, #8
   10a50:	15d0a000 	ldrbne	sl, [r0]
   10a54:	0009900a 	andeq	r9, r9, sl
   10a58:	10429005 	subne	r9, r2, r5
   10a5c:	01833009 	orreq	r3, r3, r9
   10a60:	1183391a 	orrne	r3, r3, sl, lsl r9
   10a64:	e28cc001 	add	ip, ip, #1
   10a68:	e15c0006 	cmp	ip, r6
   10a6c:	e2800001 	add	r0, r0, #1
   10a70:	0a000008 	beq	10a98 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>
   10a74:	e15e0004 	cmp	lr, r4
   10a78:	1affffee 	bne	10a38 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x78>
   10a7c:	e5d03000 	ldrb	r3, [r0]
   10a80:	e28cc001 	add	ip, ip, #1
   10a84:	e0033008 	and	r3, r3, r8
   10a88:	e15c0006 	cmp	ip, r6
   10a8c:	e1a03153 	asr	r3, r3, r1
   10a90:	e2800001 	add	r0, r0, #1
   10a94:	1afffff6 	bne	10a74 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
   10a98:	e1a00003 	mov	r0, r3
   10a9c:	e28dd00c 	add	sp, sp, #12
   10aa0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10aa4:	e5d03000 	ldrb	r3, [r0]
   10aa8:	e085500b 	add	r5, r5, fp
   10aac:	e0033007 	and	r3, r3, r7
   10ab0:	e1a03153 	asr	r3, r3, r1
   10ab4:	e0429005 	sub	r9, r2, r5
   10ab8:	e1a03913 	lsl	r3, r3, r9
   10abc:	eaffffe8 	b	10a64 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
   10ac0:	e3a03000 	mov	r3, #0
   10ac4:	eafffff3 	b	10a98 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>

00010ac8 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   10ac8:	e92d4010 	push	{r4, lr}
   10acc:	e1a04002 	mov	r4, r2
   10ad0:	ebffffba 	bl	109c0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10ad4:	e3a02001 	mov	r2, #1
   10ad8:	e2443001 	sub	r3, r4, #1
   10adc:	e0103312 	ands	r3, r0, r2, lsl r3
   10ae0:	11a02412 	lslne	r2, r2, r4
   10ae4:	12622000 	rsbne	r2, r2, #0
   10ae8:	11800002 	orrne	r0, r0, r2
   10aec:	e8bd8010 	pop	{r4, pc}

00010af0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   10af0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10af4:	e5905134 	ldr	r5, [r0, #308]	; 0x134
   10af8:	e24dd034 	sub	sp, sp, #52	; 0x34
   10afc:	e3550000 	cmp	r5, #0
   10b00:	e58d0014 	str	r0, [sp, #20]
   10b04:	e58d1000 	str	r1, [sp]
   10b08:	0a000108 	beq	10f30 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x440>
   10b0c:	e3a09000 	mov	r9, #0
   10b10:	e59f3440 	ldr	r3, [pc, #1088]	; 10f58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x468>
   10b14:	e1a07009 	mov	r7, r9
   10b18:	e1a02003 	mov	r2, r3
   10b1c:	e1a0a009 	mov	sl, r9
   10b20:	e1a0b009 	mov	fp, r9
   10b24:	e1a08009 	mov	r8, r9
   10b28:	e58d300c 	str	r3, [sp, #12]
   10b2c:	e59d3014 	ldr	r3, [sp, #20]
   10b30:	e58d9020 	str	r9, [sp, #32]
   10b34:	e2833f4e 	add	r3, r3, #312	; 0x138
   10b38:	e1d340b0 	ldrh	r4, [r3]
   10b3c:	e58d901c 	str	r9, [sp, #28]
   10b40:	e58d9004 	str	r9, [sp, #4]
   10b44:	e58d2010 	str	r2, [sp, #16]
   10b48:	e58d2018 	str	r2, [sp, #24]
   10b4c:	e58d2008 	str	r2, [sp, #8]
   10b50:	e3540000 	cmp	r4, #0
   10b54:	0a000024 	beq	10bec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
   10b58:	e1d530d0 	ldrsb	r3, [r5]
   10b5c:	e2032003 	and	r2, r3, #3
   10b60:	e3520001 	cmp	r2, #1
   10b64:	0a00004e 	beq	10ca4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1b4>
   10b68:	e3520002 	cmp	r2, #2
   10b6c:	0a000045 	beq	10c88 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x198>
   10b70:	e3520000 	cmp	r2, #0
   10b74:	0a00003e 	beq	10c74 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x184>
   10b78:	e1d560d3 	ldrsb	r6, [r5, #3]
   10b7c:	e1d520d2 	ldrsb	r2, [r5, #2]
   10b80:	e1d510d1 	ldrsb	r1, [r5, #1]
   10b84:	e1a06806 	lsl	r6, r6, #16
   10b88:	e1866402 	orr	r6, r6, r2, lsl #8
   10b8c:	e1d520d4 	ldrsb	r2, [r5, #4]
   10b90:	e2444005 	sub	r4, r4, #5
   10b94:	e1866001 	orr	r6, r6, r1
   10b98:	e6ff4074 	uxth	r4, r4
   10b9c:	e1866c02 	orr	r6, r6, r2, lsl #24
   10ba0:	e2855005 	add	r5, r5, #5
   10ba4:	e20330fc 	and	r3, r3, #252	; 0xfc
   10ba8:	e3530084 	cmp	r3, #132	; 0x84
   10bac:	0a000024 	beq	10c44 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x154>
   10bb0:	e3530034 	cmp	r3, #52	; 0x34
   10bb4:	0a00003f 	beq	10cb8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1c8>
   10bb8:	ca000016 	bgt	10c18 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x128>
   10bbc:	e3530008 	cmp	r3, #8
   10bc0:	0a00003e 	beq	10cc0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1d0>
   10bc4:	da00004c 	ble	10cfc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x20c>
   10bc8:	e3530014 	cmp	r3, #20
   10bcc:	058d6018 	streq	r6, [sp, #24]
   10bd0:	0affffde 	beq	10b50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10bd4:	e3530024 	cmp	r3, #36	; 0x24
   10bd8:	e59d2008 	ldr	r2, [sp, #8]
   10bdc:	01a02006 	moveq	r2, r6
   10be0:	e3540000 	cmp	r4, #0
   10be4:	e58d2008 	str	r2, [sp, #8]
   10be8:	1affffda 	bne	10b58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   10bec:	e59d1014 	ldr	r1, [sp, #20]
   10bf0:	e59d001c 	ldr	r0, [sp, #28]
   10bf4:	e28b3007 	add	r3, fp, #7
   10bf8:	e5810024 	str	r0, [r1, #36]	; 0x24
   10bfc:	e59d0020 	ldr	r0, [sp, #32]
   10c00:	e1a031a3 	lsr	r3, r3, #3
   10c04:	e2812f4a 	add	r2, r1, #296	; 0x128
   10c08:	e58100e8 	str	r0, [r1, #232]	; 0xe8
   10c0c:	e1c230b0 	strh	r3, [r2]
   10c10:	e28dd034 	add	sp, sp, #52	; 0x34
   10c14:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c18:	e3530074 	cmp	r3, #116	; 0x74
   10c1c:	01a0a006 	moveq	sl, r6
   10c20:	0affffca 	beq	10b50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10c24:	da00003b 	ble	10d18 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x228>
   10c28:	e3530080 	cmp	r3, #128	; 0x80
   10c2c:	0a00002b 	beq	10ce0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f0>
   10c30:	e3530094 	cmp	r3, #148	; 0x94
   10c34:	e59d2004 	ldr	r2, [sp, #4]
   10c38:	01a02006 	moveq	r2, r6
   10c3c:	e58d2004 	str	r2, [sp, #4]
   10c40:	eaffffc2 	b	10b50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10c44:	e3570000 	cmp	r7, #0
   10c48:	1affffe7 	bne	10bec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
   10c4c:	e3a02008 	mov	r2, #8
   10c50:	e1a01008 	mov	r1, r8
   10c54:	e59d0000 	ldr	r0, [sp]
   10c58:	ebffff58 	bl	109c0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10c5c:	e3500000 	cmp	r0, #0
   10c60:	11500006 	cmpne	r0, r6
   10c64:	1affffe9 	bne	10c10 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x120>
   10c68:	e1a07006 	mov	r7, r6
   10c6c:	e3a0b008 	mov	fp, #8
   10c70:	eaffffb6 	b	10b50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10c74:	e2444001 	sub	r4, r4, #1
   10c78:	e6ff4074 	uxth	r4, r4
   10c7c:	e2855001 	add	r5, r5, #1
   10c80:	e1a06008 	mov	r6, r8
   10c84:	eaffffc6 	b	10ba4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   10c88:	e5d56001 	ldrb	r6, [r5, #1]
   10c8c:	e1d520d2 	ldrsb	r2, [r5, #2]
   10c90:	e2444003 	sub	r4, r4, #3
   10c94:	e6ff4074 	uxth	r4, r4
   10c98:	e1866402 	orr	r6, r6, r2, lsl #8
   10c9c:	e2855003 	add	r5, r5, #3
   10ca0:	eaffffbf 	b	10ba4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   10ca4:	e2444002 	sub	r4, r4, #2
   10ca8:	e1d560d1 	ldrsb	r6, [r5, #1]
   10cac:	e6ff4074 	uxth	r4, r4
   10cb0:	e2855002 	add	r5, r5, #2
   10cb4:	eaffffba 	b	10ba4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   10cb8:	e58d6010 	str	r6, [sp, #16]
   10cbc:	eaffffa3 	b	10b50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10cc0:	e3560036 	cmp	r6, #54	; 0x36
   10cc4:	ca000018 	bgt	10d2c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x23c>
   10cc8:	e3560030 	cmp	r6, #48	; 0x30
   10ccc:	aa00002d 	bge	10d88 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x298>
   10cd0:	e2466004 	sub	r6, r6, #4
   10cd4:	e3560001 	cmp	r6, #1
   10cd8:	93a09001 	movls	r9, #1
   10cdc:	eaffff9b 	b	10b50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10ce0:	e2066003 	and	r6, r6, #3
   10ce4:	e3560002 	cmp	r6, #2
   10ce8:	0a000014 	beq	10d40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x250>
   10cec:	e59d3004 	ldr	r3, [sp, #4]
   10cf0:	e0060a93 	mul	r6, r3, sl
   10cf4:	e08bb006 	add	fp, fp, r6
   10cf8:	eaffff94 	b	10b50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10cfc:	e3530004 	cmp	r3, #4
   10d00:	1affff92 	bne	10b50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10d04:	e3560009 	cmp	r6, #9
   10d08:	1affff90 	bne	10b50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10d0c:	e3590001 	cmp	r9, #1
   10d10:	03a09002 	moveq	r9, #2
   10d14:	eaffff8d 	b	10b50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10d18:	e3530044 	cmp	r3, #68	; 0x44
   10d1c:	e59d200c 	ldr	r2, [sp, #12]
   10d20:	01a02006 	moveq	r2, r6
   10d24:	e58d200c 	str	r2, [sp, #12]
   10d28:	eaffff88 	b	10b50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10d2c:	e3560039 	cmp	r6, #57	; 0x39
   10d30:	1affff86 	bne	10b50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10d34:	e3590001 	cmp	r9, #1
   10d38:	03a09004 	moveq	r9, #4
   10d3c:	eaffff83 	b	10b50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10d40:	e3590003 	cmp	r9, #3
   10d44:	0a000012 	beq	10d94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2a4>
   10d48:	e3590004 	cmp	r9, #4
   10d4c:	0a00004e 	beq	10e8c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x39c>
   10d50:	e59d3004 	ldr	r3, [sp, #4]
   10d54:	e3590002 	cmp	r9, #2
   10d58:	e0060a93 	mul	r6, r3, sl
   10d5c:	1affffe4 	bne	10cf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10d60:	e59d2014 	ldr	r2, [sp, #20]
   10d64:	e1a0100b 	mov	r1, fp
   10d68:	e5823104 	str	r3, [r2, #260]	; 0x104
   10d6c:	e59d0000 	ldr	r0, [sp]
   10d70:	e1a02006 	mov	r2, r6
   10d74:	ebffff11 	bl	109c0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10d78:	e59d2014 	ldr	r2, [sp, #20]
   10d7c:	e3a09001 	mov	r9, #1
   10d80:	e5820108 	str	r0, [r2, #264]	; 0x108
   10d84:	eaffffda 	b	10cf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10d88:	e3590001 	cmp	r9, #1
   10d8c:	03a09003 	moveq	r9, #3
   10d90:	eaffff6e 	b	10b50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10d94:	e59d3004 	ldr	r3, [sp, #4]
   10d98:	e3530000 	cmp	r3, #0
   10d9c:	0a00006a 	beq	10f4c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x45c>
   10da0:	e59d2018 	ldr	r2, [sp, #24]
   10da4:	e59f01ac 	ldr	r0, [pc, #428]	; 10f58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x468>
   10da8:	e59d1010 	ldr	r1, [sp, #16]
   10dac:	e1520000 	cmp	r2, r0
   10db0:	e1a03002 	mov	r3, r2
   10db4:	01a03001 	moveq	r3, r1
   10db8:	e59fc198 	ldr	ip, [pc, #408]	; 10f58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x468>
   10dbc:	e59d1008 	ldr	r1, [sp, #8]
   10dc0:	e59d000c 	ldr	r0, [sp, #12]
   10dc4:	e151000c 	cmp	r1, ip
   10dc8:	e1a02003 	mov	r2, r3
   10dcc:	e1a03001 	mov	r3, r1
   10dd0:	01a03000 	moveq	r3, r0
   10dd4:	e1a01003 	mov	r1, r3
   10dd8:	e59d001c 	ldr	r0, [sp, #28]
   10ddc:	e59dc014 	ldr	ip, [sp, #20]
   10de0:	e0806080 	add	r6, r0, r0, lsl #1
   10de4:	e58db01c 	str	fp, [sp, #28]
   10de8:	e58d7024 	str	r7, [sp, #36]	; 0x24
   10dec:	e58d5028 	str	r5, [sp, #40]	; 0x28
   10df0:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   10df4:	e3a09000 	mov	r9, #0
   10df8:	e1a0400b 	mov	r4, fp
   10dfc:	e08c6106 	add	r6, ip, r6, lsl #2
   10e00:	e1a05000 	mov	r5, r0
   10e04:	e1a07002 	mov	r7, r2
   10e08:	e1a0b001 	mov	fp, r1
   10e0c:	ea00000d 	b	10e48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x358>
   10e10:	ebfffeea 	bl	109c0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10e14:	e2899001 	add	r9, r9, #1
   10e18:	e359000f 	cmp	r9, #15
   10e1c:	93a02000 	movls	r2, #0
   10e20:	83a02001 	movhi	r2, #1
   10e24:	e59d3004 	ldr	r3, [sp, #4]
   10e28:	e5860028 	str	r0, [r6, #40]	; 0x28
   10e2c:	e1530009 	cmp	r3, r9
   10e30:	93822001 	orrls	r2, r2, #1
   10e34:	e3520000 	cmp	r2, #0
   10e38:	e2855001 	add	r5, r5, #1
   10e3c:	e286600c 	add	r6, r6, #12
   10e40:	e084400a 	add	r4, r4, sl
   10e44:	1a000008 	bne	10e6c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x37c>
   10e48:	e3570000 	cmp	r7, #0
   10e4c:	e1a0200a 	mov	r2, sl
   10e50:	e1a01004 	mov	r1, r4
   10e54:	e586702c 	str	r7, [r6, #44]	; 0x2c
   10e58:	e586b030 	str	fp, [r6, #48]	; 0x30
   10e5c:	e59d0000 	ldr	r0, [sp]
   10e60:	aaffffea 	bge	10e10 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x320>
   10e64:	ebffff17 	bl	10ac8 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   10e68:	eaffffe9 	b	10e14 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x324>
   10e6c:	e59db01c 	ldr	fp, [sp, #28]
   10e70:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   10e74:	e58d501c 	str	r5, [sp, #28]
   10e78:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   10e7c:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   10e80:	e0060a93 	mul	r6, r3, sl
   10e84:	e3a09001 	mov	r9, #1
   10e88:	eaffff99 	b	10cf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10e8c:	e59d2004 	ldr	r2, [sp, #4]
   10e90:	e3520000 	cmp	r2, #0
   10e94:	0a000029 	beq	10f40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x450>
   10e98:	e59d1020 	ldr	r1, [sp, #32]
   10e9c:	e59d0014 	ldr	r0, [sp, #20]
   10ea0:	e281303b 	add	r3, r1, #59	; 0x3b
   10ea4:	e0803103 	add	r3, r0, r3, lsl #2
   10ea8:	e58d7024 	str	r7, [sp, #36]	; 0x24
   10eac:	e58d5028 	str	r5, [sp, #40]	; 0x28
   10eb0:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   10eb4:	e3a06000 	mov	r6, #0
   10eb8:	e1a07001 	mov	r7, r1
   10ebc:	e1a04002 	mov	r4, r2
   10ec0:	e1a05003 	mov	r5, r3
   10ec4:	e1a0900b 	mov	r9, fp
   10ec8:	e58db020 	str	fp, [sp, #32]
   10ecc:	e59db000 	ldr	fp, [sp]
   10ed0:	e1a0200a 	mov	r2, sl
   10ed4:	e2866001 	add	r6, r6, #1
   10ed8:	e1a01009 	mov	r1, r9
   10edc:	e1a0000b 	mov	r0, fp
   10ee0:	ebfffeb6 	bl	109c0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10ee4:	e3560005 	cmp	r6, #5
   10ee8:	93a02000 	movls	r2, #0
   10eec:	83a02001 	movhi	r2, #1
   10ef0:	e1540006 	cmp	r4, r6
   10ef4:	93822001 	orrls	r2, r2, #1
   10ef8:	e3520000 	cmp	r2, #0
   10efc:	e2877001 	add	r7, r7, #1
   10f00:	e089900a 	add	r9, r9, sl
   10f04:	e4850004 	str	r0, [r5], #4
   10f08:	0afffff0 	beq	10ed0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3e0>
   10f0c:	e59d3004 	ldr	r3, [sp, #4]
   10f10:	e59db020 	ldr	fp, [sp, #32]
   10f14:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   10f18:	e58d7020 	str	r7, [sp, #32]
   10f1c:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   10f20:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   10f24:	e0060a93 	mul	r6, r3, sl
   10f28:	e3a09001 	mov	r9, #1
   10f2c:	eaffff70 	b	10cf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10f30:	e3a020a2 	mov	r2, #162	; 0xa2
   10f34:	e59f1020 	ldr	r1, [pc, #32]	; 10f5c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x46c>
   10f38:	e59f0020 	ldr	r0, [pc, #32]	; 10f60 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x470>
   10f3c:	eb004e33 	bl	24810 <assertion_failed>
   10f40:	e59d6004 	ldr	r6, [sp, #4]
   10f44:	e3a09001 	mov	r9, #1
   10f48:	eaffff69 	b	10cf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10f4c:	e1a06008 	mov	r6, r8
   10f50:	e3a09001 	mov	r9, #1
   10f54:	eaffff66 	b	10cf4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10f58:	f8a432eb 	.word	0xf8a432eb
   10f5c:	000406ac 	.word	0x000406ac
   10f60:	000406c4 	.word	0x000406c4

00010f64 <CUSBGamePadStandardDevice::Configure()>:
   10f64:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10f68:	e3a01021 	mov	r1, #33	; 0x21
   10f6c:	e24dd078 	sub	sp, sp, #120	; 0x78
   10f70:	e1a04000 	mov	r4, r0
   10f74:	ebfffa6e 	bl	f934 <CUSBFunction::GetDescriptor(unsigned char)>
   10f78:	e2505000 	subs	r5, r0, #0
   10f7c:	0a000003 	beq	10f90 <CUSBGamePadStandardDevice::Configure()+0x2c>
   10f80:	e5d50007 	ldrb	r0, [r5, #7]
   10f84:	e5d53008 	ldrb	r3, [r5, #8]
   10f88:	e1900403 	orrs	r0, r0, r3, lsl #8
   10f8c:	1a000006 	bne	10fac <CUSBGamePadStandardDevice::Configure()+0x48>
   10f90:	e1a00004 	mov	r0, r4
   10f94:	e59f1158 	ldr	r1, [pc, #344]	; 110f4 <CUSBGamePadStandardDevice::Configure()+0x190>
   10f98:	ebfffa70 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   10f9c:	e3a05000 	mov	r5, #0
   10fa0:	e1a00005 	mov	r0, r5
   10fa4:	e28dd078 	add	sp, sp, #120	; 0x78
   10fa8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10fac:	e2846f4e 	add	r6, r4, #312	; 0x138
   10fb0:	e1c600b0 	strh	r0, [r6]
   10fb4:	eb006833 	bl	2b088 <operator new[](unsigned int)>
   10fb8:	e5840134 	str	r0, [r4, #308]	; 0x134
   10fbc:	e1a00004 	mov	r0, r4
   10fc0:	ebfffa50 	bl	f908 <CUSBFunction::GetHost() const>
   10fc4:	e1a07000 	mov	r7, r0
   10fc8:	e1a00004 	mov	r0, r4
   10fcc:	ebfffa42 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
   10fd0:	e1a08000 	mov	r8, r0
   10fd4:	e1a00004 	mov	r0, r4
   10fd8:	e5d55006 	ldrb	r5, [r5, #6]
   10fdc:	e1d6a0b0 	ldrh	sl, [r6]
   10fe0:	e5949134 	ldr	r9, [r4, #308]	; 0x134
   10fe4:	ebfffaa5 	bl	fa80 <CUSBFunction::GetInterfaceNumber() const>
   10fe8:	e3a03081 	mov	r3, #129	; 0x81
   10fec:	e6ff0070 	uxth	r0, r0
   10ff0:	e58d000c 	str	r0, [sp, #12]
   10ff4:	e58d3008 	str	r3, [sp, #8]
   10ff8:	e58da004 	str	sl, [sp, #4]
   10ffc:	e3a03000 	mov	r3, #0
   11000:	e58d9000 	str	r9, [sp]
   11004:	e1a02005 	mov	r2, r5
   11008:	e1a01008 	mov	r1, r8
   1100c:	e1a00007 	mov	r0, r7
   11010:	eb000640 	bl	12918 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   11014:	e1d630b0 	ldrh	r3, [r6]
   11018:	e1500003 	cmp	r0, r3
   1101c:	0a000008 	beq	11044 <CUSBGamePadStandardDevice::Configure()+0xe0>
   11020:	e3a05000 	mov	r5, #0
   11024:	eb0056ec 	bl	26bdc <CLogger::Get()>
   11028:	e59f30c8 	ldr	r3, [pc, #200]	; 110f8 <CUSBGamePadStandardDevice::Configure()+0x194>
   1102c:	e3a02001 	mov	r2, #1
   11030:	e59f10bc 	ldr	r1, [pc, #188]	; 110f4 <CUSBGamePadStandardDevice::Configure()+0x190>
   11034:	eb005625 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11038:	e1a00005 	mov	r0, r5
   1103c:	e28dd078 	add	sp, sp, #120	; 0x78
   11040:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11044:	e3a02064 	mov	r2, #100	; 0x64
   11048:	e3a01000 	mov	r1, #0
   1104c:	e28d0014 	add	r0, sp, #20
   11050:	eb0063bb 	bl	29f44 <memset>
   11054:	e5943000 	ldr	r3, [r4]
   11058:	e28d1014 	add	r1, sp, #20
   1105c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11060:	e1a00004 	mov	r0, r4
   11064:	e12fff33 	blx	r3
   11068:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1106c:	e3530000 	cmp	r3, #0
   11070:	1a000002 	bne	11080 <CUSBGamePadStandardDevice::Configure()+0x11c>
   11074:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   11078:	e3530000 	cmp	r3, #0
   1107c:	0a00000e 	beq	110bc <CUSBGamePadStandardDevice::Configure()+0x158>
   11080:	e2843f4a 	add	r3, r4, #296	; 0x128
   11084:	e1d330b0 	ldrh	r3, [r3]
   11088:	e3530000 	cmp	r3, #0
   1108c:	0a000014 	beq	110e4 <CUSBGamePadStandardDevice::Configure()+0x180>
   11090:	e1a00004 	mov	r0, r4
   11094:	eb001b17 	bl	17cf8 <CUSBGamePadDevice::Configure()>
   11098:	e2505000 	subs	r5, r0, #0
   1109c:	0a00000a 	beq	110cc <CUSBGamePadStandardDevice::Configure()+0x168>
   110a0:	e5d43130 	ldrb	r3, [r4, #304]	; 0x130
   110a4:	e3530000 	cmp	r3, #0
   110a8:	0affffbc 	beq	10fa0 <CUSBGamePadStandardDevice::Configure()+0x3c>
   110ac:	e1a00004 	mov	r0, r4
   110b0:	eb000559 	bl	1261c <CUSBHIDDevice::StartRequest()>
   110b4:	e1a05000 	mov	r5, r0
   110b8:	eaffffb8 	b	10fa0 <CUSBGamePadStandardDevice::Configure()+0x3c>
   110bc:	e5945104 	ldr	r5, [r4, #260]	; 0x104
   110c0:	e3550000 	cmp	r5, #0
   110c4:	1affffed 	bne	11080 <CUSBGamePadStandardDevice::Configure()+0x11c>
   110c8:	eaffffb4 	b	10fa0 <CUSBGamePadStandardDevice::Configure()+0x3c>
   110cc:	eb0056c2 	bl	26bdc <CLogger::Get()>
   110d0:	e59f3024 	ldr	r3, [pc, #36]	; 110fc <CUSBGamePadStandardDevice::Configure()+0x198>
   110d4:	e3a02001 	mov	r2, #1
   110d8:	e59f1014 	ldr	r1, [pc, #20]	; 110f4 <CUSBGamePadStandardDevice::Configure()+0x190>
   110dc:	eb0055fb 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   110e0:	eaffffae 	b	10fa0 <CUSBGamePadStandardDevice::Configure()+0x3c>
   110e4:	e3a02085 	mov	r2, #133	; 0x85
   110e8:	e59f1010 	ldr	r1, [pc, #16]	; 11100 <CUSBGamePadStandardDevice::Configure()+0x19c>
   110ec:	e59f0010 	ldr	r0, [pc, #16]	; 11104 <CUSBGamePadStandardDevice::Configure()+0x1a0>
   110f0:	eb004dc6 	bl	24810 <assertion_failed>
   110f4:	000406a0 	.word	0x000406a0
   110f8:	000406e0 	.word	0x000406e0
   110fc:	00040524 	.word	0x00040524
   11100:	000406ac 	.word	0x000406ac
   11104:	00040704 	.word	0x00040704

00011108 <CUSBGamePadDevice::GetProperties()>:
   11108:	e3a00000 	mov	r0, #0
   1110c:	e12fff1e 	bx	lr

00011110 <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   11110:	e3a00000 	mov	r0, #0
   11114:	e12fff1e 	bx	lr

00011118 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   11118:	e3a00000 	mov	r0, #0
   1111c:	e12fff1e 	bx	lr

00011120 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   11120:	e92d4010 	push	{r4, lr}
   11124:	e1a04000 	mov	r4, r0
   11128:	e59f300c 	ldr	r3, [pc, #12]	; 1113c <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
   1112c:	e5803000 	str	r3, [r0]
   11130:	eb001b2d 	bl	17dec <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11134:	e1a00004 	mov	r0, r4
   11138:	e8bd8010 	pop	{r4, pc}
   1113c:	00040720 	.word	0x00040720

00011140 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   11140:	e92d4010 	push	{r4, lr}
   11144:	e1a04000 	mov	r4, r0
   11148:	e59f3018 	ldr	r3, [pc, #24]	; 11168 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
   1114c:	e5803000 	str	r3, [r0]
   11150:	eb001b25 	bl	17dec <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11154:	e1a00004 	mov	r0, r4
   11158:	e3a01f4d 	mov	r1, #308	; 0x134
   1115c:	eb0067d6 	bl	2b0bc <operator delete(void*, unsigned int)>
   11160:	e1a00004 	mov	r0, r4
   11164:	e8bd8010 	pop	{r4, pc}
   11168:	00040720 	.word	0x00040720

0001116c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   1116c:	e5d13000 	ldrb	r3, [r1]
   11170:	e3530030 	cmp	r3, #48	; 0x30
   11174:	1a00005e 	bne	112f4 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x188>
   11178:	e3a02000 	mov	r2, #0
   1117c:	e5d13003 	ldrb	r3, [r1, #3]
   11180:	e5802108 	str	r2, [r0, #264]	; 0x108
   11184:	e3130001 	tst	r3, #1
   11188:	13a02080 	movne	r2, #128	; 0x80
   1118c:	15802108 	strne	r2, [r0, #264]	; 0x108
   11190:	e3130002 	tst	r3, #2
   11194:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11198:	13822b01 	orrne	r2, r2, #1024	; 0x400
   1119c:	15802108 	strne	r2, [r0, #264]	; 0x108
   111a0:	e3130004 	tst	r3, #4
   111a4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   111a8:	13822c01 	orrne	r2, r2, #256	; 0x100
   111ac:	15802108 	strne	r2, [r0, #264]	; 0x108
   111b0:	e3130008 	tst	r3, #8
   111b4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   111b8:	13822c02 	orrne	r2, r2, #512	; 0x200
   111bc:	15802108 	strne	r2, [r0, #264]	; 0x108
   111c0:	e3130040 	tst	r3, #64	; 0x40
   111c4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   111c8:	13822040 	orrne	r2, r2, #64	; 0x40
   111cc:	15802108 	strne	r2, [r0, #264]	; 0x108
   111d0:	e3130080 	tst	r3, #128	; 0x80
   111d4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   111d8:	13833010 	orrne	r3, r3, #16
   111dc:	15803108 	strne	r3, [r0, #264]	; 0x108
   111e0:	e5d13004 	ldrb	r3, [r1, #4]
   111e4:	e3130001 	tst	r3, #1
   111e8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   111ec:	13822702 	orrne	r2, r2, #524288	; 0x80000
   111f0:	15802108 	strne	r2, [r0, #264]	; 0x108
   111f4:	e3130002 	tst	r3, #2
   111f8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   111fc:	13822601 	orrne	r2, r2, #1048576	; 0x100000
   11200:	15802108 	strne	r2, [r0, #264]	; 0x108
   11204:	e3130004 	tst	r3, #4
   11208:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1120c:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   11210:	15802108 	strne	r2, [r0, #264]	; 0x108
   11214:	e3130008 	tst	r3, #8
   11218:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1121c:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   11220:	15802108 	strne	r2, [r0, #264]	; 0x108
   11224:	e3130010 	tst	r3, #16
   11228:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1122c:	13822001 	orrne	r2, r2, #1
   11230:	15802108 	strne	r2, [r0, #264]	; 0x108
   11234:	e3130020 	tst	r3, #32
   11238:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1123c:	13833b02 	orrne	r3, r3, #2048	; 0x800
   11240:	15803108 	strne	r3, [r0, #264]	; 0x108
   11244:	e5d13005 	ldrb	r3, [r1, #5]
   11248:	e3130001 	tst	r3, #1
   1124c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11250:	13822802 	orrne	r2, r2, #131072	; 0x20000
   11254:	15802108 	strne	r2, [r0, #264]	; 0x108
   11258:	e3130002 	tst	r3, #2
   1125c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11260:	13822902 	orrne	r2, r2, #32768	; 0x8000
   11264:	15802108 	strne	r2, [r0, #264]	; 0x108
   11268:	e3130004 	tst	r3, #4
   1126c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11270:	13822801 	orrne	r2, r2, #65536	; 0x10000
   11274:	15802108 	strne	r2, [r0, #264]	; 0x108
   11278:	e3130008 	tst	r3, #8
   1127c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11280:	13822701 	orrne	r2, r2, #262144	; 0x40000
   11284:	15802108 	strne	r2, [r0, #264]	; 0x108
   11288:	e3130040 	tst	r3, #64	; 0x40
   1128c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11290:	13822020 	orrne	r2, r2, #32
   11294:	15802108 	strne	r2, [r0, #264]	; 0x108
   11298:	e3130080 	tst	r3, #128	; 0x80
   1129c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   112a0:	13833008 	orrne	r3, r3, #8
   112a4:	15803108 	strne	r3, [r0, #264]	; 0x108
   112a8:	e5d12007 	ldrb	r2, [r1, #7]
   112ac:	e5d13006 	ldrb	r3, [r1, #6]
   112b0:	e1833402 	orr	r3, r3, r2, lsl #8
   112b4:	e1a03243 	asr	r3, r3, #4
   112b8:	e6ef3073 	uxtb	r3, r3
   112bc:	e5803028 	str	r3, [r0, #40]	; 0x28
   112c0:	e5d13008 	ldrb	r3, [r1, #8]
   112c4:	e26330ff 	rsb	r3, r3, #255	; 0xff
   112c8:	e5803034 	str	r3, [r0, #52]	; 0x34
   112cc:	e5d13009 	ldrb	r3, [r1, #9]
   112d0:	e5d1200a 	ldrb	r2, [r1, #10]
   112d4:	e1833402 	orr	r3, r3, r2, lsl #8
   112d8:	e1a03243 	asr	r3, r3, #4
   112dc:	e6ef3073 	uxtb	r3, r3
   112e0:	e5803040 	str	r3, [r0, #64]	; 0x40
   112e4:	e5d1300b 	ldrb	r3, [r1, #11]
   112e8:	e26330ff 	rsb	r3, r3, #255	; 0xff
   112ec:	e580304c 	str	r3, [r0, #76]	; 0x4c
   112f0:	e12fff1e 	bx	lr
   112f4:	e92d4010 	push	{r4, lr}
   112f8:	e1a04001 	mov	r4, r1
   112fc:	e24dd008 	sub	sp, sp, #8
   11300:	eb005635 	bl	26bdc <CLogger::Get()>
   11304:	e5d42000 	ldrb	r2, [r4]
   11308:	e59f3014 	ldr	r3, [pc, #20]	; 11324 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1b8>
   1130c:	e58d2000 	str	r2, [sp]
   11310:	e59f1010 	ldr	r1, [pc, #16]	; 11328 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1bc>
   11314:	e3a02003 	mov	r2, #3
   11318:	eb00556c 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1131c:	e28dd008 	add	sp, sp, #8
   11320:	e8bd8010 	pop	{r4, pc}
   11324:	0004078c 	.word	0x0004078c
   11328:	00040764 	.word	0x00040764

0001132c <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   1132c:	e92d4070 	push	{r4, r5, r6, lr}
   11330:	e1a05000 	mov	r5, r0
   11334:	e1a06001 	mov	r6, r1
   11338:	e5d03131 	ldrb	r3, [r0, #305]	; 0x131
   1133c:	e24dd010 	sub	sp, sp, #16
   11340:	e59f4058 	ldr	r4, [pc, #88]	; 113a0 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x74>
   11344:	e2832001 	add	r2, r3, #1
   11348:	e28de004 	add	lr, sp, #4
   1134c:	e203c00f 	and	ip, r3, #15
   11350:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   11354:	e3a03000 	mov	r3, #0
   11358:	e8940007 	ldm	r4, {r0, r1, r2}
   1135c:	e88e0007 	stm	lr, {r0, r1, r2}
   11360:	e1a00005 	mov	r0, r5
   11364:	e1a0100e 	mov	r1, lr
   11368:	e3a0200c 	mov	r2, #12
   1136c:	e5cdc005 	strb	ip, [sp, #5]
   11370:	e5cd600f 	strb	r6, [sp, #15]
   11374:	eb00041e 	bl	123f4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11378:	e2505000 	subs	r5, r0, #0
   1137c:	1a000004 	bne	11394 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x68>
   11380:	eb005615 	bl	26bdc <CLogger::Get()>
   11384:	e2441010 	sub	r1, r4, #16
   11388:	e59f3014 	ldr	r3, [pc, #20]	; 113a4 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x78>
   1138c:	e3a02001 	mov	r2, #1
   11390:	eb00554e 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11394:	e1a00005 	mov	r0, r5
   11398:	e28dd010 	add	sp, sp, #16
   1139c:	e8bd8070 	pop	{r4, r5, r6, pc}
   113a0:	00040774 	.word	0x00040774
   113a4:	000407a8 	.word	0x000407a8

000113a8 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   113a8:	e92d4010 	push	{r4, lr}
   113ac:	e1a0e001 	mov	lr, r1
   113b0:	e24dd010 	sub	sp, sp, #16
   113b4:	e59f20cc 	ldr	r2, [pc, #204]	; 11488 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe0>
   113b8:	e28d3004 	add	r3, sp, #4
   113bc:	e1a0c000 	mov	ip, r0
   113c0:	e8920007 	ldm	r2, {r0, r1, r2}
   113c4:	e8a30003 	stmia	r3!, {r0, r1}
   113c8:	e35e0001 	cmp	lr, #1
   113cc:	e1c320b0 	strh	r2, [r3]
   113d0:	0a000023 	beq	11464 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xbc>
   113d4:	3a000007 	bcc	113f8 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   113d8:	e35e0002 	cmp	lr, #2
   113dc:	1a00001c 	bne	11454 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xac>
   113e0:	e3a01020 	mov	r1, #32
   113e4:	e3a02062 	mov	r2, #98	; 0x62
   113e8:	e3e03000 	mvn	r3, #0
   113ec:	e5cd1007 	strb	r1, [sp, #7]
   113f0:	e5cd2008 	strb	r2, [sp, #8]
   113f4:	e5cd3009 	strb	r3, [sp, #9]
   113f8:	e5dc3131 	ldrb	r3, [ip, #305]	; 0x131
   113fc:	e1a0000c 	mov	r0, ip
   11400:	e2832001 	add	r2, r3, #1
   11404:	e5cc2131 	strb	r2, [ip, #305]	; 0x131
   11408:	e28d1004 	add	r1, sp, #4
   1140c:	e203c00f 	and	ip, r3, #15
   11410:	e3a0200a 	mov	r2, #10
   11414:	e3a03000 	mov	r3, #0
   11418:	e5cdc005 	strb	ip, [sp, #5]
   1141c:	eb0003f4 	bl	123f4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11420:	e2504000 	subs	r4, r0, #0
   11424:	0a000002 	beq	11434 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   11428:	e1a00004 	mov	r0, r4
   1142c:	e28dd010 	add	sp, sp, #16
   11430:	e8bd8010 	pop	{r4, pc}
   11434:	eb0055e8 	bl	26bdc <CLogger::Get()>
   11438:	e59f304c 	ldr	r3, [pc, #76]	; 1148c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe4>
   1143c:	e3a02001 	mov	r2, #1
   11440:	e59f1048 	ldr	r1, [pc, #72]	; 11490 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe8>
   11444:	eb005521 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11448:	e1a00004 	mov	r0, r4
   1144c:	e28dd010 	add	sp, sp, #16
   11450:	e8bd8010 	pop	{r4, pc}
   11454:	e3a04001 	mov	r4, #1
   11458:	e1a00004 	mov	r0, r4
   1145c:	e28dd010 	add	sp, sp, #16
   11460:	e8bd8010 	pop	{r4, pc}
   11464:	e3e00067 	mvn	r0, #103	; 0x67
   11468:	e3a01020 	mov	r1, #32
   1146c:	e3a02062 	mov	r2, #98	; 0x62
   11470:	e3e03000 	mvn	r3, #0
   11474:	e5cd000a 	strb	r0, [sp, #10]
   11478:	e5cd100b 	strb	r1, [sp, #11]
   1147c:	e5cd200c 	strb	r2, [sp, #12]
   11480:	e5cd300d 	strb	r3, [sp, #13]
   11484:	eaffffdb 	b	113f8 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   11488:	00040780 	.word	0x00040780
   1148c:	000407bc 	.word	0x000407bc
   11490:	00040764 	.word	0x00040764

00011494 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   11494:	e92d4010 	push	{r4, lr}
   11498:	e1a04000 	mov	r4, r0
   1149c:	eb001a40 	bl	17da4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   114a0:	e3a03000 	mov	r3, #0
   114a4:	e59f2024 	ldr	r2, [pc, #36]	; 114d0 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
   114a8:	e1a00004 	mov	r0, r4
   114ac:	e5842000 	str	r2, [r4]
   114b0:	e3a01003 	mov	r1, #3
   114b4:	e1a02003 	mov	r2, r3
   114b8:	ebfff93b 	bl	f9ac <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   114bc:	e3a03000 	mov	r3, #0
   114c0:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   114c4:	e5c43131 	strb	r3, [r4, #305]	; 0x131
   114c8:	e1a00004 	mov	r0, r4
   114cc:	e8bd8010 	pop	{r4, pc}
   114d0:	00040720 	.word	0x00040720

000114d4 <CUSBGamePadSwitchProDevice::Configure()>:
   114d4:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   114d8:	e28db01c 	add	fp, sp, #28
   114dc:	e24dd010 	sub	sp, sp, #16
   114e0:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   114e4:	e3550000 	cmp	r5, #0
   114e8:	0a00003e 	beq	115e8 <CUSBGamePadSwitchProDevice::Configure()+0x114>
   114ec:	e3a03040 	mov	r3, #64	; 0x40
   114f0:	e2807f4a 	add	r7, r0, #296	; 0x128
   114f4:	e1c730b0 	strh	r3, [r7]
   114f8:	e1a04000 	mov	r4, r0
   114fc:	eb0019fd 	bl	17cf8 <CUSBGamePadDevice::Configure()>
   11500:	e2505000 	subs	r5, r0, #0
   11504:	0a00003c 	beq	115fc <CUSBGamePadSwitchProDevice::Configure()+0x128>
   11508:	e3a03012 	mov	r3, #18
   1150c:	e3a06000 	mov	r6, #0
   11510:	e3a000ff 	mov	r0, #255	; 0xff
   11514:	e3a0c004 	mov	ip, #4
   11518:	e1d720b0 	ldrh	r2, [r7]
   1151c:	e5843104 	str	r3, [r4, #260]	; 0x104
   11520:	e2823007 	add	r3, r2, #7
   11524:	e3c33007 	bic	r3, r3, #7
   11528:	e04dd003 	sub	sp, sp, r3
   1152c:	e1a0100d 	mov	r1, sp
   11530:	e1a03006 	mov	r3, r6
   11534:	e584c024 	str	ip, [r4, #36]	; 0x24
   11538:	e5840030 	str	r0, [r4, #48]	; 0x30
   1153c:	e584003c 	str	r0, [r4, #60]	; 0x3c
   11540:	e5840048 	str	r0, [r4, #72]	; 0x48
   11544:	e5840054 	str	r0, [r4, #84]	; 0x54
   11548:	e58460e8 	str	r6, [r4, #232]	; 0xe8
   1154c:	e584602c 	str	r6, [r4, #44]	; 0x2c
   11550:	e5846038 	str	r6, [r4, #56]	; 0x38
   11554:	e5846044 	str	r6, [r4, #68]	; 0x44
   11558:	e5846050 	str	r6, [r4, #80]	; 0x50
   1155c:	e1a00004 	mov	r0, r4
   11560:	eb000400 	bl	12568 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   11564:	e3e0807f 	mvn	r8, #127	; 0x7f
   11568:	e3a0c003 	mov	ip, #3
   1156c:	e1a03006 	mov	r3, r6
   11570:	e3a02002 	mov	r2, #2
   11574:	e24b1028 	sub	r1, fp, #40	; 0x28
   11578:	e1a00004 	mov	r0, r4
   1157c:	e54b8028 	strb	r8, [fp, #-40]	; 0xffffffd8
   11580:	e54bc027 	strb	ip, [fp, #-39]	; 0xffffffd9
   11584:	eb00039a 	bl	123f4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11588:	e2505000 	subs	r5, r0, #0
   1158c:	0a000022 	beq	1161c <CUSBGamePadSwitchProDevice::Configure()+0x148>
   11590:	e1a03006 	mov	r3, r6
   11594:	e1d720b0 	ldrh	r2, [r7]
   11598:	e1a0100d 	mov	r1, sp
   1159c:	e1a00004 	mov	r0, r4
   115a0:	eb0003f0 	bl	12568 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   115a4:	e3500000 	cmp	r0, #0
   115a8:	da000041 	ble	116b4 <CUSBGamePadSwitchProDevice::Configure()+0x1e0>
   115ac:	e5dd3000 	ldrb	r3, [sp]
   115b0:	e3530081 	cmp	r3, #129	; 0x81
   115b4:	1a000002 	bne	115c4 <CUSBGamePadSwitchProDevice::Configure()+0xf0>
   115b8:	e5dd3001 	ldrb	r3, [sp, #1]
   115bc:	e3530003 	cmp	r3, #3
   115c0:	0a00001d 	beq	1163c <CUSBGamePadSwitchProDevice::Configure()+0x168>
   115c4:	eb005584 	bl	26bdc <CLogger::Get()>
   115c8:	e59f31d0 	ldr	r3, [pc, #464]	; 117a0 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   115cc:	e3a02001 	mov	r2, #1
   115d0:	e59f11cc 	ldr	r1, [pc, #460]	; 117a4 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   115d4:	eb0054bd 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   115d8:	e3a05000 	mov	r5, #0
   115dc:	e1a00005 	mov	r0, r5
   115e0:	e24bd01c 	sub	sp, fp, #28
   115e4:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   115e8:	e59f11b4 	ldr	r1, [pc, #436]	; 117a4 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   115ec:	ebfff8db 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   115f0:	e1a00005 	mov	r0, r5
   115f4:	e24bd01c 	sub	sp, fp, #28
   115f8:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   115fc:	eb005576 	bl	26bdc <CLogger::Get()>
   11600:	e59f31a0 	ldr	r3, [pc, #416]	; 117a8 <CUSBGamePadSwitchProDevice::Configure()+0x2d4>
   11604:	e3a02001 	mov	r2, #1
   11608:	e59f1194 	ldr	r1, [pc, #404]	; 117a4 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   1160c:	eb0054af 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11610:	e1a00005 	mov	r0, r5
   11614:	e24bd01c 	sub	sp, fp, #28
   11618:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1161c:	eb00556e 	bl	26bdc <CLogger::Get()>
   11620:	e59f3178 	ldr	r3, [pc, #376]	; 117a0 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   11624:	e3a02001 	mov	r2, #1
   11628:	e59f1174 	ldr	r1, [pc, #372]	; 117a4 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   1162c:	eb0054a7 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11630:	e1a00005 	mov	r0, r5
   11634:	e24bd01c 	sub	sp, fp, #28
   11638:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1163c:	e3a0c002 	mov	ip, #2
   11640:	e1a03006 	mov	r3, r6
   11644:	e1a0200c 	mov	r2, ip
   11648:	e24b1024 	sub	r1, fp, #36	; 0x24
   1164c:	e1a00004 	mov	r0, r4
   11650:	e54b8024 	strb	r8, [fp, #-36]	; 0xffffffdc
   11654:	e54bc023 	strb	ip, [fp, #-35]	; 0xffffffdd
   11658:	eb000365 	bl	123f4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1165c:	e2505000 	subs	r5, r0, #0
   11660:	0a00001a 	beq	116d0 <CUSBGamePadSwitchProDevice::Configure()+0x1fc>
   11664:	e1a03006 	mov	r3, r6
   11668:	e1d720b0 	ldrh	r2, [r7]
   1166c:	e1a0100d 	mov	r1, sp
   11670:	e1a00004 	mov	r0, r4
   11674:	eb0003bb 	bl	12568 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   11678:	e3500000 	cmp	r0, #0
   1167c:	da000034 	ble	11754 <CUSBGamePadSwitchProDevice::Configure()+0x280>
   11680:	e5dd3000 	ldrb	r3, [sp]
   11684:	e3530081 	cmp	r3, #129	; 0x81
   11688:	1a000002 	bne	11698 <CUSBGamePadSwitchProDevice::Configure()+0x1c4>
   1168c:	e5dd3001 	ldrb	r3, [sp, #1]
   11690:	e3530002 	cmp	r3, #2
   11694:	0a000013 	beq	116e8 <CUSBGamePadSwitchProDevice::Configure()+0x214>
   11698:	eb00554f 	bl	26bdc <CLogger::Get()>
   1169c:	e59f3108 	ldr	r3, [pc, #264]	; 117ac <CUSBGamePadSwitchProDevice::Configure()+0x2d8>
   116a0:	e3a02001 	mov	r2, #1
   116a4:	e59f10f8 	ldr	r1, [pc, #248]	; 117a4 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   116a8:	eb005488 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   116ac:	e3a05000 	mov	r5, #0
   116b0:	eaffffc9 	b	115dc <CUSBGamePadSwitchProDevice::Configure()+0x108>
   116b4:	eb005548 	bl	26bdc <CLogger::Get()>
   116b8:	e59f30f0 	ldr	r3, [pc, #240]	; 117b0 <CUSBGamePadSwitchProDevice::Configure()+0x2dc>
   116bc:	e3a02001 	mov	r2, #1
   116c0:	e59f10dc 	ldr	r1, [pc, #220]	; 117a4 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   116c4:	e1a05006 	mov	r5, r6
   116c8:	eb005480 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   116cc:	eaffffc2 	b	115dc <CUSBGamePadSwitchProDevice::Configure()+0x108>
   116d0:	eb005541 	bl	26bdc <CLogger::Get()>
   116d4:	e59f30d0 	ldr	r3, [pc, #208]	; 117ac <CUSBGamePadSwitchProDevice::Configure()+0x2d8>
   116d8:	e3a02001 	mov	r2, #1
   116dc:	e59f10c0 	ldr	r1, [pc, #192]	; 117a4 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   116e0:	eb00547a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   116e4:	eaffffbc 	b	115dc <CUSBGamePadSwitchProDevice::Configure()+0x108>
   116e8:	e3e0e07f 	mvn	lr, #127	; 0x7f
   116ec:	e3a0c004 	mov	ip, #4
   116f0:	e3a03000 	mov	r3, #0
   116f4:	e3a02002 	mov	r2, #2
   116f8:	e24b1020 	sub	r1, fp, #32
   116fc:	e1a00004 	mov	r0, r4
   11700:	e54be020 	strb	lr, [fp, #-32]	; 0xffffffe0
   11704:	e54bc01f 	strb	ip, [fp, #-31]	; 0xffffffe1
   11708:	eb000339 	bl	123f4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1170c:	e2505000 	subs	r5, r0, #0
   11710:	0a000016 	beq	11770 <CUSBGamePadSwitchProDevice::Configure()+0x29c>
   11714:	e5943000 	ldr	r3, [r4]
   11718:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   1171c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   11720:	e1a00004 	mov	r0, r4
   11724:	e12fff33 	blx	r3
   11728:	e1d720b0 	ldrh	r2, [r7]
   1172c:	e1a0100d 	mov	r1, sp
   11730:	e3a03000 	mov	r3, #0
   11734:	e1a00004 	mov	r0, r4
   11738:	eb00038a 	bl	12568 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   1173c:	e3500000 	cmp	r0, #0
   11740:	da000010 	ble	11788 <CUSBGamePadSwitchProDevice::Configure()+0x2b4>
   11744:	e1a00004 	mov	r0, r4
   11748:	eb0003b3 	bl	1261c <CUSBHIDDevice::StartRequest()>
   1174c:	e1a05000 	mov	r5, r0
   11750:	eaffffa1 	b	115dc <CUSBGamePadSwitchProDevice::Configure()+0x108>
   11754:	eb005520 	bl	26bdc <CLogger::Get()>
   11758:	e59f3054 	ldr	r3, [pc, #84]	; 117b4 <CUSBGamePadSwitchProDevice::Configure()+0x2e0>
   1175c:	e3a02001 	mov	r2, #1
   11760:	e59f103c 	ldr	r1, [pc, #60]	; 117a4 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   11764:	e1a05006 	mov	r5, r6
   11768:	eb005458 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1176c:	eaffff9a 	b	115dc <CUSBGamePadSwitchProDevice::Configure()+0x108>
   11770:	eb005519 	bl	26bdc <CLogger::Get()>
   11774:	e59f303c 	ldr	r3, [pc, #60]	; 117b8 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   11778:	e3a02001 	mov	r2, #1
   1177c:	e59f1020 	ldr	r1, [pc, #32]	; 117a4 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   11780:	eb005452 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11784:	eaffff94 	b	115dc <CUSBGamePadSwitchProDevice::Configure()+0x108>
   11788:	eb005513 	bl	26bdc <CLogger::Get()>
   1178c:	e59f3028 	ldr	r3, [pc, #40]	; 117bc <CUSBGamePadSwitchProDevice::Configure()+0x2e8>
   11790:	e3a02001 	mov	r2, #1
   11794:	e59f1008 	ldr	r1, [pc, #8]	; 117a4 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   11798:	eb00544c 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1179c:	eaffffe8 	b	11744 <CUSBGamePadSwitchProDevice::Configure()+0x270>
   117a0:	000407d4 	.word	0x000407d4
   117a4:	00040764 	.word	0x00040764
   117a8:	00040524 	.word	0x00040524
   117ac:	00040814 	.word	0x00040814
   117b0:	000407f4 	.word	0x000407f4
   117b4:	00040830 	.word	0x00040830
   117b8:	0004084c 	.word	0x0004084c
   117bc:	0004086c 	.word	0x0004086c

000117c0 <CUSBGamePadSwitchProDevice::GetProperties()>:
   117c0:	e3a0004b 	mov	r0, #75	; 0x4b
   117c4:	e12fff1e 	bx	lr

000117c8 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   117c8:	e92d4010 	push	{r4, lr}
   117cc:	e1a04000 	mov	r4, r0
   117d0:	e59f300c 	ldr	r3, [pc, #12]	; 117e4 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   117d4:	e5803000 	str	r3, [r0]
   117d8:	eb001983 	bl	17dec <CUSBGamePadDevice::~CUSBGamePadDevice()>
   117dc:	e1a00004 	mov	r0, r4
   117e0:	e8bd8010 	pop	{r4, pc}
   117e4:	00040890 	.word	0x00040890

000117e8 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   117e8:	e92d4010 	push	{r4, lr}
   117ec:	e1a04000 	mov	r4, r0
   117f0:	e59f3018 	ldr	r3, [pc, #24]	; 11810 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   117f4:	e5803000 	str	r3, [r0]
   117f8:	eb00197b 	bl	17dec <CUSBGamePadDevice::~CUSBGamePadDevice()>
   117fc:	e1a00004 	mov	r0, r4
   11800:	e3a01e13 	mov	r1, #304	; 0x130
   11804:	eb00662c 	bl	2b0bc <operator delete(void*, unsigned int)>
   11808:	e1a00004 	mov	r0, r4
   1180c:	e8bd8010 	pop	{r4, pc}
   11810:	00040890 	.word	0x00040890

00011814 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   11814:	e3510000 	cmp	r1, #0
   11818:	e92d4010 	push	{r4, lr}
   1181c:	0a00003b 	beq	11910 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xfc>
   11820:	e5d13000 	ldrb	r3, [r1]
   11824:	e5d12001 	ldrb	r2, [r1, #1]
   11828:	e1833402 	orr	r3, r3, r2, lsl #8
   1182c:	e3530b05 	cmp	r3, #5120	; 0x1400
   11830:	1a00003a 	bne	11920 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x10c>
   11834:	e3a0e000 	mov	lr, #0
   11838:	e5d1c003 	ldrb	ip, [r1, #3]
   1183c:	e5d12002 	ldrb	r2, [r1, #2]
   11840:	e59f30e8 	ldr	r3, [pc, #232]	; 11930 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x11c>
   11844:	e182240c 	orr	r2, r2, ip, lsl #8
   11848:	e580e108 	str	lr, [r0, #264]	; 0x108
   1184c:	e283c040 	add	ip, r3, #64	; 0x40
   11850:	e3120001 	tst	r2, #1
   11854:	15934000 	ldrne	r4, [r3]
   11858:	1590e108 	ldrne	lr, [r0, #264]	; 0x108
   1185c:	e2833004 	add	r3, r3, #4
   11860:	118ee004 	orrne	lr, lr, r4
   11864:	1580e108 	strne	lr, [r0, #264]	; 0x108
   11868:	e15c0003 	cmp	ip, r3
   1186c:	e1a020a2 	lsr	r2, r2, #1
   11870:	1afffff6 	bne	11850 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x3c>
   11874:	e3a0e000 	mov	lr, #0
   11878:	e1a0200e 	mov	r2, lr
   1187c:	e5d13006 	ldrb	r3, [r1, #6]
   11880:	e5d14007 	ldrb	r4, [r1, #7]
   11884:	e1833404 	orr	r3, r3, r4, lsl #8
   11888:	e6bf3073 	sxth	r3, r3
   1188c:	e2833902 	add	r3, r3, #32768	; 0x8000
   11890:	e1a03423 	lsr	r3, r3, #8
   11894:	e0822082 	add	r2, r2, r2, lsl #1
   11898:	e28ee001 	add	lr, lr, #1
   1189c:	e0802102 	add	r2, r0, r2, lsl #2
   118a0:	e35e0004 	cmp	lr, #4
   118a4:	e5823028 	str	r3, [r2, #40]	; 0x28
   118a8:	0a00000b 	beq	118dc <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xc8>
   118ac:	e081208e 	add	r2, r1, lr, lsl #1
   118b0:	e5d24007 	ldrb	r4, [r2, #7]
   118b4:	e5d23006 	ldrb	r3, [r2, #6]
   118b8:	e79c210e 	ldr	r2, [ip, lr, lsl #2]
   118bc:	e1833404 	orr	r3, r3, r4, lsl #8
   118c0:	e6bf3073 	sxth	r3, r3
   118c4:	e3c24002 	bic	r4, r2, #2
   118c8:	e2833902 	add	r3, r3, #32768	; 0x8000
   118cc:	e3540001 	cmp	r4, #1
   118d0:	e1a03423 	lsr	r3, r3, #8
   118d4:	026330ff 	rsbeq	r3, r3, #255	; 0xff
   118d8:	eaffffed 	b	11894 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x80>
   118dc:	e5d13004 	ldrb	r3, [r1, #4]
   118e0:	e353007f 	cmp	r3, #127	; 0x7f
   118e4:	e5803058 	str	r3, [r0, #88]	; 0x58
   118e8:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   118ec:	c3833008 	orrgt	r3, r3, #8
   118f0:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   118f4:	e5d13005 	ldrb	r3, [r1, #5]
   118f8:	e353007f 	cmp	r3, #127	; 0x7f
   118fc:	e5803064 	str	r3, [r0, #100]	; 0x64
   11900:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   11904:	c3833010 	orrgt	r3, r3, #16
   11908:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   1190c:	e8bd8010 	pop	{r4, pc}
   11910:	e3a02077 	mov	r2, #119	; 0x77
   11914:	e59f1018 	ldr	r1, [pc, #24]	; 11934 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x120>
   11918:	e59f0018 	ldr	r0, [pc, #24]	; 11938 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x124>
   1191c:	eb004bbb 	bl	24810 <assertion_failed>
   11920:	e3a02078 	mov	r2, #120	; 0x78
   11924:	e59f1008 	ldr	r1, [pc, #8]	; 11934 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x120>
   11928:	e59f000c 	ldr	r0, [pc, #12]	; 1193c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x128>
   1192c:	eb004bb7 	bl	24810 <assertion_failed>
   11930:	000408d4 	.word	0x000408d4
   11934:	00040944 	.word	0x00040944
   11938:	00040580 	.word	0x00040580
   1193c:	0004095c 	.word	0x0004095c

00011940 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   11940:	e2913000 	adds	r3, r1, #0
   11944:	13a03001 	movne	r3, #1
   11948:	e352000e 	cmp	r2, #14
   1194c:	13a03000 	movne	r3, #0
   11950:	e2532000 	subs	r2, r3, #0
   11954:	012fff1e 	bxeq	lr
   11958:	e5d1c000 	ldrb	ip, [r1]
   1195c:	e35c0000 	cmp	ip, #0
   11960:	112fff1e 	bxne	lr
   11964:	e5d13001 	ldrb	r3, [r1, #1]
   11968:	e3530014 	cmp	r3, #20
   1196c:	112fff1e 	bxne	lr
   11970:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   11974:	e92d4070 	push	{r4, r5, r6, lr}
   11978:	e3530000 	cmp	r3, #0
   1197c:	e1a04000 	mov	r4, r0
   11980:	08bd8070 	popeq	{r4, r5, r6, pc}
   11984:	e1a05000 	mov	r5, r0
   11988:	e4953024 	ldr	r3, [r5], #36	; 0x24
   1198c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11990:	e12fff33 	blx	r3
   11994:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   11998:	e1a01005 	mov	r1, r5
   1199c:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   119a0:	e2400001 	sub	r0, r0, #1
   119a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   119a8:	e12fff13 	bx	r3

000119ac <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   119ac:	e3510004 	cmp	r1, #4
   119b0:	9a000001 	bls	119bc <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x10>
   119b4:	e3a00000 	mov	r0, #0
   119b8:	e12fff1e 	bx	lr
   119bc:	e3a0c003 	mov	ip, #3
   119c0:	e92d4010 	push	{r4, lr}
   119c4:	e3a0e001 	mov	lr, #1
   119c8:	e59f302c 	ldr	r3, [pc, #44]	; 119fc <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x50>
   119cc:	e24dd008 	sub	sp, sp, #8
   119d0:	e0831001 	add	r1, r3, r1
   119d4:	e5d140a4 	ldrb	r4, [r1, #164]	; 0xa4
   119d8:	e1a0200c 	mov	r2, ip
   119dc:	e3a03000 	mov	r3, #0
   119e0:	e28d1004 	add	r1, sp, #4
   119e4:	e5cd4006 	strb	r4, [sp, #6]
   119e8:	e5cdc005 	strb	ip, [sp, #5]
   119ec:	e5cde004 	strb	lr, [sp, #4]
   119f0:	eb00027f 	bl	123f4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   119f4:	e28dd008 	add	sp, sp, #8
   119f8:	e8bd8010 	pop	{r4, pc}
   119fc:	00040888 	.word	0x00040888

00011a00 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   11a00:	e92d4030 	push	{r4, r5, lr}
   11a04:	e24dd00c 	sub	sp, sp, #12
   11a08:	e1a04001 	mov	r4, r1
   11a0c:	e1a05000 	mov	r5, r0
   11a10:	e3a02008 	mov	r2, #8
   11a14:	e1a0000d 	mov	r0, sp
   11a18:	e3a01000 	mov	r1, #0
   11a1c:	eb006148 	bl	29f44 <memset>
   11a20:	e3a03008 	mov	r3, #8
   11a24:	e3540001 	cmp	r4, #1
   11a28:	e5cd3001 	strb	r3, [sp, #1]
   11a2c:	0a00000f 	beq	11a70 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x70>
   11a30:	3a000003 	bcc	11a44 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   11a34:	e3540002 	cmp	r4, #2
   11a38:	1a000008 	bne	11a60 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
   11a3c:	e3e03000 	mvn	r3, #0
   11a40:	e5cd3003 	strb	r3, [sp, #3]
   11a44:	e1a0100d 	mov	r1, sp
   11a48:	e1a00005 	mov	r0, r5
   11a4c:	e3a03000 	mov	r3, #0
   11a50:	e3a02008 	mov	r2, #8
   11a54:	eb000266 	bl	123f4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11a58:	e28dd00c 	add	sp, sp, #12
   11a5c:	e8bd8030 	pop	{r4, r5, pc}
   11a60:	e3a020e5 	mov	r2, #229	; 0xe5
   11a64:	e59f1010 	ldr	r1, [pc, #16]	; 11a7c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   11a68:	e59f0010 	ldr	r0, [pc, #16]	; 11a80 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x80>
   11a6c:	eb004b67 	bl	24810 <assertion_failed>
   11a70:	e3e03000 	mvn	r3, #0
   11a74:	e5cd3004 	strb	r3, [sp, #4]
   11a78:	eafffff1 	b	11a44 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   11a7c:	00040944 	.word	0x00040944
   11a80:	0003fe24 	.word	0x0003fe24

00011a84 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   11a84:	e92d4010 	push	{r4, lr}
   11a88:	e1a04000 	mov	r4, r0
   11a8c:	eb0018c4 	bl	17da4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11a90:	e59f3008 	ldr	r3, [pc, #8]	; 11aa0 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   11a94:	e1a00004 	mov	r0, r4
   11a98:	e5843000 	str	r3, [r4]
   11a9c:	e8bd8010 	pop	{r4, pc}
   11aa0:	00040890 	.word	0x00040890

00011aa4 <CUSBGamePadXbox360Device::Configure()>:
   11aa4:	e3a0200e 	mov	r2, #14
   11aa8:	e2803f4a 	add	r3, r0, #296	; 0x128
   11aac:	e92d4070 	push	{r4, r5, r6, lr}
   11ab0:	e1c320b0 	strh	r2, [r3]
   11ab4:	e1a04000 	mov	r4, r0
   11ab8:	eb00188e 	bl	17cf8 <CUSBGamePadDevice::Configure()>
   11abc:	e2505000 	subs	r5, r0, #0
   11ac0:	0a00001e 	beq	11b40 <CUSBGamePadXbox360Device::Configure()+0x9c>
   11ac4:	e3a03000 	mov	r3, #0
   11ac8:	e3a020ff 	mov	r2, #255	; 0xff
   11acc:	e3a0c012 	mov	ip, #18
   11ad0:	e3a00006 	mov	r0, #6
   11ad4:	e5941000 	ldr	r1, [r4]
   11ad8:	e5840024 	str	r0, [r4, #36]	; 0x24
   11adc:	e584302c 	str	r3, [r4, #44]	; 0x2c
   11ae0:	e5843038 	str	r3, [r4, #56]	; 0x38
   11ae4:	e5843044 	str	r3, [r4, #68]	; 0x44
   11ae8:	e5843050 	str	r3, [r4, #80]	; 0x50
   11aec:	e584305c 	str	r3, [r4, #92]	; 0x5c
   11af0:	e5843068 	str	r3, [r4, #104]	; 0x68
   11af4:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   11af8:	e584c104 	str	ip, [r4, #260]	; 0x104
   11afc:	e5913034 	ldr	r3, [r1, #52]	; 0x34
   11b00:	e5842030 	str	r2, [r4, #48]	; 0x30
   11b04:	e584203c 	str	r2, [r4, #60]	; 0x3c
   11b08:	e5842048 	str	r2, [r4, #72]	; 0x48
   11b0c:	e5842054 	str	r2, [r4, #84]	; 0x54
   11b10:	e5842060 	str	r2, [r4, #96]	; 0x60
   11b14:	e584206c 	str	r2, [r4, #108]	; 0x6c
   11b18:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   11b1c:	e1a00004 	mov	r0, r4
   11b20:	e12fff33 	blx	r3
   11b24:	e2505000 	subs	r5, r0, #0
   11b28:	1a000001 	bne	11b34 <CUSBGamePadXbox360Device::Configure()+0x90>
   11b2c:	e1a00005 	mov	r0, r5
   11b30:	e8bd8070 	pop	{r4, r5, r6, pc}
   11b34:	e1a00004 	mov	r0, r4
   11b38:	e8bd4070 	pop	{r4, r5, r6, lr}
   11b3c:	ea0002b6 	b	1261c <CUSBHIDDevice::StartRequest()>
   11b40:	eb005425 	bl	26bdc <CLogger::Get()>
   11b44:	e59f3010 	ldr	r3, [pc, #16]	; 11b5c <CUSBGamePadXbox360Device::Configure()+0xb8>
   11b48:	e3a02001 	mov	r2, #1
   11b4c:	e59f100c 	ldr	r1, [pc, #12]	; 11b60 <CUSBGamePadXbox360Device::Configure()+0xbc>
   11b50:	eb00535e 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11b54:	e1a00005 	mov	r0, r5
   11b58:	e8bd8070 	pop	{r4, r5, r6, pc}
   11b5c:	00040524 	.word	0x00040524
   11b60:	00040934 	.word	0x00040934

00011b64 <CUSBGamePadXbox360Device::GetProperties()>:
   11b64:	e3a0000b 	mov	r0, #11
   11b68:	e12fff1e 	bx	lr

00011b6c <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   11b6c:	e3a02000 	mov	r2, #0
   11b70:	e5d13004 	ldrb	r3, [r1, #4]
   11b74:	e5802108 	str	r2, [r0, #264]	; 0x108
   11b78:	e3130004 	tst	r3, #4
   11b7c:	13a02901 	movne	r2, #16384	; 0x4000
   11b80:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b84:	e3130008 	tst	r3, #8
   11b88:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b8c:	13822b02 	orrne	r2, r2, #2048	; 0x800
   11b90:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b94:	e3130010 	tst	r3, #16
   11b98:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b9c:	13822c02 	orrne	r2, r2, #512	; 0x200
   11ba0:	15802108 	strne	r2, [r0, #264]	; 0x108
   11ba4:	e3130020 	tst	r3, #32
   11ba8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11bac:	13822c01 	orrne	r2, r2, #256	; 0x100
   11bb0:	15802108 	strne	r2, [r0, #264]	; 0x108
   11bb4:	e3130040 	tst	r3, #64	; 0x40
   11bb8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11bbc:	13822b01 	orrne	r2, r2, #1024	; 0x400
   11bc0:	15802108 	strne	r2, [r0, #264]	; 0x108
   11bc4:	e1b033a3 	lsrs	r3, r3, #7
   11bc8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11bcc:	13833080 	orrne	r3, r3, #128	; 0x80
   11bd0:	15803108 	strne	r3, [r0, #264]	; 0x108
   11bd4:	e5d13005 	ldrb	r3, [r1, #5]
   11bd8:	e3130001 	tst	r3, #1
   11bdc:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11be0:	13822902 	orrne	r2, r2, #32768	; 0x8000
   11be4:	15802108 	strne	r2, [r0, #264]	; 0x108
   11be8:	e3130002 	tst	r3, #2
   11bec:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11bf0:	13822802 	orrne	r2, r2, #131072	; 0x20000
   11bf4:	15802108 	strne	r2, [r0, #264]	; 0x108
   11bf8:	e3130004 	tst	r3, #4
   11bfc:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11c00:	13822701 	orrne	r2, r2, #262144	; 0x40000
   11c04:	15802108 	strne	r2, [r0, #264]	; 0x108
   11c08:	e3130008 	tst	r3, #8
   11c0c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11c10:	13822801 	orrne	r2, r2, #65536	; 0x10000
   11c14:	15802108 	strne	r2, [r0, #264]	; 0x108
   11c18:	e3130010 	tst	r3, #16
   11c1c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11c20:	13822020 	orrne	r2, r2, #32
   11c24:	15802108 	strne	r2, [r0, #264]	; 0x108
   11c28:	e3130020 	tst	r3, #32
   11c2c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11c30:	13822040 	orrne	r2, r2, #64	; 0x40
   11c34:	15802108 	strne	r2, [r0, #264]	; 0x108
   11c38:	e3130040 	tst	r3, #64	; 0x40
   11c3c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11c40:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   11c44:	15802108 	strne	r2, [r0, #264]	; 0x108
   11c48:	e1b033a3 	lsrs	r3, r3, #7
   11c4c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11c50:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   11c54:	15803108 	strne	r3, [r0, #264]	; 0x108
   11c58:	e5d12007 	ldrb	r2, [r1, #7]
   11c5c:	e5d13006 	ldrb	r3, [r1, #6]
   11c60:	e1833402 	orr	r3, r3, r2, lsl #8
   11c64:	e1a03143 	asr	r3, r3, #2
   11c68:	e353007f 	cmp	r3, #127	; 0x7f
   11c6c:	e5803058 	str	r3, [r0, #88]	; 0x58
   11c70:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   11c74:	c3833008 	orrgt	r3, r3, #8
   11c78:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   11c7c:	e5d12009 	ldrb	r2, [r1, #9]
   11c80:	e5d13008 	ldrb	r3, [r1, #8]
   11c84:	e1833402 	orr	r3, r3, r2, lsl #8
   11c88:	e1a03143 	asr	r3, r3, #2
   11c8c:	e353007f 	cmp	r3, #127	; 0x7f
   11c90:	e5803064 	str	r3, [r0, #100]	; 0x64
   11c94:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   11c98:	c3833010 	orrgt	r3, r3, #16
   11c9c:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   11ca0:	e5d1200b 	ldrb	r2, [r1, #11]
   11ca4:	e5d1300a 	ldrb	r3, [r1, #10]
   11ca8:	e1833402 	orr	r3, r3, r2, lsl #8
   11cac:	e6bf3073 	sxth	r3, r3
   11cb0:	e2833902 	add	r3, r3, #32768	; 0x8000
   11cb4:	e1a03423 	lsr	r3, r3, #8
   11cb8:	e5803028 	str	r3, [r0, #40]	; 0x28
   11cbc:	e5d1200d 	ldrb	r2, [r1, #13]
   11cc0:	e5d1300c 	ldrb	r3, [r1, #12]
   11cc4:	e1833402 	orr	r3, r3, r2, lsl #8
   11cc8:	e6bf3073 	sxth	r3, r3
   11ccc:	e2833902 	add	r3, r3, #32768	; 0x8000
   11cd0:	e1a03423 	lsr	r3, r3, #8
   11cd4:	e26330ff 	rsb	r3, r3, #255	; 0xff
   11cd8:	e5803034 	str	r3, [r0, #52]	; 0x34
   11cdc:	e5d1200f 	ldrb	r2, [r1, #15]
   11ce0:	e5d1300e 	ldrb	r3, [r1, #14]
   11ce4:	e1833402 	orr	r3, r3, r2, lsl #8
   11ce8:	e6bf3073 	sxth	r3, r3
   11cec:	e2833902 	add	r3, r3, #32768	; 0x8000
   11cf0:	e1a03423 	lsr	r3, r3, #8
   11cf4:	e5803040 	str	r3, [r0, #64]	; 0x40
   11cf8:	e5d13010 	ldrb	r3, [r1, #16]
   11cfc:	e5d12011 	ldrb	r2, [r1, #17]
   11d00:	e1833402 	orr	r3, r3, r2, lsl #8
   11d04:	e6bf3073 	sxth	r3, r3
   11d08:	e2833902 	add	r3, r3, #32768	; 0x8000
   11d0c:	e1a03423 	lsr	r3, r3, #8
   11d10:	e26330ff 	rsb	r3, r3, #255	; 0xff
   11d14:	e580304c 	str	r3, [r0, #76]	; 0x4c
   11d18:	e12fff1e 	bx	lr

00011d1c <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   11d1c:	e92d4010 	push	{r4, lr}
   11d20:	e1a04000 	mov	r4, r0
   11d24:	e59f300c 	ldr	r3, [pc, #12]	; 11d38 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   11d28:	e5803000 	str	r3, [r0]
   11d2c:	eb00182e 	bl	17dec <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11d30:	e1a00004 	mov	r0, r4
   11d34:	e8bd8010 	pop	{r4, pc}
   11d38:	00040988 	.word	0x00040988

00011d3c <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   11d3c:	e92d4010 	push	{r4, lr}
   11d40:	e1a04000 	mov	r4, r0
   11d44:	e59f3018 	ldr	r3, [pc, #24]	; 11d64 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   11d48:	e5803000 	str	r3, [r0]
   11d4c:	eb001826 	bl	17dec <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11d50:	e1a00004 	mov	r0, r4
   11d54:	e3a01f4d 	mov	r1, #308	; 0x134
   11d58:	eb0064d7 	bl	2b0bc <operator delete(void*, unsigned int)>
   11d5c:	e1a00004 	mov	r0, r4
   11d60:	e8bd8010 	pop	{r4, pc}
   11d64:	00040988 	.word	0x00040988

00011d68 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   11d68:	e2513000 	subs	r3, r1, #0
   11d6c:	012fff1e 	bxeq	lr
   11d70:	e92d4030 	push	{r4, r5, lr}
   11d74:	e3520006 	cmp	r2, #6
   11d78:	e24dd014 	sub	sp, sp, #20
   11d7c:	e1a04000 	mov	r4, r0
   11d80:	e1a0c003 	mov	ip, r3
   11d84:	0a00000b 	beq	11db8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x50>
   11d88:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   11d8c:	e2933000 	adds	r3, r3, #0
   11d90:	13a03001 	movne	r3, #1
   11d94:	e3520012 	cmp	r2, #18
   11d98:	13a03000 	movne	r3, #0
   11d9c:	e3530000 	cmp	r3, #0
   11da0:	0a000002 	beq	11db0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11da4:	e5dc3000 	ldrb	r3, [ip]
   11da8:	e3530020 	cmp	r3, #32
   11dac:	0a00001b 	beq	11e20 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xb8>
   11db0:	e28dd014 	add	sp, sp, #20
   11db4:	e8bd8030 	pop	{r4, r5, pc}
   11db8:	e5d33000 	ldrb	r3, [r3]
   11dbc:	e3530007 	cmp	r3, #7
   11dc0:	1afffffa 	bne	11db0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11dc4:	e5dc3001 	ldrb	r3, [ip, #1]
   11dc8:	e3530030 	cmp	r3, #48	; 0x30
   11dcc:	1afffff7 	bne	11db0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11dd0:	e1a0e00d 	mov	lr, sp
   11dd4:	e59f506c 	ldr	r5, [pc, #108]	; 11e48 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
   11dd8:	e5dcc002 	ldrb	ip, [ip, #2]
   11ddc:	e895000f 	ldm	r5, {r0, r1, r2, r3}
   11de0:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   11de4:	e1a00004 	mov	r0, r4
   11de8:	e5ce3000 	strb	r3, [lr]
   11dec:	e3a0200d 	mov	r2, #13
   11df0:	e3a03000 	mov	r3, #0
   11df4:	e1a0100d 	mov	r1, sp
   11df8:	e5cdc002 	strb	ip, [sp, #2]
   11dfc:	eb0001a1 	bl	12488 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   11e00:	e3500000 	cmp	r0, #0
   11e04:	1affffe9 	bne	11db0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11e08:	eb005373 	bl	26bdc <CLogger::Get()>
   11e0c:	e2851010 	add	r1, r5, #16
   11e10:	e59f3034 	ldr	r3, [pc, #52]	; 11e4c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   11e14:	e3a02001 	mov	r2, #1
   11e18:	eb0052ac 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11e1c:	eaffffe3 	b	11db0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11e20:	e1a05000 	mov	r5, r0
   11e24:	e4953024 	ldr	r3, [r5], #36	; 0x24
   11e28:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11e2c:	e12fff33 	blx	r3
   11e30:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   11e34:	e1a01005 	mov	r1, r5
   11e38:	e2400001 	sub	r0, r0, #1
   11e3c:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   11e40:	e12fff33 	blx	r3
   11e44:	eaffffd9 	b	11db0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11e48:	000409cc 	.word	0x000409cc
   11e4c:	00040a04 	.word	0x00040a04

00011e50 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   11e50:	e92d4010 	push	{r4, lr}
   11e54:	e24dd010 	sub	sp, sp, #16
   11e58:	e1a0c00d 	mov	ip, sp
   11e5c:	e1a04001 	mov	r4, r1
   11e60:	e59f3070 	ldr	r3, [pc, #112]	; 11ed8 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x88>
   11e64:	e1a0e000 	mov	lr, r0
   11e68:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   11e6c:	e8ac0007 	stmia	ip!, {r0, r1, r2}
   11e70:	e3540001 	cmp	r4, #1
   11e74:	e5cc3000 	strb	r3, [ip]
   11e78:	0a000013 	beq	11ecc <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   11e7c:	3a000003 	bcc	11e90 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   11e80:	e3540002 	cmp	r4, #2
   11e84:	1a00000c 	bne	11ebc <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x6c>
   11e88:	e3e03000 	mvn	r3, #0
   11e8c:	e5cd3008 	strb	r3, [sp, #8]
   11e90:	e5dec130 	ldrb	ip, [lr, #304]	; 0x130
   11e94:	e1a0100d 	mov	r1, sp
   11e98:	e28c3001 	add	r3, ip, #1
   11e9c:	e5ce3130 	strb	r3, [lr, #304]	; 0x130
   11ea0:	e1a0000e 	mov	r0, lr
   11ea4:	e3a03000 	mov	r3, #0
   11ea8:	e3a0200d 	mov	r2, #13
   11eac:	e5cdc002 	strb	ip, [sp, #2]
   11eb0:	eb00014f 	bl	123f4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11eb4:	e28dd010 	add	sp, sp, #16
   11eb8:	e8bd8010 	pop	{r4, pc}
   11ebc:	e3a020ee 	mov	r2, #238	; 0xee
   11ec0:	e59f1014 	ldr	r1, [pc, #20]	; 11edc <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   11ec4:	e59f0014 	ldr	r0, [pc, #20]	; 11ee0 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x90>
   11ec8:	eb004a50 	bl	24810 <assertion_failed>
   11ecc:	e3e03000 	mvn	r3, #0
   11ed0:	e5cd3009 	strb	r3, [sp, #9]
   11ed4:	eaffffed 	b	11e90 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   11ed8:	000409ec 	.word	0x000409ec
   11edc:	00040a18 	.word	0x00040a18
   11ee0:	0003fe24 	.word	0x0003fe24

00011ee4 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   11ee4:	e92d4010 	push	{r4, lr}
   11ee8:	e1a04000 	mov	r4, r0
   11eec:	eb0017ac 	bl	17da4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11ef0:	e3a02000 	mov	r2, #0
   11ef4:	e59f300c 	ldr	r3, [pc, #12]	; 11f08 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   11ef8:	e5c42130 	strb	r2, [r4, #304]	; 0x130
   11efc:	e5843000 	str	r3, [r4]
   11f00:	e1a00004 	mov	r0, r4
   11f04:	e8bd8010 	pop	{r4, pc}
   11f08:	00040988 	.word	0x00040988

00011f0c <CUSBGamePadXboxOneDevice::Configure()>:
   11f0c:	e3a02040 	mov	r2, #64	; 0x40
   11f10:	e92d4070 	push	{r4, r5, r6, lr}
   11f14:	e2803f4a 	add	r3, r0, #296	; 0x128
   11f18:	e24dd008 	sub	sp, sp, #8
   11f1c:	e1c320b0 	strh	r2, [r3]
   11f20:	e1a04000 	mov	r4, r0
   11f24:	eb001773 	bl	17cf8 <CUSBGamePadDevice::Configure()>
   11f28:	e2505000 	subs	r5, r0, #0
   11f2c:	0a00002a 	beq	11fdc <CUSBGamePadXboxOneDevice::Configure()+0xd0>
   11f30:	e3a03000 	mov	r3, #0
   11f34:	e3a020ff 	mov	r2, #255	; 0xff
   11f38:	e3a01010 	mov	r1, #16
   11f3c:	e3a0c006 	mov	ip, #6
   11f40:	e59f60b4 	ldr	r6, [pc, #180]	; 11ffc <CUSBGamePadXboxOneDevice::Configure()+0xf0>
   11f44:	e5841104 	str	r1, [r4, #260]	; 0x104
   11f48:	e5842030 	str	r2, [r4, #48]	; 0x30
   11f4c:	e8960003 	ldm	r6, {r0, r1}
   11f50:	e584203c 	str	r2, [r4, #60]	; 0x3c
   11f54:	e58d0000 	str	r0, [sp]
   11f58:	e5cd1004 	strb	r1, [sp, #4]
   11f5c:	e5842048 	str	r2, [r4, #72]	; 0x48
   11f60:	e5842054 	str	r2, [r4, #84]	; 0x54
   11f64:	e5842060 	str	r2, [r4, #96]	; 0x60
   11f68:	e584206c 	str	r2, [r4, #108]	; 0x6c
   11f6c:	e584c024 	str	ip, [r4, #36]	; 0x24
   11f70:	e584302c 	str	r3, [r4, #44]	; 0x2c
   11f74:	e5843038 	str	r3, [r4, #56]	; 0x38
   11f78:	e5843044 	str	r3, [r4, #68]	; 0x44
   11f7c:	e5843050 	str	r3, [r4, #80]	; 0x50
   11f80:	e584305c 	str	r3, [r4, #92]	; 0x5c
   11f84:	e5843068 	str	r3, [r4, #104]	; 0x68
   11f88:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   11f8c:	e3a02005 	mov	r2, #5
   11f90:	e1a0100d 	mov	r1, sp
   11f94:	e1a00004 	mov	r0, r4
   11f98:	eb000115 	bl	123f4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11f9c:	e2505000 	subs	r5, r0, #0
   11fa0:	0a000005 	beq	11fbc <CUSBGamePadXboxOneDevice::Configure()+0xb0>
   11fa4:	e1a00004 	mov	r0, r4
   11fa8:	eb00019b 	bl	1261c <CUSBHIDDevice::StartRequest()>
   11fac:	e1a05000 	mov	r5, r0
   11fb0:	e1a00005 	mov	r0, r5
   11fb4:	e28dd008 	add	sp, sp, #8
   11fb8:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fbc:	eb005306 	bl	26bdc <CLogger::Get()>
   11fc0:	e2461020 	sub	r1, r6, #32
   11fc4:	e59f3034 	ldr	r3, [pc, #52]	; 12000 <CUSBGamePadXboxOneDevice::Configure()+0xf4>
   11fc8:	e3a02001 	mov	r2, #1
   11fcc:	eb00523f 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11fd0:	e1a00005 	mov	r0, r5
   11fd4:	e28dd008 	add	sp, sp, #8
   11fd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fdc:	eb0052fe 	bl	26bdc <CLogger::Get()>
   11fe0:	e59f301c 	ldr	r3, [pc, #28]	; 12004 <CUSBGamePadXboxOneDevice::Configure()+0xf8>
   11fe4:	e3a02001 	mov	r2, #1
   11fe8:	e59f1018 	ldr	r1, [pc, #24]	; 12008 <CUSBGamePadXboxOneDevice::Configure()+0xfc>
   11fec:	eb005237 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11ff0:	e1a00005 	mov	r0, r5
   11ff4:	e28dd008 	add	sp, sp, #8
   11ff8:	e8bd8070 	pop	{r4, r5, r6, pc}
   11ffc:	000409fc 	.word	0x000409fc
   12000:	00040a30 	.word	0x00040a30
   12004:	00040524 	.word	0x00040524
   12008:	000409dc 	.word	0x000409dc

0001200c <CUSBGamePadXboxOneDevice::GetProperties()>:
   1200c:	e3a00009 	mov	r0, #9
   12010:	e12fff1e 	bx	lr

00012014 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   12014:	e92d4070 	push	{r4, r5, r6, lr}
   12018:	e2504000 	subs	r4, r0, #0
   1201c:	0a000013 	beq	12070 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x5c>
   12020:	e1a05001 	mov	r5, r1
   12024:	eb00093a 	bl	14514 <CUSBRequest::GetStatus() const>
   12028:	e3500000 	cmp	r0, #0
   1202c:	0a000009 	beq	12058 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x44>
   12030:	e1a00004 	mov	r0, r4
   12034:	eb000926 	bl	144d4 <CUSBRequest::~CUSBRequest()>
   12038:	e1a00004 	mov	r0, r4
   1203c:	e3a01028 	mov	r1, #40	; 0x28
   12040:	eb00099c 	bl	146b8 <CUSBRequest::operator delete(void*, unsigned int)>
   12044:	e3550000 	cmp	r5, #0
   12048:	0a00000c 	beq	12080 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x6c>
   1204c:	e1a00005 	mov	r0, r5
   12050:	e8bd4070 	pop	{r4, r5, r6, lr}
   12054:	ea006412 	b	2b0a4 <operator delete[](void*)>
   12058:	eb0052df 	bl	26bdc <CLogger::Get()>
   1205c:	e59f302c 	ldr	r3, [pc, #44]	; 12090 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   12060:	e3a02002 	mov	r2, #2
   12064:	e59f1028 	ldr	r1, [pc, #40]	; 12094 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x80>
   12068:	eb005218 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1206c:	eaffffef 	b	12030 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
   12070:	e3a020af 	mov	r2, #175	; 0xaf
   12074:	e59f101c 	ldr	r1, [pc, #28]	; 12098 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x84>
   12078:	e59f001c 	ldr	r0, [pc, #28]	; 1209c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x88>
   1207c:	eb0049e3 	bl	24810 <assertion_failed>
   12080:	e3a020b8 	mov	r2, #184	; 0xb8
   12084:	e59f100c 	ldr	r1, [pc, #12]	; 12098 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x84>
   12088:	e59f0010 	ldr	r0, [pc, #16]	; 120a0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x8c>
   1208c:	eb0049df 	bl	24810 <assertion_failed>
   12090:	00040a94 	.word	0x00040a94
   12094:	00040a48 	.word	0x00040a48
   12098:	00040a80 	.word	0x00040a80
   1209c:	0003f31c 	.word	0x0003f31c
   120a0:	00040ab0 	.word	0x00040ab0

000120a4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   120a4:	e92d4070 	push	{r4, r5, r6, lr}
   120a8:	e1a04000 	mov	r4, r0
   120ac:	e1a05002 	mov	r5, r2
   120b0:	ebfff5a2 	bl	f740 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   120b4:	e3a03000 	mov	r3, #0
   120b8:	e59f2030 	ldr	r2, [pc, #48]	; 120f0 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x4c>
   120bc:	e1550003 	cmp	r5, r3
   120c0:	e5845010 	str	r5, [r4, #16]
   120c4:	e5842000 	str	r2, [r4]
   120c8:	e5843014 	str	r3, [r4, #20]
   120cc:	e5843018 	str	r3, [r4, #24]
   120d0:	e584301c 	str	r3, [r4, #28]
   120d4:	e5843020 	str	r3, [r4, #32]
   120d8:	0a000002 	beq	120e8 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x44>
   120dc:	e1a00005 	mov	r0, r5
   120e0:	eb0063e8 	bl	2b088 <operator new[](unsigned int)>
   120e4:	e5840020 	str	r0, [r4, #32]
   120e8:	e1a00004 	mov	r0, r4
   120ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   120f0:	00040a58 	.word	0x00040a58

000120f4 <CUSBHIDDevice::~CUSBHIDDevice()>:
   120f4:	e92d4070 	push	{r4, r5, r6, lr}
   120f8:	e1a04000 	mov	r4, r0
   120fc:	e5900020 	ldr	r0, [r0, #32]
   12100:	e59f3074 	ldr	r3, [pc, #116]	; 1217c <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
   12104:	e3500000 	cmp	r0, #0
   12108:	e5843000 	str	r3, [r4]
   1210c:	0a000000 	beq	12114 <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   12110:	eb0063e3 	bl	2b0a4 <operator delete[](void*)>
   12114:	e3a03000 	mov	r3, #0
   12118:	e5945018 	ldr	r5, [r4, #24]
   1211c:	e5843020 	str	r3, [r4, #32]
   12120:	e1550003 	cmp	r5, r3
   12124:	0a000004 	beq	1213c <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   12128:	e1a00005 	mov	r0, r5
   1212c:	ebfff486 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   12130:	e1a00005 	mov	r0, r5
   12134:	e3a01014 	mov	r1, #20
   12138:	eb0063df 	bl	2b0bc <operator delete(void*, unsigned int)>
   1213c:	e3a03000 	mov	r3, #0
   12140:	e5945014 	ldr	r5, [r4, #20]
   12144:	e5843018 	str	r3, [r4, #24]
   12148:	e1550003 	cmp	r5, r3
   1214c:	0a000004 	beq	12164 <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
   12150:	e1a00005 	mov	r0, r5
   12154:	ebfff47c 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   12158:	e1a00005 	mov	r0, r5
   1215c:	e3a01014 	mov	r1, #20
   12160:	eb0063d5 	bl	2b0bc <operator delete(void*, unsigned int)>
   12164:	e3a03000 	mov	r3, #0
   12168:	e1a00004 	mov	r0, r4
   1216c:	e5843014 	str	r3, [r4, #20]
   12170:	ebfff4e1 	bl	f4fc <CUSBFunction::~CUSBFunction()>
   12174:	e1a00004 	mov	r0, r4
   12178:	e8bd8070 	pop	{r4, r5, r6, pc}
   1217c:	00040a58 	.word	0x00040a58

00012180 <CUSBHIDDevice::~CUSBHIDDevice()>:
   12180:	e92d4010 	push	{r4, lr}
   12184:	e1a04000 	mov	r4, r0
   12188:	ebffffd9 	bl	120f4 <CUSBHIDDevice::~CUSBHIDDevice()>
   1218c:	e1a00004 	mov	r0, r4
   12190:	e3a01024 	mov	r1, #36	; 0x24
   12194:	eb0063c8 	bl	2b0bc <operator delete(void*, unsigned int)>
   12198:	e1a00004 	mov	r0, r4
   1219c:	e8bd8010 	pop	{r4, pc}

000121a0 <CUSBHIDDevice::Configure(unsigned int)>:
   121a0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   121a4:	e24dd010 	sub	sp, sp, #16
   121a8:	e1a07001 	mov	r7, r1
   121ac:	e1a05000 	mov	r5, r0
   121b0:	ebfff5b2 	bl	f880 <CUSBFunction::GetNumEndpoints() const>
   121b4:	e2506000 	subs	r6, r0, #0
   121b8:	13a06005 	movne	r6, #5
   121bc:	13a08014 	movne	r8, #20
   121c0:	1a000004 	bne	121d8 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   121c4:	ea000053 	b	12318 <CUSBHIDDevice::Configure(unsigned int)+0x178>
   121c8:	e5d43003 	ldrb	r3, [r4, #3]
   121cc:	e203303f 	and	r3, r3, #63	; 0x3f
   121d0:	e3530003 	cmp	r3, #3
   121d4:	0a000019 	beq	12240 <CUSBHIDDevice::Configure(unsigned int)+0xa0>
   121d8:	e1a01006 	mov	r1, r6
   121dc:	e1a00005 	mov	r0, r5
   121e0:	ebfff5d3 	bl	f934 <CUSBFunction::GetDescriptor(unsigned char)>
   121e4:	e2504000 	subs	r4, r0, #0
   121e8:	1afffff6 	bne	121c8 <CUSBHIDDevice::Configure(unsigned int)+0x28>
   121ec:	e5956014 	ldr	r6, [r5, #20]
   121f0:	e1a00005 	mov	r0, r5
   121f4:	e3560000 	cmp	r6, #0
   121f8:	0a000043 	beq	1230c <CUSBHIDDevice::Configure(unsigned int)+0x16c>
   121fc:	ebfff4e7 	bl	f5a0 <CUSBFunction::Configure()>
   12200:	e2506000 	subs	r6, r0, #0
   12204:	0a00001e 	beq	12284 <CUSBHIDDevice::Configure(unsigned int)+0xe4>
   12208:	e1a00005 	mov	r0, r5
   1220c:	ebfff627 	bl	fab0 <CUSBFunction::GetInterfaceClass() const>
   12210:	e3500003 	cmp	r0, #3
   12214:	0a000043 	beq	12328 <CUSBHIDDevice::Configure(unsigned int)+0x188>
   12218:	e5953010 	ldr	r3, [r5, #16]
   1221c:	e3530000 	cmp	r3, #0
   12220:	0a00001f 	beq	122a4 <CUSBHIDDevice::Configure(unsigned int)+0x104>
   12224:	e5953020 	ldr	r3, [r5, #32]
   12228:	e3530000 	cmp	r3, #0
   1222c:	1a000019 	bne	12298 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   12230:	e3a02082 	mov	r2, #130	; 0x82
   12234:	e59f119c 	ldr	r1, [pc, #412]	; 123d8 <CUSBHIDDevice::Configure(unsigned int)+0x238>
   12238:	e59f019c 	ldr	r0, [pc, #412]	; 123dc <CUSBHIDDevice::Configure(unsigned int)+0x23c>
   1223c:	eb004973 	bl	24810 <assertion_failed>
   12240:	e1d430d2 	ldrsb	r3, [r4, #2]
   12244:	e3530000 	cmp	r3, #0
   12248:	ba000021 	blt	122d4 <CUSBHIDDevice::Configure(unsigned int)+0x134>
   1224c:	e5953018 	ldr	r3, [r5, #24]
   12250:	e1a00005 	mov	r0, r5
   12254:	e3530000 	cmp	r3, #0
   12258:	1a00005a 	bne	123c8 <CUSBHIDDevice::Configure(unsigned int)+0x228>
   1225c:	ebfff593 	bl	f8b0 <CUSBFunction::GetDevice() const>
   12260:	e1a0a000 	mov	sl, r0
   12264:	e1a00008 	mov	r0, r8
   12268:	eb006385 	bl	2b084 <operator new(unsigned int)>
   1226c:	e1a09000 	mov	r9, r0
   12270:	e1a02004 	mov	r2, r4
   12274:	e1a0100a 	mov	r1, sl
   12278:	ebfff3c9 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1227c:	e5859018 	str	r9, [r5, #24]
   12280:	eaffffd4 	b	121d8 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   12284:	eb005254 	bl	26bdc <CLogger::Get()>
   12288:	e59f3150 	ldr	r3, [pc, #336]	; 123e0 <CUSBHIDDevice::Configure(unsigned int)+0x240>
   1228c:	e3a02001 	mov	r2, #1
   12290:	e59f114c 	ldr	r1, [pc, #332]	; 123e4 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   12294:	eb00518d 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12298:	e1a00006 	mov	r0, r6
   1229c:	e28dd010 	add	sp, sp, #16
   122a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   122a4:	e3570000 	cmp	r7, #0
   122a8:	e5857010 	str	r7, [r5, #16]
   122ac:	0a000041 	beq	123b8 <CUSBHIDDevice::Configure(unsigned int)+0x218>
   122b0:	e5953020 	ldr	r3, [r5, #32]
   122b4:	e3530000 	cmp	r3, #0
   122b8:	1a00003a 	bne	123a8 <CUSBHIDDevice::Configure(unsigned int)+0x208>
   122bc:	e1a00007 	mov	r0, r7
   122c0:	eb006370 	bl	2b088 <operator new[](unsigned int)>
   122c4:	e5850020 	str	r0, [r5, #32]
   122c8:	e1a00006 	mov	r0, r6
   122cc:	e28dd010 	add	sp, sp, #16
   122d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   122d4:	e5953014 	ldr	r3, [r5, #20]
   122d8:	e1a00005 	mov	r0, r5
   122dc:	e3530000 	cmp	r3, #0
   122e0:	1a000038 	bne	123c8 <CUSBHIDDevice::Configure(unsigned int)+0x228>
   122e4:	ebfff571 	bl	f8b0 <CUSBFunction::GetDevice() const>
   122e8:	e1a0a000 	mov	sl, r0
   122ec:	e1a00008 	mov	r0, r8
   122f0:	eb006363 	bl	2b084 <operator new(unsigned int)>
   122f4:	e1a09000 	mov	r9, r0
   122f8:	e1a02004 	mov	r2, r4
   122fc:	e1a0100a 	mov	r1, sl
   12300:	ebfff3a7 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   12304:	e5859014 	str	r9, [r5, #20]
   12308:	eaffffb2 	b	121d8 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   1230c:	e59f10d0 	ldr	r1, [pc, #208]	; 123e4 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   12310:	ebfff592 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   12314:	eaffffdf 	b	12298 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   12318:	e1a00005 	mov	r0, r5
   1231c:	e59f10c0 	ldr	r1, [pc, #192]	; 123e4 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   12320:	ebfff58e 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   12324:	eaffffdb 	b	12298 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   12328:	e1a00005 	mov	r0, r5
   1232c:	ebfff5eb 	bl	fae0 <CUSBFunction::GetInterfaceSubClass() const>
   12330:	e3500001 	cmp	r0, #1
   12334:	e1a0a000 	mov	sl, r0
   12338:	1affffb6 	bne	12218 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   1233c:	e1a00005 	mov	r0, r5
   12340:	ebfff570 	bl	f908 <CUSBFunction::GetHost() const>
   12344:	e1a08000 	mov	r8, r0
   12348:	e1a00005 	mov	r0, r5
   1234c:	ebfff562 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
   12350:	e1a09000 	mov	r9, r0
   12354:	e1a00005 	mov	r0, r5
   12358:	ebfff5c8 	bl	fa80 <CUSBFunction::GetInterfaceNumber() const>
   1235c:	e6ff0070 	uxth	r0, r0
   12360:	e58d0004 	str	r0, [sp, #4]
   12364:	e1a01009 	mov	r1, r9
   12368:	e1a00008 	mov	r0, r8
   1236c:	e58d400c 	str	r4, [sp, #12]
   12370:	e58d4008 	str	r4, [sp, #8]
   12374:	e58d4000 	str	r4, [sp]
   12378:	e3a0300b 	mov	r3, #11
   1237c:	e3a02021 	mov	r2, #33	; 0x21
   12380:	eb000132 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12384:	e3500000 	cmp	r0, #0
   12388:	aaffffa2 	bge	12218 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   1238c:	eb005212 	bl	26bdc <CLogger::Get()>
   12390:	e1a0200a 	mov	r2, sl
   12394:	e59f304c 	ldr	r3, [pc, #76]	; 123e8 <CUSBHIDDevice::Configure(unsigned int)+0x248>
   12398:	e59f1044 	ldr	r1, [pc, #68]	; 123e4 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   1239c:	e1a06004 	mov	r6, r4
   123a0:	eb00514a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   123a4:	eaffffbb 	b	12298 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   123a8:	e3a0207f 	mov	r2, #127	; 0x7f
   123ac:	e59f1024 	ldr	r1, [pc, #36]	; 123d8 <CUSBHIDDevice::Configure(unsigned int)+0x238>
   123b0:	e59f0034 	ldr	r0, [pc, #52]	; 123ec <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   123b4:	eb004915 	bl	24810 <assertion_failed>
   123b8:	e3a0207d 	mov	r2, #125	; 0x7d
   123bc:	e59f1014 	ldr	r1, [pc, #20]	; 123d8 <CUSBHIDDevice::Configure(unsigned int)+0x238>
   123c0:	e59f0028 	ldr	r0, [pc, #40]	; 123f0 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   123c4:	eb004911 	bl	24810 <assertion_failed>
   123c8:	e59f1014 	ldr	r1, [pc, #20]	; 123e4 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   123cc:	ebfff563 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   123d0:	e3a06000 	mov	r6, #0
   123d4:	eaffffaf 	b	12298 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   123d8:	00040a80 	.word	0x00040a80
   123dc:	00040b10 	.word	0x00040b10
   123e0:	000403d4 	.word	0x000403d4
   123e4:	00040a48 	.word	0x00040a48
   123e8:	00040ac4 	.word	0x00040ac4
   123ec:	00040af8 	.word	0x00040af8
   123f0:	00040ae0 	.word	0x00040ae0

000123f4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   123f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   123f8:	e590e018 	ldr	lr, [r0, #24]
   123fc:	e24dd00c 	sub	sp, sp, #12
   12400:	e35e0000 	cmp	lr, #0
   12404:	0a000011 	beq	12450 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x5c>
   12408:	e3510000 	cmp	r1, #0
   1240c:	e1a07003 	mov	r7, r3
   12410:	e1a06002 	mov	r6, r2
   12414:	e1a05001 	mov	r5, r1
   12418:	0a00000f 	beq	1245c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x68>
   1241c:	e3520000 	cmp	r2, #0
   12420:	0a000011 	beq	1246c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x78>
   12424:	e1a04000 	mov	r4, r0
   12428:	ebfff536 	bl	f908 <CUSBFunction::GetHost() const>
   1242c:	e5941018 	ldr	r1, [r4, #24]
   12430:	e1a03006 	mov	r3, r6
   12434:	e58d7000 	str	r7, [sp]
   12438:	e1a02005 	mov	r2, r5
   1243c:	eb000169 	bl	129e8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12440:	e1e00000 	mvn	r0, r0
   12444:	e1a00fa0 	lsr	r0, r0, #31
   12448:	e28dd00c 	add	sp, sp, #12
   1244c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12450:	e1a0000e 	mov	r0, lr
   12454:	e28dd00c 	add	sp, sp, #12
   12458:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1245c:	e3a0208e 	mov	r2, #142	; 0x8e
   12460:	e59f1014 	ldr	r1, [pc, #20]	; 1247c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x88>
   12464:	e59f0014 	ldr	r0, [pc, #20]	; 12480 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x8c>
   12468:	eb0048e8 	bl	24810 <assertion_failed>
   1246c:	e3a0208f 	mov	r2, #143	; 0x8f
   12470:	e59f1004 	ldr	r1, [pc, #4]	; 1247c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x88>
   12474:	e59f0008 	ldr	r0, [pc, #8]	; 12484 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x90>
   12478:	eb0048e4 	bl	24810 <assertion_failed>
   1247c:	00040a80 	.word	0x00040a80
   12480:	00040c5c 	.word	0x00040c5c
   12484:	00040b28 	.word	0x00040b28

00012488 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   12488:	e590c018 	ldr	ip, [r0, #24]
   1248c:	e35c0000 	cmp	ip, #0
   12490:	0a00002e 	beq	12550 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc8>
   12494:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12498:	e3510000 	cmp	r1, #0
   1249c:	e24dd008 	sub	sp, sp, #8
   124a0:	e1a07003 	mov	r7, r3
   124a4:	e1a05002 	mov	r5, r2
   124a8:	e1a06001 	mov	r6, r1
   124ac:	e1a04000 	mov	r4, r0
   124b0:	0a00001e 	beq	12530 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xa8>
   124b4:	e3520000 	cmp	r2, #0
   124b8:	0a000020 	beq	12540 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xb8>
   124bc:	e1a00002 	mov	r0, r2
   124c0:	eb0062f0 	bl	2b088 <operator new[](unsigned int)>
   124c4:	e1a02005 	mov	r2, r5
   124c8:	e1a01006 	mov	r1, r6
   124cc:	e1a08000 	mov	r8, r0
   124d0:	eb006112 	bl	2a920 <memcpy>
   124d4:	e3a00028 	mov	r0, #40	; 0x28
   124d8:	eb000861 	bl	14664 <CUSBRequest::operator new(unsigned int)>
   124dc:	e3a0c000 	mov	ip, #0
   124e0:	e1a06000 	mov	r6, r0
   124e4:	e5941018 	ldr	r1, [r4, #24]
   124e8:	e1a03005 	mov	r3, r5
   124ec:	e58dc000 	str	ip, [sp]
   124f0:	e1a02008 	mov	r2, r8
   124f4:	eb0007d5 	bl	14450 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   124f8:	e1a03004 	mov	r3, r4
   124fc:	e1a02008 	mov	r2, r8
   12500:	e1a00006 	mov	r0, r6
   12504:	e59f104c 	ldr	r1, [pc, #76]	; 12558 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd0>
   12508:	eb000834 	bl	145e0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1250c:	e1a00004 	mov	r0, r4
   12510:	ebfff4fc 	bl	f908 <CUSBFunction::GetHost() const>
   12514:	e1a01006 	mov	r1, r6
   12518:	e1a02007 	mov	r2, r7
   1251c:	e5903000 	ldr	r3, [r0]
   12520:	e593300c 	ldr	r3, [r3, #12]
   12524:	e28dd008 	add	sp, sp, #8
   12528:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1252c:	e12fff13 	bx	r3
   12530:	e3a020a0 	mov	r2, #160	; 0xa0
   12534:	e59f1020 	ldr	r1, [pc, #32]	; 1255c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   12538:	e59f0020 	ldr	r0, [pc, #32]	; 12560 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd8>
   1253c:	eb0048b3 	bl	24810 <assertion_failed>
   12540:	e3a020a1 	mov	r2, #161	; 0xa1
   12544:	e59f1010 	ldr	r1, [pc, #16]	; 1255c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   12548:	e59f0014 	ldr	r0, [pc, #20]	; 12564 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xdc>
   1254c:	eb0048af 	bl	24810 <assertion_failed>
   12550:	e1a0000c 	mov	r0, ip
   12554:	e12fff1e 	bx	lr
   12558:	00012014 	.word	0x00012014
   1255c:	00040a80 	.word	0x00040a80
   12560:	00040c5c 	.word	0x00040c5c
   12564:	00040b28 	.word	0x00040b28

00012568 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   12568:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1256c:	e590c01c 	ldr	ip, [r0, #28]
   12570:	e24dd00c 	sub	sp, sp, #12
   12574:	e35c0000 	cmp	ip, #0
   12578:	1a000012 	bne	125c8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x60>
   1257c:	e1a06002 	mov	r6, r2
   12580:	e5902014 	ldr	r2, [r0, #20]
   12584:	e1a04000 	mov	r4, r0
   12588:	e3520000 	cmp	r2, #0
   1258c:	0a000011 	beq	125d8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x70>
   12590:	e3510000 	cmp	r1, #0
   12594:	e1a05001 	mov	r5, r1
   12598:	0a000012 	beq	125e8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x80>
   1259c:	e3560000 	cmp	r6, #0
   125a0:	0a000014 	beq	125f8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x90>
   125a4:	e1a07003 	mov	r7, r3
   125a8:	ebfff4d6 	bl	f908 <CUSBFunction::GetHost() const>
   125ac:	e5941014 	ldr	r1, [r4, #20]
   125b0:	e1a03006 	mov	r3, r6
   125b4:	e58d7000 	str	r7, [sp]
   125b8:	e1a02005 	mov	r2, r5
   125bc:	eb000109 	bl	129e8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   125c0:	e28dd00c 	add	sp, sp, #12
   125c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   125c8:	e3a020be 	mov	r2, #190	; 0xbe
   125cc:	e59f1034 	ldr	r1, [pc, #52]	; 12608 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   125d0:	e59f0034 	ldr	r0, [pc, #52]	; 1260c <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa4>
   125d4:	eb00488d 	bl	24810 <assertion_failed>
   125d8:	e3a020c0 	mov	r2, #192	; 0xc0
   125dc:	e59f1024 	ldr	r1, [pc, #36]	; 12608 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   125e0:	e59f0028 	ldr	r0, [pc, #40]	; 12610 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa8>
   125e4:	eb004889 	bl	24810 <assertion_failed>
   125e8:	e3a020c1 	mov	r2, #193	; 0xc1
   125ec:	e59f1014 	ldr	r1, [pc, #20]	; 12608 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   125f0:	e59f001c 	ldr	r0, [pc, #28]	; 12614 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   125f4:	eb004885 	bl	24810 <assertion_failed>
   125f8:	e3a020c2 	mov	r2, #194	; 0xc2
   125fc:	e59f1004 	ldr	r1, [pc, #4]	; 12608 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   12600:	e59f0010 	ldr	r0, [pc, #16]	; 12618 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb0>
   12604:	eb004881 	bl	24810 <assertion_failed>
   12608:	00040a80 	.word	0x00040a80
   1260c:	00040b38 	.word	0x00040b38
   12610:	00040b44 	.word	0x00040b44
   12614:	00040c5c 	.word	0x00040c5c
   12618:	00040b28 	.word	0x00040b28

0001261c <CUSBHIDDevice::StartRequest()>:
   1261c:	e92d4070 	push	{r4, r5, r6, lr}
   12620:	e5903014 	ldr	r3, [r0, #20]
   12624:	e24dd008 	sub	sp, sp, #8
   12628:	e3530000 	cmp	r3, #0
   1262c:	0a000020 	beq	126b4 <CUSBHIDDevice::StartRequest()+0x98>
   12630:	e5903020 	ldr	r3, [r0, #32]
   12634:	e1a04000 	mov	r4, r0
   12638:	e3530000 	cmp	r3, #0
   1263c:	0a000020 	beq	126c4 <CUSBHIDDevice::StartRequest()+0xa8>
   12640:	e590501c 	ldr	r5, [r0, #28]
   12644:	e3550000 	cmp	r5, #0
   12648:	1a000021 	bne	126d4 <CUSBHIDDevice::StartRequest()+0xb8>
   1264c:	e5903010 	ldr	r3, [r0, #16]
   12650:	e3530000 	cmp	r3, #0
   12654:	0a000022 	beq	126e4 <CUSBHIDDevice::StartRequest()+0xc8>
   12658:	e3a00028 	mov	r0, #40	; 0x28
   1265c:	eb000800 	bl	14664 <CUSBRequest::operator new(unsigned int)>
   12660:	e1a06000 	mov	r6, r0
   12664:	e5943010 	ldr	r3, [r4, #16]
   12668:	e5942020 	ldr	r2, [r4, #32]
   1266c:	e5941014 	ldr	r1, [r4, #20]
   12670:	e58d5000 	str	r5, [sp]
   12674:	eb000775 	bl	14450 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   12678:	e1a03004 	mov	r3, r4
   1267c:	e1a02005 	mov	r2, r5
   12680:	e1a00006 	mov	r0, r6
   12684:	e59f1068 	ldr	r1, [pc, #104]	; 126f4 <CUSBHIDDevice::StartRequest()+0xd8>
   12688:	e584601c 	str	r6, [r4, #28]
   1268c:	eb0007d3 	bl	145e0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   12690:	e1a00004 	mov	r0, r4
   12694:	ebfff49b 	bl	f908 <CUSBFunction::GetHost() const>
   12698:	e1a02005 	mov	r2, r5
   1269c:	e5903000 	ldr	r3, [r0]
   126a0:	e594101c 	ldr	r1, [r4, #28]
   126a4:	e593300c 	ldr	r3, [r3, #12]
   126a8:	e28dd008 	add	sp, sp, #8
   126ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   126b0:	e12fff13 	bx	r3
   126b4:	e3a020c8 	mov	r2, #200	; 0xc8
   126b8:	e59f1038 	ldr	r1, [pc, #56]	; 126f8 <CUSBHIDDevice::StartRequest()+0xdc>
   126bc:	e59f0038 	ldr	r0, [pc, #56]	; 126fc <CUSBHIDDevice::StartRequest()+0xe0>
   126c0:	eb004852 	bl	24810 <assertion_failed>
   126c4:	e3a020c9 	mov	r2, #201	; 0xc9
   126c8:	e59f1028 	ldr	r1, [pc, #40]	; 126f8 <CUSBHIDDevice::StartRequest()+0xdc>
   126cc:	e59f002c 	ldr	r0, [pc, #44]	; 12700 <CUSBHIDDevice::StartRequest()+0xe4>
   126d0:	eb00484e 	bl	24810 <assertion_failed>
   126d4:	e3a020cb 	mov	r2, #203	; 0xcb
   126d8:	e59f1018 	ldr	r1, [pc, #24]	; 126f8 <CUSBHIDDevice::StartRequest()+0xdc>
   126dc:	e59f0020 	ldr	r0, [pc, #32]	; 12704 <CUSBHIDDevice::StartRequest()+0xe8>
   126e0:	eb00484a 	bl	24810 <assertion_failed>
   126e4:	e3a020cc 	mov	r2, #204	; 0xcc
   126e8:	e59f1008 	ldr	r1, [pc, #8]	; 126f8 <CUSBHIDDevice::StartRequest()+0xdc>
   126ec:	e59f0014 	ldr	r0, [pc, #20]	; 12708 <CUSBHIDDevice::StartRequest()+0xec>
   126f0:	eb004846 	bl	24810 <assertion_failed>
   126f4:	000127f4 	.word	0x000127f4
   126f8:	00040a80 	.word	0x00040a80
   126fc:	00040b44 	.word	0x00040b44
   12700:	00040b10 	.word	0x00040b10
   12704:	00040b38 	.word	0x00040b38
   12708:	00040ae0 	.word	0x00040ae0

0001270c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   1270c:	e92d4070 	push	{r4, r5, r6, lr}
   12710:	e2515000 	subs	r5, r1, #0
   12714:	0a000029 	beq	127c0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xb4>
   12718:	e590301c 	ldr	r3, [r0, #28]
   1271c:	e1a04000 	mov	r4, r0
   12720:	e1550003 	cmp	r5, r3
   12724:	1a000029 	bne	127d0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   12728:	e1a00005 	mov	r0, r5
   1272c:	eb000778 	bl	14514 <CUSBRequest::GetStatus() const>
   12730:	e2502000 	subs	r2, r0, #0
   12734:	e5943000 	ldr	r3, [r4]
   12738:	1a000017 	bne	1279c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x90>
   1273c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   12740:	e1a01002 	mov	r1, r2
   12744:	e1a00004 	mov	r0, r4
   12748:	e12fff33 	blx	r3
   1274c:	e594501c 	ldr	r5, [r4, #28]
   12750:	e3550000 	cmp	r5, #0
   12754:	0a000004 	beq	1276c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x60>
   12758:	e1a00005 	mov	r0, r5
   1275c:	eb00075c 	bl	144d4 <CUSBRequest::~CUSBRequest()>
   12760:	e1a00005 	mov	r0, r5
   12764:	e3a01028 	mov	r1, #40	; 0x28
   12768:	eb0007d2 	bl	146b8 <CUSBRequest::operator delete(void*, unsigned int)>
   1276c:	e3a03000 	mov	r3, #0
   12770:	e1a00004 	mov	r0, r4
   12774:	e584301c 	str	r3, [r4, #28]
   12778:	ebffffa7 	bl	1261c <CUSBHIDDevice::StartRequest()>
   1277c:	e3500000 	cmp	r0, #0
   12780:	18bd8070 	popne	{r4, r5, r6, pc}
   12784:	eb005114 	bl	26bdc <CLogger::Get()>
   12788:	e8bd4070 	pop	{r4, r5, r6, lr}
   1278c:	e59f304c 	ldr	r3, [pc, #76]	; 127e0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   12790:	e3a02001 	mov	r2, #1
   12794:	e59f1048 	ldr	r1, [pc, #72]	; 127e4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   12798:	ea00504c 	b	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1279c:	e1a00005 	mov	r0, r5
   127a0:	e5946020 	ldr	r6, [r4, #32]
   127a4:	e5935024 	ldr	r5, [r3, #36]	; 0x24
   127a8:	eb00075b 	bl	1451c <CUSBRequest::GetResultLength() const>
   127ac:	e1a01006 	mov	r1, r6
   127b0:	e1a02000 	mov	r2, r0
   127b4:	e1a00004 	mov	r0, r4
   127b8:	e12fff35 	blx	r5
   127bc:	eaffffe2 	b	1274c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x40>
   127c0:	e3a020d6 	mov	r2, #214	; 0xd6
   127c4:	e59f101c 	ldr	r1, [pc, #28]	; 127e8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   127c8:	e59f001c 	ldr	r0, [pc, #28]	; 127ec <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   127cc:	eb00480f 	bl	24810 <assertion_failed>
   127d0:	e3a020d7 	mov	r2, #215	; 0xd7
   127d4:	e59f100c 	ldr	r1, [pc, #12]	; 127e8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   127d8:	e59f0010 	ldr	r0, [pc, #16]	; 127f0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   127dc:	eb00480b 	bl	24810 <assertion_failed>
   127e0:	00040b6c 	.word	0x00040b6c
   127e4:	00040a48 	.word	0x00040a48
   127e8:	00040a80 	.word	0x00040a80
   127ec:	0003f31c 	.word	0x0003f31c
   127f0:	00040b5c 	.word	0x00040b5c

000127f4 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   127f4:	e3520000 	cmp	r2, #0
   127f8:	0a000002 	beq	12808 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   127fc:	e1a01000 	mov	r1, r0
   12800:	e1a00002 	mov	r0, r2
   12804:	eaffffc0 	b	1270c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   12808:	e92d4010 	push	{r4, lr}
   1280c:	e3a020ee 	mov	r2, #238	; 0xee
   12810:	e59f1004 	ldr	r1, [pc, #4]	; 1281c <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   12814:	e59f0004 	ldr	r0, [pc, #4]	; 12820 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   12818:	eb0047fc 	bl	24810 <assertion_failed>
   1281c:	00040a80 	.word	0x00040a80
   12820:	0003f230 	.word	0x0003f230

00012824 <CUSBHostController::CUSBHostController()>:
   12824:	e59f3004 	ldr	r3, [pc, #4]	; 12830 <CUSBHostController::CUSBHostController()+0xc>
   12828:	e5803000 	str	r3, [r0]
   1282c:	e12fff1e 	bx	lr
   12830:	00040b8c 	.word	0x00040b8c

00012834 <CUSBHostController::~CUSBHostController()>:
   12834:	e12fff1e 	bx	lr

00012838 <CUSBHostController::~CUSBHostController()>:
   12838:	e92d4010 	push	{r4, lr}
   1283c:	e1a04000 	mov	r4, r0
   12840:	e3a01004 	mov	r1, #4
   12844:	eb00621c 	bl	2b0bc <operator delete(void*, unsigned int)>
   12848:	e1a00004 	mov	r0, r4
   1284c:	e8bd8010 	pop	{r4, pc}

00012850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
   12850:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12854:	e1a06000 	mov	r6, r0
   12858:	e24dd034 	sub	sp, sp, #52	; 0x34
   1285c:	e3a00008 	mov	r0, #8
   12860:	e1dd56b4 	ldrh	r5, [sp, #100]	; 0x64
   12864:	e1a0a002 	mov	sl, r2
   12868:	e1a09003 	mov	r9, r3
   1286c:	e1dd85b8 	ldrh	r8, [sp, #88]	; 0x58
   12870:	e1dd75bc 	ldrh	r7, [sp, #92]	; 0x5c
   12874:	e1a0b001 	mov	fp, r1
   12878:	eb006201 	bl	2b084 <operator new(unsigned int)>
   1287c:	e1a04000 	mov	r4, r0
   12880:	e58d0000 	str	r0, [sp]
   12884:	e1a02428 	lsr	r2, r8, #8
   12888:	e5c0a000 	strb	sl, [r0]
   1288c:	e5c09001 	strb	r9, [r0, #1]
   12890:	e1a00427 	lsr	r0, r7, #8
   12894:	e1a0c425 	lsr	ip, r5, #8
   12898:	e1a0100b 	mov	r1, fp
   1289c:	e5c42003 	strb	r2, [r4, #3]
   128a0:	e1a03005 	mov	r3, r5
   128a4:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
   128a8:	e5c40005 	strb	r0, [r4, #5]
   128ac:	e28d0008 	add	r0, sp, #8
   128b0:	e5c4c007 	strb	ip, [r4, #7]
   128b4:	e5c48002 	strb	r8, [r4, #2]
   128b8:	e5c47004 	strb	r7, [r4, #4]
   128bc:	e5c45006 	strb	r5, [r4, #6]
   128c0:	eb0006e2 	bl	14450 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   128c4:	e5963000 	ldr	r3, [r6]
   128c8:	e1a00006 	mov	r0, r6
   128cc:	e5933008 	ldr	r3, [r3, #8]
   128d0:	e28d1008 	add	r1, sp, #8
   128d4:	e3a02000 	mov	r2, #0
   128d8:	e12fff33 	blx	r3
   128dc:	e3500000 	cmp	r0, #0
   128e0:	0a00000a 	beq	12910 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xc0>
   128e4:	e28d0008 	add	r0, sp, #8
   128e8:	eb00070b 	bl	1451c <CUSBRequest::GetResultLength() const>
   128ec:	e1a05000 	mov	r5, r0
   128f0:	e1a00004 	mov	r0, r4
   128f4:	e3a01008 	mov	r1, #8
   128f8:	eb0061ef 	bl	2b0bc <operator delete(void*, unsigned int)>
   128fc:	e28d0008 	add	r0, sp, #8
   12900:	eb0006f3 	bl	144d4 <CUSBRequest::~CUSBRequest()>
   12904:	e1a00005 	mov	r0, r5
   12908:	e28dd034 	add	sp, sp, #52	; 0x34
   1290c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12910:	e3e05000 	mvn	r5, #0
   12914:	eafffff5 	b	128f0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa0>

00012918 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
   12918:	e92d4030 	push	{r4, r5, lr}
   1291c:	e59d500c 	ldr	r5, [sp, #12]
   12920:	e5dd4014 	ldrb	r4, [sp, #20]
   12924:	e1dde1b8 	ldrh	lr, [sp, #24]
   12928:	e1ddc1b0 	ldrh	ip, [sp, #16]
   1292c:	e1833402 	orr	r3, r3, r2, lsl #8
   12930:	e58d300c 	str	r3, [sp, #12]
   12934:	e58d5014 	str	r5, [sp, #20]
   12938:	e1a02004 	mov	r2, r4
   1293c:	e58de010 	str	lr, [sp, #16]
   12940:	e58dc018 	str	ip, [sp, #24]
   12944:	e3a03006 	mov	r3, #6
   12948:	e8bd4030 	pop	{r4, r5, lr}
   1294c:	eaffffbf 	b	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

00012950 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
   12950:	e92d4010 	push	{r4, lr}
   12954:	e3a04000 	mov	r4, #0
   12958:	e24dd010 	sub	sp, sp, #16
   1295c:	e58d2000 	str	r2, [sp]
   12960:	e58d400c 	str	r4, [sp, #12]
   12964:	e58d4008 	str	r4, [sp, #8]
   12968:	e58d4004 	str	r4, [sp, #4]
   1296c:	e1a02004 	mov	r2, r4
   12970:	e3a03005 	mov	r3, #5
   12974:	ebffffb5 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12978:	e1500004 	cmp	r0, r4
   1297c:	b1a00004 	movlt	r0, r4
   12980:	ba000003 	blt	12994 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
   12984:	eb005d61 	bl	29f10 <CTimer::Get()>
   12988:	e3a00032 	mov	r0, #50	; 0x32
   1298c:	eb005d26 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
   12990:	e3a00001 	mov	r0, #1
   12994:	e28dd010 	add	sp, sp, #16
   12998:	e8bd8010 	pop	{r4, pc}

0001299c <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
   1299c:	e92d4010 	push	{r4, lr}
   129a0:	e3a04000 	mov	r4, #0
   129a4:	e24dd010 	sub	sp, sp, #16
   129a8:	e58d2000 	str	r2, [sp]
   129ac:	e58d400c 	str	r4, [sp, #12]
   129b0:	e58d4008 	str	r4, [sp, #8]
   129b4:	e58d4004 	str	r4, [sp, #4]
   129b8:	e1a02004 	mov	r2, r4
   129bc:	e3a03009 	mov	r3, #9
   129c0:	ebffffa2 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   129c4:	e1500004 	cmp	r0, r4
   129c8:	b1a00004 	movlt	r0, r4
   129cc:	ba000003 	blt	129e0 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
   129d0:	eb005d4e 	bl	29f10 <CTimer::Get()>
   129d4:	e3a00032 	mov	r0, #50	; 0x32
   129d8:	eb005d13 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
   129dc:	e3a00001 	mov	r0, #1
   129e0:	e28dd010 	add	sp, sp, #16
   129e4:	e8bd8010 	pop	{r4, pc}

000129e8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
   129e8:	e3a0c000 	mov	ip, #0
   129ec:	e92d4010 	push	{r4, lr}
   129f0:	e1a04000 	mov	r4, r0
   129f4:	e24dd030 	sub	sp, sp, #48	; 0x30
   129f8:	e58dc000 	str	ip, [sp]
   129fc:	e28d0008 	add	r0, sp, #8
   12a00:	eb000692 	bl	14450 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   12a04:	e5943000 	ldr	r3, [r4]
   12a08:	e1a00004 	mov	r0, r4
   12a0c:	e5933008 	ldr	r3, [r3, #8]
   12a10:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   12a14:	e28d1008 	add	r1, sp, #8
   12a18:	e12fff33 	blx	r3
   12a1c:	e3500000 	cmp	r0, #0
   12a20:	0a000007 	beq	12a44 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
   12a24:	e28d0008 	add	r0, sp, #8
   12a28:	eb0006bb 	bl	1451c <CUSBRequest::GetResultLength() const>
   12a2c:	e1a04000 	mov	r4, r0
   12a30:	e28d0008 	add	r0, sp, #8
   12a34:	eb0006a6 	bl	144d4 <CUSBRequest::~CUSBRequest()>
   12a38:	e1a00004 	mov	r0, r4
   12a3c:	e28dd030 	add	sp, sp, #48	; 0x30
   12a40:	e8bd8010 	pop	{r4, pc}
   12a44:	e3e04000 	mvn	r4, #0
   12a48:	eafffff8 	b	12a30 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

00012a4c <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
   12a4c:	e1c022f0 	strd	r2, [r0, #32]
   12a50:	e1a01003 	mov	r1, r3
   12a54:	e1a00002 	mov	r0, r2
   12a58:	e12fff1e 	bx	lr

00012a5c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   12a5c:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   12a60:	e59f30ec 	ldr	r3, [pc, #236]	; 12b54 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xf8>
   12a64:	e3520000 	cmp	r2, #0
   12a68:	e92d4070 	push	{r4, r5, r6, lr}
   12a6c:	e1a04000 	mov	r4, r0
   12a70:	e5803000 	str	r3, [r0]
   12a74:	1a000021 	bne	12b00 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xa4>
   12a78:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   12a7c:	e3550000 	cmp	r5, #0
   12a80:	0a000004 	beq	12a98 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x3c>
   12a84:	e1a00005 	mov	r0, r5
   12a88:	eb001973 	bl	1905c <CPartitionManager::~CPartitionManager()>
   12a8c:	e1a00005 	mov	r0, r5
   12a90:	e3a01024 	mov	r1, #36	; 0x24
   12a94:	eb006188 	bl	2b0bc <operator delete(void*, unsigned int)>
   12a98:	e3a03000 	mov	r3, #0
   12a9c:	e5945014 	ldr	r5, [r4, #20]
   12aa0:	e5843028 	str	r3, [r4, #40]	; 0x28
   12aa4:	e1550003 	cmp	r5, r3
   12aa8:	0a000004 	beq	12ac0 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x64>
   12aac:	e1a00005 	mov	r0, r5
   12ab0:	ebfff225 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   12ab4:	e1a00005 	mov	r0, r5
   12ab8:	e3a01014 	mov	r1, #20
   12abc:	eb00617e 	bl	2b0bc <operator delete(void*, unsigned int)>
   12ac0:	e3a03000 	mov	r3, #0
   12ac4:	e5945010 	ldr	r5, [r4, #16]
   12ac8:	e5843014 	str	r3, [r4, #20]
   12acc:	e1550003 	cmp	r5, r3
   12ad0:	0a000004 	beq	12ae8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x8c>
   12ad4:	e1a00005 	mov	r0, r5
   12ad8:	ebfff21b 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   12adc:	e1a00005 	mov	r0, r5
   12ae0:	e3a01014 	mov	r1, #20
   12ae4:	eb006174 	bl	2b0bc <operator delete(void*, unsigned int)>
   12ae8:	e3a03000 	mov	r3, #0
   12aec:	e1a00004 	mov	r0, r4
   12af0:	e5843010 	str	r3, [r4, #16]
   12af4:	ebfff280 	bl	f4fc <CUSBFunction::~CUSBFunction()>
   12af8:	e1a00004 	mov	r0, r4
   12afc:	e8bd8070 	pop	{r4, r5, r6, pc}
   12b00:	eb004a1c 	bl	25378 <CDeviceNameService::Get()>
   12b04:	e3a03001 	mov	r3, #1
   12b08:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   12b0c:	e59f1044 	ldr	r1, [pc, #68]	; 12b58 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xfc>
   12b10:	eb004a3f 	bl	25414 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   12b14:	e3a03001 	mov	r3, #1
   12b18:	e59f103c 	ldr	r1, [pc, #60]	; 12b5c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x100>
   12b1c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12b20:	e5912000 	ldr	r2, [r1]
   12b24:	e1a03013 	lsl	r3, r3, r0
   12b28:	e1130002 	tst	r3, r2
   12b2c:	0a000004 	beq	12b44 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xe8>
   12b30:	e3a00000 	mov	r0, #0
   12b34:	e1c23003 	bic	r3, r2, r3
   12b38:	e5813000 	str	r3, [r1]
   12b3c:	e584002c 	str	r0, [r4, #44]	; 0x2c
   12b40:	eaffffcc 	b	12a78 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x1c>
   12b44:	e3a020d4 	mov	r2, #212	; 0xd4
   12b48:	e59f1010 	ldr	r1, [pc, #16]	; 12b60 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x104>
   12b4c:	e59f0010 	ldr	r0, [pc, #16]	; 12b64 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x108>
   12b50:	eb00472e 	bl	24810 <assertion_failed>
   12b54:	00040ba4 	.word	0x00040ba4
   12b58:	00040bd0 	.word	0x00040bd0
   12b5c:	0004e1f8 	.word	0x0004e1f8
   12b60:	00040bd8 	.word	0x00040bd8
   12b64:	00040bec 	.word	0x00040bec

00012b68 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   12b68:	e92d4010 	push	{r4, lr}
   12b6c:	e1a04000 	mov	r4, r0
   12b70:	ebffffb9 	bl	12a5c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   12b74:	e1a00004 	mov	r0, r4
   12b78:	e3a01030 	mov	r1, #48	; 0x30
   12b7c:	eb00614e 	bl	2b0bc <operator delete(void*, unsigned int)>
   12b80:	e1a00004 	mov	r0, r4
   12b84:	e8bd8010 	pop	{r4, pc}

00012b88 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   12b88:	e92d4010 	push	{r4, lr}
   12b8c:	e1a04000 	mov	r4, r0
   12b90:	ebfff2ea 	bl	f740 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   12b94:	e3a03000 	mov	r3, #0
   12b98:	e3a00000 	mov	r0, #0
   12b9c:	e3a01000 	mov	r1, #0
   12ba0:	e59f2024 	ldr	r2, [pc, #36]	; 12bcc <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x44>
   12ba4:	e1c402f0 	strd	r0, [r4, #32]
   12ba8:	e5842000 	str	r2, [r4]
   12bac:	e5843010 	str	r3, [r4, #16]
   12bb0:	e5843014 	str	r3, [r4, #20]
   12bb4:	e5843018 	str	r3, [r4, #24]
   12bb8:	e584301c 	str	r3, [r4, #28]
   12bbc:	e5843028 	str	r3, [r4, #40]	; 0x28
   12bc0:	e584302c 	str	r3, [r4, #44]	; 0x2c
   12bc4:	e1a00004 	mov	r0, r4
   12bc8:	e8bd8010 	pop	{r4, pc}
   12bcc:	00040ba4 	.word	0x00040ba4

00012bd0 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   12bd0:	e590001c 	ldr	r0, [r0, #28]
   12bd4:	e12fff1e 	bx	lr

00012bd8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
   12bd8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12bdc:	e2519000 	subs	r9, r1, #0
   12be0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   12be4:	e59d5058 	ldr	r5, [sp, #88]	; 0x58
   12be8:	e5dd805c 	ldrb	r8, [sp, #92]	; 0x5c
   12bec:	0a000059 	beq	12d58 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x180>
   12bf0:	e1a07003 	mov	r7, r3
   12bf4:	e2423006 	sub	r3, r2, #6
   12bf8:	e353000a 	cmp	r3, #10
   12bfc:	e1a06002 	mov	r6, r2
   12c00:	8a000058 	bhi	12d68 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x190>
   12c04:	e2973000 	adds	r3, r7, #0
   12c08:	13a03001 	movne	r3, #1
   12c0c:	e3550000 	cmp	r5, #0
   12c10:	03833001 	orreq	r3, r3, #1
   12c14:	e3530000 	cmp	r3, #0
   12c18:	0a000056 	beq	12d78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1a0>
   12c1c:	e1a04000 	mov	r4, r0
   12c20:	e3a0201f 	mov	r2, #31
   12c24:	e3a01000 	mov	r1, #0
   12c28:	e28d0018 	add	r0, sp, #24
   12c2c:	eb005cc4 	bl	29f44 <memset>
   12c30:	e3580000 	cmp	r8, #0
   12c34:	13a0e080 	movne	lr, #128	; 0x80
   12c38:	03a0e000 	moveq	lr, #0
   12c3c:	e5dd0026 	ldrb	r0, [sp, #38]	; 0x26
   12c40:	e5943018 	ldr	r3, [r4, #24]
   12c44:	e3c0201f 	bic	r2, r0, #31
   12c48:	e5ddc025 	ldrb	ip, [sp, #37]	; 0x25
   12c4c:	e206001f 	and	r0, r6, #31
   12c50:	e2833001 	add	r3, r3, #1
   12c54:	e1800002 	orr	r0, r0, r2
   12c58:	e1a02006 	mov	r2, r6
   12c5c:	e59f61e4 	ldr	r6, [pc, #484]	; 12e48 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x270>
   12c60:	e5843018 	str	r3, [r4, #24]
   12c64:	e3ccc00f 	bic	ip, ip, #15
   12c68:	e1a01009 	mov	r1, r9
   12c6c:	e5cd0026 	strb	r0, [sp, #38]	; 0x26
   12c70:	e28d0027 	add	r0, sp, #39	; 0x27
   12c74:	e58d301c 	str	r3, [sp, #28]
   12c78:	e5cdc025 	strb	ip, [sp, #37]	; 0x25
   12c7c:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   12c80:	e58d6018 	str	r6, [sp, #24]
   12c84:	e58d5020 	str	r5, [sp, #32]
   12c88:	eb005f24 	bl	2a920 <memcpy>
   12c8c:	e1a00004 	mov	r0, r4
   12c90:	ebfff31c 	bl	f908 <CUSBFunction::GetHost() const>
   12c94:	e2506000 	subs	r6, r0, #0
   12c98:	0a00003a 	beq	12d88 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1b0>
   12c9c:	e3a09000 	mov	r9, #0
   12ca0:	e5941014 	ldr	r1, [r4, #20]
   12ca4:	e28d2018 	add	r2, sp, #24
   12ca8:	e58d9000 	str	r9, [sp]
   12cac:	e3a0301f 	mov	r3, #31
   12cb0:	ebffff4c 	bl	129e8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12cb4:	e1500009 	cmp	r0, r9
   12cb8:	ba00005b 	blt	12e2c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x254>
   12cbc:	e3550000 	cmp	r5, #0
   12cc0:	0a00000a 	beq	12cf0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x118>
   12cc4:	e5940010 	ldr	r0, [r4, #16]
   12cc8:	e3580000 	cmp	r8, #0
   12ccc:	e5941014 	ldr	r1, [r4, #20]
   12cd0:	e1a03005 	mov	r3, r5
   12cd4:	11a01000 	movne	r1, r0
   12cd8:	e58d9000 	str	r9, [sp]
   12cdc:	e1a02007 	mov	r2, r7
   12ce0:	e1a00006 	mov	r0, r6
   12ce4:	ebffff3f 	bl	129e8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12ce8:	e2505000 	subs	r5, r0, #0
   12cec:	ba000029 	blt	12d98 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c0>
   12cf0:	e3a03000 	mov	r3, #0
   12cf4:	e5941010 	ldr	r1, [r4, #16]
   12cf8:	e1a00006 	mov	r0, r6
   12cfc:	e58d3000 	str	r3, [sp]
   12d00:	e28d2008 	add	r2, sp, #8
   12d04:	e3a0300d 	mov	r3, #13
   12d08:	ebffff36 	bl	129e8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12d0c:	e350000d 	cmp	r0, #13
   12d10:	1a000027 	bne	12db4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1dc>
   12d14:	e59f3130 	ldr	r3, [pc, #304]	; 12e4c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   12d18:	e59d2008 	ldr	r2, [sp, #8]
   12d1c:	e1520003 	cmp	r2, r3
   12d20:	1a00002a 	bne	12dd0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1f8>
   12d24:	e5943018 	ldr	r3, [r4, #24]
   12d28:	e59d200c 	ldr	r2, [sp, #12]
   12d2c:	e1520003 	cmp	r2, r3
   12d30:	1a00002d 	bne	12dec <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x214>
   12d34:	e5dd3014 	ldrb	r3, [sp, #20]
   12d38:	e3530000 	cmp	r3, #0
   12d3c:	1a000031 	bne	12e08 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x230>
   12d40:	e59d3010 	ldr	r3, [sp, #16]
   12d44:	e3530000 	cmp	r3, #0
   12d48:	1a000030 	bne	12e10 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x238>
   12d4c:	e1a00005 	mov	r0, r5
   12d50:	e28dd03c 	add	sp, sp, #60	; 0x3c
   12d54:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12d58:	e3a02f8e 	mov	r2, #568	; 0x238
   12d5c:	e59f10ec 	ldr	r1, [pc, #236]	; 12e50 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12d60:	e59f00ec 	ldr	r0, [pc, #236]	; 12e54 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x27c>
   12d64:	eb0046a9 	bl	24810 <assertion_failed>
   12d68:	e59f20e8 	ldr	r2, [pc, #232]	; 12e58 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x280>
   12d6c:	e59f10dc 	ldr	r1, [pc, #220]	; 12e50 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12d70:	e59f00e4 	ldr	r0, [pc, #228]	; 12e5c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x284>
   12d74:	eb0046a5 	bl	24810 <assertion_failed>
   12d78:	e59f20e0 	ldr	r2, [pc, #224]	; 12e60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x288>
   12d7c:	e59f10cc 	ldr	r1, [pc, #204]	; 12e50 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12d80:	e59f00dc 	ldr	r0, [pc, #220]	; 12e64 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x28c>
   12d84:	eb0046a1 	bl	24810 <assertion_failed>
   12d88:	e59f20d8 	ldr	r2, [pc, #216]	; 12e68 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
   12d8c:	e59f10bc 	ldr	r1, [pc, #188]	; 12e50 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12d90:	e59f00d4 	ldr	r0, [pc, #212]	; 12e6c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x294>
   12d94:	eb00469d 	bl	24810 <assertion_failed>
   12d98:	eb004f8f 	bl	26bdc <CLogger::Get()>
   12d9c:	e59f30cc 	ldr	r3, [pc, #204]	; 12e70 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12da0:	e3a02001 	mov	r2, #1
   12da4:	e59f10c8 	ldr	r1, [pc, #200]	; 12e74 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12da8:	eb004ec8 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12dac:	e3e05000 	mvn	r5, #0
   12db0:	eaffffe5 	b	12d4c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12db4:	eb004f88 	bl	26bdc <CLogger::Get()>
   12db8:	e59f30b8 	ldr	r3, [pc, #184]	; 12e78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a0>
   12dbc:	e3a02001 	mov	r2, #1
   12dc0:	e59f10ac 	ldr	r1, [pc, #172]	; 12e74 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12dc4:	eb004ec1 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12dc8:	e3e05000 	mvn	r5, #0
   12dcc:	eaffffde 	b	12d4c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12dd0:	eb004f81 	bl	26bdc <CLogger::Get()>
   12dd4:	e59f30a0 	ldr	r3, [pc, #160]	; 12e7c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a4>
   12dd8:	e3a02001 	mov	r2, #1
   12ddc:	e59f1090 	ldr	r1, [pc, #144]	; 12e74 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12de0:	eb004eba 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12de4:	e3e05000 	mvn	r5, #0
   12de8:	eaffffd7 	b	12d4c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12dec:	eb004f7a 	bl	26bdc <CLogger::Get()>
   12df0:	e59f3088 	ldr	r3, [pc, #136]	; 12e80 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   12df4:	e3a02001 	mov	r2, #1
   12df8:	e59f1074 	ldr	r1, [pc, #116]	; 12e74 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12dfc:	eb004eb3 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12e00:	e3e05000 	mvn	r5, #0
   12e04:	eaffffd0 	b	12d4c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12e08:	e3e05000 	mvn	r5, #0
   12e0c:	eaffffce 	b	12d4c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12e10:	eb004f71 	bl	26bdc <CLogger::Get()>
   12e14:	e59f3068 	ldr	r3, [pc, #104]	; 12e84 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2ac>
   12e18:	e3a02001 	mov	r2, #1
   12e1c:	e59f1050 	ldr	r1, [pc, #80]	; 12e74 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12e20:	eb004eaa 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12e24:	e3e05000 	mvn	r5, #0
   12e28:	eaffffc7 	b	12d4c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12e2c:	eb004f6a 	bl	26bdc <CLogger::Get()>
   12e30:	e59f3050 	ldr	r3, [pc, #80]	; 12e88 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b0>
   12e34:	e3a02001 	mov	r2, #1
   12e38:	e59f1034 	ldr	r1, [pc, #52]	; 12e74 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12e3c:	eb004ea3 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12e40:	e3e05000 	mvn	r5, #0
   12e44:	eaffffc0 	b	12d4c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12e48:	43425355 	.word	0x43425355
   12e4c:	53425355 	.word	0x53425355
   12e50:	00040bd8 	.word	0x00040bd8
   12e54:	00040c18 	.word	0x00040c18
   12e58:	00000239 	.word	0x00000239
   12e5c:	00040c28 	.word	0x00040c28
   12e60:	0000023a 	.word	0x0000023a
   12e64:	00040c4c 	.word	0x00040c4c
   12e68:	00000249 	.word	0x00000249
   12e6c:	00040c6c 	.word	0x00040c6c
   12e70:	00040c8c 	.word	0x00040c8c
   12e74:	00040bc8 	.word	0x00040bc8
   12e78:	00040ca4 	.word	0x00040ca4
   12e7c:	00040cb8 	.word	0x00040cb8
   12e80:	00040cd0 	.word	0x00040cd0
   12e84:	00040ce4 	.word	0x00040ce4
   12e88:	00040c78 	.word	0x00040c78

00012e8c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
   12e8c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12e90:	e3510000 	cmp	r1, #0
   12e94:	e24dd01c 	sub	sp, sp, #28
   12e98:	0a000034 	beq	12f70 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xe4>
   12e9c:	e1c062d0 	ldrd	r6, [r0, #32]
   12ea0:	e3a03000 	mov	r3, #0
   12ea4:	e1a04002 	mov	r4, r2
   12ea8:	e59f20ec 	ldr	r2, [pc, #236]	; 12f9c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x110>
   12eac:	e0033007 	and	r3, r3, r7
   12eb0:	e0022006 	and	r2, r2, r6
   12eb4:	e1923003 	orrs	r3, r2, r3
   12eb8:	e3e08000 	mvn	r8, #0
   12ebc:	13a03001 	movne	r3, #1
   12ec0:	03a03000 	moveq	r3, #0
   12ec4:	e59f90d0 	ldr	r9, [pc, #208]	; 12f9c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x110>
   12ec8:	e1570009 	cmp	r7, r9
   12ecc:	01560008 	cmpeq	r6, r8
   12ed0:	83833001 	orrhi	r3, r3, #1
   12ed4:	e3530000 	cmp	r3, #0
   12ed8:	1a000020 	bne	12f60 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd4>
   12edc:	e1a0cb84 	lsl	ip, r4, #23
   12ee0:	e1a0cbac 	lsr	ip, ip, #23
   12ee4:	e1a024a6 	lsr	r2, r6, #9
   12ee8:	e35c0000 	cmp	ip, #0
   12eec:	e1822b87 	orr	r2, r2, r7, lsl #23
   12ef0:	1a00001a 	bne	12f60 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd4>
   12ef4:	e3a05001 	mov	r5, #1
   12ef8:	e3a06028 	mov	r6, #40	; 0x28
   12efc:	e1a0e4a4 	lsr	lr, r4, #9
   12f00:	e6bf2f32 	rev	r2, r2
   12f04:	e6bfefbe 	rev16	lr, lr
   12f08:	e6ffe07e 	uxth	lr, lr
   12f0c:	e1cd20be 	strh	r2, [sp, #14]
   12f10:	e1a02822 	lsr	r2, r2, #16
   12f14:	e1a03001 	mov	r3, r1
   12f18:	e1cd21b0 	strh	r2, [sp, #16]
   12f1c:	e1a0742e 	lsr	r7, lr, #8
   12f20:	e58d4000 	str	r4, [sp]
   12f24:	e58d5004 	str	r5, [sp, #4]
   12f28:	e3a0200a 	mov	r2, #10
   12f2c:	e28d100c 	add	r1, sp, #12
   12f30:	e5cdc00d 	strb	ip, [sp, #13]
   12f34:	e5cdc012 	strb	ip, [sp, #18]
   12f38:	e5cdc015 	strb	ip, [sp, #21]
   12f3c:	e5cde013 	strb	lr, [sp, #19]
   12f40:	e5cd7014 	strb	r7, [sp, #20]
   12f44:	e5cd600c 	strb	r6, [sp, #12]
   12f48:	ebffff22 	bl	12bd8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12f4c:	e1500004 	cmp	r0, r4
   12f50:	1a00000a 	bne	12f80 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf4>
   12f54:	e1a00004 	mov	r0, r4
   12f58:	e28dd01c 	add	sp, sp, #28
   12f5c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12f60:	e3e04000 	mvn	r4, #0
   12f64:	e1a00004 	mov	r0, r4
   12f68:	e28dd01c 	add	sp, sp, #28
   12f6c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12f70:	e59f2028 	ldr	r2, [pc, #40]	; 12fa0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x114>
   12f74:	e59f1028 	ldr	r1, [pc, #40]	; 12fa4 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x118>
   12f78:	e59f0028 	ldr	r0, [pc, #40]	; 12fa8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x11c>
   12f7c:	eb004623 	bl	24810 <assertion_failed>
   12f80:	eb004f15 	bl	26bdc <CLogger::Get()>
   12f84:	e1a02005 	mov	r2, r5
   12f88:	e59f301c 	ldr	r3, [pc, #28]	; 12fac <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x120>
   12f8c:	e59f101c 	ldr	r1, [pc, #28]	; 12fb0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x124>
   12f90:	eb004e4e 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12f94:	e3e04000 	mvn	r4, #0
   12f98:	eaffffed 	b	12f54 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc8>
   12f9c:	000001ff 	.word	0x000001ff
   12fa0:	000001ed 	.word	0x000001ed
   12fa4:	00040bd8 	.word	0x00040bd8
   12fa8:	00040c5c 	.word	0x00040c5c
   12fac:	00040cfc 	.word	0x00040cfc
   12fb0:	00040bc8 	.word	0x00040bc8

00012fb4 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
   12fb4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12fb8:	e3510000 	cmp	r1, #0
   12fbc:	e24dd01c 	sub	sp, sp, #28
   12fc0:	0a000032 	beq	13090 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xdc>
   12fc4:	e1c062d0 	ldrd	r6, [r0, #32]
   12fc8:	e3a03000 	mov	r3, #0
   12fcc:	e1a04002 	mov	r4, r2
   12fd0:	e59f20e4 	ldr	r2, [pc, #228]	; 130bc <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x108>
   12fd4:	e0033007 	and	r3, r3, r7
   12fd8:	e0022006 	and	r2, r2, r6
   12fdc:	e1923003 	orrs	r3, r2, r3
   12fe0:	e3e08000 	mvn	r8, #0
   12fe4:	13a03001 	movne	r3, #1
   12fe8:	03a03000 	moveq	r3, #0
   12fec:	e59f90c8 	ldr	r9, [pc, #200]	; 130bc <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x108>
   12ff0:	e1570009 	cmp	r7, r9
   12ff4:	01560008 	cmpeq	r6, r8
   12ff8:	83833001 	orrhi	r3, r3, #1
   12ffc:	e3530000 	cmp	r3, #0
   13000:	1a00001f 	bne	13084 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd0>
   13004:	e1a0cb84 	lsl	ip, r4, #23
   13008:	e1a0cbac 	lsr	ip, ip, #23
   1300c:	e1a024a6 	lsr	r2, r6, #9
   13010:	e35c0000 	cmp	ip, #0
   13014:	e1822b87 	orr	r2, r2, r7, lsl #23
   13018:	1a000019 	bne	13084 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd0>
   1301c:	e3a05008 	mov	r5, #8
   13020:	e3a0602a 	mov	r6, #42	; 0x2a
   13024:	e1a0e4a4 	lsr	lr, r4, #9
   13028:	e6bf2f32 	rev	r2, r2
   1302c:	e6bfefbe 	rev16	lr, lr
   13030:	e6ffe07e 	uxth	lr, lr
   13034:	e1cd20be 	strh	r2, [sp, #14]
   13038:	e1a02822 	lsr	r2, r2, #16
   1303c:	e1a03001 	mov	r3, r1
   13040:	e1cd21b0 	strh	r2, [sp, #16]
   13044:	e1a0753e 	lsr	r7, lr, r5
   13048:	e88d1010 	stm	sp, {r4, ip}
   1304c:	e3a0200a 	mov	r2, #10
   13050:	e28d100c 	add	r1, sp, #12
   13054:	e5cdc012 	strb	ip, [sp, #18]
   13058:	e5cdc015 	strb	ip, [sp, #21]
   1305c:	e5cde013 	strb	lr, [sp, #19]
   13060:	e5cd7014 	strb	r7, [sp, #20]
   13064:	e5cd600c 	strb	r6, [sp, #12]
   13068:	e5cd500d 	strb	r5, [sp, #13]
   1306c:	ebfffed9 	bl	12bd8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13070:	e3500000 	cmp	r0, #0
   13074:	a1a00004 	movge	r0, r4
   13078:	ba000008 	blt	130a0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xec>
   1307c:	e28dd01c 	add	sp, sp, #28
   13080:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13084:	e3e00000 	mvn	r0, #0
   13088:	e28dd01c 	add	sp, sp, #28
   1308c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13090:	e59f2028 	ldr	r2, [pc, #40]	; 130c0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x10c>
   13094:	e59f1028 	ldr	r1, [pc, #40]	; 130c4 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x110>
   13098:	e59f0028 	ldr	r0, [pc, #40]	; 130c8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x114>
   1309c:	eb0045db 	bl	24810 <assertion_failed>
   130a0:	eb004ecd 	bl	26bdc <CLogger::Get()>
   130a4:	e59f3020 	ldr	r3, [pc, #32]	; 130cc <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x118>
   130a8:	e3a02001 	mov	r2, #1
   130ac:	e59f101c 	ldr	r1, [pc, #28]	; 130d0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x11c>
   130b0:	eb004e06 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   130b4:	e3e00000 	mvn	r0, #0
   130b8:	eaffffef 	b	1307c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc8>
   130bc:	000001ff 	.word	0x000001ff
   130c0:	00000212 	.word	0x00000212
   130c4:	00040bd8 	.word	0x00040bd8
   130c8:	00040c5c 	.word	0x00040c5c
   130cc:	00040d0c 	.word	0x00040d0c
   130d0:	00040bc8 	.word	0x00040bc8

000130d4 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   130d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   130d8:	e24dd014 	sub	sp, sp, #20
   130dc:	e1a05000 	mov	r5, r0
   130e0:	ebfff208 	bl	f908 <CUSBFunction::GetHost() const>
   130e4:	e2506000 	subs	r6, r0, #0
   130e8:	0a00002e 	beq	131a8 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
   130ec:	e1a00005 	mov	r0, r5
   130f0:	ebfff1f9 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
   130f4:	e3a04000 	mov	r4, #0
   130f8:	e1a01000 	mov	r1, r0
   130fc:	e58d400c 	str	r4, [sp, #12]
   13100:	e58d4008 	str	r4, [sp, #8]
   13104:	e58d4004 	str	r4, [sp, #4]
   13108:	e58d4000 	str	r4, [sp]
   1310c:	e3a030ff 	mov	r3, #255	; 0xff
   13110:	e3a02021 	mov	r2, #33	; 0x21
   13114:	e1a00006 	mov	r0, r6
   13118:	ebfffdcc 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1311c:	e1500004 	cmp	r0, r4
   13120:	ba000024 	blt	131b8 <CUSBBulkOnlyMassStorageDevice::Reset()+0xe4>
   13124:	e1a00005 	mov	r0, r5
   13128:	ebfff1eb 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
   1312c:	e3a07001 	mov	r7, #1
   13130:	e1a01000 	mov	r1, r0
   13134:	e58d400c 	str	r4, [sp, #12]
   13138:	e58d4008 	str	r4, [sp, #8]
   1313c:	e88d0090 	stm	sp, {r4, r7}
   13140:	e1a03007 	mov	r3, r7
   13144:	e3a02002 	mov	r2, #2
   13148:	e1a00006 	mov	r0, r6
   1314c:	ebfffdbf 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13150:	e3500000 	cmp	r0, #0
   13154:	ba00001e 	blt	131d4 <CUSBBulkOnlyMassStorageDevice::Reset()+0x100>
   13158:	e1a00005 	mov	r0, r5
   1315c:	ebfff1de 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
   13160:	e3a02002 	mov	r2, #2
   13164:	e1a01000 	mov	r1, r0
   13168:	e58d400c 	str	r4, [sp, #12]
   1316c:	e58d4008 	str	r4, [sp, #8]
   13170:	e58d4000 	str	r4, [sp]
   13174:	e1a03007 	mov	r3, r7
   13178:	e1a00006 	mov	r0, r6
   1317c:	e58d2004 	str	r2, [sp, #4]
   13180:	ebfffdb2 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13184:	e3500000 	cmp	r0, #0
   13188:	ba000018 	blt	131f0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x11c>
   1318c:	e5950010 	ldr	r0, [r5, #16]
   13190:	ebfff0c9 	bl	f4bc <CUSBEndpoint::ResetPID()>
   13194:	e5950014 	ldr	r0, [r5, #20]
   13198:	ebfff0c7 	bl	f4bc <CUSBEndpoint::ResetPID()>
   1319c:	e1a00004 	mov	r0, r4
   131a0:	e28dd014 	add	sp, sp, #20
   131a4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   131a8:	e3a02fa2 	mov	r2, #648	; 0x288
   131ac:	e59f1058 	ldr	r1, [pc, #88]	; 1320c <CUSBBulkOnlyMassStorageDevice::Reset()+0x138>
   131b0:	e59f0058 	ldr	r0, [pc, #88]	; 13210 <CUSBBulkOnlyMassStorageDevice::Reset()+0x13c>
   131b4:	eb004595 	bl	24810 <assertion_failed>
   131b8:	eb004e87 	bl	26bdc <CLogger::Get()>
   131bc:	e59f3050 	ldr	r3, [pc, #80]	; 13214 <CUSBBulkOnlyMassStorageDevice::Reset()+0x140>
   131c0:	e3a02004 	mov	r2, #4
   131c4:	e59f104c 	ldr	r1, [pc, #76]	; 13218 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   131c8:	eb004dc0 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   131cc:	e3e00000 	mvn	r0, #0
   131d0:	eafffff2 	b	131a0 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   131d4:	eb004e80 	bl	26bdc <CLogger::Get()>
   131d8:	e59f303c 	ldr	r3, [pc, #60]	; 1321c <CUSBBulkOnlyMassStorageDevice::Reset()+0x148>
   131dc:	e3a02004 	mov	r2, #4
   131e0:	e59f1030 	ldr	r1, [pc, #48]	; 13218 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   131e4:	eb004db9 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   131e8:	e3e00000 	mvn	r0, #0
   131ec:	eaffffeb 	b	131a0 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   131f0:	eb004e79 	bl	26bdc <CLogger::Get()>
   131f4:	e59f3024 	ldr	r3, [pc, #36]	; 13220 <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
   131f8:	e3a02004 	mov	r2, #4
   131fc:	e59f1014 	ldr	r1, [pc, #20]	; 13218 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   13200:	eb004db2 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13204:	e3e00000 	mvn	r0, #0
   13208:	eaffffe4 	b	131a0 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   1320c:	00040bd8 	.word	0x00040bd8
   13210:	00040c6c 	.word	0x00040c6c
   13214:	00040d1c 	.word	0x00040d1c
   13218:	00040bc8 	.word	0x00040bc8
   1321c:	00040d30 	.word	0x00040d30
   13220:	00040d50 	.word	0x00040d50

00013224 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
   13224:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13228:	e1a06002 	mov	r6, r2
   1322c:	e1a07000 	mov	r7, r0
   13230:	e1a08001 	mov	r8, r1
   13234:	e1a09002 	mov	r9, r2
   13238:	e3a05004 	mov	r5, #4
   1323c:	e1a02006 	mov	r2, r6
   13240:	e1a01008 	mov	r1, r8
   13244:	e1a00007 	mov	r0, r7
   13248:	ebffff0f 	bl	12e8c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
   1324c:	e1500006 	cmp	r0, r6
   13250:	e1a04000 	mov	r4, r0
   13254:	1a000001 	bne	13260 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x3c>
   13258:	e1a00009 	mov	r0, r9
   1325c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13260:	e1a00007 	mov	r0, r7
   13264:	ebffff9a 	bl	130d4 <CUSBBulkOnlyMassStorageDevice::Reset()>
   13268:	e3500000 	cmp	r0, #0
   1326c:	1a000004 	bne	13284 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
   13270:	e2555001 	subs	r5, r5, #1
   13274:	1afffff0 	bne	1323c <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
   13278:	e1a09004 	mov	r9, r4
   1327c:	e1a00009 	mov	r0, r9
   13280:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13284:	e1a09000 	mov	r9, r0
   13288:	eafffff2 	b	13258 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x34>

0001328c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
   1328c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13290:	e1a06002 	mov	r6, r2
   13294:	e1a07000 	mov	r7, r0
   13298:	e1a08001 	mov	r8, r1
   1329c:	e1a09002 	mov	r9, r2
   132a0:	e3a05004 	mov	r5, #4
   132a4:	e1a02006 	mov	r2, r6
   132a8:	e1a01008 	mov	r1, r8
   132ac:	e1a00007 	mov	r0, r7
   132b0:	ebffff3f 	bl	12fb4 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
   132b4:	e1500006 	cmp	r0, r6
   132b8:	e1a04000 	mov	r4, r0
   132bc:	1a000001 	bne	132c8 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x3c>
   132c0:	e1a00009 	mov	r0, r9
   132c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   132c8:	e1a00007 	mov	r0, r7
   132cc:	ebffff80 	bl	130d4 <CUSBBulkOnlyMassStorageDevice::Reset()>
   132d0:	e3500000 	cmp	r0, #0
   132d4:	1a000004 	bne	132ec <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
   132d8:	e2555001 	subs	r5, r5, #1
   132dc:	1afffff0 	bne	132a4 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
   132e0:	e1a09004 	mov	r9, r4
   132e4:	e1a00009 	mov	r0, r9
   132e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   132ec:	e1a09000 	mov	r9, r0
   132f0:	eafffff2 	b	132c0 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x34>

000132f4 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   132f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132f8:	e24dd064 	sub	sp, sp, #100	; 0x64
   132fc:	e1a05000 	mov	r5, r0
   13300:	ebfff15e 	bl	f880 <CUSBFunction::GetNumEndpoints() const>
   13304:	e3500001 	cmp	r0, #1
   13308:	c3a06005 	movgt	r6, #5
   1330c:	c3a07014 	movgt	r7, #20
   13310:	ca000004 	bgt	13328 <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   13314:	ea0000e6 	b	136b4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3c0>
   13318:	e5d43003 	ldrb	r3, [r4, #3]
   1331c:	e203303f 	and	r3, r3, #63	; 0x3f
   13320:	e3530002 	cmp	r3, #2
   13324:	0a0000a2 	beq	135b4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c0>
   13328:	e1a01006 	mov	r1, r6
   1332c:	e1a00005 	mov	r0, r5
   13330:	ebfff17f 	bl	f934 <CUSBFunction::GetDescriptor(unsigned char)>
   13334:	e2504000 	subs	r4, r0, #0
   13338:	1afffff6 	bne	13318 <CUSBBulkOnlyMassStorageDevice::Configure()+0x24>
   1333c:	e5953010 	ldr	r3, [r5, #16]
   13340:	e1a00005 	mov	r0, r5
   13344:	e3530000 	cmp	r3, #0
   13348:	0a0000b2 	beq	13618 <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   1334c:	e5953014 	ldr	r3, [r5, #20]
   13350:	e3530000 	cmp	r3, #0
   13354:	0a0000af 	beq	13618 <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   13358:	ebfff090 	bl	f5a0 <CUSBFunction::Configure()>
   1335c:	e2506000 	subs	r6, r0, #0
   13360:	0a0000a4 	beq	135f8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x304>
   13364:	e3a0c024 	mov	ip, #36	; 0x24
   13368:	e3a06001 	mov	r6, #1
   1336c:	e3a07012 	mov	r7, #18
   13370:	e58dc000 	str	ip, [sp]
   13374:	e58d6004 	str	r6, [sp, #4]
   13378:	e28d303c 	add	r3, sp, #60	; 0x3c
   1337c:	e3a02006 	mov	r2, #6
   13380:	e28d100c 	add	r1, sp, #12
   13384:	e1a00005 	mov	r0, r5
   13388:	e5cd400d 	strb	r4, [sp, #13]
   1338c:	e5cd400e 	strb	r4, [sp, #14]
   13390:	e5cd400f 	strb	r4, [sp, #15]
   13394:	e5cd4011 	strb	r4, [sp, #17]
   13398:	e5cdc010 	strb	ip, [sp, #16]
   1339c:	e5cd700c 	strb	r7, [sp, #12]
   133a0:	ebfffe0c 	bl	12bd8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   133a4:	e3500024 	cmp	r0, #36	; 0x24
   133a8:	1a0000b8 	bne	13690 <CUSBBulkOnlyMassStorageDevice::Configure()+0x39c>
   133ac:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   133b0:	e213301f 	ands	r3, r3, #31
   133b4:	1a0000ab 	bne	13668 <CUSBBulkOnlyMassStorageDevice::Configure()+0x374>
   133b8:	e1a04003 	mov	r4, r3
   133bc:	e3a06063 	mov	r6, #99	; 0x63
   133c0:	e3a0a064 	mov	sl, #100	; 0x64
   133c4:	e3a08006 	mov	r8, #6
   133c8:	e3a0b003 	mov	fp, #3
   133cc:	ea000010 	b	13414 <CUSBBulkOnlyMassStorageDevice::Configure()+0x120>
   133d0:	e3a09001 	mov	r9, #1
   133d4:	e3a0c000 	mov	ip, #0
   133d8:	e88d0280 	stm	sp, {r7, r9}
   133dc:	e28d3028 	add	r3, sp, #40	; 0x28
   133e0:	e1a02008 	mov	r2, r8
   133e4:	e28d101c 	add	r1, sp, #28
   133e8:	e1a00005 	mov	r0, r5
   133ec:	e5cdb01c 	strb	fp, [sp, #28]
   133f0:	e1cd41be 	strh	r4, [sp, #30]
   133f4:	e5cd7020 	strb	r7, [sp, #32]
   133f8:	e5cd4021 	strb	r4, [sp, #33]	; 0x21
   133fc:	e5cdc01d 	strb	ip, [sp, #29]
   13400:	ebfffdf4 	bl	12bd8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13404:	e3500000 	cmp	r0, #0
   13408:	ba0000ae 	blt	136c8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3d4>
   1340c:	e2566001 	subs	r6, r6, #1
   13410:	0a0000bb 	beq	13704 <CUSBBulkOnlyMassStorageDevice::Configure()+0x410>
   13414:	eb005abd 	bl	29f10 <CTimer::Get()>
   13418:	e1a0000a 	mov	r0, sl
   1341c:	eb005a82 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
   13420:	e58d4004 	str	r4, [sp, #4]
   13424:	e58d4000 	str	r4, [sp]
   13428:	e3a03000 	mov	r3, #0
   1342c:	e1a02008 	mov	r2, r8
   13430:	e28d1014 	add	r1, sp, #20
   13434:	e1a00005 	mov	r0, r5
   13438:	e5cd4014 	strb	r4, [sp, #20]
   1343c:	e5cd4015 	strb	r4, [sp, #21]
   13440:	e5cd4016 	strb	r4, [sp, #22]
   13444:	e5cd4017 	strb	r4, [sp, #23]
   13448:	e5cd4018 	strb	r4, [sp, #24]
   1344c:	e5cd4019 	strb	r4, [sp, #25]
   13450:	ebfffde0 	bl	12bd8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13454:	e3500000 	cmp	r0, #0
   13458:	baffffdc 	blt	133d0 <CUSBBulkOnlyMassStorageDevice::Configure()+0xdc>
   1345c:	e3a02008 	mov	r2, #8
   13460:	e3a00025 	mov	r0, #37	; 0x25
   13464:	e3a06001 	mov	r6, #1
   13468:	e3a0e000 	mov	lr, #0
   1346c:	e88d0044 	stm	sp, {r2, r6}
   13470:	e5cd001c 	strb	r0, [sp, #28]
   13474:	e28d3014 	add	r3, sp, #20
   13478:	e28d101c 	add	r1, sp, #28
   1347c:	e3a0200a 	mov	r2, #10
   13480:	e1a00005 	mov	r0, r5
   13484:	e1cd41be 	strh	r4, [sp, #30]
   13488:	e1cd42b0 	strh	r4, [sp, #32]
   1348c:	e1cd42b2 	strh	r4, [sp, #34]	; 0x22
   13490:	e5cd4025 	strb	r4, [sp, #37]	; 0x25
   13494:	e5cde01d 	strb	lr, [sp, #29]
   13498:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   1349c:	ebfffdcd 	bl	12bd8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   134a0:	e3500008 	cmp	r0, #8
   134a4:	1a00009c 	bne	1371c <CUSBBulkOnlyMassStorageDevice::Configure()+0x428>
   134a8:	e59d4018 	ldr	r4, [sp, #24]
   134ac:	e6bf4f34 	rev	r4, r4
   134b0:	e3540c02 	cmp	r4, #512	; 0x200
   134b4:	1a00008a 	bne	136e4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3f0>
   134b8:	e59d3014 	ldr	r3, [sp, #20]
   134bc:	e6bf3f33 	rev	r3, r3
   134c0:	e3730001 	cmn	r3, #1
   134c4:	e585301c 	str	r3, [r5, #28]
   134c8:	0a0000ab 	beq	1377c <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
   134cc:	e2833001 	add	r3, r3, #1
   134d0:	e585301c 	str	r3, [r5, #28]
   134d4:	eb004dc0 	bl	26bdc <CLogger::Get()>
   134d8:	e595201c 	ldr	r2, [r5, #28]
   134dc:	e59f72d4 	ldr	r7, [pc, #724]	; 137b8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4c4>
   134e0:	e1a025a2 	lsr	r2, r2, #11
   134e4:	e59f32d0 	ldr	r3, [pc, #720]	; 137bc <CUSBBulkOnlyMassStorageDevice::Configure()+0x4c8>
   134e8:	e58d2000 	str	r2, [sp]
   134ec:	e59f12cc 	ldr	r1, [pc, #716]	; 137c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   134f0:	e3a02004 	mov	r2, #4
   134f4:	eb004cf5 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   134f8:	e1a04006 	mov	r4, r6
   134fc:	e1a03006 	mov	r3, r6
   13500:	e5971000 	ldr	r1, [r7]
   13504:	ea000002 	b	13514 <CUSBBulkOnlyMassStorageDevice::Configure()+0x220>
   13508:	e2833001 	add	r3, r3, #1
   1350c:	e3530020 	cmp	r3, #32
   13510:	0a000088 	beq	13738 <CUSBBulkOnlyMassStorageDevice::Configure()+0x444>
   13514:	e1a02314 	lsl	r2, r4, r3
   13518:	e1120001 	tst	r2, r1
   1351c:	1afffff9 	bne	13508 <CUSBBulkOnlyMassStorageDevice::Configure()+0x214>
   13520:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
   13524:	e1822001 	orr	r2, r2, r1
   13528:	e3500000 	cmp	r0, #0
   1352c:	e5872000 	str	r2, [r7]
   13530:	1a00009c 	bne	137a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b4>
   13534:	e585302c 	str	r3, [r5, #44]	; 0x2c
   13538:	e28d0028 	add	r0, sp, #40	; 0x28
   1353c:	eb00518c 	bl	27b74 <CString::CString()>
   13540:	e28d0028 	add	r0, sp, #40	; 0x28
   13544:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   13548:	e59f1274 	ldr	r1, [pc, #628]	; 137c4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4d0>
   1354c:	eb0056cb 	bl	29080 <CString::Format(char const*, ...)>
   13550:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   13554:	e3530000 	cmp	r3, #0
   13558:	1a00008e 	bne	13798 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a4>
   1355c:	e28d0028 	add	r0, sp, #40	; 0x28
   13560:	eb005199 	bl	27bcc <CString::operator char const*() const>
   13564:	e1a08000 	mov	r8, r0
   13568:	e3a00024 	mov	r0, #36	; 0x24
   1356c:	eb005ec4 	bl	2b084 <operator new(unsigned int)>
   13570:	e1a06000 	mov	r6, r0
   13574:	e1a02008 	mov	r2, r8
   13578:	e1a01005 	mov	r1, r5
   1357c:	eb0016aa 	bl	1902c <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   13580:	e5856028 	str	r6, [r5, #40]	; 0x28
   13584:	e1a00006 	mov	r0, r6
   13588:	eb0016e5 	bl	19124 <CPartitionManager::Initialize()>
   1358c:	e2506000 	subs	r6, r0, #0
   13590:	1a00006f 	bne	13754 <CUSBBulkOnlyMassStorageDevice::Configure()+0x460>
   13594:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   13598:	e5973000 	ldr	r3, [r7]
   1359c:	e585602c 	str	r6, [r5, #44]	; 0x2c
   135a0:	e1c34214 	bic	r4, r3, r4, lsl r2
   135a4:	e5874000 	str	r4, [r7]
   135a8:	e28d0028 	add	r0, sp, #40	; 0x28
   135ac:	eb00513d 	bl	27aa8 <CString::~CString()>
   135b0:	ea000015 	b	1360c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   135b4:	e1d430d2 	ldrsb	r3, [r4, #2]
   135b8:	e3530000 	cmp	r3, #0
   135bc:	ba00001b 	blt	13630 <CUSBBulkOnlyMassStorageDevice::Configure()+0x33c>
   135c0:	e5953014 	ldr	r3, [r5, #20]
   135c4:	e1a00005 	mov	r0, r5
   135c8:	e3530000 	cmp	r3, #0
   135cc:	1a000011 	bne	13618 <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   135d0:	ebfff0b6 	bl	f8b0 <CUSBFunction::GetDevice() const>
   135d4:	e1a09000 	mov	r9, r0
   135d8:	e1a00007 	mov	r0, r7
   135dc:	eb005ea8 	bl	2b084 <operator new(unsigned int)>
   135e0:	e1a08000 	mov	r8, r0
   135e4:	e1a02004 	mov	r2, r4
   135e8:	e1a01009 	mov	r1, r9
   135ec:	ebffeeec 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   135f0:	e5858014 	str	r8, [r5, #20]
   135f4:	eaffff4b 	b	13328 <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   135f8:	eb004d77 	bl	26bdc <CLogger::Get()>
   135fc:	e59f31c4 	ldr	r3, [pc, #452]	; 137c8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4d4>
   13600:	e3a02001 	mov	r2, #1
   13604:	e59f11b4 	ldr	r1, [pc, #436]	; 137c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   13608:	eb004cb0 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1360c:	e1a00006 	mov	r0, r6
   13610:	e28dd064 	add	sp, sp, #100	; 0x64
   13614:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13618:	e3a06000 	mov	r6, #0
   1361c:	e59f119c 	ldr	r1, [pc, #412]	; 137c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   13620:	ebfff0ce 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   13624:	e1a00006 	mov	r0, r6
   13628:	e28dd064 	add	sp, sp, #100	; 0x64
   1362c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13630:	e5953010 	ldr	r3, [r5, #16]
   13634:	e1a00005 	mov	r0, r5
   13638:	e3530000 	cmp	r3, #0
   1363c:	1afffff5 	bne	13618 <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   13640:	ebfff09a 	bl	f8b0 <CUSBFunction::GetDevice() const>
   13644:	e1a09000 	mov	r9, r0
   13648:	e1a00007 	mov	r0, r7
   1364c:	eb005e8c 	bl	2b084 <operator new(unsigned int)>
   13650:	e1a08000 	mov	r8, r0
   13654:	e1a02004 	mov	r2, r4
   13658:	e1a01009 	mov	r1, r9
   1365c:	ebffeed0 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13660:	e5858010 	str	r8, [r5, #16]
   13664:	eaffff2f 	b	13328 <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   13668:	eb004d5b 	bl	26bdc <CLogger::Get()>
   1366c:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   13670:	e1a02006 	mov	r2, r6
   13674:	e203301f 	and	r3, r3, #31
   13678:	e58d3000 	str	r3, [sp]
   1367c:	e59f113c 	ldr	r1, [pc, #316]	; 137c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   13680:	e59f3144 	ldr	r3, [pc, #324]	; 137cc <CUSBBulkOnlyMassStorageDevice::Configure()+0x4d8>
   13684:	e1a06004 	mov	r6, r4
   13688:	eb004c90 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1368c:	eaffffde 	b	1360c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   13690:	eb004d51 	bl	26bdc <CLogger::Get()>
   13694:	e1a02006 	mov	r2, r6
   13698:	e1a06004 	mov	r6, r4
   1369c:	e59f312c 	ldr	r3, [pc, #300]	; 137d0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4dc>
   136a0:	e59f1118 	ldr	r1, [pc, #280]	; 137c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   136a4:	eb004c89 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   136a8:	e1a00006 	mov	r0, r6
   136ac:	e28dd064 	add	sp, sp, #100	; 0x64
   136b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136b4:	e1a00005 	mov	r0, r5
   136b8:	e59f1100 	ldr	r1, [pc, #256]	; 137c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   136bc:	ebfff0a7 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   136c0:	e3a06000 	mov	r6, #0
   136c4:	eaffffd0 	b	1360c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   136c8:	eb004d43 	bl	26bdc <CLogger::Get()>
   136cc:	e1a02009 	mov	r2, r9
   136d0:	e59f30fc 	ldr	r3, [pc, #252]	; 137d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4e0>
   136d4:	e59f10e4 	ldr	r1, [pc, #228]	; 137c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   136d8:	eb004c7c 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   136dc:	e3a06000 	mov	r6, #0
   136e0:	eaffffc9 	b	1360c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   136e4:	eb004d3c 	bl	26bdc <CLogger::Get()>
   136e8:	e1a02006 	mov	r2, r6
   136ec:	e58d4000 	str	r4, [sp]
   136f0:	e59f30e0 	ldr	r3, [pc, #224]	; 137d8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4e4>
   136f4:	e59f10c4 	ldr	r1, [pc, #196]	; 137c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   136f8:	eb004c74 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   136fc:	e3a06000 	mov	r6, #0
   13700:	eaffffc1 	b	1360c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   13704:	eb004d34 	bl	26bdc <CLogger::Get()>
   13708:	e1a02009 	mov	r2, r9
   1370c:	e59f30c8 	ldr	r3, [pc, #200]	; 137dc <CUSBBulkOnlyMassStorageDevice::Configure()+0x4e8>
   13710:	e59f10a8 	ldr	r1, [pc, #168]	; 137c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   13714:	eb004c6d 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13718:	eaffffbb 	b	1360c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   1371c:	eb004d2e 	bl	26bdc <CLogger::Get()>
   13720:	e1a02006 	mov	r2, r6
   13724:	e59f30b4 	ldr	r3, [pc, #180]	; 137e0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4ec>
   13728:	e59f1090 	ldr	r1, [pc, #144]	; 137c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   1372c:	eb004c67 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13730:	e3a06000 	mov	r6, #0
   13734:	eaffffb4 	b	1360c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   13738:	eb004d27 	bl	26bdc <CLogger::Get()>
   1373c:	e59f30a0 	ldr	r3, [pc, #160]	; 137e4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4f0>
   13740:	e3a02001 	mov	r2, #1
   13744:	e59f1074 	ldr	r1, [pc, #116]	; 137c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   13748:	eb004c60 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1374c:	e3a06000 	mov	r6, #0
   13750:	eaffffad 	b	1360c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   13754:	eb004707 	bl	25378 <CDeviceNameService::Get()>
   13758:	e1a04000 	mov	r4, r0
   1375c:	e28d0028 	add	r0, sp, #40	; 0x28
   13760:	eb005119 	bl	27bcc <CString::operator char const*() const>
   13764:	e1a02005 	mov	r2, r5
   13768:	e1a01000 	mov	r1, r0
   1376c:	e3a03001 	mov	r3, #1
   13770:	e1a00004 	mov	r0, r4
   13774:	eb004645 	bl	25090 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   13778:	eaffff8a 	b	135a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2b4>
   1377c:	eb004d16 	bl	26bdc <CLogger::Get()>
   13780:	e1a02006 	mov	r2, r6
   13784:	e59f305c 	ldr	r3, [pc, #92]	; 137e8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4f4>
   13788:	e59f1030 	ldr	r1, [pc, #48]	; 137c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   1378c:	eb004c4f 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13790:	e3a06000 	mov	r6, #0
   13794:	eaffff9c 	b	1360c <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   13798:	e59f204c 	ldr	r2, [pc, #76]	; 137ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x4f8>
   1379c:	e59f104c 	ldr	r1, [pc, #76]	; 137f0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4fc>
   137a0:	e59f004c 	ldr	r0, [pc, #76]	; 137f4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x500>
   137a4:	eb004419 	bl	24810 <assertion_failed>
   137a8:	e59f2048 	ldr	r2, [pc, #72]	; 137f8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x504>
   137ac:	e59f103c 	ldr	r1, [pc, #60]	; 137f0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4fc>
   137b0:	e59f0044 	ldr	r0, [pc, #68]	; 137fc <CUSBBulkOnlyMassStorageDevice::Configure()+0x508>
   137b4:	eb004415 	bl	24810 <assertion_failed>
   137b8:	0004e1f8 	.word	0x0004e1f8
   137bc:	00040e10 	.word	0x00040e10
   137c0:	00040bc8 	.word	0x00040bc8
   137c4:	00040e40 	.word	0x00040e40
   137c8:	000403d4 	.word	0x000403d4
   137cc:	00040d88 	.word	0x00040d88
   137d0:	00040d70 	.word	0x00040d70
   137d4:	00040da8 	.word	0x00040da8
   137d8:	00040dd8 	.word	0x00040dd8
   137dc:	00040e64 	.word	0x00040e64
   137e0:	00040dc0 	.word	0x00040dc0
   137e4:	000400ac 	.word	0x000400ac
   137e8:	00040df4 	.word	0x00040df4
   137ec:	0000019d 	.word	0x0000019d
   137f0:	00040bd8 	.word	0x00040bd8
   137f4:	00040e48 	.word	0x00040e48
   137f8:	00000197 	.word	0x00000197
   137fc:	00040e28 	.word	0x00040e28

00013800 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   13800:	e92d4070 	push	{r4, r5, r6, lr}
   13804:	e1a04000 	mov	r4, r0
   13808:	e5900020 	ldr	r0, [r0, #32]
   1380c:	e59f304c 	ldr	r3, [pc, #76]	; 13860 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
   13810:	e3500000 	cmp	r0, #0
   13814:	e5843000 	str	r3, [r4]
   13818:	0a000002 	beq	13828 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
   1381c:	eb005e20 	bl	2b0a4 <operator delete[](void*)>
   13820:	e3a03000 	mov	r3, #0
   13824:	e5843020 	str	r3, [r4, #32]
   13828:	e5945010 	ldr	r5, [r4, #16]
   1382c:	e3550000 	cmp	r5, #0
   13830:	0a000006 	beq	13850 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x50>
   13834:	e1a00005 	mov	r0, r5
   13838:	ebffeec3 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   1383c:	e1a00005 	mov	r0, r5
   13840:	e3a01014 	mov	r1, #20
   13844:	eb005e1c 	bl	2b0bc <operator delete(void*, unsigned int)>
   13848:	e3a03000 	mov	r3, #0
   1384c:	e5843010 	str	r3, [r4, #16]
   13850:	e1a00004 	mov	r0, r4
   13854:	ebffef28 	bl	f4fc <CUSBFunction::~CUSBFunction()>
   13858:	e1a00004 	mov	r0, r4
   1385c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13860:	00040e80 	.word	0x00040e80

00013864 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   13864:	e92d4010 	push	{r4, lr}
   13868:	e1a04000 	mov	r4, r0
   1386c:	ebffffe3 	bl	13800 <CUSBMIDIDevice::~CUSBMIDIDevice()>
   13870:	e1a00004 	mov	r0, r4
   13874:	e3a01028 	mov	r1, #40	; 0x28
   13878:	eb005e0f 	bl	2b0bc <operator delete(void*, unsigned int)>
   1387c:	e1a00004 	mov	r0, r4
   13880:	e8bd8010 	pop	{r4, pc}

00013884 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   13884:	e92d4010 	push	{r4, lr}
   13888:	e1a04000 	mov	r4, r0
   1388c:	ebffefab 	bl	f740 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   13890:	e3a03000 	mov	r3, #0
   13894:	e59f201c 	ldr	r2, [pc, #28]	; 138b8 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x34>
   13898:	e5843010 	str	r3, [r4, #16]
   1389c:	e5842000 	str	r2, [r4]
   138a0:	e5843014 	str	r3, [r4, #20]
   138a4:	e5843018 	str	r3, [r4, #24]
   138a8:	e5843020 	str	r3, [r4, #32]
   138ac:	e5843024 	str	r3, [r4, #36]	; 0x24
   138b0:	e1a00004 	mov	r0, r4
   138b4:	e8bd8010 	pop	{r4, pc}
   138b8:	00040e80 	.word	0x00040e80

000138bc <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   138bc:	e5903014 	ldr	r3, [r0, #20]
   138c0:	e92d4010 	push	{r4, lr}
   138c4:	e3530000 	cmp	r3, #0
   138c8:	1a000006 	bne	138e8 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x2c>
   138cc:	e3510000 	cmp	r1, #0
   138d0:	e5801014 	str	r1, [r0, #20]
   138d4:	18bd8010 	popne	{r4, pc}
   138d8:	e3a0209b 	mov	r2, #155	; 0x9b
   138dc:	e59f1014 	ldr	r1, [pc, #20]	; 138f8 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
   138e0:	e59f0014 	ldr	r0, [pc, #20]	; 138fc <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x40>
   138e4:	eb0043c9 	bl	24810 <assertion_failed>
   138e8:	e3a02099 	mov	r2, #153	; 0x99
   138ec:	e59f1004 	ldr	r1, [pc, #4]	; 138f8 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
   138f0:	e59f0008 	ldr	r0, [pc, #8]	; 13900 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x44>
   138f4:	eb0043c5 	bl	24810 <assertion_failed>
   138f8:	00040eec 	.word	0x00040eec
   138fc:	00040f10 	.word	0x00040f10
   13900:	00040ef8 	.word	0x00040ef8

00013904 <CUSBMIDIDevice::StartRequest()>:
   13904:	e92d4070 	push	{r4, r5, r6, lr}
   13908:	e5903010 	ldr	r3, [r0, #16]
   1390c:	e24dd008 	sub	sp, sp, #8
   13910:	e3530000 	cmp	r3, #0
   13914:	0a000022 	beq	139a4 <CUSBMIDIDevice::StartRequest()+0xa0>
   13918:	e5903020 	ldr	r3, [r0, #32]
   1391c:	e1a04000 	mov	r4, r0
   13920:	e3530000 	cmp	r3, #0
   13924:	0a000022 	beq	139b4 <CUSBMIDIDevice::StartRequest()+0xb0>
   13928:	e5905018 	ldr	r5, [r0, #24]
   1392c:	e3550000 	cmp	r5, #0
   13930:	1a000023 	bne	139c4 <CUSBMIDIDevice::StartRequest()+0xc0>
   13934:	e1d031bc 	ldrh	r3, [r0, #28]
   13938:	e3530000 	cmp	r3, #0
   1393c:	0a000024 	beq	139d4 <CUSBMIDIDevice::StartRequest()+0xd0>
   13940:	e3a00028 	mov	r0, #40	; 0x28
   13944:	eb000346 	bl	14664 <CUSBRequest::operator new(unsigned int)>
   13948:	e1a06000 	mov	r6, r0
   1394c:	e1d431bc 	ldrh	r3, [r4, #28]
   13950:	e5942020 	ldr	r2, [r4, #32]
   13954:	e5941010 	ldr	r1, [r4, #16]
   13958:	e58d5000 	str	r5, [sp]
   1395c:	eb0002bb 	bl	14450 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   13960:	e1a03004 	mov	r3, r4
   13964:	e1a02005 	mov	r2, r5
   13968:	e59f1074 	ldr	r1, [pc, #116]	; 139e4 <CUSBMIDIDevice::StartRequest()+0xe0>
   1396c:	e1a00006 	mov	r0, r6
   13970:	e5846018 	str	r6, [r4, #24]
   13974:	eb000319 	bl	145e0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   13978:	e5940018 	ldr	r0, [r4, #24]
   1397c:	eb000333 	bl	14650 <CUSBRequest::SetCompleteOnNAK()>
   13980:	e1a00004 	mov	r0, r4
   13984:	ebffefdf 	bl	f908 <CUSBFunction::GetHost() const>
   13988:	e1a02005 	mov	r2, r5
   1398c:	e5903000 	ldr	r3, [r0]
   13990:	e5941018 	ldr	r1, [r4, #24]
   13994:	e593300c 	ldr	r3, [r3, #12]
   13998:	e28dd008 	add	sp, sp, #8
   1399c:	e8bd4070 	pop	{r4, r5, r6, lr}
   139a0:	e12fff13 	bx	r3
   139a4:	e3a020a0 	mov	r2, #160	; 0xa0
   139a8:	e59f1038 	ldr	r1, [pc, #56]	; 139e8 <CUSBMIDIDevice::StartRequest()+0xe4>
   139ac:	e59f0038 	ldr	r0, [pc, #56]	; 139ec <CUSBMIDIDevice::StartRequest()+0xe8>
   139b0:	eb004396 	bl	24810 <assertion_failed>
   139b4:	e3a020a1 	mov	r2, #161	; 0xa1
   139b8:	e59f1028 	ldr	r1, [pc, #40]	; 139e8 <CUSBMIDIDevice::StartRequest()+0xe4>
   139bc:	e59f002c 	ldr	r0, [pc, #44]	; 139f0 <CUSBMIDIDevice::StartRequest()+0xec>
   139c0:	eb004392 	bl	24810 <assertion_failed>
   139c4:	e3a020a3 	mov	r2, #163	; 0xa3
   139c8:	e59f1018 	ldr	r1, [pc, #24]	; 139e8 <CUSBMIDIDevice::StartRequest()+0xe4>
   139cc:	e59f0020 	ldr	r0, [pc, #32]	; 139f4 <CUSBMIDIDevice::StartRequest()+0xf0>
   139d0:	eb00438e 	bl	24810 <assertion_failed>
   139d4:	e3a020a4 	mov	r2, #164	; 0xa4
   139d8:	e59f1008 	ldr	r1, [pc, #8]	; 139e8 <CUSBMIDIDevice::StartRequest()+0xe4>
   139dc:	e59f0014 	ldr	r0, [pc, #20]	; 139f8 <CUSBMIDIDevice::StartRequest()+0xf4>
   139e0:	eb00438a 	bl	24810 <assertion_failed>
   139e4:	00013c08 	.word	0x00013c08
   139e8:	00040eec 	.word	0x00040eec
   139ec:	00040f28 	.word	0x00040f28
   139f0:	00040f3c 	.word	0x00040f3c
   139f4:	00040b38 	.word	0x00040b38
   139f8:	00040f54 	.word	0x00040f54

000139fc <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
   139fc:	e3520000 	cmp	r2, #0
   13a00:	e92d4010 	push	{r4, lr}
   13a04:	0a000007 	beq	13a28 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
   13a08:	e5923024 	ldr	r3, [r2, #36]	; 0x24
   13a0c:	e1500003 	cmp	r0, r3
   13a10:	1a000008 	bne	13a38 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
   13a14:	e8bd4010 	pop	{r4, lr}
   13a18:	e3a03000 	mov	r3, #0
   13a1c:	e1a00002 	mov	r0, r2
   13a20:	e5823024 	str	r3, [r2, #36]	; 0x24
   13a24:	eaffffb6 	b	13904 <CUSBMIDIDevice::StartRequest()>
   13a28:	e3a020f0 	mov	r2, #240	; 0xf0
   13a2c:	e59f1014 	ldr	r1, [pc, #20]	; 13a48 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
   13a30:	e59f0014 	ldr	r0, [pc, #20]	; 13a4c <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x50>
   13a34:	eb004375 	bl	24810 <assertion_failed>
   13a38:	e3a020e7 	mov	r2, #231	; 0xe7
   13a3c:	e59f1004 	ldr	r1, [pc, #4]	; 13a48 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
   13a40:	e59f0008 	ldr	r0, [pc, #8]	; 13a50 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x54>
   13a44:	eb004371 	bl	24810 <assertion_failed>
   13a48:	00040eec 	.word	0x00040eec
   13a4c:	0003f230 	.word	0x0003f230
   13a50:	00040f68 	.word	0x00040f68

00013a54 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   13a54:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   13a58:	e2514000 	subs	r4, r1, #0
   13a5c:	e24dd00c 	sub	sp, sp, #12
   13a60:	0a000050 	beq	13ba8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x154>
   13a64:	e5903018 	ldr	r3, [r0, #24]
   13a68:	e1a05000 	mov	r5, r0
   13a6c:	e1540003 	cmp	r4, r3
   13a70:	1a000050 	bne	13bb8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x164>
   13a74:	e1a00004 	mov	r0, r4
   13a78:	eb0002a5 	bl	14514 <CUSBRequest::GetStatus() const>
   13a7c:	e3500000 	cmp	r0, #0
   13a80:	1a00001a 	bne	13af0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x9c>
   13a84:	e5954018 	ldr	r4, [r5, #24]
   13a88:	e3540000 	cmp	r4, #0
   13a8c:	13a09000 	movne	r9, #0
   13a90:	0a000008 	beq	13ab8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x64>
   13a94:	e1a00004 	mov	r0, r4
   13a98:	eb00028d 	bl	144d4 <CUSBRequest::~CUSBRequest()>
   13a9c:	e1a00004 	mov	r0, r4
   13aa0:	e3a01028 	mov	r1, #40	; 0x28
   13aa4:	eb000303 	bl	146b8 <CUSBRequest::operator delete(void*, unsigned int)>
   13aa8:	e3a03000 	mov	r3, #0
   13aac:	e1590003 	cmp	r9, r3
   13ab0:	e5853018 	str	r3, [r5, #24]
   13ab4:	1a000033 	bne	13b88 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x134>
   13ab8:	e5954024 	ldr	r4, [r5, #36]	; 0x24
   13abc:	e3540000 	cmp	r4, #0
   13ac0:	1a000040 	bne	13bc8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
   13ac4:	eb005911 	bl	29f10 <CTimer::Get()>
   13ac8:	e58d5000 	str	r5, [sp]
   13acc:	e1a03004 	mov	r3, r4
   13ad0:	e59f2110 	ldr	r2, [pc, #272]	; 13be8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x194>
   13ad4:	e3a01001 	mov	r1, #1
   13ad8:	eb00574c 	bl	29810 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   13adc:	e3500000 	cmp	r0, #0
   13ae0:	e5850024 	str	r0, [r5, #36]	; 0x24
   13ae4:	0a00002b 	beq	13b98 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x144>
   13ae8:	e28dd00c 	add	sp, sp, #12
   13aec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13af0:	e1a00004 	mov	r0, r4
   13af4:	eb000288 	bl	1451c <CUSBRequest::GetResultLength() const>
   13af8:	e2109003 	ands	r9, r0, #3
   13afc:	1affffe0 	bne	13a84 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   13b00:	e5956020 	ldr	r6, [r5, #32]
   13b04:	e3560000 	cmp	r6, #0
   13b08:	0a000032 	beq	13bd8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x184>
   13b0c:	e1a00004 	mov	r0, r4
   13b10:	eb000281 	bl	1451c <CUSBRequest::GetResultLength() const>
   13b14:	e5954020 	ldr	r4, [r5, #32]
   13b18:	e0866000 	add	r6, r6, r0
   13b1c:	e1560004 	cmp	r6, r4
   13b20:	9affffd7 	bls	13a84 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   13b24:	e3a07001 	mov	r7, #1
   13b28:	e59f80bc 	ldr	r8, [pc, #188]	; 13bec <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x198>
   13b2c:	e2844001 	add	r4, r4, #1
   13b30:	e5540001 	ldrb	r0, [r4, #-1]
   13b34:	e3500000 	cmp	r0, #0
   13b38:	0a00000a 	beq	13b68 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x114>
   13b3c:	e5959014 	ldr	r9, [r5, #20]
   13b40:	e3590000 	cmp	r9, #0
   13b44:	01a09007 	moveq	r9, r7
   13b48:	0a000006 	beq	13b68 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x114>
   13b4c:	e200300f 	and	r3, r0, #15
   13b50:	e0883103 	add	r3, r8, r3, lsl #2
   13b54:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   13b58:	e1a00220 	lsr	r0, r0, #4
   13b5c:	e1a01004 	mov	r1, r4
   13b60:	e12fff39 	blx	r9
   13b64:	e1a09007 	mov	r9, r7
   13b68:	e2843003 	add	r3, r4, #3
   13b6c:	e1560003 	cmp	r6, r3
   13b70:	e2844004 	add	r4, r4, #4
   13b74:	8affffed 	bhi	13b30 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   13b78:	e5954018 	ldr	r4, [r5, #24]
   13b7c:	e3540000 	cmp	r4, #0
   13b80:	1affffc3 	bne	13a94 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x40>
   13b84:	eaffffc7 	b	13aa8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x54>
   13b88:	e1a00005 	mov	r0, r5
   13b8c:	e28dd00c 	add	sp, sp, #12
   13b90:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   13b94:	eaffff5a 	b	13904 <CUSBMIDIDevice::StartRequest()>
   13b98:	e3a020d9 	mov	r2, #217	; 0xd9
   13b9c:	e59f104c 	ldr	r1, [pc, #76]	; 13bf0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13ba0:	e59f004c 	ldr	r0, [pc, #76]	; 13bf4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a0>
   13ba4:	eb004319 	bl	24810 <assertion_failed>
   13ba8:	e3a020b0 	mov	r2, #176	; 0xb0
   13bac:	e59f103c 	ldr	r1, [pc, #60]	; 13bf0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13bb0:	e59f0040 	ldr	r0, [pc, #64]	; 13bf8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a4>
   13bb4:	eb004315 	bl	24810 <assertion_failed>
   13bb8:	e3a020b1 	mov	r2, #177	; 0xb1
   13bbc:	e59f102c 	ldr	r1, [pc, #44]	; 13bf0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13bc0:	e59f0034 	ldr	r0, [pc, #52]	; 13bfc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a8>
   13bc4:	eb004311 	bl	24810 <assertion_failed>
   13bc8:	e3a020d7 	mov	r2, #215	; 0xd7
   13bcc:	e59f101c 	ldr	r1, [pc, #28]	; 13bf0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13bd0:	e59f0028 	ldr	r0, [pc, #40]	; 13c00 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1ac>
   13bd4:	eb00430d 	bl	24810 <assertion_failed>
   13bd8:	e3a020b8 	mov	r2, #184	; 0xb8
   13bdc:	e59f100c 	ldr	r1, [pc, #12]	; 13bf0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13be0:	e59f001c 	ldr	r0, [pc, #28]	; 13c04 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   13be4:	eb004309 	bl	24810 <assertion_failed>
   13be8:	000139fc 	.word	0x000139fc
   13bec:	00040e78 	.word	0x00040e78
   13bf0:	00040eec 	.word	0x00040eec
   13bf4:	00040f8c 	.word	0x00040f8c
   13bf8:	0003f31c 	.word	0x0003f31c
   13bfc:	00040b5c 	.word	0x00040b5c
   13c00:	00040f7c 	.word	0x00040f7c
   13c04:	00040f3c 	.word	0x00040f3c

00013c08 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   13c08:	e3520000 	cmp	r2, #0
   13c0c:	0a000002 	beq	13c1c <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   13c10:	e1a01000 	mov	r1, r0
   13c14:	e1a00002 	mov	r0, r2
   13c18:	eaffff8d 	b	13a54 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   13c1c:	e92d4010 	push	{r4, lr}
   13c20:	e3a020e0 	mov	r2, #224	; 0xe0
   13c24:	e59f1004 	ldr	r1, [pc, #4]	; 13c30 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   13c28:	e59f0004 	ldr	r0, [pc, #4]	; 13c34 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   13c2c:	eb0042f7 	bl	24810 <assertion_failed>
   13c30:	00040eec 	.word	0x00040eec
   13c34:	0003f230 	.word	0x0003f230

00013c38 <CUSBMIDIDevice::TimerHandler(unsigned int)>:
   13c38:	e5902024 	ldr	r2, [r0, #36]	; 0x24
   13c3c:	e1520001 	cmp	r2, r1
   13c40:	1a000002 	bne	13c50 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x18>
   13c44:	e3a02000 	mov	r2, #0
   13c48:	e5802024 	str	r2, [r0, #36]	; 0x24
   13c4c:	eaffff2c 	b	13904 <CUSBMIDIDevice::StartRequest()>
   13c50:	e92d4010 	push	{r4, lr}
   13c54:	e3a020e7 	mov	r2, #231	; 0xe7
   13c58:	e59f1004 	ldr	r1, [pc, #4]	; 13c64 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x2c>
   13c5c:	e59f0004 	ldr	r0, [pc, #4]	; 13c68 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x30>
   13c60:	eb0042ea 	bl	24810 <assertion_failed>
   13c64:	00040eec 	.word	0x00040eec
   13c68:	00040f68 	.word	0x00040f68

00013c6c <CUSBMIDIDevice::Configure()>:
   13c6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c70:	e24dd014 	sub	sp, sp, #20
   13c74:	e1a05000 	mov	r5, r0
   13c78:	ebffef00 	bl	f880 <CUSBFunction::GetNumEndpoints() const>
   13c7c:	e2506000 	subs	r6, r0, #0
   13c80:	e1a00005 	mov	r0, r5
   13c84:	0a000065 	beq	13e20 <CUSBMIDIDevice::Configure()+0x1b4>
   13c88:	ebffef08 	bl	f8b0 <CUSBFunction::GetDevice() const>
   13c8c:	ebffe99e 	bl	e30c <CUSBDevice::GetDeviceDescriptor() const>
   13c90:	e3500000 	cmp	r0, #0
   13c94:	0a000072 	beq	13e64 <CUSBMIDIDevice::Configure()+0x1f8>
   13c98:	e5d03008 	ldrb	r3, [r0, #8]
   13c9c:	e5d01009 	ldrb	r1, [r0, #9]
   13ca0:	e59f21e0 	ldr	r2, [pc, #480]	; 13e88 <CUSBMIDIDevice::Configure()+0x21c>
   13ca4:	e1833401 	orr	r3, r3, r1, lsl #8
   13ca8:	e1530002 	cmp	r3, r2
   13cac:	05d0700a 	ldrbeq	r7, [r0, #10]
   13cb0:	05d0200b 	ldrbeq	r2, [r0, #11]
   13cb4:	059f31d0 	ldreq	r3, [pc, #464]	; 13e8c <CUSBMIDIDevice::Configure()+0x220>
   13cb8:	01877402 	orreq	r7, r7, r2, lsl #8
   13cbc:	00477003 	subeq	r7, r7, r3
   13cc0:	016f7f17 	clzeq	r7, r7
   13cc4:	13a07000 	movne	r7, #0
   13cc8:	e3a06005 	mov	r6, #5
   13ccc:	e3a08014 	mov	r8, #20
   13cd0:	e3a09025 	mov	r9, #37	; 0x25
   13cd4:	01a072a7 	lsreq	r7, r7, #5
   13cd8:	e1a01006 	mov	r1, r6
   13cdc:	e1a00005 	mov	r0, r5
   13ce0:	ebffef13 	bl	f934 <CUSBFunction::GetDescriptor(unsigned char)>
   13ce4:	e2504000 	subs	r4, r0, #0
   13ce8:	0a00002b 	beq	13d9c <CUSBMIDIDevice::Configure()+0x130>
   13cec:	e1d430d2 	ldrsb	r3, [r4, #2]
   13cf0:	e3530000 	cmp	r3, #0
   13cf4:	aafffff7 	bge	13cd8 <CUSBMIDIDevice::Configure()+0x6c>
   13cf8:	e5d43003 	ldrb	r3, [r4, #3]
   13cfc:	e203303f 	and	r3, r3, #63	; 0x3f
   13d00:	e3530002 	cmp	r3, #2
   13d04:	1afffff3 	bne	13cd8 <CUSBMIDIDevice::Configure()+0x6c>
   13d08:	e3570000 	cmp	r7, #0
   13d0c:	0a000018 	beq	13d74 <CUSBMIDIDevice::Configure()+0x108>
   13d10:	e5953010 	ldr	r3, [r5, #16]
   13d14:	e3530000 	cmp	r3, #0
   13d18:	1a000055 	bne	13e74 <CUSBMIDIDevice::Configure()+0x208>
   13d1c:	e1a00005 	mov	r0, r5
   13d20:	ebffeee2 	bl	f8b0 <CUSBFunction::GetDevice() const>
   13d24:	e1a0b000 	mov	fp, r0
   13d28:	e1a00008 	mov	r0, r8
   13d2c:	eb005cd4 	bl	2b084 <operator new(unsigned int)>
   13d30:	e1a0a000 	mov	sl, r0
   13d34:	e1a02004 	mov	r2, r4
   13d38:	e1a0100b 	mov	r1, fp
   13d3c:	ebffed18 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13d40:	e585a010 	str	sl, [r5, #16]
   13d44:	e5d40004 	ldrb	r0, [r4, #4]
   13d48:	e5d42005 	ldrb	r2, [r4, #5]
   13d4c:	e5953020 	ldr	r3, [r5, #32]
   13d50:	e1800402 	orr	r0, r0, r2, lsl #8
   13d54:	e3c00003 	bic	r0, r0, #3
   13d58:	e6ff0070 	uxth	r0, r0
   13d5c:	e3530000 	cmp	r3, #0
   13d60:	e1c501bc 	strh	r0, [r5, #28]
   13d64:	1a00003a 	bne	13e54 <CUSBMIDIDevice::Configure()+0x1e8>
   13d68:	eb005cc6 	bl	2b088 <operator new[](unsigned int)>
   13d6c:	e5850020 	str	r0, [r5, #32]
   13d70:	eaffffd8 	b	13cd8 <CUSBMIDIDevice::Configure()+0x6c>
   13d74:	e1a01009 	mov	r1, r9
   13d78:	e1a00005 	mov	r0, r5
   13d7c:	ebffeeec 	bl	f934 <CUSBFunction::GetDescriptor(unsigned char)>
   13d80:	e3500000 	cmp	r0, #0
   13d84:	0affffd3 	beq	13cd8 <CUSBMIDIDevice::Configure()+0x6c>
   13d88:	e5d43000 	ldrb	r3, [r4]
   13d8c:	e0843003 	add	r3, r4, r3
   13d90:	e1500003 	cmp	r0, r3
   13d94:	1affffcf 	bne	13cd8 <CUSBMIDIDevice::Configure()+0x6c>
   13d98:	eaffffdc 	b	13d10 <CUSBMIDIDevice::Configure()+0xa4>
   13d9c:	e5956010 	ldr	r6, [r5, #16]
   13da0:	e1a00005 	mov	r0, r5
   13da4:	e3560000 	cmp	r6, #0
   13da8:	0a00001c 	beq	13e20 <CUSBMIDIDevice::Configure()+0x1b4>
   13dac:	ebffedfb 	bl	f5a0 <CUSBFunction::Configure()>
   13db0:	e2506000 	subs	r6, r0, #0
   13db4:	0a00001e 	beq	13e34 <CUSBMIDIDevice::Configure()+0x1c8>
   13db8:	e1a0000d 	mov	r0, sp
   13dbc:	eb004f6c 	bl	27b74 <CString::CString()>
   13dc0:	e59f30c8 	ldr	r3, [pc, #200]	; 13e90 <CUSBMIDIDevice::Configure()+0x224>
   13dc4:	e59f10c8 	ldr	r1, [pc, #200]	; 13e94 <CUSBMIDIDevice::Configure()+0x228>
   13dc8:	e5932000 	ldr	r2, [r3]
   13dcc:	e1a0000d 	mov	r0, sp
   13dd0:	e282c001 	add	ip, r2, #1
   13dd4:	e583c000 	str	ip, [r3]
   13dd8:	eb0054a8 	bl	29080 <CString::Format(char const*, ...)>
   13ddc:	eb004565 	bl	25378 <CDeviceNameService::Get()>
   13de0:	e1a06000 	mov	r6, r0
   13de4:	e1a0000d 	mov	r0, sp
   13de8:	eb004f77 	bl	27bcc <CString::operator char const*() const>
   13dec:	e1a03004 	mov	r3, r4
   13df0:	e1a01000 	mov	r1, r0
   13df4:	e1a02005 	mov	r2, r5
   13df8:	e1a00006 	mov	r0, r6
   13dfc:	eb0044a3 	bl	25090 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   13e00:	e1a00005 	mov	r0, r5
   13e04:	ebfffebe 	bl	13904 <CUSBMIDIDevice::StartRequest()>
   13e08:	e1a06000 	mov	r6, r0
   13e0c:	e1a0000d 	mov	r0, sp
   13e10:	eb004f24 	bl	27aa8 <CString::~CString()>
   13e14:	e1a00006 	mov	r0, r6
   13e18:	e28dd014 	add	sp, sp, #20
   13e1c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e20:	e59f1070 	ldr	r1, [pc, #112]	; 13e98 <CUSBMIDIDevice::Configure()+0x22c>
   13e24:	ebffeecd 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   13e28:	e1a00006 	mov	r0, r6
   13e2c:	e28dd014 	add	sp, sp, #20
   13e30:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e34:	eb004b68 	bl	26bdc <CLogger::Get()>
   13e38:	e59f305c 	ldr	r3, [pc, #92]	; 13e9c <CUSBMIDIDevice::Configure()+0x230>
   13e3c:	e3a02001 	mov	r2, #1
   13e40:	e59f1050 	ldr	r1, [pc, #80]	; 13e98 <CUSBMIDIDevice::Configure()+0x22c>
   13e44:	eb004aa1 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13e48:	e1a00006 	mov	r0, r6
   13e4c:	e28dd014 	add	sp, sp, #20
   13e50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e54:	e3a0207d 	mov	r2, #125	; 0x7d
   13e58:	e59f1040 	ldr	r1, [pc, #64]	; 13ea0 <CUSBMIDIDevice::Configure()+0x234>
   13e5c:	e59f0040 	ldr	r0, [pc, #64]	; 13ea4 <CUSBMIDIDevice::Configure()+0x238>
   13e60:	eb00426a 	bl	24810 <assertion_failed>
   13e64:	e3a02051 	mov	r2, #81	; 0x51
   13e68:	e59f1030 	ldr	r1, [pc, #48]	; 13ea0 <CUSBMIDIDevice::Configure()+0x234>
   13e6c:	e59f0034 	ldr	r0, [pc, #52]	; 13ea8 <CUSBMIDIDevice::Configure()+0x23c>
   13e70:	eb004266 	bl	24810 <assertion_failed>
   13e74:	e1a00005 	mov	r0, r5
   13e78:	e59f1018 	ldr	r1, [pc, #24]	; 13e98 <CUSBMIDIDevice::Configure()+0x22c>
   13e7c:	ebffeeb7 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   13e80:	e3a06000 	mov	r6, #0
   13e84:	eaffffe2 	b	13e14 <CUSBMIDIDevice::Configure()+0x1a8>
   13e88:	00000582 	.word	0x00000582
   13e8c:	0000012a 	.word	0x0000012a
   13e90:	00047fa8 	.word	0x00047fa8
   13e94:	00040fc8 	.word	0x00040fc8
   13e98:	00040ee4 	.word	0x00040ee4
   13e9c:	000403d4 	.word	0x000403d4
   13ea0:	00040eec 	.word	0x00040eec
   13ea4:	00040fb0 	.word	0x00040fb0
   13ea8:	00040f9c 	.word	0x00040f9c

00013eac <CUSBMouseDevice::~CUSBMouseDevice()>:
   13eac:	e92d4010 	push	{r4, lr}
   13eb0:	e1a04000 	mov	r4, r0
   13eb4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   13eb8:	e59f3044 	ldr	r3, [pc, #68]	; 13f04 <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   13ebc:	e3500000 	cmp	r0, #0
   13ec0:	e5843000 	str	r3, [r4]
   13ec4:	0a000002 	beq	13ed4 <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   13ec8:	e5903000 	ldr	r3, [r0]
   13ecc:	e5933004 	ldr	r3, [r3, #4]
   13ed0:	e12fff33 	blx	r3
   13ed4:	e3a03000 	mov	r3, #0
   13ed8:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   13edc:	e5843024 	str	r3, [r4, #36]	; 0x24
   13ee0:	e1500003 	cmp	r0, r3
   13ee4:	0a000000 	beq	13eec <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   13ee8:	eb005c6d 	bl	2b0a4 <operator delete[](void*)>
   13eec:	e3a03000 	mov	r3, #0
   13ef0:	e1a00004 	mov	r0, r4
   13ef4:	e5843028 	str	r3, [r4, #40]	; 0x28
   13ef8:	ebfff87d 	bl	120f4 <CUSBHIDDevice::~CUSBHIDDevice()>
   13efc:	e1a00004 	mov	r0, r4
   13f00:	e8bd8010 	pop	{r4, pc}
   13f04:	00040fd8 	.word	0x00040fd8

00013f08 <CUSBMouseDevice::~CUSBMouseDevice()>:
   13f08:	e92d4010 	push	{r4, lr}
   13f0c:	e1a04000 	mov	r4, r0
   13f10:	ebffffe5 	bl	13eac <CUSBMouseDevice::~CUSBMouseDevice()>
   13f14:	e1a00004 	mov	r0, r4
   13f18:	e3a01030 	mov	r1, #48	; 0x30
   13f1c:	eb005c66 	bl	2b0bc <operator delete(void*, unsigned int)>
   13f20:	e1a00004 	mov	r0, r4
   13f24:	e8bd8010 	pop	{r4, pc}

00013f28 <CUSBMouseDevice::Configure()>:
   13f28:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   13f2c:	e3a01021 	mov	r1, #33	; 0x21
   13f30:	e24dd014 	sub	sp, sp, #20
   13f34:	e1a04000 	mov	r4, r0
   13f38:	ebffee7d 	bl	f934 <CUSBFunction::GetDescriptor(unsigned char)>
   13f3c:	e2505000 	subs	r5, r0, #0
   13f40:	0a000003 	beq	13f54 <CUSBMouseDevice::Configure()+0x2c>
   13f44:	e5d50007 	ldrb	r0, [r5, #7]
   13f48:	e5d53008 	ldrb	r3, [r5, #8]
   13f4c:	e1900403 	orrs	r0, r0, r3, lsl #8
   13f50:	1a000006 	bne	13f70 <CUSBMouseDevice::Configure()+0x48>
   13f54:	e1a00004 	mov	r0, r4
   13f58:	e59f10f0 	ldr	r1, [pc, #240]	; 14050 <CUSBMouseDevice::Configure()+0x128>
   13f5c:	ebffee7f 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   13f60:	e3a05000 	mov	r5, #0
   13f64:	e1a00005 	mov	r0, r5
   13f68:	e28dd014 	add	sp, sp, #20
   13f6c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13f70:	e1c402bc 	strh	r0, [r4, #44]	; 0x2c
   13f74:	eb005c43 	bl	2b088 <operator new[](unsigned int)>
   13f78:	e5840028 	str	r0, [r4, #40]	; 0x28
   13f7c:	e1a00004 	mov	r0, r4
   13f80:	ebffee60 	bl	f908 <CUSBFunction::GetHost() const>
   13f84:	e1a06000 	mov	r6, r0
   13f88:	e1a00004 	mov	r0, r4
   13f8c:	ebffee52 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
   13f90:	e1a07000 	mov	r7, r0
   13f94:	e1a00004 	mov	r0, r4
   13f98:	e5d55006 	ldrb	r5, [r5, #6]
   13f9c:	e5948028 	ldr	r8, [r4, #40]	; 0x28
   13fa0:	e1d492bc 	ldrh	r9, [r4, #44]	; 0x2c
   13fa4:	ebffeeb5 	bl	fa80 <CUSBFunction::GetInterfaceNumber() const>
   13fa8:	e3a03081 	mov	r3, #129	; 0x81
   13fac:	e6ff0070 	uxth	r0, r0
   13fb0:	e58d000c 	str	r0, [sp, #12]
   13fb4:	e58d3008 	str	r3, [sp, #8]
   13fb8:	e88d0300 	stm	sp, {r8, r9}
   13fbc:	e3a03000 	mov	r3, #0
   13fc0:	e1a02005 	mov	r2, r5
   13fc4:	e1a01007 	mov	r1, r7
   13fc8:	e1a00006 	mov	r0, r6
   13fcc:	ebfffa51 	bl	12918 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   13fd0:	e1d432bc 	ldrh	r3, [r4, #44]	; 0x2c
   13fd4:	e1500003 	cmp	r0, r3
   13fd8:	0a000008 	beq	14000 <CUSBMouseDevice::Configure()+0xd8>
   13fdc:	e3a05000 	mov	r5, #0
   13fe0:	eb004afd 	bl	26bdc <CLogger::Get()>
   13fe4:	e59f3068 	ldr	r3, [pc, #104]	; 14054 <CUSBMouseDevice::Configure()+0x12c>
   13fe8:	e3a02001 	mov	r2, #1
   13fec:	e59f105c 	ldr	r1, [pc, #92]	; 14050 <CUSBMouseDevice::Configure()+0x128>
   13ff0:	eb004a36 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13ff4:	e1a00005 	mov	r0, r5
   13ff8:	e28dd014 	add	sp, sp, #20
   13ffc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14000:	e3a01000 	mov	r1, #0
   14004:	e1a00004 	mov	r0, r4
   14008:	ebfff864 	bl	121a0 <CUSBHIDDevice::Configure(unsigned int)>
   1400c:	e2505000 	subs	r5, r0, #0
   14010:	0a000008 	beq	14038 <CUSBMouseDevice::Configure()+0x110>
   14014:	e3a00028 	mov	r0, #40	; 0x28
   14018:	eb005c19 	bl	2b084 <operator new(unsigned int)>
   1401c:	e1a05000 	mov	r5, r0
   14020:	eb00128e 	bl	18a60 <CMouseDevice::CMouseDevice()>
   14024:	e1a00004 	mov	r0, r4
   14028:	e5845024 	str	r5, [r4, #36]	; 0x24
   1402c:	e28dd014 	add	sp, sp, #20
   14030:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   14034:	eafff978 	b	1261c <CUSBHIDDevice::StartRequest()>
   14038:	eb004ae7 	bl	26bdc <CLogger::Get()>
   1403c:	e59f3014 	ldr	r3, [pc, #20]	; 14058 <CUSBMouseDevice::Configure()+0x130>
   14040:	e3a02001 	mov	r2, #1
   14044:	e59f1004 	ldr	r1, [pc, #4]	; 14050 <CUSBMouseDevice::Configure()+0x128>
   14048:	eb004a20 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1404c:	eaffffc4 	b	13f64 <CUSBMouseDevice::Configure()+0x3c>
   14050:	00041000 	.word	0x00041000
   14054:	000406e0 	.word	0x000406e0
   14058:	0003f1c8 	.word	0x0003f1c8

0001405c <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   1405c:	e2913000 	adds	r3, r1, #0
   14060:	13a03001 	movne	r3, #1
   14064:	e3520003 	cmp	r2, #3
   14068:	13a03000 	movne	r3, #0
   1406c:	e3530000 	cmp	r3, #0
   14070:	e1a02001 	mov	r2, r1
   14074:	012fff1e 	bxeq	lr
   14078:	e5d13000 	ldrb	r3, [r1]
   1407c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   14080:	e3130002 	tst	r3, #2
   14084:	e2031001 	and	r1, r3, #1
   14088:	13811002 	orrne	r1, r1, #2
   1408c:	e3130004 	tst	r3, #4
   14090:	13811004 	orrne	r1, r1, #4
   14094:	e3500000 	cmp	r0, #0
   14098:	012fff1e 	bxeq	lr
   1409c:	e1d230d2 	ldrsb	r3, [r2, #2]
   140a0:	e1d220d1 	ldrsb	r2, [r2, #1]
   140a4:	ea0012a7 	b	18b48 <CMouseDevice::ReportHandler(unsigned int, int, int)>

000140a8 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   140a8:	e92d4010 	push	{r4, lr}
   140ac:	e3a02003 	mov	r2, #3
   140b0:	e1a04000 	mov	r4, r0
   140b4:	ebfff7fa 	bl	120a4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   140b8:	e3a03000 	mov	r3, #0
   140bc:	e59f2010 	ldr	r2, [pc, #16]	; 140d4 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x2c>
   140c0:	e5843024 	str	r3, [r4, #36]	; 0x24
   140c4:	e5842000 	str	r2, [r4]
   140c8:	e5843028 	str	r3, [r4, #40]	; 0x28
   140cc:	e1a00004 	mov	r0, r4
   140d0:	e8bd8010 	pop	{r4, pc}
   140d4:	00040fd8 	.word	0x00040fd8

000140d8 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   140d8:	e92d4070 	push	{r4, r5, r6, lr}
   140dc:	e5905018 	ldr	r5, [r0, #24]
   140e0:	e59f3060 	ldr	r3, [pc, #96]	; 14148 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x70>
   140e4:	e3550000 	cmp	r5, #0
   140e8:	e1a04000 	mov	r4, r0
   140ec:	e5803000 	str	r3, [r0]
   140f0:	0a000004 	beq	14108 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x30>
   140f4:	e1a00005 	mov	r0, r5
   140f8:	ebffec93 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   140fc:	e1a00005 	mov	r0, r5
   14100:	e3a01014 	mov	r1, #20
   14104:	eb005bec 	bl	2b0bc <operator delete(void*, unsigned int)>
   14108:	e3a03000 	mov	r3, #0
   1410c:	e5945014 	ldr	r5, [r4, #20]
   14110:	e5843018 	str	r3, [r4, #24]
   14114:	e1550003 	cmp	r5, r3
   14118:	0a000004 	beq	14130 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   1411c:	e1a00005 	mov	r0, r5
   14120:	ebffec89 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   14124:	e1a00005 	mov	r0, r5
   14128:	e3a01014 	mov	r1, #20
   1412c:	eb005be2 	bl	2b0bc <operator delete(void*, unsigned int)>
   14130:	e3a03000 	mov	r3, #0
   14134:	e1a00004 	mov	r0, r4
   14138:	e5843014 	str	r3, [r4, #20]
   1413c:	ebffecee 	bl	f4fc <CUSBFunction::~CUSBFunction()>
   14140:	e1a00004 	mov	r0, r4
   14144:	e8bd8070 	pop	{r4, r5, r6, pc}
   14148:	00041010 	.word	0x00041010

0001414c <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   1414c:	e92d4010 	push	{r4, lr}
   14150:	e1a04000 	mov	r4, r0
   14154:	ebffffdf 	bl	140d8 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   14158:	e1a00004 	mov	r0, r4
   1415c:	e3a0101c 	mov	r1, #28
   14160:	eb005bd5 	bl	2b0bc <operator delete(void*, unsigned int)>
   14164:	e1a00004 	mov	r0, r4
   14168:	e8bd8010 	pop	{r4, pc}

0001416c <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   1416c:	e92d4070 	push	{r4, r5, r6, lr}
   14170:	e2515000 	subs	r5, r1, #0
   14174:	e24dd008 	sub	sp, sp, #8
   14178:	0a000011 	beq	141c4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x58>
   1417c:	e3520000 	cmp	r2, #0
   14180:	e1a04002 	mov	r4, r2
   14184:	0a000012 	beq	141d4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x68>
   14188:	e1a06000 	mov	r6, r0
   1418c:	ebffeddd 	bl	f908 <CUSBFunction::GetHost() const>
   14190:	e3500000 	cmp	r0, #0
   14194:	0a000012 	beq	141e4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x78>
   14198:	e3a03000 	mov	r3, #0
   1419c:	e5961018 	ldr	r1, [r6, #24]
   141a0:	e1a02005 	mov	r2, r5
   141a4:	e58d3000 	str	r3, [sp]
   141a8:	e1a03004 	mov	r3, r4
   141ac:	ebfffa0d 	bl	129e8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   141b0:	e3500000 	cmp	r0, #0
   141b4:	a1a00004 	movge	r0, r4
   141b8:	b3e00000 	mvnlt	r0, #0
   141bc:	e28dd008 	add	sp, sp, #8
   141c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   141c4:	e3a0207e 	mov	r2, #126	; 0x7e
   141c8:	e59f1024 	ldr	r1, [pc, #36]	; 141f4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   141cc:	e59f0024 	ldr	r0, [pc, #36]	; 141f8 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x8c>
   141d0:	eb00418e 	bl	24810 <assertion_failed>
   141d4:	e3a0207f 	mov	r2, #127	; 0x7f
   141d8:	e59f1014 	ldr	r1, [pc, #20]	; 141f4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   141dc:	e59f0018 	ldr	r0, [pc, #24]	; 141fc <CUSBPrinterDevice::Write(void const*, unsigned int)+0x90>
   141e0:	eb00418a 	bl	24810 <assertion_failed>
   141e4:	e3a02082 	mov	r2, #130	; 0x82
   141e8:	e59f1004 	ldr	r1, [pc, #4]	; 141f4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   141ec:	e59f000c 	ldr	r0, [pc, #12]	; 14200 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x94>
   141f0:	eb004186 	bl	24810 <assertion_failed>
   141f4:	0004103c 	.word	0x0004103c
   141f8:	00040c5c 	.word	0x00040c5c
   141fc:	0004104c 	.word	0x0004104c
   14200:	00040c6c 	.word	0x00040c6c

00014204 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   14204:	e92d4010 	push	{r4, lr}
   14208:	e1a04000 	mov	r4, r0
   1420c:	ebffed4b 	bl	f740 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   14210:	e3a03000 	mov	r3, #0
   14214:	e59f2014 	ldr	r2, [pc, #20]	; 14230 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x2c>
   14218:	e5c43010 	strb	r3, [r4, #16]
   1421c:	e5842000 	str	r2, [r4]
   14220:	e5843014 	str	r3, [r4, #20]
   14224:	e5843018 	str	r3, [r4, #24]
   14228:	e1a00004 	mov	r0, r4
   1422c:	e8bd8010 	pop	{r4, pc}
   14230:	00041010 	.word	0x00041010

00014234 <CUSBPrinterDevice::Configure()>:
   14234:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   14238:	e24dd01c 	sub	sp, sp, #28
   1423c:	e1a05000 	mov	r5, r0
   14240:	ebffee32 	bl	fb10 <CUSBFunction::GetInterfaceProtocol() const>
   14244:	e2403001 	sub	r3, r0, #1
   14248:	e3530001 	cmp	r3, #1
   1424c:	e5c50010 	strb	r0, [r5, #16]
   14250:	9a00000a 	bls	14280 <CUSBPrinterDevice::Configure()+0x4c>
   14254:	eb004a60 	bl	26bdc <CLogger::Get()>
   14258:	e5d52010 	ldrb	r2, [r5, #16]
   1425c:	e59f31d8 	ldr	r3, [pc, #472]	; 1443c <CUSBPrinterDevice::Configure()+0x208>
   14260:	e58d2000 	str	r2, [sp]
   14264:	e59f11d4 	ldr	r1, [pc, #468]	; 14440 <CUSBPrinterDevice::Configure()+0x20c>
   14268:	e3a02001 	mov	r2, #1
   1426c:	eb004997 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14270:	e3a04000 	mov	r4, #0
   14274:	e1a00004 	mov	r0, r4
   14278:	e28dd01c 	add	sp, sp, #28
   1427c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14280:	e1a00005 	mov	r0, r5
   14284:	ebffed7d 	bl	f880 <CUSBFunction::GetNumEndpoints() const>
   14288:	e5d53010 	ldrb	r3, [r5, #16]
   1428c:	e3530001 	cmp	r3, #1
   14290:	03a03001 	moveq	r3, #1
   14294:	13a03002 	movne	r3, #2
   14298:	e1530000 	cmp	r3, r0
   1429c:	d3a06005 	movle	r6, #5
   142a0:	d3a07014 	movle	r7, #20
   142a4:	da000004 	ble	142bc <CUSBPrinterDevice::Configure()+0x88>
   142a8:	ea000053 	b	143fc <CUSBPrinterDevice::Configure()+0x1c8>
   142ac:	e5d43003 	ldrb	r3, [r4, #3]
   142b0:	e203303f 	and	r3, r3, #63	; 0x3f
   142b4:	e3530002 	cmp	r3, #2
   142b8:	0a000028 	beq	14360 <CUSBPrinterDevice::Configure()+0x12c>
   142bc:	e1a01006 	mov	r1, r6
   142c0:	e1a00005 	mov	r0, r5
   142c4:	ebffed9a 	bl	f934 <CUSBFunction::GetDescriptor(unsigned char)>
   142c8:	e2504000 	subs	r4, r0, #0
   142cc:	1afffff6 	bne	142ac <CUSBPrinterDevice::Configure()+0x78>
   142d0:	e5954018 	ldr	r4, [r5, #24]
   142d4:	e3540000 	cmp	r4, #0
   142d8:	0a00004c 	beq	14410 <CUSBPrinterDevice::Configure()+0x1dc>
   142dc:	e5d53010 	ldrb	r3, [r5, #16]
   142e0:	e1a00005 	mov	r0, r5
   142e4:	e3530001 	cmp	r3, #1
   142e8:	0a000002 	beq	142f8 <CUSBPrinterDevice::Configure()+0xc4>
   142ec:	e5954014 	ldr	r4, [r5, #20]
   142f0:	e3540000 	cmp	r4, #0
   142f4:	0a000049 	beq	14420 <CUSBPrinterDevice::Configure()+0x1ec>
   142f8:	ebffeca8 	bl	f5a0 <CUSBFunction::Configure()>
   142fc:	e2504000 	subs	r4, r0, #0
   14300:	0a000027 	beq	143a4 <CUSBPrinterDevice::Configure()+0x170>
   14304:	e28d0008 	add	r0, sp, #8
   14308:	eb004e19 	bl	27b74 <CString::CString()>
   1430c:	e59f3130 	ldr	r3, [pc, #304]	; 14444 <CUSBPrinterDevice::Configure()+0x210>
   14310:	e59f1130 	ldr	r1, [pc, #304]	; 14448 <CUSBPrinterDevice::Configure()+0x214>
   14314:	e5932000 	ldr	r2, [r3]
   14318:	e28d0008 	add	r0, sp, #8
   1431c:	e282c001 	add	ip, r2, #1
   14320:	e583c000 	str	ip, [r3]
   14324:	eb005355 	bl	29080 <CString::Format(char const*, ...)>
   14328:	eb004412 	bl	25378 <CDeviceNameService::Get()>
   1432c:	e1a06000 	mov	r6, r0
   14330:	e28d0008 	add	r0, sp, #8
   14334:	eb004e24 	bl	27bcc <CString::operator char const*() const>
   14338:	e1a02005 	mov	r2, r5
   1433c:	e1a01000 	mov	r1, r0
   14340:	e3a03000 	mov	r3, #0
   14344:	e1a00006 	mov	r0, r6
   14348:	eb004350 	bl	25090 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1434c:	e28d0008 	add	r0, sp, #8
   14350:	eb004dd4 	bl	27aa8 <CString::~CString()>
   14354:	e1a00004 	mov	r0, r4
   14358:	e28dd01c 	add	sp, sp, #28
   1435c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14360:	e1d430d2 	ldrsb	r3, [r4, #2]
   14364:	e3530000 	cmp	r3, #0
   14368:	ba000015 	blt	143c4 <CUSBPrinterDevice::Configure()+0x190>
   1436c:	e5953018 	ldr	r3, [r5, #24]
   14370:	e1a00005 	mov	r0, r5
   14374:	e3530000 	cmp	r3, #0
   14378:	1a00002b 	bne	1442c <CUSBPrinterDevice::Configure()+0x1f8>
   1437c:	ebffed4b 	bl	f8b0 <CUSBFunction::GetDevice() const>
   14380:	e1a09000 	mov	r9, r0
   14384:	e1a00007 	mov	r0, r7
   14388:	eb005b3d 	bl	2b084 <operator new(unsigned int)>
   1438c:	e1a08000 	mov	r8, r0
   14390:	e1a02004 	mov	r2, r4
   14394:	e1a01009 	mov	r1, r9
   14398:	ebffeb81 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1439c:	e5858018 	str	r8, [r5, #24]
   143a0:	eaffffc5 	b	142bc <CUSBPrinterDevice::Configure()+0x88>
   143a4:	eb004a0c 	bl	26bdc <CLogger::Get()>
   143a8:	e59f309c 	ldr	r3, [pc, #156]	; 1444c <CUSBPrinterDevice::Configure()+0x218>
   143ac:	e3a02001 	mov	r2, #1
   143b0:	e59f1088 	ldr	r1, [pc, #136]	; 14440 <CUSBPrinterDevice::Configure()+0x20c>
   143b4:	eb004945 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   143b8:	e1a00004 	mov	r0, r4
   143bc:	e28dd01c 	add	sp, sp, #28
   143c0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   143c4:	e5953014 	ldr	r3, [r5, #20]
   143c8:	e1a00005 	mov	r0, r5
   143cc:	e3530000 	cmp	r3, #0
   143d0:	1a000015 	bne	1442c <CUSBPrinterDevice::Configure()+0x1f8>
   143d4:	ebffed35 	bl	f8b0 <CUSBFunction::GetDevice() const>
   143d8:	e1a09000 	mov	r9, r0
   143dc:	e1a00007 	mov	r0, r7
   143e0:	eb005b27 	bl	2b084 <operator new(unsigned int)>
   143e4:	e1a08000 	mov	r8, r0
   143e8:	e1a02004 	mov	r2, r4
   143ec:	e1a01009 	mov	r1, r9
   143f0:	ebffeb6b 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   143f4:	e5858014 	str	r8, [r5, #20]
   143f8:	eaffffaf 	b	142bc <CUSBPrinterDevice::Configure()+0x88>
   143fc:	e1a00005 	mov	r0, r5
   14400:	e59f1038 	ldr	r1, [pc, #56]	; 14440 <CUSBPrinterDevice::Configure()+0x20c>
   14404:	ebffed55 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   14408:	e3a04000 	mov	r4, #0
   1440c:	eaffff98 	b	14274 <CUSBPrinterDevice::Configure()+0x40>
   14410:	e1a00005 	mov	r0, r5
   14414:	e59f1024 	ldr	r1, [pc, #36]	; 14440 <CUSBPrinterDevice::Configure()+0x20c>
   14418:	ebffed50 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   1441c:	eaffff94 	b	14274 <CUSBPrinterDevice::Configure()+0x40>
   14420:	e59f1018 	ldr	r1, [pc, #24]	; 14440 <CUSBPrinterDevice::Configure()+0x20c>
   14424:	ebffed4d 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   14428:	eaffff91 	b	14274 <CUSBPrinterDevice::Configure()+0x40>
   1442c:	e59f100c 	ldr	r1, [pc, #12]	; 14440 <CUSBPrinterDevice::Configure()+0x20c>
   14430:	ebffed4a 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   14434:	e3a04000 	mov	r4, #0
   14438:	eaffff8d 	b	14274 <CUSBPrinterDevice::Configure()+0x40>
   1443c:	00041058 	.word	0x00041058
   14440:	00041034 	.word	0x00041034
   14444:	00047fac 	.word	0x00047fac
   14448:	00041078 	.word	0x00041078
   1444c:	000403d4 	.word	0x000403d4

00014450 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
   14450:	e92d4010 	push	{r4, lr}
   14454:	e3a0e000 	mov	lr, #0
   14458:	e59d4008 	ldr	r4, [sp, #8]
   1445c:	e151000e 	cmp	r1, lr
   14460:	e5801000 	str	r1, [r0]
   14464:	e5802008 	str	r2, [r0, #8]
   14468:	e580300c 	str	r3, [r0, #12]
   1446c:	e5804004 	str	r4, [r0, #4]
   14470:	e580e010 	str	lr, [r0, #16]
   14474:	e580e014 	str	lr, [r0, #20]
   14478:	e580e018 	str	lr, [r0, #24]
   1447c:	e580e01c 	str	lr, [r0, #28]
   14480:	e580e020 	str	lr, [r0, #32]
   14484:	e5c0e024 	strb	lr, [r0, #36]	; 0x24
   14488:	0a00000a 	beq	144b8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x68>
   1448c:	e2922000 	adds	r2, r2, #0
   14490:	13a02001 	movne	r2, #1
   14494:	e3530000 	cmp	r3, #0
   14498:	11a03002 	movne	r3, r2
   1449c:	03823001 	orreq	r3, r2, #1
   144a0:	e3530000 	cmp	r3, #0
   144a4:	18bd8010 	popne	{r4, pc}
   144a8:	e3a02024 	mov	r2, #36	; 0x24
   144ac:	e59f1014 	ldr	r1, [pc, #20]	; 144c8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
   144b0:	e59f0014 	ldr	r0, [pc, #20]	; 144cc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x7c>
   144b4:	eb0040d5 	bl	24810 <assertion_failed>
   144b8:	e3a02023 	mov	r2, #35	; 0x23
   144bc:	e59f1004 	ldr	r1, [pc, #4]	; 144c8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
   144c0:	e59f0008 	ldr	r0, [pc, #8]	; 144d0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x80>
   144c4:	eb0040d1 	bl	24810 <assertion_failed>
   144c8:	00041080 	.word	0x00041080
   144cc:	00041090 	.word	0x00041090
   144d0:	0003fbe0 	.word	0x0003fbe0

000144d4 <CUSBRequest::~CUSBRequest()>:
   144d4:	e12fff1e 	bx	lr

000144d8 <CUSBRequest::GetEndpoint() const>:
   144d8:	e5900000 	ldr	r0, [r0]
   144dc:	e3500000 	cmp	r0, #0
   144e0:	0a000000 	beq	144e8 <CUSBRequest::GetEndpoint() const+0x10>
   144e4:	e12fff1e 	bx	lr
   144e8:	e92d4010 	push	{r4, lr}
   144ec:	e3a02031 	mov	r2, #49	; 0x31
   144f0:	e59f1004 	ldr	r1, [pc, #4]	; 144fc <CUSBRequest::GetEndpoint() const+0x24>
   144f4:	e59f0004 	ldr	r0, [pc, #4]	; 14500 <CUSBRequest::GetEndpoint() const+0x28>
   144f8:	eb0040c4 	bl	24810 <assertion_failed>
   144fc:	00041080 	.word	0x00041080
   14500:	0003fbe0 	.word	0x0003fbe0

00014504 <CUSBRequest::SetStatus(int)>:
   14504:	e5801010 	str	r1, [r0, #16]
   14508:	e12fff1e 	bx	lr

0001450c <CUSBRequest::SetResultLen(unsigned int)>:
   1450c:	e5801014 	str	r1, [r0, #20]
   14510:	e12fff1e 	bx	lr

00014514 <CUSBRequest::GetStatus() const>:
   14514:	e5900010 	ldr	r0, [r0, #16]
   14518:	e12fff1e 	bx	lr

0001451c <CUSBRequest::GetResultLength() const>:
   1451c:	e5903010 	ldr	r3, [r0, #16]
   14520:	e3530000 	cmp	r3, #0
   14524:	0a000001 	beq	14530 <CUSBRequest::GetResultLength() const+0x14>
   14528:	e5900014 	ldr	r0, [r0, #20]
   1452c:	e12fff1e 	bx	lr
   14530:	e92d4010 	push	{r4, lr}
   14534:	e3a02046 	mov	r2, #70	; 0x46
   14538:	e59f1004 	ldr	r1, [pc, #4]	; 14544 <CUSBRequest::GetResultLength() const+0x28>
   1453c:	e59f0004 	ldr	r0, [pc, #4]	; 14548 <CUSBRequest::GetResultLength() const+0x2c>
   14540:	eb0040b2 	bl	24810 <assertion_failed>
   14544:	00041080 	.word	0x00041080
   14548:	000410b4 	.word	0x000410b4

0001454c <CUSBRequest::GetSetupData()>:
   1454c:	e92d4010 	push	{r4, lr}
   14550:	e1a04000 	mov	r4, r0
   14554:	e5900000 	ldr	r0, [r0]
   14558:	ebffeb89 	bl	f384 <CUSBEndpoint::GetType() const>
   1455c:	e3500000 	cmp	r0, #0
   14560:	1a000006 	bne	14580 <CUSBRequest::GetSetupData()+0x34>
   14564:	e5940004 	ldr	r0, [r4, #4]
   14568:	e3500000 	cmp	r0, #0
   1456c:	18bd8010 	popne	{r4, pc}
   14570:	e3a0204e 	mov	r2, #78	; 0x4e
   14574:	e59f1014 	ldr	r1, [pc, #20]	; 14590 <CUSBRequest::GetSetupData()+0x44>
   14578:	e59f0014 	ldr	r0, [pc, #20]	; 14594 <CUSBRequest::GetSetupData()+0x48>
   1457c:	eb0040a3 	bl	24810 <assertion_failed>
   14580:	e3a0204d 	mov	r2, #77	; 0x4d
   14584:	e59f1004 	ldr	r1, [pc, #4]	; 14590 <CUSBRequest::GetSetupData()+0x44>
   14588:	e59f0008 	ldr	r0, [pc, #8]	; 14598 <CUSBRequest::GetSetupData()+0x4c>
   1458c:	eb00409f 	bl	24810 <assertion_failed>
   14590:	00041080 	.word	0x00041080
   14594:	000410f0 	.word	0x000410f0
   14598:	000410c0 	.word	0x000410c0

0001459c <CUSBRequest::GetBuffer()>:
   1459c:	e5903008 	ldr	r3, [r0, #8]
   145a0:	e3530000 	cmp	r3, #0
   145a4:	0a000001 	beq	145b0 <CUSBRequest::GetBuffer()+0x14>
   145a8:	e1a00003 	mov	r0, r3
   145ac:	e12fff1e 	bx	lr
   145b0:	e590200c 	ldr	r2, [r0, #12]
   145b4:	e3520000 	cmp	r2, #0
   145b8:	0afffffa 	beq	145a8 <CUSBRequest::GetBuffer()+0xc>
   145bc:	e92d4010 	push	{r4, lr}
   145c0:	e3a02056 	mov	r2, #86	; 0x56
   145c4:	e59f1004 	ldr	r1, [pc, #4]	; 145d0 <CUSBRequest::GetBuffer()+0x34>
   145c8:	e59f0004 	ldr	r0, [pc, #4]	; 145d4 <CUSBRequest::GetBuffer()+0x38>
   145cc:	eb00408f 	bl	24810 <assertion_failed>
   145d0:	00041080 	.word	0x00041080
   145d4:	00041090 	.word	0x00041090

000145d8 <CUSBRequest::GetBufLen() const>:
   145d8:	e590000c 	ldr	r0, [r0, #12]
   145dc:	e12fff1e 	bx	lr

000145e0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
   145e0:	e3510000 	cmp	r1, #0
   145e4:	e5801018 	str	r1, [r0, #24]
   145e8:	e580201c 	str	r2, [r0, #28]
   145ec:	e5803020 	str	r3, [r0, #32]
   145f0:	0a000000 	beq	145f8 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x18>
   145f4:	e12fff1e 	bx	lr
   145f8:	e92d4010 	push	{r4, lr}
   145fc:	e3a02066 	mov	r2, #102	; 0x66
   14600:	e59f1004 	ldr	r1, [pc, #4]	; 1460c <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x2c>
   14604:	e59f0004 	ldr	r0, [pc, #4]	; 14610 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x30>
   14608:	eb004080 	bl	24810 <assertion_failed>
   1460c:	00041080 	.word	0x00041080
   14610:	00041104 	.word	0x00041104

00014614 <CUSBRequest::CallCompletionRoutine()>:
   14614:	e92d4010 	push	{r4, lr}
   14618:	e590e018 	ldr	lr, [r0, #24]
   1461c:	e35e0000 	cmp	lr, #0
   14620:	0a000004 	beq	14638 <CUSBRequest::CallCompletionRoutine()+0x24>
   14624:	e1a0300e 	mov	r3, lr
   14628:	e8bd4010 	pop	{r4, lr}
   1462c:	e5902020 	ldr	r2, [r0, #32]
   14630:	e590101c 	ldr	r1, [r0, #28]
   14634:	e12fff13 	bx	r3
   14638:	e3a0206b 	mov	r2, #107	; 0x6b
   1463c:	e59f1004 	ldr	r1, [pc, #4]	; 14648 <CUSBRequest::CallCompletionRoutine()+0x34>
   14640:	e59f0004 	ldr	r0, [pc, #4]	; 1464c <CUSBRequest::CallCompletionRoutine()+0x38>
   14644:	eb004071 	bl	24810 <assertion_failed>
   14648:	00041080 	.word	0x00041080
   1464c:	00041104 	.word	0x00041104

00014650 <CUSBRequest::SetCompleteOnNAK()>:
   14650:	e3a03001 	mov	r3, #1
   14654:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   14658:	e12fff1e 	bx	lr

0001465c <CUSBRequest::IsCompleteOnNAK() const>:
   1465c:	e5d00024 	ldrb	r0, [r0, #36]	; 0x24
   14660:	e12fff1e 	bx	lr

00014664 <CUSBRequest::operator new(unsigned int)>:
   14664:	e3500028 	cmp	r0, #40	; 0x28
   14668:	e92d4010 	push	{r4, lr}
   1466c:	1a000005 	bne	14688 <CUSBRequest::operator new(unsigned int)+0x24>
   14670:	e59f3030 	ldr	r3, [pc, #48]	; 146a8 <CUSBRequest::operator new(unsigned int)+0x44>
   14674:	e5930000 	ldr	r0, [r3]
   14678:	e3500000 	cmp	r0, #0
   1467c:	0a000005 	beq	14698 <CUSBRequest::operator new(unsigned int)+0x34>
   14680:	e8bd4010 	pop	{r4, lr}
   14684:	ea004167 	b	24c28 <CClassAllocator::Allocate()>
   14688:	e3a0207a 	mov	r2, #122	; 0x7a
   1468c:	e59f1018 	ldr	r1, [pc, #24]	; 146ac <CUSBRequest::operator new(unsigned int)+0x48>
   14690:	e59f0018 	ldr	r0, [pc, #24]	; 146b0 <CUSBRequest::operator new(unsigned int)+0x4c>
   14694:	eb00405d 	bl	24810 <assertion_failed>
   14698:	e3a0207a 	mov	r2, #122	; 0x7a
   1469c:	e59f1008 	ldr	r1, [pc, #8]	; 146ac <CUSBRequest::operator new(unsigned int)+0x48>
   146a0:	e59f000c 	ldr	r0, [pc, #12]	; 146b4 <CUSBRequest::operator new(unsigned int)+0x50>
   146a4:	eb004059 	bl	24810 <assertion_failed>
   146a8:	0004e1fc 	.word	0x0004e1fc
   146ac:	00041080 	.word	0x00041080
   146b0:	00041120 	.word	0x00041120
   146b4:	0003f84c 	.word	0x0003f84c

000146b8 <CUSBRequest::operator delete(void*, unsigned int)>:
   146b8:	e3510028 	cmp	r1, #40	; 0x28
   146bc:	e92d4010 	push	{r4, lr}
   146c0:	1a000007 	bne	146e4 <CUSBRequest::operator delete(void*, unsigned int)+0x2c>
   146c4:	e59f3038 	ldr	r3, [pc, #56]	; 14704 <CUSBRequest::operator delete(void*, unsigned int)+0x4c>
   146c8:	e5933000 	ldr	r3, [r3]
   146cc:	e3530000 	cmp	r3, #0
   146d0:	0a000007 	beq	146f4 <CUSBRequest::operator delete(void*, unsigned int)+0x3c>
   146d4:	e8bd4010 	pop	{r4, lr}
   146d8:	e1a01000 	mov	r1, r0
   146dc:	e1a00003 	mov	r0, r3
   146e0:	ea00418b 	b	24d14 <CClassAllocator::Free(void*)>
   146e4:	e3a0207a 	mov	r2, #122	; 0x7a
   146e8:	e59f1018 	ldr	r1, [pc, #24]	; 14708 <CUSBRequest::operator delete(void*, unsigned int)+0x50>
   146ec:	e59f0018 	ldr	r0, [pc, #24]	; 1470c <CUSBRequest::operator delete(void*, unsigned int)+0x54>
   146f0:	eb004046 	bl	24810 <assertion_failed>
   146f4:	e3a0207a 	mov	r2, #122	; 0x7a
   146f8:	e59f1008 	ldr	r1, [pc, #8]	; 14708 <CUSBRequest::operator delete(void*, unsigned int)+0x50>
   146fc:	e59f000c 	ldr	r0, [pc, #12]	; 14710 <CUSBRequest::operator delete(void*, unsigned int)+0x58>
   14700:	eb004042 	bl	24810 <assertion_failed>
   14704:	0004e1fc 	.word	0x0004e1fc
   14708:	00041080 	.word	0x00041080
   1470c:	00041120 	.word	0x00041120
   14710:	0003f84c 	.word	0x0003f84c

00014714 <CUSBRequest::InitAllocator(unsigned int)>:
   14714:	e92d4070 	push	{r4, r5, r6, lr}
   14718:	e59f4040 	ldr	r4, [pc, #64]	; 14760 <CUSBRequest::InitAllocator(unsigned int)+0x4c>
   1471c:	e5943000 	ldr	r3, [r4]
   14720:	e3530000 	cmp	r3, #0
   14724:	1a000009 	bne	14750 <CUSBRequest::InitAllocator(unsigned int)+0x3c>
   14728:	e1a05000 	mov	r5, r0
   1472c:	e3a0001c 	mov	r0, #28
   14730:	eb005a53 	bl	2b084 <operator new(unsigned int)>
   14734:	e1a06000 	mov	r6, r0
   14738:	e1a02005 	mov	r2, r5
   1473c:	e59f3020 	ldr	r3, [pc, #32]	; 14764 <CUSBRequest::InitAllocator(unsigned int)+0x50>
   14740:	e3a01028 	mov	r1, #40	; 0x28
   14744:	eb00411e 	bl	24bc4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   14748:	e5846000 	str	r6, [r4]
   1474c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14750:	e3a0207a 	mov	r2, #122	; 0x7a
   14754:	e59f100c 	ldr	r1, [pc, #12]	; 14768 <CUSBRequest::InitAllocator(unsigned int)+0x54>
   14758:	e59f000c 	ldr	r0, [pc, #12]	; 1476c <CUSBRequest::InitAllocator(unsigned int)+0x58>
   1475c:	eb00402b 	bl	24810 <assertion_failed>
   14760:	0004e1fc 	.word	0x0004e1fc
   14764:	00041140 	.word	0x00041140
   14768:	00041080 	.word	0x00041080
   1476c:	0003f860 	.word	0x0003f860

00014770 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
   14770:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14774:	e59f4054 	ldr	r4, [pc, #84]	; 147d0 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   14778:	e1a05000 	mov	r5, r0
   1477c:	e5940000 	ldr	r0, [r4]
   14780:	e24dd00c 	sub	sp, sp, #12
   14784:	e3500000 	cmp	r0, #0
   14788:	1a00000c 	bne	147c0 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
   1478c:	e1a06001 	mov	r6, r1
   14790:	e3a0001c 	mov	r0, #28
   14794:	eb005a3a 	bl	2b084 <operator new(unsigned int)>
   14798:	e59f1034 	ldr	r1, [pc, #52]	; 147d4 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   1479c:	e1a03006 	mov	r3, r6
   147a0:	e58d1000 	str	r1, [sp]
   147a4:	e1a02005 	mov	r2, r5
   147a8:	e3a01028 	mov	r1, #40	; 0x28
   147ac:	e1a07000 	mov	r7, r0
   147b0:	eb00410f 	bl	24bf4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   147b4:	e5847000 	str	r7, [r4]
   147b8:	e28dd00c 	add	sp, sp, #12
   147bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   147c0:	e3a0207a 	mov	r2, #122	; 0x7a
   147c4:	e59f100c 	ldr	r1, [pc, #12]	; 147d8 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   147c8:	e59f000c 	ldr	r0, [pc, #12]	; 147dc <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   147cc:	eb00400f 	bl	24810 <assertion_failed>
   147d0:	0004e1fc 	.word	0x0004e1fc
   147d4:	00041140 	.word	0x00041140
   147d8:	00041080 	.word	0x00041080
   147dc:	0003f860 	.word	0x0003f860

000147e0 <CUSBStandardHub::~CUSBStandardHub()>:
   147e0:	e5902018 	ldr	r2, [r0, #24]
   147e4:	e59f30b0 	ldr	r3, [pc, #176]	; 1489c <CUSBStandardHub::~CUSBStandardHub()+0xbc>
   147e8:	e3520000 	cmp	r2, #0
   147ec:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   147f0:	e1a07000 	mov	r7, r0
   147f4:	e5803000 	str	r3, [r0]
   147f8:	0a000013 	beq	1484c <CUSBStandardHub::~CUSBStandardHub()+0x6c>
   147fc:	e3a04000 	mov	r4, #0
   14800:	e3a09004 	mov	r9, #4
   14804:	e1a08004 	mov	r8, r4
   14808:	e2805020 	add	r5, r0, #32
   1480c:	e2806040 	add	r6, r0, #64	; 0x40
   14810:	e5960000 	ldr	r0, [r6]
   14814:	e1a01009 	mov	r1, r9
   14818:	eb005a27 	bl	2b0bc <operator delete(void*, unsigned int)>
   1481c:	e5950000 	ldr	r0, [r5]
   14820:	e2844001 	add	r4, r4, #1
   14824:	e3500000 	cmp	r0, #0
   14828:	e4868004 	str	r8, [r6], #4
   1482c:	0a000002 	beq	1483c <CUSBStandardHub::~CUSBStandardHub()+0x5c>
   14830:	e5903000 	ldr	r3, [r0]
   14834:	e5933004 	ldr	r3, [r3, #4]
   14838:	e12fff33 	blx	r3
   1483c:	e5973018 	ldr	r3, [r7, #24]
   14840:	e4858004 	str	r8, [r5], #4
   14844:	e1530004 	cmp	r3, r4
   14848:	8afffff0 	bhi	14810 <CUSBStandardHub::~CUSBStandardHub()+0x30>
   1484c:	e3a03000 	mov	r3, #0
   14850:	e5974014 	ldr	r4, [r7, #20]
   14854:	e5873018 	str	r3, [r7, #24]
   14858:	e1540003 	cmp	r4, r3
   1485c:	0a000004 	beq	14874 <CUSBStandardHub::~CUSBStandardHub()+0x94>
   14860:	e1a00004 	mov	r0, r4
   14864:	ebffeab8 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   14868:	e1a00004 	mov	r0, r4
   1486c:	e3a01014 	mov	r1, #20
   14870:	eb005a11 	bl	2b0bc <operator delete(void*, unsigned int)>
   14874:	e3a04000 	mov	r4, #0
   14878:	e3a01009 	mov	r1, #9
   1487c:	e5970010 	ldr	r0, [r7, #16]
   14880:	e5874014 	str	r4, [r7, #20]
   14884:	eb005a0c 	bl	2b0bc <operator delete(void*, unsigned int)>
   14888:	e5874010 	str	r4, [r7, #16]
   1488c:	e1a00007 	mov	r0, r7
   14890:	ebffeb19 	bl	f4fc <CUSBFunction::~CUSBFunction()>
   14894:	e1a00007 	mov	r0, r7
   14898:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1489c:	00041154 	.word	0x00041154

000148a0 <CUSBStandardHub::~CUSBStandardHub()>:
   148a0:	e92d4010 	push	{r4, lr}
   148a4:	e1a04000 	mov	r4, r0
   148a8:	ebffffcc 	bl	147e0 <CUSBStandardHub::~CUSBStandardHub()>
   148ac:	e1a00004 	mov	r0, r4
   148b0:	e3a01068 	mov	r1, #104	; 0x68
   148b4:	eb005a00 	bl	2b0bc <operator delete(void*, unsigned int)>
   148b8:	e1a00004 	mov	r0, r4
   148bc:	e8bd8010 	pop	{r4, pc}

000148c0 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
   148c0:	e92d4010 	push	{r4, lr}
   148c4:	e1a04000 	mov	r4, r0
   148c8:	ebffeb9c 	bl	f740 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   148cc:	e3a03000 	mov	r3, #0
   148d0:	e284c040 	add	ip, r4, #64	; 0x40
   148d4:	e1a0000c 	mov	r0, ip
   148d8:	e59f1038 	ldr	r1, [pc, #56]	; 14918 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x58>
   148dc:	e1a02003 	mov	r2, r3
   148e0:	e5843010 	str	r3, [r4, #16]
   148e4:	e5841000 	str	r1, [r4]
   148e8:	e5843014 	str	r3, [r4, #20]
   148ec:	e5843018 	str	r3, [r4, #24]
   148f0:	e5c4301c 	strb	r3, [r4, #28]
   148f4:	e2841060 	add	r1, r4, #96	; 0x60
   148f8:	e2843020 	add	r3, r4, #32
   148fc:	e4832004 	str	r2, [r3], #4
   14900:	e153000c 	cmp	r3, ip
   14904:	e4802004 	str	r2, [r0], #4
   14908:	e4c12001 	strb	r2, [r1], #1
   1490c:	1afffffa 	bne	148fc <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x3c>
   14910:	e1a00004 	mov	r0, r4
   14914:	e8bd8010 	pop	{r4, pc}
   14918:	00041154 	.word	0x00041154

0001491c <CUSBStandardHub::DisablePort(unsigned int)>:
   1491c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   14920:	e5903018 	ldr	r3, [r0, #24]
   14924:	e24dd014 	sub	sp, sp, #20
   14928:	e1530001 	cmp	r3, r1
   1492c:	9a000019 	bls	14998 <CUSBStandardHub::DisablePort(unsigned int)+0x7c>
   14930:	e1a06001 	mov	r6, r1
   14934:	e1a05000 	mov	r5, r0
   14938:	ebffebf2 	bl	f908 <CUSBFunction::GetHost() const>
   1493c:	e3a04001 	mov	r4, #1
   14940:	e1a09000 	mov	r9, r0
   14944:	e1a00005 	mov	r0, r5
   14948:	ebffebe3 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
   1494c:	e3a07000 	mov	r7, #0
   14950:	e0868004 	add	r8, r6, r4
   14954:	e6ff3078 	uxth	r3, r8
   14958:	e1a01000 	mov	r1, r0
   1495c:	e58d3004 	str	r3, [sp, #4]
   14960:	e1a00009 	mov	r0, r9
   14964:	e58d700c 	str	r7, [sp, #12]
   14968:	e58d7008 	str	r7, [sp, #8]
   1496c:	e58d4000 	str	r4, [sp]
   14970:	e1a03004 	mov	r3, r4
   14974:	e3a02023 	mov	r2, #35	; 0x23
   14978:	ebfff7b4 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1497c:	e1500007 	cmp	r0, r7
   14980:	a0855006 	addge	r5, r5, r6
   14984:	a1a00004 	movge	r0, r4
   14988:	a5c57060 	strbge	r7, [r5, #96]	; 0x60
   1498c:	ba000005 	blt	149a8 <CUSBStandardHub::DisablePort(unsigned int)+0x8c>
   14990:	e28dd014 	add	sp, sp, #20
   14994:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14998:	e3a020c7 	mov	r2, #199	; 0xc7
   1499c:	e59f1024 	ldr	r1, [pc, #36]	; 149c8 <CUSBStandardHub::DisablePort(unsigned int)+0xac>
   149a0:	e59f0024 	ldr	r0, [pc, #36]	; 149cc <CUSBStandardHub::DisablePort(unsigned int)+0xb0>
   149a4:	eb003f99 	bl	24810 <assertion_failed>
   149a8:	eb00488b 	bl	26bdc <CLogger::Get()>
   149ac:	e58d8000 	str	r8, [sp]
   149b0:	e1a02004 	mov	r2, r4
   149b4:	e59f3014 	ldr	r3, [pc, #20]	; 149d0 <CUSBStandardHub::DisablePort(unsigned int)+0xb4>
   149b8:	e59f1014 	ldr	r1, [pc, #20]	; 149d4 <CUSBStandardHub::DisablePort(unsigned int)+0xb8>
   149bc:	eb0047c3 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   149c0:	e1a00007 	mov	r0, r7
   149c4:	eafffff1 	b	14990 <CUSBStandardHub::DisablePort(unsigned int)+0x74>
   149c8:	00041180 	.word	0x00041180
   149cc:	00041194 	.word	0x00041194
   149d0:	000411ac 	.word	0x000411ac
   149d4:	00041178 	.word	0x00041178

000149d8 <CUSBStandardHub::RemoveDevice(unsigned int)>:
   149d8:	e92d4070 	push	{r4, r5, r6, lr}
   149dc:	e1a04000 	mov	r4, r0
   149e0:	e1a06001 	mov	r6, r1
   149e4:	ebffffcc 	bl	1491c <CUSBStandardHub::DisablePort(unsigned int)>
   149e8:	e2505000 	subs	r5, r0, #0
   149ec:	0a000008 	beq	14a14 <CUSBStandardHub::RemoveDevice(unsigned int)+0x3c>
   149f0:	e0844106 	add	r4, r4, r6, lsl #2
   149f4:	e5940020 	ldr	r0, [r4, #32]
   149f8:	e3500000 	cmp	r0, #0
   149fc:	0a000002 	beq	14a0c <CUSBStandardHub::RemoveDevice(unsigned int)+0x34>
   14a00:	e5903000 	ldr	r3, [r0]
   14a04:	e5933004 	ldr	r3, [r3, #4]
   14a08:	e12fff33 	blx	r3
   14a0c:	e3a03000 	mov	r3, #0
   14a10:	e5843020 	str	r3, [r4, #32]
   14a14:	e1a00005 	mov	r0, r5
   14a18:	e8bd8070 	pop	{r4, r5, r6, pc}

00014a1c <CUSBStandardHub::Initialize()>:
   14a1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14a20:	e24dd010 	sub	sp, sp, #16
   14a24:	e1a04000 	mov	r4, r0
   14a28:	ebffeaaf 	bl	f4ec <CUSBFunction::Initialize()>
   14a2c:	e2506000 	subs	r6, r0, #0
   14a30:	0a00001d 	beq	14aac <CUSBStandardHub::Initialize()+0x90>
   14a34:	e5945010 	ldr	r5, [r4, #16]
   14a38:	e3550000 	cmp	r5, #0
   14a3c:	1a000039 	bne	14b28 <CUSBStandardHub::Initialize()+0x10c>
   14a40:	e3a00009 	mov	r0, #9
   14a44:	eb00598e 	bl	2b084 <operator new(unsigned int)>
   14a48:	e5840010 	str	r0, [r4, #16]
   14a4c:	e1a00004 	mov	r0, r4
   14a50:	ebffebac 	bl	f908 <CUSBFunction::GetHost() const>
   14a54:	e1a08000 	mov	r8, r0
   14a58:	e1a00004 	mov	r0, r4
   14a5c:	ebffeb9e 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
   14a60:	e3a07009 	mov	r7, #9
   14a64:	e3a020a0 	mov	r2, #160	; 0xa0
   14a68:	e5943010 	ldr	r3, [r4, #16]
   14a6c:	e1a01000 	mov	r1, r0
   14a70:	e58d2008 	str	r2, [sp, #8]
   14a74:	e1a00008 	mov	r0, r8
   14a78:	e88d0088 	stm	sp, {r3, r7}
   14a7c:	e58d500c 	str	r5, [sp, #12]
   14a80:	e1a03005 	mov	r3, r5
   14a84:	e3a02029 	mov	r2, #41	; 0x29
   14a88:	ebfff7a2 	bl	12918 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   14a8c:	e1500007 	cmp	r0, r7
   14a90:	e1a08000 	mov	r8, r0
   14a94:	1a000007 	bne	14ab8 <CUSBStandardHub::Initialize()+0x9c>
   14a98:	e5943010 	ldr	r3, [r4, #16]
   14a9c:	e5d33002 	ldrb	r3, [r3, #2]
   14aa0:	e3530008 	cmp	r3, #8
   14aa4:	e5843018 	str	r3, [r4, #24]
   14aa8:	8a00000f 	bhi	14aec <CUSBStandardHub::Initialize()+0xd0>
   14aac:	e1a00006 	mov	r0, r6
   14ab0:	e28dd010 	add	sp, sp, #16
   14ab4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14ab8:	e1a06005 	mov	r6, r5
   14abc:	eb004846 	bl	26bdc <CLogger::Get()>
   14ac0:	e59f3070 	ldr	r3, [pc, #112]	; 14b38 <CUSBStandardHub::Initialize()+0x11c>
   14ac4:	e3a02001 	mov	r2, #1
   14ac8:	e59f106c 	ldr	r1, [pc, #108]	; 14b3c <CUSBStandardHub::Initialize()+0x120>
   14acc:	eb00477f 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ad0:	e5940010 	ldr	r0, [r4, #16]
   14ad4:	e1a01007 	mov	r1, r7
   14ad8:	eb005977 	bl	2b0bc <operator delete(void*, unsigned int)>
   14adc:	e1a00006 	mov	r0, r6
   14ae0:	e5845010 	str	r5, [r4, #16]
   14ae4:	e28dd010 	add	sp, sp, #16
   14ae8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14aec:	e1a06005 	mov	r6, r5
   14af0:	eb004839 	bl	26bdc <CLogger::Get()>
   14af4:	e5942018 	ldr	r2, [r4, #24]
   14af8:	e59f3040 	ldr	r3, [pc, #64]	; 14b40 <CUSBStandardHub::Initialize()+0x124>
   14afc:	e58d2000 	str	r2, [sp]
   14b00:	e59f1034 	ldr	r1, [pc, #52]	; 14b3c <CUSBStandardHub::Initialize()+0x120>
   14b04:	e3a02001 	mov	r2, #1
   14b08:	eb004770 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14b0c:	e5940010 	ldr	r0, [r4, #16]
   14b10:	e1a01008 	mov	r1, r8
   14b14:	eb005968 	bl	2b0bc <operator delete(void*, unsigned int)>
   14b18:	e1a00006 	mov	r0, r6
   14b1c:	e5845010 	str	r5, [r4, #16]
   14b20:	e28dd010 	add	sp, sp, #16
   14b24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14b28:	e3a02055 	mov	r2, #85	; 0x55
   14b2c:	e59f1010 	ldr	r1, [pc, #16]	; 14b44 <CUSBStandardHub::Initialize()+0x128>
   14b30:	e59f0010 	ldr	r0, [pc, #16]	; 14b48 <CUSBStandardHub::Initialize()+0x12c>
   14b34:	eb003f35 	bl	24810 <assertion_failed>
   14b38:	000411d4 	.word	0x000411d4
   14b3c:	00041178 	.word	0x00041178
   14b40:	000411f0 	.word	0x000411f0
   14b44:	00041180 	.word	0x00041180
   14b48:	000411c4 	.word	0x000411c4

00014b4c <CUSBStandardHub::EnumeratePorts()>:
   14b4c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b50:	e24dd024 	sub	sp, sp, #36	; 0x24
   14b54:	e1a07000 	mov	r7, r0
   14b58:	ebffeb6a 	bl	f908 <CUSBFunction::GetHost() const>
   14b5c:	e2509000 	subs	r9, r0, #0
   14b60:	0a000139 	beq	1504c <CUSBStandardHub::EnumeratePorts()+0x500>
   14b64:	e1a00007 	mov	r0, r7
   14b68:	ebffeb5b 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
   14b6c:	e2503000 	subs	r3, r0, #0
   14b70:	e58d3014 	str	r3, [sp, #20]
   14b74:	0a00013f 	beq	15078 <CUSBStandardHub::EnumeratePorts()+0x52c>
   14b78:	e5973018 	ldr	r3, [r7, #24]
   14b7c:	e3530000 	cmp	r3, #0
   14b80:	0a000140 	beq	15088 <CUSBStandardHub::EnumeratePorts()+0x53c>
   14b84:	e5d7601c 	ldrb	r6, [r7, #28]
   14b88:	e3560000 	cmp	r6, #0
   14b8c:	0a000074 	beq	14d64 <CUSBStandardHub::EnumeratePorts()+0x218>
   14b90:	e2873020 	add	r3, r7, #32
   14b94:	e58d3018 	str	r3, [sp, #24]
   14b98:	e1a05003 	mov	r5, r3
   14b9c:	e3a04001 	mov	r4, #1
   14ba0:	e2876040 	add	r6, r7, #64	; 0x40
   14ba4:	ea000006 	b	14bc4 <CUSBStandardHub::EnumeratePorts()+0x78>
   14ba8:	ebffe504 	bl	dfc0 <CUSBDevice::ReScanDevices()>
   14bac:	e5973018 	ldr	r3, [r7, #24]
   14bb0:	e2855004 	add	r5, r5, #4
   14bb4:	e1530004 	cmp	r3, r4
   14bb8:	e2866004 	add	r6, r6, #4
   14bbc:	e2844001 	add	r4, r4, #1
   14bc0:	9a000089 	bls	14dec <CUSBStandardHub::EnumeratePorts()+0x2a0>
   14bc4:	e5950000 	ldr	r0, [r5]
   14bc8:	e2448001 	sub	r8, r4, #1
   14bcc:	e3500000 	cmp	r0, #0
   14bd0:	1afffff4 	bne	14ba8 <CUSBStandardHub::EnumeratePorts()+0x5c>
   14bd4:	e5963000 	ldr	r3, [r6]
   14bd8:	e3530000 	cmp	r3, #0
   14bdc:	0a00005b 	beq	14d50 <CUSBStandardHub::EnumeratePorts()+0x204>
   14be0:	e3a02004 	mov	r2, #4
   14be4:	e58d3008 	str	r3, [sp, #8]
   14be8:	e3a03000 	mov	r3, #0
   14bec:	e6ffa074 	uxth	sl, r4
   14bf0:	e58d200c 	str	r2, [sp, #12]
   14bf4:	e88d0408 	stm	sp, {r3, sl}
   14bf8:	e3a020a3 	mov	r2, #163	; 0xa3
   14bfc:	e59d1014 	ldr	r1, [sp, #20]
   14c00:	e1a00009 	mov	r0, r9
   14c04:	ebfff711 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14c08:	e3500004 	cmp	r0, #4
   14c0c:	e1a0b000 	mov	fp, r0
   14c10:	0a000006 	beq	14c30 <CUSBStandardHub::EnumeratePorts()+0xe4>
   14c14:	eb0047f0 	bl	26bdc <CLogger::Get()>
   14c18:	e58d4000 	str	r4, [sp]
   14c1c:	e59f35b4 	ldr	r3, [pc, #1460]	; 151d8 <CUSBStandardHub::EnumeratePorts()+0x68c>
   14c20:	e3a02001 	mov	r2, #1
   14c24:	e59f15b0 	ldr	r1, [pc, #1456]	; 151dc <CUSBStandardHub::EnumeratePorts()+0x690>
   14c28:	eb004728 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14c2c:	eaffffde 	b	14bac <CUSBStandardHub::EnumeratePorts()+0x60>
   14c30:	e5962000 	ldr	r2, [r6]
   14c34:	e5d23000 	ldrb	r3, [r2]
   14c38:	e5d22001 	ldrb	r2, [r2, #1]
   14c3c:	e1833402 	orr	r3, r3, r2, lsl #8
   14c40:	e3130c01 	tst	r3, #256	; 0x100
   14c44:	0a0000f5 	beq	15020 <CUSBStandardHub::EnumeratePorts()+0x4d4>
   14c48:	e3130001 	tst	r3, #1
   14c4c:	0affffd6 	beq	14bac <CUSBStandardHub::EnumeratePorts()+0x60>
   14c50:	e3a03000 	mov	r3, #0
   14c54:	e58d0000 	str	r0, [sp]
   14c58:	e58d300c 	str	r3, [sp, #12]
   14c5c:	e58d3008 	str	r3, [sp, #8]
   14c60:	e58da004 	str	sl, [sp, #4]
   14c64:	e3a03003 	mov	r3, #3
   14c68:	e3a02023 	mov	r2, #35	; 0x23
   14c6c:	e59d1014 	ldr	r1, [sp, #20]
   14c70:	e1a00009 	mov	r0, r9
   14c74:	ebfff6f5 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14c78:	e3500000 	cmp	r0, #0
   14c7c:	ba0000eb 	blt	15030 <CUSBStandardHub::EnumeratePorts()+0x4e4>
   14c80:	eb0054a2 	bl	29f10 <CTimer::Get()>
   14c84:	e3a00064 	mov	r0, #100	; 0x64
   14c88:	eb005467 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
   14c8c:	e3a02000 	mov	r2, #0
   14c90:	e5963000 	ldr	r3, [r6]
   14c94:	e59d1014 	ldr	r1, [sp, #20]
   14c98:	e58d2000 	str	r2, [sp]
   14c9c:	e58d3008 	str	r3, [sp, #8]
   14ca0:	e58db00c 	str	fp, [sp, #12]
   14ca4:	e1a03002 	mov	r3, r2
   14ca8:	e58da004 	str	sl, [sp, #4]
   14cac:	e3a020a3 	mov	r2, #163	; 0xa3
   14cb0:	e1a00009 	mov	r0, r9
   14cb4:	ebfff6e5 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14cb8:	e3500004 	cmp	r0, #4
   14cbc:	1a00012e 	bne	1517c <CUSBStandardHub::EnumeratePorts()+0x630>
   14cc0:	e5962000 	ldr	r2, [r6]
   14cc4:	e5d23000 	ldrb	r3, [r2]
   14cc8:	e5d22001 	ldrb	r2, [r2, #1]
   14ccc:	e1833402 	orr	r3, r3, r2, lsl #8
   14cd0:	e3130002 	tst	r3, #2
   14cd4:	0a0000e0 	beq	1505c <CUSBStandardHub::EnumeratePorts()+0x510>
   14cd8:	e3130008 	tst	r3, #8
   14cdc:	1a000128 	bne	15184 <CUSBStandardHub::EnumeratePorts()+0x638>
   14ce0:	e3130c02 	tst	r3, #512	; 0x200
   14ce4:	13a0b000 	movne	fp, #0
   14ce8:	0a0000ac 	beq	14fa0 <CUSBStandardHub::EnumeratePorts()+0x454>
   14cec:	e5953000 	ldr	r3, [r5]
   14cf0:	e3530000 	cmp	r3, #0
   14cf4:	1a0000e7 	bne	15098 <CUSBStandardHub::EnumeratePorts()+0x54c>
   14cf8:	e3a00058 	mov	r0, #88	; 0x58
   14cfc:	eb0058e0 	bl	2b084 <operator new(unsigned int)>
   14d00:	e1a0a000 	mov	sl, r0
   14d04:	e1a0200b 	mov	r2, fp
   14d08:	e1a03007 	mov	r3, r7
   14d0c:	e1a01009 	mov	r1, r9
   14d10:	e58d8000 	str	r8, [sp]
   14d14:	ebffe451 	bl	de60 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   14d18:	e585a000 	str	sl, [r5]
   14d1c:	e1a0000a 	mov	r0, sl
   14d20:	ebffe5d3 	bl	e474 <CUSBDevice::Initialize()>
   14d24:	e3500000 	cmp	r0, #0
   14d28:	1affff9f 	bne	14bac <CUSBStandardHub::EnumeratePorts()+0x60>
   14d2c:	e5950000 	ldr	r0, [r5]
   14d30:	e3500000 	cmp	r0, #0
   14d34:	0a000002 	beq	14d44 <CUSBStandardHub::EnumeratePorts()+0x1f8>
   14d38:	e5903000 	ldr	r3, [r0]
   14d3c:	e5933004 	ldr	r3, [r3, #4]
   14d40:	e12fff33 	blx	r3
   14d44:	e3a03000 	mov	r3, #0
   14d48:	e5853000 	str	r3, [r5]
   14d4c:	eaffff96 	b	14bac <CUSBStandardHub::EnumeratePorts()+0x60>
   14d50:	e3a00004 	mov	r0, #4
   14d54:	eb0058ca 	bl	2b084 <operator new(unsigned int)>
   14d58:	e1a03000 	mov	r3, r0
   14d5c:	e5860000 	str	r0, [r6]
   14d60:	eaffff9e 	b	14be0 <CUSBStandardHub::EnumeratePorts()+0x94>
   14d64:	e1a04006 	mov	r4, r6
   14d68:	e1a05006 	mov	r5, r6
   14d6c:	e58d6018 	str	r6, [sp, #24]
   14d70:	e3a0b008 	mov	fp, #8
   14d74:	e3a0a003 	mov	sl, #3
   14d78:	e3a08023 	mov	r8, #35	; 0x23
   14d7c:	e59d6014 	ldr	r6, [sp, #20]
   14d80:	ea000002 	b	14d90 <CUSBStandardHub::EnumeratePorts()+0x244>
   14d84:	e5973018 	ldr	r3, [r7, #24]
   14d88:	e1530004 	cmp	r3, r4
   14d8c:	9a000093 	bls	14fe0 <CUSBStandardHub::EnumeratePorts()+0x494>
   14d90:	e2844001 	add	r4, r4, #1
   14d94:	e6ff3074 	uxth	r3, r4
   14d98:	e58d3004 	str	r3, [sp, #4]
   14d9c:	e58d500c 	str	r5, [sp, #12]
   14da0:	e58d5008 	str	r5, [sp, #8]
   14da4:	e58db000 	str	fp, [sp]
   14da8:	e1a0300a 	mov	r3, sl
   14dac:	e1a02008 	mov	r2, r8
   14db0:	e1a01006 	mov	r1, r6
   14db4:	e1a00009 	mov	r0, r9
   14db8:	ebfff6a4 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14dbc:	e3500000 	cmp	r0, #0
   14dc0:	aaffffef 	bge	14d84 <CUSBStandardHub::EnumeratePorts()+0x238>
   14dc4:	e59d6018 	ldr	r6, [sp, #24]
   14dc8:	eb004783 	bl	26bdc <CLogger::Get()>
   14dcc:	e58d4000 	str	r4, [sp]
   14dd0:	e59f3408 	ldr	r3, [pc, #1032]	; 151e0 <CUSBStandardHub::EnumeratePorts()+0x694>
   14dd4:	e3a02001 	mov	r2, #1
   14dd8:	e59f13fc 	ldr	r1, [pc, #1020]	; 151dc <CUSBStandardHub::EnumeratePorts()+0x690>
   14ddc:	eb0046bb 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14de0:	e1a00006 	mov	r0, r6
   14de4:	e28dd024 	add	sp, sp, #36	; 0x24
   14de8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dec:	e3530000 	cmp	r3, #0
   14df0:	0a00002a 	beq	14ea0 <CUSBStandardHub::EnumeratePorts()+0x354>
   14df4:	e3a04001 	mov	r4, #1
   14df8:	e58d901c 	str	r9, [sp, #28]
   14dfc:	e3a0a004 	mov	sl, #4
   14e00:	e1a06004 	mov	r6, r4
   14e04:	e3a0b002 	mov	fp, #2
   14e08:	e59f83cc 	ldr	r8, [pc, #972]	; 151dc <CUSBStandardHub::EnumeratePorts()+0x690>
   14e0c:	e2875060 	add	r5, r7, #96	; 0x60
   14e10:	e59d9018 	ldr	r9, [sp, #24]
   14e14:	ea000004 	b	14e2c <CUSBStandardHub::EnumeratePorts()+0x2e0>
   14e18:	e1530004 	cmp	r3, r4
   14e1c:	e2899004 	add	r9, r9, #4
   14e20:	e2844001 	add	r4, r4, #1
   14e24:	e2855001 	add	r5, r5, #1
   14e28:	9a00001b 	bls	14e9c <CUSBStandardHub::EnumeratePorts()+0x350>
   14e2c:	e5990000 	ldr	r0, [r9]
   14e30:	e3500000 	cmp	r0, #0
   14e34:	0afffff7 	beq	14e18 <CUSBStandardHub::EnumeratePorts()+0x2cc>
   14e38:	e5d52000 	ldrb	r2, [r5]
   14e3c:	e3520000 	cmp	r2, #0
   14e40:	1afffff4 	bne	14e18 <CUSBStandardHub::EnumeratePorts()+0x2cc>
   14e44:	e5903000 	ldr	r3, [r0]
   14e48:	e5c56000 	strb	r6, [r5]
   14e4c:	e593300c 	ldr	r3, [r3, #12]
   14e50:	e12fff33 	blx	r3
   14e54:	e3500000 	cmp	r0, #0
   14e58:	1a000048 	bne	14f80 <CUSBStandardHub::EnumeratePorts()+0x434>
   14e5c:	eb00475e 	bl	26bdc <CLogger::Get()>
   14e60:	e58d4000 	str	r4, [sp]
   14e64:	e59f3378 	ldr	r3, [pc, #888]	; 151e4 <CUSBStandardHub::EnumeratePorts()+0x698>
   14e68:	e1a0200b 	mov	r2, fp
   14e6c:	e1a01008 	mov	r1, r8
   14e70:	eb004696 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14e74:	e5990000 	ldr	r0, [r9]
   14e78:	e3500000 	cmp	r0, #0
   14e7c:	0a000002 	beq	14e8c <CUSBStandardHub::EnumeratePorts()+0x340>
   14e80:	e5903000 	ldr	r3, [r0]
   14e84:	e5933004 	ldr	r3, [r3, #4]
   14e88:	e12fff33 	blx	r3
   14e8c:	e3a03000 	mov	r3, #0
   14e90:	e5893000 	str	r3, [r9]
   14e94:	e5973018 	ldr	r3, [r7, #24]
   14e98:	eaffffde 	b	14e18 <CUSBStandardHub::EnumeratePorts()+0x2cc>
   14e9c:	e59d901c 	ldr	r9, [sp, #28]
   14ea0:	e3a00004 	mov	r0, #4
   14ea4:	eb005876 	bl	2b084 <operator new(unsigned int)>
   14ea8:	e3a06000 	mov	r6, #0
   14eac:	e3a04004 	mov	r4, #4
   14eb0:	e58d0008 	str	r0, [sp, #8]
   14eb4:	e1a0b000 	mov	fp, r0
   14eb8:	e58d400c 	str	r4, [sp, #12]
   14ebc:	e58d6004 	str	r6, [sp, #4]
   14ec0:	e58d6000 	str	r6, [sp]
   14ec4:	e1a03006 	mov	r3, r6
   14ec8:	e3a020a0 	mov	r2, #160	; 0xa0
   14ecc:	e59d1014 	ldr	r1, [sp, #20]
   14ed0:	e1a00009 	mov	r0, r9
   14ed4:	ebfff65d 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14ed8:	e1500004 	cmp	r0, r4
   14edc:	e1a05000 	mov	r5, r0
   14ee0:	1a000035 	bne	14fbc <CUSBStandardHub::EnumeratePorts()+0x470>
   14ee4:	e5db3000 	ldrb	r3, [fp]
   14ee8:	e2138002 	ands	r8, r3, #2
   14eec:	0a00006d 	beq	150a8 <CUSBStandardHub::EnumeratePorts()+0x55c>
   14ef0:	e5973018 	ldr	r3, [r7, #24]
   14ef4:	e3530000 	cmp	r3, #0
   14ef8:	0a000016 	beq	14f58 <CUSBStandardHub::EnumeratePorts()+0x40c>
   14efc:	e3a04001 	mov	r4, #1
   14f00:	e58db018 	str	fp, [sp, #24]
   14f04:	e1a0a004 	mov	sl, r4
   14f08:	e3a08008 	mov	r8, #8
   14f0c:	e3a05023 	mov	r5, #35	; 0x23
   14f10:	e59db014 	ldr	fp, [sp, #20]
   14f14:	ea000000 	b	14f1c <CUSBStandardHub::EnumeratePorts()+0x3d0>
   14f18:	e1a04002 	mov	r4, r2
   14f1c:	e6ff3074 	uxth	r3, r4
   14f20:	e58d3004 	str	r3, [sp, #4]
   14f24:	e1a02005 	mov	r2, r5
   14f28:	e1a0300a 	mov	r3, sl
   14f2c:	e58d600c 	str	r6, [sp, #12]
   14f30:	e58d6008 	str	r6, [sp, #8]
   14f34:	e58d8000 	str	r8, [sp]
   14f38:	e1a0100b 	mov	r1, fp
   14f3c:	e1a00009 	mov	r0, r9
   14f40:	ebfff642 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14f44:	e5973018 	ldr	r3, [r7, #24]
   14f48:	e2842001 	add	r2, r4, #1
   14f4c:	e1540003 	cmp	r4, r3
   14f50:	3afffff0 	bcc	14f18 <CUSBStandardHub::EnumeratePorts()+0x3cc>
   14f54:	e59db018 	ldr	fp, [sp, #24]
   14f58:	eb00471f 	bl	26bdc <CLogger::Get()>
   14f5c:	e59f3284 	ldr	r3, [pc, #644]	; 151e8 <CUSBStandardHub::EnumeratePorts()+0x69c>
   14f60:	e3a02001 	mov	r2, #1
   14f64:	e59f1270 	ldr	r1, [pc, #624]	; 151dc <CUSBStandardHub::EnumeratePorts()+0x690>
   14f68:	eb004658 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14f6c:	e1a0000b 	mov	r0, fp
   14f70:	e3a01004 	mov	r1, #4
   14f74:	eb005850 	bl	2b0bc <operator delete(void*, unsigned int)>
   14f78:	e3a06000 	mov	r6, #0
   14f7c:	eaffff97 	b	14de0 <CUSBStandardHub::EnumeratePorts()+0x294>
   14f80:	eb004715 	bl	26bdc <CLogger::Get()>
   14f84:	e59f3260 	ldr	r3, [pc, #608]	; 151ec <CUSBStandardHub::EnumeratePorts()+0x6a0>
   14f88:	e58d4000 	str	r4, [sp]
   14f8c:	e1a0200a 	mov	r2, sl
   14f90:	e1a01008 	mov	r1, r8
   14f94:	eb00464d 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14f98:	e5973018 	ldr	r3, [r7, #24]
   14f9c:	eaffff9d 	b	14e18 <CUSBStandardHub::EnumeratePorts()+0x2cc>
   14fa0:	e3130b01 	tst	r3, #1024	; 0x400
   14fa4:	e5953000 	ldr	r3, [r5]
   14fa8:	03a0b001 	moveq	fp, #1
   14fac:	13a0b002 	movne	fp, #2
   14fb0:	e3530000 	cmp	r3, #0
   14fb4:	0affff4f 	beq	14cf8 <CUSBStandardHub::EnumeratePorts()+0x1ac>
   14fb8:	ea000036 	b	15098 <CUSBStandardHub::EnumeratePorts()+0x54c>
   14fbc:	eb004706 	bl	26bdc <CLogger::Get()>
   14fc0:	e59f3228 	ldr	r3, [pc, #552]	; 151f0 <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14fc4:	e3a02001 	mov	r2, #1
   14fc8:	e59f120c 	ldr	r1, [pc, #524]	; 151dc <CUSBStandardHub::EnumeratePorts()+0x690>
   14fcc:	eb00463f 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14fd0:	e1a01004 	mov	r1, r4
   14fd4:	e1a0000b 	mov	r0, fp
   14fd8:	eb005837 	bl	2b0bc <operator delete(void*, unsigned int)>
   14fdc:	eaffff7f 	b	14de0 <CUSBStandardHub::EnumeratePorts()+0x294>
   14fe0:	e3a03001 	mov	r3, #1
   14fe4:	e5c7301c 	strb	r3, [r7, #28]
   14fe8:	eb0044ba 	bl	262d8 <CKernelOptions::Get()>
   14fec:	e3500000 	cmp	r0, #0
   14ff0:	0a000002 	beq	15000 <CUSBStandardHub::EnumeratePorts()+0x4b4>
   14ff4:	eb0044aa 	bl	262a4 <CKernelOptions::GetUSBPowerDelay() const>
   14ff8:	e2504000 	subs	r4, r0, #0
   14ffc:	1a000000 	bne	15004 <CUSBStandardHub::EnumeratePorts()+0x4b8>
   15000:	e59f41ec 	ldr	r4, [pc, #492]	; 151f4 <CUSBStandardHub::EnumeratePorts()+0x6a8>
   15004:	eb0053c1 	bl	29f10 <CTimer::Get()>
   15008:	e1a00004 	mov	r0, r4
   1500c:	eb005386 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
   15010:	e5973018 	ldr	r3, [r7, #24]
   15014:	e3530000 	cmp	r3, #0
   15018:	1afffedc 	bne	14b90 <CUSBStandardHub::EnumeratePorts()+0x44>
   1501c:	eaffff9f 	b	14ea0 <CUSBStandardHub::EnumeratePorts()+0x354>
   15020:	e59f21d0 	ldr	r2, [pc, #464]	; 151f8 <CUSBStandardHub::EnumeratePorts()+0x6ac>
   15024:	e59f11d0 	ldr	r1, [pc, #464]	; 151fc <CUSBStandardHub::EnumeratePorts()+0x6b0>
   15028:	e59f01d0 	ldr	r0, [pc, #464]	; 15200 <CUSBStandardHub::EnumeratePorts()+0x6b4>
   1502c:	eb003df7 	bl	24810 <assertion_failed>
   15030:	eb0046e9 	bl	26bdc <CLogger::Get()>
   15034:	e58d4000 	str	r4, [sp]
   15038:	e59f31c4 	ldr	r3, [pc, #452]	; 15204 <CUSBStandardHub::EnumeratePorts()+0x6b8>
   1503c:	e3a02001 	mov	r2, #1
   15040:	e59f1194 	ldr	r1, [pc, #404]	; 151dc <CUSBStandardHub::EnumeratePorts()+0x690>
   15044:	eb004621 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15048:	eafffed7 	b	14bac <CUSBStandardHub::EnumeratePorts()+0x60>
   1504c:	e3a020e3 	mov	r2, #227	; 0xe3
   15050:	e59f11a4 	ldr	r1, [pc, #420]	; 151fc <CUSBStandardHub::EnumeratePorts()+0x6b0>
   15054:	e59f01ac 	ldr	r0, [pc, #428]	; 15208 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   15058:	eb003dec 	bl	24810 <assertion_failed>
   1505c:	eb0046de 	bl	26bdc <CLogger::Get()>
   15060:	e58d4000 	str	r4, [sp]
   15064:	e59f31a0 	ldr	r3, [pc, #416]	; 1520c <CUSBStandardHub::EnumeratePorts()+0x6c0>
   15068:	e3a02001 	mov	r2, #1
   1506c:	e59f1168 	ldr	r1, [pc, #360]	; 151dc <CUSBStandardHub::EnumeratePorts()+0x690>
   15070:	eb004616 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15074:	eafffecc 	b	14bac <CUSBStandardHub::EnumeratePorts()+0x60>
   15078:	e3a020e6 	mov	r2, #230	; 0xe6
   1507c:	e59f1178 	ldr	r1, [pc, #376]	; 151fc <CUSBStandardHub::EnumeratePorts()+0x6b0>
   15080:	e59f0188 	ldr	r0, [pc, #392]	; 15210 <CUSBStandardHub::EnumeratePorts()+0x6c4>
   15084:	eb003de1 	bl	24810 <assertion_failed>
   15088:	e3a020e8 	mov	r2, #232	; 0xe8
   1508c:	e59f1168 	ldr	r1, [pc, #360]	; 151fc <CUSBStandardHub::EnumeratePorts()+0x6b0>
   15090:	e59f017c 	ldr	r0, [pc, #380]	; 15214 <CUSBStandardHub::EnumeratePorts()+0x6c8>
   15094:	eb003ddd 	bl	24810 <assertion_failed>
   15098:	e59f2178 	ldr	r2, [pc, #376]	; 15218 <CUSBStandardHub::EnumeratePorts()+0x6cc>
   1509c:	e59f1158 	ldr	r1, [pc, #344]	; 151fc <CUSBStandardHub::EnumeratePorts()+0x6b0>
   150a0:	e59f0174 	ldr	r0, [pc, #372]	; 1521c <CUSBStandardHub::EnumeratePorts()+0x6d0>
   150a4:	eb003dd9 	bl	24810 <assertion_failed>
   150a8:	e1a0000b 	mov	r0, fp
   150ac:	e1a01005 	mov	r1, r5
   150b0:	eb005801 	bl	2b0bc <operator delete(void*, unsigned int)>
   150b4:	e5973018 	ldr	r3, [r7, #24]
   150b8:	e3530000 	cmp	r3, #0
   150bc:	0a000043 	beq	151d0 <CUSBStandardHub::EnumeratePorts()+0x684>
   150c0:	e3a04001 	mov	r4, #1
   150c4:	e1a0b005 	mov	fp, r5
   150c8:	e59da014 	ldr	sl, [sp, #20]
   150cc:	e2875040 	add	r5, r7, #64	; 0x40
   150d0:	e58d4014 	str	r4, [sp, #20]
   150d4:	ea000004 	b	150ec <CUSBStandardHub::EnumeratePorts()+0x5a0>
   150d8:	e5973018 	ldr	r3, [r7, #24]
   150dc:	e2855004 	add	r5, r5, #4
   150e0:	e1540003 	cmp	r4, r3
   150e4:	e2844001 	add	r4, r4, #1
   150e8:	2a000021 	bcs	15174 <CUSBStandardHub::EnumeratePorts()+0x628>
   150ec:	e5953000 	ldr	r3, [r5]
   150f0:	e6ff6074 	uxth	r6, r4
   150f4:	e58d3008 	str	r3, [sp, #8]
   150f8:	e58db00c 	str	fp, [sp, #12]
   150fc:	e58d8000 	str	r8, [sp]
   15100:	e58d6004 	str	r6, [sp, #4]
   15104:	e3a03000 	mov	r3, #0
   15108:	e3a020a3 	mov	r2, #163	; 0xa3
   1510c:	e1a0100a 	mov	r1, sl
   15110:	e1a00009 	mov	r0, r9
   15114:	ebfff5cd 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15118:	e3500004 	cmp	r0, #4
   1511c:	1affffed 	bne	150d8 <CUSBStandardHub::EnumeratePorts()+0x58c>
   15120:	e5953000 	ldr	r3, [r5]
   15124:	e5d33000 	ldrb	r3, [r3]
   15128:	e3130008 	tst	r3, #8
   1512c:	0affffe9 	beq	150d8 <CUSBStandardHub::EnumeratePorts()+0x58c>
   15130:	e3a03008 	mov	r3, #8
   15134:	e3a02023 	mov	r2, #35	; 0x23
   15138:	e1a0100a 	mov	r1, sl
   1513c:	e58d3000 	str	r3, [sp]
   15140:	e58d800c 	str	r8, [sp, #12]
   15144:	e3a03001 	mov	r3, #1
   15148:	e98d0140 	stmib	sp, {r6, r8}
   1514c:	e1a00009 	mov	r0, r9
   15150:	ebfff5be 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15154:	eb0046a0 	bl	26bdc <CLogger::Get()>
   15158:	e58d4000 	str	r4, [sp]
   1515c:	e59f30bc 	ldr	r3, [pc, #188]	; 15220 <CUSBStandardHub::EnumeratePorts()+0x6d4>
   15160:	e3a02001 	mov	r2, #1
   15164:	e59f1070 	ldr	r1, [pc, #112]	; 151dc <CUSBStandardHub::EnumeratePorts()+0x690>
   15168:	eb0045d8 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1516c:	e58d8014 	str	r8, [sp, #20]
   15170:	eaffffd8 	b	150d8 <CUSBStandardHub::EnumeratePorts()+0x58c>
   15174:	e59d6014 	ldr	r6, [sp, #20]
   15178:	eaffff18 	b	14de0 <CUSBStandardHub::EnumeratePorts()+0x294>
   1517c:	e3a06000 	mov	r6, #0
   15180:	eaffff16 	b	14de0 <CUSBStandardHub::EnumeratePorts()+0x294>
   15184:	e3a02000 	mov	r2, #0
   15188:	e3a03008 	mov	r3, #8
   1518c:	e59d1014 	ldr	r1, [sp, #20]
   15190:	e58d200c 	str	r2, [sp, #12]
   15194:	e58d2008 	str	r2, [sp, #8]
   15198:	e58d3000 	str	r3, [sp]
   1519c:	e3a02023 	mov	r2, #35	; 0x23
   151a0:	e3a03001 	mov	r3, #1
   151a4:	e58da004 	str	sl, [sp, #4]
   151a8:	e1a00009 	mov	r0, r9
   151ac:	ebfff5a7 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   151b0:	eb004689 	bl	26bdc <CLogger::Get()>
   151b4:	e58d4000 	str	r4, [sp]
   151b8:	e59f3060 	ldr	r3, [pc, #96]	; 15220 <CUSBStandardHub::EnumeratePorts()+0x6d4>
   151bc:	e3a02001 	mov	r2, #1
   151c0:	e59f1014 	ldr	r1, [pc, #20]	; 151dc <CUSBStandardHub::EnumeratePorts()+0x690>
   151c4:	eb0045c1 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   151c8:	e3a06000 	mov	r6, #0
   151cc:	eaffff03 	b	14de0 <CUSBStandardHub::EnumeratePorts()+0x294>
   151d0:	e3a06001 	mov	r6, #1
   151d4:	eaffff01 	b	14de0 <CUSBStandardHub::EnumeratePorts()+0x294>
   151d8:	0004123c 	.word	0x0004123c
   151dc:	00041178 	.word	0x00041178
   151e0:	00041224 	.word	0x00041224
   151e4:	000412fc 	.word	0x000412fc
   151e8:	00041354 	.word	0x00041354
   151ec:	00041320 	.word	0x00041320
   151f0:	0004133c 	.word	0x0004133c
   151f4:	000001fe 	.word	0x000001fe
   151f8:	00000125 	.word	0x00000125
   151fc:	00041180 	.word	0x00041180
   15200:	0004125c 	.word	0x0004125c
   15204:	00041290 	.word	0x00041290
   15208:	00040c6c 	.word	0x00040c6c
   1520c:	000412a8 	.word	0x000412a8
   15210:	00041204 	.word	0x00041204
   15214:	00041214 	.word	0x00041214
   15218:	00000162 	.word	0x00000162
   1521c:	000412e4 	.word	0x000412e4
   15220:	000412c0 	.word	0x000412c0

00015224 <CUSBStandardHub::ReScanDevices()>:
   15224:	eafffe48 	b	14b4c <CUSBStandardHub::EnumeratePorts()>

00015228 <CUSBStandardHub::Configure()>:
   15228:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1522c:	e24dd010 	sub	sp, sp, #16
   15230:	e1a04000 	mov	r4, r0
   15234:	ebffe991 	bl	f880 <CUSBFunction::GetNumEndpoints() const>
   15238:	e3500001 	cmp	r0, #1
   1523c:	0a000006 	beq	1525c <CUSBStandardHub::Configure()+0x34>
   15240:	e1a00004 	mov	r0, r4
   15244:	e59f1110 	ldr	r1, [pc, #272]	; 1535c <CUSBStandardHub::Configure()+0x134>
   15248:	ebffe9c4 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   1524c:	e3a06000 	mov	r6, #0
   15250:	e1a00006 	mov	r0, r6
   15254:	e28dd010 	add	sp, sp, #16
   15258:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1525c:	e1a05000 	mov	r5, r0
   15260:	e3a01005 	mov	r1, #5
   15264:	e1a00004 	mov	r0, r4
   15268:	ebffe9b1 	bl	f934 <CUSBFunction::GetDescriptor(unsigned char)>
   1526c:	e2506000 	subs	r6, r0, #0
   15270:	0afffff2 	beq	15240 <CUSBStandardHub::Configure()+0x18>
   15274:	e1d630d2 	ldrsb	r3, [r6, #2]
   15278:	e3530000 	cmp	r3, #0
   1527c:	aaffffef 	bge	15240 <CUSBStandardHub::Configure()+0x18>
   15280:	e5d63003 	ldrb	r3, [r6, #3]
   15284:	e203303f 	and	r3, r3, #63	; 0x3f
   15288:	e3530003 	cmp	r3, #3
   1528c:	1affffeb 	bne	15240 <CUSBStandardHub::Configure()+0x18>
   15290:	e1a00004 	mov	r0, r4
   15294:	ebffe985 	bl	f8b0 <CUSBFunction::GetDevice() const>
   15298:	e1a08000 	mov	r8, r0
   1529c:	e3a00014 	mov	r0, #20
   152a0:	eb005777 	bl	2b084 <operator new(unsigned int)>
   152a4:	e1a07000 	mov	r7, r0
   152a8:	e1a02006 	mov	r2, r6
   152ac:	e1a01008 	mov	r1, r8
   152b0:	ebffe7bb 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   152b4:	e5847014 	str	r7, [r4, #20]
   152b8:	e1a00004 	mov	r0, r4
   152bc:	ebffe8b7 	bl	f5a0 <CUSBFunction::Configure()>
   152c0:	e2506000 	subs	r6, r0, #0
   152c4:	0a000018 	beq	1532c <CUSBStandardHub::Configure()+0x104>
   152c8:	e1a0000d 	mov	r0, sp
   152cc:	eb004a28 	bl	27b74 <CString::CString()>
   152d0:	e59f3088 	ldr	r3, [pc, #136]	; 15360 <CUSBStandardHub::Configure()+0x138>
   152d4:	e59f1088 	ldr	r1, [pc, #136]	; 15364 <CUSBStandardHub::Configure()+0x13c>
   152d8:	e5932000 	ldr	r2, [r3]
   152dc:	e1a0000d 	mov	r0, sp
   152e0:	e282c001 	add	ip, r2, #1
   152e4:	e583c000 	str	ip, [r3]
   152e8:	eb004f64 	bl	29080 <CString::Format(char const*, ...)>
   152ec:	eb004021 	bl	25378 <CDeviceNameService::Get()>
   152f0:	e1a06000 	mov	r6, r0
   152f4:	e1a0000d 	mov	r0, sp
   152f8:	eb004a33 	bl	27bcc <CString::operator char const*() const>
   152fc:	e3a03000 	mov	r3, #0
   15300:	e1a01000 	mov	r1, r0
   15304:	e1a02004 	mov	r2, r4
   15308:	e1a00006 	mov	r0, r6
   1530c:	eb003f5f 	bl	25090 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   15310:	e1a00004 	mov	r0, r4
   15314:	ebfffe0c 	bl	14b4c <CUSBStandardHub::EnumeratePorts()>
   15318:	e2506000 	subs	r6, r0, #0
   1531c:	0a000008 	beq	15344 <CUSBStandardHub::Configure()+0x11c>
   15320:	e1a0000d 	mov	r0, sp
   15324:	eb0049df 	bl	27aa8 <CString::~CString()>
   15328:	eaffffc8 	b	15250 <CUSBStandardHub::Configure()+0x28>
   1532c:	eb00462a 	bl	26bdc <CLogger::Get()>
   15330:	e1a02005 	mov	r2, r5
   15334:	e59f302c 	ldr	r3, [pc, #44]	; 15368 <CUSBStandardHub::Configure()+0x140>
   15338:	e59f101c 	ldr	r1, [pc, #28]	; 1535c <CUSBStandardHub::Configure()+0x134>
   1533c:	eb004563 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15340:	eaffffc2 	b	15250 <CUSBStandardHub::Configure()+0x28>
   15344:	eb004624 	bl	26bdc <CLogger::Get()>
   15348:	e1a02005 	mov	r2, r5
   1534c:	e59f3018 	ldr	r3, [pc, #24]	; 1536c <CUSBStandardHub::Configure()+0x144>
   15350:	e59f1004 	ldr	r1, [pc, #4]	; 1535c <CUSBStandardHub::Configure()+0x134>
   15354:	eb00455d 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15358:	eafffff0 	b	15320 <CUSBStandardHub::Configure()+0xf8>
   1535c:	00041178 	.word	0x00041178
   15360:	00047fb0 	.word	0x00047fb0
   15364:	00041370 	.word	0x00041370
   15368:	000403d4 	.word	0x000403d4
   1536c:	00041378 	.word	0x00041378

00015370 <CLAN7800Device::GetMACAddress() const>:
   15370:	e280001c 	add	r0, r0, #28
   15374:	e12fff1e 	bx	lr

00015378 <non-virtual thunk to CLAN7800Device::GetMACAddress() const>:
   15378:	e2400010 	sub	r0, r0, #16
   1537c:	eafffffb 	b	15370 <CLAN7800Device::GetMACAddress() const>

00015380 <CLAN7800Device::~CLAN7800Device()>:
   15380:	e92d4070 	push	{r4, r5, r6, lr}
   15384:	e59f3074 	ldr	r3, [pc, #116]	; 15400 <CLAN7800Device::~CLAN7800Device()+0x80>
   15388:	e5905018 	ldr	r5, [r0, #24]
   1538c:	e2832040 	add	r2, r3, #64	; 0x40
   15390:	e3550000 	cmp	r5, #0
   15394:	e1a04000 	mov	r4, r0
   15398:	e5803000 	str	r3, [r0]
   1539c:	e5802010 	str	r2, [r0, #16]
   153a0:	0a000004 	beq	153b8 <CLAN7800Device::~CLAN7800Device()+0x38>
   153a4:	e1a00005 	mov	r0, r5
   153a8:	ebffe7e7 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   153ac:	e1a00005 	mov	r0, r5
   153b0:	e3a01014 	mov	r1, #20
   153b4:	eb005740 	bl	2b0bc <operator delete(void*, unsigned int)>
   153b8:	e3a03000 	mov	r3, #0
   153bc:	e5945014 	ldr	r5, [r4, #20]
   153c0:	e5843018 	str	r3, [r4, #24]
   153c4:	e1550003 	cmp	r5, r3
   153c8:	0a000004 	beq	153e0 <CLAN7800Device::~CLAN7800Device()+0x60>
   153cc:	e1a00005 	mov	r0, r5
   153d0:	ebffe7dd 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   153d4:	e1a00005 	mov	r0, r5
   153d8:	e3a01014 	mov	r1, #20
   153dc:	eb005736 	bl	2b0bc <operator delete(void*, unsigned int)>
   153e0:	e3a03000 	mov	r3, #0
   153e4:	e284001c 	add	r0, r4, #28
   153e8:	e5843014 	str	r3, [r4, #20]
   153ec:	eb00563f 	bl	2acf0 <CMACAddress::~CMACAddress()>
   153f0:	e1a00004 	mov	r0, r4
   153f4:	ebffe840 	bl	f4fc <CUSBFunction::~CUSBFunction()>
   153f8:	e1a00004 	mov	r0, r4
   153fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   15400:	00041398 	.word	0x00041398

00015404 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   15404:	e2400010 	sub	r0, r0, #16
   15408:	eaffffdc 	b	15380 <CLAN7800Device::~CLAN7800Device()>

0001540c <CLAN7800Device::~CLAN7800Device()>:
   1540c:	e92d4010 	push	{r4, lr}
   15410:	e1a04000 	mov	r4, r0
   15414:	ebffffd9 	bl	15380 <CLAN7800Device::~CLAN7800Device()>
   15418:	e1a00004 	mov	r0, r4
   1541c:	e3a01024 	mov	r1, #36	; 0x24
   15420:	eb005725 	bl	2b0bc <operator delete(void*, unsigned int)>
   15424:	e1a00004 	mov	r0, r4
   15428:	e8bd8010 	pop	{r4, pc}

0001542c <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   1542c:	e2400010 	sub	r0, r0, #16
   15430:	eafffff5 	b	1540c <CLAN7800Device::~CLAN7800Device()>

00015434 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   15434:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15438:	e5903014 	ldr	r3, [r0, #20]
   1543c:	e24dd030 	sub	sp, sp, #48	; 0x30
   15440:	e3530000 	cmp	r3, #0
   15444:	0a000034 	beq	1551c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe8>
   15448:	e3510000 	cmp	r1, #0
   1544c:	e1a04001 	mov	r4, r1
   15450:	0a000035 	beq	1552c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xf8>
   15454:	e3a06000 	mov	r6, #0
   15458:	e1a05000 	mov	r5, r0
   1545c:	e1a01003 	mov	r1, r3
   15460:	e1a08002 	mov	r8, r2
   15464:	e3a03d19 	mov	r3, #1600	; 0x640
   15468:	e1a02004 	mov	r2, r4
   1546c:	e58d6000 	str	r6, [sp]
   15470:	e28d0008 	add	r0, sp, #8
   15474:	ebfffbf5 	bl	14450 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15478:	e1a00005 	mov	r0, r5
   1547c:	ebffe921 	bl	f908 <CUSBFunction::GetHost() const>
   15480:	e5903000 	ldr	r3, [r0]
   15484:	e1a02006 	mov	r2, r6
   15488:	e5933008 	ldr	r3, [r3, #8]
   1548c:	e28d1008 	add	r1, sp, #8
   15490:	e12fff33 	blx	r3
   15494:	e2505000 	subs	r5, r0, #0
   15498:	0a000019 	beq	15504 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd0>
   1549c:	e28d0008 	add	r0, sp, #8
   154a0:	ebfffc1d 	bl	1451c <CUSBRequest::GetResultLength() const>
   154a4:	e3500009 	cmp	r0, #9
   154a8:	9a000015 	bls	15504 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd0>
   154ac:	e5947000 	ldr	r7, [r4]
   154b0:	e3170501 	tst	r7, #4194304	; 0x400000
   154b4:	1a000020 	bne	1553c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x108>
   154b8:	e1a03907 	lsl	r3, r7, #18
   154bc:	e1a03923 	lsr	r3, r3, #18
   154c0:	e240200a 	sub	r2, r0, #10
   154c4:	e1530002 	cmp	r3, r2
   154c8:	1a000027 	bne	1556c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x138>
   154cc:	e3530004 	cmp	r3, #4
   154d0:	9a000021 	bls	1555c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x128>
   154d4:	e240600e 	sub	r6, r0, #14
   154d8:	e1a02006 	mov	r2, r6
   154dc:	e284100a 	add	r1, r4, #10
   154e0:	e1a00004 	mov	r0, r4
   154e4:	eb00550d 	bl	2a920 <memcpy>
   154e8:	e3580000 	cmp	r8, #0
   154ec:	15886000 	strne	r6, [r8]
   154f0:	1a000004 	bne	15508 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd4>
   154f4:	e59f2080 	ldr	r2, [pc, #128]	; 1557c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   154f8:	e59f1080 	ldr	r1, [pc, #128]	; 15580 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   154fc:	e59f0080 	ldr	r0, [pc, #128]	; 15584 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x150>
   15500:	eb003cc2 	bl	24810 <assertion_failed>
   15504:	e3a05000 	mov	r5, #0
   15508:	e28d0008 	add	r0, sp, #8
   1550c:	ebfffbf0 	bl	144d4 <CUSBRequest::~CUSBRequest()>
   15510:	e1a00005 	mov	r0, r5
   15514:	e28dd030 	add	sp, sp, #48	; 0x30
   15518:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1551c:	e59f2064 	ldr	r2, [pc, #100]	; 15588 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x154>
   15520:	e59f1058 	ldr	r1, [pc, #88]	; 15580 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15524:	e59f0060 	ldr	r0, [pc, #96]	; 1558c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x158>
   15528:	eb003cb8 	bl	24810 <assertion_failed>
   1552c:	e3a02d07 	mov	r2, #448	; 0x1c0
   15530:	e59f1048 	ldr	r1, [pc, #72]	; 15580 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15534:	e59f0054 	ldr	r0, [pc, #84]	; 15590 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x15c>
   15538:	eb003cb4 	bl	24810 <assertion_failed>
   1553c:	eb0045a6 	bl	26bdc <CLogger::Get()>
   15540:	e58d7000 	str	r7, [sp]
   15544:	e59f3048 	ldr	r3, [pc, #72]	; 15594 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   15548:	e3a02002 	mov	r2, #2
   1554c:	e59f1044 	ldr	r1, [pc, #68]	; 15598 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x164>
   15550:	e1a05006 	mov	r5, r6
   15554:	eb0044dd 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15558:	eaffffea 	b	15508 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd4>
   1555c:	e3a02f76 	mov	r2, #472	; 0x1d8
   15560:	e59f1018 	ldr	r1, [pc, #24]	; 15580 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15564:	e59f0030 	ldr	r0, [pc, #48]	; 1559c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x168>
   15568:	eb003ca8 	bl	24810 <assertion_failed>
   1556c:	e59f202c 	ldr	r2, [pc, #44]	; 155a0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x16c>
   15570:	e59f1008 	ldr	r1, [pc, #8]	; 15580 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15574:	e59f0028 	ldr	r0, [pc, #40]	; 155a4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x170>
   15578:	eb003ca4 	bl	24810 <assertion_failed>
   1557c:	000001e3 	.word	0x000001e3
   15580:	00041408 	.word	0x00041408
   15584:	00041488 	.word	0x00041488
   15588:	000001bf 	.word	0x000001bf
   1558c:	00041414 	.word	0x00041414
   15590:	00040c5c 	.word	0x00040c5c
   15594:	0004142c 	.word	0x0004142c
   15598:	00041400 	.word	0x00041400
   1559c:	00041474 	.word	0x00041474
   155a0:	000001d7 	.word	0x000001d7
   155a4:	00041444 	.word	0x00041444

000155a8 <non-virtual thunk to CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   155a8:	e2400010 	sub	r0, r0, #16
   155ac:	eaffffa0 	b	15434 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>

000155b0 <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   155b0:	e3520d19 	cmp	r2, #1600	; 0x640
   155b4:	8a00001d 	bhi	15630 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x80>
   155b8:	e92d4070 	push	{r4, r5, r6, lr}
   155bc:	e3510000 	cmp	r1, #0
   155c0:	e24dde65 	sub	sp, sp, #1616	; 0x650
   155c4:	e24dd008 	sub	sp, sp, #8
   155c8:	e1a05000 	mov	r5, r0
   155cc:	0a00001d 	beq	15648 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x98>
   155d0:	e1a04002 	mov	r4, r2
   155d4:	e3a06000 	mov	r6, #0
   155d8:	e28d0018 	add	r0, sp, #24
   155dc:	e2403008 	sub	r3, r0, #8
   155e0:	e58d300c 	str	r3, [sp, #12]
   155e4:	eb0054cd 	bl	2a920 <memcpy>
   155e8:	e5952018 	ldr	r2, [r5, #24]
   155ec:	e3843501 	orr	r3, r4, #4194304	; 0x400000
   155f0:	e1520006 	cmp	r2, r6
   155f4:	e58d6014 	str	r6, [sp, #20]
   155f8:	e58d3010 	str	r3, [sp, #16]
   155fc:	0a00000d 	beq	15638 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x88>
   15600:	e1a00005 	mov	r0, r5
   15604:	ebffe8bf 	bl	f908 <CUSBFunction::GetHost() const>
   15608:	e5951018 	ldr	r1, [r5, #24]
   1560c:	e2843008 	add	r3, r4, #8
   15610:	e58d6000 	str	r6, [sp]
   15614:	e59d200c 	ldr	r2, [sp, #12]
   15618:	ebfff4f2 	bl	129e8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1561c:	e1e00000 	mvn	r0, r0
   15620:	e1a00fa0 	lsr	r0, r0, #31
   15624:	e28dde65 	add	sp, sp, #1616	; 0x650
   15628:	e28dd008 	add	sp, sp, #8
   1562c:	e8bd8070 	pop	{r4, r5, r6, pc}
   15630:	e3a00000 	mov	r0, #0
   15634:	e12fff1e 	bx	lr
   15638:	e59f2018 	ldr	r2, [pc, #24]	; 15658 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xa8>
   1563c:	e59f1018 	ldr	r1, [pc, #24]	; 1565c <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   15640:	e59f0018 	ldr	r0, [pc, #24]	; 15660 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb0>
   15644:	eb003c71 	bl	24810 <assertion_failed>
   15648:	e59f2014 	ldr	r2, [pc, #20]	; 15664 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb4>
   1564c:	e59f1008 	ldr	r1, [pc, #8]	; 1565c <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   15650:	e59f0010 	ldr	r0, [pc, #16]	; 15668 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb8>
   15654:	eb003c6d 	bl	24810 <assertion_failed>
   15658:	000001b9 	.word	0x000001b9
   1565c:	00041408 	.word	0x00041408
   15660:	0004149c 	.word	0x0004149c
   15664:	000001b2 	.word	0x000001b2
   15668:	00040c5c 	.word	0x00040c5c

0001566c <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)>:
   1566c:	e2400010 	sub	r0, r0, #16
   15670:	eaffffce 	b	155b0 <CLAN7800Device::SendFrame(void const*, unsigned int)>

00015674 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   15674:	e92d4010 	push	{r4, lr}
   15678:	e1a04000 	mov	r4, r0
   1567c:	ebffe82f 	bl	f740 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15680:	e3a02000 	mov	r2, #0
   15684:	e59f3024 	ldr	r3, [pc, #36]	; 156b0 <CLAN7800Device::CLAN7800Device(CUSBFunction*)+0x3c>
   15688:	e5842014 	str	r2, [r4, #20]
   1568c:	e2831008 	add	r1, r3, #8
   15690:	e2833048 	add	r3, r3, #72	; 0x48
   15694:	e5841000 	str	r1, [r4]
   15698:	e5843010 	str	r3, [r4, #16]
   1569c:	e5842018 	str	r2, [r4, #24]
   156a0:	e284001c 	add	r0, r4, #28
   156a4:	eb00558e 	bl	2ace4 <CMACAddress::CMACAddress()>
   156a8:	e1a00004 	mov	r0, r4
   156ac:	e8bd8010 	pop	{r4, pc}
   156b0:	00041390 	.word	0x00041390

000156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   156b4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   156b8:	e24dd01c 	sub	sp, sp, #28
   156bc:	e28d5018 	add	r5, sp, #24
   156c0:	e1a06001 	mov	r6, r1
   156c4:	e5252004 	str	r2, [r5, #-4]!
   156c8:	e1a04000 	mov	r4, r0
   156cc:	ebffe88d 	bl	f908 <CUSBFunction::GetHost() const>
   156d0:	e1a07000 	mov	r7, r0
   156d4:	e1a00004 	mov	r0, r4
   156d8:	ebffe87f 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
   156dc:	e3a04000 	mov	r4, #0
   156e0:	e3a03004 	mov	r3, #4
   156e4:	e6ff2076 	uxth	r2, r6
   156e8:	e1a01000 	mov	r1, r0
   156ec:	e58d2004 	str	r2, [sp, #4]
   156f0:	e58d300c 	str	r3, [sp, #12]
   156f4:	e58d5008 	str	r5, [sp, #8]
   156f8:	e1a00007 	mov	r0, r7
   156fc:	e58d4000 	str	r4, [sp]
   15700:	e3a030a0 	mov	r3, #160	; 0xa0
   15704:	e3a02040 	mov	r2, #64	; 0x40
   15708:	ebfff450 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1570c:	e1500004 	cmp	r0, r4
   15710:	a3a00001 	movge	r0, #1
   15714:	ba000001 	blt	15720 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   15718:	e28dd01c 	add	sp, sp, #28
   1571c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15720:	eb00452d 	bl	26bdc <CLogger::Get()>
   15724:	e58d6000 	str	r6, [sp]
   15728:	e59f3014 	ldr	r3, [pc, #20]	; 15744 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x90>
   1572c:	e3a02002 	mov	r2, #2
   15730:	e59f1010 	ldr	r1, [pc, #16]	; 15748 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   15734:	eb004465 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15738:	e1a00004 	mov	r0, r4
   1573c:	e28dd01c 	add	sp, sp, #28
   15740:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15744:	000414b4 	.word	0x000414b4
   15748:	00041400 	.word	0x00041400

0001574c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   1574c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15750:	e24dd014 	sub	sp, sp, #20
   15754:	e1a05001 	mov	r5, r1
   15758:	e1a07002 	mov	r7, r2
   1575c:	e1a04000 	mov	r4, r0
   15760:	ebffe868 	bl	f908 <CUSBFunction::GetHost() const>
   15764:	e1a06000 	mov	r6, r0
   15768:	e1a00004 	mov	r0, r4
   1576c:	ebffe85a 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
   15770:	e3a04000 	mov	r4, #0
   15774:	e3a03004 	mov	r3, #4
   15778:	e6ffc075 	uxth	ip, r5
   1577c:	e1a01000 	mov	r1, r0
   15780:	e58d300c 	str	r3, [sp, #12]
   15784:	e58d7008 	str	r7, [sp, #8]
   15788:	e58dc004 	str	ip, [sp, #4]
   1578c:	e1a00006 	mov	r0, r6
   15790:	e58d4000 	str	r4, [sp]
   15794:	e3a030a1 	mov	r3, #161	; 0xa1
   15798:	e3a020c0 	mov	r2, #192	; 0xc0
   1579c:	ebfff42b 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   157a0:	e3500004 	cmp	r0, #4
   157a4:	03a00001 	moveq	r0, #1
   157a8:	0a000006 	beq	157c8 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x7c>
   157ac:	eb00450a 	bl	26bdc <CLogger::Get()>
   157b0:	e58d5000 	str	r5, [sp]
   157b4:	e59f3014 	ldr	r3, [pc, #20]	; 157d0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x84>
   157b8:	e3a02002 	mov	r2, #2
   157bc:	e59f1010 	ldr	r1, [pc, #16]	; 157d4 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x88>
   157c0:	eb004442 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   157c4:	e1a00004 	mov	r0, r4
   157c8:	e28dd014 	add	sp, sp, #20
   157cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   157d0:	000414d0 	.word	0x000414d0
   157d4:	00041400 	.word	0x00041400

000157d8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   157d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157dc:	e24dd00c 	sub	sp, sp, #12
   157e0:	e1a08000 	mov	r8, r0
   157e4:	e1a09001 	mov	r9, r1
   157e8:	e1a0a002 	mov	sl, r2
   157ec:	e1a0b003 	mov	fp, r3
   157f0:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   157f4:	e59d6034 	ldr	r6, [sp, #52]	; 0x34
   157f8:	eb0051c4 	bl	29f10 <CTimer::Get()>
   157fc:	e2505000 	subs	r5, r0, #0
   15800:	0a000019 	beq	1586c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x94>
   15804:	eb004f0b 	bl	29438 <CTimer::GetTicks() const>
   15808:	e1a07000 	mov	r7, r0
   1580c:	ea00000e 	b	1584c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   15810:	e1a00005 	mov	r0, r5
   15814:	eb004f07 	bl	29438 <CTimer::GetTicks() const>
   15818:	e0400007 	sub	r0, r0, r7
   1581c:	e1500006 	cmp	r0, r6
   15820:	2a00000e 	bcs	15860 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   15824:	e28d2004 	add	r2, sp, #4
   15828:	e1a01009 	mov	r1, r9
   1582c:	e1a00008 	mov	r0, r8
   15830:	ebffffc5 	bl	1574c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15834:	e3500000 	cmp	r0, #0
   15838:	0a000008 	beq	15860 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   1583c:	e59d3004 	ldr	r3, [sp, #4]
   15840:	e003300a 	and	r3, r3, sl
   15844:	e153000b 	cmp	r3, fp
   15848:	0a000005 	beq	15864 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   1584c:	e3540000 	cmp	r4, #0
   15850:	0affffee 	beq	15810 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   15854:	e1a00004 	mov	r0, r4
   15858:	eb00517a 	bl	29e48 <CTimer::SimpleusDelay(unsigned int)>
   1585c:	eaffffeb 	b	15810 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   15860:	e3a00000 	mov	r0, #0
   15864:	e28dd00c 	add	sp, sp, #12
   15868:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1586c:	e59f2008 	ldr	r2, [pc, #8]	; 1587c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa4>
   15870:	e59f1008 	ldr	r1, [pc, #8]	; 15880 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa8>
   15874:	e59f0008 	ldr	r0, [pc, #8]	; 15884 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   15878:	eb003be4 	bl	24810 <assertion_failed>
   1587c:	0000028e 	.word	0x0000028e
   15880:	00041408 	.word	0x00041408
   15884:	000414ec 	.word	0x000414ec

00015888 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   15888:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1588c:	e351001f 	cmp	r1, #31
   15890:	e24dd008 	sub	sp, sp, #8
   15894:	ca000025 	bgt	15930 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xa8>
   15898:	e3a05000 	mov	r5, #0
   1589c:	e3a06064 	mov	r6, #100	; 0x64
   158a0:	e1a04001 	mov	r4, r1
   158a4:	e1a08002 	mov	r8, r2
   158a8:	e88d0060 	stm	sp, {r5, r6}
   158ac:	e1a03005 	mov	r3, r5
   158b0:	e3a02001 	mov	r2, #1
   158b4:	e3a01e12 	mov	r1, #288	; 0x120
   158b8:	e1a07000 	mov	r7, r0
   158bc:	ebffffc5 	bl	157d8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   158c0:	e1500005 	cmp	r0, r5
   158c4:	1a000002 	bne	158d4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x4c>
   158c8:	e3a00000 	mov	r0, #0
   158cc:	e28dd008 	add	sp, sp, #8
   158d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   158d4:	e1a02008 	mov	r2, r8
   158d8:	e3a01f49 	mov	r1, #292	; 0x124
   158dc:	e1a00007 	mov	r0, r7
   158e0:	ebffff73 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   158e4:	e3500000 	cmp	r0, #0
   158e8:	0afffff6 	beq	158c8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   158ec:	e1a02304 	lsl	r2, r4, #6
   158f0:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   158f4:	e3822b02 	orr	r2, r2, #2048	; 0x800
   158f8:	e3822003 	orr	r2, r2, #3
   158fc:	e3a01e12 	mov	r1, #288	; 0x120
   15900:	e1a00007 	mov	r0, r7
   15904:	ebffff6a 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15908:	e3500000 	cmp	r0, #0
   1590c:	0affffed 	beq	158c8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   15910:	e88d0060 	stm	sp, {r5, r6}
   15914:	e1a03005 	mov	r3, r5
   15918:	e1a00007 	mov	r0, r7
   1591c:	e3a02001 	mov	r2, #1
   15920:	e3a01e12 	mov	r1, #288	; 0x120
   15924:	ebffffab 	bl	157d8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15928:	e28dd008 	add	sp, sp, #8
   1592c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15930:	e59f2008 	ldr	r2, [pc, #8]	; 15940 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb8>
   15934:	e59f1008 	ldr	r1, [pc, #8]	; 15944 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xbc>
   15938:	e59f0008 	ldr	r0, [pc, #8]	; 15948 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xc0>
   1593c:	eb003bb3 	bl	24810 <assertion_failed>
   15940:	00000259 	.word	0x00000259
   15944:	00041408 	.word	0x00041408
   15948:	000414f8 	.word	0x000414f8

0001594c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   1594c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15950:	e351001f 	cmp	r1, #31
   15954:	e24dd010 	sub	sp, sp, #16
   15958:	ca00002f 	bgt	15a1c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd0>
   1595c:	e3a05000 	mov	r5, #0
   15960:	e3a06064 	mov	r6, #100	; 0x64
   15964:	e1a04001 	mov	r4, r1
   15968:	e1a08002 	mov	r8, r2
   1596c:	e88d0060 	stm	sp, {r5, r6}
   15970:	e1a03005 	mov	r3, r5
   15974:	e3a02001 	mov	r2, #1
   15978:	e3a01e12 	mov	r1, #288	; 0x120
   1597c:	e1a07000 	mov	r7, r0
   15980:	ebffff94 	bl	157d8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15984:	e3500000 	cmp	r0, #0
   15988:	1a000001 	bne	15994 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x48>
   1598c:	e28dd010 	add	sp, sp, #16
   15990:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15994:	e1a02304 	lsl	r2, r4, #6
   15998:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   1599c:	e3822b02 	orr	r2, r2, #2048	; 0x800
   159a0:	e3822001 	orr	r2, r2, #1
   159a4:	e3a01e12 	mov	r1, #288	; 0x120
   159a8:	e1a00007 	mov	r0, r7
   159ac:	ebffff40 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   159b0:	e1500005 	cmp	r0, r5
   159b4:	1a000002 	bne	159c4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x78>
   159b8:	e3a00000 	mov	r0, #0
   159bc:	e28dd010 	add	sp, sp, #16
   159c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   159c4:	e88d0060 	stm	sp, {r5, r6}
   159c8:	e1a03005 	mov	r3, r5
   159cc:	e3a02001 	mov	r2, #1
   159d0:	e3a01e12 	mov	r1, #288	; 0x120
   159d4:	e1a00007 	mov	r0, r7
   159d8:	ebffff7e 	bl	157d8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   159dc:	e3500000 	cmp	r0, #0
   159e0:	0afffff4 	beq	159b8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x6c>
   159e4:	e1a00007 	mov	r0, r7
   159e8:	e28d200c 	add	r2, sp, #12
   159ec:	e3a01f49 	mov	r1, #292	; 0x124
   159f0:	ebffff55 	bl	1574c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   159f4:	e3500000 	cmp	r0, #0
   159f8:	0affffee 	beq	159b8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x6c>
   159fc:	e3580000 	cmp	r8, #0
   15a00:	159d300c 	ldrne	r3, [sp, #12]
   15a04:	11c830b0 	strhne	r3, [r8]
   15a08:	1affffdf 	bne	1598c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x40>
   15a0c:	e3a02fa1 	mov	r2, #644	; 0x284
   15a10:	e59f1014 	ldr	r1, [pc, #20]	; 15a2c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe0>
   15a14:	e59f0014 	ldr	r0, [pc, #20]	; 15a30 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe4>
   15a18:	eb003b7c 	bl	24810 <assertion_failed>
   15a1c:	e3a02e27 	mov	r2, #624	; 0x270
   15a20:	e59f1004 	ldr	r1, [pc, #4]	; 15a2c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe0>
   15a24:	e59f0008 	ldr	r0, [pc, #8]	; 15a34 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe8>
   15a28:	eb003b78 	bl	24810 <assertion_failed>
   15a2c:	00041408 	.word	0x00041408
   15a30:	00041508 	.word	0x00041508
   15a34:	000414f8 	.word	0x000414f8

00015a38 <CLAN7800Device::IsLinkUp()>:
   15a38:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15a3c:	e24dd00c 	sub	sp, sp, #12
   15a40:	e28d2006 	add	r2, sp, #6
   15a44:	e3a01001 	mov	r1, #1
   15a48:	ebffffbf 	bl	1594c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15a4c:	e3500000 	cmp	r0, #0
   15a50:	11dd00b6 	ldrhne	r0, [sp, #6]
   15a54:	11a00120 	lsrne	r0, r0, #2
   15a58:	12000001 	andne	r0, r0, #1
   15a5c:	e28dd00c 	add	sp, sp, #12
   15a60:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015a64 <non-virtual thunk to CLAN7800Device::IsLinkUp()>:
   15a64:	e2400010 	sub	r0, r0, #16
   15a68:	eafffff2 	b	15a38 <CLAN7800Device::IsLinkUp()>

00015a6c <CLAN7800Device::GetLinkSpeed()>:
   15a6c:	e92d4010 	push	{r4, lr}
   15a70:	e3a02000 	mov	r2, #0
   15a74:	e24dd008 	sub	sp, sp, #8
   15a78:	e3a0101f 	mov	r1, #31
   15a7c:	e1a04000 	mov	r4, r0
   15a80:	ebffff80 	bl	15888 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15a84:	e3500000 	cmp	r0, #0
   15a88:	1a000002 	bne	15a98 <CLAN7800Device::GetLinkSpeed()+0x2c>
   15a8c:	e3a00006 	mov	r0, #6
   15a90:	e28dd008 	add	sp, sp, #8
   15a94:	e8bd8010 	pop	{r4, pc}
   15a98:	e1a00004 	mov	r0, r4
   15a9c:	e28d2006 	add	r2, sp, #6
   15aa0:	e3a0101c 	mov	r1, #28
   15aa4:	ebffffa8 	bl	1594c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15aa8:	e3500000 	cmp	r0, #0
   15aac:	0afffff6 	beq	15a8c <CLAN7800Device::GetLinkSpeed()+0x20>
   15ab0:	e1dd30b6 	ldrh	r3, [sp, #6]
   15ab4:	e3130901 	tst	r3, #16384	; 0x4000
   15ab8:	1a00000d 	bne	15af4 <CLAN7800Device::GetLinkSpeed()+0x88>
   15abc:	e3130902 	tst	r3, #32768	; 0x8000
   15ac0:	0afffff1 	beq	15a8c <CLAN7800Device::GetLinkSpeed()+0x20>
   15ac4:	e1a031c3 	asr	r3, r3, #3
   15ac8:	e2033007 	and	r3, r3, #7
   15acc:	e3530006 	cmp	r3, #6
   15ad0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   15ad4:	eaffffec 	b	15a8c <CLAN7800Device::GetLinkSpeed()+0x20>
   15ad8:	00015b04 	.word	0x00015b04
   15adc:	00015b0c 	.word	0x00015b0c
   15ae0:	00015b2c 	.word	0x00015b2c
   15ae4:	00015a8c 	.word	0x00015a8c
   15ae8:	00015b24 	.word	0x00015b24
   15aec:	00015b1c 	.word	0x00015b1c
   15af0:	00015b14 	.word	0x00015b14
   15af4:	e59f2038 	ldr	r2, [pc, #56]	; 15b34 <CLAN7800Device::GetLinkSpeed()+0xc8>
   15af8:	e59f1038 	ldr	r1, [pc, #56]	; 15b38 <CLAN7800Device::GetLinkSpeed()+0xcc>
   15afc:	e59f0038 	ldr	r0, [pc, #56]	; 15b3c <CLAN7800Device::GetLinkSpeed()+0xd0>
   15b00:	eb003b42 	bl	24810 <assertion_failed>
   15b04:	e3a00000 	mov	r0, #0
   15b08:	eaffffe0 	b	15a90 <CLAN7800Device::GetLinkSpeed()+0x24>
   15b0c:	e3a00002 	mov	r0, #2
   15b10:	eaffffde 	b	15a90 <CLAN7800Device::GetLinkSpeed()+0x24>
   15b14:	e3a00005 	mov	r0, #5
   15b18:	eaffffdc 	b	15a90 <CLAN7800Device::GetLinkSpeed()+0x24>
   15b1c:	e3a00003 	mov	r0, #3
   15b20:	eaffffda 	b	15a90 <CLAN7800Device::GetLinkSpeed()+0x24>
   15b24:	e3a00001 	mov	r0, #1
   15b28:	eaffffd8 	b	15a90 <CLAN7800Device::GetLinkSpeed()+0x24>
   15b2c:	e3a00004 	mov	r0, #4
   15b30:	eaffffd6 	b	15a90 <CLAN7800Device::GetLinkSpeed()+0x24>
   15b34:	00000203 	.word	0x00000203
   15b38:	00041408 	.word	0x00041408
   15b3c:	00041514 	.word	0x00041514

00015b40 <non-virtual thunk to CLAN7800Device::GetLinkSpeed()>:
   15b40:	e2400010 	sub	r0, r0, #16
   15b44:	eaffffc8 	b	15a6c <CLAN7800Device::GetLinkSpeed()>

00015b48 <CLAN7800Device::InitPHY()>:
   15b48:	e92d4010 	push	{r4, lr}
   15b4c:	e3a02000 	mov	r2, #0
   15b50:	e24dd008 	sub	sp, sp, #8
   15b54:	e3a0101f 	mov	r1, #31
   15b58:	e1a04000 	mov	r4, r0
   15b5c:	ebffff49 	bl	15888 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15b60:	e3500000 	cmp	r0, #0
   15b64:	1a000001 	bne	15b70 <CLAN7800Device::InitPHY()+0x28>
   15b68:	e28dd008 	add	sp, sp, #8
   15b6c:	e8bd8010 	pop	{r4, pc}
   15b70:	e28d2006 	add	r2, sp, #6
   15b74:	e3a0101d 	mov	r1, #29
   15b78:	e1a00004 	mov	r0, r4
   15b7c:	ebffff72 	bl	1594c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15b80:	e3500000 	cmp	r0, #0
   15b84:	0afffff7 	beq	15b68 <CLAN7800Device::InitPHY()+0x20>
   15b88:	e1dd30b6 	ldrh	r3, [sp, #6]
   15b8c:	e1a00004 	mov	r0, r4
   15b90:	e3c330ff 	bic	r3, r3, #255	; 0xff
   15b94:	e3833061 	orr	r3, r3, #97	; 0x61
   15b98:	e1a02003 	mov	r2, r3
   15b9c:	e3a0101d 	mov	r1, #29
   15ba0:	e1cd30b6 	strh	r3, [sp, #6]
   15ba4:	ebffff37 	bl	15888 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15ba8:	e28dd008 	add	sp, sp, #8
   15bac:	e8bd8010 	pop	{r4, pc}

00015bb0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   15bb0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15bb4:	e24dd00c 	sub	sp, sp, #12
   15bb8:	e1a06002 	mov	r6, r2
   15bbc:	e28d2004 	add	r2, sp, #4
   15bc0:	e1a04003 	mov	r4, r3
   15bc4:	e1a05000 	mov	r5, r0
   15bc8:	e1a07001 	mov	r7, r1
   15bcc:	ebfffede 	bl	1574c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15bd0:	e3500000 	cmp	r0, #0
   15bd4:	0a000007 	beq	15bf8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x48>
   15bd8:	e59d3004 	ldr	r3, [sp, #4]
   15bdc:	e1a01007 	mov	r1, r7
   15be0:	e0044003 	and	r4, r4, r3
   15be4:	e1844006 	orr	r4, r4, r6
   15be8:	e1a00005 	mov	r0, r5
   15bec:	e1a02004 	mov	r2, r4
   15bf0:	e58d4004 	str	r4, [sp, #4]
   15bf4:	ebfffeae 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15bf8:	e28dd00c 	add	sp, sp, #12
   15bfc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00015c00 <CLAN7800Device::InitMACAddress()>:
   15c00:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15c04:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   15c08:	e3a01000 	mov	r1, #0
   15c0c:	e1a04000 	mov	r4, r0
   15c10:	e28d000c 	add	r0, sp, #12
   15c14:	eb003b1e 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   15c18:	e3a03000 	mov	r3, #0
   15c1c:	e28d000c 	add	r0, sp, #12
   15c20:	e58d3000 	str	r3, [sp]
   15c24:	e28d2024 	add	r2, sp, #36	; 0x24
   15c28:	e3a03014 	mov	r3, #20
   15c2c:	e59f10e0 	ldr	r1, [pc, #224]	; 15d14 <CLAN7800Device::InitMACAddress()+0x114>
   15c30:	eb003b23 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   15c34:	e3500000 	cmp	r0, #0
   15c38:	1a000005 	bne	15c54 <CLAN7800Device::InitMACAddress()+0x54>
   15c3c:	e3a04000 	mov	r4, #0
   15c40:	e28d000c 	add	r0, sp, #12
   15c44:	eb003b19 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   15c48:	e1a00004 	mov	r0, r4
   15c4c:	e28dd03c 	add	sp, sp, #60	; 0x3c
   15c50:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15c54:	e284601c 	add	r6, r4, #28
   15c58:	e1a00006 	mov	r0, r6
   15c5c:	e28d1030 	add	r1, sp, #48	; 0x30
   15c60:	eb005440 	bl	2ad68 <CMACAddress::Set(unsigned char const*)>
   15c64:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   15c68:	e3a01f47 	mov	r1, #284	; 0x11c
   15c6c:	e1a02005 	mov	r2, r5
   15c70:	e1a00004 	mov	r0, r4
   15c74:	e1dd73b4 	ldrh	r7, [sp, #52]	; 0x34
   15c78:	ebfffe8d 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15c7c:	e3500000 	cmp	r0, #0
   15c80:	0affffed 	beq	15c3c <CLAN7800Device::InitMACAddress()+0x3c>
   15c84:	e1a02007 	mov	r2, r7
   15c88:	e3a01f46 	mov	r1, #280	; 0x118
   15c8c:	e1a00004 	mov	r0, r4
   15c90:	ebfffe87 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15c94:	e3500000 	cmp	r0, #0
   15c98:	0affffe7 	beq	15c3c <CLAN7800Device::InitMACAddress()+0x3c>
   15c9c:	e1a02005 	mov	r2, r5
   15ca0:	e59f1070 	ldr	r1, [pc, #112]	; 15d18 <CLAN7800Device::InitMACAddress()+0x118>
   15ca4:	e1a00004 	mov	r0, r4
   15ca8:	ebfffe81 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15cac:	e3500000 	cmp	r0, #0
   15cb0:	0affffe1 	beq	15c3c <CLAN7800Device::InitMACAddress()+0x3c>
   15cb4:	e1a00004 	mov	r0, r4
   15cb8:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   15cbc:	e3a01b01 	mov	r1, #1024	; 0x400
   15cc0:	ebfffe7b 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15cc4:	e2504000 	subs	r4, r0, #0
   15cc8:	0affffdb 	beq	15c3c <CLAN7800Device::InitMACAddress()+0x3c>
   15ccc:	e28d0014 	add	r0, sp, #20
   15cd0:	eb0047a7 	bl	27b74 <CString::CString()>
   15cd4:	e28d1014 	add	r1, sp, #20
   15cd8:	e1a00006 	mov	r0, r6
   15cdc:	eb00547a 	bl	2aecc <CMACAddress::Format(CString*) const>
   15ce0:	eb0043bd 	bl	26bdc <CLogger::Get()>
   15ce4:	e1a05000 	mov	r5, r0
   15ce8:	e28d0014 	add	r0, sp, #20
   15cec:	eb0047b6 	bl	27bcc <CString::operator char const*() const>
   15cf0:	e59f3024 	ldr	r3, [pc, #36]	; 15d1c <CLAN7800Device::InitMACAddress()+0x11c>
   15cf4:	e58d0000 	str	r0, [sp]
   15cf8:	e3a02004 	mov	r2, #4
   15cfc:	e1a00005 	mov	r0, r5
   15d00:	e59f1018 	ldr	r1, [pc, #24]	; 15d20 <CLAN7800Device::InitMACAddress()+0x120>
   15d04:	eb0042f1 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15d08:	e28d0014 	add	r0, sp, #20
   15d0c:	eb004765 	bl	27aa8 <CString::~CString()>
   15d10:	eaffffca 	b	15c40 <CLAN7800Device::InitMACAddress()+0x40>
   15d14:	00010003 	.word	0x00010003
   15d18:	00000404 	.word	0x00000404
   15d1c:	0004153c 	.word	0x0004153c
   15d20:	00041400 	.word	0x00041400

00015d24 <CLAN7800Device::Configure()>:
   15d24:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   15d28:	e24dd014 	sub	sp, sp, #20
   15d2c:	e1a05000 	mov	r5, r0
   15d30:	ebffe6d2 	bl	f880 <CUSBFunction::GetNumEndpoints() const>
   15d34:	e3500003 	cmp	r0, #3
   15d38:	03a06005 	moveq	r6, #5
   15d3c:	03a07014 	moveq	r7, #20
   15d40:	0a000004 	beq	15d58 <CLAN7800Device::Configure()+0x34>
   15d44:	ea000034 	b	15e1c <CLAN7800Device::Configure()+0xf8>
   15d48:	e5d43003 	ldrb	r3, [r4, #3]
   15d4c:	e203303f 	and	r3, r3, #63	; 0x3f
   15d50:	e3530002 	cmp	r3, #2
   15d54:	0a00001f 	beq	15dd8 <CLAN7800Device::Configure()+0xb4>
   15d58:	e1a01006 	mov	r1, r6
   15d5c:	e1a00005 	mov	r0, r5
   15d60:	ebffe6f3 	bl	f934 <CUSBFunction::GetDescriptor(unsigned char)>
   15d64:	e2504000 	subs	r4, r0, #0
   15d68:	1afffff6 	bne	15d48 <CLAN7800Device::Configure()+0x24>
   15d6c:	e5953014 	ldr	r3, [r5, #20]
   15d70:	e1a00005 	mov	r0, r5
   15d74:	e3530000 	cmp	r3, #0
   15d78:	0a00004f 	beq	15ebc <CLAN7800Device::Configure()+0x198>
   15d7c:	e5953018 	ldr	r3, [r5, #24]
   15d80:	e3530000 	cmp	r3, #0
   15d84:	0a00004c 	beq	15ebc <CLAN7800Device::Configure()+0x198>
   15d88:	ebffe604 	bl	f5a0 <CUSBFunction::Configure()>
   15d8c:	e2506000 	subs	r6, r0, #0
   15d90:	0a00004f 	beq	15ed4 <CLAN7800Device::Configure()+0x1b0>
   15d94:	e28d200c 	add	r2, sp, #12
   15d98:	e1a01004 	mov	r1, r4
   15d9c:	e1a00005 	mov	r0, r5
   15da0:	ebfffe69 	bl	1574c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15da4:	e3500000 	cmp	r0, #0
   15da8:	1a000030 	bne	15e70 <CLAN7800Device::Configure()+0x14c>
   15dac:	eb00438a 	bl	26bdc <CLogger::Get()>
   15db0:	e1dd20be 	ldrh	r2, [sp, #14]
   15db4:	e59f33c0 	ldr	r3, [pc, #960]	; 1617c <CLAN7800Device::Configure()+0x458>
   15db8:	e58d2000 	str	r2, [sp]
   15dbc:	e59f13bc 	ldr	r1, [pc, #956]	; 16180 <CLAN7800Device::Configure()+0x45c>
   15dc0:	e3a02001 	mov	r2, #1
   15dc4:	eb0042c1 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15dc8:	e3a06000 	mov	r6, #0
   15dcc:	e1a00006 	mov	r0, r6
   15dd0:	e28dd014 	add	sp, sp, #20
   15dd4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15dd8:	e1d430d2 	ldrsb	r3, [r4, #2]
   15ddc:	e3530000 	cmp	r3, #0
   15de0:	ba000014 	blt	15e38 <CLAN7800Device::Configure()+0x114>
   15de4:	e5953018 	ldr	r3, [r5, #24]
   15de8:	e1a00005 	mov	r0, r5
   15dec:	e3530000 	cmp	r3, #0
   15df0:	1a000031 	bne	15ebc <CLAN7800Device::Configure()+0x198>
   15df4:	ebffe6ad 	bl	f8b0 <CUSBFunction::GetDevice() const>
   15df8:	e1a09000 	mov	r9, r0
   15dfc:	e1a00007 	mov	r0, r7
   15e00:	eb00549f 	bl	2b084 <operator new(unsigned int)>
   15e04:	e1a08000 	mov	r8, r0
   15e08:	e1a02004 	mov	r2, r4
   15e0c:	e1a01009 	mov	r1, r9
   15e10:	ebffe4e3 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15e14:	e5858018 	str	r8, [r5, #24]
   15e18:	eaffffce 	b	15d58 <CLAN7800Device::Configure()+0x34>
   15e1c:	e3a06000 	mov	r6, #0
   15e20:	e1a00005 	mov	r0, r5
   15e24:	e59f1354 	ldr	r1, [pc, #852]	; 16180 <CLAN7800Device::Configure()+0x45c>
   15e28:	ebffe6cc 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   15e2c:	e1a00006 	mov	r0, r6
   15e30:	e28dd014 	add	sp, sp, #20
   15e34:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15e38:	e5953014 	ldr	r3, [r5, #20]
   15e3c:	e1a00005 	mov	r0, r5
   15e40:	e3530000 	cmp	r3, #0
   15e44:	1a00001c 	bne	15ebc <CLAN7800Device::Configure()+0x198>
   15e48:	ebffe698 	bl	f8b0 <CUSBFunction::GetDevice() const>
   15e4c:	e1a09000 	mov	r9, r0
   15e50:	e1a00007 	mov	r0, r7
   15e54:	eb00548a 	bl	2b084 <operator new(unsigned int)>
   15e58:	e1a08000 	mov	r8, r0
   15e5c:	e1a02004 	mov	r2, r4
   15e60:	e1a01009 	mov	r1, r9
   15e64:	ebffe4ce 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15e68:	e5858014 	str	r8, [r5, #20]
   15e6c:	eaffffb9 	b	15d58 <CLAN7800Device::Configure()+0x34>
   15e70:	e1dd30be 	ldrh	r3, [sp, #14]
   15e74:	e3530b1e 	cmp	r3, #30720	; 0x7800
   15e78:	1affffcb 	bne	15dac <CLAN7800Device::Configure()+0x88>
   15e7c:	e3e03000 	mvn	r3, #0
   15e80:	e3a02002 	mov	r2, #2
   15e84:	e3a01010 	mov	r1, #16
   15e88:	e1a00005 	mov	r0, r5
   15e8c:	ebffff47 	bl	15bb0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15e90:	e3500000 	cmp	r0, #0
   15e94:	1a000016 	bne	15ef4 <CLAN7800Device::Configure()+0x1d0>
   15e98:	e3a06000 	mov	r6, #0
   15e9c:	eb00434e 	bl	26bdc <CLogger::Get()>
   15ea0:	e59f32dc 	ldr	r3, [pc, #732]	; 16184 <CLAN7800Device::Configure()+0x460>
   15ea4:	e3a02001 	mov	r2, #1
   15ea8:	e59f12d0 	ldr	r1, [pc, #720]	; 16180 <CLAN7800Device::Configure()+0x45c>
   15eac:	eb004287 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15eb0:	e1a00006 	mov	r0, r6
   15eb4:	e28dd014 	add	sp, sp, #20
   15eb8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15ebc:	e3a06000 	mov	r6, #0
   15ec0:	e59f12b8 	ldr	r1, [pc, #696]	; 16180 <CLAN7800Device::Configure()+0x45c>
   15ec4:	ebffe6a5 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   15ec8:	e1a00006 	mov	r0, r6
   15ecc:	e28dd014 	add	sp, sp, #20
   15ed0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15ed4:	eb004340 	bl	26bdc <CLogger::Get()>
   15ed8:	e59f32a8 	ldr	r3, [pc, #680]	; 16188 <CLAN7800Device::Configure()+0x464>
   15edc:	e3a02001 	mov	r2, #1
   15ee0:	e59f1298 	ldr	r1, [pc, #664]	; 16180 <CLAN7800Device::Configure()+0x45c>
   15ee4:	eb004279 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15ee8:	e1a00006 	mov	r0, r6
   15eec:	e28dd014 	add	sp, sp, #20
   15ef0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15ef4:	e3a01064 	mov	r1, #100	; 0x64
   15ef8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   15efc:	e58d1004 	str	r1, [sp, #4]
   15f00:	e58d2000 	str	r2, [sp]
   15f04:	e1a03004 	mov	r3, r4
   15f08:	e3a02002 	mov	r2, #2
   15f0c:	e3a01010 	mov	r1, #16
   15f10:	e1a00005 	mov	r0, r5
   15f14:	ebfffe2f 	bl	157d8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15f18:	e3500000 	cmp	r0, #0
   15f1c:	0affffdd 	beq	15e98 <CLAN7800Device::Configure()+0x174>
   15f20:	e1a00005 	mov	r0, r5
   15f24:	ebffff35 	bl	15c00 <CLAN7800Device::InitMACAddress()>
   15f28:	e2506000 	subs	r6, r0, #0
   15f2c:	0a000052 	beq	1607c <CLAN7800Device::Configure()+0x358>
   15f30:	e3a02018 	mov	r2, #24
   15f34:	e3a01090 	mov	r1, #144	; 0x90
   15f38:	e1a00005 	mov	r0, r5
   15f3c:	ebfffddc 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15f40:	e3500000 	cmp	r0, #0
   15f44:	0affff9f 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   15f48:	e3a02b02 	mov	r2, #2048	; 0x800
   15f4c:	e3a01094 	mov	r1, #148	; 0x94
   15f50:	e1a00005 	mov	r0, r5
   15f54:	ebfffdd6 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15f58:	e3500000 	cmp	r0, #0
   15f5c:	0affff99 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   15f60:	e3e03010 	mvn	r3, #16
   15f64:	e3a02603 	mov	r2, #3145728	; 0x300000
   15f68:	e3a01010 	mov	r1, #16
   15f6c:	e1a00005 	mov	r0, r5
   15f70:	ebffff0e 	bl	15bb0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15f74:	e3500000 	cmp	r0, #0
   15f78:	0affff92 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   15f7c:	e3e03040 	mvn	r3, #64	; 0x40
   15f80:	e3a02020 	mov	r2, #32
   15f84:	e3a01080 	mov	r1, #128	; 0x80
   15f88:	e1a00005 	mov	r0, r5
   15f8c:	ebffff07 	bl	15bb0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15f90:	e3500000 	cmp	r0, #0
   15f94:	0affff8b 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   15f98:	e3a02017 	mov	r2, #23
   15f9c:	e3a010c8 	mov	r1, #200	; 0xc8
   15fa0:	e1a00005 	mov	r0, r5
   15fa4:	ebfffdc2 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15fa8:	e3500000 	cmp	r0, #0
   15fac:	0affff85 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   15fb0:	e3a02017 	mov	r2, #23
   15fb4:	e3a010cc 	mov	r1, #204	; 0xcc
   15fb8:	e1a00005 	mov	r0, r5
   15fbc:	ebfffdbc 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15fc0:	e3500000 	cmp	r0, #0
   15fc4:	0affff7f 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   15fc8:	e3a02000 	mov	r2, #0
   15fcc:	e3a01098 	mov	r1, #152	; 0x98
   15fd0:	e1a00005 	mov	r0, r5
   15fd4:	ebfffdb6 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15fd8:	e3500000 	cmp	r0, #0
   15fdc:	0affff79 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   15fe0:	e3e02000 	mvn	r2, #0
   15fe4:	e3a0100c 	mov	r1, #12
   15fe8:	e1a00005 	mov	r0, r5
   15fec:	ebfffdb0 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15ff0:	e3500000 	cmp	r0, #0
   15ff4:	0affff73 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   15ff8:	e3a02000 	mov	r2, #0
   15ffc:	e3a01f43 	mov	r1, #268	; 0x10c
   16000:	e1a00005 	mov	r0, r5
   16004:	ebfffdaa 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16008:	e3500000 	cmp	r0, #0
   1600c:	0affff6d 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   16010:	e3a02000 	mov	r2, #0
   16014:	e3a010d0 	mov	r1, #208	; 0xd0
   16018:	e1a00005 	mov	r0, r5
   1601c:	ebfffda4 	bl	156b4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16020:	e3500000 	cmp	r0, #0
   16024:	0affff67 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   16028:	e3e03000 	mvn	r3, #0
   1602c:	e59f2158 	ldr	r2, [pc, #344]	; 1618c <CLAN7800Device::Configure()+0x468>
   16030:	e3a010b0 	mov	r1, #176	; 0xb0
   16034:	e1a00005 	mov	r0, r5
   16038:	ebfffedc 	bl	15bb0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1603c:	e3500000 	cmp	r0, #0
   16040:	0affff60 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   16044:	e3e03000 	mvn	r3, #0
   16048:	e3a02010 	mov	r2, #16
   1604c:	e3a01014 	mov	r1, #20
   16050:	e1a00005 	mov	r0, r5
   16054:	ebfffed5 	bl	15bb0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16058:	e3500000 	cmp	r0, #0
   1605c:	1a00000c 	bne	16094 <CLAN7800Device::Configure()+0x370>
   16060:	eb0042dd 	bl	26bdc <CLogger::Get()>
   16064:	e59f3124 	ldr	r3, [pc, #292]	; 16190 <CLAN7800Device::Configure()+0x46c>
   16068:	e3a02001 	mov	r2, #1
   1606c:	e59f110c 	ldr	r1, [pc, #268]	; 16180 <CLAN7800Device::Configure()+0x45c>
   16070:	eb004216 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16074:	e3a06000 	mov	r6, #0
   16078:	eaffff53 	b	15dcc <CLAN7800Device::Configure()+0xa8>
   1607c:	eb0042d6 	bl	26bdc <CLogger::Get()>
   16080:	e59f310c 	ldr	r3, [pc, #268]	; 16194 <CLAN7800Device::Configure()+0x470>
   16084:	e3a02001 	mov	r2, #1
   16088:	e59f10f0 	ldr	r1, [pc, #240]	; 16180 <CLAN7800Device::Configure()+0x45c>
   1608c:	eb00420f 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16090:	eaffff4d 	b	15dcc <CLAN7800Device::Configure()+0xa8>
   16094:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   16098:	e3a03064 	mov	r3, #100	; 0x64
   1609c:	e3a01014 	mov	r1, #20
   160a0:	e88d000c 	stm	sp, {r2, r3}
   160a4:	e1a00005 	mov	r0, r5
   160a8:	e3a03080 	mov	r3, #128	; 0x80
   160ac:	e3a02090 	mov	r2, #144	; 0x90
   160b0:	ebfffdc8 	bl	157d8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   160b4:	e3500000 	cmp	r0, #0
   160b8:	0affffe8 	beq	16060 <CLAN7800Device::Configure()+0x33c>
   160bc:	e3e03000 	mvn	r3, #0
   160c0:	e3a02b06 	mov	r2, #6144	; 0x1800
   160c4:	e3a01c01 	mov	r1, #256	; 0x100
   160c8:	e1a00005 	mov	r0, r5
   160cc:	ebfffeb7 	bl	15bb0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   160d0:	e3500000 	cmp	r0, #0
   160d4:	0affff3b 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   160d8:	e3e03000 	mvn	r3, #0
   160dc:	e3a02001 	mov	r2, #1
   160e0:	e3a01f42 	mov	r1, #264	; 0x108
   160e4:	e1a00005 	mov	r0, r5
   160e8:	ebfffeb0 	bl	15bb0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   160ec:	e3500000 	cmp	r0, #0
   160f0:	0affff34 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   160f4:	e3e03000 	mvn	r3, #0
   160f8:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   160fc:	e3a010c4 	mov	r1, #196	; 0xc4
   16100:	e1a00005 	mov	r0, r5
   16104:	ebfffea9 	bl	15bb0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16108:	e3500000 	cmp	r0, #0
   1610c:	0affff2d 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   16110:	e59f3080 	ldr	r3, [pc, #128]	; 16198 <CLAN7800Device::Configure()+0x474>
   16114:	e59f2080 	ldr	r2, [pc, #128]	; 1619c <CLAN7800Device::Configure()+0x478>
   16118:	e3a01f41 	mov	r1, #260	; 0x104
   1611c:	e1a00005 	mov	r0, r5
   16120:	ebfffea2 	bl	15bb0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16124:	e3500000 	cmp	r0, #0
   16128:	0affff26 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   1612c:	e3e03000 	mvn	r3, #0
   16130:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   16134:	e3a010c0 	mov	r1, #192	; 0xc0
   16138:	e1a00005 	mov	r0, r5
   1613c:	ebfffe9b 	bl	15bb0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16140:	e3500000 	cmp	r0, #0
   16144:	0affff1f 	beq	15dc8 <CLAN7800Device::Configure()+0xa4>
   16148:	e1a00005 	mov	r0, r5
   1614c:	ebfffe7d 	bl	15b48 <CLAN7800Device::InitPHY()>
   16150:	e2506000 	subs	r6, r0, #0
   16154:	0a000002 	beq	16164 <CLAN7800Device::Configure()+0x440>
   16158:	e2850010 	add	r0, r5, #16
   1615c:	eb00537b 	bl	2af50 <CNetDevice::AddNetDevice()>
   16160:	eaffff19 	b	15dcc <CLAN7800Device::Configure()+0xa8>
   16164:	eb00429c 	bl	26bdc <CLogger::Get()>
   16168:	e59f3030 	ldr	r3, [pc, #48]	; 161a0 <CLAN7800Device::Configure()+0x47c>
   1616c:	e3a02001 	mov	r2, #1
   16170:	e59f1008 	ldr	r1, [pc, #8]	; 16180 <CLAN7800Device::Configure()+0x45c>
   16174:	eb0041d5 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16178:	eaffff13 	b	15dcc <CLAN7800Device::Configure()+0xa8>
   1617c:	00041588 	.word	0x00041588
   16180:	00041400 	.word	0x00041400
   16184:	00041550 	.word	0x00041550
   16188:	000403d4 	.word	0x000403d4
   1618c:	00000402 	.word	0x00000402
   16190:	000415a0 	.word	0x000415a0
   16194:	00041560 	.word	0x00041560
   16198:	c000ffff 	.word	0xc000ffff
   1619c:	05ee0001 	.word	0x05ee0001
   161a0:	00041578 	.word	0x00041578

000161a4 <CNetDevice::GetType()>:
   161a4:	e3a00000 	mov	r0, #0
   161a8:	e12fff1e 	bx	lr

000161ac <CNetDevice::IsSendFrameAdvisable()>:
   161ac:	e3a00001 	mov	r0, #1
   161b0:	e12fff1e 	bx	lr

000161b4 <CNetDevice::UpdatePHY()>:
   161b4:	e3a00000 	mov	r0, #0
   161b8:	e12fff1e 	bx	lr

000161bc <CSMSC951xDevice::GetMACAddress() const>:
   161bc:	e280001c 	add	r0, r0, #28
   161c0:	e12fff1e 	bx	lr

000161c4 <non-virtual thunk to CSMSC951xDevice::GetMACAddress() const>:
   161c4:	e2400010 	sub	r0, r0, #16
   161c8:	eafffffb 	b	161bc <CSMSC951xDevice::GetMACAddress() const>

000161cc <CSMSC951xDevice::~CSMSC951xDevice()>:
   161cc:	e92d4070 	push	{r4, r5, r6, lr}
   161d0:	e59f3074 	ldr	r3, [pc, #116]	; 1624c <CSMSC951xDevice::~CSMSC951xDevice()+0x80>
   161d4:	e5905018 	ldr	r5, [r0, #24]
   161d8:	e2832040 	add	r2, r3, #64	; 0x40
   161dc:	e3550000 	cmp	r5, #0
   161e0:	e1a04000 	mov	r4, r0
   161e4:	e5803000 	str	r3, [r0]
   161e8:	e5802010 	str	r2, [r0, #16]
   161ec:	0a000004 	beq	16204 <CSMSC951xDevice::~CSMSC951xDevice()+0x38>
   161f0:	e1a00005 	mov	r0, r5
   161f4:	ebffe454 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   161f8:	e1a00005 	mov	r0, r5
   161fc:	e3a01014 	mov	r1, #20
   16200:	eb0053ad 	bl	2b0bc <operator delete(void*, unsigned int)>
   16204:	e3a03000 	mov	r3, #0
   16208:	e5945014 	ldr	r5, [r4, #20]
   1620c:	e5843018 	str	r3, [r4, #24]
   16210:	e1550003 	cmp	r5, r3
   16214:	0a000004 	beq	1622c <CSMSC951xDevice::~CSMSC951xDevice()+0x60>
   16218:	e1a00005 	mov	r0, r5
   1621c:	ebffe44a 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   16220:	e1a00005 	mov	r0, r5
   16224:	e3a01014 	mov	r1, #20
   16228:	eb0053a3 	bl	2b0bc <operator delete(void*, unsigned int)>
   1622c:	e3a03000 	mov	r3, #0
   16230:	e284001c 	add	r0, r4, #28
   16234:	e5843014 	str	r3, [r4, #20]
   16238:	eb0052ac 	bl	2acf0 <CMACAddress::~CMACAddress()>
   1623c:	e1a00004 	mov	r0, r4
   16240:	ebffe4ad 	bl	f4fc <CUSBFunction::~CUSBFunction()>
   16244:	e1a00004 	mov	r0, r4
   16248:	e8bd8070 	pop	{r4, r5, r6, pc}
   1624c:	000415bc 	.word	0x000415bc

00016250 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   16250:	e2400010 	sub	r0, r0, #16
   16254:	eaffffdc 	b	161cc <CSMSC951xDevice::~CSMSC951xDevice()>

00016258 <CSMSC951xDevice::~CSMSC951xDevice()>:
   16258:	e92d4010 	push	{r4, lr}
   1625c:	e1a04000 	mov	r4, r0
   16260:	ebffffd9 	bl	161cc <CSMSC951xDevice::~CSMSC951xDevice()>
   16264:	e1a00004 	mov	r0, r4
   16268:	e3a01024 	mov	r1, #36	; 0x24
   1626c:	eb005392 	bl	2b0bc <operator delete(void*, unsigned int)>
   16270:	e1a00004 	mov	r0, r4
   16274:	e8bd8010 	pop	{r4, pc}

00016278 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   16278:	e2400010 	sub	r0, r0, #16
   1627c:	eafffff5 	b	16258 <CSMSC951xDevice::~CSMSC951xDevice()>

00016280 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   16280:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16284:	e5903014 	ldr	r3, [r0, #20]
   16288:	e24dd030 	sub	sp, sp, #48	; 0x30
   1628c:	e3530000 	cmp	r3, #0
   16290:	0a000036 	beq	16370 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf0>
   16294:	e3510000 	cmp	r1, #0
   16298:	e1a04001 	mov	r4, r1
   1629c:	0a000037 	beq	16380 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x100>
   162a0:	e3a06000 	mov	r6, #0
   162a4:	e1a05000 	mov	r5, r0
   162a8:	e1a01003 	mov	r1, r3
   162ac:	e1a07002 	mov	r7, r2
   162b0:	e3a03d19 	mov	r3, #1600	; 0x640
   162b4:	e1a02004 	mov	r2, r4
   162b8:	e58d6000 	str	r6, [sp]
   162bc:	e28d0008 	add	r0, sp, #8
   162c0:	ebfff862 	bl	14450 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   162c4:	e1a00005 	mov	r0, r5
   162c8:	ebffe58e 	bl	f908 <CUSBFunction::GetHost() const>
   162cc:	e5903000 	ldr	r3, [r0]
   162d0:	e1a02006 	mov	r2, r6
   162d4:	e5933008 	ldr	r3, [r3, #8]
   162d8:	e28d1008 	add	r1, sp, #8
   162dc:	e12fff33 	blx	r3
   162e0:	e2505000 	subs	r5, r0, #0
   162e4:	0a00001b 	beq	16358 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   162e8:	e28d0008 	add	r0, sp, #8
   162ec:	ebfff88a 	bl	1451c <CUSBRequest::GetResultLength() const>
   162f0:	e3500003 	cmp	r0, #3
   162f4:	9a000017 	bls	16358 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   162f8:	e5948000 	ldr	r8, [r4]
   162fc:	e59f30cc 	ldr	r3, [pc, #204]	; 163d0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x150>
   16300:	e0033008 	and	r3, r3, r8
   16304:	e3530000 	cmp	r3, #0
   16308:	1a000020 	bne	16390 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x110>
   1630c:	e59f20c0 	ldr	r2, [pc, #192]	; 163d4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x154>
   16310:	e2400004 	sub	r0, r0, #4
   16314:	e0022828 	and	r2, r2, r8, lsr #16
   16318:	e1520000 	cmp	r2, r0
   1631c:	1a000027 	bne	163c0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x140>
   16320:	e3520004 	cmp	r2, #4
   16324:	9a000021 	bls	163b0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x130>
   16328:	e2426004 	sub	r6, r2, #4
   1632c:	e1a02006 	mov	r2, r6
   16330:	e2841004 	add	r1, r4, #4
   16334:	e1a00004 	mov	r0, r4
   16338:	eb005178 	bl	2a920 <memcpy>
   1633c:	e3570000 	cmp	r7, #0
   16340:	15876000 	strne	r6, [r7]
   16344:	1a000004 	bne	1635c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   16348:	e59f2088 	ldr	r2, [pc, #136]	; 163d8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x158>
   1634c:	e59f1088 	ldr	r1, [pc, #136]	; 163dc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   16350:	e59f0088 	ldr	r0, [pc, #136]	; 163e0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x160>
   16354:	eb00392d 	bl	24810 <assertion_failed>
   16358:	e3a05000 	mov	r5, #0
   1635c:	e28d0008 	add	r0, sp, #8
   16360:	ebfff85b 	bl	144d4 <CUSBRequest::~CUSBRequest()>
   16364:	e1a00005 	mov	r0, r5
   16368:	e28dd030 	add	sp, sp, #48	; 0x30
   1636c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16370:	e59f206c 	ldr	r2, [pc, #108]	; 163e4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x164>
   16374:	e59f1060 	ldr	r1, [pc, #96]	; 163dc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   16378:	e59f0068 	ldr	r0, [pc, #104]	; 163e8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x168>
   1637c:	eb003923 	bl	24810 <assertion_failed>
   16380:	e3a02f45 	mov	r2, #276	; 0x114
   16384:	e59f1050 	ldr	r1, [pc, #80]	; 163dc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   16388:	e59f005c 	ldr	r0, [pc, #92]	; 163ec <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x16c>
   1638c:	eb00391f 	bl	24810 <assertion_failed>
   16390:	eb004211 	bl	26bdc <CLogger::Get()>
   16394:	e58d8000 	str	r8, [sp]
   16398:	e59f3050 	ldr	r3, [pc, #80]	; 163f0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   1639c:	e3a02002 	mov	r2, #2
   163a0:	e59f104c 	ldr	r1, [pc, #76]	; 163f4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   163a4:	e1a05006 	mov	r5, r6
   163a8:	eb004148 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   163ac:	eaffffea 	b	1635c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   163b0:	e3a02f4b 	mov	r2, #300	; 0x12c
   163b4:	e59f1020 	ldr	r1, [pc, #32]	; 163dc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   163b8:	e59f0038 	ldr	r0, [pc, #56]	; 163f8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x178>
   163bc:	eb003913 	bl	24810 <assertion_failed>
   163c0:	e59f2034 	ldr	r2, [pc, #52]	; 163fc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x17c>
   163c4:	e59f1010 	ldr	r1, [pc, #16]	; 163dc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   163c8:	e59f0030 	ldr	r0, [pc, #48]	; 16400 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x180>
   163cc:	eb00390f 	bl	24810 <assertion_failed>
   163d0:	400090de 	.word	0x400090de
   163d4:	00003fff 	.word	0x00003fff
   163d8:	00000137 	.word	0x00000137
   163dc:	00041638 	.word	0x00041638
   163e0:	00041488 	.word	0x00041488
   163e4:	00000113 	.word	0x00000113
   163e8:	00041414 	.word	0x00041414
   163ec:	00040c5c 	.word	0x00040c5c
   163f0:	0004142c 	.word	0x0004142c
   163f4:	00041624 	.word	0x00041624
   163f8:	00041474 	.word	0x00041474
   163fc:	0000012b 	.word	0x0000012b
   16400:	00041648 	.word	0x00041648

00016404 <non-virtual thunk to CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   16404:	e2400010 	sub	r0, r0, #16
   16408:	eaffff9c 	b	16280 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>

0001640c <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   1640c:	e3520d19 	cmp	r2, #1600	; 0x640
   16410:	8a00001d 	bhi	1648c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x80>
   16414:	e92d4030 	push	{r4, r5, lr}
   16418:	e3510000 	cmp	r1, #0
   1641c:	e24dde65 	sub	sp, sp, #1616	; 0x650
   16420:	e24dd00c 	sub	sp, sp, #12
   16424:	e1a05000 	mov	r5, r0
   16428:	0a00001d 	beq	164a4 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x98>
   1642c:	e1a04002 	mov	r4, r2
   16430:	e28d0018 	add	r0, sp, #24
   16434:	e2403008 	sub	r3, r0, #8
   16438:	e58d300c 	str	r3, [sp, #12]
   1643c:	eb005137 	bl	2a920 <memcpy>
   16440:	e5952018 	ldr	r2, [r5, #24]
   16444:	e3843a03 	orr	r3, r4, #12288	; 0x3000
   16448:	e3520000 	cmp	r2, #0
   1644c:	e58d4014 	str	r4, [sp, #20]
   16450:	e58d3010 	str	r3, [sp, #16]
   16454:	0a00000e 	beq	16494 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x88>
   16458:	e1a00005 	mov	r0, r5
   1645c:	ebffe529 	bl	f908 <CUSBFunction::GetHost() const>
   16460:	e3a0c000 	mov	ip, #0
   16464:	e5951018 	ldr	r1, [r5, #24]
   16468:	e2843008 	add	r3, r4, #8
   1646c:	e59d200c 	ldr	r2, [sp, #12]
   16470:	e58dc000 	str	ip, [sp]
   16474:	ebfff15b 	bl	129e8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   16478:	e1e00000 	mvn	r0, r0
   1647c:	e1a00fa0 	lsr	r0, r0, #31
   16480:	e28dde65 	add	sp, sp, #1616	; 0x650
   16484:	e28dd00c 	add	sp, sp, #12
   16488:	e8bd8030 	pop	{r4, r5, pc}
   1648c:	e3a00000 	mov	r0, #0
   16490:	e12fff1e 	bx	lr
   16494:	e59f2018 	ldr	r2, [pc, #24]	; 164b4 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xa8>
   16498:	e59f1018 	ldr	r1, [pc, #24]	; 164b8 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   1649c:	e59f0018 	ldr	r0, [pc, #24]	; 164bc <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb0>
   164a0:	eb0038da 	bl	24810 <assertion_failed>
   164a4:	e59f2014 	ldr	r2, [pc, #20]	; 164c0 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb4>
   164a8:	e59f1008 	ldr	r1, [pc, #8]	; 164b8 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   164ac:	e59f0010 	ldr	r0, [pc, #16]	; 164c4 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb8>
   164b0:	eb0038d6 	bl	24810 <assertion_failed>
   164b4:	0000010d 	.word	0x0000010d
   164b8:	00041638 	.word	0x00041638
   164bc:	0004149c 	.word	0x0004149c
   164c0:	00000106 	.word	0x00000106
   164c4:	00040c5c 	.word	0x00040c5c

000164c8 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   164c8:	e2400010 	sub	r0, r0, #16
   164cc:	eaffffce 	b	1640c <CSMSC951xDevice::SendFrame(void const*, unsigned int)>

000164d0 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   164d0:	e92d4010 	push	{r4, lr}
   164d4:	e1a04000 	mov	r4, r0
   164d8:	ebffe498 	bl	f740 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   164dc:	e3a02000 	mov	r2, #0
   164e0:	e59f3024 	ldr	r3, [pc, #36]	; 1650c <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)+0x3c>
   164e4:	e5842014 	str	r2, [r4, #20]
   164e8:	e2831008 	add	r1, r3, #8
   164ec:	e2833048 	add	r3, r3, #72	; 0x48
   164f0:	e5841000 	str	r1, [r4]
   164f4:	e5843010 	str	r3, [r4, #16]
   164f8:	e5842018 	str	r2, [r4, #24]
   164fc:	e284001c 	add	r0, r4, #28
   16500:	eb0051f7 	bl	2ace4 <CMACAddress::CMACAddress()>
   16504:	e1a00004 	mov	r0, r4
   16508:	e8bd8010 	pop	{r4, pc}
   1650c:	000415b4 	.word	0x000415b4

00016510 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   16510:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16514:	e24dd01c 	sub	sp, sp, #28
   16518:	e28d5018 	add	r5, sp, #24
   1651c:	e5252004 	str	r2, [r5, #-4]!
   16520:	e1a04001 	mov	r4, r1
   16524:	e1a07000 	mov	r7, r0
   16528:	ebffe4f6 	bl	f908 <CUSBFunction::GetHost() const>
   1652c:	e1a06000 	mov	r6, r0
   16530:	e1a00007 	mov	r0, r7
   16534:	ebffe4e8 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
   16538:	e3a02004 	mov	r2, #4
   1653c:	e3a03000 	mov	r3, #0
   16540:	e6ff4074 	uxth	r4, r4
   16544:	e1a01000 	mov	r1, r0
   16548:	e58d200c 	str	r2, [sp, #12]
   1654c:	e58d3000 	str	r3, [sp]
   16550:	e58d5008 	str	r5, [sp, #8]
   16554:	e58d4004 	str	r4, [sp, #4]
   16558:	e1a00006 	mov	r0, r6
   1655c:	e3a030a0 	mov	r3, #160	; 0xa0
   16560:	e3a02040 	mov	r2, #64	; 0x40
   16564:	ebfff0b9 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16568:	e1e00000 	mvn	r0, r0
   1656c:	e1a00fa0 	lsr	r0, r0, #31
   16570:	e28dd01c 	add	sp, sp, #28
   16574:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00016578 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   16578:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1657c:	e24dd014 	sub	sp, sp, #20
   16580:	e1a06002 	mov	r6, r2
   16584:	e1a04001 	mov	r4, r1
   16588:	e1a07000 	mov	r7, r0
   1658c:	ebffe4dd 	bl	f908 <CUSBFunction::GetHost() const>
   16590:	e1a05000 	mov	r5, r0
   16594:	e1a00007 	mov	r0, r7
   16598:	ebffe4cf 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
   1659c:	e3a0c004 	mov	ip, #4
   165a0:	e3a03000 	mov	r3, #0
   165a4:	e6ff4074 	uxth	r4, r4
   165a8:	e1a01000 	mov	r1, r0
   165ac:	e58d3000 	str	r3, [sp]
   165b0:	e58d6008 	str	r6, [sp, #8]
   165b4:	e58d4004 	str	r4, [sp, #4]
   165b8:	e1a00005 	mov	r0, r5
   165bc:	e58dc00c 	str	ip, [sp, #12]
   165c0:	e3a030a1 	mov	r3, #161	; 0xa1
   165c4:	e3a020c0 	mov	r2, #192	; 0xc0
   165c8:	ebfff0a0 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   165cc:	e2400004 	sub	r0, r0, #4
   165d0:	e16f0f10 	clz	r0, r0
   165d4:	e1a002a0 	lsr	r0, r0, #5
   165d8:	e28dd014 	add	sp, sp, #20
   165dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000165e0 <CSMSC951xDevice::PHYWaitNotBusy()>:
   165e0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   165e4:	e24dd00c 	sub	sp, sp, #12
   165e8:	e1a06000 	mov	r6, r0
   165ec:	eb004e47 	bl	29f10 <CTimer::Get()>
   165f0:	e2504000 	subs	r4, r0, #0
   165f4:	0a000014 	beq	1664c <CSMSC951xDevice::PHYWaitNotBusy()+0x6c>
   165f8:	eb004b8e 	bl	29438 <CTimer::GetTicks() const>
   165fc:	e3a07f45 	mov	r7, #276	; 0x114
   16600:	e1a05000 	mov	r5, r0
   16604:	ea000008 	b	1662c <CSMSC951xDevice::PHYWaitNotBusy()+0x4c>
   16608:	e28d2004 	add	r2, sp, #4
   1660c:	e1a01007 	mov	r1, r7
   16610:	e1a00006 	mov	r0, r6
   16614:	ebffffd7 	bl	16578 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   16618:	e3500000 	cmp	r0, #0
   1661c:	0a000007 	beq	16640 <CSMSC951xDevice::PHYWaitNotBusy()+0x60>
   16620:	e59d3004 	ldr	r3, [sp, #4]
   16624:	e3130001 	tst	r3, #1
   16628:	0a000005 	beq	16644 <CSMSC951xDevice::PHYWaitNotBusy()+0x64>
   1662c:	e1a00004 	mov	r0, r4
   16630:	eb004b80 	bl	29438 <CTimer::GetTicks() const>
   16634:	e0400005 	sub	r0, r0, r5
   16638:	e3500063 	cmp	r0, #99	; 0x63
   1663c:	9afffff1 	bls	16608 <CSMSC951xDevice::PHYWaitNotBusy()+0x28>
   16640:	e3a00000 	mov	r0, #0
   16644:	e28dd00c 	add	sp, sp, #12
   16648:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1664c:	e59f2008 	ldr	r2, [pc, #8]	; 1665c <CSMSC951xDevice::PHYWaitNotBusy()+0x7c>
   16650:	e59f1008 	ldr	r1, [pc, #8]	; 16660 <CSMSC951xDevice::PHYWaitNotBusy()+0x80>
   16654:	e59f0008 	ldr	r0, [pc, #8]	; 16664 <CSMSC951xDevice::PHYWaitNotBusy()+0x84>
   16658:	eb00386c 	bl	24810 <assertion_failed>
   1665c:	0000018e 	.word	0x0000018e
   16660:	00041638 	.word	0x00041638
   16664:	000414ec 	.word	0x000414ec

00016668 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   16668:	e351001f 	cmp	r1, #31
   1666c:	e92d4070 	push	{r4, r5, r6, lr}
   16670:	ca000017 	bgt	166d4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x6c>
   16674:	e1a04001 	mov	r4, r1
   16678:	e1a06002 	mov	r6, r2
   1667c:	e1a05000 	mov	r5, r0
   16680:	ebffffd6 	bl	165e0 <CSMSC951xDevice::PHYWaitNotBusy()>
   16684:	e3500000 	cmp	r0, #0
   16688:	1a000001 	bne	16694 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x2c>
   1668c:	e3a00000 	mov	r0, #0
   16690:	e8bd8070 	pop	{r4, r5, r6, pc}
   16694:	e1a02006 	mov	r2, r6
   16698:	e3a01f46 	mov	r1, #280	; 0x118
   1669c:	e1a00005 	mov	r0, r5
   166a0:	ebffff9a 	bl	16510 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   166a4:	e3500000 	cmp	r0, #0
   166a8:	0afffff7 	beq	1668c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   166ac:	e59f2030 	ldr	r2, [pc, #48]	; 166e4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x7c>
   166b0:	e3a01f45 	mov	r1, #276	; 0x114
   166b4:	e1822304 	orr	r2, r2, r4, lsl #6
   166b8:	e1a00005 	mov	r0, r5
   166bc:	ebffff93 	bl	16510 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   166c0:	e3500000 	cmp	r0, #0
   166c4:	0afffff0 	beq	1668c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   166c8:	e1a00005 	mov	r0, r5
   166cc:	e8bd4070 	pop	{r4, r5, r6, lr}
   166d0:	eaffffc2 	b	165e0 <CSMSC951xDevice::PHYWaitNotBusy()>
   166d4:	e59f200c 	ldr	r2, [pc, #12]	; 166e8 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x80>
   166d8:	e59f100c 	ldr	r1, [pc, #12]	; 166ec <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x84>
   166dc:	e59f000c 	ldr	r0, [pc, #12]	; 166f0 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x88>
   166e0:	eb00384a 	bl	24810 <assertion_failed>
   166e4:	00000803 	.word	0x00000803
   166e8:	00000162 	.word	0x00000162
   166ec:	00041638 	.word	0x00041638
   166f0:	000414f8 	.word	0x000414f8

000166f4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   166f4:	e92d4070 	push	{r4, r5, r6, lr}
   166f8:	e351001f 	cmp	r1, #31
   166fc:	e24dd008 	sub	sp, sp, #8
   16700:	ca000023 	bgt	16794 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xa0>
   16704:	e1a04001 	mov	r4, r1
   16708:	e1a06002 	mov	r6, r2
   1670c:	e1a05000 	mov	r5, r0
   16710:	ebffffb2 	bl	165e0 <CSMSC951xDevice::PHYWaitNotBusy()>
   16714:	e3500000 	cmp	r0, #0
   16718:	1a000001 	bne	16724 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x30>
   1671c:	e28dd008 	add	sp, sp, #8
   16720:	e8bd8070 	pop	{r4, r5, r6, pc}
   16724:	e59f2078 	ldr	r2, [pc, #120]	; 167a4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb0>
   16728:	e3a01f45 	mov	r1, #276	; 0x114
   1672c:	e1822304 	orr	r2, r2, r4, lsl #6
   16730:	e1a00005 	mov	r0, r5
   16734:	ebffff75 	bl	16510 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16738:	e3500000 	cmp	r0, #0
   1673c:	1a000002 	bne	1674c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x58>
   16740:	e3a00000 	mov	r0, #0
   16744:	e28dd008 	add	sp, sp, #8
   16748:	e8bd8070 	pop	{r4, r5, r6, pc}
   1674c:	e1a00005 	mov	r0, r5
   16750:	ebffffa2 	bl	165e0 <CSMSC951xDevice::PHYWaitNotBusy()>
   16754:	e3500000 	cmp	r0, #0
   16758:	0afffff8 	beq	16740 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x4c>
   1675c:	e1a00005 	mov	r0, r5
   16760:	e28d2004 	add	r2, sp, #4
   16764:	e3a01f46 	mov	r1, #280	; 0x118
   16768:	ebffff82 	bl	16578 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   1676c:	e3500000 	cmp	r0, #0
   16770:	0afffff2 	beq	16740 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x4c>
   16774:	e3560000 	cmp	r6, #0
   16778:	159d3004 	ldrne	r3, [sp, #4]
   1677c:	11c630b0 	strhne	r3, [r6]
   16780:	1affffe5 	bne	1671c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   16784:	e59f201c 	ldr	r2, [pc, #28]	; 167a8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb4>
   16788:	e59f101c 	ldr	r1, [pc, #28]	; 167ac <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   1678c:	e59f001c 	ldr	r0, [pc, #28]	; 167b0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xbc>
   16790:	eb00381e 	bl	24810 <assertion_failed>
   16794:	e59f2018 	ldr	r2, [pc, #24]	; 167b4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc0>
   16798:	e59f100c 	ldr	r1, [pc, #12]	; 167ac <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   1679c:	e59f0014 	ldr	r0, [pc, #20]	; 167b8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc4>
   167a0:	eb00381a 	bl	24810 <assertion_failed>
   167a4:	00000801 	.word	0x00000801
   167a8:	00000185 	.word	0x00000185
   167ac:	00041638 	.word	0x00041638
   167b0:	00041508 	.word	0x00041508
   167b4:	00000175 	.word	0x00000175
   167b8:	000414f8 	.word	0x000414f8

000167bc <CSMSC951xDevice::IsLinkUp()>:
   167bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   167c0:	e24dd00c 	sub	sp, sp, #12
   167c4:	e28d2006 	add	r2, sp, #6
   167c8:	e3a01001 	mov	r1, #1
   167cc:	ebffffc8 	bl	166f4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   167d0:	e3500000 	cmp	r0, #0
   167d4:	11dd00b6 	ldrhne	r0, [sp, #6]
   167d8:	11a00120 	lsrne	r0, r0, #2
   167dc:	12000001 	andne	r0, r0, #1
   167e0:	e28dd00c 	add	sp, sp, #12
   167e4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000167e8 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()>:
   167e8:	e2400010 	sub	r0, r0, #16
   167ec:	eafffff2 	b	167bc <CSMSC951xDevice::IsLinkUp()>

000167f0 <CSMSC951xDevice::GetLinkSpeed()>:
   167f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   167f4:	e24dd00c 	sub	sp, sp, #12
   167f8:	e28d2006 	add	r2, sp, #6
   167fc:	e3a0101f 	mov	r1, #31
   16800:	ebffffbb 	bl	166f4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   16804:	e3500000 	cmp	r0, #0
   16808:	1a000002 	bne	16818 <CSMSC951xDevice::GetLinkSpeed()+0x28>
   1680c:	e3a00006 	mov	r0, #6
   16810:	e28dd00c 	add	sp, sp, #12
   16814:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   16818:	e1dd30b6 	ldrh	r3, [sp, #6]
   1681c:	e3130a01 	tst	r3, #4096	; 0x1000
   16820:	0afffff9 	beq	1680c <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   16824:	e1a03143 	asr	r3, r3, #2
   16828:	e2033007 	and	r3, r3, #7
   1682c:	e2433001 	sub	r3, r3, #1
   16830:	e3530005 	cmp	r3, #5
   16834:	8afffff4 	bhi	1680c <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   16838:	e59f2008 	ldr	r2, [pc, #8]	; 16848 <CSMSC951xDevice::GetLinkSpeed()+0x58>
   1683c:	e0823003 	add	r3, r2, r3
   16840:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
   16844:	eafffff1 	b	16810 <CSMSC951xDevice::GetLinkSpeed()+0x20>
   16848:	000415b4 	.word	0x000415b4

0001684c <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()>:
   1684c:	e2400010 	sub	r0, r0, #16
   16850:	eaffffe6 	b	167f0 <CSMSC951xDevice::GetLinkSpeed()>

00016854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   16854:	e92d4030 	push	{r4, r5, lr}
   16858:	e1a04002 	mov	r4, r2
   1685c:	e24dd014 	sub	sp, sp, #20
   16860:	e1a05001 	mov	r5, r1
   16864:	e28d200c 	add	r2, sp, #12
   16868:	e1a01004 	mov	r1, r4
   1686c:	ebffff41 	bl	16578 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   16870:	e3500000 	cmp	r0, #0
   16874:	0a000008 	beq	1689c <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x48>
   16878:	eb0040d7 	bl	26bdc <CLogger::Get()>
   1687c:	e59d300c 	ldr	r3, [sp, #12]
   16880:	e3a02004 	mov	r2, #4
   16884:	e88d0028 	stm	sp, {r3, r5}
   16888:	e59f102c 	ldr	r1, [pc, #44]	; 168bc <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   1688c:	e59f302c 	ldr	r3, [pc, #44]	; 168c0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x6c>
   16890:	eb00400e 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16894:	e28dd014 	add	sp, sp, #20
   16898:	e8bd8030 	pop	{r4, r5, pc}
   1689c:	eb0040ce 	bl	26bdc <CLogger::Get()>
   168a0:	e58d4000 	str	r4, [sp]
   168a4:	e59f3018 	ldr	r3, [pc, #24]	; 168c4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x70>
   168a8:	e3a02001 	mov	r2, #1
   168ac:	e59f1008 	ldr	r1, [pc, #8]	; 168bc <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   168b0:	eb004006 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   168b4:	e28dd014 	add	sp, sp, #20
   168b8:	e8bd8030 	pop	{r4, r5, pc}
   168bc:	00041624 	.word	0x00041624
   168c0:	00041668 	.word	0x00041668
   168c4:	000414d0 	.word	0x000414d0

000168c8 <CSMSC951xDevice::DumpRegs()>:
   168c8:	e92d4010 	push	{r4, lr}
   168cc:	e1a04000 	mov	r4, r0
   168d0:	e3a02000 	mov	r2, #0
   168d4:	e59f1134 	ldr	r1, [pc, #308]	; 16a10 <CSMSC951xDevice::DumpRegs()+0x148>
   168d8:	ebffffdd 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168dc:	e1a00004 	mov	r0, r4
   168e0:	e3a02008 	mov	r2, #8
   168e4:	e59f1128 	ldr	r1, [pc, #296]	; 16a14 <CSMSC951xDevice::DumpRegs()+0x14c>
   168e8:	ebffffd9 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168ec:	e1a00004 	mov	r0, r4
   168f0:	e3a0200c 	mov	r2, #12
   168f4:	e59f111c 	ldr	r1, [pc, #284]	; 16a18 <CSMSC951xDevice::DumpRegs()+0x150>
   168f8:	ebffffd5 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168fc:	e1a00004 	mov	r0, r4
   16900:	e3a02010 	mov	r2, #16
   16904:	e59f1110 	ldr	r1, [pc, #272]	; 16a1c <CSMSC951xDevice::DumpRegs()+0x154>
   16908:	ebffffd1 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1690c:	e1a00004 	mov	r0, r4
   16910:	e3a02014 	mov	r2, #20
   16914:	e59f1104 	ldr	r1, [pc, #260]	; 16a20 <CSMSC951xDevice::DumpRegs()+0x158>
   16918:	ebffffcd 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1691c:	e1a00004 	mov	r0, r4
   16920:	e3a02018 	mov	r2, #24
   16924:	e59f10f8 	ldr	r1, [pc, #248]	; 16a24 <CSMSC951xDevice::DumpRegs()+0x15c>
   16928:	ebffffc9 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1692c:	e1a00004 	mov	r0, r4
   16930:	e3a02020 	mov	r2, #32
   16934:	e59f10ec 	ldr	r1, [pc, #236]	; 16a28 <CSMSC951xDevice::DumpRegs()+0x160>
   16938:	ebffffc5 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1693c:	e1a00004 	mov	r0, r4
   16940:	e3a02024 	mov	r2, #36	; 0x24
   16944:	e59f10e0 	ldr	r1, [pc, #224]	; 16a2c <CSMSC951xDevice::DumpRegs()+0x164>
   16948:	ebffffc1 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1694c:	e1a00004 	mov	r0, r4
   16950:	e3a02028 	mov	r2, #40	; 0x28
   16954:	e59f10d4 	ldr	r1, [pc, #212]	; 16a30 <CSMSC951xDevice::DumpRegs()+0x168>
   16958:	ebffffbd 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1695c:	e1a00004 	mov	r0, r4
   16960:	e3a0202c 	mov	r2, #44	; 0x2c
   16964:	e59f10c8 	ldr	r1, [pc, #200]	; 16a34 <CSMSC951xDevice::DumpRegs()+0x16c>
   16968:	ebffffb9 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1696c:	e1a00004 	mov	r0, r4
   16970:	e3a02038 	mov	r2, #56	; 0x38
   16974:	e59f10bc 	ldr	r1, [pc, #188]	; 16a38 <CSMSC951xDevice::DumpRegs()+0x170>
   16978:	ebffffb5 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1697c:	e1a00004 	mov	r0, r4
   16980:	e3a02068 	mov	r2, #104	; 0x68
   16984:	e59f10b0 	ldr	r1, [pc, #176]	; 16a3c <CSMSC951xDevice::DumpRegs()+0x174>
   16988:	ebffffb1 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1698c:	e1a00004 	mov	r0, r4
   16990:	e3a0206c 	mov	r2, #108	; 0x6c
   16994:	e59f10a4 	ldr	r1, [pc, #164]	; 16a40 <CSMSC951xDevice::DumpRegs()+0x178>
   16998:	ebffffad 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1699c:	e1a00004 	mov	r0, r4
   169a0:	e3a02c01 	mov	r2, #256	; 0x100
   169a4:	e59f1098 	ldr	r1, [pc, #152]	; 16a44 <CSMSC951xDevice::DumpRegs()+0x17c>
   169a8:	ebffffa9 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   169ac:	e1a00004 	mov	r0, r4
   169b0:	e3a02f41 	mov	r2, #260	; 0x104
   169b4:	e59f108c 	ldr	r1, [pc, #140]	; 16a48 <CSMSC951xDevice::DumpRegs()+0x180>
   169b8:	ebffffa5 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   169bc:	e1a00004 	mov	r0, r4
   169c0:	e3a02f42 	mov	r2, #264	; 0x108
   169c4:	e59f1080 	ldr	r1, [pc, #128]	; 16a4c <CSMSC951xDevice::DumpRegs()+0x184>
   169c8:	ebffffa1 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   169cc:	e1a00004 	mov	r0, r4
   169d0:	e3a02f43 	mov	r2, #268	; 0x10c
   169d4:	e59f1074 	ldr	r1, [pc, #116]	; 16a50 <CSMSC951xDevice::DumpRegs()+0x188>
   169d8:	ebffff9d 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   169dc:	e1a00004 	mov	r0, r4
   169e0:	e3a02e11 	mov	r2, #272	; 0x110
   169e4:	e59f1068 	ldr	r1, [pc, #104]	; 16a54 <CSMSC951xDevice::DumpRegs()+0x18c>
   169e8:	ebffff99 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   169ec:	e1a00004 	mov	r0, r4
   169f0:	e3a02f47 	mov	r2, #284	; 0x11c
   169f4:	e59f105c 	ldr	r1, [pc, #92]	; 16a58 <CSMSC951xDevice::DumpRegs()+0x190>
   169f8:	ebffff95 	bl	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   169fc:	e1a00004 	mov	r0, r4
   16a00:	e8bd4010 	pop	{r4, lr}
   16a04:	e3a02f4b 	mov	r2, #300	; 0x12c
   16a08:	e59f104c 	ldr	r1, [pc, #76]	; 16a5c <CSMSC951xDevice::DumpRegs()+0x194>
   16a0c:	eaffff90 	b	16854 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16a10:	00041670 	.word	0x00041670
   16a14:	00041678 	.word	0x00041678
   16a18:	00041680 	.word	0x00041680
   16a1c:	00041688 	.word	0x00041688
   16a20:	00041690 	.word	0x00041690
   16a24:	00041698 	.word	0x00041698
   16a28:	000416a4 	.word	0x000416a4
   16a2c:	000416ac 	.word	0x000416ac
   16a30:	000416b0 	.word	0x000416b0
   16a34:	000416bc 	.word	0x000416bc
   16a38:	000416c4 	.word	0x000416c4
   16a3c:	000416d0 	.word	0x000416d0
   16a40:	000416dc 	.word	0x000416dc
   16a44:	000416e8 	.word	0x000416e8
   16a48:	000416f0 	.word	0x000416f0
   16a4c:	000416f8 	.word	0x000416f8
   16a50:	00041700 	.word	0x00041700
   16a54:	00041708 	.word	0x00041708
   16a58:	00041710 	.word	0x00041710
   16a5c:	00041718 	.word	0x00041718

00016a60 <CSMSC951xDevice::Configure()>:
   16a60:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16a64:	e3a06000 	mov	r6, #0
   16a68:	e24dd040 	sub	sp, sp, #64	; 0x40
   16a6c:	e1a01006 	mov	r1, r6
   16a70:	e1a05000 	mov	r5, r0
   16a74:	e28d0014 	add	r0, sp, #20
   16a78:	eb003785 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   16a7c:	e28d0014 	add	r0, sp, #20
   16a80:	e58d6000 	str	r6, [sp]
   16a84:	e3a03014 	mov	r3, #20
   16a88:	e28d202c 	add	r2, sp, #44	; 0x2c
   16a8c:	e59f1274 	ldr	r1, [pc, #628]	; 16d08 <CSMSC951xDevice::Configure()+0x2a8>
   16a90:	eb00378b 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   16a94:	e2504000 	subs	r4, r0, #0
   16a98:	0a00003c 	beq	16b90 <CSMSC951xDevice::Configure()+0x130>
   16a9c:	e285701c 	add	r7, r5, #28
   16aa0:	e28d1038 	add	r1, sp, #56	; 0x38
   16aa4:	e1a00007 	mov	r0, r7
   16aa8:	eb0050ae 	bl	2ad68 <CMACAddress::Set(unsigned char const*)>
   16aac:	e28d001c 	add	r0, sp, #28
   16ab0:	eb00442f 	bl	27b74 <CString::CString()>
   16ab4:	e28d101c 	add	r1, sp, #28
   16ab8:	e1a00007 	mov	r0, r7
   16abc:	eb005102 	bl	2aecc <CMACAddress::Format(CString*) const>
   16ac0:	eb004045 	bl	26bdc <CLogger::Get()>
   16ac4:	e1a04000 	mov	r4, r0
   16ac8:	e28d001c 	add	r0, sp, #28
   16acc:	eb00443e 	bl	27bcc <CString::operator char const*() const>
   16ad0:	e59f3234 	ldr	r3, [pc, #564]	; 16d0c <CSMSC951xDevice::Configure()+0x2ac>
   16ad4:	e58d0000 	str	r0, [sp]
   16ad8:	e3a02004 	mov	r2, #4
   16adc:	e1a00004 	mov	r0, r4
   16ae0:	e59f1228 	ldr	r1, [pc, #552]	; 16d10 <CSMSC951xDevice::Configure()+0x2b0>
   16ae4:	eb003f79 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16ae8:	e1a00005 	mov	r0, r5
   16aec:	ebffe363 	bl	f880 <CUSBFunction::GetNumEndpoints() const>
   16af0:	e3500003 	cmp	r0, #3
   16af4:	03a06005 	moveq	r6, #5
   16af8:	03a08014 	moveq	r8, #20
   16afc:	0a00000e 	beq	16b3c <CSMSC951xDevice::Configure()+0xdc>
   16b00:	e1a00005 	mov	r0, r5
   16b04:	e59f1204 	ldr	r1, [pc, #516]	; 16d10 <CSMSC951xDevice::Configure()+0x2b0>
   16b08:	e1a04006 	mov	r4, r6
   16b0c:	ebffe393 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   16b10:	e28d001c 	add	r0, sp, #28
   16b14:	eb0043e3 	bl	27aa8 <CString::~CString()>
   16b18:	e28d0014 	add	r0, sp, #20
   16b1c:	eb003763 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   16b20:	e1a00004 	mov	r0, r4
   16b24:	e28dd040 	add	sp, sp, #64	; 0x40
   16b28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b2c:	e5d43003 	ldrb	r3, [r4, #3]
   16b30:	e203303f 	and	r3, r3, #63	; 0x3f
   16b34:	e3530002 	cmp	r3, #2
   16b38:	0a00001a 	beq	16ba8 <CSMSC951xDevice::Configure()+0x148>
   16b3c:	e1a01006 	mov	r1, r6
   16b40:	e1a00005 	mov	r0, r5
   16b44:	ebffe37a 	bl	f934 <CUSBFunction::GetDescriptor(unsigned char)>
   16b48:	e2504000 	subs	r4, r0, #0
   16b4c:	1afffff6 	bne	16b2c <CSMSC951xDevice::Configure()+0xcc>
   16b50:	e5953014 	ldr	r3, [r5, #20]
   16b54:	e1a00005 	mov	r0, r5
   16b58:	e3530000 	cmp	r3, #0
   16b5c:	0a000022 	beq	16bec <CSMSC951xDevice::Configure()+0x18c>
   16b60:	e5953018 	ldr	r3, [r5, #24]
   16b64:	e3530000 	cmp	r3, #0
   16b68:	0a00001f 	beq	16bec <CSMSC951xDevice::Configure()+0x18c>
   16b6c:	ebffe28b 	bl	f5a0 <CUSBFunction::Configure()>
   16b70:	e2504000 	subs	r4, r0, #0
   16b74:	1a000020 	bne	16bfc <CSMSC951xDevice::Configure()+0x19c>
   16b78:	eb004017 	bl	26bdc <CLogger::Get()>
   16b7c:	e59f3190 	ldr	r3, [pc, #400]	; 16d14 <CSMSC951xDevice::Configure()+0x2b4>
   16b80:	e3a02001 	mov	r2, #1
   16b84:	e59f1184 	ldr	r1, [pc, #388]	; 16d10 <CSMSC951xDevice::Configure()+0x2b0>
   16b88:	eb003f50 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16b8c:	eaffffdf 	b	16b10 <CSMSC951xDevice::Configure()+0xb0>
   16b90:	eb004011 	bl	26bdc <CLogger::Get()>
   16b94:	e59f317c 	ldr	r3, [pc, #380]	; 16d18 <CSMSC951xDevice::Configure()+0x2b8>
   16b98:	e3a02001 	mov	r2, #1
   16b9c:	e59f116c 	ldr	r1, [pc, #364]	; 16d10 <CSMSC951xDevice::Configure()+0x2b0>
   16ba0:	eb003f4a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16ba4:	eaffffdb 	b	16b18 <CSMSC951xDevice::Configure()+0xb8>
   16ba8:	e1d430d2 	ldrsb	r3, [r4, #2]
   16bac:	e3530000 	cmp	r3, #0
   16bb0:	ba000024 	blt	16c48 <CSMSC951xDevice::Configure()+0x1e8>
   16bb4:	e5953018 	ldr	r3, [r5, #24]
   16bb8:	e1a00005 	mov	r0, r5
   16bbc:	e3530000 	cmp	r3, #0
   16bc0:	1a000009 	bne	16bec <CSMSC951xDevice::Configure()+0x18c>
   16bc4:	ebffe339 	bl	f8b0 <CUSBFunction::GetDevice() const>
   16bc8:	e1a0a000 	mov	sl, r0
   16bcc:	e1a00008 	mov	r0, r8
   16bd0:	eb00512b 	bl	2b084 <operator new(unsigned int)>
   16bd4:	e1a09000 	mov	r9, r0
   16bd8:	e1a02004 	mov	r2, r4
   16bdc:	e1a0100a 	mov	r1, sl
   16be0:	ebffe16f 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16be4:	e5859018 	str	r9, [r5, #24]
   16be8:	eaffffd3 	b	16b3c <CSMSC951xDevice::Configure()+0xdc>
   16bec:	e59f111c 	ldr	r1, [pc, #284]	; 16d10 <CSMSC951xDevice::Configure()+0x2b0>
   16bf0:	ebffe35a 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   16bf4:	e3a04000 	mov	r4, #0
   16bf8:	eaffffc4 	b	16b10 <CSMSC951xDevice::Configure()+0xb0>
   16bfc:	e1a00007 	mov	r0, r7
   16c00:	e28d100c 	add	r1, sp, #12
   16c04:	eb005081 	bl	2ae10 <CMACAddress::CopyTo(unsigned char*) const>
   16c08:	e5dd2011 	ldrb	r2, [sp, #17]
   16c0c:	e5dd3010 	ldrb	r3, [sp, #16]
   16c10:	e3a01f41 	mov	r1, #260	; 0x104
   16c14:	e1832402 	orr	r2, r3, r2, lsl #8
   16c18:	e1a00005 	mov	r0, r5
   16c1c:	e59d400c 	ldr	r4, [sp, #12]
   16c20:	ebfffe3a 	bl	16510 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16c24:	e3500000 	cmp	r0, #0
   16c28:	1a000014 	bne	16c80 <CSMSC951xDevice::Configure()+0x220>
   16c2c:	eb003fea 	bl	26bdc <CLogger::Get()>
   16c30:	e59f30e4 	ldr	r3, [pc, #228]	; 16d1c <CSMSC951xDevice::Configure()+0x2bc>
   16c34:	e3a02001 	mov	r2, #1
   16c38:	e59f10d0 	ldr	r1, [pc, #208]	; 16d10 <CSMSC951xDevice::Configure()+0x2b0>
   16c3c:	eb003f23 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16c40:	e3a04000 	mov	r4, #0
   16c44:	eaffffb1 	b	16b10 <CSMSC951xDevice::Configure()+0xb0>
   16c48:	e5953014 	ldr	r3, [r5, #20]
   16c4c:	e1a00005 	mov	r0, r5
   16c50:	e3530000 	cmp	r3, #0
   16c54:	1affffe4 	bne	16bec <CSMSC951xDevice::Configure()+0x18c>
   16c58:	ebffe314 	bl	f8b0 <CUSBFunction::GetDevice() const>
   16c5c:	e1a0a000 	mov	sl, r0
   16c60:	e1a00008 	mov	r0, r8
   16c64:	eb005106 	bl	2b084 <operator new(unsigned int)>
   16c68:	e1a09000 	mov	r9, r0
   16c6c:	e1a02004 	mov	r2, r4
   16c70:	e1a0100a 	mov	r1, sl
   16c74:	ebffe14a 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16c78:	e5859014 	str	r9, [r5, #20]
   16c7c:	eaffffae 	b	16b3c <CSMSC951xDevice::Configure()+0xdc>
   16c80:	e1a02004 	mov	r2, r4
   16c84:	e3a01f42 	mov	r1, #264	; 0x108
   16c88:	e1a00005 	mov	r0, r5
   16c8c:	ebfffe1f 	bl	16510 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16c90:	e3500000 	cmp	r0, #0
   16c94:	0affffe4 	beq	16c2c <CSMSC951xDevice::Configure()+0x1cc>
   16c98:	e59f2080 	ldr	r2, [pc, #128]	; 16d20 <CSMSC951xDevice::Configure()+0x2c0>
   16c9c:	e3a01024 	mov	r1, #36	; 0x24
   16ca0:	e1a00005 	mov	r0, r5
   16ca4:	ebfffe19 	bl	16510 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16ca8:	e3500000 	cmp	r0, #0
   16cac:	1a000006 	bne	16ccc <CSMSC951xDevice::Configure()+0x26c>
   16cb0:	eb003fc9 	bl	26bdc <CLogger::Get()>
   16cb4:	e59f3068 	ldr	r3, [pc, #104]	; 16d24 <CSMSC951xDevice::Configure()+0x2c4>
   16cb8:	e3a02001 	mov	r2, #1
   16cbc:	e59f104c 	ldr	r1, [pc, #76]	; 16d10 <CSMSC951xDevice::Configure()+0x2b0>
   16cc0:	eb003f02 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16cc4:	e3a04000 	mov	r4, #0
   16cc8:	eaffff90 	b	16b10 <CSMSC951xDevice::Configure()+0xb0>
   16ccc:	e59f2054 	ldr	r2, [pc, #84]	; 16d28 <CSMSC951xDevice::Configure()+0x2c8>
   16cd0:	e3a01c01 	mov	r1, #256	; 0x100
   16cd4:	e1a00005 	mov	r0, r5
   16cd8:	ebfffe0c 	bl	16510 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16cdc:	e3500000 	cmp	r0, #0
   16ce0:	0afffff2 	beq	16cb0 <CSMSC951xDevice::Configure()+0x250>
   16ce4:	e3a02004 	mov	r2, #4
   16ce8:	e3a01010 	mov	r1, #16
   16cec:	e1a00005 	mov	r0, r5
   16cf0:	ebfffe06 	bl	16510 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16cf4:	e2504000 	subs	r4, r0, #0
   16cf8:	0affffec 	beq	16cb0 <CSMSC951xDevice::Configure()+0x250>
   16cfc:	e2850010 	add	r0, r5, #16
   16d00:	eb005092 	bl	2af50 <CNetDevice::AddNetDevice()>
   16d04:	eaffff81 	b	16b10 <CSMSC951xDevice::Configure()+0xb0>
   16d08:	00010003 	.word	0x00010003
   16d0c:	0004153c 	.word	0x0004153c
   16d10:	00041624 	.word	0x00041624
   16d14:	000403d4 	.word	0x000403d4
   16d18:	00041720 	.word	0x00041720
   16d1c:	00041738 	.word	0x00041738
   16d20:	01110000 	.word	0x01110000
   16d24:	00041750 	.word	0x00041750
   16d28:	0080000c 	.word	0x0080000c

00016d2c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   16d2c:	e3a03000 	mov	r3, #0
   16d30:	e92d4070 	push	{r4, r5, r6, lr}
   16d34:	e1a04000 	mov	r4, r0
   16d38:	e5900020 	ldr	r0, [r0, #32]
   16d3c:	e59f20a0 	ldr	r2, [pc, #160]	; 16de4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xb8>
   16d40:	e1500003 	cmp	r0, r3
   16d44:	e5842000 	str	r2, [r4]
   16d48:	e5843024 	str	r3, [r4, #36]	; 0x24
   16d4c:	0a000000 	beq	16d54 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   16d50:	eb0050d3 	bl	2b0a4 <operator delete[](void*)>
   16d54:	e3a03000 	mov	r3, #0
   16d58:	e5945018 	ldr	r5, [r4, #24]
   16d5c:	e5843020 	str	r3, [r4, #32]
   16d60:	e1550003 	cmp	r5, r3
   16d64:	0a000004 	beq	16d7c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x50>
   16d68:	e1a00005 	mov	r0, r5
   16d6c:	ebffe176 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   16d70:	e1a00005 	mov	r0, r5
   16d74:	e3a01014 	mov	r1, #20
   16d78:	eb0050cf 	bl	2b0bc <operator delete(void*, unsigned int)>
   16d7c:	e3a03000 	mov	r3, #0
   16d80:	e5945014 	ldr	r5, [r4, #20]
   16d84:	e5843018 	str	r3, [r4, #24]
   16d88:	e1550003 	cmp	r5, r3
   16d8c:	0a000004 	beq	16da4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x78>
   16d90:	e1a00005 	mov	r0, r5
   16d94:	ebffe16c 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   16d98:	e1a00005 	mov	r0, r5
   16d9c:	e3a01014 	mov	r1, #20
   16da0:	eb0050c5 	bl	2b0bc <operator delete(void*, unsigned int)>
   16da4:	e3a03000 	mov	r3, #0
   16da8:	e5945010 	ldr	r5, [r4, #16]
   16dac:	e5843014 	str	r3, [r4, #20]
   16db0:	e1550003 	cmp	r5, r3
   16db4:	0a000004 	beq	16dcc <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa0>
   16db8:	e1a00005 	mov	r0, r5
   16dbc:	ebffe162 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   16dc0:	e1a00005 	mov	r0, r5
   16dc4:	e3a01014 	mov	r1, #20
   16dc8:	eb0050bb 	bl	2b0bc <operator delete(void*, unsigned int)>
   16dcc:	e3a03000 	mov	r3, #0
   16dd0:	e1a00004 	mov	r0, r4
   16dd4:	e5843010 	str	r3, [r4, #16]
   16dd8:	ebffe1c7 	bl	f4fc <CUSBFunction::~CUSBFunction()>
   16ddc:	e1a00004 	mov	r0, r4
   16de0:	e8bd8070 	pop	{r4, r5, r6, pc}
   16de4:	0004176c 	.word	0x0004176c

00016de8 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   16de8:	e92d4010 	push	{r4, lr}
   16dec:	e1a04000 	mov	r4, r0
   16df0:	ebffffcd 	bl	16d2c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   16df4:	e1a00004 	mov	r0, r4
   16df8:	e3a01028 	mov	r1, #40	; 0x28
   16dfc:	eb0050ae 	bl	2b0bc <operator delete(void*, unsigned int)>
   16e00:	e1a00004 	mov	r0, r4
   16e04:	e8bd8010 	pop	{r4, pc}

00016e08 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   16e08:	e92d4010 	push	{r4, lr}
   16e0c:	e1a04000 	mov	r4, r0
   16e10:	ebffe24a 	bl	f740 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   16e14:	e3a03000 	mov	r3, #0
   16e18:	e59f2020 	ldr	r2, [pc, #32]	; 16e40 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   16e1c:	e5843010 	str	r3, [r4, #16]
   16e20:	e5842000 	str	r2, [r4]
   16e24:	e5843014 	str	r3, [r4, #20]
   16e28:	e5843018 	str	r3, [r4, #24]
   16e2c:	e584301c 	str	r3, [r4, #28]
   16e30:	e5843020 	str	r3, [r4, #32]
   16e34:	e5843024 	str	r3, [r4, #36]	; 0x24
   16e38:	e1a00004 	mov	r0, r4
   16e3c:	e8bd8010 	pop	{r4, pc}
   16e40:	0004176c 	.word	0x0004176c

00016e44 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   16e44:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16e48:	e24dd014 	sub	sp, sp, #20
   16e4c:	e1a06001 	mov	r6, r1
   16e50:	e1a04002 	mov	r4, r2
   16e54:	e1a07000 	mov	r7, r0
   16e58:	ebffe2aa 	bl	f908 <CUSBFunction::GetHost() const>
   16e5c:	e1a05000 	mov	r5, r0
   16e60:	e1a00007 	mov	r0, r7
   16e64:	ebffe29c 	bl	f8dc <CUSBFunction::GetEndpoint0() const>
   16e68:	e3a03000 	mov	r3, #0
   16e6c:	e6ff4074 	uxth	r4, r4
   16e70:	e1a01000 	mov	r1, r0
   16e74:	e58d6008 	str	r6, [sp, #8]
   16e78:	e58d400c 	str	r4, [sp, #12]
   16e7c:	e1a00005 	mov	r0, r5
   16e80:	e58d3004 	str	r3, [sp, #4]
   16e84:	e58d3000 	str	r3, [sp]
   16e88:	e3a02020 	mov	r2, #32
   16e8c:	ebffee6f 	bl	12850 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16e90:	e1e00000 	mvn	r0, r0
   16e94:	e1a00fa0 	lsr	r0, r0, #31
   16e98:	e28dd014 	add	sp, sp, #20
   16e9c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00016ea0 <CUSBBluetoothDevice::StartRequest()>:
   16ea0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16ea4:	e1a04000 	mov	r4, r0
   16ea8:	e5900010 	ldr	r0, [r0, #16]
   16eac:	e24dd00c 	sub	sp, sp, #12
   16eb0:	e3500000 	cmp	r0, #0
   16eb4:	0a00001e 	beq	16f34 <CUSBBluetoothDevice::StartRequest()+0x94>
   16eb8:	e5943020 	ldr	r3, [r4, #32]
   16ebc:	e3530000 	cmp	r3, #0
   16ec0:	0a00001f 	beq	16f44 <CUSBBluetoothDevice::StartRequest()+0xa4>
   16ec4:	e594501c 	ldr	r5, [r4, #28]
   16ec8:	e3550000 	cmp	r5, #0
   16ecc:	1a000020 	bne	16f54 <CUSBBluetoothDevice::StartRequest()+0xb4>
   16ed0:	ebffe132 	bl	f3a0 <CUSBEndpoint::GetMaxPacketSize() const>
   16ed4:	e1a07000 	mov	r7, r0
   16ed8:	e3a00028 	mov	r0, #40	; 0x28
   16edc:	ebfff5e0 	bl	14664 <CUSBRequest::operator new(unsigned int)>
   16ee0:	e1a06000 	mov	r6, r0
   16ee4:	e5942020 	ldr	r2, [r4, #32]
   16ee8:	e5941010 	ldr	r1, [r4, #16]
   16eec:	e1a03007 	mov	r3, r7
   16ef0:	e58d5000 	str	r5, [sp]
   16ef4:	ebfff555 	bl	14450 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   16ef8:	e1a03004 	mov	r3, r4
   16efc:	e1a02005 	mov	r2, r5
   16f00:	e1a00006 	mov	r0, r6
   16f04:	e59f1058 	ldr	r1, [pc, #88]	; 16f64 <CUSBBluetoothDevice::StartRequest()+0xc4>
   16f08:	e584601c 	str	r6, [r4, #28]
   16f0c:	ebfff5b3 	bl	145e0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   16f10:	e1a00004 	mov	r0, r4
   16f14:	ebffe27b 	bl	f908 <CUSBFunction::GetHost() const>
   16f18:	e1a02005 	mov	r2, r5
   16f1c:	e5903000 	ldr	r3, [r0]
   16f20:	e594101c 	ldr	r1, [r4, #28]
   16f24:	e593300c 	ldr	r3, [r3, #12]
   16f28:	e28dd00c 	add	sp, sp, #12
   16f2c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   16f30:	e12fff13 	bx	r3
   16f34:	e3a020a3 	mov	r2, #163	; 0xa3
   16f38:	e59f1028 	ldr	r1, [pc, #40]	; 16f68 <CUSBBluetoothDevice::StartRequest()+0xc8>
   16f3c:	e59f0028 	ldr	r0, [pc, #40]	; 16f6c <CUSBBluetoothDevice::StartRequest()+0xcc>
   16f40:	eb003632 	bl	24810 <assertion_failed>
   16f44:	e3a020a4 	mov	r2, #164	; 0xa4
   16f48:	e59f1018 	ldr	r1, [pc, #24]	; 16f68 <CUSBBluetoothDevice::StartRequest()+0xc8>
   16f4c:	e59f001c 	ldr	r0, [pc, #28]	; 16f70 <CUSBBluetoothDevice::StartRequest()+0xd0>
   16f50:	eb00362e 	bl	24810 <assertion_failed>
   16f54:	e3a020a6 	mov	r2, #166	; 0xa6
   16f58:	e59f1008 	ldr	r1, [pc, #8]	; 16f68 <CUSBBluetoothDevice::StartRequest()+0xc8>
   16f5c:	e59f0010 	ldr	r0, [pc, #16]	; 16f74 <CUSBBluetoothDevice::StartRequest()+0xd4>
   16f60:	eb00362a 	bl	24810 <assertion_failed>
   16f64:	000170c8 	.word	0x000170c8
   16f68:	00041798 	.word	0x00041798
   16f6c:	000417ac 	.word	0x000417ac
   16f70:	000417c8 	.word	0x000417c8
   16f74:	00040b38 	.word	0x00040b38

00016f78 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   16f78:	e3510000 	cmp	r1, #0
   16f7c:	e5801024 	str	r1, [r0, #36]	; 0x24
   16f80:	0a000000 	beq	16f88 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x10>
   16f84:	eaffffc5 	b	16ea0 <CUSBBluetoothDevice::StartRequest()>
   16f88:	e92d4010 	push	{r4, lr}
   16f8c:	e3a0209c 	mov	r2, #156	; 0x9c
   16f90:	e59f1004 	ldr	r1, [pc, #4]	; 16f9c <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x24>
   16f94:	e59f0004 	ldr	r0, [pc, #4]	; 16fa0 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x28>
   16f98:	eb00361c 	bl	24810 <assertion_failed>
   16f9c:	00041798 	.word	0x00041798
   16fa0:	000417dc 	.word	0x000417dc

00016fa4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   16fa4:	e92d4070 	push	{r4, r5, r6, lr}
   16fa8:	e2515000 	subs	r5, r1, #0
   16fac:	0a000031 	beq	17078 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   16fb0:	e590301c 	ldr	r3, [r0, #28]
   16fb4:	e1a04000 	mov	r4, r0
   16fb8:	e1550003 	cmp	r5, r3
   16fbc:	1a000031 	bne	17088 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   16fc0:	e5903020 	ldr	r3, [r0, #32]
   16fc4:	e3530000 	cmp	r3, #0
   16fc8:	0a000032 	beq	17098 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xf4>
   16fcc:	e1a00005 	mov	r0, r5
   16fd0:	ebfff54f 	bl	14514 <CUSBRequest::GetStatus() const>
   16fd4:	e3500000 	cmp	r0, #0
   16fd8:	0a00001c 	beq	17050 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xac>
   16fdc:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   16fe0:	e3560000 	cmp	r6, #0
   16fe4:	0a00001f 	beq	17068 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   16fe8:	e1a00005 	mov	r0, r5
   16fec:	e5945020 	ldr	r5, [r4, #32]
   16ff0:	ebfff549 	bl	1451c <CUSBRequest::GetResultLength() const>
   16ff4:	e1a01000 	mov	r1, r0
   16ff8:	e1a00005 	mov	r0, r5
   16ffc:	e12fff36 	blx	r6
   17000:	e594501c 	ldr	r5, [r4, #28]
   17004:	e3550000 	cmp	r5, #0
   17008:	0a000004 	beq	17020 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x7c>
   1700c:	e1a00005 	mov	r0, r5
   17010:	ebfff52f 	bl	144d4 <CUSBRequest::~CUSBRequest()>
   17014:	e1a00005 	mov	r0, r5
   17018:	e3a01028 	mov	r1, #40	; 0x28
   1701c:	ebfff5a5 	bl	146b8 <CUSBRequest::operator delete(void*, unsigned int)>
   17020:	e3a03000 	mov	r3, #0
   17024:	e1a00004 	mov	r0, r4
   17028:	e584301c 	str	r3, [r4, #28]
   1702c:	ebffff9b 	bl	16ea0 <CUSBBluetoothDevice::StartRequest()>
   17030:	e3500000 	cmp	r0, #0
   17034:	18bd8070 	popne	{r4, r5, r6, pc}
   17038:	eb003ee7 	bl	26bdc <CLogger::Get()>
   1703c:	e8bd4070 	pop	{r4, r5, r6, lr}
   17040:	e59f3060 	ldr	r3, [pc, #96]	; 170a8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x104>
   17044:	e3a02001 	mov	r2, #1
   17048:	e59f105c 	ldr	r1, [pc, #92]	; 170ac <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x108>
   1704c:	ea003e1f 	b	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17050:	eb003ee1 	bl	26bdc <CLogger::Get()>
   17054:	e59f3054 	ldr	r3, [pc, #84]	; 170b0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x10c>
   17058:	e3a02002 	mov	r2, #2
   1705c:	e59f1048 	ldr	r1, [pc, #72]	; 170ac <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x108>
   17060:	eb003e1a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17064:	eaffffe5 	b	17000 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   17068:	e3a020b8 	mov	r2, #184	; 0xb8
   1706c:	e59f1040 	ldr	r1, [pc, #64]	; 170b4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   17070:	e59f0040 	ldr	r0, [pc, #64]	; 170b8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   17074:	eb0035e5 	bl	24810 <assertion_failed>
   17078:	e3a020b2 	mov	r2, #178	; 0xb2
   1707c:	e59f1030 	ldr	r1, [pc, #48]	; 170b4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   17080:	e59f0034 	ldr	r0, [pc, #52]	; 170bc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x118>
   17084:	eb0035e1 	bl	24810 <assertion_failed>
   17088:	e3a020b3 	mov	r2, #179	; 0xb3
   1708c:	e59f1020 	ldr	r1, [pc, #32]	; 170b4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   17090:	e59f0028 	ldr	r0, [pc, #40]	; 170c0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   17094:	eb0035dd 	bl	24810 <assertion_failed>
   17098:	e3a020b4 	mov	r2, #180	; 0xb4
   1709c:	e59f1010 	ldr	r1, [pc, #16]	; 170b4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   170a0:	e59f001c 	ldr	r0, [pc, #28]	; 170c4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x120>
   170a4:	eb0035d9 	bl	24810 <assertion_failed>
   170a8:	00040b6c 	.word	0x00040b6c
   170ac:	00041790 	.word	0x00041790
   170b0:	000417f4 	.word	0x000417f4
   170b4:	00041798 	.word	0x00041798
   170b8:	000417dc 	.word	0x000417dc
   170bc:	0003f31c 	.word	0x0003f31c
   170c0:	00040b5c 	.word	0x00040b5c
   170c4:	000417c8 	.word	0x000417c8

000170c8 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   170c8:	e3520000 	cmp	r2, #0
   170cc:	0a000002 	beq	170dc <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   170d0:	e1a01000 	mov	r1, r0
   170d4:	e1a00002 	mov	r0, r2
   170d8:	eaffffb1 	b	16fa4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   170dc:	e92d4010 	push	{r4, lr}
   170e0:	e3a020cc 	mov	r2, #204	; 0xcc
   170e4:	e59f1004 	ldr	r1, [pc, #4]	; 170f0 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   170e8:	e59f0004 	ldr	r0, [pc, #4]	; 170f4 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   170ec:	eb0035c7 	bl	24810 <assertion_failed>
   170f0:	00041798 	.word	0x00041798
   170f4:	0003f230 	.word	0x0003f230

000170f8 <CUSBBluetoothDevice::Configure()>:
   170f8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   170fc:	e24dd014 	sub	sp, sp, #20
   17100:	e1a05000 	mov	r5, r0
   17104:	ebffe25d 	bl	fa80 <CUSBFunction::GetInterfaceNumber() const>
   17108:	e2506000 	subs	r6, r0, #0
   1710c:	1a000043 	bne	17220 <CUSBBluetoothDevice::Configure()+0x128>
   17110:	e1a00005 	mov	r0, r5
   17114:	ebffe1d9 	bl	f880 <CUSBFunction::GetNumEndpoints() const>
   17118:	e3500003 	cmp	r0, #3
   1711c:	03a06005 	moveq	r6, #5
   17120:	03a07014 	moveq	r7, #20
   17124:	1a000037 	bne	17208 <CUSBBluetoothDevice::Configure()+0x110>
   17128:	e1a01006 	mov	r1, r6
   1712c:	e1a00005 	mov	r0, r5
   17130:	ebffe1ff 	bl	f934 <CUSBFunction::GetDescriptor(unsigned char)>
   17134:	e2504000 	subs	r4, r0, #0
   17138:	0a000041 	beq	17244 <CUSBBluetoothDevice::Configure()+0x14c>
   1713c:	e5d42003 	ldrb	r2, [r4, #3]
   17140:	e202203f 	and	r2, r2, #63	; 0x3f
   17144:	e3520002 	cmp	r2, #2
   17148:	0a00000f 	beq	1718c <CUSBBluetoothDevice::Configure()+0x94>
   1714c:	e3520003 	cmp	r2, #3
   17150:	1afffff4 	bne	17128 <CUSBBluetoothDevice::Configure()+0x30>
   17154:	e5953010 	ldr	r3, [r5, #16]
   17158:	e1a00005 	mov	r0, r5
   1715c:	e3530000 	cmp	r3, #0
   17160:	1a000060 	bne	172e8 <CUSBBluetoothDevice::Configure()+0x1f0>
   17164:	ebffe1d1 	bl	f8b0 <CUSBFunction::GetDevice() const>
   17168:	e1a09000 	mov	r9, r0
   1716c:	e1a00007 	mov	r0, r7
   17170:	eb004fc3 	bl	2b084 <operator new(unsigned int)>
   17174:	e1a08000 	mov	r8, r0
   17178:	e1a02004 	mov	r2, r4
   1717c:	e1a01009 	mov	r1, r9
   17180:	ebffe007 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17184:	e5858010 	str	r8, [r5, #16]
   17188:	eaffffe6 	b	17128 <CUSBBluetoothDevice::Configure()+0x30>
   1718c:	e1d430d2 	ldrsb	r3, [r4, #2]
   17190:	e3530000 	cmp	r3, #0
   17194:	ba00000d 	blt	171d0 <CUSBBluetoothDevice::Configure()+0xd8>
   17198:	e5953018 	ldr	r3, [r5, #24]
   1719c:	e1a00005 	mov	r0, r5
   171a0:	e3530000 	cmp	r3, #0
   171a4:	1a00004f 	bne	172e8 <CUSBBluetoothDevice::Configure()+0x1f0>
   171a8:	ebffe1c0 	bl	f8b0 <CUSBFunction::GetDevice() const>
   171ac:	e1a09000 	mov	r9, r0
   171b0:	e1a00007 	mov	r0, r7
   171b4:	eb004fb2 	bl	2b084 <operator new(unsigned int)>
   171b8:	e1a08000 	mov	r8, r0
   171bc:	e1a02004 	mov	r2, r4
   171c0:	e1a01009 	mov	r1, r9
   171c4:	ebffdff6 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   171c8:	e5858018 	str	r8, [r5, #24]
   171cc:	eaffffd5 	b	17128 <CUSBBluetoothDevice::Configure()+0x30>
   171d0:	e5953014 	ldr	r3, [r5, #20]
   171d4:	e1a00005 	mov	r0, r5
   171d8:	e3530000 	cmp	r3, #0
   171dc:	1a000041 	bne	172e8 <CUSBBluetoothDevice::Configure()+0x1f0>
   171e0:	ebffe1b2 	bl	f8b0 <CUSBFunction::GetDevice() const>
   171e4:	e1a09000 	mov	r9, r0
   171e8:	e1a00007 	mov	r0, r7
   171ec:	eb004fa4 	bl	2b084 <operator new(unsigned int)>
   171f0:	e1a08000 	mov	r8, r0
   171f4:	e1a02004 	mov	r2, r4
   171f8:	e1a01009 	mov	r1, r9
   171fc:	ebffdfe8 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17200:	e5858014 	str	r8, [r5, #20]
   17204:	eaffffc7 	b	17128 <CUSBBluetoothDevice::Configure()+0x30>
   17208:	e1a00005 	mov	r0, r5
   1720c:	e59f1104 	ldr	r1, [pc, #260]	; 17318 <CUSBBluetoothDevice::Configure()+0x220>
   17210:	ebffe1d2 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   17214:	e1a00006 	mov	r0, r6
   17218:	e28dd014 	add	sp, sp, #20
   1721c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17220:	e3a06000 	mov	r6, #0
   17224:	eb003e6c 	bl	26bdc <CLogger::Get()>
   17228:	e59f30ec 	ldr	r3, [pc, #236]	; 1731c <CUSBBluetoothDevice::Configure()+0x224>
   1722c:	e3a02002 	mov	r2, #2
   17230:	e59f10e0 	ldr	r1, [pc, #224]	; 17318 <CUSBBluetoothDevice::Configure()+0x220>
   17234:	eb003da5 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17238:	e1a00006 	mov	r0, r6
   1723c:	e28dd014 	add	sp, sp, #20
   17240:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17244:	e5953014 	ldr	r3, [r5, #20]
   17248:	e3530000 	cmp	r3, #0
   1724c:	0a000024 	beq	172e4 <CUSBBluetoothDevice::Configure()+0x1ec>
   17250:	e5953018 	ldr	r3, [r5, #24]
   17254:	e3530000 	cmp	r3, #0
   17258:	0a000021 	beq	172e4 <CUSBBluetoothDevice::Configure()+0x1ec>
   1725c:	e5953010 	ldr	r3, [r5, #16]
   17260:	e3530000 	cmp	r3, #0
   17264:	0a00001e 	beq	172e4 <CUSBBluetoothDevice::Configure()+0x1ec>
   17268:	e1a00005 	mov	r0, r5
   1726c:	ebffe0cb 	bl	f5a0 <CUSBFunction::Configure()>
   17270:	e2506000 	subs	r6, r0, #0
   17274:	0a000021 	beq	17300 <CUSBBluetoothDevice::Configure()+0x208>
   17278:	e5950010 	ldr	r0, [r5, #16]
   1727c:	ebffe047 	bl	f3a0 <CUSBEndpoint::GetMaxPacketSize() const>
   17280:	eb004f80 	bl	2b088 <operator new[](unsigned int)>
   17284:	e5850020 	str	r0, [r5, #32]
   17288:	e1a0000d 	mov	r0, sp
   1728c:	eb004238 	bl	27b74 <CString::CString()>
   17290:	e59f3088 	ldr	r3, [pc, #136]	; 17320 <CUSBBluetoothDevice::Configure()+0x228>
   17294:	e59f1088 	ldr	r1, [pc, #136]	; 17324 <CUSBBluetoothDevice::Configure()+0x22c>
   17298:	e5932000 	ldr	r2, [r3]
   1729c:	e1a0000d 	mov	r0, sp
   172a0:	e282c001 	add	ip, r2, #1
   172a4:	e583c000 	str	ip, [r3]
   172a8:	eb004774 	bl	29080 <CString::Format(char const*, ...)>
   172ac:	eb003831 	bl	25378 <CDeviceNameService::Get()>
   172b0:	e1a07000 	mov	r7, r0
   172b4:	e1a0000d 	mov	r0, sp
   172b8:	eb004243 	bl	27bcc <CString::operator char const*() const>
   172bc:	e1a03004 	mov	r3, r4
   172c0:	e1a01000 	mov	r1, r0
   172c4:	e1a02005 	mov	r2, r5
   172c8:	e1a00007 	mov	r0, r7
   172cc:	eb00376f 	bl	25090 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   172d0:	e1a0000d 	mov	r0, sp
   172d4:	eb0041f3 	bl	27aa8 <CString::~CString()>
   172d8:	e1a00006 	mov	r0, r6
   172dc:	e28dd014 	add	sp, sp, #20
   172e0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   172e4:	e1a00005 	mov	r0, r5
   172e8:	e3a06000 	mov	r6, #0
   172ec:	e59f1024 	ldr	r1, [pc, #36]	; 17318 <CUSBBluetoothDevice::Configure()+0x220>
   172f0:	ebffe19a 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   172f4:	e1a00006 	mov	r0, r6
   172f8:	e28dd014 	add	sp, sp, #20
   172fc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17300:	eb003e35 	bl	26bdc <CLogger::Get()>
   17304:	e59f301c 	ldr	r3, [pc, #28]	; 17328 <CUSBBluetoothDevice::Configure()+0x230>
   17308:	e3a02001 	mov	r2, #1
   1730c:	e59f1004 	ldr	r1, [pc, #4]	; 17318 <CUSBBluetoothDevice::Configure()+0x220>
   17310:	eb003d6e 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17314:	eaffffbe 	b	17214 <CUSBBluetoothDevice::Configure()+0x11c>
   17318:	00041790 	.word	0x00041790
   1731c:	00041804 	.word	0x00041804
   17320:	00047fb4 	.word	0x00047fb4
   17324:	00041828 	.word	0x00041828
   17328:	000403d4 	.word	0x000403d4

0001732c <CUSBCDCEthernetDevice::GetMACAddress() const>:
   1732c:	e280001c 	add	r0, r0, #28
   17330:	e12fff1e 	bx	lr

00017334 <non-virtual thunk to CUSBCDCEthernetDevice::GetMACAddress() const>:
   17334:	e2400010 	sub	r0, r0, #16
   17338:	eafffffb 	b	1732c <CUSBCDCEthernetDevice::GetMACAddress() const>

0001733c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1733c:	e92d4070 	push	{r4, r5, r6, lr}
   17340:	e59f3074 	ldr	r3, [pc, #116]	; 173bc <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x80>
   17344:	e5905018 	ldr	r5, [r0, #24]
   17348:	e2832038 	add	r2, r3, #56	; 0x38
   1734c:	e3550000 	cmp	r5, #0
   17350:	e1a04000 	mov	r4, r0
   17354:	e5803000 	str	r3, [r0]
   17358:	e5802010 	str	r2, [r0, #16]
   1735c:	0a000004 	beq	17374 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x38>
   17360:	e1a00005 	mov	r0, r5
   17364:	ebffdff8 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   17368:	e1a00005 	mov	r0, r5
   1736c:	e3a01014 	mov	r1, #20
   17370:	eb004f51 	bl	2b0bc <operator delete(void*, unsigned int)>
   17374:	e3a03000 	mov	r3, #0
   17378:	e5945014 	ldr	r5, [r4, #20]
   1737c:	e5843018 	str	r3, [r4, #24]
   17380:	e1550003 	cmp	r5, r3
   17384:	0a000004 	beq	1739c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x60>
   17388:	e1a00005 	mov	r0, r5
   1738c:	ebffdfee 	bl	f34c <CUSBEndpoint::~CUSBEndpoint()>
   17390:	e1a00005 	mov	r0, r5
   17394:	e3a01014 	mov	r1, #20
   17398:	eb004f47 	bl	2b0bc <operator delete(void*, unsigned int)>
   1739c:	e3a03000 	mov	r3, #0
   173a0:	e284001c 	add	r0, r4, #28
   173a4:	e5843014 	str	r3, [r4, #20]
   173a8:	eb004e50 	bl	2acf0 <CMACAddress::~CMACAddress()>
   173ac:	e1a00004 	mov	r0, r4
   173b0:	ebffe051 	bl	f4fc <CUSBFunction::~CUSBFunction()>
   173b4:	e1a00004 	mov	r0, r4
   173b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   173bc:	00041838 	.word	0x00041838

000173c0 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   173c0:	e2400010 	sub	r0, r0, #16
   173c4:	eaffffdc 	b	1733c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

000173c8 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   173c8:	e92d4010 	push	{r4, lr}
   173cc:	e1a04000 	mov	r4, r0
   173d0:	ebffffd9 	bl	1733c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   173d4:	e1a00004 	mov	r0, r4
   173d8:	e3a01024 	mov	r1, #36	; 0x24
   173dc:	eb004f36 	bl	2b0bc <operator delete(void*, unsigned int)>
   173e0:	e1a00004 	mov	r0, r4
   173e4:	e8bd8010 	pop	{r4, pc}

000173e8 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   173e8:	e2400010 	sub	r0, r0, #16
   173ec:	eafffff5 	b	173c8 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

000173f0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   173f0:	e92d4070 	push	{r4, r5, r6, lr}
   173f4:	e5903014 	ldr	r3, [r0, #20]
   173f8:	e24dd030 	sub	sp, sp, #48	; 0x30
   173fc:	e3530000 	cmp	r3, #0
   17400:	0a000026 	beq	174a0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xb0>
   17404:	e3510000 	cmp	r1, #0
   17408:	0a000028 	beq	174b0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xc0>
   1740c:	e3a05000 	mov	r5, #0
   17410:	e1a04000 	mov	r4, r0
   17414:	e1a06002 	mov	r6, r2
   17418:	e58d5000 	str	r5, [sp]
   1741c:	e1a02001 	mov	r2, r1
   17420:	e28d0008 	add	r0, sp, #8
   17424:	e1a01003 	mov	r1, r3
   17428:	e3a03d19 	mov	r3, #1600	; 0x640
   1742c:	ebfff407 	bl	14450 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   17430:	e28d0008 	add	r0, sp, #8
   17434:	ebfff485 	bl	14650 <CUSBRequest::SetCompleteOnNAK()>
   17438:	e1a00004 	mov	r0, r4
   1743c:	ebffe131 	bl	f908 <CUSBFunction::GetHost() const>
   17440:	e5903000 	ldr	r3, [r0]
   17444:	e1a02005 	mov	r2, r5
   17448:	e5933008 	ldr	r3, [r3, #8]
   1744c:	e28d1008 	add	r1, sp, #8
   17450:	e12fff33 	blx	r3
   17454:	e2504000 	subs	r4, r0, #0
   17458:	0a00000a 	beq	17488 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x98>
   1745c:	e28d0008 	add	r0, sp, #8
   17460:	ebfff42d 	bl	1451c <CUSBRequest::GetResultLength() const>
   17464:	e3500000 	cmp	r0, #0
   17468:	0a000006 	beq	17488 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x98>
   1746c:	e3560000 	cmp	r6, #0
   17470:	15860000 	strne	r0, [r6]
   17474:	1a000004 	bne	1748c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x9c>
   17478:	e3a020c3 	mov	r2, #195	; 0xc3
   1747c:	e59f103c 	ldr	r1, [pc, #60]	; 174c0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   17480:	e59f003c 	ldr	r0, [pc, #60]	; 174c4 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd4>
   17484:	eb0034e1 	bl	24810 <assertion_failed>
   17488:	e3a04000 	mov	r4, #0
   1748c:	e28d0008 	add	r0, sp, #8
   17490:	ebfff40f 	bl	144d4 <CUSBRequest::~CUSBRequest()>
   17494:	e1a00004 	mov	r0, r4
   17498:	e28dd030 	add	sp, sp, #48	; 0x30
   1749c:	e8bd8070 	pop	{r4, r5, r6, pc}
   174a0:	e3a020b2 	mov	r2, #178	; 0xb2
   174a4:	e59f1014 	ldr	r1, [pc, #20]	; 174c0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   174a8:	e59f0018 	ldr	r0, [pc, #24]	; 174c8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   174ac:	eb0034d7 	bl	24810 <assertion_failed>
   174b0:	e3a020b3 	mov	r2, #179	; 0xb3
   174b4:	e59f1004 	ldr	r1, [pc, #4]	; 174c0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   174b8:	e59f000c 	ldr	r0, [pc, #12]	; 174cc <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   174bc:	eb0034d3 	bl	24810 <assertion_failed>
   174c0:	000418a0 	.word	0x000418a0
   174c4:	00041488 	.word	0x00041488
   174c8:	00041414 	.word	0x00041414
   174cc:	00040c5c 	.word	0x00040c5c

000174d0 <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   174d0:	e2400010 	sub	r0, r0, #16
   174d4:	eaffffc5 	b	173f0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>

000174d8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   174d8:	e92d4070 	push	{r4, r5, r6, lr}
   174dc:	e5903018 	ldr	r3, [r0, #24]
   174e0:	e24dd008 	sub	sp, sp, #8
   174e4:	e3530000 	cmp	r3, #0
   174e8:	0a000011 	beq	17534 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x5c>
   174ec:	e3510000 	cmp	r1, #0
   174f0:	e1a05001 	mov	r5, r1
   174f4:	0a000012 	beq	17544 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x6c>
   174f8:	e3520d19 	cmp	r2, #1600	; 0x640
   174fc:	e1a06002 	mov	r6, r2
   17500:	8a000013 	bhi	17554 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x7c>
   17504:	e1a04000 	mov	r4, r0
   17508:	ebffe0fe 	bl	f908 <CUSBFunction::GetHost() const>
   1750c:	e3a0c000 	mov	ip, #0
   17510:	e5941018 	ldr	r1, [r4, #24]
   17514:	e1a03006 	mov	r3, r6
   17518:	e1a02005 	mov	r2, r5
   1751c:	e58dc000 	str	ip, [sp]
   17520:	ebffed30 	bl	129e8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   17524:	e1e00000 	mvn	r0, r0
   17528:	e1a00fa0 	lsr	r0, r0, #31
   1752c:	e28dd008 	add	sp, sp, #8
   17530:	e8bd8070 	pop	{r4, r5, r6, pc}
   17534:	e3a020aa 	mov	r2, #170	; 0xaa
   17538:	e59f1024 	ldr	r1, [pc, #36]	; 17564 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   1753c:	e59f0024 	ldr	r0, [pc, #36]	; 17568 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x90>
   17540:	eb0034b2 	bl	24810 <assertion_failed>
   17544:	e3a020ab 	mov	r2, #171	; 0xab
   17548:	e59f1014 	ldr	r1, [pc, #20]	; 17564 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   1754c:	e59f0018 	ldr	r0, [pc, #24]	; 1756c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x94>
   17550:	eb0034ae 	bl	24810 <assertion_failed>
   17554:	e3a020ac 	mov	r2, #172	; 0xac
   17558:	e59f1004 	ldr	r1, [pc, #4]	; 17564 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   1755c:	e59f000c 	ldr	r0, [pc, #12]	; 17570 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   17560:	eb0034aa 	bl	24810 <assertion_failed>
   17564:	000418a0 	.word	0x000418a0
   17568:	0004149c 	.word	0x0004149c
   1756c:	00040c5c 	.word	0x00040c5c
   17570:	000418b4 	.word	0x000418b4

00017574 <non-virtual thunk to CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   17574:	e2400010 	sub	r0, r0, #16
   17578:	eaffffd6 	b	174d8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>

0001757c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   1757c:	e92d4010 	push	{r4, lr}
   17580:	e1a04000 	mov	r4, r0
   17584:	ebffe06d 	bl	f740 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   17588:	e3a02000 	mov	r2, #0
   1758c:	e59f3024 	ldr	r3, [pc, #36]	; 175b8 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x3c>
   17590:	e5842014 	str	r2, [r4, #20]
   17594:	e2831008 	add	r1, r3, #8
   17598:	e2833040 	add	r3, r3, #64	; 0x40
   1759c:	e5841000 	str	r1, [r4]
   175a0:	e5843010 	str	r3, [r4, #16]
   175a4:	e5842018 	str	r2, [r4, #24]
   175a8:	e284001c 	add	r0, r4, #28
   175ac:	eb004dcc 	bl	2ace4 <CMACAddress::CMACAddress()>
   175b0:	e1a00004 	mov	r0, r4
   175b4:	e8bd8010 	pop	{r4, pc}
   175b8:	00041830 	.word	0x00041830

000175bc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   175bc:	e92d4030 	push	{r4, r5, lr}
   175c0:	e24dd01c 	sub	sp, sp, #28
   175c4:	e1a04001 	mov	r4, r1
   175c8:	e1a05000 	mov	r5, r0
   175cc:	ebffe0b7 	bl	f8b0 <CUSBFunction::GetDevice() const>
   175d0:	e1a01000 	mov	r1, r0
   175d4:	e28d000c 	add	r0, sp, #12
   175d8:	eb00021c 	bl	17e50 <CUSBString::CUSBString(CUSBDevice*)>
   175dc:	e3540000 	cmp	r4, #0
   175e0:	1a000005 	bne	175fc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   175e4:	e3a04000 	mov	r4, #0
   175e8:	e28d000c 	add	r0, sp, #12
   175ec:	eb00025a 	bl	17f5c <CUSBString::~CUSBString()>
   175f0:	e1a00004 	mov	r0, r4
   175f4:	e28dd01c 	add	sp, sp, #28
   175f8:	e8bd8030 	pop	{r4, r5, pc}
   175fc:	e28d000c 	add	r0, sp, #12
   17600:	eb0002ec 	bl	181b8 <CUSBString::GetLanguageID()>
   17604:	e1a01004 	mov	r1, r4
   17608:	e1a02000 	mov	r2, r0
   1760c:	e28d000c 	add	r0, sp, #12
   17610:	eb000261 	bl	17f9c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   17614:	e2504000 	subs	r4, r0, #0
   17618:	0afffff1 	beq	175e4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1761c:	e28d000c 	add	r0, sp, #12
   17620:	eb0002e2 	bl	181b0 <CUSBString::Get() const>
   17624:	e3500000 	cmp	r0, #0
   17628:	0a00001b 	beq	1769c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe0>
   1762c:	e2801002 	add	r1, r0, #2
   17630:	e28dc003 	add	ip, sp, #3
   17634:	e280000e 	add	r0, r0, #14
   17638:	e15130d2 	ldrsb	r3, [r1, #-2]
   1763c:	e3530039 	cmp	r3, #57	; 0x39
   17640:	c2433007 	subgt	r3, r3, #7
   17644:	c6af3073 	sxtbgt	r3, r3
   17648:	e2433030 	sub	r3, r3, #48	; 0x30
   1764c:	e6ef2073 	uxtb	r2, r3
   17650:	e352000f 	cmp	r2, #15
   17654:	8affffe2 	bhi	175e4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   17658:	e15130d1 	ldrsb	r3, [r1, #-1]
   1765c:	e3530039 	cmp	r3, #57	; 0x39
   17660:	c2433007 	subgt	r3, r3, #7
   17664:	c6af3073 	sxtbgt	r3, r3
   17668:	e2433030 	sub	r3, r3, #48	; 0x30
   1766c:	e6ef3073 	uxtb	r3, r3
   17670:	e353000f 	cmp	r3, #15
   17674:	8affffda 	bhi	175e4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   17678:	e2811002 	add	r1, r1, #2
   1767c:	e1833202 	orr	r3, r3, r2, lsl #4
   17680:	e1500001 	cmp	r0, r1
   17684:	e5ec3001 	strb	r3, [ip, #1]!
   17688:	1affffea 	bne	17638 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   1768c:	e285001c 	add	r0, r5, #28
   17690:	e28d1004 	add	r1, sp, #4
   17694:	eb004db3 	bl	2ad68 <CMACAddress::Set(unsigned char const*)>
   17698:	eaffffd2 	b	175e8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   1769c:	e3a020d3 	mov	r2, #211	; 0xd3
   176a0:	e59f1004 	ldr	r1, [pc, #4]	; 176ac <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf0>
   176a4:	e59f0004 	ldr	r0, [pc, #4]	; 176b0 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf4>
   176a8:	eb003458 	bl	24810 <assertion_failed>
   176ac:	000418a0 	.word	0x000418a0
   176b0:	000418d4 	.word	0x000418d4

000176b4 <CUSBCDCEthernetDevice::Configure()>:
   176b4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   176b8:	e1a05000 	mov	r5, r0
   176bc:	e24dd01c 	sub	sp, sp, #28
   176c0:	e3a06024 	mov	r6, #36	; 0x24
   176c4:	ea000002 	b	176d4 <CUSBCDCEthernetDevice::Configure()+0x20>
   176c8:	e5d43002 	ldrb	r3, [r4, #2]
   176cc:	e353000f 	cmp	r3, #15
   176d0:	0a00000a 	beq	17700 <CUSBCDCEthernetDevice::Configure()+0x4c>
   176d4:	e1a01006 	mov	r1, r6
   176d8:	e1a00005 	mov	r0, r5
   176dc:	ebffe094 	bl	f934 <CUSBFunction::GetDescriptor(unsigned char)>
   176e0:	e2504000 	subs	r4, r0, #0
   176e4:	1afffff7 	bne	176c8 <CUSBCDCEthernetDevice::Configure()+0x14>
   176e8:	e1a00005 	mov	r0, r5
   176ec:	e59f11f0 	ldr	r1, [pc, #496]	; 178e4 <CUSBCDCEthernetDevice::Configure()+0x230>
   176f0:	ebffe09a 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   176f4:	e1a00004 	mov	r0, r4
   176f8:	e28dd01c 	add	sp, sp, #28
   176fc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17700:	e3a06004 	mov	r6, #4
   17704:	e1a01006 	mov	r1, r6
   17708:	e1a00005 	mov	r0, r5
   1770c:	ebffe088 	bl	f934 <CUSBFunction::GetDescriptor(unsigned char)>
   17710:	e2503000 	subs	r3, r0, #0
   17714:	0a00003c 	beq	1780c <CUSBCDCEthernetDevice::Configure()+0x158>
   17718:	e5d32005 	ldrb	r2, [r3, #5]
   1771c:	e352000a 	cmp	r2, #10
   17720:	1afffff7 	bne	17704 <CUSBCDCEthernetDevice::Configure()+0x50>
   17724:	e5d32006 	ldrb	r2, [r3, #6]
   17728:	e3520000 	cmp	r2, #0
   1772c:	1afffff4 	bne	17704 <CUSBCDCEthernetDevice::Configure()+0x50>
   17730:	e5d32007 	ldrb	r2, [r3, #7]
   17734:	e3520000 	cmp	r2, #0
   17738:	1afffff1 	bne	17704 <CUSBCDCEthernetDevice::Configure()+0x50>
   1773c:	e5d33004 	ldrb	r3, [r3, #4]
   17740:	e3530001 	cmp	r3, #1
   17744:	daffffee 	ble	17704 <CUSBCDCEthernetDevice::Configure()+0x50>
   17748:	e5d41003 	ldrb	r1, [r4, #3]
   1774c:	e1a00005 	mov	r0, r5
   17750:	ebffff99 	bl	175bc <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   17754:	e2504000 	subs	r4, r0, #0
   17758:	0a000043 	beq	1786c <CUSBCDCEthernetDevice::Configure()+0x1b8>
   1775c:	e28d0008 	add	r0, sp, #8
   17760:	eb004103 	bl	27b74 <CString::CString()>
   17764:	e28d1008 	add	r1, sp, #8
   17768:	e285001c 	add	r0, r5, #28
   1776c:	eb004dd6 	bl	2aecc <CMACAddress::Format(CString*) const>
   17770:	eb003d19 	bl	26bdc <CLogger::Get()>
   17774:	e1a04000 	mov	r4, r0
   17778:	e28d0008 	add	r0, sp, #8
   1777c:	eb004112 	bl	27bcc <CString::operator char const*() const>
   17780:	e59f3160 	ldr	r3, [pc, #352]	; 178e8 <CUSBCDCEthernetDevice::Configure()+0x234>
   17784:	e58d0000 	str	r0, [sp]
   17788:	e3a02004 	mov	r2, #4
   1778c:	e1a00004 	mov	r0, r4
   17790:	e59f114c 	ldr	r1, [pc, #332]	; 178e4 <CUSBCDCEthernetDevice::Configure()+0x230>
   17794:	eb003c4d 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17798:	e3a06005 	mov	r6, #5
   1779c:	e3a07014 	mov	r7, #20
   177a0:	ea000003 	b	177b4 <CUSBCDCEthernetDevice::Configure()+0x100>
   177a4:	e5d43003 	ldrb	r3, [r4, #3]
   177a8:	e203303f 	and	r3, r3, #63	; 0x3f
   177ac:	e3530002 	cmp	r3, #2
   177b0:	0a00001c 	beq	17828 <CUSBCDCEthernetDevice::Configure()+0x174>
   177b4:	e1a01006 	mov	r1, r6
   177b8:	e1a00005 	mov	r0, r5
   177bc:	ebffe05c 	bl	f934 <CUSBFunction::GetDescriptor(unsigned char)>
   177c0:	e2504000 	subs	r4, r0, #0
   177c4:	1afffff6 	bne	177a4 <CUSBCDCEthernetDevice::Configure()+0xf0>
   177c8:	e5953014 	ldr	r3, [r5, #20]
   177cc:	e1a00005 	mov	r0, r5
   177d0:	e3530000 	cmp	r3, #0
   177d4:	0a000030 	beq	1789c <CUSBCDCEthernetDevice::Configure()+0x1e8>
   177d8:	e5953018 	ldr	r3, [r5, #24]
   177dc:	e3530000 	cmp	r3, #0
   177e0:	0a00002d 	beq	1789c <CUSBCDCEthernetDevice::Configure()+0x1e8>
   177e4:	ebffdf6d 	bl	f5a0 <CUSBFunction::Configure()>
   177e8:	e2504000 	subs	r4, r0, #0
   177ec:	0a000024 	beq	17884 <CUSBCDCEthernetDevice::Configure()+0x1d0>
   177f0:	e2850010 	add	r0, r5, #16
   177f4:	eb004dd5 	bl	2af50 <CNetDevice::AddNetDevice()>
   177f8:	e28d0008 	add	r0, sp, #8
   177fc:	eb0040a9 	bl	27aa8 <CString::~CString()>
   17800:	e1a00004 	mov	r0, r4
   17804:	e28dd01c 	add	sp, sp, #28
   17808:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1780c:	e1a04003 	mov	r4, r3
   17810:	e1a00005 	mov	r0, r5
   17814:	e59f10c8 	ldr	r1, [pc, #200]	; 178e4 <CUSBCDCEthernetDevice::Configure()+0x230>
   17818:	ebffe050 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   1781c:	e1a00004 	mov	r0, r4
   17820:	e28dd01c 	add	sp, sp, #28
   17824:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17828:	e1d430d2 	ldrsb	r3, [r4, #2]
   1782c:	e3530000 	cmp	r3, #0
   17830:	ba00001d 	blt	178ac <CUSBCDCEthernetDevice::Configure()+0x1f8>
   17834:	e5953018 	ldr	r3, [r5, #24]
   17838:	e1a00005 	mov	r0, r5
   1783c:	e3530000 	cmp	r3, #0
   17840:	1a000015 	bne	1789c <CUSBCDCEthernetDevice::Configure()+0x1e8>
   17844:	ebffe019 	bl	f8b0 <CUSBFunction::GetDevice() const>
   17848:	e1a09000 	mov	r9, r0
   1784c:	e1a00007 	mov	r0, r7
   17850:	eb004e0b 	bl	2b084 <operator new(unsigned int)>
   17854:	e1a08000 	mov	r8, r0
   17858:	e1a02004 	mov	r2, r4
   1785c:	e1a01009 	mov	r1, r9
   17860:	ebffde4f 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17864:	e5858018 	str	r8, [r5, #24]
   17868:	eaffffd1 	b	177b4 <CUSBCDCEthernetDevice::Configure()+0x100>
   1786c:	eb003cda 	bl	26bdc <CLogger::Get()>
   17870:	e59f3074 	ldr	r3, [pc, #116]	; 178ec <CUSBCDCEthernetDevice::Configure()+0x238>
   17874:	e3a02001 	mov	r2, #1
   17878:	e59f1064 	ldr	r1, [pc, #100]	; 178e4 <CUSBCDCEthernetDevice::Configure()+0x230>
   1787c:	eb003c13 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17880:	eaffff9b 	b	176f4 <CUSBCDCEthernetDevice::Configure()+0x40>
   17884:	eb003cd4 	bl	26bdc <CLogger::Get()>
   17888:	e59f3060 	ldr	r3, [pc, #96]	; 178f0 <CUSBCDCEthernetDevice::Configure()+0x23c>
   1788c:	e3a02001 	mov	r2, #1
   17890:	e59f104c 	ldr	r1, [pc, #76]	; 178e4 <CUSBCDCEthernetDevice::Configure()+0x230>
   17894:	eb003c0d 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17898:	eaffffd6 	b	177f8 <CUSBCDCEthernetDevice::Configure()+0x144>
   1789c:	e59f1040 	ldr	r1, [pc, #64]	; 178e4 <CUSBCDCEthernetDevice::Configure()+0x230>
   178a0:	ebffe02e 	bl	f960 <CUSBFunction::ConfigurationError(char const*) const>
   178a4:	e3a04000 	mov	r4, #0
   178a8:	eaffffd2 	b	177f8 <CUSBCDCEthernetDevice::Configure()+0x144>
   178ac:	e5953014 	ldr	r3, [r5, #20]
   178b0:	e1a00005 	mov	r0, r5
   178b4:	e3530000 	cmp	r3, #0
   178b8:	1afffff7 	bne	1789c <CUSBCDCEthernetDevice::Configure()+0x1e8>
   178bc:	ebffdffb 	bl	f8b0 <CUSBFunction::GetDevice() const>
   178c0:	e1a09000 	mov	r9, r0
   178c4:	e1a00007 	mov	r0, r7
   178c8:	eb004ded 	bl	2b084 <operator new(unsigned int)>
   178cc:	e1a08000 	mov	r8, r0
   178d0:	e1a02004 	mov	r2, r4
   178d4:	e1a01009 	mov	r1, r9
   178d8:	ebffde31 	bl	f1a4 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   178dc:	e5858014 	str	r8, [r5, #20]
   178e0:	eaffffb3 	b	177b4 <CUSBCDCEthernetDevice::Configure()+0x100>
   178e4:	00041898 	.word	0x00041898
   178e8:	0004153c 	.word	0x0004153c
   178ec:	00041720 	.word	0x00041720
   178f0:	000403d4 	.word	0x000403d4

000178f4 <CNetDevice::IsLinkUp()>:
   178f4:	e3a00001 	mov	r0, #1
   178f8:	e12fff1e 	bx	lr

000178fc <CNetDevice::GetLinkSpeed()>:
   178fc:	e3a00006 	mov	r0, #6
   17900:	e12fff1e 	bx	lr

00017904 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   17904:	e3a0c000 	mov	ip, #0
   17908:	e0813002 	add	r3, r1, r2
   1790c:	e151000c 	cmp	r1, ip
   17910:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17914:	e8800006 	stm	r0, {r1, r2}
   17918:	e5801010 	str	r1, [r0, #16]
   1791c:	e5801018 	str	r1, [r0, #24]
   17920:	e580300c 	str	r3, [r0, #12]
   17924:	e5c0c008 	strb	ip, [r0, #8]
   17928:	e580c014 	str	ip, [r0, #20]
   1792c:	0a000030 	beq	179f4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   17930:	e242c004 	sub	ip, r2, #4
   17934:	e35c0f7f 	cmp	ip, #508	; 0x1fc
   17938:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   1793c:	e5d1c000 	ldrb	ip, [r1]
   17940:	e35c0009 	cmp	ip, #9
   17944:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   17948:	e5d1c001 	ldrb	ip, [r1, #1]
   1794c:	e35c0002 	cmp	ip, #2
   17950:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   17954:	e5d1c002 	ldrb	ip, [r1, #2]
   17958:	e5d1e003 	ldrb	lr, [r1, #3]
   1795c:	e18cc40e 	orr	ip, ip, lr, lsl #8
   17960:	e15c0002 	cmp	ip, r2
   17964:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   17968:	e3a05000 	mov	r5, #0
   1796c:	3081300c 	addcc	r3, r1, ip
   17970:	3580300c 	strcc	r3, [r0, #12]
   17974:	e1a04005 	mov	r4, r5
   17978:	e3a06009 	mov	r6, #9
   1797c:	e3a08007 	mov	r8, #7
   17980:	e3a07001 	mov	r7, #1
   17984:	ea000005 	b	179a0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x9c>
   17988:	e3520005 	cmp	r2, #5
   1798c:	0a000020 	beq	17a14 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x110>
   17990:	e3520002 	cmp	r2, #2
   17994:	0a00001a 	beq	17a04 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x100>
   17998:	e1a0100c 	mov	r1, ip
   1799c:	e1a04002 	mov	r4, r2
   179a0:	e2812002 	add	r2, r1, #2
   179a4:	e1530002 	cmp	r3, r2
   179a8:	9a000020 	bls	17a30 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x12c>
   179ac:	e5d1e000 	ldrb	lr, [r1]
   179b0:	e5d12001 	ldrb	r2, [r1, #1]
   179b4:	e081c00e 	add	ip, r1, lr
   179b8:	e15c0003 	cmp	ip, r3
   179bc:	8a00000a 	bhi	179ec <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   179c0:	e3520004 	cmp	r2, #4
   179c4:	1affffef 	bne	17988 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x84>
   179c8:	e3540000 	cmp	r4, #0
   179cc:	0a000006 	beq	179ec <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   179d0:	e5d15005 	ldrb	r5, [r1, #5]
   179d4:	e1a04006 	mov	r4, r6
   179d8:	e2455001 	sub	r5, r5, #1
   179dc:	e16f5f15 	clz	r5, r5
   179e0:	e1a052a5 	lsr	r5, r5, #5
   179e4:	e15e0004 	cmp	lr, r4
   179e8:	0affffea 	beq	17998 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x94>
   179ec:	e5801018 	str	r1, [r0, #24]
   179f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   179f4:	e3a02024 	mov	r2, #36	; 0x24
   179f8:	e59f1044 	ldr	r1, [pc, #68]	; 17a44 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x140>
   179fc:	e59f0044 	ldr	r0, [pc, #68]	; 17a48 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x144>
   17a00:	eb003382 	bl	24810 <assertion_failed>
   17a04:	e3540000 	cmp	r4, #0
   17a08:	1afffff7 	bne	179ec <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   17a0c:	e1a04006 	mov	r4, r6
   17a10:	eafffff3 	b	179e4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe0>
   17a14:	e31400fd 	tst	r4, #253	; 0xfd
   17a18:	0afffff3 	beq	179ec <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   17a1c:	e3550000 	cmp	r5, #0
   17a20:	11a04006 	movne	r4, r6
   17a24:	11a05007 	movne	r5, r7
   17a28:	01a04008 	moveq	r4, r8
   17a2c:	eaffffec 	b	179e4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe0>
   17a30:	e1510003 	cmp	r1, r3
   17a34:	1affffec 	bne	179ec <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   17a38:	e3a03001 	mov	r3, #1
   17a3c:	e5c03008 	strb	r3, [r0, #8]
   17a40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17a44:	000418e4 	.word	0x000418e4
   17a48:	000418f8 	.word	0x000418f8

00017a4c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   17a4c:	e3510000 	cmp	r1, #0
   17a50:	e92d4070 	push	{r4, r5, r6, lr}
   17a54:	0a00000d 	beq	17a90 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x44>
   17a58:	e8910044 	ldm	r1, {r2, r6}
   17a5c:	e5d15008 	ldrb	r5, [r1, #8]
   17a60:	e591400c 	ldr	r4, [r1, #12]
   17a64:	e591e010 	ldr	lr, [r1, #16]
   17a68:	e591c014 	ldr	ip, [r1, #20]
   17a6c:	e5802000 	str	r2, [r0]
   17a70:	e5912018 	ldr	r2, [r1, #24]
   17a74:	e5806004 	str	r6, [r0, #4]
   17a78:	e5c05008 	strb	r5, [r0, #8]
   17a7c:	e580400c 	str	r4, [r0, #12]
   17a80:	e580e010 	str	lr, [r0, #16]
   17a84:	e580c014 	str	ip, [r0, #20]
   17a88:	e5802018 	str	r2, [r0, #24]
   17a8c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17a90:	e3a02082 	mov	r2, #130	; 0x82
   17a94:	e59f1004 	ldr	r1, [pc, #4]	; 17aa0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x54>
   17a98:	e59f0004 	ldr	r0, [pc, #4]	; 17aa4 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x58>
   17a9c:	eb00335b 	bl	24810 <assertion_failed>
   17aa0:	000418e4 	.word	0x000418e4
   17aa4:	00041908 	.word	0x00041908

00017aa8 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   17aa8:	e12fff1e 	bx	lr

00017aac <CUSBConfigurationParser::IsValid() const>:
   17aac:	e5d00008 	ldrb	r0, [r0, #8]
   17ab0:	e12fff1e 	bx	lr

00017ab4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   17ab4:	e5d03008 	ldrb	r3, [r0, #8]
   17ab8:	e92d4070 	push	{r4, r5, r6, lr}
   17abc:	e3530000 	cmp	r3, #0
   17ac0:	0a00002a 	beq	17b70 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xbc>
   17ac4:	e590c010 	ldr	ip, [r0, #16]
   17ac8:	e590e00c 	ldr	lr, [r0, #12]
   17acc:	e15c000e 	cmp	ip, lr
   17ad0:	2a000022 	bcs	17b60 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xac>
   17ad4:	e5dc3000 	ldrb	r3, [ip]
   17ad8:	e5dc2001 	ldrb	r2, [ip, #1]
   17adc:	e08c3003 	add	r3, ip, r3
   17ae0:	e153000e 	cmp	r3, lr
   17ae4:	8a000018 	bhi	17b4c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x98>
   17ae8:	e2415005 	sub	r5, r1, #5
   17aec:	e16f5f15 	clz	r5, r5
   17af0:	e3520004 	cmp	r2, #4
   17af4:	03510005 	cmpeq	r1, #5
   17af8:	e1a052a5 	lsr	r5, r5, #5
   17afc:	0a000017 	beq	17b60 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xac>
   17b00:	e1510002 	cmp	r1, r2
   17b04:	1a000008 	bne	17b2c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x78>
   17b08:	ea000020 	b	17b90 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xdc>
   17b0c:	e35c0004 	cmp	ip, #4
   17b10:	13a04000 	movne	r4, #0
   17b14:	02054001 	andeq	r4, r5, #1
   17b18:	e3540000 	cmp	r4, #0
   17b1c:	1a00000e 	bne	17b5c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa8>
   17b20:	e15c0001 	cmp	ip, r1
   17b24:	0a000015 	beq	17b80 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xcc>
   17b28:	e1a03002 	mov	r3, r2
   17b2c:	e153000e 	cmp	r3, lr
   17b30:	2a000009 	bcs	17b5c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa8>
   17b34:	e5d32000 	ldrb	r2, [r3]
   17b38:	e5d3c001 	ldrb	ip, [r3, #1]
   17b3c:	e0832002 	add	r2, r3, r2
   17b40:	e152000e 	cmp	r2, lr
   17b44:	9afffff0 	bls	17b0c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x58>
   17b48:	e5803010 	str	r3, [r0, #16]
   17b4c:	e3a020a9 	mov	r2, #169	; 0xa9
   17b50:	e59f1040 	ldr	r1, [pc, #64]	; 17b98 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xe4>
   17b54:	e59f0040 	ldr	r0, [pc, #64]	; 17b9c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xe8>
   17b58:	eb00332c 	bl	24810 <assertion_failed>
   17b5c:	e5803010 	str	r3, [r0, #16]
   17b60:	e3a0c000 	mov	ip, #0
   17b64:	e580c014 	str	ip, [r0, #20]
   17b68:	e1a0000c 	mov	r0, ip
   17b6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17b70:	e3a0209f 	mov	r2, #159	; 0x9f
   17b74:	e59f101c 	ldr	r1, [pc, #28]	; 17b98 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xe4>
   17b78:	e59f0020 	ldr	r0, [pc, #32]	; 17ba0 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xec>
   17b7c:	eb003323 	bl	24810 <assertion_failed>
   17b80:	e1a0c003 	mov	ip, r3
   17b84:	e5802010 	str	r2, [r0, #16]
   17b88:	e580c018 	str	ip, [r0, #24]
   17b8c:	eafffff4 	b	17b64 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xb0>
   17b90:	e1a02003 	mov	r2, r3
   17b94:	eafffffa 	b	17b84 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xd0>
   17b98:	000418e4 	.word	0x000418e4
   17b9c:	00041918 	.word	0x00041918
   17ba0:	0003f9e0 	.word	0x0003f9e0

00017ba4 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   17ba4:	e5d03008 	ldrb	r3, [r0, #8]
   17ba8:	e92d4010 	push	{r4, lr}
   17bac:	e3530000 	cmp	r3, #0
   17bb0:	0a000006 	beq	17bd0 <CUSBConfigurationParser::GetCurrentDescriptor()+0x2c>
   17bb4:	e5900014 	ldr	r0, [r0, #20]
   17bb8:	e3500000 	cmp	r0, #0
   17bbc:	18bd8010 	popne	{r4, pc}
   17bc0:	e3a020c8 	mov	r2, #200	; 0xc8
   17bc4:	e59f1014 	ldr	r1, [pc, #20]	; 17be0 <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   17bc8:	e59f0014 	ldr	r0, [pc, #20]	; 17be4 <CUSBConfigurationParser::GetCurrentDescriptor()+0x40>
   17bcc:	eb00330f 	bl	24810 <assertion_failed>
   17bd0:	e3a020c7 	mov	r2, #199	; 0xc7
   17bd4:	e59f1004 	ldr	r1, [pc, #4]	; 17be0 <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   17bd8:	e59f0008 	ldr	r0, [pc, #8]	; 17be8 <CUSBConfigurationParser::GetCurrentDescriptor()+0x44>
   17bdc:	eb00330b 	bl	24810 <assertion_failed>
   17be0:	000418e4 	.word	0x000418e4
   17be4:	00041934 	.word	0x00041934
   17be8:	0003f9e0 	.word	0x0003f9e0

00017bec <CUSBConfigurationParser::Error(char const*) const>:
   17bec:	e92d4030 	push	{r4, r5, lr}
   17bf0:	e2515000 	subs	r5, r1, #0
   17bf4:	e24dd00c 	sub	sp, sp, #12
   17bf8:	0a00000e 	beq	17c38 <CUSBConfigurationParser::Error(char const*) const+0x4c>
   17bfc:	e1a04000 	mov	r4, r0
   17c00:	eb003bf5 	bl	26bdc <CLogger::Get()>
   17c04:	e5941000 	ldr	r1, [r4]
   17c08:	e5942018 	ldr	r2, [r4, #24]
   17c0c:	e59f3034 	ldr	r3, [pc, #52]	; 17c48 <CUSBConfigurationParser::Error(char const*) const+0x5c>
   17c10:	e0422001 	sub	r2, r2, r1
   17c14:	e58d2000 	str	r2, [sp]
   17c18:	e1a01005 	mov	r1, r5
   17c1c:	e3a02001 	mov	r2, #1
   17c20:	eb003b2a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17c24:	e8940003 	ldm	r4, {r0, r1}
   17c28:	e1a02005 	mov	r2, r5
   17c2c:	e28dd00c 	add	sp, sp, #12
   17c30:	e8bd4030 	pop	{r4, r5, lr}
   17c34:	ea003469 	b	24de0 <debug_hexdump(void const*, unsigned int, char const*)>
   17c38:	e3a020cf 	mov	r2, #207	; 0xcf
   17c3c:	e59f1008 	ldr	r1, [pc, #8]	; 17c4c <CUSBConfigurationParser::Error(char const*) const+0x60>
   17c40:	e59f0008 	ldr	r0, [pc, #8]	; 17c50 <CUSBConfigurationParser::Error(char const*) const+0x64>
   17c44:	eb0032f1 	bl	24810 <assertion_failed>
   17c48:	00041950 	.word	0x00041950
   17c4c:	000418e4 	.word	0x000418e4
   17c50:	0004043c 	.word	0x0004043c

00017c54 <CUSBGamePadDevice::GetInitialState()>:
   17c54:	e2800024 	add	r0, r0, #36	; 0x24
   17c58:	e12fff1e 	bx	lr

00017c5c <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   17c5c:	e3510000 	cmp	r1, #0
   17c60:	012fff1e 	bxeq	lr
   17c64:	e280cf4a 	add	ip, r0, #296	; 0x128
   17c68:	e1dcc0b0 	ldrh	ip, [ip]
   17c6c:	e92d4070 	push	{r4, r5, r6, lr}
   17c70:	e15c0002 	cmp	ip, r2
   17c74:	e1a04000 	mov	r4, r0
   17c78:	18bd8070 	popne	{r4, r5, r6, pc}
   17c7c:	e5902124 	ldr	r2, [r0, #292]	; 0x124
   17c80:	e3520000 	cmp	r2, #0
   17c84:	08bd8070 	popeq	{r4, r5, r6, pc}
   17c88:	e1a05000 	mov	r5, r0
   17c8c:	e4953024 	ldr	r3, [r5], #36	; 0x24
   17c90:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   17c94:	e12fff33 	blx	r3
   17c98:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   17c9c:	e1a01005 	mov	r1, r5
   17ca0:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   17ca4:	e2400001 	sub	r0, r0, #1
   17ca8:	e8bd4070 	pop	{r4, r5, r6, lr}
   17cac:	e12fff13 	bx	r3

00017cb0 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   17cb0:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   17cb4:	e92d4010 	push	{r4, lr}
   17cb8:	e3530000 	cmp	r3, #0
   17cbc:	1a000006 	bne	17cdc <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x2c>
   17cc0:	e3510000 	cmp	r1, #0
   17cc4:	e5801124 	str	r1, [r0, #292]	; 0x124
   17cc8:	18bd8010 	popne	{r4, pc}
   17ccc:	e3a0204d 	mov	r2, #77	; 0x4d
   17cd0:	e59f1014 	ldr	r1, [pc, #20]	; 17cec <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   17cd4:	e59f0014 	ldr	r0, [pc, #20]	; 17cf0 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x40>
   17cd8:	eb0032cc 	bl	24810 <assertion_failed>
   17cdc:	e3a0204b 	mov	r2, #75	; 0x4b
   17ce0:	e59f1004 	ldr	r1, [pc, #4]	; 17cec <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   17ce4:	e59f0008 	ldr	r0, [pc, #8]	; 17cf4 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x44>
   17ce8:	eb0032c8 	bl	24810 <assertion_failed>
   17cec:	000419dc 	.word	0x000419dc
   17cf0:	00041a04 	.word	0x00041a04
   17cf4:	000419ec 	.word	0x000419ec

00017cf8 <CUSBGamePadDevice::Configure()>:
   17cf8:	e92d4030 	push	{r4, r5, lr}
   17cfc:	e2803f4a 	add	r3, r0, #296	; 0x128
   17d00:	e1d310b0 	ldrh	r1, [r3]
   17d04:	e24dd00c 	sub	sp, sp, #12
   17d08:	e3510000 	cmp	r1, #0
   17d0c:	0a00001a 	beq	17d7c <CUSBGamePadDevice::Configure()+0x84>
   17d10:	e1a04000 	mov	r4, r0
   17d14:	ebffe921 	bl	121a0 <CUSBHIDDevice::Configure(unsigned int)>
   17d18:	e2505000 	subs	r5, r0, #0
   17d1c:	0a00000e 	beq	17d5c <CUSBGamePadDevice::Configure()+0x64>
   17d20:	e59f2064 	ldr	r2, [pc, #100]	; 17d8c <CUSBGamePadDevice::Configure()+0x94>
   17d24:	e5923000 	ldr	r3, [r2]
   17d28:	e584312c 	str	r3, [r4, #300]	; 0x12c
   17d2c:	e2833001 	add	r3, r3, #1
   17d30:	e5823000 	str	r3, [r2]
   17d34:	eb00358f 	bl	25378 <CDeviceNameService::Get()>
   17d38:	e3a03000 	mov	r3, #0
   17d3c:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   17d40:	e59f1048 	ldr	r1, [pc, #72]	; 17d90 <CUSBGamePadDevice::Configure()+0x98>
   17d44:	e58d3000 	str	r3, [sp]
   17d48:	e1a03004 	mov	r3, r4
   17d4c:	eb003596 	bl	253ac <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   17d50:	e1a00005 	mov	r0, r5
   17d54:	e28dd00c 	add	sp, sp, #12
   17d58:	e8bd8030 	pop	{r4, r5, pc}
   17d5c:	eb003b9e 	bl	26bdc <CLogger::Get()>
   17d60:	e59f302c 	ldr	r3, [pc, #44]	; 17d94 <CUSBGamePadDevice::Configure()+0x9c>
   17d64:	e3a02001 	mov	r2, #1
   17d68:	e59f1028 	ldr	r1, [pc, #40]	; 17d98 <CUSBGamePadDevice::Configure()+0xa0>
   17d6c:	eb003ad7 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17d70:	e1a00005 	mov	r0, r5
   17d74:	e28dd00c 	add	sp, sp, #12
   17d78:	e8bd8030 	pop	{r4, r5, pc}
   17d7c:	e3a02035 	mov	r2, #53	; 0x35
   17d80:	e59f1014 	ldr	r1, [pc, #20]	; 17d9c <CUSBGamePadDevice::Configure()+0xa4>
   17d84:	e59f0014 	ldr	r0, [pc, #20]	; 17da0 <CUSBGamePadDevice::Configure()+0xa8>
   17d88:	eb0032a0 	bl	24810 <assertion_failed>
   17d8c:	00047fb8 	.word	0x00047fb8
   17d90:	00041988 	.word	0x00041988
   17d94:	0003f1c8 	.word	0x0003f1c8
   17d98:	00041980 	.word	0x00041980
   17d9c:	000419dc 	.word	0x000419dc
   17da0:	00040704 	.word	0x00040704

00017da4 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   17da4:	e92d4010 	push	{r4, lr}
   17da8:	e3a02000 	mov	r2, #0
   17dac:	e1a04000 	mov	r4, r0
   17db0:	ebffe8bb 	bl	120a4 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   17db4:	e3a03000 	mov	r3, #0
   17db8:	e59f1028 	ldr	r1, [pc, #40]	; 17de8 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x44>
   17dbc:	e2842f4a 	add	r2, r4, #296	; 0x128
   17dc0:	e5841000 	str	r1, [r4]
   17dc4:	e5843124 	str	r3, [r4, #292]	; 0x124
   17dc8:	e1a01003 	mov	r1, r3
   17dcc:	e1c230b0 	strh	r3, [r2]
   17dd0:	e2840024 	add	r0, r4, #36	; 0x24
   17dd4:	e584312c 	str	r3, [r4, #300]	; 0x12c
   17dd8:	e3a02c01 	mov	r2, #256	; 0x100
   17ddc:	eb004858 	bl	29f44 <memset>
   17de0:	e1a00004 	mov	r0, r4
   17de4:	e8bd8010 	pop	{r4, pc}
   17de8:	00041998 	.word	0x00041998

00017dec <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   17dec:	e92d4070 	push	{r4, r5, r6, lr}
   17df0:	e3a06000 	mov	r6, #0
   17df4:	e1a04000 	mov	r4, r0
   17df8:	e59f502c 	ldr	r5, [pc, #44]	; 17e2c <CUSBGamePadDevice::~CUSBGamePadDevice()+0x40>
   17dfc:	e5806124 	str	r6, [r0, #292]	; 0x124
   17e00:	e2853018 	add	r3, r5, #24
   17e04:	e5803000 	str	r3, [r0]
   17e08:	eb00355a 	bl	25378 <CDeviceNameService::Get()>
   17e0c:	e1a03006 	mov	r3, r6
   17e10:	e2851008 	add	r1, r5, #8
   17e14:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   17e18:	eb00357d 	bl	25414 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   17e1c:	e1a00004 	mov	r0, r4
   17e20:	ebffe8b3 	bl	120f4 <CUSBHIDDevice::~CUSBHIDDevice()>
   17e24:	e1a00004 	mov	r0, r4
   17e28:	e8bd8070 	pop	{r4, r5, r6, pc}
   17e2c:	00041980 	.word	0x00041980

00017e30 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   17e30:	e92d4010 	push	{r4, lr}
   17e34:	e1a04000 	mov	r4, r0
   17e38:	ebffffeb 	bl	17dec <CUSBGamePadDevice::~CUSBGamePadDevice()>
   17e3c:	e1a00004 	mov	r0, r4
   17e40:	e3a01e13 	mov	r1, #304	; 0x130
   17e44:	eb004c9c 	bl	2b0bc <operator delete(void*, unsigned int)>
   17e48:	e1a00004 	mov	r0, r4
   17e4c:	e8bd8010 	pop	{r4, pc}

00017e50 <CUSBString::CUSBString(CUSBDevice*)>:
   17e50:	e3a03000 	mov	r3, #0
   17e54:	e92d4070 	push	{r4, r5, r6, lr}
   17e58:	e880000a 	stm	r0, {r1, r3}
   17e5c:	e1a04000 	mov	r4, r0
   17e60:	e3a00010 	mov	r0, #16
   17e64:	eb004c86 	bl	2b084 <operator new(unsigned int)>
   17e68:	e1a05000 	mov	r5, r0
   17e6c:	eb003f40 	bl	27b74 <CString::CString()>
   17e70:	e5943000 	ldr	r3, [r4]
   17e74:	e5845008 	str	r5, [r4, #8]
   17e78:	e3530000 	cmp	r3, #0
   17e7c:	0a000001 	beq	17e88 <CUSBString::CUSBString(CUSBDevice*)+0x38>
   17e80:	e1a00004 	mov	r0, r4
   17e84:	e8bd8070 	pop	{r4, r5, r6, pc}
   17e88:	e3a02023 	mov	r2, #35	; 0x23
   17e8c:	e59f1004 	ldr	r1, [pc, #4]	; 17e98 <CUSBString::CUSBString(CUSBDevice*)+0x48>
   17e90:	e59f0004 	ldr	r0, [pc, #4]	; 17e9c <CUSBString::CUSBString(CUSBDevice*)+0x4c>
   17e94:	eb00325d 	bl	24810 <assertion_failed>
   17e98:	00041a1c 	.word	0x00041a1c
   17e9c:	0003fc00 	.word	0x0003fc00

00017ea0 <CUSBString::CUSBString(CUSBString*)>:
   17ea0:	e3a03000 	mov	r3, #0
   17ea4:	e92d4070 	push	{r4, r5, r6, lr}
   17ea8:	e5803004 	str	r3, [r0, #4]
   17eac:	e1a04000 	mov	r4, r0
   17eb0:	e3a00010 	mov	r0, #16
   17eb4:	e1a05001 	mov	r5, r1
   17eb8:	eb004c71 	bl	2b084 <operator new(unsigned int)>
   17ebc:	e1a06000 	mov	r6, r0
   17ec0:	eb003f2b 	bl	27b74 <CString::CString()>
   17ec4:	e3550000 	cmp	r5, #0
   17ec8:	e5846008 	str	r6, [r4, #8]
   17ecc:	0a000012 	beq	17f1c <CUSBString::CUSBString(CUSBString*)+0x7c>
   17ed0:	e895000c 	ldm	r5, {r2, r3}
   17ed4:	e3530000 	cmp	r3, #0
   17ed8:	e5842000 	str	r2, [r4]
   17edc:	0a000008 	beq	17f04 <CUSBString::CUSBString(CUSBString*)+0x64>
   17ee0:	e5d30000 	ldrb	r0, [r3]
   17ee4:	eb004c67 	bl	2b088 <operator new[](unsigned int)>
   17ee8:	e5840004 	str	r0, [r4, #4]
   17eec:	e5951004 	ldr	r1, [r5, #4]
   17ef0:	e5d12000 	ldrb	r2, [r1]
   17ef4:	eb004a89 	bl	2a920 <memcpy>
   17ef8:	e5943008 	ldr	r3, [r4, #8]
   17efc:	e3530000 	cmp	r3, #0
   17f00:	0a000009 	beq	17f2c <CUSBString::CUSBString(CUSBString*)+0x8c>
   17f04:	e5953008 	ldr	r3, [r5, #8]
   17f08:	e3530000 	cmp	r3, #0
   17f0c:	0a00000a 	beq	17f3c <CUSBString::CUSBString(CUSBString*)+0x9c>
   17f10:	e5843008 	str	r3, [r4, #8]
   17f14:	e1a00004 	mov	r0, r4
   17f18:	e8bd8070 	pop	{r4, r5, r6, pc}
   17f1c:	e3a0202b 	mov	r2, #43	; 0x2b
   17f20:	e59f1024 	ldr	r1, [pc, #36]	; 17f4c <CUSBString::CUSBString(CUSBString*)+0xac>
   17f24:	e59f0024 	ldr	r0, [pc, #36]	; 17f50 <CUSBString::CUSBString(CUSBString*)+0xb0>
   17f28:	eb003238 	bl	24810 <assertion_failed>
   17f2c:	e3a02035 	mov	r2, #53	; 0x35
   17f30:	e59f1014 	ldr	r1, [pc, #20]	; 17f4c <CUSBString::CUSBString(CUSBString*)+0xac>
   17f34:	e59f0018 	ldr	r0, [pc, #24]	; 17f54 <CUSBString::CUSBString(CUSBString*)+0xb4>
   17f38:	eb003234 	bl	24810 <assertion_failed>
   17f3c:	e3a02036 	mov	r2, #54	; 0x36
   17f40:	e59f1004 	ldr	r1, [pc, #4]	; 17f4c <CUSBString::CUSBString(CUSBString*)+0xac>
   17f44:	e59f000c 	ldr	r0, [pc, #12]	; 17f58 <CUSBString::CUSBString(CUSBString*)+0xb8>
   17f48:	eb003230 	bl	24810 <assertion_failed>
   17f4c:	00041a1c 	.word	0x00041a1c
   17f50:	000400f8 	.word	0x000400f8
   17f54:	00041a2c 	.word	0x00041a2c
   17f58:	00041a3c 	.word	0x00041a3c

00017f5c <CUSBString::~CUSBString()>:
   17f5c:	e92d4010 	push	{r4, lr}
   17f60:	e1a04000 	mov	r4, r0
   17f64:	e5900008 	ldr	r0, [r0, #8]
   17f68:	e3500000 	cmp	r0, #0
   17f6c:	0a000002 	beq	17f7c <CUSBString::~CUSBString()+0x20>
   17f70:	e5903000 	ldr	r3, [r0]
   17f74:	e5933004 	ldr	r3, [r3, #4]
   17f78:	e12fff33 	blx	r3
   17f7c:	e3a03000 	mov	r3, #0
   17f80:	e5940004 	ldr	r0, [r4, #4]
   17f84:	e5843008 	str	r3, [r4, #8]
   17f88:	e1500003 	cmp	r0, r3
   17f8c:	0a000000 	beq	17f94 <CUSBString::~CUSBString()+0x38>
   17f90:	eb004c43 	bl	2b0a4 <operator delete[](void*)>
   17f94:	e1a00004 	mov	r0, r4
   17f98:	e8bd8010 	pop	{r4, pc}

00017f9c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   17f9c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fa0:	e2516000 	subs	r6, r1, #0
   17fa4:	e28db020 	add	fp, sp, #32
   17fa8:	e24dd014 	sub	sp, sp, #20
   17fac:	0a000052 	beq	180fc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x160>
   17fb0:	e1a04000 	mov	r4, r0
   17fb4:	e5900004 	ldr	r0, [r0, #4]
   17fb8:	e1a07002 	mov	r7, r2
   17fbc:	e3500000 	cmp	r0, #0
   17fc0:	0a000000 	beq	17fc8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   17fc4:	eb004c36 	bl	2b0a4 <operator delete[](void*)>
   17fc8:	e3a00004 	mov	r0, #4
   17fcc:	eb004c2d 	bl	2b088 <operator new[](unsigned int)>
   17fd0:	e5943000 	ldr	r3, [r4]
   17fd4:	e5840004 	str	r0, [r4, #4]
   17fd8:	e3530000 	cmp	r3, #0
   17fdc:	0a00004a 	beq	1810c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x170>
   17fe0:	e1a00003 	mov	r0, r3
   17fe4:	ebffd8bc 	bl	e2dc <CUSBDevice::GetHost() const>
   17fe8:	e1a05000 	mov	r5, r0
   17fec:	e5940000 	ldr	r0, [r4]
   17ff0:	ebffd8ae 	bl	e2b0 <CUSBDevice::GetEndpoint0() const>
   17ff4:	e3a08080 	mov	r8, #128	; 0x80
   17ff8:	e3a02004 	mov	r2, #4
   17ffc:	e5943004 	ldr	r3, [r4, #4]
   18000:	e1a01000 	mov	r1, r0
   18004:	e98d0104 	stmib	sp, {r2, r8}
   18008:	e58d3000 	str	r3, [sp]
   1800c:	e58d700c 	str	r7, [sp, #12]
   18010:	e1a00005 	mov	r0, r5
   18014:	e1a03006 	mov	r3, r6
   18018:	e3a02003 	mov	r2, #3
   1801c:	ebffea3d 	bl	12918 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   18020:	e3500000 	cmp	r0, #0
   18024:	ba000008 	blt	1804c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   18028:	e5940004 	ldr	r0, [r4, #4]
   1802c:	e5d05000 	ldrb	r5, [r0]
   18030:	e3550001 	cmp	r5, #1
   18034:	da000004 	ble	1804c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   18038:	e3150001 	tst	r5, #1
   1803c:	1a000002 	bne	1804c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   18040:	e5d09001 	ldrb	r9, [r0, #1]
   18044:	e3590003 	cmp	r9, #3
   18048:	0a000002 	beq	18058 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xbc>
   1804c:	e3a00000 	mov	r0, #0
   18050:	e24bd020 	sub	sp, fp, #32
   18054:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18058:	e3550004 	cmp	r5, #4
   1805c:	ca00002e 	bgt	1811c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x180>
   18060:	e3550002 	cmp	r5, #2
   18064:	0a000049 	beq	18190 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1f4>
   18068:	e2455002 	sub	r5, r5, #2
   1806c:	e1a0e0c5 	asr	lr, r5, #1
   18070:	e28e3008 	add	r3, lr, #8
   18074:	e3c33007 	bic	r3, r3, #7
   18078:	e35e0000 	cmp	lr, #0
   1807c:	e04dd003 	sub	sp, sp, r3
   18080:	e28d6010 	add	r6, sp, #16
   18084:	13a02000 	movne	r2, #0
   18088:	128d100f 	addne	r1, sp, #15
   1808c:	0a00000a 	beq	180bc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x120>
   18090:	e080c082 	add	ip, r0, r2, lsl #1
   18094:	e5dc3002 	ldrb	r3, [ip, #2]
   18098:	e5dcc003 	ldrb	ip, [ip, #3]
   1809c:	e2822001 	add	r2, r2, #1
   180a0:	e183340c 	orr	r3, r3, ip, lsl #8
   180a4:	e243c020 	sub	ip, r3, #32
   180a8:	e35c005e 	cmp	ip, #94	; 0x5e
   180ac:	83a0305f 	movhi	r3, #95	; 0x5f
   180b0:	e15e0002 	cmp	lr, r2
   180b4:	e5e13001 	strb	r3, [r1, #1]!
   180b8:	1afffff4 	bne	18090 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xf4>
   180bc:	e3a03000 	mov	r3, #0
   180c0:	e5940008 	ldr	r0, [r4, #8]
   180c4:	e7c630c5 	strb	r3, [r6, r5, asr #1]
   180c8:	e1500003 	cmp	r0, r3
   180cc:	0a000002 	beq	180dc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x140>
   180d0:	e5903000 	ldr	r3, [r0]
   180d4:	e5933004 	ldr	r3, [r3, #4]
   180d8:	e12fff33 	blx	r3
   180dc:	e3a00010 	mov	r0, #16
   180e0:	eb004be7 	bl	2b084 <operator new(unsigned int)>
   180e4:	e1a05000 	mov	r5, r0
   180e8:	e1a01006 	mov	r1, r6
   180ec:	eb003ea6 	bl	27b8c <CString::CString(char const*)>
   180f0:	e5845008 	str	r5, [r4, #8]
   180f4:	e3a00001 	mov	r0, #1
   180f8:	eaffffd4 	b	18050 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   180fc:	e3a02047 	mov	r2, #71	; 0x47
   18100:	e59f1098 	ldr	r1, [pc, #152]	; 181a0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x204>
   18104:	e59f0098 	ldr	r0, [pc, #152]	; 181a4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x208>
   18108:	eb0031c0 	bl	24810 <assertion_failed>
   1810c:	e3a0204d 	mov	r2, #77	; 0x4d
   18110:	e59f1088 	ldr	r1, [pc, #136]	; 181a0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x204>
   18114:	e59f008c 	ldr	r0, [pc, #140]	; 181a8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x20c>
   18118:	eb0031bc 	bl	24810 <assertion_failed>
   1811c:	e3a01002 	mov	r1, #2
   18120:	eb004be5 	bl	2b0bc <operator delete(void*, unsigned int)>
   18124:	e1a00005 	mov	r0, r5
   18128:	eb004bd6 	bl	2b088 <operator new[](unsigned int)>
   1812c:	e5840004 	str	r0, [r4, #4]
   18130:	e5940000 	ldr	r0, [r4]
   18134:	ebffd868 	bl	e2dc <CUSBDevice::GetHost() const>
   18138:	e1a0a000 	mov	sl, r0
   1813c:	e5940000 	ldr	r0, [r4]
   18140:	ebffd85a 	bl	e2b0 <CUSBDevice::GetEndpoint0() const>
   18144:	e594c004 	ldr	ip, [r4, #4]
   18148:	e1a01000 	mov	r1, r0
   1814c:	e58d700c 	str	r7, [sp, #12]
   18150:	e1a0000a 	mov	r0, sl
   18154:	e98d0120 	stmib	sp, {r5, r8}
   18158:	e1a03006 	mov	r3, r6
   1815c:	e1a02009 	mov	r2, r9
   18160:	e58dc000 	str	ip, [sp]
   18164:	ebffe9eb 	bl	12918 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   18168:	e1550000 	cmp	r5, r0
   1816c:	1affffb6 	bne	1804c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   18170:	e5940004 	ldr	r0, [r4, #4]
   18174:	e5d03000 	ldrb	r3, [r0]
   18178:	e1530005 	cmp	r3, r5
   1817c:	1affffb2 	bne	1804c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   18180:	e5d03001 	ldrb	r3, [r0, #1]
   18184:	e3530003 	cmp	r3, #3
   18188:	1affffaf 	bne	1804c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   1818c:	eaffffb5 	b	18068 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xcc>
   18190:	e3a02075 	mov	r2, #117	; 0x75
   18194:	e59f1004 	ldr	r1, [pc, #4]	; 181a0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x204>
   18198:	e59f000c 	ldr	r0, [pc, #12]	; 181ac <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x210>
   1819c:	eb00319b 	bl	24810 <assertion_failed>
   181a0:	00041a1c 	.word	0x00041a1c
   181a4:	00041a54 	.word	0x00041a54
   181a8:	0003fc00 	.word	0x0003fc00
   181ac:	00041a60 	.word	0x00041a60

000181b0 <CUSBString::Get() const>:
   181b0:	e5900008 	ldr	r0, [r0, #8]
   181b4:	ea003e84 	b	27bcc <CString::operator char const*() const>

000181b8 <CUSBString::GetLanguageID()>:
   181b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   181bc:	e1a05000 	mov	r5, r0
   181c0:	e24dd010 	sub	sp, sp, #16
   181c4:	e3a00004 	mov	r0, #4
   181c8:	eb004bae 	bl	2b088 <operator new[](unsigned int)>
   181cc:	e1a04000 	mov	r4, r0
   181d0:	e5950000 	ldr	r0, [r5]
   181d4:	e3500000 	cmp	r0, #0
   181d8:	0a00004c 	beq	18310 <CUSBString::GetLanguageID()+0x158>
   181dc:	ebffd83e 	bl	e2dc <CUSBDevice::GetHost() const>
   181e0:	e1a06000 	mov	r6, r0
   181e4:	e5950000 	ldr	r0, [r5]
   181e8:	ebffd830 	bl	e2b0 <CUSBDevice::GetEndpoint0() const>
   181ec:	e3a07080 	mov	r7, #128	; 0x80
   181f0:	e3a03000 	mov	r3, #0
   181f4:	e3a02004 	mov	r2, #4
   181f8:	e1a01000 	mov	r1, r0
   181fc:	e98d0084 	stmib	sp, {r2, r7}
   18200:	e58d4000 	str	r4, [sp]
   18204:	e1a00006 	mov	r0, r6
   18208:	e58d300c 	str	r3, [sp, #12]
   1820c:	e3a02003 	mov	r2, #3
   18210:	ebffe9c0 	bl	12918 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   18214:	e3500000 	cmp	r0, #0
   18218:	ba000002 	blt	18228 <CUSBString::GetLanguageID()+0x70>
   1821c:	e5d46000 	ldrb	r6, [r4]
   18220:	e3560003 	cmp	r6, #3
   18224:	ca000005 	bgt	18240 <CUSBString::GetLanguageID()+0x88>
   18228:	e1a00004 	mov	r0, r4
   1822c:	eb004b9c 	bl	2b0a4 <operator delete[](void*)>
   18230:	e59f50f4 	ldr	r5, [pc, #244]	; 1832c <CUSBString::GetLanguageID()+0x174>
   18234:	e1a00005 	mov	r0, r5
   18238:	e28dd010 	add	sp, sp, #16
   1823c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18240:	e2168001 	ands	r8, r6, #1
   18244:	1afffff7 	bne	18228 <CUSBString::GetLanguageID()+0x70>
   18248:	e5d49001 	ldrb	r9, [r4, #1]
   1824c:	e3590003 	cmp	r9, #3
   18250:	1afffff4 	bne	18228 <CUSBString::GetLanguageID()+0x70>
   18254:	e3560004 	cmp	r6, #4
   18258:	0a000019 	beq	182c4 <CUSBString::GetLanguageID()+0x10c>
   1825c:	e1a00004 	mov	r0, r4
   18260:	eb004b8f 	bl	2b0a4 <operator delete[](void*)>
   18264:	e1a00006 	mov	r0, r6
   18268:	eb004b86 	bl	2b088 <operator new[](unsigned int)>
   1826c:	e1a04000 	mov	r4, r0
   18270:	e5950000 	ldr	r0, [r5]
   18274:	ebffd818 	bl	e2dc <CUSBDevice::GetHost() const>
   18278:	e1a0a000 	mov	sl, r0
   1827c:	e5950000 	ldr	r0, [r5]
   18280:	ebffd80a 	bl	e2b0 <CUSBDevice::GetEndpoint0() const>
   18284:	e58d4000 	str	r4, [sp]
   18288:	e1a01000 	mov	r1, r0
   1828c:	e58d800c 	str	r8, [sp, #12]
   18290:	e1a0000a 	mov	r0, sl
   18294:	e98d00c0 	stmib	sp, {r6, r7}
   18298:	e1a03008 	mov	r3, r8
   1829c:	e1a02009 	mov	r2, r9
   182a0:	ebffe99c 	bl	12918 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   182a4:	e1560000 	cmp	r6, r0
   182a8:	1affffde 	bne	18228 <CUSBString::GetLanguageID()+0x70>
   182ac:	e5d43000 	ldrb	r3, [r4]
   182b0:	e1530006 	cmp	r3, r6
   182b4:	1affffdb 	bne	18228 <CUSBString::GetLanguageID()+0x70>
   182b8:	e5d43001 	ldrb	r3, [r4, #1]
   182bc:	e3530003 	cmp	r3, #3
   182c0:	1affffd8 	bne	18228 <CUSBString::GetLanguageID()+0x70>
   182c4:	e3a02000 	mov	r2, #0
   182c8:	e2466002 	sub	r6, r6, #2
   182cc:	e59f5058 	ldr	r5, [pc, #88]	; 1832c <CUSBString::GetLanguageID()+0x174>
   182d0:	e1a060c6 	asr	r6, r6, #1
   182d4:	e0841082 	add	r1, r4, r2, lsl #1
   182d8:	e5d13002 	ldrb	r3, [r1, #2]
   182dc:	e5d11003 	ldrb	r1, [r1, #3]
   182e0:	e1833401 	orr	r3, r3, r1, lsl #8
   182e4:	e1530005 	cmp	r3, r5
   182e8:	0a00000c 	beq	18320 <CUSBString::GetLanguageID()+0x168>
   182ec:	e2822001 	add	r2, r2, #1
   182f0:	e1560002 	cmp	r6, r2
   182f4:	8afffff6 	bhi	182d4 <CUSBString::GetLanguageID()+0x11c>
   182f8:	e5d43002 	ldrb	r3, [r4, #2]
   182fc:	e5d42003 	ldrb	r2, [r4, #3]
   18300:	e1a00004 	mov	r0, r4
   18304:	e1835402 	orr	r5, r3, r2, lsl #8
   18308:	eb004b65 	bl	2b0a4 <operator delete[](void*)>
   1830c:	eaffffc8 	b	18234 <CUSBString::GetLanguageID()+0x7c>
   18310:	e3a0209a 	mov	r2, #154	; 0x9a
   18314:	e59f1014 	ldr	r1, [pc, #20]	; 18330 <CUSBString::GetLanguageID()+0x178>
   18318:	e59f0014 	ldr	r0, [pc, #20]	; 18334 <CUSBString::GetLanguageID()+0x17c>
   1831c:	eb00313b 	bl	24810 <assertion_failed>
   18320:	e1a00004 	mov	r0, r4
   18324:	eb004b5e 	bl	2b0a4 <operator delete[](void*)>
   18328:	eaffffc1 	b	18234 <CUSBString::GetLanguageID()+0x7c>
   1832c:	00000409 	.word	0x00000409
   18330:	00041a1c 	.word	0x00041a1c
   18334:	0003fc00 	.word	0x0003fc00

00018338 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   18338:	e92d4010 	push	{r4, lr}
   1833c:	e3a03000 	mov	r3, #0
   18340:	e1a04000 	mov	r4, r0
   18344:	e2800014 	add	r0, r0, #20
   18348:	e5843000 	str	r3, [r4]
   1834c:	e5843004 	str	r3, [r4, #4]
   18350:	e5843008 	str	r3, [r4, #8]
   18354:	e5c4300c 	strb	r3, [r4, #12]
   18358:	e5c4300d 	strb	r3, [r4, #13]
   1835c:	e5843010 	str	r3, [r4, #16]
   18360:	eb000180 	bl	18968 <CKeyMap::CKeyMap()>
   18364:	e1a00004 	mov	r0, r4
   18368:	e8bd8010 	pop	{r4, pc}

0001836c <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   1836c:	e92d4010 	push	{r4, lr}
   18370:	e3a03000 	mov	r3, #0
   18374:	e1a04000 	mov	r4, r0
   18378:	e2800014 	add	r0, r0, #20
   1837c:	e5843000 	str	r3, [r4]
   18380:	e5843004 	str	r3, [r4, #4]
   18384:	e5843008 	str	r3, [r4, #8]
   18388:	eb0000b2 	bl	18658 <CKeyMap::~CKeyMap()>
   1838c:	e1a00004 	mov	r0, r4
   18390:	e8bd8010 	pop	{r4, pc}

00018394 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   18394:	e3510000 	cmp	r1, #0
   18398:	0a000001 	beq	183a4 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x10>
   1839c:	e5801000 	str	r1, [r0]
   183a0:	e12fff1e 	bx	lr
   183a4:	e92d4010 	push	{r4, lr}
   183a8:	e3a0202f 	mov	r2, #47	; 0x2f
   183ac:	e59f1004 	ldr	r1, [pc, #4]	; 183b8 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x24>
   183b0:	e59f0004 	ldr	r0, [pc, #4]	; 183bc <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x28>
   183b4:	eb003115 	bl	24810 <assertion_failed>
   183b8:	00041a7c 	.word	0x00041a7c
   183bc:	00041a94 	.word	0x00041a94

000183c0 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   183c0:	e3510000 	cmp	r1, #0
   183c4:	0a000001 	beq	183d0 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x10>
   183c8:	e5801004 	str	r1, [r0, #4]
   183cc:	e12fff1e 	bx	lr
   183d0:	e92d4010 	push	{r4, lr}
   183d4:	e3a02035 	mov	r2, #53	; 0x35
   183d8:	e59f1004 	ldr	r1, [pc, #4]	; 183e4 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x24>
   183dc:	e59f0004 	ldr	r0, [pc, #4]	; 183e8 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x28>
   183e0:	eb00310a 	bl	24810 <assertion_failed>
   183e4:	00041a7c 	.word	0x00041a7c
   183e8:	00041aac 	.word	0x00041aac

000183ec <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   183ec:	e3510000 	cmp	r1, #0
   183f0:	0a000001 	beq	183fc <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x10>
   183f4:	e5801008 	str	r1, [r0, #8]
   183f8:	e12fff1e 	bx	lr
   183fc:	e92d4010 	push	{r4, lr}
   18400:	e3a0203b 	mov	r2, #59	; 0x3b
   18404:	e59f1004 	ldr	r1, [pc, #4]	; 18410 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x24>
   18408:	e59f0004 	ldr	r0, [pc, #4]	; 18414 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x28>
   1840c:	eb0030ff 	bl	24810 <assertion_failed>
   18410:	00041a7c 	.word	0x00041a7c
   18414:	00041ac8 	.word	0x00041ac8

00018418 <CKeyboardBehaviour::GetLEDStatus() const>:
   18418:	e2800014 	add	r0, r0, #20
   1841c:	ea000124 	b	188b4 <CKeyMap::GetLEDStatus() const>

00018420 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   18420:	e92d4070 	push	{r4, r5, r6, lr}
   18424:	e5d0600c 	ldrb	r6, [r0, #12]
   18428:	e2805014 	add	r5, r0, #20
   1842c:	e24dd008 	sub	sp, sp, #8
   18430:	e1a04000 	mov	r4, r0
   18434:	e1a02006 	mov	r2, r6
   18438:	e1a00005 	mov	r0, r5
   1843c:	eb0000a9 	bl	186e8 <CKeyMap::Translate(unsigned char, unsigned char)>
   18440:	e2403e13 	sub	r3, r0, #304	; 0x130
   18444:	e2433003 	sub	r3, r3, #3
   18448:	e353000f 	cmp	r3, #15
   1844c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   18450:	ea00001d 	b	184cc <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xac>
   18454:	000184ac 	.word	0x000184ac
   18458:	000184ac 	.word	0x000184ac
   1845c:	000184ac 	.word	0x000184ac
   18460:	00018494 	.word	0x00018494
   18464:	00018494 	.word	0x00018494
   18468:	00018494 	.word	0x00018494
   1846c:	00018494 	.word	0x00018494
   18470:	00018494 	.word	0x00018494
   18474:	00018494 	.word	0x00018494
   18478:	00018494 	.word	0x00018494
   1847c:	00018494 	.word	0x00018494
   18480:	00018494 	.word	0x00018494
   18484:	00018494 	.word	0x00018494
   18488:	00018494 	.word	0x00018494
   1848c:	00018494 	.word	0x00018494
   18490:	000184b4 	.word	0x000184b4
   18494:	e5943004 	ldr	r3, [r4, #4]
   18498:	e3530000 	cmp	r3, #0
   1849c:	0a000002 	beq	184ac <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   184a0:	e2400f4d 	sub	r0, r0, #308	; 0x134
   184a4:	e2400002 	sub	r0, r0, #2
   184a8:	e12fff33 	blx	r3
   184ac:	e28dd008 	add	sp, sp, #8
   184b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   184b4:	e5943008 	ldr	r3, [r4, #8]
   184b8:	e3530000 	cmp	r3, #0
   184bc:	0afffffa 	beq	184ac <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   184c0:	e12fff33 	blx	r3
   184c4:	e28dd008 	add	sp, sp, #8
   184c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   184cc:	e1a01000 	mov	r1, r0
   184d0:	e1a02006 	mov	r2, r6
   184d4:	e1a00005 	mov	r0, r5
   184d8:	e28d3004 	add	r3, sp, #4
   184dc:	eb0000c4 	bl	187f4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   184e0:	e3500000 	cmp	r0, #0
   184e4:	0afffff0 	beq	184ac <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   184e8:	e5943000 	ldr	r3, [r4]
   184ec:	e3530000 	cmp	r3, #0
   184f0:	0affffed 	beq	184ac <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   184f4:	e12fff33 	blx	r3
   184f8:	e28dd008 	add	sp, sp, #8
   184fc:	e8bd8070 	pop	{r4, r5, r6, pc}

00018500 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   18500:	e241c080 	sub	ip, r1, #128	; 0x80
   18504:	e6ef307c 	uxtb	r3, ip
   18508:	e3530007 	cmp	r3, #7
   1850c:	e1a03000 	mov	r3, r0
   18510:	8a000004 	bhi	18528 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x28>
   18514:	e3a01001 	mov	r1, #1
   18518:	e5d0200c 	ldrb	r2, [r0, #12]
   1851c:	e182cc11 	orr	ip, r2, r1, lsl ip
   18520:	e5c0c00c 	strb	ip, [r0, #12]
   18524:	e12fff1e 	bx	lr
   18528:	e5d0c00d 	ldrb	ip, [r0, #13]
   1852c:	e15c0001 	cmp	ip, r1
   18530:	012fff1e 	bxeq	lr
   18534:	e5c3100d 	strb	r1, [r3, #13]
   18538:	eaffffb8 	b	18420 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

0001853c <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   1853c:	e2413080 	sub	r3, r1, #128	; 0x80
   18540:	e6ef2073 	uxtb	r2, r3
   18544:	e3520007 	cmp	r2, #7
   18548:	8a000004 	bhi	18560 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x24>
   1854c:	e3a01001 	mov	r1, #1
   18550:	e5d0200c 	ldrb	r2, [r0, #12]
   18554:	e1c23311 	bic	r3, r2, r1, lsl r3
   18558:	e5c0300c 	strb	r3, [r0, #12]
   1855c:	e12fff1e 	bx	lr
   18560:	e5d0300d 	ldrb	r3, [r0, #13]
   18564:	e1530001 	cmp	r3, r1
   18568:	112fff1e 	bxne	lr
   1856c:	e5903010 	ldr	r3, [r0, #16]
   18570:	e92d4010 	push	{r4, lr}
   18574:	e3530000 	cmp	r3, #0
   18578:	e1a04000 	mov	r4, r0
   1857c:	1a000002 	bne	1858c <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   18580:	e3a03000 	mov	r3, #0
   18584:	e5c4300d 	strb	r3, [r4, #13]
   18588:	e8bd8010 	pop	{r4, pc}
   1858c:	eb00465f 	bl	29f10 <CTimer::Get()>
   18590:	e5941010 	ldr	r1, [r4, #16]
   18594:	eb0044ec 	bl	2994c <CTimer::CancelKernelTimer(unsigned int)>
   18598:	e3a03000 	mov	r3, #0
   1859c:	e5843010 	str	r3, [r4, #16]
   185a0:	eafffff6 	b	18580 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

000185a4 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   185a4:	e92d4010 	push	{r4, lr}
   185a8:	e5903010 	ldr	r3, [r0, #16]
   185ac:	e24dd008 	sub	sp, sp, #8
   185b0:	e1530001 	cmp	r3, r1
   185b4:	1a000013 	bne	18608 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x64>
   185b8:	e5d0100d 	ldrb	r1, [r0, #13]
   185bc:	e1a04000 	mov	r4, r0
   185c0:	e3510000 	cmp	r1, #0
   185c4:	1a000001 	bne	185d0 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x2c>
   185c8:	e28dd008 	add	sp, sp, #8
   185cc:	e8bd8010 	pop	{r4, pc}
   185d0:	ebffff92 	bl	18420 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   185d4:	eb00464d 	bl	29f10 <CTimer::Get()>
   185d8:	e58d4000 	str	r4, [sp]
   185dc:	e3a03000 	mov	r3, #0
   185e0:	e59f2030 	ldr	r2, [pc, #48]	; 18618 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x74>
   185e4:	e3a01008 	mov	r1, #8
   185e8:	eb004488 	bl	29810 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   185ec:	e3500000 	cmp	r0, #0
   185f0:	e5840010 	str	r0, [r4, #16]
   185f4:	1afffff3 	bne	185c8 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x24>
   185f8:	e3a020b7 	mov	r2, #183	; 0xb7
   185fc:	e59f1018 	ldr	r1, [pc, #24]	; 1861c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   18600:	e59f0018 	ldr	r0, [pc, #24]	; 18620 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x7c>
   18604:	eb003081 	bl	24810 <assertion_failed>
   18608:	e3a020b0 	mov	r2, #176	; 0xb0
   1860c:	e59f1008 	ldr	r1, [pc, #8]	; 1861c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   18610:	e59f000c 	ldr	r0, [pc, #12]	; 18624 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x80>
   18614:	eb00307d 	bl	24810 <assertion_failed>
   18618:	00018628 	.word	0x00018628
   1861c:	00041a7c 	.word	0x00041a7c
   18620:	00040f8c 	.word	0x00040f8c
   18624:	00041ae0 	.word	0x00041ae0

00018628 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   18628:	e3520000 	cmp	r2, #0
   1862c:	0a000002 	beq	1863c <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x14>
   18630:	e1a01000 	mov	r1, r0
   18634:	e1a00002 	mov	r0, r2
   18638:	eaffffd9 	b	185a4 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   1863c:	e92d4010 	push	{r4, lr}
   18640:	e3a020be 	mov	r2, #190	; 0xbe
   18644:	e59f1004 	ldr	r1, [pc, #4]	; 18650 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x28>
   18648:	e59f0004 	ldr	r0, [pc, #4]	; 18654 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x2c>
   1864c:	eb00306f 	bl	24810 <assertion_failed>
   18650:	00041a7c 	.word	0x00041a7c
   18654:	0003f230 	.word	0x0003f230

00018658 <CKeyMap::~CKeyMap()>:
   18658:	e12fff1e 	bx	lr

0001865c <CKeyMap::ClearTable(unsigned char)>:
   1865c:	e3510003 	cmp	r1, #3
   18660:	ca000009 	bgt	1868c <CKeyMap::ClearTable(unsigned char)+0x30>
   18664:	e3a0c000 	mov	ip, #0
   18668:	e1a03081 	lsl	r3, r1, #1
   1866c:	e2832b01 	add	r2, r3, #1024	; 0x400
   18670:	e0802002 	add	r2, r0, r2
   18674:	e0803003 	add	r3, r0, r3
   18678:	e0c3c0b8 	strh	ip, [r3], #8
   1867c:	e1530002 	cmp	r3, r2
   18680:	1afffffc 	bne	18678 <CKeyMap::ClearTable(unsigned char)+0x1c>
   18684:	e3a00001 	mov	r0, #1
   18688:	e12fff1e 	bx	lr
   1868c:	e3a00000 	mov	r0, #0
   18690:	e12fff1e 	bx	lr

00018694 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   18694:	e16fcf12 	clz	ip, r2
   18698:	e1a0c2ac 	lsr	ip, ip, #5
   1869c:	e3510003 	cmp	r1, #3
   186a0:	c38cc001 	orrgt	ip, ip, #1
   186a4:	e35c0000 	cmp	ip, #0
   186a8:	1a00000a 	bne	186d8 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>
   186ac:	e352007f 	cmp	r2, #127	; 0x7f
   186b0:	ca000009 	bgt	186dc <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x48>
   186b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   186b8:	e59fe024 	ldr	lr, [pc, #36]	; 186e4 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x50>
   186bc:	e153000e 	cmp	r3, lr
   186c0:	d3a0c001 	movle	ip, #1
   186c4:	d0811102 	addle	r1, r1, r2, lsl #2
   186c8:	d1a01081 	lslle	r1, r1, #1
   186cc:	d18030b1 	strhle	r3, [r0, r1]
   186d0:	e1a0000c 	mov	r0, ip
   186d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   186d8:	e3a0c000 	mov	ip, #0
   186dc:	e1a0000c 	mov	r0, ip
   186e0:	e12fff1e 	bx	lr
   186e4:	00000132 	.word	0x00000132

000186e8 <CKeyMap::Translate(unsigned char, unsigned char)>:
   186e8:	e6af3071 	sxtb	r3, r1
   186ec:	e3530000 	cmp	r3, #0
   186f0:	da000023 	ble	18784 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   186f4:	e1a03181 	lsl	r3, r1, #3
   186f8:	e19030b3 	ldrh	r3, [r0, r3]
   186fc:	e3530f42 	cmp	r3, #264	; 0x108
   18700:	0a000022 	beq	18790 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   18704:	e243cf43 	sub	ip, r3, #268	; 0x10c
   18708:	e24cc003 	sub	ip, ip, #3
   1870c:	e35c000b 	cmp	ip, #11
   18710:	8a000003 	bhi	18724 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   18714:	e3120004 	tst	r2, #4
   18718:	12833027 	addne	r3, r3, #39	; 0x27
   1871c:	16ff3073 	uxthne	r3, r3
   18720:	1a000018 	bne	18788 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   18724:	e312008c 	tst	r2, #140	; 0x8c
   18728:	1a000015 	bne	18784 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   1872c:	e2413053 	sub	r3, r1, #83	; 0x53
   18730:	e3530010 	cmp	r3, #16
   18734:	9a00001b 	bls	187a8 <CKeyMap::Translate(unsigned char, unsigned char)+0xc0>
   18738:	e3120040 	tst	r2, #64	; 0x40
   1873c:	0a000025 	beq	187d8 <CKeyMap::Translate(unsigned char, unsigned char)+0xf0>
   18740:	e3120022 	tst	r2, #34	; 0x22
   18744:	13a03003 	movne	r3, #3
   18748:	03a03002 	moveq	r3, #2
   1874c:	e0831101 	add	r1, r3, r1, lsl #2
   18750:	e1a01081 	lsl	r1, r1, #1
   18754:	e19030b1 	ldrh	r3, [r0, r1]
   18758:	e59f2088 	ldr	r2, [pc, #136]	; 187e8 <CKeyMap::Translate(unsigned char, unsigned char)+0x100>
   1875c:	e1530002 	cmp	r3, r2
   18760:	0a000017 	beq	187c4 <CKeyMap::Translate(unsigned char, unsigned char)+0xdc>
   18764:	e3530e12 	cmp	r3, #288	; 0x120
   18768:	0a000010 	beq	187b0 <CKeyMap::Translate(unsigned char, unsigned char)+0xc8>
   1876c:	e3530f47 	cmp	r3, #284	; 0x11c
   18770:	05d02400 	ldrbeq	r2, [r0, #1024]	; 0x400
   18774:	02833017 	addeq	r3, r3, #23
   18778:	02222001 	eoreq	r2, r2, #1
   1877c:	05c02400 	strbeq	r2, [r0, #1024]	; 0x400
   18780:	ea000000 	b	18788 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   18784:	e3a03000 	mov	r3, #0
   18788:	e1a00003 	mov	r0, r3
   1878c:	e12fff1e 	bx	lr
   18790:	e3120011 	tst	r2, #17
   18794:	0affffe2 	beq	18724 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   18798:	e3120004 	tst	r2, #4
   1879c:	159f3048 	ldrne	r3, [pc, #72]	; 187ec <CKeyMap::Translate(unsigned char, unsigned char)+0x104>
   187a0:	1afffff8 	bne	18788 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   187a4:	eaffffde 	b	18724 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   187a8:	e5d03401 	ldrb	r3, [r0, #1025]	; 0x401
   187ac:	eaffffe6 	b	1874c <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   187b0:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   187b4:	e3a03f4d 	mov	r3, #308	; 0x134
   187b8:	e2222001 	eor	r2, r2, #1
   187bc:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   187c0:	eafffff0 	b	18788 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   187c4:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   187c8:	e59f3020 	ldr	r3, [pc, #32]	; 187f0 <CKeyMap::Translate(unsigned char, unsigned char)+0x108>
   187cc:	e2222001 	eor	r2, r2, #1
   187d0:	e5c02402 	strb	r2, [r0, #1026]	; 0x402
   187d4:	eaffffeb 	b	18788 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   187d8:	e3120022 	tst	r2, #34	; 0x22
   187dc:	13a03001 	movne	r3, #1
   187e0:	03a03000 	moveq	r3, #0
   187e4:	eaffffd8 	b	1874c <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   187e8:	0000011e 	.word	0x0000011e
   187ec:	00000142 	.word	0x00000142
   187f0:	00000135 	.word	0x00000135

000187f4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   187f4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   187f8:	e241c021 	sub	ip, r1, #33	; 0x21
   187fc:	e59fe0a8 	ldr	lr, [pc, #168]	; 188ac <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb8>
   18800:	e6ffc07c 	uxth	ip, ip
   18804:	e15c000e 	cmp	ip, lr
   18808:	8a000025 	bhi	188a4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   1880c:	e241cc01 	sub	ip, r1, #256	; 0x100
   18810:	e6ffe07c 	uxth	lr, ip
   18814:	e35e0032 	cmp	lr, #50	; 0x32
   18818:	9a00001e 	bls	18898 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa4>
   1881c:	e3120011 	tst	r2, #17
   18820:	e6af2071 	sxtb	r2, r1
   18824:	0a000009 	beq	18850 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x5c>
   18828:	e6ef1071 	uxtb	r1, r1
   1882c:	e2412061 	sub	r2, r1, #97	; 0x61
   18830:	e3520019 	cmp	r2, #25
   18834:	8a00001a 	bhi	188a4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   18838:	e3a02000 	mov	r2, #0
   1883c:	e2411060 	sub	r1, r1, #96	; 0x60
   18840:	e5c31000 	strb	r1, [r3]
   18844:	e5c32001 	strb	r2, [r3, #1]
   18848:	e1a00003 	mov	r0, r3
   1884c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18850:	e5d00400 	ldrb	r0, [r0, #1024]	; 0x400
   18854:	e3500000 	cmp	r0, #0
   18858:	0a000009 	beq	18884 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   1885c:	e6ef1071 	uxtb	r1, r1
   18860:	e2410041 	sub	r0, r1, #65	; 0x41
   18864:	e3500019 	cmp	r0, #25
   18868:	92811020 	addls	r1, r1, #32
   1886c:	96af2071 	sxtbls	r2, r1
   18870:	9a000003 	bls	18884 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   18874:	e2410061 	sub	r0, r1, #97	; 0x61
   18878:	e3500019 	cmp	r0, #25
   1887c:	92411020 	subls	r1, r1, #32
   18880:	96af2071 	sxtbls	r2, r1
   18884:	e3a01000 	mov	r1, #0
   18888:	e5c32000 	strb	r2, [r3]
   1888c:	e5c31001 	strb	r1, [r3, #1]
   18890:	e1a00003 	mov	r0, r3
   18894:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18898:	e59f3010 	ldr	r3, [pc, #16]	; 188b0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xbc>
   1889c:	e793010c 	ldr	r0, [r3, ip, lsl #2]
   188a0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   188a4:	e3a00000 	mov	r0, #0
   188a8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   188ac:	00000111 	.word	0x00000111
   188b0:	00047fbc 	.word	0x00047fbc

000188b4 <CKeyMap::GetLEDStatus() const>:
   188b4:	e5d03400 	ldrb	r3, [r0, #1024]	; 0x400
   188b8:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   188bc:	e3530000 	cmp	r3, #0
   188c0:	13a03002 	movne	r3, #2
   188c4:	03a03000 	moveq	r3, #0
   188c8:	e3520000 	cmp	r2, #0
   188cc:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   188d0:	13833001 	orrne	r3, r3, #1
   188d4:	e3520000 	cmp	r2, #0
   188d8:	13833004 	orrne	r3, r3, #4
   188dc:	e1a00003 	mov	r0, r3
   188e0:	e12fff1e 	bx	lr

000188e4 <CKeyMap::LookupDefaultMap(char const*)>:
   188e4:	e92d4070 	push	{r4, r5, r6, lr}
   188e8:	e59f4064 	ldr	r4, [pc, #100]	; 18954 <CKeyMap::LookupDefaultMap(char const*)+0x70>
   188ec:	e1a06000 	mov	r6, r0
   188f0:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   188f4:	e3500000 	cmp	r0, #0
   188f8:	0a000013 	beq	1894c <CKeyMap::LookupDefaultMap(char const*)+0x68>
   188fc:	e3560000 	cmp	r6, #0
   18900:	13a05000 	movne	r5, #0
   18904:	128440d0 	addne	r4, r4, #208	; 0xd0
   18908:	1a000004 	bne	18920 <CKeyMap::LookupDefaultMap(char const*)+0x3c>
   1890c:	ea00000a 	b	1893c <CKeyMap::LookupDefaultMap(char const*)+0x58>
   18910:	e4940004 	ldr	r0, [r4], #4
   18914:	e2855001 	add	r5, r5, #1
   18918:	e3500000 	cmp	r0, #0
   1891c:	0a00000a 	beq	1894c <CKeyMap::LookupDefaultMap(char const*)+0x68>
   18920:	e1a01006 	mov	r1, r6
   18924:	eb0045e2 	bl	2a0b4 <strcmp>
   18928:	e3500000 	cmp	r0, #0
   1892c:	1afffff7 	bne	18910 <CKeyMap::LookupDefaultMap(char const*)+0x2c>
   18930:	e59f0020 	ldr	r0, [pc, #32]	; 18958 <CKeyMap::LookupDefaultMap(char const*)+0x74>
   18934:	e0800505 	add	r0, r0, r5, lsl #10
   18938:	e8bd8070 	pop	{r4, r5, r6, pc}
   1893c:	e59f2018 	ldr	r2, [pc, #24]	; 1895c <CKeyMap::LookupDefaultMap(char const*)+0x78>
   18940:	e59f1018 	ldr	r1, [pc, #24]	; 18960 <CKeyMap::LookupDefaultMap(char const*)+0x7c>
   18944:	e59f0018 	ldr	r0, [pc, #24]	; 18964 <CKeyMap::LookupDefaultMap(char const*)+0x80>
   18948:	eb002fb0 	bl	24810 <assertion_failed>
   1894c:	e3a00000 	mov	r0, #0
   18950:	e8bd8070 	pop	{r4, r5, r6, pc}
   18954:	00047fbc 	.word	0x00047fbc
   18958:	00041af4 	.word	0x00041af4
   1895c:	0000013f 	.word	0x0000013f
   18960:	000432f4 	.word	0x000432f4
   18964:	00043300 	.word	0x00043300

00018968 <CKeyMap::CKeyMap()>:
   18968:	e3a03000 	mov	r3, #0
   1896c:	e3a02001 	mov	r2, #1
   18970:	e92d4010 	push	{r4, lr}
   18974:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   18978:	e5c03400 	strb	r3, [r0, #1024]	; 0x400
   1897c:	e5c03402 	strb	r3, [r0, #1026]	; 0x402
   18980:	e1a04000 	mov	r4, r0
   18984:	eb003653 	bl	262d8 <CKernelOptions::Get()>
   18988:	eb003643 	bl	2629c <CKernelOptions::GetKeyMap() const>
   1898c:	e3500000 	cmp	r0, #0
   18990:	0a00000f 	beq	189d4 <CKeyMap::CKeyMap()+0x6c>
   18994:	ebffffd2 	bl	188e4 <CKeyMap::LookupDefaultMap(char const*)>
   18998:	e2501000 	subs	r1, r0, #0
   1899c:	0a000004 	beq	189b4 <CKeyMap::CKeyMap()+0x4c>
   189a0:	e3a02b01 	mov	r2, #1024	; 0x400
   189a4:	e1a00004 	mov	r0, r4
   189a8:	eb0047dc 	bl	2a920 <memcpy>
   189ac:	e1a00004 	mov	r0, r4
   189b0:	e8bd8010 	pop	{r4, pc}
   189b4:	e59f0028 	ldr	r0, [pc, #40]	; 189e4 <CKeyMap::CKeyMap()+0x7c>
   189b8:	ebffffc9 	bl	188e4 <CKeyMap::LookupDefaultMap(char const*)>
   189bc:	e2501000 	subs	r1, r0, #0
   189c0:	1afffff6 	bne	189a0 <CKeyMap::CKeyMap()+0x38>
   189c4:	e3a02080 	mov	r2, #128	; 0x80
   189c8:	e59f1018 	ldr	r1, [pc, #24]	; 189e8 <CKeyMap::CKeyMap()+0x80>
   189cc:	e59f0018 	ldr	r0, [pc, #24]	; 189ec <CKeyMap::CKeyMap()+0x84>
   189d0:	eb002f8e 	bl	24810 <assertion_failed>
   189d4:	e3a0207a 	mov	r2, #122	; 0x7a
   189d8:	e59f1008 	ldr	r1, [pc, #8]	; 189e8 <CKeyMap::CKeyMap()+0x80>
   189dc:	e59f000c 	ldr	r0, [pc, #12]	; 189f0 <CKeyMap::CKeyMap()+0x88>
   189e0:	eb002f8a 	bl	24810 <assertion_failed>
   189e4:	00043310 	.word	0x00043310
   189e8:	000432f4 	.word	0x000432f4
   189ec:	00043314 	.word	0x00043314
   189f0:	00043300 	.word	0x00043300

000189f4 <CMouseDevice::~CMouseDevice()>:
   189f4:	e92d4070 	push	{r4, r5, r6, lr}
   189f8:	e3a06000 	mov	r6, #0
   189fc:	e1a04000 	mov	r4, r0
   18a00:	e59f5034 	ldr	r5, [pc, #52]	; 18a3c <CMouseDevice::~CMouseDevice()+0x48>
   18a04:	e5806020 	str	r6, [r0, #32]
   18a08:	e2853008 	add	r3, r5, #8
   18a0c:	e5803000 	str	r3, [r0]
   18a10:	eb003258 	bl	25378 <CDeviceNameService::Get()>
   18a14:	e1a03006 	mov	r3, r6
   18a18:	e2851020 	add	r1, r5, #32
   18a1c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   18a20:	eb00327b 	bl	25414 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   18a24:	e2840004 	add	r0, r4, #4
   18a28:	eb00005f 	bl	18bac <CMouseBehaviour::~CMouseBehaviour()>
   18a2c:	e1a00004 	mov	r0, r4
   18a30:	eb003159 	bl	24f9c <CDevice::~CDevice()>
   18a34:	e1a00004 	mov	r0, r4
   18a38:	e8bd8070 	pop	{r4, r5, r6, pc}
   18a3c:	000433fc 	.word	0x000433fc

00018a40 <CMouseDevice::~CMouseDevice()>:
   18a40:	e92d4010 	push	{r4, lr}
   18a44:	e1a04000 	mov	r4, r0
   18a48:	ebffffe9 	bl	189f4 <CMouseDevice::~CMouseDevice()>
   18a4c:	e1a00004 	mov	r0, r4
   18a50:	e3a01028 	mov	r1, #40	; 0x28
   18a54:	eb004998 	bl	2b0bc <operator delete(void*, unsigned int)>
   18a58:	e1a00004 	mov	r0, r4
   18a5c:	e8bd8010 	pop	{r4, pc}

00018a60 <CMouseDevice::CMouseDevice()>:
   18a60:	e92d4070 	push	{r4, r5, r6, lr}
   18a64:	e1a04000 	mov	r4, r0
   18a68:	e24dd008 	sub	sp, sp, #8
   18a6c:	eb003158 	bl	24fd4 <CDevice::CDevice()>
   18a70:	e1a00004 	mov	r0, r4
   18a74:	e3a06000 	mov	r6, #0
   18a78:	e59f5044 	ldr	r5, [pc, #68]	; 18ac4 <CMouseDevice::CMouseDevice()+0x64>
   18a7c:	e2853008 	add	r3, r5, #8
   18a80:	e4803004 	str	r3, [r0], #4
   18a84:	eb00003e 	bl	18b84 <CMouseBehaviour::CMouseBehaviour()>
   18a88:	e59f2038 	ldr	r2, [pc, #56]	; 18ac8 <CMouseDevice::CMouseDevice()+0x68>
   18a8c:	e5846020 	str	r6, [r4, #32]
   18a90:	e5923000 	ldr	r3, [r2]
   18a94:	e5843024 	str	r3, [r4, #36]	; 0x24
   18a98:	e2833001 	add	r3, r3, #1
   18a9c:	e5823000 	str	r3, [r2]
   18aa0:	eb003234 	bl	25378 <CDeviceNameService::Get()>
   18aa4:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   18aa8:	e2851020 	add	r1, r5, #32
   18aac:	e58d6000 	str	r6, [sp]
   18ab0:	e1a03004 	mov	r3, r4
   18ab4:	eb00323c 	bl	253ac <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   18ab8:	e1a00004 	mov	r0, r4
   18abc:	e28dd008 	add	sp, sp, #8
   18ac0:	e8bd8070 	pop	{r4, r5, r6, pc}
   18ac4:	000433fc 	.word	0x000433fc
   18ac8:	000480a4 	.word	0x000480a4

00018acc <CMouseDevice::Setup(unsigned int, unsigned int)>:
   18acc:	e2800004 	add	r0, r0, #4
   18ad0:	ea000036 	b	18bb0 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

00018ad4 <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   18ad4:	e2800004 	add	r0, r0, #4
   18ad8:	ea00007c 	b	18cd0 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>

00018adc <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   18adc:	e2800004 	add	r0, r0, #4
   18ae0:	ea000106 	b	18f00 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

00018ae4 <CMouseDevice::ShowCursor(bool)>:
   18ae4:	e2800004 	add	r0, r0, #4
   18ae8:	ea000128 	b	18f90 <CMouseBehaviour::ShowCursor(bool)>

00018aec <CMouseDevice::UpdateCursor()>:
   18aec:	e5903020 	ldr	r3, [r0, #32]
   18af0:	e3530000 	cmp	r3, #0
   18af4:	112fff1e 	bxne	lr
   18af8:	e2800004 	add	r0, r0, #4
   18afc:	ea00013e 	b	18ffc <CMouseBehaviour::UpdateCursor()>

00018b00 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   18b00:	e5903020 	ldr	r3, [r0, #32]
   18b04:	e92d4010 	push	{r4, lr}
   18b08:	e3530000 	cmp	r3, #0
   18b0c:	1a000006 	bne	18b2c <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x2c>
   18b10:	e3510000 	cmp	r1, #0
   18b14:	e5801020 	str	r1, [r0, #32]
   18b18:	18bd8010 	popne	{r4, pc}
   18b1c:	e3a0204a 	mov	r2, #74	; 0x4a
   18b20:	e59f1014 	ldr	r1, [pc, #20]	; 18b3c <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x3c>
   18b24:	e59f0014 	ldr	r0, [pc, #20]	; 18b40 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x40>
   18b28:	eb002f38 	bl	24810 <assertion_failed>
   18b2c:	e3a02048 	mov	r2, #72	; 0x48
   18b30:	e59f1004 	ldr	r1, [pc, #4]	; 18b3c <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x3c>
   18b34:	e59f0008 	ldr	r0, [pc, #8]	; 18b44 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x44>
   18b38:	eb002f34 	bl	24810 <assertion_failed>
   18b3c:	00043424 	.word	0x00043424
   18b40:	00041a04 	.word	0x00041a04
   18b44:	000419ec 	.word	0x000419ec

00018b48 <CMouseDevice::ReportHandler(unsigned int, int, int)>:
   18b48:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18b4c:	e1a04000 	mov	r4, r0
   18b50:	e2800004 	add	r0, r0, #4
   18b54:	e1a07003 	mov	r7, r3
   18b58:	e1a05001 	mov	r5, r1
   18b5c:	e1a06002 	mov	r6, r2
   18b60:	eb00006c 	bl	18d18 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   18b64:	e5943020 	ldr	r3, [r4, #32]
   18b68:	e3530000 	cmp	r3, #0
   18b6c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   18b70:	e1a02007 	mov	r2, r7
   18b74:	e1a01006 	mov	r1, r6
   18b78:	e1a00005 	mov	r0, r5
   18b7c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   18b80:	e12fff13 	bx	r3

00018b84 <CMouseBehaviour::CMouseBehaviour()>:
   18b84:	e3a02000 	mov	r2, #0
   18b88:	e5802000 	str	r2, [r0]
   18b8c:	e5802004 	str	r2, [r0, #4]
   18b90:	e5802008 	str	r2, [r0, #8]
   18b94:	e580200c 	str	r2, [r0, #12]
   18b98:	e5c02010 	strb	r2, [r0, #16]
   18b9c:	e5c02011 	strb	r2, [r0, #17]
   18ba0:	e5802014 	str	r2, [r0, #20]
   18ba4:	e5802018 	str	r2, [r0, #24]
   18ba8:	e12fff1e 	bx	lr

00018bac <CMouseBehaviour::~CMouseBehaviour()>:
   18bac:	e12fff1e 	bx	lr

00018bb0 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   18bb0:	e92d4010 	push	{r4, lr}
   18bb4:	e5903000 	ldr	r3, [r0]
   18bb8:	e24dd038 	sub	sp, sp, #56	; 0x38
   18bbc:	e3530000 	cmp	r3, #0
   18bc0:	1a00002b 	bne	18c74 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xc4>
   18bc4:	e3510000 	cmp	r1, #0
   18bc8:	e5801000 	str	r1, [r0]
   18bcc:	0a00002c 	beq	18c84 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd4>
   18bd0:	e5904004 	ldr	r4, [r0, #4]
   18bd4:	e3540000 	cmp	r4, #0
   18bd8:	1a00002d 	bne	18c94 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xe4>
   18bdc:	e3520000 	cmp	r2, #0
   18be0:	e5802004 	str	r2, [r0, #4]
   18be4:	0a00002e 	beq	18ca4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf4>
   18be8:	e2811001 	add	r1, r1, #1
   18bec:	e2822001 	add	r2, r2, #1
   18bf0:	e1a020a2 	lsr	r2, r2, #1
   18bf4:	e1a010a1 	lsr	r1, r1, #1
   18bf8:	e5801008 	str	r1, [r0, #8]
   18bfc:	e580200c 	str	r2, [r0, #12]
   18c00:	e1a01004 	mov	r1, r4
   18c04:	e28d000c 	add	r0, sp, #12
   18c08:	eb002f21 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   18c0c:	e3a03018 	mov	r3, #24
   18c10:	e3a0e010 	mov	lr, #16
   18c14:	e59fc098 	ldr	ip, [pc, #152]	; 18cb4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x104>
   18c18:	e58d3000 	str	r3, [sp]
   18c1c:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   18c20:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   18c24:	e3a03024 	mov	r3, #36	; 0x24
   18c28:	e28d2014 	add	r2, sp, #20
   18c2c:	e59f1084 	ldr	r1, [pc, #132]	; 18cb8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x108>
   18c30:	e28d000c 	add	r0, sp, #12
   18c34:	e58d4028 	str	r4, [sp, #40]	; 0x28
   18c38:	e58d4030 	str	r4, [sp, #48]	; 0x30
   18c3c:	e58d4034 	str	r4, [sp, #52]	; 0x34
   18c40:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   18c44:	e58de020 	str	lr, [sp, #32]
   18c48:	e58de024 	str	lr, [sp, #36]	; 0x24
   18c4c:	eb002f1c 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   18c50:	e2504000 	subs	r4, r0, #0
   18c54:	159d4020 	ldrne	r4, [sp, #32]
   18c58:	e28d000c 	add	r0, sp, #12
   18c5c:	116f4f14 	clzne	r4, r4
   18c60:	11a042a4 	lsrne	r4, r4, #5
   18c64:	eb002f11 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   18c68:	e1a00004 	mov	r0, r4
   18c6c:	e28dd038 	add	sp, sp, #56	; 0x38
   18c70:	e8bd8010 	pop	{r4, pc}
   18c74:	e3a0204c 	mov	r2, #76	; 0x4c
   18c78:	e59f103c 	ldr	r1, [pc, #60]	; 18cbc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18c7c:	e59f003c 	ldr	r0, [pc, #60]	; 18cc0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x110>
   18c80:	eb002ee2 	bl	24810 <assertion_failed>
   18c84:	e3a0204e 	mov	r2, #78	; 0x4e
   18c88:	e59f102c 	ldr	r1, [pc, #44]	; 18cbc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18c8c:	e59f0030 	ldr	r0, [pc, #48]	; 18cc4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x114>
   18c90:	eb002ede 	bl	24810 <assertion_failed>
   18c94:	e3a02050 	mov	r2, #80	; 0x50
   18c98:	e59f101c 	ldr	r1, [pc, #28]	; 18cbc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18c9c:	e59f0024 	ldr	r0, [pc, #36]	; 18cc8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x118>
   18ca0:	eb002eda 	bl	24810 <assertion_failed>
   18ca4:	e3a02052 	mov	r2, #82	; 0x52
   18ca8:	e59f100c 	ldr	r1, [pc, #12]	; 18cbc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18cac:	e59f0018 	ldr	r0, [pc, #24]	; 18ccc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x11c>
   18cb0:	eb002ed6 	bl	24810 <assertion_failed>
   18cb4:	00043430 	.word	0x00043430
   18cb8:	00008010 	.word	0x00008010
   18cbc:	00043830 	.word	0x00043830
   18cc0:	00043844 	.word	0x00043844
   18cc4:	00043858 	.word	0x00043858
   18cc8:	0004386c 	.word	0x0004386c
   18ccc:	00043884 	.word	0x00043884

00018cd0 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   18cd0:	e5903018 	ldr	r3, [r0, #24]
   18cd4:	e92d4010 	push	{r4, lr}
   18cd8:	e3530000 	cmp	r3, #0
   18cdc:	1a000006 	bne	18cfc <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x2c>
   18ce0:	e3510000 	cmp	r1, #0
   18ce4:	e5801018 	str	r1, [r0, #24]
   18ce8:	18bd8010 	popne	{r4, pc}
   18cec:	e3a02070 	mov	r2, #112	; 0x70
   18cf0:	e59f1014 	ldr	r1, [pc, #20]	; 18d0c <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x3c>
   18cf4:	e59f0014 	ldr	r0, [pc, #20]	; 18d10 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x40>
   18cf8:	eb002ec4 	bl	24810 <assertion_failed>
   18cfc:	e3a0206e 	mov	r2, #110	; 0x6e
   18d00:	e59f1004 	ldr	r1, [pc, #4]	; 18d0c <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x3c>
   18d04:	e59f0008 	ldr	r0, [pc, #8]	; 18d14 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x44>
   18d08:	eb002ec0 	bl	24810 <assertion_failed>
   18d0c:	00043830 	.word	0x00043830
   18d10:	000417dc 	.word	0x000417dc
   18d14:	00043898 	.word	0x00043898

00018d18 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   18d18:	e590c000 	ldr	ip, [r0]
   18d1c:	e35c0000 	cmp	ip, #0
   18d20:	012fff1e 	bxeq	lr
   18d24:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d28:	e590e004 	ldr	lr, [r0, #4]
   18d2c:	e35e0000 	cmp	lr, #0
   18d30:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d34:	e1a04000 	mov	r4, r0
   18d38:	e1a05001 	mov	r5, r1
   18d3c:	e0822182 	add	r2, r2, r2, lsl #3
   18d40:	e59f113c 	ldr	r1, [pc, #316]	; 18e84 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x16c>
   18d44:	e1a02082 	lsl	r2, r2, #1
   18d48:	e0833183 	add	r3, r3, r3, lsl #3
   18d4c:	e0c60291 	smull	r0, r6, r1, r2
   18d50:	e1a03083 	lsl	r3, r3, #1
   18d54:	e0c10391 	smull	r0, r1, r1, r3
   18d58:	e1a02fc2 	asr	r2, r2, #31
   18d5c:	e5940008 	ldr	r0, [r4, #8]
   18d60:	e0622146 	rsb	r2, r2, r6, asr #2
   18d64:	e1a03fc3 	asr	r3, r3, #31
   18d68:	e0633141 	rsb	r3, r3, r1, asr #2
   18d6c:	e0822000 	add	r2, r2, r0
   18d70:	e594100c 	ldr	r1, [r4, #12]
   18d74:	e15c0002 	cmp	ip, r2
   18d78:	e0813003 	add	r3, r1, r3
   18d7c:	9a00002c 	bls	18e34 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x11c>
   18d80:	e15e0003 	cmp	lr, r3
   18d84:	e584300c 	str	r3, [r4, #12]
   18d88:	e5842008 	str	r2, [r4, #8]
   18d8c:	8a000037 	bhi	18e70 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x158>
   18d90:	e1500002 	cmp	r0, r2
   18d94:	e584100c 	str	r1, [r4, #12]
   18d98:	0a000008 	beq	18dc0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   18d9c:	e3a03001 	mov	r3, #1
   18da0:	e5946018 	ldr	r6, [r4, #24]
   18da4:	e5c43010 	strb	r3, [r4, #16]
   18da8:	e3560000 	cmp	r6, #0
   18dac:	0a000027 	beq	18e50 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   18db0:	e594300c 	ldr	r3, [r4, #12]
   18db4:	e1a01005 	mov	r1, r5
   18db8:	e3a00000 	mov	r0, #0
   18dbc:	e12fff36 	blx	r6
   18dc0:	e5943014 	ldr	r3, [r4, #20]
   18dc4:	e1550003 	cmp	r5, r3
   18dc8:	0a000020 	beq	18e50 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   18dcc:	e5942018 	ldr	r2, [r4, #24]
   18dd0:	e3520000 	cmp	r2, #0
   18dd4:	0a00001d 	beq	18e50 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   18dd8:	e3a06000 	mov	r6, #0
   18ddc:	e3a07001 	mov	r7, #1
   18de0:	e1a01617 	lsl	r1, r7, r6
   18de4:	e1110003 	tst	r1, r3
   18de8:	e3a08002 	mov	r8, #2
   18dec:	0a000008 	beq	18e14 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xfc>
   18df0:	e1150001 	tst	r5, r1
   18df4:	0a000017 	beq	18e58 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x140>
   18df8:	e2866001 	add	r6, r6, #1
   18dfc:	e3560003 	cmp	r6, #3
   18e00:	0a000012 	beq	18e50 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   18e04:	e5943014 	ldr	r3, [r4, #20]
   18e08:	e1a01617 	lsl	r1, r7, r6
   18e0c:	e1110003 	tst	r1, r3
   18e10:	1afffff6 	bne	18df0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xd8>
   18e14:	e1150001 	tst	r5, r1
   18e18:	0afffff6 	beq	18df8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   18e1c:	e5949018 	ldr	r9, [r4, #24]
   18e20:	e594300c 	ldr	r3, [r4, #12]
   18e24:	e5942008 	ldr	r2, [r4, #8]
   18e28:	e1a00007 	mov	r0, r7
   18e2c:	e12fff39 	blx	r9
   18e30:	eafffff0 	b	18df8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   18e34:	e15e0003 	cmp	lr, r3
   18e38:	e584300c 	str	r3, [r4, #12]
   18e3c:	9a00000e 	bls	18e7c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x164>
   18e40:	e1510003 	cmp	r1, r3
   18e44:	11a02000 	movne	r2, r0
   18e48:	1affffd3 	bne	18d9c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   18e4c:	eaffffdb 	b	18dc0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   18e50:	e5845014 	str	r5, [r4, #20]
   18e54:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e58:	e5949018 	ldr	r9, [r4, #24]
   18e5c:	e594300c 	ldr	r3, [r4, #12]
   18e60:	e5942008 	ldr	r2, [r4, #8]
   18e64:	e1a00008 	mov	r0, r8
   18e68:	e12fff39 	blx	r9
   18e6c:	eaffffe1 	b	18df8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   18e70:	e1500002 	cmp	r0, r2
   18e74:	1affffc8 	bne	18d9c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   18e78:	eafffff0 	b	18e40 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18e7c:	e584100c 	str	r1, [r4, #12]
   18e80:	eaffffce 	b	18dc0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   18e84:	66666667 	.word	0x66666667

00018e88 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   18e88:	e92d4070 	push	{r4, r5, r6, lr}
   18e8c:	e24dd030 	sub	sp, sp, #48	; 0x30
   18e90:	e1a05000 	mov	r5, r0
   18e94:	e1a04001 	mov	r4, r1
   18e98:	e28d000c 	add	r0, sp, #12
   18e9c:	e3a01000 	mov	r1, #0
   18ea0:	e1a06002 	mov	r6, r2
   18ea4:	eb002e7a 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   18ea8:	e3a03010 	mov	r3, #16
   18eac:	e3a0c001 	mov	ip, #1
   18eb0:	e58d3000 	str	r3, [sp]
   18eb4:	e28d2014 	add	r2, sp, #20
   18eb8:	e3a0301c 	mov	r3, #28
   18ebc:	e59f1038 	ldr	r1, [pc, #56]	; 18efc <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)+0x74>
   18ec0:	e28d000c 	add	r0, sp, #12
   18ec4:	e58d4028 	str	r4, [sp, #40]	; 0x28
   18ec8:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   18ecc:	e58d6020 	str	r6, [sp, #32]
   18ed0:	e58d5024 	str	r5, [sp, #36]	; 0x24
   18ed4:	eb002e7a 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   18ed8:	e2504000 	subs	r4, r0, #0
   18edc:	159d4020 	ldrne	r4, [sp, #32]
   18ee0:	e28d000c 	add	r0, sp, #12
   18ee4:	116f4f14 	clzne	r4, r4
   18ee8:	11a042a4 	lsrne	r4, r4, #5
   18eec:	eb002e6f 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   18ef0:	e1a00004 	mov	r0, r4
   18ef4:	e28dd030 	add	sp, sp, #48	; 0x30
   18ef8:	e8bd8070 	pop	{r4, r5, r6, pc}
   18efc:	00008011 	.word	0x00008011

00018f00 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   18f00:	e5903000 	ldr	r3, [r0]
   18f04:	e92d4010 	push	{r4, lr}
   18f08:	e3530000 	cmp	r3, #0
   18f0c:	0a000014 	beq	18f64 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   18f10:	e590c004 	ldr	ip, [r0, #4]
   18f14:	e35c0000 	cmp	ip, #0
   18f18:	0a000015 	beq	18f74 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x74>
   18f1c:	e1530001 	cmp	r3, r1
   18f20:	815c0002 	cmphi	ip, r2
   18f24:	e1a0e001 	mov	lr, r1
   18f28:	9a000006 	bls	18f48 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x48>
   18f2c:	e5d03011 	ldrb	r3, [r0, #17]
   18f30:	e5801008 	str	r1, [r0, #8]
   18f34:	e3530000 	cmp	r3, #0
   18f38:	e580200c 	str	r2, [r0, #12]
   18f3c:	1a000003 	bne	18f50 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x50>
   18f40:	e3a00001 	mov	r0, #1
   18f44:	e8bd8010 	pop	{r4, pc}
   18f48:	e3a00000 	mov	r0, #0
   18f4c:	e8bd8010 	pop	{r4, pc}
   18f50:	e1a01002 	mov	r1, r2
   18f54:	e1a0000e 	mov	r0, lr
   18f58:	e8bd4010 	pop	{r4, lr}
   18f5c:	e3a02001 	mov	r2, #1
   18f60:	eaffffc8 	b	18e88 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   18f64:	e3a02075 	mov	r2, #117	; 0x75
   18f68:	e59f1014 	ldr	r1, [pc, #20]	; 18f84 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   18f6c:	e59f0014 	ldr	r0, [pc, #20]	; 18f88 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x88>
   18f70:	eb002e26 	bl	24810 <assertion_failed>
   18f74:	e3a02076 	mov	r2, #118	; 0x76
   18f78:	e59f1004 	ldr	r1, [pc, #4]	; 18f84 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   18f7c:	e59f0008 	ldr	r0, [pc, #8]	; 18f8c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x8c>
   18f80:	eb002e22 	bl	24810 <assertion_failed>
   18f84:	00043830 	.word	0x00043830
   18f88:	00043858 	.word	0x00043858
   18f8c:	00043884 	.word	0x00043884

00018f90 <CMouseBehaviour::ShowCursor(bool)>:
   18f90:	e1a02001 	mov	r2, r1
   18f94:	e5903008 	ldr	r3, [r0, #8]
   18f98:	e5901000 	ldr	r1, [r0]
   18f9c:	e92d4010 	push	{r4, lr}
   18fa0:	e1530001 	cmp	r3, r1
   18fa4:	e5d04011 	ldrb	r4, [r0, #17]
   18fa8:	e5c02011 	strb	r2, [r0, #17]
   18fac:	2a000007 	bcs	18fd0 <CMouseBehaviour::ShowCursor(bool)+0x40>
   18fb0:	e590100c 	ldr	r1, [r0, #12]
   18fb4:	e5900004 	ldr	r0, [r0, #4]
   18fb8:	e1510000 	cmp	r1, r0
   18fbc:	2a000007 	bcs	18fe0 <CMouseBehaviour::ShowCursor(bool)+0x50>
   18fc0:	e1a00003 	mov	r0, r3
   18fc4:	ebffffaf 	bl	18e88 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   18fc8:	e1a00004 	mov	r0, r4
   18fcc:	e8bd8010 	pop	{r4, pc}
   18fd0:	e3a0208d 	mov	r2, #141	; 0x8d
   18fd4:	e59f1014 	ldr	r1, [pc, #20]	; 18ff0 <CMouseBehaviour::ShowCursor(bool)+0x60>
   18fd8:	e59f0014 	ldr	r0, [pc, #20]	; 18ff4 <CMouseBehaviour::ShowCursor(bool)+0x64>
   18fdc:	eb002e0b 	bl	24810 <assertion_failed>
   18fe0:	e3a0208e 	mov	r2, #142	; 0x8e
   18fe4:	e59f1004 	ldr	r1, [pc, #4]	; 18ff0 <CMouseBehaviour::ShowCursor(bool)+0x60>
   18fe8:	e59f0008 	ldr	r0, [pc, #8]	; 18ff8 <CMouseBehaviour::ShowCursor(bool)+0x68>
   18fec:	eb002e07 	bl	24810 <assertion_failed>
   18ff0:	00043830 	.word	0x00043830
   18ff4:	000438b0 	.word	0x000438b0
   18ff8:	000438cc 	.word	0x000438cc

00018ffc <CMouseBehaviour::UpdateCursor()>:
   18ffc:	e5d03011 	ldrb	r3, [r0, #17]
   19000:	e3530000 	cmp	r3, #0
   19004:	012fff1e 	bxeq	lr
   19008:	e5d03010 	ldrb	r3, [r0, #16]
   1900c:	e3530000 	cmp	r3, #0
   19010:	012fff1e 	bxeq	lr
   19014:	e3a03000 	mov	r3, #0
   19018:	e590100c 	ldr	r1, [r0, #12]
   1901c:	e5c03010 	strb	r3, [r0, #16]
   19020:	e3a02001 	mov	r2, #1
   19024:	e5900008 	ldr	r0, [r0, #8]
   19028:	eaffff96 	b	18e88 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

0001902c <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   1902c:	e92d4010 	push	{r4, lr}
   19030:	e1a04000 	mov	r4, r0
   19034:	e4801004 	str	r1, [r0], #4
   19038:	e1a01002 	mov	r1, r2
   1903c:	eb003ad2 	bl	27b8c <CString::CString(char const*)>
   19040:	e3a03000 	mov	r3, #0
   19044:	e1a00004 	mov	r0, r4
   19048:	e5843014 	str	r3, [r4, #20]
   1904c:	e5843018 	str	r3, [r4, #24]
   19050:	e584301c 	str	r3, [r4, #28]
   19054:	e5843020 	str	r3, [r4, #32]
   19058:	e8bd8010 	pop	{r4, pc}

0001905c <CPartitionManager::~CPartitionManager()>:
   1905c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19060:	e3a05000 	mov	r5, #0
   19064:	e1a06000 	mov	r6, r0
   19068:	e1a0b005 	mov	fp, r5
   1906c:	e3a0a001 	mov	sl, #1
   19070:	e24dd014 	sub	sp, sp, #20
   19074:	e2808004 	add	r8, r0, #4
   19078:	e2804014 	add	r4, r0, #20
   1907c:	e2807024 	add	r7, r0, #36	; 0x24
   19080:	e5943000 	ldr	r3, [r4]
   19084:	e3530000 	cmp	r3, #0
   19088:	0a00001a 	beq	190f8 <CPartitionManager::~CPartitionManager()+0x9c>
   1908c:	e1a0000d 	mov	r0, sp
   19090:	eb003ab7 	bl	27b74 <CString::CString()>
   19094:	e1a00008 	mov	r0, r8
   19098:	eb003acb 	bl	27bcc <CString::operator char const*() const>
   1909c:	e2855001 	add	r5, r5, #1
   190a0:	e1a02000 	mov	r2, r0
   190a4:	e1a03005 	mov	r3, r5
   190a8:	e59f1070 	ldr	r1, [pc, #112]	; 19120 <CPartitionManager::~CPartitionManager()+0xc4>
   190ac:	e1a0000d 	mov	r0, sp
   190b0:	eb003ff2 	bl	29080 <CString::Format(char const*, ...)>
   190b4:	eb0030af 	bl	25378 <CDeviceNameService::Get()>
   190b8:	e1a09000 	mov	r9, r0
   190bc:	e1a0000d 	mov	r0, sp
   190c0:	eb003ac1 	bl	27bcc <CString::operator char const*() const>
   190c4:	e1a0200a 	mov	r2, sl
   190c8:	e1a01000 	mov	r1, r0
   190cc:	e1a00009 	mov	r0, r9
   190d0:	eb00301b 	bl	25144 <CDeviceNameService::RemoveDevice(char const*, bool)>
   190d4:	e5940000 	ldr	r0, [r4]
   190d8:	e3500000 	cmp	r0, #0
   190dc:	0a000002 	beq	190ec <CPartitionManager::~CPartitionManager()+0x90>
   190e0:	e5903000 	ldr	r3, [r0]
   190e4:	e5933004 	ldr	r3, [r3, #4]
   190e8:	e12fff33 	blx	r3
   190ec:	e584b000 	str	fp, [r4]
   190f0:	e1a0000d 	mov	r0, sp
   190f4:	eb003a6b 	bl	27aa8 <CString::~CString()>
   190f8:	e2844004 	add	r4, r4, #4
   190fc:	e1540007 	cmp	r4, r7
   19100:	1affffde 	bne	19080 <CPartitionManager::~CPartitionManager()+0x24>
   19104:	e3a03000 	mov	r3, #0
   19108:	e1a00008 	mov	r0, r8
   1910c:	e5863000 	str	r3, [r6]
   19110:	eb003a64 	bl	27aa8 <CString::~CString()>
   19114:	e1a00006 	mov	r0, r6
   19118:	e28dd014 	add	sp, sp, #20
   1911c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19120:	000438f0 	.word	0x000438f0

00019124 <CPartitionManager::Initialize()>:
   19124:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19128:	e1a06000 	mov	r6, r0
   1912c:	e5900000 	ldr	r0, [r0]
   19130:	e3a03000 	mov	r3, #0
   19134:	e5901000 	ldr	r1, [r0]
   19138:	e24ddf89 	sub	sp, sp, #548	; 0x224
   1913c:	e3a02000 	mov	r2, #0
   19140:	e5911010 	ldr	r1, [r1, #16]
   19144:	e12fff31 	blx	r1
   19148:	e1903001 	orrs	r3, r0, r1
   1914c:	0a000007 	beq	19170 <CPartitionManager::Initialize()+0x4c>
   19150:	eb0036a1 	bl	26bdc <CLogger::Get()>
   19154:	e59f31e0 	ldr	r3, [pc, #480]	; 1933c <CPartitionManager::Initialize()+0x218>
   19158:	e3a02001 	mov	r2, #1
   1915c:	e59f11dc 	ldr	r1, [pc, #476]	; 19340 <CPartitionManager::Initialize()+0x21c>
   19160:	eb0035da 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19164:	e3a00000 	mov	r0, #0
   19168:	e28ddf89 	add	sp, sp, #548	; 0x224
   1916c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19170:	e5960000 	ldr	r0, [r6]
   19174:	e28d1020 	add	r1, sp, #32
   19178:	e5903000 	ldr	r3, [r0]
   1917c:	e3a02c02 	mov	r2, #512	; 0x200
   19180:	e5933008 	ldr	r3, [r3, #8]
   19184:	e12fff33 	blx	r3
   19188:	e3500c02 	cmp	r0, #512	; 0x200
   1918c:	1affffef 	bne	19150 <CPartitionManager::Initialize()+0x2c>
   19190:	e28d3f87 	add	r3, sp, #540	; 0x21c
   19194:	e2833002 	add	r3, r3, #2
   19198:	e1d320b0 	ldrh	r2, [r3]
   1919c:	e59f31a0 	ldr	r3, [pc, #416]	; 19344 <CPartitionManager::Initialize()+0x220>
   191a0:	e1520003 	cmp	r2, r3
   191a4:	1a00002e 	bne	19264 <CPartitionManager::Initialize()+0x140>
   191a8:	e3a04000 	mov	r4, #0
   191ac:	e3a0a020 	mov	sl, #32
   191b0:	e1a09004 	mov	r9, r4
   191b4:	e1a08004 	mov	r8, r4
   191b8:	e59f7188 	ldr	r7, [pc, #392]	; 19348 <CPartitionManager::Initialize()+0x224>
   191bc:	e2865014 	add	r5, r6, #20
   191c0:	e286b004 	add	fp, r6, #4
   191c4:	e28d3020 	add	r3, sp, #32
   191c8:	e0833204 	add	r3, r3, r4, lsl #4
   191cc:	e5d321c2 	ldrb	r2, [r3, #450]	; 0x1c2
   191d0:	e352000f 	cmp	r2, #15
   191d4:	91e03237 	mvnls	r3, r7, lsr r2
   191d8:	81a03008 	movhi	r3, r8
   191dc:	92033001 	andls	r3, r3, #1
   191e0:	92233001 	eorls	r3, r3, #1
   191e4:	e35200ef 	cmp	r2, #239	; 0xef
   191e8:	03833001 	orreq	r3, r3, #1
   191ec:	e3530000 	cmp	r3, #0
   191f0:	1a00000c 	bne	19228 <CPartitionManager::Initialize()+0x104>
   191f4:	e28d2e22 	add	r2, sp, #544	; 0x220
   191f8:	e284301c 	add	r3, r4, #28
   191fc:	e0823203 	add	r3, r2, r3, lsl #4
   19200:	e2431f7e 	sub	r1, r3, #504	; 0x1f8
   19204:	e15120b2 	ldrh	r2, [r1, #-2]
   19208:	e1d100b0 	ldrh	r0, [r1]
   1920c:	e1922800 	orrs	r2, r2, r0, lsl #16
   19210:	0a000004 	beq	19228 <CPartitionManager::Initialize()+0x104>
   19214:	e2433f7d 	sub	r3, r3, #500	; 0x1f4
   19218:	e15320b2 	ldrh	r2, [r3, #-2]
   1921c:	e1d300b0 	ldrh	r0, [r3]
   19220:	e1922800 	orrs	r2, r2, r0, lsl #16
   19224:	1a000016 	bne	19284 <CPartitionManager::Initialize()+0x160>
   19228:	e2844001 	add	r4, r4, #1
   1922c:	e3540004 	cmp	r4, #4
   19230:	e2855004 	add	r5, r5, #4
   19234:	1affffe2 	bne	191c4 <CPartitionManager::Initialize()+0xa0>
   19238:	e3590000 	cmp	r9, #0
   1923c:	13a00001 	movne	r0, #1
   19240:	1affffc8 	bne	19168 <CPartitionManager::Initialize()+0x44>
   19244:	eb003664 	bl	26bdc <CLogger::Get()>
   19248:	e59f30fc 	ldr	r3, [pc, #252]	; 1934c <CPartitionManager::Initialize()+0x228>
   1924c:	e3a02002 	mov	r2, #2
   19250:	e59f10e8 	ldr	r1, [pc, #232]	; 19340 <CPartitionManager::Initialize()+0x21c>
   19254:	eb00359d 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19258:	e3a00001 	mov	r0, #1
   1925c:	e28ddf89 	add	sp, sp, #548	; 0x224
   19260:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19264:	eb00365c 	bl	26bdc <CLogger::Get()>
   19268:	e59f30e0 	ldr	r3, [pc, #224]	; 19350 <CPartitionManager::Initialize()+0x22c>
   1926c:	e3a02002 	mov	r2, #2
   19270:	e59f10c8 	ldr	r1, [pc, #200]	; 19340 <CPartitionManager::Initialize()+0x21c>
   19274:	eb003595 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19278:	e3a00001 	mov	r0, #1
   1927c:	e28ddf89 	add	sp, sp, #548	; 0x224
   19280:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19284:	e5952000 	ldr	r2, [r5]
   19288:	e3520000 	cmp	r2, #0
   1928c:	1a000026 	bne	1932c <CPartitionManager::Initialize()+0x208>
   19290:	e1a0000a 	mov	r0, sl
   19294:	e58d300c 	str	r3, [sp, #12]
   19298:	e58d1008 	str	r1, [sp, #8]
   1929c:	eb004778 	bl	2b084 <operator new(unsigned int)>
   192a0:	e59d300c 	ldr	r3, [sp, #12]
   192a4:	e59d1008 	ldr	r1, [sp, #8]
   192a8:	e58d0004 	str	r0, [sp, #4]
   192ac:	e153c0b2 	ldrh	ip, [r3, #-2]
   192b0:	e15120b2 	ldrh	r2, [r1, #-2]
   192b4:	e1d330b0 	ldrh	r3, [r3]
   192b8:	e1d110b0 	ldrh	r1, [r1]
   192bc:	e18c3803 	orr	r3, ip, r3, lsl #16
   192c0:	e1822801 	orr	r2, r2, r1, lsl #16
   192c4:	e5961000 	ldr	r1, [r6]
   192c8:	eb0000b8 	bl	195b0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   192cc:	e59d3004 	ldr	r3, [sp, #4]
   192d0:	e28d0010 	add	r0, sp, #16
   192d4:	e5853000 	str	r3, [r5]
   192d8:	eb003a25 	bl	27b74 <CString::CString()>
   192dc:	e1a0000b 	mov	r0, fp
   192e0:	eb003a39 	bl	27bcc <CString::operator char const*() const>
   192e4:	e2899001 	add	r9, r9, #1
   192e8:	e1a02000 	mov	r2, r0
   192ec:	e1a03009 	mov	r3, r9
   192f0:	e59f105c 	ldr	r1, [pc, #92]	; 19354 <CPartitionManager::Initialize()+0x230>
   192f4:	e28d0010 	add	r0, sp, #16
   192f8:	eb003f60 	bl	29080 <CString::Format(char const*, ...)>
   192fc:	eb00301d 	bl	25378 <CDeviceNameService::Get()>
   19300:	e58d0004 	str	r0, [sp, #4]
   19304:	e28d0010 	add	r0, sp, #16
   19308:	eb003a2f 	bl	27bcc <CString::operator char const*() const>
   1930c:	e3a03001 	mov	r3, #1
   19310:	e1a01000 	mov	r1, r0
   19314:	e5952000 	ldr	r2, [r5]
   19318:	e59d0004 	ldr	r0, [sp, #4]
   1931c:	eb002f5b 	bl	25090 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   19320:	e28d0010 	add	r0, sp, #16
   19324:	eb0039df 	bl	27aa8 <CString::~CString()>
   19328:	eaffffbe 	b	19228 <CPartitionManager::Initialize()+0x104>
   1932c:	e3a02078 	mov	r2, #120	; 0x78
   19330:	e59f1020 	ldr	r1, [pc, #32]	; 19358 <CPartitionManager::Initialize()+0x234>
   19334:	e59f0020 	ldr	r0, [pc, #32]	; 1935c <CPartitionManager::Initialize()+0x238>
   19338:	eb002d34 	bl	24810 <assertion_failed>
   1933c:	00043960 	.word	0x00043960
   19340:	000438e8 	.word	0x000438e8
   19344:	0000aa55 	.word	0x0000aa55
   19348:	00008021 	.word	0x00008021
   1934c:	0004393c 	.word	0x0004393c
   19350:	000438f8 	.word	0x000438f8
   19354:	000438f0 	.word	0x000438f0
   19358:	0004390c 	.word	0x0004390c
   1935c:	00043924 	.word	0x00043924

00019360 <CPartition::~CPartition()>:
   19360:	e3a02000 	mov	r2, #0
   19364:	e92d4010 	push	{r4, lr}
   19368:	e1a04000 	mov	r4, r0
   1936c:	e59f3010 	ldr	r3, [pc, #16]	; 19384 <CPartition::~CPartition()+0x24>
   19370:	e5802004 	str	r2, [r0, #4]
   19374:	e5803000 	str	r3, [r0]
   19378:	eb002f07 	bl	24f9c <CDevice::~CDevice()>
   1937c:	e1a00004 	mov	r0, r4
   19380:	e8bd8010 	pop	{r4, pc}
   19384:	00043978 	.word	0x00043978

00019388 <CPartition::~CPartition()>:
   19388:	e3a02000 	mov	r2, #0
   1938c:	e92d4010 	push	{r4, lr}
   19390:	e1a04000 	mov	r4, r0
   19394:	e59f301c 	ldr	r3, [pc, #28]	; 193b8 <CPartition::~CPartition()+0x30>
   19398:	e5802004 	str	r2, [r0, #4]
   1939c:	e5803000 	str	r3, [r0]
   193a0:	eb002efd 	bl	24f9c <CDevice::~CDevice()>
   193a4:	e1a00004 	mov	r0, r4
   193a8:	e3a01020 	mov	r1, #32
   193ac:	eb004742 	bl	2b0bc <operator delete(void*, unsigned int)>
   193b0:	e1a00004 	mov	r0, r4
   193b4:	e8bd8010 	pop	{r4, pc}
   193b8:	00043978 	.word	0x00043978

000193bc <CPartition::Read(void*, unsigned int)>:
   193bc:	e5d03018 	ldrb	r3, [r0, #24]
   193c0:	e3530000 	cmp	r3, #0
   193c4:	1a00001a 	bne	19434 <CPartition::Read(void*, unsigned int)+0x78>
   193c8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   193cc:	e1c061d0 	ldrd	r6, [r0, #16]
   193d0:	e3a05000 	mov	r5, #0
   193d4:	e3a09000 	mov	r9, #0
   193d8:	e59f4064 	ldr	r4, [pc, #100]	; 19444 <CPartition::Read(void*, unsigned int)+0x88>
   193dc:	e590800c 	ldr	r8, [r0, #12]
   193e0:	e0944002 	adds	r4, r4, r2
   193e4:	e2a55000 	adc	r5, r5, #0
   193e8:	e0944006 	adds	r4, r4, r6
   193ec:	e0a55007 	adc	r5, r5, r7
   193f0:	e1a064a4 	lsr	r6, r4, #9
   193f4:	e1a074a5 	lsr	r7, r5, #9
   193f8:	e1866b85 	orr	r6, r6, r5, lsl #23
   193fc:	e1570009 	cmp	r7, r9
   19400:	01560008 	cmpeq	r6, r8
   19404:	8a00000c 	bhi	1943c <CPartition::Read(void*, unsigned int)+0x80>
   19408:	e5900004 	ldr	r0, [r0, #4]
   1940c:	e3500000 	cmp	r0, #0
   19410:	0a000003 	beq	19424 <CPartition::Read(void*, unsigned int)+0x68>
   19414:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19418:	e5903000 	ldr	r3, [r0]
   1941c:	e5933008 	ldr	r3, [r3, #8]
   19420:	e12fff13 	bx	r3
   19424:	e3a02035 	mov	r2, #53	; 0x35
   19428:	e59f1018 	ldr	r1, [pc, #24]	; 19448 <CPartition::Read(void*, unsigned int)+0x8c>
   1942c:	e59f0018 	ldr	r0, [pc, #24]	; 1944c <CPartition::Read(void*, unsigned int)+0x90>
   19430:	eb002cf6 	bl	24810 <assertion_failed>
   19434:	e3e00000 	mvn	r0, #0
   19438:	e12fff1e 	bx	lr
   1943c:	e3e00000 	mvn	r0, #0
   19440:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19444:	000001ff 	.word	0x000001ff
   19448:	00043990 	.word	0x00043990
   1944c:	0003fc00 	.word	0x0003fc00

00019450 <CPartition::Write(void const*, unsigned int)>:
   19450:	e5d03018 	ldrb	r3, [r0, #24]
   19454:	e3530000 	cmp	r3, #0
   19458:	1a00001a 	bne	194c8 <CPartition::Write(void const*, unsigned int)+0x78>
   1945c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19460:	e1c061d0 	ldrd	r6, [r0, #16]
   19464:	e3a05000 	mov	r5, #0
   19468:	e3a09000 	mov	r9, #0
   1946c:	e59f4064 	ldr	r4, [pc, #100]	; 194d8 <CPartition::Write(void const*, unsigned int)+0x88>
   19470:	e590800c 	ldr	r8, [r0, #12]
   19474:	e0944002 	adds	r4, r4, r2
   19478:	e2a55000 	adc	r5, r5, #0
   1947c:	e0944006 	adds	r4, r4, r6
   19480:	e0a55007 	adc	r5, r5, r7
   19484:	e1a064a4 	lsr	r6, r4, #9
   19488:	e1a074a5 	lsr	r7, r5, #9
   1948c:	e1866b85 	orr	r6, r6, r5, lsl #23
   19490:	e1570009 	cmp	r7, r9
   19494:	01560008 	cmpeq	r6, r8
   19498:	8a00000c 	bhi	194d0 <CPartition::Write(void const*, unsigned int)+0x80>
   1949c:	e5900004 	ldr	r0, [r0, #4]
   194a0:	e3500000 	cmp	r0, #0
   194a4:	0a000003 	beq	194b8 <CPartition::Write(void const*, unsigned int)+0x68>
   194a8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   194ac:	e5903000 	ldr	r3, [r0]
   194b0:	e593300c 	ldr	r3, [r3, #12]
   194b4:	e12fff13 	bx	r3
   194b8:	e3a02047 	mov	r2, #71	; 0x47
   194bc:	e59f1018 	ldr	r1, [pc, #24]	; 194dc <CPartition::Write(void const*, unsigned int)+0x8c>
   194c0:	e59f0018 	ldr	r0, [pc, #24]	; 194e0 <CPartition::Write(void const*, unsigned int)+0x90>
   194c4:	eb002cd1 	bl	24810 <assertion_failed>
   194c8:	e3e00000 	mvn	r0, #0
   194cc:	e12fff1e 	bx	lr
   194d0:	e3e00000 	mvn	r0, #0
   194d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   194d8:	000001ff 	.word	0x000001ff
   194dc:	00043990 	.word	0x00043990
   194e0:	0003fc00 	.word	0x0003fc00

000194e4 <CPartition::Seek(unsigned long long)>:
   194e4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   194e8:	e3a05000 	mov	r5, #0
   194ec:	e3a01001 	mov	r1, #1
   194f0:	e59f40ac 	ldr	r4, [pc, #172]	; 195a4 <CPartition::Seek(unsigned long long)+0xc0>
   194f4:	e0055003 	and	r5, r5, r3
   194f8:	e0044002 	and	r4, r4, r2
   194fc:	e194c005 	orrs	ip, r4, r5
   19500:	e5c01018 	strb	r1, [r0, #24]
   19504:	0a000002 	beq	19514 <CPartition::Seek(unsigned long long)+0x30>
   19508:	e3e00000 	mvn	r0, #0
   1950c:	e1a01000 	mov	r1, r0
   19510:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19514:	e3a07000 	mov	r7, #0
   19518:	e590600c 	ldr	r6, [r0, #12]
   1951c:	e1a044a2 	lsr	r4, r2, #9
   19520:	e1a054a3 	lsr	r5, r3, #9
   19524:	e1844b83 	orr	r4, r4, r3, lsl #23
   19528:	e1550007 	cmp	r5, r7
   1952c:	01540006 	cmpeq	r4, r6
   19530:	2afffff4 	bcs	19508 <CPartition::Seek(unsigned long long)+0x24>
   19534:	e1a04000 	mov	r4, r0
   19538:	e9900003 	ldmib	r0, {r0, r1}
   1953c:	e1a08481 	lsl	r8, r1, #9
   19540:	e0988002 	adds	r8, r8, r2
   19544:	e1a09ba1 	lsr	r9, r1, #23
   19548:	e0a99003 	adc	r9, r9, r3
   1954c:	e3500000 	cmp	r0, #0
   19550:	e1a06002 	mov	r6, r2
   19554:	e1a07003 	mov	r7, r3
   19558:	0a00000d 	beq	19594 <CPartition::Seek(unsigned long long)+0xb0>
   1955c:	e5903000 	ldr	r3, [r0]
   19560:	e1a02008 	mov	r2, r8
   19564:	e5931010 	ldr	r1, [r3, #16]
   19568:	e1a03009 	mov	r3, r9
   1956c:	e12fff31 	blx	r1
   19570:	e1590001 	cmp	r9, r1
   19574:	01580000 	cmpeq	r8, r0
   19578:	1affffe2 	bne	19508 <CPartition::Seek(unsigned long long)+0x24>
   1957c:	e3a03000 	mov	r3, #0
   19580:	e1a00006 	mov	r0, r6
   19584:	e1a01007 	mov	r1, r7
   19588:	e1c461f0 	strd	r6, [r4, #16]
   1958c:	e5c43018 	strb	r3, [r4, #24]
   19590:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19594:	e3a02059 	mov	r2, #89	; 0x59
   19598:	e59f1008 	ldr	r1, [pc, #8]	; 195a8 <CPartition::Seek(unsigned long long)+0xc4>
   1959c:	e59f0008 	ldr	r0, [pc, #8]	; 195ac <CPartition::Seek(unsigned long long)+0xc8>
   195a0:	eb002c9a 	bl	24810 <assertion_failed>
   195a4:	000001ff 	.word	0x000001ff
   195a8:	00043990 	.word	0x00043990
   195ac:	0003fc00 	.word	0x0003fc00

000195b0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   195b0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   195b4:	e1a05001 	mov	r5, r1
   195b8:	e1a04000 	mov	r4, r0
   195bc:	e1a09002 	mov	r9, r2
   195c0:	e1a08003 	mov	r8, r3
   195c4:	e3a06000 	mov	r6, #0
   195c8:	eb002e81 	bl	24fd4 <CDevice::CDevice()>
   195cc:	e3a07000 	mov	r7, #0
   195d0:	e3a01001 	mov	r1, #1
   195d4:	e59f0030 	ldr	r0, [pc, #48]	; 1960c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x5c>
   195d8:	e3550000 	cmp	r5, #0
   195dc:	e9840220 	stmib	r4, {r5, r9}
   195e0:	e584800c 	str	r8, [r4, #12]
   195e4:	e5840000 	str	r0, [r4]
   195e8:	e1c461f0 	strd	r6, [r4, #16]
   195ec:	e5c41018 	strb	r1, [r4, #24]
   195f0:	0a000001 	beq	195fc <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   195f4:	e1a00004 	mov	r0, r4
   195f8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195fc:	e3a0201f 	mov	r2, #31
   19600:	e59f1008 	ldr	r1, [pc, #8]	; 19610 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x60>
   19604:	e59f0008 	ldr	r0, [pc, #8]	; 19614 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   19608:	eb002c80 	bl	24810 <assertion_failed>
   1960c:	00043978 	.word	0x00043978
   19610:	00043990 	.word	0x00043990
   19614:	0003fc00 	.word	0x0003fc00

00019618 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>:
   19618:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1961c:	e1a04000 	mov	r4, r0
   19620:	e1a08001 	mov	r8, r1
   19624:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   19628:	e59fc10c 	ldr	ip, [pc, #268]	; 1973c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x124>
   1962c:	e3510000 	cmp	r1, #0
   19630:	01a0100c 	moveq	r1, ip
   19634:	e2805010 	add	r5, r0, #16
   19638:	e5dd7028 	ldrb	r7, [sp, #40]	; 0x28
   1963c:	e1a09003 	mov	r9, r3
   19640:	e280603c 	add	r6, r0, #60	; 0x3c
   19644:	e1a0a002 	mov	sl, r2
   19648:	eb00394f 	bl	27b8c <CString::CString(char const*)>
   1964c:	e1a00005 	mov	r0, r5
   19650:	eb001da4 	bl	20ce8 <CNetConfig::CNetConfig()>
   19654:	e1a02007 	mov	r2, r7
   19658:	e1a01005 	mov	r1, r5
   1965c:	e1a00006 	mov	r0, r6
   19660:	e2847060 	add	r7, r4, #96	; 0x60
   19664:	eb0008d1 	bl	1b9b0 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>
   19668:	e1a02006 	mov	r2, r6
   1966c:	e1a01005 	mov	r1, r5
   19670:	e2846098 	add	r6, r4, #152	; 0x98
   19674:	e1a00007 	mov	r0, r7
   19678:	eb0006fa 	bl	1b268 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>
   1967c:	e1a02007 	mov	r2, r7
   19680:	e1a01005 	mov	r1, r5
   19684:	e1a00006 	mov	r0, r6
   19688:	eb0004b7 	bl	1a96c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>
   1968c:	e1a02006 	mov	r2, r6
   19690:	e1a01005 	mov	r1, r5
   19694:	e28400d8 	add	r0, r4, #216	; 0xd8
   19698:	eb0000ef 	bl	19a5c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>
   1969c:	e3a00000 	mov	r0, #0
   196a0:	e16f1f18 	clz	r1, r8
   196a4:	e59f3094 	ldr	r3, [pc, #148]	; 19740 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x128>
   196a8:	e1a012a1 	lsr	r1, r1, #5
   196ac:	e5932000 	ldr	r2, [r3]
   196b0:	e5840128 	str	r0, [r4, #296]	; 0x128
   196b4:	e1520000 	cmp	r2, r0
   196b8:	e5c41124 	strb	r1, [r4, #292]	; 0x124
   196bc:	1a00001a 	bne	1972c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x114>
   196c0:	e1a00005 	mov	r0, r5
   196c4:	e5834000 	str	r4, [r3]
   196c8:	eb001d4d 	bl	20c04 <CNetConfig::SetDHCP(bool)>
   196cc:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   196d0:	e3530000 	cmp	r3, #0
   196d4:	0a000001 	beq	196e0 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xc8>
   196d8:	e1a00004 	mov	r0, r4
   196dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   196e0:	e1a01008 	mov	r1, r8
   196e4:	e1a00005 	mov	r0, r5
   196e8:	eb001d9d 	bl	20d64 <CNetConfig::SetIPAddress(unsigned char const*)>
   196ec:	e1a0100a 	mov	r1, sl
   196f0:	e1a00005 	mov	r0, r5
   196f4:	eb001da1 	bl	20d80 <CNetConfig::SetNetMask(unsigned char const*)>
   196f8:	e3590000 	cmp	r9, #0
   196fc:	0a000002 	beq	1970c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xf4>
   19700:	e1a01009 	mov	r1, r9
   19704:	e1a00005 	mov	r0, r5
   19708:	eb001d43 	bl	20c1c <CNetConfig::SetDefaultGateway(unsigned char const*)>
   1970c:	e59d3020 	ldr	r3, [sp, #32]
   19710:	e3530000 	cmp	r3, #0
   19714:	0affffef 	beq	196d8 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xc0>
   19718:	e1a00005 	mov	r0, r5
   1971c:	e1a01003 	mov	r1, r3
   19720:	eb001d3f 	bl	20c24 <CNetConfig::SetDNSServer(unsigned char const*)>
   19724:	e1a00004 	mov	r0, r4
   19728:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1972c:	e3a02026 	mov	r2, #38	; 0x26
   19730:	e59f100c 	ldr	r1, [pc, #12]	; 19744 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x12c>
   19734:	e59f000c 	ldr	r0, [pc, #12]	; 19748 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x130>
   19738:	eb002c34 	bl	24810 <assertion_failed>
   1973c:	00047884 	.word	0x00047884
   19740:	0004e200 	.word	0x0004e200
   19744:	000439a0 	.word	0x000439a0
   19748:	000439b4 	.word	0x000439b4

0001974c <CNetSubSystem::Process()>:
   1974c:	e59f3034 	ldr	r3, [pc, #52]	; 19788 <CNetSubSystem::Process()+0x3c>
   19750:	e5933000 	ldr	r3, [r3]
   19754:	e3530000 	cmp	r3, #0
   19758:	012fff1e 	bxeq	lr
   1975c:	e92d4010 	push	{r4, lr}
   19760:	e1a04000 	mov	r4, r0
   19764:	e280003c 	add	r0, r0, #60	; 0x3c
   19768:	eb0008f6 	bl	1bb48 <CNetDeviceLayer::Process()>
   1976c:	e2840060 	add	r0, r4, #96	; 0x60
   19770:	eb00071d 	bl	1b3ec <CLinkLayer::Process()>
   19774:	e2840098 	add	r0, r4, #152	; 0x98
   19778:	eb0004cb 	bl	1aaac <CNetworkLayer::Process()>
   1977c:	e28400d8 	add	r0, r4, #216	; 0xd8
   19780:	e8bd4010 	pop	{r4, lr}
   19784:	ea0003b5 	b	1a660 <CTransportLayer::Process()>
   19788:	0004e200 	.word	0x0004e200

0001978c <CNetSubSystem::GetConfig()>:
   1978c:	e2800010 	add	r0, r0, #16
   19790:	e12fff1e 	bx	lr

00019794 <CNetSubSystem::GetNetDeviceLayer()>:
   19794:	e280003c 	add	r0, r0, #60	; 0x3c
   19798:	e12fff1e 	bx	lr

0001979c <CNetSubSystem::GetLinkLayer()>:
   1979c:	e2800060 	add	r0, r0, #96	; 0x60
   197a0:	e12fff1e 	bx	lr

000197a4 <CNetSubSystem::GetTransportLayer()>:
   197a4:	e28000d8 	add	r0, r0, #216	; 0xd8
   197a8:	e12fff1e 	bx	lr

000197ac <CNetSubSystem::IsRunning() const>:
   197ac:	e5d03124 	ldrb	r3, [r0, #292]	; 0x124
   197b0:	e3530000 	cmp	r3, #0
   197b4:	0a000003 	beq	197c8 <CNetSubSystem::IsRunning() const+0x1c>
   197b8:	e5900128 	ldr	r0, [r0, #296]	; 0x128
   197bc:	e3500000 	cmp	r0, #0
   197c0:	0a000002 	beq	197d0 <CNetSubSystem::IsRunning() const+0x24>
   197c4:	ea002072 	b	21994 <CDHCPClient::IsBound() const>
   197c8:	e3a00001 	mov	r0, #1
   197cc:	e12fff1e 	bx	lr
   197d0:	e92d4010 	push	{r4, lr}
   197d4:	e3a0209d 	mov	r2, #157	; 0x9d
   197d8:	e59f1004 	ldr	r1, [pc, #4]	; 197e4 <CNetSubSystem::IsRunning() const+0x38>
   197dc:	e59f0004 	ldr	r0, [pc, #4]	; 197e8 <CNetSubSystem::IsRunning() const+0x3c>
   197e0:	eb002c0a 	bl	24810 <assertion_failed>
   197e4:	000439a0 	.word	0x000439a0
   197e8:	000439c4 	.word	0x000439c4

000197ec <CNetSubSystem::Initialize(bool)>:
   197ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   197f0:	e2805010 	add	r5, r0, #16
   197f4:	e1a04000 	mov	r4, r0
   197f8:	e1a00005 	mov	r0, r5
   197fc:	e1a06001 	mov	r6, r1
   19800:	eb001d09 	bl	20c2c <CNetConfig::GetIPAddress() const>
   19804:	eb001e43 	bl	21118 <CIPAddress::IsNull() const>
   19808:	e1a01000 	mov	r1, r0
   1980c:	e1a00005 	mov	r0, r5
   19810:	e5c41124 	strb	r1, [r4, #292]	; 0x124
   19814:	eb001cfa 	bl	20c04 <CNetConfig::SetDHCP(bool)>
   19818:	e1a01006 	mov	r1, r6
   1981c:	e284003c 	add	r0, r4, #60	; 0x3c
   19820:	eb000878 	bl	1ba08 <CNetDeviceLayer::Initialize(bool)>
   19824:	e3500000 	cmp	r0, #0
   19828:	1a000002 	bne	19838 <CNetSubSystem::Initialize(bool)+0x4c>
   1982c:	e3a05000 	mov	r5, #0
   19830:	e1a00005 	mov	r0, r5
   19834:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19838:	e2845060 	add	r5, r4, #96	; 0x60
   1983c:	e1a00005 	mov	r0, r5
   19840:	eb0006be 	bl	1b340 <CLinkLayer::Initialize()>
   19844:	e3500000 	cmp	r0, #0
   19848:	0afffff7 	beq	1982c <CNetSubSystem::Initialize(bool)+0x40>
   1984c:	e2847098 	add	r7, r4, #152	; 0x98
   19850:	e1a00007 	mov	r0, r7
   19854:	eb00047b 	bl	1aa48 <CNetworkLayer::Initialize()>
   19858:	e3500000 	cmp	r0, #0
   1985c:	0afffff2 	beq	1982c <CNetSubSystem::Initialize(bool)+0x40>
   19860:	e1a00005 	mov	r0, r5
   19864:	e1a01007 	mov	r1, r7
   19868:	eb0006cd 	bl	1b3a4 <CLinkLayer::AttachLayer(CNetworkLayer*)>
   1986c:	e28400d8 	add	r0, r4, #216	; 0xd8
   19870:	eb00009f 	bl	19af4 <CTransportLayer::Initialize()>
   19874:	e2505000 	subs	r5, r0, #0
   19878:	0affffeb 	beq	1982c <CNetSubSystem::Initialize(bool)+0x40>
   1987c:	e3a000e0 	mov	r0, #224	; 0xe0
   19880:	eb0045ff 	bl	2b084 <operator new(unsigned int)>
   19884:	e1a01004 	mov	r1, r4
   19888:	eb000068 	bl	19a30 <CNetTask::CNetTask(CNetSubSystem*)>
   1988c:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   19890:	e3530000 	cmp	r3, #0
   19894:	0a00000c 	beq	198cc <CNetSubSystem::Initialize(bool)+0xe0>
   19898:	e5943128 	ldr	r3, [r4, #296]	; 0x128
   1989c:	e3530000 	cmp	r3, #0
   198a0:	1a000013 	bne	198f4 <CNetSubSystem::Initialize(bool)+0x108>
   198a4:	e1a00004 	mov	r0, r4
   198a8:	eb0038c7 	bl	27bcc <CString::operator char const*() const>
   198ac:	e1a08000 	mov	r8, r0
   198b0:	e3a00e1e 	mov	r0, #480	; 0x1e0
   198b4:	eb0045f2 	bl	2b084 <operator new(unsigned int)>
   198b8:	e1a07000 	mov	r7, r0
   198bc:	e1a02008 	mov	r2, r8
   198c0:	e1a01004 	mov	r1, r4
   198c4:	eb001ffc 	bl	218bc <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>
   198c8:	e5847128 	str	r7, [r4, #296]	; 0x128
   198cc:	e3560000 	cmp	r6, #0
   198d0:	1a000002 	bne	198e0 <CNetSubSystem::Initialize(bool)+0xf4>
   198d4:	eaffffd5 	b	19830 <CNetSubSystem::Initialize(bool)+0x44>
   198d8:	eb002b1e 	bl	24558 <CScheduler::Get()>
   198dc:	eb002a8a 	bl	2430c <CScheduler::Yield()>
   198e0:	e1a00004 	mov	r0, r4
   198e4:	ebffffb0 	bl	197ac <CNetSubSystem::IsRunning() const>
   198e8:	e3500000 	cmp	r0, #0
   198ec:	0afffff9 	beq	198d8 <CNetSubSystem::Initialize(bool)+0xec>
   198f0:	eaffffce 	b	19830 <CNetSubSystem::Initialize(bool)+0x44>
   198f4:	e3a02060 	mov	r2, #96	; 0x60
   198f8:	e59f1004 	ldr	r1, [pc, #4]	; 19904 <CNetSubSystem::Initialize(bool)+0x118>
   198fc:	e59f0004 	ldr	r0, [pc, #4]	; 19908 <CNetSubSystem::Initialize(bool)+0x11c>
   19900:	eb002bc2 	bl	24810 <assertion_failed>
   19904:	000439a0 	.word	0x000439a0
   19908:	000439d8 	.word	0x000439d8

0001990c <CNetSubSystem::Get()>:
   1990c:	e59f3020 	ldr	r3, [pc, #32]	; 19934 <CNetSubSystem::Get()+0x28>
   19910:	e5930000 	ldr	r0, [r3]
   19914:	e3500000 	cmp	r0, #0
   19918:	0a000000 	beq	19920 <CNetSubSystem::Get()+0x14>
   1991c:	e12fff1e 	bx	lr
   19920:	e92d4010 	push	{r4, lr}
   19924:	e3a020a3 	mov	r2, #163	; 0xa3
   19928:	e59f1008 	ldr	r1, [pc, #8]	; 19938 <CNetSubSystem::Get()+0x2c>
   1992c:	e59f0008 	ldr	r0, [pc, #8]	; 1993c <CNetSubSystem::Get()+0x30>
   19930:	eb002bb6 	bl	24810 <assertion_failed>
   19934:	0004e200 	.word	0x0004e200
   19938:	000439a0 	.word	0x000439a0
   1993c:	000439ec 	.word	0x000439ec

00019940 <CNetSubSystem::~CNetSubSystem()>:
   19940:	e92d4010 	push	{r4, lr}
   19944:	e3a02000 	mov	r2, #0
   19948:	e1a04000 	mov	r4, r0
   1994c:	e59f3038 	ldr	r3, [pc, #56]	; 1998c <CNetSubSystem::~CNetSubSystem()+0x4c>
   19950:	e28000d8 	add	r0, r0, #216	; 0xd8
   19954:	e5832000 	str	r2, [r3]
   19958:	eb000336 	bl	1a638 <CTransportLayer::~CTransportLayer()>
   1995c:	e2840098 	add	r0, r4, #152	; 0x98
   19960:	eb000420 	bl	1a9e8 <CNetworkLayer::~CNetworkLayer()>
   19964:	e2840060 	add	r0, r4, #96	; 0x60
   19968:	eb00065d 	bl	1b2e4 <CLinkLayer::~CLinkLayer()>
   1996c:	e284003c 	add	r0, r4, #60	; 0x3c
   19970:	eb000819 	bl	1b9dc <CNetDeviceLayer::~CNetDeviceLayer()>
   19974:	e2840010 	add	r0, r4, #16
   19978:	eb001c93 	bl	20bcc <CNetConfig::~CNetConfig()>
   1997c:	e1a00004 	mov	r0, r4
   19980:	eb003848 	bl	27aa8 <CString::~CString()>
   19984:	e1a00004 	mov	r0, r4
   19988:	e8bd8010 	pop	{r4, pc}
   1998c:	0004e200 	.word	0x0004e200

00019990 <CNetTask::~CNetTask()>:
   19990:	e3a02000 	mov	r2, #0
   19994:	e92d4010 	push	{r4, lr}
   19998:	e1a04000 	mov	r4, r0
   1999c:	e59f3010 	ldr	r3, [pc, #16]	; 199b4 <CNetTask::~CNetTask()+0x24>
   199a0:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   199a4:	e5803000 	str	r3, [r0]
   199a8:	eb0028f4 	bl	23d80 <CTask::~CTask()>
   199ac:	e1a00004 	mov	r0, r4
   199b0:	e8bd8010 	pop	{r4, pc}
   199b4:	00043a04 	.word	0x00043a04

000199b8 <CNetTask::~CNetTask()>:
   199b8:	e3a02000 	mov	r2, #0
   199bc:	e92d4010 	push	{r4, lr}
   199c0:	e1a04000 	mov	r4, r0
   199c4:	e59f301c 	ldr	r3, [pc, #28]	; 199e8 <CNetTask::~CNetTask()+0x30>
   199c8:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   199cc:	e5803000 	str	r3, [r0]
   199d0:	eb0028ea 	bl	23d80 <CTask::~CTask()>
   199d4:	e1a00004 	mov	r0, r4
   199d8:	e3a010e0 	mov	r1, #224	; 0xe0
   199dc:	eb0045b6 	bl	2b0bc <operator delete(void*, unsigned int)>
   199e0:	e1a00004 	mov	r0, r4
   199e4:	e8bd8010 	pop	{r4, pc}
   199e8:	00043a04 	.word	0x00043a04

000199ec <CNetTask::Run()>:
   199ec:	e92d4010 	push	{r4, lr}
   199f0:	e1a04000 	mov	r4, r0
   199f4:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   199f8:	e3500000 	cmp	r0, #0
   199fc:	0a000005 	beq	19a18 <CNetTask::Run()+0x2c>
   19a00:	ebffff51 	bl	1974c <CNetSubSystem::Process()>
   19a04:	eb002ad3 	bl	24558 <CScheduler::Get()>
   19a08:	eb002a3f 	bl	2430c <CScheduler::Yield()>
   19a0c:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   19a10:	e3500000 	cmp	r0, #0
   19a14:	1afffff9 	bne	19a00 <CNetTask::Run()+0x14>
   19a18:	e3a02026 	mov	r2, #38	; 0x26
   19a1c:	e59f1004 	ldr	r1, [pc, #4]	; 19a28 <CNetTask::Run()+0x3c>
   19a20:	e59f0004 	ldr	r0, [pc, #4]	; 19a2c <CNetTask::Run()+0x40>
   19a24:	eb002b79 	bl	24810 <assertion_failed>
   19a28:	00043a10 	.word	0x00043a10
   19a2c:	00043a1c 	.word	0x00043a1c

00019a30 <CNetTask::CNetTask(CNetSubSystem*)>:
   19a30:	e92d4070 	push	{r4, r5, r6, lr}
   19a34:	e1a04000 	mov	r4, r0
   19a38:	e1a05001 	mov	r5, r1
   19a3c:	e3a01902 	mov	r1, #32768	; 0x8000
   19a40:	eb002921 	bl	23ecc <CTask::CTask(unsigned int)>
   19a44:	e59f300c 	ldr	r3, [pc, #12]	; 19a58 <CNetTask::CNetTask(CNetSubSystem*)+0x28>
   19a48:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   19a4c:	e5843000 	str	r3, [r4]
   19a50:	e1a00004 	mov	r0, r4
   19a54:	e8bd8070 	pop	{r4, r5, r6, pc}
   19a58:	00043a04 	.word	0x00043a04

00019a5c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>:
   19a5c:	e92d4070 	push	{r4, r5, r6, lr}
   19a60:	e1a06002 	mov	r6, r2
   19a64:	e3a02064 	mov	r2, #100	; 0x64
   19a68:	e1a04000 	mov	r4, r0
   19a6c:	e5801000 	str	r1, [r0]
   19a70:	e1a05001 	mov	r5, r1
   19a74:	e5806004 	str	r6, [r0, #4]
   19a78:	e1a01002 	mov	r1, r2
   19a7c:	e2800008 	add	r0, r0, #8
   19a80:	eb00375c 	bl	277f8 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   19a84:	e3a03000 	mov	r3, #0
   19a88:	e59f0054 	ldr	r0, [pc, #84]	; 19ae4 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x88>
   19a8c:	e584301c 	str	r3, [r4, #28]
   19a90:	e1c401b8 	strh	r0, [r4, #24]
   19a94:	e1a02006 	mov	r2, r6
   19a98:	e1a01005 	mov	r1, r5
   19a9c:	e2840020 	add	r0, r4, #32
   19aa0:	eb001b88 	bl	208c8 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>
   19aa4:	e5943000 	ldr	r3, [r4]
   19aa8:	e3530000 	cmp	r3, #0
   19aac:	0a000004 	beq	19ac4 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x68>
   19ab0:	e5943004 	ldr	r3, [r4, #4]
   19ab4:	e3530000 	cmp	r3, #0
   19ab8:	0a000005 	beq	19ad4 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x78>
   19abc:	e1a00004 	mov	r0, r4
   19ac0:	e8bd8070 	pop	{r4, r5, r6, pc}
   19ac4:	e3a02025 	mov	r2, #37	; 0x25
   19ac8:	e59f1018 	ldr	r1, [pc, #24]	; 19ae8 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x8c>
   19acc:	e59f0018 	ldr	r0, [pc, #24]	; 19aec <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x90>
   19ad0:	eb002b4e 	bl	24810 <assertion_failed>
   19ad4:	e3a02026 	mov	r2, #38	; 0x26
   19ad8:	e59f1008 	ldr	r1, [pc, #8]	; 19ae8 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x8c>
   19adc:	e59f000c 	ldr	r0, [pc, #12]	; 19af0 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x94>
   19ae0:	eb002b4a 	bl	24810 <assertion_failed>
   19ae4:	ffffea60 	.word	0xffffea60
   19ae8:	00043a34 	.word	0x00043a34
   19aec:	00043a48 	.word	0x00043a48
   19af0:	00043a5c 	.word	0x00043a5c

00019af4 <CTransportLayer::Initialize()>:
   19af4:	e3a00001 	mov	r0, #1
   19af8:	e12fff1e 	bx	lr

00019afc <CTransportLayer::Bind(unsigned short, int)>:
   19afc:	e3520011 	cmp	r2, #17
   19b00:	1a00004d 	bne	19c3c <CTransportLayer::Bind(unsigned short, int)+0x140>
   19b04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19b08:	e1a06000 	mov	r6, r0
   19b0c:	e590001c 	ldr	r0, [r0, #28]
   19b10:	e1a07001 	mov	r7, r1
   19b14:	e3500000 	cmp	r0, #0
   19b18:	1a000038 	bne	19c00 <CTransportLayer::Bind(unsigned short, int)+0x104>
   19b1c:	e3a04000 	mov	r4, #0
   19b20:	e2865008 	add	r5, r6, #8
   19b24:	ea000006 	b	19b44 <CTransportLayer::Bind(unsigned short, int)+0x48>
   19b28:	e1a01004 	mov	r1, r4
   19b2c:	e1a00005 	mov	r0, r5
   19b30:	eb003758 	bl	27898 <CPtrArray::operator[](unsigned int)>
   19b34:	e5903000 	ldr	r3, [r0]
   19b38:	e3530000 	cmp	r3, #0
   19b3c:	0a000004 	beq	19b54 <CTransportLayer::Bind(unsigned short, int)+0x58>
   19b40:	e2844001 	add	r4, r4, #1
   19b44:	e1a00005 	mov	r0, r5
   19b48:	eb003750 	bl	27890 <CPtrArray::GetCount() const>
   19b4c:	e1540000 	cmp	r4, r0
   19b50:	3afffff4 	bcc	19b28 <CTransportLayer::Bind(unsigned short, int)+0x2c>
   19b54:	e1a00005 	mov	r0, r5
   19b58:	eb00374c 	bl	27890 <CPtrArray::GetCount() const>
   19b5c:	e1540000 	cmp	r4, r0
   19b60:	2a000021 	bcs	19bec <CTransportLayer::Bind(unsigned short, int)+0xf0>
   19b64:	e3570000 	cmp	r7, #0
   19b68:	0a00001a 	beq	19bd8 <CTransportLayer::Bind(unsigned short, int)+0xdc>
   19b6c:	e5963000 	ldr	r3, [r6]
   19b70:	e3530000 	cmp	r3, #0
   19b74:	0a000028 	beq	19c1c <CTransportLayer::Bind(unsigned short, int)+0x120>
   19b78:	e5963004 	ldr	r3, [r6, #4]
   19b7c:	e3530000 	cmp	r3, #0
   19b80:	0a000029 	beq	19c2c <CTransportLayer::Bind(unsigned short, int)+0x130>
   19b84:	e3a00048 	mov	r0, #72	; 0x48
   19b88:	eb00453d 	bl	2b084 <operator new(unsigned int)>
   19b8c:	e8960006 	ldm	r6, {r1, r2}
   19b90:	e1a03007 	mov	r3, r7
   19b94:	e1a08000 	mov	r8, r0
   19b98:	eb0010f5 	bl	1df74 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   19b9c:	e1a01004 	mov	r1, r4
   19ba0:	e1a00005 	mov	r0, r5
   19ba4:	eb00373b 	bl	27898 <CPtrArray::operator[](unsigned int)>
   19ba8:	e1a01004 	mov	r1, r4
   19bac:	e5808000 	str	r8, [r0]
   19bb0:	e1a00005 	mov	r0, r5
   19bb4:	eb003737 	bl	27898 <CPtrArray::operator[](unsigned int)>
   19bb8:	e5903000 	ldr	r3, [r0]
   19bbc:	e3530000 	cmp	r3, #0
   19bc0:	0a00001f 	beq	19c44 <CTransportLayer::Bind(unsigned short, int)+0x148>
   19bc4:	e596301c 	ldr	r3, [r6, #28]
   19bc8:	e3530000 	cmp	r3, #0
   19bcc:	1a000010 	bne	19c14 <CTransportLayer::Bind(unsigned short, int)+0x118>
   19bd0:	e1a00004 	mov	r0, r4
   19bd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19bd8:	e596301c 	ldr	r3, [r6, #28]
   19bdc:	e3530000 	cmp	r3, #0
   19be0:	1a000008 	bne	19c08 <CTransportLayer::Bind(unsigned short, int)+0x10c>
   19be4:	e3e00000 	mvn	r0, #0
   19be8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19bec:	e3a01000 	mov	r1, #0
   19bf0:	e1a00005 	mov	r0, r5
   19bf4:	eb00375f 	bl	27978 <CPtrArray::Append(void*)>
   19bf8:	e1a04000 	mov	r4, r0
   19bfc:	eaffffd8 	b	19b64 <CTransportLayer::Bind(unsigned short, int)+0x68>
   19c00:	eb004851 	bl	2bd4c <EnterCritical>
   19c04:	eaffffc4 	b	19b1c <CTransportLayer::Bind(unsigned short, int)+0x20>
   19c08:	eb00487a 	bl	2bdf8 <LeaveCritical>
   19c0c:	e3e00000 	mvn	r0, #0
   19c10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19c14:	eb004877 	bl	2bdf8 <LeaveCritical>
   19c18:	eaffffec 	b	19bd0 <CTransportLayer::Bind(unsigned short, int)+0xd4>
   19c1c:	e3a020ad 	mov	r2, #173	; 0xad
   19c20:	e59f102c 	ldr	r1, [pc, #44]	; 19c54 <CTransportLayer::Bind(unsigned short, int)+0x158>
   19c24:	e59f002c 	ldr	r0, [pc, #44]	; 19c58 <CTransportLayer::Bind(unsigned short, int)+0x15c>
   19c28:	eb002af8 	bl	24810 <assertion_failed>
   19c2c:	e3a020ae 	mov	r2, #174	; 0xae
   19c30:	e59f101c 	ldr	r1, [pc, #28]	; 19c54 <CTransportLayer::Bind(unsigned short, int)+0x158>
   19c34:	e59f0020 	ldr	r0, [pc, #32]	; 19c5c <CTransportLayer::Bind(unsigned short, int)+0x160>
   19c38:	eb002af4 	bl	24810 <assertion_failed>
   19c3c:	e3e00000 	mvn	r0, #0
   19c40:	e12fff1e 	bx	lr
   19c44:	e3a020b0 	mov	r2, #176	; 0xb0
   19c48:	e59f1004 	ldr	r1, [pc, #4]	; 19c54 <CTransportLayer::Bind(unsigned short, int)+0x158>
   19c4c:	e59f000c 	ldr	r0, [pc, #12]	; 19c60 <CTransportLayer::Bind(unsigned short, int)+0x164>
   19c50:	eb002aee 	bl	24810 <assertion_failed>
   19c54:	00043a34 	.word	0x00043a34
   19c58:	00043a48 	.word	0x00043a48
   19c5c:	00043a5c 	.word	0x00043a5c
   19c60:	00043a74 	.word	0x00043a74

00019c64 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>:
   19c64:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c68:	e1a08000 	mov	r8, r0
   19c6c:	e590001c 	ldr	r0, [r0, #28]
   19c70:	e24dd014 	sub	sp, sp, #20
   19c74:	e3500000 	cmp	r0, #0
   19c78:	e58d1008 	str	r1, [sp, #8]
   19c7c:	e58d200c 	str	r2, [sp, #12]
   19c80:	e1a06003 	mov	r6, r3
   19c84:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
   19c88:	1a000072 	bne	19e58 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1f4>
   19c8c:	e3a07000 	mov	r7, #0
   19c90:	e2885008 	add	r5, r8, #8
   19c94:	ea000006 	b	19cb4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x50>
   19c98:	e1a01007 	mov	r1, r7
   19c9c:	e1a00005 	mov	r0, r5
   19ca0:	eb0036fc 	bl	27898 <CPtrArray::operator[](unsigned int)>
   19ca4:	e5903000 	ldr	r3, [r0]
   19ca8:	e3530000 	cmp	r3, #0
   19cac:	0a000004 	beq	19cc4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x60>
   19cb0:	e2877001 	add	r7, r7, #1
   19cb4:	e1a00005 	mov	r0, r5
   19cb8:	eb0036f4 	bl	27890 <CPtrArray::GetCount() const>
   19cbc:	e1570000 	cmp	r7, r0
   19cc0:	3afffff4 	bcc	19c98 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x34>
   19cc4:	e1a00005 	mov	r0, r5
   19cc8:	eb0036f0 	bl	27890 <CPtrArray::GetCount() const>
   19ccc:	e1570000 	cmp	r7, r0
   19cd0:	2a00005b 	bcs	19e44 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1e0>
   19cd4:	e3560000 	cmp	r6, #0
   19cd8:	1a000026 	bne	19d78 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x114>
   19cdc:	e59fa200 	ldr	sl, [pc, #512]	; 19ee4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x280>
   19ce0:	e59fb200 	ldr	fp, [pc, #512]	; 19ee8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x284>
   19ce4:	e1d861b8 	ldrh	r6, [r8, #24]
   19ce8:	e3a04000 	mov	r4, #0
   19cec:	e2863001 	add	r3, r6, #1
   19cf0:	e6ff3073 	uxth	r3, r3
   19cf4:	e153000a 	cmp	r3, sl
   19cf8:	91c831b8 	strhls	r3, [r8, #24]
   19cfc:	81c8b1b8 	strhhi	fp, [r8, #24]
   19d00:	ea000000 	b	19d08 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   19d04:	e2844001 	add	r4, r4, #1
   19d08:	e1a00005 	mov	r0, r5
   19d0c:	eb0036df 	bl	27890 <CPtrArray::GetCount() const>
   19d10:	e1540000 	cmp	r4, r0
   19d14:	2a000013 	bcs	19d68 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x104>
   19d18:	e1a01004 	mov	r1, r4
   19d1c:	e1a00005 	mov	r0, r5
   19d20:	eb0036dc 	bl	27898 <CPtrArray::operator[](unsigned int)>
   19d24:	e5903000 	ldr	r3, [r0]
   19d28:	e3530000 	cmp	r3, #0
   19d2c:	0afffff4 	beq	19d04 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19d30:	e1a01004 	mov	r1, r4
   19d34:	e1a00005 	mov	r0, r5
   19d38:	eb0036d6 	bl	27898 <CPtrArray::operator[](unsigned int)>
   19d3c:	e5900000 	ldr	r0, [r0]
   19d40:	eb000e0c 	bl	1d578 <CNetConnection::GetOwnPort() const>
   19d44:	e1560000 	cmp	r6, r0
   19d48:	1affffed 	bne	19d04 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19d4c:	e1a01004 	mov	r1, r4
   19d50:	e1a00005 	mov	r0, r5
   19d54:	eb0036cf 	bl	27898 <CPtrArray::operator[](unsigned int)>
   19d58:	e5900000 	ldr	r0, [r0]
   19d5c:	eb000e10 	bl	1d5a4 <CNetConnection::GetProtocol() const>
   19d60:	e1500009 	cmp	r0, r9
   19d64:	1affffe6 	bne	19d04 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19d68:	e1a00005 	mov	r0, r5
   19d6c:	eb0036c7 	bl	27890 <CPtrArray::GetCount() const>
   19d70:	e1540000 	cmp	r4, r0
   19d74:	3affffda 	bcc	19ce4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x80>
   19d78:	e5983000 	ldr	r3, [r8]
   19d7c:	e3530000 	cmp	r3, #0
   19d80:	0a000049 	beq	19eac <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x248>
   19d84:	e5983004 	ldr	r3, [r8, #4]
   19d88:	e3530000 	cmp	r3, #0
   19d8c:	0a00004a 	beq	19ebc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x258>
   19d90:	e3590006 	cmp	r9, #6
   19d94:	0a000031 	beq	19e60 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1fc>
   19d98:	e3590011 	cmp	r9, #17
   19d9c:	1a000022 	bne	19e2c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1c8>
   19da0:	e3a00048 	mov	r0, #72	; 0x48
   19da4:	eb0044b6 	bl	2b084 <operator new(unsigned int)>
   19da8:	e59d300c 	ldr	r3, [sp, #12]
   19dac:	e5982004 	ldr	r2, [r8, #4]
   19db0:	e58d6004 	str	r6, [sp, #4]
   19db4:	e5981000 	ldr	r1, [r8]
   19db8:	e58d3000 	str	r3, [sp]
   19dbc:	e59d3008 	ldr	r3, [sp, #8]
   19dc0:	e1a04000 	mov	r4, r0
   19dc4:	eb00104f 	bl	1df08 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   19dc8:	e1a01007 	mov	r1, r7
   19dcc:	e1a00005 	mov	r0, r5
   19dd0:	eb0036b0 	bl	27898 <CPtrArray::operator[](unsigned int)>
   19dd4:	e598301c 	ldr	r3, [r8, #28]
   19dd8:	e5804000 	str	r4, [r0]
   19ddc:	e3530000 	cmp	r3, #0
   19de0:	1a00002f 	bne	19ea4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x240>
   19de4:	e1a01007 	mov	r1, r7
   19de8:	e1a00005 	mov	r0, r5
   19dec:	eb0036a9 	bl	27898 <CPtrArray::operator[](unsigned int)>
   19df0:	e5903000 	ldr	r3, [r0]
   19df4:	e3530000 	cmp	r3, #0
   19df8:	0a000035 	beq	19ed4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x270>
   19dfc:	e1a01007 	mov	r1, r7
   19e00:	e1a00005 	mov	r0, r5
   19e04:	eb0036a3 	bl	27898 <CPtrArray::operator[](unsigned int)>
   19e08:	e5900000 	ldr	r0, [r0]
   19e0c:	e5903000 	ldr	r3, [r0]
   19e10:	e5933008 	ldr	r3, [r3, #8]
   19e14:	e12fff33 	blx	r3
   19e18:	e3500000 	cmp	r0, #0
   19e1c:	ba000005 	blt	19e38 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1d4>
   19e20:	e1a00007 	mov	r0, r7
   19e24:	e28dd014 	add	sp, sp, #20
   19e28:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e2c:	e598301c 	ldr	r3, [r8, #28]
   19e30:	e3530000 	cmp	r3, #0
   19e34:	1a000024 	bne	19ecc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x268>
   19e38:	e3e00000 	mvn	r0, #0
   19e3c:	e28dd014 	add	sp, sp, #20
   19e40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e44:	e3a01000 	mov	r1, #0
   19e48:	e1a00005 	mov	r0, r5
   19e4c:	eb0036c9 	bl	27978 <CPtrArray::Append(void*)>
   19e50:	e1a07000 	mov	r7, r0
   19e54:	eaffff9e 	b	19cd4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x70>
   19e58:	eb0047bb 	bl	2bd4c <EnterCritical>
   19e5c:	eaffff8a 	b	19c8c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28>
   19e60:	e3a000e0 	mov	r0, #224	; 0xe0
   19e64:	eb004486 	bl	2b084 <operator new(unsigned int)>
   19e68:	e59d300c 	ldr	r3, [sp, #12]
   19e6c:	e5982004 	ldr	r2, [r8, #4]
   19e70:	e58d6004 	str	r6, [sp, #4]
   19e74:	e5981000 	ldr	r1, [r8]
   19e78:	e58d3000 	str	r3, [sp]
   19e7c:	e59d3008 	ldr	r3, [sp, #8]
   19e80:	e1a04000 	mov	r4, r0
   19e84:	eb0012ba 	bl	1e974 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   19e88:	e1a01007 	mov	r1, r7
   19e8c:	e1a00005 	mov	r0, r5
   19e90:	eb003680 	bl	27898 <CPtrArray::operator[](unsigned int)>
   19e94:	e598301c 	ldr	r3, [r8, #28]
   19e98:	e5804000 	str	r4, [r0]
   19e9c:	e3530000 	cmp	r3, #0
   19ea0:	0affffcf 	beq	19de4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x180>
   19ea4:	eb0047d3 	bl	2bdf8 <LeaveCritical>
   19ea8:	eaffffcd 	b	19de4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x180>
   19eac:	e3a020e1 	mov	r2, #225	; 0xe1
   19eb0:	e59f1034 	ldr	r1, [pc, #52]	; 19eec <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   19eb4:	e59f0034 	ldr	r0, [pc, #52]	; 19ef0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28c>
   19eb8:	eb002a54 	bl	24810 <assertion_failed>
   19ebc:	e3a020e2 	mov	r2, #226	; 0xe2
   19ec0:	e59f1024 	ldr	r1, [pc, #36]	; 19eec <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   19ec4:	e59f0028 	ldr	r0, [pc, #40]	; 19ef4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x290>
   19ec8:	eb002a50 	bl	24810 <assertion_failed>
   19ecc:	eb0047c9 	bl	2bdf8 <LeaveCritical>
   19ed0:	eaffffd8 	b	19e38 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1d4>
   19ed4:	e3a020f4 	mov	r2, #244	; 0xf4
   19ed8:	e59f100c 	ldr	r1, [pc, #12]	; 19eec <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   19edc:	e59f0014 	ldr	r0, [pc, #20]	; 19ef8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x294>
   19ee0:	eb002a4a 	bl	24810 <assertion_failed>
   19ee4:	0000ee47 	.word	0x0000ee47
   19ee8:	ffffea60 	.word	0xffffea60
   19eec:	00043a34 	.word	0x00043a34
   19ef0:	00043a48 	.word	0x00043a48
   19ef4:	00043a5c 	.word	0x00043a5c
   19ef8:	00043a74 	.word	0x00043a74

00019efc <CTransportLayer::Listen(unsigned short, int)>:
   19efc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19f00:	e1a06000 	mov	r6, r0
   19f04:	e590001c 	ldr	r0, [r0, #28]
   19f08:	e1a07001 	mov	r7, r1
   19f0c:	e3500000 	cmp	r0, #0
   19f10:	e1a08002 	mov	r8, r2
   19f14:	1a00001f 	bne	19f98 <CTransportLayer::Listen(unsigned short, int)+0x9c>
   19f18:	e3a04000 	mov	r4, #0
   19f1c:	e2865008 	add	r5, r6, #8
   19f20:	ea000006 	b	19f40 <CTransportLayer::Listen(unsigned short, int)+0x44>
   19f24:	e1a01004 	mov	r1, r4
   19f28:	e1a00005 	mov	r0, r5
   19f2c:	eb003659 	bl	27898 <CPtrArray::operator[](unsigned int)>
   19f30:	e5903000 	ldr	r3, [r0]
   19f34:	e3530000 	cmp	r3, #0
   19f38:	0a000004 	beq	19f50 <CTransportLayer::Listen(unsigned short, int)+0x54>
   19f3c:	e2844001 	add	r4, r4, #1
   19f40:	e1a00005 	mov	r0, r5
   19f44:	eb003651 	bl	27890 <CPtrArray::GetCount() const>
   19f48:	e1540000 	cmp	r4, r0
   19f4c:	3afffff4 	bcc	19f24 <CTransportLayer::Listen(unsigned short, int)+0x28>
   19f50:	e1a00005 	mov	r0, r5
   19f54:	eb00364d 	bl	27890 <CPtrArray::GetCount() const>
   19f58:	e1540000 	cmp	r4, r0
   19f5c:	2a000008 	bcs	19f84 <CTransportLayer::Listen(unsigned short, int)+0x88>
   19f60:	e3570000 	cmp	r7, #0
   19f64:	0a000001 	beq	19f70 <CTransportLayer::Listen(unsigned short, int)+0x74>
   19f68:	e3580006 	cmp	r8, #6
   19f6c:	0a00000e 	beq	19fac <CTransportLayer::Listen(unsigned short, int)+0xb0>
   19f70:	e596301c 	ldr	r3, [r6, #28]
   19f74:	e3530000 	cmp	r3, #0
   19f78:	1a000008 	bne	19fa0 <CTransportLayer::Listen(unsigned short, int)+0xa4>
   19f7c:	e3e00000 	mvn	r0, #0
   19f80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19f84:	e3a01000 	mov	r1, #0
   19f88:	e1a00005 	mov	r0, r5
   19f8c:	eb003679 	bl	27978 <CPtrArray::Append(void*)>
   19f90:	e1a04000 	mov	r4, r0
   19f94:	eafffff1 	b	19f60 <CTransportLayer::Listen(unsigned short, int)+0x64>
   19f98:	eb00476b 	bl	2bd4c <EnterCritical>
   19f9c:	eaffffdd 	b	19f18 <CTransportLayer::Listen(unsigned short, int)+0x1c>
   19fa0:	eb004794 	bl	2bdf8 <LeaveCritical>
   19fa4:	e3e00000 	mvn	r0, #0
   19fa8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19fac:	e5963000 	ldr	r3, [r6]
   19fb0:	e3530000 	cmp	r3, #0
   19fb4:	0a000019 	beq	1a020 <CTransportLayer::Listen(unsigned short, int)+0x124>
   19fb8:	e5963004 	ldr	r3, [r6, #4]
   19fbc:	e3530000 	cmp	r3, #0
   19fc0:	0a00001a 	beq	1a030 <CTransportLayer::Listen(unsigned short, int)+0x134>
   19fc4:	e3a000e0 	mov	r0, #224	; 0xe0
   19fc8:	eb00442d 	bl	2b084 <operator new(unsigned int)>
   19fcc:	e8960006 	ldm	r6, {r1, r2}
   19fd0:	e1a03007 	mov	r3, r7
   19fd4:	e1a08000 	mov	r8, r0
   19fd8:	eb0010a8 	bl	1e280 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   19fdc:	e1a01004 	mov	r1, r4
   19fe0:	e1a00005 	mov	r0, r5
   19fe4:	eb00362b 	bl	27898 <CPtrArray::operator[](unsigned int)>
   19fe8:	e1a01004 	mov	r1, r4
   19fec:	e5808000 	str	r8, [r0]
   19ff0:	e1a00005 	mov	r0, r5
   19ff4:	eb003627 	bl	27898 <CPtrArray::operator[](unsigned int)>
   19ff8:	e5903000 	ldr	r3, [r0]
   19ffc:	e3530000 	cmp	r3, #0
   1a000:	0a00000e 	beq	1a040 <CTransportLayer::Listen(unsigned short, int)+0x144>
   1a004:	e596301c 	ldr	r3, [r6, #28]
   1a008:	e3530000 	cmp	r3, #0
   1a00c:	1a000001 	bne	1a018 <CTransportLayer::Listen(unsigned short, int)+0x11c>
   1a010:	e1a00004 	mov	r0, r4
   1a014:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a018:	eb004776 	bl	2bdf8 <LeaveCritical>
   1a01c:	eafffffb 	b	1a010 <CTransportLayer::Listen(unsigned short, int)+0x114>
   1a020:	e59f2028 	ldr	r2, [pc, #40]	; 1a050 <CTransportLayer::Listen(unsigned short, int)+0x154>
   1a024:	e59f1028 	ldr	r1, [pc, #40]	; 1a054 <CTransportLayer::Listen(unsigned short, int)+0x158>
   1a028:	e59f0028 	ldr	r0, [pc, #40]	; 1a058 <CTransportLayer::Listen(unsigned short, int)+0x15c>
   1a02c:	eb0029f7 	bl	24810 <assertion_failed>
   1a030:	e59f2024 	ldr	r2, [pc, #36]	; 1a05c <CTransportLayer::Listen(unsigned short, int)+0x160>
   1a034:	e59f1018 	ldr	r1, [pc, #24]	; 1a054 <CTransportLayer::Listen(unsigned short, int)+0x158>
   1a038:	e59f0020 	ldr	r0, [pc, #32]	; 1a060 <CTransportLayer::Listen(unsigned short, int)+0x164>
   1a03c:	eb0029f3 	bl	24810 <assertion_failed>
   1a040:	e59f201c 	ldr	r2, [pc, #28]	; 1a064 <CTransportLayer::Listen(unsigned short, int)+0x168>
   1a044:	e59f1008 	ldr	r1, [pc, #8]	; 1a054 <CTransportLayer::Listen(unsigned short, int)+0x158>
   1a048:	e59f0018 	ldr	r0, [pc, #24]	; 1a068 <CTransportLayer::Listen(unsigned short, int)+0x16c>
   1a04c:	eb0029ef 	bl	24810 <assertion_failed>
   1a050:	0000011e 	.word	0x0000011e
   1a054:	00043a34 	.word	0x00043a34
   1a058:	00043a48 	.word	0x00043a48
   1a05c:	0000011f 	.word	0x0000011f
   1a060:	00043a5c 	.word	0x00043a5c
   1a064:	00000121 	.word	0x00000121
   1a068:	00043a74 	.word	0x00043a74

0001a06c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>:
   1a06c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a070:	e2535000 	subs	r5, r3, #0
   1a074:	ba00001c 	blt	1a0ec <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x80>
   1a078:	e2804008 	add	r4, r0, #8
   1a07c:	e1a00004 	mov	r0, r4
   1a080:	e1a06001 	mov	r6, r1
   1a084:	e1a07002 	mov	r7, r2
   1a088:	eb003600 	bl	27890 <CPtrArray::GetCount() const>
   1a08c:	e1550000 	cmp	r5, r0
   1a090:	ba000001 	blt	1a09c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x30>
   1a094:	e3e00000 	mvn	r0, #0
   1a098:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a09c:	e1a01005 	mov	r1, r5
   1a0a0:	e1a00004 	mov	r0, r4
   1a0a4:	eb0035fb 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a0a8:	e5903000 	ldr	r3, [r0]
   1a0ac:	e3530000 	cmp	r3, #0
   1a0b0:	0afffff7 	beq	1a094 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x28>
   1a0b4:	e3560000 	cmp	r6, #0
   1a0b8:	0a00000f 	beq	1a0fc <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x90>
   1a0bc:	e3570000 	cmp	r7, #0
   1a0c0:	0a000011 	beq	1a10c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xa0>
   1a0c4:	e1a01005 	mov	r1, r5
   1a0c8:	e1a00004 	mov	r0, r4
   1a0cc:	eb0035f1 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a0d0:	e5900000 	ldr	r0, [r0]
   1a0d4:	e1a02007 	mov	r2, r7
   1a0d8:	e5903000 	ldr	r3, [r0]
   1a0dc:	e1a01006 	mov	r1, r6
   1a0e0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a0e4:	e593300c 	ldr	r3, [r3, #12]
   1a0e8:	e12fff13 	bx	r3
   1a0ec:	e59f2028 	ldr	r2, [pc, #40]	; 1a11c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb0>
   1a0f0:	e59f1028 	ldr	r1, [pc, #40]	; 1a120 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb4>
   1a0f4:	e59f0028 	ldr	r0, [pc, #40]	; 1a124 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb8>
   1a0f8:	eb0029c4 	bl	24810 <assertion_failed>
   1a0fc:	e59f2024 	ldr	r2, [pc, #36]	; 1a128 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xbc>
   1a100:	e59f1018 	ldr	r1, [pc, #24]	; 1a120 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb4>
   1a104:	e59f0020 	ldr	r0, [pc, #32]	; 1a12c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc0>
   1a108:	eb0029c0 	bl	24810 <assertion_failed>
   1a10c:	e59f201c 	ldr	r2, [pc, #28]	; 1a130 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   1a110:	e59f1008 	ldr	r1, [pc, #8]	; 1a120 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb4>
   1a114:	e59f0018 	ldr	r0, [pc, #24]	; 1a134 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc8>
   1a118:	eb0029bc 	bl	24810 <assertion_failed>
   1a11c:	0000012a 	.word	0x0000012a
   1a120:	00043a34 	.word	0x00043a34
   1a124:	00043a8c 	.word	0x00043a8c
   1a128:	00000131 	.word	0x00000131
   1a12c:	00043aa0 	.word	0x00043aa0
   1a130:	00000132 	.word	0x00000132
   1a134:	00043ab0 	.word	0x00043ab0

0001a138 <CTransportLayer::Disconnect(int)>:
   1a138:	e92d4070 	push	{r4, r5, r6, lr}
   1a13c:	e2515000 	subs	r5, r1, #0
   1a140:	ba000014 	blt	1a198 <CTransportLayer::Disconnect(int)+0x60>
   1a144:	e2804008 	add	r4, r0, #8
   1a148:	e1a00004 	mov	r0, r4
   1a14c:	eb0035cf 	bl	27890 <CPtrArray::GetCount() const>
   1a150:	e1550000 	cmp	r5, r0
   1a154:	ba000001 	blt	1a160 <CTransportLayer::Disconnect(int)+0x28>
   1a158:	e3e00000 	mvn	r0, #0
   1a15c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a160:	e1a01005 	mov	r1, r5
   1a164:	e1a00004 	mov	r0, r4
   1a168:	eb0035ca 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a16c:	e5903000 	ldr	r3, [r0]
   1a170:	e3530000 	cmp	r3, #0
   1a174:	0afffff7 	beq	1a158 <CTransportLayer::Disconnect(int)+0x20>
   1a178:	e1a01005 	mov	r1, r5
   1a17c:	e1a00004 	mov	r0, r4
   1a180:	eb0035c4 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a184:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a188:	e5900000 	ldr	r0, [r0]
   1a18c:	e5903000 	ldr	r3, [r0]
   1a190:	e5933010 	ldr	r3, [r3, #16]
   1a194:	e12fff13 	bx	r3
   1a198:	e3a02f4e 	mov	r2, #312	; 0x138
   1a19c:	e59f1004 	ldr	r1, [pc, #4]	; 1a1a8 <CTransportLayer::Disconnect(int)+0x70>
   1a1a0:	e59f0004 	ldr	r0, [pc, #4]	; 1a1ac <CTransportLayer::Disconnect(int)+0x74>
   1a1a4:	eb002999 	bl	24810 <assertion_failed>
   1a1a8:	00043a34 	.word	0x00043a34
   1a1ac:	00043a8c 	.word	0x00043a8c

0001a1b0 <CTransportLayer::Send(void const*, unsigned int, int, int)>:
   1a1b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a1b4:	e59d5018 	ldr	r5, [sp, #24]
   1a1b8:	e3550000 	cmp	r5, #0
   1a1bc:	ba00001f 	blt	1a240 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x90>
   1a1c0:	e2804008 	add	r4, r0, #8
   1a1c4:	e1a00004 	mov	r0, r4
   1a1c8:	e1a06001 	mov	r6, r1
   1a1cc:	e1a07002 	mov	r7, r2
   1a1d0:	e1a08003 	mov	r8, r3
   1a1d4:	eb0035ad 	bl	27890 <CPtrArray::GetCount() const>
   1a1d8:	e1550000 	cmp	r5, r0
   1a1dc:	ba000001 	blt	1a1e8 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x38>
   1a1e0:	e3e00000 	mvn	r0, #0
   1a1e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a1e8:	e1a01005 	mov	r1, r5
   1a1ec:	e1a00004 	mov	r0, r4
   1a1f0:	eb0035a8 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a1f4:	e5903000 	ldr	r3, [r0]
   1a1f8:	e3530000 	cmp	r3, #0
   1a1fc:	0afffff7 	beq	1a1e0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x30>
   1a200:	e3560000 	cmp	r6, #0
   1a204:	0a000011 	beq	1a250 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xa0>
   1a208:	e3570000 	cmp	r7, #0
   1a20c:	0a000013 	beq	1a260 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xb0>
   1a210:	e1a01005 	mov	r1, r5
   1a214:	e1a00004 	mov	r0, r4
   1a218:	eb00359e 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a21c:	e5900000 	ldr	r0, [r0]
   1a220:	e1a03008 	mov	r3, r8
   1a224:	e590c000 	ldr	ip, [r0]
   1a228:	e1a02007 	mov	r2, r7
   1a22c:	e59ce014 	ldr	lr, [ip, #20]
   1a230:	e1a01006 	mov	r1, r6
   1a234:	e1a0c00e 	mov	ip, lr
   1a238:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a23c:	e12fff1c 	bx	ip
   1a240:	e3a02f51 	mov	r2, #324	; 0x144
   1a244:	e59f1024 	ldr	r1, [pc, #36]	; 1a270 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc0>
   1a248:	e59f0024 	ldr	r0, [pc, #36]	; 1a274 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc4>
   1a24c:	eb00296f 	bl	24810 <assertion_failed>
   1a250:	e59f2020 	ldr	r2, [pc, #32]	; 1a278 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc8>
   1a254:	e59f1014 	ldr	r1, [pc, #20]	; 1a270 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc0>
   1a258:	e59f001c 	ldr	r0, [pc, #28]	; 1a27c <CTransportLayer::Send(void const*, unsigned int, int, int)+0xcc>
   1a25c:	eb00296b 	bl	24810 <assertion_failed>
   1a260:	e3a02f53 	mov	r2, #332	; 0x14c
   1a264:	e59f1004 	ldr	r1, [pc, #4]	; 1a270 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc0>
   1a268:	e59f0010 	ldr	r0, [pc, #16]	; 1a280 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   1a26c:	eb002967 	bl	24810 <assertion_failed>
   1a270:	00043a34 	.word	0x00043a34
   1a274:	00043a8c 	.word	0x00043a8c
   1a278:	0000014b 	.word	0x0000014b
   1a27c:	00043ac4 	.word	0x00043ac4
   1a280:	00043ad0 	.word	0x00043ad0

0001a284 <CTransportLayer::Receive(void*, int, int)>:
   1a284:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a288:	e2535000 	subs	r5, r3, #0
   1a28c:	ba00001a 	blt	1a2fc <CTransportLayer::Receive(void*, int, int)+0x78>
   1a290:	e2804008 	add	r4, r0, #8
   1a294:	e1a00004 	mov	r0, r4
   1a298:	e1a06001 	mov	r6, r1
   1a29c:	e1a07002 	mov	r7, r2
   1a2a0:	eb00357a 	bl	27890 <CPtrArray::GetCount() const>
   1a2a4:	e1550000 	cmp	r5, r0
   1a2a8:	ba000001 	blt	1a2b4 <CTransportLayer::Receive(void*, int, int)+0x30>
   1a2ac:	e3e00000 	mvn	r0, #0
   1a2b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a2b4:	e1a01005 	mov	r1, r5
   1a2b8:	e1a00004 	mov	r0, r4
   1a2bc:	eb003575 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a2c0:	e5903000 	ldr	r3, [r0]
   1a2c4:	e3530000 	cmp	r3, #0
   1a2c8:	0afffff7 	beq	1a2ac <CTransportLayer::Receive(void*, int, int)+0x28>
   1a2cc:	e3560000 	cmp	r6, #0
   1a2d0:	0a00000d 	beq	1a30c <CTransportLayer::Receive(void*, int, int)+0x88>
   1a2d4:	e1a01005 	mov	r1, r5
   1a2d8:	e1a00004 	mov	r0, r4
   1a2dc:	eb00356d 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a2e0:	e5900000 	ldr	r0, [r0]
   1a2e4:	e1a02007 	mov	r2, r7
   1a2e8:	e5903000 	ldr	r3, [r0]
   1a2ec:	e1a01006 	mov	r1, r6
   1a2f0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a2f4:	e5933018 	ldr	r3, [r3, #24]
   1a2f8:	e12fff13 	bx	r3
   1a2fc:	e59f2018 	ldr	r2, [pc, #24]	; 1a31c <CTransportLayer::Receive(void*, int, int)+0x98>
   1a300:	e59f1018 	ldr	r1, [pc, #24]	; 1a320 <CTransportLayer::Receive(void*, int, int)+0x9c>
   1a304:	e59f0018 	ldr	r0, [pc, #24]	; 1a324 <CTransportLayer::Receive(void*, int, int)+0xa0>
   1a308:	eb002940 	bl	24810 <assertion_failed>
   1a30c:	e59f2014 	ldr	r2, [pc, #20]	; 1a328 <CTransportLayer::Receive(void*, int, int)+0xa4>
   1a310:	e59f1008 	ldr	r1, [pc, #8]	; 1a320 <CTransportLayer::Receive(void*, int, int)+0x9c>
   1a314:	e59f0010 	ldr	r0, [pc, #16]	; 1a32c <CTransportLayer::Receive(void*, int, int)+0xa8>
   1a318:	eb00293c 	bl	24810 <assertion_failed>
   1a31c:	00000152 	.word	0x00000152
   1a320:	00043a34 	.word	0x00043a34
   1a324:	00043a8c 	.word	0x00043a8c
   1a328:	00000159 	.word	0x00000159
   1a32c:	00040c5c 	.word	0x00040c5c

0001a330 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>:
   1a330:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a334:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   1a338:	e59d9020 	ldr	r9, [sp, #32]
   1a33c:	e3550000 	cmp	r5, #0
   1a340:	e1dda2b4 	ldrh	sl, [sp, #36]	; 0x24
   1a344:	ba000021 	blt	1a3d0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xa0>
   1a348:	e2804008 	add	r4, r0, #8
   1a34c:	e1a00004 	mov	r0, r4
   1a350:	e1a06001 	mov	r6, r1
   1a354:	e1a07002 	mov	r7, r2
   1a358:	e1a08003 	mov	r8, r3
   1a35c:	eb00354b 	bl	27890 <CPtrArray::GetCount() const>
   1a360:	e1550000 	cmp	r5, r0
   1a364:	ba000001 	blt	1a370 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x40>
   1a368:	e3e00000 	mvn	r0, #0
   1a36c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a370:	e1a01005 	mov	r1, r5
   1a374:	e1a00004 	mov	r0, r4
   1a378:	eb003546 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a37c:	e5903000 	ldr	r3, [r0]
   1a380:	e3530000 	cmp	r3, #0
   1a384:	0afffff7 	beq	1a368 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x38>
   1a388:	e3560000 	cmp	r6, #0
   1a38c:	0a000013 	beq	1a3e0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xb0>
   1a390:	e3570000 	cmp	r7, #0
   1a394:	0a000015 	beq	1a3f0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xc0>
   1a398:	e1a01005 	mov	r1, r5
   1a39c:	e1a00004 	mov	r0, r4
   1a3a0:	eb00353c 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a3a4:	e5900000 	ldr	r0, [r0]
   1a3a8:	e1a03008 	mov	r3, r8
   1a3ac:	e590c000 	ldr	ip, [r0]
   1a3b0:	e58da024 	str	sl, [sp, #36]	; 0x24
   1a3b4:	e58d9020 	str	r9, [sp, #32]
   1a3b8:	e59ce01c 	ldr	lr, [ip, #28]
   1a3bc:	e1a02007 	mov	r2, r7
   1a3c0:	e1a01006 	mov	r1, r6
   1a3c4:	e1a0c00e 	mov	ip, lr
   1a3c8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a3cc:	e12fff1c 	bx	ip
   1a3d0:	e3a02e16 	mov	r2, #352	; 0x160
   1a3d4:	e59f1024 	ldr	r1, [pc, #36]	; 1a400 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd0>
   1a3d8:	e59f0024 	ldr	r0, [pc, #36]	; 1a404 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd4>
   1a3dc:	eb00290b 	bl	24810 <assertion_failed>
   1a3e0:	e59f2020 	ldr	r2, [pc, #32]	; 1a408 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd8>
   1a3e4:	e59f1014 	ldr	r1, [pc, #20]	; 1a400 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd0>
   1a3e8:	e59f001c 	ldr	r0, [pc, #28]	; 1a40c <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xdc>
   1a3ec:	eb002907 	bl	24810 <assertion_failed>
   1a3f0:	e3a02f5a 	mov	r2, #360	; 0x168
   1a3f4:	e59f1004 	ldr	r1, [pc, #4]	; 1a400 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd0>
   1a3f8:	e59f0010 	ldr	r0, [pc, #16]	; 1a410 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   1a3fc:	eb002903 	bl	24810 <assertion_failed>
   1a400:	00043a34 	.word	0x00043a34
   1a404:	00043a8c 	.word	0x00043a8c
   1a408:	00000167 	.word	0x00000167
   1a40c:	00043ac4 	.word	0x00043ac4
   1a410:	00043ad0 	.word	0x00043ad0

0001a414 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>:
   1a414:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a418:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1a41c:	e59d9020 	ldr	r9, [sp, #32]
   1a420:	e3550000 	cmp	r5, #0
   1a424:	ba00001e 	blt	1a4a4 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x90>
   1a428:	e2804008 	add	r4, r0, #8
   1a42c:	e1a00004 	mov	r0, r4
   1a430:	e1a06001 	mov	r6, r1
   1a434:	e1a07002 	mov	r7, r2
   1a438:	e1a08003 	mov	r8, r3
   1a43c:	eb003513 	bl	27890 <CPtrArray::GetCount() const>
   1a440:	e1550000 	cmp	r5, r0
   1a444:	ba000001 	blt	1a450 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x3c>
   1a448:	e3e00000 	mvn	r0, #0
   1a44c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a450:	e1a01005 	mov	r1, r5
   1a454:	e1a00004 	mov	r0, r4
   1a458:	eb00350e 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a45c:	e5903000 	ldr	r3, [r0]
   1a460:	e3530000 	cmp	r3, #0
   1a464:	0afffff7 	beq	1a448 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x34>
   1a468:	e3560000 	cmp	r6, #0
   1a46c:	0a000010 	beq	1a4b4 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xa0>
   1a470:	e1a01005 	mov	r1, r5
   1a474:	e1a00004 	mov	r0, r4
   1a478:	eb003506 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a47c:	e5900000 	ldr	r0, [r0]
   1a480:	e1a03008 	mov	r3, r8
   1a484:	e590c000 	ldr	ip, [r0]
   1a488:	e58d9020 	str	r9, [sp, #32]
   1a48c:	e59ce020 	ldr	lr, [ip, #32]
   1a490:	e1a02007 	mov	r2, r7
   1a494:	e1a01006 	mov	r1, r6
   1a498:	e1a0c00e 	mov	ip, lr
   1a49c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a4a0:	e12fff1c 	bx	ip
   1a4a4:	e3a02e17 	mov	r2, #368	; 0x170
   1a4a8:	e59f1014 	ldr	r1, [pc, #20]	; 1a4c4 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb0>
   1a4ac:	e59f0014 	ldr	r0, [pc, #20]	; 1a4c8 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb4>
   1a4b0:	eb0028d6 	bl	24810 <assertion_failed>
   1a4b4:	e59f2010 	ldr	r2, [pc, #16]	; 1a4cc <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb8>
   1a4b8:	e59f1004 	ldr	r1, [pc, #4]	; 1a4c4 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb0>
   1a4bc:	e59f000c 	ldr	r0, [pc, #12]	; 1a4d0 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xbc>
   1a4c0:	eb0028d2 	bl	24810 <assertion_failed>
   1a4c4:	00043a34 	.word	0x00043a34
   1a4c8:	00043a8c 	.word	0x00043a8c
   1a4cc:	00000177 	.word	0x00000177
   1a4d0:	00040c5c 	.word	0x00040c5c

0001a4d4 <CTransportLayer::SetOptionBroadcast(bool, int)>:
   1a4d4:	e92d4070 	push	{r4, r5, r6, lr}
   1a4d8:	e2525000 	subs	r5, r2, #0
   1a4dc:	ba000016 	blt	1a53c <CTransportLayer::SetOptionBroadcast(bool, int)+0x68>
   1a4e0:	e2804008 	add	r4, r0, #8
   1a4e4:	e1a00004 	mov	r0, r4
   1a4e8:	e1a06001 	mov	r6, r1
   1a4ec:	eb0034e7 	bl	27890 <CPtrArray::GetCount() const>
   1a4f0:	e1550000 	cmp	r5, r0
   1a4f4:	ba000001 	blt	1a500 <CTransportLayer::SetOptionBroadcast(bool, int)+0x2c>
   1a4f8:	e3e00000 	mvn	r0, #0
   1a4fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a500:	e1a01005 	mov	r1, r5
   1a504:	e1a00004 	mov	r0, r4
   1a508:	eb0034e2 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a50c:	e5903000 	ldr	r3, [r0]
   1a510:	e3530000 	cmp	r3, #0
   1a514:	0afffff7 	beq	1a4f8 <CTransportLayer::SetOptionBroadcast(bool, int)+0x24>
   1a518:	e1a01005 	mov	r1, r5
   1a51c:	e1a00004 	mov	r0, r4
   1a520:	eb0034dc 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a524:	e5900000 	ldr	r0, [r0]
   1a528:	e1a01006 	mov	r1, r6
   1a52c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a530:	e5903000 	ldr	r3, [r0]
   1a534:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1a538:	e12fff13 	bx	r3
   1a53c:	e59f2008 	ldr	r2, [pc, #8]	; 1a54c <CTransportLayer::SetOptionBroadcast(bool, int)+0x78>
   1a540:	e59f1008 	ldr	r1, [pc, #8]	; 1a550 <CTransportLayer::SetOptionBroadcast(bool, int)+0x7c>
   1a544:	e59f0008 	ldr	r0, [pc, #8]	; 1a554 <CTransportLayer::SetOptionBroadcast(bool, int)+0x80>
   1a548:	eb0028b0 	bl	24810 <assertion_failed>
   1a54c:	0000017e 	.word	0x0000017e
   1a550:	00043a34 	.word	0x00043a34
   1a554:	00043a8c 	.word	0x00043a8c

0001a558 <CTransportLayer::IsConnected(int) const>:
   1a558:	e92d4070 	push	{r4, r5, r6, lr}
   1a55c:	e2515000 	subs	r5, r1, #0
   1a560:	ba000012 	blt	1a5b0 <CTransportLayer::IsConnected(int) const+0x58>
   1a564:	e2804008 	add	r4, r0, #8
   1a568:	e1a00004 	mov	r0, r4
   1a56c:	eb0034c7 	bl	27890 <CPtrArray::GetCount() const>
   1a570:	e1550000 	cmp	r5, r0
   1a574:	ba000001 	blt	1a580 <CTransportLayer::IsConnected(int) const+0x28>
   1a578:	e3a00000 	mov	r0, #0
   1a57c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a580:	e1a01005 	mov	r1, r5
   1a584:	e1a00004 	mov	r0, r4
   1a588:	eb0034de 	bl	27908 <CPtrArray::operator[](unsigned int) const>
   1a58c:	e3500000 	cmp	r0, #0
   1a590:	0afffff8 	beq	1a578 <CTransportLayer::IsConnected(int) const+0x20>
   1a594:	e1a01005 	mov	r1, r5
   1a598:	e1a00004 	mov	r0, r4
   1a59c:	eb0034d9 	bl	27908 <CPtrArray::operator[](unsigned int) const>
   1a5a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a5a4:	e5903000 	ldr	r3, [r0]
   1a5a8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   1a5ac:	e12fff13 	bx	r3
   1a5b0:	e59f2008 	ldr	r2, [pc, #8]	; 1a5c0 <CTransportLayer::IsConnected(int) const+0x68>
   1a5b4:	e59f1008 	ldr	r1, [pc, #8]	; 1a5c4 <CTransportLayer::IsConnected(int) const+0x6c>
   1a5b8:	e59f0008 	ldr	r0, [pc, #8]	; 1a5c8 <CTransportLayer::IsConnected(int) const+0x70>
   1a5bc:	eb002893 	bl	24810 <assertion_failed>
   1a5c0:	0000018a 	.word	0x0000018a
   1a5c4:	00043a34 	.word	0x00043a34
   1a5c8:	00043a8c 	.word	0x00043a8c

0001a5cc <CTransportLayer::GetForeignIP(int) const>:
   1a5cc:	e92d4070 	push	{r4, r5, r6, lr}
   1a5d0:	e2515000 	subs	r5, r1, #0
   1a5d4:	ba000010 	blt	1a61c <CTransportLayer::GetForeignIP(int) const+0x50>
   1a5d8:	e2804008 	add	r4, r0, #8
   1a5dc:	e1a00004 	mov	r0, r4
   1a5e0:	eb0034aa 	bl	27890 <CPtrArray::GetCount() const>
   1a5e4:	e1550000 	cmp	r5, r0
   1a5e8:	ba000001 	blt	1a5f4 <CTransportLayer::GetForeignIP(int) const+0x28>
   1a5ec:	e3a00000 	mov	r0, #0
   1a5f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a5f4:	e1a01005 	mov	r1, r5
   1a5f8:	e1a00004 	mov	r0, r4
   1a5fc:	eb0034c1 	bl	27908 <CPtrArray::operator[](unsigned int) const>
   1a600:	e3500000 	cmp	r0, #0
   1a604:	0afffff8 	beq	1a5ec <CTransportLayer::GetForeignIP(int) const+0x20>
   1a608:	e1a01005 	mov	r1, r5
   1a60c:	e1a00004 	mov	r0, r4
   1a610:	eb0034bc 	bl	27908 <CPtrArray::operator[](unsigned int) const>
   1a614:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a618:	ea000bd4 	b	1d570 <CNetConnection::GetForeignIP() const>
   1a61c:	e59f2008 	ldr	r2, [pc, #8]	; 1a62c <CTransportLayer::GetForeignIP(int) const+0x60>
   1a620:	e59f1008 	ldr	r1, [pc, #8]	; 1a630 <CTransportLayer::GetForeignIP(int) const+0x64>
   1a624:	e59f0008 	ldr	r0, [pc, #8]	; 1a634 <CTransportLayer::GetForeignIP(int) const+0x68>
   1a628:	eb002878 	bl	24810 <assertion_failed>
   1a62c:	00000196 	.word	0x00000196
   1a630:	00043a34 	.word	0x00043a34
   1a634:	00043a8c 	.word	0x00043a8c

0001a638 <CTransportLayer::~CTransportLayer()>:
   1a638:	e3a03000 	mov	r3, #0
   1a63c:	e92d4010 	push	{r4, lr}
   1a640:	e1a04000 	mov	r4, r0
   1a644:	e5803004 	str	r3, [r0, #4]
   1a648:	e4803020 	str	r3, [r0], #32
   1a64c:	eb00188a 	bl	2087c <CTCPRejector::~CTCPRejector()>
   1a650:	e2840008 	add	r0, r4, #8
   1a654:	eb003482 	bl	27864 <CPtrArray::~CPtrArray()>
   1a658:	e1a00004 	mov	r0, r4
   1a65c:	e8bd8010 	pop	{r4, pc}

0001a660 <CTransportLayer::Process()>:
   1a660:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a664:	e1a07000 	mov	r7, r0
   1a668:	e24dde67 	sub	sp, sp, #1648	; 0x670
   1a66c:	e24dd004 	sub	sp, sp, #4
   1a670:	e28d0020 	add	r0, sp, #32
   1a674:	e28d6028 	add	r6, sp, #40	; 0x28
   1a678:	eb0019c7 	bl	20d9c <CIPAddress::CIPAddress()>
   1a67c:	e1a00006 	mov	r0, r6
   1a680:	eb0019c5 	bl	20d9c <CIPAddress::CIPAddress()>
   1a684:	e5970004 	ldr	r0, [r7, #4]
   1a688:	e3500000 	cmp	r0, #0
   1a68c:	12874008 	addne	r4, r7, #8
   1a690:	128d801c 	addne	r8, sp, #28
   1a694:	12879020 	addne	r9, r7, #32
   1a698:	0a0000a5 	beq	1a934 <CTransportLayer::Process()+0x2d4>
   1a69c:	e88d0140 	stm	sp, {r6, r8}
   1a6a0:	e28d3020 	add	r3, sp, #32
   1a6a4:	e28d2018 	add	r2, sp, #24
   1a6a8:	e28d1030 	add	r1, sp, #48	; 0x30
   1a6ac:	eb00022c 	bl	1af64 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>
   1a6b0:	e3500000 	cmp	r0, #0
   1a6b4:	0a000021 	beq	1a740 <CTransportLayer::Process()+0xe0>
   1a6b8:	e3a05000 	mov	r5, #0
   1a6bc:	ea000015 	b	1a718 <CTransportLayer::Process()+0xb8>
   1a6c0:	e1a01005 	mov	r1, r5
   1a6c4:	e1a00004 	mov	r0, r4
   1a6c8:	eb003472 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a6cc:	e5903000 	ldr	r3, [r0]
   1a6d0:	e3530000 	cmp	r3, #0
   1a6d4:	0a00000e 	beq	1a714 <CTransportLayer::Process()+0xb4>
   1a6d8:	e1a01005 	mov	r1, r5
   1a6dc:	e1a00004 	mov	r0, r4
   1a6e0:	eb00346c 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a6e4:	e5900000 	ldr	r0, [r0]
   1a6e8:	e59d101c 	ldr	r1, [sp, #28]
   1a6ec:	e5903000 	ldr	r3, [r0]
   1a6f0:	e58d1004 	str	r1, [sp, #4]
   1a6f4:	e58d6000 	str	r6, [sp]
   1a6f8:	e593a034 	ldr	sl, [r3, #52]	; 0x34
   1a6fc:	e59d2018 	ldr	r2, [sp, #24]
   1a700:	e28d3020 	add	r3, sp, #32
   1a704:	e28d1030 	add	r1, sp, #48	; 0x30
   1a708:	e12fff3a 	blx	sl
   1a70c:	e3500000 	cmp	r0, #0
   1a710:	1a000004 	bne	1a728 <CTransportLayer::Process()+0xc8>
   1a714:	e2855001 	add	r5, r5, #1
   1a718:	e1a00004 	mov	r0, r4
   1a71c:	eb00345b 	bl	27890 <CPtrArray::GetCount() const>
   1a720:	e1550000 	cmp	r5, r0
   1a724:	3affffe5 	bcc	1a6c0 <CTransportLayer::Process()+0x60>
   1a728:	e1a00004 	mov	r0, r4
   1a72c:	eb003457 	bl	27890 <CPtrArray::GetCount() const>
   1a730:	e1550000 	cmp	r5, r0
   1a734:	2a000064 	bcs	1a8cc <CTransportLayer::Process()+0x26c>
   1a738:	e5970004 	ldr	r0, [r7, #4]
   1a73c:	eaffffd6 	b	1a69c <CTransportLayer::Process()+0x3c>
   1a740:	e28da016 	add	sl, sp, #22
   1a744:	e28d9014 	add	r9, sp, #20
   1a748:	e5970004 	ldr	r0, [r7, #4]
   1a74c:	e1a03006 	mov	r3, r6
   1a750:	e58d8008 	str	r8, [sp, #8]
   1a754:	e88d0600 	stm	sp, {r9, sl}
   1a758:	e28d2020 	add	r2, sp, #32
   1a75c:	e28d1013 	add	r1, sp, #19
   1a760:	eb000246 	bl	1b080 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>
   1a764:	e3500000 	cmp	r0, #0
   1a768:	0a00001c 	beq	1a7e0 <CTransportLayer::Process()+0x180>
   1a76c:	e3a05000 	mov	r5, #0
   1a770:	e1a00004 	mov	r0, r4
   1a774:	eb003445 	bl	27890 <CPtrArray::GetCount() const>
   1a778:	e1550000 	cmp	r5, r0
   1a77c:	2afffff1 	bcs	1a748 <CTransportLayer::Process()+0xe8>
   1a780:	e1a01005 	mov	r1, r5
   1a784:	e1a00004 	mov	r0, r4
   1a788:	eb003442 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a78c:	e5903000 	ldr	r3, [r0]
   1a790:	e3530000 	cmp	r3, #0
   1a794:	0a00000f 	beq	1a7d8 <CTransportLayer::Process()+0x178>
   1a798:	e1a01005 	mov	r1, r5
   1a79c:	e1a00004 	mov	r0, r4
   1a7a0:	eb00343c 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a7a4:	e1dd21b4 	ldrh	r2, [sp, #20]
   1a7a8:	e5900000 	ldr	r0, [r0]
   1a7ac:	e59de01c 	ldr	lr, [sp, #28]
   1a7b0:	e1ddc1b6 	ldrh	ip, [sp, #22]
   1a7b4:	e5903000 	ldr	r3, [r0]
   1a7b8:	e88d5004 	stm	sp, {r2, ip, lr}
   1a7bc:	e5dd1013 	ldrb	r1, [sp, #19]
   1a7c0:	e593b038 	ldr	fp, [r3, #56]	; 0x38
   1a7c4:	e28d2020 	add	r2, sp, #32
   1a7c8:	e1a03006 	mov	r3, r6
   1a7cc:	e12fff3b 	blx	fp
   1a7d0:	e3500000 	cmp	r0, #0
   1a7d4:	1affffdb 	bne	1a748 <CTransportLayer::Process()+0xe8>
   1a7d8:	e2855001 	add	r5, r5, #1
   1a7dc:	eaffffe3 	b	1a770 <CTransportLayer::Process()+0x110>
   1a7e0:	e1a05000 	mov	r5, r0
   1a7e4:	e1a08000 	mov	r8, r0
   1a7e8:	ea000005 	b	1a804 <CTransportLayer::Process()+0x1a4>
   1a7ec:	eb003429 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a7f0:	e5900000 	ldr	r0, [r0]
   1a7f4:	e5903000 	ldr	r3, [r0]
   1a7f8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   1a7fc:	e12fff33 	blx	r3
   1a800:	e2855001 	add	r5, r5, #1
   1a804:	e1a00004 	mov	r0, r4
   1a808:	eb003420 	bl	27890 <CPtrArray::GetCount() const>
   1a80c:	e1550000 	cmp	r5, r0
   1a810:	2a00001c 	bcs	1a888 <CTransportLayer::Process()+0x228>
   1a814:	e1a01005 	mov	r1, r5
   1a818:	e1a00004 	mov	r0, r4
   1a81c:	eb00341d 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a820:	e5903000 	ldr	r3, [r0]
   1a824:	e3530000 	cmp	r3, #0
   1a828:	0afffff4 	beq	1a800 <CTransportLayer::Process()+0x1a0>
   1a82c:	e1a01005 	mov	r1, r5
   1a830:	e1a00004 	mov	r0, r4
   1a834:	eb003417 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a838:	e5900000 	ldr	r0, [r0]
   1a83c:	e5903000 	ldr	r3, [r0]
   1a840:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1a844:	e12fff33 	blx	r3
   1a848:	e3500000 	cmp	r0, #0
   1a84c:	e1a01005 	mov	r1, r5
   1a850:	e1a00004 	mov	r0, r4
   1a854:	0affffe4 	beq	1a7ec <CTransportLayer::Process()+0x18c>
   1a858:	eb00340e 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a85c:	e5900000 	ldr	r0, [r0]
   1a860:	e3500000 	cmp	r0, #0
   1a864:	0a000002 	beq	1a874 <CTransportLayer::Process()+0x214>
   1a868:	e5903000 	ldr	r3, [r0]
   1a86c:	e5933004 	ldr	r3, [r3, #4]
   1a870:	e12fff33 	blx	r3
   1a874:	e1a01005 	mov	r1, r5
   1a878:	e1a00004 	mov	r0, r4
   1a87c:	eb003405 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a880:	e5808000 	str	r8, [r0]
   1a884:	eaffffdd 	b	1a800 <CTransportLayer::Process()+0x1a0>
   1a888:	e597001c 	ldr	r0, [r7, #28]
   1a88c:	e3500000 	cmp	r0, #0
   1a890:	1a000025 	bne	1a92c <CTransportLayer::Process()+0x2cc>
   1a894:	e1a00004 	mov	r0, r4
   1a898:	eb0033fc 	bl	27890 <CPtrArray::GetCount() const>
   1a89c:	e3500000 	cmp	r0, #0
   1a8a0:	1a000014 	bne	1a8f8 <CTransportLayer::Process()+0x298>
   1a8a4:	e597301c 	ldr	r3, [r7, #28]
   1a8a8:	e3530000 	cmp	r3, #0
   1a8ac:	1a00000f 	bne	1a8f0 <CTransportLayer::Process()+0x290>
   1a8b0:	e1a00006 	mov	r0, r6
   1a8b4:	eb00194e 	bl	20df4 <CIPAddress::~CIPAddress()>
   1a8b8:	e28d0020 	add	r0, sp, #32
   1a8bc:	eb00194c 	bl	20df4 <CIPAddress::~CIPAddress()>
   1a8c0:	e28dde67 	add	sp, sp, #1648	; 0x670
   1a8c4:	e28dd004 	add	sp, sp, #4
   1a8c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8cc:	e59d301c 	ldr	r3, [sp, #28]
   1a8d0:	e59d2018 	ldr	r2, [sp, #24]
   1a8d4:	e58d3004 	str	r3, [sp, #4]
   1a8d8:	e58d6000 	str	r6, [sp]
   1a8dc:	e28d3020 	add	r3, sp, #32
   1a8e0:	e28d1030 	add	r1, sp, #48	; 0x30
   1a8e4:	e1a00009 	mov	r0, r9
   1a8e8:	eb001838 	bl	209d0 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>
   1a8ec:	eaffff91 	b	1a738 <CTransportLayer::Process()+0xd8>
   1a8f0:	eb004540 	bl	2bdf8 <LeaveCritical>
   1a8f4:	eaffffed 	b	1a8b0 <CTransportLayer::Process()+0x250>
   1a8f8:	e2405001 	sub	r5, r0, #1
   1a8fc:	e1a01005 	mov	r1, r5
   1a900:	e1a00004 	mov	r0, r4
   1a904:	eb0033e3 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1a908:	e5903000 	ldr	r3, [r0]
   1a90c:	e3530000 	cmp	r3, #0
   1a910:	1affffe3 	bne	1a8a4 <CTransportLayer::Process()+0x244>
   1a914:	e2455001 	sub	r5, r5, #1
   1a918:	e1a00004 	mov	r0, r4
   1a91c:	eb003453 	bl	27a70 <CPtrArray::RemoveLast()>
   1a920:	e3750001 	cmn	r5, #1
   1a924:	0affffde 	beq	1a8a4 <CTransportLayer::Process()+0x244>
   1a928:	eafffff3 	b	1a8fc <CTransportLayer::Process()+0x29c>
   1a92c:	eb004506 	bl	2bd4c <EnterCritical>
   1a930:	eaffffd7 	b	1a894 <CTransportLayer::Process()+0x234>
   1a934:	e3a0203a 	mov	r2, #58	; 0x3a
   1a938:	e59f1004 	ldr	r1, [pc, #4]	; 1a944 <CTransportLayer::Process()+0x2e4>
   1a93c:	e59f0004 	ldr	r0, [pc, #4]	; 1a948 <CTransportLayer::Process()+0x2e8>
   1a940:	eb0027b2 	bl	24810 <assertion_failed>
   1a944:	00043a34 	.word	0x00043a34
   1a948:	00043a5c 	.word	0x00043a5c

0001a94c <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>:
   1a94c:	e92d4010 	push	{r4, lr}
   1a950:	e59f2008 	ldr	r2, [pc, #8]	; 1a960 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]+0x14>
   1a954:	e59f1008 	ldr	r1, [pc, #8]	; 1a964 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]+0x18>
   1a958:	e59f0008 	ldr	r0, [pc, #8]	; 1a968 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]+0x1c>
   1a95c:	eb0027ab 	bl	24810 <assertion_failed>
   1a960:	0000012b 	.word	0x0000012b
   1a964:	00043adc 	.word	0x00043adc
   1a968:	00043af0 	.word	0x00043af0

0001a96c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>:
   1a96c:	e3a03000 	mov	r3, #0
   1a970:	e92d4010 	push	{r4, lr}
   1a974:	e1a04000 	mov	r4, r0
   1a978:	e880000e 	stm	r0, {r1, r2, r3}
   1a97c:	e280000c 	add	r0, r0, #12
   1a980:	eb001a51 	bl	212cc <CNetQueue::CNetQueue()>
   1a984:	e2840018 	add	r0, r4, #24
   1a988:	eb001a4f 	bl	212cc <CNetQueue::CNetQueue()>
   1a98c:	e2840024 	add	r0, r4, #36	; 0x24
   1a990:	eb001a4d 	bl	212cc <CNetQueue::CNetQueue()>
   1a994:	e2840030 	add	r0, r4, #48	; 0x30
   1a998:	eb000a04 	bl	1d1b0 <CRouteCache::CRouteCache()>
   1a99c:	e5943000 	ldr	r3, [r4]
   1a9a0:	e3530000 	cmp	r3, #0
   1a9a4:	0a000004 	beq	1a9bc <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x50>
   1a9a8:	e5943004 	ldr	r3, [r4, #4]
   1a9ac:	e3530000 	cmp	r3, #0
   1a9b0:	0a000005 	beq	1a9cc <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x60>
   1a9b4:	e1a00004 	mov	r0, r4
   1a9b8:	e8bd8010 	pop	{r4, pc}
   1a9bc:	e3a0201f 	mov	r2, #31
   1a9c0:	e59f1014 	ldr	r1, [pc, #20]	; 1a9dc <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x70>
   1a9c4:	e59f0014 	ldr	r0, [pc, #20]	; 1a9e0 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x74>
   1a9c8:	eb002790 	bl	24810 <assertion_failed>
   1a9cc:	e3a02020 	mov	r2, #32
   1a9d0:	e59f1004 	ldr	r1, [pc, #4]	; 1a9dc <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x70>
   1a9d4:	e59f0008 	ldr	r0, [pc, #8]	; 1a9e4 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x78>
   1a9d8:	eb00278c 	bl	24810 <assertion_failed>
   1a9dc:	00043adc 	.word	0x00043adc
   1a9e0:	00043a48 	.word	0x00043a48
   1a9e4:	00043b04 	.word	0x00043b04

0001a9e8 <CNetworkLayer::~CNetworkLayer()>:
   1a9e8:	e92d4070 	push	{r4, r5, r6, lr}
   1a9ec:	e5905008 	ldr	r5, [r0, #8]
   1a9f0:	e1a04000 	mov	r4, r0
   1a9f4:	e3550000 	cmp	r5, #0
   1a9f8:	0a000004 	beq	1aa10 <CNetworkLayer::~CNetworkLayer()+0x28>
   1a9fc:	e1a00005 	mov	r0, r5
   1aa00:	eb000850 	bl	1cb48 <CICMPHandler::~CICMPHandler()>
   1aa04:	e1a00005 	mov	r0, r5
   1aa08:	e3a01010 	mov	r1, #16
   1aa0c:	eb0041aa 	bl	2b0bc <operator delete(void*, unsigned int)>
   1aa10:	e3a03000 	mov	r3, #0
   1aa14:	e1a00004 	mov	r0, r4
   1aa18:	e5843008 	str	r3, [r4, #8]
   1aa1c:	e5843004 	str	r3, [r4, #4]
   1aa20:	e4803030 	str	r3, [r0], #48	; 0x30
   1aa24:	eb0009fb 	bl	1d218 <CRouteCache::~CRouteCache()>
   1aa28:	e2840024 	add	r0, r4, #36	; 0x24
   1aa2c:	eb001a60 	bl	213b4 <CNetQueue::~CNetQueue()>
   1aa30:	e2840018 	add	r0, r4, #24
   1aa34:	eb001a5e 	bl	213b4 <CNetQueue::~CNetQueue()>
   1aa38:	e284000c 	add	r0, r4, #12
   1aa3c:	eb001a5c 	bl	213b4 <CNetQueue::~CNetQueue()>
   1aa40:	e1a00004 	mov	r0, r4
   1aa44:	e8bd8070 	pop	{r4, r5, r6, pc}

0001aa48 <CNetworkLayer::Initialize()>:
   1aa48:	e92d4030 	push	{r4, r5, lr}
   1aa4c:	e5903008 	ldr	r3, [r0, #8]
   1aa50:	e24dd00c 	sub	sp, sp, #12
   1aa54:	e3530000 	cmp	r3, #0
   1aa58:	1a00000d 	bne	1aa94 <CNetworkLayer::Initialize()+0x4c>
   1aa5c:	e1a04000 	mov	r4, r0
   1aa60:	e3a00010 	mov	r0, #16
   1aa64:	eb004186 	bl	2b084 <operator new(unsigned int)>
   1aa68:	e1a02004 	mov	r2, r4
   1aa6c:	e4921024 	ldr	r1, [r2], #36	; 0x24
   1aa70:	e2843018 	add	r3, r4, #24
   1aa74:	e58d2000 	str	r2, [sp]
   1aa78:	e1a02004 	mov	r2, r4
   1aa7c:	e1a05000 	mov	r5, r0
   1aa80:	eb000810 	bl	1cac8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>
   1aa84:	e3a00001 	mov	r0, #1
   1aa88:	e5845008 	str	r5, [r4, #8]
   1aa8c:	e28dd00c 	add	sp, sp, #12
   1aa90:	e8bd8030 	pop	{r4, r5, pc}
   1aa94:	e3a0202e 	mov	r2, #46	; 0x2e
   1aa98:	e59f1004 	ldr	r1, [pc, #4]	; 1aaa4 <CNetworkLayer::Initialize()+0x5c>
   1aa9c:	e59f0004 	ldr	r0, [pc, #4]	; 1aaa8 <CNetworkLayer::Initialize()+0x60>
   1aaa0:	eb00275a 	bl	24810 <assertion_failed>
   1aaa4:	00043adc 	.word	0x00043adc
   1aaa8:	00043b18 	.word	0x00043b18

0001aaac <CNetworkLayer::Process()>:
   1aaac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aab0:	e1a05000 	mov	r5, r0
   1aab4:	e5900000 	ldr	r0, [r0]
   1aab8:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1aabc:	e3500000 	cmp	r0, #0
   1aac0:	e24dd00c 	sub	sp, sp, #12
   1aac4:	0a000062 	beq	1ac54 <CNetworkLayer::Process()+0x1a8>
   1aac8:	eb001857 	bl	20c2c <CNetConfig::GetIPAddress() const>
   1aacc:	e2507000 	subs	r7, r0, #0
   1aad0:	0a000063 	beq	1ac64 <CNetworkLayer::Process()+0x1b8>
   1aad4:	e5950004 	ldr	r0, [r5, #4]
   1aad8:	e3500000 	cmp	r0, #0
   1aadc:	0a000069 	beq	1ac88 <CNetworkLayer::Process()+0x1dc>
   1aae0:	e28d3018 	add	r3, sp, #24
   1aae4:	e28d6010 	add	r6, sp, #16
   1aae8:	e283b00c 	add	fp, r3, #12
   1aaec:	e3a0a009 	mov	sl, #9
   1aaf0:	e3a08004 	mov	r8, #4
   1aaf4:	e285900c 	add	r9, r5, #12
   1aaf8:	ea000000 	b	1ab00 <CNetworkLayer::Process()+0x54>
   1aafc:	e5950004 	ldr	r0, [r5, #4]
   1ab00:	e28d200c 	add	r2, sp, #12
   1ab04:	e28d1018 	add	r1, sp, #24
   1ab08:	eb00031a 	bl	1b778 <CLinkLayer::Receive(void*, unsigned int*)>
   1ab0c:	e3500000 	cmp	r0, #0
   1ab10:	0a000048 	beq	1ac38 <CNetworkLayer::Process()+0x18c>
   1ab14:	e59d300c 	ldr	r3, [sp, #12]
   1ab18:	e3530014 	cmp	r3, #20
   1ab1c:	9afffff6 	bls	1aafc <CNetworkLayer::Process()+0x50>
   1ab20:	e5dd4018 	ldrb	r4, [sp, #24]
   1ab24:	e204400f 	and	r4, r4, #15
   1ab28:	e2442005 	sub	r2, r4, #5
   1ab2c:	e3520001 	cmp	r2, #1
   1ab30:	8afffff1 	bhi	1aafc <CNetworkLayer::Process()+0x50>
   1ab34:	e1a04104 	lsl	r4, r4, #2
   1ab38:	e1530004 	cmp	r3, r4
   1ab3c:	9affffee 	bls	1aafc <CNetworkLayer::Process()+0x50>
   1ab40:	e1a01004 	mov	r1, r4
   1ab44:	e28d0018 	add	r0, sp, #24
   1ab48:	eb001b2a 	bl	217f8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1ab4c:	e3500000 	cmp	r0, #0
   1ab50:	1affffe9 	bne	1aafc <CNetworkLayer::Process()+0x50>
   1ab54:	e5dd3018 	ldrb	r3, [sp, #24]
   1ab58:	e1a03243 	asr	r3, r3, #4
   1ab5c:	e3530004 	cmp	r3, #4
   1ab60:	1affffe5 	bne	1aafc <CNetworkLayer::Process()+0x50>
   1ab64:	e28d1028 	add	r1, sp, #40	; 0x28
   1ab68:	e1a00006 	mov	r0, r6
   1ab6c:	eb001921 	bl	20ff8 <CIPAddress::CIPAddress(unsigned char const*)>
   1ab70:	e1a00007 	mov	r0, r7
   1ab74:	eb001967 	bl	21118 <CIPAddress::IsNull() const>
   1ab78:	e3500000 	cmp	r0, #0
   1ab7c:	1a00003c 	bne	1ac74 <CNetworkLayer::Process()+0x1c8>
   1ab80:	e1a01006 	mov	r1, r6
   1ab84:	e1a00007 	mov	r0, r7
   1ab88:	eb0018b2 	bl	20e58 <CIPAddress::operator!=(CIPAddress const&) const>
   1ab8c:	e3500000 	cmp	r0, #0
   1ab90:	1a000044 	bne	1aca8 <CNetworkLayer::Process()+0x1fc>
   1ab94:	e1dd31be 	ldrh	r3, [sp, #30]
   1ab98:	e3130020 	tst	r3, #32
   1ab9c:	1a000022 	bne	1ac2c <CNetworkLayer::Process()+0x180>
   1aba0:	e6bf3fb3 	rev16	r3, r3
   1aba4:	e2033c1f 	and	r3, r3, #7936	; 0x1f00
   1aba8:	e3530000 	cmp	r3, #0
   1abac:	1a00001e 	bne	1ac2c <CNetworkLayer::Process()+0x180>
   1abb0:	e1dd31ba 	ldrh	r3, [sp, #26]
   1abb4:	e59d200c 	ldr	r2, [sp, #12]
   1abb8:	e6bf3fb3 	rev16	r3, r3
   1abbc:	e6ff3073 	uxth	r3, r3
   1abc0:	e1530002 	cmp	r3, r2
   1abc4:	8a000018 	bhi	1ac2c <CNetworkLayer::Process()+0x180>
   1abc8:	e1a0000a 	mov	r0, sl
   1abcc:	e58d300c 	str	r3, [sp, #12]
   1abd0:	eb00412b 	bl	2b084 <operator new(unsigned int)>
   1abd4:	e5dd1021 	ldrb	r1, [sp, #33]	; 0x21
   1abd8:	e58d0004 	str	r0, [sp, #4]
   1abdc:	e1a02008 	mov	r2, r8
   1abe0:	e4c01001 	strb	r1, [r0], #1
   1abe4:	e1a0100b 	mov	r1, fp
   1abe8:	eb003f4c 	bl	2a920 <memcpy>
   1abec:	e59d3004 	ldr	r3, [sp, #4]
   1abf0:	e1a02008 	mov	r2, r8
   1abf4:	e28d1028 	add	r1, sp, #40	; 0x28
   1abf8:	e2830005 	add	r0, r3, #5
   1abfc:	eb003f47 	bl	2a920 <memcpy>
   1ac00:	e5dd1021 	ldrb	r1, [sp, #33]	; 0x21
   1ac04:	e59d200c 	ldr	r2, [sp, #12]
   1ac08:	e3510001 	cmp	r1, #1
   1ac0c:	e28d1018 	add	r1, sp, #24
   1ac10:	e0422004 	sub	r2, r2, r4
   1ac14:	e59d3004 	ldr	r3, [sp, #4]
   1ac18:	e0811004 	add	r1, r1, r4
   1ac1c:	02850018 	addeq	r0, r5, #24
   1ac20:	11a00009 	movne	r0, r9
   1ac24:	e58d200c 	str	r2, [sp, #12]
   1ac28:	eb0019e6 	bl	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1ac2c:	e1a00006 	mov	r0, r6
   1ac30:	eb00186f 	bl	20df4 <CIPAddress::~CIPAddress()>
   1ac34:	eaffffb0 	b	1aafc <CNetworkLayer::Process()+0x50>
   1ac38:	e5950008 	ldr	r0, [r5, #8]
   1ac3c:	e3500000 	cmp	r0, #0
   1ac40:	0a000014 	beq	1ac98 <CNetworkLayer::Process()+0x1ec>
   1ac44:	eb0007fe 	bl	1cc44 <CICMPHandler::Process()>
   1ac48:	e28dde65 	add	sp, sp, #1616	; 0x650
   1ac4c:	e28dd00c 	add	sp, sp, #12
   1ac50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac54:	e3a02037 	mov	r2, #55	; 0x37
   1ac58:	e59f1074 	ldr	r1, [pc, #116]	; 1acd4 <CNetworkLayer::Process()+0x228>
   1ac5c:	e59f0074 	ldr	r0, [pc, #116]	; 1acd8 <CNetworkLayer::Process()+0x22c>
   1ac60:	eb0026ea 	bl	24810 <assertion_failed>
   1ac64:	e3a02039 	mov	r2, #57	; 0x39
   1ac68:	e59f1064 	ldr	r1, [pc, #100]	; 1acd4 <CNetworkLayer::Process()+0x228>
   1ac6c:	e59f0068 	ldr	r0, [pc, #104]	; 1acdc <CNetworkLayer::Process()+0x230>
   1ac70:	eb0026e6 	bl	24810 <assertion_failed>
   1ac74:	e1a00006 	mov	r0, r6
   1ac78:	eb001934 	bl	21150 <CIPAddress::IsBroadcast() const>
   1ac7c:	e3500000 	cmp	r0, #0
   1ac80:	1affffc3 	bne	1ab94 <CNetworkLayer::Process()+0xe8>
   1ac84:	eaffffe8 	b	1ac2c <CNetworkLayer::Process()+0x180>
   1ac88:	e3a0203d 	mov	r2, #61	; 0x3d
   1ac8c:	e59f1040 	ldr	r1, [pc, #64]	; 1acd4 <CNetworkLayer::Process()+0x228>
   1ac90:	e59f0048 	ldr	r0, [pc, #72]	; 1ace0 <CNetworkLayer::Process()+0x234>
   1ac94:	eb0026dd 	bl	24810 <assertion_failed>
   1ac98:	e3a0208a 	mov	r2, #138	; 0x8a
   1ac9c:	e59f1030 	ldr	r1, [pc, #48]	; 1acd4 <CNetworkLayer::Process()+0x228>
   1aca0:	e59f003c 	ldr	r0, [pc, #60]	; 1ace4 <CNetworkLayer::Process()+0x238>
   1aca4:	eb0026d9 	bl	24810 <assertion_failed>
   1aca8:	e1a00006 	mov	r0, r6
   1acac:	eb001927 	bl	21150 <CIPAddress::IsBroadcast() const>
   1acb0:	e3500000 	cmp	r0, #0
   1acb4:	1affffb6 	bne	1ab94 <CNetworkLayer::Process()+0xe8>
   1acb8:	e5950000 	ldr	r0, [r5]
   1acbc:	eb0017e4 	bl	20c54 <CNetConfig::GetBroadcastAddress() const>
   1acc0:	e1a01006 	mov	r1, r6
   1acc4:	eb001863 	bl	20e58 <CIPAddress::operator!=(CIPAddress const&) const>
   1acc8:	e3500000 	cmp	r0, #0
   1accc:	1affffd6 	bne	1ac2c <CNetworkLayer::Process()+0x180>
   1acd0:	eaffffaf 	b	1ab94 <CNetworkLayer::Process()+0xe8>
   1acd4:	00043adc 	.word	0x00043adc
   1acd8:	00043a48 	.word	0x00043a48
   1acdc:	00043b2c 	.word	0x00043b2c
   1ace0:	00043b04 	.word	0x00043b04
   1ace4:	00043af0 	.word	0x00043af0

0001ace8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>:
   1ace8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acec:	e59fc254 	ldr	ip, [pc, #596]	; 1af48 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x260>
   1acf0:	e243e001 	sub	lr, r3, #1
   1acf4:	e28db020 	add	fp, sp, #32
   1acf8:	e15e000c 	cmp	lr, ip
   1acfc:	e24dd014 	sub	sp, sp, #20
   1ad00:	8a00004b 	bhi	1ae34 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x14c>
   1ad04:	e1a06000 	mov	r6, r0
   1ad08:	e3a0a000 	mov	sl, #0
   1ad0c:	e3a0c040 	mov	ip, #64	; 0x40
   1ad10:	e3a0e045 	mov	lr, #69	; 0x45
   1ad14:	e2838014 	add	r8, r3, #20
   1ad18:	e1a07002 	mov	r7, r2
   1ad1c:	e1a05001 	mov	r5, r1
   1ad20:	e6bf2fb8 	rev16	r2, r8
   1ad24:	e283101b 	add	r1, r3, #27
   1ad28:	e6ff2072 	uxth	r2, r2
   1ad2c:	e3c11007 	bic	r1, r1, #7
   1ad30:	e04dd001 	sub	sp, sp, r1
   1ad34:	e1a00422 	lsr	r0, r2, #8
   1ad38:	e5cd0003 	strb	r0, [sp, #3]
   1ad3c:	e5960000 	ldr	r0, [r6]
   1ad40:	e1a04003 	mov	r4, r3
   1ad44:	e5db3004 	ldrb	r3, [fp, #4]
   1ad48:	e150000a 	cmp	r0, sl
   1ad4c:	e5cd2002 	strb	r2, [sp, #2]
   1ad50:	e5cd3009 	strb	r3, [sp, #9]
   1ad54:	e5cde000 	strb	lr, [sp]
   1ad58:	e50bd030 	str	sp, [fp, #-48]	; 0xffffffd0
   1ad5c:	e5cda001 	strb	sl, [sp, #1]
   1ad60:	e5cda004 	strb	sl, [sp, #4]
   1ad64:	e5cda005 	strb	sl, [sp, #5]
   1ad68:	e5cda007 	strb	sl, [sp, #7]
   1ad6c:	e5cdc006 	strb	ip, [sp, #6]
   1ad70:	e5cdc008 	strb	ip, [sp, #8]
   1ad74:	0a000044 	beq	1ae8c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1a4>
   1ad78:	eb0017ab 	bl	20c2c <CNetConfig::GetIPAddress() const>
   1ad7c:	e2509000 	subs	r9, r0, #0
   1ad80:	0a00002f 	beq	1ae44 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x15c>
   1ad84:	e28d100c 	add	r1, sp, #12
   1ad88:	eb0018cb 	bl	210bc <CIPAddress::CopyTo(unsigned char*) const>
   1ad8c:	e28d1010 	add	r1, sp, #16
   1ad90:	e1a00005 	mov	r0, r5
   1ad94:	eb0018c8 	bl	210bc <CIPAddress::CopyTo(unsigned char*) const>
   1ad98:	e3a01014 	mov	r1, #20
   1ad9c:	e1a0000d 	mov	r0, sp
   1ada0:	e5cda00a 	strb	sl, [sp, #10]
   1ada4:	e5cda00b 	strb	sl, [sp, #11]
   1ada8:	eb001a92 	bl	217f8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1adac:	e3570000 	cmp	r7, #0
   1adb0:	e1a03420 	lsr	r3, r0, #8
   1adb4:	e5cd000a 	strb	r0, [sp, #10]
   1adb8:	e5cd300b 	strb	r3, [sp, #11]
   1adbc:	0a00003a 	beq	1aeac <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1c4>
   1adc0:	e1a02004 	mov	r2, r4
   1adc4:	e1a01007 	mov	r1, r7
   1adc8:	e28d0014 	add	r0, sp, #20
   1adcc:	eb003ed3 	bl	2a920 <memcpy>
   1add0:	e1a00009 	mov	r0, r9
   1add4:	eb0018cf 	bl	21118 <CIPAddress::IsNull() const>
   1add8:	e3500000 	cmp	r0, #0
   1addc:	1a00001c 	bne	1ae54 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x16c>
   1ade0:	e24b002c 	sub	r0, fp, #44	; 0x2c
   1ade4:	eb0017ec 	bl	20d9c <CIPAddress::CIPAddress()>
   1ade8:	e5960000 	ldr	r0, [r6]
   1adec:	eb001792 	bl	20c3c <CNetConfig::GetNetMask() const>
   1adf0:	e1a01005 	mov	r1, r5
   1adf4:	e1a02000 	mov	r2, r0
   1adf8:	e1a00009 	mov	r0, r9
   1adfc:	eb001905 	bl	21218 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   1ae00:	e2504000 	subs	r4, r0, #0
   1ae04:	0a00002c 	beq	1aebc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1d4>
   1ae08:	e5960004 	ldr	r0, [r6, #4]
   1ae0c:	e3500000 	cmp	r0, #0
   1ae10:	0a000021 	beq	1ae9c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1b4>
   1ae14:	e1a03008 	mov	r3, r8
   1ae18:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   1ae1c:	e1a01005 	mov	r1, r5
   1ae20:	eb0001ea 	bl	1b5d0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>
   1ae24:	e1a04000 	mov	r4, r0
   1ae28:	e24b002c 	sub	r0, fp, #44	; 0x2c
   1ae2c:	eb0017f0 	bl	20df4 <CIPAddress::~CIPAddress()>
   1ae30:	ea000000 	b	1ae38 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x150>
   1ae34:	e3a04000 	mov	r4, #0
   1ae38:	e1a00004 	mov	r0, r4
   1ae3c:	e24bd020 	sub	sp, fp, #32
   1ae40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae44:	e3a020a4 	mov	r2, #164	; 0xa4
   1ae48:	e59f10fc 	ldr	r1, [pc, #252]	; 1af4c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1ae4c:	e59f00fc 	ldr	r0, [pc, #252]	; 1af50 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x268>
   1ae50:	eb00266e 	bl	24810 <assertion_failed>
   1ae54:	e1a00005 	mov	r0, r5
   1ae58:	eb0018bc 	bl	21150 <CIPAddress::IsBroadcast() const>
   1ae5c:	e2504000 	subs	r4, r0, #0
   1ae60:	1affffde 	bne	1ade0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0xf8>
   1ae64:	e5960008 	ldr	r0, [r6, #8]
   1ae68:	e3500000 	cmp	r0, #0
   1ae6c:	0a00001d 	beq	1aee8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x200>
   1ae70:	e1a03008 	mov	r3, r8
   1ae74:	e1a0200d 	mov	r2, sp
   1ae78:	e1a01004 	mov	r1, r4
   1ae7c:	eb000864 	bl	1d014 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1ae80:	e1a00004 	mov	r0, r4
   1ae84:	e24bd020 	sub	sp, fp, #32
   1ae88:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae8c:	e3a020a2 	mov	r2, #162	; 0xa2
   1ae90:	e59f10b4 	ldr	r1, [pc, #180]	; 1af4c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1ae94:	e59f00b8 	ldr	r0, [pc, #184]	; 1af54 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x26c>
   1ae98:	eb00265c 	bl	24810 <assertion_failed>
   1ae9c:	e3a020d0 	mov	r2, #208	; 0xd0
   1aea0:	e59f10a4 	ldr	r1, [pc, #164]	; 1af4c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1aea4:	e59f00ac 	ldr	r0, [pc, #172]	; 1af58 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x270>
   1aea8:	eb002658 	bl	24810 <assertion_failed>
   1aeac:	e3a020ad 	mov	r2, #173	; 0xad
   1aeb0:	e59f1094 	ldr	r1, [pc, #148]	; 1af4c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1aeb4:	e59f00a0 	ldr	r0, [pc, #160]	; 1af5c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x274>
   1aeb8:	eb002654 	bl	24810 <assertion_failed>
   1aebc:	e1a00005 	mov	r0, r5
   1aec0:	eb001871 	bl	2108c <CIPAddress::Get() const>
   1aec4:	e1a01000 	mov	r1, r0
   1aec8:	e2860030 	add	r0, r6, #48	; 0x30
   1aecc:	eb000912 	bl	1d31c <CRouteCache::GetRoute(unsigned char const*) const>
   1aed0:	e2501000 	subs	r1, r0, #0
   1aed4:	0a000004 	beq	1aeec <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x204>
   1aed8:	e24b002c 	sub	r0, fp, #44	; 0x2c
   1aedc:	eb001835 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   1aee0:	e24b502c 	sub	r5, fp, #44	; 0x2c
   1aee4:	eaffffc7 	b	1ae08 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x120>
   1aee8:	ebfffe97 	bl	1a94c <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>
   1aeec:	e5960000 	ldr	r0, [r6]
   1aef0:	eb001753 	bl	20c44 <CNetConfig::GetDefaultGateway() const>
   1aef4:	e1a05000 	mov	r5, r0
   1aef8:	eb001886 	bl	21118 <CIPAddress::IsNull() const>
   1aefc:	e3500000 	cmp	r0, #0
   1af00:	0a000007 	beq	1af24 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x23c>
   1af04:	e5960008 	ldr	r0, [r6, #8]
   1af08:	e3500000 	cmp	r0, #0
   1af0c:	0afffff5 	beq	1aee8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x200>
   1af10:	e1a03008 	mov	r3, r8
   1af14:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   1af18:	e1a01004 	mov	r1, r4
   1af1c:	eb00083c 	bl	1d014 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1af20:	eaffffc0 	b	1ae28 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x140>
   1af24:	e5960004 	ldr	r0, [r6, #4]
   1af28:	e3500000 	cmp	r0, #0
   1af2c:	0affffda 	beq	1ae9c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1b4>
   1af30:	e3550000 	cmp	r5, #0
   1af34:	1affffb6 	bne	1ae14 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x12c>
   1af38:	e3a020d1 	mov	r2, #209	; 0xd1
   1af3c:	e59f1008 	ldr	r1, [pc, #8]	; 1af4c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1af40:	e59f0018 	ldr	r0, [pc, #24]	; 1af60 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x278>
   1af44:	eb002631 	bl	24810 <assertion_failed>
   1af48:	0000062b 	.word	0x0000062b
   1af4c:	00043adc 	.word	0x00043adc
   1af50:	00043b2c 	.word	0x00043b2c
   1af54:	00043a48 	.word	0x00043a48
   1af58:	00043b04 	.word	0x00043b04
   1af5c:	00043b40 	.word	0x00043b40
   1af60:	00043b50 	.word	0x00043b50

0001af64 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>:
   1af64:	e92d4030 	push	{r4, r5, lr}
   1af68:	e3510000 	cmp	r1, #0
   1af6c:	e24dd00c 	sub	sp, sp, #12
   1af70:	0a000023 	beq	1b004 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xa0>
   1af74:	e3520000 	cmp	r2, #0
   1af78:	e1a04002 	mov	r4, r2
   1af7c:	0a000024 	beq	1b014 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xb0>
   1af80:	e280000c 	add	r0, r0, #12
   1af84:	e28d2004 	add	r2, sp, #4
   1af88:	e1a05003 	mov	r5, r3
   1af8c:	eb001953 	bl	214e0 <CNetQueue::Dequeue(void*, void**)>
   1af90:	e3500000 	cmp	r0, #0
   1af94:	e5840000 	str	r0, [r4]
   1af98:	0a000017 	beq	1affc <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x98>
   1af9c:	e59d4004 	ldr	r4, [sp, #4]
   1afa0:	e3540000 	cmp	r4, #0
   1afa4:	0a00001e 	beq	1b024 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xc0>
   1afa8:	e59d301c 	ldr	r3, [sp, #28]
   1afac:	e3530000 	cmp	r3, #0
   1afb0:	0a00001f 	beq	1b034 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xd0>
   1afb4:	e5d43000 	ldrb	r3, [r4]
   1afb8:	e59d201c 	ldr	r2, [sp, #28]
   1afbc:	e3550000 	cmp	r5, #0
   1afc0:	e5823000 	str	r3, [r2]
   1afc4:	0a00001e 	beq	1b044 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xe0>
   1afc8:	e1a00005 	mov	r0, r5
   1afcc:	e2841001 	add	r1, r4, #1
   1afd0:	eb0017f8 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   1afd4:	e59d3018 	ldr	r3, [sp, #24]
   1afd8:	e3530000 	cmp	r3, #0
   1afdc:	0a00001c 	beq	1b054 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xf0>
   1afe0:	e2841005 	add	r1, r4, #5
   1afe4:	e59d0018 	ldr	r0, [sp, #24]
   1afe8:	eb0017f2 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   1afec:	e1a00004 	mov	r0, r4
   1aff0:	e3a01009 	mov	r1, #9
   1aff4:	eb004030 	bl	2b0bc <operator delete(void*, unsigned int)>
   1aff8:	e3a00001 	mov	r0, #1
   1affc:	e28dd00c 	add	sp, sp, #12
   1b000:	e8bd8030 	pop	{r4, r5, pc}
   1b004:	e3a020d9 	mov	r2, #217	; 0xd9
   1b008:	e59f1054 	ldr	r1, [pc, #84]	; 1b064 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b00c:	e59f0054 	ldr	r0, [pc, #84]	; 1b068 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x104>
   1b010:	eb0025fe 	bl	24810 <assertion_failed>
   1b014:	e3a020da 	mov	r2, #218	; 0xda
   1b018:	e59f1044 	ldr	r1, [pc, #68]	; 1b064 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b01c:	e59f0048 	ldr	r0, [pc, #72]	; 1b06c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x108>
   1b020:	eb0025fa 	bl	24810 <assertion_failed>
   1b024:	e3a020e2 	mov	r2, #226	; 0xe2
   1b028:	e59f1034 	ldr	r1, [pc, #52]	; 1b064 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b02c:	e59f003c 	ldr	r0, [pc, #60]	; 1b070 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x10c>
   1b030:	eb0025f6 	bl	24810 <assertion_failed>
   1b034:	e3a020e4 	mov	r2, #228	; 0xe4
   1b038:	e59f1024 	ldr	r1, [pc, #36]	; 1b064 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b03c:	e59f0030 	ldr	r0, [pc, #48]	; 1b074 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x110>
   1b040:	eb0025f2 	bl	24810 <assertion_failed>
   1b044:	e3a020e7 	mov	r2, #231	; 0xe7
   1b048:	e59f1014 	ldr	r1, [pc, #20]	; 1b064 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b04c:	e59f0024 	ldr	r0, [pc, #36]	; 1b078 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x114>
   1b050:	eb0025ee 	bl	24810 <assertion_failed>
   1b054:	e3a020ea 	mov	r2, #234	; 0xea
   1b058:	e59f1004 	ldr	r1, [pc, #4]	; 1b064 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b05c:	e59f0018 	ldr	r0, [pc, #24]	; 1b07c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x118>
   1b060:	eb0025ea 	bl	24810 <assertion_failed>
   1b064:	00043adc 	.word	0x00043adc
   1b068:	00040c5c 	.word	0x00040c5c
   1b06c:	00041488 	.word	0x00041488
   1b070:	00043ac4 	.word	0x00043ac4
   1b074:	00043b60 	.word	0x00043b60
   1b078:	00043b70 	.word	0x00043b70
   1b07c:	00043b80 	.word	0x00043b80

0001b080 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>:
   1b080:	e92d4070 	push	{r4, r5, r6, lr}
   1b084:	e24dd010 	sub	sp, sp, #16
   1b088:	e1a04001 	mov	r4, r1
   1b08c:	e1a05002 	mov	r5, r2
   1b090:	e2800024 	add	r0, r0, #36	; 0x24
   1b094:	e3a02000 	mov	r2, #0
   1b098:	e1a0100d 	mov	r1, sp
   1b09c:	e1a06003 	mov	r6, r3
   1b0a0:	eb00190e 	bl	214e0 <CNetQueue::Dequeue(void*, void**)>
   1b0a4:	e3500000 	cmp	r0, #0
   1b0a8:	0a000022 	beq	1b138 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xb8>
   1b0ac:	e350000e 	cmp	r0, #14
   1b0b0:	1a000026 	bne	1b150 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xd0>
   1b0b4:	e3540000 	cmp	r4, #0
   1b0b8:	0a000020 	beq	1b140 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xc0>
   1b0bc:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1b0c0:	e5dd3000 	ldrb	r3, [sp]
   1b0c4:	e3520000 	cmp	r2, #0
   1b0c8:	e5c43000 	strb	r3, [r4]
   1b0cc:	0a000023 	beq	1b160 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xe0>
   1b0d0:	e5dd3001 	ldrb	r3, [sp, #1]
   1b0d4:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1b0d8:	e3550000 	cmp	r5, #0
   1b0dc:	e5823000 	str	r3, [r2]
   1b0e0:	0a000022 	beq	1b170 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xf0>
   1b0e4:	e1a00005 	mov	r0, r5
   1b0e8:	e28d1002 	add	r1, sp, #2
   1b0ec:	eb0017b1 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   1b0f0:	e3560000 	cmp	r6, #0
   1b0f4:	0a000021 	beq	1b180 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x100>
   1b0f8:	e1a00006 	mov	r0, r6
   1b0fc:	e28d1006 	add	r1, sp, #6
   1b100:	eb0017ac 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   1b104:	e59d3020 	ldr	r3, [sp, #32]
   1b108:	e3530000 	cmp	r3, #0
   1b10c:	0a00001f 	beq	1b190 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x110>
   1b110:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   1b114:	e1dd30ba 	ldrh	r3, [sp, #10]
   1b118:	e3520000 	cmp	r2, #0
   1b11c:	e59d2020 	ldr	r2, [sp, #32]
   1b120:	e1c230b0 	strh	r3, [r2]
   1b124:	0a00001d 	beq	1b1a0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x120>
   1b128:	e3a00001 	mov	r0, #1
   1b12c:	e1dd30bc 	ldrh	r3, [sp, #12]
   1b130:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   1b134:	e1c230b0 	strh	r3, [r2]
   1b138:	e28dd010 	add	sp, sp, #16
   1b13c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b140:	e3a02c01 	mov	r2, #256	; 0x100
   1b144:	e59f1064 	ldr	r1, [pc, #100]	; 1b1b0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b148:	e59f0064 	ldr	r0, [pc, #100]	; 1b1b4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x134>
   1b14c:	eb0025af 	bl	24810 <assertion_failed>
   1b150:	e3a020fe 	mov	r2, #254	; 0xfe
   1b154:	e59f1054 	ldr	r1, [pc, #84]	; 1b1b0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b158:	e59f0058 	ldr	r0, [pc, #88]	; 1b1b8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x138>
   1b15c:	eb0025ab 	bl	24810 <assertion_failed>
   1b160:	e59f2054 	ldr	r2, [pc, #84]	; 1b1bc <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x13c>
   1b164:	e59f1044 	ldr	r1, [pc, #68]	; 1b1b0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b168:	e59f0050 	ldr	r0, [pc, #80]	; 1b1c0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x140>
   1b16c:	eb0025a7 	bl	24810 <assertion_failed>
   1b170:	e59f204c 	ldr	r2, [pc, #76]	; 1b1c4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x144>
   1b174:	e59f1034 	ldr	r1, [pc, #52]	; 1b1b0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b178:	e59f0048 	ldr	r0, [pc, #72]	; 1b1c8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x148>
   1b17c:	eb0025a3 	bl	24810 <assertion_failed>
   1b180:	e59f2044 	ldr	r2, [pc, #68]	; 1b1cc <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x14c>
   1b184:	e59f1024 	ldr	r1, [pc, #36]	; 1b1b0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b188:	e59f0040 	ldr	r0, [pc, #64]	; 1b1d0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x150>
   1b18c:	eb00259f 	bl	24810 <assertion_failed>
   1b190:	e3a02f43 	mov	r2, #268	; 0x10c
   1b194:	e59f1014 	ldr	r1, [pc, #20]	; 1b1b0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b198:	e59f0034 	ldr	r0, [pc, #52]	; 1b1d4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x154>
   1b19c:	eb00259b 	bl	24810 <assertion_failed>
   1b1a0:	e59f2030 	ldr	r2, [pc, #48]	; 1b1d8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x158>
   1b1a4:	e59f1004 	ldr	r1, [pc, #4]	; 1b1b0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b1a8:	e59f002c 	ldr	r0, [pc, #44]	; 1b1dc <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x15c>
   1b1ac:	eb002597 	bl	24810 <assertion_failed>
   1b1b0:	00043adc 	.word	0x00043adc
   1b1b4:	00043bb0 	.word	0x00043bb0
   1b1b8:	00043b90 	.word	0x00043b90
   1b1bc:	00000103 	.word	0x00000103
   1b1c0:	00043b60 	.word	0x00043b60
   1b1c4:	00000106 	.word	0x00000106
   1b1c8:	00043b70 	.word	0x00043b70
   1b1cc:	00000109 	.word	0x00000109
   1b1d0:	00043b80 	.word	0x00043b80
   1b1d4:	00043bbc 	.word	0x00043bbc
   1b1d8:	0000010f 	.word	0x0000010f
   1b1dc:	00043bcc 	.word	0x00043bcc

0001b1e0 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>:
   1b1e0:	e2800030 	add	r0, r0, #48	; 0x30
   1b1e4:	ea000812 	b	1d234 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>

0001b1e8 <CNetworkLayer::GetGateway(unsigned char const*) const>:
   1b1e8:	e92d4010 	push	{r4, lr}
   1b1ec:	e1a04000 	mov	r4, r0
   1b1f0:	e2800030 	add	r0, r0, #48	; 0x30
   1b1f4:	eb000848 	bl	1d31c <CRouteCache::GetRoute(unsigned char const*) const>
   1b1f8:	e3500000 	cmp	r0, #0
   1b1fc:	18bd8010 	popne	{r4, pc}
   1b200:	e5940000 	ldr	r0, [r4]
   1b204:	e3500000 	cmp	r0, #0
   1b208:	0a000004 	beq	1b220 <CNetworkLayer::GetGateway(unsigned char const*) const+0x38>
   1b20c:	eb00168c 	bl	20c44 <CNetConfig::GetDefaultGateway() const>
   1b210:	e3500000 	cmp	r0, #0
   1b214:	0a000005 	beq	1b230 <CNetworkLayer::GetGateway(unsigned char const*) const+0x48>
   1b218:	e8bd4010 	pop	{r4, lr}
   1b21c:	ea00179a 	b	2108c <CIPAddress::Get() const>
   1b220:	e59f2018 	ldr	r2, [pc, #24]	; 1b240 <CNetworkLayer::GetGateway(unsigned char const*) const+0x58>
   1b224:	e59f1018 	ldr	r1, [pc, #24]	; 1b244 <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   1b228:	e59f0018 	ldr	r0, [pc, #24]	; 1b248 <CNetworkLayer::GetGateway(unsigned char const*) const+0x60>
   1b22c:	eb002577 	bl	24810 <assertion_failed>
   1b230:	e3a02f49 	mov	r2, #292	; 0x124
   1b234:	e59f1008 	ldr	r1, [pc, #8]	; 1b244 <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   1b238:	e59f000c 	ldr	r0, [pc, #12]	; 1b24c <CNetworkLayer::GetGateway(unsigned char const*) const+0x64>
   1b23c:	eb002573 	bl	24810 <assertion_failed>
   1b240:	00000122 	.word	0x00000122
   1b244:	00043adc 	.word	0x00043adc
   1b248:	00043a48 	.word	0x00043a48
   1b24c:	00043be0 	.word	0x00043be0

0001b250 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>:
   1b250:	e5900008 	ldr	r0, [r0, #8]
   1b254:	e3500000 	cmp	r0, #0
   1b258:	0a000000 	beq	1b260 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)+0x10>
   1b25c:	ea00076c 	b	1d014 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1b260:	e92d4010 	push	{r4, lr}
   1b264:	ebfffdb8 	bl	1a94c <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>

0001b268 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>:
   1b268:	e92d4070 	push	{r4, r5, r6, lr}
   1b26c:	e3a05000 	mov	r5, #0
   1b270:	e1a04000 	mov	r4, r0
   1b274:	e8800026 	stm	r0, {r1, r2, r5}
   1b278:	e580500c 	str	r5, [r0, #12]
   1b27c:	e2800010 	add	r0, r0, #16
   1b280:	eb001811 	bl	212cc <CNetQueue::CNetQueue()>
   1b284:	e284001c 	add	r0, r4, #28
   1b288:	eb00180f 	bl	212cc <CNetQueue::CNetQueue()>
   1b28c:	e2840028 	add	r0, r4, #40	; 0x28
   1b290:	eb00180d 	bl	212cc <CNetQueue::CNetQueue()>
   1b294:	e5943000 	ldr	r3, [r4]
   1b298:	e1c453b4 	strh	r5, [r4, #52]	; 0x34
   1b29c:	e1530005 	cmp	r3, r5
   1b2a0:	0a000004 	beq	1b2b8 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x50>
   1b2a4:	e5943004 	ldr	r3, [r4, #4]
   1b2a8:	e3530000 	cmp	r3, #0
   1b2ac:	0a000005 	beq	1b2c8 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x60>
   1b2b0:	e1a00004 	mov	r0, r4
   1b2b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b2b8:	e3a02025 	mov	r2, #37	; 0x25
   1b2bc:	e59f1014 	ldr	r1, [pc, #20]	; 1b2d8 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   1b2c0:	e59f0014 	ldr	r0, [pc, #20]	; 1b2dc <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x74>
   1b2c4:	eb002551 	bl	24810 <assertion_failed>
   1b2c8:	e3a02026 	mov	r2, #38	; 0x26
   1b2cc:	e59f1004 	ldr	r1, [pc, #4]	; 1b2d8 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   1b2d0:	e59f0008 	ldr	r0, [pc, #8]	; 1b2e0 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x78>
   1b2d4:	eb00254d 	bl	24810 <assertion_failed>
   1b2d8:	00043bf8 	.word	0x00043bf8
   1b2dc:	00043a48 	.word	0x00043a48
   1b2e0:	00043c08 	.word	0x00043c08

0001b2e4 <CLinkLayer::~CLinkLayer()>:
   1b2e4:	e92d4070 	push	{r4, r5, r6, lr}
   1b2e8:	e590500c 	ldr	r5, [r0, #12]
   1b2ec:	e1a04000 	mov	r4, r0
   1b2f0:	e3550000 	cmp	r5, #0
   1b2f4:	0a000004 	beq	1b30c <CLinkLayer::~CLinkLayer()+0x28>
   1b2f8:	e1a00005 	mov	r0, r5
   1b2fc:	eb00030e 	bl	1bf3c <CARPHandler::~CARPHandler()>
   1b300:	e1a00005 	mov	r0, r5
   1b304:	e3a01f93 	mov	r1, #588	; 0x24c
   1b308:	eb003f6b 	bl	2b0bc <operator delete(void*, unsigned int)>
   1b30c:	e3a03000 	mov	r3, #0
   1b310:	e1a00004 	mov	r0, r4
   1b314:	e584300c 	str	r3, [r4, #12]
   1b318:	e5843008 	str	r3, [r4, #8]
   1b31c:	e5843004 	str	r3, [r4, #4]
   1b320:	e4803028 	str	r3, [r0], #40	; 0x28
   1b324:	eb001822 	bl	213b4 <CNetQueue::~CNetQueue()>
   1b328:	e284001c 	add	r0, r4, #28
   1b32c:	eb001820 	bl	213b4 <CNetQueue::~CNetQueue()>
   1b330:	e2840010 	add	r0, r4, #16
   1b334:	eb00181e 	bl	213b4 <CNetQueue::~CNetQueue()>
   1b338:	e1a00004 	mov	r0, r4
   1b33c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b340 <CLinkLayer::Initialize()>:
   1b340:	e92d4030 	push	{r4, r5, lr}
   1b344:	e5903000 	ldr	r3, [r0]
   1b348:	e24dd00c 	sub	sp, sp, #12
   1b34c:	e3530000 	cmp	r3, #0
   1b350:	0a00000d 	beq	1b38c <CLinkLayer::Initialize()+0x4c>
   1b354:	e1a04000 	mov	r4, r0
   1b358:	e3a00f93 	mov	r0, #588	; 0x24c
   1b35c:	eb003f48 	bl	2b084 <operator new(unsigned int)>
   1b360:	e1a03004 	mov	r3, r4
   1b364:	e4931010 	ldr	r1, [r3], #16
   1b368:	e5942004 	ldr	r2, [r4, #4]
   1b36c:	e58d3000 	str	r3, [sp]
   1b370:	e1a03004 	mov	r3, r4
   1b374:	e1a05000 	mov	r5, r0
   1b378:	eb0002c9 	bl	1bea4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>
   1b37c:	e3a00001 	mov	r0, #1
   1b380:	e584500c 	str	r5, [r4, #12]
   1b384:	e28dd00c 	add	sp, sp, #12
   1b388:	e8bd8030 	pop	{r4, r5, pc}
   1b38c:	e3a02035 	mov	r2, #53	; 0x35
   1b390:	e59f1004 	ldr	r1, [pc, #4]	; 1b39c <CLinkLayer::Initialize()+0x5c>
   1b394:	e59f0004 	ldr	r0, [pc, #4]	; 1b3a0 <CLinkLayer::Initialize()+0x60>
   1b398:	eb00251c 	bl	24810 <assertion_failed>
   1b39c:	00043bf8 	.word	0x00043bf8
   1b3a0:	00043a48 	.word	0x00043a48

0001b3a4 <CLinkLayer::AttachLayer(CNetworkLayer*)>:
   1b3a4:	e5903008 	ldr	r3, [r0, #8]
   1b3a8:	e92d4010 	push	{r4, lr}
   1b3ac:	e3530000 	cmp	r3, #0
   1b3b0:	1a000006 	bne	1b3d0 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x2c>
   1b3b4:	e3510000 	cmp	r1, #0
   1b3b8:	e5801008 	str	r1, [r0, #8]
   1b3bc:	18bd8010 	popne	{r4, pc}
   1b3c0:	e3a02040 	mov	r2, #64	; 0x40
   1b3c4:	e59f1014 	ldr	r1, [pc, #20]	; 1b3e0 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x3c>
   1b3c8:	e59f0014 	ldr	r0, [pc, #20]	; 1b3e4 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x40>
   1b3cc:	eb00250f 	bl	24810 <assertion_failed>
   1b3d0:	e3a0203e 	mov	r2, #62	; 0x3e
   1b3d4:	e59f1004 	ldr	r1, [pc, #4]	; 1b3e0 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x3c>
   1b3d8:	e59f0008 	ldr	r0, [pc, #8]	; 1b3e8 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x44>
   1b3dc:	eb00250b 	bl	24810 <assertion_failed>
   1b3e0:	00043bf8 	.word	0x00043bf8
   1b3e4:	00043a5c 	.word	0x00043a5c
   1b3e8:	00043c1c 	.word	0x00043c1c

0001b3ec <CLinkLayer::Process()>:
   1b3ec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3f0:	e1a04000 	mov	r4, r0
   1b3f4:	e5900004 	ldr	r0, [r0, #4]
   1b3f8:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1b3fc:	e3500000 	cmp	r0, #0
   1b400:	e24dd00c 	sub	sp, sp, #12
   1b404:	0a00004a 	beq	1b534 <CLinkLayer::Process()+0x148>
   1b408:	eb000214 	bl	1bc60 <CNetDeviceLayer::GetMACAddress() const>
   1b40c:	e2506000 	subs	r6, r0, #0
   1b410:	0a00004f 	beq	1b554 <CLinkLayer::Process()+0x168>
   1b414:	e5940004 	ldr	r0, [r4, #4]
   1b418:	e3500000 	cmp	r0, #0
   1b41c:	0a000050 	beq	1b564 <CLinkLayer::Process()+0x178>
   1b420:	e28d3018 	add	r3, sp, #24
   1b424:	e28d5010 	add	r5, sp, #16
   1b428:	e283700e 	add	r7, r3, #14
   1b42c:	e284a01c 	add	sl, r4, #28
   1b430:	e3a09000 	mov	r9, #0
   1b434:	e59f8178 	ldr	r8, [pc, #376]	; 1b5b4 <CLinkLayer::Process()+0x1c8>
   1b438:	e3a0b006 	mov	fp, #6
   1b43c:	ea000000 	b	1b444 <CLinkLayer::Process()+0x58>
   1b440:	e5940004 	ldr	r0, [r4, #4]
   1b444:	e28d200c 	add	r2, sp, #12
   1b448:	e28d1018 	add	r1, sp, #24
   1b44c:	eb000213 	bl	1bca0 <CNetDeviceLayer::Receive(void*, unsigned int*)>
   1b450:	e3500000 	cmp	r0, #0
   1b454:	0a00002f 	beq	1b518 <CLinkLayer::Process()+0x12c>
   1b458:	e59d300c 	ldr	r3, [sp, #12]
   1b45c:	e3530d19 	cmp	r3, #1600	; 0x640
   1b460:	8a000019 	bhi	1b4cc <CLinkLayer::Process()+0xe0>
   1b464:	e353000e 	cmp	r3, #14
   1b468:	9afffff4 	bls	1b440 <CLinkLayer::Process()+0x54>
   1b46c:	e28d1018 	add	r1, sp, #24
   1b470:	e1a00005 	mov	r0, r5
   1b474:	eb003e4b 	bl	2ada8 <CMACAddress::CMACAddress(unsigned char const*)>
   1b478:	e1a01006 	mov	r1, r6
   1b47c:	e1a00005 	mov	r0, r5
   1b480:	eb003e33 	bl	2ad54 <CMACAddress::operator!=(CMACAddress const&) const>
   1b484:	e3500000 	cmp	r0, #0
   1b488:	1a000018 	bne	1b4f0 <CLinkLayer::Process()+0x104>
   1b48c:	e59d200c 	ldr	r2, [sp, #12]
   1b490:	e242200e 	sub	r2, r2, #14
   1b494:	e3520000 	cmp	r2, #0
   1b498:	e58d200c 	str	r2, [sp, #12]
   1b49c:	0a000028 	beq	1b544 <CLinkLayer::Process()+0x158>
   1b4a0:	e1dd32b4 	ldrh	r3, [sp, #36]	; 0x24
   1b4a4:	e3530008 	cmp	r3, #8
   1b4a8:	0a000015 	beq	1b504 <CLinkLayer::Process()+0x118>
   1b4ac:	e1530008 	cmp	r3, r8
   1b4b0:	0a000009 	beq	1b4dc <CLinkLayer::Process()+0xf0>
   1b4b4:	e1d423b4 	ldrh	r2, [r4, #52]	; 0x34
   1b4b8:	e1520003 	cmp	r2, r3
   1b4bc:	0a00002c 	beq	1b574 <CLinkLayer::Process()+0x188>
   1b4c0:	e1a00005 	mov	r0, r5
   1b4c4:	eb003e09 	bl	2acf0 <CMACAddress::~CMACAddress()>
   1b4c8:	eaffffdc 	b	1b440 <CLinkLayer::Process()+0x54>
   1b4cc:	e3a0204e 	mov	r2, #78	; 0x4e
   1b4d0:	e59f10e0 	ldr	r1, [pc, #224]	; 1b5b8 <CLinkLayer::Process()+0x1cc>
   1b4d4:	e59f00e0 	ldr	r0, [pc, #224]	; 1b5bc <CLinkLayer::Process()+0x1d0>
   1b4d8:	eb0024cc 	bl	24810 <assertion_failed>
   1b4dc:	e1a03009 	mov	r3, r9
   1b4e0:	e1a01007 	mov	r1, r7
   1b4e4:	e2840010 	add	r0, r4, #16
   1b4e8:	eb0017b6 	bl	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b4ec:	eafffff3 	b	1b4c0 <CLinkLayer::Process()+0xd4>
   1b4f0:	e1a00005 	mov	r0, r5
   1b4f4:	eb003e5c 	bl	2ae6c <CMACAddress::IsBroadcast() const>
   1b4f8:	e3500000 	cmp	r0, #0
   1b4fc:	1affffe2 	bne	1b48c <CLinkLayer::Process()+0xa0>
   1b500:	eaffffee 	b	1b4c0 <CLinkLayer::Process()+0xd4>
   1b504:	e1a03009 	mov	r3, r9
   1b508:	e1a01007 	mov	r1, r7
   1b50c:	e1a0000a 	mov	r0, sl
   1b510:	eb0017ac 	bl	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b514:	eaffffe9 	b	1b4c0 <CLinkLayer::Process()+0xd4>
   1b518:	e594000c 	ldr	r0, [r4, #12]
   1b51c:	e3500000 	cmp	r0, #0
   1b520:	0a00001f 	beq	1b5a4 <CLinkLayer::Process()+0x1b8>
   1b524:	eb000385 	bl	1c340 <CARPHandler::Process()>
   1b528:	e28dde65 	add	sp, sp, #1616	; 0x650
   1b52c:	e28dd00c 	add	sp, sp, #12
   1b530:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b534:	e3a02045 	mov	r2, #69	; 0x45
   1b538:	e59f1078 	ldr	r1, [pc, #120]	; 1b5b8 <CLinkLayer::Process()+0x1cc>
   1b53c:	e59f007c 	ldr	r0, [pc, #124]	; 1b5c0 <CLinkLayer::Process()+0x1d4>
   1b540:	eb0024b2 	bl	24810 <assertion_failed>
   1b544:	e3a0205d 	mov	r2, #93	; 0x5d
   1b548:	e59f1068 	ldr	r1, [pc, #104]	; 1b5b8 <CLinkLayer::Process()+0x1cc>
   1b54c:	e59f0070 	ldr	r0, [pc, #112]	; 1b5c4 <CLinkLayer::Process()+0x1d8>
   1b550:	eb0024ae 	bl	24810 <assertion_failed>
   1b554:	e3a02047 	mov	r2, #71	; 0x47
   1b558:	e59f1058 	ldr	r1, [pc, #88]	; 1b5b8 <CLinkLayer::Process()+0x1cc>
   1b55c:	e59f0064 	ldr	r0, [pc, #100]	; 1b5c8 <CLinkLayer::Process()+0x1dc>
   1b560:	eb0024aa 	bl	24810 <assertion_failed>
   1b564:	e3a02049 	mov	r2, #73	; 0x49
   1b568:	e59f1048 	ldr	r1, [pc, #72]	; 1b5b8 <CLinkLayer::Process()+0x1cc>
   1b56c:	e59f004c 	ldr	r0, [pc, #76]	; 1b5c0 <CLinkLayer::Process()+0x1d4>
   1b570:	eb0024a6 	bl	24810 <assertion_failed>
   1b574:	e1a0000b 	mov	r0, fp
   1b578:	eb003ec1 	bl	2b084 <operator new(unsigned int)>
   1b57c:	e1a0200b 	mov	r2, fp
   1b580:	e28d101e 	add	r1, sp, #30
   1b584:	e58d0004 	str	r0, [sp, #4]
   1b588:	eb003ce4 	bl	2a920 <memcpy>
   1b58c:	e59d3004 	ldr	r3, [sp, #4]
   1b590:	e59d200c 	ldr	r2, [sp, #12]
   1b594:	e1a01007 	mov	r1, r7
   1b598:	e2840028 	add	r0, r4, #40	; 0x28
   1b59c:	eb001789 	bl	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b5a0:	eaffffc6 	b	1b4c0 <CLinkLayer::Process()+0xd4>
   1b5a4:	e3a02077 	mov	r2, #119	; 0x77
   1b5a8:	e59f1008 	ldr	r1, [pc, #8]	; 1b5b8 <CLinkLayer::Process()+0x1cc>
   1b5ac:	e59f0018 	ldr	r0, [pc, #24]	; 1b5cc <CLinkLayer::Process()+0x1e0>
   1b5b0:	eb002496 	bl	24810 <assertion_failed>
   1b5b4:	00000608 	.word	0x00000608
   1b5b8:	00043bf8 	.word	0x00043bf8
   1b5bc:	000418b4 	.word	0x000418b4
   1b5c0:	00043c08 	.word	0x00043c08
   1b5c4:	00043ad0 	.word	0x00043ad0
   1b5c8:	00043c34 	.word	0x00043c34
   1b5cc:	00043c48 	.word	0x00043c48

0001b5d0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>:
   1b5d0:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b5d4:	e59fc180 	ldr	ip, [pc, #384]	; 1b75c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x18c>
   1b5d8:	e243e001 	sub	lr, r3, #1
   1b5dc:	e28db01c 	add	fp, sp, #28
   1b5e0:	e15e000c 	cmp	lr, ip
   1b5e4:	e24dd010 	sub	sp, sp, #16
   1b5e8:	8a000034 	bhi	1b6c0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xf0>
   1b5ec:	e1a04003 	mov	r4, r3
   1b5f0:	e1a05000 	mov	r5, r0
   1b5f4:	e2833015 	add	r3, r3, #21
   1b5f8:	e5900004 	ldr	r0, [r0, #4]
   1b5fc:	e3c33007 	bic	r3, r3, #7
   1b600:	e04dd003 	sub	sp, sp, r3
   1b604:	e3500000 	cmp	r0, #0
   1b608:	e1a06002 	mov	r6, r2
   1b60c:	e1a07001 	mov	r7, r1
   1b610:	e28d8008 	add	r8, sp, #8
   1b614:	e284900e 	add	r9, r4, #14
   1b618:	0a00003f 	beq	1b71c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x14c>
   1b61c:	eb00018f 	bl	1bc60 <CNetDeviceLayer::GetMACAddress() const>
   1b620:	e3500000 	cmp	r0, #0
   1b624:	0a000028 	beq	1b6cc <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xfc>
   1b628:	e28d100e 	add	r1, sp, #14
   1b62c:	eb003df7 	bl	2ae10 <CMACAddress::CopyTo(unsigned char*) const>
   1b630:	e3a02000 	mov	r2, #0
   1b634:	e3a03008 	mov	r3, #8
   1b638:	e1560002 	cmp	r6, r2
   1b63c:	e5c8200d 	strb	r2, [r8, #13]
   1b640:	e5c8300c 	strb	r3, [r8, #12]
   1b644:	0a000038 	beq	1b72c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x15c>
   1b648:	e1a02004 	mov	r2, r4
   1b64c:	e1a01006 	mov	r1, r6
   1b650:	e28d0016 	add	r0, sp, #22
   1b654:	eb003cb1 	bl	2a920 <memcpy>
   1b658:	e5953000 	ldr	r3, [r5]
   1b65c:	e3530000 	cmp	r3, #0
   1b660:	0a000035 	beq	1b73c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x16c>
   1b664:	e595300c 	ldr	r3, [r5, #12]
   1b668:	e3530000 	cmp	r3, #0
   1b66c:	0a000036 	beq	1b74c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x17c>
   1b670:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b674:	eb003d9a 	bl	2ace4 <CMACAddress::CMACAddress()>
   1b678:	e1a00007 	mov	r0, r7
   1b67c:	eb0016b3 	bl	21150 <CIPAddress::IsBroadcast() const>
   1b680:	e3500000 	cmp	r0, #0
   1b684:	0a000014 	beq	1b6dc <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x10c>
   1b688:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b68c:	eb003dca 	bl	2adbc <CMACAddress::SetBroadcast()>
   1b690:	e1a01008 	mov	r1, r8
   1b694:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b698:	eb003ddc 	bl	2ae10 <CMACAddress::CopyTo(unsigned char*) const>
   1b69c:	e1a02009 	mov	r2, r9
   1b6a0:	e1a01008 	mov	r1, r8
   1b6a4:	e5950004 	ldr	r0, [r5, #4]
   1b6a8:	eb000179 	bl	1bc94 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b6ac:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b6b0:	eb003d8e 	bl	2acf0 <CMACAddress::~CMACAddress()>
   1b6b4:	e3a00001 	mov	r0, #1
   1b6b8:	e24bd01c 	sub	sp, fp, #28
   1b6bc:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b6c0:	e3a00000 	mov	r0, #0
   1b6c4:	e24bd01c 	sub	sp, fp, #28
   1b6c8:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b6cc:	e3a02089 	mov	r2, #137	; 0x89
   1b6d0:	e59f1088 	ldr	r1, [pc, #136]	; 1b760 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b6d4:	e59f0088 	ldr	r0, [pc, #136]	; 1b764 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x194>
   1b6d8:	eb00244c 	bl	24810 <assertion_failed>
   1b6dc:	e5950000 	ldr	r0, [r5]
   1b6e0:	eb00155b 	bl	20c54 <CNetConfig::GetBroadcastAddress() const>
   1b6e4:	e1a01000 	mov	r1, r0
   1b6e8:	e1a00007 	mov	r0, r7
   1b6ec:	eb0015c1 	bl	20df8 <CIPAddress::operator==(CIPAddress const&) const>
   1b6f0:	e3500000 	cmp	r0, #0
   1b6f4:	1affffe3 	bne	1b688 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xb8>
   1b6f8:	e595000c 	ldr	r0, [r5, #12]
   1b6fc:	e1a01007 	mov	r1, r7
   1b700:	e58d9000 	str	r9, [sp]
   1b704:	e1a03008 	mov	r3, r8
   1b708:	e24b2024 	sub	r2, fp, #36	; 0x24
   1b70c:	eb000417 	bl	1c770 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>
   1b710:	e3500000 	cmp	r0, #0
   1b714:	1affffdd 	bne	1b690 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xc0>
   1b718:	eaffffe3 	b	1b6ac <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xdc>
   1b71c:	e3a02087 	mov	r2, #135	; 0x87
   1b720:	e59f1038 	ldr	r1, [pc, #56]	; 1b760 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b724:	e59f003c 	ldr	r0, [pc, #60]	; 1b768 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x198>
   1b728:	eb002438 	bl	24810 <assertion_failed>
   1b72c:	e3a0208e 	mov	r2, #142	; 0x8e
   1b730:	e59f1028 	ldr	r1, [pc, #40]	; 1b760 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b734:	e59f0030 	ldr	r0, [pc, #48]	; 1b76c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x19c>
   1b738:	eb002434 	bl	24810 <assertion_failed>
   1b73c:	e3a02092 	mov	r2, #146	; 0x92
   1b740:	e59f1018 	ldr	r1, [pc, #24]	; 1b760 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b744:	e59f0024 	ldr	r0, [pc, #36]	; 1b770 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1a0>
   1b748:	eb002430 	bl	24810 <assertion_failed>
   1b74c:	e3a02093 	mov	r2, #147	; 0x93
   1b750:	e59f1008 	ldr	r1, [pc, #8]	; 1b760 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b754:	e59f0018 	ldr	r0, [pc, #24]	; 1b774 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1a4>
   1b758:	eb00242c 	bl	24810 <assertion_failed>
   1b75c:	00000631 	.word	0x00000631
   1b760:	00043bf8 	.word	0x00043bf8
   1b764:	00043c34 	.word	0x00043c34
   1b768:	00043c08 	.word	0x00043c08
   1b76c:	00043c5c 	.word	0x00043c5c
   1b770:	00043a48 	.word	0x00043a48
   1b774:	00043c48 	.word	0x00043c48

0001b778 <CLinkLayer::Receive(void*, unsigned int*)>:
   1b778:	e3510000 	cmp	r1, #0
   1b77c:	e92d4010 	push	{r4, lr}
   1b780:	0a000009 	beq	1b7ac <CLinkLayer::Receive(void*, unsigned int*)+0x34>
   1b784:	e3520000 	cmp	r2, #0
   1b788:	e1a04002 	mov	r4, r2
   1b78c:	0a00000a 	beq	1b7bc <CLinkLayer::Receive(void*, unsigned int*)+0x44>
   1b790:	e3a02000 	mov	r2, #0
   1b794:	e280001c 	add	r0, r0, #28
   1b798:	eb001750 	bl	214e0 <CNetQueue::Dequeue(void*, void**)>
   1b79c:	e5840000 	str	r0, [r4]
   1b7a0:	e2900000 	adds	r0, r0, #0
   1b7a4:	13a00001 	movne	r0, #1
   1b7a8:	e8bd8010 	pop	{r4, pc}
   1b7ac:	e3a020a9 	mov	r2, #169	; 0xa9
   1b7b0:	e59f1014 	ldr	r1, [pc, #20]	; 1b7cc <CLinkLayer::Receive(void*, unsigned int*)+0x54>
   1b7b4:	e59f0014 	ldr	r0, [pc, #20]	; 1b7d0 <CLinkLayer::Receive(void*, unsigned int*)+0x58>
   1b7b8:	eb002414 	bl	24810 <assertion_failed>
   1b7bc:	e3a020aa 	mov	r2, #170	; 0xaa
   1b7c0:	e59f1004 	ldr	r1, [pc, #4]	; 1b7cc <CLinkLayer::Receive(void*, unsigned int*)+0x54>
   1b7c4:	e59f0008 	ldr	r0, [pc, #8]	; 1b7d4 <CLinkLayer::Receive(void*, unsigned int*)+0x5c>
   1b7c8:	eb002410 	bl	24810 <assertion_failed>
   1b7cc:	00043bf8 	.word	0x00043bf8
   1b7d0:	00040c5c 	.word	0x00040c5c
   1b7d4:	00041488 	.word	0x00041488

0001b7d8 <CLinkLayer::SendRaw(void const*, unsigned int)>:
   1b7d8:	e3510000 	cmp	r1, #0
   1b7dc:	e92d4010 	push	{r4, lr}
   1b7e0:	0a000007 	beq	1b804 <CLinkLayer::SendRaw(void const*, unsigned int)+0x2c>
   1b7e4:	e3520000 	cmp	r2, #0
   1b7e8:	0a000009 	beq	1b814 <CLinkLayer::SendRaw(void const*, unsigned int)+0x3c>
   1b7ec:	e5900004 	ldr	r0, [r0, #4]
   1b7f0:	e3500000 	cmp	r0, #0
   1b7f4:	0a00000a 	beq	1b824 <CLinkLayer::SendRaw(void const*, unsigned int)+0x4c>
   1b7f8:	eb000125 	bl	1bc94 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b7fc:	e3a00001 	mov	r0, #1
   1b800:	e8bd8010 	pop	{r4, pc}
   1b804:	e3a020b2 	mov	r2, #178	; 0xb2
   1b808:	e59f1024 	ldr	r1, [pc, #36]	; 1b834 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b80c:	e59f0024 	ldr	r0, [pc, #36]	; 1b838 <CLinkLayer::SendRaw(void const*, unsigned int)+0x60>
   1b810:	eb0023fe 	bl	24810 <assertion_failed>
   1b814:	e3a020b3 	mov	r2, #179	; 0xb3
   1b818:	e59f1014 	ldr	r1, [pc, #20]	; 1b834 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b81c:	e59f0018 	ldr	r0, [pc, #24]	; 1b83c <CLinkLayer::SendRaw(void const*, unsigned int)+0x64>
   1b820:	eb0023fa 	bl	24810 <assertion_failed>
   1b824:	e3a020b4 	mov	r2, #180	; 0xb4
   1b828:	e59f1004 	ldr	r1, [pc, #4]	; 1b834 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b82c:	e59f000c 	ldr	r0, [pc, #12]	; 1b840 <CLinkLayer::SendRaw(void const*, unsigned int)+0x68>
   1b830:	eb0023f6 	bl	24810 <assertion_failed>
   1b834:	00043bf8 	.word	0x00043bf8
   1b838:	00043c6c 	.word	0x00043c6c
   1b83c:	00043ad0 	.word	0x00043ad0
   1b840:	00043c08 	.word	0x00043c08

0001b844 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)>:
   1b844:	e92d4030 	push	{r4, r5, lr}
   1b848:	e3510000 	cmp	r1, #0
   1b84c:	e24dd00c 	sub	sp, sp, #12
   1b850:	0a000017 	beq	1b8b4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x70>
   1b854:	e3520000 	cmp	r2, #0
   1b858:	e1a04002 	mov	r4, r2
   1b85c:	0a000018 	beq	1b8c4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x80>
   1b860:	e2800028 	add	r0, r0, #40	; 0x28
   1b864:	e28d2004 	add	r2, sp, #4
   1b868:	e1a05003 	mov	r5, r3
   1b86c:	eb00171b 	bl	214e0 <CNetQueue::Dequeue(void*, void**)>
   1b870:	e3500000 	cmp	r0, #0
   1b874:	e5840000 	str	r0, [r4]
   1b878:	0a00000b 	beq	1b8ac <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x68>
   1b87c:	e3550000 	cmp	r5, #0
   1b880:	e59d4004 	ldr	r4, [sp, #4]
   1b884:	0a000004 	beq	1b89c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x58>
   1b888:	e3540000 	cmp	r4, #0
   1b88c:	0a000010 	beq	1b8d4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x90>
   1b890:	e1a00005 	mov	r0, r5
   1b894:	e1a01004 	mov	r1, r4
   1b898:	eb003d32 	bl	2ad68 <CMACAddress::Set(unsigned char const*)>
   1b89c:	e1a00004 	mov	r0, r4
   1b8a0:	e3a01006 	mov	r1, #6
   1b8a4:	eb003e04 	bl	2b0bc <operator delete(void*, unsigned int)>
   1b8a8:	e3a00001 	mov	r0, #1
   1b8ac:	e28dd00c 	add	sp, sp, #12
   1b8b0:	e8bd8030 	pop	{r4, r5, pc}
   1b8b4:	e3a020bd 	mov	r2, #189	; 0xbd
   1b8b8:	e59f1024 	ldr	r1, [pc, #36]	; 1b8e4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa0>
   1b8bc:	e59f0024 	ldr	r0, [pc, #36]	; 1b8e8 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa4>
   1b8c0:	eb0023d2 	bl	24810 <assertion_failed>
   1b8c4:	e3a020be 	mov	r2, #190	; 0xbe
   1b8c8:	e59f1014 	ldr	r1, [pc, #20]	; 1b8e4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa0>
   1b8cc:	e59f0018 	ldr	r0, [pc, #24]	; 1b8ec <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa8>
   1b8d0:	eb0023ce 	bl	24810 <assertion_failed>
   1b8d4:	e3a020c9 	mov	r2, #201	; 0xc9
   1b8d8:	e59f1004 	ldr	r1, [pc, #4]	; 1b8e4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa0>
   1b8dc:	e59f000c 	ldr	r0, [pc, #12]	; 1b8f0 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xac>
   1b8e0:	eb0023ca 	bl	24810 <assertion_failed>
   1b8e4:	00043bf8 	.word	0x00043bf8
   1b8e8:	00040c5c 	.word	0x00040c5c
   1b8ec:	00041488 	.word	0x00041488
   1b8f0:	00043ac4 	.word	0x00043ac4

0001b8f4 <CLinkLayer::EnableReceiveRaw(unsigned short)>:
   1b8f4:	e1d033b4 	ldrh	r3, [r0, #52]	; 0x34
   1b8f8:	e3530000 	cmp	r3, #0
   1b8fc:	1a000005 	bne	1b918 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x24>
   1b900:	e3510000 	cmp	r1, #0
   1b904:	0a000005 	beq	1b920 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x2c>
   1b908:	e6bf1fb1 	rev16	r1, r1
   1b90c:	e1c013b4 	strh	r1, [r0, #52]	; 0x34
   1b910:	e3a00001 	mov	r0, #1
   1b914:	e12fff1e 	bx	lr
   1b918:	e3a00000 	mov	r0, #0
   1b91c:	e12fff1e 	bx	lr
   1b920:	e92d4010 	push	{r4, lr}
   1b924:	e3a020d9 	mov	r2, #217	; 0xd9
   1b928:	e59f1004 	ldr	r1, [pc, #4]	; 1b934 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x40>
   1b92c:	e59f0004 	ldr	r0, [pc, #4]	; 1b938 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x44>
   1b930:	eb0023b6 	bl	24810 <assertion_failed>
   1b934:	00043bf8 	.word	0x00043bf8
   1b938:	00043c78 	.word	0x00043c78

0001b93c <CLinkLayer::ResolveFailed(void const*, unsigned int)>:
   1b93c:	e3510000 	cmp	r1, #0
   1b940:	e92d4010 	push	{r4, lr}
   1b944:	0a000009 	beq	1b970 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x34>
   1b948:	e352000e 	cmp	r2, #14
   1b94c:	9a00000b 	bls	1b980 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x44>
   1b950:	e5900008 	ldr	r0, [r0, #8]
   1b954:	e3500000 	cmp	r0, #0
   1b958:	0a00000c 	beq	1b990 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x54>
   1b95c:	e8bd4010 	pop	{r4, lr}
   1b960:	e242300e 	sub	r3, r2, #14
   1b964:	e281200e 	add	r2, r1, #14
   1b968:	e3a01001 	mov	r1, #1
   1b96c:	eafffe37 	b	1b250 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>
   1b970:	e3a020e1 	mov	r2, #225	; 0xe1
   1b974:	e59f1024 	ldr	r1, [pc, #36]	; 1b9a0 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b978:	e59f0024 	ldr	r0, [pc, #36]	; 1b9a4 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x68>
   1b97c:	eb0023a3 	bl	24810 <assertion_failed>
   1b980:	e3a020e2 	mov	r2, #226	; 0xe2
   1b984:	e59f1014 	ldr	r1, [pc, #20]	; 1b9a0 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b988:	e59f0018 	ldr	r0, [pc, #24]	; 1b9a8 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x6c>
   1b98c:	eb00239f 	bl	24810 <assertion_failed>
   1b990:	e3a020e3 	mov	r2, #227	; 0xe3
   1b994:	e59f1004 	ldr	r1, [pc, #4]	; 1b9a0 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b998:	e59f000c 	ldr	r0, [pc, #12]	; 1b9ac <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x70>
   1b99c:	eb00239b 	bl	24810 <assertion_failed>
   1b9a0:	00043bf8 	.word	0x00043bf8
   1b9a4:	00043c8c 	.word	0x00043c8c
   1b9a8:	00043ca0 	.word	0x00043ca0
   1b9ac:	00043a5c 	.word	0x00043a5c

0001b9b0 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>:
   1b9b0:	e3a03000 	mov	r3, #0
   1b9b4:	e92d4010 	push	{r4, lr}
   1b9b8:	e1a04000 	mov	r4, r0
   1b9bc:	e5c02000 	strb	r2, [r0]
   1b9c0:	e980000a 	stmib	r0, {r1, r3}
   1b9c4:	e280000c 	add	r0, r0, #12
   1b9c8:	eb00163f 	bl	212cc <CNetQueue::CNetQueue()>
   1b9cc:	e2840018 	add	r0, r4, #24
   1b9d0:	eb00163d 	bl	212cc <CNetQueue::CNetQueue()>
   1b9d4:	e1a00004 	mov	r0, r4
   1b9d8:	e8bd8010 	pop	{r4, pc}

0001b9dc <CNetDeviceLayer::~CNetDeviceLayer()>:
   1b9dc:	e92d4010 	push	{r4, lr}
   1b9e0:	e3a03000 	mov	r3, #0
   1b9e4:	e1a04000 	mov	r4, r0
   1b9e8:	e2800018 	add	r0, r0, #24
   1b9ec:	e5843008 	str	r3, [r4, #8]
   1b9f0:	e5843004 	str	r3, [r4, #4]
   1b9f4:	eb00166e 	bl	213b4 <CNetQueue::~CNetQueue()>
   1b9f8:	e284000c 	add	r0, r4, #12
   1b9fc:	eb00166c 	bl	213b4 <CNetQueue::~CNetQueue()>
   1ba00:	e1a00004 	mov	r0, r4
   1ba04:	e8bd8010 	pop	{r4, pc}

0001ba08 <CNetDeviceLayer::Initialize(bool)>:
   1ba08:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1ba0c:	e5903008 	ldr	r3, [r0, #8]
   1ba10:	e24dd00c 	sub	sp, sp, #12
   1ba14:	e3530000 	cmp	r3, #0
   1ba18:	1a000039 	bne	1bb04 <CNetDeviceLayer::Initialize(bool)+0xfc>
   1ba1c:	e1a04000 	mov	r4, r0
   1ba20:	e5d00000 	ldrb	r0, [r0]
   1ba24:	e1a06001 	mov	r6, r1
   1ba28:	eb003d60 	bl	2afb0 <CNetDevice::GetNetDevice(TNetDeviceType)>
   1ba2c:	e3500000 	cmp	r0, #0
   1ba30:	e1a05000 	mov	r5, r0
   1ba34:	e5840008 	str	r0, [r4, #8]
   1ba38:	0a000035 	beq	1bb14 <CNetDeviceLayer::Initialize(bool)+0x10c>
   1ba3c:	e3a000e0 	mov	r0, #224	; 0xe0
   1ba40:	eb003d8f 	bl	2b084 <operator new(unsigned int)>
   1ba44:	e5941008 	ldr	r1, [r4, #8]
   1ba48:	eb0000dd 	bl	1bdc4 <CPHYTask::CPHYTask(CNetDevice*)>
   1ba4c:	e3560000 	cmp	r6, #0
   1ba50:	1a000003 	bne	1ba64 <CNetDeviceLayer::Initialize(bool)+0x5c>
   1ba54:	e3a05001 	mov	r5, #1
   1ba58:	e1a00005 	mov	r0, r5
   1ba5c:	e28dd00c 	add	sp, sp, #12
   1ba60:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ba64:	eb003929 	bl	29f10 <CTimer::Get()>
   1ba68:	eb003672 	bl	29438 <CTimer::GetTicks() const>
   1ba6c:	e59f60b8 	ldr	r6, [pc, #184]	; 1bb2c <CNetDeviceLayer::Initialize(bool)+0x124>
   1ba70:	e1a07000 	mov	r7, r0
   1ba74:	ea000005 	b	1ba90 <CNetDeviceLayer::Initialize(bool)+0x88>
   1ba78:	e5940008 	ldr	r0, [r4, #8]
   1ba7c:	e5903000 	ldr	r3, [r0]
   1ba80:	e593301c 	ldr	r3, [r3, #28]
   1ba84:	e12fff33 	blx	r3
   1ba88:	e2505000 	subs	r5, r0, #0
   1ba8c:	1a00000a 	bne	1babc <CNetDeviceLayer::Initialize(bool)+0xb4>
   1ba90:	eb00391e 	bl	29f10 <CTimer::Get()>
   1ba94:	eb003667 	bl	29438 <CTimer::GetTicks() const>
   1ba98:	e0400007 	sub	r0, r0, r7
   1ba9c:	e1500006 	cmp	r0, r6
   1baa0:	9afffff4 	bls	1ba78 <CNetDeviceLayer::Initialize(bool)+0x70>
   1baa4:	eb002c4c 	bl	26bdc <CLogger::Get()>
   1baa8:	e59f3080 	ldr	r3, [pc, #128]	; 1bb30 <CNetDeviceLayer::Initialize(bool)+0x128>
   1baac:	e3a02002 	mov	r2, #2
   1bab0:	e59f107c 	ldr	r1, [pc, #124]	; 1bb34 <CNetDeviceLayer::Initialize(bool)+0x12c>
   1bab4:	eb002b85 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bab8:	eaffffe5 	b	1ba54 <CNetDeviceLayer::Initialize(bool)+0x4c>
   1babc:	e5940008 	ldr	r0, [r4, #8]
   1bac0:	e5903000 	ldr	r3, [r0]
   1bac4:	e5933020 	ldr	r3, [r3, #32]
   1bac8:	e12fff33 	blx	r3
   1bacc:	e3500006 	cmp	r0, #6
   1bad0:	e1a04000 	mov	r4, r0
   1bad4:	0affffde 	beq	1ba54 <CNetDeviceLayer::Initialize(bool)+0x4c>
   1bad8:	eb002c3f 	bl	26bdc <CLogger::Get()>
   1badc:	e1a06000 	mov	r6, r0
   1bae0:	e1a00004 	mov	r0, r4
   1bae4:	eb003d22 	bl	2af74 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>
   1bae8:	e59f3048 	ldr	r3, [pc, #72]	; 1bb38 <CNetDeviceLayer::Initialize(bool)+0x130>
   1baec:	e58d0000 	str	r0, [sp]
   1baf0:	e3a02003 	mov	r2, #3
   1baf4:	e1a00006 	mov	r0, r6
   1baf8:	e59f1034 	ldr	r1, [pc, #52]	; 1bb34 <CNetDeviceLayer::Initialize(bool)+0x12c>
   1bafc:	eb002b73 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bb00:	eaffffd4 	b	1ba58 <CNetDeviceLayer::Initialize(bool)+0x50>
   1bb04:	e3a02033 	mov	r2, #51	; 0x33
   1bb08:	e59f102c 	ldr	r1, [pc, #44]	; 1bb3c <CNetDeviceLayer::Initialize(bool)+0x134>
   1bb0c:	e59f002c 	ldr	r0, [pc, #44]	; 1bb40 <CNetDeviceLayer::Initialize(bool)+0x138>
   1bb10:	eb00233e 	bl	24810 <assertion_failed>
   1bb14:	eb002c30 	bl	26bdc <CLogger::Get()>
   1bb18:	e59f3024 	ldr	r3, [pc, #36]	; 1bb44 <CNetDeviceLayer::Initialize(bool)+0x13c>
   1bb1c:	e3a02001 	mov	r2, #1
   1bb20:	e59f100c 	ldr	r1, [pc, #12]	; 1bb34 <CNetDeviceLayer::Initialize(bool)+0x12c>
   1bb24:	eb002b69 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bb28:	eaffffca 	b	1ba58 <CNetDeviceLayer::Initialize(bool)+0x50>
   1bb2c:	0000018f 	.word	0x0000018f
   1bb30:	00043cf8 	.word	0x00043cf8
   1bb34:	00043cc4 	.word	0x00043cc4
   1bb38:	00043d08 	.word	0x00043d08
   1bb3c:	00043ccc 	.word	0x00043ccc
   1bb40:	0003fadc 	.word	0x0003fadc
   1bb44:	00043cdc 	.word	0x00043cdc

0001bb48 <CNetDeviceLayer::Process()>:
   1bb48:	e92d4070 	push	{r4, r5, r6, lr}
   1bb4c:	e1a04000 	mov	r4, r0
   1bb50:	e5900008 	ldr	r0, [r0, #8]
   1bb54:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1bb58:	e3500000 	cmp	r0, #0
   1bb5c:	e24dd008 	sub	sp, sp, #8
   1bb60:	0a000035 	beq	1bc3c <CNetDeviceLayer::Process()+0xf4>
   1bb64:	e3a05000 	mov	r5, #0
   1bb68:	e284600c 	add	r6, r4, #12
   1bb6c:	e5903000 	ldr	r3, [r0]
   1bb70:	e5933010 	ldr	r3, [r3, #16]
   1bb74:	e12fff33 	blx	r3
   1bb78:	e3500000 	cmp	r0, #0
   1bb7c:	1a000015 	bne	1bbd8 <CNetDeviceLayer::Process()+0x90>
   1bb80:	e3a06000 	mov	r6, #0
   1bb84:	e2845018 	add	r5, r4, #24
   1bb88:	ea000003 	b	1bb9c <CNetDeviceLayer::Process()+0x54>
   1bb8c:	e1a03006 	mov	r3, r6
   1bb90:	e28d1008 	add	r1, sp, #8
   1bb94:	e1a00005 	mov	r0, r5
   1bb98:	eb00160a 	bl	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1bb9c:	e5940008 	ldr	r0, [r4, #8]
   1bba0:	e28d2004 	add	r2, sp, #4
   1bba4:	e5903000 	ldr	r3, [r0]
   1bba8:	e28d1008 	add	r1, sp, #8
   1bbac:	e5933018 	ldr	r3, [r3, #24]
   1bbb0:	e12fff33 	blx	r3
   1bbb4:	e3500000 	cmp	r0, #0
   1bbb8:	0a00001c 	beq	1bc30 <CNetDeviceLayer::Process()+0xe8>
   1bbbc:	e59d2004 	ldr	r2, [sp, #4]
   1bbc0:	e3520000 	cmp	r2, #0
   1bbc4:	1afffff0 	bne	1bb8c <CNetDeviceLayer::Process()+0x44>
   1bbc8:	e3a0206d 	mov	r2, #109	; 0x6d
   1bbcc:	e59f1078 	ldr	r1, [pc, #120]	; 1bc4c <CNetDeviceLayer::Process()+0x104>
   1bbd0:	e59f0078 	ldr	r0, [pc, #120]	; 1bc50 <CNetDeviceLayer::Process()+0x108>
   1bbd4:	eb00230d 	bl	24810 <assertion_failed>
   1bbd8:	e1a02005 	mov	r2, r5
   1bbdc:	e28d1008 	add	r1, sp, #8
   1bbe0:	e1a00006 	mov	r0, r6
   1bbe4:	eb00163d 	bl	214e0 <CNetQueue::Dequeue(void*, void**)>
   1bbe8:	e3500000 	cmp	r0, #0
   1bbec:	e1a02000 	mov	r2, r0
   1bbf0:	e58d0004 	str	r0, [sp, #4]
   1bbf4:	0affffe1 	beq	1bb80 <CNetDeviceLayer::Process()+0x38>
   1bbf8:	e5940008 	ldr	r0, [r4, #8]
   1bbfc:	e28d1008 	add	r1, sp, #8
   1bc00:	e5903000 	ldr	r3, [r0]
   1bc04:	e5933014 	ldr	r3, [r3, #20]
   1bc08:	e12fff33 	blx	r3
   1bc0c:	e3500000 	cmp	r0, #0
   1bc10:	15940008 	ldrne	r0, [r4, #8]
   1bc14:	1affffd4 	bne	1bb6c <CNetDeviceLayer::Process()+0x24>
   1bc18:	eb002bef 	bl	26bdc <CLogger::Get()>
   1bc1c:	e59f3030 	ldr	r3, [pc, #48]	; 1bc54 <CNetDeviceLayer::Process()+0x10c>
   1bc20:	e3a02002 	mov	r2, #2
   1bc24:	e59f102c 	ldr	r1, [pc, #44]	; 1bc58 <CNetDeviceLayer::Process()+0x110>
   1bc28:	eb002b28 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bc2c:	eaffffd3 	b	1bb80 <CNetDeviceLayer::Process()+0x38>
   1bc30:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1bc34:	e28dd008 	add	sp, sp, #8
   1bc38:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bc3c:	e3a0205c 	mov	r2, #92	; 0x5c
   1bc40:	e59f1004 	ldr	r1, [pc, #4]	; 1bc4c <CNetDeviceLayer::Process()+0x104>
   1bc44:	e59f0010 	ldr	r0, [pc, #16]	; 1bc5c <CNetDeviceLayer::Process()+0x114>
   1bc48:	eb0022f0 	bl	24810 <assertion_failed>
   1bc4c:	00043ccc 	.word	0x00043ccc
   1bc50:	00043ad0 	.word	0x00043ad0
   1bc54:	00043d14 	.word	0x00043d14
   1bc58:	00043cc4 	.word	0x00043cc4
   1bc5c:	0003fc00 	.word	0x0003fc00

0001bc60 <CNetDeviceLayer::GetMACAddress() const>:
   1bc60:	e5900008 	ldr	r0, [r0, #8]
   1bc64:	e3500000 	cmp	r0, #0
   1bc68:	0a000002 	beq	1bc78 <CNetDeviceLayer::GetMACAddress() const+0x18>
   1bc6c:	e5903000 	ldr	r3, [r0]
   1bc70:	e593300c 	ldr	r3, [r3, #12]
   1bc74:	e12fff13 	bx	r3
   1bc78:	e92d4010 	push	{r4, lr}
   1bc7c:	e3a02074 	mov	r2, #116	; 0x74
   1bc80:	e59f1004 	ldr	r1, [pc, #4]	; 1bc8c <CNetDeviceLayer::GetMACAddress() const+0x2c>
   1bc84:	e59f0004 	ldr	r0, [pc, #4]	; 1bc90 <CNetDeviceLayer::GetMACAddress() const+0x30>
   1bc88:	eb0022e0 	bl	24810 <assertion_failed>
   1bc8c:	00043ccc 	.word	0x00043ccc
   1bc90:	0003fc00 	.word	0x0003fc00

0001bc94 <CNetDeviceLayer::Send(void const*, unsigned int)>:
   1bc94:	e280000c 	add	r0, r0, #12
   1bc98:	e3a03000 	mov	r3, #0
   1bc9c:	ea0015c9 	b	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>

0001bca0 <CNetDeviceLayer::Receive(void*, unsigned int*)>:
   1bca0:	e92d4010 	push	{r4, lr}
   1bca4:	e2800018 	add	r0, r0, #24
   1bca8:	e1a04002 	mov	r4, r2
   1bcac:	e3a02000 	mov	r2, #0
   1bcb0:	eb00160a 	bl	214e0 <CNetQueue::Dequeue(void*, void**)>
   1bcb4:	e3500000 	cmp	r0, #0
   1bcb8:	08bd8010 	popeq	{r4, pc}
   1bcbc:	e3540000 	cmp	r4, #0
   1bcc0:	0a000002 	beq	1bcd0 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x30>
   1bcc4:	e5840000 	str	r0, [r4]
   1bcc8:	e3a00001 	mov	r0, #1
   1bccc:	e8bd8010 	pop	{r4, pc}
   1bcd0:	e3a02085 	mov	r2, #133	; 0x85
   1bcd4:	e59f1004 	ldr	r1, [pc, #4]	; 1bce0 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x40>
   1bcd8:	e59f0004 	ldr	r0, [pc, #4]	; 1bce4 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x44>
   1bcdc:	eb0022cb 	bl	24810 <assertion_failed>
   1bce0:	00043ccc 	.word	0x00043ccc
   1bce4:	00041488 	.word	0x00041488

0001bce8 <CPHYTask::~CPHYTask()>:
   1bce8:	e3a02000 	mov	r2, #0
   1bcec:	e92d4010 	push	{r4, lr}
   1bcf0:	e1a04000 	mov	r4, r0
   1bcf4:	e59f3010 	ldr	r3, [pc, #16]	; 1bd0c <CPHYTask::~CPHYTask()+0x24>
   1bcf8:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1bcfc:	e5803000 	str	r3, [r0]
   1bd00:	eb00201e 	bl	23d80 <CTask::~CTask()>
   1bd04:	e1a00004 	mov	r0, r4
   1bd08:	e8bd8010 	pop	{r4, pc}
   1bd0c:	00043d2c 	.word	0x00043d2c

0001bd10 <CPHYTask::~CPHYTask()>:
   1bd10:	e3a02000 	mov	r2, #0
   1bd14:	e92d4010 	push	{r4, lr}
   1bd18:	e1a04000 	mov	r4, r0
   1bd1c:	e59f301c 	ldr	r3, [pc, #28]	; 1bd40 <CPHYTask::~CPHYTask()+0x30>
   1bd20:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1bd24:	e5803000 	str	r3, [r0]
   1bd28:	eb002014 	bl	23d80 <CTask::~CTask()>
   1bd2c:	e1a00004 	mov	r0, r4
   1bd30:	e3a010e0 	mov	r1, #224	; 0xe0
   1bd34:	eb003ce0 	bl	2b0bc <operator delete(void*, unsigned int)>
   1bd38:	e1a00004 	mov	r0, r4
   1bd3c:	e8bd8010 	pop	{r4, pc}
   1bd40:	00043d2c 	.word	0x00043d2c

0001bd44 <CPHYTask::Run()>:
   1bd44:	e92d4070 	push	{r4, r5, r6, lr}
   1bd48:	e1a04000 	mov	r4, r0
   1bd4c:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   1bd50:	e3500000 	cmp	r0, #0
   1bd54:	0a000013 	beq	1bda8 <CPHYTask::Run()+0x64>
   1bd58:	e5903000 	ldr	r3, [r0]
   1bd5c:	e59f5054 	ldr	r5, [pc, #84]	; 1bdb8 <CPHYTask::Run()+0x74>
   1bd60:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1bd64:	e1530005 	cmp	r3, r5
   1bd68:	08bd8070 	popeq	{r4, r5, r6, pc}
   1bd6c:	e3a06e7d 	mov	r6, #2000	; 0x7d0
   1bd70:	ea000003 	b	1bd84 <CPHYTask::Run()+0x40>
   1bd74:	e5903000 	ldr	r3, [r0]
   1bd78:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1bd7c:	e1530005 	cmp	r3, r5
   1bd80:	08bd8070 	popeq	{r4, r5, r6, pc}
   1bd84:	e12fff33 	blx	r3
   1bd88:	e3500000 	cmp	r0, #0
   1bd8c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1bd90:	eb0021f0 	bl	24558 <CScheduler::Get()>
   1bd94:	e1a01006 	mov	r1, r6
   1bd98:	eb0021ca 	bl	244c8 <CScheduler::MsSleep(unsigned int)>
   1bd9c:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   1bda0:	e3500000 	cmp	r0, #0
   1bda4:	1afffff2 	bne	1bd74 <CPHYTask::Run()+0x30>
   1bda8:	e3a02026 	mov	r2, #38	; 0x26
   1bdac:	e59f1008 	ldr	r1, [pc, #8]	; 1bdbc <CPHYTask::Run()+0x78>
   1bdb0:	e59f0008 	ldr	r0, [pc, #8]	; 1bdc0 <CPHYTask::Run()+0x7c>
   1bdb4:	eb002295 	bl	24810 <assertion_failed>
   1bdb8:	000161b4 	.word	0x000161b4
   1bdbc:	00043d38 	.word	0x00043d38
   1bdc0:	0003fc00 	.word	0x0003fc00

0001bdc4 <CPHYTask::CPHYTask(CNetDevice*)>:
   1bdc4:	e92d4070 	push	{r4, r5, r6, lr}
   1bdc8:	e1a04000 	mov	r4, r0
   1bdcc:	e1a05001 	mov	r5, r1
   1bdd0:	e3a01902 	mov	r1, #32768	; 0x8000
   1bdd4:	eb00203c 	bl	23ecc <CTask::CTask(unsigned int)>
   1bdd8:	e59f300c 	ldr	r3, [pc, #12]	; 1bdec <CPHYTask::CPHYTask(CNetDevice*)+0x28>
   1bddc:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   1bde0:	e5843000 	str	r3, [r4]
   1bde4:	e1a00004 	mov	r0, r4
   1bde8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bdec:	00043d2c 	.word	0x00043d2c

0001bdf0 <CARPHandler::TimerHandler(unsigned int, void*, void*)>:
   1bdf0:	e92d4070 	push	{r4, r5, r6, lr}
   1bdf4:	e2524000 	subs	r4, r2, #0
   1bdf8:	0a00001d 	beq	1be74 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x84>
   1bdfc:	e5943010 	ldr	r3, [r4, #16]
   1be00:	e1a05001 	mov	r5, r1
   1be04:	e1510003 	cmp	r1, r3
   1be08:	2a00001d 	bcs	1be84 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x94>
   1be0c:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1be10:	e3500000 	cmp	r0, #0
   1be14:	1a000006 	bne	1be34 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x44>
   1be18:	e1a01181 	lsl	r1, r1, #3
   1be1c:	e0413005 	sub	r3, r1, r5
   1be20:	e0843103 	add	r3, r4, r3, lsl #2
   1be24:	e5d33014 	ldrb	r3, [r3, #20]
   1be28:	e3530001 	cmp	r3, #1
   1be2c:	0a000008 	beq	1be54 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x64>
   1be30:	e8bd8070 	pop	{r4, r5, r6, pc}
   1be34:	eb003fc4 	bl	2bd4c <EnterCritical>
   1be38:	e1a01185 	lsl	r1, r5, #3
   1be3c:	e0413005 	sub	r3, r1, r5
   1be40:	e0843103 	add	r3, r4, r3, lsl #2
   1be44:	e5d33014 	ldrb	r3, [r3, #20]
   1be48:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1be4c:	e3530001 	cmp	r3, #1
   1be50:	1a000003 	bne	1be64 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x74>
   1be54:	e3a03002 	mov	r3, #2
   1be58:	e0411005 	sub	r1, r1, r5
   1be5c:	e0844311 	add	r4, r4, r1, lsl r3
   1be60:	e5c43014 	strb	r3, [r4, #20]
   1be64:	e3500000 	cmp	r0, #0
   1be68:	08bd8070 	popeq	{r4, r5, r6, pc}
   1be6c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1be70:	ea003fe0 	b	2bdf8 <LeaveCritical>
   1be74:	e59f2018 	ldr	r2, [pc, #24]	; 1be94 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa4>
   1be78:	e59f1018 	ldr	r1, [pc, #24]	; 1be98 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa8>
   1be7c:	e59f0018 	ldr	r0, [pc, #24]	; 1be9c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xac>
   1be80:	eb002262 	bl	24810 <assertion_failed>
   1be84:	e3a02f6b 	mov	r2, #428	; 0x1ac
   1be88:	e59f1008 	ldr	r1, [pc, #8]	; 1be98 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa8>
   1be8c:	e59f000c 	ldr	r0, [pc, #12]	; 1bea0 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xb0>
   1be90:	eb00225e 	bl	24810 <assertion_failed>
   1be94:	000001a9 	.word	0x000001a9
   1be98:	00043d44 	.word	0x00043d44
   1be9c:	0003f230 	.word	0x0003f230
   1bea0:	00043d54 	.word	0x00043d54

0001bea4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>:
   1bea4:	e92d4070 	push	{r4, r5, r6, lr}
   1bea8:	e3a0e000 	mov	lr, #0
   1beac:	e3a05001 	mov	r5, #1
   1beb0:	e59d4010 	ldr	r4, [sp, #16]
   1beb4:	e151000e 	cmp	r1, lr
   1beb8:	e880000e 	stm	r0, {r1, r2, r3}
   1bebc:	e5805244 	str	r5, [r0, #580]	; 0x244
   1bec0:	e580400c 	str	r4, [r0, #12]
   1bec4:	e580e010 	str	lr, [r0, #16]
   1bec8:	e580e248 	str	lr, [r0, #584]	; 0x248
   1becc:	0a000009 	beq	1bef8 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x54>
   1bed0:	e3520000 	cmp	r2, #0
   1bed4:	0a00000b 	beq	1bf08 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x64>
   1bed8:	e3530000 	cmp	r3, #0
   1bedc:	0a00000d 	beq	1bf18 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x74>
   1bee0:	e3540000 	cmp	r4, #0
   1bee4:	18bd8070 	popne	{r4, r5, r6, pc}
   1bee8:	e3a02045 	mov	r2, #69	; 0x45
   1beec:	e59f1034 	ldr	r1, [pc, #52]	; 1bf28 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1bef0:	e59f0034 	ldr	r0, [pc, #52]	; 1bf2c <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1bef4:	eb002245 	bl	24810 <assertion_failed>
   1bef8:	e3a02042 	mov	r2, #66	; 0x42
   1befc:	e59f1024 	ldr	r1, [pc, #36]	; 1bf28 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1bf00:	e59f0028 	ldr	r0, [pc, #40]	; 1bf30 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x8c>
   1bf04:	eb002241 	bl	24810 <assertion_failed>
   1bf08:	e3a02043 	mov	r2, #67	; 0x43
   1bf0c:	e59f1014 	ldr	r1, [pc, #20]	; 1bf28 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1bf10:	e59f001c 	ldr	r0, [pc, #28]	; 1bf34 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x90>
   1bf14:	eb00223d 	bl	24810 <assertion_failed>
   1bf18:	e3a02044 	mov	r2, #68	; 0x44
   1bf1c:	e59f1004 	ldr	r1, [pc, #4]	; 1bf28 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1bf20:	e59f0010 	ldr	r0, [pc, #16]	; 1bf38 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x94>
   1bf24:	eb002239 	bl	24810 <assertion_failed>
   1bf28:	00043d44 	.word	0x00043d44
   1bf2c:	00043d70 	.word	0x00043d70
   1bf30:	00043a48 	.word	0x00043a48
   1bf34:	00043c08 	.word	0x00043c08
   1bf38:	00043b04 	.word	0x00043b04

0001bf3c <CARPHandler::~CARPHandler()>:
   1bf3c:	e5903010 	ldr	r3, [r0, #16]
   1bf40:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bf44:	e3530000 	cmp	r3, #0
   1bf48:	e1a08000 	mov	r8, r0
   1bf4c:	0a000011 	beq	1bf98 <CARPHandler::~CARPHandler()+0x5c>
   1bf50:	e3a06000 	mov	r6, #0
   1bf54:	e1a04000 	mov	r4, r0
   1bf58:	e1a07006 	mov	r7, r6
   1bf5c:	e3a0900c 	mov	r9, #12
   1bf60:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
   1bf64:	e2866001 	add	r6, r6, #1
   1bf68:	e3550000 	cmp	r5, #0
   1bf6c:	0a000005 	beq	1bf88 <CARPHandler::~CARPHandler()+0x4c>
   1bf70:	e1a00005 	mov	r0, r5
   1bf74:	eb00150e 	bl	213b4 <CNetQueue::~CNetQueue()>
   1bf78:	e1a01009 	mov	r1, r9
   1bf7c:	e1a00005 	mov	r0, r5
   1bf80:	eb003c4d 	bl	2b0bc <operator delete(void*, unsigned int)>
   1bf84:	e5983010 	ldr	r3, [r8, #16]
   1bf88:	e1530006 	cmp	r3, r6
   1bf8c:	e584702c 	str	r7, [r4, #44]	; 0x2c
   1bf90:	e284401c 	add	r4, r4, #28
   1bf94:	8afffff1 	bhi	1bf60 <CARPHandler::~CARPHandler()+0x24>
   1bf98:	e1a00008 	mov	r0, r8
   1bf9c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001bfa0 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>:
   1bfa0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bfa4:	e1a06000 	mov	r6, r0
   1bfa8:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1bfac:	e1a09001 	mov	r9, r1
   1bfb0:	e3500000 	cmp	r0, #0
   1bfb4:	e1a08002 	mov	r8, r2
   1bfb8:	1a000023 	bne	1c04c <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xac>
   1bfbc:	e5961010 	ldr	r1, [r6, #16]
   1bfc0:	e3510000 	cmp	r1, #0
   1bfc4:	0a00001f 	beq	1c048 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xa8>
   1bfc8:	e3a05000 	mov	r5, #0
   1bfcc:	e1a04005 	mov	r4, r5
   1bfd0:	ea000006 	b	1bff0 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x50>
   1bfd4:	e5d33014 	ldrb	r3, [r3, #20]
   1bfd8:	e3530002 	cmp	r3, #2
   1bfdc:	0a000009 	beq	1c008 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x68>
   1bfe0:	e2844001 	add	r4, r4, #1
   1bfe4:	e1510004 	cmp	r1, r4
   1bfe8:	e285501c 	add	r5, r5, #28
   1bfec:	9a000010 	bls	1c034 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x94>
   1bff0:	e1a07184 	lsl	r7, r4, #3
   1bff4:	e0473004 	sub	r3, r7, r4
   1bff8:	e0863103 	add	r3, r6, r3, lsl #2
   1bffc:	e5d32014 	ldrb	r2, [r3, #20]
   1c000:	e3520001 	cmp	r2, #1
   1c004:	1afffff2 	bne	1bfd4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x34>
   1c008:	e2851015 	add	r1, r5, #21
   1c00c:	e0861001 	add	r1, r6, r1
   1c010:	e1a00009 	mov	r0, r9
   1c014:	eb0013a6 	bl	20eb4 <CIPAddress::operator==(unsigned char const*) const>
   1c018:	e3500000 	cmp	r0, #0
   1c01c:	1a00000f 	bne	1c060 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xc0>
   1c020:	e5961010 	ldr	r1, [r6, #16]
   1c024:	e2844001 	add	r4, r4, #1
   1c028:	e1510004 	cmp	r1, r4
   1c02c:	e285501c 	add	r5, r5, #28
   1c030:	8affffee 	bhi	1bff0 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x50>
   1c034:	e5963244 	ldr	r3, [r6, #580]	; 0x244
   1c038:	e3530000 	cmp	r3, #0
   1c03c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c040:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c044:	ea003f6b 	b	2bdf8 <LeaveCritical>
   1c048:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c04c:	eb003f3e 	bl	2bd4c <EnterCritical>
   1c050:	e5961010 	ldr	r1, [r6, #16]
   1c054:	e3510000 	cmp	r1, #0
   1c058:	1affffda 	bne	1bfc8 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x28>
   1c05c:	eafffff4 	b	1c034 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x94>
   1c060:	e0474004 	sub	r4, r7, r4
   1c064:	e0864104 	add	r4, r6, r4, lsl #2
   1c068:	eb0037a8 	bl	29f10 <CTimer::Get()>
   1c06c:	e5941020 	ldr	r1, [r4, #32]
   1c070:	eb003635 	bl	2994c <CTimer::CancelKernelTimer(unsigned int)>
   1c074:	e2851019 	add	r1, r5, #25
   1c078:	e0861001 	add	r1, r6, r1
   1c07c:	e1a00008 	mov	r0, r8
   1c080:	eb003b62 	bl	2ae10 <CMACAddress::CopyTo(unsigned char*) const>
   1c084:	e3a03003 	mov	r3, #3
   1c088:	e5c43014 	strb	r3, [r4, #20]
   1c08c:	eaffffe8 	b	1c034 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x94>

0001c090 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>:
   1c090:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c094:	e1a09000 	mov	r9, r0
   1c098:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1c09c:	e24dd00c 	sub	sp, sp, #12
   1c0a0:	e3500000 	cmp	r0, #0
   1c0a4:	e1a07001 	mov	r7, r1
   1c0a8:	e1a08002 	mov	r8, r2
   1c0ac:	1a000038 	bne	1c194 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x104>
   1c0b0:	e5992010 	ldr	r2, [r9, #16]
   1c0b4:	e3520000 	cmp	r2, #0
   1c0b8:	e1a05002 	mov	r5, r2
   1c0bc:	0a00004c 	beq	1c1f4 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x164>
   1c0c0:	e3a04000 	mov	r4, #0
   1c0c4:	e3a05014 	mov	r5, #20
   1c0c8:	e2896015 	add	r6, r9, #21
   1c0cc:	ea000005 	b	1c0e8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x58>
   1c0d0:	e3550014 	cmp	r5, #20
   1c0d4:	01a05004 	moveq	r5, r4
   1c0d8:	e2844001 	add	r4, r4, #1
   1c0dc:	e1520004 	cmp	r2, r4
   1c0e0:	e286601c 	add	r6, r6, #28
   1c0e4:	9a00000e 	bls	1c124 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x94>
   1c0e8:	e0643184 	rsb	r3, r4, r4, lsl #3
   1c0ec:	e0893103 	add	r3, r9, r3, lsl #2
   1c0f0:	e5d33014 	ldrb	r3, [r3, #20]
   1c0f4:	e3530000 	cmp	r3, #0
   1c0f8:	0afffff4 	beq	1c0d0 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x40>
   1c0fc:	e1a01006 	mov	r1, r6
   1c100:	e1a00007 	mov	r0, r7
   1c104:	eb00136a 	bl	20eb4 <CIPAddress::operator==(unsigned char const*) const>
   1c108:	e3500000 	cmp	r0, #0
   1c10c:	1a000018 	bne	1c174 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xe4>
   1c110:	e5992010 	ldr	r2, [r9, #16]
   1c114:	e2844001 	add	r4, r4, #1
   1c118:	e1520004 	cmp	r2, r4
   1c11c:	e286601c 	add	r6, r6, #28
   1c120:	8afffff0 	bhi	1c0e8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x58>
   1c124:	e3550014 	cmp	r5, #20
   1c128:	0a00001b 	beq	1c19c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x10c>
   1c12c:	e1a0a185 	lsl	sl, r5, #3
   1c130:	e04a6005 	sub	r6, sl, r5
   1c134:	e1a06106 	lsl	r6, r6, #2
   1c138:	e286b015 	add	fp, r6, #21
   1c13c:	e2866019 	add	r6, r6, #25
   1c140:	e089100b 	add	r1, r9, fp
   1c144:	e1a00007 	mov	r0, r7
   1c148:	eb0013db 	bl	210bc <CIPAddress::CopyTo(unsigned char*) const>
   1c14c:	e0891006 	add	r1, r9, r6
   1c150:	e1a00008 	mov	r0, r8
   1c154:	eb003b2d 	bl	2ae10 <CMACAddress::CopyTo(unsigned char*) const>
   1c158:	eb00376c 	bl	29f10 <CTimer::Get()>
   1c15c:	eb0034b5 	bl	29438 <CTimer::GetTicks() const>
   1c160:	e3a02004 	mov	r2, #4
   1c164:	e04a3005 	sub	r3, sl, r5
   1c168:	e0893103 	add	r3, r9, r3, lsl #2
   1c16c:	e5830028 	str	r0, [r3, #40]	; 0x28
   1c170:	e5c32014 	strb	r2, [r3, #20]
   1c174:	e5993244 	ldr	r3, [r9, #580]	; 0x244
   1c178:	e3530000 	cmp	r3, #0
   1c17c:	1a000001 	bne	1c188 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xf8>
   1c180:	e28dd00c 	add	sp, sp, #12
   1c184:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c188:	e28dd00c 	add	sp, sp, #12
   1c18c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c190:	ea003f18 	b	2bdf8 <LeaveCritical>
   1c194:	eb003eec 	bl	2bd4c <EnterCritical>
   1c198:	eaffffc4 	b	1c0b0 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x20>
   1c19c:	e3520014 	cmp	r2, #20
   1c1a0:	0afffff3 	beq	1c174 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xe4>
   1c1a4:	e1a05002 	mov	r5, r2
   1c1a8:	e0626182 	rsb	r6, r2, r2, lsl #3
   1c1ac:	e1a06106 	lsl	r6, r6, #2
   1c1b0:	e286b015 	add	fp, r6, #21
   1c1b4:	e2866019 	add	r6, r6, #25
   1c1b8:	e3a03000 	mov	r3, #0
   1c1bc:	e1a0a182 	lsl	sl, r2, #3
   1c1c0:	e04a2002 	sub	r2, sl, r2
   1c1c4:	e0894102 	add	r4, r9, r2, lsl #2
   1c1c8:	e5c43014 	strb	r3, [r4, #20]
   1c1cc:	e3a0000c 	mov	r0, #12
   1c1d0:	eb003bab 	bl	2b084 <operator new(unsigned int)>
   1c1d4:	e58d0004 	str	r0, [sp, #4]
   1c1d8:	eb00143b 	bl	212cc <CNetQueue::CNetQueue()>
   1c1dc:	e5993010 	ldr	r3, [r9, #16]
   1c1e0:	e59d2004 	ldr	r2, [sp, #4]
   1c1e4:	e2833001 	add	r3, r3, #1
   1c1e8:	e584202c 	str	r2, [r4, #44]	; 0x2c
   1c1ec:	e5893010 	str	r3, [r9, #16]
   1c1f0:	eaffffd2 	b	1c140 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xb0>
   1c1f4:	e3a06019 	mov	r6, #25
   1c1f8:	e3a0b015 	mov	fp, #21
   1c1fc:	eaffffed 	b	1c1b8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x128>

0001c200 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>:
   1c200:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1c204:	e1a04000 	mov	r4, r0
   1c208:	e5900000 	ldr	r0, [r0]
   1c20c:	e24dd034 	sub	sp, sp, #52	; 0x34
   1c210:	e3500000 	cmp	r0, #0
   1c214:	0a000031 	beq	1c2e0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xe0>
   1c218:	e1a05001 	mov	r5, r1
   1c21c:	e1a08002 	mov	r8, r2
   1c220:	e1a06003 	mov	r6, r3
   1c224:	eb001280 	bl	20c2c <CNetConfig::GetIPAddress() const>
   1c228:	e2509000 	subs	r9, r0, #0
   1c22c:	0a00002f 	beq	1c2f0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xf0>
   1c230:	e5940004 	ldr	r0, [r4, #4]
   1c234:	e3500000 	cmp	r0, #0
   1c238:	0a000030 	beq	1c300 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x100>
   1c23c:	ebfffe87 	bl	1bc60 <CNetDeviceLayer::GetMACAddress() const>
   1c240:	e2507000 	subs	r7, r0, #0
   1c244:	0a000031 	beq	1c310 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1c248:	e28d1004 	add	r1, sp, #4
   1c24c:	e1a00006 	mov	r0, r6
   1c250:	eb003aee 	bl	2ae10 <CMACAddress::CopyTo(unsigned char*) const>
   1c254:	e28d100a 	add	r1, sp, #10
   1c258:	e1a00007 	mov	r0, r7
   1c25c:	eb003aeb 	bl	2ae10 <CMACAddress::CopyTo(unsigned char*) const>
   1c260:	e3a03c01 	mov	r3, #256	; 0x100
   1c264:	e3550000 	cmp	r5, #0
   1c268:	e3a01008 	mov	r1, #8
   1c26c:	13a05c01 	movne	r5, #256	; 0x100
   1c270:	03a05c02 	moveq	r5, #512	; 0x200
   1c274:	e3a0c006 	mov	ip, #6
   1c278:	e3a02004 	mov	r2, #4
   1c27c:	e1cd31b2 	strh	r3, [sp, #18]
   1c280:	e59f3098 	ldr	r3, [pc, #152]	; 1c320 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x120>
   1c284:	e1a00007 	mov	r0, r7
   1c288:	e1cd11b4 	strh	r1, [sp, #20]
   1c28c:	e28d101a 	add	r1, sp, #26
   1c290:	e5cdc016 	strb	ip, [sp, #22]
   1c294:	e5cd2017 	strb	r2, [sp, #23]
   1c298:	e1cd31b0 	strh	r3, [sp, #16]
   1c29c:	e1cd51b8 	strh	r5, [sp, #24]
   1c2a0:	eb003ada 	bl	2ae10 <CMACAddress::CopyTo(unsigned char*) const>
   1c2a4:	e1a00009 	mov	r0, r9
   1c2a8:	e28d1020 	add	r1, sp, #32
   1c2ac:	eb001382 	bl	210bc <CIPAddress::CopyTo(unsigned char*) const>
   1c2b0:	e1a00006 	mov	r0, r6
   1c2b4:	e28d1024 	add	r1, sp, #36	; 0x24
   1c2b8:	eb003ad4 	bl	2ae10 <CMACAddress::CopyTo(unsigned char*) const>
   1c2bc:	e1a00008 	mov	r0, r8
   1c2c0:	e28d102a 	add	r1, sp, #42	; 0x2a
   1c2c4:	eb00137c 	bl	210bc <CIPAddress::CopyTo(unsigned char*) const>
   1c2c8:	e28d1004 	add	r1, sp, #4
   1c2cc:	e5940004 	ldr	r0, [r4, #4]
   1c2d0:	e3a0202a 	mov	r2, #42	; 0x2a
   1c2d4:	ebfffe6e 	bl	1bc94 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1c2d8:	e28dd034 	add	sp, sp, #52	; 0x34
   1c2dc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c2e0:	e59f203c 	ldr	r2, [pc, #60]	; 1c324 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x124>
   1c2e4:	e59f103c 	ldr	r1, [pc, #60]	; 1c328 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1c2e8:	e59f003c 	ldr	r0, [pc, #60]	; 1c32c <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x12c>
   1c2ec:	eb002147 	bl	24810 <assertion_failed>
   1c2f0:	e3a02f63 	mov	r2, #396	; 0x18c
   1c2f4:	e59f102c 	ldr	r1, [pc, #44]	; 1c328 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1c2f8:	e59f0030 	ldr	r0, [pc, #48]	; 1c330 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x130>
   1c2fc:	eb002143 	bl	24810 <assertion_failed>
   1c300:	e59f202c 	ldr	r2, [pc, #44]	; 1c334 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x134>
   1c304:	e59f101c 	ldr	r1, [pc, #28]	; 1c328 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1c308:	e59f0028 	ldr	r0, [pc, #40]	; 1c338 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x138>
   1c30c:	eb00213f 	bl	24810 <assertion_failed>
   1c310:	e3a02e19 	mov	r2, #400	; 0x190
   1c314:	e59f100c 	ldr	r1, [pc, #12]	; 1c328 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1c318:	e59f001c 	ldr	r0, [pc, #28]	; 1c33c <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x13c>
   1c31c:	eb00213b 	bl	24810 <assertion_failed>
   1c320:	00000608 	.word	0x00000608
   1c324:	0000018a 	.word	0x0000018a
   1c328:	00043d44 	.word	0x00043d44
   1c32c:	00043a48 	.word	0x00043a48
   1c330:	00043b2c 	.word	0x00043b2c
   1c334:	0000018e 	.word	0x0000018e
   1c338:	00043c08 	.word	0x00043c08
   1c33c:	00043c34 	.word	0x00043c34

0001c340 <CARPHandler::Process()>:
   1c340:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c344:	e1a04000 	mov	r4, r0
   1c348:	e5900000 	ldr	r0, [r0]
   1c34c:	e24dde66 	sub	sp, sp, #1632	; 0x660
   1c350:	e3500000 	cmp	r0, #0
   1c354:	e24dd004 	sub	sp, sp, #4
   1c358:	0a0000d7 	beq	1c6bc <CARPHandler::Process()+0x37c>
   1c35c:	eb001232 	bl	20c2c <CNetConfig::GetIPAddress() const>
   1c360:	e2507000 	subs	r7, r0, #0
   1c364:	0a0000d8 	beq	1c6cc <CARPHandler::Process()+0x38c>
   1c368:	e594000c 	ldr	r0, [r4, #12]
   1c36c:	e3500000 	cmp	r0, #0
   1c370:	0a0000d9 	beq	1c6dc <CARPHandler::Process()+0x39c>
   1c374:	e28d3020 	add	r3, sp, #32
   1c378:	e28db038 	add	fp, sp, #56	; 0x38
   1c37c:	e283a008 	add	sl, r3, #8
   1c380:	e283900e 	add	r9, r3, #14
   1c384:	e2438008 	sub	r8, r3, #8
   1c388:	e3a05000 	mov	r5, #0
   1c38c:	ea000000 	b	1c394 <CARPHandler::Process()+0x54>
   1c390:	e594000c 	ldr	r0, [r4, #12]
   1c394:	e1a02005 	mov	r2, r5
   1c398:	e28d1020 	add	r1, sp, #32
   1c39c:	eb00144f 	bl	214e0 <CNetQueue::Dequeue(void*, void**)>
   1c3a0:	e3500000 	cmp	r0, #0
   1c3a4:	0a00002a 	beq	1c454 <CARPHandler::Process()+0x114>
   1c3a8:	e350001b 	cmp	r0, #27
   1c3ac:	9afffff7 	bls	1c390 <CARPHandler::Process()+0x50>
   1c3b0:	e1dd32b0 	ldrh	r3, [sp, #32]
   1c3b4:	e3530c01 	cmp	r3, #256	; 0x100
   1c3b8:	1afffff4 	bne	1c390 <CARPHandler::Process()+0x50>
   1c3bc:	e1dd32b2 	ldrh	r3, [sp, #34]	; 0x22
   1c3c0:	e3530008 	cmp	r3, #8
   1c3c4:	1afffff1 	bne	1c390 <CARPHandler::Process()+0x50>
   1c3c8:	e5dd3024 	ldrb	r3, [sp, #36]	; 0x24
   1c3cc:	e3530006 	cmp	r3, #6
   1c3d0:	1affffee 	bne	1c390 <CARPHandler::Process()+0x50>
   1c3d4:	e5dd3025 	ldrb	r3, [sp, #37]	; 0x25
   1c3d8:	e3530004 	cmp	r3, #4
   1c3dc:	1affffeb 	bne	1c390 <CARPHandler::Process()+0x50>
   1c3e0:	e1a00007 	mov	r0, r7
   1c3e4:	eb00134b 	bl	21118 <CIPAddress::IsNull() const>
   1c3e8:	e3500000 	cmp	r0, #0
   1c3ec:	1affffe7 	bne	1c390 <CARPHandler::Process()+0x50>
   1c3f0:	e1a0100b 	mov	r1, fp
   1c3f4:	e1a00007 	mov	r0, r7
   1c3f8:	eb0012c4 	bl	20f10 <CIPAddress::operator!=(unsigned char const*) const>
   1c3fc:	e3500000 	cmp	r0, #0
   1c400:	1affffe2 	bne	1c390 <CARPHandler::Process()+0x50>
   1c404:	e1a0100a 	mov	r1, sl
   1c408:	e28d0010 	add	r0, sp, #16
   1c40c:	eb003a65 	bl	2ada8 <CMACAddress::CMACAddress(unsigned char const*)>
   1c410:	e1a01009 	mov	r1, r9
   1c414:	e1a00008 	mov	r0, r8
   1c418:	eb0012f6 	bl	20ff8 <CIPAddress::CIPAddress(unsigned char const*)>
   1c41c:	e1dd32b6 	ldrh	r3, [sp, #38]	; 0x26
   1c420:	e3530c01 	cmp	r3, #256	; 0x100
   1c424:	0a0000be 	beq	1c724 <CARPHandler::Process()+0x3e4>
   1c428:	e3530c02 	cmp	r3, #512	; 0x200
   1c42c:	1a000003 	bne	1c440 <CARPHandler::Process()+0x100>
   1c430:	e28d2010 	add	r2, sp, #16
   1c434:	e1a01008 	mov	r1, r8
   1c438:	e1a00004 	mov	r0, r4
   1c43c:	ebfffed7 	bl	1bfa0 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>
   1c440:	e1a00008 	mov	r0, r8
   1c444:	eb00126a 	bl	20df4 <CIPAddress::~CIPAddress()>
   1c448:	e28d0010 	add	r0, sp, #16
   1c44c:	eb003a27 	bl	2acf0 <CMACAddress::~CMACAddress()>
   1c450:	eaffffce 	b	1c390 <CARPHandler::Process()+0x50>
   1c454:	e5943008 	ldr	r3, [r4, #8]
   1c458:	e3530000 	cmp	r3, #0
   1c45c:	0a0000a2 	beq	1c6ec <CARPHandler::Process()+0x3ac>
   1c460:	e5943004 	ldr	r3, [r4, #4]
   1c464:	e3530000 	cmp	r3, #0
   1c468:	0a0000a3 	beq	1c6fc <CARPHandler::Process()+0x3bc>
   1c46c:	e5942010 	ldr	r2, [r4, #16]
   1c470:	e3520000 	cmp	r2, #0
   1c474:	0a00002a 	beq	1c524 <CARPHandler::Process()+0x1e4>
   1c478:	e1a06000 	mov	r6, r0
   1c47c:	e1a07000 	mov	r7, r0
   1c480:	e28d3018 	add	r3, sp, #24
   1c484:	e2845015 	add	r5, r4, #21
   1c488:	e58d300c 	str	r3, [sp, #12]
   1c48c:	e1a08186 	lsl	r8, r6, #3
   1c490:	e0489006 	sub	r9, r8, r6
   1c494:	e0849109 	add	r9, r4, r9, lsl #2
   1c498:	e5d93014 	ldrb	r3, [r9, #20]
   1c49c:	e6ef3073 	uxtb	r3, r3
   1c4a0:	e3530002 	cmp	r3, #2
   1c4a4:	0a000049 	beq	1c5d0 <CARPHandler::Process()+0x290>
   1c4a8:	e3530003 	cmp	r3, #3
   1c4ac:	1a000018 	bne	1c514 <CARPHandler::Process()+0x1d4>
   1c4b0:	e5950017 	ldr	r0, [r5, #23]
   1c4b4:	e3500000 	cmp	r0, #0
   1c4b8:	0a000077 	beq	1c69c <CARPHandler::Process()+0x35c>
   1c4bc:	e285a004 	add	sl, r5, #4
   1c4c0:	e3a09006 	mov	r9, #6
   1c4c4:	ea000008 	b	1c4ec <CARPHandler::Process()+0x1ac>
   1c4c8:	e1a02009 	mov	r2, r9
   1c4cc:	e1a0100a 	mov	r1, sl
   1c4d0:	e28d0020 	add	r0, sp, #32
   1c4d4:	eb003911 	bl	2a920 <memcpy>
   1c4d8:	e5940004 	ldr	r0, [r4, #4]
   1c4dc:	e1a0200b 	mov	r2, fp
   1c4e0:	e28d1020 	add	r1, sp, #32
   1c4e4:	ebfffdea 	bl	1bc94 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1c4e8:	e5950017 	ldr	r0, [r5, #23]
   1c4ec:	e1a02007 	mov	r2, r7
   1c4f0:	e28d1020 	add	r1, sp, #32
   1c4f4:	eb0013f9 	bl	214e0 <CNetQueue::Dequeue(void*, void**)>
   1c4f8:	e250b000 	subs	fp, r0, #0
   1c4fc:	1afffff1 	bne	1c4c8 <CARPHandler::Process()+0x188>
   1c500:	e3a03004 	mov	r3, #4
   1c504:	e0488006 	sub	r8, r8, r6
   1c508:	e0848108 	add	r8, r4, r8, lsl #2
   1c50c:	e5c83014 	strb	r3, [r8, #20]
   1c510:	e5942010 	ldr	r2, [r4, #16]
   1c514:	e2866001 	add	r6, r6, #1
   1c518:	e1520006 	cmp	r2, r6
   1c51c:	e285501c 	add	r5, r5, #28
   1c520:	8affffd9 	bhi	1c48c <CARPHandler::Process()+0x14c>
   1c524:	eb003679 	bl	29f10 <CTimer::Get()>
   1c528:	eb0033c2 	bl	29438 <CTimer::GetTicks() const>
   1c52c:	e5943248 	ldr	r3, [r4, #584]	; 0x248
   1c530:	e59f2214 	ldr	r2, [pc, #532]	; 1c74c <CARPHandler::Process()+0x40c>
   1c534:	e0403003 	sub	r3, r0, r3
   1c538:	e1530002 	cmp	r3, r2
   1c53c:	e1a06000 	mov	r6, r0
   1c540:	9a00001f 	bls	1c5c4 <CARPHandler::Process()+0x284>
   1c544:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1c548:	e5846248 	str	r6, [r4, #584]	; 0x248
   1c54c:	e3500000 	cmp	r0, #0
   1c550:	1a00006d 	bne	1c70c <CARPHandler::Process()+0x3cc>
   1c554:	e594e010 	ldr	lr, [r4, #16]
   1c558:	e35e0000 	cmp	lr, #0
   1c55c:	0a000018 	beq	1c5c4 <CARPHandler::Process()+0x284>
   1c560:	e3a03000 	mov	r3, #0
   1c564:	e1a01004 	mov	r1, r4
   1c568:	e1a05003 	mov	r5, r3
   1c56c:	ea000003 	b	1c580 <CARPHandler::Process()+0x240>
   1c570:	e2833001 	add	r3, r3, #1
   1c574:	e15e0003 	cmp	lr, r3
   1c578:	e281101c 	add	r1, r1, #28
   1c57c:	9a00000d 	bls	1c5b8 <CARPHandler::Process()+0x278>
   1c580:	e0632183 	rsb	r2, r3, r3, lsl #3
   1c584:	e0842102 	add	r2, r4, r2, lsl #2
   1c588:	e5d2c014 	ldrb	ip, [r2, #20]
   1c58c:	e35c0004 	cmp	ip, #4
   1c590:	1afffff6 	bne	1c570 <CARPHandler::Process()+0x230>
   1c594:	e591c028 	ldr	ip, [r1, #40]	; 0x28
   1c598:	e2833001 	add	r3, r3, #1
   1c59c:	e28cccea 	add	ip, ip, #59904	; 0xea00
   1c5a0:	e28cc060 	add	ip, ip, #96	; 0x60
   1c5a4:	e15c0006 	cmp	ip, r6
   1c5a8:	35c25014 	strbcc	r5, [r2, #20]
   1c5ac:	e15e0003 	cmp	lr, r3
   1c5b0:	e281101c 	add	r1, r1, #28
   1c5b4:	8afffff1 	bhi	1c580 <CARPHandler::Process()+0x240>
   1c5b8:	e3500000 	cmp	r0, #0
   1c5bc:	0a000000 	beq	1c5c4 <CARPHandler::Process()+0x284>
   1c5c0:	eb003e0c 	bl	2bdf8 <LeaveCritical>
   1c5c4:	e28dde66 	add	sp, sp, #1632	; 0x660
   1c5c8:	e28dd004 	add	sp, sp, #4
   1c5cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5d0:	e595300f 	ldr	r3, [r5, #15]
   1c5d4:	e3530002 	cmp	r3, #2
   1c5d8:	e2833001 	add	r3, r3, #1
   1c5dc:	e585300f 	str	r3, [r5, #15]
   1c5e0:	9a000011 	bls	1c62c <CARPHandler::Process()+0x2ec>
   1c5e4:	e5950017 	ldr	r0, [r5, #23]
   1c5e8:	e3500000 	cmp	r0, #0
   1c5ec:	1a000004 	bne	1c604 <CARPHandler::Process()+0x2c4>
   1c5f0:	ea00002d 	b	1c6ac <CARPHandler::Process()+0x36c>
   1c5f4:	e5940008 	ldr	r0, [r4, #8]
   1c5f8:	e28d1020 	add	r1, sp, #32
   1c5fc:	ebfffcce 	bl	1b93c <CLinkLayer::ResolveFailed(void const*, unsigned int)>
   1c600:	e5950017 	ldr	r0, [r5, #23]
   1c604:	e1a02007 	mov	r2, r7
   1c608:	e28d1020 	add	r1, sp, #32
   1c60c:	eb0013b3 	bl	214e0 <CNetQueue::Dequeue(void*, void**)>
   1c610:	e2502000 	subs	r2, r0, #0
   1c614:	1afffff6 	bne	1c5f4 <CARPHandler::Process()+0x2b4>
   1c618:	e0488006 	sub	r8, r8, r6
   1c61c:	e0848108 	add	r8, r4, r8, lsl #2
   1c620:	e5c82014 	strb	r2, [r8, #20]
   1c624:	e5942010 	ldr	r2, [r4, #16]
   1c628:	eaffffb9 	b	1c514 <CARPHandler::Process()+0x1d4>
   1c62c:	e59d800c 	ldr	r8, [sp, #12]
   1c630:	e1a01005 	mov	r1, r5
   1c634:	e1a00008 	mov	r0, r8
   1c638:	eb00126e 	bl	20ff8 <CIPAddress::CIPAddress(unsigned char const*)>
   1c63c:	e28d0010 	add	r0, sp, #16
   1c640:	eb0039a7 	bl	2ace4 <CMACAddress::CMACAddress()>
   1c644:	e28d0010 	add	r0, sp, #16
   1c648:	eb0039db 	bl	2adbc <CMACAddress::SetBroadcast()>
   1c64c:	e1a02008 	mov	r2, r8
   1c650:	e3a01001 	mov	r1, #1
   1c654:	e28d3010 	add	r3, sp, #16
   1c658:	e1a00004 	mov	r0, r4
   1c65c:	ebfffee7 	bl	1c200 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c660:	e3a03001 	mov	r3, #1
   1c664:	e5c93014 	strb	r3, [r9, #20]
   1c668:	eb003628 	bl	29f10 <CTimer::Get()>
   1c66c:	e59f20dc 	ldr	r2, [pc, #220]	; 1c750 <CARPHandler::Process()+0x410>
   1c670:	e1a03006 	mov	r3, r6
   1c674:	e3a01050 	mov	r1, #80	; 0x50
   1c678:	e58d4000 	str	r4, [sp]
   1c67c:	eb003463 	bl	29810 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1c680:	e585000b 	str	r0, [r5, #11]
   1c684:	e28d0010 	add	r0, sp, #16
   1c688:	eb003998 	bl	2acf0 <CMACAddress::~CMACAddress()>
   1c68c:	e1a00008 	mov	r0, r8
   1c690:	eb0011d7 	bl	20df4 <CIPAddress::~CIPAddress()>
   1c694:	e5942010 	ldr	r2, [r4, #16]
   1c698:	eaffff9d 	b	1c514 <CARPHandler::Process()+0x1d4>
   1c69c:	e3a020aa 	mov	r2, #170	; 0xaa
   1c6a0:	e59f10ac 	ldr	r1, [pc, #172]	; 1c754 <CARPHandler::Process()+0x414>
   1c6a4:	e59f00ac 	ldr	r0, [pc, #172]	; 1c758 <CARPHandler::Process()+0x418>
   1c6a8:	eb002058 	bl	24810 <assertion_failed>
   1c6ac:	e3a0209f 	mov	r2, #159	; 0x9f
   1c6b0:	e59f109c 	ldr	r1, [pc, #156]	; 1c754 <CARPHandler::Process()+0x414>
   1c6b4:	e59f009c 	ldr	r0, [pc, #156]	; 1c758 <CARPHandler::Process()+0x418>
   1c6b8:	eb002054 	bl	24810 <assertion_failed>
   1c6bc:	e3a02057 	mov	r2, #87	; 0x57
   1c6c0:	e59f108c 	ldr	r1, [pc, #140]	; 1c754 <CARPHandler::Process()+0x414>
   1c6c4:	e59f0090 	ldr	r0, [pc, #144]	; 1c75c <CARPHandler::Process()+0x41c>
   1c6c8:	eb002050 	bl	24810 <assertion_failed>
   1c6cc:	e3a02059 	mov	r2, #89	; 0x59
   1c6d0:	e59f107c 	ldr	r1, [pc, #124]	; 1c754 <CARPHandler::Process()+0x414>
   1c6d4:	e59f0084 	ldr	r0, [pc, #132]	; 1c760 <CARPHandler::Process()+0x420>
   1c6d8:	eb00204c 	bl	24810 <assertion_failed>
   1c6dc:	e3a0205f 	mov	r2, #95	; 0x5f
   1c6e0:	e59f106c 	ldr	r1, [pc, #108]	; 1c754 <CARPHandler::Process()+0x414>
   1c6e4:	e59f0078 	ldr	r0, [pc, #120]	; 1c764 <CARPHandler::Process()+0x424>
   1c6e8:	eb002048 	bl	24810 <assertion_failed>
   1c6ec:	e3a02088 	mov	r2, #136	; 0x88
   1c6f0:	e59f105c 	ldr	r1, [pc, #92]	; 1c754 <CARPHandler::Process()+0x414>
   1c6f4:	e59f006c 	ldr	r0, [pc, #108]	; 1c768 <CARPHandler::Process()+0x428>
   1c6f8:	eb002044 	bl	24810 <assertion_failed>
   1c6fc:	e3a02089 	mov	r2, #137	; 0x89
   1c700:	e59f104c 	ldr	r1, [pc, #76]	; 1c754 <CARPHandler::Process()+0x414>
   1c704:	e59f0060 	ldr	r0, [pc, #96]	; 1c76c <CARPHandler::Process()+0x42c>
   1c708:	eb002040 	bl	24810 <assertion_failed>
   1c70c:	eb003d8e 	bl	2bd4c <EnterCritical>
   1c710:	e594e010 	ldr	lr, [r4, #16]
   1c714:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1c718:	e35e0000 	cmp	lr, #0
   1c71c:	1affff8f 	bne	1c560 <CARPHandler::Process()+0x220>
   1c720:	eaffffa4 	b	1c5b8 <CARPHandler::Process()+0x278>
   1c724:	e1a02008 	mov	r2, r8
   1c728:	e1a01005 	mov	r1, r5
   1c72c:	e1a00004 	mov	r0, r4
   1c730:	e28d3010 	add	r3, sp, #16
   1c734:	ebfffeb1 	bl	1c200 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c738:	e28d2010 	add	r2, sp, #16
   1c73c:	e1a01008 	mov	r1, r8
   1c740:	e1a00004 	mov	r0, r4
   1c744:	ebfffe51 	bl	1c090 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>
   1c748:	eaffff3c 	b	1c440 <CARPHandler::Process()+0x100>
   1c74c:	0000176f 	.word	0x0000176f
   1c750:	0001bdf0 	.word	0x0001bdf0
   1c754:	00043d44 	.word	0x00043d44
   1c758:	00043d80 	.word	0x00043d80
   1c75c:	00043a48 	.word	0x00043a48
   1c760:	00043b2c 	.word	0x00043b2c
   1c764:	00043d70 	.word	0x00043d70
   1c768:	00043b04 	.word	0x00043b04
   1c76c:	00043c08 	.word	0x00043c08

0001c770 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>:
   1c770:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c774:	e1a05000 	mov	r5, r0
   1c778:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1c77c:	e24dd024 	sub	sp, sp, #36	; 0x24
   1c780:	e3500000 	cmp	r0, #0
   1c784:	e1a0a001 	mov	sl, r1
   1c788:	e58d2014 	str	r2, [sp, #20]
   1c78c:	e58d3010 	str	r3, [sp, #16]
   1c790:	1a000076 	bne	1c970 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x200>
   1c794:	e5950010 	ldr	r0, [r5, #16]
   1c798:	e3500000 	cmp	r0, #0
   1c79c:	e1a08000 	mov	r8, r0
   1c7a0:	0a000084 	beq	1c9b8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x248>
   1c7a4:	e3e09000 	mvn	r9, #0
   1c7a8:	e3e0b014 	mvn	fp, #20
   1c7ac:	e3a04000 	mov	r4, #0
   1c7b0:	e3a08014 	mov	r8, #20
   1c7b4:	e58d900c 	str	r9, [sp, #12]
   1c7b8:	e04bb005 	sub	fp, fp, r5
   1c7bc:	e2856015 	add	r6, r5, #21
   1c7c0:	e1a07184 	lsl	r7, r4, #3
   1c7c4:	e0473004 	sub	r3, r7, r4
   1c7c8:	e0853103 	add	r3, r5, r3, lsl #2
   1c7cc:	e5d33014 	ldrb	r3, [r3, #20]
   1c7d0:	e3530004 	cmp	r3, #4
   1c7d4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c7d8:	ea000060 	b	1c960 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x1f0>
   1c7dc:	0001c954 	.word	0x0001c954
   1c7e0:	0001c8f8 	.word	0x0001c8f8
   1c7e4:	0001c8f8 	.word	0x0001c8f8
   1c7e8:	0001c8f8 	.word	0x0001c8f8
   1c7ec:	0001c7f0 	.word	0x0001c7f0
   1c7f0:	e5963013 	ldr	r3, [r6, #19]
   1c7f4:	e1a01006 	mov	r1, r6
   1c7f8:	e1530009 	cmp	r3, r9
   1c7fc:	31a09003 	movcc	r9, r3
   1c800:	e59d300c 	ldr	r3, [sp, #12]
   1c804:	31a03004 	movcc	r3, r4
   1c808:	e1a0000a 	mov	r0, sl
   1c80c:	e58d300c 	str	r3, [sp, #12]
   1c810:	eb0011a7 	bl	20eb4 <CIPAddress::operator==(unsigned char const*) const>
   1c814:	e3500000 	cmp	r0, #0
   1c818:	e08b1006 	add	r1, fp, r6
   1c81c:	1a000076 	bne	1c9fc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x28c>
   1c820:	e5950010 	ldr	r0, [r5, #16]
   1c824:	e2844001 	add	r4, r4, #1
   1c828:	e1500004 	cmp	r0, r4
   1c82c:	e286601c 	add	r6, r6, #28
   1c830:	8affffe2 	bhi	1c7c0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x50>
   1c834:	e3580014 	cmp	r8, #20
   1c838:	0a00004e 	beq	1c978 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x208>
   1c83c:	e1a06188 	lsl	r6, r8, #3
   1c840:	e0467008 	sub	r7, r6, r8
   1c844:	e1a07107 	lsl	r7, r7, #2
   1c848:	e2877015 	add	r7, r7, #21
   1c84c:	e3a09001 	mov	r9, #1
   1c850:	e0464008 	sub	r4, r6, r8
   1c854:	e0854104 	add	r4, r5, r4, lsl #2
   1c858:	e1a0000a 	mov	r0, sl
   1c85c:	e0851007 	add	r1, r5, r7
   1c860:	e5c49014 	strb	r9, [r4, #20]
   1c864:	eb001214 	bl	210bc <CIPAddress::CopyTo(unsigned char*) const>
   1c868:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c86c:	e3500000 	cmp	r0, #0
   1c870:	0a000075 	beq	1ca4c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2dc>
   1c874:	e59d1010 	ldr	r1, [sp, #16]
   1c878:	e3a03000 	mov	r3, #0
   1c87c:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1c880:	eb0012d0 	bl	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c884:	eb0035a1 	bl	29f10 <CTimer::Get()>
   1c888:	eb0032ea 	bl	29438 <CTimer::GetTicks() const>
   1c88c:	e5849024 	str	r9, [r4, #36]	; 0x24
   1c890:	e5840028 	str	r0, [r4, #40]	; 0x28
   1c894:	eb00359d 	bl	29f10 <CTimer::Get()>
   1c898:	e1a03008 	mov	r3, r8
   1c89c:	e58d5000 	str	r5, [sp]
   1c8a0:	e59f21f8 	ldr	r2, [pc, #504]	; 1caa0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x330>
   1c8a4:	e3a01050 	mov	r1, #80	; 0x50
   1c8a8:	eb0033d8 	bl	29810 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1c8ac:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   1c8b0:	e5840020 	str	r0, [r4, #32]
   1c8b4:	e3530000 	cmp	r3, #0
   1c8b8:	1a00004d 	bne	1c9f4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x284>
   1c8bc:	e28d0018 	add	r0, sp, #24
   1c8c0:	eb003907 	bl	2ace4 <CMACAddress::CMACAddress()>
   1c8c4:	e28d0018 	add	r0, sp, #24
   1c8c8:	eb00393b 	bl	2adbc <CMACAddress::SetBroadcast()>
   1c8cc:	e1a0200a 	mov	r2, sl
   1c8d0:	e28d3018 	add	r3, sp, #24
   1c8d4:	e1a00005 	mov	r0, r5
   1c8d8:	e3a01001 	mov	r1, #1
   1c8dc:	ebfffe47 	bl	1c200 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c8e0:	e28d0018 	add	r0, sp, #24
   1c8e4:	eb003901 	bl	2acf0 <CMACAddress::~CMACAddress()>
   1c8e8:	e3a02000 	mov	r2, #0
   1c8ec:	e1a00002 	mov	r0, r2
   1c8f0:	e28dd024 	add	sp, sp, #36	; 0x24
   1c8f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8f8:	e1a01006 	mov	r1, r6
   1c8fc:	e1a0000a 	mov	r0, sl
   1c900:	eb00116b 	bl	20eb4 <CIPAddress::operator==(unsigned char const*) const>
   1c904:	e3500000 	cmp	r0, #0
   1c908:	0affffc4 	beq	1c820 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xb0>
   1c90c:	e0474004 	sub	r4, r7, r4
   1c910:	e0854104 	add	r4, r5, r4, lsl #2
   1c914:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c918:	e3500000 	cmp	r0, #0
   1c91c:	0a000052 	beq	1ca6c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2fc>
   1c920:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1c924:	e59d1010 	ldr	r1, [sp, #16]
   1c928:	e3a03000 	mov	r3, #0
   1c92c:	eb0012a5 	bl	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c930:	eb003576 	bl	29f10 <CTimer::Get()>
   1c934:	eb0032bf 	bl	29438 <CTimer::GetTicks() const>
   1c938:	e5952244 	ldr	r2, [r5, #580]	; 0x244
   1c93c:	e5840028 	str	r0, [r4, #40]	; 0x28
   1c940:	e3520000 	cmp	r2, #0
   1c944:	0affffe8 	beq	1c8ec <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1c948:	eb003d2a 	bl	2bdf8 <LeaveCritical>
   1c94c:	e3a02000 	mov	r2, #0
   1c950:	eaffffe5 	b	1c8ec <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1c954:	e3580014 	cmp	r8, #20
   1c958:	01a08004 	moveq	r8, r4
   1c95c:	eaffffb0 	b	1c824 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xb4>
   1c960:	e59f213c 	ldr	r2, [pc, #316]	; 1caa4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x334>
   1c964:	e59f113c 	ldr	r1, [pc, #316]	; 1caa8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1c968:	e59f013c 	ldr	r0, [pc, #316]	; 1caac <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x33c>
   1c96c:	eb001fa7 	bl	24810 <assertion_failed>
   1c970:	eb003cf5 	bl	2bd4c <EnterCritical>
   1c974:	eaffff86 	b	1c794 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x24>
   1c978:	e3500014 	cmp	r0, #20
   1c97c:	1a000042 	bne	1ca8c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x31c>
   1c980:	e59d300c 	ldr	r3, [sp, #12]
   1c984:	e3530013 	cmp	r3, #19
   1c988:	8a000033 	bhi	1ca5c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2ec>
   1c98c:	e3a02000 	mov	r2, #0
   1c990:	e59d100c 	ldr	r1, [sp, #12]
   1c994:	e1a03181 	lsl	r3, r1, #3
   1c998:	e0437001 	sub	r7, r3, r1
   1c99c:	e1a07107 	lsl	r7, r7, #2
   1c9a0:	e1a06003 	mov	r6, r3
   1c9a4:	e0853007 	add	r3, r5, r7
   1c9a8:	e1a08001 	mov	r8, r1
   1c9ac:	e2877015 	add	r7, r7, #21
   1c9b0:	e5c32014 	strb	r2, [r3, #20]
   1c9b4:	eaffffa4 	b	1c84c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xdc>
   1c9b8:	e3a07015 	mov	r7, #21
   1c9bc:	e3a03000 	mov	r3, #0
   1c9c0:	e1a06180 	lsl	r6, r0, #3
   1c9c4:	e0460000 	sub	r0, r6, r0
   1c9c8:	e0854100 	add	r4, r5, r0, lsl #2
   1c9cc:	e5c43014 	strb	r3, [r4, #20]
   1c9d0:	e3a0000c 	mov	r0, #12
   1c9d4:	eb0039aa 	bl	2b084 <operator new(unsigned int)>
   1c9d8:	e1a09000 	mov	r9, r0
   1c9dc:	eb00123a 	bl	212cc <CNetQueue::CNetQueue()>
   1c9e0:	e5953010 	ldr	r3, [r5, #16]
   1c9e4:	e584902c 	str	r9, [r4, #44]	; 0x2c
   1c9e8:	e2833001 	add	r3, r3, #1
   1c9ec:	e5853010 	str	r3, [r5, #16]
   1c9f0:	eaffff95 	b	1c84c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xdc>
   1c9f4:	eb003cff 	bl	2bdf8 <LeaveCritical>
   1c9f8:	eaffffaf 	b	1c8bc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x14c>
   1c9fc:	e59d3014 	ldr	r3, [sp, #20]
   1ca00:	e3530000 	cmp	r3, #0
   1ca04:	0a00001c 	beq	1ca7c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x30c>
   1ca08:	e2811019 	add	r1, r1, #25
   1ca0c:	e0851001 	add	r1, r5, r1
   1ca10:	e58d000c 	str	r0, [sp, #12]
   1ca14:	e59d0014 	ldr	r0, [sp, #20]
   1ca18:	eb0038d2 	bl	2ad68 <CMACAddress::Set(unsigned char const*)>
   1ca1c:	eb00353b 	bl	29f10 <CTimer::Get()>
   1ca20:	eb003284 	bl	29438 <CTimer::GetTicks() const>
   1ca24:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   1ca28:	e0474004 	sub	r4, r7, r4
   1ca2c:	e0855104 	add	r5, r5, r4, lsl #2
   1ca30:	e3530000 	cmp	r3, #0
   1ca34:	e5850028 	str	r0, [r5, #40]	; 0x28
   1ca38:	e59d200c 	ldr	r2, [sp, #12]
   1ca3c:	0affffaa 	beq	1c8ec <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1ca40:	eb003cec 	bl	2bdf8 <LeaveCritical>
   1ca44:	e59d200c 	ldr	r2, [sp, #12]
   1ca48:	eaffffa7 	b	1c8ec <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1ca4c:	e59f205c 	ldr	r2, [pc, #92]	; 1cab0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x340>
   1ca50:	e59f1050 	ldr	r1, [pc, #80]	; 1caa8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1ca54:	e59f0058 	ldr	r0, [pc, #88]	; 1cab4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x344>
   1ca58:	eb001f6c 	bl	24810 <assertion_failed>
   1ca5c:	e59f2054 	ldr	r2, [pc, #84]	; 1cab8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x348>
   1ca60:	e59f1040 	ldr	r1, [pc, #64]	; 1caa8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1ca64:	e59f0050 	ldr	r0, [pc, #80]	; 1cabc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x34c>
   1ca68:	eb001f68 	bl	24810 <assertion_failed>
   1ca6c:	e3a020eb 	mov	r2, #235	; 0xeb
   1ca70:	e59f1030 	ldr	r1, [pc, #48]	; 1caa8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1ca74:	e59f0044 	ldr	r0, [pc, #68]	; 1cac0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x350>
   1ca78:	eb001f64 	bl	24810 <assertion_failed>
   1ca7c:	e3a020ff 	mov	r2, #255	; 0xff
   1ca80:	e59f1020 	ldr	r1, [pc, #32]	; 1caa8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1ca84:	e59f0038 	ldr	r0, [pc, #56]	; 1cac4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x354>
   1ca88:	eb001f60 	bl	24810 <assertion_failed>
   1ca8c:	e3a0701c 	mov	r7, #28
   1ca90:	e0070097 	mul	r7, r7, r0
   1ca94:	e1a08000 	mov	r8, r0
   1ca98:	e2877015 	add	r7, r7, #21
   1ca9c:	eaffffc6 	b	1c9bc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x24c>
   1caa0:	0001bdf0 	.word	0x0001bdf0
   1caa4:	0000010a 	.word	0x0000010a
   1caa8:	00043d44 	.word	0x00043d44
   1caac:	0003fe24 	.word	0x0003fe24
   1cab0:	00000129 	.word	0x00000129
   1cab4:	00043d80 	.word	0x00043d80
   1cab8:	0000011d 	.word	0x0000011d
   1cabc:	00043dcc 	.word	0x00043dcc
   1cac0:	00043d98 	.word	0x00043d98
   1cac4:	00043db8 	.word	0x00043db8

0001cac8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>:
   1cac8:	e92d4010 	push	{r4, lr}
   1cacc:	e59de008 	ldr	lr, [sp, #8]
   1cad0:	e3510000 	cmp	r1, #0
   1cad4:	e880400e 	stm	r0, {r1, r2, r3, lr}
   1cad8:	0a000009 	beq	1cb04 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x3c>
   1cadc:	e3520000 	cmp	r2, #0
   1cae0:	0a00000b 	beq	1cb14 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x4c>
   1cae4:	e3530000 	cmp	r3, #0
   1cae8:	0a00000d 	beq	1cb24 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x5c>
   1caec:	e35e0000 	cmp	lr, #0
   1caf0:	18bd8010 	popne	{r4, pc}
   1caf4:	e3a0203e 	mov	r2, #62	; 0x3e
   1caf8:	e59f1034 	ldr	r1, [pc, #52]	; 1cb34 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1cafc:	e59f0034 	ldr	r0, [pc, #52]	; 1cb38 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x70>
   1cb00:	eb001f42 	bl	24810 <assertion_failed>
   1cb04:	e3a0203b 	mov	r2, #59	; 0x3b
   1cb08:	e59f1024 	ldr	r1, [pc, #36]	; 1cb34 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1cb0c:	e59f0028 	ldr	r0, [pc, #40]	; 1cb3c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x74>
   1cb10:	eb001f3e 	bl	24810 <assertion_failed>
   1cb14:	e3a0203c 	mov	r2, #60	; 0x3c
   1cb18:	e59f1014 	ldr	r1, [pc, #20]	; 1cb34 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1cb1c:	e59f001c 	ldr	r0, [pc, #28]	; 1cb40 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x78>
   1cb20:	eb001f3a 	bl	24810 <assertion_failed>
   1cb24:	e3a0203d 	mov	r2, #61	; 0x3d
   1cb28:	e59f1004 	ldr	r1, [pc, #4]	; 1cb34 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1cb2c:	e59f0010 	ldr	r0, [pc, #16]	; 1cb44 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x7c>
   1cb30:	eb001f36 	bl	24810 <assertion_failed>
   1cb34:	00043df0 	.word	0x00043df0
   1cb38:	00043e00 	.word	0x00043e00
   1cb3c:	00043a48 	.word	0x00043a48
   1cb40:	00043a5c 	.word	0x00043a5c
   1cb44:	00043d70 	.word	0x00043d70

0001cb48 <CICMPHandler::~CICMPHandler()>:
   1cb48:	e12fff1e 	bx	lr

0001cb4c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>:
   1cb4c:	e92d4070 	push	{r4, r5, r6, lr}
   1cb50:	e3510002 	cmp	r1, #2
   1cb54:	e24dd010 	sub	sp, sp, #16
   1cb58:	ca000024 	bgt	1cbf0 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xa4>
   1cb5c:	e3520000 	cmp	r2, #0
   1cb60:	e1a05002 	mov	r5, r2
   1cb64:	e5cd1000 	strb	r1, [sp]
   1cb68:	0a000024 	beq	1cc00 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xb4>
   1cb6c:	e1a04003 	mov	r4, r3
   1cb70:	e5d23009 	ldrb	r3, [r2, #9]
   1cb74:	e2851010 	add	r1, r5, #16
   1cb78:	e3a02004 	mov	r2, #4
   1cb7c:	e1a06000 	mov	r6, r0
   1cb80:	e28d0002 	add	r0, sp, #2
   1cb84:	e5cd3001 	strb	r3, [sp, #1]
   1cb88:	eb003764 	bl	2a920 <memcpy>
   1cb8c:	e285100c 	add	r1, r5, #12
   1cb90:	e3a02004 	mov	r2, #4
   1cb94:	e28d0006 	add	r0, sp, #6
   1cb98:	eb003760 	bl	2a920 <memcpy>
   1cb9c:	e3540000 	cmp	r4, #0
   1cba0:	0a00001a 	beq	1cc10 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xc4>
   1cba4:	e5d42002 	ldrb	r2, [r4, #2]
   1cba8:	e5d4c003 	ldrb	ip, [r4, #3]
   1cbac:	e5d43000 	ldrb	r3, [r4]
   1cbb0:	e5d41001 	ldrb	r1, [r4, #1]
   1cbb4:	e596000c 	ldr	r0, [r6, #12]
   1cbb8:	e182240c 	orr	r2, r2, ip, lsl #8
   1cbbc:	e1833401 	orr	r3, r3, r1, lsl #8
   1cbc0:	e6bf2fb2 	rev16	r2, r2
   1cbc4:	e6bf3fb3 	rev16	r3, r3
   1cbc8:	e3500000 	cmp	r0, #0
   1cbcc:	e1cd20ba 	strh	r2, [sp, #10]
   1cbd0:	e1cd30bc 	strh	r3, [sp, #12]
   1cbd4:	0a000011 	beq	1cc20 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xd4>
   1cbd8:	e1a0100d 	mov	r1, sp
   1cbdc:	e3a03000 	mov	r3, #0
   1cbe0:	e3a0200e 	mov	r2, #14
   1cbe4:	eb0011f7 	bl	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1cbe8:	e28dd010 	add	sp, sp, #16
   1cbec:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cbf0:	e3a020ee 	mov	r2, #238	; 0xee
   1cbf4:	e59f1034 	ldr	r1, [pc, #52]	; 1cc30 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cbf8:	e59f0034 	ldr	r0, [pc, #52]	; 1cc34 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe8>
   1cbfc:	eb001f03 	bl	24810 <assertion_failed>
   1cc00:	e3a020f3 	mov	r2, #243	; 0xf3
   1cc04:	e59f1024 	ldr	r1, [pc, #36]	; 1cc30 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cc08:	e59f0028 	ldr	r0, [pc, #40]	; 1cc38 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xec>
   1cc0c:	eb001eff 	bl	24810 <assertion_failed>
   1cc10:	e3a020f8 	mov	r2, #248	; 0xf8
   1cc14:	e59f1014 	ldr	r1, [pc, #20]	; 1cc30 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cc18:	e59f001c 	ldr	r0, [pc, #28]	; 1cc3c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf0>
   1cc1c:	eb001efb 	bl	24810 <assertion_failed>
   1cc20:	e3a020fc 	mov	r2, #252	; 0xfc
   1cc24:	e59f1004 	ldr	r1, [pc, #4]	; 1cc30 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cc28:	e59f0010 	ldr	r0, [pc, #16]	; 1cc40 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf4>
   1cc2c:	eb001ef7 	bl	24810 <assertion_failed>
   1cc30:	00043df0 	.word	0x00043df0
   1cc34:	00043e1c 	.word	0x00043e1c
   1cc38:	00043e3c 	.word	0x00043e3c
   1cc3c:	00043e4c 	.word	0x00043e4c
   1cc40:	00043e00 	.word	0x00043e00

0001cc44 <CICMPHandler::Process()>:
   1cc44:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc48:	e1a04000 	mov	r4, r0
   1cc4c:	e5900008 	ldr	r0, [r0, #8]
   1cc50:	e24dde67 	sub	sp, sp, #1648	; 0x670
   1cc54:	e3500000 	cmp	r0, #0
   1cc58:	e24dd004 	sub	sp, sp, #4
   1cc5c:	0a00007e 	beq	1ce5c <CICMPHandler::Process()+0x218>
   1cc60:	e59fb380 	ldr	fp, [pc, #896]	; 1cfe8 <CICMPHandler::Process()+0x3a4>
   1cc64:	e59f6380 	ldr	r6, [pc, #896]	; 1cfec <CICMPHandler::Process()+0x3a8>
   1cc68:	e59fa380 	ldr	sl, [pc, #896]	; 1cff0 <CICMPHandler::Process()+0x3ac>
   1cc6c:	e59f9380 	ldr	r9, [pc, #896]	; 1cff4 <CICMPHandler::Process()+0x3b0>
   1cc70:	e28d7048 	add	r7, sp, #72	; 0x48
   1cc74:	e28d2014 	add	r2, sp, #20
   1cc78:	e28d1030 	add	r1, sp, #48	; 0x30
   1cc7c:	eb001217 	bl	214e0 <CNetQueue::Dequeue(void*, void**)>
   1cc80:	e2505000 	subs	r5, r0, #0
   1cc84:	0a000078 	beq	1ce6c <CICMPHandler::Process()+0x228>
   1cc88:	e59d8014 	ldr	r8, [sp, #20]
   1cc8c:	e3580000 	cmp	r8, #0
   1cc90:	0a000050 	beq	1cdd8 <CICMPHandler::Process()+0x194>
   1cc94:	e5d82000 	ldrb	r2, [r8]
   1cc98:	e3520001 	cmp	r2, #1
   1cc9c:	1a000051 	bne	1cde8 <CICMPHandler::Process()+0x1a4>
   1cca0:	e2881001 	add	r1, r8, #1
   1cca4:	e28d0018 	add	r0, sp, #24
   1cca8:	eb0010d2 	bl	20ff8 <CIPAddress::CIPAddress(unsigned char const*)>
   1ccac:	e2881005 	add	r1, r8, #5
   1ccb0:	e28d0020 	add	r0, sp, #32
   1ccb4:	eb0010cf 	bl	20ff8 <CIPAddress::CIPAddress(unsigned char const*)>
   1ccb8:	e1a00008 	mov	r0, r8
   1ccbc:	e3a01009 	mov	r1, #9
   1ccc0:	eb0038fd 	bl	2b0bc <operator delete(void*, unsigned int)>
   1ccc4:	e5943000 	ldr	r3, [r4]
   1ccc8:	e3530000 	cmp	r3, #0
   1cccc:	0a000049 	beq	1cdf8 <CICMPHandler::Process()+0x1b4>
   1ccd0:	e28d0020 	add	r0, sp, #32
   1ccd4:	eb00111d 	bl	21150 <CIPAddress::IsBroadcast() const>
   1ccd8:	e3500000 	cmp	r0, #0
   1ccdc:	0a000005 	beq	1ccf8 <CICMPHandler::Process()+0xb4>
   1cce0:	e28d0020 	add	r0, sp, #32
   1cce4:	eb001042 	bl	20df4 <CIPAddress::~CIPAddress()>
   1cce8:	e28d0018 	add	r0, sp, #24
   1ccec:	eb001040 	bl	20df4 <CIPAddress::~CIPAddress()>
   1ccf0:	e5940008 	ldr	r0, [r4, #8]
   1ccf4:	eaffffde 	b	1cc74 <CICMPHandler::Process()+0x30>
   1ccf8:	e5940000 	ldr	r0, [r4]
   1ccfc:	eb000fd4 	bl	20c54 <CNetConfig::GetBroadcastAddress() const>
   1cd00:	e1a01000 	mov	r1, r0
   1cd04:	e28d0020 	add	r0, sp, #32
   1cd08:	eb00103a 	bl	20df8 <CIPAddress::operator==(CIPAddress const&) const>
   1cd0c:	e3500000 	cmp	r0, #0
   1cd10:	1afffff2 	bne	1cce0 <CICMPHandler::Process()+0x9c>
   1cd14:	e3550007 	cmp	r5, #7
   1cd18:	9afffff0 	bls	1cce0 <CICMPHandler::Process()+0x9c>
   1cd1c:	e1a01005 	mov	r1, r5
   1cd20:	e28d0030 	add	r0, sp, #48	; 0x30
   1cd24:	eb0012b3 	bl	217f8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1cd28:	e3500000 	cmp	r0, #0
   1cd2c:	1affffeb 	bne	1cce0 <CICMPHandler::Process()+0x9c>
   1cd30:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1cd34:	e3530008 	cmp	r3, #8
   1cd38:	0a000032 	beq	1ce08 <CICMPHandler::Process()+0x1c4>
   1cd3c:	e355001c 	cmp	r5, #28
   1cd40:	9affffe6 	bls	1cce0 <CICMPHandler::Process()+0x9c>
   1cd44:	e5dd3038 	ldrb	r3, [sp, #56]	; 0x38
   1cd48:	e203200f 	and	r2, r3, #15
   1cd4c:	e2421005 	sub	r1, r2, #5
   1cd50:	e3510001 	cmp	r1, #1
   1cd54:	8affffe1 	bhi	1cce0 <CICMPHandler::Process()+0x9c>
   1cd58:	e1a03243 	asr	r3, r3, #4
   1cd5c:	e3530004 	cmp	r3, #4
   1cd60:	1affffde 	bne	1cce0 <CICMPHandler::Process()+0x9c>
   1cd64:	e5940000 	ldr	r0, [r4]
   1cd68:	e58d200c 	str	r2, [sp, #12]
   1cd6c:	eb000fae 	bl	20c2c <CNetConfig::GetIPAddress() const>
   1cd70:	e28d1044 	add	r1, sp, #68	; 0x44
   1cd74:	eb001065 	bl	20f10 <CIPAddress::operator!=(unsigned char const*) const>
   1cd78:	e3500000 	cmp	r0, #0
   1cd7c:	1affffd7 	bne	1cce0 <CICMPHandler::Process()+0x9c>
   1cd80:	e59d200c 	ldr	r2, [sp, #12]
   1cd84:	e1a02102 	lsl	r2, r2, #2
   1cd88:	e2823010 	add	r3, r2, #16
   1cd8c:	e1550003 	cmp	r5, r3
   1cd90:	3affffd2 	bcc	1cce0 <CICMPHandler::Process()+0x9c>
   1cd94:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1cd98:	e28d5038 	add	r5, sp, #56	; 0x38
   1cd9c:	e2433003 	sub	r3, r3, #3
   1cda0:	e0855002 	add	r5, r5, r2
   1cda4:	e3530009 	cmp	r3, #9
   1cda8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1cdac:	eaffffcb 	b	1cce0 <CICMPHandler::Process()+0x9c>
   1cdb0:	0001cefc 	.word	0x0001cefc
   1cdb4:	0001cce0 	.word	0x0001cce0
   1cdb8:	0001ceac 	.word	0x0001ceac
   1cdbc:	0001cce0 	.word	0x0001cce0
   1cdc0:	0001cce0 	.word	0x0001cce0
   1cdc4:	0001cce0 	.word	0x0001cce0
   1cdc8:	0001cce0 	.word	0x0001cce0
   1cdcc:	0001cce0 	.word	0x0001cce0
   1cdd0:	0001cf30 	.word	0x0001cf30
   1cdd4:	0001ce78 	.word	0x0001ce78
   1cdd8:	e3a02052 	mov	r2, #82	; 0x52
   1cddc:	e59f1214 	ldr	r1, [pc, #532]	; 1cff8 <CICMPHandler::Process()+0x3b4>
   1cde0:	e59f0214 	ldr	r0, [pc, #532]	; 1cffc <CICMPHandler::Process()+0x3b8>
   1cde4:	eb001e89 	bl	24810 <assertion_failed>
   1cde8:	e3a02053 	mov	r2, #83	; 0x53
   1cdec:	e59f1204 	ldr	r1, [pc, #516]	; 1cff8 <CICMPHandler::Process()+0x3b4>
   1cdf0:	e59f0208 	ldr	r0, [pc, #520]	; 1d000 <CICMPHandler::Process()+0x3bc>
   1cdf4:	eb001e85 	bl	24810 <assertion_failed>
   1cdf8:	e3a0205b 	mov	r2, #91	; 0x5b
   1cdfc:	e59f11f4 	ldr	r1, [pc, #500]	; 1cff8 <CICMPHandler::Process()+0x3b4>
   1ce00:	e59f01fc 	ldr	r0, [pc, #508]	; 1d004 <CICMPHandler::Process()+0x3c0>
   1ce04:	eb001e81 	bl	24810 <assertion_failed>
   1ce08:	e5dd3031 	ldrb	r3, [sp, #49]	; 0x31
   1ce0c:	e3530000 	cmp	r3, #0
   1ce10:	1affffb2 	bne	1cce0 <CICMPHandler::Process()+0x9c>
   1ce14:	e1a01005 	mov	r1, r5
   1ce18:	e28d0030 	add	r0, sp, #48	; 0x30
   1ce1c:	e5cd3030 	strb	r3, [sp, #48]	; 0x30
   1ce20:	e5cd3031 	strb	r3, [sp, #49]	; 0x31
   1ce24:	e1cd33b2 	strh	r3, [sp, #50]	; 0x32
   1ce28:	eb001272 	bl	217f8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1ce2c:	e5942004 	ldr	r2, [r4, #4]
   1ce30:	e1cd03b2 	strh	r0, [sp, #50]	; 0x32
   1ce34:	e3520000 	cmp	r2, #0
   1ce38:	0a000049 	beq	1cf64 <CICMPHandler::Process()+0x320>
   1ce3c:	e3a01001 	mov	r1, #1
   1ce40:	e1a03005 	mov	r3, r5
   1ce44:	e58d1000 	str	r1, [sp]
   1ce48:	e1a00002 	mov	r0, r2
   1ce4c:	e28d1018 	add	r1, sp, #24
   1ce50:	e28d2030 	add	r2, sp, #48	; 0x30
   1ce54:	ebfff7a3 	bl	1ace8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1ce58:	eaffffa0 	b	1cce0 <CICMPHandler::Process()+0x9c>
   1ce5c:	e3a0204e 	mov	r2, #78	; 0x4e
   1ce60:	e59f1190 	ldr	r1, [pc, #400]	; 1cff8 <CICMPHandler::Process()+0x3b4>
   1ce64:	e59f019c 	ldr	r0, [pc, #412]	; 1d008 <CICMPHandler::Process()+0x3c4>
   1ce68:	eb001e68 	bl	24810 <assertion_failed>
   1ce6c:	e28dde67 	add	sp, sp, #1648	; 0x670
   1ce70:	e28dd004 	add	sp, sp, #4
   1ce74:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce78:	eb002757 	bl	26bdc <CLogger::Get()>
   1ce7c:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1ce80:	e1a0300b 	mov	r3, fp
   1ce84:	e58d2000 	str	r2, [sp]
   1ce88:	e1a01006 	mov	r1, r6
   1ce8c:	e3a02002 	mov	r2, #2
   1ce90:	eb00268e 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ce94:	e1a03005 	mov	r3, r5
   1ce98:	e28d2038 	add	r2, sp, #56	; 0x38
   1ce9c:	e3a01002 	mov	r1, #2
   1cea0:	e1a00004 	mov	r0, r4
   1cea4:	ebffff28 	bl	1cb4c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1cea8:	eaffff8c 	b	1cce0 <CICMPHandler::Process()+0x9c>
   1ceac:	e28d0028 	add	r0, sp, #40	; 0x28
   1ceb0:	e28d1034 	add	r1, sp, #52	; 0x34
   1ceb4:	eb00104f 	bl	20ff8 <CIPAddress::CIPAddress(unsigned char const*)>
   1ceb8:	e5943004 	ldr	r3, [r4, #4]
   1cebc:	e3530000 	cmp	r3, #0
   1cec0:	0a000044 	beq	1cfd8 <CICMPHandler::Process()+0x394>
   1cec4:	e5940000 	ldr	r0, [r4]
   1cec8:	eb000f57 	bl	20c2c <CNetConfig::GetIPAddress() const>
   1cecc:	e1a05000 	mov	r5, r0
   1ced0:	e5940000 	ldr	r0, [r4]
   1ced4:	eb000f58 	bl	20c3c <CNetConfig::GetNetMask() const>
   1ced8:	e1a01005 	mov	r1, r5
   1cedc:	e1a02000 	mov	r2, r0
   1cee0:	e28d0028 	add	r0, sp, #40	; 0x28
   1cee4:	eb0010cb 	bl	21218 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   1cee8:	e3500000 	cmp	r0, #0
   1ceec:	1a000020 	bne	1cf74 <CICMPHandler::Process()+0x330>
   1cef0:	e28d0028 	add	r0, sp, #40	; 0x28
   1cef4:	eb000fbe 	bl	20df4 <CIPAddress::~CIPAddress()>
   1cef8:	eaffff78 	b	1cce0 <CICMPHandler::Process()+0x9c>
   1cefc:	eb002736 	bl	26bdc <CLogger::Get()>
   1cf00:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1cf04:	e1a01006 	mov	r1, r6
   1cf08:	e58d2000 	str	r2, [sp]
   1cf0c:	e59f30f8 	ldr	r3, [pc, #248]	; 1d00c <CICMPHandler::Process()+0x3c8>
   1cf10:	e3a02004 	mov	r2, #4
   1cf14:	eb00266d 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cf18:	e1a03005 	mov	r3, r5
   1cf1c:	e28d2038 	add	r2, sp, #56	; 0x38
   1cf20:	e3a01000 	mov	r1, #0
   1cf24:	e1a00004 	mov	r0, r4
   1cf28:	ebffff07 	bl	1cb4c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1cf2c:	eaffff6b 	b	1cce0 <CICMPHandler::Process()+0x9c>
   1cf30:	eb002729 	bl	26bdc <CLogger::Get()>
   1cf34:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1cf38:	e1a0300a 	mov	r3, sl
   1cf3c:	e58d2000 	str	r2, [sp]
   1cf40:	e1a01006 	mov	r1, r6
   1cf44:	e3a02002 	mov	r2, #2
   1cf48:	eb002660 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cf4c:	e1a03005 	mov	r3, r5
   1cf50:	e28d2038 	add	r2, sp, #56	; 0x38
   1cf54:	e3a01001 	mov	r1, #1
   1cf58:	e1a00004 	mov	r0, r4
   1cf5c:	ebfffefa 	bl	1cb4c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1cf60:	eaffff5e 	b	1cce0 <CICMPHandler::Process()+0x9c>
   1cf64:	e3a02078 	mov	r2, #120	; 0x78
   1cf68:	e59f1088 	ldr	r1, [pc, #136]	; 1cff8 <CICMPHandler::Process()+0x3b4>
   1cf6c:	e59f009c 	ldr	r0, [pc, #156]	; 1d010 <CICMPHandler::Process()+0x3cc>
   1cf70:	eb001e26 	bl	24810 <assertion_failed>
   1cf74:	e1a01007 	mov	r1, r7
   1cf78:	e5940004 	ldr	r0, [r4, #4]
   1cf7c:	ebfff899 	bl	1b1e8 <CNetworkLayer::GetGateway(unsigned char const*) const>
   1cf80:	e1a01000 	mov	r1, r0
   1cf84:	e28d0018 	add	r0, sp, #24
   1cf88:	eb000fe0 	bl	20f10 <CIPAddress::operator!=(unsigned char const*) const>
   1cf8c:	e3500000 	cmp	r0, #0
   1cf90:	1affffd6 	bne	1cef0 <CICMPHandler::Process()+0x2ac>
   1cf94:	eb002710 	bl	26bdc <CLogger::Get()>
   1cf98:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1cf9c:	e1a03009 	mov	r3, r9
   1cfa0:	e1a01006 	mov	r1, r6
   1cfa4:	e58d2000 	str	r2, [sp]
   1cfa8:	e3a02004 	mov	r2, #4
   1cfac:	eb002647 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cfb0:	e28d0028 	add	r0, sp, #40	; 0x28
   1cfb4:	e5945004 	ldr	r5, [r4, #4]
   1cfb8:	eb001033 	bl	2108c <CIPAddress::Get() const>
   1cfbc:	e1a01007 	mov	r1, r7
   1cfc0:	e1a02000 	mov	r2, r0
   1cfc4:	e1a00005 	mov	r0, r5
   1cfc8:	ebfff884 	bl	1b1e0 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>
   1cfcc:	e28d0028 	add	r0, sp, #40	; 0x28
   1cfd0:	eb000f87 	bl	20df4 <CIPAddress::~CIPAddress()>
   1cfd4:	eaffff41 	b	1cce0 <CICMPHandler::Process()+0x9c>
   1cfd8:	e3a020a7 	mov	r2, #167	; 0xa7
   1cfdc:	e59f1014 	ldr	r1, [pc, #20]	; 1cff8 <CICMPHandler::Process()+0x3b4>
   1cfe0:	e59f0028 	ldr	r0, [pc, #40]	; 1d010 <CICMPHandler::Process()+0x3cc>
   1cfe4:	eb001e09 	bl	24810 <assertion_failed>
   1cfe8:	00043ebc 	.word	0x00043ebc
   1cfec:	00043de8 	.word	0x00043de8
   1cff0:	00043ea8 	.word	0x00043ea8
   1cff4:	00043ed4 	.word	0x00043ed4
   1cff8:	00043df0 	.word	0x00043df0
   1cffc:	00043ac4 	.word	0x00043ac4
   1d000:	00043e64 	.word	0x00043e64
   1d004:	00043a48 	.word	0x00043a48
   1d008:	00043d70 	.word	0x00043d70
   1d00c:	00043e88 	.word	0x00043e88
   1d010:	00043a5c 	.word	0x00043a5c

0001d014 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>:
   1d014:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d018:	e2525000 	subs	r5, r2, #0
   1d01c:	e24dd020 	sub	sp, sp, #32
   1d020:	0a00003e 	beq	1d120 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x10c>
   1d024:	e3530014 	cmp	r3, #20
   1d028:	e1a06003 	mov	r6, r3
   1d02c:	9a00003f 	bls	1d130 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x11c>
   1d030:	e1a08001 	mov	r8, r1
   1d034:	e5d51000 	ldrb	r1, [r5]
   1d038:	e201200f 	and	r2, r1, #15
   1d03c:	e2423005 	sub	r3, r2, #5
   1d040:	e3530001 	cmp	r3, #1
   1d044:	8a00003d 	bhi	1d140 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x12c>
   1d048:	e1a01241 	asr	r1, r1, #4
   1d04c:	e3510004 	cmp	r1, #4
   1d050:	e1a04102 	lsl	r4, r2, #2
   1d054:	1a00003d 	bne	1d150 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x13c>
   1d058:	e1a07000 	mov	r7, r0
   1d05c:	e5900000 	ldr	r0, [r0]
   1d060:	eb000ef1 	bl	20c2c <CNetConfig::GetIPAddress() const>
   1d064:	e285100c 	add	r1, r5, #12
   1d068:	eb000f91 	bl	20eb4 <CIPAddress::operator==(unsigned char const*) const>
   1d06c:	e3500000 	cmp	r0, #0
   1d070:	0a00003a 	beq	1d160 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x14c>
   1d074:	e2843008 	add	r3, r4, #8
   1d078:	e1560003 	cmp	r6, r3
   1d07c:	3a00003b 	bcc	1d170 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x15c>
   1d080:	e3580000 	cmp	r8, #0
   1d084:	e0854004 	add	r4, r5, r4
   1d088:	0a000022 	beq	1d118 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x104>
   1d08c:	e59f30ec 	ldr	r3, [pc, #236]	; 1d180 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x16c>
   1d090:	e59f20ec 	ldr	r2, [pc, #236]	; 1d184 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x170>
   1d094:	e3580001 	cmp	r8, #1
   1d098:	01a08003 	moveq	r8, r3
   1d09c:	11a08002 	movne	r8, r2
   1d0a0:	e28d0010 	add	r0, sp, #16
   1d0a4:	eb002ab2 	bl	27b74 <CString::CString()>
   1d0a8:	e2851010 	add	r1, r5, #16
   1d0ac:	e28d0008 	add	r0, sp, #8
   1d0b0:	eb000fd0 	bl	20ff8 <CIPAddress::CIPAddress(unsigned char const*)>
   1d0b4:	e28d1010 	add	r1, sp, #16
   1d0b8:	e28d0008 	add	r0, sp, #8
   1d0bc:	eb001034 	bl	21194 <CIPAddress::Format(CString*) const>
   1d0c0:	eb0026c5 	bl	26bdc <CLogger::Get()>
   1d0c4:	e1a06000 	mov	r6, r0
   1d0c8:	e28d0010 	add	r0, sp, #16
   1d0cc:	eb002abe 	bl	27bcc <CString::operator char const*() const>
   1d0d0:	e58d8000 	str	r8, [sp]
   1d0d4:	e58d0004 	str	r0, [sp, #4]
   1d0d8:	e59f30a8 	ldr	r3, [pc, #168]	; 1d188 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x174>
   1d0dc:	e1a00006 	mov	r0, r6
   1d0e0:	e3a02004 	mov	r2, #4
   1d0e4:	e59f10a0 	ldr	r1, [pc, #160]	; 1d18c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x178>
   1d0e8:	eb0025f8 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d0ec:	e1a03004 	mov	r3, r4
   1d0f0:	e1a02005 	mov	r2, r5
   1d0f4:	e3a01000 	mov	r1, #0
   1d0f8:	e1a00007 	mov	r0, r7
   1d0fc:	ebfffe92 	bl	1cb4c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1d100:	e28d0008 	add	r0, sp, #8
   1d104:	eb000f3a 	bl	20df4 <CIPAddress::~CIPAddress()>
   1d108:	e28d0010 	add	r0, sp, #16
   1d10c:	eb002a65 	bl	27aa8 <CString::~CString()>
   1d110:	e28dd020 	add	sp, sp, #32
   1d114:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d118:	e59f8070 	ldr	r8, [pc, #112]	; 1d190 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x17c>
   1d11c:	eaffffdf 	b	1d0a0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x8c>
   1d120:	e3a020c9 	mov	r2, #201	; 0xc9
   1d124:	e59f1068 	ldr	r1, [pc, #104]	; 1d194 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d128:	e59f0068 	ldr	r0, [pc, #104]	; 1d198 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d12c:	eb001db7 	bl	24810 <assertion_failed>
   1d130:	e3a020ca 	mov	r2, #202	; 0xca
   1d134:	e59f1058 	ldr	r1, [pc, #88]	; 1d194 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d138:	e59f005c 	ldr	r0, [pc, #92]	; 1d19c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x188>
   1d13c:	eb001db3 	bl	24810 <assertion_failed>
   1d140:	e3a020cf 	mov	r2, #207	; 0xcf
   1d144:	e59f1048 	ldr	r1, [pc, #72]	; 1d194 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d148:	e59f0050 	ldr	r0, [pc, #80]	; 1d1a0 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x18c>
   1d14c:	eb001daf 	bl	24810 <assertion_failed>
   1d150:	e3a020d2 	mov	r2, #210	; 0xd2
   1d154:	e59f1038 	ldr	r1, [pc, #56]	; 1d194 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d158:	e59f0044 	ldr	r0, [pc, #68]	; 1d1a4 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x190>
   1d15c:	eb001dab 	bl	24810 <assertion_failed>
   1d160:	e3a020d3 	mov	r2, #211	; 0xd3
   1d164:	e59f1028 	ldr	r1, [pc, #40]	; 1d194 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d168:	e59f0038 	ldr	r0, [pc, #56]	; 1d1a8 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x194>
   1d16c:	eb001da7 	bl	24810 <assertion_failed>
   1d170:	e3a020d4 	mov	r2, #212	; 0xd4
   1d174:	e59f1018 	ldr	r1, [pc, #24]	; 1d194 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d178:	e59f002c 	ldr	r0, [pc, #44]	; 1d1ac <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x198>
   1d17c:	eb001da3 	bl	24810 <assertion_failed>
   1d180:	00043ef0 	.word	0x00043ef0
   1d184:	00047884 	.word	0x00047884
   1d188:	00044038 	.word	0x00044038
   1d18c:	00043de8 	.word	0x00043de8
   1d190:	00043ee4 	.word	0x00043ee4
   1d194:	00043df0 	.word	0x00043df0
   1d198:	00043ef8 	.word	0x00043ef8
   1d19c:	00043f10 	.word	0x00043f10
   1d1a0:	00043f30 	.word	0x00043f30
   1d1a4:	00043f90 	.word	0x00043f90
   1d1a8:	00043fbc 	.word	0x00043fbc
   1d1ac:	00043ff8 	.word	0x00043ff8

0001d1b0 <CRouteCache::CRouteCache()>:
   1d1b0:	e3a02064 	mov	r2, #100	; 0x64
   1d1b4:	e92d4010 	push	{r4, lr}
   1d1b8:	e1a04000 	mov	r4, r0
   1d1bc:	e1a01002 	mov	r1, r2
   1d1c0:	eb00298c 	bl	277f8 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   1d1c4:	e1a00004 	mov	r0, r4
   1d1c8:	e8bd8010 	pop	{r4, pc}

0001d1cc <CRouteCache::Flush()>:
   1d1cc:	e92d4070 	push	{r4, r5, r6, lr}
   1d1d0:	e1a05000 	mov	r5, r0
   1d1d4:	eb0029ad 	bl	27890 <CPtrArray::GetCount() const>
   1d1d8:	e3500000 	cmp	r0, #0
   1d1dc:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d1e0:	e3a06008 	mov	r6, #8
   1d1e4:	e2404001 	sub	r4, r0, #1
   1d1e8:	e1a01004 	mov	r1, r4
   1d1ec:	e1a00005 	mov	r0, r5
   1d1f0:	eb0029a8 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1d1f4:	e1a01006 	mov	r1, r6
   1d1f8:	e5900000 	ldr	r0, [r0]
   1d1fc:	eb0037ae 	bl	2b0bc <operator delete(void*, unsigned int)>
   1d200:	e2444001 	sub	r4, r4, #1
   1d204:	e1a00005 	mov	r0, r5
   1d208:	eb002a18 	bl	27a70 <CPtrArray::RemoveLast()>
   1d20c:	e3740001 	cmn	r4, #1
   1d210:	1afffff4 	bne	1d1e8 <CRouteCache::Flush()+0x1c>
   1d214:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d218 <CRouteCache::~CRouteCache()>:
   1d218:	e92d4010 	push	{r4, lr}
   1d21c:	e1a04000 	mov	r4, r0
   1d220:	ebffffe9 	bl	1d1cc <CRouteCache::Flush()>
   1d224:	e1a00004 	mov	r0, r4
   1d228:	eb00298d 	bl	27864 <CPtrArray::~CPtrArray()>
   1d22c:	e1a00004 	mov	r0, r4
   1d230:	e8bd8010 	pop	{r4, pc}

0001d234 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>:
   1d234:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d238:	e2517000 	subs	r7, r1, #0
   1d23c:	0a00002a 	beq	1d2ec <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xb8>
   1d240:	e3520000 	cmp	r2, #0
   1d244:	e1a0a002 	mov	sl, r2
   1d248:	0a00002b 	beq	1d2fc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xc8>
   1d24c:	e1a06000 	mov	r6, r0
   1d250:	eb00298e 	bl	27890 <CPtrArray::GetCount() const>
   1d254:	e2509000 	subs	r9, r0, #0
   1d258:	0a000015 	beq	1d2b4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x80>
   1d25c:	e3a04000 	mov	r4, #0
   1d260:	e3a08004 	mov	r8, #4
   1d264:	ea000008 	b	1d28c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x58>
   1d268:	e1a02008 	mov	r2, r8
   1d26c:	e1a01007 	mov	r1, r7
   1d270:	e1a00005 	mov	r0, r5
   1d274:	eb00336d 	bl	2a030 <memcmp>
   1d278:	e3500000 	cmp	r0, #0
   1d27c:	0a000015 	beq	1d2d8 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xa4>
   1d280:	e2844001 	add	r4, r4, #1
   1d284:	e1590004 	cmp	r9, r4
   1d288:	0a000009 	beq	1d2b4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x80>
   1d28c:	e1a01004 	mov	r1, r4
   1d290:	e1a00006 	mov	r0, r6
   1d294:	eb00297f 	bl	27898 <CPtrArray::operator[](unsigned int)>
   1d298:	e5905000 	ldr	r5, [r0]
   1d29c:	e3550000 	cmp	r5, #0
   1d2a0:	1afffff0 	bne	1d268 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x34>
   1d2a4:	e3a0203e 	mov	r2, #62	; 0x3e
   1d2a8:	e59f105c 	ldr	r1, [pc, #92]	; 1d30c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1d2ac:	e59f005c 	ldr	r0, [pc, #92]	; 1d310 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xdc>
   1d2b0:	eb001d56 	bl	24810 <assertion_failed>
   1d2b4:	e3a00008 	mov	r0, #8
   1d2b8:	eb003771 	bl	2b084 <operator new(unsigned int)>
   1d2bc:	e1a05000 	mov	r5, r0
   1d2c0:	e1a01007 	mov	r1, r7
   1d2c4:	e3a02004 	mov	r2, #4
   1d2c8:	eb003594 	bl	2a920 <memcpy>
   1d2cc:	e1a01005 	mov	r1, r5
   1d2d0:	e1a00006 	mov	r0, r6
   1d2d4:	eb0029a7 	bl	27978 <CPtrArray::Append(void*)>
   1d2d8:	e1a0100a 	mov	r1, sl
   1d2dc:	e2850004 	add	r0, r5, #4
   1d2e0:	e3a02004 	mov	r2, #4
   1d2e4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d2e8:	ea00358c 	b	2a920 <memcpy>
   1d2ec:	e3a02035 	mov	r2, #53	; 0x35
   1d2f0:	e59f1014 	ldr	r1, [pc, #20]	; 1d30c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1d2f4:	e59f0018 	ldr	r0, [pc, #24]	; 1d314 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xe0>
   1d2f8:	eb001d44 	bl	24810 <assertion_failed>
   1d2fc:	e3a02036 	mov	r2, #54	; 0x36
   1d300:	e59f1004 	ldr	r1, [pc, #4]	; 1d30c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1d304:	e59f000c 	ldr	r0, [pc, #12]	; 1d318 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xe4>
   1d308:	eb001d40 	bl	24810 <assertion_failed>
   1d30c:	00044058 	.word	0x00044058
   1d310:	00044088 	.word	0x00044088
   1d314:	00044068 	.word	0x00044068
   1d318:	00044078 	.word	0x00044078

0001d31c <CRouteCache::GetRoute(unsigned char const*) const>:
   1d31c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d320:	e2517000 	subs	r7, r1, #0
   1d324:	0a00001b 	beq	1d398 <CRouteCache::GetRoute(unsigned char const*) const+0x7c>
   1d328:	e1a05000 	mov	r5, r0
   1d32c:	eb002957 	bl	27890 <CPtrArray::GetCount() const>
   1d330:	e2509000 	subs	r9, r0, #0
   1d334:	13a04000 	movne	r4, #0
   1d338:	13a08004 	movne	r8, #4
   1d33c:	1a000008 	bne	1d364 <CRouteCache::GetRoute(unsigned char const*) const+0x48>
   1d340:	ea000010 	b	1d388 <CRouteCache::GetRoute(unsigned char const*) const+0x6c>
   1d344:	e1a02008 	mov	r2, r8
   1d348:	e1a01007 	mov	r1, r7
   1d34c:	eb003337 	bl	2a030 <memcmp>
   1d350:	e3500000 	cmp	r0, #0
   1d354:	0a00000d 	beq	1d390 <CRouteCache::GetRoute(unsigned char const*) const+0x74>
   1d358:	e2844001 	add	r4, r4, #1
   1d35c:	e1590004 	cmp	r9, r4
   1d360:	0a000008 	beq	1d388 <CRouteCache::GetRoute(unsigned char const*) const+0x6c>
   1d364:	e1a01004 	mov	r1, r4
   1d368:	e1a00005 	mov	r0, r5
   1d36c:	eb002965 	bl	27908 <CPtrArray::operator[](unsigned int) const>
   1d370:	e2506000 	subs	r6, r0, #0
   1d374:	1afffff2 	bne	1d344 <CRouteCache::GetRoute(unsigned char const*) const+0x28>
   1d378:	e3a0205d 	mov	r2, #93	; 0x5d
   1d37c:	e59f1024 	ldr	r1, [pc, #36]	; 1d3a8 <CRouteCache::GetRoute(unsigned char const*) const+0x8c>
   1d380:	e59f0024 	ldr	r0, [pc, #36]	; 1d3ac <CRouteCache::GetRoute(unsigned char const*) const+0x90>
   1d384:	eb001d21 	bl	24810 <assertion_failed>
   1d388:	e3a00000 	mov	r0, #0
   1d38c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d390:	e2860004 	add	r0, r6, #4
   1d394:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d398:	e3a02057 	mov	r2, #87	; 0x57
   1d39c:	e59f1004 	ldr	r1, [pc, #4]	; 1d3a8 <CRouteCache::GetRoute(unsigned char const*) const+0x8c>
   1d3a0:	e59f0008 	ldr	r0, [pc, #8]	; 1d3b0 <CRouteCache::GetRoute(unsigned char const*) const+0x94>
   1d3a4:	eb001d19 	bl	24810 <assertion_failed>
   1d3a8:	00044058 	.word	0x00044058
   1d3ac:	00044088 	.word	0x00044088
   1d3b0:	00044068 	.word	0x00044068

0001d3b4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>:
   1d3b4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d3b8:	e1a05003 	mov	r5, r3
   1d3bc:	e1a04000 	mov	r4, r0
   1d3c0:	e1a07001 	mov	r7, r1
   1d3c4:	e59f3088 	ldr	r3, [pc, #136]	; 1d454 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1d3c8:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   1d3cc:	e1dd92b0 	ldrh	r9, [sp, #32]
   1d3d0:	e1dd82b4 	ldrh	r8, [sp, #36]	; 0x24
   1d3d4:	e5802008 	str	r2, [r0, #8]
   1d3d8:	e5803000 	str	r3, [r0]
   1d3dc:	e5801004 	str	r1, [r0, #4]
   1d3e0:	e1a01005 	mov	r1, r5
   1d3e4:	e280000c 	add	r0, r0, #12
   1d3e8:	eb000e72 	bl	20db8 <CIPAddress::CIPAddress(CIPAddress const&)>
   1d3ec:	e1c491b4 	strh	r9, [r4, #20]
   1d3f0:	e1c481b6 	strh	r8, [r4, #22]
   1d3f4:	e5846018 	str	r6, [r4, #24]
   1d3f8:	e1a00007 	mov	r0, r7
   1d3fc:	eb000e0a 	bl	20c2c <CNetConfig::GetIPAddress() const>
   1d400:	e1a03006 	mov	r3, r6
   1d404:	e1a01000 	mov	r1, r0
   1d408:	e1a02005 	mov	r2, r5
   1d40c:	e284001c 	add	r0, r4, #28
   1d410:	eb001084 	bl	21628 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>
   1d414:	e5943004 	ldr	r3, [r4, #4]
   1d418:	e3530000 	cmp	r3, #0
   1d41c:	0a000004 	beq	1d434 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x80>
   1d420:	e5943008 	ldr	r3, [r4, #8]
   1d424:	e3530000 	cmp	r3, #0
   1d428:	0a000005 	beq	1d444 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x90>
   1d42c:	e1a00004 	mov	r0, r4
   1d430:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d434:	e3a02025 	mov	r2, #37	; 0x25
   1d438:	e59f1018 	ldr	r1, [pc, #24]	; 1d458 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   1d43c:	e59f0018 	ldr	r0, [pc, #24]	; 1d45c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa8>
   1d440:	eb001cf2 	bl	24810 <assertion_failed>
   1d444:	e3a02026 	mov	r2, #38	; 0x26
   1d448:	e59f1008 	ldr	r1, [pc, #8]	; 1d458 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   1d44c:	e59f000c 	ldr	r0, [pc, #12]	; 1d460 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xac>
   1d450:	eb001cee 	bl	24810 <assertion_failed>
   1d454:	0004409c 	.word	0x0004409c
   1d458:	000440d8 	.word	0x000440d8
   1d45c:	00043a48 	.word	0x00043a48
   1d460:	00043a5c 	.word	0x00043a5c

0001d464 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>:
   1d464:	e92d4070 	push	{r4, r5, r6, lr}
   1d468:	e1a05001 	mov	r5, r1
   1d46c:	e59f1078 	ldr	r1, [pc, #120]	; 1d4ec <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x88>
   1d470:	e1a04000 	mov	r4, r0
   1d474:	e8800022 	stm	r0, {r1, r5}
   1d478:	e5802008 	str	r2, [r0, #8]
   1d47c:	e280000c 	add	r0, r0, #12
   1d480:	e1a06003 	mov	r6, r3
   1d484:	eb000e44 	bl	20d9c <CIPAddress::CIPAddress()>
   1d488:	e3a02000 	mov	r2, #0
   1d48c:	e1c461b6 	strh	r6, [r4, #22]
   1d490:	e1c421b4 	strh	r2, [r4, #20]
   1d494:	e1a00005 	mov	r0, r5
   1d498:	eb000de3 	bl	20c2c <CNetConfig::GetIPAddress() const>
   1d49c:	e59d2010 	ldr	r2, [sp, #16]
   1d4a0:	e1a01000 	mov	r1, r0
   1d4a4:	e284001c 	add	r0, r4, #28
   1d4a8:	eb001052 	bl	215f8 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>
   1d4ac:	e5943004 	ldr	r3, [r4, #4]
   1d4b0:	e3530000 	cmp	r3, #0
   1d4b4:	0a000004 	beq	1d4cc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x68>
   1d4b8:	e5943008 	ldr	r3, [r4, #8]
   1d4bc:	e3530000 	cmp	r3, #0
   1d4c0:	0a000005 	beq	1d4dc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x78>
   1d4c4:	e1a00004 	mov	r0, r4
   1d4c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d4cc:	e3a02033 	mov	r2, #51	; 0x33
   1d4d0:	e59f1018 	ldr	r1, [pc, #24]	; 1d4f0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x8c>
   1d4d4:	e59f0018 	ldr	r0, [pc, #24]	; 1d4f4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x90>
   1d4d8:	eb001ccc 	bl	24810 <assertion_failed>
   1d4dc:	e3a02034 	mov	r2, #52	; 0x34
   1d4e0:	e59f1008 	ldr	r1, [pc, #8]	; 1d4f0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x8c>
   1d4e4:	e59f000c 	ldr	r0, [pc, #12]	; 1d4f8 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x94>
   1d4e8:	eb001cc8 	bl	24810 <assertion_failed>
   1d4ec:	0004409c 	.word	0x0004409c
   1d4f0:	000440d8 	.word	0x000440d8
   1d4f4:	00043a48 	.word	0x00043a48
   1d4f8:	00043a5c 	.word	0x00043a5c

0001d4fc <CNetConnection::~CNetConnection()>:
   1d4fc:	e3a03000 	mov	r3, #0
   1d500:	e92d4010 	push	{r4, lr}
   1d504:	e1a04000 	mov	r4, r0
   1d508:	e59f201c 	ldr	r2, [pc, #28]	; 1d52c <CNetConnection::~CNetConnection()+0x30>
   1d50c:	e5803008 	str	r3, [r0, #8]
   1d510:	e880000c 	stm	r0, {r2, r3}
   1d514:	e280001c 	add	r0, r0, #28
   1d518:	eb001053 	bl	2166c <CChecksumCalculator::~CChecksumCalculator()>
   1d51c:	e284000c 	add	r0, r4, #12
   1d520:	eb000e33 	bl	20df4 <CIPAddress::~CIPAddress()>
   1d524:	e1a00004 	mov	r0, r4
   1d528:	e8bd8010 	pop	{r4, pc}
   1d52c:	0004409c 	.word	0x0004409c

0001d530 <CNetConnection::~CNetConnection()>:
   1d530:	e3a03000 	mov	r3, #0
   1d534:	e92d4010 	push	{r4, lr}
   1d538:	e1a04000 	mov	r4, r0
   1d53c:	e59f2028 	ldr	r2, [pc, #40]	; 1d56c <CNetConnection::~CNetConnection()+0x3c>
   1d540:	e5803008 	str	r3, [r0, #8]
   1d544:	e880000c 	stm	r0, {r2, r3}
   1d548:	e280001c 	add	r0, r0, #28
   1d54c:	eb001046 	bl	2166c <CChecksumCalculator::~CChecksumCalculator()>
   1d550:	e284000c 	add	r0, r4, #12
   1d554:	eb000e26 	bl	20df4 <CIPAddress::~CIPAddress()>
   1d558:	e1a00004 	mov	r0, r4
   1d55c:	e3a0102c 	mov	r1, #44	; 0x2c
   1d560:	eb0036d5 	bl	2b0bc <operator delete(void*, unsigned int)>
   1d564:	e1a00004 	mov	r0, r4
   1d568:	e8bd8010 	pop	{r4, pc}
   1d56c:	0004409c 	.word	0x0004409c

0001d570 <CNetConnection::GetForeignIP() const>:
   1d570:	e280000c 	add	r0, r0, #12
   1d574:	ea000ec4 	b	2108c <CIPAddress::Get() const>

0001d578 <CNetConnection::GetOwnPort() const>:
   1d578:	e1d001b6 	ldrh	r0, [r0, #22]
   1d57c:	e3500000 	cmp	r0, #0
   1d580:	0a000000 	beq	1d588 <CNetConnection::GetOwnPort() const+0x10>
   1d584:	e12fff1e 	bx	lr
   1d588:	e92d4010 	push	{r4, lr}
   1d58c:	e3a02044 	mov	r2, #68	; 0x44
   1d590:	e59f1004 	ldr	r1, [pc, #4]	; 1d59c <CNetConnection::GetOwnPort() const+0x24>
   1d594:	e59f0004 	ldr	r0, [pc, #4]	; 1d5a0 <CNetConnection::GetOwnPort() const+0x28>
   1d598:	eb001c9c 	bl	24810 <assertion_failed>
   1d59c:	000440d8 	.word	0x000440d8
   1d5a0:	000440ec 	.word	0x000440ec

0001d5a4 <CNetConnection::GetProtocol() const>:
   1d5a4:	e5900018 	ldr	r0, [r0, #24]
   1d5a8:	e12fff1e 	bx	lr

0001d5ac <CUDPConnection::Accept(CIPAddress*, unsigned short*)>:
   1d5ac:	e3e00000 	mvn	r0, #0
   1d5b0:	e12fff1e 	bx	lr

0001d5b4 <CUDPConnection::Close()>:
   1d5b4:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1d5b8:	e3530000 	cmp	r3, #0
   1d5bc:	13a03000 	movne	r3, #0
   1d5c0:	15c03029 	strbne	r3, [r0, #41]	; 0x29
   1d5c4:	11a00003 	movne	r0, r3
   1d5c8:	03e00000 	mvneq	r0, #0
   1d5cc:	e12fff1e 	bx	lr

0001d5d0 <CUDPConnection::SetOptionBroadcast(bool)>:
   1d5d0:	e5c01040 	strb	r1, [r0, #64]	; 0x40
   1d5d4:	e3a00000 	mov	r0, #0
   1d5d8:	e12fff1e 	bx	lr

0001d5dc <CUDPConnection::IsConnected() const>:
   1d5dc:	e3a00000 	mov	r0, #0
   1d5e0:	e12fff1e 	bx	lr

0001d5e4 <CUDPConnection::IsTerminated() const>:
   1d5e4:	e5d00029 	ldrb	r0, [r0, #41]	; 0x29
   1d5e8:	e2200001 	eor	r0, r0, #1
   1d5ec:	e12fff1e 	bx	lr

0001d5f0 <CUDPConnection::Process()>:
   1d5f0:	e12fff1e 	bx	lr

0001d5f4 <CUDPConnection::Send(void const*, unsigned int, int)>:
   1d5f4:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d5f8:	e28db01c 	add	fp, sp, #28
   1d5fc:	e24dd008 	sub	sp, sp, #8
   1d600:	e5906044 	ldr	r6, [r0, #68]	; 0x44
   1d604:	e3560000 	cmp	r6, #0
   1d608:	b3a03000 	movlt	r3, #0
   1d60c:	b5803044 	strlt	r3, [r0, #68]	; 0x44
   1d610:	ba00004d 	blt	1d74c <CUDPConnection::Send(void const*, unsigned int, int)+0x158>
   1d614:	e5d0c02a 	ldrb	ip, [r0, #42]	; 0x2a
   1d618:	e35c0000 	cmp	ip, #0
   1d61c:	0a000059 	beq	1d788 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d620:	e3d33040 	bics	r3, r3, #64	; 0x40
   1d624:	1a000057 	bne	1d788 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d628:	e59f3198 	ldr	r3, [pc, #408]	; 1d7c8 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d4>
   1d62c:	e242c001 	sub	ip, r2, #1
   1d630:	e15c0003 	cmp	ip, r3
   1d634:	e2827008 	add	r7, r2, #8
   1d638:	8a000052 	bhi	1d788 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d63c:	e5903004 	ldr	r3, [r0, #4]
   1d640:	e1a06002 	mov	r6, r2
   1d644:	e3530000 	cmp	r3, #0
   1d648:	e1a08001 	mov	r8, r1
   1d64c:	e1a04000 	mov	r4, r0
   1d650:	0a000050 	beq	1d798 <CUDPConnection::Send(void const*, unsigned int, int)+0x1a4>
   1d654:	e5d03040 	ldrb	r3, [r0, #64]	; 0x40
   1d658:	e3530000 	cmp	r3, #0
   1d65c:	0a00003d 	beq	1d758 <CUDPConnection::Send(void const*, unsigned int, int)+0x164>
   1d660:	e3a01000 	mov	r1, #0
   1d664:	e1d431b6 	ldrh	r3, [r4, #22]
   1d668:	e1d401b4 	ldrh	r0, [r4, #20]
   1d66c:	e2872007 	add	r2, r7, #7
   1d670:	e3c22007 	bic	r2, r2, #7
   1d674:	e6bf3fb3 	rev16	r3, r3
   1d678:	e04dd002 	sub	sp, sp, r2
   1d67c:	e6ff3073 	uxth	r3, r3
   1d680:	e6bf0fb0 	rev16	r0, r0
   1d684:	e6bf2fb7 	rev16	r2, r7
   1d688:	e28d5008 	add	r5, sp, #8
   1d68c:	e1a0c423 	lsr	ip, r3, #8
   1d690:	e6ff0070 	uxth	r0, r0
   1d694:	e6ff2072 	uxth	r2, r2
   1d698:	e5cd3008 	strb	r3, [sp, #8]
   1d69c:	e1580001 	cmp	r8, r1
   1d6a0:	e5c5c001 	strb	ip, [r5, #1]
   1d6a4:	e1a03422 	lsr	r3, r2, #8
   1d6a8:	e1a0c420 	lsr	ip, r0, #8
   1d6ac:	e5c50002 	strb	r0, [r5, #2]
   1d6b0:	e5c5c003 	strb	ip, [r5, #3]
   1d6b4:	e5c52004 	strb	r2, [r5, #4]
   1d6b8:	e5c53005 	strb	r3, [r5, #5]
   1d6bc:	e5c51006 	strb	r1, [r5, #6]
   1d6c0:	e5c51007 	strb	r1, [r5, #7]
   1d6c4:	0a000037 	beq	1d7a8 <CUDPConnection::Send(void const*, unsigned int, int)+0x1b4>
   1d6c8:	e1a02006 	mov	r2, r6
   1d6cc:	e1a01008 	mov	r1, r8
   1d6d0:	e2850008 	add	r0, r5, #8
   1d6d4:	eb003491 	bl	2a920 <memcpy>
   1d6d8:	e5940004 	ldr	r0, [r4, #4]
   1d6dc:	eb000d52 	bl	20c2c <CNetConfig::GetIPAddress() const>
   1d6e0:	e284801c 	add	r8, r4, #28
   1d6e4:	e1a01000 	mov	r1, r0
   1d6e8:	e284900c 	add	r9, r4, #12
   1d6ec:	e1a00008 	mov	r0, r8
   1d6f0:	eb000fde 	bl	21670 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1d6f4:	e1a00008 	mov	r0, r8
   1d6f8:	e1a01009 	mov	r1, r9
   1d6fc:	eb000fdf 	bl	21680 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1d700:	e1a02007 	mov	r2, r7
   1d704:	e1a01005 	mov	r1, r5
   1d708:	e1a00008 	mov	r0, r8
   1d70c:	eb001007 	bl	21730 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d710:	e594c008 	ldr	ip, [r4, #8]
   1d714:	e1a03420 	lsr	r3, r0, #8
   1d718:	e35c0000 	cmp	ip, #0
   1d71c:	e5c50006 	strb	r0, [r5, #6]
   1d720:	e5c53007 	strb	r3, [r5, #7]
   1d724:	0a000023 	beq	1d7b8 <CUDPConnection::Send(void const*, unsigned int, int)+0x1c4>
   1d728:	e3a0e011 	mov	lr, #17
   1d72c:	e1a03007 	mov	r3, r7
   1d730:	e1a02005 	mov	r2, r5
   1d734:	e1a01009 	mov	r1, r9
   1d738:	e1a0000c 	mov	r0, ip
   1d73c:	e58de000 	str	lr, [sp]
   1d740:	ebfff568 	bl	1ace8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d744:	e3500000 	cmp	r0, #0
   1d748:	0a00000e 	beq	1d788 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d74c:	e1a00006 	mov	r0, r6
   1d750:	e24bd01c 	sub	sp, fp, #28
   1d754:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d758:	e280500c 	add	r5, r0, #12
   1d75c:	e1a00005 	mov	r0, r5
   1d760:	eb000e7a 	bl	21150 <CIPAddress::IsBroadcast() const>
   1d764:	e3500000 	cmp	r0, #0
   1d768:	1a000006 	bne	1d788 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d76c:	e5940004 	ldr	r0, [r4, #4]
   1d770:	eb000d37 	bl	20c54 <CNetConfig::GetBroadcastAddress() const>
   1d774:	e1a01000 	mov	r1, r0
   1d778:	e1a00005 	mov	r0, r5
   1d77c:	eb000d9d 	bl	20df8 <CIPAddress::operator==(CIPAddress const&) const>
   1d780:	e3500000 	cmp	r0, #0
   1d784:	0affffb5 	beq	1d660 <CUDPConnection::Send(void const*, unsigned int, int)+0x6c>
   1d788:	e3e06000 	mvn	r6, #0
   1d78c:	e1a00006 	mov	r0, r6
   1d790:	e24bd01c 	sub	sp, fp, #28
   1d794:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d798:	e3a0207b 	mov	r2, #123	; 0x7b
   1d79c:	e59f1028 	ldr	r1, [pc, #40]	; 1d7cc <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1d7a0:	e59f0028 	ldr	r0, [pc, #40]	; 1d7d0 <CUDPConnection::Send(void const*, unsigned int, int)+0x1dc>
   1d7a4:	eb001c19 	bl	24810 <assertion_failed>
   1d7a8:	e3a0208b 	mov	r2, #139	; 0x8b
   1d7ac:	e59f1018 	ldr	r1, [pc, #24]	; 1d7cc <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1d7b0:	e59f001c 	ldr	r0, [pc, #28]	; 1d7d4 <CUDPConnection::Send(void const*, unsigned int, int)+0x1e0>
   1d7b4:	eb001c15 	bl	24810 <assertion_failed>
   1d7b8:	e3a02093 	mov	r2, #147	; 0x93
   1d7bc:	e59f1008 	ldr	r1, [pc, #8]	; 1d7cc <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1d7c0:	e59f0010 	ldr	r0, [pc, #16]	; 1d7d8 <CUDPConnection::Send(void const*, unsigned int, int)+0x1e4>
   1d7c4:	eb001c11 	bl	24810 <assertion_failed>
   1d7c8:	00000637 	.word	0x00000637
   1d7cc:	00044140 	.word	0x00044140
   1d7d0:	00043a48 	.word	0x00043a48
   1d7d4:	00043ac4 	.word	0x00043ac4
   1d7d8:	00043a5c 	.word	0x00043a5c

0001d7dc <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1d7dc:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   1d7e0:	e28db018 	add	fp, sp, #24
   1d7e4:	e24dd00c 	sub	sp, sp, #12
   1d7e8:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   1d7ec:	e1a04000 	mov	r4, r0
   1d7f0:	e35c0000 	cmp	ip, #0
   1d7f4:	b3a03000 	movlt	r3, #0
   1d7f8:	e1db60b8 	ldrh	r6, [fp, #8]
   1d7fc:	b5803044 	strlt	r3, [r0, #68]	; 0x44
   1d800:	ba00004c 	blt	1d938 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x15c>
   1d804:	e5d0c02a 	ldrb	ip, [r0, #42]	; 0x2a
   1d808:	e35c0000 	cmp	ip, #0
   1d80c:	1a000054 	bne	1d964 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x188>
   1d810:	e1a0e003 	mov	lr, r3
   1d814:	e3de3040 	bics	r3, lr, #64	; 0x40
   1d818:	1a00004d 	bne	1d954 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1d81c:	e1a05002 	mov	r5, r2
   1d820:	e59f31a8 	ldr	r3, [pc, #424]	; 1d9d0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f4>
   1d824:	e2422001 	sub	r2, r2, #1
   1d828:	e1520003 	cmp	r2, r3
   1d82c:	e2858008 	add	r8, r5, #8
   1d830:	8a000047 	bhi	1d954 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1d834:	e5903004 	ldr	r3, [r0, #4]
   1d838:	e3530000 	cmp	r3, #0
   1d83c:	0a00004f 	beq	1d980 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1a4>
   1d840:	e5d03040 	ldrb	r3, [r0, #64]	; 0x40
   1d844:	e1a07001 	mov	r7, r1
   1d848:	e3530000 	cmp	r3, #0
   1d84c:	0a00003c 	beq	1d944 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x168>
   1d850:	e3a00000 	mov	r0, #0
   1d854:	e1d411b6 	ldrh	r1, [r4, #22]
   1d858:	e2883007 	add	r3, r8, #7
   1d85c:	e3c33007 	bic	r3, r3, #7
   1d860:	e04dd003 	sub	sp, sp, r3
   1d864:	e6bf6fb6 	rev16	r6, r6
   1d868:	e6bf1fb1 	rev16	r1, r1
   1d86c:	e6bf3fb8 	rev16	r3, r8
   1d870:	e6ff2076 	uxth	r2, r6
   1d874:	e6ff1071 	uxth	r1, r1
   1d878:	e28d6008 	add	r6, sp, #8
   1d87c:	e6ff3073 	uxth	r3, r3
   1d880:	e5cd1008 	strb	r1, [sp, #8]
   1d884:	e1a0c421 	lsr	ip, r1, #8
   1d888:	e5c62002 	strb	r2, [r6, #2]
   1d88c:	e1a01422 	lsr	r1, r2, #8
   1d890:	e1570000 	cmp	r7, r0
   1d894:	e1a02423 	lsr	r2, r3, #8
   1d898:	e5c6c001 	strb	ip, [r6, #1]
   1d89c:	e5c61003 	strb	r1, [r6, #3]
   1d8a0:	e5c63004 	strb	r3, [r6, #4]
   1d8a4:	e5c62005 	strb	r2, [r6, #5]
   1d8a8:	e5c60006 	strb	r0, [r6, #6]
   1d8ac:	e5c60007 	strb	r0, [r6, #7]
   1d8b0:	0a000036 	beq	1d990 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d8b4:	e1a02005 	mov	r2, r5
   1d8b8:	e1a01007 	mov	r1, r7
   1d8bc:	e2860008 	add	r0, r6, #8
   1d8c0:	eb003416 	bl	2a920 <memcpy>
   1d8c4:	e5940004 	ldr	r0, [r4, #4]
   1d8c8:	eb000cd7 	bl	20c2c <CNetConfig::GetIPAddress() const>
   1d8cc:	e284701c 	add	r7, r4, #28
   1d8d0:	e1a01000 	mov	r1, r0
   1d8d4:	e1a00007 	mov	r0, r7
   1d8d8:	eb000f64 	bl	21670 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1d8dc:	e59b1004 	ldr	r1, [fp, #4]
   1d8e0:	e1a00007 	mov	r0, r7
   1d8e4:	eb000f65 	bl	21680 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1d8e8:	e1a01006 	mov	r1, r6
   1d8ec:	e1a02008 	mov	r2, r8
   1d8f0:	e1a00007 	mov	r0, r7
   1d8f4:	eb000f8d 	bl	21730 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d8f8:	e5941008 	ldr	r1, [r4, #8]
   1d8fc:	e1a03420 	lsr	r3, r0, #8
   1d900:	e3510000 	cmp	r1, #0
   1d904:	e5c60006 	strb	r0, [r6, #6]
   1d908:	e5c63007 	strb	r3, [r6, #7]
   1d90c:	0a00002b 	beq	1d9c0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1e4>
   1d910:	e3a0c011 	mov	ip, #17
   1d914:	e1a00001 	mov	r0, r1
   1d918:	e1a03008 	mov	r3, r8
   1d91c:	e1a02006 	mov	r2, r6
   1d920:	e58dc000 	str	ip, [sp]
   1d924:	e59b1004 	ldr	r1, [fp, #4]
   1d928:	ebfff4ee 	bl	1ace8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d92c:	e3500000 	cmp	r0, #0
   1d930:	0a000007 	beq	1d954 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1d934:	e1a0c005 	mov	ip, r5
   1d938:	e1a0000c 	mov	r0, ip
   1d93c:	e24bd018 	sub	sp, fp, #24
   1d940:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d944:	e59b0004 	ldr	r0, [fp, #4]
   1d948:	eb000e00 	bl	21150 <CIPAddress::IsBroadcast() const>
   1d94c:	e3500000 	cmp	r0, #0
   1d950:	0a000012 	beq	1d9a0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1c4>
   1d954:	e3e0c000 	mvn	ip, #0
   1d958:	e1a0000c 	mov	r0, ip
   1d95c:	e24bd018 	sub	sp, fp, #24
   1d960:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d964:	e590c000 	ldr	ip, [r0]
   1d968:	e59c4014 	ldr	r4, [ip, #20]
   1d96c:	e12fff34 	blx	r4
   1d970:	e1a0c000 	mov	ip, r0
   1d974:	e1a0000c 	mov	r0, ip
   1d978:	e24bd018 	sub	sp, fp, #24
   1d97c:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d980:	e3a020e4 	mov	r2, #228	; 0xe4
   1d984:	e59f1048 	ldr	r1, [pc, #72]	; 1d9d4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1d988:	e59f0048 	ldr	r0, [pc, #72]	; 1d9d8 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1fc>
   1d98c:	eb001b9f 	bl	24810 <assertion_failed>
   1d990:	e3a020f4 	mov	r2, #244	; 0xf4
   1d994:	e59f1038 	ldr	r1, [pc, #56]	; 1d9d4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1d998:	e59f003c 	ldr	r0, [pc, #60]	; 1d9dc <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x200>
   1d99c:	eb001b9b 	bl	24810 <assertion_failed>
   1d9a0:	e5940004 	ldr	r0, [r4, #4]
   1d9a4:	eb000caa 	bl	20c54 <CNetConfig::GetBroadcastAddress() const>
   1d9a8:	e1a01000 	mov	r1, r0
   1d9ac:	e59b0004 	ldr	r0, [fp, #4]
   1d9b0:	eb000d10 	bl	20df8 <CIPAddress::operator==(CIPAddress const&) const>
   1d9b4:	e3500000 	cmp	r0, #0
   1d9b8:	1affffe5 	bne	1d954 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1d9bc:	eaffffa3 	b	1d850 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x74>
   1d9c0:	e3a020fc 	mov	r2, #252	; 0xfc
   1d9c4:	e59f1008 	ldr	r1, [pc, #8]	; 1d9d4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1d9c8:	e59f0010 	ldr	r0, [pc, #16]	; 1d9e0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x204>
   1d9cc:	eb001b8f 	bl	24810 <assertion_failed>
   1d9d0:	00000637 	.word	0x00000637
   1d9d4:	00044140 	.word	0x00044140
   1d9d8:	00043a48 	.word	0x00043a48
   1d9dc:	00043ac4 	.word	0x00043ac4
   1d9e0:	00043a5c 	.word	0x00043a5c

0001d9e4 <CUDPConnection::Receive(void*, int)>:
   1d9e4:	e5903044 	ldr	r3, [r0, #68]	; 0x44
   1d9e8:	e3530000 	cmp	r3, #0
   1d9ec:	ba000028 	blt	1da94 <CUDPConnection::Receive(void*, int)+0xb0>
   1d9f0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1d9f4:	e1a08002 	mov	r8, r2
   1d9f8:	e1a04001 	mov	r4, r1
   1d9fc:	e1a05000 	mov	r5, r0
   1da00:	e24dd00c 	sub	sp, sp, #12
   1da04:	e280602c 	add	r6, r0, #44	; 0x2c
   1da08:	e2807038 	add	r7, r0, #56	; 0x38
   1da0c:	e3540000 	cmp	r4, #0
   1da10:	0a00001b 	beq	1da84 <CUDPConnection::Receive(void*, int)+0xa0>
   1da14:	e28d2004 	add	r2, sp, #4
   1da18:	e1a01004 	mov	r1, r4
   1da1c:	e1a00006 	mov	r0, r6
   1da20:	eb000eae 	bl	214e0 <CNetQueue::Dequeue(void*, void**)>
   1da24:	e2509000 	subs	r9, r0, #0
   1da28:	1a00000c 	bne	1da60 <CUDPConnection::Receive(void*, int)+0x7c>
   1da2c:	e3580040 	cmp	r8, #64	; 0x40
   1da30:	0a00001b 	beq	1daa4 <CUDPConnection::Receive(void*, int)+0xc0>
   1da34:	e1a00007 	mov	r0, r7
   1da38:	eb001aee 	bl	245f8 <CSynchronizationEvent::Clear()>
   1da3c:	e1a00007 	mov	r0, r7
   1da40:	eb001afd 	bl	2463c <CSynchronizationEvent::Wait()>
   1da44:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   1da48:	e3530000 	cmp	r3, #0
   1da4c:	aaffffee 	bge	1da0c <CUDPConnection::Receive(void*, int)+0x28>
   1da50:	e5859044 	str	r9, [r5, #68]	; 0x44
   1da54:	e1a00003 	mov	r0, r3
   1da58:	e28dd00c 	add	sp, sp, #12
   1da5c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1da60:	e59d0004 	ldr	r0, [sp, #4]
   1da64:	e3500000 	cmp	r0, #0
   1da68:	0a00000f 	beq	1daac <CUDPConnection::Receive(void*, int)+0xc8>
   1da6c:	e3a01006 	mov	r1, #6
   1da70:	eb003591 	bl	2b0bc <operator delete(void*, unsigned int)>
   1da74:	e1a03009 	mov	r3, r9
   1da78:	e1a00003 	mov	r0, r3
   1da7c:	e28dd00c 	add	sp, sp, #12
   1da80:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1da84:	e3a020a7 	mov	r2, #167	; 0xa7
   1da88:	e59f102c 	ldr	r1, [pc, #44]	; 1dabc <CUDPConnection::Receive(void*, int)+0xd8>
   1da8c:	e59f002c 	ldr	r0, [pc, #44]	; 1dac0 <CUDPConnection::Receive(void*, int)+0xdc>
   1da90:	eb001b5e 	bl	24810 <assertion_failed>
   1da94:	e3a02000 	mov	r2, #0
   1da98:	e5802044 	str	r2, [r0, #68]	; 0x44
   1da9c:	e1a00003 	mov	r0, r3
   1daa0:	e12fff1e 	bx	lr
   1daa4:	e1a03009 	mov	r3, r9
   1daa8:	eaffffe9 	b	1da54 <CUDPConnection::Receive(void*, int)+0x70>
   1daac:	e3a020bf 	mov	r2, #191	; 0xbf
   1dab0:	e59f1004 	ldr	r1, [pc, #4]	; 1dabc <CUDPConnection::Receive(void*, int)+0xd8>
   1dab4:	e59f0008 	ldr	r0, [pc, #8]	; 1dac4 <CUDPConnection::Receive(void*, int)+0xe0>
   1dab8:	eb001b54 	bl	24810 <assertion_failed>
   1dabc:	00044140 	.word	0x00044140
   1dac0:	00040c5c 	.word	0x00040c5c
   1dac4:	00043ac4 	.word	0x00043ac4

0001dac8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1dac8:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   1dacc:	e35c0000 	cmp	ip, #0
   1dad0:	ba00002c 	blt	1db88 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xc0>
   1dad4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dad8:	e1a09003 	mov	r9, r3
   1dadc:	e1a08002 	mov	r8, r2
   1dae0:	e1a04001 	mov	r4, r1
   1dae4:	e1a05000 	mov	r5, r0
   1dae8:	e24dd008 	sub	sp, sp, #8
   1daec:	e280602c 	add	r6, r0, #44	; 0x2c
   1daf0:	e2807038 	add	r7, r0, #56	; 0x38
   1daf4:	e3540000 	cmp	r4, #0
   1daf8:	0a00001e 	beq	1db78 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xb0>
   1dafc:	e28d2004 	add	r2, sp, #4
   1db00:	e1a01004 	mov	r1, r4
   1db04:	e1a00006 	mov	r0, r6
   1db08:	eb000e74 	bl	214e0 <CNetQueue::Dequeue(void*, void**)>
   1db0c:	e250a000 	subs	sl, r0, #0
   1db10:	1a00000a 	bne	1db40 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x78>
   1db14:	e3580040 	cmp	r8, #64	; 0x40
   1db18:	0a00001e 	beq	1db98 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xd0>
   1db1c:	e1a00007 	mov	r0, r7
   1db20:	eb001ab4 	bl	245f8 <CSynchronizationEvent::Clear()>
   1db24:	e1a00007 	mov	r0, r7
   1db28:	eb001ac3 	bl	2463c <CSynchronizationEvent::Wait()>
   1db2c:	e595c044 	ldr	ip, [r5, #68]	; 0x44
   1db30:	e35c0000 	cmp	ip, #0
   1db34:	aaffffee 	bge	1daf4 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x2c>
   1db38:	e585a044 	str	sl, [r5, #68]	; 0x44
   1db3c:	ea00000a 	b	1db6c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xa4>
   1db40:	e59d4004 	ldr	r4, [sp, #4]
   1db44:	e3540000 	cmp	r4, #0
   1db48:	0a00001b 	beq	1dbbc <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xf4>
   1db4c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1db50:	e3590000 	cmp	r9, #0
   1db54:	13530000 	cmpne	r3, #0
   1db58:	1a000010 	bne	1dba0 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xd8>
   1db5c:	e1a00004 	mov	r0, r4
   1db60:	e3a01006 	mov	r1, #6
   1db64:	eb003554 	bl	2b0bc <operator delete(void*, unsigned int)>
   1db68:	e1a0c00a 	mov	ip, sl
   1db6c:	e1a0000c 	mov	r0, ip
   1db70:	e28dd008 	add	sp, sp, #8
   1db74:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1db78:	e3a02e11 	mov	r2, #272	; 0x110
   1db7c:	e59f1048 	ldr	r1, [pc, #72]	; 1dbcc <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x104>
   1db80:	e59f0048 	ldr	r0, [pc, #72]	; 1dbd0 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x108>
   1db84:	eb001b21 	bl	24810 <assertion_failed>
   1db88:	e3a03000 	mov	r3, #0
   1db8c:	e5803044 	str	r3, [r0, #68]	; 0x44
   1db90:	e1a0000c 	mov	r0, ip
   1db94:	e12fff1e 	bx	lr
   1db98:	e1a0c00a 	mov	ip, sl
   1db9c:	eafffff2 	b	1db6c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xa4>
   1dba0:	e1a00009 	mov	r0, r9
   1dba4:	e1a01004 	mov	r1, r4
   1dba8:	eb000d02 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   1dbac:	e1d430b4 	ldrh	r3, [r4, #4]
   1dbb0:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1dbb4:	e1c230b0 	strh	r3, [r2]
   1dbb8:	eaffffe7 	b	1db5c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x94>
   1dbbc:	e3a02f4a 	mov	r2, #296	; 0x128
   1dbc0:	e59f1004 	ldr	r1, [pc, #4]	; 1dbcc <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x104>
   1dbc4:	e59f0008 	ldr	r0, [pc, #8]	; 1dbd4 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x10c>
   1dbc8:	eb001b10 	bl	24810 <assertion_failed>
   1dbcc:	00044140 	.word	0x00044140
   1dbd0:	00040c5c 	.word	0x00040c5c
   1dbd4:	00043ac4 	.word	0x00043ac4

0001dbd8 <CUDPConnection::Connect()>:
   1dbd8:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1dbdc:	e3530000 	cmp	r3, #0
   1dbe0:	0a000001 	beq	1dbec <CUDPConnection::Connect()+0x14>
   1dbe4:	e3a00000 	mov	r0, #0
   1dbe8:	e12fff1e 	bx	lr
   1dbec:	e92d4010 	push	{r4, lr}
   1dbf0:	e3a02049 	mov	r2, #73	; 0x49
   1dbf4:	e59f1004 	ldr	r1, [pc, #4]	; 1dc00 <CUDPConnection::Connect()+0x28>
   1dbf8:	e59f0004 	ldr	r0, [pc, #4]	; 1dc04 <CUDPConnection::Connect()+0x2c>
   1dbfc:	eb001b03 	bl	24810 <assertion_failed>
   1dc00:	00044140 	.word	0x00044140
   1dc04:	00044154 	.word	0x00044154

0001dc08 <CUDPConnection::~CUDPConnection()>:
   1dc08:	e5d02029 	ldrb	r2, [r0, #41]	; 0x29
   1dc0c:	e59f3040 	ldr	r3, [pc, #64]	; 1dc54 <CUDPConnection::~CUDPConnection()+0x4c>
   1dc10:	e3520000 	cmp	r2, #0
   1dc14:	e92d4010 	push	{r4, lr}
   1dc18:	e5803000 	str	r3, [r0]
   1dc1c:	1a000008 	bne	1dc44 <CUDPConnection::~CUDPConnection()+0x3c>
   1dc20:	e1a04000 	mov	r4, r0
   1dc24:	e2800038 	add	r0, r0, #56	; 0x38
   1dc28:	eb001a65 	bl	245c4 <CSynchronizationEvent::~CSynchronizationEvent()>
   1dc2c:	e284002c 	add	r0, r4, #44	; 0x2c
   1dc30:	eb000ddf 	bl	213b4 <CNetQueue::~CNetQueue()>
   1dc34:	e1a00004 	mov	r0, r4
   1dc38:	ebfffe2f 	bl	1d4fc <CNetConnection::~CNetConnection()>
   1dc3c:	e1a00004 	mov	r0, r4
   1dc40:	e8bd8010 	pop	{r4, pc}
   1dc44:	e3a02044 	mov	r2, #68	; 0x44
   1dc48:	e59f1008 	ldr	r1, [pc, #8]	; 1dc58 <CUDPConnection::~CUDPConnection()+0x50>
   1dc4c:	e59f0008 	ldr	r0, [pc, #8]	; 1dc5c <CUDPConnection::~CUDPConnection()+0x54>
   1dc50:	eb001aee 	bl	24810 <assertion_failed>
   1dc54:	00044104 	.word	0x00044104
   1dc58:	00044140 	.word	0x00044140
   1dc5c:	0004415c 	.word	0x0004415c

0001dc60 <CUDPConnection::~CUDPConnection()>:
   1dc60:	e92d4010 	push	{r4, lr}
   1dc64:	e1a04000 	mov	r4, r0
   1dc68:	ebffffe6 	bl	1dc08 <CUDPConnection::~CUDPConnection()>
   1dc6c:	e1a00004 	mov	r0, r4
   1dc70:	e3a01048 	mov	r1, #72	; 0x48
   1dc74:	eb003510 	bl	2b0bc <operator delete(void*, unsigned int)>
   1dc78:	e1a00004 	mov	r0, r4
   1dc7c:	e8bd8010 	pop	{r4, pc}

0001dc80 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1dc80:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dc84:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1dc88:	e35c0011 	cmp	ip, #17
   1dc8c:	0a000001 	beq	1dc98 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1dc90:	e3a00000 	mov	r0, #0
   1dc94:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dc98:	e3520008 	cmp	r2, #8
   1dc9c:	9a000055 	bls	1ddf8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x178>
   1dca0:	e5d1c002 	ldrb	ip, [r1, #2]
   1dca4:	e5d14003 	ldrb	r4, [r1, #3]
   1dca8:	e1d0e1b6 	ldrh	lr, [r0, #22]
   1dcac:	e18cc404 	orr	ip, ip, r4, lsl #8
   1dcb0:	e6bfcfbc 	rev16	ip, ip
   1dcb4:	e6ffc07c 	uxth	ip, ip
   1dcb8:	e15e000c 	cmp	lr, ip
   1dcbc:	1afffff3 	bne	1dc90 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1dcc0:	e1a06003 	mov	r6, r3
   1dcc4:	e5903004 	ldr	r3, [r0, #4]
   1dcc8:	e1a05002 	mov	r5, r2
   1dccc:	e3530000 	cmp	r3, #0
   1dcd0:	e1a04001 	mov	r4, r1
   1dcd4:	e1a08000 	mov	r8, r0
   1dcd8:	0a000054 	beq	1de30 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1b0>
   1dcdc:	e5d17000 	ldrb	r7, [r1]
   1dce0:	e5d12001 	ldrb	r2, [r1, #1]
   1dce4:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1dce8:	e1877402 	orr	r7, r7, r2, lsl #8
   1dcec:	e6bf7fb7 	rev16	r7, r7
   1dcf0:	e3530000 	cmp	r3, #0
   1dcf4:	e6ff3077 	uxth	r3, r7
   1dcf8:	0a000013 	beq	1dd4c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcc>
   1dcfc:	e1d021b4 	ldrh	r2, [r0, #20]
   1dd00:	e1520003 	cmp	r2, r3
   1dd04:	1affffe1 	bne	1dc90 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1dd08:	e280900c 	add	r9, r0, #12
   1dd0c:	e1a00009 	mov	r0, r9
   1dd10:	e1a01006 	mov	r1, r6
   1dd14:	eb000c4f 	bl	20e58 <CIPAddress::operator!=(CIPAddress const&) const>
   1dd18:	e3500000 	cmp	r0, #0
   1dd1c:	0a00000a 	beq	1dd4c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcc>
   1dd20:	e1a00009 	mov	r0, r9
   1dd24:	eb000d09 	bl	21150 <CIPAddress::IsBroadcast() const>
   1dd28:	e3500000 	cmp	r0, #0
   1dd2c:	1a000006 	bne	1dd4c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcc>
   1dd30:	e5980004 	ldr	r0, [r8, #4]
   1dd34:	eb000bc6 	bl	20c54 <CNetConfig::GetBroadcastAddress() const>
   1dd38:	e1a01000 	mov	r1, r0
   1dd3c:	e1a00009 	mov	r0, r9
   1dd40:	eb000c44 	bl	20e58 <CIPAddress::operator!=(CIPAddress const&) const>
   1dd44:	e3500000 	cmp	r0, #0
   1dd48:	1affffd0 	bne	1dc90 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1dd4c:	e5d43004 	ldrb	r3, [r4, #4]
   1dd50:	e5d42005 	ldrb	r2, [r4, #5]
   1dd54:	e1833402 	orr	r3, r3, r2, lsl #8
   1dd58:	e6bf3fb3 	rev16	r3, r3
   1dd5c:	e6ff3073 	uxth	r3, r3
   1dd60:	e1550003 	cmp	r5, r3
   1dd64:	3a000023 	bcc	1ddf8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x178>
   1dd68:	e5d43006 	ldrb	r3, [r4, #6]
   1dd6c:	e5d42007 	ldrb	r2, [r4, #7]
   1dd70:	e1933402 	orrs	r3, r3, r2, lsl #8
   1dd74:	1a000012 	bne	1ddc4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x144>
   1dd78:	e5d83040 	ldrb	r3, [r8, #64]	; 0x40
   1dd7c:	e3530000 	cmp	r3, #0
   1dd80:	0a00001e 	beq	1de00 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x180>
   1dd84:	e3a00006 	mov	r0, #6
   1dd88:	eb0034bd 	bl	2b084 <operator new(unsigned int)>
   1dd8c:	e1a09000 	mov	r9, r0
   1dd90:	e1a01000 	mov	r1, r0
   1dd94:	e1a00006 	mov	r0, r6
   1dd98:	eb000cc7 	bl	210bc <CIPAddress::CopyTo(unsigned char*) const>
   1dd9c:	e288002c 	add	r0, r8, #44	; 0x2c
   1dda0:	e1a03009 	mov	r3, r9
   1dda4:	e2452008 	sub	r2, r5, #8
   1dda8:	e2841008 	add	r1, r4, #8
   1ddac:	e1c970b4 	strh	r7, [r9, #4]
   1ddb0:	eb000d84 	bl	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1ddb4:	e2880038 	add	r0, r8, #56	; 0x38
   1ddb8:	eb001a11 	bl	24604 <CSynchronizationEvent::Set()>
   1ddbc:	e3a00001 	mov	r0, #1
   1ddc0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ddc4:	e288901c 	add	r9, r8, #28
   1ddc8:	e1a00009 	mov	r0, r9
   1ddcc:	e1a01006 	mov	r1, r6
   1ddd0:	eb000e26 	bl	21670 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1ddd4:	e59d1020 	ldr	r1, [sp, #32]
   1ddd8:	e1a00009 	mov	r0, r9
   1dddc:	eb000e27 	bl	21680 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1dde0:	e1a02005 	mov	r2, r5
   1dde4:	e1a01004 	mov	r1, r4
   1dde8:	e1a00009 	mov	r0, r9
   1ddec:	eb000e4f 	bl	21730 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1ddf0:	e3500000 	cmp	r0, #0
   1ddf4:	0affffdf 	beq	1dd78 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xf8>
   1ddf8:	e3e00000 	mvn	r0, #0
   1ddfc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1de00:	e59d0020 	ldr	r0, [sp, #32]
   1de04:	eb000cd1 	bl	21150 <CIPAddress::IsBroadcast() const>
   1de08:	e3500000 	cmp	r0, #0
   1de0c:	1affffea 	bne	1ddbc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x13c>
   1de10:	e5980004 	ldr	r0, [r8, #4]
   1de14:	eb000b8e 	bl	20c54 <CNetConfig::GetBroadcastAddress() const>
   1de18:	e1a01000 	mov	r1, r0
   1de1c:	e59d0020 	ldr	r0, [sp, #32]
   1de20:	eb000bf4 	bl	20df8 <CIPAddress::operator==(CIPAddress const&) const>
   1de24:	e3500000 	cmp	r0, #0
   1de28:	1affffe3 	bne	1ddbc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x13c>
   1de2c:	eaffffd4 	b	1dd84 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x104>
   1de30:	e59f2008 	ldr	r2, [pc, #8]	; 1de40 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c0>
   1de34:	e59f1008 	ldr	r1, [pc, #8]	; 1de44 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c4>
   1de38:	e59f0008 	ldr	r0, [pc, #8]	; 1de48 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c8>
   1de3c:	eb001a73 	bl	24810 <assertion_failed>
   1de40:	0000015e 	.word	0x0000015e
   1de44:	00044140 	.word	0x00044140
   1de48:	00043a48 	.word	0x00043a48

0001de4c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1de4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1de50:	e59d1020 	ldr	r1, [sp, #32]
   1de54:	e1dd71b8 	ldrh	r7, [sp, #24]
   1de58:	e3510011 	cmp	r1, #17
   1de5c:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1de60:	0a000001 	beq	1de6c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x20>
   1de64:	e3a00000 	mov	r0, #0
   1de68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1de6c:	e1d011b6 	ldrh	r1, [r0, #22]
   1de70:	e151000c 	cmp	r1, ip
   1de74:	1afffffa 	bne	1de64 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1de78:	e1a04000 	mov	r4, r0
   1de7c:	e5900004 	ldr	r0, [r0, #4]
   1de80:	e1a05003 	mov	r5, r3
   1de84:	e3500000 	cmp	r0, #0
   1de88:	e1a06002 	mov	r6, r2
   1de8c:	0a000016 	beq	1deec <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1de90:	eb000b65 	bl	20c2c <CNetConfig::GetIPAddress() const>
   1de94:	e1a01000 	mov	r1, r0
   1de98:	e1a00005 	mov	r0, r5
   1de9c:	eb000bed 	bl	20e58 <CIPAddress::operator!=(CIPAddress const&) const>
   1dea0:	e3500000 	cmp	r0, #0
   1dea4:	1affffee 	bne	1de64 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1dea8:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1deac:	e3530000 	cmp	r3, #0
   1deb0:	0a000007 	beq	1ded4 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x88>
   1deb4:	e1d431b4 	ldrh	r3, [r4, #20]
   1deb8:	e1530007 	cmp	r3, r7
   1debc:	1affffe8 	bne	1de64 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1dec0:	e1a01006 	mov	r1, r6
   1dec4:	e284000c 	add	r0, r4, #12
   1dec8:	eb000be2 	bl	20e58 <CIPAddress::operator!=(CIPAddress const&) const>
   1decc:	e3500000 	cmp	r0, #0
   1ded0:	1affffe3 	bne	1de64 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ded4:	e3e03000 	mvn	r3, #0
   1ded8:	e2840038 	add	r0, r4, #56	; 0x38
   1dedc:	e5843044 	str	r3, [r4, #68]	; 0x44
   1dee0:	eb0019c7 	bl	24604 <CSynchronizationEvent::Set()>
   1dee4:	e3a00001 	mov	r0, #1
   1dee8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1deec:	e59f2008 	ldr	r2, [pc, #8]	; 1defc <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb0>
   1def0:	e59f1008 	ldr	r1, [pc, #8]	; 1df00 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb4>
   1def4:	e59f0008 	ldr	r0, [pc, #8]	; 1df04 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb8>
   1def8:	eb001a44 	bl	24810 <assertion_failed>
   1defc:	000001a7 	.word	0x000001a7
   1df00:	00044140 	.word	0x00044140
   1df04:	00043a48 	.word	0x00043a48

0001df08 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1df08:	e92d4010 	push	{r4, lr}
   1df0c:	e3a04011 	mov	r4, #17
   1df10:	e24dd010 	sub	sp, sp, #16
   1df14:	e1dde1b8 	ldrh	lr, [sp, #24]
   1df18:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1df1c:	e58de000 	str	lr, [sp]
   1df20:	e58dc004 	str	ip, [sp, #4]
   1df24:	e58d4008 	str	r4, [sp, #8]
   1df28:	e1a04000 	mov	r4, r0
   1df2c:	ebfffd20 	bl	1d3b4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1df30:	e3a03001 	mov	r3, #1
   1df34:	e59f2034 	ldr	r2, [pc, #52]	; 1df70 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x68>
   1df38:	e5c43029 	strb	r3, [r4, #41]	; 0x29
   1df3c:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1df40:	e5842000 	str	r2, [r4]
   1df44:	e284002c 	add	r0, r4, #44	; 0x2c
   1df48:	eb000cdf 	bl	212cc <CNetQueue::CNetQueue()>
   1df4c:	e2840038 	add	r0, r4, #56	; 0x38
   1df50:	e3a01000 	mov	r1, #0
   1df54:	eb001996 	bl	245b4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1df58:	e3a03000 	mov	r3, #0
   1df5c:	e1a00004 	mov	r0, r4
   1df60:	e5c43040 	strb	r3, [r4, #64]	; 0x40
   1df64:	e5843044 	str	r3, [r4, #68]	; 0x44
   1df68:	e28dd010 	add	sp, sp, #16
   1df6c:	e8bd8010 	pop	{r4, pc}
   1df70:	00044104 	.word	0x00044104

0001df74 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1df74:	e3a0c011 	mov	ip, #17
   1df78:	e92d4030 	push	{r4, r5, lr}
   1df7c:	e24dd00c 	sub	sp, sp, #12
   1df80:	e58dc000 	str	ip, [sp]
   1df84:	e1a04000 	mov	r4, r0
   1df88:	e3a05000 	mov	r5, #0
   1df8c:	ebfffd34 	bl	1d464 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1df90:	e3a02001 	mov	r2, #1
   1df94:	e59f3030 	ldr	r3, [pc, #48]	; 1dfcc <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0x58>
   1df98:	e5c42029 	strb	r2, [r4, #41]	; 0x29
   1df9c:	e5843000 	str	r3, [r4]
   1dfa0:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1dfa4:	e284002c 	add	r0, r4, #44	; 0x2c
   1dfa8:	eb000cc7 	bl	212cc <CNetQueue::CNetQueue()>
   1dfac:	e1a01005 	mov	r1, r5
   1dfb0:	e2840038 	add	r0, r4, #56	; 0x38
   1dfb4:	eb00197e 	bl	245b4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1dfb8:	e1a00004 	mov	r0, r4
   1dfbc:	e5c45040 	strb	r5, [r4, #64]	; 0x40
   1dfc0:	e5845044 	str	r5, [r4, #68]	; 0x44
   1dfc4:	e28dd00c 	add	sp, sp, #12
   1dfc8:	e8bd8030 	pop	{r4, r5, pc}
   1dfcc:	00044104 	.word	0x00044104

0001dfd0 <CTCPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1dfd0:	e590c000 	ldr	ip, [r0]
   1dfd4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1dfd8:	e59ce014 	ldr	lr, [ip, #20]
   1dfdc:	e1a0c00e 	mov	ip, lr
   1dfe0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1dfe4:	e12fff1c 	bx	ip

0001dfe8 <CTCPConnection::SetOptionBroadcast(bool)>:
   1dfe8:	e3a00000 	mov	r0, #0
   1dfec:	e12fff1e 	bx	lr

0001dff0 <CTCPConnection::IsConnected() const>:
   1dff0:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1dff4:	e3530002 	cmp	r3, #2
   1dff8:	da000003 	ble	1e00c <CTCPConnection::IsConnected() const+0x1c>
   1dffc:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1e000:	e250000a 	subs	r0, r0, #10
   1e004:	13a00001 	movne	r0, #1
   1e008:	e12fff1e 	bx	lr
   1e00c:	e3a00000 	mov	r0, #0
   1e010:	e12fff1e 	bx	lr

0001e014 <CTCPConnection::IsTerminated() const>:
   1e014:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1e018:	e16f0f10 	clz	r0, r0
   1e01c:	e1a002a0 	lsr	r0, r0, #5
   1e020:	e12fff1e 	bx	lr

0001e024 <CTCPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1e024:	e590c000 	ldr	ip, [r0]
   1e028:	e92d4070 	push	{r4, r5, r6, lr}
   1e02c:	e1a05003 	mov	r5, r3
   1e030:	e59c3018 	ldr	r3, [ip, #24]
   1e034:	e1a06000 	mov	r6, r0
   1e038:	e59d4010 	ldr	r4, [sp, #16]
   1e03c:	e12fff33 	blx	r3
   1e040:	e3500000 	cmp	r0, #0
   1e044:	d8bd8070 	pople	{r4, r5, r6, pc}
   1e048:	e3550000 	cmp	r5, #0
   1e04c:	13540000 	cmpne	r4, #0
   1e050:	13a00001 	movne	r0, #1
   1e054:	03a00000 	moveq	r0, #0
   1e058:	08bd8070 	popeq	{r4, r5, r6, pc}
   1e05c:	e1a00005 	mov	r0, r5
   1e060:	e286100c 	add	r1, r6, #12
   1e064:	eb000be8 	bl	2100c <CIPAddress::Set(CIPAddress const&)>
   1e068:	e1d631b4 	ldrh	r3, [r6, #20]
   1e06c:	e3a00000 	mov	r0, #0
   1e070:	e1c430b0 	strh	r3, [r4]
   1e074:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e078 <CTCPConnection::Send(void const*, unsigned int, int)>:
   1e078:	e3d3c040 	bics	ip, r3, #64	; 0x40
   1e07c:	1a000040 	bne	1e184 <CTCPConnection::Send(void const*, unsigned int, int)+0x10c>
   1e080:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e084:	e1a04001 	mov	r4, r1
   1e088:	e590102c 	ldr	r1, [r0, #44]	; 0x2c
   1e08c:	e3510000 	cmp	r1, #0
   1e090:	ba000030 	blt	1e158 <CTCPConnection::Send(void const*, unsigned int, int)+0xe0>
   1e094:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1e098:	e6ef1071 	uxtb	r1, r1
   1e09c:	e351000a 	cmp	r1, #10
   1e0a0:	9a00001c 	bls	1e118 <CTCPConnection::Send(void const*, unsigned int, int)+0xa0>
   1e0a4:	e3540000 	cmp	r4, #0
   1e0a8:	e1a08002 	mov	r8, r2
   1e0ac:	e1a09000 	mov	r9, r0
   1e0b0:	e1a0a003 	mov	sl, r3
   1e0b4:	0a000029 	beq	1e160 <CTCPConnection::Send(void const*, unsigned int, int)+0xe8>
   1e0b8:	e3520d19 	cmp	r2, #1600	; 0x640
   1e0bc:	9a00002b 	bls	1e170 <CTCPConnection::Send(void const*, unsigned int, int)+0xf8>
   1e0c0:	e1a05002 	mov	r5, r2
   1e0c4:	e3a0b000 	mov	fp, #0
   1e0c8:	e3a07d19 	mov	r7, #1600	; 0x640
   1e0cc:	e2806030 	add	r6, r0, #48	; 0x30
   1e0d0:	e1a01004 	mov	r1, r4
   1e0d4:	e2455d19 	sub	r5, r5, #1600	; 0x640
   1e0d8:	e1a0300b 	mov	r3, fp
   1e0dc:	e1a02007 	mov	r2, r7
   1e0e0:	e1a00006 	mov	r0, r6
   1e0e4:	eb000cb7 	bl	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e0e8:	e3550d19 	cmp	r5, #1600	; 0x640
   1e0ec:	e2844d19 	add	r4, r4, #1600	; 0x640
   1e0f0:	8afffff6 	bhi	1e0d0 <CTCPConnection::Send(void const*, unsigned int, int)+0x58>
   1e0f4:	e1a02005 	mov	r2, r5
   1e0f8:	e1a01004 	mov	r1, r4
   1e0fc:	e1a00006 	mov	r0, r6
   1e100:	e3a03000 	mov	r3, #0
   1e104:	eb000caf 	bl	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e108:	e31a0040 	tst	sl, #64	; 0x40
   1e10c:	0a000007 	beq	1e130 <CTCPConnection::Send(void const*, unsigned int, int)+0xb8>
   1e110:	e1a00008 	mov	r0, r8
   1e114:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e118:	e3a0e001 	mov	lr, #1
   1e11c:	e59fc068 	ldr	ip, [pc, #104]	; 1e18c <CTCPConnection::Send(void const*, unsigned int, int)+0x114>
   1e120:	e01c111e 	ands	r1, ip, lr, lsl r1
   1e124:	0affffde 	beq	1e0a4 <CTCPConnection::Send(void const*, unsigned int, int)+0x2c>
   1e128:	e3e00000 	mvn	r0, #0
   1e12c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e130:	e2894070 	add	r4, r9, #112	; 0x70
   1e134:	e1a00004 	mov	r0, r4
   1e138:	eb00192e 	bl	245f8 <CSynchronizationEvent::Clear()>
   1e13c:	e1a00004 	mov	r0, r4
   1e140:	eb00193d 	bl	2463c <CSynchronizationEvent::Wait()>
   1e144:	e599302c 	ldr	r3, [r9, #44]	; 0x2c
   1e148:	e3530000 	cmp	r3, #0
   1e14c:	aaffffef 	bge	1e110 <CTCPConnection::Send(void const*, unsigned int, int)+0x98>
   1e150:	e599002c 	ldr	r0, [r9, #44]	; 0x2c
   1e154:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e158:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e15c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e160:	e3a02d06 	mov	r2, #384	; 0x180
   1e164:	e59f1024 	ldr	r1, [pc, #36]	; 1e190 <CTCPConnection::Send(void const*, unsigned int, int)+0x118>
   1e168:	e59f0024 	ldr	r0, [pc, #36]	; 1e194 <CTCPConnection::Send(void const*, unsigned int, int)+0x11c>
   1e16c:	eb0019a7 	bl	24810 <assertion_failed>
   1e170:	e3520000 	cmp	r2, #0
   1e174:	0affffe3 	beq	1e108 <CTCPConnection::Send(void const*, unsigned int, int)+0x90>
   1e178:	e1a05002 	mov	r5, r2
   1e17c:	e2806030 	add	r6, r0, #48	; 0x30
   1e180:	eaffffdb 	b	1e0f4 <CTCPConnection::Send(void const*, unsigned int, int)+0x7c>
   1e184:	e3e00000 	mvn	r0, #0
   1e188:	e12fff1e 	bx	lr
   1e18c:	00000763 	.word	0x00000763
   1e190:	000441dc 	.word	0x000441dc
   1e194:	00043ac4 	.word	0x00043ac4

0001e198 <CTCPConnection::Receive(void*, int)>:
   1e198:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e19c:	e3d23040 	bics	r3, r2, #64	; 0x40
   1e1a0:	e24dd00c 	sub	sp, sp, #12
   1e1a4:	e58d3004 	str	r3, [sp, #4]
   1e1a8:	1a00002e 	bne	1e268 <CTCPConnection::Receive(void*, int)+0xd0>
   1e1ac:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e1b0:	e3530000 	cmp	r3, #0
   1e1b4:	ba000026 	blt	1e254 <CTCPConnection::Receive(void*, int)+0xbc>
   1e1b8:	e1a07001 	mov	r7, r1
   1e1bc:	e1a04000 	mov	r4, r0
   1e1c0:	e59d9004 	ldr	r9, [sp, #4]
   1e1c4:	e3a0b001 	mov	fp, #1
   1e1c8:	e59fa0ac 	ldr	sl, [pc, #172]	; 1e27c <CTCPConnection::Receive(void*, int)+0xe4>
   1e1cc:	e2026040 	and	r6, r2, #64	; 0x40
   1e1d0:	e280803c 	add	r8, r0, #60	; 0x3c
   1e1d4:	e2805068 	add	r5, r0, #104	; 0x68
   1e1d8:	ea00000e 	b	1e218 <CTCPConnection::Receive(void*, int)+0x80>
   1e1dc:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1e1e0:	e6ef3073 	uxtb	r3, r3
   1e1e4:	e353000a 	cmp	r3, #10
   1e1e8:	8a000001 	bhi	1e1f4 <CTCPConnection::Receive(void*, int)+0x5c>
   1e1ec:	e01a331b 	ands	r3, sl, fp, lsl r3
   1e1f0:	1a00001c 	bne	1e268 <CTCPConnection::Receive(void*, int)+0xd0>
   1e1f4:	e3560000 	cmp	r6, #0
   1e1f8:	1a00000d 	bne	1e234 <CTCPConnection::Receive(void*, int)+0x9c>
   1e1fc:	e1a00005 	mov	r0, r5
   1e200:	eb0018fc 	bl	245f8 <CSynchronizationEvent::Clear()>
   1e204:	e1a00005 	mov	r0, r5
   1e208:	eb00190b 	bl	2463c <CSynchronizationEvent::Wait()>
   1e20c:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e210:	e3530000 	cmp	r3, #0
   1e214:	ba000009 	blt	1e240 <CTCPConnection::Receive(void*, int)+0xa8>
   1e218:	e1a02009 	mov	r2, r9
   1e21c:	e1a01007 	mov	r1, r7
   1e220:	e1a00008 	mov	r0, r8
   1e224:	eb000cad 	bl	214e0 <CNetQueue::Dequeue(void*, void**)>
   1e228:	e3500000 	cmp	r0, #0
   1e22c:	0affffea 	beq	1e1dc <CTCPConnection::Receive(void*, int)+0x44>
   1e230:	e58d0004 	str	r0, [sp, #4]
   1e234:	e59d0004 	ldr	r0, [sp, #4]
   1e238:	e28dd00c 	add	sp, sp, #12
   1e23c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e240:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e244:	e58d3004 	str	r3, [sp, #4]
   1e248:	e59d0004 	ldr	r0, [sp, #4]
   1e24c:	e28dd00c 	add	sp, sp, #12
   1e250:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e254:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e258:	e58d3004 	str	r3, [sp, #4]
   1e25c:	e59d0004 	ldr	r0, [sp, #4]
   1e260:	e28dd00c 	add	sp, sp, #12
   1e264:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e268:	e3e03000 	mvn	r3, #0
   1e26c:	e58d3004 	str	r3, [sp, #4]
   1e270:	e59d0004 	ldr	r0, [sp, #4]
   1e274:	e28dd00c 	add	sp, sp, #12
   1e278:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e27c:	000007e3 	.word	0x000007e3

0001e280 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1e280:	e3a0c006 	mov	ip, #6
   1e284:	e92d4070 	push	{r4, r5, r6, lr}
   1e288:	e1a04000 	mov	r4, r0
   1e28c:	e3a05000 	mov	r5, #0
   1e290:	e3a06001 	mov	r6, #1
   1e294:	e24dd008 	sub	sp, sp, #8
   1e298:	e58dc000 	str	ip, [sp]
   1e29c:	ebfffc70 	bl	1d464 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1e2a0:	e59f30b0 	ldr	r3, [pc, #176]	; 1e358 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xd8>
   1e2a4:	e5c4602a 	strb	r6, [r4, #42]	; 0x2a
   1e2a8:	e5843000 	str	r3, [r4]
   1e2ac:	e5c45029 	strb	r5, [r4, #41]	; 0x29
   1e2b0:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1e2b4:	e2840030 	add	r0, r4, #48	; 0x30
   1e2b8:	eb000c03 	bl	212cc <CNetQueue::CNetQueue()>
   1e2bc:	e284003c 	add	r0, r4, #60	; 0x3c
   1e2c0:	eb000c01 	bl	212cc <CNetQueue::CNetQueue()>
   1e2c4:	e2840048 	add	r0, r4, #72	; 0x48
   1e2c8:	e3a01801 	mov	r1, #65536	; 0x10000
   1e2cc:	eb0007c0 	bl	201d4 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1e2d0:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1e2d4:	e1a01005 	mov	r1, r5
   1e2d8:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1e2dc:	e2840068 	add	r0, r4, #104	; 0x68
   1e2e0:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1e2e4:	e5845060 	str	r5, [r4, #96]	; 0x60
   1e2e8:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1e2ec:	eb0018b0 	bl	245b4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e2f0:	e1a01005 	mov	r1, r5
   1e2f4:	e2840070 	add	r0, r4, #112	; 0x70
   1e2f8:	eb0018ad 	bl	245b4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e2fc:	eb002f03 	bl	29f10 <CTimer::Get()>
   1e300:	e3a02f86 	mov	r2, #536	; 0x218
   1e304:	e59f3050 	ldr	r3, [pc, #80]	; 1e35c <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xdc>
   1e308:	e5840078 	str	r0, [r4, #120]	; 0x78
   1e30c:	e1c42bb4 	strh	r2, [r4, #180]	; 0xb4
   1e310:	e5843094 	str	r3, [r4, #148]	; 0x94
   1e314:	e58430ac 	str	r3, [r4, #172]	; 0xac
   1e318:	e5846088 	str	r6, [r4, #136]	; 0x88
   1e31c:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   1e320:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1e324:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   1e328:	e28400b8 	add	r0, r4, #184	; 0xb8
   1e32c:	eb000893 	bl	20580 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1e330:	e1a00004 	mov	r0, r4
   1e334:	e59f2024 	ldr	r2, [pc, #36]	; 1e360 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xe0>
   1e338:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1e33c:	e5923000 	ldr	r3, [r2]
   1e340:	e5845080 	str	r5, [r4, #128]	; 0x80
   1e344:	e0833006 	add	r3, r3, r6
   1e348:	e5845084 	str	r5, [r4, #132]	; 0x84
   1e34c:	e5823000 	str	r3, [r2]
   1e350:	e28dd008 	add	sp, sp, #8
   1e354:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e358:	00044170 	.word	0x00044170
   1e35c:	00003908 	.word	0x00003908
   1e360:	0004e204 	.word	0x0004e204

0001e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>:
   1e364:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e368:	e2017c02 	and	r7, r1, #512	; 0x200
   1e36c:	e3570000 	cmp	r7, #0
   1e370:	13a0e018 	movne	lr, #24
   1e374:	03a0e014 	moveq	lr, #20
   1e378:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1e37c:	e24dd008 	sub	sp, sp, #8
   1e380:	e59dc664 	ldr	ip, [sp, #1636]	; 0x664
   1e384:	13a05006 	movne	r5, #6
   1e388:	03a05005 	moveq	r5, #5
   1e38c:	e09c600e 	adds	r6, ip, lr
   1e390:	2a00003f 	bcs	1e494 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x130>
   1e394:	e1d081b6 	ldrh	r8, [r0, #22]
   1e398:	e1a04000 	mov	r4, r0
   1e39c:	e1d001b4 	ldrh	r0, [r0, #20]
   1e3a0:	e6bf2f32 	rev	r2, r2
   1e3a4:	e6bf8fb8 	rev16	r8, r8
   1e3a8:	e6bf0fb0 	rev16	r0, r0
   1e3ac:	e58d200c 	str	r2, [sp, #12]
   1e3b0:	e2112a01 	ands	r2, r1, #4096	; 0x1000
   1e3b4:	e1cd80b8 	strh	r8, [sp, #8]
   1e3b8:	e1cd00ba 	strh	r0, [sp, #10]
   1e3bc:	01a03002 	moveq	r3, r2
   1e3c0:	1a000031 	bne	1e48c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x128>
   1e3c4:	e59400ac 	ldr	r0, [r4, #172]	; 0xac
   1e3c8:	e1d429b8 	ldrh	r2, [r4, #152]	; 0x98
   1e3cc:	e1811205 	orr	r1, r1, r5, lsl #4
   1e3d0:	e6bf0fb0 	rev16	r0, r0
   1e3d4:	e6bf2fb2 	rev16	r2, r2
   1e3d8:	e3570000 	cmp	r7, #0
   1e3dc:	e1cd11b4 	strh	r1, [sp, #20]
   1e3e0:	e58d3010 	str	r3, [sp, #16]
   1e3e4:	e1cd01b6 	strh	r0, [sp, #22]
   1e3e8:	e1cd21ba 	strh	r2, [sp, #26]
   1e3ec:	1a00001d 	bne	1e468 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x104>
   1e3f0:	e35c0000 	cmp	ip, #0
   1e3f4:	0a000007 	beq	1e418 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xb4>
   1e3f8:	e59d3660 	ldr	r3, [sp, #1632]	; 0x660
   1e3fc:	e3530000 	cmp	r3, #0
   1e400:	0a00002b 	beq	1e4b4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x150>
   1e404:	e28d3008 	add	r3, sp, #8
   1e408:	e1a0200c 	mov	r2, ip
   1e40c:	e083000e 	add	r0, r3, lr
   1e410:	e59d1660 	ldr	r1, [sp, #1632]	; 0x660
   1e414:	eb003141 	bl	2a920 <memcpy>
   1e418:	e3a03000 	mov	r3, #0
   1e41c:	e1a02006 	mov	r2, r6
   1e420:	e28d1008 	add	r1, sp, #8
   1e424:	e284001c 	add	r0, r4, #28
   1e428:	e1cd31b8 	strh	r3, [sp, #24]
   1e42c:	eb000cbf 	bl	21730 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1e430:	e594c008 	ldr	ip, [r4, #8]
   1e434:	e1cd01b8 	strh	r0, [sp, #24]
   1e438:	e35c0000 	cmp	ip, #0
   1e43c:	0a000018 	beq	1e4a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x140>
   1e440:	e3a0e006 	mov	lr, #6
   1e444:	e1a03006 	mov	r3, r6
   1e448:	e28d2008 	add	r2, sp, #8
   1e44c:	e284100c 	add	r1, r4, #12
   1e450:	e1a0000c 	mov	r0, ip
   1e454:	e58de000 	str	lr, [sp]
   1e458:	ebfff222 	bl	1ace8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1e45c:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1e460:	e28dd008 	add	sp, sp, #8
   1e464:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e468:	e3a00002 	mov	r0, #2
   1e46c:	e3a01004 	mov	r1, #4
   1e470:	e3a02005 	mov	r2, #5
   1e474:	e3e0304b 	mvn	r3, #75	; 0x4b
   1e478:	e5cd001c 	strb	r0, [sp, #28]
   1e47c:	e5cd101d 	strb	r1, [sp, #29]
   1e480:	e5cd201e 	strb	r2, [sp, #30]
   1e484:	e5cd301f 	strb	r3, [sp, #31]
   1e488:	eaffffd8 	b	1e3f0 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x8c>
   1e48c:	e6bf3f33 	rev	r3, r3
   1e490:	eaffffcb 	b	1e3c4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x60>
   1e494:	e59f2028 	ldr	r2, [pc, #40]	; 1e4c4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x160>
   1e498:	e59f1028 	ldr	r1, [pc, #40]	; 1e4c8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x164>
   1e49c:	e59f0028 	ldr	r0, [pc, #40]	; 1e4cc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x168>
   1e4a0:	eb0018da 	bl	24810 <assertion_failed>
   1e4a4:	e59f2024 	ldr	r2, [pc, #36]	; 1e4d0 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x16c>
   1e4a8:	e59f1018 	ldr	r1, [pc, #24]	; 1e4c8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x164>
   1e4ac:	e59f0020 	ldr	r0, [pc, #32]	; 1e4d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x170>
   1e4b0:	eb0018d6 	bl	24810 <assertion_failed>
   1e4b4:	e59f201c 	ldr	r2, [pc, #28]	; 1e4d8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x174>
   1e4b8:	e59f1008 	ldr	r1, [pc, #8]	; 1e4c8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x164>
   1e4bc:	e59f0018 	ldr	r0, [pc, #24]	; 1e4dc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x178>
   1e4c0:	eb0018d2 	bl	24810 <assertion_failed>
   1e4c4:	00000557 	.word	0x00000557
   1e4c8:	000441dc 	.word	0x000441dc
   1e4cc:	000441f0 	.word	0x000441f0
   1e4d0:	00000587 	.word	0x00000587
   1e4d4:	00043a5c 	.word	0x00043a5c
   1e4d8:	00000571 	.word	0x00000571
   1e4dc:	00043ac4 	.word	0x00043ac4

0001e4e0 <CTCPConnection::ScanOptions(TTCPHeader*)>:
   1e4e0:	e3510000 	cmp	r1, #0
   1e4e4:	e92d4010 	push	{r4, lr}
   1e4e8:	0a000021 	beq	1e574 <CTCPConnection::ScanOptions(TTCPHeader*)+0x94>
   1e4ec:	e5d1300c 	ldrb	r3, [r1, #12]
   1e4f0:	e59fe08c 	ldr	lr, [pc, #140]	; 1e584 <CTCPConnection::ScanOptions(TTCPHeader*)+0xa4>
   1e4f4:	e1a03223 	lsr	r3, r3, #4
   1e4f8:	e0813103 	add	r3, r1, r3, lsl #2
   1e4fc:	e2811014 	add	r1, r1, #20
   1e500:	e2812002 	add	r2, r1, #2
   1e504:	e1530002 	cmp	r3, r2
   1e508:	38bd8010 	popcc	{r4, pc}
   1e50c:	e5d12000 	ldrb	r2, [r1]
   1e510:	e3520001 	cmp	r2, #1
   1e514:	0a000007 	beq	1e538 <CTCPConnection::ScanOptions(TTCPHeader*)+0x58>
   1e518:	38bd8010 	popcc	{r4, pc}
   1e51c:	e3520002 	cmp	r2, #2
   1e520:	e5d12001 	ldrb	r2, [r1, #1]
   1e524:	1a000001 	bne	1e530 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1e528:	e3520004 	cmp	r2, #4
   1e52c:	0a000003 	beq	1e540 <CTCPConnection::ScanOptions(TTCPHeader*)+0x60>
   1e530:	e0811002 	add	r1, r1, r2
   1e534:	eafffff1 	b	1e500 <CTCPConnection::ScanOptions(TTCPHeader*)+0x20>
   1e538:	e2811001 	add	r1, r1, #1
   1e53c:	eaffffef 	b	1e500 <CTCPConnection::ScanOptions(TTCPHeader*)+0x20>
   1e540:	e281c004 	add	ip, r1, #4
   1e544:	e153000c 	cmp	r3, ip
   1e548:	3afffff8 	bcc	1e530 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1e54c:	e5d14002 	ldrb	r4, [r1, #2]
   1e550:	e5d1c003 	ldrb	ip, [r1, #3]
   1e554:	e18cc404 	orr	ip, ip, r4, lsl #8
   1e558:	e28cc014 	add	ip, ip, #20
   1e55c:	e15c000e 	cmp	ip, lr
   1e560:	21a0c00e 	movcs	ip, lr
   1e564:	e24cc014 	sub	ip, ip, #20
   1e568:	e35c0009 	cmp	ip, #9
   1e56c:	81c0cbb4 	strhhi	ip, [r0, #180]	; 0xb4
   1e570:	eaffffee 	b	1e530 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1e574:	e59f200c 	ldr	r2, [pc, #12]	; 1e588 <CTCPConnection::ScanOptions(TTCPHeader*)+0xa8>
   1e578:	e59f100c 	ldr	r1, [pc, #12]	; 1e58c <CTCPConnection::ScanOptions(TTCPHeader*)+0xac>
   1e57c:	e59f000c 	ldr	r0, [pc, #12]	; 1e590 <CTCPConnection::ScanOptions(TTCPHeader*)+0xb0>
   1e580:	eb0018a2 	bl	24810 <assertion_failed>
   1e584:	000005c8 	.word	0x000005c8
   1e588:	0000058d 	.word	0x0000058d
   1e58c:	000441dc 	.word	0x000441dc
   1e590:	00044210 	.word	0x00044210

0001e594 <CTCPConnection::CalculateISN()>:
   1e594:	e92d4070 	push	{r4, r5, r6, lr}
   1e598:	e1a05000 	mov	r5, r0
   1e59c:	e5900078 	ldr	r0, [r0, #120]	; 0x78
   1e5a0:	e3500000 	cmp	r0, #0
   1e5a4:	0a00000d 	beq	1e5e0 <CTCPConnection::CalculateISN()+0x4c>
   1e5a8:	eb002ba6 	bl	29448 <CTimer::GetTime() const>
   1e5ac:	e1a04000 	mov	r4, r0
   1e5b0:	e5950078 	ldr	r0, [r5, #120]	; 0x78
   1e5b4:	eb002b9f 	bl	29438 <CTimer::GetTicks() const>
   1e5b8:	e3a02064 	mov	r2, #100	; 0x64
   1e5bc:	e59f302c 	ldr	r3, [pc, #44]	; 1e5f0 <CTCPConnection::CalculateISN()+0x5c>
   1e5c0:	e0831093 	umull	r1, r3, r3, r0
   1e5c4:	e1a032a3 	lsr	r3, r3, #5
   1e5c8:	e0030392 	mul	r3, r2, r3
   1e5cc:	e0400003 	sub	r0, r0, r3
   1e5d0:	e0200492 	mla	r0, r2, r4, r0
   1e5d4:	e0800080 	add	r0, r0, r0, lsl #1
   1e5d8:	e0600180 	rsb	r0, r0, r0, lsl #3
   1e5dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e5e0:	e59f200c 	ldr	r2, [pc, #12]	; 1e5f4 <CTCPConnection::CalculateISN()+0x60>
   1e5e4:	e59f100c 	ldr	r1, [pc, #12]	; 1e5f8 <CTCPConnection::CalculateISN()+0x64>
   1e5e8:	e59f000c 	ldr	r0, [pc, #12]	; 1e5fc <CTCPConnection::CalculateISN()+0x68>
   1e5ec:	eb001887 	bl	24810 <assertion_failed>
   1e5f0:	51eb851f 	.word	0x51eb851f
   1e5f4:	000005b6 	.word	0x000005b6
   1e5f8:	000441dc 	.word	0x000441dc
   1e5fc:	0003f280 	.word	0x0003f280

0001e600 <CTCPConnection::StopTimer(unsigned int)>:
   1e600:	e3510002 	cmp	r1, #2
   1e604:	e92d4070 	push	{r4, r5, r6, lr}
   1e608:	8a00001c 	bhi	1e680 <CTCPConnection::StopTimer(unsigned int)+0x80>
   1e60c:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1e610:	e1a05000 	mov	r5, r0
   1e614:	e3530000 	cmp	r3, #0
   1e618:	0a00001c 	beq	1e690 <CTCPConnection::StopTimer(unsigned int)+0x90>
   1e61c:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   1e620:	e281401e 	add	r4, r1, #30
   1e624:	e3500000 	cmp	r0, #0
   1e628:	1a000004 	bne	1e640 <CTCPConnection::StopTimer(unsigned int)+0x40>
   1e62c:	e0852104 	add	r2, r5, r4, lsl #2
   1e630:	e5921004 	ldr	r1, [r2, #4]
   1e634:	e3510000 	cmp	r1, #0
   1e638:	1a000006 	bne	1e658 <CTCPConnection::StopTimer(unsigned int)+0x58>
   1e63c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e640:	eb0035c1 	bl	2bd4c <EnterCritical>
   1e644:	e0853104 	add	r3, r5, r4, lsl #2
   1e648:	e5931004 	ldr	r1, [r3, #4]
   1e64c:	e3510000 	cmp	r1, #0
   1e650:	0a000005 	beq	1e66c <CTCPConnection::StopTimer(unsigned int)+0x6c>
   1e654:	e5953078 	ldr	r3, [r5, #120]	; 0x78
   1e658:	e1a00003 	mov	r0, r3
   1e65c:	eb002cba 	bl	2994c <CTimer::CancelKernelTimer(unsigned int)>
   1e660:	e3a03000 	mov	r3, #0
   1e664:	e0851104 	add	r1, r5, r4, lsl #2
   1e668:	e5813004 	str	r3, [r1, #4]
   1e66c:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1e670:	e3530000 	cmp	r3, #0
   1e674:	08bd8070 	popeq	{r4, r5, r6, pc}
   1e678:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e67c:	ea0035dd 	b	2bdf8 <LeaveCritical>
   1e680:	e59f2018 	ldr	r2, [pc, #24]	; 1e6a0 <CTCPConnection::StopTimer(unsigned int)+0xa0>
   1e684:	e59f1018 	ldr	r1, [pc, #24]	; 1e6a4 <CTCPConnection::StopTimer(unsigned int)+0xa4>
   1e688:	e59f0018 	ldr	r0, [pc, #24]	; 1e6a8 <CTCPConnection::StopTimer(unsigned int)+0xa8>
   1e68c:	eb00185f 	bl	24810 <assertion_failed>
   1e690:	e59f2014 	ldr	r2, [pc, #20]	; 1e6ac <CTCPConnection::StopTimer(unsigned int)+0xac>
   1e694:	e59f1008 	ldr	r1, [pc, #8]	; 1e6a4 <CTCPConnection::StopTimer(unsigned int)+0xa4>
   1e698:	e59f0010 	ldr	r0, [pc, #16]	; 1e6b0 <CTCPConnection::StopTimer(unsigned int)+0xb0>
   1e69c:	eb00185b 	bl	24810 <assertion_failed>
   1e6a0:	000005c9 	.word	0x000005c9
   1e6a4:	000441dc 	.word	0x000441dc
   1e6a8:	00044220 	.word	0x00044220
   1e6ac:	000005ca 	.word	0x000005ca
   1e6b0:	0003f280 	.word	0x0003f280

0001e6b4 <CTCPConnection::~CTCPConnection()>:
   1e6b4:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1e6b8:	e59f30bc 	ldr	r3, [pc, #188]	; 1e77c <CTCPConnection::~CTCPConnection()+0xc8>
   1e6bc:	e21110ff 	ands	r1, r1, #255	; 0xff
   1e6c0:	e92d4070 	push	{r4, r5, r6, lr}
   1e6c4:	e5803000 	str	r3, [r0]
   1e6c8:	1a000023 	bne	1e75c <CTCPConnection::~CTCPConnection()+0xa8>
   1e6cc:	e1a04000 	mov	r4, r0
   1e6d0:	ebffffca 	bl	1e600 <CTCPConnection::StopTimer(unsigned int)>
   1e6d4:	e3a01001 	mov	r1, #1
   1e6d8:	e1a00004 	mov	r0, r4
   1e6dc:	ebffffc7 	bl	1e600 <CTCPConnection::StopTimer(unsigned int)>
   1e6e0:	e2845068 	add	r5, r4, #104	; 0x68
   1e6e4:	e3a01002 	mov	r1, #2
   1e6e8:	e1a00004 	mov	r0, r4
   1e6ec:	ebffffc3 	bl	1e600 <CTCPConnection::StopTimer(unsigned int)>
   1e6f0:	e2846070 	add	r6, r4, #112	; 0x70
   1e6f4:	e1a00005 	mov	r0, r5
   1e6f8:	eb0017c1 	bl	24604 <CSynchronizationEvent::Set()>
   1e6fc:	e1a00006 	mov	r0, r6
   1e700:	eb0017bf 	bl	24604 <CSynchronizationEvent::Set()>
   1e704:	e59f2074 	ldr	r2, [pc, #116]	; 1e780 <CTCPConnection::~CTCPConnection()+0xcc>
   1e708:	e5923000 	ldr	r3, [r2]
   1e70c:	e3530000 	cmp	r3, #0
   1e710:	0a000015 	beq	1e76c <CTCPConnection::~CTCPConnection()+0xb8>
   1e714:	e2433001 	sub	r3, r3, #1
   1e718:	e28400b8 	add	r0, r4, #184	; 0xb8
   1e71c:	e5823000 	str	r3, [r2]
   1e720:	eb0007ad 	bl	205dc <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>
   1e724:	e1a00006 	mov	r0, r6
   1e728:	eb0017a5 	bl	245c4 <CSynchronizationEvent::~CSynchronizationEvent()>
   1e72c:	e1a00005 	mov	r0, r5
   1e730:	eb0017a3 	bl	245c4 <CSynchronizationEvent::~CSynchronizationEvent()>
   1e734:	e2840048 	add	r0, r4, #72	; 0x48
   1e738:	eb0006b9 	bl	20224 <CRetransmissionQueue::~CRetransmissionQueue()>
   1e73c:	e284003c 	add	r0, r4, #60	; 0x3c
   1e740:	eb000b1b 	bl	213b4 <CNetQueue::~CNetQueue()>
   1e744:	e2840030 	add	r0, r4, #48	; 0x30
   1e748:	eb000b19 	bl	213b4 <CNetQueue::~CNetQueue()>
   1e74c:	e1a00004 	mov	r0, r4
   1e750:	ebfffb69 	bl	1d4fc <CNetConnection::~CNetConnection()>
   1e754:	e1a00004 	mov	r0, r4
   1e758:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e75c:	e3a020d1 	mov	r2, #209	; 0xd1
   1e760:	e59f101c 	ldr	r1, [pc, #28]	; 1e784 <CTCPConnection::~CTCPConnection()+0xd0>
   1e764:	e59f001c 	ldr	r0, [pc, #28]	; 1e788 <CTCPConnection::~CTCPConnection()+0xd4>
   1e768:	eb001828 	bl	24810 <assertion_failed>
   1e76c:	e3a020dc 	mov	r2, #220	; 0xdc
   1e770:	e59f100c 	ldr	r1, [pc, #12]	; 1e784 <CTCPConnection::~CTCPConnection()+0xd0>
   1e774:	e59f0010 	ldr	r0, [pc, #16]	; 1e78c <CTCPConnection::~CTCPConnection()+0xd8>
   1e778:	eb001824 	bl	24810 <assertion_failed>
   1e77c:	00044170 	.word	0x00044170
   1e780:	0004e204 	.word	0x0004e204
   1e784:	000441dc 	.word	0x000441dc
   1e788:	0004423c 	.word	0x0004423c
   1e78c:	00044258 	.word	0x00044258

0001e790 <CTCPConnection::~CTCPConnection()>:
   1e790:	e92d4010 	push	{r4, lr}
   1e794:	e1a04000 	mov	r4, r0
   1e798:	ebffffc5 	bl	1e6b4 <CTCPConnection::~CTCPConnection()>
   1e79c:	e1a00004 	mov	r0, r4
   1e7a0:	e3a010e0 	mov	r1, #224	; 0xe0
   1e7a4:	eb003244 	bl	2b0bc <operator delete(void*, unsigned int)>
   1e7a8:	e1a00004 	mov	r0, r4
   1e7ac:	e8bd8010 	pop	{r4, pc}

0001e7b0 <CTCPConnection::Close()>:
   1e7b0:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e7b4:	e3530000 	cmp	r3, #0
   1e7b8:	ba000036 	blt	1e898 <CTCPConnection::Close()+0xe8>
   1e7bc:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e7c0:	e92d4010 	push	{r4, lr}
   1e7c4:	e1a04000 	mov	r4, r0
   1e7c8:	e353000a 	cmp	r3, #10
   1e7cc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e7d0:	ea000013 	b	1e824 <CTCPConnection::Close()+0x74>
   1e7d4:	0001e840 	.word	0x0001e840
   1e7d8:	0001e848 	.word	0x0001e848
   1e7dc:	0001e848 	.word	0x0001e848
   1e7e0:	0001e868 	.word	0x0001e868
   1e7e4:	0001e868 	.word	0x0001e868
   1e7e8:	0001e824 	.word	0x0001e824
   1e7ec:	0001e824 	.word	0x0001e824
   1e7f0:	0001e800 	.word	0x0001e800
   1e7f4:	0001e840 	.word	0x0001e840
   1e7f8:	0001e840 	.word	0x0001e840
   1e7fc:	0001e840 	.word	0x0001e840
   1e800:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1e804:	e3530000 	cmp	r3, #0
   1e808:	1a000028 	bne	1e8b0 <CTCPConnection::Close()+0x100>
   1e80c:	e3a01005 	mov	r1, #5
   1e810:	e3a02009 	mov	r2, #9
   1e814:	e3a03001 	mov	r3, #1
   1e818:	e5801060 	str	r1, [r0, #96]	; 0x60
   1e81c:	e5c0205f 	strb	r2, [r0, #95]	; 0x5f
   1e820:	e5c0305e 	strb	r3, [r0, #94]	; 0x5e
   1e824:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e828:	e3530000 	cmp	r3, #0
   1e82c:	ba000001 	blt	1e838 <CTCPConnection::Close()+0x88>
   1e830:	e3a00000 	mov	r0, #0
   1e834:	e8bd8010 	pop	{r4, pc}
   1e838:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e83c:	e8bd8010 	pop	{r4, pc}
   1e840:	e3e00000 	mvn	r0, #0
   1e844:	e8bd8010 	pop	{r4, pc}
   1e848:	e3a01001 	mov	r1, #1
   1e84c:	ebffff6b 	bl	1e600 <CTCPConnection::StopTimer(unsigned int)>
   1e850:	e3a03000 	mov	r3, #0
   1e854:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1e858:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e85c:	e3530000 	cmp	r3, #0
   1e860:	aafffff2 	bge	1e830 <CTCPConnection::Close()+0x80>
   1e864:	eafffff3 	b	1e838 <CTCPConnection::Close()+0x88>
   1e868:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1e86c:	e3530000 	cmp	r3, #0
   1e870:	1a00000a 	bne	1e8a0 <CTCPConnection::Close()+0xf0>
   1e874:	e3a03005 	mov	r3, #5
   1e878:	e3a02001 	mov	r2, #1
   1e87c:	e5803060 	str	r3, [r0, #96]	; 0x60
   1e880:	e5c0205e 	strb	r2, [r0, #94]	; 0x5e
   1e884:	e5c0305f 	strb	r3, [r0, #95]	; 0x5f
   1e888:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e88c:	e3530000 	cmp	r3, #0
   1e890:	aaffffe6 	bge	1e830 <CTCPConnection::Close()+0x80>
   1e894:	eaffffe7 	b	1e838 <CTCPConnection::Close()+0x88>
   1e898:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e89c:	e12fff1e 	bx	lr
   1e8a0:	e3a02d05 	mov	r2, #320	; 0x140
   1e8a4:	e59f1014 	ldr	r1, [pc, #20]	; 1e8c0 <CTCPConnection::Close()+0x110>
   1e8a8:	e59f0014 	ldr	r0, [pc, #20]	; 1e8c4 <CTCPConnection::Close()+0x114>
   1e8ac:	eb0017d7 	bl	24810 <assertion_failed>
   1e8b0:	e59f2010 	ldr	r2, [pc, #16]	; 1e8c8 <CTCPConnection::Close()+0x118>
   1e8b4:	e59f1004 	ldr	r1, [pc, #4]	; 1e8c0 <CTCPConnection::Close()+0x110>
   1e8b8:	e59f0004 	ldr	r0, [pc, #4]	; 1e8c4 <CTCPConnection::Close()+0x114>
   1e8bc:	eb0017d3 	bl	24810 <assertion_failed>
   1e8c0:	000441dc 	.word	0x000441dc
   1e8c4:	0004426c 	.word	0x0004426c
   1e8c8:	0000014b 	.word	0x0000014b

0001e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>:
   1e8cc:	e92d4070 	push	{r4, r5, r6, lr}
   1e8d0:	e3510002 	cmp	r1, #2
   1e8d4:	e24dd008 	sub	sp, sp, #8
   1e8d8:	8a000012 	bhi	1e928 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x5c>
   1e8dc:	e3520000 	cmp	r2, #0
   1e8e0:	e1a06002 	mov	r6, r2
   1e8e4:	0a000013 	beq	1e938 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x6c>
   1e8e8:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1e8ec:	e1a04000 	mov	r4, r0
   1e8f0:	e3530000 	cmp	r3, #0
   1e8f4:	0a000013 	beq	1e948 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x7c>
   1e8f8:	e1a05001 	mov	r5, r1
   1e8fc:	ebffff3f 	bl	1e600 <CTCPConnection::StopTimer(unsigned int)>
   1e900:	e5940078 	ldr	r0, [r4, #120]	; 0x78
   1e904:	e1a01006 	mov	r1, r6
   1e908:	e58d4000 	str	r4, [sp]
   1e90c:	e1a03005 	mov	r3, r5
   1e910:	e59f2040 	ldr	r2, [pc, #64]	; 1e958 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x8c>
   1e914:	eb002bbd 	bl	29810 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1e918:	e0844105 	add	r4, r4, r5, lsl #2
   1e91c:	e584007c 	str	r0, [r4, #124]	; 0x7c
   1e920:	e28dd008 	add	sp, sp, #8
   1e924:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e928:	e59f202c 	ldr	r2, [pc, #44]	; 1e95c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x90>
   1e92c:	e59f102c 	ldr	r1, [pc, #44]	; 1e960 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e930:	e59f002c 	ldr	r0, [pc, #44]	; 1e964 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x98>
   1e934:	eb0017b5 	bl	24810 <assertion_failed>
   1e938:	e59f2028 	ldr	r2, [pc, #40]	; 1e968 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x9c>
   1e93c:	e59f101c 	ldr	r1, [pc, #28]	; 1e960 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e940:	e59f0024 	ldr	r0, [pc, #36]	; 1e96c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xa0>
   1e944:	eb0017b1 	bl	24810 <assertion_failed>
   1e948:	e3a02d17 	mov	r2, #1472	; 0x5c0
   1e94c:	e59f100c 	ldr	r1, [pc, #12]	; 1e960 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e950:	e59f0018 	ldr	r0, [pc, #24]	; 1e970 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xa4>
   1e954:	eb0017ad 	bl	24810 <assertion_failed>
   1e958:	00020184 	.word	0x00020184
   1e95c:	000005be 	.word	0x000005be
   1e960:	000441dc 	.word	0x000441dc
   1e964:	00044220 	.word	0x00044220
   1e968:	000005bf 	.word	0x000005bf
   1e96c:	0004427c 	.word	0x0004427c
   1e970:	0003f280 	.word	0x0003f280

0001e974 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1e974:	e3a0c006 	mov	ip, #6
   1e978:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1e97c:	e1a04000 	mov	r4, r0
   1e980:	e3a05000 	mov	r5, #0
   1e984:	e3a06001 	mov	r6, #1
   1e988:	e24dd014 	sub	sp, sp, #20
   1e98c:	e1dde2b8 	ldrh	lr, [sp, #40]	; 0x28
   1e990:	e58dc008 	str	ip, [sp, #8]
   1e994:	e1ddc2bc 	ldrh	ip, [sp, #44]	; 0x2c
   1e998:	e58de000 	str	lr, [sp]
   1e99c:	e58dc004 	str	ip, [sp, #4]
   1e9a0:	ebfffa83 	bl	1d3b4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1e9a4:	e59f3134 	ldr	r3, [pc, #308]	; 1eae0 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x16c>
   1e9a8:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1e9ac:	e5843000 	str	r3, [r4]
   1e9b0:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1e9b4:	e5c46029 	strb	r6, [r4, #41]	; 0x29
   1e9b8:	e2840030 	add	r0, r4, #48	; 0x30
   1e9bc:	eb000a42 	bl	212cc <CNetQueue::CNetQueue()>
   1e9c0:	e284003c 	add	r0, r4, #60	; 0x3c
   1e9c4:	eb000a40 	bl	212cc <CNetQueue::CNetQueue()>
   1e9c8:	e3a01801 	mov	r1, #65536	; 0x10000
   1e9cc:	e2840048 	add	r0, r4, #72	; 0x48
   1e9d0:	eb0005ff 	bl	201d4 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1e9d4:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1e9d8:	e1a01005 	mov	r1, r5
   1e9dc:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1e9e0:	e2840068 	add	r0, r4, #104	; 0x68
   1e9e4:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1e9e8:	e5845060 	str	r5, [r4, #96]	; 0x60
   1e9ec:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1e9f0:	eb0016ef 	bl	245b4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e9f4:	e1a01005 	mov	r1, r5
   1e9f8:	e2840070 	add	r0, r4, #112	; 0x70
   1e9fc:	eb0016ec 	bl	245b4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1ea00:	eb002d42 	bl	29f10 <CTimer::Get()>
   1ea04:	e3a02f86 	mov	r2, #536	; 0x218
   1ea08:	e59f30d4 	ldr	r3, [pc, #212]	; 1eae4 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x170>
   1ea0c:	e28470b8 	add	r7, r4, #184	; 0xb8
   1ea10:	e5840078 	str	r0, [r4, #120]	; 0x78
   1ea14:	e1c42bb4 	strh	r2, [r4, #180]	; 0xb4
   1ea18:	e5843094 	str	r3, [r4, #148]	; 0x94
   1ea1c:	e58430ac 	str	r3, [r4, #172]	; 0xac
   1ea20:	e5846088 	str	r6, [r4, #136]	; 0x88
   1ea24:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   1ea28:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1ea2c:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   1ea30:	e1a00007 	mov	r0, r7
   1ea34:	eb0006d1 	bl	20580 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1ea38:	e59f20a8 	ldr	r2, [pc, #168]	; 1eae8 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x174>
   1ea3c:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1ea40:	e5923000 	ldr	r3, [r2]
   1ea44:	e5845080 	str	r5, [r4, #128]	; 0x80
   1ea48:	e0833006 	add	r3, r3, r6
   1ea4c:	e5845084 	str	r5, [r4, #132]	; 0x84
   1ea50:	e1a00004 	mov	r0, r4
   1ea54:	e5823000 	str	r3, [r2]
   1ea58:	ebfffecd 	bl	1e594 <CTCPConnection::CalculateISN()>
   1ea5c:	e1a01000 	mov	r1, r0
   1ea60:	e1a00007 	mov	r0, r7
   1ea64:	e58410a4 	str	r1, [r4, #164]	; 0xa4
   1ea68:	eb0006de 	bl	205e8 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1ea6c:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1ea70:	e1a03005 	mov	r3, r5
   1ea74:	e0821006 	add	r1, r2, r6
   1ea78:	e58d5004 	str	r5, [sp, #4]
   1ea7c:	e58d5000 	str	r5, [sp]
   1ea80:	e1a00004 	mov	r0, r4
   1ea84:	e5841090 	str	r1, [r4, #144]	; 0x90
   1ea88:	e584208c 	str	r2, [r4, #140]	; 0x8c
   1ea8c:	e3a01c02 	mov	r1, #512	; 0x200
   1ea90:	ebfffe33 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ea94:	e1500005 	cmp	r0, r5
   1ea98:	0a00000d 	beq	1ead4 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x160>
   1ea9c:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1eaa0:	e1a02006 	mov	r2, r6
   1eaa4:	e1a00007 	mov	r0, r7
   1eaa8:	eb0006eb 	bl	2065c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1eaac:	e3a02002 	mov	r2, #2
   1eab0:	e3a03005 	mov	r3, #5
   1eab4:	e5c4202a 	strb	r2, [r4, #42]	; 0x2a
   1eab8:	e1a00007 	mov	r0, r7
   1eabc:	e5843060 	str	r3, [r4, #96]	; 0x60
   1eac0:	eb0006c6 	bl	205e0 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1eac4:	e1a01006 	mov	r1, r6
   1eac8:	e1a02000 	mov	r2, r0
   1eacc:	e1a00004 	mov	r0, r4
   1ead0:	ebffff7d 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ead4:	e1a00004 	mov	r0, r4
   1ead8:	e28dd014 	add	sp, sp, #20
   1eadc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1eae0:	00044170 	.word	0x00044170
   1eae4:	00003908 	.word	0x00003908
   1eae8:	0004e204 	.word	0x0004e204

0001eaec <CTCPConnection::Process()>:
   1eaec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eaf0:	e5d03064 	ldrb	r3, [r0, #100]	; 0x64
   1eaf4:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1eaf8:	e3530000 	cmp	r3, #0
   1eafc:	e24dd00c 	sub	sp, sp, #12
   1eb00:	e1a05000 	mov	r5, r0
   1eb04:	1a000085 	bne	1ed20 <CTCPConnection::Process()+0x234>
   1eb08:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1eb0c:	e6ef3073 	uxtb	r3, r3
   1eb10:	e353000a 	cmp	r3, #10
   1eb14:	9a00001c 	bls	1eb8c <CTCPConnection::Process()+0xa0>
   1eb18:	e2856048 	add	r6, r5, #72	; 0x48
   1eb1c:	e3a07000 	mov	r7, #0
   1eb20:	e59f42f0 	ldr	r4, [pc, #752]	; 1ee18 <CTCPConnection::Process()+0x32c>
   1eb24:	e2858030 	add	r8, r5, #48	; 0x30
   1eb28:	e1a00006 	mov	r0, r6
   1eb2c:	eb0005c9 	bl	20258 <CRetransmissionQueue::GetFreeSpace() const>
   1eb30:	e1500004 	cmp	r0, r4
   1eb34:	8a000065 	bhi	1ecd0 <CTCPConnection::Process()+0x1e4>
   1eb38:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1eb3c:	e3530004 	cmp	r3, #4
   1eb40:	0a00007f 	beq	1ed44 <CTCPConnection::Process()+0x258>
   1eb44:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1eb48:	e3530007 	cmp	r3, #7
   1eb4c:	0a00007c 	beq	1ed44 <CTCPConnection::Process()+0x258>
   1eb50:	e5d5305c 	ldrb	r3, [r5, #92]	; 0x5c
   1eb54:	e3530000 	cmp	r3, #0
   1eb58:	1a000082 	bne	1ed68 <CTCPConnection::Process()+0x27c>
   1eb5c:	e3a0aa01 	mov	sl, #4096	; 0x1000
   1eb60:	e3a09001 	mov	r9, #1
   1eb64:	e28d8008 	add	r8, sp, #8
   1eb68:	e285b030 	add	fp, r5, #48	; 0x30
   1eb6c:	e28570b8 	add	r7, r5, #184	; 0xb8
   1eb70:	e1a00006 	mov	r0, r6
   1eb74:	eb000608 	bl	2039c <CRetransmissionQueue::GetBytesAvailable() const>
   1eb78:	e3500000 	cmp	r0, #0
   1eb7c:	1a000029 	bne	1ec28 <CTCPConnection::Process()+0x13c>
   1eb80:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1eb84:	e28dd00c 	add	sp, sp, #12
   1eb88:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb8c:	e3a07001 	mov	r7, #1
   1eb90:	e59f4284 	ldr	r4, [pc, #644]	; 1ee1c <CTCPConnection::Process()+0x330>
   1eb94:	e1a03317 	lsl	r3, r7, r3
   1eb98:	e0044003 	and	r4, r4, r3
   1eb9c:	e3540000 	cmp	r4, #0
   1eba0:	1afffff6 	bne	1eb80 <CTCPConnection::Process()+0x94>
   1eba4:	e2131e3b 	ands	r1, r3, #944	; 0x3b0
   1eba8:	1a000075 	bne	1ed84 <CTCPConnection::Process()+0x298>
   1ebac:	e313000c 	tst	r3, #12
   1ebb0:	0affffd8 	beq	1eb18 <CTCPConnection::Process()+0x2c>
   1ebb4:	e5d0305d 	ldrb	r3, [r0, #93]	; 0x5d
   1ebb8:	e3530000 	cmp	r3, #0
   1ebbc:	0affffef 	beq	1eb80 <CTCPConnection::Process()+0x94>
   1ebc0:	e5c0105d 	strb	r1, [r0, #93]	; 0x5d
   1ebc4:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1ebc8:	e28540b8 	add	r4, r5, #184	; 0xb8
   1ebcc:	e3530002 	cmp	r3, #2
   1ebd0:	059020a4 	ldreq	r2, [r0, #164]	; 0xa4
   1ebd4:	159020a4 	ldrne	r2, [r0, #164]	; 0xa4
   1ebd8:	058d1004 	streq	r1, [sp, #4]
   1ebdc:	058d1000 	streq	r1, [sp]
   1ebe0:	01a03001 	moveq	r3, r1
   1ebe4:	159030a8 	ldrne	r3, [r0, #168]	; 0xa8
   1ebe8:	03a01c02 	moveq	r1, #512	; 0x200
   1ebec:	158d1004 	strne	r1, [sp, #4]
   1ebf0:	158d1000 	strne	r1, [sp]
   1ebf4:	13a01c12 	movne	r1, #4608	; 0x1200
   1ebf8:	ebfffdd9 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ebfc:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1ec00:	e1a00004 	mov	r0, r4
   1ec04:	e3a02001 	mov	r2, #1
   1ec08:	eb000693 	bl	2065c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1ec0c:	e1a00004 	mov	r0, r4
   1ec10:	eb000672 	bl	205e0 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ec14:	e3a01001 	mov	r1, #1
   1ec18:	e1a02000 	mov	r2, r0
   1ec1c:	e1a00005 	mov	r0, r5
   1ec20:	ebffff29 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ec24:	eaffffd5 	b	1eb80 <CTCPConnection::Process()+0x94>
   1ec28:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1ec2c:	e5954094 	ldr	r4, [r5, #148]	; 0x94
   1ec30:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1ec34:	e0834004 	add	r4, r3, r4
   1ec38:	e0543002 	subs	r3, r4, r2
   1ec3c:	0affffcf 	beq	1eb80 <CTCPConnection::Process()+0x94>
   1ec40:	e1d54bb4 	ldrh	r4, [r5, #180]	; 0xb4
   1ec44:	e1540003 	cmp	r4, r3
   1ec48:	21a04003 	movcs	r4, r3
   1ec4c:	e1540000 	cmp	r4, r0
   1ec50:	21a04000 	movcs	r4, r0
   1ec54:	e3540d19 	cmp	r4, #1600	; 0x640
   1ec58:	8a00002c 	bhi	1ed10 <CTCPConnection::Process()+0x224>
   1ec5c:	e1a02004 	mov	r2, r4
   1ec60:	e1a01008 	mov	r1, r8
   1ec64:	e1a00006 	mov	r0, r6
   1ec68:	eb0005ea 	bl	20418 <CRetransmissionQueue::Read(void*, unsigned int)>
   1ec6c:	e1a00006 	mov	r0, r6
   1ec70:	eb000572 	bl	20240 <CRetransmissionQueue::IsEmpty() const>
   1ec74:	e3500000 	cmp	r0, #0
   1ec78:	1a00001e 	bne	1ecf8 <CTCPConnection::Process()+0x20c>
   1ec7c:	e1a0100a 	mov	r1, sl
   1ec80:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1ec84:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1ec88:	e1a00005 	mov	r0, r5
   1ec8c:	e58d4004 	str	r4, [sp, #4]
   1ec90:	e58d8000 	str	r8, [sp]
   1ec94:	ebfffdb2 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ec98:	e1a02004 	mov	r2, r4
   1ec9c:	e5951090 	ldr	r1, [r5, #144]	; 0x90
   1eca0:	e1a00007 	mov	r0, r7
   1eca4:	eb00066c 	bl	2065c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1eca8:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1ecac:	e1a00007 	mov	r0, r7
   1ecb0:	e0834004 	add	r4, r3, r4
   1ecb4:	e5854090 	str	r4, [r5, #144]	; 0x90
   1ecb8:	eb000648 	bl	205e0 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ecbc:	e1a01009 	mov	r1, r9
   1ecc0:	e1a02000 	mov	r2, r0
   1ecc4:	e1a00005 	mov	r0, r5
   1ecc8:	ebfffeff 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1eccc:	eaffffa7 	b	1eb70 <CTCPConnection::Process()+0x84>
   1ecd0:	e1a02007 	mov	r2, r7
   1ecd4:	e28d1008 	add	r1, sp, #8
   1ecd8:	e1a00008 	mov	r0, r8
   1ecdc:	eb0009ff 	bl	214e0 <CNetQueue::Dequeue(void*, void**)>
   1ece0:	e2502000 	subs	r2, r0, #0
   1ece4:	0affff93 	beq	1eb38 <CTCPConnection::Process()+0x4c>
   1ece8:	e28d1008 	add	r1, sp, #8
   1ecec:	e1a00006 	mov	r0, r6
   1ecf0:	eb000578 	bl	202d8 <CRetransmissionQueue::Write(void const*, unsigned int)>
   1ecf4:	eaffff8b 	b	1eb28 <CTCPConnection::Process()+0x3c>
   1ecf8:	e1a0000b 	mov	r0, fp
   1ecfc:	eb000977 	bl	212e0 <CNetQueue::IsEmpty() const>
   1ed00:	e3500000 	cmp	r0, #0
   1ed04:	0affffdc 	beq	1ec7c <CTCPConnection::Process()+0x190>
   1ed08:	e3a01b06 	mov	r1, #6144	; 0x1800
   1ed0c:	eaffffdb 	b	1ec80 <CTCPConnection::Process()+0x194>
   1ed10:	e59f2108 	ldr	r2, [pc, #264]	; 1ee20 <CTCPConnection::Process()+0x334>
   1ed14:	e59f1108 	ldr	r1, [pc, #264]	; 1ee24 <CTCPConnection::Process()+0x338>
   1ed18:	e59f0108 	ldr	r0, [pc, #264]	; 1ee28 <CTCPConnection::Process()+0x33c>
   1ed1c:	eb0016bb 	bl	24810 <assertion_failed>
   1ed20:	e3e02000 	mvn	r2, #0
   1ed24:	e3a03000 	mov	r3, #0
   1ed28:	e580202c 	str	r2, [r0, #44]	; 0x2c
   1ed2c:	e2800068 	add	r0, r0, #104	; 0x68
   1ed30:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1ed34:	eb001632 	bl	24604 <CSynchronizationEvent::Set()>
   1ed38:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1ed3c:	e28dd00c 	add	sp, sp, #12
   1ed40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed44:	e2850030 	add	r0, r5, #48	; 0x30
   1ed48:	eb000964 	bl	212e0 <CNetQueue::IsEmpty() const>
   1ed4c:	e3500000 	cmp	r0, #0
   1ed50:	0affff7e 	beq	1eb50 <CTCPConnection::Process()+0x64>
   1ed54:	e2850070 	add	r0, r5, #112	; 0x70
   1ed58:	eb001629 	bl	24604 <CSynchronizationEvent::Set()>
   1ed5c:	e5d5305c 	ldrb	r3, [r5, #92]	; 0x5c
   1ed60:	e3530000 	cmp	r3, #0
   1ed64:	0affff7c 	beq	1eb5c <CTCPConnection::Process()+0x70>
   1ed68:	e3a03000 	mov	r3, #0
   1ed6c:	e1a00006 	mov	r0, r6
   1ed70:	e5c5305c 	strb	r3, [r5, #92]	; 0x5c
   1ed74:	eb0005f9 	bl	20560 <CRetransmissionQueue::Reset()>
   1ed78:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1ed7c:	e5853090 	str	r3, [r5, #144]	; 0x90
   1ed80:	eaffff75 	b	1eb5c <CTCPConnection::Process()+0x70>
   1ed84:	e2806048 	add	r6, r0, #72	; 0x48
   1ed88:	e1a00006 	mov	r0, r6
   1ed8c:	eb00052b 	bl	20240 <CRetransmissionQueue::IsEmpty() const>
   1ed90:	e3500000 	cmp	r0, #0
   1ed94:	0affff60 	beq	1eb1c <CTCPConnection::Process()+0x30>
   1ed98:	e2850030 	add	r0, r5, #48	; 0x30
   1ed9c:	eb00094f 	bl	212e0 <CNetQueue::IsEmpty() const>
   1eda0:	e3500000 	cmp	r0, #0
   1eda4:	0affff5c 	beq	1eb1c <CTCPConnection::Process()+0x30>
   1eda8:	e5d5305e 	ldrb	r3, [r5, #94]	; 0x5e
   1edac:	e3530000 	cmp	r3, #0
   1edb0:	0affff59 	beq	1eb1c <CTCPConnection::Process()+0x30>
   1edb4:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1edb8:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1edbc:	e28580b8 	add	r8, r5, #184	; 0xb8
   1edc0:	e58d4004 	str	r4, [sp, #4]
   1edc4:	e58d4000 	str	r4, [sp]
   1edc8:	e3a01c11 	mov	r1, #4352	; 0x1100
   1edcc:	e1a00005 	mov	r0, r5
   1edd0:	ebfffd63 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1edd4:	e5951090 	ldr	r1, [r5, #144]	; 0x90
   1edd8:	e1a00008 	mov	r0, r8
   1eddc:	e1a02007 	mov	r2, r7
   1ede0:	eb00061d 	bl	2065c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1ede4:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1ede8:	e5d5205f 	ldrb	r2, [r5, #95]	; 0x5f
   1edec:	e2833001 	add	r3, r3, #1
   1edf0:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1edf4:	e1a00008 	mov	r0, r8
   1edf8:	e5853090 	str	r3, [r5, #144]	; 0x90
   1edfc:	e5c5405e 	strb	r4, [r5, #94]	; 0x5e
   1ee00:	eb0005f6 	bl	205e0 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ee04:	e1a01007 	mov	r1, r7
   1ee08:	e1a02000 	mov	r2, r0
   1ee0c:	e1a00005 	mov	r0, r5
   1ee10:	ebfffead 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ee14:	eaffff40 	b	1eb1c <CTCPConnection::Process()+0x30>
   1ee18:	0000063f 	.word	0x0000063f
   1ee1c:	00000443 	.word	0x00000443
   1ee20:	0000025b 	.word	0x0000025b
   1ee24:	000441dc 	.word	0x000441dc
   1ee28:	000418b4 	.word	0x000418b4

0001ee2c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1ee2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ee30:	e59d1020 	ldr	r1, [sp, #32]
   1ee34:	e1dd61b8 	ldrh	r6, [sp, #24]
   1ee38:	e3510006 	cmp	r1, #6
   1ee3c:	e1dd71bc 	ldrh	r7, [sp, #28]
   1ee40:	0a000001 	beq	1ee4c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x20>
   1ee44:	e3a00000 	mov	r0, #0
   1ee48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ee4c:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1ee50:	e3510001 	cmp	r1, #1
   1ee54:	dafffffa 	ble	1ee44 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ee58:	e1a01002 	mov	r1, r2
   1ee5c:	e1a04000 	mov	r4, r0
   1ee60:	e280000c 	add	r0, r0, #12
   1ee64:	e1a05003 	mov	r5, r3
   1ee68:	eb0007fa 	bl	20e58 <CIPAddress::operator!=(CIPAddress const&) const>
   1ee6c:	e3500000 	cmp	r0, #0
   1ee70:	1afffff3 	bne	1ee44 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ee74:	e1d431b4 	ldrh	r3, [r4, #20]
   1ee78:	e1530006 	cmp	r3, r6
   1ee7c:	1afffff0 	bne	1ee44 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ee80:	e5940004 	ldr	r0, [r4, #4]
   1ee84:	e3500000 	cmp	r0, #0
   1ee88:	0a000017 	beq	1eeec <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xc0>
   1ee8c:	eb000766 	bl	20c2c <CNetConfig::GetIPAddress() const>
   1ee90:	e1a01000 	mov	r1, r0
   1ee94:	e1a00005 	mov	r0, r5
   1ee98:	eb0007ee 	bl	20e58 <CIPAddress::operator!=(CIPAddress const&) const>
   1ee9c:	e3500000 	cmp	r0, #0
   1eea0:	1affffe7 	bne	1ee44 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1eea4:	e1d431b6 	ldrh	r3, [r4, #22]
   1eea8:	e1530007 	cmp	r3, r7
   1eeac:	1affffe4 	bne	1ee44 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1eeb0:	e3e03000 	mvn	r3, #0
   1eeb4:	e1a00004 	mov	r0, r4
   1eeb8:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1eebc:	e3a01001 	mov	r1, #1
   1eec0:	ebfffdce 	bl	1e600 <CTCPConnection::StopTimer(unsigned int)>
   1eec4:	e3a0300a 	mov	r3, #10
   1eec8:	e59f202c 	ldr	r2, [pc, #44]	; 1eefc <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd0>
   1eecc:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1eed0:	e3a01002 	mov	r1, #2
   1eed4:	e1a00004 	mov	r0, r4
   1eed8:	ebfffe7b 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1eedc:	e2840068 	add	r0, r4, #104	; 0x68
   1eee0:	eb0015c7 	bl	24604 <CSynchronizationEvent::Set()>
   1eee4:	e3a00001 	mov	r0, #1
   1eee8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1eeec:	e59f200c 	ldr	r2, [pc, #12]	; 1ef00 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd4>
   1eef0:	e59f100c 	ldr	r1, [pc, #12]	; 1ef04 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd8>
   1eef4:	e59f000c 	ldr	r0, [pc, #12]	; 1ef08 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xdc>
   1eef8:	eb001644 	bl	24810 <assertion_failed>
   1eefc:	00001770 	.word	0x00001770
   1ef00:	00000539 	.word	0x00000539
   1ef04:	000441dc 	.word	0x000441dc
   1ef08:	00043a48 	.word	0x00043a48

0001ef0c <CTCPConnection::DumpStatus()>:
   1ef0c:	e92d4070 	push	{r4, r5, r6, lr}
   1ef10:	e1a04000 	mov	r4, r0
   1ef14:	e24dd020 	sub	sp, sp, #32
   1ef18:	eb001f2f 	bl	26bdc <CLogger::Get()>
   1ef1c:	e594c0a4 	ldr	ip, [r4, #164]	; 0xa4
   1ef20:	e594e0b0 	ldr	lr, [r4, #176]	; 0xb0
   1ef24:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   1ef28:	e594208c 	ldr	r2, [r4, #140]	; 0x8c
   1ef2c:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1ef30:	e5d4602a 	ldrb	r6, [r4, #42]	; 0x2a
   1ef34:	e1d451b4 	ldrh	r5, [r4, #20]
   1ef38:	e041100c 	sub	r1, r1, ip
   1ef3c:	e042200c 	sub	r2, r2, ip
   1ef40:	e043300e 	sub	r3, r3, lr
   1ef44:	e594c094 	ldr	ip, [r4, #148]	; 0x94
   1ef48:	e594e0ac 	ldr	lr, [r4, #172]	; 0xac
   1ef4c:	e58d1008 	str	r1, [sp, #8]
   1ef50:	e58d2004 	str	r2, [sp, #4]
   1ef54:	e58d3010 	str	r3, [sp, #16]
   1ef58:	e58d6000 	str	r6, [sp]
   1ef5c:	e58d5018 	str	r5, [sp, #24]
   1ef60:	e58de014 	str	lr, [sp, #20]
   1ef64:	e58dc00c 	str	ip, [sp, #12]
   1ef68:	e59f3010 	ldr	r3, [pc, #16]	; 1ef80 <CTCPConnection::DumpStatus()+0x74>
   1ef6c:	e3a02004 	mov	r2, #4
   1ef70:	e59f100c 	ldr	r1, [pc, #12]	; 1ef84 <CTCPConnection::DumpStatus()+0x78>
   1ef74:	eb001e55 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ef78:	e28dd020 	add	sp, sp, #32
   1ef7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ef80:	00044284 	.word	0x00044284
   1ef84:	000441ac 	.word	0x000441ac

0001ef88 <CTCPConnection::NewState(TTCPState, unsigned int)>:
   1ef88:	e92d4070 	push	{r4, r5, r6, lr}
   1ef8c:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1ef90:	e24dd010 	sub	sp, sp, #16
   1ef94:	e353000a 	cmp	r3, #10
   1ef98:	8a000015 	bhi	1eff4 <CTCPConnection::NewState(TTCPState, unsigned int)+0x6c>
   1ef9c:	e351000a 	cmp	r1, #10
   1efa0:	e1a04001 	mov	r4, r1
   1efa4:	8a000016 	bhi	1f004 <CTCPConnection::NewState(TTCPState, unsigned int)+0x7c>
   1efa8:	e1a05000 	mov	r5, r0
   1efac:	e1a06002 	mov	r6, r2
   1efb0:	eb001f09 	bl	26bdc <CLogger::Get()>
   1efb4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1efb8:	e59f1054 	ldr	r1, [pc, #84]	; 1f014 <CTCPConnection::NewState(TTCPState, unsigned int)+0x8c>
   1efbc:	e58d6008 	str	r6, [sp, #8]
   1efc0:	e081c104 	add	ip, r1, r4, lsl #2
   1efc4:	e0813103 	add	r3, r1, r3, lsl #2
   1efc8:	e5932048 	ldr	r2, [r3, #72]	; 0x48
   1efcc:	e59c3048 	ldr	r3, [ip, #72]	; 0x48
   1efd0:	e2811044 	add	r1, r1, #68	; 0x44
   1efd4:	e88d000c 	stm	sp, {r2, r3}
   1efd8:	e59f3038 	ldr	r3, [pc, #56]	; 1f018 <CTCPConnection::NewState(TTCPState, unsigned int)+0x90>
   1efdc:	e3a02004 	mov	r2, #4
   1efe0:	eb001e3a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1efe4:	e1a00004 	mov	r0, r4
   1efe8:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1efec:	e28dd010 	add	sp, sp, #16
   1eff0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1eff4:	e59f2020 	ldr	r2, [pc, #32]	; 1f01c <CTCPConnection::NewState(TTCPState, unsigned int)+0x94>
   1eff8:	e59f1020 	ldr	r1, [pc, #32]	; 1f020 <CTCPConnection::NewState(TTCPState, unsigned int)+0x98>
   1effc:	e59f0020 	ldr	r0, [pc, #32]	; 1f024 <CTCPConnection::NewState(TTCPState, unsigned int)+0x9c>
   1f000:	eb001602 	bl	24810 <assertion_failed>
   1f004:	e59f201c 	ldr	r2, [pc, #28]	; 1f028 <CTCPConnection::NewState(TTCPState, unsigned int)+0xa0>
   1f008:	e59f1010 	ldr	r1, [pc, #16]	; 1f020 <CTCPConnection::NewState(TTCPState, unsigned int)+0x98>
   1f00c:	e59f0018 	ldr	r0, [pc, #24]	; 1f02c <CTCPConnection::NewState(TTCPState, unsigned int)+0xa4>
   1f010:	eb0015fe 	bl	24810 <assertion_failed>
   1f014:	00044168 	.word	0x00044168
   1f018:	00044320 	.word	0x00044320
   1f01c:	00000647 	.word	0x00000647
   1f020:	000441dc 	.word	0x000441dc
   1f024:	000442bc 	.word	0x000442bc
   1f028:	00000648 	.word	0x00000648
   1f02c:	000442f0 	.word	0x000442f0

0001f030 <CTCPConnection::UnexpectedState(unsigned int)>:
   1f030:	e92d4030 	push	{r4, r5, lr}
   1f034:	e1a05000 	mov	r5, r0
   1f038:	e1a04001 	mov	r4, r1
   1f03c:	e24dd00c 	sub	sp, sp, #12
   1f040:	ebffffb1 	bl	1ef0c <CTCPConnection::DumpStatus()>
   1f044:	eb001ee4 	bl	26bdc <CLogger::Get()>
   1f048:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f04c:	e3a02000 	mov	r2, #0
   1f050:	e88d0018 	stm	sp, {r3, r4}
   1f054:	e59f100c 	ldr	r1, [pc, #12]	; 1f068 <CTCPConnection::UnexpectedState(unsigned int)+0x38>
   1f058:	e59f300c 	ldr	r3, [pc, #12]	; 1f06c <CTCPConnection::UnexpectedState(unsigned int)+0x3c>
   1f05c:	eb001e1b 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f060:	e28dd00c 	add	sp, sp, #12
   1f064:	e8bd8030 	pop	{r4, r5, pc}
   1f068:	000441ac 	.word	0x000441ac
   1f06c:	0004433c 	.word	0x0004433c

0001f070 <CTCPConnection::Connect()>:
   1f070:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   1f074:	e92d4070 	push	{r4, r5, r6, lr}
   1f078:	e3520000 	cmp	r2, #0
   1f07c:	e1a04000 	mov	r4, r0
   1f080:	ba00000d 	blt	1f0bc <CTCPConnection::Connect()+0x4c>
   1f084:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1f088:	e6ef3073 	uxtb	r3, r3
   1f08c:	e353000a 	cmp	r3, #10
   1f090:	8a000009 	bhi	1f0bc <CTCPConnection::Connect()+0x4c>
   1f094:	e3a02001 	mov	r2, #1
   1f098:	e59f1058 	ldr	r1, [pc, #88]	; 1f0f8 <CTCPConnection::Connect()+0x88>
   1f09c:	e1a02312 	lsl	r2, r2, r3
   1f0a0:	e0011002 	and	r1, r1, r2
   1f0a4:	e3510000 	cmp	r1, #0
   1f0a8:	1a00000e 	bne	1f0e8 <CTCPConnection::Connect()+0x78>
   1f0ac:	e3530000 	cmp	r3, #0
   1f0b0:	0a00000a 	beq	1f0e0 <CTCPConnection::Connect()+0x70>
   1f0b4:	e312000c 	tst	r2, #12
   1f0b8:	1a000001 	bne	1f0c4 <CTCPConnection::Connect()+0x54>
   1f0bc:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f0c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f0c4:	e2805068 	add	r5, r0, #104	; 0x68
   1f0c8:	e1a00005 	mov	r0, r5
   1f0cc:	eb001549 	bl	245f8 <CSynchronizationEvent::Clear()>
   1f0d0:	e1a00005 	mov	r0, r5
   1f0d4:	eb001558 	bl	2463c <CSynchronizationEvent::Wait()>
   1f0d8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f0dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f0e0:	e3e00000 	mvn	r0, #0
   1f0e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f0e8:	e3a010f9 	mov	r1, #249	; 0xf9
   1f0ec:	ebffffcf 	bl	1f030 <CTCPConnection::UnexpectedState(unsigned int)>
   1f0f0:	e3e00000 	mvn	r0, #0
   1f0f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f0f8:	000007e2 	.word	0x000007e2

0001f0fc <CTCPConnection::Accept(CIPAddress*, unsigned short*)>:
   1f0fc:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1f100:	e3530000 	cmp	r3, #0
   1f104:	ba000028 	blt	1f1ac <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xb0>
   1f108:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1f10c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1f110:	e1a06002 	mov	r6, r2
   1f114:	e1a05001 	mov	r5, r1
   1f118:	e1a04000 	mov	r4, r0
   1f11c:	e353000a 	cmp	r3, #10
   1f120:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f124:	ea000015 	b	1f180 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x84>
   1f128:	0001f154 	.word	0x0001f154
   1f12c:	0001f16c 	.word	0x0001f16c
   1f130:	0001f15c 	.word	0x0001f15c
   1f134:	0001f180 	.word	0x0001f180
   1f138:	0001f180 	.word	0x0001f180
   1f13c:	0001f154 	.word	0x0001f154
   1f140:	0001f154 	.word	0x0001f154
   1f144:	0001f154 	.word	0x0001f154
   1f148:	0001f154 	.word	0x0001f154
   1f14c:	0001f154 	.word	0x0001f154
   1f150:	0001f154 	.word	0x0001f154
   1f154:	e3e00000 	mvn	r0, #0
   1f158:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f15c:	e59f1070 	ldr	r1, [pc, #112]	; 1f1d4 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xd8>
   1f160:	ebffffb2 	bl	1f030 <CTCPConnection::UnexpectedState(unsigned int)>
   1f164:	e3e00000 	mvn	r0, #0
   1f168:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f16c:	e2807068 	add	r7, r0, #104	; 0x68
   1f170:	e1a00007 	mov	r0, r7
   1f174:	eb00151f 	bl	245f8 <CSynchronizationEvent::Clear()>
   1f178:	e1a00007 	mov	r0, r7
   1f17c:	eb00152e 	bl	2463c <CSynchronizationEvent::Wait()>
   1f180:	e3550000 	cmp	r5, #0
   1f184:	0a00000a 	beq	1f1b4 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xb8>
   1f188:	e1a00005 	mov	r0, r5
   1f18c:	e284100c 	add	r1, r4, #12
   1f190:	eb00079d 	bl	2100c <CIPAddress::Set(CIPAddress const&)>
   1f194:	e3560000 	cmp	r6, #0
   1f198:	0a000009 	beq	1f1c4 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xc8>
   1f19c:	e1d431b4 	ldrh	r3, [r4, #20]
   1f1a0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f1a4:	e1c630b0 	strh	r3, [r6]
   1f1a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f1ac:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f1b0:	e12fff1e 	bx	lr
   1f1b4:	e59f201c 	ldr	r2, [pc, #28]	; 1f1d8 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xdc>
   1f1b8:	e59f101c 	ldr	r1, [pc, #28]	; 1f1dc <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe0>
   1f1bc:	e59f001c 	ldr	r0, [pc, #28]	; 1f1e0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe4>
   1f1c0:	eb001592 	bl	24810 <assertion_failed>
   1f1c4:	e59f2018 	ldr	r2, [pc, #24]	; 1f1e4 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe8>
   1f1c8:	e59f100c 	ldr	r1, [pc, #12]	; 1f1dc <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe0>
   1f1cc:	e59f0014 	ldr	r0, [pc, #20]	; 1f1e8 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xec>
   1f1d0:	eb00158e 	bl	24810 <assertion_failed>
   1f1d4:	0000010d 	.word	0x0000010d
   1f1d8:	00000123 	.word	0x00000123
   1f1dc:	000441dc 	.word	0x000441dc
   1f1e0:	00043aa0 	.word	0x00043aa0
   1f1e4:	00000126 	.word	0x00000126
   1f1e8:	00043ab0 	.word	0x00043ab0

0001f1ec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1f1ec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1f0:	e24dd024 	sub	sp, sp, #36	; 0x24
   1f1f4:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   1f1f8:	e35c0006 	cmp	ip, #6
   1f1fc:	0a000002 	beq	1f20c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x20>
   1f200:	e3a00000 	mov	r0, #0
   1f204:	e28dd024 	add	sp, sp, #36	; 0x24
   1f208:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f20c:	e3520013 	cmp	r2, #19
   1f210:	9a0000e5 	bls	1f5ac <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3c0>
   1f214:	e3510000 	cmp	r1, #0
   1f218:	e1a07003 	mov	r7, r3
   1f21c:	e1a06002 	mov	r6, r2
   1f220:	e1a04001 	mov	r4, r1
   1f224:	e1a05000 	mov	r5, r0
   1f228:	0a0000db 	beq	1f59c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3b0>
   1f22c:	e5d13002 	ldrb	r3, [r1, #2]
   1f230:	e5d11003 	ldrb	r1, [r1, #3]
   1f234:	e1d021b6 	ldrh	r2, [r0, #22]
   1f238:	e1833401 	orr	r3, r3, r1, lsl #8
   1f23c:	e6bf3fb3 	rev16	r3, r3
   1f240:	e6ff3073 	uxth	r3, r3
   1f244:	e1520003 	cmp	r2, r3
   1f248:	1affffec 	bne	1f200 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1f24c:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1f250:	e3530001 	cmp	r3, #1
   1f254:	0a00004a 	beq	1f384 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x198>
   1f258:	e1a01007 	mov	r1, r7
   1f25c:	e280000c 	add	r0, r0, #12
   1f260:	eb0006fc 	bl	20e58 <CIPAddress::operator!=(CIPAddress const&) const>
   1f264:	e3500000 	cmp	r0, #0
   1f268:	1affffe4 	bne	1f200 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1f26c:	e5d43000 	ldrb	r3, [r4]
   1f270:	e5d41001 	ldrb	r1, [r4, #1]
   1f274:	e1d521b4 	ldrh	r2, [r5, #20]
   1f278:	e1833401 	orr	r3, r3, r1, lsl #8
   1f27c:	e6bf3fb3 	rev16	r3, r3
   1f280:	e6ff3073 	uxth	r3, r3
   1f284:	e1520003 	cmp	r2, r3
   1f288:	0285a01c 	addeq	sl, r5, #28
   1f28c:	1affffdb 	bne	1f200 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1f290:	e1a02006 	mov	r2, r6
   1f294:	e1a01004 	mov	r1, r4
   1f298:	e1a0000a 	mov	r0, sl
   1f29c:	eb000923 	bl	21730 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1f2a0:	e3500000 	cmp	r0, #0
   1f2a4:	1affffd5 	bne	1f200 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1f2a8:	e5d43005 	ldrb	r3, [r4, #5]
   1f2ac:	e5d42004 	ldrb	r2, [r4, #4]
   1f2b0:	e5d48008 	ldrb	r8, [r4, #8]
   1f2b4:	e5d4c009 	ldrb	ip, [r4, #9]
   1f2b8:	e5d40006 	ldrb	r0, [r4, #6]
   1f2bc:	e5d4100a 	ldrb	r1, [r4, #10]
   1f2c0:	e5d4900d 	ldrb	r9, [r4, #13]
   1f2c4:	e1822403 	orr	r2, r2, r3, lsl #8
   1f2c8:	e5d4300c 	ldrb	r3, [r4, #12]
   1f2cc:	e188840c 	orr	r8, r8, ip, lsl #8
   1f2d0:	e1839409 	orr	r9, r3, r9, lsl #8
   1f2d4:	e1822800 	orr	r2, r2, r0, lsl #16
   1f2d8:	e1888801 	orr	r8, r8, r1, lsl #16
   1f2dc:	e5d40007 	ldrb	r0, [r4, #7]
   1f2e0:	e5d4100b 	ldrb	r1, [r4, #11]
   1f2e4:	e1a03223 	lsr	r3, r3, #4
   1f2e8:	e1a03103 	lsl	r3, r3, #2
   1f2ec:	e0466003 	sub	r6, r6, r3
   1f2f0:	e1822c00 	orr	r2, r2, r0, lsl #24
   1f2f4:	e1888c01 	orr	r8, r8, r1, lsl #24
   1f2f8:	e2191c02 	ands	r1, r9, #512	; 0x200
   1f2fc:	e58d3014 	str	r3, [sp, #20]
   1f300:	e6bf2f32 	rev	r2, r2
   1f304:	1286b001 	addne	fp, r6, #1
   1f308:	01a0b006 	moveq	fp, r6
   1f30c:	e2193c01 	ands	r3, r9, #256	; 0x100
   1f310:	e58d1018 	str	r1, [sp, #24]
   1f314:	e58d200c 	str	r2, [sp, #12]
   1f318:	e58d301c 	str	r3, [sp, #28]
   1f31c:	e5d4300e 	ldrb	r3, [r4, #14]
   1f320:	e5d4200f 	ldrb	r2, [r4, #15]
   1f324:	e1a01004 	mov	r1, r4
   1f328:	e1833402 	orr	r3, r3, r2, lsl #8
   1f32c:	e6bf3fb3 	rev16	r3, r3
   1f330:	e6ff3073 	uxth	r3, r3
   1f334:	e1a00005 	mov	r0, r5
   1f338:	e58d3010 	str	r3, [sp, #16]
   1f33c:	128bb001 	addne	fp, fp, #1
   1f340:	ebfffc66 	bl	1e4e0 <CTCPConnection::ScanOptions(TTCPHeader*)>
   1f344:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f348:	e6bf8f38 	rev	r8, r8
   1f34c:	e353000a 	cmp	r3, #10
   1f350:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f354:	ea000031 	b	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f358:	0001f53c 	.word	0x0001f53c
   1f35c:	0001f428 	.word	0x0001f428
   1f360:	0001f400 	.word	0x0001f400
   1f364:	0001f3a4 	.word	0x0001f3a4
   1f368:	0001f3a4 	.word	0x0001f3a4
   1f36c:	0001f3a4 	.word	0x0001f3a4
   1f370:	0001f3a4 	.word	0x0001f3a4
   1f374:	0001f3a4 	.word	0x0001f3a4
   1f378:	0001f3a4 	.word	0x0001f3a4
   1f37c:	0001f3a4 	.word	0x0001f3a4
   1f380:	0001f3a4 	.word	0x0001f3a4
   1f384:	e5d4300d 	ldrb	r3, [r4, #13]
   1f388:	e3130002 	tst	r3, #2
   1f38c:	0affff9b 	beq	1f200 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1f390:	e280a01c 	add	sl, r0, #28
   1f394:	e1a0000a 	mov	r0, sl
   1f398:	e1a01007 	mov	r1, r7
   1f39c:	eb0008b7 	bl	21680 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f3a0:	eaffffba 	b	1f290 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa4>
   1f3a4:	e59530ac 	ldr	r3, [r5, #172]	; 0xac
   1f3a8:	e3530000 	cmp	r3, #0
   1f3ac:	0a000080 	beq	1f5b4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3c8>
   1f3b0:	e59520a8 	ldr	r2, [r5, #168]	; 0xa8
   1f3b4:	e59d100c 	ldr	r1, [sp, #12]
   1f3b8:	e35b0000 	cmp	fp, #0
   1f3bc:	e0421001 	sub	r1, r2, r1
   1f3c0:	1a000116 	bne	1f820 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x634>
   1f3c4:	e3510000 	cmp	r1, #0
   1f3c8:	da0001ea 	ble	1fb78 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x98c>
   1f3cc:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f3d0:	e3530003 	cmp	r3, #3
   1f3d4:	0a00007c 	beq	1f5cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1f3d8:	e3a01000 	mov	r1, #0
   1f3dc:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f3e0:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f3e4:	e1a00005 	mov	r0, r5
   1f3e8:	e58d1004 	str	r1, [sp, #4]
   1f3ec:	e58d1000 	str	r1, [sp]
   1f3f0:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f3f4:	ebfffbda 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f3f8:	e3a00001 	mov	r0, #1
   1f3fc:	eaffff80 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f400:	e3190a01 	tst	r9, #4096	; 0x1000
   1f404:	0a000095 	beq	1f660 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x474>
   1f408:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1f40c:	e0433008 	sub	r3, r3, r8
   1f410:	e3530000 	cmp	r3, #0
   1f414:	ba0001bf 	blt	1fb18 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x92c>
   1f418:	e2193b01 	ands	r3, r9, #1024	; 0x400
   1f41c:	0a0000fc 	beq	1f814 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x628>
   1f420:	e3a00001 	mov	r0, #1
   1f424:	eaffff76 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f428:	e2193b01 	ands	r3, r9, #1024	; 0x400
   1f42c:	1afffffb 	bne	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f430:	e2199a01 	ands	r9, r9, #4096	; 0x1000
   1f434:	1a0000e9 	bne	1f7e0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5f4>
   1f438:	e59d3018 	ldr	r3, [sp, #24]
   1f43c:	e3530000 	cmp	r3, #0
   1f440:	0afffff6 	beq	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f444:	e59f3b30 	ldr	r3, [pc, #2864]	; 1ff7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd90>
   1f448:	e5933000 	ldr	r3, [r3]
   1f44c:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   1f450:	2a0000ce 	bcs	1f790 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5a4>
   1f454:	e59d200c 	ldr	r2, [sp, #12]
   1f458:	e59d1010 	ldr	r1, [sp, #16]
   1f45c:	e2823001 	add	r3, r2, #1
   1f460:	e35b0000 	cmp	fp, #0
   1f464:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1f468:	e5851094 	str	r1, [r5, #148]	; 0x94
   1f46c:	e585209c 	str	r2, [r5, #156]	; 0x9c
   1f470:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f474:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1f478:	0a0001f9 	beq	1fc64 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa78>
   1f47c:	e3560000 	cmp	r6, #0
   1f480:	0a000005 	beq	1f49c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x2b0>
   1f484:	e59d1014 	ldr	r1, [sp, #20]
   1f488:	e1a03009 	mov	r3, r9
   1f48c:	e1a02006 	mov	r2, r6
   1f490:	e0841001 	add	r1, r4, r1
   1f494:	e285003c 	add	r0, r5, #60	; 0x3c
   1f498:	eb0007ca 	bl	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1f49c:	e1a00005 	mov	r0, r5
   1f4a0:	ebfffc3b 	bl	1e594 <CTCPConnection::CalculateISN()>
   1f4a4:	e28560b8 	add	r6, r5, #184	; 0xb8
   1f4a8:	e1a01000 	mov	r1, r0
   1f4ac:	e58500a4 	str	r0, [r5, #164]	; 0xa4
   1f4b0:	e1a00006 	mov	r0, r6
   1f4b4:	eb00044b 	bl	205e8 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1f4b8:	e1a01007 	mov	r1, r7
   1f4bc:	e285000c 	add	r0, r5, #12
   1f4c0:	eb0006d1 	bl	2100c <CIPAddress::Set(CIPAddress const&)>
   1f4c4:	e5d42001 	ldrb	r2, [r4, #1]
   1f4c8:	e5d43000 	ldrb	r3, [r4]
   1f4cc:	e1a01007 	mov	r1, r7
   1f4d0:	e1833402 	orr	r3, r3, r2, lsl #8
   1f4d4:	e6bf3fb3 	rev16	r3, r3
   1f4d8:	e1a0000a 	mov	r0, sl
   1f4dc:	e1c531b4 	strh	r3, [r5, #20]
   1f4e0:	eb000866 	bl	21680 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f4e4:	e3a01000 	mov	r1, #0
   1f4e8:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f4ec:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1f4f0:	e1a00005 	mov	r0, r5
   1f4f4:	e58d1004 	str	r1, [sp, #4]
   1f4f8:	e58d1000 	str	r1, [sp]
   1f4fc:	e3a01c12 	mov	r1, #4608	; 0x1200
   1f500:	ebfffb97 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f504:	e1a00006 	mov	r0, r6
   1f508:	e3a02001 	mov	r2, #1
   1f50c:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1f510:	eb000451 	bl	2065c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1f514:	e3a02003 	mov	r2, #3
   1f518:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1f51c:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1f520:	e2832001 	add	r2, r3, #1
   1f524:	e2850068 	add	r0, r5, #104	; 0x68
   1f528:	e585308c 	str	r3, [r5, #140]	; 0x8c
   1f52c:	e5852090 	str	r2, [r5, #144]	; 0x90
   1f530:	eb001433 	bl	24604 <CSynchronizationEvent::Set()>
   1f534:	e3a00001 	mov	r0, #1
   1f538:	eaffff31 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f53c:	e2196b01 	ands	r6, r9, #1024	; 0x400
   1f540:	1affffb6 	bne	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f544:	e2199a01 	ands	r9, r9, #4096	; 0x1000
   1f548:	e1a01007 	mov	r1, r7
   1f54c:	e285000c 	add	r0, r5, #12
   1f550:	0a000090 	beq	1f798 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5ac>
   1f554:	eb0006ac 	bl	2100c <CIPAddress::Set(CIPAddress const&)>
   1f558:	e5d43000 	ldrb	r3, [r4]
   1f55c:	e5d42001 	ldrb	r2, [r4, #1]
   1f560:	e1a01007 	mov	r1, r7
   1f564:	e1833402 	orr	r3, r3, r2, lsl #8
   1f568:	e6bf3fb3 	rev16	r3, r3
   1f56c:	e1c531b4 	strh	r3, [r5, #20]
   1f570:	e1a0000a 	mov	r0, sl
   1f574:	eb000841 	bl	21680 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f578:	e1a03006 	mov	r3, r6
   1f57c:	e58d6004 	str	r6, [sp, #4]
   1f580:	e58d6000 	str	r6, [sp]
   1f584:	e1a02008 	mov	r2, r8
   1f588:	e1a00005 	mov	r0, r5
   1f58c:	e3a01b01 	mov	r1, #1024	; 0x400
   1f590:	ebfffb73 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f594:	e3a00001 	mov	r0, #1
   1f598:	eaffff19 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f59c:	e3a02f9f 	mov	r2, #636	; 0x27c
   1f5a0:	e59f19d8 	ldr	r1, [pc, #2520]	; 1ff80 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd94>
   1f5a4:	e59f09d8 	ldr	r0, [pc, #2520]	; 1ff84 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd98>
   1f5a8:	eb001498 	bl	24810 <assertion_failed>
   1f5ac:	e3e00000 	mvn	r0, #0
   1f5b0:	eaffff13 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f5b4:	e35b0000 	cmp	fp, #0
   1f5b8:	1affff83 	bne	1f3cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1f5bc:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f5c0:	e59d200c 	ldr	r2, [sp, #12]
   1f5c4:	e1520003 	cmp	r2, r3
   1f5c8:	1affff7f 	bne	1f3cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1f5cc:	e3190b01 	tst	r9, #1024	; 0x400
   1f5d0:	0a000054 	beq	1f728 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x53c>
   1f5d4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f5d8:	e2433003 	sub	r3, r3, #3
   1f5dc:	e3530007 	cmp	r3, #7
   1f5e0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f5e4:	ea00015e 	b	1fb64 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x978>
   1f5e8:	0001f640 	.word	0x0001f640
   1f5ec:	0001f608 	.word	0x0001f608
   1f5f0:	0001f608 	.word	0x0001f608
   1f5f4:	0001f608 	.word	0x0001f608
   1f5f8:	0001f608 	.word	0x0001f608
   1f5fc:	0001f628 	.word	0x0001f628
   1f600:	0001f628 	.word	0x0001f628
   1f604:	0001f628 	.word	0x0001f628
   1f608:	e3e03000 	mvn	r3, #0
   1f60c:	e2850048 	add	r0, r5, #72	; 0x48
   1f610:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1f614:	eb0003d4 	bl	2056c <CRetransmissionQueue::Flush()>
   1f618:	e2850030 	add	r0, r5, #48	; 0x30
   1f61c:	eb000733 	bl	212f0 <CNetQueue::Flush()>
   1f620:	e285003c 	add	r0, r5, #60	; 0x3c
   1f624:	eb000731 	bl	212f0 <CNetQueue::Flush()>
   1f628:	e3a03000 	mov	r3, #0
   1f62c:	e2850068 	add	r0, r5, #104	; 0x68
   1f630:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f634:	eb0013f2 	bl	24604 <CSynchronizationEvent::Set()>
   1f638:	e3a00001 	mov	r0, #1
   1f63c:	eafffef0 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f640:	e2850048 	add	r0, r5, #72	; 0x48
   1f644:	eb0003c8 	bl	2056c <CRetransmissionQueue::Flush()>
   1f648:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1f64c:	e3530000 	cmp	r3, #0
   1f650:	1a00018b 	bne	1fc84 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa98>
   1f654:	e3a00001 	mov	r0, #1
   1f658:	e5c5002a 	strb	r0, [r5, #42]	; 0x2a
   1f65c:	eafffee8 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f660:	e3190b01 	tst	r9, #1024	; 0x400
   1f664:	1affff6d 	bne	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f668:	e2193c02 	ands	r3, r9, #512	; 0x200
   1f66c:	e3530000 	cmp	r3, #0
   1f670:	0affff6a 	beq	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f674:	e59d200c 	ldr	r2, [sp, #12]
   1f678:	e2823001 	add	r3, r2, #1
   1f67c:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1f680:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f684:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1f688:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f68c:	e0423003 	sub	r3, r2, r3
   1f690:	e3530000 	cmp	r3, #0
   1f694:	ba000156 	blt	1fbf4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa08>
   1f698:	e3a07000 	mov	r7, #0
   1f69c:	e3a03003 	mov	r3, #3
   1f6a0:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f6a4:	e58d7004 	str	r7, [sp, #4]
   1f6a8:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1f6ac:	e58d7000 	str	r7, [sp]
   1f6b0:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f6b4:	e3a01c12 	mov	r1, #4608	; 0x1200
   1f6b8:	e28580b8 	add	r8, r5, #184	; 0xb8
   1f6bc:	e1a00005 	mov	r0, r5
   1f6c0:	ebfffb27 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f6c4:	e3a02001 	mov	r2, #1
   1f6c8:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1f6cc:	e1a00008 	mov	r0, r8
   1f6d0:	eb0003e1 	bl	2065c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1f6d4:	e3a03005 	mov	r3, #5
   1f6d8:	e1a00008 	mov	r0, r8
   1f6dc:	e5853060 	str	r3, [r5, #96]	; 0x60
   1f6e0:	eb0003be 	bl	205e0 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1f6e4:	e3a01001 	mov	r1, #1
   1f6e8:	e1a02000 	mov	r2, r0
   1f6ec:	e1a00005 	mov	r0, r5
   1f6f0:	ebfffc75 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1f6f4:	e59d301c 	ldr	r3, [sp, #28]
   1f6f8:	e1530007 	cmp	r3, r7
   1f6fc:	1a000129 	bne	1fba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9bc>
   1f700:	e1560007 	cmp	r6, r7
   1f704:	0affff45 	beq	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f708:	e59d3014 	ldr	r3, [sp, #20]
   1f70c:	e285003c 	add	r0, r5, #60	; 0x3c
   1f710:	e0841003 	add	r1, r4, r3
   1f714:	e1a02006 	mov	r2, r6
   1f718:	e3a03000 	mov	r3, #0
   1f71c:	eb000729 	bl	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1f720:	e3a00001 	mov	r0, #1
   1f724:	eafffeb6 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f728:	e2193c02 	ands	r3, r9, #512	; 0x200
   1f72c:	e3530000 	cmp	r3, #0
   1f730:	0a000047 	beq	1f854 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x668>
   1f734:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f738:	e3530003 	cmp	r3, #3
   1f73c:	0a000128 	beq	1fbe4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9f8>
   1f740:	e3a04000 	mov	r4, #0
   1f744:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f748:	e3a01b01 	mov	r1, #1024	; 0x400
   1f74c:	e1a03004 	mov	r3, r4
   1f750:	e58d4004 	str	r4, [sp, #4]
   1f754:	e58d4000 	str	r4, [sp]
   1f758:	e1a00005 	mov	r0, r5
   1f75c:	ebfffb00 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f760:	e3e03000 	mvn	r3, #0
   1f764:	e2850048 	add	r0, r5, #72	; 0x48
   1f768:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1f76c:	eb00037e 	bl	2056c <CRetransmissionQueue::Flush()>
   1f770:	e2850030 	add	r0, r5, #48	; 0x30
   1f774:	eb0006dd 	bl	212f0 <CNetQueue::Flush()>
   1f778:	e285003c 	add	r0, r5, #60	; 0x3c
   1f77c:	eb0006db 	bl	212f0 <CNetQueue::Flush()>
   1f780:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1f784:	e2850068 	add	r0, r5, #104	; 0x68
   1f788:	eb00139d 	bl	24604 <CSynchronizationEvent::Set()>
   1f78c:	eaffff23 	b	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f790:	e1a01007 	mov	r1, r7
   1f794:	e285000c 	add	r0, r5, #12
   1f798:	eb00061b 	bl	2100c <CIPAddress::Set(CIPAddress const&)>
   1f79c:	e5d42001 	ldrb	r2, [r4, #1]
   1f7a0:	e5d43000 	ldrb	r3, [r4]
   1f7a4:	e1a01007 	mov	r1, r7
   1f7a8:	e1833402 	orr	r3, r3, r2, lsl #8
   1f7ac:	e6bf3fb3 	rev16	r3, r3
   1f7b0:	e1a0000a 	mov	r0, sl
   1f7b4:	e1c531b4 	strh	r3, [r5, #20]
   1f7b8:	eb0007b0 	bl	21680 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f7bc:	e59d300c 	ldr	r3, [sp, #12]
   1f7c0:	e58d9004 	str	r9, [sp, #4]
   1f7c4:	e58d9000 	str	r9, [sp]
   1f7c8:	e083300b 	add	r3, r3, fp
   1f7cc:	e1a02009 	mov	r2, r9
   1f7d0:	e1a00005 	mov	r0, r5
   1f7d4:	e3a01b05 	mov	r1, #5120	; 0x1400
   1f7d8:	ebfffae1 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f7dc:	eaffff0f 	b	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f7e0:	e1a01007 	mov	r1, r7
   1f7e4:	e285000c 	add	r0, r5, #12
   1f7e8:	e58d300c 	str	r3, [sp, #12]
   1f7ec:	eb000606 	bl	2100c <CIPAddress::Set(CIPAddress const&)>
   1f7f0:	e5d40001 	ldrb	r0, [r4, #1]
   1f7f4:	e5d42000 	ldrb	r2, [r4]
   1f7f8:	e1a01007 	mov	r1, r7
   1f7fc:	e1822400 	orr	r2, r2, r0, lsl #8
   1f800:	e6bf2fb2 	rev16	r2, r2
   1f804:	e1a0000a 	mov	r0, sl
   1f808:	e1c521b4 	strh	r2, [r5, #20]
   1f80c:	eb00079b 	bl	21680 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f810:	e59d300c 	ldr	r3, [sp, #12]
   1f814:	e58d3004 	str	r3, [sp, #4]
   1f818:	e58d3000 	str	r3, [sp]
   1f81c:	eaffff58 	b	1f584 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x398>
   1f820:	e3510000 	cmp	r1, #0
   1f824:	da0000d9 	ble	1fb90 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9a4>
   1f828:	e59d100c 	ldr	r1, [sp, #12]
   1f82c:	e081000b 	add	r0, r1, fp
   1f830:	e2821001 	add	r1, r2, #1
   1f834:	e0411000 	sub	r1, r1, r0
   1f838:	e3510000 	cmp	r1, #0
   1f83c:	cafffee2 	bgt	1f3cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1f840:	e0833002 	add	r3, r3, r2
   1f844:	e1e03003 	mvn	r3, r3
   1f848:	e1730000 	cmn	r3, r0
   1f84c:	5afffede 	bpl	1f3cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1f850:	eaffff5d 	b	1f5cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1f854:	e3190a01 	tst	r9, #4096	; 0x1000
   1f858:	0afffef0 	beq	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f85c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f860:	e2433003 	sub	r3, r3, #3
   1f864:	e3530007 	cmp	r3, #7
   1f868:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f86c:	ea000100 	b	1fc74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa88>
   1f870:	0001fa40 	.word	0x0001fa40
   1f874:	0001f9f0 	.word	0x0001f9f0
   1f878:	0001f9f0 	.word	0x0001f9f0
   1f87c:	0001f9f0 	.word	0x0001f9f0
   1f880:	0001f9f0 	.word	0x0001f9f0
   1f884:	0001f9f0 	.word	0x0001f9f0
   1f888:	0001f9c8 	.word	0x0001f9c8
   1f88c:	0001f890 	.word	0x0001f890
   1f890:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f894:	e1580003 	cmp	r8, r3
   1f898:	0a000120 	beq	1fd20 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb34>
   1f89c:	e35b0000 	cmp	fp, #0
   1f8a0:	0afffede 	beq	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f8a4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f8a8:	e2433004 	sub	r3, r3, #4
   1f8ac:	e3530006 	cmp	r3, #6
   1f8b0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f8b4:	ea0000fa 	b	1fca4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xab8>
   1f8b8:	0001f8d4 	.word	0x0001f8d4
   1f8bc:	0001f8d4 	.word	0x0001f8d4
   1f8c0:	0001f8d4 	.word	0x0001f8d4
   1f8c4:	0001f93c 	.word	0x0001f93c
   1f8c8:	0001f93c 	.word	0x0001f93c
   1f8cc:	0001f93c 	.word	0x0001f93c
   1f8d0:	0001f93c 	.word	0x0001f93c
   1f8d4:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f8d8:	e59d200c 	ldr	r2, [sp, #12]
   1f8dc:	e1520003 	cmp	r2, r3
   1f8e0:	1a000105 	bne	1fcfc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb10>
   1f8e4:	e3560000 	cmp	r6, #0
   1f8e8:	0a000013 	beq	1f93c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x750>
   1f8ec:	e59d3014 	ldr	r3, [sp, #20]
   1f8f0:	e1a02006 	mov	r2, r6
   1f8f4:	e0841003 	add	r1, r4, r3
   1f8f8:	e285003c 	add	r0, r5, #60	; 0x3c
   1f8fc:	e3a03000 	mov	r3, #0
   1f900:	eb0006b0 	bl	213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1f904:	e3a02000 	mov	r2, #0
   1f908:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f90c:	e58d2004 	str	r2, [sp, #4]
   1f910:	e0863003 	add	r3, r6, r3
   1f914:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f918:	e58d2000 	str	r2, [sp]
   1f91c:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f920:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f924:	e1a00005 	mov	r0, r5
   1f928:	ebfffa8d 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f92c:	e3190b02 	tst	r9, #2048	; 0x800
   1f930:	0a000001 	beq	1f93c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x750>
   1f934:	e2850068 	add	r0, r5, #104	; 0x68
   1f938:	eb001331 	bl	24604 <CSynchronizationEvent::Set()>
   1f93c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f940:	e3530000 	cmp	r3, #0
   1f944:	0afffeb5 	beq	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f948:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f94c:	e3530001 	cmp	r3, #1
   1f950:	0afffeb2 	beq	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f954:	e5d5202a 	ldrb	r2, [r5, #42]	; 0x2a
   1f958:	e59d301c 	ldr	r3, [sp, #28]
   1f95c:	e3530000 	cmp	r3, #0
   1f960:	13520002 	cmpne	r2, #2
   1f964:	03a02001 	moveq	r2, #1
   1f968:	13a02000 	movne	r2, #0
   1f96c:	0afffeab 	beq	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f970:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f974:	e58d2004 	str	r2, [sp, #4]
   1f978:	e2833001 	add	r3, r3, #1
   1f97c:	e58d2000 	str	r2, [sp]
   1f980:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f984:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f988:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f98c:	e1a00005 	mov	r0, r5
   1f990:	ebfffa73 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f994:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f998:	e2433003 	sub	r3, r3, #3
   1f99c:	e3530007 	cmp	r3, #7
   1f9a0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f9a4:	ea000143 	b	1feb8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xccc>
   1f9a8:	0001fea0 	.word	0x0001fea0
   1f9ac:	0001fea0 	.word	0x0001fea0
   1f9b0:	0001fecc 	.word	0x0001fecc
   1f9b4:	0001fe68 	.word	0x0001fe68
   1f9b8:	0001f420 	.word	0x0001f420
   1f9bc:	0001f420 	.word	0x0001f420
   1f9c0:	0001f420 	.word	0x0001f420
   1f9c4:	0001fd58 	.word	0x0001fd58
   1f9c8:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f9cc:	e1580003 	cmp	r8, r3
   1f9d0:	1affffb1 	bne	1f89c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1f9d4:	e3a03000 	mov	r3, #0
   1f9d8:	e2850068 	add	r0, r5, #104	; 0x68
   1f9dc:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1f9e0:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f9e4:	eb001306 	bl	24604 <CSynchronizationEvent::Set()>
   1f9e8:	e3a00001 	mov	r0, #1
   1f9ec:	eafffe04 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f9f0:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f9f4:	e0532008 	subs	r2, r3, r8
   1f9f8:	4a000112 	bmi	1fe48 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc5c>
   1f9fc:	e0483003 	sub	r3, r8, r3
   1fa00:	e3530000 	cmp	r3, #0
   1fa04:	c5952090 	ldrgt	r2, [r5, #144]	; 0x90
   1fa08:	da0000f7 	ble	1fdec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc00>
   1fa0c:	e0423008 	sub	r3, r2, r8
   1fa10:	e3530000 	cmp	r3, #0
   1fa14:	ba0000eb 	blt	1fdc8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbdc>
   1fa18:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1fa1c:	e2433004 	sub	r3, r3, #4
   1fa20:	e3530004 	cmp	r3, #4
   1fa24:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1fa28:	ea0000e2 	b	1fdb8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbcc>
   1fa2c:	0001f89c 	.word	0x0001f89c
   1fa30:	0001fab8 	.word	0x0001fab8
   1fa34:	0001fafc 	.word	0x0001fafc
   1fa38:	0001f89c 	.word	0x0001f89c
   1fa3c:	0001fa70 	.word	0x0001fa70
   1fa40:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1fa44:	e0433008 	sub	r3, r3, r8
   1fa48:	e3530000 	cmp	r3, #0
   1fa4c:	da000098 	ble	1fcb4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xac8>
   1fa50:	e3a03000 	mov	r3, #0
   1fa54:	e1a02008 	mov	r2, r8
   1fa58:	e58d3004 	str	r3, [sp, #4]
   1fa5c:	e58d3000 	str	r3, [sp]
   1fa60:	e3a01b01 	mov	r1, #1024	; 0x400
   1fa64:	e1a00005 	mov	r0, r5
   1fa68:	ebfffa3d 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fa6c:	eaffff8a 	b	1f89c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fa70:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fa74:	e1580003 	cmp	r8, r3
   1fa78:	1affff87 	bne	1f89c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fa7c:	e1a01008 	mov	r1, r8
   1fa80:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fa84:	eb000359 	bl	207f0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fa88:	e3a03000 	mov	r3, #0
   1fa8c:	e1a00005 	mov	r0, r5
   1fa90:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1fa94:	e3a01001 	mov	r1, #1
   1fa98:	ebfffad8 	bl	1e600 <CTCPConnection::StopTimer(unsigned int)>
   1fa9c:	e3a0300a 	mov	r3, #10
   1faa0:	e59f24e0 	ldr	r2, [pc, #1248]	; 1ff88 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1faa4:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1faa8:	e3a01002 	mov	r1, #2
   1faac:	e1a00005 	mov	r0, r5
   1fab0:	ebfffb85 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fab4:	eaffff78 	b	1f89c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fab8:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fabc:	e1580003 	cmp	r8, r3
   1fac0:	1affff75 	bne	1f89c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fac4:	e1a01008 	mov	r1, r8
   1fac8:	e28500b8 	add	r0, r5, #184	; 0xb8
   1facc:	eb000347 	bl	207f0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fad0:	e3a03000 	mov	r3, #0
   1fad4:	e3a01001 	mov	r1, #1
   1fad8:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1fadc:	e1a00005 	mov	r0, r5
   1fae0:	ebfffac6 	bl	1e600 <CTCPConnection::StopTimer(unsigned int)>
   1fae4:	e3a03006 	mov	r3, #6
   1fae8:	e59f2498 	ldr	r2, [pc, #1176]	; 1ff88 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1faec:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1faf0:	e3a01002 	mov	r1, #2
   1faf4:	e1a00005 	mov	r0, r5
   1faf8:	ebfffb73 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fafc:	e2850048 	add	r0, r5, #72	; 0x48
   1fb00:	eb0001ce 	bl	20240 <CRetransmissionQueue::IsEmpty() const>
   1fb04:	e3500000 	cmp	r0, #0
   1fb08:	0affff63 	beq	1f89c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fb0c:	e2850068 	add	r0, r5, #104	; 0x68
   1fb10:	eb0012bb 	bl	24604 <CSynchronizationEvent::Set()>
   1fb14:	eaffff60 	b	1f89c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fb18:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fb1c:	e0483003 	sub	r3, r8, r3
   1fb20:	e3530000 	cmp	r3, #0
   1fb24:	cafffe3b 	bgt	1f418 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x22c>
   1fb28:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1fb2c:	e0433008 	sub	r3, r3, r8
   1fb30:	e3530000 	cmp	r3, #0
   1fb34:	cafffe39 	bgt	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1fb38:	e3190b01 	tst	r9, #1024	; 0x400
   1fb3c:	0a00008a 	beq	1fd6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb80>
   1fb40:	e3a03000 	mov	r3, #0
   1fb44:	e3e02000 	mvn	r2, #0
   1fb48:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fb4c:	e2850068 	add	r0, r5, #104	; 0x68
   1fb50:	e5c5305d 	strb	r3, [r5, #93]	; 0x5d
   1fb54:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1fb58:	eb0012a9 	bl	24604 <CSynchronizationEvent::Set()>
   1fb5c:	e3a00001 	mov	r0, #1
   1fb60:	eafffda7 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fb64:	e1a00005 	mov	r0, r5
   1fb68:	e59f141c 	ldr	r1, [pc, #1052]	; 1ff8c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xda0>
   1fb6c:	ebfffd2f 	bl	1f030 <CTCPConnection::UnexpectedState(unsigned int)>
   1fb70:	e3a00001 	mov	r0, #1
   1fb74:	eafffda2 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fb78:	e0833002 	add	r3, r3, r2
   1fb7c:	e59d200c 	ldr	r2, [sp, #12]
   1fb80:	e0423003 	sub	r3, r2, r3
   1fb84:	e3530000 	cmp	r3, #0
   1fb88:	aafffe0f 	bge	1f3cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1fb8c:	eafffe8e 	b	1f5cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1fb90:	e59d000c 	ldr	r0, [sp, #12]
   1fb94:	e0831002 	add	r1, r3, r2
   1fb98:	e0401001 	sub	r1, r0, r1
   1fb9c:	e3510000 	cmp	r1, #0
   1fba0:	aaffff20 	bge	1f828 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x63c>
   1fba4:	eafffe88 	b	1f5cc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1fba8:	e58d7004 	str	r7, [sp, #4]
   1fbac:	e58d7000 	str	r7, [sp]
   1fbb0:	e1a03007 	mov	r3, r7
   1fbb4:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fbb8:	e3a01b01 	mov	r1, #1024	; 0x400
   1fbbc:	e1a00005 	mov	r0, r5
   1fbc0:	ebfff9e7 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fbc4:	e3e03000 	mvn	r3, #0
   1fbc8:	e5c5702a 	strb	r7, [r5, #42]	; 0x2a
   1fbcc:	e2850068 	add	r0, r5, #104	; 0x68
   1fbd0:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1fbd4:	eb00128a 	bl	24604 <CSynchronizationEvent::Set()>
   1fbd8:	e3560000 	cmp	r6, #0
   1fbdc:	0afffe0f 	beq	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1fbe0:	eafffec8 	b	1f708 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x51c>
   1fbe4:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1fbe8:	e3530000 	cmp	r3, #0
   1fbec:	1afffed3 	bne	1f740 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x554>
   1fbf0:	eafffe97 	b	1f654 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x468>
   1fbf4:	e3a07000 	mov	r7, #0
   1fbf8:	e3a03004 	mov	r3, #4
   1fbfc:	e3a01001 	mov	r1, #1
   1fc00:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fc04:	e1a00005 	mov	r0, r5
   1fc08:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1fc0c:	ebfffa7b 	bl	1e600 <CTCPConnection::StopTimer(unsigned int)>
   1fc10:	e3a03005 	mov	r3, #5
   1fc14:	e2850068 	add	r0, r5, #104	; 0x68
   1fc18:	e5853060 	str	r3, [r5, #96]	; 0x60
   1fc1c:	eb001278 	bl	24604 <CSynchronizationEvent::Set()>
   1fc20:	e59d3010 	ldr	r3, [sp, #16]
   1fc24:	e58d7004 	str	r7, [sp, #4]
   1fc28:	e58d7000 	str	r7, [sp]
   1fc2c:	e5853094 	str	r3, [r5, #148]	; 0x94
   1fc30:	e59d300c 	ldr	r3, [sp, #12]
   1fc34:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1fc38:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1fc3c:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fc40:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fc44:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fc48:	e1a00005 	mov	r0, r5
   1fc4c:	ebfff9c4 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fc50:	e2193c01 	ands	r3, r9, #256	; 0x100
   1fc54:	e1530007 	cmp	r3, r7
   1fc58:	01560007 	cmpeq	r6, r7
   1fc5c:	1affff0e 	bne	1f89c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fc60:	eafffdee 	b	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1fc64:	e59f2324 	ldr	r2, [pc, #804]	; 1ff90 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xda4>
   1fc68:	e59f1310 	ldr	r1, [pc, #784]	; 1ff80 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd94>
   1fc6c:	e59f0320 	ldr	r0, [pc, #800]	; 1ff94 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xda8>
   1fc70:	eb0012e6 	bl	24810 <assertion_failed>
   1fc74:	e59f131c 	ldr	r1, [pc, #796]	; 1ff98 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdac>
   1fc78:	e1a00005 	mov	r0, r5
   1fc7c:	ebfffceb 	bl	1f030 <CTCPConnection::UnexpectedState(unsigned int)>
   1fc80:	eaffff05 	b	1f89c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fc84:	e3e02000 	mvn	r2, #0
   1fc88:	e3a03000 	mov	r3, #0
   1fc8c:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1fc90:	e2850068 	add	r0, r5, #104	; 0x68
   1fc94:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fc98:	eb001259 	bl	24604 <CSynchronizationEvent::Set()>
   1fc9c:	e3a00001 	mov	r0, #1
   1fca0:	eafffd57 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fca4:	e59f12f0 	ldr	r1, [pc, #752]	; 1ff9c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdb0>
   1fca8:	e1a00005 	mov	r0, r5
   1fcac:	ebfffcdf 	bl	1f030 <CTCPConnection::UnexpectedState(unsigned int)>
   1fcb0:	eaffff21 	b	1f93c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x750>
   1fcb4:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fcb8:	e0483003 	sub	r3, r8, r3
   1fcbc:	e3530000 	cmp	r3, #0
   1fcc0:	caffff62 	bgt	1fa50 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x864>
   1fcc4:	e59d3010 	ldr	r3, [sp, #16]
   1fcc8:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1fccc:	e5853094 	str	r3, [r5, #148]	; 0x94
   1fcd0:	e59d300c 	ldr	r3, [sp, #12]
   1fcd4:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1fcd8:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1fcdc:	e1a01008 	mov	r1, r8
   1fce0:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fce4:	eb0002c1 	bl	207f0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fce8:	e3a02004 	mov	r2, #4
   1fcec:	e3a03005 	mov	r3, #5
   1fcf0:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1fcf4:	e5853060 	str	r3, [r5, #96]	; 0x60
   1fcf8:	eafffee7 	b	1f89c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fcfc:	e3a02000 	mov	r2, #0
   1fd00:	e58d2004 	str	r2, [sp, #4]
   1fd04:	e58d2000 	str	r2, [sp]
   1fd08:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fd0c:	e1a00005 	mov	r0, r5
   1fd10:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fd14:	ebfff992 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fd18:	e3a00001 	mov	r0, #1
   1fd1c:	eafffd38 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fd20:	e3a02000 	mov	r2, #0
   1fd24:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fd28:	e5c5205e 	strb	r2, [r5, #94]	; 0x5e
   1fd2c:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fd30:	e58d2004 	str	r2, [sp, #4]
   1fd34:	e58d2000 	str	r2, [sp]
   1fd38:	e1a00005 	mov	r0, r5
   1fd3c:	e1a02008 	mov	r2, r8
   1fd40:	ebfff987 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fd44:	e59f223c 	ldr	r2, [pc, #572]	; 1ff88 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1fd48:	e3a01002 	mov	r1, #2
   1fd4c:	e1a00005 	mov	r0, r5
   1fd50:	ebfffadd 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fd54:	eafffed0 	b	1f89c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fd58:	e1a00005 	mov	r0, r5
   1fd5c:	e59f2224 	ldr	r2, [pc, #548]	; 1ff88 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1fd60:	e3a01002 	mov	r1, #2
   1fd64:	ebfffad8 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fd68:	eafffdac 	b	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1fd6c:	e2193c02 	ands	r3, r9, #512	; 0x200
   1fd70:	e3530000 	cmp	r3, #0
   1fd74:	0afffda9 	beq	1f420 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1fd78:	e59d200c 	ldr	r2, [sp, #12]
   1fd7c:	e1a01008 	mov	r1, r8
   1fd80:	e2823001 	add	r3, r2, #1
   1fd84:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1fd88:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1fd8c:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fd90:	eb000296 	bl	207f0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fd94:	e595108c 	ldr	r1, [r5, #140]	; 0x8c
   1fd98:	e0481001 	sub	r1, r8, r1
   1fd9c:	e3510001 	cmp	r1, #1
   1fda0:	9a000002 	bls	1fdb0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc4>
   1fda4:	e2411001 	sub	r1, r1, #1
   1fda8:	e2850048 	add	r0, r5, #72	; 0x48
   1fdac:	eb0001ca 	bl	204dc <CRetransmissionQueue::Advance(unsigned int)>
   1fdb0:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1fdb4:	eafffe32 	b	1f684 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x498>
   1fdb8:	e3a01e49 	mov	r1, #1168	; 0x490
   1fdbc:	e1a00005 	mov	r0, r5
   1fdc0:	ebfffc9a 	bl	1f030 <CTCPConnection::UnexpectedState(unsigned int)>
   1fdc4:	eafffeb4 	b	1f89c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fdc8:	e3a03000 	mov	r3, #0
   1fdcc:	e58d3004 	str	r3, [sp, #4]
   1fdd0:	e58d3000 	str	r3, [sp]
   1fdd4:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fdd8:	e1a00005 	mov	r0, r5
   1fddc:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fde0:	ebfff95f 	bl	1e364 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fde4:	e3a00001 	mov	r0, #1
   1fde8:	eafffd05 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fdec:	e3520000 	cmp	r2, #0
   1fdf0:	1affff08 	bne	1fa18 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1fdf4:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fdf8:	e0483003 	sub	r3, r8, r3
   1fdfc:	e3530000 	cmp	r3, #0
   1fe00:	caffff04 	bgt	1fa18 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1fe04:	e595309c 	ldr	r3, [r5, #156]	; 0x9c
   1fe08:	e59d100c 	ldr	r1, [sp, #12]
   1fe0c:	e0432001 	sub	r2, r3, r1
   1fe10:	e3520000 	cmp	r2, #0
   1fe14:	ba000005 	blt	1fe30 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc44>
   1fe18:	e1510003 	cmp	r1, r3
   1fe1c:	1afffefd 	bne	1fa18 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1fe20:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1fe24:	e0433008 	sub	r3, r3, r8
   1fe28:	e3530000 	cmp	r3, #0
   1fe2c:	cafffef9 	bgt	1fa18 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1fe30:	e59d3010 	ldr	r3, [sp, #16]
   1fe34:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1fe38:	e5853094 	str	r3, [r5, #148]	; 0x94
   1fe3c:	e59d300c 	ldr	r3, [sp, #12]
   1fe40:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1fe44:	eafffef3 	b	1fa18 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1fe48:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fe4c:	e0481002 	sub	r1, r8, r2
   1fe50:	e3510000 	cmp	r1, #0
   1fe54:	da000026 	ble	1fef4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd08>
   1fe58:	e0483003 	sub	r3, r8, r3
   1fe5c:	e3530000 	cmp	r3, #0
   1fe60:	cafffee9 	bgt	1fa0c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x820>
   1fe64:	eafffeeb 	b	1fa18 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1fe68:	e3a01001 	mov	r1, #1
   1fe6c:	e1a00005 	mov	r0, r5
   1fe70:	ebfff9e2 	bl	1e600 <CTCPConnection::StopTimer(unsigned int)>
   1fe74:	e3a01000 	mov	r1, #0
   1fe78:	e1a00005 	mov	r0, r5
   1fe7c:	ebfff9df 	bl	1e600 <CTCPConnection::StopTimer(unsigned int)>
   1fe80:	e3a0300a 	mov	r3, #10
   1fe84:	e1a00005 	mov	r0, r5
   1fe88:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fe8c:	e59f20f4 	ldr	r2, [pc, #244]	; 1ff88 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1fe90:	e3a01002 	mov	r1, #2
   1fe94:	ebfffa8c 	bl	1e8cc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fe98:	e3a00001 	mov	r0, #1
   1fe9c:	eafffcd8 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fea0:	e3a03007 	mov	r3, #7
   1fea4:	e2850068 	add	r0, r5, #104	; 0x68
   1fea8:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1feac:	eb0011d4 	bl	24604 <CSynchronizationEvent::Set()>
   1feb0:	e3a00001 	mov	r0, #1
   1feb4:	eafffcd2 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1feb8:	e1a00005 	mov	r0, r5
   1febc:	e59f10dc 	ldr	r1, [pc, #220]	; 1ffa0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdb4>
   1fec0:	ebfffc5a 	bl	1f030 <CTCPConnection::UnexpectedState(unsigned int)>
   1fec4:	e3a00001 	mov	r0, #1
   1fec8:	eafffccd 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fecc:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fed0:	e1580003 	cmp	r8, r3
   1fed4:	03a04000 	moveq	r4, #0
   1fed8:	03a01001 	moveq	r1, #1
   1fedc:	05c5405e 	strbeq	r4, [r5, #94]	; 0x5e
   1fee0:	0affffe1 	beq	1fe6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc80>
   1fee4:	e3a03008 	mov	r3, #8
   1fee8:	e3a00001 	mov	r0, #1
   1feec:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fef0:	eafffcc3 	b	1f204 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fef4:	e1a01008 	mov	r1, r8
   1fef8:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fefc:	eb00023b 	bl	207f0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1ff00:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1ff04:	e595708c 	ldr	r7, [r5, #140]	; 0x8c
   1ff08:	e1580003 	cmp	r8, r3
   1ff0c:	e0487007 	sub	r7, r8, r7
   1ff10:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1ff14:	1a000004 	bne	1ff2c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd40>
   1ff18:	e3a01001 	mov	r1, #1
   1ff1c:	e1a00005 	mov	r0, r5
   1ff20:	ebfff9b6 	bl	1e600 <CTCPConnection::StopTimer(unsigned int)>
   1ff24:	e3a03005 	mov	r3, #5
   1ff28:	e5853060 	str	r3, [r5, #96]	; 0x60
   1ff2c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1ff30:	e3530005 	cmp	r3, #5
   1ff34:	0a00000c 	beq	1ff6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd80>
   1ff38:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1ff3c:	e3530008 	cmp	r3, #8
   1ff40:	0a000009 	beq	1ff6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd80>
   1ff44:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1ff48:	e3530004 	cmp	r3, #4
   1ff4c:	03570001 	cmpeq	r7, #1
   1ff50:	0affffab 	beq	1fe04 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc18>
   1ff54:	e3570000 	cmp	r7, #0
   1ff58:	0affffa9 	beq	1fe04 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc18>
   1ff5c:	e1a01007 	mov	r1, r7
   1ff60:	e2850048 	add	r0, r5, #72	; 0x48
   1ff64:	eb00015c 	bl	204dc <CRetransmissionQueue::Advance(unsigned int)>
   1ff68:	eaffffa5 	b	1fe04 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc18>
   1ff6c:	e3a03000 	mov	r3, #0
   1ff70:	e2477001 	sub	r7, r7, #1
   1ff74:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1ff78:	eafffff1 	b	1ff44 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd58>
   1ff7c:	0004e204 	.word	0x0004e204
   1ff80:	000441dc 	.word	0x000441dc
   1ff84:	00043b40 	.word	0x00043b40
   1ff88:	00001770 	.word	0x00001770
   1ff8c:	000003e3 	.word	0x000003e3
   1ff90:	00000301 	.word	0x00000301
   1ff94:	0004435c 	.word	0x0004435c
   1ff98:	000004a9 	.word	0x000004a9
   1ff9c:	000004dc 	.word	0x000004dc
   1ffa0:	00000519 	.word	0x00000519

0001ffa4 <CTCPConnection::TimerHandler(unsigned int)>:
   1ffa4:	e3510002 	cmp	r1, #2
   1ffa8:	e92d4070 	push	{r4, r5, r6, lr}
   1ffac:	8a000040 	bhi	200b4 <CTCPConnection::TimerHandler(unsigned int)+0x110>
   1ffb0:	e1a04000 	mov	r4, r0
   1ffb4:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   1ffb8:	e1a05001 	mov	r5, r1
   1ffbc:	e3500000 	cmp	r0, #0
   1ffc0:	1a00000d 	bne	1fffc <CTCPConnection::TimerHandler(unsigned int)+0x58>
   1ffc4:	e281301e 	add	r3, r1, #30
   1ffc8:	e0843103 	add	r3, r4, r3, lsl #2
   1ffcc:	e5932004 	ldr	r2, [r3, #4]
   1ffd0:	e3520000 	cmp	r2, #0
   1ffd4:	15830004 	strne	r0, [r3, #4]
   1ffd8:	0a000006 	beq	1fff8 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   1ffdc:	e3550001 	cmp	r5, #1
   1ffe0:	0a00001c 	beq	20058 <CTCPConnection::TimerHandler(unsigned int)+0xb4>
   1ffe4:	e3550002 	cmp	r5, #2
   1ffe8:	1a00000e 	bne	20028 <CTCPConnection::TimerHandler(unsigned int)+0x84>
   1ffec:	e3a03000 	mov	r3, #0
   1fff0:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1fff4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1fff8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1fffc:	eb002f52 	bl	2bd4c <EnterCritical>
   20000:	e285301e 	add	r3, r5, #30
   20004:	e0843103 	add	r3, r4, r3, lsl #2
   20008:	e5932004 	ldr	r2, [r3, #4]
   2000c:	e3520000 	cmp	r2, #0
   20010:	1a000008 	bne	20038 <CTCPConnection::TimerHandler(unsigned int)+0x94>
   20014:	e5943088 	ldr	r3, [r4, #136]	; 0x88
   20018:	e3530000 	cmp	r3, #0
   2001c:	08bd8070 	popeq	{r4, r5, r6, pc}
   20020:	e8bd4070 	pop	{r4, r5, r6, lr}
   20024:	ea002f73 	b	2bdf8 <LeaveCritical>
   20028:	e59f2124 	ldr	r2, [pc, #292]	; 20154 <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   2002c:	e59f1124 	ldr	r1, [pc, #292]	; 20158 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   20030:	e59f0124 	ldr	r0, [pc, #292]	; 2015c <CTCPConnection::TimerHandler(unsigned int)+0x1b8>
   20034:	eb0011f5 	bl	24810 <assertion_failed>
   20038:	e3a01000 	mov	r1, #0
   2003c:	e5942088 	ldr	r2, [r4, #136]	; 0x88
   20040:	e5831004 	str	r1, [r3, #4]
   20044:	e1520001 	cmp	r2, r1
   20048:	0affffe3 	beq	1ffdc <CTCPConnection::TimerHandler(unsigned int)+0x38>
   2004c:	eb002f69 	bl	2bdf8 <LeaveCritical>
   20050:	e3550001 	cmp	r5, #1
   20054:	1affffe2 	bne	1ffe4 <CTCPConnection::TimerHandler(unsigned int)+0x40>
   20058:	e28400b8 	add	r0, r4, #184	; 0xb8
   2005c:	eb0001a4 	bl	206f4 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>
   20060:	e5943060 	ldr	r3, [r4, #96]	; 0x60
   20064:	e3530000 	cmp	r3, #0
   20068:	e2433001 	sub	r3, r3, #1
   2006c:	e5843060 	str	r3, [r4, #96]	; 0x60
   20070:	0a000029 	beq	2011c <CTCPConnection::TimerHandler(unsigned int)+0x178>
   20074:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   20078:	e353000a 	cmp	r3, #10
   2007c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   20080:	ea00000a 	b	200b0 <CTCPConnection::TimerHandler(unsigned int)+0x10c>
   20084:	000200f4 	.word	0x000200f4
   20088:	000200f4 	.word	0x000200f4
   2008c:	00020104 	.word	0x00020104
   20090:	00020104 	.word	0x00020104
   20094:	000200dc 	.word	0x000200dc
   20098:	000200c4 	.word	0x000200c4
   2009c:	000200f4 	.word	0x000200f4
   200a0:	000200dc 	.word	0x000200dc
   200a4:	000200c4 	.word	0x000200c4
   200a8:	000200c4 	.word	0x000200c4
   200ac:	000200f4 	.word	0x000200f4
   200b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   200b4:	e59f20a4 	ldr	r2, [pc, #164]	; 20160 <CTCPConnection::TimerHandler(unsigned int)+0x1bc>
   200b8:	e59f1098 	ldr	r1, [pc, #152]	; 20158 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   200bc:	e59f00a0 	ldr	r0, [pc, #160]	; 20164 <CTCPConnection::TimerHandler(unsigned int)+0x1c0>
   200c0:	eb0011d2 	bl	24810 <assertion_failed>
   200c4:	e5d4305e 	ldrb	r3, [r4, #94]	; 0x5e
   200c8:	e3530000 	cmp	r3, #0
   200cc:	1a000014 	bne	20124 <CTCPConnection::TimerHandler(unsigned int)+0x180>
   200d0:	e3a03001 	mov	r3, #1
   200d4:	e5c4305e 	strb	r3, [r4, #94]	; 0x5e
   200d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   200dc:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   200e0:	e3530000 	cmp	r3, #0
   200e4:	1a000012 	bne	20134 <CTCPConnection::TimerHandler(unsigned int)+0x190>
   200e8:	e3a03001 	mov	r3, #1
   200ec:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
   200f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   200f4:	e1a00004 	mov	r0, r4
   200f8:	e8bd4070 	pop	{r4, r5, r6, lr}
   200fc:	e59f1064 	ldr	r1, [pc, #100]	; 20168 <CTCPConnection::TimerHandler(unsigned int)+0x1c4>
   20100:	eafffbca 	b	1f030 <CTCPConnection::UnexpectedState(unsigned int)>
   20104:	e5d4305d 	ldrb	r3, [r4, #93]	; 0x5d
   20108:	e3530000 	cmp	r3, #0
   2010c:	1a00000c 	bne	20144 <CTCPConnection::TimerHandler(unsigned int)+0x1a0>
   20110:	e3a03001 	mov	r3, #1
   20114:	e5c4305d 	strb	r3, [r4, #93]	; 0x5d
   20118:	e8bd8070 	pop	{r4, r5, r6, pc}
   2011c:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   20120:	e8bd8070 	pop	{r4, r5, r6, pc}
   20124:	e59f2040 	ldr	r2, [pc, #64]	; 2016c <CTCPConnection::TimerHandler(unsigned int)+0x1c8>
   20128:	e59f1028 	ldr	r1, [pc, #40]	; 20158 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   2012c:	e59f003c 	ldr	r0, [pc, #60]	; 20170 <CTCPConnection::TimerHandler(unsigned int)+0x1cc>
   20130:	eb0011b6 	bl	24810 <assertion_failed>
   20134:	e59f2038 	ldr	r2, [pc, #56]	; 20174 <CTCPConnection::TimerHandler(unsigned int)+0x1d0>
   20138:	e59f1018 	ldr	r1, [pc, #24]	; 20158 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   2013c:	e59f0034 	ldr	r0, [pc, #52]	; 20178 <CTCPConnection::TimerHandler(unsigned int)+0x1d4>
   20140:	eb0011b2 	bl	24810 <assertion_failed>
   20144:	e59f2030 	ldr	r2, [pc, #48]	; 2017c <CTCPConnection::TimerHandler(unsigned int)+0x1d8>
   20148:	e59f1008 	ldr	r1, [pc, #8]	; 20158 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   2014c:	e59f002c 	ldr	r0, [pc, #44]	; 20180 <CTCPConnection::TimerHandler(unsigned int)+0x1dc>
   20150:	eb0011ae 	bl	24810 <assertion_failed>
   20154:	00000617 	.word	0x00000617
   20158:	000441dc 	.word	0x000441dc
   2015c:	0003fe24 	.word	0x0003fe24
   20160:	000005d9 	.word	0x000005d9
   20164:	00044220 	.word	0x00044220
   20168:	000005f9 	.word	0x000005f9
   2016c:	0000060b 	.word	0x0000060b
   20170:	0004426c 	.word	0x0004426c
   20174:	00000604 	.word	0x00000604
   20178:	00044378 	.word	0x00044378
   2017c:	000005fe 	.word	0x000005fe
   20180:	0004436c 	.word	0x0004436c

00020184 <CTCPConnection::TimerStub(unsigned int, void*, void*)>:
   20184:	e2520000 	subs	r0, r2, #0
   20188:	e92d4010 	push	{r4, lr}
   2018c:	0a000003 	beq	201a0 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x1c>
   20190:	e3510002 	cmp	r1, #2
   20194:	8a000005 	bhi	201b0 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x2c>
   20198:	e8bd4010 	pop	{r4, lr}
   2019c:	eaffff80 	b	1ffa4 <CTCPConnection::TimerHandler(unsigned int)>
   201a0:	e59f2018 	ldr	r2, [pc, #24]	; 201c0 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x3c>
   201a4:	e59f1018 	ldr	r1, [pc, #24]	; 201c4 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   201a8:	e59f0018 	ldr	r0, [pc, #24]	; 201c8 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x44>
   201ac:	eb001197 	bl	24810 <assertion_failed>
   201b0:	e59f2014 	ldr	r2, [pc, #20]	; 201cc <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x48>
   201b4:	e59f1008 	ldr	r1, [pc, #8]	; 201c4 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   201b8:	e59f0010 	ldr	r0, [pc, #16]	; 201d0 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x4c>
   201bc:	eb001193 	bl	24810 <assertion_failed>
   201c0:	0000061f 	.word	0x0000061f
   201c4:	000441dc 	.word	0x000441dc
   201c8:	0003f230 	.word	0x0003f230
   201cc:	00000622 	.word	0x00000622
   201d0:	00044220 	.word	0x00044220

000201d4 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>:
   201d4:	e3a03000 	mov	r3, #0
   201d8:	e3510001 	cmp	r1, #1
   201dc:	e92d4010 	push	{r4, lr}
   201e0:	e880000a 	stm	r0, {r1, r3}
   201e4:	e5803008 	str	r3, [r0, #8]
   201e8:	e580300c 	str	r3, [r0, #12]
   201ec:	e5803010 	str	r3, [r0, #16]
   201f0:	9a000005 	bls	2020c <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x38>
   201f4:	e1a04000 	mov	r4, r0
   201f8:	e1a00001 	mov	r0, r1
   201fc:	eb002ba1 	bl	2b088 <operator new[](unsigned int)>
   20200:	e5840004 	str	r0, [r4, #4]
   20204:	e1a00004 	mov	r0, r4
   20208:	e8bd8010 	pop	{r4, pc}
   2020c:	e3a0201e 	mov	r2, #30
   20210:	e59f1004 	ldr	r1, [pc, #4]	; 2021c <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x48>
   20214:	e59f0004 	ldr	r0, [pc, #4]	; 20220 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x4c>
   20218:	eb00117c 	bl	24810 <assertion_failed>
   2021c:	00044404 	.word	0x00044404
   20220:	0004441c 	.word	0x0004441c

00020224 <CRetransmissionQueue::~CRetransmissionQueue()>:
   20224:	e92d4010 	push	{r4, lr}
   20228:	e1a04000 	mov	r4, r0
   2022c:	e3a01001 	mov	r1, #1
   20230:	e5900004 	ldr	r0, [r0, #4]
   20234:	eb002ba0 	bl	2b0bc <operator delete(void*, unsigned int)>
   20238:	e1a00004 	mov	r0, r4
   2023c:	e8bd8010 	pop	{r4, pc}

00020240 <CRetransmissionQueue::IsEmpty() const>:
   20240:	e590200c 	ldr	r2, [r0, #12]
   20244:	e5900008 	ldr	r0, [r0, #8]
   20248:	e0420000 	sub	r0, r2, r0
   2024c:	e16f0f10 	clz	r0, r0
   20250:	e1a002a0 	lsr	r0, r0, #5
   20254:	e12fff1e 	bx	lr

00020258 <CRetransmissionQueue::GetFreeSpace() const>:
   20258:	e5903000 	ldr	r3, [r0]
   2025c:	e92d4010 	push	{r4, lr}
   20260:	e3530001 	cmp	r3, #1
   20264:	9a00000b 	bls	20298 <CRetransmissionQueue::GetFreeSpace() const+0x40>
   20268:	e5902008 	ldr	r2, [r0, #8]
   2026c:	e1530002 	cmp	r3, r2
   20270:	9a00000c 	bls	202a8 <CRetransmissionQueue::GetFreeSpace() const+0x50>
   20274:	e590000c 	ldr	r0, [r0, #12]
   20278:	e1530000 	cmp	r3, r0
   2027c:	9a00000d 	bls	202b8 <CRetransmissionQueue::GetFreeSpace() const+0x60>
   20280:	e1520000 	cmp	r2, r0
   20284:	20833000 	addcs	r3, r3, r0
   20288:	22433001 	subcs	r3, r3, #1
   2028c:	32403001 	subcc	r3, r0, #1
   20290:	e0430002 	sub	r0, r3, r2
   20294:	e8bd8010 	pop	{r4, pc}
   20298:	e3a02033 	mov	r2, #51	; 0x33
   2029c:	e59f1024 	ldr	r1, [pc, #36]	; 202c8 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   202a0:	e59f0024 	ldr	r0, [pc, #36]	; 202cc <CRetransmissionQueue::GetFreeSpace() const+0x74>
   202a4:	eb001159 	bl	24810 <assertion_failed>
   202a8:	e3a02034 	mov	r2, #52	; 0x34
   202ac:	e59f1014 	ldr	r1, [pc, #20]	; 202c8 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   202b0:	e59f0018 	ldr	r0, [pc, #24]	; 202d0 <CRetransmissionQueue::GetFreeSpace() const+0x78>
   202b4:	eb001155 	bl	24810 <assertion_failed>
   202b8:	e3a02035 	mov	r2, #53	; 0x35
   202bc:	e59f1004 	ldr	r1, [pc, #4]	; 202c8 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   202c0:	e59f000c 	ldr	r0, [pc, #12]	; 202d4 <CRetransmissionQueue::GetFreeSpace() const+0x7c>
   202c4:	eb001151 	bl	24810 <assertion_failed>
   202c8:	00044404 	.word	0x00044404
   202cc:	0004441c 	.word	0x0004441c
   202d0:	00044428 	.word	0x00044428
   202d4:	0004443c 	.word	0x0004443c

000202d8 <CRetransmissionQueue::Write(void const*, unsigned int)>:
   202d8:	e92d4070 	push	{r4, r5, r6, lr}
   202dc:	e2526000 	subs	r6, r2, #0
   202e0:	0a000018 	beq	20348 <CRetransmissionQueue::Write(void const*, unsigned int)+0x70>
   202e4:	e1a05001 	mov	r5, r1
   202e8:	e1a04000 	mov	r4, r0
   202ec:	ebffffd9 	bl	20258 <CRetransmissionQueue::GetFreeSpace() const>
   202f0:	e1560000 	cmp	r6, r0
   202f4:	8a000017 	bhi	20358 <CRetransmissionQueue::Write(void const*, unsigned int)+0x80>
   202f8:	e3550000 	cmp	r5, #0
   202fc:	0a000019 	beq	20368 <CRetransmissionQueue::Write(void const*, unsigned int)+0x90>
   20300:	e5943004 	ldr	r3, [r4, #4]
   20304:	e3530000 	cmp	r3, #0
   20308:	0a00001a 	beq	20378 <CRetransmissionQueue::Write(void const*, unsigned int)+0xa0>
   2030c:	e0856006 	add	r6, r5, r6
   20310:	e5941008 	ldr	r1, [r4, #8]
   20314:	ea000000 	b	2031c <CRetransmissionQueue::Write(void const*, unsigned int)+0x44>
   20318:	e5943004 	ldr	r3, [r4, #4]
   2031c:	e2812001 	add	r2, r1, #1
   20320:	e5842008 	str	r2, [r4, #8]
   20324:	e4d52001 	ldrb	r2, [r5], #1
   20328:	e7c32001 	strb	r2, [r3, r1]
   2032c:	e5940008 	ldr	r0, [r4, #8]
   20330:	e5941000 	ldr	r1, [r4]
   20334:	eb0076c3 	bl	3de48 <__aeabi_uidivmod>
   20338:	e1560005 	cmp	r6, r5
   2033c:	e5841008 	str	r1, [r4, #8]
   20340:	1afffff4 	bne	20318 <CRetransmissionQueue::Write(void const*, unsigned int)+0x40>
   20344:	e8bd8070 	pop	{r4, r5, r6, pc}
   20348:	e3a02041 	mov	r2, #65	; 0x41
   2034c:	e59f1034 	ldr	r1, [pc, #52]	; 20388 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   20350:	e59f0034 	ldr	r0, [pc, #52]	; 2038c <CRetransmissionQueue::Write(void const*, unsigned int)+0xb4>
   20354:	eb00112d 	bl	24810 <assertion_failed>
   20358:	e3a02042 	mov	r2, #66	; 0x42
   2035c:	e59f1024 	ldr	r1, [pc, #36]	; 20388 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   20360:	e59f0028 	ldr	r0, [pc, #40]	; 20390 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb8>
   20364:	eb001129 	bl	24810 <assertion_failed>
   20368:	e3a02045 	mov	r2, #69	; 0x45
   2036c:	e59f1014 	ldr	r1, [pc, #20]	; 20388 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   20370:	e59f001c 	ldr	r0, [pc, #28]	; 20394 <CRetransmissionQueue::Write(void const*, unsigned int)+0xbc>
   20374:	eb001125 	bl	24810 <assertion_failed>
   20378:	e3a02046 	mov	r2, #70	; 0x46
   2037c:	e59f1004 	ldr	r1, [pc, #4]	; 20388 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   20380:	e59f0010 	ldr	r0, [pc, #16]	; 20398 <CRetransmissionQueue::Write(void const*, unsigned int)+0xc0>
   20384:	eb001121 	bl	24810 <assertion_failed>
   20388:	00044404 	.word	0x00044404
   2038c:	00043ad0 	.word	0x00043ad0
   20390:	00044450 	.word	0x00044450
   20394:	0004446c 	.word	0x0004446c
   20398:	000418f8 	.word	0x000418f8

0002039c <CRetransmissionQueue::GetBytesAvailable() const>:
   2039c:	e5903000 	ldr	r3, [r0]
   203a0:	e92d4010 	push	{r4, lr}
   203a4:	e3530001 	cmp	r3, #1
   203a8:	9a00000a 	bls	203d8 <CRetransmissionQueue::GetBytesAvailable() const+0x3c>
   203ac:	e5902008 	ldr	r2, [r0, #8]
   203b0:	e1530002 	cmp	r3, r2
   203b4:	9a00000b 	bls	203e8 <CRetransmissionQueue::GetBytesAvailable() const+0x4c>
   203b8:	e5900010 	ldr	r0, [r0, #16]
   203bc:	e1530000 	cmp	r3, r0
   203c0:	9a00000c 	bls	203f8 <CRetransmissionQueue::GetBytesAvailable() const+0x5c>
   203c4:	e1520000 	cmp	r2, r0
   203c8:	30833002 	addcc	r3, r3, r2
   203cc:	30430000 	subcc	r0, r3, r0
   203d0:	20420000 	subcs	r0, r2, r0
   203d4:	e8bd8010 	pop	{r4, pc}
   203d8:	e3a02051 	mov	r2, #81	; 0x51
   203dc:	e59f1024 	ldr	r1, [pc, #36]	; 20408 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   203e0:	e59f0024 	ldr	r0, [pc, #36]	; 2040c <CRetransmissionQueue::GetBytesAvailable() const+0x70>
   203e4:	eb001109 	bl	24810 <assertion_failed>
   203e8:	e3a02052 	mov	r2, #82	; 0x52
   203ec:	e59f1014 	ldr	r1, [pc, #20]	; 20408 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   203f0:	e59f0018 	ldr	r0, [pc, #24]	; 20410 <CRetransmissionQueue::GetBytesAvailable() const+0x74>
   203f4:	eb001105 	bl	24810 <assertion_failed>
   203f8:	e3a02053 	mov	r2, #83	; 0x53
   203fc:	e59f1004 	ldr	r1, [pc, #4]	; 20408 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   20400:	e59f000c 	ldr	r0, [pc, #12]	; 20414 <CRetransmissionQueue::GetBytesAvailable() const+0x78>
   20404:	eb001101 	bl	24810 <assertion_failed>
   20408:	00044404 	.word	0x00044404
   2040c:	0004441c 	.word	0x0004441c
   20410:	00044428 	.word	0x00044428
   20414:	00044474 	.word	0x00044474

00020418 <CRetransmissionQueue::Read(void*, unsigned int)>:
   20418:	e92d4070 	push	{r4, r5, r6, lr}
   2041c:	e2526000 	subs	r6, r2, #0
   20420:	0a000018 	beq	20488 <CRetransmissionQueue::Read(void*, unsigned int)+0x70>
   20424:	e1a05001 	mov	r5, r1
   20428:	e1a04000 	mov	r4, r0
   2042c:	ebffffda 	bl	2039c <CRetransmissionQueue::GetBytesAvailable() const>
   20430:	e1560000 	cmp	r6, r0
   20434:	8a000017 	bhi	20498 <CRetransmissionQueue::Read(void*, unsigned int)+0x80>
   20438:	e3550000 	cmp	r5, #0
   2043c:	0a000019 	beq	204a8 <CRetransmissionQueue::Read(void*, unsigned int)+0x90>
   20440:	e5943004 	ldr	r3, [r4, #4]
   20444:	e3530000 	cmp	r3, #0
   20448:	0a00001a 	beq	204b8 <CRetransmissionQueue::Read(void*, unsigned int)+0xa0>
   2044c:	e0856006 	add	r6, r5, r6
   20450:	e5941010 	ldr	r1, [r4, #16]
   20454:	ea000000 	b	2045c <CRetransmissionQueue::Read(void*, unsigned int)+0x44>
   20458:	e5943004 	ldr	r3, [r4, #4]
   2045c:	e2812001 	add	r2, r1, #1
   20460:	e5842010 	str	r2, [r4, #16]
   20464:	e7d33001 	ldrb	r3, [r3, r1]
   20468:	e4c53001 	strb	r3, [r5], #1
   2046c:	e5940010 	ldr	r0, [r4, #16]
   20470:	e5941000 	ldr	r1, [r4]
   20474:	eb007673 	bl	3de48 <__aeabi_uidivmod>
   20478:	e1560005 	cmp	r6, r5
   2047c:	e5841010 	str	r1, [r4, #16]
   20480:	1afffff4 	bne	20458 <CRetransmissionQueue::Read(void*, unsigned int)+0x40>
   20484:	e8bd8070 	pop	{r4, r5, r6, pc}
   20488:	e3a0205f 	mov	r2, #95	; 0x5f
   2048c:	e59f1034 	ldr	r1, [pc, #52]	; 204c8 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   20490:	e59f0034 	ldr	r0, [pc, #52]	; 204cc <CRetransmissionQueue::Read(void*, unsigned int)+0xb4>
   20494:	eb0010dd 	bl	24810 <assertion_failed>
   20498:	e3a02060 	mov	r2, #96	; 0x60
   2049c:	e59f1024 	ldr	r1, [pc, #36]	; 204c8 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   204a0:	e59f0028 	ldr	r0, [pc, #40]	; 204d0 <CRetransmissionQueue::Read(void*, unsigned int)+0xb8>
   204a4:	eb0010d9 	bl	24810 <assertion_failed>
   204a8:	e3a02063 	mov	r2, #99	; 0x63
   204ac:	e59f1014 	ldr	r1, [pc, #20]	; 204c8 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   204b0:	e59f001c 	ldr	r0, [pc, #28]	; 204d4 <CRetransmissionQueue::Read(void*, unsigned int)+0xbc>
   204b4:	eb0010d5 	bl	24810 <assertion_failed>
   204b8:	e3a02064 	mov	r2, #100	; 0x64
   204bc:	e59f1004 	ldr	r1, [pc, #4]	; 204c8 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   204c0:	e59f0010 	ldr	r0, [pc, #16]	; 204d8 <CRetransmissionQueue::Read(void*, unsigned int)+0xc0>
   204c4:	eb0010d1 	bl	24810 <assertion_failed>
   204c8:	00044404 	.word	0x00044404
   204cc:	00043ad0 	.word	0x00043ad0
   204d0:	0004448c 	.word	0x0004448c
   204d4:	0004446c 	.word	0x0004446c
   204d8:	000418f8 	.word	0x000418f8

000204dc <CRetransmissionQueue::Advance(unsigned int)>:
   204dc:	e5903000 	ldr	r3, [r0]
   204e0:	e92d4010 	push	{r4, lr}
   204e4:	e3530001 	cmp	r3, #1
   204e8:	9a00000c 	bls	20520 <CRetransmissionQueue::Advance(unsigned int)+0x44>
   204ec:	e590200c 	ldr	r2, [r0, #12]
   204f0:	e1a04000 	mov	r4, r0
   204f4:	e1530002 	cmp	r3, r2
   204f8:	9a00000c 	bls	20530 <CRetransmissionQueue::Advance(unsigned int)+0x54>
   204fc:	e1a00001 	mov	r0, r1
   20500:	e5941010 	ldr	r1, [r4, #16]
   20504:	e1530001 	cmp	r3, r1
   20508:	9a00000c 	bls	20540 <CRetransmissionQueue::Advance(unsigned int)+0x64>
   2050c:	e1a01003 	mov	r1, r3
   20510:	e0820000 	add	r0, r2, r0
   20514:	eb00764b 	bl	3de48 <__aeabi_uidivmod>
   20518:	e584100c 	str	r1, [r4, #12]
   2051c:	e8bd8010 	pop	{r4, pc}
   20520:	e3a0206f 	mov	r2, #111	; 0x6f
   20524:	e59f1024 	ldr	r1, [pc, #36]	; 20550 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   20528:	e59f0024 	ldr	r0, [pc, #36]	; 20554 <CRetransmissionQueue::Advance(unsigned int)+0x78>
   2052c:	eb0010b7 	bl	24810 <assertion_failed>
   20530:	e3a02070 	mov	r2, #112	; 0x70
   20534:	e59f1014 	ldr	r1, [pc, #20]	; 20550 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   20538:	e59f0018 	ldr	r0, [pc, #24]	; 20558 <CRetransmissionQueue::Advance(unsigned int)+0x7c>
   2053c:	eb0010b3 	bl	24810 <assertion_failed>
   20540:	e3a02071 	mov	r2, #113	; 0x71
   20544:	e59f1004 	ldr	r1, [pc, #4]	; 20550 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   20548:	e59f000c 	ldr	r0, [pc, #12]	; 2055c <CRetransmissionQueue::Advance(unsigned int)+0x80>
   2054c:	eb0010af 	bl	24810 <assertion_failed>
   20550:	00044404 	.word	0x00044404
   20554:	0004441c 	.word	0x0004441c
   20558:	0004443c 	.word	0x0004443c
   2055c:	00044474 	.word	0x00044474

00020560 <CRetransmissionQueue::Reset()>:
   20560:	e590300c 	ldr	r3, [r0, #12]
   20564:	e5803010 	str	r3, [r0, #16]
   20568:	e12fff1e 	bx	lr

0002056c <CRetransmissionQueue::Flush()>:
   2056c:	e3a03000 	mov	r3, #0
   20570:	e5803008 	str	r3, [r0, #8]
   20574:	e580300c 	str	r3, [r0, #12]
   20578:	e5803010 	str	r3, [r0, #16]
   2057c:	e12fff1e 	bx	lr

00020580 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>:
   20580:	e92d4010 	push	{r4, lr}
   20584:	e1a04000 	mov	r4, r0
   20588:	eb002660 	bl	29f10 <CTimer::Get()>
   2058c:	e3a03000 	mov	r3, #0
   20590:	e3a02001 	mov	r2, #1
   20594:	e3a01f4b 	mov	r1, #300	; 0x12c
   20598:	e1500003 	cmp	r0, r3
   2059c:	e5840000 	str	r0, [r4]
   205a0:	e5841008 	str	r1, [r4, #8]
   205a4:	e5843004 	str	r3, [r4, #4]
   205a8:	e5c43018 	strb	r3, [r4, #24]
   205ac:	e5843020 	str	r3, [r4, #32]
   205b0:	e5c4200c 	strb	r2, [r4, #12]
   205b4:	e5842024 	str	r2, [r4, #36]	; 0x24
   205b8:	0a000001 	beq	205c4 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x44>
   205bc:	e1a00004 	mov	r0, r4
   205c0:	e8bd8010 	pop	{r4, pc}
   205c4:	e3a02033 	mov	r2, #51	; 0x33
   205c8:	e59f1004 	ldr	r1, [pc, #4]	; 205d4 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x54>
   205cc:	e59f0004 	ldr	r0, [pc, #4]	; 205d8 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x58>
   205d0:	eb00108e 	bl	24810 <assertion_failed>
   205d4:	000444ac 	.word	0x000444ac
   205d8:	0003f280 	.word	0x0003f280

000205dc <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>:
   205dc:	e12fff1e 	bx	lr

000205e0 <CRetransmissionTimeoutCalculator::GetRTO() const>:
   205e0:	e5900008 	ldr	r0, [r0, #8]
   205e4:	e12fff1e 	bx	lr

000205e8 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>:
   205e8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   205ec:	e3530000 	cmp	r3, #0
   205f0:	1a000007 	bne	20614 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)+0x2c>
   205f4:	e3a0cf4b 	mov	ip, #300	; 0x12c
   205f8:	e3a02001 	mov	r2, #1
   205fc:	e5801004 	str	r1, [r0, #4]
   20600:	e5c03018 	strb	r3, [r0, #24]
   20604:	e5803020 	str	r3, [r0, #32]
   20608:	e580c008 	str	ip, [r0, #8]
   2060c:	e5c0200c 	strb	r2, [r0, #12]
   20610:	e12fff1e 	bx	lr
   20614:	e92d4070 	push	{r4, r5, r6, lr}
   20618:	e1a04000 	mov	r4, r0
   2061c:	e1a00003 	mov	r0, r3
   20620:	e1a05001 	mov	r5, r1
   20624:	eb002dc8 	bl	2bd4c <EnterCritical>
   20628:	e3a03000 	mov	r3, #0
   2062c:	e3a01f4b 	mov	r1, #300	; 0x12c
   20630:	e3a02001 	mov	r2, #1
   20634:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   20638:	e5845004 	str	r5, [r4, #4]
   2063c:	e1500003 	cmp	r0, r3
   20640:	e5841008 	str	r1, [r4, #8]
   20644:	e5c4200c 	strb	r2, [r4, #12]
   20648:	e5c43018 	strb	r3, [r4, #24]
   2064c:	e5843020 	str	r3, [r4, #32]
   20650:	08bd8070 	popeq	{r4, r5, r6, pc}
   20654:	e8bd4070 	pop	{r4, r5, r6, lr}
   20658:	ea002de6 	b	2bdf8 <LeaveCritical>

0002065c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>:
   2065c:	e92d4010 	push	{r4, lr}
   20660:	e1a04000 	mov	r4, r0
   20664:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   20668:	e3500000 	cmp	r0, #0
   2066c:	1a000012 	bne	206bc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x60>
   20670:	e5d43018 	ldrb	r3, [r4, #24]
   20674:	e3530000 	cmp	r3, #0
   20678:	1a00000e 	bne	206b8 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x5c>
   2067c:	e5943020 	ldr	r3, [r4, #32]
   20680:	e3530000 	cmp	r3, #0
   20684:	1a000006 	bne	206a4 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   20688:	e3a03001 	mov	r3, #1
   2068c:	e5940000 	ldr	r0, [r4]
   20690:	e5c43018 	strb	r3, [r4, #24]
   20694:	e3500000 	cmp	r0, #0
   20698:	0a00000f 	beq	206dc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x80>
   2069c:	eb002365 	bl	29438 <CTimer::GetTicks() const>
   206a0:	e584001c 	str	r0, [r4, #28]
   206a4:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   206a8:	e3530000 	cmp	r3, #0
   206ac:	08bd8010 	popeq	{r4, pc}
   206b0:	e8bd4010 	pop	{r4, lr}
   206b4:	ea002dcf 	b	2bdf8 <LeaveCritical>
   206b8:	e8bd8010 	pop	{r4, pc}
   206bc:	eb002da2 	bl	2bd4c <EnterCritical>
   206c0:	e5d43018 	ldrb	r3, [r4, #24]
   206c4:	e3530000 	cmp	r3, #0
   206c8:	1afffff5 	bne	206a4 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   206cc:	e5943020 	ldr	r3, [r4, #32]
   206d0:	e3530000 	cmp	r3, #0
   206d4:	1afffff2 	bne	206a4 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   206d8:	eaffffea 	b	20688 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x2c>
   206dc:	e3a0205f 	mov	r2, #95	; 0x5f
   206e0:	e59f1004 	ldr	r1, [pc, #4]	; 206ec <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x90>
   206e4:	e59f0004 	ldr	r0, [pc, #4]	; 206f0 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x94>
   206e8:	eb001048 	bl	24810 <assertion_failed>
   206ec:	000444ac 	.word	0x000444ac
   206f0:	0003f280 	.word	0x0003f280

000206f4 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>:
   206f4:	e92d4010 	push	{r4, lr}
   206f8:	e1a04000 	mov	r4, r0
   206fc:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   20700:	e3500000 	cmp	r0, #0
   20704:	1a000011 	bne	20750 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x5c>
   20708:	e5943008 	ldr	r3, [r4, #8]
   2070c:	e59f2048 	ldr	r2, [pc, #72]	; 2075c <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x68>
   20710:	e1a03083 	lsl	r3, r3, #1
   20714:	e1530002 	cmp	r3, r2
   20718:	21a03002 	movcs	r3, r2
   2071c:	e5942020 	ldr	r2, [r4, #32]
   20720:	e5843008 	str	r3, [r4, #8]
   20724:	e2823001 	add	r3, r2, #1
   20728:	e3530002 	cmp	r3, #2
   2072c:	e5843020 	str	r3, [r4, #32]
   20730:	83a03001 	movhi	r3, #1
   20734:	85c4300c 	strbhi	r3, [r4, #12]
   20738:	e3a03000 	mov	r3, #0
   2073c:	e1500003 	cmp	r0, r3
   20740:	e5c43018 	strb	r3, [r4, #24]
   20744:	08bd8010 	popeq	{r4, pc}
   20748:	e8bd4010 	pop	{r4, lr}
   2074c:	ea002da9 	b	2bdf8 <LeaveCritical>
   20750:	eb002d7d 	bl	2bd4c <EnterCritical>
   20754:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   20758:	eaffffea 	b	20708 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x14>
   2075c:	00002ee0 	.word	0x00002ee0

00020760 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>:
   20760:	e5d0300c 	ldrb	r3, [r0, #12]
   20764:	e3530000 	cmp	r3, #0
   20768:	0a00000e 	beq	207a8 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x48>
   2076c:	e3a02000 	mov	r2, #0
   20770:	e1a030a1 	lsr	r3, r1, #1
   20774:	e5801010 	str	r1, [r0, #16]
   20778:	e5c0200c 	strb	r2, [r0, #12]
   2077c:	e5803014 	str	r3, [r0, #20]
   20780:	e1b03103 	lsls	r3, r3, #2
   20784:	03a03001 	moveq	r3, #1
   20788:	e0833001 	add	r3, r3, r1
   2078c:	e3530063 	cmp	r3, #99	; 0x63
   20790:	9a000012 	bls	207e0 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x80>
   20794:	e59f1050 	ldr	r1, [pc, #80]	; 207ec <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x8c>
   20798:	e1530001 	cmp	r3, r1
   2079c:	21a03001 	movcs	r3, r1
   207a0:	e5803008 	str	r3, [r0, #8]
   207a4:	e12fff1e 	bx	lr
   207a8:	e5903010 	ldr	r3, [r0, #16]
   207ac:	e5902014 	ldr	r2, [r0, #20]
   207b0:	e043c001 	sub	ip, r3, r1
   207b4:	e35c0000 	cmp	ip, #0
   207b8:	b26cc000 	rsblt	ip, ip, #0
   207bc:	e0633183 	rsb	r3, r3, r3, lsl #3
   207c0:	e0822082 	add	r2, r2, r2, lsl #1
   207c4:	e0833001 	add	r3, r3, r1
   207c8:	e082200c 	add	r2, r2, ip
   207cc:	e1a011a3 	lsr	r1, r3, #3
   207d0:	e1a03122 	lsr	r3, r2, #2
   207d4:	e5801010 	str	r1, [r0, #16]
   207d8:	e5803014 	str	r3, [r0, #20]
   207dc:	eaffffe7 	b	20780 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x20>
   207e0:	e3a03064 	mov	r3, #100	; 0x64
   207e4:	e5803008 	str	r3, [r0, #8]
   207e8:	e12fff1e 	bx	lr
   207ec:	00002ee0 	.word	0x00002ee0

000207f0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>:
   207f0:	e92d4010 	push	{r4, lr}
   207f4:	e1a04000 	mov	r4, r0
   207f8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   207fc:	e3500000 	cmp	r0, #0
   20800:	1a000015 	bne	2085c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x6c>
   20804:	e5d43018 	ldrb	r3, [r4, #24]
   20808:	e3530000 	cmp	r3, #0
   2080c:	0a00000a 	beq	2083c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x4c>
   20810:	e5943020 	ldr	r3, [r4, #32]
   20814:	e3530000 	cmp	r3, #0
   20818:	1a000007 	bne	2083c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x4c>
   2081c:	e5940000 	ldr	r0, [r4]
   20820:	e3500000 	cmp	r0, #0
   20824:	0a00000e 	beq	20864 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x74>
   20828:	eb002302 	bl	29438 <CTimer::GetTicks() const>
   2082c:	e594101c 	ldr	r1, [r4, #28]
   20830:	e0401001 	sub	r1, r0, r1
   20834:	e1a00004 	mov	r0, r4
   20838:	ebffffc8 	bl	20760 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>
   2083c:	e3a03000 	mov	r3, #0
   20840:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   20844:	e5c43018 	strb	r3, [r4, #24]
   20848:	e1520003 	cmp	r2, r3
   2084c:	e5843020 	str	r3, [r4, #32]
   20850:	08bd8010 	popeq	{r4, pc}
   20854:	e8bd4010 	pop	{r4, lr}
   20858:	ea002d66 	b	2bdf8 <LeaveCritical>
   2085c:	eb002d3a 	bl	2bd4c <EnterCritical>
   20860:	eaffffe7 	b	20804 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x14>
   20864:	e3a02074 	mov	r2, #116	; 0x74
   20868:	e59f1004 	ldr	r1, [pc, #4]	; 20874 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x84>
   2086c:	e59f0004 	ldr	r0, [pc, #4]	; 20878 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x88>
   20870:	eb000fe6 	bl	24810 <assertion_failed>
   20874:	000444ac 	.word	0x000444ac
   20878:	0003f280 	.word	0x0003f280

0002087c <CTCPRejector::~CTCPRejector()>:
   2087c:	e92d4010 	push	{r4, lr}
   20880:	e1a04000 	mov	r4, r0
   20884:	e59f300c 	ldr	r3, [pc, #12]	; 20898 <CTCPRejector::~CTCPRejector()+0x1c>
   20888:	e5803000 	str	r3, [r0]
   2088c:	ebfff31a 	bl	1d4fc <CNetConnection::~CNetConnection()>
   20890:	e1a00004 	mov	r0, r4
   20894:	e8bd8010 	pop	{r4, pc}
   20898:	000444cc 	.word	0x000444cc

0002089c <CTCPRejector::~CTCPRejector()>:
   2089c:	e92d4010 	push	{r4, lr}
   208a0:	e1a04000 	mov	r4, r0
   208a4:	e59f3018 	ldr	r3, [pc, #24]	; 208c4 <CTCPRejector::~CTCPRejector()+0x28>
   208a8:	e5803000 	str	r3, [r0]
   208ac:	ebfff312 	bl	1d4fc <CNetConnection::~CNetConnection()>
   208b0:	e1a00004 	mov	r0, r4
   208b4:	e3a0102c 	mov	r1, #44	; 0x2c
   208b8:	eb0029ff 	bl	2b0bc <operator delete(void*, unsigned int)>
   208bc:	e1a00004 	mov	r0, r4
   208c0:	e8bd8010 	pop	{r4, pc}
   208c4:	000444cc 	.word	0x000444cc

000208c8 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>:
   208c8:	e3a03006 	mov	r3, #6
   208cc:	e92d4010 	push	{r4, lr}
   208d0:	e1a04000 	mov	r4, r0
   208d4:	e24dd008 	sub	sp, sp, #8
   208d8:	e58d3000 	str	r3, [sp]
   208dc:	e3a03000 	mov	r3, #0
   208e0:	ebfff2df 	bl	1d464 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   208e4:	e1a00004 	mov	r0, r4
   208e8:	e59f3008 	ldr	r3, [pc, #8]	; 208f8 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)+0x30>
   208ec:	e5843000 	str	r3, [r4]
   208f0:	e28dd008 	add	sp, sp, #8
   208f4:	e8bd8010 	pop	{r4, pc}
   208f8:	000444cc 	.word	0x000444cc

000208fc <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>:
   208fc:	e92d4010 	push	{r4, lr}
   20900:	e3110c02 	tst	r1, #512	; 0x200
   20904:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   20908:	e24dd008 	sub	sp, sp, #8
   2090c:	1a000024 	bne	209a4 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xa8>
   20910:	e211ea01 	ands	lr, r1, #4096	; 0x1000
   20914:	e1a04000 	mov	r4, r0
   20918:	01a0300e 	moveq	r3, lr
   2091c:	e3a0e000 	mov	lr, #0
   20920:	e1d0c1b6 	ldrh	ip, [r0, #22]
   20924:	e1d001b4 	ldrh	r0, [r0, #20]
   20928:	e6bf2f32 	rev	r2, r2
   2092c:	e6bfcfbc 	rev16	ip, ip
   20930:	e6bf0fb0 	rev16	r0, r0
   20934:	16bf3f33 	revne	r3, r3
   20938:	e58d200c 	str	r2, [sp, #12]
   2093c:	e1cdc0b8 	strh	ip, [sp, #8]
   20940:	e1cd00ba 	strh	r0, [sp, #10]
   20944:	e381c050 	orr	ip, r1, #80	; 0x50
   20948:	e3a02014 	mov	r2, #20
   2094c:	e28d1008 	add	r1, sp, #8
   20950:	e284001c 	add	r0, r4, #28
   20954:	e58d3010 	str	r3, [sp, #16]
   20958:	e1cdc1b4 	strh	ip, [sp, #20]
   2095c:	e1cde1b6 	strh	lr, [sp, #22]
   20960:	e1cde1ba 	strh	lr, [sp, #26]
   20964:	e1cde1b8 	strh	lr, [sp, #24]
   20968:	eb000370 	bl	21730 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   2096c:	e5943008 	ldr	r3, [r4, #8]
   20970:	e1cd01b8 	strh	r0, [sp, #24]
   20974:	e3530000 	cmp	r3, #0
   20978:	0a00000d 	beq	209b4 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xb8>
   2097c:	e3a0c006 	mov	ip, #6
   20980:	e28d2008 	add	r2, sp, #8
   20984:	e284100c 	add	r1, r4, #12
   20988:	e1a00003 	mov	r0, r3
   2098c:	e58dc000 	str	ip, [sp]
   20990:	e3a03014 	mov	r3, #20
   20994:	ebffe8d3 	bl	1ace8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   20998:	e28ddd19 	add	sp, sp, #1600	; 0x640
   2099c:	e28dd008 	add	sp, sp, #8
   209a0:	e8bd8010 	pop	{r4, pc}
   209a4:	e3a020a1 	mov	r2, #161	; 0xa1
   209a8:	e59f1014 	ldr	r1, [pc, #20]	; 209c4 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc8>
   209ac:	e59f0014 	ldr	r0, [pc, #20]	; 209c8 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xcc>
   209b0:	eb000f96 	bl	24810 <assertion_failed>
   209b4:	e3a020c7 	mov	r2, #199	; 0xc7
   209b8:	e59f1004 	ldr	r1, [pc, #4]	; 209c4 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc8>
   209bc:	e59f0008 	ldr	r0, [pc, #8]	; 209cc <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xd0>
   209c0:	eb000f92 	bl	24810 <assertion_failed>
   209c4:	00044508 	.word	0x00044508
   209c8:	00044518 	.word	0x00044518
   209cc:	00043a5c 	.word	0x00043a5c

000209d0 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   209d0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   209d4:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   209d8:	e35c0006 	cmp	ip, #6
   209dc:	0a000001 	beq	209e8 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   209e0:	e3a00000 	mov	r0, #0
   209e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   209e8:	e3520013 	cmp	r2, #19
   209ec:	9a00005a 	bls	20b5c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18c>
   209f0:	e3510000 	cmp	r1, #0
   209f4:	e1a06003 	mov	r6, r3
   209f8:	e1a07002 	mov	r7, r2
   209fc:	e1a04001 	mov	r4, r1
   20a00:	e1a05000 	mov	r5, r0
   20a04:	0a00004c 	beq	20b3c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x16c>
   20a08:	e5d43003 	ldrb	r3, [r4, #3]
   20a0c:	e5d11002 	ldrb	r1, [r1, #2]
   20a10:	e1811403 	orr	r1, r1, r3, lsl #8
   20a14:	e6bf1fb1 	rev16	r1, r1
   20a18:	e6ff3071 	uxth	r3, r1
   20a1c:	e3530000 	cmp	r3, #0
   20a20:	e1c011b6 	strh	r1, [r0, #22]
   20a24:	0a00004c 	beq	20b5c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18c>
   20a28:	e5900004 	ldr	r0, [r0, #4]
   20a2c:	e3500000 	cmp	r0, #0
   20a30:	0a000045 	beq	20b4c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x17c>
   20a34:	eb00007c 	bl	20c2c <CNetConfig::GetIPAddress() const>
   20a38:	eb0001b6 	bl	21118 <CIPAddress::IsNull() const>
   20a3c:	e3500000 	cmp	r0, #0
   20a40:	1affffe6 	bne	209e0 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   20a44:	e5950004 	ldr	r0, [r5, #4]
   20a48:	eb000077 	bl	20c2c <CNetConfig::GetIPAddress() const>
   20a4c:	e285801c 	add	r8, r5, #28
   20a50:	e1a01000 	mov	r1, r0
   20a54:	e1a00008 	mov	r0, r8
   20a58:	eb000304 	bl	21670 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   20a5c:	e1a01006 	mov	r1, r6
   20a60:	e1a00008 	mov	r0, r8
   20a64:	eb000305 	bl	21680 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   20a68:	e1a02007 	mov	r2, r7
   20a6c:	e1a01004 	mov	r1, r4
   20a70:	e1a00008 	mov	r0, r8
   20a74:	eb00032d 	bl	21730 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   20a78:	e3500000 	cmp	r0, #0
   20a7c:	1affffd7 	bne	209e0 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   20a80:	e5d40005 	ldrb	r0, [r4, #5]
   20a84:	e5d49004 	ldrb	r9, [r4, #4]
   20a88:	e5d43009 	ldrb	r3, [r4, #9]
   20a8c:	e5d41008 	ldrb	r1, [r4, #8]
   20a90:	e1899400 	orr	r9, r9, r0, lsl #8
   20a94:	e5d4000a 	ldrb	r0, [r4, #10]
   20a98:	e1811403 	orr	r1, r1, r3, lsl #8
   20a9c:	e5d4a00d 	ldrb	sl, [r4, #13]
   20aa0:	e5d4300c 	ldrb	r3, [r4, #12]
   20aa4:	e5d42006 	ldrb	r2, [r4, #6]
   20aa8:	e1811800 	orr	r1, r1, r0, lsl #16
   20aac:	e5d4000b 	ldrb	r0, [r4, #11]
   20ab0:	e183a40a 	orr	sl, r3, sl, lsl #8
   20ab4:	e1a03223 	lsr	r3, r3, #4
   20ab8:	e0477103 	sub	r7, r7, r3, lsl #2
   20abc:	e1811c00 	orr	r1, r1, r0, lsl #24
   20ac0:	e1899802 	orr	r9, r9, r2, lsl #16
   20ac4:	e31a0c02 	tst	sl, #512	; 0x200
   20ac8:	e5d42007 	ldrb	r2, [r4, #7]
   20acc:	12877001 	addne	r7, r7, #1
   20ad0:	e6bf8f31 	rev	r8, r1
   20ad4:	e31a0c01 	tst	sl, #256	; 0x100
   20ad8:	e1a01006 	mov	r1, r6
   20adc:	e285000c 	add	r0, r5, #12
   20ae0:	e1899c02 	orr	r9, r9, r2, lsl #24
   20ae4:	12877001 	addne	r7, r7, #1
   20ae8:	eb000147 	bl	2100c <CIPAddress::Set(CIPAddress const&)>
   20aec:	e5d42000 	ldrb	r2, [r4]
   20af0:	e5d41001 	ldrb	r1, [r4, #1]
   20af4:	e21a3b01 	ands	r3, sl, #1024	; 0x400
   20af8:	e1822401 	orr	r2, r2, r1, lsl #8
   20afc:	e6bf2fb2 	rev16	r2, r2
   20b00:	e6bf9f39 	rev	r9, r9
   20b04:	e1c521b4 	strh	r2, [r5, #20]
   20b08:	1a000009 	bne	20b34 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   20b0c:	e21a2a01 	ands	r2, sl, #4096	; 0x1000
   20b10:	00893007 	addeq	r3, r9, r7
   20b14:	01a00005 	moveq	r0, r5
   20b18:	03a01b05 	moveq	r1, #5120	; 0x1400
   20b1c:	11a02008 	movne	r2, r8
   20b20:	11a00005 	movne	r0, r5
   20b24:	13a01b01 	movne	r1, #1024	; 0x400
   20b28:	ebffff73 	bl	208fc <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>
   20b2c:	e3a00001 	mov	r0, #1
   20b30:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20b34:	e3a00001 	mov	r0, #1
   20b38:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20b3c:	e3a02052 	mov	r2, #82	; 0x52
   20b40:	e59f101c 	ldr	r1, [pc, #28]	; 20b64 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x194>
   20b44:	e59f001c 	ldr	r0, [pc, #28]	; 20b68 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x198>
   20b48:	eb000f30 	bl	24810 <assertion_failed>
   20b4c:	e3a0205b 	mov	r2, #91	; 0x5b
   20b50:	e59f100c 	ldr	r1, [pc, #12]	; 20b64 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x194>
   20b54:	e59f0010 	ldr	r0, [pc, #16]	; 20b6c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x19c>
   20b58:	eb000f2c 	bl	24810 <assertion_failed>
   20b5c:	e3e00000 	mvn	r0, #0
   20b60:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20b64:	00044508 	.word	0x00044508
   20b68:	00043b40 	.word	0x00043b40
   20b6c:	00043a48 	.word	0x00043a48

00020b70 <CTCPRejector::Connect()>:
   20b70:	e3e00000 	mvn	r0, #0
   20b74:	e12fff1e 	bx	lr

00020b78 <CTCPRejector::Accept(CIPAddress*, unsigned short*)>:
   20b78:	e3e00000 	mvn	r0, #0
   20b7c:	e12fff1e 	bx	lr

00020b80 <CTCPRejector::Close()>:
   20b80:	e3e00000 	mvn	r0, #0
   20b84:	e12fff1e 	bx	lr

00020b88 <CTCPRejector::Send(void const*, unsigned int, int)>:
   20b88:	e3e00000 	mvn	r0, #0
   20b8c:	e12fff1e 	bx	lr

00020b90 <CTCPRejector::Receive(void*, int)>:
   20b90:	e3e00000 	mvn	r0, #0
   20b94:	e12fff1e 	bx	lr

00020b98 <CTCPRejector::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   20b98:	e3e00000 	mvn	r0, #0
   20b9c:	e12fff1e 	bx	lr

00020ba0 <CTCPRejector::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   20ba0:	e3e00000 	mvn	r0, #0
   20ba4:	e12fff1e 	bx	lr

00020ba8 <CTCPRejector::SetOptionBroadcast(bool)>:
   20ba8:	e3e00000 	mvn	r0, #0
   20bac:	e12fff1e 	bx	lr

00020bb0 <CTCPRejector::IsConnected() const>:
   20bb0:	e3a00000 	mov	r0, #0
   20bb4:	e12fff1e 	bx	lr

00020bb8 <CTCPRejector::IsTerminated() const>:
   20bb8:	e3a00000 	mov	r0, #0
   20bbc:	e12fff1e 	bx	lr

00020bc0 <CTCPRejector::Process()>:
   20bc0:	e12fff1e 	bx	lr

00020bc4 <CTCPRejector::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   20bc4:	e3a00000 	mov	r0, #0
   20bc8:	e12fff1e 	bx	lr

00020bcc <CNetConfig::~CNetConfig()>:
   20bcc:	e92d4010 	push	{r4, lr}
   20bd0:	e1a04000 	mov	r4, r0
   20bd4:	e2800024 	add	r0, r0, #36	; 0x24
   20bd8:	eb000085 	bl	20df4 <CIPAddress::~CIPAddress()>
   20bdc:	e284001c 	add	r0, r4, #28
   20be0:	eb000083 	bl	20df4 <CIPAddress::~CIPAddress()>
   20be4:	e2840014 	add	r0, r4, #20
   20be8:	eb000081 	bl	20df4 <CIPAddress::~CIPAddress()>
   20bec:	e284000c 	add	r0, r4, #12
   20bf0:	eb00007f 	bl	20df4 <CIPAddress::~CIPAddress()>
   20bf4:	e2840004 	add	r0, r4, #4
   20bf8:	eb00007d 	bl	20df4 <CIPAddress::~CIPAddress()>
   20bfc:	e1a00004 	mov	r0, r4
   20c00:	e8bd8010 	pop	{r4, pc}

00020c04 <CNetConfig::SetDHCP(bool)>:
   20c04:	e5c01000 	strb	r1, [r0]
   20c08:	e12fff1e 	bx	lr

00020c0c <CNetConfig::SetDefaultGateway(unsigned int)>:
   20c0c:	e2800014 	add	r0, r0, #20
   20c10:	ea0000e4 	b	20fa8 <CIPAddress::Set(unsigned int)>

00020c14 <CNetConfig::SetDNSServer(unsigned int)>:
   20c14:	e280001c 	add	r0, r0, #28
   20c18:	ea0000e2 	b	20fa8 <CIPAddress::Set(unsigned int)>

00020c1c <CNetConfig::SetDefaultGateway(unsigned char const*)>:
   20c1c:	e2800014 	add	r0, r0, #20
   20c20:	ea0000e4 	b	20fb8 <CIPAddress::Set(unsigned char const*)>

00020c24 <CNetConfig::SetDNSServer(unsigned char const*)>:
   20c24:	e280001c 	add	r0, r0, #28
   20c28:	ea0000e2 	b	20fb8 <CIPAddress::Set(unsigned char const*)>

00020c2c <CNetConfig::GetIPAddress() const>:
   20c2c:	e2800004 	add	r0, r0, #4
   20c30:	e12fff1e 	bx	lr

00020c34 <CNetConfig::IsDHCPUsed() const>:
   20c34:	e5d00000 	ldrb	r0, [r0]
   20c38:	e12fff1e 	bx	lr

00020c3c <CNetConfig::GetNetMask() const>:
   20c3c:	e280000c 	add	r0, r0, #12
   20c40:	ea000111 	b	2108c <CIPAddress::Get() const>

00020c44 <CNetConfig::GetDefaultGateway() const>:
   20c44:	e2800014 	add	r0, r0, #20
   20c48:	e12fff1e 	bx	lr

00020c4c <CNetConfig::GetDNSServer() const>:
   20c4c:	e280001c 	add	r0, r0, #28
   20c50:	e12fff1e 	bx	lr

00020c54 <CNetConfig::GetBroadcastAddress() const>:
   20c54:	e2800024 	add	r0, r0, #36	; 0x24
   20c58:	e12fff1e 	bx	lr

00020c5c <CNetConfig::UpdateBroadcastAddress()>:
   20c5c:	e92d4010 	push	{r4, lr}
   20c60:	e1a04000 	mov	r4, r0
   20c64:	e24dd008 	sub	sp, sp, #8
   20c68:	e1a0100d 	mov	r1, sp
   20c6c:	e2800004 	add	r0, r0, #4
   20c70:	eb000111 	bl	210bc <CIPAddress::CopyTo(unsigned char*) const>
   20c74:	e284000c 	add	r0, r4, #12
   20c78:	e28d1004 	add	r1, sp, #4
   20c7c:	eb00010e 	bl	210bc <CIPAddress::CopyTo(unsigned char*) const>
   20c80:	e89d000a 	ldm	sp, {r1, r3}
   20c84:	e1e03003 	mvn	r3, r3
   20c88:	e2840024 	add	r0, r4, #36	; 0x24
   20c8c:	e1831001 	orr	r1, r3, r1
   20c90:	eb0000c4 	bl	20fa8 <CIPAddress::Set(unsigned int)>
   20c94:	e28dd008 	add	sp, sp, #8
   20c98:	e8bd8010 	pop	{r4, pc}

00020c9c <CNetConfig::Reset()>:
   20c9c:	e92d4070 	push	{r4, r5, r6, lr}
   20ca0:	e1a04000 	mov	r4, r0
   20ca4:	e59f5038 	ldr	r5, [pc, #56]	; 20ce4 <CNetConfig::Reset()+0x48>
   20ca8:	e2800004 	add	r0, r0, #4
   20cac:	e1a01005 	mov	r1, r5
   20cb0:	eb0000c0 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   20cb4:	e1a01005 	mov	r1, r5
   20cb8:	e284000c 	add	r0, r4, #12
   20cbc:	eb0000bd 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   20cc0:	e1a01005 	mov	r1, r5
   20cc4:	e2840014 	add	r0, r4, #20
   20cc8:	eb0000ba 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   20ccc:	e284001c 	add	r0, r4, #28
   20cd0:	e1a01005 	mov	r1, r5
   20cd4:	eb0000b7 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   20cd8:	e1a00004 	mov	r0, r4
   20cdc:	e8bd4070 	pop	{r4, r5, r6, lr}
   20ce0:	eaffffdd 	b	20c5c <CNetConfig::UpdateBroadcastAddress()>
   20ce4:	00044534 	.word	0x00044534

00020ce8 <CNetConfig::CNetConfig()>:
   20ce8:	e3a03001 	mov	r3, #1
   20cec:	e92d4010 	push	{r4, lr}
   20cf0:	e1a04000 	mov	r4, r0
   20cf4:	e4c03004 	strb	r3, [r0], #4
   20cf8:	eb000027 	bl	20d9c <CIPAddress::CIPAddress()>
   20cfc:	e284000c 	add	r0, r4, #12
   20d00:	eb000025 	bl	20d9c <CIPAddress::CIPAddress()>
   20d04:	e2840014 	add	r0, r4, #20
   20d08:	eb000023 	bl	20d9c <CIPAddress::CIPAddress()>
   20d0c:	e284001c 	add	r0, r4, #28
   20d10:	eb000021 	bl	20d9c <CIPAddress::CIPAddress()>
   20d14:	e2840024 	add	r0, r4, #36	; 0x24
   20d18:	eb00001f 	bl	20d9c <CIPAddress::CIPAddress()>
   20d1c:	e1a00004 	mov	r0, r4
   20d20:	ebffffdd 	bl	20c9c <CNetConfig::Reset()>
   20d24:	e1a00004 	mov	r0, r4
   20d28:	e8bd8010 	pop	{r4, pc}

00020d2c <CNetConfig::SetIPAddress(unsigned int)>:
   20d2c:	e92d4010 	push	{r4, lr}
   20d30:	e1a04000 	mov	r4, r0
   20d34:	e2800004 	add	r0, r0, #4
   20d38:	eb00009a 	bl	20fa8 <CIPAddress::Set(unsigned int)>
   20d3c:	e1a00004 	mov	r0, r4
   20d40:	e8bd4010 	pop	{r4, lr}
   20d44:	eaffffc4 	b	20c5c <CNetConfig::UpdateBroadcastAddress()>

00020d48 <CNetConfig::SetNetMask(unsigned int)>:
   20d48:	e92d4010 	push	{r4, lr}
   20d4c:	e1a04000 	mov	r4, r0
   20d50:	e280000c 	add	r0, r0, #12
   20d54:	eb000093 	bl	20fa8 <CIPAddress::Set(unsigned int)>
   20d58:	e1a00004 	mov	r0, r4
   20d5c:	e8bd4010 	pop	{r4, lr}
   20d60:	eaffffbd 	b	20c5c <CNetConfig::UpdateBroadcastAddress()>

00020d64 <CNetConfig::SetIPAddress(unsigned char const*)>:
   20d64:	e92d4010 	push	{r4, lr}
   20d68:	e1a04000 	mov	r4, r0
   20d6c:	e2800004 	add	r0, r0, #4
   20d70:	eb000090 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   20d74:	e1a00004 	mov	r0, r4
   20d78:	e8bd4010 	pop	{r4, lr}
   20d7c:	eaffffb6 	b	20c5c <CNetConfig::UpdateBroadcastAddress()>

00020d80 <CNetConfig::SetNetMask(unsigned char const*)>:
   20d80:	e92d4010 	push	{r4, lr}
   20d84:	e1a04000 	mov	r4, r0
   20d88:	e280000c 	add	r0, r0, #12
   20d8c:	eb000089 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   20d90:	e1a00004 	mov	r0, r4
   20d94:	e8bd4010 	pop	{r4, lr}
   20d98:	eaffffaf 	b	20c5c <CNetConfig::UpdateBroadcastAddress()>

00020d9c <CIPAddress::CIPAddress()>:
   20d9c:	e3a02000 	mov	r2, #0
   20da0:	e5c02000 	strb	r2, [r0]
   20da4:	e12fff1e 	bx	lr

00020da8 <CIPAddress::CIPAddress(unsigned int)>:
   20da8:	e3a02001 	mov	r2, #1
   20dac:	e5801004 	str	r1, [r0, #4]
   20db0:	e5c02000 	strb	r2, [r0]
   20db4:	e12fff1e 	bx	lr

00020db8 <CIPAddress::CIPAddress(CIPAddress const&)>:
   20db8:	e5d12000 	ldrb	r2, [r1]
   20dbc:	e3520000 	cmp	r2, #0
   20dc0:	0a000004 	beq	20dd8 <CIPAddress::CIPAddress(CIPAddress const&)+0x20>
   20dc4:	e3a0c001 	mov	ip, #1
   20dc8:	e5912004 	ldr	r2, [r1, #4]
   20dcc:	e5c0c000 	strb	ip, [r0]
   20dd0:	e5802004 	str	r2, [r0, #4]
   20dd4:	e12fff1e 	bx	lr
   20dd8:	e92d4010 	push	{r4, lr}
   20ddc:	e3a0202e 	mov	r2, #46	; 0x2e
   20de0:	e59f1004 	ldr	r1, [pc, #4]	; 20dec <CIPAddress::CIPAddress(CIPAddress const&)+0x34>
   20de4:	e59f0004 	ldr	r0, [pc, #4]	; 20df0 <CIPAddress::CIPAddress(CIPAddress const&)+0x38>
   20de8:	eb000e88 	bl	24810 <assertion_failed>
   20dec:	00044538 	.word	0x00044538
   20df0:	00044548 	.word	0x00044548

00020df4 <CIPAddress::~CIPAddress()>:
   20df4:	e12fff1e 	bx	lr

00020df8 <CIPAddress::operator==(CIPAddress const&) const>:
   20df8:	e5d03000 	ldrb	r3, [r0]
   20dfc:	e92d4010 	push	{r4, lr}
   20e00:	e3530000 	cmp	r3, #0
   20e04:	0a000008 	beq	20e2c <CIPAddress::operator==(CIPAddress const&) const+0x34>
   20e08:	e5d13000 	ldrb	r3, [r1]
   20e0c:	e3530000 	cmp	r3, #0
   20e10:	0a000009 	beq	20e3c <CIPAddress::operator==(CIPAddress const&) const+0x44>
   20e14:	e5900004 	ldr	r0, [r0, #4]
   20e18:	e5913004 	ldr	r3, [r1, #4]
   20e1c:	e0400003 	sub	r0, r0, r3
   20e20:	e16f0f10 	clz	r0, r0
   20e24:	e1a002a0 	lsr	r0, r0, #5
   20e28:	e8bd8010 	pop	{r4, pc}
   20e2c:	e3a0203e 	mov	r2, #62	; 0x3e
   20e30:	e59f1014 	ldr	r1, [pc, #20]	; 20e4c <CIPAddress::operator==(CIPAddress const&) const+0x54>
   20e34:	e59f0014 	ldr	r0, [pc, #20]	; 20e50 <CIPAddress::operator==(CIPAddress const&) const+0x58>
   20e38:	eb000e74 	bl	24810 <assertion_failed>
   20e3c:	e3a0203f 	mov	r2, #63	; 0x3f
   20e40:	e59f1004 	ldr	r1, [pc, #4]	; 20e4c <CIPAddress::operator==(CIPAddress const&) const+0x54>
   20e44:	e59f0008 	ldr	r0, [pc, #8]	; 20e54 <CIPAddress::operator==(CIPAddress const&) const+0x5c>
   20e48:	eb000e70 	bl	24810 <assertion_failed>
   20e4c:	00044538 	.word	0x00044538
   20e50:	0003f9e0 	.word	0x0003f9e0
   20e54:	0004455c 	.word	0x0004455c

00020e58 <CIPAddress::operator!=(CIPAddress const&) const>:
   20e58:	e5d03000 	ldrb	r3, [r0]
   20e5c:	e92d4010 	push	{r4, lr}
   20e60:	e3530000 	cmp	r3, #0
   20e64:	0a000007 	beq	20e88 <CIPAddress::operator!=(CIPAddress const&) const+0x30>
   20e68:	e5d13000 	ldrb	r3, [r1]
   20e6c:	e3530000 	cmp	r3, #0
   20e70:	0a000008 	beq	20e98 <CIPAddress::operator!=(CIPAddress const&) const+0x40>
   20e74:	e5900004 	ldr	r0, [r0, #4]
   20e78:	e5913004 	ldr	r3, [r1, #4]
   20e7c:	e0500003 	subs	r0, r0, r3
   20e80:	13a00001 	movne	r0, #1
   20e84:	e8bd8010 	pop	{r4, pc}
   20e88:	e3a02045 	mov	r2, #69	; 0x45
   20e8c:	e59f1014 	ldr	r1, [pc, #20]	; 20ea8 <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   20e90:	e59f0014 	ldr	r0, [pc, #20]	; 20eac <CIPAddress::operator!=(CIPAddress const&) const+0x54>
   20e94:	eb000e5d 	bl	24810 <assertion_failed>
   20e98:	e3a02046 	mov	r2, #70	; 0x46
   20e9c:	e59f1004 	ldr	r1, [pc, #4]	; 20ea8 <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   20ea0:	e59f0008 	ldr	r0, [pc, #8]	; 20eb0 <CIPAddress::operator!=(CIPAddress const&) const+0x58>
   20ea4:	eb000e59 	bl	24810 <assertion_failed>
   20ea8:	00044538 	.word	0x00044538
   20eac:	0003f9e0 	.word	0x0003f9e0
   20eb0:	0004455c 	.word	0x0004455c

00020eb4 <CIPAddress::operator==(unsigned char const*) const>:
   20eb4:	e5d03000 	ldrb	r3, [r0]
   20eb8:	e92d4010 	push	{r4, lr}
   20ebc:	e3530000 	cmp	r3, #0
   20ec0:	0a000007 	beq	20ee4 <CIPAddress::operator==(unsigned char const*) const+0x30>
   20ec4:	e3510000 	cmp	r1, #0
   20ec8:	0a000009 	beq	20ef4 <CIPAddress::operator==(unsigned char const*) const+0x40>
   20ecc:	e3a02004 	mov	r2, #4
   20ed0:	e2800004 	add	r0, r0, #4
   20ed4:	eb002455 	bl	2a030 <memcmp>
   20ed8:	e16f0f10 	clz	r0, r0
   20edc:	e1a002a0 	lsr	r0, r0, #5
   20ee0:	e8bd8010 	pop	{r4, pc}
   20ee4:	e3a0204c 	mov	r2, #76	; 0x4c
   20ee8:	e59f1014 	ldr	r1, [pc, #20]	; 20f04 <CIPAddress::operator==(unsigned char const*) const+0x50>
   20eec:	e59f0014 	ldr	r0, [pc, #20]	; 20f08 <CIPAddress::operator==(unsigned char const*) const+0x54>
   20ef0:	eb000e46 	bl	24810 <assertion_failed>
   20ef4:	e3a0204d 	mov	r2, #77	; 0x4d
   20ef8:	e59f1004 	ldr	r1, [pc, #4]	; 20f04 <CIPAddress::operator==(unsigned char const*) const+0x50>
   20efc:	e59f0008 	ldr	r0, [pc, #8]	; 20f0c <CIPAddress::operator==(unsigned char const*) const+0x58>
   20f00:	eb000e42 	bl	24810 <assertion_failed>
   20f04:	00044538 	.word	0x00044538
   20f08:	0003f9e0 	.word	0x0003f9e0
   20f0c:	00044570 	.word	0x00044570

00020f10 <CIPAddress::operator!=(unsigned char const*) const>:
   20f10:	e92d4010 	push	{r4, lr}
   20f14:	ebffffe6 	bl	20eb4 <CIPAddress::operator==(unsigned char const*) const>
   20f18:	e2200001 	eor	r0, r0, #1
   20f1c:	e6ef0070 	uxtb	r0, r0
   20f20:	e8bd8010 	pop	{r4, pc}

00020f24 <CIPAddress::operator==(unsigned int) const>:
   20f24:	e5d03000 	ldrb	r3, [r0]
   20f28:	e3530000 	cmp	r3, #0
   20f2c:	0a000004 	beq	20f44 <CIPAddress::operator==(unsigned int) const+0x20>
   20f30:	e5900004 	ldr	r0, [r0, #4]
   20f34:	e0400001 	sub	r0, r0, r1
   20f38:	e16f0f10 	clz	r0, r0
   20f3c:	e1a002a0 	lsr	r0, r0, #5
   20f40:	e12fff1e 	bx	lr
   20f44:	e92d4010 	push	{r4, lr}
   20f48:	e3a02058 	mov	r2, #88	; 0x58
   20f4c:	e59f1004 	ldr	r1, [pc, #4]	; 20f58 <CIPAddress::operator==(unsigned int) const+0x34>
   20f50:	e59f0004 	ldr	r0, [pc, #4]	; 20f5c <CIPAddress::operator==(unsigned int) const+0x38>
   20f54:	eb000e2d 	bl	24810 <assertion_failed>
   20f58:	00044538 	.word	0x00044538
   20f5c:	0003f9e0 	.word	0x0003f9e0

00020f60 <CIPAddress::operator!=(unsigned int) const>:
   20f60:	e5d03000 	ldrb	r3, [r0]
   20f64:	e3530000 	cmp	r3, #0
   20f68:	0a000003 	beq	20f7c <CIPAddress::operator!=(unsigned int) const+0x1c>
   20f6c:	e5900004 	ldr	r0, [r0, #4]
   20f70:	e0500001 	subs	r0, r0, r1
   20f74:	13a00001 	movne	r0, #1
   20f78:	e12fff1e 	bx	lr
   20f7c:	e92d4010 	push	{r4, lr}
   20f80:	e3a0205e 	mov	r2, #94	; 0x5e
   20f84:	e59f1004 	ldr	r1, [pc, #4]	; 20f90 <CIPAddress::operator!=(unsigned int) const+0x30>
   20f88:	e59f0004 	ldr	r0, [pc, #4]	; 20f94 <CIPAddress::operator!=(unsigned int) const+0x34>
   20f8c:	eb000e1f 	bl	24810 <assertion_failed>
   20f90:	00044538 	.word	0x00044538
   20f94:	0003f9e0 	.word	0x0003f9e0

00020f98 <CIPAddress::operator=(unsigned int)>:
   20f98:	e3a02001 	mov	r2, #1
   20f9c:	e5801004 	str	r1, [r0, #4]
   20fa0:	e5c02000 	strb	r2, [r0]
   20fa4:	e12fff1e 	bx	lr

00020fa8 <CIPAddress::Set(unsigned int)>:
   20fa8:	e3a03001 	mov	r3, #1
   20fac:	e5801004 	str	r1, [r0, #4]
   20fb0:	e5c03000 	strb	r3, [r0]
   20fb4:	e12fff1e 	bx	lr

00020fb8 <CIPAddress::Set(unsigned char const*)>:
   20fb8:	e3510000 	cmp	r1, #0
   20fbc:	e92d4010 	push	{r4, lr}
   20fc0:	0a000006 	beq	20fe0 <CIPAddress::Set(unsigned char const*)+0x28>
   20fc4:	e3a02004 	mov	r2, #4
   20fc8:	e1a04000 	mov	r4, r0
   20fcc:	e0800002 	add	r0, r0, r2
   20fd0:	eb002652 	bl	2a920 <memcpy>
   20fd4:	e3a03001 	mov	r3, #1
   20fd8:	e5c43000 	strb	r3, [r4]
   20fdc:	e8bd8010 	pop	{r4, pc}
   20fe0:	e3a02075 	mov	r2, #117	; 0x75
   20fe4:	e59f1004 	ldr	r1, [pc, #4]	; 20ff0 <CIPAddress::Set(unsigned char const*)+0x38>
   20fe8:	e59f0004 	ldr	r0, [pc, #4]	; 20ff4 <CIPAddress::Set(unsigned char const*)+0x3c>
   20fec:	eb000e07 	bl	24810 <assertion_failed>
   20ff0:	00044538 	.word	0x00044538
   20ff4:	00044580 	.word	0x00044580

00020ff8 <CIPAddress::CIPAddress(unsigned char const*)>:
   20ff8:	e92d4010 	push	{r4, lr}
   20ffc:	e1a04000 	mov	r4, r0
   21000:	ebffffec 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   21004:	e1a00004 	mov	r0, r4
   21008:	e8bd8010 	pop	{r4, pc}

0002100c <CIPAddress::Set(CIPAddress const&)>:
   2100c:	e5d13000 	ldrb	r3, [r1]
   21010:	e3530000 	cmp	r3, #0
   21014:	0a000004 	beq	2102c <CIPAddress::Set(CIPAddress const&)+0x20>
   21018:	e3a02001 	mov	r2, #1
   2101c:	e5913004 	ldr	r3, [r1, #4]
   21020:	e5c02000 	strb	r2, [r0]
   21024:	e5803004 	str	r3, [r0, #4]
   21028:	e12fff1e 	bx	lr
   2102c:	e92d4010 	push	{r4, lr}
   21030:	e3a0207e 	mov	r2, #126	; 0x7e
   21034:	e59f1004 	ldr	r1, [pc, #4]	; 21040 <CIPAddress::Set(CIPAddress const&)+0x34>
   21038:	e59f0004 	ldr	r0, [pc, #4]	; 21044 <CIPAddress::Set(CIPAddress const&)+0x38>
   2103c:	eb000df3 	bl	24810 <assertion_failed>
   21040:	00044538 	.word	0x00044538
   21044:	00044548 	.word	0x00044548

00021048 <CIPAddress::SetBroadcast()>:
   21048:	e3e02000 	mvn	r2, #0
   2104c:	e3a03001 	mov	r3, #1
   21050:	e5802004 	str	r2, [r0, #4]
   21054:	e5c03000 	strb	r3, [r0]
   21058:	e12fff1e 	bx	lr

0002105c <CIPAddress::operator unsigned int() const>:
   2105c:	e5d03000 	ldrb	r3, [r0]
   21060:	e3530000 	cmp	r3, #0
   21064:	0a000001 	beq	21070 <CIPAddress::operator unsigned int() const+0x14>
   21068:	e5900004 	ldr	r0, [r0, #4]
   2106c:	e12fff1e 	bx	lr
   21070:	e92d4010 	push	{r4, lr}
   21074:	e3a0208f 	mov	r2, #143	; 0x8f
   21078:	e59f1004 	ldr	r1, [pc, #4]	; 21084 <CIPAddress::operator unsigned int() const+0x28>
   2107c:	e59f0004 	ldr	r0, [pc, #4]	; 21088 <CIPAddress::operator unsigned int() const+0x2c>
   21080:	eb000de2 	bl	24810 <assertion_failed>
   21084:	00044538 	.word	0x00044538
   21088:	0003f9e0 	.word	0x0003f9e0

0002108c <CIPAddress::Get() const>:
   2108c:	e5d03000 	ldrb	r3, [r0]
   21090:	e3530000 	cmp	r3, #0
   21094:	0a000001 	beq	210a0 <CIPAddress::Get() const+0x14>
   21098:	e2800004 	add	r0, r0, #4
   2109c:	e12fff1e 	bx	lr
   210a0:	e92d4010 	push	{r4, lr}
   210a4:	e3a02095 	mov	r2, #149	; 0x95
   210a8:	e59f1004 	ldr	r1, [pc, #4]	; 210b4 <CIPAddress::Get() const+0x28>
   210ac:	e59f0004 	ldr	r0, [pc, #4]	; 210b8 <CIPAddress::Get() const+0x2c>
   210b0:	eb000dd6 	bl	24810 <assertion_failed>
   210b4:	00044538 	.word	0x00044538
   210b8:	0003f9e0 	.word	0x0003f9e0

000210bc <CIPAddress::CopyTo(unsigned char*) const>:
   210bc:	e5d02000 	ldrb	r2, [r0]
   210c0:	e92d4010 	push	{r4, lr}
   210c4:	e3520000 	cmp	r2, #0
   210c8:	0a000007 	beq	210ec <CIPAddress::CopyTo(unsigned char*) const+0x30>
   210cc:	e3510000 	cmp	r1, #0
   210d0:	e1a03001 	mov	r3, r1
   210d4:	0a000008 	beq	210fc <CIPAddress::CopyTo(unsigned char*) const+0x40>
   210d8:	e8bd4010 	pop	{r4, lr}
   210dc:	e2801004 	add	r1, r0, #4
   210e0:	e3a02004 	mov	r2, #4
   210e4:	e1a00003 	mov	r0, r3
   210e8:	ea00260c 	b	2a920 <memcpy>
   210ec:	e3a0209b 	mov	r2, #155	; 0x9b
   210f0:	e59f1014 	ldr	r1, [pc, #20]	; 2110c <CIPAddress::CopyTo(unsigned char*) const+0x50>
   210f4:	e59f0014 	ldr	r0, [pc, #20]	; 21110 <CIPAddress::CopyTo(unsigned char*) const+0x54>
   210f8:	eb000dc4 	bl	24810 <assertion_failed>
   210fc:	e3a0209c 	mov	r2, #156	; 0x9c
   21100:	e59f1004 	ldr	r1, [pc, #4]	; 2110c <CIPAddress::CopyTo(unsigned char*) const+0x50>
   21104:	e59f0008 	ldr	r0, [pc, #8]	; 21114 <CIPAddress::CopyTo(unsigned char*) const+0x58>
   21108:	eb000dc0 	bl	24810 <assertion_failed>
   2110c:	00044538 	.word	0x00044538
   21110:	0003f9e0 	.word	0x0003f9e0
   21114:	00040c5c 	.word	0x00040c5c

00021118 <CIPAddress::IsNull() const>:
   21118:	e5d03000 	ldrb	r3, [r0]
   2111c:	e3530000 	cmp	r3, #0
   21120:	0a000003 	beq	21134 <CIPAddress::IsNull() const+0x1c>
   21124:	e5900004 	ldr	r0, [r0, #4]
   21128:	e16f0f10 	clz	r0, r0
   2112c:	e1a002a0 	lsr	r0, r0, #5
   21130:	e12fff1e 	bx	lr
   21134:	e92d4010 	push	{r4, lr}
   21138:	e3a020a2 	mov	r2, #162	; 0xa2
   2113c:	e59f1004 	ldr	r1, [pc, #4]	; 21148 <CIPAddress::IsNull() const+0x30>
   21140:	e59f0004 	ldr	r0, [pc, #4]	; 2114c <CIPAddress::IsNull() const+0x34>
   21144:	eb000db1 	bl	24810 <assertion_failed>
   21148:	00044538 	.word	0x00044538
   2114c:	0003f9e0 	.word	0x0003f9e0

00021150 <CIPAddress::IsBroadcast() const>:
   21150:	e5d03000 	ldrb	r3, [r0]
   21154:	e3530000 	cmp	r3, #0
   21158:	0a000004 	beq	21170 <CIPAddress::IsBroadcast() const+0x20>
   2115c:	e5900004 	ldr	r0, [r0, #4]
   21160:	e3700001 	cmn	r0, #1
   21164:	13a00000 	movne	r0, #0
   21168:	03a00001 	moveq	r0, #1
   2116c:	e12fff1e 	bx	lr
   21170:	e92d4010 	push	{r4, lr}
   21174:	e3a020a8 	mov	r2, #168	; 0xa8
   21178:	e59f1004 	ldr	r1, [pc, #4]	; 21184 <CIPAddress::IsBroadcast() const+0x34>
   2117c:	e59f0004 	ldr	r0, [pc, #4]	; 21188 <CIPAddress::IsBroadcast() const+0x38>
   21180:	eb000da2 	bl	24810 <assertion_failed>
   21184:	00044538 	.word	0x00044538
   21188:	0003f9e0 	.word	0x0003f9e0

0002118c <CIPAddress::GetSize() const>:
   2118c:	e3a00004 	mov	r0, #4
   21190:	e12fff1e 	bx	lr

00021194 <CIPAddress::Format(CString*) const>:
   21194:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   21198:	e5d03000 	ldrb	r3, [r0]
   2119c:	e24dd00c 	sub	sp, sp, #12
   211a0:	e3530000 	cmp	r3, #0
   211a4:	0a00000f 	beq	211e8 <CIPAddress::Format(CString*) const+0x54>
   211a8:	e3510000 	cmp	r1, #0
   211ac:	0a000011 	beq	211f8 <CIPAddress::Format(CString*) const+0x64>
   211b0:	e5902004 	ldr	r2, [r0, #4]
   211b4:	e1a00001 	mov	r0, r1
   211b8:	e1a01822 	lsr	r1, r2, #16
   211bc:	e1a0cc22 	lsr	ip, r2, #24
   211c0:	e6ef1071 	uxtb	r1, r1
   211c4:	e1a03422 	lsr	r3, r2, #8
   211c8:	e58d1000 	str	r1, [sp]
   211cc:	e6ef3073 	uxtb	r3, r3
   211d0:	e58dc004 	str	ip, [sp, #4]
   211d4:	e6ef2072 	uxtb	r2, r2
   211d8:	e59f1028 	ldr	r1, [pc, #40]	; 21208 <CIPAddress::Format(CString*) const+0x74>
   211dc:	eb001fa7 	bl	29080 <CString::Format(char const*, ...)>
   211e0:	e28dd00c 	add	sp, sp, #12
   211e4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   211e8:	e3a020b3 	mov	r2, #179	; 0xb3
   211ec:	e59f1018 	ldr	r1, [pc, #24]	; 2120c <CIPAddress::Format(CString*) const+0x78>
   211f0:	e59f0018 	ldr	r0, [pc, #24]	; 21210 <CIPAddress::Format(CString*) const+0x7c>
   211f4:	eb000d85 	bl	24810 <assertion_failed>
   211f8:	e3a020b4 	mov	r2, #180	; 0xb4
   211fc:	e59f1008 	ldr	r1, [pc, #8]	; 2120c <CIPAddress::Format(CString*) const+0x78>
   21200:	e59f000c 	ldr	r0, [pc, #12]	; 21214 <CIPAddress::Format(CString*) const+0x80>
   21204:	eb000d81 	bl	24810 <assertion_failed>
   21208:	000445a0 	.word	0x000445a0
   2120c:	00044538 	.word	0x00044538
   21210:	0003f9e0 	.word	0x0003f9e0
   21214:	00044590 	.word	0x00044590

00021218 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>:
   21218:	e92d4030 	push	{r4, r5, lr}
   2121c:	e5d13000 	ldrb	r3, [r1]
   21220:	e24dd00c 	sub	sp, sp, #12
   21224:	e3530000 	cmp	r3, #0
   21228:	0a000018 	beq	21290 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x78>
   2122c:	e1a04001 	mov	r4, r1
   21230:	e5911004 	ldr	r1, [r1, #4]
   21234:	e3710001 	cmn	r1, #1
   21238:	0a000011 	beq	21284 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x6c>
   2123c:	e3520000 	cmp	r2, #0
   21240:	0a000016 	beq	212a0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x88>
   21244:	e1a01002 	mov	r1, r2
   21248:	e3a02004 	mov	r2, #4
   2124c:	e1a05000 	mov	r5, r0
   21250:	e08d0002 	add	r0, sp, r2
   21254:	eb0025b1 	bl	2a920 <memcpy>
   21258:	e5d53000 	ldrb	r3, [r5]
   2125c:	e3530000 	cmp	r3, #0
   21260:	0a000012 	beq	212b0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x98>
   21264:	e59d2004 	ldr	r2, [sp, #4]
   21268:	e5953004 	ldr	r3, [r5, #4]
   2126c:	e5941004 	ldr	r1, [r4, #4]
   21270:	e0033002 	and	r3, r3, r2
   21274:	e0022001 	and	r2, r2, r1
   21278:	e0433002 	sub	r3, r3, r2
   2127c:	e16f3f13 	clz	r3, r3
   21280:	e1a032a3 	lsr	r3, r3, #5
   21284:	e1a00003 	mov	r0, r3
   21288:	e28dd00c 	add	sp, sp, #12
   2128c:	e8bd8030 	pop	{r4, r5, pc}
   21290:	e3a020a8 	mov	r2, #168	; 0xa8
   21294:	e59f1024 	ldr	r1, [pc, #36]	; 212c0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   21298:	e59f0024 	ldr	r0, [pc, #36]	; 212c4 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xac>
   2129c:	eb000d5b 	bl	24810 <assertion_failed>
   212a0:	e3a020c1 	mov	r2, #193	; 0xc1
   212a4:	e59f1014 	ldr	r1, [pc, #20]	; 212c0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   212a8:	e59f0018 	ldr	r0, [pc, #24]	; 212c8 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xb0>
   212ac:	eb000d57 	bl	24810 <assertion_failed>
   212b0:	e3a020c5 	mov	r2, #197	; 0xc5
   212b4:	e59f1004 	ldr	r1, [pc, #4]	; 212c0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   212b8:	e59f0004 	ldr	r0, [pc, #4]	; 212c4 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xac>
   212bc:	eb000d53 	bl	24810 <assertion_failed>
   212c0:	00044538 	.word	0x00044538
   212c4:	0003f9e0 	.word	0x0003f9e0
   212c8:	000445ac 	.word	0x000445ac

000212cc <CNetQueue::CNetQueue()>:
   212cc:	e3a02000 	mov	r2, #0
   212d0:	e5802000 	str	r2, [r0]
   212d4:	e5802004 	str	r2, [r0, #4]
   212d8:	e5802008 	str	r2, [r0, #8]
   212dc:	e12fff1e 	bx	lr

000212e0 <CNetQueue::IsEmpty() const>:
   212e0:	e5900000 	ldr	r0, [r0]
   212e4:	e16f0f10 	clz	r0, r0
   212e8:	e1a002a0 	lsr	r0, r0, #5
   212ec:	e12fff1e 	bx	lr

000212f0 <CNetQueue::Flush()>:
   212f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   212f4:	e5904000 	ldr	r4, [r0]
   212f8:	e3540000 	cmp	r4, #0
   212fc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   21300:	e1a05000 	mov	r5, r0
   21304:	e3a07000 	mov	r7, #0
   21308:	e3a06e65 	mov	r6, #1616	; 0x650
   2130c:	ea00000f 	b	21350 <CNetQueue::Flush()+0x60>
   21310:	e3540000 	cmp	r4, #0
   21314:	0a000014 	beq	2136c <CNetQueue::Flush()+0x7c>
   21318:	e5943004 	ldr	r3, [r4, #4]
   2131c:	e3530000 	cmp	r3, #0
   21320:	e5853000 	str	r3, [r5]
   21324:	15837000 	strne	r7, [r3]
   21328:	0a000016 	beq	21388 <CNetQueue::Flush()+0x98>
   2132c:	e5953008 	ldr	r3, [r5, #8]
   21330:	e3530000 	cmp	r3, #0
   21334:	1a000010 	bne	2137c <CNetQueue::Flush()+0x8c>
   21338:	e1a00004 	mov	r0, r4
   2133c:	e1a01006 	mov	r1, r6
   21340:	eb00275d 	bl	2b0bc <operator delete(void*, unsigned int)>
   21344:	e5954000 	ldr	r4, [r5]
   21348:	e3540000 	cmp	r4, #0
   2134c:	0a00000c 	beq	21384 <CNetQueue::Flush()+0x94>
   21350:	e5950008 	ldr	r0, [r5, #8]
   21354:	e3500000 	cmp	r0, #0
   21358:	0affffec 	beq	21310 <CNetQueue::Flush()+0x20>
   2135c:	eb002a7a 	bl	2bd4c <EnterCritical>
   21360:	e5954000 	ldr	r4, [r5]
   21364:	e3540000 	cmp	r4, #0
   21368:	1affffea 	bne	21318 <CNetQueue::Flush()+0x28>
   2136c:	e3a0203a 	mov	r2, #58	; 0x3a
   21370:	e59f1030 	ldr	r1, [pc, #48]	; 213a8 <CNetQueue::Flush()+0xb8>
   21374:	e59f0030 	ldr	r0, [pc, #48]	; 213ac <CNetQueue::Flush()+0xbc>
   21378:	eb000d24 	bl	24810 <assertion_failed>
   2137c:	eb002a9d 	bl	2bdf8 <LeaveCritical>
   21380:	eaffffec 	b	21338 <CNetQueue::Flush()+0x48>
   21384:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21388:	e5952004 	ldr	r2, [r5, #4]
   2138c:	e1540002 	cmp	r4, r2
   21390:	05853004 	streq	r3, [r5, #4]
   21394:	0affffe4 	beq	2132c <CNetQueue::Flush()+0x3c>
   21398:	e3a02043 	mov	r2, #67	; 0x43
   2139c:	e59f1004 	ldr	r1, [pc, #4]	; 213a8 <CNetQueue::Flush()+0xb8>
   213a0:	e59f0008 	ldr	r0, [pc, #8]	; 213b0 <CNetQueue::Flush()+0xc0>
   213a4:	eb000d19 	bl	24810 <assertion_failed>
   213a8:	000445bc 	.word	0x000445bc
   213ac:	00044088 	.word	0x00044088
   213b0:	000445cc 	.word	0x000445cc

000213b4 <CNetQueue::~CNetQueue()>:
   213b4:	e92d4010 	push	{r4, lr}
   213b8:	e1a04000 	mov	r4, r0
   213bc:	ebffffcb 	bl	212f0 <CNetQueue::Flush()>
   213c0:	e1a00004 	mov	r0, r4
   213c4:	e8bd8010 	pop	{r4, pc}

000213c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>:
   213c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   213cc:	e1a05002 	mov	r5, r2
   213d0:	e1a06000 	mov	r6, r0
   213d4:	e3a00e65 	mov	r0, #1616	; 0x650
   213d8:	e1a07001 	mov	r7, r1
   213dc:	e1a08003 	mov	r8, r3
   213e0:	eb002727 	bl	2b084 <operator new(unsigned int)>
   213e4:	e3550000 	cmp	r5, #0
   213e8:	0a000026 	beq	21488 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xc0>
   213ec:	e3550d19 	cmp	r5, #1600	; 0x640
   213f0:	8a000028 	bhi	21498 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xd0>
   213f4:	e3570000 	cmp	r7, #0
   213f8:	e1a04000 	mov	r4, r0
   213fc:	e5805008 	str	r5, [r0, #8]
   21400:	0a000028 	beq	214a8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xe0>
   21404:	e1a02005 	mov	r2, r5
   21408:	e1a01007 	mov	r1, r7
   2140c:	e280000c 	add	r0, r0, #12
   21410:	eb002542 	bl	2a920 <memcpy>
   21414:	e5960008 	ldr	r0, [r6, #8]
   21418:	e584864c 	str	r8, [r4, #1612]	; 0x64c
   2141c:	e3500000 	cmp	r0, #0
   21420:	1a000012 	bne	21470 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xa8>
   21424:	e896000a 	ldm	r6, {r1, r3}
   21428:	e3a02000 	mov	r2, #0
   2142c:	e1510002 	cmp	r1, r2
   21430:	e5842004 	str	r2, [r4, #4]
   21434:	e5843000 	str	r3, [r4]
   21438:	05864000 	streq	r4, [r6]
   2143c:	0a000005 	beq	21458 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x90>
   21440:	e3530000 	cmp	r3, #0
   21444:	0a00001b 	beq	214b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xf0>
   21448:	e5932004 	ldr	r2, [r3, #4]
   2144c:	e3520000 	cmp	r2, #0
   21450:	05834004 	streq	r4, [r3, #4]
   21454:	1a000007 	bne	21478 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xb0>
   21458:	e5963008 	ldr	r3, [r6, #8]
   2145c:	e5864004 	str	r4, [r6, #4]
   21460:	e3530000 	cmp	r3, #0
   21464:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   21468:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2146c:	ea002a61 	b	2bdf8 <LeaveCritical>
   21470:	eb002a35 	bl	2bd4c <EnterCritical>
   21474:	eaffffea 	b	21424 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x5c>
   21478:	e3a02067 	mov	r2, #103	; 0x67
   2147c:	e59f1044 	ldr	r1, [pc, #68]	; 214c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   21480:	e59f0044 	ldr	r0, [pc, #68]	; 214cc <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x104>
   21484:	eb000ce1 	bl	24810 <assertion_failed>
   21488:	e3a02052 	mov	r2, #82	; 0x52
   2148c:	e59f1034 	ldr	r1, [pc, #52]	; 214c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   21490:	e59f0038 	ldr	r0, [pc, #56]	; 214d0 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x108>
   21494:	eb000cdd 	bl	24810 <assertion_failed>
   21498:	e3a02053 	mov	r2, #83	; 0x53
   2149c:	e59f1024 	ldr	r1, [pc, #36]	; 214c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   214a0:	e59f002c 	ldr	r0, [pc, #44]	; 214d4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x10c>
   214a4:	eb000cd9 	bl	24810 <assertion_failed>
   214a8:	e3a02056 	mov	r2, #86	; 0x56
   214ac:	e59f1014 	ldr	r1, [pc, #20]	; 214c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   214b0:	e59f0020 	ldr	r0, [pc, #32]	; 214d8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x110>
   214b4:	eb000cd5 	bl	24810 <assertion_failed>
   214b8:	e3a02066 	mov	r2, #102	; 0x66
   214bc:	e59f1004 	ldr	r1, [pc, #4]	; 214c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   214c0:	e59f0014 	ldr	r0, [pc, #20]	; 214dc <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x114>
   214c4:	eb000cd1 	bl	24810 <assertion_failed>
   214c8:	000445bc 	.word	0x000445bc
   214cc:	000445f0 	.word	0x000445f0
   214d0:	00043ad0 	.word	0x00043ad0
   214d4:	000418b4 	.word	0x000418b4
   214d8:	00040c5c 	.word	0x00040c5c
   214dc:	000445e0 	.word	0x000445e0

000214e0 <CNetQueue::Dequeue(void*, void**)>:
   214e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   214e4:	e5905000 	ldr	r5, [r0]
   214e8:	e3550000 	cmp	r5, #0
   214ec:	0a000031 	beq	215b8 <CNetQueue::Dequeue(void*, void**)+0xd8>
   214f0:	e1a04000 	mov	r4, r0
   214f4:	e5900008 	ldr	r0, [r0, #8]
   214f8:	e1a06002 	mov	r6, r2
   214fc:	e3500000 	cmp	r0, #0
   21500:	e1a07001 	mov	r7, r1
   21504:	1a000019 	bne	21570 <CNetQueue::Dequeue(void*, void**)+0x90>
   21508:	e5953004 	ldr	r3, [r5, #4]
   2150c:	e3530000 	cmp	r3, #0
   21510:	e5843000 	str	r3, [r4]
   21514:	0a00001f 	beq	21598 <CNetQueue::Dequeue(void*, void**)+0xb8>
   21518:	e3a02000 	mov	r2, #0
   2151c:	e5832000 	str	r2, [r3]
   21520:	e5943008 	ldr	r3, [r4, #8]
   21524:	e3530000 	cmp	r3, #0
   21528:	1a000018 	bne	21590 <CNetQueue::Dequeue(void*, void**)+0xb0>
   2152c:	e5954008 	ldr	r4, [r5, #8]
   21530:	e3540000 	cmp	r4, #0
   21534:	0a000022 	beq	215c4 <CNetQueue::Dequeue(void*, void**)+0xe4>
   21538:	e3540d19 	cmp	r4, #1600	; 0x640
   2153c:	8a000024 	bhi	215d4 <CNetQueue::Dequeue(void*, void**)+0xf4>
   21540:	e1a02004 	mov	r2, r4
   21544:	e285100c 	add	r1, r5, #12
   21548:	e1a00007 	mov	r0, r7
   2154c:	eb0024f3 	bl	2a920 <memcpy>
   21550:	e3560000 	cmp	r6, #0
   21554:	1595364c 	ldrne	r3, [r5, #1612]	; 0x64c
   21558:	e1a00005 	mov	r0, r5
   2155c:	15863000 	strne	r3, [r6]
   21560:	e3a01e65 	mov	r1, #1616	; 0x650
   21564:	eb0026d4 	bl	2b0bc <operator delete(void*, unsigned int)>
   21568:	e1a00004 	mov	r0, r4
   2156c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21570:	eb0029f5 	bl	2bd4c <EnterCritical>
   21574:	e5945000 	ldr	r5, [r4]
   21578:	e3550000 	cmp	r5, #0
   2157c:	1affffe1 	bne	21508 <CNetQueue::Dequeue(void*, void**)+0x28>
   21580:	e3a02078 	mov	r2, #120	; 0x78
   21584:	e59f1058 	ldr	r1, [pc, #88]	; 215e4 <CNetQueue::Dequeue(void*, void**)+0x104>
   21588:	e59f0058 	ldr	r0, [pc, #88]	; 215e8 <CNetQueue::Dequeue(void*, void**)+0x108>
   2158c:	eb000c9f 	bl	24810 <assertion_failed>
   21590:	eb002a18 	bl	2bdf8 <LeaveCritical>
   21594:	eaffffe4 	b	2152c <CNetQueue::Dequeue(void*, void**)+0x4c>
   21598:	e5942004 	ldr	r2, [r4, #4]
   2159c:	e1520005 	cmp	r2, r5
   215a0:	05843004 	streq	r3, [r4, #4]
   215a4:	0affffdd 	beq	21520 <CNetQueue::Dequeue(void*, void**)+0x40>
   215a8:	e3a02081 	mov	r2, #129	; 0x81
   215ac:	e59f1030 	ldr	r1, [pc, #48]	; 215e4 <CNetQueue::Dequeue(void*, void**)+0x104>
   215b0:	e59f0034 	ldr	r0, [pc, #52]	; 215ec <CNetQueue::Dequeue(void*, void**)+0x10c>
   215b4:	eb000c95 	bl	24810 <assertion_failed>
   215b8:	e1a04005 	mov	r4, r5
   215bc:	e1a00004 	mov	r0, r4
   215c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   215c4:	e3a02088 	mov	r2, #136	; 0x88
   215c8:	e59f1014 	ldr	r1, [pc, #20]	; 215e4 <CNetQueue::Dequeue(void*, void**)+0x104>
   215cc:	e59f001c 	ldr	r0, [pc, #28]	; 215f0 <CNetQueue::Dequeue(void*, void**)+0x110>
   215d0:	eb000c8e 	bl	24810 <assertion_failed>
   215d4:	e3a02089 	mov	r2, #137	; 0x89
   215d8:	e59f1004 	ldr	r1, [pc, #4]	; 215e4 <CNetQueue::Dequeue(void*, void**)+0x104>
   215dc:	e59f0010 	ldr	r0, [pc, #16]	; 215f4 <CNetQueue::Dequeue(void*, void**)+0x114>
   215e0:	eb000c8a 	bl	24810 <assertion_failed>
   215e4:	000445bc 	.word	0x000445bc
   215e8:	00044088 	.word	0x00044088
   215ec:	000445cc 	.word	0x000445cc
   215f0:	00044604 	.word	0x00044604
   215f4:	00044610 	.word	0x00044610

000215f8 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>:
   215f8:	e92d4070 	push	{r4, r5, r6, lr}
   215fc:	e1a04000 	mov	r4, r0
   21600:	e3a05000 	mov	r5, #0
   21604:	e1a06002 	mov	r6, r2
   21608:	e1a00001 	mov	r0, r1
   2160c:	e5c4500c 	strb	r5, [r4, #12]
   21610:	e1a01004 	mov	r1, r4
   21614:	ebfffea8 	bl	210bc <CIPAddress::CopyTo(unsigned char*) const>
   21618:	e5c45008 	strb	r5, [r4, #8]
   2161c:	e5c46009 	strb	r6, [r4, #9]
   21620:	e1a00004 	mov	r0, r4
   21624:	e8bd8070 	pop	{r4, r5, r6, pc}

00021628 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>:
   21628:	e92d4070 	push	{r4, r5, r6, lr}
   2162c:	e3a0c001 	mov	ip, #1
   21630:	e1a04000 	mov	r4, r0
   21634:	e1a06002 	mov	r6, r2
   21638:	e1a00001 	mov	r0, r1
   2163c:	e5c4c00c 	strb	ip, [r4, #12]
   21640:	e1a01004 	mov	r1, r4
   21644:	e1a05003 	mov	r5, r3
   21648:	ebfffe9b 	bl	210bc <CIPAddress::CopyTo(unsigned char*) const>
   2164c:	e1a00006 	mov	r0, r6
   21650:	e2841004 	add	r1, r4, #4
   21654:	ebfffe98 	bl	210bc <CIPAddress::CopyTo(unsigned char*) const>
   21658:	e3a02000 	mov	r2, #0
   2165c:	e5c45009 	strb	r5, [r4, #9]
   21660:	e5c42008 	strb	r2, [r4, #8]
   21664:	e1a00004 	mov	r0, r4
   21668:	e8bd8070 	pop	{r4, r5, r6, pc}

0002166c <CChecksumCalculator::~CChecksumCalculator()>:
   2166c:	e12fff1e 	bx	lr

00021670 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>:
   21670:	e1a03001 	mov	r3, r1
   21674:	e1a01000 	mov	r1, r0
   21678:	e1a00003 	mov	r0, r3
   2167c:	eafffe8e 	b	210bc <CIPAddress::CopyTo(unsigned char*) const>

00021680 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>:
   21680:	e92d4010 	push	{r4, lr}
   21684:	e1a04000 	mov	r4, r0
   21688:	e1a00001 	mov	r0, r1
   2168c:	e2841004 	add	r1, r4, #4
   21690:	ebfffe89 	bl	210bc <CIPAddress::CopyTo(unsigned char*) const>
   21694:	e3a03001 	mov	r3, #1
   21698:	e5c4300c 	strb	r3, [r4, #12]
   2169c:	e8bd8010 	pop	{r4, pc}

000216a0 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>:
   216a0:	e3500000 	cmp	r0, #0
   216a4:	e92d4010 	push	{r4, lr}
   216a8:	0a000015 	beq	21704 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x64>
   216ac:	e3510000 	cmp	r1, #0
   216b0:	0a000017 	beq	21714 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x74>
   216b4:	e3510001 	cmp	r1, #1
   216b8:	9a00000c 	bls	216f0 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x50>
   216bc:	e1a0c000 	mov	ip, r0
   216c0:	e1a03001 	mov	r3, r1
   216c4:	e2433002 	sub	r3, r3, #2
   216c8:	e0dce0b2 	ldrh	lr, [ip], #2
   216cc:	e3530001 	cmp	r3, #1
   216d0:	e082200e 	add	r2, r2, lr
   216d4:	8afffffa 	bhi	216c4 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x24>
   216d8:	e2413002 	sub	r3, r1, #2
   216dc:	e3c33001 	bic	r3, r3, #1
   216e0:	e2833002 	add	r3, r3, #2
   216e4:	e3110001 	tst	r1, #1
   216e8:	e0800003 	add	r0, r0, r3
   216ec:	0a000002 	beq	216fc <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x5c>
   216f0:	e5d00000 	ldrb	r0, [r0]
   216f4:	e0800002 	add	r0, r0, r2
   216f8:	e8bd8010 	pop	{r4, pc}
   216fc:	e1a00002 	mov	r0, r2
   21700:	e8bd8010 	pop	{r4, pc}
   21704:	e3a02054 	mov	r2, #84	; 0x54
   21708:	e59f1014 	ldr	r1, [pc, #20]	; 21724 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x84>
   2170c:	e59f0014 	ldr	r0, [pc, #20]	; 21728 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x88>
   21710:	eb000c3e 	bl	24810 <assertion_failed>
   21714:	e3a02055 	mov	r2, #85	; 0x55
   21718:	e59f1004 	ldr	r1, [pc, #4]	; 21724 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x84>
   2171c:	e59f0008 	ldr	r0, [pc, #8]	; 2172c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x8c>
   21720:	eb000c3a 	bl	24810 <assertion_failed>
   21724:	00044630 	.word	0x00044630
   21728:	00044648 	.word	0x00044648
   2172c:	00043ad0 	.word	0x00043ad0

00021730 <CChecksumCalculator::Calculate(void const*, unsigned int)>:
   21730:	e5d0300c 	ldrb	r3, [r0, #12]
   21734:	e92d4070 	push	{r4, r5, r6, lr}
   21738:	e3530000 	cmp	r3, #0
   2173c:	0a00001d 	beq	217b8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x88>
   21740:	e1a05001 	mov	r5, r1
   21744:	e6bf3fb2 	rev16	r3, r2
   21748:	e6ff3073 	uxth	r3, r3
   2174c:	e1a04002 	mov	r4, r2
   21750:	e1a02423 	lsr	r2, r3, #8
   21754:	e5c0200b 	strb	r2, [r0, #11]
   21758:	e5c0300a 	strb	r3, [r0, #10]
   2175c:	e3a02000 	mov	r2, #0
   21760:	e3a0100c 	mov	r1, #12
   21764:	ebffffcd 	bl	216a0 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   21768:	e3550000 	cmp	r5, #0
   2176c:	0a000015 	beq	217c8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x98>
   21770:	e3540000 	cmp	r4, #0
   21774:	0a000017 	beq	217d8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xa8>
   21778:	e1a02000 	mov	r2, r0
   2177c:	e1a01004 	mov	r1, r4
   21780:	e1a00005 	mov	r0, r5
   21784:	ebffffc5 	bl	216a0 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   21788:	e1a03820 	lsr	r3, r0, #16
   2178c:	e3530000 	cmp	r3, #0
   21790:	e6ff3073 	uxth	r3, r3
   21794:	0a000004 	beq	217ac <CChecksumCalculator::Calculate(void const*, unsigned int)+0x7c>
   21798:	e3a02001 	mov	r2, #1
   2179c:	e6f30070 	uxtah	r0, r3, r0
   217a0:	e1b03820 	lsrs	r3, r0, #16
   217a4:	e1a03002 	mov	r3, r2
   217a8:	1afffffb 	bne	2179c <CChecksumCalculator::Calculate(void const*, unsigned int)+0x6c>
   217ac:	e1e00000 	mvn	r0, r0
   217b0:	e6ff0070 	uxth	r0, r0
   217b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   217b8:	e3a0203c 	mov	r2, #60	; 0x3c
   217bc:	e59f1024 	ldr	r1, [pc, #36]	; 217e8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   217c0:	e59f0024 	ldr	r0, [pc, #36]	; 217ec <CChecksumCalculator::Calculate(void const*, unsigned int)+0xbc>
   217c4:	eb000c11 	bl	24810 <assertion_failed>
   217c8:	e3a02041 	mov	r2, #65	; 0x41
   217cc:	e59f1014 	ldr	r1, [pc, #20]	; 217e8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   217d0:	e59f0018 	ldr	r0, [pc, #24]	; 217f0 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xc0>
   217d4:	eb000c0d 	bl	24810 <assertion_failed>
   217d8:	e3a02042 	mov	r2, #66	; 0x42
   217dc:	e59f1004 	ldr	r1, [pc, #4]	; 217e8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   217e0:	e59f000c 	ldr	r0, [pc, #12]	; 217f4 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xc4>
   217e4:	eb000c09 	bl	24810 <assertion_failed>
   217e8:	00044630 	.word	0x00044630
   217ec:	00044658 	.word	0x00044658
   217f0:	00040c5c 	.word	0x00040c5c
   217f4:	00043ad0 	.word	0x00043ad0

000217f8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>:
   217f8:	e3500000 	cmp	r0, #0
   217fc:	e92d4010 	push	{r4, lr}
   21800:	0a00000f 	beq	21844 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x4c>
   21804:	e3510000 	cmp	r1, #0
   21808:	0a000011 	beq	21854 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x5c>
   2180c:	e3a02000 	mov	r2, #0
   21810:	ebffffa2 	bl	216a0 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   21814:	e1a03820 	lsr	r3, r0, #16
   21818:	e3530000 	cmp	r3, #0
   2181c:	e6ff3073 	uxth	r3, r3
   21820:	0a000004 	beq	21838 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x40>
   21824:	e3a02001 	mov	r2, #1
   21828:	e6f30070 	uxtah	r0, r3, r0
   2182c:	e1b03820 	lsrs	r3, r0, #16
   21830:	e1a03002 	mov	r3, r2
   21834:	1afffffb 	bne	21828 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x30>
   21838:	e1e00000 	mvn	r0, r0
   2183c:	e6ff0070 	uxth	r0, r0
   21840:	e8bd8010 	pop	{r4, pc}
   21844:	e3a0204a 	mov	r2, #74	; 0x4a
   21848:	e59f1014 	ldr	r1, [pc, #20]	; 21864 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x6c>
   2184c:	e59f0014 	ldr	r0, [pc, #20]	; 21868 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x70>
   21850:	eb000bee 	bl	24810 <assertion_failed>
   21854:	e3a0204b 	mov	r2, #75	; 0x4b
   21858:	e59f1004 	ldr	r1, [pc, #4]	; 21864 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x6c>
   2185c:	e59f0008 	ldr	r0, [pc, #8]	; 2186c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x74>
   21860:	eb000bea 	bl	24810 <assertion_failed>
   21864:	00044630 	.word	0x00044630
   21868:	00040c5c 	.word	0x00040c5c
   2186c:	00043ad0 	.word	0x00043ad0

00021870 <CChecksumCalculator::FoldResult(unsigned int)>:
   21870:	e1a03820 	lsr	r3, r0, #16
   21874:	e3530000 	cmp	r3, #0
   21878:	e6ff3073 	uxth	r3, r3
   2187c:	0a000004 	beq	21894 <CChecksumCalculator::FoldResult(unsigned int)+0x24>
   21880:	e3a02001 	mov	r2, #1
   21884:	e6f30070 	uxtah	r0, r3, r0
   21888:	e1b03820 	lsrs	r3, r0, #16
   2188c:	e1a03002 	mov	r3, r2
   21890:	1afffffb 	bne	21884 <CChecksumCalculator::FoldResult(unsigned int)+0x14>
   21894:	e6ff0070 	uxth	r0, r0
   21898:	e12fff1e 	bx	lr

0002189c <CDHCPClient::HaltNetwork() [clone .part.0]>:
   2189c:	e92d4010 	push	{r4, lr}
   218a0:	e59f2008 	ldr	r2, [pc, #8]	; 218b0 <CDHCPClient::HaltNetwork() [clone .part.0]+0x14>
   218a4:	e59f1008 	ldr	r1, [pc, #8]	; 218b4 <CDHCPClient::HaltNetwork() [clone .part.0]+0x18>
   218a8:	e59f0008 	ldr	r0, [pc, #8]	; 218b8 <CDHCPClient::HaltNetwork() [clone .part.0]+0x1c>
   218ac:	eb000bd7 	bl	24810 <assertion_failed>
   218b0:	000001ae 	.word	0x000001ae
   218b4:	000446b0 	.word	0x000446b0
   218b8:	00043a48 	.word	0x00043a48

000218bc <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>:
   218bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   218c0:	e1a04000 	mov	r4, r0
   218c4:	e1a05001 	mov	r5, r1
   218c8:	e3a01902 	mov	r1, #32768	; 0x8000
   218cc:	e1a06002 	mov	r6, r2
   218d0:	eb00097d 	bl	23ecc <CTask::CTask(unsigned int)>
   218d4:	e59f30a0 	ldr	r3, [pc, #160]	; 2197c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc0>
   218d8:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   218dc:	e5843000 	str	r3, [r4]
   218e0:	e1a00005 	mov	r0, r5
   218e4:	ebffdfa8 	bl	1978c <CNetSubSystem::GetConfig()>
   218e8:	e28470e4 	add	r7, r4, #228	; 0xe4
   218ec:	e3560000 	cmp	r6, #0
   218f0:	e59f1088 	ldr	r1, [pc, #136]	; 21980 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc4>
   218f4:	e58400e0 	str	r0, [r4, #224]	; 0xe0
   218f8:	11a01006 	movne	r1, r6
   218fc:	e1a00007 	mov	r0, r7
   21900:	eb0018a1 	bl	27b8c <CString::CString(char const*)>
   21904:	e3a02011 	mov	r2, #17
   21908:	e1a01005 	mov	r1, r5
   2190c:	e28400f4 	add	r0, r4, #244	; 0xf4
   21910:	eb00065a 	bl	23280 <CSocket::CSocket(CNetSubSystem*, int)>
   21914:	e3a02000 	mov	r2, #0
   21918:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   2191c:	e5c42194 	strb	r2, [r4, #404]	; 0x194
   21920:	e1530002 	cmp	r3, r2
   21924:	0a000008 	beq	2194c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0x90>
   21928:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
   2192c:	e3530000 	cmp	r3, #0
   21930:	0a000009 	beq	2195c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xa0>
   21934:	e1a00007 	mov	r0, r7
   21938:	eb0018d1 	bl	27c84 <CString::GetLength() const>
   2193c:	e350001e 	cmp	r0, #30
   21940:	8a000009 	bhi	2196c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xb0>
   21944:	e1a00004 	mov	r0, r4
   21948:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2194c:	e3a02073 	mov	r2, #115	; 0x73
   21950:	e59f102c 	ldr	r1, [pc, #44]	; 21984 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   21954:	e59f002c 	ldr	r0, [pc, #44]	; 21988 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xcc>
   21958:	eb000bac 	bl	24810 <assertion_failed>
   2195c:	e3a02074 	mov	r2, #116	; 0x74
   21960:	e59f101c 	ldr	r1, [pc, #28]	; 21984 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   21964:	e59f0020 	ldr	r0, [pc, #32]	; 2198c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd0>
   21968:	eb000ba8 	bl	24810 <assertion_failed>
   2196c:	e3a02076 	mov	r2, #118	; 0x76
   21970:	e59f100c 	ldr	r1, [pc, #12]	; 21984 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   21974:	e59f0014 	ldr	r0, [pc, #20]	; 21990 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd4>
   21978:	eb000ba4 	bl	24810 <assertion_failed>
   2197c:	00044674 	.word	0x00044674
   21980:	00047884 	.word	0x00047884
   21984:	000446b0 	.word	0x000446b0
   21988:	00043a1c 	.word	0x00043a1c
   2198c:	00043a48 	.word	0x00043a48
   21990:	000446c0 	.word	0x000446c0

00021994 <CDHCPClient::IsBound() const>:
   21994:	e5d00194 	ldrb	r0, [r0, #404]	; 0x194
   21998:	e12fff1e 	bx	lr

0002199c <CDHCPClient::HaltNetwork()>:
   2199c:	e3a02000 	mov	r2, #0
   219a0:	e59030e0 	ldr	r3, [r0, #224]	; 0xe0
   219a4:	e5c02194 	strb	r2, [r0, #404]	; 0x194
   219a8:	e1530002 	cmp	r3, r2
   219ac:	0a000001 	beq	219b8 <CDHCPClient::HaltNetwork()+0x1c>
   219b0:	e1a00003 	mov	r0, r3
   219b4:	eafffcb8 	b	20c9c <CNetConfig::Reset()>
   219b8:	e92d4010 	push	{r4, lr}
   219bc:	ebffffb6 	bl	2189c <CDHCPClient::HaltNetwork() [clone .part.0]>

000219c0 <CDHCPClient::CheckConfig()>:
   219c0:	e92d4030 	push	{r4, r5, lr}
   219c4:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   219c8:	e24dd014 	sub	sp, sp, #20
   219cc:	e3530000 	cmp	r3, #0
   219d0:	e1a04000 	mov	r4, r0
   219d4:	0a00002e 	beq	21a94 <CDHCPClient::CheckConfig()+0xd4>
   219d8:	e59021c0 	ldr	r2, [r0, #448]	; 0x1c0
   219dc:	e3520000 	cmp	r2, #0
   219e0:	0a00002b 	beq	21a94 <CDHCPClient::CheckConfig()+0xd4>
   219e4:	e59011c4 	ldr	r1, [r0, #452]	; 0x1c4
   219e8:	e3510000 	cmp	r1, #0
   219ec:	0a000028 	beq	21a94 <CDHCPClient::CheckConfig()+0xd4>
   219f0:	e59001c8 	ldr	r0, [r0, #456]	; 0x1c8
   219f4:	e3500000 	cmp	r0, #0
   219f8:	0a000025 	beq	21a94 <CDHCPClient::CheckConfig()+0xd4>
   219fc:	e0233001 	eor	r3, r3, r1
   21a00:	e1130002 	tst	r3, r2
   21a04:	1a000037 	bne	21ae8 <CDHCPClient::CheckConfig()+0x128>
   21a08:	e59451cc 	ldr	r5, [r4, #460]	; 0x1cc
   21a0c:	e3550000 	cmp	r5, #0
   21a10:	0a000041 	beq	21b1c <CDHCPClient::CheckConfig()+0x15c>
   21a14:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   21a18:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   21a1c:	e3520000 	cmp	r2, #0
   21a20:	1a00002b 	bne	21ad4 <CDHCPClient::CheckConfig()+0x114>
   21a24:	e3530000 	cmp	r3, #0
   21a28:	01a020a5 	lsreq	r2, r5, #1
   21a2c:	004531a5 	subeq	r3, r5, r5, lsr #3
   21a30:	10652083 	rsbne	r2, r5, r3, lsl #1
   21a34:	058421d8 	streq	r2, [r4, #472]	; 0x1d8
   21a38:	058431dc 	streq	r3, [r4, #476]	; 0x1dc
   21a3c:	158421d8 	strne	r2, [r4, #472]	; 0x1d8
   21a40:	e1550003 	cmp	r5, r3
   21a44:	23a00000 	movcs	r0, #0
   21a48:	33a00001 	movcc	r0, #1
   21a4c:	e1520003 	cmp	r2, r3
   21a50:	83800001 	orrhi	r0, r0, #1
   21a54:	e3500000 	cmp	r0, #0
   21a58:	03a00001 	moveq	r0, #1
   21a5c:	0a00001a 	beq	21acc <CDHCPClient::CheckConfig()+0x10c>
   21a60:	eb00145d 	bl	26bdc <CLogger::Get()>
   21a64:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   21a68:	e59421dc 	ldr	r2, [r4, #476]	; 0x1dc
   21a6c:	e59431d8 	ldr	r3, [r4, #472]	; 0x1d8
   21a70:	e58d1008 	str	r1, [sp, #8]
   21a74:	e58d2004 	str	r2, [sp, #4]
   21a78:	e58d3000 	str	r3, [sp]
   21a7c:	e3a02002 	mov	r2, #2
   21a80:	e59f30b0 	ldr	r3, [pc, #176]	; 21b38 <CDHCPClient::CheckConfig()+0x178>
   21a84:	e59f10b0 	ldr	r1, [pc, #176]	; 21b3c <CDHCPClient::CheckConfig()+0x17c>
   21a88:	eb001390 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21a8c:	e3a00000 	mov	r0, #0
   21a90:	ea00000d 	b	21acc <CDHCPClient::CheckConfig()+0x10c>
   21a94:	eb001450 	bl	26bdc <CLogger::Get()>
   21a98:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   21a9c:	e59421c0 	ldr	r2, [r4, #448]	; 0x1c0
   21aa0:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   21aa4:	e594c1c8 	ldr	ip, [r4, #456]	; 0x1c8
   21aa8:	e58d1008 	str	r1, [sp, #8]
   21aac:	e58d2004 	str	r2, [sp, #4]
   21ab0:	e58d3000 	str	r3, [sp]
   21ab4:	e58dc00c 	str	ip, [sp, #12]
   21ab8:	e59f3080 	ldr	r3, [pc, #128]	; 21b40 <CDHCPClient::CheckConfig()+0x180>
   21abc:	e3a02002 	mov	r2, #2
   21ac0:	e59f1074 	ldr	r1, [pc, #116]	; 21b3c <CDHCPClient::CheckConfig()+0x17c>
   21ac4:	eb001381 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21ac8:	e3a00000 	mov	r0, #0
   21acc:	e28dd014 	add	sp, sp, #20
   21ad0:	e8bd8030 	pop	{r4, r5, pc}
   21ad4:	e3530000 	cmp	r3, #0
   21ad8:	00453002 	subeq	r3, r5, r2
   21adc:	008230a3 	addeq	r3, r2, r3, lsr #1
   21ae0:	058431dc 	streq	r3, [r4, #476]	; 0x1dc
   21ae4:	eaffffd5 	b	21a40 <CDHCPClient::CheckConfig()+0x80>
   21ae8:	eb00143b 	bl	26bdc <CLogger::Get()>
   21aec:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   21af0:	e59421c4 	ldr	r2, [r4, #452]	; 0x1c4
   21af4:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   21af8:	e58d1008 	str	r1, [sp, #8]
   21afc:	e58d2004 	str	r2, [sp, #4]
   21b00:	e58d3000 	str	r3, [sp]
   21b04:	e3a02002 	mov	r2, #2
   21b08:	e59f3034 	ldr	r3, [pc, #52]	; 21b44 <CDHCPClient::CheckConfig()+0x184>
   21b0c:	e59f1028 	ldr	r1, [pc, #40]	; 21b3c <CDHCPClient::CheckConfig()+0x17c>
   21b10:	eb00136e 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21b14:	e3a00000 	mov	r0, #0
   21b18:	eaffffeb 	b	21acc <CDHCPClient::CheckConfig()+0x10c>
   21b1c:	eb00142e 	bl	26bdc <CLogger::Get()>
   21b20:	e59f3020 	ldr	r3, [pc, #32]	; 21b48 <CDHCPClient::CheckConfig()+0x188>
   21b24:	e3a02002 	mov	r2, #2
   21b28:	e59f100c 	ldr	r1, [pc, #12]	; 21b3c <CDHCPClient::CheckConfig()+0x17c>
   21b2c:	eb001367 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21b30:	e1a00005 	mov	r0, r5
   21b34:	eaffffe4 	b	21acc <CDHCPClient::CheckConfig()+0x10c>
   21b38:	00044754 	.word	0x00044754
   21b3c:	00044680 	.word	0x00044680
   21b40:	000446e0 	.word	0x000446e0
   21b44:	00044710 	.word	0x00044710
   21b48:	0004473c 	.word	0x0004473c

00021b4c <CDHCPClient::GetUnaligned(void const*)>:
   21b4c:	e3500000 	cmp	r0, #0
   21b50:	0a000001 	beq	21b5c <CDHCPClient::GetUnaligned(void const*)+0x10>
   21b54:	e5900000 	ldr	r0, [r0]
   21b58:	e12fff1e 	bx	lr
   21b5c:	e92d4010 	push	{r4, lr}
   21b60:	e3a02e36 	mov	r2, #864	; 0x360
   21b64:	e59f1004 	ldr	r1, [pc, #4]	; 21b70 <CDHCPClient::GetUnaligned(void const*)+0x24>
   21b68:	e59f0004 	ldr	r0, [pc, #4]	; 21b74 <CDHCPClient::GetUnaligned(void const*)+0x28>
   21b6c:	eb000b27 	bl	24810 <assertion_failed>
   21b70:	000446b0 	.word	0x000446b0
   21b74:	00044774 	.word	0x00044774

00021b78 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>:
   21b78:	e3510000 	cmp	r1, #0
   21b7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21b80:	11a07000 	movne	r7, r0
   21b84:	11a04001 	movne	r4, r1
   21b88:	10816002 	addne	r6, r1, r2
   21b8c:	0a000079 	beq	21d78 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x200>
   21b90:	e2840002 	add	r0, r4, #2
   21b94:	e1560000 	cmp	r6, r0
   21b98:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
   21b9c:	e5d43000 	ldrb	r3, [r4]
   21ba0:	e3530034 	cmp	r3, #52	; 0x34
   21ba4:	0a000034 	beq	21c7c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x104>
   21ba8:	8a00000d 	bhi	21be4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x6c>
   21bac:	e3530003 	cmp	r3, #3
   21bb0:	0a000043 	beq	21cc4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x14c>
   21bb4:	8a00001a 	bhi	21c24 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xac>
   21bb8:	e3530000 	cmp	r3, #0
   21bbc:	02844001 	addeq	r4, r4, #1
   21bc0:	0afffff2 	beq	21b90 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   21bc4:	e3530001 	cmp	r3, #1
   21bc8:	1a000027 	bne	21c6c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xf4>
   21bcc:	e5d45001 	ldrb	r5, [r4, #1]
   21bd0:	e3550004 	cmp	r5, #4
   21bd4:	0a000061 	beq	21d60 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1e8>
   21bd8:	e2855002 	add	r5, r5, #2
   21bdc:	e0844005 	add	r4, r4, r5
   21be0:	eaffffea 	b	21b90 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   21be4:	e353003a 	cmp	r3, #58	; 0x3a
   21be8:	0a000049 	beq	21d14 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x19c>
   21bec:	8a00001a 	bhi	21c5c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xe4>
   21bf0:	e3530035 	cmp	r3, #53	; 0x35
   21bf4:	0a00003e 	beq	21cf4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x17c>
   21bf8:	e3530036 	cmp	r3, #54	; 0x36
   21bfc:	1a00001a 	bne	21c6c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xf4>
   21c00:	e5d45001 	ldrb	r5, [r4, #1]
   21c04:	e3550004 	cmp	r5, #4
   21c08:	1afffff2 	bne	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c0c:	e2843006 	add	r3, r4, #6
   21c10:	e1560003 	cmp	r6, r3
   21c14:	3affffef 	bcc	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c18:	ebffffcb 	bl	21b4c <CDHCPClient::GetUnaligned(void const*)>
   21c1c:	e58701d4 	str	r0, [r7, #468]	; 0x1d4
   21c20:	eaffffec 	b	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c24:	e3530006 	cmp	r3, #6
   21c28:	0a000043 	beq	21d3c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1c4>
   21c2c:	e3530033 	cmp	r3, #51	; 0x33
   21c30:	1a00000d 	bne	21c6c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xf4>
   21c34:	e5d45001 	ldrb	r5, [r4, #1]
   21c38:	e3550004 	cmp	r5, #4
   21c3c:	1affffe5 	bne	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c40:	e2843006 	add	r3, r4, #6
   21c44:	e1560003 	cmp	r6, r3
   21c48:	3affffe2 	bcc	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c4c:	ebffffbe 	bl	21b4c <CDHCPClient::GetUnaligned(void const*)>
   21c50:	e6bf0f30 	rev	r0, r0
   21c54:	e58701cc 	str	r0, [r7, #460]	; 0x1cc
   21c58:	eaffffde 	b	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c5c:	e353003b 	cmp	r3, #59	; 0x3b
   21c60:	0a00000d 	beq	21c9c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x124>
   21c64:	e35300ff 	cmp	r3, #255	; 0xff
   21c68:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   21c6c:	e5d45001 	ldrb	r5, [r4, #1]
   21c70:	e2855002 	add	r5, r5, #2
   21c74:	e0844005 	add	r4, r4, r5
   21c78:	eaffffc4 	b	21b90 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   21c7c:	e5d45001 	ldrb	r5, [r4, #1]
   21c80:	e3550001 	cmp	r5, #1
   21c84:	1affffd3 	bne	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c88:	e2843003 	add	r3, r4, #3
   21c8c:	e1560003 	cmp	r6, r3
   21c90:	25d43002 	ldrbcs	r3, [r4, #2]
   21c94:	25c731d0 	strbcs	r3, [r7, #464]	; 0x1d0
   21c98:	eaffffce 	b	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c9c:	e5d45001 	ldrb	r5, [r4, #1]
   21ca0:	e3550004 	cmp	r5, #4
   21ca4:	1affffcb 	bne	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21ca8:	e2843006 	add	r3, r4, #6
   21cac:	e1560003 	cmp	r6, r3
   21cb0:	3affffc8 	bcc	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21cb4:	ebffffa4 	bl	21b4c <CDHCPClient::GetUnaligned(void const*)>
   21cb8:	e6bf0f30 	rev	r0, r0
   21cbc:	e58701dc 	str	r0, [r7, #476]	; 0x1dc
   21cc0:	eaffffc4 	b	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21cc4:	e5d45001 	ldrb	r5, [r4, #1]
   21cc8:	e3550003 	cmp	r5, #3
   21ccc:	daffffc1 	ble	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21cd0:	e2843006 	add	r3, r4, #6
   21cd4:	e1560003 	cmp	r6, r3
   21cd8:	3affffbe 	bcc	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21cdc:	e59731c4 	ldr	r3, [r7, #452]	; 0x1c4
   21ce0:	e3530000 	cmp	r3, #0
   21ce4:	1affffbb 	bne	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21ce8:	ebffff97 	bl	21b4c <CDHCPClient::GetUnaligned(void const*)>
   21cec:	e58701c4 	str	r0, [r7, #452]	; 0x1c4
   21cf0:	eaffffb8 	b	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21cf4:	e5d45001 	ldrb	r5, [r4, #1]
   21cf8:	e3550001 	cmp	r5, #1
   21cfc:	1affffb5 	bne	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d00:	e2843003 	add	r3, r4, #3
   21d04:	e1560003 	cmp	r6, r3
   21d08:	25d43002 	ldrbcs	r3, [r4, #2]
   21d0c:	25c731d1 	strbcs	r3, [r7, #465]	; 0x1d1
   21d10:	eaffffb0 	b	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d14:	e5d45001 	ldrb	r5, [r4, #1]
   21d18:	e3550004 	cmp	r5, #4
   21d1c:	1affffad 	bne	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d20:	e2843006 	add	r3, r4, #6
   21d24:	e1560003 	cmp	r6, r3
   21d28:	3affffaa 	bcc	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d2c:	ebffff86 	bl	21b4c <CDHCPClient::GetUnaligned(void const*)>
   21d30:	e6bf0f30 	rev	r0, r0
   21d34:	e58701d8 	str	r0, [r7, #472]	; 0x1d8
   21d38:	eaffffa6 	b	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d3c:	e5d45001 	ldrb	r5, [r4, #1]
   21d40:	e3550003 	cmp	r5, #3
   21d44:	daffffa3 	ble	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d48:	e2843006 	add	r3, r4, #6
   21d4c:	e1560003 	cmp	r6, r3
   21d50:	3affffa0 	bcc	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d54:	ebffff7c 	bl	21b4c <CDHCPClient::GetUnaligned(void const*)>
   21d58:	e58701c8 	str	r0, [r7, #456]	; 0x1c8
   21d5c:	eaffff9d 	b	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d60:	e2843006 	add	r3, r4, #6
   21d64:	e1560003 	cmp	r6, r3
   21d68:	3affff9a 	bcc	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d6c:	ebffff76 	bl	21b4c <CDHCPClient::GetUnaligned(void const*)>
   21d70:	e58701c0 	str	r0, [r7, #448]	; 0x1c0
   21d74:	eaffff97 	b	21bd8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d78:	e59f2008 	ldr	r2, [pc, #8]	; 21d88 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x210>
   21d7c:	e59f1008 	ldr	r1, [pc, #8]	; 21d8c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x214>
   21d80:	e59f0008 	ldr	r0, [pc, #8]	; 21d90 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x218>
   21d84:	eb000aa1 	bl	24810 <assertion_failed>
   21d88:	000002ad 	.word	0x000002ad
   21d8c:	000446b0 	.word	0x000446b0
   21d90:	00044780 	.word	0x00044780

00021d94 <CDHCPClient::GetXID() const>:
   21d94:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   21d98:	e92d4010 	push	{r4, lr}
   21d9c:	e3500000 	cmp	r0, #0
   21da0:	0a00000b 	beq	21dd4 <CDHCPClient::GetXID() const+0x40>
   21da4:	ebffde7a 	bl	19794 <CNetSubSystem::GetNetDeviceLayer()>
   21da8:	ebffe7ac 	bl	1bc60 <CNetDeviceLayer::GetMACAddress() const>
   21dac:	eb00240b 	bl	2ade0 <CMACAddress::Get() const>
   21db0:	e2504000 	subs	r4, r0, #0
   21db4:	0a00000a 	beq	21de4 <CDHCPClient::GetXID() const+0x50>
   21db8:	eb002054 	bl	29f10 <CTimer::Get()>
   21dbc:	e2840002 	add	r0, r4, #2
   21dc0:	ebffff61 	bl	21b4c <CDHCPClient::GetUnaligned(void const*)>
   21dc4:	e1a04000 	mov	r4, r0
   21dc8:	eb001d93 	bl	2941c <CTimer::GetClockTicks()>
   21dcc:	e0840000 	add	r0, r4, r0
   21dd0:	e8bd8010 	pop	{r4, pc}
   21dd4:	e59f2018 	ldr	r2, [pc, #24]	; 21df4 <CDHCPClient::GetXID() const+0x60>
   21dd8:	e59f1018 	ldr	r1, [pc, #24]	; 21df8 <CDHCPClient::GetXID() const+0x64>
   21ddc:	e59f0018 	ldr	r0, [pc, #24]	; 21dfc <CDHCPClient::GetXID() const+0x68>
   21de0:	eb000a8a 	bl	24810 <assertion_failed>
   21de4:	e3a02fd6 	mov	r2, #856	; 0x358
   21de8:	e59f1008 	ldr	r1, [pc, #8]	; 21df8 <CDHCPClient::GetXID() const+0x64>
   21dec:	e59f000c 	ldr	r0, [pc, #12]	; 21e00 <CDHCPClient::GetXID() const+0x6c>
   21df0:	eb000a86 	bl	24810 <assertion_failed>
   21df4:	00000356 	.word	0x00000356
   21df8:	000446b0 	.word	0x000446b0
   21dfc:	00043a1c 	.word	0x00043a1c
   21e00:	00043db8 	.word	0x00043db8

00021e04 <CDHCPClient::SetUnaligned(void*, unsigned int)>:
   21e04:	e3500000 	cmp	r0, #0
   21e08:	0a000007 	beq	21e2c <CDHCPClient::SetUnaligned(void*, unsigned int)+0x28>
   21e0c:	e1a0c421 	lsr	ip, r1, #8
   21e10:	e1a02821 	lsr	r2, r1, #16
   21e14:	e1a03c21 	lsr	r3, r1, #24
   21e18:	e5c01000 	strb	r1, [r0]
   21e1c:	e5c0c001 	strb	ip, [r0, #1]
   21e20:	e5c02002 	strb	r2, [r0, #2]
   21e24:	e5c03003 	strb	r3, [r0, #3]
   21e28:	e12fff1e 	bx	lr
   21e2c:	e92d4010 	push	{r4, lr}
   21e30:	e59f2008 	ldr	r2, [pc, #8]	; 21e40 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x3c>
   21e34:	e59f1008 	ldr	r1, [pc, #8]	; 21e44 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x40>
   21e38:	e59f0008 	ldr	r0, [pc, #8]	; 21e48 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x44>
   21e3c:	eb000a73 	bl	24810 <assertion_failed>
   21e40:	0000036d 	.word	0x0000036d
   21e44:	000446b0 	.word	0x000446b0
   21e48:	00044774 	.word	0x00044774

00021e4c <CDHCPClient::~CDHCPClient()>:
   21e4c:	e3a02000 	mov	r2, #0
   21e50:	e92d4010 	push	{r4, lr}
   21e54:	e1a04000 	mov	r4, r0
   21e58:	e59f3024 	ldr	r3, [pc, #36]	; 21e84 <CDHCPClient::~CDHCPClient()+0x38>
   21e5c:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   21e60:	e5803000 	str	r3, [r0]
   21e64:	e28000f4 	add	r0, r0, #244	; 0xf4
   21e68:	eb0003f5 	bl	22e44 <CSocket::~CSocket()>
   21e6c:	e28400e4 	add	r0, r4, #228	; 0xe4
   21e70:	eb00170c 	bl	27aa8 <CString::~CString()>
   21e74:	e1a00004 	mov	r0, r4
   21e78:	eb0007c0 	bl	23d80 <CTask::~CTask()>
   21e7c:	e1a00004 	mov	r0, r4
   21e80:	e8bd8010 	pop	{r4, pc}
   21e84:	00044674 	.word	0x00044674

00021e88 <CDHCPClient::~CDHCPClient()>:
   21e88:	e92d4010 	push	{r4, lr}
   21e8c:	e1a04000 	mov	r4, r0
   21e90:	ebffffed 	bl	21e4c <CDHCPClient::~CDHCPClient()>
   21e94:	e1a00004 	mov	r0, r4
   21e98:	e3a01e1e 	mov	r1, #480	; 0x1e0
   21e9c:	eb002486 	bl	2b0bc <operator delete(void*, unsigned int)>
   21ea0:	e1a00004 	mov	r0, r4
   21ea4:	e8bd8010 	pop	{r4, pc}

00021ea8 <CDHCPClient::ReceiveMessage()>:
   21ea8:	e92d4070 	push	{r4, r5, r6, lr}
   21eac:	e24dde23 	sub	sp, sp, #560	; 0x230
   21eb0:	e1a04000 	mov	r4, r0
   21eb4:	e3a03040 	mov	r3, #64	; 0x40
   21eb8:	e28000f4 	add	r0, r0, #244	; 0xf4
   21ebc:	e3a02f89 	mov	r2, #548	; 0x224
   21ec0:	e28d100c 	add	r1, sp, #12
   21ec4:	eb00046a 	bl	23074 <CSocket::Receive(void*, unsigned int, int)>
   21ec8:	e35000ef 	cmp	r0, #239	; 0xef
   21ecc:	da000002 	ble	21edc <CDHCPClient::ReceiveMessage()+0x34>
   21ed0:	e5dd300c 	ldrb	r3, [sp, #12]
   21ed4:	e3530002 	cmp	r3, #2
   21ed8:	0a000003 	beq	21eec <CDHCPClient::ReceiveMessage()+0x44>
   21edc:	e3a04000 	mov	r4, #0
   21ee0:	e1a00004 	mov	r0, r4
   21ee4:	e28dde23 	add	sp, sp, #560	; 0x230
   21ee8:	e8bd8070 	pop	{r4, r5, r6, pc}
   21eec:	e5dd300d 	ldrb	r3, [sp, #13]
   21ef0:	e3530001 	cmp	r3, #1
   21ef4:	1afffff8 	bne	21edc <CDHCPClient::ReceiveMessage()+0x34>
   21ef8:	e5dd300e 	ldrb	r3, [sp, #14]
   21efc:	e3530006 	cmp	r3, #6
   21f00:	1afffff5 	bne	21edc <CDHCPClient::ReceiveMessage()+0x34>
   21f04:	e59d2010 	ldr	r2, [sp, #16]
   21f08:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
   21f0c:	e1520003 	cmp	r2, r3
   21f10:	1afffff1 	bne	21edc <CDHCPClient::ReceiveMessage()+0x34>
   21f14:	e59f3114 	ldr	r3, [pc, #276]	; 22030 <CDHCPClient::ReceiveMessage()+0x188>
   21f18:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   21f1c:	e1520003 	cmp	r2, r3
   21f20:	1affffed 	bne	21edc <CDHCPClient::ReceiveMessage()+0x34>
   21f24:	e1a05000 	mov	r5, r0
   21f28:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   21f2c:	e3500000 	cmp	r0, #0
   21f30:	0a000036 	beq	22010 <CDHCPClient::ReceiveMessage()+0x168>
   21f34:	ebffde16 	bl	19794 <CNetSubSystem::GetNetDeviceLayer()>
   21f38:	ebffe748 	bl	1bc60 <CNetDeviceLayer::GetMACAddress() const>
   21f3c:	e2506000 	subs	r6, r0, #0
   21f40:	0a000036 	beq	22020 <CDHCPClient::ReceiveMessage()+0x178>
   21f44:	e28d1028 	add	r1, sp, #40	; 0x28
   21f48:	e28d0004 	add	r0, sp, #4
   21f4c:	eb002395 	bl	2ada8 <CMACAddress::CMACAddress(unsigned char const*)>
   21f50:	e1a01006 	mov	r1, r6
   21f54:	e28d0004 	add	r0, sp, #4
   21f58:	eb00237d 	bl	2ad54 <CMACAddress::operator!=(CMACAddress const&) const>
   21f5c:	e3500000 	cmp	r0, #0
   21f60:	13a04000 	movne	r4, #0
   21f64:	0a000002 	beq	21f74 <CDHCPClient::ReceiveMessage()+0xcc>
   21f68:	e28d0004 	add	r0, sp, #4
   21f6c:	eb00235f 	bl	2acf0 <CMACAddress::~CMACAddress()>
   21f70:	eaffffda 	b	21ee0 <CDHCPClient::ReceiveMessage()+0x38>
   21f74:	e59d301c 	ldr	r3, [sp, #28]
   21f78:	e24520f0 	sub	r2, r5, #240	; 0xf0
   21f7c:	e58401c0 	str	r0, [r4, #448]	; 0x1c0
   21f80:	e58401c4 	str	r0, [r4, #452]	; 0x1c4
   21f84:	e58401c8 	str	r0, [r4, #456]	; 0x1c8
   21f88:	e58401cc 	str	r0, [r4, #460]	; 0x1cc
   21f8c:	e5c401d0 	strb	r0, [r4, #464]	; 0x1d0
   21f90:	e5c401d1 	strb	r0, [r4, #465]	; 0x1d1
   21f94:	e58401d4 	str	r0, [r4, #468]	; 0x1d4
   21f98:	e58401d8 	str	r0, [r4, #472]	; 0x1d8
   21f9c:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   21fa0:	e58431bc 	str	r3, [r4, #444]	; 0x1bc
   21fa4:	e28d10fc 	add	r1, sp, #252	; 0xfc
   21fa8:	e1a00004 	mov	r0, r4
   21fac:	ebfffef1 	bl	21b78 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21fb0:	e5d431d0 	ldrb	r3, [r4, #464]	; 0x1d0
   21fb4:	e3530002 	cmp	r3, #2
   21fb8:	0a00000e 	beq	21ff8 <CDHCPClient::ReceiveMessage()+0x150>
   21fbc:	e3530003 	cmp	r3, #3
   21fc0:	0a000008 	beq	21fe8 <CDHCPClient::ReceiveMessage()+0x140>
   21fc4:	e3530001 	cmp	r3, #1
   21fc8:	13a04001 	movne	r4, #1
   21fcc:	1affffe5 	bne	21f68 <CDHCPClient::ReceiveMessage()+0xc0>
   21fd0:	e1a00004 	mov	r0, r4
   21fd4:	e3a02080 	mov	r2, #128	; 0x80
   21fd8:	e28d1078 	add	r1, sp, #120	; 0x78
   21fdc:	e1a04003 	mov	r4, r3
   21fe0:	ebfffee4 	bl	21b78 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21fe4:	eaffffdf 	b	21f68 <CDHCPClient::ReceiveMessage()+0xc0>
   21fe8:	e3a02080 	mov	r2, #128	; 0x80
   21fec:	e28d1078 	add	r1, sp, #120	; 0x78
   21ff0:	e1a00004 	mov	r0, r4
   21ff4:	ebfffedf 	bl	21b78 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21ff8:	e1a00004 	mov	r0, r4
   21ffc:	e3a02040 	mov	r2, #64	; 0x40
   22000:	e28d1038 	add	r1, sp, #56	; 0x38
   22004:	ebfffedb 	bl	21b78 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   22008:	e3a04001 	mov	r4, #1
   2200c:	eaffffd5 	b	21f68 <CDHCPClient::ReceiveMessage()+0xc0>
   22010:	e59f201c 	ldr	r2, [pc, #28]	; 22034 <CDHCPClient::ReceiveMessage()+0x18c>
   22014:	e59f101c 	ldr	r1, [pc, #28]	; 22038 <CDHCPClient::ReceiveMessage()+0x190>
   22018:	e59f001c 	ldr	r0, [pc, #28]	; 2203c <CDHCPClient::ReceiveMessage()+0x194>
   2201c:	eb0009fb 	bl	24810 <assertion_failed>
   22020:	e59f2018 	ldr	r2, [pc, #24]	; 22040 <CDHCPClient::ReceiveMessage()+0x198>
   22024:	e59f100c 	ldr	r1, [pc, #12]	; 22038 <CDHCPClient::ReceiveMessage()+0x190>
   22028:	e59f0014 	ldr	r0, [pc, #20]	; 22044 <CDHCPClient::ReceiveMessage()+0x19c>
   2202c:	eb0009f7 	bl	24810 <assertion_failed>
   22030:	63538263 	.word	0x63538263
   22034:	0000027b 	.word	0x0000027b
   22038:	000446b0 	.word	0x000446b0
   2203c:	00043a1c 	.word	0x00043a1c
   22040:	0000027d 	.word	0x0000027d
   22044:	00043c34 	.word	0x00043c34

00022048 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>:
   22048:	e92d4070 	push	{r4, r5, r6, lr}
   2204c:	e1a04000 	mov	r4, r0
   22050:	e24ddf8a 	sub	sp, sp, #552	; 0x228
   22054:	e1a05001 	mov	r5, r1
   22058:	e1a06002 	mov	r6, r2
   2205c:	e3a01000 	mov	r1, #0
   22060:	e3a02f89 	mov	r2, #548	; 0x224
   22064:	e28d0004 	add	r0, sp, #4
   22068:	eb001fb5 	bl	29f44 <memset>
   2206c:	e5d431b0 	ldrb	r3, [r4, #432]	; 0x1b0
   22070:	e3a02001 	mov	r2, #1
   22074:	e3530000 	cmp	r3, #0
   22078:	13a03080 	movne	r3, #128	; 0x80
   2207c:	03a03000 	moveq	r3, #0
   22080:	e3a01006 	mov	r1, #6
   22084:	e1cd30be 	strh	r3, [sp, #14]
   22088:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
   2208c:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   22090:	e58d3008 	str	r3, [sp, #8]
   22094:	e59431b8 	ldr	r3, [r4, #440]	; 0x1b8
   22098:	e3500000 	cmp	r0, #0
   2209c:	e58d3010 	str	r3, [sp, #16]
   220a0:	e59f30b0 	ldr	r3, [pc, #176]	; 22158 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x110>
   220a4:	e5cd2004 	strb	r2, [sp, #4]
   220a8:	e5cd2005 	strb	r2, [sp, #5]
   220ac:	e5cd1006 	strb	r1, [sp, #6]
   220b0:	e58d30f0 	str	r3, [sp, #240]	; 0xf0
   220b4:	0a000017 	beq	22118 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xd0>
   220b8:	ebffddb5 	bl	19794 <CNetSubSystem::GetNetDeviceLayer()>
   220bc:	ebffe6e7 	bl	1bc60 <CNetDeviceLayer::GetMACAddress() const>
   220c0:	e3500000 	cmp	r0, #0
   220c4:	0a000017 	beq	22128 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xe0>
   220c8:	e28d1020 	add	r1, sp, #32
   220cc:	eb00234f 	bl	2ae10 <CMACAddress::CopyTo(unsigned char*) const>
   220d0:	e3550000 	cmp	r5, #0
   220d4:	0a000017 	beq	22138 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xf0>
   220d8:	e3560f4d 	cmp	r6, #308	; 0x134
   220dc:	8a000019 	bhi	22148 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x100>
   220e0:	e1a02006 	mov	r2, r6
   220e4:	e1a01005 	mov	r1, r5
   220e8:	e28d00f4 	add	r0, sp, #244	; 0xf4
   220ec:	eb00220b 	bl	2a920 <memcpy>
   220f0:	e28d1004 	add	r1, sp, #4
   220f4:	e28400f4 	add	r0, r4, #244	; 0xf4
   220f8:	e3a03000 	mov	r3, #0
   220fc:	e3a02f89 	mov	r2, #548	; 0x224
   22100:	eb0003be 	bl	23000 <CSocket::Send(void const*, unsigned int, int)>
   22104:	e2400f89 	sub	r0, r0, #548	; 0x224
   22108:	e16f0f10 	clz	r0, r0
   2210c:	e1a002a0 	lsr	r0, r0, #5
   22110:	e28ddf8a 	add	sp, sp, #552	; 0x228
   22114:	e8bd8070 	pop	{r4, r5, r6, pc}
   22118:	e3a02f96 	mov	r2, #600	; 0x258
   2211c:	e59f1038 	ldr	r1, [pc, #56]	; 2215c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   22120:	e59f0038 	ldr	r0, [pc, #56]	; 22160 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x118>
   22124:	eb0009b9 	bl	24810 <assertion_failed>
   22128:	e59f2034 	ldr	r2, [pc, #52]	; 22164 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x11c>
   2212c:	e59f1028 	ldr	r1, [pc, #40]	; 2215c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   22130:	e59f0030 	ldr	r0, [pc, #48]	; 22168 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x120>
   22134:	eb0009b5 	bl	24810 <assertion_failed>
   22138:	e59f202c 	ldr	r2, [pc, #44]	; 2216c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x124>
   2213c:	e59f1018 	ldr	r1, [pc, #24]	; 2215c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   22140:	e59f0028 	ldr	r0, [pc, #40]	; 22170 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x128>
   22144:	eb0009b1 	bl	24810 <assertion_failed>
   22148:	e59f2024 	ldr	r2, [pc, #36]	; 22174 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x12c>
   2214c:	e59f1008 	ldr	r1, [pc, #8]	; 2215c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   22150:	e59f0020 	ldr	r0, [pc, #32]	; 22178 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x130>
   22154:	eb0009ad 	bl	24810 <assertion_failed>
   22158:	63538263 	.word	0x63538263
   2215c:	000446b0 	.word	0x000446b0
   22160:	00043a1c 	.word	0x00043a1c
   22164:	0000025a 	.word	0x0000025a
   22168:	00043db8 	.word	0x00043db8
   2216c:	0000025d 	.word	0x0000025d
   22170:	00044780 	.word	0x00044780
   22174:	0000025e 	.word	0x0000025e
   22178:	00044790 	.word	0x00044790

0002217c <CDHCPClient::SendDiscover()>:
   2217c:	e3a01000 	mov	r1, #0
   22180:	e3a0200c 	mov	r2, #12
   22184:	e58011b8 	str	r1, [r0, #440]	; 0x1b8
   22188:	e59f1000 	ldr	r1, [pc]	; 22190 <CDHCPClient::SendDiscover()+0x14>
   2218c:	eaffffad 	b	22048 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   22190:	00044688 	.word	0x00044688

00022194 <CDHCPClient::SendRequest(unsigned int)>:
   22194:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22198:	e3510000 	cmp	r1, #0
   2219c:	e28db01c 	add	fp, sp, #28
   221a0:	e1a06000 	mov	r6, r0
   221a4:	e58011b8 	str	r1, [r0, #440]	; 0x1b8
   221a8:	1a000036 	bne	22288 <CDHCPClient::SendRequest(unsigned int)+0xf4>
   221ac:	e59021a0 	ldr	r2, [r0, #416]	; 0x1a0
   221b0:	e59f1104 	ldr	r1, [pc, #260]	; 222bc <CDHCPClient::SendRequest(unsigned int)+0x128>
   221b4:	e1a05822 	lsr	r5, r2, #16
   221b8:	e1a04c22 	lsr	r4, r2, #24
   221bc:	e5c15007 	strb	r5, [r1, #7]
   221c0:	e5c14008 	strb	r4, [r1, #8]
   221c4:	e3a05018 	mov	r5, #24
   221c8:	e1a04001 	mov	r4, r1
   221cc:	e590319c 	ldr	r3, [r0, #412]	; 0x19c
   221d0:	e1a00422 	lsr	r0, r2, #8
   221d4:	e1a0e423 	lsr	lr, r3, #8
   221d8:	e1a0c823 	lsr	ip, r3, #16
   221dc:	e5c10006 	strb	r0, [r1, #6]
   221e0:	e1a00c23 	lsr	r0, r3, #24
   221e4:	e5c12005 	strb	r2, [r1, #5]
   221e8:	e5c1300b 	strb	r3, [r1, #11]
   221ec:	e5c1e00c 	strb	lr, [r1, #12]
   221f0:	e5c1c00d 	strb	ip, [r1, #13]
   221f4:	e5c1000e 	strb	r0, [r1, #14]
   221f8:	e28680e4 	add	r8, r6, #228	; 0xe4
   221fc:	e1a00008 	mov	r0, r8
   22200:	eb00169f 	bl	27c84 <CString::GetLength() const>
   22204:	e2507000 	subs	r7, r0, #0
   22208:	0a000021 	beq	22294 <CDHCPClient::SendRequest(unsigned int)+0x100>
   2220c:	e35700ff 	cmp	r7, #255	; 0xff
   22210:	8a000025 	bhi	222ac <CDHCPClient::SendRequest(unsigned int)+0x118>
   22214:	e085c007 	add	ip, r5, r7
   22218:	e28c3009 	add	r3, ip, #9
   2221c:	e3c33007 	bic	r3, r3, #7
   22220:	e04dd003 	sub	sp, sp, r3
   22224:	e1a01004 	mov	r1, r4
   22228:	e1a02005 	mov	r2, r5
   2222c:	e1a0000d 	mov	r0, sp
   22230:	e28c9002 	add	r9, ip, #2
   22234:	eb0021b9 	bl	2a920 <memcpy>
   22238:	e3a0200c 	mov	r2, #12
   2223c:	e2455001 	sub	r5, r5, #1
   22240:	e08d3005 	add	r3, sp, r5
   22244:	e7cd2005 	strb	r2, [sp, r5]
   22248:	e1a00008 	mov	r0, r8
   2224c:	e5c37001 	strb	r7, [r3, #1]
   22250:	e2834002 	add	r4, r3, #2
   22254:	eb00165c 	bl	27bcc <CString::operator char const*() const>
   22258:	e1a02007 	mov	r2, r7
   2225c:	e1a01000 	mov	r1, r0
   22260:	e1a00004 	mov	r0, r4
   22264:	eb0021ad 	bl	2a920 <memcpy>
   22268:	e3e03000 	mvn	r3, #0
   2226c:	e1a02009 	mov	r2, r9
   22270:	e1a00006 	mov	r0, r6
   22274:	e1a0100d 	mov	r1, sp
   22278:	e7c43007 	strb	r3, [r4, r7]
   2227c:	ebffff71 	bl	22048 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   22280:	e24bd01c 	sub	sp, fp, #28
   22284:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22288:	e3a0500c 	mov	r5, #12
   2228c:	e59f402c 	ldr	r4, [pc, #44]	; 222c0 <CDHCPClient::SendRequest(unsigned int)+0x12c>
   22290:	eaffffd8 	b	221f8 <CDHCPClient::SendRequest(unsigned int)+0x64>
   22294:	e1a02005 	mov	r2, r5
   22298:	e1a01004 	mov	r1, r4
   2229c:	e1a00006 	mov	r0, r6
   222a0:	ebffff68 	bl	22048 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   222a4:	e24bd01c 	sub	sp, fp, #28
   222a8:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   222ac:	e59f2010 	ldr	r2, [pc, #16]	; 222c4 <CDHCPClient::SendRequest(unsigned int)+0x130>
   222b0:	e59f1010 	ldr	r1, [pc, #16]	; 222c8 <CDHCPClient::SendRequest(unsigned int)+0x134>
   222b4:	e59f0010 	ldr	r0, [pc, #16]	; 222cc <CDHCPClient::SendRequest(unsigned int)+0x138>
   222b8:	eb000954 	bl	24810 <assertion_failed>
   222bc:	000480a8 	.word	0x000480a8
   222c0:	00044694 	.word	0x00044694
   222c4:	00000231 	.word	0x00000231
   222c8:	000446b0 	.word	0x000446b0
   222cc:	000447b8 	.word	0x000447b8

000222d0 <CDHCPClient::SendAndReceive(bool, unsigned int)>:
   222d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222d4:	e1a04000 	mov	r4, r0
   222d8:	e1a07001 	mov	r7, r1
   222dc:	e3a0b002 	mov	fp, #2
   222e0:	e24dd014 	sub	sp, sp, #20
   222e4:	e59f8160 	ldr	r8, [pc, #352]	; 2244c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x17c>
   222e8:	e59fa160 	ldr	sl, [pc, #352]	; 22450 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x180>
   222ec:	e58d200c 	str	r2, [sp, #12]
   222f0:	e3570000 	cmp	r7, #0
   222f4:	0a00003f 	beq	223f8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x128>
   222f8:	e59d100c 	ldr	r1, [sp, #12]
   222fc:	e1a00004 	mov	r0, r4
   22300:	ebffffa3 	bl	22194 <CDHCPClient::SendRequest(unsigned int)>
   22304:	e2200001 	eor	r0, r0, #1
   22308:	e6ef0070 	uxtb	r0, r0
   2230c:	e3500000 	cmp	r0, #0
   22310:	1a000040 	bne	22418 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x148>
   22314:	eb001efd 	bl	29f10 <CTimer::Get()>
   22318:	eb001c46 	bl	29438 <CTimer::GetTicks() const>
   2231c:	e4985004 	ldr	r5, [r8], #4
   22320:	e1a06000 	mov	r6, r0
   22324:	ea000004 	b	2233c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x6c>
   22328:	e2433005 	sub	r3, r3, #5
   2232c:	e3530001 	cmp	r3, #1
   22330:	9a000016 	bls	22390 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc0>
   22334:	eb000887 	bl	24558 <CScheduler::Get()>
   22338:	eb0007f3 	bl	2430c <CScheduler::Yield()>
   2233c:	eb001ef3 	bl	29f10 <CTimer::Get()>
   22340:	eb001c3c 	bl	29438 <CTimer::GetTicks() const>
   22344:	e0400006 	sub	r0, r0, r6
   22348:	e1550000 	cmp	r5, r0
   2234c:	9a000012 	bls	2239c <CDHCPClient::SendAndReceive(bool, unsigned int)+0xcc>
   22350:	e1a00004 	mov	r0, r4
   22354:	ebfffed3 	bl	21ea8 <CDHCPClient::ReceiveMessage()>
   22358:	e2509000 	subs	r9, r0, #0
   2235c:	0afffff4 	beq	22334 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22360:	e3570000 	cmp	r7, #0
   22364:	e5d431d1 	ldrb	r3, [r4, #465]	; 0x1d1
   22368:	1affffee 	bne	22328 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x58>
   2236c:	e3530002 	cmp	r3, #2
   22370:	1affffef 	bne	22334 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22374:	e1a00004 	mov	r0, r4
   22378:	ebfffd90 	bl	219c0 <CDHCPClient::CheckConfig()>
   2237c:	e3500000 	cmp	r0, #0
   22380:	0affffeb 	beq	22334 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22384:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   22388:	e3530000 	cmp	r3, #0
   2238c:	0affffe8 	beq	22334 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22390:	e1a00009 	mov	r0, r9
   22394:	e28dd014 	add	sp, sp, #20
   22398:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2239c:	eb00120e 	bl	26bdc <CLogger::Get()>
   223a0:	e1a0300a 	mov	r3, sl
   223a4:	e1a0200b 	mov	r2, fp
   223a8:	e59f10a4 	ldr	r1, [pc, #164]	; 22454 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   223ac:	eb001147 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   223b0:	e59f30a0 	ldr	r3, [pc, #160]	; 22458 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x188>
   223b4:	e1530008 	cmp	r3, r8
   223b8:	1affffcc 	bne	222f0 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x20>
   223bc:	eb001206 	bl	26bdc <CLogger::Get()>
   223c0:	e59f2094 	ldr	r2, [pc, #148]	; 2245c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x18c>
   223c4:	e59f1094 	ldr	r1, [pc, #148]	; 22460 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x190>
   223c8:	e3570000 	cmp	r7, #0
   223cc:	01a07002 	moveq	r7, r2
   223d0:	11a07001 	movne	r7, r1
   223d4:	e3a09000 	mov	r9, #0
   223d8:	e59f3084 	ldr	r3, [pc, #132]	; 22464 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x194>
   223dc:	e3a02002 	mov	r2, #2
   223e0:	e58d7000 	str	r7, [sp]
   223e4:	e59f1068 	ldr	r1, [pc, #104]	; 22454 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   223e8:	eb001138 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   223ec:	e1a00009 	mov	r0, r9
   223f0:	e28dd014 	add	sp, sp, #20
   223f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223f8:	e58471b8 	str	r7, [r4, #440]	; 0x1b8
   223fc:	e3a0200c 	mov	r2, #12
   22400:	e59f1060 	ldr	r1, [pc, #96]	; 22468 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x198>
   22404:	e1a00004 	mov	r0, r4
   22408:	ebffff0e 	bl	22048 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   2240c:	e2200001 	eor	r0, r0, #1
   22410:	e6ef0070 	uxtb	r0, r0
   22414:	eaffffbc 	b	2230c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x3c>
   22418:	eb0011ef 	bl	26bdc <CLogger::Get()>
   2241c:	e59f2048 	ldr	r2, [pc, #72]	; 2246c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x19c>
   22420:	e59f1048 	ldr	r1, [pc, #72]	; 22470 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a0>
   22424:	e3570000 	cmp	r7, #0
   22428:	01a07002 	moveq	r7, r2
   2242c:	11a07001 	movne	r7, r1
   22430:	e59f303c 	ldr	r3, [pc, #60]	; 22474 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a4>
   22434:	e3a02001 	mov	r2, #1
   22438:	e58d7000 	str	r7, [sp]
   2243c:	e59f1010 	ldr	r1, [pc, #16]	; 22454 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   22440:	eb001122 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22444:	e3a09000 	mov	r9, #0
   22448:	eaffffd0 	b	22390 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc0>
   2244c:	000446a0 	.word	0x000446a0
   22450:	00044804 	.word	0x00044804
   22454:	00044680 	.word	0x00044680
   22458:	000446b0 	.word	0x000446b0
   2245c:	000447ec 	.word	0x000447ec
   22460:	000447e0 	.word	0x000447e0
   22464:	00044828 	.word	0x00044828
   22468:	00044688 	.word	0x00044688
   2246c:	000447d4 	.word	0x000447d4
   22470:	000447cc 	.word	0x000447cc
   22474:	000447f4 	.word	0x000447f4

00022478 <CDHCPClient::SelectAndRequest()>:
   22478:	e92d4070 	push	{r4, r5, r6, lr}
   2247c:	e3a05001 	mov	r5, #1
   22480:	e1a04000 	mov	r4, r0
   22484:	e24dd028 	sub	sp, sp, #40	; 0x28
   22488:	e5c051b0 	strb	r5, [r0, #432]	; 0x1b0
   2248c:	e28d0008 	add	r0, sp, #8
   22490:	ebfffa41 	bl	20d9c <CIPAddress::CIPAddress()>
   22494:	e28460f4 	add	r6, r4, #244	; 0xf4
   22498:	e28d0008 	add	r0, sp, #8
   2249c:	ebfffae9 	bl	21048 <CIPAddress::SetBroadcast()>
   224a0:	e1a00006 	mov	r0, r6
   224a4:	e28d1008 	add	r1, sp, #8
   224a8:	e3a02043 	mov	r2, #67	; 0x43
   224ac:	eb0001f1 	bl	22c78 <CSocket::Connect(CIPAddress&, unsigned short)>
   224b0:	e3500000 	cmp	r0, #0
   224b4:	ba00001a 	blt	22524 <CDHCPClient::SelectAndRequest()+0xac>
   224b8:	e1a00006 	mov	r0, r6
   224bc:	e1a01005 	mov	r1, r5
   224c0:	eb000347 	bl	231e4 <CSocket::SetOptionBroadcast(bool)>
   224c4:	e2506000 	subs	r6, r0, #0
   224c8:	1a00000e 	bne	22508 <CDHCPClient::SelectAndRequest()+0x90>
   224cc:	e1a00004 	mov	r0, r4
   224d0:	ebfffe2f 	bl	21d94 <CDHCPClient::GetXID() const>
   224d4:	e1a02006 	mov	r2, r6
   224d8:	e58401b4 	str	r0, [r4, #436]	; 0x1b4
   224dc:	e1a01006 	mov	r1, r6
   224e0:	e1a00004 	mov	r0, r4
   224e4:	ebffff79 	bl	222d0 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   224e8:	e3500000 	cmp	r0, #0
   224ec:	1a000015 	bne	22548 <CDHCPClient::SelectAndRequest()+0xd0>
   224f0:	e3a04002 	mov	r4, #2
   224f4:	e28d0008 	add	r0, sp, #8
   224f8:	ebfffa3d 	bl	20df4 <CIPAddress::~CIPAddress()>
   224fc:	e1a00004 	mov	r0, r4
   22500:	e28dd028 	add	sp, sp, #40	; 0x28
   22504:	e8bd8070 	pop	{r4, r5, r6, pc}
   22508:	eb0011b3 	bl	26bdc <CLogger::Get()>
   2250c:	e59f31f0 	ldr	r3, [pc, #496]	; 22704 <CDHCPClient::SelectAndRequest()+0x28c>
   22510:	e1a02005 	mov	r2, r5
   22514:	e59f11ec 	ldr	r1, [pc, #492]	; 22708 <CDHCPClient::SelectAndRequest()+0x290>
   22518:	e1a04005 	mov	r4, r5
   2251c:	eb0010eb 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22520:	eafffff3 	b	224f4 <CDHCPClient::SelectAndRequest()+0x7c>
   22524:	eb0011ac 	bl	26bdc <CLogger::Get()>
   22528:	e3a02043 	mov	r2, #67	; 0x43
   2252c:	e59f31d8 	ldr	r3, [pc, #472]	; 2270c <CDHCPClient::SelectAndRequest()+0x294>
   22530:	e58d2000 	str	r2, [sp]
   22534:	e59f11cc 	ldr	r1, [pc, #460]	; 22708 <CDHCPClient::SelectAndRequest()+0x290>
   22538:	e1a02005 	mov	r2, r5
   2253c:	e1a04005 	mov	r4, r5
   22540:	eb0010e2 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22544:	eaffffea 	b	224f4 <CDHCPClient::SelectAndRequest()+0x7c>
   22548:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   2254c:	e3530000 	cmp	r3, #0
   22550:	e584319c 	str	r3, [r4, #412]	; 0x19c
   22554:	0a000023 	beq	225e8 <CDHCPClient::SelectAndRequest()+0x170>
   22558:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   2255c:	e3530000 	cmp	r3, #0
   22560:	e58431a0 	str	r3, [r4, #416]	; 0x1a0
   22564:	0a000023 	beq	225f8 <CDHCPClient::SelectAndRequest()+0x180>
   22568:	e1a02006 	mov	r2, r6
   2256c:	e1a01005 	mov	r1, r5
   22570:	e1a00004 	mov	r0, r4
   22574:	ebffff55 	bl	222d0 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   22578:	e3500000 	cmp	r0, #0
   2257c:	0affffdb 	beq	224f0 <CDHCPClient::SelectAndRequest()+0x78>
   22580:	e5d431d1 	ldrb	r3, [r4, #465]	; 0x1d1
   22584:	e3530006 	cmp	r3, #6
   22588:	0a00000f 	beq	225cc <CDHCPClient::SelectAndRequest()+0x154>
   2258c:	e1a00004 	mov	r0, r4
   22590:	ebfffd0a 	bl	219c0 <CDHCPClient::CheckConfig()>
   22594:	e3500000 	cmp	r0, #0
   22598:	03a04004 	moveq	r4, #4
   2259c:	0affffd4 	beq	224f4 <CDHCPClient::SelectAndRequest()+0x7c>
   225a0:	e594219c 	ldr	r2, [r4, #412]	; 0x19c
   225a4:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   225a8:	e1520003 	cmp	r2, r3
   225ac:	0a000015 	beq	22608 <CDHCPClient::SelectAndRequest()+0x190>
   225b0:	eb001189 	bl	26bdc <CLogger::Get()>
   225b4:	e59f3154 	ldr	r3, [pc, #340]	; 22710 <CDHCPClient::SelectAndRequest()+0x298>
   225b8:	e3a02002 	mov	r2, #2
   225bc:	e59f1144 	ldr	r1, [pc, #324]	; 22708 <CDHCPClient::SelectAndRequest()+0x290>
   225c0:	eb0010c2 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   225c4:	e3a04005 	mov	r4, #5
   225c8:	eaffffc9 	b	224f4 <CDHCPClient::SelectAndRequest()+0x7c>
   225cc:	eb001182 	bl	26bdc <CLogger::Get()>
   225d0:	e59f313c 	ldr	r3, [pc, #316]	; 22714 <CDHCPClient::SelectAndRequest()+0x29c>
   225d4:	e3a02002 	mov	r2, #2
   225d8:	e59f1128 	ldr	r1, [pc, #296]	; 22708 <CDHCPClient::SelectAndRequest()+0x290>
   225dc:	eb0010bb 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   225e0:	e3a04003 	mov	r4, #3
   225e4:	eaffffc2 	b	224f4 <CDHCPClient::SelectAndRequest()+0x7c>
   225e8:	e3a020f9 	mov	r2, #249	; 0xf9
   225ec:	e59f1124 	ldr	r1, [pc, #292]	; 22718 <CDHCPClient::SelectAndRequest()+0x2a0>
   225f0:	e59f0124 	ldr	r0, [pc, #292]	; 2271c <CDHCPClient::SelectAndRequest()+0x2a4>
   225f4:	eb000885 	bl	24810 <assertion_failed>
   225f8:	e3a020fc 	mov	r2, #252	; 0xfc
   225fc:	e59f1114 	ldr	r1, [pc, #276]	; 22718 <CDHCPClient::SelectAndRequest()+0x2a0>
   22600:	e59f0118 	ldr	r0, [pc, #280]	; 22720 <CDHCPClient::SelectAndRequest()+0x2a8>
   22604:	eb000881 	bl	24810 <assertion_failed>
   22608:	e59421a0 	ldr	r2, [r4, #416]	; 0x1a0
   2260c:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   22610:	e1520003 	cmp	r2, r3
   22614:	0a000006 	beq	22634 <CDHCPClient::SelectAndRequest()+0x1bc>
   22618:	eb00116f 	bl	26bdc <CLogger::Get()>
   2261c:	e59f3100 	ldr	r3, [pc, #256]	; 22724 <CDHCPClient::SelectAndRequest()+0x2ac>
   22620:	e3a02002 	mov	r2, #2
   22624:	e59f10dc 	ldr	r1, [pc, #220]	; 22708 <CDHCPClient::SelectAndRequest()+0x290>
   22628:	eb0010a8 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2262c:	e3a04005 	mov	r4, #5
   22630:	eaffffaf 	b	224f4 <CDHCPClient::SelectAndRequest()+0x7c>
   22634:	e28d0010 	add	r0, sp, #16
   22638:	ebfff9d7 	bl	20d9c <CIPAddress::CIPAddress()>
   2263c:	e594119c 	ldr	r1, [r4, #412]	; 0x19c
   22640:	e28d0010 	add	r0, sp, #16
   22644:	ebfffa57 	bl	20fa8 <CIPAddress::Set(unsigned int)>
   22648:	e28d0018 	add	r0, sp, #24
   2264c:	eb001548 	bl	27b74 <CString::CString()>
   22650:	e28d1018 	add	r1, sp, #24
   22654:	e28d0010 	add	r0, sp, #16
   22658:	ebfffacd 	bl	21194 <CIPAddress::Format(CString*) const>
   2265c:	eb00115e 	bl	26bdc <CLogger::Get()>
   22660:	e1a05000 	mov	r5, r0
   22664:	e28d0018 	add	r0, sp, #24
   22668:	eb001557 	bl	27bcc <CString::operator char const*() const>
   2266c:	e59f30b4 	ldr	r3, [pc, #180]	; 22728 <CDHCPClient::SelectAndRequest()+0x2b0>
   22670:	e58d0000 	str	r0, [sp]
   22674:	e3a02003 	mov	r2, #3
   22678:	e1a00005 	mov	r0, r5
   2267c:	e59f1084 	ldr	r1, [pc, #132]	; 22708 <CDHCPClient::SelectAndRequest()+0x290>
   22680:	eb001092 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22684:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22688:	e3500000 	cmp	r0, #0
   2268c:	0a000018 	beq	226f4 <CDHCPClient::SelectAndRequest()+0x27c>
   22690:	e594119c 	ldr	r1, [r4, #412]	; 0x19c
   22694:	ebfff9a4 	bl	20d2c <CNetConfig::SetIPAddress(unsigned int)>
   22698:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   2269c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   226a0:	ebfff9a8 	bl	20d48 <CNetConfig::SetNetMask(unsigned int)>
   226a4:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   226a8:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   226ac:	ebfff956 	bl	20c0c <CNetConfig::SetDefaultGateway(unsigned int)>
   226b0:	e59411c8 	ldr	r1, [r4, #456]	; 0x1c8
   226b4:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   226b8:	ebfff955 	bl	20c14 <CNetConfig::SetDNSServer(unsigned int)>
   226bc:	e3a0c001 	mov	ip, #1
   226c0:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   226c4:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   226c8:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   226cc:	e5c4c194 	strb	ip, [r4, #404]	; 0x194
   226d0:	e58411a4 	str	r1, [r4, #420]	; 0x1a4
   226d4:	e58421a8 	str	r2, [r4, #424]	; 0x1a8
   226d8:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
   226dc:	e28d0018 	add	r0, sp, #24
   226e0:	eb0014f0 	bl	27aa8 <CString::~CString()>
   226e4:	e28d0010 	add	r0, sp, #16
   226e8:	ebfff9c1 	bl	20df4 <CIPAddress::~CIPAddress()>
   226ec:	e3a04000 	mov	r4, #0
   226f0:	eaffff7f 	b	224f4 <CDHCPClient::SelectAndRequest()+0x7c>
   226f4:	e59f2030 	ldr	r2, [pc, #48]	; 2272c <CDHCPClient::SelectAndRequest()+0x2b4>
   226f8:	e59f1018 	ldr	r1, [pc, #24]	; 22718 <CDHCPClient::SelectAndRequest()+0x2a0>
   226fc:	e59f002c 	ldr	r0, [pc, #44]	; 22730 <CDHCPClient::SelectAndRequest()+0x2b8>
   22700:	eb000842 	bl	24810 <assertion_failed>
   22704:	00044860 	.word	0x00044860
   22708:	00044680 	.word	0x00044680
   2270c:	0004483c 	.word	0x0004483c
   22710:	000448cc 	.word	0x000448cc
   22714:	000448b0 	.word	0x000448b0
   22718:	000446b0 	.word	0x000446b0
   2271c:	0004487c 	.word	0x0004487c
   22720:	00044894 	.word	0x00044894
   22724:	000448e4 	.word	0x000448e4
   22728:	00044904 	.word	0x00044904
   2272c:	00000126 	.word	0x00000126
   22730:	00043a48 	.word	0x00043a48

00022734 <CDHCPClient::RenewOrRebind(bool, unsigned int)>:
   22734:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   22738:	e1a05000 	mov	r5, r0
   2273c:	e24dd014 	sub	sp, sp, #20
   22740:	e1a04001 	mov	r4, r1
   22744:	e1a06002 	mov	r6, r2
   22748:	eb001df0 	bl	29f10 <CTimer::Get()>
   2274c:	eb001b3b 	bl	29440 <CTimer::GetUptime() const>
   22750:	e5953198 	ldr	r3, [r5, #408]	; 0x198
   22754:	e0400003 	sub	r0, r0, r3
   22758:	e1500006 	cmp	r0, r6
   2275c:	23a04002 	movcs	r4, #2
   22760:	3a000002 	bcc	22770 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x3c>
   22764:	e1a00004 	mov	r0, r4
   22768:	e28dd014 	add	sp, sp, #20
   2276c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   22770:	eb001119 	bl	26bdc <CLogger::Get()>
   22774:	e3540000 	cmp	r4, #0
   22778:	0a00003d 	beq	22874 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x140>
   2277c:	e59f92b8 	ldr	r9, [pc, #696]	; 22a3c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x308>
   22780:	e59f32b8 	ldr	r3, [pc, #696]	; 22a40 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x30c>
   22784:	e59f12b8 	ldr	r1, [pc, #696]	; 22a44 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   22788:	e3a02004 	mov	r2, #4
   2278c:	e28d8008 	add	r8, sp, #8
   22790:	e58d9000 	str	r9, [sp]
   22794:	eb00104d 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22798:	e1a00008 	mov	r0, r8
   2279c:	ebfff97e 	bl	20d9c <CIPAddress::CIPAddress()>
   227a0:	e3a03000 	mov	r3, #0
   227a4:	e1a00008 	mov	r0, r8
   227a8:	e5c531b0 	strb	r3, [r5, #432]	; 0x1b0
   227ac:	e59511a0 	ldr	r1, [r5, #416]	; 0x1a0
   227b0:	ebfff9fc 	bl	20fa8 <CIPAddress::Set(unsigned int)>
   227b4:	e28540f4 	add	r4, r5, #244	; 0xf4
   227b8:	e1a00004 	mov	r0, r4
   227bc:	e3a02043 	mov	r2, #67	; 0x43
   227c0:	e1a01008 	mov	r1, r8
   227c4:	eb00012b 	bl	22c78 <CSocket::Connect(CIPAddress&, unsigned short)>
   227c8:	e3500000 	cmp	r0, #0
   227cc:	ba000036 	blt	228ac <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x178>
   227d0:	e1a00004 	mov	r0, r4
   227d4:	e5d511b0 	ldrb	r1, [r5, #432]	; 0x1b0
   227d8:	eb000281 	bl	231e4 <CSocket::SetOptionBroadcast(bool)>
   227dc:	e3500000 	cmp	r0, #0
   227e0:	03a07001 	moveq	r7, #1
   227e4:	0a000016 	beq	22844 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x110>
   227e8:	ea00003e 	b	228e8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x1b4>
   227ec:	e1a00005 	mov	r0, r5
   227f0:	ebfffd67 	bl	21d94 <CDHCPClient::GetXID() const>
   227f4:	e595219c 	ldr	r2, [r5, #412]	; 0x19c
   227f8:	e58501b4 	str	r0, [r5, #436]	; 0x1b4
   227fc:	e1a01007 	mov	r1, r7
   22800:	e1a00005 	mov	r0, r5
   22804:	ebfffeb1 	bl	222d0 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   22808:	e3500000 	cmp	r0, #0
   2280c:	1a00003c 	bne	22904 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x1d0>
   22810:	eb001dbe 	bl	29f10 <CTimer::Get()>
   22814:	eb001b09 	bl	29440 <CTimer::GetUptime() const>
   22818:	e5951198 	ldr	r1, [r5, #408]	; 0x198
   2281c:	e0400001 	sub	r0, r0, r1
   22820:	e1560000 	cmp	r6, r0
   22824:	9a00000c 	bls	2285c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x128>
   22828:	e0460000 	sub	r0, r6, r0
   2282c:	e1a040a0 	lsr	r4, r0, #1
   22830:	eb000748 	bl	24558 <CScheduler::Get()>
   22834:	e354003c 	cmp	r4, #60	; 0x3c
   22838:	21a01004 	movcs	r1, r4
   2283c:	33a0103c 	movcc	r1, #60	; 0x3c
   22840:	eb00070a 	bl	24470 <CScheduler::Sleep(unsigned int)>
   22844:	eb001db1 	bl	29f10 <CTimer::Get()>
   22848:	eb001afc 	bl	29440 <CTimer::GetUptime() const>
   2284c:	e5953198 	ldr	r3, [r5, #408]	; 0x198
   22850:	e0400003 	sub	r0, r0, r3
   22854:	e1560000 	cmp	r6, r0
   22858:	8affffe3 	bhi	227ec <CDHCPClient::RenewOrRebind(bool, unsigned int)+0xb8>
   2285c:	e3a04002 	mov	r4, #2
   22860:	e1a00008 	mov	r0, r8
   22864:	ebfff962 	bl	20df4 <CIPAddress::~CIPAddress()>
   22868:	e1a00004 	mov	r0, r4
   2286c:	e28dd014 	add	sp, sp, #20
   22870:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   22874:	e59f91cc 	ldr	r9, [pc, #460]	; 22a48 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   22878:	e59f31c0 	ldr	r3, [pc, #448]	; 22a40 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x30c>
   2287c:	e3a02004 	mov	r2, #4
   22880:	e59f11bc 	ldr	r1, [pc, #444]	; 22a44 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   22884:	e28d8008 	add	r8, sp, #8
   22888:	e58d9000 	str	r9, [sp]
   2288c:	eb00100f 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22890:	e1a00008 	mov	r0, r8
   22894:	ebfff940 	bl	20d9c <CIPAddress::CIPAddress()>
   22898:	e3a03001 	mov	r3, #1
   2289c:	e1a00008 	mov	r0, r8
   228a0:	e5c531b0 	strb	r3, [r5, #432]	; 0x1b0
   228a4:	ebfff9e7 	bl	21048 <CIPAddress::SetBroadcast()>
   228a8:	eaffffc1 	b	227b4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x80>
   228ac:	eb0010ca 	bl	26bdc <CLogger::Get()>
   228b0:	e5d5c1b0 	ldrb	ip, [r5, #432]	; 0x1b0
   228b4:	e59f1190 	ldr	r1, [pc, #400]	; 22a4c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x318>
   228b8:	e35c0000 	cmp	ip, #0
   228bc:	e59f318c 	ldr	r3, [pc, #396]	; 22a50 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x31c>
   228c0:	e3a02043 	mov	r2, #67	; 0x43
   228c4:	01a03001 	moveq	r3, r1
   228c8:	e58d2004 	str	r2, [sp, #4]
   228cc:	e58d3000 	str	r3, [sp]
   228d0:	e3a02001 	mov	r2, #1
   228d4:	e59f3178 	ldr	r3, [pc, #376]	; 22a54 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x320>
   228d8:	e59f1164 	ldr	r1, [pc, #356]	; 22a44 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   228dc:	eb000ffb 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   228e0:	e3a04001 	mov	r4, #1
   228e4:	eaffffdd 	b	22860 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   228e8:	eb0010bb 	bl	26bdc <CLogger::Get()>
   228ec:	e59f3164 	ldr	r3, [pc, #356]	; 22a58 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x324>
   228f0:	e3a02001 	mov	r2, #1
   228f4:	e59f1148 	ldr	r1, [pc, #328]	; 22a44 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   228f8:	eb000ff4 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   228fc:	e3a04001 	mov	r4, #1
   22900:	eaffffd6 	b	22860 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   22904:	e5d531d1 	ldrb	r3, [r5, #465]	; 0x1d1
   22908:	e3530006 	cmp	r3, #6
   2290c:	0a00001f 	beq	22990 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x25c>
   22910:	e1a00005 	mov	r0, r5
   22914:	ebfffc29 	bl	219c0 <CDHCPClient::CheckConfig()>
   22918:	e3500000 	cmp	r0, #0
   2291c:	0a000019 	beq	22988 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x254>
   22920:	e59531d4 	ldr	r3, [r5, #468]	; 0x1d4
   22924:	e3530000 	cmp	r3, #0
   22928:	e58531a0 	str	r3, [r5, #416]	; 0x1a0
   2292c:	0a00001e 	beq	229ac <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x278>
   22930:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   22934:	e3500000 	cmp	r0, #0
   22938:	0a00003b 	beq	22a2c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2f8>
   2293c:	ebfff8ba 	bl	20c2c <CNetConfig::GetIPAddress() const>
   22940:	e59511bc 	ldr	r1, [r5, #444]	; 0x1bc
   22944:	ebfff985 	bl	20f60 <CIPAddress::operator!=(unsigned int) const>
   22948:	e3500000 	cmp	r0, #0
   2294c:	1a00001d 	bne	229c8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x294>
   22950:	e59511cc 	ldr	r1, [r5, #460]	; 0x1cc
   22954:	e59521d8 	ldr	r2, [r5, #472]	; 0x1d8
   22958:	e59531dc 	ldr	r3, [r5, #476]	; 0x1dc
   2295c:	e58511a4 	str	r1, [r5, #420]	; 0x1a4
   22960:	e58521a8 	str	r2, [r5, #424]	; 0x1a8
   22964:	e58531ac 	str	r3, [r5, #428]	; 0x1ac
   22968:	eb00109b 	bl	26bdc <CLogger::Get()>
   2296c:	e58d9000 	str	r9, [sp]
   22970:	e59f30e4 	ldr	r3, [pc, #228]	; 22a5c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x328>
   22974:	e3a02004 	mov	r2, #4
   22978:	e59f10c4 	ldr	r1, [pc, #196]	; 22a44 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   2297c:	eb000fd3 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22980:	e3a04000 	mov	r4, #0
   22984:	eaffffb5 	b	22860 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   22988:	e3a04004 	mov	r4, #4
   2298c:	eaffffb3 	b	22860 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   22990:	eb001091 	bl	26bdc <CLogger::Get()>
   22994:	e59f30c4 	ldr	r3, [pc, #196]	; 22a60 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x32c>
   22998:	e3a02002 	mov	r2, #2
   2299c:	e59f10a0 	ldr	r1, [pc, #160]	; 22a44 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   229a0:	eb000fca 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   229a4:	e3a04003 	mov	r4, #3
   229a8:	eaffffac 	b	22860 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   229ac:	eb00108a 	bl	26bdc <CLogger::Get()>
   229b0:	e59f30ac 	ldr	r3, [pc, #172]	; 22a64 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x330>
   229b4:	e3a02002 	mov	r2, #2
   229b8:	e59f1084 	ldr	r1, [pc, #132]	; 22a44 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   229bc:	eb000fc3 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   229c0:	e3a04004 	mov	r4, #4
   229c4:	eaffffa5 	b	22860 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   229c8:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   229cc:	ebfff89a 	bl	20c3c <CNetConfig::GetNetMask() const>
   229d0:	e59531c0 	ldr	r3, [r5, #448]	; 0x1c0
   229d4:	e5902000 	ldr	r2, [r0]
   229d8:	e1520003 	cmp	r2, r3
   229dc:	0affffdb 	beq	22950 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x21c>
   229e0:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   229e4:	ebfff896 	bl	20c44 <CNetConfig::GetDefaultGateway() const>
   229e8:	e59511c4 	ldr	r1, [r5, #452]	; 0x1c4
   229ec:	ebfff95b 	bl	20f60 <CIPAddress::operator!=(unsigned int) const>
   229f0:	e3500000 	cmp	r0, #0
   229f4:	0affffd5 	beq	22950 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x21c>
   229f8:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   229fc:	ebfff892 	bl	20c4c <CNetConfig::GetDNSServer() const>
   22a00:	e59511c8 	ldr	r1, [r5, #456]	; 0x1c8
   22a04:	ebfff955 	bl	20f60 <CIPAddress::operator!=(unsigned int) const>
   22a08:	e3500000 	cmp	r0, #0
   22a0c:	0affffcf 	beq	22950 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x21c>
   22a10:	eb001071 	bl	26bdc <CLogger::Get()>
   22a14:	e59f304c 	ldr	r3, [pc, #76]	; 22a68 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x334>
   22a18:	e3a02002 	mov	r2, #2
   22a1c:	e59f1020 	ldr	r1, [pc, #32]	; 22a44 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   22a20:	eb000faa 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22a24:	e3a04005 	mov	r4, #5
   22a28:	eaffff8c 	b	22860 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   22a2c:	e59f2038 	ldr	r2, [pc, #56]	; 22a6c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x338>
   22a30:	e59f1038 	ldr	r1, [pc, #56]	; 22a70 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   22a34:	e59f0038 	ldr	r0, [pc, #56]	; 22a74 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x340>
   22a38:	eb000774 	bl	24810 <assertion_failed>
   22a3c:	00044918 	.word	0x00044918
   22a40:	00044980 	.word	0x00044980
   22a44:	00044680 	.word	0x00044680
   22a48:	00044924 	.word	0x00044924
   22a4c:	00044938 	.word	0x00044938
   22a50:	00044930 	.word	0x00044930
   22a54:	0004493c 	.word	0x0004493c
   22a58:	00044860 	.word	0x00044860
   22a5c:	000449b0 	.word	0x000449b0
   22a60:	000448b0 	.word	0x000448b0
   22a64:	00044960 	.word	0x00044960
   22a68:	0004498c 	.word	0x0004498c
   22a6c:	00000195 	.word	0x00000195
   22a70:	000446b0 	.word	0x000446b0
   22a74:	00043a48 	.word	0x00043a48

00022a78 <CDHCPClient::Run()>:
   22a78:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a7c:	e28040f4 	add	r4, r0, #244	; 0xf4
   22a80:	e24ddf8d 	sub	sp, sp, #564	; 0x234
   22a84:	e1a07000 	mov	r7, r0
   22a88:	e3a01044 	mov	r1, #68	; 0x44
   22a8c:	e1a00004 	mov	r0, r4
   22a90:	eb000061 	bl	22c1c <CSocket::Bind(unsigned short)>
   22a94:	e3500000 	cmp	r0, #0
   22a98:	ba000053 	blt	22bec <CDHCPClient::Run()+0x174>
   22a9c:	e3a06040 	mov	r6, #64	; 0x40
   22aa0:	e3a05f89 	mov	r5, #548	; 0x224
   22aa4:	e3a0800a 	mov	r8, #10
   22aa8:	e59fa160 	ldr	sl, [pc, #352]	; 22c10 <CDHCPClient::Run()+0x198>
   22aac:	e59fb160 	ldr	fp, [pc, #352]	; 22c14 <CDHCPClient::Run()+0x19c>
   22ab0:	e1a00007 	mov	r0, r7
   22ab4:	ebfffe6f 	bl	22478 <CDHCPClient::SelectAndRequest()>
   22ab8:	e3500001 	cmp	r0, #1
   22abc:	0a000009 	beq	22ae8 <CDHCPClient::Run()+0x70>
   22ac0:	3a00000a 	bcc	22af0 <CDHCPClient::Run()+0x78>
   22ac4:	e3500005 	cmp	r0, #5
   22ac8:	8a000008 	bhi	22af0 <CDHCPClient::Run()+0x78>
   22acc:	eb0006a1 	bl	24558 <CScheduler::Get()>
   22ad0:	e3a0103c 	mov	r1, #60	; 0x3c
   22ad4:	eb000665 	bl	24470 <CScheduler::Sleep(unsigned int)>
   22ad8:	e1a00007 	mov	r0, r7
   22adc:	ebfffe65 	bl	22478 <CDHCPClient::SelectAndRequest()>
   22ae0:	e3500001 	cmp	r0, #1
   22ae4:	1afffff5 	bne	22ac0 <CDHCPClient::Run()+0x48>
   22ae8:	e28ddf8d 	add	sp, sp, #564	; 0x234
   22aec:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22af0:	e3a09001 	mov	r9, #1
   22af4:	eb001d05 	bl	29f10 <CTimer::Get()>
   22af8:	eb001a50 	bl	29440 <CTimer::GetUptime() const>
   22afc:	e5870198 	str	r0, [r7, #408]	; 0x198
   22b00:	eb001d02 	bl	29f10 <CTimer::Get()>
   22b04:	eb001a4d 	bl	29440 <CTimer::GetUptime() const>
   22b08:	e5973198 	ldr	r3, [r7, #408]	; 0x198
   22b0c:	e59721a8 	ldr	r2, [r7, #424]	; 0x1a8
   22b10:	e0400003 	sub	r0, r0, r3
   22b14:	e1500002 	cmp	r0, r2
   22b18:	3a000002 	bcc	22b28 <CDHCPClient::Run()+0xb0>
   22b1c:	ea00000c 	b	22b54 <CDHCPClient::Run()+0xdc>
   22b20:	eb00068c 	bl	24558 <CScheduler::Get()>
   22b24:	eb0005f8 	bl	2430c <CScheduler::Yield()>
   22b28:	e1a03006 	mov	r3, r6
   22b2c:	e1a02005 	mov	r2, r5
   22b30:	e28d100c 	add	r1, sp, #12
   22b34:	e1a00004 	mov	r0, r4
   22b38:	eb00014d 	bl	23074 <CSocket::Receive(void*, unsigned int, int)>
   22b3c:	e3500000 	cmp	r0, #0
   22b40:	cafffff6 	bgt	22b20 <CDHCPClient::Run()+0xa8>
   22b44:	eb000683 	bl	24558 <CScheduler::Get()>
   22b48:	e1a01008 	mov	r1, r8
   22b4c:	eb000647 	bl	24470 <CScheduler::Sleep(unsigned int)>
   22b50:	eaffffea 	b	22b00 <CDHCPClient::Run()+0x88>
   22b54:	e59721ac 	ldr	r2, [r7, #428]	; 0x1ac
   22b58:	e1a01009 	mov	r1, r9
   22b5c:	e1a00007 	mov	r0, r7
   22b60:	ebfffef3 	bl	22734 <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   22b64:	e3500005 	cmp	r0, #5
   22b68:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   22b6c:	ea000011 	b	22bb8 <CDHCPClient::Run()+0x140>
   22b70:	00022af4 	.word	0x00022af4
   22b74:	00022ae8 	.word	0x00022ae8
   22b78:	00022bb8 	.word	0x00022bb8
   22b7c:	00022b9c 	.word	0x00022b9c
   22b80:	00022b9c 	.word	0x00022b9c
   22b84:	00022b9c 	.word	0x00022b9c
   22b88:	eb001013 	bl	26bdc <CLogger::Get()>
   22b8c:	e1a0300a 	mov	r3, sl
   22b90:	e3a02001 	mov	r2, #1
   22b94:	e1a0100b 	mov	r1, fp
   22b98:	eb000f4c 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22b9c:	e3a03000 	mov	r3, #0
   22ba0:	e59700e0 	ldr	r0, [r7, #224]	; 0xe0
   22ba4:	e5c73194 	strb	r3, [r7, #404]	; 0x194
   22ba8:	e1500003 	cmp	r0, r3
   22bac:	0a000016 	beq	22c0c <CDHCPClient::Run()+0x194>
   22bb0:	ebfff839 	bl	20c9c <CNetConfig::Reset()>
   22bb4:	eaffffbd 	b	22ab0 <CDHCPClient::Run()+0x38>
   22bb8:	e59721a4 	ldr	r2, [r7, #420]	; 0x1a4
   22bbc:	e3a01000 	mov	r1, #0
   22bc0:	e1a00007 	mov	r0, r7
   22bc4:	ebfffeda 	bl	22734 <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   22bc8:	e3500005 	cmp	r0, #5
   22bcc:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   22bd0:	eaffffec 	b	22b88 <CDHCPClient::Run()+0x110>
   22bd4:	00022af4 	.word	0x00022af4
   22bd8:	00022ae8 	.word	0x00022ae8
   22bdc:	00022b88 	.word	0x00022b88
   22be0:	00022b9c 	.word	0x00022b9c
   22be4:	00022b9c 	.word	0x00022b9c
   22be8:	00022b9c 	.word	0x00022b9c
   22bec:	eb000ffa 	bl	26bdc <CLogger::Get()>
   22bf0:	e3a02044 	mov	r2, #68	; 0x44
   22bf4:	e59f301c 	ldr	r3, [pc, #28]	; 22c18 <CDHCPClient::Run()+0x1a0>
   22bf8:	e58d2000 	str	r2, [sp]
   22bfc:	e59f1010 	ldr	r1, [pc, #16]	; 22c14 <CDHCPClient::Run()+0x19c>
   22c00:	e3a02001 	mov	r2, #1
   22c04:	eb000f31 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22c08:	eaffffb6 	b	22ae8 <CDHCPClient::Run()+0x70>
   22c0c:	ebfffb22 	bl	2189c <CDHCPClient::HaltNetwork() [clone .part.0]>
   22c10:	000449d8 	.word	0x000449d8
   22c14:	00044680 	.word	0x00044680
   22c18:	000449c0 	.word	0x000449c0

00022c1c <CSocket::Bind(unsigned short)>:
   22c1c:	e251c000 	subs	ip, r1, #0
   22c20:	0a00000b 	beq	22c54 <CSocket::Bind(unsigned short)+0x38>
   22c24:	e1d031b4 	ldrh	r3, [r0, #20]
   22c28:	e3530000 	cmp	r3, #0
   22c2c:	1a000008 	bne	22c54 <CSocket::Bind(unsigned short)+0x38>
   22c30:	e5902018 	ldr	r2, [r0, #24]
   22c34:	e3520000 	cmp	r2, #0
   22c38:	aa000005 	bge	22c54 <CSocket::Bind(unsigned short)+0x38>
   22c3c:	e5902010 	ldr	r2, [r0, #16]
   22c40:	e1c0c1b4 	strh	ip, [r0, #20]
   22c44:	e3520011 	cmp	r2, #17
   22c48:	0a000003 	beq	22c5c <CSocket::Bind(unsigned short)+0x40>
   22c4c:	e1a00003 	mov	r0, r3
   22c50:	e12fff1e 	bx	lr
   22c54:	e3e00000 	mvn	r0, #0
   22c58:	e12fff1e 	bx	lr
   22c5c:	e92d4010 	push	{r4, lr}
   22c60:	e1a04000 	mov	r4, r0
   22c64:	e590000c 	ldr	r0, [r0, #12]
   22c68:	ebffdba3 	bl	19afc <CTransportLayer::Bind(unsigned short, int)>
   22c6c:	e5840018 	str	r0, [r4, #24]
   22c70:	e0000fc0 	and	r0, r0, r0, asr #31
   22c74:	e8bd8010 	pop	{r4, pc}

00022c78 <CSocket::Connect(CIPAddress&, unsigned short)>:
   22c78:	e92d4070 	push	{r4, r5, r6, lr}
   22c7c:	e2525000 	subs	r5, r2, #0
   22c80:	e24dd008 	sub	sp, sp, #8
   22c84:	0a000017 	beq	22ce8 <CSocket::Connect(CIPAddress&, unsigned short)+0x70>
   22c88:	e1a04000 	mov	r4, r0
   22c8c:	e590000c 	ldr	r0, [r0, #12]
   22c90:	e1a06001 	mov	r6, r1
   22c94:	e3500000 	cmp	r0, #0
   22c98:	0a000024 	beq	22d30 <CSocket::Connect(CIPAddress&, unsigned short)+0xb8>
   22c9c:	e5941018 	ldr	r1, [r4, #24]
   22ca0:	e3510000 	cmp	r1, #0
   22ca4:	ba000005 	blt	22cc0 <CSocket::Connect(CIPAddress&, unsigned short)+0x48>
   22ca8:	e5943010 	ldr	r3, [r4, #16]
   22cac:	e3530011 	cmp	r3, #17
   22cb0:	1a00000c 	bne	22ce8 <CSocket::Connect(CIPAddress&, unsigned short)+0x70>
   22cb4:	ebffdd1f 	bl	1a138 <CTransportLayer::Disconnect(int)>
   22cb8:	e3e03000 	mvn	r3, #0
   22cbc:	e5843018 	str	r3, [r4, #24]
   22cc0:	e5940008 	ldr	r0, [r4, #8]
   22cc4:	e3500000 	cmp	r0, #0
   22cc8:	0a00001c 	beq	22d40 <CSocket::Connect(CIPAddress&, unsigned short)+0xc8>
   22ccc:	ebfff7d6 	bl	20c2c <CNetConfig::GetIPAddress() const>
   22cd0:	ebfff910 	bl	21118 <CIPAddress::IsNull() const>
   22cd4:	e3500000 	cmp	r0, #0
   22cd8:	0a000009 	beq	22d04 <CSocket::Connect(CIPAddress&, unsigned short)+0x8c>
   22cdc:	e5943010 	ldr	r3, [r4, #16]
   22ce0:	e3530011 	cmp	r3, #17
   22ce4:	0a000002 	beq	22cf4 <CSocket::Connect(CIPAddress&, unsigned short)+0x7c>
   22ce8:	e3e00000 	mvn	r0, #0
   22cec:	e28dd008 	add	sp, sp, #8
   22cf0:	e8bd8070 	pop	{r4, r5, r6, pc}
   22cf4:	e1a00006 	mov	r0, r6
   22cf8:	ebfff914 	bl	21150 <CIPAddress::IsBroadcast() const>
   22cfc:	e3500000 	cmp	r0, #0
   22d00:	0afffff8 	beq	22ce8 <CSocket::Connect(CIPAddress&, unsigned short)+0x70>
   22d04:	e594c010 	ldr	ip, [r4, #16]
   22d08:	e1d431b4 	ldrh	r3, [r4, #20]
   22d0c:	e594000c 	ldr	r0, [r4, #12]
   22d10:	e1a02005 	mov	r2, r5
   22d14:	e1a01006 	mov	r1, r6
   22d18:	e58dc000 	str	ip, [sp]
   22d1c:	ebffdbd0 	bl	19c64 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>
   22d20:	e5840018 	str	r0, [r4, #24]
   22d24:	e0000fc0 	and	r0, r0, r0, asr #31
   22d28:	e28dd008 	add	sp, sp, #8
   22d2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22d30:	e3a02070 	mov	r2, #112	; 0x70
   22d34:	e59f1014 	ldr	r1, [pc, #20]	; 22d50 <CSocket::Connect(CIPAddress&, unsigned short)+0xd8>
   22d38:	e59f0014 	ldr	r0, [pc, #20]	; 22d54 <CSocket::Connect(CIPAddress&, unsigned short)+0xdc>
   22d3c:	eb0006b3 	bl	24810 <assertion_failed>
   22d40:	e3a0207d 	mov	r2, #125	; 0x7d
   22d44:	e59f1004 	ldr	r1, [pc, #4]	; 22d50 <CSocket::Connect(CIPAddress&, unsigned short)+0xd8>
   22d48:	e59f0008 	ldr	r0, [pc, #8]	; 22d58 <CSocket::Connect(CIPAddress&, unsigned short)+0xe0>
   22d4c:	eb0006af 	bl	24810 <assertion_failed>
   22d50:	00044a24 	.word	0x00044a24
   22d54:	00044a30 	.word	0x00044a30
   22d58:	00043a48 	.word	0x00043a48

00022d5c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   22d5c:	e16fcf12 	clz	ip, r2
   22d60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22d64:	e590e018 	ldr	lr, [r0, #24]
   22d68:	e1a0c2ac 	lsr	ip, ip, #5
   22d6c:	e24dd010 	sub	sp, sp, #16
   22d70:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   22d74:	e1dd82bc 	ldrh	r8, [sp, #44]	; 0x2c
   22d78:	1a000024 	bne	22e10 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb4>
   22d7c:	e1a04000 	mov	r4, r0
   22d80:	e5900008 	ldr	r0, [r0, #8]
   22d84:	e1a06002 	mov	r6, r2
   22d88:	e3500000 	cmp	r0, #0
   22d8c:	e1a07003 	mov	r7, r3
   22d90:	e1a05001 	mov	r5, r1
   22d94:	0a000015 	beq	22df0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x94>
   22d98:	ebfff7a3 	bl	20c2c <CNetConfig::GetIPAddress() const>
   22d9c:	ebfff8dd 	bl	21118 <CIPAddress::IsNull() const>
   22da0:	e3580000 	cmp	r8, #0
   22da4:	03800001 	orreq	r0, r0, #1
   22da8:	e31000ff 	tst	r0, #255	; 0xff
   22dac:	1a000017 	bne	22e10 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb4>
   22db0:	e594000c 	ldr	r0, [r4, #12]
   22db4:	e3500000 	cmp	r0, #0
   22db8:	0a000010 	beq	22e00 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xa4>
   22dbc:	e3550000 	cmp	r5, #0
   22dc0:	0a000014 	beq	22e18 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xbc>
   22dc4:	e5943018 	ldr	r3, [r4, #24]
   22dc8:	e1a02006 	mov	r2, r6
   22dcc:	e58d3008 	str	r3, [sp, #8]
   22dd0:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   22dd4:	e58d8004 	str	r8, [sp, #4]
   22dd8:	e58d3000 	str	r3, [sp]
   22ddc:	e1a01005 	mov	r1, r5
   22de0:	e1a03007 	mov	r3, r7
   22de4:	ebffdd51 	bl	1a330 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>
   22de8:	e28dd010 	add	sp, sp, #16
   22dec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22df0:	e59f2030 	ldr	r2, [pc, #48]	; 22e28 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xcc>
   22df4:	e59f1030 	ldr	r1, [pc, #48]	; 22e2c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22df8:	e59f0030 	ldr	r0, [pc, #48]	; 22e30 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd4>
   22dfc:	eb000683 	bl	24810 <assertion_failed>
   22e00:	e59f202c 	ldr	r2, [pc, #44]	; 22e34 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd8>
   22e04:	e59f1020 	ldr	r1, [pc, #32]	; 22e2c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22e08:	e59f0028 	ldr	r0, [pc, #40]	; 22e38 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xdc>
   22e0c:	eb00067f 	bl	24810 <assertion_failed>
   22e10:	e3e00000 	mvn	r0, #0
   22e14:	eafffff3 	b	22de8 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x8c>
   22e18:	e59f201c 	ldr	r2, [pc, #28]	; 22e3c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe0>
   22e1c:	e59f1008 	ldr	r1, [pc, #8]	; 22e2c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22e20:	e59f0018 	ldr	r0, [pc, #24]	; 22e40 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe4>
   22e24:	eb000679 	bl	24810 <assertion_failed>
   22e28:	0000011e 	.word	0x0000011e
   22e2c:	00044a24 	.word	0x00044a24
   22e30:	00043a48 	.word	0x00043a48
   22e34:	00000129 	.word	0x00000129
   22e38:	00044a30 	.word	0x00044a30
   22e3c:	0000012a 	.word	0x0000012a
   22e40:	00040c5c 	.word	0x00040c5c

00022e44 <CSocket::~CSocket()>:
   22e44:	e92d4070 	push	{r4, r5, r6, lr}
   22e48:	e1a04000 	mov	r4, r0
   22e4c:	e590000c 	ldr	r0, [r0, #12]
   22e50:	e59f309c 	ldr	r3, [pc, #156]	; 22ef4 <CSocket::~CSocket()+0xb0>
   22e54:	e3500000 	cmp	r0, #0
   22e58:	e5843000 	str	r3, [r4]
   22e5c:	0a00001c 	beq	22ed4 <CSocket::~CSocket()+0x90>
   22e60:	e5941018 	ldr	r1, [r4, #24]
   22e64:	e594301c 	ldr	r3, [r4, #28]
   22e68:	e3510000 	cmp	r1, #0
   22e6c:	ba00000b 	blt	22ea0 <CSocket::~CSocket()+0x5c>
   22e70:	e3530000 	cmp	r3, #0
   22e74:	1a00001a 	bne	22ee4 <CSocket::~CSocket()+0xa0>
   22e78:	ebffdcae 	bl	1a138 <CTransportLayer::Disconnect(int)>
   22e7c:	e3e03000 	mvn	r3, #0
   22e80:	e5843018 	str	r3, [r4, #24]
   22e84:	e3a03000 	mov	r3, #0
   22e88:	e1a00004 	mov	r0, r4
   22e8c:	e584300c 	str	r3, [r4, #12]
   22e90:	e5843008 	str	r3, [r4, #8]
   22e94:	eb00021e 	bl	23714 <CNetSocket::~CNetSocket()>
   22e98:	e1a00004 	mov	r0, r4
   22e9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22ea0:	e3530000 	cmp	r3, #0
   22ea4:	0afffff6 	beq	22e84 <CSocket::~CSocket()+0x40>
   22ea8:	e284601c 	add	r6, r4, #28
   22eac:	e3a05000 	mov	r5, #0
   22eb0:	ea000000 	b	22eb8 <CSocket::~CSocket()+0x74>
   22eb4:	e594000c 	ldr	r0, [r4, #12]
   22eb8:	e5b61004 	ldr	r1, [r6, #4]!
   22ebc:	ebffdc9d 	bl	1a138 <CTransportLayer::Disconnect(int)>
   22ec0:	e594301c 	ldr	r3, [r4, #28]
   22ec4:	e2855001 	add	r5, r5, #1
   22ec8:	e1530005 	cmp	r3, r5
   22ecc:	8afffff8 	bhi	22eb4 <CSocket::~CSocket()+0x70>
   22ed0:	eaffffeb 	b	22e84 <CSocket::~CSocket()+0x40>
   22ed4:	e3a02036 	mov	r2, #54	; 0x36
   22ed8:	e59f1018 	ldr	r1, [pc, #24]	; 22ef8 <CSocket::~CSocket()+0xb4>
   22edc:	e59f0018 	ldr	r0, [pc, #24]	; 22efc <CSocket::~CSocket()+0xb8>
   22ee0:	eb00064a 	bl	24810 <assertion_failed>
   22ee4:	e3a0203a 	mov	r2, #58	; 0x3a
   22ee8:	e59f1008 	ldr	r1, [pc, #8]	; 22ef8 <CSocket::~CSocket()+0xb4>
   22eec:	e59f000c 	ldr	r0, [pc, #12]	; 22f00 <CSocket::~CSocket()+0xbc>
   22ef0:	eb000646 	bl	24810 <assertion_failed>
   22ef4:	000449f0 	.word	0x000449f0
   22ef8:	00044a24 	.word	0x00044a24
   22efc:	00044a30 	.word	0x00044a30
   22f00:	00044a48 	.word	0x00044a48

00022f04 <CSocket::~CSocket()>:
   22f04:	e92d4010 	push	{r4, lr}
   22f08:	e1a04000 	mov	r4, r0
   22f0c:	ebffffcc 	bl	22e44 <CSocket::~CSocket()>
   22f10:	e1a00004 	mov	r0, r4
   22f14:	e3a010a0 	mov	r1, #160	; 0xa0
   22f18:	eb002067 	bl	2b0bc <operator delete(void*, unsigned int)>
   22f1c:	e1a00004 	mov	r0, r4
   22f20:	e8bd8010 	pop	{r4, pc}

00022f24 <CSocket::Listen(unsigned int)>:
   22f24:	e5902010 	ldr	r2, [r0, #16]
   22f28:	e3520006 	cmp	r2, #6
   22f2c:	1a000023 	bne	22fc0 <CSocket::Listen(unsigned int)+0x9c>
   22f30:	e1a03001 	mov	r3, r1
   22f34:	e1d011b4 	ldrh	r1, [r0, #20]
   22f38:	e3510000 	cmp	r1, #0
   22f3c:	0a00001f 	beq	22fc0 <CSocket::Listen(unsigned int)+0x9c>
   22f40:	e590c018 	ldr	ip, [r0, #24]
   22f44:	e35c0000 	cmp	ip, #0
   22f48:	aa00001c 	bge	22fc0 <CSocket::Listen(unsigned int)+0x9c>
   22f4c:	e243c001 	sub	ip, r3, #1
   22f50:	e35c001f 	cmp	ip, #31
   22f54:	8a000019 	bhi	22fc0 <CSocket::Listen(unsigned int)+0x9c>
   22f58:	e92d4070 	push	{r4, r5, r6, lr}
   22f5c:	e590501c 	ldr	r5, [r0, #28]
   22f60:	e1a04000 	mov	r4, r0
   22f64:	e3550000 	cmp	r5, #0
   22f68:	1a000018 	bne	22fd0 <CSocket::Listen(unsigned int)+0xac>
   22f6c:	e590000c 	ldr	r0, [r0, #12]
   22f70:	e584301c 	str	r3, [r4, #28]
   22f74:	e3500000 	cmp	r0, #0
   22f78:	1a000007 	bne	22f9c <CSocket::Listen(unsigned int)+0x78>
   22f7c:	ea000017 	b	22fe0 <CSocket::Listen(unsigned int)+0xbc>
   22f80:	e594301c 	ldr	r3, [r4, #28]
   22f84:	e2855001 	add	r5, r5, #1
   22f88:	e1530005 	cmp	r3, r5
   22f8c:	9a00000d 	bls	22fc8 <CSocket::Listen(unsigned int)+0xa4>
   22f90:	e594000c 	ldr	r0, [r4, #12]
   22f94:	e1d411b4 	ldrh	r1, [r4, #20]
   22f98:	e5942010 	ldr	r2, [r4, #16]
   22f9c:	ebffdbd6 	bl	19efc <CTransportLayer::Listen(unsigned short, int)>
   22fa0:	e0843105 	add	r3, r4, r5, lsl #2
   22fa4:	e3500000 	cmp	r0, #0
   22fa8:	e5830020 	str	r0, [r3, #32]
   22fac:	aafffff3 	bge	22f80 <CSocket::Listen(unsigned int)+0x5c>
   22fb0:	e3a020a5 	mov	r2, #165	; 0xa5
   22fb4:	e59f1034 	ldr	r1, [pc, #52]	; 22ff0 <CSocket::Listen(unsigned int)+0xcc>
   22fb8:	e59f0034 	ldr	r0, [pc, #52]	; 22ff4 <CSocket::Listen(unsigned int)+0xd0>
   22fbc:	eb000613 	bl	24810 <assertion_failed>
   22fc0:	e3e00000 	mvn	r0, #0
   22fc4:	e12fff1e 	bx	lr
   22fc8:	e3a00000 	mov	r0, #0
   22fcc:	e8bd8070 	pop	{r4, r5, r6, pc}
   22fd0:	e3a0209d 	mov	r2, #157	; 0x9d
   22fd4:	e59f1014 	ldr	r1, [pc, #20]	; 22ff0 <CSocket::Listen(unsigned int)+0xcc>
   22fd8:	e59f0018 	ldr	r0, [pc, #24]	; 22ff8 <CSocket::Listen(unsigned int)+0xd4>
   22fdc:	eb00060b 	bl	24810 <assertion_failed>
   22fe0:	e3a020a0 	mov	r2, #160	; 0xa0
   22fe4:	e59f1004 	ldr	r1, [pc, #4]	; 22ff0 <CSocket::Listen(unsigned int)+0xcc>
   22fe8:	e59f000c 	ldr	r0, [pc, #12]	; 22ffc <CSocket::Listen(unsigned int)+0xd8>
   22fec:	eb000607 	bl	24810 <assertion_failed>
   22ff0:	00044a24 	.word	0x00044a24
   22ff4:	00044a58 	.word	0x00044a58
   22ff8:	00044a48 	.word	0x00044a48
   22ffc:	00044a30 	.word	0x00044a30

00023000 <CSocket::Send(void const*, unsigned int, int)>:
   23000:	e16fcf12 	clz	ip, r2
   23004:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   23008:	e590e018 	ldr	lr, [r0, #24]
   2300c:	e1a0c2ac 	lsr	ip, ip, #5
   23010:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   23014:	e24dd00c 	sub	sp, sp, #12
   23018:	1a000010 	bne	23060 <CSocket::Send(void const*, unsigned int, int)+0x60>
   2301c:	e590000c 	ldr	r0, [r0, #12]
   23020:	e3500000 	cmp	r0, #0
   23024:	0a000005 	beq	23040 <CSocket::Send(void const*, unsigned int, int)+0x40>
   23028:	e3510000 	cmp	r1, #0
   2302c:	0a000007 	beq	23050 <CSocket::Send(void const*, unsigned int, int)+0x50>
   23030:	e58de000 	str	lr, [sp]
   23034:	ebffdc5d 	bl	1a1b0 <CTransportLayer::Send(void const*, unsigned int, int, int)>
   23038:	e28dd00c 	add	sp, sp, #12
   2303c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   23040:	e3a020ed 	mov	r2, #237	; 0xed
   23044:	e59f101c 	ldr	r1, [pc, #28]	; 23068 <CSocket::Send(void const*, unsigned int, int)+0x68>
   23048:	e59f001c 	ldr	r0, [pc, #28]	; 2306c <CSocket::Send(void const*, unsigned int, int)+0x6c>
   2304c:	eb0005ef 	bl	24810 <assertion_failed>
   23050:	e3a020ee 	mov	r2, #238	; 0xee
   23054:	e59f100c 	ldr	r1, [pc, #12]	; 23068 <CSocket::Send(void const*, unsigned int, int)+0x68>
   23058:	e59f0010 	ldr	r0, [pc, #16]	; 23070 <CSocket::Send(void const*, unsigned int, int)+0x70>
   2305c:	eb0005eb 	bl	24810 <assertion_failed>
   23060:	e3e00000 	mvn	r0, #0
   23064:	eafffff3 	b	23038 <CSocket::Send(void const*, unsigned int, int)+0x38>
   23068:	00044a24 	.word	0x00044a24
   2306c:	00044a30 	.word	0x00044a30
   23070:	00040c5c 	.word	0x00040c5c

00023074 <CSocket::Receive(void*, unsigned int, int)>:
   23074:	e16fcf12 	clz	ip, r2
   23078:	e92d4070 	push	{r4, r5, r6, lr}
   2307c:	e590e018 	ldr	lr, [r0, #24]
   23080:	e1a0c2ac 	lsr	ip, ip, #5
   23084:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   23088:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   2308c:	1a00001d 	bne	23108 <CSocket::Receive(void*, unsigned int, int)+0x94>
   23090:	e590000c 	ldr	r0, [r0, #12]
   23094:	e1a05002 	mov	r5, r2
   23098:	e3500000 	cmp	r0, #0
   2309c:	e1a02003 	mov	r2, r3
   230a0:	e1a06001 	mov	r6, r1
   230a4:	0a00000f 	beq	230e8 <CSocket::Receive(void*, unsigned int, int)+0x74>
   230a8:	e1a0300e 	mov	r3, lr
   230ac:	e1a0100d 	mov	r1, sp
   230b0:	ebffdc73 	bl	1a284 <CTransportLayer::Receive(void*, int, int)>
   230b4:	e2504000 	subs	r4, r0, #0
   230b8:	ba000007 	blt	230dc <CSocket::Receive(void*, unsigned int, int)+0x68>
   230bc:	e1540005 	cmp	r4, r5
   230c0:	21a04005 	movcs	r4, r5
   230c4:	e3560000 	cmp	r6, #0
   230c8:	0a00000a 	beq	230f8 <CSocket::Receive(void*, unsigned int, int)+0x84>
   230cc:	e1a0100d 	mov	r1, sp
   230d0:	e1a00006 	mov	r0, r6
   230d4:	e1a02004 	mov	r2, r4
   230d8:	eb001e10 	bl	2a920 <memcpy>
   230dc:	e1a00004 	mov	r0, r4
   230e0:	e28ddd19 	add	sp, sp, #1600	; 0x640
   230e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   230e8:	e3a020fe 	mov	r2, #254	; 0xfe
   230ec:	e59f101c 	ldr	r1, [pc, #28]	; 23110 <CSocket::Receive(void*, unsigned int, int)+0x9c>
   230f0:	e59f001c 	ldr	r0, [pc, #28]	; 23114 <CSocket::Receive(void*, unsigned int, int)+0xa0>
   230f4:	eb0005c5 	bl	24810 <assertion_failed>
   230f8:	e59f2018 	ldr	r2, [pc, #24]	; 23118 <CSocket::Receive(void*, unsigned int, int)+0xa4>
   230fc:	e59f100c 	ldr	r1, [pc, #12]	; 23110 <CSocket::Receive(void*, unsigned int, int)+0x9c>
   23100:	e59f0014 	ldr	r0, [pc, #20]	; 2311c <CSocket::Receive(void*, unsigned int, int)+0xa8>
   23104:	eb0005c1 	bl	24810 <assertion_failed>
   23108:	e3e04000 	mvn	r4, #0
   2310c:	eafffff2 	b	230dc <CSocket::Receive(void*, unsigned int, int)+0x68>
   23110:	00044a24 	.word	0x00044a24
   23114:	00044a30 	.word	0x00044a30
   23118:	0000010b 	.word	0x0000010b
   2311c:	00040c5c 	.word	0x00040c5c

00023120 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   23120:	e16fcf12 	clz	ip, r2
   23124:	e92d4070 	push	{r4, r5, r6, lr}
   23128:	e590e018 	ldr	lr, [r0, #24]
   2312c:	e1a0c2ac 	lsr	ip, ip, #5
   23130:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   23134:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   23138:	e24dd008 	sub	sp, sp, #8
   2313c:	1a000021 	bne	231c8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xa8>
   23140:	e590000c 	ldr	r0, [r0, #12]
   23144:	e1a05002 	mov	r5, r2
   23148:	e3500000 	cmp	r0, #0
   2314c:	e1a02003 	mov	r2, r3
   23150:	e1a06001 	mov	r6, r1
   23154:	0a000013 	beq	231a8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x88>
   23158:	e59d365c 	ldr	r3, [sp, #1628]	; 0x65c
   2315c:	e58de004 	str	lr, [sp, #4]
   23160:	e58d3000 	str	r3, [sp]
   23164:	e28d1008 	add	r1, sp, #8
   23168:	e59d3658 	ldr	r3, [sp, #1624]	; 0x658
   2316c:	ebffdca8 	bl	1a414 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>
   23170:	e2504000 	subs	r4, r0, #0
   23174:	ba000007 	blt	23198 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x78>
   23178:	e1540005 	cmp	r4, r5
   2317c:	21a04005 	movcs	r4, r5
   23180:	e3560000 	cmp	r6, #0
   23184:	0a00000b 	beq	231b8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x98>
   23188:	e28d1008 	add	r1, sp, #8
   2318c:	e1a00006 	mov	r0, r6
   23190:	e1a02004 	mov	r2, r4
   23194:	eb001de1 	bl	2a920 <memcpy>
   23198:	e1a00004 	mov	r0, r4
   2319c:	e28ddd19 	add	sp, sp, #1600	; 0x640
   231a0:	e28dd008 	add	sp, sp, #8
   231a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   231a8:	e59f2020 	ldr	r2, [pc, #32]	; 231d0 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb0>
   231ac:	e59f1020 	ldr	r1, [pc, #32]	; 231d4 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb4>
   231b0:	e59f0020 	ldr	r0, [pc, #32]	; 231d8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb8>
   231b4:	eb000595 	bl	24810 <assertion_failed>
   231b8:	e59f201c 	ldr	r2, [pc, #28]	; 231dc <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xbc>
   231bc:	e59f1010 	ldr	r1, [pc, #16]	; 231d4 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb4>
   231c0:	e59f0018 	ldr	r0, [pc, #24]	; 231e0 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xc0>
   231c4:	eb000591 	bl	24810 <assertion_failed>
   231c8:	e3e04000 	mvn	r4, #0
   231cc:	eafffff1 	b	23198 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x78>
   231d0:	0000013b 	.word	0x0000013b
   231d4:	00044a24 	.word	0x00044a24
   231d8:	00044a30 	.word	0x00044a30
   231dc:	00000149 	.word	0x00000149
   231e0:	00040c5c 	.word	0x00040c5c

000231e4 <CSocket::SetOptionBroadcast(bool)>:
   231e4:	e5902018 	ldr	r2, [r0, #24]
   231e8:	e3520000 	cmp	r2, #0
   231ec:	ba00000d 	blt	23228 <CSocket::SetOptionBroadcast(bool)+0x44>
   231f0:	e5903010 	ldr	r3, [r0, #16]
   231f4:	e3530011 	cmp	r3, #17
   231f8:	0a000001 	beq	23204 <CSocket::SetOptionBroadcast(bool)+0x20>
   231fc:	e3a00000 	mov	r0, #0
   23200:	e12fff1e 	bx	lr
   23204:	e590000c 	ldr	r0, [r0, #12]
   23208:	e3500000 	cmp	r0, #0
   2320c:	0a000000 	beq	23214 <CSocket::SetOptionBroadcast(bool)+0x30>
   23210:	eaffdcaf 	b	1a4d4 <CTransportLayer::SetOptionBroadcast(bool, int)>
   23214:	e92d4010 	push	{r4, lr}
   23218:	e59f2010 	ldr	r2, [pc, #16]	; 23230 <CSocket::SetOptionBroadcast(bool)+0x4c>
   2321c:	e59f1010 	ldr	r1, [pc, #16]	; 23234 <CSocket::SetOptionBroadcast(bool)+0x50>
   23220:	e59f0010 	ldr	r0, [pc, #16]	; 23238 <CSocket::SetOptionBroadcast(bool)+0x54>
   23224:	eb000579 	bl	24810 <assertion_failed>
   23228:	e3e00000 	mvn	r0, #0
   2322c:	e12fff1e 	bx	lr
   23230:	0000015b 	.word	0x0000015b
   23234:	00044a24 	.word	0x00044a24
   23238:	00044a30 	.word	0x00044a30

0002323c <CSocket::GetForeignIP() const>:
   2323c:	e5901018 	ldr	r1, [r0, #24]
   23240:	e3510000 	cmp	r1, #0
   23244:	ba000008 	blt	2326c <CSocket::GetForeignIP() const+0x30>
   23248:	e590000c 	ldr	r0, [r0, #12]
   2324c:	e3500000 	cmp	r0, #0
   23250:	0a000000 	beq	23258 <CSocket::GetForeignIP() const+0x1c>
   23254:	eaffdcdc 	b	1a5cc <CTransportLayer::GetForeignIP(int) const>
   23258:	e92d4010 	push	{r4, lr}
   2325c:	e59f2010 	ldr	r2, [pc, #16]	; 23274 <CSocket::GetForeignIP() const+0x38>
   23260:	e59f1010 	ldr	r1, [pc, #16]	; 23278 <CSocket::GetForeignIP() const+0x3c>
   23264:	e59f0010 	ldr	r0, [pc, #16]	; 2327c <CSocket::GetForeignIP() const+0x40>
   23268:	eb000568 	bl	24810 <assertion_failed>
   2326c:	e3a00000 	mov	r0, #0
   23270:	e12fff1e 	bx	lr
   23274:	00000166 	.word	0x00000166
   23278:	00044a24 	.word	0x00044a24
   2327c:	00044a30 	.word	0x00044a30

00023280 <CSocket::CSocket(CNetSubSystem*, int)>:
   23280:	e92d4070 	push	{r4, r5, r6, lr}
   23284:	e1a04000 	mov	r4, r0
   23288:	e1a05001 	mov	r5, r1
   2328c:	e1a06002 	mov	r6, r2
   23290:	eb000111 	bl	236dc <CNetSocket::CNetSocket(CNetSubSystem*)>
   23294:	e59f306c 	ldr	r3, [pc, #108]	; 23308 <CSocket::CSocket(CNetSubSystem*, int)+0x88>
   23298:	e1a00005 	mov	r0, r5
   2329c:	e5843000 	str	r3, [r4]
   232a0:	ebffd939 	bl	1978c <CNetSubSystem::GetConfig()>
   232a4:	e5840008 	str	r0, [r4, #8]
   232a8:	e1a00005 	mov	r0, r5
   232ac:	ebffd93c 	bl	197a4 <CNetSubSystem::GetTransportLayer()>
   232b0:	e3a03000 	mov	r3, #0
   232b4:	e3e01000 	mvn	r1, #0
   232b8:	e594c008 	ldr	ip, [r4, #8]
   232bc:	e5846010 	str	r6, [r4, #16]
   232c0:	e15c0003 	cmp	ip, r3
   232c4:	e584000c 	str	r0, [r4, #12]
   232c8:	e5841018 	str	r1, [r4, #24]
   232cc:	e1c431b4 	strh	r3, [r4, #20]
   232d0:	e584301c 	str	r3, [r4, #28]
   232d4:	0a000003 	beq	232e8 <CSocket::CSocket(CNetSubSystem*, int)+0x68>
   232d8:	e3500000 	cmp	r0, #0
   232dc:	0a000005 	beq	232f8 <CSocket::CSocket(CNetSubSystem*, int)+0x78>
   232e0:	e1a00004 	mov	r0, r4
   232e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   232e8:	e3a02023 	mov	r2, #35	; 0x23
   232ec:	e59f1018 	ldr	r1, [pc, #24]	; 2330c <CSocket::CSocket(CNetSubSystem*, int)+0x8c>
   232f0:	e59f0018 	ldr	r0, [pc, #24]	; 23310 <CSocket::CSocket(CNetSubSystem*, int)+0x90>
   232f4:	eb000545 	bl	24810 <assertion_failed>
   232f8:	e3a02024 	mov	r2, #36	; 0x24
   232fc:	e59f1008 	ldr	r1, [pc, #8]	; 2330c <CSocket::CSocket(CNetSubSystem*, int)+0x8c>
   23300:	e59f000c 	ldr	r0, [pc, #12]	; 23314 <CSocket::CSocket(CNetSubSystem*, int)+0x94>
   23304:	eb000541 	bl	24810 <assertion_failed>
   23308:	000449f0 	.word	0x000449f0
   2330c:	00044a24 	.word	0x00044a24
   23310:	00043a48 	.word	0x00043a48
   23314:	00044a30 	.word	0x00044a30

00023318 <CSocket::CSocket(CSocket&, int)>:
   23318:	e92d4070 	push	{r4, r5, r6, lr}
   2331c:	e1a04000 	mov	r4, r0
   23320:	e1a00001 	mov	r0, r1
   23324:	e1a05001 	mov	r5, r1
   23328:	e1a06002 	mov	r6, r2
   2332c:	eb0000ff 	bl	23730 <CNetSocket::GetNetSubSystem()>
   23330:	e1a01000 	mov	r1, r0
   23334:	e1a00004 	mov	r0, r4
   23338:	eb0000e7 	bl	236dc <CNetSocket::CNetSocket(CNetSubSystem*)>
   2333c:	e3a00000 	mov	r0, #0
   23340:	e5953008 	ldr	r3, [r5, #8]
   23344:	e595100c 	ldr	r1, [r5, #12]
   23348:	e595c010 	ldr	ip, [r5, #16]
   2334c:	e1d521b4 	ldrh	r2, [r5, #20]
   23350:	e59fe050 	ldr	lr, [pc, #80]	; 233a8 <CSocket::CSocket(CSocket&, int)+0x90>
   23354:	e1530000 	cmp	r3, r0
   23358:	e584e000 	str	lr, [r4]
   2335c:	e5843008 	str	r3, [r4, #8]
   23360:	e584100c 	str	r1, [r4, #12]
   23364:	e584c010 	str	ip, [r4, #16]
   23368:	e1c421b4 	strh	r2, [r4, #20]
   2336c:	e5846018 	str	r6, [r4, #24]
   23370:	e584001c 	str	r0, [r4, #28]
   23374:	0a000003 	beq	23388 <CSocket::CSocket(CSocket&, int)+0x70>
   23378:	e3510000 	cmp	r1, #0
   2337c:	0a000005 	beq	23398 <CSocket::CSocket(CSocket&, int)+0x80>
   23380:	e1a00004 	mov	r0, r4
   23384:	e8bd8070 	pop	{r4, r5, r6, pc}
   23388:	e3a02030 	mov	r2, #48	; 0x30
   2338c:	e59f1018 	ldr	r1, [pc, #24]	; 233ac <CSocket::CSocket(CSocket&, int)+0x94>
   23390:	e59f0018 	ldr	r0, [pc, #24]	; 233b0 <CSocket::CSocket(CSocket&, int)+0x98>
   23394:	eb00051d 	bl	24810 <assertion_failed>
   23398:	e3a02031 	mov	r2, #49	; 0x31
   2339c:	e59f1008 	ldr	r1, [pc, #8]	; 233ac <CSocket::CSocket(CSocket&, int)+0x94>
   233a0:	e59f000c 	ldr	r0, [pc, #12]	; 233b4 <CSocket::CSocket(CSocket&, int)+0x9c>
   233a4:	eb000519 	bl	24810 <assertion_failed>
   233a8:	000449f0 	.word	0x000449f0
   233ac:	00044a24 	.word	0x00044a24
   233b0:	00043a48 	.word	0x00043a48
   233b4:	00044a30 	.word	0x00044a30

000233b8 <CSocket::Accept(CIPAddress*, unsigned short*)>:
   233b8:	e590301c 	ldr	r3, [r0, #28]
   233bc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   233c0:	e3530000 	cmp	r3, #0
   233c4:	0a000048 	beq	234ec <CSocket::Accept(CIPAddress*, unsigned short*)+0x134>
   233c8:	e1d041b4 	ldrh	r4, [r0, #20]
   233cc:	e3540000 	cmp	r4, #0
   233d0:	0a00003f 	beq	234d4 <CSocket::Accept(CIPAddress*, unsigned short*)+0x11c>
   233d4:	e1a06000 	mov	r6, r0
   233d8:	e590000c 	ldr	r0, [r0, #12]
   233dc:	e1a0a002 	mov	sl, r2
   233e0:	e3500000 	cmp	r0, #0
   233e4:	e1a09001 	mov	r9, r1
   233e8:	0a000042 	beq	234f8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x140>
   233ec:	e3530020 	cmp	r3, #32
   233f0:	8a000044 	bhi	23508 <CSocket::Accept(CIPAddress*, unsigned short*)+0x150>
   233f4:	e3a08020 	mov	r8, #32
   233f8:	e3e05102 	mvn	r5, #-2147483648	; 0x80000000
   233fc:	e3a04000 	mov	r4, #0
   23400:	e286701c 	add	r7, r6, #28
   23404:	ea000008 	b	2342c <CSocket::Accept(CIPAddress*, unsigned short*)+0x74>
   23408:	e5b73004 	ldr	r3, [r7, #4]!
   2340c:	e596201c 	ldr	r2, [r6, #28]
   23410:	e1530005 	cmp	r3, r5
   23414:	b1a08004 	movlt	r8, r4
   23418:	e2844001 	add	r4, r4, #1
   2341c:	b1a05003 	movlt	r5, r3
   23420:	e1520004 	cmp	r2, r4
   23424:	9a000007 	bls	23448 <CSocket::Accept(CIPAddress*, unsigned short*)+0x90>
   23428:	e596000c 	ldr	r0, [r6, #12]
   2342c:	e5971004 	ldr	r1, [r7, #4]
   23430:	ebffdc48 	bl	1a558 <CTransportLayer::IsConnected(int) const>
   23434:	e3500000 	cmp	r0, #0
   23438:	0afffff2 	beq	23408 <CSocket::Accept(CIPAddress*, unsigned short*)+0x50>
   2343c:	e1a08004 	mov	r8, r4
   23440:	e2843008 	add	r3, r4, #8
   23444:	e7965103 	ldr	r5, [r6, r3, lsl #2]
   23448:	e1e03005 	mvn	r3, r5
   2344c:	e3750106 	cmn	r5, #-2147483647	; 0x80000001
   23450:	e1a03fa3 	lsr	r3, r3, #31
   23454:	03a03000 	moveq	r3, #0
   23458:	e3530000 	cmp	r3, #0
   2345c:	0a00002d 	beq	23518 <CSocket::Accept(CIPAddress*, unsigned short*)+0x160>
   23460:	e596301c 	ldr	r3, [r6, #28]
   23464:	e1530008 	cmp	r3, r8
   23468:	9a00002e 	bls	23528 <CSocket::Accept(CIPAddress*, unsigned short*)+0x170>
   2346c:	e3590000 	cmp	r9, #0
   23470:	0a000019 	beq	234dc <CSocket::Accept(CIPAddress*, unsigned short*)+0x124>
   23474:	e35a0000 	cmp	sl, #0
   23478:	0a000032 	beq	23548 <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   2347c:	e1a0200a 	mov	r2, sl
   23480:	e1a01009 	mov	r1, r9
   23484:	e1a03005 	mov	r3, r5
   23488:	e596000c 	ldr	r0, [r6, #12]
   2348c:	ebffdaf6 	bl	1a06c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>
   23490:	e3500000 	cmp	r0, #0
   23494:	b3a04000 	movlt	r4, #0
   23498:	ba000005 	blt	234b4 <CSocket::Accept(CIPAddress*, unsigned short*)+0xfc>
   2349c:	e3a000a0 	mov	r0, #160	; 0xa0
   234a0:	eb001ef7 	bl	2b084 <operator new(unsigned int)>
   234a4:	e1a02005 	mov	r2, r5
   234a8:	e1a01006 	mov	r1, r6
   234ac:	e1a04000 	mov	r4, r0
   234b0:	ebffff98 	bl	23318 <CSocket::CSocket(CSocket&, int)>
   234b4:	e5962010 	ldr	r2, [r6, #16]
   234b8:	e1d611b4 	ldrh	r1, [r6, #20]
   234bc:	e596000c 	ldr	r0, [r6, #12]
   234c0:	ebffda8d 	bl	19efc <CTransportLayer::Listen(unsigned short, int)>
   234c4:	e2888008 	add	r8, r8, #8
   234c8:	e3500000 	cmp	r0, #0
   234cc:	e7860108 	str	r0, [r6, r8, lsl #2]
   234d0:	ba000018 	blt	23538 <CSocket::Accept(CIPAddress*, unsigned short*)+0x180>
   234d4:	e1a00004 	mov	r0, r4
   234d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   234dc:	e3a020d0 	mov	r2, #208	; 0xd0
   234e0:	e59f1070 	ldr	r1, [pc, #112]	; 23558 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   234e4:	e59f0070 	ldr	r0, [pc, #112]	; 2355c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a4>
   234e8:	eb0004c8 	bl	24810 <assertion_failed>
   234ec:	e1a04003 	mov	r4, r3
   234f0:	e1a00004 	mov	r0, r4
   234f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   234f8:	e3a020b3 	mov	r2, #179	; 0xb3
   234fc:	e59f1054 	ldr	r1, [pc, #84]	; 23558 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   23500:	e59f0058 	ldr	r0, [pc, #88]	; 23560 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a8>
   23504:	eb0004c1 	bl	24810 <assertion_failed>
   23508:	e3a020b4 	mov	r2, #180	; 0xb4
   2350c:	e59f1044 	ldr	r1, [pc, #68]	; 23558 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   23510:	e59f004c 	ldr	r0, [pc, #76]	; 23564 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1ac>
   23514:	eb0004bd 	bl	24810 <assertion_failed>
   23518:	e3a020cb 	mov	r2, #203	; 0xcb
   2351c:	e59f1034 	ldr	r1, [pc, #52]	; 23558 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   23520:	e59f0040 	ldr	r0, [pc, #64]	; 23568 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1b0>
   23524:	eb0004b9 	bl	24810 <assertion_failed>
   23528:	e3a020cc 	mov	r2, #204	; 0xcc
   2352c:	e59f1024 	ldr	r1, [pc, #36]	; 23558 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   23530:	e59f0034 	ldr	r0, [pc, #52]	; 2356c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1b4>
   23534:	eb0004b5 	bl	24810 <assertion_failed>
   23538:	e3a020dc 	mov	r2, #220	; 0xdc
   2353c:	e59f1014 	ldr	r1, [pc, #20]	; 23558 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   23540:	e59f0028 	ldr	r0, [pc, #40]	; 23570 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1b8>
   23544:	eb0004b1 	bl	24810 <assertion_failed>
   23548:	e3a020d1 	mov	r2, #209	; 0xd1
   2354c:	e59f1004 	ldr	r1, [pc, #4]	; 23558 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   23550:	e59f001c 	ldr	r0, [pc, #28]	; 23574 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1bc>
   23554:	eb0004ad 	bl	24810 <assertion_failed>
   23558:	00044a24 	.word	0x00044a24
   2355c:	00043aa0 	.word	0x00043aa0
   23560:	00044a30 	.word	0x00044a30
   23564:	00044ad8 	.word	0x00044ad8
   23568:	00044a74 	.word	0x00044a74
   2356c:	00044aa0 	.word	0x00044aa0
   23570:	00044ab4 	.word	0x00044ab4
   23574:	00043ab0 	.word	0x00043ab0

00023578 <CNetSocket::Connect(char const*, char const*)>:
   23578:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2357c:	e2516000 	subs	r6, r1, #0
   23580:	e24dd01c 	sub	sp, sp, #28
   23584:	0a000038 	beq	2366c <CNetSocket::Connect(char const*, char const*)+0xf4>
   23588:	e3520000 	cmp	r2, #0
   2358c:	e1a05002 	mov	r5, r2
   23590:	0a000039 	beq	2367c <CNetSocket::Connect(char const*, char const*)+0x104>
   23594:	e3a03000 	mov	r3, #0
   23598:	e28d1018 	add	r1, sp, #24
   2359c:	e5213010 	str	r3, [r1, #-16]!
   235a0:	e1a04000 	mov	r4, r0
   235a4:	e3a0200a 	mov	r2, #10
   235a8:	e1a00005 	mov	r0, r5
   235ac:	eb001c03 	bl	2a5c0 <strtoul>
   235b0:	e59d3008 	ldr	r3, [sp, #8]
   235b4:	e1a07000 	mov	r7, r0
   235b8:	e3530000 	cmp	r3, #0
   235bc:	0a000002 	beq	235cc <CNetSocket::Connect(char const*, char const*)+0x54>
   235c0:	e1d330d0 	ldrsb	r3, [r3]
   235c4:	e3530000 	cmp	r3, #0
   235c8:	1a000033 	bne	2369c <CNetSocket::Connect(char const*, char const*)+0x124>
   235cc:	e59f30e8 	ldr	r3, [pc, #232]	; 236bc <CNetSocket::Connect(char const*, char const*)+0x144>
   235d0:	e2472001 	sub	r2, r7, #1
   235d4:	e1520003 	cmp	r2, r3
   235d8:	8a00002f 	bhi	2369c <CNetSocket::Connect(char const*, char const*)+0x124>
   235dc:	e5943004 	ldr	r3, [r4, #4]
   235e0:	e3530000 	cmp	r3, #0
   235e4:	0a000028 	beq	2368c <CNetSocket::Connect(char const*, char const*)+0x114>
   235e8:	e28d0010 	add	r0, sp, #16
   235ec:	ebfff5ea 	bl	20d9c <CIPAddress::CIPAddress()>
   235f0:	e5941004 	ldr	r1, [r4, #4]
   235f4:	e28d000c 	add	r0, sp, #12
   235f8:	eb000063 	bl	2378c <CDNSClient::CDNSClient(CNetSubSystem*)>
   235fc:	e28d2010 	add	r2, sp, #16
   23600:	e1a01006 	mov	r1, r6
   23604:	e28d000c 	add	r0, sp, #12
   23608:	eb0000b3 	bl	238dc <CDNSClient::Resolve(char const*, CIPAddress*)>
   2360c:	e3500000 	cmp	r0, #0
   23610:	0a00000d 	beq	2364c <CNetSocket::Connect(char const*, char const*)+0xd4>
   23614:	e5943000 	ldr	r3, [r4]
   23618:	e1a00004 	mov	r0, r4
   2361c:	e6ff2077 	uxth	r2, r7
   23620:	e593300c 	ldr	r3, [r3, #12]
   23624:	e28d1010 	add	r1, sp, #16
   23628:	e12fff33 	blx	r3
   2362c:	e1a04000 	mov	r4, r0
   23630:	e28d000c 	add	r0, sp, #12
   23634:	eb00005f 	bl	237b8 <CDNSClient::~CDNSClient()>
   23638:	e28d0010 	add	r0, sp, #16
   2363c:	ebfff5ec 	bl	20df4 <CIPAddress::~CIPAddress()>
   23640:	e1a00004 	mov	r0, r4
   23644:	e28dd01c 	add	sp, sp, #28
   23648:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2364c:	eb000d62 	bl	26bdc <CLogger::Get()>
   23650:	e58d6000 	str	r6, [sp]
   23654:	e59f3064 	ldr	r3, [pc, #100]	; 236c0 <CNetSocket::Connect(char const*, char const*)+0x148>
   23658:	e3a02004 	mov	r2, #4
   2365c:	e59f1060 	ldr	r1, [pc, #96]	; 236c4 <CNetSocket::Connect(char const*, char const*)+0x14c>
   23660:	eb000c9a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23664:	e3e04000 	mvn	r4, #0
   23668:	eafffff0 	b	23630 <CNetSocket::Connect(char const*, char const*)+0xb8>
   2366c:	e3a0202a 	mov	r2, #42	; 0x2a
   23670:	e59f1050 	ldr	r1, [pc, #80]	; 236c8 <CNetSocket::Connect(char const*, char const*)+0x150>
   23674:	e59f0050 	ldr	r0, [pc, #80]	; 236cc <CNetSocket::Connect(char const*, char const*)+0x154>
   23678:	eb000464 	bl	24810 <assertion_failed>
   2367c:	e3a0202b 	mov	r2, #43	; 0x2b
   23680:	e59f1040 	ldr	r1, [pc, #64]	; 236c8 <CNetSocket::Connect(char const*, char const*)+0x150>
   23684:	e59f0044 	ldr	r0, [pc, #68]	; 236d0 <CNetSocket::Connect(char const*, char const*)+0x158>
   23688:	eb000460 	bl	24810 <assertion_failed>
   2368c:	e3a02037 	mov	r2, #55	; 0x37
   23690:	e59f1030 	ldr	r1, [pc, #48]	; 236c8 <CNetSocket::Connect(char const*, char const*)+0x150>
   23694:	e59f0038 	ldr	r0, [pc, #56]	; 236d4 <CNetSocket::Connect(char const*, char const*)+0x15c>
   23698:	eb00045c 	bl	24810 <assertion_failed>
   2369c:	eb000d4e 	bl	26bdc <CLogger::Get()>
   236a0:	e58d5000 	str	r5, [sp]
   236a4:	e59f302c 	ldr	r3, [pc, #44]	; 236d8 <CNetSocket::Connect(char const*, char const*)+0x160>
   236a8:	e3a02004 	mov	r2, #4
   236ac:	e59f1010 	ldr	r1, [pc, #16]	; 236c4 <CNetSocket::Connect(char const*, char const*)+0x14c>
   236b0:	eb000c86 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   236b4:	e3e04000 	mvn	r4, #0
   236b8:	eaffffe0 	b	23640 <CNetSocket::Connect(char const*, char const*)+0xc8>
   236bc:	0000fffe 	.word	0x0000fffe
   236c0:	00044b7c 	.word	0x00044b7c
   236c4:	00044b00 	.word	0x00044b00
   236c8:	00044b48 	.word	0x00044b48
   236cc:	00040c6c 	.word	0x00040c6c
   236d0:	00044b58 	.word	0x00044b58
   236d4:	00043a1c 	.word	0x00043a1c
   236d8:	00044b64 	.word	0x00044b64

000236dc <CNetSocket::CNetSocket(CNetSubSystem*)>:
   236dc:	e59f2024 	ldr	r2, [pc, #36]	; 23708 <CNetSocket::CNetSocket(CNetSubSystem*)+0x2c>
   236e0:	e3510000 	cmp	r1, #0
   236e4:	e5801004 	str	r1, [r0, #4]
   236e8:	e5802000 	str	r2, [r0]
   236ec:	0a000000 	beq	236f4 <CNetSocket::CNetSocket(CNetSubSystem*)+0x18>
   236f0:	e12fff1e 	bx	lr
   236f4:	e92d4010 	push	{r4, lr}
   236f8:	e3a02020 	mov	r2, #32
   236fc:	e59f1008 	ldr	r1, [pc, #8]	; 2370c <CNetSocket::CNetSocket(CNetSubSystem*)+0x30>
   23700:	e59f0008 	ldr	r0, [pc, #8]	; 23710 <CNetSocket::CNetSocket(CNetSubSystem*)+0x34>
   23704:	eb000441 	bl	24810 <assertion_failed>
   23708:	00044b14 	.word	0x00044b14
   2370c:	00044b48 	.word	0x00044b48
   23710:	00043a1c 	.word	0x00043a1c

00023714 <CNetSocket::~CNetSocket()>:
   23714:	e12fff1e 	bx	lr

00023718 <CNetSocket::~CNetSocket()>:
   23718:	e92d4010 	push	{r4, lr}
   2371c:	e1a04000 	mov	r4, r0
   23720:	e3a01008 	mov	r1, #8
   23724:	eb001e64 	bl	2b0bc <operator delete(void*, unsigned int)>
   23728:	e1a00004 	mov	r0, r4
   2372c:	e8bd8010 	pop	{r4, pc}

00023730 <CNetSocket::GetNetSubSystem()>:
   23730:	e5900004 	ldr	r0, [r0, #4]
   23734:	e3500000 	cmp	r0, #0
   23738:	0a000000 	beq	23740 <CNetSocket::GetNetSubSystem()+0x10>
   2373c:	e12fff1e 	bx	lr
   23740:	e92d4010 	push	{r4, lr}
   23744:	e3a02046 	mov	r2, #70	; 0x46
   23748:	e59f1004 	ldr	r1, [pc, #4]	; 23754 <CNetSocket::GetNetSubSystem()+0x24>
   2374c:	e59f0004 	ldr	r0, [pc, #4]	; 23758 <CNetSocket::GetNetSubSystem()+0x28>
   23750:	eb00042e 	bl	24810 <assertion_failed>
   23754:	00044b48 	.word	0x00044b48
   23758:	00043a1c 	.word	0x00043a1c

0002375c <CNetSocket::Bind(unsigned short)>:
   2375c:	e3e00000 	mvn	r0, #0
   23760:	e12fff1e 	bx	lr

00023764 <CNetSocket::Listen(unsigned int)>:
   23764:	e3e00000 	mvn	r0, #0
   23768:	e12fff1e 	bx	lr

0002376c <CNetSocket::Accept(CIPAddress*, unsigned short*)>:
   2376c:	e3a00000 	mov	r0, #0
   23770:	e12fff1e 	bx	lr

00023774 <CNetSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   23774:	e3e00000 	mvn	r0, #0
   23778:	e12fff1e 	bx	lr

0002377c <CNetSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   2377c:	e3e00000 	mvn	r0, #0
   23780:	e12fff1e 	bx	lr

00023784 <CNetSocket::SetOptionBroadcast(bool)>:
   23784:	e3e00000 	mvn	r0, #0
   23788:	e12fff1e 	bx	lr

0002378c <CDNSClient::CDNSClient(CNetSubSystem*)>:
   2378c:	e3510000 	cmp	r1, #0
   23790:	e5801000 	str	r1, [r0]
   23794:	0a000000 	beq	2379c <CDNSClient::CDNSClient(CNetSubSystem*)+0x10>
   23798:	e12fff1e 	bx	lr
   2379c:	e92d4010 	push	{r4, lr}
   237a0:	e3a02056 	mov	r2, #86	; 0x56
   237a4:	e59f1004 	ldr	r1, [pc, #4]	; 237b0 <CDNSClient::CDNSClient(CNetSubSystem*)+0x24>
   237a8:	e59f0004 	ldr	r0, [pc, #4]	; 237b4 <CDNSClient::CDNSClient(CNetSubSystem*)+0x28>
   237ac:	eb000417 	bl	24810 <assertion_failed>
   237b0:	00044b90 	.word	0x00044b90
   237b4:	00043a1c 	.word	0x00043a1c

000237b8 <CDNSClient::~CDNSClient()>:
   237b8:	e12fff1e 	bx	lr

000237bc <CDNSClient::ConvertIPString(char const*, CIPAddress*)>:
   237bc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   237c0:	e3a04000 	mov	r4, #0
   237c4:	e1a00001 	mov	r0, r1
   237c8:	e1a05004 	mov	r5, r4
   237cc:	e24dd00c 	sub	sp, sp, #12
   237d0:	e3500000 	cmp	r0, #0
   237d4:	e1a07002 	mov	r7, r2
   237d8:	e3a0600a 	mov	r6, #10
   237dc:	e58d5004 	str	r5, [sp, #4]
   237e0:	0a000013 	beq	23834 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x78>
   237e4:	e1a02006 	mov	r2, r6
   237e8:	e28d1004 	add	r1, sp, #4
   237ec:	eb001b73 	bl	2a5c0 <strtoul>
   237f0:	e3540003 	cmp	r4, #3
   237f4:	e1a03000 	mov	r3, r0
   237f8:	0a000014 	beq	23850 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x94>
   237fc:	e59d0004 	ldr	r0, [sp, #4]
   23800:	e3500000 	cmp	r0, #0
   23804:	0a00000e 	beq	23844 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   23808:	e1d020d0 	ldrsb	r2, [r0]
   2380c:	e352002e 	cmp	r2, #46	; 0x2e
   23810:	1a00000b 	bne	23844 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   23814:	e35300ff 	cmp	r3, #255	; 0xff
   23818:	8a000009 	bhi	23844 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   2381c:	e2800001 	add	r0, r0, #1
   23820:	e3500000 	cmp	r0, #0
   23824:	e7cd3004 	strb	r3, [sp, r4]
   23828:	e58d5004 	str	r5, [sp, #4]
   2382c:	e2844001 	add	r4, r4, #1
   23830:	1affffeb 	bne	237e4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x28>
   23834:	e59f2084 	ldr	r2, [pc, #132]	; 238c0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x104>
   23838:	e59f1084 	ldr	r1, [pc, #132]	; 238c4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   2383c:	e59f0084 	ldr	r0, [pc, #132]	; 238c8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x10c>
   23840:	eb0003f2 	bl	24810 <assertion_failed>
   23844:	e3a00000 	mov	r0, #0
   23848:	e28dd00c 	add	sp, sp, #12
   2384c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   23850:	e59d2004 	ldr	r2, [sp, #4]
   23854:	e3520000 	cmp	r2, #0
   23858:	0a000011 	beq	238a4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   2385c:	e1d220d0 	ldrsb	r2, [r2]
   23860:	e3520000 	cmp	r2, #0
   23864:	1afffff6 	bne	23844 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   23868:	e35000ff 	cmp	r0, #255	; 0xff
   2386c:	8afffff4 	bhi	23844 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   23870:	e3570000 	cmp	r7, #0
   23874:	e5cd3003 	strb	r3, [sp, #3]
   23878:	0a000005 	beq	23894 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xd8>
   2387c:	e1a00007 	mov	r0, r7
   23880:	e1a0100d 	mov	r1, sp
   23884:	ebfff5cb 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   23888:	e3a00001 	mov	r0, #1
   2388c:	e28dd00c 	add	sp, sp, #12
   23890:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   23894:	e59f2030 	ldr	r2, [pc, #48]	; 238cc <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x110>
   23898:	e59f1024 	ldr	r1, [pc, #36]	; 238c4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   2389c:	e59f002c 	ldr	r0, [pc, #44]	; 238d0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x114>
   238a0:	eb0003da 	bl	24810 <assertion_failed>
   238a4:	e35000ff 	cmp	r0, #255	; 0xff
   238a8:	8affffe5 	bhi	23844 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   238ac:	e59f2020 	ldr	r2, [pc, #32]	; 238d4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x118>
   238b0:	e59f100c 	ldr	r1, [pc, #12]	; 238c4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   238b4:	e59f001c 	ldr	r0, [pc, #28]	; 238d8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x11c>
   238b8:	e5cd3003 	strb	r3, [sp, #3]
   238bc:	eb0003d3 	bl	24810 <assertion_failed>
   238c0:	0000011a 	.word	0x0000011a
   238c4:	00044b90 	.word	0x00044b90
   238c8:	00044ba0 	.word	0x00044ba0
   238cc:	00000139 	.word	0x00000139
   238d0:	00044bb0 	.word	0x00044bb0
   238d4:	00000135 	.word	0x00000135
   238d8:	00044bc0 	.word	0x00044bc0

000238dc <CDNSClient::Resolve(char const*, CIPAddress*)>:
   238dc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238e0:	e24ddd17 	sub	sp, sp, #1472	; 0x5c0
   238e4:	e24dd00c 	sub	sp, sp, #12
   238e8:	e2518000 	subs	r8, r1, #0
   238ec:	e58d2000 	str	r2, [sp]
   238f0:	0a000063 	beq	23a84 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1a8>
   238f4:	e5d83000 	ldrb	r3, [r8]
   238f8:	e1a04000 	mov	r4, r0
   238fc:	e2433031 	sub	r3, r3, #49	; 0x31
   23900:	e3530008 	cmp	r3, #8
   23904:	9a000057 	bls	23a68 <CDNSClient::Resolve(char const*, CIPAddress*)+0x18c>
   23908:	e5940000 	ldr	r0, [r4]
   2390c:	e3500000 	cmp	r0, #0
   23910:	0a00005f 	beq	23a94 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1b8>
   23914:	ebffd79c 	bl	1978c <CNetSubSystem::GetConfig()>
   23918:	ebfff4cb 	bl	20c4c <CNetConfig::GetDNSServer() const>
   2391c:	ebfff5da 	bl	2108c <CIPAddress::Get() const>
   23920:	e1a01000 	mov	r1, r0
   23924:	e28d0010 	add	r0, sp, #16
   23928:	ebfff5b2 	bl	20ff8 <CIPAddress::CIPAddress(unsigned char const*)>
   2392c:	e28d0010 	add	r0, sp, #16
   23930:	ebfff5f8 	bl	21118 <CIPAddress::IsNull() const>
   23934:	e2505000 	subs	r5, r0, #0
   23938:	0a000006 	beq	23958 <CDNSClient::Resolve(char const*, CIPAddress*)+0x7c>
   2393c:	e3a05000 	mov	r5, #0
   23940:	e28d0010 	add	r0, sp, #16
   23944:	ebfff52a 	bl	20df4 <CIPAddress::~CIPAddress()>
   23948:	e1a00005 	mov	r0, r5
   2394c:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   23950:	e28dd00c 	add	sp, sp, #12
   23954:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23958:	e5941000 	ldr	r1, [r4]
   2395c:	e3a02011 	mov	r2, #17
   23960:	e28d0028 	add	r0, sp, #40	; 0x28
   23964:	ebfffe45 	bl	23280 <CSocket::CSocket(CNetSubSystem*, int)>
   23968:	e28d0028 	add	r0, sp, #40	; 0x28
   2396c:	e3a02035 	mov	r2, #53	; 0x35
   23970:	e28d1010 	add	r1, sp, #16
   23974:	ebfffcbf 	bl	22c78 <CSocket::Connect(CIPAddress&, unsigned short)>
   23978:	e3500000 	cmp	r0, #0
   2397c:	1a000036 	bne	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23980:	e28d4f72 	add	r4, sp, #456	; 0x1c8
   23984:	e3a02c02 	mov	r2, #512	; 0x200
   23988:	e1a01005 	mov	r1, r5
   2398c:	e1a00004 	mov	r0, r4
   23990:	eb00196b 	bl	29f44 <memset>
   23994:	e3a02001 	mov	r2, #1
   23998:	e3a00c01 	mov	r0, #256	; 0x100
   2399c:	e59f3338 	ldr	r3, [pc, #824]	; 23cdc <CDNSClient::Resolve(char const*, CIPAddress*)+0x400>
   239a0:	e1c420b2 	strh	r2, [r4, #2]
   239a4:	e1d360b0 	ldrh	r6, [r3]
   239a8:	e1a01008 	mov	r1, r8
   239ac:	e0862002 	add	r2, r6, r2
   239b0:	e6bf6fb6 	rev16	r6, r6
   239b4:	e1c320b0 	strh	r2, [r3]
   239b8:	e1c400b4 	strh	r0, [r4, #4]
   239bc:	e6ff3076 	uxth	r3, r6
   239c0:	e3a020ff 	mov	r2, #255	; 0xff
   239c4:	e1c460b0 	strh	r6, [r4]
   239c8:	e28d00c8 	add	r0, sp, #200	; 0xc8
   239cc:	e58d3004 	str	r3, [sp, #4]
   239d0:	eb001a76 	bl	2a3b0 <strncpy>
   239d4:	e28d00c8 	add	r0, sp, #200	; 0xc8
   239d8:	e28d2008 	add	r2, sp, #8
   239dc:	e59f12fc 	ldr	r1, [pc, #764]	; 23ce0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x404>
   239e0:	e5cd51c7 	strb	r5, [sp, #455]	; 0x1c7
   239e4:	eb001ac2 	bl	2a4f4 <strtok_r>
   239e8:	e2506000 	subs	r6, r0, #0
   239ec:	028d9f75 	addeq	r9, sp, #468	; 0x1d4
   239f0:	0a00002b 	beq	23aa4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1c8>
   239f4:	e1a0b005 	mov	fp, r5
   239f8:	e59fa2e0 	ldr	sl, [pc, #736]	; 23ce0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x404>
   239fc:	e28d9f75 	add	r9, sp, #468	; 0x1d4
   23a00:	ea000010 	b	23a48 <CDNSClient::Resolve(char const*, CIPAddress*)+0x16c>
   23a04:	e0493004 	sub	r3, r9, r4
   23a08:	e2633c02 	rsb	r3, r3, #512	; 0x200
   23a0c:	e2802002 	add	r2, r0, #2
   23a10:	e1520003 	cmp	r2, r3
   23a14:	aa000010 	bge	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23a18:	e2898001 	add	r8, r9, #1
   23a1c:	e5c90000 	strb	r0, [r9]
   23a20:	e1a01006 	mov	r1, r6
   23a24:	e1a00008 	mov	r0, r8
   23a28:	eb001a55 	bl	2a384 <strcpy>
   23a2c:	e28d2008 	add	r2, sp, #8
   23a30:	e1a0100a 	mov	r1, sl
   23a34:	e1a0000b 	mov	r0, fp
   23a38:	eb001aad 	bl	2a4f4 <strtok_r>
   23a3c:	e2506000 	subs	r6, r0, #0
   23a40:	e0889007 	add	r9, r8, r7
   23a44:	0a000016 	beq	23aa4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1c8>
   23a48:	e1a00006 	mov	r0, r6
   23a4c:	eb00198e 	bl	2a08c <strlen>
   23a50:	e35000ff 	cmp	r0, #255	; 0xff
   23a54:	e1a07000 	mov	r7, r0
   23a58:	9affffe9 	bls	23a04 <CDNSClient::Resolve(char const*, CIPAddress*)+0x128>
   23a5c:	e28d0028 	add	r0, sp, #40	; 0x28
   23a60:	ebfffcf7 	bl	22e44 <CSocket::~CSocket()>
   23a64:	eaffffb5 	b	23940 <CDNSClient::Resolve(char const*, CIPAddress*)+0x64>
   23a68:	ebffff53 	bl	237bc <CDNSClient::ConvertIPString(char const*, CIPAddress*)>
   23a6c:	e2505000 	subs	r5, r0, #0
   23a70:	0affffa4 	beq	23908 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2c>
   23a74:	e1a00005 	mov	r0, r5
   23a78:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   23a7c:	e28dd00c 	add	sp, sp, #12
   23a80:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a84:	e3a02060 	mov	r2, #96	; 0x60
   23a88:	e59f1254 	ldr	r1, [pc, #596]	; 23ce4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   23a8c:	e59f0254 	ldr	r0, [pc, #596]	; 23ce8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x40c>
   23a90:	eb00035e 	bl	24810 <assertion_failed>
   23a94:	e3a0206a 	mov	r2, #106	; 0x6a
   23a98:	e59f1244 	ldr	r1, [pc, #580]	; 23ce4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   23a9c:	e59f0248 	ldr	r0, [pc, #584]	; 23cec <CDNSClient::Resolve(char const*, CIPAddress*)+0x410>
   23aa0:	eb00035a 	bl	24810 <assertion_failed>
   23aa4:	e3a02c01 	mov	r2, #256	; 0x100
   23aa8:	e3a08000 	mov	r8, #0
   23aac:	e2890001 	add	r0, r9, #1
   23ab0:	e0403004 	sub	r3, r0, r4
   23ab4:	e2633c02 	rsb	r3, r3, #512	; 0x200
   23ab8:	e28d100c 	add	r1, sp, #12
   23abc:	e3530003 	cmp	r3, #3
   23ac0:	e5c98000 	strb	r8, [r9]
   23ac4:	e1cd20bc 	strh	r2, [sp, #12]
   23ac8:	e1c120b2 	strh	r2, [r1, #2]
   23acc:	daffffe2 	ble	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23ad0:	e3a02004 	mov	r2, #4
   23ad4:	e2899005 	add	r9, r9, #5
   23ad8:	eb001b90 	bl	2a920 <memcpy>
   23adc:	e0493004 	sub	r3, r9, r4
   23ae0:	e3530c02 	cmp	r3, #512	; 0x200
   23ae4:	ca000053 	bgt	23c38 <CDNSClient::Resolve(char const*, CIPAddress*)+0x35c>
   23ae8:	e1a07008 	mov	r7, r8
   23aec:	e3a0bffa 	mov	fp, #1000	; 0x3e8
   23af0:	e3a08003 	mov	r8, #3
   23af4:	e3a0a040 	mov	sl, #64	; 0x40
   23af8:	e1a06003 	mov	r6, r3
   23afc:	e28d9ff2 	add	r9, sp, #968	; 0x3c8
   23b00:	e1a03007 	mov	r3, r7
   23b04:	e1a02006 	mov	r2, r6
   23b08:	e1a01004 	mov	r1, r4
   23b0c:	e28d0028 	add	r0, sp, #40	; 0x28
   23b10:	ebfffd3a 	bl	23000 <CSocket::Send(void const*, unsigned int, int)>
   23b14:	e1560000 	cmp	r6, r0
   23b18:	1affffcf 	bne	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23b1c:	eb00028d 	bl	24558 <CScheduler::Get()>
   23b20:	e1a0100b 	mov	r1, fp
   23b24:	eb000267 	bl	244c8 <CScheduler::MsSleep(unsigned int)>
   23b28:	e1a0300a 	mov	r3, sl
   23b2c:	e3a02c02 	mov	r2, #512	; 0x200
   23b30:	e1a01009 	mov	r1, r9
   23b34:	e28d0028 	add	r0, sp, #40	; 0x28
   23b38:	ebfffd4d 	bl	23074 <CSocket::Receive(void*, unsigned int, int)>
   23b3c:	e59f31ac 	ldr	r3, [pc, #428]	; 23cf0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x414>
   23b40:	e1500003 	cmp	r0, r3
   23b44:	ca000006 	bgt	23b64 <CDNSClient::Resolve(char const*, CIPAddress*)+0x288>
   23b48:	e3500000 	cmp	r0, #0
   23b4c:	baffffc2 	blt	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23b50:	e3500019 	cmp	r0, #25
   23b54:	ca000006 	bgt	23b74 <CDNSClient::Resolve(char const*, CIPAddress*)+0x298>
   23b58:	e2588001 	subs	r8, r8, #1
   23b5c:	0affffbe 	beq	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23b60:	eaffffe6 	b	23b00 <CDNSClient::Resolve(char const*, CIPAddress*)+0x224>
   23b64:	e3a020ba 	mov	r2, #186	; 0xba
   23b68:	e59f1174 	ldr	r1, [pc, #372]	; 23ce4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   23b6c:	e59f0180 	ldr	r0, [pc, #384]	; 23cf4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x418>
   23b70:	eb000326 	bl	24810 <assertion_failed>
   23b74:	e1d920b0 	ldrh	r2, [r9]
   23b78:	e59d1004 	ldr	r1, [sp, #4]
   23b7c:	e1a03000 	mov	r3, r0
   23b80:	e1520001 	cmp	r2, r1
   23b84:	1affffb4 	bne	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23b88:	e1d910b2 	ldrh	r1, [r9, #2]
   23b8c:	e59f2164 	ldr	r2, [pc, #356]	; 23cf8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x41c>
   23b90:	e0022001 	and	r2, r2, r1
   23b94:	e3520080 	cmp	r2, #128	; 0x80
   23b98:	1affffaf 	bne	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23b9c:	e1d920b4 	ldrh	r2, [r9, #4]
   23ba0:	e3520c01 	cmp	r2, #256	; 0x100
   23ba4:	1affffac 	bne	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23ba8:	e1d920b6 	ldrh	r2, [r9, #6]
   23bac:	e3520000 	cmp	r2, #0
   23bb0:	0affffa9 	beq	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23bb4:	e28d2ff5 	add	r2, sp, #980	; 0x3d4
   23bb8:	ea000004 	b	23bd0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2f4>
   23bbc:	e2811001 	add	r1, r1, #1
   23bc0:	e0822001 	add	r2, r2, r1
   23bc4:	e0421009 	sub	r1, r2, r9
   23bc8:	e1530001 	cmp	r3, r1
   23bcc:	daffffa2 	ble	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23bd0:	e5d21000 	ldrb	r1, [r2]
   23bd4:	e3510000 	cmp	r1, #0
   23bd8:	1afffff7 	bne	23bbc <CDNSClient::Resolve(char const*, CIPAddress*)+0x2e0>
   23bdc:	e2822005 	add	r2, r2, #5
   23be0:	e0421009 	sub	r1, r2, r9
   23be4:	e1530001 	cmp	r3, r1
   23be8:	daffff9b 	ble	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23bec:	e3a0800e 	mov	r8, #14
   23bf0:	e1a07003 	mov	r7, r3
   23bf4:	e243600e 	sub	r6, r3, #14
   23bf8:	e5d23000 	ldrb	r3, [r2]
   23bfc:	e2824001 	add	r4, r2, #1
   23c00:	e20310c0 	and	r1, r3, #192	; 0xc0
   23c04:	e35100c0 	cmp	r1, #192	; 0xc0
   23c08:	02824002 	addeq	r4, r2, #2
   23c0c:	1a000004 	bne	23c24 <CDNSClient::Resolve(char const*, CIPAddress*)+0x348>
   23c10:	ea00000c 	b	23c48 <CDNSClient::Resolve(char const*, CIPAddress*)+0x36c>
   23c14:	e5d43000 	ldrb	r3, [r4]
   23c18:	e2844001 	add	r4, r4, #1
   23c1c:	e3530000 	cmp	r3, #0
   23c20:	0a000008 	beq	23c48 <CDNSClient::Resolve(char const*, CIPAddress*)+0x36c>
   23c24:	e0844003 	add	r4, r4, r3
   23c28:	e0443009 	sub	r3, r4, r9
   23c2c:	e1570003 	cmp	r7, r3
   23c30:	cafffff7 	bgt	23c14 <CDNSClient::Resolve(char const*, CIPAddress*)+0x338>
   23c34:	eaffff88 	b	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23c38:	e3a020a9 	mov	r2, #169	; 0xa9
   23c3c:	e59f10a0 	ldr	r1, [pc, #160]	; 23ce4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   23c40:	e59f00b4 	ldr	r0, [pc, #180]	; 23cfc <CDNSClient::Resolve(char const*, CIPAddress*)+0x420>
   23c44:	eb0002f1 	bl	24810 <assertion_failed>
   23c48:	e0443009 	sub	r3, r4, r9
   23c4c:	e1530006 	cmp	r3, r6
   23c50:	caffff81 	bgt	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23c54:	e1a02008 	mov	r2, r8
   23c58:	e1a01004 	mov	r1, r4
   23c5c:	e28d0018 	add	r0, sp, #24
   23c60:	eb001b2e 	bl	2a920 <memcpy>
   23c64:	e1dd31b8 	ldrh	r3, [sp, #24]
   23c68:	e3530c01 	cmp	r3, #256	; 0x100
   23c6c:	0a000008 	beq	23c94 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3b8>
   23c70:	e1dd22b0 	ldrh	r2, [sp, #32]
   23c74:	e6bf2fb2 	rev16	r2, r2
   23c78:	e6ff2072 	uxth	r2, r2
   23c7c:	e282200a 	add	r2, r2, #10
   23c80:	e0842002 	add	r2, r4, r2
   23c84:	e0423009 	sub	r3, r2, r9
   23c88:	e1570003 	cmp	r7, r3
   23c8c:	caffffd9 	bgt	23bf8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x31c>
   23c90:	eaffff71 	b	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23c94:	e1dd31ba 	ldrh	r3, [sp, #26]
   23c98:	e3530c01 	cmp	r3, #256	; 0x100
   23c9c:	1afffff3 	bne	23c70 <CDNSClient::Resolve(char const*, CIPAddress*)+0x394>
   23ca0:	e1dd32b0 	ldrh	r3, [sp, #32]
   23ca4:	e3530b01 	cmp	r3, #1024	; 0x400
   23ca8:	1afffff0 	bne	23c70 <CDNSClient::Resolve(char const*, CIPAddress*)+0x394>
   23cac:	e59d3000 	ldr	r3, [sp]
   23cb0:	e3530000 	cmp	r3, #0
   23cb4:	0a000004 	beq	23ccc <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f0>
   23cb8:	e28d1022 	add	r1, sp, #34	; 0x22
   23cbc:	e59d0000 	ldr	r0, [sp]
   23cc0:	ebfff4bc 	bl	20fb8 <CIPAddress::Set(unsigned char const*)>
   23cc4:	e3a05001 	mov	r5, #1
   23cc8:	eaffff63 	b	23a5c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23ccc:	e59f202c 	ldr	r2, [pc, #44]	; 23d00 <CDNSClient::Resolve(char const*, CIPAddress*)+0x424>
   23cd0:	e59f100c 	ldr	r1, [pc, #12]	; 23ce4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   23cd4:	e59f0028 	ldr	r0, [pc, #40]	; 23d04 <CDNSClient::Resolve(char const*, CIPAddress*)+0x428>
   23cd8:	eb0002cc 	bl	24810 <assertion_failed>
   23cdc:	000480c0 	.word	0x000480c0
   23ce0:	0003ee00 	.word	0x0003ee00
   23ce4:	00044b90 	.word	0x00044b90
   23ce8:	00044bcc 	.word	0x00044bcc
   23cec:	00043a1c 	.word	0x00043a1c
   23cf0:	000001ff 	.word	0x000001ff
   23cf4:	00044bfc 	.word	0x00044bfc
   23cf8:	00000ffa 	.word	0x00000ffa
   23cfc:	00044bdc 	.word	0x00044bdc
   23d00:	0000010d 	.word	0x0000010d
   23d04:	00044bb0 	.word	0x00044bb0

00023d08 <CTask::Run()>:
   23d08:	e92d4010 	push	{r4, lr}
   23d0c:	e3a0203f 	mov	r2, #63	; 0x3f
   23d10:	e59f1004 	ldr	r1, [pc, #4]	; 23d1c <CTask::Run()+0x14>
   23d14:	e59f0004 	ldr	r0, [pc, #4]	; 23d20 <CTask::Run()+0x18>
   23d18:	eb0002bc 	bl	24810 <assertion_failed>
   23d1c:	00044c34 	.word	0x00044c34
   23d20:	0003fe24 	.word	0x0003fe24

00023d24 <CTask::TaskEntry(void*)>:
   23d24:	e92d4010 	push	{r4, lr}
   23d28:	e2504000 	subs	r4, r0, #0
   23d2c:	0a00000c 	beq	23d64 <CTask::TaskEntry(void*)+0x40>
   23d30:	e5943000 	ldr	r3, [r4]
   23d34:	e5933008 	ldr	r3, [r3, #8]
   23d38:	e12fff33 	blx	r3
   23d3c:	e3a03003 	mov	r3, #3
   23d40:	e28400d4 	add	r0, r4, #212	; 0xd4
   23d44:	e5c43004 	strb	r3, [r4, #4]
   23d48:	eb00022d 	bl	24604 <CSynchronizationEvent::Set()>
   23d4c:	eb000201 	bl	24558 <CScheduler::Get()>
   23d50:	eb00016d 	bl	2430c <CScheduler::Yield()>
   23d54:	e3a0208c 	mov	r2, #140	; 0x8c
   23d58:	e59f1014 	ldr	r1, [pc, #20]	; 23d74 <CTask::TaskEntry(void*)+0x50>
   23d5c:	e59f0014 	ldr	r0, [pc, #20]	; 23d78 <CTask::TaskEntry(void*)+0x54>
   23d60:	eb0002aa 	bl	24810 <assertion_failed>
   23d64:	e3a02084 	mov	r2, #132	; 0x84
   23d68:	e59f1004 	ldr	r1, [pc, #4]	; 23d74 <CTask::TaskEntry(void*)+0x50>
   23d6c:	e59f0008 	ldr	r0, [pc, #8]	; 23d7c <CTask::TaskEntry(void*)+0x58>
   23d70:	eb0002a6 	bl	24810 <assertion_failed>
   23d74:	00044c34 	.word	0x00044c34
   23d78:	0003fe24 	.word	0x0003fe24
   23d7c:	0003f230 	.word	0x0003f230

00023d80 <CTask::~CTask()>:
   23d80:	e5d02004 	ldrb	r2, [r0, #4]
   23d84:	e59f3050 	ldr	r3, [pc, #80]	; 23ddc <CTask::~CTask()+0x5c>
   23d88:	e3520003 	cmp	r2, #3
   23d8c:	e92d4010 	push	{r4, lr}
   23d90:	e5803000 	str	r3, [r0]
   23d94:	1a00000c 	bne	23dcc <CTask::~CTask()+0x4c>
   23d98:	e1a04000 	mov	r4, r0
   23d9c:	e3a03004 	mov	r3, #4
   23da0:	e59000c8 	ldr	r0, [r0, #200]	; 0xc8
   23da4:	e5c43004 	strb	r3, [r4, #4]
   23da8:	e3500000 	cmp	r0, #0
   23dac:	0a000000 	beq	23db4 <CTask::~CTask()+0x34>
   23db0:	eb001cbb 	bl	2b0a4 <operator delete[](void*)>
   23db4:	e3a03000 	mov	r3, #0
   23db8:	e28400d4 	add	r0, r4, #212	; 0xd4
   23dbc:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   23dc0:	eb0001ff 	bl	245c4 <CSynchronizationEvent::~CSynchronizationEvent()>
   23dc4:	e1a00004 	mov	r0, r4
   23dc8:	e8bd8010 	pop	{r4, pc}
   23dcc:	e3a02036 	mov	r2, #54	; 0x36
   23dd0:	e59f1008 	ldr	r1, [pc, #8]	; 23de0 <CTask::~CTask()+0x60>
   23dd4:	e59f0008 	ldr	r0, [pc, #8]	; 23de4 <CTask::~CTask()+0x64>
   23dd8:	eb00028c 	bl	24810 <assertion_failed>
   23ddc:	00044c28 	.word	0x00044c28
   23de0:	00044c34 	.word	0x00044c34
   23de4:	00044c40 	.word	0x00044c40

00023de8 <CTask::~CTask()>:
   23de8:	e92d4010 	push	{r4, lr}
   23dec:	e1a04000 	mov	r4, r0
   23df0:	ebffffe2 	bl	23d80 <CTask::~CTask()>
   23df4:	e1a00004 	mov	r0, r4
   23df8:	e3a010dc 	mov	r1, #220	; 0xdc
   23dfc:	eb001cae 	bl	2b0bc <operator delete(void*, unsigned int)>
   23e00:	e1a00004 	mov	r0, r4
   23e04:	e8bd8010 	pop	{r4, pc}

00023e08 <CTask::Terminate()>:
   23e08:	e1a03000 	mov	r3, r0
   23e0c:	e3a02003 	mov	r2, #3
   23e10:	e92d4010 	push	{r4, lr}
   23e14:	e28000d4 	add	r0, r0, #212	; 0xd4
   23e18:	e5c32004 	strb	r2, [r3, #4]
   23e1c:	eb0001f8 	bl	24604 <CSynchronizationEvent::Set()>
   23e20:	eb0001cc 	bl	24558 <CScheduler::Get()>
   23e24:	eb000138 	bl	2430c <CScheduler::Yield()>
   23e28:	e3a02048 	mov	r2, #72	; 0x48
   23e2c:	e59f1004 	ldr	r1, [pc, #4]	; 23e38 <CTask::Terminate()+0x30>
   23e30:	e59f0004 	ldr	r0, [pc, #4]	; 23e3c <CTask::Terminate()+0x34>
   23e34:	eb000275 	bl	24810 <assertion_failed>
   23e38:	00044c34 	.word	0x00044c34
   23e3c:	0003fe24 	.word	0x0003fe24

00023e40 <CTask::WaitForTermination()>:
   23e40:	e28000d4 	add	r0, r0, #212	; 0xd4
   23e44:	ea0001fc 	b	2463c <CSynchronizationEvent::Wait()>

00023e48 <CTask::SetUserData(void*, unsigned int)>:
   23e48:	e0802102 	add	r2, r0, r2, lsl #2
   23e4c:	e58210cc 	str	r1, [r2, #204]	; 0xcc
   23e50:	e12fff1e 	bx	lr

00023e54 <CTask::GetUserData(unsigned int)>:
   23e54:	e0801101 	add	r1, r0, r1, lsl #2
   23e58:	e59100cc 	ldr	r0, [r1, #204]	; 0xcc
   23e5c:	e12fff1e 	bx	lr

00023e60 <CTask::InitializeRegs()>:
   23e60:	e92d4010 	push	{r4, lr}
   23e64:	e1a04000 	mov	r4, r0
   23e68:	e3a020b8 	mov	r2, #184	; 0xb8
   23e6c:	e280000c 	add	r0, r0, #12
   23e70:	e3a01000 	mov	r1, #0
   23e74:	eb001832 	bl	29f44 <memset>
   23e78:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   23e7c:	e584400c 	str	r4, [r4, #12]
   23e80:	e3530000 	cmp	r3, #0
   23e84:	0a000009 	beq	23eb0 <CTask::InitializeRegs()+0x50>
   23e88:	e3a00101 	mov	r0, #1073741824	; 0x40000000
   23e8c:	e3a01402 	mov	r1, #33554432	; 0x2000000
   23e90:	e594c0c4 	ldr	ip, [r4, #196]	; 0xc4
   23e94:	e59f2024 	ldr	r2, [pc, #36]	; 23ec0 <CTask::InitializeRegs()+0x60>
   23e98:	e083300c 	add	r3, r3, ip
   23e9c:	e584303c 	str	r3, [r4, #60]	; 0x3c
   23ea0:	e5840010 	str	r0, [r4, #16]
   23ea4:	e5841014 	str	r1, [r4, #20]
   23ea8:	e5842040 	str	r2, [r4, #64]	; 0x40
   23eac:	e8bd8010 	pop	{r4, pc}
   23eb0:	e3a02062 	mov	r2, #98	; 0x62
   23eb4:	e59f1008 	ldr	r1, [pc, #8]	; 23ec4 <CTask::InitializeRegs()+0x64>
   23eb8:	e59f0008 	ldr	r0, [pc, #8]	; 23ec8 <CTask::InitializeRegs()+0x68>
   23ebc:	eb000253 	bl	24810 <assertion_failed>
   23ec0:	00023d24 	.word	0x00023d24
   23ec4:	00044c34 	.word	0x00044c34
   23ec8:	00044c60 	.word	0x00044c60

00023ecc <CTask::CTask(unsigned int)>:
   23ecc:	e92d4070 	push	{r4, r5, r6, lr}
   23ed0:	e3a05000 	mov	r5, #0
   23ed4:	e1a04000 	mov	r4, r0
   23ed8:	e59f3080 	ldr	r3, [pc, #128]	; 23f60 <CTask::CTask(unsigned int)+0x94>
   23edc:	e58010c4 	str	r1, [r0, #196]	; 0xc4
   23ee0:	e5803000 	str	r3, [r0]
   23ee4:	e5c05004 	strb	r5, [r0, #4]
   23ee8:	e58050c8 	str	r5, [r0, #200]	; 0xc8
   23eec:	e1a01005 	mov	r1, r5
   23ef0:	e28000d4 	add	r0, r0, #212	; 0xd4
   23ef4:	eb0001ae 	bl	245b4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   23ef8:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   23efc:	e58450cc 	str	r5, [r4, #204]	; 0xcc
   23f00:	e1500005 	cmp	r0, r5
   23f04:	e58450d0 	str	r5, [r4, #208]	; 0xd0
   23f08:	0a000007 	beq	23f2c <CTask::CTask(unsigned int)+0x60>
   23f0c:	e3500b01 	cmp	r0, #1024	; 0x400
   23f10:	3a00000a 	bcc	23f40 <CTask::CTask(unsigned int)+0x74>
   23f14:	e3100003 	tst	r0, #3
   23f18:	1a00000c 	bne	23f50 <CTask::CTask(unsigned int)+0x84>
   23f1c:	eb001c59 	bl	2b088 <operator new[](unsigned int)>
   23f20:	e58400c8 	str	r0, [r4, #200]	; 0xc8
   23f24:	e1a00004 	mov	r0, r4
   23f28:	ebffffcc 	bl	23e60 <CTask::InitializeRegs()>
   23f2c:	eb000189 	bl	24558 <CScheduler::Get()>
   23f30:	e1a01004 	mov	r1, r4
   23f34:	eb000054 	bl	2408c <CScheduler::AddTask(CTask*)>
   23f38:	e1a00004 	mov	r0, r4
   23f3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23f40:	e3a02025 	mov	r2, #37	; 0x25
   23f44:	e59f1018 	ldr	r1, [pc, #24]	; 23f64 <CTask::CTask(unsigned int)+0x98>
   23f48:	e59f0018 	ldr	r0, [pc, #24]	; 23f68 <CTask::CTask(unsigned int)+0x9c>
   23f4c:	eb00022f 	bl	24810 <assertion_failed>
   23f50:	e3a02027 	mov	r2, #39	; 0x27
   23f54:	e59f1008 	ldr	r1, [pc, #8]	; 23f64 <CTask::CTask(unsigned int)+0x98>
   23f58:	e59f000c 	ldr	r0, [pc, #12]	; 23f6c <CTask::CTask(unsigned int)+0xa0>
   23f5c:	eb00022b 	bl	24810 <assertion_failed>
   23f60:	00044c28 	.word	0x00044c28
   23f64:	00044c34 	.word	0x00044c34
   23f68:	00044c70 	.word	0x00044c70
   23f6c:	00044c88 	.word	0x00044c88

00023f70 <CScheduler::CScheduler()>:
   23f70:	e3a03000 	mov	r3, #0
   23f74:	e59f2058 	ldr	r2, [pc, #88]	; 23fd4 <CScheduler::CScheduler()+0x64>
   23f78:	e92d4070 	push	{r4, r5, r6, lr}
   23f7c:	e5925000 	ldr	r5, [r2]
   23f80:	e5803050 	str	r3, [r0, #80]	; 0x50
   23f84:	e1550003 	cmp	r5, r3
   23f88:	e5803054 	str	r3, [r0, #84]	; 0x54
   23f8c:	e5803058 	str	r3, [r0, #88]	; 0x58
   23f90:	e580305c 	str	r3, [r0, #92]	; 0x5c
   23f94:	e5803060 	str	r3, [r0, #96]	; 0x60
   23f98:	1a000009 	bne	23fc4 <CScheduler::CScheduler()+0x54>
   23f9c:	e1a04000 	mov	r4, r0
   23fa0:	e3a000dc 	mov	r0, #220	; 0xdc
   23fa4:	e5824000 	str	r4, [r2]
   23fa8:	eb001c35 	bl	2b084 <operator new(unsigned int)>
   23fac:	e1a06000 	mov	r6, r0
   23fb0:	e1a01005 	mov	r1, r5
   23fb4:	ebffffc4 	bl	23ecc <CTask::CTask(unsigned int)>
   23fb8:	e5846054 	str	r6, [r4, #84]	; 0x54
   23fbc:	e1a00004 	mov	r0, r4
   23fc0:	e8bd8070 	pop	{r4, r5, r6, pc}
   23fc4:	e3a02024 	mov	r2, #36	; 0x24
   23fc8:	e59f1008 	ldr	r1, [pc, #8]	; 23fd8 <CScheduler::CScheduler()+0x68>
   23fcc:	e59f0008 	ldr	r0, [pc, #8]	; 23fdc <CScheduler::CScheduler()+0x6c>
   23fd0:	eb00020e 	bl	24810 <assertion_failed>
   23fd4:	0004e208 	.word	0x0004e208
   23fd8:	00044ca8 	.word	0x00044ca8
   23fdc:	000439b4 	.word	0x000439b4

00023fe0 <CScheduler::~CScheduler()>:
   23fe0:	e3a02000 	mov	r2, #0
   23fe4:	e59f3004 	ldr	r3, [pc, #4]	; 23ff0 <CScheduler::~CScheduler()+0x10>
   23fe8:	e5832000 	str	r2, [r3]
   23fec:	e12fff1e 	bx	lr
   23ff0:	0004e208 	.word	0x0004e208

00023ff4 <CScheduler::GetCurrentTask()>:
   23ff4:	e5900054 	ldr	r0, [r0, #84]	; 0x54
   23ff8:	e12fff1e 	bx	lr

00023ffc <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))>:
   23ffc:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
   24000:	e92d4010 	push	{r4, lr}
   24004:	e3530000 	cmp	r3, #0
   24008:	1a000006 	bne	24028 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x2c>
   2400c:	e3510000 	cmp	r1, #0
   24010:	e580105c 	str	r1, [r0, #92]	; 0x5c
   24014:	18bd8010 	popne	{r4, pc}
   24018:	e3a02080 	mov	r2, #128	; 0x80
   2401c:	e59f1014 	ldr	r1, [pc, #20]	; 24038 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x3c>
   24020:	e59f0014 	ldr	r0, [pc, #20]	; 2403c <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x40>
   24024:	eb0001f9 	bl	24810 <assertion_failed>
   24028:	e3a0207e 	mov	r2, #126	; 0x7e
   2402c:	e59f1004 	ldr	r1, [pc, #4]	; 24038 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x3c>
   24030:	e59f0008 	ldr	r0, [pc, #8]	; 24040 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x44>
   24034:	eb0001f5 	bl	24810 <assertion_failed>
   24038:	00044ca8 	.word	0x00044ca8
   2403c:	00044cd4 	.word	0x00044cd4
   24040:	00044cb8 	.word	0x00044cb8

00024044 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))>:
   24044:	e5903060 	ldr	r3, [r0, #96]	; 0x60
   24048:	e92d4010 	push	{r4, lr}
   2404c:	e3530000 	cmp	r3, #0
   24050:	1a000006 	bne	24070 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x2c>
   24054:	e3510000 	cmp	r1, #0
   24058:	e5801060 	str	r1, [r0, #96]	; 0x60
   2405c:	18bd8010 	popne	{r4, pc}
   24060:	e3a02087 	mov	r2, #135	; 0x87
   24064:	e59f1014 	ldr	r1, [pc, #20]	; 24080 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x3c>
   24068:	e59f0014 	ldr	r0, [pc, #20]	; 24084 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x40>
   2406c:	eb0001e7 	bl	24810 <assertion_failed>
   24070:	e3a02085 	mov	r2, #133	; 0x85
   24074:	e59f1004 	ldr	r1, [pc, #4]	; 24080 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x3c>
   24078:	e59f0008 	ldr	r0, [pc, #8]	; 24088 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x44>
   2407c:	eb0001e3 	bl	24810 <assertion_failed>
   24080:	00044ca8 	.word	0x00044ca8
   24084:	00044d10 	.word	0x00044d10
   24088:	00044cf0 	.word	0x00044cf0

0002408c <CScheduler::AddTask(CTask*)>:
   2408c:	e92d4070 	push	{r4, r5, r6, lr}
   24090:	e2515000 	subs	r5, r1, #0
   24094:	0a00001c 	beq	2410c <CScheduler::AddTask(CTask*)+0x80>
   24098:	e1a04000 	mov	r4, r0
   2409c:	e5900050 	ldr	r0, [r0, #80]	; 0x50
   240a0:	e3500000 	cmp	r0, #0
   240a4:	0a00001c 	beq	2411c <CScheduler::AddTask(CTask*)+0x90>
   240a8:	e5943000 	ldr	r3, [r4]
   240ac:	e3530000 	cmp	r3, #0
   240b0:	11a02004 	movne	r2, r4
   240b4:	13a03000 	movne	r3, #0
   240b8:	1a000003 	bne	240cc <CScheduler::AddTask(CTask*)+0x40>
   240bc:	ea000009 	b	240e8 <CScheduler::AddTask(CTask*)+0x5c>
   240c0:	e5b21004 	ldr	r1, [r2, #4]!
   240c4:	e3510000 	cmp	r1, #0
   240c8:	0a000006 	beq	240e8 <CScheduler::AddTask(CTask*)+0x5c>
   240cc:	e2833001 	add	r3, r3, #1
   240d0:	e1530000 	cmp	r3, r0
   240d4:	1afffff9 	bne	240c0 <CScheduler::AddTask(CTask*)+0x34>
   240d8:	e3530014 	cmp	r3, #20
   240dc:	0a000003 	beq	240f0 <CScheduler::AddTask(CTask*)+0x64>
   240e0:	e2832001 	add	r2, r3, #1
   240e4:	e5842050 	str	r2, [r4, #80]	; 0x50
   240e8:	e7845103 	str	r5, [r4, r3, lsl #2]
   240ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   240f0:	eb000ab9 	bl	26bdc <CLogger::Get()>
   240f4:	e59f3028 	ldr	r3, [pc, #40]	; 24124 <CScheduler::AddTask(CTask*)+0x98>
   240f8:	e3a02000 	mov	r2, #0
   240fc:	e59f1024 	ldr	r1, [pc, #36]	; 24128 <CScheduler::AddTask(CTask*)+0x9c>
   24100:	eb0009f2 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24104:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   24108:	eafffff4 	b	240e0 <CScheduler::AddTask(CTask*)+0x54>
   2410c:	e3a0208c 	mov	r2, #140	; 0x8c
   24110:	e59f1014 	ldr	r1, [pc, #20]	; 2412c <CScheduler::AddTask(CTask*)+0xa0>
   24114:	e59f0014 	ldr	r0, [pc, #20]	; 24130 <CScheduler::AddTask(CTask*)+0xa4>
   24118:	eb0001bc 	bl	24810 <assertion_failed>
   2411c:	e1a03000 	mov	r3, r0
   24120:	eaffffee 	b	240e0 <CScheduler::AddTask(CTask*)+0x54>
   24124:	00044d3c 	.word	0x00044d3c
   24128:	00044ca0 	.word	0x00044ca0
   2412c:	00044ca8 	.word	0x00044ca8
   24130:	00044d30 	.word	0x00044d30

00024134 <CScheduler::RemoveTask(CTask*)>:
   24134:	e92d4010 	push	{r4, lr}
   24138:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   2413c:	e35e0000 	cmp	lr, #0
   24140:	0a000012 	beq	24190 <CScheduler::RemoveTask(CTask*)+0x5c>
   24144:	e5903000 	ldr	r3, [r0]
   24148:	e1510003 	cmp	r1, r3
   2414c:	11a02000 	movne	r2, r0
   24150:	13a03000 	movne	r3, #0
   24154:	0a00000b 	beq	24188 <CScheduler::RemoveTask(CTask*)+0x54>
   24158:	e2833001 	add	r3, r3, #1
   2415c:	e153000e 	cmp	r3, lr
   24160:	0a00000a 	beq	24190 <CScheduler::RemoveTask(CTask*)+0x5c>
   24164:	e5b2c004 	ldr	ip, [r2, #4]!
   24168:	e15c0001 	cmp	ip, r1
   2416c:	1afffff9 	bne	24158 <CScheduler::RemoveTask(CTask*)+0x24>
   24170:	e3a02000 	mov	r2, #0
   24174:	e24ee001 	sub	lr, lr, #1
   24178:	e15e0003 	cmp	lr, r3
   2417c:	e7802103 	str	r2, [r0, r3, lsl #2]
   24180:	05803050 	streq	r3, [r0, #80]	; 0x50
   24184:	e8bd8010 	pop	{r4, pc}
   24188:	e3a03000 	mov	r3, #0
   2418c:	eafffff7 	b	24170 <CScheduler::RemoveTask(CTask*)+0x3c>
   24190:	e3a020b2 	mov	r2, #178	; 0xb2
   24194:	e59f1004 	ldr	r1, [pc, #4]	; 241a0 <CScheduler::RemoveTask(CTask*)+0x6c>
   24198:	e59f0004 	ldr	r0, [pc, #4]	; 241a4 <CScheduler::RemoveTask(CTask*)+0x70>
   2419c:	eb00019b 	bl	24810 <assertion_failed>
   241a0:	00044ca8 	.word	0x00044ca8
   241a4:	0003fe24 	.word	0x0003fe24

000241a8 <CScheduler::WakeTask(CTask**)>:
   241a8:	e3510000 	cmp	r1, #0
   241ac:	e92d4010 	push	{r4, lr}
   241b0:	0a000009 	beq	241dc <CScheduler::WakeTask(CTask**)+0x34>
   241b4:	e3a02000 	mov	r2, #0
   241b8:	e5913000 	ldr	r3, [r1]
   241bc:	e5812000 	str	r2, [r1]
   241c0:	e1530002 	cmp	r3, r2
   241c4:	0a000008 	beq	241ec <CScheduler::WakeTask(CTask**)+0x44>
   241c8:	e5d31004 	ldrb	r1, [r3, #4]
   241cc:	e3510001 	cmp	r1, #1
   241d0:	1a000009 	bne	241fc <CScheduler::WakeTask(CTask**)+0x54>
   241d4:	e5c32004 	strb	r2, [r3, #4]
   241d8:	e8bd8010 	pop	{r4, pc}
   241dc:	e3a020c3 	mov	r2, #195	; 0xc3
   241e0:	e59f1024 	ldr	r1, [pc, #36]	; 2420c <CScheduler::WakeTask(CTask**)+0x64>
   241e4:	e59f0024 	ldr	r0, [pc, #36]	; 24210 <CScheduler::WakeTask(CTask**)+0x68>
   241e8:	eb000188 	bl	24810 <assertion_failed>
   241ec:	e3a020cf 	mov	r2, #207	; 0xcf
   241f0:	e59f1014 	ldr	r1, [pc, #20]	; 2420c <CScheduler::WakeTask(CTask**)+0x64>
   241f4:	e59f0018 	ldr	r0, [pc, #24]	; 24214 <CScheduler::WakeTask(CTask**)+0x6c>
   241f8:	eb000184 	bl	24810 <assertion_failed>
   241fc:	e3a020d0 	mov	r2, #208	; 0xd0
   24200:	e59f1004 	ldr	r1, [pc, #4]	; 2420c <CScheduler::WakeTask(CTask**)+0x64>
   24204:	e59f000c 	ldr	r0, [pc, #12]	; 24218 <CScheduler::WakeTask(CTask**)+0x70>
   24208:	eb000180 	bl	24810 <assertion_failed>
   2420c:	00044ca8 	.word	0x00044ca8
   24210:	00044d5c 	.word	0x00044d5c
   24214:	00044d30 	.word	0x00044d30
   24218:	00044d68 	.word	0x00044d68

0002421c <CScheduler::GetNextTask()>:
   2421c:	e92d4070 	push	{r4, r5, r6, lr}
   24220:	e1a06000 	mov	r6, r0
   24224:	e5904058 	ldr	r4, [r0, #88]	; 0x58
   24228:	eb001738 	bl	29f10 <CTimer::Get()>
   2422c:	eb00147a 	bl	2941c <CTimer::GetClockTicks()>
   24230:	e5963050 	ldr	r3, [r6, #80]	; 0x50
   24234:	e3540013 	cmp	r4, #19
   24238:	83a04000 	movhi	r4, #0
   2423c:	e3530000 	cmp	r3, #0
   24240:	0a000015 	beq	2429c <CScheduler::GetNextTask()+0x80>
   24244:	e3a01001 	mov	r1, #1
   24248:	e2844001 	add	r4, r4, #1
   2424c:	e1540003 	cmp	r4, r3
   24250:	23a04000 	movcs	r4, #0
   24254:	e7965104 	ldr	r5, [r6, r4, lsl #2]
   24258:	e3550000 	cmp	r5, #0
   2425c:	0a00000b 	beq	24290 <CScheduler::GetNextTask()+0x74>
   24260:	e5d52004 	ldrb	r2, [r5, #4]
   24264:	e3520003 	cmp	r2, #3
   24268:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   2426c:	ea00001c 	b	242e4 <CScheduler::GetNextTask()+0xc8>
   24270:	000242a0 	.word	0x000242a0
   24274:	00024290 	.word	0x00024290
   24278:	00024280 	.word	0x00024280
   2427c:	000242a8 	.word	0x000242a8
   24280:	e5952008 	ldr	r2, [r5, #8]
   24284:	e0422000 	sub	r2, r2, r0
   24288:	e3520000 	cmp	r2, #0
   2428c:	da000018 	ble	242f4 <CScheduler::GetNextTask()+0xd8>
   24290:	e2811001 	add	r1, r1, #1
   24294:	e1510003 	cmp	r1, r3
   24298:	9affffea 	bls	24248 <CScheduler::GetNextTask()+0x2c>
   2429c:	e3a04014 	mov	r4, #20
   242a0:	e1a00004 	mov	r0, r4
   242a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   242a8:	e5963060 	ldr	r3, [r6, #96]	; 0x60
   242ac:	e3530000 	cmp	r3, #0
   242b0:	0a000001 	beq	242bc <CScheduler::GetNextTask()+0xa0>
   242b4:	e1a00005 	mov	r0, r5
   242b8:	e12fff33 	blx	r3
   242bc:	e3a04014 	mov	r4, #20
   242c0:	e1a00006 	mov	r0, r6
   242c4:	e1a01005 	mov	r1, r5
   242c8:	ebffff99 	bl	24134 <CScheduler::RemoveTask(CTask*)>
   242cc:	e5953000 	ldr	r3, [r5]
   242d0:	e1a00005 	mov	r0, r5
   242d4:	e5933004 	ldr	r3, [r3, #4]
   242d8:	e12fff33 	blx	r3
   242dc:	e1a00004 	mov	r0, r4
   242e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   242e4:	e59f2014 	ldr	r2, [pc, #20]	; 24300 <CScheduler::GetNextTask()+0xe4>
   242e8:	e59f1014 	ldr	r1, [pc, #20]	; 24304 <CScheduler::GetNextTask()+0xe8>
   242ec:	e59f0014 	ldr	r0, [pc, #20]	; 24308 <CScheduler::GetNextTask()+0xec>
   242f0:	eb000146 	bl	24810 <assertion_failed>
   242f4:	e3a03000 	mov	r3, #0
   242f8:	e5c53004 	strb	r3, [r5, #4]
   242fc:	eaffffe7 	b	242a0 <CScheduler::GetNextTask()+0x84>
   24300:	00000103 	.word	0x00000103
   24304:	00044ca8 	.word	0x00044ca8
   24308:	0003fe24 	.word	0x0003fe24

0002430c <CScheduler::Yield()>:
   2430c:	e92d4070 	push	{r4, r5, r6, lr}
   24310:	e1a04000 	mov	r4, r0
   24314:	e1a00004 	mov	r0, r4
   24318:	ebffffbf 	bl	2421c <CScheduler::GetNextTask()>
   2431c:	e3500014 	cmp	r0, #20
   24320:	e5840058 	str	r0, [r4, #88]	; 0x58
   24324:	1a000006 	bne	24344 <CScheduler::Yield()+0x38>
   24328:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   2432c:	e3530000 	cmp	r3, #0
   24330:	1afffff7 	bne	24314 <CScheduler::Yield()+0x8>
   24334:	e3a02037 	mov	r2, #55	; 0x37
   24338:	e59f10a0 	ldr	r1, [pc, #160]	; 243e0 <CScheduler::Yield()+0xd4>
   2433c:	e59f00a0 	ldr	r0, [pc, #160]	; 243e4 <CScheduler::Yield()+0xd8>
   24340:	eb000132 	bl	24810 <assertion_failed>
   24344:	e3500013 	cmp	r0, #19
   24348:	8a000018 	bhi	243b0 <CScheduler::Yield()+0xa4>
   2434c:	e7940100 	ldr	r0, [r4, r0, lsl #2]
   24350:	e3500000 	cmp	r0, #0
   24354:	0a000019 	beq	243c0 <CScheduler::Yield()+0xb4>
   24358:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   2435c:	e1500003 	cmp	r0, r3
   24360:	08bd8070 	popeq	{r4, r5, r6, pc}
   24364:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   24368:	e5840054 	str	r0, [r4, #84]	; 0x54
   2436c:	e3520000 	cmp	r2, #0
   24370:	e283500c 	add	r5, r3, #12
   24374:	e280400c 	add	r4, r0, #12
   24378:	0a000000 	beq	24380 <CScheduler::Yield()+0x74>
   2437c:	e12fff32 	blx	r2
   24380:	e3550000 	cmp	r5, #0
   24384:	0a000011 	beq	243d0 <CScheduler::Yield()+0xc4>
   24388:	e3540000 	cmp	r4, #0
   2438c:	0a000003 	beq	243a0 <CScheduler::Yield()+0x94>
   24390:	e1a01004 	mov	r1, r4
   24394:	e1a00005 	mov	r0, r5
   24398:	e8bd4070 	pop	{r4, r5, r6, lr}
   2439c:	ea00007b 	b	24590 <TaskSwitch>
   243a0:	e3a0204c 	mov	r2, #76	; 0x4c
   243a4:	e59f1034 	ldr	r1, [pc, #52]	; 243e0 <CScheduler::Yield()+0xd4>
   243a8:	e59f0038 	ldr	r0, [pc, #56]	; 243e8 <CScheduler::Yield()+0xdc>
   243ac:	eb000117 	bl	24810 <assertion_failed>
   243b0:	e3a0203a 	mov	r2, #58	; 0x3a
   243b4:	e59f1024 	ldr	r1, [pc, #36]	; 243e0 <CScheduler::Yield()+0xd4>
   243b8:	e59f002c 	ldr	r0, [pc, #44]	; 243ec <CScheduler::Yield()+0xe0>
   243bc:	eb000113 	bl	24810 <assertion_failed>
   243c0:	e3a0203c 	mov	r2, #60	; 0x3c
   243c4:	e59f1014 	ldr	r1, [pc, #20]	; 243e0 <CScheduler::Yield()+0xd4>
   243c8:	e59f0020 	ldr	r0, [pc, #32]	; 243f0 <CScheduler::Yield()+0xe4>
   243cc:	eb00010f 	bl	24810 <assertion_failed>
   243d0:	e3a0204b 	mov	r2, #75	; 0x4b
   243d4:	e59f1004 	ldr	r1, [pc, #4]	; 243e0 <CScheduler::Yield()+0xd4>
   243d8:	e59f0014 	ldr	r0, [pc, #20]	; 243f4 <CScheduler::Yield()+0xe8>
   243dc:	eb00010b 	bl	24810 <assertion_failed>
   243e0:	00044ca8 	.word	0x00044ca8
   243e4:	00044d90 	.word	0x00044d90
   243e8:	00044dd4 	.word	0x00044dd4
   243ec:	00044da0 	.word	0x00044da0
   243f0:	00044db8 	.word	0x00044db8
   243f4:	00044dc4 	.word	0x00044dc4

000243f8 <CScheduler::usSleep(unsigned int)>:
   243f8:	e92d4070 	push	{r4, r5, r6, lr}
   243fc:	e2514000 	subs	r4, r1, #0
   24400:	08bd8070 	popeq	{r4, r5, r6, pc}
   24404:	e1a05000 	mov	r5, r0
   24408:	eb0016c0 	bl	29f10 <CTimer::Get()>
   2440c:	eb001402 	bl	2941c <CTimer::GetClockTicks()>
   24410:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   24414:	e3530000 	cmp	r3, #0
   24418:	0a000009 	beq	24444 <CScheduler::usSleep(unsigned int)+0x4c>
   2441c:	e5d32004 	ldrb	r2, [r3, #4]
   24420:	e3520000 	cmp	r2, #0
   24424:	1a00000a 	bne	24454 <CScheduler::usSleep(unsigned int)+0x5c>
   24428:	e3a02002 	mov	r2, #2
   2442c:	e0841000 	add	r1, r4, r0
   24430:	e5831008 	str	r1, [r3, #8]
   24434:	e1a00005 	mov	r0, r5
   24438:	e8bd4070 	pop	{r4, r5, r6, lr}
   2443c:	e5c32004 	strb	r2, [r3, #4]
   24440:	eaffffb1 	b	2430c <CScheduler::Yield()>
   24444:	e3a0206e 	mov	r2, #110	; 0x6e
   24448:	e59f1014 	ldr	r1, [pc, #20]	; 24464 <CScheduler::usSleep(unsigned int)+0x6c>
   2444c:	e59f0014 	ldr	r0, [pc, #20]	; 24468 <CScheduler::usSleep(unsigned int)+0x70>
   24450:	eb0000ee 	bl	24810 <assertion_failed>
   24454:	e3a0206f 	mov	r2, #111	; 0x6f
   24458:	e59f1004 	ldr	r1, [pc, #4]	; 24464 <CScheduler::usSleep(unsigned int)+0x6c>
   2445c:	e59f0008 	ldr	r0, [pc, #8]	; 2446c <CScheduler::usSleep(unsigned int)+0x74>
   24460:	eb0000ea 	bl	24810 <assertion_failed>
   24464:	00044ca8 	.word	0x00044ca8
   24468:	00044de4 	.word	0x00044de4
   2446c:	00044df4 	.word	0x00044df4

00024470 <CScheduler::Sleep(unsigned int)>:
   24470:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24474:	e59f5040 	ldr	r5, [pc, #64]	; 244bc <CScheduler::Sleep(unsigned int)+0x4c>
   24478:	e1a04001 	mov	r4, r1
   2447c:	e1510005 	cmp	r1, r5
   24480:	e1a06000 	mov	r6, r0
   24484:	9a000007 	bls	244a8 <CScheduler::Sleep(unsigned int)+0x38>
   24488:	e59f7030 	ldr	r7, [pc, #48]	; 244c0 <CScheduler::Sleep(unsigned int)+0x50>
   2448c:	e2444c07 	sub	r4, r4, #1792	; 0x700
   24490:	e1a01007 	mov	r1, r7
   24494:	e1a00006 	mov	r0, r6
   24498:	e2444008 	sub	r4, r4, #8
   2449c:	ebffffd5 	bl	243f8 <CScheduler::usSleep(unsigned int)>
   244a0:	e1540005 	cmp	r4, r5
   244a4:	8afffff8 	bhi	2448c <CScheduler::Sleep(unsigned int)+0x1c>
   244a8:	e59f1014 	ldr	r1, [pc, #20]	; 244c4 <CScheduler::Sleep(unsigned int)+0x54>
   244ac:	e1a00006 	mov	r0, r6
   244b0:	e0010491 	mul	r1, r1, r4
   244b4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   244b8:	eaffffce 	b	243f8 <CScheduler::usSleep(unsigned int)>
   244bc:	00000708 	.word	0x00000708
   244c0:	6b49d200 	.word	0x6b49d200
   244c4:	000f4240 	.word	0x000f4240

000244c8 <CScheduler::MsSleep(unsigned int)>:
   244c8:	e3510000 	cmp	r1, #0
   244cc:	012fff1e 	bxeq	lr
   244d0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   244d4:	e0010193 	mul	r1, r3, r1
   244d8:	eaffffc6 	b	243f8 <CScheduler::usSleep(unsigned int)>

000244dc <CScheduler::BlockTask(CTask**)>:
   244dc:	e3510000 	cmp	r1, #0
   244e0:	e92d4010 	push	{r4, lr}
   244e4:	0a00000b 	beq	24518 <CScheduler::BlockTask(CTask**)+0x3c>
   244e8:	e5902054 	ldr	r2, [r0, #84]	; 0x54
   244ec:	e5812000 	str	r2, [r1]
   244f0:	e5903054 	ldr	r3, [r0, #84]	; 0x54
   244f4:	e3530000 	cmp	r3, #0
   244f8:	0a00000a 	beq	24528 <CScheduler::BlockTask(CTask**)+0x4c>
   244fc:	e5d32004 	ldrb	r2, [r3, #4]
   24500:	e3520000 	cmp	r2, #0
   24504:	1a00000b 	bne	24538 <CScheduler::BlockTask(CTask**)+0x5c>
   24508:	e8bd4010 	pop	{r4, lr}
   2450c:	e3a02001 	mov	r2, #1
   24510:	e5c32004 	strb	r2, [r3, #4]
   24514:	eaffff7c 	b	2430c <CScheduler::Yield()>
   24518:	e3a020b7 	mov	r2, #183	; 0xb7
   2451c:	e59f1024 	ldr	r1, [pc, #36]	; 24548 <CScheduler::BlockTask(CTask**)+0x6c>
   24520:	e59f0024 	ldr	r0, [pc, #36]	; 2454c <CScheduler::BlockTask(CTask**)+0x70>
   24524:	eb0000b9 	bl	24810 <assertion_failed>
   24528:	e3a020ba 	mov	r2, #186	; 0xba
   2452c:	e59f1014 	ldr	r1, [pc, #20]	; 24548 <CScheduler::BlockTask(CTask**)+0x6c>
   24530:	e59f0018 	ldr	r0, [pc, #24]	; 24550 <CScheduler::BlockTask(CTask**)+0x74>
   24534:	eb0000b5 	bl	24810 <assertion_failed>
   24538:	e3a020bb 	mov	r2, #187	; 0xbb
   2453c:	e59f1004 	ldr	r1, [pc, #4]	; 24548 <CScheduler::BlockTask(CTask**)+0x6c>
   24540:	e59f000c 	ldr	r0, [pc, #12]	; 24554 <CScheduler::BlockTask(CTask**)+0x78>
   24544:	eb0000b1 	bl	24810 <assertion_failed>
   24548:	00044ca8 	.word	0x00044ca8
   2454c:	00044d5c 	.word	0x00044d5c
   24550:	00044de4 	.word	0x00044de4
   24554:	00044df4 	.word	0x00044df4

00024558 <CScheduler::Get()>:
   24558:	e59f3020 	ldr	r3, [pc, #32]	; 24580 <CScheduler::Get()+0x28>
   2455c:	e5930000 	ldr	r0, [r3]
   24560:	e3500000 	cmp	r0, #0
   24564:	0a000000 	beq	2456c <CScheduler::Get()+0x14>
   24568:	e12fff1e 	bx	lr
   2456c:	e92d4010 	push	{r4, lr}
   24570:	e59f200c 	ldr	r2, [pc, #12]	; 24584 <CScheduler::Get()+0x2c>
   24574:	e59f100c 	ldr	r1, [pc, #12]	; 24588 <CScheduler::Get()+0x30>
   24578:	e59f000c 	ldr	r0, [pc, #12]	; 2458c <CScheduler::Get()+0x34>
   2457c:	eb0000a3 	bl	24810 <assertion_failed>
   24580:	0004e208 	.word	0x0004e208
   24584:	0000010d 	.word	0x0000010d
   24588:	00044ca8 	.word	0x00044ca8
   2458c:	000439ec 	.word	0x000439ec

00024590 <TaskSwitch>:
   24590:	eef82a10 	vmrs	r2, fpexc
   24594:	eef13a10 	vmrs	r3, fpscr
   24598:	e8a07ffd 	stmia	r0!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   2459c:	ec800b20 	vstmia	r0, {d0-d15}
   245a0:	e8b17ffd 	ldm	r1!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   245a4:	eee82a10 	vmsr	fpexc, r2
   245a8:	eee13a10 	vmsr	fpscr, r3
   245ac:	ec910b20 	vldmia	r1, {d0-d15}
   245b0:	e12fff1e 	bx	lr

000245b4 <CSynchronizationEvent::CSynchronizationEvent(bool)>:
   245b4:	e3a02000 	mov	r2, #0
   245b8:	e5c01000 	strb	r1, [r0]
   245bc:	e5802004 	str	r2, [r0, #4]
   245c0:	e12fff1e 	bx	lr

000245c4 <CSynchronizationEvent::~CSynchronizationEvent()>:
   245c4:	e5903004 	ldr	r3, [r0, #4]
   245c8:	e3530000 	cmp	r3, #0
   245cc:	1a000000 	bne	245d4 <CSynchronizationEvent::~CSynchronizationEvent()+0x10>
   245d0:	e12fff1e 	bx	lr
   245d4:	e92d4010 	push	{r4, lr}
   245d8:	e3a02023 	mov	r2, #35	; 0x23
   245dc:	e59f1004 	ldr	r1, [pc, #4]	; 245e8 <CSynchronizationEvent::~CSynchronizationEvent()+0x24>
   245e0:	e59f0004 	ldr	r0, [pc, #4]	; 245ec <CSynchronizationEvent::~CSynchronizationEvent()+0x28>
   245e4:	eb000089 	bl	24810 <assertion_failed>
   245e8:	00044e20 	.word	0x00044e20
   245ec:	00044e3c 	.word	0x00044e3c

000245f0 <CSynchronizationEvent::GetState()>:
   245f0:	e5d00000 	ldrb	r0, [r0]
   245f4:	e12fff1e 	bx	lr

000245f8 <CSynchronizationEvent::Clear()>:
   245f8:	e3a03000 	mov	r3, #0
   245fc:	e5c03000 	strb	r3, [r0]
   24600:	e12fff1e 	bx	lr

00024604 <CSynchronizationEvent::Set()>:
   24604:	e5d03000 	ldrb	r3, [r0]
   24608:	e3530000 	cmp	r3, #0
   2460c:	112fff1e 	bxne	lr
   24610:	e3a02001 	mov	r2, #1
   24614:	e5903004 	ldr	r3, [r0, #4]
   24618:	e5c02000 	strb	r2, [r0]
   2461c:	e3530000 	cmp	r3, #0
   24620:	012fff1e 	bxeq	lr
   24624:	e92d4010 	push	{r4, lr}
   24628:	e1a04000 	mov	r4, r0
   2462c:	ebffffc9 	bl	24558 <CScheduler::Get()>
   24630:	e2841004 	add	r1, r4, #4
   24634:	e8bd4010 	pop	{r4, lr}
   24638:	eafffeda 	b	241a8 <CScheduler::WakeTask(CTask**)>

0002463c <CSynchronizationEvent::Wait()>:
   2463c:	e5d03000 	ldrb	r3, [r0]
   24640:	e3530000 	cmp	r3, #0
   24644:	112fff1e 	bxne	lr
   24648:	e5903004 	ldr	r3, [r0, #4]
   2464c:	e92d4010 	push	{r4, lr}
   24650:	e3530000 	cmp	r3, #0
   24654:	e1a04000 	mov	r4, r0
   24658:	1a000009 	bne	24684 <CSynchronizationEvent::Wait()+0x48>
   2465c:	ebffffbd 	bl	24558 <CScheduler::Get()>
   24660:	e2841004 	add	r1, r4, #4
   24664:	ebffff9c 	bl	244dc <CScheduler::BlockTask(CTask**)>
   24668:	e5d43000 	ldrb	r3, [r4]
   2466c:	e3530000 	cmp	r3, #0
   24670:	18bd8010 	popne	{r4, pc}
   24674:	e3a0204c 	mov	r2, #76	; 0x4c
   24678:	e59f1014 	ldr	r1, [pc, #20]	; 24694 <CSynchronizationEvent::Wait()+0x58>
   2467c:	e59f0014 	ldr	r0, [pc, #20]	; 24698 <CSynchronizationEvent::Wait()+0x5c>
   24680:	eb000062 	bl	24810 <assertion_failed>
   24684:	e3a02049 	mov	r2, #73	; 0x49
   24688:	e59f1004 	ldr	r1, [pc, #4]	; 24694 <CSynchronizationEvent::Wait()+0x58>
   2468c:	e59f0008 	ldr	r0, [pc, #8]	; 2469c <CSynchronizationEvent::Wait()+0x60>
   24690:	eb00005e 	bl	24810 <assertion_failed>
   24694:	00044e20 	.word	0x00044e20
   24698:	00044e50 	.word	0x00044e50
   2469c:	00044e3c 	.word	0x00044e3c

000246a0 <CActLED::CActLED(bool)>:
   246a0:	e3a03000 	mov	r3, #0
   246a4:	e59f2088 	ldr	r2, [pc, #136]	; 24734 <CActLED::CActLED(bool)+0x94>
   246a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   246ac:	e5803000 	str	r3, [r0]
   246b0:	e5803004 	str	r3, [r0, #4]
   246b4:	e1a07001 	mov	r7, r1
   246b8:	e5820000 	str	r0, [r2]
   246bc:	e1a05000 	mov	r5, r0
   246c0:	eb000c3f 	bl	277c4 <CMachineInfo::Get()>
   246c4:	eb000b68 	bl	2746c <CMachineInfo::GetActLEDInfo() const>
   246c8:	e2106080 	ands	r6, r0, #128	; 0x80
   246cc:	e1a04000 	mov	r4, r0
   246d0:	1a00000f 	bne	24714 <CActLED::CActLED(bool)+0x74>
   246d4:	e3a00028 	mov	r0, #40	; 0x28
   246d8:	eb001a69 	bl	2b084 <operator new(unsigned int)>
   246dc:	e1a07000 	mov	r7, r0
   246e0:	e1a03006 	mov	r3, r6
   246e4:	e3a02001 	mov	r2, #1
   246e8:	e204103f 	and	r1, r4, #63	; 0x3f
   246ec:	eb0003cb 	bl	25620 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   246f0:	e5857000 	str	r7, [r5]
   246f4:	e1a04324 	lsr	r4, r4, #6
   246f8:	e2244001 	eor	r4, r4, #1
   246fc:	e2044001 	and	r4, r4, #1
   24700:	e1a00005 	mov	r0, r5
   24704:	e5c54008 	strb	r4, [r5, #8]
   24708:	eb00001b 	bl	2477c <CActLED::Off()>
   2470c:	e1a00005 	mov	r0, r5
   24710:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24714:	e3a00014 	mov	r0, #20
   24718:	eb001a59 	bl	2b084 <operator new(unsigned int)>
   2471c:	e1a06000 	mov	r6, r0
   24720:	e1a02007 	mov	r2, r7
   24724:	e204103f 	and	r1, r4, #63	; 0x3f
   24728:	eb001893 	bl	2a97c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   2472c:	e5856004 	str	r6, [r5, #4]
   24730:	eaffffef 	b	246f4 <CActLED::CActLED(bool)+0x54>
   24734:	0004e20c 	.word	0x0004e20c

00024738 <CActLED::~CActLED()>:
   24738:	e3a02000 	mov	r2, #0
   2473c:	e59f3004 	ldr	r3, [pc, #4]	; 24748 <CActLED::~CActLED()+0x10>
   24740:	e5832000 	str	r2, [r3]
   24744:	e12fff1e 	bx	lr
   24748:	0004e20c 	.word	0x0004e20c

0002474c <CActLED::On()>:
   2474c:	e5903000 	ldr	r3, [r0]
   24750:	e3530000 	cmp	r3, #0
   24754:	0a000002 	beq	24764 <CActLED::On()+0x18>
   24758:	e5d01008 	ldrb	r1, [r0, #8]
   2475c:	e1a00003 	mov	r0, r3
   24760:	ea000453 	b	258b4 <CGPIOPin::Write(unsigned int)>
   24764:	e5903004 	ldr	r3, [r0, #4]
   24768:	e3530000 	cmp	r3, #0
   2476c:	012fff1e 	bxeq	lr
   24770:	e5d01008 	ldrb	r1, [r0, #8]
   24774:	e1a00003 	mov	r0, r3
   24778:	ea0018d8 	b	2aae0 <CVirtualGPIOPin::Write(unsigned int)>

0002477c <CActLED::Off()>:
   2477c:	e5903000 	ldr	r3, [r0]
   24780:	e3530000 	cmp	r3, #0
   24784:	0a000003 	beq	24798 <CActLED::Off()+0x1c>
   24788:	e5d01008 	ldrb	r1, [r0, #8]
   2478c:	e1a00003 	mov	r0, r3
   24790:	e2211001 	eor	r1, r1, #1
   24794:	ea000446 	b	258b4 <CGPIOPin::Write(unsigned int)>
   24798:	e5903004 	ldr	r3, [r0, #4]
   2479c:	e3530000 	cmp	r3, #0
   247a0:	012fff1e 	bxeq	lr
   247a4:	e5d01008 	ldrb	r1, [r0, #8]
   247a8:	e1a00003 	mov	r0, r3
   247ac:	e2211001 	eor	r1, r1, #1
   247b0:	ea0018ca 	b	2aae0 <CVirtualGPIOPin::Write(unsigned int)>

000247b4 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   247b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   247b8:	e2516000 	subs	r6, r1, #0
   247bc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   247c0:	e1a08003 	mov	r8, r3
   247c4:	e1a07002 	mov	r7, r2
   247c8:	e1a05000 	mov	r5, r0
   247cc:	e3a04001 	mov	r4, #1
   247d0:	e1a00005 	mov	r0, r5
   247d4:	ebffffdc 	bl	2474c <CActLED::On()>
   247d8:	e1a00007 	mov	r0, r7
   247dc:	eb001592 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
   247e0:	e1a00005 	mov	r0, r5
   247e4:	ebffffe4 	bl	2477c <CActLED::Off()>
   247e8:	e2844001 	add	r4, r4, #1
   247ec:	e1a00008 	mov	r0, r8
   247f0:	eb00158d 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
   247f4:	e1560004 	cmp	r6, r4
   247f8:	2afffff4 	bcs	247d0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
   247fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00024800 <CActLED::Get()>:
   24800:	e59f3004 	ldr	r3, [pc, #4]	; 2480c <CActLED::Get()+0xc>
   24804:	e5930000 	ldr	r0, [r3]
   24808:	e12fff1e 	bx	lr
   2480c:	0004e20c 	.word	0x0004e20c

00024810 <assertion_failed>:
   24810:	e92d4080 	push	{r7, lr}
   24814:	e1a05000 	mov	r5, r0
   24818:	e24dd018 	sub	sp, sp, #24
   2481c:	e1a06001 	mov	r6, r1
   24820:	e1a07002 	mov	r7, r2
   24824:	e1a0400d 	mov	r4, sp
   24828:	eb001ea7 	bl	2c2cc <CInterruptSystem::DisableFIQ()>
   2482c:	f1080040 	cpsie	f
   24830:	e28d0008 	add	r0, sp, #8
   24834:	eb000cce 	bl	27b74 <CString::CString()>
   24838:	e1a03007 	mov	r3, r7
   2483c:	e1a02006 	mov	r2, r6
   24840:	e59f1044 	ldr	r1, [pc, #68]	; 2488c <assertion_failed+0x7c>
   24844:	e28d0008 	add	r0, sp, #8
   24848:	eb00120c 	bl	29080 <CString::Format(char const*, ...)>
   2484c:	e28d0008 	add	r0, sp, #8
   24850:	eb000cdd 	bl	27bcc <CString::operator char const*() const>
   24854:	e1a01000 	mov	r1, r0
   24858:	e1a00004 	mov	r0, r4
   2485c:	eb0001a5 	bl	24ef8 <debug_stacktrace(unsigned int const*, char const*)>
   24860:	eb0008dd 	bl	26bdc <CLogger::Get()>
   24864:	e1a04000 	mov	r4, r0
   24868:	e28d0008 	add	r0, sp, #8
   2486c:	eb000cd6 	bl	27bcc <CString::operator char const*() const>
   24870:	e58d5000 	str	r5, [sp]
   24874:	e1a01000 	mov	r1, r0
   24878:	e59f3010 	ldr	r3, [pc, #16]	; 24890 <assertion_failed+0x80>
   2487c:	e1a00004 	mov	r0, r4
   24880:	e3a02000 	mov	r2, #0
   24884:	eb000811 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24888:	eafffffe 	b	24888 <assertion_failed+0x78>
   2488c:	00044e5c 	.word	0x00044e5c
   24890:	00044e64 	.word	0x00044e64

00024894 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   24894:	e92d4010 	push	{r4, lr}
   24898:	e1a04000 	mov	r4, r0
   2489c:	e1a02001 	mov	r2, r1
   248a0:	e3a01008 	mov	r1, #8
   248a4:	eb001f25 	bl	2c540 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   248a8:	e1a00004 	mov	r0, r4
   248ac:	e8bd8010 	pop	{r4, pc}

000248b0 <CBcmPropertyTags::~CBcmPropertyTags()>:
   248b0:	e92d4010 	push	{r4, lr}
   248b4:	e1a04000 	mov	r4, r0
   248b8:	eb001f23 	bl	2c54c <CBcmMailBox::~CBcmMailBox()>
   248bc:	e1a00004 	mov	r0, r4
   248c0:	e8bd8010 	pop	{r4, pc}

000248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   248c4:	e92d4070 	push	{r4, r5, r6, lr}
   248c8:	e2524000 	subs	r4, r2, #0
   248cc:	0a000030 	beq	24994 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd0>
   248d0:	e353000f 	cmp	r3, #15
   248d4:	9a000032 	bls	249a4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   248d8:	e59d2010 	ldr	r2, [sp, #16]
   248dc:	e243e00c 	sub	lr, r3, #12
   248e0:	e3c2c102 	bic	ip, r2, #-2147483648	; 0x80000000
   248e4:	e1a0582e 	lsr	r5, lr, #16
   248e8:	e1a0642e 	lsr	r6, lr, #8
   248ec:	e5c4e004 	strb	lr, [r4, #4]
   248f0:	e1a02003 	mov	r2, r3
   248f4:	e1a0ec2e 	lsr	lr, lr, #24
   248f8:	e1a0342c 	lsr	r3, ip, #8
   248fc:	e5c41000 	strb	r1, [r4]
   24900:	e5c45006 	strb	r5, [r4, #6]
   24904:	e5c4e007 	strb	lr, [r4, #7]
   24908:	e1a0582c 	lsr	r5, ip, #16
   2490c:	e1a0ec2c 	lsr	lr, ip, #24
   24910:	e5c4c008 	strb	ip, [r4, #8]
   24914:	e5c43009 	strb	r3, [r4, #9]
   24918:	e1a0c421 	lsr	ip, r1, #8
   2491c:	e1a03821 	lsr	r3, r1, #16
   24920:	e1a01c21 	lsr	r1, r1, #24
   24924:	e5c41003 	strb	r1, [r4, #3]
   24928:	e5c46005 	strb	r6, [r4, #5]
   2492c:	e5c4500a 	strb	r5, [r4, #10]
   24930:	e5c4e00b 	strb	lr, [r4, #11]
   24934:	e5c4c001 	strb	ip, [r4, #1]
   24938:	e5c43002 	strb	r3, [r4, #2]
   2493c:	e1a01004 	mov	r1, r4
   24940:	eb00001c 	bl	249b8 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   24944:	e3500000 	cmp	r0, #0
   24948:	08bd8070 	popeq	{r4, r5, r6, pc}
   2494c:	e5d42009 	ldrb	r2, [r4, #9]
   24950:	e5d43008 	ldrb	r3, [r4, #8]
   24954:	e5d4100a 	ldrb	r1, [r4, #10]
   24958:	e1833402 	orr	r3, r3, r2, lsl #8
   2495c:	e5d4200b 	ldrb	r2, [r4, #11]
   24960:	e1833801 	orr	r3, r3, r1, lsl #16
   24964:	e1833c02 	orr	r3, r3, r2, lsl #24
   24968:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   2496c:	e2930000 	adds	r0, r3, #0
   24970:	e1a0c423 	lsr	ip, r3, #8
   24974:	e1a01823 	lsr	r1, r3, #16
   24978:	e1a02c23 	lsr	r2, r3, #24
   2497c:	13a00001 	movne	r0, #1
   24980:	e5c43008 	strb	r3, [r4, #8]
   24984:	e5c4c009 	strb	ip, [r4, #9]
   24988:	e5c4100a 	strb	r1, [r4, #10]
   2498c:	e5c4200b 	strb	r2, [r4, #11]
   24990:	e8bd8070 	pop	{r4, r5, r6, pc}
   24994:	e59f1018 	ldr	r1, [pc, #24]	; 249b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   24998:	e3a02033 	mov	r2, #51	; 0x33
   2499c:	e2810014 	add	r0, r1, #20
   249a0:	ebffff9a 	bl	24810 <assertion_failed>
   249a4:	e59f1008 	ldr	r1, [pc, #8]	; 249b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   249a8:	e3a02034 	mov	r2, #52	; 0x34
   249ac:	e2810020 	add	r0, r1, #32
   249b0:	ebffff96 	bl	24810 <assertion_failed>
   249b4:	00044e7c 	.word	0x00044e7c

000249b8 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   249b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   249bc:	e2519000 	subs	r9, r1, #0
   249c0:	0a000034 	beq	24a98 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
   249c4:	e352000f 	cmp	r2, #15
   249c8:	e1a07002 	mov	r7, r2
   249cc:	9a000035 	bls	24aa8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   249d0:	e282600c 	add	r6, r2, #12
   249d4:	e2165003 	ands	r5, r6, #3
   249d8:	1a000036 	bne	24ab8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x100>
   249dc:	e1a0a000 	mov	sl, r0
   249e0:	e1a00005 	mov	r0, r5
   249e4:	eb001c96 	bl	2bc44 <CMemorySystem::GetCoherentPage(unsigned int)>
   249e8:	e1a01426 	lsr	r1, r6, #8
   249ec:	e1a02826 	lsr	r2, r6, #16
   249f0:	e1a03c26 	lsr	r3, r6, #24
   249f4:	e2808008 	add	r8, r0, #8
   249f8:	e5c06000 	strb	r6, [r0]
   249fc:	e5c05004 	strb	r5, [r0, #4]
   24a00:	e5c05005 	strb	r5, [r0, #5]
   24a04:	e5c05006 	strb	r5, [r0, #6]
   24a08:	e5c05007 	strb	r5, [r0, #7]
   24a0c:	e5c01001 	strb	r1, [r0, #1]
   24a10:	e5c02002 	strb	r2, [r0, #2]
   24a14:	e5c03003 	strb	r3, [r0, #3]
   24a18:	e1a04000 	mov	r4, r0
   24a1c:	e1a02007 	mov	r2, r7
   24a20:	e1a00008 	mov	r0, r8
   24a24:	e1a01009 	mov	r1, r9
   24a28:	eb0017bc 	bl	2a920 <memcpy>
   24a2c:	e7885007 	str	r5, [r8, r7]
   24a30:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   24a34:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
   24a38:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
   24a3c:	e1a0000a 	mov	r0, sl
   24a40:	e1a01006 	mov	r1, r6
   24a44:	eb001ec1 	bl	2c550 <CBcmMailBox::WriteRead(unsigned int)>
   24a48:	e1560000 	cmp	r6, r0
   24a4c:	0a000001 	beq	24a58 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
   24a50:	e3a00000 	mov	r0, #0
   24a54:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24a58:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   24a5c:	e5d42005 	ldrb	r2, [r4, #5]
   24a60:	e5d43004 	ldrb	r3, [r4, #4]
   24a64:	e5d41006 	ldrb	r1, [r4, #6]
   24a68:	e1833402 	orr	r3, r3, r2, lsl #8
   24a6c:	e5d42007 	ldrb	r2, [r4, #7]
   24a70:	e1833801 	orr	r3, r3, r1, lsl #16
   24a74:	e1833c02 	orr	r3, r3, r2, lsl #24
   24a78:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   24a7c:	1afffff3 	bne	24a50 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x98>
   24a80:	e1a02007 	mov	r2, r7
   24a84:	e1a01008 	mov	r1, r8
   24a88:	e1a00009 	mov	r0, r9
   24a8c:	eb0017a3 	bl	2a920 <memcpy>
   24a90:	e3a00001 	mov	r0, #1
   24a94:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24a98:	e59f1028 	ldr	r1, [pc, #40]	; 24ac8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24a9c:	e3a0204b 	mov	r2, #75	; 0x4b
   24aa0:	e2810048 	add	r0, r1, #72	; 0x48
   24aa4:	ebffff59 	bl	24810 <assertion_failed>
   24aa8:	e59f1018 	ldr	r1, [pc, #24]	; 24ac8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24aac:	e3a0204c 	mov	r2, #76	; 0x4c
   24ab0:	e2810054 	add	r0, r1, #84	; 0x54
   24ab4:	ebffff55 	bl	24810 <assertion_failed>
   24ab8:	e59f1008 	ldr	r1, [pc, #8]	; 24ac8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24abc:	e3a0204e 	mov	r2, #78	; 0x4e
   24ac0:	e2810080 	add	r0, r1, #128	; 0x80
   24ac4:	ebffff51 	bl	24810 <assertion_failed>
   24ac8:	00044e7c 	.word	0x00044e7c

00024acc <CClassAllocator::~CClassAllocator()>:
   24acc:	e3a03000 	mov	r3, #0
   24ad0:	e92d4010 	push	{r4, lr}
   24ad4:	e1a04000 	mov	r4, r0
   24ad8:	e590000c 	ldr	r0, [r0, #12]
   24adc:	e5843010 	str	r3, [r4, #16]
   24ae0:	e1500003 	cmp	r0, r3
   24ae4:	0a000000 	beq	24aec <CClassAllocator::~CClassAllocator()+0x20>
   24ae8:	eb001e64 	bl	2c480 <free>
   24aec:	e1a00004 	mov	r0, r4
   24af0:	e8bd8010 	pop	{r4, pc}

00024af4 <CClassAllocator::Init(unsigned int, unsigned int)>:
   24af4:	e3510000 	cmp	r1, #0
   24af8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24afc:	e1a06000 	mov	r6, r0
   24b00:	03a00020 	moveq	r0, #32
   24b04:	1281301f 	addne	r3, r1, #31
   24b08:	13c3000f 	bicne	r0, r3, #15
   24b0c:	e3520000 	cmp	r2, #0
   24b10:	e5860000 	str	r0, [r6]
   24b14:	0a00001b 	beq	24b88 <CClassAllocator::Init(unsigned int, unsigned int)+0x94>
   24b18:	e5862004 	str	r2, [r6, #4]
   24b1c:	e0000290 	mul	r0, r0, r2
   24b20:	eb001e50 	bl	2c468 <malloc>
   24b24:	e3500000 	cmp	r0, #0
   24b28:	e586000c 	str	r0, [r6, #12]
   24b2c:	0a000019 	beq	24b98 <CClassAllocator::Init(unsigned int, unsigned int)+0xa4>
   24b30:	e210100f 	ands	r1, r0, #15
   24b34:	1a000019 	bne	24ba0 <CClassAllocator::Init(unsigned int, unsigned int)+0xac>
   24b38:	e5965004 	ldr	r5, [r6, #4]
   24b3c:	e3550000 	cmp	r5, #0
   24b40:	0a00001a 	beq	24bb0 <CClassAllocator::Init(unsigned int, unsigned int)+0xbc>
   24b44:	e5964000 	ldr	r4, [r6]
   24b48:	e596c010 	ldr	ip, [r6, #16]
   24b4c:	e1a03000 	mov	r3, r0
   24b50:	e59f705c 	ldr	r7, [pc, #92]	; 24bb4 <CClassAllocator::Init(unsigned int, unsigned int)+0xc0>
   24b54:	ea000000 	b	24b5c <CClassAllocator::Init(unsigned int, unsigned int)+0x68>
   24b58:	e1a01002 	mov	r1, r2
   24b5c:	e2812001 	add	r2, r1, #1
   24b60:	e1550002 	cmp	r5, r2
   24b64:	e583c00c 	str	ip, [r3, #12]
   24b68:	e1a0e003 	mov	lr, r3
   24b6c:	e5837000 	str	r7, [r3]
   24b70:	e1a0c003 	mov	ip, r3
   24b74:	e0833004 	add	r3, r3, r4
   24b78:	1afffff6 	bne	24b58 <CClassAllocator::Init(unsigned int, unsigned int)+0x64>
   24b7c:	e0210491 	mla	r1, r1, r4, r0
   24b80:	e5861010 	str	r1, [r6, #16]
   24b84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24b88:	e3a02055 	mov	r2, #85	; 0x55
   24b8c:	e59f1024 	ldr	r1, [pc, #36]	; 24bb8 <CClassAllocator::Init(unsigned int, unsigned int)+0xc4>
   24b90:	e59f0024 	ldr	r0, [pc, #36]	; 24bbc <CClassAllocator::Init(unsigned int, unsigned int)+0xc8>
   24b94:	ebffff1d 	bl	24810 <assertion_failed>
   24b98:	e5860004 	str	r0, [r6, #4]
   24b9c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24ba0:	e3a0205f 	mov	r2, #95	; 0x5f
   24ba4:	e59f100c 	ldr	r1, [pc, #12]	; 24bb8 <CClassAllocator::Init(unsigned int, unsigned int)+0xc4>
   24ba8:	e59f0010 	ldr	r0, [pc, #16]	; 24bc0 <CClassAllocator::Init(unsigned int, unsigned int)+0xcc>
   24bac:	ebffff17 	bl	24810 <assertion_failed>
   24bb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24bb4:	4f425350 	.word	0x4f425350
   24bb8:	00044f14 	.word	0x00044f14
   24bbc:	00044f28 	.word	0x00044f28
   24bc0:	00044f40 	.word	0x00044f40

00024bc4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   24bc4:	e92d4010 	push	{r4, lr}
   24bc8:	e3a0c000 	mov	ip, #0
   24bcc:	e3a0e001 	mov	lr, #1
   24bd0:	e1a04000 	mov	r4, r0
   24bd4:	e5803008 	str	r3, [r0, #8]
   24bd8:	e580e018 	str	lr, [r0, #24]
   24bdc:	e580c00c 	str	ip, [r0, #12]
   24be0:	e580c010 	str	ip, [r0, #16]
   24be4:	e5c0c014 	strb	ip, [r0, #20]
   24be8:	ebffffc1 	bl	24af4 <CClassAllocator::Init(unsigned int, unsigned int)>
   24bec:	e1a00004 	mov	r0, r4
   24bf0:	e8bd8010 	pop	{r4, pc}

00024bf4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   24bf4:	e92d4070 	push	{r4, r5, r6, lr}
   24bf8:	e3a0c000 	mov	ip, #0
   24bfc:	e3a0e001 	mov	lr, #1
   24c00:	e1a04000 	mov	r4, r0
   24c04:	e59d5010 	ldr	r5, [sp, #16]
   24c08:	e5803018 	str	r3, [r0, #24]
   24c0c:	e5805008 	str	r5, [r0, #8]
   24c10:	e5c0e014 	strb	lr, [r0, #20]
   24c14:	e580c00c 	str	ip, [r0, #12]
   24c18:	e580c010 	str	ip, [r0, #16]
   24c1c:	ebffffb4 	bl	24af4 <CClassAllocator::Init(unsigned int, unsigned int)>
   24c20:	e1a00004 	mov	r0, r4
   24c24:	e8bd8070 	pop	{r4, r5, r6, pc}

00024c28 <CClassAllocator::Allocate()>:
   24c28:	e92d4030 	push	{r4, r5, lr}
   24c2c:	e5d03014 	ldrb	r3, [r0, #20]
   24c30:	e24dd00c 	sub	sp, sp, #12
   24c34:	e3530000 	cmp	r3, #0
   24c38:	e1a05000 	mov	r5, r0
   24c3c:	0a000002 	beq	24c4c <CClassAllocator::Allocate()+0x24>
   24c40:	e5900018 	ldr	r0, [r0, #24]
   24c44:	e3500000 	cmp	r0, #0
   24c48:	1a000015 	bne	24ca4 <CClassAllocator::Allocate()+0x7c>
   24c4c:	e5954010 	ldr	r4, [r5, #16]
   24c50:	e3540000 	cmp	r4, #0
   24c54:	0a00001d 	beq	24cd0 <CClassAllocator::Allocate()+0xa8>
   24c58:	e59f30a4 	ldr	r3, [pc, #164]	; 24d04 <CClassAllocator::Allocate()+0xdc>
   24c5c:	e5942000 	ldr	r2, [r4]
   24c60:	e1520003 	cmp	r2, r3
   24c64:	1a000022 	bne	24cf4 <CClassAllocator::Allocate()+0xcc>
   24c68:	e3a03000 	mov	r3, #0
   24c6c:	e5d51014 	ldrb	r1, [r5, #20]
   24c70:	e594200c 	ldr	r2, [r4, #12]
   24c74:	e1510003 	cmp	r1, r3
   24c78:	e5852010 	str	r2, [r5, #16]
   24c7c:	e584300c 	str	r3, [r4, #12]
   24c80:	1a000002 	bne	24c90 <CClassAllocator::Allocate()+0x68>
   24c84:	e2840010 	add	r0, r4, #16
   24c88:	e28dd00c 	add	sp, sp, #12
   24c8c:	e8bd8030 	pop	{r4, r5, pc}
   24c90:	e5953018 	ldr	r3, [r5, #24]
   24c94:	e3530000 	cmp	r3, #0
   24c98:	0afffff9 	beq	24c84 <CClassAllocator::Allocate()+0x5c>
   24c9c:	eb001c55 	bl	2bdf8 <LeaveCritical>
   24ca0:	eafffff7 	b	24c84 <CClassAllocator::Allocate()+0x5c>
   24ca4:	eb001c28 	bl	2bd4c <EnterCritical>
   24ca8:	e5954010 	ldr	r4, [r5, #16]
   24cac:	e3540000 	cmp	r4, #0
   24cb0:	1affffe8 	bne	24c58 <CClassAllocator::Allocate()+0x30>
   24cb4:	e5d53014 	ldrb	r3, [r5, #20]
   24cb8:	e3530000 	cmp	r3, #0
   24cbc:	0a000003 	beq	24cd0 <CClassAllocator::Allocate()+0xa8>
   24cc0:	e5953018 	ldr	r3, [r5, #24]
   24cc4:	e3530000 	cmp	r3, #0
   24cc8:	0a000000 	beq	24cd0 <CClassAllocator::Allocate()+0xa8>
   24ccc:	eb001c49 	bl	2bdf8 <LeaveCritical>
   24cd0:	eb0007c1 	bl	26bdc <CLogger::Get()>
   24cd4:	e5953004 	ldr	r3, [r5, #4]
   24cd8:	e5951008 	ldr	r1, [r5, #8]
   24cdc:	e3a02000 	mov	r2, #0
   24ce0:	e58d3000 	str	r3, [sp]
   24ce4:	e59f301c 	ldr	r3, [pc, #28]	; 24d08 <CClassAllocator::Allocate()+0xe0>
   24ce8:	eb0006f8 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24cec:	e3a00000 	mov	r0, #0
   24cf0:	eaffffe4 	b	24c88 <CClassAllocator::Allocate()+0x60>
   24cf4:	e3a02082 	mov	r2, #130	; 0x82
   24cf8:	e59f100c 	ldr	r1, [pc, #12]	; 24d0c <CClassAllocator::Allocate()+0xe4>
   24cfc:	e59f000c 	ldr	r0, [pc, #12]	; 24d10 <CClassAllocator::Allocate()+0xe8>
   24d00:	ebfffec2 	bl	24810 <assertion_failed>
   24d04:	4f425350 	.word	0x4f425350
   24d08:	00044f7c 	.word	0x00044f7c
   24d0c:	00044f14 	.word	0x00044f14
   24d10:	00044fa8 	.word	0x00044fa8

00024d14 <CClassAllocator::Free(void*)>:
   24d14:	e92d4070 	push	{r4, r5, r6, lr}
   24d18:	e2514000 	subs	r4, r1, #0
   24d1c:	0a00001e 	beq	24d9c <CClassAllocator::Free(void*)+0x88>
   24d20:	e59f30a4 	ldr	r3, [pc, #164]	; 24dcc <CClassAllocator::Free(void*)+0xb8>
   24d24:	e5142010 	ldr	r2, [r4, #-16]
   24d28:	e2446010 	sub	r6, r4, #16
   24d2c:	e1520003 	cmp	r2, r3
   24d30:	1a00001d 	bne	24dac <CClassAllocator::Free(void*)+0x98>
   24d34:	e5143004 	ldr	r3, [r4, #-4]
   24d38:	e3530000 	cmp	r3, #0
   24d3c:	1a00001e 	bne	24dbc <CClassAllocator::Free(void*)+0xa8>
   24d40:	e5d03014 	ldrb	r3, [r0, #20]
   24d44:	e1a05000 	mov	r5, r0
   24d48:	e3530000 	cmp	r3, #0
   24d4c:	0a000002 	beq	24d5c <CClassAllocator::Free(void*)+0x48>
   24d50:	e5900018 	ldr	r0, [r0, #24]
   24d54:	e3500000 	cmp	r0, #0
   24d58:	1a000003 	bne	24d6c <CClassAllocator::Free(void*)+0x58>
   24d5c:	e5953010 	ldr	r3, [r5, #16]
   24d60:	e5043004 	str	r3, [r4, #-4]
   24d64:	e5856010 	str	r6, [r5, #16]
   24d68:	e8bd8070 	pop	{r4, r5, r6, pc}
   24d6c:	eb001bf6 	bl	2bd4c <EnterCritical>
   24d70:	e5d52014 	ldrb	r2, [r5, #20]
   24d74:	e5953010 	ldr	r3, [r5, #16]
   24d78:	e3520000 	cmp	r2, #0
   24d7c:	e5043004 	str	r3, [r4, #-4]
   24d80:	e5856010 	str	r6, [r5, #16]
   24d84:	08bd8070 	popeq	{r4, r5, r6, pc}
   24d88:	e5950018 	ldr	r0, [r5, #24]
   24d8c:	e3500000 	cmp	r0, #0
   24d90:	08bd8070 	popeq	{r4, r5, r6, pc}
   24d94:	e8bd4070 	pop	{r4, r5, r6, lr}
   24d98:	ea001c16 	b	2bdf8 <LeaveCritical>
   24d9c:	e3a02090 	mov	r2, #144	; 0x90
   24da0:	e59f1028 	ldr	r1, [pc, #40]	; 24dd0 <CClassAllocator::Free(void*)+0xbc>
   24da4:	e59f0028 	ldr	r0, [pc, #40]	; 24dd4 <CClassAllocator::Free(void*)+0xc0>
   24da8:	ebfffe98 	bl	24810 <assertion_failed>
   24dac:	e3a02094 	mov	r2, #148	; 0x94
   24db0:	e59f1018 	ldr	r1, [pc, #24]	; 24dd0 <CClassAllocator::Free(void*)+0xbc>
   24db4:	e59f001c 	ldr	r0, [pc, #28]	; 24dd8 <CClassAllocator::Free(void*)+0xc4>
   24db8:	ebfffe94 	bl	24810 <assertion_failed>
   24dbc:	e3a02095 	mov	r2, #149	; 0x95
   24dc0:	e59f1008 	ldr	r1, [pc, #8]	; 24dd0 <CClassAllocator::Free(void*)+0xbc>
   24dc4:	e59f0010 	ldr	r0, [pc, #16]	; 24ddc <CClassAllocator::Free(void*)+0xc8>
   24dc8:	ebfffe90 	bl	24810 <assertion_failed>
   24dcc:	4f425350 	.word	0x4f425350
   24dd0:	00044f14 	.word	0x00044f14
   24dd4:	00044fc8 	.word	0x00044fc8
   24dd8:	00044fd4 	.word	0x00044fd4
   24ddc:	00044ff0 	.word	0x00044ff0

00024de0 <debug_hexdump(void const*, unsigned int, char const*)>:
   24de0:	e3520000 	cmp	r2, #0
   24de4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24de8:	e1a05001 	mov	r5, r1
   24dec:	e59f60f4 	ldr	r6, [pc, #244]	; 24ee8 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   24df0:	e1a04000 	mov	r4, r0
   24df4:	11a06002 	movne	r6, r2
   24df8:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   24dfc:	eb000776 	bl	26bdc <CLogger::Get()>
   24e00:	e58d4004 	str	r4, [sp, #4]
   24e04:	e58d5000 	str	r5, [sp]
   24e08:	e1a01006 	mov	r1, r6
   24e0c:	e59f30d8 	ldr	r3, [pc, #216]	; 24eec <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   24e10:	e3a02004 	mov	r2, #4
   24e14:	eb0006ad 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24e18:	e3550000 	cmp	r5, #0
   24e1c:	0a00002b 	beq	24ed0 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
   24e20:	e3a09004 	mov	r9, #4
   24e24:	e59f80c4 	ldr	r8, [pc, #196]	; 24ef0 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
   24e28:	e59f70c4 	ldr	r7, [pc, #196]	; 24ef4 <debug_hexdump(void const*, unsigned int, char const*)+0x114>
   24e2c:	eb00076a 	bl	26bdc <CLogger::Get()>
   24e30:	e5d4a00f 	ldrb	sl, [r4, #15]
   24e34:	e5d4e00e 	ldrb	lr, [r4, #14]
   24e38:	e5d4c00d 	ldrb	ip, [r4, #13]
   24e3c:	e5d4300c 	ldrb	r3, [r4, #12]
   24e40:	e5d4200b 	ldrb	r2, [r4, #11]
   24e44:	e5d4100a 	ldrb	r1, [r4, #10]
   24e48:	e5d4b009 	ldrb	fp, [r4, #9]
   24e4c:	e58da040 	str	sl, [sp, #64]	; 0x40
   24e50:	e5d4a008 	ldrb	sl, [r4, #8]
   24e54:	e58de03c 	str	lr, [sp, #60]	; 0x3c
   24e58:	e5d4e007 	ldrb	lr, [r4, #7]
   24e5c:	e58dc038 	str	ip, [sp, #56]	; 0x38
   24e60:	e5d4c006 	ldrb	ip, [r4, #6]
   24e64:	e58d3034 	str	r3, [sp, #52]	; 0x34
   24e68:	e5d43005 	ldrb	r3, [r4, #5]
   24e6c:	e58d2030 	str	r2, [sp, #48]	; 0x30
   24e70:	e5d42004 	ldrb	r2, [r4, #4]
   24e74:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   24e78:	e5d41003 	ldrb	r1, [r4, #3]
   24e7c:	e58db028 	str	fp, [sp, #40]	; 0x28
   24e80:	e5d4b002 	ldrb	fp, [r4, #2]
   24e84:	e58da024 	str	sl, [sp, #36]	; 0x24
   24e88:	e5d4a001 	ldrb	sl, [r4, #1]
   24e8c:	e58de020 	str	lr, [sp, #32]
   24e90:	e5d4e000 	ldrb	lr, [r4]
   24e94:	e58dc01c 	str	ip, [sp, #28]
   24e98:	e58d3018 	str	r3, [sp, #24]
   24e9c:	e004c008 	and	ip, r4, r8
   24ea0:	e58d2014 	str	r2, [sp, #20]
   24ea4:	e58d1010 	str	r1, [sp, #16]
   24ea8:	e1a03007 	mov	r3, r7
   24eac:	e1a02009 	mov	r2, r9
   24eb0:	e1a01006 	mov	r1, r6
   24eb4:	e58db00c 	str	fp, [sp, #12]
   24eb8:	e58da008 	str	sl, [sp, #8]
   24ebc:	e88d5000 	stm	sp, {ip, lr}
   24ec0:	eb000682 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24ec4:	e355000f 	cmp	r5, #15
   24ec8:	e2844010 	add	r4, r4, #16
   24ecc:	8a000001 	bhi	24ed8 <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
   24ed0:	e28dd04c 	add	sp, sp, #76	; 0x4c
   24ed4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ed8:	e2555010 	subs	r5, r5, #16
   24edc:	1affffd2 	bne	24e2c <debug_hexdump(void const*, unsigned int, char const*)+0x4c>
   24ee0:	e28dd04c 	add	sp, sp, #76	; 0x4c
   24ee4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ee8:	00045004 	.word	0x00045004
   24eec:	0004500c 	.word	0x0004500c
   24ef0:	0000ffff 	.word	0x0000ffff
   24ef4:	00045034 	.word	0x00045034

00024ef8 <debug_stacktrace(unsigned int const*, char const*)>:
   24ef8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24efc:	e3510000 	cmp	r1, #0
   24f00:	e59f8084 	ldr	r8, [pc, #132]	; 24f8c <debug_stacktrace(unsigned int const*, char const*)+0x94>
   24f04:	e24dd008 	sub	sp, sp, #8
   24f08:	e1a05000 	mov	r5, r0
   24f0c:	11a08001 	movne	r8, r1
   24f10:	e3a04000 	mov	r4, #0
   24f14:	e3a0a004 	mov	sl, #4
   24f18:	e59f6070 	ldr	r6, [pc, #112]	; 24f90 <debug_stacktrace(unsigned int const*, char const*)+0x98>
   24f1c:	e59f7070 	ldr	r7, [pc, #112]	; 24f94 <debug_stacktrace(unsigned int const*, char const*)+0x9c>
   24f20:	e59f9070 	ldr	r9, [pc, #112]	; 24f98 <debug_stacktrace(unsigned int const*, char const*)+0xa0>
   24f24:	ea000003 	b	24f38 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   24f28:	e2844001 	add	r4, r4, #1
   24f2c:	e3540040 	cmp	r4, #64	; 0x40
   24f30:	e2855004 	add	r5, r5, #4
   24f34:	0a000012 	beq	24f84 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
   24f38:	e5953000 	ldr	r3, [r5]
   24f3c:	e1530006 	cmp	r3, r6
   24f40:	9afffff8 	bls	24f28 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   24f44:	e1530007 	cmp	r3, r7
   24f48:	2afffff6 	bcs	24f28 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   24f4c:	e3130003 	tst	r3, #3
   24f50:	1afffff4 	bne	24f28 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   24f54:	eb000720 	bl	26bdc <CLogger::Get()>
   24f58:	e5953000 	ldr	r3, [r5]
   24f5c:	e1a0200a 	mov	r2, sl
   24f60:	e58d4000 	str	r4, [sp]
   24f64:	e58d3004 	str	r3, [sp, #4]
   24f68:	e1a01008 	mov	r1, r8
   24f6c:	e1a03009 	mov	r3, r9
   24f70:	e2844001 	add	r4, r4, #1
   24f74:	eb000655 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24f78:	e3540040 	cmp	r4, #64	; 0x40
   24f7c:	e2855004 	add	r5, r5, #4
   24f80:	1affffec 	bne	24f38 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   24f84:	e28dd008 	add	sp, sp, #8
   24f88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24f8c:	00045004 	.word	0x00045004
   24f90:	00007fff 	.word	0x00007fff
   24f94:	0003ed90 	.word	0x0003ed90
   24f98:	0004508c 	.word	0x0004508c

00024f9c <CDevice::~CDevice()>:
   24f9c:	e12fff1e 	bx	lr

00024fa0 <CDevice::Read(void*, unsigned int)>:
   24fa0:	e3e00000 	mvn	r0, #0
   24fa4:	e12fff1e 	bx	lr

00024fa8 <CDevice::Seek(unsigned long long)>:
   24fa8:	e3e00000 	mvn	r0, #0
   24fac:	e3e01000 	mvn	r1, #0
   24fb0:	e12fff1e 	bx	lr

00024fb4 <CDevice::RemoveDevice()>:
   24fb4:	e3a00000 	mov	r0, #0
   24fb8:	e12fff1e 	bx	lr

00024fbc <CDevice::~CDevice()>:
   24fbc:	e92d4010 	push	{r4, lr}
   24fc0:	e1a04000 	mov	r4, r0
   24fc4:	e3a01004 	mov	r1, #4
   24fc8:	eb00183b 	bl	2b0bc <operator delete(void*, unsigned int)>
   24fcc:	e1a00004 	mov	r0, r4
   24fd0:	e8bd8010 	pop	{r4, pc}

00024fd4 <CDevice::CDevice()>:
   24fd4:	e59f3004 	ldr	r3, [pc, #4]	; 24fe0 <CDevice::CDevice()+0xc>
   24fd8:	e5803000 	str	r3, [r0]
   24fdc:	e12fff1e 	bx	lr
   24fe0:	000450a8 	.word	0x000450a8

00024fe4 <CDeviceNameService::CDeviceNameService()>:
   24fe4:	e3a02000 	mov	r2, #0
   24fe8:	e59f102c 	ldr	r1, [pc, #44]	; 2501c <CDeviceNameService::CDeviceNameService()+0x38>
   24fec:	e5802000 	str	r2, [r0]
   24ff0:	e591c000 	ldr	ip, [r1]
   24ff4:	e5802004 	str	r2, [r0, #4]
   24ff8:	e15c0002 	cmp	ip, r2
   24ffc:	1a000001 	bne	25008 <CDeviceNameService::CDeviceNameService()+0x24>
   25000:	e5810000 	str	r0, [r1]
   25004:	e12fff1e 	bx	lr
   25008:	e92d4010 	push	{r4, lr}
   2500c:	e3a0201f 	mov	r2, #31
   25010:	e59f1008 	ldr	r1, [pc, #8]	; 25020 <CDeviceNameService::CDeviceNameService()+0x3c>
   25014:	e59f0008 	ldr	r0, [pc, #8]	; 25024 <CDeviceNameService::CDeviceNameService()+0x40>
   25018:	ebfffdfc 	bl	24810 <assertion_failed>
   2501c:	0004e210 	.word	0x0004e210
   25020:	000450c0 	.word	0x000450c0
   25024:	000450d8 	.word	0x000450d8

00025028 <CDeviceNameService::~CDeviceNameService()>:
   25028:	e5903000 	ldr	r3, [r0]
   2502c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25030:	e3530000 	cmp	r3, #0
   25034:	e1a05000 	mov	r5, r0
   25038:	0a00000e 	beq	25078 <CDeviceNameService::~CDeviceNameService()+0x50>
   2503c:	e3a06000 	mov	r6, #0
   25040:	e3a07010 	mov	r7, #16
   25044:	e5930004 	ldr	r0, [r3, #4]
   25048:	e5934000 	ldr	r4, [r3]
   2504c:	e3500000 	cmp	r0, #0
   25050:	0a000000 	beq	25058 <CDeviceNameService::~CDeviceNameService()+0x30>
   25054:	eb001812 	bl	2b0a4 <operator delete[](void*)>
   25058:	e5950000 	ldr	r0, [r5]
   2505c:	e1a01007 	mov	r1, r7
   25060:	e5806004 	str	r6, [r0, #4]
   25064:	e5806008 	str	r6, [r0, #8]
   25068:	eb001813 	bl	2b0bc <operator delete(void*, unsigned int)>
   2506c:	e2543000 	subs	r3, r4, #0
   25070:	e5854000 	str	r4, [r5]
   25074:	1afffff2 	bne	25044 <CDeviceNameService::~CDeviceNameService()+0x1c>
   25078:	e3a02000 	mov	r2, #0
   2507c:	e59f3008 	ldr	r3, [pc, #8]	; 2508c <CDeviceNameService::~CDeviceNameService()+0x64>
   25080:	e1a00005 	mov	r0, r5
   25084:	e5832000 	str	r2, [r3]
   25088:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2508c:	0004e210 	.word	0x0004e210

00025090 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   25090:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25094:	e1a05000 	mov	r5, r0
   25098:	e5900004 	ldr	r0, [r0, #4]
   2509c:	e1a06001 	mov	r6, r1
   250a0:	e3500000 	cmp	r0, #0
   250a4:	e1a07002 	mov	r7, r2
   250a8:	e1a08003 	mov	r8, r3
   250ac:	1a000017 	bne	25110 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
   250b0:	e3a00010 	mov	r0, #16
   250b4:	eb0017f2 	bl	2b084 <operator new(unsigned int)>
   250b8:	e3560000 	cmp	r6, #0
   250bc:	e1a04000 	mov	r4, r0
   250c0:	0a000014 	beq	25118 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
   250c4:	e1a00006 	mov	r0, r6
   250c8:	eb0013ef 	bl	2a08c <strlen>
   250cc:	e2800001 	add	r0, r0, #1
   250d0:	eb0017ec 	bl	2b088 <operator new[](unsigned int)>
   250d4:	e1a01006 	mov	r1, r6
   250d8:	e5840004 	str	r0, [r4, #4]
   250dc:	eb0014a8 	bl	2a384 <strcpy>
   250e0:	e3570000 	cmp	r7, #0
   250e4:	0a00000f 	beq	25128 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x98>
   250e8:	e5952004 	ldr	r2, [r5, #4]
   250ec:	e5953000 	ldr	r3, [r5]
   250f0:	e3520000 	cmp	r2, #0
   250f4:	e5847008 	str	r7, [r4, #8]
   250f8:	e5c4800c 	strb	r8, [r4, #12]
   250fc:	e5843000 	str	r3, [r4]
   25100:	e5854000 	str	r4, [r5]
   25104:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25108:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2510c:	ea001b39 	b	2bdf8 <LeaveCritical>
   25110:	eb001b0d 	bl	2bd4c <EnterCritical>
   25114:	eaffffe5 	b	250b0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
   25118:	e3a0203b 	mov	r2, #59	; 0x3b
   2511c:	e59f1014 	ldr	r1, [pc, #20]	; 25138 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   25120:	e59f0014 	ldr	r0, [pc, #20]	; 2513c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xac>
   25124:	ebfffdb9 	bl	24810 <assertion_failed>
   25128:	e3a02040 	mov	r2, #64	; 0x40
   2512c:	e59f1004 	ldr	r1, [pc, #4]	; 25138 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   25130:	e59f0008 	ldr	r0, [pc, #8]	; 25140 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
   25134:	ebfffdb5 	bl	24810 <assertion_failed>
   25138:	000450c0 	.word	0x000450c0
   2513c:	0003fde4 	.word	0x0003fde4
   25140:	000450e4 	.word	0x000450e4

00025144 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   25144:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25148:	e2515000 	subs	r5, r1, #0
   2514c:	0a00003c 	beq	25244 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
   25150:	e1a08000 	mov	r8, r0
   25154:	e5900004 	ldr	r0, [r0, #4]
   25158:	e1a07002 	mov	r7, r2
   2515c:	e3500000 	cmp	r0, #0
   25160:	1a00002c 	bne	25218 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd4>
   25164:	e5984000 	ldr	r4, [r8]
   25168:	e3540000 	cmp	r4, #0
   2516c:	0a00003b 	beq	25260 <CDeviceNameService::RemoveDevice(char const*, bool)+0x11c>
   25170:	e5941004 	ldr	r1, [r4, #4]
   25174:	e3510000 	cmp	r1, #0
   25178:	13a06000 	movne	r6, #0
   2517c:	1a000001 	bne	25188 <CDeviceNameService::RemoveDevice(char const*, bool)+0x44>
   25180:	ea00000e 	b	251c0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x7c>
   25184:	e1a04003 	mov	r4, r3
   25188:	e1a00005 	mov	r0, r5
   2518c:	eb0013c8 	bl	2a0b4 <strcmp>
   25190:	e3500000 	cmp	r0, #0
   25194:	1a000002 	bne	251a4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x60>
   25198:	e5d4300c 	ldrb	r3, [r4, #12]
   2519c:	e1530007 	cmp	r3, r7
   251a0:	0a00000a 	beq	251d0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x8c>
   251a4:	e5943000 	ldr	r3, [r4]
   251a8:	e3530000 	cmp	r3, #0
   251ac:	0a00001d 	beq	25228 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe4>
   251b0:	e5931004 	ldr	r1, [r3, #4]
   251b4:	e1a06004 	mov	r6, r4
   251b8:	e3510000 	cmp	r1, #0
   251bc:	1afffff0 	bne	25184 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
   251c0:	e3a0205e 	mov	r2, #94	; 0x5e
   251c4:	e59f1098 	ldr	r1, [pc, #152]	; 25264 <CDeviceNameService::RemoveDevice(char const*, bool)+0x120>
   251c8:	e59f0098 	ldr	r0, [pc, #152]	; 25268 <CDeviceNameService::RemoveDevice(char const*, bool)+0x124>
   251cc:	ebfffd8f 	bl	24810 <assertion_failed>
   251d0:	e3560000 	cmp	r6, #0
   251d4:	0a00001e 	beq	25254 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
   251d8:	e5943000 	ldr	r3, [r4]
   251dc:	e5863000 	str	r3, [r6]
   251e0:	e5983004 	ldr	r3, [r8, #4]
   251e4:	e3530000 	cmp	r3, #0
   251e8:	1a000013 	bne	2523c <CDeviceNameService::RemoveDevice(char const*, bool)+0xf8>
   251ec:	e5940004 	ldr	r0, [r4, #4]
   251f0:	e3500000 	cmp	r0, #0
   251f4:	0a000000 	beq	251fc <CDeviceNameService::RemoveDevice(char const*, bool)+0xb8>
   251f8:	eb0017a9 	bl	2b0a4 <operator delete[](void*)>
   251fc:	e3a03000 	mov	r3, #0
   25200:	e1a00004 	mov	r0, r4
   25204:	e5843004 	str	r3, [r4, #4]
   25208:	e5843008 	str	r3, [r4, #8]
   2520c:	e3a01010 	mov	r1, #16
   25210:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25214:	ea0017a8 	b	2b0bc <operator delete(void*, unsigned int)>
   25218:	eb001acb 	bl	2bd4c <EnterCritical>
   2521c:	e5984000 	ldr	r4, [r8]
   25220:	e3540000 	cmp	r4, #0
   25224:	1affffd1 	bne	25170 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   25228:	e5983004 	ldr	r3, [r8, #4]
   2522c:	e3530000 	cmp	r3, #0
   25230:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25234:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25238:	ea001aee 	b	2bdf8 <LeaveCritical>
   2523c:	eb001aed 	bl	2bdf8 <LeaveCritical>
   25240:	eaffffe9 	b	251ec <CDeviceNameService::RemoveDevice(char const*, bool)+0xa8>
   25244:	e3a02056 	mov	r2, #86	; 0x56
   25248:	e59f1014 	ldr	r1, [pc, #20]	; 25264 <CDeviceNameService::RemoveDevice(char const*, bool)+0x120>
   2524c:	e59f0018 	ldr	r0, [pc, #24]	; 2526c <CDeviceNameService::RemoveDevice(char const*, bool)+0x128>
   25250:	ebfffd6e 	bl	24810 <assertion_failed>
   25254:	e5943000 	ldr	r3, [r4]
   25258:	e5883000 	str	r3, [r8]
   2525c:	eaffffdf 	b	251e0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x9c>
   25260:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25264:	000450c0 	.word	0x000450c0
   25268:	000450f4 	.word	0x000450f4
   2526c:	0003fde4 	.word	0x0003fde4

00025270 <CDeviceNameService::GetDevice(char const*, bool)>:
   25270:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25274:	e2515000 	subs	r5, r1, #0
   25278:	e24dd00c 	sub	sp, sp, #12
   2527c:	0a00002b 	beq	25330 <CDeviceNameService::GetDevice(char const*, bool)+0xc0>
   25280:	e1a07000 	mov	r7, r0
   25284:	e5900004 	ldr	r0, [r0, #4]
   25288:	e1a06002 	mov	r6, r2
   2528c:	e3500000 	cmp	r0, #0
   25290:	1a000014 	bne	252e8 <CDeviceNameService::GetDevice(char const*, bool)+0x78>
   25294:	e5974000 	ldr	r4, [r7]
   25298:	e3540000 	cmp	r4, #0
   2529c:	1a00000a 	bne	252cc <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   252a0:	ea000017 	b	25304 <CDeviceNameService::GetDevice(char const*, bool)+0x94>
   252a4:	e1a00005 	mov	r0, r5
   252a8:	eb001381 	bl	2a0b4 <strcmp>
   252ac:	e3500000 	cmp	r0, #0
   252b0:	1a000002 	bne	252c0 <CDeviceNameService::GetDevice(char const*, bool)+0x50>
   252b4:	e5d4300c 	ldrb	r3, [r4, #12]
   252b8:	e1530006 	cmp	r3, r6
   252bc:	0a000013 	beq	25310 <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
   252c0:	e5944000 	ldr	r4, [r4]
   252c4:	e3540000 	cmp	r4, #0
   252c8:	0a00000a 	beq	252f8 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   252cc:	e5941004 	ldr	r1, [r4, #4]
   252d0:	e3510000 	cmp	r1, #0
   252d4:	1afffff2 	bne	252a4 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   252d8:	e3a02092 	mov	r2, #146	; 0x92
   252dc:	e59f1084 	ldr	r1, [pc, #132]	; 25368 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   252e0:	e59f0084 	ldr	r0, [pc, #132]	; 2536c <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
   252e4:	ebfffd49 	bl	24810 <assertion_failed>
   252e8:	eb001a97 	bl	2bd4c <EnterCritical>
   252ec:	e5974000 	ldr	r4, [r7]
   252f0:	e3540000 	cmp	r4, #0
   252f4:	1afffff4 	bne	252cc <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   252f8:	e5973004 	ldr	r3, [r7, #4]
   252fc:	e3530000 	cmp	r3, #0
   25300:	1a00000e 	bne	25340 <CDeviceNameService::GetDevice(char const*, bool)+0xd0>
   25304:	e3a00000 	mov	r0, #0
   25308:	e28dd00c 	add	sp, sp, #12
   2530c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   25310:	e5973004 	ldr	r3, [r7, #4]
   25314:	e5940008 	ldr	r0, [r4, #8]
   25318:	e3530000 	cmp	r3, #0
   2531c:	1a000009 	bne	25348 <CDeviceNameService::GetDevice(char const*, bool)+0xd8>
   25320:	e3500000 	cmp	r0, #0
   25324:	0a00000b 	beq	25358 <CDeviceNameService::GetDevice(char const*, bool)+0xe8>
   25328:	e28dd00c 	add	sp, sp, #12
   2532c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   25330:	e3a0208b 	mov	r2, #139	; 0x8b
   25334:	e59f102c 	ldr	r1, [pc, #44]	; 25368 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   25338:	e59f0030 	ldr	r0, [pc, #48]	; 25370 <CDeviceNameService::GetDevice(char const*, bool)+0x100>
   2533c:	ebfffd33 	bl	24810 <assertion_failed>
   25340:	eb001aac 	bl	2bdf8 <LeaveCritical>
   25344:	eaffffee 	b	25304 <CDeviceNameService::GetDevice(char const*, bool)+0x94>
   25348:	e58d0004 	str	r0, [sp, #4]
   2534c:	eb001aa9 	bl	2bdf8 <LeaveCritical>
   25350:	e59d0004 	ldr	r0, [sp, #4]
   25354:	eafffff1 	b	25320 <CDeviceNameService::GetDevice(char const*, bool)+0xb0>
   25358:	e3a0209a 	mov	r2, #154	; 0x9a
   2535c:	e59f1004 	ldr	r1, [pc, #4]	; 25368 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   25360:	e59f000c 	ldr	r0, [pc, #12]	; 25374 <CDeviceNameService::GetDevice(char const*, bool)+0x104>
   25364:	ebfffd29 	bl	24810 <assertion_failed>
   25368:	000450c0 	.word	0x000450c0
   2536c:	000450f4 	.word	0x000450f4
   25370:	0003fde4 	.word	0x0003fde4
   25374:	00045108 	.word	0x00045108

00025378 <CDeviceNameService::Get()>:
   25378:	e59f3020 	ldr	r3, [pc, #32]	; 253a0 <CDeviceNameService::Get()+0x28>
   2537c:	e5930000 	ldr	r0, [r3]
   25380:	e3500000 	cmp	r0, #0
   25384:	0a000000 	beq	2538c <CDeviceNameService::Get()+0x14>
   25388:	e12fff1e 	bx	lr
   2538c:	e92d4010 	push	{r4, lr}
   25390:	e3a020cc 	mov	r2, #204	; 0xcc
   25394:	e59f1008 	ldr	r1, [pc, #8]	; 253a4 <CDeviceNameService::Get()+0x2c>
   25398:	e59f0008 	ldr	r0, [pc, #8]	; 253a8 <CDeviceNameService::Get()+0x30>
   2539c:	ebfffd1b 	bl	24810 <assertion_failed>
   253a0:	0004e210 	.word	0x0004e210
   253a4:	000450c0 	.word	0x000450c0
   253a8:	00045118 	.word	0x00045118

000253ac <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   253ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   253b0:	e1a07001 	mov	r7, r1
   253b4:	e1a08002 	mov	r8, r2
   253b8:	e24dd010 	sub	sp, sp, #16
   253bc:	e1a04000 	mov	r4, r0
   253c0:	e1a0000d 	mov	r0, sp
   253c4:	e1a05003 	mov	r5, r3
   253c8:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
   253cc:	eb0009e8 	bl	27b74 <CString::CString()>
   253d0:	e1a03008 	mov	r3, r8
   253d4:	e1a02007 	mov	r2, r7
   253d8:	e1a0000d 	mov	r0, sp
   253dc:	e59f102c 	ldr	r1, [pc, #44]	; 25410 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
   253e0:	eb000f26 	bl	29080 <CString::Format(char const*, ...)>
   253e4:	e1a0000d 	mov	r0, sp
   253e8:	eb0009f7 	bl	27bcc <CString::operator char const*() const>
   253ec:	e1a03006 	mov	r3, r6
   253f0:	e1a01000 	mov	r1, r0
   253f4:	e1a02005 	mov	r2, r5
   253f8:	e1a00004 	mov	r0, r4
   253fc:	ebffff23 	bl	25090 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   25400:	e1a0000d 	mov	r0, sp
   25404:	eb0009a7 	bl	27aa8 <CString::~CString()>
   25408:	e28dd010 	add	sp, sp, #16
   2540c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25410:	00045124 	.word	0x00045124

00025414 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   25414:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25418:	e1a06001 	mov	r6, r1
   2541c:	e1a07002 	mov	r7, r2
   25420:	e24dd014 	sub	sp, sp, #20
   25424:	e1a04000 	mov	r4, r0
   25428:	e1a0000d 	mov	r0, sp
   2542c:	e1a05003 	mov	r5, r3
   25430:	eb0009cf 	bl	27b74 <CString::CString()>
   25434:	e1a03007 	mov	r3, r7
   25438:	e1a02006 	mov	r2, r6
   2543c:	e1a0000d 	mov	r0, sp
   25440:	e59f1028 	ldr	r1, [pc, #40]	; 25470 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
   25444:	eb000f0d 	bl	29080 <CString::Format(char const*, ...)>
   25448:	e1a0000d 	mov	r0, sp
   2544c:	eb0009de 	bl	27bcc <CString::operator char const*() const>
   25450:	e1a02005 	mov	r2, r5
   25454:	e1a01000 	mov	r1, r0
   25458:	e1a00004 	mov	r0, r4
   2545c:	ebffff38 	bl	25144 <CDeviceNameService::RemoveDevice(char const*, bool)>
   25460:	e1a0000d 	mov	r0, sp
   25464:	eb00098f 	bl	27aa8 <CString::~CString()>
   25468:	e28dd014 	add	sp, sp, #20
   2546c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   25470:	00045124 	.word	0x00045124

00025474 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   25474:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25478:	e1a06001 	mov	r6, r1
   2547c:	e1a07002 	mov	r7, r2
   25480:	e24dd014 	sub	sp, sp, #20
   25484:	e1a04000 	mov	r4, r0
   25488:	e1a0000d 	mov	r0, sp
   2548c:	e1a05003 	mov	r5, r3
   25490:	eb0009b7 	bl	27b74 <CString::CString()>
   25494:	e1a03007 	mov	r3, r7
   25498:	e1a02006 	mov	r2, r6
   2549c:	e1a0000d 	mov	r0, sp
   254a0:	e59f1030 	ldr	r1, [pc, #48]	; 254d8 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
   254a4:	eb000ef5 	bl	29080 <CString::Format(char const*, ...)>
   254a8:	e1a0000d 	mov	r0, sp
   254ac:	eb0009c6 	bl	27bcc <CString::operator char const*() const>
   254b0:	e1a02005 	mov	r2, r5
   254b4:	e1a01000 	mov	r1, r0
   254b8:	e1a00004 	mov	r0, r4
   254bc:	ebffff6b 	bl	25270 <CDeviceNameService::GetDevice(char const*, bool)>
   254c0:	e1a04000 	mov	r4, r0
   254c4:	e1a0000d 	mov	r0, sp
   254c8:	eb000976 	bl	27aa8 <CString::~CString()>
   254cc:	e1a00004 	mov	r0, r4
   254d0:	e28dd014 	add	sp, sp, #20
   254d4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   254d8:	00045124 	.word	0x00045124

000254dc <CDeviceNameService::ListDevices(CDevice*)>:
   254dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   254e0:	e2516000 	subs	r6, r1, #0
   254e4:	e24dd018 	sub	sp, sp, #24
   254e8:	0a000034 	beq	255c0 <CDeviceNameService::ListDevices(CDevice*)+0xe4>
   254ec:	e5904000 	ldr	r4, [r0]
   254f0:	e3540000 	cmp	r4, #0
   254f4:	0a00002f 	beq	255b8 <CDeviceNameService::ListDevices(CDevice*)+0xdc>
   254f8:	e3a05000 	mov	r5, #0
   254fc:	e59f90cc 	ldr	r9, [pc, #204]	; 255d0 <CDeviceNameService::ListDevices(CDevice*)+0xf4>
   25500:	ea00001b 	b	25574 <CDeviceNameService::ListDevices(CDevice*)+0x98>
   25504:	e2855001 	add	r5, r5, #1
   25508:	e215a003 	ands	sl, r5, #3
   2550c:	13a01020 	movne	r1, #32
   25510:	03a0100a 	moveq	r1, #10
   25514:	e5d4200c 	ldrb	r2, [r4, #12]
   25518:	e28d0008 	add	r0, sp, #8
   2551c:	e3520000 	cmp	r2, #0
   25520:	03a02063 	moveq	r2, #99	; 0x63
   25524:	13a02062 	movne	r2, #98	; 0x62
   25528:	e58d1000 	str	r1, [sp]
   2552c:	e1a01009 	mov	r1, r9
   25530:	eb000ed2 	bl	29080 <CString::Format(char const*, ...)>
   25534:	e5963000 	ldr	r3, [r6]
   25538:	e28d0008 	add	r0, sp, #8
   2553c:	e593700c 	ldr	r7, [r3, #12]
   25540:	eb0009a1 	bl	27bcc <CString::operator char const*() const>
   25544:	e1a08000 	mov	r8, r0
   25548:	e28d0008 	add	r0, sp, #8
   2554c:	eb0009cc 	bl	27c84 <CString::GetLength() const>
   25550:	e1a01008 	mov	r1, r8
   25554:	e1a02000 	mov	r2, r0
   25558:	e1a00006 	mov	r0, r6
   2555c:	e12fff37 	blx	r7
   25560:	e5944000 	ldr	r4, [r4]
   25564:	e28d0008 	add	r0, sp, #8
   25568:	eb00094e 	bl	27aa8 <CString::~CString()>
   2556c:	e3540000 	cmp	r4, #0
   25570:	0a000008 	beq	25598 <CDeviceNameService::ListDevices(CDevice*)+0xbc>
   25574:	e28d0008 	add	r0, sp, #8
   25578:	eb00097d 	bl	27b74 <CString::CString()>
   2557c:	e5943004 	ldr	r3, [r4, #4]
   25580:	e3530000 	cmp	r3, #0
   25584:	1affffde 	bne	25504 <CDeviceNameService::ListDevices(CDevice*)+0x28>
   25588:	e3a020b9 	mov	r2, #185	; 0xb9
   2558c:	e59f1040 	ldr	r1, [pc, #64]	; 255d4 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   25590:	e59f0040 	ldr	r0, [pc, #64]	; 255d8 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
   25594:	ebfffc9d 	bl	24810 <assertion_failed>
   25598:	e35a0000 	cmp	sl, #0
   2559c:	0a000005 	beq	255b8 <CDeviceNameService::ListDevices(CDevice*)+0xdc>
   255a0:	e5963000 	ldr	r3, [r6]
   255a4:	e1a00006 	mov	r0, r6
   255a8:	e593300c 	ldr	r3, [r3, #12]
   255ac:	e3a02001 	mov	r2, #1
   255b0:	e59f1024 	ldr	r1, [pc, #36]	; 255dc <CDeviceNameService::ListDevices(CDevice*)+0x100>
   255b4:	e12fff33 	blx	r3
   255b8:	e28dd018 	add	sp, sp, #24
   255bc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   255c0:	e3a020b0 	mov	r2, #176	; 0xb0
   255c4:	e59f1008 	ldr	r1, [pc, #8]	; 255d4 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   255c8:	e59f0010 	ldr	r0, [pc, #16]	; 255e0 <CDeviceNameService::ListDevices(CDevice*)+0x104>
   255cc:	ebfffc8f 	bl	24810 <assertion_failed>
   255d0:	0004513c 	.word	0x0004513c
   255d4:	000450c0 	.word	0x000450c0
   255d8:	000450f4 	.word	0x000450f4
   255dc:	00047700 	.word	0x00047700
   255e0:	0004512c 	.word	0x0004512c

000255e4 <CGPIOPin::CGPIOPin()>:
   255e4:	e92d4010 	push	{r4, lr}
   255e8:	e3a01000 	mov	r1, #0
   255ec:	e3a02006 	mov	r2, #6
   255f0:	e3a04036 	mov	r4, #54	; 0x36
   255f4:	e3a0c00a 	mov	ip, #10
   255f8:	e59fe01c 	ldr	lr, [pc, #28]	; 2561c <CGPIOPin::CGPIOPin()+0x38>
   255fc:	e5804004 	str	r4, [r0, #4]
   25600:	e580e000 	str	lr, [r0]
   25604:	e5c0c010 	strb	ip, [r0, #16]
   25608:	e5801018 	str	r1, [r0, #24]
   2560c:	e580101c 	str	r1, [r0, #28]
   25610:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   25614:	e5c02026 	strb	r2, [r0, #38]	; 0x26
   25618:	e8bd8010 	pop	{r4, pc}
   2561c:	00045150 	.word	0x00045150

00025620 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   25620:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25624:	e3a0c006 	mov	ip, #6
   25628:	e3a0e000 	mov	lr, #0
   2562c:	e3a07036 	mov	r7, #54	; 0x36
   25630:	e3a0600a 	mov	r6, #10
   25634:	e1a04000 	mov	r4, r0
   25638:	e1a05002 	mov	r5, r2
   2563c:	e5803018 	str	r3, [r0, #24]
   25640:	e59f302c 	ldr	r3, [pc, #44]	; 25674 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
   25644:	e580e01c 	str	lr, [r0, #28]
   25648:	e8800088 	stm	r0, {r3, r7}
   2564c:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
   25650:	e5c0c026 	strb	ip, [r0, #38]	; 0x26
   25654:	e5c06010 	strb	r6, [r0, #16]
   25658:	eb00000d 	bl	25694 <CGPIOPin::AssignPin(unsigned int)>
   2565c:	e1a00004 	mov	r0, r4
   25660:	e1a01005 	mov	r1, r5
   25664:	e3a02001 	mov	r2, #1
   25668:	eb00002a 	bl	25718 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2566c:	e1a00004 	mov	r0, r4
   25670:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25674:	00045150 	.word	0x00045150

00025678 <CGPIOPin::~CGPIOPin()>:
   25678:	e12fff1e 	bx	lr

0002567c <CGPIOPin::~CGPIOPin()>:
   2567c:	e92d4010 	push	{r4, lr}
   25680:	e1a04000 	mov	r4, r0
   25684:	e3a01028 	mov	r1, #40	; 0x28
   25688:	eb00168b 	bl	2b0bc <operator delete(void*, unsigned int)>
   2568c:	e1a00004 	mov	r0, r4
   25690:	e8bd8010 	pop	{r4, pc}

00025694 <CGPIOPin::AssignPin(unsigned int)>:
   25694:	e5903004 	ldr	r3, [r0, #4]
   25698:	e92d4070 	push	{r4, r5, r6, lr}
   2569c:	e3530036 	cmp	r3, #54	; 0x36
   256a0:	1a000017 	bne	25704 <CGPIOPin::AssignPin(unsigned int)+0x70>
   256a4:	e1a05000 	mov	r5, r0
   256a8:	e3510035 	cmp	r1, #53	; 0x35
   256ac:	e1a04001 	mov	r4, r1
   256b0:	e5851004 	str	r1, [r5, #4]
   256b4:	8a000007 	bhi	256d8 <CGPIOPin::AssignPin(unsigned int)+0x44>
   256b8:	e3a03001 	mov	r3, #1
   256bc:	e204201f 	and	r2, r4, #31
   256c0:	e1a042a4 	lsr	r4, r4, #5
   256c4:	e1a03213 	lsl	r3, r3, r2
   256c8:	e1a04104 	lsl	r4, r4, #2
   256cc:	e585300c 	str	r3, [r5, #12]
   256d0:	e5854008 	str	r4, [r5, #8]
   256d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   256d8:	eb000839 	bl	277c4 <CMachineInfo::Get()>
   256dc:	e6ef1074 	uxtb	r1, r4
   256e0:	eb000799 	bl	2754c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   256e4:	e3500035 	cmp	r0, #53	; 0x35
   256e8:	e1a04000 	mov	r4, r0
   256ec:	e5850004 	str	r0, [r5, #4]
   256f0:	9afffff0 	bls	256b8 <CGPIOPin::AssignPin(unsigned int)+0x24>
   256f4:	e59f1018 	ldr	r1, [pc, #24]	; 25714 <CGPIOPin::AssignPin(unsigned int)+0x80>
   256f8:	e3a02047 	mov	r2, #71	; 0x47
   256fc:	e2810020 	add	r0, r1, #32
   25700:	ebfffc42 	bl	24810 <assertion_failed>
   25704:	e59f1008 	ldr	r1, [pc, #8]	; 25714 <CGPIOPin::AssignPin(unsigned int)+0x80>
   25708:	e3a02040 	mov	r2, #64	; 0x40
   2570c:	e281000c 	add	r0, r1, #12
   25710:	ebfffc3e 	bl	24810 <assertion_failed>
   25714:	00045158 	.word	0x00045158

00025718 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   25718:	e3510009 	cmp	r1, #9
   2571c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25720:	ca000049 	bgt	2584c <CGPIOPin::SetMode(TGPIOMode, bool)+0x134>
   25724:	e1a06002 	mov	r6, r2
   25728:	e1a04000 	mov	r4, r0
   2572c:	e5c01010 	strb	r1, [r0, #16]
   25730:	e3a02000 	mov	r2, #0
   25734:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   25738:	e5d03010 	ldrb	r3, [r0, #16]
   2573c:	e2431004 	sub	r1, r3, #4
   25740:	e6efc071 	uxtb	ip, r1
   25744:	e35c0005 	cmp	ip, #5
   25748:	8a00000a 	bhi	25778 <CGPIOPin::SetMode(TGPIOMode, bool)+0x60>
   2574c:	e1560002 	cmp	r6, r2
   25750:	0a000003 	beq	25764 <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
   25754:	e1a01002 	mov	r1, r2
   25758:	eb000205 	bl	25f74 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2575c:	e5d43010 	ldrb	r3, [r4, #16]
   25760:	e2431004 	sub	r1, r3, #4
   25764:	e1a00004 	mov	r0, r4
   25768:	eb000229 	bl	26014 <CGPIOPin::SetAlternateFunction(unsigned int)>
   2576c:	e3a03000 	mov	r3, #0
   25770:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25774:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25778:	e3530001 	cmp	r3, #1
   2577c:	13a03000 	movne	r3, #0
   25780:	02063001 	andeq	r3, r6, #1
   25784:	e3530000 	cmp	r3, #0
   25788:	1a00003f 	bne	2588c <CGPIOPin::SetMode(TGPIOMode, bool)+0x174>
   2578c:	e5943004 	ldr	r3, [r4, #4]
   25790:	e3530035 	cmp	r3, #53	; 0x35
   25794:	8a00003f 	bhi	25898 <CGPIOPin::SetMode(TGPIOMode, bool)+0x180>
   25798:	e59f5108 	ldr	r5, [pc, #264]	; 258a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x190>
   2579c:	e59f8108 	ldr	r8, [pc, #264]	; 258ac <CGPIOPin::SetMode(TGPIOMode, bool)+0x194>
   257a0:	e0852395 	umull	r2, r5, r5, r3
   257a4:	e5980000 	ldr	r0, [r8]
   257a8:	e1a051a5 	lsr	r5, r5, #3
   257ac:	e2857302 	add	r7, r5, #134217728	; 0x8000000
   257b0:	e0855105 	add	r5, r5, r5, lsl #2
   257b4:	e2877702 	add	r7, r7, #524288	; 0x80000
   257b8:	e0435085 	sub	r5, r3, r5, lsl #1
   257bc:	e3500000 	cmp	r0, #0
   257c0:	e1a07107 	lsl	r7, r7, #2
   257c4:	e0855085 	add	r5, r5, r5, lsl #1
   257c8:	1a00001d 	bne	25844 <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
   257cc:	e5d42010 	ldrb	r2, [r4, #16]
   257d0:	e3a01007 	mov	r1, #7
   257d4:	e2422001 	sub	r2, r2, #1
   257d8:	e16f2f12 	clz	r2, r2
   257dc:	e5973000 	ldr	r3, [r7]
   257e0:	e1a022a2 	lsr	r2, r2, #5
   257e4:	e1c33511 	bic	r3, r3, r1, lsl r5
   257e8:	e1835512 	orr	r5, r3, r2, lsl r5
   257ec:	e5875000 	str	r5, [r7]
   257f0:	e5983000 	ldr	r3, [r8]
   257f4:	e3530000 	cmp	r3, #0
   257f8:	1a00000f 	bne	2583c <CGPIOPin::SetMode(TGPIOMode, bool)+0x124>
   257fc:	e3560000 	cmp	r6, #0
   25800:	0a00000a 	beq	25830 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   25804:	e5d43010 	ldrb	r3, [r4, #16]
   25808:	e3530003 	cmp	r3, #3
   2580c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   25810:	ea000006 	b	25830 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   25814:	0002585c 	.word	0x0002585c
   25818:	0002586c 	.word	0x0002586c
   2581c:	0002587c 	.word	0x0002587c
   25820:	00025824 	.word	0x00025824
   25824:	e1a00004 	mov	r0, r4
   25828:	e3a01001 	mov	r1, #1
   2582c:	eb0001d0 	bl	25f74 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25830:	e3a03000 	mov	r3, #0
   25834:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25838:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2583c:	eb00196d 	bl	2bdf8 <LeaveCritical>
   25840:	eaffffed 	b	257fc <CGPIOPin::SetMode(TGPIOMode, bool)+0xe4>
   25844:	eb001940 	bl	2bd4c <EnterCritical>
   25848:	eaffffdf 	b	257cc <CGPIOPin::SetMode(TGPIOMode, bool)+0xb4>
   2584c:	e59f105c 	ldr	r1, [pc, #92]	; 258b0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
   25850:	e3a0204f 	mov	r2, #79	; 0x4f
   25854:	e2810034 	add	r0, r1, #52	; 0x34
   25858:	ebfffbec 	bl	24810 <assertion_failed>
   2585c:	e1a00004 	mov	r0, r4
   25860:	e3a01000 	mov	r1, #0
   25864:	eb0001c2 	bl	25f74 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25868:	eafffff0 	b	25830 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   2586c:	e1a00004 	mov	r0, r4
   25870:	e3a01000 	mov	r1, #0
   25874:	eb00000e 	bl	258b4 <CGPIOPin::Write(unsigned int)>
   25878:	eaffffec 	b	25830 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   2587c:	e1a00004 	mov	r0, r4
   25880:	e3a01002 	mov	r1, #2
   25884:	eb0001ba 	bl	25f74 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25888:	eaffffe8 	b	25830 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   2588c:	e1a01002 	mov	r1, r2
   25890:	eb0001b7 	bl	25f74 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25894:	eaffffbc 	b	2578c <CGPIOPin::SetMode(TGPIOMode, bool)+0x74>
   25898:	e59f1010 	ldr	r1, [pc, #16]	; 258b0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
   2589c:	e3a02068 	mov	r2, #104	; 0x68
   258a0:	e2810020 	add	r0, r1, #32
   258a4:	ebfffbd9 	bl	24810 <assertion_failed>
   258a8:	cccccccd 	.word	0xcccccccd
   258ac:	0004e214 	.word	0x0004e214
   258b0:	00045158 	.word	0x00045158

000258b4 <CGPIOPin::Write(unsigned int)>:
   258b4:	e5903004 	ldr	r3, [r0, #4]
   258b8:	e92d4010 	push	{r4, lr}
   258bc:	e3530035 	cmp	r3, #53	; 0x35
   258c0:	8a000010 	bhi	25908 <CGPIOPin::Write(unsigned int)+0x54>
   258c4:	e5d03010 	ldrb	r3, [r0, #16]
   258c8:	e3530003 	cmp	r3, #3
   258cc:	ca000011 	bgt	25918 <CGPIOPin::Write(unsigned int)+0x64>
   258d0:	e3a02000 	mov	r2, #0
   258d4:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   258d8:	e3510001 	cmp	r1, #1
   258dc:	8a000011 	bhi	25928 <CGPIOPin::Write(unsigned int)+0x74>
   258e0:	e59fc050 	ldr	ip, [pc, #80]	; 25938 <CGPIOPin::Write(unsigned int)+0x84>
   258e4:	e3510000 	cmp	r1, #0
   258e8:	e59f304c 	ldr	r3, [pc, #76]	; 2593c <CGPIOPin::Write(unsigned int)+0x88>
   258ec:	01a0300c 	moveq	r3, ip
   258f0:	e590e00c 	ldr	lr, [r0, #12]
   258f4:	e590c008 	ldr	ip, [r0, #8]
   258f8:	e5801014 	str	r1, [r0, #20]
   258fc:	e783e00c 	str	lr, [r3, ip]
   25900:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   25904:	e8bd8010 	pop	{r4, pc}
   25908:	e59f1030 	ldr	r1, [pc, #48]	; 25940 <CGPIOPin::Write(unsigned int)+0x8c>
   2590c:	e3a02091 	mov	r2, #145	; 0x91
   25910:	e2810020 	add	r0, r1, #32
   25914:	ebfffbbd 	bl	24810 <assertion_failed>
   25918:	e59f1020 	ldr	r1, [pc, #32]	; 25940 <CGPIOPin::Write(unsigned int)+0x8c>
   2591c:	e3a02094 	mov	r2, #148	; 0x94
   25920:	e281004c 	add	r0, r1, #76	; 0x4c
   25924:	ebfffbb9 	bl	24810 <assertion_failed>
   25928:	e59f1010 	ldr	r1, [pc, #16]	; 25940 <CGPIOPin::Write(unsigned int)+0x8c>
   2592c:	e3a02098 	mov	r2, #152	; 0x98
   25930:	e2810070 	add	r0, r1, #112	; 0x70
   25934:	ebfffbb5 	bl	24810 <assertion_failed>
   25938:	20200028 	.word	0x20200028
   2593c:	2020001c 	.word	0x2020001c
   25940:	00045158 	.word	0x00045158

00025944 <CGPIOPin::Read() const>:
   25944:	e5903004 	ldr	r3, [r0, #4]
   25948:	e92d4010 	push	{r4, lr}
   2594c:	e3530035 	cmp	r3, #53	; 0x35
   25950:	8a00000f 	bhi	25994 <CGPIOPin::Read() const+0x50>
   25954:	e5d03010 	ldrb	r3, [r0, #16]
   25958:	e2432002 	sub	r2, r3, #2
   2595c:	e3530000 	cmp	r3, #0
   25960:	13520001 	cmpne	r2, #1
   25964:	8a00000e 	bhi	259a4 <CGPIOPin::Read() const+0x60>
   25968:	e3a03000 	mov	r3, #0
   2596c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25970:	e59f103c 	ldr	r1, [pc, #60]	; 259b4 <CGPIOPin::Read() const+0x70>
   25974:	e590c008 	ldr	ip, [r0, #8]
   25978:	e590200c 	ldr	r2, [r0, #12]
   2597c:	e79c1001 	ldr	r1, [ip, r1]
   25980:	e1110002 	tst	r1, r2
   25984:	13a00001 	movne	r0, #1
   25988:	01a00003 	moveq	r0, r3
   2598c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25990:	e8bd8010 	pop	{r4, pc}
   25994:	e59f101c 	ldr	r1, [pc, #28]	; 259b8 <CGPIOPin::Read() const+0x74>
   25998:	e3a020a4 	mov	r2, #164	; 0xa4
   2599c:	e2810020 	add	r0, r1, #32
   259a0:	ebfffb9a 	bl	24810 <assertion_failed>
   259a4:	e59f100c 	ldr	r1, [pc, #12]	; 259b8 <CGPIOPin::Read() const+0x74>
   259a8:	e3a020a8 	mov	r2, #168	; 0xa8
   259ac:	e2810090 	add	r0, r1, #144	; 0x90
   259b0:	ebfffb96 	bl	24810 <assertion_failed>
   259b4:	20200034 	.word	0x20200034
   259b8:	00045158 	.word	0x00045158

000259bc <CGPIOPin::Invert()>:
   259bc:	e5d02010 	ldrb	r2, [r0, #16]
   259c0:	e3520001 	cmp	r2, #1
   259c4:	1a000002 	bne	259d4 <CGPIOPin::Invert()+0x18>
   259c8:	e5901014 	ldr	r1, [r0, #20]
   259cc:	e2211001 	eor	r1, r1, #1
   259d0:	eaffffb7 	b	258b4 <CGPIOPin::Write(unsigned int)>
   259d4:	e59f100c 	ldr	r1, [pc, #12]	; 259e8 <CGPIOPin::Invert()+0x2c>
   259d8:	e92d4010 	push	{r4, lr}
   259dc:	e3a020b5 	mov	r2, #181	; 0xb5
   259e0:	e28100ec 	add	r0, r1, #236	; 0xec
   259e4:	ebfffb89 	bl	24810 <assertion_failed>
   259e8:	00045158 	.word	0x00045158

000259ec <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   259ec:	e5d0c010 	ldrb	ip, [r0, #16]
   259f0:	e92d4010 	push	{r4, lr}
   259f4:	e24ce002 	sub	lr, ip, #2
   259f8:	e35c0000 	cmp	ip, #0
   259fc:	135e0001 	cmpne	lr, #1
   25a00:	8a000028 	bhi	25aa8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
   25a04:	e5d0c025 	ldrb	ip, [r0, #37]	; 0x25
   25a08:	e35c0006 	cmp	ip, #6
   25a0c:	1a000011 	bne	25a58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
   25a10:	e5d0c026 	ldrb	ip, [r0, #38]	; 0x26
   25a14:	e35c0006 	cmp	ip, #6
   25a18:	1a000012 	bne	25a68 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
   25a1c:	e3510000 	cmp	r1, #0
   25a20:	0a000014 	beq	25a78 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   25a24:	e590c01c 	ldr	ip, [r0, #28]
   25a28:	e35c0000 	cmp	ip, #0
   25a2c:	1a000015 	bne	25a88 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
   25a30:	e590c018 	ldr	ip, [r0, #24]
   25a34:	e580101c 	str	r1, [r0, #28]
   25a38:	e35c0000 	cmp	ip, #0
   25a3c:	e5802020 	str	r2, [r0, #32]
   25a40:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   25a44:	0a000013 	beq	25a98 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
   25a48:	e8bd4010 	pop	{r4, lr}
   25a4c:	e1a01000 	mov	r1, r0
   25a50:	e1a0000c 	mov	r0, ip
   25a54:	ea001b7f 	b	2c858 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   25a58:	e59f1058 	ldr	r1, [pc, #88]	; 25ab8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25a5c:	e3a020c0 	mov	r2, #192	; 0xc0
   25a60:	e2810f42 	add	r0, r1, #264	; 0x108
   25a64:	ebfffb69 	bl	24810 <assertion_failed>
   25a68:	e59f1048 	ldr	r1, [pc, #72]	; 25ab8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25a6c:	e3a020c1 	mov	r2, #193	; 0xc1
   25a70:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25a74:	ebfffb65 	bl	24810 <assertion_failed>
   25a78:	e59f1038 	ldr	r1, [pc, #56]	; 25ab8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25a7c:	e3a020c3 	mov	r2, #195	; 0xc3
   25a80:	e2810f55 	add	r0, r1, #340	; 0x154
   25a84:	ebfffb61 	bl	24810 <assertion_failed>
   25a88:	e59f1028 	ldr	r1, [pc, #40]	; 25ab8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25a8c:	e3a020c4 	mov	r2, #196	; 0xc4
   25a90:	e2810f59 	add	r0, r1, #356	; 0x164
   25a94:	ebfffb5d 	bl	24810 <assertion_failed>
   25a98:	e59f1018 	ldr	r1, [pc, #24]	; 25ab8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25a9c:	e3a020cb 	mov	r2, #203	; 0xcb
   25aa0:	e2810f5d 	add	r0, r1, #372	; 0x174
   25aa4:	ebfffb59 	bl	24810 <assertion_failed>
   25aa8:	e59f1008 	ldr	r1, [pc, #8]	; 25ab8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25aac:	e3a020be 	mov	r2, #190	; 0xbe
   25ab0:	e2810090 	add	r0, r1, #144	; 0x90
   25ab4:	ebfffb55 	bl	24810 <assertion_failed>
   25ab8:	00045158 	.word	0x00045158

00025abc <CGPIOPin::DisconnectInterrupt()>:
   25abc:	e5d03010 	ldrb	r3, [r0, #16]
   25ac0:	e92d4010 	push	{r4, lr}
   25ac4:	e2432002 	sub	r2, r3, #2
   25ac8:	e3530000 	cmp	r3, #0
   25acc:	13520001 	cmpne	r2, #1
   25ad0:	8a000020 	bhi	25b58 <CGPIOPin::DisconnectInterrupt()+0x9c>
   25ad4:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25ad8:	e1a01000 	mov	r1, r0
   25adc:	e3530006 	cmp	r3, #6
   25ae0:	1a00000c 	bne	25b18 <CGPIOPin::DisconnectInterrupt()+0x5c>
   25ae4:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25ae8:	e3530006 	cmp	r3, #6
   25aec:	1a00000d 	bne	25b28 <CGPIOPin::DisconnectInterrupt()+0x6c>
   25af0:	e590301c 	ldr	r3, [r0, #28]
   25af4:	e3530000 	cmp	r3, #0
   25af8:	0a00000e 	beq	25b38 <CGPIOPin::DisconnectInterrupt()+0x7c>
   25afc:	e3a03000 	mov	r3, #0
   25b00:	e5900018 	ldr	r0, [r0, #24]
   25b04:	e581301c 	str	r3, [r1, #28]
   25b08:	e1500003 	cmp	r0, r3
   25b0c:	0a00000d 	beq	25b48 <CGPIOPin::DisconnectInterrupt()+0x8c>
   25b10:	e8bd4010 	pop	{r4, lr}
   25b14:	ea001b73 	b	2c8e8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   25b18:	e59f1048 	ldr	r1, [pc, #72]	; 25b68 <CGPIOPin::DisconnectInterrupt()+0xac>
   25b1c:	e3a020d5 	mov	r2, #213	; 0xd5
   25b20:	e2810f42 	add	r0, r1, #264	; 0x108
   25b24:	ebfffb39 	bl	24810 <assertion_failed>
   25b28:	e59f1038 	ldr	r1, [pc, #56]	; 25b68 <CGPIOPin::DisconnectInterrupt()+0xac>
   25b2c:	e3a020d6 	mov	r2, #214	; 0xd6
   25b30:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25b34:	ebfffb35 	bl	24810 <assertion_failed>
   25b38:	e59f1028 	ldr	r1, [pc, #40]	; 25b68 <CGPIOPin::DisconnectInterrupt()+0xac>
   25b3c:	e3a020d8 	mov	r2, #216	; 0xd8
   25b40:	e2810f61 	add	r0, r1, #388	; 0x184
   25b44:	ebfffb31 	bl	24810 <assertion_failed>
   25b48:	e59f1018 	ldr	r1, [pc, #24]	; 25b68 <CGPIOPin::DisconnectInterrupt()+0xac>
   25b4c:	e3a020db 	mov	r2, #219	; 0xdb
   25b50:	e2810f5d 	add	r0, r1, #372	; 0x174
   25b54:	ebfffb2d 	bl	24810 <assertion_failed>
   25b58:	e59f1008 	ldr	r1, [pc, #8]	; 25b68 <CGPIOPin::DisconnectInterrupt()+0xac>
   25b5c:	e3a020d3 	mov	r2, #211	; 0xd3
   25b60:	e2810090 	add	r0, r1, #144	; 0x90
   25b64:	ebfffb29 	bl	24810 <assertion_failed>
   25b68:	00045158 	.word	0x00045158

00025b6c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   25b6c:	e5d03010 	ldrb	r3, [r0, #16]
   25b70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25b74:	e2432002 	sub	r2, r3, #2
   25b78:	e3530000 	cmp	r3, #0
   25b7c:	13520001 	cmpne	r2, #1
   25b80:	8a000030 	bhi	25c48 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
   25b84:	e590301c 	ldr	r3, [r0, #28]
   25b88:	e1a04000 	mov	r4, r0
   25b8c:	e3530000 	cmp	r3, #0
   25b90:	0a00001c 	beq	25c08 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
   25b94:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25b98:	e3530006 	cmp	r3, #6
   25b9c:	1a00001d 	bne	25c18 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
   25ba0:	e3510005 	cmp	r1, #5
   25ba4:	ca00001f 	bgt	25c28 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xbc>
   25ba8:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25bac:	e1530001 	cmp	r3, r1
   25bb0:	0a000020 	beq	25c38 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
   25bb4:	e59f709c 	ldr	r7, [pc, #156]	; 25c58 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
   25bb8:	e5903008 	ldr	r3, [r0, #8]
   25bbc:	e5970000 	ldr	r0, [r7]
   25bc0:	e59f6094 	ldr	r6, [pc, #148]	; 25c5c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
   25bc4:	e0815081 	add	r5, r1, r1, lsl #1
   25bc8:	e3500000 	cmp	r0, #0
   25bcc:	e5c41025 	strb	r1, [r4, #37]	; 0x25
   25bd0:	e1a05105 	lsl	r5, r5, #2
   25bd4:	e0836006 	add	r6, r3, r6
   25bd8:	1a000008 	bne	25c00 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   25bdc:	e594200c 	ldr	r2, [r4, #12]
   25be0:	e7963005 	ldr	r3, [r6, r5]
   25be4:	e1833002 	orr	r3, r3, r2
   25be8:	e7863005 	str	r3, [r6, r5]
   25bec:	e5973000 	ldr	r3, [r7]
   25bf0:	e3530000 	cmp	r3, #0
   25bf4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25bf8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25bfc:	ea00187d 	b	2bdf8 <LeaveCritical>
   25c00:	eb001851 	bl	2bd4c <EnterCritical>
   25c04:	eafffff4 	b	25bdc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x70>
   25c08:	e59f1050 	ldr	r1, [pc, #80]	; 25c60 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25c0c:	e3a020e4 	mov	r2, #228	; 0xe4
   25c10:	e2810f61 	add	r0, r1, #388	; 0x184
   25c14:	ebfffafd 	bl	24810 <assertion_failed>
   25c18:	e59f1040 	ldr	r1, [pc, #64]	; 25c60 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25c1c:	e3a020e6 	mov	r2, #230	; 0xe6
   25c20:	e2810f42 	add	r0, r1, #264	; 0x108
   25c24:	ebfffaf9 	bl	24810 <assertion_failed>
   25c28:	e59f1030 	ldr	r1, [pc, #48]	; 25c60 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25c2c:	e3a020e7 	mov	r2, #231	; 0xe7
   25c30:	e2810f65 	add	r0, r1, #404	; 0x194
   25c34:	ebfffaf5 	bl	24810 <assertion_failed>
   25c38:	e59f1020 	ldr	r1, [pc, #32]	; 25c60 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25c3c:	e3a020e8 	mov	r2, #232	; 0xe8
   25c40:	e2810f6e 	add	r0, r1, #440	; 0x1b8
   25c44:	ebfffaf1 	bl	24810 <assertion_failed>
   25c48:	e59f1010 	ldr	r1, [pc, #16]	; 25c60 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25c4c:	e3a020e3 	mov	r2, #227	; 0xe3
   25c50:	e2810090 	add	r0, r1, #144	; 0x90
   25c54:	ebfffaed 	bl	24810 <assertion_failed>
   25c58:	0004e214 	.word	0x0004e214
   25c5c:	2020004c 	.word	0x2020004c
   25c60:	00045158 	.word	0x00045158

00025c64 <CGPIOPin::DisableInterrupt()>:
   25c64:	e5d03010 	ldrb	r3, [r0, #16]
   25c68:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25c6c:	e2432002 	sub	r2, r3, #2
   25c70:	e3530000 	cmp	r3, #0
   25c74:	13520001 	cmpne	r2, #1
   25c78:	8a00001d 	bhi	25cf4 <CGPIOPin::DisableInterrupt()+0x90>
   25c7c:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25c80:	e1a05000 	mov	r5, r0
   25c84:	e3530005 	cmp	r3, #5
   25c88:	ca000015 	bgt	25ce4 <CGPIOPin::DisableInterrupt()+0x80>
   25c8c:	e59f7070 	ldr	r7, [pc, #112]	; 25d04 <CGPIOPin::DisableInterrupt()+0xa0>
   25c90:	e5902008 	ldr	r2, [r0, #8]
   25c94:	e5970000 	ldr	r0, [r7]
   25c98:	e59f6068 	ldr	r6, [pc, #104]	; 25d08 <CGPIOPin::DisableInterrupt()+0xa4>
   25c9c:	e0833083 	add	r3, r3, r3, lsl #1
   25ca0:	e3500000 	cmp	r0, #0
   25ca4:	e1a04103 	lsl	r4, r3, #2
   25ca8:	e0826006 	add	r6, r2, r6
   25cac:	1a00000a 	bne	25cdc <CGPIOPin::DisableInterrupt()+0x78>
   25cb0:	e7963004 	ldr	r3, [r6, r4]
   25cb4:	e595200c 	ldr	r2, [r5, #12]
   25cb8:	e1c33002 	bic	r3, r3, r2
   25cbc:	e7863004 	str	r3, [r6, r4]
   25cc0:	e5973000 	ldr	r3, [r7]
   25cc4:	e3530000 	cmp	r3, #0
   25cc8:	0a000000 	beq	25cd0 <CGPIOPin::DisableInterrupt()+0x6c>
   25ccc:	eb001849 	bl	2bdf8 <LeaveCritical>
   25cd0:	e3a03006 	mov	r3, #6
   25cd4:	e5c53025 	strb	r3, [r5, #37]	; 0x25
   25cd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25cdc:	eb00181a 	bl	2bd4c <EnterCritical>
   25ce0:	eafffff2 	b	25cb0 <CGPIOPin::DisableInterrupt()+0x4c>
   25ce4:	e59f1020 	ldr	r1, [pc, #32]	; 25d0c <CGPIOPin::DisableInterrupt()+0xa8>
   25ce8:	e3a020fb 	mov	r2, #251	; 0xfb
   25cec:	e2810f75 	add	r0, r1, #468	; 0x1d4
   25cf0:	ebfffac6 	bl	24810 <assertion_failed>
   25cf4:	e59f1010 	ldr	r1, [pc, #16]	; 25d0c <CGPIOPin::DisableInterrupt()+0xa8>
   25cf8:	e3a020f9 	mov	r2, #249	; 0xf9
   25cfc:	e2810090 	add	r0, r1, #144	; 0x90
   25d00:	ebfffac2 	bl	24810 <assertion_failed>
   25d04:	0004e214 	.word	0x0004e214
   25d08:	2020004c 	.word	0x2020004c
   25d0c:	00045158 	.word	0x00045158

00025d10 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   25d10:	e5d03010 	ldrb	r3, [r0, #16]
   25d14:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25d18:	e2432002 	sub	r2, r3, #2
   25d1c:	e3530000 	cmp	r3, #0
   25d20:	13520001 	cmpne	r2, #1
   25d24:	8a000030 	bhi	25dec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
   25d28:	e590301c 	ldr	r3, [r0, #28]
   25d2c:	e1a04000 	mov	r4, r0
   25d30:	e3530000 	cmp	r3, #0
   25d34:	0a00001c 	beq	25dac <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
   25d38:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25d3c:	e3530006 	cmp	r3, #6
   25d40:	1a00001d 	bne	25dbc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
   25d44:	e3510005 	cmp	r1, #5
   25d48:	ca00001f 	bgt	25dcc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xbc>
   25d4c:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25d50:	e1530001 	cmp	r3, r1
   25d54:	0a000020 	beq	25ddc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
   25d58:	e59f709c 	ldr	r7, [pc, #156]	; 25dfc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
   25d5c:	e5903008 	ldr	r3, [r0, #8]
   25d60:	e5970000 	ldr	r0, [r7]
   25d64:	e59f6094 	ldr	r6, [pc, #148]	; 25e00 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
   25d68:	e0815081 	add	r5, r1, r1, lsl #1
   25d6c:	e3500000 	cmp	r0, #0
   25d70:	e5c41026 	strb	r1, [r4, #38]	; 0x26
   25d74:	e1a05105 	lsl	r5, r5, #2
   25d78:	e0836006 	add	r6, r3, r6
   25d7c:	1a000008 	bne	25da4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   25d80:	e594200c 	ldr	r2, [r4, #12]
   25d84:	e7963005 	ldr	r3, [r6, r5]
   25d88:	e1833002 	orr	r3, r3, r2
   25d8c:	e7863005 	str	r3, [r6, r5]
   25d90:	e5973000 	ldr	r3, [r7]
   25d94:	e3530000 	cmp	r3, #0
   25d98:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25d9c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25da0:	ea001814 	b	2bdf8 <LeaveCritical>
   25da4:	eb0017e8 	bl	2bd4c <EnterCritical>
   25da8:	eafffff4 	b	25d80 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x70>
   25dac:	e59f1050 	ldr	r1, [pc, #80]	; 25e04 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25db0:	e59f2050 	ldr	r2, [pc, #80]	; 25e08 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
   25db4:	e2810f61 	add	r0, r1, #388	; 0x184
   25db8:	ebfffa94 	bl	24810 <assertion_failed>
   25dbc:	e59f1040 	ldr	r1, [pc, #64]	; 25e04 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25dc0:	e59f2044 	ldr	r2, [pc, #68]	; 25e0c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
   25dc4:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25dc8:	ebfffa90 	bl	24810 <assertion_failed>
   25dcc:	e59f1030 	ldr	r1, [pc, #48]	; 25e04 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25dd0:	e3a02e11 	mov	r2, #272	; 0x110
   25dd4:	e2810f65 	add	r0, r1, #404	; 0x194
   25dd8:	ebfffa8c 	bl	24810 <assertion_failed>
   25ddc:	e59f1020 	ldr	r1, [pc, #32]	; 25e04 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25de0:	e59f2028 	ldr	r2, [pc, #40]	; 25e10 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x100>
   25de4:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   25de8:	ebfffa88 	bl	24810 <assertion_failed>
   25dec:	e59f1010 	ldr	r1, [pc, #16]	; 25e04 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25df0:	e3a02f43 	mov	r2, #268	; 0x10c
   25df4:	e2810090 	add	r0, r1, #144	; 0x90
   25df8:	ebfffa84 	bl	24810 <assertion_failed>
   25dfc:	0004e214 	.word	0x0004e214
   25e00:	2020004c 	.word	0x2020004c
   25e04:	00045158 	.word	0x00045158
   25e08:	0000010d 	.word	0x0000010d
   25e0c:	0000010f 	.word	0x0000010f
   25e10:	00000111 	.word	0x00000111

00025e14 <CGPIOPin::DisableInterrupt2()>:
   25e14:	e5d03010 	ldrb	r3, [r0, #16]
   25e18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25e1c:	e2432002 	sub	r2, r3, #2
   25e20:	e3530000 	cmp	r3, #0
   25e24:	13520001 	cmpne	r2, #1
   25e28:	8a00001d 	bhi	25ea4 <CGPIOPin::DisableInterrupt2()+0x90>
   25e2c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25e30:	e1a05000 	mov	r5, r0
   25e34:	e3530005 	cmp	r3, #5
   25e38:	ca000015 	bgt	25e94 <CGPIOPin::DisableInterrupt2()+0x80>
   25e3c:	e59f7070 	ldr	r7, [pc, #112]	; 25eb4 <CGPIOPin::DisableInterrupt2()+0xa0>
   25e40:	e5902008 	ldr	r2, [r0, #8]
   25e44:	e5970000 	ldr	r0, [r7]
   25e48:	e59f6068 	ldr	r6, [pc, #104]	; 25eb8 <CGPIOPin::DisableInterrupt2()+0xa4>
   25e4c:	e0833083 	add	r3, r3, r3, lsl #1
   25e50:	e3500000 	cmp	r0, #0
   25e54:	e1a04103 	lsl	r4, r3, #2
   25e58:	e0826006 	add	r6, r2, r6
   25e5c:	1a00000a 	bne	25e8c <CGPIOPin::DisableInterrupt2()+0x78>
   25e60:	e7963004 	ldr	r3, [r6, r4]
   25e64:	e595200c 	ldr	r2, [r5, #12]
   25e68:	e1c33002 	bic	r3, r3, r2
   25e6c:	e7863004 	str	r3, [r6, r4]
   25e70:	e5973000 	ldr	r3, [r7]
   25e74:	e3530000 	cmp	r3, #0
   25e78:	0a000000 	beq	25e80 <CGPIOPin::DisableInterrupt2()+0x6c>
   25e7c:	eb0017dd 	bl	2bdf8 <LeaveCritical>
   25e80:	e3a03006 	mov	r3, #6
   25e84:	e5c53026 	strb	r3, [r5, #38]	; 0x26
   25e88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25e8c:	eb0017ae 	bl	2bd4c <EnterCritical>
   25e90:	eafffff2 	b	25e60 <CGPIOPin::DisableInterrupt2()+0x4c>
   25e94:	e59f1020 	ldr	r1, [pc, #32]	; 25ebc <CGPIOPin::DisableInterrupt2()+0xa8>
   25e98:	e3a02f49 	mov	r2, #292	; 0x124
   25e9c:	e2810f85 	add	r0, r1, #532	; 0x214
   25ea0:	ebfffa5a 	bl	24810 <assertion_failed>
   25ea4:	e59f1010 	ldr	r1, [pc, #16]	; 25ebc <CGPIOPin::DisableInterrupt2()+0xa8>
   25ea8:	e59f2010 	ldr	r2, [pc, #16]	; 25ec0 <CGPIOPin::DisableInterrupt2()+0xac>
   25eac:	e2810090 	add	r0, r1, #144	; 0x90
   25eb0:	ebfffa56 	bl	24810 <assertion_failed>
   25eb4:	0004e214 	.word	0x0004e214
   25eb8:	2020004c 	.word	0x2020004c
   25ebc:	00045158 	.word	0x00045158
   25ec0:	00000122 	.word	0x00000122

00025ec4 <CGPIOPin::AcknowledgeInterrupt()>:
   25ec4:	e590301c 	ldr	r3, [r0, #28]
   25ec8:	e92d4010 	push	{r4, lr}
   25ecc:	e3530000 	cmp	r3, #0
   25ed0:	0a000009 	beq	25efc <CGPIOPin::AcknowledgeInterrupt()+0x38>
   25ed4:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
   25ed8:	e3530000 	cmp	r3, #0
   25edc:	1a00000a 	bne	25f0c <CGPIOPin::AcknowledgeInterrupt()+0x48>
   25ee0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25ee4:	e59f2030 	ldr	r2, [pc, #48]	; 25f1c <CGPIOPin::AcknowledgeInterrupt()+0x58>
   25ee8:	e590c00c 	ldr	ip, [r0, #12]
   25eec:	e5901008 	ldr	r1, [r0, #8]
   25ef0:	e781c002 	str	ip, [r1, r2]
   25ef4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25ef8:	e8bd8010 	pop	{r4, pc}
   25efc:	e59f101c 	ldr	r1, [pc, #28]	; 25f20 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   25f00:	e59f201c 	ldr	r2, [pc, #28]	; 25f24 <CGPIOPin::AcknowledgeInterrupt()+0x60>
   25f04:	e2810f61 	add	r0, r1, #388	; 0x184
   25f08:	ebfffa40 	bl	24810 <assertion_failed>
   25f0c:	e59f100c 	ldr	r1, [pc, #12]	; 25f20 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   25f10:	e3a02f4d 	mov	r2, #308	; 0x134
   25f14:	e2810f8e 	add	r0, r1, #568	; 0x238
   25f18:	ebfffa3c 	bl	24810 <assertion_failed>
   25f1c:	20200040 	.word	0x20200040
   25f20:	00045158 	.word	0x00045158
   25f24:	00000133 	.word	0x00000133

00025f28 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   25f28:	e3a03000 	mov	r3, #0
   25f2c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25f30:	e1d13000 	bics	r3, r1, r0
   25f34:	159f2018 	ldrne	r2, [pc, #24]	; 25f54 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   25f38:	15823028 	strne	r3, [r2, #40]	; 0x28
   25f3c:	e0100001 	ands	r0, r0, r1
   25f40:	159f300c 	ldrne	r3, [pc, #12]	; 25f54 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   25f44:	1583001c 	strne	r0, [r3, #28]
   25f48:	e3a03000 	mov	r3, #0
   25f4c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25f50:	e12fff1e 	bx	lr
   25f54:	20200000 	.word	0x20200000

00025f58 <CGPIOPin::ReadAll()>:
   25f58:	e3a03000 	mov	r3, #0
   25f5c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25f60:	e59f2008 	ldr	r2, [pc, #8]	; 25f70 <CGPIOPin::ReadAll()+0x18>
   25f64:	e5920034 	ldr	r0, [r2, #52]	; 0x34
   25f68:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25f6c:	e12fff1e 	bx	lr
   25f70:	20200000 	.word	0x20200000

00025f74 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   25f74:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25f78:	e59f5080 	ldr	r5, [pc, #128]	; 26000 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x8c>
   25f7c:	e1a06000 	mov	r6, r0
   25f80:	e5950000 	ldr	r0, [r5]
   25f84:	e1a07001 	mov	r7, r1
   25f88:	e3500000 	cmp	r0, #0
   25f8c:	1a000015 	bne	25fe8 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x74>
   25f90:	e3a04000 	mov	r4, #0
   25f94:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   25f98:	e3570002 	cmp	r7, #2
   25f9c:	e5969008 	ldr	r9, [r6, #8]
   25fa0:	e59f805c 	ldr	r8, [pc, #92]	; 26004 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   25fa4:	ca000011 	bgt	25ff0 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x7c>
   25fa8:	e59fa058 	ldr	sl, [pc, #88]	; 26008 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x94>
   25fac:	e3a00005 	mov	r0, #5
   25fb0:	e58a7094 	str	r7, [sl, #148]	; 0x94
   25fb4:	eb000fa3 	bl	29e48 <CTimer::SimpleusDelay(unsigned int)>
   25fb8:	e596300c 	ldr	r3, [r6, #12]
   25fbc:	e3a00005 	mov	r0, #5
   25fc0:	e7893008 	str	r3, [r9, r8]
   25fc4:	eb000f9f 	bl	29e48 <CTimer::SimpleusDelay(unsigned int)>
   25fc8:	e58a4094 	str	r4, [sl, #148]	; 0x94
   25fcc:	e7894008 	str	r4, [r9, r8]
   25fd0:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   25fd4:	e5953000 	ldr	r3, [r5]
   25fd8:	e3530000 	cmp	r3, #0
   25fdc:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   25fe0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   25fe4:	ea001783 	b	2bdf8 <LeaveCritical>
   25fe8:	eb001757 	bl	2bd4c <EnterCritical>
   25fec:	eaffffe7 	b	25f90 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x1c>
   25ff0:	e59f1014 	ldr	r1, [pc, #20]	; 2600c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x98>
   25ff4:	e59f2014 	ldr	r2, [pc, #20]	; 26010 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x9c>
   25ff8:	e2810f91 	add	r0, r1, #580	; 0x244
   25ffc:	ebfffa03 	bl	24810 <assertion_failed>
   26000:	0004e214 	.word	0x0004e214
   26004:	20200098 	.word	0x20200098
   26008:	20200000 	.word	0x20200000
   2600c:	00045158 	.word	0x00045158
   26010:	00000165 	.word	0x00000165

00026014 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   26014:	e5903004 	ldr	r3, [r0, #4]
   26018:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2601c:	e3530035 	cmp	r3, #53	; 0x35
   26020:	8a00001e 	bhi	260a0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
   26024:	e59f2094 	ldr	r2, [pc, #148]	; 260c0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xac>
   26028:	e1a06001 	mov	r6, r1
   2602c:	e3510005 	cmp	r1, #5
   26030:	e0821392 	umull	r1, r2, r2, r3
   26034:	e1a021a2 	lsr	r2, r2, #3
   26038:	e2825302 	add	r5, r2, #134217728	; 0x8000000
   2603c:	e0822102 	add	r2, r2, r2, lsl #2
   26040:	e2855702 	add	r5, r5, #524288	; 0x80000
   26044:	e0433082 	sub	r3, r3, r2, lsl #1
   26048:	e1a05105 	lsl	r5, r5, #2
   2604c:	e0834083 	add	r4, r3, r3, lsl #1
   26050:	8a000016 	bhi	260b0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
   26054:	e59f7068 	ldr	r7, [pc, #104]	; 260c4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
   26058:	e5970000 	ldr	r0, [r7]
   2605c:	e3500000 	cmp	r0, #0
   26060:	1a00000c 	bne	26098 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
   26064:	e3a00007 	mov	r0, #7
   26068:	e59f1058 	ldr	r1, [pc, #88]	; 260c8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb4>
   2606c:	e5953000 	ldr	r3, [r5]
   26070:	e0816106 	add	r6, r1, r6, lsl #2
   26074:	e5962260 	ldr	r2, [r6, #608]	; 0x260
   26078:	e1c33410 	bic	r3, r3, r0, lsl r4
   2607c:	e1833412 	orr	r3, r3, r2, lsl r4
   26080:	e5853000 	str	r3, [r5]
   26084:	e5973000 	ldr	r3, [r7]
   26088:	e3530000 	cmp	r3, #0
   2608c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   26090:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   26094:	ea001757 	b	2bdf8 <LeaveCritical>
   26098:	eb00172b 	bl	2bd4c <EnterCritical>
   2609c:	eafffff0 	b	26064 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
   260a0:	e59f1024 	ldr	r1, [pc, #36]	; 260cc <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   260a4:	e59f2024 	ldr	r2, [pc, #36]	; 260d0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
   260a8:	e2810020 	add	r0, r1, #32
   260ac:	ebfff9d7 	bl	24810 <assertion_failed>
   260b0:	e59f1014 	ldr	r1, [pc, #20]	; 260cc <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   260b4:	e59f2018 	ldr	r2, [pc, #24]	; 260d4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
   260b8:	e2810f9a 	add	r0, r1, #616	; 0x268
   260bc:	ebfff9d3 	bl	24810 <assertion_failed>
   260c0:	cccccccd 	.word	0xcccccccd
   260c4:	0004e214 	.word	0x0004e214
   260c8:	00045148 	.word	0x00045148
   260cc:	00045158 	.word	0x00045158
   260d0:	00000181 	.word	0x00000181
   260d4:	00000185 	.word	0x00000185

000260d8 <CGPIOPin::InterruptHandler()>:
   260d8:	e5d03010 	ldrb	r3, [r0, #16]
   260dc:	e92d4010 	push	{r4, lr}
   260e0:	e2432002 	sub	r2, r3, #2
   260e4:	e3530000 	cmp	r3, #0
   260e8:	13520001 	cmpne	r2, #1
   260ec:	8a000013 	bhi	26140 <CGPIOPin::InterruptHandler()+0x68>
   260f0:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   260f4:	e3530005 	cmp	r3, #5
   260f8:	ca000005 	bgt	26114 <CGPIOPin::InterruptHandler()+0x3c>
   260fc:	e590301c 	ldr	r3, [r0, #28]
   26100:	e3530000 	cmp	r3, #0
   26104:	0a000009 	beq	26130 <CGPIOPin::InterruptHandler()+0x58>
   26108:	e8bd4010 	pop	{r4, lr}
   2610c:	e5900020 	ldr	r0, [r0, #32]
   26110:	e12fff13 	bx	r3
   26114:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   26118:	e3530005 	cmp	r3, #5
   2611c:	dafffff6 	ble	260fc <CGPIOPin::InterruptHandler()+0x24>
   26120:	e59f1028 	ldr	r1, [pc, #40]	; 26150 <CGPIOPin::InterruptHandler()+0x78>
   26124:	e59f2028 	ldr	r2, [pc, #40]	; 26154 <CGPIOPin::InterruptHandler()+0x7c>
   26128:	e2810f9e 	add	r0, r1, #632	; 0x278
   2612c:	ebfff9b7 	bl	24810 <assertion_failed>
   26130:	e59f1018 	ldr	r1, [pc, #24]	; 26150 <CGPIOPin::InterruptHandler()+0x78>
   26134:	e3a02f66 	mov	r2, #408	; 0x198
   26138:	e2810f61 	add	r0, r1, #388	; 0x184
   2613c:	ebfff9b3 	bl	24810 <assertion_failed>
   26140:	e59f1008 	ldr	r1, [pc, #8]	; 26150 <CGPIOPin::InterruptHandler()+0x78>
   26144:	e3a02f65 	mov	r2, #404	; 0x194
   26148:	e2810090 	add	r0, r1, #144	; 0x90
   2614c:	ebfff9af 	bl	24810 <assertion_failed>
   26150:	00045158 	.word	0x00045158
   26154:	00000196 	.word	0x00000196

00026158 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   26158:	e3500035 	cmp	r0, #53	; 0x35
   2615c:	e92d4070 	push	{r4, r5, r6, lr}
   26160:	8a000018 	bhi	261c8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   26164:	e3a02001 	mov	r2, #1
   26168:	e59f6068 	ldr	r6, [pc, #104]	; 261d8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x80>
   2616c:	e59f4068 	ldr	r4, [pc, #104]	; 261dc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   26170:	e5963000 	ldr	r3, [r6]
   26174:	e08442a0 	add	r4, r4, r0, lsr #5
   26178:	e200501f 	and	r5, r0, #31
   2617c:	e3530000 	cmp	r3, #0
   26180:	e1a04104 	lsl	r4, r4, #2
   26184:	e1a05512 	lsl	r5, r2, r5
   26188:	1a00000b 	bne	261bc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
   2618c:	e1e02005 	mvn	r2, r5
   26190:	e59f1048 	ldr	r1, [pc, #72]	; 261e0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
   26194:	e5943000 	ldr	r3, [r4]
   26198:	e0033002 	and	r3, r3, r2
   2619c:	e484300c 	str	r3, [r4], #12
   261a0:	e1540001 	cmp	r4, r1
   261a4:	9afffffa 	bls	26194 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
   261a8:	e5963000 	ldr	r3, [r6]
   261ac:	e3530000 	cmp	r3, #0
   261b0:	08bd8070 	popeq	{r4, r5, r6, pc}
   261b4:	e8bd4070 	pop	{r4, r5, r6, lr}
   261b8:	ea00170e 	b	2bdf8 <LeaveCritical>
   261bc:	e1a00003 	mov	r0, r3
   261c0:	eb0016e1 	bl	2bd4c <EnterCritical>
   261c4:	eafffff0 	b	2618c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x34>
   261c8:	e59f1014 	ldr	r1, [pc, #20]	; 261e4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
   261cc:	e59f2014 	ldr	r2, [pc, #20]	; 261e8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x90>
   261d0:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   261d4:	ebfff98d 	bl	24810 <assertion_failed>
   261d8:	0004e214 	.word	0x0004e214
   261dc:	08080013 	.word	0x08080013
   261e0:	2020008b 	.word	0x2020008b
   261e4:	00045158 	.word	0x00045158
   261e8:	0000019e 	.word	0x0000019e

000261ec <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   261ec:	e3a02001 	mov	r2, #1
   261f0:	e59f3004 	ldr	r3, [pc, #4]	; 261fc <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
   261f4:	e5832000 	str	r2, [r3]
   261f8:	e12fff1e 	bx	lr
   261fc:	0004e214 	.word	0x0004e214

00026200 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   26200:	e3a01000 	mov	r1, #0
   26204:	ea00000a 	b	26234 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
   26208:	e3520009 	cmp	r2, #9
   2620c:	8a000011 	bhi	26258 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   26210:	e3730001 	cmn	r3, #1
   26214:	13a02000 	movne	r2, #0
   26218:	03a02001 	moveq	r2, #1
   2621c:	e1510003 	cmp	r1, r3
   26220:	91a01002 	movls	r1, r2
   26224:	83821001 	orrhi	r1, r2, #1
   26228:	e3510000 	cmp	r1, #0
   2622c:	1a000009 	bne	26258 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   26230:	e1a01003 	mov	r1, r3
   26234:	e0d0c0d1 	ldrsb	ip, [r0], #1
   26238:	e0813101 	add	r3, r1, r1, lsl #2
   2623c:	e24c2030 	sub	r2, ip, #48	; 0x30
   26240:	e35c0000 	cmp	ip, #0
   26244:	e0823083 	add	r3, r2, r3, lsl #1
   26248:	e6ef2072 	uxtb	r2, r2
   2624c:	1affffed 	bne	26208 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
   26250:	e1a00001 	mov	r0, r1
   26254:	e12fff1e 	bx	lr
   26258:	e3e01000 	mvn	r1, #0
   2625c:	e1a00001 	mov	r0, r1
   26260:	e12fff1e 	bx	lr

00026264 <CKernelOptions::~CKernelOptions()>:
   26264:	e3a02000 	mov	r2, #0
   26268:	e59f3004 	ldr	r3, [pc, #4]	; 26274 <CKernelOptions::~CKernelOptions()+0x10>
   2626c:	e5832000 	str	r2, [r3]
   26270:	e12fff1e 	bx	lr
   26274:	0004e218 	.word	0x0004e218

00026278 <CKernelOptions::GetWidth() const>:
   26278:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   2627c:	e12fff1e 	bx	lr

00026280 <CKernelOptions::GetHeight() const>:
   26280:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   26284:	e12fff1e 	bx	lr

00026288 <CKernelOptions::GetLogDevice() const>:
   26288:	e2800e81 	add	r0, r0, #2064	; 0x810
   2628c:	e2800008 	add	r0, r0, #8
   26290:	e12fff1e 	bx	lr

00026294 <CKernelOptions::GetLogLevel() const>:
   26294:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   26298:	e12fff1e 	bx	lr

0002629c <CKernelOptions::GetKeyMap() const>:
   2629c:	e2800e83 	add	r0, r0, #2096	; 0x830
   262a0:	e12fff1e 	bx	lr

000262a4 <CKernelOptions::GetUSBPowerDelay() const>:
   262a4:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   262a8:	e12fff1e 	bx	lr

000262ac <CKernelOptions::GetUSBFullSpeed() const>:
   262ac:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
   262b0:	e12fff1e 	bx	lr

000262b4 <CKernelOptions::GetSoundDevice() const>:
   262b4:	e2800e83 	add	r0, r0, #2096	; 0x830
   262b8:	e2800009 	add	r0, r0, #9
   262bc:	e12fff1e 	bx	lr

000262c0 <CKernelOptions::GetSoundOption() const>:
   262c0:	e5900850 	ldr	r0, [r0, #2128]	; 0x850
   262c4:	e12fff1e 	bx	lr

000262c8 <CKernelOptions::GetCPUSpeed() const>:
   262c8:	e5d00854 	ldrb	r0, [r0, #2132]	; 0x854
   262cc:	e12fff1e 	bx	lr

000262d0 <CKernelOptions::GetSoCMaxTemp() const>:
   262d0:	e5900858 	ldr	r0, [r0, #2136]	; 0x858
   262d4:	e12fff1e 	bx	lr

000262d8 <CKernelOptions::Get()>:
   262d8:	e59f3004 	ldr	r3, [pc, #4]	; 262e4 <CKernelOptions::Get()+0xc>
   262dc:	e5930000 	ldr	r0, [r3]
   262e0:	e12fff1e 	bx	lr
   262e4:	0004e218 	.word	0x0004e218

000262e8 <CKernelOptions::GetToken()>:
   262e8:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
   262ec:	e1d320d0 	ldrsb	r2, [r3]
   262f0:	e3520000 	cmp	r2, #0
   262f4:	1a000005 	bne	26310 <CKernelOptions::GetToken()+0x28>
   262f8:	ea000016 	b	26358 <CKernelOptions::GetToken()+0x70>
   262fc:	e2833001 	add	r3, r3, #1
   26300:	e580380c 	str	r3, [r0, #2060]	; 0x80c
   26304:	e1d320d0 	ldrsb	r2, [r3]
   26308:	e3520000 	cmp	r2, #0
   2630c:	0a000011 	beq	26358 <CKernelOptions::GetToken()+0x70>
   26310:	e3520020 	cmp	r2, #32
   26314:	0afffff8 	beq	262fc <CKernelOptions::GetToken()+0x14>
   26318:	e1a02003 	mov	r2, r3
   2631c:	ea000000 	b	26324 <CKernelOptions::GetToken()+0x3c>
   26320:	e1a02001 	mov	r2, r1
   26324:	e2821001 	add	r1, r2, #1
   26328:	e580180c 	str	r1, [r0, #2060]	; 0x80c
   2632c:	e1d2c0d1 	ldrsb	ip, [r2, #1]
   26330:	e35c0000 	cmp	ip, #0
   26334:	0a000008 	beq	2635c <CKernelOptions::GetToken()+0x74>
   26338:	e35c0020 	cmp	ip, #32
   2633c:	1afffff7 	bne	26320 <CKernelOptions::GetToken()+0x38>
   26340:	e3a0c000 	mov	ip, #0
   26344:	e2822002 	add	r2, r2, #2
   26348:	e580280c 	str	r2, [r0, #2060]	; 0x80c
   2634c:	e5c1c000 	strb	ip, [r1]
   26350:	e1a00003 	mov	r0, r3
   26354:	e12fff1e 	bx	lr
   26358:	e3a03000 	mov	r3, #0
   2635c:	e1a00003 	mov	r0, r3
   26360:	e12fff1e 	bx	lr

00026364 <CKernelOptions::CKernelOptions()>:
   26364:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26368:	e3a02004 	mov	r2, #4
   2636c:	e1a04000 	mov	r4, r0
   26370:	e3a05000 	mov	r5, #0
   26374:	e3a0303c 	mov	r3, #60	; 0x3c
   26378:	e2807e81 	add	r7, r0, #2064	; 0x810
   2637c:	e2877008 	add	r7, r7, #8
   26380:	e580282c 	str	r2, [r0, #2092]	; 0x82c
   26384:	e5803858 	str	r3, [r0, #2136]	; 0x858
   26388:	e24dd014 	sub	sp, sp, #20
   2638c:	e59f1380 	ldr	r1, [pc, #896]	; 26714 <CKernelOptions::CKernelOptions()+0x3b0>
   26390:	e1a00007 	mov	r0, r7
   26394:	e5845810 	str	r5, [r4, #2064]	; 0x810
   26398:	e5845814 	str	r5, [r4, #2068]	; 0x814
   2639c:	e5845834 	str	r5, [r4, #2100]	; 0x834
   263a0:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
   263a4:	e5845850 	str	r5, [r4, #2128]	; 0x850
   263a8:	e5c45854 	strb	r5, [r4, #2132]	; 0x854
   263ac:	e2849e83 	add	r9, r4, #2096	; 0x830
   263b0:	eb000ff3 	bl	2a384 <strcpy>
   263b4:	e59f135c 	ldr	r1, [pc, #860]	; 26718 <CKernelOptions::CKernelOptions()+0x3b4>
   263b8:	e1a00009 	mov	r0, r9
   263bc:	eb000ff0 	bl	2a384 <strcpy>
   263c0:	e59f3354 	ldr	r3, [pc, #852]	; 2671c <CKernelOptions::CKernelOptions()+0x3b8>
   263c4:	e1a01005 	mov	r1, r5
   263c8:	e5c45839 	strb	r5, [r4, #2105]	; 0x839
   263cc:	e28d0008 	add	r0, sp, #8
   263d0:	e5834000 	str	r4, [r3]
   263d4:	ebfff92e 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   263d8:	e58d5000 	str	r5, [sp]
   263dc:	e1a02004 	mov	r2, r4
   263e0:	e28d0008 	add	r0, sp, #8
   263e4:	e59f3334 	ldr	r3, [pc, #820]	; 26720 <CKernelOptions::CKernelOptions()+0x3bc>
   263e8:	e59f1334 	ldr	r1, [pc, #820]	; 26724 <CKernelOptions::CKernelOptions()+0x3c0>
   263ec:	ebfff934 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   263f0:	e1500005 	cmp	r0, r5
   263f4:	0a000037 	beq	264d8 <CKernelOptions::CKernelOptions()+0x174>
   263f8:	e5943008 	ldr	r3, [r4, #8]
   263fc:	e3530b02 	cmp	r3, #2048	; 0x800
   26400:	2a000034 	bcs	264d8 <CKernelOptions::CKernelOptions()+0x174>
   26404:	e0843003 	add	r3, r4, r3
   26408:	e284200c 	add	r2, r4, #12
   2640c:	e59f8314 	ldr	r8, [pc, #788]	; 26728 <CKernelOptions::CKernelOptions()+0x3c4>
   26410:	e59fa314 	ldr	sl, [pc, #788]	; 2672c <CKernelOptions::CKernelOptions()+0x3c8>
   26414:	e5c3500c 	strb	r5, [r3, #12]
   26418:	e584280c 	str	r2, [r4, #2060]	; 0x80c
   2641c:	e1a00004 	mov	r0, r4
   26420:	ebffffb0 	bl	262e8 <CKernelOptions::GetToken()>
   26424:	e2506000 	subs	r6, r0, #0
   26428:	0a00002a 	beq	264d8 <CKernelOptions::CKernelOptions()+0x174>
   2642c:	e1d630d0 	ldrsb	r3, [r6]
   26430:	e3530000 	cmp	r3, #0
   26434:	0a000008 	beq	2645c <CKernelOptions::CKernelOptions()+0xf8>
   26438:	e353003d 	cmp	r3, #61	; 0x3d
   2643c:	e1a05006 	mov	r5, r6
   26440:	1a000002 	bne	26450 <CKernelOptions::CKernelOptions()+0xec>
   26444:	ea000028 	b	264ec <CKernelOptions::CKernelOptions()+0x188>
   26448:	e353003d 	cmp	r3, #61	; 0x3d
   2644c:	0a000026 	beq	264ec <CKernelOptions::CKernelOptions()+0x188>
   26450:	e1f530d1 	ldrsb	r3, [r5, #1]!
   26454:	e3530000 	cmp	r3, #0
   26458:	1afffffa 	bne	26448 <CKernelOptions::CKernelOptions()+0xe4>
   2645c:	e1a01008 	mov	r1, r8
   26460:	e1a00006 	mov	r0, r6
   26464:	eb000f12 	bl	2a0b4 <strcmp>
   26468:	e3500000 	cmp	r0, #0
   2646c:	0affffea 	beq	2641c <CKernelOptions::CKernelOptions()+0xb8>
   26470:	e1a0100a 	mov	r1, sl
   26474:	e1a00006 	mov	r0, r6
   26478:	eb000f0d 	bl	2a0b4 <strcmp>
   2647c:	e3500000 	cmp	r0, #0
   26480:	13a0b000 	movne	fp, #0
   26484:	0affffe4 	beq	2641c <CKernelOptions::CKernelOptions()+0xb8>
   26488:	e59f12a0 	ldr	r1, [pc, #672]	; 26730 <CKernelOptions::CKernelOptions()+0x3cc>
   2648c:	e1a00006 	mov	r0, r6
   26490:	eb000f07 	bl	2a0b4 <strcmp>
   26494:	e2505000 	subs	r5, r0, #0
   26498:	0a000027 	beq	2653c <CKernelOptions::CKernelOptions()+0x1d8>
   2649c:	e59f1290 	ldr	r1, [pc, #656]	; 26734 <CKernelOptions::CKernelOptions()+0x3d0>
   264a0:	e1a00006 	mov	r0, r6
   264a4:	eb000f02 	bl	2a0b4 <strcmp>
   264a8:	e3500000 	cmp	r0, #0
   264ac:	1a000028 	bne	26554 <CKernelOptions::CKernelOptions()+0x1f0>
   264b0:	e35b0000 	cmp	fp, #0
   264b4:	0affffd8 	beq	2641c <CKernelOptions::CKernelOptions()+0xb8>
   264b8:	e1db30d0 	ldrsb	r3, [fp]
   264bc:	e3530000 	cmp	r3, #0
   264c0:	0affffd5 	beq	2641c <CKernelOptions::CKernelOptions()+0xb8>
   264c4:	e1a0000b 	mov	r0, fp
   264c8:	ebffff4c 	bl	26200 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   264cc:	e3500004 	cmp	r0, #4
   264d0:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
   264d4:	eaffffd0 	b	2641c <CKernelOptions::CKernelOptions()+0xb8>
   264d8:	e28d0008 	add	r0, sp, #8
   264dc:	ebfff8f3 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   264e0:	e1a00004 	mov	r0, r4
   264e4:	e28dd014 	add	sp, sp, #20
   264e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264ec:	e3a03000 	mov	r3, #0
   264f0:	e1a01008 	mov	r1, r8
   264f4:	e5c53000 	strb	r3, [r5]
   264f8:	e1a00006 	mov	r0, r6
   264fc:	eb000eec 	bl	2a0b4 <strcmp>
   26500:	e3500000 	cmp	r0, #0
   26504:	e285b001 	add	fp, r5, #1
   26508:	1a000044 	bne	26620 <CKernelOptions::CKernelOptions()+0x2bc>
   2650c:	e35b0000 	cmp	fp, #0
   26510:	0affffc1 	beq	2641c <CKernelOptions::CKernelOptions()+0xb8>
   26514:	e1d530d1 	ldrsb	r3, [r5, #1]
   26518:	e3530000 	cmp	r3, #0
   2651c:	0affffbe 	beq	2641c <CKernelOptions::CKernelOptions()+0xb8>
   26520:	e1a0000b 	mov	r0, fp
   26524:	ebffff35 	bl	26200 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26528:	e59f3208 	ldr	r3, [pc, #520]	; 26738 <CKernelOptions::CKernelOptions()+0x3d4>
   2652c:	e2402d0a 	sub	r2, r0, #640	; 0x280
   26530:	e1520003 	cmp	r2, r3
   26534:	95840810 	strls	r0, [r4, #2064]	; 0x810
   26538:	eaffffb7 	b	2641c <CKernelOptions::CKernelOptions()+0xb8>
   2653c:	e1a0100b 	mov	r1, fp
   26540:	e3a02013 	mov	r2, #19
   26544:	e1a00007 	mov	r0, r7
   26548:	eb000f98 	bl	2a3b0 <strncpy>
   2654c:	e5c4582b 	strb	r5, [r4, #2091]	; 0x82b
   26550:	eaffffb1 	b	2641c <CKernelOptions::CKernelOptions()+0xb8>
   26554:	e59f11e0 	ldr	r1, [pc, #480]	; 2673c <CKernelOptions::CKernelOptions()+0x3d8>
   26558:	e1a00006 	mov	r0, r6
   2655c:	eb000ed4 	bl	2a0b4 <strcmp>
   26560:	e2505000 	subs	r5, r0, #0
   26564:	1a000005 	bne	26580 <CKernelOptions::CKernelOptions()+0x21c>
   26568:	e1a0100b 	mov	r1, fp
   2656c:	e3a02002 	mov	r2, #2
   26570:	e1a00009 	mov	r0, r9
   26574:	eb000f8d 	bl	2a3b0 <strncpy>
   26578:	e5c45832 	strb	r5, [r4, #2098]	; 0x832
   2657c:	eaffffa6 	b	2641c <CKernelOptions::CKernelOptions()+0xb8>
   26580:	e59f11b8 	ldr	r1, [pc, #440]	; 26740 <CKernelOptions::CKernelOptions()+0x3dc>
   26584:	e1a00006 	mov	r0, r6
   26588:	eb000ec9 	bl	2a0b4 <strcmp>
   2658c:	e3500000 	cmp	r0, #0
   26590:	1a00000b 	bne	265c4 <CKernelOptions::CKernelOptions()+0x260>
   26594:	e35b0000 	cmp	fp, #0
   26598:	0affff9f 	beq	2641c <CKernelOptions::CKernelOptions()+0xb8>
   2659c:	e1db30d0 	ldrsb	r3, [fp]
   265a0:	e3530000 	cmp	r3, #0
   265a4:	0affff9c 	beq	2641c <CKernelOptions::CKernelOptions()+0xb8>
   265a8:	e1a0000b 	mov	r0, fp
   265ac:	ebffff13 	bl	26200 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   265b0:	e59f318c 	ldr	r3, [pc, #396]	; 26744 <CKernelOptions::CKernelOptions()+0x3e0>
   265b4:	e24020c8 	sub	r2, r0, #200	; 0xc8
   265b8:	e1520003 	cmp	r2, r3
   265bc:	95840834 	strls	r0, [r4, #2100]	; 0x834
   265c0:	eaffff95 	b	2641c <CKernelOptions::CKernelOptions()+0xb8>
   265c4:	e59f117c 	ldr	r1, [pc, #380]	; 26748 <CKernelOptions::CKernelOptions()+0x3e4>
   265c8:	e1a00006 	mov	r0, r6
   265cc:	eb000eb8 	bl	2a0b4 <strcmp>
   265d0:	e3500000 	cmp	r0, #0
   265d4:	1a000006 	bne	265f4 <CKernelOptions::CKernelOptions()+0x290>
   265d8:	e1a0000b 	mov	r0, fp
   265dc:	e59f1168 	ldr	r1, [pc, #360]	; 2674c <CKernelOptions::CKernelOptions()+0x3e8>
   265e0:	eb000eb3 	bl	2a0b4 <strcmp>
   265e4:	e3500000 	cmp	r0, #0
   265e8:	03a03001 	moveq	r3, #1
   265ec:	05c43838 	strbeq	r3, [r4, #2104]	; 0x838
   265f0:	eaffff89 	b	2641c <CKernelOptions::CKernelOptions()+0xb8>
   265f4:	e59f1154 	ldr	r1, [pc, #340]	; 26750 <CKernelOptions::CKernelOptions()+0x3ec>
   265f8:	e1a00006 	mov	r0, r6
   265fc:	eb000eac 	bl	2a0b4 <strcmp>
   26600:	e2505000 	subs	r5, r0, #0
   26604:	1a000015 	bne	26660 <CKernelOptions::CKernelOptions()+0x2fc>
   26608:	e1a0100b 	mov	r1, fp
   2660c:	e3a02013 	mov	r2, #19
   26610:	e2890009 	add	r0, r9, #9
   26614:	eb000f65 	bl	2a3b0 <strncpy>
   26618:	e5c4584c 	strb	r5, [r4, #2124]	; 0x84c
   2661c:	eaffff7e 	b	2641c <CKernelOptions::CKernelOptions()+0xb8>
   26620:	e1a0100a 	mov	r1, sl
   26624:	e1a00006 	mov	r0, r6
   26628:	eb000ea1 	bl	2a0b4 <strcmp>
   2662c:	e3500000 	cmp	r0, #0
   26630:	1affff94 	bne	26488 <CKernelOptions::CKernelOptions()+0x124>
   26634:	e35b0000 	cmp	fp, #0
   26638:	0affff77 	beq	2641c <CKernelOptions::CKernelOptions()+0xb8>
   2663c:	e1d530d1 	ldrsb	r3, [r5, #1]
   26640:	e3530000 	cmp	r3, #0
   26644:	0affff74 	beq	2641c <CKernelOptions::CKernelOptions()+0xb8>
   26648:	e1a0000b 	mov	r0, fp
   2664c:	ebfffeeb 	bl	26200 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26650:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   26654:	e3530f96 	cmp	r3, #600	; 0x258
   26658:	95840814 	strls	r0, [r4, #2068]	; 0x814
   2665c:	eaffff6e 	b	2641c <CKernelOptions::CKernelOptions()+0xb8>
   26660:	e59f10ec 	ldr	r1, [pc, #236]	; 26754 <CKernelOptions::CKernelOptions()+0x3f0>
   26664:	e1a00006 	mov	r0, r6
   26668:	eb000e91 	bl	2a0b4 <strcmp>
   2666c:	e3500000 	cmp	r0, #0
   26670:	1a000009 	bne	2669c <CKernelOptions::CKernelOptions()+0x338>
   26674:	e35b0000 	cmp	fp, #0
   26678:	0affff67 	beq	2641c <CKernelOptions::CKernelOptions()+0xb8>
   2667c:	e1db30d0 	ldrsb	r3, [fp]
   26680:	e3530000 	cmp	r3, #0
   26684:	0affff64 	beq	2641c <CKernelOptions::CKernelOptions()+0xb8>
   26688:	e1a0000b 	mov	r0, fp
   2668c:	ebfffedb 	bl	26200 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26690:	e3500002 	cmp	r0, #2
   26694:	95840850 	strls	r0, [r4, #2128]	; 0x850
   26698:	eaffff5f 	b	2641c <CKernelOptions::CKernelOptions()+0xb8>
   2669c:	e59f10b4 	ldr	r1, [pc, #180]	; 26758 <CKernelOptions::CKernelOptions()+0x3f4>
   266a0:	e1a00006 	mov	r0, r6
   266a4:	eb000e82 	bl	2a0b4 <strcmp>
   266a8:	e3500000 	cmp	r0, #0
   266ac:	1a000006 	bne	266cc <CKernelOptions::CKernelOptions()+0x368>
   266b0:	e1a0000b 	mov	r0, fp
   266b4:	e59f10a0 	ldr	r1, [pc, #160]	; 2675c <CKernelOptions::CKernelOptions()+0x3f8>
   266b8:	eb000e7d 	bl	2a0b4 <strcmp>
   266bc:	e3500000 	cmp	r0, #0
   266c0:	03a03001 	moveq	r3, #1
   266c4:	05c43854 	strbeq	r3, [r4, #2132]	; 0x854
   266c8:	eaffff53 	b	2641c <CKernelOptions::CKernelOptions()+0xb8>
   266cc:	e1a00006 	mov	r0, r6
   266d0:	e59f1088 	ldr	r1, [pc, #136]	; 26760 <CKernelOptions::CKernelOptions()+0x3fc>
   266d4:	eb000e76 	bl	2a0b4 <strcmp>
   266d8:	e2903000 	adds	r3, r0, #0
   266dc:	13a03001 	movne	r3, #1
   266e0:	e35b0000 	cmp	fp, #0
   266e4:	03833001 	orreq	r3, r3, #1
   266e8:	e3530000 	cmp	r3, #0
   266ec:	1affff4a 	bne	2641c <CKernelOptions::CKernelOptions()+0xb8>
   266f0:	e1db30d0 	ldrsb	r3, [fp]
   266f4:	e3530000 	cmp	r3, #0
   266f8:	0affff47 	beq	2641c <CKernelOptions::CKernelOptions()+0xb8>
   266fc:	e1a0000b 	mov	r0, fp
   26700:	ebfffebe 	bl	26200 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26704:	e2403028 	sub	r3, r0, #40	; 0x28
   26708:	e3530026 	cmp	r3, #38	; 0x26
   2670c:	95840858 	strls	r0, [r4, #2136]	; 0x858
   26710:	eaffff41 	b	2641c <CKernelOptions::CKernelOptions()+0xb8>
   26714:	00045430 	.word	0x00045430
   26718:	00043310 	.word	0x00043310
   2671c:	0004e218 	.word	0x0004e218
   26720:	0000080c 	.word	0x0000080c
   26724:	00050001 	.word	0x00050001
   26728:	000454b4 	.word	0x000454b4
   2672c:	00045438 	.word	0x00045438
   26730:	00045440 	.word	0x00045440
   26734:	00045448 	.word	0x00045448
   26738:	0000053c 	.word	0x0000053c
   2673c:	00045454 	.word	0x00045454
   26740:	0004545c 	.word	0x0004545c
   26744:	00001e78 	.word	0x00001e78
   26748:	0004546c 	.word	0x0004546c
   2674c:	00045478 	.word	0x00045478
   26750:	00045480 	.word	0x00045480
   26754:	0004548c 	.word	0x0004548c
   26758:	00045498 	.word	0x00045498
   2675c:	000454a0 	.word	0x000454a0
   26760:	000454a8 	.word	0x000454a8

00026764 <CKernelOptions::GetOptionValue(char*)>:
   26764:	e1d030d0 	ldrsb	r3, [r0]
   26768:	e3530000 	cmp	r3, #0
   2676c:	1a000003 	bne	26780 <CKernelOptions::GetOptionValue(char*)+0x1c>
   26770:	ea000007 	b	26794 <CKernelOptions::GetOptionValue(char*)+0x30>
   26774:	e1f030d1 	ldrsb	r3, [r0, #1]!
   26778:	e3530000 	cmp	r3, #0
   2677c:	0a000004 	beq	26794 <CKernelOptions::GetOptionValue(char*)+0x30>
   26780:	e353003d 	cmp	r3, #61	; 0x3d
   26784:	1afffffa 	bne	26774 <CKernelOptions::GetOptionValue(char*)+0x10>
   26788:	e3a02000 	mov	r2, #0
   2678c:	e2803001 	add	r3, r0, #1
   26790:	e5c02000 	strb	r2, [r0]
   26794:	e1a00003 	mov	r0, r3
   26798:	e12fff1e 	bx	lr

0002679c <CKernelOptions::GetDecimal(char*)>:
   2679c:	e2503000 	subs	r3, r0, #0
   267a0:	0a000002 	beq	267b0 <CKernelOptions::GetDecimal(char*)+0x14>
   267a4:	e1d330d0 	ldrsb	r3, [r3]
   267a8:	e3530000 	cmp	r3, #0
   267ac:	1a000001 	bne	267b8 <CKernelOptions::GetDecimal(char*)+0x1c>
   267b0:	e3e00000 	mvn	r0, #0
   267b4:	e12fff1e 	bx	lr
   267b8:	eafffe90 	b	26200 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

000267bc <CLogger::CLogger(unsigned int, CTimer*)>:
   267bc:	e92d4010 	push	{r4, lr}
   267c0:	e3a03000 	mov	r3, #0
   267c4:	e1a04000 	mov	r4, r0
   267c8:	e3a00001 	mov	r0, #1
   267cc:	e884000e 	stm	r4, {r1, r2, r3}
   267d0:	e584300c 	str	r3, [r4, #12]
   267d4:	e5843010 	str	r3, [r4, #16]
   267d8:	e5843014 	str	r3, [r4, #20]
   267dc:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   267e0:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   267e4:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   267e8:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   267ec:	e5840018 	str	r0, [r4, #24]
   267f0:	e58400ec 	str	r0, [r4, #236]	; 0xec
   267f4:	e3a00901 	mov	r0, #16384	; 0x4000
   267f8:	eb001222 	bl	2b088 <operator new[](unsigned int)>
   267fc:	e59f300c 	ldr	r3, [pc, #12]	; 26810 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
   26800:	e584000c 	str	r0, [r4, #12]
   26804:	e5834000 	str	r4, [r3]
   26808:	e1a00004 	mov	r0, r4
   2680c:	e8bd8010 	pop	{r4, pc}
   26810:	0004e21c 	.word	0x0004e21c

00026814 <CLogger::~CLogger()>:
   26814:	e3a02000 	mov	r2, #0
   26818:	e59f1064 	ldr	r1, [pc, #100]	; 26884 <CLogger::~CLogger()+0x70>
   2681c:	e92d4070 	push	{r4, r5, r6, lr}
   26820:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
   26824:	e1a04000 	mov	r4, r0
   26828:	e1a06002 	mov	r6, r2
   2682c:	e3a05f42 	mov	r5, #264	; 0x108
   26830:	e5812000 	str	r2, [r1]
   26834:	ea000008 	b	2685c <CLogger::~CLogger()+0x48>
   26838:	e591001c 	ldr	r0, [r1, #28]
   2683c:	e1a01005 	mov	r1, r5
   26840:	eb00121d 	bl	2b0bc <operator delete(void*, unsigned int)>
   26844:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   26848:	e2833001 	add	r3, r3, #1
   2684c:	e3530032 	cmp	r3, #50	; 0x32
   26850:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   26854:	03a03000 	moveq	r3, #0
   26858:	058460e8 	streq	r6, [r4, #232]	; 0xe8
   2685c:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   26860:	e0841103 	add	r1, r4, r3, lsl #2
   26864:	e1520003 	cmp	r2, r3
   26868:	1afffff2 	bne	26838 <CLogger::~CLogger()+0x24>
   2686c:	e594000c 	ldr	r0, [r4, #12]
   26870:	e3500000 	cmp	r0, #0
   26874:	0a000000 	beq	2687c <CLogger::~CLogger()+0x68>
   26878:	eb001209 	bl	2b0a4 <operator delete[](void*)>
   2687c:	e1a00004 	mov	r0, r4
   26880:	e8bd8070 	pop	{r4, r5, r6, pc}
   26884:	0004e21c 	.word	0x0004e21c

00026888 <CLogger::Initialize(CDevice*)>:
   26888:	e92d4010 	push	{r4, lr}
   2688c:	e5801008 	str	r1, [r0, #8]
   26890:	e24dd008 	sub	sp, sp, #8
   26894:	e1a04000 	mov	r4, r0
   26898:	eb0003c9 	bl	277c4 <CMachineInfo::Get()>
   2689c:	eb0002dc 	bl	27414 <CMachineInfo::GetMachineName() const>
   268a0:	e59f301c 	ldr	r3, [pc, #28]	; 268c4 <CLogger::Initialize(CDevice*)+0x3c>
   268a4:	e58d0000 	str	r0, [sp]
   268a8:	e283101c 	add	r1, r3, #28
   268ac:	e1a00004 	mov	r0, r4
   268b0:	e3a02003 	mov	r2, #3
   268b4:	eb000005 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   268b8:	e3a00001 	mov	r0, #1
   268bc:	e28dd008 	add	sp, sp, #8
   268c0:	e8bd8010 	pop	{r4, pc}
   268c4:	000454bc 	.word	0x000454bc

000268c8 <CLogger::SetNewTarget(CDevice*)>:
   268c8:	e5801008 	str	r1, [r0, #8]
   268cc:	e12fff1e 	bx	lr

000268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   268d0:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   268d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   268d8:	e24dd010 	sub	sp, sp, #16
   268dc:	e28dc018 	add	ip, sp, #24
   268e0:	e58dc000 	str	ip, [sp]
   268e4:	e59d3014 	ldr	r3, [sp, #20]
   268e8:	e58dc00c 	str	ip, [sp, #12]
   268ec:	eb000003 	bl	26900 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   268f0:	e28dd010 	add	sp, sp, #16
   268f4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   268f8:	e28dd004 	add	sp, sp, #4
   268fc:	e12fff1e 	bx	lr

00026900 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   26900:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   26904:	e1a07003 	mov	r7, r3
   26908:	e24dd024 	sub	sp, sp, #36	; 0x24
   2690c:	e1a04000 	mov	r4, r0
   26910:	e1a0000d 	mov	r0, sp
   26914:	e1a05002 	mov	r5, r2
   26918:	e1a06001 	mov	r6, r1
   2691c:	eb000494 	bl	27b74 <CString::CString()>
   26920:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   26924:	e1a01007 	mov	r1, r7
   26928:	e1a0000d 	mov	r0, sp
   2692c:	eb0006ab 	bl	283e0 <CString::FormatV(char const*, std::__va_list)>
   26930:	e1a0000d 	mov	r0, sp
   26934:	eb0004a4 	bl	27bcc <CString::operator char const*() const>
   26938:	e1a02005 	mov	r2, r5
   2693c:	e1a03000 	mov	r3, r0
   26940:	e1a01006 	mov	r1, r6
   26944:	e1a00004 	mov	r0, r4
   26948:	eb000103 	bl	26d5c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   2694c:	e5943000 	ldr	r3, [r4]
   26950:	e1550003 	cmp	r5, r3
   26954:	8a00002c 	bhi	26a0c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
   26958:	e28d0010 	add	r0, sp, #16
   2695c:	eb000484 	bl	27b74 <CString::CString()>
   26960:	e3550000 	cmp	r5, #0
   26964:	0a00002c 	beq	26a1c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>
   26968:	e5940004 	ldr	r0, [r4, #4]
   2696c:	e3500000 	cmp	r0, #0
   26970:	0a00004c 	beq	26aa8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a8>
   26974:	eb000b24 	bl	2960c <CTimer::GetTimeString()>
   26978:	e2507000 	subs	r7, r0, #0
   2697c:	0a000049 	beq	26aa8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a8>
   26980:	e1a00007 	mov	r0, r7
   26984:	eb000490 	bl	27bcc <CString::operator char const*() const>
   26988:	e1a01000 	mov	r1, r0
   2698c:	e28d0010 	add	r0, sp, #16
   26990:	eb0004bf 	bl	27c94 <CString::Append(char const*)>
   26994:	e59f114c 	ldr	r1, [pc, #332]	; 26ae8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
   26998:	e28d0010 	add	r0, sp, #16
   2699c:	eb0004bc 	bl	27c94 <CString::Append(char const*)>
   269a0:	e5973000 	ldr	r3, [r7]
   269a4:	e1a00007 	mov	r0, r7
   269a8:	e5933004 	ldr	r3, [r3, #4]
   269ac:	e12fff33 	blx	r3
   269b0:	e1a01006 	mov	r1, r6
   269b4:	e28d0010 	add	r0, sp, #16
   269b8:	eb0004b5 	bl	27c94 <CString::Append(char const*)>
   269bc:	e59f1128 	ldr	r1, [pc, #296]	; 26aec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   269c0:	e28d0010 	add	r0, sp, #16
   269c4:	eb0004b2 	bl	27c94 <CString::Append(char const*)>
   269c8:	e1a0000d 	mov	r0, sp
   269cc:	eb00047e 	bl	27bcc <CString::operator char const*() const>
   269d0:	e1a01000 	mov	r1, r0
   269d4:	e28d0010 	add	r0, sp, #16
   269d8:	eb0004ad 	bl	27c94 <CString::Append(char const*)>
   269dc:	e3550000 	cmp	r5, #0
   269e0:	0a00001e 	beq	26a60 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   269e4:	e59f1104 	ldr	r1, [pc, #260]	; 26af0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
   269e8:	e28d0010 	add	r0, sp, #16
   269ec:	eb0004a8 	bl	27c94 <CString::Append(char const*)>
   269f0:	e28d0010 	add	r0, sp, #16
   269f4:	eb000474 	bl	27bcc <CString::operator char const*() const>
   269f8:	e1a01000 	mov	r1, r0
   269fc:	e1a00004 	mov	r0, r4
   26a00:	eb000079 	bl	26bec <CLogger::Write(char const*)>
   26a04:	e28d0010 	add	r0, sp, #16
   26a08:	eb000426 	bl	27aa8 <CString::~CString()>
   26a0c:	e1a0000d 	mov	r0, sp
   26a10:	eb000424 	bl	27aa8 <CString::~CString()>
   26a14:	e28dd024 	add	sp, sp, #36	; 0x24
   26a18:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   26a1c:	e59f10d0 	ldr	r1, [pc, #208]	; 26af4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f4>
   26a20:	e28d0010 	add	r0, sp, #16
   26a24:	eb00046e 	bl	27be4 <CString::operator=(char const*)>
   26a28:	e5940004 	ldr	r0, [r4, #4]
   26a2c:	e3500000 	cmp	r0, #0
   26a30:	1a000028 	bne	26ad8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
   26a34:	e1a01006 	mov	r1, r6
   26a38:	e28d0010 	add	r0, sp, #16
   26a3c:	eb000494 	bl	27c94 <CString::Append(char const*)>
   26a40:	e59f10a4 	ldr	r1, [pc, #164]	; 26aec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   26a44:	e28d0010 	add	r0, sp, #16
   26a48:	eb000491 	bl	27c94 <CString::Append(char const*)>
   26a4c:	e1a0000d 	mov	r0, sp
   26a50:	eb00045d 	bl	27bcc <CString::operator char const*() const>
   26a54:	e1a01000 	mov	r1, r0
   26a58:	e28d0010 	add	r0, sp, #16
   26a5c:	eb00048c 	bl	27c94 <CString::Append(char const*)>
   26a60:	e59f1090 	ldr	r1, [pc, #144]	; 26af8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f8>
   26a64:	e28d0010 	add	r0, sp, #16
   26a68:	eb000489 	bl	27c94 <CString::Append(char const*)>
   26a6c:	e59f107c 	ldr	r1, [pc, #124]	; 26af0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
   26a70:	e28d0010 	add	r0, sp, #16
   26a74:	eb000486 	bl	27c94 <CString::Append(char const*)>
   26a78:	e28d0010 	add	r0, sp, #16
   26a7c:	eb000452 	bl	27bcc <CString::operator char const*() const>
   26a80:	e1a01000 	mov	r1, r0
   26a84:	e1a00004 	mov	r0, r4
   26a88:	eb000057 	bl	26bec <CLogger::Write(char const*)>
   26a8c:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   26a90:	e3530000 	cmp	r3, #0
   26a94:	0a000000 	beq	26a9c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
   26a98:	e12fff33 	blx	r3
   26a9c:	e3a000ff 	mov	r0, #255	; 0xff
   26aa0:	eb000986 	bl	290c0 <set_qemu_exit_status>
   26aa4:	eb000989 	bl	290d0 <halt>
   26aa8:	e1a01006 	mov	r1, r6
   26aac:	e28d0010 	add	r0, sp, #16
   26ab0:	eb000477 	bl	27c94 <CString::Append(char const*)>
   26ab4:	e59f1030 	ldr	r1, [pc, #48]	; 26aec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   26ab8:	e28d0010 	add	r0, sp, #16
   26abc:	eb000474 	bl	27c94 <CString::Append(char const*)>
   26ac0:	e1a0000d 	mov	r0, sp
   26ac4:	eb000440 	bl	27bcc <CString::operator char const*() const>
   26ac8:	e1a01000 	mov	r1, r0
   26acc:	e28d0010 	add	r0, sp, #16
   26ad0:	eb00046f 	bl	27c94 <CString::Append(char const*)>
   26ad4:	eaffffc2 	b	269e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
   26ad8:	eb000acb 	bl	2960c <CTimer::GetTimeString()>
   26adc:	e2507000 	subs	r7, r0, #0
   26ae0:	1affffa6 	bne	26980 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x80>
   26ae4:	eaffffd2 	b	26a34 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
   26ae8:	000454e8 	.word	0x000454e8
   26aec:	000454ec 	.word	0x000454ec
   26af0:	000454f8 	.word	0x000454f8
   26af4:	000454e0 	.word	0x000454e0
   26af8:	000454f0 	.word	0x000454f0

00026afc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   26afc:	e590c000 	ldr	ip, [r0]
   26b00:	e152000c 	cmp	r2, ip
   26b04:	812fff1e 	bxhi	lr
   26b08:	e92d4070 	push	{r4, r5, r6, lr}
   26b0c:	e1a05003 	mov	r5, r3
   26b10:	e3a03000 	mov	r3, #0
   26b14:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   26b18:	e1520003 	cmp	r2, r3
   26b1c:	e1a04000 	mov	r4, r0
   26b20:	e5cd3000 	strb	r3, [sp]
   26b24:	0a00000f 	beq	26b68 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   26b28:	e1a0000d 	mov	r0, sp
   26b2c:	eb000e32 	bl	2a3fc <strcat>
   26b30:	e1a0000d 	mov	r0, sp
   26b34:	e59f1090 	ldr	r1, [pc, #144]	; 26bcc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   26b38:	eb000e2f 	bl	2a3fc <strcat>
   26b3c:	e1a01005 	mov	r1, r5
   26b40:	e1a0000d 	mov	r0, sp
   26b44:	eb000e2c 	bl	2a3fc <strcat>
   26b48:	e1a0000d 	mov	r0, sp
   26b4c:	e59f107c 	ldr	r1, [pc, #124]	; 26bd0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   26b50:	eb000e29 	bl	2a3fc <strcat>
   26b54:	e1a0100d 	mov	r1, sp
   26b58:	e1a00004 	mov	r0, r4
   26b5c:	eb000022 	bl	26bec <CLogger::Write(char const*)>
   26b60:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   26b64:	e8bd8070 	pop	{r4, r5, r6, pc}
   26b68:	e1a06001 	mov	r6, r1
   26b6c:	e1a0000d 	mov	r0, sp
   26b70:	e59f105c 	ldr	r1, [pc, #92]	; 26bd4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   26b74:	eb000e02 	bl	2a384 <strcpy>
   26b78:	e1a01006 	mov	r1, r6
   26b7c:	e1a0000d 	mov	r0, sp
   26b80:	eb000e1d 	bl	2a3fc <strcat>
   26b84:	e59f1040 	ldr	r1, [pc, #64]	; 26bcc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   26b88:	e1a0000d 	mov	r0, sp
   26b8c:	eb000e1a 	bl	2a3fc <strcat>
   26b90:	e1a01005 	mov	r1, r5
   26b94:	e1a0000d 	mov	r0, sp
   26b98:	eb000e17 	bl	2a3fc <strcat>
   26b9c:	e59f1034 	ldr	r1, [pc, #52]	; 26bd8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
   26ba0:	e1a0000d 	mov	r0, sp
   26ba4:	eb000e14 	bl	2a3fc <strcat>
   26ba8:	e59f1020 	ldr	r1, [pc, #32]	; 26bd0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   26bac:	e1a0000d 	mov	r0, sp
   26bb0:	eb000e11 	bl	2a3fc <strcat>
   26bb4:	e1a0100d 	mov	r1, sp
   26bb8:	e1a00004 	mov	r0, r4
   26bbc:	eb00000a 	bl	26bec <CLogger::Write(char const*)>
   26bc0:	e3a000ff 	mov	r0, #255	; 0xff
   26bc4:	eb00093d 	bl	290c0 <set_qemu_exit_status>
   26bc8:	eb000940 	bl	290d0 <halt>
   26bcc:	000454ec 	.word	0x000454ec
   26bd0:	000454f8 	.word	0x000454f8
   26bd4:	000454e0 	.word	0x000454e0
   26bd8:	000454f0 	.word	0x000454f0

00026bdc <CLogger::Get()>:
   26bdc:	e59f3004 	ldr	r3, [pc, #4]	; 26be8 <CLogger::Get()+0xc>
   26be0:	e5930000 	ldr	r0, [r3]
   26be4:	e12fff1e 	bx	lr
   26be8:	0004e21c 	.word	0x0004e21c

00026bec <CLogger::Write(char const*)>:
   26bec:	e92d4070 	push	{r4, r5, r6, lr}
   26bf0:	e1a04000 	mov	r4, r0
   26bf4:	e1a00001 	mov	r0, r1
   26bf8:	e1a05001 	mov	r5, r1
   26bfc:	eb000d22 	bl	2a08c <strlen>
   26c00:	e1a06000 	mov	r6, r0
   26c04:	e5940008 	ldr	r0, [r4, #8]
   26c08:	e1a02006 	mov	r2, r6
   26c0c:	e5903000 	ldr	r3, [r0]
   26c10:	e1a01005 	mov	r1, r5
   26c14:	e593300c 	ldr	r3, [r3, #12]
   26c18:	e12fff33 	blx	r3
   26c1c:	e5940018 	ldr	r0, [r4, #24]
   26c20:	e3500000 	cmp	r0, #0
   26c24:	1a000018 	bne	26c8c <CLogger::Write(char const*)+0xa0>
   26c28:	e59f2064 	ldr	r2, [pc, #100]	; 26c94 <CLogger::Write(char const*)+0xa8>
   26c2c:	e0850006 	add	r0, r5, r6
   26c30:	e1550000 	cmp	r5, r0
   26c34:	0a00000f 	beq	26c78 <CLogger::Write(char const*)+0x8c>
   26c38:	e0d510d1 	ldrsb	r1, [r5], #1
   26c3c:	e351000d 	cmp	r1, #13
   26c40:	0afffffa 	beq	26c30 <CLogger::Write(char const*)+0x44>
   26c44:	e594c010 	ldr	ip, [r4, #16]
   26c48:	e594e00c 	ldr	lr, [r4, #12]
   26c4c:	e7ce100c 	strb	r1, [lr, ip]
   26c50:	e5943010 	ldr	r3, [r4, #16]
   26c54:	e5941014 	ldr	r1, [r4, #20]
   26c58:	e2833001 	add	r3, r3, #1
   26c5c:	e0033002 	and	r3, r3, r2
   26c60:	e1530001 	cmp	r3, r1
   26c64:	e5843010 	str	r3, [r4, #16]
   26c68:	1afffff0 	bne	26c30 <CLogger::Write(char const*)+0x44>
   26c6c:	e2433001 	sub	r3, r3, #1
   26c70:	e0033002 	and	r3, r3, r2
   26c74:	e5843010 	str	r3, [r4, #16]
   26c78:	e5943018 	ldr	r3, [r4, #24]
   26c7c:	e3530000 	cmp	r3, #0
   26c80:	08bd8070 	popeq	{r4, r5, r6, pc}
   26c84:	e8bd4070 	pop	{r4, r5, r6, lr}
   26c88:	ea00145a 	b	2bdf8 <LeaveCritical>
   26c8c:	eb00142e 	bl	2bd4c <EnterCritical>
   26c90:	eaffffe4 	b	26c28 <CLogger::Write(char const*)+0x3c>
   26c94:	00003fff 	.word	0x00003fff

00026c98 <CLogger::Read(void*, unsigned int)>:
   26c98:	e92d4070 	push	{r4, r5, r6, lr}
   26c9c:	e1a04000 	mov	r4, r0
   26ca0:	e5900018 	ldr	r0, [r0, #24]
   26ca4:	e1a05001 	mov	r5, r1
   26ca8:	e3500000 	cmp	r0, #0
   26cac:	e1a06002 	mov	r6, r2
   26cb0:	1a00001c 	bne	26d28 <CLogger::Read(void*, unsigned int)+0x90>
   26cb4:	e5942010 	ldr	r2, [r4, #16]
   26cb8:	e5943014 	ldr	r3, [r4, #20]
   26cbc:	e1520003 	cmp	r2, r3
   26cc0:	0a000021 	beq	26d4c <CLogger::Read(void*, unsigned int)+0xb4>
   26cc4:	e1a01005 	mov	r1, r5
   26cc8:	e59f2088 	ldr	r2, [pc, #136]	; 26d58 <CLogger::Read(void*, unsigned int)+0xc0>
   26ccc:	e3a05000 	mov	r5, #0
   26cd0:	ea00000a 	b	26d00 <CLogger::Read(void*, unsigned int)+0x68>
   26cd4:	e594000c 	ldr	r0, [r4, #12]
   26cd8:	e2855001 	add	r5, r5, #1
   26cdc:	e19030d3 	ldrsb	r3, [r0, r3]
   26ce0:	e4c13001 	strb	r3, [r1], #1
   26ce4:	e5943014 	ldr	r3, [r4, #20]
   26ce8:	e5940010 	ldr	r0, [r4, #16]
   26cec:	e2833001 	add	r3, r3, #1
   26cf0:	e0033002 	and	r3, r3, r2
   26cf4:	e1530000 	cmp	r3, r0
   26cf8:	e5843014 	str	r3, [r4, #20]
   26cfc:	0a000001 	beq	26d08 <CLogger::Read(void*, unsigned int)+0x70>
   26d00:	e1550006 	cmp	r5, r6
   26d04:	1afffff2 	bne	26cd4 <CLogger::Read(void*, unsigned int)+0x3c>
   26d08:	e5943018 	ldr	r3, [r4, #24]
   26d0c:	e3530000 	cmp	r3, #0
   26d10:	1a000001 	bne	26d1c <CLogger::Read(void*, unsigned int)+0x84>
   26d14:	e1a00005 	mov	r0, r5
   26d18:	e8bd8070 	pop	{r4, r5, r6, pc}
   26d1c:	eb001435 	bl	2bdf8 <LeaveCritical>
   26d20:	e1a00005 	mov	r0, r5
   26d24:	e8bd8070 	pop	{r4, r5, r6, pc}
   26d28:	eb001407 	bl	2bd4c <EnterCritical>
   26d2c:	e5942010 	ldr	r2, [r4, #16]
   26d30:	e5943014 	ldr	r3, [r4, #20]
   26d34:	e1520003 	cmp	r2, r3
   26d38:	1affffe1 	bne	26cc4 <CLogger::Read(void*, unsigned int)+0x2c>
   26d3c:	e5943018 	ldr	r3, [r4, #24]
   26d40:	e3530000 	cmp	r3, #0
   26d44:	0a000000 	beq	26d4c <CLogger::Read(void*, unsigned int)+0xb4>
   26d48:	eb00142a 	bl	2bdf8 <LeaveCritical>
   26d4c:	e3e05000 	mvn	r5, #0
   26d50:	e1a00005 	mov	r0, r5
   26d54:	e8bd8070 	pop	{r4, r5, r6, pc}
   26d58:	00003fff 	.word	0x00003fff

00026d5c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   26d5c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   26d60:	e1a05000 	mov	r5, r0
   26d64:	e24dd00c 	sub	sp, sp, #12
   26d68:	e3a00f42 	mov	r0, #264	; 0x108
   26d6c:	e1a07003 	mov	r7, r3
   26d70:	e1a09002 	mov	r9, r2
   26d74:	e1a08001 	mov	r8, r1
   26d78:	eb0010c1 	bl	2b084 <operator new(unsigned int)>
   26d7c:	e3a06000 	mov	r6, #0
   26d80:	e1a04000 	mov	r4, r0
   26d84:	e1a01008 	mov	r1, r8
   26d88:	e3a02032 	mov	r2, #50	; 0x32
   26d8c:	e4c09001 	strb	r9, [r0], #1
   26d90:	eb000d86 	bl	2a3b0 <strncpy>
   26d94:	e1a01007 	mov	r1, r7
   26d98:	e2840033 	add	r0, r4, #51	; 0x33
   26d9c:	e3a020c8 	mov	r2, #200	; 0xc8
   26da0:	e5c46032 	strb	r6, [r4, #50]	; 0x32
   26da4:	eb000d81 	bl	2a3b0 <strncpy>
   26da8:	e5950004 	ldr	r0, [r5, #4]
   26dac:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
   26db0:	e1500006 	cmp	r0, r6
   26db4:	0a000004 	beq	26dcc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   26db8:	e28d2004 	add	r2, sp, #4
   26dbc:	e1a0100d 	mov	r1, sp
   26dc0:	eb0009a2 	bl	29450 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   26dc4:	e1500006 	cmp	r0, r6
   26dc8:	1a000021 	bne	26e54 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   26dcc:	e3a03000 	mov	r3, #0
   26dd0:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   26dd4:	e58430fc 	str	r3, [r4, #252]	; 0xfc
   26dd8:	e3500000 	cmp	r0, #0
   26ddc:	e5843100 	str	r3, [r4, #256]	; 0x100
   26de0:	e5843104 	str	r3, [r4, #260]	; 0x104
   26de4:	1a000027 	bne	26e88 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
   26de8:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
   26dec:	e2823001 	add	r3, r2, #1
   26df0:	e3530032 	cmp	r3, #50	; 0x32
   26df4:	e0852102 	add	r2, r5, r2, lsl #2
   26df8:	e582401c 	str	r4, [r2, #28]
   26dfc:	03a02000 	moveq	r2, #0
   26e00:	01a03002 	moveq	r3, r2
   26e04:	058520e4 	streq	r2, [r5, #228]	; 0xe4
   26e08:	e59520e8 	ldr	r2, [r5, #232]	; 0xe8
   26e0c:	158530e4 	strne	r3, [r5, #228]	; 0xe4
   26e10:	e1520003 	cmp	r2, r3
   26e14:	0a00001e 	beq	26e94 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
   26e18:	e3500000 	cmp	r0, #0
   26e1c:	13a04000 	movne	r4, #0
   26e20:	0a000005 	beq	26e3c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   26e24:	eb0013f3 	bl	2bdf8 <LeaveCritical>
   26e28:	e3540000 	cmp	r4, #0
   26e2c:	0a000002 	beq	26e3c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   26e30:	e1a00004 	mov	r0, r4
   26e34:	e3a01f42 	mov	r1, #264	; 0x108
   26e38:	eb00109f 	bl	2b0bc <operator delete(void*, unsigned int)>
   26e3c:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
   26e40:	e3530000 	cmp	r3, #0
   26e44:	0a000000 	beq	26e4c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
   26e48:	e12fff33 	blx	r3
   26e4c:	e28dd00c 	add	sp, sp, #12
   26e50:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   26e54:	e59d3004 	ldr	r3, [sp, #4]
   26e58:	e59f105c 	ldr	r1, [pc, #92]	; 26ebc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x160>
   26e5c:	e59d2000 	ldr	r2, [sp]
   26e60:	e0831391 	umull	r1, r3, r1, r3
   26e64:	e1a036a3 	lsr	r3, r3, #13
   26e68:	e5950004 	ldr	r0, [r5, #4]
   26e6c:	e5843100 	str	r3, [r4, #256]	; 0x100
   26e70:	e58420fc 	str	r2, [r4, #252]	; 0xfc
   26e74:	eb000947 	bl	29398 <CTimer::GetTimeZone() const>
   26e78:	e5840104 	str	r0, [r4, #260]	; 0x104
   26e7c:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   26e80:	e3500000 	cmp	r0, #0
   26e84:	0affffd7 	beq	26de8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   26e88:	eb0013af 	bl	2bd4c <EnterCritical>
   26e8c:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   26e90:	eaffffd4 	b	26de8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   26e94:	e2832001 	add	r2, r3, #1
   26e98:	e3520032 	cmp	r2, #50	; 0x32
   26e9c:	e0853103 	add	r3, r5, r3, lsl #2
   26ea0:	e593401c 	ldr	r4, [r3, #28]
   26ea4:	03a03000 	moveq	r3, #0
   26ea8:	158520e8 	strne	r2, [r5, #232]	; 0xe8
   26eac:	058530e8 	streq	r3, [r5, #232]	; 0xe8
   26eb0:	e3500000 	cmp	r0, #0
   26eb4:	0affffdb 	beq	26e28 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
   26eb8:	eaffffd9 	b	26e24 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
   26ebc:	d1b71759 	.word	0xd1b71759

00026ec0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   26ec0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26ec4:	e1a04000 	mov	r4, r0
   26ec8:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   26ecc:	e1a07001 	mov	r7, r1
   26ed0:	e3500000 	cmp	r0, #0
   26ed4:	e1a08002 	mov	r8, r2
   26ed8:	e1a06003 	mov	r6, r3
   26edc:	1a000022 	bne	26f6c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
   26ee0:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   26ee4:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   26ee8:	e1530002 	cmp	r3, r2
   26eec:	0a000028 	beq	26f94 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   26ef0:	e283c001 	add	ip, r3, #1
   26ef4:	e35c0032 	cmp	ip, #50	; 0x32
   26ef8:	e0843103 	add	r3, r4, r3, lsl #2
   26efc:	e593501c 	ldr	r5, [r3, #28]
   26f00:	03a03000 	moveq	r3, #0
   26f04:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
   26f08:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   26f0c:	e3500000 	cmp	r0, #0
   26f10:	1a000021 	bne	26f9c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
   26f14:	e1a01005 	mov	r1, r5
   26f18:	e4d12001 	ldrb	r2, [r1], #1
   26f1c:	e1a00008 	mov	r0, r8
   26f20:	e5c72000 	strb	r2, [r7]
   26f24:	eb000d16 	bl	2a384 <strcpy>
   26f28:	e2851033 	add	r1, r5, #51	; 0x33
   26f2c:	e1a00006 	mov	r0, r6
   26f30:	eb000d13 	bl	2a384 <strcpy>
   26f34:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
   26f38:	e59d1018 	ldr	r1, [sp, #24]
   26f3c:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   26f40:	e5812000 	str	r2, [r1]
   26f44:	e59d201c 	ldr	r2, [sp, #28]
   26f48:	e1a00005 	mov	r0, r5
   26f4c:	e5823000 	str	r3, [r2]
   26f50:	e5953104 	ldr	r3, [r5, #260]	; 0x104
   26f54:	e59d2020 	ldr	r2, [sp, #32]
   26f58:	e3a01f42 	mov	r1, #264	; 0x108
   26f5c:	e5823000 	str	r3, [r2]
   26f60:	eb001055 	bl	2b0bc <operator delete(void*, unsigned int)>
   26f64:	e3a00001 	mov	r0, #1
   26f68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26f6c:	eb001376 	bl	2bd4c <EnterCritical>
   26f70:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   26f74:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   26f78:	e1520003 	cmp	r2, r3
   26f7c:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
   26f80:	1affffda 	bne	26ef0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
   26f84:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   26f88:	e3530000 	cmp	r3, #0
   26f8c:	0a000000 	beq	26f94 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   26f90:	eb001398 	bl	2bdf8 <LeaveCritical>
   26f94:	e3a00000 	mov	r0, #0
   26f98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26f9c:	eb001395 	bl	2bdf8 <LeaveCritical>
   26fa0:	eaffffdb 	b	26f14 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

00026fa4 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   26fa4:	e58010f0 	str	r1, [r0, #240]	; 0xf0
   26fa8:	e12fff1e 	bx	lr

00026fac <CLogger::RegisterPanicHandler(void (*)())>:
   26fac:	e58010f4 	str	r1, [r0, #244]	; 0xf4
   26fb0:	e12fff1e 	bx	lr

00026fb4 <CMachineInfo::CMachineInfo()>:
   26fb4:	e92d4810 	push	{r4, fp, lr}
   26fb8:	e28db008 	add	fp, sp, #8
   26fbc:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   26fc0:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
   26fc4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fc8:	e3a02000 	mov	r2, #0
   26fcc:	e5832000 	str	r2, [r3]
   26fd0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fd4:	e3a02010 	mov	r2, #16
   26fd8:	e5c32004 	strb	r2, [r3, #4]
   26fdc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fe0:	e3a02000 	mov	r2, #0
   26fe4:	e5832008 	str	r2, [r3, #8]
   26fe8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fec:	e3a02000 	mov	r2, #0
   26ff0:	e583200c 	str	r2, [r3, #12]
   26ff4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26ff8:	e3a02004 	mov	r2, #4
   26ffc:	e5c32010 	strb	r2, [r3, #16]
   27000:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27004:	e3a02000 	mov	r2, #0
   27008:	e5832014 	str	r2, [r3, #20]
   2700c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27010:	e59f23b8 	ldr	r2, [pc, #952]	; 273d0 <CMachineInfo::CMachineInfo()+0x41c>
   27014:	e1c321b8 	strh	r2, [r3, #24]
   27018:	e59f33b4 	ldr	r3, [pc, #948]	; 273d4 <CMachineInfo::CMachineInfo()+0x420>
   2701c:	e5933000 	ldr	r3, [r3]
   27020:	e3530000 	cmp	r3, #0
   27024:	0a00001e 	beq	270a4 <CMachineInfo::CMachineInfo()+0xf0>
   27028:	e59f33a4 	ldr	r3, [pc, #932]	; 273d4 <CMachineInfo::CMachineInfo()+0x420>
   2702c:	e5933000 	ldr	r3, [r3]
   27030:	e5932000 	ldr	r2, [r3]
   27034:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27038:	e5832000 	str	r2, [r3]
   2703c:	e59f3390 	ldr	r3, [pc, #912]	; 273d4 <CMachineInfo::CMachineInfo()+0x420>
   27040:	e5933000 	ldr	r3, [r3]
   27044:	e5d32004 	ldrb	r2, [r3, #4]
   27048:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2704c:	e5c32004 	strb	r2, [r3, #4]
   27050:	e59f337c 	ldr	r3, [pc, #892]	; 273d4 <CMachineInfo::CMachineInfo()+0x420>
   27054:	e5933000 	ldr	r3, [r3]
   27058:	e5932008 	ldr	r2, [r3, #8]
   2705c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27060:	e5832008 	str	r2, [r3, #8]
   27064:	e59f3368 	ldr	r3, [pc, #872]	; 273d4 <CMachineInfo::CMachineInfo()+0x420>
   27068:	e5933000 	ldr	r3, [r3]
   2706c:	e593200c 	ldr	r2, [r3, #12]
   27070:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27074:	e583200c 	str	r2, [r3, #12]
   27078:	e59f3354 	ldr	r3, [pc, #852]	; 273d4 <CMachineInfo::CMachineInfo()+0x420>
   2707c:	e5933000 	ldr	r3, [r3]
   27080:	e5d32010 	ldrb	r2, [r3, #16]
   27084:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27088:	e5c32010 	strb	r2, [r3, #16]
   2708c:	e59f3340 	ldr	r3, [pc, #832]	; 273d4 <CMachineInfo::CMachineInfo()+0x420>
   27090:	e5933000 	ldr	r3, [r3]
   27094:	e5932014 	ldr	r2, [r3, #20]
   27098:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2709c:	e5832014 	str	r2, [r3, #20]
   270a0:	ea0000c6 	b	273c0 <CMachineInfo::CMachineInfo()+0x40c>
   270a4:	e59f2328 	ldr	r2, [pc, #808]	; 273d4 <CMachineInfo::CMachineInfo()+0x420>
   270a8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   270ac:	e5823000 	str	r3, [r2]
   270b0:	e24b3020 	sub	r3, fp, #32
   270b4:	e3a01001 	mov	r1, #1
   270b8:	e1a00003 	mov	r0, r3
   270bc:	ebfff5f4 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   270c0:	e24b2030 	sub	r2, fp, #48	; 0x30
   270c4:	e24b0020 	sub	r0, fp, #32
   270c8:	e3a03000 	mov	r3, #0
   270cc:	e58d3000 	str	r3, [sp]
   270d0:	e3a03010 	mov	r3, #16
   270d4:	e59f12fc 	ldr	r1, [pc, #764]	; 273d8 <CMachineInfo::CMachineInfo()+0x424>
   270d8:	ebfff5f9 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   270dc:	e1a03000 	mov	r3, r0
   270e0:	e3530000 	cmp	r3, #0
   270e4:	0a000003 	beq	270f8 <CMachineInfo::CMachineInfo()+0x144>
   270e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   270ec:	e6ff2073 	uxth	r2, r3
   270f0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   270f4:	e1c321b8 	strh	r2, [r3, #24]
   270f8:	e24b2040 	sub	r2, fp, #64	; 0x40
   270fc:	e24b0020 	sub	r0, fp, #32
   27100:	e3a03000 	mov	r3, #0
   27104:	e58d3000 	str	r3, [sp]
   27108:	e3a03010 	mov	r3, #16
   2710c:	e59f12c8 	ldr	r1, [pc, #712]	; 273dc <CMachineInfo::CMachineInfo()+0x428>
   27110:	ebfff5eb 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   27114:	e1a03000 	mov	r3, r0
   27118:	e2233001 	eor	r3, r3, #1
   2711c:	e6ef3073 	uxtb	r3, r3
   27120:	e3530000 	cmp	r3, #0
   27124:	0a000001 	beq	27130 <CMachineInfo::CMachineInfo()+0x17c>
   27128:	e3a04000 	mov	r4, #0
   2712c:	ea00009e 	b	273ac <CMachineInfo::CMachineInfo()+0x3f8>
   27130:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   27134:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27138:	e5832000 	str	r2, [r3]
   2713c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27140:	e5933000 	ldr	r3, [r3]
   27144:	e2033502 	and	r3, r3, #8388608	; 0x800000
   27148:	e3530000 	cmp	r3, #0
   2714c:	0a000064 	beq	272e4 <CMachineInfo::CMachineInfo()+0x330>
   27150:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27154:	e5933000 	ldr	r3, [r3]
   27158:	e1a03223 	lsr	r3, r3, #4
   2715c:	e6ef3073 	uxtb	r3, r3
   27160:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   27164:	e3a03000 	mov	r3, #0
   27168:	e50b3010 	str	r3, [fp, #-16]
   2716c:	e51b3010 	ldr	r3, [fp, #-16]
   27170:	e353000d 	cmp	r3, #13
   27174:	8a00000f 	bhi	271b8 <CMachineInfo::CMachineInfo()+0x204>
   27178:	e59f1260 	ldr	r1, [pc, #608]	; 273e0 <CMachineInfo::CMachineInfo()+0x42c>
   2717c:	e51b2010 	ldr	r2, [fp, #-16]
   27180:	e1a03002 	mov	r3, r2
   27184:	e1a03083 	lsl	r3, r3, #1
   27188:	e0833002 	add	r3, r3, r2
   2718c:	e1a03103 	lsl	r3, r3, #2
   27190:	e0813003 	add	r3, r1, r3
   27194:	e5932000 	ldr	r2, [r3]
   27198:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2719c:	e1520003 	cmp	r2, r3
   271a0:	0a000003 	beq	271b4 <CMachineInfo::CMachineInfo()+0x200>
   271a4:	e51b3010 	ldr	r3, [fp, #-16]
   271a8:	e2833001 	add	r3, r3, #1
   271ac:	e50b3010 	str	r3, [fp, #-16]
   271b0:	eaffffed 	b	2716c <CMachineInfo::CMachineInfo()+0x1b8>
   271b4:	e320f000 	nop	{0}
   271b8:	e51b3010 	ldr	r3, [fp, #-16]
   271bc:	e353000d 	cmp	r3, #13
   271c0:	9a000001 	bls	271cc <CMachineInfo::CMachineInfo()+0x218>
   271c4:	e3a04000 	mov	r4, #0
   271c8:	ea000077 	b	273ac <CMachineInfo::CMachineInfo()+0x3f8>
   271cc:	e59f120c 	ldr	r1, [pc, #524]	; 273e0 <CMachineInfo::CMachineInfo()+0x42c>
   271d0:	e51b2010 	ldr	r2, [fp, #-16]
   271d4:	e1a03002 	mov	r3, r2
   271d8:	e1a03083 	lsl	r3, r3, #1
   271dc:	e0833002 	add	r3, r3, r2
   271e0:	e1a03103 	lsl	r3, r3, #2
   271e4:	e0813003 	add	r3, r1, r3
   271e8:	e2833004 	add	r3, r3, #4
   271ec:	e5d32000 	ldrb	r2, [r3]
   271f0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271f4:	e5c32004 	strb	r2, [r3, #4]
   271f8:	e59f11e0 	ldr	r1, [pc, #480]	; 273e0 <CMachineInfo::CMachineInfo()+0x42c>
   271fc:	e51b2010 	ldr	r2, [fp, #-16]
   27200:	e1a03002 	mov	r3, r2
   27204:	e1a03083 	lsl	r3, r3, #1
   27208:	e0833002 	add	r3, r3, r2
   2720c:	e1a03103 	lsl	r3, r3, #2
   27210:	e0813003 	add	r3, r1, r3
   27214:	e2833008 	add	r3, r3, #8
   27218:	e5932000 	ldr	r2, [r3]
   2721c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27220:	e5832008 	str	r2, [r3, #8]
   27224:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27228:	e5933000 	ldr	r3, [r3]
   2722c:	e203300f 	and	r3, r3, #15
   27230:	e2832001 	add	r2, r3, #1
   27234:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27238:	e583200c 	str	r2, [r3, #12]
   2723c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27240:	e5933000 	ldr	r3, [r3]
   27244:	e1a03623 	lsr	r3, r3, #12
   27248:	e6ef3073 	uxtb	r3, r3
   2724c:	e203300f 	and	r3, r3, #15
   27250:	e6ef2073 	uxtb	r2, r3
   27254:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27258:	e5c32010 	strb	r2, [r3, #16]
   2725c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27260:	e5933000 	ldr	r3, [r3]
   27264:	e1a03a23 	lsr	r3, r3, #20
   27268:	e2033007 	and	r3, r3, #7
   2726c:	e3a02c01 	mov	r2, #256	; 0x100
   27270:	e1a03312 	lsl	r3, r2, r3
   27274:	e1a02003 	mov	r2, r3
   27278:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2727c:	e5832014 	str	r2, [r3, #20]
   27280:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27284:	e5d33010 	ldrb	r3, [r3, #16]
   27288:	e3530003 	cmp	r3, #3
   2728c:	da000002 	ble	2729c <CMachineInfo::CMachineInfo()+0x2e8>
   27290:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27294:	e3a02004 	mov	r2, #4
   27298:	e5c32010 	strb	r2, [r3, #16]
   2729c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   272a0:	e5d33004 	ldrb	r3, [r3, #4]
   272a4:	e3530003 	cmp	r3, #3
   272a8:	1a00003e 	bne	273a8 <CMachineInfo::CMachineInfo()+0x3f4>
   272ac:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   272b0:	e5933014 	ldr	r3, [r3, #20]
   272b4:	e3530c01 	cmp	r3, #256	; 0x100
   272b8:	1a00003a 	bne	273a8 <CMachineInfo::CMachineInfo()+0x3f4>
   272bc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   272c0:	e593300c 	ldr	r3, [r3, #12]
   272c4:	e3530001 	cmp	r3, #1
   272c8:	1a000001 	bne	272d4 <CMachineInfo::CMachineInfo()+0x320>
   272cc:	e3a02001 	mov	r2, #1
   272d0:	ea000000 	b	272d8 <CMachineInfo::CMachineInfo()+0x324>
   272d4:	e3a02002 	mov	r2, #2
   272d8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   272dc:	e5c32004 	strb	r2, [r3, #4]
   272e0:	ea000030 	b	273a8 <CMachineInfo::CMachineInfo()+0x3f4>
   272e4:	e3a03000 	mov	r3, #0
   272e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   272ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   272f0:	e3530010 	cmp	r3, #16
   272f4:	8a00000b 	bhi	27328 <CMachineInfo::CMachineInfo()+0x374>
   272f8:	e59f20e4 	ldr	r2, [pc, #228]	; 273e4 <CMachineInfo::CMachineInfo()+0x430>
   272fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27300:	e7922203 	ldr	r2, [r2, r3, lsl #4]
   27304:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27308:	e5933000 	ldr	r3, [r3]
   2730c:	e1520003 	cmp	r2, r3
   27310:	0a000003 	beq	27324 <CMachineInfo::CMachineInfo()+0x370>
   27314:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27318:	e2833001 	add	r3, r3, #1
   2731c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   27320:	eafffff1 	b	272ec <CMachineInfo::CMachineInfo()+0x338>
   27324:	e320f000 	nop	{0}
   27328:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2732c:	e3530010 	cmp	r3, #16
   27330:	9a000001 	bls	2733c <CMachineInfo::CMachineInfo()+0x388>
   27334:	e3a04000 	mov	r4, #0
   27338:	ea00001b 	b	273ac <CMachineInfo::CMachineInfo()+0x3f8>
   2733c:	e59f20a0 	ldr	r2, [pc, #160]	; 273e4 <CMachineInfo::CMachineInfo()+0x430>
   27340:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27344:	e1a03203 	lsl	r3, r3, #4
   27348:	e0823003 	add	r3, r2, r3
   2734c:	e5d32004 	ldrb	r2, [r3, #4]
   27350:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27354:	e5c32004 	strb	r2, [r3, #4]
   27358:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2735c:	e3a02001 	mov	r2, #1
   27360:	e5832008 	str	r2, [r3, #8]
   27364:	e59f2078 	ldr	r2, [pc, #120]	; 273e4 <CMachineInfo::CMachineInfo()+0x430>
   27368:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2736c:	e1a03203 	lsl	r3, r3, #4
   27370:	e0823003 	add	r3, r2, r3
   27374:	e5932008 	ldr	r2, [r3, #8]
   27378:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2737c:	e583200c 	str	r2, [r3, #12]
   27380:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27384:	e3a02000 	mov	r2, #0
   27388:	e5c32010 	strb	r2, [r3, #16]
   2738c:	e59f2050 	ldr	r2, [pc, #80]	; 273e4 <CMachineInfo::CMachineInfo()+0x430>
   27390:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27394:	e1a03203 	lsl	r3, r3, #4
   27398:	e0823003 	add	r3, r2, r3
   2739c:	e593200c 	ldr	r2, [r3, #12]
   273a0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   273a4:	e5832014 	str	r2, [r3, #20]
   273a8:	e3a04001 	mov	r4, #1
   273ac:	e24b3020 	sub	r3, fp, #32
   273b0:	e1a00003 	mov	r0, r3
   273b4:	ebfff53d 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   273b8:	e3540001 	cmp	r4, #1
   273bc:	e320f000 	nop	{0}
   273c0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   273c4:	e1a00003 	mov	r0, r3
   273c8:	e24bd008 	sub	sp, fp, #8
   273cc:	e8bd8810 	pop	{r4, fp, pc}
   273d0:	00001f35 	.word	0x00001f35
   273d4:	0004e220 	.word	0x0004e220
   273d8:	00060001 	.word	0x00060001
   273dc:	00010002 	.word	0x00010002
   273e0:	000481d4 	.word	0x000481d4
   273e4:	000480c4 	.word	0x000480c4

000273e8 <CMachineInfo::~CMachineInfo()>:
   273e8:	e3a02010 	mov	r2, #16
   273ec:	e59f3014 	ldr	r3, [pc, #20]	; 27408 <CMachineInfo::~CMachineInfo()+0x20>
   273f0:	e5c02004 	strb	r2, [r0, #4]
   273f4:	e5932000 	ldr	r2, [r3]
   273f8:	e1500002 	cmp	r0, r2
   273fc:	03a02000 	moveq	r2, #0
   27400:	05832000 	streq	r2, [r3]
   27404:	e12fff1e 	bx	lr
   27408:	0004e220 	.word	0x0004e220

0002740c <CMachineInfo::GetMachineModel() const>:
   2740c:	e5d00004 	ldrb	r0, [r0, #4]
   27410:	e12fff1e 	bx	lr

00027414 <CMachineInfo::GetMachineName() const>:
   27414:	e5d02004 	ldrb	r2, [r0, #4]
   27418:	e59f3008 	ldr	r3, [pc, #8]	; 27428 <CMachineInfo::GetMachineName() const+0x14>
   2741c:	e0833102 	add	r3, r3, r2, lsl #2
   27420:	e59301b8 	ldr	r0, [r3, #440]	; 0x1b8
   27424:	e12fff1e 	bx	lr
   27428:	000480c4 	.word	0x000480c4

0002742c <CMachineInfo::GetModelMajor() const>:
   2742c:	e5900008 	ldr	r0, [r0, #8]
   27430:	e12fff1e 	bx	lr

00027434 <CMachineInfo::GetModelRevision() const>:
   27434:	e590000c 	ldr	r0, [r0, #12]
   27438:	e12fff1e 	bx	lr

0002743c <CMachineInfo::GetSoCType() const>:
   2743c:	e5d00010 	ldrb	r0, [r0, #16]
   27440:	e12fff1e 	bx	lr

00027444 <CMachineInfo::GetRAMSize() const>:
   27444:	e5900014 	ldr	r0, [r0, #20]
   27448:	e12fff1e 	bx	lr

0002744c <CMachineInfo::GetSoCName() const>:
   2744c:	e5d02010 	ldrb	r2, [r0, #16]
   27450:	e59f3008 	ldr	r3, [pc, #8]	; 27460 <CMachineInfo::GetSoCName() const+0x14>
   27454:	e0833102 	add	r3, r3, r2, lsl #2
   27458:	e59301fc 	ldr	r0, [r3, #508]	; 0x1fc
   2745c:	e12fff1e 	bx	lr
   27460:	000480c4 	.word	0x000480c4

00027464 <CMachineInfo::GetRevisionRaw() const>:
   27464:	e5900000 	ldr	r0, [r0]
   27468:	e12fff1e 	bx	lr

0002746c <CMachineInfo::GetActLEDInfo() const>:
   2746c:	e5d02004 	ldrb	r2, [r0, #4]
   27470:	e59f3008 	ldr	r3, [pc, #8]	; 27480 <CMachineInfo::GetActLEDInfo() const+0x14>
   27474:	e0833102 	add	r3, r3, r2, lsl #2
   27478:	e5930210 	ldr	r0, [r3, #528]	; 0x210
   2747c:	e12fff1e 	bx	lr
   27480:	000480c4 	.word	0x000480c4

00027484 <CMachineInfo::GetClockRate(unsigned int) const>:
   27484:	e92d4030 	push	{r4, r5, lr}
   27488:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   2748c:	e1a04001 	mov	r4, r1
   27490:	e1a05000 	mov	r5, r0
   27494:	e3a01000 	mov	r1, #0
   27498:	e28d000c 	add	r0, sp, #12
   2749c:	ebfff4fc 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   274a0:	e3a03004 	mov	r3, #4
   274a4:	e58d3000 	str	r3, [sp]
   274a8:	e3a03014 	mov	r3, #20
   274ac:	e28d000c 	add	r0, sp, #12
   274b0:	e08d2003 	add	r2, sp, r3
   274b4:	e59f1074 	ldr	r1, [pc, #116]	; 27530 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
   274b8:	e58d4020 	str	r4, [sp, #32]
   274bc:	ebfff500 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   274c0:	e3500000 	cmp	r0, #0
   274c4:	1a000009 	bne	274f0 <CMachineInfo::GetClockRate(unsigned int) const+0x6c>
   274c8:	e3540002 	cmp	r4, #2
   274cc:	0a00000d 	beq	27508 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
   274d0:	e3540004 	cmp	r4, #4
   274d4:	0a00000f 	beq	27518 <CMachineInfo::GetClockRate(unsigned int) const+0x94>
   274d8:	e3540001 	cmp	r4, #1
   274dc:	0a00000b 	beq	27510 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   274e0:	e59f104c 	ldr	r1, [pc, #76]	; 27534 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
   274e4:	e59f204c 	ldr	r2, [pc, #76]	; 27538 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
   274e8:	e2810010 	add	r0, r1, #16
   274ec:	ebfff4c7 	bl	24810 <assertion_failed>
   274f0:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   274f4:	e28d000c 	add	r0, sp, #12
   274f8:	ebfff4ec 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   274fc:	e1a00004 	mov	r0, r4
   27500:	e28dd02c 	add	sp, sp, #44	; 0x2c
   27504:	e8bd8030 	pop	{r4, r5, pc}
   27508:	e59f402c 	ldr	r4, [pc, #44]	; 2753c <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
   2750c:	eafffff8 	b	274f4 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   27510:	e59f4028 	ldr	r4, [pc, #40]	; 27540 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
   27514:	eafffff6 	b	274f4 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   27518:	e5952008 	ldr	r2, [r5, #8]
   2751c:	e59f3020 	ldr	r3, [pc, #32]	; 27544 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
   27520:	e3520002 	cmp	r2, #2
   27524:	e59f401c 	ldr	r4, [pc, #28]	; 27548 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
   27528:	81a04003 	movhi	r4, r3
   2752c:	eafffff0 	b	274f4 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   27530:	00030002 	.word	0x00030002
   27534:	00045674 	.word	0x00045674
   27538:	00000141 	.word	0x00000141
   2753c:	02dc6c00 	.word	0x02dc6c00
   27540:	05f5e100 	.word	0x05f5e100
   27544:	11e1a300 	.word	0x11e1a300
   27548:	0ee6b280 	.word	0x0ee6b280

0002754c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   2754c:	e3510036 	cmp	r1, #54	; 0x36
   27550:	0a00000b 	beq	27584 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x38>
   27554:	e3510037 	cmp	r1, #55	; 0x37
   27558:	1a000004 	bne	27570 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   2755c:	e5d00004 	ldrb	r0, [r0, #4]
   27560:	e3500003 	cmp	r0, #3
   27564:	c3a00028 	movgt	r0, #40	; 0x28
   27568:	d3a0002d 	movle	r0, #45	; 0x2d
   2756c:	e12fff1e 	bx	lr
   27570:	e59f1030 	ldr	r1, [pc, #48]	; 275a8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
   27574:	e92d4010 	push	{r4, lr}
   27578:	e59f202c 	ldr	r2, [pc, #44]	; 275ac <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
   2757c:	e2810010 	add	r0, r1, #16
   27580:	ebfff4a2 	bl	24810 <assertion_failed>
   27584:	e5d03004 	ldrb	r3, [r0, #4]
   27588:	e3530003 	cmp	r3, #3
   2758c:	d3a00028 	movle	r0, #40	; 0x28
   27590:	dafffff5 	ble	2756c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x20>
   27594:	e5900008 	ldr	r0, [r0, #8]
   27598:	e3500002 	cmp	r0, #2
   2759c:	93a0002d 	movls	r0, #45	; 0x2d
   275a0:	83a00029 	movhi	r0, #41	; 0x29
   275a4:	e12fff1e 	bx	lr
   275a8:	00045674 	.word	0x00045674
   275ac:	0000017a 	.word	0x0000017a

000275b0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   275b0:	e5903008 	ldr	r3, [r0, #8]
   275b4:	e3530003 	cmp	r3, #3
   275b8:	8a000005 	bhi	275d4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x24>
   275bc:	e3510001 	cmp	r1, #1
   275c0:	0a00000b 	beq	275f4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
   275c4:	e3510006 	cmp	r1, #6
   275c8:	e59f002c 	ldr	r0, [pc, #44]	; 275fc <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x4c>
   275cc:	13a00000 	movne	r0, #0
   275d0:	e12fff1e 	bx	lr
   275d4:	e3510001 	cmp	r1, #1
   275d8:	0a000003 	beq	275ec <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x3c>
   275dc:	e3510006 	cmp	r1, #6
   275e0:	e59f0018 	ldr	r0, [pc, #24]	; 27600 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
   275e4:	13a00000 	movne	r0, #0
   275e8:	e12fff1e 	bx	lr
   275ec:	e59f0010 	ldr	r0, [pc, #16]	; 27604 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x54>
   275f0:	e12fff1e 	bx	lr
   275f4:	e59f000c 	ldr	r0, [pc, #12]	; 27608 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x58>
   275f8:	e12fff1e 	bx	lr
   275fc:	1dcd6500 	.word	0x1dcd6500
   27600:	2cb41780 	.word	0x2cb41780
   27604:	0337f980 	.word	0x0337f980
   27608:	0124f800 	.word	0x0124f800

0002760c <CMachineInfo::GetDevice(TDeviceId) const>:
   2760c:	e3510000 	cmp	r1, #0
   27610:	1a000003 	bne	27624 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   27614:	e5d00004 	ldrb	r0, [r0, #4]
   27618:	e2500001 	subs	r0, r0, #1
   2761c:	13a00001 	movne	r0, #1
   27620:	e12fff1e 	bx	lr
   27624:	e59f100c 	ldr	r1, [pc, #12]	; 27638 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
   27628:	e92d4010 	push	{r4, lr}
   2762c:	e59f2008 	ldr	r2, [pc, #8]	; 2763c <CMachineInfo::GetDevice(TDeviceId) const+0x30>
   27630:	e2810010 	add	r0, r1, #16
   27634:	ebfff475 	bl	24810 <assertion_failed>
   27638:	00045674 	.word	0x00045674
   2763c:	000001b5 	.word	0x000001b5

00027640 <CMachineInfo::ArePWMChannelsSwapped() const>:
   27640:	e5d03004 	ldrb	r3, [r0, #4]
   27644:	e2430004 	sub	r0, r3, #4
   27648:	e6ef0070 	uxtb	r0, r0
   2764c:	e35000fb 	cmp	r0, #251	; 0xfb
   27650:	e2433006 	sub	r3, r3, #6
   27654:	93a00001 	movls	r0, #1
   27658:	83a00000 	movhi	r0, #0
   2765c:	e3530001 	cmp	r3, #1
   27660:	93a00000 	movls	r0, #0
   27664:	e12fff1e 	bx	lr

00027668 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   27668:	e59f30b4 	ldr	r3, [pc, #180]	; 27724 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   2766c:	e92d4010 	push	{r4, lr}
   27670:	e5933000 	ldr	r3, [r3]
   27674:	ea000002 	b	27684 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c>
   27678:	e1500003 	cmp	r0, r3
   2767c:	0a000006 	beq	2769c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x34>
   27680:	e1a00003 	mov	r0, r3
   27684:	e3530000 	cmp	r3, #0
   27688:	1afffffa 	bne	27678 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x10>
   2768c:	e59f1094 	ldr	r1, [pc, #148]	; 27728 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   27690:	e59f2094 	ldr	r2, [pc, #148]	; 2772c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc4>
   27694:	e2810014 	add	r0, r1, #20
   27698:	ebfff45c 	bl	24810 <assertion_failed>
   2769c:	e3d1300f 	bics	r3, r1, #15
   276a0:	1a000007 	bne	276c4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x5c>
   276a4:	e351000c 	cmp	r1, #12
   276a8:	8a000019 	bhi	27714 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xac>
   276ac:	e1d031b8 	ldrh	r3, [r0, #24]
   276b0:	e1a02153 	asr	r2, r3, r1
   276b4:	e3120001 	tst	r2, #1
   276b8:	1a000010 	bne	27700 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x98>
   276bc:	e3a00080 	mov	r0, #128	; 0x80
   276c0:	e8bd8010 	pop	{r4, pc}
   276c4:	e3510081 	cmp	r1, #129	; 0x81
   276c8:	13a0100c 	movne	r1, #12
   276cc:	03a01006 	moveq	r1, #6
   276d0:	e1d021b8 	ldrh	r2, [r0, #24]
   276d4:	e1a03152 	asr	r3, r2, r1
   276d8:	e3130001 	tst	r3, #1
   276dc:	1a000002 	bne	276ec <CMachineInfo::AllocateDMAChannel(unsigned int)+0x84>
   276e0:	e2511001 	subs	r1, r1, #1
   276e4:	2afffffa 	bcs	276d4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x6c>
   276e8:	eafffff3 	b	276bc <CMachineInfo::AllocateDMAChannel(unsigned int)+0x54>
   276ec:	e3a03001 	mov	r3, #1
   276f0:	e1c22113 	bic	r2, r2, r3, lsl r1
   276f4:	e1c021b8 	strh	r2, [r0, #24]
   276f8:	e1a00001 	mov	r0, r1
   276fc:	e8bd8010 	pop	{r4, pc}
   27700:	e3a02001 	mov	r2, #1
   27704:	e1c33112 	bic	r3, r3, r2, lsl r1
   27708:	e1c031b8 	strh	r3, [r0, #24]
   2770c:	e1a00001 	mov	r0, r1
   27710:	e8bd8010 	pop	{r4, pc}
   27714:	e59f100c 	ldr	r1, [pc, #12]	; 27728 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   27718:	e59f2010 	ldr	r2, [pc, #16]	; 27730 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc8>
   2771c:	e2810024 	add	r0, r1, #36	; 0x24
   27720:	ebfff43a 	bl	24810 <assertion_failed>
   27724:	0004e220 	.word	0x0004e220
   27728:	00045674 	.word	0x00045674
   2772c:	000001c5 	.word	0x000001c5
   27730:	000001ce 	.word	0x000001ce

00027734 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   27734:	e59f3074 	ldr	r3, [pc, #116]	; 277b0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
   27738:	e92d4010 	push	{r4, lr}
   2773c:	e5933000 	ldr	r3, [r3]
   27740:	ea000002 	b	27750 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
   27744:	e1530000 	cmp	r3, r0
   27748:	0a000006 	beq	27768 <CMachineInfo::FreeDMAChannel(unsigned int)+0x34>
   2774c:	e1a00003 	mov	r0, r3
   27750:	e3530000 	cmp	r3, #0
   27754:	1afffffa 	bne	27744 <CMachineInfo::FreeDMAChannel(unsigned int)+0x10>
   27758:	e59f1054 	ldr	r1, [pc, #84]	; 277b4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   2775c:	e59f2054 	ldr	r2, [pc, #84]	; 277b8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x84>
   27760:	e2810014 	add	r0, r1, #20
   27764:	ebfff429 	bl	24810 <assertion_failed>
   27768:	e351000c 	cmp	r1, #12
   2776c:	8a000007 	bhi	27790 <CMachineInfo::FreeDMAChannel(unsigned int)+0x5c>
   27770:	e1d321b8 	ldrh	r2, [r3, #24]
   27774:	e1a00152 	asr	r0, r2, r1
   27778:	e3100001 	tst	r0, #1
   2777c:	1a000007 	bne	277a0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>
   27780:	e3a00001 	mov	r0, #1
   27784:	e1821110 	orr	r1, r2, r0, lsl r1
   27788:	e1c311b8 	strh	r1, [r3, #24]
   2778c:	e8bd8010 	pop	{r4, pc}
   27790:	e59f101c 	ldr	r1, [pc, #28]	; 277b4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   27794:	e59f2020 	ldr	r2, [pc, #32]	; 277bc <CMachineInfo::FreeDMAChannel(unsigned int)+0x88>
   27798:	e2810024 	add	r0, r1, #36	; 0x24
   2779c:	ebfff41b 	bl	24810 <assertion_failed>
   277a0:	e59f100c 	ldr	r1, [pc, #12]	; 277b4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   277a4:	e59f2014 	ldr	r2, [pc, #20]	; 277c0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x8c>
   277a8:	e2810040 	add	r0, r1, #64	; 0x40
   277ac:	ebfff417 	bl	24810 <assertion_failed>
   277b0:	0004e220 	.word	0x0004e220
   277b4:	00045674 	.word	0x00045674
   277b8:	000001f2 	.word	0x000001f2
   277bc:	000001fa 	.word	0x000001fa
   277c0:	000001fb 	.word	0x000001fb

000277c4 <CMachineInfo::Get()>:
   277c4:	e59f3020 	ldr	r3, [pc, #32]	; 277ec <CMachineInfo::Get()+0x28>
   277c8:	e5930000 	ldr	r0, [r3]
   277cc:	e3500000 	cmp	r0, #0
   277d0:	0a000000 	beq	277d8 <CMachineInfo::Get()+0x14>
   277d4:	e12fff1e 	bx	lr
   277d8:	e59f1010 	ldr	r1, [pc, #16]	; 277f0 <CMachineInfo::Get()+0x2c>
   277dc:	e92d4010 	push	{r4, lr}
   277e0:	e59f200c 	ldr	r2, [pc, #12]	; 277f4 <CMachineInfo::Get()+0x30>
   277e4:	e2810014 	add	r0, r1, #20
   277e8:	ebfff408 	bl	24810 <assertion_failed>
   277ec:	0004e220 	.word	0x0004e220
   277f0:	00045674 	.word	0x00045674
   277f4:	00000201 	.word	0x00000201

000277f8 <CPtrArray::CPtrArray(unsigned int, unsigned int)>:
   277f8:	e3a03000 	mov	r3, #0
   277fc:	e1510003 	cmp	r1, r3
   27800:	e92d4010 	push	{r4, lr}
   27804:	e880000e 	stm	r0, {r1, r2, r3}
   27808:	e580300c 	str	r3, [r0, #12]
   2780c:	0a000009 	beq	27838 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x40>
   27810:	e3520000 	cmp	r2, #0
   27814:	0a00000b 	beq	27848 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x50>
   27818:	e371022e 	cmn	r1, #-536870910	; 0xe0000002
   2781c:	e1a04000 	mov	r4, r0
   27820:	91a00101 	lslls	r0, r1, #2
   27824:	83e00000 	mvnhi	r0, #0
   27828:	eb000e16 	bl	2b088 <operator new[](unsigned int)>
   2782c:	e584000c 	str	r0, [r4, #12]
   27830:	e1a00004 	mov	r0, r4
   27834:	e8bd8010 	pop	{r4, pc}
   27838:	e3a0201e 	mov	r2, #30
   2783c:	e59f1014 	ldr	r1, [pc, #20]	; 27858 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x60>
   27840:	e59f0014 	ldr	r0, [pc, #20]	; 2785c <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x64>
   27844:	ebfff3f1 	bl	24810 <assertion_failed>
   27848:	e3a0201f 	mov	r2, #31
   2784c:	e59f1004 	ldr	r1, [pc, #4]	; 27858 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x60>
   27850:	e59f0008 	ldr	r0, [pc, #8]	; 27860 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x68>
   27854:	ebfff3ed 	bl	24810 <assertion_failed>
   27858:	000456dc 	.word	0x000456dc
   2785c:	000456ec 	.word	0x000456ec
   27860:	00045700 	.word	0x00045700

00027864 <CPtrArray::~CPtrArray()>:
   27864:	e3a03000 	mov	r3, #0
   27868:	e92d4010 	push	{r4, lr}
   2786c:	e1a04000 	mov	r4, r0
   27870:	e590000c 	ldr	r0, [r0, #12]
   27874:	e5843000 	str	r3, [r4]
   27878:	e1500003 	cmp	r0, r3
   2787c:	e5843004 	str	r3, [r4, #4]
   27880:	0a000000 	beq	27888 <CPtrArray::~CPtrArray()+0x24>
   27884:	eb000e06 	bl	2b0a4 <operator delete[](void*)>
   27888:	e1a00004 	mov	r0, r4
   2788c:	e8bd8010 	pop	{r4, pc}

00027890 <CPtrArray::GetCount() const>:
   27890:	e5900008 	ldr	r0, [r0, #8]
   27894:	e12fff1e 	bx	lr

00027898 <CPtrArray::operator[](unsigned int)>:
   27898:	e5903008 	ldr	r3, [r0, #8]
   2789c:	e92d4010 	push	{r4, lr}
   278a0:	e1530001 	cmp	r3, r1
   278a4:	9a000007 	bls	278c8 <CPtrArray::operator[](unsigned int)+0x30>
   278a8:	e5902000 	ldr	r2, [r0]
   278ac:	e1530002 	cmp	r3, r2
   278b0:	8a000008 	bhi	278d8 <CPtrArray::operator[](unsigned int)+0x40>
   278b4:	e590000c 	ldr	r0, [r0, #12]
   278b8:	e3500000 	cmp	r0, #0
   278bc:	0a000009 	beq	278e8 <CPtrArray::operator[](unsigned int)+0x50>
   278c0:	e0800101 	add	r0, r0, r1, lsl #2
   278c4:	e8bd8010 	pop	{r4, pc}
   278c8:	e3a02035 	mov	r2, #53	; 0x35
   278cc:	e59f1024 	ldr	r1, [pc, #36]	; 278f8 <CPtrArray::operator[](unsigned int)+0x60>
   278d0:	e59f0024 	ldr	r0, [pc, #36]	; 278fc <CPtrArray::operator[](unsigned int)+0x64>
   278d4:	ebfff3cd 	bl	24810 <assertion_failed>
   278d8:	e3a02036 	mov	r2, #54	; 0x36
   278dc:	e59f1014 	ldr	r1, [pc, #20]	; 278f8 <CPtrArray::operator[](unsigned int)+0x60>
   278e0:	e59f0018 	ldr	r0, [pc, #24]	; 27900 <CPtrArray::operator[](unsigned int)+0x68>
   278e4:	ebfff3c9 	bl	24810 <assertion_failed>
   278e8:	e3a02037 	mov	r2, #55	; 0x37
   278ec:	e59f1004 	ldr	r1, [pc, #4]	; 278f8 <CPtrArray::operator[](unsigned int)+0x60>
   278f0:	e59f000c 	ldr	r0, [pc, #12]	; 27904 <CPtrArray::operator[](unsigned int)+0x6c>
   278f4:	ebfff3c5 	bl	24810 <assertion_failed>
   278f8:	000456dc 	.word	0x000456dc
   278fc:	00045718 	.word	0x00045718
   27900:	00045730 	.word	0x00045730
   27904:	00045750 	.word	0x00045750

00027908 <CPtrArray::operator[](unsigned int) const>:
   27908:	e5903008 	ldr	r3, [r0, #8]
   2790c:	e92d4010 	push	{r4, lr}
   27910:	e1530001 	cmp	r3, r1
   27914:	9a000007 	bls	27938 <CPtrArray::operator[](unsigned int) const+0x30>
   27918:	e5902000 	ldr	r2, [r0]
   2791c:	e1530002 	cmp	r3, r2
   27920:	8a000008 	bhi	27948 <CPtrArray::operator[](unsigned int) const+0x40>
   27924:	e590300c 	ldr	r3, [r0, #12]
   27928:	e3530000 	cmp	r3, #0
   2792c:	0a000009 	beq	27958 <CPtrArray::operator[](unsigned int) const+0x50>
   27930:	e7930101 	ldr	r0, [r3, r1, lsl #2]
   27934:	e8bd8010 	pop	{r4, pc}
   27938:	e3a0203e 	mov	r2, #62	; 0x3e
   2793c:	e59f1024 	ldr	r1, [pc, #36]	; 27968 <CPtrArray::operator[](unsigned int) const+0x60>
   27940:	e59f0024 	ldr	r0, [pc, #36]	; 2796c <CPtrArray::operator[](unsigned int) const+0x64>
   27944:	ebfff3b1 	bl	24810 <assertion_failed>
   27948:	e3a0203f 	mov	r2, #63	; 0x3f
   2794c:	e59f1014 	ldr	r1, [pc, #20]	; 27968 <CPtrArray::operator[](unsigned int) const+0x60>
   27950:	e59f0018 	ldr	r0, [pc, #24]	; 27970 <CPtrArray::operator[](unsigned int) const+0x68>
   27954:	ebfff3ad 	bl	24810 <assertion_failed>
   27958:	e3a02040 	mov	r2, #64	; 0x40
   2795c:	e59f1004 	ldr	r1, [pc, #4]	; 27968 <CPtrArray::operator[](unsigned int) const+0x60>
   27960:	e59f000c 	ldr	r0, [pc, #12]	; 27974 <CPtrArray::operator[](unsigned int) const+0x6c>
   27964:	ebfff3a9 	bl	24810 <assertion_failed>
   27968:	000456dc 	.word	0x000456dc
   2796c:	00045718 	.word	0x00045718
   27970:	00045730 	.word	0x00045730
   27974:	00045750 	.word	0x00045750

00027978 <CPtrArray::Append(void*)>:
   27978:	e5903000 	ldr	r3, [r0]
   2797c:	e92d4070 	push	{r4, r5, r6, lr}
   27980:	e3530000 	cmp	r3, #0
   27984:	0a000024 	beq	27a1c <CPtrArray::Append(void*)+0xa4>
   27988:	e590500c 	ldr	r5, [r0, #12]
   2798c:	e1a04000 	mov	r4, r0
   27990:	e3550000 	cmp	r5, #0
   27994:	0a000024 	beq	27a2c <CPtrArray::Append(void*)+0xb4>
   27998:	e5900008 	ldr	r0, [r0, #8]
   2799c:	e1530000 	cmp	r3, r0
   279a0:	3a000025 	bcc	27a3c <CPtrArray::Append(void*)+0xc4>
   279a4:	e1a06001 	mov	r6, r1
   279a8:	0a000003 	beq	279bc <CPtrArray::Append(void*)+0x44>
   279ac:	e2803001 	add	r3, r0, #1
   279b0:	e7856100 	str	r6, [r5, r0, lsl #2]
   279b4:	e5843008 	str	r3, [r4, #8]
   279b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   279bc:	e5940004 	ldr	r0, [r4, #4]
   279c0:	e3500000 	cmp	r0, #0
   279c4:	0a000020 	beq	27a4c <CPtrArray::Append(void*)+0xd4>
   279c8:	e0833000 	add	r3, r3, r0
   279cc:	e373022e 	cmn	r3, #-536870910	; 0xe0000002
   279d0:	91a00103 	lslls	r0, r3, #2
   279d4:	83e00000 	mvnhi	r0, #0
   279d8:	eb000daa 	bl	2b088 <operator new[](unsigned int)>
   279dc:	e5942000 	ldr	r2, [r4]
   279e0:	e594100c 	ldr	r1, [r4, #12]
   279e4:	e1a02102 	lsl	r2, r2, #2
   279e8:	e1a05000 	mov	r5, r0
   279ec:	eb000bcb 	bl	2a920 <memcpy>
   279f0:	e594000c 	ldr	r0, [r4, #12]
   279f4:	e3500000 	cmp	r0, #0
   279f8:	0a000000 	beq	27a00 <CPtrArray::Append(void*)+0x88>
   279fc:	eb000da8 	bl	2b0a4 <operator delete[](void*)>
   27a00:	e5943000 	ldr	r3, [r4]
   27a04:	e5942004 	ldr	r2, [r4, #4]
   27a08:	e5940008 	ldr	r0, [r4, #8]
   27a0c:	e0833002 	add	r3, r3, r2
   27a10:	e584500c 	str	r5, [r4, #12]
   27a14:	e5843000 	str	r3, [r4]
   27a18:	eaffffe3 	b	279ac <CPtrArray::Append(void*)+0x34>
   27a1c:	e3a02047 	mov	r2, #71	; 0x47
   27a20:	e59f1034 	ldr	r1, [pc, #52]	; 27a5c <CPtrArray::Append(void*)+0xe4>
   27a24:	e59f0034 	ldr	r0, [pc, #52]	; 27a60 <CPtrArray::Append(void*)+0xe8>
   27a28:	ebfff378 	bl	24810 <assertion_failed>
   27a2c:	e3a02048 	mov	r2, #72	; 0x48
   27a30:	e59f1024 	ldr	r1, [pc, #36]	; 27a5c <CPtrArray::Append(void*)+0xe4>
   27a34:	e59f0028 	ldr	r0, [pc, #40]	; 27a64 <CPtrArray::Append(void*)+0xec>
   27a38:	ebfff374 	bl	24810 <assertion_failed>
   27a3c:	e3a0204a 	mov	r2, #74	; 0x4a
   27a40:	e59f1014 	ldr	r1, [pc, #20]	; 27a5c <CPtrArray::Append(void*)+0xe4>
   27a44:	e59f001c 	ldr	r0, [pc, #28]	; 27a68 <CPtrArray::Append(void*)+0xf0>
   27a48:	ebfff370 	bl	24810 <assertion_failed>
   27a4c:	e3a0204d 	mov	r2, #77	; 0x4d
   27a50:	e59f1004 	ldr	r1, [pc, #4]	; 27a5c <CPtrArray::Append(void*)+0xe4>
   27a54:	e59f0010 	ldr	r0, [pc, #16]	; 27a6c <CPtrArray::Append(void*)+0xf4>
   27a58:	ebfff36c 	bl	24810 <assertion_failed>
   27a5c:	000456dc 	.word	0x000456dc
   27a60:	000456ec 	.word	0x000456ec
   27a64:	00045750 	.word	0x00045750
   27a68:	00045730 	.word	0x00045730
   27a6c:	00045700 	.word	0x00045700

00027a70 <CPtrArray::RemoveLast()>:
   27a70:	e5903008 	ldr	r3, [r0, #8]
   27a74:	e3530000 	cmp	r3, #0
   27a78:	0a000002 	beq	27a88 <CPtrArray::RemoveLast()+0x18>
   27a7c:	e2433001 	sub	r3, r3, #1
   27a80:	e5803008 	str	r3, [r0, #8]
   27a84:	e12fff1e 	bx	lr
   27a88:	e92d4010 	push	{r4, lr}
   27a8c:	e3a02060 	mov	r2, #96	; 0x60
   27a90:	e59f1004 	ldr	r1, [pc, #4]	; 27a9c <CPtrArray::RemoveLast()+0x2c>
   27a94:	e59f0004 	ldr	r0, [pc, #4]	; 27aa0 <CPtrArray::RemoveLast()+0x30>
   27a98:	ebfff35c 	bl	24810 <assertion_failed>
   27a9c:	000456dc 	.word	0x000456dc
   27aa0:	00045760 	.word	0x00045760
   27aa4:	00000000 	.word	0x00000000

00027aa8 <CString::~CString()>:
   27aa8:	e92d4010 	push	{r4, lr}
   27aac:	e1a04000 	mov	r4, r0
   27ab0:	e5900004 	ldr	r0, [r0, #4]
   27ab4:	e59f3014 	ldr	r3, [pc, #20]	; 27ad0 <CString::~CString()+0x28>
   27ab8:	e3500000 	cmp	r0, #0
   27abc:	e5843000 	str	r3, [r4]
   27ac0:	0a000000 	beq	27ac8 <CString::~CString()+0x20>
   27ac4:	eb000d76 	bl	2b0a4 <operator delete[](void*)>
   27ac8:	e1a00004 	mov	r0, r4
   27acc:	e8bd8010 	pop	{r4, pc}
   27ad0:	0004577c 	.word	0x0004577c

00027ad4 <CString::~CString()>:
   27ad4:	e92d4010 	push	{r4, lr}
   27ad8:	e1a04000 	mov	r4, r0
   27adc:	e5900004 	ldr	r0, [r0, #4]
   27ae0:	e59f3020 	ldr	r3, [pc, #32]	; 27b08 <CString::~CString()+0x34>
   27ae4:	e3500000 	cmp	r0, #0
   27ae8:	e5843000 	str	r3, [r4]
   27aec:	0a000000 	beq	27af4 <CString::~CString()+0x20>
   27af0:	eb000d6b 	bl	2b0a4 <operator delete[](void*)>
   27af4:	e1a00004 	mov	r0, r4
   27af8:	e3a01010 	mov	r1, #16
   27afc:	eb000d6e 	bl	2b0bc <operator delete(void*, unsigned int)>
   27b00:	e1a00004 	mov	r0, r4
   27b04:	e8bd8010 	pop	{r4, pc}
   27b08:	0004577c 	.word	0x0004577c

00027b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   27b0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   27b10:	e990002c 	ldmib	r0, {r2, r3, r5}
   27b14:	e0455002 	sub	r5, r5, r2
   27b18:	e0851001 	add	r1, r5, r1
   27b1c:	e2812001 	add	r2, r1, #1
   27b20:	e1520003 	cmp	r2, r3
   27b24:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   27b28:	e1a04000 	mov	r4, r0
   27b2c:	e2816041 	add	r6, r1, #65	; 0x41
   27b30:	e1a00006 	mov	r0, r6
   27b34:	eb000d53 	bl	2b088 <operator new[](unsigned int)>
   27b38:	e3a02000 	mov	r2, #0
   27b3c:	e594300c 	ldr	r3, [r4, #12]
   27b40:	e1a07000 	mov	r7, r0
   27b44:	e5c32000 	strb	r2, [r3]
   27b48:	e5941004 	ldr	r1, [r4, #4]
   27b4c:	eb000a0c 	bl	2a384 <strcpy>
   27b50:	e5940004 	ldr	r0, [r4, #4]
   27b54:	e3500000 	cmp	r0, #0
   27b58:	0a000000 	beq	27b60 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   27b5c:	eb000d50 	bl	2b0a4 <operator delete[](void*)>
   27b60:	e0875005 	add	r5, r7, r5
   27b64:	e584500c 	str	r5, [r4, #12]
   27b68:	e5847004 	str	r7, [r4, #4]
   27b6c:	e5846008 	str	r6, [r4, #8]
   27b70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00027b74 <CString::CString()>:
   27b74:	e3a02000 	mov	r2, #0
   27b78:	e59f1008 	ldr	r1, [pc, #8]	; 27b88 <CString::CString()+0x14>
   27b7c:	e5802008 	str	r2, [r0, #8]
   27b80:	e8800006 	stm	r0, {r1, r2}
   27b84:	e12fff1e 	bx	lr
   27b88:	0004577c 	.word	0x0004577c

00027b8c <CString::CString(char const*)>:
   27b8c:	e92d4070 	push	{r4, r5, r6, lr}
   27b90:	e1a04000 	mov	r4, r0
   27b94:	e59f302c 	ldr	r3, [pc, #44]	; 27bc8 <CString::CString(char const*)+0x3c>
   27b98:	e1a00001 	mov	r0, r1
   27b9c:	e5843000 	str	r3, [r4]
   27ba0:	e1a05001 	mov	r5, r1
   27ba4:	eb000938 	bl	2a08c <strlen>
   27ba8:	e2800001 	add	r0, r0, #1
   27bac:	e5840008 	str	r0, [r4, #8]
   27bb0:	eb000d34 	bl	2b088 <operator new[](unsigned int)>
   27bb4:	e1a01005 	mov	r1, r5
   27bb8:	e5840004 	str	r0, [r4, #4]
   27bbc:	eb0009f0 	bl	2a384 <strcpy>
   27bc0:	e1a00004 	mov	r0, r4
   27bc4:	e8bd8070 	pop	{r4, r5, r6, pc}
   27bc8:	0004577c 	.word	0x0004577c

00027bcc <CString::operator char const*() const>:
   27bcc:	e5900004 	ldr	r0, [r0, #4]
   27bd0:	e59f3008 	ldr	r3, [pc, #8]	; 27be0 <CString::operator char const*() const+0x14>
   27bd4:	e3500000 	cmp	r0, #0
   27bd8:	01a00003 	moveq	r0, r3
   27bdc:	e12fff1e 	bx	lr
   27be0:	00047884 	.word	0x00047884

00027be4 <CString::operator=(char const*)>:
   27be4:	e92d4070 	push	{r4, r5, r6, lr}
   27be8:	e1a04000 	mov	r4, r0
   27bec:	e5900004 	ldr	r0, [r0, #4]
   27bf0:	e1a05001 	mov	r5, r1
   27bf4:	e3500000 	cmp	r0, #0
   27bf8:	0a000000 	beq	27c00 <CString::operator=(char const*)+0x1c>
   27bfc:	eb000d28 	bl	2b0a4 <operator delete[](void*)>
   27c00:	e1a00005 	mov	r0, r5
   27c04:	eb000920 	bl	2a08c <strlen>
   27c08:	e2800001 	add	r0, r0, #1
   27c0c:	e5840008 	str	r0, [r4, #8]
   27c10:	eb000d1c 	bl	2b088 <operator new[](unsigned int)>
   27c14:	e1a01005 	mov	r1, r5
   27c18:	e5840004 	str	r0, [r4, #4]
   27c1c:	eb0009d8 	bl	2a384 <strcpy>
   27c20:	e5940004 	ldr	r0, [r4, #4]
   27c24:	e8bd8070 	pop	{r4, r5, r6, pc}

00027c28 <CString::operator=(CString const&)>:
   27c28:	e92d4070 	push	{r4, r5, r6, lr}
   27c2c:	e1a04000 	mov	r4, r0
   27c30:	e5900004 	ldr	r0, [r0, #4]
   27c34:	e1a06001 	mov	r6, r1
   27c38:	e3500000 	cmp	r0, #0
   27c3c:	0a000000 	beq	27c44 <CString::operator=(CString const&)+0x1c>
   27c40:	eb000d17 	bl	2b0a4 <operator delete[](void*)>
   27c44:	e5960004 	ldr	r0, [r6, #4]
   27c48:	e59f5030 	ldr	r5, [pc, #48]	; 27c80 <CString::operator=(CString const&)+0x58>
   27c4c:	e3500000 	cmp	r0, #0
   27c50:	01a00005 	moveq	r0, r5
   27c54:	eb00090c 	bl	2a08c <strlen>
   27c58:	e2800001 	add	r0, r0, #1
   27c5c:	e5840008 	str	r0, [r4, #8]
   27c60:	eb000d08 	bl	2b088 <operator new[](unsigned int)>
   27c64:	e5840004 	str	r0, [r4, #4]
   27c68:	e5961004 	ldr	r1, [r6, #4]
   27c6c:	e3510000 	cmp	r1, #0
   27c70:	01a01005 	moveq	r1, r5
   27c74:	eb0009c2 	bl	2a384 <strcpy>
   27c78:	e1a00004 	mov	r0, r4
   27c7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   27c80:	00047884 	.word	0x00047884

00027c84 <CString::GetLength() const>:
   27c84:	e5900004 	ldr	r0, [r0, #4]
   27c88:	e3500000 	cmp	r0, #0
   27c8c:	012fff1e 	bxeq	lr
   27c90:	ea0008fd 	b	2a08c <strlen>

00027c94 <CString::Append(char const*)>:
   27c94:	e92d4070 	push	{r4, r5, r6, lr}
   27c98:	e3a03001 	mov	r3, #1
   27c9c:	e1a04000 	mov	r4, r0
   27ca0:	e5900004 	ldr	r0, [r0, #4]
   27ca4:	e1a06001 	mov	r6, r1
   27ca8:	e3500000 	cmp	r0, #0
   27cac:	e5843008 	str	r3, [r4, #8]
   27cb0:	0a000003 	beq	27cc4 <CString::Append(char const*)+0x30>
   27cb4:	eb0008f4 	bl	2a08c <strlen>
   27cb8:	e5943008 	ldr	r3, [r4, #8]
   27cbc:	e0830000 	add	r0, r3, r0
   27cc0:	e5840008 	str	r0, [r4, #8]
   27cc4:	e1a00006 	mov	r0, r6
   27cc8:	eb0008ef 	bl	2a08c <strlen>
   27ccc:	e5943008 	ldr	r3, [r4, #8]
   27cd0:	e0800003 	add	r0, r0, r3
   27cd4:	e5840008 	str	r0, [r4, #8]
   27cd8:	eb000cea 	bl	2b088 <operator new[](unsigned int)>
   27cdc:	e5941004 	ldr	r1, [r4, #4]
   27ce0:	e1a05000 	mov	r5, r0
   27ce4:	e3510000 	cmp	r1, #0
   27ce8:	05c01000 	strbeq	r1, [r0]
   27cec:	0a000004 	beq	27d04 <CString::Append(char const*)+0x70>
   27cf0:	eb0009a3 	bl	2a384 <strcpy>
   27cf4:	e5940004 	ldr	r0, [r4, #4]
   27cf8:	e3500000 	cmp	r0, #0
   27cfc:	0a000000 	beq	27d04 <CString::Append(char const*)+0x70>
   27d00:	eb000ce7 	bl	2b0a4 <operator delete[](void*)>
   27d04:	e1a01006 	mov	r1, r6
   27d08:	e1a00005 	mov	r0, r5
   27d0c:	eb0009ba 	bl	2a3fc <strcat>
   27d10:	e5845004 	str	r5, [r4, #4]
   27d14:	e8bd8070 	pop	{r4, r5, r6, pc}

00027d18 <CString::Compare(char const*) const>:
   27d18:	e5900004 	ldr	r0, [r0, #4]
   27d1c:	ea0008e4 	b	2a0b4 <strcmp>

00027d20 <CString::Find(char) const>:
   27d20:	e5902004 	ldr	r2, [r0, #4]
   27d24:	e1d230d0 	ldrsb	r3, [r2]
   27d28:	e3530000 	cmp	r3, #0
   27d2c:	0a000009 	beq	27d58 <CString::Find(char) const+0x38>
   27d30:	e1510003 	cmp	r1, r3
   27d34:	e3a00000 	mov	r0, #0
   27d38:	1a000002 	bne	27d48 <CString::Find(char) const+0x28>
   27d3c:	ea000007 	b	27d60 <CString::Find(char) const+0x40>
   27d40:	e1530001 	cmp	r3, r1
   27d44:	012fff1e 	bxeq	lr
   27d48:	e1f230d1 	ldrsb	r3, [r2, #1]!
   27d4c:	e2800001 	add	r0, r0, #1
   27d50:	e3530000 	cmp	r3, #0
   27d54:	1afffff9 	bne	27d40 <CString::Find(char) const+0x20>
   27d58:	e3e00000 	mvn	r0, #0
   27d5c:	e12fff1e 	bx	lr
   27d60:	e12fff1e 	bx	lr

00027d64 <CString::PutChar(char, unsigned int)>:
   27d64:	e92d4070 	push	{r4, r5, r6, lr}
   27d68:	e2524000 	subs	r4, r2, #0
   27d6c:	08bd8070 	popeq	{r4, r5, r6, pc}
   27d70:	e1a06001 	mov	r6, r1
   27d74:	e1a01004 	mov	r1, r4
   27d78:	e1a05000 	mov	r5, r0
   27d7c:	ebffff62 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27d80:	e2443001 	sub	r3, r4, #1
   27d84:	e595200c 	ldr	r2, [r5, #12]
   27d88:	e2433001 	sub	r3, r3, #1
   27d8c:	e2820001 	add	r0, r2, #1
   27d90:	e3730001 	cmn	r3, #1
   27d94:	e585000c 	str	r0, [r5, #12]
   27d98:	e5c26000 	strb	r6, [r2]
   27d9c:	1afffff8 	bne	27d84 <CString::PutChar(char, unsigned int)+0x20>
   27da0:	e8bd8070 	pop	{r4, r5, r6, pc}

00027da4 <CString::PutString(char const*)>:
   27da4:	e92d4070 	push	{r4, r5, r6, lr}
   27da8:	e1a04000 	mov	r4, r0
   27dac:	e1a00001 	mov	r0, r1
   27db0:	e1a05001 	mov	r5, r1
   27db4:	eb0008b4 	bl	2a08c <strlen>
   27db8:	e2506000 	subs	r6, r0, #0
   27dbc:	0a000002 	beq	27dcc <CString::PutString(char const*)+0x28>
   27dc0:	e1a01006 	mov	r1, r6
   27dc4:	e1a00004 	mov	r0, r4
   27dc8:	ebffff4f 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27dcc:	e1a01005 	mov	r1, r5
   27dd0:	e594000c 	ldr	r0, [r4, #12]
   27dd4:	eb00096a 	bl	2a384 <strcpy>
   27dd8:	e594100c 	ldr	r1, [r4, #12]
   27ddc:	e0811006 	add	r1, r1, r6
   27de0:	e584100c 	str	r1, [r4, #12]
   27de4:	e8bd8070 	pop	{r4, r5, r6, pc}

00027de8 <CString::Replace(char const*, char const*)>:
   27de8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27dec:	e1d180d0 	ldrsb	r8, [r1]
   27df0:	e24dd014 	sub	sp, sp, #20
   27df4:	e3580000 	cmp	r8, #0
   27df8:	1a000002 	bne	27e08 <CString::Replace(char const*, char const*)+0x20>
   27dfc:	e1a00008 	mov	r0, r8
   27e00:	e28dd014 	add	sp, sp, #20
   27e04:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e08:	e1a0a000 	mov	sl, r0
   27e0c:	e1a07001 	mov	r7, r1
   27e10:	e5901004 	ldr	r1, [r0, #4]
   27e14:	e1a0000d 	mov	r0, sp
   27e18:	e1a09002 	mov	r9, r2
   27e1c:	ebffff5a 	bl	27b8c <CString::CString(char const*)>
   27e20:	e59a0004 	ldr	r0, [sl, #4]
   27e24:	e3500000 	cmp	r0, #0
   27e28:	0a000000 	beq	27e30 <CString::Replace(char const*, char const*)+0x48>
   27e2c:	eb000c9c 	bl	2b0a4 <operator delete[](void*)>
   27e30:	e3a00040 	mov	r0, #64	; 0x40
   27e34:	e58a0008 	str	r0, [sl, #8]
   27e38:	eb000c92 	bl	2b088 <operator new[](unsigned int)>
   27e3c:	e3a08000 	mov	r8, #0
   27e40:	e3a06001 	mov	r6, #1
   27e44:	e59d4004 	ldr	r4, [sp, #4]
   27e48:	e58a0004 	str	r0, [sl, #4]
   27e4c:	e58a000c 	str	r0, [sl, #12]
   27e50:	e1d710d0 	ldrsb	r1, [r7]
   27e54:	e1a00004 	mov	r0, r4
   27e58:	eb000978 	bl	2a440 <strchr>
   27e5c:	e2505000 	subs	r5, r0, #0
   27e60:	0a00002d 	beq	27f1c <CString::Replace(char const*, char const*)+0x134>
   27e64:	e1540005 	cmp	r4, r5
   27e68:	2a000039 	bcs	27f54 <CString::Replace(char const*, char const*)+0x16c>
   27e6c:	e1a01006 	mov	r1, r6
   27e70:	e1a0000a 	mov	r0, sl
   27e74:	e0d4b0d1 	ldrsb	fp, [r4], #1
   27e78:	ebffff23 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27e7c:	e59a300c 	ldr	r3, [sl, #12]
   27e80:	e1550004 	cmp	r5, r4
   27e84:	e2832001 	add	r2, r3, #1
   27e88:	e58a200c 	str	r2, [sl, #12]
   27e8c:	e5c3b000 	strb	fp, [r3]
   27e90:	1afffff5 	bne	27e6c <CString::Replace(char const*, char const*)+0x84>
   27e94:	e1a0c005 	mov	ip, r5
   27e98:	e2854001 	add	r4, r5, #1
   27e9c:	e1d730d1 	ldrsb	r3, [r7, #1]
   27ea0:	e2871001 	add	r1, r7, #1
   27ea4:	e3530000 	cmp	r3, #0
   27ea8:	0a00000c 	beq	27ee0 <CString::Replace(char const*, char const*)+0xf8>
   27eac:	e1d520d1 	ldrsb	r2, [r5, #1]
   27eb0:	e1520003 	cmp	r2, r3
   27eb4:	1a00000e 	bne	27ef4 <CString::Replace(char const*, char const*)+0x10c>
   27eb8:	e2853002 	add	r3, r5, #2
   27ebc:	ea000003 	b	27ed0 <CString::Replace(char const*, char const*)+0xe8>
   27ec0:	e1d400d0 	ldrsb	r0, [r4]
   27ec4:	e2833001 	add	r3, r3, #1
   27ec8:	e1500002 	cmp	r0, r2
   27ecc:	1a000008 	bne	27ef4 <CString::Replace(char const*, char const*)+0x10c>
   27ed0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   27ed4:	e1a04003 	mov	r4, r3
   27ed8:	e3520000 	cmp	r2, #0
   27edc:	1afffff7 	bne	27ec0 <CString::Replace(char const*, char const*)+0xd8>
   27ee0:	e1a01009 	mov	r1, r9
   27ee4:	e1a0000a 	mov	r0, sl
   27ee8:	e2888001 	add	r8, r8, #1
   27eec:	ebffffac 	bl	27da4 <CString::PutString(char const*)>
   27ef0:	eaffffd6 	b	27e50 <CString::Replace(char const*, char const*)+0x68>
   27ef4:	e1a01006 	mov	r1, r6
   27ef8:	e1a0000a 	mov	r0, sl
   27efc:	e1dc50d0 	ldrsb	r5, [ip]
   27f00:	e28c4001 	add	r4, ip, #1
   27f04:	ebffff00 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27f08:	e59a300c 	ldr	r3, [sl, #12]
   27f0c:	e2832001 	add	r2, r3, #1
   27f10:	e58a200c 	str	r2, [sl, #12]
   27f14:	e5c35000 	strb	r5, [r3]
   27f18:	eaffffcc 	b	27e50 <CString::Replace(char const*, char const*)+0x68>
   27f1c:	e1a0000a 	mov	r0, sl
   27f20:	e1a01004 	mov	r1, r4
   27f24:	ebffff9e 	bl	27da4 <CString::PutString(char const*)>
   27f28:	e59a200c 	ldr	r2, [sl, #12]
   27f2c:	e59f302c 	ldr	r3, [pc, #44]	; 27f60 <CString::Replace(char const*, char const*)+0x178>
   27f30:	e5c25000 	strb	r5, [r2]
   27f34:	e59d0004 	ldr	r0, [sp, #4]
   27f38:	e58d3000 	str	r3, [sp]
   27f3c:	e3500000 	cmp	r0, #0
   27f40:	0affffad 	beq	27dfc <CString::Replace(char const*, char const*)+0x14>
   27f44:	eb000c56 	bl	2b0a4 <operator delete[](void*)>
   27f48:	e1a00008 	mov	r0, r8
   27f4c:	e28dd014 	add	sp, sp, #20
   27f50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f54:	e1a0c004 	mov	ip, r4
   27f58:	e2854001 	add	r4, r5, #1
   27f5c:	eaffffce 	b	27e9c <CString::Replace(char const*, char const*)+0xb4>
   27f60:	0004577c 	.word	0x0004577c

00027f64 <CString::ReserveSpace(unsigned int)>:
   27f64:	e3510000 	cmp	r1, #0
   27f68:	012fff1e 	bxeq	lr
   27f6c:	eafffee6 	b	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>

00027f70 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   27f70:	e1510002 	cmp	r1, r2
   27f74:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27f78:	e1a05001 	mov	r5, r1
   27f7c:	e1a07002 	mov	r7, r2
   27f80:	e1a09000 	mov	r9, r0
   27f84:	e1a08003 	mov	r8, r3
   27f88:	23a0a001 	movcs	sl, #1
   27f8c:	3a000022 	bcc	2801c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xac>
   27f90:	e00a0a97 	mul	sl, r7, sl
   27f94:	e1a00005 	mov	r0, r5
   27f98:	e1a0100a 	mov	r1, sl
   27f9c:	eb00576c 	bl	3dd54 <__aeabi_uidiv>
   27fa0:	e1500007 	cmp	r0, r7
   27fa4:	e1a04000 	mov	r4, r0
   27fa8:	2afffff8 	bcs	27f90 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
   27fac:	e3580000 	cmp	r8, #0
   27fb0:	13a08037 	movne	r8, #55	; 0x37
   27fb4:	03a08057 	moveq	r8, #87	; 0x57
   27fb8:	e1a06009 	mov	r6, r9
   27fbc:	ea000003 	b	27fd0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
   27fc0:	e1a0100a 	mov	r1, sl
   27fc4:	e1a00005 	mov	r0, r5
   27fc8:	eb005761 	bl	3dd54 <__aeabi_uidiv>
   27fcc:	e1a04000 	mov	r4, r0
   27fd0:	e1a00005 	mov	r0, r5
   27fd4:	e1a0100a 	mov	r1, sl
   27fd8:	eb00579a 	bl	3de48 <__aeabi_uidivmod>
   27fdc:	e3540009 	cmp	r4, #9
   27fe0:	e2843030 	add	r3, r4, #48	; 0x30
   27fe4:	80884004 	addhi	r4, r8, r4
   27fe8:	96af4073 	sxtbls	r4, r3
   27fec:	86af4074 	sxtbhi	r4, r4
   27ff0:	e2866001 	add	r6, r6, #1
   27ff4:	e1a0000a 	mov	r0, sl
   27ff8:	e1a05001 	mov	r5, r1
   27ffc:	e5464001 	strb	r4, [r6, #-1]
   28000:	e1a01007 	mov	r1, r7
   28004:	eb005752 	bl	3dd54 <__aeabi_uidiv>
   28008:	e250a000 	subs	sl, r0, #0
   2800c:	1affffeb 	bne	27fc0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
   28010:	e5c6a000 	strb	sl, [r6]
   28014:	e1a00009 	mov	r0, r9
   28018:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2801c:	e1a04001 	mov	r4, r1
   28020:	e3a0a001 	mov	sl, #1
   28024:	eaffffe0 	b	27fac <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

00028028 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   28028:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2802c:	e3a0b000 	mov	fp, #0
   28030:	e24dd014 	sub	sp, sp, #20
   28034:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   28038:	e153000b 	cmp	r3, fp
   2803c:	e1a07003 	mov	r7, r3
   28040:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   28044:	01520001 	cmpeq	r2, r1
   28048:	e1a06002 	mov	r6, r2
   2804c:	e1a0a001 	mov	sl, r1
   28050:	e58d000c 	str	r0, [sp, #12]
   28054:	e58d3000 	str	r3, [sp]
   28058:	23a04001 	movcs	r4, #1
   2805c:	23a05000 	movcs	r5, #0
   28060:	3a00003a 	bcc	28150 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x128>
   28064:	e0030b94 	mul	r3, r4, fp
   28068:	e023359a 	mla	r3, sl, r5, r3
   2806c:	e0854a94 	umull	r4, r5, r4, sl
   28070:	e0835005 	add	r5, r3, r5
   28074:	e1a02004 	mov	r2, r4
   28078:	e1a03005 	mov	r3, r5
   2807c:	e1a00006 	mov	r0, r6
   28080:	e1a01007 	mov	r1, r7
   28084:	eb0057ca 	bl	3dfb4 <__aeabi_uldivmod>
   28088:	e151000b 	cmp	r1, fp
   2808c:	0150000a 	cmpeq	r0, sl
   28090:	e1a08000 	mov	r8, r0
   28094:	e1a09001 	mov	r9, r1
   28098:	2afffff1 	bcs	28064 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x3c>
   2809c:	e59d3000 	ldr	r3, [sp]
   280a0:	e1cda0f0 	strd	sl, [sp]
   280a4:	e3530000 	cmp	r3, #0
   280a8:	13a03037 	movne	r3, #55	; 0x37
   280ac:	03a03057 	moveq	r3, #87	; 0x57
   280b0:	e58d3008 	str	r3, [sp, #8]
   280b4:	e59d300c 	ldr	r3, [sp, #12]
   280b8:	e1a0b003 	mov	fp, r3
   280bc:	ea000006 	b	280dc <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0xb4>
   280c0:	e1a02000 	mov	r2, r0
   280c4:	e1a03001 	mov	r3, r1
   280c8:	e1a00006 	mov	r0, r6
   280cc:	e1a01007 	mov	r1, r7
   280d0:	eb0057b7 	bl	3dfb4 <__aeabi_uldivmod>
   280d4:	e1a08000 	mov	r8, r0
   280d8:	e1a09001 	mov	r9, r1
   280dc:	e1a00006 	mov	r0, r6
   280e0:	e1a01007 	mov	r1, r7
   280e4:	e1a02004 	mov	r2, r4
   280e8:	e1a03005 	mov	r3, r5
   280ec:	eb0057b0 	bl	3dfb4 <__aeabi_uldivmod>
   280f0:	e3590000 	cmp	r9, #0
   280f4:	03580009 	cmpeq	r8, #9
   280f8:	e1a07003 	mov	r7, r3
   280fc:	e2883030 	add	r3, r8, #48	; 0x30
   28100:	859d3008 	ldrhi	r3, [sp, #8]
   28104:	96af8073 	sxtbls	r8, r3
   28108:	80838008 	addhi	r8, r3, r8
   2810c:	86af8078 	sxtbhi	r8, r8
   28110:	e28bb001 	add	fp, fp, #1
   28114:	e1a00004 	mov	r0, r4
   28118:	e1a01005 	mov	r1, r5
   2811c:	e1a06002 	mov	r6, r2
   28120:	e1cd20d0 	ldrd	r2, [sp]
   28124:	e54b8001 	strb	r8, [fp, #-1]
   28128:	eb0057a1 	bl	3dfb4 <__aeabi_uldivmod>
   2812c:	e1a04000 	mov	r4, r0
   28130:	e1a05001 	mov	r5, r1
   28134:	e1943005 	orrs	r3, r4, r5
   28138:	1affffe0 	bne	280c0 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x98>
   2813c:	e3a03000 	mov	r3, #0
   28140:	e59d000c 	ldr	r0, [sp, #12]
   28144:	e5cb3000 	strb	r3, [fp]
   28148:	e28dd014 	add	sp, sp, #20
   2814c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28150:	e1a08002 	mov	r8, r2
   28154:	e1a09007 	mov	r9, r7
   28158:	e3a04001 	mov	r4, #1
   2815c:	e3a05000 	mov	r5, #0
   28160:	eaffffcd 	b	2809c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x74>

00028164 <CString::ftoa(char*, double, unsigned int)>:
   28164:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28168:	ed2d8b02 	vpush	{d8}
   2816c:	ec432b18 	vmov	d8, r2, r3
   28170:	eeb58bc0 	vcmpe.f64	d8, #0.0
   28174:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   28178:	ed9f7b92 	vldr	d7, [pc, #584]	; 283c8 <CString::ftoa(char*, double, unsigned int)+0x264>
   2817c:	4eb18b48 	vnegmi.f64	d8, d8
   28180:	43a0302d 	movmi	r3, #45	; 0x2d
   28184:	eeb48bc7 	vcmpe.f64	d8, d7
   28188:	45c03000 	strbmi	r3, [r0]
   2818c:	4280b001 	addmi	fp, r0, #1
   28190:	51a0b000 	movpl	fp, r0
   28194:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   28198:	e24dd01c 	sub	sp, sp, #28
   2819c:	e1a0a000 	mov	sl, r0
   281a0:	ca000079 	bgt	2838c <CString::ftoa(char*, double, unsigned int)+0x228>
   281a4:	eefc7bc8 	vcvt.u32.f64	s15, d8
   281a8:	ee177a90 	vmov	r7, s15
   281ac:	e3570009 	cmp	r7, #9
   281b0:	83a04001 	movhi	r4, #1
   281b4:	9a00007b 	bls	283a8 <CString::ftoa(char*, double, unsigned int)+0x244>
   281b8:	e0844104 	add	r4, r4, r4, lsl #2
   281bc:	e1a04084 	lsl	r4, r4, #1
   281c0:	e1a01004 	mov	r1, r4
   281c4:	e1a00007 	mov	r0, r7
   281c8:	eb0056e1 	bl	3dd54 <__aeabi_uidiv>
   281cc:	e3500009 	cmp	r0, #9
   281d0:	e1a05000 	mov	r5, r0
   281d4:	8afffff7 	bhi	281b8 <CString::ftoa(char*, double, unsigned int)+0x54>
   281d8:	e1a0600b 	mov	r6, fp
   281dc:	e1a09007 	mov	r9, r7
   281e0:	e59f81f0 	ldr	r8, [pc, #496]	; 283d8 <CString::ftoa(char*, double, unsigned int)+0x274>
   281e4:	ea000003 	b	281f8 <CString::ftoa(char*, double, unsigned int)+0x94>
   281e8:	e1a01004 	mov	r1, r4
   281ec:	e1a00009 	mov	r0, r9
   281f0:	eb0056d7 	bl	3dd54 <__aeabi_uidiv>
   281f4:	e1a05000 	mov	r5, r0
   281f8:	e1a00009 	mov	r0, r9
   281fc:	e1a01004 	mov	r1, r4
   28200:	eb005710 	bl	3de48 <__aeabi_uidivmod>
   28204:	e0843498 	umull	r3, r4, r8, r4
   28208:	e3550009 	cmp	r5, #9
   2820c:	e2852030 	add	r2, r5, #48	; 0x30
   28210:	82855057 	addhi	r5, r5, #87	; 0x57
   28214:	96af5072 	sxtbls	r5, r2
   28218:	86af5075 	sxtbhi	r5, r5
   2821c:	e2866001 	add	r6, r6, #1
   28220:	e1b041a4 	lsrs	r4, r4, #3
   28224:	e1a09001 	mov	r9, r1
   28228:	e5465001 	strb	r5, [r6, #-1]
   2822c:	1affffed 	bne	281e8 <CString::ftoa(char*, double, unsigned int)+0x84>
   28230:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
   28234:	e5c64000 	strb	r4, [r6]
   28238:	e3530000 	cmp	r3, #0
   2823c:	1a000003 	bne	28250 <CString::ftoa(char*, double, unsigned int)+0xec>
   28240:	e1a0000a 	mov	r0, sl
   28244:	e28dd01c 	add	sp, sp, #28
   28248:	ecbd8b02 	vpop	{d8}
   2824c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28250:	e1a0000b 	mov	r0, fp
   28254:	eb00078c 	bl	2a08c <strlen>
   28258:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
   2825c:	e08b2000 	add	r2, fp, r0
   28260:	e3530009 	cmp	r3, #9
   28264:	31a09003 	movcc	r9, r3
   28268:	23a09009 	movcs	r9, #9
   2826c:	e3a0302e 	mov	r3, #46	; 0x2e
   28270:	e3590001 	cmp	r9, #1
   28274:	e7cb3000 	strb	r3, [fp, r0]
   28278:	e58d2004 	str	r2, [sp, #4]
   2827c:	e282b001 	add	fp, r2, #1
   28280:	0a00004e 	beq	283c0 <CString::ftoa(char*, double, unsigned int)+0x25c>
   28284:	e3a02002 	mov	r2, #2
   28288:	e3a0300a 	mov	r3, #10
   2828c:	e2822001 	add	r2, r2, #1
   28290:	e0833103 	add	r3, r3, r3, lsl #2
   28294:	e1520009 	cmp	r2, r9
   28298:	e1a03083 	lsl	r3, r3, #1
   2829c:	9afffffa 	bls	2828c <CString::ftoa(char*, double, unsigned int)+0x128>
   282a0:	ee073a90 	vmov	s15, r3
   282a4:	eeb87b67 	vcvt.f64.u32	d7, s15
   282a8:	ee067a90 	vmov	s13, r7
   282ac:	eeb86b66 	vcvt.f64.u32	d6, s13
   282b0:	ee386b46 	vsub.f64	d6, d8, d6
   282b4:	ee267b07 	vmul.f64	d7, d6, d7
   282b8:	eefc7bc7 	vcvt.u32.f64	s15, d7
   282bc:	ee178a90 	vmov	r8, s15
   282c0:	e3580009 	cmp	r8, #9
   282c4:	83a04001 	movhi	r4, #1
   282c8:	9a000039 	bls	283b4 <CString::ftoa(char*, double, unsigned int)+0x250>
   282cc:	e0844104 	add	r4, r4, r4, lsl #2
   282d0:	e1a04084 	lsl	r4, r4, #1
   282d4:	e1a01004 	mov	r1, r4
   282d8:	e1a00008 	mov	r0, r8
   282dc:	eb00569c 	bl	3dd54 <__aeabi_uidiv>
   282e0:	e3500009 	cmp	r0, #9
   282e4:	e1a05000 	mov	r5, r0
   282e8:	8afffff7 	bhi	282cc <CString::ftoa(char*, double, unsigned int)+0x168>
   282ec:	e28d600c 	add	r6, sp, #12
   282f0:	e59f70e0 	ldr	r7, [pc, #224]	; 283d8 <CString::ftoa(char*, double, unsigned int)+0x274>
   282f4:	ea000003 	b	28308 <CString::ftoa(char*, double, unsigned int)+0x1a4>
   282f8:	e1a01004 	mov	r1, r4
   282fc:	e1a00008 	mov	r0, r8
   28300:	eb005693 	bl	3dd54 <__aeabi_uidiv>
   28304:	e1a05000 	mov	r5, r0
   28308:	e1a00008 	mov	r0, r8
   2830c:	e1a01004 	mov	r1, r4
   28310:	eb0056cc 	bl	3de48 <__aeabi_uidivmod>
   28314:	e0843497 	umull	r3, r4, r7, r4
   28318:	e3550009 	cmp	r5, #9
   2831c:	e2852030 	add	r2, r5, #48	; 0x30
   28320:	82855057 	addhi	r5, r5, #87	; 0x57
   28324:	96af5072 	sxtbls	r5, r2
   28328:	86af5075 	sxtbhi	r5, r5
   2832c:	e2866001 	add	r6, r6, #1
   28330:	e1b041a4 	lsrs	r4, r4, #3
   28334:	e1a08001 	mov	r8, r1
   28338:	e5465001 	strb	r5, [r6, #-1]
   2833c:	1affffed 	bne	282f8 <CString::ftoa(char*, double, unsigned int)+0x194>
   28340:	e28d000c 	add	r0, sp, #12
   28344:	e5c64000 	strb	r4, [r6]
   28348:	eb00074f 	bl	2a08c <strlen>
   2834c:	e0599000 	subs	r9, r9, r0
   28350:	0a000006 	beq	28370 <CString::ftoa(char*, double, unsigned int)+0x20c>
   28354:	e3a02030 	mov	r2, #48	; 0x30
   28358:	e59d8004 	ldr	r8, [sp, #4]
   2835c:	e0883009 	add	r3, r8, r9
   28360:	e5e82001 	strb	r2, [r8, #1]!
   28364:	e1580003 	cmp	r8, r3
   28368:	1afffffc 	bne	28360 <CString::ftoa(char*, double, unsigned int)+0x1fc>
   2836c:	e08bb009 	add	fp, fp, r9
   28370:	e28d100c 	add	r1, sp, #12
   28374:	e1a0000b 	mov	r0, fp
   28378:	eb000801 	bl	2a384 <strcpy>
   2837c:	e1a0000a 	mov	r0, sl
   28380:	e28dd01c 	add	sp, sp, #28
   28384:	ecbd8b02 	vpop	{d8}
   28388:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2838c:	e1a0000b 	mov	r0, fp
   28390:	e59f1044 	ldr	r1, [pc, #68]	; 283dc <CString::ftoa(char*, double, unsigned int)+0x278>
   28394:	eb0007fa 	bl	2a384 <strcpy>
   28398:	e1a0000a 	mov	r0, sl
   2839c:	e28dd01c 	add	sp, sp, #28
   283a0:	ecbd8b02 	vpop	{d8}
   283a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   283a8:	ee175a90 	vmov	r5, s15
   283ac:	e3a04001 	mov	r4, #1
   283b0:	eaffff88 	b	281d8 <CString::ftoa(char*, double, unsigned int)+0x74>
   283b4:	ee175a90 	vmov	r5, s15
   283b8:	e3a04001 	mov	r4, #1
   283bc:	eaffffca 	b	282ec <CString::ftoa(char*, double, unsigned int)+0x188>
   283c0:	ed9f7b02 	vldr	d7, [pc, #8]	; 283d0 <CString::ftoa(char*, double, unsigned int)+0x26c>
   283c4:	eaffffb7 	b	282a8 <CString::ftoa(char*, double, unsigned int)+0x144>
   283c8:	ffe00000 	.word	0xffe00000
   283cc:	41efffff 	.word	0x41efffff
   283d0:	00000000 	.word	0x00000000
   283d4:	40240000 	.word	0x40240000
   283d8:	cccccccd 	.word	0xcccccccd
   283dc:	00045784 	.word	0x00045784

000283e0 <CString::FormatV(char const*, std::__va_list)>:
   283e0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   283e4:	e24dd064 	sub	sp, sp, #100	; 0x64
   283e8:	e58d000c 	str	r0, [sp, #12]
   283ec:	e5900004 	ldr	r0, [r0, #4]
   283f0:	e1a09001 	mov	r9, r1
   283f4:	e3500000 	cmp	r0, #0
   283f8:	e58d2018 	str	r2, [sp, #24]
   283fc:	0a000000 	beq	28404 <CString::FormatV(char const*, std::__va_list)+0x24>
   28400:	eb000b27 	bl	2b0a4 <operator delete[](void*)>
   28404:	e3a00040 	mov	r0, #64	; 0x40
   28408:	e59d400c 	ldr	r4, [sp, #12]
   2840c:	e1a05009 	mov	r5, r9
   28410:	e5840008 	str	r0, [r4, #8]
   28414:	eb000b1b 	bl	2b088 <operator new[](unsigned int)>
   28418:	e1a03004 	mov	r3, r4
   2841c:	e5840004 	str	r0, [r4, #4]
   28420:	e584000c 	str	r0, [r4, #12]
   28424:	e1d540d0 	ldrsb	r4, [r5]
   28428:	e3540000 	cmp	r4, #0
   2842c:	0a00009f 	beq	286b0 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   28430:	e3540025 	cmp	r4, #37	; 0x25
   28434:	1a0001d7 	bne	28b98 <CString::FormatV(char const*, std::__va_list)+0x7b8>
   28438:	e1d560d1 	ldrsb	r6, [r5, #1]
   2843c:	e3560025 	cmp	r6, #37	; 0x25
   28440:	0a0001f5 	beq	28c1c <CString::FormatV(char const*, std::__va_list)+0x83c>
   28444:	e3560023 	cmp	r6, #35	; 0x23
   28448:	01d560d2 	ldrsbeq	r6, [r5, #2]
   2844c:	12855001 	addne	r5, r5, #1
   28450:	02855002 	addeq	r5, r5, #2
   28454:	13a02000 	movne	r2, #0
   28458:	03a02001 	moveq	r2, #1
   2845c:	e356002d 	cmp	r6, #45	; 0x2d
   28460:	03a03001 	moveq	r3, #1
   28464:	13a03000 	movne	r3, #0
   28468:	01d560d1 	ldrsbeq	r6, [r5, #1]
   2846c:	058d301c 	streq	r3, [sp, #28]
   28470:	00855003 	addeq	r5, r5, r3
   28474:	158d301c 	strne	r3, [sp, #28]
   28478:	e3560030 	cmp	r6, #48	; 0x30
   2847c:	03a03001 	moveq	r3, #1
   28480:	13a03000 	movne	r3, #0
   28484:	01d560d1 	ldrsbeq	r6, [r5, #1]
   28488:	058d3024 	streq	r3, [sp, #36]	; 0x24
   2848c:	00855003 	addeq	r5, r5, r3
   28490:	158d3024 	strne	r3, [sp, #36]	; 0x24
   28494:	e2463030 	sub	r3, r6, #48	; 0x30
   28498:	e6ef3073 	uxtb	r3, r3
   2849c:	e3530009 	cmp	r3, #9
   284a0:	e3a04000 	mov	r4, #0
   284a4:	8a000007 	bhi	284c8 <CString::FormatV(char const*, std::__va_list)+0xe8>
   284a8:	e0844104 	add	r4, r4, r4, lsl #2
   284ac:	e0864084 	add	r4, r6, r4, lsl #1
   284b0:	e1f560d1 	ldrsb	r6, [r5, #1]!
   284b4:	e2444030 	sub	r4, r4, #48	; 0x30
   284b8:	e2463030 	sub	r3, r6, #48	; 0x30
   284bc:	e6ef3073 	uxtb	r3, r3
   284c0:	e3530009 	cmp	r3, #9
   284c4:	9afffff7 	bls	284a8 <CString::FormatV(char const*, std::__va_list)+0xc8>
   284c8:	e356002e 	cmp	r6, #46	; 0x2e
   284cc:	0a0001c2 	beq	28bdc <CString::FormatV(char const*, std::__va_list)+0x7fc>
   284d0:	e3a01006 	mov	r1, #6
   284d4:	e1d5a0d0 	ldrsb	sl, [r5]
   284d8:	e35a006c 	cmp	sl, #108	; 0x6c
   284dc:	13a06000 	movne	r6, #0
   284e0:	0a0001b5 	beq	28bbc <CString::FormatV(char const*, std::__va_list)+0x7dc>
   284e4:	e24a3058 	sub	r3, sl, #88	; 0x58
   284e8:	e3530020 	cmp	r3, #32
   284ec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   284f0:	ea000196 	b	28b50 <CString::FormatV(char const*, std::__va_list)+0x770>
   284f4:	00028b20 	.word	0x00028b20
   284f8:	00028b50 	.word	0x00028b50
   284fc:	00028b50 	.word	0x00028b50
   28500:	00028b50 	.word	0x00028b50
   28504:	00028b50 	.word	0x00028b50
   28508:	00028b50 	.word	0x00028b50
   2850c:	00028b50 	.word	0x00028b50
   28510:	00028b50 	.word	0x00028b50
   28514:	00028b50 	.word	0x00028b50
   28518:	00028b50 	.word	0x00028b50
   2851c:	00028b50 	.word	0x00028b50
   28520:	00028aa0 	.word	0x00028aa0
   28524:	000287cc 	.word	0x000287cc
   28528:	00028b50 	.word	0x00028b50
   2852c:	00028740 	.word	0x00028740
   28530:	00028b50 	.word	0x00028b50
   28534:	00028b50 	.word	0x00028b50
   28538:	000287cc 	.word	0x000287cc
   2853c:	00028b50 	.word	0x00028b50
   28540:	00028b50 	.word	0x00028b50
   28544:	00028b50 	.word	0x00028b50
   28548:	00028b50 	.word	0x00028b50
   2854c:	00028b50 	.word	0x00028b50
   28550:	00028900 	.word	0x00028900
   28554:	00028b20 	.word	0x00028b20
   28558:	00028b50 	.word	0x00028b50
   2855c:	00028b50 	.word	0x00028b50
   28560:	000286c4 	.word	0x000286c4
   28564:	00028b50 	.word	0x00028b50
   28568:	00028578 	.word	0x00028578
   2856c:	00028b50 	.word	0x00028b50
   28570:	00028b50 	.word	0x00028b50
   28574:	00028b20 	.word	0x00028b20
   28578:	e3a0700a 	mov	r7, #10
   2857c:	e3560000 	cmp	r6, #0
   28580:	1a0000ee 	bne	28940 <CString::FormatV(char const*, std::__va_list)+0x560>
   28584:	e59d3018 	ldr	r3, [sp, #24]
   28588:	e5936000 	ldr	r6, [r3]
   2858c:	e2833004 	add	r3, r3, #4
   28590:	e1570006 	cmp	r7, r6
   28594:	e58d3018 	str	r3, [sp, #24]
   28598:	93a0b001 	movls	fp, #1
   2859c:	8a000298 	bhi	29004 <CString::FormatV(char const*, std::__va_list)+0xc24>
   285a0:	e00b0b97 	mul	fp, r7, fp
   285a4:	e1a00006 	mov	r0, r6
   285a8:	e1a0100b 	mov	r1, fp
   285ac:	eb0055e8 	bl	3dd54 <__aeabi_uidiv>
   285b0:	e1570000 	cmp	r7, r0
   285b4:	9afffff9 	bls	285a0 <CString::FormatV(char const*, std::__va_list)+0x1c0>
   285b8:	e1a09000 	mov	r9, r0
   285bc:	e28d303c 	add	r3, sp, #60	; 0x3c
   285c0:	e35a0058 	cmp	sl, #88	; 0x58
   285c4:	e58d3020 	str	r3, [sp, #32]
   285c8:	13a0a057 	movne	sl, #87	; 0x57
   285cc:	03a0a037 	moveq	sl, #55	; 0x37
   285d0:	e1a08003 	mov	r8, r3
   285d4:	ea000003 	b	285e8 <CString::FormatV(char const*, std::__va_list)+0x208>
   285d8:	e1a0100b 	mov	r1, fp
   285dc:	e1a00006 	mov	r0, r6
   285e0:	eb0055db 	bl	3dd54 <__aeabi_uidiv>
   285e4:	e1a09000 	mov	r9, r0
   285e8:	e1a00006 	mov	r0, r6
   285ec:	e1a0100b 	mov	r1, fp
   285f0:	eb005614 	bl	3de48 <__aeabi_uidivmod>
   285f4:	e3590009 	cmp	r9, #9
   285f8:	e2893030 	add	r3, r9, #48	; 0x30
   285fc:	808a9009 	addhi	r9, sl, r9
   28600:	96af9073 	sxtbls	r9, r3
   28604:	86af9079 	sxtbhi	r9, r9
   28608:	e2888001 	add	r8, r8, #1
   2860c:	e1a0000b 	mov	r0, fp
   28610:	e1a06001 	mov	r6, r1
   28614:	e5489001 	strb	r9, [r8, #-1]
   28618:	e1a01007 	mov	r1, r7
   2861c:	eb0055cc 	bl	3dd54 <__aeabi_uidiv>
   28620:	e250b000 	subs	fp, r0, #0
   28624:	1affffeb 	bne	285d8 <CString::FormatV(char const*, std::__va_list)+0x1f8>
   28628:	e5c8b000 	strb	fp, [r8]
   2862c:	e59d0020 	ldr	r0, [sp, #32]
   28630:	eb000695 	bl	2a08c <strlen>
   28634:	e59d301c 	ldr	r3, [sp, #28]
   28638:	e1a06000 	mov	r6, r0
   2863c:	e3530000 	cmp	r3, #0
   28640:	1a00017f 	bne	28c44 <CString::FormatV(char const*, std::__va_list)+0x864>
   28644:	e1500004 	cmp	r0, r4
   28648:	2a000011 	bcs	28694 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   2864c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28650:	e59d600c 	ldr	r6, [sp, #12]
   28654:	e0444000 	sub	r4, r4, r0
   28658:	e3530000 	cmp	r3, #0
   2865c:	e1a01004 	mov	r1, r4
   28660:	e1a00006 	mov	r0, r6
   28664:	03a07020 	moveq	r7, #32
   28668:	13a07030 	movne	r7, #48	; 0x30
   2866c:	ebfffd26 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28670:	e1a01006 	mov	r1, r6
   28674:	e2443001 	sub	r3, r4, #1
   28678:	e591200c 	ldr	r2, [r1, #12]
   2867c:	e2433001 	sub	r3, r3, #1
   28680:	e2820001 	add	r0, r2, #1
   28684:	e3730001 	cmn	r3, #1
   28688:	e581000c 	str	r0, [r1, #12]
   2868c:	e5c27000 	strb	r7, [r2]
   28690:	1afffff8 	bne	28678 <CString::FormatV(char const*, std::__va_list)+0x298>
   28694:	e59d1020 	ldr	r1, [sp, #32]
   28698:	e59d000c 	ldr	r0, [sp, #12]
   2869c:	ebfffdc0 	bl	27da4 <CString::PutString(char const*)>
   286a0:	e2855001 	add	r5, r5, #1
   286a4:	e1d540d0 	ldrsb	r4, [r5]
   286a8:	e3540000 	cmp	r4, #0
   286ac:	1affff5f 	bne	28430 <CString::FormatV(char const*, std::__va_list)+0x50>
   286b0:	e59d300c 	ldr	r3, [sp, #12]
   286b4:	e593300c 	ldr	r3, [r3, #12]
   286b8:	e5c34000 	strb	r4, [r3]
   286bc:	e28dd064 	add	sp, sp, #100	; 0x64
   286c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   286c4:	e59d3018 	ldr	r3, [sp, #24]
   286c8:	e5938000 	ldr	r8, [r3]
   286cc:	e2836004 	add	r6, r3, #4
   286d0:	e1a00008 	mov	r0, r8
   286d4:	eb00066c 	bl	2a08c <strlen>
   286d8:	e59d301c 	ldr	r3, [sp, #28]
   286dc:	e1a07000 	mov	r7, r0
   286e0:	e3530000 	cmp	r3, #0
   286e4:	1a0001fd 	bne	28ee0 <CString::FormatV(char const*, std::__va_list)+0xb00>
   286e8:	e1500004 	cmp	r0, r4
   286ec:	2a00000e 	bcs	2872c <CString::FormatV(char const*, std::__va_list)+0x34c>
   286f0:	e59d700c 	ldr	r7, [sp, #12]
   286f4:	e0444000 	sub	r4, r4, r0
   286f8:	e1a01004 	mov	r1, r4
   286fc:	e1a00007 	mov	r0, r7
   28700:	ebfffd01 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28704:	e1a01007 	mov	r1, r7
   28708:	e2443001 	sub	r3, r4, #1
   2870c:	e591200c 	ldr	r2, [r1, #12]
   28710:	e2433001 	sub	r3, r3, #1
   28714:	e2820001 	add	r0, r2, #1
   28718:	e581000c 	str	r0, [r1, #12]
   2871c:	e3a00020 	mov	r0, #32
   28720:	e3730001 	cmn	r3, #1
   28724:	e5c20000 	strb	r0, [r2]
   28728:	1afffff7 	bne	2870c <CString::FormatV(char const*, std::__va_list)+0x32c>
   2872c:	e1a01008 	mov	r1, r8
   28730:	e59d000c 	ldr	r0, [sp, #12]
   28734:	e58d6018 	str	r6, [sp, #24]
   28738:	ebfffd99 	bl	27da4 <CString::PutString(char const*)>
   2873c:	eaffffd7 	b	286a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28740:	e28d003c 	add	r0, sp, #60	; 0x3c
   28744:	e1a06000 	mov	r6, r0
   28748:	e59d3018 	ldr	r3, [sp, #24]
   2874c:	e58d0020 	str	r0, [sp, #32]
   28750:	e283c007 	add	ip, r3, #7
   28754:	e3ccc007 	bic	ip, ip, #7
   28758:	e1cc20d0 	ldrd	r2, [ip]
   2875c:	e58d1000 	str	r1, [sp]
   28760:	e28c1008 	add	r1, ip, #8
   28764:	e58d1018 	str	r1, [sp, #24]
   28768:	ebfffe7d 	bl	28164 <CString::ftoa(char*, double, unsigned int)>
   2876c:	e1a00006 	mov	r0, r6
   28770:	eb000645 	bl	2a08c <strlen>
   28774:	e59d301c 	ldr	r3, [sp, #28]
   28778:	e1a06000 	mov	r6, r0
   2877c:	e3530000 	cmp	r3, #0
   28780:	1a0001eb 	bne	28f34 <CString::FormatV(char const*, std::__va_list)+0xb54>
   28784:	e1500004 	cmp	r0, r4
   28788:	2affffc1 	bcs	28694 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   2878c:	e59d600c 	ldr	r6, [sp, #12]
   28790:	e0444000 	sub	r4, r4, r0
   28794:	e1a01004 	mov	r1, r4
   28798:	e1a00006 	mov	r0, r6
   2879c:	ebfffcda 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   287a0:	e1a01006 	mov	r1, r6
   287a4:	e2443001 	sub	r3, r4, #1
   287a8:	e591200c 	ldr	r2, [r1, #12]
   287ac:	e2433001 	sub	r3, r3, #1
   287b0:	e2820001 	add	r0, r2, #1
   287b4:	e581000c 	str	r0, [r1, #12]
   287b8:	e3a00020 	mov	r0, #32
   287bc:	e3730001 	cmn	r3, #1
   287c0:	e5c20000 	strb	r0, [r2]
   287c4:	1afffff7 	bne	287a8 <CString::FormatV(char const*, std::__va_list)+0x3c8>
   287c8:	eaffffb1 	b	28694 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   287cc:	e3560000 	cmp	r6, #0
   287d0:	e59d3018 	ldr	r3, [sp, #24]
   287d4:	1a00016a 	bne	28d84 <CString::FormatV(char const*, std::__va_list)+0x9a4>
   287d8:	e5936000 	ldr	r6, [r3]
   287dc:	e2833004 	add	r3, r3, #4
   287e0:	e3560000 	cmp	r6, #0
   287e4:	e58d3018 	str	r3, [sp, #24]
   287e8:	aa000208 	bge	29010 <CString::FormatV(char const*, std::__va_list)+0xc30>
   287ec:	e3a0b001 	mov	fp, #1
   287f0:	e2666000 	rsb	r6, r6, #0
   287f4:	e58db010 	str	fp, [sp, #16]
   287f8:	e3560009 	cmp	r6, #9
   287fc:	e1a07006 	mov	r7, r6
   28800:	da000218 	ble	29068 <CString::FormatV(char const*, std::__va_list)+0xc88>
   28804:	e3a08001 	mov	r8, #1
   28808:	e0888108 	add	r8, r8, r8, lsl #2
   2880c:	e1a08088 	lsl	r8, r8, #1
   28810:	e1a01008 	mov	r1, r8
   28814:	e1a00006 	mov	r0, r6
   28818:	eb00554d 	bl	3dd54 <__aeabi_uidiv>
   2881c:	e3500009 	cmp	r0, #9
   28820:	8afffff8 	bhi	28808 <CString::FormatV(char const*, std::__va_list)+0x428>
   28824:	e1a09000 	mov	r9, r0
   28828:	e28d303c 	add	r3, sp, #60	; 0x3c
   2882c:	e58d3020 	str	r3, [sp, #32]
   28830:	e1a06003 	mov	r6, r3
   28834:	ea000003 	b	28848 <CString::FormatV(char const*, std::__va_list)+0x468>
   28838:	e1a01008 	mov	r1, r8
   2883c:	e1a00007 	mov	r0, r7
   28840:	eb005543 	bl	3dd54 <__aeabi_uidiv>
   28844:	e1a09000 	mov	r9, r0
   28848:	e1a00007 	mov	r0, r7
   2884c:	e1a01008 	mov	r1, r8
   28850:	eb00557c 	bl	3de48 <__aeabi_uidivmod>
   28854:	e3590009 	cmp	r9, #9
   28858:	e2893030 	add	r3, r9, #48	; 0x30
   2885c:	96af9073 	sxtbls	r9, r3
   28860:	e59f380c 	ldr	r3, [pc, #2060]	; 29074 <CString::FormatV(char const*, std::__va_list)+0xc94>
   28864:	82899057 	addhi	r9, r9, #87	; 0x57
   28868:	e0883893 	umull	r3, r8, r3, r8
   2886c:	86af9079 	sxtbhi	r9, r9
   28870:	e2866001 	add	r6, r6, #1
   28874:	e1b081a8 	lsrs	r8, r8, #3
   28878:	e1a07001 	mov	r7, r1
   2887c:	e5469001 	strb	r9, [r6, #-1]
   28880:	1affffec 	bne	28838 <CString::FormatV(char const*, std::__va_list)+0x458>
   28884:	e5c68000 	strb	r8, [r6]
   28888:	e59d0020 	ldr	r0, [sp, #32]
   2888c:	eb0005fe 	bl	2a08c <strlen>
   28890:	e59d301c 	ldr	r3, [sp, #28]
   28894:	e080b00b 	add	fp, r0, fp
   28898:	e3530000 	cmp	r3, #0
   2889c:	0a0000fd 	beq	28c98 <CString::FormatV(char const*, std::__va_list)+0x8b8>
   288a0:	e59d3010 	ldr	r3, [sp, #16]
   288a4:	e3530000 	cmp	r3, #0
   288a8:	1a0001cb 	bne	28fdc <CString::FormatV(char const*, std::__va_list)+0xbfc>
   288ac:	e59d1020 	ldr	r1, [sp, #32]
   288b0:	e59d000c 	ldr	r0, [sp, #12]
   288b4:	ebfffd3a 	bl	27da4 <CString::PutString(char const*)>
   288b8:	e15b0004 	cmp	fp, r4
   288bc:	2affff77 	bcs	286a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   288c0:	e59d600c 	ldr	r6, [sp, #12]
   288c4:	e044400b 	sub	r4, r4, fp
   288c8:	e1a01004 	mov	r1, r4
   288cc:	e1a00006 	mov	r0, r6
   288d0:	ebfffc8d 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   288d4:	e1a01006 	mov	r1, r6
   288d8:	e2443001 	sub	r3, r4, #1
   288dc:	e591200c 	ldr	r2, [r1, #12]
   288e0:	e2433001 	sub	r3, r3, #1
   288e4:	e2820001 	add	r0, r2, #1
   288e8:	e581000c 	str	r0, [r1, #12]
   288ec:	e3a00020 	mov	r0, #32
   288f0:	e3730001 	cmn	r3, #1
   288f4:	e5c20000 	strb	r0, [r2]
   288f8:	1afffff7 	bne	288dc <CString::FormatV(char const*, std::__va_list)+0x4fc>
   288fc:	eaffff67 	b	286a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28900:	e3520000 	cmp	r2, #0
   28904:	03a07008 	moveq	r7, #8
   28908:	0affff1b 	beq	2857c <CString::FormatV(char const*, std::__va_list)+0x19c>
   2890c:	e59d700c 	ldr	r7, [sp, #12]
   28910:	e3a01001 	mov	r1, #1
   28914:	e1a00007 	mov	r0, r7
   28918:	ebfffc7b 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2891c:	e3a02030 	mov	r2, #48	; 0x30
   28920:	e597300c 	ldr	r3, [r7, #12]
   28924:	e3560000 	cmp	r6, #0
   28928:	e2831001 	add	r1, r3, #1
   2892c:	e587100c 	str	r1, [r7, #12]
   28930:	e5c32000 	strb	r2, [r3]
   28934:	e1d5a0d0 	ldrsb	sl, [r5]
   28938:	e3a07008 	mov	r7, #8
   2893c:	0affff10 	beq	28584 <CString::FormatV(char const*, std::__va_list)+0x1a4>
   28940:	e3a03000 	mov	r3, #0
   28944:	e1a01003 	mov	r1, r3
   28948:	e59d3018 	ldr	r3, [sp, #24]
   2894c:	e1a02007 	mov	r2, r7
   28950:	e2833007 	add	r3, r3, #7
   28954:	e3c33007 	bic	r3, r3, #7
   28958:	e1a00007 	mov	r0, r7
   2895c:	e1c360d0 	ldrd	r6, [r3]
   28960:	e1a08006 	mov	r8, r6
   28964:	e1a09007 	mov	r9, r7
   28968:	e1510007 	cmp	r1, r7
   2896c:	e2833008 	add	r3, r3, #8
   28970:	01520006 	cmpeq	r2, r6
   28974:	e1cd01f0 	strd	r0, [sp, #16]
   28978:	e1cd82f8 	strd	r8, [sp, #40]	; 0x28
   2897c:	e58d3018 	str	r3, [sp, #24]
   28980:	8a0001a5 	bhi	2901c <CString::FormatV(char const*, std::__va_list)+0xc3c>
   28984:	e58da020 	str	sl, [sp, #32]
   28988:	e58d4030 	str	r4, [sp, #48]	; 0x30
   2898c:	e58d5034 	str	r5, [sp, #52]	; 0x34
   28990:	e3a06001 	mov	r6, #1
   28994:	e3a07000 	mov	r7, #0
   28998:	e1a0a008 	mov	sl, r8
   2899c:	e1a0b009 	mov	fp, r9
   289a0:	e1a04002 	mov	r4, r2
   289a4:	e1a05001 	mov	r5, r1
   289a8:	e0030596 	mul	r3, r6, r5
   289ac:	e0233794 	mla	r3, r4, r7, r3
   289b0:	e0876496 	umull	r6, r7, r6, r4
   289b4:	e0837007 	add	r7, r3, r7
   289b8:	e1a02006 	mov	r2, r6
   289bc:	e1a03007 	mov	r3, r7
   289c0:	e1a0000a 	mov	r0, sl
   289c4:	e1a0100b 	mov	r1, fp
   289c8:	eb005579 	bl	3dfb4 <__aeabi_uldivmod>
   289cc:	e1550001 	cmp	r5, r1
   289d0:	01540000 	cmpeq	r4, r0
   289d4:	e1a08000 	mov	r8, r0
   289d8:	e1a09001 	mov	r9, r1
   289dc:	9afffff1 	bls	289a8 <CString::FormatV(char const*, std::__va_list)+0x5c8>
   289e0:	e59da020 	ldr	sl, [sp, #32]
   289e4:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   289e8:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   289ec:	e35a0058 	cmp	sl, #88	; 0x58
   289f0:	e28d303c 	add	r3, sp, #60	; 0x3c
   289f4:	e58d4030 	str	r4, [sp, #48]	; 0x30
   289f8:	e58d5034 	str	r5, [sp, #52]	; 0x34
   289fc:	e58d3020 	str	r3, [sp, #32]
   28a00:	13a0b057 	movne	fp, #87	; 0x57
   28a04:	e1cd42d8 	ldrd	r4, [sp, #40]	; 0x28
   28a08:	03a0b037 	moveq	fp, #55	; 0x37
   28a0c:	e1a0a003 	mov	sl, r3
   28a10:	ea000006 	b	28a30 <CString::FormatV(char const*, std::__va_list)+0x650>
   28a14:	e1a02000 	mov	r2, r0
   28a18:	e1a03001 	mov	r3, r1
   28a1c:	e1a00004 	mov	r0, r4
   28a20:	e1a01005 	mov	r1, r5
   28a24:	eb005562 	bl	3dfb4 <__aeabi_uldivmod>
   28a28:	e1a08000 	mov	r8, r0
   28a2c:	e1a09001 	mov	r9, r1
   28a30:	e1a00004 	mov	r0, r4
   28a34:	e1a01005 	mov	r1, r5
   28a38:	e1a02006 	mov	r2, r6
   28a3c:	e1a03007 	mov	r3, r7
   28a40:	eb00555b 	bl	3dfb4 <__aeabi_uldivmod>
   28a44:	e3590000 	cmp	r9, #0
   28a48:	03580009 	cmpeq	r8, #9
   28a4c:	e1a05003 	mov	r5, r3
   28a50:	e2883030 	add	r3, r8, #48	; 0x30
   28a54:	808b8008 	addhi	r8, fp, r8
   28a58:	96af8073 	sxtbls	r8, r3
   28a5c:	86af8078 	sxtbhi	r8, r8
   28a60:	e28aa001 	add	sl, sl, #1
   28a64:	e1a00006 	mov	r0, r6
   28a68:	e1a01007 	mov	r1, r7
   28a6c:	e1a04002 	mov	r4, r2
   28a70:	e1cd21d0 	ldrd	r2, [sp, #16]
   28a74:	e54a8001 	strb	r8, [sl, #-1]
   28a78:	eb00554d 	bl	3dfb4 <__aeabi_uldivmod>
   28a7c:	e1a06000 	mov	r6, r0
   28a80:	e1a07001 	mov	r7, r1
   28a84:	e1963007 	orrs	r3, r6, r7
   28a88:	1affffe1 	bne	28a14 <CString::FormatV(char const*, std::__va_list)+0x634>
   28a8c:	e3a03000 	mov	r3, #0
   28a90:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   28a94:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   28a98:	e5ca3000 	strb	r3, [sl]
   28a9c:	eafffee2 	b	2862c <CString::FormatV(char const*, std::__va_list)+0x24c>
   28aa0:	e59d301c 	ldr	r3, [sp, #28]
   28aa4:	e3530000 	cmp	r3, #0
   28aa8:	e59d3018 	ldr	r3, [sp, #24]
   28aac:	e2836004 	add	r6, r3, #4
   28ab0:	e1d370d0 	ldrsb	r7, [r3]
   28ab4:	1a000098 	bne	28d1c <CString::FormatV(char const*, std::__va_list)+0x93c>
   28ab8:	e3540001 	cmp	r4, #1
   28abc:	9a00000d 	bls	28af8 <CString::FormatV(char const*, std::__va_list)+0x718>
   28ac0:	e59d800c 	ldr	r8, [sp, #12]
   28ac4:	e2441001 	sub	r1, r4, #1
   28ac8:	e1a00008 	mov	r0, r8
   28acc:	ebfffc0e 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28ad0:	e1a02008 	mov	r2, r8
   28ad4:	e2444002 	sub	r4, r4, #2
   28ad8:	e592300c 	ldr	r3, [r2, #12]
   28adc:	e2444001 	sub	r4, r4, #1
   28ae0:	e2831001 	add	r1, r3, #1
   28ae4:	e582100c 	str	r1, [r2, #12]
   28ae8:	e3a01020 	mov	r1, #32
   28aec:	e3740001 	cmn	r4, #1
   28af0:	e5c31000 	strb	r1, [r3]
   28af4:	1afffff7 	bne	28ad8 <CString::FormatV(char const*, std::__va_list)+0x6f8>
   28af8:	e59d400c 	ldr	r4, [sp, #12]
   28afc:	e3a01001 	mov	r1, #1
   28b00:	e1a00004 	mov	r0, r4
   28b04:	ebfffc00 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28b08:	e594300c 	ldr	r3, [r4, #12]
   28b0c:	e58d6018 	str	r6, [sp, #24]
   28b10:	e2832001 	add	r2, r3, #1
   28b14:	e584200c 	str	r2, [r4, #12]
   28b18:	e5c37000 	strb	r7, [r3]
   28b1c:	eafffedf 	b	286a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28b20:	e3520000 	cmp	r2, #0
   28b24:	03a07010 	moveq	r7, #16
   28b28:	0afffe93 	beq	2857c <CString::FormatV(char const*, std::__va_list)+0x19c>
   28b2c:	e59f3544 	ldr	r3, [pc, #1348]	; 29078 <CString::FormatV(char const*, std::__va_list)+0xc98>
   28b30:	e35a0058 	cmp	sl, #88	; 0x58
   28b34:	e59f1540 	ldr	r1, [pc, #1344]	; 2907c <CString::FormatV(char const*, std::__va_list)+0xc9c>
   28b38:	e59d000c 	ldr	r0, [sp, #12]
   28b3c:	11a01003 	movne	r1, r3
   28b40:	ebfffc97 	bl	27da4 <CString::PutString(char const*)>
   28b44:	e3a07010 	mov	r7, #16
   28b48:	e1d5a0d0 	ldrsb	sl, [r5]
   28b4c:	eafffe8a 	b	2857c <CString::FormatV(char const*, std::__va_list)+0x19c>
   28b50:	e59d600c 	ldr	r6, [sp, #12]
   28b54:	e3a01001 	mov	r1, #1
   28b58:	e1a00006 	mov	r0, r6
   28b5c:	ebfffbea 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28b60:	e3a01001 	mov	r1, #1
   28b64:	e596300c 	ldr	r3, [r6, #12]
   28b68:	e1a00006 	mov	r0, r6
   28b6c:	e0832001 	add	r2, r3, r1
   28b70:	e586200c 	str	r2, [r6, #12]
   28b74:	e3a02025 	mov	r2, #37	; 0x25
   28b78:	e5c32000 	strb	r2, [r3]
   28b7c:	e1d540d0 	ldrsb	r4, [r5]
   28b80:	ebfffbe1 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28b84:	e596300c 	ldr	r3, [r6, #12]
   28b88:	e2832001 	add	r2, r3, #1
   28b8c:	e586200c 	str	r2, [r6, #12]
   28b90:	e5c34000 	strb	r4, [r3]
   28b94:	eafffec1 	b	286a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28b98:	e59d600c 	ldr	r6, [sp, #12]
   28b9c:	e3a01001 	mov	r1, #1
   28ba0:	e1a00006 	mov	r0, r6
   28ba4:	ebfffbd8 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28ba8:	e596300c 	ldr	r3, [r6, #12]
   28bac:	e2832001 	add	r2, r3, #1
   28bb0:	e586200c 	str	r2, [r6, #12]
   28bb4:	e5c34000 	strb	r4, [r3]
   28bb8:	eafffeb8 	b	286a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28bbc:	e1d5a0d1 	ldrsb	sl, [r5, #1]
   28bc0:	e35a006c 	cmp	sl, #108	; 0x6c
   28bc4:	03a06001 	moveq	r6, #1
   28bc8:	01d5a0d2 	ldrsbeq	sl, [r5, #2]
   28bcc:	00855006 	addeq	r5, r5, r6
   28bd0:	13a06000 	movne	r6, #0
   28bd4:	e2855001 	add	r5, r5, #1
   28bd8:	eafffe41 	b	284e4 <CString::FormatV(char const*, std::__va_list)+0x104>
   28bdc:	e1d5a0d1 	ldrsb	sl, [r5, #1]
   28be0:	e3a01000 	mov	r1, #0
   28be4:	e24a3030 	sub	r3, sl, #48	; 0x30
   28be8:	e6ef3073 	uxtb	r3, r3
   28bec:	e3530009 	cmp	r3, #9
   28bf0:	e2855001 	add	r5, r5, #1
   28bf4:	8afffe37 	bhi	284d8 <CString::FormatV(char const*, std::__va_list)+0xf8>
   28bf8:	e0811101 	add	r1, r1, r1, lsl #2
   28bfc:	e08a1081 	add	r1, sl, r1, lsl #1
   28c00:	e1f5a0d1 	ldrsb	sl, [r5, #1]!
   28c04:	e2411030 	sub	r1, r1, #48	; 0x30
   28c08:	e24a3030 	sub	r3, sl, #48	; 0x30
   28c0c:	e6ef3073 	uxtb	r3, r3
   28c10:	e3530009 	cmp	r3, #9
   28c14:	9afffff7 	bls	28bf8 <CString::FormatV(char const*, std::__va_list)+0x818>
   28c18:	eafffe2e 	b	284d8 <CString::FormatV(char const*, std::__va_list)+0xf8>
   28c1c:	e59d400c 	ldr	r4, [sp, #12]
   28c20:	e3a01001 	mov	r1, #1
   28c24:	e1a00004 	mov	r0, r4
   28c28:	ebfffbb7 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28c2c:	e594300c 	ldr	r3, [r4, #12]
   28c30:	e2855002 	add	r5, r5, #2
   28c34:	e2832001 	add	r2, r3, #1
   28c38:	e584200c 	str	r2, [r4, #12]
   28c3c:	e5c36000 	strb	r6, [r3]
   28c40:	eafffdf7 	b	28424 <CString::FormatV(char const*, std::__va_list)+0x44>
   28c44:	e59d700c 	ldr	r7, [sp, #12]
   28c48:	e59d1020 	ldr	r1, [sp, #32]
   28c4c:	e1a00007 	mov	r0, r7
   28c50:	ebfffc53 	bl	27da4 <CString::PutString(char const*)>
   28c54:	e1560004 	cmp	r6, r4
   28c58:	2afffe90 	bcs	286a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28c5c:	e0444006 	sub	r4, r4, r6
   28c60:	e1a01004 	mov	r1, r4
   28c64:	e1a00007 	mov	r0, r7
   28c68:	ebfffba7 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28c6c:	e1a01007 	mov	r1, r7
   28c70:	e2443001 	sub	r3, r4, #1
   28c74:	e591200c 	ldr	r2, [r1, #12]
   28c78:	e2433001 	sub	r3, r3, #1
   28c7c:	e2820001 	add	r0, r2, #1
   28c80:	e581000c 	str	r0, [r1, #12]
   28c84:	e3a00020 	mov	r0, #32
   28c88:	e3730001 	cmn	r3, #1
   28c8c:	e5c20000 	strb	r0, [r2]
   28c90:	1afffff7 	bne	28c74 <CString::FormatV(char const*, std::__va_list)+0x894>
   28c94:	eafffe81 	b	286a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28c98:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28c9c:	e3530000 	cmp	r3, #0
   28ca0:	1a0000b8 	bne	28f88 <CString::FormatV(char const*, std::__va_list)+0xba8>
   28ca4:	e15b0004 	cmp	fp, r4
   28ca8:	2a00000e 	bcs	28ce8 <CString::FormatV(char const*, std::__va_list)+0x908>
   28cac:	e59d600c 	ldr	r6, [sp, #12]
   28cb0:	e044400b 	sub	r4, r4, fp
   28cb4:	e1a01004 	mov	r1, r4
   28cb8:	e1a00006 	mov	r0, r6
   28cbc:	ebfffb92 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28cc0:	e1a01006 	mov	r1, r6
   28cc4:	e2443001 	sub	r3, r4, #1
   28cc8:	e591200c 	ldr	r2, [r1, #12]
   28ccc:	e2433001 	sub	r3, r3, #1
   28cd0:	e2820001 	add	r0, r2, #1
   28cd4:	e581000c 	str	r0, [r1, #12]
   28cd8:	e3a00020 	mov	r0, #32
   28cdc:	e3730001 	cmn	r3, #1
   28ce0:	e5c20000 	strb	r0, [r2]
   28ce4:	1afffff7 	bne	28cc8 <CString::FormatV(char const*, std::__va_list)+0x8e8>
   28ce8:	e59d3010 	ldr	r3, [sp, #16]
   28cec:	e3530000 	cmp	r3, #0
   28cf0:	0afffe67 	beq	28694 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   28cf4:	e59d400c 	ldr	r4, [sp, #12]
   28cf8:	e3a01001 	mov	r1, #1
   28cfc:	e1a00004 	mov	r0, r4
   28d00:	ebfffb81 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28d04:	e3a0202d 	mov	r2, #45	; 0x2d
   28d08:	e594300c 	ldr	r3, [r4, #12]
   28d0c:	e2831001 	add	r1, r3, #1
   28d10:	e584100c 	str	r1, [r4, #12]
   28d14:	e5c32000 	strb	r2, [r3]
   28d18:	eafffe5d 	b	28694 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   28d1c:	e59d800c 	ldr	r8, [sp, #12]
   28d20:	e3a01001 	mov	r1, #1
   28d24:	e1a00008 	mov	r0, r8
   28d28:	ebfffb77 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28d2c:	e598300c 	ldr	r3, [r8, #12]
   28d30:	e3540001 	cmp	r4, #1
   28d34:	e2832001 	add	r2, r3, #1
   28d38:	e588200c 	str	r2, [r8, #12]
   28d3c:	e1a00008 	mov	r0, r8
   28d40:	e5c37000 	strb	r7, [r3]
   28d44:	9a00000c 	bls	28d7c <CString::FormatV(char const*, std::__va_list)+0x99c>
   28d48:	e2441001 	sub	r1, r4, #1
   28d4c:	ebfffb6e 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28d50:	e1a07008 	mov	r7, r8
   28d54:	e1a02008 	mov	r2, r8
   28d58:	e2444002 	sub	r4, r4, #2
   28d5c:	e592300c 	ldr	r3, [r2, #12]
   28d60:	e2444001 	sub	r4, r4, #1
   28d64:	e2831001 	add	r1, r3, #1
   28d68:	e582100c 	str	r1, [r2, #12]
   28d6c:	e3a01020 	mov	r1, #32
   28d70:	e3740001 	cmn	r4, #1
   28d74:	e5c31000 	strb	r1, [r3]
   28d78:	1afffff7 	bne	28d5c <CString::FormatV(char const*, std::__va_list)+0x97c>
   28d7c:	e58d6018 	str	r6, [sp, #24]
   28d80:	eafffe46 	b	286a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28d84:	e2833007 	add	r3, r3, #7
   28d88:	e3c33007 	bic	r3, r3, #7
   28d8c:	e1c300d0 	ldrd	r0, [r3]
   28d90:	e3500000 	cmp	r0, #0
   28d94:	e2d12000 	sbcs	r2, r1, #0
   28d98:	a3a0b000 	movge	fp, #0
   28d9c:	e2833008 	add	r3, r3, #8
   28da0:	e58d3018 	str	r3, [sp, #24]
   28da4:	a58db010 	strge	fp, [sp, #16]
   28da8:	aa000005 	bge	28dc4 <CString::FormatV(char const*, std::__va_list)+0x9e4>
   28dac:	e2702000 	rsbs	r2, r0, #0
   28db0:	e2e13000 	rsc	r3, r1, #0
   28db4:	e3a0b001 	mov	fp, #1
   28db8:	e1a00002 	mov	r0, r2
   28dbc:	e1a01003 	mov	r1, r3
   28dc0:	e58db010 	str	fp, [sp, #16]
   28dc4:	e1a03001 	mov	r3, r1
   28dc8:	e1a02000 	mov	r2, r0
   28dcc:	e350000a 	cmp	r0, #10
   28dd0:	e1cd22f8 	strd	r2, [sp, #40]	; 0x28
   28dd4:	e2d33000 	sbcs	r3, r3, #0
   28dd8:	ba00009d 	blt	29054 <CString::FormatV(char const*, std::__va_list)+0xc74>
   28ddc:	e58d4020 	str	r4, [sp, #32]
   28de0:	e58d5030 	str	r5, [sp, #48]	; 0x30
   28de4:	e3a08001 	mov	r8, #1
   28de8:	e3a09000 	mov	r9, #0
   28dec:	e3a0a00a 	mov	sl, #10
   28df0:	e1a04000 	mov	r4, r0
   28df4:	e1a05001 	mov	r5, r1
   28df8:	e003099a 	mul	r3, sl, r9
   28dfc:	e0898a98 	umull	r8, r9, r8, sl
   28e00:	e0839009 	add	r9, r3, r9
   28e04:	e1a02008 	mov	r2, r8
   28e08:	e1a03009 	mov	r3, r9
   28e0c:	e1a00004 	mov	r0, r4
   28e10:	e1a01005 	mov	r1, r5
   28e14:	eb005466 	bl	3dfb4 <__aeabi_uldivmod>
   28e18:	e3510000 	cmp	r1, #0
   28e1c:	03500009 	cmpeq	r0, #9
   28e20:	e1a06000 	mov	r6, r0
   28e24:	e1a07001 	mov	r7, r1
   28e28:	8afffff2 	bhi	28df8 <CString::FormatV(char const*, std::__va_list)+0xa18>
   28e2c:	e59d4020 	ldr	r4, [sp, #32]
   28e30:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   28e34:	e28d303c 	add	r3, sp, #60	; 0x3c
   28e38:	e58d4030 	str	r4, [sp, #48]	; 0x30
   28e3c:	e58d5034 	str	r5, [sp, #52]	; 0x34
   28e40:	e58d3020 	str	r3, [sp, #32]
   28e44:	e1a0a003 	mov	sl, r3
   28e48:	e1cd42d8 	ldrd	r4, [sp, #40]	; 0x28
   28e4c:	ea000006 	b	28e6c <CString::FormatV(char const*, std::__va_list)+0xa8c>
   28e50:	e1a02000 	mov	r2, r0
   28e54:	e1a03001 	mov	r3, r1
   28e58:	e1a00004 	mov	r0, r4
   28e5c:	e1a01005 	mov	r1, r5
   28e60:	eb005453 	bl	3dfb4 <__aeabi_uldivmod>
   28e64:	e1a06000 	mov	r6, r0
   28e68:	e1a07001 	mov	r7, r1
   28e6c:	e1a00004 	mov	r0, r4
   28e70:	e1a01005 	mov	r1, r5
   28e74:	e1a02008 	mov	r2, r8
   28e78:	e1a03009 	mov	r3, r9
   28e7c:	eb00544c 	bl	3dfb4 <__aeabi_uldivmod>
   28e80:	e3570000 	cmp	r7, #0
   28e84:	03560009 	cmpeq	r6, #9
   28e88:	e1a05003 	mov	r5, r3
   28e8c:	e2863030 	add	r3, r6, #48	; 0x30
   28e90:	82866057 	addhi	r6, r6, #87	; 0x57
   28e94:	96af6073 	sxtbls	r6, r3
   28e98:	86af6076 	sxtbhi	r6, r6
   28e9c:	e28aa001 	add	sl, sl, #1
   28ea0:	e1a00008 	mov	r0, r8
   28ea4:	e1a01009 	mov	r1, r9
   28ea8:	e3a03000 	mov	r3, #0
   28eac:	e1a04002 	mov	r4, r2
   28eb0:	e54a6001 	strb	r6, [sl, #-1]
   28eb4:	e3a0200a 	mov	r2, #10
   28eb8:	eb00543d 	bl	3dfb4 <__aeabi_uldivmod>
   28ebc:	e1a08000 	mov	r8, r0
   28ec0:	e1a09001 	mov	r9, r1
   28ec4:	e1983009 	orrs	r3, r8, r9
   28ec8:	1affffe0 	bne	28e50 <CString::FormatV(char const*, std::__va_list)+0xa70>
   28ecc:	e3a03000 	mov	r3, #0
   28ed0:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   28ed4:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   28ed8:	e5ca3000 	strb	r3, [sl]
   28edc:	eafffe69 	b	28888 <CString::FormatV(char const*, std::__va_list)+0x4a8>
   28ee0:	e1a01008 	mov	r1, r8
   28ee4:	e59d800c 	ldr	r8, [sp, #12]
   28ee8:	e1a00008 	mov	r0, r8
   28eec:	ebfffbac 	bl	27da4 <CString::PutString(char const*)>
   28ef0:	e1570004 	cmp	r7, r4
   28ef4:	2affffa0 	bcs	28d7c <CString::FormatV(char const*, std::__va_list)+0x99c>
   28ef8:	e0444007 	sub	r4, r4, r7
   28efc:	e1a01004 	mov	r1, r4
   28f00:	e1a00008 	mov	r0, r8
   28f04:	ebfffb00 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28f08:	e1a01008 	mov	r1, r8
   28f0c:	e2443001 	sub	r3, r4, #1
   28f10:	e591200c 	ldr	r2, [r1, #12]
   28f14:	e2433001 	sub	r3, r3, #1
   28f18:	e2820001 	add	r0, r2, #1
   28f1c:	e581000c 	str	r0, [r1, #12]
   28f20:	e3a00020 	mov	r0, #32
   28f24:	e3730001 	cmn	r3, #1
   28f28:	e5c20000 	strb	r0, [r2]
   28f2c:	1afffff7 	bne	28f10 <CString::FormatV(char const*, std::__va_list)+0xb30>
   28f30:	eaffff91 	b	28d7c <CString::FormatV(char const*, std::__va_list)+0x99c>
   28f34:	e59d700c 	ldr	r7, [sp, #12]
   28f38:	e59d1020 	ldr	r1, [sp, #32]
   28f3c:	e1a00007 	mov	r0, r7
   28f40:	ebfffb97 	bl	27da4 <CString::PutString(char const*)>
   28f44:	e1560004 	cmp	r6, r4
   28f48:	2afffdd4 	bcs	286a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28f4c:	e0444006 	sub	r4, r4, r6
   28f50:	e1a01004 	mov	r1, r4
   28f54:	e1a00007 	mov	r0, r7
   28f58:	ebfffaeb 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28f5c:	e1a01007 	mov	r1, r7
   28f60:	e2443001 	sub	r3, r4, #1
   28f64:	e591200c 	ldr	r2, [r1, #12]
   28f68:	e2433001 	sub	r3, r3, #1
   28f6c:	e2820001 	add	r0, r2, #1
   28f70:	e581000c 	str	r0, [r1, #12]
   28f74:	e3a00020 	mov	r0, #32
   28f78:	e3730001 	cmn	r3, #1
   28f7c:	e5c20000 	strb	r0, [r2]
   28f80:	1afffff7 	bne	28f64 <CString::FormatV(char const*, std::__va_list)+0xb84>
   28f84:	eafffdc5 	b	286a0 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28f88:	e59d3010 	ldr	r3, [sp, #16]
   28f8c:	e3530000 	cmp	r3, #0
   28f90:	1a000025 	bne	2902c <CString::FormatV(char const*, std::__va_list)+0xc4c>
   28f94:	e15b0004 	cmp	fp, r4
   28f98:	2afffdbd 	bcs	28694 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   28f9c:	e59d600c 	ldr	r6, [sp, #12]
   28fa0:	e044400b 	sub	r4, r4, fp
   28fa4:	e1a01004 	mov	r1, r4
   28fa8:	e1a00006 	mov	r0, r6
   28fac:	ebfffad6 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28fb0:	e3a00030 	mov	r0, #48	; 0x30
   28fb4:	e1a01006 	mov	r1, r6
   28fb8:	e2443001 	sub	r3, r4, #1
   28fbc:	e591200c 	ldr	r2, [r1, #12]
   28fc0:	e2433001 	sub	r3, r3, #1
   28fc4:	e282c001 	add	ip, r2, #1
   28fc8:	e3730001 	cmn	r3, #1
   28fcc:	e581c00c 	str	ip, [r1, #12]
   28fd0:	e5c20000 	strb	r0, [r2]
   28fd4:	1afffff8 	bne	28fbc <CString::FormatV(char const*, std::__va_list)+0xbdc>
   28fd8:	eafffdad 	b	28694 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   28fdc:	e59d600c 	ldr	r6, [sp, #12]
   28fe0:	e3a01001 	mov	r1, #1
   28fe4:	e1a00006 	mov	r0, r6
   28fe8:	ebfffac7 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28fec:	e3a0202d 	mov	r2, #45	; 0x2d
   28ff0:	e596300c 	ldr	r3, [r6, #12]
   28ff4:	e2831001 	add	r1, r3, #1
   28ff8:	e586100c 	str	r1, [r6, #12]
   28ffc:	e5c32000 	strb	r2, [r3]
   29000:	eafffe29 	b	288ac <CString::FormatV(char const*, std::__va_list)+0x4cc>
   29004:	e1a09006 	mov	r9, r6
   29008:	e3a0b001 	mov	fp, #1
   2900c:	eafffd6a 	b	285bc <CString::FormatV(char const*, std::__va_list)+0x1dc>
   29010:	e3a0b000 	mov	fp, #0
   29014:	e58db010 	str	fp, [sp, #16]
   29018:	eafffdf6 	b	287f8 <CString::FormatV(char const*, std::__va_list)+0x418>
   2901c:	e1cd82d8 	ldrd	r8, [sp, #40]	; 0x28
   29020:	e3a06001 	mov	r6, #1
   29024:	e3a07000 	mov	r7, #0
   29028:	eafffe6f 	b	289ec <CString::FormatV(char const*, std::__va_list)+0x60c>
   2902c:	e59d600c 	ldr	r6, [sp, #12]
   29030:	e3a01001 	mov	r1, #1
   29034:	e1a00006 	mov	r0, r6
   29038:	ebfffab3 	bl	27b0c <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2903c:	e3a0202d 	mov	r2, #45	; 0x2d
   29040:	e596300c 	ldr	r3, [r6, #12]
   29044:	e2831001 	add	r1, r3, #1
   29048:	e586100c 	str	r1, [r6, #12]
   2904c:	e5c32000 	strb	r2, [r3]
   29050:	eaffffcf 	b	28f94 <CString::FormatV(char const*, std::__va_list)+0xbb4>
   29054:	e1a06000 	mov	r6, r0
   29058:	e1a07001 	mov	r7, r1
   2905c:	e3a08001 	mov	r8, #1
   29060:	e3a09000 	mov	r9, #0
   29064:	eaffff72 	b	28e34 <CString::FormatV(char const*, std::__va_list)+0xa54>
   29068:	e1a09007 	mov	r9, r7
   2906c:	e3a08001 	mov	r8, #1
   29070:	eafffdec 	b	28828 <CString::FormatV(char const*, std::__va_list)+0x448>
   29074:	cccccccd 	.word	0xcccccccd
   29078:	00045794 	.word	0x00045794
   2907c:	00045790 	.word	0x00045790

00029080 <CString::Format(char const*, ...)>:
   29080:	e92d000e 	push	{r1, r2, r3}
   29084:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   29088:	e24dd008 	sub	sp, sp, #8
   2908c:	e28d3010 	add	r3, sp, #16
   29090:	e1a02003 	mov	r2, r3
   29094:	e59d100c 	ldr	r1, [sp, #12]
   29098:	e58d3004 	str	r3, [sp, #4]
   2909c:	ebfffccf 	bl	283e0 <CString::FormatV(char const*, std::__va_list)>
   290a0:	e28dd008 	add	sp, sp, #8
   290a4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   290a8:	e28dd00c 	add	sp, sp, #12
   290ac:	e12fff1e 	bx	lr

000290b0 <__aeabi_atexit>:
   290b0:	e12fff1e 	bx	lr

000290b4 <__errno>:
   290b4:	e59f0000 	ldr	r0, [pc]	; 290bc <__errno+0x8>
   290b8:	e12fff1e 	bx	lr
   290bc:	0004e228 	.word	0x0004e228

000290c0 <set_qemu_exit_status>:
   290c0:	e59f3004 	ldr	r3, [pc, #4]	; 290cc <set_qemu_exit_status+0xc>
   290c4:	e5830008 	str	r0, [r3, #8]
   290c8:	e12fff1e 	bx	lr
   290cc:	0004e224 	.word	0x0004e224

000290d0 <halt>:
   290d0:	f10c0080 	cpsid	i
   290d4:	f10c0040 	cpsid	f
   290d8:	eafffffe 	b	290d8 <halt+0x8>

000290dc <reboot>:
   290dc:	e3a03000 	mov	r3, #0
   290e0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   290e4:	e59f3010 	ldr	r3, [pc, #16]	; 290fc <reboot+0x20>
   290e8:	e59f1010 	ldr	r1, [pc, #16]	; 29100 <reboot+0x24>
   290ec:	e59f2010 	ldr	r2, [pc, #16]	; 29104 <reboot+0x28>
   290f0:	e5831024 	str	r1, [r3, #36]	; 0x24
   290f4:	e583201c 	str	r2, [r3, #28]
   290f8:	eafffffe 	b	290f8 <reboot+0x1c>
   290fc:	20100000 	.word	0x20100000
   29100:	5a000001 	.word	0x5a000001
   29104:	5a000020 	.word	0x5a000020

00029108 <sysinit>:
   29108:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2910c:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   29110:	f1080040 	cpsie	f
   29114:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   29118:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   2911c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   29120:	e3a04000 	mov	r4, #0
   29124:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   29128:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   2912c:	eee83a10 	vmsr	fpexc, r3
   29130:	e3a03402 	mov	r3, #33554432	; 0x2000000
   29134:	eee13a10 	vmsr	fpscr, r3
   29138:	e59f0088 	ldr	r0, [pc, #136]	; 291c8 <sysinit+0xc0>
   2913c:	e59f2088 	ldr	r2, [pc, #136]	; 291cc <sysinit+0xc4>
   29140:	e1a01004 	mov	r1, r4
   29144:	e0422000 	sub	r2, r2, r0
   29148:	eb00037d 	bl	29f44 <memset>
   2914c:	e1a0000d 	mov	r0, sp
   29150:	ebfff797 	bl	26fb4 <CMachineInfo::CMachineInfo()>
   29154:	e28d001c 	add	r0, sp, #28
   29158:	e3a01001 	mov	r1, #1
   2915c:	eb000a05 	bl	2b978 <CMemorySystem::CMemorySystem(bool)>
   29160:	e59f5068 	ldr	r5, [pc, #104]	; 291d0 <sysinit+0xc8>
   29164:	e59f3068 	ldr	r3, [pc, #104]	; 291d4 <sysinit+0xcc>
   29168:	e1550003 	cmp	r5, r3
   2916c:	31e06005 	mvncc	r6, r5
   29170:	30866003 	addcc	r6, r6, r3
   29174:	31a06126 	lsrcc	r6, r6, #2
   29178:	32866001 	addcc	r6, r6, #1
   2917c:	2a000004 	bcs	29194 <sysinit+0x8c>
   29180:	e2844001 	add	r4, r4, #1
   29184:	e4953004 	ldr	r3, [r5], #4
   29188:	e12fff33 	blx	r3
   2918c:	e1540006 	cmp	r4, r6
   29190:	1afffffa 	bne	29180 <sysinit+0x78>
   29194:	ebff7bb3 	bl	8068 <main>
   29198:	e3500001 	cmp	r0, #1
   2919c:	0a000000 	beq	291a4 <sysinit+0x9c>
   291a0:	ebffffca 	bl	290d0 <halt>
   291a4:	eb0006c3 	bl	2acb8 <IsChainBootEnabled>
   291a8:	e3500000 	cmp	r0, #0
   291ac:	1a000000 	bne	291b4 <sysinit+0xac>
   291b0:	ebffffc9 	bl	290dc <reboot>
   291b4:	e28d001c 	add	r0, sp, #28
   291b8:	eb000a4f 	bl	2bafc <CMemorySystem::Destructor()>
   291bc:	f10c0040 	cpsid	f
   291c0:	eb0006c2 	bl	2acd0 <DoChainBoot>
   291c4:	eafffff9 	b	291b0 <sysinit+0xa8>
   291c8:	0004e1d8 	.word	0x0004e1d8
   291cc:	000510e0 	.word	0x000510e0
   291d0:	00047f80 	.word	0x00047f80
   291d4:	00047f90 	.word	0x00047f90

000291d8 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>:
   291d8:	e2800001 	add	r0, r0, #1
   291dc:	e3a03000 	mov	r3, #0
   291e0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   291e4:	e59f3020 	ldr	r3, [pc, #32]	; 2920c <CTimer::SimpleusDelay(unsigned int) [clone .part.3]+0x34>
   291e8:	e1a01003 	mov	r1, r3
   291ec:	e5932004 	ldr	r2, [r3, #4]
   291f0:	e5913004 	ldr	r3, [r1, #4]
   291f4:	e0433002 	sub	r3, r3, r2
   291f8:	e1500003 	cmp	r0, r3
   291fc:	8afffffb 	bhi	291f0 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]+0x18>
   29200:	e3a03000 	mov	r3, #0
   29204:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   29208:	e12fff1e 	bx	lr
   2920c:	20003000 	.word	0x20003000

00029210 <CTimer::CTimer(CInterruptSystem*)>:
   29210:	e92d4070 	push	{r4, r5, r6, lr}
   29214:	e3a05000 	mov	r5, #0
   29218:	e3a06001 	mov	r6, #1
   2921c:	e1a04000 	mov	r4, r0
   29220:	e5805004 	str	r5, [r0, #4]
   29224:	e5801000 	str	r1, [r0]
   29228:	e5805008 	str	r5, [r0, #8]
   2922c:	e5805014 	str	r5, [r0, #20]
   29230:	e5806010 	str	r6, [r0, #16]
   29234:	e580500c 	str	r5, [r0, #12]
   29238:	e2800018 	add	r0, r0, #24
   2923c:	eb000e0b 	bl	2ca70 <CPtrList::CPtrList()>
   29240:	e3a020c8 	mov	r2, #200	; 0xc8
   29244:	e59f3038 	ldr	r3, [pc, #56]	; 29284 <CTimer::CTimer(CInterruptSystem*)+0x74>
   29248:	e59f1038 	ldr	r1, [pc, #56]	; 29288 <CTimer::CTimer(CInterruptSystem*)+0x78>
   2924c:	e5930000 	ldr	r0, [r3]
   29250:	e584601c 	str	r6, [r4, #28]
   29254:	e1500005 	cmp	r0, r5
   29258:	e5845038 	str	r5, [r4, #56]	; 0x38
   2925c:	e5841020 	str	r1, [r4, #32]
   29260:	e5842024 	str	r2, [r4, #36]	; 0x24
   29264:	1a000002 	bne	29274 <CTimer::CTimer(CInterruptSystem*)+0x64>
   29268:	e5834000 	str	r4, [r3]
   2926c:	e1a00004 	mov	r0, r4
   29270:	e8bd8070 	pop	{r4, r5, r6, pc}
   29274:	e3a02041 	mov	r2, #65	; 0x41
   29278:	e59f100c 	ldr	r1, [pc, #12]	; 2928c <CTimer::CTimer(CInterruptSystem*)+0x7c>
   2927c:	e59f000c 	ldr	r0, [pc, #12]	; 29290 <CTimer::CTimer(CInterruptSystem*)+0x80>
   29280:	ebffed62 	bl	24810 <assertion_failed>
   29284:	0004e230 	.word	0x0004e230
   29288:	00030d40 	.word	0x00030d40
   2928c:	000457d0 	.word	0x000457d0
   29290:	000439b4 	.word	0x000439b4

00029294 <CTimer::~CTimer()>:
   29294:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29298:	e1a09000 	mov	r9, r0
   2929c:	e5900000 	ldr	r0, [r0]
   292a0:	e3500000 	cmp	r0, #0
   292a4:	0a000028 	beq	2934c <CTimer::~CTimer()+0xb8>
   292a8:	e3a01003 	mov	r1, #3
   292ac:	e2894018 	add	r4, r9, #24
   292b0:	eb000bda 	bl	2c220 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   292b4:	e1a00004 	mov	r0, r4
   292b8:	eb000dfa 	bl	2caa8 <CPtrList::GetFirst()>
   292bc:	e2505000 	subs	r5, r0, #0
   292c0:	e3a08014 	mov	r8, #20
   292c4:	e59f7090 	ldr	r7, [pc, #144]	; 2935c <CTimer::~CTimer()+0xc8>
   292c8:	0a000011 	beq	29314 <CTimer::~CTimer()+0x80>
   292cc:	e1a01005 	mov	r1, r5
   292d0:	e1a00004 	mov	r0, r4
   292d4:	eb000e0a 	bl	2cb04 <CPtrList::GetPtr(TPtrListElement*)>
   292d8:	e2506000 	subs	r6, r0, #0
   292dc:	0a000012 	beq	2932c <CTimer::~CTimer()+0x98>
   292e0:	e5963000 	ldr	r3, [r6]
   292e4:	e1530007 	cmp	r3, r7
   292e8:	1a000013 	bne	2933c <CTimer::~CTimer()+0xa8>
   292ec:	e1a01005 	mov	r1, r5
   292f0:	e1a00004 	mov	r0, r4
   292f4:	eb000e89 	bl	2cd20 <CPtrList::Remove(TPtrListElement*)>
   292f8:	e1a01008 	mov	r1, r8
   292fc:	e1a00006 	mov	r0, r6
   29300:	eb00076d 	bl	2b0bc <operator delete(void*, unsigned int)>
   29304:	e1a00004 	mov	r0, r4
   29308:	eb000de6 	bl	2caa8 <CPtrList::GetFirst()>
   2930c:	e2505000 	subs	r5, r0, #0
   29310:	1affffed 	bne	292cc <CTimer::~CTimer()+0x38>
   29314:	e59f3044 	ldr	r3, [pc, #68]	; 29360 <CTimer::~CTimer()+0xcc>
   29318:	e1a00004 	mov	r0, r4
   2931c:	e5835000 	str	r5, [r3]
   29320:	eb000dd5 	bl	2ca7c <CPtrList::~CPtrList()>
   29324:	e1a00009 	mov	r0, r9
   29328:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2932c:	e3a02058 	mov	r2, #88	; 0x58
   29330:	e59f102c 	ldr	r1, [pc, #44]	; 29364 <CTimer::~CTimer()+0xd0>
   29334:	e59f002c 	ldr	r0, [pc, #44]	; 29368 <CTimer::~CTimer()+0xd4>
   29338:	ebffed34 	bl	24810 <assertion_failed>
   2933c:	e3a02059 	mov	r2, #89	; 0x59
   29340:	e59f101c 	ldr	r1, [pc, #28]	; 29364 <CTimer::~CTimer()+0xd0>
   29344:	e59f0020 	ldr	r0, [pc, #32]	; 2936c <CTimer::~CTimer()+0xd8>
   29348:	ebffed30 	bl	24810 <assertion_failed>
   2934c:	e3a02047 	mov	r2, #71	; 0x47
   29350:	e59f100c 	ldr	r1, [pc, #12]	; 29364 <CTimer::~CTimer()+0xd0>
   29354:	e59f0014 	ldr	r0, [pc, #20]	; 29370 <CTimer::~CTimer()+0xdc>
   29358:	ebffed2c 	bl	24810 <assertion_failed>
   2935c:	4b544d43 	.word	0x4b544d43
   29360:	0004e230 	.word	0x0004e230
   29364:	000457d0 	.word	0x000457d0
   29368:	000414ec 	.word	0x000414ec
   2936c:	000457dc 	.word	0x000457dc
   29370:	0003f268 	.word	0x0003f268

00029374 <CTimer::SetTimeZone(int)>:
   29374:	e59f2018 	ldr	r2, [pc, #24]	; 29394 <CTimer::SetTimeZone(int)+0x20>
   29378:	e2813e59 	add	r3, r1, #1424	; 0x590
   2937c:	e283300f 	add	r3, r3, #15
   29380:	e1530002 	cmp	r3, r2
   29384:	95801014 	strls	r1, [r0, #20]
   29388:	93a00001 	movls	r0, #1
   2938c:	83a00000 	movhi	r0, #0
   29390:	e12fff1e 	bx	lr
   29394:	00000b3e 	.word	0x00000b3e

00029398 <CTimer::GetTimeZone() const>:
   29398:	e5900014 	ldr	r0, [r0, #20]
   2939c:	e12fff1e 	bx	lr

000293a0 <CTimer::SetTime(unsigned int, bool)>:
   293a0:	e3520000 	cmp	r2, #0
   293a4:	e92d4070 	push	{r4, r5, r6, lr}
   293a8:	e1a04000 	mov	r4, r0
   293ac:	e1a05001 	mov	r5, r1
   293b0:	1a000004 	bne	293c8 <CTimer::SetTime(unsigned int, bool)+0x28>
   293b4:	e5903014 	ldr	r3, [r0, #20]
   293b8:	e0633203 	rsb	r3, r3, r3, lsl #4
   293bc:	e1b03103 	lsls	r3, r3, #2
   293c0:	4a00000e 	bmi	29400 <CTimer::SetTime(unsigned int, bool)+0x60>
   293c4:	e0855003 	add	r5, r5, r3
   293c8:	e5940010 	ldr	r0, [r4, #16]
   293cc:	e3500000 	cmp	r0, #0
   293d0:	1a000002 	bne	293e0 <CTimer::SetTime(unsigned int, bool)+0x40>
   293d4:	e3a00001 	mov	r0, #1
   293d8:	e584500c 	str	r5, [r4, #12]
   293dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   293e0:	eb000a59 	bl	2bd4c <EnterCritical>
   293e4:	e5943010 	ldr	r3, [r4, #16]
   293e8:	e584500c 	str	r5, [r4, #12]
   293ec:	e3530000 	cmp	r3, #0
   293f0:	0a000007 	beq	29414 <CTimer::SetTime(unsigned int, bool)+0x74>
   293f4:	eb000a7f 	bl	2bdf8 <LeaveCritical>
   293f8:	e3a00001 	mov	r0, #1
   293fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   29400:	e2631000 	rsb	r1, r3, #0
   29404:	e1510005 	cmp	r1, r5
   29408:	daffffed 	ble	293c4 <CTimer::SetTime(unsigned int, bool)+0x24>
   2940c:	e1a00002 	mov	r0, r2
   29410:	e8bd8070 	pop	{r4, r5, r6, pc}
   29414:	e3a00001 	mov	r0, #1
   29418:	e8bd8070 	pop	{r4, r5, r6, pc}

0002941c <CTimer::GetClockTicks()>:
   2941c:	e3a03000 	mov	r3, #0
   29420:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29424:	e59f2008 	ldr	r2, [pc, #8]	; 29434 <CTimer::GetClockTicks()+0x18>
   29428:	e5920004 	ldr	r0, [r2, #4]
   2942c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   29430:	e12fff1e 	bx	lr
   29434:	20003000 	.word	0x20003000

00029438 <CTimer::GetTicks() const>:
   29438:	e5900004 	ldr	r0, [r0, #4]
   2943c:	e12fff1e 	bx	lr

00029440 <CTimer::GetUptime() const>:
   29440:	e5900008 	ldr	r0, [r0, #8]
   29444:	e12fff1e 	bx	lr

00029448 <CTimer::GetTime() const>:
   29448:	e590000c 	ldr	r0, [r0, #12]
   2944c:	e12fff1e 	bx	lr

00029450 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   29450:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29454:	e1a04000 	mov	r4, r0
   29458:	e5900010 	ldr	r0, [r0, #16]
   2945c:	e1a06001 	mov	r6, r1
   29460:	e3500000 	cmp	r0, #0
   29464:	e1a05002 	mov	r5, r2
   29468:	1a000011 	bne	294b4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
   2946c:	e594700c 	ldr	r7, [r4, #12]
   29470:	e5944004 	ldr	r4, [r4, #4]
   29474:	e3560000 	cmp	r6, #0
   29478:	0a000016 	beq	294d8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
   2947c:	e3550000 	cmp	r5, #0
   29480:	e5867000 	str	r7, [r6]
   29484:	0a000017 	beq	294e8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x98>
   29488:	e3a00064 	mov	r0, #100	; 0x64
   2948c:	e59f3064 	ldr	r3, [pc, #100]	; 294f8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa8>
   29490:	e59f1064 	ldr	r1, [pc, #100]	; 294fc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   29494:	e0832493 	umull	r2, r3, r3, r4
   29498:	e1a032a3 	lsr	r3, r3, #5
   2949c:	e0030390 	mul	r3, r0, r3
   294a0:	e0444003 	sub	r4, r4, r3
   294a4:	e0040491 	mul	r4, r1, r4
   294a8:	e3a00001 	mov	r0, #1
   294ac:	e5854000 	str	r4, [r5]
   294b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   294b4:	eb000a24 	bl	2bd4c <EnterCritical>
   294b8:	e5943010 	ldr	r3, [r4, #16]
   294bc:	e594700c 	ldr	r7, [r4, #12]
   294c0:	e3530000 	cmp	r3, #0
   294c4:	e5944004 	ldr	r4, [r4, #4]
   294c8:	0affffe9 	beq	29474 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   294cc:	eb000a49 	bl	2bdf8 <LeaveCritical>
   294d0:	e3560000 	cmp	r6, #0
   294d4:	1affffe8 	bne	2947c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   294d8:	e3a02f41 	mov	r2, #260	; 0x104
   294dc:	e59f101c 	ldr	r1, [pc, #28]	; 29500 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   294e0:	e59f001c 	ldr	r0, [pc, #28]	; 29504 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   294e4:	ebffecc9 	bl	24810 <assertion_failed>
   294e8:	e59f2018 	ldr	r2, [pc, #24]	; 29508 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   294ec:	e59f100c 	ldr	r1, [pc, #12]	; 29500 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   294f0:	e59f0014 	ldr	r0, [pc, #20]	; 2950c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   294f4:	ebffecc5 	bl	24810 <assertion_failed>
   294f8:	51eb851f 	.word	0x51eb851f
   294fc:	00002710 	.word	0x00002710
   29500:	000457d0 	.word	0x000457d0
   29504:	00045804 	.word	0x00045804
   29508:	00000107 	.word	0x00000107
   2950c:	00045814 	.word	0x00045814

00029510 <CTimer::GetUniversalTime() const>:
   29510:	e5903014 	ldr	r3, [r0, #20]
   29514:	e590000c 	ldr	r0, [r0, #12]
   29518:	e0633203 	rsb	r3, r3, r3, lsl #4
   2951c:	e1a03103 	lsl	r3, r3, #2
   29520:	e1530000 	cmp	r3, r0
   29524:	d0400003 	suble	r0, r0, r3
   29528:	c3a00000 	movgt	r0, #0
   2952c:	e12fff1e 	bx	lr

00029530 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   29530:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29534:	e1a04000 	mov	r4, r0
   29538:	e5900010 	ldr	r0, [r0, #16]
   2953c:	e1a08001 	mov	r8, r1
   29540:	e3500000 	cmp	r0, #0
   29544:	e1a06002 	mov	r6, r2
   29548:	1a000019 	bne	295b4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   2954c:	e594500c 	ldr	r5, [r4, #12]
   29550:	e5947004 	ldr	r7, [r4, #4]
   29554:	e5943014 	ldr	r3, [r4, #20]
   29558:	e0633203 	rsb	r3, r3, r3, lsl #4
   2955c:	e1a03103 	lsl	r3, r3, #2
   29560:	e1530005 	cmp	r3, r5
   29564:	ca000010 	bgt	295ac <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
   29568:	e3580000 	cmp	r8, #0
   2956c:	0a00001c 	beq	295e4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb4>
   29570:	e0453003 	sub	r3, r5, r3
   29574:	e3560000 	cmp	r6, #0
   29578:	e5883000 	str	r3, [r8]
   2957c:	0a000014 	beq	295d4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
   29580:	e3a03064 	mov	r3, #100	; 0x64
   29584:	e59f1068 	ldr	r1, [pc, #104]	; 295f4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xc4>
   29588:	e59f2068 	ldr	r2, [pc, #104]	; 295f8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xc8>
   2958c:	e0810791 	umull	r0, r1, r1, r7
   29590:	e1a012a1 	lsr	r1, r1, #5
   29594:	e0030193 	mul	r3, r3, r1
   29598:	e0473003 	sub	r3, r7, r3
   2959c:	e0030392 	mul	r3, r2, r3
   295a0:	e3a00001 	mov	r0, #1
   295a4:	e5863000 	str	r3, [r6]
   295a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   295ac:	e3a00000 	mov	r0, #0
   295b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   295b4:	eb0009e4 	bl	2bd4c <EnterCritical>
   295b8:	e5943010 	ldr	r3, [r4, #16]
   295bc:	e594500c 	ldr	r5, [r4, #12]
   295c0:	e3530000 	cmp	r3, #0
   295c4:	e5947004 	ldr	r7, [r4, #4]
   295c8:	0affffe1 	beq	29554 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   295cc:	eb000a09 	bl	2bdf8 <LeaveCritical>
   295d0:	eaffffdf 	b	29554 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   295d4:	e3a02f4b 	mov	r2, #300	; 0x12c
   295d8:	e59f101c 	ldr	r1, [pc, #28]	; 295fc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   295dc:	e59f001c 	ldr	r0, [pc, #28]	; 29600 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   295e0:	ebffec8a 	bl	24810 <assertion_failed>
   295e4:	e59f2018 	ldr	r2, [pc, #24]	; 29604 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   295e8:	e59f100c 	ldr	r1, [pc, #12]	; 295fc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   295ec:	e59f0014 	ldr	r0, [pc, #20]	; 29608 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   295f0:	ebffec86 	bl	24810 <assertion_failed>
   295f4:	51eb851f 	.word	0x51eb851f
   295f8:	00002710 	.word	0x00002710
   295fc:	000457d0 	.word	0x000457d0
   29600:	00045814 	.word	0x00045814
   29604:	00000129 	.word	0x00000129
   29608:	00045804 	.word	0x00045804

0002960c <CTimer::GetTimeString()>:
   2960c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29610:	e1a05000 	mov	r5, r0
   29614:	e5900010 	ldr	r0, [r0, #16]
   29618:	e24dd014 	sub	sp, sp, #20
   2961c:	e3500000 	cmp	r0, #0
   29620:	1a000065 	bne	297bc <CTimer::GetTimeString()+0x1b0>
   29624:	e595400c 	ldr	r4, [r5, #12]
   29628:	e5959004 	ldr	r9, [r5, #4]
   2962c:	e1940009 	orrs	r0, r4, r9
   29630:	0a00003e 	beq	29730 <CTimer::GetTimeString()+0x124>
   29634:	e59f61a0 	ldr	r6, [pc, #416]	; 297dc <CTimer::GetTimeString()+0x1d0>
   29638:	e59f81a0 	ldr	r8, [pc, #416]	; 297e0 <CTimer::GetTimeString()+0x1d4>
   2963c:	e0873496 	umull	r3, r7, r6, r4
   29640:	e1a072a7 	lsr	r7, r7, #5
   29644:	e0863796 	umull	r3, r6, r6, r7
   29648:	e59f3194 	ldr	r3, [pc, #404]	; 297e4 <CTimer::GetTimeString()+0x1d8>
   2964c:	e0882498 	umull	r2, r8, r8, r4
   29650:	e0832493 	umull	r2, r3, r3, r4
   29654:	e1a062a6 	lsr	r6, r6, #5
   29658:	e0666206 	rsb	r6, r6, r6, lsl #4
   2965c:	e0672207 	rsb	r2, r7, r7, lsl #4
   29660:	e0476106 	sub	r6, r7, r6, lsl #2
   29664:	e3a0a064 	mov	sl, #100	; 0x64
   29668:	e0447102 	sub	r7, r4, r2, lsl #2
   2966c:	e3a0be19 	mov	fp, #400	; 0x190
   29670:	e59f5170 	ldr	r5, [pc, #368]	; 297e8 <CTimer::GetTimeString()+0x1dc>
   29674:	e59fe170 	ldr	lr, [pc, #368]	; 297ec <CTimer::GetTimeString()+0x1e0>
   29678:	e59fc170 	ldr	ip, [pc, #368]	; 297f0 <CTimer::GetTimeString()+0x1e4>
   2967c:	e59f0170 	ldr	r0, [pc, #368]	; 297f4 <CTimer::GetTimeString()+0x1e8>
   29680:	e1a085a8 	lsr	r8, r8, #11
   29684:	e1a04823 	lsr	r4, r3, #16
   29688:	ea00000a 	b	296b8 <CTimer::GetTimeString()+0xac>
   2968c:	e001019b 	mul	r1, fp, r1
   29690:	e0451001 	sub	r1, r5, r1
   29694:	e16f1f11 	clz	r1, r1
   29698:	e1a012a1 	lsr	r1, r1, #5
   2969c:	e3510000 	cmp	r1, #0
   296a0:	01a0300c 	moveq	r3, ip
   296a4:	11a03000 	movne	r3, r0
   296a8:	e1540003 	cmp	r4, r3
   296ac:	3a000021 	bcc	29738 <CTimer::GetTimeString()+0x12c>
   296b0:	e0444003 	sub	r4, r4, r3
   296b4:	e2855001 	add	r5, r5, #1
   296b8:	e081359e 	umull	r3, r1, lr, r5
   296bc:	e1a032a1 	lsr	r3, r1, #5
   296c0:	e003039a 	mul	r3, sl, r3
   296c4:	e1550003 	cmp	r5, r3
   296c8:	e1a013a1 	lsr	r1, r1, #7
   296cc:	0affffee 	beq	2968c <CTimer::GetTimeString()+0x80>
   296d0:	e3150003 	tst	r5, #3
   296d4:	03a01001 	moveq	r1, #1
   296d8:	13a01000 	movne	r1, #0
   296dc:	eaffffee 	b	2969c <CTimer::GetTimeString()+0x90>
   296e0:	e3a03064 	mov	r3, #100	; 0x64
   296e4:	e59fb100 	ldr	fp, [pc, #256]	; 297ec <CTimer::GetTimeString()+0x1e0>
   296e8:	e3a00010 	mov	r0, #16
   296ec:	e08b299b 	umull	r2, fp, fp, r9
   296f0:	e1a0b2ab 	lsr	fp, fp, #5
   296f4:	e00b0b93 	mul	fp, r3, fp
   296f8:	eb000661 	bl	2b084 <operator new(unsigned int)>
   296fc:	e049b00b 	sub	fp, r9, fp
   29700:	e1a09000 	mov	r9, r0
   29704:	ebfff91a 	bl	27b74 <CString::CString()>
   29708:	e59f30e8 	ldr	r3, [pc, #232]	; 297f8 <CTimer::GetTimeString()+0x1ec>
   2970c:	e1550003 	cmp	r5, r3
   29710:	8a000018 	bhi	29778 <CTimer::GetTimeString()+0x16c>
   29714:	e1a00009 	mov	r0, r9
   29718:	e88d0880 	stm	sp, {r7, fp}
   2971c:	e1a03006 	mov	r3, r6
   29720:	e1a02008 	mov	r2, r8
   29724:	e59f10d0 	ldr	r1, [pc, #208]	; 297fc <CTimer::GetTimeString()+0x1f0>
   29728:	ebfffe54 	bl	29080 <CString::Format(char const*, ...)>
   2972c:	e1a00009 	mov	r0, r9
   29730:	e28dd014 	add	sp, sp, #20
   29734:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29738:	e3a0a000 	mov	sl, #0
   2973c:	e3a0001d 	mov	r0, #29
   29740:	e59f20b8 	ldr	r2, [pc, #184]	; 29800 <CTimer::GetTimeString()+0x1f4>
   29744:	ea000004 	b	2975c <CTimer::GetTimeString()+0x150>
   29748:	e1a03000 	mov	r3, r0
   2974c:	e1540003 	cmp	r4, r3
   29750:	3affffe2 	bcc	296e0 <CTimer::GetTimeString()+0xd4>
   29754:	e0444003 	sub	r4, r4, r3
   29758:	e28aa001 	add	sl, sl, #1
   2975c:	e35a0001 	cmp	sl, #1
   29760:	13a03000 	movne	r3, #0
   29764:	02013001 	andeq	r3, r1, #1
   29768:	e3530000 	cmp	r3, #0
   2976c:	1afffff5 	bne	29748 <CTimer::GetTimeString()+0x13c>
   29770:	e792310a 	ldr	r3, [r2, sl, lsl #2]
   29774:	eafffff4 	b	2974c <CTimer::GetTimeString()+0x140>
   29778:	e59f3084 	ldr	r3, [pc, #132]	; 29804 <CTimer::GetTimeString()+0x1f8>
   2977c:	e58db00c 	str	fp, [sp, #12]
   29780:	e0832893 	umull	r2, r3, r3, r8
   29784:	e1a03223 	lsr	r3, r3, #4
   29788:	e0833083 	add	r3, r3, r3, lsl #1
   2978c:	e59f2074 	ldr	r2, [pc, #116]	; 29808 <CTimer::GetTimeString()+0x1fc>
   29790:	e0488183 	sub	r8, r8, r3, lsl #3
   29794:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   29798:	e1a00009 	mov	r0, r9
   2979c:	e98d00c0 	stmib	sp, {r6, r7}
   297a0:	e2843001 	add	r3, r4, #1
   297a4:	e58d8000 	str	r8, [sp]
   297a8:	e59f105c 	ldr	r1, [pc, #92]	; 2980c <CTimer::GetTimeString()+0x200>
   297ac:	ebfffe33 	bl	29080 <CString::Format(char const*, ...)>
   297b0:	e1a00009 	mov	r0, r9
   297b4:	e28dd014 	add	sp, sp, #20
   297b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   297bc:	eb000962 	bl	2bd4c <EnterCritical>
   297c0:	e5953010 	ldr	r3, [r5, #16]
   297c4:	e595400c 	ldr	r4, [r5, #12]
   297c8:	e3530000 	cmp	r3, #0
   297cc:	e5959004 	ldr	r9, [r5, #4]
   297d0:	0affff95 	beq	2962c <CTimer::GetTimeString()+0x20>
   297d4:	eb000987 	bl	2bdf8 <LeaveCritical>
   297d8:	eaffff93 	b	2962c <CTimer::GetTimeString()+0x20>
   297dc:	88888889 	.word	0x88888889
   297e0:	91a2b3c5 	.word	0x91a2b3c5
   297e4:	c22e4507 	.word	0xc22e4507
   297e8:	000007b2 	.word	0x000007b2
   297ec:	51eb851f 	.word	0x51eb851f
   297f0:	0000016d 	.word	0x0000016d
   297f4:	0000016e 	.word	0x0000016e
   297f8:	000007b7 	.word	0x000007b7
   297fc:	00045844 	.word	0x00045844
   29800:	00045798 	.word	0x00045798
   29804:	aaaaaaab 	.word	0xaaaaaaab
   29808:	00048318 	.word	0x00048318
   2980c:	00045828 	.word	0x00045828

00029810 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   29810:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29814:	e1a09000 	mov	r9, r0
   29818:	e1a04002 	mov	r4, r2
   2981c:	e1a05001 	mov	r5, r1
   29820:	e3a00014 	mov	r0, #20
   29824:	e1a08003 	mov	r8, r3
   29828:	eb000615 	bl	2b084 <operator new(unsigned int)>
   2982c:	e5996004 	ldr	r6, [r9, #4]
   29830:	e3540000 	cmp	r4, #0
   29834:	e0866005 	add	r6, r6, r5
   29838:	0a000033 	beq	2990c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
   2983c:	e1a07000 	mov	r7, r0
   29840:	e599001c 	ldr	r0, [r9, #28]
   29844:	e59f30e4 	ldr	r3, [pc, #228]	; 29930 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
   29848:	e59d2020 	ldr	r2, [sp, #32]
   2984c:	e3500000 	cmp	r0, #0
   29850:	e9870150 	stmib	r7, {r4, r6, r8}
   29854:	e5872010 	str	r2, [r7, #16]
   29858:	e5873000 	str	r3, [r7]
   2985c:	1a000020 	bne	298e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd4>
   29860:	e2895018 	add	r5, r9, #24
   29864:	e1a00005 	mov	r0, r5
   29868:	eb000c8e 	bl	2caa8 <CPtrList::GetFirst()>
   2986c:	e2504000 	subs	r4, r0, #0
   29870:	0a000029 	beq	2991c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   29874:	e59f80b4 	ldr	r8, [pc, #180]	; 29930 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
   29878:	e1a01004 	mov	r1, r4
   2987c:	e1a00005 	mov	r0, r5
   29880:	eb000c9f 	bl	2cb04 <CPtrList::GetPtr(TPtrListElement*)>
   29884:	e3500000 	cmp	r0, #0
   29888:	0a00000d 	beq	298c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xb4>
   2988c:	e5903000 	ldr	r3, [r0]
   29890:	e1530008 	cmp	r3, r8
   29894:	1a00000e 	bne	298d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc4>
   29898:	e5903008 	ldr	r3, [r0, #8]
   2989c:	e1a01004 	mov	r1, r4
   298a0:	e0433006 	sub	r3, r3, r6
   298a4:	e3530000 	cmp	r3, #0
   298a8:	e1a00005 	mov	r0, r5
   298ac:	ca00000e 	bgt	298ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
   298b0:	eb000c7e 	bl	2cab0 <CPtrList::GetNext(TPtrListElement*)>
   298b4:	e3500000 	cmp	r0, #0
   298b8:	0a000017 	beq	2991c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   298bc:	e1a04000 	mov	r4, r0
   298c0:	eaffffec 	b	29878 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x68>
   298c4:	e59f2068 	ldr	r2, [pc, #104]	; 29934 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x124>
   298c8:	e59f1068 	ldr	r1, [pc, #104]	; 29938 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   298cc:	e59f0068 	ldr	r0, [pc, #104]	; 2993c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   298d0:	ebffebce 	bl	24810 <assertion_failed>
   298d4:	e3a02f65 	mov	r2, #404	; 0x194
   298d8:	e59f1058 	ldr	r1, [pc, #88]	; 29938 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   298dc:	e59f005c 	ldr	r0, [pc, #92]	; 29940 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
   298e0:	ebffebca 	bl	24810 <assertion_failed>
   298e4:	eb000918 	bl	2bd4c <EnterCritical>
   298e8:	eaffffdc 	b	29860 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x50>
   298ec:	e1a02007 	mov	r2, r7
   298f0:	eb000c98 	bl	2cb58 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   298f4:	e599301c 	ldr	r3, [r9, #28]
   298f8:	e3530000 	cmp	r3, #0
   298fc:	0a000000 	beq	29904 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf4>
   29900:	eb00093c 	bl	2bdf8 <LeaveCritical>
   29904:	e1a00007 	mov	r0, r7
   29908:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2990c:	e59f2030 	ldr	r2, [pc, #48]	; 29944 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   29910:	e59f1020 	ldr	r1, [pc, #32]	; 29938 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   29914:	e59f002c 	ldr	r0, [pc, #44]	; 29948 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
   29918:	ebffebbc 	bl	24810 <assertion_failed>
   2991c:	e1a01004 	mov	r1, r4
   29920:	e1a00005 	mov	r0, r5
   29924:	e1a02007 	mov	r2, r7
   29928:	eb000cc3 	bl	2cc3c <CPtrList::InsertAfter(TPtrListElement*, void*)>
   2992c:	eafffff0 	b	298f4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe4>
   29930:	4b544d43 	.word	0x4b544d43
   29934:	00000193 	.word	0x00000193
   29938:	000457d0 	.word	0x000457d0
   2993c:	00045858 	.word	0x00045858
   29940:	00045868 	.word	0x00045868
   29944:	00000183 	.word	0x00000183
   29948:	00045cc4 	.word	0x00045cc4

0002994c <CTimer::CancelKernelTimer(unsigned int)>:
   2994c:	e92d4070 	push	{r4, r5, r6, lr}
   29950:	e2514000 	subs	r4, r1, #0
   29954:	0a00001b 	beq	299c8 <CTimer::CancelKernelTimer(unsigned int)+0x7c>
   29958:	e1a05000 	mov	r5, r0
   2995c:	e590001c 	ldr	r0, [r0, #28]
   29960:	e3500000 	cmp	r0, #0
   29964:	1a000015 	bne	299c0 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   29968:	e2856018 	add	r6, r5, #24
   2996c:	e1a01004 	mov	r1, r4
   29970:	e1a00006 	mov	r0, r6
   29974:	eb000d30 	bl	2ce3c <CPtrList::Find(void*)>
   29978:	e2501000 	subs	r1, r0, #0
   2997c:	0a00000a 	beq	299ac <CTimer::CancelKernelTimer(unsigned int)+0x60>
   29980:	e59f3060 	ldr	r3, [pc, #96]	; 299e8 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
   29984:	e5942000 	ldr	r2, [r4]
   29988:	e1520003 	cmp	r2, r3
   2998c:	1a000011 	bne	299d8 <CTimer::CancelKernelTimer(unsigned int)+0x8c>
   29990:	e1a00006 	mov	r0, r6
   29994:	eb000ce1 	bl	2cd20 <CPtrList::Remove(TPtrListElement*)>
   29998:	e3a03000 	mov	r3, #0
   2999c:	e1a00004 	mov	r0, r4
   299a0:	e5843000 	str	r3, [r4]
   299a4:	e3a01014 	mov	r1, #20
   299a8:	eb0005c3 	bl	2b0bc <operator delete(void*, unsigned int)>
   299ac:	e595301c 	ldr	r3, [r5, #28]
   299b0:	e3530000 	cmp	r3, #0
   299b4:	08bd8070 	popeq	{r4, r5, r6, pc}
   299b8:	e8bd4070 	pop	{r4, r5, r6, lr}
   299bc:	ea00090d 	b	2bdf8 <LeaveCritical>
   299c0:	eb0008e1 	bl	2bd4c <EnterCritical>
   299c4:	eaffffe7 	b	29968 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   299c8:	e3a02e1b 	mov	r2, #432	; 0x1b0
   299cc:	e59f1018 	ldr	r1, [pc, #24]	; 299ec <CTimer::CancelKernelTimer(unsigned int)+0xa0>
   299d0:	e59f0018 	ldr	r0, [pc, #24]	; 299f0 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   299d4:	ebffeb8d 	bl	24810 <assertion_failed>
   299d8:	e59f2014 	ldr	r2, [pc, #20]	; 299f4 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
   299dc:	e59f1008 	ldr	r1, [pc, #8]	; 299ec <CTimer::CancelKernelTimer(unsigned int)+0xa0>
   299e0:	e59f0010 	ldr	r0, [pc, #16]	; 299f8 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   299e4:	ebffeb89 	bl	24810 <assertion_failed>
   299e8:	4b544d43 	.word	0x4b544d43
   299ec:	000457d0 	.word	0x000457d0
   299f0:	000414ec 	.word	0x000414ec
   299f4:	000001b7 	.word	0x000001b7
   299f8:	000457dc 	.word	0x000457dc

000299fc <CTimer::PollKernelTimers()>:
   299fc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29a00:	e1a06000 	mov	r6, r0
   29a04:	e590001c 	ldr	r0, [r0, #28]
   29a08:	e3500000 	cmp	r0, #0
   29a0c:	1a000045 	bne	29b28 <CTimer::PollKernelTimers()+0x12c>
   29a10:	e2867018 	add	r7, r6, #24
   29a14:	e1a00007 	mov	r0, r7
   29a18:	eb000c22 	bl	2caa8 <CPtrList::GetFirst()>
   29a1c:	e2505000 	subs	r5, r0, #0
   29a20:	0a000029 	beq	29acc <CTimer::PollKernelTimers()+0xd0>
   29a24:	e3a0a000 	mov	sl, #0
   29a28:	e3a09014 	mov	r9, #20
   29a2c:	e59f80fc 	ldr	r8, [pc, #252]	; 29b30 <CTimer::PollKernelTimers()+0x134>
   29a30:	e1a01005 	mov	r1, r5
   29a34:	e1a00007 	mov	r0, r7
   29a38:	eb000c31 	bl	2cb04 <CPtrList::GetPtr(TPtrListElement*)>
   29a3c:	e2504000 	subs	r4, r0, #0
   29a40:	0a000030 	beq	29b08 <CTimer::PollKernelTimers()+0x10c>
   29a44:	e5943000 	ldr	r3, [r4]
   29a48:	e1530008 	cmp	r3, r8
   29a4c:	1a000031 	bne	29b18 <CTimer::PollKernelTimers()+0x11c>
   29a50:	e5962004 	ldr	r2, [r6, #4]
   29a54:	e5943008 	ldr	r3, [r4, #8]
   29a58:	e0433002 	sub	r3, r3, r2
   29a5c:	e3530000 	cmp	r3, #0
   29a60:	ca000019 	bgt	29acc <CTimer::PollKernelTimers()+0xd0>
   29a64:	e1a01005 	mov	r1, r5
   29a68:	e1a00007 	mov	r0, r7
   29a6c:	eb000c0f 	bl	2cab0 <CPtrList::GetNext(TPtrListElement*)>
   29a70:	e1a01005 	mov	r1, r5
   29a74:	e1a0b000 	mov	fp, r0
   29a78:	e1a00007 	mov	r0, r7
   29a7c:	eb000ca7 	bl	2cd20 <CPtrList::Remove(TPtrListElement*)>
   29a80:	e596301c 	ldr	r3, [r6, #28]
   29a84:	e3530000 	cmp	r3, #0
   29a88:	1a000014 	bne	29ae0 <CTimer::PollKernelTimers()+0xe4>
   29a8c:	e5943004 	ldr	r3, [r4, #4]
   29a90:	e3530000 	cmp	r3, #0
   29a94:	0a000015 	beq	29af0 <CTimer::PollKernelTimers()+0xf4>
   29a98:	e5942010 	ldr	r2, [r4, #16]
   29a9c:	e594100c 	ldr	r1, [r4, #12]
   29aa0:	e1a00004 	mov	r0, r4
   29aa4:	e12fff33 	blx	r3
   29aa8:	e1a00004 	mov	r0, r4
   29aac:	e584a000 	str	sl, [r4]
   29ab0:	e1a01009 	mov	r1, r9
   29ab4:	eb000580 	bl	2b0bc <operator delete(void*, unsigned int)>
   29ab8:	e596001c 	ldr	r0, [r6, #28]
   29abc:	e3500000 	cmp	r0, #0
   29ac0:	1a00000e 	bne	29b00 <CTimer::PollKernelTimers()+0x104>
   29ac4:	e25b5000 	subs	r5, fp, #0
   29ac8:	1affffd8 	bne	29a30 <CTimer::PollKernelTimers()+0x34>
   29acc:	e596301c 	ldr	r3, [r6, #28]
   29ad0:	e3530000 	cmp	r3, #0
   29ad4:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ad8:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29adc:	ea0008c5 	b	2bdf8 <LeaveCritical>
   29ae0:	eb0008c4 	bl	2bdf8 <LeaveCritical>
   29ae4:	e5943004 	ldr	r3, [r4, #4]
   29ae8:	e3530000 	cmp	r3, #0
   29aec:	1affffe9 	bne	29a98 <CTimer::PollKernelTimers()+0x9c>
   29af0:	e59f203c 	ldr	r2, [pc, #60]	; 29b34 <CTimer::PollKernelTimers()+0x138>
   29af4:	e59f103c 	ldr	r1, [pc, #60]	; 29b38 <CTimer::PollKernelTimers()+0x13c>
   29af8:	e59f003c 	ldr	r0, [pc, #60]	; 29b3c <CTimer::PollKernelTimers()+0x140>
   29afc:	ebffeb43 	bl	24810 <assertion_failed>
   29b00:	eb000891 	bl	2bd4c <EnterCritical>
   29b04:	eaffffee 	b	29ac4 <CTimer::PollKernelTimers()+0xc8>
   29b08:	e3a02f73 	mov	r2, #460	; 0x1cc
   29b0c:	e59f1024 	ldr	r1, [pc, #36]	; 29b38 <CTimer::PollKernelTimers()+0x13c>
   29b10:	e59f0028 	ldr	r0, [pc, #40]	; 29b40 <CTimer::PollKernelTimers()+0x144>
   29b14:	ebffeb3d 	bl	24810 <assertion_failed>
   29b18:	e59f2024 	ldr	r2, [pc, #36]	; 29b44 <CTimer::PollKernelTimers()+0x148>
   29b1c:	e59f1014 	ldr	r1, [pc, #20]	; 29b38 <CTimer::PollKernelTimers()+0x13c>
   29b20:	e59f0020 	ldr	r0, [pc, #32]	; 29b48 <CTimer::PollKernelTimers()+0x14c>
   29b24:	ebffeb39 	bl	24810 <assertion_failed>
   29b28:	eb000887 	bl	2bd4c <EnterCritical>
   29b2c:	eaffffb7 	b	29a10 <CTimer::PollKernelTimers()+0x14>
   29b30:	4b544d43 	.word	0x4b544d43
   29b34:	000001db 	.word	0x000001db
   29b38:	000457d0 	.word	0x000457d0
   29b3c:	00045cc4 	.word	0x00045cc4
   29b40:	000414ec 	.word	0x000414ec
   29b44:	000001cd 	.word	0x000001cd
   29b48:	000457dc 	.word	0x000457dc

00029b4c <CTimer::InterruptHandler()>:
   29b4c:	e92d4070 	push	{r4, r5, r6, lr}
   29b50:	e3a03000 	mov	r3, #0
   29b54:	e1a04000 	mov	r4, r0
   29b58:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29b5c:	e59f20fc 	ldr	r2, [pc, #252]	; 29c60 <CTimer::InterruptHandler()+0x114>
   29b60:	e5923018 	ldr	r3, [r2, #24]
   29b64:	e2833c27 	add	r3, r3, #9984	; 0x2700
   29b68:	e2833010 	add	r3, r3, #16
   29b6c:	e5823018 	str	r3, [r2, #24]
   29b70:	e5921004 	ldr	r1, [r2, #4]
   29b74:	e1530001 	cmp	r3, r1
   29b78:	e3a01008 	mov	r1, #8
   29b7c:	35923004 	ldrcc	r3, [r2, #4]
   29b80:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   29b84:	32833010 	addcc	r3, r3, #16
   29b88:	35823018 	strcc	r3, [r2, #24]
   29b8c:	e59f20cc 	ldr	r2, [pc, #204]	; 29c60 <CTimer::InterruptHandler()+0x114>
   29b90:	e3a03000 	mov	r3, #0
   29b94:	e5821000 	str	r1, [r2]
   29b98:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   29b9c:	e5900010 	ldr	r0, [r0, #16]
   29ba0:	e1500003 	cmp	r0, r3
   29ba4:	1a000017 	bne	29c08 <CTimer::InterruptHandler()+0xbc>
   29ba8:	e3a01064 	mov	r1, #100	; 0x64
   29bac:	e5942004 	ldr	r2, [r4, #4]
   29bb0:	e59f30ac 	ldr	r3, [pc, #172]	; 29c64 <CTimer::InterruptHandler()+0x118>
   29bb4:	e2822001 	add	r2, r2, #1
   29bb8:	e0830293 	umull	r0, r3, r3, r2
   29bbc:	e1a032a3 	lsr	r3, r3, #5
   29bc0:	e0030391 	mul	r3, r1, r3
   29bc4:	e0523003 	subs	r3, r2, r3
   29bc8:	e5842004 	str	r2, [r4, #4]
   29bcc:	0a000019 	beq	29c38 <CTimer::InterruptHandler()+0xec>
   29bd0:	e1a00004 	mov	r0, r4
   29bd4:	ebffff88 	bl	299fc <CTimer::PollKernelTimers()>
   29bd8:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   29bdc:	e3530000 	cmp	r3, #0
   29be0:	08bd8070 	popeq	{r4, r5, r6, pc}
   29be4:	e3a05000 	mov	r5, #0
   29be8:	e2846028 	add	r6, r4, #40	; 0x28
   29bec:	e4963004 	ldr	r3, [r6], #4
   29bf0:	e12fff33 	blx	r3
   29bf4:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   29bf8:	e2855001 	add	r5, r5, #1
   29bfc:	e1530005 	cmp	r3, r5
   29c00:	8afffff9 	bhi	29bec <CTimer::InterruptHandler()+0xa0>
   29c04:	e8bd8070 	pop	{r4, r5, r6, pc}
   29c08:	eb00084f 	bl	2bd4c <EnterCritical>
   29c0c:	e3a01064 	mov	r1, #100	; 0x64
   29c10:	e5943004 	ldr	r3, [r4, #4]
   29c14:	e59f2048 	ldr	r2, [pc, #72]	; 29c64 <CTimer::InterruptHandler()+0x118>
   29c18:	e2833001 	add	r3, r3, #1
   29c1c:	e0820392 	umull	r0, r2, r2, r3
   29c20:	e1a022a2 	lsr	r2, r2, #5
   29c24:	e0020291 	mul	r2, r1, r2
   29c28:	e1530002 	cmp	r3, r2
   29c2c:	e5843004 	str	r3, [r4, #4]
   29c30:	e5943010 	ldr	r3, [r4, #16]
   29c34:	1a000005 	bne	29c50 <CTimer::InterruptHandler()+0x104>
   29c38:	e5942008 	ldr	r2, [r4, #8]
   29c3c:	e2822001 	add	r2, r2, #1
   29c40:	e5842008 	str	r2, [r4, #8]
   29c44:	e594200c 	ldr	r2, [r4, #12]
   29c48:	e2822001 	add	r2, r2, #1
   29c4c:	e584200c 	str	r2, [r4, #12]
   29c50:	e3530000 	cmp	r3, #0
   29c54:	0affffdd 	beq	29bd0 <CTimer::InterruptHandler()+0x84>
   29c58:	eb000866 	bl	2bdf8 <LeaveCritical>
   29c5c:	eaffffdb 	b	29bd0 <CTimer::InterruptHandler()+0x84>
   29c60:	20003000 	.word	0x20003000
   29c64:	51eb851f 	.word	0x51eb851f

00029c68 <CTimer::InterruptHandler(void*)>:
   29c68:	e3500000 	cmp	r0, #0
   29c6c:	0a000000 	beq	29c74 <CTimer::InterruptHandler(void*)+0xc>
   29c70:	eaffffb5 	b	29b4c <CTimer::InterruptHandler()>
   29c74:	e92d4010 	push	{r4, lr}
   29c78:	e59f2008 	ldr	r2, [pc, #8]	; 29c88 <CTimer::InterruptHandler(void*)+0x20>
   29c7c:	e59f1008 	ldr	r1, [pc, #8]	; 29c8c <CTimer::InterruptHandler(void*)+0x24>
   29c80:	e59f0008 	ldr	r0, [pc, #8]	; 29c90 <CTimer::InterruptHandler(void*)+0x28>
   29c84:	ebffeae1 	bl	24810 <assertion_failed>
   29c88:	00000223 	.word	0x00000223
   29c8c:	000457d0 	.word	0x000457d0
   29c90:	0003f230 	.word	0x0003f230

00029c94 <CTimer::TuneMsDelay()>:
   29c94:	e92d4070 	push	{r4, r5, r6, lr}
   29c98:	e1a05000 	mov	r5, r0
   29c9c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   29ca0:	e5953020 	ldr	r3, [r5, #32]
   29ca4:	e24dd008 	sub	sp, sp, #8
   29ca8:	e0000390 	mul	r0, r0, r3
   29cac:	e5954004 	ldr	r4, [r5, #4]
   29cb0:	eb000a9e 	bl	2c730 <DelayLoop>
   29cb4:	e5951004 	ldr	r1, [r5, #4]
   29cb8:	e59f0068 	ldr	r0, [pc, #104]	; 29d28 <CTimer::TuneMsDelay()+0x94>
   29cbc:	e0411004 	sub	r1, r1, r4
   29cc0:	eb005023 	bl	3dd54 <__aeabi_uidiv>
   29cc4:	e5953020 	ldr	r3, [r5, #32]
   29cc8:	e59f405c 	ldr	r4, [pc, #92]	; 29d2c <CTimer::TuneMsDelay()+0x98>
   29ccc:	e0030093 	mul	r3, r3, r0
   29cd0:	e0832394 	umull	r2, r3, r4, r3
   29cd4:	e59f1054 	ldr	r1, [pc, #84]	; 29d30 <CTimer::TuneMsDelay()+0x9c>
   29cd8:	e1a032a3 	lsr	r3, r3, #5
   29cdc:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   29ce0:	e0821291 	umull	r1, r2, r1, r2
   29ce4:	e1a06000 	mov	r6, r0
   29ce8:	e1a02322 	lsr	r2, r2, #6
   29cec:	e5852024 	str	r2, [r5, #36]	; 0x24
   29cf0:	e5853020 	str	r3, [r5, #32]
   29cf4:	ebfff3b8 	bl	26bdc <CLogger::Get()>
   29cf8:	e3a03064 	mov	r3, #100	; 0x64
   29cfc:	e0842694 	umull	r2, r4, r4, r6
   29d00:	e1a042a4 	lsr	r4, r4, #5
   29d04:	e0030493 	mul	r3, r3, r4
   29d08:	e0466003 	sub	r6, r6, r3
   29d0c:	e88d0050 	stm	sp, {r4, r6}
   29d10:	e59f301c 	ldr	r3, [pc, #28]	; 29d34 <CTimer::TuneMsDelay()+0xa0>
   29d14:	e3a02003 	mov	r2, #3
   29d18:	e59f1018 	ldr	r1, [pc, #24]	; 29d38 <CTimer::TuneMsDelay()+0xa4>
   29d1c:	ebfff2eb 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29d20:	e28dd008 	add	sp, sp, #8
   29d24:	e8bd8070 	pop	{r4, r5, r6, pc}
   29d28:	00002710 	.word	0x00002710
   29d2c:	51eb851f 	.word	0x51eb851f
   29d30:	10624dd3 	.word	0x10624dd3
   29d34:	00045890 	.word	0x00045890
   29d38:	000457c8 	.word	0x000457c8

00029d3c <CTimer::Initialize()>:
   29d3c:	e92d4070 	push	{r4, r5, r6, lr}
   29d40:	e1a04000 	mov	r4, r0
   29d44:	e5900000 	ldr	r0, [r0]
   29d48:	e3500000 	cmp	r0, #0
   29d4c:	0a000011 	beq	29d98 <CTimer::Initialize()+0x5c>
   29d50:	e1a03004 	mov	r3, r4
   29d54:	e59f204c 	ldr	r2, [pc, #76]	; 29da8 <CTimer::Initialize()+0x6c>
   29d58:	e3a01003 	mov	r1, #3
   29d5c:	eb0008fb 	bl	2c150 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   29d60:	e3a05000 	mov	r5, #0
   29d64:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   29d68:	e59f203c 	ldr	r2, [pc, #60]	; 29dac <CTimer::Initialize()+0x70>
   29d6c:	e59f303c 	ldr	r3, [pc, #60]	; 29db0 <CTimer::Initialize()+0x74>
   29d70:	e1a00004 	mov	r0, r4
   29d74:	e5823004 	str	r3, [r2, #4]
   29d78:	e5923004 	ldr	r3, [r2, #4]
   29d7c:	e2833c27 	add	r3, r3, #9984	; 0x2700
   29d80:	e2833010 	add	r3, r3, #16
   29d84:	e5823018 	str	r3, [r2, #24]
   29d88:	ebffffc1 	bl	29c94 <CTimer::TuneMsDelay()>
   29d8c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   29d90:	e3a00001 	mov	r0, #1
   29d94:	e8bd8070 	pop	{r4, r5, r6, pc}
   29d98:	e3a02065 	mov	r2, #101	; 0x65
   29d9c:	e59f1010 	ldr	r1, [pc, #16]	; 29db4 <CTimer::Initialize()+0x78>
   29da0:	e59f0010 	ldr	r0, [pc, #16]	; 29db8 <CTimer::Initialize()+0x7c>
   29da4:	ebffea99 	bl	24810 <assertion_failed>
   29da8:	00029c68 	.word	0x00029c68
   29dac:	20003000 	.word	0x20003000
   29db0:	fe363c80 	.word	0xfe363c80
   29db4:	000457d0 	.word	0x000457d0
   29db8:	0003f268 	.word	0x0003f268

00029dbc <CTimer::RegisterPeriodicHandler(void (*)())>:
   29dbc:	e3510000 	cmp	r1, #0
   29dc0:	e92d4010 	push	{r4, lr}
   29dc4:	0a00000b 	beq	29df8 <CTimer::RegisterPeriodicHandler(void (*)())+0x3c>
   29dc8:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29dcc:	e3530003 	cmp	r3, #3
   29dd0:	8a00000c 	bhi	29e08 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   29dd4:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29dd8:	e3a02000 	mov	r2, #0
   29ddc:	e283300a 	add	r3, r3, #10
   29de0:	e7801103 	str	r1, [r0, r3, lsl #2]
   29de4:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   29de8:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29dec:	e2833001 	add	r3, r3, #1
   29df0:	e5803038 	str	r3, [r0, #56]	; 0x38
   29df4:	e8bd8010 	pop	{r4, pc}
   29df8:	e59f2018 	ldr	r2, [pc, #24]	; 29e18 <CTimer::RegisterPeriodicHandler(void (*)())+0x5c>
   29dfc:	e59f1018 	ldr	r1, [pc, #24]	; 29e1c <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   29e00:	e59f0018 	ldr	r0, [pc, #24]	; 29e20 <CTimer::RegisterPeriodicHandler(void (*)())+0x64>
   29e04:	ebffea81 	bl	24810 <assertion_failed>
   29e08:	e59f2014 	ldr	r2, [pc, #20]	; 29e24 <CTimer::RegisterPeriodicHandler(void (*)())+0x68>
   29e0c:	e59f1008 	ldr	r1, [pc, #8]	; 29e1c <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   29e10:	e59f0010 	ldr	r0, [pc, #16]	; 29e28 <CTimer::RegisterPeriodicHandler(void (*)())+0x6c>
   29e14:	ebffea7d 	bl	24810 <assertion_failed>
   29e18:	00000239 	.word	0x00000239
   29e1c:	000457d0 	.word	0x000457d0
   29e20:	00045cc4 	.word	0x00045cc4
   29e24:	0000023b 	.word	0x0000023b
   29e28:	000458a8 	.word	0x000458a8

00029e2c <CTimer::SimpleMsDelay(unsigned int)>:
   29e2c:	e3500000 	cmp	r0, #0
   29e30:	012fff1e 	bxeq	lr
   29e34:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   29e38:	e0000093 	mul	r0, r3, r0
   29e3c:	e3500000 	cmp	r0, #0
   29e40:	012fff1e 	bxeq	lr
   29e44:	eafffce3 	b	291d8 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>

00029e48 <CTimer::SimpleusDelay(unsigned int)>:
   29e48:	e3500000 	cmp	r0, #0
   29e4c:	012fff1e 	bxeq	lr
   29e50:	eafffce0 	b	291d8 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>

00029e54 <CTimer::IsLeapYear(unsigned int)>:
   29e54:	e3a02064 	mov	r2, #100	; 0x64
   29e58:	e59f303c 	ldr	r3, [pc, #60]	; 29e9c <CTimer::IsLeapYear(unsigned int)+0x48>
   29e5c:	e0831093 	umull	r1, r3, r3, r0
   29e60:	e1a012a3 	lsr	r1, r3, #5
   29e64:	e0020192 	mul	r2, r2, r1
   29e68:	e1500002 	cmp	r0, r2
   29e6c:	0a000003 	beq	29e80 <CTimer::IsLeapYear(unsigned int)+0x2c>
   29e70:	e3100003 	tst	r0, #3
   29e74:	03a00001 	moveq	r0, #1
   29e78:	13a00000 	movne	r0, #0
   29e7c:	e12fff1e 	bx	lr
   29e80:	e3a02e19 	mov	r2, #400	; 0x190
   29e84:	e1a033a3 	lsr	r3, r3, #7
   29e88:	e0030392 	mul	r3, r2, r3
   29e8c:	e0400003 	sub	r0, r0, r3
   29e90:	e16f0f10 	clz	r0, r0
   29e94:	e1a002a0 	lsr	r0, r0, #5
   29e98:	e12fff1e 	bx	lr
   29e9c:	51eb851f 	.word	0x51eb851f

00029ea0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   29ea0:	e3500001 	cmp	r0, #1
   29ea4:	0a000002 	beq	29eb4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   29ea8:	e59f3058 	ldr	r3, [pc, #88]	; 29f08 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
   29eac:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   29eb0:	e12fff1e 	bx	lr
   29eb4:	e3a02064 	mov	r2, #100	; 0x64
   29eb8:	e59f304c 	ldr	r3, [pc, #76]	; 29f0c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
   29ebc:	e083c193 	umull	ip, r3, r3, r1
   29ec0:	e1a0c2a3 	lsr	ip, r3, #5
   29ec4:	e0020c92 	mul	r2, r2, ip
   29ec8:	e1510002 	cmp	r1, r2
   29ecc:	0a000006 	beq	29eec <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
   29ed0:	e3110003 	tst	r1, #3
   29ed4:	03a01001 	moveq	r1, #1
   29ed8:	13a01000 	movne	r1, #0
   29edc:	e3510000 	cmp	r1, #0
   29ee0:	0afffff0 	beq	29ea8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   29ee4:	e3a0001d 	mov	r0, #29
   29ee8:	e12fff1e 	bx	lr
   29eec:	e3a02e19 	mov	r2, #400	; 0x190
   29ef0:	e1a033a3 	lsr	r3, r3, #7
   29ef4:	e0030392 	mul	r3, r2, r3
   29ef8:	e0411003 	sub	r1, r1, r3
   29efc:	e16f1f11 	clz	r1, r1
   29f00:	e1a012a1 	lsr	r1, r1, #5
   29f04:	eafffff4 	b	29edc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
   29f08:	00045798 	.word	0x00045798
   29f0c:	51eb851f 	.word	0x51eb851f

00029f10 <CTimer::Get()>:
   29f10:	e59f3020 	ldr	r3, [pc, #32]	; 29f38 <CTimer::Get()+0x28>
   29f14:	e5930000 	ldr	r0, [r3]
   29f18:	e3500000 	cmp	r0, #0
   29f1c:	0a000000 	beq	29f24 <CTimer::Get()+0x14>
   29f20:	e12fff1e 	bx	lr
   29f24:	e92d4010 	push	{r4, lr}
   29f28:	e3a02f9f 	mov	r2, #636	; 0x27c
   29f2c:	e59f1008 	ldr	r1, [pc, #8]	; 29f3c <CTimer::Get()+0x2c>
   29f30:	e59f0008 	ldr	r0, [pc, #8]	; 29f40 <CTimer::Get()+0x30>
   29f34:	ebffea35 	bl	24810 <assertion_failed>
   29f38:	0004e230 	.word	0x0004e230
   29f3c:	000457d0 	.word	0x000457d0
   29f40:	000439ec 	.word	0x000439ec

00029f44 <memset>:
   29f44:	e3100003 	tst	r0, #3
   29f48:	03a03001 	moveq	r3, #1
   29f4c:	13a03000 	movne	r3, #0
   29f50:	e352000f 	cmp	r2, #15
   29f54:	93a03000 	movls	r3, #0
   29f58:	82033001 	andhi	r3, r3, #1
   29f5c:	e3530000 	cmp	r3, #0
   29f60:	0a000019 	beq	29fcc <memset+0x88>
   29f64:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   29f68:	e1a0e002 	mov	lr, r2
   29f6c:	e181c401 	orr	ip, r1, r1, lsl #8
   29f70:	e18cc80c 	orr	ip, ip, ip, lsl #16
   29f74:	e2803010 	add	r3, r0, #16
   29f78:	e24ee010 	sub	lr, lr, #16
   29f7c:	e35e000f 	cmp	lr, #15
   29f80:	e503c010 	str	ip, [r3, #-16]
   29f84:	e503c00c 	str	ip, [r3, #-12]
   29f88:	e503c008 	str	ip, [r3, #-8]
   29f8c:	e503c004 	str	ip, [r3, #-4]
   29f90:	e2833010 	add	r3, r3, #16
   29f94:	8afffff7 	bhi	29f78 <memset+0x34>
   29f98:	e2423010 	sub	r3, r2, #16
   29f9c:	e3c3300f 	bic	r3, r3, #15
   29fa0:	e202200f 	and	r2, r2, #15
   29fa4:	e2833010 	add	r3, r3, #16
   29fa8:	e3520000 	cmp	r2, #0
   29fac:	e0803003 	add	r3, r0, r3
   29fb0:	0a00000f 	beq	29ff4 <memset+0xb0>
   29fb4:	e6af1071 	sxtb	r1, r1
   29fb8:	e0832002 	add	r2, r3, r2
   29fbc:	e4c31001 	strb	r1, [r3], #1
   29fc0:	e1530002 	cmp	r3, r2
   29fc4:	1afffffc 	bne	29fbc <memset+0x78>
   29fc8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   29fcc:	e3520000 	cmp	r2, #0
   29fd0:	e1a03000 	mov	r3, r0
   29fd4:	16af1071 	sxtbne	r1, r1
   29fd8:	10802002 	addne	r2, r0, r2
   29fdc:	0a000003 	beq	29ff0 <memset+0xac>
   29fe0:	e4c31001 	strb	r1, [r3], #1
   29fe4:	e1530002 	cmp	r3, r2
   29fe8:	1afffffc 	bne	29fe0 <memset+0x9c>
   29fec:	e12fff1e 	bx	lr
   29ff0:	e12fff1e 	bx	lr
   29ff4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00029ff8 <memmove>:
   29ff8:	e1500001 	cmp	r0, r1
   29ffc:	9a00000a 	bls	2a02c <memmove+0x34>
   2a000:	e0813002 	add	r3, r1, r2
   2a004:	e1500003 	cmp	r0, r3
   2a008:	2a000007 	bcs	2a02c <memmove+0x34>
   2a00c:	e3520000 	cmp	r2, #0
   2a010:	e0802002 	add	r2, r0, r2
   2a014:	012fff1e 	bxeq	lr
   2a018:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   2a01c:	e1510003 	cmp	r1, r3
   2a020:	e562c001 	strb	ip, [r2, #-1]!
   2a024:	1afffffb 	bne	2a018 <memmove+0x20>
   2a028:	e12fff1e 	bx	lr
   2a02c:	ea00023b 	b	2a920 <memcpy>

0002a030 <memcmp>:
   2a030:	e3520000 	cmp	r2, #0
   2a034:	0a00000e 	beq	2a074 <memcmp+0x44>
   2a038:	e5d0c000 	ldrb	ip, [r0]
   2a03c:	e5d13000 	ldrb	r3, [r1]
   2a040:	e15c0003 	cmp	ip, r3
   2a044:	ca00000c 	bgt	2a07c <memcmp+0x4c>
   2a048:	ba00000d 	blt	2a084 <memcmp+0x54>
   2a04c:	e0812002 	add	r2, r1, r2
   2a050:	e2811001 	add	r1, r1, #1
   2a054:	ea000004 	b	2a06c <memcmp+0x3c>
   2a058:	e5f0c001 	ldrb	ip, [r0, #1]!
   2a05c:	e4d13001 	ldrb	r3, [r1], #1
   2a060:	e15c0003 	cmp	ip, r3
   2a064:	ca000004 	bgt	2a07c <memcmp+0x4c>
   2a068:	ba000005 	blt	2a084 <memcmp+0x54>
   2a06c:	e1510002 	cmp	r1, r2
   2a070:	1afffff8 	bne	2a058 <memcmp+0x28>
   2a074:	e3a00000 	mov	r0, #0
   2a078:	e12fff1e 	bx	lr
   2a07c:	e3a00001 	mov	r0, #1
   2a080:	e12fff1e 	bx	lr
   2a084:	e3e00000 	mvn	r0, #0
   2a088:	e12fff1e 	bx	lr

0002a08c <strlen>:
   2a08c:	e1d010d0 	ldrsb	r1, [r0]
   2a090:	e2803001 	add	r3, r0, #1
   2a094:	e3510000 	cmp	r1, #0
   2a098:	0a000003 	beq	2a0ac <strlen+0x20>
   2a09c:	e0431000 	sub	r1, r3, r0
   2a0a0:	e0d320d1 	ldrsb	r2, [r3], #1
   2a0a4:	e3520000 	cmp	r2, #0
   2a0a8:	1afffffb 	bne	2a09c <strlen+0x10>
   2a0ac:	e1a00001 	mov	r0, r1
   2a0b0:	e12fff1e 	bx	lr

0002a0b4 <strcmp>:
   2a0b4:	e1d030d0 	ldrsb	r3, [r0]
   2a0b8:	e1d120d0 	ldrsb	r2, [r1]
   2a0bc:	e3530000 	cmp	r3, #0
   2a0c0:	1a000007 	bne	2a0e4 <strcmp+0x30>
   2a0c4:	ea000008 	b	2a0ec <strcmp+0x38>
   2a0c8:	e1530002 	cmp	r3, r2
   2a0cc:	ca00000b 	bgt	2a100 <strcmp+0x4c>
   2a0d0:	ba00000c 	blt	2a108 <strcmp+0x54>
   2a0d4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a0d8:	e3530000 	cmp	r3, #0
   2a0dc:	0a00000b 	beq	2a110 <strcmp+0x5c>
   2a0e0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   2a0e4:	e3520000 	cmp	r2, #0
   2a0e8:	1afffff6 	bne	2a0c8 <strcmp+0x14>
   2a0ec:	e1530002 	cmp	r3, r2
   2a0f0:	ca000002 	bgt	2a100 <strcmp+0x4c>
   2a0f4:	b3e00000 	mvnlt	r0, #0
   2a0f8:	a3a00000 	movge	r0, #0
   2a0fc:	e12fff1e 	bx	lr
   2a100:	e3a00001 	mov	r0, #1
   2a104:	e12fff1e 	bx	lr
   2a108:	e3e00000 	mvn	r0, #0
   2a10c:	e12fff1e 	bx	lr
   2a110:	e1d120d1 	ldrsb	r2, [r1, #1]
   2a114:	e1530002 	cmp	r3, r2
   2a118:	dafffff5 	ble	2a0f4 <strcmp+0x40>
   2a11c:	eafffff7 	b	2a100 <strcmp+0x4c>

0002a120 <strcasecmp>:
   2a120:	e2400001 	sub	r0, r0, #1
   2a124:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a128:	e2432061 	sub	r2, r3, #97	; 0x61
   2a12c:	e3520019 	cmp	r2, #25
   2a130:	92433020 	subls	r3, r3, #32
   2a134:	e3530000 	cmp	r3, #0
   2a138:	0a00001f 	beq	2a1bc <strcasecmp+0x9c>
   2a13c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2a140:	e0d120d1 	ldrsb	r2, [r1], #1
   2a144:	e242c061 	sub	ip, r2, #97	; 0x61
   2a148:	e35c0019 	cmp	ip, #25
   2a14c:	81a0e002 	movhi	lr, r2
   2a150:	9242e020 	subls	lr, r2, #32
   2a154:	e35e0000 	cmp	lr, #0
   2a158:	1a000006 	bne	2a178 <strcasecmp+0x58>
   2a15c:	e35c0019 	cmp	ip, #25
   2a160:	92422020 	subls	r2, r2, #32
   2a164:	e1530002 	cmp	r3, r2
   2a168:	ca000011 	bgt	2a1b4 <strcasecmp+0x94>
   2a16c:	b3e00000 	mvnlt	r0, #0
   2a170:	a3a00000 	movge	r0, #0
   2a174:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a178:	e153000e 	cmp	r3, lr
   2a17c:	ca00000c 	bgt	2a1b4 <strcasecmp+0x94>
   2a180:	ba000016 	blt	2a1e0 <strcasecmp+0xc0>
   2a184:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a188:	e2432061 	sub	r2, r3, #97	; 0x61
   2a18c:	e3520019 	cmp	r2, #25
   2a190:	92433020 	subls	r3, r3, #32
   2a194:	e3530000 	cmp	r3, #0
   2a198:	1affffe8 	bne	2a140 <strcasecmp+0x20>
   2a19c:	e1d120d0 	ldrsb	r2, [r1]
   2a1a0:	e242c061 	sub	ip, r2, #97	; 0x61
   2a1a4:	e35c0019 	cmp	ip, #25
   2a1a8:	92422020 	subls	r2, r2, #32
   2a1ac:	e1530002 	cmp	r3, r2
   2a1b0:	daffffed 	ble	2a16c <strcasecmp+0x4c>
   2a1b4:	e3a00001 	mov	r0, #1
   2a1b8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a1bc:	e1d120d0 	ldrsb	r2, [r1]
   2a1c0:	e242c061 	sub	ip, r2, #97	; 0x61
   2a1c4:	e35c0019 	cmp	ip, #25
   2a1c8:	92422020 	subls	r2, r2, #32
   2a1cc:	e1530002 	cmp	r3, r2
   2a1d0:	ca000004 	bgt	2a1e8 <strcasecmp+0xc8>
   2a1d4:	b3e00000 	mvnlt	r0, #0
   2a1d8:	a3a00000 	movge	r0, #0
   2a1dc:	e12fff1e 	bx	lr
   2a1e0:	e3e00000 	mvn	r0, #0
   2a1e4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a1e8:	e3a00001 	mov	r0, #1
   2a1ec:	e12fff1e 	bx	lr

0002a1f0 <strncmp>:
   2a1f0:	e3520000 	cmp	r2, #0
   2a1f4:	0a000016 	beq	2a254 <strncmp+0x64>
   2a1f8:	e1d030d0 	ldrsb	r3, [r0]
   2a1fc:	e1d1c0d0 	ldrsb	ip, [r1]
   2a200:	e3530000 	cmp	r3, #0
   2a204:	0a000015 	beq	2a260 <strncmp+0x70>
   2a208:	e35c0000 	cmp	ip, #0
   2a20c:	0a000013 	beq	2a260 <strncmp+0x70>
   2a210:	e15c0003 	cmp	ip, r3
   2a214:	ba000016 	blt	2a274 <strncmp+0x84>
   2a218:	d0802002 	addle	r2, r0, r2
   2a21c:	d2800001 	addle	r0, r0, #1
   2a220:	da000009 	ble	2a24c <strncmp+0x5c>
   2a224:	ea000014 	b	2a27c <strncmp+0x8c>
   2a228:	e0d030d1 	ldrsb	r3, [r0], #1
   2a22c:	e3530000 	cmp	r3, #0
   2a230:	0a000009 	beq	2a25c <strncmp+0x6c>
   2a234:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   2a238:	e35c0000 	cmp	ip, #0
   2a23c:	0a000007 	beq	2a260 <strncmp+0x70>
   2a240:	e153000c 	cmp	r3, ip
   2a244:	ca00000a 	bgt	2a274 <strncmp+0x84>
   2a248:	ba00000b 	blt	2a27c <strncmp+0x8c>
   2a24c:	e1500002 	cmp	r0, r2
   2a250:	1afffff4 	bne	2a228 <strncmp+0x38>
   2a254:	e3a00000 	mov	r0, #0
   2a258:	e12fff1e 	bx	lr
   2a25c:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   2a260:	e153000c 	cmp	r3, ip
   2a264:	ca000002 	bgt	2a274 <strncmp+0x84>
   2a268:	b3e00000 	mvnlt	r0, #0
   2a26c:	a3a00000 	movge	r0, #0
   2a270:	e12fff1e 	bx	lr
   2a274:	e3a00001 	mov	r0, #1
   2a278:	e12fff1e 	bx	lr
   2a27c:	e3e00000 	mvn	r0, #0
   2a280:	e12fff1e 	bx	lr

0002a284 <strncasecmp>:
   2a284:	e3520000 	cmp	r2, #0
   2a288:	0a00002c 	beq	2a340 <strncasecmp+0xbc>
   2a28c:	e1a0c001 	mov	ip, r1
   2a290:	e92d4010 	push	{r4, lr}
   2a294:	e2400001 	sub	r0, r0, #1
   2a298:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a29c:	e2431061 	sub	r1, r3, #97	; 0x61
   2a2a0:	e3510019 	cmp	r1, #25
   2a2a4:	92433020 	subls	r3, r3, #32
   2a2a8:	e3530000 	cmp	r3, #0
   2a2ac:	0a00001c 	beq	2a324 <strncasecmp+0xa0>
   2a2b0:	e0dc10d1 	ldrsb	r1, [ip], #1
   2a2b4:	e241e061 	sub	lr, r1, #97	; 0x61
   2a2b8:	e35e0019 	cmp	lr, #25
   2a2bc:	81a04001 	movhi	r4, r1
   2a2c0:	92414020 	subls	r4, r1, #32
   2a2c4:	e3540000 	cmp	r4, #0
   2a2c8:	1a000006 	bne	2a2e8 <strncasecmp+0x64>
   2a2cc:	e35e0019 	cmp	lr, #25
   2a2d0:	9a00000e 	bls	2a310 <strncasecmp+0x8c>
   2a2d4:	e1510003 	cmp	r1, r3
   2a2d8:	ba000014 	blt	2a330 <strncasecmp+0xac>
   2a2dc:	c3e00000 	mvngt	r0, #0
   2a2e0:	d3a00000 	movle	r0, #0
   2a2e4:	e8bd8010 	pop	{r4, pc}
   2a2e8:	e1530004 	cmp	r3, r4
   2a2ec:	ca00000f 	bgt	2a330 <strncasecmp+0xac>
   2a2f0:	ba000010 	blt	2a338 <strncasecmp+0xb4>
   2a2f4:	e2522001 	subs	r2, r2, #1
   2a2f8:	1affffe6 	bne	2a298 <strncasecmp+0x14>
   2a2fc:	e1dc10d0 	ldrsb	r1, [ip]
   2a300:	e2412061 	sub	r2, r1, #97	; 0x61
   2a304:	e3520019 	cmp	r2, #25
   2a308:	93a02000 	movls	r2, #0
   2a30c:	8a000002 	bhi	2a31c <strncasecmp+0x98>
   2a310:	e3520000 	cmp	r2, #0
   2a314:	e2411020 	sub	r1, r1, #32
   2a318:	1affffed 	bne	2a2d4 <strncasecmp+0x50>
   2a31c:	e3a00000 	mov	r0, #0
   2a320:	e8bd8010 	pop	{r4, pc}
   2a324:	e1dc10d0 	ldrsb	r1, [ip]
   2a328:	e241e061 	sub	lr, r1, #97	; 0x61
   2a32c:	eaffffe6 	b	2a2cc <strncasecmp+0x48>
   2a330:	e3a00001 	mov	r0, #1
   2a334:	e8bd8010 	pop	{r4, pc}
   2a338:	e3e00000 	mvn	r0, #0
   2a33c:	e8bd8010 	pop	{r4, pc}
   2a340:	e1d110d0 	ldrsb	r1, [r1]
   2a344:	e2412061 	sub	r2, r1, #97	; 0x61
   2a348:	e3520019 	cmp	r2, #25
   2a34c:	8a00000a 	bhi	2a37c <strncasecmp+0xf8>
   2a350:	e3a02000 	mov	r2, #0
   2a354:	e3520000 	cmp	r2, #0
   2a358:	e2411020 	sub	r1, r1, #32
   2a35c:	0a000006 	beq	2a37c <strncasecmp+0xf8>
   2a360:	e1510003 	cmp	r1, r3
   2a364:	ba000002 	blt	2a374 <strncasecmp+0xf0>
   2a368:	c3e00000 	mvngt	r0, #0
   2a36c:	d3a00000 	movle	r0, #0
   2a370:	e12fff1e 	bx	lr
   2a374:	e3a00001 	mov	r0, #1
   2a378:	e12fff1e 	bx	lr
   2a37c:	e3a00000 	mov	r0, #0
   2a380:	e12fff1e 	bx	lr

0002a384 <strcpy>:
   2a384:	e1d130d0 	ldrsb	r3, [r1]
   2a388:	e1a02000 	mov	r2, r0
   2a38c:	e3530000 	cmp	r3, #0
   2a390:	0a000003 	beq	2a3a4 <strcpy+0x20>
   2a394:	e4c23001 	strb	r3, [r2], #1
   2a398:	e1f130d1 	ldrsb	r3, [r1, #1]!
   2a39c:	e3530000 	cmp	r3, #0
   2a3a0:	1afffffb 	bne	2a394 <strcpy+0x10>
   2a3a4:	e3a03000 	mov	r3, #0
   2a3a8:	e5c23000 	strb	r3, [r2]
   2a3ac:	e12fff1e 	bx	lr

0002a3b0 <strncpy>:
   2a3b0:	e3520000 	cmp	r2, #0
   2a3b4:	012fff1e 	bxeq	lr
   2a3b8:	e1d1c0d0 	ldrsb	ip, [r1]
   2a3bc:	e35c0000 	cmp	ip, #0
   2a3c0:	0a000009 	beq	2a3ec <strncpy+0x3c>
   2a3c4:	e0802002 	add	r2, r0, r2
   2a3c8:	e1a03000 	mov	r3, r0
   2a3cc:	ea000002 	b	2a3dc <strncpy+0x2c>
   2a3d0:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   2a3d4:	e35c0000 	cmp	ip, #0
   2a3d8:	0a000004 	beq	2a3f0 <strncpy+0x40>
   2a3dc:	e4c3c001 	strb	ip, [r3], #1
   2a3e0:	e1530002 	cmp	r3, r2
   2a3e4:	1afffff9 	bne	2a3d0 <strncpy+0x20>
   2a3e8:	e12fff1e 	bx	lr
   2a3ec:	e1a03000 	mov	r3, r0
   2a3f0:	e3a02000 	mov	r2, #0
   2a3f4:	e5c32000 	strb	r2, [r3]
   2a3f8:	e12fff1e 	bx	lr

0002a3fc <strcat>:
   2a3fc:	e1d030d0 	ldrsb	r3, [r0]
   2a400:	e3530000 	cmp	r3, #0
   2a404:	e1a03000 	mov	r3, r0
   2a408:	0a000002 	beq	2a418 <strcat+0x1c>
   2a40c:	e1f320d1 	ldrsb	r2, [r3, #1]!
   2a410:	e3520000 	cmp	r2, #0
   2a414:	1afffffc 	bne	2a40c <strcat+0x10>
   2a418:	e1d120d0 	ldrsb	r2, [r1]
   2a41c:	e3520000 	cmp	r2, #0
   2a420:	0a000003 	beq	2a434 <strcat+0x38>
   2a424:	e4c32001 	strb	r2, [r3], #1
   2a428:	e1f120d1 	ldrsb	r2, [r1, #1]!
   2a42c:	e3520000 	cmp	r2, #0
   2a430:	1afffffb 	bne	2a424 <strcat+0x28>
   2a434:	e3a02000 	mov	r2, #0
   2a438:	e5c32000 	strb	r2, [r3]
   2a43c:	e12fff1e 	bx	lr

0002a440 <strchr>:
   2a440:	e1d020d0 	ldrsb	r2, [r0]
   2a444:	e3520000 	cmp	r2, #0
   2a448:	0a000009 	beq	2a474 <strchr+0x34>
   2a44c:	e1510002 	cmp	r1, r2
   2a450:	1a000002 	bne	2a460 <strchr+0x20>
   2a454:	ea000008 	b	2a47c <strchr+0x3c>
   2a458:	e1530001 	cmp	r3, r1
   2a45c:	012fff1e 	bxeq	lr
   2a460:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a464:	e3530000 	cmp	r3, #0
   2a468:	1afffffa 	bne	2a458 <strchr+0x18>
   2a46c:	e1a00003 	mov	r0, r3
   2a470:	e12fff1e 	bx	lr
   2a474:	e1a00002 	mov	r0, r2
   2a478:	e12fff1e 	bx	lr
   2a47c:	e12fff1e 	bx	lr

0002a480 <strstr>:
   2a480:	e1d030d0 	ldrsb	r3, [r0]
   2a484:	e3530000 	cmp	r3, #0
   2a488:	1a000003 	bne	2a49c <strstr+0x1c>
   2a48c:	e1d130d0 	ldrsb	r3, [r1]
   2a490:	e3530000 	cmp	r3, #0
   2a494:	13a00000 	movne	r0, #0
   2a498:	e12fff1e 	bx	lr
   2a49c:	e92d4010 	push	{r4, lr}
   2a4a0:	e1d140d0 	ldrsb	r4, [r1]
   2a4a4:	e3540000 	cmp	r4, #0
   2a4a8:	08bd8010 	popeq	{r4, pc}
   2a4ac:	e1d030d0 	ldrsb	r3, [r0]
   2a4b0:	e1530004 	cmp	r3, r4
   2a4b4:	01a02001 	moveq	r2, r1
   2a4b8:	01a0c000 	moveq	ip, r0
   2a4bc:	0a000003 	beq	2a4d0 <strstr+0x50>
   2a4c0:	ea000006 	b	2a4e0 <strstr+0x60>
   2a4c4:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   2a4c8:	e15e0003 	cmp	lr, r3
   2a4cc:	1a000003 	bne	2a4e0 <strstr+0x60>
   2a4d0:	e1f230d1 	ldrsb	r3, [r2, #1]!
   2a4d4:	e3530000 	cmp	r3, #0
   2a4d8:	1afffff9 	bne	2a4c4 <strstr+0x44>
   2a4dc:	e8bd8010 	pop	{r4, pc}
   2a4e0:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a4e4:	e3530000 	cmp	r3, #0
   2a4e8:	1affffed 	bne	2a4a4 <strstr+0x24>
   2a4ec:	e1a00003 	mov	r0, r3
   2a4f0:	e8bd8010 	pop	{r4, pc}

0002a4f4 <strtok_r>:
   2a4f4:	e3500000 	cmp	r0, #0
   2a4f8:	0a00002c 	beq	2a5b0 <strtok_r+0xbc>
   2a4fc:	e92d4030 	push	{r4, r5, lr}
   2a500:	e1d0e0d0 	ldrsb	lr, [r0]
   2a504:	e35e0000 	cmp	lr, #0
   2a508:	11d140d0 	ldrsbne	r4, [r1]
   2a50c:	0a000024 	beq	2a5a4 <strtok_r+0xb0>
   2a510:	e3540000 	cmp	r4, #0
   2a514:	0a000008 	beq	2a53c <strtok_r+0x48>
   2a518:	e15e0004 	cmp	lr, r4
   2a51c:	0a000019 	beq	2a588 <strtok_r+0x94>
   2a520:	e1a0c001 	mov	ip, r1
   2a524:	ea000001 	b	2a530 <strtok_r+0x3c>
   2a528:	e15e0003 	cmp	lr, r3
   2a52c:	0a000015 	beq	2a588 <strtok_r+0x94>
   2a530:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a534:	e3530000 	cmp	r3, #0
   2a538:	1afffffa 	bne	2a528 <strtok_r+0x34>
   2a53c:	e35e0000 	cmp	lr, #0
   2a540:	0a000017 	beq	2a5a4 <strtok_r+0xb0>
   2a544:	e1a05000 	mov	r5, r0
   2a548:	e3540000 	cmp	r4, #0
   2a54c:	0a000008 	beq	2a574 <strtok_r+0x80>
   2a550:	e15e0004 	cmp	lr, r4
   2a554:	0a00000d 	beq	2a590 <strtok_r+0x9c>
   2a558:	e1a0c001 	mov	ip, r1
   2a55c:	ea000001 	b	2a568 <strtok_r+0x74>
   2a560:	e15e0003 	cmp	lr, r3
   2a564:	0a000009 	beq	2a590 <strtok_r+0x9c>
   2a568:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a56c:	e3530000 	cmp	r3, #0
   2a570:	1afffffa 	bne	2a560 <strtok_r+0x6c>
   2a574:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   2a578:	e35e0000 	cmp	lr, #0
   2a57c:	1afffff1 	bne	2a548 <strtok_r+0x54>
   2a580:	e5825000 	str	r5, [r2]
   2a584:	e8bd8030 	pop	{r4, r5, pc}
   2a588:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   2a58c:	eaffffdf 	b	2a510 <strtok_r+0x1c>
   2a590:	e3a03000 	mov	r3, #0
   2a594:	e2855001 	add	r5, r5, #1
   2a598:	e5453001 	strb	r3, [r5, #-1]
   2a59c:	e5825000 	str	r5, [r2]
   2a5a0:	e8bd8030 	pop	{r4, r5, pc}
   2a5a4:	e3a00000 	mov	r0, #0
   2a5a8:	e5820000 	str	r0, [r2]
   2a5ac:	e8bd8030 	pop	{r4, r5, pc}
   2a5b0:	e5920000 	ldr	r0, [r2]
   2a5b4:	e3500000 	cmp	r0, #0
   2a5b8:	1affffcf 	bne	2a4fc <strtok_r+0x8>
   2a5bc:	e12fff1e 	bx	lr

0002a5c0 <strtoul>:
   2a5c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2a5c4:	e3510000 	cmp	r1, #0
   2a5c8:	e2425002 	sub	r5, r2, #2
   2a5cc:	15810000 	strne	r0, [r1]
   2a5d0:	e3520000 	cmp	r2, #0
   2a5d4:	13550022 	cmpne	r5, #34	; 0x22
   2a5d8:	e3c2e010 	bic	lr, r2, #16
   2a5dc:	83a05001 	movhi	r5, #1
   2a5e0:	93a05000 	movls	r5, #0
   2a5e4:	8a000037 	bhi	2a6c8 <strtoul+0x108>
   2a5e8:	e1d0c0d0 	ldrsb	ip, [r0]
   2a5ec:	e1a04000 	mov	r4, r0
   2a5f0:	e24c3009 	sub	r3, ip, #9
   2a5f4:	e35c0020 	cmp	ip, #32
   2a5f8:	e2800001 	add	r0, r0, #1
   2a5fc:	e6ef3073 	uxtb	r3, r3
   2a600:	0afffff8 	beq	2a5e8 <strtoul+0x28>
   2a604:	e3530004 	cmp	r3, #4
   2a608:	9afffff6 	bls	2a5e8 <strtoul+0x28>
   2a60c:	e35c002b 	cmp	ip, #43	; 0x2b
   2a610:	0a00002e 	beq	2a6d0 <strtoul+0x110>
   2a614:	e35c002d 	cmp	ip, #45	; 0x2d
   2a618:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   2a61c:	03a07001 	moveq	r7, #1
   2a620:	01a04000 	moveq	r4, r0
   2a624:	13a07000 	movne	r7, #0
   2a628:	e35c0030 	cmp	ip, #48	; 0x30
   2a62c:	0a00002c 	beq	2a6e4 <strtoul+0x124>
   2a630:	e3520000 	cmp	r2, #0
   2a634:	03a0200a 	moveq	r2, #10
   2a638:	e35c002f 	cmp	ip, #47	; 0x2f
   2a63c:	e1a0300c 	mov	r3, ip
   2a640:	da00001d 	ble	2a6bc <strtoul+0xfc>
   2a644:	e3a0e000 	mov	lr, #0
   2a648:	e3a05001 	mov	r5, #1
   2a64c:	e1a0600e 	mov	r6, lr
   2a650:	ea000008 	b	2a678 <strtoul+0xb8>
   2a654:	e020329e 	mla	r0, lr, r2, r3
   2a658:	e150000e 	cmp	r0, lr
   2a65c:	3a000029 	bcc	2a708 <strtoul+0x148>
   2a660:	e1f430d1 	ldrsb	r3, [r4, #1]!
   2a664:	e1a05006 	mov	r5, r6
   2a668:	e353002f 	cmp	r3, #47	; 0x2f
   2a66c:	e1a0c003 	mov	ip, r3
   2a670:	da000029 	ble	2a71c <strtoul+0x15c>
   2a674:	e1a0e000 	mov	lr, r0
   2a678:	e24cc061 	sub	ip, ip, #97	; 0x61
   2a67c:	e35c0019 	cmp	ip, #25
   2a680:	92433020 	subls	r3, r3, #32
   2a684:	e3530040 	cmp	r3, #64	; 0x40
   2a688:	c2433007 	subgt	r3, r3, #7
   2a68c:	e2433030 	sub	r3, r3, #48	; 0x30
   2a690:	e1520003 	cmp	r2, r3
   2a694:	caffffee 	bgt	2a654 <strtoul+0x94>
   2a698:	e1a0000e 	mov	r0, lr
   2a69c:	e2255001 	eor	r5, r5, #1
   2a6a0:	e3510000 	cmp	r1, #0
   2a6a4:	e0055007 	and	r5, r5, r7
   2a6a8:	0a000000 	beq	2a6b0 <strtoul+0xf0>
   2a6ac:	e5814000 	str	r4, [r1]
   2a6b0:	e3550000 	cmp	r5, #0
   2a6b4:	12600000 	rsbne	r0, r0, #0
   2a6b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2a6bc:	e3510000 	cmp	r1, #0
   2a6c0:	13a00000 	movne	r0, #0
   2a6c4:	1afffff8 	bne	2a6ac <strtoul+0xec>
   2a6c8:	e3a00000 	mov	r0, #0
   2a6cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2a6d0:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   2a6d4:	e3a07000 	mov	r7, #0
   2a6d8:	e35c0030 	cmp	ip, #48	; 0x30
   2a6dc:	e1a04000 	mov	r4, r0
   2a6e0:	1affffd2 	bne	2a630 <strtoul+0x70>
   2a6e4:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   2a6e8:	e2840001 	add	r0, r4, #1
   2a6ec:	e3cc3020 	bic	r3, ip, #32
   2a6f0:	e3530058 	cmp	r3, #88	; 0x58
   2a6f4:	0a00000a 	beq	2a724 <strtoul+0x164>
   2a6f8:	e3520000 	cmp	r2, #0
   2a6fc:	e1a04000 	mov	r4, r0
   2a700:	03a02008 	moveq	r2, #8
   2a704:	eaffffcb 	b	2a638 <strtoul+0x78>
   2a708:	e3510000 	cmp	r1, #0
   2a70c:	0a00000a 	beq	2a73c <strtoul+0x17c>
   2a710:	e5814000 	str	r4, [r1]
   2a714:	e3e00000 	mvn	r0, #0
   2a718:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2a71c:	e3a05001 	mov	r5, #1
   2a720:	eaffffde 	b	2a6a0 <strtoul+0xe0>
   2a724:	e35e0000 	cmp	lr, #0
   2a728:	1affffe6 	bne	2a6c8 <strtoul+0x108>
   2a72c:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   2a730:	e3a02010 	mov	r2, #16
   2a734:	e2844002 	add	r4, r4, #2
   2a738:	eaffffbe 	b	2a638 <strtoul+0x78>
   2a73c:	e3e00000 	mvn	r0, #0
   2a740:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002a744 <strtoull>:
   2a744:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a748:	e251e000 	subs	lr, r1, #0
   2a74c:	e242b002 	sub	fp, r2, #2
   2a750:	158e0000 	strne	r0, [lr]
   2a754:	e3520000 	cmp	r2, #0
   2a758:	135b0022 	cmpne	fp, #34	; 0x22
   2a75c:	e3c21010 	bic	r1, r2, #16
   2a760:	83a0b001 	movhi	fp, #1
   2a764:	93a0b000 	movls	fp, #0
   2a768:	8a000041 	bhi	2a874 <strtoull+0x130>
   2a76c:	e1d0a0d0 	ldrsb	sl, [r0]
   2a770:	e1a0c000 	mov	ip, r0
   2a774:	e24a3009 	sub	r3, sl, #9
   2a778:	e35a0020 	cmp	sl, #32
   2a77c:	e2800001 	add	r0, r0, #1
   2a780:	e6ef3073 	uxtb	r3, r3
   2a784:	0afffff8 	beq	2a76c <strtoull+0x28>
   2a788:	e3530004 	cmp	r3, #4
   2a78c:	9afffff6 	bls	2a76c <strtoull+0x28>
   2a790:	e35a002b 	cmp	sl, #43	; 0x2b
   2a794:	0a000039 	beq	2a880 <strtoull+0x13c>
   2a798:	e35a002d 	cmp	sl, #45	; 0x2d
   2a79c:	01dca0d1 	ldrsbeq	sl, [ip, #1]
   2a7a0:	03a09001 	moveq	r9, #1
   2a7a4:	01a0c000 	moveq	ip, r0
   2a7a8:	13a09000 	movne	r9, #0
   2a7ac:	e35a0030 	cmp	sl, #48	; 0x30
   2a7b0:	0a000037 	beq	2a894 <strtoull+0x150>
   2a7b4:	e3520000 	cmp	r2, #0
   2a7b8:	03a0200a 	moveq	r2, #10
   2a7bc:	e35a002f 	cmp	sl, #47	; 0x2f
   2a7c0:	e1a0300a 	mov	r3, sl
   2a7c4:	da00004c 	ble	2a8fc <strtoull+0x1b8>
   2a7c8:	e3a0b001 	mov	fp, #1
   2a7cc:	e3a04000 	mov	r4, #0
   2a7d0:	e3a05000 	mov	r5, #0
   2a7d4:	e1a06002 	mov	r6, r2
   2a7d8:	e1a07fc2 	asr	r7, r2, #31
   2a7dc:	e3a08000 	mov	r8, #0
   2a7e0:	ea00000f 	b	2a824 <strtoull+0xe0>
   2a7e4:	e00a0592 	mul	sl, r2, r5
   2a7e8:	e0810492 	umull	r0, r1, r2, r4
   2a7ec:	e02aa794 	mla	sl, r4, r7, sl
   2a7f0:	e0900003 	adds	r0, r0, r3
   2a7f4:	e08a1001 	add	r1, sl, r1
   2a7f8:	e0a11fc3 	adc	r1, r1, r3, asr #31
   2a7fc:	e1510005 	cmp	r1, r5
   2a800:	01500004 	cmpeq	r0, r4
   2a804:	3a00002b 	bcc	2a8b8 <strtoull+0x174>
   2a808:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a80c:	e1a0b008 	mov	fp, r8
   2a810:	e353002f 	cmp	r3, #47	; 0x2f
   2a814:	e1a0a003 	mov	sl, r3
   2a818:	da00002c 	ble	2a8d0 <strtoull+0x18c>
   2a81c:	e1a04000 	mov	r4, r0
   2a820:	e1a05001 	mov	r5, r1
   2a824:	e24aa061 	sub	sl, sl, #97	; 0x61
   2a828:	e35a0019 	cmp	sl, #25
   2a82c:	92433020 	subls	r3, r3, #32
   2a830:	e3530040 	cmp	r3, #64	; 0x40
   2a834:	c2433007 	subgt	r3, r3, #7
   2a838:	e2433030 	sub	r3, r3, #48	; 0x30
   2a83c:	e1520003 	cmp	r2, r3
   2a840:	caffffe7 	bgt	2a7e4 <strtoull+0xa0>
   2a844:	e1a00004 	mov	r0, r4
   2a848:	e1a01005 	mov	r1, r5
   2a84c:	e22bb001 	eor	fp, fp, #1
   2a850:	e35e0000 	cmp	lr, #0
   2a854:	e00bb009 	and	fp, fp, r9
   2a858:	0a000000 	beq	2a860 <strtoull+0x11c>
   2a85c:	e58ec000 	str	ip, [lr]
   2a860:	e35b0000 	cmp	fp, #0
   2a864:	08bd8ff0 	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a868:	e2700000 	rsbs	r0, r0, #0
   2a86c:	e2e11000 	rsc	r1, r1, #0
   2a870:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a874:	e3a00000 	mov	r0, #0
   2a878:	e3a01000 	mov	r1, #0
   2a87c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a880:	e1dca0d1 	ldrsb	sl, [ip, #1]
   2a884:	e3a09000 	mov	r9, #0
   2a888:	e35a0030 	cmp	sl, #48	; 0x30
   2a88c:	e1a0c000 	mov	ip, r0
   2a890:	1affffc7 	bne	2a7b4 <strtoull+0x70>
   2a894:	e1dca0d1 	ldrsb	sl, [ip, #1]
   2a898:	e28c0001 	add	r0, ip, #1
   2a89c:	e3ca3020 	bic	r3, sl, #32
   2a8a0:	e3530058 	cmp	r3, #88	; 0x58
   2a8a4:	0a00000b 	beq	2a8d8 <strtoull+0x194>
   2a8a8:	e3520000 	cmp	r2, #0
   2a8ac:	e1a0c000 	mov	ip, r0
   2a8b0:	03a02008 	moveq	r2, #8
   2a8b4:	eaffffc0 	b	2a7bc <strtoull+0x78>
   2a8b8:	e35e0000 	cmp	lr, #0
   2a8bc:	0a00000b 	beq	2a8f0 <strtoull+0x1ac>
   2a8c0:	e58ec000 	str	ip, [lr]
   2a8c4:	e3e00000 	mvn	r0, #0
   2a8c8:	e3a01000 	mov	r1, #0
   2a8cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a8d0:	e3a0b001 	mov	fp, #1
   2a8d4:	eaffffdd 	b	2a850 <strtoull+0x10c>
   2a8d8:	e3510000 	cmp	r1, #0
   2a8dc:	1affffe4 	bne	2a874 <strtoull+0x130>
   2a8e0:	e1dca0d2 	ldrsb	sl, [ip, #2]
   2a8e4:	e3a02010 	mov	r2, #16
   2a8e8:	e28cc002 	add	ip, ip, #2
   2a8ec:	eaffffb2 	b	2a7bc <strtoull+0x78>
   2a8f0:	e3e00000 	mvn	r0, #0
   2a8f4:	e3a01000 	mov	r1, #0
   2a8f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a8fc:	e35e0000 	cmp	lr, #0
   2a900:	e3a00000 	mov	r0, #0
   2a904:	e3a01000 	mov	r1, #0
   2a908:	1affffd3 	bne	2a85c <strtoull+0x118>
   2a90c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a910 <atoi>:
   2a910:	e3a0200a 	mov	r2, #10
   2a914:	e3a01000 	mov	r1, #0
   2a918:	eaffff28 	b	2a5c0 <strtoul>

0002a91c <char2int>:
   2a91c:	e12fff1e 	bx	lr

0002a920 <memcpy>:
   2a920:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   2a924:	e352007f 	cmp	r2, #127	; 0x7f
   2a928:	9a00000b 	bls	2a95c <memcpy+0x3c>
   2a92c:	e3110003 	tst	r1, #3
   2a930:	1a000009 	bne	2a95c <memcpy+0x3c>
   2a934:	e3100003 	tst	r0, #3
   2a938:	1a000007 	bne	2a95c <memcpy+0x3c>
   2a93c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   2a940:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2a944:	e2422020 	sub	r2, r2, #32
   2a948:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2a94c:	f5d1f040 	pld	[r1, #64]	; 0x40
   2a950:	e352001f 	cmp	r2, #31
   2a954:	8afffff9 	bhi	2a940 <memcpy+0x20>
   2a958:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   2a95c:	e3520000 	cmp	r2, #0
   2a960:	0a000003 	beq	2a974 <memcpy+0x54>
   2a964:	e4d13001 	ldrb	r3, [r1], #1
   2a968:	e2522001 	subs	r2, r2, #1
   2a96c:	e4c03001 	strb	r3, [r0], #1
   2a970:	1afffffb 	bne	2a964 <memcpy+0x44>
   2a974:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   2a978:	e12fff1e 	bx	lr

0002a97c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   2a97c:	e3a03000 	mov	r3, #0
   2a980:	e3510001 	cmp	r1, #1
   2a984:	91a0c002 	movls	ip, r2
   2a988:	8382c001 	orrhi	ip, r2, #1
   2a98c:	e92d4070 	push	{r4, r5, r6, lr}
   2a990:	e1a04000 	mov	r4, r0
   2a994:	e59f0118 	ldr	r0, [pc, #280]	; 2aab4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x138>
   2a998:	e15c0003 	cmp	ip, r3
   2a99c:	e24dd020 	sub	sp, sp, #32
   2a9a0:	e5c42004 	strb	r2, [r4, #4]
   2a9a4:	e5841008 	str	r1, [r4, #8]
   2a9a8:	e5840000 	str	r0, [r4]
   2a9ac:	e1c431b0 	strh	r3, [r4, #16]
   2a9b0:	e1c431b2 	strh	r3, [r4, #18]
   2a9b4:	0a000002 	beq	2a9c4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x48>
   2a9b8:	e1a00004 	mov	r0, r4
   2a9bc:	e28dd020 	add	sp, sp, #32
   2a9c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a9c4:	e59f50ec 	ldr	r5, [pc, #236]	; 2aab8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x13c>
   2a9c8:	e5950004 	ldr	r0, [r5, #4]
   2a9cc:	e1500003 	cmp	r0, r3
   2a9d0:	1a000027 	bne	2aa74 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf8>
   2a9d4:	e5956000 	ldr	r6, [r5]
   2a9d8:	e3560000 	cmp	r6, #0
   2a9dc:	0a00000b 	beq	2aa10 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x94>
   2a9e0:	e3a02000 	mov	r2, #0
   2a9e4:	e5943008 	ldr	r3, [r4, #8]
   2a9e8:	e7862103 	str	r2, [r6, r3, lsl #2]
   2a9ec:	e5953004 	ldr	r3, [r5, #4]
   2a9f0:	e3530000 	cmp	r3, #0
   2a9f4:	1a000020 	bne	2aa7c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x100>
   2a9f8:	e1a00004 	mov	r0, r4
   2a9fc:	e3a01000 	mov	r1, #0
   2aa00:	eb000036 	bl	2aae0 <CVirtualGPIOPin::Write(unsigned int)>
   2aa04:	e1a00004 	mov	r0, r4
   2aa08:	e28dd020 	add	sp, sp, #32
   2aa0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2aa10:	e3a00001 	mov	r0, #1
   2aa14:	eb00048a 	bl	2bc44 <CMemorySystem::GetCoherentPage(unsigned int)>
   2aa18:	e1a01006 	mov	r1, r6
   2aa1c:	e5850000 	str	r0, [r5]
   2aa20:	e28d0008 	add	r0, sp, #8
   2aa24:	ebffe79a 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2aa28:	e3a03004 	mov	r3, #4
   2aa2c:	e595c000 	ldr	ip, [r5]
   2aa30:	e58d3000 	str	r3, [sp]
   2aa34:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   2aa38:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   2aa3c:	e28d0008 	add	r0, sp, #8
   2aa40:	e28d2010 	add	r2, sp, #16
   2aa44:	e3a03010 	mov	r3, #16
   2aa48:	e59f106c 	ldr	r1, [pc, #108]	; 2aabc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x140>
   2aa4c:	e58dc01c 	str	ip, [sp, #28]
   2aa50:	ebffe79b 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2aa54:	e3500000 	cmp	r0, #0
   2aa58:	0a000009 	beq	2aa84 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x108>
   2aa5c:	e28d0008 	add	r0, sp, #8
   2aa60:	ebffe792 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   2aa64:	e5956000 	ldr	r6, [r5]
   2aa68:	e3560000 	cmp	r6, #0
   2aa6c:	0affffde 	beq	2a9ec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x70>
   2aa70:	eaffffda 	b	2a9e0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x64>
   2aa74:	eb0004b4 	bl	2bd4c <EnterCritical>
   2aa78:	eaffffd5 	b	2a9d4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x58>
   2aa7c:	eb0004dd 	bl	2bdf8 <LeaveCritical>
   2aa80:	eaffffdc 	b	2a9f8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x7c>
   2aa84:	e3a03010 	mov	r3, #16
   2aa88:	e58d0000 	str	r0, [sp]
   2aa8c:	e28d2010 	add	r2, sp, #16
   2aa90:	e59f1028 	ldr	r1, [pc, #40]	; 2aac0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x144>
   2aa94:	e28d0008 	add	r0, sp, #8
   2aa98:	ebffe789 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2aa9c:	e3500000 	cmp	r0, #0
   2aaa0:	159d301c 	ldrne	r3, [sp, #28]
   2aaa4:	05850000 	streq	r0, [r5]
   2aaa8:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   2aaac:	15853000 	strne	r3, [r5]
   2aab0:	eaffffe9 	b	2aa5c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xe0>
   2aab4:	00045914 	.word	0x00045914
   2aab8:	0004e234 	.word	0x0004e234
   2aabc:	00048020 	.word	0x00048020
   2aac0:	00040010 	.word	0x00040010

0002aac4 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   2aac4:	e12fff1e 	bx	lr

0002aac8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   2aac8:	e92d4010 	push	{r4, lr}
   2aacc:	e1a04000 	mov	r4, r0
   2aad0:	e3a01014 	mov	r1, #20
   2aad4:	eb000178 	bl	2b0bc <operator delete(void*, unsigned int)>
   2aad8:	e1a00004 	mov	r0, r4
   2aadc:	e8bd8010 	pop	{r4, pc}

0002aae0 <CVirtualGPIOPin::Write(unsigned int)>:
   2aae0:	e92d4070 	push	{r4, r5, r6, lr}
   2aae4:	e5d03004 	ldrb	r3, [r0, #4]
   2aae8:	e24dd028 	sub	sp, sp, #40	; 0x28
   2aaec:	e3530000 	cmp	r3, #0
   2aaf0:	e1a04000 	mov	r4, r0
   2aaf4:	e1a05001 	mov	r5, r1
   2aaf8:	0a000012 	beq	2ab48 <CVirtualGPIOPin::Write(unsigned int)+0x68>
   2aafc:	e5901008 	ldr	r1, [r0, #8]
   2ab00:	e3510000 	cmp	r1, #0
   2ab04:	1a000033 	bne	2abd8 <CVirtualGPIOPin::Write(unsigned int)+0xf8>
   2ab08:	e28d000c 	add	r0, sp, #12
   2ab0c:	ebffe760 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2ab10:	e3a03008 	mov	r3, #8
   2ab14:	e58d3000 	str	r3, [sp]
   2ab18:	e3a03014 	mov	r3, #20
   2ab1c:	e3a0c082 	mov	ip, #130	; 0x82
   2ab20:	e28d000c 	add	r0, sp, #12
   2ab24:	e08d2003 	add	r2, sp, r3
   2ab28:	e59f10d8 	ldr	r1, [pc, #216]	; 2ac08 <CVirtualGPIOPin::Write(unsigned int)+0x128>
   2ab2c:	e58d5024 	str	r5, [sp, #36]	; 0x24
   2ab30:	e58dc020 	str	ip, [sp, #32]
   2ab34:	ebffe762 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2ab38:	e28d000c 	add	r0, sp, #12
   2ab3c:	ebffe75b 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   2ab40:	e28dd028 	add	sp, sp, #40	; 0x28
   2ab44:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ab48:	e5903008 	ldr	r3, [r0, #8]
   2ab4c:	e3530001 	cmp	r3, #1
   2ab50:	8afffffa 	bhi	2ab40 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2ab54:	e3510001 	cmp	r1, #1
   2ab58:	93a03000 	movls	r3, #0
   2ab5c:	83a03001 	movhi	r3, #1
   2ab60:	e59f60a4 	ldr	r6, [pc, #164]	; 2ac0c <CVirtualGPIOPin::Write(unsigned int)+0x12c>
   2ab64:	e5962000 	ldr	r2, [r6]
   2ab68:	e3520000 	cmp	r2, #0
   2ab6c:	03833001 	orreq	r3, r3, #1
   2ab70:	e3530000 	cmp	r3, #0
   2ab74:	1afffff1 	bne	2ab40 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2ab78:	e5960004 	ldr	r0, [r6, #4]
   2ab7c:	e3500000 	cmp	r0, #0
   2ab80:	1a000018 	bne	2abe8 <CVirtualGPIOPin::Write(unsigned int)+0x108>
   2ab84:	e1d411b0 	ldrh	r1, [r4, #16]
   2ab88:	e1d431b2 	ldrh	r3, [r4, #18]
   2ab8c:	e584500c 	str	r5, [r4, #12]
   2ab90:	e0412003 	sub	r2, r1, r3
   2ab94:	e6bf2072 	sxth	r2, r2
   2ab98:	e3520000 	cmp	r2, #0
   2ab9c:	da000013 	ble	2abf0 <CVirtualGPIOPin::Write(unsigned int)+0x110>
   2aba0:	e3550000 	cmp	r5, #0
   2aba4:	1a000006 	bne	2abc4 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   2aba8:	e2833001 	add	r3, r3, #1
   2abac:	e6ff3073 	uxth	r3, r3
   2abb0:	e1c431b2 	strh	r3, [r4, #18]
   2abb4:	e5940008 	ldr	r0, [r4, #8]
   2abb8:	e5962000 	ldr	r2, [r6]
   2abbc:	e1833801 	orr	r3, r3, r1, lsl #16
   2abc0:	e7823100 	str	r3, [r2, r0, lsl #2]
   2abc4:	e5963004 	ldr	r3, [r6, #4]
   2abc8:	e3530000 	cmp	r3, #0
   2abcc:	0affffdb 	beq	2ab40 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2abd0:	eb000488 	bl	2bdf8 <LeaveCritical>
   2abd4:	eaffffd9 	b	2ab40 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2abd8:	e59f1030 	ldr	r1, [pc, #48]	; 2ac10 <CVirtualGPIOPin::Write(unsigned int)+0x130>
   2abdc:	e3a0205b 	mov	r2, #91	; 0x5b
   2abe0:	e2810014 	add	r0, r1, #20
   2abe4:	ebffe709 	bl	24810 <assertion_failed>
   2abe8:	eb000457 	bl	2bd4c <EnterCritical>
   2abec:	eaffffe4 	b	2ab84 <CVirtualGPIOPin::Write(unsigned int)+0xa4>
   2abf0:	e3550000 	cmp	r5, #0
   2abf4:	0afffff2 	beq	2abc4 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   2abf8:	e2811001 	add	r1, r1, #1
   2abfc:	e6ff1071 	uxth	r1, r1
   2ac00:	e1c411b0 	strh	r1, [r4, #16]
   2ac04:	eaffffea 	b	2abb4 <CVirtualGPIOPin::Write(unsigned int)+0xd4>
   2ac08:	00038041 	.word	0x00038041
   2ac0c:	0004e234 	.word	0x0004e234
   2ac10:	0004591c 	.word	0x0004591c

0002ac14 <CVirtualGPIOPin::Invert()>:
   2ac14:	e590100c 	ldr	r1, [r0, #12]
   2ac18:	e2211001 	eor	r1, r1, #1
   2ac1c:	eaffffaf 	b	2aae0 <CVirtualGPIOPin::Write(unsigned int)>

0002ac20 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   2ac20:	e3a02000 	mov	r2, #0
   2ac24:	e59f3004 	ldr	r3, [pc, #4]	; 2ac30 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   2ac28:	e5832004 	str	r2, [r3, #4]
   2ac2c:	e12fff1e 	bx	lr
   2ac30:	0004e234 	.word	0x0004e234

0002ac34 <ChainBootStub(void const*, unsigned int)>:
   2ac34:	e2811003 	add	r1, r1, #3
   2ac38:	e1b01121 	lsrs	r1, r1, #2
   2ac3c:	11a03000 	movne	r3, r0
   2ac40:	159f2030 	ldrne	r2, [pc, #48]	; 2ac78 <ChainBootStub(void const*, unsigned int)+0x44>
   2ac44:	10800101 	addne	r0, r0, r1, lsl #2
   2ac48:	0a000003 	beq	2ac5c <ChainBootStub(void const*, unsigned int)+0x28>
   2ac4c:	e4931004 	ldr	r1, [r3], #4
   2ac50:	e1500003 	cmp	r0, r3
   2ac54:	e5a21004 	str	r1, [r2, #4]!
   2ac58:	1afffffb 	bne	2ac4c <ChainBootStub(void const*, unsigned int)+0x18>
   2ac5c:	e3a03000 	mov	r3, #0
   2ac60:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2ac64:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2ac68:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ac6c:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2ac70:	e3a03902 	mov	r3, #32768	; 0x8000
   2ac74:	e12fff13 	bx	r3
   2ac78:	00007ffc 	.word	0x00007ffc

0002ac7c <EnableChainBoot>:
   2ac7c:	e59f302c 	ldr	r3, [pc, #44]	; 2acb0 <EnableChainBoot+0x34>
   2ac80:	e92d4010 	push	{r4, lr}
   2ac84:	e3a02b01 	mov	r2, #1024	; 0x400
   2ac88:	e8830003 	stm	r3, {r0, r1}
   2ac8c:	e59f1020 	ldr	r1, [pc, #32]	; 2acb4 <EnableChainBoot+0x38>
   2ac90:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   2ac94:	ebffff21 	bl	2a920 <memcpy>
   2ac98:	e3a03000 	mov	r3, #0
   2ac9c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2aca0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2aca4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2aca8:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2acac:	e8bd8010 	pop	{r4, pc}
   2acb0:	0004e23c 	.word	0x0004e23c
   2acb4:	0002ac34 	.word	0x0002ac34

0002acb8 <IsChainBootEnabled>:
   2acb8:	e59f300c 	ldr	r3, [pc, #12]	; 2accc <IsChainBootEnabled+0x14>
   2acbc:	e5930000 	ldr	r0, [r3]
   2acc0:	e2900000 	adds	r0, r0, #0
   2acc4:	13a00001 	movne	r0, #1
   2acc8:	e12fff1e 	bx	lr
   2accc:	0004e23c 	.word	0x0004e23c

0002acd0 <DoChainBoot>:
   2acd0:	e59f3008 	ldr	r3, [pc, #8]	; 2ace0 <DoChainBoot+0x10>
   2acd4:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   2acd8:	e8930003 	ldm	r3, {r0, r1}
   2acdc:	e12fff12 	bx	r2
   2ace0:	0004e23c 	.word	0x0004e23c

0002ace4 <CMACAddress::CMACAddress()>:
   2ace4:	e3a02000 	mov	r2, #0
   2ace8:	e5c02000 	strb	r2, [r0]
   2acec:	e12fff1e 	bx	lr

0002acf0 <CMACAddress::~CMACAddress()>:
   2acf0:	e12fff1e 	bx	lr

0002acf4 <CMACAddress::operator==(CMACAddress const&) const>:
   2acf4:	e5d03000 	ldrb	r3, [r0]
   2acf8:	e92d4010 	push	{r4, lr}
   2acfc:	e3530000 	cmp	r3, #0
   2ad00:	0a000009 	beq	2ad2c <CMACAddress::operator==(CMACAddress const&) const+0x38>
   2ad04:	e5d13000 	ldrb	r3, [r1]
   2ad08:	e2800001 	add	r0, r0, #1
   2ad0c:	e3530000 	cmp	r3, #0
   2ad10:	0a000009 	beq	2ad3c <CMACAddress::operator==(CMACAddress const&) const+0x48>
   2ad14:	e2811001 	add	r1, r1, #1
   2ad18:	e3a02006 	mov	r2, #6
   2ad1c:	ebfffcc3 	bl	2a030 <memcmp>
   2ad20:	e16f0f10 	clz	r0, r0
   2ad24:	e1a002a0 	lsr	r0, r0, #5
   2ad28:	e8bd8010 	pop	{r4, pc}
   2ad2c:	e3a02029 	mov	r2, #41	; 0x29
   2ad30:	e59f1014 	ldr	r1, [pc, #20]	; 2ad4c <CMACAddress::operator==(CMACAddress const&) const+0x58>
   2ad34:	e59f0014 	ldr	r0, [pc, #20]	; 2ad50 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   2ad38:	ebffe6b4 	bl	24810 <assertion_failed>
   2ad3c:	e3a02041 	mov	r2, #65	; 0x41
   2ad40:	e59f1004 	ldr	r1, [pc, #4]	; 2ad4c <CMACAddress::operator==(CMACAddress const&) const+0x58>
   2ad44:	e59f0004 	ldr	r0, [pc, #4]	; 2ad50 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   2ad48:	ebffe6b0 	bl	24810 <assertion_failed>
   2ad4c:	0004593c 	.word	0x0004593c
   2ad50:	0003f9e0 	.word	0x0003f9e0

0002ad54 <CMACAddress::operator!=(CMACAddress const&) const>:
   2ad54:	e92d4010 	push	{r4, lr}
   2ad58:	ebffffe5 	bl	2acf4 <CMACAddress::operator==(CMACAddress const&) const>
   2ad5c:	e2200001 	eor	r0, r0, #1
   2ad60:	e6ef0070 	uxtb	r0, r0
   2ad64:	e8bd8010 	pop	{r4, pc}

0002ad68 <CMACAddress::Set(unsigned char const*)>:
   2ad68:	e3510000 	cmp	r1, #0
   2ad6c:	e92d4010 	push	{r4, lr}
   2ad70:	0a000006 	beq	2ad90 <CMACAddress::Set(unsigned char const*)+0x28>
   2ad74:	e1a04000 	mov	r4, r0
   2ad78:	e3a02006 	mov	r2, #6
   2ad7c:	e2800001 	add	r0, r0, #1
   2ad80:	ebfffee6 	bl	2a920 <memcpy>
   2ad84:	e3a03001 	mov	r3, #1
   2ad88:	e5c43000 	strb	r3, [r4]
   2ad8c:	e8bd8010 	pop	{r4, pc}
   2ad90:	e3a02034 	mov	r2, #52	; 0x34
   2ad94:	e59f1004 	ldr	r1, [pc, #4]	; 2ada0 <CMACAddress::Set(unsigned char const*)+0x38>
   2ad98:	e59f0004 	ldr	r0, [pc, #4]	; 2ada4 <CMACAddress::Set(unsigned char const*)+0x3c>
   2ad9c:	ebffe69b 	bl	24810 <assertion_failed>
   2ada0:	0004593c 	.word	0x0004593c
   2ada4:	00044580 	.word	0x00044580

0002ada8 <CMACAddress::CMACAddress(unsigned char const*)>:
   2ada8:	e92d4010 	push	{r4, lr}
   2adac:	e1a04000 	mov	r4, r0
   2adb0:	ebffffec 	bl	2ad68 <CMACAddress::Set(unsigned char const*)>
   2adb4:	e1a00004 	mov	r0, r4
   2adb8:	e8bd8010 	pop	{r4, pc}

0002adbc <CMACAddress::SetBroadcast()>:
   2adbc:	e92d4010 	push	{r4, lr}
   2adc0:	e3a02006 	mov	r2, #6
   2adc4:	e1a04000 	mov	r4, r0
   2adc8:	e3a010ff 	mov	r1, #255	; 0xff
   2adcc:	e2800001 	add	r0, r0, #1
   2add0:	ebfffc5b 	bl	29f44 <memset>
   2add4:	e3a03001 	mov	r3, #1
   2add8:	e5c43000 	strb	r3, [r4]
   2addc:	e8bd8010 	pop	{r4, pc}

0002ade0 <CMACAddress::Get() const>:
   2ade0:	e5d03000 	ldrb	r3, [r0]
   2ade4:	e3530000 	cmp	r3, #0
   2ade8:	0a000001 	beq	2adf4 <CMACAddress::Get() const+0x14>
   2adec:	e2800001 	add	r0, r0, #1
   2adf0:	e12fff1e 	bx	lr
   2adf4:	e92d4010 	push	{r4, lr}
   2adf8:	e3a02041 	mov	r2, #65	; 0x41
   2adfc:	e59f1004 	ldr	r1, [pc, #4]	; 2ae08 <CMACAddress::Get() const+0x28>
   2ae00:	e59f0004 	ldr	r0, [pc, #4]	; 2ae0c <CMACAddress::Get() const+0x2c>
   2ae04:	ebffe681 	bl	24810 <assertion_failed>
   2ae08:	0004593c 	.word	0x0004593c
   2ae0c:	0003f9e0 	.word	0x0003f9e0

0002ae10 <CMACAddress::CopyTo(unsigned char*) const>:
   2ae10:	e5d02000 	ldrb	r2, [r0]
   2ae14:	e92d4010 	push	{r4, lr}
   2ae18:	e3520000 	cmp	r2, #0
   2ae1c:	0a000007 	beq	2ae40 <CMACAddress::CopyTo(unsigned char*) const+0x30>
   2ae20:	e3510000 	cmp	r1, #0
   2ae24:	e1a03001 	mov	r3, r1
   2ae28:	0a000008 	beq	2ae50 <CMACAddress::CopyTo(unsigned char*) const+0x40>
   2ae2c:	e8bd4010 	pop	{r4, lr}
   2ae30:	e2801001 	add	r1, r0, #1
   2ae34:	e3a02006 	mov	r2, #6
   2ae38:	e1a00003 	mov	r0, r3
   2ae3c:	eafffeb7 	b	2a920 <memcpy>
   2ae40:	e3a02047 	mov	r2, #71	; 0x47
   2ae44:	e59f1014 	ldr	r1, [pc, #20]	; 2ae60 <CMACAddress::CopyTo(unsigned char*) const+0x50>
   2ae48:	e59f0014 	ldr	r0, [pc, #20]	; 2ae64 <CMACAddress::CopyTo(unsigned char*) const+0x54>
   2ae4c:	ebffe66f 	bl	24810 <assertion_failed>
   2ae50:	e3a02048 	mov	r2, #72	; 0x48
   2ae54:	e59f1004 	ldr	r1, [pc, #4]	; 2ae60 <CMACAddress::CopyTo(unsigned char*) const+0x50>
   2ae58:	e59f0008 	ldr	r0, [pc, #8]	; 2ae68 <CMACAddress::CopyTo(unsigned char*) const+0x58>
   2ae5c:	ebffe66b 	bl	24810 <assertion_failed>
   2ae60:	0004593c 	.word	0x0004593c
   2ae64:	0003f9e0 	.word	0x0003f9e0
   2ae68:	00040c5c 	.word	0x00040c5c

0002ae6c <CMACAddress::IsBroadcast() const>:
   2ae6c:	e5d0c000 	ldrb	ip, [r0]
   2ae70:	e35c0000 	cmp	ip, #0
   2ae74:	12803001 	addne	r3, r0, #1
   2ae78:	12802007 	addne	r2, r0, #7
   2ae7c:	0a000009 	beq	2aea8 <CMACAddress::IsBroadcast() const+0x3c>
   2ae80:	e4d31001 	ldrb	r1, [r3], #1
   2ae84:	e35100ff 	cmp	r1, #255	; 0xff
   2ae88:	1a000003 	bne	2ae9c <CMACAddress::IsBroadcast() const+0x30>
   2ae8c:	e1530002 	cmp	r3, r2
   2ae90:	1afffffa 	bne	2ae80 <CMACAddress::IsBroadcast() const+0x14>
   2ae94:	e1a0000c 	mov	r0, ip
   2ae98:	e12fff1e 	bx	lr
   2ae9c:	e3a0c000 	mov	ip, #0
   2aea0:	e1a0000c 	mov	r0, ip
   2aea4:	e12fff1e 	bx	lr
   2aea8:	e92d4010 	push	{r4, lr}
   2aeac:	e3a0204e 	mov	r2, #78	; 0x4e
   2aeb0:	e59f1004 	ldr	r1, [pc, #4]	; 2aebc <CMACAddress::IsBroadcast() const+0x50>
   2aeb4:	e59f0004 	ldr	r0, [pc, #4]	; 2aec0 <CMACAddress::IsBroadcast() const+0x54>
   2aeb8:	ebffe654 	bl	24810 <assertion_failed>
   2aebc:	0004593c 	.word	0x0004593c
   2aec0:	0003f9e0 	.word	0x0003f9e0

0002aec4 <CMACAddress::GetSize() const>:
   2aec4:	e3a00006 	mov	r0, #6
   2aec8:	e12fff1e 	bx	lr

0002aecc <CMACAddress::Format(CString*) const>:
   2aecc:	e92d4030 	push	{r4, r5, lr}
   2aed0:	e5d03000 	ldrb	r3, [r0]
   2aed4:	e24dd014 	sub	sp, sp, #20
   2aed8:	e3530000 	cmp	r3, #0
   2aedc:	0a00000f 	beq	2af20 <CMACAddress::Format(CString*) const+0x54>
   2aee0:	e3510000 	cmp	r1, #0
   2aee4:	0a000011 	beq	2af30 <CMACAddress::Format(CString*) const+0x64>
   2aee8:	e5d05006 	ldrb	r5, [r0, #6]
   2aeec:	e5d04005 	ldrb	r4, [r0, #5]
   2aef0:	e5d0e004 	ldrb	lr, [r0, #4]
   2aef4:	e5d0c003 	ldrb	ip, [r0, #3]
   2aef8:	e5d03002 	ldrb	r3, [r0, #2]
   2aefc:	e5d02001 	ldrb	r2, [r0, #1]
   2af00:	e1a00001 	mov	r0, r1
   2af04:	e58d500c 	str	r5, [sp, #12]
   2af08:	e58d4008 	str	r4, [sp, #8]
   2af0c:	e88d5000 	stm	sp, {ip, lr}
   2af10:	e59f1028 	ldr	r1, [pc, #40]	; 2af40 <CMACAddress::Format(CString*) const+0x74>
   2af14:	ebfff859 	bl	29080 <CString::Format(char const*, ...)>
   2af18:	e28dd014 	add	sp, sp, #20
   2af1c:	e8bd8030 	pop	{r4, r5, pc}
   2af20:	e3a02062 	mov	r2, #98	; 0x62
   2af24:	e59f1018 	ldr	r1, [pc, #24]	; 2af44 <CMACAddress::Format(CString*) const+0x78>
   2af28:	e59f0018 	ldr	r0, [pc, #24]	; 2af48 <CMACAddress::Format(CString*) const+0x7c>
   2af2c:	ebffe637 	bl	24810 <assertion_failed>
   2af30:	e3a02063 	mov	r2, #99	; 0x63
   2af34:	e59f1008 	ldr	r1, [pc, #8]	; 2af44 <CMACAddress::Format(CString*) const+0x78>
   2af38:	e59f000c 	ldr	r0, [pc, #12]	; 2af4c <CMACAddress::Format(CString*) const+0x80>
   2af3c:	ebffe633 	bl	24810 <assertion_failed>
   2af40:	0004594c 	.word	0x0004594c
   2af44:	0004593c 	.word	0x0004593c
   2af48:	0003f9e0 	.word	0x0003f9e0
   2af4c:	00044590 	.word	0x00044590

0002af50 <CNetDevice::AddNetDevice()>:
   2af50:	e59f2018 	ldr	r2, [pc, #24]	; 2af70 <CNetDevice::AddNetDevice()+0x20>
   2af54:	e5923000 	ldr	r3, [r2]
   2af58:	e3530004 	cmp	r3, #4
   2af5c:	92831001 	addls	r1, r3, #1
   2af60:	90823103 	addls	r3, r2, r3, lsl #2
   2af64:	95821000 	strls	r1, [r2]
   2af68:	95830004 	strls	r0, [r3, #4]
   2af6c:	e12fff1e 	bx	lr
   2af70:	0004e244 	.word	0x0004e244

0002af74 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   2af74:	e3500005 	cmp	r0, #5
   2af78:	d59f3008 	ldrle	r3, [pc, #8]	; 2af88 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x14>
   2af7c:	d7930100 	ldrle	r0, [r3, r0, lsl #2]
   2af80:	c59f0004 	ldrgt	r0, [pc, #4]	; 2af8c <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x18>
   2af84:	e12fff1e 	bx	lr
   2af88:	00048348 	.word	0x00048348
   2af8c:	0004596c 	.word	0x0004596c

0002af90 <CNetDevice::GetNetDevice(unsigned int)>:
   2af90:	e59f3014 	ldr	r3, [pc, #20]	; 2afac <CNetDevice::GetNetDevice(unsigned int)+0x1c>
   2af94:	e5932000 	ldr	r2, [r3]
   2af98:	e1520000 	cmp	r2, r0
   2af9c:	80833100 	addhi	r3, r3, r0, lsl #2
   2afa0:	85930004 	ldrhi	r0, [r3, #4]
   2afa4:	93a00000 	movls	r0, #0
   2afa8:	e12fff1e 	bx	lr
   2afac:	0004e244 	.word	0x0004e244

0002afb0 <CNetDevice::GetNetDevice(TNetDeviceType)>:
   2afb0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2afb4:	e59f608c 	ldr	r6, [pc, #140]	; 2b048 <CNetDevice::GetNetDevice(TNetDeviceType)+0x98>
   2afb8:	e5963000 	ldr	r3, [r6]
   2afbc:	e3530000 	cmp	r3, #0
   2afc0:	0a00001a 	beq	2b030 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   2afc4:	e5965004 	ldr	r5, [r6, #4]
   2afc8:	e3550000 	cmp	r5, #0
   2afcc:	0a000017 	beq	2b030 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   2afd0:	e3500002 	cmp	r0, #2
   2afd4:	0a000013 	beq	2b028 <CNetDevice::GetNetDevice(TNetDeviceType)+0x78>
   2afd8:	e3a04000 	mov	r4, #0
   2afdc:	e1a08000 	mov	r8, r0
   2afe0:	e59f9064 	ldr	r9, [pc, #100]	; 2b04c <CNetDevice::GetNetDevice(TNetDeviceType)+0x9c>
   2afe4:	e1a0a004 	mov	sl, r4
   2afe8:	e2867004 	add	r7, r6, #4
   2afec:	ea000005 	b	2b008 <CNetDevice::GetNetDevice(TNetDeviceType)+0x58>
   2aff0:	e5963000 	ldr	r3, [r6]
   2aff4:	e1530004 	cmp	r3, r4
   2aff8:	9a00000c 	bls	2b030 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   2affc:	e7975104 	ldr	r5, [r7, r4, lsl #2]
   2b000:	e3550000 	cmp	r5, #0
   2b004:	0a000009 	beq	2b030 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   2b008:	e5953000 	ldr	r3, [r5]
   2b00c:	e5933008 	ldr	r3, [r3, #8]
   2b010:	e1530009 	cmp	r3, r9
   2b014:	01a0000a 	moveq	r0, sl
   2b018:	1a000007 	bne	2b03c <CNetDevice::GetNetDevice(TNetDeviceType)+0x8c>
   2b01c:	e1580000 	cmp	r8, r0
   2b020:	e2844001 	add	r4, r4, #1
   2b024:	1afffff1 	bne	2aff0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x40>
   2b028:	e1a00005 	mov	r0, r5
   2b02c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b030:	e3a05000 	mov	r5, #0
   2b034:	e1a00005 	mov	r0, r5
   2b038:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b03c:	e1a00005 	mov	r0, r5
   2b040:	e12fff33 	blx	r3
   2b044:	eafffff4 	b	2b01c <CNetDevice::GetNetDevice(TNetDeviceType)+0x6c>
   2b048:	0004e244 	.word	0x0004e244
   2b04c:	000161a4 	.word	0x000161a4

0002b050 <operator new(unsigned int, int)>:
   2b050:	eaffffff 	b	2b054 <operator new[](unsigned int, int)>

0002b054 <operator new[](unsigned int, int)>:
   2b054:	e3510000 	cmp	r1, #0
   2b058:	0a000001 	beq	2b064 <operator new[](unsigned int, int)+0x10>
   2b05c:	e3510002 	cmp	r1, #2
   2b060:	1a000004 	bne	2b078 <operator new[](unsigned int, int)+0x24>
   2b064:	e59f3014 	ldr	r3, [pc, #20]	; 2b080 <operator new[](unsigned int, int)+0x2c>
   2b068:	e1a01000 	mov	r1, r0
   2b06c:	e5930000 	ldr	r0, [r3]
   2b070:	e280000c 	add	r0, r0, #12
   2b074:	ea000036 	b	2b154 <CHeapAllocator::Allocate(unsigned int)>
   2b078:	e3a00000 	mov	r0, #0
   2b07c:	e12fff1e 	bx	lr
   2b080:	0004e260 	.word	0x0004e260

0002b084 <operator new(unsigned int)>:
   2b084:	eaffffff 	b	2b088 <operator new[](unsigned int)>

0002b088 <operator new[](unsigned int)>:
   2b088:	e59f300c 	ldr	r3, [pc, #12]	; 2b09c <operator new[](unsigned int)+0x14>
   2b08c:	e1a01000 	mov	r1, r0
   2b090:	e5930000 	ldr	r0, [r3]
   2b094:	e280000c 	add	r0, r0, #12
   2b098:	ea00002d 	b	2b154 <CHeapAllocator::Allocate(unsigned int)>
   2b09c:	0004e260 	.word	0x0004e260

0002b0a0 <operator delete(void*)>:
   2b0a0:	eaffffff 	b	2b0a4 <operator delete[](void*)>

0002b0a4 <operator delete[](void*)>:
   2b0a4:	e59f300c 	ldr	r3, [pc, #12]	; 2b0b8 <operator delete[](void*)+0x14>
   2b0a8:	e1a01000 	mov	r1, r0
   2b0ac:	e5930000 	ldr	r0, [r3]
   2b0b0:	e280000c 	add	r0, r0, #12
   2b0b4:	ea0000a4 	b	2b34c <CHeapAllocator::Free(void*)>
   2b0b8:	0004e260 	.word	0x0004e260

0002b0bc <operator delete(void*, unsigned int)>:
   2b0bc:	eaffffff 	b	2b0c0 <operator delete[](void*, unsigned int)>

0002b0c0 <operator delete[](void*, unsigned int)>:
   2b0c0:	e59f300c 	ldr	r3, [pc, #12]	; 2b0d4 <operator delete[](void*, unsigned int)+0x14>
   2b0c4:	e1a01000 	mov	r1, r0
   2b0c8:	e5930000 	ldr	r0, [r3]
   2b0cc:	e280000c 	add	r0, r0, #12
   2b0d0:	ea00009d 	b	2b34c <CHeapAllocator::Free(void*)>
   2b0d4:	0004e260 	.word	0x0004e260

0002b0d8 <CHeapAllocator::CHeapAllocator(char const*)>:
   2b0d8:	e3a03000 	mov	r3, #0
   2b0dc:	e3a02001 	mov	r2, #1
   2b0e0:	e92d4010 	push	{r4, lr}
   2b0e4:	e1a04000 	mov	r4, r0
   2b0e8:	e5801000 	str	r1, [r0]
   2b0ec:	e58020b8 	str	r2, [r0, #184]	; 0xb8
   2b0f0:	e5803004 	str	r3, [r0, #4]
   2b0f4:	e5803008 	str	r3, [r0, #8]
   2b0f8:	e580300c 	str	r3, [r0, #12]
   2b0fc:	e1a01003 	mov	r1, r3
   2b100:	e3a020a8 	mov	r2, #168	; 0xa8
   2b104:	e2800010 	add	r0, r0, #16
   2b108:	ebfffb8d 	bl	29f44 <memset>
   2b10c:	e1a03004 	mov	r3, r4
   2b110:	e59f201c 	ldr	r2, [pc, #28]	; 2b134 <CHeapAllocator::CHeapAllocator(char const*)+0x5c>
   2b114:	e2840038 	add	r0, r4, #56	; 0x38
   2b118:	e4921004 	ldr	r1, [r2], #4
   2b11c:	e2833008 	add	r3, r3, #8
   2b120:	e5831008 	str	r1, [r3, #8]
   2b124:	e1530000 	cmp	r3, r0
   2b128:	1afffffa 	bne	2b118 <CHeapAllocator::CHeapAllocator(char const*)+0x40>
   2b12c:	e1a00004 	mov	r0, r4
   2b130:	e8bd8010 	pop	{r4, pc}
   2b134:	00048360 	.word	0x00048360

0002b138 <CHeapAllocator::~CHeapAllocator()>:
   2b138:	e12fff1e 	bx	lr

0002b13c <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   2b13c:	e0812002 	add	r2, r1, r2
   2b140:	e980000e 	stmib	r0, {r1, r2, r3}
   2b144:	e12fff1e 	bx	lr

0002b148 <CHeapAllocator::GetFreeSpace() const>:
   2b148:	e9900005 	ldmib	r0, {r0, r2}
   2b14c:	e0420000 	sub	r0, r2, r0
   2b150:	e12fff1e 	bx	lr

0002b154 <CHeapAllocator::Allocate(unsigned int)>:
   2b154:	e5903004 	ldr	r3, [r0, #4]
   2b158:	e3530000 	cmp	r3, #0
   2b15c:	0a000073 	beq	2b330 <CHeapAllocator::Allocate(unsigned int)+0x1dc>
   2b160:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2b164:	e1a06000 	mov	r6, r0
   2b168:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   2b16c:	e1a04001 	mov	r4, r1
   2b170:	e3500000 	cmp	r0, #0
   2b174:	1a000042 	bne	2b284 <CHeapAllocator::Allocate(unsigned int)+0x130>
   2b178:	e5963010 	ldr	r3, [r6, #16]
   2b17c:	e2862010 	add	r2, r6, #16
   2b180:	e3530000 	cmp	r3, #0
   2b184:	0a000007 	beq	2b1a8 <CHeapAllocator::Allocate(unsigned int)+0x54>
   2b188:	e1540003 	cmp	r4, r3
   2b18c:	8a000002 	bhi	2b19c <CHeapAllocator::Allocate(unsigned int)+0x48>
   2b190:	ea000016 	b	2b1f0 <CHeapAllocator::Allocate(unsigned int)+0x9c>
   2b194:	e1530004 	cmp	r3, r4
   2b198:	2a000014 	bcs	2b1f0 <CHeapAllocator::Allocate(unsigned int)+0x9c>
   2b19c:	e5b23008 	ldr	r3, [r2, #8]!
   2b1a0:	e3530000 	cmp	r3, #0
   2b1a4:	1afffffa 	bne	2b194 <CHeapAllocator::Allocate(unsigned int)+0x40>
   2b1a8:	e5965004 	ldr	r5, [r6, #4]
   2b1ac:	e284301f 	add	r3, r4, #31
   2b1b0:	e3c3300f 	bic	r3, r3, #15
   2b1b4:	e0853003 	add	r3, r5, r3
   2b1b8:	e1550003 	cmp	r5, r3
   2b1bc:	e596700c 	ldr	r7, [r6, #12]
   2b1c0:	2a000003 	bcs	2b1d4 <CHeapAllocator::Allocate(unsigned int)+0x80>
   2b1c4:	e5962008 	ldr	r2, [r6, #8]
   2b1c8:	e0422007 	sub	r2, r2, r7
   2b1cc:	e1530002 	cmp	r3, r2
   2b1d0:	9a00002d 	bls	2b28c <CHeapAllocator::Allocate(unsigned int)+0x138>
   2b1d4:	e3570000 	cmp	r7, #0
   2b1d8:	1a000047 	bne	2b2fc <CHeapAllocator::Allocate(unsigned int)+0x1a8>
   2b1dc:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2b1e0:	e3530000 	cmp	r3, #0
   2b1e4:	1a00003d 	bne	2b2e0 <CHeapAllocator::Allocate(unsigned int)+0x18c>
   2b1e8:	e3a00000 	mov	r0, #0
   2b1ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b1f0:	e5925004 	ldr	r5, [r2, #4]
   2b1f4:	e3550000 	cmp	r5, #0
   2b1f8:	01a04003 	moveq	r4, r3
   2b1fc:	0affffe9 	beq	2b1a8 <CHeapAllocator::Allocate(unsigned int)+0x54>
   2b200:	e5d50001 	ldrb	r0, [r5, #1]
   2b204:	e5d53000 	ldrb	r3, [r5]
   2b208:	e5d51002 	ldrb	r1, [r5, #2]
   2b20c:	e1833400 	orr	r3, r3, r0, lsl #8
   2b210:	e5d50003 	ldrb	r0, [r5, #3]
   2b214:	e1833801 	orr	r3, r3, r1, lsl #16
   2b218:	e59f1118 	ldr	r1, [pc, #280]	; 2b338 <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   2b21c:	e1833c00 	orr	r3, r3, r0, lsl #24
   2b220:	e1530001 	cmp	r3, r1
   2b224:	1a000030 	bne	2b2ec <CHeapAllocator::Allocate(unsigned int)+0x198>
   2b228:	e5d51009 	ldrb	r1, [r5, #9]
   2b22c:	e5d53008 	ldrb	r3, [r5, #8]
   2b230:	e5d5000a 	ldrb	r0, [r5, #10]
   2b234:	e1833401 	orr	r3, r3, r1, lsl #8
   2b238:	e5d5100b 	ldrb	r1, [r5, #11]
   2b23c:	e1833800 	orr	r3, r3, r0, lsl #16
   2b240:	e1833c01 	orr	r3, r3, r1, lsl #24
   2b244:	e5823004 	str	r3, [r2, #4]
   2b248:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2b24c:	e3530000 	cmp	r3, #0
   2b250:	1a000020 	bne	2b2d8 <CHeapAllocator::Allocate(unsigned int)+0x184>
   2b254:	e3a03000 	mov	r3, #0
   2b258:	e2850010 	add	r0, r5, #16
   2b25c:	e310000f 	tst	r0, #15
   2b260:	e5c53008 	strb	r3, [r5, #8]
   2b264:	e5c53009 	strb	r3, [r5, #9]
   2b268:	e5c5300a 	strb	r3, [r5, #10]
   2b26c:	e5c5300b 	strb	r3, [r5, #11]
   2b270:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2b274:	e3a0208e 	mov	r2, #142	; 0x8e
   2b278:	e59f10bc 	ldr	r1, [pc, #188]	; 2b33c <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   2b27c:	e59f00bc 	ldr	r0, [pc, #188]	; 2b340 <CHeapAllocator::Allocate(unsigned int)+0x1ec>
   2b280:	ebffe562 	bl	24810 <assertion_failed>
   2b284:	eb0002b0 	bl	2bd4c <EnterCritical>
   2b288:	eaffffba 	b	2b178 <CHeapAllocator::Allocate(unsigned int)+0x24>
   2b28c:	e3a0e043 	mov	lr, #67	; 0x43
   2b290:	e3a0c04d 	mov	ip, #77	; 0x4d
   2b294:	e3a0004c 	mov	r0, #76	; 0x4c
   2b298:	e3a01042 	mov	r1, #66	; 0x42
   2b29c:	e5863004 	str	r3, [r6, #4]
   2b2a0:	e1a03824 	lsr	r3, r4, #16
   2b2a4:	e5c53006 	strb	r3, [r5, #6]
   2b2a8:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2b2ac:	e1a02424 	lsr	r2, r4, #8
   2b2b0:	e5c54004 	strb	r4, [r5, #4]
   2b2b4:	e3530000 	cmp	r3, #0
   2b2b8:	e1a04c24 	lsr	r4, r4, #24
   2b2bc:	e5c5e000 	strb	lr, [r5]
   2b2c0:	e5c5c001 	strb	ip, [r5, #1]
   2b2c4:	e5c50002 	strb	r0, [r5, #2]
   2b2c8:	e5c51003 	strb	r1, [r5, #3]
   2b2cc:	e5c52005 	strb	r2, [r5, #5]
   2b2d0:	e5c54007 	strb	r4, [r5, #7]
   2b2d4:	0affffde 	beq	2b254 <CHeapAllocator::Allocate(unsigned int)+0x100>
   2b2d8:	eb0002c6 	bl	2bdf8 <LeaveCritical>
   2b2dc:	eaffffdc 	b	2b254 <CHeapAllocator::Allocate(unsigned int)+0x100>
   2b2e0:	eb0002c4 	bl	2bdf8 <LeaveCritical>
   2b2e4:	e1a00007 	mov	r0, r7
   2b2e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b2ec:	e3a0205e 	mov	r2, #94	; 0x5e
   2b2f0:	e59f1044 	ldr	r1, [pc, #68]	; 2b33c <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   2b2f4:	e59f0048 	ldr	r0, [pc, #72]	; 2b344 <CHeapAllocator::Allocate(unsigned int)+0x1f0>
   2b2f8:	ebffe544 	bl	24810 <assertion_failed>
   2b2fc:	e3a02000 	mov	r2, #0
   2b300:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2b304:	e586200c 	str	r2, [r6, #12]
   2b308:	e1530002 	cmp	r3, r2
   2b30c:	0a000000 	beq	2b314 <CHeapAllocator::Allocate(unsigned int)+0x1c0>
   2b310:	eb0002b8 	bl	2bdf8 <LeaveCritical>
   2b314:	ebffee30 	bl	26bdc <CLogger::Get()>
   2b318:	e5961000 	ldr	r1, [r6]
   2b31c:	e59f3024 	ldr	r3, [pc, #36]	; 2b348 <CHeapAllocator::Allocate(unsigned int)+0x1f4>
   2b320:	e3a02000 	mov	r2, #0
   2b324:	ebffed69 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b328:	e3a00000 	mov	r0, #0
   2b32c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b330:	e3a00000 	mov	r0, #0
   2b334:	e12fff1e 	bx	lr
   2b338:	424c4d43 	.word	0x424c4d43
   2b33c:	00045a04 	.word	0x00045a04
   2b340:	00045a54 	.word	0x00045a54
   2b344:	00045a18 	.word	0x00045a18
   2b348:	00045a44 	.word	0x00045a44

0002b34c <CHeapAllocator::Free(void*)>:
   2b34c:	e3510000 	cmp	r1, #0
   2b350:	012fff1e 	bxeq	lr
   2b354:	e92d4070 	push	{r4, r5, r6, lr}
   2b358:	e2415010 	sub	r5, r1, #16
   2b35c:	e5513010 	ldrb	r3, [r1, #-16]
   2b360:	e5d51001 	ldrb	r1, [r5, #1]
   2b364:	e5d52002 	ldrb	r2, [r5, #2]
   2b368:	e1833401 	orr	r3, r3, r1, lsl #8
   2b36c:	e5d51003 	ldrb	r1, [r5, #3]
   2b370:	e1833802 	orr	r3, r3, r2, lsl #16
   2b374:	e59f20dc 	ldr	r2, [pc, #220]	; 2b458 <CHeapAllocator::Free(void*)+0x10c>
   2b378:	e1833c01 	orr	r3, r3, r1, lsl #24
   2b37c:	e1530002 	cmp	r3, r2
   2b380:	e1a06000 	mov	r6, r0
   2b384:	1a00002f 	bne	2b448 <CHeapAllocator::Free(void*)+0xfc>
   2b388:	e5903010 	ldr	r3, [r0, #16]
   2b38c:	e2804010 	add	r4, r0, #16
   2b390:	e3530000 	cmp	r3, #0
   2b394:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b398:	e5d51005 	ldrb	r1, [r5, #5]
   2b39c:	e5d52004 	ldrb	r2, [r5, #4]
   2b3a0:	e5d50006 	ldrb	r0, [r5, #6]
   2b3a4:	e1822401 	orr	r2, r2, r1, lsl #8
   2b3a8:	e5d51007 	ldrb	r1, [r5, #7]
   2b3ac:	e1822800 	orr	r2, r2, r0, lsl #16
   2b3b0:	e1822c01 	orr	r2, r2, r1, lsl #24
   2b3b4:	e1530002 	cmp	r3, r2
   2b3b8:	1a000002 	bne	2b3c8 <CHeapAllocator::Free(void*)+0x7c>
   2b3bc:	ea000005 	b	2b3d8 <CHeapAllocator::Free(void*)+0x8c>
   2b3c0:	e1520003 	cmp	r2, r3
   2b3c4:	0a000003 	beq	2b3d8 <CHeapAllocator::Free(void*)+0x8c>
   2b3c8:	e5b43008 	ldr	r3, [r4, #8]!
   2b3cc:	e3530000 	cmp	r3, #0
   2b3d0:	1afffffa 	bne	2b3c0 <CHeapAllocator::Free(void*)+0x74>
   2b3d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b3d8:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   2b3dc:	e3500000 	cmp	r0, #0
   2b3e0:	1a000009 	bne	2b40c <CHeapAllocator::Free(void*)+0xc0>
   2b3e4:	e5d40004 	ldrb	r0, [r4, #4]
   2b3e8:	e5d41005 	ldrb	r1, [r4, #5]
   2b3ec:	e5d42006 	ldrb	r2, [r4, #6]
   2b3f0:	e5d43007 	ldrb	r3, [r4, #7]
   2b3f4:	e5c50008 	strb	r0, [r5, #8]
   2b3f8:	e5c51009 	strb	r1, [r5, #9]
   2b3fc:	e5c5200a 	strb	r2, [r5, #10]
   2b400:	e5c5300b 	strb	r3, [r5, #11]
   2b404:	e5845004 	str	r5, [r4, #4]
   2b408:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b40c:	eb00024e 	bl	2bd4c <EnterCritical>
   2b410:	e596c0b8 	ldr	ip, [r6, #184]	; 0xb8
   2b414:	e5d40004 	ldrb	r0, [r4, #4]
   2b418:	e5d41005 	ldrb	r1, [r4, #5]
   2b41c:	e5d42006 	ldrb	r2, [r4, #6]
   2b420:	e5d43007 	ldrb	r3, [r4, #7]
   2b424:	e35c0000 	cmp	ip, #0
   2b428:	e5c50008 	strb	r0, [r5, #8]
   2b42c:	e5c51009 	strb	r1, [r5, #9]
   2b430:	e5c5200a 	strb	r2, [r5, #10]
   2b434:	e5c5300b 	strb	r3, [r5, #11]
   2b438:	e5845004 	str	r5, [r4, #4]
   2b43c:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b440:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b444:	ea00026b 	b	2bdf8 <LeaveCritical>
   2b448:	e3a020bf 	mov	r2, #191	; 0xbf
   2b44c:	e59f1008 	ldr	r1, [pc, #8]	; 2b45c <CHeapAllocator::Free(void*)+0x110>
   2b450:	e59f0008 	ldr	r0, [pc, #8]	; 2b460 <CHeapAllocator::Free(void*)+0x114>
   2b454:	ebffe4ed 	bl	24810 <assertion_failed>
   2b458:	424c4d43 	.word	0x424c4d43
   2b45c:	00045a04 	.word	0x00045a04
   2b460:	00045a18 	.word	0x00045a18

0002b464 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   2b464:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b468:	e2515000 	subs	r5, r1, #0
   2b46c:	e24dd00c 	sub	sp, sp, #12
   2b470:	0a000031 	beq	2b53c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xd8>
   2b474:	e3520000 	cmp	r2, #0
   2b478:	0a000033 	beq	2b54c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xe8>
   2b47c:	e2454010 	sub	r4, r5, #16
   2b480:	e5d4c001 	ldrb	ip, [r4, #1]
   2b484:	e5553010 	ldrb	r3, [r5, #-16]
   2b488:	e5d41002 	ldrb	r1, [r4, #2]
   2b48c:	e183340c 	orr	r3, r3, ip, lsl #8
   2b490:	e5d4c003 	ldrb	ip, [r4, #3]
   2b494:	e1833801 	orr	r3, r3, r1, lsl #16
   2b498:	e59f10c8 	ldr	r1, [pc, #200]	; 2b568 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x104>
   2b49c:	e1833c0c 	orr	r3, r3, ip, lsl #24
   2b4a0:	e1530001 	cmp	r3, r1
   2b4a4:	1a000020 	bne	2b52c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc8>
   2b4a8:	e5d41005 	ldrb	r1, [r4, #5]
   2b4ac:	e5d43004 	ldrb	r3, [r4, #4]
   2b4b0:	e5d4c006 	ldrb	ip, [r4, #6]
   2b4b4:	e1833401 	orr	r3, r3, r1, lsl #8
   2b4b8:	e5d41007 	ldrb	r1, [r4, #7]
   2b4bc:	e183380c 	orr	r3, r3, ip, lsl #16
   2b4c0:	e1833c01 	orr	r3, r3, r1, lsl #24
   2b4c4:	e1520003 	cmp	r2, r3
   2b4c8:	8a000002 	bhi	2b4d8 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x74>
   2b4cc:	e1a00005 	mov	r0, r5
   2b4d0:	e28dd00c 	add	sp, sp, #12
   2b4d4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b4d8:	e1a01002 	mov	r1, r2
   2b4dc:	e1a06000 	mov	r6, r0
   2b4e0:	ebffff1b 	bl	2b154 <CHeapAllocator::Allocate(unsigned int)>
   2b4e4:	e2507000 	subs	r7, r0, #0
   2b4e8:	0a00001c 	beq	2b560 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xfc>
   2b4ec:	e5d42005 	ldrb	r2, [r4, #5]
   2b4f0:	e5d43004 	ldrb	r3, [r4, #4]
   2b4f4:	e5d41006 	ldrb	r1, [r4, #6]
   2b4f8:	e1833402 	orr	r3, r3, r2, lsl #8
   2b4fc:	e5d42007 	ldrb	r2, [r4, #7]
   2b500:	e1833801 	orr	r3, r3, r1, lsl #16
   2b504:	e1832c02 	orr	r2, r3, r2, lsl #24
   2b508:	e1a01005 	mov	r1, r5
   2b50c:	ebfffd03 	bl	2a920 <memcpy>
   2b510:	e1a01005 	mov	r1, r5
   2b514:	e1a05007 	mov	r5, r7
   2b518:	e1a00006 	mov	r0, r6
   2b51c:	ebffff8a 	bl	2b34c <CHeapAllocator::Free(void*)>
   2b520:	e1a00005 	mov	r0, r5
   2b524:	e28dd00c 	add	sp, sp, #12
   2b528:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b52c:	e3a020a3 	mov	r2, #163	; 0xa3
   2b530:	e59f1034 	ldr	r1, [pc, #52]	; 2b56c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x108>
   2b534:	e59f0034 	ldr	r0, [pc, #52]	; 2b570 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x10c>
   2b538:	ebffe4b4 	bl	24810 <assertion_failed>
   2b53c:	e1a01002 	mov	r1, r2
   2b540:	e28dd00c 	add	sp, sp, #12
   2b544:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   2b548:	eaffff01 	b	2b154 <CHeapAllocator::Allocate(unsigned int)>
   2b54c:	e58d2004 	str	r2, [sp, #4]
   2b550:	ebffff7d 	bl	2b34c <CHeapAllocator::Free(void*)>
   2b554:	e59d2004 	ldr	r2, [sp, #4]
   2b558:	e1a05002 	mov	r5, r2
   2b55c:	eaffffda 	b	2b4cc <CHeapAllocator::ReAllocate(void*, unsigned int)+0x68>
   2b560:	e1a05007 	mov	r5, r7
   2b564:	eaffffd8 	b	2b4cc <CHeapAllocator::ReAllocate(void*, unsigned int)+0x68>
   2b568:	424c4d43 	.word	0x424c4d43
   2b56c:	00045a04 	.word	0x00045a04
   2b570:	00045a18 	.word	0x00045a18

0002b574 <CExceptionHandler::Get() [clone .part.1]>:
   2b574:	e92d4010 	push	{r4, lr}
   2b578:	e3a02087 	mov	r2, #135	; 0x87
   2b57c:	e59f1004 	ldr	r1, [pc, #4]	; 2b588 <CExceptionHandler::Get() [clone .part.1]+0x14>
   2b580:	e59f0004 	ldr	r0, [pc, #4]	; 2b58c <CExceptionHandler::Get() [clone .part.1]+0x18>
   2b584:	ebffe4a1 	bl	24810 <assertion_failed>
   2b588:	00045a88 	.word	0x00045a88
   2b58c:	000439ec 	.word	0x000439ec

0002b590 <CExceptionHandler::CExceptionHandler()>:
   2b590:	e59fc06c 	ldr	ip, [pc, #108]	; 2b604 <CExceptionHandler::CExceptionHandler()+0x74>
   2b594:	e92d4010 	push	{r4, lr}
   2b598:	e1a04000 	mov	r4, r0
   2b59c:	e59c0000 	ldr	r0, [ip]
   2b5a0:	e3500000 	cmp	r0, #0
   2b5a4:	1a000012 	bne	2b5f4 <CExceptionHandler::CExceptionHandler()+0x64>
   2b5a8:	e59f1058 	ldr	r1, [pc, #88]	; 2b608 <CExceptionHandler::CExceptionHandler()+0x78>
   2b5ac:	e59f2058 	ldr	r2, [pc, #88]	; 2b60c <CExceptionHandler::CExceptionHandler()+0x7c>
   2b5b0:	e59f3058 	ldr	r3, [pc, #88]	; 2b610 <CExceptionHandler::CExceptionHandler()+0x80>
   2b5b4:	e1a01141 	asr	r1, r1, #2
   2b5b8:	e1a02142 	asr	r2, r2, #2
   2b5bc:	e1a03143 	asr	r3, r3, #2
   2b5c0:	e2411002 	sub	r1, r1, #2
   2b5c4:	e2422002 	sub	r2, r2, #2
   2b5c8:	e2433002 	sub	r3, r3, #2
   2b5cc:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   2b5d0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2b5d4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2b5d8:	e58c4000 	str	r4, [ip]
   2b5dc:	e5801004 	str	r1, [r0, #4]
   2b5e0:	e580200c 	str	r2, [r0, #12]
   2b5e4:	e5803010 	str	r3, [r0, #16]
   2b5e8:	eb000227 	bl	2be8c <SyncDataAndInstructionCache>
   2b5ec:	e1a00004 	mov	r0, r4
   2b5f0:	e8bd8010 	pop	{r4, pc}
   2b5f4:	e3a02030 	mov	r2, #48	; 0x30
   2b5f8:	e59f1014 	ldr	r1, [pc, #20]	; 2b614 <CExceptionHandler::CExceptionHandler()+0x84>
   2b5fc:	e59f0014 	ldr	r0, [pc, #20]	; 2b618 <CExceptionHandler::CExceptionHandler()+0x88>
   2b600:	ebffe482 	bl	24810 <assertion_failed>
   2b604:	0004e25c 	.word	0x0004e25c
   2b608:	0002b8dc 	.word	0x0002b8dc
   2b60c:	0002b834 	.word	0x0002b834
   2b610:	0002b880 	.word	0x0002b880
   2b614:	00045a88 	.word	0x00045a88
   2b618:	000439b4 	.word	0x000439b4

0002b61c <CExceptionHandler::~CExceptionHandler()>:
   2b61c:	e3a02000 	mov	r2, #0
   2b620:	e59f3004 	ldr	r3, [pc, #4]	; 2b62c <CExceptionHandler::~CExceptionHandler()+0x10>
   2b624:	e5832000 	str	r2, [r3]
   2b628:	e12fff1e 	bx	lr
   2b62c:	0004e25c 	.word	0x0004e25c

0002b630 <CExceptionHandler::Throw(unsigned int)>:
   2b630:	e92d4010 	push	{r4, lr}
   2b634:	e1a04001 	mov	r4, r1
   2b638:	e24dd008 	sub	sp, sp, #8
   2b63c:	ebffed66 	bl	26bdc <CLogger::Get()>
   2b640:	e59f201c 	ldr	r2, [pc, #28]	; 2b664 <CExceptionHandler::Throw(unsigned int)+0x34>
   2b644:	e59f301c 	ldr	r3, [pc, #28]	; 2b668 <CExceptionHandler::Throw(unsigned int)+0x38>
   2b648:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   2b64c:	e3a02000 	mov	r2, #0
   2b650:	e58d1000 	str	r1, [sp]
   2b654:	e59f1010 	ldr	r1, [pc, #16]	; 2b66c <CExceptionHandler::Throw(unsigned int)+0x3c>
   2b658:	ebffec9c 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b65c:	e28dd008 	add	sp, sp, #8
   2b660:	e8bd8010 	pop	{r4, pc}
   2b664:	0004837c 	.word	0x0004837c
   2b668:	00045aa0 	.word	0x00045aa0
   2b66c:	00045a80 	.word	0x00045a80

0002b670 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   2b670:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2b674:	e3510002 	cmp	r1, #2
   2b678:	e24dd024 	sub	sp, sp, #36	; 0x24
   2b67c:	e1a05001 	mov	r5, r1
   2b680:	e1a04002 	mov	r4, r2
   2b684:	0a00002a 	beq	2b734 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
   2b688:	e3510003 	cmp	r1, #3
   2b68c:	0a000020 	beq	2b714 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
   2b690:	e3a08000 	mov	r8, #0
   2b694:	e1a09008 	mov	r9, r8
   2b698:	e3540000 	cmp	r4, #0
   2b69c:	0a000020 	beq	2b724 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   2b6a0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   2b6a4:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   2b6a8:	e203301f 	and	r3, r3, #31
   2b6ac:	e3530011 	cmp	r3, #17
   2b6b0:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   2b6b4:	0a000021 	beq	2b740 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd0>
   2b6b8:	e3530012 	cmp	r3, #18
   2b6bc:	089400c0 	ldmeq	r4, {r6, r7}
   2b6c0:	e59f1084 	ldr	r1, [pc, #132]	; 2b74c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2b6c4:	e1a00006 	mov	r0, r6
   2b6c8:	ebffe60a 	bl	24ef8 <debug_stacktrace(unsigned int const*, char const*)>
   2b6cc:	ebffed42 	bl	26bdc <CLogger::Get()>
   2b6d0:	e59f3078 	ldr	r3, [pc, #120]	; 2b750 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   2b6d4:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   2b6d8:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   2b6dc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   2b6e0:	e58d1000 	str	r1, [sp]
   2b6e4:	e58d2018 	str	r2, [sp, #24]
   2b6e8:	e58d3004 	str	r3, [sp, #4]
   2b6ec:	e58d7014 	str	r7, [sp, #20]
   2b6f0:	e58d6010 	str	r6, [sp, #16]
   2b6f4:	e58d800c 	str	r8, [sp, #12]
   2b6f8:	e58d9008 	str	r9, [sp, #8]
   2b6fc:	e59f3050 	ldr	r3, [pc, #80]	; 2b754 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   2b700:	e3a02000 	mov	r2, #0
   2b704:	e59f1040 	ldr	r1, [pc, #64]	; 2b74c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2b708:	ebffec70 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b70c:	e28dd024 	add	sp, sp, #36	; 0x24
   2b710:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2b714:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   2b718:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   2b71c:	e3540000 	cmp	r4, #0
   2b720:	1affffde 	bne	2b6a0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   2b724:	e3a02069 	mov	r2, #105	; 0x69
   2b728:	e59f1028 	ldr	r1, [pc, #40]	; 2b758 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   2b72c:	e59f0028 	ldr	r0, [pc, #40]	; 2b75c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   2b730:	ebffe436 	bl	24810 <assertion_failed>
   2b734:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   2b738:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   2b73c:	eaffffd5 	b	2b698 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   2b740:	e594700c 	ldr	r7, [r4, #12]
   2b744:	e5946008 	ldr	r6, [r4, #8]
   2b748:	eaffffdc 	b	2b6c0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   2b74c:	00045a80 	.word	0x00045a80
   2b750:	0004837c 	.word	0x0004837c
   2b754:	00045ab0 	.word	0x00045ab0
   2b758:	00045a88 	.word	0x00045a88
   2b75c:	00043c6c 	.word	0x00043c6c

0002b760 <CExceptionHandler::Get()>:
   2b760:	e59f3014 	ldr	r3, [pc, #20]	; 2b77c <CExceptionHandler::Get()+0x1c>
   2b764:	e5930000 	ldr	r0, [r3]
   2b768:	e3500000 	cmp	r0, #0
   2b76c:	0a000000 	beq	2b774 <CExceptionHandler::Get()+0x14>
   2b770:	e12fff1e 	bx	lr
   2b774:	e92d4010 	push	{r4, lr}
   2b778:	ebffff7d 	bl	2b574 <CExceptionHandler::Get() [clone .part.1]>
   2b77c:	0004e25c 	.word	0x0004e25c

0002b780 <ExceptionHandler>:
   2b780:	e92d4070 	push	{r4, r5, r6, lr}
   2b784:	e3a03000 	mov	r3, #0
   2b788:	e1a04000 	mov	r4, r0
   2b78c:	e1a05001 	mov	r5, r1
   2b790:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b794:	eb0002cc 	bl	2c2cc <CInterruptSystem::DisableFIQ()>
   2b798:	f1080040 	cpsie	f
   2b79c:	e59f301c 	ldr	r3, [pc, #28]	; 2b7c0 <ExceptionHandler+0x40>
   2b7a0:	e5930000 	ldr	r0, [r3]
   2b7a4:	e3500000 	cmp	r0, #0
   2b7a8:	0a000003 	beq	2b7bc <ExceptionHandler+0x3c>
   2b7ac:	e1a02005 	mov	r2, r5
   2b7b0:	e1a01004 	mov	r1, r4
   2b7b4:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b7b8:	eaffffac 	b	2b670 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   2b7bc:	ebffff6c 	bl	2b574 <CExceptionHandler::Get() [clone .part.1]>
   2b7c0:	0004e25c 	.word	0x0004e25c

0002b7c4 <raise>:
   2b7c4:	e59f3020 	ldr	r3, [pc, #32]	; 2b7ec <raise+0x28>
   2b7c8:	e92d4010 	push	{r4, lr}
   2b7cc:	e5930000 	ldr	r0, [r3]
   2b7d0:	e3500000 	cmp	r0, #0
   2b7d4:	0a000003 	beq	2b7e8 <raise+0x24>
   2b7d8:	e3a01004 	mov	r1, #4
   2b7dc:	ebffff93 	bl	2b630 <CExceptionHandler::Throw(unsigned int)>
   2b7e0:	e3a00000 	mov	r0, #0
   2b7e4:	e8bd8010 	pop	{r4, pc}
   2b7e8:	ebffff61 	bl	2b574 <CExceptionHandler::Get() [clone .part.1]>
   2b7ec:	0004e25c 	.word	0x0004e25c

0002b7f0 <UndefinedInstructionInternal>:
   2b7f0:	e24dd004 	sub	sp, sp, #4
   2b7f4:	e24ee004 	sub	lr, lr, #4
   2b7f8:	e92d4000 	stmfd	sp!, {lr}
   2b7fc:	e14fe000 	mrs	lr, SPSR
   2b800:	e92d4000 	stmfd	sp!, {lr}
   2b804:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b808:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b80c:	e1a0100d 	mov	r1, sp
   2b810:	f1020012 	cps	#18
   2b814:	e1a0200d 	mov	r2, sp
   2b818:	e1a0300e 	mov	r3, lr
   2b81c:	f1020011 	cps	#17
   2b820:	e1a0400d 	mov	r4, sp
   2b824:	e1a0500e 	mov	r5, lr
   2b828:	f102001f 	cps	#31
   2b82c:	e1a0d001 	mov	sp, r1
   2b830:	e92d003c 	push	{r2, r3, r4, r5}
   2b834:	e1a0100d 	mov	r1, sp
   2b838:	e3a00001 	mov	r0, #1
   2b83c:	eaffffcf 	b	2b780 <ExceptionHandler>

0002b840 <PrefetchAbortStub>:
   2b840:	e24dd004 	sub	sp, sp, #4
   2b844:	e24ee004 	sub	lr, lr, #4
   2b848:	e92d4000 	stmfd	sp!, {lr}
   2b84c:	e14fe000 	mrs	lr, SPSR
   2b850:	e92d4000 	stmfd	sp!, {lr}
   2b854:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b858:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b85c:	e1a0100d 	mov	r1, sp
   2b860:	f1020012 	cps	#18
   2b864:	e1a0200d 	mov	r2, sp
   2b868:	e1a0300e 	mov	r3, lr
   2b86c:	f1020011 	cps	#17
   2b870:	e1a0400d 	mov	r4, sp
   2b874:	e1a0500e 	mov	r5, lr
   2b878:	f102001f 	cps	#31
   2b87c:	e1a0d001 	mov	sp, r1
   2b880:	e92d003c 	push	{r2, r3, r4, r5}
   2b884:	e1a0100d 	mov	r1, sp
   2b888:	e3a00002 	mov	r0, #2
   2b88c:	eaffffbb 	b	2b780 <ExceptionHandler>

0002b890 <DataAbortStub>:
   2b890:	e24dd004 	sub	sp, sp, #4
   2b894:	e24ee008 	sub	lr, lr, #8
   2b898:	e92d4000 	stmfd	sp!, {lr}
   2b89c:	e14fe000 	mrs	lr, SPSR
   2b8a0:	e92d4000 	stmfd	sp!, {lr}
   2b8a4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b8a8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b8ac:	e1a0100d 	mov	r1, sp
   2b8b0:	f1020012 	cps	#18
   2b8b4:	e1a0200d 	mov	r2, sp
   2b8b8:	e1a0300e 	mov	r3, lr
   2b8bc:	f1020011 	cps	#17
   2b8c0:	e1a0400d 	mov	r4, sp
   2b8c4:	e1a0500e 	mov	r5, lr
   2b8c8:	f102001f 	cps	#31
   2b8cc:	e1a0d001 	mov	sp, r1
   2b8d0:	e92d003c 	push	{r2, r3, r4, r5}
   2b8d4:	e1a0100d 	mov	r1, sp
   2b8d8:	e3a00003 	mov	r0, #3
   2b8dc:	eaffffa7 	b	2b780 <ExceptionHandler>

0002b8e0 <UndefinedInstructionStub>:
   2b8e0:	e92d4001 	push	{r0, lr}
   2b8e4:	eef80a10 	vmrs	r0, fpexc
   2b8e8:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   2b8ec:	0affffbf 	beq	2b7f0 <UndefinedInstructionInternal>
   2b8f0:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   2b8f4:	eee80a10 	vmsr	fpexc, r0
   2b8f8:	e8fd8001 	ldm	sp!, {r0, pc}^

0002b8fc <IRQStub>:
   2b8fc:	e24ee004 	sub	lr, lr, #4
   2b900:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2b904:	e59f0060 	ldr	r0, [pc, #96]	; 2b96c <FIQStub+0x58>
   2b908:	e580e000 	str	lr, [r0]
   2b90c:	eb0002c8 	bl	2c434 <InterruptHandler>
   2b910:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

0002b914 <FIQStub>:
   2b914:	e24ee004 	sub	lr, lr, #4
   2b918:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2b91c:	e3a03000 	mov	r3, #0
   2b920:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b924:	e59f2044 	ldr	r2, [pc, #68]	; 2b970 <FIQStub+0x5c>
   2b928:	e5921000 	ldr	r1, [r2]
   2b92c:	e3510000 	cmp	r1, #0
   2b930:	0a000004 	beq	2b948 <FIQStub+0x34>
   2b934:	e5920004 	ldr	r0, [r2, #4]
   2b938:	e12fff31 	blx	r1
   2b93c:	e3a03000 	mov	r3, #0
   2b940:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b944:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2b948:	e3a03000 	mov	r3, #0
   2b94c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b950:	e59f101c 	ldr	r1, [pc, #28]	; 2b974 <FIQStub+0x60>
   2b954:	e3a00000 	mov	r0, #0
   2b958:	e5810000 	str	r0, [r1]
   2b95c:	e3a03000 	mov	r3, #0
   2b960:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b964:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b968:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2b96c:	0004839c 	.word	0x0004839c
   2b970:	00048390 	.word	0x00048390
   2b974:	2000b20c 	.word	0x2000b20c

0002b978 <CMemorySystem::CMemorySystem(bool)>:
   2b978:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b97c:	e1a04000 	mov	r4, r0
   2b980:	e3a05000 	mov	r5, #0
   2b984:	e280700c 	add	r7, r0, #12
   2b988:	e5c01000 	strb	r1, [r0]
   2b98c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   2b990:	e5845004 	str	r5, [r4, #4]
   2b994:	e5845008 	str	r5, [r4, #8]
   2b998:	e59f10fc 	ldr	r1, [pc, #252]	; 2ba9c <CMemorySystem::CMemorySystem(bool)+0x124>
   2b99c:	e1a00007 	mov	r0, r7
   2b9a0:	e28460c8 	add	r6, r4, #200	; 0xc8
   2b9a4:	ebfffdcb 	bl	2b0d8 <CHeapAllocator::CHeapAllocator(char const*)>
   2b9a8:	e1a00006 	mov	r0, r6
   2b9ac:	eb00053f 	bl	2ceb0 <CPageAllocator::CPageAllocator()>
   2b9b0:	e59f30e8 	ldr	r3, [pc, #232]	; 2baa0 <CMemorySystem::CMemorySystem(bool)+0x128>
   2b9b4:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2b9b8:	e5935000 	ldr	r5, [r3]
   2b9bc:	e3550000 	cmp	r5, #0
   2b9c0:	0a000002 	beq	2b9d0 <CMemorySystem::CMemorySystem(bool)+0x58>
   2b9c4:	e1a00004 	mov	r0, r4
   2b9c8:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2b9cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b9d0:	e3a01001 	mov	r1, #1
   2b9d4:	e28d000c 	add	r0, sp, #12
   2b9d8:	e5834000 	str	r4, [r3]
   2b9dc:	ebffe3ac 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2b9e0:	e3a03014 	mov	r3, #20
   2b9e4:	e58d5000 	str	r5, [sp]
   2b9e8:	e28d000c 	add	r0, sp, #12
   2b9ec:	e08d2003 	add	r2, sp, r3
   2b9f0:	e59f10ac 	ldr	r1, [pc, #172]	; 2baa4 <CMemorySystem::CMemorySystem(bool)+0x12c>
   2b9f4:	ebffe3b2 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2b9f8:	e3500000 	cmp	r0, #0
   2b9fc:	0a00001c 	beq	2ba74 <CMemorySystem::CMemorySystem(bool)+0xfc>
   2ba00:	e59d3020 	ldr	r3, [sp, #32]
   2ba04:	e3530000 	cmp	r3, #0
   2ba08:	1a00001f 	bne	2ba8c <CMemorySystem::CMemorySystem(bool)+0x114>
   2ba0c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2ba10:	e2432609 	sub	r2, r3, #9437184	; 0x900000
   2ba14:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   2ba18:	e5843004 	str	r3, [r4, #4]
   2ba1c:	e1a00007 	mov	r0, r7
   2ba20:	e3a03701 	mov	r3, #262144	; 0x40000
   2ba24:	e3a01605 	mov	r1, #5242880	; 0x500000
   2ba28:	ebfffdc3 	bl	2b13c <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   2ba2c:	e1a01005 	mov	r1, r5
   2ba30:	e1a00006 	mov	r0, r6
   2ba34:	e3a02501 	mov	r2, #4194304	; 0x400000
   2ba38:	eb000524 	bl	2ced0 <CPageAllocator::Setup(unsigned int, unsigned int)>
   2ba3c:	e5d43000 	ldrb	r3, [r4]
   2ba40:	e3530000 	cmp	r3, #0
   2ba44:	0a000007 	beq	2ba68 <CMemorySystem::CMemorySystem(bool)+0xf0>
   2ba48:	e3a00004 	mov	r0, #4
   2ba4c:	ebfffd8c 	bl	2b084 <operator new(unsigned int)>
   2ba50:	e1a05000 	mov	r5, r0
   2ba54:	e5941004 	ldr	r1, [r4, #4]
   2ba58:	eb000087 	bl	2bc7c <CPageTable::CPageTable(unsigned int)>
   2ba5c:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2ba60:	e1a00004 	mov	r0, r4
   2ba64:	eb000049 	bl	2bb90 <CMemorySystem::EnableMMU()>
   2ba68:	e28d000c 	add	r0, sp, #12
   2ba6c:	ebffe38f 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   2ba70:	eaffffd3 	b	2b9c4 <CMemorySystem::CMemorySystem(bool)+0x4c>
   2ba74:	e3a03303 	mov	r3, #201326592	; 0xc000000
   2ba78:	e58d0020 	str	r0, [sp, #32]
   2ba7c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   2ba80:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   2ba84:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   2ba88:	eaffffe2 	b	2ba18 <CMemorySystem::CMemorySystem(bool)+0xa0>
   2ba8c:	e59f1014 	ldr	r1, [pc, #20]	; 2baa8 <CMemorySystem::CMemorySystem(bool)+0x130>
   2ba90:	e3a0204e 	mov	r2, #78	; 0x4e
   2ba94:	e281000c 	add	r0, r1, #12
   2ba98:	ebffe35c 	bl	24810 <assertion_failed>
   2ba9c:	00045b38 	.word	0x00045b38
   2baa0:	0004e260 	.word	0x0004e260
   2baa4:	00010005 	.word	0x00010005
   2baa8:	00045b40 	.word	0x00045b40

0002baac <CMemorySystem::~CMemorySystem()>:
   2baac:	e59f3044 	ldr	r3, [pc, #68]	; 2baf8 <CMemorySystem::~CMemorySystem()+0x4c>
   2bab0:	e92d4010 	push	{r4, lr}
   2bab4:	e5932000 	ldr	r2, [r3]
   2bab8:	e1a04000 	mov	r4, r0
   2babc:	e1500002 	cmp	r0, r2
   2bac0:	0a000005 	beq	2badc <CMemorySystem::~CMemorySystem()+0x30>
   2bac4:	e28400c8 	add	r0, r4, #200	; 0xc8
   2bac8:	eb0004ff 	bl	2cecc <CPageAllocator::~CPageAllocator()>
   2bacc:	e284000c 	add	r0, r4, #12
   2bad0:	ebfffd98 	bl	2b138 <CHeapAllocator::~CHeapAllocator()>
   2bad4:	e1a00004 	mov	r0, r4
   2bad8:	e8bd8010 	pop	{r4, pc}
   2badc:	e3a01000 	mov	r1, #0
   2bae0:	e5d02000 	ldrb	r2, [r0]
   2bae4:	e5831000 	str	r1, [r3]
   2bae8:	e1520001 	cmp	r2, r1
   2baec:	0afffff4 	beq	2bac4 <CMemorySystem::~CMemorySystem()+0x18>
   2baf0:	eb000056 	bl	2bc50 <CMemorySystem::Destructor() [clone .part.0]>
   2baf4:	eafffff2 	b	2bac4 <CMemorySystem::~CMemorySystem()+0x18>
   2baf8:	0004e260 	.word	0x0004e260

0002bafc <CMemorySystem::Destructor()>:
   2bafc:	e59f3020 	ldr	r3, [pc, #32]	; 2bb24 <CMemorySystem::Destructor()+0x28>
   2bb00:	e5932000 	ldr	r2, [r3]
   2bb04:	e1520000 	cmp	r2, r0
   2bb08:	112fff1e 	bxne	lr
   2bb0c:	e3a01000 	mov	r1, #0
   2bb10:	e5d22000 	ldrb	r2, [r2]
   2bb14:	e5831000 	str	r1, [r3]
   2bb18:	e1520001 	cmp	r2, r1
   2bb1c:	012fff1e 	bxeq	lr
   2bb20:	ea00004a 	b	2bc50 <CMemorySystem::Destructor() [clone .part.0]>
   2bb24:	0004e260 	.word	0x0004e260

0002bb28 <CMemorySystem::GetMemSize() const>:
   2bb28:	e59f3028 	ldr	r3, [pc, #40]	; 2bb58 <CMemorySystem::GetMemSize() const+0x30>
   2bb2c:	e5933000 	ldr	r3, [r3]
   2bb30:	e3530000 	cmp	r3, #0
   2bb34:	0a000002 	beq	2bb44 <CMemorySystem::GetMemSize() const+0x1c>
   2bb38:	e9930009 	ldmib	r3, {r0, r3}
   2bb3c:	e0800003 	add	r0, r0, r3
   2bb40:	e12fff1e 	bx	lr
   2bb44:	e59f1010 	ldr	r1, [pc, #16]	; 2bb5c <CMemorySystem::GetMemSize() const+0x34>
   2bb48:	e92d4010 	push	{r4, lr}
   2bb4c:	e3a020a0 	mov	r2, #160	; 0xa0
   2bb50:	e2810028 	add	r0, r1, #40	; 0x28
   2bb54:	ebffe32d 	bl	24810 <assertion_failed>
   2bb58:	0004e260 	.word	0x0004e260
   2bb5c:	00045b40 	.word	0x00045b40

0002bb60 <CMemorySystem::Get()>:
   2bb60:	e59f3020 	ldr	r3, [pc, #32]	; 2bb88 <CMemorySystem::Get()+0x28>
   2bb64:	e5930000 	ldr	r0, [r3]
   2bb68:	e3500000 	cmp	r0, #0
   2bb6c:	0a000000 	beq	2bb74 <CMemorySystem::Get()+0x14>
   2bb70:	e12fff1e 	bx	lr
   2bb74:	e59f1010 	ldr	r1, [pc, #16]	; 2bb8c <CMemorySystem::Get()+0x2c>
   2bb78:	e92d4010 	push	{r4, lr}
   2bb7c:	e3a020a6 	mov	r2, #166	; 0xa6
   2bb80:	e2810028 	add	r0, r1, #40	; 0x28
   2bb84:	ebffe321 	bl	24810 <assertion_failed>
   2bb88:	0004e260 	.word	0x0004e260
   2bb8c:	00045b40 	.word	0x00045b40

0002bb90 <CMemorySystem::EnableMMU()>:
   2bb90:	e5d03000 	ldrb	r3, [r0]
   2bb94:	e92d4010 	push	{r4, lr}
   2bb98:	e3530000 	cmp	r3, #0
   2bb9c:	0a00001a 	beq	2bc0c <CMemorySystem::EnableMMU()+0x7c>
   2bba0:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   2bba4:	e3833040 	orr	r3, r3, #64	; 0x40
   2bba8:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   2bbac:	ee104f70 	mrc	15, 0, r4, cr0, cr0, {3}
   2bbb0:	e2144001 	ands	r4, r4, #1
   2bbb4:	1a000018 	bne	2bc1c <CMemorySystem::EnableMMU()+0x8c>
   2bbb8:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   2bbbc:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   2bbc0:	e3500000 	cmp	r0, #0
   2bbc4:	0a000018 	beq	2bc2c <CMemorySystem::EnableMMU()+0x9c>
   2bbc8:	eb000056 	bl	2bd28 <CPageTable::GetBaseAddress() const>
   2bbcc:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   2bbd0:	e3a03001 	mov	r3, #1
   2bbd4:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   2bbd8:	ee074f16 	mcr	15, 0, r4, cr7, cr6, {0}
   2bbdc:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2bbe0:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   2bbe4:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   2bbe8:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   2bbec:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2bbf0:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   2bbf4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   2bbf8:	e59f203c 	ldr	r2, [pc, #60]	; 2bc3c <CMemorySystem::EnableMMU()+0xac>
   2bbfc:	e3c33002 	bic	r3, r3, #2
   2bc00:	e1832002 	orr	r2, r3, r2
   2bc04:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
   2bc08:	e8bd8010 	pop	{r4, pc}
   2bc0c:	e59f102c 	ldr	r1, [pc, #44]	; 2bc40 <CMemorySystem::EnableMMU()+0xb0>
   2bc10:	e3a020ac 	mov	r2, #172	; 0xac
   2bc14:	e2810038 	add	r0, r1, #56	; 0x38
   2bc18:	ebffe2fc 	bl	24810 <assertion_failed>
   2bc1c:	e59f101c 	ldr	r1, [pc, #28]	; 2bc40 <CMemorySystem::EnableMMU()+0xb0>
   2bc20:	e3a020ba 	mov	r2, #186	; 0xba
   2bc24:	e2810048 	add	r0, r1, #72	; 0x48
   2bc28:	ebffe2f8 	bl	24810 <assertion_failed>
   2bc2c:	e59f100c 	ldr	r1, [pc, #12]	; 2bc40 <CMemorySystem::EnableMMU()+0xb0>
   2bc30:	e3a020c0 	mov	r2, #192	; 0xc0
   2bc34:	e2810074 	add	r0, r1, #116	; 0x74
   2bc38:	ebffe2f4 	bl	24810 <assertion_failed>
   2bc3c:	00c01805 	.word	0x00c01805
   2bc40:	00045b40 	.word	0x00045b40

0002bc44 <CMemorySystem::GetCoherentPage(unsigned int)>:
   2bc44:	e1a00600 	lsl	r0, r0, #12
   2bc48:	e2800501 	add	r0, r0, #4194304	; 0x400000
   2bc4c:	e12fff1e 	bx	lr

0002bc50 <CMemorySystem::Destructor() [clone .part.0]>:
   2bc50:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   2bc54:	e3c33005 	bic	r3, r3, #5
   2bc58:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   2bc5c:	e3a03000 	mov	r3, #0
   2bc60:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2bc64:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bc68:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   2bc6c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bc70:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   2bc74:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bc78:	e12fff1e 	bx	lr

0002bc7c <CPageTable::CPageTable(unsigned int)>:
   2bc7c:	e3a02709 	mov	r2, #2359296	; 0x240000
   2bc80:	e3a03000 	mov	r3, #0
   2bc84:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2bc88:	e59fc074 	ldr	ip, [pc, #116]	; 2bd04 <CPageTable::CPageTable(unsigned int)+0x88>
   2bc8c:	e59f4074 	ldr	r4, [pc, #116]	; 2bd08 <CPageTable::CPageTable(unsigned int)+0x8c>
   2bc90:	e59f5074 	ldr	r5, [pc, #116]	; 2bd0c <CPageTable::CPageTable(unsigned int)+0x90>
   2bc94:	e59f9074 	ldr	r9, [pc, #116]	; 2bd10 <CPageTable::CPageTable(unsigned int)+0x94>
   2bc98:	e59f8074 	ldr	r8, [pc, #116]	; 2bd14 <CPageTable::CPageTable(unsigned int)+0x98>
   2bc9c:	e59f7074 	ldr	r7, [pc, #116]	; 2bd18 <CPageTable::CPageTable(unsigned int)+0x9c>
   2bca0:	e59f6074 	ldr	r6, [pc, #116]	; 2bd1c <CPageTable::CPageTable(unsigned int)+0xa0>
   2bca4:	e59fe074 	ldr	lr, [pc, #116]	; 2bd20 <CPageTable::CPageTable(unsigned int)+0xa4>
   2bca8:	e5802000 	str	r2, [r0]
   2bcac:	e1530004 	cmp	r3, r4
   2bcb0:	31a02005 	movcc	r2, r5
   2bcb4:	3a000007 	bcc	2bcd8 <CPageTable::CPageTable(unsigned int)+0x5c>
   2bcb8:	e3530501 	cmp	r3, #4194304	; 0x400000
   2bcbc:	0a00000e 	beq	2bcfc <CPageTable::CPageTable(unsigned int)+0x80>
   2bcc0:	e1510003 	cmp	r1, r3
   2bcc4:	81a02008 	movhi	r2, r8
   2bcc8:	8a000002 	bhi	2bcd8 <CPageTable::CPageTable(unsigned int)+0x5c>
   2bccc:	e1530007 	cmp	r3, r7
   2bcd0:	91a02006 	movls	r2, r6
   2bcd4:	83a02000 	movhi	r2, #0
   2bcd8:	e1822003 	orr	r2, r2, r3
   2bcdc:	e5ac2004 	str	r2, [ip, #4]!
   2bce0:	e15c000e 	cmp	ip, lr
   2bce4:	e2833601 	add	r3, r3, #1048576	; 0x100000
   2bce8:	1affffef 	bne	2bcac <CPageTable::CPageTable(unsigned int)+0x30>
   2bcec:	e3a03000 	mov	r3, #0
   2bcf0:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2bcf4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bcf8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2bcfc:	e1a02009 	mov	r2, r9
   2bd00:	eafffff4 	b	2bcd8 <CPageTable::CPageTable(unsigned int)+0x5c>
   2bd04:	0023fffc 	.word	0x0023fffc
   2bd08:	0003ed90 	.word	0x0003ed90
   2bd0c:	0000040e 	.word	0x0000040e
   2bd10:	00010412 	.word	0x00010412
   2bd14:	0000041e 	.word	0x0000041e
   2bd18:	20fffffe 	.word	0x20fffffe
   2bd1c:	00010416 	.word	0x00010416
   2bd20:	00243ffc 	.word	0x00243ffc

0002bd24 <CPageTable::~CPageTable()>:
   2bd24:	e12fff1e 	bx	lr

0002bd28 <CPageTable::GetBaseAddress() const>:
   2bd28:	e5900000 	ldr	r0, [r0]
   2bd2c:	e3800001 	orr	r0, r0, #1
   2bd30:	e12fff1e 	bx	lr

0002bd34 <CurrentExecutionLevel>:
   2bd34:	e10f0000 	mrs	r0, CPSR
   2bd38:	e3100040 	tst	r0, #64	; 0x40
   2bd3c:	01a003a0 	lsreq	r0, r0, #7
   2bd40:	02000001 	andeq	r0, r0, #1
   2bd44:	13a00002 	movne	r0, #2
   2bd48:	e12fff1e 	bx	lr

0002bd4c <EnterCritical>:
   2bd4c:	e2403001 	sub	r3, r0, #1
   2bd50:	e3530001 	cmp	r3, #1
   2bd54:	e92d4010 	push	{r4, lr}
   2bd58:	8a000013 	bhi	2bdac <EnterCritical+0x60>
   2bd5c:	e10f1000 	mrs	r1, CPSR
   2bd60:	e3500002 	cmp	r0, #2
   2bd64:	1a000014 	bne	2bdbc <EnterCritical+0x70>
   2bd68:	f10c00c0 	cpsid	if
   2bd6c:	e59f3070 	ldr	r3, [pc, #112]	; 2bde4 <EnterCritical+0x98>
   2bd70:	e5932000 	ldr	r2, [r3]
   2bd74:	e3520013 	cmp	r2, #19
   2bd78:	8a000015 	bhi	2bdd4 <EnterCritical+0x88>
   2bd7c:	e5932000 	ldr	r2, [r3]
   2bd80:	e3500001 	cmp	r0, #1
   2bd84:	e2820001 	add	r0, r2, #1
   2bd88:	e0832102 	add	r2, r3, r2, lsl #2
   2bd8c:	e5830000 	str	r0, [r3]
   2bd90:	e5821004 	str	r1, [r2, #4]
   2bd94:	0a000002 	beq	2bda4 <EnterCritical+0x58>
   2bd98:	e3a03000 	mov	r3, #0
   2bd9c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bda0:	e8bd8010 	pop	{r4, pc}
   2bda4:	f1080040 	cpsie	f
   2bda8:	eafffffa 	b	2bd98 <EnterCritical+0x4c>
   2bdac:	e3a02064 	mov	r2, #100	; 0x64
   2bdb0:	e59f1030 	ldr	r1, [pc, #48]	; 2bde8 <EnterCritical+0x9c>
   2bdb4:	e59f0030 	ldr	r0, [pc, #48]	; 2bdec <EnterCritical+0xa0>
   2bdb8:	ebffe294 	bl	24810 <assertion_failed>
   2bdbc:	e3110040 	tst	r1, #64	; 0x40
   2bdc0:	0affffe8 	beq	2bd68 <EnterCritical+0x1c>
   2bdc4:	e3a0206a 	mov	r2, #106	; 0x6a
   2bdc8:	e59f1018 	ldr	r1, [pc, #24]	; 2bde8 <EnterCritical+0x9c>
   2bdcc:	e59f001c 	ldr	r0, [pc, #28]	; 2bdf0 <EnterCritical+0xa4>
   2bdd0:	ebffe28e 	bl	24810 <assertion_failed>
   2bdd4:	e3a0206e 	mov	r2, #110	; 0x6e
   2bdd8:	e59f1008 	ldr	r1, [pc, #8]	; 2bde8 <EnterCritical+0x9c>
   2bddc:	e59f0010 	ldr	r0, [pc, #16]	; 2bdf4 <EnterCritical+0xa8>
   2bde0:	ebffe28a 	bl	24810 <assertion_failed>
   2bde4:	0004e264 	.word	0x0004e264
   2bde8:	00045bc8 	.word	0x00045bc8
   2bdec:	00045bd8 	.word	0x00045bd8
   2bdf0:	00045c10 	.word	0x00045c10
   2bdf4:	00045c40 	.word	0x00045c40

0002bdf8 <LeaveCritical>:
   2bdf8:	e3a03000 	mov	r3, #0
   2bdfc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2be00:	f10c0040 	cpsid	f
   2be04:	e59f3038 	ldr	r3, [pc, #56]	; 2be44 <LeaveCritical+0x4c>
   2be08:	e5932000 	ldr	r2, [r3]
   2be0c:	e3520000 	cmp	r2, #0
   2be10:	0a000006 	beq	2be30 <LeaveCritical+0x38>
   2be14:	e5932000 	ldr	r2, [r3]
   2be18:	e2422001 	sub	r2, r2, #1
   2be1c:	e5832000 	str	r2, [r3]
   2be20:	e0833102 	add	r3, r3, r2, lsl #2
   2be24:	e5933004 	ldr	r3, [r3, #4]
   2be28:	e121f003 	msr	CPSR_c, r3
   2be2c:	e12fff1e 	bx	lr
   2be30:	e92d4010 	push	{r4, lr}
   2be34:	e3a0207f 	mov	r2, #127	; 0x7f
   2be38:	e59f1008 	ldr	r1, [pc, #8]	; 2be48 <LeaveCritical+0x50>
   2be3c:	e59f0008 	ldr	r0, [pc, #8]	; 2be4c <LeaveCritical+0x54>
   2be40:	ebffe272 	bl	24810 <assertion_failed>
   2be44:	0004e264 	.word	0x0004e264
   2be48:	00045bc8 	.word	0x00045bc8
   2be4c:	00045c68 	.word	0x00045c68

0002be50 <CleanAndInvalidateDataCacheRange>:
   2be50:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2be54:	e2813020 	add	r3, r1, #32
   2be58:	e353001f 	cmp	r3, #31
   2be5c:	82800020 	addhi	r0, r0, #32
   2be60:	83c1101f 	bichi	r1, r1, #31
   2be64:	80801001 	addhi	r1, r0, r1
   2be68:	8a000001 	bhi	2be74 <CleanAndInvalidateDataCacheRange+0x24>
   2be6c:	ea000003 	b	2be80 <CleanAndInvalidateDataCacheRange+0x30>
   2be70:	e2800020 	add	r0, r0, #32
   2be74:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2be78:	e1510000 	cmp	r1, r0
   2be7c:	1afffffb 	bne	2be70 <CleanAndInvalidateDataCacheRange+0x20>
   2be80:	e3a03000 	mov	r3, #0
   2be84:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2be88:	e12fff1e 	bx	lr

0002be8c <SyncDataAndInstructionCache>:
   2be8c:	e3a03000 	mov	r3, #0
   2be90:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2be94:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2be98:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2be9c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2bea0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bea4:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2bea8:	e12fff1e 	bx	lr

0002beac <CInterruptSystem::CInterruptSystem()>:
   2beac:	e1a0c000 	mov	ip, r0
   2beb0:	e2802f47 	add	r2, r0, #284	; 0x11c
   2beb4:	e1a00002 	mov	r0, r2
   2beb8:	e3a01000 	mov	r1, #0
   2bebc:	e24c3004 	sub	r3, ip, #4
   2bec0:	e5a31004 	str	r1, [r3, #4]!
   2bec4:	e1530000 	cmp	r3, r0
   2bec8:	e5a21004 	str	r1, [r2, #4]!
   2becc:	1afffffb 	bne	2bec0 <CInterruptSystem::CInterruptSystem()+0x14>
   2bed0:	e59f3008 	ldr	r3, [pc, #8]	; 2bee0 <CInterruptSystem::CInterruptSystem()+0x34>
   2bed4:	e1a0000c 	mov	r0, ip
   2bed8:	e583c000 	str	ip, [r3]
   2bedc:	e12fff1e 	bx	lr
   2bee0:	0004e2b8 	.word	0x0004e2b8

0002bee4 <CInterruptSystem::~CInterruptSystem()>:
   2bee4:	f10c0080 	cpsid	i
   2bee8:	e3a03000 	mov	r3, #0
   2beec:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bef0:	e3e01000 	mvn	r1, #0
   2bef4:	e59f201c 	ldr	r2, [pc, #28]	; 2bf18 <CInterruptSystem::~CInterruptSystem()+0x34>
   2bef8:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2befc:	e582121c 	str	r1, [r2, #540]	; 0x21c
   2bf00:	e5821220 	str	r1, [r2, #544]	; 0x220
   2bf04:	e5821224 	str	r1, [r2, #548]	; 0x224
   2bf08:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bf0c:	e59f2008 	ldr	r2, [pc, #8]	; 2bf1c <CInterruptSystem::~CInterruptSystem()+0x38>
   2bf10:	e5823000 	str	r3, [r2]
   2bf14:	e12fff1e 	bx	lr
   2bf18:	2000b000 	.word	0x2000b000
   2bf1c:	0004e2b8 	.word	0x0004e2b8

0002bf20 <CInterruptSystem::Initialize()>:
   2bf20:	e92d4010 	push	{r4, lr}
   2bf24:	e3a04000 	mov	r4, #0
   2bf28:	e59f2050 	ldr	r2, [pc, #80]	; 2bf80 <CInterruptSystem::Initialize()+0x60>
   2bf2c:	e59f3050 	ldr	r3, [pc, #80]	; 2bf84 <CInterruptSystem::Initialize()+0x64>
   2bf30:	e1a02142 	asr	r2, r2, #2
   2bf34:	e1a03143 	asr	r3, r3, #2
   2bf38:	e2422002 	sub	r2, r2, #2
   2bf3c:	e2433002 	sub	r3, r3, #2
   2bf40:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2bf44:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2bf48:	e5842018 	str	r2, [r4, #24]
   2bf4c:	e584301c 	str	r3, [r4, #28]
   2bf50:	ebffffcd 	bl	2be8c <SyncDataAndInstructionCache>
   2bf54:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2bf58:	e3e02000 	mvn	r2, #0
   2bf5c:	e59f3024 	ldr	r3, [pc, #36]	; 2bf88 <CInterruptSystem::Initialize()+0x68>
   2bf60:	e583420c 	str	r4, [r3, #524]	; 0x20c
   2bf64:	e583221c 	str	r2, [r3, #540]	; 0x21c
   2bf68:	e5832220 	str	r2, [r3, #544]	; 0x220
   2bf6c:	e5832224 	str	r2, [r3, #548]	; 0x224
   2bf70:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2bf74:	f1080080 	cpsie	i
   2bf78:	e3a00001 	mov	r0, #1
   2bf7c:	e8bd8010 	pop	{r4, pc}
   2bf80:	0002b8e4 	.word	0x0002b8e4
   2bf84:	0002b8f8 	.word	0x0002b8f8
   2bf88:	2000b000 	.word	0x2000b000

0002bf8c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   2bf8c:	e3510047 	cmp	r1, #71	; 0x47
   2bf90:	e92d4070 	push	{r4, r5, r6, lr}
   2bf94:	8a00001e 	bhi	2c014 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   2bf98:	e3520000 	cmp	r2, #0
   2bf9c:	0a000020 	beq	2c024 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   2bfa0:	e59f009c 	ldr	r0, [pc, #156]	; 2c044 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   2bfa4:	e5d0e001 	ldrb	lr, [r0, #1]
   2bfa8:	e5d0c000 	ldrb	ip, [r0]
   2bfac:	e5d04002 	ldrb	r4, [r0, #2]
   2bfb0:	e18cc40e 	orr	ip, ip, lr, lsl #8
   2bfb4:	e5d0e003 	ldrb	lr, [r0, #3]
   2bfb8:	e18cc804 	orr	ip, ip, r4, lsl #16
   2bfbc:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   2bfc0:	1a00001b 	bne	2c034 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa8>
   2bfc4:	e1a06422 	lsr	r6, r2, #8
   2bfc8:	e1a05822 	lsr	r5, r2, #16
   2bfcc:	e1a04c22 	lsr	r4, r2, #24
   2bfd0:	e1a0e423 	lsr	lr, r3, #8
   2bfd4:	e5c02000 	strb	r2, [r0]
   2bfd8:	e5c03004 	strb	r3, [r0, #4]
   2bfdc:	e1a02823 	lsr	r2, r3, #16
   2bfe0:	e1a03c23 	lsr	r3, r3, #24
   2bfe4:	e5c06001 	strb	r6, [r0, #1]
   2bfe8:	e5c05002 	strb	r5, [r0, #2]
   2bfec:	e5c04003 	strb	r4, [r0, #3]
   2bff0:	e5c0e005 	strb	lr, [r0, #5]
   2bff4:	e5c02006 	strb	r2, [r0, #6]
   2bff8:	e5c03007 	strb	r3, [r0, #7]
   2bffc:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
   2c000:	e59f3040 	ldr	r3, [pc, #64]	; 2c048 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xbc>
   2c004:	e3811080 	orr	r1, r1, #128	; 0x80
   2c008:	e583120c 	str	r1, [r3, #524]	; 0x20c
   2c00c:	ee07cfba 	mcr	15, 0, ip, cr7, cr10, {5}
   2c010:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c014:	e3a0208f 	mov	r2, #143	; 0x8f
   2c018:	e59f102c 	ldr	r1, [pc, #44]	; 2c04c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2c01c:	e59f002c 	ldr	r0, [pc, #44]	; 2c050 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   2c020:	ebffe1fa 	bl	24810 <assertion_failed>
   2c024:	e3a02090 	mov	r2, #144	; 0x90
   2c028:	e59f101c 	ldr	r1, [pc, #28]	; 2c04c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2c02c:	e59f0020 	ldr	r0, [pc, #32]	; 2c054 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   2c030:	ebffe1f6 	bl	24810 <assertion_failed>
   2c034:	e3a02091 	mov	r2, #145	; 0x91
   2c038:	e59f100c 	ldr	r1, [pc, #12]	; 2c04c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2c03c:	e59f0014 	ldr	r0, [pc, #20]	; 2c058 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   2c040:	ebffe1f2 	bl	24810 <assertion_failed>
   2c044:	00048390 	.word	0x00048390
   2c048:	2000b000 	.word	0x2000b000
   2c04c:	00045c80 	.word	0x00045c80
   2c050:	00045c90 	.word	0x00045c90
   2c054:	00045cc4 	.word	0x00045cc4
   2c058:	00045ca4 	.word	0x00045ca4

0002c05c <CInterruptSystem::DisconnectFIQ()>:
   2c05c:	e59f3068 	ldr	r3, [pc, #104]	; 2c0cc <CInterruptSystem::DisconnectFIQ()+0x70>
   2c060:	e5d31001 	ldrb	r1, [r3, #1]
   2c064:	e5d32000 	ldrb	r2, [r3]
   2c068:	e5d30002 	ldrb	r0, [r3, #2]
   2c06c:	e1822401 	orr	r2, r2, r1, lsl #8
   2c070:	e5d31003 	ldrb	r1, [r3, #3]
   2c074:	e1822800 	orr	r2, r2, r0, lsl #16
   2c078:	e1922c01 	orrs	r2, r2, r1, lsl #24
   2c07c:	0a00000d 	beq	2c0b8 <CInterruptSystem::DisconnectFIQ()+0x5c>
   2c080:	e3a02000 	mov	r2, #0
   2c084:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2c088:	e59f1040 	ldr	r1, [pc, #64]	; 2c0d0 <CInterruptSystem::DisconnectFIQ()+0x74>
   2c08c:	e581220c 	str	r2, [r1, #524]	; 0x20c
   2c090:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   2c094:	e5c32000 	strb	r2, [r3]
   2c098:	e5c32001 	strb	r2, [r3, #1]
   2c09c:	e5c32002 	strb	r2, [r3, #2]
   2c0a0:	e5c32003 	strb	r2, [r3, #3]
   2c0a4:	e5c32004 	strb	r2, [r3, #4]
   2c0a8:	e5c32005 	strb	r2, [r3, #5]
   2c0ac:	e5c32006 	strb	r2, [r3, #6]
   2c0b0:	e5c32007 	strb	r2, [r3, #7]
   2c0b4:	e12fff1e 	bx	lr
   2c0b8:	e92d4010 	push	{r4, lr}
   2c0bc:	e3a0209b 	mov	r2, #155	; 0x9b
   2c0c0:	e59f100c 	ldr	r1, [pc, #12]	; 2c0d4 <CInterruptSystem::DisconnectFIQ()+0x78>
   2c0c4:	e59f000c 	ldr	r0, [pc, #12]	; 2c0d8 <CInterruptSystem::DisconnectFIQ()+0x7c>
   2c0c8:	ebffe1d0 	bl	24810 <assertion_failed>
   2c0cc:	00048390 	.word	0x00048390
   2c0d0:	2000b000 	.word	0x2000b000
   2c0d4:	00045c80 	.word	0x00045c80
   2c0d8:	00045cbc 	.word	0x00045cbc

0002c0dc <CInterruptSystem::EnableIRQ(unsigned int)>:
   2c0dc:	e3a03000 	mov	r3, #0
   2c0e0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c0e4:	e3500047 	cmp	r0, #71	; 0x47
   2c0e8:	8a00000e 	bhi	2c128 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
   2c0ec:	e350001f 	cmp	r0, #31
   2c0f0:	9a00000a 	bls	2c120 <CInterruptSystem::EnableIRQ(unsigned int)+0x44>
   2c0f4:	e59f3040 	ldr	r3, [pc, #64]	; 2c13c <CInterruptSystem::EnableIRQ(unsigned int)+0x60>
   2c0f8:	e350003f 	cmp	r0, #63	; 0x3f
   2c0fc:	e59f203c 	ldr	r2, [pc, #60]	; 2c140 <CInterruptSystem::EnableIRQ(unsigned int)+0x64>
   2c100:	91a02003 	movls	r2, r3
   2c104:	e3a03001 	mov	r3, #1
   2c108:	e200001f 	and	r0, r0, #31
   2c10c:	e1a00013 	lsl	r0, r3, r0
   2c110:	e5820000 	str	r0, [r2]
   2c114:	e3a03000 	mov	r3, #0
   2c118:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c11c:	e12fff1e 	bx	lr
   2c120:	e59f201c 	ldr	r2, [pc, #28]	; 2c144 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
   2c124:	eafffff6 	b	2c104 <CInterruptSystem::EnableIRQ(unsigned int)+0x28>
   2c128:	e92d4010 	push	{r4, lr}
   2c12c:	e3a020a7 	mov	r2, #167	; 0xa7
   2c130:	e59f1010 	ldr	r1, [pc, #16]	; 2c148 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   2c134:	e59f0010 	ldr	r0, [pc, #16]	; 2c14c <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   2c138:	ebffe1b4 	bl	24810 <assertion_failed>
   2c13c:	2000b214 	.word	0x2000b214
   2c140:	2000b218 	.word	0x2000b218
   2c144:	2000b210 	.word	0x2000b210
   2c148:	00045c80 	.word	0x00045c80
   2c14c:	00045cd4 	.word	0x00045cd4

0002c150 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   2c150:	e3510047 	cmp	r1, #71	; 0x47
   2c154:	e92d4010 	push	{r4, lr}
   2c158:	8a000008 	bhi	2c180 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x30>
   2c15c:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   2c160:	e080e101 	add	lr, r0, r1, lsl #2
   2c164:	e35c0000 	cmp	ip, #0
   2c168:	1a000008 	bne	2c190 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x40>
   2c16c:	e7802101 	str	r2, [r0, r1, lsl #2]
   2c170:	e58e3120 	str	r3, [lr, #288]	; 0x120
   2c174:	e1a00001 	mov	r0, r1
   2c178:	e8bd4010 	pop	{r4, lr}
   2c17c:	eaffffd6 	b	2c0dc <CInterruptSystem::EnableIRQ(unsigned int)>
   2c180:	e3a02076 	mov	r2, #118	; 0x76
   2c184:	e59f1014 	ldr	r1, [pc, #20]	; 2c1a0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   2c188:	e59f0014 	ldr	r0, [pc, #20]	; 2c1a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x54>
   2c18c:	ebffe19f 	bl	24810 <assertion_failed>
   2c190:	e3a02077 	mov	r2, #119	; 0x77
   2c194:	e59f1004 	ldr	r1, [pc, #4]	; 2c1a0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   2c198:	e59f0008 	ldr	r0, [pc, #8]	; 2c1a8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
   2c19c:	ebffe19b 	bl	24810 <assertion_failed>
   2c1a0:	00045c80 	.word	0x00045c80
   2c1a4:	00045cd4 	.word	0x00045cd4
   2c1a8:	00045ce8 	.word	0x00045ce8

0002c1ac <CInterruptSystem::DisableIRQ(unsigned int)>:
   2c1ac:	e3a03000 	mov	r3, #0
   2c1b0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c1b4:	e3500047 	cmp	r0, #71	; 0x47
   2c1b8:	8a00000e 	bhi	2c1f8 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
   2c1bc:	e350001f 	cmp	r0, #31
   2c1c0:	9a00000a 	bls	2c1f0 <CInterruptSystem::DisableIRQ(unsigned int)+0x44>
   2c1c4:	e59f3040 	ldr	r3, [pc, #64]	; 2c20c <CInterruptSystem::DisableIRQ(unsigned int)+0x60>
   2c1c8:	e350003f 	cmp	r0, #63	; 0x3f
   2c1cc:	e59f203c 	ldr	r2, [pc, #60]	; 2c210 <CInterruptSystem::DisableIRQ(unsigned int)+0x64>
   2c1d0:	91a02003 	movls	r2, r3
   2c1d4:	e3a03001 	mov	r3, #1
   2c1d8:	e200001f 	and	r0, r0, #31
   2c1dc:	e1a00013 	lsl	r0, r3, r0
   2c1e0:	e5820000 	str	r0, [r2]
   2c1e4:	e3a03000 	mov	r3, #0
   2c1e8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c1ec:	e12fff1e 	bx	lr
   2c1f0:	e59f201c 	ldr	r2, [pc, #28]	; 2c214 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
   2c1f4:	eafffff6 	b	2c1d4 <CInterruptSystem::DisableIRQ(unsigned int)+0x28>
   2c1f8:	e92d4010 	push	{r4, lr}
   2c1fc:	e3a020bf 	mov	r2, #191	; 0xbf
   2c200:	e59f1010 	ldr	r1, [pc, #16]	; 2c218 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   2c204:	e59f0010 	ldr	r0, [pc, #16]	; 2c21c <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   2c208:	ebffe180 	bl	24810 <assertion_failed>
   2c20c:	2000b220 	.word	0x2000b220
   2c210:	2000b224 	.word	0x2000b224
   2c214:	2000b21c 	.word	0x2000b21c
   2c218:	00045c80 	.word	0x00045c80
   2c21c:	00045cd4 	.word	0x00045cd4

0002c220 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   2c220:	e3510047 	cmp	r1, #71	; 0x47
   2c224:	e92d4070 	push	{r4, r5, r6, lr}
   2c228:	8a00000b 	bhi	2c25c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   2c22c:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   2c230:	e1a04001 	mov	r4, r1
   2c234:	e3530000 	cmp	r3, #0
   2c238:	e1a05000 	mov	r5, r0
   2c23c:	e0806101 	add	r6, r0, r1, lsl #2
   2c240:	0a000009 	beq	2c26c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   2c244:	e1a00001 	mov	r0, r1
   2c248:	ebffffd7 	bl	2c1ac <CInterruptSystem::DisableIRQ(unsigned int)>
   2c24c:	e3a03000 	mov	r3, #0
   2c250:	e7853104 	str	r3, [r5, r4, lsl #2]
   2c254:	e5863120 	str	r3, [r6, #288]	; 0x120
   2c258:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c25c:	e3a02081 	mov	r2, #129	; 0x81
   2c260:	e59f1014 	ldr	r1, [pc, #20]	; 2c27c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   2c264:	e59f0014 	ldr	r0, [pc, #20]	; 2c280 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x60>
   2c268:	ebffe168 	bl	24810 <assertion_failed>
   2c26c:	e3a02082 	mov	r2, #130	; 0x82
   2c270:	e59f1004 	ldr	r1, [pc, #4]	; 2c27c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   2c274:	e59f0008 	ldr	r0, [pc, #8]	; 2c284 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   2c278:	ebffe164 	bl	24810 <assertion_failed>
   2c27c:	00045c80 	.word	0x00045c80
   2c280:	00045cd4 	.word	0x00045cd4
   2c284:	00045d04 	.word	0x00045d04

0002c288 <CInterruptSystem::EnableFIQ(unsigned int)>:
   2c288:	e3a03000 	mov	r3, #0
   2c28c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c290:	e3500047 	cmp	r0, #71	; 0x47
   2c294:	8a000004 	bhi	2c2ac <CInterruptSystem::EnableFIQ(unsigned int)+0x24>
   2c298:	e59f2020 	ldr	r2, [pc, #32]	; 2c2c0 <CInterruptSystem::EnableFIQ(unsigned int)+0x38>
   2c29c:	e3800080 	orr	r0, r0, #128	; 0x80
   2c2a0:	e582020c 	str	r0, [r2, #524]	; 0x20c
   2c2a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c2a8:	e12fff1e 	bx	lr
   2c2ac:	e92d4010 	push	{r4, lr}
   2c2b0:	e3a020d7 	mov	r2, #215	; 0xd7
   2c2b4:	e59f1008 	ldr	r1, [pc, #8]	; 2c2c4 <CInterruptSystem::EnableFIQ(unsigned int)+0x3c>
   2c2b8:	e59f0008 	ldr	r0, [pc, #8]	; 2c2c8 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   2c2bc:	ebffe153 	bl	24810 <assertion_failed>
   2c2c0:	2000b000 	.word	0x2000b000
   2c2c4:	00045c80 	.word	0x00045c80
   2c2c8:	00045c90 	.word	0x00045c90

0002c2cc <CInterruptSystem::DisableFIQ()>:
   2c2cc:	e3a03000 	mov	r3, #0
   2c2d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c2d4:	e59f2008 	ldr	r2, [pc, #8]	; 2c2e4 <CInterruptSystem::DisableFIQ()+0x18>
   2c2d8:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2c2dc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c2e0:	e12fff1e 	bx	lr
   2c2e4:	2000b000 	.word	0x2000b000

0002c2e8 <CInterruptSystem::Get()>:
   2c2e8:	e59f3020 	ldr	r3, [pc, #32]	; 2c310 <CInterruptSystem::Get()+0x28>
   2c2ec:	e5930000 	ldr	r0, [r3]
   2c2f0:	e3500000 	cmp	r0, #0
   2c2f4:	0a000000 	beq	2c2fc <CInterruptSystem::Get()+0x14>
   2c2f8:	e12fff1e 	bx	lr
   2c2fc:	e92d4010 	push	{r4, lr}
   2c300:	e3a020e9 	mov	r2, #233	; 0xe9
   2c304:	e59f1008 	ldr	r1, [pc, #8]	; 2c314 <CInterruptSystem::Get()+0x2c>
   2c308:	e59f0008 	ldr	r0, [pc, #8]	; 2c318 <CInterruptSystem::Get()+0x30>
   2c30c:	ebffe13f 	bl	24810 <assertion_failed>
   2c310:	0004e2b8 	.word	0x0004e2b8
   2c314:	00045c80 	.word	0x00045c80
   2c318:	000439ec 	.word	0x000439ec

0002c31c <CInterruptSystem::CallIRQHandler(unsigned int)>:
   2c31c:	e3510047 	cmp	r1, #71	; 0x47
   2c320:	e92d4010 	push	{r4, lr}
   2c324:	8a00000b 	bhi	2c358 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   2c328:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   2c32c:	e0800101 	add	r0, r0, r1, lsl #2
   2c330:	e3540000 	cmp	r4, #0
   2c334:	0a000003 	beq	2c348 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   2c338:	e5900120 	ldr	r0, [r0, #288]	; 0x120
   2c33c:	e12fff34 	blx	r4
   2c340:	e3a00001 	mov	r0, #1
   2c344:	e8bd8010 	pop	{r4, pc}
   2c348:	e1a00001 	mov	r0, r1
   2c34c:	ebffff96 	bl	2c1ac <CInterruptSystem::DisableIRQ(unsigned int)>
   2c350:	e1a00004 	mov	r0, r4
   2c354:	e8bd8010 	pop	{r4, pc}
   2c358:	e3a020ef 	mov	r2, #239	; 0xef
   2c35c:	e59f1004 	ldr	r1, [pc, #4]	; 2c368 <CInterruptSystem::CallIRQHandler(unsigned int)+0x4c>
   2c360:	e59f0004 	ldr	r0, [pc, #4]	; 2c36c <CInterruptSystem::CallIRQHandler(unsigned int)+0x50>
   2c364:	ebffe129 	bl	24810 <assertion_failed>
   2c368:	00045c80 	.word	0x00045c80
   2c36c:	00045cd4 	.word	0x00045cd4

0002c370 <CInterruptSystem::InterruptHandler()>:
   2c370:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c374:	e59f70a4 	ldr	r7, [pc, #164]	; 2c420 <CInterruptSystem::InterruptHandler()+0xb0>
   2c378:	e24dd010 	sub	sp, sp, #16
   2c37c:	e5973000 	ldr	r3, [r7]
   2c380:	e3530000 	cmp	r3, #0
   2c384:	0a000021 	beq	2c410 <CInterruptSystem::InterruptHandler()+0xa0>
   2c388:	e3a06000 	mov	r6, #0
   2c38c:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   2c390:	e59f308c 	ldr	r3, [pc, #140]	; 2c424 <CInterruptSystem::InterruptHandler()+0xb4>
   2c394:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   2c398:	e58d2004 	str	r2, [sp, #4]
   2c39c:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   2c3a0:	e58d2008 	str	r2, [sp, #8]
   2c3a4:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   2c3a8:	e6ef3073 	uxtb	r3, r3
   2c3ac:	e58d300c 	str	r3, [sp, #12]
   2c3b0:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   2c3b4:	e28d8004 	add	r8, sp, #4
   2c3b8:	e4984004 	ldr	r4, [r8], #4
   2c3bc:	e3540000 	cmp	r4, #0
   2c3c0:	0a00000d 	beq	2c3fc <CInterruptSystem::InterruptHandler()+0x8c>
   2c3c4:	e1a05006 	mov	r5, r6
   2c3c8:	ea000002 	b	2c3d8 <CInterruptSystem::InterruptHandler()+0x68>
   2c3cc:	e1b040a4 	lsrs	r4, r4, #1
   2c3d0:	e2855001 	add	r5, r5, #1
   2c3d4:	0a000008 	beq	2c3fc <CInterruptSystem::InterruptHandler()+0x8c>
   2c3d8:	e3140001 	tst	r4, #1
   2c3dc:	0afffffa 	beq	2c3cc <CInterruptSystem::InterruptHandler()+0x5c>
   2c3e0:	e1a01005 	mov	r1, r5
   2c3e4:	e5970000 	ldr	r0, [r7]
   2c3e8:	ebffffcb 	bl	2c31c <CInterruptSystem::CallIRQHandler(unsigned int)>
   2c3ec:	e3500000 	cmp	r0, #0
   2c3f0:	0afffff5 	beq	2c3cc <CInterruptSystem::InterruptHandler()+0x5c>
   2c3f4:	e28dd010 	add	sp, sp, #16
   2c3f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c3fc:	e2866020 	add	r6, r6, #32
   2c400:	e3560060 	cmp	r6, #96	; 0x60
   2c404:	1affffeb 	bne	2c3b8 <CInterruptSystem::InterruptHandler()+0x48>
   2c408:	e28dd010 	add	sp, sp, #16
   2c40c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c410:	e59f2010 	ldr	r2, [pc, #16]	; 2c428 <CInterruptSystem::InterruptHandler()+0xb8>
   2c414:	e59f1010 	ldr	r1, [pc, #16]	; 2c42c <CInterruptSystem::InterruptHandler()+0xbc>
   2c418:	e59f0010 	ldr	r0, [pc, #16]	; 2c430 <CInterruptSystem::InterruptHandler()+0xc0>
   2c41c:	ebffe0fb 	bl	24810 <assertion_failed>
   2c420:	0004e2b8 	.word	0x0004e2b8
   2c424:	2000b000 	.word	0x2000b000
   2c428:	00000102 	.word	0x00000102
   2c42c:	00045c80 	.word	0x00045c80
   2c430:	000439ec 	.word	0x000439ec

0002c434 <InterruptHandler>:
   2c434:	e92d4010 	push	{r4, lr}
   2c438:	e3a04000 	mov	r4, #0
   2c43c:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2c440:	ebffffca 	bl	2c370 <CInterruptSystem::InterruptHandler()>
   2c444:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2c448:	e8bd8010 	pop	{r4, pc}

0002c44c <__cxa_pure_virtual>:
   2c44c:	e92d4010 	push	{r4, lr}
   2c450:	e3a02018 	mov	r2, #24
   2c454:	e59f1004 	ldr	r1, [pc, #4]	; 2c460 <__cxa_pure_virtual+0x14>
   2c458:	e59f0004 	ldr	r0, [pc, #4]	; 2c464 <__cxa_pure_virtual+0x18>
   2c45c:	ebffe0eb 	bl	24810 <assertion_failed>
   2c460:	00045d20 	.word	0x00045d20
   2c464:	0003fe24 	.word	0x0003fe24

0002c468 <malloc>:
   2c468:	e59f300c 	ldr	r3, [pc, #12]	; 2c47c <malloc+0x14>
   2c46c:	e1a01000 	mov	r1, r0
   2c470:	e5930000 	ldr	r0, [r3]
   2c474:	e280000c 	add	r0, r0, #12
   2c478:	eafffb35 	b	2b154 <CHeapAllocator::Allocate(unsigned int)>
   2c47c:	0004e260 	.word	0x0004e260

0002c480 <free>:
   2c480:	e59f300c 	ldr	r3, [pc, #12]	; 2c494 <free+0x14>
   2c484:	e1a01000 	mov	r1, r0
   2c488:	e5930000 	ldr	r0, [r3]
   2c48c:	e280000c 	add	r0, r0, #12
   2c490:	eafffbad 	b	2b34c <CHeapAllocator::Free(void*)>
   2c494:	0004e260 	.word	0x0004e260

0002c498 <calloc>:
   2c498:	e92d4070 	push	{r4, r5, r6, lr}
   2c49c:	e0040190 	mul	r4, r0, r1
   2c4a0:	e3540000 	cmp	r4, #0
   2c4a4:	03a04001 	moveq	r4, #1
   2c4a8:	e1540000 	cmp	r4, r0
   2c4ac:	3a00000b 	bcc	2c4e0 <calloc+0x48>
   2c4b0:	e59f3038 	ldr	r3, [pc, #56]	; 2c4f0 <calloc+0x58>
   2c4b4:	e1a01004 	mov	r1, r4
   2c4b8:	e5930000 	ldr	r0, [r3]
   2c4bc:	e280000c 	add	r0, r0, #12
   2c4c0:	ebfffb23 	bl	2b154 <CHeapAllocator::Allocate(unsigned int)>
   2c4c4:	e2505000 	subs	r5, r0, #0
   2c4c8:	0a000002 	beq	2c4d8 <calloc+0x40>
   2c4cc:	e1a02004 	mov	r2, r4
   2c4d0:	e3a01000 	mov	r1, #0
   2c4d4:	ebfff69a 	bl	29f44 <memset>
   2c4d8:	e1a00005 	mov	r0, r5
   2c4dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c4e0:	e59f100c 	ldr	r1, [pc, #12]	; 2c4f4 <calloc+0x5c>
   2c4e4:	e3a0202b 	mov	r2, #43	; 0x2b
   2c4e8:	e281000c 	add	r0, r1, #12
   2c4ec:	ebffe0c7 	bl	24810 <assertion_failed>
   2c4f0:	0004e260 	.word	0x0004e260
   2c4f4:	00045d30 	.word	0x00045d30

0002c4f8 <realloc>:
   2c4f8:	e59f3010 	ldr	r3, [pc, #16]	; 2c510 <realloc+0x18>
   2c4fc:	e1a02001 	mov	r2, r1
   2c500:	e5933000 	ldr	r3, [r3]
   2c504:	e1a01000 	mov	r1, r0
   2c508:	e283000c 	add	r0, r3, #12
   2c50c:	eafffbd4 	b	2b464 <CHeapAllocator::ReAllocate(void*, unsigned int)>
   2c510:	0004e260 	.word	0x0004e260

0002c514 <palloc>:
   2c514:	e59f3008 	ldr	r3, [pc, #8]	; 2c524 <palloc+0x10>
   2c518:	e5930000 	ldr	r0, [r3]
   2c51c:	e28000c8 	add	r0, r0, #200	; 0xc8
   2c520:	ea000287 	b	2cf44 <CPageAllocator::Allocate()>
   2c524:	0004e260 	.word	0x0004e260

0002c528 <pfree>:
   2c528:	e59f300c 	ldr	r3, [pc, #12]	; 2c53c <pfree+0x14>
   2c52c:	e1a01000 	mov	r1, r0
   2c530:	e5930000 	ldr	r0, [r3]
   2c534:	e28000c8 	add	r0, r0, #200	; 0xc8
   2c538:	ea0002b6 	b	2d018 <CPageAllocator::Free(void*)>
   2c53c:	0004e260 	.word	0x0004e260

0002c540 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   2c540:	e5801000 	str	r1, [r0]
   2c544:	e5c02004 	strb	r2, [r0, #4]
   2c548:	e12fff1e 	bx	lr

0002c54c <CBcmMailBox::~CBcmMailBox()>:
   2c54c:	e12fff1e 	bx	lr

0002c550 <CBcmMailBox::WriteRead(unsigned int)>:
   2c550:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2c554:	e3a03000 	mov	r3, #0
   2c558:	e24dd00c 	sub	sp, sp, #12
   2c55c:	e1a05000 	mov	r5, r0
   2c560:	e1a06001 	mov	r6, r1
   2c564:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c568:	e5d03004 	ldrb	r3, [r0, #4]
   2c56c:	e3530000 	cmp	r3, #0
   2c570:	1a000003 	bne	2c584 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   2c574:	e59f30e0 	ldr	r3, [pc, #224]	; 2c65c <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2c578:	e5930000 	ldr	r0, [r3]
   2c57c:	e3500000 	cmp	r0, #0
   2c580:	1a00002f 	bne	2c644 <CBcmMailBox::WriteRead(unsigned int)+0xf4>
   2c584:	e59f40d4 	ldr	r4, [pc, #212]	; 2c660 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2c588:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c58c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c590:	1a000006 	bne	2c5b0 <CBcmMailBox::WriteRead(unsigned int)+0x60>
   2c594:	e3a07014 	mov	r7, #20
   2c598:	e1a00007 	mov	r0, r7
   2c59c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2c5a0:	ebfff621 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
   2c5a4:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c5a8:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c5ac:	0afffff9 	beq	2c598 <CBcmMailBox::WriteRead(unsigned int)+0x48>
   2c5b0:	e59f10a8 	ldr	r1, [pc, #168]	; 2c660 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2c5b4:	e59138b8 	ldr	r3, [r1, #2232]	; 0x8b8
   2c5b8:	e3530000 	cmp	r3, #0
   2c5bc:	bafffffc 	blt	2c5b4 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   2c5c0:	e316000f 	tst	r6, #15
   2c5c4:	1a000020 	bne	2c64c <CBcmMailBox::WriteRead(unsigned int)+0xfc>
   2c5c8:	e5953000 	ldr	r3, [r5]
   2c5cc:	e59f208c 	ldr	r2, [pc, #140]	; 2c660 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2c5d0:	e1866003 	orr	r6, r6, r3
   2c5d4:	e58168a0 	str	r6, [r1, #2208]	; 0x8a0
   2c5d8:	e5950000 	ldr	r0, [r5]
   2c5dc:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2c5e0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c5e4:	1afffffc 	bne	2c5dc <CBcmMailBox::WriteRead(unsigned int)+0x8c>
   2c5e8:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   2c5ec:	e203100f 	and	r1, r3, #15
   2c5f0:	e1510000 	cmp	r1, r0
   2c5f4:	1afffff8 	bne	2c5dc <CBcmMailBox::WriteRead(unsigned int)+0x8c>
   2c5f8:	e5d52004 	ldrb	r2, [r5, #4]
   2c5fc:	e3c3000f 	bic	r0, r3, #15
   2c600:	e3520000 	cmp	r2, #0
   2c604:	1a000003 	bne	2c618 <CBcmMailBox::WriteRead(unsigned int)+0xc8>
   2c608:	e59f304c 	ldr	r3, [pc, #76]	; 2c65c <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2c60c:	e5933000 	ldr	r3, [r3]
   2c610:	e3530000 	cmp	r3, #0
   2c614:	1a000003 	bne	2c628 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   2c618:	e3a03000 	mov	r3, #0
   2c61c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c620:	e28dd00c 	add	sp, sp, #12
   2c624:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2c628:	e58d0004 	str	r0, [sp, #4]
   2c62c:	ebfffdf1 	bl	2bdf8 <LeaveCritical>
   2c630:	e59d0004 	ldr	r0, [sp, #4]
   2c634:	e3a03000 	mov	r3, #0
   2c638:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c63c:	e28dd00c 	add	sp, sp, #12
   2c640:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2c644:	ebfffdc0 	bl	2bd4c <EnterCritical>
   2c648:	eaffffcd 	b	2c584 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   2c64c:	e3a02062 	mov	r2, #98	; 0x62
   2c650:	e59f100c 	ldr	r1, [pc, #12]	; 2c664 <CBcmMailBox::WriteRead(unsigned int)+0x114>
   2c654:	e59f000c 	ldr	r0, [pc, #12]	; 2c668 <CBcmMailBox::WriteRead(unsigned int)+0x118>
   2c658:	ebffe06c 	bl	24810 <assertion_failed>
   2c65c:	0004e2bc 	.word	0x0004e2bc
   2c660:	2000b000 	.word	0x2000b000
   2c664:	00045d50 	.word	0x00045d50
   2c668:	00045d60 	.word	0x00045d60

0002c66c <CBcmMailBox::Flush()>:
   2c66c:	e92d4070 	push	{r4, r5, r6, lr}
   2c670:	e59f4028 	ldr	r4, [pc, #40]	; 2c6a0 <CBcmMailBox::Flush()+0x34>
   2c674:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c678:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c67c:	18bd8070 	popne	{r4, r5, r6, pc}
   2c680:	e3a05014 	mov	r5, #20
   2c684:	e1a00005 	mov	r0, r5
   2c688:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2c68c:	ebfff5e6 	bl	29e2c <CTimer::SimpleMsDelay(unsigned int)>
   2c690:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c694:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c698:	0afffff9 	beq	2c684 <CBcmMailBox::Flush()+0x18>
   2c69c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c6a0:	2000b000 	.word	0x2000b000

0002c6a4 <CBcmMailBox::Read()>:
   2c6a4:	e5901000 	ldr	r1, [r0]
   2c6a8:	e59f2020 	ldr	r2, [pc, #32]	; 2c6d0 <CBcmMailBox::Read()+0x2c>
   2c6ac:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2c6b0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c6b4:	1afffffc 	bne	2c6ac <CBcmMailBox::Read()+0x8>
   2c6b8:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   2c6bc:	e200300f 	and	r3, r0, #15
   2c6c0:	e1510003 	cmp	r1, r3
   2c6c4:	1afffff8 	bne	2c6ac <CBcmMailBox::Read()+0x8>
   2c6c8:	e3c0000f 	bic	r0, r0, #15
   2c6cc:	e12fff1e 	bx	lr
   2c6d0:	2000b000 	.word	0x2000b000

0002c6d4 <CBcmMailBox::Write(unsigned int)>:
   2c6d4:	e59f2034 	ldr	r2, [pc, #52]	; 2c710 <CBcmMailBox::Write(unsigned int)+0x3c>
   2c6d8:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   2c6dc:	e3530000 	cmp	r3, #0
   2c6e0:	bafffffc 	blt	2c6d8 <CBcmMailBox::Write(unsigned int)+0x4>
   2c6e4:	e311000f 	tst	r1, #15
   2c6e8:	1a000003 	bne	2c6fc <CBcmMailBox::Write(unsigned int)+0x28>
   2c6ec:	e5903000 	ldr	r3, [r0]
   2c6f0:	e1811003 	orr	r1, r1, r3
   2c6f4:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   2c6f8:	e12fff1e 	bx	lr
   2c6fc:	e92d4010 	push	{r4, lr}
   2c700:	e3a02062 	mov	r2, #98	; 0x62
   2c704:	e59f1008 	ldr	r1, [pc, #8]	; 2c714 <CBcmMailBox::Write(unsigned int)+0x40>
   2c708:	e59f0008 	ldr	r0, [pc, #8]	; 2c718 <CBcmMailBox::Write(unsigned int)+0x44>
   2c70c:	ebffe03f 	bl	24810 <assertion_failed>
   2c710:	2000b000 	.word	0x2000b000
   2c714:	00045d50 	.word	0x00045d50
   2c718:	00045d60 	.word	0x00045d60

0002c71c <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   2c71c:	e3a02000 	mov	r2, #0
   2c720:	e59f3004 	ldr	r3, [pc, #4]	; 2c72c <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   2c724:	e5832000 	str	r2, [r3]
   2c728:	e12fff1e 	bx	lr
   2c72c:	0004e2bc 	.word	0x0004e2bc

0002c730 <DelayLoop>:
   2c730:	e1a01001 	mov	r1, r1
   2c734:	e1a02002 	mov	r2, r2
   2c738:	e2500001 	subs	r0, r0, #1
   2c73c:	8afffffb 	bhi	2c730 <DelayLoop>
   2c740:	e1a0f00e 	mov	pc, lr

0002c744 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   2c744:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2c748:	e3a0e000 	mov	lr, #0
   2c74c:	e1a03000 	mov	r3, r0
   2c750:	e1a0c00e 	mov	ip, lr
   2c754:	e5801000 	str	r1, [r0]
   2c758:	e28020dc 	add	r2, r0, #220	; 0xdc
   2c75c:	e5e3e004 	strb	lr, [r3, #4]!
   2c760:	e5a3c004 	str	ip, [r3, #4]!
   2c764:	e1530002 	cmp	r3, r2
   2c768:	1afffffc 	bne	2c760 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   2c76c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002c770 <CGPIOManager::~CGPIOManager()>:
   2c770:	e92d4010 	push	{r4, lr}
   2c774:	e2803004 	add	r3, r0, #4
   2c778:	e1a04000 	mov	r4, r0
   2c77c:	e28010dc 	add	r1, r0, #220	; 0xdc
   2c780:	ea000001 	b	2c78c <CGPIOManager::~CGPIOManager()+0x1c>
   2c784:	e1530001 	cmp	r3, r1
   2c788:	0a000006 	beq	2c7a8 <CGPIOManager::~CGPIOManager()+0x38>
   2c78c:	e5b32004 	ldr	r2, [r3, #4]!
   2c790:	e3520000 	cmp	r2, #0
   2c794:	0afffffa 	beq	2c784 <CGPIOManager::~CGPIOManager()+0x14>
   2c798:	e3a0202c 	mov	r2, #44	; 0x2c
   2c79c:	e59f103c 	ldr	r1, [pc, #60]	; 2c7e0 <CGPIOManager::~CGPIOManager()+0x70>
   2c7a0:	e59f003c 	ldr	r0, [pc, #60]	; 2c7e4 <CGPIOManager::~CGPIOManager()+0x74>
   2c7a4:	ebffe019 	bl	24810 <assertion_failed>
   2c7a8:	e5d43004 	ldrb	r3, [r4, #4]
   2c7ac:	e3530000 	cmp	r3, #0
   2c7b0:	0a000004 	beq	2c7c8 <CGPIOManager::~CGPIOManager()+0x58>
   2c7b4:	e5940000 	ldr	r0, [r4]
   2c7b8:	e3500000 	cmp	r0, #0
   2c7bc:	0a000003 	beq	2c7d0 <CGPIOManager::~CGPIOManager()+0x60>
   2c7c0:	e3a01034 	mov	r1, #52	; 0x34
   2c7c4:	ebfffe95 	bl	2c220 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2c7c8:	e1a00004 	mov	r0, r4
   2c7cc:	e8bd8010 	pop	{r4, pc}
   2c7d0:	e3a02032 	mov	r2, #50	; 0x32
   2c7d4:	e59f1004 	ldr	r1, [pc, #4]	; 2c7e0 <CGPIOManager::~CGPIOManager()+0x70>
   2c7d8:	e59f0008 	ldr	r0, [pc, #8]	; 2c7e8 <CGPIOManager::~CGPIOManager()+0x78>
   2c7dc:	ebffe00b 	bl	24810 <assertion_failed>
   2c7e0:	00045d74 	.word	0x00045d74
   2c7e4:	00045d84 	.word	0x00045d84
   2c7e8:	00045d98 	.word	0x00045d98

0002c7ec <CGPIOManager::Initialize()>:
   2c7ec:	e5d03004 	ldrb	r3, [r0, #4]
   2c7f0:	e92d4010 	push	{r4, lr}
   2c7f4:	e3530000 	cmp	r3, #0
   2c7f8:	1a00000a 	bne	2c828 <CGPIOManager::Initialize()+0x3c>
   2c7fc:	e1a04000 	mov	r4, r0
   2c800:	e5900000 	ldr	r0, [r0]
   2c804:	e3500000 	cmp	r0, #0
   2c808:	0a00000a 	beq	2c838 <CGPIOManager::Initialize()+0x4c>
   2c80c:	e1a03004 	mov	r3, r4
   2c810:	e59f2030 	ldr	r2, [pc, #48]	; 2c848 <CGPIOManager::Initialize()+0x5c>
   2c814:	e3a01034 	mov	r1, #52	; 0x34
   2c818:	ebfffe4c 	bl	2c150 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2c81c:	e3a00001 	mov	r0, #1
   2c820:	e5c40004 	strb	r0, [r4, #4]
   2c824:	e8bd8010 	pop	{r4, pc}
   2c828:	e3a0203b 	mov	r2, #59	; 0x3b
   2c82c:	e59f1018 	ldr	r1, [pc, #24]	; 2c84c <CGPIOManager::Initialize()+0x60>
   2c830:	e59f0018 	ldr	r0, [pc, #24]	; 2c850 <CGPIOManager::Initialize()+0x64>
   2c834:	ebffdff5 	bl	24810 <assertion_failed>
   2c838:	e3a0203c 	mov	r2, #60	; 0x3c
   2c83c:	e59f1008 	ldr	r1, [pc, #8]	; 2c84c <CGPIOManager::Initialize()+0x60>
   2c840:	e59f000c 	ldr	r0, [pc, #12]	; 2c854 <CGPIOManager::Initialize()+0x68>
   2c844:	ebffdff1 	bl	24810 <assertion_failed>
   2c848:	0002ca48 	.word	0x0002ca48
   2c84c:	00045d74 	.word	0x00045d74
   2c850:	00045dac 	.word	0x00045dac
   2c854:	00045d98 	.word	0x00045d98

0002c858 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   2c858:	e5d03004 	ldrb	r3, [r0, #4]
   2c85c:	e92d4010 	push	{r4, lr}
   2c860:	e3530000 	cmp	r3, #0
   2c864:	0a00000a 	beq	2c894 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   2c868:	e3510000 	cmp	r1, #0
   2c86c:	0a00000c 	beq	2c8a4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   2c870:	e5913004 	ldr	r3, [r1, #4]
   2c874:	e3530035 	cmp	r3, #53	; 0x35
   2c878:	8a00000d 	bhi	2c8b4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   2c87c:	e0800103 	add	r0, r0, r3, lsl #2
   2c880:	e5903008 	ldr	r3, [r0, #8]
   2c884:	e3530000 	cmp	r3, #0
   2c888:	1a00000d 	bne	2c8c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   2c88c:	e5801008 	str	r1, [r0, #8]
   2c890:	e8bd8010 	pop	{r4, pc}
   2c894:	e3a02045 	mov	r2, #69	; 0x45
   2c898:	e59f1034 	ldr	r1, [pc, #52]	; 2c8d4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c89c:	e59f0034 	ldr	r0, [pc, #52]	; 2c8d8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   2c8a0:	ebffdfda 	bl	24810 <assertion_failed>
   2c8a4:	e3a02047 	mov	r2, #71	; 0x47
   2c8a8:	e59f1024 	ldr	r1, [pc, #36]	; 2c8d4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c8ac:	e59f0028 	ldr	r0, [pc, #40]	; 2c8dc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   2c8b0:	ebffdfd6 	bl	24810 <assertion_failed>
   2c8b4:	e3a02049 	mov	r2, #73	; 0x49
   2c8b8:	e59f1014 	ldr	r1, [pc, #20]	; 2c8d4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c8bc:	e59f001c 	ldr	r0, [pc, #28]	; 2c8e0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x88>
   2c8c0:	ebffdfd2 	bl	24810 <assertion_failed>
   2c8c4:	e3a0204b 	mov	r2, #75	; 0x4b
   2c8c8:	e59f1004 	ldr	r1, [pc, #4]	; 2c8d4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c8cc:	e59f0010 	ldr	r0, [pc, #16]	; 2c8e4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x8c>
   2c8d0:	ebffdfce 	bl	24810 <assertion_failed>
   2c8d4:	00045d74 	.word	0x00045d74
   2c8d8:	00045dc0 	.word	0x00045dc0
   2c8dc:	00045dd0 	.word	0x00045dd0
   2c8e0:	00045ddc 	.word	0x00045ddc
   2c8e4:	00045d84 	.word	0x00045d84

0002c8e8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   2c8e8:	e5d03004 	ldrb	r3, [r0, #4]
   2c8ec:	e92d4010 	push	{r4, lr}
   2c8f0:	e3530000 	cmp	r3, #0
   2c8f4:	0a00000b 	beq	2c928 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   2c8f8:	e3510000 	cmp	r1, #0
   2c8fc:	0a00000d 	beq	2c938 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   2c900:	e5913004 	ldr	r3, [r1, #4]
   2c904:	e3530035 	cmp	r3, #53	; 0x35
   2c908:	8a00000e 	bhi	2c948 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x60>
   2c90c:	e0800103 	add	r0, r0, r3, lsl #2
   2c910:	e5903008 	ldr	r3, [r0, #8]
   2c914:	e3530000 	cmp	r3, #0
   2c918:	0a00000e 	beq	2c958 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   2c91c:	e3a03000 	mov	r3, #0
   2c920:	e5803008 	str	r3, [r0, #8]
   2c924:	e8bd8010 	pop	{r4, pc}
   2c928:	e3a02052 	mov	r2, #82	; 0x52
   2c92c:	e59f1034 	ldr	r1, [pc, #52]	; 2c968 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c930:	e59f0034 	ldr	r0, [pc, #52]	; 2c96c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x84>
   2c934:	ebffdfb5 	bl	24810 <assertion_failed>
   2c938:	e3a02054 	mov	r2, #84	; 0x54
   2c93c:	e59f1024 	ldr	r1, [pc, #36]	; 2c968 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c940:	e59f0028 	ldr	r0, [pc, #40]	; 2c970 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   2c944:	ebffdfb1 	bl	24810 <assertion_failed>
   2c948:	e3a02056 	mov	r2, #86	; 0x56
   2c94c:	e59f1014 	ldr	r1, [pc, #20]	; 2c968 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c950:	e59f001c 	ldr	r0, [pc, #28]	; 2c974 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   2c954:	ebffdfad 	bl	24810 <assertion_failed>
   2c958:	e3a02058 	mov	r2, #88	; 0x58
   2c95c:	e59f1004 	ldr	r1, [pc, #4]	; 2c968 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c960:	e59f0010 	ldr	r0, [pc, #16]	; 2c978 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   2c964:	ebffdfa9 	bl	24810 <assertion_failed>
   2c968:	00045d74 	.word	0x00045d74
   2c96c:	00045dc0 	.word	0x00045dc0
   2c970:	00045dd0 	.word	0x00045dd0
   2c974:	00045ddc 	.word	0x00045ddc
   2c978:	00045df0 	.word	0x00045df0

0002c97c <CGPIOManager::InterruptHandler()>:
   2c97c:	e5d03004 	ldrb	r3, [r0, #4]
   2c980:	e92d4070 	push	{r4, r5, r6, lr}
   2c984:	e3530000 	cmp	r3, #0
   2c988:	0a00001b 	beq	2c9fc <CGPIOManager::InterruptHandler()+0x80>
   2c98c:	e3a04000 	mov	r4, #0
   2c990:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2c994:	e59f2098 	ldr	r2, [pc, #152]	; 2ca34 <CGPIOManager::InterruptHandler()+0xb8>
   2c998:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   2c99c:	ea000005 	b	2c9b8 <CGPIOManager::InterruptHandler()+0x3c>
   2c9a0:	e2844001 	add	r4, r4, #1
   2c9a4:	e314001f 	tst	r4, #31
   2c9a8:	11a030a3 	lsrne	r3, r3, #1
   2c9ac:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   2c9b0:	e3540036 	cmp	r4, #54	; 0x36
   2c9b4:	0a00000d 	beq	2c9f0 <CGPIOManager::InterruptHandler()+0x74>
   2c9b8:	e3130001 	tst	r3, #1
   2c9bc:	0afffff7 	beq	2c9a0 <CGPIOManager::InterruptHandler()+0x24>
   2c9c0:	e2843002 	add	r3, r4, #2
   2c9c4:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   2c9c8:	e3550000 	cmp	r5, #0
   2c9cc:	0a00000e 	beq	2ca0c <CGPIOManager::InterruptHandler()+0x90>
   2c9d0:	e1a00005 	mov	r0, r5
   2c9d4:	ebffe5bf 	bl	260d8 <CGPIOPin::InterruptHandler()>
   2c9d8:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   2c9dc:	e3530000 	cmp	r3, #0
   2c9e0:	1595100c 	ldrne	r1, [r5, #12]
   2c9e4:	15952008 	ldrne	r2, [r5, #8]
   2c9e8:	159f3048 	ldrne	r3, [pc, #72]	; 2ca38 <CGPIOManager::InterruptHandler()+0xbc>
   2c9ec:	17821003 	strne	r1, [r2, r3]
   2c9f0:	e3a03000 	mov	r3, #0
   2c9f4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c9f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c9fc:	e3a0205e 	mov	r2, #94	; 0x5e
   2ca00:	e59f1034 	ldr	r1, [pc, #52]	; 2ca3c <CGPIOManager::InterruptHandler()+0xc0>
   2ca04:	e59f0034 	ldr	r0, [pc, #52]	; 2ca40 <CGPIOManager::InterruptHandler()+0xc4>
   2ca08:	ebffdf80 	bl	24810 <assertion_failed>
   2ca0c:	e1a00004 	mov	r0, r4
   2ca10:	ebffe5d0 	bl	26158 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   2ca14:	e3a02001 	mov	r2, #1
   2ca18:	e59f3024 	ldr	r3, [pc, #36]	; 2ca44 <CGPIOManager::InterruptHandler()+0xc8>
   2ca1c:	e204101f 	and	r1, r4, #31
   2ca20:	e08332a4 	add	r3, r3, r4, lsr #5
   2ca24:	e1a03103 	lsl	r3, r3, #2
   2ca28:	e1a02112 	lsl	r2, r2, r1
   2ca2c:	e5832000 	str	r2, [r3]
   2ca30:	eaffffee 	b	2c9f0 <CGPIOManager::InterruptHandler()+0x74>
   2ca34:	20200000 	.word	0x20200000
   2ca38:	20200040 	.word	0x20200040
   2ca3c:	00045d74 	.word	0x00045d74
   2ca40:	00045dc0 	.word	0x00045dc0
   2ca44:	08080010 	.word	0x08080010

0002ca48 <CGPIOManager::InterruptStub(void*)>:
   2ca48:	e3500000 	cmp	r0, #0
   2ca4c:	0a000000 	beq	2ca54 <CGPIOManager::InterruptStub(void*)+0xc>
   2ca50:	eaffffc9 	b	2c97c <CGPIOManager::InterruptHandler()>
   2ca54:	e92d4010 	push	{r4, lr}
   2ca58:	e3a0208e 	mov	r2, #142	; 0x8e
   2ca5c:	e59f1004 	ldr	r1, [pc, #4]	; 2ca68 <CGPIOManager::InterruptStub(void*)+0x20>
   2ca60:	e59f0004 	ldr	r0, [pc, #4]	; 2ca6c <CGPIOManager::InterruptStub(void*)+0x24>
   2ca64:	ebffdf69 	bl	24810 <assertion_failed>
   2ca68:	00045d74 	.word	0x00045d74
   2ca6c:	0003f2ec 	.word	0x0003f2ec

0002ca70 <CPtrList::CPtrList()>:
   2ca70:	e3a02000 	mov	r2, #0
   2ca74:	e5802000 	str	r2, [r0]
   2ca78:	e12fff1e 	bx	lr

0002ca7c <CPtrList::~CPtrList()>:
   2ca7c:	e5903000 	ldr	r3, [r0]
   2ca80:	e3530000 	cmp	r3, #0
   2ca84:	1a000000 	bne	2ca8c <CPtrList::~CPtrList()+0x10>
   2ca88:	e12fff1e 	bx	lr
   2ca8c:	e92d4010 	push	{r4, lr}
   2ca90:	e3a0202a 	mov	r2, #42	; 0x2a
   2ca94:	e59f1004 	ldr	r1, [pc, #4]	; 2caa0 <CPtrList::~CPtrList()+0x24>
   2ca98:	e59f0004 	ldr	r0, [pc, #4]	; 2caa4 <CPtrList::~CPtrList()+0x28>
   2ca9c:	ebffdf5b 	bl	24810 <assertion_failed>
   2caa0:	00045e04 	.word	0x00045e04
   2caa4:	00045e10 	.word	0x00045e10

0002caa8 <CPtrList::GetFirst()>:
   2caa8:	e5900000 	ldr	r0, [r0]
   2caac:	e12fff1e 	bx	lr

0002cab0 <CPtrList::GetNext(TPtrListElement*)>:
   2cab0:	e3510000 	cmp	r1, #0
   2cab4:	e92d4010 	push	{r4, lr}
   2cab8:	0a000005 	beq	2cad4 <CPtrList::GetNext(TPtrListElement*)+0x24>
   2cabc:	e59f3030 	ldr	r3, [pc, #48]	; 2caf4 <CPtrList::GetNext(TPtrListElement*)+0x44>
   2cac0:	e5912000 	ldr	r2, [r1]
   2cac4:	e1520003 	cmp	r2, r3
   2cac8:	1a000005 	bne	2cae4 <CPtrList::GetNext(TPtrListElement*)+0x34>
   2cacc:	e5910008 	ldr	r0, [r1, #8]
   2cad0:	e8bd8010 	pop	{r4, pc}
   2cad4:	e3a02034 	mov	r2, #52	; 0x34
   2cad8:	e59f1018 	ldr	r1, [pc, #24]	; 2caf8 <CPtrList::GetNext(TPtrListElement*)+0x48>
   2cadc:	e59f0018 	ldr	r0, [pc, #24]	; 2cafc <CPtrList::GetNext(TPtrListElement*)+0x4c>
   2cae0:	ebffdf4a 	bl	24810 <assertion_failed>
   2cae4:	e3a02035 	mov	r2, #53	; 0x35
   2cae8:	e59f1008 	ldr	r1, [pc, #8]	; 2caf8 <CPtrList::GetNext(TPtrListElement*)+0x48>
   2caec:	e59f000c 	ldr	r0, [pc, #12]	; 2cb00 <CPtrList::GetNext(TPtrListElement*)+0x50>
   2caf0:	ebffdf46 	bl	24810 <assertion_failed>
   2caf4:	504c4d43 	.word	0x504c4d43
   2caf8:	00045e04 	.word	0x00045e04
   2cafc:	00045e20 	.word	0x00045e20
   2cb00:	00045e30 	.word	0x00045e30

0002cb04 <CPtrList::GetPtr(TPtrListElement*)>:
   2cb04:	e3510000 	cmp	r1, #0
   2cb08:	e92d4010 	push	{r4, lr}
   2cb0c:	0a000005 	beq	2cb28 <CPtrList::GetPtr(TPtrListElement*)+0x24>
   2cb10:	e59f3030 	ldr	r3, [pc, #48]	; 2cb48 <CPtrList::GetPtr(TPtrListElement*)+0x44>
   2cb14:	e5912000 	ldr	r2, [r1]
   2cb18:	e1520003 	cmp	r2, r3
   2cb1c:	1a000005 	bne	2cb38 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   2cb20:	e591000c 	ldr	r0, [r1, #12]
   2cb24:	e8bd8010 	pop	{r4, pc}
   2cb28:	e3a0203c 	mov	r2, #60	; 0x3c
   2cb2c:	e59f1018 	ldr	r1, [pc, #24]	; 2cb4c <CPtrList::GetPtr(TPtrListElement*)+0x48>
   2cb30:	e59f0018 	ldr	r0, [pc, #24]	; 2cb50 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   2cb34:	ebffdf35 	bl	24810 <assertion_failed>
   2cb38:	e3a0203d 	mov	r2, #61	; 0x3d
   2cb3c:	e59f1008 	ldr	r1, [pc, #8]	; 2cb4c <CPtrList::GetPtr(TPtrListElement*)+0x48>
   2cb40:	e59f000c 	ldr	r0, [pc, #12]	; 2cb54 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   2cb44:	ebffdf31 	bl	24810 <assertion_failed>
   2cb48:	504c4d43 	.word	0x504c4d43
   2cb4c:	00045e04 	.word	0x00045e04
   2cb50:	00045e20 	.word	0x00045e20
   2cb54:	00045e30 	.word	0x00045e30

0002cb58 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   2cb58:	e92d4070 	push	{r4, r5, r6, lr}
   2cb5c:	e1a05000 	mov	r5, r0
   2cb60:	e3a00010 	mov	r0, #16
   2cb64:	e1a04001 	mov	r4, r1
   2cb68:	e1a06002 	mov	r6, r2
   2cb6c:	ebfff944 	bl	2b084 <operator new(unsigned int)>
   2cb70:	e5953000 	ldr	r3, [r5]
   2cb74:	e59f10a8 	ldr	r1, [pc, #168]	; 2cc24 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xcc>
   2cb78:	e3530000 	cmp	r3, #0
   2cb7c:	e580600c 	str	r6, [r0, #12]
   2cb80:	e5801000 	str	r1, [r0]
   2cb84:	0a000015 	beq	2cbe0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x88>
   2cb88:	e3540000 	cmp	r4, #0
   2cb8c:	0a000017 	beq	2cbf0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x98>
   2cb90:	e5942000 	ldr	r2, [r4]
   2cb94:	e1520001 	cmp	r2, r1
   2cb98:	1a000018 	bne	2cc00 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa8>
   2cb9c:	e1530004 	cmp	r3, r4
   2cba0:	0a00001a 	beq	2cc10 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb8>
   2cba4:	e5943004 	ldr	r3, [r4, #4]
   2cba8:	e5804008 	str	r4, [r0, #8]
   2cbac:	e3530000 	cmp	r3, #0
   2cbb0:	e5803004 	str	r3, [r0, #4]
   2cbb4:	0a000003 	beq	2cbc8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   2cbb8:	e5931000 	ldr	r1, [r3]
   2cbbc:	e1510002 	cmp	r1, r2
   2cbc0:	05830008 	streq	r0, [r3, #8]
   2cbc4:	1a000001 	bne	2cbd0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   2cbc8:	e5840004 	str	r0, [r4, #4]
   2cbcc:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cbd0:	e3a02060 	mov	r2, #96	; 0x60
   2cbd4:	e59f104c 	ldr	r1, [pc, #76]	; 2cc28 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2cbd8:	e59f004c 	ldr	r0, [pc, #76]	; 2cc2c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2cbdc:	ebffdf0b 	bl	24810 <assertion_failed>
   2cbe0:	e3a0204c 	mov	r2, #76	; 0x4c
   2cbe4:	e59f103c 	ldr	r1, [pc, #60]	; 2cc28 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2cbe8:	e59f0040 	ldr	r0, [pc, #64]	; 2cc30 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   2cbec:	ebffdf07 	bl	24810 <assertion_failed>
   2cbf0:	e3a0204d 	mov	r2, #77	; 0x4d
   2cbf4:	e59f102c 	ldr	r1, [pc, #44]	; 2cc28 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2cbf8:	e59f0034 	ldr	r0, [pc, #52]	; 2cc34 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>
   2cbfc:	ebffdf03 	bl	24810 <assertion_failed>
   2cc00:	e3a0204e 	mov	r2, #78	; 0x4e
   2cc04:	e59f101c 	ldr	r1, [pc, #28]	; 2cc28 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2cc08:	e59f0028 	ldr	r0, [pc, #40]	; 2cc38 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   2cc0c:	ebffdeff 	bl	24810 <assertion_failed>
   2cc10:	e3a02000 	mov	r2, #0
   2cc14:	e980000c 	stmib	r0, {r2, r3}
   2cc18:	e5830004 	str	r0, [r3, #4]
   2cc1c:	e5850000 	str	r0, [r5]
   2cc20:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cc24:	504c4d43 	.word	0x504c4d43
   2cc28:	00045e04 	.word	0x00045e04
   2cc2c:	00045e94 	.word	0x00045e94
   2cc30:	00045e54 	.word	0x00045e54
   2cc34:	00045e64 	.word	0x00045e64
   2cc38:	00045e70 	.word	0x00045e70

0002cc3c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   2cc3c:	e92d4070 	push	{r4, r5, r6, lr}
   2cc40:	e1a04001 	mov	r4, r1
   2cc44:	e1a05000 	mov	r5, r0
   2cc48:	e3a00010 	mov	r0, #16
   2cc4c:	e1a06002 	mov	r6, r2
   2cc50:	ebfff90b 	bl	2b084 <operator new(unsigned int)>
   2cc54:	e59f30ac 	ldr	r3, [pc, #172]	; 2cd08 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   2cc58:	e3540000 	cmp	r4, #0
   2cc5c:	e580600c 	str	r6, [r0, #12]
   2cc60:	e5803000 	str	r3, [r0]
   2cc64:	0a000014 	beq	2ccbc <CPtrList::InsertAfter(TPtrListElement*, void*)+0x80>
   2cc68:	e5952000 	ldr	r2, [r5]
   2cc6c:	e3520000 	cmp	r2, #0
   2cc70:	0a000018 	beq	2ccd8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   2cc74:	e5942000 	ldr	r2, [r4]
   2cc78:	e1520003 	cmp	r2, r3
   2cc7c:	1a000019 	bne	2cce8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xac>
   2cc80:	e5943008 	ldr	r3, [r4, #8]
   2cc84:	e5804004 	str	r4, [r0, #4]
   2cc88:	e3530000 	cmp	r3, #0
   2cc8c:	e5803008 	str	r3, [r0, #8]
   2cc90:	0a000003 	beq	2cca4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   2cc94:	e5931000 	ldr	r1, [r3]
   2cc98:	e1510002 	cmp	r1, r2
   2cc9c:	05830004 	streq	r0, [r3, #4]
   2cca0:	1a000001 	bne	2ccac <CPtrList::InsertAfter(TPtrListElement*, void*)+0x70>
   2cca4:	e5840008 	str	r0, [r4, #8]
   2cca8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ccac:	e3a02085 	mov	r2, #133	; 0x85
   2ccb0:	e59f1054 	ldr	r1, [pc, #84]	; 2cd0c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2ccb4:	e59f0054 	ldr	r0, [pc, #84]	; 2cd10 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd4>
   2ccb8:	ebffded4 	bl	24810 <assertion_failed>
   2ccbc:	e5953000 	ldr	r3, [r5]
   2ccc0:	e3530000 	cmp	r3, #0
   2ccc4:	1a00000b 	bne	2ccf8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   2ccc8:	e5803004 	str	r3, [r0, #4]
   2cccc:	e5803008 	str	r3, [r0, #8]
   2ccd0:	e5850000 	str	r0, [r5]
   2ccd4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ccd8:	e3a0207d 	mov	r2, #125	; 0x7d
   2ccdc:	e59f1028 	ldr	r1, [pc, #40]	; 2cd0c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cce0:	e59f002c 	ldr	r0, [pc, #44]	; 2cd14 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   2cce4:	ebffdec9 	bl	24810 <assertion_failed>
   2cce8:	e3a0207e 	mov	r2, #126	; 0x7e
   2ccec:	e59f1018 	ldr	r1, [pc, #24]	; 2cd0c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2ccf0:	e59f0020 	ldr	r0, [pc, #32]	; 2cd18 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   2ccf4:	ebffdec5 	bl	24810 <assertion_failed>
   2ccf8:	e3a02074 	mov	r2, #116	; 0x74
   2ccfc:	e59f1008 	ldr	r1, [pc, #8]	; 2cd0c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cd00:	e59f0014 	ldr	r0, [pc, #20]	; 2cd1c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   2cd04:	ebffdec1 	bl	24810 <assertion_failed>
   2cd08:	504c4d43 	.word	0x504c4d43
   2cd0c:	00045e04 	.word	0x00045e04
   2cd10:	00045ee0 	.word	0x00045ee0
   2cd14:	00045e54 	.word	0x00045e54
   2cd18:	00045ebc 	.word	0x00045ebc
   2cd1c:	00045e10 	.word	0x00045e10

0002cd20 <CPtrList::Remove(TPtrListElement*)>:
   2cd20:	e3510000 	cmp	r1, #0
   2cd24:	e92d4010 	push	{r4, lr}
   2cd28:	0a00002c 	beq	2cde0 <CPtrList::Remove(TPtrListElement*)+0xc0>
   2cd2c:	e59f30ec 	ldr	r3, [pc, #236]	; 2ce20 <CPtrList::Remove(TPtrListElement*)+0x100>
   2cd30:	e5912000 	ldr	r2, [r1]
   2cd34:	e1520003 	cmp	r2, r3
   2cd38:	1a00002c 	bne	2cdf0 <CPtrList::Remove(TPtrListElement*)+0xd0>
   2cd3c:	e5903000 	ldr	r3, [r0]
   2cd40:	e1510003 	cmp	r1, r3
   2cd44:	0a000018 	beq	2cdac <CPtrList::Remove(TPtrListElement*)+0x8c>
   2cd48:	e5913004 	ldr	r3, [r1, #4]
   2cd4c:	e3530000 	cmp	r3, #0
   2cd50:	0a00002a 	beq	2ce00 <CPtrList::Remove(TPtrListElement*)+0xe0>
   2cd54:	e5930000 	ldr	r0, [r3]
   2cd58:	e1500002 	cmp	r0, r2
   2cd5c:	1a00002b 	bne	2ce10 <CPtrList::Remove(TPtrListElement*)+0xf0>
   2cd60:	e5912008 	ldr	r2, [r1, #8]
   2cd64:	e5832008 	str	r2, [r3, #8]
   2cd68:	e5912008 	ldr	r2, [r1, #8]
   2cd6c:	e3520000 	cmp	r2, #0
   2cd70:	0a000003 	beq	2cd84 <CPtrList::Remove(TPtrListElement*)+0x64>
   2cd74:	e592c000 	ldr	ip, [r2]
   2cd78:	e15c0000 	cmp	ip, r0
   2cd7c:	05823004 	streq	r3, [r2, #4]
   2cd80:	1a000005 	bne	2cd9c <CPtrList::Remove(TPtrListElement*)+0x7c>
   2cd84:	e8bd4010 	pop	{r4, lr}
   2cd88:	e3a03000 	mov	r3, #0
   2cd8c:	e1a00001 	mov	r0, r1
   2cd90:	e5813000 	str	r3, [r1]
   2cd94:	e3a01010 	mov	r1, #16
   2cd98:	eafff8c7 	b	2b0bc <operator delete(void*, unsigned int)>
   2cd9c:	e3a020a4 	mov	r2, #164	; 0xa4
   2cda0:	e59f107c 	ldr	r1, [pc, #124]	; 2ce24 <CPtrList::Remove(TPtrListElement*)+0x104>
   2cda4:	e59f007c 	ldr	r0, [pc, #124]	; 2ce28 <CPtrList::Remove(TPtrListElement*)+0x108>
   2cda8:	ebffde98 	bl	24810 <assertion_failed>
   2cdac:	e5913008 	ldr	r3, [r1, #8]
   2cdb0:	e3530000 	cmp	r3, #0
   2cdb4:	e5803000 	str	r3, [r0]
   2cdb8:	0afffff1 	beq	2cd84 <CPtrList::Remove(TPtrListElement*)+0x64>
   2cdbc:	e5930000 	ldr	r0, [r3]
   2cdc0:	e1500002 	cmp	r0, r2
   2cdc4:	03a02000 	moveq	r2, #0
   2cdc8:	05832004 	streq	r2, [r3, #4]
   2cdcc:	0affffec 	beq	2cd84 <CPtrList::Remove(TPtrListElement*)+0x64>
   2cdd0:	e3a02098 	mov	r2, #152	; 0x98
   2cdd4:	e59f1048 	ldr	r1, [pc, #72]	; 2ce24 <CPtrList::Remove(TPtrListElement*)+0x104>
   2cdd8:	e59f0048 	ldr	r0, [pc, #72]	; 2ce28 <CPtrList::Remove(TPtrListElement*)+0x108>
   2cddc:	ebffde8b 	bl	24810 <assertion_failed>
   2cde0:	e3a0208f 	mov	r2, #143	; 0x8f
   2cde4:	e59f1038 	ldr	r1, [pc, #56]	; 2ce24 <CPtrList::Remove(TPtrListElement*)+0x104>
   2cde8:	e59f003c 	ldr	r0, [pc, #60]	; 2ce2c <CPtrList::Remove(TPtrListElement*)+0x10c>
   2cdec:	ebffde87 	bl	24810 <assertion_failed>
   2cdf0:	e3a02090 	mov	r2, #144	; 0x90
   2cdf4:	e59f1028 	ldr	r1, [pc, #40]	; 2ce24 <CPtrList::Remove(TPtrListElement*)+0x104>
   2cdf8:	e59f0030 	ldr	r0, [pc, #48]	; 2ce30 <CPtrList::Remove(TPtrListElement*)+0x110>
   2cdfc:	ebffde83 	bl	24810 <assertion_failed>
   2ce00:	e3a0209e 	mov	r2, #158	; 0x9e
   2ce04:	e59f1018 	ldr	r1, [pc, #24]	; 2ce24 <CPtrList::Remove(TPtrListElement*)+0x104>
   2ce08:	e59f0024 	ldr	r0, [pc, #36]	; 2ce34 <CPtrList::Remove(TPtrListElement*)+0x114>
   2ce0c:	ebffde7f 	bl	24810 <assertion_failed>
   2ce10:	e3a0209f 	mov	r2, #159	; 0x9f
   2ce14:	e59f1008 	ldr	r1, [pc, #8]	; 2ce24 <CPtrList::Remove(TPtrListElement*)+0x104>
   2ce18:	e59f0018 	ldr	r0, [pc, #24]	; 2ce38 <CPtrList::Remove(TPtrListElement*)+0x118>
   2ce1c:	ebffde7b 	bl	24810 <assertion_failed>
   2ce20:	504c4d43 	.word	0x504c4d43
   2ce24:	00045e04 	.word	0x00045e04
   2ce28:	00045f0c 	.word	0x00045f0c
   2ce2c:	00045e20 	.word	0x00045e20
   2ce30:	00045e30 	.word	0x00045e30
   2ce34:	00045f38 	.word	0x00045f38
   2ce38:	00045f50 	.word	0x00045f50

0002ce3c <CPtrList::Find(void*)>:
   2ce3c:	e5900000 	ldr	r0, [r0]
   2ce40:	e3500000 	cmp	r0, #0
   2ce44:	0a000015 	beq	2cea0 <CPtrList::Find(void*)+0x64>
   2ce48:	e59f3054 	ldr	r3, [pc, #84]	; 2cea4 <CPtrList::Find(void*)+0x68>
   2ce4c:	e5902000 	ldr	r2, [r0]
   2ce50:	e1520003 	cmp	r2, r3
   2ce54:	1a00000c 	bne	2ce8c <CPtrList::Find(void*)+0x50>
   2ce58:	e590300c 	ldr	r3, [r0, #12]
   2ce5c:	e1510003 	cmp	r1, r3
   2ce60:	1a000003 	bne	2ce74 <CPtrList::Find(void*)+0x38>
   2ce64:	ea00000d 	b	2cea0 <CPtrList::Find(void*)+0x64>
   2ce68:	e590300c 	ldr	r3, [r0, #12]
   2ce6c:	e1530001 	cmp	r3, r1
   2ce70:	0a00000a 	beq	2cea0 <CPtrList::Find(void*)+0x64>
   2ce74:	e5900008 	ldr	r0, [r0, #8]
   2ce78:	e3500000 	cmp	r0, #0
   2ce7c:	0a000007 	beq	2cea0 <CPtrList::Find(void*)+0x64>
   2ce80:	e5903000 	ldr	r3, [r0]
   2ce84:	e1530002 	cmp	r3, r2
   2ce88:	0afffff6 	beq	2ce68 <CPtrList::Find(void*)+0x2c>
   2ce8c:	e92d4010 	push	{r4, lr}
   2ce90:	e3a020b3 	mov	r2, #179	; 0xb3
   2ce94:	e59f100c 	ldr	r1, [pc, #12]	; 2cea8 <CPtrList::Find(void*)+0x6c>
   2ce98:	e59f000c 	ldr	r0, [pc, #12]	; 2ceac <CPtrList::Find(void*)+0x70>
   2ce9c:	ebffde5b 	bl	24810 <assertion_failed>
   2cea0:	e12fff1e 	bx	lr
   2cea4:	504c4d43 	.word	0x504c4d43
   2cea8:	00045e04 	.word	0x00045e04
   2ceac:	00045e30 	.word	0x00045e30

0002ceb0 <CPageAllocator::CPageAllocator()>:
   2ceb0:	e3a02000 	mov	r2, #0
   2ceb4:	e3a01001 	mov	r1, #1
   2ceb8:	e5802000 	str	r2, [r0]
   2cebc:	e580100c 	str	r1, [r0, #12]
   2cec0:	e5802004 	str	r2, [r0, #4]
   2cec4:	e5802008 	str	r2, [r0, #8]
   2cec8:	e12fff1e 	bx	lr

0002cecc <CPageAllocator::~CPageAllocator()>:
   2cecc:	e12fff1e 	bx	lr

0002ced0 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   2ced0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2ced4:	e28db000 	add	fp, sp, #0
   2ced8:	e24dd014 	sub	sp, sp, #20
   2cedc:	e50b0008 	str	r0, [fp, #-8]
   2cee0:	e50b100c 	str	r1, [fp, #-12]
   2cee4:	e50b2010 	str	r2, [fp, #-16]
   2cee8:	e51b300c 	ldr	r3, [fp, #-12]
   2ceec:	e2833eff 	add	r3, r3, #4080	; 0xff0
   2cef0:	e283300f 	add	r3, r3, #15
   2cef4:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2cef8:	e3c3300f 	bic	r3, r3, #15
   2cefc:	e1a02003 	mov	r2, r3
   2cf00:	e51b3008 	ldr	r3, [fp, #-8]
   2cf04:	e5832000 	str	r2, [r3]
   2cf08:	e51b200c 	ldr	r2, [fp, #-12]
   2cf0c:	e51b3010 	ldr	r3, [fp, #-16]
   2cf10:	e0823003 	add	r3, r2, r3
   2cf14:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2cf18:	e3c3300f 	bic	r3, r3, #15
   2cf1c:	e1a02003 	mov	r2, r3
   2cf20:	e51b3008 	ldr	r3, [fp, #-8]
   2cf24:	e5832004 	str	r2, [r3, #4]
   2cf28:	e320f000 	nop	{0}
   2cf2c:	e28bd000 	add	sp, fp, #0
   2cf30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2cf34:	e12fff1e 	bx	lr

0002cf38 <CPageAllocator::GetFreeSpace() const>:
   2cf38:	e8900005 	ldm	r0, {r0, r2}
   2cf3c:	e0420000 	sub	r0, r2, r0
   2cf40:	e12fff1e 	bx	lr

0002cf44 <CPageAllocator::Allocate()>:
   2cf44:	e5903000 	ldr	r3, [r0]
   2cf48:	e92d4070 	push	{r4, r5, r6, lr}
   2cf4c:	e3530000 	cmp	r3, #0
   2cf50:	0a000026 	beq	2cff0 <CPageAllocator::Allocate()+0xac>
   2cf54:	e1a05000 	mov	r5, r0
   2cf58:	e590000c 	ldr	r0, [r0, #12]
   2cf5c:	e3500000 	cmp	r0, #0
   2cf60:	1a000012 	bne	2cfb0 <CPageAllocator::Allocate()+0x6c>
   2cf64:	e5954008 	ldr	r4, [r5, #8]
   2cf68:	e3540000 	cmp	r4, #0
   2cf6c:	0a000013 	beq	2cfc0 <CPageAllocator::Allocate()+0x7c>
   2cf70:	e59f3098 	ldr	r3, [pc, #152]	; 2d010 <CPageAllocator::Allocate()+0xcc>
   2cf74:	e5942000 	ldr	r2, [r4]
   2cf78:	e1520003 	cmp	r2, r3
   2cf7c:	1a00001f 	bne	2d000 <CPageAllocator::Allocate()+0xbc>
   2cf80:	e3a03000 	mov	r3, #0
   2cf84:	e5942004 	ldr	r2, [r4, #4]
   2cf88:	e5852008 	str	r2, [r5, #8]
   2cf8c:	e5843000 	str	r3, [r4]
   2cf90:	e595300c 	ldr	r3, [r5, #12]
   2cf94:	e3530000 	cmp	r3, #0
   2cf98:	1a000001 	bne	2cfa4 <CPageAllocator::Allocate()+0x60>
   2cf9c:	e1a00004 	mov	r0, r4
   2cfa0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cfa4:	ebfffb93 	bl	2bdf8 <LeaveCritical>
   2cfa8:	e1a00004 	mov	r0, r4
   2cfac:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cfb0:	ebfffb65 	bl	2bd4c <EnterCritical>
   2cfb4:	e5954008 	ldr	r4, [r5, #8]
   2cfb8:	e3540000 	cmp	r4, #0
   2cfbc:	1affffeb 	bne	2cf70 <CPageAllocator::Allocate()+0x2c>
   2cfc0:	e5954000 	ldr	r4, [r5]
   2cfc4:	e5952004 	ldr	r2, [r5, #4]
   2cfc8:	e2843a01 	add	r3, r4, #4096	; 0x1000
   2cfcc:	e1530002 	cmp	r3, r2
   2cfd0:	e5853000 	str	r3, [r5]
   2cfd4:	9affffed 	bls	2cf90 <CPageAllocator::Allocate()+0x4c>
   2cfd8:	e595400c 	ldr	r4, [r5, #12]
   2cfdc:	e3540000 	cmp	r4, #0
   2cfe0:	0affffed 	beq	2cf9c <CPageAllocator::Allocate()+0x58>
   2cfe4:	ebfffb83 	bl	2bdf8 <LeaveCritical>
   2cfe8:	e3a00000 	mov	r0, #0
   2cfec:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cff0:	e59f101c 	ldr	r1, [pc, #28]	; 2d014 <CPageAllocator::Allocate()+0xd0>
   2cff4:	e3a02036 	mov	r2, #54	; 0x36
   2cff8:	e2810014 	add	r0, r1, #20
   2cffc:	ebffde03 	bl	24810 <assertion_failed>
   2d000:	e59f100c 	ldr	r1, [pc, #12]	; 2d014 <CPageAllocator::Allocate()+0xd0>
   2d004:	e3a02044 	mov	r2, #68	; 0x44
   2d008:	e2810024 	add	r0, r1, #36	; 0x24
   2d00c:	ebffddff 	bl	24810 <assertion_failed>
   2d010:	50474d43 	.word	0x50474d43
   2d014:	00045f7c 	.word	0x00045f7c

0002d018 <CPageAllocator::Free(void*)>:
   2d018:	e92d4070 	push	{r4, r5, r6, lr}
   2d01c:	e2515000 	subs	r5, r1, #0
   2d020:	08bd8070 	popeq	{r4, r5, r6, pc}
   2d024:	e590300c 	ldr	r3, [r0, #12]
   2d028:	e3530000 	cmp	r3, #0
   2d02c:	1a000004 	bne	2d044 <CPageAllocator::Free(void*)+0x2c>
   2d030:	e5903008 	ldr	r3, [r0, #8]
   2d034:	e59f2038 	ldr	r2, [pc, #56]	; 2d074 <CPageAllocator::Free(void*)+0x5c>
   2d038:	e885000c 	stm	r5, {r2, r3}
   2d03c:	e5805008 	str	r5, [r0, #8]
   2d040:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d044:	e1a04000 	mov	r4, r0
   2d048:	e1a00003 	mov	r0, r3
   2d04c:	ebfffb3e 	bl	2bd4c <EnterCritical>
   2d050:	e594100c 	ldr	r1, [r4, #12]
   2d054:	e5943008 	ldr	r3, [r4, #8]
   2d058:	e59f2014 	ldr	r2, [pc, #20]	; 2d074 <CPageAllocator::Free(void*)+0x5c>
   2d05c:	e3510000 	cmp	r1, #0
   2d060:	e885000c 	stm	r5, {r2, r3}
   2d064:	e5845008 	str	r5, [r4, #8]
   2d068:	08bd8070 	popeq	{r4, r5, r6, pc}
   2d06c:	e8bd4070 	pop	{r4, r5, r6, lr}
   2d070:	eafffb60 	b	2bdf8 <LeaveCritical>
   2d074:	50474d43 	.word	0x50474d43

0002d078 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   2d078:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d07c:	e1a04000 	mov	r4, r0
   2d080:	e3a0b000 	mov	fp, #0
   2d084:	e1a06002 	mov	r6, r2
   2d088:	e1a07001 	mov	r7, r1
   2d08c:	e1a05003 	mov	r5, r3
   2d090:	e24dd00c 	sub	sp, sp, #12
   2d094:	e280a018 	add	sl, r0, #24
   2d098:	ebffdfcd 	bl	24fd4 <CDevice::CDevice()>
   2d09c:	e59f31d8 	ldr	r3, [pc, #472]	; 2d27c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x204>
   2d0a0:	e5c46008 	strb	r6, [r4, #8]
   2d0a4:	e5843000 	str	r3, [r4]
   2d0a8:	e5847004 	str	r7, [r4, #4]
   2d0ac:	e2849040 	add	r9, r4, #64	; 0x40
   2d0b0:	e584500c 	str	r5, [r4, #12]
   2d0b4:	e1a0000a 	mov	r0, sl
   2d0b8:	e584b010 	str	fp, [r4, #16]
   2d0bc:	e5c4b014 	strb	fp, [r4, #20]
   2d0c0:	ebffe147 	bl	255e4 <CGPIOPin::CGPIOPin()>
   2d0c4:	e2848068 	add	r8, r4, #104	; 0x68
   2d0c8:	e1a00009 	mov	r0, r9
   2d0cc:	ebffe144 	bl	255e4 <CGPIOPin::CGPIOPin()>
   2d0d0:	e2847090 	add	r7, r4, #144	; 0x90
   2d0d4:	e1a00008 	mov	r0, r8
   2d0d8:	ebffe141 	bl	255e4 <CGPIOPin::CGPIOPin()>
   2d0dc:	e1a00007 	mov	r0, r7
   2d0e0:	ebffe13f 	bl	255e4 <CGPIOPin::CGPIOPin()>
   2d0e4:	e156000b 	cmp	r6, fp
   2d0e8:	13a06002 	movne	r6, #2
   2d0ec:	03a06001 	moveq	r6, #1
   2d0f0:	e3a03001 	mov	r3, #1
   2d0f4:	e594000c 	ldr	r0, [r4, #12]
   2d0f8:	e2841901 	add	r1, r4, #16384	; 0x4000
   2d0fc:	e150000b 	cmp	r0, fp
   2d100:	e584b0bc 	str	fp, [r4, #188]	; 0xbc
   2d104:	e584b0b8 	str	fp, [r4, #184]	; 0xb8
   2d108:	e584b0c0 	str	fp, [r4, #192]	; 0xc0
   2d10c:	e584b0c4 	str	fp, [r4, #196]	; 0xc4
   2d110:	e584b0d0 	str	fp, [r4, #208]	; 0xd0
   2d114:	e5c4b0c8 	strb	fp, [r4, #200]	; 0xc8
   2d118:	e5c4b0c9 	strb	fp, [r4, #201]	; 0xc9
   2d11c:	e584b0cc 	str	fp, [r4, #204]	; 0xcc
   2d120:	e584b0d8 	str	fp, [r4, #216]	; 0xd8
   2d124:	e584b0d4 	str	fp, [r4, #212]	; 0xd4
   2d128:	e5c4b0dc 	strb	fp, [r4, #220]	; 0xdc
   2d12c:	e584b0f4 	str	fp, [r4, #244]	; 0xf4
   2d130:	e584b0e4 	str	fp, [r4, #228]	; 0xe4
   2d134:	e584b0e8 	str	fp, [r4, #232]	; 0xe8
   2d138:	e584b0ec 	str	fp, [r4, #236]	; 0xec
   2d13c:	e584b0f0 	str	fp, [r4, #240]	; 0xf0
   2d140:	e584b0e0 	str	fp, [r4, #224]	; 0xe0
   2d144:	e5816f28 	str	r6, [r1, #3880]	; 0xf28
   2d148:	e581bf1c 	str	fp, [r1, #3868]	; 0xf1c
   2d14c:	e581bf2c 	str	fp, [r1, #3884]	; 0xf2c
   2d150:	e5813f18 	str	r3, [r1, #3864]	; 0xf18
   2d154:	1a000029 	bne	2d200 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x188>
   2d158:	e59f6120 	ldr	r6, [pc, #288]	; 2d280 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x208>
   2d15c:	e1a02205 	lsl	r2, r5, #4
   2d160:	e1a0b002 	mov	fp, r2
   2d164:	e0862002 	add	r2, r6, r2
   2d168:	e5922004 	ldr	r2, [r2, #4]
   2d16c:	e3520035 	cmp	r2, #53	; 0x35
   2d170:	8a000022 	bhi	2d200 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x188>
   2d174:	e59f2108 	ldr	r2, [pc, #264]	; 2d284 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x20c>
   2d178:	e5921020 	ldr	r1, [r2, #32]
   2d17c:	e3510000 	cmp	r1, #0
   2d180:	1a000033 	bne	2d254 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1dc>
   2d184:	e7961105 	ldr	r1, [r6, r5, lsl #2]
   2d188:	e5824020 	str	r4, [r2, #32]
   2d18c:	e3510000 	cmp	r1, #0
   2d190:	e5841010 	str	r1, [r4, #16]
   2d194:	0a000033 	beq	2d268 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1f0>
   2d198:	e3550000 	cmp	r5, #0
   2d19c:	0a00001a 	beq	2d20c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x194>
   2d1a0:	e086600b 	add	r6, r6, fp
   2d1a4:	e5961004 	ldr	r1, [r6, #4]
   2d1a8:	e1a00008 	mov	r0, r8
   2d1ac:	ebffe138 	bl	25694 <CGPIOPin::AssignPin(unsigned int)>
   2d1b0:	e5961008 	ldr	r1, [r6, #8]
   2d1b4:	e3a02001 	mov	r2, #1
   2d1b8:	e2811004 	add	r1, r1, #4
   2d1bc:	e1a00008 	mov	r0, r8
   2d1c0:	e6ef1071 	uxtb	r1, r1
   2d1c4:	ebffe153 	bl	25718 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d1c8:	e596100c 	ldr	r1, [r6, #12]
   2d1cc:	e1a00007 	mov	r0, r7
   2d1d0:	ebffe12f 	bl	25694 <CGPIOPin::AssignPin(unsigned int)>
   2d1d4:	e5961010 	ldr	r1, [r6, #16]
   2d1d8:	e3a02001 	mov	r2, #1
   2d1dc:	e2811004 	add	r1, r1, #4
   2d1e0:	e6ef1071 	uxtb	r1, r1
   2d1e4:	e1a00007 	mov	r0, r7
   2d1e8:	ebffe14a 	bl	25718 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d1ec:	e1a00007 	mov	r0, r7
   2d1f0:	e3a01002 	mov	r1, #2
   2d1f4:	ebffe35e 	bl	25f74 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2d1f8:	e3a03001 	mov	r3, #1
   2d1fc:	e5c43014 	strb	r3, [r4, #20]
   2d200:	e1a00004 	mov	r0, r4
   2d204:	e28dd00c 	add	sp, sp, #12
   2d208:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d20c:	e1a0000a 	mov	r0, sl
   2d210:	e3a01020 	mov	r1, #32
   2d214:	e58d3004 	str	r3, [sp, #4]
   2d218:	ebffe11d 	bl	25694 <CGPIOPin::AssignPin(unsigned int)>
   2d21c:	e59d3004 	ldr	r3, [sp, #4]
   2d220:	e1a01005 	mov	r1, r5
   2d224:	e1a02003 	mov	r2, r3
   2d228:	e1a0000a 	mov	r0, sl
   2d22c:	ebffe139 	bl	25718 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d230:	e1a00009 	mov	r0, r9
   2d234:	e3a01021 	mov	r1, #33	; 0x21
   2d238:	ebffe115 	bl	25694 <CGPIOPin::AssignPin(unsigned int)>
   2d23c:	e59d3004 	ldr	r3, [sp, #4]
   2d240:	e1a01005 	mov	r1, r5
   2d244:	e1a02003 	mov	r2, r3
   2d248:	e1a00009 	mov	r0, r9
   2d24c:	ebffe131 	bl	25718 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d250:	eaffffd2 	b	2d1a0 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x128>
   2d254:	e59f3020 	ldr	r3, [pc, #32]	; 2d27c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x204>
   2d258:	e3a020bd 	mov	r2, #189	; 0xbd
   2d25c:	e2831018 	add	r1, r3, #24
   2d260:	e2830034 	add	r0, r3, #52	; 0x34
   2d264:	ebffdd69 	bl	24810 <assertion_failed>
   2d268:	e59f300c 	ldr	r3, [pc, #12]	; 2d27c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x204>
   2d26c:	e3a020c1 	mov	r2, #193	; 0xc1
   2d270:	e2831018 	add	r1, r3, #24
   2d274:	e283004c 	add	r0, r3, #76	; 0x4c
   2d278:	ebffdd64 	bl	24810 <assertion_failed>
   2d27c:	00045fd8 	.word	0x00045fd8
   2d280:	000483a0 	.word	0x000483a0
   2d284:	0004e2c0 	.word	0x0004e2c0

0002d288 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>:
   2d288:	e5d03014 	ldrb	r3, [r0, #20]
   2d28c:	e59fc16c 	ldr	ip, [pc, #364]	; 2d400 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x178>
   2d290:	e3530000 	cmp	r3, #0
   2d294:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d298:	e1a04000 	mov	r4, r0
   2d29c:	e580c000 	str	ip, [r0]
   2d2a0:	0a00004a 	beq	2d3d0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x148>
   2d2a4:	e3a00001 	mov	r0, #1
   2d2a8:	e59f5154 	ldr	r5, [pc, #340]	; 2d404 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x17c>
   2d2ac:	e594100c 	ldr	r1, [r4, #12]
   2d2b0:	e595201c 	ldr	r2, [r5, #28]
   2d2b4:	e3a03000 	mov	r3, #0
   2d2b8:	e1c22110 	bic	r2, r2, r0, lsl r1
   2d2bc:	e585201c 	str	r2, [r5, #28]
   2d2c0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d2c4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d2c8:	e5942010 	ldr	r2, [r4, #16]
   2d2cc:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d2d0:	e5942010 	ldr	r2, [r4, #16]
   2d2d4:	e5823030 	str	r3, [r2, #48]	; 0x30
   2d2d8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2d2dc:	e5943004 	ldr	r3, [r4, #4]
   2d2e0:	e3530000 	cmp	r3, #0
   2d2e4:	0a000004 	beq	2d2fc <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x74>
   2d2e8:	e5953010 	ldr	r3, [r5, #16]
   2d2ec:	e2433001 	sub	r3, r3, #1
   2d2f0:	e3530000 	cmp	r3, #0
   2d2f4:	e5853010 	str	r3, [r5, #16]
   2d2f8:	0a000026 	beq	2d398 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x110>
   2d2fc:	e2846068 	add	r6, r4, #104	; 0x68
   2d300:	e1a00006 	mov	r0, r6
   2d304:	e3a02001 	mov	r2, #1
   2d308:	e3a01000 	mov	r1, #0
   2d30c:	e2847090 	add	r7, r4, #144	; 0x90
   2d310:	ebffe100 	bl	25718 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d314:	e1a00007 	mov	r0, r7
   2d318:	e3a02001 	mov	r2, #1
   2d31c:	e3a01000 	mov	r1, #0
   2d320:	ebffe0fc 	bl	25718 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d324:	e59400b8 	ldr	r0, [r4, #184]	; 0xb8
   2d328:	e3500000 	cmp	r0, #0
   2d32c:	0a000002 	beq	2d33c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xb4>
   2d330:	e5d430c8 	ldrb	r3, [r4, #200]	; 0xc8
   2d334:	e3530000 	cmp	r3, #0
   2d338:	1a00002a 	bne	2d3e8 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x160>
   2d33c:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   2d340:	e3500000 	cmp	r0, #0
   2d344:	0a000002 	beq	2d354 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xcc>
   2d348:	e5d430dc 	ldrb	r3, [r4, #220]	; 0xdc
   2d34c:	e3530000 	cmp	r3, #0
   2d350:	1a00001c 	bne	2d3c8 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x140>
   2d354:	e3a02000 	mov	r2, #0
   2d358:	e594300c 	ldr	r3, [r4, #12]
   2d35c:	e1a00007 	mov	r0, r7
   2d360:	e0855103 	add	r5, r5, r3, lsl #2
   2d364:	e5c42014 	strb	r2, [r4, #20]
   2d368:	e5852020 	str	r2, [r5, #32]
   2d36c:	ebffe0c1 	bl	25678 <CGPIOPin::~CGPIOPin()>
   2d370:	e1a00006 	mov	r0, r6
   2d374:	ebffe0bf 	bl	25678 <CGPIOPin::~CGPIOPin()>
   2d378:	e2840040 	add	r0, r4, #64	; 0x40
   2d37c:	ebffe0bd 	bl	25678 <CGPIOPin::~CGPIOPin()>
   2d380:	e2840018 	add	r0, r4, #24
   2d384:	ebffe0bb 	bl	25678 <CGPIOPin::~CGPIOPin()>
   2d388:	e1a00004 	mov	r0, r4
   2d38c:	ebffdf02 	bl	24f9c <CDevice::~CDevice()>
   2d390:	e1a00004 	mov	r0, r4
   2d394:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d398:	e5950014 	ldr	r0, [r5, #20]
   2d39c:	e3500000 	cmp	r0, #0
   2d3a0:	0a000012 	beq	2d3f0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x168>
   2d3a4:	e5d53018 	ldrb	r3, [r5, #24]
   2d3a8:	e3530000 	cmp	r3, #0
   2d3ac:	1a00000b 	bne	2d3e0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x158>
   2d3b0:	e3a01039 	mov	r1, #57	; 0x39
   2d3b4:	ebfffb99 	bl	2c220 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2d3b8:	e3a03000 	mov	r3, #0
   2d3bc:	e5853014 	str	r3, [r5, #20]
   2d3c0:	e5c53018 	strb	r3, [r5, #24]
   2d3c4:	eaffffcc 	b	2d2fc <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x74>
   2d3c8:	ebfff735 	bl	2b0a4 <operator delete[](void*)>
   2d3cc:	eaffffe0 	b	2d354 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xcc>
   2d3d0:	e2800090 	add	r0, r0, #144	; 0x90
   2d3d4:	ebffe0a7 	bl	25678 <CGPIOPin::~CGPIOPin()>
   2d3d8:	e2840068 	add	r0, r4, #104	; 0x68
   2d3dc:	eaffffe4 	b	2d374 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xec>
   2d3e0:	ebfffb1d 	bl	2c05c <CInterruptSystem::DisconnectFIQ()>
   2d3e4:	eafffff3 	b	2d3b8 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x130>
   2d3e8:	ebfff72d 	bl	2b0a4 <operator delete[](void*)>
   2d3ec:	eaffffd2 	b	2d33c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xb4>
   2d3f0:	e3a020ed 	mov	r2, #237	; 0xed
   2d3f4:	e28c1018 	add	r1, ip, #24
   2d3f8:	e28c0060 	add	r0, ip, #96	; 0x60
   2d3fc:	ebffdd03 	bl	24810 <assertion_failed>
   2d400:	00045fd8 	.word	0x00045fd8
   2d404:	0004e2c0 	.word	0x0004e2c0

0002d408 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>:
   2d408:	e92d4010 	push	{r4, lr}
   2d40c:	e1a04000 	mov	r4, r0
   2d410:	ebffff9c 	bl	2d288 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>
   2d414:	e1a00004 	mov	r0, r4
   2d418:	e59f1008 	ldr	r1, [pc, #8]	; 2d428 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x20>
   2d41c:	ebfff726 	bl	2b0bc <operator delete(void*, unsigned int)>
   2d420:	e1a00004 	mov	r0, r4
   2d424:	e8bd8010 	pop	{r4, pc}
   2d428:	00004f30 	.word	0x00004f30

0002d42c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)>:
   2d42c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d430:	e5d05014 	ldrb	r5, [r0, #20]
   2d434:	e24dd014 	sub	sp, sp, #20
   2d438:	e3550000 	cmp	r5, #0
   2d43c:	1a000002 	bne	2d44c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x20>
   2d440:	e1a00005 	mov	r0, r5
   2d444:	e28dd014 	add	sp, sp, #20
   2d448:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d44c:	e1a08003 	mov	r8, r3
   2d450:	e1a07002 	mov	r7, r2
   2d454:	e3a03001 	mov	r3, #1
   2d458:	e59f2280 	ldr	r2, [pc, #640]	; 2d6e0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b4>
   2d45c:	e1a06001 	mov	r6, r1
   2d460:	e3a01002 	mov	r1, #2
   2d464:	e1a04000 	mov	r4, r0
   2d468:	eb0000ac 	bl	2d720 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)>
   2d46c:	ebffe8d4 	bl	277c4 <CMachineInfo::Get()>
   2d470:	e3a01002 	mov	r1, #2
   2d474:	ebffe802 	bl	27484 <CMachineInfo::GetClockRate(unsigned int) const>
   2d478:	e250b000 	subs	fp, r0, #0
   2d47c:	0a00007b 	beq	2d670 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x244>
   2d480:	e59f325c 	ldr	r3, [pc, #604]	; 2d6e4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b8>
   2d484:	e2462f4b 	sub	r2, r6, #300	; 0x12c
   2d488:	e1520003 	cmp	r2, r3
   2d48c:	8a00007b 	bhi	2d680 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x254>
   2d490:	e1a09206 	lsl	r9, r6, #4
   2d494:	e1a01009 	mov	r1, r9
   2d498:	eb00422d 	bl	3dd54 <__aeabi_uidiv>
   2d49c:	e59f3244 	ldr	r3, [pc, #580]	; 2d6e8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2bc>
   2d4a0:	e2402001 	sub	r2, r0, #1
   2d4a4:	e1520003 	cmp	r2, r3
   2d4a8:	e1a0a000 	mov	sl, r0
   2d4ac:	8a000077 	bhi	2d690 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x264>
   2d4b0:	e1a01009 	mov	r1, r9
   2d4b4:	e1a0000b 	mov	r0, fp
   2d4b8:	eb004262 	bl	3de48 <__aeabi_uidivmod>
   2d4bc:	e1a00181 	lsl	r0, r1, #3
   2d4c0:	e1a01006 	mov	r1, r6
   2d4c4:	eb004222 	bl	3dd54 <__aeabi_uidiv>
   2d4c8:	e2009001 	and	r9, r0, #1
   2d4cc:	e08990a0 	add	r9, r9, r0, lsr #1
   2d4d0:	e359003f 	cmp	r9, #63	; 0x3f
   2d4d4:	8a000071 	bhi	2d6a0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x274>
   2d4d8:	e59f620c 	ldr	r6, [pc, #524]	; 2d6ec <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c0>
   2d4dc:	e28410f8 	add	r1, r4, #248	; 0xf8
   2d4e0:	e28420bc 	add	r2, r4, #188	; 0xbc
   2d4e4:	e98d0042 	stmib	sp, {r1, r6}
   2d4e8:	e1a03007 	mov	r3, r7
   2d4ec:	e58d2000 	str	r2, [sp]
   2d4f0:	e28410b8 	add	r1, r4, #184	; 0xb8
   2d4f4:	e28420c8 	add	r2, r4, #200	; 0xc8
   2d4f8:	e1a00004 	mov	r0, r4
   2d4fc:	eb000264 	bl	2de94 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>
   2d500:	e2842b0a 	add	r2, r4, #10240	; 0x2800
   2d504:	e2822008 	add	r2, r2, #8
   2d508:	e28410d0 	add	r1, r4, #208	; 0xd0
   2d50c:	e88d0006 	stm	sp, {r1, r2}
   2d510:	e58d6008 	str	r6, [sp, #8]
   2d514:	e1a00004 	mov	r0, r4
   2d518:	e1a03008 	mov	r3, r8
   2d51c:	e28420dc 	add	r2, r4, #220	; 0xdc
   2d520:	e28410cc 	add	r1, r4, #204	; 0xcc
   2d524:	eb00025a 	bl	2de94 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>
   2d528:	e5940004 	ldr	r0, [r4, #4]
   2d52c:	e59f61bc 	ldr	r6, [pc, #444]	; 2d6f0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c4>
   2d530:	e3500000 	cmp	r0, #0
   2d534:	0a000013 	beq	2d588 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x15c>
   2d538:	e5963010 	ldr	r3, [r6, #16]
   2d53c:	e3530000 	cmp	r3, #0
   2d540:	1a00003d 	bne	2d63c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x210>
   2d544:	e5d42008 	ldrb	r2, [r4, #8]
   2d548:	e5860014 	str	r0, [r6, #20]
   2d54c:	e3520000 	cmp	r2, #0
   2d550:	e5c62018 	strb	r2, [r6, #24]
   2d554:	1a000041 	bne	2d660 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x234>
   2d558:	e1a03002 	mov	r3, r2
   2d55c:	e3a01039 	mov	r1, #57	; 0x39
   2d560:	e59f218c 	ldr	r2, [pc, #396]	; 2d6f4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c8>
   2d564:	ebfffaf9 	bl	2c150 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2d568:	e5963008 	ldr	r3, [r6, #8]
   2d56c:	e2833001 	add	r3, r3, #1
   2d570:	e5863008 	str	r3, [r6, #8]
   2d574:	e5963010 	ldr	r3, [r6, #16]
   2d578:	e3530000 	cmp	r3, #0
   2d57c:	1a00004f 	bne	2d6c0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x294>
   2d580:	e3a03001 	mov	r3, #1
   2d584:	e5863010 	str	r3, [r6, #16]
   2d588:	e3a03000 	mov	r3, #0
   2d58c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d590:	e5942010 	ldr	r2, [r4, #16]
   2d594:	e59f015c 	ldr	r0, [pc, #348]	; 2d6f8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2cc>
   2d598:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d59c:	e5942010 	ldr	r2, [r4, #16]
   2d5a0:	e5941004 	ldr	r1, [r4, #4]
   2d5a4:	e5820044 	str	r0, [r2, #68]	; 0x44
   2d5a8:	e5942010 	ldr	r2, [r4, #16]
   2d5ac:	e1510003 	cmp	r1, r3
   2d5b0:	e582a024 	str	sl, [r2, #36]	; 0x24
   2d5b4:	e5942010 	ldr	r2, [r4, #16]
   2d5b8:	e5829028 	str	r9, [r2, #40]	; 0x28
   2d5bc:	0a000043 	beq	2d6d0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2a4>
   2d5c0:	e3a0e011 	mov	lr, #17
   2d5c4:	e3a0c070 	mov	ip, #112	; 0x70
   2d5c8:	e3a01e45 	mov	r1, #1104	; 0x450
   2d5cc:	e3a00001 	mov	r0, #1
   2d5d0:	e5942010 	ldr	r2, [r4, #16]
   2d5d4:	e582e034 	str	lr, [r2, #52]	; 0x34
   2d5d8:	e5942010 	ldr	r2, [r4, #16]
   2d5dc:	e582c02c 	str	ip, [r2, #44]	; 0x2c
   2d5e0:	e5942010 	ldr	r2, [r4, #16]
   2d5e4:	e5821038 	str	r1, [r2, #56]	; 0x38
   2d5e8:	e596201c 	ldr	r2, [r6, #28]
   2d5ec:	e594100c 	ldr	r1, [r4, #12]
   2d5f0:	e1822110 	orr	r2, r2, r0, lsl r1
   2d5f4:	e586201c 	str	r2, [r6, #28]
   2d5f8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d5fc:	e5942010 	ldr	r2, [r4, #16]
   2d600:	e59f10f4 	ldr	r1, [pc, #244]	; 2d6fc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d604:	e59f30f4 	ldr	r3, [pc, #244]	; 2d700 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d4>
   2d608:	e5821030 	str	r1, [r2, #48]	; 0x30
   2d60c:	e5933214 	ldr	r3, [r3, #532]	; 0x214
   2d610:	e3a07000 	mov	r7, #0
   2d614:	e586300c 	str	r3, [r6, #12]
   2d618:	ee077fba 	mcr	15, 0, r7, cr7, cr10, {5}
   2d61c:	ebffdf55 	bl	25378 <CDeviceNameService::Get()>
   2d620:	e1a03007 	mov	r3, r7
   2d624:	e1a02004 	mov	r2, r4
   2d628:	e59f10d4 	ldr	r1, [pc, #212]	; 2d704 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d8>
   2d62c:	ebffde97 	bl	25090 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   2d630:	e1a00005 	mov	r0, r5
   2d634:	e28dd014 	add	sp, sp, #20
   2d638:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d63c:	e5963014 	ldr	r3, [r6, #20]
   2d640:	e1500003 	cmp	r0, r3
   2d644:	0a000019 	beq	2d6b0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x284>
   2d648:	e3a05000 	mov	r5, #0
   2d64c:	e594300c 	ldr	r3, [r4, #12]
   2d650:	e5c45014 	strb	r5, [r4, #20]
   2d654:	e0866103 	add	r6, r6, r3, lsl #2
   2d658:	e5865020 	str	r5, [r6, #32]
   2d65c:	eaffff77 	b	2d440 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x14>
   2d660:	e59f208c 	ldr	r2, [pc, #140]	; 2d6f4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c8>
   2d664:	e3a01039 	mov	r1, #57	; 0x39
   2d668:	ebfffa47 	bl	2bf8c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   2d66c:	eaffffc0 	b	2d574 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x148>
   2d670:	e59f1090 	ldr	r1, [pc, #144]	; 2d708 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d674:	e59f2090 	ldr	r2, [pc, #144]	; 2d70c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e0>
   2d678:	e2810060 	add	r0, r1, #96	; 0x60
   2d67c:	ebffdc63 	bl	24810 <assertion_failed>
   2d680:	e59f1080 	ldr	r1, [pc, #128]	; 2d708 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d684:	e59f2084 	ldr	r2, [pc, #132]	; 2d710 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e4>
   2d688:	e2810070 	add	r0, r1, #112	; 0x70
   2d68c:	ebffdc5f 	bl	24810 <assertion_failed>
   2d690:	e59f1070 	ldr	r1, [pc, #112]	; 2d708 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d694:	e59f2078 	ldr	r2, [pc, #120]	; 2d714 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e8>
   2d698:	e281009c 	add	r0, r1, #156	; 0x9c
   2d69c:	ebffdc5b 	bl	24810 <assertion_failed>
   2d6a0:	e59f1060 	ldr	r1, [pc, #96]	; 2d708 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d6a4:	e59f206c 	ldr	r2, [pc, #108]	; 2d718 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2ec>
   2d6a8:	e28100c0 	add	r0, r1, #192	; 0xc0
   2d6ac:	ebffdc57 	bl	24810 <assertion_failed>
   2d6b0:	e5d42008 	ldrb	r2, [r4, #8]
   2d6b4:	e5d63018 	ldrb	r3, [r6, #24]
   2d6b8:	e1520003 	cmp	r2, r3
   2d6bc:	1affffe1 	bne	2d648 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x21c>
   2d6c0:	e59f1040 	ldr	r1, [pc, #64]	; 2d708 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d6c4:	e59f2050 	ldr	r2, [pc, #80]	; 2d71c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2f0>
   2d6c8:	e28100d4 	add	r0, r1, #212	; 0xd4
   2d6cc:	ebffdc4f 	bl	24810 <assertion_failed>
   2d6d0:	e3a02060 	mov	r2, #96	; 0x60
   2d6d4:	e5943010 	ldr	r3, [r4, #16]
   2d6d8:	e583202c 	str	r2, [r3, #44]	; 0x2c
   2d6dc:	eaffffc6 	b	2d5fc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x1d0>
   2d6e0:	01e84800 	.word	0x01e84800
   2d6e4:	003d07d4 	.word	0x003d07d4
   2d6e8:	0000fffe 	.word	0x0000fffe
   2d6ec:	00002710 	.word	0x00002710
   2d6f0:	0004e2c0 	.word	0x0004e2c0
   2d6f4:	0002de44 	.word	0x0002de44
   2d6f8:	000007ff 	.word	0x000007ff
   2d6fc:	00000301 	.word	0x00000301
   2d700:	2000b000 	.word	0x2000b000
   2d704:	000460ec 	.word	0x000460ec
   2d708:	00045ff0 	.word	0x00045ff0
   2d70c:	00000115 	.word	0x00000115
   2d710:	00000117 	.word	0x00000117
   2d714:	0000011a 	.word	0x0000011a
   2d718:	0000011d 	.word	0x0000011d
   2d71c:	00000149 	.word	0x00000149

0002d720 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)>:
   2d720:	e92d4070 	push	{r4, r5, r6, lr}
   2d724:	e24dd028 	sub	sp, sp, #40	; 0x28
   2d728:	e1a06001 	mov	r6, r1
   2d72c:	e28d0008 	add	r0, sp, #8
   2d730:	e3a01000 	mov	r1, #0
   2d734:	e1a05002 	mov	r5, r2
   2d738:	e1a04003 	mov	r4, r3
   2d73c:	ebffdc54 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2d740:	e3a0300c 	mov	r3, #12
   2d744:	e28d2010 	add	r2, sp, #16
   2d748:	e58d3000 	str	r3, [sp]
   2d74c:	e59f102c 	ldr	r1, [pc, #44]	; 2d780 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)+0x60>
   2d750:	e3a03018 	mov	r3, #24
   2d754:	e28d0008 	add	r0, sp, #8
   2d758:	e58d4024 	str	r4, [sp, #36]	; 0x24
   2d75c:	e58d601c 	str	r6, [sp, #28]
   2d760:	e58d5020 	str	r5, [sp, #32]
   2d764:	ebffdc56 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2d768:	e1a04000 	mov	r4, r0
   2d76c:	e28d0008 	add	r0, sp, #8
   2d770:	ebffdc4e 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   2d774:	e1a00004 	mov	r0, r4
   2d778:	e28dd028 	add	sp, sp, #40	; 0x28
   2d77c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d780:	00038002 	.word	0x00038002

0002d784 <CUartMaxiSerialDevice::Clear()>:
   2d784:	e3a03000 	mov	r3, #0
   2d788:	e58030bc 	str	r3, [r0, #188]	; 0xbc
   2d78c:	e58030f4 	str	r3, [r0, #244]	; 0xf4
   2d790:	e58030c0 	str	r3, [r0, #192]	; 0xc0
   2d794:	e58030e4 	str	r3, [r0, #228]	; 0xe4
   2d798:	e58030e8 	str	r3, [r0, #232]	; 0xe8
   2d79c:	e58030ec 	str	r3, [r0, #236]	; 0xec
   2d7a0:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   2d7a4:	e58030e0 	str	r3, [r0, #224]	; 0xe0
   2d7a8:	e12fff1e 	bx	lr

0002d7ac <CUartMaxiSerialDevice::AvailableForWrite()>:
   2d7ac:	e59030d4 	ldr	r3, [r0, #212]	; 0xd4
   2d7b0:	e59010d0 	ldr	r1, [r0, #208]	; 0xd0
   2d7b4:	e59020d8 	ldr	r2, [r0, #216]	; 0xd8
   2d7b8:	e59000d0 	ldr	r0, [r0, #208]	; 0xd0
   2d7bc:	e1530001 	cmp	r3, r1
   2d7c0:	80800002 	addhi	r0, r0, r2
   2d7c4:	e0400003 	sub	r0, r0, r3
   2d7c8:	e0420000 	sub	r0, r2, r0
   2d7cc:	e12fff1e 	bx	lr

0002d7d0 <CUartMaxiSerialDevice::WriteBase(unsigned int)>:
   2d7d0:	e1a03000 	mov	r3, r0
   2d7d4:	e59000cc 	ldr	r0, [r0, #204]	; 0xcc
   2d7d8:	e3500000 	cmp	r0, #0
   2d7dc:	012fff1e 	bxeq	lr
   2d7e0:	e59320d8 	ldr	r2, [r3, #216]	; 0xd8
   2d7e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2d7e8:	e3520000 	cmp	r2, #0
   2d7ec:	0a00001d 	beq	2d868 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x98>
   2d7f0:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d7f4:	e593c0d4 	ldr	ip, [r3, #212]	; 0xd4
   2d7f8:	e15e000c 	cmp	lr, ip
   2d7fc:	0a000008 	beq	2d824 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x54>
   2d800:	e593c0d4 	ldr	ip, [r3, #212]	; 0xd4
   2d804:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d808:	e15c000e 	cmp	ip, lr
   2d80c:	2a000011 	bcs	2d858 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x88>
   2d810:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d814:	e2422001 	sub	r2, r2, #1
   2d818:	e35c0000 	cmp	ip, #0
   2d81c:	0152000e 	cmpeq	r2, lr
   2d820:	0a000010 	beq	2d868 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x98>
   2d824:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d828:	e7c01002 	strb	r1, [r0, r2]
   2d82c:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d830:	e59310d8 	ldr	r1, [r3, #216]	; 0xd8
   2d834:	e2822001 	add	r2, r2, #1
   2d838:	e58320d0 	str	r2, [r3, #208]	; 0xd0
   2d83c:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d840:	e1520001 	cmp	r2, r1
   2d844:	23a02000 	movcs	r2, #0
   2d848:	23a00001 	movcs	r0, #1
   2d84c:	258320d0 	strcs	r2, [r3, #208]	; 0xd0
   2d850:	33a00001 	movcc	r0, #1
   2d854:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2d858:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d85c:	e04cc002 	sub	ip, ip, r2
   2d860:	e35c0001 	cmp	ip, #1
   2d864:	8affffee 	bhi	2d824 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x54>
   2d868:	e59320f4 	ldr	r2, [r3, #244]	; 0xf4
   2d86c:	e3a00000 	mov	r0, #0
   2d870:	e2822001 	add	r2, r2, #1
   2d874:	e58320f4 	str	r2, [r3, #244]	; 0xf4
   2d878:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002d87c <CUartMaxiSerialDevice::Write(unsigned int)>:
   2d87c:	e92d4070 	push	{r4, r5, r6, lr}
   2d880:	e1a05000 	mov	r5, r0
   2d884:	ebffffd1 	bl	2d7d0 <CUartMaxiSerialDevice::WriteBase(unsigned int)>
   2d888:	e1a04000 	mov	r4, r0
   2d88c:	e1a00005 	mov	r0, r5
   2d890:	eb00001e 	bl	2d910 <CUartMaxiSerialDevice::TxPumpPrime()>
   2d894:	e1a00004 	mov	r0, r4
   2d898:	e8bd8070 	pop	{r4, r5, r6, pc}

0002d89c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>:
   2d89c:	e3520000 	cmp	r2, #0
   2d8a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d8a4:	e1a07000 	mov	r7, r0
   2d8a8:	0a00000c 	beq	2d8e0 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x44>
   2d8ac:	e1a04001 	mov	r4, r1
   2d8b0:	e3a05000 	mov	r5, #0
   2d8b4:	e0816002 	add	r6, r1, r2
   2d8b8:	e4d41001 	ldrb	r1, [r4], #1
   2d8bc:	e1a00007 	mov	r0, r7
   2d8c0:	ebffffc2 	bl	2d7d0 <CUartMaxiSerialDevice::WriteBase(unsigned int)>
   2d8c4:	e1540006 	cmp	r4, r6
   2d8c8:	e0855000 	add	r5, r5, r0
   2d8cc:	1afffff9 	bne	2d8b8 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x1c>
   2d8d0:	e1a00007 	mov	r0, r7
   2d8d4:	eb00000d 	bl	2d910 <CUartMaxiSerialDevice::TxPumpPrime()>
   2d8d8:	e1a00005 	mov	r0, r5
   2d8dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d8e0:	e1a05002 	mov	r5, r2
   2d8e4:	eafffff9 	b	2d8d0 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x34>

0002d8e8 <CUartMaxiSerialDevice::WriteStr(char const*)>:
   2d8e8:	e92d4070 	push	{r4, r5, r6, lr}
   2d8ec:	e1a05000 	mov	r5, r0
   2d8f0:	e1a00001 	mov	r0, r1
   2d8f4:	e1a04001 	mov	r4, r1
   2d8f8:	ebfff1e3 	bl	2a08c <strlen>
   2d8fc:	e1a01004 	mov	r1, r4
   2d900:	e1a02000 	mov	r2, r0
   2d904:	e1a00005 	mov	r0, r5
   2d908:	e8bd4070 	pop	{r4, r5, r6, lr}
   2d90c:	eaffffe2 	b	2d89c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>

0002d910 <CUartMaxiSerialDevice::TxPumpPrime()>:
   2d910:	e92d4010 	push	{r4, lr}
   2d914:	e1a04000 	mov	r4, r0
   2d918:	e3a00001 	mov	r0, #1
   2d91c:	ebfff90a 	bl	2bd4c <EnterCritical>
   2d920:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
   2d924:	e59420d4 	ldr	r2, [r4, #212]	; 0xd4
   2d928:	e1520003 	cmp	r2, r3
   2d92c:	0a000020 	beq	2d9b4 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2d930:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   2d934:	e3530000 	cmp	r3, #0
   2d938:	0a00001d 	beq	2d9b4 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2d93c:	e3a03000 	mov	r3, #0
   2d940:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d944:	e59f1088 	ldr	r1, [pc, #136]	; 2d9d4 <CUartMaxiSerialDevice::TxPumpPrime()+0xc4>
   2d948:	e5912018 	ldr	r2, [r1, #24]
   2d94c:	e2122020 	ands	r2, r2, #32
   2d950:	0a000007 	beq	2d974 <CUartMaxiSerialDevice::TxPumpPrime()+0x64>
   2d954:	ea000018 	b	2d9bc <CUartMaxiSerialDevice::TxPumpPrime()+0xac>
   2d958:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   2d95c:	e3530000 	cmp	r3, #0
   2d960:	0a000013 	beq	2d9b4 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2d964:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2d968:	e5913018 	ldr	r3, [r1, #24]
   2d96c:	e3130020 	tst	r3, #32
   2d970:	1a000011 	bne	2d9bc <CUartMaxiSerialDevice::TxPumpPrime()+0xac>
   2d974:	e59400d4 	ldr	r0, [r4, #212]	; 0xd4
   2d978:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   2d97c:	e594c0cc 	ldr	ip, [r4, #204]	; 0xcc
   2d980:	e2833001 	add	r3, r3, #1
   2d984:	e7dc0000 	ldrb	r0, [ip, r0]
   2d988:	e58430d4 	str	r3, [r4, #212]	; 0xd4
   2d98c:	e594c0d4 	ldr	ip, [r4, #212]	; 0xd4
   2d990:	e59430d8 	ldr	r3, [r4, #216]	; 0xd8
   2d994:	e15c0003 	cmp	ip, r3
   2d998:	258420d4 	strcs	r2, [r4, #212]	; 0xd4
   2d99c:	e5810000 	str	r0, [r1]
   2d9a0:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   2d9a4:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   2d9a8:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   2d9ac:	e1500003 	cmp	r0, r3
   2d9b0:	1affffe8 	bne	2d958 <CUartMaxiSerialDevice::TxPumpPrime()+0x48>
   2d9b4:	e8bd4010 	pop	{r4, lr}
   2d9b8:	eafff90e 	b	2bdf8 <LeaveCritical>
   2d9bc:	e59f2010 	ldr	r2, [pc, #16]	; 2d9d4 <CUartMaxiSerialDevice::TxPumpPrime()+0xc4>
   2d9c0:	e8bd4010 	pop	{r4, lr}
   2d9c4:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   2d9c8:	e3833020 	orr	r3, r3, #32
   2d9cc:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d9d0:	eafff908 	b	2bdf8 <LeaveCritical>
   2d9d4:	20201000 	.word	0x20201000

0002d9d8 <CUartMaxiSerialDevice::Read()>:
   2d9d8:	e59010b8 	ldr	r1, [r0, #184]	; 0xb8
   2d9dc:	e1a03000 	mov	r3, r0
   2d9e0:	e3510000 	cmp	r1, #0
   2d9e4:	0a000010 	beq	2da2c <CUartMaxiSerialDevice::Read()+0x54>
   2d9e8:	e59000bc 	ldr	r0, [r0, #188]	; 0xbc
   2d9ec:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
   2d9f0:	e1500002 	cmp	r0, r2
   2d9f4:	0a00000c 	beq	2da2c <CUartMaxiSerialDevice::Read()+0x54>
   2d9f8:	e59300c0 	ldr	r0, [r3, #192]	; 0xc0
   2d9fc:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
   2da00:	e7d10000 	ldrb	r0, [r1, r0]
   2da04:	e2822001 	add	r2, r2, #1
   2da08:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   2da0c:	e59310c0 	ldr	r1, [r3, #192]	; 0xc0
   2da10:	e59320c4 	ldr	r2, [r3, #196]	; 0xc4
   2da14:	e1510002 	cmp	r1, r2
   2da18:	3a000002 	bcc	2da28 <CUartMaxiSerialDevice::Read()+0x50>
   2da1c:	e3a02000 	mov	r2, #0
   2da20:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   2da24:	e12fff1e 	bx	lr
   2da28:	e12fff1e 	bx	lr
   2da2c:	e3e00000 	mvn	r0, #0
   2da30:	e12fff1e 	bx	lr

0002da34 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)>:
   2da34:	e1a03000 	mov	r3, r0
   2da38:	e59f0090 	ldr	r0, [pc, #144]	; 2dad0 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x9c>
   2da3c:	e92d4010 	push	{r4, lr}
   2da40:	e593e0b8 	ldr	lr, [r3, #184]	; 0xb8
   2da44:	e590c040 	ldr	ip, [r0, #64]	; 0x40
   2da48:	e59f0084 	ldr	r0, [pc, #132]	; 2dad4 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0xa0>
   2da4c:	e35e0000 	cmp	lr, #0
   2da50:	e580c004 	str	ip, [r0, #4]
   2da54:	0a00001b 	beq	2dac8 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x94>
   2da58:	e59300bc 	ldr	r0, [r3, #188]	; 0xbc
   2da5c:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2da60:	e3520000 	cmp	r2, #0
   2da64:	1150000c 	cmpne	r0, ip
   2da68:	13a00001 	movne	r0, #1
   2da6c:	03a00000 	moveq	r0, #0
   2da70:	08bd8010 	popeq	{r4, pc}
   2da74:	e3a00000 	mov	r0, #0
   2da78:	e1a04000 	mov	r4, r0
   2da7c:	e2411001 	sub	r1, r1, #1
   2da80:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2da84:	e2800001 	add	r0, r0, #1
   2da88:	e7dec00c 	ldrb	ip, [lr, ip]
   2da8c:	e5e1c001 	strb	ip, [r1, #1]!
   2da90:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2da94:	e593e0c4 	ldr	lr, [r3, #196]	; 0xc4
   2da98:	e28cc001 	add	ip, ip, #1
   2da9c:	e583c0c0 	str	ip, [r3, #192]	; 0xc0
   2daa0:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2daa4:	e15c000e 	cmp	ip, lr
   2daa8:	258340c0 	strcs	r4, [r3, #192]	; 0xc0
   2daac:	e593e0bc 	ldr	lr, [r3, #188]	; 0xbc
   2dab0:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2dab4:	e15e000c 	cmp	lr, ip
   2dab8:	11520000 	cmpne	r2, r0
   2dabc:	98bd8010 	popls	{r4, pc}
   2dac0:	e593e0b8 	ldr	lr, [r3, #184]	; 0xb8
   2dac4:	eaffffed 	b	2da80 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x4c>
   2dac8:	e1a0000e 	mov	r0, lr
   2dacc:	e8bd8010 	pop	{r4, pc}
   2dad0:	20201000 	.word	0x20201000
   2dad4:	0004e2c0 	.word	0x0004e2c0

0002dad8 <CUartMaxiSerialDevice::CanGet()>:
   2dad8:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2dadc:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
   2dae0:	e0520000 	subs	r0, r2, r0
   2dae4:	13a00001 	movne	r0, #1
   2dae8:	e12fff1e 	bx	lr

0002daec <CUartMaxiSerialDevice::Peek()>:
   2daec:	e59030b8 	ldr	r3, [r0, #184]	; 0xb8
   2daf0:	e3530000 	cmp	r3, #0
   2daf4:	0a000006 	beq	2db14 <CUartMaxiSerialDevice::Peek()+0x28>
   2daf8:	e59010bc 	ldr	r1, [r0, #188]	; 0xbc
   2dafc:	e59020c0 	ldr	r2, [r0, #192]	; 0xc0
   2db00:	e1510002 	cmp	r1, r2
   2db04:	0a000002 	beq	2db14 <CUartMaxiSerialDevice::Peek()+0x28>
   2db08:	e59020c0 	ldr	r2, [r0, #192]	; 0xc0
   2db0c:	e7d30002 	ldrb	r0, [r3, r2]
   2db10:	e12fff1e 	bx	lr
   2db14:	e3e00000 	mvn	r0, #0
   2db18:	e12fff1e 	bx	lr

0002db1c <CUartMaxiSerialDevice::AvailableForRead()>:
   2db1c:	e59030c0 	ldr	r3, [r0, #192]	; 0xc0
   2db20:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2db24:	e1530002 	cmp	r3, r2
   2db28:	859020bc 	ldrhi	r2, [r0, #188]	; 0xbc
   2db2c:	859000c4 	ldrhi	r0, [r0, #196]	; 0xc4
   2db30:	959000bc 	ldrls	r0, [r0, #188]	; 0xbc
   2db34:	80820000 	addhi	r0, r2, r0
   2db38:	e0400003 	sub	r0, r0, r3
   2db3c:	e12fff1e 	bx	lr

0002db40 <CUartMaxiSerialDevice::GetOptions() const>:
   2db40:	e2800901 	add	r0, r0, #16384	; 0x4000
   2db44:	e5900f18 	ldr	r0, [r0, #3864]	; 0xf18
   2db48:	e12fff1e 	bx	lr

0002db4c <CUartMaxiSerialDevice::SetOptions(unsigned int)>:
   2db4c:	e2800901 	add	r0, r0, #16384	; 0x4000
   2db50:	e5801f18 	str	r1, [r0, #3864]	; 0xf18
   2db54:	e12fff1e 	bx	lr

0002db58 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   2db58:	e5903004 	ldr	r3, [r0, #4]
   2db5c:	e92d4010 	push	{r4, lr}
   2db60:	e3530000 	cmp	r3, #0
   2db64:	0a00000e 	beq	2dba4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
   2db68:	e2800901 	add	r0, r0, #16384	; 0x4000
   2db6c:	e5903f1c 	ldr	r3, [r0, #3868]	; 0xf1c
   2db70:	e3530000 	cmp	r3, #0
   2db74:	1a00000e 	bne	2dbb4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x5c>
   2db78:	e3510000 	cmp	r1, #0
   2db7c:	0a000010 	beq	2dbc4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x6c>
   2db80:	e1d130d0 	ldrsb	r3, [r1]
   2db84:	e3530000 	cmp	r3, #0
   2db88:	0a000011 	beq	2dbd4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x7c>
   2db8c:	e3520000 	cmp	r2, #0
   2db90:	0a000013 	beq	2dbe4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
   2db94:	e5802f24 	str	r2, [r0, #3876]	; 0xf24
   2db98:	e5801f20 	str	r1, [r0, #3872]	; 0xf20
   2db9c:	e5801f1c 	str	r1, [r0, #3868]	; 0xf1c
   2dba0:	e8bd8010 	pop	{r4, pc}
   2dba4:	e59f1048 	ldr	r1, [pc, #72]	; 2dbf4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2dba8:	e59f2048 	ldr	r2, [pc, #72]	; 2dbf8 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa0>
   2dbac:	e2810f41 	add	r0, r1, #260	; 0x104
   2dbb0:	ebffdb16 	bl	24810 <assertion_failed>
   2dbb4:	e59f1038 	ldr	r1, [pc, #56]	; 2dbf4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2dbb8:	e59f203c 	ldr	r2, [pc, #60]	; 2dbfc <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa4>
   2dbbc:	e2810f47 	add	r0, r1, #284	; 0x11c
   2dbc0:	ebffdb12 	bl	24810 <assertion_failed>
   2dbc4:	e59f1028 	ldr	r1, [pc, #40]	; 2dbf4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2dbc8:	e3a02f87 	mov	r2, #540	; 0x21c
   2dbcc:	e2810f4b 	add	r0, r1, #300	; 0x12c
   2dbd0:	ebffdb0e 	bl	24810 <assertion_failed>
   2dbd4:	e59f1018 	ldr	r1, [pc, #24]	; 2dbf4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2dbd8:	e59f2020 	ldr	r2, [pc, #32]	; 2dc00 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
   2dbdc:	e2810f4e 	add	r0, r1, #312	; 0x138
   2dbe0:	ebffdb0a 	bl	24810 <assertion_failed>
   2dbe4:	e59f1008 	ldr	r1, [pc, #8]	; 2dbf4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2dbe8:	e59f2014 	ldr	r2, [pc, #20]	; 2dc04 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xac>
   2dbec:	e2810f52 	add	r0, r1, #328	; 0x148
   2dbf0:	ebffdb06 	bl	24810 <assertion_failed>
   2dbf4:	00045ff0 	.word	0x00045ff0
   2dbf8:	00000219 	.word	0x00000219
   2dbfc:	0000021a 	.word	0x0000021a
   2dc00:	0000021d 	.word	0x0000021d
   2dc04:	0000021e 	.word	0x0000021e

0002dc08 <CUartMaxiSerialDevice::InterruptHandler()>:
   2dc08:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2dc0c:	e3a0e000 	mov	lr, #0
   2dc10:	ee07ef9a 	mcr	15, 0, lr, cr7, cr10, {4}
   2dc14:	e59f3224 	ldr	r3, [pc, #548]	; 2de40 <CUartMaxiSerialDevice::InterruptHandler()+0x238>
   2dc18:	e1a0700e 	mov	r7, lr
   2dc1c:	e1a01003 	mov	r1, r3
   2dc20:	e3a04003 	mov	r4, #3
   2dc24:	e3a08002 	mov	r8, #2
   2dc28:	e3a06001 	mov	r6, #1
   2dc2c:	e3a05004 	mov	r5, #4
   2dc30:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   2dc34:	e280c901 	add	ip, r0, #16384	; 0x4000
   2dc38:	e5832044 	str	r2, [r3, #68]	; 0x44
   2dc3c:	e5913018 	ldr	r3, [r1, #24]
   2dc40:	e3130010 	tst	r3, #16
   2dc44:	1a000036 	bne	2dd24 <CUartMaxiSerialDevice::InterruptHandler()+0x11c>
   2dc48:	e5913000 	ldr	r3, [r1]
   2dc4c:	e3130b01 	tst	r3, #1024	; 0x400
   2dc50:	0a000060 	beq	2ddd8 <CUartMaxiSerialDevice::InterruptHandler()+0x1d0>
   2dc54:	e59020ec 	ldr	r2, [r0, #236]	; 0xec
   2dc58:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2dc5c:	e2822001 	add	r2, r2, #1
   2dc60:	e3590000 	cmp	r9, #0
   2dc64:	e58020ec 	str	r2, [r0, #236]	; 0xec
   2dc68:	05c060c9 	strbeq	r6, [r0, #201]	; 0xc9
   2dc6c:	e59020c4 	ldr	r2, [r0, #196]	; 0xc4
   2dc70:	e3520000 	cmp	r2, #0
   2dc74:	0a000050 	beq	2ddbc <CUartMaxiSerialDevice::InterruptHandler()+0x1b4>
   2dc78:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2dc7c:	e59090c0 	ldr	r9, [r0, #192]	; 0xc0
   2dc80:	e15a0009 	cmp	sl, r9
   2dc84:	0a000008 	beq	2dcac <CUartMaxiSerialDevice::InterruptHandler()+0xa4>
   2dc88:	e59090c0 	ldr	r9, [r0, #192]	; 0xc0
   2dc8c:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2dc90:	e159000a 	cmp	r9, sl
   2dc94:	2a000044 	bcs	2ddac <CUartMaxiSerialDevice::InterruptHandler()+0x1a4>
   2dc98:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2dc9c:	e2422001 	sub	r2, r2, #1
   2dca0:	e3590000 	cmp	r9, #0
   2dca4:	0152000a 	cmpeq	r2, sl
   2dca8:	0a000043 	beq	2ddbc <CUartMaxiSerialDevice::InterruptHandler()+0x1b4>
   2dcac:	e59020b8 	ldr	r2, [r0, #184]	; 0xb8
   2dcb0:	e3520000 	cmp	r2, #0
   2dcb4:	0a000040 	beq	2ddbc <CUartMaxiSerialDevice::InterruptHandler()+0x1b4>
   2dcb8:	e59090bc 	ldr	r9, [r0, #188]	; 0xbc
   2dcbc:	e7c23009 	strb	r3, [r2, r9]
   2dcc0:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2dcc4:	e59090c4 	ldr	r9, [r0, #196]	; 0xc4
   2dcc8:	e2822001 	add	r2, r2, #1
   2dccc:	e58020bc 	str	r2, [r0, #188]	; 0xbc
   2dcd0:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2dcd4:	e1520009 	cmp	r2, r9
   2dcd8:	e59c2f1c 	ldr	r2, [ip, #3868]	; 0xf1c
   2dcdc:	258070bc 	strcs	r7, [r0, #188]	; 0xbc
   2dce0:	e3520000 	cmp	r2, #0
   2dce4:	0affffd4 	beq	2dc3c <CUartMaxiSerialDevice::InterruptHandler()+0x34>
   2dce8:	e59c9f20 	ldr	r9, [ip, #3872]	; 0xf20
   2dcec:	e6af3073 	sxtb	r3, r3
   2dcf0:	e1d9a0d0 	ldrsb	sl, [r9]
   2dcf4:	e15a0003 	cmp	sl, r3
   2dcf8:	158c2f20 	strne	r2, [ip, #3872]	; 0xf20
   2dcfc:	0a000047 	beq	2de20 <CUartMaxiSerialDevice::InterruptHandler()+0x218>
   2dd00:	e59030e4 	ldr	r3, [r0, #228]	; 0xe4
   2dd04:	e5d020c9 	ldrb	r2, [r0, #201]	; 0xc9
   2dd08:	e2833001 	add	r3, r3, #1
   2dd0c:	e58030e4 	str	r3, [r0, #228]	; 0xe4
   2dd10:	e5913018 	ldr	r3, [r1, #24]
   2dd14:	e3520000 	cmp	r2, #0
   2dd18:	05c040c9 	strbeq	r4, [r0, #201]	; 0xc9
   2dd1c:	e3130010 	tst	r3, #16
   2dd20:	0affffc8 	beq	2dc48 <CUartMaxiSerialDevice::InterruptHandler()+0x40>
   2dd24:	e59f1114 	ldr	r1, [pc, #276]	; 2de40 <CUartMaxiSerialDevice::InterruptHandler()+0x238>
   2dd28:	ea00000c 	b	2dd60 <CUartMaxiSerialDevice::InterruptHandler()+0x158>
   2dd2c:	e59020cc 	ldr	r2, [r0, #204]	; 0xcc
   2dd30:	e3520000 	cmp	r2, #0
   2dd34:	0a000010 	beq	2dd7c <CUartMaxiSerialDevice::InterruptHandler()+0x174>
   2dd38:	e590c0d4 	ldr	ip, [r0, #212]	; 0xd4
   2dd3c:	e7d2200c 	ldrb	r2, [r2, ip]
   2dd40:	e5812000 	str	r2, [r1]
   2dd44:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2dd48:	e590c0d8 	ldr	ip, [r0, #216]	; 0xd8
   2dd4c:	e2822001 	add	r2, r2, #1
   2dd50:	e58020d4 	str	r2, [r0, #212]	; 0xd4
   2dd54:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2dd58:	e152000c 	cmp	r2, ip
   2dd5c:	2a000035 	bcs	2de38 <CUartMaxiSerialDevice::InterruptHandler()+0x230>
   2dd60:	e5913018 	ldr	r3, [r1, #24]
   2dd64:	e2133020 	ands	r3, r3, #32
   2dd68:	1a000007 	bne	2dd8c <CUartMaxiSerialDevice::InterruptHandler()+0x184>
   2dd6c:	e590c0d0 	ldr	ip, [r0, #208]	; 0xd0
   2dd70:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2dd74:	e15c0002 	cmp	ip, r2
   2dd78:	1affffeb 	bne	2dd2c <CUartMaxiSerialDevice::InterruptHandler()+0x124>
   2dd7c:	e59f20bc 	ldr	r2, [pc, #188]	; 2de40 <CUartMaxiSerialDevice::InterruptHandler()+0x238>
   2dd80:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   2dd84:	e3c33020 	bic	r3, r3, #32
   2dd88:	e5823038 	str	r3, [r2, #56]	; 0x38
   2dd8c:	e35e0000 	cmp	lr, #0
   2dd90:	0a000002 	beq	2dda0 <CUartMaxiSerialDevice::InterruptHandler()+0x198>
   2dd94:	e2800901 	add	r0, r0, #16384	; 0x4000
   2dd98:	e5903f24 	ldr	r3, [r0, #3876]	; 0xf24
   2dd9c:	e12fff33 	blx	r3
   2dda0:	e3a03000 	mov	r3, #0
   2dda4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2dda8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ddac:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2ddb0:	e0499002 	sub	r9, r9, r2
   2ddb4:	e3590001 	cmp	r9, #1
   2ddb8:	8affffbb 	bhi	2dcac <CUartMaxiSerialDevice::InterruptHandler()+0xa4>
   2ddbc:	e59030f0 	ldr	r3, [r0, #240]	; 0xf0
   2ddc0:	e5d020c9 	ldrb	r2, [r0, #201]	; 0xc9
   2ddc4:	e2833001 	add	r3, r3, #1
   2ddc8:	e3520000 	cmp	r2, #0
   2ddcc:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   2ddd0:	05c050c9 	strbeq	r5, [r0, #201]	; 0xc9
   2ddd4:	eaffff98 	b	2dc3c <CUartMaxiSerialDevice::InterruptHandler()+0x34>
   2ddd8:	e3130b02 	tst	r3, #2048	; 0x800
   2dddc:	0a000006 	beq	2ddfc <CUartMaxiSerialDevice::InterruptHandler()+0x1f4>
   2dde0:	e59020e8 	ldr	r2, [r0, #232]	; 0xe8
   2dde4:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2dde8:	e2822001 	add	r2, r2, #1
   2ddec:	e3590000 	cmp	r9, #0
   2ddf0:	e58020e8 	str	r2, [r0, #232]	; 0xe8
   2ddf4:	05c080c9 	strbeq	r8, [r0, #201]	; 0xc9
   2ddf8:	eaffff9b 	b	2dc6c <CUartMaxiSerialDevice::InterruptHandler()+0x64>
   2ddfc:	e3130c01 	tst	r3, #256	; 0x100
   2de00:	0affff99 	beq	2dc6c <CUartMaxiSerialDevice::InterruptHandler()+0x64>
   2de04:	e59020e4 	ldr	r2, [r0, #228]	; 0xe4
   2de08:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2de0c:	e2822001 	add	r2, r2, #1
   2de10:	e3590000 	cmp	r9, #0
   2de14:	e58020e4 	str	r2, [r0, #228]	; 0xe4
   2de18:	05c040c9 	strbeq	r4, [r0, #201]	; 0xc9
   2de1c:	eaffff92 	b	2dc6c <CUartMaxiSerialDevice::InterruptHandler()+0x64>
   2de20:	e2893001 	add	r3, r9, #1
   2de24:	e58c3f20 	str	r3, [ip, #3872]	; 0xf20
   2de28:	e1d930d1 	ldrsb	r3, [r9, #1]
   2de2c:	e3530000 	cmp	r3, #0
   2de30:	03a0e001 	moveq	lr, #1
   2de34:	eaffffb1 	b	2dd00 <CUartMaxiSerialDevice::InterruptHandler()+0xf8>
   2de38:	e58030d4 	str	r3, [r0, #212]	; 0xd4
   2de3c:	eaffffc7 	b	2dd60 <CUartMaxiSerialDevice::InterruptHandler()+0x158>
   2de40:	20201000 	.word	0x20201000

0002de44 <CUartMaxiSerialDevice::InterruptStub(void*)>:
   2de44:	e59f3040 	ldr	r3, [pc, #64]	; 2de8c <CUartMaxiSerialDevice::InterruptStub(void*)+0x48>
   2de48:	e3a01000 	mov	r1, #0
   2de4c:	e5932000 	ldr	r2, [r3]
   2de50:	e2822001 	add	r2, r2, #1
   2de54:	e5832000 	str	r2, [r3]
   2de58:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
   2de5c:	e593201c 	ldr	r2, [r3, #28]
   2de60:	e3120001 	tst	r2, #1
   2de64:	012fff1e 	bxeq	lr
   2de68:	e5930020 	ldr	r0, [r3, #32]
   2de6c:	e1500001 	cmp	r0, r1
   2de70:	0a000000 	beq	2de78 <CUartMaxiSerialDevice::InterruptStub(void*)+0x34>
   2de74:	eaffff63 	b	2dc08 <CUartMaxiSerialDevice::InterruptHandler()>
   2de78:	e59f1010 	ldr	r1, [pc, #16]	; 2de90 <CUartMaxiSerialDevice::InterruptStub(void*)+0x4c>
   2de7c:	e92d4010 	push	{r4, lr}
   2de80:	e3a02fa9 	mov	r2, #676	; 0x2a4
   2de84:	e2810f56 	add	r0, r1, #344	; 0x158
   2de88:	ebffda60 	bl	24810 <assertion_failed>
   2de8c:	0004e2c0 	.word	0x0004e2c0
   2de90:	00045ff0 	.word	0x00045ff0

0002de94 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>:
   2de94:	e5910000 	ldr	r0, [r1]
   2de98:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2de9c:	e3500000 	cmp	r0, #0
   2dea0:	e1a06001 	mov	r6, r1
   2dea4:	e1a07002 	mov	r7, r2
   2dea8:	e1a05003 	mov	r5, r3
   2deac:	e59d4018 	ldr	r4, [sp, #24]
   2deb0:	0a00000c 	beq	2dee8 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x54>
   2deb4:	e5943008 	ldr	r3, [r4, #8]
   2deb8:	e1530005 	cmp	r3, r5
   2debc:	0a00001d 	beq	2df38 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0xa4>
   2dec0:	e5d23000 	ldrb	r3, [r2]
   2dec4:	e3530000 	cmp	r3, #0
   2dec8:	0a000006 	beq	2dee8 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x54>
   2decc:	ebfff474 	bl	2b0a4 <operator delete[](void*)>
   2ded0:	e3a03000 	mov	r3, #0
   2ded4:	e5863000 	str	r3, [r6]
   2ded8:	e5c73000 	strb	r3, [r7]
   2dedc:	e5843000 	str	r3, [r4]
   2dee0:	e5843008 	str	r3, [r4, #8]
   2dee4:	e5843004 	str	r3, [r4, #4]
   2dee8:	e3550000 	cmp	r5, #0
   2deec:	1a000007 	bne	2df10 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x7c>
   2def0:	e59d301c 	ldr	r3, [sp, #28]
   2def4:	e5863000 	str	r3, [r6]
   2def8:	e59d3020 	ldr	r3, [sp, #32]
   2defc:	e5c75000 	strb	r5, [r7]
   2df00:	e5845000 	str	r5, [r4]
   2df04:	e5843008 	str	r3, [r4, #8]
   2df08:	e5845004 	str	r5, [r4, #4]
   2df0c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2df10:	e1a00005 	mov	r0, r5
   2df14:	ebfff45b 	bl	2b088 <operator new[](unsigned int)>
   2df18:	e3a03000 	mov	r3, #0
   2df1c:	e3a02001 	mov	r2, #1
   2df20:	e5860000 	str	r0, [r6]
   2df24:	e5c72000 	strb	r2, [r7]
   2df28:	e5843000 	str	r3, [r4]
   2df2c:	e5845008 	str	r5, [r4, #8]
   2df30:	e5843004 	str	r3, [r4, #4]
   2df34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2df38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002df3c <micros>:
   2df3c:	eaffed36 	b	2941c <CTimer::GetClockTicks()>

0002df40 <millis>:
   2df40:	e92d4010 	push	{r4, lr}
   2df44:	ebffed34 	bl	2941c <CTimer::GetClockTicks()>
   2df48:	e59f3008 	ldr	r3, [pc, #8]	; 2df58 <millis+0x18>
   2df4c:	e0803093 	umull	r3, r0, r3, r0
   2df50:	e1a00320 	lsr	r0, r0, #6
   2df54:	e8bd8010 	pop	{r4, pc}
   2df58:	10624dd3 	.word	0x10624dd3

0002df5c <microsDelay>:
   2df5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2df60:	e1a06000 	mov	r6, r0
   2df64:	ebffed2c 	bl	2941c <CTimer::GetClockTicks()>
   2df68:	e1a04000 	mov	r4, r0
   2df6c:	e1e05000 	mvn	r5, r0
   2df70:	e0867000 	add	r7, r6, r0
   2df74:	ea000004 	b	2df8c <microsDelay+0x30>
   2df78:	e1570000 	cmp	r7, r0
   2df7c:	23a00000 	movcs	r0, #0
   2df80:	33a00001 	movcc	r0, #1
   2df84:	e3500000 	cmp	r0, #0
   2df88:	1a000008 	bne	2dfb0 <microsDelay+0x54>
   2df8c:	ebffed22 	bl	2941c <CTimer::GetClockTicks()>
   2df90:	e1540000 	cmp	r4, r0
   2df94:	e0853000 	add	r3, r5, r0
   2df98:	9afffff6 	bls	2df78 <microsDelay+0x1c>
   2df9c:	e1560003 	cmp	r6, r3
   2dfa0:	23a00000 	movcs	r0, #0
   2dfa4:	33a00001 	movcc	r0, #1
   2dfa8:	e3500000 	cmp	r0, #0
   2dfac:	0afffff6 	beq	2df8c <microsDelay+0x30>
   2dfb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002dfb4 <isTimeout>:
   2dfb4:	e1500001 	cmp	r0, r1
   2dfb8:	2a000005 	bcs	2dfd4 <isTimeout+0x20>
   2dfbc:	e0400001 	sub	r0, r0, r1
   2dfc0:	e2400001 	sub	r0, r0, #1
   2dfc4:	e1520000 	cmp	r2, r0
   2dfc8:	23a00000 	movcs	r0, #0
   2dfcc:	33a00001 	movcc	r0, #1
   2dfd0:	e12fff1e 	bx	lr
   2dfd4:	e0812002 	add	r2, r1, r2
   2dfd8:	e1500002 	cmp	r0, r2
   2dfdc:	93a00000 	movls	r0, #0
   2dfe0:	83a00001 	movhi	r0, #1
   2dfe4:	e12fff1e 	bx	lr

0002dfe8 <timeToTimeout>:
   2dfe8:	e1500001 	cmp	r0, r1
   2dfec:	3a000004 	bcc	2e004 <timeToTimeout+0x1c>
   2dff0:	e0811002 	add	r1, r1, r2
   2dff4:	e1500001 	cmp	r0, r1
   2dff8:	9a000008 	bls	2e020 <timeToTimeout+0x38>
   2dffc:	e3a00000 	mov	r0, #0
   2e000:	e12fff1e 	bx	lr
   2e004:	e0411000 	sub	r1, r1, r0
   2e008:	e1e03001 	mvn	r3, r1
   2e00c:	e1520003 	cmp	r2, r3
   2e010:	3afffff9 	bcc	2dffc <timeToTimeout+0x14>
   2e014:	e2820001 	add	r0, r2, #1
   2e018:	e0800001 	add	r0, r0, r1
   2e01c:	e12fff1e 	bx	lr
   2e020:	e0410000 	sub	r0, r1, r0
   2e024:	e12fff1e 	bx	lr

0002e028 <strlcpy>:
   2e028:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e02c:	e1a07000 	mov	r7, r0
   2e030:	e1a00001 	mov	r0, r1
   2e034:	e1a04002 	mov	r4, r2
   2e038:	e1a06001 	mov	r6, r1
   2e03c:	ebfff012 	bl	2a08c <strlen>
   2e040:	e2802001 	add	r2, r0, #1
   2e044:	e1520004 	cmp	r2, r4
   2e048:	e1a05000 	mov	r5, r0
   2e04c:	3a00000c 	bcc	2e084 <strlcpy+0x5c>
   2e050:	e3540000 	cmp	r4, #0
   2e054:	1a000001 	bne	2e060 <strlcpy+0x38>
   2e058:	e1a00005 	mov	r0, r5
   2e05c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e060:	e2444001 	sub	r4, r4, #1
   2e064:	e1a01006 	mov	r1, r6
   2e068:	e1a02004 	mov	r2, r4
   2e06c:	e1a00007 	mov	r0, r7
   2e070:	ebfff22a 	bl	2a920 <memcpy>
   2e074:	e3a03000 	mov	r3, #0
   2e078:	e1a00005 	mov	r0, r5
   2e07c:	e7c73004 	strb	r3, [r7, r4]
   2e080:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e084:	e1a01006 	mov	r1, r6
   2e088:	e1a00007 	mov	r0, r7
   2e08c:	ebfff223 	bl	2a920 <memcpy>
   2e090:	e1a00005 	mov	r0, r5
   2e094:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002e098 <strlcat>:
   2e098:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e09c:	e1a05002 	mov	r5, r2
   2e0a0:	e1a08000 	mov	r8, r0
   2e0a4:	e1a00001 	mov	r0, r1
   2e0a8:	e1a06001 	mov	r6, r1
   2e0ac:	ebffeff6 	bl	2a08c <strlen>
   2e0b0:	e3550000 	cmp	r5, #0
   2e0b4:	e1a07000 	mov	r7, r0
   2e0b8:	0a000021 	beq	2e144 <strlcat+0xac>
   2e0bc:	e1d800d0 	ldrsb	r0, [r8]
   2e0c0:	e3500000 	cmp	r0, #0
   2e0c4:	11a03008 	movne	r3, r8
   2e0c8:	13a04000 	movne	r4, #0
   2e0cc:	1a000003 	bne	2e0e0 <strlcat+0x48>
   2e0d0:	ea000007 	b	2e0f4 <strlcat+0x5c>
   2e0d4:	e1f3c0d1 	ldrsb	ip, [r3, #1]!
   2e0d8:	e35c0000 	cmp	ip, #0
   2e0dc:	0a000005 	beq	2e0f8 <strlcat+0x60>
   2e0e0:	e2844001 	add	r4, r4, #1
   2e0e4:	e1550004 	cmp	r5, r4
   2e0e8:	1afffff9 	bne	2e0d4 <strlcat+0x3c>
   2e0ec:	e0870004 	add	r0, r7, r4
   2e0f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e0f4:	e1a04000 	mov	r4, r0
   2e0f8:	e0453004 	sub	r3, r5, r4
   2e0fc:	e1570003 	cmp	r7, r3
   2e100:	2a000005 	bcs	2e11c <strlcat+0x84>
   2e104:	e1a01006 	mov	r1, r6
   2e108:	e0880004 	add	r0, r8, r4
   2e10c:	e2872001 	add	r2, r7, #1
   2e110:	ebfff202 	bl	2a920 <memcpy>
   2e114:	e0870004 	add	r0, r7, r4
   2e118:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e11c:	e2455001 	sub	r5, r5, #1
   2e120:	e1a02005 	mov	r2, r5
   2e124:	e1a01006 	mov	r1, r6
   2e128:	e0880004 	add	r0, r8, r4
   2e12c:	ebfff1fb 	bl	2a920 <memcpy>
   2e130:	e3a03000 	mov	r3, #0
   2e134:	e0885005 	add	r5, r8, r5
   2e138:	e7c53004 	strb	r3, [r5, r4]
   2e13c:	e0870004 	add	r0, r7, r4
   2e140:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e144:	e1a04005 	mov	r4, r5
   2e148:	eaffffe7 	b	2e0ec <strlcat+0x54>

0002e14c <strnlen>:
   2e14c:	e3510000 	cmp	r1, #0
   2e150:	0a00000c 	beq	2e188 <strnlen+0x3c>
   2e154:	e1d030d0 	ldrsb	r3, [r0]
   2e158:	e3530000 	cmp	r3, #0
   2e15c:	0a00000b 	beq	2e190 <strnlen+0x44>
   2e160:	e1a03000 	mov	r3, r0
   2e164:	e3a00000 	mov	r0, #0
   2e168:	ea000002 	b	2e178 <strnlen+0x2c>
   2e16c:	e1f320d1 	ldrsb	r2, [r3, #1]!
   2e170:	e3520000 	cmp	r2, #0
   2e174:	012fff1e 	bxeq	lr
   2e178:	e2800001 	add	r0, r0, #1
   2e17c:	e1510000 	cmp	r1, r0
   2e180:	1afffff9 	bne	2e16c <strnlen+0x20>
   2e184:	e12fff1e 	bx	lr
   2e188:	e1a00001 	mov	r0, r1
   2e18c:	e12fff1e 	bx	lr
   2e190:	e1a00003 	mov	r0, r3
   2e194:	e12fff1e 	bx	lr

0002e198 <sprintf>:
   2e198:	e92d000e 	push	{r1, r2, r3}
   2e19c:	e92d4010 	push	{r4, lr}
   2e1a0:	e24dd01c 	sub	sp, sp, #28
   2e1a4:	e28d3028 	add	r3, sp, #40	; 0x28
   2e1a8:	e1a04000 	mov	r4, r0
   2e1ac:	e28d0008 	add	r0, sp, #8
   2e1b0:	e58d3004 	str	r3, [sp, #4]
   2e1b4:	ebffe66e 	bl	27b74 <CString::CString()>
   2e1b8:	e59d2004 	ldr	r2, [sp, #4]
   2e1bc:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   2e1c0:	e28d0008 	add	r0, sp, #8
   2e1c4:	ebffe885 	bl	283e0 <CString::FormatV(char const*, std::__va_list)>
   2e1c8:	e28d0008 	add	r0, sp, #8
   2e1cc:	ebffe67e 	bl	27bcc <CString::operator char const*() const>
   2e1d0:	e1a01000 	mov	r1, r0
   2e1d4:	e1a00004 	mov	r0, r4
   2e1d8:	ebfff069 	bl	2a384 <strcpy>
   2e1dc:	e28d0008 	add	r0, sp, #8
   2e1e0:	ebffe6a7 	bl	27c84 <CString::GetLength() const>
   2e1e4:	e1a04000 	mov	r4, r0
   2e1e8:	e28d0008 	add	r0, sp, #8
   2e1ec:	ebffe62d 	bl	27aa8 <CString::~CString()>
   2e1f0:	e1a00004 	mov	r0, r4
   2e1f4:	e28dd01c 	add	sp, sp, #28
   2e1f8:	e8bd4010 	pop	{r4, lr}
   2e1fc:	e28dd00c 	add	sp, sp, #12
   2e200:	e12fff1e 	bx	lr

0002e204 <snprintf>:
   2e204:	e92d000c 	push	{r2, r3}
   2e208:	e92d4030 	push	{r4, r5, lr}
   2e20c:	e24dd01c 	sub	sp, sp, #28
   2e210:	e28d302c 	add	r3, sp, #44	; 0x2c
   2e214:	e1a05000 	mov	r5, r0
   2e218:	e28d0008 	add	r0, sp, #8
   2e21c:	e58d3004 	str	r3, [sp, #4]
   2e220:	e1a04001 	mov	r4, r1
   2e224:	ebffe652 	bl	27b74 <CString::CString()>
   2e228:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   2e22c:	e59d2004 	ldr	r2, [sp, #4]
   2e230:	e28d0008 	add	r0, sp, #8
   2e234:	ebffe869 	bl	283e0 <CString::FormatV(char const*, std::__va_list)>
   2e238:	e28d0008 	add	r0, sp, #8
   2e23c:	ebffe690 	bl	27c84 <CString::GetLength() const>
   2e240:	e2444001 	sub	r4, r4, #1
   2e244:	e1540000 	cmp	r4, r0
   2e248:	21a04000 	movcs	r4, r0
   2e24c:	e28d0008 	add	r0, sp, #8
   2e250:	ebffe65d 	bl	27bcc <CString::operator char const*() const>
   2e254:	e1a02004 	mov	r2, r4
   2e258:	e1a01000 	mov	r1, r0
   2e25c:	e1a00005 	mov	r0, r5
   2e260:	ebfff1ae 	bl	2a920 <memcpy>
   2e264:	e3a03000 	mov	r3, #0
   2e268:	e28d0008 	add	r0, sp, #8
   2e26c:	e7c53004 	strb	r3, [r5, r4]
   2e270:	ebffe60c 	bl	27aa8 <CString::~CString()>
   2e274:	e1a00004 	mov	r0, r4
   2e278:	e28dd01c 	add	sp, sp, #28
   2e27c:	e8bd4030 	pop	{r4, r5, lr}
   2e280:	e28dd008 	add	sp, sp, #8
   2e284:	e12fff1e 	bx	lr

0002e288 <vsnprintf>:
   2e288:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2e28c:	e1a07003 	mov	r7, r3
   2e290:	e1a06002 	mov	r6, r2
   2e294:	e24dd014 	sub	sp, sp, #20
   2e298:	e1a05000 	mov	r5, r0
   2e29c:	e1a0000d 	mov	r0, sp
   2e2a0:	e1a04001 	mov	r4, r1
   2e2a4:	ebffe632 	bl	27b74 <CString::CString()>
   2e2a8:	e1a02007 	mov	r2, r7
   2e2ac:	e1a01006 	mov	r1, r6
   2e2b0:	e1a0000d 	mov	r0, sp
   2e2b4:	ebffe849 	bl	283e0 <CString::FormatV(char const*, std::__va_list)>
   2e2b8:	e1a0000d 	mov	r0, sp
   2e2bc:	ebffe670 	bl	27c84 <CString::GetLength() const>
   2e2c0:	e2444001 	sub	r4, r4, #1
   2e2c4:	e1540000 	cmp	r4, r0
   2e2c8:	21a04000 	movcs	r4, r0
   2e2cc:	e1a0000d 	mov	r0, sp
   2e2d0:	ebffe63d 	bl	27bcc <CString::operator char const*() const>
   2e2d4:	e1a02004 	mov	r2, r4
   2e2d8:	e1a01000 	mov	r1, r0
   2e2dc:	e1a00005 	mov	r0, r5
   2e2e0:	ebfff18e 	bl	2a920 <memcpy>
   2e2e4:	e3a03000 	mov	r3, #0
   2e2e8:	e1a0000d 	mov	r0, sp
   2e2ec:	e7c53004 	strb	r3, [r5, r4]
   2e2f0:	ebffe5ec 	bl	27aa8 <CString::~CString()>
   2e2f4:	e1a00004 	mov	r0, r4
   2e2f8:	e28dd014 	add	sp, sp, #20
   2e2fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002e300 <jsonGetValueForKey>:
   2e300:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e304:	e1a08001 	mov	r8, r1
   2e308:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e30c:	e24dd018 	sub	sp, sp, #24
   2e310:	e1a07000 	mov	r7, r0
   2e314:	e28d000c 	add	r0, sp, #12
   2e318:	e1a09002 	mov	r9, r2
   2e31c:	e1a0a003 	mov	sl, r3
   2e320:	eb000139 	bl	2e80c <JSMNR_init>
   2e324:	e1a00008 	mov	r0, r8
   2e328:	ebffef57 	bl	2a08c <strlen>
   2e32c:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e330:	e1a02000 	mov	r2, r0
   2e334:	e28d3018 	add	r3, sp, #24
   2e338:	e28d000c 	add	r0, sp, #12
   2e33c:	e1a01008 	mov	r1, r8
   2e340:	e58dc000 	str	ip, [sp]
   2e344:	eb00014c 	bl	2e87c <JSMNR_parse>
   2e348:	e2506000 	subs	r6, r0, #0
   2e34c:	c28d4018 	addgt	r4, sp, #24
   2e350:	c3a05000 	movgt	r5, #0
   2e354:	ca000003 	bgt	2e368 <jsonGetValueForKey+0x68>
   2e358:	ea00001d 	b	2e3d4 <jsonGetValueForKey+0xd4>
   2e35c:	e1560005 	cmp	r6, r5
   2e360:	e2844010 	add	r4, r4, #16
   2e364:	0a00001a 	beq	2e3d4 <jsonGetValueForKey+0xd4>
   2e368:	e5d43000 	ldrb	r3, [r4]
   2e36c:	e2855001 	add	r5, r5, #1
   2e370:	e3530003 	cmp	r3, #3
   2e374:	1afffff8 	bne	2e35c <jsonGetValueForKey+0x5c>
   2e378:	e1a00007 	mov	r0, r7
   2e37c:	ebffef42 	bl	2a08c <strlen>
   2e380:	e994000a 	ldmib	r4, {r1, r3}
   2e384:	e0433001 	sub	r3, r3, r1
   2e388:	e1500003 	cmp	r0, r3
   2e38c:	1afffff2 	bne	2e35c <jsonGetValueForKey+0x5c>
   2e390:	e1a02000 	mov	r2, r0
   2e394:	e0880001 	add	r0, r8, r1
   2e398:	e1a01007 	mov	r1, r7
   2e39c:	ebffef93 	bl	2a1f0 <strncmp>
   2e3a0:	e3500000 	cmp	r0, #0
   2e3a4:	1affffec 	bne	2e35c <jsonGetValueForKey+0x5c>
   2e3a8:	e5941014 	ldr	r1, [r4, #20]
   2e3ac:	e5942018 	ldr	r2, [r4, #24]
   2e3b0:	e0422001 	sub	r2, r2, r1
   2e3b4:	e152000a 	cmp	r2, sl
   2e3b8:	aa000005 	bge	2e3d4 <jsonGetValueForKey+0xd4>
   2e3bc:	e2822001 	add	r2, r2, #1
   2e3c0:	e0881001 	add	r1, r8, r1
   2e3c4:	e1a00009 	mov	r0, r9
   2e3c8:	ebffff16 	bl	2e028 <strlcpy>
   2e3cc:	e3a00001 	mov	r0, #1
   2e3d0:	ea000000 	b	2e3d8 <jsonGetValueForKey+0xd8>
   2e3d4:	e3a00000 	mov	r0, #0
   2e3d8:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e3dc:	e28dd018 	add	sp, sp, #24
   2e3e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002e3e4 <jsonGetArrayLen>:
   2e3e4:	e92d4010 	push	{r4, lr}
   2e3e8:	e1a04000 	mov	r4, r0
   2e3ec:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e3f0:	e24dd018 	sub	sp, sp, #24
   2e3f4:	e28d000c 	add	r0, sp, #12
   2e3f8:	eb000103 	bl	2e80c <JSMNR_init>
   2e3fc:	e1a00004 	mov	r0, r4
   2e400:	ebffef21 	bl	2a08c <strlen>
   2e404:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e408:	e1a02000 	mov	r2, r0
   2e40c:	e28d3018 	add	r3, sp, #24
   2e410:	e28d000c 	add	r0, sp, #12
   2e414:	e1a01004 	mov	r1, r4
   2e418:	e58dc000 	str	ip, [sp]
   2e41c:	eb000116 	bl	2e87c <JSMNR_parse>
   2e420:	e3500000 	cmp	r0, #0
   2e424:	b3a00000 	movlt	r0, #0
   2e428:	ba000004 	blt	2e440 <jsonGetArrayLen+0x5c>
   2e42c:	0a000006 	beq	2e44c <jsonGetArrayLen+0x68>
   2e430:	e5dd3018 	ldrb	r3, [sp, #24]
   2e434:	e3530002 	cmp	r3, #2
   2e438:	1a000003 	bne	2e44c <jsonGetArrayLen+0x68>
   2e43c:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   2e440:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e444:	e28dd018 	add	sp, sp, #24
   2e448:	e8bd8010 	pop	{r4, pc}
   2e44c:	e3e00000 	mvn	r0, #0
   2e450:	eafffffa 	b	2e440 <jsonGetArrayLen+0x5c>

0002e454 <jsonGetArrayElem>:
   2e454:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2e458:	e1a06002 	mov	r6, r2
   2e45c:	e1a04001 	mov	r4, r1
   2e460:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e464:	e24dd01c 	sub	sp, sp, #28
   2e468:	e1a02003 	mov	r2, r3
   2e46c:	e59f1134 	ldr	r1, [pc, #308]	; 2e5a8 <jsonGetArrayElem+0x154>
   2e470:	e1a07000 	mov	r7, r0
   2e474:	e1a00006 	mov	r0, r6
   2e478:	e1a05003 	mov	r5, r3
   2e47c:	ebfffee9 	bl	2e028 <strlcpy>
   2e480:	e28d000c 	add	r0, sp, #12
   2e484:	eb0000e0 	bl	2e80c <JSMNR_init>
   2e488:	e1a00004 	mov	r0, r4
   2e48c:	ebffeefe 	bl	2a08c <strlen>
   2e490:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e494:	e1a02000 	mov	r2, r0
   2e498:	e28d3018 	add	r3, sp, #24
   2e49c:	e28d000c 	add	r0, sp, #12
   2e4a0:	e1a01004 	mov	r1, r4
   2e4a4:	e58dc000 	str	ip, [sp]
   2e4a8:	eb0000f3 	bl	2e87c <JSMNR_parse>
   2e4ac:	e3500000 	cmp	r0, #0
   2e4b0:	da000002 	ble	2e4c0 <jsonGetArrayElem+0x6c>
   2e4b4:	e5dd3018 	ldrb	r3, [sp, #24]
   2e4b8:	e3530002 	cmp	r3, #2
   2e4bc:	0a000003 	beq	2e4d0 <jsonGetArrayElem+0x7c>
   2e4c0:	e3a00000 	mov	r0, #0
   2e4c4:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e4c8:	e28dd01c 	add	sp, sp, #28
   2e4cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2e4d0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2e4d4:	e1530007 	cmp	r3, r7
   2e4d8:	dafffff8 	ble	2e4c0 <jsonGetArrayElem+0x6c>
   2e4dc:	e3570000 	cmp	r7, #0
   2e4e0:	0a00002b 	beq	2e594 <jsonGetArrayElem+0x140>
   2e4e4:	e3a0e000 	mov	lr, #0
   2e4e8:	e3a02001 	mov	r2, #1
   2e4ec:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   2e4f0:	e1500002 	cmp	r0, r2
   2e4f4:	dafffff1 	ble	2e4c0 <jsonGetArrayElem+0x6c>
   2e4f8:	e28d1ef5 	add	r1, sp, #3920	; 0xf50
   2e4fc:	e1a03202 	lsl	r3, r2, #4
   2e500:	e2811008 	add	r1, r1, #8
   2e504:	e0811003 	add	r1, r1, r3
   2e508:	e5111f3c 	ldr	r1, [r1, #-3900]	; 0xfffff0c4
   2e50c:	e151000c 	cmp	r1, ip
   2e510:	d28d1018 	addle	r1, sp, #24
   2e514:	d0813003 	addle	r3, r1, r3
   2e518:	da000003 	ble	2e52c <jsonGetArrayElem+0xd8>
   2e51c:	ea00000c 	b	2e554 <jsonGetArrayElem+0x100>
   2e520:	e5931004 	ldr	r1, [r3, #4]
   2e524:	e151000c 	cmp	r1, ip
   2e528:	ca000004 	bgt	2e540 <jsonGetArrayElem+0xec>
   2e52c:	e2822001 	add	r2, r2, #1
   2e530:	e1500002 	cmp	r0, r2
   2e534:	e2833010 	add	r3, r3, #16
   2e538:	1afffff8 	bne	2e520 <jsonGetArrayElem+0xcc>
   2e53c:	eaffffdf 	b	2e4c0 <jsonGetArrayElem+0x6c>
   2e540:	e28d1ef5 	add	r1, sp, #3920	; 0xf50
   2e544:	e1a03202 	lsl	r3, r2, #4
   2e548:	e2811008 	add	r1, r1, #8
   2e54c:	e0811003 	add	r1, r1, r3
   2e550:	e511cf38 	ldr	ip, [r1, #-3896]	; 0xfffff0c8
   2e554:	e28ee001 	add	lr, lr, #1
   2e558:	e157000e 	cmp	r7, lr
   2e55c:	1affffe3 	bne	2e4f0 <jsonGetArrayElem+0x9c>
   2e560:	e28d2ef5 	add	r2, sp, #3920	; 0xf50
   2e564:	e2822008 	add	r2, r2, #8
   2e568:	e0823003 	add	r3, r2, r3
   2e56c:	e5131f3c 	ldr	r1, [r3, #-3900]	; 0xfffff0c4
   2e570:	e1a00006 	mov	r0, r6
   2e574:	e04c2001 	sub	r2, ip, r1
   2e578:	e2822001 	add	r2, r2, #1
   2e57c:	e1520005 	cmp	r2, r5
   2e580:	a1a02005 	movge	r2, r5
   2e584:	e0841001 	add	r1, r4, r1
   2e588:	ebfffea6 	bl	2e028 <strlcpy>
   2e58c:	e3a00001 	mov	r0, #1
   2e590:	eaffffcb 	b	2e4c4 <jsonGetArrayElem+0x70>
   2e594:	e3500001 	cmp	r0, #1
   2e598:	daffffc8 	ble	2e4c0 <jsonGetArrayElem+0x6c>
   2e59c:	e3a03010 	mov	r3, #16
   2e5a0:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   2e5a4:	eaffffed 	b	2e560 <jsonGetArrayElem+0x10c>
   2e5a8:	00047884 	.word	0x00047884

0002e5ac <jsonEscape>:
   2e5ac:	e1d030d0 	ldrsb	r3, [r0]
   2e5b0:	e92d4070 	push	{r4, r5, r6, lr}
   2e5b4:	e3530000 	cmp	r3, #0
   2e5b8:	0a00002d 	beq	2e674 <jsonEscape+0xc8>
   2e5bc:	e3520002 	cmp	r2, #2
   2e5c0:	da00002b 	ble	2e674 <jsonEscape+0xc8>
   2e5c4:	e3a0c002 	mov	ip, #2
   2e5c8:	e3a0e000 	mov	lr, #0
   2e5cc:	e3a0505c 	mov	r5, #92	; 0x5c
   2e5d0:	e3a0606e 	mov	r6, #110	; 0x6e
   2e5d4:	ea000011 	b	2e620 <jsonEscape+0x74>
   2e5d8:	e353005c 	cmp	r3, #92	; 0x5c
   2e5dc:	0a00001e 	beq	2e65c <jsonEscape+0xb0>
   2e5e0:	e353000a 	cmp	r3, #10
   2e5e4:	15c13000 	strbne	r3, [r1]
   2e5e8:	128ee001 	addne	lr, lr, #1
   2e5ec:	12811001 	addne	r1, r1, #1
   2e5f0:	1a000004 	bne	2e608 <jsonEscape+0x5c>
   2e5f4:	e1a03001 	mov	r3, r1
   2e5f8:	e4c35002 	strb	r5, [r3], #2
   2e5fc:	e1a0e00c 	mov	lr, ip
   2e600:	e5c16001 	strb	r6, [r1, #1]
   2e604:	e1a01003 	mov	r1, r3
   2e608:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2e60c:	e28ec002 	add	ip, lr, #2
   2e610:	e3530000 	cmp	r3, #0
   2e614:	0a00000c 	beq	2e64c <jsonEscape+0xa0>
   2e618:	e15c0002 	cmp	ip, r2
   2e61c:	aa00000a 	bge	2e64c <jsonEscape+0xa0>
   2e620:	e3530022 	cmp	r3, #34	; 0x22
   2e624:	1affffeb 	bne	2e5d8 <jsonEscape+0x2c>
   2e628:	e1a04001 	mov	r4, r1
   2e62c:	e1a0e00c 	mov	lr, ip
   2e630:	e4c45002 	strb	r5, [r4], #2
   2e634:	e5c13001 	strb	r3, [r1, #1]
   2e638:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2e63c:	e1a01004 	mov	r1, r4
   2e640:	e3530000 	cmp	r3, #0
   2e644:	e28ec002 	add	ip, lr, #2
   2e648:	1afffff2 	bne	2e618 <jsonEscape+0x6c>
   2e64c:	e152000e 	cmp	r2, lr
   2e650:	c3a03000 	movgt	r3, #0
   2e654:	c5c13000 	strbgt	r3, [r1]
   2e658:	e8bd8070 	pop	{r4, r5, r6, pc}
   2e65c:	e1a04001 	mov	r4, r1
   2e660:	e4c43002 	strb	r3, [r4], #2
   2e664:	e1a0e00c 	mov	lr, ip
   2e668:	e5c13001 	strb	r3, [r1, #1]
   2e66c:	e1a01004 	mov	r1, r4
   2e670:	eaffffe4 	b	2e608 <jsonEscape+0x5c>
   2e674:	e3a0e000 	mov	lr, #0
   2e678:	eafffff3 	b	2e64c <jsonEscape+0xa0>

0002e67c <rdisspace>:
   2e67c:	e3500020 	cmp	r0, #32
   2e680:	0a000004 	beq	2e698 <rdisspace+0x1c>
   2e684:	e2400009 	sub	r0, r0, #9
   2e688:	e3500004 	cmp	r0, #4
   2e68c:	83a00000 	movhi	r0, #0
   2e690:	93a00001 	movls	r0, #1
   2e694:	e12fff1e 	bx	lr
   2e698:	e3a00001 	mov	r0, #1
   2e69c:	e12fff1e 	bx	lr

0002e6a0 <rdisdigit>:
   2e6a0:	e2400030 	sub	r0, r0, #48	; 0x30
   2e6a4:	e3500009 	cmp	r0, #9
   2e6a8:	83a00000 	movhi	r0, #0
   2e6ac:	93a00001 	movls	r0, #1
   2e6b0:	e12fff1e 	bx	lr

0002e6b4 <rdisupper>:
   2e6b4:	e2400041 	sub	r0, r0, #65	; 0x41
   2e6b8:	e3500019 	cmp	r0, #25
   2e6bc:	83a00000 	movhi	r0, #0
   2e6c0:	93a00001 	movls	r0, #1
   2e6c4:	e12fff1e 	bx	lr

0002e6c8 <rdislower>:
   2e6c8:	e2400061 	sub	r0, r0, #97	; 0x61
   2e6cc:	e3500019 	cmp	r0, #25
   2e6d0:	83a00000 	movhi	r0, #0
   2e6d4:	93a00001 	movls	r0, #1
   2e6d8:	e12fff1e 	bx	lr

0002e6dc <rdtolower>:
   2e6dc:	e6ef3070 	uxtb	r3, r0
   2e6e0:	e2432041 	sub	r2, r3, #65	; 0x41
   2e6e4:	e3520019 	cmp	r2, #25
   2e6e8:	92833020 	addls	r3, r3, #32
   2e6ec:	96af0073 	sxtbls	r0, r3
   2e6f0:	e12fff1e 	bx	lr

0002e6f4 <rdtoupper>:
   2e6f4:	e6ef3070 	uxtb	r3, r0
   2e6f8:	e2432061 	sub	r2, r3, #97	; 0x61
   2e6fc:	e3520019 	cmp	r2, #25
   2e700:	92433020 	subls	r3, r3, #32
   2e704:	96af0073 	sxtbls	r0, r3
   2e708:	e12fff1e 	bx	lr

0002e70c <rdisalpha>:
   2e70c:	e3c00020 	bic	r0, r0, #32
   2e710:	e2400041 	sub	r0, r0, #65	; 0x41
   2e714:	e3500019 	cmp	r0, #25
   2e718:	83a00000 	movhi	r0, #0
   2e71c:	93a00001 	movls	r0, #1
   2e720:	e12fff1e 	bx	lr

0002e724 <rdstrrev>:
   2e724:	e92d4010 	push	{r4, lr}
   2e728:	e1a04000 	mov	r4, r0
   2e72c:	ebffee56 	bl	2a08c <strlen>
   2e730:	e2402001 	sub	r2, r0, #1
   2e734:	e3520000 	cmp	r2, #0
   2e738:	d8bd8010 	pople	{r4, pc}
   2e73c:	e3a01000 	mov	r1, #0
   2e740:	e0840000 	add	r0, r4, r0
   2e744:	e2443001 	sub	r3, r4, #1
   2e748:	e5d3c001 	ldrb	ip, [r3, #1]
   2e74c:	e550e001 	ldrb	lr, [r0, #-1]
   2e750:	e2811001 	add	r1, r1, #1
   2e754:	e2422001 	sub	r2, r2, #1
   2e758:	e1510002 	cmp	r1, r2
   2e75c:	e5e3e001 	strb	lr, [r3, #1]!
   2e760:	e560c001 	strb	ip, [r0, #-1]!
   2e764:	bafffff7 	blt	2e748 <rdstrrev+0x24>
   2e768:	e8bd8010 	pop	{r4, pc}

0002e76c <rditoa>:
   2e76c:	e3520000 	cmp	r2, #0
   2e770:	0a000023 	beq	2e804 <rditoa+0x98>
   2e774:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e778:	e1a04000 	mov	r4, r0
   2e77c:	e1a09001 	mov	r9, r1
   2e780:	e1a07003 	mov	r7, r3
   2e784:	e1a06001 	mov	r6, r1
   2e788:	e3a05001 	mov	r5, #1
   2e78c:	e2428001 	sub	r8, r2, #1
   2e790:	ea000003 	b	2e7a4 <rditoa+0x38>
   2e794:	e15a0008 	cmp	sl, r8
   2e798:	e2855001 	add	r5, r5, #1
   2e79c:	e2866001 	add	r6, r6, #1
   2e7a0:	aa000014 	bge	2e7f8 <rditoa+0x8c>
   2e7a4:	e1a00004 	mov	r0, r4
   2e7a8:	e1a01007 	mov	r1, r7
   2e7ac:	eb003df7 	bl	3df90 <__aeabi_idivmod>
   2e7b0:	e3510009 	cmp	r1, #9
   2e7b4:	e2813030 	add	r3, r1, #48	; 0x30
   2e7b8:	c2811037 	addgt	r1, r1, #55	; 0x37
   2e7bc:	c5c61000 	strbgt	r1, [r6]
   2e7c0:	d5c63000 	strble	r3, [r6]
   2e7c4:	e1a00004 	mov	r0, r4
   2e7c8:	e1a01007 	mov	r1, r7
   2e7cc:	d1a0a005 	movle	sl, r5
   2e7d0:	c1a0a005 	movgt	sl, r5
   2e7d4:	eb003da3 	bl	3de68 <__aeabi_idiv>
   2e7d8:	e2504000 	subs	r4, r0, #0
   2e7dc:	1affffec 	bne	2e794 <rditoa+0x28>
   2e7e0:	e3a04000 	mov	r4, #0
   2e7e4:	e1a00009 	mov	r0, r9
   2e7e8:	e7c9400a 	strb	r4, [r9, sl]
   2e7ec:	ebffffcc 	bl	2e724 <rdstrrev>
   2e7f0:	e1a00004 	mov	r0, r4
   2e7f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e7f8:	1afffff8 	bne	2e7e0 <rditoa+0x74>
   2e7fc:	e3e00000 	mvn	r0, #0
   2e800:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e804:	e3e00000 	mvn	r0, #0
   2e808:	e12fff1e 	bx	lr

0002e80c <JSMNR_init>:
   2e80c:	e3a03000 	mov	r3, #0
   2e810:	e3e02000 	mvn	r2, #0
   2e814:	e5803000 	str	r3, [r0]
   2e818:	e5802008 	str	r2, [r0, #8]
   2e81c:	e5803004 	str	r3, [r0, #4]
   2e820:	e12fff1e 	bx	lr

0002e824 <JSMNR_logLongStr>:
   2e824:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e828:	e3a04000 	mov	r4, #0
   2e82c:	e28db01c 	add	fp, sp, #28
   2e830:	e1a05001 	mov	r5, r1
   2e834:	e1a08004 	mov	r8, r4
   2e838:	e3a07051 	mov	r7, #81	; 0x51
   2e83c:	ea000007 	b	2e860 <JSMNR_logLongStr+0x3c>
   2e840:	e1a0600d 	mov	r6, sp
   2e844:	e24dd058 	sub	sp, sp, #88	; 0x58
   2e848:	e1a0000d 	mov	r0, sp
   2e84c:	e1a02007 	mov	r2, r7
   2e850:	ebfffdf4 	bl	2e028 <strlcpy>
   2e854:	e5cd8050 	strb	r8, [sp, #80]	; 0x50
   2e858:	e1a0d006 	mov	sp, r6
   2e85c:	e2844050 	add	r4, r4, #80	; 0x50
   2e860:	e1a00005 	mov	r0, r5
   2e864:	ebffee08 	bl	2a08c <strlen>
   2e868:	e1540000 	cmp	r4, r0
   2e86c:	e0851004 	add	r1, r5, r4
   2e870:	3afffff2 	bcc	2e840 <JSMNR_logLongStr+0x1c>
   2e874:	e24bd01c 	sub	sp, fp, #28
   2e878:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e87c <JSMNR_parse>:
   2e87c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e880:	e590e000 	ldr	lr, [r0]
   2e884:	e5905004 	ldr	r5, [r0, #4]
   2e888:	e152000e 	cmp	r2, lr
   2e88c:	9a0000b7 	bls	2eb70 <JSMNR_parse+0x2f4>
   2e890:	e191c0de 	ldrsb	ip, [r1, lr]
   2e894:	e35c0000 	cmp	ip, #0
   2e898:	0a0000b4 	beq	2eb70 <JSMNR_parse+0x2f4>
   2e89c:	e3a0b000 	mov	fp, #0
   2e8a0:	ea00000e 	b	2e8e0 <JSMNR_parse+0x64>
   2e8a4:	e35c005d 	cmp	ip, #93	; 0x5d
   2e8a8:	0a0000c7 	beq	2ebcc <JSMNR_parse+0x350>
   2e8ac:	ca0000c2 	bgt	2ebbc <JSMNR_parse+0x340>
   2e8b0:	e35c003a 	cmp	ip, #58	; 0x3a
   2e8b4:	1a0000dd 	bne	2ec30 <JSMNR_parse+0x3b4>
   2e8b8:	e8905000 	ldm	r0, {ip, lr}
   2e8bc:	e24ee001 	sub	lr, lr, #1
   2e8c0:	e580e008 	str	lr, [r0, #8]
   2e8c4:	e28ce001 	add	lr, ip, #1
   2e8c8:	e152000e 	cmp	r2, lr
   2e8cc:	e580e000 	str	lr, [r0]
   2e8d0:	9a0000a6 	bls	2eb70 <JSMNR_parse+0x2f4>
   2e8d4:	e191c0de 	ldrsb	ip, [r1, lr]
   2e8d8:	e35c0000 	cmp	ip, #0
   2e8dc:	0a0000a3 	beq	2eb70 <JSMNR_parse+0x2f4>
   2e8e0:	e35c002c 	cmp	ip, #44	; 0x2c
   2e8e4:	0a0000ef 	beq	2eca8 <JSMNR_parse+0x42c>
   2e8e8:	caffffed 	bgt	2e8a4 <JSMNR_parse+0x28>
   2e8ec:	e35c000d 	cmp	ip, #13
   2e8f0:	0a000099 	beq	2eb5c <JSMNR_parse+0x2e0>
   2e8f4:	da00010a 	ble	2ed24 <JSMNR_parse+0x4a8>
   2e8f8:	e35c0020 	cmp	ip, #32
   2e8fc:	0a000096 	beq	2eb5c <JSMNR_parse+0x2e0>
   2e900:	e35c0022 	cmp	ip, #34	; 0x22
   2e904:	1a000109 	bne	2ed30 <JSMNR_parse+0x4b4>
   2e908:	e28e7001 	add	r7, lr, #1
   2e90c:	e1520007 	cmp	r2, r7
   2e910:	e5807000 	str	r7, [r0]
   2e914:	e1a0c007 	mov	ip, r7
   2e918:	9a000085 	bls	2eb34 <JSMNR_parse+0x2b8>
   2e91c:	e19140d7 	ldrsb	r4, [r1, r7]
   2e920:	e3540000 	cmp	r4, #0
   2e924:	1a000008 	bne	2e94c <JSMNR_parse+0xd0>
   2e928:	ea000081 	b	2eb34 <JSMNR_parse+0x2b8>
   2e92c:	e5904000 	ldr	r4, [r0]
   2e930:	e284c001 	add	ip, r4, #1
   2e934:	e152000c 	cmp	r2, ip
   2e938:	e580c000 	str	ip, [r0]
   2e93c:	9a00007c 	bls	2eb34 <JSMNR_parse+0x2b8>
   2e940:	e19140dc 	ldrsb	r4, [r1, ip]
   2e944:	e3540000 	cmp	r4, #0
   2e948:	0a000079 	beq	2eb34 <JSMNR_parse+0x2b8>
   2e94c:	e3540022 	cmp	r4, #34	; 0x22
   2e950:	0a00014f 	beq	2ee94 <JSMNR_parse+0x618>
   2e954:	e354005c 	cmp	r4, #92	; 0x5c
   2e958:	1afffff3 	bne	2e92c <JSMNR_parse+0xb0>
   2e95c:	e28c4001 	add	r4, ip, #1
   2e960:	e1520004 	cmp	r2, r4
   2e964:	9afffff0 	bls	2e92c <JSMNR_parse+0xb0>
   2e968:	e5804000 	str	r4, [r0]
   2e96c:	e19160d4 	ldrsb	r6, [r1, r4]
   2e970:	e0819004 	add	r9, r1, r4
   2e974:	e2466022 	sub	r6, r6, #34	; 0x22
   2e978:	e3560053 	cmp	r6, #83	; 0x53
   2e97c:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
   2e980:	ea00006f 	b	2eb44 <JSMNR_parse+0x2c8>
   2e984:	0002e930 	.word	0x0002e930
   2e988:	0002eb44 	.word	0x0002eb44
   2e98c:	0002eb44 	.word	0x0002eb44
   2e990:	0002eb44 	.word	0x0002eb44
   2e994:	0002eb44 	.word	0x0002eb44
   2e998:	0002eb44 	.word	0x0002eb44
   2e99c:	0002eb44 	.word	0x0002eb44
   2e9a0:	0002eb44 	.word	0x0002eb44
   2e9a4:	0002eb44 	.word	0x0002eb44
   2e9a8:	0002eb44 	.word	0x0002eb44
   2e9ac:	0002eb44 	.word	0x0002eb44
   2e9b0:	0002eb44 	.word	0x0002eb44
   2e9b4:	0002eb44 	.word	0x0002eb44
   2e9b8:	0002e930 	.word	0x0002e930
   2e9bc:	0002eb44 	.word	0x0002eb44
   2e9c0:	0002eb44 	.word	0x0002eb44
   2e9c4:	0002eb44 	.word	0x0002eb44
   2e9c8:	0002eb44 	.word	0x0002eb44
   2e9cc:	0002eb44 	.word	0x0002eb44
   2e9d0:	0002eb44 	.word	0x0002eb44
   2e9d4:	0002eb44 	.word	0x0002eb44
   2e9d8:	0002eb44 	.word	0x0002eb44
   2e9dc:	0002eb44 	.word	0x0002eb44
   2e9e0:	0002eb44 	.word	0x0002eb44
   2e9e4:	0002eb44 	.word	0x0002eb44
   2e9e8:	0002eb44 	.word	0x0002eb44
   2e9ec:	0002eb44 	.word	0x0002eb44
   2e9f0:	0002eb44 	.word	0x0002eb44
   2e9f4:	0002eb44 	.word	0x0002eb44
   2e9f8:	0002eb44 	.word	0x0002eb44
   2e9fc:	0002eb44 	.word	0x0002eb44
   2ea00:	0002eb44 	.word	0x0002eb44
   2ea04:	0002eb44 	.word	0x0002eb44
   2ea08:	0002eb44 	.word	0x0002eb44
   2ea0c:	0002eb44 	.word	0x0002eb44
   2ea10:	0002eb44 	.word	0x0002eb44
   2ea14:	0002eb44 	.word	0x0002eb44
   2ea18:	0002eb44 	.word	0x0002eb44
   2ea1c:	0002eb44 	.word	0x0002eb44
   2ea20:	0002eb44 	.word	0x0002eb44
   2ea24:	0002eb44 	.word	0x0002eb44
   2ea28:	0002eb44 	.word	0x0002eb44
   2ea2c:	0002eb44 	.word	0x0002eb44
   2ea30:	0002eb44 	.word	0x0002eb44
   2ea34:	0002eb44 	.word	0x0002eb44
   2ea38:	0002eb44 	.word	0x0002eb44
   2ea3c:	0002eb44 	.word	0x0002eb44
   2ea40:	0002eb44 	.word	0x0002eb44
   2ea44:	0002eb44 	.word	0x0002eb44
   2ea48:	0002eb44 	.word	0x0002eb44
   2ea4c:	0002eb44 	.word	0x0002eb44
   2ea50:	0002eb44 	.word	0x0002eb44
   2ea54:	0002eb44 	.word	0x0002eb44
   2ea58:	0002eb44 	.word	0x0002eb44
   2ea5c:	0002eb44 	.word	0x0002eb44
   2ea60:	0002eb44 	.word	0x0002eb44
   2ea64:	0002eb44 	.word	0x0002eb44
   2ea68:	0002eb44 	.word	0x0002eb44
   2ea6c:	0002e930 	.word	0x0002e930
   2ea70:	0002eb44 	.word	0x0002eb44
   2ea74:	0002eb44 	.word	0x0002eb44
   2ea78:	0002eb44 	.word	0x0002eb44
   2ea7c:	0002eb44 	.word	0x0002eb44
   2ea80:	0002eb44 	.word	0x0002eb44
   2ea84:	0002e930 	.word	0x0002e930
   2ea88:	0002eb44 	.word	0x0002eb44
   2ea8c:	0002eb44 	.word	0x0002eb44
   2ea90:	0002eb44 	.word	0x0002eb44
   2ea94:	0002e930 	.word	0x0002e930
   2ea98:	0002eb44 	.word	0x0002eb44
   2ea9c:	0002eb44 	.word	0x0002eb44
   2eaa0:	0002eb44 	.word	0x0002eb44
   2eaa4:	0002eb44 	.word	0x0002eb44
   2eaa8:	0002eb44 	.word	0x0002eb44
   2eaac:	0002eb44 	.word	0x0002eb44
   2eab0:	0002eb44 	.word	0x0002eb44
   2eab4:	0002e930 	.word	0x0002e930
   2eab8:	0002eb44 	.word	0x0002eb44
   2eabc:	0002eb44 	.word	0x0002eb44
   2eac0:	0002eb44 	.word	0x0002eb44
   2eac4:	0002e930 	.word	0x0002e930
   2eac8:	0002eb44 	.word	0x0002eb44
   2eacc:	0002e930 	.word	0x0002e930
   2ead0:	0002ead4 	.word	0x0002ead4
   2ead4:	e28c4002 	add	r4, ip, #2
   2ead8:	e5804000 	str	r4, [r0]
   2eadc:	e28cc006 	add	ip, ip, #6
   2eae0:	e1520004 	cmp	r2, r4
   2eae4:	0a00000d 	beq	2eb20 <JSMNR_parse+0x2a4>
   2eae8:	e1f9a0d1 	ldrsb	sl, [r9, #1]!
   2eaec:	e6ef607a 	uxtb	r6, sl
   2eaf0:	e3c68020 	bic	r8, r6, #32
   2eaf4:	e35a0000 	cmp	sl, #0
   2eaf8:	e2488041 	sub	r8, r8, #65	; 0x41
   2eafc:	e2466030 	sub	r6, r6, #48	; 0x30
   2eb00:	0a000006 	beq	2eb20 <JSMNR_parse+0x2a4>
   2eb04:	e3580005 	cmp	r8, #5
   2eb08:	83560009 	cmphi	r6, #9
   2eb0c:	e2844001 	add	r4, r4, #1
   2eb10:	8a00000b 	bhi	2eb44 <JSMNR_parse+0x2c8>
   2eb14:	e154000c 	cmp	r4, ip
   2eb18:	e5804000 	str	r4, [r0]
   2eb1c:	1affffef 	bne	2eae0 <JSMNR_parse+0x264>
   2eb20:	e2444001 	sub	r4, r4, #1
   2eb24:	e284c001 	add	ip, r4, #1
   2eb28:	e152000c 	cmp	r2, ip
   2eb2c:	e580c000 	str	ip, [r0]
   2eb30:	8affff82 	bhi	2e940 <JSMNR_parse+0xc4>
   2eb34:	e3e05002 	mvn	r5, #2
   2eb38:	e580e000 	str	lr, [r0]
   2eb3c:	e1a00005 	mov	r0, r5
   2eb40:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eb44:	e3e05001 	mvn	r5, #1
   2eb48:	e580e000 	str	lr, [r0]
   2eb4c:	e1a00005 	mov	r0, r5
   2eb50:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eb54:	e37c0001 	cmn	ip, #1
   2eb58:	0a00002f 	beq	2ec1c <JSMNR_parse+0x3a0>
   2eb5c:	e590c000 	ldr	ip, [r0]
   2eb60:	e28ce001 	add	lr, ip, #1
   2eb64:	e152000e 	cmp	r2, lr
   2eb68:	e580e000 	str	lr, [r0]
   2eb6c:	8affff58 	bhi	2e8d4 <JSMNR_parse+0x58>
   2eb70:	e3530000 	cmp	r3, #0
   2eb74:	0afffff4 	beq	2eb4c <JSMNR_parse+0x2d0>
   2eb78:	e5901004 	ldr	r1, [r0, #4]
   2eb7c:	e2512001 	subs	r2, r1, #1
   2eb80:	4afffff1 	bmi	2eb4c <JSMNR_parse+0x2d0>
   2eb84:	e0833201 	add	r3, r3, r1, lsl #4
   2eb88:	ea000002 	b	2eb98 <JSMNR_parse+0x31c>
   2eb8c:	e3720001 	cmn	r2, #1
   2eb90:	e2433010 	sub	r3, r3, #16
   2eb94:	0affffec 	beq	2eb4c <JSMNR_parse+0x2d0>
   2eb98:	e513100c 	ldr	r1, [r3, #-12]
   2eb9c:	e2422001 	sub	r2, r2, #1
   2eba0:	e3710001 	cmn	r1, #1
   2eba4:	0afffff8 	beq	2eb8c <JSMNR_parse+0x310>
   2eba8:	e5131008 	ldr	r1, [r3, #-8]
   2ebac:	e3710001 	cmn	r1, #1
   2ebb0:	1afffff5 	bne	2eb8c <JSMNR_parse+0x310>
   2ebb4:	e3e05002 	mvn	r5, #2
   2ebb8:	eaffffe3 	b	2eb4c <JSMNR_parse+0x2d0>
   2ebbc:	e35c007b 	cmp	ip, #123	; 0x7b
   2ebc0:	0a00001c 	beq	2ec38 <JSMNR_parse+0x3bc>
   2ebc4:	e35c007d 	cmp	ip, #125	; 0x7d
   2ebc8:	1a000058 	bne	2ed30 <JSMNR_parse+0x4b4>
   2ebcc:	e3530000 	cmp	r3, #0
   2ebd0:	0affffe1 	beq	2eb5c <JSMNR_parse+0x2e0>
   2ebd4:	e5904004 	ldr	r4, [r0, #4]
   2ebd8:	e35c007d 	cmp	ip, #125	; 0x7d
   2ebdc:	13a07002 	movne	r7, #2
   2ebe0:	03a07001 	moveq	r7, #1
   2ebe4:	e254c001 	subs	ip, r4, #1
   2ebe8:	4affffd9 	bmi	2eb54 <JSMNR_parse+0x2d8>
   2ebec:	e244421f 	sub	r4, r4, #-268435455	; 0xf0000001
   2ebf0:	e0834204 	add	r4, r3, r4, lsl #4
   2ebf4:	e5946004 	ldr	r6, [r4, #4]
   2ebf8:	e3760001 	cmn	r6, #1
   2ebfc:	0a000002 	beq	2ec0c <JSMNR_parse+0x390>
   2ec00:	e5946008 	ldr	r6, [r4, #8]
   2ec04:	e3760001 	cmn	r6, #1
   2ec08:	0a00008b 	beq	2ee3c <JSMNR_parse+0x5c0>
   2ec0c:	e24cc001 	sub	ip, ip, #1
   2ec10:	e37c0001 	cmn	ip, #1
   2ec14:	e2444010 	sub	r4, r4, #16
   2ec18:	1afffff5 	bne	2ebf4 <JSMNR_parse+0x378>
   2ec1c:	e3a02001 	mov	r2, #1
   2ec20:	e59f02dc 	ldr	r0, [pc, #732]	; 2ef04 <JSMNR_parse+0x688>
   2ec24:	ebfffefe 	bl	2e824 <JSMNR_logLongStr>
   2ec28:	e3e05001 	mvn	r5, #1
   2ec2c:	eaffffc6 	b	2eb4c <JSMNR_parse+0x2d0>
   2ec30:	e35c005b 	cmp	ip, #91	; 0x5b
   2ec34:	1a00003d 	bne	2ed30 <JSMNR_parse+0x4b4>
   2ec38:	e3530000 	cmp	r3, #0
   2ec3c:	e2855001 	add	r5, r5, #1
   2ec40:	0affffc5 	beq	2eb5c <JSMNR_parse+0x2e0>
   2ec44:	e5904004 	ldr	r4, [r0, #4]
   2ec48:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2ec4c:	e1560004 	cmp	r6, r4
   2ec50:	9a000060 	bls	2edd8 <JSMNR_parse+0x55c>
   2ec54:	e2848001 	add	r8, r4, #1
   2ec58:	e5808004 	str	r8, [r0, #4]
   2ec5c:	e3e08000 	mvn	r8, #0
   2ec60:	e5907008 	ldr	r7, [r0, #8]
   2ec64:	e0836204 	add	r6, r3, r4, lsl #4
   2ec68:	e3770001 	cmn	r7, #1
   2ec6c:	10837207 	addne	r7, r3, r7, lsl #4
   2ec70:	e586b00c 	str	fp, [r6, #12]
   2ec74:	e5868004 	str	r8, [r6, #4]
   2ec78:	e5868008 	str	r8, [r6, #8]
   2ec7c:	1597800c 	ldrne	r8, [r7, #12]
   2ec80:	12888001 	addne	r8, r8, #1
   2ec84:	1587800c 	strne	r8, [r7, #12]
   2ec88:	e35c007b 	cmp	ip, #123	; 0x7b
   2ec8c:	13a07002 	movne	r7, #2
   2ec90:	03a07001 	moveq	r7, #1
   2ec94:	e590c000 	ldr	ip, [r0]
   2ec98:	e7c37204 	strb	r7, [r3, r4, lsl #4]
   2ec9c:	e586e004 	str	lr, [r6, #4]
   2eca0:	e5804008 	str	r4, [r0, #8]
   2eca4:	eaffff06 	b	2e8c4 <JSMNR_parse+0x48>
   2eca8:	e3530000 	cmp	r3, #0
   2ecac:	0affffaa 	beq	2eb5c <JSMNR_parse+0x2e0>
   2ecb0:	e590c008 	ldr	ip, [r0, #8]
   2ecb4:	e37c0001 	cmn	ip, #1
   2ecb8:	0affffa7 	beq	2eb5c <JSMNR_parse+0x2e0>
   2ecbc:	e7d3c20c 	ldrb	ip, [r3, ip, lsl #4]
   2ecc0:	e24cc001 	sub	ip, ip, #1
   2ecc4:	e35c0001 	cmp	ip, #1
   2ecc8:	9affffa3 	bls	2eb5c <JSMNR_parse+0x2e0>
   2eccc:	e590e004 	ldr	lr, [r0, #4]
   2ecd0:	e25e4001 	subs	r4, lr, #1
   2ecd4:	4affffa0 	bmi	2eb5c <JSMNR_parse+0x2e0>
   2ecd8:	e083e20e 	add	lr, r3, lr, lsl #4
   2ecdc:	ea000003 	b	2ecf0 <JSMNR_parse+0x474>
   2ece0:	e2444001 	sub	r4, r4, #1
   2ece4:	e3740001 	cmn	r4, #1
   2ece8:	e24ee010 	sub	lr, lr, #16
   2ecec:	0affff9a 	beq	2eb5c <JSMNR_parse+0x2e0>
   2ecf0:	e55ec010 	ldrb	ip, [lr, #-16]
   2ecf4:	e24cc001 	sub	ip, ip, #1
   2ecf8:	e35c0001 	cmp	ip, #1
   2ecfc:	8afffff7 	bhi	2ece0 <JSMNR_parse+0x464>
   2ed00:	e51ec00c 	ldr	ip, [lr, #-12]
   2ed04:	e37c0001 	cmn	ip, #1
   2ed08:	0afffff4 	beq	2ece0 <JSMNR_parse+0x464>
   2ed0c:	e51ec008 	ldr	ip, [lr, #-8]
   2ed10:	e37c0001 	cmn	ip, #1
   2ed14:	1afffff1 	bne	2ece0 <JSMNR_parse+0x464>
   2ed18:	e5804008 	str	r4, [r0, #8]
   2ed1c:	e590c000 	ldr	ip, [r0]
   2ed20:	eafffee7 	b	2e8c4 <JSMNR_parse+0x48>
   2ed24:	e24c7009 	sub	r7, ip, #9
   2ed28:	e3570001 	cmp	r7, #1
   2ed2c:	9affff8a 	bls	2eb5c <JSMNR_parse+0x2e0>
   2ed30:	e5904000 	ldr	r4, [r0]
   2ed34:	e1520004 	cmp	r2, r4
   2ed38:	9a00001d 	bls	2edb4 <JSMNR_parse+0x538>
   2ed3c:	e191c0d4 	ldrsb	ip, [r1, r4]
   2ed40:	e0816004 	add	r6, r1, r4
   2ed44:	e35c0000 	cmp	ip, #0
   2ed48:	1a000011 	bne	2ed94 <JSMNR_parse+0x518>
   2ed4c:	ea000018 	b	2edb4 <JSMNR_parse+0x538>
   2ed50:	e35c0009 	cmp	ip, #9
   2ed54:	ba000003 	blt	2ed68 <JSMNR_parse+0x4ec>
   2ed58:	e35c000a 	cmp	ip, #10
   2ed5c:	da000014 	ble	2edb4 <JSMNR_parse+0x538>
   2ed60:	e35c000d 	cmp	ip, #13
   2ed64:	0a000012 	beq	2edb4 <JSMNR_parse+0x538>
   2ed68:	e24cc020 	sub	ip, ip, #32
   2ed6c:	e6efc07c 	uxtb	ip, ip
   2ed70:	e35c005e 	cmp	ip, #94	; 0x5e
   2ed74:	8affff72 	bhi	2eb44 <JSMNR_parse+0x2c8>
   2ed78:	e2844001 	add	r4, r4, #1
   2ed7c:	e1520004 	cmp	r2, r4
   2ed80:	e5804000 	str	r4, [r0]
   2ed84:	0a00000a 	beq	2edb4 <JSMNR_parse+0x538>
   2ed88:	e1f6c0d1 	ldrsb	ip, [r6, #1]!
   2ed8c:	e35c0000 	cmp	ip, #0
   2ed90:	0a000007 	beq	2edb4 <JSMNR_parse+0x538>
   2ed94:	e35c0020 	cmp	ip, #32
   2ed98:	0a000005 	beq	2edb4 <JSMNR_parse+0x538>
   2ed9c:	daffffeb 	ble	2ed50 <JSMNR_parse+0x4d4>
   2eda0:	e35c003a 	cmp	ip, #58	; 0x3a
   2eda4:	0a000002 	beq	2edb4 <JSMNR_parse+0x538>
   2eda8:	ca00000c 	bgt	2ede0 <JSMNR_parse+0x564>
   2edac:	e35c002c 	cmp	ip, #44	; 0x2c
   2edb0:	1affffec 	bne	2ed68 <JSMNR_parse+0x4ec>
   2edb4:	e3530000 	cmp	r3, #0
   2edb8:	0244c001 	subeq	ip, r4, #1
   2edbc:	02855001 	addeq	r5, r5, #1
   2edc0:	0afffebf 	beq	2e8c4 <JSMNR_parse+0x48>
   2edc4:	e590c004 	ldr	ip, [r0, #4]
   2edc8:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2edcc:	e156000c 	cmp	r6, ip
   2edd0:	8a000007 	bhi	2edf4 <JSMNR_parse+0x578>
   2edd4:	e580e000 	str	lr, [r0]
   2edd8:	e3e05000 	mvn	r5, #0
   2eddc:	eaffff5a 	b	2eb4c <JSMNR_parse+0x2d0>
   2ede0:	e35c005d 	cmp	ip, #93	; 0x5d
   2ede4:	0afffff2 	beq	2edb4 <JSMNR_parse+0x538>
   2ede8:	e35c007d 	cmp	ip, #125	; 0x7d
   2edec:	1affffdd 	bne	2ed68 <JSMNR_parse+0x4ec>
   2edf0:	eaffffef 	b	2edb4 <JSMNR_parse+0x538>
   2edf4:	e3a08004 	mov	r8, #4
   2edf8:	e5906008 	ldr	r6, [r0, #8]
   2edfc:	e28c7001 	add	r7, ip, #1
   2ee00:	e5807004 	str	r7, [r0, #4]
   2ee04:	e3760001 	cmn	r6, #1
   2ee08:	e083720c 	add	r7, r3, ip, lsl #4
   2ee0c:	e7c3820c 	strb	r8, [r3, ip, lsl #4]
   2ee10:	10836206 	addne	r6, r3, r6, lsl #4
   2ee14:	e587b00c 	str	fp, [r7, #12]
   2ee18:	e587e004 	str	lr, [r7, #4]
   2ee1c:	1596e00c 	ldrne	lr, [r6, #12]
   2ee20:	e244c001 	sub	ip, r4, #1
   2ee24:	128ee001 	addne	lr, lr, #1
   2ee28:	e5874008 	str	r4, [r7, #8]
   2ee2c:	e2855001 	add	r5, r5, #1
   2ee30:	e580c000 	str	ip, [r0]
   2ee34:	1586e00c 	strne	lr, [r6, #12]
   2ee38:	eafffea1 	b	2e8c4 <JSMNR_parse+0x48>
   2ee3c:	e5d48000 	ldrb	r8, [r4]
   2ee40:	e1580007 	cmp	r8, r7
   2ee44:	1a00002c 	bne	2eefc <JSMNR_parse+0x680>
   2ee48:	e28ee001 	add	lr, lr, #1
   2ee4c:	e5806008 	str	r6, [r0, #8]
   2ee50:	e083620c 	add	r6, r3, ip, lsl #4
   2ee54:	e584e008 	str	lr, [r4, #8]
   2ee58:	e596e004 	ldr	lr, [r6, #4]
   2ee5c:	e37e0001 	cmn	lr, #1
   2ee60:	0a000002 	beq	2ee70 <JSMNR_parse+0x5f4>
   2ee64:	e596e008 	ldr	lr, [r6, #8]
   2ee68:	e37e0001 	cmn	lr, #1
   2ee6c:	0a000005 	beq	2ee88 <JSMNR_parse+0x60c>
   2ee70:	e24cc001 	sub	ip, ip, #1
   2ee74:	e37c0001 	cmn	ip, #1
   2ee78:	e2466010 	sub	r6, r6, #16
   2ee7c:	1afffff5 	bne	2ee58 <JSMNR_parse+0x5dc>
   2ee80:	e590c000 	ldr	ip, [r0]
   2ee84:	eaffff35 	b	2eb60 <JSMNR_parse+0x2e4>
   2ee88:	e580c008 	str	ip, [r0, #8]
   2ee8c:	e590c000 	ldr	ip, [r0]
   2ee90:	eafffe8b 	b	2e8c4 <JSMNR_parse+0x48>
   2ee94:	e3530000 	cmp	r3, #0
   2ee98:	0a000014 	beq	2eef0 <JSMNR_parse+0x674>
   2ee9c:	e5906004 	ldr	r6, [r0, #4]
   2eea0:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   2eea4:	e1540006 	cmp	r4, r6
   2eea8:	9affffc9 	bls	2edd4 <JSMNR_parse+0x558>
   2eeac:	e3a08003 	mov	r8, #3
   2eeb0:	e590e008 	ldr	lr, [r0, #8]
   2eeb4:	e2864001 	add	r4, r6, #1
   2eeb8:	e5804004 	str	r4, [r0, #4]
   2eebc:	e37e0001 	cmn	lr, #1
   2eec0:	e0834206 	add	r4, r3, r6, lsl #4
   2eec4:	e7c38206 	strb	r8, [r3, r6, lsl #4]
   2eec8:	e2855001 	add	r5, r5, #1
   2eecc:	e9841080 	stmib	r4, {r7, ip}
   2eed0:	e584b00c 	str	fp, [r4, #12]
   2eed4:	0affff20 	beq	2eb5c <JSMNR_parse+0x2e0>
   2eed8:	e083e20e 	add	lr, r3, lr, lsl #4
   2eedc:	e59e400c 	ldr	r4, [lr, #12]
   2eee0:	e590c000 	ldr	ip, [r0]
   2eee4:	e2844001 	add	r4, r4, #1
   2eee8:	e58e400c 	str	r4, [lr, #12]
   2eeec:	eafffe74 	b	2e8c4 <JSMNR_parse+0x48>
   2eef0:	e2855001 	add	r5, r5, #1
   2eef4:	e590c000 	ldr	ip, [r0]
   2eef8:	eafffe71 	b	2e8c4 <JSMNR_parse+0x48>
   2eefc:	e3e05001 	mvn	r5, #1
   2ef00:	eaffff11 	b	2eb4c <JSMNR_parse+0x2d0>
   2ef04:	00046158 	.word	0x00046158

0002ef08 <MiniHDLC::~MiniHDLC()>:
   2ef08:	e12fff1e 	bx	lr

0002ef0c <MiniHDLC::~MiniHDLC()>:
   2ef0c:	e92d4010 	push	{r4, lr}
   2ef10:	e1a04000 	mov	r4, r0
   2ef14:	e59f1008 	ldr	r1, [pc, #8]	; 2ef24 <MiniHDLC::~MiniHDLC()+0x18>
   2ef18:	ebfff067 	bl	2b0bc <operator delete(void*, unsigned int)>
   2ef1c:	e1a00004 	mov	r0, r4
   2ef20:	e8bd8010 	pop	{r4, pc}
   2ef24:	00004e6c 	.word	0x00004e6c

0002ef28 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]>:
   2ef28:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2ef2c:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   2ef30:	e59de01c 	ldr	lr, [sp, #28]
   2ef34:	e3560000 	cmp	r6, #0
   2ef38:	e59d8020 	ldr	r8, [sp, #32]
   2ef3c:	0a00001d 	beq	2efb8 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x90>
   2ef40:	e28ec002 	add	ip, lr, #2
   2ef44:	e152000c 	cmp	r2, ip
   2ef48:	859f9074 	ldrhi	r9, [pc, #116]	; 2efc4 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x9c>
   2ef4c:	8a00000b 	bhi	2ef80 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x58>
   2ef50:	ea000018 	b	2efb8 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x90>
   2ef54:	e5d05004 	ldrb	r5, [r0, #4]
   2ef58:	e155000c 	cmp	r5, ip
   2ef5c:	0a000011 	beq	2efa8 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x80>
   2ef60:	e2566001 	subs	r6, r6, #1
   2ef64:	e7c1c00e 	strb	ip, [r1, lr]
   2ef68:	e28e4003 	add	r4, lr, #3
   2ef6c:	e28ec001 	add	ip, lr, #1
   2ef70:	0a000011 	beq	2efbc <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x94>
   2ef74:	e1540002 	cmp	r4, r2
   2ef78:	e1a0e00c 	mov	lr, ip
   2ef7c:	2a00000e 	bcs	2efbc <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x94>
   2ef80:	e4d8c001 	ldrb	ip, [r8], #1
   2ef84:	e1d370b0 	ldrh	r7, [r3]
   2ef88:	e02c5427 	eor	r5, ip, r7, lsr #8
   2ef8c:	e1a05085 	lsl	r5, r5, #1
   2ef90:	e19940b5 	ldrh	r4, [r9, r5]
   2ef94:	e0244407 	eor	r4, r4, r7, lsl #8
   2ef98:	e1c340b0 	strh	r4, [r3]
   2ef9c:	e5d04005 	ldrb	r4, [r0, #5]
   2efa0:	e15c0004 	cmp	ip, r4
   2efa4:	1affffea 	bne	2ef54 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x2c>
   2efa8:	e7c1400e 	strb	r4, [r1, lr]
   2efac:	e22cc020 	eor	ip, ip, #32
   2efb0:	e28ee001 	add	lr, lr, #1
   2efb4:	eaffffe9 	b	2ef60 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x38>
   2efb8:	e1a0c00e 	mov	ip, lr
   2efbc:	e1a0000c 	mov	r0, ip
   2efc0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2efc4:	0004616c 	.word	0x0004616c

0002efc8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]>:
   2efc8:	e92d4070 	push	{r4, r5, r6, lr}
   2efcc:	e1d330b0 	ldrh	r3, [r3]
   2efd0:	e5d0e007 	ldrb	lr, [r0, #7]
   2efd4:	e59d4010 	ldr	r4, [sp, #16]
   2efd8:	e35e0000 	cmp	lr, #0
   2efdc:	e6efc073 	uxtb	ip, r3
   2efe0:	e1a03423 	lsr	r3, r3, #8
   2efe4:	11a0e003 	movne	lr, r3
   2efe8:	01a05003 	moveq	r5, r3
   2efec:	e2843002 	add	r3, r4, #2
   2eff0:	01a0e00c 	moveq	lr, ip
   2eff4:	11a0500c 	movne	r5, ip
   2eff8:	e1530002 	cmp	r3, r2
   2effc:	2a000018 	bcs	2f064 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x9c>
   2f000:	e5d02005 	ldrb	r2, [r0, #5]
   2f004:	e1a03005 	mov	r3, r5
   2f008:	e152000e 	cmp	r2, lr
   2f00c:	0a000010 	beq	2f054 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x8c>
   2f010:	e5d06004 	ldrb	r6, [r0, #4]
   2f014:	e1a0c00e 	mov	ip, lr
   2f018:	e156000e 	cmp	r6, lr
   2f01c:	0a00000c 	beq	2f054 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x8c>
   2f020:	e7c1c004 	strb	ip, [r1, r4]
   2f024:	e5d0c005 	ldrb	ip, [r0, #5]
   2f028:	e2842001 	add	r2, r4, #1
   2f02c:	e15c0005 	cmp	ip, r5
   2f030:	0a00000d 	beq	2f06c <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0xa4>
   2f034:	e5d0e004 	ldrb	lr, [r0, #4]
   2f038:	e15e0005 	cmp	lr, r5
   2f03c:	0a00000a 	beq	2f06c <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0xa4>
   2f040:	e7e13002 	strb	r3, [r1, r2]!
   2f044:	e5d03004 	ldrb	r3, [r0, #4]
   2f048:	e2820002 	add	r0, r2, #2
   2f04c:	e5c13001 	strb	r3, [r1, #1]
   2f050:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f054:	e7c12004 	strb	r2, [r1, r4]
   2f058:	e22ec020 	eor	ip, lr, #32
   2f05c:	e2844001 	add	r4, r4, #1
   2f060:	eaffffee 	b	2f020 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x58>
   2f064:	e3a00000 	mov	r0, #0
   2f068:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f06c:	e7c1c002 	strb	ip, [r1, r2]
   2f070:	e2253020 	eor	r3, r5, #32
   2f074:	e2842002 	add	r2, r4, #2
   2f078:	eafffff0 	b	2f040 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x78>

0002f07c <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)>:
   2f07c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2f080:	e59fe09c 	ldr	lr, [pc, #156]	; 2f124 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xa8>
   2f084:	e59f509c 	ldr	r5, [pc, #156]	; 2f128 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xac>
   2f088:	e580e000 	str	lr, [r0]
   2f08c:	e59fe098 	ldr	lr, [pc, #152]	; 2f12c <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb0>
   2f090:	e2807901 	add	r7, r0, #16384	; 0x4000
   2f094:	e2804a02 	add	r4, r0, #8192	; 0x2000
   2f098:	e3a0c000 	mov	ip, #0
   2f09c:	e580501c 	str	r5, [r0, #28]
   2f0a0:	e3e06000 	mvn	r6, #0
   2f0a4:	e5845738 	str	r5, [r4, #1848]	; 0x738
   2f0a8:	e584e730 	str	lr, [r4, #1840]	; 0x730
   2f0ac:	e587ee4c 	str	lr, [r7, #3660]	; 0xe4c
   2f0b0:	e1a0e007 	mov	lr, r7
   2f0b4:	e59f5074 	ldr	r5, [pc, #116]	; 2f130 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb4>
   2f0b8:	e5875e50 	str	r5, [r7, #3664]	; 0xe50
   2f0bc:	e5dd5014 	ldrb	r5, [sp, #20]
   2f0c0:	e58ece5c 	str	ip, [lr, #3676]	; 0xe5c
   2f0c4:	e58ece60 	str	ip, [lr, #3680]	; 0xe60
   2f0c8:	e58ece64 	str	ip, [lr, #3684]	; 0xe64
   2f0cc:	e58ece68 	str	ip, [lr, #3688]	; 0xe68
   2f0d0:	e5dd7018 	ldrb	r7, [sp, #24]
   2f0d4:	e1c060bc 	strh	r6, [r0, #12]
   2f0d8:	e580c008 	str	ip, [r0, #8]
   2f0dc:	e5c0c00e 	strb	ip, [r0, #14]
   2f0e0:	e5c0c00f 	strb	ip, [r0, #15]
   2f0e4:	e5c0c010 	strb	ip, [r0, #16]
   2f0e8:	e580c014 	str	ip, [r0, #20]
   2f0ec:	e580c018 	str	ip, [r0, #24]
   2f0f0:	e5dd601c 	ldrb	r6, [sp, #28]
   2f0f4:	e58ece54 	str	ip, [lr, #3668]	; 0xe54
   2f0f8:	e58ece58 	str	ip, [lr, #3672]	; 0xe58
   2f0fc:	e5c05004 	strb	r5, [r0, #4]
   2f100:	e59fe02c 	ldr	lr, [pc, #44]	; 2f134 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb8>
   2f104:	e5dd5020 	ldrb	r5, [sp, #32]
   2f108:	e5c07005 	strb	r7, [r0, #5]
   2f10c:	e5c06007 	strb	r6, [r0, #7]
   2f110:	e5c05006 	strb	r5, [r0, #6]
   2f114:	e58ec000 	str	ip, [lr]
   2f118:	e5841734 	str	r1, [r4, #1844]	; 0x734
   2f11c:	e58e3004 	str	r3, [lr, #4]
   2f120:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2f124:	00046374 	.word	0x00046374
   2f128:	0003ee0c 	.word	0x0003ee0c
   2f12c:	00002710 	.word	0x00002710
   2f130:	00001388 	.word	0x00001388
   2f134:	0004e2e4 	.word	0x0004e2e4

0002f138 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)>:
   2f138:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2f13c:	e59f409c 	ldr	r4, [pc, #156]	; 2f1e0 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xa8>
   2f140:	e59f609c 	ldr	r6, [pc, #156]	; 2f1e4 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xac>
   2f144:	e5804000 	str	r4, [r0]
   2f148:	e59f4098 	ldr	r4, [pc, #152]	; 2f1e8 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xb0>
   2f14c:	e2805a02 	add	r5, r0, #8192	; 0x2000
   2f150:	e2808901 	add	r8, r0, #16384	; 0x4000
   2f154:	e3a0e000 	mov	lr, #0
   2f158:	e580601c 	str	r6, [r0, #28]
   2f15c:	e3e07000 	mvn	r7, #0
   2f160:	e5856738 	str	r6, [r5, #1848]	; 0x738
   2f164:	e5854730 	str	r4, [r5, #1840]	; 0x730
   2f168:	e5884e4c 	str	r4, [r8, #3660]	; 0xe4c
   2f16c:	e1a04008 	mov	r4, r8
   2f170:	e5dd901c 	ldrb	r9, [sp, #28]
   2f174:	e584ee5c 	str	lr, [r4, #3676]	; 0xe5c
   2f178:	e584ee60 	str	lr, [r4, #3680]	; 0xe60
   2f17c:	e584ee64 	str	lr, [r4, #3684]	; 0xe64
   2f180:	e584ee68 	str	lr, [r4, #3688]	; 0xe68
   2f184:	e5dd8028 	ldrb	r8, [sp, #40]	; 0x28
   2f188:	e580e008 	str	lr, [r0, #8]
   2f18c:	e5c0e00e 	strb	lr, [r0, #14]
   2f190:	e5c0e00f 	strb	lr, [r0, #15]
   2f194:	e5c0e010 	strb	lr, [r0, #16]
   2f198:	e580e014 	str	lr, [r0, #20]
   2f19c:	e580e018 	str	lr, [r0, #24]
   2f1a0:	e1c070bc 	strh	r7, [r0, #12]
   2f1a4:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   2f1a8:	e584ee54 	str	lr, [r4, #3668]	; 0xe54
   2f1ac:	e584ee58 	str	lr, [r4, #3672]	; 0xe58
   2f1b0:	e5dd702c 	ldrb	r7, [sp, #44]	; 0x2c
   2f1b4:	e5c03004 	strb	r3, [r0, #4]
   2f1b8:	e59de020 	ldr	lr, [sp, #32]
   2f1bc:	e59f3028 	ldr	r3, [pc, #40]	; 2f1ec <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xb4>
   2f1c0:	e5c09005 	strb	r9, [r0, #5]
   2f1c4:	e5c08007 	strb	r8, [r0, #7]
   2f1c8:	e5c07006 	strb	r7, [r0, #6]
   2f1cc:	e5831000 	str	r1, [r3]
   2f1d0:	e5856734 	str	r6, [r5, #1844]	; 0x734
   2f1d4:	e5832004 	str	r2, [r3, #4]
   2f1d8:	e584ee50 	str	lr, [r4, #3664]	; 0xe50
   2f1dc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f1e0:	00046374 	.word	0x00046374
   2f1e4:	0003ee0c 	.word	0x0003ee0c
   2f1e8:	00002710 	.word	0x00002710
   2f1ec:	0004e2e4 	.word	0x0004e2e4

0002f1f0 <MiniHDLC::clear()>:
   2f1f0:	e3a03000 	mov	r3, #0
   2f1f4:	e92d4010 	push	{r4, lr}
   2f1f8:	e3e0e000 	mvn	lr, #0
   2f1fc:	e59f1048 	ldr	r1, [pc, #72]	; 2f24c <MiniHDLC::clear()+0x5c>
   2f200:	e59fc048 	ldr	ip, [pc, #72]	; 2f250 <MiniHDLC::clear()+0x60>
   2f204:	e2802901 	add	r2, r0, #16384	; 0x4000
   2f208:	e2804a02 	add	r4, r0, #8192	; 0x2000
   2f20c:	e5c03007 	strb	r3, [r0, #7]
   2f210:	e5c03006 	strb	r3, [r0, #6]
   2f214:	e58c3004 	str	r3, [ip, #4]
   2f218:	e5841734 	str	r1, [r4, #1844]	; 0x734
   2f21c:	e58c3000 	str	r3, [ip]
   2f220:	e5821e50 	str	r1, [r2, #3664]	; 0xe50
   2f224:	e5803008 	str	r3, [r0, #8]
   2f228:	e5c0300e 	strb	r3, [r0, #14]
   2f22c:	e5c0300f 	strb	r3, [r0, #15]
   2f230:	e5c03010 	strb	r3, [r0, #16]
   2f234:	e5803014 	str	r3, [r0, #20]
   2f238:	e5803018 	str	r3, [r0, #24]
   2f23c:	e1c0e0bc 	strh	lr, [r0, #12]
   2f240:	e5823e54 	str	r3, [r2, #3668]	; 0xe54
   2f244:	e5823e58 	str	r3, [r2, #3672]	; 0xe58
   2f248:	e8bd8010 	pop	{r4, pc}
   2f24c:	00001388 	.word	0x00001388
   2f250:	0004e2e4 	.word	0x0004e2e4

0002f254 <MiniHDLC::handleChar(unsigned char)>:
   2f254:	e92d4070 	push	{r4, r5, r6, lr}
   2f258:	e5d03004 	ldrb	r3, [r0, #4]
   2f25c:	e24dd010 	sub	sp, sp, #16
   2f260:	e1530001 	cmp	r3, r1
   2f264:	e1a04000 	mov	r4, r0
   2f268:	0a000035 	beq	2f344 <MiniHDLC::handleChar(unsigned char)+0xf0>
   2f26c:	e5d0300e 	ldrb	r3, [r0, #14]
   2f270:	e3530000 	cmp	r3, #0
   2f274:	1a00001a 	bne	2f2e4 <MiniHDLC::handleChar(unsigned char)+0x90>
   2f278:	e5d03005 	ldrb	r3, [r0, #5]
   2f27c:	e1530001 	cmp	r3, r1
   2f280:	03a03001 	moveq	r3, #1
   2f284:	05c0300e 	strbeq	r3, [r0, #14]
   2f288:	0a000013 	beq	2f2dc <MiniHDLC::handleChar(unsigned char)+0x88>
   2f28c:	e2842a02 	add	r2, r4, #8192	; 0x2000
   2f290:	e5920730 	ldr	r0, [r2, #1840]	; 0x730
   2f294:	e5943008 	ldr	r3, [r4, #8]
   2f298:	e1530000 	cmp	r3, r0
   2f29c:	3a000014 	bcc	2f2f4 <MiniHDLC::handleChar(unsigned char)+0xa0>
   2f2a0:	e3a00000 	mov	r0, #0
   2f2a4:	e3e01000 	mvn	r1, #0
   2f2a8:	e5922734 	ldr	r2, [r2, #1844]	; 0x734
   2f2ac:	e1530002 	cmp	r3, r2
   2f2b0:	e2842901 	add	r2, r4, #16384	; 0x4000
   2f2b4:	25923e64 	ldrcs	r3, [r2, #3684]	; 0xe64
   2f2b8:	35923e68 	ldrcc	r3, [r2, #3688]	; 0xe68
   2f2bc:	22833001 	addcs	r3, r3, #1
   2f2c0:	32833001 	addcc	r3, r3, #1
   2f2c4:	25840008 	strcs	r0, [r4, #8]
   2f2c8:	21c410bc 	strhcs	r1, [r4, #12]
   2f2cc:	35840008 	strcc	r0, [r4, #8]
   2f2d0:	31c410bc 	strhcc	r1, [r4, #12]
   2f2d4:	25823e64 	strcs	r3, [r2, #3684]	; 0xe64
   2f2d8:	35823e68 	strcc	r3, [r2, #3688]	; 0xe68
   2f2dc:	e28dd010 	add	sp, sp, #16
   2f2e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f2e4:	e3a03000 	mov	r3, #0
   2f2e8:	e2211020 	eor	r1, r1, #32
   2f2ec:	e5c0300e 	strb	r3, [r0, #14]
   2f2f0:	eaffffe5 	b	2f28c <MiniHDLC::handleChar(unsigned char)+0x38>
   2f2f4:	e0842003 	add	r2, r4, r3
   2f2f8:	e3530001 	cmp	r3, #1
   2f2fc:	e5c21020 	strb	r1, [r2, #32]
   2f300:	9a00000b 	bls	2f334 <MiniHDLC::handleChar(unsigned char)+0xe0>
   2f304:	e2431002 	sub	r1, r3, #2
   2f308:	e1510000 	cmp	r1, r0
   2f30c:	23a02000 	movcs	r2, #0
   2f310:	30841001 	addcc	r1, r4, r1
   2f314:	e1d400bc 	ldrh	r0, [r4, #12]
   2f318:	35d12020 	ldrbcc	r2, [r1, #32]
   2f31c:	e59f11b4 	ldr	r1, [pc, #436]	; 2f4d8 <MiniHDLC::handleChar(unsigned char)+0x284>
   2f320:	e0222420 	eor	r2, r2, r0, lsr #8
   2f324:	e1a02082 	lsl	r2, r2, #1
   2f328:	e19120b2 	ldrh	r2, [r1, r2]
   2f32c:	e0222400 	eor	r2, r2, r0, lsl #8
   2f330:	e1c420bc 	strh	r2, [r4, #12]
   2f334:	e2833001 	add	r3, r3, #1
   2f338:	e5843008 	str	r3, [r4, #8]
   2f33c:	e28dd010 	add	sp, sp, #16
   2f340:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f344:	e5900008 	ldr	r0, [r0, #8]
   2f348:	e3500001 	cmp	r0, #1
   2f34c:	9a00005d 	bls	2f4c8 <MiniHDLC::handleChar(unsigned char)+0x274>
   2f350:	e5d43007 	ldrb	r3, [r4, #7]
   2f354:	e3530000 	cmp	r3, #0
   2f358:	1a00003f 	bne	2f45c <MiniHDLC::handleChar(unsigned char)+0x208>
   2f35c:	e2842a02 	add	r2, r4, #8192	; 0x2000
   2f360:	e592c730 	ldr	ip, [r2, #1840]	; 0x730
   2f364:	e2401002 	sub	r1, r0, #2
   2f368:	e151000c 	cmp	r1, ip
   2f36c:	30843001 	addcc	r3, r4, r1
   2f370:	35d33020 	ldrbcc	r3, [r3, #32]
   2f374:	e2402001 	sub	r2, r0, #1
   2f378:	e15c0002 	cmp	ip, r2
   2f37c:	e6bf5073 	sxth	r5, r3
   2f380:	9a000052 	bls	2f4d0 <MiniHDLC::handleChar(unsigned char)+0x27c>
   2f384:	e0843002 	add	r3, r4, r2
   2f388:	e5d33020 	ldrb	r3, [r3, #32]
   2f38c:	e1a03403 	lsl	r3, r3, #8
   2f390:	e1855003 	orr	r5, r5, r3
   2f394:	e1d430bc 	ldrh	r3, [r4, #12]
   2f398:	e1530005 	cmp	r3, r5
   2f39c:	0a00003d 	beq	2f498 <MiniHDLC::handleChar(unsigned char)+0x244>
   2f3a0:	e35c0000 	cmp	ip, #0
   2f3a4:	0a00001e 	beq	2f424 <MiniHDLC::handleChar(unsigned char)+0x1d0>
   2f3a8:	e5d43020 	ldrb	r3, [r4, #32]
   2f3ac:	e3530000 	cmp	r3, #0
   2f3b0:	0a00001b 	beq	2f424 <MiniHDLC::handleChar(unsigned char)+0x1d0>
   2f3b4:	e2846020 	add	r6, r4, #32
   2f3b8:	e1a02006 	mov	r2, r6
   2f3bc:	e3a03001 	mov	r3, #1
   2f3c0:	ea000007 	b	2f3e4 <MiniHDLC::handleChar(unsigned char)+0x190>
   2f3c4:	e5f21001 	ldrb	r1, [r2, #1]!
   2f3c8:	e3510000 	cmp	r1, #0
   2f3cc:	0a000006 	beq	2f3ec <MiniHDLC::handleChar(unsigned char)+0x198>
   2f3d0:	e2833001 	add	r3, r3, #1
   2f3d4:	e1500003 	cmp	r0, r3
   2f3d8:	0a000011 	beq	2f424 <MiniHDLC::handleChar(unsigned char)+0x1d0>
   2f3dc:	e35300c8 	cmp	r3, #200	; 0xc8
   2f3e0:	0a00000f 	beq	2f424 <MiniHDLC::handleChar(unsigned char)+0x1d0>
   2f3e4:	e153000c 	cmp	r3, ip
   2f3e8:	1afffff5 	bne	2f3c4 <MiniHDLC::handleChar(unsigned char)+0x170>
   2f3ec:	e2433001 	sub	r3, r3, #1
   2f3f0:	e35300c6 	cmp	r3, #198	; 0xc6
   2f3f4:	8a00000a 	bhi	2f424 <MiniHDLC::handleChar(unsigned char)+0x1d0>
   2f3f8:	ebffddf7 	bl	26bdc <CLogger::Get()>
   2f3fc:	e1d420bc 	ldrh	r2, [r4, #12]
   2f400:	e5943008 	ldr	r3, [r4, #8]
   2f404:	e59f10d0 	ldr	r1, [pc, #208]	; 2f4dc <MiniHDLC::handleChar(unsigned char)+0x288>
   2f408:	e58d2008 	str	r2, [sp, #8]
   2f40c:	e58d3000 	str	r3, [sp]
   2f410:	e58d600c 	str	r6, [sp, #12]
   2f414:	e58d5004 	str	r5, [sp, #4]
   2f418:	e59f30c0 	ldr	r3, [pc, #192]	; 2f4e0 <MiniHDLC::handleChar(unsigned char)+0x28c>
   2f41c:	e3a02003 	mov	r2, #3
   2f420:	ebffdd2a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2f424:	e2843901 	add	r3, r4, #16384	; 0x4000
   2f428:	e5932e60 	ldr	r2, [r3, #3680]	; 0xe60
   2f42c:	e2822001 	add	r2, r2, #1
   2f430:	e5832e60 	str	r2, [r3, #3680]	; 0xe60
   2f434:	e3a01000 	mov	r1, #0
   2f438:	e3e00000 	mvn	r0, #0
   2f43c:	e5932e5c 	ldr	r2, [r3, #3676]	; 0xe5c
   2f440:	e5c4100e 	strb	r1, [r4, #14]
   2f444:	e2822001 	add	r2, r2, #1
   2f448:	e5841008 	str	r1, [r4, #8]
   2f44c:	e1c400bc 	strh	r0, [r4, #12]
   2f450:	e5832e5c 	str	r2, [r3, #3676]	; 0xe5c
   2f454:	e28dd010 	add	sp, sp, #16
   2f458:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f45c:	e2843a02 	add	r3, r4, #8192	; 0x2000
   2f460:	e593c730 	ldr	ip, [r3, #1840]	; 0x730
   2f464:	e2402001 	sub	r2, r0, #1
   2f468:	e152000c 	cmp	r2, ip
   2f46c:	23a05000 	movcs	r5, #0
   2f470:	30843002 	addcc	r3, r4, r2
   2f474:	35d35020 	ldrbcc	r5, [r3, #32]
   2f478:	e2401002 	sub	r1, r0, #2
   2f47c:	e15c0001 	cmp	ip, r1
   2f480:	e6bf5075 	sxth	r5, r5
   2f484:	9a000011 	bls	2f4d0 <MiniHDLC::handleChar(unsigned char)+0x27c>
   2f488:	e0843001 	add	r3, r4, r1
   2f48c:	e5d33020 	ldrb	r3, [r3, #32]
   2f490:	e1a03403 	lsl	r3, r3, #8
   2f494:	eaffffbd 	b	2f390 <MiniHDLC::handleChar(unsigned char)+0x13c>
   2f498:	e152000c 	cmp	r2, ip
   2f49c:	8a000009 	bhi	2f4c8 <MiniHDLC::handleChar(unsigned char)+0x274>
   2f4a0:	e151000c 	cmp	r1, ip
   2f4a4:	33a02000 	movcc	r2, #0
   2f4a8:	30843001 	addcc	r3, r4, r1
   2f4ac:	35c32020 	strbcc	r2, [r3, #32]
   2f4b0:	e59f302c 	ldr	r3, [pc, #44]	; 2f4e4 <MiniHDLC::handleChar(unsigned char)+0x290>
   2f4b4:	e5933004 	ldr	r3, [r3, #4]
   2f4b8:	e3530000 	cmp	r3, #0
   2f4bc:	0a000001 	beq	2f4c8 <MiniHDLC::handleChar(unsigned char)+0x274>
   2f4c0:	e2840020 	add	r0, r4, #32
   2f4c4:	e12fff33 	blx	r3
   2f4c8:	e2843901 	add	r3, r4, #16384	; 0x4000
   2f4cc:	eaffffd8 	b	2f434 <MiniHDLC::handleChar(unsigned char)+0x1e0>
   2f4d0:	e3a03000 	mov	r3, #0
   2f4d4:	eaffffad 	b	2f390 <MiniHDLC::handleChar(unsigned char)+0x13c>
   2f4d8:	0004616c 	.word	0x0004616c
   2f4dc:	000463bc 	.word	0x000463bc
   2f4e0:	0004637c 	.word	0x0004637c
   2f4e4:	0004e2e4 	.word	0x0004e2e4

0002f4e8 <MiniHDLC::handleBit(unsigned char)>:
   2f4e8:	e3510000 	cmp	r1, #0
   2f4ec:	13e0207f 	mvnne	r2, #127	; 0x7f
   2f4f0:	03a02000 	moveq	r2, #0
   2f4f4:	e5d0300f 	ldrb	r3, [r0, #15]
   2f4f8:	e5d01004 	ldrb	r1, [r0, #4]
   2f4fc:	e18230a3 	orr	r3, r2, r3, lsr #1
   2f500:	e6ef3073 	uxtb	r3, r3
   2f504:	e1510003 	cmp	r1, r3
   2f508:	e92d4010 	push	{r4, lr}
   2f50c:	e5c0300f 	strb	r3, [r0, #15]
   2f510:	e1a04000 	mov	r4, r0
   2f514:	0a00000b 	beq	2f548 <MiniHDLC::handleBit(unsigned char)+0x60>
   2f518:	e20330fc 	and	r3, r3, #252	; 0xfc
   2f51c:	e353007c 	cmp	r3, #124	; 0x7c
   2f520:	08bd8010 	popeq	{r4, pc}
   2f524:	e5d01010 	ldrb	r1, [r0, #16]
   2f528:	e5903014 	ldr	r3, [r0, #20]
   2f52c:	e18210a1 	orr	r1, r2, r1, lsr #1
   2f530:	e2833001 	add	r3, r3, #1
   2f534:	e6ef1071 	uxtb	r1, r1
   2f538:	e3530008 	cmp	r3, #8
   2f53c:	e5c01010 	strb	r1, [r0, #16]
   2f540:	e5803014 	str	r3, [r0, #20]
   2f544:	18bd8010 	popne	{r4, pc}
   2f548:	ebffff41 	bl	2f254 <MiniHDLC::handleChar(unsigned char)>
   2f54c:	e3a03000 	mov	r3, #0
   2f550:	e5c43010 	strb	r3, [r4, #16]
   2f554:	e5843014 	str	r3, [r4, #20]
   2f558:	e8bd8010 	pop	{r4, pc}

0002f55c <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)>:
   2f55c:	e92d4070 	push	{r4, r5, r6, lr}
   2f560:	e2525000 	subs	r5, r2, #0
   2f564:	08bd8070 	popeq	{r4, r5, r6, pc}
   2f568:	e1a06000 	mov	r6, r0
   2f56c:	e1a04001 	mov	r4, r1
   2f570:	e0815005 	add	r5, r1, r5
   2f574:	e4d41001 	ldrb	r1, [r4], #1
   2f578:	e1a00006 	mov	r0, r6
   2f57c:	ebffff34 	bl	2f254 <MiniHDLC::handleChar(unsigned char)>
   2f580:	e1540005 	cmp	r4, r5
   2f584:	1afffffa 	bne	2f574 <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)+0x18>
   2f588:	e8bd8070 	pop	{r4, r5, r6, pc}

0002f58c <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)>:
   2f58c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2f590:	e3e0e000 	mvn	lr, #0
   2f594:	e24dd01c 	sub	sp, sp, #28
   2f598:	e3520003 	cmp	r2, #3
   2f59c:	e1cde1b6 	strh	lr, [sp, #22]
   2f5a0:	9a000010 	bls	2f5e8 <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)+0x5c>
   2f5a4:	e3a0e001 	mov	lr, #1
   2f5a8:	e5d0c004 	ldrb	ip, [r0, #4]
   2f5ac:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   2f5b0:	e58de000 	str	lr, [sp]
   2f5b4:	e98d0088 	stmib	sp, {r3, r7}
   2f5b8:	e5c1c000 	strb	ip, [r1]
   2f5bc:	e28d3016 	add	r3, sp, #22
   2f5c0:	e1a05000 	mov	r5, r0
   2f5c4:	ebfffe57 	bl	2ef28 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]>
   2f5c8:	e3500000 	cmp	r0, #0
   2f5cc:	0a000005 	beq	2f5e8 <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)+0x5c>
   2f5d0:	e58d0000 	str	r0, [sp]
   2f5d4:	e28d3016 	add	r3, sp, #22
   2f5d8:	e1a00005 	mov	r0, r5
   2f5dc:	ebfffe79 	bl	2efc8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]>
   2f5e0:	e28dd01c 	add	sp, sp, #28
   2f5e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2f5e8:	e3a00000 	mov	r0, #0
   2f5ec:	e28dd01c 	add	sp, sp, #28
   2f5f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002f5f4 <MiniHDLC::encodeFrameStart(unsigned char*, unsigned long, unsigned short&)>:
   2f5f4:	e3e0c000 	mvn	ip, #0
   2f5f8:	e3520003 	cmp	r2, #3
   2f5fc:	e1c3c0b0 	strh	ip, [r3]
   2f600:	85d03004 	ldrbhi	r3, [r0, #4]
   2f604:	83a00001 	movhi	r0, #1
   2f608:	85c13000 	strbhi	r3, [r1]
   2f60c:	93a00000 	movls	r0, #0
   2f610:	e12fff1e 	bx	lr

0002f614 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long)>:
   2f614:	e92d4010 	push	{r4, lr}
   2f618:	e59dc008 	ldr	ip, [sp, #8]
   2f61c:	e59de00c 	ldr	lr, [sp, #12]
   2f620:	e35c0000 	cmp	ip, #0
   2f624:	e59d4010 	ldr	r4, [sp, #16]
   2f628:	0a000001 	beq	2f634 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long)+0x20>
   2f62c:	e8bd4010 	pop	{r4, lr}
   2f630:	eafffe3c 	b	2ef28 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]>
   2f634:	e1a0000c 	mov	r0, ip
   2f638:	e8bd8010 	pop	{r4, pc}

0002f63c <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long)>:
   2f63c:	e59dc000 	ldr	ip, [sp]
   2f640:	e35c0000 	cmp	ip, #0
   2f644:	0a000000 	beq	2f64c <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long)+0x10>
   2f648:	eafffe5e 	b	2efc8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]>
   2f64c:	e1a0000c 	mov	r0, ip
   2f650:	e12fff1e 	bx	lr

0002f654 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)>:
   2f654:	e3520000 	cmp	r2, #0
   2f658:	0a000011 	beq	2f6a4 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x50>
   2f65c:	e92d4010 	push	{r4, lr}
   2f660:	e1a04000 	mov	r4, r0
   2f664:	e1a00002 	mov	r0, r2
   2f668:	e5d4e004 	ldrb	lr, [r4, #4]
   2f66c:	e0812002 	add	r2, r1, r2
   2f670:	ea000004 	b	2f688 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x34>
   2f674:	e5d4c005 	ldrb	ip, [r4, #5]
   2f678:	e15c0003 	cmp	ip, r3
   2f67c:	0a000004 	beq	2f694 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x40>
   2f680:	e1510002 	cmp	r1, r2
   2f684:	0a000005 	beq	2f6a0 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x4c>
   2f688:	e4d13001 	ldrb	r3, [r1], #1
   2f68c:	e15e0003 	cmp	lr, r3
   2f690:	1afffff7 	bne	2f674 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x20>
   2f694:	e1510002 	cmp	r1, r2
   2f698:	e2800001 	add	r0, r0, #1
   2f69c:	1afffff9 	bne	2f688 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x34>
   2f6a0:	e8bd8010 	pop	{r4, pc}
   2f6a4:	e1a00002 	mov	r0, r2
   2f6a8:	e12fff1e 	bx	lr

0002f6ac <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
   2f6ac:	e0211420 	eor	r1, r1, r0, lsr #8
   2f6b0:	e59f3010 	ldr	r3, [pc, #16]	; 2f6c8 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
   2f6b4:	e1a01081 	lsl	r1, r1, #1
   2f6b8:	e19330b1 	ldrh	r3, [r3, r1]
   2f6bc:	e0230400 	eor	r0, r3, r0, lsl #8
   2f6c0:	e6ff0070 	uxth	r0, r0
   2f6c4:	e12fff1e 	bx	lr
   2f6c8:	0004616c 	.word	0x0004616c

0002f6cc <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)>:
   2f6cc:	e3520000 	cmp	r2, #0
   2f6d0:	012fff1e 	bxeq	lr
   2f6d4:	e59fc024 	ldr	ip, [pc, #36]	; 2f700 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)+0x34>
   2f6d8:	e0812002 	add	r2, r1, r2
   2f6dc:	e4d13001 	ldrb	r3, [r1], #1
   2f6e0:	e0233420 	eor	r3, r3, r0, lsr #8
   2f6e4:	e1a03083 	lsl	r3, r3, #1
   2f6e8:	e19c30b3 	ldrh	r3, [ip, r3]
   2f6ec:	e1520001 	cmp	r2, r1
   2f6f0:	e0230400 	eor	r0, r3, r0, lsl #8
   2f6f4:	e6ff0070 	uxth	r0, r0
   2f6f8:	1afffff7 	bne	2f6dc <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)+0x10>
   2f6fc:	e12fff1e 	bx	lr
   2f700:	0004616c 	.word	0x0004616c

0002f704 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)>:
   2f704:	e5d0c005 	ldrb	ip, [r0, #5]
   2f708:	e15c0001 	cmp	ip, r1
   2f70c:	0a000005 	beq	2f728 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x24>
   2f710:	e5d00004 	ldrb	r0, [r0, #4]
   2f714:	e1500001 	cmp	r0, r1
   2f718:	0a000002 	beq	2f728 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x24>
   2f71c:	e7c21003 	strb	r1, [r2, r3]
   2f720:	e2830001 	add	r0, r3, #1
   2f724:	e12fff1e 	bx	lr
   2f728:	e7c2c003 	strb	ip, [r2, r3]
   2f72c:	e2211020 	eor	r1, r1, #32
   2f730:	e2833001 	add	r3, r3, #1
   2f734:	eafffff8 	b	2f71c <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x18>

0002f738 <MiniHDLC::setFrameRxMaxLen(unsigned long)>:
   2f738:	e2800a02 	add	r0, r0, #8192	; 0x2000
   2f73c:	e5801734 	str	r1, [r0, #1844]	; 0x734
   2f740:	e12fff1e 	bx	lr

0002f744 <MiniHDLC::putCharToFrame(unsigned char)>:
   2f744:	e2803901 	add	r3, r0, #16384	; 0x4000
   2f748:	e5932e54 	ldr	r2, [r3, #3668]	; 0xe54
   2f74c:	e593ce50 	ldr	ip, [r3, #3664]	; 0xe50
   2f750:	e152000c 	cmp	r2, ip
   2f754:	2a000017 	bcs	2f7b8 <MiniHDLC::putCharToFrame(unsigned char)+0x74>
   2f758:	e5d0c006 	ldrb	ip, [r0, #6]
   2f75c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2f760:	e35c0000 	cmp	ip, #0
   2f764:	e593ee4c 	ldr	lr, [r3, #3660]	; 0xe4c
   2f768:	0a00000b 	beq	2f79c <MiniHDLC::putCharToFrame(unsigned char)+0x58>
   2f76c:	e593ce58 	ldr	ip, [r3, #3672]	; 0xe58
   2f770:	e35c0000 	cmp	ip, #0
   2f774:	1a000013 	bne	2f7c8 <MiniHDLC::putCharToFrame(unsigned char)+0x84>
   2f778:	e3510000 	cmp	r1, #0
   2f77c:	13a01080 	movne	r1, #128	; 0x80
   2f780:	e152000e 	cmp	r2, lr
   2f784:	32800a02 	addcc	r0, r0, #8192	; 0x2000
   2f788:	30800002 	addcc	r0, r0, r2
   2f78c:	35c0173c 	strbcc	r1, [r0, #1852]	; 0x73c
   2f790:	e3a02001 	mov	r2, #1
   2f794:	e5832e58 	str	r2, [r3, #3672]	; 0xe58
   2f798:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2f79c:	e152000e 	cmp	r2, lr
   2f7a0:	32800a02 	addcc	r0, r0, #8192	; 0x2000
   2f7a4:	e282c001 	add	ip, r2, #1
   2f7a8:	30800002 	addcc	r0, r0, r2
   2f7ac:	e583ce54 	str	ip, [r3, #3668]	; 0xe54
   2f7b0:	35c0173c 	strbcc	r1, [r0, #1852]	; 0x73c
   2f7b4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2f7b8:	e3a02000 	mov	r2, #0
   2f7bc:	e5832e54 	str	r2, [r3, #3668]	; 0xe54
   2f7c0:	e5832e58 	str	r2, [r3, #3672]	; 0xe58
   2f7c4:	e12fff1e 	bx	lr
   2f7c8:	e152000e 	cmp	r2, lr
   2f7cc:	2a000009 	bcs	2f7f8 <MiniHDLC::putCharToFrame(unsigned char)+0xb4>
   2f7d0:	e2800a02 	add	r0, r0, #8192	; 0x2000
   2f7d4:	e080e002 	add	lr, r0, r2
   2f7d8:	e5dee73c 	ldrb	lr, [lr, #1852]	; 0x73c
   2f7dc:	e3510000 	cmp	r1, #0
   2f7e0:	e1a010ce 	asr	r1, lr, #1
   2f7e4:	e6afe071 	sxtb	lr, r1
   2f7e8:	138e1080 	orrne	r1, lr, #128	; 0x80
   2f7ec:	06ef1071 	uxtbeq	r1, r1
   2f7f0:	e0800002 	add	r0, r0, r2
   2f7f4:	e5c0173c 	strb	r1, [r0, #1852]	; 0x73c
   2f7f8:	e28cc001 	add	ip, ip, #1
   2f7fc:	e35c0008 	cmp	ip, #8
   2f800:	03a01000 	moveq	r1, #0
   2f804:	02820001 	addeq	r0, r2, #1
   2f808:	1583ce58 	strne	ip, [r3, #3672]	; 0xe58
   2f80c:	05830e54 	streq	r0, [r3, #3668]	; 0xe54
   2f810:	05831e58 	streq	r1, [r3, #3672]	; 0xe58
   2f814:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002f818 <MiniHDLC::sendChar(unsigned char)>:
   2f818:	e5d03006 	ldrb	r3, [r0, #6]
   2f81c:	e3530000 	cmp	r3, #0
   2f820:	0a00000a 	beq	2f850 <MiniHDLC::sendChar(unsigned char)+0x38>
   2f824:	e92d4070 	push	{r4, r5, r6, lr}
   2f828:	e1a06000 	mov	r6, r0
   2f82c:	e1a04001 	mov	r4, r1
   2f830:	e3a05008 	mov	r5, #8
   2f834:	e2041001 	and	r1, r4, #1
   2f838:	e1a00006 	mov	r0, r6
   2f83c:	ebffffc0 	bl	2f744 <MiniHDLC::putCharToFrame(unsigned char)>
   2f840:	e2555001 	subs	r5, r5, #1
   2f844:	e1a040a4 	lsr	r4, r4, #1
   2f848:	1afffff9 	bne	2f834 <MiniHDLC::sendChar(unsigned char)+0x1c>
   2f84c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f850:	eaffffbb 	b	2f744 <MiniHDLC::putCharToFrame(unsigned char)>

0002f854 <MiniHDLC::sendCharWithStuffing(unsigned char)>:
   2f854:	e5d03006 	ldrb	r3, [r0, #6]
   2f858:	e3530000 	cmp	r3, #0
   2f85c:	0a000019 	beq	2f8c8 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x74>
   2f860:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2f864:	e1a07000 	mov	r7, r0
   2f868:	e1a05001 	mov	r5, r1
   2f86c:	e3a06008 	mov	r6, #8
   2f870:	e3a08000 	mov	r8, #0
   2f874:	e2054001 	and	r4, r5, #1
   2f878:	e1a01004 	mov	r1, r4
   2f87c:	e1a00007 	mov	r0, r7
   2f880:	ebffffaf 	bl	2f744 <MiniHDLC::putCharToFrame(unsigned char)>
   2f884:	e3540000 	cmp	r4, #0
   2f888:	05874018 	streq	r4, [r7, #24]
   2f88c:	0a000004 	beq	2f8a4 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x50>
   2f890:	e5973018 	ldr	r3, [r7, #24]
   2f894:	e2833001 	add	r3, r3, #1
   2f898:	e3530005 	cmp	r3, #5
   2f89c:	e5873018 	str	r3, [r7, #24]
   2f8a0:	0a000003 	beq	2f8b4 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x60>
   2f8a4:	e2566001 	subs	r6, r6, #1
   2f8a8:	e1a050a5 	lsr	r5, r5, #1
   2f8ac:	1afffff0 	bne	2f874 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x20>
   2f8b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2f8b4:	e1a01008 	mov	r1, r8
   2f8b8:	e1a00007 	mov	r0, r7
   2f8bc:	ebffffa0 	bl	2f744 <MiniHDLC::putCharToFrame(unsigned char)>
   2f8c0:	e5878018 	str	r8, [r7, #24]
   2f8c4:	eafffff6 	b	2f8a4 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x50>
   2f8c8:	eaffffd2 	b	2f818 <MiniHDLC::sendChar(unsigned char)>

0002f8cc <MiniHDLC::sendEscaped(unsigned char)>:
   2f8cc:	e92d4070 	push	{r4, r5, r6, lr}
   2f8d0:	e1a04001 	mov	r4, r1
   2f8d4:	e5d01005 	ldrb	r1, [r0, #5]
   2f8d8:	e1a05000 	mov	r5, r0
   2f8dc:	e1510004 	cmp	r1, r4
   2f8e0:	0a000006 	beq	2f900 <MiniHDLC::sendEscaped(unsigned char)+0x34>
   2f8e4:	e5d03004 	ldrb	r3, [r0, #4]
   2f8e8:	e1530004 	cmp	r3, r4
   2f8ec:	0a000003 	beq	2f900 <MiniHDLC::sendEscaped(unsigned char)+0x34>
   2f8f0:	e1a01004 	mov	r1, r4
   2f8f4:	e1a00005 	mov	r0, r5
   2f8f8:	e8bd4070 	pop	{r4, r5, r6, lr}
   2f8fc:	eaffffd4 	b	2f854 <MiniHDLC::sendCharWithStuffing(unsigned char)>
   2f900:	e1a00005 	mov	r0, r5
   2f904:	e2244020 	eor	r4, r4, #32
   2f908:	ebffffd1 	bl	2f854 <MiniHDLC::sendCharWithStuffing(unsigned char)>
   2f90c:	e1a01004 	mov	r1, r4
   2f910:	e1a00005 	mov	r0, r5
   2f914:	e8bd4070 	pop	{r4, r5, r6, lr}
   2f918:	eaffffcd 	b	2f854 <MiniHDLC::sendCharWithStuffing(unsigned char)>

0002f91c <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>:
   2f91c:	e3a03000 	mov	r3, #0
   2f920:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f924:	e1a09002 	mov	r9, r2
   2f928:	e2807901 	add	r7, r0, #16384	; 0x4000
   2f92c:	e5873e54 	str	r3, [r7, #3668]	; 0xe54
   2f930:	e5873e58 	str	r3, [r7, #3672]	; 0xe58
   2f934:	e1a05001 	mov	r5, r1
   2f938:	e5d01004 	ldrb	r1, [r0, #4]
   2f93c:	e1a06000 	mov	r6, r0
   2f940:	ebffffb4 	bl	2f818 <MiniHDLC::sendChar(unsigned char)>
   2f944:	e3590000 	cmp	r9, #0
   2f948:	0a000029 	beq	2f9f4 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xd8>
   2f94c:	e59f20ac 	ldr	r2, [pc, #172]	; 2fa00 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xe4>
   2f950:	e59f80ac 	ldr	r8, [pc, #172]	; 2fa04 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xe8>
   2f954:	e4d51001 	ldrb	r1, [r5], #1
   2f958:	e1a00006 	mov	r0, r6
   2f95c:	e0213422 	eor	r3, r1, r2, lsr #8
   2f960:	e1a03083 	lsl	r3, r3, #1
   2f964:	e19840b3 	ldrh	r4, [r8, r3]
   2f968:	e0244402 	eor	r4, r4, r2, lsl #8
   2f96c:	e6bf4074 	sxth	r4, r4
   2f970:	ebffffd5 	bl	2f8cc <MiniHDLC::sendEscaped(unsigned char)>
   2f974:	e2599001 	subs	r9, r9, #1
   2f978:	e6ff2074 	uxth	r2, r4
   2f97c:	1afffff4 	bne	2f954 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0x38>
   2f980:	e6ef1074 	uxtb	r1, r4
   2f984:	e1a02422 	lsr	r2, r2, #8
   2f988:	e5d63007 	ldrb	r3, [r6, #7]
   2f98c:	e1a00006 	mov	r0, r6
   2f990:	e3530000 	cmp	r3, #0
   2f994:	11a05001 	movne	r5, r1
   2f998:	01a05002 	moveq	r5, r2
   2f99c:	11a01002 	movne	r1, r2
   2f9a0:	ebffffc9 	bl	2f8cc <MiniHDLC::sendEscaped(unsigned char)>
   2f9a4:	e1a01005 	mov	r1, r5
   2f9a8:	e1a00006 	mov	r0, r6
   2f9ac:	ebffffc6 	bl	2f8cc <MiniHDLC::sendEscaped(unsigned char)>
   2f9b0:	e5d61004 	ldrb	r1, [r6, #4]
   2f9b4:	e1a00006 	mov	r0, r6
   2f9b8:	ebffff96 	bl	2f818 <MiniHDLC::sendChar(unsigned char)>
   2f9bc:	e59f3044 	ldr	r3, [pc, #68]	; 2fa08 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xec>
   2f9c0:	e5933000 	ldr	r3, [r3]
   2f9c4:	e3530000 	cmp	r3, #0
   2f9c8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f9cc:	e5971e54 	ldr	r1, [r7, #3668]	; 0xe54
   2f9d0:	e3510000 	cmp	r1, #0
   2f9d4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f9d8:	e2860c27 	add	r0, r6, #9984	; 0x2700
   2f9dc:	e280003c 	add	r0, r0, #60	; 0x3c
   2f9e0:	e12fff33 	blx	r3
   2f9e4:	e3a03000 	mov	r3, #0
   2f9e8:	e5873e54 	str	r3, [r7, #3668]	; 0xe54
   2f9ec:	e5873e58 	str	r3, [r7, #3672]	; 0xe58
   2f9f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f9f4:	e3a020ff 	mov	r2, #255	; 0xff
   2f9f8:	e1a01002 	mov	r1, r2
   2f9fc:	eaffffe1 	b	2f988 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0x6c>
   2fa00:	0000ffff 	.word	0x0000ffff
   2fa04:	0004616c 	.word	0x0004616c
   2fa08:	0004e2e4 	.word	0x0004e2e4

0002fa0c <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>:
   2fa0c:	e3510000 	cmp	r1, #0
   2fa10:	0a00000c 	beq	2fa48 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x3c>
   2fa14:	e1a02000 	mov	r2, r0
   2fa18:	e59fc030 	ldr	ip, [pc, #48]	; 2fa50 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x44>
   2fa1c:	e59f0030 	ldr	r0, [pc, #48]	; 2fa54 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x48>
   2fa20:	e0821001 	add	r1, r2, r1
   2fa24:	e4d23001 	ldrb	r3, [r2], #1
   2fa28:	e0233420 	eor	r3, r3, r0, lsr #8
   2fa2c:	e1a03083 	lsl	r3, r3, #1
   2fa30:	e19c30b3 	ldrh	r3, [ip, r3]
   2fa34:	e1510002 	cmp	r1, r2
   2fa38:	e0230400 	eor	r0, r3, r0, lsl #8
   2fa3c:	e6ff0070 	uxth	r0, r0
   2fa40:	1afffff7 	bne	2fa24 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x18>
   2fa44:	e12fff1e 	bx	lr
   2fa48:	e59f0004 	ldr	r0, [pc, #4]	; 2fa54 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x48>
   2fa4c:	e12fff1e 	bx	lr
   2fa50:	0004616c 	.word	0x0004616c
   2fa54:	0000ffff 	.word	0x0000ffff

0002fa58 <CommandHandler::hdlcFrameTxStatic(unsigned char const*, unsigned int)>:
   2fa58:	e59f3018 	ldr	r3, [pc, #24]	; 2fa78 <CommandHandler::hdlcFrameTxStatic(unsigned char const*, unsigned int)+0x20>
   2fa5c:	e5932000 	ldr	r2, [r3]
   2fa60:	e3520000 	cmp	r2, #0
   2fa64:	012fff1e 	bxeq	lr
   2fa68:	e5933004 	ldr	r3, [r3, #4]
   2fa6c:	e3530000 	cmp	r3, #0
   2fa70:	012fff1e 	bxeq	lr
   2fa74:	e12fff13 	bx	r3
   2fa78:	0004e2ec 	.word	0x0004e2ec

0002fa7c <CommandHandler::CommandHandler()>:
   2fa7c:	e92d4070 	push	{r4, r5, r6, lr}
   2fa80:	e3a0207d 	mov	r2, #125	; 0x7d
   2fa84:	e3a04000 	mov	r4, #0
   2fa88:	e3a06001 	mov	r6, #1
   2fa8c:	e1a05000 	mov	r5, r0
   2fa90:	e59f3090 	ldr	r3, [pc, #144]	; 2fb28 <CommandHandler::CommandHandler()+0xac>
   2fa94:	e24dd018 	sub	sp, sp, #24
   2fa98:	e58d2000 	str	r2, [sp]
   2fa9c:	e58d3008 	str	r3, [sp, #8]
   2faa0:	e58d3004 	str	r3, [sp, #4]
   2faa4:	e58d4010 	str	r4, [sp, #16]
   2faa8:	e58d600c 	str	r6, [sp, #12]
   2faac:	e3a0307e 	mov	r3, #126	; 0x7e
   2fab0:	e59f2074 	ldr	r2, [pc, #116]	; 2fb2c <CommandHandler::CommandHandler()+0xb0>
   2fab4:	e59f1074 	ldr	r1, [pc, #116]	; 2fb30 <CommandHandler::CommandHandler()+0xb4>
   2fab8:	e2800f65 	add	r0, r0, #404	; 0x194
   2fabc:	ebfffd9d 	bl	2f138 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)>
   2fac0:	e59f006c 	ldr	r0, [pc, #108]	; 2fb34 <CommandHandler::CommandHandler()+0xb8>
   2fac4:	e3a01032 	mov	r1, #50	; 0x32
   2fac8:	e5805000 	str	r5, [r0]
   2facc:	e1a00005 	mov	r0, r5
   2fad0:	e2853a05 	add	r3, r5, #20480	; 0x5000
   2fad4:	e2852a07 	add	r2, r5, #28672	; 0x7000
   2fad8:	e5834870 	str	r4, [r3, #2160]	; 0x870
   2fadc:	e5831878 	str	r1, [r3, #2168]	; 0x878
   2fae0:	e5834874 	str	r4, [r3, #2164]	; 0x874
   2fae4:	e58247fc 	str	r4, [r2, #2044]	; 0x7fc
   2fae8:	e5824800 	str	r4, [r2, #2048]	; 0x800
   2faec:	e5824804 	str	r4, [r2, #2052]	; 0x804
   2faf0:	e5824808 	str	r4, [r2, #2056]	; 0x808
   2faf4:	e5854190 	str	r4, [r5, #400]	; 0x190
   2faf8:	e5c34000 	strb	r4, [r3]
   2fafc:	e5c34065 	strb	r4, [r3, #101]	; 0x65
   2fb00:	e5c3408e 	strb	r4, [r3, #142]	; 0x8e
   2fb04:	e5834860 	str	r4, [r3, #2144]	; 0x860
   2fb08:	e5834864 	str	r4, [r3, #2148]	; 0x864
   2fb0c:	e5834868 	str	r4, [r3, #2152]	; 0x868
   2fb10:	e583486c 	str	r4, [r3, #2156]	; 0x86c
   2fb14:	e58348b0 	str	r4, [r3, #2224]	; 0x8b0
   2fb18:	e5c267f8 	strb	r6, [r2, #2040]	; 0x7f8
   2fb1c:	e58247f4 	str	r4, [r2, #2036]	; 0x7f4
   2fb20:	e28dd018 	add	sp, sp, #24
   2fb24:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fb28:	00002710 	.word	0x00002710
   2fb2c:	00030b1c 	.word	0x00030b1c
   2fb30:	0002fa58 	.word	0x0002fa58
   2fb34:	0004e2ec 	.word	0x0004e2ec

0002fb38 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>:
   2fb38:	e590c190 	ldr	ip, [r0, #400]	; 0x190
   2fb3c:	e35c0013 	cmp	ip, #19
   2fb40:	8a00000e 	bhi	2fb80 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))+0x48>
   2fb44:	e92d4030 	push	{r4, r5, lr}
   2fb48:	e08c410c 	add	r4, ip, ip, lsl #2
   2fb4c:	e1a04104 	lsl	r4, r4, #2
   2fb50:	e080e004 	add	lr, r0, r4
   2fb54:	e7801004 	str	r1, [r0, r4]
   2fb58:	e58e3008 	str	r3, [lr, #8]
   2fb5c:	e59d300c 	ldr	r3, [sp, #12]
   2fb60:	e28c5001 	add	r5, ip, #1
   2fb64:	e58e300c 	str	r3, [lr, #12]
   2fb68:	e59d3010 	ldr	r3, [sp, #16]
   2fb6c:	e5ce2004 	strb	r2, [lr, #4]
   2fb70:	e58e3010 	str	r3, [lr, #16]
   2fb74:	e5805190 	str	r5, [r0, #400]	; 0x190
   2fb78:	e1a0000c 	mov	r0, ip
   2fb7c:	e8bd8030 	pop	{r4, r5, pc}
   2fb80:	e3e0c000 	mvn	ip, #0
   2fb84:	e1a0000c 	mov	r0, ip
   2fb88:	e12fff1e 	bx	lr

0002fb8c <CommandHandler::commsSocketEnable(unsigned int, bool)>:
   2fb8c:	e5903190 	ldr	r3, [r0, #400]	; 0x190
   2fb90:	e1530001 	cmp	r3, r1
   2fb94:	80811101 	addhi	r1, r1, r1, lsl #2
   2fb98:	80801101 	addhi	r1, r0, r1, lsl #2
   2fb9c:	85c12004 	strbhi	r2, [r1, #4]
   2fba0:	e12fff1e 	bx	lr

0002fba4 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)>:
   2fba4:	e59f3010 	ldr	r3, [pc, #16]	; 2fbbc <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)+0x18>
   2fba8:	e5930000 	ldr	r0, [r3]
   2fbac:	e3500000 	cmp	r0, #0
   2fbb0:	012fff1e 	bxeq	lr
   2fbb4:	e2800f65 	add	r0, r0, #404	; 0x194
   2fbb8:	eafffe67 	b	2f55c <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)>
   2fbbc:	0004e2ec 	.word	0x0004e2ec

0002fbc0 <CommandHandler::hdlcTxAvailableStatic()>:
   2fbc0:	e59f3018 	ldr	r3, [pc, #24]	; 2fbe0 <CommandHandler::hdlcTxAvailableStatic()+0x20>
   2fbc4:	e5930000 	ldr	r0, [r3]
   2fbc8:	e3500000 	cmp	r0, #0
   2fbcc:	012fff1e 	bxeq	lr
   2fbd0:	e5930008 	ldr	r0, [r3, #8]
   2fbd4:	e3500000 	cmp	r0, #0
   2fbd8:	012fff1e 	bxeq	lr
   2fbdc:	e12fff10 	bx	r0
   2fbe0:	0004e2ec 	.word	0x0004e2ec

0002fbe4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>:
   2fbe4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fbe8:	e1a07000 	mov	r7, r0
   2fbec:	e5900190 	ldr	r0, [r0, #400]	; 0x190
   2fbf0:	e24dd00c 	sub	sp, sp, #12
   2fbf4:	e3500000 	cmp	r0, #0
   2fbf8:	e1a08001 	mov	r8, r1
   2fbfc:	e1a09002 	mov	r9, r2
   2fc00:	e1a0a003 	mov	sl, r3
   2fc04:	0a00002f 	beq	2fcc8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xe4>
   2fc08:	e1a04007 	mov	r4, r7
   2fc0c:	e3a05000 	mov	r5, #0
   2fc10:	e3a0b004 	mov	fp, #4
   2fc14:	ea000012 	b	2fc64 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x80>
   2fc18:	e5946008 	ldr	r6, [r4, #8]
   2fc1c:	e3560000 	cmp	r6, #0
   2fc20:	0a00001f 	beq	2fca4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xc0>
   2fc24:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   2fc28:	e5940000 	ldr	r0, [r4]
   2fc2c:	e58d3004 	str	r3, [sp, #4]
   2fc30:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   2fc34:	e1a02009 	mov	r2, r9
   2fc38:	e58d3000 	str	r3, [sp]
   2fc3c:	e1a01008 	mov	r1, r8
   2fc40:	e1a0300a 	mov	r3, sl
   2fc44:	e12fff36 	blx	r6
   2fc48:	e3500000 	cmp	r0, #0
   2fc4c:	1a000012 	bne	2fc9c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xb8>
   2fc50:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2fc54:	e2855001 	add	r5, r5, #1
   2fc58:	e1500005 	cmp	r0, r5
   2fc5c:	e2844014 	add	r4, r4, #20
   2fc60:	9a00000d 	bls	2fc9c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xb8>
   2fc64:	e5d43004 	ldrb	r3, [r4, #4]
   2fc68:	e3530000 	cmp	r3, #0
   2fc6c:	1affffe9 	bne	2fc18 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x34>
   2fc70:	ebffdbd9 	bl	26bdc <CLogger::Get()>
   2fc74:	e58d5000 	str	r5, [sp]
   2fc78:	e59f306c 	ldr	r3, [pc, #108]	; 2fcec <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x108>
   2fc7c:	e1a0200b 	mov	r2, fp
   2fc80:	e59f1068 	ldr	r1, [pc, #104]	; 2fcf0 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x10c>
   2fc84:	ebffdb11 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fc88:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2fc8c:	e2855001 	add	r5, r5, #1
   2fc90:	e1500005 	cmp	r0, r5
   2fc94:	e2844014 	add	r4, r4, #20
   2fc98:	8afffff1 	bhi	2fc64 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x80>
   2fc9c:	e28dd00c 	add	sp, sp, #12
   2fca0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fca4:	e3550000 	cmp	r5, #0
   2fca8:	0affffe9 	beq	2fc54 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x70>
   2fcac:	ebffdbca 	bl	26bdc <CLogger::Get()>
   2fcb0:	e58d5000 	str	r5, [sp]
   2fcb4:	e59f3038 	ldr	r3, [pc, #56]	; 2fcf4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x110>
   2fcb8:	e1a0200b 	mov	r2, fp
   2fcbc:	e59f102c 	ldr	r1, [pc, #44]	; 2fcf0 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x10c>
   2fcc0:	ebffdb02 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fcc4:	eaffffe1 	b	2fc50 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x6c>
   2fcc8:	ebffdbc3 	bl	26bdc <CLogger::Get()>
   2fccc:	e59f3024 	ldr	r3, [pc, #36]	; 2fcf8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x114>
   2fcd0:	e3a02004 	mov	r2, #4
   2fcd4:	e59f1014 	ldr	r1, [pc, #20]	; 2fcf0 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x10c>
   2fcd8:	ebffdafc 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fcdc:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2fce0:	e3500000 	cmp	r0, #0
   2fce4:	1affffc7 	bne	2fc08 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x24>
   2fce8:	eaffffeb 	b	2fc9c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xb8>
   2fcec:	00046400 	.word	0x00046400
   2fcf0:	000463c8 	.word	0x000463c8
   2fcf4:	00046418 	.word	0x00046418
   2fcf8:	000463d8 	.word	0x000463d8

0002fcfc <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>:
   2fcfc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fd00:	e590e190 	ldr	lr, [r0, #400]	; 0x190
   2fd04:	e5dd7028 	ldrb	r7, [sp, #40]	; 0x28
   2fd08:	e35e0000 	cmp	lr, #0
   2fd0c:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd10:	e1a09003 	mov	r9, r3
   2fd14:	e1a08002 	mov	r8, r2
   2fd18:	e1a0a001 	mov	sl, r1
   2fd1c:	e1a06000 	mov	r6, r0
   2fd20:	e1a04000 	mov	r4, r0
   2fd24:	e3a05000 	mov	r5, #0
   2fd28:	ea00000c 	b	2fd60 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x64>
   2fd2c:	e594300c 	ldr	r3, [r4, #12]
   2fd30:	e3530000 	cmp	r3, #0
   2fd34:	0a000005 	beq	2fd50 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fd38:	e1a01009 	mov	r1, r9
   2fd3c:	e1a00008 	mov	r0, r8
   2fd40:	e12fff33 	blx	r3
   2fd44:	e3500000 	cmp	r0, #0
   2fd48:	18bd8ff8 	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd4c:	e596e190 	ldr	lr, [r6, #400]	; 0x190
   2fd50:	e2855001 	add	r5, r5, #1
   2fd54:	e15e0005 	cmp	lr, r5
   2fd58:	e2844014 	add	r4, r4, #20
   2fd5c:	9a00000f 	bls	2fda0 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0xa4>
   2fd60:	e5d4c004 	ldrb	ip, [r4, #4]
   2fd64:	e35c0000 	cmp	ip, #0
   2fd68:	0afffff8 	beq	2fd50 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fd6c:	e3570000 	cmp	r7, #0
   2fd70:	1affffed 	bne	2fd2c <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x30>
   2fd74:	e594b010 	ldr	fp, [r4, #16]
   2fd78:	e35b0000 	cmp	fp, #0
   2fd7c:	0afffff3 	beq	2fd50 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fd80:	e1a03009 	mov	r3, r9
   2fd84:	e1a02008 	mov	r2, r8
   2fd88:	e1a0100a 	mov	r1, sl
   2fd8c:	e5940000 	ldr	r0, [r4]
   2fd90:	e12fff3b 	blx	fp
   2fd94:	e3500000 	cmp	r0, #0
   2fd98:	0affffeb 	beq	2fd4c <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x50>
   2fd9c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fda0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002fda4 <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)>:
   2fda4:	e2803a05 	add	r3, r0, #20480	; 0x5000
   2fda8:	e5930864 	ldr	r0, [r3, #2148]	; 0x864
   2fdac:	e3500000 	cmp	r0, #0
   2fdb0:	012fff1e 	bxeq	lr
   2fdb4:	e5933868 	ldr	r3, [r3, #2152]	; 0x868
   2fdb8:	e1500003 	cmp	r0, r3
   2fdbc:	15810000 	strne	r0, [r1]
   2fdc0:	13a00001 	movne	r0, #1
   2fdc4:	15823000 	strne	r3, [r2]
   2fdc8:	03a00000 	moveq	r0, #0
   2fdcc:	e12fff1e 	bx	lr

0002fdd0 <CommandHandler::sendKeyStrToTarget(char const*)>:
   2fdd0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2fdd4:	e3a04000 	mov	r4, #0
   2fdd8:	e1a07000 	mov	r7, r0
   2fddc:	e1a05001 	mov	r5, r1
   2fde0:	e1a08004 	mov	r8, r4
   2fde4:	e59f60a0 	ldr	r6, [pc, #160]	; 2fe8c <CommandHandler::sendKeyStrToTarget(char const*)+0xbc>
   2fde8:	e2809a05 	add	r9, r0, #20480	; 0x5000
   2fdec:	ea00000f 	b	2fe30 <CommandHandler::sendKeyStrToTarget(char const*)+0x60>
   2fdf0:	e3510000 	cmp	r1, #0
   2fdf4:	01520003 	cmpeq	r2, r3
   2fdf8:	0a00000b 	beq	2fe2c <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fdfc:	e5993870 	ldr	r3, [r9, #2160]	; 0x870
   2fe00:	e7d52004 	ldrb	r2, [r5, r4]
   2fe04:	e0873003 	add	r3, r7, r3
   2fe08:	e2833b16 	add	r3, r3, #22528	; 0x5800
   2fe0c:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
   2fe10:	e5993870 	ldr	r3, [r9, #2160]	; 0x870
   2fe14:	e5992878 	ldr	r2, [r9, #2168]	; 0x878
   2fe18:	e2833001 	add	r3, r3, #1
   2fe1c:	e5893870 	str	r3, [r9, #2160]	; 0x870
   2fe20:	e5993870 	ldr	r3, [r9, #2160]	; 0x870
   2fe24:	e1530002 	cmp	r3, r2
   2fe28:	25898870 	strcs	r8, [r9, #2160]	; 0x870
   2fe2c:	e2844001 	add	r4, r4, #1
   2fe30:	e1a00005 	mov	r0, r5
   2fe34:	ebffe894 	bl	2a08c <strlen>
   2fe38:	e1540000 	cmp	r4, r0
   2fe3c:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
   2fe40:	e5963000 	ldr	r3, [r6]
   2fe44:	e2833a05 	add	r3, r3, #20480	; 0x5000
   2fe48:	e5932878 	ldr	r2, [r3, #2168]	; 0x878
   2fe4c:	e3520000 	cmp	r2, #0
   2fe50:	0afffff5 	beq	2fe2c <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fe54:	e5930870 	ldr	r0, [r3, #2160]	; 0x870
   2fe58:	e5931874 	ldr	r1, [r3, #2164]	; 0x874
   2fe5c:	e2422001 	sub	r2, r2, #1
   2fe60:	e1500001 	cmp	r0, r1
   2fe64:	0affffe4 	beq	2fdfc <CommandHandler::sendKeyStrToTarget(char const*)+0x2c>
   2fe68:	e5931874 	ldr	r1, [r3, #2164]	; 0x874
   2fe6c:	e5930870 	ldr	r0, [r3, #2160]	; 0x870
   2fe70:	e5933870 	ldr	r3, [r3, #2160]	; 0x870
   2fe74:	e1510000 	cmp	r1, r0
   2fe78:	3affffdc 	bcc	2fdf0 <CommandHandler::sendKeyStrToTarget(char const*)+0x20>
   2fe7c:	e0411003 	sub	r1, r1, r3
   2fe80:	e3510001 	cmp	r1, #1
   2fe84:	8affffdc 	bhi	2fdfc <CommandHandler::sendKeyStrToTarget(char const*)+0x2c>
   2fe88:	eaffffe7 	b	2fe2c <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fe8c:	0004e2ec 	.word	0x0004e2ec

0002fe90 <CommandHandler::sendKeyStrToTargetStatic(char const*)>:
   2fe90:	e59f300c 	ldr	r3, [pc, #12]	; 2fea4 <CommandHandler::sendKeyStrToTargetStatic(char const*)+0x14>
   2fe94:	e5930000 	ldr	r0, [r3]
   2fe98:	e3500000 	cmp	r0, #0
   2fe9c:	012fff1e 	bxeq	lr
   2fea0:	eaffffca 	b	2fdd0 <CommandHandler::sendKeyStrToTarget(char const*)>
   2fea4:	0004e2ec 	.word	0x0004e2ec

0002fea8 <CommandHandler::getTxAvailable()>:
   2fea8:	e59f3018 	ldr	r3, [pc, #24]	; 2fec8 <CommandHandler::getTxAvailable()+0x20>
   2feac:	e5930000 	ldr	r0, [r3]
   2feb0:	e3500000 	cmp	r0, #0
   2feb4:	012fff1e 	bxeq	lr
   2feb8:	e5930008 	ldr	r0, [r3, #8]
   2febc:	e3500000 	cmp	r0, #0
   2fec0:	012fff1e 	bxeq	lr
   2fec4:	e12fff10 	bx	r0
   2fec8:	0004e2ec 	.word	0x0004e2ec

0002fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
   2fecc:	e92d4070 	push	{r4, r5, r6, lr}
   2fed0:	e1a06001 	mov	r6, r1
   2fed4:	e1a05002 	mov	r5, r2
   2fed8:	e24ddc4e 	sub	sp, sp, #19968	; 0x4e00
   2fedc:	e24dd050 	sub	sp, sp, #80	; 0x50
   2fee0:	e28d1c4e 	add	r1, sp, #19968	; 0x4e00
   2fee4:	e2811064 	add	r1, r1, #100	; 0x64
   2fee8:	e5914000 	ldr	r4, [r1]
   2feec:	e28dc030 	add	ip, sp, #48	; 0x30
   2fef0:	e59f2188 	ldr	r2, [pc, #392]	; 30080 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b4>
   2fef4:	e3a01014 	mov	r1, #20
   2fef8:	e28d0008 	add	r0, sp, #8
   2fefc:	e58dc004 	str	ip, [sp, #4]
   2ff00:	ebfff8bf 	bl	2e204 <snprintf>
   2ff04:	e1a03004 	mov	r3, r4
   2ff08:	e59f2170 	ldr	r2, [pc, #368]	; 30080 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b4>
   2ff0c:	e3a01014 	mov	r1, #20
   2ff10:	e28d001c 	add	r0, sp, #28
   2ff14:	ebfff8ba 	bl	2e204 <snprintf>
   2ff18:	e59f2164 	ldr	r2, [pc, #356]	; 30084 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff1c:	e59f1164 	ldr	r1, [pc, #356]	; 30088 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1bc>
   2ff20:	e59d0004 	ldr	r0, [sp, #4]
   2ff24:	ebfff83f 	bl	2e028 <strlcpy>
   2ff28:	e1a01006 	mov	r1, r6
   2ff2c:	e59f2150 	ldr	r2, [pc, #336]	; 30084 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff30:	e59d0004 	ldr	r0, [sp, #4]
   2ff34:	ebfff857 	bl	2e098 <strlcat>
   2ff38:	e59f2144 	ldr	r2, [pc, #324]	; 30084 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff3c:	e59f1148 	ldr	r1, [pc, #328]	; 3008c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c0>
   2ff40:	e59d0004 	ldr	r0, [sp, #4]
   2ff44:	ebfff853 	bl	2e098 <strlcat>
   2ff48:	e1a00005 	mov	r0, r5
   2ff4c:	ebffe84e 	bl	2a08c <strlen>
   2ff50:	e3500000 	cmp	r0, #0
   2ff54:	1a000040 	bne	3005c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x190>
   2ff58:	e59f2124 	ldr	r2, [pc, #292]	; 30084 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff5c:	e59f112c 	ldr	r1, [pc, #300]	; 30090 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c4>
   2ff60:	e59d0004 	ldr	r0, [sp, #4]
   2ff64:	ebfff84b 	bl	2e098 <strlcat>
   2ff68:	e28d1008 	add	r1, sp, #8
   2ff6c:	e59f2110 	ldr	r2, [pc, #272]	; 30084 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff70:	e59d0004 	ldr	r0, [sp, #4]
   2ff74:	ebfff847 	bl	2e098 <strlcat>
   2ff78:	e59f2104 	ldr	r2, [pc, #260]	; 30084 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff7c:	e59f1110 	ldr	r1, [pc, #272]	; 30094 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c8>
   2ff80:	e59d0004 	ldr	r0, [sp, #4]
   2ff84:	ebfff843 	bl	2e098 <strlcat>
   2ff88:	e28d101c 	add	r1, sp, #28
   2ff8c:	e59f20f0 	ldr	r2, [pc, #240]	; 30084 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff90:	e59d0004 	ldr	r0, [sp, #4]
   2ff94:	ebfff83f 	bl	2e098 <strlcat>
   2ff98:	e59f20e4 	ldr	r2, [pc, #228]	; 30084 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff9c:	e59f10f4 	ldr	r1, [pc, #244]	; 30098 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1cc>
   2ffa0:	e59d0004 	ldr	r0, [sp, #4]
   2ffa4:	ebfff83b 	bl	2e098 <strlcat>
   2ffa8:	e59d0004 	ldr	r0, [sp, #4]
   2ffac:	ebffe836 	bl	2a08c <strlen>
   2ffb0:	e2800001 	add	r0, r0, #1
   2ffb4:	e0845000 	add	r5, r4, r0
   2ffb8:	e59f30dc 	ldr	r3, [pc, #220]	; 3009c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d0>
   2ffbc:	e2856001 	add	r6, r5, #1
   2ffc0:	e1560003 	cmp	r6, r3
   2ffc4:	8a00001c 	bhi	3003c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x170>
   2ffc8:	e3540000 	cmp	r4, #0
   2ffcc:	0a00000b 	beq	30000 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x134>
   2ffd0:	e28d3c4e 	add	r3, sp, #19968	; 0x4e00
   2ffd4:	e2833060 	add	r3, r3, #96	; 0x60
   2ffd8:	e5933000 	ldr	r3, [r3]
   2ffdc:	e3530000 	cmp	r3, #0
   2ffe0:	0a000012 	beq	30030 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x164>
   2ffe4:	e59d3004 	ldr	r3, [sp, #4]
   2ffe8:	e1a02004 	mov	r2, r4
   2ffec:	e0830000 	add	r0, r3, r0
   2fff0:	e28d3c4e 	add	r3, sp, #19968	; 0x4e00
   2fff4:	e2833060 	add	r3, r3, #96	; 0x60
   2fff8:	e5931000 	ldr	r1, [r3]
   2fffc:	ebffea47 	bl	2a920 <memcpy>
   30000:	e3a03000 	mov	r3, #0
   30004:	e59f2094 	ldr	r2, [pc, #148]	; 300a0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d4>
   30008:	e5920000 	ldr	r0, [r2]
   3000c:	e28d2ee5 	add	r2, sp, #3664	; 0xe50
   30010:	e0825005 	add	r5, r2, r5
   30014:	e1500003 	cmp	r0, r3
   30018:	e5453e20 	strb	r3, [r5, #-3616]	; 0xfffff1e0
   3001c:	0a000003 	beq	30030 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x164>
   30020:	e1a02006 	mov	r2, r6
   30024:	e59d1004 	ldr	r1, [sp, #4]
   30028:	e2800f65 	add	r0, r0, #404	; 0x194
   3002c:	ebfffe3a 	bl	2f91c <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>
   30030:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   30034:	e28dd050 	add	sp, sp, #80	; 0x50
   30038:	e8bd8070 	pop	{r4, r5, r6, pc}
   3003c:	ebffdae6 	bl	26bdc <CLogger::Get()>
   30040:	e59f305c 	ldr	r3, [pc, #92]	; 300a4 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d8>
   30044:	e3a02002 	mov	r2, #2
   30048:	e59f1058 	ldr	r1, [pc, #88]	; 300a8 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1dc>
   3004c:	ebffda1f 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30050:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   30054:	e28dd050 	add	sp, sp, #80	; 0x50
   30058:	e8bd8070 	pop	{r4, r5, r6, pc}
   3005c:	e59f2020 	ldr	r2, [pc, #32]	; 30084 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   30060:	e59f1044 	ldr	r1, [pc, #68]	; 300ac <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1e0>
   30064:	e59d0004 	ldr	r0, [sp, #4]
   30068:	ebfff80a 	bl	2e098 <strlcat>
   3006c:	e1a01005 	mov	r1, r5
   30070:	e59f200c 	ldr	r2, [pc, #12]	; 30084 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   30074:	e59d0004 	ldr	r0, [sp, #4]
   30078:	ebfff806 	bl	2e098 <strlcat>
   3007c:	eaffffb5 	b	2ff58 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x8c>
   30080:	0004642c 	.word	0x0004642c
   30084:	00004e20 	.word	0x00004e20
   30088:	00046430 	.word	0x00046430
   3008c:	0004700c 	.word	0x0004700c
   30090:	00046440 	.word	0x00046440
   30094:	0004644c 	.word	0x0004644c
   30098:	00046474 	.word	0x00046474
   3009c:	00004e1f 	.word	0x00004e1f
   300a0:	0004e2ec 	.word	0x0004e2ec
   300a4:	00046458 	.word	0x00046458
   300a8:	000463c8 	.word	0x000463c8
   300ac:	000433f8 	.word	0x000433f8

000300b0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>:
   300b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   300b4:	e1a08002 	mov	r8, r2
   300b8:	e1a07003 	mov	r7, r3
   300bc:	e1a05001 	mov	r5, r1
   300c0:	e24ddc27 	sub	sp, sp, #9984	; 0x2700
   300c4:	e24dd028 	sub	sp, sp, #40	; 0x28
   300c8:	e1a03001 	mov	r3, r1
   300cc:	e28d4018 	add	r4, sp, #24
   300d0:	e59f20c4 	ldr	r2, [pc, #196]	; 3019c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xec>
   300d4:	e3a0100a 	mov	r1, #10
   300d8:	e1a06000 	mov	r6, r0
   300dc:	e28d000c 	add	r0, sp, #12
   300e0:	ebfff847 	bl	2e204 <snprintf>
   300e4:	e59f20b4 	ldr	r2, [pc, #180]	; 301a0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   300e8:	e59f10b4 	ldr	r1, [pc, #180]	; 301a4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf4>
   300ec:	e1a00004 	mov	r0, r4
   300f0:	ebfff7cc 	bl	2e028 <strlcpy>
   300f4:	e1a01008 	mov	r1, r8
   300f8:	e59f20a0 	ldr	r2, [pc, #160]	; 301a0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   300fc:	e1a00004 	mov	r0, r4
   30100:	ebfff7e4 	bl	2e098 <strlcat>
   30104:	e59f2094 	ldr	r2, [pc, #148]	; 301a0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   30108:	e59f1098 	ldr	r1, [pc, #152]	; 301a8 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf8>
   3010c:	e1a00004 	mov	r0, r4
   30110:	ebfff7e0 	bl	2e098 <strlcat>
   30114:	e59f2084 	ldr	r2, [pc, #132]	; 301a0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   30118:	e59f108c 	ldr	r1, [pc, #140]	; 301ac <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xfc>
   3011c:	e1a00004 	mov	r0, r4
   30120:	ebfff7dc 	bl	2e098 <strlcat>
   30124:	e1a01007 	mov	r1, r7
   30128:	e1a00004 	mov	r0, r4
   3012c:	e59f206c 	ldr	r2, [pc, #108]	; 301a0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   30130:	ebfff7d8 	bl	2e098 <strlcat>
   30134:	e3750001 	cmn	r5, #1
   30138:	0a000007 	beq	3015c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xac>
   3013c:	e59f205c 	ldr	r2, [pc, #92]	; 301a0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   30140:	e59f1068 	ldr	r1, [pc, #104]	; 301b0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x100>
   30144:	e1a00004 	mov	r0, r4
   30148:	ebfff7d2 	bl	2e098 <strlcat>
   3014c:	e28d100c 	add	r1, sp, #12
   30150:	e59f2048 	ldr	r2, [pc, #72]	; 301a0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   30154:	e1a00004 	mov	r0, r4
   30158:	ebfff7ce 	bl	2e098 <strlcat>
   3015c:	e59f203c 	ldr	r2, [pc, #60]	; 301a0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   30160:	e59f104c 	ldr	r1, [pc, #76]	; 301b4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x104>
   30164:	e1a00004 	mov	r0, r4
   30168:	ebfff7ca 	bl	2e098 <strlcat>
   3016c:	e1a00004 	mov	r0, r4
   30170:	ebffe7c5 	bl	2a08c <strlen>
   30174:	e58d4000 	str	r4, [sp]
   30178:	e58d0004 	str	r0, [sp, #4]
   3017c:	e1a03005 	mov	r3, r5
   30180:	e1a00006 	mov	r0, r6
   30184:	e59f202c 	ldr	r2, [pc, #44]	; 301b8 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x108>
   30188:	e59f102c 	ldr	r1, [pc, #44]	; 301bc <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x10c>
   3018c:	ebffff4e 	bl	2fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30190:	e28ddc27 	add	sp, sp, #9984	; 0x2700
   30194:	e28dd028 	add	sp, sp, #40	; 0x28
   30198:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3019c:	0004642c 	.word	0x0004642c
   301a0:	00002710 	.word	0x00002710
   301a4:	00046430 	.word	0x00046430
   301a8:	0004700c 	.word	0x0004700c
   301ac:	000433f8 	.word	0x000433f8
   301b0:	00046440 	.word	0x00046440
   301b4:	00046468 	.word	0x00046468
   301b8:	00047884 	.word	0x00047884
   301bc:	00046478 	.word	0x00046478

000301c0 <CommandHandler::sendUnnumberedMsg(char const*, char const*)>:
   301c0:	e1a03002 	mov	r3, r2
   301c4:	e1a02001 	mov	r2, r1
   301c8:	e3e01000 	mvn	r1, #0
   301cc:	eaffffb7 	b	300b0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>

000301d0 <CommandHandler::handleFileStart(char const*)>:
   301d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   301d4:	e2804a05 	add	r4, r0, #20480	; 0x5000
   301d8:	e24dd024 	sub	sp, sp, #36	; 0x24
   301dc:	e1a05000 	mov	r5, r0
   301e0:	e1a02004 	mov	r2, r4
   301e4:	e3a03064 	mov	r3, #100	; 0x64
   301e8:	e59f00e4 	ldr	r0, [pc, #228]	; 302d4 <CommandHandler::handleFileStart(char const*)+0x104>
   301ec:	e1a06001 	mov	r6, r1
   301f0:	ebfff842 	bl	2e300 <jsonGetValueForKey>
   301f4:	e3500000 	cmp	r0, #0
   301f8:	1a000001 	bne	30204 <CommandHandler::handleFileStart(char const*)+0x34>
   301fc:	e28dd024 	add	sp, sp, #36	; 0x24
   30200:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   30204:	e3a03028 	mov	r3, #40	; 0x28
   30208:	e2842065 	add	r2, r4, #101	; 0x65
   3020c:	e1a01006 	mov	r1, r6
   30210:	e59f00c0 	ldr	r0, [pc, #192]	; 302d8 <CommandHandler::handleFileStart(char const*)+0x108>
   30214:	ebfff839 	bl	2e300 <jsonGetValueForKey>
   30218:	e3500000 	cmp	r0, #0
   3021c:	0afffff6 	beq	301fc <CommandHandler::handleFileStart(char const*)+0x2c>
   30220:	e28d2008 	add	r2, sp, #8
   30224:	e3a03014 	mov	r3, #20
   30228:	e1a01006 	mov	r1, r6
   3022c:	e59f00a8 	ldr	r0, [pc, #168]	; 302dc <CommandHandler::handleFileStart(char const*)+0x10c>
   30230:	ebfff832 	bl	2e300 <jsonGetValueForKey>
   30234:	e3500000 	cmp	r0, #0
   30238:	0affffef 	beq	301fc <CommandHandler::handleFileStart(char const*)+0x2c>
   3023c:	e3a0200a 	mov	r2, #10
   30240:	e3a01000 	mov	r1, #0
   30244:	e28d0008 	add	r0, sp, #8
   30248:	ebffe8dc 	bl	2a5c0 <strtoul>
   3024c:	e1a01006 	mov	r1, r6
   30250:	e1a07000 	mov	r7, r0
   30254:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   30258:	e284008e 	add	r0, r4, #142	; 0x8e
   3025c:	ebfff771 	bl	2e028 <strlcpy>
   30260:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30264:	e3500000 	cmp	r0, #0
   30268:	0a000000 	beq	30270 <CommandHandler::handleFileStart(char const*)+0xa0>
   3026c:	ebffeb8c 	bl	2b0a4 <operator delete[](void*)>
   30270:	e1a00007 	mov	r0, r7
   30274:	ebffeb83 	bl	2b088 <operator new[](unsigned int)>
   30278:	e3a06000 	mov	r6, #0
   3027c:	e5840860 	str	r0, [r4, #2144]	; 0x860
   30280:	e5847864 	str	r7, [r4, #2148]	; 0x864
   30284:	e5846868 	str	r6, [r4, #2152]	; 0x868
   30288:	e584686c 	str	r6, [r4, #2156]	; 0x86c
   3028c:	ebfff72b 	bl	2df40 <millis>
   30290:	e2852a07 	add	r2, r5, #28672	; 0x7000
   30294:	e282ce7f 	add	ip, r2, #2032	; 0x7f0
   30298:	e2853901 	add	r3, r5, #16384	; 0x4000
   3029c:	e58408b0 	str	r0, [r4, #2224]	; 0x8b0
   302a0:	e28cc00c 	add	ip, ip, #12
   302a4:	e58d6004 	str	r6, [sp, #4]
   302a8:	e58d6000 	str	r6, [sp]
   302ac:	e2833eff 	add	r3, r3, #4080	; 0xff0
   302b0:	e58267f4 	str	r6, [r2, #2036]	; 0x7f4
   302b4:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   302b8:	e88c000f 	stm	ip, {r0, r1, r2, r3}
   302bc:	e1a03006 	mov	r3, r6
   302c0:	e1a00005 	mov	r0, r5
   302c4:	e59f2014 	ldr	r2, [pc, #20]	; 302e0 <CommandHandler::handleFileStart(char const*)+0x110>
   302c8:	e59f1014 	ldr	r1, [pc, #20]	; 302e4 <CommandHandler::handleFileStart(char const*)+0x114>
   302cc:	ebfffefe 	bl	2fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   302d0:	eaffffc9 	b	301fc <CommandHandler::handleFileStart(char const*)+0x2c>
   302d4:	0004647c 	.word	0x0004647c
   302d8:	00046488 	.word	0x00046488
   302dc:	00046494 	.word	0x00046494
   302e0:	00047884 	.word	0x00047884
   302e4:	0004649c 	.word	0x0004649c

000302e8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)>:
   302e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   302ec:	e2807a05 	add	r7, r0, #20480	; 0x5000
   302f0:	e597c860 	ldr	ip, [r7, #2144]	; 0x860
   302f4:	e24dd088 	sub	sp, sp, #136	; 0x88
   302f8:	e35c0000 	cmp	ip, #0
   302fc:	0a000008 	beq	30324 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   30300:	e1a06003 	mov	r6, r3
   30304:	e1a05002 	mov	r5, r2
   30308:	e1a04000 	mov	r4, r0
   3030c:	e28d200c 	add	r2, sp, #12
   30310:	e3a03014 	mov	r3, #20
   30314:	e59f00c0 	ldr	r0, [pc, #192]	; 303dc <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0xf4>
   30318:	ebfff7f8 	bl	2e300 <jsonGetValueForKey>
   3031c:	e3500000 	cmp	r0, #0
   30320:	1a000001 	bne	3032c <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x44>
   30324:	e28dd088 	add	sp, sp, #136	; 0x88
   30328:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3032c:	e3a0200a 	mov	r2, #10
   30330:	e28d000c 	add	r0, sp, #12
   30334:	e3a01000 	mov	r1, #0
   30338:	ebffe8a0 	bl	2a5c0 <strtoul>
   3033c:	e5973864 	ldr	r3, [r7, #2148]	; 0x864
   30340:	e0802006 	add	r2, r0, r6
   30344:	e1520003 	cmp	r2, r3
   30348:	e1a08000 	mov	r8, r0
   3034c:	8afffff4 	bhi	30324 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   30350:	e5970860 	ldr	r0, [r7, #2144]	; 0x860
   30354:	e1a01005 	mov	r1, r5
   30358:	e1a02006 	mov	r2, r6
   3035c:	e0800008 	add	r0, r0, r8
   30360:	ebffe96e 	bl	2a920 <memcpy>
   30364:	e5972868 	ldr	r2, [r7, #2152]	; 0x868
   30368:	e597386c 	ldr	r3, [r7, #2156]	; 0x86c
   3036c:	e0822006 	add	r2, r2, r6
   30370:	e2833001 	add	r3, r3, #1
   30374:	e5872868 	str	r2, [r7, #2152]	; 0x868
   30378:	e587386c 	str	r3, [r7, #2156]	; 0x86c
   3037c:	ebfff6ef 	bl	2df40 <millis>
   30380:	e284ca07 	add	ip, r4, #28672	; 0x7000
   30384:	e59c37f4 	ldr	r3, [ip, #2036]	; 0x7f4
   30388:	e58708b0 	str	r0, [r7, #2224]	; 0x8b0
   3038c:	e0841103 	add	r1, r4, r3, lsl #2
   30390:	e2832001 	add	r2, r3, #1
   30394:	e2813a05 	add	r3, r1, #20480	; 0x5000
   30398:	e2811a06 	add	r1, r1, #24576	; 0x6000
   3039c:	e58388b4 	str	r8, [r3, #2228]	; 0x8b4
   303a0:	e28d0024 	add	r0, sp, #36	; 0x24
   303a4:	e5816854 	str	r6, [r1, #2132]	; 0x854
   303a8:	e1a03008 	mov	r3, r8
   303ac:	e58c27f4 	str	r2, [ip, #2036]	; 0x7f4
   303b0:	e3a01064 	mov	r1, #100	; 0x64
   303b4:	e59f2024 	ldr	r2, [pc, #36]	; 303e0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0xf8>
   303b8:	ebfff791 	bl	2e204 <snprintf>
   303bc:	e3a03000 	mov	r3, #0
   303c0:	e28d2024 	add	r2, sp, #36	; 0x24
   303c4:	e1a00004 	mov	r0, r4
   303c8:	e58d3004 	str	r3, [sp, #4]
   303cc:	e58d3000 	str	r3, [sp]
   303d0:	e59f100c 	ldr	r1, [pc, #12]	; 303e4 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0xfc>
   303d4:	ebfffebc 	bl	2fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   303d8:	eaffffd1 	b	30324 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   303dc:	000464a8 	.word	0x000464a8
   303e0:	000464b0 	.word	0x000464b0
   303e4:	000464bc 	.word	0x000464bc

000303e8 <CommandHandler::sendAPIReq(char const*)>:
   303e8:	e92d4010 	push	{r4, lr}
   303ec:	e24dd070 	sub	sp, sp, #112	; 0x70
   303f0:	e3a02064 	mov	r2, #100	; 0x64
   303f4:	e1a04001 	mov	r4, r1
   303f8:	e28d0008 	add	r0, sp, #8
   303fc:	e59f1068 	ldr	r1, [pc, #104]	; 3046c <CommandHandler::sendAPIReq(char const*)+0x84>
   30400:	ebfff708 	bl	2e028 <strlcpy>
   30404:	e28d0008 	add	r0, sp, #8
   30408:	ebffe71f 	bl	2a08c <strlen>
   3040c:	e28d3008 	add	r3, sp, #8
   30410:	e1a01004 	mov	r1, r4
   30414:	e0830000 	add	r0, r3, r0
   30418:	e3a02064 	mov	r2, #100	; 0x64
   3041c:	ebfff701 	bl	2e028 <strlcpy>
   30420:	e28d0008 	add	r0, sp, #8
   30424:	ebffe718 	bl	2a08c <strlen>
   30428:	e28d3008 	add	r3, sp, #8
   3042c:	e0830000 	add	r0, r3, r0
   30430:	e3a02064 	mov	r2, #100	; 0x64
   30434:	e59f1034 	ldr	r1, [pc, #52]	; 30470 <CommandHandler::sendAPIReq(char const*)+0x88>
   30438:	ebfff6fa 	bl	2e028 <strlcpy>
   3043c:	e59f3030 	ldr	r3, [pc, #48]	; 30474 <CommandHandler::sendAPIReq(char const*)+0x8c>
   30440:	e5930000 	ldr	r0, [r3]
   30444:	e3500000 	cmp	r0, #0
   30448:	0a000005 	beq	30464 <CommandHandler::sendAPIReq(char const*)+0x7c>
   3044c:	e3a03000 	mov	r3, #0
   30450:	e28d2008 	add	r2, sp, #8
   30454:	e58d3004 	str	r3, [sp, #4]
   30458:	e58d3000 	str	r3, [sp]
   3045c:	e59f1014 	ldr	r1, [pc, #20]	; 30478 <CommandHandler::sendAPIReq(char const*)+0x90>
   30460:	ebfffe99 	bl	2fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30464:	e28dd070 	add	sp, sp, #112	; 0x70
   30468:	e8bd8010 	pop	{r4, pc}
   3046c:	000464c8 	.word	0x000464c8
   30470:	0004700c 	.word	0x0004700c
   30474:	0004e2ec 	.word	0x0004e2ec
   30478:	000464d0 	.word	0x000464d0

0003047c <CommandHandler::logDebugMessage(char const*)>:
   3047c:	e92d4070 	push	{r4, r5, r6, lr}
   30480:	e1a06001 	mov	r6, r1
   30484:	e24ddc4e 	sub	sp, sp, #19968	; 0x4e00
   30488:	e24dd038 	sub	sp, sp, #56	; 0x38
   3048c:	e59f4060 	ldr	r4, [pc, #96]	; 304f4 <CommandHandler::logDebugMessage(char const*)+0x78>
   30490:	e28d3014 	add	r3, sp, #20
   30494:	e1a05000 	mov	r5, r0
   30498:	e1a02004 	mov	r2, r4
   3049c:	e1a00003 	mov	r0, r3
   304a0:	e59f1050 	ldr	r1, [pc, #80]	; 304f8 <CommandHandler::logDebugMessage(char const*)+0x7c>
   304a4:	e58d300c 	str	r3, [sp, #12]
   304a8:	ebfff6de 	bl	2e028 <strlcpy>
   304ac:	e1a02004 	mov	r2, r4
   304b0:	e1a01006 	mov	r1, r6
   304b4:	e59d000c 	ldr	r0, [sp, #12]
   304b8:	ebfff6f6 	bl	2e098 <strlcat>
   304bc:	e1a02004 	mov	r2, r4
   304c0:	e59d000c 	ldr	r0, [sp, #12]
   304c4:	e59f1030 	ldr	r1, [pc, #48]	; 304fc <CommandHandler::logDebugMessage(char const*)+0x80>
   304c8:	ebfff6f2 	bl	2e098 <strlcat>
   304cc:	e3a03000 	mov	r3, #0
   304d0:	e59d200c 	ldr	r2, [sp, #12]
   304d4:	e1a00005 	mov	r0, r5
   304d8:	e58d3004 	str	r3, [sp, #4]
   304dc:	e58d3000 	str	r3, [sp]
   304e0:	e59f1018 	ldr	r1, [pc, #24]	; 30500 <CommandHandler::logDebugMessage(char const*)+0x84>
   304e4:	ebfffe78 	bl	2fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   304e8:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   304ec:	e28dd038 	add	sp, sp, #56	; 0x38
   304f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   304f4:	00004e20 	.word	0x00004e20
   304f8:	000464d8 	.word	0x000464d8
   304fc:	0004700c 	.word	0x0004700c
   30500:	000464e0 	.word	0x000464e0

00030504 <CommandHandler::handleFileEnd(char const*)>:
   30504:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   30508:	e2804a05 	add	r4, r0, #20480	; 0x5000
   3050c:	e5942860 	ldr	r2, [r4, #2144]	; 0x860
   30510:	e24ddf5e 	sub	sp, sp, #376	; 0x178
   30514:	e3520000 	cmp	r2, #0
   30518:	0a000063 	beq	306ac <CommandHandler::handleFileEnd(char const*)+0x1a8>
   3051c:	e1a08000 	mov	r8, r0
   30520:	e28d201c 	add	r2, sp, #28
   30524:	e3a03014 	mov	r3, #20
   30528:	e59f0294 	ldr	r0, [pc, #660]	; 307c4 <CommandHandler::handleFileEnd(char const*)+0x2c0>
   3052c:	e1a06001 	mov	r6, r1
   30530:	ebfff772 	bl	2e300 <jsonGetValueForKey>
   30534:	e2505000 	subs	r5, r0, #0
   30538:	1a00006d 	bne	306f4 <CommandHandler::handleFileEnd(char const*)+0x1f0>
   3053c:	e1a01006 	mov	r1, r6
   30540:	e28d2034 	add	r2, sp, #52	; 0x34
   30544:	e3a03014 	mov	r3, #20
   30548:	e59f0278 	ldr	r0, [pc, #632]	; 307c8 <CommandHandler::handleFileEnd(char const*)+0x2c4>
   3054c:	ebfff76b 	bl	2e300 <jsonGetValueForKey>
   30550:	e2506000 	subs	r6, r0, #0
   30554:	1a000060 	bne	306dc <CommandHandler::handleFileEnd(char const*)+0x1d8>
   30558:	e5941868 	ldr	r1, [r4, #2152]	; 0x868
   3055c:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30560:	ebfffd29 	bl	2fa0c <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>
   30564:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   30568:	e1a07000 	mov	r7, r0
   3056c:	e58d0004 	str	r0, [sp, #4]
   30570:	e58d6008 	str	r6, [sp, #8]
   30574:	e58d5000 	str	r5, [sp]
   30578:	e28d004c 	add	r0, sp, #76	; 0x4c
   3057c:	e59f2248 	ldr	r2, [pc, #584]	; 307cc <CommandHandler::handleFileEnd(char const*)+0x2c8>
   30580:	e3a01064 	mov	r1, #100	; 0x64
   30584:	ebfff71e 	bl	2e204 <snprintf>
   30588:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   3058c:	e1550003 	cmp	r5, r3
   30590:	0a000047 	beq	306b4 <CommandHandler::handleFileEnd(char const*)+0x1b0>
   30594:	ebffd990 	bl	26bdc <CLogger::Get()>
   30598:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   3059c:	e3a02002 	mov	r2, #2
   305a0:	e58d3004 	str	r3, [sp, #4]
   305a4:	e58d5008 	str	r5, [sp, #8]
   305a8:	e58d4000 	str	r4, [sp]
   305ac:	e59f321c 	ldr	r3, [pc, #540]	; 307d0 <CommandHandler::handleFileEnd(char const*)+0x2cc>
   305b0:	e59f121c 	ldr	r1, [pc, #540]	; 307d4 <CommandHandler::handleFileEnd(char const*)+0x2d0>
   305b4:	ebffd8c5 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   305b8:	e3a03000 	mov	r3, #0
   305bc:	e28d204c 	add	r2, sp, #76	; 0x4c
   305c0:	e58d3004 	str	r3, [sp, #4]
   305c4:	e58d3000 	str	r3, [sp]
   305c8:	e59f1208 	ldr	r1, [pc, #520]	; 307d8 <CommandHandler::handleFileEnd(char const*)+0x2d4>
   305cc:	e1a00008 	mov	r0, r8
   305d0:	ebfffe3d 	bl	2fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   305d4:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   305d8:	e3500000 	cmp	r0, #0
   305dc:	0a000000 	beq	305e4 <CommandHandler::handleFileEnd(char const*)+0xe0>
   305e0:	ebffeaaf 	bl	2b0a4 <operator delete[](void*)>
   305e4:	e3a05000 	mov	r5, #0
   305e8:	e2887a07 	add	r7, r8, #28672	; 0x7000
   305ec:	e59737f4 	ldr	r3, [r7, #2036]	; 0x7f4
   305f0:	e5845860 	str	r5, [r4, #2144]	; 0x860
   305f4:	e1530005 	cmp	r3, r5
   305f8:	e5845864 	str	r5, [r4, #2148]	; 0x864
   305fc:	0a00006e 	beq	307bc <CommandHandler::handleFileEnd(char const*)+0x2b8>
   30600:	e3a0a0c8 	mov	sl, #200	; 0xc8
   30604:	e1a02005 	mov	r2, r5
   30608:	e2884b16 	add	r4, r8, #22528	; 0x5800
   3060c:	e59f91c8 	ldr	r9, [pc, #456]	; 307dc <CommandHandler::handleFileEnd(char const*)+0x2d8>
   30610:	e28440b4 	add	r4, r4, #180	; 0xb4
   30614:	e28d60b0 	add	r6, sp, #176	; 0xb0
   30618:	e5941000 	ldr	r1, [r4]
   3061c:	e1510002 	cmp	r1, r2
   30620:	0a00000c 	beq	30658 <CommandHandler::handleFileEnd(char const*)+0x154>
   30624:	e5940fa0 	ldr	r0, [r4, #4000]	; 0xfa0
   30628:	e1a03005 	mov	r3, r5
   3062c:	e58d0008 	str	r0, [sp, #8]
   30630:	e58d1004 	str	r1, [sp, #4]
   30634:	e58d2000 	str	r2, [sp]
   30638:	e1a0100a 	mov	r1, sl
   3063c:	e1a02009 	mov	r2, r9
   30640:	e1a00006 	mov	r0, r6
   30644:	ebfff6ee 	bl	2e204 <snprintf>
   30648:	e1a01006 	mov	r1, r6
   3064c:	e1a00008 	mov	r0, r8
   30650:	ebffff89 	bl	3047c <CommandHandler::logDebugMessage(char const*)>
   30654:	e5942000 	ldr	r2, [r4]
   30658:	e59717f4 	ldr	r1, [r7, #2036]	; 0x7f4
   3065c:	e5943fa0 	ldr	r3, [r4, #4000]	; 0xfa0
   30660:	e2855001 	add	r5, r5, #1
   30664:	e1510005 	cmp	r1, r5
   30668:	e0822003 	add	r2, r2, r3
   3066c:	e2844004 	add	r4, r4, #4
   30670:	8affffe8 	bhi	30618 <CommandHandler::handleFileEnd(char const*)+0x114>
   30674:	e2882901 	add	r2, r8, #16384	; 0x4000
   30678:	e5920ff8 	ldr	r0, [r2, #4088]	; 0xff8
   3067c:	e5923ff4 	ldr	r3, [r2, #4084]	; 0xff4
   30680:	e5971804 	ldr	r1, [r7, #2052]	; 0x804
   30684:	e5972800 	ldr	r2, [r7, #2048]	; 0x800
   30688:	e98d0003 	stmib	sp, {r0, r1}
   3068c:	e58d2000 	str	r2, [sp]
   30690:	e3a010c8 	mov	r1, #200	; 0xc8
   30694:	e59f2144 	ldr	r2, [pc, #324]	; 307e0 <CommandHandler::handleFileEnd(char const*)+0x2dc>
   30698:	e1a00006 	mov	r0, r6
   3069c:	ebfff6d8 	bl	2e204 <snprintf>
   306a0:	e1a01006 	mov	r1, r6
   306a4:	e1a00008 	mov	r0, r8
   306a8:	ebffff73 	bl	3047c <CommandHandler::logDebugMessage(char const*)>
   306ac:	e28ddf5e 	add	sp, sp, #376	; 0x178
   306b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   306b4:	e1560007 	cmp	r6, r7
   306b8:	0a000013 	beq	3070c <CommandHandler::handleFileEnd(char const*)+0x208>
   306bc:	ebffd946 	bl	26bdc <CLogger::Get()>
   306c0:	e58d500c 	str	r5, [sp, #12]
   306c4:	e88d00d0 	stm	sp, {r4, r6, r7}
   306c8:	e59f3114 	ldr	r3, [pc, #276]	; 307e4 <CommandHandler::handleFileEnd(char const*)+0x2e0>
   306cc:	e3a02002 	mov	r2, #2
   306d0:	e59f10fc 	ldr	r1, [pc, #252]	; 307d4 <CommandHandler::handleFileEnd(char const*)+0x2d0>
   306d4:	ebffd87d 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   306d8:	eaffffb6 	b	305b8 <CommandHandler::handleFileEnd(char const*)+0xb4>
   306dc:	e28d0034 	add	r0, sp, #52	; 0x34
   306e0:	e3a02010 	mov	r2, #16
   306e4:	e3a01000 	mov	r1, #0
   306e8:	ebffe7b4 	bl	2a5c0 <strtoul>
   306ec:	e1a06000 	mov	r6, r0
   306f0:	eaffff98 	b	30558 <CommandHandler::handleFileEnd(char const*)+0x54>
   306f4:	e28d001c 	add	r0, sp, #28
   306f8:	e3a0200a 	mov	r2, #10
   306fc:	e3a01000 	mov	r1, #0
   30700:	ebffe7ae 	bl	2a5c0 <strtoul>
   30704:	e1a05000 	mov	r5, r0
   30708:	eaffff8b 	b	3053c <CommandHandler::handleFileEnd(char const*)+0x38>
   3070c:	e3a03000 	mov	r3, #0
   30710:	e28d204c 	add	r2, sp, #76	; 0x4c
   30714:	e58d3004 	str	r3, [sp, #4]
   30718:	e58d3000 	str	r3, [sp]
   3071c:	e59f10c4 	ldr	r1, [pc, #196]	; 307e8 <CommandHandler::handleFileEnd(char const*)+0x2e4>
   30720:	e1a00008 	mov	r0, r8
   30724:	ebfffde8 	bl	2fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30728:	e59f10bc 	ldr	r1, [pc, #188]	; 307ec <CommandHandler::handleFileEnd(char const*)+0x2e8>
   3072c:	e2840065 	add	r0, r4, #101	; 0x65
   30730:	ebffe67a 	bl	2a120 <strcasecmp>
   30734:	e3500000 	cmp	r0, #0
   30738:	03a05001 	moveq	r5, #1
   3073c:	13a05000 	movne	r5, #0
   30740:	1a000014 	bne	30798 <CommandHandler::handleFileEnd(char const*)+0x294>
   30744:	ebffd924 	bl	26bdc <CLogger::Get()>
   30748:	e5942864 	ldr	r2, [r4, #2148]	; 0x864
   3074c:	e5943868 	ldr	r3, [r4, #2152]	; 0x868
   30750:	e59f107c 	ldr	r1, [pc, #124]	; 307d4 <CommandHandler::handleFileEnd(char const*)+0x2d0>
   30754:	e58d2008 	str	r2, [sp, #8]
   30758:	e58d3004 	str	r3, [sp, #4]
   3075c:	e58d6010 	str	r6, [sp, #16]
   30760:	e58d600c 	str	r6, [sp, #12]
   30764:	e58d4000 	str	r4, [sp]
   30768:	e59f3080 	ldr	r3, [pc, #128]	; 307f0 <CommandHandler::handleFileEnd(char const*)+0x2ec>
   3076c:	e3a02004 	mov	r2, #4
   30770:	ebffd856 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30774:	e59f0078 	ldr	r0, [pc, #120]	; 307f4 <CommandHandler::handleFileEnd(char const*)+0x2f0>
   30778:	ebfff5f7 	bl	2df5c <microsDelay>
   3077c:	e5943868 	ldr	r3, [r4, #2152]	; 0x868
   30780:	e5942860 	ldr	r2, [r4, #2144]	; 0x860
   30784:	e284108e 	add	r1, r4, #142	; 0x8e
   30788:	e58d5000 	str	r5, [sp]
   3078c:	e1a00008 	mov	r0, r8
   30790:	ebfffd59 	bl	2fcfc <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>
   30794:	eaffff8e 	b	305d4 <CommandHandler::handleFileEnd(char const*)+0xd0>
   30798:	ebffd90f 	bl	26bdc <CLogger::Get()>
   3079c:	e5943868 	ldr	r3, [r4, #2152]	; 0x868
   307a0:	e3a02004 	mov	r2, #4
   307a4:	e58d3004 	str	r3, [sp, #4]
   307a8:	e58d4000 	str	r4, [sp]
   307ac:	e59f3044 	ldr	r3, [pc, #68]	; 307f8 <CommandHandler::handleFileEnd(char const*)+0x2f4>
   307b0:	e59f101c 	ldr	r1, [pc, #28]	; 307d4 <CommandHandler::handleFileEnd(char const*)+0x2d0>
   307b4:	ebffd845 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   307b8:	eaffffef 	b	3077c <CommandHandler::handleFileEnd(char const*)+0x278>
   307bc:	e28d60b0 	add	r6, sp, #176	; 0xb0
   307c0:	eaffffab 	b	30674 <CommandHandler::handleFileEnd(char const*)+0x170>
   307c4:	000464e4 	.word	0x000464e4
   307c8:	000464f0 	.word	0x000464f0
   307cc:	000464f4 	.word	0x000464f4
   307d0:	00046538 	.word	0x00046538
   307d4:	000463c8 	.word	0x000463c8
   307d8:	0004656c 	.word	0x0004656c
   307dc:	00046684 	.word	0x00046684
   307e0:	00046648 	.word	0x00046648
   307e4:	00046578 	.word	0x00046578
   307e8:	000465c4 	.word	0x000465c4
   307ec:	000465d0 	.word	0x000465d0
   307f0:	000465dc 	.word	0x000465dc
   307f4:	000186a0 	.word	0x000186a0
   307f8:	00046630 	.word	0x00046630

000307fc <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)>:
   307fc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   30800:	e24ddc57 	sub	sp, sp, #22272	; 0x5700
   30804:	e24dd0b4 	sub	sp, sp, #180	; 0xb4
   30808:	e28dc0f0 	add	ip, sp, #240	; 0xf0
   3080c:	e1a05000 	mov	r5, r0
   30810:	e1a08002 	mov	r8, r2
   30814:	e1a07003 	mov	r7, r3
   30818:	e1a0200c 	mov	r2, ip
   3081c:	e3a030c8 	mov	r3, #200	; 0xc8
   30820:	e59f026c 	ldr	r0, [pc, #620]	; 30a94 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x298>
   30824:	e58dc008 	str	ip, [sp, #8]
   30828:	e1a04001 	mov	r4, r1
   3082c:	ebfff6b3 	bl	2e300 <jsonGetValueForKey>
   30830:	e3500000 	cmp	r0, #0
   30834:	1a000002 	bne	30844 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x48>
   30838:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   3083c:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   30840:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30844:	e3a06000 	mov	r6, #0
   30848:	e3a03014 	mov	r3, #20
   3084c:	e28d2014 	add	r2, sp, #20
   30850:	e1a01004 	mov	r1, r4
   30854:	e59f023c 	ldr	r0, [pc, #572]	; 30a98 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x29c>
   30858:	e5cd6014 	strb	r6, [sp, #20]
   3085c:	ebfff6a7 	bl	2e300 <jsonGetValueForKey>
   30860:	e1a01006 	mov	r1, r6
   30864:	e3a0200a 	mov	r2, #10
   30868:	e28d0014 	add	r0, sp, #20
   3086c:	e5cd61bc 	strb	r6, [sp, #444]	; 0x1bc
   30870:	ebffe752 	bl	2a5c0 <strtoul>
   30874:	e59f1220 	ldr	r1, [pc, #544]	; 30a9c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a0>
   30878:	e1a09000 	mov	r9, r0
   3087c:	e59d0008 	ldr	r0, [sp, #8]
   30880:	ebffe626 	bl	2a120 <strcasecmp>
   30884:	e1500006 	cmp	r0, r6
   30888:	0a00000a 	beq	308b8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0xbc>
   3088c:	e59f120c 	ldr	r1, [pc, #524]	; 30aa0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a4>
   30890:	e59d0008 	ldr	r0, [sp, #8]
   30894:	ebffe621 	bl	2a120 <strcasecmp>
   30898:	e3500000 	cmp	r0, #0
   3089c:	1a00000b 	bne	308d0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0xd4>
   308a0:	e1a03007 	mov	r3, r7
   308a4:	e1a02008 	mov	r2, r8
   308a8:	e1a01004 	mov	r1, r4
   308ac:	e1a00005 	mov	r0, r5
   308b0:	ebfffe8c 	bl	302e8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)>
   308b4:	eaffffdf 	b	30838 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   308b8:	e1a01004 	mov	r1, r4
   308bc:	e1a00005 	mov	r0, r5
   308c0:	ebfffe42 	bl	301d0 <CommandHandler::handleFileStart(char const*)>
   308c4:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   308c8:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   308cc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   308d0:	e59f11cc 	ldr	r1, [pc, #460]	; 30aa4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a8>
   308d4:	e59d0008 	ldr	r0, [sp, #8]
   308d8:	ebffe610 	bl	2a120 <strcasecmp>
   308dc:	e3500000 	cmp	r0, #0
   308e0:	0a00003e 	beq	309e0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1e4>
   308e4:	e59f11bc 	ldr	r1, [pc, #444]	; 30aa8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2ac>
   308e8:	e59d0008 	ldr	r0, [sp, #8]
   308ec:	ebffe60b 	bl	2a120 <strcasecmp>
   308f0:	e3500000 	cmp	r0, #0
   308f4:	1a00003d 	bne	309f0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1f4>
   308f8:	e28d3f6f 	add	r3, sp, #444	; 0x1bc
   308fc:	e1a01008 	mov	r1, r8
   30900:	e1a00003 	mov	r0, r3
   30904:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   30908:	e58d300c 	str	r3, [sp, #12]
   3090c:	ebfff5c5 	bl	2e028 <strlcpy>
   30910:	e59d000c 	ldr	r0, [sp, #12]
   30914:	ebffe5dc 	bl	2a08c <strlen>
   30918:	e2477001 	sub	r7, r7, #1
   3091c:	e0577000 	subs	r7, r7, r0
   30920:	e0888000 	add	r8, r8, r0
   30924:	e3a030c8 	mov	r3, #200	; 0xc8
   30928:	e59d2008 	ldr	r2, [sp, #8]
   3092c:	e59d100c 	ldr	r1, [sp, #12]
   30930:	e59f015c 	ldr	r0, [pc, #348]	; 30a94 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x298>
   30934:	12888001 	addne	r8, r8, #1
   30938:	ebfff670 	bl	2e300 <jsonGetValueForKey>
   3093c:	e3a03014 	mov	r3, #20
   30940:	e59d100c 	ldr	r1, [sp, #12]
   30944:	e08d2003 	add	r2, sp, r3
   30948:	e59f0148 	ldr	r0, [pc, #328]	; 30a98 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x29c>
   3094c:	ebfff66b 	bl	2e300 <jsonGetValueForKey>
   30950:	e59f1154 	ldr	r1, [pc, #340]	; 30aac <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b0>
   30954:	e59d0008 	ldr	r0, [sp, #8]
   30958:	ebffe5f0 	bl	2a120 <strcasecmp>
   3095c:	e2501000 	subs	r1, r0, #0
   30960:	0a000042 	beq	30a70 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x274>
   30964:	e3a0c000 	mov	ip, #0
   30968:	e59f0140 	ldr	r0, [pc, #320]	; 30ab0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b4>
   3096c:	e28d4e99 	add	r4, sp, #2448	; 0x990
   30970:	e28de028 	add	lr, sp, #40	; 0x28
   30974:	e1a03007 	mov	r3, r7
   30978:	e59d100c 	ldr	r1, [sp, #12]
   3097c:	e1a02008 	mov	r2, r8
   30980:	e58d0004 	str	r0, [sp, #4]
   30984:	e58d4000 	str	r4, [sp]
   30988:	e1a00005 	mov	r0, r5
   3098c:	e58de00c 	str	lr, [sp, #12]
   30990:	e5cdc990 	strb	ip, [sp, #2448]	; 0x990
   30994:	ebfffc92 	bl	2fbe4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>
   30998:	e59d1008 	ldr	r1, [sp, #8]
   3099c:	e3a020c8 	mov	r2, #200	; 0xc8
   309a0:	e59d000c 	ldr	r0, [sp, #12]
   309a4:	ebfff59f 	bl	2e028 <strlcpy>
   309a8:	e3a020c8 	mov	r2, #200	; 0xc8
   309ac:	e59f1100 	ldr	r1, [pc, #256]	; 30ab4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b8>
   309b0:	e59d000c 	ldr	r0, [sp, #12]
   309b4:	ebfff5b7 	bl	2e098 <strlcat>
   309b8:	e1a00004 	mov	r0, r4
   309bc:	ebffe5b2 	bl	2a08c <strlen>
   309c0:	e3500000 	cmp	r0, #0
   309c4:	0affff9b 	beq	30838 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   309c8:	e1a03004 	mov	r3, r4
   309cc:	e59d200c 	ldr	r2, [sp, #12]
   309d0:	e1a01009 	mov	r1, r9
   309d4:	e1a00005 	mov	r0, r5
   309d8:	ebfffdb4 	bl	300b0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>
   309dc:	eaffff95 	b	30838 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   309e0:	e1a01004 	mov	r1, r4
   309e4:	e1a00005 	mov	r0, r5
   309e8:	ebfffec5 	bl	30504 <CommandHandler::handleFileEnd(char const*)>
   309ec:	eaffff91 	b	30838 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   309f0:	e59f00b8 	ldr	r0, [pc, #184]	; 30ab0 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b4>
   309f4:	e28d9e99 	add	r9, sp, #2448	; 0x990
   309f8:	e28dc028 	add	ip, sp, #40	; 0x28
   309fc:	e1a03007 	mov	r3, r7
   30a00:	e1a02008 	mov	r2, r8
   30a04:	e1a01004 	mov	r1, r4
   30a08:	e58d0004 	str	r0, [sp, #4]
   30a0c:	e58d9000 	str	r9, [sp]
   30a10:	e1a00005 	mov	r0, r5
   30a14:	e58dc00c 	str	ip, [sp, #12]
   30a18:	e5cd6990 	strb	r6, [sp, #2448]	; 0x990
   30a1c:	ebfffc70 	bl	2fbe4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>
   30a20:	e59d1008 	ldr	r1, [sp, #8]
   30a24:	e3a020c8 	mov	r2, #200	; 0xc8
   30a28:	e59d000c 	ldr	r0, [sp, #12]
   30a2c:	ebfff57d 	bl	2e028 <strlcpy>
   30a30:	e3a020c8 	mov	r2, #200	; 0xc8
   30a34:	e59f1078 	ldr	r1, [pc, #120]	; 30ab4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b8>
   30a38:	e59d000c 	ldr	r0, [sp, #12]
   30a3c:	ebfff595 	bl	2e098 <strlcat>
   30a40:	e1a00009 	mov	r0, r9
   30a44:	ebffe590 	bl	2a08c <strlen>
   30a48:	e3500000 	cmp	r0, #0
   30a4c:	0affff79 	beq	30838 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   30a50:	e58d6004 	str	r6, [sp, #4]
   30a54:	e58d6000 	str	r6, [sp]
   30a58:	e1a03006 	mov	r3, r6
   30a5c:	e1a02009 	mov	r2, r9
   30a60:	e59d100c 	ldr	r1, [sp, #12]
   30a64:	e1a00005 	mov	r0, r5
   30a68:	ebfffd17 	bl	2fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30a6c:	eaffff71 	b	30838 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   30a70:	e28d0014 	add	r0, sp, #20
   30a74:	e3a0200a 	mov	r2, #10
   30a78:	ebffe6d0 	bl	2a5c0 <strtoul>
   30a7c:	e59f3034 	ldr	r3, [pc, #52]	; 30ab8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2bc>
   30a80:	e1a01000 	mov	r1, r0
   30a84:	e59f2030 	ldr	r2, [pc, #48]	; 30abc <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c0>
   30a88:	e1a00005 	mov	r0, r5
   30a8c:	ebfffd87 	bl	300b0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>
   30a90:	eaffff68 	b	30838 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   30a94:	0003f0d4 	.word	0x0003f0d4
   30a98:	000466bc 	.word	0x000466bc
   30a9c:	000466c4 	.word	0x000466c4
   30aa0:	000466cc 	.word	0x000466cc
   30aa4:	000466d4 	.word	0x000466d4
   30aa8:	00046478 	.word	0x00046478
   30aac:	000466dc 	.word	0x000466dc
   30ab0:	00004e20 	.word	0x00004e20
   30ab4:	000466fc 	.word	0x000466fc
   30ab8:	000466e4 	.word	0x000466e4
   30abc:	000466f0 	.word	0x000466f0

00030ac0 <CommandHandler::hdlcFrameRx(unsigned char const*, unsigned int)>:
   30ac0:	e92d4070 	push	{r4, r5, r6, lr}
   30ac4:	e24dde7e 	sub	sp, sp, #2016	; 0x7e0
   30ac8:	e3520e7d 	cmp	r2, #2000	; 0x7d0
   30acc:	e28d300c 	add	r3, sp, #12
   30ad0:	e1a04002 	mov	r4, r2
   30ad4:	e1a06000 	mov	r6, r0
   30ad8:	92822001 	addls	r2, r2, #1
   30adc:	83a02e7d 	movhi	r2, #2000	; 0x7d0
   30ae0:	e1a00003 	mov	r0, r3
   30ae4:	e1a05001 	mov	r5, r1
   30ae8:	e58d3004 	str	r3, [sp, #4]
   30aec:	ebfff54d 	bl	2e028 <strlcpy>
   30af0:	e59d0004 	ldr	r0, [sp, #4]
   30af4:	ebffe564 	bl	2a08c <strlen>
   30af8:	e2444001 	sub	r4, r4, #1
   30afc:	e2802001 	add	r2, r0, #1
   30b00:	e0443000 	sub	r3, r4, r0
   30b04:	e59d1004 	ldr	r1, [sp, #4]
   30b08:	e0852002 	add	r2, r5, r2
   30b0c:	e1a00006 	mov	r0, r6
   30b10:	ebffff39 	bl	307fc <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)>
   30b14:	e28dde7e 	add	sp, sp, #2016	; 0x7e0
   30b18:	e8bd8070 	pop	{r4, r5, r6, pc}

00030b1c <CommandHandler::hdlcFrameRxStatic(unsigned char const*, unsigned int)>:
   30b1c:	e59f3018 	ldr	r3, [pc, #24]	; 30b3c <CommandHandler::hdlcFrameRxStatic(unsigned char const*, unsigned int)+0x20>
   30b20:	e5933000 	ldr	r3, [r3]
   30b24:	e3530000 	cmp	r3, #0
   30b28:	012fff1e 	bxeq	lr
   30b2c:	e1a02001 	mov	r2, r1
   30b30:	e1a01000 	mov	r1, r0
   30b34:	e1a00003 	mov	r0, r3
   30b38:	eaffffe0 	b	30ac0 <CommandHandler::hdlcFrameRx(unsigned char const*, unsigned int)>
   30b3c:	0004e2ec 	.word	0x0004e2ec

00030b40 <CommandHandler::logDebugJson(char const*)>:
   30b40:	e3a03000 	mov	r3, #0
   30b44:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   30b48:	e24dd00c 	sub	sp, sp, #12
   30b4c:	e1a02001 	mov	r2, r1
   30b50:	e58d3004 	str	r3, [sp, #4]
   30b54:	e58d3000 	str	r3, [sp]
   30b58:	e59f1008 	ldr	r1, [pc, #8]	; 30b68 <CommandHandler::logDebugJson(char const*)+0x28>
   30b5c:	ebfffcda 	bl	2fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30b60:	e28dd00c 	add	sp, sp, #12
   30b64:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   30b68:	000464e0 	.word	0x000464e0

00030b6c <CommandHandler::logDebug(char const*, char const*, char const*)>:
   30b6c:	e92d4030 	push	{r4, r5, lr}
   30b70:	e1a05001 	mov	r5, r1
   30b74:	e24ddd9e 	sub	sp, sp, #10112	; 0x2780
   30b78:	e24dd00c 	sub	sp, sp, #12
   30b7c:	e28d1074 	add	r1, sp, #116	; 0x74
   30b80:	e1a00003 	mov	r0, r3
   30b84:	e1a04002 	mov	r4, r2
   30b88:	e59f20fc 	ldr	r2, [pc, #252]	; 30c8c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30b8c:	e58d100c 	str	r1, [sp, #12]
   30b90:	ebfff685 	bl	2e5ac <jsonEscape>
   30b94:	e28d3b05 	add	r3, sp, #5120	; 0x1400
   30b98:	e2833008 	add	r3, r3, #8
   30b9c:	e243300c 	sub	r3, r3, #12
   30ba0:	e1a00003 	mov	r0, r3
   30ba4:	e59f20e0 	ldr	r2, [pc, #224]	; 30c8c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30ba8:	e59f10e0 	ldr	r1, [pc, #224]	; 30c90 <CommandHandler::logDebug(char const*, char const*, char const*)+0x124>
   30bac:	e58d3008 	str	r3, [sp, #8]
   30bb0:	ebfff51c 	bl	2e028 <strlcpy>
   30bb4:	e59d100c 	ldr	r1, [sp, #12]
   30bb8:	e59f20cc 	ldr	r2, [pc, #204]	; 30c8c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30bbc:	e59d0008 	ldr	r0, [sp, #8]
   30bc0:	ebfff534 	bl	2e098 <strlcat>
   30bc4:	e59f20c0 	ldr	r2, [pc, #192]	; 30c8c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30bc8:	e59f10c4 	ldr	r1, [pc, #196]	; 30c94 <CommandHandler::logDebug(char const*, char const*, char const*)+0x128>
   30bcc:	e59d0008 	ldr	r0, [sp, #8]
   30bd0:	ebfff530 	bl	2e098 <strlcat>
   30bd4:	e59f20b0 	ldr	r2, [pc, #176]	; 30c8c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30bd8:	e59f10b8 	ldr	r1, [pc, #184]	; 30c98 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   30bdc:	e59d0008 	ldr	r0, [sp, #8]
   30be0:	ebfff52c 	bl	2e098 <strlcat>
   30be4:	e1a01005 	mov	r1, r5
   30be8:	e59f209c 	ldr	r2, [pc, #156]	; 30c8c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30bec:	e59d0008 	ldr	r0, [sp, #8]
   30bf0:	ebfff528 	bl	2e098 <strlcat>
   30bf4:	e59f2090 	ldr	r2, [pc, #144]	; 30c8c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30bf8:	e59f1094 	ldr	r1, [pc, #148]	; 30c94 <CommandHandler::logDebug(char const*, char const*, char const*)+0x128>
   30bfc:	e59d0008 	ldr	r0, [sp, #8]
   30c00:	ebfff524 	bl	2e098 <strlcat>
   30c04:	e59f2080 	ldr	r2, [pc, #128]	; 30c8c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30c08:	e59f108c 	ldr	r1, [pc, #140]	; 30c9c <CommandHandler::logDebug(char const*, char const*, char const*)+0x130>
   30c0c:	e59d0008 	ldr	r0, [sp, #8]
   30c10:	ebfff520 	bl	2e098 <strlcat>
   30c14:	ebfff4c8 	bl	2df3c <micros>
   30c18:	e28d3010 	add	r3, sp, #16
   30c1c:	e58d300c 	str	r3, [sp, #12]
   30c20:	e59f2078 	ldr	r2, [pc, #120]	; 30ca0 <CommandHandler::logDebug(char const*, char const*, char const*)+0x134>
   30c24:	e1a03000 	mov	r3, r0
   30c28:	e3a01064 	mov	r1, #100	; 0x64
   30c2c:	e58d4000 	str	r4, [sp]
   30c30:	e59d000c 	ldr	r0, [sp, #12]
   30c34:	ebfff572 	bl	2e204 <snprintf>
   30c38:	e59d100c 	ldr	r1, [sp, #12]
   30c3c:	e59f2048 	ldr	r2, [pc, #72]	; 30c8c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30c40:	e59d0008 	ldr	r0, [sp, #8]
   30c44:	ebfff513 	bl	2e098 <strlcat>
   30c48:	e59d0008 	ldr	r0, [sp, #8]
   30c4c:	e59f2038 	ldr	r2, [pc, #56]	; 30c8c <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30c50:	e59f104c 	ldr	r1, [pc, #76]	; 30ca4 <CommandHandler::logDebug(char const*, char const*, char const*)+0x138>
   30c54:	ebfff50f 	bl	2e098 <strlcat>
   30c58:	e59f3048 	ldr	r3, [pc, #72]	; 30ca8 <CommandHandler::logDebug(char const*, char const*, char const*)+0x13c>
   30c5c:	e5930000 	ldr	r0, [r3]
   30c60:	e3500000 	cmp	r0, #0
   30c64:	0a000005 	beq	30c80 <CommandHandler::logDebug(char const*, char const*, char const*)+0x114>
   30c68:	e3a03000 	mov	r3, #0
   30c6c:	e59d2008 	ldr	r2, [sp, #8]
   30c70:	e58d3004 	str	r3, [sp, #4]
   30c74:	e58d3000 	str	r3, [sp]
   30c78:	e59f102c 	ldr	r1, [pc, #44]	; 30cac <CommandHandler::logDebug(char const*, char const*, char const*)+0x140>
   30c7c:	ebfffc92 	bl	2fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30c80:	e28ddd9e 	add	sp, sp, #10112	; 0x2780
   30c84:	e28dd00c 	add	sp, sp, #12
   30c88:	e8bd8030 	pop	{r4, r5, pc}
   30c8c:	00001388 	.word	0x00001388
   30c90:	000464d8 	.word	0x000464d8
   30c94:	00046704 	.word	0x00046704
   30c98:	00046708 	.word	0x00046708
   30c9c:	00046710 	.word	0x00046710
   30ca0:	00046718 	.word	0x00046718
   30ca4:	0004700c 	.word	0x0004700c
   30ca8:	0004e2ec 	.word	0x0004e2ec
   30cac:	000464e0 	.word	0x000464e0

00030cb0 <CommandHandler::service()>:
   30cb0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   30cb4:	e2804a05 	add	r4, r0, #20480	; 0x5000
   30cb8:	e5942870 	ldr	r2, [r4, #2160]	; 0x870
   30cbc:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
   30cc0:	e24dd084 	sub	sp, sp, #132	; 0x84
   30cc4:	e1520003 	cmp	r2, r3
   30cc8:	0a000016 	beq	30d28 <CommandHandler::service()+0x78>
   30ccc:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
   30cd0:	e5942874 	ldr	r2, [r4, #2164]	; 0x874
   30cd4:	e0803003 	add	r3, r0, r3
   30cd8:	e2822001 	add	r2, r2, #1
   30cdc:	e2833b16 	add	r3, r3, #22528	; 0x5800
   30ce0:	e5d3307c 	ldrb	r3, [r3, #124]	; 0x7c
   30ce4:	e5842874 	str	r2, [r4, #2164]	; 0x874
   30ce8:	e5941874 	ldr	r1, [r4, #2164]	; 0x874
   30cec:	e5942878 	ldr	r2, [r4, #2168]	; 0x878
   30cf0:	e1a05000 	mov	r5, r0
   30cf4:	e1510002 	cmp	r1, r2
   30cf8:	23a02000 	movcs	r2, #0
   30cfc:	e3a01064 	mov	r1, #100	; 0x64
   30d00:	25842874 	strcs	r2, [r4, #2164]	; 0x874
   30d04:	e28d001c 	add	r0, sp, #28
   30d08:	e59f20a8 	ldr	r2, [pc, #168]	; 30db8 <CommandHandler::service()+0x108>
   30d0c:	ebfff53c 	bl	2e204 <snprintf>
   30d10:	e28d001c 	add	r0, sp, #28
   30d14:	ebffe4dc 	bl	2a08c <strlen>
   30d18:	e28d101c 	add	r1, sp, #28
   30d1c:	e2802001 	add	r2, r0, #1
   30d20:	e2850f65 	add	r0, r5, #404	; 0x194
   30d24:	ebfffafc 	bl	2f91c <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>
   30d28:	e5943860 	ldr	r3, [r4, #2144]	; 0x860
   30d2c:	e3530000 	cmp	r3, #0
   30d30:	0a000006 	beq	30d50 <CommandHandler::service()+0xa0>
   30d34:	e59f5080 	ldr	r5, [pc, #128]	; 30dbc <CommandHandler::service()+0x10c>
   30d38:	ebfff480 	bl	2df40 <millis>
   30d3c:	e1a02005 	mov	r2, r5
   30d40:	e59418b0 	ldr	r1, [r4, #2224]	; 0x8b0
   30d44:	ebfff49a 	bl	2dfb4 <isTimeout>
   30d48:	e3500000 	cmp	r0, #0
   30d4c:	1a000001 	bne	30d58 <CommandHandler::service()+0xa8>
   30d50:	e28dd084 	add	sp, sp, #132	; 0x84
   30d54:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30d58:	ebffd79f 	bl	26bdc <CLogger::Get()>
   30d5c:	e594986c 	ldr	r9, [r4, #2156]	; 0x86c
   30d60:	e1a06000 	mov	r6, r0
   30d64:	e5947868 	ldr	r7, [r4, #2152]	; 0x868
   30d68:	e59488b0 	ldr	r8, [r4, #2224]	; 0x8b0
   30d6c:	ebfff473 	bl	2df40 <millis>
   30d70:	e58d9000 	str	r9, [sp]
   30d74:	e58d000c 	str	r0, [sp, #12]
   30d78:	e98d0180 	stmib	sp, {r7, r8}
   30d7c:	e1a00006 	mov	r0, r6
   30d80:	e58d5010 	str	r5, [sp, #16]
   30d84:	e59f3034 	ldr	r3, [pc, #52]	; 30dc0 <CommandHandler::service()+0x110>
   30d88:	e3a02004 	mov	r2, #4
   30d8c:	e59f1030 	ldr	r1, [pc, #48]	; 30dc4 <CommandHandler::service()+0x114>
   30d90:	ebffd6ce 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30d94:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30d98:	e3500000 	cmp	r0, #0
   30d9c:	0a000000 	beq	30da4 <CommandHandler::service()+0xf4>
   30da0:	ebffe8bf 	bl	2b0a4 <operator delete[](void*)>
   30da4:	e3a03000 	mov	r3, #0
   30da8:	e5843860 	str	r3, [r4, #2144]	; 0x860
   30dac:	e5843864 	str	r3, [r4, #2148]	; 0x864
   30db0:	e28dd084 	add	sp, sp, #132	; 0x84
   30db4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30db8:	00046720 	.word	0x00046720
   30dbc:	00000bb8 	.word	0x00000bb8
   30dc0:	00046740 	.word	0x00046740
   30dc4:	000463c8 	.word	0x000463c8

00030dc8 <CommandHandler::fileReceiveCleardown()>:
   30dc8:	e92d4010 	push	{r4, lr}
   30dcc:	e2804a05 	add	r4, r0, #20480	; 0x5000
   30dd0:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30dd4:	e3500000 	cmp	r0, #0
   30dd8:	0a000000 	beq	30de0 <CommandHandler::fileReceiveCleardown()+0x18>
   30ddc:	ebffe8b0 	bl	2b0a4 <operator delete[](void*)>
   30de0:	e3a03000 	mov	r3, #0
   30de4:	e5843860 	str	r3, [r4, #2144]	; 0x860
   30de8:	e5843864 	str	r3, [r4, #2148]	; 0x864
   30dec:	e8bd8010 	pop	{r4, pc}

00030df0 <CommandHandler::~CommandHandler()>:
   30df0:	e92d4010 	push	{r4, lr}
   30df4:	e1a04000 	mov	r4, r0
   30df8:	e2800f65 	add	r0, r0, #404	; 0x194
   30dfc:	ebfff841 	bl	2ef08 <MiniHDLC::~MiniHDLC()>
   30e00:	e1a00004 	mov	r0, r4
   30e04:	e8bd8010 	pop	{r4, pc}

00030e08 <CommsManager::handleRxMsg(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   30e08:	e3a00000 	mov	r0, #0
   30e0c:	e12fff1e 	bx	lr

00030e10 <CommsManager::serialPutStr(unsigned char const*, unsigned int)>:
   30e10:	e59f3020 	ldr	r3, [pc, #32]	; 30e38 <CommsManager::serialPutStr(unsigned char const*, unsigned int)+0x28>
   30e14:	e5933000 	ldr	r3, [r3]
   30e18:	e2833a07 	add	r3, r3, #28672	; 0x7000
   30e1c:	e593380c 	ldr	r3, [r3, #2060]	; 0x80c
   30e20:	e3530000 	cmp	r3, #0
   30e24:	012fff1e 	bxeq	lr
   30e28:	e1a02001 	mov	r2, r1
   30e2c:	e1a01000 	mov	r1, r0
   30e30:	e1a00003 	mov	r0, r3
   30e34:	eafff298 	b	2d89c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>
   30e38:	0004e2f8 	.word	0x0004e2f8

00030e3c <CommsManager::serialTxAvailable()>:
   30e3c:	e59f3014 	ldr	r3, [pc, #20]	; 30e58 <CommsManager::serialTxAvailable()+0x1c>
   30e40:	e5933000 	ldr	r3, [r3]
   30e44:	e2833a07 	add	r3, r3, #28672	; 0x7000
   30e48:	e593080c 	ldr	r0, [r3, #2060]	; 0x80c
   30e4c:	e3500000 	cmp	r0, #0
   30e50:	012fff1e 	bxeq	lr
   30e54:	eafff254 	b	2d7ac <CUartMaxiSerialDevice::AvailableForWrite()>
   30e58:	0004e2f8 	.word	0x0004e2f8

00030e5c <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)>:
   30e5c:	e92d4030 	push	{r4, r5, lr}
   30e60:	e1a04000 	mov	r4, r0
   30e64:	e1a05001 	mov	r5, r1
   30e68:	e24dd014 	sub	sp, sp, #20
   30e6c:	ebffd75a 	bl	26bdc <CLogger::Get()>
   30e70:	e0843005 	add	r3, r4, r5
   30e74:	e5531001 	ldrb	r1, [r3, #-1]
   30e78:	e5d42010 	ldrb	r2, [r4, #16]
   30e7c:	e5d43000 	ldrb	r3, [r4]
   30e80:	e58d100c 	str	r1, [sp, #12]
   30e84:	e58d2008 	str	r2, [sp, #8]
   30e88:	e58d3004 	str	r3, [sp, #4]
   30e8c:	e3a02004 	mov	r2, #4
   30e90:	e59f3028 	ldr	r3, [pc, #40]	; 30ec0 <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)+0x64>
   30e94:	e59f1028 	ldr	r1, [pc, #40]	; 30ec4 <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)+0x68>
   30e98:	e58d5000 	str	r5, [sp]
   30e9c:	ebffd68b 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30ea0:	e59f0020 	ldr	r0, [pc, #32]	; 30ec8 <CommsManager::registerPendingOTA(unsigned char const*, unsigned int)+0x6c>
   30ea4:	ebfff42c 	bl	2df5c <microsDelay>
   30ea8:	e1a00004 	mov	r0, r4
   30eac:	e1a01005 	mov	r1, r5
   30eb0:	ebffe771 	bl	2ac7c <EnableChainBoot>
   30eb4:	e3a00001 	mov	r0, #1
   30eb8:	e28dd014 	add	sp, sp, #20
   30ebc:	e8bd8030 	pop	{r4, r5, pc}
   30ec0:	0004679c 	.word	0x0004679c
   30ec4:	000467d8 	.word	0x000467d8
   30ec8:	000186a0 	.word	0x000186a0

00030ecc <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)>:
   30ecc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   30ed0:	e1a04000 	mov	r4, r0
   30ed4:	e24dd00c 	sub	sp, sp, #12
   30ed8:	e1a06001 	mov	r6, r1
   30edc:	e1a09002 	mov	r9, r2
   30ee0:	ebfffae5 	bl	2fa7c <CommandHandler::CommandHandler()>
   30ee4:	e3a00000 	mov	r0, #0
   30ee8:	e2843a07 	add	r3, r4, #28672	; 0x7000
   30eec:	e59f8054 	ldr	r8, [pc, #84]	; 30f48 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x7c>
   30ef0:	e583680c 	str	r6, [r3, #2060]	; 0x80c
   30ef4:	e59fc050 	ldr	ip, [pc, #80]	; 30f4c <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x80>
   30ef8:	e59fe050 	ldr	lr, [pc, #80]	; 30f50 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x84>
   30efc:	e59f7050 	ldr	r7, [pc, #80]	; 30f54 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x88>
   30f00:	e59f5050 	ldr	r5, [pc, #80]	; 30f58 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x8c>
   30f04:	e59f6050 	ldr	r6, [pc, #80]	; 30f5c <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x90>
   30f08:	e5839810 	str	r9, [r3, #2064]	; 0x810
   30f0c:	e5830818 	str	r0, [r3, #2072]	; 0x818
   30f10:	e5830814 	str	r0, [r3, #2068]	; 0x814
   30f14:	e1a01004 	mov	r1, r4
   30f18:	e58d0004 	str	r0, [sp, #4]
   30f1c:	e58d8000 	str	r8, [sp]
   30f20:	e1a00004 	mov	r0, r4
   30f24:	e59f3034 	ldr	r3, [pc, #52]	; 30f60 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x94>
   30f28:	e3a02001 	mov	r2, #1
   30f2c:	e5874000 	str	r4, [r7]
   30f30:	e5856000 	str	r6, [r5]
   30f34:	e58ce000 	str	lr, [ip]
   30f38:	ebfffafe 	bl	2fb38 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   30f3c:	e1a00004 	mov	r0, r4
   30f40:	e28dd00c 	add	sp, sp, #12
   30f44:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30f48:	00030e5c 	.word	0x00030e5c
   30f4c:	0004e2f4 	.word	0x0004e2f4
   30f50:	00030e3c 	.word	0x00030e3c
   30f54:	0004e2f8 	.word	0x0004e2f8
   30f58:	0004e2f0 	.word	0x0004e2f0
   30f5c:	00030e10 	.word	0x00030e10
   30f60:	00030e08 	.word	0x00030e08

00030f64 <CommsManager::~CommsManager()>:
   30f64:	e92d4010 	push	{r4, lr}
   30f68:	e1a04000 	mov	r4, r0
   30f6c:	ebffff9f 	bl	30df0 <CommandHandler::~CommandHandler()>
   30f70:	e1a00004 	mov	r0, r4
   30f74:	e8bd8010 	pop	{r4, pc}

00030f78 <CommsManager::setup()>:
   30f78:	e3a00001 	mov	r0, #1
   30f7c:	e12fff1e 	bx	lr

00030f80 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)>:
   30f80:	e92d4010 	push	{r4, lr}
   30f84:	e1a04001 	mov	r4, r1
   30f88:	e24dd008 	sub	sp, sp, #8
   30f8c:	ebffd712 	bl	26bdc <CLogger::Get()>
   30f90:	e59fe04c 	ldr	lr, [pc, #76]	; 30fe4 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x64>
   30f94:	e5d41000 	ldrb	r1, [r4]
   30f98:	e59e3004 	ldr	r3, [lr, #4]
   30f9c:	e5d42001 	ldrb	r2, [r4, #1]
   30fa0:	e59f4040 	ldr	r4, [pc, #64]	; 30fe8 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x68>
   30fa4:	e283c001 	add	ip, r3, #1
   30fa8:	e0822401 	add	r2, r2, r1, lsl #8
   30fac:	e58d2004 	str	r2, [sp, #4]
   30fb0:	e58d3000 	str	r3, [sp]
   30fb4:	e1a01004 	mov	r1, r4
   30fb8:	e59f302c 	ldr	r3, [pc, #44]	; 30fec <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x6c>
   30fbc:	e3a02003 	mov	r2, #3
   30fc0:	e58ec004 	str	ip, [lr, #4]
   30fc4:	ebffd641 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30fc8:	ebffd703 	bl	26bdc <CLogger::Get()>
   30fcc:	e1a01004 	mov	r1, r4
   30fd0:	e3a02003 	mov	r2, #3
   30fd4:	e59f3014 	ldr	r3, [pc, #20]	; 30ff0 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x70>
   30fd8:	e28dd008 	add	sp, sp, #8
   30fdc:	e8bd4010 	pop	{r4, lr}
   30fe0:	eaffd63a 	b	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30fe4:	0004e2f8 	.word	0x0004e2f8
   30fe8:	000467d8 	.word	0x000467d8
   30fec:	000467e8 	.word	0x000467e8
   30ff0:	000467fc 	.word	0x000467fc

00030ff4 <CommsManager::hdlcFrameRxCBStatic(unsigned char const*, unsigned int)>:
   30ff4:	e59f300c 	ldr	r3, [pc, #12]	; 31008 <CommsManager::hdlcFrameRxCBStatic(unsigned char const*, unsigned int)+0x14>
   30ff8:	e1a02001 	mov	r2, r1
   30ffc:	e1a01000 	mov	r1, r0
   31000:	e5930000 	ldr	r0, [r3]
   31004:	eaffffdd 	b	30f80 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)>
   31008:	0004e2f8 	.word	0x0004e2f8

0003100c <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)>:
   3100c:	e59f3020 	ldr	r3, [pc, #32]	; 31034 <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)+0x28>
   31010:	e5933000 	ldr	r3, [r3]
   31014:	e2833a07 	add	r3, r3, #28672	; 0x7000
   31018:	e593380c 	ldr	r3, [r3, #2060]	; 0x80c
   3101c:	e3530000 	cmp	r3, #0
   31020:	012fff1e 	bxeq	lr
   31024:	e1a02001 	mov	r2, r1
   31028:	e1a01000 	mov	r1, r0
   3102c:	e1a00003 	mov	r0, r3
   31030:	eafff219 	b	2d89c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>
   31034:	0004e2f8 	.word	0x0004e2f8

00031038 <CommsManager::hdlcFrameTxCB(unsigned char const*, unsigned int)>:
   31038:	e2800a07 	add	r0, r0, #28672	; 0x7000
   3103c:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
   31040:	e3500000 	cmp	r0, #0
   31044:	012fff1e 	bxeq	lr
   31048:	eafff213 	b	2d89c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>

0003104c <CommsManager::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
   3104c:	eafffb9e 	b	2fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>

00031050 <CommsManager::serviceGetFromSerial()>:
   31050:	e2803a07 	add	r3, r0, #28672	; 0x7000
   31054:	e593380c 	ldr	r3, [r3, #2060]	; 0x80c
   31058:	e3530000 	cmp	r3, #0
   3105c:	012fff1e 	bxeq	lr
   31060:	e92d4010 	push	{r4, lr}
   31064:	e24ddffa 	sub	sp, sp, #1000	; 0x3e8
   31068:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   3106c:	e1a04000 	mov	r4, r0
   31070:	e1a0100d 	mov	r1, sp
   31074:	e1a00003 	mov	r0, r3
   31078:	ebfff26d 	bl	2da34 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)>
   3107c:	e2502000 	subs	r2, r0, #0
   31080:	da000002 	ble	31090 <CommsManager::serviceGetFromSerial()+0x40>
   31084:	e1a0100d 	mov	r1, sp
   31088:	e1a00004 	mov	r0, r4
   3108c:	ebfffac4 	bl	2fba4 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)>
   31090:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   31094:	e8bd8010 	pop	{r4, pc}

00031098 <CommsManager::service()>:
   31098:	e92d4010 	push	{r4, lr}
   3109c:	e1a04000 	mov	r4, r0
   310a0:	ebffff02 	bl	30cb0 <CommandHandler::service()>
   310a4:	e1a00004 	mov	r0, r4
   310a8:	e8bd4010 	pop	{r4, lr}
   310ac:	eaffffe7 	b	31050 <CommsManager::serviceGetFromSerial()>

000310b0 <BusAccess::busActionHandleStart() [clone .part.7]>:
   310b0:	e92d4070 	push	{r4, r5, r6, lr}
   310b4:	e5d011d8 	ldrb	r1, [r0, #472]	; 0x1d8
   310b8:	e3a02001 	mov	r2, #1
   310bc:	e1a04000 	mov	r4, r0
   310c0:	eb000a86 	bl	33ae0 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   310c4:	ebfff39c 	bl	2df3c <micros>
   310c8:	e58401e0 	str	r0, [r4, #480]	; 0x1e0
   310cc:	e1a00004 	mov	r0, r4
   310d0:	e59461d4 	ldr	r6, [r4, #468]	; 0x1d4
   310d4:	e5d451d8 	ldrb	r5, [r4, #472]	; 0x1d8
   310d8:	eb000811 	bl	33124 <BusAccess::clockCurFreqHz()>
   310dc:	e6ef5075 	uxtb	r5, r5
   310e0:	e3550004 	cmp	r5, #4
   310e4:	e1a01000 	mov	r1, r0
   310e8:	0a00000b 	beq	3111c <BusAccess::busActionHandleStart() [clone .part.7]+0x6c>
   310ec:	e3550001 	cmp	r5, #1
   310f0:	0a00000e 	beq	31130 <BusAccess::busActionHandleStart() [clone .part.7]+0x80>
   310f4:	e3550002 	cmp	r5, #2
   310f8:	0a000017 	beq	3115c <BusAccess::busActionHandleStart() [clone .part.7]+0xac>
   310fc:	e3550003 	cmp	r5, #3
   31100:	13a00000 	movne	r0, #0
   31104:	0a00001d 	beq	31180 <BusAccess::busActionHandleStart() [clone .part.7]+0xd0>
   31108:	e3a03002 	mov	r3, #2
   3110c:	e58401e4 	str	r0, [r4, #484]	; 0x1e4
   31110:	e3a00001 	mov	r0, #1
   31114:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   31118:	e8bd8070 	pop	{r4, r5, r6, pc}
   3111c:	e59f0074 	ldr	r0, [pc, #116]	; 31198 <BusAccess::busActionHandleStart() [clone .part.7]+0xe8>
   31120:	eb00330b 	bl	3dd54 <__aeabi_uidiv>
   31124:	e3500000 	cmp	r0, #0
   31128:	03a00001 	moveq	r0, #1
   3112c:	eafffff5 	b	31108 <BusAccess::busActionHandleStart() [clone .part.7]+0x58>
   31130:	e3a0302c 	mov	r3, #44	; 0x2c
   31134:	e0264693 	mla	r6, r3, r6, r4
   31138:	e5963018 	ldr	r3, [r6, #24]
   3113c:	e3530000 	cmp	r3, #0
   31140:	0a00000c 	beq	31178 <BusAccess::busActionHandleStart() [clone .part.7]+0xc8>
   31144:	e59f0050 	ldr	r0, [pc, #80]	; 3119c <BusAccess::busActionHandleStart() [clone .part.7]+0xec>
   31148:	e0000390 	mul	r0, r0, r3
   3114c:	eb003300 	bl	3dd54 <__aeabi_uidiv>
   31150:	e3500000 	cmp	r0, #0
   31154:	03a00001 	moveq	r0, #1
   31158:	eaffffea 	b	31108 <BusAccess::busActionHandleStart() [clone .part.7]+0x58>
   3115c:	e3a0302c 	mov	r3, #44	; 0x2c
   31160:	e0264693 	mla	r6, r3, r6, r4
   31164:	e5963020 	ldr	r3, [r6, #32]
   31168:	e3530000 	cmp	r3, #0
   3116c:	1afffff4 	bne	31144 <BusAccess::busActionHandleStart() [clone .part.7]+0x94>
   31170:	e59f0028 	ldr	r0, [pc, #40]	; 311a0 <BusAccess::busActionHandleStart() [clone .part.7]+0xf0>
   31174:	eafffff4 	b	3114c <BusAccess::busActionHandleStart() [clone .part.7]+0x9c>
   31178:	e59f0024 	ldr	r0, [pc, #36]	; 311a4 <BusAccess::busActionHandleStart() [clone .part.7]+0xf4>
   3117c:	eafffff2 	b	3114c <BusAccess::busActionHandleStart() [clone .part.7]+0x9c>
   31180:	e3a0302c 	mov	r3, #44	; 0x2c
   31184:	e0264693 	mla	r6, r3, r6, r4
   31188:	e5963028 	ldr	r3, [r6, #40]	; 0x28
   3118c:	e3530000 	cmp	r3, #0
   31190:	0afffff6 	beq	31170 <BusAccess::busActionHandleStart() [clone .part.7]+0xc0>
   31194:	eaffffea 	b	31144 <BusAccess::busActionHandleStart() [clone .part.7]+0x94>
   31198:	3b9aca00 	.word	0x3b9aca00
   3119c:	000f4240 	.word	0x000f4240
   311a0:	01e84800 	.word	0x01e84800
   311a4:	05f5e100 	.word	0x05f5e100

000311a8 <BusAccess::busActionCheck() [clone .part.6]>:
   311a8:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   311ac:	e35c0000 	cmp	ip, #0
   311b0:	d12fff1e 	bxle	lr
   311b4:	e92d4010 	push	{r4, lr}
   311b8:	e1a02000 	mov	r2, r0
   311bc:	e3a03000 	mov	r3, #0
   311c0:	e3a0402c 	mov	r4, #44	; 0x2c
   311c4:	e5d21004 	ldrb	r1, [r2, #4]
   311c8:	e282202c 	add	r2, r2, #44	; 0x2c
   311cc:	e3510000 	cmp	r1, #0
   311d0:	0a00001a 	beq	31240 <BusAccess::busActionCheck() [clone .part.6]+0x98>
   311d4:	e0210394 	mla	r1, r4, r3, r0
   311d8:	e5d1e02c 	ldrb	lr, [r1, #44]	; 0x2c
   311dc:	e35e0000 	cmp	lr, #0
   311e0:	0a00000d 	beq	3121c <BusAccess::busActionCheck() [clone .part.6]+0x74>
   311e4:	e3a0202c 	mov	r2, #44	; 0x2c
   311e8:	e0220392 	mla	r2, r2, r3, r0
   311ec:	e58031d4 	str	r3, [r0, #468]	; 0x1d4
   311f0:	e5d2302c 	ldrb	r3, [r2, #44]	; 0x2c
   311f4:	e3530000 	cmp	r3, #0
   311f8:	13a03004 	movne	r3, #4
   311fc:	0a000013 	beq	31250 <BusAccess::busActionCheck() [clone .part.6]+0xa8>
   31200:	e3a02001 	mov	r2, #1
   31204:	e5c031d8 	strb	r3, [r0, #472]	; 0x1d8
   31208:	e5c021f0 	strb	r2, [r0, #496]	; 0x1f0
   3120c:	e1a04000 	mov	r4, r0
   31210:	ebfff349 	bl	2df3c <micros>
   31214:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   31218:	e8bd8010 	pop	{r4, pc}
   3121c:	e5d1e016 	ldrb	lr, [r1, #22]
   31220:	e35e0000 	cmp	lr, #0
   31224:	1affffee 	bne	311e4 <BusAccess::busActionCheck() [clone .part.6]+0x3c>
   31228:	e5d1e01c 	ldrb	lr, [r1, #28]
   3122c:	e35e0000 	cmp	lr, #0
   31230:	1affffeb 	bne	311e4 <BusAccess::busActionCheck() [clone .part.6]+0x3c>
   31234:	e5d11024 	ldrb	r1, [r1, #36]	; 0x24
   31238:	e3510000 	cmp	r1, #0
   3123c:	1affffe8 	bne	311e4 <BusAccess::busActionCheck() [clone .part.6]+0x3c>
   31240:	e2833001 	add	r3, r3, #1
   31244:	e153000c 	cmp	r3, ip
   31248:	1affffdd 	bne	311c4 <BusAccess::busActionCheck() [clone .part.6]+0x1c>
   3124c:	e8bd8010 	pop	{r4, pc}
   31250:	e5d23016 	ldrb	r3, [r2, #22]
   31254:	e3530000 	cmp	r3, #0
   31258:	13a03001 	movne	r3, #1
   3125c:	1affffe7 	bne	31200 <BusAccess::busActionCheck() [clone .part.6]+0x58>
   31260:	e5d2301c 	ldrb	r3, [r2, #28]
   31264:	e3530000 	cmp	r3, #0
   31268:	13a03002 	movne	r3, #2
   3126c:	1affffe3 	bne	31200 <BusAccess::busActionCheck() [clone .part.6]+0x58>
   31270:	e5d23024 	ldrb	r3, [r2, #36]	; 0x24
   31274:	e3530000 	cmp	r3, #0
   31278:	13a03003 	movne	r3, #3
   3127c:	03a03000 	moveq	r3, #0
   31280:	eaffffde 	b	31200 <BusAccess::busActionCheck() [clone .part.6]+0x58>

00031284 <BusAccess::BusAccess()>:
   31284:	e3a02000 	mov	r2, #0
   31288:	e92d4030 	push	{r4, r5, lr}
   3128c:	e3a01001 	mov	r1, #1
   31290:	e3a05064 	mov	r5, #100	; 0x64
   31294:	e3e0e000 	mvn	lr, #0
   31298:	e3a0c014 	mov	ip, #20
   3129c:	e59f40b0 	ldr	r4, [pc, #176]	; 31354 <BusAccess::BusAccess()+0xd0>
   312a0:	e5c021c3 	strb	r2, [r0, #451]	; 0x1c3
   312a4:	e58051ec 	str	r5, [r0, #492]	; 0x1ec
   312a8:	e5804224 	str	r4, [r0, #548]	; 0x224
   312ac:	e580e22c 	str	lr, [r0, #556]	; 0x22c
   312b0:	e580c000 	str	ip, [r0]
   312b4:	e5c02228 	strb	r2, [r0, #552]	; 0x228
   312b8:	e5802230 	str	r2, [r0, #560]	; 0x230
   312bc:	e5802234 	str	r2, [r0, #564]	; 0x234
   312c0:	e5802238 	str	r2, [r0, #568]	; 0x238
   312c4:	e580223c 	str	r2, [r0, #572]	; 0x23c
   312c8:	e5802240 	str	r2, [r0, #576]	; 0x240
   312cc:	e5802244 	str	r2, [r0, #580]	; 0x244
   312d0:	e5802248 	str	r2, [r0, #584]	; 0x248
   312d4:	e580224c 	str	r2, [r0, #588]	; 0x24c
   312d8:	e5802250 	str	r2, [r0, #592]	; 0x250
   312dc:	e5802268 	str	r2, [r0, #616]	; 0x268
   312e0:	e580226c 	str	r2, [r0, #620]	; 0x26c
   312e4:	e5802270 	str	r2, [r0, #624]	; 0x270
   312e8:	e5802274 	str	r2, [r0, #628]	; 0x274
   312ec:	e5802278 	str	r2, [r0, #632]	; 0x278
   312f0:	e580227c 	str	r2, [r0, #636]	; 0x27c
   312f4:	e5802254 	str	r2, [r0, #596]	; 0x254
   312f8:	e5802258 	str	r2, [r0, #600]	; 0x258
   312fc:	e580225c 	str	r2, [r0, #604]	; 0x25c
   31300:	e5802260 	str	r2, [r0, #608]	; 0x260
   31304:	e5802264 	str	r2, [r0, #612]	; 0x264
   31308:	e58021bc 	str	r2, [r0, #444]	; 0x1bc
   3130c:	e5c021c1 	strb	r2, [r0, #449]	; 0x1c1
   31310:	e5c021c2 	strb	r2, [r0, #450]	; 0x1c2
   31314:	e58011c8 	str	r1, [r0, #456]	; 0x1c8
   31318:	e5c011c0 	strb	r1, [r0, #448]	; 0x1c0
   3131c:	e58021cc 	str	r2, [r0, #460]	; 0x1cc
   31320:	e5c021d0 	strb	r2, [r0, #464]	; 0x1d0
   31324:	e5c021d1 	strb	r2, [r0, #465]	; 0x1d1
   31328:	e58021d4 	str	r2, [r0, #468]	; 0x1d4
   3132c:	e5c021d8 	strb	r2, [r0, #472]	; 0x1d8
   31330:	e58021dc 	str	r2, [r0, #476]	; 0x1dc
   31334:	e58021e0 	str	r2, [r0, #480]	; 0x1e0
   31338:	e58021e4 	str	r2, [r0, #484]	; 0x1e4
   3133c:	e5c021f0 	strb	r2, [r0, #496]	; 0x1f0
   31340:	e5c021e8 	strb	r2, [r0, #488]	; 0x1e8
   31344:	e5c021c5 	strb	r2, [r0, #453]	; 0x1c5
   31348:	e5c021c4 	strb	r2, [r0, #452]	; 0x1c4
   3134c:	e5c021f1 	strb	r2, [r0, #497]	; 0x1f1
   31350:	e8bd8030 	pop	{r4, r5, pc}
   31354:	000f4240 	.word	0x000f4240

00031358 <BusAccess::init()>:
   31358:	e92d4070 	push	{r4, r5, r6, lr}
   3135c:	e1a04000 	mov	r4, r0
   31360:	e3a05000 	mov	r5, #0
   31364:	eb0005fa 	bl	32b54 <BusAccess::clockSetup()>
   31368:	e1a00004 	mov	r0, r4
   3136c:	e59f10ac 	ldr	r1, [pc, #172]	; 31420 <BusAccess::init()+0xc8>
   31370:	eb000670 	bl	32d38 <BusAccess::clockSetFreqHz(unsigned long)>
   31374:	e1a00004 	mov	r0, r4
   31378:	e3a01001 	mov	r1, #1
   3137c:	eb0006f5 	bl	32f58 <BusAccess::clockEnable(bool)>
   31380:	e1a00004 	mov	r0, r4
   31384:	e1a02005 	mov	r2, r5
   31388:	e3a0100b 	mov	r1, #11
   3138c:	eb0008b6 	bl	3366c <BusAccess::setPinOut(int, bool)>
   31390:	e1a00004 	mov	r0, r4
   31394:	e1a02005 	mov	r2, r5
   31398:	e3a01009 	mov	r1, #9
   3139c:	eb0008b2 	bl	3366c <BusAccess::setPinOut(int, bool)>
   313a0:	e1a00004 	mov	r0, r4
   313a4:	e1a02005 	mov	r2, r5
   313a8:	e3a0100a 	mov	r1, #10
   313ac:	eb0008ae 	bl	3366c <BusAccess::setPinOut(int, bool)>
   313b0:	e1a00004 	mov	r0, r4
   313b4:	e3a02001 	mov	r2, #1
   313b8:	e3a01010 	mov	r1, #16
   313bc:	eb0008aa 	bl	3366c <BusAccess::setPinOut(int, bool)>
   313c0:	e1a00004 	mov	r0, r4
   313c4:	e3a02001 	mov	r2, #1
   313c8:	e3a01013 	mov	r1, #19
   313cc:	eb0008a6 	bl	3366c <BusAccess::setPinOut(int, bool)>
   313d0:	e1a02005 	mov	r2, r5
   313d4:	e1a00004 	mov	r0, r4
   313d8:	e3a01007 	mov	r1, #7
   313dc:	e5c451f1 	strb	r5, [r4, #497]	; 0x1f1
   313e0:	eb0008a1 	bl	3366c <BusAccess::setPinOut(int, bool)>
   313e4:	e1a00004 	mov	r0, r4
   313e8:	e3a02001 	mov	r2, #1
   313ec:	e3a01006 	mov	r1, #6
   313f0:	eb00089d 	bl	3366c <BusAccess::setPinOut(int, bool)>
   313f4:	e3a02001 	mov	r2, #1
   313f8:	e1a00004 	mov	r0, r4
   313fc:	e3a01008 	mov	r1, #8
   31400:	eb000899 	bl	3366c <BusAccess::setPinOut(int, bool)>
   31404:	e1a01005 	mov	r1, r5
   31408:	e1a00004 	mov	r0, r4
   3140c:	eb000a1d 	bl	33c88 <BusAccess::busPagePinSetActive(bool)>
   31410:	e1a00004 	mov	r0, r4
   31414:	eb000823 	bl	334a8 <BusAccess::waitSetupMREQAndIORQEnables()>
   31418:	e5c451c3 	strb	r5, [r4, #451]	; 0x1c3
   3141c:	e8bd8070 	pop	{r4, r5, r6, pc}
   31420:	000f4240 	.word	0x000f4240

00031424 <BusAccess::busAccessReinit()>:
   31424:	e92d4010 	push	{r4, lr}
   31428:	e1a04000 	mov	r4, r0
   3142c:	eb0009fa 	bl	33c1c <BusAccess::busAccessCallbackPageIn()>
   31430:	e5943000 	ldr	r3, [r4]
   31434:	e3a0e040 	mov	lr, #64	; 0x40
   31438:	e3530011 	cmp	r3, #17
   3143c:	03a02c0e 	moveq	r2, #3584	; 0xe00
   31440:	13a01801 	movne	r1, #65536	; 0x10000
   31444:	13a02c0e 	movne	r2, #3584	; 0xe00
   31448:	159f3070 	ldrne	r3, [pc, #112]	; 314c0 <BusAccess::busAccessReinit()+0x9c>
   3144c:	059f306c 	ldreq	r3, [pc, #108]	; 314c0 <BusAccess::busAccessReinit()+0x9c>
   31450:	1583101c 	strne	r1, [r3, #28]
   31454:	e5832028 	str	r2, [r3, #40]	; 0x28
   31458:	e3a03000 	mov	r3, #0
   3145c:	e59f205c 	ldr	r2, [pc, #92]	; 314c0 <BusAccess::busAccessReinit()+0x9c>
   31460:	e1a01003 	mov	r1, r3
   31464:	e592c008 	ldr	ip, [r2, #8]
   31468:	e1a00004 	mov	r0, r4
   3146c:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   31470:	e582c008 	str	ip, [r2, #8]
   31474:	e582e01c 	str	lr, [r2, #28]
   31478:	e5c431c4 	strb	r3, [r4, #452]	; 0x1c4
   3147c:	e58431c8 	str	r3, [r4, #456]	; 0x1c8
   31480:	eb0003ab 	bl	32334 <BusAccess::waitForBusAck(bool)>
   31484:	e1a00004 	mov	r0, r4
   31488:	eb000a16 	bl	33ce8 <BusAccess::waitGenerationDisable()>
   3148c:	ebffd5d2 	bl	26bdc <CLogger::Get()>
   31490:	e59f302c 	ldr	r3, [pc, #44]	; 314c4 <BusAccess::busAccessReinit()+0xa0>
   31494:	e3a02004 	mov	r2, #4
   31498:	e59f1028 	ldr	r1, [pc, #40]	; 314c8 <BusAccess::busAccessReinit()+0xa4>
   3149c:	ebffd50b 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   314a0:	e3a01001 	mov	r1, #1
   314a4:	e1a00004 	mov	r0, r4
   314a8:	eb000843 	bl	335bc <BusAccess::waitResetFlipFlops(bool)>
   314ac:	e1a00004 	mov	r0, r4
   314b0:	eb000722 	bl	33140 <BusAccess::waitEnablementUpdate()>
   314b4:	e3a03001 	mov	r3, #1
   314b8:	e5c431c0 	strb	r3, [r4, #448]	; 0x1c0
   314bc:	e8bd8010 	pop	{r4, pc}
   314c0:	20200000 	.word	0x20200000
   314c4:	00046810 	.word	0x00046810
   314c8:	00046804 	.word	0x00046804

000314cc <BusAccess::waitOnMemory(int, bool)>:
   314cc:	e3510000 	cmp	r1, #0
   314d0:	b12fff1e 	bxlt	lr
   314d4:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   314d8:	e151000c 	cmp	r1, ip
   314dc:	a12fff1e 	bxge	lr
   314e0:	e3a0c02c 	mov	ip, #44	; 0x2c
   314e4:	e021019c 	mla	r1, ip, r1, r0
   314e8:	e5c12014 	strb	r2, [r1, #20]
   314ec:	ea000713 	b	33140 <BusAccess::waitEnablementUpdate()>

000314f0 <BusAccess::waitOnIO(int, bool)>:
   314f0:	e3510000 	cmp	r1, #0
   314f4:	b12fff1e 	bxlt	lr
   314f8:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   314fc:	e151000c 	cmp	r1, ip
   31500:	a12fff1e 	bxge	lr
   31504:	e3a0c02c 	mov	ip, #44	; 0x2c
   31508:	e021019c 	mla	r1, ip, r1, r0
   3150c:	e5c12015 	strb	r2, [r1, #21]
   31510:	ea00070a 	b	33140 <BusAccess::waitEnablementUpdate()>

00031514 <BusAccess::waitIsOnMemory()>:
   31514:	e5d001c1 	ldrb	r0, [r0, #449]	; 0x1c1
   31518:	e12fff1e 	bx	lr

0003151c <BusAccess::waitSetCycleUs(unsigned long)>:
   3151c:	e58011c8 	str	r1, [r0, #456]	; 0x1c8
   31520:	e12fff1e 	bx	lr

00031524 <BusAccess::waitIsHeld()>:
   31524:	e5d001d0 	ldrb	r0, [r0, #464]	; 0x1d0
   31528:	e12fff1e 	bx	lr

0003152c <BusAccess::waitHold(int, bool)>:
   3152c:	e3510000 	cmp	r1, #0
   31530:	b12fff1e 	bxlt	lr
   31534:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   31538:	e151000c 	cmp	r1, ip
   3153c:	a12fff1e 	bxge	lr
   31540:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   31544:	e3a0e02c 	mov	lr, #44	; 0x2c
   31548:	e021019e 	mla	r1, lr, r1, r0
   3154c:	e35c0000 	cmp	ip, #0
   31550:	e5c1202e 	strb	r2, [r1, #46]	; 0x2e
   31554:	da00000c 	ble	3158c <BusAccess::waitHold(int, bool)+0x60>
   31558:	e1a02000 	mov	r2, r0
   3155c:	e3a03000 	mov	r3, #0
   31560:	e5d21004 	ldrb	r1, [r2, #4]
   31564:	e282202c 	add	r2, r2, #44	; 0x2c
   31568:	e3510000 	cmp	r1, #0
   3156c:	0a000003 	beq	31580 <BusAccess::waitHold(int, bool)+0x54>
   31570:	e021039e 	mla	r1, lr, r3, r0
   31574:	e5d1102e 	ldrb	r1, [r1, #46]	; 0x2e
   31578:	e3510000 	cmp	r1, #0
   3157c:	1a000005 	bne	31598 <BusAccess::waitHold(int, bool)+0x6c>
   31580:	e2833001 	add	r3, r3, #1
   31584:	e15c0003 	cmp	ip, r3
   31588:	1afffff4 	bne	31560 <BusAccess::waitHold(int, bool)+0x34>
   3158c:	e3a03000 	mov	r3, #0
   31590:	e5c031d0 	strb	r3, [r0, #464]	; 0x1d0
   31594:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   31598:	e3a03001 	mov	r3, #1
   3159c:	e5c031d0 	strb	r3, [r0, #464]	; 0x1d0
   315a0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000315a4 <BusAccess::targetReqReset(int, int)>:
   315a4:	e3510000 	cmp	r1, #0
   315a8:	b12fff1e 	bxlt	lr
   315ac:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   315b0:	e1510003 	cmp	r1, r3
   315b4:	a12fff1e 	bxge	lr
   315b8:	e3a0c02c 	mov	ip, #44	; 0x2c
   315bc:	e3520000 	cmp	r2, #0
   315c0:	d3a02064 	movle	r2, #100	; 0x64
   315c4:	e3a03001 	mov	r3, #1
   315c8:	e92d4010 	push	{r4, lr}
   315cc:	e021019c 	mla	r1, ip, r1, r0
   315d0:	e5812018 	str	r2, [r1, #24]
   315d4:	e5c13016 	strb	r3, [r1, #22]
   315d8:	ebffd57f 	bl	26bdc <CLogger::Get()>
   315dc:	e8bd4010 	pop	{r4, lr}
   315e0:	e59f3008 	ldr	r3, [pc, #8]	; 315f0 <BusAccess::targetReqReset(int, int)+0x4c>
   315e4:	e3a02004 	mov	r2, #4
   315e8:	e59f1004 	ldr	r1, [pc, #4]	; 315f4 <BusAccess::targetReqReset(int, int)+0x50>
   315ec:	eaffd4b7 	b	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   315f0:	00046820 	.word	0x00046820
   315f4:	00046804 	.word	0x00046804

000315f8 <BusAccess::targetReqNMI(int, int)>:
   315f8:	e3510000 	cmp	r1, #0
   315fc:	b12fff1e 	bxlt	lr
   31600:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   31604:	e1510003 	cmp	r1, r3
   31608:	a12fff1e 	bxge	lr
   3160c:	e3a0c02c 	mov	ip, #44	; 0x2c
   31610:	e3520000 	cmp	r2, #0
   31614:	d3a02020 	movle	r2, #32
   31618:	e3a03001 	mov	r3, #1
   3161c:	e021019c 	mla	r1, ip, r1, r0
   31620:	e5812020 	str	r2, [r1, #32]
   31624:	e5c1301c 	strb	r3, [r1, #28]
   31628:	e12fff1e 	bx	lr

0003162c <BusAccess::targetReqIRQ(int, int)>:
   3162c:	e3510000 	cmp	r1, #0
   31630:	b12fff1e 	bxlt	lr
   31634:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   31638:	e1510003 	cmp	r1, r3
   3163c:	a12fff1e 	bxge	lr
   31640:	e3a0c02c 	mov	ip, #44	; 0x2c
   31644:	e3520000 	cmp	r2, #0
   31648:	d3a02020 	movle	r2, #32
   3164c:	e3a03001 	mov	r3, #1
   31650:	e021019c 	mla	r1, ip, r1, r0
   31654:	e5812028 	str	r2, [r1, #40]	; 0x28
   31658:	e5c13024 	strb	r3, [r1, #36]	; 0x24
   3165c:	e12fff1e 	bx	lr

00031660 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>:
   31660:	e92d4030 	push	{r4, r5, lr}
   31664:	e2514000 	subs	r4, r1, #0
   31668:	e24dd00c 	sub	sp, sp, #12
   3166c:	e1a05000 	mov	r5, r0
   31670:	ba00000f 	blt	316b4 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x54>
   31674:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   31678:	e1540003 	cmp	r4, r3
   3167c:	aa00000c 	bge	316b4 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x54>
   31680:	e3a0102c 	mov	r1, #44	; 0x2c
   31684:	e3a03001 	mov	r3, #1
   31688:	e0240491 	mla	r4, r1, r4, r0
   3168c:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   31690:	e5c4202d 	strb	r2, [r4, #45]	; 0x2d
   31694:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   31698:	e3530000 	cmp	r3, #0
   3169c:	0a00000e 	beq	316dc <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x7c>
   316a0:	e5d531f0 	ldrb	r3, [r5, #496]	; 0x1f0
   316a4:	e3530001 	cmp	r3, #1
   316a8:	0a00000f 	beq	316ec <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x8c>
   316ac:	e28dd00c 	add	sp, sp, #12
   316b0:	e8bd8030 	pop	{r4, r5, pc}
   316b4:	ebffd548 	bl	26bdc <CLogger::Get()>
   316b8:	e59531bc 	ldr	r3, [r5, #444]	; 0x1bc
   316bc:	e3a02004 	mov	r2, #4
   316c0:	e58d3004 	str	r3, [sp, #4]
   316c4:	e58d4000 	str	r4, [sp]
   316c8:	e59f302c 	ldr	r3, [pc, #44]	; 316fc <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x9c>
   316cc:	e59f102c 	ldr	r1, [pc, #44]	; 31700 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0xa0>
   316d0:	ebffd47e 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   316d4:	e28dd00c 	add	sp, sp, #12
   316d8:	e8bd8030 	pop	{r4, r5, pc}
   316dc:	ebfffeb1 	bl	311a8 <BusAccess::busActionCheck() [clone .part.6]>
   316e0:	e5d531f0 	ldrb	r3, [r5, #496]	; 0x1f0
   316e4:	e3530001 	cmp	r3, #1
   316e8:	1affffef 	bne	316ac <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x4c>
   316ec:	e1a00005 	mov	r0, r5
   316f0:	e28dd00c 	add	sp, sp, #12
   316f4:	e8bd4030 	pop	{r4, r5, lr}
   316f8:	eafffe6c 	b	310b0 <BusAccess::busActionHandleStart() [clone .part.7]>
   316fc:	00046830 	.word	0x00046830
   31700:	00046858 	.word	0x00046858

00031704 <BusAccess::targetPageForInjection(int, bool)>:
   31704:	e3520000 	cmp	r2, #0
   31708:	0a00001a 	beq	31778 <BusAccess::targetPageForInjection(int, bool)+0x74>
   3170c:	e59021bc 	ldr	r2, [r0, #444]	; 0x1bc
   31710:	e3520000 	cmp	r2, #0
   31714:	d12fff1e 	bxle	lr
   31718:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3171c:	e1a06000 	mov	r6, r0
   31720:	e1a04000 	mov	r4, r0
   31724:	e3a05000 	mov	r5, #0
   31728:	e3a08004 	mov	r8, #4
   3172c:	e3a07007 	mov	r7, #7
   31730:	ea000002 	b	31740 <BusAccess::targetPageForInjection(int, bool)+0x3c>
   31734:	e1520005 	cmp	r2, r5
   31738:	e284402c 	add	r4, r4, #44	; 0x2c
   3173c:	da00000c 	ble	31774 <BusAccess::targetPageForInjection(int, bool)+0x70>
   31740:	e5d43004 	ldrb	r3, [r4, #4]
   31744:	e2855001 	add	r5, r5, #1
   31748:	e3530000 	cmp	r3, #0
   3174c:	0afffff8 	beq	31734 <BusAccess::targetPageForInjection(int, bool)+0x30>
   31750:	e594300c 	ldr	r3, [r4, #12]
   31754:	e1a02008 	mov	r2, r8
   31758:	e5940010 	ldr	r0, [r4, #16]
   3175c:	e1a01007 	mov	r1, r7
   31760:	e12fff33 	blx	r3
   31764:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
   31768:	e284402c 	add	r4, r4, #44	; 0x2c
   3176c:	e1520005 	cmp	r2, r5
   31770:	cafffff2 	bgt	31740 <BusAccess::targetPageForInjection(int, bool)+0x3c>
   31774:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31778:	e3a03001 	mov	r3, #1
   3177c:	e5c031c5 	strb	r3, [r0, #453]	; 0x1c5
   31780:	e12fff1e 	bx	lr

00031784 <BusAccess::busActionCheck()>:
   31784:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   31788:	e3530000 	cmp	r3, #0
   3178c:	112fff1e 	bxne	lr
   31790:	eafffe84 	b	311a8 <BusAccess::busActionCheck() [clone .part.6]>

00031794 <BusAccess::busActionHandleStart()>:
   31794:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   31798:	e3530001 	cmp	r3, #1
   3179c:	0a000001 	beq	317a8 <BusAccess::busActionHandleStart()+0x14>
   317a0:	e3a00000 	mov	r0, #0
   317a4:	e12fff1e 	bx	lr
   317a8:	eafffe40 	b	310b0 <BusAccess::busActionHandleStart() [clone .part.7]>

000317ac <BusAccess::busAccessHandleIrqAck()>:
   317ac:	e5d021d8 	ldrb	r2, [r0, #472]	; 0x1d8
   317b0:	e3520003 	cmp	r2, #3
   317b4:	0a000001 	beq	317c0 <BusAccess::busAccessHandleIrqAck()+0x14>
   317b8:	e3a00000 	mov	r0, #0
   317bc:	e12fff1e 	bx	lr
   317c0:	e92d4010 	push	{r4, lr}
   317c4:	e1a04000 	mov	r4, r0
   317c8:	eb00030b 	bl	323fc <BusAccess::controlBusRead()>
   317cc:	e59f3094 	ldr	r3, [pc, #148]	; 31868 <BusAccess::busAccessHandleIrqAck()+0xbc>
   317d0:	e0033000 	and	r3, r3, r0
   317d4:	e3530018 	cmp	r3, #24
   317d8:	0a000001 	beq	317e4 <BusAccess::busAccessHandleIrqAck()+0x38>
   317dc:	e3a00000 	mov	r0, #0
   317e0:	e8bd8010 	pop	{r4, pc}
   317e4:	e3a02000 	mov	r2, #0
   317e8:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   317ec:	e1a00004 	mov	r0, r4
   317f0:	eb0008ba 	bl	33ae0 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   317f4:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   317f8:	e3510000 	cmp	r1, #0
   317fc:	c3a02000 	movgt	r2, #0
   31800:	c3a0c02c 	movgt	ip, #44	; 0x2c
   31804:	c1a00002 	movgt	r0, r2
   31808:	da000013 	ble	3185c <BusAccess::busAccessHandleIrqAck()+0xb0>
   3180c:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   31810:	e6ef3073 	uxtb	r3, r3
   31814:	e3530004 	cmp	r3, #4
   31818:	0023429c 	mlaeq	r3, ip, r2, r4
   3181c:	05c3002c 	strbeq	r0, [r3, #44]	; 0x2c
   31820:	0a00000a 	beq	31850 <BusAccess::busAccessHandleIrqAck()+0xa4>
   31824:	e3530001 	cmp	r3, #1
   31828:	0023429c 	mlaeq	r3, ip, r2, r4
   3182c:	05c30016 	strbeq	r0, [r3, #22]
   31830:	0a000006 	beq	31850 <BusAccess::busAccessHandleIrqAck()+0xa4>
   31834:	e3530002 	cmp	r3, #2
   31838:	0023429c 	mlaeq	r3, ip, r2, r4
   3183c:	05c3001c 	strbeq	r0, [r3, #28]
   31840:	0a000002 	beq	31850 <BusAccess::busAccessHandleIrqAck()+0xa4>
   31844:	e3530003 	cmp	r3, #3
   31848:	0023429c 	mlaeq	r3, ip, r2, r4
   3184c:	05c30024 	strbeq	r0, [r3, #36]	; 0x24
   31850:	e2822001 	add	r2, r2, #1
   31854:	e1520001 	cmp	r2, r1
   31858:	1affffeb 	bne	3180c <BusAccess::busAccessHandleIrqAck()+0x60>
   3185c:	e3a03000 	mov	r3, #0
   31860:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   31864:	eaffffdc 	b	317dc <BusAccess::busAccessHandleIrqAck()+0x30>
   31868:	00000418 	.word	0x00000418

0003186c <BusAccess::busActionClearFlags()>:
   3186c:	e59011bc 	ldr	r1, [r0, #444]	; 0x1bc
   31870:	e3510000 	cmp	r1, #0
   31874:	da00001a 	ble	318e4 <BusAccess::busActionClearFlags()+0x78>
   31878:	e3a02000 	mov	r2, #0
   3187c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   31880:	e1a0c002 	mov	ip, r2
   31884:	e3a0e02c 	mov	lr, #44	; 0x2c
   31888:	e5d031d8 	ldrb	r3, [r0, #472]	; 0x1d8
   3188c:	e6ef3073 	uxtb	r3, r3
   31890:	e3530004 	cmp	r3, #4
   31894:	0023029e 	mlaeq	r3, lr, r2, r0
   31898:	05c3c02c 	strbeq	ip, [r3, #44]	; 0x2c
   3189c:	0a00000a 	beq	318cc <BusAccess::busActionClearFlags()+0x60>
   318a0:	e3530001 	cmp	r3, #1
   318a4:	0023029e 	mlaeq	r3, lr, r2, r0
   318a8:	05c3c016 	strbeq	ip, [r3, #22]
   318ac:	0a000006 	beq	318cc <BusAccess::busActionClearFlags()+0x60>
   318b0:	e3530002 	cmp	r3, #2
   318b4:	0023029e 	mlaeq	r3, lr, r2, r0
   318b8:	05c3c01c 	strbeq	ip, [r3, #28]
   318bc:	0a000002 	beq	318cc <BusAccess::busActionClearFlags()+0x60>
   318c0:	e3530003 	cmp	r3, #3
   318c4:	0023029e 	mlaeq	r3, lr, r2, r0
   318c8:	05c3c024 	strbeq	ip, [r3, #36]	; 0x24
   318cc:	e2822001 	add	r2, r2, #1
   318d0:	e1520001 	cmp	r2, r1
   318d4:	1affffeb 	bne	31888 <BusAccess::busActionClearFlags()+0x1c>
   318d8:	e3a03000 	mov	r3, #0
   318dc:	e5c031f0 	strb	r3, [r0, #496]	; 0x1f0
   318e0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   318e4:	e3a03000 	mov	r3, #0
   318e8:	e5c031f0 	strb	r3, [r0, #496]	; 0x1f0
   318ec:	e12fff1e 	bx	lr

000318f0 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   318f0:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   318f4:	e3530000 	cmp	r3, #0
   318f8:	da00002b 	ble	319ac <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xbc>
   318fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31900:	e1a09002 	mov	r9, r2
   31904:	e1a08001 	mov	r8, r1
   31908:	e1a07000 	mov	r7, r0
   3190c:	e1a04000 	mov	r4, r0
   31910:	e3a05000 	mov	r5, #0
   31914:	e5d4c004 	ldrb	ip, [r4, #4]
   31918:	e2855001 	add	r5, r5, #1
   3191c:	e35c0000 	cmp	ip, #0
   31920:	0a000007 	beq	31944 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x54>
   31924:	e594600c 	ldr	r6, [r4, #12]
   31928:	e3560000 	cmp	r6, #0
   3192c:	0a000004 	beq	31944 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x54>
   31930:	e1a02009 	mov	r2, r9
   31934:	e1a01008 	mov	r1, r8
   31938:	e5940010 	ldr	r0, [r4, #16]
   3193c:	e12fff36 	blx	r6
   31940:	e59731bc 	ldr	r3, [r7, #444]	; 0x1bc
   31944:	e1530005 	cmp	r3, r5
   31948:	e284402c 	add	r4, r4, #44	; 0x2c
   3194c:	cafffff0 	bgt	31914 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x24>
   31950:	e3590002 	cmp	r9, #2
   31954:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   31958:	e3530000 	cmp	r3, #0
   3195c:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   31960:	e1a04007 	mov	r4, r7
   31964:	e3a05000 	mov	r5, #0
   31968:	e3a09001 	mov	r9, #1
   3196c:	e5d42004 	ldrb	r2, [r4, #4]
   31970:	e2855001 	add	r5, r5, #1
   31974:	e3520000 	cmp	r2, #0
   31978:	0a000007 	beq	3199c <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xac>
   3197c:	e594600c 	ldr	r6, [r4, #12]
   31980:	e3560000 	cmp	r6, #0
   31984:	0a000004 	beq	3199c <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xac>
   31988:	e1a02009 	mov	r2, r9
   3198c:	e1a01008 	mov	r1, r8
   31990:	e5940010 	ldr	r0, [r4, #16]
   31994:	e12fff36 	blx	r6
   31998:	e59731bc 	ldr	r3, [r7, #444]	; 0x1bc
   3199c:	e1530005 	cmp	r3, r5
   319a0:	e284402c 	add	r4, r4, #44	; 0x2c
   319a4:	cafffff0 	bgt	3196c <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x7c>
   319a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   319ac:	e12fff1e 	bx	lr

000319b0 <BusAccess::busActionHandleActive()>:
   319b0:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   319b4:	e92d4070 	push	{r4, r5, r6, lr}
   319b8:	e3530001 	cmp	r3, #1
   319bc:	e1a04000 	mov	r4, r0
   319c0:	0a000068 	beq	31b68 <BusAccess::busActionHandleActive()+0x1b8>
   319c4:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   319c8:	e3530002 	cmp	r3, #2
   319cc:	18bd8070 	popne	{r4, r5, r6, pc}
   319d0:	e5d461d8 	ldrb	r6, [r4, #472]	; 0x1d8
   319d4:	e6ef6076 	uxtb	r6, r6
   319d8:	e3560004 	cmp	r6, #4
   319dc:	0a000035 	beq	31ab8 <BusAccess::busActionHandleActive()+0x108>
   319e0:	e1a00004 	mov	r0, r4
   319e4:	ebffff70 	bl	317ac <BusAccess::busAccessHandleIrqAck()>
   319e8:	e2505000 	subs	r5, r0, #0
   319ec:	18bd8070 	popne	{r4, r5, r6, pc}
   319f0:	ebfff151 	bl	2df3c <micros>
   319f4:	e59411e0 	ldr	r1, [r4, #480]	; 0x1e0
   319f8:	e59421e4 	ldr	r2, [r4, #484]	; 0x1e4
   319fc:	ebfff16c 	bl	2dfb4 <isTimeout>
   31a00:	e3500000 	cmp	r0, #0
   31a04:	08bd8070 	popeq	{r4, r5, r6, pc}
   31a08:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   31a0c:	e3a02004 	mov	r2, #4
   31a10:	e1a00004 	mov	r0, r4
   31a14:	ebffffb5 	bl	318f0 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   31a18:	e1a02005 	mov	r2, r5
   31a1c:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   31a20:	e1a00004 	mov	r0, r4
   31a24:	eb00082d 	bl	33ae0 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   31a28:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   31a2c:	e3510000 	cmp	r1, #0
   31a30:	c1a02005 	movgt	r2, r5
   31a34:	c3a0c02c 	movgt	ip, #44	; 0x2c
   31a38:	c1a00002 	movgt	r0, r2
   31a3c:	da000013 	ble	31a90 <BusAccess::busActionHandleActive()+0xe0>
   31a40:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   31a44:	e6ef3073 	uxtb	r3, r3
   31a48:	e3530004 	cmp	r3, #4
   31a4c:	0023429c 	mlaeq	r3, ip, r2, r4
   31a50:	05c3002c 	strbeq	r0, [r3, #44]	; 0x2c
   31a54:	0a00000a 	beq	31a84 <BusAccess::busActionHandleActive()+0xd4>
   31a58:	e3530001 	cmp	r3, #1
   31a5c:	0023429c 	mlaeq	r3, ip, r2, r4
   31a60:	05c30016 	strbeq	r0, [r3, #22]
   31a64:	0a000006 	beq	31a84 <BusAccess::busActionHandleActive()+0xd4>
   31a68:	e3530002 	cmp	r3, #2
   31a6c:	0023429c 	mlaeq	r3, ip, r2, r4
   31a70:	05c3001c 	strbeq	r0, [r3, #28]
   31a74:	0a000002 	beq	31a84 <BusAccess::busActionHandleActive()+0xd4>
   31a78:	e3530003 	cmp	r3, #3
   31a7c:	0023429c 	mlaeq	r3, ip, r2, r4
   31a80:	05c30024 	strbeq	r0, [r3, #36]	; 0x24
   31a84:	e2822001 	add	r2, r2, #1
   31a88:	e1520001 	cmp	r2, r1
   31a8c:	1affffeb 	bne	31a40 <BusAccess::busActionHandleActive()+0x90>
   31a90:	e3a03000 	mov	r3, #0
   31a94:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   31a98:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   31a9c:	e3530001 	cmp	r3, #1
   31aa0:	18bd8070 	popne	{r4, r5, r6, pc}
   31aa4:	e1a00004 	mov	r0, r4
   31aa8:	e8bd4070 	pop	{r4, r5, r6, lr}
   31aac:	e3a02004 	mov	r2, #4
   31ab0:	e3a01009 	mov	r1, #9
   31ab4:	eaffff8d 	b	318f0 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   31ab8:	e59f31fc 	ldr	r3, [pc, #508]	; 31cbc <BusAccess::busActionHandleActive()+0x30c>
   31abc:	e5932034 	ldr	r2, [r3, #52]	; 0x34
   31ac0:	e2125004 	ands	r5, r2, #4
   31ac4:	1a00004e 	bne	31c04 <BusAccess::busActionHandleActive()+0x254>
   31ac8:	e1a00004 	mov	r0, r4
   31acc:	eb0006f3 	bl	336a0 <BusAccess::controlTake()>
   31ad0:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   31ad4:	e3510000 	cmp	r1, #0
   31ad8:	c1a02005 	movgt	r2, r5
   31adc:	c3a0c02c 	movgt	ip, #44	; 0x2c
   31ae0:	c1a00002 	movgt	r0, r2
   31ae4:	da000013 	ble	31b38 <BusAccess::busActionHandleActive()+0x188>
   31ae8:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   31aec:	e6ef3073 	uxtb	r3, r3
   31af0:	e3530004 	cmp	r3, #4
   31af4:	0023429c 	mlaeq	r3, ip, r2, r4
   31af8:	05c3002c 	strbeq	r0, [r3, #44]	; 0x2c
   31afc:	0a00000a 	beq	31b2c <BusAccess::busActionHandleActive()+0x17c>
   31b00:	e3530001 	cmp	r3, #1
   31b04:	0023429c 	mlaeq	r3, ip, r2, r4
   31b08:	05c30016 	strbeq	r0, [r3, #22]
   31b0c:	0a000006 	beq	31b2c <BusAccess::busActionHandleActive()+0x17c>
   31b10:	e3530002 	cmp	r3, #2
   31b14:	0023429c 	mlaeq	r3, ip, r2, r4
   31b18:	05c3001c 	strbeq	r0, [r3, #28]
   31b1c:	0a000002 	beq	31b2c <BusAccess::busActionHandleActive()+0x17c>
   31b20:	e3530003 	cmp	r3, #3
   31b24:	0023429c 	mlaeq	r3, ip, r2, r4
   31b28:	05c30024 	strbeq	r0, [r3, #36]	; 0x24
   31b2c:	e2822001 	add	r2, r2, #1
   31b30:	e1520001 	cmp	r2, r1
   31b34:	1affffeb 	bne	31ae8 <BusAccess::busActionHandleActive()+0x138>
   31b38:	e3a03000 	mov	r3, #0
   31b3c:	e3a0202c 	mov	r2, #44	; 0x2c
   31b40:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   31b44:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   31b48:	e1a00004 	mov	r0, r4
   31b4c:	e0234392 	mla	r3, r2, r3, r4
   31b50:	e3a01004 	mov	r1, #4
   31b54:	e5d3202d 	ldrb	r2, [r3, #45]	; 0x2d
   31b58:	ebffff64 	bl	318f0 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   31b5c:	e1a00004 	mov	r0, r4
   31b60:	e8bd4070 	pop	{r4, r5, r6, lr}
   31b64:	ea0005d6 	b	332c4 <BusAccess::controlRelease()>
   31b68:	ebfff0f3 	bl	2df3c <micros>
   31b6c:	e59411dc 	ldr	r1, [r4, #476]	; 0x1dc
   31b70:	e59f2148 	ldr	r2, [pc, #328]	; 31cc0 <BusAccess::busActionHandleActive()+0x310>
   31b74:	ebfff10e 	bl	2dfb4 <isTimeout>
   31b78:	e3500000 	cmp	r0, #0
   31b7c:	0affff90 	beq	319c4 <BusAccess::busActionHandleActive()+0x14>
   31b80:	e3a02000 	mov	r2, #0
   31b84:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   31b88:	e1a00004 	mov	r0, r4
   31b8c:	eb0007d3 	bl	33ae0 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   31b90:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   31b94:	e3510000 	cmp	r1, #0
   31b98:	c3a02000 	movgt	r2, #0
   31b9c:	c3a0c02c 	movgt	ip, #44	; 0x2c
   31ba0:	c1a00002 	movgt	r0, r2
   31ba4:	da000013 	ble	31bf8 <BusAccess::busActionHandleActive()+0x248>
   31ba8:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   31bac:	e6ef3073 	uxtb	r3, r3
   31bb0:	e3530004 	cmp	r3, #4
   31bb4:	0023429c 	mlaeq	r3, ip, r2, r4
   31bb8:	05c3002c 	strbeq	r0, [r3, #44]	; 0x2c
   31bbc:	0a00000a 	beq	31bec <BusAccess::busActionHandleActive()+0x23c>
   31bc0:	e3530001 	cmp	r3, #1
   31bc4:	0023429c 	mlaeq	r3, ip, r2, r4
   31bc8:	05c30016 	strbeq	r0, [r3, #22]
   31bcc:	0a000006 	beq	31bec <BusAccess::busActionHandleActive()+0x23c>
   31bd0:	e3530002 	cmp	r3, #2
   31bd4:	0023429c 	mlaeq	r3, ip, r2, r4
   31bd8:	05c3001c 	strbeq	r0, [r3, #28]
   31bdc:	0a000002 	beq	31bec <BusAccess::busActionHandleActive()+0x23c>
   31be0:	e3530003 	cmp	r3, #3
   31be4:	0023429c 	mlaeq	r3, ip, r2, r4
   31be8:	05c30024 	strbeq	r0, [r3, #36]	; 0x24
   31bec:	e2822001 	add	r2, r2, #1
   31bf0:	e1520001 	cmp	r2, r1
   31bf4:	1affffeb 	bne	31ba8 <BusAccess::busActionHandleActive()+0x1f8>
   31bf8:	e3a03000 	mov	r3, #0
   31bfc:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   31c00:	eaffff6f 	b	319c4 <BusAccess::busActionHandleActive()+0x14>
   31c04:	ebfff0cc 	bl	2df3c <micros>
   31c08:	e59411e0 	ldr	r1, [r4, #480]	; 0x1e0
   31c0c:	e59421e4 	ldr	r2, [r4, #484]	; 0x1e4
   31c10:	ebfff0e7 	bl	2dfb4 <isTimeout>
   31c14:	e3500000 	cmp	r0, #0
   31c18:	08bd8070 	popeq	{r4, r5, r6, pc}
   31c1c:	e3a0502c 	mov	r5, #44	; 0x2c
   31c20:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   31c24:	e3a01005 	mov	r1, #5
   31c28:	e0234395 	mla	r3, r5, r3, r4
   31c2c:	e1a00004 	mov	r0, r4
   31c30:	e5d3202d 	ldrb	r2, [r3, #45]	; 0x2d
   31c34:	ebffff2d 	bl	318f0 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   31c38:	e3a02000 	mov	r2, #0
   31c3c:	e1a01006 	mov	r1, r6
   31c40:	e1a00004 	mov	r0, r4
   31c44:	eb0007a5 	bl	33ae0 <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   31c48:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   31c4c:	e3510000 	cmp	r1, #0
   31c50:	c3a02000 	movgt	r2, #0
   31c54:	c1a00005 	movgt	r0, r5
   31c58:	c1a0c002 	movgt	ip, r2
   31c5c:	da000013 	ble	31cb0 <BusAccess::busActionHandleActive()+0x300>
   31c60:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   31c64:	e6ef3073 	uxtb	r3, r3
   31c68:	e3530004 	cmp	r3, #4
   31c6c:	00234290 	mlaeq	r3, r0, r2, r4
   31c70:	05c3c02c 	strbeq	ip, [r3, #44]	; 0x2c
   31c74:	0a00000a 	beq	31ca4 <BusAccess::busActionHandleActive()+0x2f4>
   31c78:	e3530001 	cmp	r3, #1
   31c7c:	00234290 	mlaeq	r3, r0, r2, r4
   31c80:	05c3c016 	strbeq	ip, [r3, #22]
   31c84:	0a000006 	beq	31ca4 <BusAccess::busActionHandleActive()+0x2f4>
   31c88:	e3530002 	cmp	r3, #2
   31c8c:	00234290 	mlaeq	r3, r0, r2, r4
   31c90:	05c3c01c 	strbeq	ip, [r3, #28]
   31c94:	0a000002 	beq	31ca4 <BusAccess::busActionHandleActive()+0x2f4>
   31c98:	e3530003 	cmp	r3, #3
   31c9c:	00234290 	mlaeq	r3, r0, r2, r4
   31ca0:	05c3c024 	strbeq	ip, [r3, #36]	; 0x24
   31ca4:	e2822001 	add	r2, r2, #1
   31ca8:	e1520001 	cmp	r2, r1
   31cac:	1affffeb 	bne	31c60 <BusAccess::busActionHandleActive()+0x2b0>
   31cb0:	e3a03000 	mov	r3, #0
   31cb4:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   31cb8:	e8bd8070 	pop	{r4, r5, r6, pc}
   31cbc:	20200000 	.word	0x20200000
   31cc0:	000186a0 	.word	0x000186a0

00031cc4 <BusAccess::stepTimerISR(void*)>:
   31cc4:	e12fff1e 	bx	lr

00031cc8 <BusAccess::waitHandleReadRelease()>:
   31cc8:	e5d031c4 	ldrb	r3, [r0, #452]	; 0x1c4
   31ccc:	e3530000 	cmp	r3, #0
   31cd0:	012fff1e 	bxeq	lr
   31cd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31cd8:	e1a08000 	mov	r8, r0
   31cdc:	ebfff096 	bl	2df3c <micros>
   31ce0:	e3a05064 	mov	r5, #100	; 0x64
   31ce4:	e1a06000 	mov	r6, r0
   31ce8:	e59f4064 	ldr	r4, [pc, #100]	; 31d54 <BusAccess::waitHandleReadRelease()+0x8c>
   31cec:	ea000003 	b	31d00 <BusAccess::waitHandleReadRelease()+0x38>
   31cf0:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   31cf4:	e2033003 	and	r3, r3, #3
   31cf8:	e3530003 	cmp	r3, #3
   31cfc:	0a000008 	beq	31d24 <BusAccess::waitHandleReadRelease()+0x5c>
   31d00:	ebfff08d 	bl	2df3c <micros>
   31d04:	e1a02005 	mov	r2, r5
   31d08:	e1a01006 	mov	r1, r6
   31d0c:	ebfff0a8 	bl	2dfb4 <isTimeout>
   31d10:	e2507000 	subs	r7, r0, #0
   31d14:	0afffff5 	beq	31cf0 <BusAccess::waitHandleReadRelease()+0x28>
   31d18:	e3a03000 	mov	r3, #0
   31d1c:	e5c831c4 	strb	r3, [r8, #452]	; 0x1c4
   31d20:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31d24:	e3a02040 	mov	r2, #64	; 0x40
   31d28:	e5943008 	ldr	r3, [r4, #8]
   31d2c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   31d30:	e5843008 	str	r3, [r4, #8]
   31d34:	e584201c 	str	r2, [r4, #28]
   31d38:	e5d831c5 	ldrb	r3, [r8, #453]	; 0x1c5
   31d3c:	e3530000 	cmp	r3, #0
   31d40:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   31d44:	e1a00008 	mov	r0, r8
   31d48:	eb0007b3 	bl	33c1c <BusAccess::busAccessCallbackPageIn()>
   31d4c:	e5c871c5 	strb	r7, [r8, #453]	; 0x1c5
   31d50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31d54:	20200000 	.word	0x20200000

00031d58 <BusAccess::waitRelease()>:
   31d58:	e92d4010 	push	{r4, lr}
   31d5c:	e1a04000 	mov	r4, r0
   31d60:	e3a01000 	mov	r1, #0
   31d64:	eb000614 	bl	335bc <BusAccess::waitResetFlipFlops(bool)>
   31d68:	e1a00004 	mov	r0, r4
   31d6c:	e8bd4010 	pop	{r4, lr}
   31d70:	eaffffd4 	b	31cc8 <BusAccess::waitHandleReadRelease()>

00031d74 <BusAccess::waitHandleNew()>:
   31d74:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31d78:	e1a06000 	mov	r6, r0
   31d7c:	e24dd018 	sub	sp, sp, #24
   31d80:	e3a04000 	mov	r4, #0
   31d84:	ebfff06c 	bl	2df3c <micros>
   31d88:	e5d631c5 	ldrb	r3, [r6, #453]	; 0x1c5
   31d8c:	e1a08000 	mov	r8, r0
   31d90:	e1530004 	cmp	r3, r4
   31d94:	e58d400c 	str	r4, [sp, #12]
   31d98:	e58d4010 	str	r4, [sp, #16]
   31d9c:	1a000076 	bne	31f7c <BusAccess::waitHandleNew()+0x208>
   31da0:	e1a00006 	mov	r0, r6
   31da4:	eb000194 	bl	323fc <BusAccess::controlBusRead()>
   31da8:	e5d631d1 	ldrb	r3, [r6, #465]	; 0x1d1
   31dac:	e1a07000 	mov	r7, r0
   31db0:	e3530000 	cmp	r3, #0
   31db4:	0a00006b 	beq	31f68 <BusAccess::waitHandleNew()+0x1f4>
   31db8:	e3a03000 	mov	r3, #0
   31dbc:	e5c631d1 	strb	r3, [r6, #465]	; 0x1d1
   31dc0:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
   31dc4:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
   31dc8:	e58d3014 	str	r3, [sp, #20]
   31dcc:	e3520000 	cmp	r2, #0
   31dd0:	c1a04006 	movgt	r4, r6
   31dd4:	c3a05000 	movgt	r5, #0
   31dd8:	c28d9014 	addgt	r9, sp, #20
   31ddc:	da000010 	ble	31e24 <BusAccess::waitHandleNew()+0xb0>
   31de0:	e5d43004 	ldrb	r3, [r4, #4]
   31de4:	e2855001 	add	r5, r5, #1
   31de8:	e3530000 	cmp	r3, #0
   31dec:	0a000009 	beq	31e18 <BusAccess::waitHandleNew()+0xa4>
   31df0:	e594a008 	ldr	sl, [r4, #8]
   31df4:	e35a0000 	cmp	sl, #0
   31df8:	0a000006 	beq	31e18 <BusAccess::waitHandleNew()+0xa4>
   31dfc:	e59d2010 	ldr	r2, [sp, #16]
   31e00:	e5940010 	ldr	r0, [r4, #16]
   31e04:	e59d100c 	ldr	r1, [sp, #12]
   31e08:	e58d9000 	str	r9, [sp]
   31e0c:	e1a03007 	mov	r3, r7
   31e10:	e12fff3a 	blx	sl
   31e14:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
   31e18:	e1520005 	cmp	r2, r5
   31e1c:	e284402c 	add	r4, r4, #44	; 0x2c
   31e20:	caffffee 	bgt	31de0 <BusAccess::waitHandleNew()+0x6c>
   31e24:	e2174001 	ands	r4, r7, #1
   31e28:	0a000001 	beq	31e34 <BusAccess::waitHandleNew()+0xc0>
   31e2c:	e317000c 	tst	r7, #12
   31e30:	1a000026 	bne	31ed0 <BusAccess::waitHandleNew()+0x15c>
   31e34:	e2073018 	and	r3, r7, #24
   31e38:	e3530018 	cmp	r3, #24
   31e3c:	0a000023 	beq	31ed0 <BusAccess::waitHandleNew()+0x15c>
   31e40:	ebfff03d 	bl	2df3c <micros>
   31e44:	e5963234 	ldr	r3, [r6, #564]	; 0x234
   31e48:	e3170004 	tst	r7, #4
   31e4c:	e2833001 	add	r3, r3, #1
   31e50:	e0408008 	sub	r8, r0, r8
   31e54:	e5863234 	str	r3, [r6, #564]	; 0x234
   31e58:	0a000033 	beq	31f2c <BusAccess::waitHandleNew()+0x1b8>
   31e5c:	e3540000 	cmp	r4, #0
   31e60:	0a00003b 	beq	31f54 <BusAccess::waitHandleNew()+0x1e0>
   31e64:	e5963254 	ldr	r3, [r6, #596]	; 0x254
   31e68:	e2833001 	add	r3, r3, #1
   31e6c:	e5863254 	str	r3, [r6, #596]	; 0x254
   31e70:	e59f319c 	ldr	r3, [pc, #412]	; 32014 <BusAccess::waitHandleNew()+0x2a0>
   31e74:	e5962238 	ldr	r2, [r6, #568]	; 0x238
   31e78:	e1520003 	cmp	r2, r3
   31e7c:	83a03000 	movhi	r3, #0
   31e80:	85863238 	strhi	r3, [r6, #568]	; 0x238
   31e84:	8586323c 	strhi	r3, [r6, #572]	; 0x23c
   31e88:	e59f3188 	ldr	r3, [pc, #392]	; 32018 <BusAccess::waitHandleNew()+0x2a4>
   31e8c:	e1580003 	cmp	r8, r3
   31e90:	8a000009 	bhi	31ebc <BusAccess::waitHandleNew()+0x148>
   31e94:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   31e98:	e5963238 	ldr	r3, [r6, #568]	; 0x238
   31e9c:	e596123c 	ldr	r1, [r6, #572]	; 0x23c
   31ea0:	e0883003 	add	r3, r8, r3
   31ea4:	e2811001 	add	r1, r1, #1
   31ea8:	e5863238 	str	r3, [r6, #568]	; 0x238
   31eac:	e0000390 	mul	r0, r0, r3
   31eb0:	e586123c 	str	r1, [r6, #572]	; 0x23c
   31eb4:	eb002fa6 	bl	3dd54 <__aeabi_uidiv>
   31eb8:	e5860240 	str	r0, [r6, #576]	; 0x240
   31ebc:	e5963244 	ldr	r3, [r6, #580]	; 0x244
   31ec0:	e1580003 	cmp	r8, r3
   31ec4:	85868244 	strhi	r8, [r6, #580]	; 0x244
   31ec8:	e28dd018 	add	sp, sp, #24
   31ecc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31ed0:	e59d3014 	ldr	r3, [sp, #20]
   31ed4:	e3530000 	cmp	r3, #0
   31ed8:	baffffd8 	blt	31e40 <BusAccess::waitHandleNew()+0xcc>
   31edc:	e5d621d1 	ldrb	r2, [r6, #465]	; 0x1d1
   31ee0:	e3520000 	cmp	r2, #0
   31ee4:	1a00002c 	bne	31f9c <BusAccess::waitHandleNew()+0x228>
   31ee8:	e3a0c040 	mov	ip, #64	; 0x40
   31eec:	e1a03a03 	lsl	r3, r3, #20
   31ef0:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
   31ef4:	e1e01003 	mvn	r1, r3
   31ef8:	e3a0e001 	mov	lr, #1
   31efc:	e59f2118 	ldr	r2, [pc, #280]	; 3201c <BusAccess::waitHandleNew()+0x2a8>
   31f00:	e59f0118 	ldr	r0, [pc, #280]	; 32020 <BusAccess::waitHandleNew()+0x2ac>
   31f04:	e582c028 	str	ip, [r2, #40]	; 0x28
   31f08:	e592c008 	ldr	ip, [r2, #8]
   31f0c:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   31f10:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   31f14:	e18c0000 	orr	r0, ip, r0
   31f18:	e5820008 	str	r0, [r2, #8]
   31f1c:	e582301c 	str	r3, [r2, #28]
   31f20:	e5821028 	str	r1, [r2, #40]	; 0x28
   31f24:	e5c6e1c4 	strb	lr, [r6, #452]	; 0x1c4
   31f28:	eaffffc4 	b	31e40 <BusAccess::waitHandleNew()+0xcc>
   31f2c:	e3170008 	tst	r7, #8
   31f30:	0affffce 	beq	31e70 <BusAccess::waitHandleNew()+0xfc>
   31f34:	e3540000 	cmp	r4, #0
   31f38:	1a000013 	bne	31f8c <BusAccess::waitHandleNew()+0x218>
   31f3c:	e3170002 	tst	r7, #2
   31f40:	0a000024 	beq	31fd8 <BusAccess::waitHandleNew()+0x264>
   31f44:	e5963260 	ldr	r3, [r6, #608]	; 0x260
   31f48:	e2833001 	add	r3, r3, #1
   31f4c:	e5863260 	str	r3, [r6, #608]	; 0x260
   31f50:	eaffffc6 	b	31e70 <BusAccess::waitHandleNew()+0xfc>
   31f54:	e3170002 	tst	r7, #2
   31f58:	15963258 	ldrne	r3, [r6, #600]	; 0x258
   31f5c:	12833001 	addne	r3, r3, #1
   31f60:	15863258 	strne	r3, [r6, #600]	; 0x258
   31f64:	eaffffc1 	b	31e70 <BusAccess::waitHandleNew()+0xfc>
   31f68:	e28d2010 	add	r2, sp, #16
   31f6c:	e28d100c 	add	r1, sp, #12
   31f70:	e1a00006 	mov	r0, r6
   31f74:	eb00016d 	bl	32530 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>
   31f78:	eaffff90 	b	31dc0 <BusAccess::waitHandleNew()+0x4c>
   31f7c:	e1a00006 	mov	r0, r6
   31f80:	eb000725 	bl	33c1c <BusAccess::busAccessCallbackPageIn()>
   31f84:	e5c641c5 	strb	r4, [r6, #453]	; 0x1c5
   31f88:	eaffff84 	b	31da0 <BusAccess::waitHandleNew()+0x2c>
   31f8c:	e596325c 	ldr	r3, [r6, #604]	; 0x25c
   31f90:	e2833001 	add	r3, r3, #1
   31f94:	e586325c 	str	r3, [r6, #604]	; 0x25c
   31f98:	eaffffb4 	b	31e70 <BusAccess::waitHandleNew()+0xfc>
   31f9c:	e5963000 	ldr	r3, [r6]
   31fa0:	e3530011 	cmp	r3, #17
   31fa4:	0a000010 	beq	31fec <BusAccess::waitHandleNew()+0x278>
   31fa8:	e3a03c02 	mov	r3, #512	; 0x200
   31fac:	e3a02c0e 	mov	r2, #3584	; 0xe00
   31fb0:	e3a09801 	mov	r9, #65536	; 0x10000
   31fb4:	e59f5060 	ldr	r5, [pc, #96]	; 3201c <BusAccess::waitHandleNew()+0x2a8>
   31fb8:	e3a0000a 	mov	r0, #10
   31fbc:	e5852028 	str	r2, [r5, #40]	; 0x28
   31fc0:	e585301c 	str	r3, [r5, #28]
   31fc4:	e5859028 	str	r9, [r5, #40]	; 0x28
   31fc8:	eb00321b 	bl	3e83c <lowlev_cycleDelay>
   31fcc:	e59d3014 	ldr	r3, [sp, #20]
   31fd0:	e585901c 	str	r9, [r5, #28]
   31fd4:	eaffffc3 	b	31ee8 <BusAccess::waitHandleNew()+0x174>
   31fd8:	e3170010 	tst	r7, #16
   31fdc:	15963264 	ldrne	r3, [r6, #612]	; 0x264
   31fe0:	12833001 	addne	r3, r3, #1
   31fe4:	15863264 	strne	r3, [r6, #612]	; 0x264
   31fe8:	eaffffa0 	b	31e70 <BusAccess::waitHandleNew()+0xfc>
   31fec:	e3a03c02 	mov	r3, #512	; 0x200
   31ff0:	e3a09c0e 	mov	r9, #3584	; 0xe00
   31ff4:	e59f5020 	ldr	r5, [pc, #32]	; 3201c <BusAccess::waitHandleNew()+0x2a8>
   31ff8:	e3a0000a 	mov	r0, #10
   31ffc:	e5859028 	str	r9, [r5, #40]	; 0x28
   32000:	e585301c 	str	r3, [r5, #28]
   32004:	eb00320c 	bl	3e83c <lowlev_cycleDelay>
   32008:	e5859028 	str	r9, [r5, #40]	; 0x28
   3200c:	e59d3014 	ldr	r3, [sp, #20]
   32010:	eaffffb4 	b	31ee8 <BusAccess::waitHandleNew()+0x174>
   32014:	3b9aca00 	.word	0x3b9aca00
   32018:	000f423f 	.word	0x000f423f
   3201c:	20200000 	.word	0x20200000
   32020:	00249249 	.word	0x00249249

00032024 <BusAccess::serviceWaitActivity()>:
   32024:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   32028:	e92d4010 	push	{r4, lr}
   3202c:	e3530000 	cmp	r3, #0
   32030:	e1a04000 	mov	r4, r0
   32034:	0a00002d 	beq	320f0 <BusAccess::serviceWaitActivity()+0xcc>
   32038:	e1a00004 	mov	r0, r4
   3203c:	ebfffe5b 	bl	319b0 <BusAccess::busActionHandleActive()>
   32040:	e5d431c3 	ldrb	r3, [r4, #451]	; 0x1c3
   32044:	e3530000 	cmp	r3, #0
   32048:	1a00000a 	bne	32078 <BusAccess::serviceWaitActivity()+0x54>
   3204c:	e59f30d8 	ldr	r3, [pc, #216]	; 3212c <BusAccess::serviceWaitActivity()+0x108>
   32050:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   32054:	e2033024 	and	r3, r3, #36	; 0x24
   32058:	e3530004 	cmp	r3, #4
   3205c:	0a000025 	beq	320f8 <BusAccess::serviceWaitActivity()+0xd4>
   32060:	e5d431c1 	ldrb	r3, [r4, #449]	; 0x1c1
   32064:	e3530000 	cmp	r3, #0
   32068:	1a000002 	bne	32078 <BusAccess::serviceWaitActivity()+0x54>
   3206c:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   32070:	e3530001 	cmp	r3, #1
   32074:	0a000029 	beq	32120 <BusAccess::serviceWaitActivity()+0xfc>
   32078:	e5d431c3 	ldrb	r3, [r4, #451]	; 0x1c3
   3207c:	e3530000 	cmp	r3, #0
   32080:	08bd8010 	popeq	{r4, pc}
   32084:	e59f30a0 	ldr	r3, [pc, #160]	; 3212c <BusAccess::serviceWaitActivity()+0x108>
   32088:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   3208c:	e3130001 	tst	r3, #1
   32090:	0a00000e 	beq	320d0 <BusAccess::serviceWaitActivity()+0xac>
   32094:	ebffefa8 	bl	2df3c <micros>
   32098:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   3209c:	e59421c8 	ldr	r2, [r4, #456]	; 0x1c8
   320a0:	ebffefc3 	bl	2dfb4 <isTimeout>
   320a4:	e3500000 	cmp	r0, #0
   320a8:	08bd8010 	popeq	{r4, pc}
   320ac:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   320b0:	e3530001 	cmp	r3, #1
   320b4:	0a000016 	beq	32114 <BusAccess::serviceWaitActivity()+0xf0>
   320b8:	e1a00004 	mov	r0, r4
   320bc:	e3a01000 	mov	r1, #0
   320c0:	eb00053d 	bl	335bc <BusAccess::waitResetFlipFlops(bool)>
   320c4:	e1a00004 	mov	r0, r4
   320c8:	e8bd4010 	pop	{r4, lr}
   320cc:	eafffefd 	b	31cc8 <BusAccess::waitHandleReadRelease()>
   320d0:	e5d431d0 	ldrb	r3, [r4, #464]	; 0x1d0
   320d4:	e3530000 	cmp	r3, #0
   320d8:	0affffed 	beq	32094 <BusAccess::serviceWaitActivity()+0x70>
   320dc:	ebffef96 	bl	2df3c <micros>
   320e0:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   320e4:	ebffef94 	bl	2df3c <micros>
   320e8:	e58401e0 	str	r0, [r4, #480]	; 0x1e0
   320ec:	e8bd8010 	pop	{r4, pc}
   320f0:	ebfffc2c 	bl	311a8 <BusAccess::busActionCheck() [clone .part.6]>
   320f4:	eaffffcf 	b	32038 <BusAccess::serviceWaitActivity()+0x14>
   320f8:	ebffef8f 	bl	2df3c <micros>
   320fc:	e3a03001 	mov	r3, #1
   32100:	e58401cc 	str	r0, [r4, #460]	; 0x1cc
   32104:	e1a00004 	mov	r0, r4
   32108:	e5c431c3 	strb	r3, [r4, #451]	; 0x1c3
   3210c:	ebffff18 	bl	31d74 <BusAccess::waitHandleNew()>
   32110:	eaffffd8 	b	32078 <BusAccess::serviceWaitActivity()+0x54>
   32114:	e1a00004 	mov	r0, r4
   32118:	ebfffbe4 	bl	310b0 <BusAccess::busActionHandleStart() [clone .part.7]>
   3211c:	eaffffe5 	b	320b8 <BusAccess::serviceWaitActivity()+0x94>
   32120:	e1a00004 	mov	r0, r4
   32124:	ebfffbe1 	bl	310b0 <BusAccess::busActionHandleStart() [clone .part.7]>
   32128:	eaffffd2 	b	32078 <BusAccess::serviceWaitActivity()+0x54>
   3212c:	20200000 	.word	0x20200000

00032130 <BusAccess::service()>:
   32130:	e5d031c0 	ldrb	r3, [r0, #448]	; 0x1c0
   32134:	e3530000 	cmp	r3, #0
   32138:	012fff1e 	bxeq	lr
   3213c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   32140:	e1a04000 	mov	r4, r0
   32144:	ebffef7c 	bl	2df3c <micros>
   32148:	e3a0500a 	mov	r5, #10
   3214c:	e1a07000 	mov	r7, r0
   32150:	e59f6048 	ldr	r6, [pc, #72]	; 321a0 <BusAccess::service()+0x70>
   32154:	e1a00004 	mov	r0, r4
   32158:	ebffffb1 	bl	32024 <BusAccess::serviceWaitActivity()>
   3215c:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   32160:	e3530002 	cmp	r3, #2
   32164:	0a000002 	beq	32174 <BusAccess::service()+0x44>
   32168:	e5d431c3 	ldrb	r3, [r4, #451]	; 0x1c3
   3216c:	e3530000 	cmp	r3, #0
   32170:	0a000009 	beq	3219c <BusAccess::service()+0x6c>
   32174:	ebffef70 	bl	2df3c <micros>
   32178:	e1a02006 	mov	r2, r6
   3217c:	e1a01007 	mov	r1, r7
   32180:	ebffef8b 	bl	2dfb4 <isTimeout>
   32184:	e3500000 	cmp	r0, #0
   32188:	1a000002 	bne	32198 <BusAccess::service()+0x68>
   3218c:	e2555001 	subs	r5, r5, #1
   32190:	1affffef 	bne	32154 <BusAccess::service()+0x24>
   32194:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   32198:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3219c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   321a0:	00002710 	.word	0x00002710

000321a4 <BusAccessStatusInfo::getJson()>:
   321a4:	e92d4070 	push	{r4, r5, r6, lr}
   321a8:	e1a04000 	mov	r4, r0
   321ac:	e5902048 	ldr	r2, [r0, #72]	; 0x48
   321b0:	e24ddf9e 	sub	sp, sp, #632	; 0x278
   321b4:	e5903000 	ldr	r3, [r0]
   321b8:	e280003c 	add	r0, r0, #60	; 0x3c
   321bc:	e8905001 	ldm	r0, {r0, ip, lr}
   321c0:	e5941010 	ldr	r1, [r4, #16]
   321c4:	e58d2014 	str	r2, [sp, #20]
   321c8:	e594200c 	ldr	r2, [r4, #12]
   321cc:	e59f5088 	ldr	r5, [pc, #136]	; 3225c <BusAccessStatusInfo::getJson()+0xb8>
   321d0:	e58de010 	str	lr, [sp, #16]
   321d4:	e58dc00c 	str	ip, [sp, #12]
   321d8:	e58d0008 	str	r0, [sp, #8]
   321dc:	e58d1004 	str	r1, [sp, #4]
   321e0:	e58d2000 	str	r2, [sp]
   321e4:	e1a00005 	mov	r0, r5
   321e8:	e59f2070 	ldr	r2, [pc, #112]	; 32260 <BusAccessStatusInfo::getJson()+0xbc>
   321ec:	e3a01f96 	mov	r1, #600	; 0x258
   321f0:	ebfff003 	bl	2e204 <snprintf>
   321f4:	e594201c 	ldr	r2, [r4, #28]
   321f8:	e5943020 	ldr	r3, [r4, #32]
   321fc:	e594e014 	ldr	lr, [r4, #20]
   32200:	e594c030 	ldr	ip, [r4, #48]	; 0x30
   32204:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   32208:	e5946018 	ldr	r6, [r4, #24]
   3220c:	e58d2018 	str	r2, [sp, #24]
   32210:	e5941028 	ldr	r1, [r4, #40]	; 0x28
   32214:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   32218:	e58de010 	str	lr, [sp, #16]
   3221c:	e58dc00c 	str	ip, [sp, #12]
   32220:	e58d0008 	str	r0, [sp, #8]
   32224:	e58d1004 	str	r1, [sp, #4]
   32228:	e58d2000 	str	r2, [sp]
   3222c:	e58d6014 	str	r6, [sp, #20]
   32230:	e28d0020 	add	r0, sp, #32
   32234:	e59f2028 	ldr	r2, [pc, #40]	; 32264 <BusAccessStatusInfo::getJson()+0xc0>
   32238:	e3a01f96 	mov	r1, #600	; 0x258
   3223c:	ebffeff0 	bl	2e204 <snprintf>
   32240:	e28d1020 	add	r1, sp, #32
   32244:	e1a00005 	mov	r0, r5
   32248:	e3a02f96 	mov	r2, #600	; 0x258
   3224c:	ebffef91 	bl	2e098 <strlcat>
   32250:	e1a00005 	mov	r0, r5
   32254:	e28ddf9e 	add	sp, sp, #632	; 0x278
   32258:	e8bd8070 	pop	{r4, r5, r6, pc}
   3225c:	0004e300 	.word	0x0004e300
   32260:	0004685c 	.word	0x0004685c
   32264:	000468c8 	.word	0x000468c8

00032268 <BusAccess::busSocketIsEnabled(int)>:
   32268:	e3510000 	cmp	r1, #0
   3226c:	ba000006 	blt	3228c <BusAccess::busSocketIsEnabled(int)+0x24>
   32270:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   32274:	e1510003 	cmp	r1, r3
   32278:	aa000003 	bge	3228c <BusAccess::busSocketIsEnabled(int)+0x24>
   3227c:	e3a0302c 	mov	r3, #44	; 0x2c
   32280:	e0210193 	mla	r1, r3, r1, r0
   32284:	e5d10004 	ldrb	r0, [r1, #4]
   32288:	e12fff1e 	bx	lr
   3228c:	e3a00000 	mov	r0, #0
   32290:	e12fff1e 	bx	lr

00032294 <BusAccess::getStatus(BusAccessStatusInfo&)>:
   32294:	e1a03001 	mov	r3, r1
   32298:	e92d4010 	push	{r4, lr}
   3229c:	e2801f8d 	add	r1, r0, #564	; 0x234
   322a0:	e3a0204c 	mov	r2, #76	; 0x4c
   322a4:	e1a00003 	mov	r0, r3
   322a8:	ebffe19c 	bl	2a920 <memcpy>
   322ac:	e8bd8010 	pop	{r4, pc}

000322b0 <BusAccess::clearStatus()>:
   322b0:	e3a03000 	mov	r3, #0
   322b4:	e5803234 	str	r3, [r0, #564]	; 0x234
   322b8:	e5803238 	str	r3, [r0, #568]	; 0x238
   322bc:	e580323c 	str	r3, [r0, #572]	; 0x23c
   322c0:	e5803240 	str	r3, [r0, #576]	; 0x240
   322c4:	e5803244 	str	r3, [r0, #580]	; 0x244
   322c8:	e5803248 	str	r3, [r0, #584]	; 0x248
   322cc:	e580324c 	str	r3, [r0, #588]	; 0x24c
   322d0:	e5803250 	str	r3, [r0, #592]	; 0x250
   322d4:	e5803268 	str	r3, [r0, #616]	; 0x268
   322d8:	e580326c 	str	r3, [r0, #620]	; 0x26c
   322dc:	e5803270 	str	r3, [r0, #624]	; 0x270
   322e0:	e5803274 	str	r3, [r0, #628]	; 0x274
   322e4:	e5803278 	str	r3, [r0, #632]	; 0x278
   322e8:	e580327c 	str	r3, [r0, #636]	; 0x27c
   322ec:	e5803254 	str	r3, [r0, #596]	; 0x254
   322f0:	e5803258 	str	r3, [r0, #600]	; 0x258
   322f4:	e580325c 	str	r3, [r0, #604]	; 0x25c
   322f8:	e5803260 	str	r3, [r0, #608]	; 0x260
   322fc:	e5803264 	str	r3, [r0, #612]	; 0x264
   32300:	e12fff1e 	bx	lr

00032304 <BusAccess::isUnderControl()>:
   32304:	e5d001f1 	ldrb	r0, [r0, #497]	; 0x1f1
   32308:	e12fff1e 	bx	lr

0003230c <BusAccess::controlRequest()>:
   3230c:	e3a0c040 	mov	ip, #64	; 0x40
   32310:	e59f3018 	ldr	r3, [pc, #24]	; 32330 <BusAccess::controlRequest()+0x24>
   32314:	e3a01000 	mov	r1, #0
   32318:	e5932008 	ldr	r2, [r3, #8]
   3231c:	e3a00013 	mov	r0, #19
   32320:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   32324:	e5832008 	str	r2, [r3, #8]
   32328:	e583c01c 	str	ip, [r3, #28]
   3232c:	ea003115 	b	3e788 <digitalWrite>
   32330:	20200000 	.word	0x20200000

00032334 <BusAccess::waitForBusAck(bool)>:
   32334:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   32338:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   3233c:	e1a04001 	mov	r4, r1
   32340:	e59f10ac 	ldr	r1, [pc, #172]	; 323f4 <BusAccess::waitForBusAck(bool)+0xc0>
   32344:	ea000001 	b	32350 <BusAccess::waitForBusAck(bool)+0x1c>
   32348:	e2522001 	subs	r2, r2, #1
   3234c:	0a000005 	beq	32368 <BusAccess::waitForBusAck(bool)+0x34>
   32350:	e5913034 	ldr	r3, [r1, #52]	; 0x34
   32354:	e1a03123 	lsr	r3, r3, #2
   32358:	e2233001 	eor	r3, r3, #1
   3235c:	e2033001 	and	r3, r3, #1
   32360:	e1540003 	cmp	r4, r3
   32364:	1afffff7 	bne	32348 <BusAccess::waitForBusAck(bool)+0x14>
   32368:	e59f5084 	ldr	r5, [pc, #132]	; 323f4 <BusAccess::waitForBusAck(bool)+0xc0>
   3236c:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   32370:	e1a03123 	lsr	r3, r3, #2
   32374:	e2233001 	eor	r3, r3, #1
   32378:	e2033001 	and	r3, r3, #1
   3237c:	e1540003 	cmp	r4, r3
   32380:	0a000012 	beq	323d0 <BusAccess::waitForBusAck(bool)+0x9c>
   32384:	e5901224 	ldr	r1, [r0, #548]	; 0x224
   32388:	e59f0068 	ldr	r0, [pc, #104]	; 323f8 <BusAccess::waitForBusAck(bool)+0xc4>
   3238c:	eb002e70 	bl	3dd54 <__aeabi_uidiv>
   32390:	e3500000 	cmp	r0, #0
   32394:	11a07000 	movne	r7, r0
   32398:	03a07001 	moveq	r7, #1
   3239c:	e3a08000 	mov	r8, #0
   323a0:	e3a06001 	mov	r6, #1
   323a4:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   323a8:	e2888001 	add	r8, r8, #1
   323ac:	e1a03123 	lsr	r3, r3, #2
   323b0:	e2233001 	eor	r3, r3, #1
   323b4:	e2033001 	and	r3, r3, #1
   323b8:	e1540003 	cmp	r4, r3
   323bc:	0a000003 	beq	323d0 <BusAccess::waitForBusAck(bool)+0x9c>
   323c0:	e1a00006 	mov	r0, r6
   323c4:	ebffeee4 	bl	2df5c <microsDelay>
   323c8:	e1580007 	cmp	r8, r7
   323cc:	1afffff4 	bne	323a4 <BusAccess::waitForBusAck(bool)+0x70>
   323d0:	e59f301c 	ldr	r3, [pc, #28]	; 323f4 <BusAccess::waitForBusAck(bool)+0xc0>
   323d4:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   323d8:	e1a00120 	lsr	r0, r0, #2
   323dc:	e2200001 	eor	r0, r0, #1
   323e0:	e2000001 	and	r0, r0, #1
   323e4:	e0400004 	sub	r0, r0, r4
   323e8:	e16f0f10 	clz	r0, r0
   323ec:	e1a002a0 	lsr	r0, r0, #5
   323f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   323f4:	20200000 	.word	0x20200000
   323f8:	3b9aca00 	.word	0x3b9aca00

000323fc <BusAccess::controlBusRead()>:
   323fc:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32400:	e1a05000 	mov	r5, r0
   32404:	ebffeecc 	bl	2df3c <micros>
   32408:	e595b000 	ldr	fp, [r5]
   3240c:	e59f4118 	ldr	r4, [pc, #280]	; 3252c <BusAccess::controlBusRead()+0x130>
   32410:	e35b0011 	cmp	fp, #17
   32414:	e3a08000 	mov	r8, #0
   32418:	e1a07000 	mov	r7, r0
   3241c:	e3a0600a 	mov	r6, #10
   32420:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   32424:	0a000031 	beq	324f0 <BusAccess::controlBusRead()+0xf4>
   32428:	e3130802 	tst	r3, #131072	; 0x20000
   3242c:	13a0a000 	movne	sl, #0
   32430:	03a0a002 	moveq	sl, #2
   32434:	e3130001 	tst	r3, #1
   32438:	13a0e000 	movne	lr, #0
   3243c:	03a0e004 	moveq	lr, #4
   32440:	e3130002 	tst	r3, #2
   32444:	13a0c000 	movne	ip, #0
   32448:	03a0c008 	moveq	ip, #8
   3244c:	e3130020 	tst	r3, #32
   32450:	13a00000 	movne	r0, #0
   32454:	03a00020 	moveq	r0, #32
   32458:	e3130008 	tst	r3, #8
   3245c:	13a01000 	movne	r1, #0
   32460:	03a01010 	moveq	r1, #16
   32464:	e3130004 	tst	r3, #4
   32468:	13a09000 	movne	r9, #0
   3246c:	03a09b01 	moveq	r9, #1024	; 0x400
   32470:	e1a02923 	lsr	r2, r3, #18
   32474:	e2222001 	eor	r2, r2, #1
   32478:	e2022001 	and	r2, r2, #1
   3247c:	e18a2002 	orr	r2, sl, r2
   32480:	e18ee002 	orr	lr, lr, r2
   32484:	e18cc00e 	orr	ip, ip, lr
   32488:	e180000c 	orr	r0, r0, ip
   3248c:	e1811000 	orr	r1, r1, r0
   32490:	e35b0011 	cmp	fp, #17
   32494:	e2888001 	add	r8, r8, #1
   32498:	e1899001 	orr	r9, r9, r1
   3249c:	0a00001c 	beq	32514 <BusAccess::controlBusRead()+0x118>
   324a0:	e319000c 	tst	r9, #12
   324a4:	e2093018 	and	r3, r9, #24
   324a8:	0a000003 	beq	324bc <BusAccess::controlBusRead()+0xc0>
   324ac:	e3190003 	tst	r9, #3
   324b0:	0a000001 	beq	324bc <BusAccess::controlBusRead()+0xc0>
   324b4:	e1a00009 	mov	r0, r9
   324b8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   324bc:	e3530018 	cmp	r3, #24
   324c0:	0afffffb 	beq	324b4 <BusAccess::controlBusRead()+0xb8>
   324c4:	ebffee9c 	bl	2df3c <micros>
   324c8:	e1a02006 	mov	r2, r6
   324cc:	e1a01007 	mov	r1, r7
   324d0:	ebffeeb7 	bl	2dfb4 <isTimeout>
   324d4:	e3500000 	cmp	r0, #0
   324d8:	13580064 	cmpne	r8, #100	; 0x64
   324dc:	cafffff4 	bgt	324b4 <BusAccess::controlBusRead()+0xb8>
   324e0:	e595b000 	ldr	fp, [r5]
   324e4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   324e8:	e35b0011 	cmp	fp, #17
   324ec:	1affffcd 	bne	32428 <BusAccess::controlBusRead()+0x2c>
   324f0:	e3a03040 	mov	r3, #64	; 0x40
   324f4:	e3a00064 	mov	r0, #100	; 0x64
   324f8:	e5843028 	str	r3, [r4, #40]	; 0x28
   324fc:	eb0030ce 	bl	3e83c <lowlev_cycleDelay>
   32500:	e3a02040 	mov	r2, #64	; 0x40
   32504:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   32508:	e584201c 	str	r2, [r4, #28]
   3250c:	e595b000 	ldr	fp, [r5]
   32510:	eaffffc4 	b	32428 <BusAccess::controlBusRead()+0x2c>
   32514:	e3130601 	tst	r3, #1048576	; 0x100000
   32518:	13a03000 	movne	r3, #0
   3251c:	03a03010 	moveq	r3, #16
   32520:	e3c99010 	bic	r9, r9, #16
   32524:	e1839009 	orr	r9, r3, r9
   32528:	eaffffdc 	b	324a0 <BusAccess::controlBusRead()+0xa4>
   3252c:	20200000 	.word	0x20200000

00032530 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>:
   32530:	e5903000 	ldr	r3, [r0]
   32534:	e92d4070 	push	{r4, r5, r6, lr}
   32538:	e3530011 	cmp	r3, #17
   3253c:	e1a05002 	mov	r5, r2
   32540:	03a02040 	moveq	r2, #64	; 0x40
   32544:	059f315c 	ldreq	r3, [pc, #348]	; 326a8 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   32548:	e1a06001 	mov	r6, r1
   3254c:	05832028 	streq	r2, [r3, #40]	; 0x28
   32550:	e59f3150 	ldr	r3, [pc, #336]	; 326a8 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   32554:	e1a04000 	mov	r4, r0
   32558:	e5932008 	ldr	r2, [r3, #8]
   3255c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   32560:	e5832008 	str	r2, [r3, #8]
   32564:	e5902000 	ldr	r2, [r0]
   32568:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   3256c:	e3520011 	cmp	r2, #17
   32570:	03a02c0e 	moveq	r2, #3584	; 0xe00
   32574:	13a02801 	movne	r2, #65536	; 0x10000
   32578:	13a01c0e 	movne	r1, #3584	; 0xe00
   3257c:	1583201c 	strne	r2, [r3, #28]
   32580:	05832028 	streq	r2, [r3, #40]	; 0x28
   32584:	15831028 	strne	r1, [r3, #40]	; 0x28
   32588:	0583201c 	streq	r2, [r3, #28]
   3258c:	1583101c 	strne	r1, [r3, #28]
   32590:	15832028 	strne	r2, [r3, #40]	; 0x28
   32594:	eb0030a8 	bl	3e83c <lowlev_cycleDelay>
   32598:	e59f2108 	ldr	r2, [pc, #264]	; 326a8 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   3259c:	e5941000 	ldr	r1, [r4]
   325a0:	e5923034 	ldr	r3, [r2, #52]	; 0x34
   325a4:	e3510011 	cmp	r1, #17
   325a8:	e1a03623 	lsr	r3, r3, #12
   325ac:	e2033cff 	and	r3, r3, #65280	; 0xff00
   325b0:	e5863000 	str	r3, [r6]
   325b4:	0a00002e 	beq	32674 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x144>
   325b8:	e3a03801 	mov	r3, #65536	; 0x10000
   325bc:	e3a00c0e 	mov	r0, #3584	; 0xe00
   325c0:	e3a01c06 	mov	r1, #1536	; 0x600
   325c4:	e582301c 	str	r3, [r2, #28]
   325c8:	e5820028 	str	r0, [r2, #40]	; 0x28
   325cc:	e582101c 	str	r1, [r2, #28]
   325d0:	e5823028 	str	r3, [r2, #40]	; 0x28
   325d4:	e3a00f7d 	mov	r0, #500	; 0x1f4
   325d8:	eb003097 	bl	3e83c <lowlev_cycleDelay>
   325dc:	e59f10c4 	ldr	r1, [pc, #196]	; 326a8 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   325e0:	e5963000 	ldr	r3, [r6]
   325e4:	e5912034 	ldr	r2, [r1, #52]	; 0x34
   325e8:	e5940000 	ldr	r0, [r4]
   325ec:	e1a02202 	lsl	r2, r2, #4
   325f0:	e1833c22 	orr	r3, r3, r2, lsr #24
   325f4:	e3500011 	cmp	r0, #17
   325f8:	e5863000 	str	r3, [r6]
   325fc:	13a02801 	movne	r2, #65536	; 0x10000
   32600:	03a03c0e 	moveq	r3, #3584	; 0xe00
   32604:	13a03c0e 	movne	r3, #3584	; 0xe00
   32608:	1581201c 	strne	r2, [r1, #28]
   3260c:	e3a00f7d 	mov	r0, #500	; 0x1f4
   32610:	e5813028 	str	r3, [r1, #40]	; 0x28
   32614:	eb003088 	bl	3e83c <lowlev_cycleDelay>
   32618:	e3a03040 	mov	r3, #64	; 0x40
   3261c:	e59f6084 	ldr	r6, [pc, #132]	; 326a8 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   32620:	e586301c 	str	r3, [r6, #28]
   32624:	e5943000 	ldr	r3, [r4]
   32628:	e3530011 	cmp	r3, #17
   3262c:	0a000015 	beq	32688 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x158>
   32630:	e3a02c0e 	mov	r2, #3584	; 0xe00
   32634:	e3a03c02 	mov	r3, #512	; 0x200
   32638:	e3a04801 	mov	r4, #65536	; 0x10000
   3263c:	e5862028 	str	r2, [r6, #40]	; 0x28
   32640:	e3a0000a 	mov	r0, #10
   32644:	e586301c 	str	r3, [r6, #28]
   32648:	e5864028 	str	r4, [r6, #40]	; 0x28
   3264c:	eb00307a 	bl	3e83c <lowlev_cycleDelay>
   32650:	e586401c 	str	r4, [r6, #28]
   32654:	e3a00f7d 	mov	r0, #500	; 0x1f4
   32658:	eb003077 	bl	3e83c <lowlev_cycleDelay>
   3265c:	e59f3044 	ldr	r3, [pc, #68]	; 326a8 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   32660:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   32664:	e1a03a23 	lsr	r3, r3, #20
   32668:	e6ef3073 	uxtb	r3, r3
   3266c:	e5853000 	str	r3, [r5]
   32670:	e8bd8070 	pop	{r4, r5, r6, pc}
   32674:	e3a01c0e 	mov	r1, #3584	; 0xe00
   32678:	e3a03c06 	mov	r3, #1536	; 0x600
   3267c:	e5821028 	str	r1, [r2, #40]	; 0x28
   32680:	e582301c 	str	r3, [r2, #28]
   32684:	eaffffd2 	b	325d4 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0xa4>
   32688:	e3a04c0e 	mov	r4, #3584	; 0xe00
   3268c:	e3a03c02 	mov	r3, #512	; 0x200
   32690:	e5864028 	str	r4, [r6, #40]	; 0x28
   32694:	e3a0000a 	mov	r0, #10
   32698:	e586301c 	str	r3, [r6, #28]
   3269c:	eb003066 	bl	3e83c <lowlev_cycleDelay>
   326a0:	e5864028 	str	r4, [r6, #40]	; 0x28
   326a4:	eaffffea 	b	32654 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x124>
   326a8:	20200000 	.word	0x20200000

000326ac <BusAccess::addrLowSet(unsigned long)>:
   326ac:	e5903000 	ldr	r3, [r0]
   326b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   326b4:	e3530011 	cmp	r3, #17
   326b8:	e1a05000 	mov	r5, r0
   326bc:	e1a08001 	mov	r8, r1
   326c0:	0a00002f 	beq	32784 <BusAccess::addrLowSet(unsigned long)+0xd8>
   326c4:	e3a03b02 	mov	r3, #2048	; 0x800
   326c8:	e3a06801 	mov	r6, #65536	; 0x10000
   326cc:	e3a07c0e 	mov	r7, #3584	; 0xe00
   326d0:	e59f40f0 	ldr	r4, [pc, #240]	; 327c8 <BusAccess::addrLowSet(unsigned long)+0x11c>
   326d4:	e3a00096 	mov	r0, #150	; 0x96
   326d8:	e5847028 	str	r7, [r4, #40]	; 0x28
   326dc:	e584301c 	str	r3, [r4, #28]
   326e0:	e5846028 	str	r6, [r4, #40]	; 0x28
   326e4:	eb003054 	bl	3e83c <lowlev_cycleDelay>
   326e8:	e584601c 	str	r6, [r4, #28]
   326ec:	e5953000 	ldr	r3, [r5]
   326f0:	e3530011 	cmp	r3, #17
   326f4:	0a000012 	beq	32744 <BusAccess::addrLowSet(unsigned long)+0x98>
   326f8:	e3a03000 	mov	r3, #0
   326fc:	e6ef8078 	uxtb	r8, r8
   32700:	e5847028 	str	r7, [r4, #40]	; 0x28
   32704:	e2888001 	add	r8, r8, #1
   32708:	e584301c 	str	r3, [r4, #28]
   3270c:	e3a04000 	mov	r4, #0
   32710:	e3a07801 	mov	r7, #65536	; 0x10000
   32714:	e3a06096 	mov	r6, #150	; 0x96
   32718:	e59f50a8 	ldr	r5, [pc, #168]	; 327c8 <BusAccess::addrLowSet(unsigned long)+0x11c>
   3271c:	e1a00006 	mov	r0, r6
   32720:	e5857028 	str	r7, [r5, #40]	; 0x28
   32724:	eb003044 	bl	3e83c <lowlev_cycleDelay>
   32728:	e2844001 	add	r4, r4, #1
   3272c:	e585701c 	str	r7, [r5, #28]
   32730:	e1a00006 	mov	r0, r6
   32734:	eb003040 	bl	3e83c <lowlev_cycleDelay>
   32738:	e1540008 	cmp	r4, r8
   3273c:	1afffff6 	bne	3271c <BusAccess::addrLowSet(unsigned long)+0x70>
   32740:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   32744:	e3a04000 	mov	r4, #0
   32748:	e3a07801 	mov	r7, #65536	; 0x10000
   3274c:	e3a06096 	mov	r6, #150	; 0x96
   32750:	e6ef8078 	uxtb	r8, r8
   32754:	e59f506c 	ldr	r5, [pc, #108]	; 327c8 <BusAccess::addrLowSet(unsigned long)+0x11c>
   32758:	e2888001 	add	r8, r8, #1
   3275c:	e1a00006 	mov	r0, r6
   32760:	e585701c 	str	r7, [r5, #28]
   32764:	eb003034 	bl	3e83c <lowlev_cycleDelay>
   32768:	e2844001 	add	r4, r4, #1
   3276c:	e5857028 	str	r7, [r5, #40]	; 0x28
   32770:	e1a00006 	mov	r0, r6
   32774:	eb003030 	bl	3e83c <lowlev_cycleDelay>
   32778:	e1540008 	cmp	r4, r8
   3277c:	1afffff6 	bne	3275c <BusAccess::addrLowSet(unsigned long)+0xb0>
   32780:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   32784:	e3a03b02 	mov	r3, #2048	; 0x800
   32788:	e3a06c0e 	mov	r6, #3584	; 0xe00
   3278c:	e59f4034 	ldr	r4, [pc, #52]	; 327c8 <BusAccess::addrLowSet(unsigned long)+0x11c>
   32790:	e3a0000a 	mov	r0, #10
   32794:	e5846028 	str	r6, [r4, #40]	; 0x28
   32798:	e584301c 	str	r3, [r4, #28]
   3279c:	eb003026 	bl	3e83c <lowlev_cycleDelay>
   327a0:	e5846028 	str	r6, [r4, #40]	; 0x28
   327a4:	e5953000 	ldr	r3, [r5]
   327a8:	e3530011 	cmp	r3, #17
   327ac:	0affffe4 	beq	32744 <BusAccess::addrLowSet(unsigned long)+0x98>
   327b0:	e3a03000 	mov	r3, #0
   327b4:	e6ef8078 	uxtb	r8, r8
   327b8:	e5846028 	str	r6, [r4, #40]	; 0x28
   327bc:	e2888001 	add	r8, r8, #1
   327c0:	e584301c 	str	r3, [r4, #28]
   327c4:	eaffffd0 	b	3270c <BusAccess::addrLowSet(unsigned long)+0x60>
   327c8:	20200000 	.word	0x20200000

000327cc <BusAccess::addrLowInc()>:
   327cc:	e5903000 	ldr	r3, [r0]
   327d0:	e92d4070 	push	{r4, r5, r6, lr}
   327d4:	e3530011 	cmp	r3, #17
   327d8:	0a000008 	beq	32800 <BusAccess::addrLowInc()+0x34>
   327dc:	e3a03c0e 	mov	r3, #3584	; 0xe00
   327e0:	e3a05801 	mov	r5, #65536	; 0x10000
   327e4:	e59f4038 	ldr	r4, [pc, #56]	; 32824 <BusAccess::addrLowInc()+0x58>
   327e8:	e3a00096 	mov	r0, #150	; 0x96
   327ec:	e5843028 	str	r3, [r4, #40]	; 0x28
   327f0:	e5845028 	str	r5, [r4, #40]	; 0x28
   327f4:	eb003010 	bl	3e83c <lowlev_cycleDelay>
   327f8:	e584501c 	str	r5, [r4, #28]
   327fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   32800:	e3a05801 	mov	r5, #65536	; 0x10000
   32804:	e59f4018 	ldr	r4, [pc, #24]	; 32824 <BusAccess::addrLowInc()+0x58>
   32808:	e3a00096 	mov	r0, #150	; 0x96
   3280c:	e584501c 	str	r5, [r4, #28]
   32810:	eb003009 	bl	3e83c <lowlev_cycleDelay>
   32814:	e5845028 	str	r5, [r4, #40]	; 0x28
   32818:	e3a00096 	mov	r0, #150	; 0x96
   3281c:	e8bd4070 	pop	{r4, r5, r6, lr}
   32820:	ea003005 	b	3e83c <lowlev_cycleDelay>
   32824:	20200000 	.word	0x20200000

00032828 <BusAccess::addrHighSet(unsigned long)>:
   32828:	e5902000 	ldr	r2, [r0]
   3282c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32830:	e3520011 	cmp	r2, #17
   32834:	e1a08000 	mov	r8, r0
   32838:	e1a04001 	mov	r4, r1
   3283c:	0a00002a 	beq	328ec <BusAccess::addrHighSet(unsigned long)+0xc4>
   32840:	e3a0b009 	mov	fp, #9
   32844:	e59f5140 	ldr	r5, [pc, #320]	; 3298c <BusAccess::addrHighSet(unsigned long)+0x164>
   32848:	e3a09801 	mov	r9, #65536	; 0x10000
   3284c:	e3a0ac0e 	mov	sl, #3584	; 0xe00
   32850:	e3a070c8 	mov	r7, #200	; 0xc8
   32854:	e3a06080 	mov	r6, #128	; 0x80
   32858:	ea00000c 	b	32890 <BusAccess::addrHighSet(unsigned long)+0x68>
   3285c:	e3520011 	cmp	r2, #17
   32860:	1585901c 	strne	r9, [r5, #28]
   32864:	e585a028 	str	sl, [r5, #40]	; 0x28
   32868:	e1a00007 	mov	r0, r7
   3286c:	eb002ff2 	bl	3e83c <lowlev_cycleDelay>
   32870:	e585601c 	str	r6, [r5, #28]
   32874:	e1a00007 	mov	r0, r7
   32878:	eb002fef 	bl	3e83c <lowlev_cycleDelay>
   3287c:	e25bb001 	subs	fp, fp, #1
   32880:	e1a04084 	lsl	r4, r4, #1
   32884:	e5856028 	str	r6, [r5, #40]	; 0x28
   32888:	0a00000c 	beq	328c0 <BusAccess::addrHighSet(unsigned long)+0x98>
   3288c:	e5982000 	ldr	r2, [r8]
   32890:	e3140080 	tst	r4, #128	; 0x80
   32894:	1afffff0 	bne	3285c <BusAccess::addrHighSet(unsigned long)+0x34>
   32898:	e3520011 	cmp	r2, #17
   3289c:	03a03b02 	moveq	r3, #2048	; 0x800
   328a0:	13a03b02 	movne	r3, #2048	; 0x800
   328a4:	1585901c 	strne	r9, [r5, #28]
   328a8:	0585a028 	streq	sl, [r5, #40]	; 0x28
   328ac:	1585a028 	strne	sl, [r5, #40]	; 0x28
   328b0:	0585301c 	streq	r3, [r5, #28]
   328b4:	1585301c 	strne	r3, [r5, #28]
   328b8:	15859028 	strne	r9, [r5, #40]	; 0x28
   328bc:	eaffffe9 	b	32868 <BusAccess::addrHighSet(unsigned long)+0x40>
   328c0:	e3a000c8 	mov	r0, #200	; 0xc8
   328c4:	eb002fdc 	bl	3e83c <lowlev_cycleDelay>
   328c8:	e5983000 	ldr	r3, [r8]
   328cc:	e3530011 	cmp	r3, #17
   328d0:	0a000029 	beq	3297c <BusAccess::addrHighSet(unsigned long)+0x154>
   328d4:	e3a01801 	mov	r1, #65536	; 0x10000
   328d8:	e3a02c0e 	mov	r2, #3584	; 0xe00
   328dc:	e59f30a8 	ldr	r3, [pc, #168]	; 3298c <BusAccess::addrHighSet(unsigned long)+0x164>
   328e0:	e583101c 	str	r1, [r3, #28]
   328e4:	e5832028 	str	r2, [r3, #40]	; 0x28
   328e8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   328ec:	e3a0a009 	mov	sl, #9
   328f0:	e3a07801 	mov	r7, #65536	; 0x10000
   328f4:	e3a09c0e 	mov	r9, #3584	; 0xe00
   328f8:	e3a060c8 	mov	r6, #200	; 0xc8
   328fc:	e3a05080 	mov	r5, #128	; 0x80
   32900:	e59fb084 	ldr	fp, [pc, #132]	; 3298c <BusAccess::addrHighSet(unsigned long)+0x164>
   32904:	ea000012 	b	32954 <BusAccess::addrHighSet(unsigned long)+0x12c>
   32908:	e3520011 	cmp	r2, #17
   3290c:	03a03b02 	moveq	r3, #2048	; 0x800
   32910:	13a03b02 	movne	r3, #2048	; 0x800
   32914:	158b701c 	strne	r7, [fp, #28]
   32918:	058b9028 	streq	r9, [fp, #40]	; 0x28
   3291c:	158b9028 	strne	r9, [fp, #40]	; 0x28
   32920:	058b301c 	streq	r3, [fp, #28]
   32924:	158b301c 	strne	r3, [fp, #28]
   32928:	158b7028 	strne	r7, [fp, #40]	; 0x28
   3292c:	e1a00006 	mov	r0, r6
   32930:	eb002fc1 	bl	3e83c <lowlev_cycleDelay>
   32934:	e58b501c 	str	r5, [fp, #28]
   32938:	e1a00006 	mov	r0, r6
   3293c:	eb002fbe 	bl	3e83c <lowlev_cycleDelay>
   32940:	e25aa001 	subs	sl, sl, #1
   32944:	e1a04084 	lsl	r4, r4, #1
   32948:	e58b5028 	str	r5, [fp, #40]	; 0x28
   3294c:	0affffdb 	beq	328c0 <BusAccess::addrHighSet(unsigned long)+0x98>
   32950:	e5982000 	ldr	r2, [r8]
   32954:	e2141080 	ands	r1, r4, #128	; 0x80
   32958:	1affffea 	bne	32908 <BusAccess::addrHighSet(unsigned long)+0xe0>
   3295c:	e3520011 	cmp	r2, #17
   32960:	158b701c 	strne	r7, [fp, #28]
   32964:	058b9028 	streq	r9, [fp, #40]	; 0x28
   32968:	158b9028 	strne	r9, [fp, #40]	; 0x28
   3296c:	058b101c 	streq	r1, [fp, #28]
   32970:	158b101c 	strne	r1, [fp, #28]
   32974:	158b7028 	strne	r7, [fp, #40]	; 0x28
   32978:	eaffffeb 	b	3292c <BusAccess::addrHighSet(unsigned long)+0x104>
   3297c:	e3a02c0e 	mov	r2, #3584	; 0xe00
   32980:	e59f3004 	ldr	r3, [pc, #4]	; 3298c <BusAccess::addrHighSet(unsigned long)+0x164>
   32984:	e5832028 	str	r2, [r3, #40]	; 0x28
   32988:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3298c:	20200000 	.word	0x20200000

00032990 <BusAccess::addrSet(unsigned int)>:
   32990:	e92d4070 	push	{r4, r5, r6, lr}
   32994:	e1a04001 	mov	r4, r1
   32998:	e1a05000 	mov	r5, r0
   3299c:	e1a01421 	lsr	r1, r1, #8
   329a0:	ebffffa0 	bl	32828 <BusAccess::addrHighSet(unsigned long)>
   329a4:	e6ef1074 	uxtb	r1, r4
   329a8:	e1a00005 	mov	r0, r5
   329ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   329b0:	eaffff3d 	b	326ac <BusAccess::addrLowSet(unsigned long)>

000329b4 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)>:
   329b4:	e1a01a01 	lsl	r1, r1, #20
   329b8:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   329bc:	e59f30b8 	ldr	r3, [pc, #184]	; 32a7c <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xc8>
   329c0:	e92d4070 	push	{r4, r5, r6, lr}
   329c4:	e3520001 	cmp	r2, #1
   329c8:	e1e0e001 	mvn	lr, r1
   329cc:	e59fc0ac 	ldr	ip, [pc, #172]	; 32a80 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xcc>
   329d0:	e1a05002 	mov	r5, r2
   329d4:	11a0c003 	movne	ip, r3
   329d8:	e3a02c02 	mov	r2, #512	; 0x200
   329dc:	e59f30a0 	ldr	r3, [pc, #160]	; 32a84 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xd0>
   329e0:	e20ee6ff 	and	lr, lr, #267386880	; 0xff00000
   329e4:	e583101c 	str	r1, [r3, #28]
   329e8:	e583e028 	str	lr, [r3, #40]	; 0x28
   329ec:	e583c028 	str	ip, [r3, #40]	; 0x28
   329f0:	e583201c 	str	r2, [r3, #28]
   329f4:	e5902000 	ldr	r2, [r0]
   329f8:	e1a04000 	mov	r4, r0
   329fc:	e3520011 	cmp	r2, #17
   32a00:	03a02802 	moveq	r2, #131072	; 0x20000
   32a04:	13a02803 	movne	r2, #196608	; 0x30000
   32a08:	e3a000fa 	mov	r0, #250	; 0xfa
   32a0c:	e5832028 	str	r2, [r3, #40]	; 0x28
   32a10:	eb002f89 	bl	3e83c <lowlev_cycleDelay>
   32a14:	e5943000 	ldr	r3, [r4]
   32a18:	e3530011 	cmp	r3, #17
   32a1c:	0a000007 	beq	32a40 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0x8c>
   32a20:	e59f2060 	ldr	r2, [pc, #96]	; 32a88 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xd4>
   32a24:	e59f1060 	ldr	r1, [pc, #96]	; 32a8c <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xd8>
   32a28:	e3550001 	cmp	r5, #1
   32a2c:	01a05002 	moveq	r5, r2
   32a30:	11a05001 	movne	r5, r1
   32a34:	e59f3048 	ldr	r3, [pc, #72]	; 32a84 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xd0>
   32a38:	e583501c 	str	r5, [r3, #28]
   32a3c:	e8bd8070 	pop	{r4, r5, r6, pc}
   32a40:	e59f1048 	ldr	r1, [pc, #72]	; 32a90 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xdc>
   32a44:	e59f2048 	ldr	r2, [pc, #72]	; 32a94 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xe0>
   32a48:	e3550001 	cmp	r5, #1
   32a4c:	01a05002 	moveq	r5, r2
   32a50:	11a05001 	movne	r5, r1
   32a54:	e59f3028 	ldr	r3, [pc, #40]	; 32a84 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xd0>
   32a58:	e583501c 	str	r5, [r3, #28]
   32a5c:	e5942000 	ldr	r2, [r4]
   32a60:	e3520011 	cmp	r2, #17
   32a64:	03a02c0e 	moveq	r2, #3584	; 0xe00
   32a68:	13a01801 	movne	r1, #65536	; 0x10000
   32a6c:	13a02c0e 	movne	r2, #3584	; 0xe00
   32a70:	1583101c 	strne	r1, [r3, #28]
   32a74:	e5832028 	str	r2, [r3, #40]	; 0x28
   32a78:	e8bd8070 	pop	{r4, r5, r6, pc}
   32a7c:	00000e41 	.word	0x00000e41
   32a80:	00000e42 	.word	0x00000e42
   32a84:	20200000 	.word	0x20200000
   32a88:	00030042 	.word	0x00030042
   32a8c:	00030041 	.word	0x00030041
   32a90:	00020041 	.word	0x00020041
   32a94:	00020042 	.word	0x00020042

00032a98 <BusAccess::byteRead(BusAccess::BlockAccessType)>:
   32a98:	e92d4070 	push	{r4, r5, r6, lr}
   32a9c:	e1a04001 	mov	r4, r1
   32aa0:	e59f2090 	ldr	r2, [pc, #144]	; 32b38 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xa0>
   32aa4:	e3540001 	cmp	r4, #1
   32aa8:	e59f308c 	ldr	r3, [pc, #140]	; 32b3c <BusAccess::byteRead(BusAccess::BlockAccessType)+0xa4>
   32aac:	e3a01d09 	mov	r1, #576	; 0x240
   32ab0:	11a03002 	movne	r3, r2
   32ab4:	e59f2084 	ldr	r2, [pc, #132]	; 32b40 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xa8>
   32ab8:	e1a05000 	mov	r5, r0
   32abc:	e5823028 	str	r3, [r2, #40]	; 0x28
   32ac0:	e582101c 	str	r1, [r2, #28]
   32ac4:	e5903000 	ldr	r3, [r0]
   32ac8:	e3a00f7d 	mov	r0, #500	; 0x1f4
   32acc:	e3530011 	cmp	r3, #17
   32ad0:	13a03801 	movne	r3, #65536	; 0x10000
   32ad4:	15823028 	strne	r3, [r2, #40]	; 0x28
   32ad8:	eb002f57 	bl	3e83c <lowlev_cycleDelay>
   32adc:	e59f305c 	ldr	r3, [pc, #92]	; 32b40 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xa8>
   32ae0:	e5952000 	ldr	r2, [r5]
   32ae4:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   32ae8:	e3520011 	cmp	r2, #17
   32aec:	e1a00a20 	lsr	r0, r0, #20
   32af0:	e6ef0070 	uxtb	r0, r0
   32af4:	0a000006 	beq	32b14 <BusAccess::byteRead(BusAccess::BlockAccessType)+0x7c>
   32af8:	e59f1044 	ldr	r1, [pc, #68]	; 32b44 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xac>
   32afc:	e59f2044 	ldr	r2, [pc, #68]	; 32b48 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xb0>
   32b00:	e3540001 	cmp	r4, #1
   32b04:	01a04001 	moveq	r4, r1
   32b08:	11a04002 	movne	r4, r2
   32b0c:	e583401c 	str	r4, [r3, #28]
   32b10:	e8bd8070 	pop	{r4, r5, r6, pc}
   32b14:	e59f1030 	ldr	r1, [pc, #48]	; 32b4c <BusAccess::byteRead(BusAccess::BlockAccessType)+0xb4>
   32b18:	e59fc030 	ldr	ip, [pc, #48]	; 32b50 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xb8>
   32b1c:	e3540001 	cmp	r4, #1
   32b20:	e3a02c0e 	mov	r2, #3584	; 0xe00
   32b24:	01a04001 	moveq	r4, r1
   32b28:	11a0400c 	movne	r4, ip
   32b2c:	e5832028 	str	r2, [r3, #40]	; 0x28
   32b30:	e583401c 	str	r4, [r3, #28]
   32b34:	e8bd8070 	pop	{r4, r5, r6, pc}
   32b38:	00040e01 	.word	0x00040e01
   32b3c:	00040e02 	.word	0x00040e02
   32b40:	20200000 	.word	0x20200000
   32b44:	00050002 	.word	0x00050002
   32b48:	00050001 	.word	0x00050001
   32b4c:	00040002 	.word	0x00040002
   32b50:	00040001 	.word	0x00040001

00032b54 <BusAccess::clockSetup()>:
   32b54:	e3a03004 	mov	r3, #4
   32b58:	e5d02228 	ldrb	r2, [r0, #552]	; 0x228
   32b5c:	e5803230 	str	r3, [r0, #560]	; 0x230
   32b60:	e3520000 	cmp	r2, #0
   32b64:	1a000001 	bne	32b70 <BusAccess::clockSetup()+0x1c>
   32b68:	e580322c 	str	r3, [r0, #556]	; 0x22c
   32b6c:	e12fff1e 	bx	lr
   32b70:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32b74:	e3a07000 	mov	r7, #0
   32b78:	e59f5184 	ldr	r5, [pc, #388]	; 32d04 <BusAccess::clockSetup()+0x1b0>
   32b7c:	e59f1184 	ldr	r1, [pc, #388]	; 32d08 <BusAccess::clockSetup()+0x1b4>
   32b80:	e5952070 	ldr	r2, [r5, #112]	; 0x70
   32b84:	e24dd020 	sub	sp, sp, #32
   32b88:	e0022001 	and	r2, r2, r1
   32b8c:	e382245a 	orr	r2, r2, #1509949440	; 0x5a000000
   32b90:	e5852070 	str	r2, [r5, #112]	; 0x70
   32b94:	e580322c 	str	r3, [r0, #556]	; 0x22c
   32b98:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   32b9c:	e5c07228 	strb	r7, [r0, #552]	; 0x228
   32ba0:	e0033001 	and	r3, r3, r1
   32ba4:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32ba8:	e5853070 	str	r3, [r5, #112]	; 0x70
   32bac:	e590322c 	ldr	r3, [r0, #556]	; 0x22c
   32bb0:	e1a06000 	mov	r6, r0
   32bb4:	e3730001 	cmn	r3, #1
   32bb8:	0a000004 	beq	32bd0 <BusAccess::clockSetup()+0x7c>
   32bbc:	e5903230 	ldr	r3, [r0, #560]	; 0x230
   32bc0:	e1530007 	cmp	r3, r7
   32bc4:	11a04007 	movne	r4, r7
   32bc8:	13a08001 	movne	r8, #1
   32bcc:	1a000012 	bne	32c1c <BusAccess::clockSetup()+0xc8>
   32bd0:	e3a03000 	mov	r3, #0
   32bd4:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   32bd8:	ebffcfff 	bl	26bdc <CLogger::Get()>
   32bdc:	e5962230 	ldr	r2, [r6, #560]	; 0x230
   32be0:	e596322c 	ldr	r3, [r6, #556]	; 0x22c
   32be4:	e59f1120 	ldr	r1, [pc, #288]	; 32d0c <BusAccess::clockSetup()+0x1b8>
   32be8:	e58d2004 	str	r2, [sp, #4]
   32bec:	e58d3000 	str	r3, [sp]
   32bf0:	e3a02001 	mov	r2, #1
   32bf4:	e59f3114 	ldr	r3, [pc, #276]	; 32d10 <BusAccess::clockSetup()+0x1bc>
   32bf8:	ebffcf34 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32bfc:	e28dd020 	add	sp, sp, #32
   32c00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32c04:	e2844001 	add	r4, r4, #1
   32c08:	e1a00008 	mov	r0, r8
   32c0c:	ebffecd2 	bl	2df5c <microsDelay>
   32c10:	e3540064 	cmp	r4, #100	; 0x64
   32c14:	e59570a0 	ldr	r7, [r5, #160]	; 0xa0
   32c18:	0a000002 	beq	32c28 <BusAccess::clockSetup()+0xd4>
   32c1c:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   32c20:	e3130080 	tst	r3, #128	; 0x80
   32c24:	1afffff6 	bne	32c04 <BusAccess::clockSetup()+0xb0>
   32c28:	e5d61230 	ldrb	r1, [r6, #560]	; 0x230
   32c2c:	e5d6022c 	ldrb	r0, [r6, #556]	; 0x22c
   32c30:	eb002e94 	bl	3e688 <pinMode>
   32c34:	e5960224 	ldr	r0, [r6, #548]	; 0x224
   32c38:	e59f20d4 	ldr	r2, [pc, #212]	; 32d14 <BusAccess::clockSetup()+0x1c0>
   32c3c:	e59f10d4 	ldr	r1, [pc, #212]	; 32d18 <BusAccess::clockSetup()+0x1c4>
   32c40:	e1500002 	cmp	r0, r2
   32c44:	e59f20d0 	ldr	r2, [pc, #208]	; 32d1c <BusAccess::clockSetup()+0x1c8>
   32c48:	e59f30d0 	ldr	r3, [pc, #208]	; 32d20 <BusAccess::clockSetup()+0x1cc>
   32c4c:	81a03001 	movhi	r3, r1
   32c50:	e59f80cc 	ldr	r8, [pc, #204]	; 32d24 <BusAccess::clockSetup()+0x1d0>
   32c54:	81a08002 	movhi	r8, r2
   32c58:	e59f90a4 	ldr	r9, [pc, #164]	; 32d04 <BusAccess::clockSetup()+0x1b0>
   32c5c:	e59f20c4 	ldr	r2, [pc, #196]	; 32d28 <BusAccess::clockSetup()+0x1d4>
   32c60:	e5893070 	str	r3, [r9, #112]	; 0x70
   32c64:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32c68:	e59fa0bc 	ldr	sl, [pc, #188]	; 32d2c <BusAccess::clockSetup()+0x1d8>
   32c6c:	81a0a002 	movhi	sl, r2
   32c70:	ebffecb9 	bl	2df5c <microsDelay>
   32c74:	e5961224 	ldr	r1, [r6, #548]	; 0x224
   32c78:	e1a00008 	mov	r0, r8
   32c7c:	eb002c34 	bl	3dd54 <__aeabi_uidiv>
   32c80:	e59f50a8 	ldr	r5, [pc, #168]	; 32d30 <BusAccess::clockSetup()+0x1dc>
   32c84:	e1500005 	cmp	r0, r5
   32c88:	31a05000 	movcc	r5, r0
   32c8c:	e1a03605 	lsl	r3, r5, #12
   32c90:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32c94:	e5893074 	str	r3, [r9, #116]	; 0x74
   32c98:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32c9c:	ebffecae 	bl	2df5c <microsDelay>
   32ca0:	e3a03001 	mov	r3, #1
   32ca4:	e589a070 	str	sl, [r9, #112]	; 0x70
   32ca8:	e1a01005 	mov	r1, r5
   32cac:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   32cb0:	e1a00008 	mov	r0, r8
   32cb4:	eb002c26 	bl	3dd54 <__aeabi_uidiv>
   32cb8:	e1a09000 	mov	r9, r0
   32cbc:	ebffcfc6 	bl	26bdc <CLogger::Get()>
   32cc0:	e5961230 	ldr	r1, [r6, #560]	; 0x230
   32cc4:	e596222c 	ldr	r2, [r6, #556]	; 0x22c
   32cc8:	e5963224 	ldr	r3, [r6, #548]	; 0x224
   32ccc:	e58d1014 	str	r1, [sp, #20]
   32cd0:	e58d2010 	str	r2, [sp, #16]
   32cd4:	e58d3004 	str	r3, [sp, #4]
   32cd8:	e58d500c 	str	r5, [sp, #12]
   32cdc:	e58d8008 	str	r8, [sp, #8]
   32ce0:	e58d9000 	str	r9, [sp]
   32ce4:	e58d701c 	str	r7, [sp, #28]
   32ce8:	e58d4018 	str	r4, [sp, #24]
   32cec:	e59f3040 	ldr	r3, [pc, #64]	; 32d34 <BusAccess::clockSetup()+0x1e0>
   32cf0:	e3a02003 	mov	r2, #3
   32cf4:	e59f1010 	ldr	r1, [pc, #16]	; 32d0c <BusAccess::clockSetup()+0x1b8>
   32cf8:	ebffcef4 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32cfc:	e28dd020 	add	sp, sp, #32
   32d00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32d04:	20101000 	.word	0x20101000
   32d08:	00000f0f 	.word	0x00000f0f
   32d0c:	0004695c 	.word	0x0004695c
   32d10:	0004693c 	.word	0x0004693c
   32d14:	0003d08f 	.word	0x0003d08f
   32d18:	5a000006 	.word	0x5a000006
   32d1c:	1dcd6500 	.word	0x1dcd6500
   32d20:	5a000001 	.word	0x5a000001
   32d24:	0124f800 	.word	0x0124f800
   32d28:	5a000016 	.word	0x5a000016
   32d2c:	5a000011 	.word	0x5a000011
   32d30:	00000fff 	.word	0x00000fff
   32d34:	00046968 	.word	0x00046968

00032d38 <BusAccess::clockSetFreqHz(unsigned long)>:
   32d38:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32d3c:	e1a04001 	mov	r4, r1
   32d40:	e1a06000 	mov	r6, r0
   32d44:	e5d05228 	ldrb	r5, [r0, #552]	; 0x228
   32d48:	e24dd020 	sub	sp, sp, #32
   32d4c:	ebffcfa2 	bl	26bdc <CLogger::Get()>
   32d50:	e59f31c8 	ldr	r3, [pc, #456]	; 32f20 <BusAccess::clockSetFreqHz(unsigned long)+0x1e8>
   32d54:	e88d0030 	stm	sp, {r4, r5}
   32d58:	e3a02004 	mov	r2, #4
   32d5c:	e59f11c0 	ldr	r1, [pc, #448]	; 32f24 <BusAccess::clockSetFreqHz(unsigned long)+0x1ec>
   32d60:	ebffceda 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32d64:	e5d63228 	ldrb	r3, [r6, #552]	; 0x228
   32d68:	e3530000 	cmp	r3, #0
   32d6c:	1a000062 	bne	32efc <BusAccess::clockSetFreqHz(unsigned long)+0x1c4>
   32d70:	e3550000 	cmp	r5, #0
   32d74:	e5864224 	str	r4, [r6, #548]	; 0x224
   32d78:	1a000001 	bne	32d84 <BusAccess::clockSetFreqHz(unsigned long)+0x4c>
   32d7c:	e28dd020 	add	sp, sp, #32
   32d80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32d84:	e5d67228 	ldrb	r7, [r6, #552]	; 0x228
   32d88:	e3570000 	cmp	r7, #0
   32d8c:	1afffffa 	bne	32d7c <BusAccess::clockSetFreqHz(unsigned long)+0x44>
   32d90:	e59f5190 	ldr	r5, [pc, #400]	; 32f28 <BusAccess::clockSetFreqHz(unsigned long)+0x1f0>
   32d94:	e59f3190 	ldr	r3, [pc, #400]	; 32f2c <BusAccess::clockSetFreqHz(unsigned long)+0x1f4>
   32d98:	e5952070 	ldr	r2, [r5, #112]	; 0x70
   32d9c:	e0033002 	and	r3, r3, r2
   32da0:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32da4:	e5853070 	str	r3, [r5, #112]	; 0x70
   32da8:	e596322c 	ldr	r3, [r6, #556]	; 0x22c
   32dac:	e3730001 	cmn	r3, #1
   32db0:	0a000004 	beq	32dc8 <BusAccess::clockSetFreqHz(unsigned long)+0x90>
   32db4:	e5963230 	ldr	r3, [r6, #560]	; 0x230
   32db8:	e3530000 	cmp	r3, #0
   32dbc:	11a04007 	movne	r4, r7
   32dc0:	13a08001 	movne	r8, #1
   32dc4:	1a000012 	bne	32e14 <BusAccess::clockSetFreqHz(unsigned long)+0xdc>
   32dc8:	e3a03000 	mov	r3, #0
   32dcc:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   32dd0:	ebffcf81 	bl	26bdc <CLogger::Get()>
   32dd4:	e5962230 	ldr	r2, [r6, #560]	; 0x230
   32dd8:	e596322c 	ldr	r3, [r6, #556]	; 0x22c
   32ddc:	e59f1140 	ldr	r1, [pc, #320]	; 32f24 <BusAccess::clockSetFreqHz(unsigned long)+0x1ec>
   32de0:	e58d2004 	str	r2, [sp, #4]
   32de4:	e58d3000 	str	r3, [sp]
   32de8:	e3a02001 	mov	r2, #1
   32dec:	e59f313c 	ldr	r3, [pc, #316]	; 32f30 <BusAccess::clockSetFreqHz(unsigned long)+0x1f8>
   32df0:	ebffceb6 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32df4:	e28dd020 	add	sp, sp, #32
   32df8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32dfc:	e2844001 	add	r4, r4, #1
   32e00:	e1a00008 	mov	r0, r8
   32e04:	ebffec54 	bl	2df5c <microsDelay>
   32e08:	e3540064 	cmp	r4, #100	; 0x64
   32e0c:	e59570a0 	ldr	r7, [r5, #160]	; 0xa0
   32e10:	0a000002 	beq	32e20 <BusAccess::clockSetFreqHz(unsigned long)+0xe8>
   32e14:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   32e18:	e3130080 	tst	r3, #128	; 0x80
   32e1c:	1afffff6 	bne	32dfc <BusAccess::clockSetFreqHz(unsigned long)+0xc4>
   32e20:	e5d61230 	ldrb	r1, [r6, #560]	; 0x230
   32e24:	e5d6022c 	ldrb	r0, [r6, #556]	; 0x22c
   32e28:	eb002e16 	bl	3e688 <pinMode>
   32e2c:	e5960224 	ldr	r0, [r6, #548]	; 0x224
   32e30:	e59f20fc 	ldr	r2, [pc, #252]	; 32f34 <BusAccess::clockSetFreqHz(unsigned long)+0x1fc>
   32e34:	e59f10fc 	ldr	r1, [pc, #252]	; 32f38 <BusAccess::clockSetFreqHz(unsigned long)+0x200>
   32e38:	e1500002 	cmp	r0, r2
   32e3c:	e59f20f8 	ldr	r2, [pc, #248]	; 32f3c <BusAccess::clockSetFreqHz(unsigned long)+0x204>
   32e40:	e59f30f8 	ldr	r3, [pc, #248]	; 32f40 <BusAccess::clockSetFreqHz(unsigned long)+0x208>
   32e44:	81a03001 	movhi	r3, r1
   32e48:	e59f80f4 	ldr	r8, [pc, #244]	; 32f44 <BusAccess::clockSetFreqHz(unsigned long)+0x20c>
   32e4c:	81a08002 	movhi	r8, r2
   32e50:	e59f90d0 	ldr	r9, [pc, #208]	; 32f28 <BusAccess::clockSetFreqHz(unsigned long)+0x1f0>
   32e54:	e59f20ec 	ldr	r2, [pc, #236]	; 32f48 <BusAccess::clockSetFreqHz(unsigned long)+0x210>
   32e58:	e5893070 	str	r3, [r9, #112]	; 0x70
   32e5c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32e60:	e59fa0e4 	ldr	sl, [pc, #228]	; 32f4c <BusAccess::clockSetFreqHz(unsigned long)+0x214>
   32e64:	81a0a002 	movhi	sl, r2
   32e68:	ebffec3b 	bl	2df5c <microsDelay>
   32e6c:	e5961224 	ldr	r1, [r6, #548]	; 0x224
   32e70:	e1a00008 	mov	r0, r8
   32e74:	eb002bb6 	bl	3dd54 <__aeabi_uidiv>
   32e78:	e59f50d0 	ldr	r5, [pc, #208]	; 32f50 <BusAccess::clockSetFreqHz(unsigned long)+0x218>
   32e7c:	e1500005 	cmp	r0, r5
   32e80:	31a05000 	movcc	r5, r0
   32e84:	e1a03605 	lsl	r3, r5, #12
   32e88:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32e8c:	e5893074 	str	r3, [r9, #116]	; 0x74
   32e90:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32e94:	ebffec30 	bl	2df5c <microsDelay>
   32e98:	e3a03001 	mov	r3, #1
   32e9c:	e589a070 	str	sl, [r9, #112]	; 0x70
   32ea0:	e1a01005 	mov	r1, r5
   32ea4:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   32ea8:	e1a00008 	mov	r0, r8
   32eac:	eb002ba8 	bl	3dd54 <__aeabi_uidiv>
   32eb0:	e1a09000 	mov	r9, r0
   32eb4:	ebffcf48 	bl	26bdc <CLogger::Get()>
   32eb8:	e5961230 	ldr	r1, [r6, #560]	; 0x230
   32ebc:	e596222c 	ldr	r2, [r6, #556]	; 0x22c
   32ec0:	e5963224 	ldr	r3, [r6, #548]	; 0x224
   32ec4:	e58d1014 	str	r1, [sp, #20]
   32ec8:	e58d2010 	str	r2, [sp, #16]
   32ecc:	e58d3004 	str	r3, [sp, #4]
   32ed0:	e58d500c 	str	r5, [sp, #12]
   32ed4:	e58d8008 	str	r8, [sp, #8]
   32ed8:	e58d9000 	str	r9, [sp]
   32edc:	e58d701c 	str	r7, [sp, #28]
   32ee0:	e58d4018 	str	r4, [sp, #24]
   32ee4:	e59f3068 	ldr	r3, [pc, #104]	; 32f54 <BusAccess::clockSetFreqHz(unsigned long)+0x21c>
   32ee8:	e3a02003 	mov	r2, #3
   32eec:	e59f1030 	ldr	r1, [pc, #48]	; 32f24 <BusAccess::clockSetFreqHz(unsigned long)+0x1ec>
   32ef0:	ebffce76 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32ef4:	e28dd020 	add	sp, sp, #32
   32ef8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32efc:	e3a01000 	mov	r1, #0
   32f00:	e59f2020 	ldr	r2, [pc, #32]	; 32f28 <BusAccess::clockSetFreqHz(unsigned long)+0x1f0>
   32f04:	e59f3020 	ldr	r3, [pc, #32]	; 32f2c <BusAccess::clockSetFreqHz(unsigned long)+0x1f4>
   32f08:	e5920070 	ldr	r0, [r2, #112]	; 0x70
   32f0c:	e0033000 	and	r3, r3, r0
   32f10:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32f14:	e5823070 	str	r3, [r2, #112]	; 0x70
   32f18:	e5c61228 	strb	r1, [r6, #552]	; 0x228
   32f1c:	eaffff93 	b	32d70 <BusAccess::clockSetFreqHz(unsigned long)+0x38>
   32f20:	000469bc 	.word	0x000469bc
   32f24:	0004695c 	.word	0x0004695c
   32f28:	20101000 	.word	0x20101000
   32f2c:	00000f0f 	.word	0x00000f0f
   32f30:	0004693c 	.word	0x0004693c
   32f34:	0003d08f 	.word	0x0003d08f
   32f38:	5a000006 	.word	0x5a000006
   32f3c:	1dcd6500 	.word	0x1dcd6500
   32f40:	5a000001 	.word	0x5a000001
   32f44:	0124f800 	.word	0x0124f800
   32f48:	5a000016 	.word	0x5a000016
   32f4c:	5a000011 	.word	0x5a000011
   32f50:	00000fff 	.word	0x00000fff
   32f54:	00046968 	.word	0x00046968

00032f58 <BusAccess::clockEnable(bool)>:
   32f58:	e5d03228 	ldrb	r3, [r0, #552]	; 0x228
   32f5c:	e1530001 	cmp	r3, r1
   32f60:	012fff1e 	bxeq	lr
   32f64:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32f68:	e59f5180 	ldr	r5, [pc, #384]	; 330f0 <BusAccess::clockEnable(bool)+0x198>
   32f6c:	e59f3180 	ldr	r3, [pc, #384]	; 330f4 <BusAccess::clockEnable(bool)+0x19c>
   32f70:	e5952070 	ldr	r2, [r5, #112]	; 0x70
   32f74:	e3510000 	cmp	r1, #0
   32f78:	e0033002 	and	r3, r3, r2
   32f7c:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32f80:	e5853070 	str	r3, [r5, #112]	; 0x70
   32f84:	e24dd020 	sub	sp, sp, #32
   32f88:	05c01228 	strbeq	r1, [r0, #552]	; 0x228
   32f8c:	0a000048 	beq	330b4 <BusAccess::clockEnable(bool)+0x15c>
   32f90:	e590322c 	ldr	r3, [r0, #556]	; 0x22c
   32f94:	e1a06000 	mov	r6, r0
   32f98:	e3730001 	cmn	r3, #1
   32f9c:	0a000046 	beq	330bc <BusAccess::clockEnable(bool)+0x164>
   32fa0:	e5903230 	ldr	r3, [r0, #560]	; 0x230
   32fa4:	e3530000 	cmp	r3, #0
   32fa8:	0a000043 	beq	330bc <BusAccess::clockEnable(bool)+0x164>
   32fac:	e3a07000 	mov	r7, #0
   32fb0:	e3a08001 	mov	r8, #1
   32fb4:	e1a04007 	mov	r4, r7
   32fb8:	ea000005 	b	32fd4 <BusAccess::clockEnable(bool)+0x7c>
   32fbc:	e2844001 	add	r4, r4, #1
   32fc0:	e1a00008 	mov	r0, r8
   32fc4:	ebffebe4 	bl	2df5c <microsDelay>
   32fc8:	e3540064 	cmp	r4, #100	; 0x64
   32fcc:	e59570a0 	ldr	r7, [r5, #160]	; 0xa0
   32fd0:	0a000002 	beq	32fe0 <BusAccess::clockEnable(bool)+0x88>
   32fd4:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   32fd8:	e3130080 	tst	r3, #128	; 0x80
   32fdc:	1afffff6 	bne	32fbc <BusAccess::clockEnable(bool)+0x64>
   32fe0:	e5d61230 	ldrb	r1, [r6, #560]	; 0x230
   32fe4:	e5d6022c 	ldrb	r0, [r6, #556]	; 0x22c
   32fe8:	eb002da6 	bl	3e688 <pinMode>
   32fec:	e5960224 	ldr	r0, [r6, #548]	; 0x224
   32ff0:	e59f2100 	ldr	r2, [pc, #256]	; 330f8 <BusAccess::clockEnable(bool)+0x1a0>
   32ff4:	e59f1100 	ldr	r1, [pc, #256]	; 330fc <BusAccess::clockEnable(bool)+0x1a4>
   32ff8:	e1500002 	cmp	r0, r2
   32ffc:	e59f20fc 	ldr	r2, [pc, #252]	; 33100 <BusAccess::clockEnable(bool)+0x1a8>
   33000:	e59f30fc 	ldr	r3, [pc, #252]	; 33104 <BusAccess::clockEnable(bool)+0x1ac>
   33004:	81a03001 	movhi	r3, r1
   33008:	e59f80f8 	ldr	r8, [pc, #248]	; 33108 <BusAccess::clockEnable(bool)+0x1b0>
   3300c:	81a08002 	movhi	r8, r2
   33010:	e59f90d8 	ldr	r9, [pc, #216]	; 330f0 <BusAccess::clockEnable(bool)+0x198>
   33014:	e59f20f0 	ldr	r2, [pc, #240]	; 3310c <BusAccess::clockEnable(bool)+0x1b4>
   33018:	e5893070 	str	r3, [r9, #112]	; 0x70
   3301c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33020:	e59fa0e8 	ldr	sl, [pc, #232]	; 33110 <BusAccess::clockEnable(bool)+0x1b8>
   33024:	81a0a002 	movhi	sl, r2
   33028:	ebffebcb 	bl	2df5c <microsDelay>
   3302c:	e5961224 	ldr	r1, [r6, #548]	; 0x224
   33030:	e1a00008 	mov	r0, r8
   33034:	eb002b46 	bl	3dd54 <__aeabi_uidiv>
   33038:	e59f50d4 	ldr	r5, [pc, #212]	; 33114 <BusAccess::clockEnable(bool)+0x1bc>
   3303c:	e1500005 	cmp	r0, r5
   33040:	31a05000 	movcc	r5, r0
   33044:	e1a03605 	lsl	r3, r5, #12
   33048:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   3304c:	e5893074 	str	r3, [r9, #116]	; 0x74
   33050:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33054:	ebffebc0 	bl	2df5c <microsDelay>
   33058:	e3a03001 	mov	r3, #1
   3305c:	e589a070 	str	sl, [r9, #112]	; 0x70
   33060:	e1a01005 	mov	r1, r5
   33064:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   33068:	e1a00008 	mov	r0, r8
   3306c:	eb002b38 	bl	3dd54 <__aeabi_uidiv>
   33070:	e1a09000 	mov	r9, r0
   33074:	ebffced8 	bl	26bdc <CLogger::Get()>
   33078:	e5961230 	ldr	r1, [r6, #560]	; 0x230
   3307c:	e596222c 	ldr	r2, [r6, #556]	; 0x22c
   33080:	e5963224 	ldr	r3, [r6, #548]	; 0x224
   33084:	e58d1014 	str	r1, [sp, #20]
   33088:	e58d2010 	str	r2, [sp, #16]
   3308c:	e58d3004 	str	r3, [sp, #4]
   33090:	e58d500c 	str	r5, [sp, #12]
   33094:	e58d8008 	str	r8, [sp, #8]
   33098:	e58d9000 	str	r9, [sp]
   3309c:	e58d701c 	str	r7, [sp, #28]
   330a0:	e58d4018 	str	r4, [sp, #24]
   330a4:	e59f306c 	ldr	r3, [pc, #108]	; 33118 <BusAccess::clockEnable(bool)+0x1c0>
   330a8:	e3a02003 	mov	r2, #3
   330ac:	e59f1068 	ldr	r1, [pc, #104]	; 3311c <BusAccess::clockEnable(bool)+0x1c4>
   330b0:	ebffce06 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   330b4:	e28dd020 	add	sp, sp, #32
   330b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   330bc:	e3a03000 	mov	r3, #0
   330c0:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   330c4:	ebffcec4 	bl	26bdc <CLogger::Get()>
   330c8:	e5962230 	ldr	r2, [r6, #560]	; 0x230
   330cc:	e596322c 	ldr	r3, [r6, #556]	; 0x22c
   330d0:	e59f1044 	ldr	r1, [pc, #68]	; 3311c <BusAccess::clockEnable(bool)+0x1c4>
   330d4:	e58d2004 	str	r2, [sp, #4]
   330d8:	e58d3000 	str	r3, [sp]
   330dc:	e3a02001 	mov	r2, #1
   330e0:	e59f3038 	ldr	r3, [pc, #56]	; 33120 <BusAccess::clockEnable(bool)+0x1c8>
   330e4:	ebffcdf9 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   330e8:	e28dd020 	add	sp, sp, #32
   330ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   330f0:	20101000 	.word	0x20101000
   330f4:	00000f0f 	.word	0x00000f0f
   330f8:	0003d08f 	.word	0x0003d08f
   330fc:	5a000006 	.word	0x5a000006
   33100:	1dcd6500 	.word	0x1dcd6500
   33104:	5a000001 	.word	0x5a000001
   33108:	0124f800 	.word	0x0124f800
   3310c:	5a000016 	.word	0x5a000016
   33110:	5a000011 	.word	0x5a000011
   33114:	00000fff 	.word	0x00000fff
   33118:	00046968 	.word	0x00046968
   3311c:	0004695c 	.word	0x0004695c
   33120:	0004693c 	.word	0x0004693c

00033124 <BusAccess::clockCurFreqHz()>:
   33124:	e5900224 	ldr	r0, [r0, #548]	; 0x224
   33128:	e12fff1e 	bx	lr

0003312c <BusAccess::clockGetMinFreqHz()>:
   3312c:	e3a00001 	mov	r0, #1
   33130:	e12fff1e 	bx	lr

00033134 <BusAccess::clockGetMaxFreqHz()>:
   33134:	e59f0000 	ldr	r0, [pc]	; 3313c <BusAccess::clockGetMaxFreqHz()+0x8>
   33138:	e12fff1e 	bx	lr
   3313c:	017d7840 	.word	0x017d7840

00033140 <BusAccess::waitEnablementUpdate()>:
   33140:	e59011bc 	ldr	r1, [r0, #444]	; 0x1bc
   33144:	e3510000 	cmp	r1, #0
   33148:	da00001c 	ble	331c0 <BusAccess::waitEnablementUpdate()+0x80>
   3314c:	e3a0c000 	mov	ip, #0
   33150:	e3a0202c 	mov	r2, #44	; 0x2c
   33154:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   33158:	e1a03000 	mov	r3, r0
   3315c:	e1a0e00c 	mov	lr, ip
   33160:	e0210192 	mla	r1, r2, r1, r0
   33164:	e5d32004 	ldrb	r2, [r3, #4]
   33168:	e3520000 	cmp	r2, #0
   3316c:	0a000003 	beq	33180 <BusAccess::waitEnablementUpdate()+0x40>
   33170:	e35c0000 	cmp	ip, #0
   33174:	05d3c014 	ldrbeq	ip, [r3, #20]
   33178:	e35e0000 	cmp	lr, #0
   3317c:	05d3e015 	ldrbeq	lr, [r3, #21]
   33180:	e283302c 	add	r3, r3, #44	; 0x2c
   33184:	e1530001 	cmp	r3, r1
   33188:	1afffff5 	bne	33164 <BusAccess::waitEnablementUpdate()+0x24>
   3318c:	e59f3054 	ldr	r3, [pc, #84]	; 331e8 <BusAccess::waitEnablementUpdate()+0xa8>
   33190:	e35e0000 	cmp	lr, #0
   33194:	e5933000 	ldr	r3, [r3]
   33198:	e59f2048 	ldr	r2, [pc, #72]	; 331e8 <BusAccess::waitEnablementUpdate()+0xa8>
   3319c:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   331a0:	e3c33008 	bic	r3, r3, #8
   331a4:	13833008 	orrne	r3, r3, #8
   331a8:	e35c0000 	cmp	ip, #0
   331ac:	13833b02 	orrne	r3, r3, #2048	; 0x800
   331b0:	e5c0c1c1 	strb	ip, [r0, #449]	; 0x1c1
   331b4:	e5c0e1c2 	strb	lr, [r0, #450]	; 0x1c2
   331b8:	e5823000 	str	r3, [r2]
   331bc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   331c0:	e3a02000 	mov	r2, #0
   331c4:	e59f301c 	ldr	r3, [pc, #28]	; 331e8 <BusAccess::waitEnablementUpdate()+0xa8>
   331c8:	e5c021c1 	strb	r2, [r0, #449]	; 0x1c1
   331cc:	e5933000 	ldr	r3, [r3]
   331d0:	e5c021c2 	strb	r2, [r0, #450]	; 0x1c2
   331d4:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   331d8:	e59f2008 	ldr	r2, [pc, #8]	; 331e8 <BusAccess::waitEnablementUpdate()+0xa8>
   331dc:	e3c33008 	bic	r3, r3, #8
   331e0:	e5823000 	str	r3, [r2]
   331e4:	e12fff1e 	bx	lr
   331e8:	2020c000 	.word	0x2020c000

000331ec <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>:
   331ec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   331f0:	e59041bc 	ldr	r4, [r0, #444]	; 0x1bc
   331f4:	e24dd00c 	sub	sp, sp, #12
   331f8:	e3540009 	cmp	r4, #9
   331fc:	e5dd8030 	ldrb	r8, [sp, #48]	; 0x30
   33200:	e5dd7034 	ldrb	r7, [sp, #52]	; 0x34
   33204:	e5ddb038 	ldrb	fp, [sp, #56]	; 0x38
   33208:	e5dda040 	ldrb	sl, [sp, #64]	; 0x40
   3320c:	e5dd9048 	ldrb	r9, [sp, #72]	; 0x48
   33210:	e5dd6050 	ldrb	r6, [sp, #80]	; 0x50
   33214:	e5dd5054 	ldrb	r5, [sp, #84]	; 0x54
   33218:	e5dde058 	ldrb	lr, [sp, #88]	; 0x58
   3321c:	ca00001d 	bgt	33298 <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)+0xac>
   33220:	e88d000c 	stm	sp, {r2, r3}
   33224:	e3a0302c 	mov	r3, #44	; 0x2c
   33228:	e0230493 	mla	r3, r3, r4, r0
   3322c:	e5c31004 	strb	r1, [r3, #4]
   33230:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
   33234:	e5c3b016 	strb	fp, [r3, #22]
   33238:	e5831018 	str	r1, [r3, #24]
   3323c:	e59d1000 	ldr	r1, [sp]
   33240:	e5c3a01c 	strb	sl, [r3, #28]
   33244:	e5831008 	str	r1, [r3, #8]
   33248:	e59d1004 	ldr	r1, [sp, #4]
   3324c:	e2842001 	add	r2, r4, #1
   33250:	e583100c 	str	r1, [r3, #12]
   33254:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
   33258:	e5c38014 	strb	r8, [r3, #20]
   3325c:	e5831020 	str	r1, [r3, #32]
   33260:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
   33264:	e5c39024 	strb	r9, [r3, #36]	; 0x24
   33268:	e5831010 	str	r1, [r3, #16]
   3326c:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   33270:	e5c37015 	strb	r7, [r3, #21]
   33274:	e5831028 	str	r1, [r3, #40]	; 0x28
   33278:	e5c3602c 	strb	r6, [r3, #44]	; 0x2c
   3327c:	e5c3502d 	strb	r5, [r3, #45]	; 0x2d
   33280:	e5c3e02e 	strb	lr, [r3, #46]	; 0x2e
   33284:	e58021bc 	str	r2, [r0, #444]	; 0x1bc
   33288:	ebffffac 	bl	33140 <BusAccess::waitEnablementUpdate()>
   3328c:	e1a00004 	mov	r0, r4
   33290:	e28dd00c 	add	sp, sp, #12
   33294:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33298:	e3e04000 	mvn	r4, #0
   3329c:	eafffffa 	b	3328c <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)+0xa0>

000332a0 <BusAccess::busSocketEnable(int, bool)>:
   332a0:	e3510000 	cmp	r1, #0
   332a4:	b12fff1e 	bxlt	lr
   332a8:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   332ac:	e151000c 	cmp	r1, ip
   332b0:	a12fff1e 	bxge	lr
   332b4:	e3a0c02c 	mov	ip, #44	; 0x2c
   332b8:	e021019c 	mla	r1, ip, r1, r0
   332bc:	e5c12004 	strb	r2, [r1, #4]
   332c0:	eaffff9e 	b	33140 <BusAccess::waitEnablementUpdate()>

000332c4 <BusAccess::controlRelease()>:
   332c4:	e5903000 	ldr	r3, [r0]
   332c8:	e92d4070 	push	{r4, r5, r6, lr}
   332cc:	e3530011 	cmp	r3, #17
   332d0:	e1a04000 	mov	r4, r0
   332d4:	0a000053 	beq	33428 <BusAccess::controlRelease()+0x164>
   332d8:	e3a06001 	mov	r6, #1
   332dc:	e59f51a8 	ldr	r5, [pc, #424]	; 3348c <BusAccess::controlRelease()+0x1c8>
   332e0:	e59f31a8 	ldr	r3, [pc, #424]	; 33490 <BusAccess::controlRelease()+0x1cc>
   332e4:	e3a00014 	mov	r0, #20
   332e8:	e585301c 	str	r3, [r5, #28]
   332ec:	eb002d52 	bl	3e83c <lowlev_cycleDelay>
   332f0:	e5856028 	str	r6, [r5, #40]	; 0x28
   332f4:	e3a00014 	mov	r0, #20
   332f8:	eb002d4f 	bl	3e83c <lowlev_cycleDelay>
   332fc:	e585601c 	str	r6, [r5, #28]
   33300:	e3a01040 	mov	r1, #64	; 0x40
   33304:	e59f3180 	ldr	r3, [pc, #384]	; 3348c <BusAccess::controlRelease()+0x1c8>
   33308:	e5932008 	ldr	r2, [r3, #8]
   3330c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   33310:	e5832008 	str	r2, [r3, #8]
   33314:	e583101c 	str	r1, [r3, #28]
   33318:	e5942000 	ldr	r2, [r4]
   3331c:	e3520011 	cmp	r2, #17
   33320:	03a02c0e 	moveq	r2, #3584	; 0xe00
   33324:	13a01801 	movne	r1, #65536	; 0x10000
   33328:	13a02c0e 	movne	r2, #3584	; 0xe00
   3332c:	1583101c 	strne	r1, [r3, #28]
   33330:	e5832028 	str	r2, [r3, #40]	; 0x28
   33334:	e5943000 	ldr	r3, [r4]
   33338:	e3530011 	cmp	r3, #17
   3333c:	0a00004e 	beq	3347c <BusAccess::controlRelease()+0x1b8>
   33340:	e59f314c 	ldr	r3, [pc, #332]	; 33494 <BusAccess::controlRelease()+0x1d0>
   33344:	e5932004 	ldr	r2, [r3, #4]
   33348:	e3120001 	tst	r2, #1
   3334c:	1a00000b 	bne	33380 <BusAccess::controlRelease()+0xbc>
   33350:	e5d411c2 	ldrb	r1, [r4, #450]	; 0x1c2
   33354:	e5d421c1 	ldrb	r2, [r4, #449]	; 0x1c1
   33358:	e3510000 	cmp	r1, #0
   3335c:	13e014ff 	mvnne	r1, #-16777216	; 0xff000000
   33360:	03a01000 	moveq	r1, #0
   33364:	e3520000 	cmp	r2, #0
   33368:	03a02000 	moveq	r2, #0
   3336c:	13e024ff 	mvnne	r2, #-16777216	; 0xff000000
   33370:	e59f0114 	ldr	r0, [pc, #276]	; 3348c <BusAccess::controlRelease()+0x1c8>
   33374:	e5900034 	ldr	r0, [r0, #52]	; 0x34
   33378:	e5831018 	str	r1, [r3, #24]
   3337c:	e5832018 	str	r2, [r3, #24]
   33380:	e3a05000 	mov	r5, #0
   33384:	e1a00004 	mov	r0, r4
   33388:	e5c451c3 	strb	r5, [r4, #451]	; 0x1c3
   3338c:	ebffff6b 	bl	33140 <BusAccess::waitEnablementUpdate()>
   33390:	e1a00004 	mov	r0, r4
   33394:	ebfff8fa 	bl	31784 <BusAccess::busActionCheck()>
   33398:	e1a00004 	mov	r0, r4
   3339c:	ebfff8fc 	bl	31794 <BusAccess::busActionHandleStart()>
   333a0:	e5940000 	ldr	r0, [r4]
   333a4:	e59f10ec 	ldr	r1, [pc, #236]	; 33498 <BusAccess::controlRelease()+0x1d4>
   333a8:	e3500011 	cmp	r0, #17
   333ac:	e59f30e8 	ldr	r3, [pc, #232]	; 3349c <BusAccess::controlRelease()+0x1d8>
   333b0:	11a03001 	movne	r3, r1
   333b4:	e59f20d0 	ldr	r2, [pc, #208]	; 3348c <BusAccess::controlRelease()+0x1c8>
   333b8:	e1a01005 	mov	r1, r5
   333bc:	e582301c 	str	r3, [r2, #28]
   333c0:	e3a00011 	mov	r0, #17
   333c4:	eb002caf 	bl	3e688 <pinMode>
   333c8:	e1a01005 	mov	r1, r5
   333cc:	e3a00012 	mov	r0, #18
   333d0:	eb002cac 	bl	3e688 <pinMode>
   333d4:	e1a01005 	mov	r1, r5
   333d8:	e1a00005 	mov	r0, r5
   333dc:	eb002ca9 	bl	3e688 <pinMode>
   333e0:	e1a01005 	mov	r1, r5
   333e4:	e3a00001 	mov	r0, #1
   333e8:	eb002ca6 	bl	3e688 <pinMode>
   333ec:	e1a01005 	mov	r1, r5
   333f0:	e3a00005 	mov	r0, #5
   333f4:	eb002ca3 	bl	3e688 <pinMode>
   333f8:	e5943000 	ldr	r3, [r4]
   333fc:	e3530011 	cmp	r3, #17
   33400:	0a000002 	beq	33410 <BusAccess::controlRelease()+0x14c>
   33404:	e1a01005 	mov	r1, r5
   33408:	e3a00003 	mov	r0, #3
   3340c:	eb002c9d 	bl	3e688 <pinMode>
   33410:	e3a01000 	mov	r1, #0
   33414:	e1a00004 	mov	r0, r4
   33418:	ebfffbc5 	bl	32334 <BusAccess::waitForBusAck(bool)>
   3341c:	e3a03000 	mov	r3, #0
   33420:	e5c431f1 	strb	r3, [r4, #497]	; 0x1f1
   33424:	e8bd8070 	pop	{r4, r5, r6, pc}
   33428:	e3a02040 	mov	r2, #64	; 0x40
   3342c:	e3a06001 	mov	r6, #1
   33430:	e59f5054 	ldr	r5, [pc, #84]	; 3348c <BusAccess::controlRelease()+0x1c8>
   33434:	e59f3064 	ldr	r3, [pc, #100]	; 334a0 <BusAccess::controlRelease()+0x1dc>
   33438:	e5852028 	str	r2, [r5, #40]	; 0x28
   3343c:	e5952008 	ldr	r2, [r5, #8]
   33440:	e59f105c 	ldr	r1, [pc, #92]	; 334a4 <BusAccess::controlRelease()+0x1e0>
   33444:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   33448:	e1823003 	orr	r3, r2, r3
   3344c:	e5853008 	str	r3, [r5, #8]
   33450:	e3a00064 	mov	r0, #100	; 0x64
   33454:	e585101c 	str	r1, [r5, #28]
   33458:	eb002cf7 	bl	3e83c <lowlev_cycleDelay>
   3345c:	e5856028 	str	r6, [r5, #40]	; 0x28
   33460:	e3a00014 	mov	r0, #20
   33464:	eb002cf4 	bl	3e83c <lowlev_cycleDelay>
   33468:	e585601c 	str	r6, [r5, #28]
   3346c:	e5953008 	ldr	r3, [r5, #8]
   33470:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   33474:	e5853008 	str	r3, [r5, #8]
   33478:	eaffffa0 	b	33300 <BusAccess::controlRelease()+0x3c>
   3347c:	e3a01001 	mov	r1, #1
   33480:	e3a00003 	mov	r0, #3
   33484:	eb002cbf 	bl	3e788 <digitalWrite>
   33488:	eaffffac 	b	33340 <BusAccess::controlRelease()+0x7c>
   3348c:	20200000 	.word	0x20200000
   33490:	0006000b 	.word	0x0006000b
   33494:	2020c000 	.word	0x2020c000
   33498:	000e002b 	.word	0x000e002b
   3349c:	000e0023 	.word	0x000e0023
   334a0:	00249249 	.word	0x00249249
   334a4:	00100002 	.word	0x00100002

000334a8 <BusAccess::waitSetupMREQAndIORQEnables()>:
   334a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   334ac:	e3a06000 	mov	r6, #0
   334b0:	e59f30dc 	ldr	r3, [pc, #220]	; 33594 <BusAccess::waitSetupMREQAndIORQEnables()+0xec>
   334b4:	e59f20dc 	ldr	r2, [pc, #220]	; 33598 <BusAccess::waitSetupMREQAndIORQEnables()+0xf0>
   334b8:	e24dd010 	sub	sp, sp, #16
   334bc:	e1a05006 	mov	r5, r6
   334c0:	e1a04003 	mov	r4, r3
   334c4:	e3a08001 	mov	r8, #1
   334c8:	e59f70cc 	ldr	r7, [pc, #204]	; 3359c <BusAccess::waitSetupMREQAndIORQEnables()+0xf4>
   334cc:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   334d0:	ea000005 	b	334ec <BusAccess::waitSetupMREQAndIORQEnables()+0x44>
   334d4:	e2855001 	add	r5, r5, #1
   334d8:	e1a00008 	mov	r0, r8
   334dc:	ebffea9e 	bl	2df5c <microsDelay>
   334e0:	e1550007 	cmp	r5, r7
   334e4:	e59460a0 	ldr	r6, [r4, #160]	; 0xa0
   334e8:	0a000023 	beq	3357c <BusAccess::waitSetupMREQAndIORQEnables()+0xd4>
   334ec:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
   334f0:	e2133080 	ands	r3, r3, #128	; 0x80
   334f4:	1afffff6 	bne	334d4 <BusAccess::waitSetupMREQAndIORQEnables()+0x2c>
   334f8:	e1a04003 	mov	r4, r3
   334fc:	e3a01004 	mov	r1, #4
   33500:	e3a0000d 	mov	r0, #13
   33504:	eb002c5f 	bl	3e688 <pinMode>
   33508:	e3a01004 	mov	r1, #4
   3350c:	e3a0000c 	mov	r0, #12
   33510:	eb002c5c 	bl	3e688 <pinMode>
   33514:	e3e02000 	mvn	r2, #0
   33518:	e59f7080 	ldr	r7, [pc, #128]	; 335a0 <BusAccess::waitSetupMREQAndIORQEnables()+0xf8>
   3351c:	e59f8070 	ldr	r8, [pc, #112]	; 33594 <BusAccess::waitSetupMREQAndIORQEnables()+0xec>
   33520:	e59f307c 	ldr	r3, [pc, #124]	; 335a4 <BusAccess::waitSetupMREQAndIORQEnables()+0xfc>
   33524:	e5872004 	str	r2, [r7, #4]
   33528:	e3a00001 	mov	r0, #1
   3352c:	e58830a4 	str	r3, [r8, #164]	; 0xa4
   33530:	ebffea89 	bl	2df5c <microsDelay>
   33534:	e59f306c 	ldr	r3, [pc, #108]	; 335a8 <BusAccess::waitSetupMREQAndIORQEnables()+0x100>
   33538:	e3a00001 	mov	r0, #1
   3353c:	e58830a0 	str	r3, [r8, #160]	; 0xa0
   33540:	ebffea85 	bl	2df5c <microsDelay>
   33544:	e59f3060 	ldr	r3, [pc, #96]	; 335ac <BusAccess::waitSetupMREQAndIORQEnables()+0x104>
   33548:	e3a00001 	mov	r0, #1
   3354c:	e5873000 	str	r3, [r7]
   33550:	ebffea81 	bl	2df5c <microsDelay>
   33554:	ebffcda0 	bl	26bdc <CLogger::Get()>
   33558:	e3a03010 	mov	r3, #16
   3355c:	e58d400c 	str	r4, [sp, #12]
   33560:	e88d0068 	stm	sp, {r3, r5, r6}
   33564:	e3a02004 	mov	r2, #4
   33568:	e59f3040 	ldr	r3, [pc, #64]	; 335b0 <BusAccess::waitSetupMREQAndIORQEnables()+0x108>
   3356c:	e59f1040 	ldr	r1, [pc, #64]	; 335b4 <BusAccess::waitSetupMREQAndIORQEnables()+0x10c>
   33570:	ebffccd6 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33574:	e28dd010 	add	sp, sp, #16
   33578:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3357c:	e59f3034 	ldr	r3, [pc, #52]	; 335b8 <BusAccess::waitSetupMREQAndIORQEnables()+0x110>
   33580:	e3a00001 	mov	r0, #1
   33584:	e58430a0 	str	r3, [r4, #160]	; 0xa0
   33588:	ebffea73 	bl	2df5c <microsDelay>
   3358c:	e59440a0 	ldr	r4, [r4, #160]	; 0xa0
   33590:	eaffffd9 	b	334fc <BusAccess::waitSetupMREQAndIORQEnables()+0x54>
   33594:	20101000 	.word	0x20101000
   33598:	5a000006 	.word	0x5a000006
   3359c:	000186a0 	.word	0x000186a0
   335a0:	2020c000 	.word	0x2020c000
   335a4:	5a010000 	.word	0x5a010000
   335a8:	5a000016 	.word	0x5a000016
   335ac:	00002363 	.word	0x00002363
   335b0:	000469dc 	.word	0x000469dc
   335b4:	00046a14 	.word	0x00046a14
   335b8:	5a000026 	.word	0x5a000026

000335bc <BusAccess::waitResetFlipFlops(bool)>:
   335bc:	e59f3088 	ldr	r3, [pc, #136]	; 3364c <BusAccess::waitResetFlipFlops(bool)+0x90>
   335c0:	e5932004 	ldr	r2, [r3, #4]
   335c4:	e3120001 	tst	r2, #1
   335c8:	1a00000d 	bne	33604 <BusAccess::waitResetFlipFlops(bool)+0x48>
   335cc:	e59f207c 	ldr	r2, [pc, #124]	; 33650 <BusAccess::waitResetFlipFlops(bool)+0x94>
   335d0:	e3510000 	cmp	r1, #0
   335d4:	e5922034 	ldr	r2, [r2, #52]	; 0x34
   335d8:	0a00000c 	beq	33610 <BusAccess::waitResetFlipFlops(bool)+0x54>
   335dc:	e5d021c2 	ldrb	r2, [r0, #450]	; 0x1c2
   335e0:	e3520000 	cmp	r2, #0
   335e4:	1a000016 	bne	33644 <BusAccess::waitResetFlipFlops(bool)+0x88>
   335e8:	e5832018 	str	r2, [r3, #24]
   335ec:	e5d031c1 	ldrb	r3, [r0, #449]	; 0x1c1
   335f0:	e3530000 	cmp	r3, #0
   335f4:	0a00000a 	beq	33624 <BusAccess::waitResetFlipFlops(bool)+0x68>
   335f8:	e3e024ff 	mvn	r2, #-16777216	; 0xff000000
   335fc:	e59f3048 	ldr	r3, [pc, #72]	; 3364c <BusAccess::waitResetFlipFlops(bool)+0x90>
   33600:	e5832018 	str	r2, [r3, #24]
   33604:	e3a03000 	mov	r3, #0
   33608:	e5c031c3 	strb	r3, [r0, #451]	; 0x1c3
   3360c:	e12fff1e 	bx	lr
   33610:	e3120002 	tst	r2, #2
   33614:	0a000004 	beq	3362c <BusAccess::waitResetFlipFlops(bool)+0x70>
   33618:	e5831018 	str	r1, [r3, #24]
   3361c:	e3120001 	tst	r2, #1
   33620:	0afffff1 	beq	335ec <BusAccess::waitResetFlipFlops(bool)+0x30>
   33624:	e3a02000 	mov	r2, #0
   33628:	eafffff3 	b	335fc <BusAccess::waitResetFlipFlops(bool)+0x40>
   3362c:	e5d011c2 	ldrb	r1, [r0, #450]	; 0x1c2
   33630:	e3510000 	cmp	r1, #0
   33634:	13e014ff 	mvnne	r1, #-16777216	; 0xff000000
   33638:	15831018 	strne	r1, [r3, #24]
   3363c:	1afffff6 	bne	3361c <BusAccess::waitResetFlipFlops(bool)+0x60>
   33640:	eafffff4 	b	33618 <BusAccess::waitResetFlipFlops(bool)+0x5c>
   33644:	e3e024ff 	mvn	r2, #-16777216	; 0xff000000
   33648:	eaffffe6 	b	335e8 <BusAccess::waitResetFlipFlops(bool)+0x2c>
   3364c:	2020c000 	.word	0x2020c000
   33650:	20200000 	.word	0x20200000

00033654 <BusAccess::waitClearDetected()>:
   33654:	e12fff1e 	bx	lr

00033658 <BusAccess::waitSuspendBusDetailOneCycle()>:
   33658:	e5903000 	ldr	r3, [r0]
   3365c:	e3530011 	cmp	r3, #17
   33660:	03a03001 	moveq	r3, #1
   33664:	05c031d1 	strbeq	r3, [r0, #465]	; 0x1d1
   33668:	e12fff1e 	bx	lr

0003366c <BusAccess::setPinOut(int, bool)>:
   3366c:	e92d4070 	push	{r4, r5, r6, lr}
   33670:	e1a05002 	mov	r5, r2
   33674:	e6ef4071 	uxtb	r4, r1
   33678:	e1a00004 	mov	r0, r4
   3367c:	e1a01002 	mov	r1, r2
   33680:	eb002c40 	bl	3e788 <digitalWrite>
   33684:	e1a00004 	mov	r0, r4
   33688:	e3a01001 	mov	r1, #1
   3368c:	eb002bfd 	bl	3e688 <pinMode>
   33690:	e1a01005 	mov	r1, r5
   33694:	e1a00004 	mov	r0, r4
   33698:	e8bd4070 	pop	{r4, r5, r6, lr}
   3369c:	ea002c39 	b	3e788 <digitalWrite>

000336a0 <BusAccess::controlTake()>:
   336a0:	e92d4070 	push	{r4, r5, r6, lr}
   336a4:	e3a04001 	mov	r4, #1
   336a8:	e3a0e040 	mov	lr, #64	; 0x40
   336ac:	e1a05000 	mov	r5, r0
   336b0:	e59f209c 	ldr	r2, [pc, #156]	; 33754 <BusAccess::controlTake()+0xb4>
   336b4:	e5c041f1 	strb	r4, [r0, #497]	; 0x1f1
   336b8:	e5923000 	ldr	r3, [r2]
   336bc:	e59fc094 	ldr	ip, [pc, #148]	; 33758 <BusAccess::controlTake()+0xb8>
   336c0:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   336c4:	e3c33008 	bic	r3, r3, #8
   336c8:	e5823000 	str	r3, [r2]
   336cc:	e59c3008 	ldr	r3, [ip, #8]
   336d0:	e1a02004 	mov	r2, r4
   336d4:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   336d8:	e58c3008 	str	r3, [ip, #8]
   336dc:	e3a01011 	mov	r1, #17
   336e0:	e58ce01c 	str	lr, [ip, #28]
   336e4:	ebffffe0 	bl	3366c <BusAccess::setPinOut(int, bool)>
   336e8:	e1a02004 	mov	r2, r4
   336ec:	e1a00005 	mov	r0, r5
   336f0:	e3a01012 	mov	r1, #18
   336f4:	ebffffdc 	bl	3366c <BusAccess::setPinOut(int, bool)>
   336f8:	e1a02004 	mov	r2, r4
   336fc:	e1a00005 	mov	r0, r5
   33700:	e3a01000 	mov	r1, #0
   33704:	ebffffd8 	bl	3366c <BusAccess::setPinOut(int, bool)>
   33708:	e1a02004 	mov	r2, r4
   3370c:	e1a01004 	mov	r1, r4
   33710:	e1a00005 	mov	r0, r5
   33714:	ebffffd4 	bl	3366c <BusAccess::setPinOut(int, bool)>
   33718:	e1a02004 	mov	r2, r4
   3371c:	e1a00005 	mov	r0, r5
   33720:	e3a01005 	mov	r1, #5
   33724:	ebffffd0 	bl	3366c <BusAccess::setPinOut(int, bool)>
   33728:	e1a02004 	mov	r2, r4
   3372c:	e1a00005 	mov	r0, r5
   33730:	e3a01003 	mov	r1, #3
   33734:	ebffffcc 	bl	3366c <BusAccess::setPinOut(int, bool)>
   33738:	e5953000 	ldr	r3, [r5]
   3373c:	e3530011 	cmp	r3, #17
   33740:	18bd8070 	popne	{r4, r5, r6, pc}
   33744:	e3a01000 	mov	r1, #0
   33748:	e8bd4070 	pop	{r4, r5, r6, lr}
   3374c:	e3a00003 	mov	r0, #3
   33750:	ea002c0c 	b	3e788 <digitalWrite>
   33754:	2020c000 	.word	0x2020c000
   33758:	20200000 	.word	0x20200000

0003375c <BusAccess::controlRequestAndTake()>:
   3375c:	e3a0c040 	mov	ip, #64	; 0x40
   33760:	e92d4010 	push	{r4, lr}
   33764:	e1a04000 	mov	r4, r0
   33768:	e59f3048 	ldr	r3, [pc, #72]	; 337b8 <BusAccess::controlRequestAndTake()+0x5c>
   3376c:	e3a01000 	mov	r1, #0
   33770:	e5932008 	ldr	r2, [r3, #8]
   33774:	e3a00013 	mov	r0, #19
   33778:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   3377c:	e5832008 	str	r2, [r3, #8]
   33780:	e583c01c 	str	ip, [r3, #28]
   33784:	eb002bff 	bl	3e788 <digitalWrite>
   33788:	e1a00004 	mov	r0, r4
   3378c:	e3a01001 	mov	r1, #1
   33790:	ebfffae7 	bl	32334 <BusAccess::waitForBusAck(bool)>
   33794:	e3500000 	cmp	r0, #0
   33798:	e1a00004 	mov	r0, r4
   3379c:	1a000002 	bne	337ac <BusAccess::controlRequestAndTake()+0x50>
   337a0:	ebfffec7 	bl	332c4 <BusAccess::controlRelease()>
   337a4:	e3a00002 	mov	r0, #2
   337a8:	e8bd8010 	pop	{r4, pc}
   337ac:	ebffffbb 	bl	336a0 <BusAccess::controlTake()>
   337b0:	e3a00000 	mov	r0, #0
   337b4:	e8bd8010 	pop	{r4, pc}
   337b8:	20200000 	.word	0x20200000

000337bc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>:
   337bc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   337c0:	e5d0a1f1 	ldrb	sl, [r0, #497]	; 0x1f1
   337c4:	e1a05000 	mov	r5, r0
   337c8:	e23aa001 	eors	sl, sl, #1
   337cc:	e1a07002 	mov	r7, r2
   337d0:	e1a08003 	mov	r8, r3
   337d4:	e1a06001 	mov	r6, r1
   337d8:	e5dd9020 	ldrb	r9, [sp, #32]
   337dc:	0a00002c 	beq	33894 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0xd8>
   337e0:	ebffffdd 	bl	3375c <BusAccess::controlRequestAndTake()>
   337e4:	e3500000 	cmp	r0, #0
   337e8:	1a000041 	bne	338f4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x138>
   337ec:	e59f4104 	ldr	r4, [pc, #260]	; 338f8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x13c>
   337f0:	e1a01006 	mov	r1, r6
   337f4:	e5943008 	ldr	r3, [r4, #8]
   337f8:	e1a00005 	mov	r0, r5
   337fc:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   33800:	e5843008 	str	r3, [r4, #8]
   33804:	ebfffc61 	bl	32990 <BusAccess::addrSet(unsigned int)>
   33808:	e5942008 	ldr	r2, [r4, #8]
   3380c:	e59f30e8 	ldr	r3, [pc, #232]	; 338fc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x140>
   33810:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   33814:	e1823003 	orr	r3, r2, r3
   33818:	e3580000 	cmp	r8, #0
   3381c:	e5843008 	str	r3, [r4, #8]
   33820:	0a00002c 	beq	338d8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x11c>
   33824:	e1a04007 	mov	r4, r7
   33828:	e0466007 	sub	r6, r6, r7
   3382c:	ea000002 	b	3383c <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x80>
   33830:	e0443007 	sub	r3, r4, r7
   33834:	e1530008 	cmp	r3, r8
   33838:	2a00000d 	bcs	33874 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0xb8>
   3383c:	e4d41001 	ldrb	r1, [r4], #1
   33840:	e1a02009 	mov	r2, r9
   33844:	e1a00005 	mov	r0, r5
   33848:	ebfffc59 	bl	329b4 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)>
   3384c:	e1a00005 	mov	r0, r5
   33850:	ebfffbdd 	bl	327cc <BusAccess::addrLowInc()>
   33854:	e0841006 	add	r1, r4, r6
   33858:	e31100ff 	tst	r1, #255	; 0xff
   3385c:	1afffff3 	bne	33830 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x74>
   33860:	e1a00005 	mov	r0, r5
   33864:	ebfffc49 	bl	32990 <BusAccess::addrSet(unsigned int)>
   33868:	e0443007 	sub	r3, r4, r7
   3386c:	e1530008 	cmp	r3, r8
   33870:	3afffff1 	bcc	3383c <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x80>
   33874:	e59f207c 	ldr	r2, [pc, #124]	; 338f8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x13c>
   33878:	e35a0000 	cmp	sl, #0
   3387c:	e5923008 	ldr	r3, [r2, #8]
   33880:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   33884:	e5823008 	str	r3, [r2, #8]
   33888:	1a000015 	bne	338e4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x128>
   3388c:	e3a00000 	mov	r0, #0
   33890:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33894:	e59f405c 	ldr	r4, [pc, #92]	; 338f8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x13c>
   33898:	e5943008 	ldr	r3, [r4, #8]
   3389c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   338a0:	e5843008 	str	r3, [r4, #8]
   338a4:	ebfffc39 	bl	32990 <BusAccess::addrSet(unsigned int)>
   338a8:	e5942008 	ldr	r2, [r4, #8]
   338ac:	e59f3048 	ldr	r3, [pc, #72]	; 338fc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x140>
   338b0:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   338b4:	e1823003 	orr	r3, r2, r3
   338b8:	e3580000 	cmp	r8, #0
   338bc:	e5843008 	str	r3, [r4, #8]
   338c0:	1affffd7 	bne	33824 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x68>
   338c4:	e5943008 	ldr	r3, [r4, #8]
   338c8:	e1a00008 	mov	r0, r8
   338cc:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   338d0:	e5843008 	str	r3, [r4, #8]
   338d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   338d8:	e5943008 	ldr	r3, [r4, #8]
   338dc:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   338e0:	e5843008 	str	r3, [r4, #8]
   338e4:	e1a00005 	mov	r0, r5
   338e8:	ebfffe75 	bl	332c4 <BusAccess::controlRelease()>
   338ec:	e3a00000 	mov	r0, #0
   338f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   338f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   338f8:	20200000 	.word	0x20200000
   338fc:	00249249 	.word	0x00249249

00033900 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>:
   33900:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33904:	e5d0c1f1 	ldrb	ip, [r0, #497]	; 0x1f1
   33908:	e24dd00c 	sub	sp, sp, #12
   3390c:	e1a0a001 	mov	sl, r1
   33910:	e23c1001 	eors	r1, ip, #1
   33914:	e1a05000 	mov	r5, r0
   33918:	e58d1000 	str	r1, [sp]
   3391c:	e1a0b003 	mov	fp, r3
   33920:	e5dd4030 	ldrb	r4, [sp, #48]	; 0x30
   33924:	0a000004 	beq	3393c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x3c>
   33928:	e58d2004 	str	r2, [sp, #4]
   3392c:	ebffff8a 	bl	3375c <BusAccess::controlRequestAndTake()>
   33930:	e3500000 	cmp	r0, #0
   33934:	e59d2004 	ldr	r2, [sp, #4]
   33938:	1a000044 	bne	33a50 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x150>
   3393c:	e3a00040 	mov	r0, #64	; 0x40
   33940:	e59f912c 	ldr	r9, [pc, #300]	; 33a74 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x174>
   33944:	e58d2004 	str	r2, [sp, #4]
   33948:	e5993008 	ldr	r3, [r9, #8]
   3394c:	e1a0100a 	mov	r1, sl
   33950:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   33954:	e5893008 	str	r3, [r9, #8]
   33958:	e589001c 	str	r0, [r9, #28]
   3395c:	e1a00005 	mov	r0, r5
   33960:	ebfffc0a 	bl	32990 <BusAccess::addrSet(unsigned int)>
   33964:	e59f310c 	ldr	r3, [pc, #268]	; 33a78 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x178>
   33968:	e3540001 	cmp	r4, #1
   3396c:	e59f6108 	ldr	r6, [pc, #264]	; 33a7c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x17c>
   33970:	11a06003 	movne	r6, r3
   33974:	e35b0000 	cmp	fp, #0
   33978:	e59d2004 	ldr	r2, [sp, #4]
   3397c:	0a00002f 	beq	33a40 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x140>
   33980:	e1a04002 	mov	r4, r2
   33984:	e3a08c0e 	mov	r8, #3584	; 0xe00
   33988:	e3a07801 	mov	r7, #65536	; 0x10000
   3398c:	e082b00b 	add	fp, r2, fp
   33990:	e04aa002 	sub	sl, sl, r2
   33994:	ea000001 	b	339a0 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0xa0>
   33998:	e154000b 	cmp	r4, fp
   3399c:	0a000027 	beq	33a40 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x140>
   339a0:	e5953000 	ldr	r3, [r5]
   339a4:	e3a0000a 	mov	r0, #10
   339a8:	e3530011 	cmp	r3, #17
   339ac:	e3a03c02 	mov	r3, #512	; 0x200
   339b0:	e5898028 	str	r8, [r9, #40]	; 0x28
   339b4:	e589301c 	str	r3, [r9, #28]
   339b8:	0a000026 	beq	33a58 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x158>
   339bc:	e5897028 	str	r7, [r9, #40]	; 0x28
   339c0:	eb002b9d 	bl	3e83c <lowlev_cycleDelay>
   339c4:	e589701c 	str	r7, [r9, #28]
   339c8:	e5896028 	str	r6, [r9, #40]	; 0x28
   339cc:	e3a00f7d 	mov	r0, #500	; 0x1f4
   339d0:	eb002b99 	bl	3e83c <lowlev_cycleDelay>
   339d4:	e5993034 	ldr	r3, [r9, #52]	; 0x34
   339d8:	e4d42001 	ldrb	r2, [r4], #1
   339dc:	e1a03a23 	lsr	r3, r3, #20
   339e0:	e6ef3073 	uxtb	r3, r3
   339e4:	e1520003 	cmp	r2, r3
   339e8:	0a000007 	beq	33a0c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x10c>
   339ec:	e3a01000 	mov	r1, #0
   339f0:	e3a00008 	mov	r0, #8
   339f4:	eb002b63 	bl	3e788 <digitalWrite>
   339f8:	e3a00004 	mov	r0, #4
   339fc:	ebffe956 	bl	2df5c <microsDelay>
   33a00:	e3a01001 	mov	r1, #1
   33a04:	e3a00008 	mov	r0, #8
   33a08:	eb002b5e 	bl	3e788 <digitalWrite>
   33a0c:	e5993034 	ldr	r3, [r9, #52]	; 0x34
   33a10:	e1a00005 	mov	r0, r5
   33a14:	e1a03a23 	lsr	r3, r3, #20
   33a18:	e5443001 	strb	r3, [r4, #-1]
   33a1c:	e589601c 	str	r6, [r9, #28]
   33a20:	ebfffb69 	bl	327cc <BusAccess::addrLowInc()>
   33a24:	e08a1004 	add	r1, sl, r4
   33a28:	e31100ff 	tst	r1, #255	; 0xff
   33a2c:	1affffd9 	bne	33998 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x98>
   33a30:	e1a00005 	mov	r0, r5
   33a34:	ebfffbd5 	bl	32990 <BusAccess::addrSet(unsigned int)>
   33a38:	e154000b 	cmp	r4, fp
   33a3c:	1affffd7 	bne	339a0 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0xa0>
   33a40:	e59d3000 	ldr	r3, [sp]
   33a44:	e3530000 	cmp	r3, #0
   33a48:	1a000005 	bne	33a64 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x164>
   33a4c:	e3a00000 	mov	r0, #0
   33a50:	e28dd00c 	add	sp, sp, #12
   33a54:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33a58:	eb002b77 	bl	3e83c <lowlev_cycleDelay>
   33a5c:	e5898028 	str	r8, [r9, #40]	; 0x28
   33a60:	eaffffd8 	b	339c8 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0xc8>
   33a64:	e1a00005 	mov	r0, r5
   33a68:	ebfffe15 	bl	332c4 <BusAccess::controlRelease()>
   33a6c:	e3a00000 	mov	r0, #0
   33a70:	eafffff6 	b	33a50 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x150>
   33a74:	20200000 	.word	0x20200000
   33a78:	00040001 	.word	0x00040001
   33a7c:	00040002 	.word	0x00040002

00033a80 <BusAccess::isrAssert(int)>:
   33a80:	e351000b 	cmp	r1, #11
   33a84:	d0800101 	addle	r0, r0, r1, lsl #2
   33a88:	d59031f4 	ldrle	r3, [r0, #500]	; 0x1f4
   33a8c:	d2833001 	addle	r3, r3, #1
   33a90:	d58031f4 	strle	r3, [r0, #500]	; 0x1f4
   33a94:	e12fff1e 	bx	lr

00033a98 <BusAccess::isrAssertGetCount(int)>:
   33a98:	e351000b 	cmp	r1, #11
   33a9c:	d281107c 	addle	r1, r1, #124	; 0x7c
   33aa0:	d0801101 	addle	r1, r0, r1, lsl #2
   33aa4:	d5910004 	ldrle	r0, [r1, #4]
   33aa8:	c3a00000 	movgt	r0, #0
   33aac:	e12fff1e 	bx	lr

00033ab0 <BusAccess::isrValue(int, int)>:
   33ab0:	e351000b 	cmp	r1, #11
   33ab4:	d281107c 	addle	r1, r1, #124	; 0x7c
   33ab8:	d0801101 	addle	r1, r0, r1, lsl #2
   33abc:	d5812004 	strle	r2, [r1, #4]
   33ac0:	e12fff1e 	bx	lr

00033ac4 <BusAccess::isrPeak(int, int)>:
   33ac4:	e351000b 	cmp	r1, #11
   33ac8:	c12fff1e 	bxgt	lr
   33acc:	e0800101 	add	r0, r0, r1, lsl #2
   33ad0:	e59031f4 	ldr	r3, [r0, #500]	; 0x1f4
   33ad4:	e1530002 	cmp	r3, r2
   33ad8:	b58021f4 	strlt	r2, [r0, #500]	; 0x1f4
   33adc:	e12fff1e 	bx	lr

00033ae0 <BusAccess::setSignal(BR_BUS_ACTION, bool)>:
   33ae0:	e2411001 	sub	r1, r1, #1
   33ae4:	e3510003 	cmp	r1, #3
   33ae8:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   33aec:	ea000003 	b	33b00 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x20>
   33af0:	00033b80 	.word	0x00033b80
   33af4:	00033b48 	.word	0x00033b48
   33af8:	00033b10 	.word	0x00033b10
   33afc:	00033b04 	.word	0x00033b04
   33b00:	e12fff1e 	bx	lr
   33b04:	e3520000 	cmp	r2, #0
   33b08:	1a000033 	bne	33bdc <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xfc>
   33b0c:	eafffdec 	b	332c4 <BusAccess::controlRelease()>
   33b10:	e3520000 	cmp	r2, #0
   33b14:	e5903000 	ldr	r3, [r0]
   33b18:	0a000026 	beq	33bb8 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xd8>
   33b1c:	e3530011 	cmp	r3, #17
   33b20:	13a02801 	movne	r2, #65536	; 0x10000
   33b24:	13a00c0e 	movne	r0, #3584	; 0xe00
   33b28:	13a01b01 	movne	r1, #1024	; 0x400
   33b2c:	1a00001b 	bne	33ba0 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xc0>
   33b30:	e3a01c0e 	mov	r1, #3584	; 0xe00
   33b34:	e3a02b01 	mov	r2, #1024	; 0x400
   33b38:	e59f30d8 	ldr	r3, [pc, #216]	; 33c18 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33b3c:	e5831028 	str	r1, [r3, #40]	; 0x28
   33b40:	e583201c 	str	r2, [r3, #28]
   33b44:	e12fff1e 	bx	lr
   33b48:	e3520000 	cmp	r2, #0
   33b4c:	e5903000 	ldr	r3, [r0]
   33b50:	0a000018 	beq	33bb8 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xd8>
   33b54:	e3530011 	cmp	r3, #17
   33b58:	13a02801 	movne	r2, #65536	; 0x10000
   33b5c:	13a00c0e 	movne	r0, #3584	; 0xe00
   33b60:	13a01b03 	movne	r1, #3072	; 0xc00
   33b64:	1a00000d 	bne	33ba0 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xc0>
   33b68:	e3a01c0e 	mov	r1, #3584	; 0xe00
   33b6c:	e3a02b03 	mov	r2, #3072	; 0xc00
   33b70:	e59f30a0 	ldr	r3, [pc, #160]	; 33c18 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33b74:	e5831028 	str	r1, [r3, #40]	; 0x28
   33b78:	e583201c 	str	r2, [r3, #28]
   33b7c:	e12fff1e 	bx	lr
   33b80:	e3520000 	cmp	r2, #0
   33b84:	e5903000 	ldr	r3, [r0]
   33b88:	0a00000a 	beq	33bb8 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xd8>
   33b8c:	e3530011 	cmp	r3, #17
   33b90:	13a02801 	movne	r2, #65536	; 0x10000
   33b94:	13a00c0e 	movne	r0, #3584	; 0xe00
   33b98:	13a01c0a 	movne	r1, #2560	; 0xa00
   33b9c:	0a000017 	beq	33c00 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x120>
   33ba0:	e59f3070 	ldr	r3, [pc, #112]	; 33c18 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33ba4:	e583201c 	str	r2, [r3, #28]
   33ba8:	e5830028 	str	r0, [r3, #40]	; 0x28
   33bac:	e583101c 	str	r1, [r3, #28]
   33bb0:	e5832028 	str	r2, [r3, #40]	; 0x28
   33bb4:	e12fff1e 	bx	lr
   33bb8:	e3530011 	cmp	r3, #17
   33bbc:	03a02c0e 	moveq	r2, #3584	; 0xe00
   33bc0:	13a01801 	movne	r1, #65536	; 0x10000
   33bc4:	13a02c0e 	movne	r2, #3584	; 0xe00
   33bc8:	159f3048 	ldrne	r3, [pc, #72]	; 33c18 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33bcc:	059f3044 	ldreq	r3, [pc, #68]	; 33c18 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33bd0:	1583101c 	strne	r1, [r3, #28]
   33bd4:	e5832028 	str	r2, [r3, #40]	; 0x28
   33bd8:	e12fff1e 	bx	lr
   33bdc:	e3a0c040 	mov	ip, #64	; 0x40
   33be0:	e59f3030 	ldr	r3, [pc, #48]	; 33c18 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33be4:	e3a01000 	mov	r1, #0
   33be8:	e5932008 	ldr	r2, [r3, #8]
   33bec:	e3a00013 	mov	r0, #19
   33bf0:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   33bf4:	e5832008 	str	r2, [r3, #8]
   33bf8:	e583c01c 	str	ip, [r3, #28]
   33bfc:	ea002ae1 	b	3e788 <digitalWrite>
   33c00:	e3a01c0e 	mov	r1, #3584	; 0xe00
   33c04:	e3a02c0a 	mov	r2, #2560	; 0xa00
   33c08:	e59f3008 	ldr	r3, [pc, #8]	; 33c18 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33c0c:	e5831028 	str	r1, [r3, #40]	; 0x28
   33c10:	e583201c 	str	r2, [r3, #28]
   33c14:	e12fff1e 	bx	lr
   33c18:	20200000 	.word	0x20200000

00033c1c <BusAccess::busAccessCallbackPageIn()>:
   33c1c:	e59021bc 	ldr	r2, [r0, #444]	; 0x1bc
   33c20:	e3520000 	cmp	r2, #0
   33c24:	d12fff1e 	bxle	lr
   33c28:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33c2c:	e1a06000 	mov	r6, r0
   33c30:	e1a04000 	mov	r4, r0
   33c34:	e3a05000 	mov	r5, #0
   33c38:	e3a08004 	mov	r8, #4
   33c3c:	e3a07008 	mov	r7, #8
   33c40:	ea000002 	b	33c50 <BusAccess::busAccessCallbackPageIn()+0x34>
   33c44:	e1520005 	cmp	r2, r5
   33c48:	e284402c 	add	r4, r4, #44	; 0x2c
   33c4c:	da00000c 	ble	33c84 <BusAccess::busAccessCallbackPageIn()+0x68>
   33c50:	e5d43004 	ldrb	r3, [r4, #4]
   33c54:	e2855001 	add	r5, r5, #1
   33c58:	e3530000 	cmp	r3, #0
   33c5c:	0afffff8 	beq	33c44 <BusAccess::busAccessCallbackPageIn()+0x28>
   33c60:	e594300c 	ldr	r3, [r4, #12]
   33c64:	e1a02008 	mov	r2, r8
   33c68:	e5940010 	ldr	r0, [r4, #16]
   33c6c:	e1a01007 	mov	r1, r7
   33c70:	e12fff33 	blx	r3
   33c74:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
   33c78:	e284402c 	add	r4, r4, #44	; 0x2c
   33c7c:	e1520005 	cmp	r2, r5
   33c80:	cafffff2 	bgt	33c50 <BusAccess::busAccessCallbackPageIn()+0x34>
   33c84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00033c88 <BusAccess::busPagePinSetActive(bool)>:
   33c88:	e5903000 	ldr	r3, [r0]
   33c8c:	e3a00008 	mov	r0, #8
   33c90:	e3530011 	cmp	r3, #17
   33c94:	12211001 	eorne	r1, r1, #1
   33c98:	ea002aba 	b	3e788 <digitalWrite>

00033c9c <BusAccess::rawBusControlEnable(bool)>:
   33c9c:	e92d4070 	push	{r4, r5, r6, lr}
   33ca0:	e1a04001 	mov	r4, r1
   33ca4:	e1a05000 	mov	r5, r0
   33ca8:	e2244001 	eor	r4, r4, #1
   33cac:	ebfff5dc 	bl	31424 <BusAccess::busAccessReinit()>
   33cb0:	e5c541c0 	strb	r4, [r5, #448]	; 0x1c0
   33cb4:	e8bd8070 	pop	{r4, r5, r6, pc}

00033cb8 <BusAccess::rawBusControlClearWait()>:
   33cb8:	e92d4010 	push	{r4, lr}
   33cbc:	e3a01000 	mov	r1, #0
   33cc0:	ebfffe3d 	bl	335bc <BusAccess::waitResetFlipFlops(bool)>
   33cc4:	e8bd4010 	pop	{r4, lr}
   33cc8:	eafff7fe 	b	31cc8 <BusAccess::waitHandleReadRelease()>

00033ccc <BusAccess::rawBusControlWaitDisable()>:
   33ccc:	e59f2010 	ldr	r2, [pc, #16]	; 33ce4 <BusAccess::rawBusControlWaitDisable()+0x18>
   33cd0:	e5923000 	ldr	r3, [r2]
   33cd4:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   33cd8:	e3c33008 	bic	r3, r3, #8
   33cdc:	e5823000 	str	r3, [r2]
   33ce0:	e12fff1e 	bx	lr
   33ce4:	2020c000 	.word	0x2020c000

00033ce8 <BusAccess::waitGenerationDisable()>:
   33ce8:	eafffff7 	b	33ccc <BusAccess::rawBusControlWaitDisable()>

00033cec <BusAccess::rawBusControlClockEnable(bool)>:
   33cec:	e3510000 	cmp	r1, #0
   33cf0:	0a000125 	beq	3418c <BusAccess::rawBusControlClockEnable(bool)+0x4a0>
   33cf4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33cf8:	e3a04004 	mov	r4, #4
   33cfc:	e5d07228 	ldrb	r7, [r0, #552]	; 0x228
   33d00:	e24dd020 	sub	sp, sp, #32
   33d04:	e3570000 	cmp	r7, #0
   33d08:	e1a05000 	mov	r5, r0
   33d0c:	e5804230 	str	r4, [r0, #560]	; 0x230
   33d10:	1a00005d 	bne	33e8c <BusAccess::rawBusControlClockEnable(bool)+0x1a0>
   33d14:	e59f6530 	ldr	r6, [pc, #1328]	; 3424c <BusAccess::rawBusControlClockEnable(bool)+0x560>
   33d18:	e580422c 	str	r4, [r0, #556]	; 0x22c
   33d1c:	ebffcbae 	bl	26bdc <CLogger::Get()>
   33d20:	e59f3528 	ldr	r3, [pc, #1320]	; 34250 <BusAccess::rawBusControlClockEnable(bool)+0x564>
   33d24:	e58d7004 	str	r7, [sp, #4]
   33d28:	e1a02004 	mov	r2, r4
   33d2c:	e58d6000 	str	r6, [sp]
   33d30:	e59f151c 	ldr	r1, [pc, #1308]	; 34254 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   33d34:	ebffcae5 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33d38:	e5d53228 	ldrb	r3, [r5, #552]	; 0x228
   33d3c:	e3530000 	cmp	r3, #0
   33d40:	05856224 	streq	r6, [r5, #548]	; 0x224
   33d44:	1a00012a 	bne	341f4 <BusAccess::rawBusControlClockEnable(bool)+0x508>
   33d48:	e59f6508 	ldr	r6, [pc, #1288]	; 34258 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   33d4c:	e59f3508 	ldr	r3, [pc, #1288]	; 3425c <BusAccess::rawBusControlClockEnable(bool)+0x570>
   33d50:	e5962070 	ldr	r2, [r6, #112]	; 0x70
   33d54:	e0033002 	and	r3, r3, r2
   33d58:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   33d5c:	e5863070 	str	r3, [r6, #112]	; 0x70
   33d60:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   33d64:	e3730001 	cmn	r3, #1
   33d68:	0a000114 	beq	341c0 <BusAccess::rawBusControlClockEnable(bool)+0x4d4>
   33d6c:	e5953230 	ldr	r3, [r5, #560]	; 0x230
   33d70:	e3530000 	cmp	r3, #0
   33d74:	0a000111 	beq	341c0 <BusAccess::rawBusControlClockEnable(bool)+0x4d4>
   33d78:	e3a07000 	mov	r7, #0
   33d7c:	e3a08001 	mov	r8, #1
   33d80:	e1a04007 	mov	r4, r7
   33d84:	ea000005 	b	33da0 <BusAccess::rawBusControlClockEnable(bool)+0xb4>
   33d88:	e2844001 	add	r4, r4, #1
   33d8c:	e1a00008 	mov	r0, r8
   33d90:	ebffe871 	bl	2df5c <microsDelay>
   33d94:	e3540064 	cmp	r4, #100	; 0x64
   33d98:	e59670a0 	ldr	r7, [r6, #160]	; 0xa0
   33d9c:	0a000002 	beq	33dac <BusAccess::rawBusControlClockEnable(bool)+0xc0>
   33da0:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   33da4:	e3130080 	tst	r3, #128	; 0x80
   33da8:	1afffff6 	bne	33d88 <BusAccess::rawBusControlClockEnable(bool)+0x9c>
   33dac:	e5d51230 	ldrb	r1, [r5, #560]	; 0x230
   33db0:	e5d5022c 	ldrb	r0, [r5, #556]	; 0x22c
   33db4:	eb002a33 	bl	3e688 <pinMode>
   33db8:	e5950224 	ldr	r0, [r5, #548]	; 0x224
   33dbc:	e59f249c 	ldr	r2, [pc, #1180]	; 34260 <BusAccess::rawBusControlClockEnable(bool)+0x574>
   33dc0:	e59f149c 	ldr	r1, [pc, #1180]	; 34264 <BusAccess::rawBusControlClockEnable(bool)+0x578>
   33dc4:	e1500002 	cmp	r0, r2
   33dc8:	e59f2498 	ldr	r2, [pc, #1176]	; 34268 <BusAccess::rawBusControlClockEnable(bool)+0x57c>
   33dcc:	e59f3498 	ldr	r3, [pc, #1176]	; 3426c <BusAccess::rawBusControlClockEnable(bool)+0x580>
   33dd0:	91a03001 	movls	r3, r1
   33dd4:	e59f6494 	ldr	r6, [pc, #1172]	; 34270 <BusAccess::rawBusControlClockEnable(bool)+0x584>
   33dd8:	91a06002 	movls	r6, r2
   33ddc:	e59f9474 	ldr	r9, [pc, #1140]	; 34258 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   33de0:	e59f248c 	ldr	r2, [pc, #1164]	; 34274 <BusAccess::rawBusControlClockEnable(bool)+0x588>
   33de4:	e5893070 	str	r3, [r9, #112]	; 0x70
   33de8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33dec:	e59fa484 	ldr	sl, [pc, #1156]	; 34278 <BusAccess::rawBusControlClockEnable(bool)+0x58c>
   33df0:	91a0a002 	movls	sl, r2
   33df4:	ebffe858 	bl	2df5c <microsDelay>
   33df8:	e5951224 	ldr	r1, [r5, #548]	; 0x224
   33dfc:	e1a00006 	mov	r0, r6
   33e00:	eb0027d3 	bl	3dd54 <__aeabi_uidiv>
   33e04:	e59f3470 	ldr	r3, [pc, #1136]	; 3427c <BusAccess::rawBusControlClockEnable(bool)+0x590>
   33e08:	e1500003 	cmp	r0, r3
   33e0c:	31a08000 	movcc	r8, r0
   33e10:	21a08003 	movcs	r8, r3
   33e14:	e1a03608 	lsl	r3, r8, #12
   33e18:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   33e1c:	e5893074 	str	r3, [r9, #116]	; 0x74
   33e20:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33e24:	ebffe84c 	bl	2df5c <microsDelay>
   33e28:	e3a03001 	mov	r3, #1
   33e2c:	e589a070 	str	sl, [r9, #112]	; 0x70
   33e30:	e1a01008 	mov	r1, r8
   33e34:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   33e38:	e1a00006 	mov	r0, r6
   33e3c:	eb0027c4 	bl	3dd54 <__aeabi_uidiv>
   33e40:	e1a09000 	mov	r9, r0
   33e44:	ebffcb64 	bl	26bdc <CLogger::Get()>
   33e48:	e5951230 	ldr	r1, [r5, #560]	; 0x230
   33e4c:	e595222c 	ldr	r2, [r5, #556]	; 0x22c
   33e50:	e5953224 	ldr	r3, [r5, #548]	; 0x224
   33e54:	e58d1014 	str	r1, [sp, #20]
   33e58:	e58d2010 	str	r2, [sp, #16]
   33e5c:	e58d3004 	str	r3, [sp, #4]
   33e60:	e58d800c 	str	r8, [sp, #12]
   33e64:	e58d6008 	str	r6, [sp, #8]
   33e68:	e58d9000 	str	r9, [sp]
   33e6c:	e58d701c 	str	r7, [sp, #28]
   33e70:	e58d4018 	str	r4, [sp, #24]
   33e74:	e59f3404 	ldr	r3, [pc, #1028]	; 34280 <BusAccess::rawBusControlClockEnable(bool)+0x594>
   33e78:	e3a02003 	mov	r2, #3
   33e7c:	e59f13d0 	ldr	r1, [pc, #976]	; 34254 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   33e80:	ebffca92 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33e84:	e28dd020 	add	sp, sp, #32
   33e88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33e8c:	e3a07000 	mov	r7, #0
   33e90:	e59f63c0 	ldr	r6, [pc, #960]	; 34258 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   33e94:	e59f13c0 	ldr	r1, [pc, #960]	; 3425c <BusAccess::rawBusControlClockEnable(bool)+0x570>
   33e98:	e5962070 	ldr	r2, [r6, #112]	; 0x70
   33e9c:	e0022001 	and	r2, r2, r1
   33ea0:	e382245a 	orr	r2, r2, #1509949440	; 0x5a000000
   33ea4:	e5862070 	str	r2, [r6, #112]	; 0x70
   33ea8:	e580422c 	str	r4, [r0, #556]	; 0x22c
   33eac:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   33eb0:	e5c07228 	strb	r7, [r0, #552]	; 0x228
   33eb4:	e0033001 	and	r3, r3, r1
   33eb8:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   33ebc:	e5863070 	str	r3, [r6, #112]	; 0x70
   33ec0:	e590322c 	ldr	r3, [r0, #556]	; 0x22c
   33ec4:	e3730001 	cmn	r3, #1
   33ec8:	0a000004 	beq	33ee0 <BusAccess::rawBusControlClockEnable(bool)+0x1f4>
   33ecc:	e5903230 	ldr	r3, [r0, #560]	; 0x230
   33ed0:	e1530007 	cmp	r3, r7
   33ed4:	11a04007 	movne	r4, r7
   33ed8:	13a08001 	movne	r8, #1
   33edc:	1a000011 	bne	33f28 <BusAccess::rawBusControlClockEnable(bool)+0x23c>
   33ee0:	e3a03000 	mov	r3, #0
   33ee4:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   33ee8:	ebffcb3b 	bl	26bdc <CLogger::Get()>
   33eec:	e5952230 	ldr	r2, [r5, #560]	; 0x230
   33ef0:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   33ef4:	e59f1358 	ldr	r1, [pc, #856]	; 34254 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   33ef8:	e58d2004 	str	r2, [sp, #4]
   33efc:	e58d3000 	str	r3, [sp]
   33f00:	e3a02001 	mov	r2, #1
   33f04:	e59f3378 	ldr	r3, [pc, #888]	; 34284 <BusAccess::rawBusControlClockEnable(bool)+0x598>
   33f08:	ebffca70 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33f0c:	ea00003d 	b	34008 <BusAccess::rawBusControlClockEnable(bool)+0x31c>
   33f10:	e2844001 	add	r4, r4, #1
   33f14:	e1a00008 	mov	r0, r8
   33f18:	ebffe80f 	bl	2df5c <microsDelay>
   33f1c:	e3540064 	cmp	r4, #100	; 0x64
   33f20:	e59670a0 	ldr	r7, [r6, #160]	; 0xa0
   33f24:	0a000002 	beq	33f34 <BusAccess::rawBusControlClockEnable(bool)+0x248>
   33f28:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   33f2c:	e3130080 	tst	r3, #128	; 0x80
   33f30:	1afffff6 	bne	33f10 <BusAccess::rawBusControlClockEnable(bool)+0x224>
   33f34:	e5d51230 	ldrb	r1, [r5, #560]	; 0x230
   33f38:	e5d5022c 	ldrb	r0, [r5, #556]	; 0x22c
   33f3c:	eb0029d1 	bl	3e688 <pinMode>
   33f40:	e5950224 	ldr	r0, [r5, #548]	; 0x224
   33f44:	e59f2314 	ldr	r2, [pc, #788]	; 34260 <BusAccess::rawBusControlClockEnable(bool)+0x574>
   33f48:	e59f131c 	ldr	r1, [pc, #796]	; 3426c <BusAccess::rawBusControlClockEnable(bool)+0x580>
   33f4c:	e1500002 	cmp	r0, r2
   33f50:	e59f2318 	ldr	r2, [pc, #792]	; 34270 <BusAccess::rawBusControlClockEnable(bool)+0x584>
   33f54:	e59f3308 	ldr	r3, [pc, #776]	; 34264 <BusAccess::rawBusControlClockEnable(bool)+0x578>
   33f58:	81a03001 	movhi	r3, r1
   33f5c:	e59f8304 	ldr	r8, [pc, #772]	; 34268 <BusAccess::rawBusControlClockEnable(bool)+0x57c>
   33f60:	81a08002 	movhi	r8, r2
   33f64:	e59fa2ec 	ldr	sl, [pc, #748]	; 34258 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   33f68:	e59f2308 	ldr	r2, [pc, #776]	; 34278 <BusAccess::rawBusControlClockEnable(bool)+0x58c>
   33f6c:	e58a3070 	str	r3, [sl, #112]	; 0x70
   33f70:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33f74:	e59f92f8 	ldr	r9, [pc, #760]	; 34274 <BusAccess::rawBusControlClockEnable(bool)+0x588>
   33f78:	81a09002 	movhi	r9, r2
   33f7c:	ebffe7f6 	bl	2df5c <microsDelay>
   33f80:	e5951224 	ldr	r1, [r5, #548]	; 0x224
   33f84:	e1a00008 	mov	r0, r8
   33f88:	eb002771 	bl	3dd54 <__aeabi_uidiv>
   33f8c:	e59f62e8 	ldr	r6, [pc, #744]	; 3427c <BusAccess::rawBusControlClockEnable(bool)+0x590>
   33f90:	e1500006 	cmp	r0, r6
   33f94:	31a06000 	movcc	r6, r0
   33f98:	e1a03606 	lsl	r3, r6, #12
   33f9c:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   33fa0:	e58a3074 	str	r3, [sl, #116]	; 0x74
   33fa4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33fa8:	ebffe7eb 	bl	2df5c <microsDelay>
   33fac:	e3a03001 	mov	r3, #1
   33fb0:	e58a9070 	str	r9, [sl, #112]	; 0x70
   33fb4:	e1a01006 	mov	r1, r6
   33fb8:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   33fbc:	e1a00008 	mov	r0, r8
   33fc0:	eb002763 	bl	3dd54 <__aeabi_uidiv>
   33fc4:	e1a09000 	mov	r9, r0
   33fc8:	ebffcb03 	bl	26bdc <CLogger::Get()>
   33fcc:	e5951230 	ldr	r1, [r5, #560]	; 0x230
   33fd0:	e595222c 	ldr	r2, [r5, #556]	; 0x22c
   33fd4:	e58d600c 	str	r6, [sp, #12]
   33fd8:	e5953224 	ldr	r3, [r5, #548]	; 0x224
   33fdc:	e58d1014 	str	r1, [sp, #20]
   33fe0:	e58d2010 	str	r2, [sp, #16]
   33fe4:	e58d3004 	str	r3, [sp, #4]
   33fe8:	e58d8008 	str	r8, [sp, #8]
   33fec:	e58d9000 	str	r9, [sp]
   33ff0:	e58d701c 	str	r7, [sp, #28]
   33ff4:	e58d4018 	str	r4, [sp, #24]
   33ff8:	e59f3280 	ldr	r3, [pc, #640]	; 34280 <BusAccess::rawBusControlClockEnable(bool)+0x594>
   33ffc:	e3a02003 	mov	r2, #3
   34000:	e59f124c 	ldr	r1, [pc, #588]	; 34254 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   34004:	ebffca31 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34008:	e5d57228 	ldrb	r7, [r5, #552]	; 0x228
   3400c:	ebffcaf2 	bl	26bdc <CLogger::Get()>
   34010:	e59f3234 	ldr	r3, [pc, #564]	; 3424c <BusAccess::rawBusControlClockEnable(bool)+0x560>
   34014:	e3a02004 	mov	r2, #4
   34018:	e88d0088 	stm	sp, {r3, r7}
   3401c:	e59f1230 	ldr	r1, [pc, #560]	; 34254 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   34020:	e59f3228 	ldr	r3, [pc, #552]	; 34250 <BusAccess::rawBusControlClockEnable(bool)+0x564>
   34024:	ebffca29 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34028:	e5d53228 	ldrb	r3, [r5, #552]	; 0x228
   3402c:	e3530000 	cmp	r3, #0
   34030:	1a00006f 	bne	341f4 <BusAccess::rawBusControlClockEnable(bool)+0x508>
   34034:	e59f3210 	ldr	r3, [pc, #528]	; 3424c <BusAccess::rawBusControlClockEnable(bool)+0x560>
   34038:	e3570000 	cmp	r7, #0
   3403c:	e5853224 	str	r3, [r5, #548]	; 0x224
   34040:	0affff40 	beq	33d48 <BusAccess::rawBusControlClockEnable(bool)+0x5c>
   34044:	e59f620c 	ldr	r6, [pc, #524]	; 34258 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   34048:	e59f320c 	ldr	r3, [pc, #524]	; 3425c <BusAccess::rawBusControlClockEnable(bool)+0x570>
   3404c:	e5962070 	ldr	r2, [r6, #112]	; 0x70
   34050:	e0033002 	and	r3, r3, r2
   34054:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   34058:	e5863070 	str	r3, [r6, #112]	; 0x70
   3405c:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   34060:	e3730001 	cmn	r3, #1
   34064:	0a00006b 	beq	34218 <BusAccess::rawBusControlClockEnable(bool)+0x52c>
   34068:	e5953230 	ldr	r3, [r5, #560]	; 0x230
   3406c:	e3530000 	cmp	r3, #0
   34070:	0a000068 	beq	34218 <BusAccess::rawBusControlClockEnable(bool)+0x52c>
   34074:	e3a08000 	mov	r8, #0
   34078:	e3a07001 	mov	r7, #1
   3407c:	e1a04008 	mov	r4, r8
   34080:	ea000005 	b	3409c <BusAccess::rawBusControlClockEnable(bool)+0x3b0>
   34084:	e2844001 	add	r4, r4, #1
   34088:	e1a00007 	mov	r0, r7
   3408c:	ebffe7b2 	bl	2df5c <microsDelay>
   34090:	e3540064 	cmp	r4, #100	; 0x64
   34094:	e59680a0 	ldr	r8, [r6, #160]	; 0xa0
   34098:	0a000002 	beq	340a8 <BusAccess::rawBusControlClockEnable(bool)+0x3bc>
   3409c:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   340a0:	e3130080 	tst	r3, #128	; 0x80
   340a4:	1afffff6 	bne	34084 <BusAccess::rawBusControlClockEnable(bool)+0x398>
   340a8:	e5d51230 	ldrb	r1, [r5, #560]	; 0x230
   340ac:	e5d5022c 	ldrb	r0, [r5, #556]	; 0x22c
   340b0:	eb002974 	bl	3e688 <pinMode>
   340b4:	e5950224 	ldr	r0, [r5, #548]	; 0x224
   340b8:	e59f21a0 	ldr	r2, [pc, #416]	; 34260 <BusAccess::rawBusControlClockEnable(bool)+0x574>
   340bc:	e59f11a0 	ldr	r1, [pc, #416]	; 34264 <BusAccess::rawBusControlClockEnable(bool)+0x578>
   340c0:	e1500002 	cmp	r0, r2
   340c4:	e59f219c 	ldr	r2, [pc, #412]	; 34268 <BusAccess::rawBusControlClockEnable(bool)+0x57c>
   340c8:	e59f319c 	ldr	r3, [pc, #412]	; 3426c <BusAccess::rawBusControlClockEnable(bool)+0x580>
   340cc:	91a03001 	movls	r3, r1
   340d0:	e59f7198 	ldr	r7, [pc, #408]	; 34270 <BusAccess::rawBusControlClockEnable(bool)+0x584>
   340d4:	91a07002 	movls	r7, r2
   340d8:	e59f9178 	ldr	r9, [pc, #376]	; 34258 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   340dc:	e59f2190 	ldr	r2, [pc, #400]	; 34274 <BusAccess::rawBusControlClockEnable(bool)+0x588>
   340e0:	e5893070 	str	r3, [r9, #112]	; 0x70
   340e4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   340e8:	e59fa188 	ldr	sl, [pc, #392]	; 34278 <BusAccess::rawBusControlClockEnable(bool)+0x58c>
   340ec:	91a0a002 	movls	sl, r2
   340f0:	ebffe799 	bl	2df5c <microsDelay>
   340f4:	e5951224 	ldr	r1, [r5, #548]	; 0x224
   340f8:	e1a00007 	mov	r0, r7
   340fc:	eb002714 	bl	3dd54 <__aeabi_uidiv>
   34100:	e59f6174 	ldr	r6, [pc, #372]	; 3427c <BusAccess::rawBusControlClockEnable(bool)+0x590>
   34104:	e1500006 	cmp	r0, r6
   34108:	31a06000 	movcc	r6, r0
   3410c:	e1a03606 	lsl	r3, r6, #12
   34110:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   34114:	e5893074 	str	r3, [r9, #116]	; 0x74
   34118:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   3411c:	ebffe78e 	bl	2df5c <microsDelay>
   34120:	e3a03001 	mov	r3, #1
   34124:	e589a070 	str	sl, [r9, #112]	; 0x70
   34128:	e1a01006 	mov	r1, r6
   3412c:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   34130:	e1a00007 	mov	r0, r7
   34134:	eb002706 	bl	3dd54 <__aeabi_uidiv>
   34138:	e1a09000 	mov	r9, r0
   3413c:	ebffcaa6 	bl	26bdc <CLogger::Get()>
   34140:	e5951230 	ldr	r1, [r5, #560]	; 0x230
   34144:	e595222c 	ldr	r2, [r5, #556]	; 0x22c
   34148:	e58d600c 	str	r6, [sp, #12]
   3414c:	e5953224 	ldr	r3, [r5, #548]	; 0x224
   34150:	e58d1014 	str	r1, [sp, #20]
   34154:	e58d2010 	str	r2, [sp, #16]
   34158:	e58d3004 	str	r3, [sp, #4]
   3415c:	e58d7008 	str	r7, [sp, #8]
   34160:	e59f3118 	ldr	r3, [pc, #280]	; 34280 <BusAccess::rawBusControlClockEnable(bool)+0x594>
   34164:	e58d9000 	str	r9, [sp]
   34168:	e58d801c 	str	r8, [sp, #28]
   3416c:	e58d4018 	str	r4, [sp, #24]
   34170:	e3a02003 	mov	r2, #3
   34174:	e59f10d8 	ldr	r1, [pc, #216]	; 34254 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   34178:	ebffc9d4 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3417c:	e5d53228 	ldrb	r3, [r5, #552]	; 0x228
   34180:	e3530000 	cmp	r3, #0
   34184:	0afffeef 	beq	33d48 <BusAccess::rawBusControlClockEnable(bool)+0x5c>
   34188:	eaffff3d 	b	33e84 <BusAccess::rawBusControlClockEnable(bool)+0x198>
   3418c:	e5d03228 	ldrb	r3, [r0, #552]	; 0x228
   34190:	e3530000 	cmp	r3, #0
   34194:	0a000006 	beq	341b4 <BusAccess::rawBusControlClockEnable(bool)+0x4c8>
   34198:	e59f20b8 	ldr	r2, [pc, #184]	; 34258 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   3419c:	e59f30b8 	ldr	r3, [pc, #184]	; 3425c <BusAccess::rawBusControlClockEnable(bool)+0x570>
   341a0:	e592c070 	ldr	ip, [r2, #112]	; 0x70
   341a4:	e003300c 	and	r3, r3, ip
   341a8:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   341ac:	e5823070 	str	r3, [r2, #112]	; 0x70
   341b0:	e5c01228 	strb	r1, [r0, #552]	; 0x228
   341b4:	e3a01001 	mov	r1, #1
   341b8:	e3a00004 	mov	r0, #4
   341bc:	ea002931 	b	3e688 <pinMode>
   341c0:	e3a03000 	mov	r3, #0
   341c4:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   341c8:	ebffca83 	bl	26bdc <CLogger::Get()>
   341cc:	e5952230 	ldr	r2, [r5, #560]	; 0x230
   341d0:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   341d4:	e59f1078 	ldr	r1, [pc, #120]	; 34254 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   341d8:	e58d2004 	str	r2, [sp, #4]
   341dc:	e58d3000 	str	r3, [sp]
   341e0:	e3a02001 	mov	r2, #1
   341e4:	e59f3098 	ldr	r3, [pc, #152]	; 34284 <BusAccess::rawBusControlClockEnable(bool)+0x598>
   341e8:	ebffc9b8 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   341ec:	e28dd020 	add	sp, sp, #32
   341f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   341f4:	e3a01000 	mov	r1, #0
   341f8:	e59f2058 	ldr	r2, [pc, #88]	; 34258 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   341fc:	e59f3058 	ldr	r3, [pc, #88]	; 3425c <BusAccess::rawBusControlClockEnable(bool)+0x570>
   34200:	e5920070 	ldr	r0, [r2, #112]	; 0x70
   34204:	e0033000 	and	r3, r3, r0
   34208:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   3420c:	e5823070 	str	r3, [r2, #112]	; 0x70
   34210:	e5c51228 	strb	r1, [r5, #552]	; 0x228
   34214:	eaffff86 	b	34034 <BusAccess::rawBusControlClockEnable(bool)+0x348>
   34218:	e3a03000 	mov	r3, #0
   3421c:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   34220:	ebffca6d 	bl	26bdc <CLogger::Get()>
   34224:	e5952230 	ldr	r2, [r5, #560]	; 0x230
   34228:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   3422c:	e59f1020 	ldr	r1, [pc, #32]	; 34254 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   34230:	e58d2004 	str	r2, [sp, #4]
   34234:	e58d3000 	str	r3, [sp]
   34238:	e3a02001 	mov	r2, #1
   3423c:	e59f3040 	ldr	r3, [pc, #64]	; 34284 <BusAccess::rawBusControlClockEnable(bool)+0x598>
   34240:	ebffc9a2 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34244:	e5d53228 	ldrb	r3, [r5, #552]	; 0x228
   34248:	eaffffcc 	b	34180 <BusAccess::rawBusControlClockEnable(bool)+0x494>
   3424c:	000f4240 	.word	0x000f4240
   34250:	000469bc 	.word	0x000469bc
   34254:	0004695c 	.word	0x0004695c
   34258:	20101000 	.word	0x20101000
   3425c:	00000f0f 	.word	0x00000f0f
   34260:	0003d08f 	.word	0x0003d08f
   34264:	5a000001 	.word	0x5a000001
   34268:	0124f800 	.word	0x0124f800
   3426c:	5a000006 	.word	0x5a000006
   34270:	1dcd6500 	.word	0x1dcd6500
   34274:	5a000011 	.word	0x5a000011
   34278:	5a000016 	.word	0x5a000016
   3427c:	00000fff 	.word	0x00000fff
   34280:	00046968 	.word	0x00046968
   34284:	0004693c 	.word	0x0004693c

00034288 <BusAccess::rawBusControlTakeBus()>:
   34288:	e92d4010 	push	{r4, lr}
   3428c:	ebfffd32 	bl	3375c <BusAccess::controlRequestAndTake()>
   34290:	e16f0f10 	clz	r0, r0
   34294:	e1a002a0 	lsr	r0, r0, #5
   34298:	e8bd8010 	pop	{r4, pc}

0003429c <BusAccess::rawBusControlReleaseBus()>:
   3429c:	eafffc08 	b	332c4 <BusAccess::controlRelease()>

000342a0 <BusAccess::rawBusControlSetAddress(unsigned long)>:
   342a0:	eafff9ba 	b	32990 <BusAccess::addrSet(unsigned int)>

000342a4 <BusAccess::rawBusControlSetData(unsigned long)>:
   342a4:	e1a01a01 	lsl	r1, r1, #20
   342a8:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   342ac:	e1e03001 	mvn	r3, r1
   342b0:	e92d4070 	push	{r4, r5, r6, lr}
   342b4:	e3a05d39 	mov	r5, #3648	; 0xe40
   342b8:	e3a0ec02 	mov	lr, #512	; 0x200
   342bc:	e59f4064 	ldr	r4, [pc, #100]	; 34328 <BusAccess::rawBusControlSetData(unsigned long)+0x84>
   342c0:	e59f2064 	ldr	r2, [pc, #100]	; 3432c <BusAccess::rawBusControlSetData(unsigned long)+0x88>
   342c4:	e594c008 	ldr	ip, [r4, #8]
   342c8:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
   342cc:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   342d0:	e18c2002 	orr	r2, ip, r2
   342d4:	e5842008 	str	r2, [r4, #8]
   342d8:	e584101c 	str	r1, [r4, #28]
   342dc:	e5843028 	str	r3, [r4, #40]	; 0x28
   342e0:	e5845028 	str	r5, [r4, #40]	; 0x28
   342e4:	e584e01c 	str	lr, [r4, #28]
   342e8:	e5903000 	ldr	r3, [r0]
   342ec:	e3530011 	cmp	r3, #17
   342f0:	0a000007 	beq	34314 <BusAccess::rawBusControlSetData(unsigned long)+0x70>
   342f4:	e3a05801 	mov	r5, #65536	; 0x10000
   342f8:	e3a0000a 	mov	r0, #10
   342fc:	e5845028 	str	r5, [r4, #40]	; 0x28
   34300:	eb00294d 	bl	3e83c <lowlev_cycleDelay>
   34304:	e3a03c0e 	mov	r3, #3584	; 0xe00
   34308:	e584501c 	str	r5, [r4, #28]
   3430c:	e5843028 	str	r3, [r4, #40]	; 0x28
   34310:	e8bd8070 	pop	{r4, r5, r6, pc}
   34314:	e3a0000a 	mov	r0, #10
   34318:	eb002947 	bl	3e83c <lowlev_cycleDelay>
   3431c:	e3a03c0e 	mov	r3, #3584	; 0xe00
   34320:	e5843028 	str	r3, [r4, #40]	; 0x28
   34324:	e8bd8070 	pop	{r4, r5, r6, pc}
   34328:	20200000 	.word	0x20200000
   3432c:	00249249 	.word	0x00249249

00034330 <BusAccess::rawBusControlReadRaw()>:
   34330:	e59f3004 	ldr	r3, [pc, #4]	; 3433c <BusAccess::rawBusControlReadRaw()+0xc>
   34334:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   34338:	e12fff1e 	bx	lr
   3433c:	20200000 	.word	0x20200000

00034340 <BusAccess::rawBusControlReadCtrl()>:
   34340:	eafff82d 	b	323fc <BusAccess::controlBusRead()>

00034344 <BusAccess::rawBusControlReadAll(unsigned long&, unsigned long&, unsigned long&)>:
   34344:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34348:	e1a06001 	mov	r6, r1
   3434c:	e1a05002 	mov	r5, r2
   34350:	e1a07003 	mov	r7, r3
   34354:	e1a04000 	mov	r4, r0
   34358:	ebfff827 	bl	323fc <BusAccess::controlBusRead()>
   3435c:	e1a02007 	mov	r2, r7
   34360:	e5860000 	str	r0, [r6]
   34364:	e1a01005 	mov	r1, r5
   34368:	e1a00004 	mov	r0, r4
   3436c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   34370:	eafff86e 	b	32530 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>

00034374 <BusAccess::rawBusControlSetPin(unsigned long, bool)>:
   34374:	e6ef0071 	uxtb	r0, r1
   34378:	e1a01002 	mov	r1, r2
   3437c:	ea002901 	b	3e788 <digitalWrite>

00034380 <BusAccess::rawBusControlGetPin(unsigned long)>:
   34380:	e92d4010 	push	{r4, lr}
   34384:	e6ef0071 	uxtb	r0, r1
   34388:	eb002914 	bl	3e7e0 <digitalRead>
   3438c:	e2900000 	adds	r0, r0, #0
   34390:	13a00001 	movne	r0, #1
   34394:	e8bd8010 	pop	{r4, pc}

00034398 <BusAccess::rawBusControlReadPIB()>:
   34398:	e59f3018 	ldr	r3, [pc, #24]	; 343b8 <BusAccess::rawBusControlReadPIB()+0x20>
   3439c:	e5932008 	ldr	r2, [r3, #8]
   343a0:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   343a4:	e5832008 	str	r2, [r3, #8]
   343a8:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   343ac:	e1a00a20 	lsr	r0, r0, #20
   343b0:	e6ef0070 	uxtb	r0, r0
   343b4:	e12fff1e 	bx	lr
   343b8:	20200000 	.word	0x20200000

000343bc <BusAccess::rawBusControlWritePIB(unsigned long)>:
   343bc:	e1a01a01 	lsl	r1, r1, #20
   343c0:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   343c4:	e1e02001 	mvn	r2, r1
   343c8:	e59f3020 	ldr	r3, [pc, #32]	; 343f0 <BusAccess::rawBusControlWritePIB(unsigned long)+0x34>
   343cc:	e59f0020 	ldr	r0, [pc, #32]	; 343f4 <BusAccess::rawBusControlWritePIB(unsigned long)+0x38>
   343d0:	e593c008 	ldr	ip, [r3, #8]
   343d4:	e20226ff 	and	r2, r2, #267386880	; 0xff00000
   343d8:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   343dc:	e18c0000 	orr	r0, ip, r0
   343e0:	e5830008 	str	r0, [r3, #8]
   343e4:	e583101c 	str	r1, [r3, #28]
   343e8:	e5832028 	str	r2, [r3, #40]	; 0x28
   343ec:	e12fff1e 	bx	lr
   343f0:	20200000 	.word	0x20200000
   343f4:	00249249 	.word	0x00249249

000343f8 <BusAccess::rawBusControlMuxSet(unsigned long)>:
   343f8:	e5903000 	ldr	r3, [r0]
   343fc:	e3530011 	cmp	r3, #17
   34400:	0a000008 	beq	34428 <BusAccess::rawBusControlMuxSet(unsigned long)+0x30>
   34404:	e3a02801 	mov	r2, #65536	; 0x10000
   34408:	e3a00c0e 	mov	r0, #3584	; 0xe00
   3440c:	e59f302c 	ldr	r3, [pc, #44]	; 34440 <BusAccess::rawBusControlMuxSet(unsigned long)+0x48>
   34410:	e1a01481 	lsl	r1, r1, #9
   34414:	e583201c 	str	r2, [r3, #28]
   34418:	e5830028 	str	r0, [r3, #40]	; 0x28
   3441c:	e583101c 	str	r1, [r3, #28]
   34420:	e5832028 	str	r2, [r3, #40]	; 0x28
   34424:	e12fff1e 	bx	lr
   34428:	e3a02c0e 	mov	r2, #3584	; 0xe00
   3442c:	e59f300c 	ldr	r3, [pc, #12]	; 34440 <BusAccess::rawBusControlMuxSet(unsigned long)+0x48>
   34430:	e1a01481 	lsl	r1, r1, #9
   34434:	e5832028 	str	r2, [r3, #40]	; 0x28
   34438:	e583101c 	str	r1, [r3, #28]
   3443c:	e12fff1e 	bx	lr
   34440:	20200000 	.word	0x20200000

00034444 <BusAccess::rawBusControlMuxClear()>:
   34444:	e5903000 	ldr	r3, [r0]
   34448:	e3530011 	cmp	r3, #17
   3444c:	03a02c0e 	moveq	r2, #3584	; 0xe00
   34450:	13a01801 	movne	r1, #65536	; 0x10000
   34454:	13a02c0e 	movne	r2, #3584	; 0xe00
   34458:	159f300c 	ldrne	r3, [pc, #12]	; 3446c <BusAccess::rawBusControlMuxClear()+0x28>
   3445c:	059f3008 	ldreq	r3, [pc, #8]	; 3446c <BusAccess::rawBusControlMuxClear()+0x28>
   34460:	1583101c 	strne	r1, [r3, #28]
   34464:	e5832028 	str	r2, [r3, #40]	; 0x28
   34468:	e12fff1e 	bx	lr
   3446c:	20200000 	.word	0x20200000

00034470 <BusAccess::formatCtrlBus(unsigned long, char*, int)>:
   34470:	e3530013 	cmp	r3, #19
   34474:	d12fff1e 	bxle	lr
   34478:	e1a0c001 	mov	ip, r1
   3447c:	e31c0004 	tst	ip, #4
   34480:	e1a01003 	mov	r1, r3
   34484:	13a0304d 	movne	r3, #77	; 0x4d
   34488:	03a0302e 	moveq	r3, #46	; 0x2e
   3448c:	e31c0008 	tst	ip, #8
   34490:	e92d4030 	push	{r4, r5, lr}
   34494:	13a05049 	movne	r5, #73	; 0x49
   34498:	03a0502e 	moveq	r5, #46	; 0x2e
   3449c:	e31c0001 	tst	ip, #1
   344a0:	13a04052 	movne	r4, #82	; 0x52
   344a4:	03a0402e 	moveq	r4, #46	; 0x2e
   344a8:	e31c0002 	tst	ip, #2
   344ac:	13a0e057 	movne	lr, #87	; 0x57
   344b0:	03a0e02e 	moveq	lr, #46	; 0x2e
   344b4:	e31c0010 	tst	ip, #16
   344b8:	e1a00002 	mov	r0, r2
   344bc:	13a02031 	movne	r2, #49	; 0x31
   344c0:	03a0202e 	moveq	r2, #46	; 0x2e
   344c4:	e24dd014 	sub	sp, sp, #20
   344c8:	e58d200c 	str	r2, [sp, #12]
   344cc:	e58d5000 	str	r5, [sp]
   344d0:	e98d4010 	stmib	sp, {r4, lr}
   344d4:	e59f2008 	ldr	r2, [pc, #8]	; 344e4 <BusAccess::formatCtrlBus(unsigned long, char*, int)+0x74>
   344d8:	ebffe749 	bl	2e204 <snprintf>
   344dc:	e28dd014 	add	sp, sp, #20
   344e0:	e8bd8030 	pop	{r4, r5, pc}
   344e4:	00046a20 	.word	0x00046a20

000344e8 <TargetProgrammer::TargetProgrammer()>:
   344e8:	e3a02000 	mov	r2, #0
   344ec:	e2803601 	add	r3, r0, #1048576	; 0x100000
   344f0:	e58320c4 	str	r2, [r3, #196]	; 0xc4
   344f4:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   344f8:	e58320bc 	str	r2, [r3, #188]	; 0xbc
   344fc:	e58320b8 	str	r2, [r3, #184]	; 0xb8
   34500:	e58320b4 	str	r2, [r3, #180]	; 0xb4
   34504:	e58320b0 	str	r2, [r3, #176]	; 0xb0
   34508:	e58320ac 	str	r2, [r3, #172]	; 0xac
   3450c:	e58320a8 	str	r2, [r3, #168]	; 0xa8
   34510:	e58320d8 	str	r2, [r3, #216]	; 0xd8
   34514:	e58320d4 	str	r2, [r3, #212]	; 0xd4
   34518:	e58320d0 	str	r2, [r3, #208]	; 0xd0
   3451c:	e58320cc 	str	r2, [r3, #204]	; 0xcc
   34520:	e58320c8 	str	r2, [r3, #200]	; 0xc8
   34524:	e58320ec 	str	r2, [r3, #236]	; 0xec
   34528:	e58320e8 	str	r2, [r3, #232]	; 0xe8
   3452c:	e58320e4 	str	r2, [r3, #228]	; 0xe4
   34530:	e58320e0 	str	r2, [r3, #224]	; 0xe0
   34534:	e58320dc 	str	r2, [r3, #220]	; 0xdc
   34538:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   3453c:	e5c320a4 	strb	r2, [r3, #164]	; 0xa4
   34540:	e12fff1e 	bx	lr

00034544 <TargetProgrammer::clear()>:
   34544:	e3a03000 	mov	r3, #0
   34548:	e2802601 	add	r2, r0, #1048576	; 0x100000
   3454c:	e5c230a4 	strb	r3, [r2, #164]	; 0xa4
   34550:	e58230a0 	str	r3, [r2, #160]	; 0xa0
   34554:	e1a01003 	mov	r1, r3
   34558:	e2823004 	add	r3, r2, #4
   3455c:	e28220a4 	add	r2, r2, #164	; 0xa4
   34560:	e4831008 	str	r1, [r3], #8
   34564:	e1530002 	cmp	r3, r2
   34568:	1afffffc 	bne	34560 <TargetProgrammer::clear()+0x1c>
   3456c:	e3a01000 	mov	r1, #0
   34570:	e240237f 	sub	r2, r0, #-67108863	; 0xfc000001
   34574:	e242263f 	sub	r2, r2, #66060288	; 0x3f00000
   34578:	e2403001 	sub	r3, r0, #1
   3457c:	e5e31001 	strb	r1, [r3, #1]!
   34580:	e1520003 	cmp	r2, r3
   34584:	1afffffc 	bne	3457c <TargetProgrammer::clear()+0x38>
   34588:	e12fff1e 	bx	lr

0003458c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>:
   3458c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34590:	e2807601 	add	r7, r0, #1048576	; 0x100000
   34594:	e59760a0 	ldr	r6, [r7, #160]	; 0xa0
   34598:	e3560000 	cmp	r6, #0
   3459c:	da000012 	ble	345ec <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x60>
   345a0:	e5975004 	ldr	r5, [r7, #4]
   345a4:	e597c000 	ldr	ip, [r7]
   345a8:	e085c00c 	add	ip, r5, ip
   345ac:	e151000c 	cmp	r1, ip
   345b0:	13a04000 	movne	r4, #0
   345b4:	1287c008 	addne	ip, r7, #8
   345b8:	1a000006 	bne	345d8 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x4c>
   345bc:	ea00001b 	b	34630 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xa4>
   345c0:	e59c5004 	ldr	r5, [ip, #4]
   345c4:	e59ce000 	ldr	lr, [ip]
   345c8:	e28cc008 	add	ip, ip, #8
   345cc:	e085e00e 	add	lr, r5, lr
   345d0:	e15e0001 	cmp	lr, r1
   345d4:	0a000016 	beq	34634 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xa8>
   345d8:	e2844001 	add	r4, r4, #1
   345dc:	e1540006 	cmp	r4, r6
   345e0:	1afffff6 	bne	345c0 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x34>
   345e4:	e3540013 	cmp	r4, #19
   345e8:	ca000017 	bgt	3464c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xc0>
   345ec:	e080c186 	add	ip, r0, r6, lsl #3
   345f0:	e28cc601 	add	ip, ip, #1048576	; 0x100000
   345f4:	e2866001 	add	r6, r6, #1
   345f8:	e88c000a 	stm	ip, {r1, r3}
   345fc:	e58760a0 	str	r6, [r7, #160]	; 0xa0
   34600:	e3530000 	cmp	r3, #0
   34604:	159fc058 	ldrne	ip, [pc, #88]	; 34664 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xd8>
   34608:	10813003 	addne	r3, r1, r3
   3460c:	0a00000d 	beq	34648 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xbc>
   34610:	e151000c 	cmp	r1, ip
   34614:	95d2e000 	ldrbls	lr, [r2]
   34618:	e2822001 	add	r2, r2, #1
   3461c:	97c0e001 	strbls	lr, [r0, r1]
   34620:	e2811001 	add	r1, r1, #1
   34624:	e1510003 	cmp	r1, r3
   34628:	1afffff8 	bne	34610 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x84>
   3462c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34630:	e3a04000 	mov	r4, #0
   34634:	e2844802 	add	r4, r4, #131072	; 0x20000
   34638:	e0804184 	add	r4, r0, r4, lsl #3
   3463c:	e0835005 	add	r5, r3, r5
   34640:	e5845004 	str	r5, [r4, #4]
   34644:	eaffffed 	b	34600 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x74>
   34648:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3464c:	ebffc962 	bl	26bdc <CLogger::Get()>
   34650:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   34654:	e59f300c 	ldr	r3, [pc, #12]	; 34668 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xdc>
   34658:	e3a02004 	mov	r2, #4
   3465c:	e59f1008 	ldr	r1, [pc, #8]	; 3466c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xe0>
   34660:	eaffc89a 	b	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34664:	000fffff 	.word	0x000fffff
   34668:	00046a40 	.word	0x00046a40
   3466c:	00046a2c 	.word	0x00046a2c

00034670 <TargetProgrammer::addMemoryBlockStatic(unsigned long, unsigned char const*, unsigned long, void*)>:
   34670:	e253c000 	subs	ip, r3, #0
   34674:	012fff1e 	bxeq	lr
   34678:	e1a03002 	mov	r3, r2
   3467c:	e1a02001 	mov	r2, r1
   34680:	e1a01000 	mov	r1, r0
   34684:	e1a0000c 	mov	r0, ip
   34688:	eaffffbf 	b	3458c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>

0003468c <TargetProgrammer::numMemoryBlocks()>:
   3468c:	e2800601 	add	r0, r0, #1048576	; 0x100000
   34690:	e59000a0 	ldr	r0, [r0, #160]	; 0xa0
   34694:	e12fff1e 	bx	lr

00034698 <TargetProgrammer::getMemoryBlock(int)>:
   34698:	e2811802 	add	r1, r1, #131072	; 0x20000
   3469c:	e0800181 	add	r0, r0, r1, lsl #3
   346a0:	e12fff1e 	bx	lr

000346a4 <TargetProgrammer::getMemoryImagePtr()>:
   346a4:	e12fff1e 	bx	lr

000346a8 <TargetProgrammer::getMemoryImageSize()>:
   346a8:	e3a00601 	mov	r0, #1048576	; 0x100000
   346ac:	e12fff1e 	bx	lr

000346b0 <TargetProgrammer::setTargetRegisters(Z80Registers const&)>:
   346b0:	e92d4030 	push	{r4, r5, lr}
   346b4:	e2805601 	add	r5, r0, #1048576	; 0x100000
   346b8:	e24dd00c 	sub	sp, sp, #12
   346bc:	e3a02048 	mov	r2, #72	; 0x48
   346c0:	e28500a8 	add	r0, r5, #168	; 0xa8
   346c4:	e1a04001 	mov	r4, r1
   346c8:	ebffd894 	bl	2a920 <memcpy>
   346cc:	e3a03001 	mov	r3, #1
   346d0:	e5c530a4 	strb	r3, [r5, #164]	; 0xa4
   346d4:	ebffc940 	bl	26bdc <CLogger::Get()>
   346d8:	e5942004 	ldr	r2, [r4, #4]
   346dc:	e5943000 	ldr	r3, [r4]
   346e0:	e59f1018 	ldr	r1, [pc, #24]	; 34700 <TargetProgrammer::setTargetRegisters(Z80Registers const&)+0x50>
   346e4:	e58d2004 	str	r2, [sp, #4]
   346e8:	e58d3000 	str	r3, [sp]
   346ec:	e3a02004 	mov	r2, #4
   346f0:	e59f300c 	ldr	r3, [pc, #12]	; 34704 <TargetProgrammer::setTargetRegisters(Z80Registers const&)+0x54>
   346f4:	ebffc875 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   346f8:	e28dd00c 	add	sp, sp, #12
   346fc:	e8bd8030 	pop	{r4, r5, pc}
   34700:	00046a2c 	.word	0x00046a2c
   34704:	00046a60 	.word	0x00046a60

00034708 <TargetProgrammer::setTargetRegistersStatic(Z80Registers const&, void*)>:
   34708:	e2513000 	subs	r3, r1, #0
   3470c:	012fff1e 	bxeq	lr
   34710:	e1a01000 	mov	r1, r0
   34714:	e1a00003 	mov	r0, r3
   34718:	eaffffe4 	b	346b0 <TargetProgrammer::setTargetRegisters(Z80Registers const&)>

0003471c <TargetProgrammer::areRegistersValid()>:
   3471c:	e2800601 	add	r0, r0, #1048576	; 0x100000
   34720:	e5d000a4 	ldrb	r0, [r0, #164]	; 0xa4
   34724:	e12fff1e 	bx	lr

00034728 <TargetProgrammer::getTargetRegs(Z80Registers&)>:
   34728:	e92d4010 	push	{r4, lr}
   3472c:	e1a04001 	mov	r4, r1
   34730:	e2801601 	add	r1, r0, #1048576	; 0x100000
   34734:	e24dd008 	sub	sp, sp, #8
   34738:	e28110a8 	add	r1, r1, #168	; 0xa8
   3473c:	e3a02048 	mov	r2, #72	; 0x48
   34740:	e1a00004 	mov	r0, r4
   34744:	ebffd875 	bl	2a920 <memcpy>
   34748:	ebffc923 	bl	26bdc <CLogger::Get()>
   3474c:	e5942000 	ldr	r2, [r4]
   34750:	e59f3014 	ldr	r3, [pc, #20]	; 3476c <TargetProgrammer::getTargetRegs(Z80Registers&)+0x44>
   34754:	e58d2000 	str	r2, [sp]
   34758:	e59f1010 	ldr	r1, [pc, #16]	; 34770 <TargetProgrammer::getTargetRegs(Z80Registers&)+0x48>
   3475c:	e3a02004 	mov	r2, #4
   34760:	ebffc85a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34764:	e28dd008 	add	sp, sp, #8
   34768:	e8bd8010 	pop	{r4, pc}
   3476c:	00046a80 	.word	0x00046a80
   34770:	00046a2c 	.word	0x00046a2c

00034774 <HwManager::HwManager(CommandHandler&, BusAccess&)>:
   34774:	e3a0c000 	mov	ip, #0
   34778:	e92d4010 	push	{r4, lr}
   3477c:	e3e0e000 	mvn	lr, #0
   34780:	e59f4024 	ldr	r4, [pc, #36]	; 347ac <HwManager::HwManager(CommandHandler&, BusAccess&)+0x38>
   34784:	e8800006 	stm	r0, {r1, r2}
   34788:	e580e034 	str	lr, [r0, #52]	; 0x34
   3478c:	e5840000 	str	r0, [r4]
   34790:	e580e038 	str	lr, [r0, #56]	; 0x38
   34794:	e5c0c03c 	strb	ip, [r0, #60]	; 0x3c
   34798:	e5c0c03e 	strb	ip, [r0, #62]	; 0x3e
   3479c:	e5c0c03f 	strb	ip, [r0, #63]	; 0x3f
   347a0:	e5c0c03d 	strb	ip, [r0, #61]	; 0x3d
   347a4:	e580c030 	str	ip, [r0, #48]	; 0x30
   347a8:	e8bd8010 	pop	{r4, pc}
   347ac:	0004e558 	.word	0x0004e558

000347b0 <HwManager::init()>:
   347b0:	e92d4010 	push	{r4, lr}
   347b4:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   347b8:	e24dd030 	sub	sp, sp, #48	; 0x30
   347bc:	e3530000 	cmp	r3, #0
   347c0:	e1a04000 	mov	r4, r0
   347c4:	ba000016 	blt	34824 <HwManager::init()+0x74>
   347c8:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   347cc:	e3530000 	cmp	r3, #0
   347d0:	ba000001 	blt	347dc <HwManager::init()+0x2c>
   347d4:	e28dd030 	add	sp, sp, #48	; 0x30
   347d8:	e8bd8010 	pop	{r4, pc}
   347dc:	e3a03000 	mov	r3, #0
   347e0:	e5940000 	ldr	r0, [r4]
   347e4:	e1a01004 	mov	r1, r4
   347e8:	e58d3004 	str	r3, [sp, #4]
   347ec:	e58d3000 	str	r3, [sp]
   347f0:	e3a02001 	mov	r2, #1
   347f4:	e59f307c 	ldr	r3, [pc, #124]	; 34878 <HwManager::init()+0xc8>
   347f8:	ebffecce 	bl	2fb38 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   347fc:	e5840038 	str	r0, [r4, #56]	; 0x38
   34800:	ebffc8f5 	bl	26bdc <CLogger::Get()>
   34804:	e5942038 	ldr	r2, [r4, #56]	; 0x38
   34808:	e59f306c 	ldr	r3, [pc, #108]	; 3487c <HwManager::init()+0xcc>
   3480c:	e58d2000 	str	r2, [sp]
   34810:	e59f1068 	ldr	r1, [pc, #104]	; 34880 <HwManager::init()+0xd0>
   34814:	e3a02004 	mov	r2, #4
   34818:	ebffc82c 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3481c:	e28dd030 	add	sp, sp, #48	; 0x30
   34820:	e8bd8010 	pop	{r4, pc}
   34824:	e3a03000 	mov	r3, #0
   34828:	e3a02004 	mov	r2, #4
   3482c:	e5900004 	ldr	r0, [r0, #4]
   34830:	e3a01001 	mov	r1, #1
   34834:	e58d3028 	str	r3, [sp, #40]	; 0x28
   34838:	e58d3020 	str	r3, [sp, #32]
   3483c:	e58d301c 	str	r3, [sp, #28]
   34840:	e58d3018 	str	r3, [sp, #24]
   34844:	e58d3014 	str	r3, [sp, #20]
   34848:	e58d3010 	str	r3, [sp, #16]
   3484c:	e58d300c 	str	r3, [sp, #12]
   34850:	e58d3008 	str	r3, [sp, #8]
   34854:	e58d3004 	str	r3, [sp, #4]
   34858:	e58d3000 	str	r3, [sp]
   3485c:	e58d2024 	str	r2, [sp, #36]	; 0x24
   34860:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   34864:	e59f3018 	ldr	r3, [pc, #24]	; 34884 <HwManager::init()+0xd4>
   34868:	e59f2018 	ldr	r2, [pc, #24]	; 34888 <HwManager::init()+0xd8>
   3486c:	ebfffa5e 	bl	331ec <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   34870:	e5840034 	str	r0, [r4, #52]	; 0x34
   34874:	eaffffd3 	b	347c8 <HwManager::init()+0x18>
   34878:	00035680 	.word	0x00035680
   3487c:	00046aa4 	.word	0x00046aa4
   34880:	00046a98 	.word	0x00046a98
   34884:	00035194 	.word	0x00035194
   34888:	0003525c 	.word	0x0003525c

0003488c <HwManager::service()>:
   3488c:	e12fff1e 	bx	lr

00034890 <HwManager::addHardwareElementStatic(HwBase*)>:
   34890:	e59f301c 	ldr	r3, [pc, #28]	; 348b4 <HwManager::addHardwareElementStatic(HwBase*)+0x24>
   34894:	e5932000 	ldr	r2, [r3]
   34898:	e5923030 	ldr	r3, [r2, #48]	; 0x30
   3489c:	e3530009 	cmp	r3, #9
   348a0:	d2831001 	addle	r1, r3, #1
   348a4:	d2833002 	addle	r3, r3, #2
   348a8:	d5821030 	strle	r1, [r2, #48]	; 0x30
   348ac:	d7820103 	strle	r0, [r2, r3, lsl #2]
   348b0:	e12fff1e 	bx	lr
   348b4:	0004e558 	.word	0x0004e558

000348b8 <HwManager::setMemoryEmulationMode(bool)>:
   348b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   348bc:	e1a08001 	mov	r8, r1
   348c0:	e24dd008 	sub	sp, sp, #8
   348c4:	e1a06000 	mov	r6, r0
   348c8:	ebffc8c3 	bl	26bdc <CLogger::Get()>
   348cc:	e59f20b0 	ldr	r2, [pc, #176]	; 34984 <HwManager::setMemoryEmulationMode(bool)+0xcc>
   348d0:	e3580000 	cmp	r8, #0
   348d4:	e59f10ac 	ldr	r1, [pc, #172]	; 34988 <HwManager::setMemoryEmulationMode(bool)+0xd0>
   348d8:	01a01002 	moveq	r1, r2
   348dc:	e59f30a8 	ldr	r3, [pc, #168]	; 3498c <HwManager::setMemoryEmulationMode(bool)+0xd4>
   348e0:	e58d1000 	str	r1, [sp]
   348e4:	e3a02004 	mov	r2, #4
   348e8:	e59f10a0 	ldr	r1, [pc, #160]	; 34990 <HwManager::setMemoryEmulationMode(bool)+0xd8>
   348ec:	ebffc7f7 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   348f0:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   348f4:	e3530000 	cmp	r3, #0
   348f8:	da00001c 	ble	34970 <HwManager::setMemoryEmulationMode(bool)+0xb8>
   348fc:	e3a05000 	mov	r5, #0
   34900:	e59f708c 	ldr	r7, [pc, #140]	; 34994 <HwManager::setMemoryEmulationMode(bool)+0xdc>
   34904:	e2864008 	add	r4, r6, #8
   34908:	ea000004 	b	34920 <HwManager::setMemoryEmulationMode(bool)+0x68>
   3490c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34910:	e2855001 	add	r5, r5, #1
   34914:	e1530005 	cmp	r3, r5
   34918:	e2844004 	add	r4, r4, #4
   3491c:	da000013 	ble	34970 <HwManager::setMemoryEmulationMode(bool)+0xb8>
   34920:	e5940000 	ldr	r0, [r4]
   34924:	e3500000 	cmp	r0, #0
   34928:	0afffff8 	beq	34910 <HwManager::setMemoryEmulationMode(bool)+0x58>
   3492c:	e5903000 	ldr	r3, [r0]
   34930:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34934:	e1530007 	cmp	r3, r7
   34938:	1a00000f 	bne	3497c <HwManager::setMemoryEmulationMode(bool)+0xc4>
   3493c:	e5d0000c 	ldrb	r0, [r0, #12]
   34940:	e3500000 	cmp	r0, #0
   34944:	0afffff0 	beq	3490c <HwManager::setMemoryEmulationMode(bool)+0x54>
   34948:	e5940000 	ldr	r0, [r4]
   3494c:	e1a01008 	mov	r1, r8
   34950:	e5903000 	ldr	r3, [r0]
   34954:	e2855001 	add	r5, r5, #1
   34958:	e5933008 	ldr	r3, [r3, #8]
   3495c:	e12fff33 	blx	r3
   34960:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34964:	e2844004 	add	r4, r4, #4
   34968:	e1530005 	cmp	r3, r5
   3496c:	caffffeb 	bgt	34920 <HwManager::setMemoryEmulationMode(bool)+0x68>
   34970:	e5c6803c 	strb	r8, [r6, #60]	; 0x3c
   34974:	e28dd008 	add	sp, sp, #8
   34978:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3497c:	e12fff33 	blx	r3
   34980:	eaffffee 	b	34940 <HwManager::setMemoryEmulationMode(bool)+0x88>
   34984:	00046ac0 	.word	0x00046ac0
   34988:	00046abc 	.word	0x00046abc
   3498c:	00046ac4 	.word	0x00046ac4
   34990:	00046a98 	.word	0x00046a98
   34994:	00035904 	.word	0x00035904

00034998 <HwManager::pageOutForInjection(bool)>:
   34998:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3499c:	e3530000 	cmp	r3, #0
   349a0:	d12fff1e 	bxle	lr
   349a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   349a8:	e1a08001 	mov	r8, r1
   349ac:	e1a06000 	mov	r6, r0
   349b0:	e3a05000 	mov	r5, #0
   349b4:	e59f7074 	ldr	r7, [pc, #116]	; 34a30 <HwManager::pageOutForInjection(bool)+0x98>
   349b8:	e2804008 	add	r4, r0, #8
   349bc:	ea000004 	b	349d4 <HwManager::pageOutForInjection(bool)+0x3c>
   349c0:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   349c4:	e2855001 	add	r5, r5, #1
   349c8:	e1530005 	cmp	r3, r5
   349cc:	e2844004 	add	r4, r4, #4
   349d0:	da000013 	ble	34a24 <HwManager::pageOutForInjection(bool)+0x8c>
   349d4:	e5940000 	ldr	r0, [r4]
   349d8:	e3500000 	cmp	r0, #0
   349dc:	0afffff8 	beq	349c4 <HwManager::pageOutForInjection(bool)+0x2c>
   349e0:	e5903000 	ldr	r3, [r0]
   349e4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   349e8:	e1530007 	cmp	r3, r7
   349ec:	1a00000d 	bne	34a28 <HwManager::pageOutForInjection(bool)+0x90>
   349f0:	e5d0000c 	ldrb	r0, [r0, #12]
   349f4:	e3500000 	cmp	r0, #0
   349f8:	0afffff0 	beq	349c0 <HwManager::pageOutForInjection(bool)+0x28>
   349fc:	e5940000 	ldr	r0, [r4]
   34a00:	e1a01008 	mov	r1, r8
   34a04:	e5903000 	ldr	r3, [r0]
   34a08:	e2855001 	add	r5, r5, #1
   34a0c:	e5933010 	ldr	r3, [r3, #16]
   34a10:	e12fff33 	blx	r3
   34a14:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34a18:	e2844004 	add	r4, r4, #4
   34a1c:	e1530005 	cmp	r3, r5
   34a20:	caffffeb 	bgt	349d4 <HwManager::pageOutForInjection(bool)+0x3c>
   34a24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34a28:	e12fff33 	blx	r3
   34a2c:	eafffff0 	b	349f4 <HwManager::pageOutForInjection(bool)+0x5c>
   34a30:	00035904 	.word	0x00035904

00034a34 <HwManager::setMemoryPagingEnable(bool)>:
   34a34:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34a38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34a3c:	e3530000 	cmp	r3, #0
   34a40:	e1a08000 	mov	r8, r0
   34a44:	e1a07001 	mov	r7, r1
   34a48:	da00001c 	ble	34ac0 <HwManager::setMemoryPagingEnable(bool)+0x8c>
   34a4c:	e3a05000 	mov	r5, #0
   34a50:	e59f6078 	ldr	r6, [pc, #120]	; 34ad0 <HwManager::setMemoryPagingEnable(bool)+0x9c>
   34a54:	e2804008 	add	r4, r0, #8
   34a58:	ea000004 	b	34a70 <HwManager::setMemoryPagingEnable(bool)+0x3c>
   34a5c:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   34a60:	e2855001 	add	r5, r5, #1
   34a64:	e1530005 	cmp	r3, r5
   34a68:	e2844004 	add	r4, r4, #4
   34a6c:	da000013 	ble	34ac0 <HwManager::setMemoryPagingEnable(bool)+0x8c>
   34a70:	e5940000 	ldr	r0, [r4]
   34a74:	e3500000 	cmp	r0, #0
   34a78:	0afffff8 	beq	34a60 <HwManager::setMemoryPagingEnable(bool)+0x2c>
   34a7c:	e5903000 	ldr	r3, [r0]
   34a80:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34a84:	e1530006 	cmp	r3, r6
   34a88:	1a00000e 	bne	34ac8 <HwManager::setMemoryPagingEnable(bool)+0x94>
   34a8c:	e5d0000c 	ldrb	r0, [r0, #12]
   34a90:	e3500000 	cmp	r0, #0
   34a94:	0afffff0 	beq	34a5c <HwManager::setMemoryPagingEnable(bool)+0x28>
   34a98:	e5940000 	ldr	r0, [r4]
   34a9c:	e1a01007 	mov	r1, r7
   34aa0:	e5903000 	ldr	r3, [r0]
   34aa4:	e2855001 	add	r5, r5, #1
   34aa8:	e593300c 	ldr	r3, [r3, #12]
   34aac:	e12fff33 	blx	r3
   34ab0:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   34ab4:	e2844004 	add	r4, r4, #4
   34ab8:	e1530005 	cmp	r3, r5
   34abc:	caffffeb 	bgt	34a70 <HwManager::setMemoryPagingEnable(bool)+0x3c>
   34ac0:	e5c8703e 	strb	r7, [r8, #62]	; 0x3e
   34ac4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34ac8:	e12fff33 	blx	r3
   34acc:	eaffffef 	b	34a90 <HwManager::setMemoryPagingEnable(bool)+0x5c>
   34ad0:	00035904 	.word	0x00035904

00034ad4 <HwManager::setOpcodeInjectEnable(bool)>:
   34ad4:	e92d4030 	push	{r4, r5, lr}
   34ad8:	e1a04001 	mov	r4, r1
   34adc:	e24dd00c 	sub	sp, sp, #12
   34ae0:	e1a05000 	mov	r5, r0
   34ae4:	ebffc83c 	bl	26bdc <CLogger::Get()>
   34ae8:	e59f2028 	ldr	r2, [pc, #40]	; 34b18 <HwManager::setOpcodeInjectEnable(bool)+0x44>
   34aec:	e3540000 	cmp	r4, #0
   34af0:	e59f1024 	ldr	r1, [pc, #36]	; 34b1c <HwManager::setOpcodeInjectEnable(bool)+0x48>
   34af4:	01a01002 	moveq	r1, r2
   34af8:	e59f3020 	ldr	r3, [pc, #32]	; 34b20 <HwManager::setOpcodeInjectEnable(bool)+0x4c>
   34afc:	e58d1000 	str	r1, [sp]
   34b00:	e3a02004 	mov	r2, #4
   34b04:	e59f1018 	ldr	r1, [pc, #24]	; 34b24 <HwManager::setOpcodeInjectEnable(bool)+0x50>
   34b08:	ebffc770 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34b0c:	e5c5403f 	strb	r4, [r5, #63]	; 0x3f
   34b10:	e28dd00c 	add	sp, sp, #12
   34b14:	e8bd8030 	pop	{r4, r5, pc}
   34b18:	00046ac0 	.word	0x00046ac0
   34b1c:	00046abc 	.word	0x00046abc
   34b20:	00046ae0 	.word	0x00046ae0
   34b24:	00046a98 	.word	0x00046a98

00034b28 <HwManager::setMirrorMode(bool)>:
   34b28:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34b2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34b30:	e3530000 	cmp	r3, #0
   34b34:	e1a08000 	mov	r8, r0
   34b38:	e1a07001 	mov	r7, r1
   34b3c:	da00001c 	ble	34bb4 <HwManager::setMirrorMode(bool)+0x8c>
   34b40:	e3a05000 	mov	r5, #0
   34b44:	e59f6078 	ldr	r6, [pc, #120]	; 34bc4 <HwManager::setMirrorMode(bool)+0x9c>
   34b48:	e2804008 	add	r4, r0, #8
   34b4c:	ea000004 	b	34b64 <HwManager::setMirrorMode(bool)+0x3c>
   34b50:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   34b54:	e2855001 	add	r5, r5, #1
   34b58:	e1530005 	cmp	r3, r5
   34b5c:	e2844004 	add	r4, r4, #4
   34b60:	da000013 	ble	34bb4 <HwManager::setMirrorMode(bool)+0x8c>
   34b64:	e5940000 	ldr	r0, [r4]
   34b68:	e3500000 	cmp	r0, #0
   34b6c:	0afffff8 	beq	34b54 <HwManager::setMirrorMode(bool)+0x2c>
   34b70:	e5903000 	ldr	r3, [r0]
   34b74:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34b78:	e1530006 	cmp	r3, r6
   34b7c:	1a00000e 	bne	34bbc <HwManager::setMirrorMode(bool)+0x94>
   34b80:	e5d0000c 	ldrb	r0, [r0, #12]
   34b84:	e3500000 	cmp	r0, #0
   34b88:	0afffff0 	beq	34b50 <HwManager::setMirrorMode(bool)+0x28>
   34b8c:	e5940000 	ldr	r0, [r4]
   34b90:	e1a01007 	mov	r1, r7
   34b94:	e5903000 	ldr	r3, [r0]
   34b98:	e2855001 	add	r5, r5, #1
   34b9c:	e5933014 	ldr	r3, [r3, #20]
   34ba0:	e12fff33 	blx	r3
   34ba4:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   34ba8:	e2844004 	add	r4, r4, #4
   34bac:	e1530005 	cmp	r3, r5
   34bb0:	caffffeb 	bgt	34b64 <HwManager::setMirrorMode(bool)+0x3c>
   34bb4:	e5c8703d 	strb	r7, [r8, #61]	; 0x3d
   34bb8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34bbc:	e12fff33 	blx	r3
   34bc0:	eaffffef 	b	34b84 <HwManager::setMirrorMode(bool)+0x5c>
   34bc4:	00035904 	.word	0x00035904

00034bc8 <HwManager::getMaxAddress()>:
   34bc8:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34bcc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34bd0:	e3530000 	cmp	r3, #0
   34bd4:	da000023 	ble	34c68 <HwManager::getMaxAddress()+0xa0>
   34bd8:	e1a06000 	mov	r6, r0
   34bdc:	e3a05000 	mov	r5, #0
   34be0:	e59f8088 	ldr	r8, [pc, #136]	; 34c70 <HwManager::getMaxAddress()+0xa8>
   34be4:	e59f7088 	ldr	r7, [pc, #136]	; 34c74 <HwManager::getMaxAddress()+0xac>
   34be8:	e2804008 	add	r4, r0, #8
   34bec:	ea000004 	b	34c04 <HwManager::getMaxAddress()+0x3c>
   34bf0:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34bf4:	e2855001 	add	r5, r5, #1
   34bf8:	e1530005 	cmp	r3, r5
   34bfc:	e2844004 	add	r4, r4, #4
   34c00:	da000014 	ble	34c58 <HwManager::getMaxAddress()+0x90>
   34c04:	e5940000 	ldr	r0, [r4]
   34c08:	e3500000 	cmp	r0, #0
   34c0c:	0afffff8 	beq	34bf4 <HwManager::getMaxAddress()+0x2c>
   34c10:	e5903000 	ldr	r3, [r0]
   34c14:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34c18:	e1530007 	cmp	r3, r7
   34c1c:	1a00000f 	bne	34c60 <HwManager::getMaxAddress()+0x98>
   34c20:	e5d0000c 	ldrb	r0, [r0, #12]
   34c24:	e3500000 	cmp	r0, #0
   34c28:	0afffff0 	beq	34bf0 <HwManager::getMaxAddress()+0x28>
   34c2c:	e5940000 	ldr	r0, [r4]
   34c30:	e2855001 	add	r5, r5, #1
   34c34:	e5903000 	ldr	r3, [r0]
   34c38:	e2844004 	add	r4, r4, #4
   34c3c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   34c40:	e12fff33 	blx	r3
   34c44:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34c48:	e1580000 	cmp	r8, r0
   34c4c:	31a08000 	movcc	r8, r0
   34c50:	e1530005 	cmp	r3, r5
   34c54:	caffffea 	bgt	34c04 <HwManager::getMaxAddress()+0x3c>
   34c58:	e1a00008 	mov	r0, r8
   34c5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34c60:	e12fff33 	blx	r3
   34c64:	eaffffee 	b	34c24 <HwManager::getMaxAddress()+0x5c>
   34c68:	e59f8000 	ldr	r8, [pc]	; 34c70 <HwManager::getMaxAddress()+0xa8>
   34c6c:	eafffff9 	b	34c58 <HwManager::getMaxAddress()+0x90>
   34c70:	0000ffff 	.word	0x0000ffff
   34c74:	00035904 	.word	0x00035904

00034c78 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>:
   34c78:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34c7c:	e24dd024 	sub	sp, sp, #36	; 0x24
   34c80:	e5ddc050 	ldrb	ip, [sp, #80]	; 0x50
   34c84:	e1a06000 	mov	r6, r0
   34c88:	e35c0000 	cmp	ip, #0
   34c8c:	e58d1014 	str	r1, [sp, #20]
   34c90:	e58d2018 	str	r2, [sp, #24]
   34c94:	e1a09003 	mov	r9, r3
   34c98:	e5dda048 	ldrb	sl, [sp, #72]	; 0x48
   34c9c:	e5ddb04c 	ldrb	fp, [sp, #76]	; 0x4c
   34ca0:	0a00002b 	beq	34d54 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xdc>
   34ca4:	e3a03001 	mov	r3, #1
   34ca8:	e58d3010 	str	r3, [sp, #16]
   34cac:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34cb0:	e3530000 	cmp	r3, #0
   34cb4:	da000021 	ble	34d40 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xc8>
   34cb8:	e3a05000 	mov	r5, #0
   34cbc:	e59f70ac 	ldr	r7, [pc, #172]	; 34d70 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xf8>
   34cc0:	e58d501c 	str	r5, [sp, #28]
   34cc4:	e2864008 	add	r4, r6, #8
   34cc8:	ea000013 	b	34d1c <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xa4>
   34ccc:	e5d0000c 	ldrb	r0, [r0, #12]
   34cd0:	e3500000 	cmp	r0, #0
   34cd4:	0a00000b 	beq	34d08 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x90>
   34cd8:	e5940000 	ldr	r0, [r4]
   34cdc:	e59d1010 	ldr	r1, [sp, #16]
   34ce0:	e5902000 	ldr	r2, [r0]
   34ce4:	e88d0c00 	stm	sp, {sl, fp}
   34ce8:	e58d1008 	str	r1, [sp, #8]
   34cec:	e592801c 	ldr	r8, [r2, #28]
   34cf0:	e1a03009 	mov	r3, r9
   34cf4:	e59d2018 	ldr	r2, [sp, #24]
   34cf8:	e59d1014 	ldr	r1, [sp, #20]
   34cfc:	e12fff38 	blx	r8
   34d00:	e31000fb 	tst	r0, #251	; 0xfb
   34d04:	158d001c 	strne	r0, [sp, #28]
   34d08:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34d0c:	e2855001 	add	r5, r5, #1
   34d10:	e1530005 	cmp	r3, r5
   34d14:	e2844004 	add	r4, r4, #4
   34d18:	da00000a 	ble	34d48 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xd0>
   34d1c:	e5940000 	ldr	r0, [r4]
   34d20:	e3500000 	cmp	r0, #0
   34d24:	0afffff8 	beq	34d0c <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x94>
   34d28:	e5903000 	ldr	r3, [r0]
   34d2c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34d30:	e1530007 	cmp	r3, r7
   34d34:	0affffe4 	beq	34ccc <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x54>
   34d38:	e12fff33 	blx	r3
   34d3c:	eaffffe3 	b	34cd0 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x58>
   34d40:	e3a03000 	mov	r3, #0
   34d44:	e58d301c 	str	r3, [sp, #28]
   34d48:	e59d001c 	ldr	r0, [sp, #28]
   34d4c:	e28dd024 	add	sp, sp, #36	; 0x24
   34d50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34d54:	e5900004 	ldr	r0, [r0, #4]
   34d58:	ebfff1f1 	bl	31524 <BusAccess::waitIsHeld()>
   34d5c:	e3500000 	cmp	r0, #0
   34d60:	1affffcf 	bne	34ca4 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x2c>
   34d64:	e5d6303c 	ldrb	r3, [r6, #60]	; 0x3c
   34d68:	e58d3010 	str	r3, [sp, #16]
   34d6c:	eaffffce 	b	34cac <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x34>
   34d70:	00035904 	.word	0x00035904

00034d74 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>:
   34d74:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34d78:	e24dd024 	sub	sp, sp, #36	; 0x24
   34d7c:	e5ddc050 	ldrb	ip, [sp, #80]	; 0x50
   34d80:	e1a06000 	mov	r6, r0
   34d84:	e35c0000 	cmp	ip, #0
   34d88:	e58d1014 	str	r1, [sp, #20]
   34d8c:	e58d2018 	str	r2, [sp, #24]
   34d90:	e1a09003 	mov	r9, r3
   34d94:	e5dda048 	ldrb	sl, [sp, #72]	; 0x48
   34d98:	e5ddb04c 	ldrb	fp, [sp, #76]	; 0x4c
   34d9c:	0a00002b 	beq	34e50 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xdc>
   34da0:	e3a03001 	mov	r3, #1
   34da4:	e58d3010 	str	r3, [sp, #16]
   34da8:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34dac:	e3530000 	cmp	r3, #0
   34db0:	da000021 	ble	34e3c <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xc8>
   34db4:	e3a05000 	mov	r5, #0
   34db8:	e59f70ac 	ldr	r7, [pc, #172]	; 34e6c <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xf8>
   34dbc:	e58d501c 	str	r5, [sp, #28]
   34dc0:	e2864008 	add	r4, r6, #8
   34dc4:	ea000013 	b	34e18 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xa4>
   34dc8:	e5d0000c 	ldrb	r0, [r0, #12]
   34dcc:	e3500000 	cmp	r0, #0
   34dd0:	0a00000b 	beq	34e04 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x90>
   34dd4:	e5940000 	ldr	r0, [r4]
   34dd8:	e59d1010 	ldr	r1, [sp, #16]
   34ddc:	e5902000 	ldr	r2, [r0]
   34de0:	e88d0c00 	stm	sp, {sl, fp}
   34de4:	e58d1008 	str	r1, [sp, #8]
   34de8:	e5928020 	ldr	r8, [r2, #32]
   34dec:	e1a03009 	mov	r3, r9
   34df0:	e59d2018 	ldr	r2, [sp, #24]
   34df4:	e59d1014 	ldr	r1, [sp, #20]
   34df8:	e12fff38 	blx	r8
   34dfc:	e31000fb 	tst	r0, #251	; 0xfb
   34e00:	158d001c 	strne	r0, [sp, #28]
   34e04:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34e08:	e2855001 	add	r5, r5, #1
   34e0c:	e1530005 	cmp	r3, r5
   34e10:	e2844004 	add	r4, r4, #4
   34e14:	da00000a 	ble	34e44 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xd0>
   34e18:	e5940000 	ldr	r0, [r4]
   34e1c:	e3500000 	cmp	r0, #0
   34e20:	0afffff8 	beq	34e08 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x94>
   34e24:	e5903000 	ldr	r3, [r0]
   34e28:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34e2c:	e1530007 	cmp	r3, r7
   34e30:	0affffe4 	beq	34dc8 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x54>
   34e34:	e12fff33 	blx	r3
   34e38:	eaffffe3 	b	34dcc <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x58>
   34e3c:	e3a03000 	mov	r3, #0
   34e40:	e58d301c 	str	r3, [sp, #28]
   34e44:	e59d001c 	ldr	r0, [sp, #28]
   34e48:	e28dd024 	add	sp, sp, #36	; 0x24
   34e4c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34e50:	e5900004 	ldr	r0, [r0, #4]
   34e54:	ebfff1b2 	bl	31524 <BusAccess::waitIsHeld()>
   34e58:	e3500000 	cmp	r0, #0
   34e5c:	1affffcf 	bne	34da0 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x2c>
   34e60:	e5d6303c 	ldrb	r3, [r6, #60]	; 0x3c
   34e64:	e58d3010 	str	r3, [sp, #16]
   34e68:	eaffffce 	b	34da8 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x34>
   34e6c:	00035904 	.word	0x00035904

00034e70 <HwManager::getMirrorMemForAddr(unsigned long)>:
   34e70:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34e74:	e3530000 	cmp	r3, #0
   34e78:	da000020 	ble	34f00 <HwManager::getMirrorMemForAddr(unsigned long)+0x90>
   34e7c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34e80:	e1a08001 	mov	r8, r1
   34e84:	e1a06000 	mov	r6, r0
   34e88:	e3a05000 	mov	r5, #0
   34e8c:	e59f7074 	ldr	r7, [pc, #116]	; 34f08 <HwManager::getMirrorMemForAddr(unsigned long)+0x98>
   34e90:	e2804008 	add	r4, r0, #8
   34e94:	ea00000e 	b	34ed4 <HwManager::getMirrorMemForAddr(unsigned long)+0x64>
   34e98:	e5d0000c 	ldrb	r0, [r0, #12]
   34e9c:	e3500000 	cmp	r0, #0
   34ea0:	0a000006 	beq	34ec0 <HwManager::getMirrorMemForAddr(unsigned long)+0x50>
   34ea4:	e5940000 	ldr	r0, [r4]
   34ea8:	e1a01008 	mov	r1, r8
   34eac:	e5903000 	ldr	r3, [r0]
   34eb0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   34eb4:	e12fff33 	blx	r3
   34eb8:	e3500000 	cmp	r0, #0
   34ebc:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   34ec0:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34ec4:	e2855001 	add	r5, r5, #1
   34ec8:	e1530005 	cmp	r3, r5
   34ecc:	e2844004 	add	r4, r4, #4
   34ed0:	da000008 	ble	34ef8 <HwManager::getMirrorMemForAddr(unsigned long)+0x88>
   34ed4:	e5940000 	ldr	r0, [r4]
   34ed8:	e3500000 	cmp	r0, #0
   34edc:	0afffff8 	beq	34ec4 <HwManager::getMirrorMemForAddr(unsigned long)+0x54>
   34ee0:	e5903000 	ldr	r3, [r0]
   34ee4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34ee8:	e1530007 	cmp	r3, r7
   34eec:	0affffe9 	beq	34e98 <HwManager::getMirrorMemForAddr(unsigned long)+0x28>
   34ef0:	e12fff33 	blx	r3
   34ef4:	eaffffe8 	b	34e9c <HwManager::getMirrorMemForAddr(unsigned long)+0x2c>
   34ef8:	e3a00000 	mov	r0, #0
   34efc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34f00:	e3a00000 	mov	r0, #0
   34f04:	e12fff1e 	bx	lr
   34f08:	00035904 	.word	0x00035904

00034f0c <HwManager::mirrorClone()>:
   34f0c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34f10:	e3530000 	cmp	r3, #0
   34f14:	d12fff1e 	bxle	lr
   34f18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34f1c:	e1a06000 	mov	r6, r0
   34f20:	e3a05000 	mov	r5, #0
   34f24:	e59f7070 	ldr	r7, [pc, #112]	; 34f9c <HwManager::mirrorClone()+0x90>
   34f28:	e2804008 	add	r4, r0, #8
   34f2c:	ea000004 	b	34f44 <HwManager::mirrorClone()+0x38>
   34f30:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34f34:	e2855001 	add	r5, r5, #1
   34f38:	e1530005 	cmp	r3, r5
   34f3c:	e2844004 	add	r4, r4, #4
   34f40:	da000012 	ble	34f90 <HwManager::mirrorClone()+0x84>
   34f44:	e5940000 	ldr	r0, [r4]
   34f48:	e3500000 	cmp	r0, #0
   34f4c:	0afffff8 	beq	34f34 <HwManager::mirrorClone()+0x28>
   34f50:	e5903000 	ldr	r3, [r0]
   34f54:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34f58:	e1530007 	cmp	r3, r7
   34f5c:	1a00000c 	bne	34f94 <HwManager::mirrorClone()+0x88>
   34f60:	e5d0000c 	ldrb	r0, [r0, #12]
   34f64:	e3500000 	cmp	r0, #0
   34f68:	0afffff0 	beq	34f30 <HwManager::mirrorClone()+0x24>
   34f6c:	e5940000 	ldr	r0, [r4]
   34f70:	e2855001 	add	r5, r5, #1
   34f74:	e5903000 	ldr	r3, [r0]
   34f78:	e2844004 	add	r4, r4, #4
   34f7c:	e5933018 	ldr	r3, [r3, #24]
   34f80:	e12fff33 	blx	r3
   34f84:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34f88:	e1530005 	cmp	r3, r5
   34f8c:	caffffec 	bgt	34f44 <HwManager::mirrorClone()+0x38>
   34f90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34f94:	e12fff33 	blx	r3
   34f98:	eafffff1 	b	34f64 <HwManager::mirrorClone()+0x58>
   34f9c:	00035904 	.word	0x00035904

00034fa0 <HwManager::tracerClone()>:
   34fa0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34fa4:	e3530000 	cmp	r3, #0
   34fa8:	d12fff1e 	bxle	lr
   34fac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34fb0:	e1a06000 	mov	r6, r0
   34fb4:	e3a05000 	mov	r5, #0
   34fb8:	e59f7070 	ldr	r7, [pc, #112]	; 35030 <HwManager::tracerClone()+0x90>
   34fbc:	e2804008 	add	r4, r0, #8
   34fc0:	ea000004 	b	34fd8 <HwManager::tracerClone()+0x38>
   34fc4:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34fc8:	e2855001 	add	r5, r5, #1
   34fcc:	e1530005 	cmp	r3, r5
   34fd0:	e2844004 	add	r4, r4, #4
   34fd4:	da000012 	ble	35024 <HwManager::tracerClone()+0x84>
   34fd8:	e5940000 	ldr	r0, [r4]
   34fdc:	e3500000 	cmp	r0, #0
   34fe0:	0afffff8 	beq	34fc8 <HwManager::tracerClone()+0x28>
   34fe4:	e5903000 	ldr	r3, [r0]
   34fe8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34fec:	e1530007 	cmp	r3, r7
   34ff0:	1a00000c 	bne	35028 <HwManager::tracerClone()+0x88>
   34ff4:	e5d0000c 	ldrb	r0, [r0, #12]
   34ff8:	e3500000 	cmp	r0, #0
   34ffc:	0afffff0 	beq	34fc4 <HwManager::tracerClone()+0x24>
   35000:	e5940000 	ldr	r0, [r4]
   35004:	e2855001 	add	r5, r5, #1
   35008:	e5903000 	ldr	r3, [r0]
   3500c:	e2844004 	add	r4, r4, #4
   35010:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   35014:	e12fff33 	blx	r3
   35018:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   3501c:	e1530005 	cmp	r3, r5
   35020:	caffffec 	bgt	34fd8 <HwManager::tracerClone()+0x38>
   35024:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   35028:	e12fff33 	blx	r3
   3502c:	eafffff1 	b	34ff8 <HwManager::tracerClone()+0x58>
   35030:	00035904 	.word	0x00035904

00035034 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   35034:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   35038:	e35c0000 	cmp	ip, #0
   3503c:	d12fff1e 	bxle	lr
   35040:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35044:	e1a0b003 	mov	fp, r3
   35048:	e24dd00c 	sub	sp, sp, #12
   3504c:	e1a0a002 	mov	sl, r2
   35050:	e1a09001 	mov	r9, r1
   35054:	e1a06000 	mov	r6, r0
   35058:	e3a05000 	mov	r5, #0
   3505c:	e59f7088 	ldr	r7, [pc, #136]	; 350ec <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb8>
   35060:	e2804008 	add	r4, r0, #8
   35064:	ea000004 	b	3507c <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48>
   35068:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   3506c:	e2855001 	add	r5, r5, #1
   35070:	e15c0005 	cmp	ip, r5
   35074:	e2844004 	add	r4, r4, #4
   35078:	da000017 	ble	350dc <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0xa8>
   3507c:	e5940000 	ldr	r0, [r4]
   35080:	e3500000 	cmp	r0, #0
   35084:	0afffff8 	beq	3506c <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x38>
   35088:	e5903000 	ldr	r3, [r0]
   3508c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   35090:	e1530007 	cmp	r3, r7
   35094:	1a000012 	bne	350e4 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb0>
   35098:	e5d0000c 	ldrb	r0, [r0, #12]
   3509c:	e3500000 	cmp	r0, #0
   350a0:	0afffff0 	beq	35068 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x34>
   350a4:	e5940000 	ldr	r0, [r4]
   350a8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   350ac:	e5902000 	ldr	r2, [r0]
   350b0:	e58d1000 	str	r1, [sp]
   350b4:	e592802c 	ldr	r8, [r2, #44]	; 0x2c
   350b8:	e1a0300b 	mov	r3, fp
   350bc:	e1a0200a 	mov	r2, sl
   350c0:	e1a01009 	mov	r1, r9
   350c4:	e12fff38 	blx	r8
   350c8:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   350cc:	e2855001 	add	r5, r5, #1
   350d0:	e15c0005 	cmp	ip, r5
   350d4:	e2844004 	add	r4, r4, #4
   350d8:	caffffe7 	bgt	3507c <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48>
   350dc:	e28dd00c 	add	sp, sp, #12
   350e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   350e4:	e12fff33 	blx	r3
   350e8:	eaffffeb 	b	3509c <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x68>
   350ec:	00035904 	.word	0x00035904

000350f0 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   350f0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   350f4:	e3530000 	cmp	r3, #0
   350f8:	d12fff1e 	bxle	lr
   350fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35100:	e1a09002 	mov	r9, r2
   35104:	e1a08001 	mov	r8, r1
   35108:	e1a06000 	mov	r6, r0
   3510c:	e3a05000 	mov	r5, #0
   35110:	e59f7078 	ldr	r7, [pc, #120]	; 35190 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xa0>
   35114:	e2804008 	add	r4, r0, #8
   35118:	ea000004 	b	35130 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x40>
   3511c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   35120:	e2855001 	add	r5, r5, #1
   35124:	e1530005 	cmp	r3, r5
   35128:	e2844004 	add	r4, r4, #4
   3512c:	da000014 	ble	35184 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x94>
   35130:	e5940000 	ldr	r0, [r4]
   35134:	e3500000 	cmp	r0, #0
   35138:	0afffff8 	beq	35120 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x30>
   3513c:	e5903000 	ldr	r3, [r0]
   35140:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   35144:	e1530007 	cmp	r3, r7
   35148:	1a00000e 	bne	35188 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x98>
   3514c:	e5d0000c 	ldrb	r0, [r0, #12]
   35150:	e3500000 	cmp	r0, #0
   35154:	0afffff0 	beq	3511c <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x2c>
   35158:	e5940000 	ldr	r0, [r4]
   3515c:	e1a02009 	mov	r2, r9
   35160:	e5903000 	ldr	r3, [r0]
   35164:	e1a01008 	mov	r1, r8
   35168:	e5933000 	ldr	r3, [r3]
   3516c:	e12fff33 	blx	r3
   35170:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   35174:	e2855001 	add	r5, r5, #1
   35178:	e1530005 	cmp	r3, r5
   3517c:	e2844004 	add	r4, r4, #4
   35180:	caffffea 	bgt	35130 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x40>
   35184:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35188:	e12fff33 	blx	r3
   3518c:	eaffffef 	b	35150 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x60>
   35190:	00035904 	.word	0x00035904

00035194 <HwManager::busActionCompleteStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   35194:	e3500000 	cmp	r0, #0
   35198:	012fff1e 	bxeq	lr
   3519c:	eaffffd3 	b	350f0 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>

000351a0 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   351a0:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   351a4:	e35c0000 	cmp	ip, #0
   351a8:	d12fff1e 	bxle	lr
   351ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   351b0:	e1a0b003 	mov	fp, r3
   351b4:	e24dd00c 	sub	sp, sp, #12
   351b8:	e1a0a002 	mov	sl, r2
   351bc:	e1a09001 	mov	r9, r1
   351c0:	e1a06000 	mov	r6, r0
   351c4:	e3a05000 	mov	r5, #0
   351c8:	e59f7088 	ldr	r7, [pc, #136]	; 35258 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb8>
   351cc:	e2804008 	add	r4, r0, #8
   351d0:	ea000004 	b	351e8 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48>
   351d4:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   351d8:	e2855001 	add	r5, r5, #1
   351dc:	e15c0005 	cmp	ip, r5
   351e0:	e2844004 	add	r4, r4, #4
   351e4:	da000017 	ble	35248 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xa8>
   351e8:	e5940000 	ldr	r0, [r4]
   351ec:	e3500000 	cmp	r0, #0
   351f0:	0afffff8 	beq	351d8 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x38>
   351f4:	e5903000 	ldr	r3, [r0]
   351f8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   351fc:	e1530007 	cmp	r3, r7
   35200:	1a000012 	bne	35250 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb0>
   35204:	e5d0000c 	ldrb	r0, [r0, #12]
   35208:	e3500000 	cmp	r0, #0
   3520c:	0afffff0 	beq	351d4 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x34>
   35210:	e5940000 	ldr	r0, [r4]
   35214:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   35218:	e5902000 	ldr	r2, [r0]
   3521c:	e58d1000 	str	r1, [sp]
   35220:	e5928004 	ldr	r8, [r2, #4]
   35224:	e1a0300b 	mov	r3, fp
   35228:	e1a0200a 	mov	r2, sl
   3522c:	e1a01009 	mov	r1, r9
   35230:	e12fff38 	blx	r8
   35234:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   35238:	e2855001 	add	r5, r5, #1
   3523c:	e15c0005 	cmp	ip, r5
   35240:	e2844004 	add	r4, r4, #4
   35244:	caffffe7 	bgt	351e8 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48>
   35248:	e28dd00c 	add	sp, sp, #12
   3524c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35250:	e12fff33 	blx	r3
   35254:	eaffffeb 	b	35208 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x68>
   35258:	00035904 	.word	0x00035904

0003525c <HwManager::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   3525c:	e3500000 	cmp	r0, #0
   35260:	012fff1e 	bxeq	lr
   35264:	eaffffcd 	b	351a0 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>

00035268 <HwManager::enableHw(char const*, bool)>:
   35268:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3526c:	e3530000 	cmp	r3, #0
   35270:	da00002c 	ble	35328 <HwManager::enableHw(char const*, bool)+0xc0>
   35274:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35278:	e1a08002 	mov	r8, r2
   3527c:	e1a07001 	mov	r7, r1
   35280:	e1a06000 	mov	r6, r0
   35284:	e3a04000 	mov	r4, #0
   35288:	e59f90a0 	ldr	r9, [pc, #160]	; 35330 <HwManager::enableHw(char const*, bool)+0xc8>
   3528c:	e2805004 	add	r5, r0, #4
   35290:	ea000008 	b	352b8 <HwManager::enableHw(char const*, bool)+0x50>
   35294:	e5900010 	ldr	r0, [r0, #16]
   35298:	e1a01007 	mov	r1, r7
   3529c:	ebffd39f 	bl	2a120 <strcasecmp>
   352a0:	e3500000 	cmp	r0, #0
   352a4:	0a00000f 	beq	352e8 <HwManager::enableHw(char const*, bool)+0x80>
   352a8:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   352ac:	e2844001 	add	r4, r4, #1
   352b0:	e1530004 	cmp	r3, r4
   352b4:	da000015 	ble	35310 <HwManager::enableHw(char const*, bool)+0xa8>
   352b8:	e5b50004 	ldr	r0, [r5, #4]!
   352bc:	e3500000 	cmp	r0, #0
   352c0:	0afffff9 	beq	352ac <HwManager::enableHw(char const*, bool)+0x44>
   352c4:	e5903000 	ldr	r3, [r0]
   352c8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   352cc:	e1530009 	cmp	r3, r9
   352d0:	0affffef 	beq	35294 <HwManager::enableHw(char const*, bool)+0x2c>
   352d4:	e12fff33 	blx	r3
   352d8:	e1a01007 	mov	r1, r7
   352dc:	ebffd38f 	bl	2a120 <strcasecmp>
   352e0:	e3500000 	cmp	r0, #0
   352e4:	1affffef 	bne	352a8 <HwManager::enableHw(char const*, bool)+0x40>
   352e8:	e2844002 	add	r4, r4, #2
   352ec:	e7960104 	ldr	r0, [r6, r4, lsl #2]
   352f0:	e59f203c 	ldr	r2, [pc, #60]	; 35334 <HwManager::enableHw(char const*, bool)+0xcc>
   352f4:	e5903000 	ldr	r3, [r0]
   352f8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   352fc:	e1530002 	cmp	r3, r2
   35300:	1a000004 	bne	35318 <HwManager::enableHw(char const*, bool)+0xb0>
   35304:	e5c0800c 	strb	r8, [r0, #12]
   35308:	e3a00001 	mov	r0, #1
   3530c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35310:	e3a00000 	mov	r0, #0
   35314:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35318:	e1a01008 	mov	r1, r8
   3531c:	e12fff33 	blx	r3
   35320:	e3a00001 	mov	r0, #1
   35324:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35328:	e3a00000 	mov	r0, #0
   3532c:	e12fff1e 	bx	lr
   35330:	00035914 	.word	0x00035914
   35334:	0003590c 	.word	0x0003590c

00035338 <HwManager::disableAll()>:
   35338:	e5902030 	ldr	r2, [r0, #48]	; 0x30
   3533c:	e3520000 	cmp	r2, #0
   35340:	d12fff1e 	bxle	lr
   35344:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   35348:	e3a04000 	mov	r4, #0
   3534c:	e1a08000 	mov	r8, r0
   35350:	e1a07004 	mov	r7, r4
   35354:	e59f604c 	ldr	r6, [pc, #76]	; 353a8 <HwManager::disableAll()+0x70>
   35358:	e2805004 	add	r5, r0, #4
   3535c:	ea000002 	b	3536c <HwManager::disableAll()+0x34>
   35360:	e2844001 	add	r4, r4, #1
   35364:	e1520004 	cmp	r2, r4
   35368:	da00000d 	ble	353a4 <HwManager::disableAll()+0x6c>
   3536c:	e5b50004 	ldr	r0, [r5, #4]!
   35370:	e3500000 	cmp	r0, #0
   35374:	0afffff9 	beq	35360 <HwManager::disableAll()+0x28>
   35378:	e5903000 	ldr	r3, [r0]
   3537c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   35380:	e1530006 	cmp	r3, r6
   35384:	05c0700c 	strbeq	r7, [r0, #12]
   35388:	0afffff4 	beq	35360 <HwManager::disableAll()+0x28>
   3538c:	e1a01007 	mov	r1, r7
   35390:	e12fff33 	blx	r3
   35394:	e5982030 	ldr	r2, [r8, #48]	; 0x30
   35398:	e2844001 	add	r4, r4, #1
   3539c:	e1520004 	cmp	r2, r4
   353a0:	cafffff1 	bgt	3536c <HwManager::disableAll()+0x34>
   353a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   353a8:	0003590c 	.word	0x0003590c

000353ac <HwManager::configureHw(char const*, char const*)>:
   353ac:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   353b0:	e3530000 	cmp	r3, #0
   353b4:	d12fff1e 	bxle	lr
   353b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   353bc:	e1a08002 	mov	r8, r2
   353c0:	e1a07001 	mov	r7, r1
   353c4:	e1a06000 	mov	r6, r0
   353c8:	e3a04000 	mov	r4, #0
   353cc:	e59f9078 	ldr	r9, [pc, #120]	; 3544c <HwManager::configureHw(char const*, char const*)+0xa0>
   353d0:	e2805004 	add	r5, r0, #4
   353d4:	ea000008 	b	353fc <HwManager::configureHw(char const*, char const*)+0x50>
   353d8:	e5900010 	ldr	r0, [r0, #16]
   353dc:	e1a01007 	mov	r1, r7
   353e0:	ebffd34e 	bl	2a120 <strcasecmp>
   353e4:	e3500000 	cmp	r0, #0
   353e8:	0a00000f 	beq	3542c <HwManager::configureHw(char const*, char const*)+0x80>
   353ec:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   353f0:	e2844001 	add	r4, r4, #1
   353f4:	e1530004 	cmp	r3, r4
   353f8:	da000012 	ble	35448 <HwManager::configureHw(char const*, char const*)+0x9c>
   353fc:	e5b50004 	ldr	r0, [r5, #4]!
   35400:	e3500000 	cmp	r0, #0
   35404:	0afffff9 	beq	353f0 <HwManager::configureHw(char const*, char const*)+0x44>
   35408:	e5903000 	ldr	r3, [r0]
   3540c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   35410:	e1530009 	cmp	r3, r9
   35414:	0affffef 	beq	353d8 <HwManager::configureHw(char const*, char const*)+0x2c>
   35418:	e12fff33 	blx	r3
   3541c:	e1a01007 	mov	r1, r7
   35420:	ebffd33e 	bl	2a120 <strcasecmp>
   35424:	e3500000 	cmp	r0, #0
   35428:	1affffef 	bne	353ec <HwManager::configureHw(char const*, char const*)+0x40>
   3542c:	e2844002 	add	r4, r4, #2
   35430:	e7960104 	ldr	r0, [r6, r4, lsl #2]
   35434:	e1a01008 	mov	r1, r8
   35438:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3543c:	e5903000 	ldr	r3, [r0]
   35440:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   35444:	e12fff13 	bx	r3
   35448:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3544c:	00035914 	.word	0x00035914

00035450 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   35450:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35454:	e24dde49 	sub	sp, sp, #1168	; 0x490
   35458:	e24dd00c 	sub	sp, sp, #12
   3545c:	e28d3014 	add	r3, sp, #20
   35460:	e58d300c 	str	r3, [sp, #12]
   35464:	e1a02003 	mov	r2, r3
   35468:	e1a07000 	mov	r7, r0
   3546c:	e3a03032 	mov	r3, #50	; 0x32
   35470:	e59f01d0 	ldr	r0, [pc, #464]	; 35648 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1f8>
   35474:	e1a05001 	mov	r5, r1
   35478:	ebffe3a0 	bl	2e300 <jsonGetValueForKey>
   3547c:	e2504000 	subs	r4, r0, #0
   35480:	1a000004 	bne	35498 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x48>
   35484:	e3a04000 	mov	r4, #0
   35488:	e1a00004 	mov	r0, r4
   3548c:	e28dde49 	add	sp, sp, #1168	; 0x490
   35490:	e28dd00c 	add	sp, sp, #12
   35494:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35498:	e59f11ac 	ldr	r1, [pc, #428]	; 3564c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1fc>
   3549c:	e59d000c 	ldr	r0, [sp, #12]
   354a0:	ebffd31e 	bl	2a120 <strcasecmp>
   354a4:	e2506000 	subs	r6, r0, #0
   354a8:	0a000033 	beq	3557c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x12c>
   354ac:	e59d000c 	ldr	r0, [sp, #12]
   354b0:	e59f1198 	ldr	r1, [pc, #408]	; 35650 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x200>
   354b4:	ebffd319 	bl	2a120 <strcasecmp>
   354b8:	e2505000 	subs	r5, r0, #0
   354bc:	1afffff0 	bne	35484 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   354c0:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   354c4:	e59f1188 	ldr	r1, [pc, #392]	; 35654 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x204>
   354c8:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   354cc:	ebffe2d5 	bl	2e028 <strlcpy>
   354d0:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   354d4:	e3530000 	cmp	r3, #0
   354d8:	da000055 	ble	35634 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1e4>
   354dc:	e1a08005 	mov	r8, r5
   354e0:	e3a0bffa 	mov	fp, #1000	; 0x3e8
   354e4:	e59fa16c 	ldr	sl, [pc, #364]	; 35658 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x208>
   354e8:	e59f916c 	ldr	r9, [pc, #364]	; 3565c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x20c>
   354ec:	e2876008 	add	r6, r7, #8
   354f0:	ea000009 	b	3551c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc>
   354f4:	e1a08004 	mov	r8, r4
   354f8:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   354fc:	e28d10b0 	add	r1, sp, #176	; 0xb0
   35500:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   35504:	ebffe2e3 	bl	2e098 <strlcat>
   35508:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   3550c:	e2855001 	add	r5, r5, #1
   35510:	e1530005 	cmp	r3, r5
   35514:	e2866004 	add	r6, r6, #4
   35518:	da000045 	ble	35634 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1e4>
   3551c:	e5960000 	ldr	r0, [r6]
   35520:	e3500000 	cmp	r0, #0
   35524:	0afffff8 	beq	3550c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xbc>
   35528:	e5902000 	ldr	r2, [r0]
   3552c:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   35530:	e153000a 	cmp	r3, sl
   35534:	1a000039 	bne	35620 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1d0>
   35538:	e5903010 	ldr	r3, [r0, #16]
   3553c:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   35540:	e1520009 	cmp	r2, r9
   35544:	1a000031 	bne	35610 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1c0>
   35548:	e5d0000c 	ldrb	r0, [r0, #12]
   3554c:	e58d0000 	str	r0, [sp]
   35550:	e59f2108 	ldr	r2, [pc, #264]	; 35660 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x210>
   35554:	e1a0100b 	mov	r1, fp
   35558:	e28d00b0 	add	r0, sp, #176	; 0xb0
   3555c:	ebffe328 	bl	2e204 <snprintf>
   35560:	e3580000 	cmp	r8, #0
   35564:	0affffe2 	beq	354f4 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa4>
   35568:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   3556c:	e59f10f0 	ldr	r1, [pc, #240]	; 35664 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x214>
   35570:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   35574:	ebffe2c7 	bl	2e098 <strlcat>
   35578:	eaffffdd 	b	354f4 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa4>
   3557c:	e28d2048 	add	r2, sp, #72	; 0x48
   35580:	e3a03064 	mov	r3, #100	; 0x64
   35584:	e1a01005 	mov	r1, r5
   35588:	e59f00d8 	ldr	r0, [pc, #216]	; 35668 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x218>
   3558c:	ebffe35b 	bl	2e300 <jsonGetValueForKey>
   35590:	e3500000 	cmp	r0, #0
   35594:	0affffba 	beq	35484 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   35598:	e28d20b0 	add	r2, sp, #176	; 0xb0
   3559c:	e3a03064 	mov	r3, #100	; 0x64
   355a0:	e1a01005 	mov	r1, r5
   355a4:	e59f00c0 	ldr	r0, [pc, #192]	; 3566c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   355a8:	ebffe354 	bl	2e300 <jsonGetValueForKey>
   355ac:	e2504000 	subs	r4, r0, #0
   355b0:	0affffb3 	beq	35484 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   355b4:	e1a01006 	mov	r1, r6
   355b8:	e28d00b0 	add	r0, sp, #176	; 0xb0
   355bc:	e3a0200a 	mov	r2, #10
   355c0:	ebffd3fe 	bl	2a5c0 <strtoul>
   355c4:	e2902000 	adds	r2, r0, #0
   355c8:	13a02001 	movne	r2, #1
   355cc:	e28d1048 	add	r1, sp, #72	; 0x48
   355d0:	e1a00007 	mov	r0, r7
   355d4:	ebffff23 	bl	35268 <HwManager::enableHw(char const*, bool)>
   355d8:	e1a06000 	mov	r6, r0
   355dc:	e1a02005 	mov	r2, r5
   355e0:	e28d1048 	add	r1, sp, #72	; 0x48
   355e4:	e1a00007 	mov	r0, r7
   355e8:	ebffff6f 	bl	353ac <HwManager::configureHw(char const*, char const*)>
   355ec:	e59f107c 	ldr	r1, [pc, #124]	; 35670 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x220>
   355f0:	e3560000 	cmp	r6, #0
   355f4:	e59f3078 	ldr	r3, [pc, #120]	; 35674 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x224>
   355f8:	e59f2078 	ldr	r2, [pc, #120]	; 35678 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x228>
   355fc:	11a03001 	movne	r3, r1
   35600:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   35604:	e59d14c4 	ldr	r1, [sp, #1220]	; 0x4c4
   35608:	ebffe2fd 	bl	2e204 <snprintf>
   3560c:	eaffff9d 	b	35488 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35610:	e58d300c 	str	r3, [sp, #12]
   35614:	e12fff32 	blx	r2
   35618:	e59d300c 	ldr	r3, [sp, #12]
   3561c:	eaffffca 	b	3554c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xfc>
   35620:	e12fff33 	blx	r3
   35624:	e1a03000 	mov	r3, r0
   35628:	e5960000 	ldr	r0, [r6]
   3562c:	e5902000 	ldr	r2, [r0]
   35630:	eaffffc1 	b	3553c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xec>
   35634:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   35638:	e59f103c 	ldr	r1, [pc, #60]	; 3567c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x22c>
   3563c:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   35640:	ebffe294 	bl	2e098 <strlcat>
   35644:	eaffff8f 	b	35488 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   35648:	0003f0d4 	.word	0x0003f0d4
   3564c:	00046b0c 	.word	0x00046b0c
   35650:	00046b34 	.word	0x00046b34
   35654:	00046b3c 	.word	0x00046b3c
   35658:	00035914 	.word	0x00035914
   3565c:	00035904 	.word	0x00035904
   35660:	00046b58 	.word	0x00046b58
   35664:	000433f8 	.word	0x000433f8
   35668:	00046b18 	.word	0x00046b18
   3566c:	00046b20 	.word	0x00046b20
   35670:	00046afc 	.word	0x00046afc
   35674:	00046b00 	.word	0x00046b00
   35678:	00046b28 	.word	0x00046b28
   3567c:	00046b54 	.word	0x00046b54

00035680 <HwManager::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   35680:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   35684:	e99d5000 	ldmib	sp, {ip, lr}
   35688:	e3500000 	cmp	r0, #0
   3568c:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   35690:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   35694:	eaffff6d 	b	35450 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

00035698 <HwManager::setupFromJson(char const*, char const*)>:
   35698:	e1a03001 	mov	r3, r1
   3569c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   356a0:	e24ddd61 	sub	sp, sp, #6208	; 0x1840
   356a4:	e24dd01c 	sub	sp, sp, #28
   356a8:	e28d1e4d 	add	r1, sp, #1232	; 0x4d0
   356ac:	e58d1014 	str	r1, [sp, #20]
   356b0:	e58d001c 	str	r0, [sp, #28]
   356b4:	e1a01002 	mov	r1, r2
   356b8:	e1a00003 	mov	r0, r3
   356bc:	e59d2014 	ldr	r2, [sp, #20]
   356c0:	e59f31e8 	ldr	r3, [pc, #488]	; 358b0 <HwManager::setupFromJson(char const*, char const*)+0x218>
   356c4:	ebffe30d 	bl	2e300 <jsonGetValueForKey>
   356c8:	e3500000 	cmp	r0, #0
   356cc:	1a000060 	bne	35854 <HwManager::setupFromJson(char const*, char const*)+0x1bc>
   356d0:	e59f31dc 	ldr	r3, [pc, #476]	; 358b4 <HwManager::setupFromJson(char const*, char const*)+0x21c>
   356d4:	e5937000 	ldr	r7, [r3]
   356d8:	e1a00007 	mov	r0, r7
   356dc:	ebffe340 	bl	2e3e4 <jsonGetArrayLen>
   356e0:	e1a08000 	mov	r8, r0
   356e4:	ebffc53c 	bl	26bdc <CLogger::Get()>
   356e8:	e58d8000 	str	r8, [sp]
   356ec:	e59f31c4 	ldr	r3, [pc, #452]	; 358b8 <HwManager::setupFromJson(char const*, char const*)+0x220>
   356f0:	e3a02004 	mov	r2, #4
   356f4:	e59f11c0 	ldr	r1, [pc, #448]	; 358bc <HwManager::setupFromJson(char const*, char const*)+0x224>
   356f8:	ebffc474 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   356fc:	e3580000 	cmp	r8, #0
   35700:	da000050 	ble	35848 <HwManager::setupFromJson(char const*, char const*)+0x1b0>
   35704:	e3a04000 	mov	r4, #0
   35708:	e59fa1b0 	ldr	sl, [pc, #432]	; 358c0 <HwManager::setupFromJson(char const*, char const*)+0x228>
   3570c:	e59f91a8 	ldr	r9, [pc, #424]	; 358bc <HwManager::setupFromJson(char const*, char const*)+0x224>
   35710:	e59fb1ac 	ldr	fp, [pc, #428]	; 358c4 <HwManager::setupFromJson(char const*, char const*)+0x22c>
   35714:	e28d60e8 	add	r6, sp, #232	; 0xe8
   35718:	ea000002 	b	35728 <HwManager::setupFromJson(char const*, char const*)+0x90>
   3571c:	e2844001 	add	r4, r4, #1
   35720:	e1580004 	cmp	r8, r4
   35724:	0a000047 	beq	35848 <HwManager::setupFromJson(char const*, char const*)+0x1b0>
   35728:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   3572c:	e1a02006 	mov	r2, r6
   35730:	e1a01007 	mov	r1, r7
   35734:	e1a00004 	mov	r0, r4
   35738:	ebffe345 	bl	2e454 <jsonGetArrayElem>
   3573c:	e1a05000 	mov	r5, r0
   35740:	ebffc525 	bl	26bdc <CLogger::Get()>
   35744:	e88d0060 	stm	sp, {r5, r6}
   35748:	e1a0300a 	mov	r3, sl
   3574c:	e3a02004 	mov	r2, #4
   35750:	e1a01009 	mov	r1, r9
   35754:	ebffc45d 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   35758:	e3550000 	cmp	r5, #0
   3575c:	0affffee 	beq	3571c <HwManager::setupFromJson(char const*, char const*)+0x84>
   35760:	e28d3020 	add	r3, sp, #32
   35764:	e58d3014 	str	r3, [sp, #20]
   35768:	e1a02003 	mov	r2, r3
   3576c:	e1a01006 	mov	r1, r6
   35770:	e3a03064 	mov	r3, #100	; 0x64
   35774:	e1a0000b 	mov	r0, fp
   35778:	ebffe2e0 	bl	2e300 <jsonGetValueForKey>
   3577c:	e2505000 	subs	r5, r0, #0
   35780:	0affffe5 	beq	3571c <HwManager::setupFromJson(char const*, char const*)+0x84>
   35784:	ebffc514 	bl	26bdc <CLogger::Get()>
   35788:	e59d3014 	ldr	r3, [sp, #20]
   3578c:	e3a02004 	mov	r2, #4
   35790:	e58d3004 	str	r3, [sp, #4]
   35794:	e1a01009 	mov	r1, r9
   35798:	e59f3128 	ldr	r3, [pc, #296]	; 358c8 <HwManager::setupFromJson(char const*, char const*)+0x230>
   3579c:	e58d4000 	str	r4, [sp]
   357a0:	ebffc44a 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   357a4:	e28d3084 	add	r3, sp, #132	; 0x84
   357a8:	e1a00003 	mov	r0, r3
   357ac:	e59f1118 	ldr	r1, [pc, #280]	; 358cc <HwManager::setupFromJson(char const*, char const*)+0x234>
   357b0:	e58d3018 	str	r3, [sp, #24]
   357b4:	ebffd2f2 	bl	2a384 <strcpy>
   357b8:	e59d2018 	ldr	r2, [sp, #24]
   357bc:	e3a03064 	mov	r3, #100	; 0x64
   357c0:	e1a01006 	mov	r1, r6
   357c4:	e59f0104 	ldr	r0, [pc, #260]	; 358d0 <HwManager::setupFromJson(char const*, char const*)+0x238>
   357c8:	ebffe2cc 	bl	2e300 <jsonGetValueForKey>
   357cc:	e3500000 	cmp	r0, #0
   357d0:	0a000032 	beq	358a0 <HwManager::setupFromJson(char const*, char const*)+0x208>
   357d4:	e59f10f8 	ldr	r1, [pc, #248]	; 358d4 <HwManager::setupFromJson(char const*, char const*)+0x23c>
   357d8:	e59d0018 	ldr	r0, [sp, #24]
   357dc:	ebffd24f 	bl	2a120 <strcasecmp>
   357e0:	e3500000 	cmp	r0, #0
   357e4:	03a03001 	moveq	r3, #1
   357e8:	1a000024 	bne	35880 <HwManager::setupFromJson(char const*, char const*)+0x1e8>
   357ec:	e1a02005 	mov	r2, r5
   357f0:	e59d501c 	ldr	r5, [sp, #28]
   357f4:	e59d1014 	ldr	r1, [sp, #20]
   357f8:	e1a00005 	mov	r0, r5
   357fc:	e58d3018 	str	r3, [sp, #24]
   35800:	ebfffe98 	bl	35268 <HwManager::enableHw(char const*, bool)>
   35804:	ebffc4f4 	bl	26bdc <CLogger::Get()>
   35808:	e59d3018 	ldr	r3, [sp, #24]
   3580c:	e58d4000 	str	r4, [sp]
   35810:	e58d3008 	str	r3, [sp, #8]
   35814:	e59d3014 	ldr	r3, [sp, #20]
   35818:	e3a02004 	mov	r2, #4
   3581c:	e58d3004 	str	r3, [sp, #4]
   35820:	e1a01009 	mov	r1, r9
   35824:	e59f30ac 	ldr	r3, [pc, #172]	; 358d8 <HwManager::setupFromJson(char const*, char const*)+0x240>
   35828:	ebffc428 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3582c:	e2844001 	add	r4, r4, #1
   35830:	e1a02006 	mov	r2, r6
   35834:	e59d1014 	ldr	r1, [sp, #20]
   35838:	e1a00005 	mov	r0, r5
   3583c:	ebfffeda 	bl	353ac <HwManager::configureHw(char const*, char const*)>
   35840:	e1580004 	cmp	r8, r4
   35844:	1affffb7 	bne	35728 <HwManager::setupFromJson(char const*, char const*)+0x90>
   35848:	e28ddd61 	add	sp, sp, #6208	; 0x1840
   3584c:	e28dd01c 	add	sp, sp, #28
   35850:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35854:	e59d0014 	ldr	r0, [sp, #20]
   35858:	ebffd20b 	bl	2a08c <strlen>
   3585c:	e3500000 	cmp	r0, #0
   35860:	0affff9a 	beq	356d0 <HwManager::setupFromJson(char const*, char const*)+0x38>
   35864:	e59f1070 	ldr	r1, [pc, #112]	; 358dc <HwManager::setupFromJson(char const*, char const*)+0x244>
   35868:	e59d0014 	ldr	r0, [sp, #20]
   3586c:	ebffd22b 	bl	2a120 <strcasecmp>
   35870:	e3500000 	cmp	r0, #0
   35874:	0affff95 	beq	356d0 <HwManager::setupFromJson(char const*, char const*)+0x38>
   35878:	e59d7014 	ldr	r7, [sp, #20]
   3587c:	eaffff95 	b	356d8 <HwManager::setupFromJson(char const*, char const*)+0x40>
   35880:	e59d0018 	ldr	r0, [sp, #24]
   35884:	e3a0200a 	mov	r2, #10
   35888:	e3a01000 	mov	r1, #0
   3588c:	ebffd34b 	bl	2a5c0 <strtoul>
   35890:	e2905000 	adds	r5, r0, #0
   35894:	13a05001 	movne	r5, #1
   35898:	e1a03005 	mov	r3, r5
   3589c:	eaffffd2 	b	357ec <HwManager::setupFromJson(char const*, char const*)+0x154>
   358a0:	e59f1024 	ldr	r1, [pc, #36]	; 358cc <HwManager::setupFromJson(char const*, char const*)+0x234>
   358a4:	e59d0018 	ldr	r0, [sp, #24]
   358a8:	ebffd2b5 	bl	2a384 <strcpy>
   358ac:	eaffffc8 	b	357d4 <HwManager::setupFromJson(char const*, char const*)+0x13c>
   358b0:	00001388 	.word	0x00001388
   358b4:	000483b4 	.word	0x000483b4
   358b8:	00046b78 	.word	0x00046b78
   358bc:	00046a98 	.word	0x00046a98
   358c0:	00046b90 	.word	0x00046b90
   358c4:	00046bb0 	.word	0x00046bb0
   358c8:	00046bb8 	.word	0x00046bb8
   358cc:	000401c4 	.word	0x000401c4
   358d0:	00046b20 	.word	0x00046b20
   358d4:	00045468 	.word	0x00045468
   358d8:	00046bcc 	.word	0x00046bcc
   358dc:	00046b74 	.word	0x00046b74

000358e0 <HwManager::busAccessAvailable()>:
   358e0:	e92d4010 	push	{r4, lr}
   358e4:	e1a04000 	mov	r4, r0
   358e8:	e5900004 	ldr	r0, [r0, #4]
   358ec:	ebffef0c 	bl	31524 <BusAccess::waitIsHeld()>
   358f0:	e3500000 	cmp	r0, #0
   358f4:	05d4003c 	ldrbeq	r0, [r4, #60]	; 0x3c
   358f8:	02200001 	eoreq	r0, r0, #1
   358fc:	13a00000 	movne	r0, #0
   35900:	e8bd8010 	pop	{r4, pc}

00035904 <HwBase::isEnabled()>:
   35904:	e5d0000c 	ldrb	r0, [r0, #12]
   35908:	e12fff1e 	bx	lr

0003590c <HwBase::enable(bool)>:
   3590c:	e5c0100c 	strb	r1, [r0, #12]
   35910:	e12fff1e 	bx	lr

00035914 <HwBase::name()>:
   35914:	e5900010 	ldr	r0, [r0, #16]
   35918:	e12fff1e 	bx	lr

0003591c <BusControlAPI::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   3591c:	e12fff1e 	bx	lr

00035920 <BusControlAPI::BusControlAPI(CommandHandler&, HwManager&, BusAccess&)>:
   35920:	e92d4030 	push	{r4, r5, lr}
   35924:	e3a0e000 	mov	lr, #0
   35928:	e3e04000 	mvn	r4, #0
   3592c:	e59f5034 	ldr	r5, [pc, #52]	; 35968 <BusControlAPI::BusControlAPI(CommandHandler&, HwManager&, BusAccess&)+0x48>
   35930:	e880000e 	stm	r0, {r1, r2, r3}
   35934:	e580400c 	str	r4, [r0, #12]
   35938:	e5850000 	str	r0, [r5]
   3593c:	e5804010 	str	r4, [r0, #16]
   35940:	e5c0e414 	strb	lr, [r0, #1044]	; 0x414
   35944:	e5c0e415 	strb	lr, [r0, #1045]	; 0x415
   35948:	e580e418 	str	lr, [r0, #1048]	; 0x418
   3594c:	e580e41c 	str	lr, [r0, #1052]	; 0x41c
   35950:	e5c0e420 	strb	lr, [r0, #1056]	; 0x420
   35954:	e580e424 	str	lr, [r0, #1060]	; 0x424
   35958:	e5c0e4f0 	strb	lr, [r0, #1264]	; 0x4f0
   3595c:	e5c0e4f1 	strb	lr, [r0, #1265]	; 0x4f1
   35960:	e5c0e4f2 	strb	lr, [r0, #1266]	; 0x4f2
   35964:	e8bd8030 	pop	{r4, r5, pc}
   35968:	0004e55c 	.word	0x0004e55c

0003596c <BusControlAPI::init()>:
   3596c:	e92d4010 	push	{r4, lr}
   35970:	e590300c 	ldr	r3, [r0, #12]
   35974:	e24dd030 	sub	sp, sp, #48	; 0x30
   35978:	e3530000 	cmp	r3, #0
   3597c:	e1a04000 	mov	r4, r0
   35980:	ba00000f 	blt	359c4 <BusControlAPI::init()+0x58>
   35984:	e5943010 	ldr	r3, [r4, #16]
   35988:	e3530000 	cmp	r3, #0
   3598c:	ba000001 	blt	35998 <BusControlAPI::init()+0x2c>
   35990:	e28dd030 	add	sp, sp, #48	; 0x30
   35994:	e8bd8010 	pop	{r4, pc}
   35998:	e3a03000 	mov	r3, #0
   3599c:	e5940000 	ldr	r0, [r4]
   359a0:	e3a02001 	mov	r2, #1
   359a4:	e58d3004 	str	r3, [sp, #4]
   359a8:	e58d3000 	str	r3, [sp]
   359ac:	e1a01004 	mov	r1, r4
   359b0:	e59f3060 	ldr	r3, [pc, #96]	; 35a18 <BusControlAPI::init()+0xac>
   359b4:	ebffe85f 	bl	2fb38 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   359b8:	e5840010 	str	r0, [r4, #16]
   359bc:	e28dd030 	add	sp, sp, #48	; 0x30
   359c0:	e8bd8010 	pop	{r4, pc}
   359c4:	e3a03000 	mov	r3, #0
   359c8:	e3a02004 	mov	r2, #4
   359cc:	e5900008 	ldr	r0, [r0, #8]
   359d0:	e3a01001 	mov	r1, #1
   359d4:	e58d3028 	str	r3, [sp, #40]	; 0x28
   359d8:	e58d3020 	str	r3, [sp, #32]
   359dc:	e58d301c 	str	r3, [sp, #28]
   359e0:	e58d3018 	str	r3, [sp, #24]
   359e4:	e58d3014 	str	r3, [sp, #20]
   359e8:	e58d3010 	str	r3, [sp, #16]
   359ec:	e58d300c 	str	r3, [sp, #12]
   359f0:	e58d3008 	str	r3, [sp, #8]
   359f4:	e58d3004 	str	r3, [sp, #4]
   359f8:	e58d3000 	str	r3, [sp]
   359fc:	e58d2024 	str	r2, [sp, #36]	; 0x24
   35a00:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   35a04:	e59f3010 	ldr	r3, [pc, #16]	; 35a1c <BusControlAPI::init()+0xb0>
   35a08:	e59f2010 	ldr	r2, [pc, #16]	; 35a20 <BusControlAPI::init()+0xb4>
   35a0c:	ebfff5f6 	bl	331ec <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   35a10:	e584000c 	str	r0, [r4, #12]
   35a14:	eaffffda 	b	35984 <BusControlAPI::init()+0x18>
   35a18:	000370ac 	.word	0x000370ac
   35a1c:	0003624c 	.word	0x0003624c
   35a20:	0003591c 	.word	0x0003591c

00035a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>:
   35a24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35a28:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
   35a2c:	e1a08003 	mov	r8, r3
   35a30:	e1a09001 	mov	r9, r1
   35a34:	e1a05002 	mov	r5, r2
   35a38:	e1a01003 	mov	r1, r3
   35a3c:	e28d206c 	add	r2, sp, #108	; 0x6c
   35a40:	e3a030c8 	mov	r3, #200	; 0xc8
   35a44:	e59f01b4 	ldr	r0, [pc, #436]	; 35c00 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1dc>
   35a48:	e5dda16c 	ldrb	sl, [sp, #364]	; 0x16c
   35a4c:	ebffe22b 	bl	2e300 <jsonGetValueForKey>
   35a50:	e2507000 	subs	r7, r0, #0
   35a54:	0a00000e 	beq	35a94 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x70>
   35a58:	e2955001 	adds	r5, r5, #1
   35a5c:	e28d406c 	add	r4, sp, #108	; 0x6c
   35a60:	4a000038 	bmi	35b48 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x124>
   35a64:	e3a0b000 	mov	fp, #0
   35a68:	e59f6194 	ldr	r6, [pc, #404]	; 35c04 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1e0>
   35a6c:	ea000002 	b	35a7c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x58>
   35a70:	e15b0005 	cmp	fp, r5
   35a74:	e2804001 	add	r4, r0, #1
   35a78:	ca000030 	bgt	35b40 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x11c>
   35a7c:	e1a00004 	mov	r0, r4
   35a80:	e1a01006 	mov	r1, r6
   35a84:	ebffd27d 	bl	2a480 <strstr>
   35a88:	e3500000 	cmp	r0, #0
   35a8c:	e28bb001 	add	fp, fp, #1
   35a90:	1afffff6 	bne	35a70 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x4c>
   35a94:	e3a02032 	mov	r2, #50	; 0x32
   35a98:	e1a01009 	mov	r1, r9
   35a9c:	e28d0038 	add	r0, sp, #56	; 0x38
   35aa0:	ebffe160 	bl	2e028 <strlcpy>
   35aa4:	e3a02032 	mov	r2, #50	; 0x32
   35aa8:	e59f1158 	ldr	r1, [pc, #344]	; 35c08 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1e4>
   35aac:	e28d0038 	add	r0, sp, #56	; 0x38
   35ab0:	ebffe178 	bl	2e098 <strlcat>
   35ab4:	e1a00009 	mov	r0, r9
   35ab8:	e28d2004 	add	r2, sp, #4
   35abc:	e3a03032 	mov	r3, #50	; 0x32
   35ac0:	e1a01008 	mov	r1, r8
   35ac4:	ebffe20d 	bl	2e300 <jsonGetValueForKey>
   35ac8:	e2507000 	subs	r7, r0, #0
   35acc:	0a000034 	beq	35ba4 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x180>
   35ad0:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   35ad4:	e3530000 	cmp	r3, #0
   35ad8:	0a000003 	beq	35aec <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xc8>
   35adc:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   35ae0:	e28d1004 	add	r1, sp, #4
   35ae4:	e1a00003 	mov	r0, r3
   35ae8:	ebffe14e 	bl	2e028 <strlcpy>
   35aec:	e35a0000 	cmp	sl, #0
   35af0:	0a000009 	beq	35b1c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xf8>
   35af4:	e28d0004 	add	r0, sp, #4
   35af8:	e3a0200a 	mov	r2, #10
   35afc:	e3a01000 	mov	r1, #0
   35b00:	ebffd2ae 	bl	2a5c0 <strtoul>
   35b04:	e1a0700a 	mov	r7, sl
   35b08:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   35b0c:	e5830000 	str	r0, [r3]
   35b10:	e1a00007 	mov	r0, r7
   35b14:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   35b18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35b1c:	e1a0100a 	mov	r1, sl
   35b20:	e28d0004 	add	r0, sp, #4
   35b24:	e3a02010 	mov	r2, #16
   35b28:	ebffd2a4 	bl	2a5c0 <strtoul>
   35b2c:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   35b30:	e5830000 	str	r0, [r3]
   35b34:	e1a00007 	mov	r0, r7
   35b38:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   35b3c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35b40:	e3540000 	cmp	r4, #0
   35b44:	0affffd2 	beq	35a94 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x70>
   35b48:	e1a00004 	mov	r0, r4
   35b4c:	ebffd14e 	bl	2a08c <strlen>
   35b50:	e3500000 	cmp	r0, #0
   35b54:	0affffce 	beq	35a94 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x70>
   35b58:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   35b5c:	e3530000 	cmp	r3, #0
   35b60:	0a000003 	beq	35b74 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x150>
   35b64:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   35b68:	e1a01004 	mov	r1, r4
   35b6c:	e1a00003 	mov	r0, r3
   35b70:	ebffe12c 	bl	2e028 <strlcpy>
   35b74:	e35a0000 	cmp	sl, #0
   35b78:	11a00004 	movne	r0, r4
   35b7c:	1affffdd 	bne	35af8 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xd4>
   35b80:	e1a0100a 	mov	r1, sl
   35b84:	e1a00004 	mov	r0, r4
   35b88:	e3a02010 	mov	r2, #16
   35b8c:	ebffd28b 	bl	2a5c0 <strtoul>
   35b90:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   35b94:	e5830000 	str	r0, [r3]
   35b98:	e1a00007 	mov	r0, r7
   35b9c:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   35ba0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35ba4:	e1a01008 	mov	r1, r8
   35ba8:	e28d0038 	add	r0, sp, #56	; 0x38
   35bac:	e3a03032 	mov	r3, #50	; 0x32
   35bb0:	e28d2004 	add	r2, sp, #4
   35bb4:	ebffe1d1 	bl	2e300 <jsonGetValueForKey>
   35bb8:	e2507000 	subs	r7, r0, #0
   35bbc:	0affffdc 	beq	35b34 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x110>
   35bc0:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   35bc4:	e3530000 	cmp	r3, #0
   35bc8:	0a000003 	beq	35bdc <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1b8>
   35bcc:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   35bd0:	e28d1004 	add	r1, sp, #4
   35bd4:	e1a00003 	mov	r0, r3
   35bd8:	ebffe112 	bl	2e028 <strlcpy>
   35bdc:	e28d0004 	add	r0, sp, #4
   35be0:	e3a0200a 	mov	r2, #10
   35be4:	e3a01000 	mov	r1, #0
   35be8:	ebffd274 	bl	2a5c0 <strtoul>
   35bec:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   35bf0:	e5830000 	str	r0, [r3]
   35bf4:	e1a00007 	mov	r0, r7
   35bf8:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   35bfc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35c00:	00046c54 	.word	0x00046c54
   35c04:	00047170 	.word	0x00047170
   35c08:	00045908 	.word	0x00045908

00035c0c <BusControlAPI::busLineHandler(char const*)>:
   35c0c:	e92d4070 	push	{r4, r5, r6, lr}
   35c10:	e1a04001 	mov	r4, r1
   35c14:	e3a01032 	mov	r1, #50	; 0x32
   35c18:	e3a05000 	mov	r5, #0
   35c1c:	e24dd050 	sub	sp, sp, #80	; 0x50
   35c20:	e28d2014 	add	r2, sp, #20
   35c24:	e58d1008 	str	r1, [sp, #8]
   35c28:	e28d101c 	add	r1, sp, #28
   35c2c:	e58d1004 	str	r1, [sp, #4]
   35c30:	e58d2000 	str	r2, [sp]
   35c34:	e1a03004 	mov	r3, r4
   35c38:	e58d500c 	str	r5, [sp, #12]
   35c3c:	e3a02001 	mov	r2, #1
   35c40:	e59f129c 	ldr	r1, [pc, #668]	; 35ee4 <BusControlAPI::busLineHandler(char const*)+0x2d8>
   35c44:	e1a06000 	mov	r6, r0
   35c48:	ebffff75 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35c4c:	e1500005 	cmp	r0, r5
   35c50:	1a000003 	bne	35c64 <BusControlAPI::busLineHandler(char const*)+0x58>
   35c54:	e3a04000 	mov	r4, #0
   35c58:	e1a00004 	mov	r0, r4
   35c5c:	e28dd050 	add	sp, sp, #80	; 0x50
   35c60:	e8bd8070 	pop	{r4, r5, r6, pc}
   35c64:	e59f127c 	ldr	r1, [pc, #636]	; 35ee8 <BusControlAPI::busLineHandler(char const*)+0x2dc>
   35c68:	e28d001c 	add	r0, sp, #28
   35c6c:	ebffd203 	bl	2a480 <strstr>
   35c70:	e3a02000 	mov	r2, #0
   35c74:	e3500000 	cmp	r0, #0
   35c78:	e28d1050 	add	r1, sp, #80	; 0x50
   35c7c:	15c05000 	strbne	r5, [r0]
   35c80:	e5212038 	str	r2, [r1, #-56]!	; 0xffffffc8
   35c84:	e88d0006 	stm	sp, {r1, r2}
   35c88:	e1a03004 	mov	r3, r4
   35c8c:	e58d200c 	str	r2, [sp, #12]
   35c90:	e58d2008 	str	r2, [sp, #8]
   35c94:	e59f1250 	ldr	r1, [pc, #592]	; 35eec <BusControlAPI::busLineHandler(char const*)+0x2e0>
   35c98:	e3a02002 	mov	r2, #2
   35c9c:	e1a00006 	mov	r0, r6
   35ca0:	ebffff5f 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35ca4:	e2504000 	subs	r4, r0, #0
   35ca8:	0affffe9 	beq	35c54 <BusControlAPI::busLineHandler(char const*)+0x48>
   35cac:	e5965008 	ldr	r5, [r6, #8]
   35cb0:	ebffc3c9 	bl	26bdc <CLogger::Get()>
   35cb4:	e59d3018 	ldr	r3, [sp, #24]
   35cb8:	e28d201c 	add	r2, sp, #28
   35cbc:	e88d000c 	stm	sp, {r2, r3}
   35cc0:	e59f1228 	ldr	r1, [pc, #552]	; 35ef0 <BusControlAPI::busLineHandler(char const*)+0x2e4>
   35cc4:	e59f3228 	ldr	r3, [pc, #552]	; 35ef4 <BusControlAPI::busLineHandler(char const*)+0x2e8>
   35cc8:	e3a02004 	mov	r2, #4
   35ccc:	ebffc2ff 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   35cd0:	e59f1220 	ldr	r1, [pc, #544]	; 35ef8 <BusControlAPI::busLineHandler(char const*)+0x2ec>
   35cd4:	e28d001c 	add	r0, sp, #28
   35cd8:	ebffd110 	bl	2a120 <strcasecmp>
   35cdc:	e3500000 	cmp	r0, #0
   35ce0:	0a000036 	beq	35dc0 <BusControlAPI::busLineHandler(char const*)+0x1b4>
   35ce4:	e59f1210 	ldr	r1, [pc, #528]	; 35efc <BusControlAPI::busLineHandler(char const*)+0x2f0>
   35ce8:	e28d001c 	add	r0, sp, #28
   35cec:	ebffd10b 	bl	2a120 <strcasecmp>
   35cf0:	e3500000 	cmp	r0, #0
   35cf4:	0a00003e 	beq	35df4 <BusControlAPI::busLineHandler(char const*)+0x1e8>
   35cf8:	e59f1200 	ldr	r1, [pc, #512]	; 35f00 <BusControlAPI::busLineHandler(char const*)+0x2f4>
   35cfc:	e28d001c 	add	r0, sp, #28
   35d00:	ebffd106 	bl	2a120 <strcasecmp>
   35d04:	e2501000 	subs	r1, r0, #0
   35d08:	0a000033 	beq	35ddc <BusControlAPI::busLineHandler(char const*)+0x1d0>
   35d0c:	e59f11f0 	ldr	r1, [pc, #496]	; 35f04 <BusControlAPI::busLineHandler(char const*)+0x2f8>
   35d10:	e28d001c 	add	r0, sp, #28
   35d14:	ebffd101 	bl	2a120 <strcasecmp>
   35d18:	e3500000 	cmp	r0, #0
   35d1c:	0a00003b 	beq	35e10 <BusControlAPI::busLineHandler(char const*)+0x204>
   35d20:	e59f11e0 	ldr	r1, [pc, #480]	; 35f08 <BusControlAPI::busLineHandler(char const*)+0x2fc>
   35d24:	e28d001c 	add	r0, sp, #28
   35d28:	ebffd0fc 	bl	2a120 <strcasecmp>
   35d2c:	e3500000 	cmp	r0, #0
   35d30:	0a000036 	beq	35e10 <BusControlAPI::busLineHandler(char const*)+0x204>
   35d34:	e59f11d0 	ldr	r1, [pc, #464]	; 35f0c <BusControlAPI::busLineHandler(char const*)+0x300>
   35d38:	e28d001c 	add	r0, sp, #28
   35d3c:	ebffd0f7 	bl	2a120 <strcasecmp>
   35d40:	e3500000 	cmp	r0, #0
   35d44:	0a000038 	beq	35e2c <BusControlAPI::busLineHandler(char const*)+0x220>
   35d48:	e59f11c0 	ldr	r1, [pc, #448]	; 35f10 <BusControlAPI::busLineHandler(char const*)+0x304>
   35d4c:	e28d001c 	add	r0, sp, #28
   35d50:	ebffd0f2 	bl	2a120 <strcasecmp>
   35d54:	e3500000 	cmp	r0, #0
   35d58:	0a00003a 	beq	35e48 <BusControlAPI::busLineHandler(char const*)+0x23c>
   35d5c:	e59f11b0 	ldr	r1, [pc, #432]	; 35f14 <BusControlAPI::busLineHandler(char const*)+0x308>
   35d60:	e28d001c 	add	r0, sp, #28
   35d64:	ebffd0ed 	bl	2a120 <strcasecmp>
   35d68:	e3500000 	cmp	r0, #0
   35d6c:	0a00003c 	beq	35e64 <BusControlAPI::busLineHandler(char const*)+0x258>
   35d70:	e59f11a0 	ldr	r1, [pc, #416]	; 35f18 <BusControlAPI::busLineHandler(char const*)+0x30c>
   35d74:	e28d001c 	add	r0, sp, #28
   35d78:	ebffd0e8 	bl	2a120 <strcasecmp>
   35d7c:	e3500000 	cmp	r0, #0
   35d80:	0a00003e 	beq	35e80 <BusControlAPI::busLineHandler(char const*)+0x274>
   35d84:	e59f1190 	ldr	r1, [pc, #400]	; 35f1c <BusControlAPI::busLineHandler(char const*)+0x310>
   35d88:	e28d001c 	add	r0, sp, #28
   35d8c:	ebffd0e3 	bl	2a120 <strcasecmp>
   35d90:	e3500000 	cmp	r0, #0
   35d94:	1a000040 	bne	35e9c <BusControlAPI::busLineHandler(char const*)+0x290>
   35d98:	e5953000 	ldr	r3, [r5]
   35d9c:	e3530011 	cmp	r3, #17
   35da0:	1affffac 	bne	35c58 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35da4:	e59d2018 	ldr	r2, [sp, #24]
   35da8:	e1a00005 	mov	r0, r5
   35dac:	e2922000 	adds	r2, r2, #0
   35db0:	13a02001 	movne	r2, #1
   35db4:	e3a01003 	mov	r1, #3
   35db8:	ebfff96d 	bl	34374 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35dbc:	eaffffa5 	b	35c58 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35dc0:	e59d2018 	ldr	r2, [sp, #24]
   35dc4:	e1a00005 	mov	r0, r5
   35dc8:	e2922000 	adds	r2, r2, #0
   35dcc:	13a02001 	movne	r2, #1
   35dd0:	e3a01011 	mov	r1, #17
   35dd4:	ebfff966 	bl	34374 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35dd8:	eaffff9e 	b	35c58 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35ddc:	e59d2018 	ldr	r2, [sp, #24]
   35de0:	e1a00005 	mov	r0, r5
   35de4:	e2922000 	adds	r2, r2, #0
   35de8:	13a02001 	movne	r2, #1
   35dec:	ebfff960 	bl	34374 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35df0:	eaffff98 	b	35c58 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35df4:	e59d2018 	ldr	r2, [sp, #24]
   35df8:	e1a00005 	mov	r0, r5
   35dfc:	e2922000 	adds	r2, r2, #0
   35e00:	13a02001 	movne	r2, #1
   35e04:	e3a01012 	mov	r1, #18
   35e08:	ebfff959 	bl	34374 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35e0c:	eaffff91 	b	35c58 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35e10:	e59d2018 	ldr	r2, [sp, #24]
   35e14:	e1a00005 	mov	r0, r5
   35e18:	e2922000 	adds	r2, r2, #0
   35e1c:	13a02001 	movne	r2, #1
   35e20:	e3a01001 	mov	r1, #1
   35e24:	ebfff952 	bl	34374 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35e28:	eaffff8a 	b	35c58 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35e2c:	e59d2018 	ldr	r2, [sp, #24]
   35e30:	e1a00005 	mov	r0, r5
   35e34:	e2922000 	adds	r2, r2, #0
   35e38:	13a02001 	movne	r2, #1
   35e3c:	e3a01006 	mov	r1, #6
   35e40:	ebfff94b 	bl	34374 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35e44:	eaffff83 	b	35c58 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35e48:	e59d2018 	ldr	r2, [sp, #24]
   35e4c:	e1a00005 	mov	r0, r5
   35e50:	e2922000 	adds	r2, r2, #0
   35e54:	13a02001 	movne	r2, #1
   35e58:	e3a0100c 	mov	r1, #12
   35e5c:	ebfff944 	bl	34374 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35e60:	eaffff7c 	b	35c58 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35e64:	e59d2018 	ldr	r2, [sp, #24]
   35e68:	e1a00005 	mov	r0, r5
   35e6c:	e2922000 	adds	r2, r2, #0
   35e70:	13a02001 	movne	r2, #1
   35e74:	e3a0100d 	mov	r1, #13
   35e78:	ebfff93d 	bl	34374 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35e7c:	eaffff75 	b	35c58 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35e80:	e59d2018 	ldr	r2, [sp, #24]
   35e84:	e1a00005 	mov	r0, r5
   35e88:	e2922000 	adds	r2, r2, #0
   35e8c:	13a02001 	movne	r2, #1
   35e90:	e3a01007 	mov	r1, #7
   35e94:	ebfff936 	bl	34374 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35e98:	eaffff6e 	b	35c58 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35e9c:	e59f107c 	ldr	r1, [pc, #124]	; 35f20 <BusControlAPI::busLineHandler(char const*)+0x314>
   35ea0:	e28d001c 	add	r0, sp, #28
   35ea4:	ebffd09d 	bl	2a120 <strcasecmp>
   35ea8:	e3500000 	cmp	r0, #0
   35eac:	0a000005 	beq	35ec8 <BusControlAPI::busLineHandler(char const*)+0x2bc>
   35eb0:	e28d001c 	add	r0, sp, #28
   35eb4:	e59f1068 	ldr	r1, [pc, #104]	; 35f24 <BusControlAPI::busLineHandler(char const*)+0x318>
   35eb8:	ebffd098 	bl	2a120 <strcasecmp>
   35ebc:	e3500000 	cmp	r0, #0
   35ec0:	1affff64 	bne	35c58 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35ec4:	eaffffb6 	b	35da4 <BusControlAPI::busLineHandler(char const*)+0x198>
   35ec8:	e59d2018 	ldr	r2, [sp, #24]
   35ecc:	e1a00005 	mov	r0, r5
   35ed0:	e2922000 	adds	r2, r2, #0
   35ed4:	13a02001 	movne	r2, #1
   35ed8:	e3a01004 	mov	r1, #4
   35edc:	ebfff924 	bl	34374 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35ee0:	eaffff5c 	b	35c58 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35ee4:	00046c5c 	.word	0x00046c5c
   35ee8:	00047170 	.word	0x00047170
   35eec:	00046c64 	.word	0x00046c64
   35ef0:	00046c44 	.word	0x00046c44
   35ef4:	00046c6c 	.word	0x00046c6c
   35ef8:	00046c80 	.word	0x00046c80
   35efc:	00046c84 	.word	0x00046c84
   35f00:	00046c88 	.word	0x00046c88
   35f04:	00046c90 	.word	0x00046c90
   35f08:	00046c98 	.word	0x00046c98
   35f0c:	00046ca0 	.word	0x00046ca0
   35f10:	00046cac 	.word	0x00046cac
   35f14:	00046cbc 	.word	0x00046cbc
   35f18:	00046ccc 	.word	0x00046ccc
   35f1c:	00046cd8 	.word	0x00046cd8
   35f20:	00046ce4 	.word	0x00046ce4
   35f24:	00046cec 	.word	0x00046cec

00035f28 <BusControlAPI::muxLineHandler(char const*)>:
   35f28:	e92d4070 	push	{r4, r5, r6, lr}
   35f2c:	e3a0c032 	mov	ip, #50	; 0x32
   35f30:	e3a04000 	mov	r4, #0
   35f34:	e24dd048 	sub	sp, sp, #72	; 0x48
   35f38:	e28d2010 	add	r2, sp, #16
   35f3c:	e1a03001 	mov	r3, r1
   35f40:	e28d1014 	add	r1, sp, #20
   35f44:	e58d1004 	str	r1, [sp, #4]
   35f48:	e58d2000 	str	r2, [sp]
   35f4c:	e58d400c 	str	r4, [sp, #12]
   35f50:	e58dc008 	str	ip, [sp, #8]
   35f54:	e3a02001 	mov	r2, #1
   35f58:	e59f1170 	ldr	r1, [pc, #368]	; 360d0 <BusControlAPI::muxLineHandler(char const*)+0x1a8>
   35f5c:	e1a06000 	mov	r6, r0
   35f60:	ebfffeaf 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35f64:	e2505000 	subs	r5, r0, #0
   35f68:	1a000002 	bne	35f78 <BusControlAPI::muxLineHandler(char const*)+0x50>
   35f6c:	e1a00005 	mov	r0, r5
   35f70:	e28dd048 	add	sp, sp, #72	; 0x48
   35f74:	e8bd8070 	pop	{r4, r5, r6, pc}
   35f78:	e59f1154 	ldr	r1, [pc, #340]	; 360d4 <BusControlAPI::muxLineHandler(char const*)+0x1ac>
   35f7c:	e28d0014 	add	r0, sp, #20
   35f80:	ebffd13e 	bl	2a480 <strstr>
   35f84:	e3500000 	cmp	r0, #0
   35f88:	15c04000 	strbne	r4, [r0]
   35f8c:	ebffc312 	bl	26bdc <CLogger::Get()>
   35f90:	e28d3014 	add	r3, sp, #20
   35f94:	e58d3000 	str	r3, [sp]
   35f98:	e3a02004 	mov	r2, #4
   35f9c:	e59f3134 	ldr	r3, [pc, #308]	; 360d8 <BusControlAPI::muxLineHandler(char const*)+0x1b0>
   35fa0:	e59f1134 	ldr	r1, [pc, #308]	; 360dc <BusControlAPI::muxLineHandler(char const*)+0x1b4>
   35fa4:	ebffc249 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   35fa8:	e59f1130 	ldr	r1, [pc, #304]	; 360e0 <BusControlAPI::muxLineHandler(char const*)+0x1b8>
   35fac:	e28d0014 	add	r0, sp, #20
   35fb0:	e5964008 	ldr	r4, [r6, #8]
   35fb4:	ebffd059 	bl	2a120 <strcasecmp>
   35fb8:	e2501000 	subs	r1, r0, #0
   35fbc:	0a00002a 	beq	3606c <BusControlAPI::muxLineHandler(char const*)+0x144>
   35fc0:	e59f111c 	ldr	r1, [pc, #284]	; 360e4 <BusControlAPI::muxLineHandler(char const*)+0x1bc>
   35fc4:	e28d0014 	add	r0, sp, #20
   35fc8:	ebffd054 	bl	2a120 <strcasecmp>
   35fcc:	e3500000 	cmp	r0, #0
   35fd0:	0a000021 	beq	3605c <BusControlAPI::muxLineHandler(char const*)+0x134>
   35fd4:	e59f110c 	ldr	r1, [pc, #268]	; 360e8 <BusControlAPI::muxLineHandler(char const*)+0x1c0>
   35fd8:	e28d0014 	add	r0, sp, #20
   35fdc:	ebffd04f 	bl	2a120 <strcasecmp>
   35fe0:	e3500000 	cmp	r0, #0
   35fe4:	0a000025 	beq	36080 <BusControlAPI::muxLineHandler(char const*)+0x158>
   35fe8:	e59f10fc 	ldr	r1, [pc, #252]	; 360ec <BusControlAPI::muxLineHandler(char const*)+0x1c4>
   35fec:	e28d0014 	add	r0, sp, #20
   35ff0:	ebffd04a 	bl	2a120 <strcasecmp>
   35ff4:	e3500000 	cmp	r0, #0
   35ff8:	0a000028 	beq	360a0 <BusControlAPI::muxLineHandler(char const*)+0x178>
   35ffc:	e59f10ec 	ldr	r1, [pc, #236]	; 360f0 <BusControlAPI::muxLineHandler(char const*)+0x1c8>
   36000:	e28d0014 	add	r0, sp, #20
   36004:	ebffd045 	bl	2a120 <strcasecmp>
   36008:	e3500000 	cmp	r0, #0
   3600c:	0a00001f 	beq	36090 <BusControlAPI::muxLineHandler(char const*)+0x168>
   36010:	e59f10dc 	ldr	r1, [pc, #220]	; 360f4 <BusControlAPI::muxLineHandler(char const*)+0x1cc>
   36014:	e28d0014 	add	r0, sp, #20
   36018:	ebffd040 	bl	2a120 <strcasecmp>
   3601c:	e3500000 	cmp	r0, #0
   36020:	0a000022 	beq	360b0 <BusControlAPI::muxLineHandler(char const*)+0x188>
   36024:	e59f10cc 	ldr	r1, [pc, #204]	; 360f8 <BusControlAPI::muxLineHandler(char const*)+0x1d0>
   36028:	e28d0014 	add	r0, sp, #20
   3602c:	ebffd03b 	bl	2a120 <strcasecmp>
   36030:	e3500000 	cmp	r0, #0
   36034:	0a000021 	beq	360c0 <BusControlAPI::muxLineHandler(char const*)+0x198>
   36038:	e28d0014 	add	r0, sp, #20
   3603c:	e59f10b8 	ldr	r1, [pc, #184]	; 360fc <BusControlAPI::muxLineHandler(char const*)+0x1d4>
   36040:	ebffd036 	bl	2a120 <strcasecmp>
   36044:	e3500000 	cmp	r0, #0
   36048:	1affffc7 	bne	35f6c <BusControlAPI::muxLineHandler(char const*)+0x44>
   3604c:	e1a00004 	mov	r0, r4
   36050:	e3a01007 	mov	r1, #7
   36054:	ebfff8e7 	bl	343f8 <BusAccess::rawBusControlMuxSet(unsigned long)>
   36058:	eaffffc3 	b	35f6c <BusControlAPI::muxLineHandler(char const*)+0x44>
   3605c:	e1a00004 	mov	r0, r4
   36060:	e3a01004 	mov	r1, #4
   36064:	ebfff8e3 	bl	343f8 <BusAccess::rawBusControlMuxSet(unsigned long)>
   36068:	eaffffbf 	b	35f6c <BusControlAPI::muxLineHandler(char const*)+0x44>
   3606c:	e1a00004 	mov	r0, r4
   36070:	ebfff8e0 	bl	343f8 <BusAccess::rawBusControlMuxSet(unsigned long)>
   36074:	e1a00005 	mov	r0, r5
   36078:	e28dd048 	add	sp, sp, #72	; 0x48
   3607c:	e8bd8070 	pop	{r4, r5, r6, pc}
   36080:	e1a00004 	mov	r0, r4
   36084:	e3a01001 	mov	r1, #1
   36088:	ebfff8da 	bl	343f8 <BusAccess::rawBusControlMuxSet(unsigned long)>
   3608c:	eaffffb6 	b	35f6c <BusControlAPI::muxLineHandler(char const*)+0x44>
   36090:	e1a00004 	mov	r0, r4
   36094:	e3a01002 	mov	r1, #2
   36098:	ebfff8d6 	bl	343f8 <BusAccess::rawBusControlMuxSet(unsigned long)>
   3609c:	eaffffb2 	b	35f6c <BusControlAPI::muxLineHandler(char const*)+0x44>
   360a0:	e1a00004 	mov	r0, r4
   360a4:	e3a01005 	mov	r1, #5
   360a8:	ebfff8d2 	bl	343f8 <BusAccess::rawBusControlMuxSet(unsigned long)>
   360ac:	eaffffae 	b	35f6c <BusControlAPI::muxLineHandler(char const*)+0x44>
   360b0:	e1a00004 	mov	r0, r4
   360b4:	e3a01006 	mov	r1, #6
   360b8:	ebfff8ce 	bl	343f8 <BusAccess::rawBusControlMuxSet(unsigned long)>
   360bc:	eaffffaa 	b	35f6c <BusControlAPI::muxLineHandler(char const*)+0x44>
   360c0:	e1a00004 	mov	r0, r4
   360c4:	e3a01003 	mov	r1, #3
   360c8:	ebfff8ca 	bl	343f8 <BusAccess::rawBusControlMuxSet(unsigned long)>
   360cc:	eaffffa6 	b	35f6c <BusControlAPI::muxLineHandler(char const*)+0x44>
   360d0:	00046c5c 	.word	0x00046c5c
   360d4:	00047170 	.word	0x00047170
   360d8:	00046cf0 	.word	0x00046cf0
   360dc:	00046c44 	.word	0x00046c44
   360e0:	00046cfc 	.word	0x00046cfc
   360e4:	00046d08 	.word	0x00046d08
   360e8:	00046d18 	.word	0x00046d18
   360ec:	0003f5b4 	.word	0x0003f5b4
   360f0:	00046d24 	.word	0x00046d24
   360f4:	00046d28 	.word	0x00046d28
   360f8:	00046d2c 	.word	0x00046d2c
   360fc:	00046d3c 	.word	0x00046d3c

00036100 <BusControlAPI::busLinesRead(char*, int)>:
   36100:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   36104:	e5906008 	ldr	r6, [r0, #8]
   36108:	e24dd01c 	sub	sp, sp, #28
   3610c:	e1a00006 	mov	r0, r6
   36110:	e1a08002 	mov	r8, r2
   36114:	e1a07001 	mov	r7, r1
   36118:	ebfff884 	bl	34330 <BusAccess::rawBusControlReadRaw()>
   3611c:	e5963000 	ldr	r3, [r6]
   36120:	e1a05000 	mov	r5, r0
   36124:	e3530011 	cmp	r3, #17
   36128:	11a021a0 	lsrne	r2, r0, #3
   3612c:	01a02a20 	lsreq	r2, r0, #20
   36130:	e1a00006 	mov	r0, r6
   36134:	e2024001 	and	r4, r2, #1
   36138:	ebfff87c 	bl	34330 <BusAccess::rawBusControlReadRaw()>
   3613c:	e1a09000 	mov	r9, r0
   36140:	e1a00006 	mov	r0, r6
   36144:	ebfff879 	bl	34330 <BusAccess::rawBusControlReadRaw()>
   36148:	e3150001 	tst	r5, #1
   3614c:	13a0604d 	movne	r6, #77	; 0x4d
   36150:	03a0602e 	moveq	r6, #46	; 0x2e
   36154:	e3150002 	tst	r5, #2
   36158:	13a0e049 	movne	lr, #73	; 0x49
   3615c:	03a0e02e 	moveq	lr, #46	; 0x2e
   36160:	e3150701 	tst	r5, #262144	; 0x40000
   36164:	13a0c052 	movne	ip, #82	; 0x52
   36168:	03a0c02e 	moveq	ip, #46	; 0x2e
   3616c:	e3150802 	tst	r5, #131072	; 0x20000
   36170:	13a05057 	movne	r5, #87	; 0x57
   36174:	03a0502e 	moveq	r5, #46	; 0x2e
   36178:	e3540000 	cmp	r4, #0
   3617c:	13a02031 	movne	r2, #49	; 0x31
   36180:	03a0202e 	moveq	r2, #46	; 0x2e
   36184:	e1a00a20 	lsr	r0, r0, #20
   36188:	e6ef0070 	uxtb	r0, r0
   3618c:	e58d0000 	str	r0, [sp]
   36190:	e58d2014 	str	r2, [sp, #20]
   36194:	e1a03009 	mov	r3, r9
   36198:	e1a01008 	mov	r1, r8
   3619c:	e1a00007 	mov	r0, r7
   361a0:	e98d4040 	stmib	sp, {r6, lr}
   361a4:	e58dc00c 	str	ip, [sp, #12]
   361a8:	e58d5010 	str	r5, [sp, #16]
   361ac:	e59f2008 	ldr	r2, [pc, #8]	; 361bc <BusControlAPI::busLinesRead(char*, int)+0xbc>
   361b0:	ebffe013 	bl	2e204 <snprintf>
   361b4:	e28dd01c 	add	sp, sp, #28
   361b8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   361bc:	00046d4c 	.word	0x00046d4c

000361c0 <BusControlAPI::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   361c0:	e3510004 	cmp	r1, #4
   361c4:	112fff1e 	bxne	lr
   361c8:	e5d03414 	ldrb	r3, [r0, #1044]	; 0x414
   361cc:	e3530000 	cmp	r3, #0
   361d0:	012fff1e 	bxeq	lr
   361d4:	e92d4010 	push	{r4, lr}
   361d8:	e5d02415 	ldrb	r2, [r0, #1045]	; 0x415
   361dc:	e1a04000 	mov	r4, r0
   361e0:	e3520000 	cmp	r2, #0
   361e4:	e24dd010 	sub	sp, sp, #16
   361e8:	e5900004 	ldr	r0, [r0, #4]
   361ec:	0a00000b 	beq	36220 <BusControlAPI::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x60>
   361f0:	e3a02000 	mov	r2, #0
   361f4:	e5d4c420 	ldrb	ip, [r4, #1056]	; 0x420
   361f8:	e5943418 	ldr	r3, [r4, #1048]	; 0x418
   361fc:	e594141c 	ldr	r1, [r4, #1052]	; 0x41c
   36200:	e58d2008 	str	r2, [sp, #8]
   36204:	e88d1004 	stm	sp, {r2, ip}
   36208:	e2842014 	add	r2, r4, #20
   3620c:	ebfffa99 	bl	34c78 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
   36210:	e3a03000 	mov	r3, #0
   36214:	e5c43414 	strb	r3, [r4, #1044]	; 0x414
   36218:	e28dd010 	add	sp, sp, #16
   3621c:	e8bd8010 	pop	{r4, pc}
   36220:	e5d4c420 	ldrb	ip, [r4, #1056]	; 0x420
   36224:	e5943418 	ldr	r3, [r4, #1048]	; 0x418
   36228:	e594141c 	ldr	r1, [r4, #1052]	; 0x41c
   3622c:	e58d2008 	str	r2, [sp, #8]
   36230:	e88d1004 	stm	sp, {r2, ip}
   36234:	e2842014 	add	r2, r4, #20
   36238:	ebfffacd 	bl	34d74 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   3623c:	e3a03000 	mov	r3, #0
   36240:	e5c43414 	strb	r3, [r4, #1044]	; 0x414
   36244:	e28dd010 	add	sp, sp, #16
   36248:	e8bd8010 	pop	{r4, pc}

0003624c <BusControlAPI::busActionCompleteStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   3624c:	e3500000 	cmp	r0, #0
   36250:	012fff1e 	bxeq	lr
   36254:	eaffffd9 	b	361c0 <BusControlAPI::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>

00036258 <BusControlAPI::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   36258:	e12fff1e 	bx	lr

0003625c <BusControlAPI::service()>:
   3625c:	e12fff1e 	bx	lr

00036260 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)>:
   36260:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36264:	e1a09003 	mov	r9, r3
   36268:	e3a03001 	mov	r3, #1
   3626c:	e3590b01 	cmp	r9, #1024	; 0x400
   36270:	e1a0a002 	mov	sl, r2
   36274:	83a02b01 	movhi	r2, #1024	; 0x400
   36278:	e5dd8024 	ldrb	r8, [sp, #36]	; 0x24
   3627c:	e5c03414 	strb	r3, [r0, #1044]	; 0x414
   36280:	e5dd3020 	ldrb	r3, [sp, #32]
   36284:	95809418 	strls	r9, [r0, #1048]	; 0x418
   36288:	85802418 	strhi	r2, [r0, #1048]	; 0x418
   3628c:	e3580000 	cmp	r8, #0
   36290:	e1a04000 	mov	r4, r0
   36294:	e5c08415 	strb	r8, [r0, #1045]	; 0x415
   36298:	e580141c 	str	r1, [r0, #1052]	; 0x41c
   3629c:	e5c03420 	strb	r3, [r0, #1056]	; 0x420
   362a0:	1a00001d 	bne	3631c <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xbc>
   362a4:	e5947008 	ldr	r7, [r4, #8]
   362a8:	e3a02004 	mov	r2, #4
   362ac:	e1a00007 	mov	r0, r7
   362b0:	e594100c 	ldr	r1, [r4, #12]
   362b4:	ebffece9 	bl	31660 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   362b8:	ebffdf1f 	bl	2df3c <micros>
   362bc:	e59f5084 	ldr	r5, [pc, #132]	; 36348 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xe8>
   362c0:	e1a06000 	mov	r6, r0
   362c4:	ea000003 	b	362d8 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0x78>
   362c8:	e3530000 	cmp	r3, #0
   362cc:	0a00000e 	beq	3630c <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xac>
   362d0:	e1a00007 	mov	r0, r7
   362d4:	ebffef95 	bl	32130 <BusAccess::service()>
   362d8:	ebffdf17 	bl	2df3c <micros>
   362dc:	e1a02005 	mov	r2, r5
   362e0:	e1a01006 	mov	r1, r6
   362e4:	ebffdf32 	bl	2dfb4 <isTimeout>
   362e8:	e3500000 	cmp	r0, #0
   362ec:	e5d43414 	ldrb	r3, [r4, #1044]	; 0x414
   362f0:	0afffff4 	beq	362c8 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0x68>
   362f4:	e3530000 	cmp	r3, #0
   362f8:	0a000003 	beq	3630c <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xac>
   362fc:	e3a03000 	mov	r3, #0
   36300:	e3a00002 	mov	r0, #2
   36304:	e5c43414 	strb	r3, [r4, #1044]	; 0x414
   36308:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3630c:	e3580000 	cmp	r8, #0
   36310:	0a000006 	beq	36330 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xd0>
   36314:	e3a00000 	mov	r0, #0
   36318:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3631c:	e1a02009 	mov	r2, r9
   36320:	e1a0100a 	mov	r1, sl
   36324:	e2800014 	add	r0, r0, #20
   36328:	ebffd17c 	bl	2a920 <memcpy>
   3632c:	eaffffdc 	b	362a4 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0x44>
   36330:	e1a02009 	mov	r2, r9
   36334:	e2841014 	add	r1, r4, #20
   36338:	e1a0000a 	mov	r0, sl
   3633c:	ebffd177 	bl	2a920 <memcpy>
   36340:	e1a00008 	mov	r0, r8
   36344:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36348:	0000c350 	.word	0x0000c350

0003634c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   3634c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36350:	e24ddecb 	sub	sp, sp, #3248	; 0xcb0
   36354:	e24dd00c 	sub	sp, sp, #12
   36358:	e1a05000 	mov	r5, r0
   3635c:	e1a09002 	mov	r9, r2
   36360:	e1a08003 	mov	r8, r3
   36364:	e28d2020 	add	r2, sp, #32
   36368:	e3a03032 	mov	r3, #50	; 0x32
   3636c:	e59f0c38 	ldr	r0, [pc, #3128]	; 36fac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc60>
   36370:	e1a07001 	mov	r7, r1
   36374:	ebffdfe1 	bl	2e300 <jsonGetValueForKey>
   36378:	e2504000 	subs	r4, r0, #0
   3637c:	1a000004 	bne	36394 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x48>
   36380:	e3a04000 	mov	r4, #0
   36384:	e1a00004 	mov	r0, r4
   36388:	e28ddecb 	add	sp, sp, #3248	; 0xcb0
   3638c:	e28dd00c 	add	sp, sp, #12
   36390:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36394:	e59f1c14 	ldr	r1, [pc, #3092]	; 36fb0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc64>
   36398:	e28d0020 	add	r0, sp, #32
   3639c:	e595b008 	ldr	fp, [r5, #8]
   363a0:	ebffcf5e 	bl	2a120 <strcasecmp>
   363a4:	e2506000 	subs	r6, r0, #0
   363a8:	1a000037 	bne	3648c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x140>
   363ac:	e28d8ecb 	add	r8, sp, #3248	; 0xcb0
   363b0:	e2888008 	add	r8, r8, #8
   363b4:	e5286ca0 	str	r6, [r8, #-3232]!	; 0xfffff360
   363b8:	e2483004 	sub	r3, r8, #4
   363bc:	e88d0048 	stm	sp, {r3, r6}
   363c0:	e58d600c 	str	r6, [sp, #12]
   363c4:	e58d6008 	str	r6, [sp, #8]
   363c8:	e1a03007 	mov	r3, r7
   363cc:	e3a02001 	mov	r2, #1
   363d0:	e59f1bdc 	ldr	r1, [pc, #3036]	; 36fb4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc68>
   363d4:	e1a00005 	mov	r0, r5
   363d8:	e58d6014 	str	r6, [sp, #20]
   363dc:	ebfffd90 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   363e0:	e3500000 	cmp	r0, #0
   363e4:	0a00005f 	beq	36568 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   363e8:	e58d600c 	str	r6, [sp, #12]
   363ec:	e58d6008 	str	r6, [sp, #8]
   363f0:	e58d6004 	str	r6, [sp, #4]
   363f4:	e58d8000 	str	r8, [sp]
   363f8:	e1a03007 	mov	r3, r7
   363fc:	e3a02002 	mov	r2, #2
   36400:	e59f1bb0 	ldr	r1, [pc, #2992]	; 36fb8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc6c>
   36404:	e1a00005 	mov	r0, r5
   36408:	ebfffd85 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   3640c:	e3500000 	cmp	r0, #0
   36410:	0a000054 	beq	36568 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36414:	e28d301c 	add	r3, sp, #28
   36418:	e58d3000 	str	r3, [sp]
   3641c:	e58d600c 	str	r6, [sp, #12]
   36420:	e58d6008 	str	r6, [sp, #8]
   36424:	e58d6004 	str	r6, [sp, #4]
   36428:	e1a03007 	mov	r3, r7
   3642c:	e3a02003 	mov	r2, #3
   36430:	e59f1b84 	ldr	r1, [pc, #2948]	; 36fbc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc70>
   36434:	e1a00005 	mov	r0, r5
   36438:	e58d601c 	str	r6, [sp, #28]
   3643c:	ebfffd78 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36440:	e3500000 	cmp	r0, #0
   36444:	0a000047 	beq	36568 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36448:	e59d3018 	ldr	r3, [sp, #24]
   3644c:	e2432001 	sub	r2, r3, #1
   36450:	e3520b01 	cmp	r2, #1024	; 0x400
   36454:	2a00003e 	bcs	36554 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x208>
   36458:	e1a00005 	mov	r0, r5
   3645c:	e59d1014 	ldr	r1, [sp, #20]
   36460:	e58d6004 	str	r6, [sp, #4]
   36464:	e58d6000 	str	r6, [sp]
   36468:	e28d2054 	add	r2, sp, #84	; 0x54
   3646c:	ebffff7b 	bl	36260 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)>
   36470:	e2505000 	subs	r5, r0, #0
   36474:	0a0000f3 	beq	36848 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x4fc>
   36478:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3647c:	e59f1b3c 	ldr	r1, [pc, #2876]	; 36fc0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc74>
   36480:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36484:	ebffdee7 	bl	2e028 <strlcpy>
   36488:	eaffffbd 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   3648c:	e59f1b30 	ldr	r1, [pc, #2864]	; 36fc4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc78>
   36490:	e28d0020 	add	r0, sp, #32
   36494:	ebffcf21 	bl	2a120 <strcasecmp>
   36498:	e2506000 	subs	r6, r0, #0
   3649c:	1a000039 	bne	36588 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x23c>
   364a0:	e28d301c 	add	r3, sp, #28
   364a4:	e58d3000 	str	r3, [sp]
   364a8:	e58d600c 	str	r6, [sp, #12]
   364ac:	e58d6008 	str	r6, [sp, #8]
   364b0:	e58d6004 	str	r6, [sp, #4]
   364b4:	e1a03007 	mov	r3, r7
   364b8:	e3a02001 	mov	r2, #1
   364bc:	e59f1af0 	ldr	r1, [pc, #2800]	; 36fb4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc68>
   364c0:	e1a00005 	mov	r0, r5
   364c4:	e58d601c 	str	r6, [sp, #28]
   364c8:	e58d6054 	str	r6, [sp, #84]	; 0x54
   364cc:	e58d6454 	str	r6, [sp, #1108]	; 0x454
   364d0:	ebfffd53 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   364d4:	e3500000 	cmp	r0, #0
   364d8:	0a000022 	beq	36568 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   364dc:	e28d3054 	add	r3, sp, #84	; 0x54
   364e0:	e88d0048 	stm	sp, {r3, r6}
   364e4:	e58d600c 	str	r6, [sp, #12]
   364e8:	e58d6008 	str	r6, [sp, #8]
   364ec:	e1a03007 	mov	r3, r7
   364f0:	e3a02002 	mov	r2, #2
   364f4:	e59f1abc 	ldr	r1, [pc, #2748]	; 36fb8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc6c>
   364f8:	e1a00005 	mov	r0, r5
   364fc:	ebfffd48 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36500:	e3500000 	cmp	r0, #0
   36504:	0a000017 	beq	36568 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36508:	e28d3e45 	add	r3, sp, #1104	; 0x450
   3650c:	e2833008 	add	r3, r3, #8
   36510:	e2432004 	sub	r2, r3, #4
   36514:	e58d2000 	str	r2, [sp]
   36518:	e58d600c 	str	r6, [sp, #12]
   3651c:	e58d6008 	str	r6, [sp, #8]
   36520:	e58d6004 	str	r6, [sp, #4]
   36524:	e1a03007 	mov	r3, r7
   36528:	e3a02003 	mov	r2, #3
   3652c:	e59f1a88 	ldr	r1, [pc, #2696]	; 36fbc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc70>
   36530:	e1a00005 	mov	r0, r5
   36534:	ebfffd3a 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36538:	e3500000 	cmp	r0, #0
   3653c:	0a000009 	beq	36568 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36540:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
   36544:	e2432001 	sub	r2, r3, #1
   36548:	e1530008 	cmp	r3, r8
   3654c:	93520b01 	cmpls	r2, #1024	; 0x400
   36550:	3a0000f2 	bcc	36920 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x5d4>
   36554:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36558:	e59f1a68 	ldr	r1, [pc, #2664]	; 36fc8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc7c>
   3655c:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36560:	ebffdeb0 	bl	2e028 <strlcpy>
   36564:	eaffff86 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36568:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3656c:	e59f1a58 	ldr	r1, [pc, #2648]	; 36fcc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc80>
   36570:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36574:	ebffdeab 	bl	2e028 <strlcpy>
   36578:	e1a00004 	mov	r0, r4
   3657c:	e28ddecb 	add	sp, sp, #3248	; 0xcb0
   36580:	e28dd00c 	add	sp, sp, #12
   36584:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36588:	e59f1a40 	ldr	r1, [pc, #2624]	; 36fd0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc84>
   3658c:	e28d0020 	add	r0, sp, #32
   36590:	ebffcee2 	bl	2a120 <strcasecmp>
   36594:	e3500000 	cmp	r0, #0
   36598:	0a00009e 	beq	36818 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x4cc>
   3659c:	e59f1a30 	ldr	r1, [pc, #2608]	; 36fd4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc88>
   365a0:	e28d0020 	add	r0, sp, #32
   365a4:	ebffcedd 	bl	2a120 <strcasecmp>
   365a8:	e3500000 	cmp	r0, #0
   365ac:	01a0000b 	moveq	r0, fp
   365b0:	03a01001 	moveq	r1, #1
   365b4:	0a000040 	beq	366bc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x370>
   365b8:	e59f1a18 	ldr	r1, [pc, #2584]	; 36fd8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc8c>
   365bc:	e28d0020 	add	r0, sp, #32
   365c0:	ebffced6 	bl	2a120 <strcasecmp>
   365c4:	e2501000 	subs	r1, r0, #0
   365c8:	0a00003a 	beq	366b8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x36c>
   365cc:	e59f1a08 	ldr	r1, [pc, #2568]	; 36fdc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc90>
   365d0:	e28d0020 	add	r0, sp, #32
   365d4:	ebffced1 	bl	2a120 <strcasecmp>
   365d8:	e3500000 	cmp	r0, #0
   365dc:	0a000092 	beq	3682c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x4e0>
   365e0:	e59f19f8 	ldr	r1, [pc, #2552]	; 36fe0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc94>
   365e4:	e28d0020 	add	r0, sp, #32
   365e8:	ebffcecc 	bl	2a120 <strcasecmp>
   365ec:	e3500000 	cmp	r0, #0
   365f0:	0a0000bb 	beq	368e4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x598>
   365f4:	e59f19e8 	ldr	r1, [pc, #2536]	; 36fe4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc98>
   365f8:	e28d0020 	add	r0, sp, #32
   365fc:	ebffcec7 	bl	2a120 <strcasecmp>
   36600:	e3500000 	cmp	r0, #0
   36604:	01a0000b 	moveq	r0, fp
   36608:	03a01001 	moveq	r1, #1
   3660c:	0a0000bd 	beq	36908 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x5bc>
   36610:	e59f19d0 	ldr	r1, [pc, #2512]	; 36fe8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc9c>
   36614:	e28d0020 	add	r0, sp, #32
   36618:	ebffcec0 	bl	2a120 <strcasecmp>
   3661c:	e3500000 	cmp	r0, #0
   36620:	0a0000b6 	beq	36900 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x5b4>
   36624:	e59f19c0 	ldr	r1, [pc, #2496]	; 36fec <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xca0>
   36628:	e28d0020 	add	r0, sp, #32
   3662c:	ebffcebb 	bl	2a120 <strcasecmp>
   36630:	e3500000 	cmp	r0, #0
   36634:	0a0000c9 	beq	36960 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x614>
   36638:	e59f19b0 	ldr	r1, [pc, #2480]	; 36ff0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xca4>
   3663c:	e28d0020 	add	r0, sp, #32
   36640:	ebffceb6 	bl	2a120 <strcasecmp>
   36644:	e3500000 	cmp	r0, #0
   36648:	0a0000cb 	beq	3697c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x630>
   3664c:	e59f19a0 	ldr	r1, [pc, #2464]	; 36ff4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xca8>
   36650:	e28d0020 	add	r0, sp, #32
   36654:	ebffceb1 	bl	2a120 <strcasecmp>
   36658:	e250c000 	subs	ip, r0, #0
   3665c:	1a0000cd 	bne	36998 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x64c>
   36660:	e28d2e45 	add	r2, sp, #1104	; 0x450
   36664:	e2822004 	add	r2, r2, #4
   36668:	e58d2000 	str	r2, [sp]
   3666c:	e58dc00c 	str	ip, [sp, #12]
   36670:	e58dc008 	str	ip, [sp, #8]
   36674:	e58dc004 	str	ip, [sp, #4]
   36678:	e1a03007 	mov	r3, r7
   3667c:	e3a02001 	mov	r2, #1
   36680:	e59f192c 	ldr	r1, [pc, #2348]	; 36fb4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc68>
   36684:	e1a00005 	mov	r0, r5
   36688:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   3668c:	ebfffce4 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36690:	e3500000 	cmp	r0, #0
   36694:	0affffb3 	beq	36568 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36698:	e1a0000b 	mov	r0, fp
   3669c:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   366a0:	ebfff6fe 	bl	342a0 <BusAccess::rawBusControlSetAddress(unsigned long)>
   366a4:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   366a8:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   366ac:	e1a00005 	mov	r0, r5
   366b0:	ebfffe92 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   366b4:	eaffff32 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   366b8:	e1a0000b 	mov	r0, fp
   366bc:	ebfff576 	bl	33c9c <BusAccess::rawBusControlEnable(bool)>
   366c0:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   366c4:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   366c8:	e1a00005 	mov	r0, r5
   366cc:	ebfffe8b 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   366d0:	eaffff2b 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   366d4:	e59f191c 	ldr	r1, [pc, #2332]	; 36ff8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcac>
   366d8:	e28d0020 	add	r0, sp, #32
   366dc:	ebffce8f 	bl	2a120 <strcasecmp>
   366e0:	e3500000 	cmp	r0, #0
   366e4:	0a0001cc 	beq	36e1c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xad0>
   366e8:	e59f190c 	ldr	r1, [pc, #2316]	; 36ffc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcb0>
   366ec:	e28d0020 	add	r0, sp, #32
   366f0:	ebffce8a 	bl	2a120 <strcasecmp>
   366f4:	e2502000 	subs	r2, r0, #0
   366f8:	0a0001bf 	beq	36dfc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xab0>
   366fc:	e59f18fc 	ldr	r1, [pc, #2300]	; 37000 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcb4>
   36700:	e28d0020 	add	r0, sp, #32
   36704:	ebffce85 	bl	2a120 <strcasecmp>
   36708:	e3500000 	cmp	r0, #0
   3670c:	0a0001b3 	beq	36de0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa94>
   36710:	e59f18ec 	ldr	r1, [pc, #2284]	; 37004 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcb8>
   36714:	e28d0020 	add	r0, sp, #32
   36718:	ebffce80 	bl	2a120 <strcasecmp>
   3671c:	e3500000 	cmp	r0, #0
   36720:	0a0001aa 	beq	36dd0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa84>
   36724:	e59f18dc 	ldr	r1, [pc, #2268]	; 37008 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcbc>
   36728:	e28d0020 	add	r0, sp, #32
   3672c:	ebffce7b 	bl	2a120 <strcasecmp>
   36730:	e2502000 	subs	r2, r0, #0
   36734:	0a00019d 	beq	36db0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa64>
   36738:	e59f18cc 	ldr	r1, [pc, #2252]	; 3700c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc0>
   3673c:	e28d0020 	add	r0, sp, #32
   36740:	ebffce76 	bl	2a120 <strcasecmp>
   36744:	e3500000 	cmp	r0, #0
   36748:	0a000194 	beq	36da0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa54>
   3674c:	e59f18bc 	ldr	r1, [pc, #2236]	; 37010 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc4>
   36750:	e28d0020 	add	r0, sp, #32
   36754:	ebffce71 	bl	2a120 <strcasecmp>
   36758:	e2502000 	subs	r2, r0, #0
   3675c:	0a000187 	beq	36d80 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa34>
   36760:	e59f18ac 	ldr	r1, [pc, #2220]	; 37014 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc8>
   36764:	e28d0020 	add	r0, sp, #32
   36768:	ebffce6c 	bl	2a120 <strcasecmp>
   3676c:	e3500000 	cmp	r0, #0
   36770:	0affff03 	beq	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36774:	e59f189c 	ldr	r1, [pc, #2204]	; 37018 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xccc>
   36778:	e28d0020 	add	r0, sp, #32
   3677c:	ebffce67 	bl	2a120 <strcasecmp>
   36780:	e3500000 	cmp	r0, #0
   36784:	0afffefe 	beq	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36788:	e59f188c 	ldr	r1, [pc, #2188]	; 3701c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcd0>
   3678c:	e28d0020 	add	r0, sp, #32
   36790:	ebffce62 	bl	2a120 <strcasecmp>
   36794:	e3500000 	cmp	r0, #0
   36798:	0afffef9 	beq	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   3679c:	e59f187c 	ldr	r1, [pc, #2172]	; 37020 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcd4>
   367a0:	e28d0020 	add	r0, sp, #32
   367a4:	ebffce5d 	bl	2a120 <strcasecmp>
   367a8:	e3500000 	cmp	r0, #0
   367ac:	0afffef4 	beq	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   367b0:	e59f186c 	ldr	r1, [pc, #2156]	; 37024 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcd8>
   367b4:	e28d0020 	add	r0, sp, #32
   367b8:	ebffce58 	bl	2a120 <strcasecmp>
   367bc:	e3500000 	cmp	r0, #0
   367c0:	0afffeef 	beq	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   367c4:	e28d0020 	add	r0, sp, #32
   367c8:	e59f1858 	ldr	r1, [pc, #2136]	; 37028 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcdc>
   367cc:	ebffce53 	bl	2a120 <strcasecmp>
   367d0:	e2505000 	subs	r5, r0, #0
   367d4:	1afffee9 	bne	36380 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   367d8:	e28d2e45 	add	r2, sp, #1104	; 0x450
   367dc:	e1a01007 	mov	r1, r7
   367e0:	e2822004 	add	r2, r2, #4
   367e4:	e3a03032 	mov	r3, #50	; 0x32
   367e8:	e59f083c 	ldr	r0, [pc, #2108]	; 3702c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce0>
   367ec:	ebffdec3 	bl	2e300 <jsonGetValueForKey>
   367f0:	e2504000 	subs	r4, r0, #0
   367f4:	0afffee2 	beq	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   367f8:	e28d0e45 	add	r0, sp, #1104	; 0x450
   367fc:	e1a01005 	mov	r1, r5
   36800:	e2800004 	add	r0, r0, #4
   36804:	e3a0200a 	mov	r2, #10
   36808:	ebffcf6c 	bl	2a5c0 <strtoul>
   3680c:	e1a01000 	mov	r1, r0
   36810:	e1a0000b 	mov	r0, fp
   36814:	ebffeb40 	bl	3151c <BusAccess::waitSetCycleUs(unsigned long)>
   36818:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3681c:	e59f180c 	ldr	r1, [pc, #2060]	; 37030 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36820:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36824:	ebffddff 	bl	2e028 <strlcpy>
   36828:	eafffed5 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   3682c:	e1a0000b 	mov	r0, fp
   36830:	ebfff520 	bl	33cb8 <BusAccess::rawBusControlClearWait()>
   36834:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36838:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   3683c:	e1a00005 	mov	r0, r5
   36840:	ebfffe2e 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   36844:	eafffece 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36848:	e28d1e45 	add	r1, sp, #1104	; 0x450
   3684c:	e59d2014 	ldr	r2, [sp, #20]
   36850:	e2811008 	add	r1, r1, #8
   36854:	e241a004 	sub	sl, r1, #4
   36858:	e59d3018 	ldr	r3, [sp, #24]
   3685c:	e58d2000 	str	r2, [sp]
   36860:	e59f17cc 	ldr	r1, [pc, #1996]	; 37034 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce8>
   36864:	e59f27cc 	ldr	r2, [pc, #1996]	; 37038 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcec>
   36868:	e58d5004 	str	r5, [sp, #4]
   3686c:	e1a0000a 	mov	r0, sl
   36870:	ebffde63 	bl	2e204 <snprintf>
   36874:	e1a0000a 	mov	r0, sl
   36878:	ebffce03 	bl	2a08c <strlen>
   3687c:	e59d3018 	ldr	r3, [sp, #24]
   36880:	e3530000 	cmp	r3, #0
   36884:	0a00000d 	beq	368c0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x574>
   36888:	e59f97ac 	ldr	r9, [pc, #1964]	; 3703c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf0>
   3688c:	e59f87a0 	ldr	r8, [pc, #1952]	; 37034 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce8>
   36890:	e28d7053 	add	r7, sp, #83	; 0x53
   36894:	e08a6000 	add	r6, sl, r0
   36898:	e5f73001 	ldrb	r3, [r7, #1]!
   3689c:	e1a00006 	mov	r0, r6
   368a0:	e1a02009 	mov	r2, r9
   368a4:	e1a01008 	mov	r1, r8
   368a8:	ebffde55 	bl	2e204 <snprintf>
   368ac:	e59d3018 	ldr	r3, [sp, #24]
   368b0:	e2855001 	add	r5, r5, #1
   368b4:	e1530005 	cmp	r3, r5
   368b8:	e2866002 	add	r6, r6, #2
   368bc:	8afffff5 	bhi	36898 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x54c>
   368c0:	e59f276c 	ldr	r2, [pc, #1900]	; 37034 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce8>
   368c4:	e59f1774 	ldr	r1, [pc, #1908]	; 37040 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf4>
   368c8:	e1a0000a 	mov	r0, sl
   368cc:	ebffddf1 	bl	2e098 <strlcat>
   368d0:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   368d4:	e1a0100a 	mov	r1, sl
   368d8:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   368dc:	ebffddd1 	bl	2e028 <strlcpy>
   368e0:	eafffea7 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   368e4:	e1a0000b 	mov	r0, fp
   368e8:	ebfff4f7 	bl	33ccc <BusAccess::rawBusControlWaitDisable()>
   368ec:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   368f0:	e59f1738 	ldr	r1, [pc, #1848]	; 37030 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   368f4:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   368f8:	ebffddca 	bl	2e028 <strlcpy>
   368fc:	eafffea0 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36900:	e1a0000b 	mov	r0, fp
   36904:	e3a01000 	mov	r1, #0
   36908:	ebfff4f7 	bl	33cec <BusAccess::rawBusControlClockEnable(bool)>
   3690c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36910:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36914:	e1a00005 	mov	r0, r5
   36918:	ebfffdf8 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   3691c:	eafffe98 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36920:	e59dc454 	ldr	ip, [sp, #1108]	; 0x454
   36924:	e3a0e001 	mov	lr, #1
   36928:	e29cc000 	adds	ip, ip, #0
   3692c:	13a0c001 	movne	ip, #1
   36930:	e1a02009 	mov	r2, r9
   36934:	e59d101c 	ldr	r1, [sp, #28]
   36938:	e1a00005 	mov	r0, r5
   3693c:	e88d5000 	stm	sp, {ip, lr}
   36940:	ebfffe46 	bl	36260 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)>
   36944:	e3500000 	cmp	r0, #0
   36948:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3694c:	0affffb2 	beq	3681c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x4d0>
   36950:	e59f1668 	ldr	r1, [pc, #1640]	; 36fc0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc74>
   36954:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36958:	ebffddb2 	bl	2e028 <strlcpy>
   3695c:	eafffe88 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36960:	e1a0000b 	mov	r0, fp
   36964:	ebfff647 	bl	34288 <BusAccess::rawBusControlTakeBus()>
   36968:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3696c:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36970:	e1a00005 	mov	r0, r5
   36974:	ebfffde1 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   36978:	eafffe81 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   3697c:	e1a0000b 	mov	r0, fp
   36980:	ebfff645 	bl	3429c <BusAccess::rawBusControlReleaseBus()>
   36984:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36988:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   3698c:	e1a00005 	mov	r0, r5
   36990:	ebfffdda 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   36994:	eafffe7a 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36998:	e59f16a4 	ldr	r1, [pc, #1700]	; 37044 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf8>
   3699c:	e28d0020 	add	r0, sp, #32
   369a0:	ebffcdde 	bl	2a120 <strcasecmp>
   369a4:	e3500000 	cmp	r0, #0
   369a8:	0a000021 	beq	36a34 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x6e8>
   369ac:	e59f1694 	ldr	r1, [pc, #1684]	; 37048 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcfc>
   369b0:	e28d0020 	add	r0, sp, #32
   369b4:	ebffcdd9 	bl	2a120 <strcasecmp>
   369b8:	e250c000 	subs	ip, r0, #0
   369bc:	1a000023 	bne	36a50 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x704>
   369c0:	e28d2e45 	add	r2, sp, #1104	; 0x450
   369c4:	e2822004 	add	r2, r2, #4
   369c8:	e58d2000 	str	r2, [sp]
   369cc:	e58dc00c 	str	ip, [sp, #12]
   369d0:	e58dc008 	str	ip, [sp, #8]
   369d4:	e58dc004 	str	ip, [sp, #4]
   369d8:	e1a03007 	mov	r3, r7
   369dc:	e3a02001 	mov	r2, #1
   369e0:	e59f1664 	ldr	r1, [pc, #1636]	; 3704c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd00>
   369e4:	e1a00005 	mov	r0, r5
   369e8:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   369ec:	ebfffc0c 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   369f0:	e3500000 	cmp	r0, #0
   369f4:	0afffedb 	beq	36568 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   369f8:	ebffc077 	bl	26bdc <CLogger::Get()>
   369fc:	e59d2454 	ldr	r2, [sp, #1108]	; 0x454
   36a00:	e59f3648 	ldr	r3, [pc, #1608]	; 37050 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd04>
   36a04:	e58d2000 	str	r2, [sp]
   36a08:	e59f1644 	ldr	r1, [pc, #1604]	; 37054 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd08>
   36a0c:	e3a02004 	mov	r2, #4
   36a10:	ebffbfae 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   36a14:	e1a0000b 	mov	r0, fp
   36a18:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   36a1c:	ebfff620 	bl	342a4 <BusAccess::rawBusControlSetData(unsigned long)>
   36a20:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36a24:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36a28:	e1a00005 	mov	r0, r5
   36a2c:	ebfffdb3 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   36a30:	eafffe53 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36a34:	e1a0000b 	mov	r0, fp
   36a38:	ebfff656 	bl	34398 <BusAccess::rawBusControlReadPIB()>
   36a3c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36a40:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36a44:	e1a00005 	mov	r0, r5
   36a48:	ebfffdac 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   36a4c:	eafffe4c 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36a50:	e59f1600 	ldr	r1, [pc, #1536]	; 37058 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd0c>
   36a54:	e28d0020 	add	r0, sp, #32
   36a58:	ebffcdb0 	bl	2a120 <strcasecmp>
   36a5c:	e250c000 	subs	ip, r0, #0
   36a60:	1a000015 	bne	36abc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x770>
   36a64:	e28d2e45 	add	r2, sp, #1104	; 0x450
   36a68:	e2822004 	add	r2, r2, #4
   36a6c:	e58d2000 	str	r2, [sp]
   36a70:	e58dc00c 	str	ip, [sp, #12]
   36a74:	e58dc008 	str	ip, [sp, #8]
   36a78:	e58dc004 	str	ip, [sp, #4]
   36a7c:	e1a03007 	mov	r3, r7
   36a80:	e3a02001 	mov	r2, #1
   36a84:	e59f15c0 	ldr	r1, [pc, #1472]	; 3704c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd00>
   36a88:	e1a00005 	mov	r0, r5
   36a8c:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   36a90:	ebfffbe3 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36a94:	e3500000 	cmp	r0, #0
   36a98:	0afffeb2 	beq	36568 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36a9c:	e1a0000b 	mov	r0, fp
   36aa0:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   36aa4:	ebfff644 	bl	343bc <BusAccess::rawBusControlWritePIB(unsigned long)>
   36aa8:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36aac:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36ab0:	e1a00005 	mov	r0, r5
   36ab4:	ebfffd91 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   36ab8:	eafffe31 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36abc:	e59f1598 	ldr	r1, [pc, #1432]	; 3705c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd10>
   36ac0:	e28d0020 	add	r0, sp, #32
   36ac4:	ebffcd95 	bl	2a120 <strcasecmp>
   36ac8:	e2506000 	subs	r6, r0, #0
   36acc:	1a000025 	bne	36b68 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x81c>
   36ad0:	e3a02001 	mov	r2, #1
   36ad4:	e28d3054 	add	r3, sp, #84	; 0x54
   36ad8:	e58d3000 	str	r3, [sp]
   36adc:	e58d6008 	str	r6, [sp, #8]
   36ae0:	e58d6004 	str	r6, [sp, #4]
   36ae4:	e58d200c 	str	r2, [sp, #12]
   36ae8:	e1a03007 	mov	r3, r7
   36aec:	e59f156c 	ldr	r1, [pc, #1388]	; 37060 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd14>
   36af0:	e1a00005 	mov	r0, r5
   36af4:	e58d6054 	str	r6, [sp, #84]	; 0x54
   36af8:	ebfffbc9 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36afc:	e3500000 	cmp	r0, #0
   36b00:	0afffe98 	beq	36568 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36b04:	e28d2e45 	add	r2, sp, #1104	; 0x450
   36b08:	e2822004 	add	r2, r2, #4
   36b0c:	e58d2000 	str	r2, [sp]
   36b10:	e58d600c 	str	r6, [sp, #12]
   36b14:	e58d6008 	str	r6, [sp, #8]
   36b18:	e58d6004 	str	r6, [sp, #4]
   36b1c:	e1a03007 	mov	r3, r7
   36b20:	e3a02002 	mov	r2, #2
   36b24:	e59f1538 	ldr	r1, [pc, #1336]	; 37064 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd18>
   36b28:	e1a00005 	mov	r0, r5
   36b2c:	e58d6454 	str	r6, [sp, #1108]	; 0x454
   36b30:	ebfffbbb 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36b34:	e3500000 	cmp	r0, #0
   36b38:	0afffe8a 	beq	36568 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36b3c:	e59d2454 	ldr	r2, [sp, #1108]	; 0x454
   36b40:	e1a0000b 	mov	r0, fp
   36b44:	e2922000 	adds	r2, r2, #0
   36b48:	13a02001 	movne	r2, #1
   36b4c:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   36b50:	ebfff607 	bl	34374 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   36b54:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36b58:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36b5c:	e1a00005 	mov	r0, r5
   36b60:	ebfffd66 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   36b64:	eafffe06 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36b68:	e59f14f8 	ldr	r1, [pc, #1272]	; 37068 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd1c>
   36b6c:	e28d0020 	add	r0, sp, #32
   36b70:	ebffcd6a 	bl	2a120 <strcasecmp>
   36b74:	e250c000 	subs	ip, r0, #0
   36b78:	1a000015 	bne	36bd4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x888>
   36b7c:	e3a02001 	mov	r2, #1
   36b80:	e28d1e45 	add	r1, sp, #1104	; 0x450
   36b84:	e2811004 	add	r1, r1, #4
   36b88:	e58d1000 	str	r1, [sp]
   36b8c:	e58dc008 	str	ip, [sp, #8]
   36b90:	e58dc004 	str	ip, [sp, #4]
   36b94:	e1a03007 	mov	r3, r7
   36b98:	e58d200c 	str	r2, [sp, #12]
   36b9c:	e59f14bc 	ldr	r1, [pc, #1212]	; 37060 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd14>
   36ba0:	e1a00005 	mov	r0, r5
   36ba4:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   36ba8:	ebfffb9d 	bl	35a24 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36bac:	e3500000 	cmp	r0, #0
   36bb0:	0afffe6c 	beq	36568 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36bb4:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   36bb8:	e1a0000b 	mov	r0, fp
   36bbc:	ebfff5ef 	bl	34380 <BusAccess::rawBusControlGetPin(unsigned long)>
   36bc0:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36bc4:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36bc8:	e1a00005 	mov	r0, r5
   36bcc:	ebfffd4b 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   36bd0:	eafffdeb 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36bd4:	e59f1490 	ldr	r1, [pc, #1168]	; 3706c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd20>
   36bd8:	e28d0020 	add	r0, sp, #32
   36bdc:	ebffcd4f 	bl	2a120 <strcasecmp>
   36be0:	e3500000 	cmp	r0, #0
   36be4:	0a000050 	beq	36d2c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9e0>
   36be8:	e59f1480 	ldr	r1, [pc, #1152]	; 37070 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd24>
   36bec:	e28d0020 	add	r0, sp, #32
   36bf0:	ebffcd4a 	bl	2a120 <strcasecmp>
   36bf4:	e3500000 	cmp	r0, #0
   36bf8:	0a0000e3 	beq	36f8c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc40>
   36bfc:	e59f1470 	ldr	r1, [pc, #1136]	; 37074 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd28>
   36c00:	e28d0020 	add	r0, sp, #32
   36c04:	ebffcd45 	bl	2a120 <strcasecmp>
   36c08:	e3500000 	cmp	r0, #0
   36c0c:	0a0000d6 	beq	36f6c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc20>
   36c10:	e59f1460 	ldr	r1, [pc, #1120]	; 37078 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd2c>
   36c14:	e28d0020 	add	r0, sp, #32
   36c18:	ebffcd40 	bl	2a120 <strcasecmp>
   36c1c:	e3500000 	cmp	r0, #0
   36c20:	0a0000ca 	beq	36f50 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc04>
   36c24:	e59f1450 	ldr	r1, [pc, #1104]	; 3707c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd30>
   36c28:	e28d0020 	add	r0, sp, #32
   36c2c:	ebffcd3b 	bl	2a120 <strcasecmp>
   36c30:	e2503000 	subs	r3, r0, #0
   36c34:	0a0000a6 	beq	36ed4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb88>
   36c38:	e59f1440 	ldr	r1, [pc, #1088]	; 37080 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd34>
   36c3c:	e28d0020 	add	r0, sp, #32
   36c40:	ebffcd36 	bl	2a120 <strcasecmp>
   36c44:	e3500000 	cmp	r0, #0
   36c48:	0a00009a 	beq	36eb8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb6c>
   36c4c:	e59f1430 	ldr	r1, [pc, #1072]	; 37084 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd38>
   36c50:	e28d0020 	add	r0, sp, #32
   36c54:	ebffcd31 	bl	2a120 <strcasecmp>
   36c58:	e3500000 	cmp	r0, #0
   36c5c:	0a00008e 	beq	36e9c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb50>
   36c60:	e59f1420 	ldr	r1, [pc, #1056]	; 37088 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd3c>
   36c64:	e28d0020 	add	r0, sp, #32
   36c68:	ebffcd2c 	bl	2a120 <strcasecmp>
   36c6c:	e3500000 	cmp	r0, #0
   36c70:	0a00007b 	beq	36e64 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb18>
   36c74:	e59f1410 	ldr	r1, [pc, #1040]	; 3708c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd40>
   36c78:	e28d0020 	add	r0, sp, #32
   36c7c:	ebffcd27 	bl	2a120 <strcasecmp>
   36c80:	e3500000 	cmp	r0, #0
   36c84:	0a000068 	beq	36e2c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xae0>
   36c88:	e59f1400 	ldr	r1, [pc, #1024]	; 37090 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd44>
   36c8c:	e28d0020 	add	r0, sp, #32
   36c90:	ebffcd22 	bl	2a120 <strcasecmp>
   36c94:	e3500000 	cmp	r0, #0
   36c98:	0a000063 	beq	36e2c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xae0>
   36c9c:	e59f13f0 	ldr	r1, [pc, #1008]	; 37094 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd48>
   36ca0:	e28d0020 	add	r0, sp, #32
   36ca4:	ebffcd1d 	bl	2a120 <strcasecmp>
   36ca8:	e3500000 	cmp	r0, #0
   36cac:	0a00002b 	beq	36d60 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa14>
   36cb0:	e59f13e0 	ldr	r1, [pc, #992]	; 37098 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd4c>
   36cb4:	e28d0020 	add	r0, sp, #32
   36cb8:	ebffcd18 	bl	2a120 <strcasecmp>
   36cbc:	e3500000 	cmp	r0, #0
   36cc0:	1afffe83 	bne	366d4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x388>
   36cc4:	e28dae45 	add	sl, sp, #1104	; 0x450
   36cc8:	e28aa004 	add	sl, sl, #4
   36ccc:	e1a01007 	mov	r1, r7
   36cd0:	e1a0200a 	mov	r2, sl
   36cd4:	e3a03032 	mov	r3, #50	; 0x32
   36cd8:	e59f03bc 	ldr	r0, [pc, #956]	; 3709c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd50>
   36cdc:	ebffdd87 	bl	2e300 <jsonGetValueForKey>
   36ce0:	e3500000 	cmp	r0, #0
   36ce4:	0a000015 	beq	36d40 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9f4>
   36ce8:	e3a0200a 	mov	r2, #10
   36cec:	e3a01000 	mov	r1, #0
   36cf0:	e1a0000a 	mov	r0, sl
   36cf4:	ebffce31 	bl	2a5c0 <strtoul>
   36cf8:	e1a01000 	mov	r1, r0
   36cfc:	e1a0000b 	mov	r0, fp
   36d00:	ebfff00c 	bl	32d38 <BusAccess::clockSetFreqHz(unsigned long)>
   36d04:	e1a0000b 	mov	r0, fp
   36d08:	ebfff105 	bl	33124 <BusAccess::clockCurFreqHz()>
   36d0c:	e59f238c 	ldr	r2, [pc, #908]	; 370a0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd54>
   36d10:	e1a03000 	mov	r3, r0
   36d14:	e59d1ce4 	ldr	r1, [sp, #3300]	; 0xce4
   36d18:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36d1c:	ebffdd38 	bl	2e204 <snprintf>
   36d20:	e1a00004 	mov	r0, r4
   36d24:	e1a04000 	mov	r4, r0
   36d28:	eafffd95 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36d2c:	e1a00005 	mov	r0, r5
   36d30:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36d34:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36d38:	ebfffcf0 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   36d3c:	eafffd90 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36d40:	e1a01009 	mov	r1, r9
   36d44:	e3a03032 	mov	r3, #50	; 0x32
   36d48:	e1a0200a 	mov	r2, sl
   36d4c:	e59f0348 	ldr	r0, [pc, #840]	; 3709c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd50>
   36d50:	ebffdd6a 	bl	2e300 <jsonGetValueForKey>
   36d54:	e3500000 	cmp	r0, #0
   36d58:	1affffe2 	bne	36ce8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x99c>
   36d5c:	eafffff0 	b	36d24 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9d8>
   36d60:	e1a0000b 	mov	r0, fp
   36d64:	ebfff0ee 	bl	33124 <BusAccess::clockCurFreqHz()>
   36d68:	e59f2330 	ldr	r2, [pc, #816]	; 370a0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd54>
   36d6c:	e1a03000 	mov	r3, r0
   36d70:	e59d1ce4 	ldr	r1, [sp, #3300]	; 0xce4
   36d74:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36d78:	ebffdd21 	bl	2e204 <snprintf>
   36d7c:	eafffd80 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36d80:	e1a0000b 	mov	r0, fp
   36d84:	e595100c 	ldr	r1, [r5, #12]
   36d88:	ebffe9d8 	bl	314f0 <BusAccess::waitOnIO(int, bool)>
   36d8c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36d90:	e59f1298 	ldr	r1, [pc, #664]	; 37030 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36d94:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36d98:	ebffdca2 	bl	2e028 <strlcpy>
   36d9c:	eafffd78 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36da0:	e595100c 	ldr	r1, [r5, #12]
   36da4:	e1a0000b 	mov	r0, fp
   36da8:	e3a02001 	mov	r2, #1
   36dac:	eafffff5 	b	36d88 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa3c>
   36db0:	e1a0000b 	mov	r0, fp
   36db4:	e595100c 	ldr	r1, [r5, #12]
   36db8:	ebffe9c3 	bl	314cc <BusAccess::waitOnMemory(int, bool)>
   36dbc:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36dc0:	e59f1268 	ldr	r1, [pc, #616]	; 37030 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36dc4:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36dc8:	ebffdc96 	bl	2e028 <strlcpy>
   36dcc:	eafffd6c 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36dd0:	e595100c 	ldr	r1, [r5, #12]
   36dd4:	e1a0000b 	mov	r0, fp
   36dd8:	e3a02001 	mov	r2, #1
   36ddc:	eafffff5 	b	36db8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa6c>
   36de0:	e1a0000b 	mov	r0, fp
   36de4:	ebffebdb 	bl	31d58 <BusAccess::waitRelease()>
   36de8:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36dec:	e59f123c 	ldr	r1, [pc, #572]	; 37030 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36df0:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36df4:	ebffdc8b 	bl	2e028 <strlcpy>
   36df8:	eafffd61 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36dfc:	e1a0000b 	mov	r0, fp
   36e00:	e595100c 	ldr	r1, [r5, #12]
   36e04:	ebffe9c8 	bl	3152c <BusAccess::waitHold(int, bool)>
   36e08:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36e0c:	e59f121c 	ldr	r1, [pc, #540]	; 37030 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36e10:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36e14:	ebffdc83 	bl	2e028 <strlcpy>
   36e18:	eafffd59 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36e1c:	e595100c 	ldr	r1, [r5, #12]
   36e20:	e1a0000b 	mov	r0, fp
   36e24:	e3a02001 	mov	r2, #1
   36e28:	eafffff5 	b	36e04 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xab8>
   36e2c:	ebffbf6a 	bl	26bdc <CLogger::Get()>
   36e30:	e59f326c 	ldr	r3, [pc, #620]	; 370a4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd58>
   36e34:	e3a02004 	mov	r2, #4
   36e38:	e59f1214 	ldr	r1, [pc, #532]	; 37054 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd08>
   36e3c:	ebffbea3 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   36e40:	e595100c 	ldr	r1, [r5, #12]
   36e44:	e1a0000b 	mov	r0, fp
   36e48:	e3a02004 	mov	r2, #4
   36e4c:	ebffea03 	bl	31660 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   36e50:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36e54:	e59f11d4 	ldr	r1, [pc, #468]	; 37030 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36e58:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36e5c:	ebffdc71 	bl	2e028 <strlcpy>
   36e60:	eafffd47 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36e64:	ebffbf5c 	bl	26bdc <CLogger::Get()>
   36e68:	e59f3238 	ldr	r3, [pc, #568]	; 370a8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd5c>
   36e6c:	e3a02004 	mov	r2, #4
   36e70:	e59f11dc 	ldr	r1, [pc, #476]	; 37054 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd08>
   36e74:	ebffbe95 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   36e78:	e595100c 	ldr	r1, [r5, #12]
   36e7c:	e1a0000b 	mov	r0, fp
   36e80:	e3e02000 	mvn	r2, #0
   36e84:	ebffe9c6 	bl	315a4 <BusAccess::targetReqReset(int, int)>
   36e88:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36e8c:	e59f119c 	ldr	r1, [pc, #412]	; 37030 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36e90:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36e94:	ebffdc63 	bl	2e028 <strlcpy>
   36e98:	eafffd39 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36e9c:	e1a0000b 	mov	r0, fp
   36ea0:	ebffe95f 	bl	31424 <BusAccess::busAccessReinit()>
   36ea4:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36ea8:	e59f1180 	ldr	r1, [pc, #384]	; 37030 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36eac:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36eb0:	ebffdc5c 	bl	2e028 <strlcpy>
   36eb4:	eafffd32 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36eb8:	e1a0000b 	mov	r0, fp
   36ebc:	ebffecfb 	bl	322b0 <BusAccess::clearStatus()>
   36ec0:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36ec4:	e59f1164 	ldr	r1, [pc, #356]	; 37030 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36ec8:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36ecc:	ebffdc55 	bl	2e028 <strlcpy>
   36ed0:	eafffd2b 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36ed4:	e28d1e45 	add	r1, sp, #1104	; 0x450
   36ed8:	e1a0000b 	mov	r0, fp
   36edc:	e2811004 	add	r1, r1, #4
   36ee0:	e58d3454 	str	r3, [sp, #1108]	; 0x454
   36ee4:	e58d3458 	str	r3, [sp, #1112]	; 0x458
   36ee8:	e58d345c 	str	r3, [sp, #1116]	; 0x45c
   36eec:	e58d3460 	str	r3, [sp, #1120]	; 0x460
   36ef0:	e58d3464 	str	r3, [sp, #1124]	; 0x464
   36ef4:	e58d3468 	str	r3, [sp, #1128]	; 0x468
   36ef8:	e58d346c 	str	r3, [sp, #1132]	; 0x46c
   36efc:	e58d3470 	str	r3, [sp, #1136]	; 0x470
   36f00:	e58d3488 	str	r3, [sp, #1160]	; 0x488
   36f04:	e58d348c 	str	r3, [sp, #1164]	; 0x48c
   36f08:	e58d3490 	str	r3, [sp, #1168]	; 0x490
   36f0c:	e58d3494 	str	r3, [sp, #1172]	; 0x494
   36f10:	e58d3498 	str	r3, [sp, #1176]	; 0x498
   36f14:	e58d349c 	str	r3, [sp, #1180]	; 0x49c
   36f18:	e58d3474 	str	r3, [sp, #1140]	; 0x474
   36f1c:	e58d3478 	str	r3, [sp, #1144]	; 0x478
   36f20:	e58d347c 	str	r3, [sp, #1148]	; 0x47c
   36f24:	e58d3480 	str	r3, [sp, #1152]	; 0x480
   36f28:	e58d3484 	str	r3, [sp, #1156]	; 0x484
   36f2c:	ebffecd8 	bl	32294 <BusAccess::getStatus(BusAccessStatusInfo&)>
   36f30:	e28d0e45 	add	r0, sp, #1104	; 0x450
   36f34:	e2800004 	add	r0, r0, #4
   36f38:	ebffec99 	bl	321a4 <BusAccessStatusInfo::getJson()>
   36f3c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36f40:	e1a01000 	mov	r1, r0
   36f44:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36f48:	ebffdc36 	bl	2e028 <strlcpy>
   36f4c:	eafffd0c 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36f50:	e1a0000b 	mov	r0, fp
   36f54:	ebfff53a 	bl	34444 <BusAccess::rawBusControlMuxClear()>
   36f58:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36f5c:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36f60:	e1a00005 	mov	r0, r5
   36f64:	ebfffc65 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   36f68:	eafffd05 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36f6c:	e1a01007 	mov	r1, r7
   36f70:	e1a00005 	mov	r0, r5
   36f74:	ebfffbeb 	bl	35f28 <BusControlAPI::muxLineHandler(char const*)>
   36f78:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36f7c:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36f80:	e1a00005 	mov	r0, r5
   36f84:	ebfffc5d 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   36f88:	eafffcfd 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36f8c:	e1a01007 	mov	r1, r7
   36f90:	e1a00005 	mov	r0, r5
   36f94:	ebfffb1c 	bl	35c0c <BusControlAPI::busLineHandler(char const*)>
   36f98:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36f9c:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36fa0:	e1a00005 	mov	r0, r5
   36fa4:	ebfffc55 	bl	36100 <BusControlAPI::busLinesRead(char*, int)>
   36fa8:	eafffcf5 	b	36384 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36fac:	0003f0d4 	.word	0x0003f0d4
   36fb0:	00046d88 	.word	0x00046d88
   36fb4:	00046d8c 	.word	0x00046d8c
   36fb8:	00046da4 	.word	0x00046da4
   36fbc:	00046da8 	.word	0x00046da8
   36fc0:	00046dc4 	.word	0x00046dc4
   36fc4:	00046e0c 	.word	0x00046e0c
   36fc8:	00046db0 	.word	0x00046db0
   36fcc:	00046d94 	.word	0x00046d94
   36fd0:	00046e1c 	.word	0x00046e1c
   36fd4:	00046e28 	.word	0x00046e28
   36fd8:	00046e38 	.word	0x00046e38
   36fdc:	00046e4c 	.word	0x00046e4c
   36fe0:	00046e5c 	.word	0x00046e5c
   36fe4:	00046e70 	.word	0x00046e70
   36fe8:	00046e84 	.word	0x00046e84
   36fec:	00046e98 	.word	0x00046e98
   36ff0:	00046ea4 	.word	0x00046ea4
   36ff4:	00046eb4 	.word	0x00046eb4
   36ff8:	00047024 	.word	0x00047024
   36ffc:	00047030 	.word	0x00047030
   37000:	0004703c 	.word	0x0004703c
   37004:	00047048 	.word	0x00047048
   37008:	00047058 	.word	0x00047058
   3700c:	00047068 	.word	0x00047068
   37010:	00047074 	.word	0x00047074
   37014:	00047080 	.word	0x00047080
   37018:	00047090 	.word	0x00047090
   3701c:	000470a4 	.word	0x000470a4
   37020:	000470b0 	.word	0x000470b0
   37024:	000470b8 	.word	0x000470b8
   37028:	000470c0 	.word	0x000470c0
   3702c:	000470cc 	.word	0x000470cc
   37030:	00046e10 	.word	0x00046e10
   37034:	00000864 	.word	0x00000864
   37038:	00046dd4 	.word	0x00046dd4
   3703c:	00047a94 	.word	0x00047a94
   37040:	0004700c 	.word	0x0004700c
   37044:	00046ec8 	.word	0x00046ec8
   37048:	00046ed8 	.word	0x00046ed8
   3704c:	00046ee8 	.word	0x00046ee8
   37050:	00046ef0 	.word	0x00046ef0
   37054:	00046c44 	.word	0x00046c44
   37058:	00046f00 	.word	0x00046f00
   3705c:	00046f10 	.word	0x00046f10
   37060:	00046f20 	.word	0x00046f20
   37064:	00046c64 	.word	0x00046c64
   37068:	00046f24 	.word	0x00046f24
   3706c:	00046f34 	.word	0x00046f34
   37070:	00046f44 	.word	0x00046f44
   37074:	00046f54 	.word	0x00046f54
   37078:	00046f68 	.word	0x00046f68
   3707c:	00046f78 	.word	0x00046f78
   37080:	00046f84 	.word	0x00046f84
   37084:	00046f94 	.word	0x00046f94
   37088:	00046f9c 	.word	0x00046f9c
   3708c:	00046fb8 	.word	0x00046fb8
   37090:	00046fd8 	.word	0x00046fd8
   37094:	00046fe8 	.word	0x00046fe8
   37098:	00047010 	.word	0x00047010
   3709c:	0004701c 	.word	0x0004701c
   370a0:	00046ff4 	.word	0x00046ff4
   370a4:	00046fc8 	.word	0x00046fc8
   370a8:	00046fa8 	.word	0x00046fa8

000370ac <BusControlAPI::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   370ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   370b0:	e99d5000 	ldmib	sp, {ip, lr}
   370b4:	e3500000 	cmp	r0, #0
   370b8:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   370bc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   370c0:	eafffca1 	b	3634c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

000370c4 <McManager::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   370c4:	e3500000 	cmp	r0, #0
   370c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   370cc:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   370d0:	e2800a02 	add	r0, r0, #8192	; 0x2000
   370d4:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   370d8:	e3500000 	cmp	r0, #0
   370dc:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   370e0:	e590e000 	ldr	lr, [r0]
   370e4:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   370e8:	e1a0c00e 	mov	ip, lr
   370ec:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   370f0:	e12fff1c 	bx	ip

000370f4 <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)>:
   370f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   370f8:	e1a04000 	mov	r4, r0
   370fc:	e1a05001 	mov	r5, r1
   37100:	e1a06002 	mov	r6, r2
   37104:	e1a07003 	mov	r7, r3
   37108:	ebffbeb3 	bl	26bdc <CLogger::Get()>
   3710c:	e59f3048 	ldr	r3, [pc, #72]	; 3715c <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)+0x68>
   37110:	e3a02004 	mov	r2, #4
   37114:	e59f1044 	ldr	r1, [pc, #68]	; 37160 <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)+0x6c>
   37118:	ebffbdec 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3711c:	e3540000 	cmp	r4, #0
   37120:	0a00000b 	beq	37154 <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)+0x60>
   37124:	e2844a02 	add	r4, r4, #8192	; 0x2000
   37128:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   3712c:	e3500000 	cmp	r0, #0
   37130:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   37134:	e590c000 	ldr	ip, [r0]
   37138:	e1a03007 	mov	r3, r7
   3713c:	e59ce038 	ldr	lr, [ip, #56]	; 0x38
   37140:	e1a02006 	mov	r2, r6
   37144:	e1a01005 	mov	r1, r5
   37148:	e1a0c00e 	mov	ip, lr
   3714c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   37150:	e12fff1c 	bx	ip
   37154:	e1a00004 	mov	r0, r4
   37158:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3715c:	000470e0 	.word	0x000470e0
   37160:	000470d4 	.word	0x000470d4

00037164 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]>:
   37164:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37168:	e2803a02 	add	r3, r0, #8192	; 0x2000
   3716c:	e24dd01c 	sub	sp, sp, #28
   37170:	e1a02003 	mov	r2, r3
   37174:	e58d3014 	str	r3, [sp, #20]
   37178:	e5d33764 	ldrb	r3, [r3, #1892]	; 0x764
   3717c:	e3530000 	cmp	r3, #0
   37180:	0a000035 	beq	3725c <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0xf8>
   37184:	e3a03000 	mov	r3, #0
   37188:	e1a05000 	mov	r5, r0
   3718c:	e1a06003 	mov	r6, r3
   37190:	e1a07003 	mov	r7, r3
   37194:	e5c23767 	strb	r3, [r2, #1895]	; 0x767
   37198:	e5950010 	ldr	r0, [r5, #16]
   3719c:	ebfff53a 	bl	3468c <TargetProgrammer::numMemoryBlocks()>
   371a0:	e1500006 	cmp	r0, r6
   371a4:	da000025 	ble	37240 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0xdc>
   371a8:	e1a01006 	mov	r1, r6
   371ac:	e5950010 	ldr	r0, [r5, #16]
   371b0:	ebfff538 	bl	34698 <TargetProgrammer::getMemoryBlock(int)>
   371b4:	e1a04000 	mov	r4, r0
   371b8:	e5950010 	ldr	r0, [r5, #16]
   371bc:	e5958008 	ldr	r8, [r5, #8]
   371c0:	ebfff537 	bl	346a4 <TargetProgrammer::getMemoryImagePtr()>
   371c4:	e894000a 	ldm	r4, {r1, r3}
   371c8:	e58d7008 	str	r7, [sp, #8]
   371cc:	e0802001 	add	r2, r0, r1
   371d0:	e58d7004 	str	r7, [sp, #4]
   371d4:	e1a00008 	mov	r0, r8
   371d8:	e58d7000 	str	r7, [sp]
   371dc:	ebfff6a5 	bl	34c78 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
   371e0:	e1a09000 	mov	r9, r0
   371e4:	ebffbe7c 	bl	26bdc <CLogger::Get()>
   371e8:	e8940c00 	ldm	r4, {sl, fp}
   371ec:	e1a08000 	mov	r8, r0
   371f0:	ebffdb51 	bl	2df3c <micros>
   371f4:	e59f30b0 	ldr	r3, [pc, #176]	; 372ac <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0x148>
   371f8:	e58d000c 	str	r0, [sp, #12]
   371fc:	e58d9008 	str	r9, [sp, #8]
   37200:	e88d0c00 	stm	sp, {sl, fp}
   37204:	e1a00008 	mov	r0, r8
   37208:	e3a02004 	mov	r2, #4
   3720c:	e59f109c 	ldr	r1, [pc, #156]	; 372b0 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0x14c>
   37210:	ebffbdae 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37214:	e5943000 	ldr	r3, [r4]
   37218:	e2866001 	add	r6, r6, #1
   3721c:	e3530000 	cmp	r3, #0
   37220:	1affffdc 	bne	37198 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0x34>
   37224:	e3a02001 	mov	r2, #1
   37228:	e59d3014 	ldr	r3, [sp, #20]
   3722c:	e5950010 	ldr	r0, [r5, #16]
   37230:	e5c32767 	strb	r2, [r3, #1895]	; 0x767
   37234:	ebfff514 	bl	3468c <TargetProgrammer::numMemoryBlocks()>
   37238:	e1500006 	cmp	r0, r6
   3723c:	caffffd9 	bgt	371a8 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0x44>
   37240:	e59d3014 	ldr	r3, [sp, #20]
   37244:	e5d33765 	ldrb	r3, [r3, #1893]	; 0x765
   37248:	e3530000 	cmp	r3, #0
   3724c:	1a000011 	bne	37298 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0x134>
   37250:	e3a03000 	mov	r3, #0
   37254:	e59d2014 	ldr	r2, [sp, #20]
   37258:	e5c23764 	strb	r3, [r2, #1892]	; 0x764
   3725c:	e59d2014 	ldr	r2, [sp, #20]
   37260:	e5d23766 	ldrb	r3, [r2, #1894]	; 0x766
   37264:	e3530000 	cmp	r3, #0
   37268:	0a000008 	beq	37290 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0x12c>
   3726c:	e5920760 	ldr	r0, [r2, #1888]	; 0x760
   37270:	e3500000 	cmp	r0, #0
   37274:	0a000002 	beq	37284 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0x120>
   37278:	e5903000 	ldr	r3, [r0]
   3727c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   37280:	e12fff33 	blx	r3
   37284:	e3a03000 	mov	r3, #0
   37288:	e59d2014 	ldr	r2, [sp, #20]
   3728c:	e5c23766 	strb	r3, [r2, #1894]	; 0x766
   37290:	e28dd01c 	add	sp, sp, #28
   37294:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37298:	e3e02000 	mvn	r2, #0
   3729c:	e5951014 	ldr	r1, [r5, #20]
   372a0:	e595000c 	ldr	r0, [r5, #12]
   372a4:	ebffe8be 	bl	315a4 <BusAccess::targetReqReset(int, int)>
   372a8:	eaffffe8 	b	37250 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0xec>
   372ac:	000470f4 	.word	0x000470f4
   372b0:	000470d4 	.word	0x000470d4

000372b4 <McManager::busActionCompleteStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   372b4:	e2411004 	sub	r1, r1, #4
   372b8:	e16f1f11 	clz	r1, r1
   372bc:	e3500000 	cmp	r0, #0
   372c0:	e1a012a1 	lsr	r1, r1, #5
   372c4:	03a01000 	moveq	r1, #0
   372c8:	e3510000 	cmp	r1, #0
   372cc:	012fff1e 	bxeq	lr
   372d0:	eaffffa3 	b	37164 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]>

000372d4 <McManager::McManager(DisplayBase*, CommandHandler&, HwManager&, BusAccess&, TargetProgrammer&)>:
   372d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   372d8:	e3a0c000 	mov	ip, #0
   372dc:	e3e04000 	mvn	r4, #0
   372e0:	e3a07ffa 	mov	r7, #1000	; 0x3e8
   372e4:	e3a06064 	mov	r6, #100	; 0x64
   372e8:	e3a05f7d 	mov	r5, #500	; 0x1f4
   372ec:	e880000e 	stm	r0, {r1, r2, r3}
   372f0:	e59d2014 	ldr	r2, [sp, #20]
   372f4:	e59d3018 	ldr	r3, [sp, #24]
   372f8:	e580200c 	str	r2, [r0, #12]
   372fc:	e59f204c 	ldr	r2, [pc, #76]	; 37350 <McManager::McManager(DisplayBase*, CommandHandler&, HwManager&, BusAccess&, TargetProgrammer&)+0x7c>
   37300:	e5803010 	str	r3, [r0, #16]
   37304:	e2803a02 	add	r3, r0, #8192	; 0x2000
   37308:	e5837768 	str	r7, [r3, #1896]	; 0x768
   3730c:	e583677c 	str	r6, [r3, #1916]	; 0x77c
   37310:	e5835788 	str	r5, [r3, #1928]	; 0x788
   37314:	e1a0e000 	mov	lr, r0
   37318:	e5804014 	str	r4, [r0, #20]
   3731c:	e5804018 	str	r4, [r0, #24]
   37320:	e5820000 	str	r0, [r2]
   37324:	e583c75c 	str	ip, [r3, #1884]	; 0x75c
   37328:	e583c760 	str	ip, [r3, #1888]	; 0x760
   3732c:	e583c730 	str	ip, [r3, #1840]	; 0x730
   37330:	e583c76c 	str	ip, [r3, #1900]	; 0x76c
   37334:	e583c774 	str	ip, [r3, #1908]	; 0x774
   37338:	e583c778 	str	ip, [r3, #1912]	; 0x778
   3733c:	e583c770 	str	ip, [r3, #1904]	; 0x770
   37340:	e5c3c780 	strb	ip, [r3, #1920]	; 0x780
   37344:	e583c78c 	str	ip, [r3, #1932]	; 0x78c
   37348:	e583c784 	str	ip, [r3, #1924]	; 0x784
   3734c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   37350:	0004e560 	.word	0x0004e560

00037354 <McManager::init()>:
   37354:	e92d4010 	push	{r4, lr}
   37358:	e5903014 	ldr	r3, [r0, #20]
   3735c:	e24dd030 	sub	sp, sp, #48	; 0x30
   37360:	e3530000 	cmp	r3, #0
   37364:	e1a04000 	mov	r4, r0
   37368:	ba00001f 	blt	373ec <McManager::init()+0x98>
   3736c:	e5943018 	ldr	r3, [r4, #24]
   37370:	e3530000 	cmp	r3, #0
   37374:	ba000012 	blt	373c4 <McManager::init()+0x70>
   37378:	e59f00bc 	ldr	r0, [pc, #188]	; 3743c <McManager::init()+0xe8>
   3737c:	ebffcf40 	bl	2b084 <operator new(unsigned int)>
   37380:	e594200c 	ldr	r2, [r4, #12]
   37384:	e1a01004 	mov	r1, r4
   37388:	eb000874 	bl	39560 <McTerminal::McTerminal(McManager&, BusAccess&)>
   3738c:	e59f00ac 	ldr	r0, [pc, #172]	; 37440 <McManager::init()+0xec>
   37390:	ebffcf3b 	bl	2b084 <operator new(unsigned int)>
   37394:	e594200c 	ldr	r2, [r4, #12]
   37398:	e1a01004 	mov	r1, r4
   3739c:	eb00049d 	bl	38618 <McTRS80::McTRS80(McManager&, BusAccess&)>
   373a0:	e3a03000 	mov	r3, #0
   373a4:	e3a02001 	mov	r2, #1
   373a8:	e2844a02 	add	r4, r4, #8192	; 0x2000
   373ac:	e5c42780 	strb	r2, [r4, #1920]	; 0x780
   373b0:	e584376c 	str	r3, [r4, #1900]	; 0x76c
   373b4:	e5843774 	str	r3, [r4, #1908]	; 0x774
   373b8:	e5843784 	str	r3, [r4, #1924]	; 0x784
   373bc:	e28dd030 	add	sp, sp, #48	; 0x30
   373c0:	e8bd8010 	pop	{r4, pc}
   373c4:	e3a02000 	mov	r2, #0
   373c8:	e59f3074 	ldr	r3, [pc, #116]	; 37444 <McManager::init()+0xf0>
   373cc:	e5940004 	ldr	r0, [r4, #4]
   373d0:	e1a01004 	mov	r1, r4
   373d4:	e88d000c 	stm	sp, {r2, r3}
   373d8:	e59f3068 	ldr	r3, [pc, #104]	; 37448 <McManager::init()+0xf4>
   373dc:	e3a02001 	mov	r2, #1
   373e0:	ebffe1d4 	bl	2fb38 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   373e4:	e5840018 	str	r0, [r4, #24]
   373e8:	eaffffe2 	b	37378 <McManager::init()+0x24>
   373ec:	e3a03000 	mov	r3, #0
   373f0:	e590000c 	ldr	r0, [r0, #12]
   373f4:	e59f2050 	ldr	r2, [pc, #80]	; 3744c <McManager::init()+0xf8>
   373f8:	e58d3028 	str	r3, [sp, #40]	; 0x28
   373fc:	e58d3024 	str	r3, [sp, #36]	; 0x24
   37400:	e58d3020 	str	r3, [sp, #32]
   37404:	e58d301c 	str	r3, [sp, #28]
   37408:	e58d3018 	str	r3, [sp, #24]
   3740c:	e58d3014 	str	r3, [sp, #20]
   37410:	e58d3010 	str	r3, [sp, #16]
   37414:	e58d300c 	str	r3, [sp, #12]
   37418:	e58d3008 	str	r3, [sp, #8]
   3741c:	e58d3004 	str	r3, [sp, #4]
   37420:	e58d3000 	str	r3, [sp]
   37424:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   37428:	e59f3020 	ldr	r3, [pc, #32]	; 37450 <McManager::init()+0xfc>
   3742c:	e3a01001 	mov	r1, #1
   37430:	ebffef6d 	bl	331ec <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   37434:	e5840014 	str	r0, [r4, #20]
   37438:	eaffffcb 	b	3736c <McManager::init()+0x18>
   3743c:	00062f20 	.word	0x00062f20
   37440:	000005e8 	.word	0x000005e8
   37444:	000370f4 	.word	0x000370f4
   37448:	00037fec 	.word	0x00037fec
   3744c:	000370c4 	.word	0x000370c4
   37450:	000372b4 	.word	0x000372b4

00037454 <McManager::getNumMachines()>:
   37454:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37458:	e590075c 	ldr	r0, [r0, #1884]	; 0x75c
   3745c:	e12fff1e 	bx	lr

00037460 <McManager::getMachine()>:
   37460:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37464:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   37468:	e12fff1e 	bx	lr

0003746c <McManager::getMachineName()>:
   3746c:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37470:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   37474:	e3500000 	cmp	r0, #0
   37478:	0a000002 	beq	37488 <McManager::getMachineName()+0x1c>
   3747c:	e5903000 	ldr	r3, [r0]
   37480:	e5933008 	ldr	r3, [r3, #8]
   37484:	e12fff13 	bx	r3
   37488:	e59f0000 	ldr	r0, [pc]	; 37490 <McManager::getMachineName()+0x24>
   3748c:	e12fff1e 	bx	lr
   37490:	0004596c 	.word	0x0004596c

00037494 <McManager::getMachineJSON()>:
   37494:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37498:	e3a02e46 	mov	r2, #1120	; 0x460
   3749c:	e2808a02 	add	r8, r0, #8192	; 0x2000
   374a0:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
   374a4:	e1a0b000 	mov	fp, r0
   374a8:	e59f114c 	ldr	r1, [pc, #332]	; 375fc <McManager::getMachineJSON()+0x168>
   374ac:	e59f014c 	ldr	r0, [pc, #332]	; 37600 <McManager::getMachineJSON()+0x16c>
   374b0:	ebffdadc 	bl	2e028 <strlcpy>
   374b4:	e598375c 	ldr	r3, [r8, #1884]	; 0x75c
   374b8:	e3530000 	cmp	r3, #0
   374bc:	da00004b 	ble	375f0 <McManager::getMachineJSON()+0x15c>
   374c0:	e5980734 	ldr	r0, [r8, #1844]	; 0x734
   374c4:	e59fc134 	ldr	ip, [pc, #308]	; 37600 <McManager::getMachineJSON()+0x16c>
   374c8:	e5903000 	ldr	r3, [r0]
   374cc:	e28d100c 	add	r1, sp, #12
   374d0:	e593300c 	ldr	r3, [r3, #12]
   374d4:	e3a02f4b 	mov	r2, #300	; 0x12c
   374d8:	e58dc004 	str	ip, [sp, #4]
   374dc:	e28b5c27 	add	r5, fp, #9984	; 0x2700
   374e0:	e1a0700c 	mov	r7, ip
   374e4:	e2855034 	add	r5, r5, #52	; 0x34
   374e8:	e12fff33 	blx	r3
   374ec:	e3a04000 	mov	r4, #0
   374f0:	e3a06e46 	mov	r6, #1120	; 0x460
   374f4:	e3a0af4b 	mov	sl, #300	; 0x12c
   374f8:	e59f9104 	ldr	r9, [pc, #260]	; 37604 <McManager::getMachineJSON()+0x170>
   374fc:	ea000009 	b	37528 <McManager::getMachineJSON()+0x94>
   37500:	e5b50004 	ldr	r0, [r5, #4]!
   37504:	e1a0200a 	mov	r2, sl
   37508:	e5903000 	ldr	r3, [r0]
   3750c:	e28d100c 	add	r1, sp, #12
   37510:	e593300c 	ldr	r3, [r3, #12]
   37514:	e12fff33 	blx	r3
   37518:	e1a02006 	mov	r2, r6
   3751c:	e1a01009 	mov	r1, r9
   37520:	e1a00007 	mov	r0, r7
   37524:	ebffdadb 	bl	2e098 <strlcat>
   37528:	e1a02006 	mov	r2, r6
   3752c:	e28d100c 	add	r1, sp, #12
   37530:	e1a00007 	mov	r0, r7
   37534:	ebffdad7 	bl	2e098 <strlcat>
   37538:	e598375c 	ldr	r3, [r8, #1884]	; 0x75c
   3753c:	e2844001 	add	r4, r4, #1
   37540:	e1530004 	cmp	r3, r4
   37544:	caffffed 	bgt	37500 <McManager::getMachineJSON()+0x6c>
   37548:	e3a02e46 	mov	r2, #1120	; 0x460
   3754c:	e59f10b4 	ldr	r1, [pc, #180]	; 37608 <McManager::getMachineJSON()+0x174>
   37550:	e59f00a8 	ldr	r0, [pc, #168]	; 37600 <McManager::getMachineJSON()+0x16c>
   37554:	ebffdacf 	bl	2e098 <strlcat>
   37558:	e3a02e46 	mov	r2, #1120	; 0x460
   3755c:	e59f10a8 	ldr	r1, [pc, #168]	; 3760c <McManager::getMachineJSON()+0x178>
   37560:	e59f0098 	ldr	r0, [pc, #152]	; 37600 <McManager::getMachineJSON()+0x16c>
   37564:	ebffdacb 	bl	2e098 <strlcat>
   37568:	e3a02e46 	mov	r2, #1120	; 0x460
   3756c:	e59f109c 	ldr	r1, [pc, #156]	; 37610 <McManager::getMachineJSON()+0x17c>
   37570:	e59f0088 	ldr	r0, [pc, #136]	; 37600 <McManager::getMachineJSON()+0x16c>
   37574:	ebffdac7 	bl	2e098 <strlcat>
   37578:	e5980760 	ldr	r0, [r8, #1888]	; 0x760
   3757c:	e3500000 	cmp	r0, #0
   37580:	0a000018 	beq	375e8 <McManager::getMachineJSON()+0x154>
   37584:	e5903000 	ldr	r3, [r0]
   37588:	e5933008 	ldr	r3, [r3, #8]
   3758c:	e12fff33 	blx	r3
   37590:	e1a01000 	mov	r1, r0
   37594:	e3a02e46 	mov	r2, #1120	; 0x460
   37598:	e59f0060 	ldr	r0, [pc, #96]	; 37600 <McManager::getMachineJSON()+0x16c>
   3759c:	ebffdabd 	bl	2e098 <strlcat>
   375a0:	e3a02e46 	mov	r2, #1120	; 0x460
   375a4:	e59f1064 	ldr	r1, [pc, #100]	; 37610 <McManager::getMachineJSON()+0x17c>
   375a8:	e59f0050 	ldr	r0, [pc, #80]	; 37600 <McManager::getMachineJSON()+0x16c>
   375ac:	ebffdab9 	bl	2e098 <strlcat>
   375b0:	e59b000c 	ldr	r0, [fp, #12]
   375b4:	ebffeeda 	bl	33124 <BusAccess::clockCurFreqHz()>
   375b8:	e1a04000 	mov	r4, r0
   375bc:	e59f003c 	ldr	r0, [pc, #60]	; 37600 <McManager::getMachineJSON()+0x16c>
   375c0:	ebffcab1 	bl	2a08c <strlen>
   375c4:	e59d2004 	ldr	r2, [sp, #4]
   375c8:	e1a03004 	mov	r3, r4
   375cc:	e0820000 	add	r0, r2, r0
   375d0:	e3a01e46 	mov	r1, #1120	; 0x460
   375d4:	e59f2038 	ldr	r2, [pc, #56]	; 37614 <McManager::getMachineJSON()+0x180>
   375d8:	ebffdb09 	bl	2e204 <snprintf>
   375dc:	e59f001c 	ldr	r0, [pc, #28]	; 37600 <McManager::getMachineJSON()+0x16c>
   375e0:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   375e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   375e8:	e59f1028 	ldr	r1, [pc, #40]	; 37618 <McManager::getMachineJSON()+0x184>
   375ec:	eaffffe8 	b	37594 <McManager::getMachineJSON()+0x100>
   375f0:	e59f3008 	ldr	r3, [pc, #8]	; 37600 <McManager::getMachineJSON()+0x16c>
   375f4:	e58d3004 	str	r3, [sp, #4]
   375f8:	eaffffd2 	b	37548 <McManager::getMachineJSON()+0xb4>
   375fc:	00047128 	.word	0x00047128
   37600:	0004e564 	.word	0x0004e564
   37604:	000433f8 	.word	0x000433f8
   37608:	00046b54 	.word	0x00046b54
   3760c:	00047138 	.word	0x00047138
   37610:	0004700c 	.word	0x0004700c
   37614:	00047148 	.word	0x00047148
   37618:	0004596c 	.word	0x0004596c

0003761c <McManager::getMachineClock()>:
   3761c:	e590000c 	ldr	r0, [r0, #12]
   37620:	eaffeebf 	b	33124 <BusAccess::clockCurFreqHz()>

00037624 <McManager::targetIrq(int)>:
   37624:	e1a03000 	mov	r3, r0
   37628:	e1a02001 	mov	r2, r1
   3762c:	e590000c 	ldr	r0, [r0, #12]
   37630:	e5931014 	ldr	r1, [r3, #20]
   37634:	eaffe7fc 	b	3162c <BusAccess::targetReqIRQ(int, int)>

00037638 <McManager::add(McBase*)>:
   37638:	e2802a02 	add	r2, r0, #8192	; 0x2000
   3763c:	e592375c 	ldr	r3, [r2, #1884]	; 0x75c
   37640:	e3530009 	cmp	r3, #9
   37644:	d283cd27 	addle	ip, r3, #2496	; 0x9c0
   37648:	d080010c 	addle	r0, r0, ip, lsl #2
   3764c:	d2833001 	addle	r3, r3, #1
   37650:	d582375c 	strle	r3, [r2, #1884]	; 0x75c
   37654:	d5801034 	strle	r1, [r0, #52]	; 0x34
   37658:	e12fff1e 	bx	lr

0003765c <McManager::setupMachine(char const*)>:
   3765c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37660:	e24dde1a 	sub	sp, sp, #416	; 0x1a0
   37664:	e1a07000 	mov	r7, r0
   37668:	e28d2010 	add	r2, sp, #16
   3766c:	e3a03064 	mov	r3, #100	; 0x64
   37670:	e59f0230 	ldr	r0, [pc, #560]	; 378a8 <McManager::setupMachine(char const*)+0x24c>
   37674:	e1a08001 	mov	r8, r1
   37678:	ebffdb20 	bl	2e300 <jsonGetValueForKey>
   3767c:	e3500000 	cmp	r0, #0
   37680:	e2876a02 	add	r6, r7, #8192	; 0x2000
   37684:	1a000076 	bne	37864 <McManager::setupMachine(char const*)+0x208>
   37688:	e596375c 	ldr	r3, [r6, #1884]	; 0x75c
   3768c:	e3530000 	cmp	r3, #0
   37690:	da00001d 	ble	3770c <McManager::setupMachine(char const*)+0xb0>
   37694:	e5960734 	ldr	r0, [r6, #1844]	; 0x734
   37698:	e5903000 	ldr	r3, [r0]
   3769c:	e5933008 	ldr	r3, [r3, #8]
   376a0:	e12fff33 	blx	r3
   376a4:	e3a02064 	mov	r2, #100	; 0x64
   376a8:	e1a01000 	mov	r1, r0
   376ac:	e28d0010 	add	r0, sp, #16
   376b0:	ebffda5c 	bl	2e028 <strlcpy>
   376b4:	e596375c 	ldr	r3, [r6, #1884]	; 0x75c
   376b8:	e3530000 	cmp	r3, #0
   376bc:	c3a04000 	movgt	r4, #0
   376c0:	c2875c27 	addgt	r5, r7, #9984	; 0x2700
   376c4:	c1a0a004 	movgt	sl, r4
   376c8:	c2855030 	addgt	r5, r5, #48	; 0x30
   376cc:	da00000e 	ble	3770c <McManager::setupMachine(char const*)+0xb0>
   376d0:	e5b50004 	ldr	r0, [r5, #4]!
   376d4:	e3500000 	cmp	r0, #0
   376d8:	0a000007 	beq	376fc <McManager::setupMachine(char const*)+0xa0>
   376dc:	e5903000 	ldr	r3, [r0]
   376e0:	e28d20d8 	add	r2, sp, #216	; 0xd8
   376e4:	e58da0d8 	str	sl, [sp, #216]	; 0xd8
   376e8:	e5933000 	ldr	r3, [r3]
   376ec:	e28d1010 	add	r1, sp, #16
   376f0:	e12fff33 	blx	r3
   376f4:	e2509000 	subs	r9, r0, #0
   376f8:	1a000007 	bne	3771c <McManager::setupMachine(char const*)+0xc0>
   376fc:	e596375c 	ldr	r3, [r6, #1884]	; 0x75c
   37700:	e2844001 	add	r4, r4, #1
   37704:	e1530004 	cmp	r3, r4
   37708:	cafffff0 	bgt	376d0 <McManager::setupMachine(char const*)+0x74>
   3770c:	e3a09000 	mov	r9, #0
   37710:	e1a00009 	mov	r0, r9
   37714:	e28dde1a 	add	sp, sp, #416	; 0x1a0
   37718:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3771c:	e2844d27 	add	r4, r4, #2496	; 0x9c0
   37720:	e0874104 	add	r4, r7, r4, lsl #2
   37724:	e5944034 	ldr	r4, [r4, #52]	; 0x34
   37728:	e3540000 	cmp	r4, #0
   3772c:	0afffff6 	beq	3770c <McManager::setupMachine(char const*)+0xb0>
   37730:	e3a02000 	mov	r2, #0
   37734:	e5971014 	ldr	r1, [r7, #20]
   37738:	e597000c 	ldr	r0, [r7, #12]
   3773c:	e5864760 	str	r4, [r6, #1888]	; 0x760
   37740:	ebffe76a 	bl	314f0 <BusAccess::waitOnIO(int, bool)>
   37744:	e3a02000 	mov	r2, #0
   37748:	e5971014 	ldr	r1, [r7, #20]
   3774c:	e597000c 	ldr	r0, [r7, #12]
   37750:	ebffe75d 	bl	314cc <BusAccess::waitOnMemory(int, bool)>
   37754:	e5943000 	ldr	r3, [r4]
   37758:	e1a02008 	mov	r2, r8
   3775c:	e28d1010 	add	r1, sp, #16
   37760:	e5933010 	ldr	r3, [r3, #16]
   37764:	e1a00004 	mov	r0, r4
   37768:	e12fff33 	blx	r3
   3776c:	e5943000 	ldr	r3, [r4]
   37770:	e5971000 	ldr	r1, [r7]
   37774:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   37778:	e1a00004 	mov	r0, r4
   3777c:	e12fff33 	blx	r3
   37780:	e5943000 	ldr	r3, [r4]
   37784:	e59f2120 	ldr	r2, [pc, #288]	; 378ac <McManager::setupMachine(char const*)+0x250>
   37788:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   3778c:	e597500c 	ldr	r5, [r7, #12]
   37790:	e1530002 	cmp	r3, r2
   37794:	e5971014 	ldr	r1, [r7, #20]
   37798:	1a000036 	bne	37878 <McManager::setupMachine(char const*)+0x21c>
   3779c:	e5d420a8 	ldrb	r2, [r4, #168]	; 0xa8
   377a0:	e1a00005 	mov	r0, r5
   377a4:	ebffe751 	bl	314f0 <BusAccess::waitOnIO(int, bool)>
   377a8:	e5943000 	ldr	r3, [r4]
   377ac:	e59f20fc 	ldr	r2, [pc, #252]	; 378b0 <McManager::setupMachine(char const*)+0x254>
   377b0:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   377b4:	e597500c 	ldr	r5, [r7, #12]
   377b8:	e1530002 	cmp	r3, r2
   377bc:	e5971014 	ldr	r1, [r7, #20]
   377c0:	1a000032 	bne	37890 <McManager::setupMachine(char const*)+0x234>
   377c4:	e5d420a9 	ldrb	r2, [r4, #169]	; 0xa9
   377c8:	e1a00005 	mov	r0, r5
   377cc:	ebffe73e 	bl	314cc <BusAccess::waitOnMemory(int, bool)>
   377d0:	e1a01008 	mov	r1, r8
   377d4:	e28d2074 	add	r2, sp, #116	; 0x74
   377d8:	e3a03064 	mov	r3, #100	; 0x64
   377dc:	e59f00d0 	ldr	r0, [pc, #208]	; 378b4 <McManager::setupMachine(char const*)+0x258>
   377e0:	ebffdac6 	bl	2e300 <jsonGetValueForKey>
   377e4:	e2504000 	subs	r4, r0, #0
   377e8:	1a000007 	bne	3780c <McManager::setupMachine(char const*)+0x1b0>
   377ec:	ebffbcfa 	bl	26bdc <CLogger::Get()>
   377f0:	e59f30c0 	ldr	r3, [pc, #192]	; 378b8 <McManager::setupMachine(char const*)+0x25c>
   377f4:	e3a02004 	mov	r2, #4
   377f8:	e59f10bc 	ldr	r1, [pc, #188]	; 378bc <McManager::setupMachine(char const*)+0x260>
   377fc:	ebffbc33 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37800:	e1a00009 	mov	r0, r9
   37804:	e28dde1a 	add	sp, sp, #416	; 0x1a0
   37808:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3780c:	e1a09004 	mov	r9, r4
   37810:	e3a020c8 	mov	r2, #200	; 0xc8
   37814:	e59f10a4 	ldr	r1, [pc, #164]	; 378c0 <McManager::setupMachine(char const*)+0x264>
   37818:	e28d00d8 	add	r0, sp, #216	; 0xd8
   3781c:	ebffda01 	bl	2e028 <strlcpy>
   37820:	e3a020c8 	mov	r2, #200	; 0xc8
   37824:	e28d1074 	add	r1, sp, #116	; 0x74
   37828:	e28d00d8 	add	r0, sp, #216	; 0xd8
   3782c:	ebffda19 	bl	2e098 <strlcat>
   37830:	e28d10d8 	add	r1, sp, #216	; 0xd8
   37834:	e5970004 	ldr	r0, [r7, #4]
   37838:	ebffe2ea 	bl	303e8 <CommandHandler::sendAPIReq(char const*)>
   3783c:	ebffbce6 	bl	26bdc <CLogger::Get()>
   37840:	e28d30d8 	add	r3, sp, #216	; 0xd8
   37844:	e58d3000 	str	r3, [sp]
   37848:	e3a02004 	mov	r2, #4
   3784c:	e59f3070 	ldr	r3, [pc, #112]	; 378c4 <McManager::setupMachine(char const*)+0x268>
   37850:	e59f1064 	ldr	r1, [pc, #100]	; 378bc <McManager::setupMachine(char const*)+0x260>
   37854:	ebffbc1d 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37858:	e1a00009 	mov	r0, r9
   3785c:	e28dde1a 	add	sp, sp, #416	; 0x1a0
   37860:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37864:	e28d0010 	add	r0, sp, #16
   37868:	ebffca07 	bl	2a08c <strlen>
   3786c:	e3500000 	cmp	r0, #0
   37870:	0affff84 	beq	37688 <McManager::setupMachine(char const*)+0x2c>
   37874:	eaffff8e 	b	376b4 <McManager::setupMachine(char const*)+0x58>
   37878:	e58d100c 	str	r1, [sp, #12]
   3787c:	e1a00004 	mov	r0, r4
   37880:	e12fff33 	blx	r3
   37884:	e59d100c 	ldr	r1, [sp, #12]
   37888:	e1a02000 	mov	r2, r0
   3788c:	eaffffc3 	b	377a0 <McManager::setupMachine(char const*)+0x144>
   37890:	e58d100c 	str	r1, [sp, #12]
   37894:	e1a00004 	mov	r0, r4
   37898:	e12fff33 	blx	r3
   3789c:	e59d100c 	ldr	r1, [sp, #12]
   378a0:	e1a02000 	mov	r2, r0
   378a4:	eaffffc7 	b	377c8 <McManager::setupMachine(char const*)+0x16c>
   378a8:	00046bb0 	.word	0x00046bb0
   378ac:	00038024 	.word	0x00038024
   378b0:	0003802c 	.word	0x0003802c
   378b4:	00047158 	.word	0x00047158
   378b8:	00047188 	.word	0x00047188
   378bc:	000470d4 	.word	0x000470d4
   378c0:	00047160 	.word	0x00047160
   378c4:	00047174 	.word	0x00047174

000378c8 <McManager::setMachineByName(char const*)>:
   378c8:	e92d4010 	push	{r4, lr}
   378cc:	e1a04000 	mov	r4, r0
   378d0:	e24ddffa 	sub	sp, sp, #1000	; 0x3e8
   378d4:	e1a03001 	mov	r3, r1
   378d8:	e59f201c 	ldr	r2, [pc, #28]	; 378fc <McManager::setMachineByName(char const*)+0x34>
   378dc:	e1a0000d 	mov	r0, sp
   378e0:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   378e4:	ebffda46 	bl	2e204 <snprintf>
   378e8:	e1a0100d 	mov	r1, sp
   378ec:	e1a00004 	mov	r0, r4
   378f0:	ebffff59 	bl	3765c <McManager::setupMachine(char const*)>
   378f4:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   378f8:	e8bd8010 	pop	{r4, pc}
   378fc:	0004719c 	.word	0x0004719c

00037900 <McManager::displayRefresh()>:
   37900:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   37904:	e2804a02 	add	r4, r0, #8192	; 0x2000
   37908:	e5943760 	ldr	r3, [r4, #1888]	; 0x760
   3790c:	e3530000 	cmp	r3, #0
   37910:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   37914:	e5932000 	ldr	r2, [r3]
   37918:	e59f113c 	ldr	r1, [pc, #316]	; 37a5c <McManager::displayRefresh()+0x15c>
   3791c:	e5922058 	ldr	r2, [r2, #88]	; 0x58
   37920:	e1a05000 	mov	r5, r0
   37924:	e1520001 	cmp	r2, r1
   37928:	1a000039 	bne	37a14 <McManager::displayRefresh()+0x114>
   3792c:	e5937074 	ldr	r7, [r3, #116]	; 0x74
   37930:	ebffd982 	bl	2df40 <millis>
   37934:	e1a01007 	mov	r1, r7
   37938:	e1a06000 	mov	r6, r0
   3793c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   37940:	eb001903 	bl	3dd54 <__aeabi_uidiv>
   37944:	e5941774 	ldr	r1, [r4, #1908]	; 0x774
   37948:	e1a02000 	mov	r2, r0
   3794c:	e1a00006 	mov	r0, r6
   37950:	ebffd997 	bl	2dfb4 <isTimeout>
   37954:	e3500000 	cmp	r0, #0
   37958:	1a000014 	bne	379b0 <McManager::displayRefresh()+0xb0>
   3795c:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   37960:	e5903000 	ldr	r3, [r0]
   37964:	e5933020 	ldr	r3, [r3, #32]
   37968:	e12fff33 	blx	r3
   3796c:	ebffd973 	bl	2df40 <millis>
   37970:	e5942768 	ldr	r2, [r4, #1896]	; 0x768
   37974:	e5941778 	ldr	r1, [r4, #1912]	; 0x778
   37978:	ebffd98d 	bl	2dfb4 <isTimeout>
   3797c:	e3500000 	cmp	r0, #0
   37980:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   37984:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   37988:	e594376c 	ldr	r3, [r4, #1900]	; 0x76c
   3798c:	e5941768 	ldr	r1, [r4, #1896]	; 0x768
   37990:	e0000390 	mul	r0, r0, r3
   37994:	eb0018ee 	bl	3dd54 <__aeabi_uidiv>
   37998:	e3a03000 	mov	r3, #0
   3799c:	e5840770 	str	r0, [r4, #1904]	; 0x770
   379a0:	e584376c 	str	r3, [r4, #1900]	; 0x76c
   379a4:	ebffd965 	bl	2df40 <millis>
   379a8:	e5840778 	str	r0, [r4, #1912]	; 0x778
   379ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   379b0:	ebffd962 	bl	2df40 <millis>
   379b4:	e5942760 	ldr	r2, [r4, #1888]	; 0x760
   379b8:	e594376c 	ldr	r3, [r4, #1900]	; 0x76c
   379bc:	e5921000 	ldr	r1, [r2]
   379c0:	e59fc098 	ldr	ip, [pc, #152]	; 37a60 <McManager::displayRefresh()+0x160>
   379c4:	e5911060 	ldr	r1, [r1, #96]	; 0x60
   379c8:	e2833001 	add	r3, r3, #1
   379cc:	e151000c 	cmp	r1, ip
   379d0:	e5840774 	str	r0, [r4, #1908]	; 0x774
   379d4:	e584376c 	str	r3, [r4, #1900]	; 0x76c
   379d8:	1a00001c 	bne	37a50 <McManager::displayRefresh()+0x150>
   379dc:	e5d2009c 	ldrb	r0, [r2, #156]	; 0x9c
   379e0:	e3500000 	cmp	r0, #0
   379e4:	1a00000e 	bne	37a24 <McManager::displayRefresh()+0x124>
   379e8:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   379ec:	e5903000 	ldr	r3, [r0]
   379f0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   379f4:	e12fff33 	blx	r3
   379f8:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   379fc:	e3500000 	cmp	r0, #0
   37a00:	0affffd6 	beq	37960 <McManager::displayRefresh()+0x60>
   37a04:	e5903000 	ldr	r3, [r0]
   37a08:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   37a0c:	e12fff33 	blx	r3
   37a10:	eaffffd1 	b	3795c <McManager::displayRefresh()+0x5c>
   37a14:	e1a00003 	mov	r0, r3
   37a18:	e12fff32 	blx	r2
   37a1c:	e1a07000 	mov	r7, r0
   37a20:	eaffffc2 	b	37930 <McManager::displayRefresh()+0x30>
   37a24:	e595000c 	ldr	r0, [r5, #12]
   37a28:	ebffe6bd 	bl	31524 <BusAccess::waitIsHeld()>
   37a2c:	e3500000 	cmp	r0, #0
   37a30:	0affffec 	beq	379e8 <McManager::displayRefresh()+0xe8>
   37a34:	e3a02000 	mov	r2, #0
   37a38:	e5951014 	ldr	r1, [r5, #20]
   37a3c:	e595000c 	ldr	r0, [r5, #12]
   37a40:	ebffe706 	bl	31660 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   37a44:	e3a03001 	mov	r3, #1
   37a48:	e5c43766 	strb	r3, [r4, #1894]	; 0x766
   37a4c:	eaffffe9 	b	379f8 <McManager::displayRefresh()+0xf8>
   37a50:	e1a00002 	mov	r0, r2
   37a54:	e12fff31 	blx	r1
   37a58:	eaffffe0 	b	379e0 <McManager::displayRefresh()+0xe0>
   37a5c:	00038034 	.word	0x00038034
   37a60:	0003803c 	.word	0x0003803c

00037a64 <McManager::service()>:
   37a64:	e92d4070 	push	{r4, r5, r6, lr}
   37a68:	e24ddd4e 	sub	sp, sp, #4992	; 0x1380
   37a6c:	e2804a02 	add	r4, r0, #8192	; 0x2000
   37a70:	e24dd018 	sub	sp, sp, #24
   37a74:	e1a06000 	mov	r6, r0
   37a78:	ebffffa0 	bl	37900 <McManager::displayRefresh()>
   37a7c:	e5d45780 	ldrb	r5, [r4, #1920]	; 0x780
   37a80:	e3550000 	cmp	r5, #0
   37a84:	0a00001d 	beq	37b00 <McManager::service()+0x9c>
   37a88:	e5943760 	ldr	r3, [r4, #1888]	; 0x760
   37a8c:	e3530000 	cmp	r3, #0
   37a90:	0a00001a 	beq	37b00 <McManager::service()+0x9c>
   37a94:	ebffd929 	bl	2df40 <millis>
   37a98:	e594277c 	ldr	r2, [r4, #1916]	; 0x77c
   37a9c:	e5941784 	ldr	r1, [r4, #1924]	; 0x784
   37aa0:	ebffd943 	bl	2dfb4 <isTimeout>
   37aa4:	e3500000 	cmp	r0, #0
   37aa8:	0a000014 	beq	37b00 <McManager::service()+0x9c>
   37aac:	e594378c 	ldr	r3, [r4, #1932]	; 0x78c
   37ab0:	e5941788 	ldr	r1, [r4, #1928]	; 0x788
   37ab4:	e2832001 	add	r2, r3, #1
   37ab8:	e1530001 	cmp	r3, r1
   37abc:	83a03000 	movhi	r3, #0
   37ac0:	93a05000 	movls	r5, #0
   37ac4:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   37ac8:	e584278c 	str	r2, [r4, #1932]	; 0x78c
   37acc:	8584378c 	strhi	r3, [r4, #1932]	; 0x78c
   37ad0:	e5902000 	ldr	r2, [r0]
   37ad4:	e28d3010 	add	r3, sp, #16
   37ad8:	e58d300c 	str	r3, [sp, #12]
   37adc:	e59d100c 	ldr	r1, [sp, #12]
   37ae0:	e1a03005 	mov	r3, r5
   37ae4:	e5925044 	ldr	r5, [r2, #68]	; 0x44
   37ae8:	e59f2040 	ldr	r2, [pc, #64]	; 37b30 <McManager::service()+0xcc>
   37aec:	e12fff35 	blx	r5
   37af0:	e2503000 	subs	r3, r0, #0
   37af4:	1a000004 	bne	37b0c <McManager::service()+0xa8>
   37af8:	ebffd910 	bl	2df40 <millis>
   37afc:	e5840784 	str	r0, [r4, #1924]	; 0x784
   37b00:	e28ddd4e 	add	sp, sp, #4992	; 0x1380
   37b04:	e28dd018 	add	sp, sp, #24
   37b08:	e8bd8070 	pop	{r4, r5, r6, pc}
   37b0c:	e5960004 	ldr	r0, [r6, #4]
   37b10:	e58d3004 	str	r3, [sp, #4]
   37b14:	e59d300c 	ldr	r3, [sp, #12]
   37b18:	e59f2014 	ldr	r2, [pc, #20]	; 37b34 <McManager::service()+0xd0>
   37b1c:	e58d3000 	str	r3, [sp]
   37b20:	e59f1010 	ldr	r1, [pc, #16]	; 37b38 <McManager::service()+0xd4>
   37b24:	e3a03000 	mov	r3, #0
   37b28:	ebffe0e7 	bl	2fecc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   37b2c:	eafffff1 	b	37af8 <McManager::service()+0x94>
   37b30:	00001388 	.word	0x00001388
   37b34:	00047884 	.word	0x00047884
   37b38:	000471a8 	.word	0x000471a8

00037b3c <McManager::machineHeartbeat()>:
   37b3c:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37b40:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   37b44:	e3500000 	cmp	r0, #0
   37b48:	012fff1e 	bxeq	lr
   37b4c:	e5903000 	ldr	r3, [r0]
   37b50:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   37b54:	e12fff13 	bx	r3

00037b58 <McManager::getDisplayRefreshRate()>:
   37b58:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37b5c:	e5900770 	ldr	r0, [r0, #1904]	; 0x770
   37b60:	e12fff1e 	bx	lr

00037b64 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)>:
   37b64:	e92d4070 	push	{r4, r5, r6, lr}
   37b68:	e2805a02 	add	r5, r0, #8192	; 0x2000
   37b6c:	e5953730 	ldr	r3, [r5, #1840]	; 0x730
   37b70:	e59fc03c 	ldr	ip, [pc, #60]	; 37bb4 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x50>
   37b74:	e083e002 	add	lr, r3, r2
   37b78:	e15e000c 	cmp	lr, ip
   37b7c:	8a000007 	bhi	37ba0 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x3c>
   37b80:	e1a04002 	mov	r4, r2
   37b84:	e280001c 	add	r0, r0, #28
   37b88:	e0800003 	add	r0, r0, r3
   37b8c:	ebffcb63 	bl	2a920 <memcpy>
   37b90:	e5952730 	ldr	r2, [r5, #1840]	; 0x730
   37b94:	e0822004 	add	r2, r2, r4
   37b98:	e5852730 	str	r2, [r5, #1840]	; 0x730
   37b9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   37ba0:	e3a03000 	mov	r3, #0
   37ba4:	e152000c 	cmp	r2, ip
   37ba8:	e5853730 	str	r3, [r5, #1840]	; 0x730
   37bac:	88bd8070 	pophi	{r4, r5, r6, pc}
   37bb0:	eafffff2 	b	37b80 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x1c>
   37bb4:	0000270f 	.word	0x0000270f

00037bb8 <McManager::hostSerialNumChAvailable()>:
   37bb8:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37bbc:	e5900730 	ldr	r0, [r0, #1840]	; 0x730
   37bc0:	e12fff1e 	bx	lr

00037bc4 <McManager::hostSerialReadChars(unsigned char*, unsigned long)>:
   37bc4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   37bc8:	e2806a02 	add	r6, r0, #8192	; 0x2000
   37bcc:	e5964730 	ldr	r4, [r6, #1840]	; 0x730
   37bd0:	e1520004 	cmp	r2, r4
   37bd4:	31a04002 	movcc	r4, r2
   37bd8:	e3540000 	cmp	r4, #0
   37bdc:	13510000 	cmpne	r1, #0
   37be0:	03a07001 	moveq	r7, #1
   37be4:	13a07000 	movne	r7, #0
   37be8:	03a04000 	moveq	r4, #0
   37bec:	1a000001 	bne	37bf8 <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x34>
   37bf0:	e1a00004 	mov	r0, r4
   37bf4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   37bf8:	e280501c 	add	r5, r0, #28
   37bfc:	e1a02004 	mov	r2, r4
   37c00:	e1a00001 	mov	r0, r1
   37c04:	e1a01005 	mov	r1, r5
   37c08:	ebffcb44 	bl	2a920 <memcpy>
   37c0c:	e5962730 	ldr	r2, [r6, #1840]	; 0x730
   37c10:	e1520004 	cmp	r2, r4
   37c14:	25867730 	strcs	r7, [r6, #1840]	; 0x730
   37c18:	2afffff4 	bcs	37bf0 <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x2c>
   37c1c:	e0422004 	sub	r2, r2, r4
   37c20:	e0851004 	add	r1, r5, r4
   37c24:	e1a00005 	mov	r0, r5
   37c28:	ebffc8f2 	bl	29ff8 <memmove>
   37c2c:	e5963730 	ldr	r3, [r6, #1840]	; 0x730
   37c30:	e0433004 	sub	r3, r3, r4
   37c34:	e5863730 	str	r3, [r6, #1840]	; 0x730
   37c38:	eaffffec 	b	37bf0 <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x2c>

00037c3c <McManager::sendKeyStrToTargetStatic(char const*)>:
   37c3c:	e5900004 	ldr	r0, [r0, #4]
   37c40:	eaffe092 	b	2fe90 <CommandHandler::sendKeyStrToTargetStatic(char const*)>

00037c44 <McManager::targetProgrammingStart(bool)>:
   37c44:	e92d4070 	push	{r4, r5, r6, lr}
   37c48:	e1a04000 	mov	r4, r0
   37c4c:	e5900010 	ldr	r0, [r0, #16]
   37c50:	e1a05001 	mov	r5, r1
   37c54:	ebfff28c 	bl	3468c <TargetProgrammer::numMemoryBlocks()>
   37c58:	e3500000 	cmp	r0, #0
   37c5c:	0a000013 	beq	37cb0 <McManager::targetProgrammingStart(bool)+0x6c>
   37c60:	e594000c 	ldr	r0, [r4, #12]
   37c64:	ebffe931 	bl	32130 <BusAccess::service()>
   37c68:	e594000c 	ldr	r0, [r4, #12]
   37c6c:	ebffe92f 	bl	32130 <BusAccess::service()>
   37c70:	e594000c 	ldr	r0, [r4, #12]
   37c74:	ebffe92d 	bl	32130 <BusAccess::service()>
   37c78:	ebffbbd7 	bl	26bdc <CLogger::Get()>
   37c7c:	e59f3044 	ldr	r3, [pc, #68]	; 37cc8 <McManager::targetProgrammingStart(bool)+0x84>
   37c80:	e3a02004 	mov	r2, #4
   37c84:	e59f1040 	ldr	r1, [pc, #64]	; 37ccc <McManager::targetProgrammingStart(bool)+0x88>
   37c88:	ebffbb10 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37c8c:	e5941014 	ldr	r1, [r4, #20]
   37c90:	e594000c 	ldr	r0, [r4, #12]
   37c94:	e3a02002 	mov	r2, #2
   37c98:	ebffe670 	bl	31660 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   37c9c:	e3a03001 	mov	r3, #1
   37ca0:	e2844a02 	add	r4, r4, #8192	; 0x2000
   37ca4:	e5c45765 	strb	r5, [r4, #1893]	; 0x765
   37ca8:	e5c43764 	strb	r3, [r4, #1892]	; 0x764
   37cac:	e8bd8070 	pop	{r4, r5, r6, pc}
   37cb0:	ebffbbc9 	bl	26bdc <CLogger::Get()>
   37cb4:	e8bd4070 	pop	{r4, r5, r6, lr}
   37cb8:	e59f3010 	ldr	r3, [pc, #16]	; 37cd0 <McManager::targetProgrammingStart(bool)+0x8c>
   37cbc:	e3a02004 	mov	r2, #4
   37cc0:	e59f1004 	ldr	r1, [pc, #4]	; 37ccc <McManager::targetProgrammingStart(bool)+0x88>
   37cc4:	eaffbb01 	b	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37cc8:	000471dc 	.word	0x000471dc
   37ccc:	000470d4 	.word	0x000470d4
   37cd0:	000471b8 	.word	0x000471b8

00037cd4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   37cd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   37cd8:	e24dd0e0 	sub	sp, sp, #224	; 0xe0
   37cdc:	e1a05000 	mov	r5, r0
   37ce0:	e1a08002 	mov	r8, r2
   37ce4:	e1a06003 	mov	r6, r3
   37ce8:	e28d2014 	add	r2, sp, #20
   37cec:	e3a030c8 	mov	r3, #200	; 0xc8
   37cf0:	e59f02a8 	ldr	r0, [pc, #680]	; 37fa0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2cc>
   37cf4:	e1a07001 	mov	r7, r1
   37cf8:	ebffd980 	bl	2e300 <jsonGetValueForKey>
   37cfc:	e2504000 	subs	r4, r0, #0
   37d00:	1a000003 	bne	37d14 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x40>
   37d04:	e3a04000 	mov	r4, #0
   37d08:	e1a00004 	mov	r0, r4
   37d0c:	e28dd0e0 	add	sp, sp, #224	; 0xe0
   37d10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   37d14:	e3a03000 	mov	r3, #0
   37d18:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   37d1c:	e59f1280 	ldr	r1, [pc, #640]	; 37fa4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d0>
   37d20:	e5c23000 	strb	r3, [r2]
   37d24:	e28d0014 	add	r0, sp, #20
   37d28:	ebffc8fc 	bl	2a120 <strcasecmp>
   37d2c:	e3500000 	cmp	r0, #0
   37d30:	0a000016 	beq	37d90 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xbc>
   37d34:	e59f126c 	ldr	r1, [pc, #620]	; 37fa8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d4>
   37d38:	e28d0014 	add	r0, sp, #20
   37d3c:	ebffc8f7 	bl	2a120 <strcasecmp>
   37d40:	e2501000 	subs	r1, r0, #0
   37d44:	0a00000f 	beq	37d88 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb4>
   37d48:	e59f125c 	ldr	r1, [pc, #604]	; 37fac <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d8>
   37d4c:	e28d0014 	add	r0, sp, #20
   37d50:	ebffc8f2 	bl	2a120 <strcasecmp>
   37d54:	e3500000 	cmp	r0, #0
   37d58:	1a000015 	bne	37db4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe0>
   37d5c:	e3a01001 	mov	r1, #1
   37d60:	e59f3248 	ldr	r3, [pc, #584]	; 37fb0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2dc>
   37d64:	e5930000 	ldr	r0, [r3]
   37d68:	ebffffb5 	bl	37c44 <McManager::targetProgrammingStart(bool)>
   37d6c:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   37d70:	e59f123c 	ldr	r1, [pc, #572]	; 37fb4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e0>
   37d74:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   37d78:	ebffd8aa 	bl	2e028 <strlcpy>
   37d7c:	e1a00004 	mov	r0, r4
   37d80:	e28dd0e0 	add	sp, sp, #224	; 0xe0
   37d84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   37d88:	e59f3220 	ldr	r3, [pc, #544]	; 37fb0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2dc>
   37d8c:	eafffff4 	b	37d64 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x90>
   37d90:	e5950010 	ldr	r0, [r5, #16]
   37d94:	ebfff1ea 	bl	34544 <TargetProgrammer::clear()>
   37d98:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   37d9c:	e59f1210 	ldr	r1, [pc, #528]	; 37fb4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e0>
   37da0:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   37da4:	ebffd89f 	bl	2e028 <strlcpy>
   37da8:	e1a00004 	mov	r0, r4
   37dac:	e28dd0e0 	add	sp, sp, #224	; 0xe0
   37db0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   37db4:	e59f11fc 	ldr	r1, [pc, #508]	; 37fb8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e4>
   37db8:	e28d0014 	add	r0, sp, #20
   37dbc:	ebffc8d7 	bl	2a120 <strcasecmp>
   37dc0:	e3500000 	cmp	r0, #0
   37dc4:	0affffe4 	beq	37d5c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x88>
   37dc8:	e59f11ec 	ldr	r1, [pc, #492]	; 37fbc <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e8>
   37dcc:	e28d0014 	add	r0, sp, #20
   37dd0:	ebffc8d2 	bl	2a120 <strcasecmp>
   37dd4:	e3500000 	cmp	r0, #0
   37dd8:	0a000017 	beq	37e3c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x168>
   37ddc:	e59f11dc 	ldr	r1, [pc, #476]	; 37fc0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2ec>
   37de0:	e28d0014 	add	r0, sp, #20
   37de4:	ebffc8cd 	bl	2a120 <strcasecmp>
   37de8:	e3500000 	cmp	r0, #0
   37dec:	1a00001d 	bne	37e68 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x194>
   37df0:	ebffbb79 	bl	26bdc <CLogger::Get()>
   37df4:	e59f31c8 	ldr	r3, [pc, #456]	; 37fc4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f0>
   37df8:	e88d00c0 	stm	sp, {r6, r7}
   37dfc:	e3a02004 	mov	r2, #4
   37e00:	e59f11c0 	ldr	r1, [pc, #448]	; 37fc8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f4>
   37e04:	ebffbab1 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37e08:	e59f31a0 	ldr	r3, [pc, #416]	; 37fb0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2dc>
   37e0c:	e5933000 	ldr	r3, [r3]
   37e10:	e2833a02 	add	r3, r3, #8192	; 0x2000
   37e14:	e5930760 	ldr	r0, [r3, #1888]	; 0x760
   37e18:	e3500000 	cmp	r0, #0
   37e1c:	0affffd2 	beq	37d6c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x98>
   37e20:	e590c000 	ldr	ip, [r0]
   37e24:	e1a03006 	mov	r3, r6
   37e28:	e1a02008 	mov	r2, r8
   37e2c:	e1a01007 	mov	r1, r7
   37e30:	e59c5038 	ldr	r5, [ip, #56]	; 0x38
   37e34:	e12fff35 	blx	r5
   37e38:	eaffffcb 	b	37d6c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x98>
   37e3c:	e59f316c 	ldr	r3, [pc, #364]	; 37fb0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2dc>
   37e40:	e3e02000 	mvn	r2, #0
   37e44:	e5933000 	ldr	r3, [r3]
   37e48:	e5931014 	ldr	r1, [r3, #20]
   37e4c:	e593000c 	ldr	r0, [r3, #12]
   37e50:	ebffe5d3 	bl	315a4 <BusAccess::targetReqReset(int, int)>
   37e54:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   37e58:	e59f1154 	ldr	r1, [pc, #340]	; 37fb4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e0>
   37e5c:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   37e60:	ebffd870 	bl	2e028 <strlcpy>
   37e64:	eaffffa7 	b	37d08 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   37e68:	e59f115c 	ldr	r1, [pc, #348]	; 37fcc <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f8>
   37e6c:	e28d0014 	add	r0, sp, #20
   37e70:	ebffc8aa 	bl	2a120 <strcasecmp>
   37e74:	e3500000 	cmp	r0, #0
   37e78:	0affffdc 	beq	37df0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x11c>
   37e7c:	e59f114c 	ldr	r1, [pc, #332]	; 37fd0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2fc>
   37e80:	e28d0014 	add	r0, sp, #20
   37e84:	ebffc8a5 	bl	2a120 <strcasecmp>
   37e88:	e3500000 	cmp	r0, #0
   37e8c:	1a000017 	bne	37ef0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   37e90:	e59f313c 	ldr	r3, [pc, #316]	; 37fd4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x300>
   37e94:	e2862001 	add	r2, r6, #1
   37e98:	e59f7138 	ldr	r7, [pc, #312]	; 37fd8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x304>
   37e9c:	e1520003 	cmp	r2, r3
   37ea0:	21a02003 	movcs	r2, r3
   37ea4:	e1a01008 	mov	r1, r8
   37ea8:	e1a00007 	mov	r0, r7
   37eac:	ebffd85d 	bl	2e028 <strlcpy>
   37eb0:	ebffbb49 	bl	26bdc <CLogger::Get()>
   37eb4:	e59f3120 	ldr	r3, [pc, #288]	; 37fdc <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x308>
   37eb8:	e3a02004 	mov	r2, #4
   37ebc:	e59f1104 	ldr	r1, [pc, #260]	; 37fc8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f4>
   37ec0:	e58d7000 	str	r7, [sp]
   37ec4:	ebffba81 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37ec8:	e1a01007 	mov	r1, r7
   37ecc:	e1a00005 	mov	r0, r5
   37ed0:	ebfffde1 	bl	3765c <McManager::setupMachine(char const*)>
   37ed4:	e3500000 	cmp	r0, #0
   37ed8:	1affffa3 	bne	37d6c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x98>
   37edc:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   37ee0:	e59f10f8 	ldr	r1, [pc, #248]	; 37fe0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30c>
   37ee4:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   37ee8:	ebffd84e 	bl	2e028 <strlcpy>
   37eec:	eaffff85 	b	37d08 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   37ef0:	e59f10ec 	ldr	r1, [pc, #236]	; 37fe4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x310>
   37ef4:	e28d0014 	add	r0, sp, #20
   37ef8:	ebffc888 	bl	2a120 <strcasecmp>
   37efc:	e3500000 	cmp	r0, #0
   37f00:	0a000021 	beq	37f8c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2b8>
   37f04:	e28d0014 	add	r0, sp, #20
   37f08:	e59f10d8 	ldr	r1, [pc, #216]	; 37fe8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x314>
   37f0c:	ebffc883 	bl	2a120 <strcasecmp>
   37f10:	e2503000 	subs	r3, r0, #0
   37f14:	1affff7a 	bne	37d04 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   37f18:	e1a01003 	mov	r1, r3
   37f1c:	e3a02006 	mov	r2, #6
   37f20:	e28d000c 	add	r0, sp, #12
   37f24:	e58d3008 	str	r3, [sp, #8]
   37f28:	ebffc805 	bl	29f44 <memset>
   37f2c:	e28d1008 	add	r1, sp, #8
   37f30:	e3a0200a 	mov	r2, #10
   37f34:	e1a00008 	mov	r0, r8
   37f38:	ebffc9a0 	bl	2a5c0 <strtoul>
   37f3c:	e28d1008 	add	r1, sp, #8
   37f40:	e3a0200a 	mov	r2, #10
   37f44:	e59d0008 	ldr	r0, [sp, #8]
   37f48:	ebffc99c 	bl	2a5c0 <strtoul>
   37f4c:	e2855a02 	add	r5, r5, #8192	; 0x2000
   37f50:	e5cd000c 	strb	r0, [sp, #12]
   37f54:	e28d1008 	add	r1, sp, #8
   37f58:	e3a0200a 	mov	r2, #10
   37f5c:	e59d0008 	ldr	r0, [sp, #8]
   37f60:	ebffc996 	bl	2a5c0 <strtoul>
   37f64:	e5953760 	ldr	r3, [r5, #1888]	; 0x760
   37f68:	e3530000 	cmp	r3, #0
   37f6c:	0affff65 	beq	37d08 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   37f70:	e593c000 	ldr	ip, [r3]
   37f74:	e6ef1070 	uxtb	r1, r0
   37f78:	e28d200c 	add	r2, sp, #12
   37f7c:	e59c5034 	ldr	r5, [ip, #52]	; 0x34
   37f80:	e1a00003 	mov	r0, r3
   37f84:	e12fff35 	blx	r5
   37f88:	eaffff5e 	b	37d08 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   37f8c:	e1a02006 	mov	r2, r6
   37f90:	e1a01008 	mov	r1, r8
   37f94:	e1a00005 	mov	r0, r5
   37f98:	ebfffef1 	bl	37b64 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)>
   37f9c:	eaffff59 	b	37d08 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   37fa0:	0003f0d4 	.word	0x0003f0d4
   37fa4:	000471fc 	.word	0x000471fc
   37fa8:	00047208 	.word	0x00047208
   37fac:	00047218 	.word	0x00047218
   37fb0:	0004e560 	.word	0x0004e560
   37fb4:	00046e10 	.word	0x00046e10
   37fb8:	00047228 	.word	0x00047228
   37fbc:	00047270 	.word	0x00047270
   37fc0:	00047238 	.word	0x00047238
   37fc4:	00047288 	.word	0x00047288
   37fc8:	000470d4 	.word	0x000470d4
   37fcc:	00047244 	.word	0x00047244
   37fd0:	0004727c 	.word	0x0004727c
   37fd4:	00002710 	.word	0x00002710
   37fd8:	0004e9c8 	.word	0x0004e9c8
   37fdc:	00047250 	.word	0x00047250
   37fe0:	00046dc4 	.word	0x00046dc4
   37fe4:	00047260 	.word	0x00047260
   37fe8:	00047268 	.word	0x00047268

00037fec <McManager::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   37fec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   37ff0:	e99d5000 	ldmib	sp, {ip, lr}
   37ff4:	e3500000 	cmp	r0, #0
   37ff8:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   37ffc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   38000:	eaffff33 	b	37cd4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

00038004 <McManager::targetExec()>:
   38004:	e5901014 	ldr	r1, [r0, #20]
   38008:	e3e02000 	mvn	r2, #0
   3800c:	e590000c 	ldr	r0, [r0, #12]
   38010:	eaffe563 	b	315a4 <BusAccess::targetReqReset(int, int)>

00038014 <McManager::targetReset()>:
   38014:	eafffffa 	b	38004 <McManager::targetExec()>

00038018 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   38018:	e3510004 	cmp	r1, #4
   3801c:	112fff1e 	bxne	lr
   38020:	eafffc4f 	b	37164 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]>

00038024 <McBase::isMonitorIORQEnabled()>:
   38024:	e5d000a8 	ldrb	r0, [r0, #168]	; 0xa8
   38028:	e12fff1e 	bx	lr

0003802c <McBase::isMonitorMREQEnabled()>:
   3802c:	e5d000a9 	ldrb	r0, [r0, #169]	; 0xa9
   38030:	e12fff1e 	bx	lr

00038034 <McBase::getDisplayRefreshRatePerSec()>:
   38034:	e5900074 	ldr	r0, [r0, #116]	; 0x74
   38038:	e12fff1e 	bx	lr

0003803c <McBase::isDisplayMemoryMapped()>:
   3803c:	e5d0009c 	ldrb	r0, [r0, #156]	; 0x9c
   38040:	e12fff1e 	bx	lr

00038044 <McTRS80::enableMachine()>:
   38044:	e3a03000 	mov	r3, #0
   38048:	e5c034e4 	strb	r3, [r0, #1252]	; 0x4e4
   3804c:	e5c035e5 	strb	r3, [r0, #1509]	; 0x5e5
   38050:	e12fff1e 	bx	lr

00038054 <McTRS80::disableMachine()>:
   38054:	e12fff1e 	bx	lr

00038058 <McTRS80::busActionCompleteCallback(BR_BUS_ACTION)>:
   38058:	e12fff1e 	bx	lr

0003805c <McTRS80::keyHandler(unsigned char, unsigned char const*)>:
   3805c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   38060:	e24dd00c 	sub	sp, sp, #12
   38064:	e1a0300d 	mov	r3, sp
   38068:	e3a0e000 	mov	lr, #0
   3806c:	e28d4008 	add	r4, sp, #8
   38070:	e4c3e001 	strb	lr, [r3], #1
   38074:	e1530004 	cmp	r3, r4
   38078:	1afffffc 	bne	38070 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x14>
   3807c:	e201c002 	and	ip, r1, #2
   38080:	e3a04000 	mov	r4, #0
   38084:	e2421001 	sub	r1, r2, #1
   38088:	e3a0e001 	mov	lr, #1
   3808c:	e3e0507f 	mvn	r5, #127	; 0x7f
   38090:	e2822005 	add	r2, r2, #5
   38094:	ea000008 	b	380bc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x60>
   38098:	e2433003 	sub	r3, r3, #3
   3809c:	e28d6008 	add	r6, sp, #8
   380a0:	e08671c3 	add	r7, r6, r3, asr #3
   380a4:	e5576008 	ldrb	r6, [r7, #-8]
   380a8:	e2033007 	and	r3, r3, #7
   380ac:	e186331e 	orr	r3, r6, lr, lsl r3
   380b0:	e5473008 	strb	r3, [r7, #-8]
   380b4:	e1510002 	cmp	r1, r2
   380b8:	0a000012 	beq	38108 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xac>
   380bc:	e5f13001 	ldrb	r3, [r1, #1]!
   380c0:	e2436004 	sub	r6, r3, #4
   380c4:	e3560019 	cmp	r6, #25
   380c8:	9afffff2 	bls	38098 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3c>
   380cc:	e353001f 	cmp	r3, #31
   380d0:	0a000032 	beq	381a0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x144>
   380d4:	e3530023 	cmp	r3, #35	; 0x23
   380d8:	0a000025 	beq	38174 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x118>
   380dc:	e3530024 	cmp	r3, #36	; 0x24
   380e0:	0a000035 	beq	381bc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x160>
   380e4:	e3530025 	cmp	r3, #37	; 0x25
   380e8:	1a000039 	bne	381d4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x178>
   380ec:	e35c0000 	cmp	ip, #0
   380f0:	0a000022 	beq	38180 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   380f4:	e5dd3005 	ldrb	r3, [sp, #5]
   380f8:	e1510002 	cmp	r1, r2
   380fc:	e3833004 	orr	r3, r3, #4
   38100:	e5cd3005 	strb	r3, [sp, #5]
   38104:	1affffec 	bne	380bc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x60>
   38108:	e3a02000 	mov	r2, #0
   3810c:	e3a0c001 	mov	ip, #1
   38110:	e1a05002 	mov	r5, r2
   38114:	e3540000 	cmp	r4, #0
   38118:	15dd3007 	ldrbne	r3, [sp, #7]
   3811c:	e2804e4e 	add	r4, r0, #1248	; 0x4e0
   38120:	13c33003 	bicne	r3, r3, #3
   38124:	15cd3007 	strbne	r3, [sp, #7]
   38128:	e2844005 	add	r4, r4, #5
   3812c:	e1a01005 	mov	r1, r5
   38130:	e3a03000 	mov	r3, #0
   38134:	e012e31c 	ands	lr, r2, ip, lsl r3
   38138:	17dde003 	ldrbne	lr, [sp, r3]
   3813c:	e2833001 	add	r3, r3, #1
   38140:	1181100e 	orrne	r1, r1, lr
   38144:	e3530008 	cmp	r3, #8
   38148:	1afffff9 	bne	38134 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xd8>
   3814c:	e5d43000 	ldrb	r3, [r4]
   38150:	e2822001 	add	r2, r2, #1
   38154:	e1530001 	cmp	r3, r1
   38158:	15c41000 	strbne	r1, [r4]
   3815c:	15c0c5e5 	strbne	ip, [r0, #1509]	; 0x5e5
   38160:	e3520c01 	cmp	r2, #256	; 0x100
   38164:	e2844001 	add	r4, r4, #1
   38168:	1affffef 	bne	3812c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xd0>
   3816c:	e28dd00c 	add	sp, sp, #12
   38170:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   38174:	e35c0000 	cmp	ip, #0
   38178:	11a0400e 	movne	r4, lr
   3817c:	1affffcc 	bne	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38180:	e243301d 	sub	r3, r3, #29
   38184:	e28d6008 	add	r6, sp, #8
   38188:	e08661c3 	add	r6, r6, r3, asr #3
   3818c:	e5567004 	ldrb	r7, [r6, #-4]
   38190:	e2033007 	and	r3, r3, #7
   38194:	e187331e 	orr	r3, r7, lr, lsl r3
   38198:	e5463004 	strb	r3, [r6, #-4]
   3819c:	eaffffc4 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   381a0:	e35c0000 	cmp	ip, #0
   381a4:	0afffff5 	beq	38180 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   381a8:	e5dd3000 	ldrb	r3, [sp]
   381ac:	e1a0400e 	mov	r4, lr
   381b0:	e3833001 	orr	r3, r3, #1
   381b4:	e5cd3000 	strb	r3, [sp]
   381b8:	eaffffbd 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   381bc:	e35c0000 	cmp	ip, #0
   381c0:	0affffee 	beq	38180 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   381c4:	e5dd3004 	ldrb	r3, [sp, #4]
   381c8:	e3833040 	orr	r3, r3, #64	; 0x40
   381cc:	e5cd3004 	strb	r3, [sp, #4]
   381d0:	eaffffb7 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   381d4:	e3530026 	cmp	r3, #38	; 0x26
   381d8:	1a000008 	bne	38200 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1a4>
   381dc:	e35c0000 	cmp	ip, #0
   381e0:	0affffe6 	beq	38180 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   381e4:	e5dd6005 	ldrb	r6, [sp, #5]
   381e8:	e5dd3007 	ldrb	r3, [sp, #7]
   381ec:	e3866001 	orr	r6, r6, #1
   381f0:	e3833001 	orr	r3, r3, #1
   381f4:	e5cd6005 	strb	r6, [sp, #5]
   381f8:	e5cd3007 	strb	r3, [sp, #7]
   381fc:	eaffffac 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38200:	e3530027 	cmp	r3, #39	; 0x27
   38204:	1a00000c 	bne	3823c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1e0>
   38208:	e35c0000 	cmp	ip, #0
   3820c:	0a000006 	beq	3822c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1d0>
   38210:	e5dd6005 	ldrb	r6, [sp, #5]
   38214:	e5dd3007 	ldrb	r3, [sp, #7]
   38218:	e3866002 	orr	r6, r6, #2
   3821c:	e3833001 	orr	r3, r3, #1
   38220:	e5cd6005 	strb	r6, [sp, #5]
   38224:	e5cd3007 	strb	r3, [sp, #7]
   38228:	eaffffa1 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   3822c:	e5dd3004 	ldrb	r3, [sp, #4]
   38230:	e3833001 	orr	r3, r3, #1
   38234:	e5cd3004 	strb	r3, [sp, #4]
   38238:	eaffff9d 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   3823c:	e243601e 	sub	r6, r3, #30
   38240:	e3560008 	cmp	r6, #8
   38244:	9affffcd 	bls	38180 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   38248:	e3530033 	cmp	r3, #51	; 0x33
   3824c:	0a000027 	beq	382f0 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x294>
   38250:	e3530034 	cmp	r3, #52	; 0x34
   38254:	0a000034 	beq	3832c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2d0>
   38258:	e3530036 	cmp	r3, #54	; 0x36
   3825c:	0a00002e 	beq	3831c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2c0>
   38260:	e3530037 	cmp	r3, #55	; 0x37
   38264:	0a000028 	beq	3830c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2b0>
   38268:	e353002e 	cmp	r3, #46	; 0x2e
   3826c:	0a000037 	beq	38350 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2f4>
   38270:	e353002d 	cmp	r3, #45	; 0x2d
   38274:	0a00004a 	beq	383a4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x348>
   38278:	e3530038 	cmp	r3, #56	; 0x38
   3827c:	0a000044 	beq	38394 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x338>
   38280:	e3530028 	cmp	r3, #40	; 0x28
   38284:	0a00003e 	beq	38384 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x328>
   38288:	e353002a 	cmp	r3, #42	; 0x2a
   3828c:	0a000038 	beq	38374 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x318>
   38290:	e3530029 	cmp	r3, #41	; 0x29
   38294:	0a000064 	beq	3842c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3d0>
   38298:	e3530052 	cmp	r3, #82	; 0x52
   3829c:	0a00005e 	beq	3841c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3c0>
   382a0:	e3530051 	cmp	r3, #81	; 0x51
   382a4:	0a000058 	beq	3840c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3b0>
   382a8:	e3530050 	cmp	r3, #80	; 0x50
   382ac:	0a000030 	beq	38374 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x318>
   382b0:	e353004f 	cmp	r3, #79	; 0x4f
   382b4:	0a000050 	beq	383fc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3a0>
   382b8:	e353002c 	cmp	r3, #44	; 0x2c
   382bc:	0a00004a 	beq	383ec <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x390>
   382c0:	e353003a 	cmp	r3, #58	; 0x3a
   382c4:	0a000044 	beq	383dc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x380>
   382c8:	e35300e1 	cmp	r3, #225	; 0xe1
   382cc:	0a00003e 	beq	383cc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x370>
   382d0:	e35300e5 	cmp	r3, #229	; 0xe5
   382d4:	0a000038 	beq	383bc <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x360>
   382d8:	e20330fb 	and	r3, r3, #251	; 0xfb
   382dc:	e35300e0 	cmp	r3, #224	; 0xe0
   382e0:	05dd3007 	ldrbeq	r3, [sp, #7]
   382e4:	03833010 	orreq	r3, r3, #16
   382e8:	05cd3007 	strbeq	r3, [sp, #7]
   382ec:	eaffff70 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   382f0:	e5dd3005 	ldrb	r3, [sp, #5]
   382f4:	e35c0000 	cmp	ip, #0
   382f8:	03833008 	orreq	r3, r3, #8
   382fc:	13833004 	orrne	r3, r3, #4
   38300:	e1a0400e 	mov	r4, lr
   38304:	e5cd3005 	strb	r3, [sp, #5]
   38308:	eaffff69 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   3830c:	e5dd3005 	ldrb	r3, [sp, #5]
   38310:	e3833040 	orr	r3, r3, #64	; 0x40
   38314:	e5cd3005 	strb	r3, [sp, #5]
   38318:	eaffff65 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   3831c:	e5dd3005 	ldrb	r3, [sp, #5]
   38320:	e3833010 	orr	r3, r3, #16
   38324:	e5cd3005 	strb	r3, [sp, #5]
   38328:	eaffff61 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   3832c:	e35c0000 	cmp	ip, #0
   38330:	0affff5f 	beq	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38334:	e5dd6004 	ldrb	r6, [sp, #4]
   38338:	e5dd3007 	ldrb	r3, [sp, #7]
   3833c:	e3866004 	orr	r6, r6, #4
   38340:	e3833001 	orr	r3, r3, #1
   38344:	e5cd6004 	strb	r6, [sp, #4]
   38348:	e5cd3007 	strb	r3, [sp, #7]
   3834c:	eaffff58 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38350:	e5dd6005 	ldrb	r6, [sp, #5]
   38354:	e5dd3007 	ldrb	r3, [sp, #7]
   38358:	e35c0000 	cmp	ip, #0
   3835c:	03866020 	orreq	r6, r6, #32
   38360:	13866008 	orrne	r6, r6, #8
   38364:	e3833001 	orr	r3, r3, #1
   38368:	e5cd6005 	strb	r6, [sp, #5]
   3836c:	e5cd3007 	strb	r3, [sp, #7]
   38370:	eaffff4f 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38374:	e5dd3006 	ldrb	r3, [sp, #6]
   38378:	e3833020 	orr	r3, r3, #32
   3837c:	e5cd3006 	strb	r3, [sp, #6]
   38380:	eaffff4b 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38384:	e5dd3006 	ldrb	r3, [sp, #6]
   38388:	e3833001 	orr	r3, r3, #1
   3838c:	e5cd3006 	strb	r3, [sp, #6]
   38390:	eaffff47 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38394:	e5dd3005 	ldrb	r3, [sp, #5]
   38398:	e1833005 	orr	r3, r3, r5
   3839c:	e5cd3005 	strb	r3, [sp, #5]
   383a0:	eaffff43 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   383a4:	e35c0000 	cmp	ip, #0
   383a8:	05dd3005 	ldrbeq	r3, [sp, #5]
   383ac:	01a0400e 	moveq	r4, lr
   383b0:	03833020 	orreq	r3, r3, #32
   383b4:	05cd3005 	strbeq	r3, [sp, #5]
   383b8:	eaffff3d 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   383bc:	e5dd3007 	ldrb	r3, [sp, #7]
   383c0:	e3833002 	orr	r3, r3, #2
   383c4:	e5cd3007 	strb	r3, [sp, #7]
   383c8:	eaffff39 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   383cc:	e5dd3007 	ldrb	r3, [sp, #7]
   383d0:	e3833001 	orr	r3, r3, #1
   383d4:	e5cd3007 	strb	r3, [sp, #7]
   383d8:	eaffff35 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   383dc:	e5dd3006 	ldrb	r3, [sp, #6]
   383e0:	e3833002 	orr	r3, r3, #2
   383e4:	e5cd3006 	strb	r3, [sp, #6]
   383e8:	eaffff31 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   383ec:	e5dd3006 	ldrb	r3, [sp, #6]
   383f0:	e1833005 	orr	r3, r3, r5
   383f4:	e5cd3006 	strb	r3, [sp, #6]
   383f8:	eaffff2d 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   383fc:	e5dd3006 	ldrb	r3, [sp, #6]
   38400:	e3833040 	orr	r3, r3, #64	; 0x40
   38404:	e5cd3006 	strb	r3, [sp, #6]
   38408:	eaffff29 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   3840c:	e5dd3006 	ldrb	r3, [sp, #6]
   38410:	e3833010 	orr	r3, r3, #16
   38414:	e5cd3006 	strb	r3, [sp, #6]
   38418:	eaffff25 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   3841c:	e5dd3006 	ldrb	r3, [sp, #6]
   38420:	e3833008 	orr	r3, r3, #8
   38424:	e5cd3006 	strb	r3, [sp, #6]
   38428:	eaffff21 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   3842c:	e5dd3006 	ldrb	r3, [sp, #6]
   38430:	e3833004 	orr	r3, r3, #4
   38434:	e5cd3006 	strb	r3, [sp, #6]
   38438:	eaffff1d 	b	380b4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>

0003843c <McTRS80::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   3843c:	e2033009 	and	r3, r3, #9
   38440:	e3530009 	cmp	r3, #9
   38444:	03510013 	cmpeq	r1, #19
   38448:	03a030ff 	moveq	r3, #255	; 0xff
   3844c:	059d2000 	ldreq	r2, [sp]
   38450:	05823000 	streq	r3, [r2]
   38454:	e12fff1e 	bx	lr

00038458 <McTRS80::fileHandler(char const*, unsigned char const*, int)>:
   38458:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3845c:	e1a04001 	mov	r4, r1
   38460:	e24dd094 	sub	sp, sp, #148	; 0x94
   38464:	e1a08002 	mov	r8, r2
   38468:	e1a06003 	mov	r6, r3
   3846c:	e1a05000 	mov	r5, r0
   38470:	ebffb9d9 	bl	26bdc <CLogger::Get()>
   38474:	e59f316c 	ldr	r3, [pc, #364]	; 385e8 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x190>
   38478:	e3a02004 	mov	r2, #4
   3847c:	e59f1168 	ldr	r1, [pc, #360]	; 385ec <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   38480:	e58d4000 	str	r4, [sp]
   38484:	ebffb911 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   38488:	e1a01004 	mov	r1, r4
   3848c:	e28d2028 	add	r2, sp, #40	; 0x28
   38490:	e3a03064 	mov	r3, #100	; 0x64
   38494:	e59f0154 	ldr	r0, [pc, #340]	; 385f0 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x198>
   38498:	ebffd798 	bl	2e300 <jsonGetValueForKey>
   3849c:	e2507000 	subs	r7, r0, #0
   384a0:	0a000041 	beq	385ac <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x154>
   384a4:	e59f1148 	ldr	r1, [pc, #328]	; 385f4 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x19c>
   384a8:	e28d0028 	add	r0, sp, #40	; 0x28
   384ac:	ebffc7f3 	bl	2a480 <strstr>
   384b0:	e59f3140 	ldr	r3, [pc, #320]	; 385f8 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1a0>
   384b4:	e3500000 	cmp	r0, #0
   384b8:	01a00003 	moveq	r0, r3
   384bc:	e59f1138 	ldr	r1, [pc, #312]	; 385fc <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1a4>
   384c0:	ebffc716 	bl	2a120 <strcasecmp>
   384c4:	e3500000 	cmp	r0, #0
   384c8:	0a000019 	beq	38534 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0xdc>
   384cc:	e1a01004 	mov	r1, r4
   384d0:	e28d2008 	add	r2, sp, #8
   384d4:	e3a0301e 	mov	r3, #30
   384d8:	e59f0120 	ldr	r0, [pc, #288]	; 38600 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1a8>
   384dc:	ebffd787 	bl	2e300 <jsonGetValueForKey>
   384e0:	e2504000 	subs	r4, r0, #0
   384e4:	01a09004 	moveq	r9, r4
   384e8:	1a000037 	bne	385cc <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x174>
   384ec:	ebffb9ba 	bl	26bdc <CLogger::Get()>
   384f0:	e3a02004 	mov	r2, #4
   384f4:	e59f10f0 	ldr	r1, [pc, #240]	; 385ec <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   384f8:	e58d6004 	str	r6, [sp, #4]
   384fc:	e58d9000 	str	r9, [sp]
   38500:	e59f30fc 	ldr	r3, [pc, #252]	; 38604 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1ac>
   38504:	ebffb8f1 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   38508:	e5953000 	ldr	r3, [r5]
   3850c:	e1a00005 	mov	r0, r5
   38510:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   38514:	e12fff33 	blx	r3
   38518:	e1a03006 	mov	r3, r6
   3851c:	e1a02008 	mov	r2, r8
   38520:	e1a01004 	mov	r1, r4
   38524:	ebfff018 	bl	3458c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   38528:	e1a00007 	mov	r0, r7
   3852c:	e28dd094 	add	sp, sp, #148	; 0x94
   38530:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   38534:	e28d0008 	add	r0, sp, #8
   38538:	eb000efe 	bl	3c138 <McTRS80CmdFormat::McTRS80CmdFormat()>
   3853c:	ebffb9a6 	bl	26bdc <CLogger::Get()>
   38540:	e3a02004 	mov	r2, #4
   38544:	e59f10a0 	ldr	r1, [pc, #160]	; 385ec <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   38548:	e58d6000 	str	r6, [sp]
   3854c:	e59f30b4 	ldr	r3, [pc, #180]	; 38608 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1b0>
   38550:	ebffb8de 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   38554:	e5953000 	ldr	r3, [r5]
   38558:	e1a00005 	mov	r0, r5
   3855c:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   38560:	e12fff33 	blx	r3
   38564:	e5953000 	ldr	r3, [r5]
   38568:	e1a00005 	mov	r0, r5
   3856c:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   38570:	e12fff33 	blx	r3
   38574:	e5953000 	ldr	r3, [r5]
   38578:	e1a00005 	mov	r0, r5
   3857c:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   38580:	e12fff33 	blx	r3
   38584:	e58d6004 	str	r6, [sp, #4]
   38588:	e1a03000 	mov	r3, r0
   3858c:	e58d8000 	str	r8, [sp]
   38590:	e28d0008 	add	r0, sp, #8
   38594:	e59f2070 	ldr	r2, [pc, #112]	; 3860c <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1b4>
   38598:	e59f1070 	ldr	r1, [pc, #112]	; 38610 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1b8>
   3859c:	eb000ee6 	bl	3c13c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>
   385a0:	e1a00007 	mov	r0, r7
   385a4:	e28dd094 	add	sp, sp, #148	; 0x94
   385a8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   385ac:	ebffb98a 	bl	26bdc <CLogger::Get()>
   385b0:	e59f305c 	ldr	r3, [pc, #92]	; 38614 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1bc>
   385b4:	e3a02004 	mov	r2, #4
   385b8:	e59f102c 	ldr	r1, [pc, #44]	; 385ec <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   385bc:	ebffb8c3 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   385c0:	e1a00007 	mov	r0, r7
   385c4:	e28dd094 	add	sp, sp, #148	; 0x94
   385c8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   385cc:	e28d0008 	add	r0, sp, #8
   385d0:	e3a02010 	mov	r2, #16
   385d4:	e3a01000 	mov	r1, #0
   385d8:	ebffc7f8 	bl	2a5c0 <strtoul>
   385dc:	e6ff9070 	uxth	r9, r0
   385e0:	e1a04009 	mov	r4, r9
   385e4:	eaffffc0 	b	384ec <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x94>
   385e8:	00047320 	.word	0x00047320
   385ec:	00047330 	.word	0x00047330
   385f0:	0004647c 	.word	0x0004647c
   385f4:	0003ee00 	.word	0x0003ee00
   385f8:	00047884 	.word	0x00047884
   385fc:	00047354 	.word	0x00047354
   38600:	00047380 	.word	0x00047380
   38604:	0004738c 	.word	0x0004738c
   38608:	0004735c 	.word	0x0004735c
   3860c:	00034708 	.word	0x00034708
   38610:	00034670 	.word	0x00034670
   38614:	00047338 	.word	0x00047338

00038618 <McTRS80::McTRS80(McManager&, BusAccess&)>:
   38618:	e3a03001 	mov	r3, #1
   3861c:	e92d4010 	push	{r4, lr}
   38620:	e1a04000 	mov	r4, r0
   38624:	e24dd008 	sub	sp, sp, #8
   38628:	e58d3000 	str	r3, [sp]
   3862c:	e59f3040 	ldr	r3, [pc, #64]	; 38674 <McTRS80::McTRS80(McManager&, BusAccess&)+0x5c>
   38630:	eb000542 	bl	39b40 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)>
   38634:	e1a03004 	mov	r3, r4
   38638:	e3a01000 	mov	r1, #0
   3863c:	e59f0034 	ldr	r0, [pc, #52]	; 38678 <McTRS80::McTRS80(McManager&, BusAccess&)+0x60>
   38640:	e2842e5e 	add	r2, r4, #1504	; 0x5e0
   38644:	e48304e0 	str	r0, [r3], #1248	; 0x4e0
   38648:	e2833004 	add	r3, r3, #4
   3864c:	e2822004 	add	r2, r2, #4
   38650:	e5e31001 	strb	r1, [r3, #1]!
   38654:	e1530002 	cmp	r3, r2
   38658:	1afffffc 	bne	38650 <McTRS80::McTRS80(McManager&, BusAccess&)+0x38>
   3865c:	e3a03001 	mov	r3, #1
   38660:	e1a00004 	mov	r0, r4
   38664:	e5c414e4 	strb	r1, [r4, #1252]	; 0x4e4
   38668:	e5c435e5 	strb	r3, [r4, #1509]	; 0x5e5
   3866c:	e28dd008 	add	sp, sp, #8
   38670:	e8bd8010 	pop	{r4, pc}
   38674:	000483b8 	.word	0x000483b8
   38678:	000472b0 	.word	0x000472b0

0003867c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)>:
   3867c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38680:	e5903000 	ldr	r3, [r0]
   38684:	e59fc18c 	ldr	ip, [pc, #396]	; 38818 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x19c>
   38688:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
   3868c:	e24dd014 	sub	sp, sp, #20
   38690:	e153000c 	cmp	r3, ip
   38694:	e1a09000 	mov	r9, r0
   38698:	e1a05001 	mov	r5, r1
   3869c:	1a000058 	bne	38804 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x188>
   386a0:	e590a0e0 	ldr	sl, [r0, #224]	; 0xe0
   386a4:	e3520b01 	cmp	r2, #1024	; 0x400
   386a8:	23a02000 	movcs	r2, #0
   386ac:	33a02001 	movcc	r2, #1
   386b0:	e35a0000 	cmp	sl, #0
   386b4:	11a04002 	movne	r4, r2
   386b8:	03824001 	orreq	r4, r2, #1
   386bc:	e3540000 	cmp	r4, #0
   386c0:	0a000001 	beq	386cc <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x50>
   386c4:	e28dd014 	add	sp, sp, #20
   386c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   386cc:	e5993000 	ldr	r3, [r9]
   386d0:	e1a00009 	mov	r0, r9
   386d4:	e5933014 	ldr	r3, [r3, #20]
   386d8:	e12fff33 	blx	r3
   386dc:	e5993000 	ldr	r3, [r9]
   386e0:	e590606c 	ldr	r6, [r0, #108]	; 0x6c
   386e4:	e5933014 	ldr	r3, [r3, #20]
   386e8:	e1a00009 	mov	r0, r9
   386ec:	e12fff33 	blx	r3
   386f0:	e5901074 	ldr	r1, [r0, #116]	; 0x74
   386f4:	e1a00006 	mov	r0, r6
   386f8:	eb0015da 	bl	3de68 <__aeabi_idiv>
   386fc:	e5993000 	ldr	r3, [r9]
   38700:	e1a08000 	mov	r8, r0
   38704:	e5933014 	ldr	r3, [r3, #20]
   38708:	e1a00009 	mov	r0, r9
   3870c:	e12fff33 	blx	r3
   38710:	e5993000 	ldr	r3, [r9]
   38714:	e5906070 	ldr	r6, [r0, #112]	; 0x70
   38718:	e5933014 	ldr	r3, [r3, #20]
   3871c:	e1a00009 	mov	r0, r9
   38720:	e12fff33 	blx	r3
   38724:	e5901078 	ldr	r1, [r0, #120]	; 0x78
   38728:	e1a00006 	mov	r0, r6
   3872c:	eb0015cd 	bl	3de68 <__aeabi_idiv>
   38730:	e2503000 	subs	r3, r0, #0
   38734:	e58d300c 	str	r3, [sp, #12]
   38738:	da00002d 	ble	387f4 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x178>
   3873c:	e28930e4 	add	r3, r9, #228	; 0xe4
   38740:	e59fb0d4 	ldr	fp, [pc, #212]	; 3881c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1a0>
   38744:	e58d5008 	str	r5, [sp, #8]
   38748:	e58d4000 	str	r4, [sp]
   3874c:	e58d3004 	str	r3, [sp, #4]
   38750:	e3580000 	cmp	r8, #0
   38754:	da00001a 	ble	387c4 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x148>
   38758:	e99d0050 	ldmib	sp, {r4, r6}
   3875c:	e3a05000 	mov	r5, #0
   38760:	ea000005 	b	3877c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x100>
   38764:	e5c43000 	strb	r3, [r4]
   38768:	e2855001 	add	r5, r5, #1
   3876c:	e1580005 	cmp	r8, r5
   38770:	e2844001 	add	r4, r4, #1
   38774:	e2866001 	add	r6, r6, #1
   38778:	0a000011 	beq	387c4 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x148>
   3877c:	e5d934e4 	ldrb	r3, [r9, #1252]	; 0x4e4
   38780:	e3530000 	cmp	r3, #0
   38784:	e5d63000 	ldrb	r3, [r6]
   38788:	0a000002 	beq	38798 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x11c>
   3878c:	e5d42000 	ldrb	r2, [r4]
   38790:	e1520003 	cmp	r2, r3
   38794:	0afffff3 	beq	38768 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xec>
   38798:	e59a2000 	ldr	r2, [sl]
   3879c:	e5927024 	ldr	r7, [r2, #36]	; 0x24
   387a0:	e157000b 	cmp	r7, fp
   387a4:	0affffee 	beq	38764 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xe8>
   387a8:	e6af3073 	sxtb	r3, r3
   387ac:	e59d2000 	ldr	r2, [sp]
   387b0:	e1a01005 	mov	r1, r5
   387b4:	e1a0000a 	mov	r0, sl
   387b8:	e12fff37 	blx	r7
   387bc:	e5d63000 	ldrb	r3, [r6]
   387c0:	eaffffe7 	b	38764 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xe8>
   387c4:	e59d3000 	ldr	r3, [sp]
   387c8:	e59d200c 	ldr	r2, [sp, #12]
   387cc:	e2833001 	add	r3, r3, #1
   387d0:	e58d3000 	str	r3, [sp]
   387d4:	e1520003 	cmp	r2, r3
   387d8:	e59d3004 	ldr	r3, [sp, #4]
   387dc:	e0833008 	add	r3, r3, r8
   387e0:	e58d3004 	str	r3, [sp, #4]
   387e4:	e59d3008 	ldr	r3, [sp, #8]
   387e8:	e0833008 	add	r3, r3, r8
   387ec:	e58d3008 	str	r3, [sp, #8]
   387f0:	1affffd6 	bne	38750 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xd4>
   387f4:	e3a03001 	mov	r3, #1
   387f8:	e5c934e4 	strb	r3, [r9, #1252]	; 0x4e4
   387fc:	e28dd014 	add	sp, sp, #20
   38800:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38804:	e58d2000 	str	r2, [sp]
   38808:	e12fff33 	blx	r3
   3880c:	e59d2000 	ldr	r2, [sp]
   38810:	e1a0a000 	mov	sl, r0
   38814:	eaffffa2 	b	386a4 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x28>
   38818:	00038938 	.word	0x00038938
   3881c:	00038910 	.word	0x00038910

00038820 <McTRS80::refreshDisplay()>:
   38820:	e92d4030 	push	{r4, r5, lr}
   38824:	e3a05000 	mov	r5, #0
   38828:	e3e0c03c 	mvn	ip, #60	; 0x3c
   3882c:	e1a04000 	mov	r4, r0
   38830:	e24dde41 	sub	sp, sp, #1040	; 0x410
   38834:	e24dd004 	sub	sp, sp, #4
   38838:	e3a03003 	mov	r3, #3
   3883c:	e5900008 	ldr	r0, [r0, #8]
   38840:	e1a01005 	mov	r1, r5
   38844:	e28d200c 	add	r2, sp, #12
   38848:	e58d5000 	str	r5, [sp]
   3884c:	e5cdc00c 	strb	ip, [sp, #12]
   38850:	e5cd500d 	strb	r5, [sp, #13]
   38854:	e5cd500e 	strb	r5, [sp, #14]
   38858:	ebffebd7 	bl	337bc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3885c:	e28410e4 	add	r1, r4, #228	; 0xe4
   38860:	e3a02b01 	mov	r2, #1024	; 0x400
   38864:	e28d0010 	add	r0, sp, #16
   38868:	ebffc82c 	bl	2a920 <memcpy>
   3886c:	e5940008 	ldr	r0, [r4, #8]
   38870:	e28d2010 	add	r2, sp, #16
   38874:	e58d5000 	str	r5, [sp]
   38878:	e3a03b01 	mov	r3, #1024	; 0x400
   3887c:	e3a01b0f 	mov	r1, #15360	; 0x3c00
   38880:	ebffec1e 	bl	33900 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   38884:	e1500005 	cmp	r0, r5
   38888:	0a000005 	beq	388a4 <McTRS80::refreshDisplay()+0x84>
   3888c:	e5d435e5 	ldrb	r3, [r4, #1509]	; 0x5e5
   38890:	e3530000 	cmp	r3, #0
   38894:	1a000009 	bne	388c0 <McTRS80::refreshDisplay()+0xa0>
   38898:	e28dde41 	add	sp, sp, #1040	; 0x410
   3889c:	e28dd004 	add	sp, sp, #4
   388a0:	e8bd8030 	pop	{r4, r5, pc}
   388a4:	e28d1010 	add	r1, sp, #16
   388a8:	e3a02b01 	mov	r2, #1024	; 0x400
   388ac:	e1a00004 	mov	r0, r4
   388b0:	ebffff71 	bl	3867c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)>
   388b4:	e5d435e5 	ldrb	r3, [r4, #1509]	; 0x5e5
   388b8:	e3530000 	cmp	r3, #0
   388bc:	0afffff5 	beq	38898 <McTRS80::refreshDisplay()+0x78>
   388c0:	e5943000 	ldr	r3, [r4]
   388c4:	e1a00004 	mov	r0, r4
   388c8:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   388cc:	e12fff33 	blx	r3
   388d0:	e5d0303c 	ldrb	r3, [r0, #60]	; 0x3c
   388d4:	e3530000 	cmp	r3, #0
   388d8:	0affffee 	beq	38898 <McTRS80::refreshDisplay()+0x78>
   388dc:	e3a05000 	mov	r5, #0
   388e0:	e2842e4e 	add	r2, r4, #1248	; 0x4e0
   388e4:	e5940008 	ldr	r0, [r4, #8]
   388e8:	e2822005 	add	r2, r2, #5
   388ec:	e58d5000 	str	r5, [sp]
   388f0:	e3a03c01 	mov	r3, #256	; 0x100
   388f4:	e3a01b0e 	mov	r1, #14336	; 0x3800
   388f8:	ebffebaf 	bl	337bc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   388fc:	e5c455e5 	strb	r5, [r4, #1509]	; 0x5e5
   38900:	e28dde41 	add	sp, sp, #1040	; 0x410
   38904:	e28dd004 	add	sp, sp, #4
   38908:	e8bd8030 	pop	{r4, r5, pc}

0003890c <McTRS80::handleWD1771DiskController(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   3890c:	e12fff1e 	bx	lr

00038910 <DisplayBase::write(int, int, int)>:
   38910:	e12fff1e 	bx	lr

00038914 <McBase::service()>:
   38914:	e12fff1e 	bx	lr

00038918 <McBase::getMirrorChanges(unsigned char*, unsigned long, bool)>:
   38918:	e3a00000 	mov	r0, #0
   3891c:	e12fff1e 	bx	lr

00038920 <McBase::setMonitorIORQEnabled(bool)>:
   38920:	e5c010a8 	strb	r1, [r0, #168]	; 0xa8
   38924:	e12fff1e 	bx	lr

00038928 <McBase::setMonitorMREQEnabled(bool)>:
   38928:	e5c010a9 	strb	r1, [r0, #169]	; 0xa9
   3892c:	e12fff1e 	bx	lr

00038930 <McBase::getSetRegistersCodeAddr()>:
   38930:	e59000ac 	ldr	r0, [r0, #172]	; 0xac
   38934:	e12fff1e 	bx	lr

00038938 <McBase::getDisplay()>:
   38938:	e59000e0 	ldr	r0, [r0, #224]	; 0xe0
   3893c:	e12fff1e 	bx	lr

00038940 <McTerminal::enableMachine()>:
   38940:	e12fff1e 	bx	lr

00038944 <McTerminal::busActionCompleteCallback(BR_BUS_ACTION)>:
   38944:	e3510001 	cmp	r1, #1
   38948:	03a03000 	moveq	r3, #0
   3894c:	02800a61 	addeq	r0, r0, #397312	; 0x61000
   38950:	05c01b85 	strbeq	r1, [r0, #2949]	; 0xb85
   38954:	05c03b86 	strbeq	r3, [r0, #2950]	; 0xb86
   38958:	e12fff1e 	bx	lr

0003895c <McTerminal::fileHandler(char const*, unsigned char const*, int)>:
   3895c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   38960:	e24dd094 	sub	sp, sp, #148	; 0x94
   38964:	e1a06000 	mov	r6, r0
   38968:	e1a08002 	mov	r8, r2
   3896c:	e1a05003 	mov	r5, r3
   38970:	e28d2028 	add	r2, sp, #40	; 0x28
   38974:	e3a03064 	mov	r3, #100	; 0x64
   38978:	e59f00a8 	ldr	r0, [pc, #168]	; 38a28 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xcc>
   3897c:	e1a07001 	mov	r7, r1
   38980:	ebffd65e 	bl	2e300 <jsonGetValueForKey>
   38984:	e2504000 	subs	r4, r0, #0
   38988:	1a000002 	bne	38998 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0x3c>
   3898c:	e1a00004 	mov	r0, r4
   38990:	e28dd094 	add	sp, sp, #148	; 0x94
   38994:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   38998:	e59f108c 	ldr	r1, [pc, #140]	; 38a2c <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xd0>
   3899c:	e28d0028 	add	r0, sp, #40	; 0x28
   389a0:	ebffc6b6 	bl	2a480 <strstr>
   389a4:	e1a01007 	mov	r1, r7
   389a8:	e28d2008 	add	r2, sp, #8
   389ac:	e3a0301e 	mov	r3, #30
   389b0:	e59f0078 	ldr	r0, [pc, #120]	; 38a30 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xd4>
   389b4:	ebffd651 	bl	2e300 <jsonGetValueForKey>
   389b8:	e2507000 	subs	r7, r0, #0
   389bc:	01a09007 	moveq	r9, r7
   389c0:	1a000011 	bne	38a0c <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xb0>
   389c4:	ebffb884 	bl	26bdc <CLogger::Get()>
   389c8:	e3a02004 	mov	r2, #4
   389cc:	e59f1060 	ldr	r1, [pc, #96]	; 38a34 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xd8>
   389d0:	e58d5004 	str	r5, [sp, #4]
   389d4:	e58d9000 	str	r9, [sp]
   389d8:	e59f3058 	ldr	r3, [pc, #88]	; 38a38 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xdc>
   389dc:	ebffb7bb 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   389e0:	e5963000 	ldr	r3, [r6]
   389e4:	e1a00006 	mov	r0, r6
   389e8:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   389ec:	e12fff33 	blx	r3
   389f0:	e1a03005 	mov	r3, r5
   389f4:	e1a02008 	mov	r2, r8
   389f8:	e1a01007 	mov	r1, r7
   389fc:	ebffeee2 	bl	3458c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   38a00:	e1a00004 	mov	r0, r4
   38a04:	e28dd094 	add	sp, sp, #148	; 0x94
   38a08:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   38a0c:	e28d0008 	add	r0, sp, #8
   38a10:	e3a02010 	mov	r2, #16
   38a14:	e3a01000 	mov	r1, #0
   38a18:	ebffc6e8 	bl	2a5c0 <strtoul>
   38a1c:	e6ff9070 	uxth	r9, r0
   38a20:	e1a07009 	mov	r7, r9
   38a24:	eaffffe6 	b	389c4 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0x68>
   38a28:	0004647c 	.word	0x0004647c
   38a2c:	0003ee00 	.word	0x0003ee00
   38a30:	00047380 	.word	0x00047380
   38a34:	00047434 	.word	0x00047434
   38a38:	0004738c 	.word	0x0004738c

00038a3c <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   38a3c:	e92d4010 	push	{r4, lr}
   38a40:	e2804a61 	add	r4, r0, #397312	; 0x61000
   38a44:	e5d4cb84 	ldrb	ip, [r4, #2948]	; 0xb84
   38a48:	e59de008 	ldr	lr, [sp, #8]
   38a4c:	e35c0000 	cmp	ip, #0
   38a50:	08bd8010 	popeq	{r4, pc}
   38a54:	e203c018 	and	ip, r3, #24
   38a58:	e35c0008 	cmp	ip, #8
   38a5c:	18bd8010 	popne	{r4, pc}
   38a60:	e201c0c0 	and	ip, r1, #192	; 0xc0
   38a64:	e35c0080 	cmp	ip, #128	; 0x80
   38a68:	18bd8010 	popne	{r4, pc}
   38a6c:	e3130001 	tst	r3, #1
   38a70:	1a00000d 	bne	38aac <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x70>
   38a74:	e3130002 	tst	r3, #2
   38a78:	08bd8010 	popeq	{r4, pc}
   38a7c:	e2113001 	ands	r3, r1, #1
   38a80:	1a000037 	bne	38b64 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x128>
   38a84:	e1a013a2 	lsr	r1, r2, #7
   38a88:	e2022003 	and	r2, r2, #3
   38a8c:	e2011001 	and	r1, r1, #1
   38a90:	e3520003 	cmp	r2, #3
   38a94:	e5c41b87 	strb	r1, [r4, #2951]	; 0xb87
   38a98:	0a00003c 	beq	38b90 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x154>
   38a9c:	e5d42b86 	ldrb	r2, [r4, #2950]	; 0xb86
   38aa0:	e3520000 	cmp	r2, #0
   38aa4:	15c43b86 	strbne	r3, [r4, #2950]	; 0xb86
   38aa8:	e8bd8010 	pop	{r4, pc}
   38aac:	e3110001 	tst	r1, #1
   38ab0:	1a00000c 	bne	38ae8 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xac>
   38ab4:	e5943b8c 	ldr	r3, [r4, #2956]	; 0xb8c
   38ab8:	e5941b90 	ldr	r1, [r4, #2960]	; 0xb90
   38abc:	e5d42b85 	ldrb	r2, [r4, #2949]	; 0xb85
   38ac0:	e1530001 	cmp	r3, r1
   38ac4:	13a03003 	movne	r3, #3
   38ac8:	03a03002 	moveq	r3, #2
   38acc:	e3520000 	cmp	r2, #0
   38ad0:	e58e3000 	str	r3, [lr]
   38ad4:	1a00002a 	bne	38b84 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x148>
   38ad8:	e5d43b86 	ldrb	r3, [r4, #2950]	; 0xb86
   38adc:	e3530000 	cmp	r3, #0
   38ae0:	158e2000 	strne	r2, [lr]
   38ae4:	e8bd8010 	pop	{r4, pc}
   38ae8:	e3a01000 	mov	r1, #0
   38aec:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   38af0:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   38af4:	e58e1000 	str	r1, [lr]
   38af8:	e1520003 	cmp	r2, r3
   38afc:	0a000015 	beq	38b58 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x11c>
   38b00:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   38b04:	e59fc094 	ldr	ip, [pc, #148]	; 38ba0 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x164>
   38b08:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   38b0c:	e0802002 	add	r2, r0, r2
   38b10:	e7d2200c 	ldrb	r2, [r2, ip]
   38b14:	e2833001 	add	r3, r3, #1
   38b18:	e58e2000 	str	r2, [lr]
   38b1c:	e5843b90 	str	r3, [r4, #2960]	; 0xb90
   38b20:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   38b24:	e5943b94 	ldr	r3, [r4, #2964]	; 0xb94
   38b28:	e1520003 	cmp	r2, r3
   38b2c:	e5d43b87 	ldrb	r3, [r4, #2951]	; 0xb87
   38b30:	25841b90 	strcs	r1, [r4, #2960]	; 0xb90
   38b34:	e3530000 	cmp	r3, #0
   38b38:	0a000006 	beq	38b58 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x11c>
   38b3c:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   38b40:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   38b44:	e1520003 	cmp	r2, r3
   38b48:	0a000002 	beq	38b58 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x11c>
   38b4c:	e5900004 	ldr	r0, [r0, #4]
   38b50:	e3e01000 	mvn	r1, #0
   38b54:	ebfffab2 	bl	37624 <McManager::targetIrq(int)>
   38b58:	e3a03000 	mov	r3, #0
   38b5c:	e5c43b85 	strb	r3, [r4, #2949]	; 0xb85
   38b60:	e8bd8010 	pop	{r4, pc}
   38b64:	e5940b88 	ldr	r0, [r4, #2952]	; 0xb88
   38b68:	e3500000 	cmp	r0, #0
   38b6c:	08bd8010 	popeq	{r4, pc}
   38b70:	e5903000 	ldr	r3, [r0]
   38b74:	e1a01002 	mov	r1, r2
   38b78:	e8bd4010 	pop	{r4, lr}
   38b7c:	e593300c 	ldr	r3, [r3, #12]
   38b80:	e12fff13 	bx	r3
   38b84:	e3833030 	orr	r3, r3, #48	; 0x30
   38b88:	e58e3000 	str	r3, [lr]
   38b8c:	e8bd8010 	pop	{r4, pc}
   38b90:	e3a02001 	mov	r2, #1
   38b94:	e5c43b85 	strb	r3, [r4, #2949]	; 0xb85
   38b98:	e5c42b86 	strb	r2, [r4, #2950]	; 0xb86
   38b9c:	e8bd8010 	pop	{r4, pc}
   38ba0:	00061b98 	.word	0x00061b98

00038ba4 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)>:
   38ba4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38ba8:	e3530000 	cmp	r3, #0
   38bac:	e24dd014 	sub	sp, sp, #20
   38bb0:	0a00000f 	beq	38bf4 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x50>
   38bb4:	e1a03000 	mov	r3, r0
   38bb8:	e3e0e000 	mvn	lr, #0
   38bbc:	e280cbc3 	add	ip, r0, #199680	; 0x30c00
   38bc0:	e28ccd05 	add	ip, ip, #320	; 0x140
   38bc4:	e5c3e0e7 	strb	lr, [r3, #231]	; 0xe7
   38bc8:	e2833004 	add	r3, r3, #4
   38bcc:	e153000c 	cmp	r3, ip
   38bd0:	1afffffb 	bne	38bc4 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x20>
   38bd4:	e3e0e000 	mvn	lr, #0
   38bd8:	e59f314c 	ldr	r3, [pc, #332]	; 38d2c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x188>
   38bdc:	e59fc14c 	ldr	ip, [pc, #332]	; 38d30 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x18c>
   38be0:	e0803003 	add	r3, r0, r3
   38be4:	e080c00c 	add	ip, r0, ip
   38be8:	e4c3e004 	strb	lr, [r3], #4
   38bec:	e153000c 	cmp	r3, ip
   38bf0:	1afffffc 	bne	38be8 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x44>
   38bf4:	e3510000 	cmp	r1, #0
   38bf8:	13520009 	cmpne	r2, #9
   38bfc:	93a03001 	movls	r3, #1
   38c00:	83a03000 	movhi	r3, #0
   38c04:	9a000044 	bls	38d1c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x178>
   38c08:	e280aa61 	add	sl, r0, #397312	; 0x61000
   38c0c:	e59acb88 	ldr	ip, [sl, #2952]	; 0xb88
   38c10:	e59cc00c 	ldr	ip, [ip, #12]
   38c14:	e5c1c000 	strb	ip, [r1]
   38c18:	e59acb88 	ldr	ip, [sl, #2952]	; 0xb88
   38c1c:	e59cc010 	ldr	ip, [ip, #16]
   38c20:	e5c1c001 	strb	ip, [r1, #1]
   38c24:	e59acb88 	ldr	ip, [sl, #2952]	; 0xb88
   38c28:	e59ce010 	ldr	lr, [ip, #16]
   38c2c:	e35e0000 	cmp	lr, #0
   38c30:	0a000039 	beq	38d1c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x178>
   38c34:	e58d2004 	str	r2, [sp, #4]
   38c38:	e1a08001 	mov	r8, r1
   38c3c:	e1a09000 	mov	r9, r0
   38c40:	e1a0b003 	mov	fp, r3
   38c44:	e3a02002 	mov	r2, #2
   38c48:	e59c300c 	ldr	r3, [ip, #12]
   38c4c:	e3530000 	cmp	r3, #0
   38c50:	0a000028 	beq	38cf8 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x154>
   38c54:	e3a05000 	mov	r5, #0
   38c58:	e023539b 	mla	r3, fp, r3, r5
   38c5c:	e59c1008 	ldr	r1, [ip, #8]
   38c60:	e28c7028 	add	r7, ip, #40	; 0x28
   38c64:	e1530001 	cmp	r3, r1
   38c68:	359c7004 	ldrcc	r7, [ip, #4]
   38c6c:	31a03103 	lslcc	r3, r3, #2
   38c70:	21a03103 	lslcs	r3, r3, #2
   38c74:	30877003 	addcc	r7, r7, r3
   38c78:	e0893003 	add	r3, r9, r3
   38c7c:	e2834803 	add	r4, r3, #196608	; 0x30000
   38c80:	e5940e24 	ldr	r0, [r4, #3620]	; 0xe24
   38c84:	e5971000 	ldr	r1, [r7]
   38c88:	e2826006 	add	r6, r2, #6
   38c8c:	e1500001 	cmp	r0, r1
   38c90:	e0880002 	add	r0, r8, r2
   38c94:	0a000012 	beq	38ce4 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x140>
   38c98:	e59d3004 	ldr	r3, [sp, #4]
   38c9c:	e1530006 	cmp	r3, r6
   38ca0:	3a000018 	bcc	38d08 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x164>
   38ca4:	e5cdb009 	strb	fp, [sp, #9]
   38ca8:	e5cd5008 	strb	r5, [sp, #8]
   38cac:	e5d71000 	ldrb	r1, [r7]
   38cb0:	e3a02006 	mov	r2, #6
   38cb4:	e5cd100a 	strb	r1, [sp, #10]
   38cb8:	e5d7c001 	ldrb	ip, [r7, #1]
   38cbc:	e28d1008 	add	r1, sp, #8
   38cc0:	e5cdc00b 	strb	ip, [sp, #11]
   38cc4:	e5d7c002 	ldrb	ip, [r7, #2]
   38cc8:	e5cdc00c 	strb	ip, [sp, #12]
   38ccc:	e5d7c003 	ldrb	ip, [r7, #3]
   38cd0:	e5cdc00d 	strb	ip, [sp, #13]
   38cd4:	ebffc711 	bl	2a920 <memcpy>
   38cd8:	e1a02006 	mov	r2, r6
   38cdc:	e5973000 	ldr	r3, [r7]
   38ce0:	e5843e24 	str	r3, [r4, #3620]	; 0xe24
   38ce4:	e59acb88 	ldr	ip, [sl, #2952]	; 0xb88
   38ce8:	e2855001 	add	r5, r5, #1
   38cec:	e59c300c 	ldr	r3, [ip, #12]
   38cf0:	e1530005 	cmp	r3, r5
   38cf4:	8affffd7 	bhi	38c58 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0xb4>
   38cf8:	e59c3010 	ldr	r3, [ip, #16]
   38cfc:	e28bb001 	add	fp, fp, #1
   38d00:	e153000b 	cmp	r3, fp
   38d04:	8affffcf 	bhi	38c48 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0xa4>
   38d08:	e3520002 	cmp	r2, #2
   38d0c:	0a000002 	beq	38d1c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x178>
   38d10:	e1a00002 	mov	r0, r2
   38d14:	e28dd014 	add	sp, sp, #20
   38d18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38d1c:	e3a02000 	mov	r2, #0
   38d20:	e1a00002 	mov	r0, r2
   38d24:	e28dd014 	add	sp, sp, #20
   38d28:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38d2c:	00030e27 	.word	0x00030e27
   38d30:	00061b67 	.word	0x00061b67

00038d34 <McTerminal::refreshDisplay()>:
   38d34:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38d38:	e5903000 	ldr	r3, [r0]
   38d3c:	e59f244c 	ldr	r2, [pc, #1100]	; 39190 <McTerminal::refreshDisplay()+0x45c>
   38d40:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
   38d44:	e24ddffb 	sub	sp, sp, #1004	; 0x3ec
   38d48:	e1530002 	cmp	r3, r2
   38d4c:	e1a0b000 	mov	fp, r0
   38d50:	1a0000bf 	bne	39054 <McTerminal::refreshDisplay()+0x320>
   38d54:	e59080e0 	ldr	r8, [r0, #224]	; 0xe0
   38d58:	e3580000 	cmp	r8, #0
   38d5c:	0a00007a 	beq	38f4c <McTerminal::refreshDisplay()+0x218>
   38d60:	e59b0004 	ldr	r0, [fp, #4]
   38d64:	ebfffb93 	bl	37bb8 <McManager::hostSerialNumChAvailable()>
   38d68:	e3500000 	cmp	r0, #0
   38d6c:	1a000078 	bne	38f54 <McTerminal::refreshDisplay()+0x220>
   38d70:	e28baa61 	add	sl, fp, #397312	; 0x61000
   38d74:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   38d78:	e3500000 	cmp	r0, #0
   38d7c:	0a000072 	beq	38f4c <McTerminal::refreshDisplay()+0x218>
   38d80:	e5903000 	ldr	r3, [r0]
   38d84:	e59f2408 	ldr	r2, [pc, #1032]	; 39194 <McTerminal::refreshDisplay()+0x460>
   38d88:	e5933014 	ldr	r3, [r3, #20]
   38d8c:	e1530002 	cmp	r3, r2
   38d90:	1a0000d7 	bne	390f4 <McTerminal::refreshDisplay()+0x3c0>
   38d94:	e5d0001c 	ldrb	r0, [r0, #28]
   38d98:	e3500000 	cmp	r0, #0
   38d9c:	0a000090 	beq	38fe4 <McTerminal::refreshDisplay()+0x2b0>
   38da0:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   38da4:	e3530000 	cmp	r3, #0
   38da8:	1a0000d3 	bne	390fc <McTerminal::refreshDisplay()+0x3c8>
   38dac:	e59a5b88 	ldr	r5, [sl, #2952]	; 0xb88
   38db0:	e5953010 	ldr	r3, [r5, #16]
   38db4:	e3530000 	cmp	r3, #0
   38db8:	0a00008a 	beq	38fe8 <McTerminal::refreshDisplay()+0x2b4>
   38dbc:	e3a09000 	mov	r9, #0
   38dc0:	e595300c 	ldr	r3, [r5, #12]
   38dc4:	e3530000 	cmp	r3, #0
   38dc8:	0a00007e 	beq	38fc8 <McTerminal::refreshDisplay()+0x294>
   38dcc:	e3a06000 	mov	r6, #0
   38dd0:	ea000010 	b	38e18 <McTerminal::refreshDisplay()+0xe4>
   38dd4:	e1520001 	cmp	r2, r1
   38dd8:	1a000098 	bne	39040 <McTerminal::refreshDisplay()+0x30c>
   38ddc:	e593201c 	ldr	r2, [r3, #28]
   38de0:	e59f13b0 	ldr	r1, [pc, #944]	; 39198 <McTerminal::refreshDisplay()+0x464>
   38de4:	e1520001 	cmp	r2, r1
   38de8:	1a00008f 	bne	3902c <McTerminal::refreshDisplay()+0x2f8>
   38dec:	e5937024 	ldr	r7, [r3, #36]	; 0x24
   38df0:	e59f33a4 	ldr	r3, [pc, #932]	; 3919c <McTerminal::refreshDisplay()+0x468>
   38df4:	e1570003 	cmp	r7, r3
   38df8:	1a000027 	bne	38e9c <McTerminal::refreshDisplay()+0x168>
   38dfc:	e5953000 	ldr	r3, [r5]
   38e00:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   38e04:	e59a5b88 	ldr	r5, [sl, #2952]	; 0xb88
   38e08:	e2866001 	add	r6, r6, #1
   38e0c:	e595300c 	ldr	r3, [r5, #12]
   38e10:	e1530006 	cmp	r3, r6
   38e14:	9a00006b 	bls	38fc8 <McTerminal::refreshDisplay()+0x294>
   38e18:	e0236399 	mla	r3, r9, r3, r6
   38e1c:	e5952008 	ldr	r2, [r5, #8]
   38e20:	e1530002 	cmp	r3, r2
   38e24:	35955004 	ldrcc	r5, [r5, #4]
   38e28:	31a03103 	lslcc	r3, r3, #2
   38e2c:	21a03103 	lslcs	r3, r3, #2
   38e30:	30855003 	addcc	r5, r5, r3
   38e34:	22855028 	addcs	r5, r5, #40	; 0x28
   38e38:	e08b4003 	add	r4, fp, r3
   38e3c:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   38e40:	e5952000 	ldr	r2, [r5]
   38e44:	e1520003 	cmp	r2, r3
   38e48:	0affffed 	beq	38e04 <McTerminal::refreshDisplay()+0xd0>
   38e4c:	e5d53003 	ldrb	r3, [r5, #3]
   38e50:	e59f1348 	ldr	r1, [pc, #840]	; 391a0 <McTerminal::refreshDisplay()+0x46c>
   38e54:	e3130010 	tst	r3, #16
   38e58:	e5983000 	ldr	r3, [r8]
   38e5c:	e5932018 	ldr	r2, [r3, #24]
   38e60:	1affffdb 	bne	38dd4 <McTerminal::refreshDisplay()+0xa0>
   38e64:	e1520001 	cmp	r2, r1
   38e68:	1a00006a 	bne	39018 <McTerminal::refreshDisplay()+0x2e4>
   38e6c:	e593201c 	ldr	r2, [r3, #28]
   38e70:	e59f1320 	ldr	r1, [pc, #800]	; 39198 <McTerminal::refreshDisplay()+0x464>
   38e74:	e1520001 	cmp	r2, r1
   38e78:	0affffdb 	beq	38dec <McTerminal::refreshDisplay()+0xb8>
   38e7c:	e1d510d2 	ldrsb	r1, [r5, #2]
   38e80:	e1a00008 	mov	r0, r8
   38e84:	e12fff32 	blx	r2
   38e88:	e5983000 	ldr	r3, [r8]
   38e8c:	e5937024 	ldr	r7, [r3, #36]	; 0x24
   38e90:	e59f3304 	ldr	r3, [pc, #772]	; 3919c <McTerminal::refreshDisplay()+0x468>
   38e94:	e1570003 	cmp	r7, r3
   38e98:	0affffd7 	beq	38dfc <McTerminal::refreshDisplay()+0xc8>
   38e9c:	e5d53000 	ldrb	r3, [r5]
   38ea0:	e1a02009 	mov	r2, r9
   38ea4:	e1a01006 	mov	r1, r6
   38ea8:	e1a00008 	mov	r0, r8
   38eac:	e12fff37 	blx	r7
   38eb0:	eaffffd1 	b	38dfc <McTerminal::refreshDisplay()+0xc8>
   38eb4:	ebffd420 	bl	2df3c <micros>
   38eb8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   38ebc:	e59a3b68 	ldr	r3, [sl, #2920]	; 0xb68
   38ec0:	e59a1b64 	ldr	r1, [sl, #2916]	; 0xb64
   38ec4:	e0020392 	mul	r2, r2, r3
   38ec8:	ebffd439 	bl	2dfb4 <isTimeout>
   38ecc:	e3500000 	cmp	r0, #0
   38ed0:	0a00001d 	beq	38f4c <McTerminal::refreshDisplay()+0x218>
   38ed4:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   38ed8:	e35c0000 	cmp	ip, #0
   38edc:	1a000090 	bne	39124 <McTerminal::refreshDisplay()+0x3f0>
   38ee0:	e59aeb88 	ldr	lr, [sl, #2952]	; 0xb88
   38ee4:	e28a4eb7 	add	r4, sl, #2928	; 0xb70
   38ee8:	e28e5014 	add	r5, lr, #20
   38eec:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
   38ef0:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
   38ef4:	e59e300c 	ldr	r3, [lr, #12]
   38ef8:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   38efc:	e59e6008 	ldr	r6, [lr, #8]
   38f00:	e0230293 	mla	r3, r3, r2, r0
   38f04:	e1530006 	cmp	r3, r6
   38f08:	359ee004 	ldrcc	lr, [lr, #4]
   38f0c:	e1a01000 	mov	r1, r0
   38f10:	308ee103 	addcc	lr, lr, r3, lsl #2
   38f14:	e5950000 	ldr	r0, [r5]
   38f18:	e5983000 	ldr	r3, [r8]
   38f1c:	e5840000 	str	r0, [r4]
   38f20:	228ee028 	addcs	lr, lr, #40	; 0x28
   38f24:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   38f28:	e59f026c 	ldr	r0, [pc, #620]	; 3919c <McTerminal::refreshDisplay()+0x468>
   38f2c:	e5de3000 	ldrb	r3, [lr]
   38f30:	e1540000 	cmp	r4, r0
   38f34:	e58a3b80 	str	r3, [sl, #2944]	; 0xb80
   38f38:	1a00008f 	bne	3917c <McTerminal::refreshDisplay()+0x448>
   38f3c:	e22cc001 	eor	ip, ip, #1
   38f40:	e5cacb6c 	strb	ip, [sl, #2924]	; 0xb6c
   38f44:	ebffd3fc 	bl	2df3c <micros>
   38f48:	e58a0b64 	str	r0, [sl, #2916]	; 0xb64
   38f4c:	e28ddffb 	add	sp, sp, #1004	; 0x3ec
   38f50:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38f54:	e3500ffa 	cmp	r0, #1000	; 0x3e8
   38f58:	b1a02000 	movlt	r2, r0
   38f5c:	a3a02ffa 	movge	r2, #1000	; 0x3e8
   38f60:	e1a0100d 	mov	r1, sp
   38f64:	e59b0004 	ldr	r0, [fp, #4]
   38f68:	ebfffb15 	bl	37bc4 <McManager::hostSerialReadChars(unsigned char*, unsigned long)>
   38f6c:	e2505000 	subs	r5, r0, #0
   38f70:	0affff7e 	beq	38d70 <McTerminal::refreshDisplay()+0x3c>
   38f74:	e28baa61 	add	sl, fp, #397312	; 0x61000
   38f78:	e3a04000 	mov	r4, #0
   38f7c:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   38f80:	ea000007 	b	38fa4 <McTerminal::refreshDisplay()+0x270>
   38f84:	e5903000 	ldr	r3, [r0]
   38f88:	e7dd1004 	ldrb	r1, [sp, r4]
   38f8c:	e593300c 	ldr	r3, [r3, #12]
   38f90:	e2844001 	add	r4, r4, #1
   38f94:	e12fff33 	blx	r3
   38f98:	e1550004 	cmp	r5, r4
   38f9c:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   38fa0:	0affff74 	beq	38d78 <McTerminal::refreshDisplay()+0x44>
   38fa4:	e3500000 	cmp	r0, #0
   38fa8:	1afffff5 	bne	38f84 <McTerminal::refreshDisplay()+0x250>
   38fac:	e2843001 	add	r3, r4, #1
   38fb0:	e1550003 	cmp	r5, r3
   38fb4:	e2844002 	add	r4, r4, #2
   38fb8:	0affffe3 	beq	38f4c <McTerminal::refreshDisplay()+0x218>
   38fbc:	e1550004 	cmp	r5, r4
   38fc0:	1afffff9 	bne	38fac <McTerminal::refreshDisplay()+0x278>
   38fc4:	eaffffe0 	b	38f4c <McTerminal::refreshDisplay()+0x218>
   38fc8:	e5953010 	ldr	r3, [r5, #16]
   38fcc:	e2899001 	add	r9, r9, #1
   38fd0:	e1530009 	cmp	r3, r9
   38fd4:	8affff79 	bhi	38dc0 <McTerminal::refreshDisplay()+0x8c>
   38fd8:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   38fdc:	e3530000 	cmp	r3, #0
   38fe0:	1a00001e 	bne	39060 <McTerminal::refreshDisplay()+0x32c>
   38fe4:	e59a5b88 	ldr	r5, [sl, #2952]	; 0xb88
   38fe8:	e3a02000 	mov	r2, #0
   38fec:	e5d5301d 	ldrb	r3, [r5, #29]
   38ff0:	e5c5201c 	strb	r2, [r5, #28]
   38ff4:	e1530002 	cmp	r3, r2
   38ff8:	0affffad 	beq	38eb4 <McTerminal::refreshDisplay()+0x180>
   38ffc:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   39000:	e3530000 	cmp	r3, #0
   39004:	1a00002f 	bne	390c8 <McTerminal::refreshDisplay()+0x394>
   39008:	e3a03000 	mov	r3, #0
   3900c:	e5ca3b6c 	strb	r3, [sl, #2924]	; 0xb6c
   39010:	e28ddffb 	add	sp, sp, #1004	; 0x3ec
   39014:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39018:	e1d510d1 	ldrsb	r1, [r5, #1]
   3901c:	e1a00008 	mov	r0, r8
   39020:	e12fff32 	blx	r2
   39024:	e5983000 	ldr	r3, [r8]
   39028:	eaffff8f 	b	38e6c <McTerminal::refreshDisplay()+0x138>
   3902c:	e1d510d1 	ldrsb	r1, [r5, #1]
   39030:	e1a00008 	mov	r0, r8
   39034:	e12fff32 	blx	r2
   39038:	e5983000 	ldr	r3, [r8]
   3903c:	eaffff6a 	b	38dec <McTerminal::refreshDisplay()+0xb8>
   39040:	e1d510d2 	ldrsb	r1, [r5, #2]
   39044:	e1a00008 	mov	r0, r8
   39048:	e12fff32 	blx	r2
   3904c:	e5983000 	ldr	r3, [r8]
   39050:	eaffff61 	b	38ddc <McTerminal::refreshDisplay()+0xa8>
   39054:	e12fff33 	blx	r3
   39058:	e1a08000 	mov	r8, r0
   3905c:	eaffff3d 	b	38d58 <McTerminal::refreshDisplay()+0x24>
   39060:	e5983000 	ldr	r3, [r8]
   39064:	e59f6130 	ldr	r6, [pc, #304]	; 3919c <McTerminal::refreshDisplay()+0x468>
   39068:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   3906c:	e285e014 	add	lr, r5, #20
   39070:	e28aceb7 	add	ip, sl, #2928	; 0xb70
   39074:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   39078:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3907c:	e595300c 	ldr	r3, [r5, #12]
   39080:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   39084:	e5957008 	ldr	r7, [r5, #8]
   39088:	e0230293 	mla	r3, r3, r2, r0
   3908c:	e1530007 	cmp	r3, r7
   39090:	35955004 	ldrcc	r5, [r5, #4]
   39094:	e1a01000 	mov	r1, r0
   39098:	e59e0000 	ldr	r0, [lr]
   3909c:	22855028 	addcs	r5, r5, #40	; 0x28
   390a0:	e58c0000 	str	r0, [ip]
   390a4:	30855103 	addcc	r5, r5, r3, lsl #2
   390a8:	e5d53000 	ldrb	r3, [r5]
   390ac:	e1540006 	cmp	r4, r6
   390b0:	e58a3b80 	str	r3, [sl, #2944]	; 0xb80
   390b4:	0affffca 	beq	38fe4 <McTerminal::refreshDisplay()+0x2b0>
   390b8:	e59a3b7c 	ldr	r3, [sl, #2940]	; 0xb7c
   390bc:	e1a00008 	mov	r0, r8
   390c0:	e12fff34 	blx	r4
   390c4:	eaffffc6 	b	38fe4 <McTerminal::refreshDisplay()+0x2b0>
   390c8:	e5982000 	ldr	r2, [r8]
   390cc:	e59f30c8 	ldr	r3, [pc, #200]	; 3919c <McTerminal::refreshDisplay()+0x468>
   390d0:	e5924024 	ldr	r4, [r2, #36]	; 0x24
   390d4:	e1540003 	cmp	r4, r3
   390d8:	0affffca 	beq	39008 <McTerminal::refreshDisplay()+0x2d4>
   390dc:	e1a00008 	mov	r0, r8
   390e0:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   390e4:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   390e8:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   390ec:	e12fff34 	blx	r4
   390f0:	eaffffc4 	b	39008 <McTerminal::refreshDisplay()+0x2d4>
   390f4:	e12fff33 	blx	r3
   390f8:	eaffff26 	b	38d98 <McTerminal::refreshDisplay()+0x64>
   390fc:	e5983000 	ldr	r3, [r8]
   39100:	e59f6094 	ldr	r6, [pc, #148]	; 3919c <McTerminal::refreshDisplay()+0x468>
   39104:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   39108:	e1540006 	cmp	r4, r6
   3910c:	1a000010 	bne	39154 <McTerminal::refreshDisplay()+0x420>
   39110:	e59a5b88 	ldr	r5, [sl, #2952]	; 0xb88
   39114:	e5953010 	ldr	r3, [r5, #16]
   39118:	e3530000 	cmp	r3, #0
   3911c:	1affff26 	bne	38dbc <McTerminal::refreshDisplay()+0x88>
   39120:	eaffffd1 	b	3906c <McTerminal::refreshDisplay()+0x338>
   39124:	e5982000 	ldr	r2, [r8]
   39128:	e59f306c 	ldr	r3, [pc, #108]	; 3919c <McTerminal::refreshDisplay()+0x468>
   3912c:	e5924024 	ldr	r4, [r2, #36]	; 0x24
   39130:	e1540003 	cmp	r4, r3
   39134:	0affff80 	beq	38f3c <McTerminal::refreshDisplay()+0x208>
   39138:	e1a00008 	mov	r0, r8
   3913c:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   39140:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   39144:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   39148:	e12fff34 	blx	r4
   3914c:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   39150:	eaffff79 	b	38f3c <McTerminal::refreshDisplay()+0x208>
   39154:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   39158:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   3915c:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   39160:	e1a00008 	mov	r0, r8
   39164:	e12fff34 	blx	r4
   39168:	e59a5b88 	ldr	r5, [sl, #2952]	; 0xb88
   3916c:	e5953010 	ldr	r3, [r5, #16]
   39170:	e3530000 	cmp	r3, #0
   39174:	1affff10 	bne	38dbc <McTerminal::refreshDisplay()+0x88>
   39178:	eaffff96 	b	38fd8 <McTerminal::refreshDisplay()+0x2a4>
   3917c:	e1a00008 	mov	r0, r8
   39180:	e59a3b7c 	ldr	r3, [sl, #2940]	; 0xb7c
   39184:	e12fff34 	blx	r4
   39188:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   3918c:	eaffff6a 	b	38f3c <McTerminal::refreshDisplay()+0x208>
   39190:	00038938 	.word	0x00038938
   39194:	000396b8 	.word	0x000396b8
   39198:	000396b4 	.word	0x000396b4
   3919c:	00038910 	.word	0x00038910
   391a0:	000396b0 	.word	0x000396b0

000391a4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>:
   391a4:	e92d4070 	push	{r4, r5, r6, lr}
   391a8:	e1a04001 	mov	r4, r1
   391ac:	e1a05000 	mov	r5, r0
   391b0:	e59f10b4 	ldr	r1, [pc, #180]	; 3926c <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xc8>
   391b4:	e59f00b4 	ldr	r0, [pc, #180]	; 39270 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xcc>
   391b8:	ebffc471 	bl	2a384 <strcpy>
   391bc:	e5d43000 	ldrb	r3, [r4]
   391c0:	e353007f 	cmp	r3, #127	; 0x7f
   391c4:	da000009 	ble	391f0 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x4c>
   391c8:	e5d42001 	ldrb	r2, [r4, #1]
   391cc:	e3520000 	cmp	r2, #0
   391d0:	1a00001d 	bne	3924c <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xa8>
   391d4:	e3e03000 	mvn	r3, #0
   391d8:	e59f1090 	ldr	r1, [pc, #144]	; 39270 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xcc>
   391dc:	e3150011 	tst	r5, #17
   391e0:	1203301f 	andne	r3, r3, #31
   391e4:	e5c13000 	strb	r3, [r1]
   391e8:	e59f0080 	ldr	r0, [pc, #128]	; 39270 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xcc>
   391ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   391f0:	e3530001 	cmp	r3, #1
   391f4:	da00001a 	ble	39264 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xc0>
   391f8:	e3150022 	tst	r5, #34	; 0x22
   391fc:	13a00001 	movne	r0, #1
   39200:	03a00000 	moveq	r0, #0
   39204:	e3150044 	tst	r5, #68	; 0x44
   39208:	03a02000 	moveq	r2, #0
   3920c:	13a02002 	movne	r2, #2
   39210:	e59f1058 	ldr	r1, [pc, #88]	; 39270 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xcc>
   39214:	e0822000 	add	r2, r2, r0
   39218:	e591c004 	ldr	ip, [r1, #4]
   3921c:	e59f0050 	ldr	r0, [pc, #80]	; 39274 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xd0>
   39220:	e083338c 	add	r3, r3, ip, lsl #7
   39224:	e0823103 	add	r3, r2, r3, lsl #2
   39228:	e1a03083 	lsl	r3, r3, #1
   3922c:	e19030b3 	ldrh	r3, [r0, r3]
   39230:	e2432c01 	sub	r2, r3, #256	; 0x100
   39234:	e3520032 	cmp	r2, #50	; 0x32
   39238:	86af3073 	sxtbhi	r3, r3
   3923c:	8affffe6 	bhi	391dc <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x38>
   39240:	e59f3030 	ldr	r3, [pc, #48]	; 39278 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xd4>
   39244:	e7930102 	ldr	r0, [r3, r2, lsl #2]
   39248:	e8bd8070 	pop	{r4, r5, r6, pc}
   3924c:	e3520001 	cmp	r2, #1
   39250:	e1a03002 	mov	r3, r2
   39254:	0a000002 	beq	39264 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xc0>
   39258:	e352007f 	cmp	r2, #127	; 0x7f
   3925c:	caffffdc 	bgt	391d4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x30>
   39260:	eaffffe4 	b	391f8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x54>
   39264:	e59f0010 	ldr	r0, [pc, #16]	; 3927c <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xd8>
   39268:	e8bd8070 	pop	{r4, r5, r6, pc}
   3926c:	0003eed8 	.word	0x0003eed8
   39270:	000510d8 	.word	0x000510d8
   39274:	0004c8f4 	.word	0x0004c8f4
   39278:	0004e0f4 	.word	0x0004e0f4
   3927c:	00047884 	.word	0x00047884

00039280 <McTerminal::keyHandler(unsigned char, unsigned char const*)>:
   39280:	e1a03001 	mov	r3, r1
   39284:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39288:	e1a01002 	mov	r1, r2
   3928c:	e1a07000 	mov	r7, r0
   39290:	e1a00003 	mov	r0, r3
   39294:	ebffffc2 	bl	391a4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
   39298:	e1a06000 	mov	r6, r0
   3929c:	ebffc37a 	bl	2a08c <strlen>
   392a0:	e3500000 	cmp	r0, #0
   392a4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   392a8:	e2874a61 	add	r4, r7, #397312	; 0x61000
   392ac:	e5d43b84 	ldrb	r3, [r4, #2948]	; 0xb84
   392b0:	e3530000 	cmp	r3, #0
   392b4:	0a00002e 	beq	39374 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xf4>
   392b8:	e3a05000 	mov	r5, #0
   392bc:	e3e0a000 	mvn	sl, #0
   392c0:	e1a09005 	mov	r9, r5
   392c4:	e59f80b8 	ldr	r8, [pc, #184]	; 39384 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x104>
   392c8:	ea000011 	b	39314 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x94>
   392cc:	e2430001 	sub	r0, r3, #1
   392d0:	e3520000 	cmp	r2, #0
   392d4:	01500001 	cmpeq	r0, r1
   392d8:	0a00000c 	beq	39310 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   392dc:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   392e0:	e7d61005 	ldrb	r1, [r6, r5]
   392e4:	e0872002 	add	r2, r7, r2
   392e8:	e7c21008 	strb	r1, [r2, r8]
   392ec:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   392f0:	e2822001 	add	r2, r2, #1
   392f4:	e5842b8c 	str	r2, [r4, #2956]	; 0xb8c
   392f8:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   392fc:	e1520003 	cmp	r2, r3
   39300:	e5d43b87 	ldrb	r3, [r4, #2951]	; 0xb87
   39304:	25849b8c 	strcs	r9, [r4, #2956]	; 0xb8c
   39308:	e3530000 	cmp	r3, #0
   3930c:	1a000014 	bne	39364 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xe4>
   39310:	e2855001 	add	r5, r5, #1
   39314:	e1a00006 	mov	r0, r6
   39318:	ebffc35b 	bl	2a08c <strlen>
   3931c:	e1550000 	cmp	r5, r0
   39320:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
   39324:	e5943b94 	ldr	r3, [r4, #2964]	; 0xb94
   39328:	e3530000 	cmp	r3, #0
   3932c:	0afffff7 	beq	39310 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   39330:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   39334:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   39338:	e1510002 	cmp	r1, r2
   3933c:	0affffe6 	beq	392dc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x5c>
   39340:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   39344:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   39348:	e1520001 	cmp	r2, r1
   3934c:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   39350:	3affffdd 	bcc	392cc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x4c>
   39354:	e0422001 	sub	r2, r2, r1
   39358:	e3520001 	cmp	r2, #1
   3935c:	8affffde 	bhi	392dc <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x5c>
   39360:	eaffffea 	b	39310 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   39364:	e1a0100a 	mov	r1, sl
   39368:	e5970004 	ldr	r0, [r7, #4]
   3936c:	ebfff8ac 	bl	37624 <McManager::targetIrq(int)>
   39370:	eaffffe6 	b	39310 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   39374:	e1a01006 	mov	r1, r6
   39378:	e5970004 	ldr	r0, [r7, #4]
   3937c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   39380:	eafffa2d 	b	37c3c <McManager::sendKeyStrToTargetStatic(char const*)>
   39384:	00061b98 	.word	0x00061b98

00039388 <McTerminal::invalidateScreenCaches(bool)>:
   39388:	e3510000 	cmp	r1, #0
   3938c:	0a000007 	beq	393b0 <McTerminal::invalidateScreenCaches(bool)+0x28>
   39390:	e1a03000 	mov	r3, r0
   39394:	e3e01000 	mvn	r1, #0
   39398:	e2802bc3 	add	r2, r0, #199680	; 0x30c00
   3939c:	e2822d05 	add	r2, r2, #320	; 0x140
   393a0:	e5c310e7 	strb	r1, [r3, #231]	; 0xe7
   393a4:	e2833004 	add	r3, r3, #4
   393a8:	e1530002 	cmp	r3, r2
   393ac:	1afffffb 	bne	393a0 <McTerminal::invalidateScreenCaches(bool)+0x18>
   393b0:	e3e01000 	mvn	r1, #0
   393b4:	e59f3018 	ldr	r3, [pc, #24]	; 393d4 <McTerminal::invalidateScreenCaches(bool)+0x4c>
   393b8:	e59f2018 	ldr	r2, [pc, #24]	; 393d8 <McTerminal::invalidateScreenCaches(bool)+0x50>
   393bc:	e0803003 	add	r3, r0, r3
   393c0:	e0802002 	add	r2, r0, r2
   393c4:	e4c31004 	strb	r1, [r3], #4
   393c8:	e1530002 	cmp	r3, r2
   393cc:	1afffffc 	bne	393c4 <McTerminal::invalidateScreenCaches(bool)+0x3c>
   393d0:	e12fff1e 	bx	lr
   393d4:	00030e27 	.word	0x00030e27
   393d8:	00061b67 	.word	0x00061b67

000393dc <McTerminal::setupMachine(char const*, char const*)>:
   393dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   393e0:	e1a04000 	mov	r4, r0
   393e4:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
   393e8:	e1a05002 	mov	r5, r2
   393ec:	eb000130 	bl	398b4 <McBase::setupMachine(char const*, char const*)>
   393f0:	e3a01001 	mov	r1, #1
   393f4:	e3a02000 	mov	r2, #0
   393f8:	e5943000 	ldr	r3, [r4]
   393fc:	e59f7138 	ldr	r7, [pc, #312]	; 3953c <McTerminal::setupMachine(char const*, char const*)+0x160>
   39400:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   39404:	e2846a61 	add	r6, r4, #397312	; 0x61000
   39408:	e1530007 	cmp	r3, r7
   3940c:	e5c62b87 	strb	r2, [r6, #2951]	; 0xb87
   39410:	e5c61b84 	strb	r1, [r6, #2948]	; 0xb84
   39414:	e1a08000 	mov	r8, r0
   39418:	05c410a8 	strbeq	r1, [r4, #168]	; 0xa8
   3941c:	1a000043 	bne	39530 <McTerminal::setupMachine(char const*, char const*)+0x154>
   39420:	e28d2008 	add	r2, sp, #8
   39424:	e3a03064 	mov	r3, #100	; 0x64
   39428:	e1a01005 	mov	r1, r5
   3942c:	e59f010c 	ldr	r0, [pc, #268]	; 39540 <McTerminal::setupMachine(char const*, char const*)+0x164>
   39430:	ebffd3b2 	bl	2e300 <jsonGetValueForKey>
   39434:	e3500000 	cmp	r0, #0
   39438:	1a000019 	bne	394a4 <McTerminal::setupMachine(char const*, char const*)+0xc8>
   3943c:	e1a01005 	mov	r1, r5
   39440:	e28d206c 	add	r2, sp, #108	; 0x6c
   39444:	e3a03064 	mov	r3, #100	; 0x64
   39448:	e59f00f4 	ldr	r0, [pc, #244]	; 39544 <McTerminal::setupMachine(char const*, char const*)+0x168>
   3944c:	ebffd3ab 	bl	2e300 <jsonGetValueForKey>
   39450:	e3500000 	cmp	r0, #0
   39454:	e59f90ec 	ldr	r9, [pc, #236]	; 39548 <McTerminal::setupMachine(char const*, char const*)+0x16c>
   39458:	1a000023 	bne	394ec <McTerminal::setupMachine(char const*, char const*)+0x110>
   3945c:	e59fa0e8 	ldr	sl, [pc, #232]	; 3954c <McTerminal::setupMachine(char const*, char const*)+0x170>
   39460:	ebffb5dd 	bl	26bdc <CLogger::Get()>
   39464:	e5d6cb84 	ldrb	ip, [r6, #2948]	; 0xb84
   39468:	e59f10e0 	ldr	r1, [pc, #224]	; 39550 <McTerminal::setupMachine(char const*, char const*)+0x174>
   3946c:	e35c0000 	cmp	ip, #0
   39470:	e59f30dc 	ldr	r3, [pc, #220]	; 39554 <McTerminal::setupMachine(char const*, char const*)+0x178>
   39474:	01a03001 	moveq	r3, r1
   39478:	e59a2004 	ldr	r2, [sl, #4]
   3947c:	e58d3000 	str	r3, [sp]
   39480:	e7992102 	ldr	r2, [r9, r2, lsl #2]
   39484:	e59f30cc 	ldr	r3, [pc, #204]	; 39558 <McTerminal::setupMachine(char const*, char const*)+0x17c>
   39488:	e58d2004 	str	r2, [sp, #4]
   3948c:	e59f10c8 	ldr	r1, [pc, #200]	; 3955c <McTerminal::setupMachine(char const*, char const*)+0x180>
   39490:	e3a02004 	mov	r2, #4
   39494:	ebffb50d 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   39498:	e1a00008 	mov	r0, r8
   3949c:	e28dd0d0 	add	sp, sp, #208	; 0xd0
   394a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   394a4:	e28d0008 	add	r0, sp, #8
   394a8:	e3a0200a 	mov	r2, #10
   394ac:	e3a01000 	mov	r1, #0
   394b0:	ebffc442 	bl	2a5c0 <strtoul>
   394b4:	e3500000 	cmp	r0, #0
   394b8:	13a03001 	movne	r3, #1
   394bc:	03a03000 	moveq	r3, #0
   394c0:	e5c63b84 	strb	r3, [r6, #2948]	; 0xb84
   394c4:	1affffdc 	bne	3943c <McTerminal::setupMachine(char const*, char const*)+0x60>
   394c8:	e5943000 	ldr	r3, [r4]
   394cc:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   394d0:	e1530007 	cmp	r3, r7
   394d4:	05c400a8 	strbeq	r0, [r4, #168]	; 0xa8
   394d8:	0affffd7 	beq	3943c <McTerminal::setupMachine(char const*, char const*)+0x60>
   394dc:	e1a01000 	mov	r1, r0
   394e0:	e1a00004 	mov	r0, r4
   394e4:	e12fff33 	blx	r3
   394e8:	eaffffd3 	b	3943c <McTerminal::setupMachine(char const*, char const*)+0x60>
   394ec:	e59fa058 	ldr	sl, [pc, #88]	; 3954c <McTerminal::setupMachine(char const*, char const*)+0x170>
   394f0:	e3a04000 	mov	r4, #0
   394f4:	e1a05009 	mov	r5, r9
   394f8:	e28a7004 	add	r7, sl, #4
   394fc:	ea000000 	b	39504 <McTerminal::setupMachine(char const*, char const*)+0x128>
   39500:	e2844001 	add	r4, r4, #1
   39504:	e1a00007 	mov	r0, r7
   39508:	eb001532 	bl	3e9d8 <KeyConversion::getNumTypes()>
   3950c:	e1500004 	cmp	r0, r4
   39510:	9affffd2 	bls	39460 <McTerminal::setupMachine(char const*, char const*)+0x84>
   39514:	e4951004 	ldr	r1, [r5], #4
   39518:	e28d006c 	add	r0, sp, #108	; 0x6c
   3951c:	ebffc2ff 	bl	2a120 <strcasecmp>
   39520:	e3500000 	cmp	r0, #0
   39524:	1afffff5 	bne	39500 <McTerminal::setupMachine(char const*, char const*)+0x124>
   39528:	e58a4004 	str	r4, [sl, #4]
   3952c:	eaffffcb 	b	39460 <McTerminal::setupMachine(char const*, char const*)+0x84>
   39530:	e1a00004 	mov	r0, r4
   39534:	e12fff33 	blx	r3
   39538:	eaffffb8 	b	39420 <McTerminal::setupMachine(char const*, char const*)+0x44>
   3953c:	00038920 	.word	0x00038920
   39540:	0004743c 	.word	0x0004743c
   39544:	00047448 	.word	0x00047448
   39548:	0004e1c0 	.word	0x0004e1c0
   3954c:	000510d8 	.word	0x000510d8
   39550:	00046ac0 	.word	0x00046ac0
   39554:	00046abc 	.word	0x00046abc
   39558:	00047458 	.word	0x00047458
   3955c:	00047434 	.word	0x00047434

00039560 <McTerminal::McTerminal(McManager&, BusAccess&)>:
   39560:	e3a03002 	mov	r3, #2
   39564:	e92d4070 	push	{r4, r5, r6, lr}
   39568:	e1a04000 	mov	r4, r0
   3956c:	e24dd008 	sub	sp, sp, #8
   39570:	e58d3000 	str	r3, [sp]
   39574:	e59f3118 	ldr	r3, [pc, #280]	; 39694 <McTerminal::McTerminal(McManager&, BusAccess&)+0x134>
   39578:	eb000170 	bl	39b40 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)>
   3957c:	e1a03004 	mov	r3, r4
   39580:	e3a0c020 	mov	ip, #32
   39584:	e3a0000f 	mov	r0, #15
   39588:	e3a02000 	mov	r2, #0
   3958c:	e59fe104 	ldr	lr, [pc, #260]	; 39698 <McTerminal::McTerminal(McManager&, BusAccess&)+0x138>
   39590:	e2841bc3 	add	r1, r4, #199680	; 0x30c00
   39594:	e483e0e4 	str	lr, [r3], #228	; 0xe4
   39598:	e2811f89 	add	r1, r1, #548	; 0x224
   3959c:	e5c3c000 	strb	ip, [r3]
   395a0:	e5c30001 	strb	r0, [r3, #1]
   395a4:	e5c32002 	strb	r2, [r3, #2]
   395a8:	e5c32003 	strb	r2, [r3, #3]
   395ac:	e2833004 	add	r3, r3, #4
   395b0:	e1530001 	cmp	r3, r1
   395b4:	1afffff8 	bne	3959c <McTerminal::McTerminal(McManager&, BusAccess&)+0x3c>
   395b8:	e3a00020 	mov	r0, #32
   395bc:	e3a0c00f 	mov	ip, #15
   395c0:	e3a02000 	mov	r2, #0
   395c4:	e59f10d0 	ldr	r1, [pc, #208]	; 3969c <McTerminal::McTerminal(McManager&, BusAccess&)+0x13c>
   395c8:	e0841001 	add	r1, r4, r1
   395cc:	e5c30000 	strb	r0, [r3]
   395d0:	e5c3c001 	strb	ip, [r3, #1]
   395d4:	e5c32002 	strb	r2, [r3, #2]
   395d8:	e5c32003 	strb	r2, [r3, #3]
   395dc:	e2833004 	add	r3, r3, #4
   395e0:	e1530001 	cmp	r3, r1
   395e4:	1afffff8 	bne	395cc <McTerminal::McTerminal(McManager&, BusAccess&)+0x6c>
   395e8:	e3a0105f 	mov	r1, #95	; 0x5f
   395ec:	e59f30ac 	ldr	r3, [pc, #172]	; 396a0 <McTerminal::McTerminal(McManager&, BusAccess&)+0x140>
   395f0:	e2845a61 	add	r5, r4, #397312	; 0x61000
   395f4:	e5852b8c 	str	r2, [r5, #2956]	; 0xb8c
   395f8:	e5853b94 	str	r3, [r5, #2964]	; 0xb94
   395fc:	e5852b70 	str	r2, [r5, #2928]	; 0xb70
   39600:	e5852b74 	str	r2, [r5, #2932]	; 0xb74
   39604:	e5c52b78 	strb	r2, [r5, #2936]	; 0xb78
   39608:	e5c52b79 	strb	r2, [r5, #2937]	; 0xb79
   3960c:	e5c52b7a 	strb	r2, [r5, #2938]	; 0xb7a
   39610:	e5852b90 	str	r2, [r5, #2960]	; 0xb90
   39614:	e5851b7c 	str	r1, [r5, #2940]	; 0xb7c
   39618:	e5850b80 	str	r0, [r5, #2944]	; 0xb80
   3961c:	e59f0080 	ldr	r0, [pc, #128]	; 396a4 <McTerminal::McTerminal(McManager&, BusAccess&)+0x144>
   39620:	ebffc697 	bl	2b084 <operator new(unsigned int)>
   39624:	e1a06000 	mov	r6, r0
   39628:	eb0002c0 	bl	3a130 <TermAnsi::TermAnsi()>
   3962c:	e3a02019 	mov	r2, #25
   39630:	e3a01050 	mov	r1, #80	; 0x50
   39634:	e5856b88 	str	r6, [r5, #2952]	; 0xb88
   39638:	e1a00006 	mov	r0, r6
   3963c:	eb000a2b 	bl	3bef0 <TermAnsi::init(unsigned long, unsigned long)>
   39640:	e3e01000 	mvn	r1, #0
   39644:	e59f305c 	ldr	r3, [pc, #92]	; 396a8 <McTerminal::McTerminal(McManager&, BusAccess&)+0x148>
   39648:	e59f205c 	ldr	r2, [pc, #92]	; 396ac <McTerminal::McTerminal(McManager&, BusAccess&)+0x14c>
   3964c:	e0843003 	add	r3, r4, r3
   39650:	e0842002 	add	r2, r4, r2
   39654:	e4c31004 	strb	r1, [r3], #4
   39658:	e1530002 	cmp	r3, r2
   3965c:	1afffffc 	bne	39654 <McTerminal::McTerminal(McManager&, BusAccess&)+0xf4>
   39660:	e3a03000 	mov	r3, #0
   39664:	e3a02001 	mov	r2, #1
   39668:	e3a01f7d 	mov	r1, #500	; 0x1f4
   3966c:	e1a00004 	mov	r0, r4
   39670:	e5853b64 	str	r3, [r5, #2916]	; 0xb64
   39674:	e5c53b6c 	strb	r3, [r5, #2924]	; 0xb6c
   39678:	e5c53b87 	strb	r3, [r5, #2951]	; 0xb87
   3967c:	e5c53b86 	strb	r3, [r5, #2950]	; 0xb86
   39680:	e5851b68 	str	r1, [r5, #2920]	; 0xb68
   39684:	e5c52b84 	strb	r2, [r5, #2948]	; 0xb84
   39688:	e5c52b85 	strb	r2, [r5, #2949]	; 0xb85
   3968c:	e28dd008 	add	sp, sp, #8
   39690:	e8bd8070 	pop	{r4, r5, r6, pc}
   39694:	0004845c 	.word	0x0004845c
   39698:	000473c4 	.word	0x000473c4
   3969c:	00061b64 	.word	0x00061b64
   396a0:	00001388 	.word	0x00001388
   396a4:	000008ac 	.word	0x000008ac
   396a8:	00030e27 	.word	0x00030e27
   396ac:	00061b67 	.word	0x00061b67

000396b0 <DisplayBase::foreground(DISPLAY_FX_COLOUR)>:
   396b0:	e12fff1e 	bx	lr

000396b4 <DisplayBase::background(DISPLAY_FX_COLOUR)>:
   396b4:	e12fff1e 	bx	lr

000396b8 <TermEmu::hasChanged()>:
   396b8:	e5d0001c 	ldrb	r0, [r0, #28]
   396bc:	e12fff1e 	bx	lr

000396c0 <_GLOBAL__sub_I__ZN10McTerminal14_keyConversionE>:
   396c0:	e3a02000 	mov	r2, #0
   396c4:	e59f3004 	ldr	r3, [pc, #4]	; 396d0 <_GLOBAL__sub_I__ZN10McTerminal14_keyConversionE+0x10>
   396c8:	e5832004 	str	r2, [r3, #4]
   396cc:	e12fff1e 	bx	lr
   396d0:	000510d8 	.word	0x000510d8

000396d4 <McBase::getDescriptorTable()>:
   396d4:	e280000c 	add	r0, r0, #12
   396d8:	e12fff1e 	bx	lr

000396dc <McBase::getMachineName()>:
   396dc:	e280000c 	add	r0, r0, #12
   396e0:	e12fff1e 	bx	lr

000396e4 <McBase::machineHeartbeat()>:
   396e4:	e12fff1e 	bx	lr

000396e8 <McBase::reset(bool, bool)>:
   396e8:	e3a00000 	mov	r0, #0
   396ec:	e12fff1e 	bx	lr

000396f0 <McBase::canProcFileType(char const*)>:
   396f0:	e3a00000 	mov	r0, #0
   396f4:	e12fff1e 	bx	lr

000396f8 <McBase::getHwManager()>:
   396f8:	e5903004 	ldr	r3, [r0, #4]
   396fc:	e5930008 	ldr	r0, [r3, #8]
   39700:	e12fff1e 	bx	lr

00039704 <McBase::getTargetProgrammer()>:
   39704:	e5903004 	ldr	r3, [r0, #4]
   39708:	e5930010 	ldr	r0, [r3, #16]
   3970c:	e12fff1e 	bx	lr

00039710 <McBase::isCalled(char const*, unsigned long&)>:
   39710:	e59030d8 	ldr	r3, [r0, #216]	; 0xd8
   39714:	e3530000 	cmp	r3, #0
   39718:	0a000014 	beq	39770 <McBase::isCalled(char const*, unsigned long&)+0x60>
   3971c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   39720:	e1a08002 	mov	r8, r2
   39724:	e1a07001 	mov	r7, r1
   39728:	e1a06000 	mov	r6, r0
   3972c:	e3a04000 	mov	r4, #0
   39730:	e28050ac 	add	r5, r0, #172	; 0xac
   39734:	ea000003 	b	39748 <McBase::isCalled(char const*, unsigned long&)+0x38>
   39738:	e59630d8 	ldr	r3, [r6, #216]	; 0xd8
   3973c:	e2844001 	add	r4, r4, #1
   39740:	e1530004 	cmp	r3, r4
   39744:	9a000007 	bls	39768 <McBase::isCalled(char const*, unsigned long&)+0x58>
   39748:	e1a01007 	mov	r1, r7
   3974c:	e5b50004 	ldr	r0, [r5, #4]!
   39750:	ebffc272 	bl	2a120 <strcasecmp>
   39754:	e3500000 	cmp	r0, #0
   39758:	1afffff6 	bne	39738 <McBase::isCalled(char const*, unsigned long&)+0x28>
   3975c:	e5884000 	str	r4, [r8]
   39760:	e3a00001 	mov	r0, #1
   39764:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   39768:	e3a00000 	mov	r0, #0
   3976c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   39770:	e3a00000 	mov	r0, #0
   39774:	e12fff1e 	bx	lr

00039778 <McBase::getMachineNames(char*, unsigned long)>:
   39778:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3977c:	e3a06000 	mov	r6, #0
   39780:	e5c16000 	strb	r6, [r1]
   39784:	e59030d8 	ldr	r3, [r0, #216]	; 0xd8
   39788:	e1530006 	cmp	r3, r6
   3978c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   39790:	e1a05002 	mov	r5, r2
   39794:	e1a09000 	mov	r9, r0
   39798:	e1a04001 	mov	r4, r1
   3979c:	e59f705c 	ldr	r7, [pc, #92]	; 39800 <McBase::getMachineNames(char*, unsigned long)+0x88>
   397a0:	e59fa05c 	ldr	sl, [pc, #92]	; 39804 <McBase::getMachineNames(char*, unsigned long)+0x8c>
   397a4:	e28080ac 	add	r8, r0, #172	; 0xac
   397a8:	e1a02005 	mov	r2, r5
   397ac:	e1a01007 	mov	r1, r7
   397b0:	e1a00004 	mov	r0, r4
   397b4:	ebffd237 	bl	2e098 <strlcat>
   397b8:	e1a02005 	mov	r2, r5
   397bc:	e5b81004 	ldr	r1, [r8, #4]!
   397c0:	e1a00004 	mov	r0, r4
   397c4:	ebffd233 	bl	2e098 <strlcat>
   397c8:	e1a02005 	mov	r2, r5
   397cc:	e1a01007 	mov	r1, r7
   397d0:	e1a00004 	mov	r0, r4
   397d4:	ebffd22f 	bl	2e098 <strlcat>
   397d8:	e59930d8 	ldr	r3, [r9, #216]	; 0xd8
   397dc:	e2866001 	add	r6, r6, #1
   397e0:	e1560003 	cmp	r6, r3
   397e4:	2a000004 	bcs	397fc <McBase::getMachineNames(char*, unsigned long)+0x84>
   397e8:	e1a02005 	mov	r2, r5
   397ec:	e1a0100a 	mov	r1, sl
   397f0:	e1a00004 	mov	r0, r4
   397f4:	ebffd227 	bl	2e098 <strlcat>
   397f8:	eaffffea 	b	397a8 <McBase::getMachineNames(char*, unsigned long)+0x30>
   397fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39800:	0004700c 	.word	0x0004700c
   39804:	000433f8 	.word	0x000433f8

00039808 <McBase::setupDisplay(DisplayBase*)>:
   39808:	e92d4070 	push	{r4, r5, r6, lr}
   3980c:	e1a04000 	mov	r4, r0
   39810:	e1a05001 	mov	r5, r1
   39814:	e24dd018 	sub	sp, sp, #24
   39818:	e58010e0 	str	r1, [r0, #224]	; 0xe0
   3981c:	ebffb4ee 	bl	26bdc <CLogger::Get()>
   39820:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
   39824:	e5943078 	ldr	r3, [r4, #120]	; 0x78
   39828:	e59f1078 	ldr	r1, [pc, #120]	; 398a8 <McBase::setupDisplay(DisplayBase*)+0xa0>
   3982c:	e58d2004 	str	r2, [sp, #4]
   39830:	e58d3000 	str	r3, [sp]
   39834:	e3a02004 	mov	r2, #4
   39838:	e59f306c 	ldr	r3, [pc, #108]	; 398ac <McBase::setupDisplay(DisplayBase*)+0xa4>
   3983c:	ebffb423 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   39840:	e3550000 	cmp	r5, #0
   39844:	0a000004 	beq	3985c <McBase::setupDisplay(DisplayBase*)+0x54>
   39848:	e5952000 	ldr	r2, [r5]
   3984c:	e59f305c 	ldr	r3, [pc, #92]	; 398b0 <McBase::setupDisplay(DisplayBase*)+0xa8>
   39850:	e5926030 	ldr	r6, [r2, #48]	; 0x30
   39854:	e1560003 	cmp	r6, r3
   39858:	1a000001 	bne	39864 <McBase::setupDisplay(DisplayBase*)+0x5c>
   3985c:	e28dd018 	add	sp, sp, #24
   39860:	e8bd8070 	pop	{r4, r5, r6, pc}
   39864:	e594c098 	ldr	ip, [r4, #152]	; 0x98
   39868:	e2841078 	add	r1, r4, #120	; 0x78
   3986c:	e594e094 	ldr	lr, [r4, #148]	; 0x94
   39870:	e891000e 	ldm	r1, {r1, r2, r3}
   39874:	e58dc014 	str	ip, [sp, #20]
   39878:	e594c090 	ldr	ip, [r4, #144]	; 0x90
   3987c:	e58de010 	str	lr, [sp, #16]
   39880:	e1a00005 	mov	r0, r5
   39884:	e594508c 	ldr	r5, [r4, #140]	; 0x8c
   39888:	e58dc00c 	str	ip, [sp, #12]
   3988c:	e594e088 	ldr	lr, [r4, #136]	; 0x88
   39890:	e594c084 	ldr	ip, [r4, #132]	; 0x84
   39894:	e58d5008 	str	r5, [sp, #8]
   39898:	e88d5000 	stm	sp, {ip, lr}
   3989c:	e12fff36 	blx	r6
   398a0:	e28dd018 	add	sp, sp, #24
   398a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   398a8:	00047484 	.word	0x00047484
   398ac:	00047504 	.word	0x00047504
   398b0:	00039bf4 	.word	0x00039bf4

000398b4 <McBase::setupMachine(char const*, char const*)>:
   398b4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   398b8:	e3a0e000 	mov	lr, #0
   398bc:	e24dd070 	sub	sp, sp, #112	; 0x70
   398c0:	e28d3070 	add	r3, sp, #112	; 0x70
   398c4:	e590c000 	ldr	ip, [r0]
   398c8:	e523e068 	str	lr, [r3, #-104]!	; 0xffffff98
   398cc:	e1a06002 	mov	r6, r2
   398d0:	e59c5000 	ldr	r5, [ip]
   398d4:	e1a02003 	mov	r2, r3
   398d8:	e1a04000 	mov	r4, r0
   398dc:	e1a08001 	mov	r8, r1
   398e0:	e12fff35 	blx	r5
   398e4:	e2507000 	subs	r7, r0, #0
   398e8:	0a00004f 	beq	39a2c <McBase::setupMachine(char const*, char const*)+0x178>
   398ec:	e59d3008 	ldr	r3, [sp, #8]
   398f0:	e284500c 	add	r5, r4, #12
   398f4:	e283202c 	add	r2, r3, #44	; 0x2c
   398f8:	e58430dc 	str	r3, [r4, #220]	; 0xdc
   398fc:	e7941102 	ldr	r1, [r4, r2, lsl #2]
   39900:	e1a00005 	mov	r0, r5
   39904:	e3a020a4 	mov	r2, #164	; 0xa4
   39908:	ebffc404 	bl	2a920 <memcpy>
   3990c:	ebffb4b2 	bl	26bdc <CLogger::Get()>
   39910:	e5943000 	ldr	r3, [r4]
   39914:	e59f81fc 	ldr	r8, [pc, #508]	; 39b18 <McBase::setupMachine(char const*, char const*)+0x264>
   39918:	e5933008 	ldr	r3, [r3, #8]
   3991c:	e1a09000 	mov	r9, r0
   39920:	e1530008 	cmp	r3, r8
   39924:	01a00005 	moveq	r0, r5
   39928:	1a000052 	bne	39a78 <McBase::setupMachine(char const*, char const*)+0x1c4>
   3992c:	e58d0000 	str	r0, [sp]
   39930:	e59f31e4 	ldr	r3, [pc, #484]	; 39b1c <McBase::setupMachine(char const*, char const*)+0x268>
   39934:	e3a02004 	mov	r2, #4
   39938:	e59f11e0 	ldr	r1, [pc, #480]	; 39b20 <McBase::setupMachine(char const*, char const*)+0x26c>
   3993c:	e1a00009 	mov	r0, r9
   39940:	ebffb3e2 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   39944:	e5943000 	ldr	r3, [r4]
   39948:	e59f11d4 	ldr	r1, [pc, #468]	; 39b24 <McBase::setupMachine(char const*, char const*)+0x270>
   3994c:	e593201c 	ldr	r2, [r3, #28]
   39950:	e1520001 	cmp	r2, r1
   39954:	1a00003d 	bne	39a50 <McBase::setupMachine(char const*, char const*)+0x19c>
   39958:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   3995c:	e59f91c4 	ldr	r9, [pc, #452]	; 39b28 <McBase::setupMachine(char const*, char const*)+0x274>
   39960:	e1530009 	cmp	r3, r9
   39964:	1a000040 	bne	39a6c <McBase::setupMachine(char const*, char const*)+0x1b8>
   39968:	e5943004 	ldr	r3, [r4, #4]
   3996c:	e5930008 	ldr	r0, [r3, #8]
   39970:	ebffee70 	bl	35338 <HwManager::disableAll()>
   39974:	e5943000 	ldr	r3, [r4]
   39978:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   3997c:	e1530009 	cmp	r3, r9
   39980:	1a00005a 	bne	39af0 <McBase::setupMachine(char const*, char const*)+0x23c>
   39984:	e5943004 	ldr	r3, [r4, #4]
   39988:	e5930008 	ldr	r0, [r3, #8]
   3998c:	e1a02006 	mov	r2, r6
   39990:	e59f1194 	ldr	r1, [pc, #404]	; 39b2c <McBase::setupMachine(char const*, char const*)+0x278>
   39994:	ebffef3f 	bl	35698 <HwManager::setupFromJson(char const*, char const*)>
   39998:	e594c004 	ldr	ip, [r4, #4]
   3999c:	e1a01006 	mov	r1, r6
   399a0:	e28d200c 	add	r2, sp, #12
   399a4:	e3a03064 	mov	r3, #100	; 0x64
   399a8:	e59f0180 	ldr	r0, [pc, #384]	; 39b30 <McBase::setupMachine(char const*, char const*)+0x27c>
   399ac:	e59c600c 	ldr	r6, [ip, #12]
   399b0:	e59490a0 	ldr	r9, [r4, #160]	; 0xa0
   399b4:	ebffd251 	bl	2e300 <jsonGetValueForKey>
   399b8:	e3500000 	cmp	r0, #0
   399bc:	1a00003d 	bne	39ab8 <McBase::setupMachine(char const*, char const*)+0x204>
   399c0:	e1a00006 	mov	r0, r6
   399c4:	ebffe5d8 	bl	3312c <BusAccess::clockGetMinFreqHz()>
   399c8:	e1590000 	cmp	r9, r0
   399cc:	2a00002c 	bcs	39a84 <McBase::setupMachine(char const*, char const*)+0x1d0>
   399d0:	e1a00006 	mov	r0, r6
   399d4:	e3a01000 	mov	r1, #0
   399d8:	ebffe55e 	bl	32f58 <BusAccess::clockEnable(bool)>
   399dc:	e5943000 	ldr	r3, [r4]
   399e0:	e59f214c 	ldr	r2, [pc, #332]	; 39b34 <McBase::setupMachine(char const*, char const*)+0x280>
   399e4:	e5933018 	ldr	r3, [r3, #24]
   399e8:	e1530002 	cmp	r3, r2
   399ec:	1a000046 	bne	39b0c <McBase::setupMachine(char const*, char const*)+0x258>
   399f0:	ebffb479 	bl	26bdc <CLogger::Get()>
   399f4:	e5943000 	ldr	r3, [r4]
   399f8:	e1a06000 	mov	r6, r0
   399fc:	e5933008 	ldr	r3, [r3, #8]
   39a00:	e1530008 	cmp	r3, r8
   39a04:	1a00003c 	bne	39afc <McBase::setupMachine(char const*, char const*)+0x248>
   39a08:	e1a00006 	mov	r0, r6
   39a0c:	e58d5000 	str	r5, [sp]
   39a10:	e59f3120 	ldr	r3, [pc, #288]	; 39b38 <McBase::setupMachine(char const*, char const*)+0x284>
   39a14:	e3a02004 	mov	r2, #4
   39a18:	e59f1100 	ldr	r1, [pc, #256]	; 39b20 <McBase::setupMachine(char const*, char const*)+0x26c>
   39a1c:	ebffb3ab 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   39a20:	e1a00007 	mov	r0, r7
   39a24:	e28dd070 	add	sp, sp, #112	; 0x70
   39a28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39a2c:	ebffb46a 	bl	26bdc <CLogger::Get()>
   39a30:	e58d8000 	str	r8, [sp]
   39a34:	e59f3100 	ldr	r3, [pc, #256]	; 39b3c <McBase::setupMachine(char const*, char const*)+0x288>
   39a38:	e3a02002 	mov	r2, #2
   39a3c:	e59f10dc 	ldr	r1, [pc, #220]	; 39b20 <McBase::setupMachine(char const*, char const*)+0x26c>
   39a40:	ebffb3a2 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   39a44:	e1a00007 	mov	r0, r7
   39a48:	e28dd070 	add	sp, sp, #112	; 0x70
   39a4c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39a50:	e1a00004 	mov	r0, r4
   39a54:	e12fff32 	blx	r2
   39a58:	e5943000 	ldr	r3, [r4]
   39a5c:	e59f90c4 	ldr	r9, [pc, #196]	; 39b28 <McBase::setupMachine(char const*, char const*)+0x274>
   39a60:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   39a64:	e1530009 	cmp	r3, r9
   39a68:	0affffbe 	beq	39968 <McBase::setupMachine(char const*, char const*)+0xb4>
   39a6c:	e1a00004 	mov	r0, r4
   39a70:	e12fff33 	blx	r3
   39a74:	eaffffbd 	b	39970 <McBase::setupMachine(char const*, char const*)+0xbc>
   39a78:	e1a00004 	mov	r0, r4
   39a7c:	e12fff33 	blx	r3
   39a80:	eaffffa9 	b	3992c <McBase::setupMachine(char const*, char const*)+0x78>
   39a84:	e1a00006 	mov	r0, r6
   39a88:	ebffe5a9 	bl	33134 <BusAccess::clockGetMaxFreqHz()>
   39a8c:	e1590000 	cmp	r9, r0
   39a90:	8affffce 	bhi	399d0 <McBase::setupMachine(char const*, char const*)+0x11c>
   39a94:	e1a00006 	mov	r0, r6
   39a98:	ebffe42d 	bl	32b54 <BusAccess::clockSetup()>
   39a9c:	e1a01009 	mov	r1, r9
   39aa0:	e1a00006 	mov	r0, r6
   39aa4:	ebffe4a3 	bl	32d38 <BusAccess::clockSetFreqHz(unsigned long)>
   39aa8:	e1a00006 	mov	r0, r6
   39aac:	e3a01001 	mov	r1, #1
   39ab0:	ebffe528 	bl	32f58 <BusAccess::clockEnable(bool)>
   39ab4:	eaffffc8 	b	399dc <McBase::setupMachine(char const*, char const*)+0x128>
   39ab8:	e3a0200a 	mov	r2, #10
   39abc:	e3a01000 	mov	r1, #0
   39ac0:	e28d000c 	add	r0, sp, #12
   39ac4:	ebffc2bd 	bl	2a5c0 <strtoul>
   39ac8:	e1a0a000 	mov	sl, r0
   39acc:	e1a00006 	mov	r0, r6
   39ad0:	ebffe595 	bl	3312c <BusAccess::clockGetMinFreqHz()>
   39ad4:	e15a0000 	cmp	sl, r0
   39ad8:	3affffb8 	bcc	399c0 <McBase::setupMachine(char const*, char const*)+0x10c>
   39adc:	e1a00006 	mov	r0, r6
   39ae0:	ebffe593 	bl	33134 <BusAccess::clockGetMaxFreqHz()>
   39ae4:	e15a0000 	cmp	sl, r0
   39ae8:	91a0900a 	movls	r9, sl
   39aec:	eaffffb3 	b	399c0 <McBase::setupMachine(char const*, char const*)+0x10c>
   39af0:	e1a00004 	mov	r0, r4
   39af4:	e12fff33 	blx	r3
   39af8:	eaffffa3 	b	3998c <McBase::setupMachine(char const*, char const*)+0xd8>
   39afc:	e1a00004 	mov	r0, r4
   39b00:	e12fff33 	blx	r3
   39b04:	e1a05000 	mov	r5, r0
   39b08:	eaffffbe 	b	39a08 <McBase::setupMachine(char const*, char const*)+0x154>
   39b0c:	e1a00004 	mov	r0, r4
   39b10:	e12fff33 	blx	r3
   39b14:	eaffffb5 	b	399f0 <McBase::setupMachine(char const*, char const*)+0x13c>
   39b18:	000396dc 	.word	0x000396dc
   39b1c:	00047548 	.word	0x00047548
   39b20:	00047484 	.word	0x00047484
   39b24:	00039bfc 	.word	0x00039bfc
   39b28:	000396f8 	.word	0x000396f8
   39b2c:	00047558 	.word	0x00047558
   39b30:	0004701c 	.word	0x0004701c
   39b34:	00039bf8 	.word	0x00039bf8
   39b38:	0004755c 	.word	0x0004755c
   39b3c:	00047524 	.word	0x00047524

00039b40 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)>:
   39b40:	e92d4070 	push	{r4, r5, r6, lr}
   39b44:	e1a06001 	mov	r6, r1
   39b48:	e59d4010 	ldr	r4, [sp, #16]
   39b4c:	e59f1098 	ldr	r1, [pc, #152]	; 39bec <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0xac>
   39b50:	e3540000 	cmp	r4, #0
   39b54:	e1a05000 	mov	r5, r0
   39b58:	e5802008 	str	r2, [r0, #8]
   39b5c:	e8800042 	stm	r0, {r1, r6}
   39b60:	0a000019 	beq	39bcc <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0x8c>
   39b64:	e1a0c003 	mov	ip, r3
   39b68:	e3a02000 	mov	r2, #0
   39b6c:	e280e0ac 	add	lr, r0, #172	; 0xac
   39b70:	e2822001 	add	r2, r2, #1
   39b74:	e3520009 	cmp	r2, #9
   39b78:	93a00000 	movls	r0, #0
   39b7c:	83a00001 	movhi	r0, #1
   39b80:	e1540002 	cmp	r4, r2
   39b84:	93800001 	orrls	r0, r0, #1
   39b88:	e3500000 	cmp	r0, #0
   39b8c:	e5aec004 	str	ip, [lr, #4]!
   39b90:	e28cc0a4 	add	ip, ip, #164	; 0xa4
   39b94:	0afffff5 	beq	39b70 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0x30>
   39b98:	e3a02000 	mov	r2, #0
   39b9c:	e58540d8 	str	r4, [r5, #216]	; 0xd8
   39ba0:	e58520e0 	str	r2, [r5, #224]	; 0xe0
   39ba4:	e58520dc 	str	r2, [r5, #220]	; 0xdc
   39ba8:	e1a01003 	mov	r1, r3
   39bac:	e3a020a4 	mov	r2, #164	; 0xa4
   39bb0:	e285000c 	add	r0, r5, #12
   39bb4:	ebffc359 	bl	2a920 <memcpy>
   39bb8:	e1a00006 	mov	r0, r6
   39bbc:	e1a01005 	mov	r1, r5
   39bc0:	ebfff69c 	bl	37638 <McManager::add(McBase*)>
   39bc4:	e1a00005 	mov	r0, r5
   39bc8:	e8bd8070 	pop	{r4, r5, r6, pc}
   39bcc:	e58040d8 	str	r4, [r0, #216]	; 0xd8
   39bd0:	e58040e0 	str	r4, [r0, #224]	; 0xe0
   39bd4:	e58040dc 	str	r4, [r0, #220]	; 0xdc
   39bd8:	e3a020a4 	mov	r2, #164	; 0xa4
   39bdc:	e59f100c 	ldr	r1, [pc, #12]	; 39bf0 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0xb0>
   39be0:	e280000c 	add	r0, r0, #12
   39be4:	ebffc34d 	bl	2a920 <memcpy>
   39be8:	eafffff2 	b	39bb8 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0x78>
   39bec:	00047494 	.word	0x00047494
   39bf0:	000485a4 	.word	0x000485a4

00039bf4 <DisplayBase::targetLayout(int, int, int, int, int, int, WgfxFont*, int, int)>:
   39bf4:	e12fff1e 	bx	lr

00039bf8 <McBase::enableMachine()>:
   39bf8:	e12fff1e 	bx	lr

00039bfc <McBase::disableMachine()>:
   39bfc:	e12fff1e 	bx	lr

00039c00 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)>:
   39c00:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39c04:	e1a04001 	mov	r4, r1
   39c08:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   39c0c:	e3a0100c 	mov	r1, #12
   39c10:	e1a05000 	mov	r5, r0
   39c14:	e1a00004 	mov	r0, r4
   39c18:	e1a07002 	mov	r7, r2
   39c1c:	eb000b43 	bl	3c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39c20:	e1a00004 	mov	r0, r4
   39c24:	e59f1450 	ldr	r1, [pc, #1104]	; 3a07c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x47c>
   39c28:	eb000b31 	bl	3c8f4 <Display::consolePut(char const*)>
   39c2c:	e1a00004 	mov	r0, r4
   39c30:	e3a0100f 	mov	r1, #15
   39c34:	eb000b3d 	bl	3c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39c38:	e59fb440 	ldr	fp, [pc, #1088]	; 3a080 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x480>
   39c3c:	e1a00004 	mov	r0, r4
   39c40:	e59f143c 	ldr	r1, [pc, #1084]	; 3a084 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x484>
   39c44:	eb000b2a 	bl	3c8f4 <Display::consolePut(char const*)>
   39c48:	e1a00004 	mov	r0, r4
   39c4c:	e59f1434 	ldr	r1, [pc, #1076]	; 3a088 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x488>
   39c50:	eb000b27 	bl	3c8f4 <Display::consolePut(char const*)>
   39c54:	e1a0e00b 	mov	lr, fp
   39c58:	e3a06000 	mov	r6, #0
   39c5c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   39c60:	e28dc010 	add	ip, sp, #16
   39c64:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   39c68:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
   39c6c:	e1a08006 	mov	r8, r6
   39c70:	e88c000f 	stm	ip, {r0, r1, r2, r3}
   39c74:	e1a09006 	mov	r9, r6
   39c78:	ebffd0b0 	bl	2df40 <millis>
   39c7c:	e1a00005 	mov	r0, r5
   39c80:	e2499001 	sub	r9, r9, #1
   39c84:	ebff3e7b 	bl	9678 <BusRaiderApp::selfTestHelperService()>
   39c88:	e3590006 	cmp	r9, #6
   39c8c:	979ff109 	ldrls	pc, [pc, r9, lsl #2]
   39c90:	ea00005c 	b	39e08 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x208>
   39c94:	00039e1c 	.word	0x00039e1c
   39c98:	00039cc8 	.word	0x00039cc8
   39c9c:	00039cec 	.word	0x00039cec
   39ca0:	00039d04 	.word	0x00039d04
   39ca4:	00039d4c 	.word	0x00039d4c
   39ca8:	00039f1c 	.word	0x00039f1c
   39cac:	00039d90 	.word	0x00039d90
   39cb0:	e59f13d4 	ldr	r1, [pc, #980]	; 3a08c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x48c>
   39cb4:	e1a00004 	mov	r0, r4
   39cb8:	eb000b0d 	bl	3c8f4 <Display::consolePut(char const*)>
   39cbc:	ebffd09f 	bl	2df40 <millis>
   39cc0:	e1a00005 	mov	r0, r5
   39cc4:	ebff3e6b 	bl	9678 <BusRaiderApp::selfTestHelperService()>
   39cc8:	e3a01005 	mov	r1, #5
   39ccc:	e1a00007 	mov	r0, r7
   39cd0:	ebffe9c8 	bl	343f8 <BusAccess::rawBusControlMuxSet(unsigned long)>
   39cd4:	e59f03b4 	ldr	r0, [pc, #948]	; 3a090 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x490>
   39cd8:	ebffd09f 	bl	2df5c <microsDelay>
   39cdc:	e1a00007 	mov	r0, r7
   39ce0:	ebffe9d7 	bl	34444 <BusAccess::rawBusControlMuxClear()>
   39ce4:	e1a00005 	mov	r0, r5
   39ce8:	ebff3e62 	bl	9678 <BusRaiderApp::selfTestHelperService()>
   39cec:	e1a00007 	mov	r0, r7
   39cf0:	ebffe699 	bl	3375c <BusAccess::controlRequestAndTake()>
   39cf4:	e3500000 	cmp	r0, #0
   39cf8:	1a00005c 	bne	39e70 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x270>
   39cfc:	e1a00005 	mov	r0, r5
   39d00:	ebff3e5c 	bl	9678 <BusRaiderApp::selfTestHelperService()>
   39d04:	e28d30f8 	add	r3, sp, #248	; 0xf8
   39d08:	e0832186 	add	r2, r3, r6, lsl #3
   39d0c:	e51210e4 	ldr	r1, [r2, #-228]	; 0xffffff1c
   39d10:	e51230e8 	ldr	r3, [r2, #-232]	; 0xffffff18
   39d14:	e28d9030 	add	r9, sp, #48	; 0x30
   39d18:	e0832001 	add	r2, r3, r1
   39d1c:	e2422001 	sub	r2, r2, #1
   39d20:	e58d1004 	str	r1, [sp, #4]
   39d24:	e58d2000 	str	r2, [sp]
   39d28:	e3a010c8 	mov	r1, #200	; 0xc8
   39d2c:	e1a00009 	mov	r0, r9
   39d30:	e59f235c 	ldr	r2, [pc, #860]	; 3a094 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x494>
   39d34:	ebffd132 	bl	2e204 <snprintf>
   39d38:	e1a01009 	mov	r1, r9
   39d3c:	e1a00004 	mov	r0, r4
   39d40:	eb000aeb 	bl	3c8f4 <Display::consolePut(char const*)>
   39d44:	e1a00005 	mov	r0, r5
   39d48:	ebff3e4a 	bl	9678 <BusRaiderApp::selfTestHelperService()>
   39d4c:	e1a00005 	mov	r0, r5
   39d50:	ebff3e49 	bl	967c <BusRaiderApp::selfTestKeyboardGet()>
   39d54:	e6af9070 	sxtb	r9, r0
   39d58:	e1a00009 	mov	r0, r9
   39d5c:	ebffd25e 	bl	2e6dc <rdtolower>
   39d60:	e3500079 	cmp	r0, #121	; 0x79
   39d64:	0a000066 	beq	39f04 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x304>
   39d68:	e1a00009 	mov	r0, r9
   39d6c:	ebffd25a 	bl	2e6dc <rdtolower>
   39d70:	e350006e 	cmp	r0, #110	; 0x6e
   39d74:	1afffff2 	bne	39d44 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x144>
   39d78:	e59f1318 	ldr	r1, [pc, #792]	; 3a098 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x498>
   39d7c:	e1a00004 	mov	r0, r4
   39d80:	eb000adb 	bl	3c8f4 <Display::consolePut(char const*)>
   39d84:	ebffd06d 	bl	2df40 <millis>
   39d88:	e1a00005 	mov	r0, r5
   39d8c:	ebff3e39 	bl	9678 <BusRaiderApp::selfTestHelperService()>
   39d90:	e2866001 	add	r6, r6, #1
   39d94:	e3560003 	cmp	r6, #3
   39d98:	9affffd7 	bls	39cfc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0xfc>
   39d9c:	e1a00005 	mov	r0, r5
   39da0:	ebff3e34 	bl	9678 <BusRaiderApp::selfTestHelperService()>
   39da4:	e1a00007 	mov	r0, r7
   39da8:	ebffe545 	bl	332c4 <BusAccess::controlRelease()>
   39dac:	e3580000 	cmp	r8, #0
   39db0:	0a00007b 	beq	39fa4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x3a4>
   39db4:	e3a01009 	mov	r1, #9
   39db8:	e1a00004 	mov	r0, r4
   39dbc:	eb000adb 	bl	3c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39dc0:	e59f32d4 	ldr	r3, [pc, #724]	; 3a09c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x49c>
   39dc4:	e3580001 	cmp	r8, #1
   39dc8:	e59f22d0 	ldr	r2, [pc, #720]	; 3a0a0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4a0>
   39dcc:	01a02003 	moveq	r2, r3
   39dd0:	e3a01064 	mov	r1, #100	; 0x64
   39dd4:	e58d2000 	str	r2, [sp]
   39dd8:	e1a03008 	mov	r3, r8
   39ddc:	e28d0030 	add	r0, sp, #48	; 0x30
   39de0:	e59f22bc 	ldr	r2, [pc, #700]	; 3a0a4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4a4>
   39de4:	ebffd106 	bl	2e204 <snprintf>
   39de8:	e28d1030 	add	r1, sp, #48	; 0x30
   39dec:	e1a00004 	mov	r0, r4
   39df0:	eb000abf 	bl	3c8f4 <Display::consolePut(char const*)>
   39df4:	e1a00004 	mov	r0, r4
   39df8:	e3a0100f 	mov	r1, #15
   39dfc:	eb000acb 	bl	3c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39e00:	e28dd0fc 	add	sp, sp, #252	; 0xfc
   39e04:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39e08:	e59f1298 	ldr	r1, [pc, #664]	; 3a0a8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4a8>
   39e0c:	e1a00004 	mov	r0, r4
   39e10:	eb000ab7 	bl	3c8f4 <Display::consolePut(char const*)>
   39e14:	e1a00005 	mov	r0, r5
   39e18:	ebff3e16 	bl	9678 <BusRaiderApp::selfTestHelperService()>
   39e1c:	e1a00005 	mov	r0, r5
   39e20:	ebff3e15 	bl	967c <BusRaiderApp::selfTestKeyboardGet()>
   39e24:	e6af9070 	sxtb	r9, r0
   39e28:	e1a00009 	mov	r0, r9
   39e2c:	ebffd22a 	bl	2e6dc <rdtolower>
   39e30:	e3500079 	cmp	r0, #121	; 0x79
   39e34:	0affff9d 	beq	39cb0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0xb0>
   39e38:	e1a00009 	mov	r0, r9
   39e3c:	ebffd226 	bl	2e6dc <rdtolower>
   39e40:	e350006e 	cmp	r0, #110	; 0x6e
   39e44:	1afffff2 	bne	39e14 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x214>
   39e48:	e59f123c 	ldr	r1, [pc, #572]	; 3a08c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x48c>
   39e4c:	e1a00004 	mov	r0, r4
   39e50:	eb000aa7 	bl	3c8f4 <Display::consolePut(char const*)>
   39e54:	ebffd039 	bl	2df40 <millis>
   39e58:	e1a00005 	mov	r0, r5
   39e5c:	ebff3e05 	bl	9678 <BusRaiderApp::selfTestHelperService()>
   39e60:	e1a00007 	mov	r0, r7
   39e64:	ebffe63c 	bl	3375c <BusAccess::controlRequestAndTake()>
   39e68:	e3500000 	cmp	r0, #0
   39e6c:	0affffa2 	beq	39cfc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0xfc>
   39e70:	e1a09000 	mov	r9, r0
   39e74:	e3a01009 	mov	r1, #9
   39e78:	e1a00004 	mov	r0, r4
   39e7c:	eb000aab 	bl	3c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39e80:	e59f1224 	ldr	r1, [pc, #548]	; 3a0ac <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4ac>
   39e84:	e1a00004 	mov	r0, r4
   39e88:	eb000a99 	bl	3c8f4 <Display::consolePut(char const*)>
   39e8c:	e3590003 	cmp	r9, #3
   39e90:	908bb109 	addls	fp, fp, r9, lsl #2
   39e94:	959b1020 	ldrls	r1, [fp, #32]
   39e98:	859f1210 	ldrhi	r1, [pc, #528]	; 3a0b0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4b0>
   39e9c:	e1a00004 	mov	r0, r4
   39ea0:	eb000a93 	bl	3c8f4 <Display::consolePut(char const*)>
   39ea4:	e1a00004 	mov	r0, r4
   39ea8:	e59f1204 	ldr	r1, [pc, #516]	; 3a0b4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4b4>
   39eac:	eb000a90 	bl	3c8f4 <Display::consolePut(char const*)>
   39eb0:	e1a00004 	mov	r0, r4
   39eb4:	e59f11fc 	ldr	r1, [pc, #508]	; 3a0b8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4b8>
   39eb8:	eb000a8d 	bl	3c8f4 <Display::consolePut(char const*)>
   39ebc:	e1a00004 	mov	r0, r4
   39ec0:	e59f11f4 	ldr	r1, [pc, #500]	; 3a0bc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4bc>
   39ec4:	eb000a8a 	bl	3c8f4 <Display::consolePut(char const*)>
   39ec8:	e1a00004 	mov	r0, r4
   39ecc:	e59f11ec 	ldr	r1, [pc, #492]	; 3a0c0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4c0>
   39ed0:	eb000a87 	bl	3c8f4 <Display::consolePut(char const*)>
   39ed4:	e1a00004 	mov	r0, r4
   39ed8:	e59f11e4 	ldr	r1, [pc, #484]	; 3a0c4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4c4>
   39edc:	eb000a84 	bl	3c8f4 <Display::consolePut(char const*)>
   39ee0:	e3a0100f 	mov	r1, #15
   39ee4:	e1a00004 	mov	r0, r4
   39ee8:	eb000a90 	bl	3c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39eec:	e1a00005 	mov	r0, r5
   39ef0:	ebff3de0 	bl	9678 <BusRaiderApp::selfTestHelperService()>
   39ef4:	e1a00007 	mov	r0, r7
   39ef8:	e2888001 	add	r8, r8, #1
   39efc:	ebffe4f0 	bl	332c4 <BusAccess::controlRelease()>
   39f00:	eaffffab 	b	39db4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x1b4>
   39f04:	e59f11bc 	ldr	r1, [pc, #444]	; 3a0c8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4c8>
   39f08:	e1a00004 	mov	r0, r4
   39f0c:	eb000a78 	bl	3c8f4 <Display::consolePut(char const*)>
   39f10:	ebffd00a 	bl	2df40 <millis>
   39f14:	e1a00005 	mov	r0, r5
   39f18:	ebff3dd6 	bl	9678 <BusRaiderApp::selfTestHelperService()>
   39f1c:	e28d30f8 	add	r3, sp, #248	; 0xf8
   39f20:	e0833186 	add	r3, r3, r6, lsl #3
   39f24:	e513a0e8 	ldr	sl, [r3, #-232]	; 0xffffff18
   39f28:	e51390e4 	ldr	r9, [r3, #-228]	; 0xffffff1c
   39f2c:	e1a0100a 	mov	r1, sl
   39f30:	e1a02009 	mov	r2, r9
   39f34:	e1a00007 	mov	r0, r7
   39f38:	eb00133c 	bl	3ec30 <memTestDevice(BusAccess&, unsigned long, unsigned long)>
   39f3c:	e2503000 	subs	r3, r0, #0
   39f40:	1a00001c 	bne	39fb8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x3b8>
   39f44:	e1a02009 	mov	r2, r9
   39f48:	e1a0100a 	mov	r1, sl
   39f4c:	e1a00007 	mov	r0, r7
   39f50:	eb0012c3 	bl	3ea64 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)>
   39f54:	e2503000 	subs	r3, r0, #0
   39f58:	1a000029 	bne	3a004 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x404>
   39f5c:	e1a0100a 	mov	r1, sl
   39f60:	e1a00007 	mov	r0, r7
   39f64:	eb00129d 	bl	3e9e0 <memTestDataBus(BusAccess&, unsigned long)>
   39f68:	e250a000 	subs	sl, r0, #0
   39f6c:	128d9030 	addne	r9, sp, #48	; 0x30
   39f70:	1a000039 	bne	3a05c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x45c>
   39f74:	e1a00004 	mov	r0, r4
   39f78:	e3a0100a 	mov	r1, #10
   39f7c:	eb000a6b 	bl	3c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39f80:	e1a00004 	mov	r0, r4
   39f84:	e59f1140 	ldr	r1, [pc, #320]	; 3a0cc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4cc>
   39f88:	eb000a59 	bl	3c8f4 <Display::consolePut(char const*)>
   39f8c:	e1a00004 	mov	r0, r4
   39f90:	e3a0100f 	mov	r1, #15
   39f94:	eb000a65 	bl	3c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39f98:	e1a00005 	mov	r0, r5
   39f9c:	ebff3db5 	bl	9678 <BusRaiderApp::selfTestHelperService()>
   39fa0:	eaffff7a 	b	39d90 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x190>
   39fa4:	e3a0100a 	mov	r1, #10
   39fa8:	e1a00004 	mov	r0, r4
   39fac:	eb000a5f 	bl	3c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39fb0:	e59f1118 	ldr	r1, [pc, #280]	; 3a0d0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4d0>
   39fb4:	eaffff8c 	b	39dec <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x1ec>
   39fb8:	e3a01009 	mov	r1, #9
   39fbc:	e1a00004 	mov	r0, r4
   39fc0:	e28d9030 	add	r9, sp, #48	; 0x30
   39fc4:	e58d300c 	str	r3, [sp, #12]
   39fc8:	eb000a58 	bl	3c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39fcc:	e1a00009 	mov	r0, r9
   39fd0:	e3a01064 	mov	r1, #100	; 0x64
   39fd4:	e59d300c 	ldr	r3, [sp, #12]
   39fd8:	e59f20f4 	ldr	r2, [pc, #244]	; 3a0d4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4d4>
   39fdc:	ebffd088 	bl	2e204 <snprintf>
   39fe0:	e1a01009 	mov	r1, r9
   39fe4:	e1a00004 	mov	r0, r4
   39fe8:	eb000a41 	bl	3c8f4 <Display::consolePut(char const*)>
   39fec:	e3a0100f 	mov	r1, #15
   39ff0:	e1a00004 	mov	r0, r4
   39ff4:	e2888001 	add	r8, r8, #1
   39ff8:	eb000a4c 	bl	3c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39ffc:	e3a09007 	mov	r9, #7
   3a000:	eaffff1d 	b	39c7c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x7c>
   3a004:	e3a01009 	mov	r1, #9
   3a008:	e1a00004 	mov	r0, r4
   3a00c:	e28d9030 	add	r9, sp, #48	; 0x30
   3a010:	e58d300c 	str	r3, [sp, #12]
   3a014:	eb000a45 	bl	3c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   3a018:	e59d300c 	ldr	r3, [sp, #12]
   3a01c:	e59f20b4 	ldr	r2, [pc, #180]	; 3a0d8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4d8>
   3a020:	e3a01064 	mov	r1, #100	; 0x64
   3a024:	e1a00009 	mov	r0, r9
   3a028:	ebffd075 	bl	2e204 <snprintf>
   3a02c:	e1a01009 	mov	r1, r9
   3a030:	e1a00004 	mov	r0, r4
   3a034:	eb000a2e 	bl	3c8f4 <Display::consolePut(char const*)>
   3a038:	e3a0100f 	mov	r1, #15
   3a03c:	e1a00004 	mov	r0, r4
   3a040:	eb000a3a 	bl	3c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   3a044:	e1a0100a 	mov	r1, sl
   3a048:	e1a00007 	mov	r0, r7
   3a04c:	eb001263 	bl	3e9e0 <memTestDataBus(BusAccess&, unsigned long)>
   3a050:	e250a000 	subs	sl, r0, #0
   3a054:	e2888001 	add	r8, r8, #1
   3a058:	0affffe7 	beq	39ffc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x3fc>
   3a05c:	e3a01009 	mov	r1, #9
   3a060:	e1a00004 	mov	r0, r4
   3a064:	eb000a31 	bl	3c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   3a068:	e1a0300a 	mov	r3, sl
   3a06c:	e59f2068 	ldr	r2, [pc, #104]	; 3a0dc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4dc>
   3a070:	e3a01064 	mov	r1, #100	; 0x64
   3a074:	e1a00009 	mov	r0, r9
   3a078:	eaffffd7 	b	39fdc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x3dc>
   3a07c:	000475a8 	.word	0x000475a8
   3a080:	00047568 	.word	0x00047568
   3a084:	000475b8 	.word	0x000475b8
   3a088:	000475ec 	.word	0x000475ec
   3a08c:	00047700 	.word	0x00047700
   3a090:	000186a0 	.word	0x000186a0
   3a094:	00047780 	.word	0x00047780
   3a098:	000477f0 	.word	0x000477f0
   3a09c:	00047884 	.word	0x00047884
   3a0a0:	00044054 	.word	0x00044054
   3a0a4:	000478e0 	.word	0x000478e0
   3a0a8:	00047614 	.word	0x00047614
   3a0ac:	00047650 	.word	0x00047650
   3a0b0:	00047598 	.word	0x00047598
   3a0b4:	0004766c 	.word	0x0004766c
   3a0b8:	000476ac 	.word	0x000476ac
   3a0bc:	000476d4 	.word	0x000476d4
   3a0c0:	00047704 	.word	0x00047704
   3a0c4:	0004773c 	.word	0x0004773c
   3a0c8:	000477d8 	.word	0x000477d8
   3a0cc:	00047878 	.word	0x00047878
   3a0d0:	000478c0 	.word	0x000478c0
   3a0d4:	00047804 	.word	0x00047804
   3a0d8:	0004783c 	.word	0x0004783c
   3a0dc:	00047888 	.word	0x00047888

0003a0e0 <TermAnsi::~TermAnsi()>:
   3a0e0:	e92d4010 	push	{r4, lr}
   3a0e4:	e1a04000 	mov	r4, r0
   3a0e8:	e59f300c 	ldr	r3, [pc, #12]	; 3a0fc <TermAnsi::~TermAnsi()+0x1c>
   3a0ec:	e5803000 	str	r3, [r0]
   3a0f0:	eb0007b4 	bl	3bfc8 <TermEmu::~TermEmu()>
   3a0f4:	e1a00004 	mov	r0, r4
   3a0f8:	e8bd8010 	pop	{r4, pc}
   3a0fc:	0004793c 	.word	0x0004793c

0003a100 <TermAnsi::~TermAnsi()>:
   3a100:	e92d4010 	push	{r4, lr}
   3a104:	e1a04000 	mov	r4, r0
   3a108:	e59f3018 	ldr	r3, [pc, #24]	; 3a128 <TermAnsi::~TermAnsi()+0x28>
   3a10c:	e5803000 	str	r3, [r0]
   3a110:	eb0007ac 	bl	3bfc8 <TermEmu::~TermEmu()>
   3a114:	e1a00004 	mov	r0, r4
   3a118:	e59f100c 	ldr	r1, [pc, #12]	; 3a12c <TermAnsi::~TermAnsi()+0x2c>
   3a11c:	ebffc3e6 	bl	2b0bc <operator delete(void*, unsigned int)>
   3a120:	e1a00004 	mov	r0, r4
   3a124:	e8bd8010 	pop	{r4, pc}
   3a128:	0004793c 	.word	0x0004793c
   3a12c:	000008ac 	.word	0x000008ac

0003a130 <TermAnsi::TermAnsi()>:
   3a130:	e92d4010 	push	{r4, lr}
   3a134:	e1a04000 	mov	r4, r0
   3a138:	eb0007e4 	bl	3c0d0 <TermEmu::TermEmu()>
   3a13c:	e1a03004 	mov	r3, r4
   3a140:	e3a01020 	mov	r1, #32
   3a144:	e3a0000f 	mov	r0, #15
   3a148:	e3a02000 	mov	r2, #0
   3a14c:	e59fe06c 	ldr	lr, [pc, #108]	; 3a1c0 <TermAnsi::TermAnsi()+0x90>
   3a150:	e284ce82 	add	ip, r4, #2080	; 0x820
   3a154:	e483e05c 	str	lr, [r3], #92	; 0x5c
   3a158:	e28cc00c 	add	ip, ip, #12
   3a15c:	e5c31000 	strb	r1, [r3]
   3a160:	e5c30001 	strb	r0, [r3, #1]
   3a164:	e5c32002 	strb	r2, [r3, #2]
   3a168:	e5c32003 	strb	r2, [r3, #3]
   3a16c:	e2833004 	add	r3, r3, #4
   3a170:	e153000c 	cmp	r3, ip
   3a174:	1afffff8 	bne	3a15c <TermAnsi::TermAnsi()+0x2c>
   3a178:	e3a0305f 	mov	r3, #95	; 0x5f
   3a17c:	e5c40891 	strb	r0, [r4, #2193]	; 0x891
   3a180:	e5c40895 	strb	r0, [r4, #2197]	; 0x895
   3a184:	e5c41890 	strb	r1, [r4, #2192]	; 0x890
   3a188:	e5c42892 	strb	r2, [r4, #2194]	; 0x892
   3a18c:	e5c42893 	strb	r2, [r4, #2195]	; 0x893
   3a190:	e5c41894 	strb	r1, [r4, #2196]	; 0x894
   3a194:	e5c42896 	strb	r2, [r4, #2198]	; 0x896
   3a198:	e5c42897 	strb	r2, [r4, #2199]	; 0x897
   3a19c:	e5842898 	str	r2, [r4, #2200]	; 0x898
   3a1a0:	e584289c 	str	r2, [r4, #2204]	; 0x89c
   3a1a4:	e5c428a0 	strb	r2, [r4, #2208]	; 0x8a0
   3a1a8:	e5c428a1 	strb	r2, [r4, #2209]	; 0x8a1
   3a1ac:	e5c428a2 	strb	r2, [r4, #2210]	; 0x8a2
   3a1b0:	e58418a8 	str	r1, [r4, #2216]	; 0x8a8
   3a1b4:	e58438a4 	str	r3, [r4, #2212]	; 0x8a4
   3a1b8:	e1a00004 	mov	r0, r4
   3a1bc:	e8bd8010 	pop	{r4, pc}
   3a1c0:	0004793c 	.word	0x0004793c

0003a1c4 <TermAnsi::fixcursor()>:
   3a1c4:	e590c010 	ldr	ip, [r0, #16]
   3a1c8:	e5902018 	ldr	r2, [r0, #24]
   3a1cc:	e590100c 	ldr	r1, [r0, #12]
   3a1d0:	e5903014 	ldr	r3, [r0, #20]
   3a1d4:	e24cc001 	sub	ip, ip, #1
   3a1d8:	e152000c 	cmp	r2, ip
   3a1dc:	e2411001 	sub	r1, r1, #1
   3a1e0:	21a0200c 	movcs	r2, ip
   3a1e4:	e1530001 	cmp	r3, r1
   3a1e8:	21a03001 	movcs	r3, r1
   3a1ec:	e5802018 	str	r2, [r0, #24]
   3a1f0:	e5803014 	str	r3, [r0, #20]
   3a1f4:	e12fff1e 	bx	lr

0003a1f8 <TermAnsi::consumearg()>:
   3a1f8:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   3a1fc:	e3530007 	cmp	r3, #7
   3a200:	95902054 	ldrls	r2, [r0, #84]	; 0x54
   3a204:	92831001 	addls	r1, r3, #1
   3a208:	9283300c 	addls	r3, r3, #12
   3a20c:	95801050 	strls	r1, [r0, #80]	; 0x50
   3a210:	97802103 	strls	r2, [r0, r3, lsl #2]
   3a214:	e3a03000 	mov	r3, #0
   3a218:	e5803054 	str	r3, [r0, #84]	; 0x54
   3a21c:	e12fff1e 	bx	lr

0003a220 <TermAnsi::resetparser()>:
   3a220:	e92d4010 	push	{r4, lr}
   3a224:	e3a02020 	mov	r2, #32
   3a228:	e1a04000 	mov	r4, r0
   3a22c:	e3a01000 	mov	r1, #0
   3a230:	e2800030 	add	r0, r0, #48	; 0x30
   3a234:	ebffbf42 	bl	29f44 <memset>
   3a238:	e3a03000 	mov	r3, #0
   3a23c:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3a240:	e5843050 	str	r3, [r4, #80]	; 0x50
   3a244:	e5843054 	str	r3, [r4, #84]	; 0x54
   3a248:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   3a24c:	e8bd8010 	pop	{r4, pc}

0003a250 <TermAnsi::dirtylines(unsigned int, unsigned int)>:
   3a250:	e3a0c001 	mov	ip, #1
   3a254:	e1510002 	cmp	r1, r2
   3a258:	e5c0c01c 	strb	ip, [r0, #28]
   3a25c:	212fff1e 	bxcs	lr
   3a260:	e2813e82 	add	r3, r1, #2080	; 0x820
   3a264:	e2822e82 	add	r2, r2, #2080	; 0x820
   3a268:	e283300b 	add	r3, r3, #11
   3a26c:	e282200b 	add	r2, r2, #11
   3a270:	e0803003 	add	r3, r0, r3
   3a274:	e0802002 	add	r2, r0, r2
   3a278:	e5e3c001 	strb	ip, [r3, #1]!
   3a27c:	e1530002 	cmp	r3, r2
   3a280:	1afffffc 	bne	3a278 <TermAnsi::dirtylines(unsigned int, unsigned int)+0x28>
   3a284:	e12fff1e 	bx	lr

0003a288 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>:
   3a288:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3a28c:	e3a0e001 	mov	lr, #1
   3a290:	e5c0e01c 	strb	lr, [r0, #28]
   3a294:	e3a0e001 	mov	lr, #1
   3a298:	e590c010 	ldr	ip, [r0, #16]
   3a29c:	e15c0001 	cmp	ip, r1
   3a2a0:	924c1001 	subls	r1, ip, #1
   3a2a4:	e080c001 	add	ip, r0, r1
   3a2a8:	e1520003 	cmp	r2, r3
   3a2ac:	e5cce82c 	strb	lr, [ip, #2092]	; 0x82c
   3a2b0:	28bd80f0 	popcs	{r4, r5, r6, r7, pc}
   3a2b4:	e590c00c 	ldr	ip, [r0, #12]
   3a2b8:	e152000c 	cmp	r2, ip
   3a2bc:	33a04000 	movcc	r4, #0
   3a2c0:	33a0600f 	movcc	r6, #15
   3a2c4:	33a05020 	movcc	r5, #32
   3a2c8:	32807028 	addcc	r7, r0, #40	; 0x28
   3a2cc:	3a000003 	bcc	3a2e0 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x58>
   3a2d0:	ea000011 	b	3a31c <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x94>
   3a2d4:	e590c00c 	ldr	ip, [r0, #12]
   3a2d8:	e15c0002 	cmp	ip, r2
   3a2dc:	9a00000d 	bls	3a318 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x90>
   3a2e0:	e02e219c 	mla	lr, ip, r1, r2
   3a2e4:	e590c008 	ldr	ip, [r0, #8]
   3a2e8:	e2822001 	add	r2, r2, #1
   3a2ec:	e15e000c 	cmp	lr, ip
   3a2f0:	21a0c007 	movcs	ip, r7
   3a2f4:	3590c004 	ldrcc	ip, [r0, #4]
   3a2f8:	308cc10e 	addcc	ip, ip, lr, lsl #2
   3a2fc:	e1530002 	cmp	r3, r2
   3a300:	e5cc4003 	strb	r4, [ip, #3]
   3a304:	e5cc6001 	strb	r6, [ip, #1]
   3a308:	e5cc4002 	strb	r4, [ip, #2]
   3a30c:	e5cc5000 	strb	r5, [ip]
   3a310:	1affffef 	bne	3a2d4 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x4c>
   3a314:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3a318:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3a31c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0003a320 <TermAnsi::clearlines(unsigned int, unsigned int)>:
   3a320:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3a324:	e0816002 	add	r6, r1, r2
   3a328:	e1510006 	cmp	r1, r6
   3a32c:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   3a330:	e5903010 	ldr	r3, [r0, #16]
   3a334:	e1a04001 	mov	r4, r1
   3a338:	e1510003 	cmp	r1, r3
   3a33c:	e1a05000 	mov	r5, r0
   3a340:	33a07000 	movcc	r7, #0
   3a344:	3a000003 	bcc	3a358 <TermAnsi::clearlines(unsigned int, unsigned int)+0x38>
   3a348:	ea00000c 	b	3a380 <TermAnsi::clearlines(unsigned int, unsigned int)+0x60>
   3a34c:	e5953010 	ldr	r3, [r5, #16]
   3a350:	e1530004 	cmp	r3, r4
   3a354:	9a000008 	bls	3a37c <TermAnsi::clearlines(unsigned int, unsigned int)+0x5c>
   3a358:	e1a01004 	mov	r1, r4
   3a35c:	e595300c 	ldr	r3, [r5, #12]
   3a360:	e1a02007 	mov	r2, r7
   3a364:	e1a00005 	mov	r0, r5
   3a368:	e2844001 	add	r4, r4, #1
   3a36c:	ebffffc5 	bl	3a288 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a370:	e1540006 	cmp	r4, r6
   3a374:	1afffff4 	bne	3a34c <TermAnsi::clearlines(unsigned int, unsigned int)+0x2c>
   3a378:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3a37c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3a380:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0003a384 <TermAnsi::scrollUp(unsigned int, unsigned int)>:
   3a384:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a388:	e1e07001 	mvn	r7, r1
   3a38c:	e590c010 	ldr	ip, [r0, #16]
   3a390:	e5903004 	ldr	r3, [r0, #4]
   3a394:	e087700c 	add	r7, r7, ip
   3a398:	e1570002 	cmp	r7, r2
   3a39c:	21a07002 	movcs	r7, r2
   3a3a0:	e3530000 	cmp	r3, #0
   3a3a4:	13570000 	cmpne	r7, #0
   3a3a8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a3ac:	e590600c 	ldr	r6, [r0, #12]
   3a3b0:	e1a05000 	mov	r5, r0
   3a3b4:	e0060796 	mul	r6, r6, r7
   3a3b8:	e376022e 	cmn	r6, #-536870910	; 0xe0000002
   3a3bc:	83e03000 	mvnhi	r3, #0
   3a3c0:	91a03106 	lslls	r3, r6, #2
   3a3c4:	e1a00003 	mov	r0, r3
   3a3c8:	e1a04001 	mov	r4, r1
   3a3cc:	ebffc32d 	bl	2b088 <operator new[](unsigned int)>
   3a3d0:	e2562001 	subs	r2, r6, #1
   3a3d4:	e1a08000 	mov	r8, r0
   3a3d8:	51a03000 	movpl	r3, r0
   3a3dc:	53a0c020 	movpl	ip, #32
   3a3e0:	53a0000f 	movpl	r0, #15
   3a3e4:	53a01000 	movpl	r1, #0
   3a3e8:	4a000007 	bmi	3a40c <TermAnsi::scrollUp(unsigned int, unsigned int)+0x88>
   3a3ec:	e2422001 	sub	r2, r2, #1
   3a3f0:	e3720001 	cmn	r2, #1
   3a3f4:	e5c3c000 	strb	ip, [r3]
   3a3f8:	e5c30001 	strb	r0, [r3, #1]
   3a3fc:	e5c31002 	strb	r1, [r3, #2]
   3a400:	e5c31003 	strb	r1, [r3, #3]
   3a404:	e2833004 	add	r3, r3, #4
   3a408:	1afffff7 	bne	3a3ec <TermAnsi::scrollUp(unsigned int, unsigned int)+0x68>
   3a40c:	e595300c 	ldr	r3, [r5, #12]
   3a410:	e5951004 	ldr	r1, [r5, #4]
   3a414:	e1a06103 	lsl	r6, r3, #2
   3a418:	e0060697 	mul	r6, r7, r6
   3a41c:	e1a09104 	lsl	r9, r4, #2
   3a420:	e0211399 	mla	r1, r9, r3, r1
   3a424:	e1a02006 	mov	r2, r6
   3a428:	e1a00008 	mov	r0, r8
   3a42c:	ebffc13b 	bl	2a920 <memcpy>
   3a430:	e5952010 	ldr	r2, [r5, #16]
   3a434:	e595000c 	ldr	r0, [r5, #12]
   3a438:	e5953004 	ldr	r3, [r5, #4]
   3a43c:	e0422007 	sub	r2, r2, r7
   3a440:	e084c007 	add	ip, r4, r7
   3a444:	e1a01100 	lsl	r1, r0, #2
   3a448:	e0422004 	sub	r2, r2, r4
   3a44c:	e0020291 	mul	r2, r1, r2
   3a450:	e0203099 	mla	r0, r9, r0, r3
   3a454:	e0213c91 	mla	r1, r1, ip, r3
   3a458:	ebffbee6 	bl	29ff8 <memmove>
   3a45c:	e5953010 	ldr	r3, [r5, #16]
   3a460:	e595100c 	ldr	r1, [r5, #12]
   3a464:	e5950004 	ldr	r0, [r5, #4]
   3a468:	e0433007 	sub	r3, r3, r7
   3a46c:	e1a01101 	lsl	r1, r1, #2
   3a470:	e0200391 	mla	r0, r1, r3, r0
   3a474:	e1a02006 	mov	r2, r6
   3a478:	e1a01008 	mov	r1, r8
   3a47c:	ebffc127 	bl	2a920 <memcpy>
   3a480:	e1a00008 	mov	r0, r8
   3a484:	ebffc306 	bl	2b0a4 <operator delete[](void*)>
   3a488:	e5951010 	ldr	r1, [r5, #16]
   3a48c:	e1a02007 	mov	r2, r7
   3a490:	e0411007 	sub	r1, r1, r7
   3a494:	e1a00005 	mov	r0, r5
   3a498:	ebffffa0 	bl	3a320 <TermAnsi::clearlines(unsigned int, unsigned int)>
   3a49c:	e3a01001 	mov	r1, #1
   3a4a0:	e5952010 	ldr	r2, [r5, #16]
   3a4a4:	e5c5101c 	strb	r1, [r5, #28]
   3a4a8:	e1540002 	cmp	r4, r2
   3a4ac:	2a000009 	bcs	3a4d8 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x154>
   3a4b0:	e2843e82 	add	r3, r4, #2080	; 0x820
   3a4b4:	e2822e82 	add	r2, r2, #2080	; 0x820
   3a4b8:	e283300b 	add	r3, r3, #11
   3a4bc:	e282200b 	add	r2, r2, #11
   3a4c0:	e0853003 	add	r3, r5, r3
   3a4c4:	e0852002 	add	r2, r5, r2
   3a4c8:	e5e31001 	strb	r1, [r3, #1]!
   3a4cc:	e1520003 	cmp	r2, r3
   3a4d0:	1afffffc 	bne	3a4c8 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x144>
   3a4d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a4d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003a4dc <TermAnsi::writeCharAtCurs(int)>:
   3a4dc:	e92d4010 	push	{r4, lr}
   3a4e0:	e1a04000 	mov	r4, r0
   3a4e4:	e5903018 	ldr	r3, [r0, #24]
   3a4e8:	e590c00c 	ldr	ip, [r0, #12]
   3a4ec:	e5902014 	ldr	r2, [r0, #20]
   3a4f0:	e5900008 	ldr	r0, [r0, #8]
   3a4f4:	e022239c 	mla	r2, ip, r3, r2
   3a4f8:	e1520000 	cmp	r2, r0
   3a4fc:	35943004 	ldrcc	r3, [r4, #4]
   3a500:	22843028 	addcs	r3, r4, #40	; 0x28
   3a504:	30833102 	addcc	r3, r3, r2, lsl #2
   3a508:	e5c31000 	strb	r1, [r3]
   3a50c:	e5d42892 	ldrb	r2, [r4, #2194]	; 0x892
   3a510:	e3a00001 	mov	r0, #1
   3a514:	e5c32002 	strb	r2, [r3, #2]
   3a518:	e5d42891 	ldrb	r2, [r4, #2193]	; 0x891
   3a51c:	e5c32001 	strb	r2, [r3, #1]
   3a520:	e5d42893 	ldrb	r2, [r4, #2195]	; 0x893
   3a524:	e5c32003 	strb	r2, [r3, #3]
   3a528:	e594300c 	ldr	r3, [r4, #12]
   3a52c:	e5942014 	ldr	r2, [r4, #20]
   3a530:	e2433001 	sub	r3, r3, #1
   3a534:	e1520003 	cmp	r2, r3
   3a538:	23a02000 	movcs	r2, #0
   3a53c:	e5943018 	ldr	r3, [r4, #24]
   3a540:	30822000 	addcc	r2, r2, r0
   3a544:	e5842014 	str	r2, [r4, #20]
   3a548:	e5942010 	ldr	r2, [r4, #16]
   3a54c:	22833001 	addcs	r3, r3, #1
   3a550:	25843018 	strcs	r3, [r4, #24]
   3a554:	e1520003 	cmp	r2, r3
   3a558:	e5c4001c 	strb	r0, [r4, #28]
   3a55c:	8a000005 	bhi	3a578 <TermAnsi::writeCharAtCurs(int)+0x9c>
   3a560:	e2422001 	sub	r2, r2, #1
   3a564:	e5842018 	str	r2, [r4, #24]
   3a568:	e3a01000 	mov	r1, #0
   3a56c:	e3a02001 	mov	r2, #1
   3a570:	e1a00004 	mov	r0, r4
   3a574:	ebffff82 	bl	3a384 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3a578:	e3a03001 	mov	r3, #1
   3a57c:	e5c4301c 	strb	r3, [r4, #28]
   3a580:	e8bd8010 	pop	{r4, pc}

0003a584 <TermAnsi::scrollDown(unsigned int, unsigned int)>:
   3a584:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a588:	e1e07001 	mvn	r7, r1
   3a58c:	e590c010 	ldr	ip, [r0, #16]
   3a590:	e5903004 	ldr	r3, [r0, #4]
   3a594:	e087700c 	add	r7, r7, ip
   3a598:	e1570002 	cmp	r7, r2
   3a59c:	21a07002 	movcs	r7, r2
   3a5a0:	e3530000 	cmp	r3, #0
   3a5a4:	13570000 	cmpne	r7, #0
   3a5a8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a5ac:	e590600c 	ldr	r6, [r0, #12]
   3a5b0:	e1a05000 	mov	r5, r0
   3a5b4:	e0060796 	mul	r6, r6, r7
   3a5b8:	e376022e 	cmn	r6, #-536870910	; 0xe0000002
   3a5bc:	83e03000 	mvnhi	r3, #0
   3a5c0:	91a03106 	lslls	r3, r6, #2
   3a5c4:	e1a00003 	mov	r0, r3
   3a5c8:	e1a04001 	mov	r4, r1
   3a5cc:	ebffc2ad 	bl	2b088 <operator new[](unsigned int)>
   3a5d0:	e2562001 	subs	r2, r6, #1
   3a5d4:	e1a08000 	mov	r8, r0
   3a5d8:	51a03000 	movpl	r3, r0
   3a5dc:	53a0c020 	movpl	ip, #32
   3a5e0:	53a0000f 	movpl	r0, #15
   3a5e4:	53a01000 	movpl	r1, #0
   3a5e8:	4a000007 	bmi	3a60c <TermAnsi::scrollDown(unsigned int, unsigned int)+0x88>
   3a5ec:	e2422001 	sub	r2, r2, #1
   3a5f0:	e3720001 	cmn	r2, #1
   3a5f4:	e5c3c000 	strb	ip, [r3]
   3a5f8:	e5c30001 	strb	r0, [r3, #1]
   3a5fc:	e5c31002 	strb	r1, [r3, #2]
   3a600:	e5c31003 	strb	r1, [r3, #3]
   3a604:	e2833004 	add	r3, r3, #4
   3a608:	1afffff7 	bne	3a5ec <TermAnsi::scrollDown(unsigned int, unsigned int)+0x68>
   3a60c:	e595300c 	ldr	r3, [r5, #12]
   3a610:	e5952010 	ldr	r2, [r5, #16]
   3a614:	e1a03103 	lsl	r3, r3, #2
   3a618:	e0090793 	mul	r9, r3, r7
   3a61c:	e5951004 	ldr	r1, [r5, #4]
   3a620:	e0422007 	sub	r2, r2, r7
   3a624:	e0211293 	mla	r1, r3, r2, r1
   3a628:	e1a00008 	mov	r0, r8
   3a62c:	e1a02009 	mov	r2, r9
   3a630:	ebffc0ba 	bl	2a920 <memcpy>
   3a634:	e5952010 	ldr	r2, [r5, #16]
   3a638:	e595100c 	ldr	r1, [r5, #12]
   3a63c:	e5953004 	ldr	r3, [r5, #4]
   3a640:	e0422007 	sub	r2, r2, r7
   3a644:	e084c007 	add	ip, r4, r7
   3a648:	e1a00101 	lsl	r0, r1, #2
   3a64c:	e1a06104 	lsl	r6, r4, #2
   3a650:	e0422004 	sub	r2, r2, r4
   3a654:	e0020290 	mul	r2, r0, r2
   3a658:	e0213691 	mla	r1, r1, r6, r3
   3a65c:	e0203c90 	mla	r0, r0, ip, r3
   3a660:	ebffbe64 	bl	29ff8 <memmove>
   3a664:	e5953004 	ldr	r3, [r5, #4]
   3a668:	e595000c 	ldr	r0, [r5, #12]
   3a66c:	e1a02009 	mov	r2, r9
   3a670:	e0203690 	mla	r0, r0, r6, r3
   3a674:	e1a01008 	mov	r1, r8
   3a678:	ebffc0a8 	bl	2a920 <memcpy>
   3a67c:	e1a00008 	mov	r0, r8
   3a680:	ebffc287 	bl	2b0a4 <operator delete[](void*)>
   3a684:	e1a02007 	mov	r2, r7
   3a688:	e1a01004 	mov	r1, r4
   3a68c:	e1a00005 	mov	r0, r5
   3a690:	ebffff22 	bl	3a320 <TermAnsi::clearlines(unsigned int, unsigned int)>
   3a694:	e3a01001 	mov	r1, #1
   3a698:	e5952010 	ldr	r2, [r5, #16]
   3a69c:	e5c5101c 	strb	r1, [r5, #28]
   3a6a0:	e1540002 	cmp	r4, r2
   3a6a4:	2a000009 	bcs	3a6d0 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x14c>
   3a6a8:	e2843e82 	add	r3, r4, #2080	; 0x820
   3a6ac:	e2822e82 	add	r2, r2, #2080	; 0x820
   3a6b0:	e283300b 	add	r3, r3, #11
   3a6b4:	e282200b 	add	r2, r2, #11
   3a6b8:	e0853003 	add	r3, r5, r3
   3a6bc:	e0852002 	add	r2, r5, r2
   3a6c0:	e5e31001 	strb	r1, [r3, #1]!
   3a6c4:	e1520003 	cmp	r2, r3
   3a6c8:	1afffffc 	bne	3a6c0 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x13c>
   3a6cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a6d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003a6d4 <TermAnsi::ed()>:
   3a6d4:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3a6d8:	e92d4070 	push	{r4, r5, r6, lr}
   3a6dc:	e3530001 	cmp	r3, #1
   3a6e0:	e1a04000 	mov	r4, r0
   3a6e4:	e5906010 	ldr	r6, [r0, #16]
   3a6e8:	0a000010 	beq	3a730 <TermAnsi::ed()+0x5c>
   3a6ec:	3a000008 	bcc	3a714 <TermAnsi::ed()+0x40>
   3a6f0:	e3530002 	cmp	r3, #2
   3a6f4:	1a000005 	bne	3a710 <TermAnsi::ed()+0x3c>
   3a6f8:	e3a05000 	mov	r5, #0
   3a6fc:	e0462005 	sub	r2, r6, r5
   3a700:	e1a01005 	mov	r1, r5
   3a704:	e1a00004 	mov	r0, r4
   3a708:	e8bd4070 	pop	{r4, r5, r6, lr}
   3a70c:	eaffff03 	b	3a320 <TermAnsi::clearlines(unsigned int, unsigned int)>
   3a710:	e8bd8070 	pop	{r4, r5, r6, pc}
   3a714:	e5905018 	ldr	r5, [r0, #24]
   3a718:	e590300c 	ldr	r3, [r0, #12]
   3a71c:	e1a01005 	mov	r1, r5
   3a720:	e5902014 	ldr	r2, [r0, #20]
   3a724:	e2855001 	add	r5, r5, #1
   3a728:	ebfffed6 	bl	3a288 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a72c:	eafffff2 	b	3a6fc <TermAnsi::ed()+0x28>
   3a730:	e3a02000 	mov	r2, #0
   3a734:	e5906018 	ldr	r6, [r0, #24]
   3a738:	e5903014 	ldr	r3, [r0, #20]
   3a73c:	e1a01006 	mov	r1, r6
   3a740:	e1a05002 	mov	r5, r2
   3a744:	e2466001 	sub	r6, r6, #1
   3a748:	ebfffece 	bl	3a288 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a74c:	eaffffea 	b	3a6fc <TermAnsi::ed()+0x28>

0003a750 <TermAnsi::el()>:
   3a750:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3a754:	e3530001 	cmp	r3, #1
   3a758:	0a00000b 	beq	3a78c <TermAnsi::el()+0x3c>
   3a75c:	3a000006 	bcc	3a77c <TermAnsi::el()+0x2c>
   3a760:	e3530002 	cmp	r3, #2
   3a764:	1a000003 	bne	3a778 <TermAnsi::el()+0x28>
   3a768:	e590300c 	ldr	r3, [r0, #12]
   3a76c:	e5901018 	ldr	r1, [r0, #24]
   3a770:	e3a02000 	mov	r2, #0
   3a774:	eafffec3 	b	3a288 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a778:	e12fff1e 	bx	lr
   3a77c:	e590300c 	ldr	r3, [r0, #12]
   3a780:	e5902014 	ldr	r2, [r0, #20]
   3a784:	e5901018 	ldr	r1, [r0, #24]
   3a788:	eafffebe 	b	3a288 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a78c:	e590200c 	ldr	r2, [r0, #12]
   3a790:	e5903014 	ldr	r3, [r0, #20]
   3a794:	e2422001 	sub	r2, r2, #1
   3a798:	e2833001 	add	r3, r3, #1
   3a79c:	e1520003 	cmp	r2, r3
   3a7a0:	31a03002 	movcc	r3, r2
   3a7a4:	e5901018 	ldr	r1, [r0, #24]
   3a7a8:	e3a02000 	mov	r2, #0
   3a7ac:	eafffeb5 	b	3a288 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

0003a7b0 <TermAnsi::dch()>:
   3a7b0:	e92d4070 	push	{r4, r5, r6, lr}
   3a7b4:	e590e004 	ldr	lr, [r0, #4]
   3a7b8:	e35e0000 	cmp	lr, #0
   3a7bc:	08bd8070 	popeq	{r4, r5, r6, pc}
   3a7c0:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   3a7c4:	e1a04000 	mov	r4, r0
   3a7c8:	e35c0000 	cmp	ip, #0
   3a7cc:	03a0c001 	moveq	ip, #1
   3a7d0:	e590300c 	ldr	r3, [r0, #12]
   3a7d4:	e5900014 	ldr	r0, [r0, #20]
   3a7d8:	e1a06103 	lsl	r6, r3, #2
   3a7dc:	e0431000 	sub	r1, r3, r0
   3a7e0:	e15c0001 	cmp	ip, r1
   3a7e4:	31a0500c 	movcc	r5, ip
   3a7e8:	21a05001 	movcs	r5, r1
   3a7ec:	e594c018 	ldr	ip, [r4, #24]
   3a7f0:	e0412005 	sub	r2, r1, r5
   3a7f4:	e020039c 	mla	r0, ip, r3, r0
   3a7f8:	e0801005 	add	r1, r0, r5
   3a7fc:	e0020296 	mul	r2, r6, r2
   3a800:	e08e1101 	add	r1, lr, r1, lsl #2
   3a804:	e08e0100 	add	r0, lr, r0, lsl #2
   3a808:	ebffbdfa 	bl	29ff8 <memmove>
   3a80c:	e594200c 	ldr	r2, [r4, #12]
   3a810:	e5941014 	ldr	r1, [r4, #20]
   3a814:	e1a03002 	mov	r3, r2
   3a818:	e0422001 	sub	r2, r2, r1
   3a81c:	e0422005 	sub	r2, r2, r5
   3a820:	e5941018 	ldr	r1, [r4, #24]
   3a824:	e1a00004 	mov	r0, r4
   3a828:	e8bd4070 	pop	{r4, r5, r6, lr}
   3a82c:	eafffe95 	b	3a288 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

0003a830 <TermAnsi::ich()>:
   3a830:	e92d4070 	push	{r4, r5, r6, lr}
   3a834:	e590e004 	ldr	lr, [r0, #4]
   3a838:	e35e0000 	cmp	lr, #0
   3a83c:	08bd8070 	popeq	{r4, r5, r6, pc}
   3a840:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3a844:	e590200c 	ldr	r2, [r0, #12]
   3a848:	e3530000 	cmp	r3, #0
   3a84c:	03a03001 	moveq	r3, #1
   3a850:	e5901014 	ldr	r1, [r0, #20]
   3a854:	e1a04000 	mov	r4, r0
   3a858:	e590c018 	ldr	ip, [r0, #24]
   3a85c:	e0420001 	sub	r0, r2, r1
   3a860:	e2405001 	sub	r5, r0, #1
   3a864:	e1550003 	cmp	r5, r3
   3a868:	21a05003 	movcs	r5, r3
   3a86c:	e2400107 	sub	r0, r0, #-1073741823	; 0xc0000001
   3a870:	e0403005 	sub	r3, r0, r5
   3a874:	e1a03103 	lsl	r3, r3, #2
   3a878:	e1a00100 	lsl	r0, r0, #2
   3a87c:	e1530000 	cmp	r3, r0
   3a880:	21a03000 	movcs	r3, r0
   3a884:	e021129c 	mla	r1, ip, r2, r1
   3a888:	e0810005 	add	r0, r1, r5
   3a88c:	e0020392 	mul	r2, r2, r3
   3a890:	e08e1101 	add	r1, lr, r1, lsl #2
   3a894:	e08e0100 	add	r0, lr, r0, lsl #2
   3a898:	ebffbdd6 	bl	29ff8 <memmove>
   3a89c:	e1a03005 	mov	r3, r5
   3a8a0:	e5942014 	ldr	r2, [r4, #20]
   3a8a4:	e5941018 	ldr	r1, [r4, #24]
   3a8a8:	e1a00004 	mov	r0, r4
   3a8ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   3a8b0:	eafffe74 	b	3a288 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

0003a8b4 <TermAnsi::rep()>:
   3a8b4:	e5902014 	ldr	r2, [r0, #20]
   3a8b8:	e3520000 	cmp	r2, #0
   3a8bc:	012fff1e 	bxeq	lr
   3a8c0:	e92d4070 	push	{r4, r5, r6, lr}
   3a8c4:	e1a05000 	mov	r5, r0
   3a8c8:	e3a04000 	mov	r4, #0
   3a8cc:	e5903018 	ldr	r3, [r0, #24]
   3a8d0:	e590000c 	ldr	r0, [r0, #12]
   3a8d4:	e5951004 	ldr	r1, [r5, #4]
   3a8d8:	e0232390 	mla	r3, r0, r3, r2
   3a8dc:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   3a8e0:	e7d16103 	ldrb	r6, [r1, r3, lsl #2]
   3a8e4:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   3a8e8:	e3530000 	cmp	r3, #0
   3a8ec:	03a03001 	moveq	r3, #1
   3a8f0:	e1540003 	cmp	r4, r3
   3a8f4:	28bd8070 	popcs	{r4, r5, r6, pc}
   3a8f8:	e1a01006 	mov	r1, r6
   3a8fc:	e1a00005 	mov	r0, r5
   3a900:	e2844001 	add	r4, r4, #1
   3a904:	ebfffef4 	bl	3a4dc <TermAnsi::writeCharAtCurs(int)>
   3a908:	eafffff5 	b	3a8e4 <TermAnsi::rep()+0x30>

0003a90c <TermAnsi::sgr()>:
   3a90c:	e590c050 	ldr	ip, [r0, #80]	; 0x50
   3a910:	e35c0000 	cmp	ip, #0
   3a914:	0a00004d 	beq	3aa50 <TermAnsi::sgr()+0x144>
   3a918:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a91c:	e590e030 	ldr	lr, [r0, #48]	; 0x30
   3a920:	e24e301e 	sub	r3, lr, #30
   3a924:	e3530012 	cmp	r3, #18
   3a928:	9a00004b 	bls	3aa5c <TermAnsi::sgr()+0x150>
   3a92c:	e35e0013 	cmp	lr, #19
   3a930:	93a0a020 	movls	sl, #32
   3a934:	83a0a000 	movhi	sl, #0
   3a938:	93a09010 	movls	r9, #16
   3a93c:	83a09000 	movhi	r9, #0
   3a940:	93a08008 	movls	r8, #8
   3a944:	83a08000 	movhi	r8, #0
   3a948:	93a07004 	movls	r7, #4
   3a94c:	83a07000 	movhi	r7, #0
   3a950:	93a06002 	movls	r6, #2
   3a954:	83a06000 	movhi	r6, #0
   3a958:	e1a0300e 	mov	r3, lr
   3a95c:	e3a0500f 	mov	r5, #15
   3a960:	e3a04000 	mov	r4, #0
   3a964:	e28cc00c 	add	ip, ip, #12
   3a968:	e5d01893 	ldrb	r1, [r0, #2195]	; 0x893
   3a96c:	e080c10c 	add	ip, r0, ip, lsl #2
   3a970:	e2802034 	add	r2, r0, #52	; 0x34
   3a974:	e353001c 	cmp	r3, #28
   3a978:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3a97c:	ea00001d 	b	3a9f8 <TermAnsi::sgr()+0xec>
   3a980:	0003aa30 	.word	0x0003aa30
   3a984:	0003aa24 	.word	0x0003aa24
   3a988:	0003aa48 	.word	0x0003aa48
   3a98c:	0003a9f8 	.word	0x0003a9f8
   3a990:	0003aa40 	.word	0x0003aa40
   3a994:	0003aa1c 	.word	0x0003aa1c
   3a998:	0003a9f8 	.word	0x0003a9f8
   3a99c:	0003aa08 	.word	0x0003aa08
   3a9a0:	0003a9f4 	.word	0x0003a9f4
   3a9a4:	0003a9f8 	.word	0x0003a9f8
   3a9a8:	0003a9f8 	.word	0x0003a9f8
   3a9ac:	0003a9f8 	.word	0x0003a9f8
   3a9b0:	0003a9f8 	.word	0x0003a9f8
   3a9b4:	0003a9f8 	.word	0x0003a9f8
   3a9b8:	0003a9f8 	.word	0x0003a9f8
   3a9bc:	0003a9f8 	.word	0x0003a9f8
   3a9c0:	0003a9f8 	.word	0x0003a9f8
   3a9c4:	0003a9f8 	.word	0x0003a9f8
   3a9c8:	0003a9f8 	.word	0x0003a9f8
   3a9cc:	0003a9f8 	.word	0x0003a9f8
   3a9d0:	0003a9f8 	.word	0x0003a9f8
   3a9d4:	0003a9f8 	.word	0x0003a9f8
   3a9d8:	0003aa24 	.word	0x0003aa24
   3a9dc:	0003aa48 	.word	0x0003aa48
   3a9e0:	0003aa40 	.word	0x0003aa40
   3a9e4:	0003aa1c 	.word	0x0003aa1c
   3a9e8:	0003a9f8 	.word	0x0003a9f8
   3a9ec:	0003aa08 	.word	0x0003aa08
   3a9f0:	0003a9f4 	.word	0x0003a9f4
   3a9f4:	e18a1001 	orr	r1, sl, r1
   3a9f8:	e152000c 	cmp	r2, ip
   3a9fc:	0a000004 	beq	3aa14 <TermAnsi::sgr()+0x108>
   3aa00:	e4923004 	ldr	r3, [r2], #4
   3aa04:	eaffffda 	b	3a974 <TermAnsi::sgr()+0x68>
   3aa08:	e152000c 	cmp	r2, ip
   3aa0c:	e1891001 	orr	r1, r9, r1
   3aa10:	1afffffa 	bne	3aa00 <TermAnsi::sgr()+0xf4>
   3aa14:	e5c01893 	strb	r1, [r0, #2195]	; 0x893
   3aa18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3aa1c:	e1881001 	orr	r1, r8, r1
   3aa20:	eafffff4 	b	3a9f8 <TermAnsi::sgr()+0xec>
   3aa24:	e35e0013 	cmp	lr, #19
   3aa28:	93811001 	orrls	r1, r1, #1
   3aa2c:	eafffff1 	b	3a9f8 <TermAnsi::sgr()+0xec>
   3aa30:	e5c05891 	strb	r5, [r0, #2193]	; 0x891
   3aa34:	e5c04892 	strb	r4, [r0, #2194]	; 0x892
   3aa38:	e3a01000 	mov	r1, #0
   3aa3c:	eaffffed 	b	3a9f8 <TermAnsi::sgr()+0xec>
   3aa40:	e1871001 	orr	r1, r7, r1
   3aa44:	eaffffeb 	b	3a9f8 <TermAnsi::sgr()+0xec>
   3aa48:	e1861001 	orr	r1, r6, r1
   3aa4c:	eaffffe9 	b	3a9f8 <TermAnsi::sgr()+0xec>
   3aa50:	e5d01893 	ldrb	r1, [r0, #2195]	; 0x893
   3aa54:	e5c01893 	strb	r1, [r0, #2195]	; 0x893
   3aa58:	e12fff1e 	bx	lr
   3aa5c:	e35c0001 	cmp	ip, #1
   3aa60:	0a00000d 	beq	3aa9c <TermAnsi::sgr()+0x190>
   3aa64:	e35c0002 	cmp	ip, #2
   3aa68:	0a000016 	beq	3aac8 <TermAnsi::sgr()+0x1bc>
   3aa6c:	e35c0003 	cmp	ip, #3
   3aa70:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   3aa74:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   3aa78:	e3530005 	cmp	r3, #5
   3aa7c:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   3aa80:	e2803e89 	add	r3, r0, #2192	; 0x890
   3aa84:	e35e0027 	cmp	lr, #39	; 0x27
   3aa88:	e5902038 	ldr	r2, [r0, #56]	; 0x38
   3aa8c:	92833001 	addls	r3, r3, #1
   3aa90:	82833002 	addhi	r3, r3, #2
   3aa94:	e5c32000 	strb	r2, [r3]
   3aa98:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3aa9c:	e59f2060 	ldr	r2, [pc, #96]	; 3ab04 <TermAnsi::sgr()+0x1f8>
   3aaa0:	e2801e89 	add	r1, r0, #2192	; 0x890
   3aaa4:	e0820392 	umull	r0, r2, r2, r3
   3aaa8:	e1a021a2 	lsr	r2, r2, #3
   3aaac:	e35e0027 	cmp	lr, #39	; 0x27
   3aab0:	e0822102 	add	r2, r2, r2, lsl #2
   3aab4:	92811001 	addls	r1, r1, #1
   3aab8:	82811002 	addhi	r1, r1, #2
   3aabc:	e0433082 	sub	r3, r3, r2, lsl #1
   3aac0:	e5c13000 	strb	r3, [r1]
   3aac4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3aac8:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   3aacc:	e3520001 	cmp	r2, #1
   3aad0:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   3aad4:	e59f2028 	ldr	r2, [pc, #40]	; 3ab04 <TermAnsi::sgr()+0x1f8>
   3aad8:	e2801e89 	add	r1, r0, #2192	; 0x890
   3aadc:	e0820392 	umull	r0, r2, r2, r3
   3aae0:	e1a021a2 	lsr	r2, r2, #3
   3aae4:	e0822102 	add	r2, r2, r2, lsl #2
   3aae8:	e35e0027 	cmp	lr, #39	; 0x27
   3aaec:	e0433082 	sub	r3, r3, r2, lsl #1
   3aaf0:	92811001 	addls	r1, r1, #1
   3aaf4:	82811002 	addhi	r1, r1, #2
   3aaf8:	e2833008 	add	r3, r3, #8
   3aafc:	e5c13000 	strb	r3, [r1]
   3ab00:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ab04:	cccccccd 	.word	0xcccccccd

0003ab08 <TermAnsi::handleAnsiChar(unsigned char)>:
   3ab08:	e3a03000 	mov	r3, #0
   3ab0c:	e92d4070 	push	{r4, r5, r6, lr}
   3ab10:	e5d0602c 	ldrb	r6, [r0, #44]	; 0x2c
   3ab14:	e24dd008 	sub	sp, sp, #8
   3ab18:	e1560003 	cmp	r6, r3
   3ab1c:	e1cd30b4 	strh	r3, [sp, #4]
   3ab20:	e1a04000 	mov	r4, r0
   3ab24:	e1a05001 	mov	r5, r1
   3ab28:	e5cd1004 	strb	r1, [sp, #4]
   3ab2c:	0a00001d 	beq	3aba8 <TermAnsi::handleAnsiChar(unsigned char)+0xa0>
   3ab30:	e3560001 	cmp	r6, #1
   3ab34:	0a000040 	beq	3ac3c <TermAnsi::handleAnsiChar(unsigned char)+0x134>
   3ab38:	e3560002 	cmp	r6, #2
   3ab3c:	0a0004a9 	beq	3bde8 <TermAnsi::handleAnsiChar(unsigned char)+0x12e0>
   3ab40:	e3560002 	cmp	r6, #2
   3ab44:	0a00042c 	beq	3bbfc <TermAnsi::handleAnsiChar(unsigned char)+0x10f4>
   3ab48:	e3560002 	cmp	r6, #2
   3ab4c:	0a00035e 	beq	3b8cc <TermAnsi::handleAnsiChar(unsigned char)+0xdc4>
   3ab50:	e3560002 	cmp	r6, #2
   3ab54:	0a0002ed 	beq	3b710 <TermAnsi::handleAnsiChar(unsigned char)+0xc08>
   3ab58:	e3560002 	cmp	r6, #2
   3ab5c:	0a000280 	beq	3b564 <TermAnsi::handleAnsiChar(unsigned char)+0xa5c>
   3ab60:	e3560002 	cmp	r6, #2
   3ab64:	0a00020a 	beq	3b394 <TermAnsi::handleAnsiChar(unsigned char)+0x88c>
   3ab68:	e3560002 	cmp	r6, #2
   3ab6c:	0a0001bc 	beq	3b264 <TermAnsi::handleAnsiChar(unsigned char)+0x75c>
   3ab70:	e3560002 	cmp	r6, #2
   3ab74:	0a00019b 	beq	3b1e8 <TermAnsi::handleAnsiChar(unsigned char)+0x6e0>
   3ab78:	e3560002 	cmp	r6, #2
   3ab7c:	0a0000e9 	beq	3af28 <TermAnsi::handleAnsiChar(unsigned char)+0x420>
   3ab80:	e3a02020 	mov	r2, #32
   3ab84:	e3a01000 	mov	r1, #0
   3ab88:	e2840030 	add	r0, r4, #48	; 0x30
   3ab8c:	ebffbcec 	bl	29f44 <memset>
   3ab90:	e3a00000 	mov	r0, #0
   3ab94:	e5c4002c 	strb	r0, [r4, #44]	; 0x2c
   3ab98:	e5840050 	str	r0, [r4, #80]	; 0x50
   3ab9c:	e5840054 	str	r0, [r4, #84]	; 0x54
   3aba0:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   3aba4:	ea000022 	b	3ac34 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3aba8:	e59f0f9c 	ldr	r0, [pc, #3996]	; 3bb4c <TermAnsi::handleAnsiChar(unsigned char)+0x1044>
   3abac:	ebffbe23 	bl	2a440 <strchr>
   3abb0:	e3500000 	cmp	r0, #0
   3abb4:	0a000028 	beq	3ac5c <TermAnsi::handleAnsiChar(unsigned char)+0x154>
   3abb8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3abbc:	e3530007 	cmp	r3, #7
   3abc0:	8a000004 	bhi	3abd8 <TermAnsi::handleAnsiChar(unsigned char)+0xd0>
   3abc4:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3abc8:	e2831001 	add	r1, r3, #1
   3abcc:	e283300c 	add	r3, r3, #12
   3abd0:	e5841050 	str	r1, [r4, #80]	; 0x50
   3abd4:	e7842103 	str	r2, [r4, r3, lsl #2]
   3abd8:	e5940010 	ldr	r0, [r4, #16]
   3abdc:	e5942018 	ldr	r2, [r4, #24]
   3abe0:	e594100c 	ldr	r1, [r4, #12]
   3abe4:	e5943014 	ldr	r3, [r4, #20]
   3abe8:	e2400001 	sub	r0, r0, #1
   3abec:	e1520000 	cmp	r2, r0
   3abf0:	e2411001 	sub	r1, r1, #1
   3abf4:	21a02000 	movcs	r2, r0
   3abf8:	e1530001 	cmp	r3, r1
   3abfc:	e3a05000 	mov	r5, #0
   3ac00:	21a03001 	movcs	r3, r1
   3ac04:	e5842018 	str	r2, [r4, #24]
   3ac08:	e5843014 	str	r3, [r4, #20]
   3ac0c:	e5845054 	str	r5, [r4, #84]	; 0x54
   3ac10:	e1a01005 	mov	r1, r5
   3ac14:	e3a02020 	mov	r2, #32
   3ac18:	e2840030 	add	r0, r4, #48	; 0x30
   3ac1c:	ebffbcc8 	bl	29f44 <memset>
   3ac20:	e3a00001 	mov	r0, #1
   3ac24:	e5c4502c 	strb	r5, [r4, #44]	; 0x2c
   3ac28:	e5845050 	str	r5, [r4, #80]	; 0x50
   3ac2c:	e5845054 	str	r5, [r4, #84]	; 0x54
   3ac30:	e5c45058 	strb	r5, [r4, #88]	; 0x58
   3ac34:	e28dd008 	add	sp, sp, #8
   3ac38:	e8bd8070 	pop	{r4, r5, r6, pc}
   3ac3c:	e1a01005 	mov	r1, r5
   3ac40:	e59f0fa4 	ldr	r0, [pc, #4004]	; 3bbec <TermAnsi::handleAnsiChar(unsigned char)+0x10e4>
   3ac44:	ebffbdfd 	bl	2a440 <strchr>
   3ac48:	e3500000 	cmp	r0, #0
   3ac4c:	0a0000f0 	beq	3b014 <TermAnsi::handleAnsiChar(unsigned char)+0x50c>
   3ac50:	e3a00001 	mov	r0, #1
   3ac54:	e5c4002c 	strb	r0, [r4, #44]	; 0x2c
   3ac58:	eafffff5 	b	3ac34 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3ac5c:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3ac60:	e3560000 	cmp	r6, #0
   3ac64:	1a0000a6 	bne	3af04 <TermAnsi::handleAnsiChar(unsigned char)+0x3fc>
   3ac68:	e1a01005 	mov	r1, r5
   3ac6c:	e59f0edc 	ldr	r0, [pc, #3804]	; 3bb50 <TermAnsi::handleAnsiChar(unsigned char)+0x1048>
   3ac70:	ebffbdf2 	bl	2a440 <strchr>
   3ac74:	e3500000 	cmp	r0, #0
   3ac78:	0a000026 	beq	3ad18 <TermAnsi::handleAnsiChar(unsigned char)+0x210>
   3ac7c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ac80:	e3530007 	cmp	r3, #7
   3ac84:	8a000004 	bhi	3ac9c <TermAnsi::handleAnsiChar(unsigned char)+0x194>
   3ac88:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3ac8c:	e2831001 	add	r1, r3, #1
   3ac90:	e283300c 	add	r3, r3, #12
   3ac94:	e5841050 	str	r1, [r4, #80]	; 0x50
   3ac98:	e7842103 	str	r2, [r4, r3, lsl #2]
   3ac9c:	e3a02000 	mov	r2, #0
   3aca0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3aca4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3aca8:	e1530002 	cmp	r3, r2
   3acac:	e5940014 	ldr	r0, [r4, #20]
   3acb0:	1a000001 	bne	3acbc <TermAnsi::handleAnsiChar(unsigned char)+0x1b4>
   3acb4:	e3500000 	cmp	r0, #0
   3acb8:	12400001 	subne	r0, r0, #1
   3acbc:	e5941010 	ldr	r1, [r4, #16]
   3acc0:	e5942018 	ldr	r2, [r4, #24]
   3acc4:	e594300c 	ldr	r3, [r4, #12]
   3acc8:	e2411001 	sub	r1, r1, #1
   3accc:	e1520001 	cmp	r2, r1
   3acd0:	e2433001 	sub	r3, r3, #1
   3acd4:	21a02001 	movcs	r2, r1
   3acd8:	e1530000 	cmp	r3, r0
   3acdc:	21a03000 	movcs	r3, r0
   3ace0:	e5842018 	str	r2, [r4, #24]
   3ace4:	e5843014 	str	r3, [r4, #20]
   3ace8:	e3a02020 	mov	r2, #32
   3acec:	e3a01000 	mov	r1, #0
   3acf0:	e2840030 	add	r0, r4, #48	; 0x30
   3acf4:	ebffbc92 	bl	29f44 <memset>
   3acf8:	e3a03000 	mov	r3, #0
   3acfc:	e3a00001 	mov	r0, #1
   3ad00:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3ad04:	e5843050 	str	r3, [r4, #80]	; 0x50
   3ad08:	e5843054 	str	r3, [r4, #84]	; 0x54
   3ad0c:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   3ad10:	e28dd008 	add	sp, sp, #8
   3ad14:	e8bd8070 	pop	{r4, r5, r6, pc}
   3ad18:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3ad1c:	e3560000 	cmp	r6, #0
   3ad20:	1affff82 	bne	3ab30 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3ad24:	e1a01005 	mov	r1, r5
   3ad28:	e59f0e24 	ldr	r0, [pc, #3620]	; 3bb54 <TermAnsi::handleAnsiChar(unsigned char)+0x104c>
   3ad2c:	ebffbdc3 	bl	2a440 <strchr>
   3ad30:	e3500000 	cmp	r0, #0
   3ad34:	0a000024 	beq	3adcc <TermAnsi::handleAnsiChar(unsigned char)+0x2c4>
   3ad38:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ad3c:	e3530007 	cmp	r3, #7
   3ad40:	8a000004 	bhi	3ad58 <TermAnsi::handleAnsiChar(unsigned char)+0x250>
   3ad44:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3ad48:	e2831001 	add	r1, r3, #1
   3ad4c:	e283300c 	add	r3, r3, #12
   3ad50:	e5841050 	str	r1, [r4, #80]	; 0x50
   3ad54:	e7842103 	str	r2, [r4, r3, lsl #2]
   3ad58:	e3a02000 	mov	r2, #0
   3ad5c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3ad60:	e5842054 	str	r2, [r4, #84]	; 0x54
   3ad64:	e1530002 	cmp	r3, r2
   3ad68:	1a000013 	bne	3adbc <TermAnsi::handleAnsiChar(unsigned char)+0x2b4>
   3ad6c:	e5943014 	ldr	r3, [r4, #20]
   3ad70:	e594100c 	ldr	r1, [r4, #12]
   3ad74:	e0842103 	add	r2, r4, r3, lsl #2
   3ad78:	e2411001 	sub	r1, r1, #1
   3ad7c:	e2833001 	add	r3, r3, #1
   3ad80:	e1510003 	cmp	r1, r3
   3ad84:	e2822004 	add	r2, r2, #4
   3ad88:	8a000007 	bhi	3adac <TermAnsi::handleAnsiChar(unsigned char)+0x2a4>
   3ad8c:	e5940010 	ldr	r0, [r4, #16]
   3ad90:	e5942018 	ldr	r2, [r4, #24]
   3ad94:	e2400001 	sub	r0, r0, #1
   3ad98:	e1520000 	cmp	r2, r0
   3ad9c:	21a02000 	movcs	r2, r0
   3ada0:	e1530001 	cmp	r3, r1
   3ada4:	21a03001 	movcs	r3, r1
   3ada8:	eaffffcc 	b	3ace0 <TermAnsi::handleAnsiChar(unsigned char)+0x1d8>
   3adac:	e5d2005c 	ldrb	r0, [r2, #92]	; 0x5c
   3adb0:	e350002a 	cmp	r0, #42	; 0x2a
   3adb4:	1afffff0 	bne	3ad7c <TermAnsi::handleAnsiChar(unsigned char)+0x274>
   3adb8:	eafffff3 	b	3ad8c <TermAnsi::handleAnsiChar(unsigned char)+0x284>
   3adbc:	e594100c 	ldr	r1, [r4, #12]
   3adc0:	e5943014 	ldr	r3, [r4, #20]
   3adc4:	e2411001 	sub	r1, r1, #1
   3adc8:	eaffffef 	b	3ad8c <TermAnsi::handleAnsiChar(unsigned char)+0x284>
   3adcc:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3add0:	e3560000 	cmp	r6, #0
   3add4:	1affff55 	bne	3ab30 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3add8:	e1a01005 	mov	r1, r5
   3addc:	e59f0d74 	ldr	r0, [pc, #3444]	; 3bb58 <TermAnsi::handleAnsiChar(unsigned char)+0x1050>
   3ade0:	ebffbd96 	bl	2a440 <strchr>
   3ade4:	e3500000 	cmp	r0, #0
   3ade8:	0a000023 	beq	3ae7c <TermAnsi::handleAnsiChar(unsigned char)+0x374>
   3adec:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3adf0:	e3530007 	cmp	r3, #7
   3adf4:	8a000004 	bhi	3ae0c <TermAnsi::handleAnsiChar(unsigned char)+0x304>
   3adf8:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3adfc:	e2831001 	add	r1, r3, #1
   3ae00:	e283300c 	add	r3, r3, #12
   3ae04:	e5841050 	str	r1, [r4, #80]	; 0x50
   3ae08:	e7842103 	str	r2, [r4, r3, lsl #2]
   3ae0c:	e3a03000 	mov	r3, #0
   3ae10:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3ae14:	e5843054 	str	r3, [r4, #84]	; 0x54
   3ae18:	e1510003 	cmp	r1, r3
   3ae1c:	1a000012 	bne	3ae6c <TermAnsi::handleAnsiChar(unsigned char)+0x364>
   3ae20:	e5943010 	ldr	r3, [r4, #16]
   3ae24:	e5942018 	ldr	r2, [r4, #24]
   3ae28:	e2430001 	sub	r0, r3, #1
   3ae2c:	e1520000 	cmp	r2, r0
   3ae30:	32823001 	addcc	r3, r2, #1
   3ae34:	2a000009 	bcs	3ae60 <TermAnsi::handleAnsiChar(unsigned char)+0x358>
   3ae38:	e594100c 	ldr	r1, [r4, #12]
   3ae3c:	e5942014 	ldr	r2, [r4, #20]
   3ae40:	e1530000 	cmp	r3, r0
   3ae44:	e2411001 	sub	r1, r1, #1
   3ae48:	21a03000 	movcs	r3, r0
   3ae4c:	e1520001 	cmp	r2, r1
   3ae50:	21a02001 	movcs	r2, r1
   3ae54:	e5843018 	str	r3, [r4, #24]
   3ae58:	e5842014 	str	r2, [r4, #20]
   3ae5c:	eaffffa1 	b	3ace8 <TermAnsi::handleAnsiChar(unsigned char)+0x1e0>
   3ae60:	e3a02001 	mov	r2, #1
   3ae64:	e1a00004 	mov	r0, r4
   3ae68:	ebfffd45 	bl	3a384 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3ae6c:	e5940010 	ldr	r0, [r4, #16]
   3ae70:	e5943018 	ldr	r3, [r4, #24]
   3ae74:	e2400001 	sub	r0, r0, #1
   3ae78:	eaffffee 	b	3ae38 <TermAnsi::handleAnsiChar(unsigned char)+0x330>
   3ae7c:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3ae80:	e3560000 	cmp	r6, #0
   3ae84:	1affff29 	bne	3ab30 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3ae88:	e1a01005 	mov	r1, r5
   3ae8c:	e59f0cc8 	ldr	r0, [pc, #3272]	; 3bb5c <TermAnsi::handleAnsiChar(unsigned char)+0x1054>
   3ae90:	ebffbd6a 	bl	2a440 <strchr>
   3ae94:	e3500000 	cmp	r0, #0
   3ae98:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3ae9c:	0a000018 	beq	3af04 <TermAnsi::handleAnsiChar(unsigned char)+0x3fc>
   3aea0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3aea4:	e3530007 	cmp	r3, #7
   3aea8:	8a000004 	bhi	3aec0 <TermAnsi::handleAnsiChar(unsigned char)+0x3b8>
   3aeac:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3aeb0:	e2831001 	add	r1, r3, #1
   3aeb4:	e283300c 	add	r3, r3, #12
   3aeb8:	e5841050 	str	r1, [r4, #80]	; 0x50
   3aebc:	e7842103 	str	r2, [r4, r3, lsl #2]
   3aec0:	e3a02000 	mov	r2, #0
   3aec4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3aec8:	e5940010 	ldr	r0, [r4, #16]
   3aecc:	e5941018 	ldr	r1, [r4, #24]
   3aed0:	e1530002 	cmp	r3, r2
   3aed4:	e2400001 	sub	r0, r0, #1
   3aed8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3aedc:	01a02003 	moveq	r2, r3
   3aee0:	15942014 	ldrne	r2, [r4, #20]
   3aee4:	e1510000 	cmp	r1, r0
   3aee8:	21a01000 	movcs	r1, r0
   3aeec:	e594300c 	ldr	r3, [r4, #12]
   3aef0:	e5841018 	str	r1, [r4, #24]
   3aef4:	e2433001 	sub	r3, r3, #1
   3aef8:	e1530002 	cmp	r3, r2
   3aefc:	21a03002 	movcs	r3, r2
   3af00:	eaffff77 	b	3ace4 <TermAnsi::handleAnsiChar(unsigned char)+0x1dc>
   3af04:	e3560000 	cmp	r6, #0
   3af08:	1affff08 	bne	3ab30 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3af0c:	e1a01005 	mov	r1, r5
   3af10:	e59f0cd4 	ldr	r0, [pc, #3284]	; 3bbec <TermAnsi::handleAnsiChar(unsigned char)+0x10e4>
   3af14:	ebffbd49 	bl	2a440 <strchr>
   3af18:	e3500000 	cmp	r0, #0
   3af1c:	1affff4b 	bne	3ac50 <TermAnsi::handleAnsiChar(unsigned char)+0x148>
   3af20:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3af24:	eaffff01 	b	3ab30 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3af28:	e1a01005 	mov	r1, r5
   3af2c:	e59f0c2c 	ldr	r0, [pc, #3116]	; 3bb60 <TermAnsi::handleAnsiChar(unsigned char)+0x1058>
   3af30:	ebffbd42 	bl	2a440 <strchr>
   3af34:	e3500000 	cmp	r0, #0
   3af38:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3af3c:	0a00001d 	beq	3afb8 <TermAnsi::handleAnsiChar(unsigned char)+0x4b0>
   3af40:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3af44:	e3530007 	cmp	r3, #7
   3af48:	8a000004 	bhi	3af60 <TermAnsi::handleAnsiChar(unsigned char)+0x458>
   3af4c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3af50:	e2831001 	add	r1, r3, #1
   3af54:	e283300c 	add	r3, r3, #12
   3af58:	e5841050 	str	r1, [r4, #80]	; 0x50
   3af5c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3af60:	e3a02000 	mov	r2, #0
   3af64:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3af68:	e5842054 	str	r2, [r4, #84]	; 0x54
   3af6c:	e1530002 	cmp	r3, r2
   3af70:	1a000008 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3af74:	e5945894 	ldr	r5, [r4, #2196]	; 0x894
   3af78:	e284ce89 	add	ip, r4, #2192	; 0x890
   3af7c:	e28cc008 	add	ip, ip, #8
   3af80:	e284e014 	add	lr, r4, #20
   3af84:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
   3af88:	e5845890 	str	r5, [r4, #2192]	; 0x890
   3af8c:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   3af90:	e59c3000 	ldr	r3, [ip]
   3af94:	e58e3000 	str	r3, [lr]
   3af98:	e5940010 	ldr	r0, [r4, #16]
   3af9c:	e5942018 	ldr	r2, [r4, #24]
   3afa0:	e594100c 	ldr	r1, [r4, #12]
   3afa4:	e2400001 	sub	r0, r0, #1
   3afa8:	e5943014 	ldr	r3, [r4, #20]
   3afac:	e1520000 	cmp	r2, r0
   3afb0:	e2411001 	sub	r1, r1, #1
   3afb4:	eaffff78 	b	3ad9c <TermAnsi::handleAnsiChar(unsigned char)+0x294>
   3afb8:	e3560002 	cmp	r6, #2
   3afbc:	1afffeef 	bne	3ab80 <TermAnsi::handleAnsiChar(unsigned char)+0x78>
   3afc0:	e1a01005 	mov	r1, r5
   3afc4:	e59f0b98 	ldr	r0, [pc, #2968]	; 3bb64 <TermAnsi::handleAnsiChar(unsigned char)+0x105c>
   3afc8:	ebffbd1c 	bl	2a440 <strchr>
   3afcc:	e3500000 	cmp	r0, #0
   3afd0:	0afffeea 	beq	3ab80 <TermAnsi::handleAnsiChar(unsigned char)+0x78>
   3afd4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3afd8:	e3530007 	cmp	r3, #7
   3afdc:	8a000004 	bhi	3aff4 <TermAnsi::handleAnsiChar(unsigned char)+0x4ec>
   3afe0:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3afe4:	e2831001 	add	r1, r3, #1
   3afe8:	e283300c 	add	r3, r3, #12
   3afec:	e5841050 	str	r1, [r4, #80]	; 0x50
   3aff0:	e7842103 	str	r2, [r4, r3, lsl #2]
   3aff4:	e3a02000 	mov	r2, #0
   3aff8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3affc:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b000:	e1530002 	cmp	r3, r2
   3b004:	1affffe3 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b008:	e1a00004 	mov	r0, r4
   3b00c:	ebfffe07 	bl	3a830 <TermAnsi::ich()>
   3b010:	eaffffe0 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b014:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3b018:	e3560001 	cmp	r6, #1
   3b01c:	1a00004b 	bne	3b150 <TermAnsi::handleAnsiChar(unsigned char)+0x648>
   3b020:	e1a01005 	mov	r1, r5
   3b024:	e59f0b3c 	ldr	r0, [pc, #2876]	; 3bb68 <TermAnsi::handleAnsiChar(unsigned char)+0x1060>
   3b028:	ebffbd04 	bl	2a440 <strchr>
   3b02c:	e3500000 	cmp	r0, #0
   3b030:	0a000011 	beq	3b07c <TermAnsi::handleAnsiChar(unsigned char)+0x574>
   3b034:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b038:	e3530007 	cmp	r3, #7
   3b03c:	8a000004 	bhi	3b054 <TermAnsi::handleAnsiChar(unsigned char)+0x54c>
   3b040:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b044:	e2831001 	add	r1, r3, #1
   3b048:	e283300c 	add	r3, r3, #12
   3b04c:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b050:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b054:	e3a02000 	mov	r2, #0
   3b058:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b05c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b060:	e1530002 	cmp	r3, r2
   3b064:	03a0202a 	moveq	r2, #42	; 0x2a
   3b068:	05940014 	ldreq	r0, [r4, #20]
   3b06c:	15940014 	ldrne	r0, [r4, #20]
   3b070:	00843100 	addeq	r3, r4, r0, lsl #2
   3b074:	05c3205c 	strbeq	r2, [r3, #92]	; 0x5c
   3b078:	eaffff0f 	b	3acbc <TermAnsi::handleAnsiChar(unsigned char)+0x1b4>
   3b07c:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3b080:	e3560001 	cmp	r6, #1
   3b084:	1afffeab 	bne	3ab38 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3b088:	e1a01005 	mov	r1, r5
   3b08c:	e59f0ad8 	ldr	r0, [pc, #2776]	; 3bb6c <TermAnsi::handleAnsiChar(unsigned char)+0x1064>
   3b090:	ebffbcea 	bl	2a440 <strchr>
   3b094:	e3500000 	cmp	r0, #0
   3b098:	0a000016 	beq	3b0f8 <TermAnsi::handleAnsiChar(unsigned char)+0x5f0>
   3b09c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b0a0:	e3530007 	cmp	r3, #7
   3b0a4:	8a000004 	bhi	3b0bc <TermAnsi::handleAnsiChar(unsigned char)+0x5b4>
   3b0a8:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b0ac:	e2831001 	add	r1, r3, #1
   3b0b0:	e283300c 	add	r3, r3, #12
   3b0b4:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b0b8:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b0bc:	e3a02000 	mov	r2, #0
   3b0c0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b0c4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b0c8:	e1530002 	cmp	r3, r2
   3b0cc:	1affffb1 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b0d0:	e5943890 	ldr	r3, [r4, #2192]	; 0x890
   3b0d4:	e284ce89 	add	ip, r4, #2192	; 0x890
   3b0d8:	e28cc008 	add	ip, ip, #8
   3b0dc:	e284e014 	add	lr, r4, #20
   3b0e0:	e5843894 	str	r3, [r4, #2196]	; 0x894
   3b0e4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3b0e8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3b0ec:	e59e3000 	ldr	r3, [lr]
   3b0f0:	e58c3000 	str	r3, [ip]
   3b0f4:	eaffffa7 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b0f8:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3b0fc:	e3560001 	cmp	r6, #1
   3b100:	1afffe8c 	bne	3ab38 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3b104:	e1a01005 	mov	r1, r5
   3b108:	e59f0a60 	ldr	r0, [pc, #2656]	; 3bb70 <TermAnsi::handleAnsiChar(unsigned char)+0x1068>
   3b10c:	ebffbccb 	bl	2a440 <strchr>
   3b110:	e3500000 	cmp	r0, #0
   3b114:	1affff89 	bne	3af40 <TermAnsi::handleAnsiChar(unsigned char)+0x438>
   3b118:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3b11c:	e3560001 	cmp	r6, #1
   3b120:	1afffe84 	bne	3ab38 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3b124:	e1a01005 	mov	r1, r5
   3b128:	e59f0a44 	ldr	r0, [pc, #2628]	; 3bb74 <TermAnsi::handleAnsiChar(unsigned char)+0x106c>
   3b12c:	ebffbcc3 	bl	2a440 <strchr>
   3b130:	e3500000 	cmp	r0, #0
   3b134:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b138:	0a000004 	beq	3b150 <TermAnsi::handleAnsiChar(unsigned char)+0x648>
   3b13c:	e3a00001 	mov	r0, #1
   3b140:	e3a03002 	mov	r3, #2
   3b144:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   3b148:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3b14c:	eafffeb8 	b	3ac34 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3b150:	e3560001 	cmp	r6, #1
   3b154:	1afffe77 	bne	3ab38 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3b158:	e1a01005 	mov	r1, r5
   3b15c:	e59f0a14 	ldr	r0, [pc, #2580]	; 3bb78 <TermAnsi::handleAnsiChar(unsigned char)+0x1070>
   3b160:	ebffbcb6 	bl	2a440 <strchr>
   3b164:	e3500000 	cmp	r0, #0
   3b168:	0a000011 	beq	3b1b4 <TermAnsi::handleAnsiChar(unsigned char)+0x6ac>
   3b16c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b170:	e3530007 	cmp	r3, #7
   3b174:	8a000004 	bhi	3b18c <TermAnsi::handleAnsiChar(unsigned char)+0x684>
   3b178:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b17c:	e2831001 	add	r1, r3, #1
   3b180:	e283300c 	add	r3, r3, #12
   3b184:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b188:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b18c:	e3a02000 	mov	r2, #0
   3b190:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b194:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b198:	e1530002 	cmp	r3, r2
   3b19c:	1affff7d 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b1a0:	e5943000 	ldr	r3, [r4]
   3b1a4:	e1a00004 	mov	r0, r4
   3b1a8:	e5933010 	ldr	r3, [r3, #16]
   3b1ac:	e12fff33 	blx	r3
   3b1b0:	eaffff78 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b1b4:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3b1b8:	e3560001 	cmp	r6, #1
   3b1bc:	1afffe5d 	bne	3ab38 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3b1c0:	e1a01005 	mov	r1, r5
   3b1c4:	e59f09b0 	ldr	r0, [pc, #2480]	; 3bb7c <TermAnsi::handleAnsiChar(unsigned char)+0x1074>
   3b1c8:	ebffbc9c 	bl	2a440 <strchr>
   3b1cc:	e3500000 	cmp	r0, #0
   3b1d0:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b1d4:	0afffe57 	beq	3ab38 <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3b1d8:	e3a03002 	mov	r3, #2
   3b1dc:	e1a00006 	mov	r0, r6
   3b1e0:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3b1e4:	eafffe92 	b	3ac34 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3b1e8:	e1a01005 	mov	r1, r5
   3b1ec:	e59f098c 	ldr	r0, [pc, #2444]	; 3bb80 <TermAnsi::handleAnsiChar(unsigned char)+0x1078>
   3b1f0:	ebffbc92 	bl	2a440 <strchr>
   3b1f4:	e3500000 	cmp	r0, #0
   3b1f8:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b1fc:	1afffe6d 	bne	3abb8 <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3b200:	e3560002 	cmp	r6, #2
   3b204:	1affff6b 	bne	3afb8 <TermAnsi::handleAnsiChar(unsigned char)+0x4b0>
   3b208:	e1a01005 	mov	r1, r5
   3b20c:	e59f0970 	ldr	r0, [pc, #2416]	; 3bb84 <TermAnsi::handleAnsiChar(unsigned char)+0x107c>
   3b210:	ebffbc8a 	bl	2a440 <strchr>
   3b214:	e3500000 	cmp	r0, #0
   3b218:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b21c:	1afffe65 	bne	3abb8 <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3b220:	e3560002 	cmp	r6, #2
   3b224:	1afffe55 	bne	3ab80 <TermAnsi::handleAnsiChar(unsigned char)+0x78>
   3b228:	e1a01005 	mov	r1, r5
   3b22c:	e59f0954 	ldr	r0, [pc, #2388]	; 3bb88 <TermAnsi::handleAnsiChar(unsigned char)+0x1080>
   3b230:	ebffbc82 	bl	2a440 <strchr>
   3b234:	e3500000 	cmp	r0, #0
   3b238:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b23c:	1afffe5d 	bne	3abb8 <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3b240:	e3560002 	cmp	r6, #2
   3b244:	1afffe4d 	bne	3ab80 <TermAnsi::handleAnsiChar(unsigned char)+0x78>
   3b248:	e1a01005 	mov	r1, r5
   3b24c:	e59f0938 	ldr	r0, [pc, #2360]	; 3bb8c <TermAnsi::handleAnsiChar(unsigned char)+0x1084>
   3b250:	ebffbc7a 	bl	2a440 <strchr>
   3b254:	e3500000 	cmp	r0, #0
   3b258:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b25c:	1affff8e 	bne	3b09c <TermAnsi::handleAnsiChar(unsigned char)+0x594>
   3b260:	eafffe44 	b	3ab78 <TermAnsi::handleAnsiChar(unsigned char)+0x70>
   3b264:	e1a01005 	mov	r1, r5
   3b268:	e59f0908 	ldr	r0, [pc, #2312]	; 3bb78 <TermAnsi::handleAnsiChar(unsigned char)+0x1070>
   3b26c:	ebffbc73 	bl	2a440 <strchr>
   3b270:	e3500000 	cmp	r0, #0
   3b274:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b278:	1afffe4e 	bne	3abb8 <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3b27c:	e3560002 	cmp	r6, #2
   3b280:	1affffde 	bne	3b200 <TermAnsi::handleAnsiChar(unsigned char)+0x6f8>
   3b284:	e1a01005 	mov	r1, r5
   3b288:	e59f0900 	ldr	r0, [pc, #2304]	; 3bb90 <TermAnsi::handleAnsiChar(unsigned char)+0x1088>
   3b28c:	ebffbc6b 	bl	2a440 <strchr>
   3b290:	e3500000 	cmp	r0, #0
   3b294:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b298:	0a00001c 	beq	3b310 <TermAnsi::handleAnsiChar(unsigned char)+0x808>
   3b29c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b2a0:	e3530007 	cmp	r3, #7
   3b2a4:	8a000004 	bhi	3b2bc <TermAnsi::handleAnsiChar(unsigned char)+0x7b4>
   3b2a8:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b2ac:	e2831001 	add	r1, r3, #1
   3b2b0:	e283300c 	add	r3, r3, #12
   3b2b4:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b2b8:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b2bc:	e3a03000 	mov	r3, #0
   3b2c0:	e5d42058 	ldrb	r2, [r4, #88]	; 0x58
   3b2c4:	e5843054 	str	r3, [r4, #84]	; 0x54
   3b2c8:	e1520003 	cmp	r2, r3
   3b2cc:	1affff31 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b2d0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3b2d4:	e3530003 	cmp	r3, #3
   3b2d8:	1affff2e 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b2dc:	e1a03004 	mov	r3, r4
   3b2e0:	e3a0c020 	mov	ip, #32
   3b2e4:	e3a0000f 	mov	r0, #15
   3b2e8:	e594100c 	ldr	r1, [r4, #12]
   3b2ec:	e0841101 	add	r1, r4, r1, lsl #2
   3b2f0:	e1530001 	cmp	r3, r1
   3b2f4:	0affff27 	beq	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b2f8:	e5c3c05c 	strb	ip, [r3, #92]	; 0x5c
   3b2fc:	e5c3005d 	strb	r0, [r3, #93]	; 0x5d
   3b300:	e5c3205e 	strb	r2, [r3, #94]	; 0x5e
   3b304:	e5c3205f 	strb	r2, [r3, #95]	; 0x5f
   3b308:	e2833004 	add	r3, r3, #4
   3b30c:	eafffff7 	b	3b2f0 <TermAnsi::handleAnsiChar(unsigned char)+0x7e8>
   3b310:	e3560002 	cmp	r6, #2
   3b314:	1affffc1 	bne	3b220 <TermAnsi::handleAnsiChar(unsigned char)+0x718>
   3b318:	e1a01005 	mov	r1, r5
   3b31c:	e59f0870 	ldr	r0, [pc, #2160]	; 3bb94 <TermAnsi::handleAnsiChar(unsigned char)+0x108c>
   3b320:	ebffbc46 	bl	2a440 <strchr>
   3b324:	e3500000 	cmp	r0, #0
   3b328:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b32c:	0a00000f 	beq	3b370 <TermAnsi::handleAnsiChar(unsigned char)+0x868>
   3b330:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b334:	e3530007 	cmp	r3, #7
   3b338:	8a000004 	bhi	3b350 <TermAnsi::handleAnsiChar(unsigned char)+0x848>
   3b33c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b340:	e2831001 	add	r1, r3, #1
   3b344:	e283300c 	add	r3, r3, #12
   3b348:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b34c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b350:	e3a02000 	mov	r2, #0
   3b354:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b358:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b35c:	e1530002 	cmp	r3, r2
   3b360:	1affff0c 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b364:	e1a00004 	mov	r0, r4
   3b368:	ebfffd67 	bl	3a90c <TermAnsi::sgr()>
   3b36c:	eaffff09 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b370:	e3560002 	cmp	r6, #2
   3b374:	1affffb1 	bne	3b240 <TermAnsi::handleAnsiChar(unsigned char)+0x738>
   3b378:	e1a01005 	mov	r1, r5
   3b37c:	e59f0814 	ldr	r0, [pc, #2068]	; 3bb98 <TermAnsi::handleAnsiChar(unsigned char)+0x1090>
   3b380:	ebffbc2e 	bl	2a440 <strchr>
   3b384:	e3500000 	cmp	r0, #0
   3b388:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b38c:	1afffe09 	bne	3abb8 <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3b390:	eafffdf6 	b	3ab70 <TermAnsi::handleAnsiChar(unsigned char)+0x68>
   3b394:	e1a01005 	mov	r1, r5
   3b398:	e59f07fc 	ldr	r0, [pc, #2044]	; 3bb9c <TermAnsi::handleAnsiChar(unsigned char)+0x1094>
   3b39c:	ebffbc27 	bl	2a440 <strchr>
   3b3a0:	e3500000 	cmp	r0, #0
   3b3a4:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b3a8:	0a000012 	beq	3b3f8 <TermAnsi::handleAnsiChar(unsigned char)+0x8f0>
   3b3ac:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b3b0:	e3530007 	cmp	r3, #7
   3b3b4:	8a000004 	bhi	3b3cc <TermAnsi::handleAnsiChar(unsigned char)+0x8c4>
   3b3b8:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b3bc:	e2831001 	add	r1, r3, #1
   3b3c0:	e283300c 	add	r3, r3, #12
   3b3c4:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b3c8:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b3cc:	e3a03000 	mov	r3, #0
   3b3d0:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3b3d4:	e5843054 	str	r3, [r4, #84]	; 0x54
   3b3d8:	e1510003 	cmp	r1, r3
   3b3dc:	1afffeed 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b3e0:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b3e4:	e1a00004 	mov	r0, r4
   3b3e8:	e1520003 	cmp	r2, r3
   3b3ec:	03a02001 	moveq	r2, #1
   3b3f0:	ebfffc63 	bl	3a584 <TermAnsi::scrollDown(unsigned int, unsigned int)>
   3b3f4:	eafffee7 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b3f8:	e3560002 	cmp	r6, #2
   3b3fc:	1affff9e 	bne	3b27c <TermAnsi::handleAnsiChar(unsigned char)+0x774>
   3b400:	e1a01005 	mov	r1, r5
   3b404:	e59f0794 	ldr	r0, [pc, #1940]	; 3bba0 <TermAnsi::handleAnsiChar(unsigned char)+0x1098>
   3b408:	ebffbc0c 	bl	2a440 <strchr>
   3b40c:	e3500000 	cmp	r0, #0
   3b410:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b414:	0a000014 	beq	3b46c <TermAnsi::handleAnsiChar(unsigned char)+0x964>
   3b418:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b41c:	e3530007 	cmp	r3, #7
   3b420:	8a000004 	bhi	3b438 <TermAnsi::handleAnsiChar(unsigned char)+0x930>
   3b424:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b428:	e2831001 	add	r1, r3, #1
   3b42c:	e283300c 	add	r3, r3, #12
   3b430:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b434:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b438:	e3a02000 	mov	r2, #0
   3b43c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b440:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b444:	e1530002 	cmp	r3, r2
   3b448:	1afffed2 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b44c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3b450:	e5942014 	ldr	r2, [r4, #20]
   3b454:	e3530000 	cmp	r3, #0
   3b458:	03a03001 	moveq	r3, #1
   3b45c:	e5941018 	ldr	r1, [r4, #24]
   3b460:	e1a00004 	mov	r0, r4
   3b464:	ebfffb87 	bl	3a288 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3b468:	eafffeca 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b46c:	e3560002 	cmp	r6, #2
   3b470:	1affffa6 	bne	3b310 <TermAnsi::handleAnsiChar(unsigned char)+0x808>
   3b474:	e1a01005 	mov	r1, r5
   3b478:	e59f0724 	ldr	r0, [pc, #1828]	; 3bba4 <TermAnsi::handleAnsiChar(unsigned char)+0x109c>
   3b47c:	ebffbbef 	bl	2a440 <strchr>
   3b480:	e3500000 	cmp	r0, #0
   3b484:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b488:	0a00001d 	beq	3b504 <TermAnsi::handleAnsiChar(unsigned char)+0x9fc>
   3b48c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b490:	e3530007 	cmp	r3, #7
   3b494:	8a000004 	bhi	3b4ac <TermAnsi::handleAnsiChar(unsigned char)+0x9a4>
   3b498:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b49c:	e2831001 	add	r1, r3, #1
   3b4a0:	e283300c 	add	r3, r3, #12
   3b4a4:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b4a8:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b4ac:	e3a02000 	mov	r2, #0
   3b4b0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b4b4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b4b8:	e1530002 	cmp	r3, r2
   3b4bc:	1a000091 	bne	3b708 <TermAnsi::handleAnsiChar(unsigned char)+0xc00>
   3b4c0:	e5943014 	ldr	r3, [r4, #20]
   3b4c4:	e3530000 	cmp	r3, #0
   3b4c8:	e2432001 	sub	r2, r3, #1
   3b4cc:	e0841103 	add	r1, r4, r3, lsl #2
   3b4d0:	0a000004 	beq	3b4e8 <TermAnsi::handleAnsiChar(unsigned char)+0x9e0>
   3b4d4:	e5842014 	str	r2, [r4, #20]
   3b4d8:	e5d13058 	ldrb	r3, [r1, #88]	; 0x58
   3b4dc:	e353002a 	cmp	r3, #42	; 0x2a
   3b4e0:	1afffff6 	bne	3b4c0 <TermAnsi::handleAnsiChar(unsigned char)+0x9b8>
   3b4e4:	e1a03002 	mov	r3, r2
   3b4e8:	e5940010 	ldr	r0, [r4, #16]
   3b4ec:	e5942018 	ldr	r2, [r4, #24]
   3b4f0:	e594100c 	ldr	r1, [r4, #12]
   3b4f4:	e2400001 	sub	r0, r0, #1
   3b4f8:	e1520000 	cmp	r2, r0
   3b4fc:	e2411001 	sub	r1, r1, #1
   3b500:	eafffe25 	b	3ad9c <TermAnsi::handleAnsiChar(unsigned char)+0x294>
   3b504:	e3560002 	cmp	r6, #2
   3b508:	1affff98 	bne	3b370 <TermAnsi::handleAnsiChar(unsigned char)+0x868>
   3b50c:	e1a01005 	mov	r1, r5
   3b510:	e59f0690 	ldr	r0, [pc, #1680]	; 3bba8 <TermAnsi::handleAnsiChar(unsigned char)+0x10a0>
   3b514:	ebffbbc9 	bl	2a440 <strchr>
   3b518:	e3500000 	cmp	r0, #0
   3b51c:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b520:	0afffd90 	beq	3ab68 <TermAnsi::handleAnsiChar(unsigned char)+0x60>
   3b524:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b528:	e3530007 	cmp	r3, #7
   3b52c:	8a000004 	bhi	3b544 <TermAnsi::handleAnsiChar(unsigned char)+0xa3c>
   3b530:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b534:	e2831001 	add	r1, r3, #1
   3b538:	e283300c 	add	r3, r3, #12
   3b53c:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b540:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b544:	e3a02000 	mov	r2, #0
   3b548:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b54c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b550:	e1530002 	cmp	r3, r2
   3b554:	1afffe8f 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b558:	e1a00004 	mov	r0, r4
   3b55c:	ebfffcd4 	bl	3a8b4 <TermAnsi::rep()>
   3b560:	eafffe8c 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b564:	e1a01005 	mov	r1, r5
   3b568:	e59f063c 	ldr	r0, [pc, #1596]	; 3bbac <TermAnsi::handleAnsiChar(unsigned char)+0x10a4>
   3b56c:	ebffbbb3 	bl	2a440 <strchr>
   3b570:	e3500000 	cmp	r0, #0
   3b574:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b578:	0a000013 	beq	3b5cc <TermAnsi::handleAnsiChar(unsigned char)+0xac4>
   3b57c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b580:	e3530007 	cmp	r3, #7
   3b584:	8a000004 	bhi	3b59c <TermAnsi::handleAnsiChar(unsigned char)+0xa94>
   3b588:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b58c:	e2831001 	add	r1, r3, #1
   3b590:	e283300c 	add	r3, r3, #12
   3b594:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b598:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b59c:	e3a02000 	mov	r2, #0
   3b5a0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b5a4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b5a8:	e1530002 	cmp	r3, r2
   3b5ac:	1afffe79 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b5b0:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b5b4:	e5941018 	ldr	r1, [r4, #24]
   3b5b8:	e3520000 	cmp	r2, #0
   3b5bc:	03a02001 	moveq	r2, #1
   3b5c0:	e1a00004 	mov	r0, r4
   3b5c4:	ebfffbee 	bl	3a584 <TermAnsi::scrollDown(unsigned int, unsigned int)>
   3b5c8:	eafffe72 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b5cc:	e3560002 	cmp	r6, #2
   3b5d0:	1affff88 	bne	3b3f8 <TermAnsi::handleAnsiChar(unsigned char)+0x8f0>
   3b5d4:	e1a01005 	mov	r1, r5
   3b5d8:	e59f05d0 	ldr	r0, [pc, #1488]	; 3bbb0 <TermAnsi::handleAnsiChar(unsigned char)+0x10a8>
   3b5dc:	ebffbb97 	bl	2a440 <strchr>
   3b5e0:	e3500000 	cmp	r0, #0
   3b5e4:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b5e8:	0a000013 	beq	3b63c <TermAnsi::handleAnsiChar(unsigned char)+0xb34>
   3b5ec:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b5f0:	e3530007 	cmp	r3, #7
   3b5f4:	8a000004 	bhi	3b60c <TermAnsi::handleAnsiChar(unsigned char)+0xb04>
   3b5f8:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b5fc:	e2831001 	add	r1, r3, #1
   3b600:	e283300c 	add	r3, r3, #12
   3b604:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b608:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b60c:	e3a02000 	mov	r2, #0
   3b610:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b614:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b618:	e1530002 	cmp	r3, r2
   3b61c:	1afffe5d 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b620:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b624:	e5941018 	ldr	r1, [r4, #24]
   3b628:	e3520000 	cmp	r2, #0
   3b62c:	03a02001 	moveq	r2, #1
   3b630:	e1a00004 	mov	r0, r4
   3b634:	ebfffb52 	bl	3a384 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3b638:	eafffe56 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b63c:	e3560002 	cmp	r6, #2
   3b640:	1affff89 	bne	3b46c <TermAnsi::handleAnsiChar(unsigned char)+0x964>
   3b644:	e1a01005 	mov	r1, r5
   3b648:	e59f0564 	ldr	r0, [pc, #1380]	; 3bbb4 <TermAnsi::handleAnsiChar(unsigned char)+0x10ac>
   3b64c:	ebffbb7b 	bl	2a440 <strchr>
   3b650:	e3500000 	cmp	r0, #0
   3b654:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b658:	0a00000f 	beq	3b69c <TermAnsi::handleAnsiChar(unsigned char)+0xb94>
   3b65c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b660:	e3530007 	cmp	r3, #7
   3b664:	8a000004 	bhi	3b67c <TermAnsi::handleAnsiChar(unsigned char)+0xb74>
   3b668:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b66c:	e2831001 	add	r1, r3, #1
   3b670:	e283300c 	add	r3, r3, #12
   3b674:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b678:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b67c:	e3a02000 	mov	r2, #0
   3b680:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b684:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b688:	e1530002 	cmp	r3, r2
   3b68c:	1afffe41 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b690:	e1a00004 	mov	r0, r4
   3b694:	ebfffc45 	bl	3a7b0 <TermAnsi::dch()>
   3b698:	eafffe3e 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b69c:	e3560002 	cmp	r6, #2
   3b6a0:	1affff97 	bne	3b504 <TermAnsi::handleAnsiChar(unsigned char)+0x9fc>
   3b6a4:	e1a01005 	mov	r1, r5
   3b6a8:	e59f0508 	ldr	r0, [pc, #1288]	; 3bbb8 <TermAnsi::handleAnsiChar(unsigned char)+0x10b0>
   3b6ac:	ebffbb63 	bl	2a440 <strchr>
   3b6b0:	e3500000 	cmp	r0, #0
   3b6b4:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b6b8:	0afffd28 	beq	3ab60 <TermAnsi::handleAnsiChar(unsigned char)+0x58>
   3b6bc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b6c0:	e3530007 	cmp	r3, #7
   3b6c4:	8a000004 	bhi	3b6dc <TermAnsi::handleAnsiChar(unsigned char)+0xbd4>
   3b6c8:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b6cc:	e2831001 	add	r1, r3, #1
   3b6d0:	e283300c 	add	r3, r3, #12
   3b6d4:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b6d8:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b6dc:	e3a03000 	mov	r3, #0
   3b6e0:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3b6e4:	e5843054 	str	r3, [r4, #84]	; 0x54
   3b6e8:	e1510003 	cmp	r1, r3
   3b6ec:	1afffe29 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b6f0:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b6f4:	e1a00004 	mov	r0, r4
   3b6f8:	e1520003 	cmp	r2, r3
   3b6fc:	03a02001 	moveq	r2, #1
   3b700:	ebfffb1f 	bl	3a384 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3b704:	eafffe23 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b708:	e5943014 	ldr	r3, [r4, #20]
   3b70c:	eaffff75 	b	3b4e8 <TermAnsi::handleAnsiChar(unsigned char)+0x9e0>
   3b710:	e1a01005 	mov	r1, r5
   3b714:	e59f04a0 	ldr	r0, [pc, #1184]	; 3bbbc <TermAnsi::handleAnsiChar(unsigned char)+0x10b4>
   3b718:	ebffbb48 	bl	2a440 <strchr>
   3b71c:	e3500000 	cmp	r0, #0
   3b720:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b724:	0a000016 	beq	3b784 <TermAnsi::handleAnsiChar(unsigned char)+0xc7c>
   3b728:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b72c:	e3530007 	cmp	r3, #7
   3b730:	8a000004 	bhi	3b748 <TermAnsi::handleAnsiChar(unsigned char)+0xc40>
   3b734:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b738:	e2831001 	add	r1, r3, #1
   3b73c:	e283300c 	add	r3, r3, #12
   3b740:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b744:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b748:	e3a02000 	mov	r2, #0
   3b74c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b750:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b754:	e1530002 	cmp	r3, r2
   3b758:	1afffe0e 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b75c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3b760:	e1530002 	cmp	r3, r2
   3b764:	01a02003 	moveq	r2, r3
   3b768:	12432001 	subne	r2, r3, #1
   3b76c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3b770:	e5842018 	str	r2, [r4, #24]
   3b774:	e3530000 	cmp	r3, #0
   3b778:	12433001 	subne	r3, r3, #1
   3b77c:	e5843014 	str	r3, [r4, #20]
   3b780:	eafffe04 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b784:	e3560002 	cmp	r6, #2
   3b788:	1affff8f 	bne	3b5cc <TermAnsi::handleAnsiChar(unsigned char)+0xac4>
   3b78c:	e1a01005 	mov	r1, r5
   3b790:	e59f0428 	ldr	r0, [pc, #1064]	; 3bbc0 <TermAnsi::handleAnsiChar(unsigned char)+0x10b8>
   3b794:	ebffbb29 	bl	2a440 <strchr>
   3b798:	e3500000 	cmp	r0, #0
   3b79c:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b7a0:	0a000019 	beq	3b80c <TermAnsi::handleAnsiChar(unsigned char)+0xd04>
   3b7a4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b7a8:	e3530007 	cmp	r3, #7
   3b7ac:	8a000004 	bhi	3b7c4 <TermAnsi::handleAnsiChar(unsigned char)+0xcbc>
   3b7b0:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b7b4:	e2831001 	add	r1, r3, #1
   3b7b8:	e283300c 	add	r3, r3, #12
   3b7bc:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b7c0:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b7c4:	e3a02000 	mov	r2, #0
   3b7c8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b7cc:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b7d0:	e1530002 	cmp	r3, r2
   3b7d4:	e594300c 	ldr	r3, [r4, #12]
   3b7d8:	1a0000a1 	bne	3ba64 <TermAnsi::handleAnsiChar(unsigned char)+0xf5c>
   3b7dc:	e5942014 	ldr	r2, [r4, #20]
   3b7e0:	e2430001 	sub	r0, r3, #1
   3b7e4:	e2822001 	add	r2, r2, #1
   3b7e8:	e2821001 	add	r1, r2, #1
   3b7ec:	e1500002 	cmp	r0, r2
   3b7f0:	e084c101 	add	ip, r4, r1, lsl #2
   3b7f4:	9a000179 	bls	3bde0 <TermAnsi::handleAnsiChar(unsigned char)+0x12d8>
   3b7f8:	e5dcc058 	ldrb	ip, [ip, #88]	; 0x58
   3b7fc:	e35c002a 	cmp	ip, #42	; 0x2a
   3b800:	0a000176 	beq	3bde0 <TermAnsi::handleAnsiChar(unsigned char)+0x12d8>
   3b804:	e1a02001 	mov	r2, r1
   3b808:	eafffff6 	b	3b7e8 <TermAnsi::handleAnsiChar(unsigned char)+0xce0>
   3b80c:	e3560002 	cmp	r6, #2
   3b810:	1affff89 	bne	3b63c <TermAnsi::handleAnsiChar(unsigned char)+0xb34>
   3b814:	e1a01005 	mov	r1, r5
   3b818:	e59f03a4 	ldr	r0, [pc, #932]	; 3bbc4 <TermAnsi::handleAnsiChar(unsigned char)+0x10bc>
   3b81c:	ebffbb07 	bl	2a440 <strchr>
   3b820:	e3500000 	cmp	r0, #0
   3b824:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b828:	0a00000f 	beq	3b86c <TermAnsi::handleAnsiChar(unsigned char)+0xd64>
   3b82c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b830:	e3530007 	cmp	r3, #7
   3b834:	8a000004 	bhi	3b84c <TermAnsi::handleAnsiChar(unsigned char)+0xd44>
   3b838:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b83c:	e2831001 	add	r1, r3, #1
   3b840:	e283300c 	add	r3, r3, #12
   3b844:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b848:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b84c:	e3a02000 	mov	r2, #0
   3b850:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b854:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b858:	e1530002 	cmp	r3, r2
   3b85c:	1afffdcd 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b860:	e1a00004 	mov	r0, r4
   3b864:	ebfffb9a 	bl	3a6d4 <TermAnsi::ed()>
   3b868:	eafffdca 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b86c:	e3560002 	cmp	r6, #2
   3b870:	1affff89 	bne	3b69c <TermAnsi::handleAnsiChar(unsigned char)+0xb94>
   3b874:	e1a01005 	mov	r1, r5
   3b878:	e59f0348 	ldr	r0, [pc, #840]	; 3bbc8 <TermAnsi::handleAnsiChar(unsigned char)+0x10c0>
   3b87c:	ebffbaef 	bl	2a440 <strchr>
   3b880:	e3500000 	cmp	r0, #0
   3b884:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b888:	0afffcb2 	beq	3ab58 <TermAnsi::handleAnsiChar(unsigned char)+0x50>
   3b88c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b890:	e3530007 	cmp	r3, #7
   3b894:	8a000004 	bhi	3b8ac <TermAnsi::handleAnsiChar(unsigned char)+0xda4>
   3b898:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b89c:	e2831001 	add	r1, r3, #1
   3b8a0:	e283300c 	add	r3, r3, #12
   3b8a4:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b8a8:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b8ac:	e3a02000 	mov	r2, #0
   3b8b0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b8b4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b8b8:	e1530002 	cmp	r3, r2
   3b8bc:	1afffdb5 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b8c0:	e1a00004 	mov	r0, r4
   3b8c4:	ebfffba1 	bl	3a750 <TermAnsi::el()>
   3b8c8:	eafffdb2 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b8cc:	e1a01005 	mov	r1, r5
   3b8d0:	e59f02f4 	ldr	r0, [pc, #756]	; 3bbcc <TermAnsi::handleAnsiChar(unsigned char)+0x10c4>
   3b8d4:	ebffbad9 	bl	2a440 <strchr>
   3b8d8:	e3500000 	cmp	r0, #0
   3b8dc:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b8e0:	0a000023 	beq	3b974 <TermAnsi::handleAnsiChar(unsigned char)+0xe6c>
   3b8e4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b8e8:	e3530007 	cmp	r3, #7
   3b8ec:	8a000004 	bhi	3b904 <TermAnsi::handleAnsiChar(unsigned char)+0xdfc>
   3b8f0:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b8f4:	e2831001 	add	r1, r3, #1
   3b8f8:	e283300c 	add	r3, r3, #12
   3b8fc:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b900:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b904:	e3a03000 	mov	r3, #0
   3b908:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3b90c:	e5843054 	str	r3, [r4, #84]	; 0x54
   3b910:	e1510003 	cmp	r1, r3
   3b914:	1a00008a 	bne	3bb44 <TermAnsi::handleAnsiChar(unsigned char)+0x103c>
   3b918:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b91c:	e5940018 	ldr	r0, [r4, #24]
   3b920:	e3520000 	cmp	r2, #0
   3b924:	03a02001 	moveq	r2, #1
   3b928:	e5943010 	ldr	r3, [r4, #16]
   3b92c:	e0822000 	add	r2, r2, r0
   3b930:	e2430001 	sub	r0, r3, #1
   3b934:	e1520000 	cmp	r2, r0
   3b938:	21a02000 	movcs	r2, r0
   3b93c:	e5841014 	str	r1, [r4, #20]
   3b940:	e5842018 	str	r2, [r4, #24]
   3b944:	e5941018 	ldr	r1, [r4, #24]
   3b948:	e594000c 	ldr	r0, [r4, #12]
   3b94c:	e5942014 	ldr	r2, [r4, #20]
   3b950:	e2433001 	sub	r3, r3, #1
   3b954:	e1510003 	cmp	r1, r3
   3b958:	e2400001 	sub	r0, r0, #1
   3b95c:	21a01003 	movcs	r1, r3
   3b960:	e1520000 	cmp	r2, r0
   3b964:	21a02000 	movcs	r2, r0
   3b968:	e5841018 	str	r1, [r4, #24]
   3b96c:	e5842014 	str	r2, [r4, #20]
   3b970:	eafffcdc 	b	3ace8 <TermAnsi::handleAnsiChar(unsigned char)+0x1e0>
   3b974:	e3560002 	cmp	r6, #2
   3b978:	1affff81 	bne	3b784 <TermAnsi::handleAnsiChar(unsigned char)+0xc7c>
   3b97c:	e1a01005 	mov	r1, r5
   3b980:	e59f0248 	ldr	r0, [pc, #584]	; 3bbd0 <TermAnsi::handleAnsiChar(unsigned char)+0x10c8>
   3b984:	ebffbaad 	bl	2a440 <strchr>
   3b988:	e3500000 	cmp	r0, #0
   3b98c:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b990:	0a000016 	beq	3b9f0 <TermAnsi::handleAnsiChar(unsigned char)+0xee8>
   3b994:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b998:	e3530007 	cmp	r3, #7
   3b99c:	8a000004 	bhi	3b9b4 <TermAnsi::handleAnsiChar(unsigned char)+0xeac>
   3b9a0:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b9a4:	e2831001 	add	r1, r3, #1
   3b9a8:	e283300c 	add	r3, r3, #12
   3b9ac:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b9b0:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b9b4:	e3a02000 	mov	r2, #0
   3b9b8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b9bc:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b9c0:	e1530002 	cmp	r3, r2
   3b9c4:	1afffd73 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b9c8:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b9cc:	e5941018 	ldr	r1, [r4, #24]
   3b9d0:	e3520000 	cmp	r2, #0
   3b9d4:	03a02001 	moveq	r2, #1
   3b9d8:	e1520001 	cmp	r2, r1
   3b9dc:	e5843014 	str	r3, [r4, #20]
   3b9e0:	0a000000 	beq	3b9e8 <TermAnsi::handleAnsiChar(unsigned char)+0xee0>
   3b9e4:	e0413002 	sub	r3, r1, r2
   3b9e8:	e5843018 	str	r3, [r4, #24]
   3b9ec:	eafffd69 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b9f0:	e3560002 	cmp	r6, #2
   3b9f4:	1affff84 	bne	3b80c <TermAnsi::handleAnsiChar(unsigned char)+0xd04>
   3b9f8:	e1a01005 	mov	r1, r5
   3b9fc:	e59f01d0 	ldr	r0, [pc, #464]	; 3bbd4 <TermAnsi::handleAnsiChar(unsigned char)+0x10cc>
   3ba00:	ebffba8e 	bl	2a440 <strchr>
   3ba04:	e3500000 	cmp	r0, #0
   3ba08:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3ba0c:	0a000022 	beq	3ba9c <TermAnsi::handleAnsiChar(unsigned char)+0xf94>
   3ba10:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ba14:	e3530007 	cmp	r3, #7
   3ba18:	8a000004 	bhi	3ba30 <TermAnsi::handleAnsiChar(unsigned char)+0xf28>
   3ba1c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3ba20:	e2831001 	add	r1, r3, #1
   3ba24:	e283300c 	add	r3, r3, #12
   3ba28:	e5841050 	str	r1, [r4, #80]	; 0x50
   3ba2c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3ba30:	e3a02000 	mov	r2, #0
   3ba34:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3ba38:	e5842054 	str	r2, [r4, #84]	; 0x54
   3ba3c:	e1530002 	cmp	r3, r2
   3ba40:	1a000013 	bne	3ba94 <TermAnsi::handleAnsiChar(unsigned char)+0xf8c>
   3ba44:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3ba48:	e594300c 	ldr	r3, [r4, #12]
   3ba4c:	e3520000 	cmp	r2, #0
   3ba50:	12422001 	subne	r2, r2, #1
   3ba54:	e2431001 	sub	r1, r3, #1
   3ba58:	e1520001 	cmp	r2, r1
   3ba5c:	21a02001 	movcs	r2, r1
   3ba60:	e5842014 	str	r2, [r4, #20]
   3ba64:	e5940010 	ldr	r0, [r4, #16]
   3ba68:	e5941018 	ldr	r1, [r4, #24]
   3ba6c:	e5942014 	ldr	r2, [r4, #20]
   3ba70:	e2400001 	sub	r0, r0, #1
   3ba74:	e2433001 	sub	r3, r3, #1
   3ba78:	e1510000 	cmp	r1, r0
   3ba7c:	21a01000 	movcs	r1, r0
   3ba80:	e1520003 	cmp	r2, r3
   3ba84:	21a02003 	movcs	r2, r3
   3ba88:	e5841018 	str	r1, [r4, #24]
   3ba8c:	e5842014 	str	r2, [r4, #20]
   3ba90:	eafffc94 	b	3ace8 <TermAnsi::handleAnsiChar(unsigned char)+0x1e0>
   3ba94:	e594300c 	ldr	r3, [r4, #12]
   3ba98:	eafffff1 	b	3ba64 <TermAnsi::handleAnsiChar(unsigned char)+0xf5c>
   3ba9c:	e3560002 	cmp	r6, #2
   3baa0:	1affff71 	bne	3b86c <TermAnsi::handleAnsiChar(unsigned char)+0xd64>
   3baa4:	e1a01005 	mov	r1, r5
   3baa8:	e59f0128 	ldr	r0, [pc, #296]	; 3bbd8 <TermAnsi::handleAnsiChar(unsigned char)+0x10d0>
   3baac:	ebffba63 	bl	2a440 <strchr>
   3bab0:	e3500000 	cmp	r0, #0
   3bab4:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3bab8:	0afffc24 	beq	3ab50 <TermAnsi::handleAnsiChar(unsigned char)+0x48>
   3babc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bac0:	e3530007 	cmp	r3, #7
   3bac4:	8a000004 	bhi	3badc <TermAnsi::handleAnsiChar(unsigned char)+0xfd4>
   3bac8:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bacc:	e2831001 	add	r1, r3, #1
   3bad0:	e283300c 	add	r3, r3, #12
   3bad4:	e5841050 	str	r1, [r4, #80]	; 0x50
   3bad8:	e7842103 	str	r2, [r4, r3, lsl #2]
   3badc:	e3a02000 	mov	r2, #0
   3bae0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3bae4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3bae8:	e1530002 	cmp	r3, r2
   3baec:	15943010 	ldrne	r3, [r4, #16]
   3baf0:	1a000007 	bne	3bb14 <TermAnsi::handleAnsiChar(unsigned char)+0x100c>
   3baf4:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3baf8:	e5943010 	ldr	r3, [r4, #16]
   3bafc:	e3520000 	cmp	r2, #0
   3bb00:	12422001 	subne	r2, r2, #1
   3bb04:	e2431001 	sub	r1, r3, #1
   3bb08:	e1520001 	cmp	r2, r1
   3bb0c:	21a02001 	movcs	r2, r1
   3bb10:	e5842018 	str	r2, [r4, #24]
   3bb14:	e5941018 	ldr	r1, [r4, #24]
   3bb18:	e594000c 	ldr	r0, [r4, #12]
   3bb1c:	e2433001 	sub	r3, r3, #1
   3bb20:	e5942014 	ldr	r2, [r4, #20]
   3bb24:	e1510003 	cmp	r1, r3
   3bb28:	e2400001 	sub	r0, r0, #1
   3bb2c:	31a03001 	movcc	r3, r1
   3bb30:	e1520000 	cmp	r2, r0
   3bb34:	21a02000 	movcs	r2, r0
   3bb38:	e5843018 	str	r3, [r4, #24]
   3bb3c:	e5842014 	str	r2, [r4, #20]
   3bb40:	eafffc68 	b	3ace8 <TermAnsi::handleAnsiChar(unsigned char)+0x1e0>
   3bb44:	e5943010 	ldr	r3, [r4, #16]
   3bb48:	eaffff7d 	b	3b944 <TermAnsi::handleAnsiChar(unsigned char)+0xe3c>
   3bb4c:	00047970 	.word	0x00047970
   3bb50:	00047974 	.word	0x00047974
   3bb54:	00043340 	.word	0x00043340
   3bb58:	00047700 	.word	0x00047700
   3bb5c:	00047978 	.word	0x00047978
   3bb60:	00044338 	.word	0x00044338
   3bb64:	000479cc 	.word	0x000479cc
   3bb68:	00041704 	.word	0x00041704
   3bb6c:	000433e8 	.word	0x000433e8
   3bb70:	000433ec 	.word	0x000433ec
   3bb74:	0004797c 	.word	0x0004797c
   3bb78:	00047984 	.word	0x00047984
   3bb7c:	00046b50 	.word	0x00046b50
   3bb80:	000454b8 	.word	0x000454b8
   3bb84:	0003fa28 	.word	0x0003fa28
   3bb88:	000402f8 	.word	0x000402f8
   3bb8c:	00044054 	.word	0x00044054
   3bb90:	0004492c 	.word	0x0004492c
   3bb94:	000479c8 	.word	0x000479c8
   3bb98:	0003fb78 	.word	0x0003fb78
   3bb9c:	0003f63c 	.word	0x0003f63c
   3bba0:	000414e8 	.word	0x000414e8
   3bba4:	000479c0 	.word	0x000479c0
   3bba8:	000479c4 	.word	0x000479c4
   3bbac:	00045c64 	.word	0x00045c64
   3bbb0:	000479bc 	.word	0x000479bc
   3bbb4:	000416cc 	.word	0x000416cc
   3bbb8:	0003f594 	.word	0x0003f594
   3bbbc:	000479b0 	.word	0x000479b0
   3bbc0:	000479b4 	.word	0x000479b4
   3bbc4:	000479b8 	.word	0x000479b8
   3bbc8:	000448c8 	.word	0x000448c8
   3bbcc:	00044bf8 	.word	0x00044bf8
   3bbd0:	000479a8 	.word	0x000479a8
   3bbd4:	000479ac 	.word	0x000479ac
   3bbd8:	00046ab8 	.word	0x00046ab8
   3bbdc:	0004799c 	.word	0x0004799c
   3bbe0:	000479a0 	.word	0x000479a0
   3bbe4:	00044fc4 	.word	0x00044fc4
   3bbe8:	000479a4 	.word	0x000479a4
   3bbec:	00043338 	.word	0x00043338
   3bbf0:	00047988 	.word	0x00047988
   3bbf4:	0004798c 	.word	0x0004798c
   3bbf8:	00047990 	.word	0x00047990
   3bbfc:	e1a01005 	mov	r1, r5
   3bc00:	e51f002c 	ldr	r0, [pc, #-44]	; 3bbdc <TermAnsi::handleAnsiChar(unsigned char)+0x10d4>
   3bc04:	ebffba0d 	bl	2a440 <strchr>
   3bc08:	e3500000 	cmp	r0, #0
   3bc0c:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3bc10:	0a000013 	beq	3bc64 <TermAnsi::handleAnsiChar(unsigned char)+0x115c>
   3bc14:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bc18:	e3530007 	cmp	r3, #7
   3bc1c:	8a000004 	bhi	3bc34 <TermAnsi::handleAnsiChar(unsigned char)+0x112c>
   3bc20:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bc24:	e2831001 	add	r1, r3, #1
   3bc28:	e283300c 	add	r3, r3, #12
   3bc2c:	e5841050 	str	r1, [r4, #80]	; 0x50
   3bc30:	e7842103 	str	r2, [r4, r3, lsl #2]
   3bc34:	e3a02000 	mov	r2, #0
   3bc38:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3bc3c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3bc40:	e1530002 	cmp	r3, r2
   3bc44:	1afffcd3 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3bc48:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3bc4c:	e5941018 	ldr	r1, [r4, #24]
   3bc50:	e3520000 	cmp	r2, #0
   3bc54:	03a02001 	moveq	r2, #1
   3bc58:	e1520001 	cmp	r2, r1
   3bc5c:	8affff61 	bhi	3b9e8 <TermAnsi::handleAnsiChar(unsigned char)+0xee0>
   3bc60:	eaffff5f 	b	3b9e4 <TermAnsi::handleAnsiChar(unsigned char)+0xedc>
   3bc64:	e3560002 	cmp	r6, #2
   3bc68:	1affff41 	bne	3b974 <TermAnsi::handleAnsiChar(unsigned char)+0xe6c>
   3bc6c:	e1a01005 	mov	r1, r5
   3bc70:	e51f0098 	ldr	r0, [pc, #-152]	; 3bbe0 <TermAnsi::handleAnsiChar(unsigned char)+0x10d8>
   3bc74:	ebffb9f1 	bl	2a440 <strchr>
   3bc78:	e3500000 	cmp	r0, #0
   3bc7c:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3bc80:	0a000017 	beq	3bce4 <TermAnsi::handleAnsiChar(unsigned char)+0x11dc>
   3bc84:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bc88:	e3530007 	cmp	r3, #7
   3bc8c:	8a000004 	bhi	3bca4 <TermAnsi::handleAnsiChar(unsigned char)+0x119c>
   3bc90:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bc94:	e2831001 	add	r1, r3, #1
   3bc98:	e283300c 	add	r3, r3, #12
   3bc9c:	e5841050 	str	r1, [r4, #80]	; 0x50
   3bca0:	e7842103 	str	r2, [r4, r3, lsl #2]
   3bca4:	e3a02000 	mov	r2, #0
   3bca8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3bcac:	e5842054 	str	r2, [r4, #84]	; 0x54
   3bcb0:	e1530002 	cmp	r3, r2
   3bcb4:	1affffa2 	bne	3bb44 <TermAnsi::handleAnsiChar(unsigned char)+0x103c>
   3bcb8:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3bcbc:	e5941018 	ldr	r1, [r4, #24]
   3bcc0:	e3520000 	cmp	r2, #0
   3bcc4:	03a02001 	moveq	r2, #1
   3bcc8:	e5943010 	ldr	r3, [r4, #16]
   3bccc:	e0822001 	add	r2, r2, r1
   3bcd0:	e2431001 	sub	r1, r3, #1
   3bcd4:	e1520001 	cmp	r2, r1
   3bcd8:	21a02001 	movcs	r2, r1
   3bcdc:	e5842018 	str	r2, [r4, #24]
   3bce0:	eaffff17 	b	3b944 <TermAnsi::handleAnsiChar(unsigned char)+0xe3c>
   3bce4:	e3560002 	cmp	r6, #2
   3bce8:	1affff40 	bne	3b9f0 <TermAnsi::handleAnsiChar(unsigned char)+0xee8>
   3bcec:	e1a01005 	mov	r1, r5
   3bcf0:	e51f0114 	ldr	r0, [pc, #-276]	; 3bbe4 <TermAnsi::handleAnsiChar(unsigned char)+0x10dc>
   3bcf4:	ebffb9d1 	bl	2a440 <strchr>
   3bcf8:	e3500000 	cmp	r0, #0
   3bcfc:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3bd00:	0a000017 	beq	3bd64 <TermAnsi::handleAnsiChar(unsigned char)+0x125c>
   3bd04:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bd08:	e3530007 	cmp	r3, #7
   3bd0c:	8a000004 	bhi	3bd24 <TermAnsi::handleAnsiChar(unsigned char)+0x121c>
   3bd10:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bd14:	e2831001 	add	r1, r3, #1
   3bd18:	e283300c 	add	r3, r3, #12
   3bd1c:	e5841050 	str	r1, [r4, #80]	; 0x50
   3bd20:	e7842103 	str	r2, [r4, r3, lsl #2]
   3bd24:	e3a02000 	mov	r2, #0
   3bd28:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3bd2c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3bd30:	e1530002 	cmp	r3, r2
   3bd34:	1affff56 	bne	3ba94 <TermAnsi::handleAnsiChar(unsigned char)+0xf8c>
   3bd38:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3bd3c:	e5941014 	ldr	r1, [r4, #20]
   3bd40:	e3520000 	cmp	r2, #0
   3bd44:	03a02001 	moveq	r2, #1
   3bd48:	e594300c 	ldr	r3, [r4, #12]
   3bd4c:	e0822001 	add	r2, r2, r1
   3bd50:	e2431001 	sub	r1, r3, #1
   3bd54:	e1520001 	cmp	r2, r1
   3bd58:	21a02001 	movcs	r2, r1
   3bd5c:	e5842014 	str	r2, [r4, #20]
   3bd60:	eaffff3f 	b	3ba64 <TermAnsi::handleAnsiChar(unsigned char)+0xf5c>
   3bd64:	e3560002 	cmp	r6, #2
   3bd68:	1affff4b 	bne	3ba9c <TermAnsi::handleAnsiChar(unsigned char)+0xf94>
   3bd6c:	e1a01005 	mov	r1, r5
   3bd70:	e51f0190 	ldr	r0, [pc, #-400]	; 3bbe8 <TermAnsi::handleAnsiChar(unsigned char)+0x10e0>
   3bd74:	ebffb9b1 	bl	2a440 <strchr>
   3bd78:	e3500000 	cmp	r0, #0
   3bd7c:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3bd80:	0afffb70 	beq	3ab48 <TermAnsi::handleAnsiChar(unsigned char)+0x40>
   3bd84:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bd88:	e3530007 	cmp	r3, #7
   3bd8c:	8a000004 	bhi	3bda4 <TermAnsi::handleAnsiChar(unsigned char)+0x129c>
   3bd90:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bd94:	e2831001 	add	r1, r3, #1
   3bd98:	e283300c 	add	r3, r3, #12
   3bd9c:	e5841050 	str	r1, [r4, #80]	; 0x50
   3bda0:	e7842103 	str	r2, [r4, r3, lsl #2]
   3bda4:	e3a02000 	mov	r2, #0
   3bda8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3bdac:	e5842054 	str	r2, [r4, #84]	; 0x54
   3bdb0:	e1530002 	cmp	r3, r2
   3bdb4:	1afffc77 	bne	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3bdb8:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3bdbc:	e5941014 	ldr	r1, [r4, #20]
   3bdc0:	e3520000 	cmp	r2, #0
   3bdc4:	03a02001 	moveq	r2, #1
   3bdc8:	e1520001 	cmp	r2, r1
   3bdcc:	90413002 	subls	r3, r1, r2
   3bdd0:	e1530001 	cmp	r3, r1
   3bdd4:	21a03001 	movcs	r3, r1
   3bdd8:	e5843014 	str	r3, [r4, #20]
   3bddc:	eafffc6d 	b	3af98 <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3bde0:	e5842014 	str	r2, [r4, #20]
   3bde4:	eaffff1e 	b	3ba64 <TermAnsi::handleAnsiChar(unsigned char)+0xf5c>
   3bde8:	e1a01005 	mov	r1, r5
   3bdec:	e51f0208 	ldr	r0, [pc, #-520]	; 3bbec <TermAnsi::handleAnsiChar(unsigned char)+0x10e4>
   3bdf0:	ebffb992 	bl	2a440 <strchr>
   3bdf4:	e3500000 	cmp	r0, #0
   3bdf8:	1afffb94 	bne	3ac50 <TermAnsi::handleAnsiChar(unsigned char)+0x148>
   3bdfc:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3be00:	e3560002 	cmp	r6, #2
   3be04:	1affff96 	bne	3bc64 <TermAnsi::handleAnsiChar(unsigned char)+0x115c>
   3be08:	e1a01005 	mov	r1, r5
   3be0c:	e51f0224 	ldr	r0, [pc, #-548]	; 3bbf0 <TermAnsi::handleAnsiChar(unsigned char)+0x10e8>
   3be10:	ebffb98a 	bl	2a440 <strchr>
   3be14:	e3500000 	cmp	r0, #0
   3be18:	0a00000b 	beq	3be4c <TermAnsi::handleAnsiChar(unsigned char)+0x1344>
   3be1c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3be20:	e3530007 	cmp	r3, #7
   3be24:	8a000004 	bhi	3be3c <TermAnsi::handleAnsiChar(unsigned char)+0x1334>
   3be28:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3be2c:	e2831001 	add	r1, r3, #1
   3be30:	e283300c 	add	r3, r3, #12
   3be34:	e5841050 	str	r1, [r4, #80]	; 0x50
   3be38:	e7842103 	str	r2, [r4, r3, lsl #2]
   3be3c:	e3a03000 	mov	r3, #0
   3be40:	e3a00001 	mov	r0, #1
   3be44:	e5843054 	str	r3, [r4, #84]	; 0x54
   3be48:	eafffb79 	b	3ac34 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3be4c:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3be50:	e3560002 	cmp	r6, #2
   3be54:	1affffa2 	bne	3bce4 <TermAnsi::handleAnsiChar(unsigned char)+0x11dc>
   3be58:	e1a01005 	mov	r1, r5
   3be5c:	e51f0270 	ldr	r0, [pc, #-624]	; 3bbf4 <TermAnsi::handleAnsiChar(unsigned char)+0x10ec>
   3be60:	ebffb976 	bl	2a440 <strchr>
   3be64:	e3500000 	cmp	r0, #0
   3be68:	0a000001 	beq	3be74 <TermAnsi::handleAnsiChar(unsigned char)+0x136c>
   3be6c:	e3a00001 	mov	r0, #1
   3be70:	eafffb6f 	b	3ac34 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3be74:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3be78:	e3560002 	cmp	r6, #2
   3be7c:	1affffb8 	bne	3bd64 <TermAnsi::handleAnsiChar(unsigned char)+0x125c>
   3be80:	e1a01005 	mov	r1, r5
   3be84:	e51f0294 	ldr	r0, [pc, #-660]	; 3bbf8 <TermAnsi::handleAnsiChar(unsigned char)+0x10f0>
   3be88:	ebffb96c 	bl	2a440 <strchr>
   3be8c:	e3500000 	cmp	r0, #0
   3be90:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3be94:	0afffb29 	beq	3ab40 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3be98:	e3a0500a 	mov	r5, #10
   3be9c:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   3bea0:	e28d0004 	add	r0, sp, #4
   3bea4:	e0050395 	mul	r5, r5, r3
   3bea8:	ebffba98 	bl	2a910 <atoi>
   3beac:	e0800005 	add	r0, r0, r5
   3beb0:	e5840054 	str	r0, [r4, #84]	; 0x54
   3beb4:	eaffffec 	b	3be6c <TermAnsi::handleAnsiChar(unsigned char)+0x1364>

0003beb8 <TermAnsi::putChar(unsigned long)>:
   3beb8:	e92d4070 	push	{r4, r5, r6, lr}
   3bebc:	e1a04001 	mov	r4, r1
   3bec0:	e6ef1071 	uxtb	r1, r1
   3bec4:	e1a05000 	mov	r5, r0
   3bec8:	ebfffb0e 	bl	3ab08 <TermAnsi::handleAnsiChar(unsigned char)>
   3becc:	e3500000 	cmp	r0, #0
   3bed0:	18bd8070 	popne	{r4, r5, r6, pc}
   3bed4:	e1a01004 	mov	r1, r4
   3bed8:	e1a00005 	mov	r0, r5
   3bedc:	ebfff97e 	bl	3a4dc <TermAnsi::writeCharAtCurs(int)>
   3bee0:	e3a03001 	mov	r3, #1
   3bee4:	e5c5301c 	strb	r3, [r5, #28]
   3bee8:	e8bd8070 	pop	{r4, r5, r6, pc}

0003beec <TermAnsi::dsr()>:
   3beec:	e12fff1e 	bx	lr

0003bef0 <TermAnsi::init(unsigned long, unsigned long)>:
   3bef0:	e92d4010 	push	{r4, lr}
   3bef4:	e1a04000 	mov	r4, r0
   3bef8:	eb00004b 	bl	3c02c <TermEmu::init(unsigned long, unsigned long)>
   3befc:	e5943000 	ldr	r3, [r4]
   3bf00:	e1a00004 	mov	r0, r4
   3bf04:	e8bd4010 	pop	{r4, lr}
   3bf08:	e5933010 	ldr	r3, [r3, #16]
   3bf0c:	e12fff13 	bx	r3

0003bf10 <TermAnsi::reset()>:
   3bf10:	e92d4070 	push	{r4, r5, r6, lr}
   3bf14:	e1a04000 	mov	r4, r0
   3bf18:	eb000029 	bl	3bfc4 <TermEmu::reset()>
   3bf1c:	e3a00000 	mov	r0, #0
   3bf20:	e3a01001 	mov	r1, #1
   3bf24:	e2843e82 	add	r3, r4, #2080	; 0x820
   3bf28:	e2842d22 	add	r2, r4, #2176	; 0x880
   3bf2c:	e283300b 	add	r3, r3, #11
   3bf30:	e282200f 	add	r2, r2, #15
   3bf34:	e5c4001d 	strb	r0, [r4, #29]
   3bf38:	e5840050 	str	r0, [r4, #80]	; 0x50
   3bf3c:	e5840054 	str	r0, [r4, #84]	; 0x54
   3bf40:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   3bf44:	e5e31001 	strb	r1, [r3, #1]!
   3bf48:	e1530002 	cmp	r3, r2
   3bf4c:	1afffffc 	bne	3bf44 <TermAnsi::reset()+0x34>
   3bf50:	e3a05000 	mov	r5, #0
   3bf54:	e3a0300f 	mov	r3, #15
   3bf58:	e3a02020 	mov	r2, #32
   3bf5c:	e5c45892 	strb	r5, [r4, #2194]	; 0x892
   3bf60:	e5c45893 	strb	r5, [r4, #2195]	; 0x893
   3bf64:	e1a01005 	mov	r1, r5
   3bf68:	e5c43891 	strb	r3, [r4, #2193]	; 0x891
   3bf6c:	e5c42890 	strb	r2, [r4, #2192]	; 0x890
   3bf70:	e2840030 	add	r0, r4, #48	; 0x30
   3bf74:	ebffb7f2 	bl	29f44 <memset>
   3bf78:	e5c4502c 	strb	r5, [r4, #44]	; 0x2c
   3bf7c:	e5845050 	str	r5, [r4, #80]	; 0x50
   3bf80:	e5845054 	str	r5, [r4, #84]	; 0x54
   3bf84:	e5c45058 	strb	r5, [r4, #88]	; 0x58
   3bf88:	e8bd8070 	pop	{r4, r5, r6, pc}

0003bf8c <TermEmu::sendData(int)>:
   3bf8c:	e92d4010 	push	{r4, lr}
   3bf90:	e1a04001 	mov	r4, r1
   3bf94:	e24dd008 	sub	sp, sp, #8
   3bf98:	ebffab0f 	bl	26bdc <CLogger::Get()>
   3bf9c:	e58d4000 	str	r4, [sp]
   3bfa0:	e59f3010 	ldr	r3, [pc, #16]	; 3bfb8 <TermEmu::sendData(int)+0x2c>
   3bfa4:	e3a02004 	mov	r2, #4
   3bfa8:	e59f100c 	ldr	r1, [pc, #12]	; 3bfbc <TermEmu::sendData(int)+0x30>
   3bfac:	ebffaa47 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3bfb0:	e28dd008 	add	sp, sp, #8
   3bfb4:	e8bd8010 	pop	{r4, pc}
   3bfb8:	00047958 	.word	0x00047958
   3bfbc:	00047968 	.word	0x00047968

0003bfc0 <TermEmu::putChar(unsigned long)>:
   3bfc0:	e12fff1e 	bx	lr

0003bfc4 <TermEmu::reset()>:
   3bfc4:	e12fff1e 	bx	lr

0003bfc8 <TermEmu::~TermEmu()>:
   3bfc8:	e92d4010 	push	{r4, lr}
   3bfcc:	e1a04000 	mov	r4, r0
   3bfd0:	e5900004 	ldr	r0, [r0, #4]
   3bfd4:	e59f3014 	ldr	r3, [pc, #20]	; 3bff0 <TermEmu::~TermEmu()+0x28>
   3bfd8:	e3500000 	cmp	r0, #0
   3bfdc:	e5843000 	str	r3, [r4]
   3bfe0:	0a000000 	beq	3bfe8 <TermEmu::~TermEmu()+0x20>
   3bfe4:	ebffbc2e 	bl	2b0a4 <operator delete[](void*)>
   3bfe8:	e1a00004 	mov	r0, r4
   3bfec:	e8bd8010 	pop	{r4, pc}
   3bff0:	000479d8 	.word	0x000479d8

0003bff4 <TermEmu::~TermEmu()>:
   3bff4:	e92d4010 	push	{r4, lr}
   3bff8:	e1a04000 	mov	r4, r0
   3bffc:	e5900004 	ldr	r0, [r0, #4]
   3c000:	e59f3020 	ldr	r3, [pc, #32]	; 3c028 <TermEmu::~TermEmu()+0x34>
   3c004:	e3500000 	cmp	r0, #0
   3c008:	e5843000 	str	r3, [r4]
   3c00c:	0a000000 	beq	3c014 <TermEmu::~TermEmu()+0x20>
   3c010:	ebffbc23 	bl	2b0a4 <operator delete[](void*)>
   3c014:	e1a00004 	mov	r0, r4
   3c018:	e3a0102c 	mov	r1, #44	; 0x2c
   3c01c:	ebffbc26 	bl	2b0bc <operator delete(void*, unsigned int)>
   3c020:	e1a00004 	mov	r0, r4
   3c024:	e8bd8010 	pop	{r4, pc}
   3c028:	000479d8 	.word	0x000479d8

0003c02c <TermEmu::init(unsigned long, unsigned long)>:
   3c02c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3c030:	e1a04000 	mov	r4, r0
   3c034:	e5900004 	ldr	r0, [r0, #4]
   3c038:	e1a07001 	mov	r7, r1
   3c03c:	e3500000 	cmp	r0, #0
   3c040:	e1a08002 	mov	r8, r2
   3c044:	0a000000 	beq	3c04c <TermEmu::init(unsigned long, unsigned long)+0x20>
   3c048:	ebffbc15 	bl	2b0a4 <operator delete[](void*)>
   3c04c:	e0090798 	mul	r9, r8, r7
   3c050:	e379022e 	cmn	r9, #-536870910	; 0xe0000002
   3c054:	91a00109 	lslls	r0, r9, #2
   3c058:	83e00000 	mvnhi	r0, #0
   3c05c:	ebffbc09 	bl	2b088 <operator new[](unsigned int)>
   3c060:	e259c001 	subs	ip, r9, #1
   3c064:	51a03000 	movpl	r3, r0
   3c068:	53a06020 	movpl	r6, #32
   3c06c:	53a0500f 	movpl	r5, #15
   3c070:	53a0e000 	movpl	lr, #0
   3c074:	4a000007 	bmi	3c098 <TermEmu::init(unsigned long, unsigned long)+0x6c>
   3c078:	e24cc001 	sub	ip, ip, #1
   3c07c:	e37c0001 	cmn	ip, #1
   3c080:	e5c36000 	strb	r6, [r3]
   3c084:	e5c35001 	strb	r5, [r3, #1]
   3c088:	e5c3e002 	strb	lr, [r3, #2]
   3c08c:	e5c3e003 	strb	lr, [r3, #3]
   3c090:	e2833004 	add	r3, r3, #4
   3c094:	1afffff7 	bne	3c078 <TermEmu::init(unsigned long, unsigned long)+0x4c>
   3c098:	e3a03000 	mov	r3, #0
   3c09c:	e3a0105f 	mov	r1, #95	; 0x5f
   3c0a0:	e3a02020 	mov	r2, #32
   3c0a4:	e9840201 	stmib	r4, {r0, r9}
   3c0a8:	e584700c 	str	r7, [r4, #12]
   3c0ac:	e5848010 	str	r8, [r4, #16]
   3c0b0:	e5843014 	str	r3, [r4, #20]
   3c0b4:	e5843018 	str	r3, [r4, #24]
   3c0b8:	e5c4301c 	strb	r3, [r4, #28]
   3c0bc:	e5c4301d 	strb	r3, [r4, #29]
   3c0c0:	e5c4301e 	strb	r3, [r4, #30]
   3c0c4:	e5841020 	str	r1, [r4, #32]
   3c0c8:	e5842024 	str	r2, [r4, #36]	; 0x24
   3c0cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003c0d0 <TermEmu::TermEmu()>:
   3c0d0:	e3a02000 	mov	r2, #0
   3c0d4:	e92d4070 	push	{r4, r5, r6, lr}
   3c0d8:	e3a01020 	mov	r1, #32
   3c0dc:	e3a0605f 	mov	r6, #95	; 0x5f
   3c0e0:	e3a0400f 	mov	r4, #15
   3c0e4:	e3a0e050 	mov	lr, #80	; 0x50
   3c0e8:	e3a0c019 	mov	ip, #25
   3c0ec:	e59f5040 	ldr	r5, [pc, #64]	; 3c134 <TermEmu::TermEmu()+0x64>
   3c0f0:	e5806020 	str	r6, [r0, #32]
   3c0f4:	e5805000 	str	r5, [r0]
   3c0f8:	e5c04029 	strb	r4, [r0, #41]	; 0x29
   3c0fc:	e580e00c 	str	lr, [r0, #12]
   3c100:	e580c010 	str	ip, [r0, #16]
   3c104:	e5802014 	str	r2, [r0, #20]
   3c108:	e5802018 	str	r2, [r0, #24]
   3c10c:	e5c0201c 	strb	r2, [r0, #28]
   3c110:	e5c0201d 	strb	r2, [r0, #29]
   3c114:	e5c0201e 	strb	r2, [r0, #30]
   3c118:	e5c0202a 	strb	r2, [r0, #42]	; 0x2a
   3c11c:	e5c0202b 	strb	r2, [r0, #43]	; 0x2b
   3c120:	e5802004 	str	r2, [r0, #4]
   3c124:	e5802008 	str	r2, [r0, #8]
   3c128:	e5801024 	str	r1, [r0, #36]	; 0x24
   3c12c:	e5c01028 	strb	r1, [r0, #40]	; 0x28
   3c130:	e8bd8070 	pop	{r4, r5, r6, pc}
   3c134:	000479d8 	.word	0x000479d8

0003c138 <McTRS80CmdFormat::McTRS80CmdFormat()>:
   3c138:	e12fff1e 	bx	lr

0003c13c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>:
   3c13c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c140:	e24dd05c 	sub	sp, sp, #92	; 0x5c
   3c144:	e59d5084 	ldr	r5, [sp, #132]	; 0x84
   3c148:	e59d7080 	ldr	r7, [sp, #128]	; 0x80
   3c14c:	e2458002 	sub	r8, r5, #2
   3c150:	e3580000 	cmp	r8, #0
   3c154:	da00002b 	ble	3c208 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xcc>
   3c158:	e58d200c 	str	r2, [sp, #12]
   3c15c:	e1a0b003 	mov	fp, r3
   3c160:	e3a02000 	mov	r2, #0
   3c164:	e59fa250 	ldr	sl, [pc, #592]	; 3c3bc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x280>
   3c168:	e58d1008 	str	r1, [sp, #8]
   3c16c:	e2455001 	sub	r5, r5, #1
   3c170:	e1a03007 	mov	r3, r7
   3c174:	e7f39002 	ldrb	r9, [r3, r2]!
   3c178:	e2826002 	add	r6, r2, #2
   3c17c:	e5d34001 	ldrb	r4, [r3, #1]
   3c180:	e2493001 	sub	r3, r9, #1
   3c184:	e1540005 	cmp	r4, r5
   3c188:	a1a04005 	movge	r4, r5
   3c18c:	e3540000 	cmp	r4, #0
   3c190:	03a04c01 	moveq	r4, #256	; 0x100
   3c194:	e3530004 	cmp	r3, #4
   3c198:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3c19c:	ea00003b 	b	3c290 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x154>
   3c1a0:	0003c238 	.word	0x0003c238
   3c1a4:	0003c210 	.word	0x0003c210
   3c1a8:	0003c1f4 	.word	0x0003c1f4
   3c1ac:	0003c1dc 	.word	0x0003c1dc
   3c1b0:	0003c1b4 	.word	0x0003c1b4
   3c1b4:	ebffaa88 	bl	26bdc <CLogger::Get()>
   3c1b8:	e59f3200 	ldr	r3, [pc, #512]	; 3c3c0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x284>
   3c1bc:	e3a02004 	mov	r2, #4
   3c1c0:	e1a0100a 	mov	r1, sl
   3c1c4:	ebffa9c1 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c1c8:	e0862004 	add	r2, r6, r4
   3c1cc:	e1580002 	cmp	r8, r2
   3c1d0:	caffffe6 	bgt	3c170 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x34>
   3c1d4:	e28dd05c 	add	sp, sp, #92	; 0x5c
   3c1d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c1dc:	ebffaa7e 	bl	26bdc <CLogger::Get()>
   3c1e0:	e59f31dc 	ldr	r3, [pc, #476]	; 3c3c4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x288>
   3c1e4:	e3a02004 	mov	r2, #4
   3c1e8:	e1a0100a 	mov	r1, sl
   3c1ec:	ebffa9b7 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c1f0:	eafffff4 	b	3c1c8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3c1f4:	ebffaa78 	bl	26bdc <CLogger::Get()>
   3c1f8:	e59f31c8 	ldr	r3, [pc, #456]	; 3c3c8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x28c>
   3c1fc:	e3a02004 	mov	r2, #4
   3c200:	e59f11b4 	ldr	r1, [pc, #436]	; 3c3bc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x280>
   3c204:	ebffa9b1 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c208:	e28dd05c 	add	sp, sp, #92	; 0x5c
   3c20c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c210:	e3540001 	cmp	r4, #1
   3c214:	0a000048 	beq	3c33c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x200>
   3c218:	e3540002 	cmp	r4, #2
   3c21c:	0a000022 	beq	3c2ac <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x170>
   3c220:	ebffaa6d 	bl	26bdc <CLogger::Get()>
   3c224:	e59f31a0 	ldr	r3, [pc, #416]	; 3c3cc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x290>
   3c228:	e3a02004 	mov	r2, #4
   3c22c:	e1a0100a 	mov	r1, sl
   3c230:	ebffa9a6 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c234:	eaffffe3 	b	3c1c8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3c238:	e0873006 	add	r3, r7, r6
   3c23c:	e7d79006 	ldrb	r9, [r7, r6]
   3c240:	e5d33001 	ldrb	r3, [r3, #1]
   3c244:	e3540002 	cmp	r4, #2
   3c248:	d28440fe 	addle	r4, r4, #254	; 0xfe
   3c24c:	c2444002 	subgt	r4, r4, #2
   3c250:	e0899403 	add	r9, r9, r3, lsl #8
   3c254:	e2826004 	add	r6, r2, #4
   3c258:	e1a0300b 	mov	r3, fp
   3c25c:	e1a02004 	mov	r2, r4
   3c260:	e0871006 	add	r1, r7, r6
   3c264:	e1a00009 	mov	r0, r9
   3c268:	e59dc008 	ldr	ip, [sp, #8]
   3c26c:	e12fff3c 	blx	ip
   3c270:	ebffaa59 	bl	26bdc <CLogger::Get()>
   3c274:	e58d4004 	str	r4, [sp, #4]
   3c278:	e58d9000 	str	r9, [sp]
   3c27c:	e59f314c 	ldr	r3, [pc, #332]	; 3c3d0 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x294>
   3c280:	e3a02004 	mov	r2, #4
   3c284:	e1a0100a 	mov	r1, sl
   3c288:	ebffa990 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c28c:	eaffffcd 	b	3c1c8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3c290:	ebffaa51 	bl	26bdc <CLogger::Get()>
   3c294:	e58d9000 	str	r9, [sp]
   3c298:	e59f3134 	ldr	r3, [pc, #308]	; 3c3d4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x298>
   3c29c:	e3a02004 	mov	r2, #4
   3c2a0:	e1a0100a 	mov	r1, sl
   3c2a4:	ebffa989 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c2a8:	eaffffc6 	b	3c1c8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3c2ac:	e3a03000 	mov	r3, #0
   3c2b0:	e0871006 	add	r1, r7, r6
   3c2b4:	e5d1c001 	ldrb	ip, [r1, #1]
   3c2b8:	e7d71006 	ldrb	r1, [r7, r6]
   3c2bc:	e28d0058 	add	r0, sp, #88	; 0x58
   3c2c0:	e081140c 	add	r1, r1, ip, lsl #8
   3c2c4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   3c2c8:	e5201048 	str	r1, [r0, #-72]!	; 0xffffffb8
   3c2cc:	e58d3028 	str	r3, [sp, #40]	; 0x28
   3c2d0:	e1a0100b 	mov	r1, fp
   3c2d4:	e58d3024 	str	r3, [sp, #36]	; 0x24
   3c2d8:	e58d3020 	str	r3, [sp, #32]
   3c2dc:	e58d301c 	str	r3, [sp, #28]
   3c2e0:	e58d3018 	str	r3, [sp, #24]
   3c2e4:	e58d3014 	str	r3, [sp, #20]
   3c2e8:	e58d3040 	str	r3, [sp, #64]	; 0x40
   3c2ec:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   3c2f0:	e58d3038 	str	r3, [sp, #56]	; 0x38
   3c2f4:	e58d3034 	str	r3, [sp, #52]	; 0x34
   3c2f8:	e58d3030 	str	r3, [sp, #48]	; 0x30
   3c2fc:	e58d3054 	str	r3, [sp, #84]	; 0x54
   3c300:	e58d3050 	str	r3, [sp, #80]	; 0x50
   3c304:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   3c308:	e58d3048 	str	r3, [sp, #72]	; 0x48
   3c30c:	e58d3044 	str	r3, [sp, #68]	; 0x44
   3c310:	e59d300c 	ldr	r3, [sp, #12]
   3c314:	e2826004 	add	r6, r2, #4
   3c318:	e12fff33 	blx	r3
   3c31c:	ebffaa2e 	bl	26bdc <CLogger::Get()>
   3c320:	e59d2010 	ldr	r2, [sp, #16]
   3c324:	e59f30ac 	ldr	r3, [pc, #172]	; 3c3d8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x29c>
   3c328:	e58d2000 	str	r2, [sp]
   3c32c:	e1a0100a 	mov	r1, sl
   3c330:	e3a02004 	mov	r2, #4
   3c334:	ebffa965 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c338:	eaffffa2 	b	3c1c8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3c33c:	e3a03000 	mov	r3, #0
   3c340:	e7d72006 	ldrb	r2, [r7, r6]
   3c344:	e28d0058 	add	r0, sp, #88	; 0x58
   3c348:	e1a0100b 	mov	r1, fp
   3c34c:	e5202048 	str	r2, [r0, #-72]!	; 0xffffffb8
   3c350:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   3c354:	e58d3028 	str	r3, [sp, #40]	; 0x28
   3c358:	e58d3024 	str	r3, [sp, #36]	; 0x24
   3c35c:	e58d3020 	str	r3, [sp, #32]
   3c360:	e58d301c 	str	r3, [sp, #28]
   3c364:	e58d3018 	str	r3, [sp, #24]
   3c368:	e58d3014 	str	r3, [sp, #20]
   3c36c:	e58d3040 	str	r3, [sp, #64]	; 0x40
   3c370:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   3c374:	e58d3038 	str	r3, [sp, #56]	; 0x38
   3c378:	e58d3034 	str	r3, [sp, #52]	; 0x34
   3c37c:	e58d3030 	str	r3, [sp, #48]	; 0x30
   3c380:	e58d3054 	str	r3, [sp, #84]	; 0x54
   3c384:	e58d3050 	str	r3, [sp, #80]	; 0x50
   3c388:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   3c38c:	e58d3048 	str	r3, [sp, #72]	; 0x48
   3c390:	e58d3044 	str	r3, [sp, #68]	; 0x44
   3c394:	e59d300c 	ldr	r3, [sp, #12]
   3c398:	e12fff33 	blx	r3
   3c39c:	ebffaa0e 	bl	26bdc <CLogger::Get()>
   3c3a0:	e59d2010 	ldr	r2, [sp, #16]
   3c3a4:	e59f3030 	ldr	r3, [pc, #48]	; 3c3dc <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a0>
   3c3a8:	e58d2000 	str	r2, [sp]
   3c3ac:	e1a0100a 	mov	r1, sl
   3c3b0:	e3a02004 	mov	r2, #4
   3c3b4:	ebffa945 	bl	268d0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c3b8:	eaffff82 	b	3c1c8 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3c3bc:	00047a14 	.word	0x00047a14
   3c3c0:	00047a7c 	.word	0x00047a7c
   3c3c4:	00047a64 	.word	0x00047a64
   3c3c8:	00047a54 	.word	0x00047a54
   3c3cc:	00047a40 	.word	0x00047a40
   3c3d0:	000479f4 	.word	0x000479f4
   3c3d4:	00047a84 	.word	0x00047a84
   3c3d8:	00047a30 	.word	0x00047a30
   3c3dc:	00047a20 	.word	0x00047a20

0003c3e0 <Display::~Display()>:
   3c3e0:	e92d4010 	push	{r4, lr}
   3c3e4:	e1a04000 	mov	r4, r0
   3c3e8:	e59f301c 	ldr	r3, [pc, #28]	; 3c40c <Display::~Display()+0x2c>
   3c3ec:	e4803004 	str	r3, [r0], #4
   3c3f0:	eb0002c3 	bl	3cf04 <DisplayFX::~DisplayFX()>
   3c3f4:	e59f3014 	ldr	r3, [pc, #20]	; 3c410 <Display::~Display()+0x30>
   3c3f8:	e1a00004 	mov	r0, r4
   3c3fc:	e5843000 	str	r3, [r4]
   3c400:	ebffa2e5 	bl	24f9c <CDevice::~CDevice()>
   3c404:	e1a00004 	mov	r0, r4
   3c408:	e8bd8010 	pop	{r4, pc}
   3c40c:	00047ae0 	.word	0x00047ae0
   3c410:	00047aa4 	.word	0x00047aa4

0003c414 <Display::~Display()>:
   3c414:	e92d4010 	push	{r4, lr}
   3c418:	e1a04000 	mov	r4, r0
   3c41c:	e59f3028 	ldr	r3, [pc, #40]	; 3c44c <Display::~Display()+0x38>
   3c420:	e4803004 	str	r3, [r0], #4
   3c424:	eb0002b6 	bl	3cf04 <DisplayFX::~DisplayFX()>
   3c428:	e59f3020 	ldr	r3, [pc, #32]	; 3c450 <Display::~Display()+0x3c>
   3c42c:	e1a00004 	mov	r0, r4
   3c430:	e5843000 	str	r3, [r4]
   3c434:	ebffa2d8 	bl	24f9c <CDevice::~CDevice()>
   3c438:	e1a00004 	mov	r0, r4
   3c43c:	e3a01efa 	mov	r1, #4000	; 0xfa0
   3c440:	ebffbb1d 	bl	2b0bc <operator delete(void*, unsigned int)>
   3c444:	e1a00004 	mov	r0, r4
   3c448:	e8bd8010 	pop	{r4, pc}
   3c44c:	00047ae0 	.word	0x00047ae0
   3c450:	00047aa4 	.word	0x00047aa4

0003c454 <Display::foreground(DISPLAY_FX_COLOUR)>:
   3c454:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c458:	e3530000 	cmp	r3, #0
   3c45c:	012fff1e 	bxeq	lr
   3c460:	e1a02001 	mov	r2, r1
   3c464:	e2800004 	add	r0, r0, #4
   3c468:	e3a01000 	mov	r1, #0
   3c46c:	ea0003cf 	b	3d3b0 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>

0003c470 <Display::background(DISPLAY_FX_COLOUR)>:
   3c470:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c474:	e3530000 	cmp	r3, #0
   3c478:	012fff1e 	bxeq	lr
   3c47c:	e1a02001 	mov	r2, r1
   3c480:	e2800004 	add	r0, r0, #4
   3c484:	e3a01000 	mov	r1, #0
   3c488:	ea0003cd 	b	3d3c4 <DisplayFX::windowBackground(int, DISPLAY_FX_COLOUR)>

0003c48c <Display::write(int, int, char const*)>:
   3c48c:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c490:	e35c0000 	cmp	ip, #0
   3c494:	012fff1e 	bxeq	lr
   3c498:	e1a0c003 	mov	ip, r3
   3c49c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3c4a0:	e24dd00c 	sub	sp, sp, #12
   3c4a4:	e1a03002 	mov	r3, r2
   3c4a8:	e58dc000 	str	ip, [sp]
   3c4ac:	e1a02001 	mov	r2, r1
   3c4b0:	e2800004 	add	r0, r0, #4
   3c4b4:	e3a01000 	mov	r1, #0
   3c4b8:	eb000398 	bl	3d320 <DisplayFX::windowPut(int, int, int, char const*)>
   3c4bc:	e28dd00c 	add	sp, sp, #12
   3c4c0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003c4c4 <Display::write(int, int, int)>:
   3c4c4:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c4c8:	e35c0000 	cmp	ip, #0
   3c4cc:	012fff1e 	bxeq	lr
   3c4d0:	e1a0c003 	mov	ip, r3
   3c4d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3c4d8:	e24dd00c 	sub	sp, sp, #12
   3c4dc:	e1a03002 	mov	r3, r2
   3c4e0:	e58dc000 	str	ip, [sp]
   3c4e4:	e1a02001 	mov	r2, r1
   3c4e8:	e2800004 	add	r0, r0, #4
   3c4ec:	e3a01000 	mov	r1, #0
   3c4f0:	eb000315 	bl	3d14c <DisplayFX::windowPut(int, int, int, int)>
   3c4f4:	e28dd00c 	add	sp, sp, #12
   3c4f8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003c4fc <Display::setPixel(int, int, int, DISPLAY_FX_COLOUR)>:
   3c4fc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3c500:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c504:	e24dd00c 	sub	sp, sp, #12
   3c508:	e35c0000 	cmp	ip, #0
   3c50c:	e1dde1d0 	ldrsb	lr, [sp, #16]
   3c510:	0a000006 	beq	3c530 <Display::setPixel(int, int, int, DISPLAY_FX_COLOUR)+0x34>
   3c514:	e1a0c003 	mov	ip, r3
   3c518:	e2800004 	add	r0, r0, #4
   3c51c:	e1a03002 	mov	r3, r2
   3c520:	e88d5000 	stm	sp, {ip, lr}
   3c524:	e1a02001 	mov	r2, r1
   3c528:	e3a01000 	mov	r1, #0
   3c52c:	eb0003a9 	bl	3d3d8 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>
   3c530:	e28dd00c 	add	sp, sp, #12
   3c534:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003c538 <Display::getFrameBufferInfo(FrameBufferInfo&)>:
   3c538:	e1a02001 	mov	r2, r1
   3c53c:	e2800004 	add	r0, r0, #4
   3c540:	e3a01000 	mov	r1, #0
   3c544:	ea0003f1 	b	3d510 <DisplayFX::getFramebuffer(int, FrameBufferInfo&)>

0003c548 <Display::Write(void const*, unsigned int)>:
   3c548:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c54c:	e92d4010 	push	{r4, lr}
   3c550:	e3530000 	cmp	r3, #0
   3c554:	e1a04002 	mov	r4, r2
   3c558:	0a000001 	beq	3c564 <Display::Write(void const*, unsigned int)+0x1c>
   3c55c:	e2800004 	add	r0, r0, #4
   3c560:	eb0004f9 	bl	3d94c <DisplayFX::consolePut(char const*, unsigned int)>
   3c564:	e1a00004 	mov	r0, r4
   3c568:	e8bd8010 	pop	{r4, pc}

0003c56c <Display::targetLayout(int, int, int, int, int, int, WgfxFont*, int, int)>:
   3c56c:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c570:	e35c0000 	cmp	ip, #0
   3c574:	012fff1e 	bxeq	lr
   3c578:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3c57c:	e1a07003 	mov	r7, r3
   3c580:	e1a06002 	mov	r6, r2
   3c584:	e3a03fe1 	mov	r3, #900	; 0x384
   3c588:	e3a02000 	mov	r2, #0
   3c58c:	e24dd034 	sub	sp, sp, #52	; 0x34
   3c590:	e2804004 	add	r4, r0, #4
   3c594:	e1a05001 	mov	r5, r1
   3c598:	e1a00004 	mov	r0, r4
   3c59c:	e58d3000 	str	r3, [sp]
   3c5a0:	e1a01002 	mov	r1, r2
   3c5a4:	e3a03e41 	mov	r3, #1040	; 0x410
   3c5a8:	eb0002ce 	bl	3d0e8 <DisplayFX::screenRectClear(int, int, int, int)>
   3c5ac:	e3a03000 	mov	r3, #0
   3c5b0:	e3a02008 	mov	r2, #8
   3c5b4:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
   3c5b8:	e58d2028 	str	r2, [sp, #40]	; 0x28
   3c5bc:	e58d1020 	str	r1, [sp, #32]
   3c5c0:	e59d1058 	ldr	r1, [sp, #88]	; 0x58
   3c5c4:	e58d2024 	str	r2, [sp, #36]	; 0x24
   3c5c8:	e58d101c 	str	r1, [sp, #28]
   3c5cc:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   3c5d0:	e1a00004 	mov	r0, r4
   3c5d4:	e58d1018 	str	r1, [sp, #24]
   3c5d8:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
   3c5dc:	e88d00e0 	stm	sp, {r5, r6, r7}
   3c5e0:	e58d1014 	str	r1, [sp, #20]
   3c5e4:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   3c5e8:	e1a02003 	mov	r2, r3
   3c5ec:	e58d1010 	str	r1, [sp, #16]
   3c5f0:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
   3c5f4:	e58d100c 	str	r1, [sp, #12]
   3c5f8:	e1a01003 	mov	r1, r3
   3c5fc:	eb0003d9 	bl	3d568 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3c600:	e28dd034 	add	sp, sp, #52	; 0x34
   3c604:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0003c608 <Display::Display()>:
   3c608:	e92d4010 	push	{r4, lr}
   3c60c:	e1a04000 	mov	r4, r0
   3c610:	ebffa26f 	bl	24fd4 <CDevice::CDevice()>
   3c614:	e1a00004 	mov	r0, r4
   3c618:	e59f3014 	ldr	r3, [pc, #20]	; 3c634 <Display::Display()+0x2c>
   3c61c:	e4803004 	str	r3, [r0], #4
   3c620:	eb000214 	bl	3ce78 <DisplayFX::DisplayFX()>
   3c624:	e3a03000 	mov	r3, #0
   3c628:	e1a00004 	mov	r0, r4
   3c62c:	e5c43b50 	strb	r3, [r4, #2896]	; 0xb50
   3c630:	e8bd8010 	pop	{r4, pc}
   3c634:	00047ae0 	.word	0x00047ae0

0003c638 <Display::init()>:
   3c638:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3c63c:	e2809004 	add	r9, r0, #4
   3c640:	e24dd034 	sub	sp, sp, #52	; 0x34
   3c644:	e1a07000 	mov	r7, r0
   3c648:	e3a02fe1 	mov	r2, #900	; 0x384
   3c64c:	e3a01d19 	mov	r1, #1600	; 0x640
   3c650:	e1a00009 	mov	r0, r9
   3c654:	eb000236 	bl	3cf34 <DisplayFX::init(int, int)>
   3c658:	e3e05000 	mvn	r5, #0
   3c65c:	e3a04000 	mov	r4, #0
   3c660:	e3a06001 	mov	r6, #1
   3c664:	e3a08008 	mov	r8, #8
   3c668:	e3a0efdd 	mov	lr, #884	; 0x374
   3c66c:	e3a0cb01 	mov	ip, #1024	; 0x400
   3c670:	e1a00009 	mov	r0, r9
   3c674:	e88d5000 	stm	sp, {ip, lr}
   3c678:	e1a03004 	mov	r3, r4
   3c67c:	e1a02004 	mov	r2, r4
   3c680:	e1a01004 	mov	r1, r4
   3c684:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3c688:	e58d8024 	str	r8, [sp, #36]	; 0x24
   3c68c:	e58d800c 	str	r8, [sp, #12]
   3c690:	e58d8008 	str	r8, [sp, #8]
   3c694:	e58d5020 	str	r5, [sp, #32]
   3c698:	e58d501c 	str	r5, [sp, #28]
   3c69c:	e58d4018 	str	r4, [sp, #24]
   3c6a0:	e58d6014 	str	r6, [sp, #20]
   3c6a4:	e58d6010 	str	r6, [sp, #16]
   3c6a8:	eb0003ae 	bl	3d568 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3c6ac:	e1a00009 	mov	r0, r9
   3c6b0:	e1a03004 	mov	r3, r4
   3c6b4:	e1a01006 	mov	r1, r6
   3c6b8:	e59f20b0 	ldr	r2, [pc, #176]	; 3c770 <Display::init()+0x138>
   3c6bc:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3c6c0:	e58d4024 	str	r4, [sp, #36]	; 0x24
   3c6c4:	e58d5020 	str	r5, [sp, #32]
   3c6c8:	e58d501c 	str	r5, [sp, #28]
   3c6cc:	e58d4018 	str	r4, [sp, #24]
   3c6d0:	e58d6014 	str	r6, [sp, #20]
   3c6d4:	e58d6010 	str	r6, [sp, #16]
   3c6d8:	e58d500c 	str	r5, [sp, #12]
   3c6dc:	e58d5008 	str	r5, [sp, #8]
   3c6e0:	e58d5004 	str	r5, [sp, #4]
   3c6e4:	e58d5000 	str	r5, [sp]
   3c6e8:	eb00039e 	bl	3d568 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3c6ec:	e59f3080 	ldr	r3, [pc, #128]	; 3c774 <Display::init()+0x13c>
   3c6f0:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3c6f4:	e5933004 	ldr	r3, [r3, #4]
   3c6f8:	e59f2070 	ldr	r2, [pc, #112]	; 3c770 <Display::init()+0x138>
   3c6fc:	e1a03183 	lsl	r3, r3, #3
   3c700:	e1a00009 	mov	r0, r9
   3c704:	e3a01002 	mov	r1, #2
   3c708:	e58d4024 	str	r4, [sp, #36]	; 0x24
   3c70c:	e58d5020 	str	r5, [sp, #32]
   3c710:	e58d501c 	str	r5, [sp, #28]
   3c714:	e58d4018 	str	r4, [sp, #24]
   3c718:	e58d6014 	str	r6, [sp, #20]
   3c71c:	e58d6010 	str	r6, [sp, #16]
   3c720:	e58d500c 	str	r5, [sp, #12]
   3c724:	e58d5008 	str	r5, [sp, #8]
   3c728:	e58d5004 	str	r5, [sp, #4]
   3c72c:	e58d5000 	str	r5, [sp]
   3c730:	eb00038c 	bl	3d568 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3c734:	e1a00009 	mov	r0, r9
   3c738:	e3a01002 	mov	r1, #2
   3c73c:	eb0003ec 	bl	3d6f4 <DisplayFX::consoleSetWindow(int)>
   3c740:	e1a03004 	mov	r3, r4
   3c744:	e1a00007 	mov	r0, r7
   3c748:	e2872d11 	add	r2, r7, #1088	; 0x440
   3c74c:	e282200c 	add	r2, r2, #12
   3c750:	e5c03b51 	strb	r3, [r0, #2897]	; 0xb51
   3c754:	e2800064 	add	r0, r0, #100	; 0x64
   3c758:	e1500002 	cmp	r0, r2
   3c75c:	1afffffb 	bne	3c750 <Display::init()+0x118>
   3c760:	e3a00001 	mov	r0, #1
   3c764:	e5c70b50 	strb	r0, [r7, #2896]	; 0xb50
   3c768:	e28dd034 	add	sp, sp, #52	; 0x34
   3c76c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3c770:	0000041a 	.word	0x0000041a
   3c774:	0004b870 	.word	0x0004b870

0003c778 <Display::statusPut(int, int, char const*)>:
   3c778:	e351000a 	cmp	r1, #10
   3c77c:	c12fff1e 	bxgt	lr
   3c780:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3c784:	e3a04064 	mov	r4, #100	; 0x64
   3c788:	e0240194 	mla	r4, r4, r1, r0
   3c78c:	e2844eb5 	add	r4, r4, #2896	; 0xb50
   3c790:	e2844001 	add	r4, r4, #1
   3c794:	e24dd008 	sub	sp, sp, #8
   3c798:	e1a08000 	mov	r8, r0
   3c79c:	e1a05001 	mov	r5, r1
   3c7a0:	e1a00004 	mov	r0, r4
   3c7a4:	e1a01003 	mov	r1, r3
   3c7a8:	e1a06003 	mov	r6, r3
   3c7ac:	e1a07002 	mov	r7, r2
   3c7b0:	ebffb63f 	bl	2a0b4 <strcmp>
   3c7b4:	e3500000 	cmp	r0, #0
   3c7b8:	1a000001 	bne	3c7c4 <Display::statusPut(int, int, char const*)+0x4c>
   3c7bc:	e28dd008 	add	sp, sp, #8
   3c7c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3c7c4:	e3a02063 	mov	r2, #99	; 0x63
   3c7c8:	e1a00004 	mov	r0, r4
   3c7cc:	e1a01006 	mov	r1, r6
   3c7d0:	ebffb6f6 	bl	2a3b0 <strncpy>
   3c7d4:	e3570001 	cmp	r7, #1
   3c7d8:	03a02009 	moveq	r2, #9
   3c7dc:	0a000002 	beq	3c7ec <Display::statusPut(int, int, char const*)+0x74>
   3c7e0:	e3570000 	cmp	r7, #0
   3c7e4:	13a0200a 	movne	r2, #10
   3c7e8:	03a0200b 	moveq	r2, #11
   3c7ec:	e5d83b50 	ldrb	r3, [r8, #2896]	; 0xb50
   3c7f0:	e3530000 	cmp	r3, #0
   3c7f4:	0afffff0 	beq	3c7bc <Display::statusPut(int, int, char const*)+0x44>
   3c7f8:	e59f1060 	ldr	r1, [pc, #96]	; 3c860 <Display::statusPut(int, int, char const*)+0xe8>
   3c7fc:	e2884004 	add	r4, r8, #4
   3c800:	e0815185 	add	r5, r1, r5, lsl #3
   3c804:	e1a00004 	mov	r0, r4
   3c808:	e3a01001 	mov	r1, #1
   3c80c:	e595703c 	ldr	r7, [r5, #60]	; 0x3c
   3c810:	e5955040 	ldr	r5, [r5, #64]	; 0x40
   3c814:	eb0002e5 	bl	3d3b0 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>
   3c818:	e5d83b50 	ldrb	r3, [r8, #2896]	; 0xb50
   3c81c:	e3530000 	cmp	r3, #0
   3c820:	0affffe5 	beq	3c7bc <Display::statusPut(int, int, char const*)+0x44>
   3c824:	e1a03005 	mov	r3, r5
   3c828:	e58d6000 	str	r6, [sp]
   3c82c:	e1a02007 	mov	r2, r7
   3c830:	e3a01001 	mov	r1, #1
   3c834:	e1a00004 	mov	r0, r4
   3c838:	eb0002b8 	bl	3d320 <DisplayFX::windowPut(int, int, int, char const*)>
   3c83c:	e5d83b50 	ldrb	r3, [r8, #2896]	; 0xb50
   3c840:	e3530000 	cmp	r3, #0
   3c844:	0affffdc 	beq	3c7bc <Display::statusPut(int, int, char const*)+0x44>
   3c848:	e1a00004 	mov	r0, r4
   3c84c:	e3a0200f 	mov	r2, #15
   3c850:	e3a01001 	mov	r1, #1
   3c854:	e28dd008 	add	sp, sp, #8
   3c858:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3c85c:	ea0002d3 	b	3d3b0 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>
   3c860:	00047ad8 	.word	0x00047ad8

0003c864 <Display::windowForeground(int, DISPLAY_FX_COLOUR)>:
   3c864:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c868:	e3530000 	cmp	r3, #0
   3c86c:	012fff1e 	bxeq	lr
   3c870:	e2800004 	add	r0, r0, #4
   3c874:	ea0002cd 	b	3d3b0 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>

0003c878 <Display::windowBackground(int, DISPLAY_FX_COLOUR)>:
   3c878:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c87c:	e3530000 	cmp	r3, #0
   3c880:	012fff1e 	bxeq	lr
   3c884:	e2800004 	add	r0, r0, #4
   3c888:	ea0002cd 	b	3d3c4 <DisplayFX::windowBackground(int, DISPLAY_FX_COLOUR)>

0003c88c <Display::windowWrite(int, int, int, char const*)>:
   3c88c:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c890:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3c894:	e35c0000 	cmp	ip, #0
   3c898:	e59de004 	ldr	lr, [sp, #4]
   3c89c:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3c8a0:	e2800004 	add	r0, r0, #4
   3c8a4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3c8a8:	ea00029c 	b	3d320 <DisplayFX::windowPut(int, int, int, char const*)>

0003c8ac <Display::windowWrite(int, int, int, int)>:
   3c8ac:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c8b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3c8b4:	e35c0000 	cmp	ip, #0
   3c8b8:	e59de004 	ldr	lr, [sp, #4]
   3c8bc:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3c8c0:	e2800004 	add	r0, r0, #4
   3c8c4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3c8c8:	ea00021f 	b	3d14c <DisplayFX::windowPut(int, int, int, int)>

0003c8cc <Display::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>:
   3c8cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3c8d0:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c8d4:	e59de004 	ldr	lr, [sp, #4]
   3c8d8:	e35c0000 	cmp	ip, #0
   3c8dc:	e1ddc0d8 	ldrsb	ip, [sp, #8]
   3c8e0:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3c8e4:	e58dc008 	str	ip, [sp, #8]
   3c8e8:	e2800004 	add	r0, r0, #4
   3c8ec:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3c8f0:	ea0002b8 	b	3d3d8 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>

0003c8f4 <Display::consolePut(char const*)>:
   3c8f4:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c8f8:	e3530000 	cmp	r3, #0
   3c8fc:	012fff1e 	bxeq	lr
   3c900:	e2800004 	add	r0, r0, #4
   3c904:	ea000404 	b	3d91c <DisplayFX::consolePut(char const*)>

0003c908 <Display::consolePut(int)>:
   3c908:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c90c:	e3530000 	cmp	r3, #0
   3c910:	012fff1e 	bxeq	lr
   3c914:	e2800004 	add	r0, r0, #4
   3c918:	ea0003a3 	b	3d7ac <DisplayFX::consolePut(int)>

0003c91c <Display::consolePut(char const*, unsigned int)>:
   3c91c:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c920:	e3530000 	cmp	r3, #0
   3c924:	012fff1e 	bxeq	lr
   3c928:	e2800004 	add	r0, r0, #4
   3c92c:	ea000406 	b	3d94c <DisplayFX::consolePut(char const*, unsigned int)>

0003c930 <Display::consoleForeground(DISPLAY_FX_COLOUR)>:
   3c930:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c934:	e3530000 	cmp	r3, #0
   3c938:	012fff1e 	bxeq	lr
   3c93c:	e2800004 	add	r0, r0, #4
   3c940:	ea00035a 	b	3d6b0 <DisplayFX::consoleForeground(DISPLAY_FX_COLOUR)>

0003c944 <Display::consoleGetWidth()>:
   3c944:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c948:	e3530000 	cmp	r3, #0
   3c94c:	1a000001 	bne	3c958 <Display::consoleGetWidth()+0x14>
   3c950:	e1a00003 	mov	r0, r3
   3c954:	e12fff1e 	bx	lr
   3c958:	e2800004 	add	r0, r0, #4
   3c95c:	ea000358 	b	3d6c4 <DisplayFX::consoleGetWidth()>

0003c960 <Display::logDebug(char const*, char const*, char const*)>:
   3c960:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c964:	e35c0000 	cmp	ip, #0
   3c968:	012fff1e 	bxeq	lr
   3c96c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3c970:	e1a04000 	mov	r4, r0
   3c974:	e2805004 	add	r5, r0, #4
   3c978:	e1a00005 	mov	r0, r5
   3c97c:	e1a07003 	mov	r7, r3
   3c980:	e1a06002 	mov	r6, r2
   3c984:	eb0003e4 	bl	3d91c <DisplayFX::consolePut(char const*)>
   3c988:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3c98c:	e3530000 	cmp	r3, #0
   3c990:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3c994:	e59f1068 	ldr	r1, [pc, #104]	; 3ca04 <Display::logDebug(char const*, char const*, char const*)+0xa4>
   3c998:	e1a00005 	mov	r0, r5
   3c99c:	eb0003de 	bl	3d91c <DisplayFX::consolePut(char const*)>
   3c9a0:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3c9a4:	e3530000 	cmp	r3, #0
   3c9a8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3c9ac:	e1a01006 	mov	r1, r6
   3c9b0:	e1a00005 	mov	r0, r5
   3c9b4:	eb0003d8 	bl	3d91c <DisplayFX::consolePut(char const*)>
   3c9b8:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3c9bc:	e3530000 	cmp	r3, #0
   3c9c0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3c9c4:	e59f103c 	ldr	r1, [pc, #60]	; 3ca08 <Display::logDebug(char const*, char const*, char const*)+0xa8>
   3c9c8:	e1a00005 	mov	r0, r5
   3c9cc:	eb0003d2 	bl	3d91c <DisplayFX::consolePut(char const*)>
   3c9d0:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3c9d4:	e3530000 	cmp	r3, #0
   3c9d8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3c9dc:	e1a01007 	mov	r1, r7
   3c9e0:	e1a00005 	mov	r0, r5
   3c9e4:	eb0003cc 	bl	3d91c <DisplayFX::consolePut(char const*)>
   3c9e8:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3c9ec:	e3530000 	cmp	r3, #0
   3c9f0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3c9f4:	e1a00005 	mov	r0, r5
   3c9f8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3c9fc:	e59f1008 	ldr	r1, [pc, #8]	; 3ca0c <Display::logDebug(char const*, char const*, char const*)+0xac>
   3ca00:	ea0003c5 	b	3d91c <DisplayFX::consolePut(char const*)>
   3ca04:	00047b6c 	.word	0x00047b6c
   3ca08:	00047b70 	.word	0x00047b70
   3ca0c:	00047700 	.word	0x00047700

0003ca10 <DisplayBase::write(int, int, char const*)>:
   3ca10:	e12fff1e 	bx	lr

0003ca14 <DisplayBase::setPixel(int, int, int, DISPLAY_FX_COLOUR)>:
   3ca14:	e12fff1e 	bx	lr

0003ca18 <DisplayBase::getFrameBufferInfo(FrameBufferInfo&)>:
   3ca18:	e12fff1e 	bx	lr

0003ca1c <DisplayBase::~DisplayBase()>:
   3ca1c:	e92d4010 	push	{r4, lr}
   3ca20:	e1a04000 	mov	r4, r0
   3ca24:	e59f300c 	ldr	r3, [pc, #12]	; 3ca38 <DisplayBase::~DisplayBase()+0x1c>
   3ca28:	e5803000 	str	r3, [r0]
   3ca2c:	ebffa15a 	bl	24f9c <CDevice::~CDevice()>
   3ca30:	e1a00004 	mov	r0, r4
   3ca34:	e8bd8010 	pop	{r4, pc}
   3ca38:	00047aa4 	.word	0x00047aa4

0003ca3c <DisplayBase::~DisplayBase()>:
   3ca3c:	e92d4010 	push	{r4, lr}
   3ca40:	e1a04000 	mov	r4, r0
   3ca44:	e59f3018 	ldr	r3, [pc, #24]	; 3ca64 <DisplayBase::~DisplayBase()+0x28>
   3ca48:	e5803000 	str	r3, [r0]
   3ca4c:	ebffa152 	bl	24f9c <CDevice::~CDevice()>
   3ca50:	e1a00004 	mov	r0, r4
   3ca54:	e3a01004 	mov	r1, #4
   3ca58:	ebffb997 	bl	2b0bc <operator delete(void*, unsigned int)>
   3ca5c:	e1a00004 	mov	r0, r4
   3ca60:	e8bd8010 	pop	{r4, pc}
   3ca64:	00047aa4 	.word	0x00047aa4

0003ca68 <DisplayFX::windowScroll(int, int) [clone .part.3]>:
   3ca68:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3ca6c:	e3520000 	cmp	r2, #0
   3ca70:	e0224fc2 	eor	r4, r2, r2, asr #31
   3ca74:	e0444fc2 	sub	r4, r4, r2, asr #31
   3ca78:	e1a08000 	mov	r8, r0
   3ca7c:	e1a09001 	mov	r9, r1
   3ca80:	da00002e 	ble	3cb40 <DisplayFX::windowScroll(int, int) [clone .part.3]+0xd8>
   3ca84:	e3a05f8f 	mov	r5, #572	; 0x23c
   3ca88:	e0250195 	mla	r5, r5, r1, r0
   3ca8c:	e5956014 	ldr	r6, [r5, #20]
   3ca90:	e595701c 	ldr	r7, [r5, #28]
   3ca94:	e3560000 	cmp	r6, #0
   3ca98:	e5950008 	ldr	r0, [r5, #8]
   3ca9c:	d3a07000 	movle	r7, #0
   3caa0:	da000003 	ble	3cab4 <DisplayFX::windowScroll(int, int) [clone .part.3]+0x4c>
   3caa4:	e1a01006 	mov	r1, r6
   3caa8:	eb0004ee 	bl	3de68 <__aeabi_idiv>
   3caac:	e0000096 	mul	r0, r6, r0
   3cab0:	e0070097 	mul	r7, r7, r0
   3cab4:	e5951018 	ldr	r1, [r5, #24]
   3cab8:	e3510000 	cmp	r1, #0
   3cabc:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3cac0:	e3a0af8f 	mov	sl, #572	; 0x23c
   3cac4:	e5950010 	ldr	r0, [r5, #16]
   3cac8:	eb0004e6 	bl	3de68 <__aeabi_idiv>
   3cacc:	e02a899a 	mla	sl, sl, r9, r8
   3cad0:	e59a3018 	ldr	r3, [sl, #24]
   3cad4:	e59a2020 	ldr	r2, [sl, #32]
   3cad8:	e0000093 	mul	r0, r3, r0
   3cadc:	e0060092 	mul	r6, r2, r0
   3cae0:	e3560000 	cmp	r6, #0
   3cae4:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3cae8:	e3a05000 	mov	r5, #0
   3caec:	e0040493 	mul	r4, r3, r4
   3caf0:	e59a900c 	ldr	r9, [sl, #12]
   3caf4:	e59a3004 	ldr	r3, [sl, #4]
   3caf8:	e0249492 	mla	r4, r2, r4, r9
   3cafc:	e5982b38 	ldr	r2, [r8, #2872]	; 0xb38
   3cb00:	e0243492 	mla	r4, r2, r4, r3
   3cb04:	e0233992 	mla	r3, r2, r9, r3
   3cb08:	e5989b40 	ldr	r9, [r8, #2880]	; 0xb40
   3cb0c:	e0894004 	add	r4, r9, r4
   3cb10:	e0899003 	add	r9, r9, r3
   3cb14:	e1a01004 	mov	r1, r4
   3cb18:	e1a00009 	mov	r0, r9
   3cb1c:	e1a02007 	mov	r2, r7
   3cb20:	ebffb77e 	bl	2a920 <memcpy>
   3cb24:	e2855001 	add	r5, r5, #1
   3cb28:	e5983b38 	ldr	r3, [r8, #2872]	; 0xb38
   3cb2c:	e1560005 	cmp	r6, r5
   3cb30:	e0899003 	add	r9, r9, r3
   3cb34:	e0844003 	add	r4, r4, r3
   3cb38:	1afffff5 	bne	3cb14 <DisplayFX::windowScroll(int, int) [clone .part.3]+0xac>
   3cb3c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3cb40:	e3a03f8f 	mov	r3, #572	; 0x23c
   3cb44:	e0230193 	mla	r3, r3, r1, r0
   3cb48:	e5931018 	ldr	r1, [r3, #24]
   3cb4c:	e5930010 	ldr	r0, [r3, #16]
   3cb50:	e3510000 	cmp	r1, #0
   3cb54:	d3a00000 	movle	r0, #0
   3cb58:	da000000 	ble	3cb60 <DisplayFX::windowScroll(int, int) [clone .part.3]+0xf8>
   3cb5c:	eb0004c1 	bl	3de68 <__aeabi_idiv>
   3cb60:	e3a01f8f 	mov	r1, #572	; 0x23c
   3cb64:	e0218991 	mla	r1, r1, r9, r8
   3cb68:	e591c018 	ldr	ip, [r1, #24]
   3cb6c:	e0403004 	sub	r3, r0, r4
   3cb70:	e003039c 	mul	r3, ip, r3
   3cb74:	e591e00c 	ldr	lr, [r1, #12]
   3cb78:	e5915020 	ldr	r5, [r1, #32]
   3cb7c:	e5912004 	ldr	r2, [r1, #4]
   3cb80:	e023e395 	mla	r3, r5, r3, lr
   3cb84:	e0010c90 	mul	r1, r0, ip
   3cb88:	e598cb38 	ldr	ip, [r8, #2872]	; 0xb38
   3cb8c:	e2424001 	sub	r4, r2, #1
   3cb90:	e0202e9c 	mla	r0, ip, lr, r2
   3cb94:	e023439c 	mla	r3, ip, r3, r4
   3cb98:	e5982b40 	ldr	r2, [r8, #2880]	; 0xb40
   3cb9c:	e021e195 	mla	r1, r5, r1, lr
   3cba0:	e0823003 	add	r3, r2, r3
   3cba4:	e0820000 	add	r0, r2, r0
   3cba8:	e1530000 	cmp	r3, r0
   3cbac:	e021419c 	mla	r1, ip, r1, r4
   3cbb0:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   3cbb4:	e2811001 	add	r1, r1, #1
   3cbb8:	e0822001 	add	r2, r2, r1
   3cbbc:	e4531001 	ldrb	r1, [r3], #-1
   3cbc0:	e1500003 	cmp	r0, r3
   3cbc4:	e5621001 	strb	r1, [r2, #-1]!
   3cbc8:	1afffffb 	bne	3cbbc <DisplayFX::windowScroll(int, int) [clone .part.3]+0x154>
   3cbcc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003cbd0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]>:
   3cbd0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cbd4:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   3cbd8:	e292c001 	adds	ip, r2, #1
   3cbdc:	13a0c001 	movne	ip, #1
   3cbe0:	e3770001 	cmn	r7, #1
   3cbe4:	13a0c000 	movne	ip, #0
   3cbe8:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
   3cbec:	e59fe280 	ldr	lr, [pc, #640]	; 3ce74 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x2a4>
   3cbf0:	e3540000 	cmp	r4, #0
   3cbf4:	01a0400e 	moveq	r4, lr
   3cbf8:	e35c0000 	cmp	ip, #0
   3cbfc:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   3cc00:	e59da02c 	ldr	sl, [sp, #44]	; 0x2c
   3cc04:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
   3cc08:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
   3cc0c:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
   3cc10:	e59de048 	ldr	lr, [sp, #72]	; 0x48
   3cc14:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   3cc18:	0a000089 	beq	3ce44 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x274>
   3cc1c:	e3a0bf8f 	mov	fp, #572	; 0x23c
   3cc20:	e5907b30 	ldr	r7, [r0, #2864]	; 0xb30
   3cc24:	e02b019b 	mla	fp, fp, r1, r0
   3cc28:	e0477002 	sub	r7, r7, r2
   3cc2c:	e047708e 	sub	r7, r7, lr, lsl #1
   3cc30:	e58b7008 	str	r7, [fp, #8]
   3cc34:	e3a07f8f 	mov	r7, #572	; 0x23c
   3cc38:	e3750001 	cmn	r5, #1
   3cc3c:	05905b34 	ldreq	r5, [r0, #2868]	; 0xb34
   3cc40:	00270197 	mlaeq	r7, r7, r1, r0
   3cc44:	10050596 	mulne	r5, r6, r5
   3cc48:	10270197 	mlane	r7, r7, r1, r0
   3cc4c:	00455003 	subeq	r5, r5, r3
   3cc50:	0045508e 	subeq	r5, r5, lr, lsl #1
   3cc54:	e5875010 	str	r5, [r7, #16]
   3cc58:	e3a05f8f 	mov	r5, #572	; 0x23c
   3cc5c:	e3720001 	cmn	r2, #1
   3cc60:	00250195 	mlaeq	r5, r5, r1, r0
   3cc64:	05902b30 	ldreq	r2, [r0, #2864]	; 0xb30
   3cc68:	05957008 	ldreq	r7, [r5, #8]
   3cc6c:	1022e298 	mlane	r2, r8, r2, lr
   3cc70:	10250195 	mlane	r5, r5, r1, r0
   3cc74:	00422007 	subeq	r2, r2, r7
   3cc78:	00822fa2 	addeq	r2, r2, r2, lsr #31
   3cc7c:	01a020c2 	asreq	r2, r2, #1
   3cc80:	e5852004 	str	r2, [r5, #4]
   3cc84:	e3a02f8f 	mov	r2, #572	; 0x23c
   3cc88:	e023e396 	mla	r3, r6, r3, lr
   3cc8c:	e0220192 	mla	r2, r2, r1, r0
   3cc90:	e37a0001 	cmn	sl, #1
   3cc94:	e582300c 	str	r3, [r2, #12]
   3cc98:	05943000 	ldreq	r3, [r4]
   3cc9c:	e3a05f8f 	mov	r5, #572	; 0x23c
   3cca0:	05823014 	streq	r3, [r2, #20]
   3cca4:	e3a03f8f 	mov	r3, #572	; 0x23c
   3cca8:	e0230193 	mla	r3, r3, r1, r0
   3ccac:	1582a014 	strne	sl, [r2, #20]
   3ccb0:	e3790001 	cmn	r9, #1
   3ccb4:	05942004 	ldreq	r2, [r4, #4]
   3ccb8:	15839018 	strne	r9, [r3, #24]
   3ccbc:	05832018 	streq	r2, [r3, #24]
   3ccc0:	e37c0001 	cmn	ip, #1
   3ccc4:	135e0000 	cmpne	lr, #0
   3ccc8:	e0250195 	mla	r5, r5, r1, r0
   3cccc:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
   3ccd0:	e585801c 	str	r8, [r5, #28]
   3ccd4:	e5853028 	str	r3, [r5, #40]	; 0x28
   3ccd8:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
   3ccdc:	e5856020 	str	r6, [r5, #32]
   3cce0:	e585402c 	str	r4, [r5, #44]	; 0x2c
   3cce4:	e5853024 	str	r3, [r5, #36]	; 0x24
   3cce8:	da000050 	ble	3ce30 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x260>
   3ccec:	e3a06000 	mov	r6, #0
   3ccf0:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3ccf4:	e6efc07c 	uxtb	ip, ip
   3ccf8:	e1a0708e 	lsl	r7, lr, #1
   3ccfc:	e595900c 	ldr	r9, [r5, #12]
   3cd00:	e5954004 	ldr	r4, [r5, #4]
   3cd04:	e049900e 	sub	r9, r9, lr
   3cd08:	e0892006 	add	r2, r9, r6
   3cd0c:	e044400e 	sub	r4, r4, lr
   3cd10:	e0224293 	mla	r2, r3, r2, r4
   3cd14:	e595a008 	ldr	sl, [r5, #8]
   3cd18:	e5908b40 	ldr	r8, [r0, #2880]	; 0xb40
   3cd1c:	e087a00a 	add	sl, r7, sl
   3cd20:	e35a0000 	cmp	sl, #0
   3cd24:	e0882002 	add	r2, r8, r2
   3cd28:	da00004f 	ble	3ce6c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x29c>
   3cd2c:	e082300a 	add	r3, r2, sl
   3cd30:	e4c2c001 	strb	ip, [r2], #1
   3cd34:	e1520003 	cmp	r2, r3
   3cd38:	1afffffc 	bne	3cd30 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x160>
   3cd3c:	e595900c 	ldr	r9, [r5, #12]
   3cd40:	e595a010 	ldr	sl, [r5, #16]
   3cd44:	e5954004 	ldr	r4, [r5, #4]
   3cd48:	e08a2009 	add	r2, sl, r9
   3cd4c:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3cd50:	e0822006 	add	r2, r2, r6
   3cd54:	e044400e 	sub	r4, r4, lr
   3cd58:	e0224293 	mla	r2, r3, r2, r4
   3cd5c:	e595b008 	ldr	fp, [r5, #8]
   3cd60:	e5908b40 	ldr	r8, [r0, #2880]	; 0xb40
   3cd64:	e087b00b 	add	fp, r7, fp
   3cd68:	e35b0000 	cmp	fp, #0
   3cd6c:	e0882002 	add	r2, r8, r2
   3cd70:	da000009 	ble	3cd9c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x1cc>
   3cd74:	e082300b 	add	r3, r2, fp
   3cd78:	e4c2c001 	strb	ip, [r2], #1
   3cd7c:	e1520003 	cmp	r2, r3
   3cd80:	1afffffc 	bne	3cd78 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x1a8>
   3cd84:	e5954004 	ldr	r4, [r5, #4]
   3cd88:	e595900c 	ldr	r9, [r5, #12]
   3cd8c:	e595a010 	ldr	sl, [r5, #16]
   3cd90:	e5908b40 	ldr	r8, [r0, #2880]	; 0xb40
   3cd94:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3cd98:	e044400e 	sub	r4, r4, lr
   3cd9c:	e049900e 	sub	r9, r9, lr
   3cda0:	e0862004 	add	r2, r6, r4
   3cda4:	e0222993 	mla	r2, r3, r9, r2
   3cda8:	e087a00a 	add	sl, r7, sl
   3cdac:	e35a0000 	cmp	sl, #0
   3cdb0:	e0882002 	add	r2, r8, r2
   3cdb4:	da00001a 	ble	3ce24 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x254>
   3cdb8:	e3a04000 	mov	r4, #0
   3cdbc:	e5c2c000 	strb	ip, [r2]
   3cdc0:	e2844001 	add	r4, r4, #1
   3cdc4:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3cdc8:	e15a0004 	cmp	sl, r4
   3cdcc:	e0822003 	add	r2, r2, r3
   3cdd0:	1afffff9 	bne	3cdbc <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x1ec>
   3cdd4:	e5958004 	ldr	r8, [r5, #4]
   3cdd8:	e5954008 	ldr	r4, [r5, #8]
   3cddc:	e595200c 	ldr	r2, [r5, #12]
   3cde0:	e0844008 	add	r4, r4, r8
   3cde4:	e042200e 	sub	r2, r2, lr
   3cde8:	e0844006 	add	r4, r4, r6
   3cdec:	e0244293 	mla	r4, r3, r2, r4
   3cdf0:	e5958010 	ldr	r8, [r5, #16]
   3cdf4:	e5902b40 	ldr	r2, [r0, #2880]	; 0xb40
   3cdf8:	e0878008 	add	r8, r7, r8
   3cdfc:	e3580000 	cmp	r8, #0
   3ce00:	e0822004 	add	r2, r2, r4
   3ce04:	c3a04000 	movgt	r4, #0
   3ce08:	da000005 	ble	3ce24 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x254>
   3ce0c:	e5c2c000 	strb	ip, [r2]
   3ce10:	e2844001 	add	r4, r4, #1
   3ce14:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3ce18:	e1540008 	cmp	r4, r8
   3ce1c:	e0822003 	add	r2, r2, r3
   3ce20:	1afffff9 	bne	3ce0c <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x23c>
   3ce24:	e2866001 	add	r6, r6, #1
   3ce28:	e15e0006 	cmp	lr, r6
   3ce2c:	caffffb2 	bgt	3ccfc <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x12c>
   3ce30:	e3a03f8f 	mov	r3, #572	; 0x23c
   3ce34:	e3a02001 	mov	r2, #1
   3ce38:	e0010193 	mul	r1, r3, r1
   3ce3c:	e7c02001 	strb	r2, [r0, r1]
   3ce40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ce44:	e3770001 	cmn	r7, #1
   3ce48:	03a07f8f 	moveq	r7, #572	; 0x23c
   3ce4c:	13a0bf8f 	movne	fp, #572	; 0x23c
   3ce50:	00270197 	mlaeq	r7, r7, r1, r0
   3ce54:	10070798 	mulne	r7, r8, r7
   3ce58:	102b019b 	mlane	fp, fp, r1, r0
   3ce5c:	0590bb30 	ldreq	fp, [r0, #2864]	; 0xb30
   3ce60:	158b7008 	strne	r7, [fp, #8]
   3ce64:	0587b008 	streq	fp, [r7, #8]
   3ce68:	eaffff71 	b	3cc34 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x64>
   3ce6c:	e595a010 	ldr	sl, [r5, #16]
   3ce70:	eaffffca 	b	3cda0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x1d0>
   3ce74:	0004b870 	.word	0x0004b870

0003ce78 <DisplayFX::DisplayFX()>:
   3ce78:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3ce7c:	e3a02000 	mov	r2, #0
   3ce80:	e1a03000 	mov	r3, r0
   3ce84:	e3a01001 	mov	r1, #1
   3ce88:	e3a0e00f 	mov	lr, #15
   3ce8c:	e280ceb2 	add	ip, r0, #2848	; 0xb20
   3ce90:	e28cc00c 	add	ip, ip, #12
   3ce94:	e5c32000 	strb	r2, [r3]
   3ce98:	e583200c 	str	r2, [r3, #12]
   3ce9c:	e5832004 	str	r2, [r3, #4]
   3cea0:	e5832010 	str	r2, [r3, #16]
   3cea4:	e5832008 	str	r2, [r3, #8]
   3cea8:	e5832018 	str	r2, [r3, #24]
   3ceac:	e5832014 	str	r2, [r3, #20]
   3ceb0:	e5831020 	str	r1, [r3, #32]
   3ceb4:	e583101c 	str	r1, [r3, #28]
   3ceb8:	e5832024 	str	r2, [r3, #36]	; 0x24
   3cebc:	e583e028 	str	lr, [r3, #40]	; 0x28
   3cec0:	e583202c 	str	r2, [r3, #44]	; 0x2c
   3cec4:	e5832030 	str	r2, [r3, #48]	; 0x30
   3cec8:	e5832034 	str	r2, [r3, #52]	; 0x34
   3cecc:	e5c32038 	strb	r2, [r3, #56]	; 0x38
   3ced0:	e2833f8f 	add	r3, r3, #572	; 0x23c
   3ced4:	e153000c 	cmp	r3, ip
   3ced8:	1affffed 	bne	3ce94 <DisplayFX::DisplayFX()+0x1c>
   3cedc:	e5802b2c 	str	r2, [r0, #2860]	; 0xb2c
   3cee0:	e5802b30 	str	r2, [r0, #2864]	; 0xb30
   3cee4:	e5802b34 	str	r2, [r0, #2868]	; 0xb34
   3cee8:	e5802b38 	str	r2, [r0, #2872]	; 0xb38
   3ceec:	e5802b3c 	str	r2, [r0, #2876]	; 0xb3c
   3cef0:	e5802b40 	str	r2, [r0, #2880]	; 0xb40
   3cef4:	e5802b48 	str	r2, [r0, #2888]	; 0xb48
   3cef8:	e5c02b44 	strb	r2, [r0, #2884]	; 0xb44
   3cefc:	e5c0eb45 	strb	lr, [r0, #2885]	; 0xb45
   3cf00:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003cf04 <DisplayFX::~DisplayFX()>:
   3cf04:	e92d4070 	push	{r4, r5, r6, lr}
   3cf08:	e5904b2c 	ldr	r4, [r0, #2860]	; 0xb2c
   3cf0c:	e1a05000 	mov	r5, r0
   3cf10:	e3540000 	cmp	r4, #0
   3cf14:	0a000004 	beq	3cf2c <DisplayFX::~DisplayFX()+0x28>
   3cf18:	e1a00004 	mov	r0, r4
   3cf1c:	eb000518 	bl	3e384 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   3cf20:	e1a00004 	mov	r0, r4
   3cf24:	e3a01094 	mov	r1, #148	; 0x94
   3cf28:	ebffb863 	bl	2b0bc <operator delete(void*, unsigned int)>
   3cf2c:	e1a00005 	mov	r0, r5
   3cf30:	e8bd8070 	pop	{r4, r5, r6, pc}

0003cf34 <DisplayFX::init(int, int)>:
   3cf34:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3cf38:	e1a05000 	mov	r5, r0
   3cf3c:	e24dd034 	sub	sp, sp, #52	; 0x34
   3cf40:	e3a00094 	mov	r0, #148	; 0x94
   3cf44:	e1a06001 	mov	r6, r1
   3cf48:	e1a07002 	mov	r7, r2
   3cf4c:	ebffb84c 	bl	2b084 <operator new(unsigned int)>
   3cf50:	e3a04000 	mov	r4, #0
   3cf54:	e1a09000 	mov	r9, r0
   3cf58:	e58d4004 	str	r4, [sp, #4]
   3cf5c:	e58d4000 	str	r4, [sp]
   3cf60:	e3a03008 	mov	r3, #8
   3cf64:	e1a02007 	mov	r2, r7
   3cf68:	e1a01006 	mov	r1, r6
   3cf6c:	eb0004b5 	bl	3e248 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   3cf70:	e1a08004 	mov	r8, r4
   3cf74:	e1a03004 	mov	r3, r4
   3cf78:	e1a00009 	mov	r0, r9
   3cf7c:	e59f4138 	ldr	r4, [pc, #312]	; 3d0bc <DisplayFX::init(int, int)+0x188>
   3cf80:	e5859b2c 	str	r9, [r5, #2860]	; 0xb2c
   3cf84:	ea000000 	b	3cf8c <DisplayFX::init(int, int)+0x58>
   3cf88:	e5b43004 	ldr	r3, [r4, #4]!
   3cf8c:	e1a02803 	lsl	r2, r3, #16
   3cf90:	e1a01403 	lsl	r1, r3, #8
   3cf94:	e20228ff 	and	r2, r2, #16711680	; 0xff0000
   3cf98:	e1822c21 	orr	r2, r2, r1, lsr #24
   3cf9c:	e2033cff 	and	r3, r3, #65280	; 0xff00
   3cfa0:	e6ef1078 	uxtb	r1, r8
   3cfa4:	e1822003 	orr	r2, r2, r3
   3cfa8:	e2888001 	add	r8, r8, #1
   3cfac:	eb000511 	bl	3e3f8 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>
   3cfb0:	e3580c01 	cmp	r8, #256	; 0x100
   3cfb4:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3cfb8:	1afffff2 	bne	3cf88 <DisplayFX::init(int, int)+0x54>
   3cfbc:	e3500000 	cmp	r0, #0
   3cfc0:	0a000002 	beq	3cfd0 <DisplayFX::init(int, int)+0x9c>
   3cfc4:	eb000519 	bl	3e430 <CBcmFrameBuffer::Initialize()>
   3cfc8:	e2504000 	subs	r4, r0, #0
   3cfcc:	1a000003 	bne	3cfe0 <DisplayFX::init(int, int)+0xac>
   3cfd0:	e3a04000 	mov	r4, #0
   3cfd4:	e1a00004 	mov	r0, r4
   3cfd8:	e28dd034 	add	sp, sp, #52	; 0x34
   3cfdc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3cfe0:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3cfe4:	eb00054c 	bl	3e51c <CBcmFrameBuffer::GetDepth() const>
   3cfe8:	e3500008 	cmp	r0, #8
   3cfec:	1afffff7 	bne	3cfd0 <DisplayFX::init(int, int)+0x9c>
   3cff0:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3cff4:	eb00054a 	bl	3e524 <CBcmFrameBuffer::GetBuffer() const>
   3cff8:	e5850b40 	str	r0, [r5, #2880]	; 0xb40
   3cffc:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3d000:	eb000549 	bl	3e52c <CBcmFrameBuffer::GetSize() const>
   3d004:	e5850b3c 	str	r0, [r5, #2876]	; 0xb3c
   3d008:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3d00c:	eb000540 	bl	3e514 <CBcmFrameBuffer::GetPitch() const>
   3d010:	e5850b38 	str	r0, [r5, #2872]	; 0xb38
   3d014:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3d018:	eb000535 	bl	3e4f4 <CBcmFrameBuffer::GetWidth() const>
   3d01c:	e5850b30 	str	r0, [r5, #2864]	; 0xb30
   3d020:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3d024:	eb000534 	bl	3e4fc <CBcmFrameBuffer::GetHeight() const>
   3d028:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3d02c:	e5850b34 	str	r0, [r5, #2868]	; 0xb34
   3d030:	e3130003 	tst	r3, #3
   3d034:	1affffe5 	bne	3cfd0 <DisplayFX::init(int, int)+0x9c>
   3d038:	e5953b40 	ldr	r3, [r5, #2880]	; 0xb40
   3d03c:	e5952b3c 	ldr	r2, [r5, #2876]	; 0xb3c
   3d040:	e0832002 	add	r2, r3, r2
   3d044:	e1530002 	cmp	r3, r2
   3d048:	2a000003 	bcs	3d05c <DisplayFX::init(int, int)+0x128>
   3d04c:	e5d51b44 	ldrb	r1, [r5, #2884]	; 0xb44
   3d050:	e4c31001 	strb	r1, [r3], #1
   3d054:	e1520003 	cmp	r2, r3
   3d058:	1afffffb 	bne	3d04c <DisplayFX::init(int, int)+0x118>
   3d05c:	e3a08000 	mov	r8, #0
   3d060:	e3e00000 	mvn	r0, #0
   3d064:	e3a0c002 	mov	ip, #2
   3d068:	e58d0020 	str	r0, [sp, #32]
   3d06c:	e58d001c 	str	r0, [sp, #28]
   3d070:	e58d000c 	str	r0, [sp, #12]
   3d074:	e58d0008 	str	r0, [sp, #8]
   3d078:	e88d00c0 	stm	sp, {r6, r7}
   3d07c:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3d080:	e58d8024 	str	r8, [sp, #36]	; 0x24
   3d084:	e58d8018 	str	r8, [sp, #24]
   3d088:	e1a03008 	mov	r3, r8
   3d08c:	e1a02008 	mov	r2, r8
   3d090:	e1a01008 	mov	r1, r8
   3d094:	e58dc014 	str	ip, [sp, #20]
   3d098:	e58dc010 	str	ip, [sp, #16]
   3d09c:	e1a00005 	mov	r0, r5
   3d0a0:	ebfffeca 	bl	3cbd0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]>
   3d0a4:	e5c58000 	strb	r8, [r5]
   3d0a8:	e5c5823c 	strb	r8, [r5, #572]	; 0x23c
   3d0ac:	e5c58478 	strb	r8, [r5, #1144]	; 0x478
   3d0b0:	e5c586b4 	strb	r8, [r5, #1716]	; 0x6b4
   3d0b4:	e5c588f0 	strb	r8, [r5, #2288]	; 0x8f0
   3d0b8:	eaffffc5 	b	3cfd4 <DisplayFX::init(int, int)+0xa0>
   3d0bc:	00047b74 	.word	0x00047b74

0003d0c0 <DisplayFX::screenClear()>:
   3d0c0:	e5903b40 	ldr	r3, [r0, #2880]	; 0xb40
   3d0c4:	e5901b3c 	ldr	r1, [r0, #2876]	; 0xb3c
   3d0c8:	e0831001 	add	r1, r3, r1
   3d0cc:	e1530001 	cmp	r3, r1
   3d0d0:	212fff1e 	bxcs	lr
   3d0d4:	e5d02b44 	ldrb	r2, [r0, #2884]	; 0xb44
   3d0d8:	e4c32001 	strb	r2, [r3], #1
   3d0dc:	e1510003 	cmp	r1, r3
   3d0e0:	1afffffb 	bne	3d0d4 <DisplayFX::screenClear()+0x14>
   3d0e4:	e12fff1e 	bx	lr

0003d0e8 <DisplayFX::screenRectClear(int, int, int, int)>:
   3d0e8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d0ec:	e5904b38 	ldr	r4, [r0, #2872]	; 0xb38
   3d0f0:	e59d8020 	ldr	r8, [sp, #32]
   3d0f4:	e0221294 	mla	r2, r4, r2, r1
   3d0f8:	e5904b40 	ldr	r4, [r0, #2880]	; 0xb40
   3d0fc:	e3580000 	cmp	r8, #0
   3d100:	e0844002 	add	r4, r4, r2
   3d104:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d108:	e1a07003 	mov	r7, r3
   3d10c:	e1a06000 	mov	r6, r0
   3d110:	e3a05000 	mov	r5, #0
   3d114:	e2809d2d 	add	r9, r0, #2880	; 0xb40
   3d118:	e2899004 	add	r9, r9, #4
   3d11c:	e1a02007 	mov	r2, r7
   3d120:	e1a00004 	mov	r0, r4
   3d124:	e1d910d0 	ldrsb	r1, [r9]
   3d128:	ebffb385 	bl	29f44 <memset>
   3d12c:	e2855001 	add	r5, r5, #1
   3d130:	e5962b38 	ldr	r2, [r6, #2872]	; 0xb38
   3d134:	e1580005 	cmp	r8, r5
   3d138:	e0844002 	add	r4, r4, r2
   3d13c:	1afffff6 	bne	3d11c <DisplayFX::screenRectClear(int, int, int, int)+0x34>
   3d140:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003d144 <DisplayFX::screenBackground(DISPLAY_FX_COLOUR)>:
   3d144:	e5c01b44 	strb	r1, [r0, #2884]	; 0xb44
   3d148:	e12fff1e 	bx	lr

0003d14c <DisplayFX::windowPut(int, int, int, int)>:
   3d14c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d150:	e3510004 	cmp	r1, #4
   3d154:	e24dd014 	sub	sp, sp, #20
   3d158:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
   3d15c:	8a00006d 	bhi	3d318 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3d160:	e3a09f8f 	mov	r9, #572	; 0x23c
   3d164:	e0090199 	mul	r9, r9, r1
   3d168:	e7d0c009 	ldrb	ip, [r0, r9]
   3d16c:	e0809009 	add	r9, r0, r9
   3d170:	e35c0000 	cmp	ip, #0
   3d174:	0a000067 	beq	3d318 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3d178:	e1a05001 	mov	r5, r1
   3d17c:	e5991014 	ldr	r1, [r9, #20]
   3d180:	e1a07000 	mov	r7, r0
   3d184:	e3510000 	cmp	r1, #0
   3d188:	e5990008 	ldr	r0, [r9, #8]
   3d18c:	e1a06003 	mov	r6, r3
   3d190:	e1a0a002 	mov	sl, r2
   3d194:	d3a00000 	movle	r0, #0
   3d198:	da000000 	ble	3d1a0 <DisplayFX::windowPut(int, int, int, int)+0x54>
   3d19c:	eb000331 	bl	3de68 <__aeabi_idiv>
   3d1a0:	e15a0000 	cmp	sl, r0
   3d1a4:	aa00005b 	bge	3d318 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3d1a8:	e5991018 	ldr	r1, [r9, #24]
   3d1ac:	e5990010 	ldr	r0, [r9, #16]
   3d1b0:	e3510000 	cmp	r1, #0
   3d1b4:	d3a00000 	movle	r0, #0
   3d1b8:	da000000 	ble	3d1c0 <DisplayFX::windowPut(int, int, int, int)+0x74>
   3d1bc:	eb000329 	bl	3de68 <__aeabi_idiv>
   3d1c0:	e1560000 	cmp	r6, r0
   3d1c4:	aa000053 	bge	3d318 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3d1c8:	e3a02f8f 	mov	r2, #572	; 0x23c
   3d1cc:	e0227592 	mla	r2, r2, r5, r7
   3d1d0:	e5928014 	ldr	r8, [r2, #20]
   3d1d4:	e5923018 	ldr	r3, [r2, #24]
   3d1d8:	e0010a98 	mul	r1, r8, sl
   3d1dc:	e5990004 	ldr	r0, [r9, #4]
   3d1e0:	e58d3004 	str	r3, [sp, #4]
   3d1e4:	e0030693 	mul	r3, r3, r6
   3d1e8:	e592601c 	ldr	r6, [r2, #28]
   3d1ec:	e592e028 	ldr	lr, [r2, #40]	; 0x28
   3d1f0:	e0210196 	mla	r1, r6, r1, r0
   3d1f4:	e592002c 	ldr	r0, [r2, #44]	; 0x2c
   3d1f8:	e592c020 	ldr	ip, [r2, #32]
   3d1fc:	e592900c 	ldr	r9, [r2, #12]
   3d200:	e590b00c 	ldr	fp, [r0, #12]
   3d204:	e5902010 	ldr	r2, [r0, #16]
   3d208:	e37e0001 	cmn	lr, #1
   3d20c:	e02b249b 	mla	fp, fp, r4, r2
   3d210:	02872d2d 	addeq	r2, r7, #2880	; 0xb40
   3d214:	01d2e0d5 	ldrsbeq	lr, [r2, #5]
   3d218:	e3a02f8f 	mov	r2, #572	; 0x23c
   3d21c:	e0227592 	mla	r2, r2, r5, r7
   3d220:	e029939c 	mla	r9, ip, r3, r9
   3d224:	e5924024 	ldr	r4, [r2, #36]	; 0x24
   3d228:	e5973b38 	ldr	r3, [r7, #2872]	; 0xb38
   3d22c:	e3740001 	cmn	r4, #1
   3d230:	02872d2d 	addeq	r2, r7, #2880	; 0xb40
   3d234:	e0211993 	mla	r1, r3, r9, r1
   3d238:	01d240d4 	ldrsbeq	r4, [r2, #4]
   3d23c:	e59d2004 	ldr	r2, [sp, #4]
   3d240:	e5979b40 	ldr	r9, [r7, #2880]	; 0xb40
   3d244:	e3520000 	cmp	r2, #0
   3d248:	e58dc000 	str	ip, [sp]
   3d24c:	e0899001 	add	r9, r9, r1
   3d250:	da000030 	ble	3d318 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3d254:	e3a02f8f 	mov	r2, #572	; 0x23c
   3d258:	e3a01000 	mov	r1, #0
   3d25c:	e0227592 	mla	r2, r2, r5, r7
   3d260:	e58d1008 	str	r1, [sp, #8]
   3d264:	e58d200c 	str	r2, [sp, #12]
   3d268:	e6ef4074 	uxtb	r4, r4
   3d26c:	e6efe07e 	uxtb	lr, lr
   3d270:	e59d2000 	ldr	r2, [sp]
   3d274:	e3520000 	cmp	r2, #0
   3d278:	da00001c 	ble	3d2f0 <DisplayFX::windowPut(int, int, int, int)+0x1a4>
   3d27c:	e3a0a000 	mov	sl, #0
   3d280:	e3580000 	cmp	r8, #0
   3d284:	c1a0000b 	movgt	r0, fp
   3d288:	c1a03009 	movgt	r3, r9
   3d28c:	c3a01080 	movgt	r1, #128	; 0x80
   3d290:	c3a05000 	movgt	r5, #0
   3d294:	da000010 	ble	3d2dc <DisplayFX::windowPut(int, int, int, int)+0x190>
   3d298:	e3560000 	cmp	r6, #0
   3d29c:	da000007 	ble	3d2c0 <DisplayFX::windowPut(int, int, int, int)+0x174>
   3d2a0:	e083c006 	add	ip, r3, r6
   3d2a4:	e5d02000 	ldrb	r2, [r0]
   3d2a8:	e1120001 	tst	r2, r1
   3d2ac:	11a0200e 	movne	r2, lr
   3d2b0:	01a02004 	moveq	r2, r4
   3d2b4:	e4c32001 	strb	r2, [r3], #1
   3d2b8:	e153000c 	cmp	r3, ip
   3d2bc:	1afffff8 	bne	3d2a4 <DisplayFX::windowPut(int, int, int, int)+0x158>
   3d2c0:	e1b010c1 	asrs	r1, r1, #1
   3d2c4:	e2855001 	add	r5, r5, #1
   3d2c8:	03a01080 	moveq	r1, #128	; 0x80
   3d2cc:	02800001 	addeq	r0, r0, #1
   3d2d0:	e1580005 	cmp	r8, r5
   3d2d4:	1affffef 	bne	3d298 <DisplayFX::windowPut(int, int, int, int)+0x14c>
   3d2d8:	e5973b38 	ldr	r3, [r7, #2872]	; 0xb38
   3d2dc:	e59d2000 	ldr	r2, [sp]
   3d2e0:	e28aa001 	add	sl, sl, #1
   3d2e4:	e152000a 	cmp	r2, sl
   3d2e8:	e0899003 	add	r9, r9, r3
   3d2ec:	1affffe3 	bne	3d280 <DisplayFX::windowPut(int, int, int, int)+0x134>
   3d2f0:	e59d200c 	ldr	r2, [sp, #12]
   3d2f4:	e59d1008 	ldr	r1, [sp, #8]
   3d2f8:	e592202c 	ldr	r2, [r2, #44]	; 0x2c
   3d2fc:	e59d0004 	ldr	r0, [sp, #4]
   3d300:	e2811001 	add	r1, r1, #1
   3d304:	e5922008 	ldr	r2, [r2, #8]
   3d308:	e1500001 	cmp	r0, r1
   3d30c:	e58d1008 	str	r1, [sp, #8]
   3d310:	e08bb002 	add	fp, fp, r2
   3d314:	1affffd5 	bne	3d270 <DisplayFX::windowPut(int, int, int, int)+0x124>
   3d318:	e28dd014 	add	sp, sp, #20
   3d31c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003d320 <DisplayFX::windowPut(int, int, int, char const*)>:
   3d320:	e3510004 	cmp	r1, #4
   3d324:	812fff1e 	bxhi	lr
   3d328:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d32c:	e24dd00c 	sub	sp, sp, #12
   3d330:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   3d334:	e1dc50d0 	ldrsb	r5, [ip]
   3d338:	e3550000 	cmp	r5, #0
   3d33c:	0a000019 	beq	3d3a8 <DisplayFX::windowPut(int, int, int, char const*)+0x88>
   3d340:	e3a06f8f 	mov	r6, #572	; 0x23c
   3d344:	e1a0a003 	mov	sl, r3
   3d348:	e1a09000 	mov	r9, r0
   3d34c:	e1a07001 	mov	r7, r1
   3d350:	e1a0400c 	mov	r4, ip
   3d354:	e0260196 	mla	r6, r6, r1, r0
   3d358:	e042800c 	sub	r8, r2, ip
   3d35c:	ea000008 	b	3d384 <DisplayFX::windowPut(int, int, int, char const*)+0x64>
   3d360:	e58d5000 	str	r5, [sp]
   3d364:	e1a0200b 	mov	r2, fp
   3d368:	e1a0300a 	mov	r3, sl
   3d36c:	e1a01007 	mov	r1, r7
   3d370:	e1a00009 	mov	r0, r9
   3d374:	ebffff74 	bl	3d14c <DisplayFX::windowPut(int, int, int, int)>
   3d378:	e1f450d1 	ldrsb	r5, [r4, #1]!
   3d37c:	e3550000 	cmp	r5, #0
   3d380:	0a000008 	beq	3d3a8 <DisplayFX::windowPut(int, int, int, char const*)+0x88>
   3d384:	e5961014 	ldr	r1, [r6, #20]
   3d388:	e5960008 	ldr	r0, [r6, #8]
   3d38c:	e3510000 	cmp	r1, #0
   3d390:	e084b008 	add	fp, r4, r8
   3d394:	d3a00000 	movle	r0, #0
   3d398:	da000000 	ble	3d3a0 <DisplayFX::windowPut(int, int, int, char const*)+0x80>
   3d39c:	eb0002b1 	bl	3de68 <__aeabi_idiv>
   3d3a0:	e15b0000 	cmp	fp, r0
   3d3a4:	baffffed 	blt	3d360 <DisplayFX::windowPut(int, int, int, char const*)+0x40>
   3d3a8:	e28dd00c 	add	sp, sp, #12
   3d3ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003d3b0 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>:
   3d3b0:	e3510004 	cmp	r1, #4
   3d3b4:	93a03f8f 	movls	r3, #572	; 0x23c
   3d3b8:	90210193 	mlals	r1, r3, r1, r0
   3d3bc:	95812028 	strls	r2, [r1, #40]	; 0x28
   3d3c0:	e12fff1e 	bx	lr

0003d3c4 <DisplayFX::windowBackground(int, DISPLAY_FX_COLOUR)>:
   3d3c4:	e3510004 	cmp	r1, #4
   3d3c8:	93a03f8f 	movls	r3, #572	; 0x23c
   3d3cc:	90210193 	mlals	r1, r3, r1, r0
   3d3d0:	95812024 	strls	r2, [r1, #36]	; 0x24
   3d3d4:	e12fff1e 	bx	lr

0003d3d8 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>:
   3d3d8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3d3dc:	e3a05f8f 	mov	r5, #572	; 0x23c
   3d3e0:	e0250195 	mla	r5, r5, r1, r0
   3d3e4:	e595400c 	ldr	r4, [r5, #12]
   3d3e8:	e595c01c 	ldr	ip, [r5, #28]
   3d3ec:	e595e020 	ldr	lr, [r5, #32]
   3d3f0:	e5956004 	ldr	r6, [r5, #4]
   3d3f4:	e023439e 	mla	r3, lr, r3, r4
   3d3f8:	e026629c 	mla	r6, ip, r2, r6
   3d3fc:	e5904b38 	ldr	r4, [r0, #2872]	; 0xb38
   3d400:	e5955028 	ldr	r5, [r5, #40]	; 0x28
   3d404:	e0236394 	mla	r3, r4, r3, r6
   3d408:	e5906b40 	ldr	r6, [r0, #2880]	; 0xb40
   3d40c:	e3750001 	cmn	r5, #1
   3d410:	e0866003 	add	r6, r6, r3
   3d414:	02803d2d 	addeq	r3, r0, #2880	; 0xb40
   3d418:	01d350d5 	ldrsbeq	r5, [r3, #5]
   3d41c:	e3a03f8f 	mov	r3, #572	; 0x23c
   3d420:	e1dd21d8 	ldrsb	r2, [sp, #24]
   3d424:	e0230193 	mla	r3, r3, r1, r0
   3d428:	e3720001 	cmn	r2, #1
   3d42c:	11a05002 	movne	r5, r2
   3d430:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   3d434:	e59d7014 	ldr	r7, [sp, #20]
   3d438:	e3730001 	cmn	r3, #1
   3d43c:	02803d2d 	addeq	r3, r0, #2880	; 0xb40
   3d440:	01d330d4 	ldrsbeq	r3, [r3, #4]
   3d444:	e3570000 	cmp	r7, #0
   3d448:	16ef5075 	uxtbne	r5, r5
   3d44c:	06ef5073 	uxtbeq	r5, r3
   3d450:	e21c7003 	ands	r7, ip, #3
   3d454:	0a000014 	beq	3d4ac <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xd4>
   3d458:	e35e0000 	cmp	lr, #0
   3d45c:	d8bd80f0 	pople	{r4, r5, r6, r7, pc}
   3d460:	e3a0ef8f 	mov	lr, #572	; 0x23c
   3d464:	e3a07000 	mov	r7, #0
   3d468:	e02e019e 	mla	lr, lr, r1, r0
   3d46c:	e35c0000 	cmp	ip, #0
   3d470:	e02c6497 	mla	ip, r7, r4, r6
   3d474:	c1a0300c 	movgt	r3, ip
   3d478:	da000004 	ble	3d490 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xb8>
   3d47c:	e4c35001 	strb	r5, [r3], #1
   3d480:	e59e101c 	ldr	r1, [lr, #28]
   3d484:	e043200c 	sub	r2, r3, ip
   3d488:	e1510002 	cmp	r1, r2
   3d48c:	cafffffa 	bgt	3d47c <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xa4>
   3d490:	e59e3020 	ldr	r3, [lr, #32]
   3d494:	e2877001 	add	r7, r7, #1
   3d498:	e1530007 	cmp	r3, r7
   3d49c:	da00001a 	ble	3d50c <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x134>
   3d4a0:	e5904b38 	ldr	r4, [r0, #2872]	; 0xb38
   3d4a4:	e59ec01c 	ldr	ip, [lr, #28]
   3d4a8:	eaffffef 	b	3d46c <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x94>
   3d4ac:	e1a03805 	lsl	r3, r5, #16
   3d4b0:	e0833c05 	add	r3, r3, r5, lsl #24
   3d4b4:	e0833405 	add	r3, r3, r5, lsl #8
   3d4b8:	e35e0000 	cmp	lr, #0
   3d4bc:	e0835005 	add	r5, r3, r5
   3d4c0:	d8bd80f0 	pople	{r4, r5, r6, r7, pc}
   3d4c4:	e28c1003 	add	r1, ip, #3
   3d4c8:	e35c0000 	cmp	ip, #0
   3d4cc:	b1a0c001 	movlt	ip, r1
   3d4d0:	e1a00007 	mov	r0, r7
   3d4d4:	e1a0114c 	asr	r1, ip, #2
   3d4d8:	e3510000 	cmp	r1, #0
   3d4dc:	e1a02006 	mov	r2, r6
   3d4e0:	c1a03007 	movgt	r3, r7
   3d4e4:	da000003 	ble	3d4f8 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x120>
   3d4e8:	e2833001 	add	r3, r3, #1
   3d4ec:	e1530001 	cmp	r3, r1
   3d4f0:	e4825004 	str	r5, [r2], #4
   3d4f4:	1afffffb 	bne	3d4e8 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x110>
   3d4f8:	e2800001 	add	r0, r0, #1
   3d4fc:	e150000e 	cmp	r0, lr
   3d500:	e0866004 	add	r6, r6, r4
   3d504:	1afffff3 	bne	3d4d8 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x100>
   3d508:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3d50c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0003d510 <DisplayFX::getFramebuffer(int, FrameBufferInfo&)>:
   3d510:	e3a03f8f 	mov	r3, #572	; 0x23c
   3d514:	e92d4030 	push	{r4, r5, lr}
   3d518:	e3a04001 	mov	r4, #1
   3d51c:	e0210193 	mla	r1, r3, r1, r0
   3d520:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3d524:	e5915004 	ldr	r5, [r1, #4]
   3d528:	e591300c 	ldr	r3, [r1, #12]
   3d52c:	e590eb40 	ldr	lr, [r0, #2880]	; 0xb40
   3d530:	e0235c93 	mla	r3, r3, ip, r5
   3d534:	e5900b30 	ldr	r0, [r0, #2864]	; 0xb30
   3d538:	e5915008 	ldr	r5, [r1, #8]
   3d53c:	e5911010 	ldr	r1, [r1, #16]
   3d540:	e08e3003 	add	r3, lr, r3
   3d544:	e5823010 	str	r3, [r2, #16]
   3d548:	e582e000 	str	lr, [r2]
   3d54c:	e5820004 	str	r0, [r2, #4]
   3d550:	e5820008 	str	r0, [r2, #8]
   3d554:	e582c00c 	str	ip, [r2, #12]
   3d558:	e5825014 	str	r5, [r2, #20]
   3d55c:	e5821018 	str	r1, [r2, #24]
   3d560:	e582401c 	str	r4, [r2, #28]
   3d564:	e8bd8030 	pop	{r4, r5, pc}

0003d568 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>:
   3d568:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d56c:	e24dd00c 	sub	sp, sp, #12
   3d570:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   3d574:	e3510004 	cmp	r1, #4
   3d578:	e58dc004 	str	ip, [sp, #4]
   3d57c:	e59de038 	ldr	lr, [sp, #56]	; 0x38
   3d580:	8a000002 	bhi	3d590 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x28>
   3d584:	e28dd00c 	add	sp, sp, #12
   3d588:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d58c:	eafffd8f 	b	3cbd0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]>
   3d590:	e28dd00c 	add	sp, sp, #12
   3d594:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003d598 <DisplayFX::windowClear(int)>:
   3d598:	e3510004 	cmp	r1, #4
   3d59c:	812fff1e 	bxhi	lr
   3d5a0:	e3a03f8f 	mov	r3, #572	; 0x23c
   3d5a4:	e0010193 	mul	r1, r3, r1
   3d5a8:	e7d03001 	ldrb	r3, [r0, r1]
   3d5ac:	e0801001 	add	r1, r0, r1
   3d5b0:	e3530000 	cmp	r3, #0
   3d5b4:	012fff1e 	bxeq	lr
   3d5b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d5bc:	e5902b38 	ldr	r2, [r0, #2872]	; 0xb38
   3d5c0:	e591400c 	ldr	r4, [r1, #12]
   3d5c4:	e5913004 	ldr	r3, [r1, #4]
   3d5c8:	e5917010 	ldr	r7, [r1, #16]
   3d5cc:	e0233492 	mla	r3, r2, r4, r3
   3d5d0:	e5904b40 	ldr	r4, [r0, #2880]	; 0xb40
   3d5d4:	e3570000 	cmp	r7, #0
   3d5d8:	e0844003 	add	r4, r4, r3
   3d5dc:	e5919008 	ldr	r9, [r1, #8]
   3d5e0:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d5e4:	e1a06000 	mov	r6, r0
   3d5e8:	e3a05000 	mov	r5, #0
   3d5ec:	e2808d2d 	add	r8, r0, #2880	; 0xb40
   3d5f0:	e2888004 	add	r8, r8, #4
   3d5f4:	e1a00004 	mov	r0, r4
   3d5f8:	e1a02009 	mov	r2, r9
   3d5fc:	e1d810d0 	ldrsb	r1, [r8]
   3d600:	ebffb24f 	bl	29f44 <memset>
   3d604:	e2855001 	add	r5, r5, #1
   3d608:	e5963b38 	ldr	r3, [r6, #2872]	; 0xb38
   3d60c:	e1570005 	cmp	r7, r5
   3d610:	e0844003 	add	r4, r4, r3
   3d614:	1afffff6 	bne	3d5f4 <DisplayFX::windowClear(int)+0x5c>
   3d618:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003d61c <DisplayFX::windowGetPFB(int, int, int)>:
   3d61c:	e3a0cf8f 	mov	ip, #572	; 0x23c
   3d620:	e021019c 	mla	r1, ip, r1, r0
   3d624:	e92d4030 	push	{r4, r5, lr}
   3d628:	e591c018 	ldr	ip, [r1, #24]
   3d62c:	e591e014 	ldr	lr, [r1, #20]
   3d630:	e003039c 	mul	r3, ip, r3
   3d634:	e002029e 	mul	r2, lr, r2
   3d638:	e591c00c 	ldr	ip, [r1, #12]
   3d63c:	e5915020 	ldr	r5, [r1, #32]
   3d640:	e591401c 	ldr	r4, [r1, #28]
   3d644:	e591e004 	ldr	lr, [r1, #4]
   3d648:	e023c395 	mla	r3, r5, r3, ip
   3d64c:	e022e294 	mla	r2, r4, r2, lr
   3d650:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3d654:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3d658:	e023239c 	mla	r3, ip, r3, r2
   3d65c:	e0800003 	add	r0, r0, r3
   3d660:	e8bd8030 	pop	{r4, r5, pc}

0003d664 <DisplayFX::screenGetPFBXY(int, int)>:
   3d664:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3d668:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3d66c:	e0221293 	mla	r2, r3, r2, r1
   3d670:	e0800002 	add	r0, r0, r2
   3d674:	e12fff1e 	bx	lr

0003d678 <DisplayFX::windowGetPFBXY(int, int, int)>:
   3d678:	e3a0cf8f 	mov	ip, #572	; 0x23c
   3d67c:	e021019c 	mla	r1, ip, r1, r0
   3d680:	e92d4010 	push	{r4, lr}
   3d684:	e591c020 	ldr	ip, [r1, #32]
   3d688:	e591400c 	ldr	r4, [r1, #12]
   3d68c:	e591e01c 	ldr	lr, [r1, #28]
   3d690:	e5911004 	ldr	r1, [r1, #4]
   3d694:	e023439c 	mla	r3, ip, r3, r4
   3d698:	e022129e 	mla	r2, lr, r2, r1
   3d69c:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3d6a0:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3d6a4:	e023239c 	mla	r3, ip, r3, r2
   3d6a8:	e0800003 	add	r0, r0, r3
   3d6ac:	e8bd8010 	pop	{r4, pc}

0003d6b0 <DisplayFX::consoleForeground(DISPLAY_FX_COLOUR)>:
   3d6b0:	e3a02f8f 	mov	r2, #572	; 0x23c
   3d6b4:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3d6b8:	e0200392 	mla	r0, r2, r3, r0
   3d6bc:	e5801028 	str	r1, [r0, #40]	; 0x28
   3d6c0:	e12fff1e 	bx	lr

0003d6c4 <DisplayFX::consoleGetWidth()>:
   3d6c4:	e3a02f8f 	mov	r2, #572	; 0x23c
   3d6c8:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3d6cc:	e0200392 	mla	r0, r2, r3, r0
   3d6d0:	e5901014 	ldr	r1, [r0, #20]
   3d6d4:	e5900008 	ldr	r0, [r0, #8]
   3d6d8:	e3510000 	cmp	r1, #0
   3d6dc:	da000002 	ble	3d6ec <DisplayFX::consoleGetWidth()+0x28>
   3d6e0:	e92d4010 	push	{r4, lr}
   3d6e4:	eb0001df 	bl	3de68 <__aeabi_idiv>
   3d6e8:	e8bd8010 	pop	{r4, pc}
   3d6ec:	e3a00000 	mov	r0, #0
   3d6f0:	e12fff1e 	bx	lr

0003d6f4 <DisplayFX::consoleSetWindow(int)>:
   3d6f4:	e3510004 	cmp	r1, #4
   3d6f8:	95801b48 	strls	r1, [r0, #2888]	; 0xb48
   3d6fc:	e12fff1e 	bx	lr

0003d700 <DisplayFX::cursorCheck()>:
   3d700:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3d704:	e3a04f8f 	mov	r4, #572	; 0x23c
   3d708:	e5906b48 	ldr	r6, [r0, #2888]	; 0xb48
   3d70c:	e1a05000 	mov	r5, r0
   3d710:	e0240694 	mla	r4, r4, r6, r0
   3d714:	e5941014 	ldr	r1, [r4, #20]
   3d718:	e5940008 	ldr	r0, [r4, #8]
   3d71c:	e3510000 	cmp	r1, #0
   3d720:	e5947034 	ldr	r7, [r4, #52]	; 0x34
   3d724:	d3a00000 	movle	r0, #0
   3d728:	da000000 	ble	3d730 <DisplayFX::cursorCheck()+0x30>
   3d72c:	eb0001cd 	bl	3de68 <__aeabi_idiv>
   3d730:	e1570000 	cmp	r7, r0
   3d734:	ba000006 	blt	3d754 <DisplayFX::cursorCheck()+0x54>
   3d738:	e3a03f8f 	mov	r3, #572	; 0x23c
   3d73c:	e3a01000 	mov	r1, #0
   3d740:	e0235693 	mla	r3, r3, r6, r5
   3d744:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   3d748:	e5831034 	str	r1, [r3, #52]	; 0x34
   3d74c:	e2822001 	add	r2, r2, #1
   3d750:	e5832030 	str	r2, [r3, #48]	; 0x30
   3d754:	e3a03f8f 	mov	r3, #572	; 0x23c
   3d758:	e0235693 	mla	r3, r3, r6, r5
   3d75c:	e5941018 	ldr	r1, [r4, #24]
   3d760:	e5940010 	ldr	r0, [r4, #16]
   3d764:	e3510000 	cmp	r1, #0
   3d768:	e5937030 	ldr	r7, [r3, #48]	; 0x30
   3d76c:	d3a00000 	movle	r0, #0
   3d770:	da000000 	ble	3d778 <DisplayFX::cursorCheck()+0x78>
   3d774:	eb0001bb 	bl	3de68 <__aeabi_idiv>
   3d778:	e1570000 	cmp	r7, r0
   3d77c:	b8bd81f0 	poplt	{r4, r5, r6, r7, r8, pc}
   3d780:	e3a03f8f 	mov	r3, #572	; 0x23c
   3d784:	e0235693 	mla	r3, r3, r6, r5
   3d788:	e2477001 	sub	r7, r7, #1
   3d78c:	e3560004 	cmp	r6, #4
   3d790:	e5837030 	str	r7, [r3, #48]	; 0x30
   3d794:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   3d798:	e1a01006 	mov	r1, r6
   3d79c:	e1a00005 	mov	r0, r5
   3d7a0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3d7a4:	e3a02001 	mov	r2, #1
   3d7a8:	eafffcae 	b	3ca68 <DisplayFX::windowScroll(int, int) [clone .part.3]>

0003d7ac <DisplayFX::consolePut(int)>:
   3d7ac:	e92d4070 	push	{r4, r5, r6, lr}
   3d7b0:	e2413008 	sub	r3, r1, #8
   3d7b4:	e24dd008 	sub	sp, sp, #8
   3d7b8:	e1a04000 	mov	r4, r0
   3d7bc:	e3530005 	cmp	r3, #5
   3d7c0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3d7c4:	ea000043 	b	3d8d8 <DisplayFX::consolePut(int)+0x12c>
   3d7c8:	0003d89c 	.word	0x0003d89c
   3d7cc:	0003d828 	.word	0x0003d828
   3d7d0:	0003d7fc 	.word	0x0003d7fc
   3d7d4:	0003d8d8 	.word	0x0003d8d8
   3d7d8:	0003d8d8 	.word	0x0003d8d8
   3d7dc:	0003d7e0 	.word	0x0003d7e0
   3d7e0:	e3a01f8f 	mov	r1, #572	; 0x23c
   3d7e4:	e3a02000 	mov	r2, #0
   3d7e8:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3d7ec:	e0240391 	mla	r4, r1, r3, r0
   3d7f0:	e5842034 	str	r2, [r4, #52]	; 0x34
   3d7f4:	e28dd008 	add	sp, sp, #8
   3d7f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   3d7fc:	e3a01f8f 	mov	r1, #572	; 0x23c
   3d800:	e3a02000 	mov	r2, #0
   3d804:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3d808:	e0240391 	mla	r4, r1, r3, r0
   3d80c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3d810:	e5842034 	str	r2, [r4, #52]	; 0x34
   3d814:	e2833001 	add	r3, r3, #1
   3d818:	e5843030 	str	r3, [r4, #48]	; 0x30
   3d81c:	e28dd008 	add	sp, sp, #8
   3d820:	e8bd4070 	pop	{r4, r5, r6, lr}
   3d824:	eaffffb5 	b	3d700 <DisplayFX::cursorCheck()>
   3d828:	e3a02f8f 	mov	r2, #572	; 0x23c
   3d82c:	e5906b48 	ldr	r6, [r0, #2888]	; 0xb48
   3d830:	e0220692 	mla	r2, r2, r6, r0
   3d834:	e5923034 	ldr	r3, [r2, #52]	; 0x34
   3d838:	e5921014 	ldr	r1, [r2, #20]
   3d83c:	e283c001 	add	ip, r3, #1
   3d840:	e1a05fcc 	asr	r5, ip, #31
   3d844:	e1a00ea5 	lsr	r0, r5, #29
   3d848:	e08c5000 	add	r5, ip, r0
   3d84c:	e2055007 	and	r5, r5, #7
   3d850:	e0455000 	sub	r5, r5, r0
   3d854:	e2833009 	add	r3, r3, #9
   3d858:	e3510000 	cmp	r1, #0
   3d85c:	e5920008 	ldr	r0, [r2, #8]
   3d860:	e582c034 	str	ip, [r2, #52]	; 0x34
   3d864:	e0435005 	sub	r5, r3, r5
   3d868:	d3e00000 	mvnle	r0, #0
   3d86c:	da000001 	ble	3d878 <DisplayFX::consolePut(int)+0xcc>
   3d870:	eb00017c 	bl	3de68 <__aeabi_idiv>
   3d874:	e2400001 	sub	r0, r0, #1
   3d878:	e3a03f8f 	mov	r3, #572	; 0x23c
   3d87c:	e1550000 	cmp	r5, r0
   3d880:	a1a05000 	movge	r5, r0
   3d884:	e1a00004 	mov	r0, r4
   3d888:	e0264693 	mla	r6, r3, r6, r4
   3d88c:	e5865034 	str	r5, [r6, #52]	; 0x34
   3d890:	e28dd008 	add	sp, sp, #8
   3d894:	e8bd4070 	pop	{r4, r5, r6, lr}
   3d898:	eaffff98 	b	3d700 <DisplayFX::cursorCheck()>
   3d89c:	e3a00f8f 	mov	r0, #572	; 0x23c
   3d8a0:	e5941b48 	ldr	r1, [r4, #2888]	; 0xb48
   3d8a4:	e0204190 	mla	r0, r0, r1, r4
   3d8a8:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   3d8ac:	e3520000 	cmp	r2, #0
   3d8b0:	daffffcf 	ble	3d7f4 <DisplayFX::consolePut(int)+0x48>
   3d8b4:	e3a0c020 	mov	ip, #32
   3d8b8:	e2422001 	sub	r2, r2, #1
   3d8bc:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3d8c0:	e5802034 	str	r2, [r0, #52]	; 0x34
   3d8c4:	e1a00004 	mov	r0, r4
   3d8c8:	e58dc000 	str	ip, [sp]
   3d8cc:	ebfffe1e 	bl	3d14c <DisplayFX::windowPut(int, int, int, int)>
   3d8d0:	e28dd008 	add	sp, sp, #8
   3d8d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   3d8d8:	e3a05f8f 	mov	r5, #572	; 0x23c
   3d8dc:	e1a0c001 	mov	ip, r1
   3d8e0:	e5901b48 	ldr	r1, [r0, #2888]	; 0xb48
   3d8e4:	e0220195 	mla	r2, r5, r1, r0
   3d8e8:	e5923030 	ldr	r3, [r2, #48]	; 0x30
   3d8ec:	e5922034 	ldr	r2, [r2, #52]	; 0x34
   3d8f0:	e58dc000 	str	ip, [sp]
   3d8f4:	ebfffe14 	bl	3d14c <DisplayFX::windowPut(int, int, int, int)>
   3d8f8:	e1a00004 	mov	r0, r4
   3d8fc:	e5943b48 	ldr	r3, [r4, #2888]	; 0xb48
   3d900:	e0244395 	mla	r4, r5, r3, r4
   3d904:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3d908:	e2833001 	add	r3, r3, #1
   3d90c:	e5843034 	str	r3, [r4, #52]	; 0x34
   3d910:	e28dd008 	add	sp, sp, #8
   3d914:	e8bd4070 	pop	{r4, r5, r6, lr}
   3d918:	eaffff78 	b	3d700 <DisplayFX::cursorCheck()>

0003d91c <DisplayFX::consolePut(char const*)>:
   3d91c:	e92d4070 	push	{r4, r5, r6, lr}
   3d920:	e1a04001 	mov	r4, r1
   3d924:	e1d110d0 	ldrsb	r1, [r1]
   3d928:	e3510000 	cmp	r1, #0
   3d92c:	08bd8070 	popeq	{r4, r5, r6, pc}
   3d930:	e1a05000 	mov	r5, r0
   3d934:	e1a00005 	mov	r0, r5
   3d938:	ebffff9b 	bl	3d7ac <DisplayFX::consolePut(int)>
   3d93c:	e1f410d1 	ldrsb	r1, [r4, #1]!
   3d940:	e3510000 	cmp	r1, #0
   3d944:	1afffffa 	bne	3d934 <DisplayFX::consolePut(char const*)+0x18>
   3d948:	e8bd8070 	pop	{r4, r5, r6, pc}

0003d94c <DisplayFX::consolePut(char const*, unsigned int)>:
   3d94c:	e92d4070 	push	{r4, r5, r6, lr}
   3d950:	e2525000 	subs	r5, r2, #0
   3d954:	08bd8070 	popeq	{r4, r5, r6, pc}
   3d958:	e1a06000 	mov	r6, r0
   3d95c:	e1a04001 	mov	r4, r1
   3d960:	e0815005 	add	r5, r1, r5
   3d964:	e0d410d1 	ldrsb	r1, [r4], #1
   3d968:	e1a00006 	mov	r0, r6
   3d96c:	ebffff8e 	bl	3d7ac <DisplayFX::consolePut(int)>
   3d970:	e1540005 	cmp	r4, r5
   3d974:	1afffffa 	bne	3d964 <DisplayFX::consolePut(char const*, unsigned int)+0x18>
   3d978:	e8bd8070 	pop	{r4, r5, r6, pc}

0003d97c <DisplayFX::windowScroll(int, int)>:
   3d97c:	e16f3f12 	clz	r3, r2
   3d980:	e1a032a3 	lsr	r3, r3, #5
   3d984:	e3510004 	cmp	r1, #4
   3d988:	83833001 	orrhi	r3, r3, #1
   3d98c:	e3530000 	cmp	r3, #0
   3d990:	112fff1e 	bxne	lr
   3d994:	eafffc33 	b	3ca68 <DisplayFX::windowScroll(int, int) [clone .part.3]>

0003d998 <DisplayFX::drawHorizontal(int, int, int, int)>:
   3d998:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3d99c:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3d9a0:	e022129c 	mla	r2, ip, r2, r1
   3d9a4:	e3530000 	cmp	r3, #0
   3d9a8:	e0802002 	add	r2, r0, r2
   3d9ac:	d12fff1e 	bxle	lr
   3d9b0:	e5dd1000 	ldrb	r1, [sp]
   3d9b4:	e0823003 	add	r3, r2, r3
   3d9b8:	e4c21001 	strb	r1, [r2], #1
   3d9bc:	e1530002 	cmp	r3, r2
   3d9c0:	1afffffc 	bne	3d9b8 <DisplayFX::drawHorizontal(int, int, int, int)+0x20>
   3d9c4:	e12fff1e 	bx	lr

0003d9c8 <DisplayFX::drawVertical(int, int, int, int)>:
   3d9c8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3d9cc:	e590eb38 	ldr	lr, [r0, #2872]	; 0xb38
   3d9d0:	e590cb40 	ldr	ip, [r0, #2880]	; 0xb40
   3d9d4:	e022129e 	mla	r2, lr, r2, r1
   3d9d8:	e3530000 	cmp	r3, #0
   3d9dc:	e08c2002 	add	r2, ip, r2
   3d9e0:	d49df004 	pople	{pc}		; (ldrle pc, [sp], #4)
   3d9e4:	e3a01000 	mov	r1, #0
   3d9e8:	e5dde004 	ldrb	lr, [sp, #4]
   3d9ec:	e5c2e000 	strb	lr, [r2]
   3d9f0:	e2811001 	add	r1, r1, #1
   3d9f4:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3d9f8:	e1530001 	cmp	r3, r1
   3d9fc:	e082200c 	add	r2, r2, ip
   3da00:	1afffff9 	bne	3d9ec <DisplayFX::drawVertical(int, int, int, int)+0x24>
   3da04:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003da08 <DisplayFX::screenReadCell(int, int, int, unsigned char*)>:
   3da08:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3da0c:	e3510004 	cmp	r1, #4
   3da10:	e59d4020 	ldr	r4, [sp, #32]
   3da14:	88bd87f0 	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
   3da18:	e3a0af8f 	mov	sl, #572	; 0x23c
   3da1c:	e00a019a 	mul	sl, sl, r1
   3da20:	e080800a 	add	r8, r0, sl
   3da24:	e1a06001 	mov	r6, r1
   3da28:	e5981014 	ldr	r1, [r8, #20]
   3da2c:	e1a05000 	mov	r5, r0
   3da30:	e3510000 	cmp	r1, #0
   3da34:	e5980008 	ldr	r0, [r8, #8]
   3da38:	e1a07003 	mov	r7, r3
   3da3c:	e1a09002 	mov	r9, r2
   3da40:	d3a00000 	movle	r0, #0
   3da44:	da000000 	ble	3da4c <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x44>
   3da48:	eb000106 	bl	3de68 <__aeabi_idiv>
   3da4c:	e1590000 	cmp	r9, r0
   3da50:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   3da54:	e5981018 	ldr	r1, [r8, #24]
   3da58:	e5980010 	ldr	r0, [r8, #16]
   3da5c:	e3510000 	cmp	r1, #0
   3da60:	d3a00000 	movle	r0, #0
   3da64:	da000000 	ble	3da6c <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x64>
   3da68:	eb0000fe 	bl	3de68 <__aeabi_idiv>
   3da6c:	e1570000 	cmp	r7, r0
   3da70:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   3da74:	e7d5300a 	ldrb	r3, [r5, sl]
   3da78:	e3530000 	cmp	r3, #0
   3da7c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3da80:	e3a0cf8f 	mov	ip, #572	; 0x23c
   3da84:	e02c569c 	mla	ip, ip, r6, r5
   3da88:	e59c1014 	ldr	r1, [ip, #20]
   3da8c:	e59c3018 	ldr	r3, [ip, #24]
   3da90:	e0010991 	mul	r1, r1, r9
   3da94:	e0020793 	mul	r2, r3, r7
   3da98:	e598e004 	ldr	lr, [r8, #4]
   3da9c:	e59c601c 	ldr	r6, [ip, #28]
   3daa0:	e59c0020 	ldr	r0, [ip, #32]
   3daa4:	e021e196 	mla	r1, r6, r1, lr
   3daa8:	e59ce00c 	ldr	lr, [ip, #12]
   3daac:	e3530000 	cmp	r3, #0
   3dab0:	e022e290 	mla	r2, r0, r2, lr
   3dab4:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3dab8:	e5956b40 	ldr	r6, [r5, #2880]	; 0xb40
   3dabc:	e0221293 	mla	r2, r3, r2, r1
   3dac0:	e0866002 	add	r6, r6, r2
   3dac4:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dac8:	e3a08000 	mov	r8, #0
   3dacc:	e3500000 	cmp	r0, #0
   3dad0:	da00001a 	ble	3db40 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x138>
   3dad4:	e3a07000 	mov	r7, #0
   3dad8:	e59c2014 	ldr	r2, [ip, #20]
   3dadc:	e3520000 	cmp	r2, #0
   3dae0:	da000011 	ble	3db2c <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x124>
   3dae4:	e1a02006 	mov	r2, r6
   3dae8:	e3a0e000 	mov	lr, #0
   3daec:	e59c301c 	ldr	r3, [ip, #28]
   3daf0:	e3530000 	cmp	r3, #0
   3daf4:	da000007 	ble	3db18 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x110>
   3daf8:	e1a03004 	mov	r3, r4
   3dafc:	e4d21001 	ldrb	r1, [r2], #1
   3db00:	e4c31001 	strb	r1, [r3], #1
   3db04:	e59c001c 	ldr	r0, [ip, #28]
   3db08:	e0431004 	sub	r1, r3, r4
   3db0c:	e1500001 	cmp	r0, r1
   3db10:	cafffff9 	bgt	3dafc <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xf4>
   3db14:	e1a04003 	mov	r4, r3
   3db18:	e59c3014 	ldr	r3, [ip, #20]
   3db1c:	e28ee001 	add	lr, lr, #1
   3db20:	e153000e 	cmp	r3, lr
   3db24:	cafffff0 	bgt	3daec <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xe4>
   3db28:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3db2c:	e59c2020 	ldr	r2, [ip, #32]
   3db30:	e2877001 	add	r7, r7, #1
   3db34:	e1520007 	cmp	r2, r7
   3db38:	e0866003 	add	r6, r6, r3
   3db3c:	caffffe5 	bgt	3dad8 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xd0>
   3db40:	e59c2018 	ldr	r2, [ip, #24]
   3db44:	e2888001 	add	r8, r8, #1
   3db48:	e1520008 	cmp	r2, r8
   3db4c:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3db50:	e59c0020 	ldr	r0, [ip, #32]
   3db54:	eaffffdc 	b	3dacc <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xc4>

0003db58 <DisplayFX::cursorRestore()>:
   3db58:	e3a03f8f 	mov	r3, #572	; 0x23c
   3db5c:	e5901b48 	ldr	r1, [r0, #2888]	; 0xb48
   3db60:	e92d4010 	push	{r4, lr}
   3db64:	e0030193 	mul	r3, r3, r1
   3db68:	e7d02003 	ldrb	r2, [r0, r3]
   3db6c:	e24dd008 	sub	sp, sp, #8
   3db70:	e3520000 	cmp	r2, #0
   3db74:	e0804003 	add	r4, r0, r3
   3db78:	0a000005 	beq	3db94 <DisplayFX::cursorRestore()+0x3c>
   3db7c:	e283c039 	add	ip, r3, #57	; 0x39
   3db80:	e080c00c 	add	ip, r0, ip
   3db84:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3db88:	e5942034 	ldr	r2, [r4, #52]	; 0x34
   3db8c:	e58dc000 	str	ip, [sp]
   3db90:	ebffff9c 	bl	3da08 <DisplayFX::screenReadCell(int, int, int, unsigned char*)>
   3db94:	e28dd008 	add	sp, sp, #8
   3db98:	e8bd8010 	pop	{r4, pc}

0003db9c <DisplayFX::screenWriteCell(int, int, int, unsigned char*)>:
   3db9c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3dba0:	e3510004 	cmp	r1, #4
   3dba4:	e59d4020 	ldr	r4, [sp, #32]
   3dba8:	88bd87f0 	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dbac:	e3a0af8f 	mov	sl, #572	; 0x23c
   3dbb0:	e00a019a 	mul	sl, sl, r1
   3dbb4:	e080800a 	add	r8, r0, sl
   3dbb8:	e1a06001 	mov	r6, r1
   3dbbc:	e5981014 	ldr	r1, [r8, #20]
   3dbc0:	e1a05000 	mov	r5, r0
   3dbc4:	e3510000 	cmp	r1, #0
   3dbc8:	e5980008 	ldr	r0, [r8, #8]
   3dbcc:	e1a07003 	mov	r7, r3
   3dbd0:	e1a09002 	mov	r9, r2
   3dbd4:	d3a00000 	movle	r0, #0
   3dbd8:	da000000 	ble	3dbe0 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x44>
   3dbdc:	eb0000a1 	bl	3de68 <__aeabi_idiv>
   3dbe0:	e1590000 	cmp	r9, r0
   3dbe4:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dbe8:	e5981018 	ldr	r1, [r8, #24]
   3dbec:	e5980010 	ldr	r0, [r8, #16]
   3dbf0:	e3510000 	cmp	r1, #0
   3dbf4:	d3a00000 	movle	r0, #0
   3dbf8:	da000000 	ble	3dc00 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x64>
   3dbfc:	eb000099 	bl	3de68 <__aeabi_idiv>
   3dc00:	e1570000 	cmp	r7, r0
   3dc04:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dc08:	e7d5300a 	ldrb	r3, [r5, sl]
   3dc0c:	e3530000 	cmp	r3, #0
   3dc10:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dc14:	e3a00f8f 	mov	r0, #572	; 0x23c
   3dc18:	e0205690 	mla	r0, r0, r6, r5
   3dc1c:	e5901014 	ldr	r1, [r0, #20]
   3dc20:	e5903018 	ldr	r3, [r0, #24]
   3dc24:	e0010991 	mul	r1, r1, r9
   3dc28:	e0020793 	mul	r2, r3, r7
   3dc2c:	e598e004 	ldr	lr, [r8, #4]
   3dc30:	e590601c 	ldr	r6, [r0, #28]
   3dc34:	e590c020 	ldr	ip, [r0, #32]
   3dc38:	e021e196 	mla	r1, r6, r1, lr
   3dc3c:	e590e00c 	ldr	lr, [r0, #12]
   3dc40:	e3530000 	cmp	r3, #0
   3dc44:	e022e29c 	mla	r2, ip, r2, lr
   3dc48:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3dc4c:	e5956b40 	ldr	r6, [r5, #2880]	; 0xb40
   3dc50:	e0221293 	mla	r2, r3, r2, r1
   3dc54:	e0866002 	add	r6, r6, r2
   3dc58:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dc5c:	e3a08000 	mov	r8, #0
   3dc60:	e35c0000 	cmp	ip, #0
   3dc64:	da00001a 	ble	3dcd4 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x138>
   3dc68:	e3a07000 	mov	r7, #0
   3dc6c:	e5902014 	ldr	r2, [r0, #20]
   3dc70:	e3520000 	cmp	r2, #0
   3dc74:	da000011 	ble	3dcc0 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x124>
   3dc78:	e1a0c006 	mov	ip, r6
   3dc7c:	e3a0e000 	mov	lr, #0
   3dc80:	e590301c 	ldr	r3, [r0, #28]
   3dc84:	e3530000 	cmp	r3, #0
   3dc88:	da000007 	ble	3dcac <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x110>
   3dc8c:	e1a0300c 	mov	r3, ip
   3dc90:	e4d42001 	ldrb	r2, [r4], #1
   3dc94:	e4c32001 	strb	r2, [r3], #1
   3dc98:	e590101c 	ldr	r1, [r0, #28]
   3dc9c:	e043200c 	sub	r2, r3, ip
   3dca0:	e1510002 	cmp	r1, r2
   3dca4:	cafffff9 	bgt	3dc90 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xf4>
   3dca8:	e1a0c003 	mov	ip, r3
   3dcac:	e5903014 	ldr	r3, [r0, #20]
   3dcb0:	e28ee001 	add	lr, lr, #1
   3dcb4:	e153000e 	cmp	r3, lr
   3dcb8:	cafffff0 	bgt	3dc80 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xe4>
   3dcbc:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3dcc0:	e5902020 	ldr	r2, [r0, #32]
   3dcc4:	e2877001 	add	r7, r7, #1
   3dcc8:	e1520007 	cmp	r2, r7
   3dccc:	e0866003 	add	r6, r6, r3
   3dcd0:	caffffe5 	bgt	3dc6c <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xd0>
   3dcd4:	e5902018 	ldr	r2, [r0, #24]
   3dcd8:	e2888001 	add	r8, r8, #1
   3dcdc:	e1520008 	cmp	r2, r8
   3dce0:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dce4:	e590c020 	ldr	ip, [r0, #32]
   3dce8:	eaffffdc 	b	3dc60 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xc4>

0003dcec <DisplayFX::cursorRender()>:
   3dcec:	e92d4030 	push	{r4, r5, lr}
   3dcf0:	e3a05f8f 	mov	r5, #572	; 0x23c
   3dcf4:	e5901b48 	ldr	r1, [r0, #2888]	; 0xb48
   3dcf8:	e24dd00c 	sub	sp, sp, #12
   3dcfc:	e0030195 	mul	r3, r5, r1
   3dd00:	e7d0c003 	ldrb	ip, [r0, r3]
   3dd04:	e080e003 	add	lr, r0, r3
   3dd08:	e35c0000 	cmp	ip, #0
   3dd0c:	0a00000e 	beq	3dd4c <DisplayFX::cursorRender()+0x60>
   3dd10:	e1a04000 	mov	r4, r0
   3dd14:	e283c039 	add	ip, r3, #57	; 0x39
   3dd18:	e080c00c 	add	ip, r0, ip
   3dd1c:	e59e3030 	ldr	r3, [lr, #48]	; 0x30
   3dd20:	e59e2034 	ldr	r2, [lr, #52]	; 0x34
   3dd24:	e58dc000 	str	ip, [sp]
   3dd28:	ebffff9b 	bl	3db9c <DisplayFX::screenWriteCell(int, int, int, unsigned char*)>
   3dd2c:	e3a0c05f 	mov	ip, #95	; 0x5f
   3dd30:	e5941b48 	ldr	r1, [r4, #2888]	; 0xb48
   3dd34:	e1a00004 	mov	r0, r4
   3dd38:	e0224195 	mla	r2, r5, r1, r4
   3dd3c:	e5923030 	ldr	r3, [r2, #48]	; 0x30
   3dd40:	e5922034 	ldr	r2, [r2, #52]	; 0x34
   3dd44:	e58dc000 	str	ip, [sp]
   3dd48:	ebfffcff 	bl	3d14c <DisplayFX::windowPut(int, int, int, int)>
   3dd4c:	e28dd00c 	add	sp, sp, #12
   3dd50:	e8bd8030 	pop	{r4, r5, pc}

0003dd54 <__aeabi_uidiv>:
   3dd54:	e2512001 	subs	r2, r1, #1
   3dd58:	012fff1e 	bxeq	lr
   3dd5c:	3a000036 	bcc	3de3c <__aeabi_uidiv+0xe8>
   3dd60:	e1500001 	cmp	r0, r1
   3dd64:	9a000022 	bls	3ddf4 <__aeabi_uidiv+0xa0>
   3dd68:	e1110002 	tst	r1, r2
   3dd6c:	0a000023 	beq	3de00 <__aeabi_uidiv+0xac>
   3dd70:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   3dd74:	01a01181 	lsleq	r1, r1, #3
   3dd78:	03a03008 	moveq	r3, #8
   3dd7c:	13a03001 	movne	r3, #1
   3dd80:	e3510201 	cmp	r1, #268435456	; 0x10000000
   3dd84:	31510000 	cmpcc	r1, r0
   3dd88:	31a01201 	lslcc	r1, r1, #4
   3dd8c:	31a03203 	lslcc	r3, r3, #4
   3dd90:	3afffffa 	bcc	3dd80 <__aeabi_uidiv+0x2c>
   3dd94:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   3dd98:	31510000 	cmpcc	r1, r0
   3dd9c:	31a01081 	lslcc	r1, r1, #1
   3dda0:	31a03083 	lslcc	r3, r3, #1
   3dda4:	3afffffa 	bcc	3dd94 <__aeabi_uidiv+0x40>
   3dda8:	e3a02000 	mov	r2, #0
   3ddac:	e1500001 	cmp	r0, r1
   3ddb0:	20400001 	subcs	r0, r0, r1
   3ddb4:	21822003 	orrcs	r2, r2, r3
   3ddb8:	e15000a1 	cmp	r0, r1, lsr #1
   3ddbc:	204000a1 	subcs	r0, r0, r1, lsr #1
   3ddc0:	218220a3 	orrcs	r2, r2, r3, lsr #1
   3ddc4:	e1500121 	cmp	r0, r1, lsr #2
   3ddc8:	20400121 	subcs	r0, r0, r1, lsr #2
   3ddcc:	21822123 	orrcs	r2, r2, r3, lsr #2
   3ddd0:	e15001a1 	cmp	r0, r1, lsr #3
   3ddd4:	204001a1 	subcs	r0, r0, r1, lsr #3
   3ddd8:	218221a3 	orrcs	r2, r2, r3, lsr #3
   3dddc:	e3500000 	cmp	r0, #0
   3dde0:	11b03223 	lsrsne	r3, r3, #4
   3dde4:	11a01221 	lsrne	r1, r1, #4
   3dde8:	1affffef 	bne	3ddac <__aeabi_uidiv+0x58>
   3ddec:	e1a00002 	mov	r0, r2
   3ddf0:	e12fff1e 	bx	lr
   3ddf4:	03a00001 	moveq	r0, #1
   3ddf8:	13a00000 	movne	r0, #0
   3ddfc:	e12fff1e 	bx	lr
   3de00:	e3510801 	cmp	r1, #65536	; 0x10000
   3de04:	21a01821 	lsrcs	r1, r1, #16
   3de08:	23a02010 	movcs	r2, #16
   3de0c:	33a02000 	movcc	r2, #0
   3de10:	e3510c01 	cmp	r1, #256	; 0x100
   3de14:	21a01421 	lsrcs	r1, r1, #8
   3de18:	22822008 	addcs	r2, r2, #8
   3de1c:	e3510010 	cmp	r1, #16
   3de20:	21a01221 	lsrcs	r1, r1, #4
   3de24:	22822004 	addcs	r2, r2, #4
   3de28:	e3510004 	cmp	r1, #4
   3de2c:	82822003 	addhi	r2, r2, #3
   3de30:	908220a1 	addls	r2, r2, r1, lsr #1
   3de34:	e1a00230 	lsr	r0, r0, r2
   3de38:	e12fff1e 	bx	lr
   3de3c:	e3500000 	cmp	r0, #0
   3de40:	13e00000 	mvnne	r0, #0
   3de44:	ea000059 	b	3dfb0 <__aeabi_idiv0>

0003de48 <__aeabi_uidivmod>:
   3de48:	e3510000 	cmp	r1, #0
   3de4c:	0afffffa 	beq	3de3c <__aeabi_uidiv+0xe8>
   3de50:	e92d4003 	push	{r0, r1, lr}
   3de54:	ebffffbe 	bl	3dd54 <__aeabi_uidiv>
   3de58:	e8bd4006 	pop	{r1, r2, lr}
   3de5c:	e0030092 	mul	r3, r2, r0
   3de60:	e0411003 	sub	r1, r1, r3
   3de64:	e12fff1e 	bx	lr

0003de68 <__aeabi_idiv>:
   3de68:	e3510000 	cmp	r1, #0
   3de6c:	0a000043 	beq	3df80 <.divsi3_skip_div0_test+0x110>

0003de70 <.divsi3_skip_div0_test>:
   3de70:	e020c001 	eor	ip, r0, r1
   3de74:	42611000 	rsbmi	r1, r1, #0
   3de78:	e2512001 	subs	r2, r1, #1
   3de7c:	0a000027 	beq	3df20 <.divsi3_skip_div0_test+0xb0>
   3de80:	e1b03000 	movs	r3, r0
   3de84:	42603000 	rsbmi	r3, r0, #0
   3de88:	e1530001 	cmp	r3, r1
   3de8c:	9a000026 	bls	3df2c <.divsi3_skip_div0_test+0xbc>
   3de90:	e1110002 	tst	r1, r2
   3de94:	0a000028 	beq	3df3c <.divsi3_skip_div0_test+0xcc>
   3de98:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   3de9c:	01a01181 	lsleq	r1, r1, #3
   3dea0:	03a02008 	moveq	r2, #8
   3dea4:	13a02001 	movne	r2, #1
   3dea8:	e3510201 	cmp	r1, #268435456	; 0x10000000
   3deac:	31510003 	cmpcc	r1, r3
   3deb0:	31a01201 	lslcc	r1, r1, #4
   3deb4:	31a02202 	lslcc	r2, r2, #4
   3deb8:	3afffffa 	bcc	3dea8 <.divsi3_skip_div0_test+0x38>
   3debc:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   3dec0:	31510003 	cmpcc	r1, r3
   3dec4:	31a01081 	lslcc	r1, r1, #1
   3dec8:	31a02082 	lslcc	r2, r2, #1
   3decc:	3afffffa 	bcc	3debc <.divsi3_skip_div0_test+0x4c>
   3ded0:	e3a00000 	mov	r0, #0
   3ded4:	e1530001 	cmp	r3, r1
   3ded8:	20433001 	subcs	r3, r3, r1
   3dedc:	21800002 	orrcs	r0, r0, r2
   3dee0:	e15300a1 	cmp	r3, r1, lsr #1
   3dee4:	204330a1 	subcs	r3, r3, r1, lsr #1
   3dee8:	218000a2 	orrcs	r0, r0, r2, lsr #1
   3deec:	e1530121 	cmp	r3, r1, lsr #2
   3def0:	20433121 	subcs	r3, r3, r1, lsr #2
   3def4:	21800122 	orrcs	r0, r0, r2, lsr #2
   3def8:	e15301a1 	cmp	r3, r1, lsr #3
   3defc:	204331a1 	subcs	r3, r3, r1, lsr #3
   3df00:	218001a2 	orrcs	r0, r0, r2, lsr #3
   3df04:	e3530000 	cmp	r3, #0
   3df08:	11b02222 	lsrsne	r2, r2, #4
   3df0c:	11a01221 	lsrne	r1, r1, #4
   3df10:	1affffef 	bne	3ded4 <.divsi3_skip_div0_test+0x64>
   3df14:	e35c0000 	cmp	ip, #0
   3df18:	42600000 	rsbmi	r0, r0, #0
   3df1c:	e12fff1e 	bx	lr
   3df20:	e13c0000 	teq	ip, r0
   3df24:	42600000 	rsbmi	r0, r0, #0
   3df28:	e12fff1e 	bx	lr
   3df2c:	33a00000 	movcc	r0, #0
   3df30:	01a00fcc 	asreq	r0, ip, #31
   3df34:	03800001 	orreq	r0, r0, #1
   3df38:	e12fff1e 	bx	lr
   3df3c:	e3510801 	cmp	r1, #65536	; 0x10000
   3df40:	21a01821 	lsrcs	r1, r1, #16
   3df44:	23a02010 	movcs	r2, #16
   3df48:	33a02000 	movcc	r2, #0
   3df4c:	e3510c01 	cmp	r1, #256	; 0x100
   3df50:	21a01421 	lsrcs	r1, r1, #8
   3df54:	22822008 	addcs	r2, r2, #8
   3df58:	e3510010 	cmp	r1, #16
   3df5c:	21a01221 	lsrcs	r1, r1, #4
   3df60:	22822004 	addcs	r2, r2, #4
   3df64:	e3510004 	cmp	r1, #4
   3df68:	82822003 	addhi	r2, r2, #3
   3df6c:	908220a1 	addls	r2, r2, r1, lsr #1
   3df70:	e35c0000 	cmp	ip, #0
   3df74:	e1a00233 	lsr	r0, r3, r2
   3df78:	42600000 	rsbmi	r0, r0, #0
   3df7c:	e12fff1e 	bx	lr
   3df80:	e3500000 	cmp	r0, #0
   3df84:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
   3df88:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
   3df8c:	ea000007 	b	3dfb0 <__aeabi_idiv0>

0003df90 <__aeabi_idivmod>:
   3df90:	e3510000 	cmp	r1, #0
   3df94:	0afffff9 	beq	3df80 <.divsi3_skip_div0_test+0x110>
   3df98:	e92d4003 	push	{r0, r1, lr}
   3df9c:	ebffffb3 	bl	3de70 <.divsi3_skip_div0_test>
   3dfa0:	e8bd4006 	pop	{r1, r2, lr}
   3dfa4:	e0030092 	mul	r3, r2, r0
   3dfa8:	e0411003 	sub	r1, r1, r3
   3dfac:	e12fff1e 	bx	lr

0003dfb0 <__aeabi_idiv0>:
   3dfb0:	e12fff1e 	bx	lr

0003dfb4 <__aeabi_uldivmod>:
   3dfb4:	e3530000 	cmp	r3, #0
   3dfb8:	03520000 	cmpeq	r2, #0
   3dfbc:	1a000004 	bne	3dfd4 <__aeabi_uldivmod+0x20>
   3dfc0:	e3510000 	cmp	r1, #0
   3dfc4:	03500000 	cmpeq	r0, #0
   3dfc8:	13e01000 	mvnne	r1, #0
   3dfcc:	13e00000 	mvnne	r0, #0
   3dfd0:	eafffff6 	b	3dfb0 <__aeabi_idiv0>
   3dfd4:	e24dd008 	sub	sp, sp, #8
   3dfd8:	e92d6000 	push	{sp, lr}
   3dfdc:	eb000003 	bl	3dff0 <__udivmoddi4>
   3dfe0:	e59de004 	ldr	lr, [sp, #4]
   3dfe4:	e28dd008 	add	sp, sp, #8
   3dfe8:	e8bd000c 	pop	{r2, r3}
   3dfec:	e12fff1e 	bx	lr

0003dff0 <__udivmoddi4>:
   3dff0:	e1510003 	cmp	r1, r3
   3dff4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dff8:	01500002 	cmpeq	r0, r2
   3dffc:	e1a04000 	mov	r4, r0
   3e000:	e1a05001 	mov	r5, r1
   3e004:	e59da028 	ldr	sl, [sp, #40]	; 0x28
   3e008:	33a00000 	movcc	r0, #0
   3e00c:	33a01000 	movcc	r1, #0
   3e010:	3a00003d 	bcc	3e10c <__udivmoddi4+0x11c>
   3e014:	e1a00002 	mov	r0, r2
   3e018:	e1a01003 	mov	r1, r3
   3e01c:	e1a08002 	mov	r8, r2
   3e020:	e1a09003 	mov	r9, r3
   3e024:	eb00003c 	bl	3e11c <__clzdi2>
   3e028:	e1a01005 	mov	r1, r5
   3e02c:	e1a0b000 	mov	fp, r0
   3e030:	e1a00004 	mov	r0, r4
   3e034:	eb000038 	bl	3e11c <__clzdi2>
   3e038:	e04bb000 	sub	fp, fp, r0
   3e03c:	e24b2020 	sub	r2, fp, #32
   3e040:	e1a07b19 	lsl	r7, r9, fp
   3e044:	e1877218 	orr	r7, r7, r8, lsl r2
   3e048:	e26bc020 	rsb	ip, fp, #32
   3e04c:	e1877c38 	orr	r7, r7, r8, lsr ip
   3e050:	e1550007 	cmp	r5, r7
   3e054:	e1a06b18 	lsl	r6, r8, fp
   3e058:	01540006 	cmpeq	r4, r6
   3e05c:	33a00000 	movcc	r0, #0
   3e060:	33a01000 	movcc	r1, #0
   3e064:	3a000005 	bcc	3e080 <__udivmoddi4+0x90>
   3e068:	e3a0e001 	mov	lr, #1
   3e06c:	e0544006 	subs	r4, r4, r6
   3e070:	e1a0121e 	lsl	r1, lr, r2
   3e074:	e1811c3e 	orr	r1, r1, lr, lsr ip
   3e078:	e0c55007 	sbc	r5, r5, r7
   3e07c:	e1a00b1e 	lsl	r0, lr, fp
   3e080:	e35b0000 	cmp	fp, #0
   3e084:	0a000020 	beq	3e10c <__udivmoddi4+0x11c>
   3e088:	e1b070a7 	lsrs	r7, r7, #1
   3e08c:	e1a06066 	rrx	r6, r6
   3e090:	e1a0e00b 	mov	lr, fp
   3e094:	ea000007 	b	3e0b8 <__udivmoddi4+0xc8>
   3e098:	e0544006 	subs	r4, r4, r6
   3e09c:	e0c55007 	sbc	r5, r5, r7
   3e0a0:	e0944004 	adds	r4, r4, r4
   3e0a4:	e0a55005 	adc	r5, r5, r5
   3e0a8:	e2944001 	adds	r4, r4, #1
   3e0ac:	e2a55000 	adc	r5, r5, #0
   3e0b0:	e25ee001 	subs	lr, lr, #1
   3e0b4:	0a000006 	beq	3e0d4 <__udivmoddi4+0xe4>
   3e0b8:	e1550007 	cmp	r5, r7
   3e0bc:	01540006 	cmpeq	r4, r6
   3e0c0:	2afffff4 	bcs	3e098 <__udivmoddi4+0xa8>
   3e0c4:	e0944004 	adds	r4, r4, r4
   3e0c8:	e0a55005 	adc	r5, r5, r5
   3e0cc:	e25ee001 	subs	lr, lr, #1
   3e0d0:	1afffff8 	bne	3e0b8 <__udivmoddi4+0xc8>
   3e0d4:	e1a0eb34 	lsr	lr, r4, fp
   3e0d8:	e18eec15 	orr	lr, lr, r5, lsl ip
   3e0dc:	e18ee235 	orr	lr, lr, r5, lsr r2
   3e0e0:	e0906004 	adds	r6, r0, r4
   3e0e4:	e1a0400e 	mov	r4, lr
   3e0e8:	e0a17005 	adc	r7, r1, r5
   3e0ec:	e1a01b35 	lsr	r1, r5, fp
   3e0f0:	e1a05001 	mov	r5, r1
   3e0f4:	e1a01b11 	lsl	r1, r1, fp
   3e0f8:	e181121e 	orr	r1, r1, lr, lsl r2
   3e0fc:	e1a00b1e 	lsl	r0, lr, fp
   3e100:	e1811c3e 	orr	r1, r1, lr, lsr ip
   3e104:	e0560000 	subs	r0, r6, r0
   3e108:	e0c71001 	sbc	r1, r7, r1
   3e10c:	e35a0000 	cmp	sl, #0
   3e110:	188a0030 	stmne	sl, {r4, r5}
   3e114:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e118:	e12fff1e 	bx	lr

0003e11c <__clzdi2>:
   3e11c:	e92d4010 	push	{r4, lr}
   3e120:	e3510000 	cmp	r1, #0
   3e124:	1a000002 	bne	3e134 <__clzdi2+0x18>
   3e128:	eb000005 	bl	3e144 <__clzsi2>
   3e12c:	e2800020 	add	r0, r0, #32
   3e130:	ea000001 	b	3e13c <__clzdi2+0x20>
   3e134:	e1a00001 	mov	r0, r1
   3e138:	eb000001 	bl	3e144 <__clzsi2>
   3e13c:	e8bd4010 	pop	{r4, lr}
   3e140:	e12fff1e 	bx	lr

0003e144 <__clzsi2>:
   3e144:	e3a0101c 	mov	r1, #28
   3e148:	e3500801 	cmp	r0, #65536	; 0x10000
   3e14c:	21a00820 	lsrcs	r0, r0, #16
   3e150:	22411010 	subcs	r1, r1, #16
   3e154:	e3500c01 	cmp	r0, #256	; 0x100
   3e158:	21a00420 	lsrcs	r0, r0, #8
   3e15c:	22411008 	subcs	r1, r1, #8
   3e160:	e3500010 	cmp	r0, #16
   3e164:	21a00220 	lsrcs	r0, r0, #4
   3e168:	22411004 	subcs	r1, r1, #4
   3e16c:	e28f2008 	add	r2, pc, #8
   3e170:	e7d20000 	ldrb	r0, [r2, r0]
   3e174:	e0800001 	add	r0, r0, r1
   3e178:	e12fff1e 	bx	lr
   3e17c:	02020304 	.word	0x02020304
   3e180:	01010101 	.word	0x01010101
	...

0003e18c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   3e18c:	e3a01000 	mov	r1, #0
   3e190:	e3a02001 	mov	r2, #1
   3e194:	e92d4030 	push	{r4, r5, lr}
   3e198:	e1a04000 	mov	r4, r0
   3e19c:	e5903020 	ldr	r3, [r0, #32]
   3e1a0:	e24dd014 	sub	sp, sp, #20
   3e1a4:	e5c32011 	strb	r2, [r3, #17]
   3e1a8:	e5c3100c 	strb	r1, [r3, #12]
   3e1ac:	e5c3100d 	strb	r1, [r3, #13]
   3e1b0:	e5c3100e 	strb	r1, [r3, #14]
   3e1b4:	e5c3100f 	strb	r1, [r3, #15]
   3e1b8:	e5c31010 	strb	r1, [r3, #16]
   3e1bc:	e5c31012 	strb	r1, [r3, #18]
   3e1c0:	e5c31013 	strb	r1, [r3, #19]
   3e1c4:	e28d0008 	add	r0, sp, #8
   3e1c8:	ebff99b1 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3e1cc:	e59f306c 	ldr	r3, [pc, #108]	; 3e240 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   3e1d0:	e5942020 	ldr	r2, [r4, #32]
   3e1d4:	e28d0008 	add	r0, sp, #8
   3e1d8:	e58d3000 	str	r3, [sp]
   3e1dc:	e59f1060 	ldr	r1, [pc, #96]	; 3e244 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   3e1e0:	e283300c 	add	r3, r3, #12
   3e1e4:	ebff99b6 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3e1e8:	e2505000 	subs	r5, r0, #0
   3e1ec:	0a000008 	beq	3e214 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   3e1f0:	e5942020 	ldr	r2, [r4, #32]
   3e1f4:	e5d2300c 	ldrb	r3, [r2, #12]
   3e1f8:	e5d2000d 	ldrb	r0, [r2, #13]
   3e1fc:	e5d2100e 	ldrb	r1, [r2, #14]
   3e200:	e1833400 	orr	r3, r3, r0, lsl #8
   3e204:	e5d2200f 	ldrb	r2, [r2, #15]
   3e208:	e1833801 	orr	r3, r3, r1, lsl #16
   3e20c:	e1933c02 	orrs	r3, r3, r2, lsl #24
   3e210:	0a000005 	beq	3e22c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   3e214:	e3a05000 	mov	r5, #0
   3e218:	e28d0008 	add	r0, sp, #8
   3e21c:	ebff99a3 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   3e220:	e1a00005 	mov	r0, r5
   3e224:	e28dd014 	add	sp, sp, #20
   3e228:	e8bd8030 	pop	{r4, r5, pc}
   3e22c:	e28d0008 	add	r0, sp, #8
   3e230:	ebff999e 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   3e234:	e1a00005 	mov	r0, r5
   3e238:	e28dd014 	add	sp, sp, #20
   3e23c:	e8bd8030 	pop	{r4, r5, pc}
   3e240:	00000408 	.word	0x00000408
   3e244:	0004800b 	.word	0x0004800b

0003e248 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   3e248:	e92d4030 	push	{r4, r5, lr}
   3e24c:	e3510000 	cmp	r1, #0
   3e250:	13520000 	cmpne	r2, #0
   3e254:	e1a04000 	mov	r4, r0
   3e258:	e3a05000 	mov	r5, #0
   3e25c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   3e260:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
   3e264:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   3e268:	e8840006 	stm	r4, {r1, r2}
   3e26c:	e5843010 	str	r3, [r4, #16]
   3e270:	e584c00c 	str	ip, [r4, #12]
   3e274:	e5840008 	str	r0, [r4, #8]
   3e278:	e5845014 	str	r5, [r4, #20]
   3e27c:	e5845018 	str	r5, [r4, #24]
   3e280:	e584501c 	str	r5, [r4, #28]
   3e284:	e5845020 	str	r5, [r4, #32]
   3e288:	1a000011 	bne	3e2d4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   3e28c:	e1a01005 	mov	r1, r5
   3e290:	e28d000c 	add	r0, sp, #12
   3e294:	ebff997e 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3e298:	e3a03014 	mov	r3, #20
   3e29c:	e58d5000 	str	r5, [sp]
   3e2a0:	e28d000c 	add	r0, sp, #12
   3e2a4:	e08d2003 	add	r2, sp, r3
   3e2a8:	e59f10c8 	ldr	r1, [pc, #200]	; 3e378 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x130>
   3e2ac:	ebff9984 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3e2b0:	e1500005 	cmp	r0, r5
   3e2b4:	1a000026 	bne	3e354 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x10c>
   3e2b8:	e3a02d0a 	mov	r2, #640	; 0x280
   3e2bc:	e3a03e1e 	mov	r3, #480	; 0x1e0
   3e2c0:	e884000c 	stm	r4, {r2, r3}
   3e2c4:	e28d000c 	add	r0, sp, #12
   3e2c8:	ebff9978 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   3e2cc:	e5940008 	ldr	r0, [r4, #8]
   3e2d0:	e5943010 	ldr	r3, [r4, #16]
   3e2d4:	e3500000 	cmp	r0, #0
   3e2d8:	0a000019 	beq	3e344 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   3e2dc:	e594200c 	ldr	r2, [r4, #12]
   3e2e0:	e3520000 	cmp	r2, #0
   3e2e4:	0a000016 	beq	3e344 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   3e2e8:	e3530008 	cmp	r3, #8
   3e2ec:	8a000006 	bhi	3e30c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc4>
   3e2f0:	e59f0084 	ldr	r0, [pc, #132]	; 3e37c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
   3e2f4:	ebffb363 	bl	2b088 <operator new[](unsigned int)>
   3e2f8:	e3a02b01 	mov	r2, #1024	; 0x400
   3e2fc:	e5840020 	str	r0, [r4, #32]
   3e300:	e3a01000 	mov	r1, #0
   3e304:	e2800014 	add	r0, r0, #20
   3e308:	ebffaf0d 	bl	29f44 <memset>
   3e30c:	e3a02070 	mov	r2, #112	; 0x70
   3e310:	e59f1068 	ldr	r1, [pc, #104]	; 3e380 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x138>
   3e314:	e2840024 	add	r0, r4, #36	; 0x24
   3e318:	ebffb180 	bl	2a920 <memcpy>
   3e31c:	e994000f 	ldmib	r4, {r0, r1, r2, r3}
   3e320:	e5840034 	str	r0, [r4, #52]	; 0x34
   3e324:	e1a00004 	mov	r0, r4
   3e328:	e594c000 	ldr	ip, [r4]
   3e32c:	e5841044 	str	r1, [r4, #68]	; 0x44
   3e330:	e584c030 	str	ip, [r4, #48]	; 0x30
   3e334:	e5842048 	str	r2, [r4, #72]	; 0x48
   3e338:	e5843058 	str	r3, [r4, #88]	; 0x58
   3e33c:	e28dd02c 	add	sp, sp, #44	; 0x2c
   3e340:	e8bd8030 	pop	{r4, r5, pc}
   3e344:	e8940006 	ldm	r4, {r1, r2}
   3e348:	e5841008 	str	r1, [r4, #8]
   3e34c:	e584200c 	str	r2, [r4, #12]
   3e350:	eaffffe4 	b	3e2e8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   3e354:	e59d2020 	ldr	r2, [sp, #32]
   3e358:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   3e35c:	e2420d0a 	sub	r0, r2, #640	; 0x280
   3e360:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   3e364:	e3510f96 	cmp	r1, #600	; 0x258
   3e368:	93500c05 	cmpls	r0, #1280	; 0x500
   3e36c:	e884000c 	stm	r4, {r2, r3}
   3e370:	9affffd3 	bls	3e2c4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   3e374:	eaffffcf 	b	3e2b8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>
   3e378:	00040003 	.word	0x00040003
   3e37c:	00000414 	.word	0x00000414
   3e380:	0004c884 	.word	0x0004c884

0003e384 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   3e384:	e92d4010 	push	{r4, lr}
   3e388:	e1a04000 	mov	r4, r0
   3e38c:	e3a01014 	mov	r1, #20
   3e390:	e5900020 	ldr	r0, [r0, #32]
   3e394:	ebffb348 	bl	2b0bc <operator delete(void*, unsigned int)>
   3e398:	e1a00004 	mov	r0, r4
   3e39c:	e8bd8010 	pop	{r4, pc}

0003e3a0 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   3e3a0:	e5903010 	ldr	r3, [r0, #16]
   3e3a4:	e3530008 	cmp	r3, #8
   3e3a8:	812fff1e 	bxhi	lr
   3e3ac:	e1a03982 	lsl	r3, r2, #19
   3e3b0:	e1a0c5a2 	lsr	ip, r2, #11
   3e3b4:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   3e3b8:	e183318c 	orr	r3, r3, ip, lsl #3
   3e3bc:	e1a02282 	lsl	r2, r2, #5
   3e3c0:	e5900020 	ldr	r0, [r0, #32]
   3e3c4:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   3e3c8:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   3e3cc:	e1822003 	orr	r2, r2, r3
   3e3d0:	e2811004 	add	r1, r1, #4
   3e3d4:	e0801101 	add	r1, r0, r1, lsl #2
   3e3d8:	e1a0c422 	lsr	ip, r2, #8
   3e3dc:	e1a00822 	lsr	r0, r2, #16
   3e3e0:	e1a03c22 	lsr	r3, r2, #24
   3e3e4:	e5c12004 	strb	r2, [r1, #4]
   3e3e8:	e5c1c005 	strb	ip, [r1, #5]
   3e3ec:	e5c10006 	strb	r0, [r1, #6]
   3e3f0:	e5c13007 	strb	r3, [r1, #7]
   3e3f4:	e12fff1e 	bx	lr

0003e3f8 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   3e3f8:	e5903010 	ldr	r3, [r0, #16]
   3e3fc:	e3530008 	cmp	r3, #8
   3e400:	812fff1e 	bxhi	lr
   3e404:	e5903020 	ldr	r3, [r0, #32]
   3e408:	e2811004 	add	r1, r1, #4
   3e40c:	e0831101 	add	r1, r3, r1, lsl #2
   3e410:	e1a0c422 	lsr	ip, r2, #8
   3e414:	e1a00822 	lsr	r0, r2, #16
   3e418:	e1a03c22 	lsr	r3, r2, #24
   3e41c:	e5c12004 	strb	r2, [r1, #4]
   3e420:	e5c1c005 	strb	ip, [r1, #5]
   3e424:	e5c10006 	strb	r0, [r1, #6]
   3e428:	e5c13007 	strb	r3, [r1, #7]
   3e42c:	e12fff1e 	bx	lr

0003e430 <CBcmFrameBuffer::Initialize()>:
   3e430:	e92d4030 	push	{r4, r5, lr}
   3e434:	e1a04000 	mov	r4, r0
   3e438:	e24dd00c 	sub	sp, sp, #12
   3e43c:	e3a01000 	mov	r1, #0
   3e440:	e1a0000d 	mov	r0, sp
   3e444:	ebff9912 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3e448:	e2841024 	add	r1, r4, #36	; 0x24
   3e44c:	e1a0000d 	mov	r0, sp
   3e450:	e3a02070 	mov	r2, #112	; 0x70
   3e454:	ebff9957 	bl	249b8 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   3e458:	e2505000 	subs	r5, r0, #0
   3e45c:	0a00001f 	beq	3e4e0 <CBcmFrameBuffer::Initialize()+0xb0>
   3e460:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3e464:	e3530000 	cmp	r3, #0
   3e468:	0a00001b 	beq	3e4dc <CBcmFrameBuffer::Initialize()+0xac>
   3e46c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3e470:	e3530000 	cmp	r3, #0
   3e474:	0a000018 	beq	3e4dc <CBcmFrameBuffer::Initialize()+0xac>
   3e478:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   3e47c:	e3530000 	cmp	r3, #0
   3e480:	0a000015 	beq	3e4dc <CBcmFrameBuffer::Initialize()+0xac>
   3e484:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   3e488:	e3530000 	cmp	r3, #0
   3e48c:	0a000012 	beq	3e4dc <CBcmFrameBuffer::Initialize()+0xac>
   3e490:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   3e494:	e3530000 	cmp	r3, #0
   3e498:	0a00000f 	beq	3e4dc <CBcmFrameBuffer::Initialize()+0xac>
   3e49c:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   3e4a0:	e3530000 	cmp	r3, #0
   3e4a4:	0a00000c 	beq	3e4dc <CBcmFrameBuffer::Initialize()+0xac>
   3e4a8:	e5940010 	ldr	r0, [r4, #16]
   3e4ac:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   3e4b0:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   3e4b4:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   3e4b8:	e3500008 	cmp	r0, #8
   3e4bc:	e5843014 	str	r3, [r4, #20]
   3e4c0:	e5841018 	str	r1, [r4, #24]
   3e4c4:	e584201c 	str	r2, [r4, #28]
   3e4c8:	8a000004 	bhi	3e4e0 <CBcmFrameBuffer::Initialize()+0xb0>
   3e4cc:	e1a00004 	mov	r0, r4
   3e4d0:	ebffff2d 	bl	3e18c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   3e4d4:	e1a05000 	mov	r5, r0
   3e4d8:	ea000000 	b	3e4e0 <CBcmFrameBuffer::Initialize()+0xb0>
   3e4dc:	e1a05003 	mov	r5, r3
   3e4e0:	e1a0000d 	mov	r0, sp
   3e4e4:	ebff98f1 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   3e4e8:	e1a00005 	mov	r0, r5
   3e4ec:	e28dd00c 	add	sp, sp, #12
   3e4f0:	e8bd8030 	pop	{r4, r5, pc}

0003e4f4 <CBcmFrameBuffer::GetWidth() const>:
   3e4f4:	e5900000 	ldr	r0, [r0]
   3e4f8:	e12fff1e 	bx	lr

0003e4fc <CBcmFrameBuffer::GetHeight() const>:
   3e4fc:	e5900004 	ldr	r0, [r0, #4]
   3e500:	e12fff1e 	bx	lr

0003e504 <CBcmFrameBuffer::GetVirtWidth() const>:
   3e504:	e5900008 	ldr	r0, [r0, #8]
   3e508:	e12fff1e 	bx	lr

0003e50c <CBcmFrameBuffer::GetVirtHeight() const>:
   3e50c:	e590000c 	ldr	r0, [r0, #12]
   3e510:	e12fff1e 	bx	lr

0003e514 <CBcmFrameBuffer::GetPitch() const>:
   3e514:	e590001c 	ldr	r0, [r0, #28]
   3e518:	e12fff1e 	bx	lr

0003e51c <CBcmFrameBuffer::GetDepth() const>:
   3e51c:	e5900010 	ldr	r0, [r0, #16]
   3e520:	e12fff1e 	bx	lr

0003e524 <CBcmFrameBuffer::GetBuffer() const>:
   3e524:	e5900014 	ldr	r0, [r0, #20]
   3e528:	e12fff1e 	bx	lr

0003e52c <CBcmFrameBuffer::GetSize() const>:
   3e52c:	e5900018 	ldr	r0, [r0, #24]
   3e530:	e12fff1e 	bx	lr

0003e534 <CBcmFrameBuffer::UpdatePalette()>:
   3e534:	e5903010 	ldr	r3, [r0, #16]
   3e538:	e3530008 	cmp	r3, #8
   3e53c:	9a000001 	bls	3e548 <CBcmFrameBuffer::UpdatePalette()+0x14>
   3e540:	e3a00001 	mov	r0, #1
   3e544:	e12fff1e 	bx	lr
   3e548:	eaffff0f 	b	3e18c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

0003e54c <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   3e54c:	e92d4070 	push	{r4, r5, r6, lr}
   3e550:	e24dd028 	sub	sp, sp, #40	; 0x28
   3e554:	e1a05001 	mov	r5, r1
   3e558:	e28d000c 	add	r0, sp, #12
   3e55c:	e3a01000 	mov	r1, #0
   3e560:	e1a06002 	mov	r6, r2
   3e564:	ebff98ca 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3e568:	e3a03008 	mov	r3, #8
   3e56c:	e58d3000 	str	r3, [sp]
   3e570:	e3a03014 	mov	r3, #20
   3e574:	e28d000c 	add	r0, sp, #12
   3e578:	e08d2003 	add	r2, sp, r3
   3e57c:	e59f1040 	ldr	r1, [pc, #64]	; 3e5c4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x78>
   3e580:	e58d5020 	str	r5, [sp, #32]
   3e584:	e58d6024 	str	r6, [sp, #36]	; 0x24
   3e588:	ebff98cd 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3e58c:	e2504000 	subs	r4, r0, #0
   3e590:	0a000006 	beq	3e5b0 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   3e594:	e59d3020 	ldr	r3, [sp, #32]
   3e598:	e1550003 	cmp	r5, r3
   3e59c:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   3e5a0:	13a04000 	movne	r4, #0
   3e5a4:	00444006 	subeq	r4, r4, r6
   3e5a8:	016f4f14 	clzeq	r4, r4
   3e5ac:	01a042a4 	lsreq	r4, r4, #5
   3e5b0:	e28d000c 	add	r0, sp, #12
   3e5b4:	ebff98bd 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   3e5b8:	e1a00004 	mov	r0, r4
   3e5bc:	e28dd028 	add	sp, sp, #40	; 0x28
   3e5c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   3e5c4:	00048009 	.word	0x00048009

0003e5c8 <CBcmFrameBuffer::WaitForVerticalSync()>:
   3e5c8:	e92d4010 	push	{r4, lr}
   3e5cc:	e24dd020 	sub	sp, sp, #32
   3e5d0:	e28d0008 	add	r0, sp, #8
   3e5d4:	e3a01000 	mov	r1, #0
   3e5d8:	ebff98ad 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3e5dc:	e3a03000 	mov	r3, #0
   3e5e0:	e58d3000 	str	r3, [sp]
   3e5e4:	e3a03010 	mov	r3, #16
   3e5e8:	e59f1020 	ldr	r1, [pc, #32]	; 3e610 <CBcmFrameBuffer::WaitForVerticalSync()+0x48>
   3e5ec:	e08d2003 	add	r2, sp, r3
   3e5f0:	e28d0008 	add	r0, sp, #8
   3e5f4:	ebff98b2 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3e5f8:	e1a04000 	mov	r4, r0
   3e5fc:	e28d0008 	add	r0, sp, #8
   3e600:	ebff98aa 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   3e604:	e1a00004 	mov	r0, r4
   3e608:	e28dd020 	add	sp, sp, #32
   3e60c:	e8bd8010 	pop	{r4, pc}
   3e610:	0004800e 	.word	0x0004800e

0003e614 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   3e614:	e92d4010 	push	{r4, lr}
   3e618:	e24dd020 	sub	sp, sp, #32
   3e61c:	e1a04001 	mov	r4, r1
   3e620:	e28d0008 	add	r0, sp, #8
   3e624:	e3a01000 	mov	r1, #0
   3e628:	ebff9899 	bl	24894 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3e62c:	e3a03004 	mov	r3, #4
   3e630:	e58d3000 	str	r3, [sp]
   3e634:	e3a03010 	mov	r3, #16
   3e638:	e59f1024 	ldr	r1, [pc, #36]	; 3e664 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)+0x50>
   3e63c:	e08d2003 	add	r2, sp, r3
   3e640:	e28d0008 	add	r0, sp, #8
   3e644:	e58d401c 	str	r4, [sp, #28]
   3e648:	ebff989d 	bl	248c4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3e64c:	e1a04000 	mov	r4, r0
   3e650:	e28d0008 	add	r0, sp, #8
   3e654:	ebff9895 	bl	248b0 <CBcmPropertyTags::~CBcmPropertyTags()>
   3e658:	e1a00004 	mov	r0, r4
   3e65c:	e28dd020 	add	sp, sp, #32
   3e660:	e8bd8010 	pop	{r4, pc}
   3e664:	0004800f 	.word	0x0004800f

0003e668 <convModeToVal>:
   3e668:	e2400001 	sub	r0, r0, #1
   3e66c:	e6ef0070 	uxtb	r0, r0
   3e670:	e3500008 	cmp	r0, #8
   3e674:	959f3008 	ldrls	r3, [pc, #8]	; 3e684 <convModeToVal+0x1c>
   3e678:	97d30000 	ldrbls	r0, [r3, r0]
   3e67c:	83a00000 	movhi	r0, #0
   3e680:	e12fff1e 	bx	lr
   3e684:	00047f74 	.word	0x00047f74

0003e688 <pinMode>:
   3e688:	e3e03009 	mvn	r3, #9
   3e68c:	e3a0c007 	mov	ip, #7
   3e690:	e59f20e0 	ldr	r2, [pc, #224]	; 3e778 <pinMode+0xf0>
   3e694:	e92d4070 	push	{r4, r5, r6, lr}
   3e698:	e0824092 	umull	r4, r2, r2, r0
   3e69c:	e1a021a2 	lsr	r2, r2, #3
   3e6a0:	e0230293 	mla	r3, r3, r2, r0
   3e6a4:	e59fe0d0 	ldr	lr, [pc, #208]	; 3e77c <pinMode+0xf4>
   3e6a8:	e2822302 	add	r2, r2, #134217728	; 0x8000000
   3e6ac:	e0c4e39e 	smull	lr, r4, lr, r3
   3e6b0:	e1a0efc3 	asr	lr, r3, #31
   3e6b4:	e06ee144 	rsb	lr, lr, r4, asr #2
   3e6b8:	e08ee10e 	add	lr, lr, lr, lsl #2
   3e6bc:	e2822702 	add	r2, r2, #524288	; 0x80000
   3e6c0:	e043308e 	sub	r3, r3, lr, lsl #1
   3e6c4:	e2411001 	sub	r1, r1, #1
   3e6c8:	e1a02102 	lsl	r2, r2, #2
   3e6cc:	e6ef1071 	uxtb	r1, r1
   3e6d0:	e0833083 	add	r3, r3, r3, lsl #1
   3e6d4:	e592e000 	ldr	lr, [r2]
   3e6d8:	e6ef3073 	uxtb	r3, r3
   3e6dc:	e3510008 	cmp	r1, #8
   3e6e0:	e1cec31c 	bic	ip, lr, ip, lsl r3
   3e6e4:	8a000017 	bhi	3e748 <pinMode+0xc0>
   3e6e8:	e59fe090 	ldr	lr, [pc, #144]	; 3e780 <pinMode+0xf8>
   3e6ec:	e7de1001 	ldrb	r1, [lr, r1]
   3e6f0:	e201e00f 	and	lr, r1, #15
   3e6f4:	e18cc31e 	orr	ip, ip, lr, lsl r3
   3e6f8:	e31100f0 	tst	r1, #240	; 0xf0
   3e6fc:	e582c000 	str	ip, [r2]
   3e700:	08bd8070 	popeq	{r4, r5, r6, pc}
   3e704:	e1a04000 	mov	r4, r0
   3e708:	e59f5074 	ldr	r5, [pc, #116]	; 3e784 <pinMode+0xfc>
   3e70c:	e1a01241 	asr	r1, r1, #4
   3e710:	e5851094 	str	r1, [r5, #148]	; 0x94
   3e714:	e3a00096 	mov	r0, #150	; 0x96
   3e718:	ebffb804 	bl	2c730 <DelayLoop>
   3e71c:	e354001f 	cmp	r4, #31
   3e720:	ca00000a 	bgt	3e750 <pinMode+0xc8>
   3e724:	e3a00001 	mov	r0, #1
   3e728:	e1a00410 	lsl	r0, r0, r4
   3e72c:	e5850098 	str	r0, [r5, #152]	; 0x98
   3e730:	e3a00096 	mov	r0, #150	; 0x96
   3e734:	ebffb7fd 	bl	2c730 <DelayLoop>
   3e738:	e3a03000 	mov	r3, #0
   3e73c:	e5853094 	str	r3, [r5, #148]	; 0x94
   3e740:	e5853098 	str	r3, [r5, #152]	; 0x98
   3e744:	e8bd8070 	pop	{r4, r5, r6, pc}
   3e748:	e582c000 	str	ip, [r2]
   3e74c:	e8bd8070 	pop	{r4, r5, r6, pc}
   3e750:	e3a03001 	mov	r3, #1
   3e754:	e2440020 	sub	r0, r4, #32
   3e758:	e1a00013 	lsl	r0, r3, r0
   3e75c:	e585009c 	str	r0, [r5, #156]	; 0x9c
   3e760:	e3a00096 	mov	r0, #150	; 0x96
   3e764:	ebffb7f1 	bl	2c730 <DelayLoop>
   3e768:	e3a03000 	mov	r3, #0
   3e76c:	e5853094 	str	r3, [r5, #148]	; 0x94
   3e770:	e585309c 	str	r3, [r5, #156]	; 0x9c
   3e774:	e8bd8070 	pop	{r4, r5, r6, pc}
   3e778:	cccccccd 	.word	0xcccccccd
   3e77c:	66666667 	.word	0x66666667
   3e780:	00047f74 	.word	0x00047f74
   3e784:	20200000 	.word	0x20200000

0003e788 <digitalWrite>:
   3e788:	e3510000 	cmp	r1, #0
   3e78c:	e3a03001 	mov	r3, #1
   3e790:	0a000008 	beq	3e7b8 <digitalWrite+0x30>
   3e794:	e350001f 	cmp	r0, #31
   3e798:	c2400020 	subgt	r0, r0, #32
   3e79c:	d59f2038 	ldrle	r2, [pc, #56]	; 3e7dc <digitalWrite+0x54>
   3e7a0:	c59f2034 	ldrgt	r2, [pc, #52]	; 3e7dc <digitalWrite+0x54>
   3e7a4:	d1a00013 	lslle	r0, r3, r0
   3e7a8:	c1a00013 	lslgt	r0, r3, r0
   3e7ac:	d582001c 	strle	r0, [r2, #28]
   3e7b0:	c5820020 	strgt	r0, [r2, #32]
   3e7b4:	e12fff1e 	bx	lr
   3e7b8:	e350001f 	cmp	r0, #31
   3e7bc:	c2400020 	subgt	r0, r0, #32
   3e7c0:	d59f2014 	ldrle	r2, [pc, #20]	; 3e7dc <digitalWrite+0x54>
   3e7c4:	c59f2010 	ldrgt	r2, [pc, #16]	; 3e7dc <digitalWrite+0x54>
   3e7c8:	d1a00013 	lslle	r0, r3, r0
   3e7cc:	c1a00013 	lslgt	r0, r3, r0
   3e7d0:	d5820028 	strle	r0, [r2, #40]	; 0x28
   3e7d4:	c582002c 	strgt	r0, [r2, #44]	; 0x2c
   3e7d8:	e12fff1e 	bx	lr
   3e7dc:	20200000 	.word	0x20200000

0003e7e0 <digitalRead>:
   3e7e0:	e350001f 	cmp	r0, #31
   3e7e4:	d59f301c 	ldrle	r3, [pc, #28]	; 3e808 <digitalRead+0x28>
   3e7e8:	c59f2018 	ldrgt	r2, [pc, #24]	; 3e808 <digitalRead+0x28>
   3e7ec:	c2403020 	subgt	r3, r0, #32
   3e7f0:	d5933034 	ldrle	r3, [r3, #52]	; 0x34
   3e7f4:	c5920038 	ldrgt	r0, [r2, #56]	; 0x38
   3e7f8:	d1a00033 	lsrle	r0, r3, r0
   3e7fc:	c1a00330 	lsrgt	r0, r0, r3
   3e800:	e2000001 	and	r0, r0, #1
   3e804:	e12fff1e 	bx	lr
   3e808:	20200000 	.word	0x20200000

0003e80c <lowlev_enable_irq>:
   3e80c:	e10f0000 	mrs	r0, CPSR
   3e810:	e3c00080 	bic	r0, r0, #128	; 0x80
   3e814:	e121f000 	msr	CPSR_c, r0
   3e818:	e12fff1e 	bx	lr

0003e81c <lowlev_disable_irq>:
   3e81c:	f10c0080 	cpsid	i
   3e820:	e1a0f00e 	mov	pc, lr

0003e824 <lowlev_enable_fiq>:
   3e824:	e10f0000 	mrs	r0, CPSR
   3e828:	e3c00040 	bic	r0, r0, #64	; 0x40
   3e82c:	e121f000 	msr	CPSR_c, r0
   3e830:	e12fff1e 	bx	lr

0003e834 <lowlev_disable_fiq>:
   3e834:	f10c0040 	cpsid	f
   3e838:	e1a0f00e 	mov	pc, lr

0003e83c <lowlev_cycleDelay>:
   3e83c:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
   3e840:	e1a000c0 	asr	r0, r0, #1

0003e844 <bloop>:
   3e844:	e2500001 	subs	r0, r0, #1
   3e848:	1afffffd 	bne	3e844 <bloop>
   3e84c:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
   3e850:	e12fff1e 	bx	lr

0003e854 <membarrier>:
   3e854:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   3e858:	e3a03000 	mov	r3, #0
   3e85c:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   3e860:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   3e864:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
   3e868:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   3e86c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3e870:	e12fff1e 	bx	lr

0003e874 <disable_mmu_and_cache>:
   3e874:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
   3e878:	e3c00a01 	bic	r0, r0, #4096	; 0x1000
   3e87c:	e3c00004 	bic	r0, r0, #4
   3e880:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
   3e884:	e92d040f 	push	{r0, r1, r2, r3, sl}
   3e888:	e3a03000 	mov	r3, #0
   3e88c:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   3e890:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   3e894:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
   3e898:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   3e89c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3e8a0:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   3e8a4:	e3a00005 	mov	r0, #5
   3e8a8:	e1c33000 	bic	r3, r3, r0
   3e8ac:	e3a00003 	mov	r0, #3
   3e8b0:	e1c33580 	bic	r3, r3, r0, lsl #11
   3e8b4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   3e8b8:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
   3e8bc:	e12fff1e 	bx	lr

0003e8c0 <blinkCE0>:
   3e8c0:	e92d040f 	push	{r0, r1, r2, r3, sl}
   3e8c4:	e59f0108 	ldr	r0, [pc, #264]	; 3e9d4 <memcopyfast+0x5c>
   3e8c8:	e3a01401 	mov	r1, #16777216	; 0x1000000
   3e8cc:	e5801000 	str	r1, [r0]
   3e8d0:	e3a01c01 	mov	r1, #256	; 0x100
   3e8d4:	e3a02c01 	mov	r2, #256	; 0x100
   3e8d8:	e580101c 	str	r1, [r0, #28]
   3e8dc:	e3a0a000 	mov	sl, #0

0003e8e0 <delay>:
   3e8e0:	e28aa001 	add	sl, sl, #1
   3e8e4:	e15a0002 	cmp	sl, r2
   3e8e8:	1afffffc 	bne	3e8e0 <delay>
   3e8ec:	e5801028 	str	r1, [r0, #40]	; 0x28
   3e8f0:	e3a0a000 	mov	sl, #0

0003e8f4 <delay2>:
   3e8f4:	e28aa001 	add	sl, sl, #1
   3e8f8:	e15a0002 	cmp	sl, r2
   3e8fc:	1afffffc 	bne	3e8f4 <delay2>
   3e900:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
   3e904:	e12fff1e 	bx	lr

0003e908 <blinkLEDForever>:
   3e908:	e59f00c4 	ldr	r0, [pc, #196]	; 3e9d4 <memcopyfast+0x5c>
   3e90c:	e3a0260f 	mov	r2, #15728640	; 0xf00000
   3e910:	e3a01602 	mov	r1, #2097152	; 0x200000
   3e914:	e5801010 	str	r1, [r0, #16]
   3e918:	e3a01902 	mov	r1, #32768	; 0x8000
   3e91c:	e5801020 	str	r1, [r0, #32]

0003e920 <loopBlink>:
   3e920:	e5801020 	str	r1, [r0, #32]
   3e924:	e3a0a000 	mov	sl, #0

0003e928 <delay1a>:
   3e928:	e28aa001 	add	sl, sl, #1
   3e92c:	e15a0002 	cmp	sl, r2
   3e930:	1afffffc 	bne	3e928 <delay1a>
   3e934:	e580102c 	str	r1, [r0, #44]	; 0x2c
   3e938:	e3a0a000 	mov	sl, #0

0003e93c <delay2a>:
   3e93c:	e28aa001 	add	sl, sl, #1
   3e940:	e15a0002 	cmp	sl, r2
   3e944:	1afffffc 	bne	3e93c <delay2a>
   3e948:	eafffff4 	b	3e920 <loopBlink>

0003e94c <lowlev_blockCopyExecRelocatable>:
   3e94c:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

0003e950 <blockCopyExecRelocatableLoop>:
   3e950:	e4d13001 	ldrb	r3, [r1], #1
   3e954:	e4c03001 	strb	r3, [r0], #1
   3e958:	e2522001 	subs	r2, r2, #1
   3e95c:	aafffffb 	bge	3e950 <blockCopyExecRelocatableLoop>
   3e960:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   3e964:	e12fff10 	bx	r0

0003e968 <lowlev_blockCopyExecRelocatableLen>:
   3e968:	0000001c 	.word	0x0000001c

0003e96c <lowlev_goto>:
   3e96c:	e12fff10 	bx	r0

0003e970 <lowlev_store_abs8>:
   3e970:	e5c01000 	strb	r1, [r0]
   3e974:	e12fff1e 	bx	lr

0003e978 <memcopyfast>:
   3e978:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   3e97c:	e352007f 	cmp	r2, #127	; 0x7f
   3e980:	9a00000b 	bls	3e9b4 <memcopyfast+0x3c>
   3e984:	e3110003 	tst	r1, #3
   3e988:	1a000009 	bne	3e9b4 <memcopyfast+0x3c>
   3e98c:	e3100003 	tst	r0, #3
   3e990:	1a000007 	bne	3e9b4 <memcopyfast+0x3c>
   3e994:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   3e998:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   3e99c:	e2422020 	sub	r2, r2, #32
   3e9a0:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   3e9a4:	f5d1f040 	pld	[r1, #64]	; 0x40
   3e9a8:	e352001f 	cmp	r2, #31
   3e9ac:	8afffff9 	bhi	3e998 <memcopyfast+0x20>
   3e9b0:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   3e9b4:	e3520000 	cmp	r2, #0
   3e9b8:	0a000003 	beq	3e9cc <memcopyfast+0x54>
   3e9bc:	e4d13001 	ldrb	r3, [r1], #1
   3e9c0:	e2522001 	subs	r2, r2, #1
   3e9c4:	e4c03001 	strb	r3, [r0], #1
   3e9c8:	1afffffb 	bne	3e9bc <memcopyfast+0x44>
   3e9cc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   3e9d0:	e12fff1e 	bx	lr
   3e9d4:	20200000 	.word	0x20200000

0003e9d8 <KeyConversion::getNumTypes()>:
   3e9d8:	e3a00006 	mov	r0, #6
   3e9dc:	e12fff1e 	bx	lr

0003e9e0 <memTestDataBus(BusAccess&, unsigned long)>:
   3e9e0:	e3a03001 	mov	r3, #1
   3e9e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3e9e8:	e24dd010 	sub	sp, sp, #16
   3e9ec:	e28d8010 	add	r8, sp, #16
   3e9f0:	e1a07000 	mov	r7, r0
   3e9f4:	e1a06001 	mov	r6, r1
   3e9f8:	e1a05003 	mov	r5, r3
   3e9fc:	e3a04000 	mov	r4, #0
   3ea00:	e5683002 	strb	r3, [r8, #-2]!
   3ea04:	ea000003 	b	3ea18 <memTestDataBus(BusAccess&, unsigned long)+0x38>
   3ea08:	e6ef0072 	uxtb	r0, r2
   3ea0c:	e3500000 	cmp	r0, #0
   3ea10:	e5cd000e 	strb	r0, [sp, #14]
   3ea14:	0a000010 	beq	3ea5c <memTestDataBus(BusAccess&, unsigned long)+0x7c>
   3ea18:	e1a03005 	mov	r3, r5
   3ea1c:	e1a02008 	mov	r2, r8
   3ea20:	e1a01006 	mov	r1, r6
   3ea24:	e58d4000 	str	r4, [sp]
   3ea28:	e1a00007 	mov	r0, r7
   3ea2c:	ebffd362 	bl	337bc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3ea30:	e1a03005 	mov	r3, r5
   3ea34:	e28d200f 	add	r2, sp, #15
   3ea38:	e58d4000 	str	r4, [sp]
   3ea3c:	e1a01006 	mov	r1, r6
   3ea40:	e1a00007 	mov	r0, r7
   3ea44:	ebffd3ad 	bl	33900 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3ea48:	e5dd000e 	ldrb	r0, [sp, #14]
   3ea4c:	e5dd300f 	ldrb	r3, [sp, #15]
   3ea50:	e1a02080 	lsl	r2, r0, #1
   3ea54:	e1530000 	cmp	r3, r0
   3ea58:	0affffea 	beq	3ea08 <memTestDataBus(BusAccess&, unsigned long)+0x28>
   3ea5c:	e28dd010 	add	sp, sp, #16
   3ea60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0003ea64 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)>:
   3ea64:	e3e0c055 	mvn	ip, #85	; 0x55
   3ea68:	e3a03055 	mov	r3, #85	; 0x55
   3ea6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ea70:	e2425001 	sub	r5, r2, #1
   3ea74:	e24dd01c 	sub	sp, sp, #28
   3ea78:	e2152001 	ands	r2, r5, #1
   3ea7c:	e58d200c 	str	r2, [sp, #12]
   3ea80:	e5cdc014 	strb	ip, [sp, #20]
   3ea84:	e5cd3015 	strb	r3, [sp, #21]
   3ea88:	e1a06000 	mov	r6, r0
   3ea8c:	e1a07001 	mov	r7, r1
   3ea90:	0a00005a 	beq	3ec00 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x19c>
   3ea94:	e1a04002 	mov	r4, r2
   3ea98:	e3a09000 	mov	r9, #0
   3ea9c:	e3a08001 	mov	r8, #1
   3eaa0:	e0871004 	add	r1, r7, r4
   3eaa4:	e58d9000 	str	r9, [sp]
   3eaa8:	e1a03008 	mov	r3, r8
   3eaac:	e28d2014 	add	r2, sp, #20
   3eab0:	e1a00006 	mov	r0, r6
   3eab4:	e1a04084 	lsl	r4, r4, #1
   3eab8:	ebffd33f 	bl	337bc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3eabc:	e015a004 	ands	sl, r5, r4
   3eac0:	1afffff6 	bne	3eaa0 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x3c>
   3eac4:	e58da000 	str	sl, [sp]
   3eac8:	e28d2015 	add	r2, sp, #21
   3eacc:	e3a03001 	mov	r3, #1
   3ead0:	e1a01007 	mov	r1, r7
   3ead4:	e1a00006 	mov	r0, r6
   3ead8:	ebffd337 	bl	337bc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3eadc:	e3a0b001 	mov	fp, #1
   3eae0:	e59d400c 	ldr	r4, [sp, #12]
   3eae4:	ea000001 	b	3eaf0 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x8c>
   3eae8:	e0158004 	ands	r8, r5, r4
   3eaec:	0a00000e 	beq	3eb2c <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xc8>
   3eaf0:	e0879004 	add	r9, r7, r4
   3eaf4:	e1a0300b 	mov	r3, fp
   3eaf8:	e28d2017 	add	r2, sp, #23
   3eafc:	e58da000 	str	sl, [sp]
   3eb00:	e1a01009 	mov	r1, r9
   3eb04:	e1a00006 	mov	r0, r6
   3eb08:	ebffd37c 	bl	33900 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3eb0c:	e5dd2017 	ldrb	r2, [sp, #23]
   3eb10:	e5dd3014 	ldrb	r3, [sp, #20]
   3eb14:	e1a04084 	lsl	r4, r4, #1
   3eb18:	e1520003 	cmp	r2, r3
   3eb1c:	0afffff1 	beq	3eae8 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x84>
   3eb20:	e1a00009 	mov	r0, r9
   3eb24:	e28dd01c 	add	sp, sp, #28
   3eb28:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eb2c:	e3a0b001 	mov	fp, #1
   3eb30:	e58d8000 	str	r8, [sp]
   3eb34:	e3a03001 	mov	r3, #1
   3eb38:	e28d2014 	add	r2, sp, #20
   3eb3c:	e1a01007 	mov	r1, r7
   3eb40:	e1a00006 	mov	r0, r6
   3eb44:	ebffd31c 	bl	337bc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3eb48:	e59da00c 	ldr	sl, [sp, #12]
   3eb4c:	e087900a 	add	r9, r7, sl
   3eb50:	e1a01009 	mov	r1, r9
   3eb54:	e1a0300b 	mov	r3, fp
   3eb58:	e28d2015 	add	r2, sp, #21
   3eb5c:	e58d8000 	str	r8, [sp]
   3eb60:	e1a00006 	mov	r0, r6
   3eb64:	ebffd314 	bl	337bc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3eb68:	e1a0300b 	mov	r3, fp
   3eb6c:	e28d2016 	add	r2, sp, #22
   3eb70:	e58d8000 	str	r8, [sp]
   3eb74:	e1a01007 	mov	r1, r7
   3eb78:	e1a00006 	mov	r0, r6
   3eb7c:	ebffd35f 	bl	33900 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3eb80:	e5dd2016 	ldrb	r2, [sp, #22]
   3eb84:	e5dd3014 	ldrb	r3, [sp, #20]
   3eb88:	e1520003 	cmp	r2, r3
   3eb8c:	1affffe3 	bne	3eb20 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xbc>
   3eb90:	e59d400c 	ldr	r4, [sp, #12]
   3eb94:	ea000001 	b	3eba0 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x13c>
   3eb98:	e0153004 	ands	r3, r5, r4
   3eb9c:	0a00000c 	beq	3ebd4 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x170>
   3eba0:	e1a0300b 	mov	r3, fp
   3eba4:	e28d2017 	add	r2, sp, #23
   3eba8:	e0871004 	add	r1, r7, r4
   3ebac:	e58d8000 	str	r8, [sp]
   3ebb0:	e1a00006 	mov	r0, r6
   3ebb4:	ebffd351 	bl	33900 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3ebb8:	e5dd2017 	ldrb	r2, [sp, #23]
   3ebbc:	e5dd3014 	ldrb	r3, [sp, #20]
   3ebc0:	e1520003 	cmp	r2, r3
   3ebc4:	1154000a 	cmpne	r4, sl
   3ebc8:	e1a04084 	lsl	r4, r4, #1
   3ebcc:	0afffff1 	beq	3eb98 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x134>
   3ebd0:	eaffffd2 	b	3eb20 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xbc>
   3ebd4:	e58d3000 	str	r3, [sp]
   3ebd8:	e1a01009 	mov	r1, r9
   3ebdc:	e1a0a08a 	lsl	sl, sl, #1
   3ebe0:	e1a0300b 	mov	r3, fp
   3ebe4:	e28d2014 	add	r2, sp, #20
   3ebe8:	e1a00006 	mov	r0, r6
   3ebec:	ebffd2f2 	bl	337bc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3ebf0:	e115000a 	tst	r5, sl
   3ebf4:	1affffd4 	bne	3eb4c <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xe8>
   3ebf8:	e3a09000 	mov	r9, #0
   3ebfc:	eaffffc7 	b	3eb20 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xbc>
   3ec00:	e59d400c 	ldr	r4, [sp, #12]
   3ec04:	e28d2015 	add	r2, sp, #21
   3ec08:	e58d4000 	str	r4, [sp]
   3ec0c:	e3a03001 	mov	r3, #1
   3ec10:	ebffd2e9 	bl	337bc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3ec14:	e58d4000 	str	r4, [sp]
   3ec18:	e1a01007 	mov	r1, r7
   3ec1c:	e1a00006 	mov	r0, r6
   3ec20:	e3a03001 	mov	r3, #1
   3ec24:	e28d2014 	add	r2, sp, #20
   3ec28:	ebffd2e3 	bl	337bc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3ec2c:	eafffff1 	b	3ebf8 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x194>

0003ec30 <memTestDevice(BusAccess&, unsigned long, unsigned long)>:
   3ec30:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3ec34:	e3a04001 	mov	r4, #1
   3ec38:	e24dd014 	sub	sp, sp, #20
   3ec3c:	e3520000 	cmp	r2, #0
   3ec40:	e5cd400d 	strb	r4, [sp, #13]
   3ec44:	0a00004d 	beq	3ed80 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x150>
   3ec48:	e1a06000 	mov	r6, r0
   3ec4c:	e1a07001 	mov	r7, r1
   3ec50:	e1a05001 	mov	r5, r1
   3ec54:	e3a09000 	mov	r9, #0
   3ec58:	e0828001 	add	r8, r2, r1
   3ec5c:	e1a03004 	mov	r3, r4
   3ec60:	e1a01005 	mov	r1, r5
   3ec64:	e58d9000 	str	r9, [sp]
   3ec68:	e28d200d 	add	r2, sp, #13
   3ec6c:	e1a00006 	mov	r0, r6
   3ec70:	ebffd2d1 	bl	337bc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3ec74:	e5dd300d 	ldrb	r3, [sp, #13]
   3ec78:	e2855001 	add	r5, r5, #1
   3ec7c:	e2833001 	add	r3, r3, #1
   3ec80:	e1580005 	cmp	r8, r5
   3ec84:	e5cd300d 	strb	r3, [sp, #13]
   3ec88:	1afffff3 	bne	3ec5c <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x2c>
   3ec8c:	e3a08001 	mov	r8, #1
   3ec90:	e1a04007 	mov	r4, r7
   3ec94:	e5cd800d 	strb	r8, [sp, #13]
   3ec98:	e3a09000 	mov	r9, #0
   3ec9c:	ea00000d 	b	3ecd8 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0xa8>
   3eca0:	e1e0c003 	mvn	ip, r3
   3eca4:	e1a01004 	mov	r1, r4
   3eca8:	e1a03008 	mov	r3, r8
   3ecac:	e58d9000 	str	r9, [sp]
   3ecb0:	e28d200e 	add	r2, sp, #14
   3ecb4:	e1a00006 	mov	r0, r6
   3ecb8:	e5cdc00e 	strb	ip, [sp, #14]
   3ecbc:	ebffd2be 	bl	337bc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3ecc0:	e5dd300d 	ldrb	r3, [sp, #13]
   3ecc4:	e2844001 	add	r4, r4, #1
   3ecc8:	e2833001 	add	r3, r3, #1
   3eccc:	e1540005 	cmp	r4, r5
   3ecd0:	e5cd300d 	strb	r3, [sp, #13]
   3ecd4:	0a00000c 	beq	3ed0c <memTestDevice(BusAccess&, unsigned long, unsigned long)+0xdc>
   3ecd8:	e1a03008 	mov	r3, r8
   3ecdc:	e28d200f 	add	r2, sp, #15
   3ece0:	e58d9000 	str	r9, [sp]
   3ece4:	e1a01004 	mov	r1, r4
   3ece8:	e1a00006 	mov	r0, r6
   3ecec:	ebffd303 	bl	33900 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3ecf0:	e5dd200f 	ldrb	r2, [sp, #15]
   3ecf4:	e5dd300d 	ldrb	r3, [sp, #13]
   3ecf8:	e1530002 	cmp	r3, r2
   3ecfc:	0affffe7 	beq	3eca0 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x70>
   3ed00:	e1a00004 	mov	r0, r4
   3ed04:	e28dd014 	add	sp, sp, #20
   3ed08:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3ed0c:	e3a02001 	mov	r2, #1
   3ed10:	e3a05000 	mov	r5, #0
   3ed14:	e1a03002 	mov	r3, r2
   3ed18:	e5cd200d 	strb	r2, [sp, #13]
   3ed1c:	e1a08002 	mov	r8, r2
   3ed20:	ea000006 	b	3ed40 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x110>
   3ed24:	e5dd300d 	ldrb	r3, [sp, #13]
   3ed28:	e2877001 	add	r7, r7, #1
   3ed2c:	e2833001 	add	r3, r3, #1
   3ed30:	e6ef3073 	uxtb	r3, r3
   3ed34:	e1570004 	cmp	r7, r4
   3ed38:	e5cd300d 	strb	r3, [sp, #13]
   3ed3c:	0a00000f 	beq	3ed80 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x150>
   3ed40:	e1e0c003 	mvn	ip, r3
   3ed44:	e28d200f 	add	r2, sp, #15
   3ed48:	e1a03008 	mov	r3, r8
   3ed4c:	e58d5000 	str	r5, [sp]
   3ed50:	e1a01007 	mov	r1, r7
   3ed54:	e1a00006 	mov	r0, r6
   3ed58:	e5cdc00e 	strb	ip, [sp, #14]
   3ed5c:	ebffd2e7 	bl	33900 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3ed60:	e5dd200f 	ldrb	r2, [sp, #15]
   3ed64:	e5dd300e 	ldrb	r3, [sp, #14]
   3ed68:	e1520003 	cmp	r2, r3
   3ed6c:	0affffec 	beq	3ed24 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0xf4>
   3ed70:	e1a04007 	mov	r4, r7
   3ed74:	e1a00004 	mov	r0, r4
   3ed78:	e28dd014 	add	sp, sp, #20
   3ed7c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3ed80:	e3a04000 	mov	r4, #0
   3ed84:	e1a00004 	mov	r0, r4
   3ed88:	e28dd014 	add	sp, sp, #20
   3ed8c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
