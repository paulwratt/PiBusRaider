
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <SET_BIT15+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d709 	mov	sp, #2359296	; 0x240000
    8040:	f1020012 	cps	#18
    8044:	e3a0d98e 	mov	sp, #2326528	; 0x238000
    8048:	f1020017 	cps	#23
    804c:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8050:	f102001b 	cps	#27
    8054:	e3a0d823 	mov	sp, #2293760	; 0x230000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea008424 	b	290f8 <sysinit>

Disassembly of section .text:

00008068 <main>:
    8068:	e92d4010 	push	{r4, lr}
    806c:	e24dd945 	sub	sp, sp, #1130496	; 0x114000
    8070:	e24ddeb3 	sub	sp, sp, #2864	; 0xb30
    8074:	e24dd008 	sub	sp, sp, #8
    8078:	e28d3008 	add	r3, sp, #8
    807c:	e1a00003 	mov	r0, r3
    8080:	e58d3004 	str	r3, [sp, #4]
    8084:	eb00000f 	bl	80c8 <CKernel::CKernel()>
    8088:	e59d0004 	ldr	r0, [sp, #4]
    808c:	eb0000a5 	bl	8328 <CKernel::Initialize()>
    8090:	e2504000 	subs	r4, r0, #0
    8094:	0a000004 	beq	80ac <main+0x44>
    8098:	e59d0004 	ldr	r0, [sp, #4]
    809c:	eb0000e9 	bl	8448 <CKernel::Run()>
    80a0:	e2404002 	sub	r4, r0, #2
    80a4:	e16f4f14 	clz	r4, r4
    80a8:	e1a042a4 	lsr	r4, r4, #5
    80ac:	e59d0004 	ldr	r0, [sp, #4]
    80b0:	eb000074 	bl	8288 <CKernel::~CKernel()>
    80b4:	e1a00004 	mov	r0, r4
    80b8:	e28dd945 	add	sp, sp, #1130496	; 0x114000
    80bc:	e28ddeb3 	add	sp, sp, #2864	; 0xb30
    80c0:	e28dd008 	add	sp, sp, #8
    80c4:	e8bd8010 	pop	{r4, pc}

000080c8 <CKernel::CKernel()>:
    80c8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    80cc:	e1a04000 	mov	r4, r0
    80d0:	e24dd010 	sub	sp, sp, #16
    80d4:	eb00d120 	bl	3c55c <Display::Display()>
    80d8:	e2840efa 	add	r0, r4, #4000	; 0xfa0
    80dc:	e3a01001 	mov	r1, #1
    80e0:	eb008e20 	bl	2b968 <CMemorySystem::CMemorySystem(bool)>
    80e4:	e2848d42 	add	r8, r4, #4224	; 0x1080
    80e8:	e2840d41 	add	r0, r4, #4160	; 0x1040
    80ec:	e3a01000 	mov	r1, #0
    80f0:	e2888008 	add	r8, r8, #8
    80f4:	e280003c 	add	r0, r0, #60	; 0x3c
    80f8:	eb007164 	bl	24690 <CActLED::CActLED(bool)>
    80fc:	e2845d63 	add	r5, r4, #6336	; 0x18c0
    8100:	e1a00008 	mov	r0, r8
    8104:	eb007892 	bl	26354 <CKernelOptions::CKernelOptions()>
    8108:	e2850024 	add	r0, r5, #36	; 0x24
    810c:	eb0073b0 	bl	24fd4 <CDeviceNameService::CDeviceNameService()>
    8110:	e2856030 	add	r6, r5, #48	; 0x30
    8114:	e285002c 	add	r0, r5, #44	; 0x2c
    8118:	eb008d18 	bl	2b580 <CExceptionHandler::CExceptionHandler()>
    811c:	e1a00006 	mov	r0, r6
    8120:	eb008f5d 	bl	2be9c <CInterruptSystem::CInterruptSystem()>
    8124:	e3a03000 	mov	r3, #0
    8128:	e2847c1b 	add	r7, r4, #6912	; 0x1b00
    812c:	e284ac6a 	add	sl, r4, #27136	; 0x6a00
    8130:	e2877030 	add	r7, r7, #48	; 0x30
    8134:	e1a02003 	mov	r2, r3
    8138:	e28a9060 	add	r9, sl, #96	; 0x60
    813c:	e1a01006 	mov	r1, r6
    8140:	e1a00007 	mov	r0, r7
    8144:	e1a05003 	mov	r5, r3
    8148:	eb0093c6 	bl	2d068 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)>
    814c:	e1a01006 	mov	r1, r6
    8150:	e1a00009 	mov	r0, r9
    8154:	eb008429 	bl	29200 <CTimer::CTimer(CInterruptSystem*)>
    8158:	e1a00008 	mov	r0, r8
    815c:	eb007848 	bl	26284 <CKernelOptions::GetLogLevel() const>
    8160:	e1a02009 	mov	r2, r9
    8164:	e1a01000 	mov	r1, r0
    8168:	e28a009c 	add	r0, sl, #156	; 0x9c
    816c:	eb00798e 	bl	267ac <CLogger::CLogger(unsigned int, CTimer*)>
    8170:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    8174:	e1a02009 	mov	r2, r9
    8178:	e1a01006 	mov	r1, r6
    817c:	e2800094 	add	r0, r0, #148	; 0x94
    8180:	e2846b1b 	add	r6, r4, #27648	; 0x6c00
    8184:	eb000678 	bl	9b6c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>
    8188:	e2860018 	add	r0, r6, #24
    818c:	eb006f73 	bl	23f60 <CScheduler::CScheduler()>
    8190:	e59fc0d8 	ldr	ip, [pc, #216]	; 8270 <CKernel::CKernel()+0x1a8>
    8194:	e1a03005 	mov	r3, r5
    8198:	e58dc004 	str	ip, [sp, #4]
    819c:	e1a02005 	mov	r2, r5
    81a0:	e1a01005 	mov	r1, r5
    81a4:	e286007c 	add	r0, r6, #124	; 0x7c
    81a8:	e58d5008 	str	r5, [sp, #8]
    81ac:	e58d5000 	str	r5, [sp]
    81b0:	e2846c6d 	add	r6, r4, #27904	; 0x6d00
    81b4:	eb004513 	bl	19608 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>
    81b8:	e28660a8 	add	r6, r6, #168	; 0xa8
    81bc:	e1a01007 	mov	r1, r7
    81c0:	e2847ce5 	add	r7, r4, #58624	; 0xe500
    81c4:	e1a02005 	mov	r2, r5
    81c8:	e28770bc 	add	r7, r7, #188	; 0xbc
    81cc:	e1a00006 	mov	r0, r6
    81d0:	e284ab3a 	add	sl, r4, #59392	; 0xe800
    81d4:	e59f8098 	ldr	r8, [pc, #152]	; 8274 <CKernel::CKernel()+0x1ac>
    81d8:	eb00a328 	bl	30e80 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)>
    81dc:	e28aa03c 	add	sl, sl, #60	; 0x3c
    81e0:	e1a00007 	mov	r0, r7
    81e4:	eb00a411 	bl	31230 <BusAccess::BusAccess()>
    81e8:	e0848008 	add	r8, r4, r8
    81ec:	e1a0000a 	mov	r0, sl
    81f0:	eb00b0a7 	bl	34494 <TargetProgrammer::TargetProgrammer()>
    81f4:	e1a02007 	mov	r2, r7
    81f8:	e1a01006 	mov	r1, r6
    81fc:	e1a00008 	mov	r0, r8
    8200:	eb00b146 	bl	34720 <HwManager::HwManager(CommandHandler&, BusAccess&)>
    8204:	e59f906c 	ldr	r9, [pc, #108]	; 8278 <CKernel::CKernel()+0x1b0>
    8208:	e59f006c 	ldr	r0, [pc, #108]	; 827c <CKernel::CKernel()+0x1b4>
    820c:	e1a03007 	mov	r3, r7
    8210:	e1a02008 	mov	r2, r8
    8214:	e1a01006 	mov	r1, r6
    8218:	e0849009 	add	r9, r4, r9
    821c:	e0840000 	add	r0, r4, r0
    8220:	eb00b5a9 	bl	358cc <BusControlAPI::BusControlAPI(CommandHandler&, HwManager&, BusAccess&)>
    8224:	e1a03008 	mov	r3, r8
    8228:	e1a02006 	mov	r2, r6
    822c:	e1a01004 	mov	r1, r4
    8230:	e88d0480 	stm	sp, {r7, sl}
    8234:	e1a00009 	mov	r0, r9
    8238:	eb00bc10 	bl	37280 <McManager::McManager(DisplayBase*, CommandHandler&, HwManager&, BusAccess&, TargetProgrammer&)>
    823c:	e59f003c 	ldr	r0, [pc, #60]	; 8280 <CKernel::CKernel()+0x1b8>
    8240:	e1a03009 	mov	r3, r9
    8244:	e1a02006 	mov	r2, r6
    8248:	e1a01004 	mov	r1, r4
    824c:	e0840000 	add	r0, r4, r0
    8250:	eb0000dc 	bl	85c8 <BusRaiderApp::BusRaiderApp(Display&, CommsManager&, McManager&)>
    8254:	e1a00004 	mov	r0, r4
    8258:	e59f2024 	ldr	r2, [pc, #36]	; 8284 <CKernel::CKernel()+0x1bc>
    825c:	e2843945 	add	r3, r4, #1130496	; 0x114000
    8260:	e5824000 	str	r4, [r2]
    8264:	e5c35b2c 	strb	r5, [r3, #2860]	; 0xb2c
    8268:	e28dd010 	add	sp, sp, #16
    826c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8270:	0003ece0 	.word	0x0003ece0
    8274:	0010e92c 	.word	0x0010e92c
    8278:	0010ee60 	.word	0x0010ee60
    827c:	0010e96c 	.word	0x0010e96c
    8280:	001115f0 	.word	0x001115f0
    8284:	0004e0b8 	.word	0x0004e0b8

00008288 <CKernel::~CKernel()>:
    8288:	e92d4070 	push	{r4, r5, r6, lr}
    828c:	e1a04000 	mov	r4, r0
    8290:	e2800c6d 	add	r0, r0, #27904	; 0x6d00
    8294:	e2845b1b 	add	r5, r4, #27648	; 0x6c00
    8298:	e28000a8 	add	r0, r0, #168	; 0xa8
    829c:	eb00a31b 	bl	30f10 <CommsManager::~CommsManager()>
    82a0:	e285007c 	add	r0, r5, #124	; 0x7c
    82a4:	eb0045a1 	bl	19930 <CNetSubSystem::~CNetSubSystem()>
    82a8:	e2850018 	add	r0, r5, #24
    82ac:	eb006f47 	bl	23fd0 <CScheduler::~CScheduler()>
    82b0:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    82b4:	e2845c6a 	add	r5, r4, #27136	; 0x6a00
    82b8:	e2800094 	add	r0, r0, #148	; 0x94
    82bc:	eb000ee0 	bl	be44 <CDWHCIDevice::~CDWHCIDevice()>
    82c0:	e285009c 	add	r0, r5, #156	; 0x9c
    82c4:	eb00794e 	bl	26804 <CLogger::~CLogger()>
    82c8:	e2850060 	add	r0, r5, #96	; 0x60
    82cc:	eb0083ec 	bl	29284 <CTimer::~CTimer()>
    82d0:	e2840c1b 	add	r0, r4, #6912	; 0x1b00
    82d4:	e2845d63 	add	r5, r4, #6336	; 0x18c0
    82d8:	e2800030 	add	r0, r0, #48	; 0x30
    82dc:	eb0093e5 	bl	2d278 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>
    82e0:	e2850030 	add	r0, r5, #48	; 0x30
    82e4:	eb008efa 	bl	2bed4 <CInterruptSystem::~CInterruptSystem()>
    82e8:	e285002c 	add	r0, r5, #44	; 0x2c
    82ec:	eb008cc6 	bl	2b60c <CExceptionHandler::~CExceptionHandler()>
    82f0:	e2850024 	add	r0, r5, #36	; 0x24
    82f4:	eb007347 	bl	25018 <CDeviceNameService::~CDeviceNameService()>
    82f8:	e2840d42 	add	r0, r4, #4224	; 0x1080
    82fc:	e2800008 	add	r0, r0, #8
    8300:	eb0077d3 	bl	26254 <CKernelOptions::~CKernelOptions()>
    8304:	e2840d41 	add	r0, r4, #4160	; 0x1040
    8308:	e280003c 	add	r0, r0, #60	; 0x3c
    830c:	eb007105 	bl	24728 <CActLED::~CActLED()>
    8310:	e2840efa 	add	r0, r4, #4000	; 0xfa0
    8314:	eb008de0 	bl	2ba9c <CMemorySystem::~CMemorySystem()>
    8318:	e1a00004 	mov	r0, r4
    831c:	eb00d004 	bl	3c334 <Display::~Display()>
    8320:	e1a00004 	mov	r0, r4
    8324:	e8bd8070 	pop	{r4, r5, r6, pc}

00008328 <CKernel::Initialize()>:
    8328:	e92d4070 	push	{r4, r5, r6, lr}
    832c:	e2805d63 	add	r5, r0, #6336	; 0x18c0
    8330:	e1a04000 	mov	r4, r0
    8334:	e2850030 	add	r0, r5, #48	; 0x30
    8338:	eb008ef4 	bl	2bf10 <CInterruptSystem::Initialize()>
    833c:	e3500000 	cmp	r0, #0
    8340:	1a000002 	bne	8350 <CKernel::Initialize()+0x28>
    8344:	e3a05000 	mov	r5, #0
    8348:	e1a00005 	mov	r0, r5
    834c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8350:	e1a00004 	mov	r0, r4
    8354:	eb00d08c 	bl	3c58c <Display::init()>
    8358:	e3500000 	cmp	r0, #0
    835c:	0afffff8 	beq	8344 <CKernel::Initialize()+0x1c>
    8360:	e2840d42 	add	r0, r4, #4224	; 0x1080
    8364:	e2800008 	add	r0, r0, #8
    8368:	eb0077c2 	bl	26278 <CKernelOptions::GetLogDevice() const>
    836c:	e3a02000 	mov	r2, #0
    8370:	e1a01000 	mov	r1, r0
    8374:	e2850024 	add	r0, r5, #36	; 0x24
    8378:	eb0073b8 	bl	25260 <CDeviceNameService::GetDevice(char const*, bool)>
    837c:	e2845c6a 	add	r5, r4, #27136	; 0x6a00
    8380:	e3500000 	cmp	r0, #0
    8384:	11a01000 	movne	r1, r0
    8388:	01a01004 	moveq	r1, r4
    838c:	e285009c 	add	r0, r5, #156	; 0x9c
    8390:	eb007938 	bl	26878 <CLogger::Initialize(CDevice*)>
    8394:	e3500000 	cmp	r0, #0
    8398:	0affffe9 	beq	8344 <CKernel::Initialize()+0x1c>
    839c:	e59f3090 	ldr	r3, [pc, #144]	; 8434 <CKernel::Initialize()+0x10c>
    83a0:	e2840c1b 	add	r0, r4, #6912	; 0x1b00
    83a4:	e1a02003 	mov	r2, r3
    83a8:	e2800030 	add	r0, r0, #48	; 0x30
    83ac:	e3a01ae1 	mov	r1, #921600	; 0xe1000
    83b0:	eb009419 	bl	2d41c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)>
    83b4:	e3500000 	cmp	r0, #0
    83b8:	0affffe1 	beq	8344 <CKernel::Initialize()+0x1c>
    83bc:	e2850060 	add	r0, r5, #96	; 0x60
    83c0:	eb008659 	bl	29d2c <CTimer::Initialize()>
    83c4:	e3500000 	cmp	r0, #0
    83c8:	0affffdd 	beq	8344 <CKernel::Initialize()+0x1c>
    83cc:	e2840c6b 	add	r0, r4, #27392	; 0x6b00
    83d0:	e2800094 	add	r0, r0, #148	; 0x94
    83d4:	eb000eff 	bl	bfd8 <CDWHCIDevice::Initialize()>
    83d8:	e3500000 	cmp	r0, #0
    83dc:	0affffd8 	beq	8344 <CKernel::Initialize()+0x1c>
    83e0:	e2840c6d 	add	r0, r4, #27904	; 0x6d00
    83e4:	e28000a8 	add	r0, r0, #168	; 0xa8
    83e8:	eb00a2cd 	bl	30f24 <CommsManager::setup()>
    83ec:	e1a05000 	mov	r5, r0
    83f0:	e2840ce5 	add	r0, r4, #58624	; 0xe500
    83f4:	e28000bc 	add	r0, r0, #188	; 0xbc
    83f8:	eb00a3c1 	bl	31304 <BusAccess::init()>
    83fc:	e59f0034 	ldr	r0, [pc, #52]	; 8438 <CKernel::Initialize()+0x110>
    8400:	e0840000 	add	r0, r4, r0
    8404:	eb00b0d4 	bl	3475c <HwManager::init()>
    8408:	e59f002c 	ldr	r0, [pc, #44]	; 843c <CKernel::Initialize()+0x114>
    840c:	e0840000 	add	r0, r4, r0
    8410:	eb00b540 	bl	35918 <BusControlAPI::init()>
    8414:	e59f0024 	ldr	r0, [pc, #36]	; 8440 <CKernel::Initialize()+0x118>
    8418:	e0840000 	add	r0, r4, r0
    841c:	eb00bbb7 	bl	37300 <McManager::init()>
    8420:	e59f001c 	ldr	r0, [pc, #28]	; 8444 <CKernel::Initialize()+0x11c>
    8424:	e0840000 	add	r0, r4, r0
    8428:	eb000088 	bl	8650 <BusRaiderApp::init()>
    842c:	e1a00005 	mov	r0, r5
    8430:	e8bd8070 	pop	{r4, r5, r6, pc}
    8434:	000f4240 	.word	0x000f4240
    8438:	0010e92c 	.word	0x0010e92c
    843c:	0010e96c 	.word	0x0010e96c
    8440:	0010ee60 	.word	0x0010ee60
    8444:	001115f0 	.word	0x001115f0

00008448 <CKernel::Run()>:
    8448:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    844c:	e1a04000 	mov	r4, r0
    8450:	e2809c6a 	add	r9, r0, #27136	; 0x6a00
    8454:	e289909c 	add	r9, r9, #156	; 0x9c
    8458:	e1a00009 	mov	r0, r9
    845c:	e59f3118 	ldr	r3, [pc, #280]	; 857c <CKernel::Run()+0x134>
    8460:	e3a02003 	mov	r2, #3
    8464:	e59f1114 	ldr	r1, [pc, #276]	; 8580 <CKernel::Run()+0x138>
    8468:	eb007914 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    846c:	e2840d63 	add	r0, r4, #6336	; 0x18c0
    8470:	e2800024 	add	r0, r0, #36	; 0x24
    8474:	e3a02000 	mov	r2, #0
    8478:	e59f1104 	ldr	r1, [pc, #260]	; 8584 <CKernel::Run()+0x13c>
    847c:	eb007377 	bl	25260 <CDeviceNameService::GetDevice(char const*, bool)>
    8480:	e2506000 	subs	r6, r0, #0
    8484:	0a000030 	beq	854c <CKernel::Run()+0x104>
    8488:	e3a02001 	mov	r2, #1
    848c:	e59f50f4 	ldr	r5, [pc, #244]	; 8588 <CKernel::Run()+0x140>
    8490:	e1a01002 	mov	r1, r2
    8494:	e0845005 	add	r5, r4, r5
    8498:	e1a00005 	mov	r0, r5
    849c:	eb0000a0 	bl	8724 <BusRaiderApp::peripheralStatus(bool, bool)>
    84a0:	e1a00006 	mov	r0, r6
    84a4:	e59f10e0 	ldr	r1, [pc, #224]	; 858c <CKernel::Run()+0x144>
    84a8:	eb000514 	bl	9900 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>
    84ac:	e59f80dc 	ldr	r8, [pc, #220]	; 8590 <CKernel::Run()+0x148>
    84b0:	e59f70dc 	ldr	r7, [pc, #220]	; 8594 <CKernel::Run()+0x14c>
    84b4:	e59f60dc 	ldr	r6, [pc, #220]	; 8598 <CKernel::Run()+0x150>
    84b8:	e0848008 	add	r8, r4, r8
    84bc:	e0847007 	add	r7, r4, r7
    84c0:	e0846006 	add	r6, r4, r6
    84c4:	eb0089f7 	bl	2aca8 <IsChainBootEnabled>
    84c8:	e3500000 	cmp	r0, #0
    84cc:	e2843945 	add	r3, r4, #1130496	; 0x114000
    84d0:	1a000002 	bne	84e0 <CKernel::Run()+0x98>
    84d4:	e5d33b2c 	ldrb	r3, [r3, #2860]	; 0xb2c
    84d8:	e3530000 	cmp	r3, #0
    84dc:	0a00000a 	beq	850c <CKernel::Run()+0xc4>
    84e0:	e1a00009 	mov	r0, r9
    84e4:	e59f30b0 	ldr	r3, [pc, #176]	; 859c <CKernel::Run()+0x154>
    84e8:	e3a02003 	mov	r2, #3
    84ec:	e59f108c 	ldr	r1, [pc, #140]	; 8580 <CKernel::Run()+0x138>
    84f0:	eb0078f2 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    84f4:	e2840b1b 	add	r0, r4, #27648	; 0x6c00
    84f8:	e2800018 	add	r0, r0, #24
    84fc:	e3a01001 	mov	r1, #1
    8500:	eb006fd6 	bl	24460 <CScheduler::Sleep(unsigned int)>
    8504:	e3a00002 	mov	r0, #2
    8508:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    850c:	eb009687 	bl	2df30 <millis>
    8510:	e2840c6d 	add	r0, r4, #27904	; 0x6d00
    8514:	e28000a8 	add	r0, r0, #168	; 0xa8
    8518:	eb00a2c9 	bl	31044 <CommsManager::service()>
    851c:	e2840ce5 	add	r0, r4, #58624	; 0xe500
    8520:	e28000bc 	add	r0, r0, #188	; 0xbc
    8524:	eb00a6ec 	bl	320dc <BusAccess::service()>
    8528:	e1a00008 	mov	r0, r8
    852c:	eb00b0c1 	bl	34838 <HwManager::service()>
    8530:	e1a00007 	mov	r0, r7
    8534:	eb00b733 	bl	36208 <BusControlAPI::service()>
    8538:	e1a00006 	mov	r0, r6
    853c:	eb00bd1d 	bl	379b8 <McManager::service()>
    8540:	e1a00005 	mov	r0, r5
    8544:	eb00033f 	bl	9248 <BusRaiderApp::service()>
    8548:	eaffffdd 	b	84c4 <CKernel::Run()+0x7c>
    854c:	e59f5034 	ldr	r5, [pc, #52]	; 8588 <CKernel::Run()+0x140>
    8550:	e1a00009 	mov	r0, r9
    8554:	e59f3044 	ldr	r3, [pc, #68]	; 85a0 <CKernel::Run()+0x158>
    8558:	e0845005 	add	r5, r4, r5
    855c:	e3a02001 	mov	r2, #1
    8560:	e59f1018 	ldr	r1, [pc, #24]	; 8580 <CKernel::Run()+0x138>
    8564:	eb0078d5 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8568:	e1a00005 	mov	r0, r5
    856c:	e1a02006 	mov	r2, r6
    8570:	e3a01001 	mov	r1, #1
    8574:	eb00006a 	bl	8724 <BusRaiderApp::peripheralStatus(bool, bool)>
    8578:	eaffffc8 	b	84a0 <CKernel::Run()+0x58>
    857c:	0003ecec 	.word	0x0003ecec
    8580:	0003ecd8 	.word	0x0003ecd8
    8584:	0003ed10 	.word	0x0003ed10
    8588:	001115f0 	.word	0x001115f0
    858c:	000085a4 	.word	0x000085a4
    8590:	0010e92c 	.word	0x0010e92c
    8594:	0010e96c 	.word	0x0010e96c
    8598:	0010ee60 	.word	0x0010ee60
    859c:	0003ed2c 	.word	0x0003ed2c
    85a0:	0003ed18 	.word	0x0003ed18

000085a4 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)>:
    85a4:	e59f3014 	ldr	r3, [pc, #20]	; 85c0 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x1c>
    85a8:	e1a02001 	mov	r2, r1
    85ac:	e5933000 	ldr	r3, [r3]
    85b0:	e1a01000 	mov	r1, r0
    85b4:	e59f0008 	ldr	r0, [pc, #8]	; 85c4 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x20>
    85b8:	e0830000 	add	r0, r3, r0
    85bc:	ea0001a4 	b	8c54 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)>
    85c0:	0004e0b8 	.word	0x0004e0b8
    85c4:	001115f0 	.word	0x001115f0

000085c8 <BusRaiderApp::BusRaiderApp(Display&, CommsManager&, McManager&)>:
    85c8:	e3a0c000 	mov	ip, #0
    85cc:	e92d4030 	push	{r4, r5, lr}
    85d0:	e3a05064 	mov	r5, #100	; 0x64
    85d4:	e3e04000 	mvn	r4, #0
    85d8:	e5801078 	str	r1, [r0, #120]	; 0x78
    85dc:	e59f1068 	ldr	r1, [pc, #104]	; 864c <BusRaiderApp::BusRaiderApp(Display&, CommsManager&, McManager&)+0x84>
    85e0:	e580207c 	str	r2, [r0, #124]	; 0x7c
    85e4:	e2802a03 	add	r2, r0, #12288	; 0x3000
    85e8:	e5803080 	str	r3, [r0, #128]	; 0x80
    85ec:	e5c0c008 	strb	ip, [r0, #8]
    85f0:	e580c070 	str	ip, [r0, #112]	; 0x70
    85f4:	e5810000 	str	r0, [r1]
    85f8:	e582c528 	str	ip, [r2, #1320]	; 0x528
    85fc:	e5c2c534 	strb	ip, [r2, #1332]	; 0x534
    8600:	e582c52c 	str	ip, [r2, #1324]	; 0x52c
    8604:	e5825530 	str	r5, [r2, #1328]	; 0x530
    8608:	e1a0e000 	mov	lr, r0
    860c:	e580c004 	str	ip, [r0, #4]
    8610:	e580c074 	str	ip, [r0, #116]	; 0x74
    8614:	e5c0c084 	strb	ip, [r0, #132]	; 0x84
    8618:	e5c0c000 	strb	ip, [r0]
    861c:	e5c0c854 	strb	ip, [r0, #2132]	; 0x854
    8620:	e5c0c872 	strb	ip, [r0, #2162]	; 0x872
    8624:	e5c0c890 	strb	ip, [r0, #2192]	; 0x890
    8628:	e5c0c8f4 	strb	ip, [r0, #2292]	; 0x8f4
    862c:	e5c0c958 	strb	ip, [r0, #2392]	; 0x958
    8630:	e580c95c 	str	ip, [r0, #2396]	; 0x95c
    8634:	e5c0c960 	strb	ip, [r0, #2400]	; 0x960
    8638:	e582c070 	str	ip, [r2, #112]	; 0x70
    863c:	e582c074 	str	ip, [r2, #116]	; 0x74
    8640:	e5c2c535 	strb	ip, [r2, #1333]	; 0x535
    8644:	e5824538 	str	r4, [r2, #1336]	; 0x538
    8648:	e8bd8030 	pop	{r4, r5, pc}
    864c:	0004e0bc 	.word	0x0004e0bc

00008650 <BusRaiderApp::init()>:
    8650:	e1a01000 	mov	r1, r0
    8654:	e3a03000 	mov	r3, #0
    8658:	e3e0c000 	mvn	ip, #0
    865c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8660:	e2812a03 	add	r2, r1, #12288	; 0x3000
    8664:	e24dd00c 	sub	sp, sp, #12
    8668:	e590007c 	ldr	r0, [r0, #124]	; 0x7c
    866c:	e5813004 	str	r3, [r1, #4]
    8670:	e5c13008 	strb	r3, [r1, #8]
    8674:	e5813070 	str	r3, [r1, #112]	; 0x70
    8678:	e5813074 	str	r3, [r1, #116]	; 0x74
    867c:	e5c13084 	strb	r3, [r1, #132]	; 0x84
    8680:	e5c13000 	strb	r3, [r1]
    8684:	e5c13854 	strb	r3, [r1, #2132]	; 0x854
    8688:	e5c13872 	strb	r3, [r1, #2162]	; 0x872
    868c:	e5c13890 	strb	r3, [r1, #2192]	; 0x890
    8690:	e5c138f4 	strb	r3, [r1, #2292]	; 0x8f4
    8694:	e5c13958 	strb	r3, [r1, #2392]	; 0x958
    8698:	e581395c 	str	r3, [r1, #2396]	; 0x95c
    869c:	e5c13960 	strb	r3, [r1, #2400]	; 0x960
    86a0:	e58d3004 	str	r3, [sp, #4]
    86a4:	e5823070 	str	r3, [r2, #112]	; 0x70
    86a8:	e5823074 	str	r3, [r2, #116]	; 0x74
    86ac:	e5c23535 	strb	r3, [r2, #1333]	; 0x535
    86b0:	e58d3000 	str	r3, [sp]
    86b4:	e582c538 	str	ip, [r2, #1336]	; 0x538
    86b8:	e59f300c 	ldr	r3, [pc, #12]	; 86cc <BusRaiderApp::init()+0x7c>
    86bc:	e3a02001 	mov	r2, #1
    86c0:	eb009d18 	bl	2fb28 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
    86c4:	e28dd00c 	add	sp, sp, #12
    86c8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    86cc:	00009650 	.word	0x00009650

000086d0 <BusRaiderApp::clear()>:
    86d0:	e3a03000 	mov	r3, #0
    86d4:	e3e01000 	mvn	r1, #0
    86d8:	e2802a03 	add	r2, r0, #12288	; 0x3000
    86dc:	e5803004 	str	r3, [r0, #4]
    86e0:	e5c03008 	strb	r3, [r0, #8]
    86e4:	e5803070 	str	r3, [r0, #112]	; 0x70
    86e8:	e5803074 	str	r3, [r0, #116]	; 0x74
    86ec:	e5c03084 	strb	r3, [r0, #132]	; 0x84
    86f0:	e5c03000 	strb	r3, [r0]
    86f4:	e5c03854 	strb	r3, [r0, #2132]	; 0x854
    86f8:	e5c03872 	strb	r3, [r0, #2162]	; 0x872
    86fc:	e5c03890 	strb	r3, [r0, #2192]	; 0x890
    8700:	e5c038f4 	strb	r3, [r0, #2292]	; 0x8f4
    8704:	e5c03958 	strb	r3, [r0, #2392]	; 0x958
    8708:	e580395c 	str	r3, [r0, #2396]	; 0x95c
    870c:	e5c03960 	strb	r3, [r0, #2400]	; 0x960
    8710:	e5823070 	str	r3, [r2, #112]	; 0x70
    8714:	e5823074 	str	r3, [r2, #116]	; 0x74
    8718:	e5c23535 	strb	r3, [r2, #1333]	; 0x535
    871c:	e5821538 	str	r1, [r2, #1336]	; 0x538
    8720:	e12fff1e 	bx	lr

00008724 <BusRaiderApp::peripheralStatus(bool, bool)>:
    8724:	e3510000 	cmp	r1, #0
    8728:	0a00000a 	beq	8758 <BusRaiderApp::peripheralStatus(bool, bool)+0x34>
    872c:	e3520000 	cmp	r2, #0
    8730:	e5900078 	ldr	r0, [r0, #120]	; 0x78
    8734:	0a000003 	beq	8748 <BusRaiderApp::peripheralStatus(bool, bool)+0x24>
    8738:	e59f302c 	ldr	r3, [pc, #44]	; 876c <BusRaiderApp::peripheralStatus(bool, bool)+0x48>
    873c:	e3a02002 	mov	r2, #2
    8740:	e3a01008 	mov	r1, #8
    8744:	ea00cfe0 	b	3c6cc <Display::statusPut(int, int, char const*)>
    8748:	e59f3020 	ldr	r3, [pc, #32]	; 8770 <BusRaiderApp::peripheralStatus(bool, bool)+0x4c>
    874c:	e3a02001 	mov	r2, #1
    8750:	e3a01008 	mov	r1, #8
    8754:	ea00cfdc 	b	3c6cc <Display::statusPut(int, int, char const*)>
    8758:	e1a02001 	mov	r2, r1
    875c:	e5900078 	ldr	r0, [r0, #120]	; 0x78
    8760:	e59f300c 	ldr	r3, [pc, #12]	; 8774 <BusRaiderApp::peripheralStatus(bool, bool)+0x50>
    8764:	e3a01008 	mov	r1, #8
    8768:	ea00cfd7 	b	3c6cc <Display::statusPut(int, int, char const*)>
    876c:	0003ed4c 	.word	0x0003ed4c
    8770:	0003ed6c 	.word	0x0003ed6c
    8774:	0003ed80 	.word	0x0003ed80

00008778 <BusRaiderApp::statusDisplayUpdate()>:
    8778:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    877c:	e1a06000 	mov	r6, r0
    8780:	e5903080 	ldr	r3, [r0, #128]	; 0x80
    8784:	e24dd0d4 	sub	sp, sp, #212	; 0xd4
    8788:	e593400c 	ldr	r4, [r3, #12]
    878c:	e590507c 	ldr	r5, [r0, #124]	; 0x7c
    8790:	eb0095e5 	bl	2df2c <micros>
    8794:	e5961004 	ldr	r1, [r6, #4]
    8798:	e59f244c 	ldr	r2, [pc, #1100]	; 8bec <BusRaiderApp::statusDisplayUpdate()+0x474>
    879c:	eb009600 	bl	2dfa4 <isTimeout>
    87a0:	e3500000 	cmp	r0, #0
    87a4:	1a000001 	bne	87b0 <BusRaiderApp::statusDisplayUpdate()+0x38>
    87a8:	e28dd0d4 	add	sp, sp, #212	; 0xd4
    87ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    87b0:	eb0095dd 	bl	2df2c <micros>
    87b4:	e3a02000 	mov	r2, #0
    87b8:	e59f7430 	ldr	r7, [pc, #1072]	; 8bf0 <BusRaiderApp::statusDisplayUpdate()+0x478>
    87bc:	e1a01002 	mov	r1, r2
    87c0:	e5973000 	ldr	r3, [r7]
    87c4:	e5860004 	str	r0, [r6, #4]
    87c8:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    87cc:	eb00cfbe 	bl	3c6cc <Display::statusPut(int, int, char const*)>
    87d0:	e5973004 	ldr	r3, [r7, #4]
    87d4:	e3a02000 	mov	r2, #0
    87d8:	e3a01001 	mov	r1, #1
    87dc:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    87e0:	e2867e8f 	add	r7, r6, #2288	; 0x8f0
    87e4:	eb00cfb8 	bl	3c6cc <Display::statusPut(int, int, char const*)>
    87e8:	e2877004 	add	r7, r7, #4
    87ec:	e3a02032 	mov	r2, #50	; 0x32
    87f0:	e59f13fc 	ldr	r1, [pc, #1020]	; 8bf4 <BusRaiderApp::statusDisplayUpdate()+0x47c>
    87f4:	e28d005c 	add	r0, sp, #92	; 0x5c
    87f8:	eb009606 	bl	2e018 <strlcpy>
    87fc:	e1a00007 	mov	r0, r7
    8800:	eb00861d 	bl	2a07c <strlen>
    8804:	e3500000 	cmp	r0, #0
    8808:	0a0000ab 	beq	8abc <BusRaiderApp::statusDisplayUpdate()+0x344>
    880c:	e1a01007 	mov	r1, r7
    8810:	e3a02032 	mov	r2, #50	; 0x32
    8814:	e28d005c 	add	r0, sp, #92	; 0x5c
    8818:	eb00961a 	bl	2e088 <strlcat>
    881c:	e5942000 	ldr	r2, [r4]
    8820:	e59f13d0 	ldr	r1, [pc, #976]	; 8bf8 <BusRaiderApp::statusDisplayUpdate()+0x480>
    8824:	e1a03fc2 	asr	r3, r2, #31
    8828:	e0c10291 	smull	r0, r1, r1, r2
    882c:	e0633141 	rsb	r3, r3, r1, asr #2
    8830:	e0831103 	add	r1, r3, r3, lsl #2
    8834:	e0422081 	sub	r2, r2, r1, lsl #1
    8838:	e58d2000 	str	r2, [sp]
    883c:	e3a0101e 	mov	r1, #30
    8840:	e59f23b4 	ldr	r2, [pc, #948]	; 8bfc <BusRaiderApp::statusDisplayUpdate()+0x484>
    8844:	e28d0090 	add	r0, sp, #144	; 0x90
    8848:	eb009669 	bl	2e1f4 <snprintf>
    884c:	e28d1090 	add	r1, sp, #144	; 0x90
    8850:	e3a02032 	mov	r2, #50	; 0x32
    8854:	e28d005c 	add	r0, sp, #92	; 0x5c
    8858:	eb00960a 	bl	2e088 <strlcat>
    885c:	e3a02032 	mov	r2, #50	; 0x32
    8860:	e59f1398 	ldr	r1, [pc, #920]	; 8c00 <BusRaiderApp::statusDisplayUpdate()+0x488>
    8864:	e28d005c 	add	r0, sp, #92	; 0x5c
    8868:	eb009606 	bl	2e088 <strlcat>
    886c:	e28d305c 	add	r3, sp, #92	; 0x5c
    8870:	e3a02000 	mov	r2, #0
    8874:	e3a01002 	mov	r1, #2
    8878:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    887c:	eb00cf92 	bl	3c6cc <Display::statusPut(int, int, char const*)>
    8880:	e3a02000 	mov	r2, #0
    8884:	e5d63872 	ldrb	r3, [r6, #2162]	; 0x872
    8888:	e5cd205c 	strb	r2, [sp, #92]	; 0x5c
    888c:	e3530043 	cmp	r3, #67	; 0x43
    8890:	e3a02032 	mov	r2, #50	; 0x32
    8894:	1a0000be 	bne	8b94 <BusRaiderApp::statusDisplayUpdate()+0x41c>
    8898:	e59f1364 	ldr	r1, [pc, #868]	; 8c04 <BusRaiderApp::statusDisplayUpdate()+0x48c>
    889c:	e28d005c 	add	r0, sp, #92	; 0x5c
    88a0:	eb0095dc 	bl	2e018 <strlcpy>
    88a4:	e5d63958 	ldrb	r3, [r6, #2392]	; 0x958
    88a8:	e3530000 	cmp	r3, #0
    88ac:	1a0000c6 	bne	8bcc <BusRaiderApp::statusDisplayUpdate()+0x454>
    88b0:	e3a02032 	mov	r2, #50	; 0x32
    88b4:	e59f1344 	ldr	r1, [pc, #836]	; 8c00 <BusRaiderApp::statusDisplayUpdate()+0x488>
    88b8:	e28d005c 	add	r0, sp, #92	; 0x5c
    88bc:	eb0095f1 	bl	2e088 <strlcat>
    88c0:	e28d305c 	add	r3, sp, #92	; 0x5c
    88c4:	e3a02000 	mov	r2, #0
    88c8:	e3a01003 	mov	r1, #3
    88cc:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    88d0:	eb00cf7d 	bl	3c6cc <Display::statusPut(int, int, char const*)>
    88d4:	e3a02032 	mov	r2, #50	; 0x32
    88d8:	e59f1328 	ldr	r1, [pc, #808]	; 8c08 <BusRaiderApp::statusDisplayUpdate()+0x490>
    88dc:	e28d005c 	add	r0, sp, #92	; 0x5c
    88e0:	eb0095cc 	bl	2e018 <strlcpy>
    88e4:	e5960080 	ldr	r0, [r6, #128]	; 0x80
    88e8:	eb00bac4 	bl	37400 <McManager::getMachineName()>
    88ec:	e3a02032 	mov	r2, #50	; 0x32
    88f0:	e1a01000 	mov	r1, r0
    88f4:	e28d005c 	add	r0, sp, #92	; 0x5c
    88f8:	eb0095e2 	bl	2e088 <strlcat>
    88fc:	e3a02028 	mov	r2, #40	; 0x28
    8900:	e59f1304 	ldr	r1, [pc, #772]	; 8c0c <BusRaiderApp::statusDisplayUpdate()+0x494>
    8904:	e28d005c 	add	r0, sp, #92	; 0x5c
    8908:	eb0095de 	bl	2e088 <strlcat>
    890c:	e3a02000 	mov	r2, #0
    8910:	e28d305c 	add	r3, sp, #92	; 0x5c
    8914:	e3a01004 	mov	r1, #4
    8918:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    891c:	eb00cf6a 	bl	3c6cc <Display::statusPut(int, int, char const*)>
    8920:	e5960080 	ldr	r0, [r6, #128]	; 0x80
    8924:	eb00bb21 	bl	375b0 <McManager::getMachineClock()>
    8928:	e59f12e0 	ldr	r1, [pc, #736]	; 8c10 <BusRaiderApp::statusDisplayUpdate()+0x498>
    892c:	e1a03fc0 	asr	r3, r0, #31
    8930:	e0c12091 	smull	r2, r1, r1, r0
    8934:	e59f22d8 	ldr	r2, [pc, #728]	; 8c14 <BusRaiderApp::statusDisplayUpdate()+0x49c>
    8938:	e0633941 	rsb	r3, r3, r1, asr #18
    893c:	e0200392 	mla	r0, r2, r3, r0
    8940:	e59f12d0 	ldr	r1, [pc, #720]	; 8c18 <BusRaiderApp::statusDisplayUpdate()+0x4a0>
    8944:	e1a02fc0 	asr	r2, r0, #31
    8948:	e0c01091 	smull	r1, r0, r1, r0
    894c:	e0620340 	rsb	r0, r2, r0, asr #6
    8950:	e3500063 	cmp	r0, #99	; 0x63
    8954:	ca00008b 	bgt	8b88 <BusRaiderApp::statusDisplayUpdate()+0x410>
    8958:	e59f22bc 	ldr	r2, [pc, #700]	; 8c1c <BusRaiderApp::statusDisplayUpdate()+0x4a4>
    895c:	e3500009 	cmp	r0, #9
    8960:	d1a01002 	movle	r1, r2
    8964:	ca00009e 	bgt	8be4 <BusRaiderApp::statusDisplayUpdate()+0x46c>
    8968:	e58d0008 	str	r0, [sp, #8]
    896c:	e58d1004 	str	r1, [sp, #4]
    8970:	e58d2000 	str	r2, [sp]
    8974:	e3a01032 	mov	r1, #50	; 0x32
    8978:	e59f22a0 	ldr	r2, [pc, #672]	; 8c20 <BusRaiderApp::statusDisplayUpdate()+0x4a8>
    897c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8980:	eb00961b 	bl	2e1f4 <snprintf>
    8984:	e3a02032 	mov	r2, #50	; 0x32
    8988:	e59f1294 	ldr	r1, [pc, #660]	; 8c24 <BusRaiderApp::statusDisplayUpdate()+0x4ac>
    898c:	e28d005c 	add	r0, sp, #92	; 0x5c
    8990:	eb0095bc 	bl	2e088 <strlcat>
    8994:	e28d305c 	add	r3, sp, #92	; 0x5c
    8998:	e3a02000 	mov	r2, #0
    899c:	e3a01005 	mov	r1, #5
    89a0:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    89a4:	eb00cf48 	bl	3c6cc <Display::statusPut(int, int, char const*)>
    89a8:	e3a03000 	mov	r3, #0
    89ac:	e3a02032 	mov	r2, #50	; 0x32
    89b0:	e59f1270 	ldr	r1, [pc, #624]	; 8c28 <BusRaiderApp::statusDisplayUpdate()+0x4b0>
    89b4:	e28d005c 	add	r0, sp, #92	; 0x5c
    89b8:	e5cd305c 	strb	r3, [sp, #92]	; 0x5c
    89bc:	eb009595 	bl	2e018 <strlcpy>
    89c0:	e1a00004 	mov	r0, r4
    89c4:	eb00a639 	bl	322b0 <BusAccess::isUnderControl()>
    89c8:	e3500000 	cmp	r0, #0
    89cc:	1a000079 	bne	8bb8 <BusRaiderApp::statusDisplayUpdate()+0x440>
    89d0:	e28d305c 	add	r3, sp, #92	; 0x5c
    89d4:	e3a02000 	mov	r2, #0
    89d8:	e3a01006 	mov	r1, #6
    89dc:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    89e0:	eb00cf39 	bl	3c6cc <Display::statusPut(int, int, char const*)>
    89e4:	e5960080 	ldr	r0, [r6, #128]	; 0x80
    89e8:	eb00bc2f 	bl	37aac <McManager::getDisplayRefreshRate()>
    89ec:	e1a04000 	mov	r4, r0
    89f0:	e5d61000 	ldrb	r1, [r6]
    89f4:	e59f3230 	ldr	r3, [pc, #560]	; 8c2c <BusRaiderApp::statusDisplayUpdate()+0x4b4>
    89f8:	e59f2230 	ldr	r2, [pc, #560]	; 8c30 <BusRaiderApp::statusDisplayUpdate()+0x4b8>
    89fc:	e3510000 	cmp	r1, #0
    8a00:	11a01002 	movne	r1, r2
    8a04:	01a01003 	moveq	r1, r3
    8a08:	e3a02028 	mov	r2, #40	; 0x28
    8a0c:	e28d0030 	add	r0, sp, #48	; 0x30
    8a10:	eb009580 	bl	2e018 <strlcpy>
    8a14:	e5d63000 	ldrb	r3, [r6]
    8a18:	e3a02028 	mov	r2, #40	; 0x28
    8a1c:	e2233001 	eor	r3, r3, #1
    8a20:	e5c63000 	strb	r3, [r6]
    8a24:	e59f1208 	ldr	r1, [pc, #520]	; 8c34 <BusRaiderApp::statusDisplayUpdate()+0x4bc>
    8a28:	e28d0030 	add	r0, sp, #48	; 0x30
    8a2c:	eb009595 	bl	2e088 <strlcat>
    8a30:	e1a00004 	mov	r0, r4
    8a34:	e3a04000 	mov	r4, #0
    8a38:	e3a0300a 	mov	r3, #10
    8a3c:	e28d101c 	add	r1, sp, #28
    8a40:	e3a02028 	mov	r2, #40	; 0x28
    8a44:	eb009744 	bl	2e75c <rditoa>
    8a48:	e28d101c 	add	r1, sp, #28
    8a4c:	e3a02028 	mov	r2, #40	; 0x28
    8a50:	e28d0030 	add	r0, sp, #48	; 0x30
    8a54:	eb00958b 	bl	2e088 <strlcat>
    8a58:	e3a02028 	mov	r2, #40	; 0x28
    8a5c:	e59f11d4 	ldr	r1, [pc, #468]	; 8c38 <BusRaiderApp::statusDisplayUpdate()+0x4c0>
    8a60:	e28d0030 	add	r0, sp, #48	; 0x30
    8a64:	eb009587 	bl	2e088 <strlcat>
    8a68:	e28d3030 	add	r3, sp, #48	; 0x30
    8a6c:	e3a02000 	mov	r2, #0
    8a70:	e3a01007 	mov	r1, #7
    8a74:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8a78:	eb00cf13 	bl	3c6cc <Display::statusPut(int, int, char const*)>
    8a7c:	e28d20d0 	add	r2, sp, #208	; 0xd0
    8a80:	e52240b8 	str	r4, [r2, #-184]!	; 0xffffff48
    8a84:	e1a00005 	mov	r0, r5
    8a88:	e28d1014 	add	r1, sp, #20
    8a8c:	e58d4014 	str	r4, [sp, #20]
    8a90:	eb009cbf 	bl	2fd94 <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)>
    8a94:	e3500000 	cmp	r0, #0
    8a98:	058d0014 	streq	r0, [sp, #20]
    8a9c:	1a000010 	bne	8ae4 <BusRaiderApp::statusDisplayUpdate()+0x36c>
    8aa0:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8aa4:	e59f3190 	ldr	r3, [pc, #400]	; 8c3c <BusRaiderApp::statusDisplayUpdate()+0x4c4>
    8aa8:	e3a02001 	mov	r2, #1
    8aac:	e3a0100a 	mov	r1, #10
    8ab0:	eb00cf05 	bl	3c6cc <Display::statusPut(int, int, char const*)>
    8ab4:	e28dd0d4 	add	sp, sp, #212	; 0xd4
    8ab8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8abc:	e3a02032 	mov	r2, #50	; 0x32
    8ac0:	e59f1178 	ldr	r1, [pc, #376]	; 8c40 <BusRaiderApp::statusDisplayUpdate()+0x4c8>
    8ac4:	e28d005c 	add	r0, sp, #92	; 0x5c
    8ac8:	eb00956e 	bl	2e088 <strlcat>
    8acc:	e28d305c 	add	r3, sp, #92	; 0x5c
    8ad0:	e3a02001 	mov	r2, #1
    8ad4:	e3a01002 	mov	r1, #2
    8ad8:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8adc:	eb00cefa 	bl	3c6cc <Display::statusPut(int, int, char const*)>
    8ae0:	eaffff66 	b	8880 <BusRaiderApp::statusDisplayUpdate()+0x108>
    8ae4:	e59d1014 	ldr	r1, [sp, #20]
    8ae8:	e3510000 	cmp	r1, #0
    8aec:	0affffeb 	beq	8aa0 <BusRaiderApp::statusDisplayUpdate()+0x328>
    8af0:	e59d0018 	ldr	r0, [sp, #24]
    8af4:	e0800100 	add	r0, r0, r0, lsl #2
    8af8:	e1a00180 	lsl	r0, r0, #3
    8afc:	eb00d462 	bl	3dc8c <__aeabi_uidiv>
    8b00:	e2505000 	subs	r5, r0, #0
    8b04:	daffffe5 	ble	8aa0 <BusRaiderApp::statusDisplayUpdate()+0x328>
    8b08:	e3a0203c 	mov	r2, #60	; 0x3c
    8b0c:	e59f1130 	ldr	r1, [pc, #304]	; 8c44 <BusRaiderApp::statusDisplayUpdate()+0x4cc>
    8b10:	e28d0090 	add	r0, sp, #144	; 0x90
    8b14:	eb00953f 	bl	2e018 <strlcpy>
    8b18:	e28d0090 	add	r0, sp, #144	; 0x90
    8b1c:	eb008556 	bl	2a07c <strlen>
    8b20:	e28d1090 	add	r1, sp, #144	; 0x90
    8b24:	e2402001 	sub	r2, r0, #1
    8b28:	e0812002 	add	r2, r1, r2
    8b2c:	e1a03004 	mov	r3, r4
    8b30:	e3a01023 	mov	r1, #35	; 0x23
    8b34:	ea000002 	b	8b44 <BusRaiderApp::statusDisplayUpdate()+0x3cc>
    8b38:	e1550003 	cmp	r5, r3
    8b3c:	c3a01023 	movgt	r1, #35	; 0x23
    8b40:	d3a01020 	movle	r1, #32
    8b44:	e2833001 	add	r3, r3, #1
    8b48:	e3530028 	cmp	r3, #40	; 0x28
    8b4c:	e5e21001 	strb	r1, [r2, #1]!
    8b50:	1afffff8 	bne	8b38 <BusRaiderApp::statusDisplayUpdate()+0x3c0>
    8b54:	e3a0e000 	mov	lr, #0
    8b58:	e3a0405d 	mov	r4, #93	; 0x5d
    8b5c:	e28d30d0 	add	r3, sp, #208	; 0xd0
    8b60:	e083c000 	add	ip, r3, r0
    8b64:	e3a02001 	mov	r2, #1
    8b68:	e28d3090 	add	r3, sp, #144	; 0x90
    8b6c:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8b70:	e3a0100a 	mov	r1, #10
    8b74:	e54c4018 	strb	r4, [ip, #-24]	; 0xffffffe8
    8b78:	e54ce017 	strb	lr, [ip, #-23]	; 0xffffffe9
    8b7c:	eb00ced2 	bl	3c6cc <Display::statusPut(int, int, char const*)>
    8b80:	e28dd0d4 	add	sp, sp, #212	; 0xd4
    8b84:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8b88:	e59f20b8 	ldr	r2, [pc, #184]	; 8c48 <BusRaiderApp::statusDisplayUpdate()+0x4d0>
    8b8c:	e1a01002 	mov	r1, r2
    8b90:	eaffff74 	b	8968 <BusRaiderApp::statusDisplayUpdate()+0x1f0>
    8b94:	e59f10b0 	ldr	r1, [pc, #176]	; 8c4c <BusRaiderApp::statusDisplayUpdate()+0x4d4>
    8b98:	e28d005c 	add	r0, sp, #92	; 0x5c
    8b9c:	eb00951d 	bl	2e018 <strlcpy>
    8ba0:	e28d305c 	add	r3, sp, #92	; 0x5c
    8ba4:	e3a02001 	mov	r2, #1
    8ba8:	e3a01003 	mov	r1, #3
    8bac:	e5960078 	ldr	r0, [r6, #120]	; 0x78
    8bb0:	eb00cec5 	bl	3c6cc <Display::statusPut(int, int, char const*)>
    8bb4:	eaffff46 	b	88d4 <BusRaiderApp::statusDisplayUpdate()+0x15c>
    8bb8:	e3a02032 	mov	r2, #50	; 0x32
    8bbc:	e59f108c 	ldr	r1, [pc, #140]	; 8c50 <BusRaiderApp::statusDisplayUpdate()+0x4d8>
    8bc0:	e28d005c 	add	r0, sp, #92	; 0x5c
    8bc4:	eb00952f 	bl	2e088 <strlcat>
    8bc8:	eaffff80 	b	89d0 <BusRaiderApp::statusDisplayUpdate()+0x258>
    8bcc:	e2861e85 	add	r1, r6, #2128	; 0x850
    8bd0:	e2811004 	add	r1, r1, #4
    8bd4:	e3a02032 	mov	r2, #50	; 0x32
    8bd8:	e28d005c 	add	r0, sp, #92	; 0x5c
    8bdc:	eb009529 	bl	2e088 <strlcat>
    8be0:	eaffff32 	b	88b0 <BusRaiderApp::statusDisplayUpdate()+0x138>
    8be4:	e59f105c 	ldr	r1, [pc, #92]	; 8c48 <BusRaiderApp::statusDisplayUpdate()+0x4d0>
    8be8:	eaffff5e 	b	8968 <BusRaiderApp::statusDisplayUpdate()+0x1f0>
    8bec:	000f4240 	.word	0x000f4240
    8bf0:	00047e78 	.word	0x00047e78
    8bf4:	0003eda4 	.word	0x0003eda4
    8bf8:	66666667 	.word	0x66666667
    8bfc:	0003edcc 	.word	0x0003edcc
    8c00:	0003eddc 	.word	0x0003eddc
    8c04:	0003ede8 	.word	0x0003ede8
    8c08:	0003ee0c 	.word	0x0003ee0c
    8c0c:	0003ee14 	.word	0x0003ee14
    8c10:	431bde83 	.word	0x431bde83
    8c14:	fff0bdc0 	.word	0xfff0bdc0
    8c18:	10624dd3 	.word	0x10624dd3
    8c1c:	0003fd5c 	.word	0x0003fd5c
    8c20:	0003ee2c 	.word	0x0003ee2c
    8c24:	0003ede0 	.word	0x0003ede0
    8c28:	0003ee40 	.word	0x0003ee40
    8c2c:	0003eda0 	.word	0x0003eda0
    8c30:	0003ed9c 	.word	0x0003ed9c
    8c34:	0003ee58 	.word	0x0003ee58
    8c38:	0003ee64 	.word	0x0003ee64
    8c3c:	0003ee7c 	.word	0x0003ee7c
    8c40:	0003edb4 	.word	0x0003edb4
    8c44:	0003ee70 	.word	0x0003ee70
    8c48:	00047764 	.word	0x00047764
    8c4c:	0003edf4 	.word	0x0003edf4
    8c50:	0003ee48 	.word	0x0003ee48

00008c54 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)>:
    8c54:	e59f30bc 	ldr	r3, [pc, #188]	; 8d18 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xc4>
    8c58:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8c5c:	e5934000 	ldr	r4, [r3]
    8c60:	e284ca03 	add	ip, r4, #12288	; 0x3000
    8c64:	e59c6530 	ldr	r6, [ip, #1328]	; 0x530
    8c68:	e3560000 	cmp	r6, #0
    8c6c:	08bd80f0 	popeq	{r4, r5, r6, r7, pc}
    8c70:	e59c0528 	ldr	r0, [ip, #1320]	; 0x528
    8c74:	e59c352c 	ldr	r3, [ip, #1324]	; 0x52c
    8c78:	e1500003 	cmp	r0, r3
    8c7c:	0a000008 	beq	8ca4 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x50>
    8c80:	e59c352c 	ldr	r3, [ip, #1324]	; 0x52c
    8c84:	e59c0528 	ldr	r0, [ip, #1320]	; 0x528
    8c88:	e1530000 	cmp	r3, r0
    8c8c:	e59c0528 	ldr	r0, [ip, #1320]	; 0x528
    8c90:	2a00001b 	bcs	8d04 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xb0>
    8c94:	e246e001 	sub	lr, r6, #1
    8c98:	e3530000 	cmp	r3, #0
    8c9c:	015e0000 	cmpeq	lr, r0
    8ca0:	0a00001b 	beq	8d14 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0xc0>
    8ca4:	e59c7528 	ldr	r7, [ip, #1320]	; 0x528
    8ca8:	e2423001 	sub	r3, r2, #1
    8cac:	e1a05087 	lsl	r5, r7, #1
    8cb0:	e0850007 	add	r0, r5, r7
    8cb4:	e0840100 	add	r0, r4, r0, lsl #2
    8cb8:	e2800dc1 	add	r0, r0, #12352	; 0x3040
    8cbc:	e2800038 	add	r0, r0, #56	; 0x38
    8cc0:	e2822005 	add	r2, r2, #5
    8cc4:	e5f3e001 	ldrb	lr, [r3, #1]!
    8cc8:	e1530002 	cmp	r3, r2
    8ccc:	e4c0e001 	strb	lr, [r0], #1
    8cd0:	1afffffb 	bne	8cc4 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x70>
    8cd4:	e59c3528 	ldr	r3, [ip, #1320]	; 0x528
    8cd8:	e0855007 	add	r5, r5, r7
    8cdc:	e0844105 	add	r4, r4, r5, lsl #2
    8ce0:	e2833001 	add	r3, r3, #1
    8ce4:	e2844dc2 	add	r4, r4, #12416	; 0x3080
    8ce8:	e5841000 	str	r1, [r4]
    8cec:	e58c3528 	str	r3, [ip, #1320]	; 0x528
    8cf0:	e59c3528 	ldr	r3, [ip, #1320]	; 0x528
    8cf4:	e1530006 	cmp	r3, r6
    8cf8:	23a03000 	movcs	r3, #0
    8cfc:	258c3528 	strcs	r3, [ip, #1320]	; 0x528
    8d00:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8d04:	e0433000 	sub	r3, r3, r0
    8d08:	e3530001 	cmp	r3, #1
    8d0c:	8affffe4 	bhi	8ca4 <BusRaiderApp::keyStatusHandlerRaw(unsigned char, unsigned char const*)+0x50>
    8d10:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8d14:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    8d18:	0004e0bc 	.word	0x0004e0bc

00008d1c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)>:
    8d1c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d20:	e2807a03 	add	r7, r0, #12288	; 0x3000
    8d24:	e5d73535 	ldrb	r3, [r7, #1333]	; 0x535
    8d28:	e24ddb1e 	sub	sp, sp, #30720	; 0x7800
    8d2c:	e3530000 	cmp	r3, #0
    8d30:	e24dd014 	sub	sp, sp, #20
    8d34:	e1a09001 	mov	r9, r1
    8d38:	e1a08002 	mov	r8, r2
    8d3c:	0a00000a 	beq	8d6c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x50>
    8d40:	e1a01002 	mov	r1, r2
    8d44:	e1a00009 	mov	r0, r9
    8d48:	eb00c0ea 	bl	390f8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
    8d4c:	e1a04000 	mov	r4, r0
    8d50:	eb0084c9 	bl	2a07c <strlen>
    8d54:	e3500000 	cmp	r0, #0
    8d58:	11d430d0 	ldrsbne	r3, [r4]
    8d5c:	15873538 	strne	r3, [r7, #1336]	; 0x538
    8d60:	e28ddb1e 	add	sp, sp, #30720	; 0x7800
    8d64:	e28dd014 	add	sp, sp, #20
    8d68:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d6c:	e590407c 	ldr	r4, [r0, #124]	; 0x7c
    8d70:	e3a02e19 	mov	r2, #400	; 0x190
    8d74:	e1a01004 	mov	r1, r4
    8d78:	e1a05000 	mov	r5, r0
    8d7c:	e28d0004 	add	r0, sp, #4
    8d80:	eb0086e2 	bl	2a910 <memcpy>
    8d84:	e2843f65 	add	r3, r4, #404	; 0x194
    8d88:	e5946190 	ldr	r6, [r4, #400]	; 0x190
    8d8c:	e1d310bc 	ldrh	r1, [r3, #12]
    8d90:	e5d4e198 	ldrb	lr, [r4, #408]	; 0x198
    8d94:	e5d4c199 	ldrb	ip, [r4, #409]	; 0x199
    8d98:	e5d4319a 	ldrb	r3, [r4, #410]	; 0x19a
    8d9c:	e5d4019b 	ldrb	r0, [r4, #411]	; 0x19b
    8da0:	e28d2f69 	add	r2, sp, #420	; 0x1a4
    8da4:	e594a19c 	ldr	sl, [r4, #412]	; 0x19c
    8da8:	e58d6194 	str	r6, [sp, #404]	; 0x194
    8dac:	e1c210b0 	strh	r1, [r2]
    8db0:	e5d461a3 	ldrb	r6, [r4, #419]	; 0x1a3
    8db4:	e5d421a2 	ldrb	r2, [r4, #418]	; 0x1a2
    8db8:	e59f1458 	ldr	r1, [pc, #1112]	; 9218 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4fc>
    8dbc:	e59fb458 	ldr	fp, [pc, #1112]	; 921c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x500>
    8dc0:	e5cde19c 	strb	lr, [sp, #412]	; 0x19c
    8dc4:	e5cdc19d 	strb	ip, [sp, #413]	; 0x19d
    8dc8:	e5d4e1a4 	ldrb	lr, [r4, #420]	; 0x1a4
    8dcc:	e594c1a8 	ldr	ip, [r4, #424]	; 0x1a8
    8dd0:	e5cd319e 	strb	r3, [sp, #414]	; 0x19e
    8dd4:	e5cd019f 	strb	r0, [sp, #415]	; 0x19f
    8dd8:	e59431ac 	ldr	r3, [r4, #428]	; 0x1ac
    8ddc:	e28d0d07 	add	r0, sp, #448	; 0x1c0
    8de0:	e58d1198 	str	r1, [sp, #408]	; 0x198
    8de4:	e5cd21a6 	strb	r2, [sp, #422]	; 0x1a6
    8de8:	e2841f6d 	add	r1, r4, #436	; 0x1b4
    8dec:	e59f242c 	ldr	r2, [pc, #1068]	; 9220 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x504>
    8df0:	e5cd61a7 	strb	r6, [sp, #423]	; 0x1a7
    8df4:	e2400008 	sub	r0, r0, #8
    8df8:	e2846a02 	add	r6, r4, #8192	; 0x2000
    8dfc:	e58da1a0 	str	sl, [sp, #416]	; 0x1a0
    8e00:	e5cde1a8 	strb	lr, [sp, #424]	; 0x1a8
    8e04:	e58dc1ac 	str	ip, [sp, #428]	; 0x1ac
    8e08:	e58d31b0 	str	r3, [sp, #432]	; 0x1b0
    8e0c:	e58db1b4 	str	fp, [sp, #436]	; 0x1b4
    8e10:	eb0086be 	bl	2a910 <memcpy>
    8e14:	e596e8c4 	ldr	lr, [r6, #2244]	; 0x8c4
    8e18:	e596c8c8 	ldr	ip, [r6, #2248]	; 0x8c8
    8e1c:	e28d3b0a 	add	r3, sp, #10240	; 0x2800
    8e20:	e2833010 	add	r3, r3, #16
    8e24:	e28dab12 	add	sl, sp, #18432	; 0x4800
    8e28:	e28aa010 	add	sl, sl, #16
    8e2c:	e2861e8d 	add	r1, r6, #2256	; 0x8d0
    8e30:	e583b0c0 	str	fp, [r3, #192]	; 0xc0
    8e34:	e583e0b8 	str	lr, [r3, #184]	; 0xb8
    8e38:	e583c0bc 	str	ip, [r3, #188]	; 0xbc
    8e3c:	e28300c4 	add	r0, r3, #196	; 0xc4
    8e40:	e59f23d8 	ldr	r2, [pc, #984]	; 9220 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x504>
    8e44:	eb0086b1 	bl	2a910 <memcpy>
    8e48:	e1a0c00a 	mov	ip, sl
    8e4c:	e2843901 	add	r3, r4, #16384	; 0x4000
    8e50:	e5930fec 	ldr	r0, [r3, #4076]	; 0xfec
    8e54:	e5931fe0 	ldr	r1, [r3, #4064]	; 0xfe0
    8e58:	e5932fe4 	ldr	r2, [r3, #4068]	; 0xfe4
    8e5c:	e593efe8 	ldr	lr, [r3, #4072]	; 0xfe8
    8e60:	e2846a05 	add	r6, r4, #20480	; 0x5000
    8e64:	e5ac07e0 	str	r0, [ip, #2016]!	; 0x7e0
    8e68:	e2833eff 	add	r3, r3, #4080	; 0xff0
    8e6c:	e28abe7f 	add	fp, sl, #2032	; 0x7f0
    8e70:	e58a17d4 	str	r1, [sl, #2004]	; 0x7d4
    8e74:	e58a27d8 	str	r2, [sl, #2008]	; 0x7d8
    8e78:	e58ae7dc 	str	lr, [sl, #2012]	; 0x7dc
    8e7c:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    8e80:	e98c000f 	stmib	ip, {r0, r1, r2, r3}
    8e84:	e1a01006 	mov	r1, r6
    8e88:	e3a02065 	mov	r2, #101	; 0x65
    8e8c:	e28b0004 	add	r0, fp, #4
    8e90:	eb00869e 	bl	2a910 <memcpy>
    8e94:	e28a3e85 	add	r3, sl, #2128	; 0x850
    8e98:	e2833009 	add	r3, r3, #9
    8e9c:	e2862065 	add	r2, r6, #101	; 0x65
    8ea0:	e2861085 	add	r1, r6, #133	; 0x85
    8ea4:	e592a000 	ldr	sl, [r2]
    8ea8:	e592e004 	ldr	lr, [r2, #4]
    8eac:	e592c008 	ldr	ip, [r2, #8]
    8eb0:	e592000c 	ldr	r0, [r2, #12]
    8eb4:	e2822010 	add	r2, r2, #16
    8eb8:	e1520001 	cmp	r2, r1
    8ebc:	e583a000 	str	sl, [r3]
    8ec0:	e583e004 	str	lr, [r3, #4]
    8ec4:	e583c008 	str	ip, [r3, #8]
    8ec8:	e583000c 	str	r0, [r3, #12]
    8ecc:	e2833010 	add	r3, r3, #16
    8ed0:	1afffff3 	bne	8ea4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x188>
    8ed4:	e5920000 	ldr	r0, [r2]
    8ed8:	e5921004 	ldr	r1, [r2, #4]
    8edc:	e1a0a006 	mov	sl, r6
    8ee0:	e5830000 	str	r0, [r3]
    8ee4:	e5831004 	str	r1, [r3, #4]
    8ee8:	e5d2c008 	ldrb	ip, [r2, #8]
    8eec:	e28d2a05 	add	r2, sp, #20480	; 0x5000
    8ef0:	e2822090 	add	r2, r2, #144	; 0x90
    8ef4:	e286108e 	add	r1, r6, #142	; 0x8e
    8ef8:	e5c3c008 	strb	ip, [r3, #8]
    8efc:	e2820002 	add	r0, r2, #2
    8f00:	e59f231c 	ldr	r2, [pc, #796]	; 9224 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x508>
    8f04:	eb008681 	bl	2a910 <memcpy>
    8f08:	e5962864 	ldr	r2, [r6, #2148]	; 0x864
    8f0c:	e28deb16 	add	lr, sp, #22528	; 0x5800
    8f10:	e28ee010 	add	lr, lr, #16
    8f14:	e596b860 	ldr	fp, [r6, #2144]	; 0x860
    8f18:	e58e2058 	str	r2, [lr, #88]	; 0x58
    8f1c:	e5962868 	ldr	r2, [r6, #2152]	; 0x868
    8f20:	e28e3064 	add	r3, lr, #100	; 0x64
    8f24:	e58e205c 	str	r2, [lr, #92]	; 0x5c
    8f28:	e596286c 	ldr	r2, [r6, #2156]	; 0x86c
    8f2c:	e286ce87 	add	ip, r6, #2160	; 0x870
    8f30:	e58e2060 	str	r2, [lr, #96]	; 0x60
    8f34:	e89c0007 	ldm	ip, {r0, r1, r2}
    8f38:	e8830007 	stm	r3, {r0, r1, r2}
    8f3c:	e28e6070 	add	r6, lr, #112	; 0x70
    8f40:	e28cc00c 	add	ip, ip, #12
    8f44:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8f48:	e8a6000f 	stmia	r6!, {r0, r1, r2, r3}
    8f4c:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8f50:	e8a6000f 	stmia	r6!, {r0, r1, r2, r3}
    8f54:	e58eb054 	str	fp, [lr, #84]	; 0x54
    8f58:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
    8f5c:	e8a6000f 	stmia	r6!, {r0, r1, r2, r3}
    8f60:	e59c3000 	ldr	r3, [ip]
    8f64:	e28e00a8 	add	r0, lr, #168	; 0xa8
    8f68:	e1c630b0 	strh	r3, [r6]
    8f6c:	e5ba38b0 	ldr	r3, [sl, #2224]!	; 0x8b0
    8f70:	e28d6b1a 	add	r6, sp, #26624	; 0x6800
    8f74:	e3a02efa 	mov	r2, #4000	; 0xfa0
    8f78:	e28a1004 	add	r1, sl, #4
    8f7c:	e58e30a4 	str	r3, [lr, #164]	; 0xa4
    8f80:	e2866010 	add	r6, r6, #16
    8f84:	eb008661 	bl	2a910 <memcpy>
    8f88:	e2841b1a 	add	r1, r4, #26624	; 0x6800
    8f8c:	e2811054 	add	r1, r1, #84	; 0x54
    8f90:	e3a02efa 	mov	r2, #4000	; 0xfa0
    8f94:	e2860048 	add	r0, r6, #72	; 0x48
    8f98:	eb00865c 	bl	2a910 <memcpy>
    8f9c:	e2844a07 	add	r4, r4, #28672	; 0x7000
    8fa0:	e5d81000 	ldrb	r1, [r8]
    8fa4:	e59427f4 	ldr	r2, [r4, #2036]	; 0x7f4
    8fa8:	e5d437f8 	ldrb	r3, [r4, #2040]	; 0x7f8
    8fac:	e28dcb1e 	add	ip, sp, #30720	; 0x7800
    8fb0:	e2844e7f 	add	r4, r4, #2032	; 0x7f0
    8fb4:	e284400c 	add	r4, r4, #12
    8fb8:	e351003b 	cmp	r1, #59	; 0x3b
    8fbc:	e28cc010 	add	ip, ip, #16
    8fc0:	e5862fe8 	str	r2, [r6, #4072]	; 0xfe8
    8fc4:	e5c63fec 	strb	r3, [r6, #4076]	; 0xfec
    8fc8:	e894000f 	ldm	r4, {r0, r1, r2, r3}
    8fcc:	e90c000f 	stmdb	ip, {r0, r1, r2, r3}
    8fd0:	e5d53008 	ldrb	r3, [r5, #8]
    8fd4:	0a00000a 	beq	9004 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2e8>
    8fd8:	e3530000 	cmp	r3, #0
    8fdc:	0a00000e 	beq	901c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x300>
    8fe0:	e5953070 	ldr	r3, [r5, #112]	; 0x70
    8fe4:	e3530063 	cmp	r3, #99	; 0x63
    8fe8:	da000019 	ble	9054 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x338>
    8fec:	e28d4004 	add	r4, sp, #4
    8ff0:	e1a00004 	mov	r0, r4
    8ff4:	eb009f6c 	bl	30dac <CommandHandler::~CommandHandler()>
    8ff8:	e28ddb1e 	add	sp, sp, #30720	; 0x7800
    8ffc:	e28dd014 	add	sp, sp, #20
    9000:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9004:	e3530000 	cmp	r3, #0
    9008:	0a00002c 	beq	90c0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3a4>
    900c:	e3a03001 	mov	r3, #1
    9010:	e28d4004 	add	r4, sp, #4
    9014:	e5c53008 	strb	r3, [r5, #8]
    9018:	eafffff4 	b	8ff0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2d4>
    901c:	e5950080 	ldr	r0, [r5, #128]	; 0x80
    9020:	eb00b8f3 	bl	373f4 <McManager::getMachine()>
    9024:	e2503000 	subs	r3, r0, #0
    9028:	0a000004 	beq	9040 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x324>
    902c:	e5933000 	ldr	r3, [r3]
    9030:	e1a02008 	mov	r2, r8
    9034:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    9038:	e1a01009 	mov	r1, r9
    903c:	e12fff33 	blx	r3
    9040:	e28d0004 	add	r0, sp, #4
    9044:	eb009f58 	bl	30dac <CommandHandler::~CommandHandler()>
    9048:	e28ddb1e 	add	sp, sp, #30720	; 0x7800
    904c:	e28dd014 	add	sp, sp, #20
    9050:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9054:	e1a01008 	mov	r1, r8
    9058:	e1a00009 	mov	r0, r9
    905c:	eb00c025 	bl	390f8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
    9060:	e1a06000 	mov	r6, r0
    9064:	eb008404 	bl	2a07c <strlen>
    9068:	e3500000 	cmp	r0, #0
    906c:	0affffde 	beq	8fec <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2d0>
    9070:	e1d630d0 	ldrsb	r3, [r6]
    9074:	e3530008 	cmp	r3, #8
    9078:	0a000020 	beq	9100 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x3e4>
    907c:	e353000d 	cmp	r3, #13
    9080:	0a000029 	beq	912c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x410>
    9084:	e2433020 	sub	r3, r3, #32
    9088:	e6ef3073 	uxtb	r3, r3
    908c:	e353005e 	cmp	r3, #94	; 0x5e
    9090:	8affffd5 	bhi	8fec <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2d0>
    9094:	e5953070 	ldr	r3, [r5, #112]	; 0x70
    9098:	e28d4004 	add	r4, sp, #4
    909c:	e2832001 	add	r2, r3, #1
    90a0:	e5852070 	str	r2, [r5, #112]	; 0x70
    90a4:	e1d620d0 	ldrsb	r2, [r6]
    90a8:	e0853003 	add	r3, r5, r3
    90ac:	e5c32009 	strb	r2, [r3, #9]
    90b0:	e1d610d0 	ldrsb	r1, [r6]
    90b4:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    90b8:	eb00cde7 	bl	3c85c <Display::consolePut(int)>
    90bc:	eaffffcb 	b	8ff0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2d4>
    90c0:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    90c4:	e59f115c 	ldr	r1, [pc, #348]	; 9228 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x50c>
    90c8:	eb00cdde 	bl	3c848 <Display::consolePut(char const*)>
    90cc:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    90d0:	e59f1154 	ldr	r1, [pc, #340]	; 922c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x510>
    90d4:	eb00cddb 	bl	3c848 <Display::consolePut(char const*)>
    90d8:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    90dc:	e59f114c 	ldr	r1, [pc, #332]	; 9230 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x514>
    90e0:	eb00cdd8 	bl	3c848 <Display::consolePut(char const*)>
    90e4:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    90e8:	e59f1144 	ldr	r1, [pc, #324]	; 9234 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x518>
    90ec:	eb00cdd5 	bl	3c848 <Display::consolePut(char const*)>
    90f0:	e59f1140 	ldr	r1, [pc, #320]	; 9238 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x51c>
    90f4:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    90f8:	eb00cdd2 	bl	3c848 <Display::consolePut(char const*)>
    90fc:	eaffffc2 	b	900c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2f0>
    9100:	e5953070 	ldr	r3, [r5, #112]	; 0x70
    9104:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    9108:	e3530000 	cmp	r3, #0
    910c:	c2433001 	subgt	r3, r3, #1
    9110:	c5853070 	strgt	r3, [r5, #112]	; 0x70
    9114:	e3a01008 	mov	r1, #8
    9118:	eb00cdcf 	bl	3c85c <Display::consolePut(int)>
    911c:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    9120:	e3a01020 	mov	r1, #32
    9124:	eb00cdcc 	bl	3c85c <Display::consolePut(int)>
    9128:	eaffffaf 	b	8fec <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2d0>
    912c:	e3a02000 	mov	r2, #0
    9130:	e5953070 	ldr	r3, [r5, #112]	; 0x70
    9134:	e5c52008 	strb	r2, [r5, #8]
    9138:	e1530002 	cmp	r3, r2
    913c:	e0853003 	add	r3, r5, r3
    9140:	e5c32009 	strb	r2, [r3, #9]
    9144:	da000028 	ble	91ec <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4d0>
    9148:	e1d500d9 	ldrsb	r0, [r5, #9]
    914c:	eb00955e 	bl	2e6cc <rdtolower>
    9150:	e3500074 	cmp	r0, #116	; 0x74
    9154:	0a000024 	beq	91ec <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4d0>
    9158:	e1d500d9 	ldrsb	r0, [r5, #9]
    915c:	eb00955a 	bl	2e6cc <rdtolower>
    9160:	e350006d 	cmp	r0, #109	; 0x6d
    9164:	0a000022 	beq	91f4 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4d8>
    9168:	e1d500d9 	ldrsb	r0, [r5, #9]
    916c:	eb009556 	bl	2e6cc <rdtolower>
    9170:	e3500062 	cmp	r0, #98	; 0x62
    9174:	0a00001c 	beq	91ec <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4d0>
    9178:	e1d500d9 	ldrsb	r0, [r5, #9]
    917c:	eb009552 	bl	2e6cc <rdtolower>
    9180:	e3500072 	cmp	r0, #114	; 0x72
    9184:	0a000018 	beq	91ec <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4d0>
    9188:	e1d500d9 	ldrsb	r0, [r5, #9]
    918c:	eb00954e 	bl	2e6cc <rdtolower>
    9190:	e3500073 	cmp	r0, #115	; 0x73
    9194:	0a000014 	beq	91ec <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4d0>
    9198:	e2856009 	add	r6, r5, #9
    919c:	e28d4004 	add	r4, sp, #4
    91a0:	e1a00004 	mov	r0, r4
    91a4:	e1a01006 	mov	r1, r6
    91a8:	eb009c8a 	bl	303d8 <CommandHandler::sendAPIReq(char const*)>
    91ac:	e59f1088 	ldr	r1, [pc, #136]	; 923c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x520>
    91b0:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    91b4:	eb00cda3 	bl	3c848 <Display::consolePut(char const*)>
    91b8:	e1a01006 	mov	r1, r6
    91bc:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    91c0:	eb00cda0 	bl	3c848 <Display::consolePut(char const*)>
    91c4:	e59f1074 	ldr	r1, [pc, #116]	; 9240 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x524>
    91c8:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    91cc:	eb00cd9d 	bl	3c848 <Display::consolePut(char const*)>
    91d0:	e3a06000 	mov	r6, #0
    91d4:	e59f1068 	ldr	r1, [pc, #104]	; 9244 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x528>
    91d8:	e5856070 	str	r6, [r5, #112]	; 0x70
    91dc:	e5950078 	ldr	r0, [r5, #120]	; 0x78
    91e0:	eb00cd98 	bl	3c848 <Display::consolePut(char const*)>
    91e4:	e5c56008 	strb	r6, [r5, #8]
    91e8:	eaffff80 	b	8ff0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x2d4>
    91ec:	e28d4004 	add	r4, sp, #4
    91f0:	eafffff6 	b	91d0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4b4>
    91f4:	e3a02001 	mov	r2, #1
    91f8:	e5953080 	ldr	r3, [r5, #128]	; 0x80
    91fc:	e5951078 	ldr	r1, [r5, #120]	; 0x78
    9200:	e5c72535 	strb	r2, [r7, #1333]	; 0x535
    9204:	e1a00005 	mov	r0, r5
    9208:	e593200c 	ldr	r2, [r3, #12]
    920c:	eb00c250 	bl	39b54 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)>
    9210:	e28d4004 	add	r4, sp, #4
    9214:	eaffffed 	b	91d0 <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)+0x4b4>
    9218:	000462ac 	.word	0x000462ac
    921c:	0003ed44 	.word	0x0003ed44
    9220:	00002710 	.word	0x00002710
    9224:	000007d1 	.word	0x000007d1
    9228:	0003eeb0 	.word	0x0003eeb0
    922c:	0003eec0 	.word	0x0003eec0
    9230:	0003ef00 	.word	0x0003ef00
    9234:	0003ef28 	.word	0x0003ef28
    9238:	0003ef50 	.word	0x0003ef50
    923c:	0003ef88 	.word	0x0003ef88
    9240:	000475e0 	.word	0x000475e0
    9244:	0003ef78 	.word	0x0003ef78

00009248 <BusRaiderApp::service()>:
    9248:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    924c:	e1a05000 	mov	r5, r0
    9250:	e24dde7d 	sub	sp, sp, #2000	; 0x7d0
    9254:	e24dd00c 	sub	sp, sp, #12
    9258:	e590607c 	ldr	r6, [r0, #124]	; 0x7c
    925c:	eb009332 	bl	2df2c <micros>
    9260:	e5951074 	ldr	r1, [r5, #116]	; 0x74
    9264:	e59f219c 	ldr	r2, [pc, #412]	; 9408 <BusRaiderApp::service()+0x1c0>
    9268:	eb00934d 	bl	2dfa4 <isTimeout>
    926c:	e3500000 	cmp	r0, #0
    9270:	0a000005 	beq	928c <BusRaiderApp::service()+0x44>
    9274:	e59f3190 	ldr	r3, [pc, #400]	; 940c <BusRaiderApp::service()+0x1c4>
    9278:	e5933000 	ldr	r3, [r3]
    927c:	e2833a05 	add	r3, r3, #20480	; 0x5000
    9280:	e5934860 	ldr	r4, [r3, #2144]	; 0x860
    9284:	e3540000 	cmp	r4, #0
    9288:	0a00003f 	beq	938c <BusRaiderApp::service()+0x144>
    928c:	eb009327 	bl	2df30 <millis>
    9290:	e59f2178 	ldr	r2, [pc, #376]	; 9410 <BusRaiderApp::service()+0x1c8>
    9294:	e595195c 	ldr	r1, [r5, #2396]	; 0x95c
    9298:	eb009341 	bl	2dfa4 <isTimeout>
    929c:	e3500000 	cmp	r0, #0
    92a0:	0a000007 	beq	92c4 <BusRaiderApp::service()+0x7c>
    92a4:	e59f3160 	ldr	r3, [pc, #352]	; 940c <BusRaiderApp::service()+0x1c4>
    92a8:	e5933000 	ldr	r3, [r3]
    92ac:	e2833a05 	add	r3, r3, #20480	; 0x5000
    92b0:	e5933860 	ldr	r3, [r3, #2144]	; 0x860
    92b4:	e3530000 	cmp	r3, #0
    92b8:	0a000042 	beq	93c8 <BusRaiderApp::service()+0x180>
    92bc:	eb00931b 	bl	2df30 <millis>
    92c0:	e585095c 	str	r0, [r5, #2396]	; 0x95c
    92c4:	e2854a03 	add	r4, r5, #12288	; 0x3000
    92c8:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    92cc:	e3530000 	cmp	r3, #0
    92d0:	0a000021 	beq	935c <BusRaiderApp::service()+0x114>
    92d4:	e1a00005 	mov	r0, r5
    92d8:	ebfffd26 	bl	8778 <BusRaiderApp::statusDisplayUpdate()>
    92dc:	e5d42534 	ldrb	r2, [r4, #1332]	; 0x534
    92e0:	e3520000 	cmp	r2, #0
    92e4:	1a000019 	bne	9350 <BusRaiderApp::service()+0x108>
    92e8:	e5941528 	ldr	r1, [r4, #1320]	; 0x528
    92ec:	e594352c 	ldr	r3, [r4, #1324]	; 0x52c
    92f0:	e1510003 	cmp	r1, r3
    92f4:	0a000015 	beq	9350 <BusRaiderApp::service()+0x108>
    92f8:	e3a0c001 	mov	ip, #1
    92fc:	e594352c 	ldr	r3, [r4, #1324]	; 0x52c
    9300:	e594152c 	ldr	r1, [r4, #1324]	; 0x52c
    9304:	e5940530 	ldr	r0, [r4, #1328]	; 0x530
    9308:	e2811001 	add	r1, r1, #1
    930c:	e584152c 	str	r1, [r4, #1324]	; 0x52c
    9310:	e594152c 	ldr	r1, [r4, #1324]	; 0x52c
    9314:	e0833c13 	add	r3, r3, r3, lsl ip
    9318:	e1510000 	cmp	r1, r0
    931c:	e1a03103 	lsl	r3, r3, #2
    9320:	2584252c 	strcs	r2, [r4, #1324]	; 0x52c
    9324:	e2832dc1 	add	r2, r3, #12352	; 0x3040
    9328:	e0853003 	add	r3, r5, r3
    932c:	e2833dc2 	add	r3, r3, #12416	; 0x3080
    9330:	e2822038 	add	r2, r2, #56	; 0x38
    9334:	e5d31000 	ldrb	r1, [r3]
    9338:	e0852002 	add	r2, r5, r2
    933c:	e1a00005 	mov	r0, r5
    9340:	e5c4c534 	strb	ip, [r4, #1332]	; 0x534
    9344:	ebfffe74 	bl	8d1c <BusRaiderApp::handleUSBKeypress(unsigned char, unsigned char const*)>
    9348:	e3a03000 	mov	r3, #0
    934c:	e5c43534 	strb	r3, [r4, #1332]	; 0x534
    9350:	e28dde7d 	add	sp, sp, #2000	; 0x7d0
    9354:	e28dd00c 	add	sp, sp, #12
    9358:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    935c:	eb0092f2 	bl	2df2c <micros>
    9360:	e59f20ac 	ldr	r2, [pc, #172]	; 9414 <BusRaiderApp::service()+0x1cc>
    9364:	e5941074 	ldr	r1, [r4, #116]	; 0x74
    9368:	eb00930d 	bl	2dfa4 <isTimeout>
    936c:	e3500000 	cmp	r0, #0
    9370:	0affffd7 	beq	92d4 <BusRaiderApp::service()+0x8c>
    9374:	e1a00006 	mov	r0, r6
    9378:	e59f1098 	ldr	r1, [pc, #152]	; 9418 <BusRaiderApp::service()+0x1d0>
    937c:	eb009c15 	bl	303d8 <CommandHandler::sendAPIReq(char const*)>
    9380:	eb0092e9 	bl	2df2c <micros>
    9384:	e5840074 	str	r0, [r4, #116]	; 0x74
    9388:	eaffffd1 	b	92d4 <BusRaiderApp::service()+0x8c>
    938c:	e5950080 	ldr	r0, [r5, #128]	; 0x80
    9390:	eb00b824 	bl	37428 <McManager::getMachineJSON()>
    9394:	e2857084 	add	r7, r5, #132	; 0x84
    9398:	e1a01000 	mov	r1, r0
    939c:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    93a0:	e28d0008 	add	r0, sp, #8
    93a4:	eb00931b 	bl	2e018 <strlcpy>
    93a8:	e28d0008 	add	r0, sp, #8
    93ac:	e1a01007 	mov	r1, r7
    93b0:	eb00833b 	bl	2a0a4 <strcmp>
    93b4:	e3500000 	cmp	r0, #0
    93b8:	1a000006 	bne	93d8 <BusRaiderApp::service()+0x190>
    93bc:	eb0092da 	bl	2df2c <micros>
    93c0:	e5850074 	str	r0, [r5, #116]	; 0x74
    93c4:	eaffffb0 	b	928c <BusRaiderApp::service()+0x44>
    93c8:	e59f104c 	ldr	r1, [pc, #76]	; 941c <BusRaiderApp::service()+0x1d4>
    93cc:	e1a00006 	mov	r0, r6
    93d0:	eb009c00 	bl	303d8 <CommandHandler::sendAPIReq(char const*)>
    93d4:	eaffffb8 	b	92bc <BusRaiderApp::service()+0x74>
    93d8:	e28d1008 	add	r1, sp, #8
    93dc:	e1a00007 	mov	r0, r7
    93e0:	e3a02e7d 	mov	r2, #2000	; 0x7d0
    93e4:	eb00930b 	bl	2e018 <strlcpy>
    93e8:	e58d4004 	str	r4, [sp, #4]
    93ec:	e58d4000 	str	r4, [sp]
    93f0:	e1a03004 	mov	r3, r4
    93f4:	e28d2008 	add	r2, sp, #8
    93f8:	e59f1020 	ldr	r1, [pc, #32]	; 9420 <BusRaiderApp::service()+0x1d8>
    93fc:	e1a00006 	mov	r0, r6
    9400:	eb009aad 	bl	2febc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
    9404:	eaffffec 	b	93bc <BusRaiderApp::service()+0x174>
    9408:	000f4240 	.word	0x000f4240
    940c:	0004e1cc 	.word	0x0004e1cc
    9410:	00001388 	.word	0x00001388
    9414:	004c4b40 	.word	0x004c4b40
    9418:	0003efc0 	.word	0x0003efc0
    941c:	0003efb0 	.word	0x0003efb0
    9420:	0003efa0 	.word	0x0003efa0

00009424 <BusRaiderApp::getPiStatus(char*, int)>:
    9424:	e92d4070 	push	{r4, r5, r6, lr}
    9428:	e1a04001 	mov	r4, r1
    942c:	e5900080 	ldr	r0, [r0, #128]	; 0x80
    9430:	e1a05002 	mov	r5, r2
    9434:	eb00b7fb 	bl	37428 <McManager::getMachineJSON()>
    9438:	e3540000 	cmp	r4, #0
    943c:	08bd8070 	popeq	{r4, r5, r6, pc}
    9440:	e1a02005 	mov	r2, r5
    9444:	e1a01000 	mov	r1, r0
    9448:	e1a00004 	mov	r0, r4
    944c:	e8bd4070 	pop	{r4, r5, r6, lr}
    9450:	ea0092f0 	b	2e018 <strlcpy>

00009454 <BusRaiderApp::storeESP32StatusInfo(char const*)>:
    9454:	e92d4030 	push	{r4, r5, lr}
    9458:	e24dde45 	sub	sp, sp, #1104	; 0x450
    945c:	e24dd00c 	sub	sp, sp, #12
    9460:	e1a04000 	mov	r4, r0
    9464:	e1a05001 	mov	r5, r1
    9468:	eb0092b0 	bl	2df30 <millis>
    946c:	e584095c 	str	r0, [r4, #2396]	; 0x95c
    9470:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    9474:	eb0092b4 	bl	2df4c <microsDelay>
    9478:	e1a01005 	mov	r1, r5
    947c:	e2845e85 	add	r5, r4, #2128	; 0x850
    9480:	e28d2070 	add	r2, sp, #112	; 0x70
    9484:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    9488:	e2855004 	add	r5, r5, #4
    948c:	e59f00c8 	ldr	r0, [pc, #200]	; 955c <BusRaiderApp::storeESP32StatusInfo(char const*)+0x108>
    9490:	eb009396 	bl	2e2f0 <jsonGetValueForKey>
    9494:	e1a02005 	mov	r2, r5
    9498:	e3a0301e 	mov	r3, #30
    949c:	e28d1070 	add	r1, sp, #112	; 0x70
    94a0:	e59f00b8 	ldr	r0, [pc, #184]	; 9560 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x10c>
    94a4:	eb009391 	bl	2e2f0 <jsonGetValueForKey>
    94a8:	e59f10b4 	ldr	r1, [pc, #180]	; 9564 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x110>
    94ac:	e1a00005 	mov	r0, r5
    94b0:	eb0082fb 	bl	2a0a4 <strcmp>
    94b4:	e2900000 	adds	r0, r0, #0
    94b8:	13a00001 	movne	r0, #1
    94bc:	e2842e87 	add	r2, r4, #2160	; 0x870
    94c0:	e5c40958 	strb	r0, [r4, #2392]	; 0x958
    94c4:	e2822002 	add	r2, r2, #2
    94c8:	e28d1070 	add	r1, sp, #112	; 0x70
    94cc:	e3a0301e 	mov	r3, #30
    94d0:	e59f0090 	ldr	r0, [pc, #144]	; 9568 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x114>
    94d4:	eb009385 	bl	2e2f0 <jsonGetValueForKey>
    94d8:	e2842e89 	add	r2, r4, #2192	; 0x890
    94dc:	e28d1070 	add	r1, sp, #112	; 0x70
    94e0:	e3a03064 	mov	r3, #100	; 0x64
    94e4:	e59f0080 	ldr	r0, [pc, #128]	; 956c <BusRaiderApp::storeESP32StatusInfo(char const*)+0x118>
    94e8:	eb009380 	bl	2e2f0 <jsonGetValueForKey>
    94ec:	e2842e8f 	add	r2, r4, #2288	; 0x8f0
    94f0:	e2822004 	add	r2, r2, #4
    94f4:	e28d1070 	add	r1, sp, #112	; 0x70
    94f8:	e3a03064 	mov	r3, #100	; 0x64
    94fc:	e59f006c 	ldr	r0, [pc, #108]	; 9570 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x11c>
    9500:	eb00937a 	bl	2e2f0 <jsonGetValueForKey>
    9504:	e3a0c000 	mov	ip, #0
    9508:	e28d300c 	add	r3, sp, #12
    950c:	e1a02003 	mov	r2, r3
    9510:	e58d3004 	str	r3, [sp, #4]
    9514:	e28d1070 	add	r1, sp, #112	; 0x70
    9518:	e3a03064 	mov	r3, #100	; 0x64
    951c:	e59f0050 	ldr	r0, [pc, #80]	; 9574 <BusRaiderApp::storeESP32StatusInfo(char const*)+0x120>
    9520:	e5cdc00c 	strb	ip, [sp, #12]
    9524:	eb009371 	bl	2e2f0 <jsonGetValueForKey>
    9528:	e59d0004 	ldr	r0, [sp, #4]
    952c:	eb0082d2 	bl	2a07c <strlen>
    9530:	e3500000 	cmp	r0, #0
    9534:	03a00014 	moveq	r0, #20
    9538:	0a000001 	beq	9544 <BusRaiderApp::storeESP32StatusInfo(char const*)+0xf0>
    953c:	e59d0004 	ldr	r0, [sp, #4]
    9540:	eb0084ee 	bl	2a900 <atoi>
    9544:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    9548:	e593300c 	ldr	r3, [r3, #12]
    954c:	e5830000 	str	r0, [r3]
    9550:	e28dde45 	add	sp, sp, #1104	; 0x450
    9554:	e28dd00c 	add	sp, sp, #12
    9558:	e8bd8030 	pop	{r4, r5, pc}
    955c:	0003efcc 	.word	0x0003efcc
    9560:	0003efd8 	.word	0x0003efd8
    9564:	0003efe0 	.word	0x0003efe0
    9568:	0003efe8 	.word	0x0003efe8
    956c:	0003eff4 	.word	0x0003eff4
    9570:	0003effc 	.word	0x0003effc
    9574:	0003f004 	.word	0x0003f004

00009578 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
    9578:	e92d4070 	push	{r4, r5, r6, lr}
    957c:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
    9580:	e1a05000 	mov	r5, r0
    9584:	e28d2004 	add	r2, sp, #4
    9588:	e3a030c8 	mov	r3, #200	; 0xc8
    958c:	e59f00ac 	ldr	r0, [pc, #172]	; 9640 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc8>
    9590:	e1a06001 	mov	r6, r1
    9594:	eb009355 	bl	2e2f0 <jsonGetValueForKey>
    9598:	e2504000 	subs	r4, r0, #0
    959c:	1a000003 	bne	95b0 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
    95a0:	e3a04000 	mov	r4, #0
    95a4:	e1a00004 	mov	r0, r4
    95a8:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    95ac:	e8bd8070 	pop	{r4, r5, r6, pc}
    95b0:	e3a03000 	mov	r3, #0
    95b4:	e59d20e0 	ldr	r2, [sp, #224]	; 0xe0
    95b8:	e59f1084 	ldr	r1, [pc, #132]	; 9644 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc>
    95bc:	e5c23000 	strb	r3, [r2]
    95c0:	e28d0004 	add	r0, sp, #4
    95c4:	eb0082d1 	bl	2a110 <strcasecmp>
    95c8:	e3500000 	cmp	r0, #0
    95cc:	0a000014 	beq	9624 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xac>
    95d0:	e59f1070 	ldr	r1, [pc, #112]	; 9648 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd0>
    95d4:	e28d0004 	add	r0, sp, #4
    95d8:	eb0082cc 	bl	2a110 <strcasecmp>
    95dc:	e3500000 	cmp	r0, #0
    95e0:	0a00000b 	beq	9614 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9c>
    95e4:	e28d0004 	add	r0, sp, #4
    95e8:	e59f105c 	ldr	r1, [pc, #92]	; 964c <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd4>
    95ec:	eb0082c7 	bl	2a110 <strcasecmp>
    95f0:	e3500000 	cmp	r0, #0
    95f4:	1affffe9 	bne	95a0 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x28>
    95f8:	e5950080 	ldr	r0, [r5, #128]	; 0x80
    95fc:	e1a01006 	mov	r1, r6
    9600:	eb00b7fa 	bl	375f0 <McManager::setupMachine(char const*)>
    9604:	e3a03001 	mov	r3, #1
    9608:	e2855a03 	add	r5, r5, #12288	; 0x3000
    960c:	e5853070 	str	r3, [r5, #112]	; 0x70
    9610:	eaffffe3 	b	95a4 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c>
    9614:	e1a01006 	mov	r1, r6
    9618:	e1a00005 	mov	r0, r5
    961c:	ebffff8c 	bl	9454 <BusRaiderApp::storeESP32StatusInfo(char const*)>
    9620:	eaffffdf 	b	95a4 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2c>
    9624:	e1a00005 	mov	r0, r5
    9628:	e59d20e4 	ldr	r2, [sp, #228]	; 0xe4
    962c:	e59d10e0 	ldr	r1, [sp, #224]	; 0xe0
    9630:	ebffff7b 	bl	9424 <BusRaiderApp::getPiStatus(char*, int)>
    9634:	e1a00004 	mov	r0, r4
    9638:	e28dd0d0 	add	sp, sp, #208	; 0xd0
    963c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9640:	0003f00c 	.word	0x0003f00c
    9644:	0003f014 	.word	0x0003f014
    9648:	0003f020 	.word	0x0003f020
    964c:	0003f034 	.word	0x0003f034

00009650 <BusRaiderApp::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
    9650:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9654:	e99d5000 	ldmib	sp, {ip, lr}
    9658:	e3500000 	cmp	r0, #0
    965c:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
    9660:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    9664:	eaffffc3 	b	9578 <BusRaiderApp::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

00009668 <BusRaiderApp::selfTestHelperService()>:
    9668:	eafffef6 	b	9248 <BusRaiderApp::service()>

0000966c <BusRaiderApp::selfTestKeyboardGet()>:
    966c:	e3e02000 	mvn	r2, #0
    9670:	e2803a03 	add	r3, r0, #12288	; 0x3000
    9674:	e5930538 	ldr	r0, [r3, #1336]	; 0x538
    9678:	e5832538 	str	r2, [r3, #1336]	; 0x538
    967c:	e12fff1e 	bx	lr

00009680 <SimpleBuffer::~SimpleBuffer()>:
    9680:	e12fff1e 	bx	lr

00009684 <SimpleBuffer::~SimpleBuffer()>:
    9684:	e92d4010 	push	{r4, lr}
    9688:	e1a04000 	mov	r4, r0
    968c:	e59f1008 	ldr	r1, [pc, #8]	; 969c <SimpleBuffer::~SimpleBuffer()+0x18>
    9690:	eb008685 	bl	2b0ac <operator delete(void*, unsigned int)>
    9694:	e1a00004 	mov	r0, r4
    9698:	e8bd8010 	pop	{r4, pc}
    969c:	00002718 	.word	0x00002718

000096a0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
    96a0:	e92d4070 	push	{r4, r5, r6, lr}
    96a4:	e3a06000 	mov	r6, #0
    96a8:	e1a04000 	mov	r4, r0
    96ac:	e59f5034 	ldr	r5, [pc, #52]	; 96e8 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x48>
    96b0:	e580643c 	str	r6, [r0, #1084]	; 0x43c
    96b4:	e2853008 	add	r3, r5, #8
    96b8:	e5803000 	str	r3, [r0]
    96bc:	eb006f29 	bl	25368 <CDeviceNameService::Get()>
    96c0:	e1a03006 	mov	r3, r6
    96c4:	e2851030 	add	r1, r5, #48	; 0x30
    96c8:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
    96cc:	eb006f4c 	bl	25404 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    96d0:	e2840024 	add	r0, r4, #36	; 0x24
    96d4:	eb003b20 	bl	1835c <CKeyboardBehaviour::~CKeyboardBehaviour()>
    96d8:	e1a00004 	mov	r0, r4
    96dc:	eb002280 	bl	120e4 <CUSBHIDDevice::~CUSBHIDDevice()>
    96e0:	e1a00004 	mov	r0, r4
    96e4:	e8bd8070 	pop	{r4, r5, r6, pc}
    96e8:	0003f094 	.word	0x0003f094

000096ec <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
    96ec:	e92d4010 	push	{r4, lr}
    96f0:	e1a04000 	mov	r4, r0
    96f4:	ebffffe9 	bl	96a0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
    96f8:	e1a00004 	mov	r0, r4
    96fc:	e3a01e45 	mov	r1, #1104	; 0x450
    9700:	eb008669 	bl	2b0ac <operator delete(void*, unsigned int)>
    9704:	e1a00004 	mov	r0, r4
    9708:	e8bd8010 	pop	{r4, pc}

0000970c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
    970c:	e2522008 	subs	r2, r2, #8
    9710:	13a02001 	movne	r2, #1
    9714:	e3510000 	cmp	r1, #0
    9718:	03822001 	orreq	r2, r2, #1
    971c:	e3520000 	cmp	r2, #0
    9720:	112fff1e 	bxne	lr
    9724:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9728:	e590343c 	ldr	r3, [r0, #1084]	; 0x43c
    972c:	e24dd00c 	sub	sp, sp, #12
    9730:	e3530000 	cmp	r3, #0
    9734:	e1a07001 	mov	r7, r1
    9738:	0a000004 	beq	9750 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
    973c:	e5d70000 	ldrb	r0, [r7]
    9740:	e2811002 	add	r1, r1, #2
    9744:	e28dd00c 	add	sp, sp, #12
    9748:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    974c:	e12fff13 	bx	r3
    9750:	e1a06000 	mov	r6, r0
    9754:	e1a04003 	mov	r4, r3
    9758:	e3a05080 	mov	r5, #128	; 0x80
    975c:	e3a09001 	mov	r9, #1
    9760:	e2808024 	add	r8, r0, #36	; 0x24
    9764:	ea000006 	b	9784 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x78>
    9768:	e1120003 	tst	r2, r3
    976c:	1a00003d 	bne	9868 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x15c>
    9770:	e2844001 	add	r4, r4, #1
    9774:	e2855001 	add	r5, r5, #1
    9778:	e3540008 	cmp	r4, #8
    977c:	e6ef5075 	uxtb	r5, r5
    9780:	0a00000a 	beq	97b0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xa4>
    9784:	e5d72000 	ldrb	r2, [r7]
    9788:	e1a03419 	lsl	r3, r9, r4
    978c:	e1120003 	tst	r2, r3
    9790:	e5d62440 	ldrb	r2, [r6, #1088]	; 0x440
    9794:	0afffff3 	beq	9768 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x5c>
    9798:	e1120003 	tst	r2, r3
    979c:	1afffff3 	bne	9770 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
    97a0:	e1a01005 	mov	r1, r5
    97a4:	e1a00008 	mov	r0, r8
    97a8:	eb003b50 	bl	184f0 <CKeyboardBehaviour::KeyPressed(unsigned char)>
    97ac:	eaffffef 	b	9770 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
    97b0:	e2868d11 	add	r8, r6, #1088	; 0x440
    97b4:	e2885002 	add	r5, r8, #2
    97b8:	e1a0b005 	mov	fp, r5
    97bc:	e2863024 	add	r3, r6, #36	; 0x24
    97c0:	e2884008 	add	r4, r8, #8
    97c4:	e2879002 	add	r9, r7, #2
    97c8:	e287a008 	add	sl, r7, #8
    97cc:	e58d3004 	str	r3, [sp, #4]
    97d0:	e4db1001 	ldrb	r1, [fp], #1
    97d4:	e3510000 	cmp	r1, #0
    97d8:	0a000007 	beq	97fc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>
    97dc:	e1a03009 	mov	r3, r9
    97e0:	e4d30001 	ldrb	r0, [r3], #1
    97e4:	e1500001 	cmp	r0, r1
    97e8:	0a000003 	beq	97fc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>
    97ec:	e153000a 	cmp	r3, sl
    97f0:	1afffffa 	bne	97e0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd4>
    97f4:	e59d0004 	ldr	r0, [sp, #4]
    97f8:	eb003b4b 	bl	1852c <CKeyboardBehaviour::KeyReleased(unsigned char)>
    97fc:	e15b0004 	cmp	fp, r4
    9800:	1afffff2 	bne	97d0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc4>
    9804:	e2866024 	add	r6, r6, #36	; 0x24
    9808:	e2879001 	add	r9, r7, #1
    980c:	e287a007 	add	sl, r7, #7
    9810:	ea000001 	b	981c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
    9814:	e159000a 	cmp	r9, sl
    9818:	0a00000c 	beq	9850 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x144>
    981c:	e5f91001 	ldrb	r1, [r9, #1]!
    9820:	e3510000 	cmp	r1, #0
    9824:	11a03005 	movne	r3, r5
    9828:	0afffff9 	beq	9814 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
    982c:	e4d32001 	ldrb	r2, [r3], #1
    9830:	e1520001 	cmp	r2, r1
    9834:	0afffff6 	beq	9814 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x108>
    9838:	e1530004 	cmp	r3, r4
    983c:	1afffffa 	bne	982c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x120>
    9840:	e1a00006 	mov	r0, r6
    9844:	eb003b29 	bl	184f0 <CKeyboardBehaviour::KeyPressed(unsigned char)>
    9848:	e159000a 	cmp	r9, sl
    984c:	1afffff2 	bne	981c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
    9850:	e1a01007 	mov	r1, r7
    9854:	e1a00008 	mov	r0, r8
    9858:	e3a02008 	mov	r2, #8
    985c:	e28dd00c 	add	sp, sp, #12
    9860:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9864:	ea008429 	b	2a910 <memcpy>
    9868:	e1a01005 	mov	r1, r5
    986c:	e1a00008 	mov	r0, r8
    9870:	eb003b2d 	bl	1852c <CKeyboardBehaviour::KeyReleased(unsigned char)>
    9874:	eaffffbd 	b	9770 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>

00009878 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
    9878:	e92d4010 	push	{r4, lr}
    987c:	e1a04000 	mov	r4, r0
    9880:	e3a02008 	mov	r2, #8
    9884:	eb002202 	bl	12094 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
    9888:	e1a00004 	mov	r0, r4
    988c:	e59f3028 	ldr	r3, [pc, #40]	; 98bc <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x44>
    9890:	e4803024 	str	r3, [r0], #36	; 0x24
    9894:	eb003aa3 	bl	18328 <CKeyboardBehaviour::CKeyboardBehaviour()>
    9898:	e3a01000 	mov	r1, #0
    989c:	e2840d11 	add	r0, r4, #1088	; 0x440
    98a0:	e584143c 	str	r1, [r4, #1084]	; 0x43c
    98a4:	e5c41448 	strb	r1, [r4, #1096]	; 0x448
    98a8:	e584144c 	str	r1, [r4, #1100]	; 0x44c
    98ac:	e3a02008 	mov	r2, #8
    98b0:	eb00819f 	bl	29f34 <memset>
    98b4:	e1a00004 	mov	r0, r4
    98b8:	e8bd8010 	pop	{r4, pc}
    98bc:	0003f09c 	.word	0x0003f09c

000098c0 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
    98c0:	e2800024 	add	r0, r0, #36	; 0x24
    98c4:	ea003aae 	b	18384 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

000098c8 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
    98c8:	e2800024 	add	r0, r0, #36	; 0x24
    98cc:	ea003ab7 	b	183b0 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

000098d0 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
    98d0:	e2800024 	add	r0, r0, #36	; 0x24
    98d4:	ea003ac0 	b	183dc <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

000098d8 <CUSBKeyboardDevice::GetLEDStatus() const>:
    98d8:	e92d4010 	push	{r4, lr}
    98dc:	e2800024 	add	r0, r0, #36	; 0x24
    98e0:	eb003ac8 	bl	18408 <CKeyboardBehaviour::GetLEDStatus() const>
    98e4:	e2003001 	and	r3, r0, #1
    98e8:	e3100002 	tst	r0, #2
    98ec:	13833002 	orrne	r3, r3, #2
    98f0:	e3100004 	tst	r0, #4
    98f4:	13833004 	orrne	r3, r3, #4
    98f8:	e1a00003 	mov	r0, r3
    98fc:	e8bd8010 	pop	{r4, pc}

00009900 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))>:
    9900:	e3510000 	cmp	r1, #0
    9904:	0a000001 	beq	9910 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x10>
    9908:	e580143c 	str	r1, [r0, #1084]	; 0x43c
    990c:	e12fff1e 	bx	lr
    9910:	e92d4010 	push	{r4, lr}
    9914:	e3a0207d 	mov	r2, #125	; 0x7d
    9918:	e59f1004 	ldr	r1, [pc, #4]	; 9924 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x24>
    991c:	e59f0004 	ldr	r0, [pc, #4]	; 9928 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*))+0x28>
    9920:	eb006bb6 	bl	24800 <assertion_failed>
    9924:	0003f0d4 	.word	0x0003f0d4
    9928:	0003f0e4 	.word	0x0003f0e4

0000992c <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
    992c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9930:	e24dd01c 	sub	sp, sp, #28
    9934:	e28d4018 	add	r4, sp, #24
    9938:	e5641004 	strb	r1, [r4, #-4]!
    993c:	e1a05000 	mov	r5, r0
    9940:	eb0017ec 	bl	f8f8 <CUSBFunction::GetHost() const>
    9944:	e1a06000 	mov	r6, r0
    9948:	e1a00005 	mov	r0, r5
    994c:	eb0017de 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
    9950:	e1a07000 	mov	r7, r0
    9954:	e1a00005 	mov	r0, r5
    9958:	eb001844 	bl	fa70 <CUSBFunction::GetInterfaceNumber() const>
    995c:	e3a02001 	mov	r2, #1
    9960:	e3a03c02 	mov	r3, #512	; 0x200
    9964:	e6ff0070 	uxth	r0, r0
    9968:	e98d0011 	stmib	sp, {r0, r4}
    996c:	e58d200c 	str	r2, [sp, #12]
    9970:	e58d3000 	str	r3, [sp]
    9974:	e1a01007 	mov	r1, r7
    9978:	e1a00006 	mov	r0, r6
    997c:	e3a03009 	mov	r3, #9
    9980:	e3a02021 	mov	r2, #33	; 0x21
    9984:	eb0023ad 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    9988:	e1e00000 	mvn	r0, r0
    998c:	e1a00fa0 	lsr	r0, r0, #31
    9990:	e28dd01c 	add	sp, sp, #28
    9994:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00009998 <CUSBKeyboardDevice::Configure()>:
    9998:	e92d4030 	push	{r4, r5, lr}
    999c:	e3a01000 	mov	r1, #0
    99a0:	e24dd00c 	sub	sp, sp, #12
    99a4:	e1a04000 	mov	r4, r0
    99a8:	eb0021f8 	bl	12190 <CUSBHIDDevice::Configure(unsigned int)>
    99ac:	e2505000 	subs	r5, r0, #0
    99b0:	0a000012 	beq	9a00 <CUSBKeyboardDevice::Configure()+0x68>
    99b4:	e5d41448 	ldrb	r1, [r4, #1096]	; 0x448
    99b8:	e1a00004 	mov	r0, r4
    99bc:	ebffffda 	bl	992c <CUSBKeyboardDevice::SetLEDs(unsigned char)>
    99c0:	e59f2058 	ldr	r2, [pc, #88]	; 9a20 <CUSBKeyboardDevice::Configure()+0x88>
    99c4:	e5923000 	ldr	r3, [r2]
    99c8:	e584344c 	str	r3, [r4, #1100]	; 0x44c
    99cc:	e2833001 	add	r3, r3, #1
    99d0:	e5823000 	str	r3, [r2]
    99d4:	eb006e63 	bl	25368 <CDeviceNameService::Get()>
    99d8:	e3a03000 	mov	r3, #0
    99dc:	e594244c 	ldr	r2, [r4, #1100]	; 0x44c
    99e0:	e59f103c 	ldr	r1, [pc, #60]	; 9a24 <CUSBKeyboardDevice::Configure()+0x8c>
    99e4:	e58d3000 	str	r3, [sp]
    99e8:	e1a03004 	mov	r3, r4
    99ec:	eb006e6a 	bl	2539c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    99f0:	e1a00004 	mov	r0, r4
    99f4:	e28dd00c 	add	sp, sp, #12
    99f8:	e8bd4030 	pop	{r4, r5, lr}
    99fc:	ea002302 	b	1260c <CUSBHIDDevice::StartRequest()>
    9a00:	eb007471 	bl	26bcc <CLogger::Get()>
    9a04:	e59f301c 	ldr	r3, [pc, #28]	; 9a28 <CUSBKeyboardDevice::Configure()+0x90>
    9a08:	e3a02001 	mov	r2, #1
    9a0c:	e59f1018 	ldr	r1, [pc, #24]	; 9a2c <CUSBKeyboardDevice::Configure()+0x94>
    9a10:	eb0073aa 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9a14:	e1a00005 	mov	r0, r5
    9a18:	e28dd00c 	add	sp, sp, #12
    9a1c:	e8bd8030 	pop	{r4, r5, pc}
    9a20:	00047e80 	.word	0x00047e80
    9a24:	0003f0c4 	.word	0x0003f0c4
    9a28:	0003f100 	.word	0x0003f100
    9a2c:	0003f0cc 	.word	0x0003f0cc

00009a30 <CUSBKeyboardDevice::UpdateLEDs()>:
    9a30:	e590243c 	ldr	r2, [r0, #1084]	; 0x43c
    9a34:	e3520000 	cmp	r2, #0
    9a38:	112fff1e 	bxne	lr
    9a3c:	e92d4010 	push	{r4, lr}
    9a40:	e1a04000 	mov	r4, r0
    9a44:	ebffffa3 	bl	98d8 <CUSBKeyboardDevice::GetLEDStatus() const>
    9a48:	e5d43448 	ldrb	r3, [r4, #1096]	; 0x448
    9a4c:	e1530000 	cmp	r3, r0
    9a50:	08bd8010 	popeq	{r4, pc}
    9a54:	e5c40448 	strb	r0, [r4, #1096]	; 0x448
    9a58:	e1a01000 	mov	r1, r0
    9a5c:	e1a00004 	mov	r0, r4
    9a60:	ebffffb1 	bl	992c <CUSBKeyboardDevice::SetLEDs(unsigned char)>
    9a64:	e3500000 	cmp	r0, #0
    9a68:	18bd8010 	popne	{r4, pc}
    9a6c:	eb007456 	bl	26bcc <CLogger::Get()>
    9a70:	e8bd4010 	pop	{r4, lr}
    9a74:	e59f3008 	ldr	r3, [pc, #8]	; 9a84 <CUSBKeyboardDevice::UpdateLEDs()+0x54>
    9a78:	e3a02001 	mov	r2, #1
    9a7c:	e59f1004 	ldr	r1, [pc, #4]	; 9a88 <CUSBKeyboardDevice::UpdateLEDs()+0x58>
    9a80:	ea00738e 	b	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9a84:	0003f11c 	.word	0x0003f11c
    9a88:	0003f0cc 	.word	0x0003f0cc

00009a8c <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
    9a8c:	e0802002 	add	r2, r0, r2
    9a90:	ea000002 	b	9aa0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
    9a94:	e4d03001 	ldrb	r3, [r0], #1
    9a98:	e1530001 	cmp	r3, r1
    9a9c:	0a000003 	beq	9ab0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
    9aa0:	e1500002 	cmp	r0, r2
    9aa4:	1afffffa 	bne	9a94 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
    9aa8:	e3a00000 	mov	r0, #0
    9aac:	e12fff1e 	bx	lr
    9ab0:	e3a00001 	mov	r0, #1
    9ab4:	e12fff1e 	bx	lr

00009ab8 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    9ab8:	e3520000 	cmp	r2, #0
    9abc:	e92d4010 	push	{r4, lr}
    9ac0:	0a000005 	beq	9adc <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x24>
    9ac4:	e351000f 	cmp	r1, #15
    9ac8:	8a000007 	bhi	9aec <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x34>
    9acc:	e3a03000 	mov	r3, #0
    9ad0:	e0822001 	add	r2, r2, r1
    9ad4:	e5c2305c 	strb	r3, [r2, #92]	; 0x5c
    9ad8:	e8bd8010 	pop	{r4, pc}
    9adc:	e59f2018 	ldr	r2, [pc, #24]	; 9afc <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x44>
    9ae0:	e59f1018 	ldr	r1, [pc, #24]	; 9b00 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    9ae4:	e59f0018 	ldr	r0, [pc, #24]	; 9b04 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x4c>
    9ae8:	eb006b44 	bl	24800 <assertion_failed>
    9aec:	e59f2014 	ldr	r2, [pc, #20]	; 9b08 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x50>
    9af0:	e59f1008 	ldr	r1, [pc, #8]	; 9b00 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x48>
    9af4:	e59f0010 	ldr	r0, [pc, #16]	; 9b0c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x54>
    9af8:	eb006b40 	bl	24800 <assertion_failed>
    9afc:	000002ab 	.word	0x000002ab
    9b00:	0003f158 	.word	0x0003f158
    9b04:	0003f168 	.word	0x0003f168
    9b08:	000002ae 	.word	0x000002ae
    9b0c:	0003f174 	.word	0x0003f174

00009b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>:
    9b10:	e92d4030 	push	{r4, r5, lr}
    9b14:	e24dd01c 	sub	sp, sp, #28
    9b18:	e1a05000 	mov	r5, r0
    9b1c:	e28d000c 	add	r0, sp, #12
    9b20:	eb000c3e 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9b24:	e3a03000 	mov	r3, #0
    9b28:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    9b2c:	eb007426 	bl	26bcc <CLogger::Get()>
    9b30:	e1a04000 	mov	r4, r0
    9b34:	e28d000c 	add	r0, sp, #12
    9b38:	eb000c41 	bl	cc44 <CDWHCIRegister::Read()>
    9b3c:	e59f3020 	ldr	r3, [pc, #32]	; 9b64 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]+0x54>
    9b40:	e88d0021 	stm	sp, {r0, r5}
    9b44:	e3a02004 	mov	r2, #4
    9b48:	e1a00004 	mov	r0, r4
    9b4c:	e59f1014 	ldr	r1, [pc, #20]	; 9b68 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]+0x58>
    9b50:	eb00735a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9b54:	e28d000c 	add	r0, sp, #12
    9b58:	eb000c38 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    9b5c:	e28dd01c 	add	sp, sp, #28
    9b60:	e8bd8030 	pop	{r4, r5, pc}
    9b64:	0003f194 	.word	0x0003f194
    9b68:	0003f134 	.word	0x0003f134

00009b6c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)>:
    9b6c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9b70:	e1a04000 	mov	r4, r0
    9b74:	e3a05000 	mov	r5, #0
    9b78:	e1a07001 	mov	r7, r1
    9b7c:	e1a06002 	mov	r6, r2
    9b80:	eb002323 	bl	12814 <CUSBHostController::CUSBHostController()>
    9b84:	e3a03001 	mov	r3, #1
    9b88:	e59f00a8 	ldr	r0, [pc, #168]	; 9c38 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xcc>
    9b8c:	e5845010 	str	r5, [r4, #16]
    9b90:	e5840000 	str	r0, [r4]
    9b94:	e5843014 	str	r3, [r4, #20]
    9b98:	e5843058 	str	r3, [r4, #88]	; 0x58
    9b9c:	e5847004 	str	r7, [r4, #4]
    9ba0:	e5846008 	str	r6, [r4, #8]
    9ba4:	e584500c 	str	r5, [r4, #12]
    9ba8:	e584506c 	str	r5, [r4, #108]	; 0x6c
    9bac:	e5845070 	str	r5, [r4, #112]	; 0x70
    9bb0:	e1a01004 	mov	r1, r4
    9bb4:	e2840074 	add	r0, r4, #116	; 0x74
    9bb8:	eb000d0c 	bl	cff0 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    9bbc:	e5943004 	ldr	r3, [r4, #4]
    9bc0:	e5c45080 	strb	r5, [r4, #128]	; 0x80
    9bc4:	e1530005 	cmp	r3, r5
    9bc8:	e5c45081 	strb	r5, [r4, #129]	; 0x81
    9bcc:	0a000011 	beq	9c18 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xac>
    9bd0:	e5943008 	ldr	r3, [r4, #8]
    9bd4:	e3530000 	cmp	r3, #0
    9bd8:	11a02005 	movne	r2, r5
    9bdc:	12843014 	addne	r3, r4, #20
    9be0:	12841054 	addne	r1, r4, #84	; 0x54
    9be4:	0a00000f 	beq	9c28 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xbc>
    9be8:	e5a32004 	str	r2, [r3, #4]!
    9bec:	e1510003 	cmp	r1, r3
    9bf0:	1afffffc 	bne	9be8 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x7c>
    9bf4:	e3a03000 	mov	r3, #0
    9bf8:	e1a01003 	mov	r1, r3
    9bfc:	e0842003 	add	r2, r4, r3
    9c00:	e2833001 	add	r3, r3, #1
    9c04:	e3530010 	cmp	r3, #16
    9c08:	e5c2105c 	strb	r1, [r2, #92]	; 0x5c
    9c0c:	1afffffa 	bne	9bfc <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0x90>
    9c10:	e1a00004 	mov	r0, r4
    9c14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9c18:	e3a0204b 	mov	r2, #75	; 0x4b
    9c1c:	e59f1018 	ldr	r1, [pc, #24]	; 9c3c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9c20:	e59f0018 	ldr	r0, [pc, #24]	; 9c40 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd4>
    9c24:	eb006af5 	bl	24800 <assertion_failed>
    9c28:	e3a0204c 	mov	r2, #76	; 0x4c
    9c2c:	e59f1008 	ldr	r1, [pc, #8]	; 9c3c <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd0>
    9c30:	e59f000c 	ldr	r0, [pc, #12]	; 9c44 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*)+0xd8>
    9c34:	eb006af1 	bl	24800 <assertion_failed>
    9c38:	0003f144 	.word	0x0003f144
    9c3c:	0003f158 	.word	0x0003f158
    9c40:	0003f1a0 	.word	0x0003f1a0
    9c44:	0003f1b8 	.word	0x0003f1b8

00009c48 <CDWHCIDevice::GetPortSpeed()>:
    9c48:	e92d4010 	push	{r4, lr}
    9c4c:	e24dd010 	sub	sp, sp, #16
    9c50:	e59f103c 	ldr	r1, [pc, #60]	; 9c94 <CDWHCIDevice::GetPortSpeed()+0x4c>
    9c54:	e28d0004 	add	r0, sp, #4
    9c58:	eb000bf0 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9c5c:	e28d0004 	add	r0, sp, #4
    9c60:	eb000bf7 	bl	cc44 <CDWHCIRegister::Read()>
    9c64:	e1a008a0 	lsr	r0, r0, #17
    9c68:	e2000003 	and	r0, r0, #3
    9c6c:	e3500003 	cmp	r0, #3
    9c70:	03a04004 	moveq	r4, #4
    9c74:	159f301c 	ldrne	r3, [pc, #28]	; 9c98 <CDWHCIDevice::GetPortSpeed()+0x50>
    9c78:	10830000 	addne	r0, r3, r0
    9c7c:	15d04020 	ldrbne	r4, [r0, #32]
    9c80:	e28d0004 	add	r0, sp, #4
    9c84:	eb000bed 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    9c88:	e1a00004 	mov	r0, r4
    9c8c:	e28dd010 	add	sp, sp, #16
    9c90:	e8bd8010 	pop	{r4, pc}
    9c94:	20980440 	.word	0x20980440
    9c98:	0003f134 	.word	0x0003f134

00009c9c <CDWHCIDevice::OvercurrentDetected()>:
    9c9c:	e92d4010 	push	{r4, lr}
    9ca0:	e24dd010 	sub	sp, sp, #16
    9ca4:	e59f1028 	ldr	r1, [pc, #40]	; 9cd4 <CDWHCIDevice::OvercurrentDetected()+0x38>
    9ca8:	e28d0004 	add	r0, sp, #4
    9cac:	eb000bdb 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9cb0:	e28d0004 	add	r0, sp, #4
    9cb4:	eb000be2 	bl	cc44 <CDWHCIRegister::Read()>
    9cb8:	e1a04000 	mov	r4, r0
    9cbc:	e28d0004 	add	r0, sp, #4
    9cc0:	eb000bde 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    9cc4:	e1a00224 	lsr	r0, r4, #4
    9cc8:	e2000001 	and	r0, r0, #1
    9ccc:	e28dd010 	add	sp, sp, #16
    9cd0:	e8bd8010 	pop	{r4, pc}
    9cd4:	20980440 	.word	0x20980440

00009cd8 <CDWHCIDevice::DisableRootPort(bool)>:
    9cd8:	e3a03000 	mov	r3, #0
    9cdc:	e92d4010 	push	{r4, lr}
    9ce0:	e1a04001 	mov	r4, r1
    9ce4:	e24dd010 	sub	sp, sp, #16
    9ce8:	e5c03080 	strb	r3, [r0, #128]	; 0x80
    9cec:	e59f1044 	ldr	r1, [pc, #68]	; 9d38 <CDWHCIDevice::DisableRootPort(bool)+0x60>
    9cf0:	e28d0004 	add	r0, sp, #4
    9cf4:	eb000bc9 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9cf8:	e28d0004 	add	r0, sp, #4
    9cfc:	eb000bd0 	bl	cc44 <CDWHCIRegister::Read()>
    9d00:	e28d0004 	add	r0, sp, #4
    9d04:	e3e01004 	mvn	r1, #4
    9d08:	eb000c01 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    9d0c:	e3540000 	cmp	r4, #0
    9d10:	0a000002 	beq	9d20 <CDWHCIDevice::DisableRootPort(bool)+0x48>
    9d14:	e3e01a01 	mvn	r1, #4096	; 0x1000
    9d18:	e28d0004 	add	r0, sp, #4
    9d1c:	eb000bfc 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    9d20:	e28d0004 	add	r0, sp, #4
    9d24:	eb000bcd 	bl	cc60 <CDWHCIRegister::Write()>
    9d28:	e28d0004 	add	r0, sp, #4
    9d2c:	eb000bc3 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    9d30:	e28dd010 	add	sp, sp, #16
    9d34:	e8bd8010 	pop	{r4, pc}
    9d38:	20980440 	.word	0x20980440

00009d3c <CDWHCIDevice::PowerOn()>:
    9d3c:	e3a01000 	mov	r1, #0
    9d40:	e92d4030 	push	{r4, r5, lr}
    9d44:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    9d48:	e28d000c 	add	r0, sp, #12
    9d4c:	e1a05001 	mov	r5, r1
    9d50:	eb006acb 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    9d54:	e3a03014 	mov	r3, #20
    9d58:	e3a0c003 	mov	ip, #3
    9d5c:	e28d000c 	add	r0, sp, #12
    9d60:	e58d5000 	str	r5, [sp]
    9d64:	e08d2003 	add	r2, sp, r3
    9d68:	e59f1034 	ldr	r1, [pc, #52]	; 9da4 <CDWHCIDevice::PowerOn()+0x68>
    9d6c:	e58dc020 	str	ip, [sp, #32]
    9d70:	e58dc024 	str	ip, [sp, #36]	; 0x24
    9d74:	eb006ace 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9d78:	e2504000 	subs	r4, r0, #0
    9d7c:	0a000003 	beq	9d90 <CDWHCIDevice::PowerOn()+0x54>
    9d80:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    9d84:	e3140002 	tst	r4, #2
    9d88:	11a04005 	movne	r4, r5
    9d8c:	02044001 	andeq	r4, r4, #1
    9d90:	e28d000c 	add	r0, sp, #12
    9d94:	eb006ac1 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
    9d98:	e1a00004 	mov	r0, r4
    9d9c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9da0:	e8bd8030 	pop	{r4, r5, pc}
    9da4:	00028001 	.word	0x00028001

00009da8 <CDWHCIDevice::EnableGlobalInterrupts()>:
    9da8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9dac:	e24dd014 	sub	sp, sp, #20
    9db0:	e59f1030 	ldr	r1, [pc, #48]	; 9de8 <CDWHCIDevice::EnableGlobalInterrupts()+0x40>
    9db4:	e28d0004 	add	r0, sp, #4
    9db8:	eb000b98 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9dbc:	e28d0004 	add	r0, sp, #4
    9dc0:	eb000b9f 	bl	cc44 <CDWHCIRegister::Read()>
    9dc4:	e3a01001 	mov	r1, #1
    9dc8:	e28d0004 	add	r0, sp, #4
    9dcc:	eb000bde 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    9dd0:	e28d0004 	add	r0, sp, #4
    9dd4:	eb000ba1 	bl	cc60 <CDWHCIRegister::Write()>
    9dd8:	e28d0004 	add	r0, sp, #4
    9ddc:	eb000b97 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    9de0:	e28dd014 	add	sp, sp, #20
    9de4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9de8:	20980008 	.word	0x20980008

00009dec <CDWHCIDevice::EnableCommonInterrupts()>:
    9dec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9df0:	e24dd014 	sub	sp, sp, #20
    9df4:	e59f1024 	ldr	r1, [pc, #36]	; 9e20 <CDWHCIDevice::EnableCommonInterrupts()+0x34>
    9df8:	e28d0004 	add	r0, sp, #4
    9dfc:	eb000b87 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9e00:	e28d0004 	add	r0, sp, #4
    9e04:	eb000c0f 	bl	ce48 <CDWHCIRegister::SetAll()>
    9e08:	e28d0004 	add	r0, sp, #4
    9e0c:	eb000b93 	bl	cc60 <CDWHCIRegister::Write()>
    9e10:	e28d0004 	add	r0, sp, #4
    9e14:	eb000b89 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    9e18:	e28dd014 	add	sp, sp, #20
    9e1c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9e20:	20980014 	.word	0x20980014

00009e24 <CDWHCIDevice::EnableHostInterrupts()>:
    9e24:	e92d4010 	push	{r4, lr}
    9e28:	e1a04000 	mov	r4, r0
    9e2c:	e24dd010 	sub	sp, sp, #16
    9e30:	e3a02000 	mov	r2, #0
    9e34:	e59f1040 	ldr	r1, [pc, #64]	; 9e7c <CDWHCIDevice::EnableHostInterrupts()+0x58>
    9e38:	e28d0004 	add	r0, sp, #4
    9e3c:	eb000b7b 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9e40:	e28d0004 	add	r0, sp, #4
    9e44:	eb000b85 	bl	cc60 <CDWHCIRegister::Write()>
    9e48:	e1a00004 	mov	r0, r4
    9e4c:	ebffffe6 	bl	9dec <CDWHCIDevice::EnableCommonInterrupts()>
    9e50:	e28d0004 	add	r0, sp, #4
    9e54:	eb000b7a 	bl	cc44 <CDWHCIRegister::Read()>
    9e58:	e3a01402 	mov	r1, #33554432	; 0x2000000
    9e5c:	e28d0004 	add	r0, sp, #4
    9e60:	eb000bb9 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    9e64:	e28d0004 	add	r0, sp, #4
    9e68:	eb000b7c 	bl	cc60 <CDWHCIRegister::Write()>
    9e6c:	e28d0004 	add	r0, sp, #4
    9e70:	eb000b72 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    9e74:	e28dd010 	add	sp, sp, #16
    9e78:	e8bd8010 	pop	{r4, pc}
    9e7c:	20980018 	.word	0x20980018

00009e80 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    9e80:	e92d4030 	push	{r4, r5, lr}
    9e84:	e1a04000 	mov	r4, r0
    9e88:	e24dd014 	sub	sp, sp, #20
    9e8c:	e1a05001 	mov	r5, r1
    9e90:	e28d0004 	add	r0, sp, #4
    9e94:	e59f1054 	ldr	r1, [pc, #84]	; 9ef0 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x70>
    9e98:	eb000b60 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9e9c:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    9ea0:	e3500000 	cmp	r0, #0
    9ea4:	1a00000f 	bne	9ee8 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x68>
    9ea8:	e28d0004 	add	r0, sp, #4
    9eac:	eb000b64 	bl	cc44 <CDWHCIRegister::Read()>
    9eb0:	e3a01001 	mov	r1, #1
    9eb4:	e28d0004 	add	r0, sp, #4
    9eb8:	e1a01511 	lsl	r1, r1, r5
    9ebc:	eb000ba2 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    9ec0:	e28d0004 	add	r0, sp, #4
    9ec4:	eb000b65 	bl	cc60 <CDWHCIRegister::Write()>
    9ec8:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    9ecc:	e3530000 	cmp	r3, #0
    9ed0:	0a000000 	beq	9ed8 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x58>
    9ed4:	eb0087c3 	bl	2bde8 <LeaveCritical>
    9ed8:	e28d0004 	add	r0, sp, #4
    9edc:	eb000b57 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    9ee0:	e28dd014 	add	sp, sp, #20
    9ee4:	e8bd8030 	pop	{r4, r5, pc}
    9ee8:	eb008793 	bl	2bd3c <EnterCritical>
    9eec:	eaffffed 	b	9ea8 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x28>
    9ef0:	20980418 	.word	0x20980418

00009ef4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    9ef4:	e92d4030 	push	{r4, r5, lr}
    9ef8:	e1a04000 	mov	r4, r0
    9efc:	e24dd014 	sub	sp, sp, #20
    9f00:	e1a05001 	mov	r5, r1
    9f04:	e28d0004 	add	r0, sp, #4
    9f08:	e59f1054 	ldr	r1, [pc, #84]	; 9f64 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x70>
    9f0c:	eb000b43 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9f10:	e5940058 	ldr	r0, [r4, #88]	; 0x58
    9f14:	e3500000 	cmp	r0, #0
    9f18:	1a00000f 	bne	9f5c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x68>
    9f1c:	e28d0004 	add	r0, sp, #4
    9f20:	eb000b47 	bl	cc44 <CDWHCIRegister::Read()>
    9f24:	e3a01001 	mov	r1, #1
    9f28:	e28d0004 	add	r0, sp, #4
    9f2c:	e1e01511 	mvn	r1, r1, lsl r5
    9f30:	eb000b77 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    9f34:	e28d0004 	add	r0, sp, #4
    9f38:	eb000b48 	bl	cc60 <CDWHCIRegister::Write()>
    9f3c:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    9f40:	e3530000 	cmp	r3, #0
    9f44:	0a000000 	beq	9f4c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x58>
    9f48:	eb0087a6 	bl	2bde8 <LeaveCritical>
    9f4c:	e28d0004 	add	r0, sp, #4
    9f50:	eb000b3a 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    9f54:	e28dd014 	add	sp, sp, #20
    9f58:	e8bd8030 	pop	{r4, r5, pc}
    9f5c:	eb008776 	bl	2bd3c <EnterCritical>
    9f60:	eaffffed 	b	9f1c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x28>
    9f64:	20980418 	.word	0x20980418

00009f68 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    9f68:	e92d4070 	push	{r4, r5, r6, lr}
    9f6c:	e2514000 	subs	r4, r1, #0
    9f70:	e24dd048 	sub	sp, sp, #72	; 0x48
    9f74:	0a0000dd 	beq	a2f0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x388>
    9f78:	e1a06000 	mov	r6, r0
    9f7c:	e1a00004 	mov	r0, r4
    9f80:	eb000d17 	bl	d3e4 <CDWHCITransferStageData::GetChannelNumber() const>
    9f84:	e596300c 	ldr	r3, [r6, #12]
    9f88:	e1a05000 	mov	r5, r0
    9f8c:	e1500003 	cmp	r0, r3
    9f90:	2a0000da 	bcs	a300 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x398>
    9f94:	e3a01001 	mov	r1, #1
    9f98:	e1a00004 	mov	r0, r4
    9f9c:	eb000d0a 	bl	d3cc <CDWHCITransferStageData::SetSubState(unsigned int)>
    9fa0:	e59f1368 	ldr	r1, [pc, #872]	; a310 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3a8>
    9fa4:	e1a05285 	lsl	r5, r5, #5
    9fa8:	e0851001 	add	r1, r5, r1
    9fac:	e1a0000d 	mov	r0, sp
    9fb0:	eb000b1a 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9fb4:	e1a0000d 	mov	r0, sp
    9fb8:	eb000ba2 	bl	ce48 <CDWHCIRegister::SetAll()>
    9fbc:	e1a0000d 	mov	r0, sp
    9fc0:	eb000b26 	bl	cc60 <CDWHCIRegister::Write()>
    9fc4:	e59f1348 	ldr	r1, [pc, #840]	; a314 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3ac>
    9fc8:	e3a02000 	mov	r2, #0
    9fcc:	e0851001 	add	r1, r5, r1
    9fd0:	e28d000c 	add	r0, sp, #12
    9fd4:	eb000b15 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9fd8:	e1a00004 	mov	r0, r4
    9fdc:	eb000e39 	bl	d8c8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    9fe0:	e3c014ff 	bic	r1, r0, #-16777216	; 0xff000000
    9fe4:	e3c1173e 	bic	r1, r1, #16252928	; 0xf80000
    9fe8:	e28d000c 	add	r0, sp, #12
    9fec:	eb000b56 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    9ff0:	e1a00004 	mov	r0, r4
    9ff4:	eb000e35 	bl	d8d0 <CDWHCITransferStageData::GetPacketsToTransfer() const>
    9ff8:	e59f1318 	ldr	r1, [pc, #792]	; a318 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b0>
    9ffc:	e0011980 	and	r1, r1, r0, lsl #19
    a000:	e28d000c 	add	r0, sp, #12
    a004:	eb000b50 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a008:	e1a00004 	mov	r0, r4
    a00c:	eb000e00 	bl	d814 <CDWHCITransferStageData::GetPID() const>
    a010:	e1a01e80 	lsl	r1, r0, #29
    a014:	e28d000c 	add	r0, sp, #12
    a018:	eb000b4b 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a01c:	e28d000c 	add	r0, sp, #12
    a020:	eb000b0e 	bl	cc60 <CDWHCIRegister::Write()>
    a024:	e1a00004 	mov	r0, r4
    a028:	eb000e1a 	bl	d898 <CDWHCITransferStageData::GetDMAAddress() const>
    a02c:	e59f12e8 	ldr	r1, [pc, #744]	; a31c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b4>
    a030:	e3c02103 	bic	r2, r0, #-1073741824	; 0xc0000000
    a034:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
    a038:	e0851001 	add	r1, r5, r1
    a03c:	e28d0018 	add	r0, sp, #24
    a040:	eb000afa 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a044:	e28d0018 	add	r0, sp, #24
    a048:	eb000b04 	bl	cc60 <CDWHCIRegister::Write()>
    a04c:	e1a00004 	mov	r0, r4
    a050:	eb000e10 	bl	d898 <CDWHCITransferStageData::GetDMAAddress() const>
    a054:	e1a06000 	mov	r6, r0
    a058:	e1a00004 	mov	r0, r4
    a05c:	eb000e19 	bl	d8c8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a060:	e1a01000 	mov	r1, r0
    a064:	e1a00006 	mov	r0, r6
    a068:	eb008774 	bl	2be40 <CleanAndInvalidateDataCacheRange>
    a06c:	e59f12ac 	ldr	r1, [pc, #684]	; a320 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3b8>
    a070:	e3a02000 	mov	r2, #0
    a074:	e0851001 	add	r1, r5, r1
    a078:	e28d0024 	add	r0, sp, #36	; 0x24
    a07c:	eb000aeb 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a080:	e1a00004 	mov	r0, r4
    a084:	eb000e13 	bl	d8d8 <CDWHCITransferStageData::IsSplit() const>
    a088:	e3500000 	cmp	r0, #0
    a08c:	1a00007c 	bne	a284 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x31c>
    a090:	e28d0024 	add	r0, sp, #36	; 0x24
    a094:	eb000af1 	bl	cc60 <CDWHCIRegister::Write()>
    a098:	e59f1284 	ldr	r1, [pc, #644]	; a324 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3bc>
    a09c:	e28d0030 	add	r0, sp, #48	; 0x30
    a0a0:	e0851001 	add	r1, r5, r1
    a0a4:	eb000add 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a0a8:	e28d0030 	add	r0, sp, #48	; 0x30
    a0ac:	eb000ae4 	bl	cc44 <CDWHCIRegister::Read()>
    a0b0:	e59f1270 	ldr	r1, [pc, #624]	; a328 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c0>
    a0b4:	e28d0030 	add	r0, sp, #48	; 0x30
    a0b8:	eb000b15 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    a0bc:	e1a00004 	mov	r0, r4
    a0c0:	eb000dcf 	bl	d804 <CDWHCITransferStageData::GetMaxPacketSize() const>
    a0c4:	e1a01a80 	lsl	r1, r0, #21
    a0c8:	e1a01aa1 	lsr	r1, r1, #21
    a0cc:	e28d0030 	add	r0, sp, #48	; 0x30
    a0d0:	eb000b1d 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a0d4:	e28d0030 	add	r0, sp, #48	; 0x30
    a0d8:	e3e01603 	mvn	r1, #3145728	; 0x300000
    a0dc:	eb000b0c 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    a0e0:	e28d0030 	add	r0, sp, #48	; 0x30
    a0e4:	e3a01601 	mov	r1, #1048576	; 0x100000
    a0e8:	eb000b17 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a0ec:	e1a00004 	mov	r0, r4
    a0f0:	eb000de4 	bl	d888 <CDWHCITransferStageData::IsDirectionIn() const>
    a0f4:	e3500000 	cmp	r0, #0
    a0f8:	1a000052 	bne	a248 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2e0>
    a0fc:	e3e01902 	mvn	r1, #32768	; 0x8000
    a100:	e28d0030 	add	r0, sp, #48	; 0x30
    a104:	eb000b02 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    a108:	e1a00004 	mov	r0, r4
    a10c:	eb000dbe 	bl	d80c <CDWHCITransferStageData::GetSpeed() const>
    a110:	e3500000 	cmp	r0, #0
    a114:	1a000052 	bne	a264 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2fc>
    a118:	e3a01802 	mov	r1, #131072	; 0x20000
    a11c:	e28d0030 	add	r0, sp, #48	; 0x30
    a120:	eb000b09 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a124:	e3e0157f 	mvn	r1, #532676608	; 0x1fc00000
    a128:	e28d0030 	add	r0, sp, #48	; 0x30
    a12c:	eb000af8 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    a130:	e1a00004 	mov	r0, r4
    a134:	eb000d7d 	bl	d730 <CDWHCITransferStageData::GetDeviceAddress() const>
    a138:	e1a01b00 	lsl	r1, r0, #22
    a13c:	e28d0030 	add	r0, sp, #48	; 0x30
    a140:	eb000b01 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a144:	e3e01703 	mvn	r1, #786432	; 0xc0000
    a148:	e28d0030 	add	r0, sp, #48	; 0x30
    a14c:	eb000af0 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    a150:	e1a00004 	mov	r0, r4
    a154:	eb000d81 	bl	d760 <CDWHCITransferStageData::GetEndpointType() const>
    a158:	e1a01900 	lsl	r1, r0, #18
    a15c:	e28d0030 	add	r0, sp, #48	; 0x30
    a160:	eb000af9 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a164:	e3e01b1e 	mvn	r1, #30720	; 0x7800
    a168:	e28d0030 	add	r0, sp, #48	; 0x30
    a16c:	eb000ae8 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    a170:	e1a00004 	mov	r0, r4
    a174:	eb000d96 	bl	d7d4 <CDWHCITransferStageData::GetEndpointNumber() const>
    a178:	e1a01580 	lsl	r1, r0, #11
    a17c:	e28d0030 	add	r0, sp, #48	; 0x30
    a180:	eb000af1 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a184:	e1a00004 	mov	r0, r4
    a188:	eb000e4a 	bl	dab8 <CDWHCITransferStageData::GetFrameScheduler() const>
    a18c:	e2506000 	subs	r6, r0, #0
    a190:	0a00000b 	beq	a1c4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x25c>
    a194:	e5963000 	ldr	r3, [r6]
    a198:	e5933014 	ldr	r3, [r3, #20]
    a19c:	e12fff33 	blx	r3
    a1a0:	e5963000 	ldr	r3, [r6]
    a1a4:	e1a00006 	mov	r0, r6
    a1a8:	e5933018 	ldr	r3, [r3, #24]
    a1ac:	e12fff33 	blx	r3
    a1b0:	e3500000 	cmp	r0, #0
    a1b4:	1a00002e 	bne	a274 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x30c>
    a1b8:	e3e01202 	mvn	r1, #536870912	; 0x20000000
    a1bc:	e28d0030 	add	r0, sp, #48	; 0x30
    a1c0:	eb000ad3 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    a1c4:	e59f1160 	ldr	r1, [pc, #352]	; a32c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c4>
    a1c8:	e28d003c 	add	r0, sp, #60	; 0x3c
    a1cc:	e0851001 	add	r1, r5, r1
    a1d0:	eb000a92 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a1d4:	e1a00004 	mov	r0, r4
    a1d8:	eb000df9 	bl	d9c4 <CDWHCITransferStageData::GetStatusMask() const>
    a1dc:	e1a01000 	mov	r1, r0
    a1e0:	e28d003c 	add	r0, sp, #60	; 0x3c
    a1e4:	eb000ab7 	bl	ccc8 <CDWHCIRegister::Set(unsigned int)>
    a1e8:	e28d003c 	add	r0, sp, #60	; 0x3c
    a1ec:	eb000a9b 	bl	cc60 <CDWHCIRegister::Write()>
    a1f0:	e28d0030 	add	r0, sp, #48	; 0x30
    a1f4:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a1f8:	eb000ad3 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a1fc:	e3e01101 	mvn	r1, #1073741824	; 0x40000000
    a200:	e28d0030 	add	r0, sp, #48	; 0x30
    a204:	eb000ac2 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    a208:	e28d0030 	add	r0, sp, #48	; 0x30
    a20c:	eb000a93 	bl	cc60 <CDWHCIRegister::Write()>
    a210:	e28d003c 	add	r0, sp, #60	; 0x3c
    a214:	eb000a89 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    a218:	e28d0030 	add	r0, sp, #48	; 0x30
    a21c:	eb000a87 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    a220:	e28d0024 	add	r0, sp, #36	; 0x24
    a224:	eb000a85 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    a228:	e28d0018 	add	r0, sp, #24
    a22c:	eb000a83 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    a230:	e28d000c 	add	r0, sp, #12
    a234:	eb000a81 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    a238:	e1a0000d 	mov	r0, sp
    a23c:	eb000a7f 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    a240:	e28dd048 	add	sp, sp, #72	; 0x48
    a244:	e8bd8070 	pop	{r4, r5, r6, pc}
    a248:	e3a01902 	mov	r1, #32768	; 0x8000
    a24c:	e28d0030 	add	r0, sp, #48	; 0x30
    a250:	eb000abd 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a254:	e1a00004 	mov	r0, r4
    a258:	eb000d6b 	bl	d80c <CDWHCITransferStageData::GetSpeed() const>
    a25c:	e3500000 	cmp	r0, #0
    a260:	0affffac 	beq	a118 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1b0>
    a264:	e3e01802 	mvn	r1, #131072	; 0x20000
    a268:	e28d0030 	add	r0, sp, #48	; 0x30
    a26c:	eb000aa8 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    a270:	eaffffab 	b	a124 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1bc>
    a274:	e3a01202 	mov	r1, #536870912	; 0x20000000
    a278:	e28d0030 	add	r0, sp, #48	; 0x30
    a27c:	eb000ab2 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a280:	eaffffcf 	b	a1c4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x25c>
    a284:	e1a00004 	mov	r0, r4
    a288:	eb000db6 	bl	d968 <CDWHCITransferStageData::GetHubPortAddress() const>
    a28c:	e1a01000 	mov	r1, r0
    a290:	e28d0024 	add	r0, sp, #36	; 0x24
    a294:	eb000aac 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a298:	e1a00004 	mov	r0, r4
    a29c:	eb000d9c 	bl	d914 <CDWHCITransferStageData::GetHubAddress() const>
    a2a0:	e1a01380 	lsl	r1, r0, #7
    a2a4:	e28d0024 	add	r0, sp, #36	; 0x24
    a2a8:	eb000aa7 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a2ac:	e1a00004 	mov	r0, r4
    a2b0:	eb000dc1 	bl	d9bc <CDWHCITransferStageData::GetSplitPosition() const>
    a2b4:	e1a01700 	lsl	r1, r0, #14
    a2b8:	e28d0024 	add	r0, sp, #36	; 0x24
    a2bc:	eb000aa2 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a2c0:	e1a00004 	mov	r0, r4
    a2c4:	eb000d85 	bl	d8e0 <CDWHCITransferStageData::IsSplitComplete() const>
    a2c8:	e3500000 	cmp	r0, #0
    a2cc:	1a000003 	bne	a2e0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x378>
    a2d0:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a2d4:	e28d0024 	add	r0, sp, #36	; 0x24
    a2d8:	eb000a9b 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a2dc:	eaffff6b 	b	a090 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x128>
    a2e0:	e3a01801 	mov	r1, #65536	; 0x10000
    a2e4:	e28d0024 	add	r0, sp, #36	; 0x24
    a2e8:	eb000a97 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a2ec:	eafffff7 	b	a2d0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x368>
    a2f0:	e59f2038 	ldr	r2, [pc, #56]	; a330 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c8>
    a2f4:	e59f1038 	ldr	r1, [pc, #56]	; a334 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    a2f8:	e59f0038 	ldr	r0, [pc, #56]	; a338 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d0>
    a2fc:	eb00693f 	bl	24800 <assertion_failed>
    a300:	e3a02e35 	mov	r2, #848	; 0x350
    a304:	e59f1028 	ldr	r1, [pc, #40]	; a334 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3cc>
    a308:	e59f002c 	ldr	r0, [pc, #44]	; a33c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d4>
    a30c:	eb00693b 	bl	24800 <assertion_failed>
    a310:	20980508 	.word	0x20980508
    a314:	20980510 	.word	0x20980510
    a318:	1ff80000 	.word	0x1ff80000
    a31c:	20980514 	.word	0x20980514
    a320:	20980504 	.word	0x20980504
    a324:	20980500 	.word	0x20980500
    a328:	fffff800 	.word	0xfffff800
    a32c:	2098050c 	.word	0x2098050c
    a330:	0000034e 	.word	0x0000034e
    a334:	0003f158 	.word	0x0003f158
    a338:	0003f1c8 	.word	0x0003f1c8
    a33c:	0003f1d8 	.word	0x0003f1d8

0000a340 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    a340:	e92d4070 	push	{r4, r5, r6, lr}
    a344:	e2515000 	subs	r5, r1, #0
    a348:	e24dd018 	sub	sp, sp, #24
    a34c:	0a000032 	beq	a41c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xdc>
    a350:	e1a06000 	mov	r6, r0
    a354:	e1a00005 	mov	r0, r5
    a358:	eb000c21 	bl	d3e4 <CDWHCITransferStageData::GetChannelNumber() const>
    a35c:	e596300c 	ldr	r3, [r6, #12]
    a360:	e1500003 	cmp	r0, r3
    a364:	2a000030 	bcs	a42c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xec>
    a368:	e59f10cc 	ldr	r1, [pc, #204]	; a43c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xfc>
    a36c:	e0801001 	add	r1, r0, r1
    a370:	e1a04281 	lsl	r4, r1, #5
    a374:	e1a01004 	mov	r1, r4
    a378:	e1a0000d 	mov	r0, sp
    a37c:	eb000a27 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a380:	e1a0000d 	mov	r0, sp
    a384:	eb000a2e 	bl	cc44 <CDWHCIRegister::Read()>
    a388:	e1a0000d 	mov	r0, sp
    a38c:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
    a390:	eb000a50 	bl	ccd8 <CDWHCIRegister::IsSet(unsigned int) const>
    a394:	e3500000 	cmp	r0, #0
    a398:	1a000006 	bne	a3b8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x78>
    a39c:	e1a01005 	mov	r1, r5
    a3a0:	e1a00006 	mov	r0, r6
    a3a4:	ebfffeef 	bl	9f68 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    a3a8:	e1a0000d 	mov	r0, sp
    a3ac:	eb000a23 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    a3b0:	e28dd018 	add	sp, sp, #24
    a3b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a3b8:	e1a00005 	mov	r0, r5
    a3bc:	e3a01000 	mov	r1, #0
    a3c0:	eb000c01 	bl	d3cc <CDWHCITransferStageData::SetSubState(unsigned int)>
    a3c4:	e1a0000d 	mov	r0, sp
    a3c8:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
    a3cc:	eb000a50 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    a3d0:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    a3d4:	e1a0000d 	mov	r0, sp
    a3d8:	eb000a5b 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    a3dc:	e1a0000d 	mov	r0, sp
    a3e0:	eb000a1e 	bl	cc60 <CDWHCIRegister::Write()>
    a3e4:	e284100c 	add	r1, r4, #12
    a3e8:	e28d000c 	add	r0, sp, #12
    a3ec:	eb000a0b 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a3f0:	e3a01002 	mov	r1, #2
    a3f4:	e28d000c 	add	r0, sp, #12
    a3f8:	eb000a32 	bl	ccc8 <CDWHCIRegister::Set(unsigned int)>
    a3fc:	e28d000c 	add	r0, sp, #12
    a400:	eb000a16 	bl	cc60 <CDWHCIRegister::Write()>
    a404:	e28d000c 	add	r0, sp, #12
    a408:	eb000a0c 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    a40c:	e1a0000d 	mov	r0, sp
    a410:	eb000a0a 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    a414:	e28dd018 	add	sp, sp, #24
    a418:	e8bd8070 	pop	{r4, r5, r6, pc}
    a41c:	e59f201c 	ldr	r2, [pc, #28]	; a440 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x100>
    a420:	e59f101c 	ldr	r1, [pc, #28]	; a444 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    a424:	e59f001c 	ldr	r0, [pc, #28]	; a448 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x108>
    a428:	eb0068f4 	bl	24800 <assertion_failed>
    a42c:	e59f2018 	ldr	r2, [pc, #24]	; a44c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x10c>
    a430:	e59f100c 	ldr	r1, [pc, #12]	; a444 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x104>
    a434:	e59f0014 	ldr	r0, [pc, #20]	; a450 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x110>
    a438:	eb0068f0 	bl	24800 <assertion_failed>
    a43c:	0104c028 	.word	0x0104c028
    a440:	00000333 	.word	0x00000333
    a444:	0003f158 	.word	0x0003f158
    a448:	0003f1c8 	.word	0x0003f1c8
    a44c:	00000335 	.word	0x00000335
    a450:	0003f1d8 	.word	0x0003f1d8

0000a454 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>:
    a454:	e92d4070 	push	{r4, r5, r6, lr}
    a458:	e3a05000 	mov	r5, #0
    a45c:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    a460:	e1510005 	cmp	r1, r5
    a464:	0a00001d 	beq	a4e0 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x8c>
    a468:	e1a06000 	mov	r6, r0
    a46c:	e1a00001 	mov	r0, r1
    a470:	e1a04001 	mov	r4, r1
    a474:	eb000bd2 	bl	d3c4 <CDWHCITransferStageData::GetState() const>
    a478:	e3500003 	cmp	r0, #3
    a47c:	1a00001b 	bne	a4f0 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x9c>
    a480:	e1a00004 	mov	r0, r4
    a484:	eb000d13 	bl	d8d8 <CDWHCITransferStageData::IsSplit() const>
    a488:	e2501000 	subs	r1, r0, #0
    a48c:	1a000007 	bne	a4b0 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x5c>
    a490:	e1a00004 	mov	r0, r4
    a494:	eb000bc8 	bl	d3bc <CDWHCITransferStageData::SetState(unsigned int)>
    a498:	e1a01004 	mov	r1, r4
    a49c:	e1a00006 	mov	r0, r6
    a4a0:	ebffffa6 	bl	a340 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a4a4:	e3a03000 	mov	r3, #0
    a4a8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a4ac:	e8bd8070 	pop	{r4, r5, r6, pc}
    a4b0:	e1a00004 	mov	r0, r4
    a4b4:	e3a01001 	mov	r1, #1
    a4b8:	eb000bbf 	bl	d3bc <CDWHCITransferStageData::SetState(unsigned int)>
    a4bc:	e1a01005 	mov	r1, r5
    a4c0:	e1a00004 	mov	r0, r4
    a4c4:	eb000bb0 	bl	d38c <CDWHCITransferStageData::SetSplitComplete(bool)>
    a4c8:	e1a00004 	mov	r0, r4
    a4cc:	eb000d79 	bl	dab8 <CDWHCITransferStageData::GetFrameScheduler() const>
    a4d0:	e5903000 	ldr	r3, [r0]
    a4d4:	e5933008 	ldr	r3, [r3, #8]
    a4d8:	e12fff33 	blx	r3
    a4dc:	eaffffed 	b	a498 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0x44>
    a4e0:	e59f2018 	ldr	r2, [pc, #24]	; a500 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xac>
    a4e4:	e59f1018 	ldr	r1, [pc, #24]	; a504 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    a4e8:	e59f0018 	ldr	r0, [pc, #24]	; a508 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb4>
    a4ec:	eb0068c3 	bl	24800 <assertion_failed>
    a4f0:	e59f2014 	ldr	r2, [pc, #20]	; a50c <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb8>
    a4f4:	e59f1008 	ldr	r1, [pc, #8]	; a504 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xb0>
    a4f8:	e59f0010 	ldr	r0, [pc, #16]	; a510 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)+0xbc>
    a4fc:	eb0068bf 	bl	24800 <assertion_failed>
    a500:	0000053d 	.word	0x0000053d
    a504:	0003f158 	.word	0x0003f158
    a508:	0003f1c8 	.word	0x0003f1c8
    a50c:	0000053e 	.word	0x0000053e
    a510:	0003f1f0 	.word	0x0003f1f0

0000a514 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)>:
    a514:	e2520000 	subs	r0, r2, #0
    a518:	e92d4010 	push	{r4, lr}
    a51c:	0a000003 	beq	a530 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x1c>
    a520:	e3510000 	cmp	r1, #0
    a524:	0a000005 	beq	a540 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
    a528:	e8bd4010 	pop	{r4, lr}
    a52c:	eaffffc8 	b	a454 <CDWHCIDevice::TimerHandler(CDWHCITransferStageData*)>
    a530:	e59f2018 	ldr	r2, [pc, #24]	; a550 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
    a534:	e59f1018 	ldr	r1, [pc, #24]	; a554 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x40>
    a538:	e59f0018 	ldr	r0, [pc, #24]	; a558 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x44>
    a53c:	eb0068af 	bl	24800 <assertion_failed>
    a540:	e59f2014 	ldr	r2, [pc, #20]	; a55c <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x48>
    a544:	e59f1008 	ldr	r1, [pc, #8]	; a554 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x40>
    a548:	e59f0010 	ldr	r0, [pc, #16]	; a560 <CDWHCIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
    a54c:	eb0068ab 	bl	24800 <assertion_failed>
    a550:	00000554 	.word	0x00000554
    a554:	0003f158 	.word	0x0003f158
    a558:	0003f168 	.word	0x0003f168
    a55c:	00000557 	.word	0x00000557
    a560:	0003f224 	.word	0x0003f224

0000a564 <CDWHCIDevice::AllocateChannel()>:
    a564:	e92d4010 	push	{r4, lr}
    a568:	e590c014 	ldr	ip, [r0, #20]
    a56c:	e24dd008 	sub	sp, sp, #8
    a570:	e35c0000 	cmp	ip, #0
    a574:	e1a04000 	mov	r4, r0
    a578:	1a000014 	bne	a5d0 <CDWHCIDevice::AllocateChannel()+0x6c>
    a57c:	e590100c 	ldr	r1, [r0, #12]
    a580:	e3510000 	cmp	r1, #0
    a584:	0a00000e 	beq	a5c4 <CDWHCIDevice::AllocateChannel()+0x60>
    a588:	e5903010 	ldr	r3, [r0, #16]
    a58c:	e2130001 	ands	r0, r3, #1
    a590:	0a000025 	beq	a62c <CDWHCIDevice::AllocateChannel()+0xc8>
    a594:	e3a00000 	mov	r0, #0
    a598:	e3a03001 	mov	r3, #1
    a59c:	ea000002 	b	a5ac <CDWHCIDevice::AllocateChannel()+0x48>
    a5a0:	e5942010 	ldr	r2, [r4, #16]
    a5a4:	e1120003 	tst	r2, r3
    a5a8:	0a000013 	beq	a5fc <CDWHCIDevice::AllocateChannel()+0x98>
    a5ac:	e2800001 	add	r0, r0, #1
    a5b0:	e1500001 	cmp	r0, r1
    a5b4:	e1a03083 	lsl	r3, r3, #1
    a5b8:	3afffff8 	bcc	a5a0 <CDWHCIDevice::AllocateChannel()+0x3c>
    a5bc:	e35c0000 	cmp	ip, #0
    a5c0:	1a000017 	bne	a624 <CDWHCIDevice::AllocateChannel()+0xc0>
    a5c4:	e3a00010 	mov	r0, #16
    a5c8:	e28dd008 	add	sp, sp, #8
    a5cc:	e8bd8010 	pop	{r4, pc}
    a5d0:	e1a0000c 	mov	r0, ip
    a5d4:	eb0085d8 	bl	2bd3c <EnterCritical>
    a5d8:	e594100c 	ldr	r1, [r4, #12]
    a5dc:	e3510000 	cmp	r1, #0
    a5e0:	0594c014 	ldreq	ip, [r4, #20]
    a5e4:	0afffff4 	beq	a5bc <CDWHCIDevice::AllocateChannel()+0x58>
    a5e8:	e5943010 	ldr	r3, [r4, #16]
    a5ec:	e594c014 	ldr	ip, [r4, #20]
    a5f0:	e2130001 	ands	r0, r3, #1
    a5f4:	1affffe6 	bne	a594 <CDWHCIDevice::AllocateChannel()+0x30>
    a5f8:	e3a03001 	mov	r3, #1
    a5fc:	e5942010 	ldr	r2, [r4, #16]
    a600:	e35c0000 	cmp	ip, #0
    a604:	e1823003 	orr	r3, r2, r3
    a608:	e5843010 	str	r3, [r4, #16]
    a60c:	0affffed 	beq	a5c8 <CDWHCIDevice::AllocateChannel()+0x64>
    a610:	e58d0004 	str	r0, [sp, #4]
    a614:	eb0085f3 	bl	2bde8 <LeaveCritical>
    a618:	e59d0004 	ldr	r0, [sp, #4]
    a61c:	e28dd008 	add	sp, sp, #8
    a620:	e8bd8010 	pop	{r4, pc}
    a624:	eb0085ef 	bl	2bde8 <LeaveCritical>
    a628:	eaffffe5 	b	a5c4 <CDWHCIDevice::AllocateChannel()+0x60>
    a62c:	e5943010 	ldr	r3, [r4, #16]
    a630:	e3833001 	orr	r3, r3, #1
    a634:	e5843010 	str	r3, [r4, #16]
    a638:	eaffffe2 	b	a5c8 <CDWHCIDevice::AllocateChannel()+0x64>

0000a63c <CDWHCIDevice::FreeChannel(unsigned int)>:
    a63c:	e590300c 	ldr	r3, [r0, #12]
    a640:	e92d4070 	push	{r4, r5, r6, lr}
    a644:	e1530001 	cmp	r3, r1
    a648:	9a000012 	bls	a698 <CDWHCIDevice::FreeChannel(unsigned int)+0x5c>
    a64c:	e3a05001 	mov	r5, #1
    a650:	e1a04000 	mov	r4, r0
    a654:	e5900014 	ldr	r0, [r0, #20]
    a658:	e1a05115 	lsl	r5, r5, r1
    a65c:	e3500000 	cmp	r0, #0
    a660:	1a00000a 	bne	a690 <CDWHCIDevice::FreeChannel(unsigned int)+0x54>
    a664:	e5943010 	ldr	r3, [r4, #16]
    a668:	e1150003 	tst	r5, r3
    a66c:	0a00000d 	beq	a6a8 <CDWHCIDevice::FreeChannel(unsigned int)+0x6c>
    a670:	e5941010 	ldr	r1, [r4, #16]
    a674:	e5943014 	ldr	r3, [r4, #20]
    a678:	e1c15005 	bic	r5, r1, r5
    a67c:	e3530000 	cmp	r3, #0
    a680:	e5845010 	str	r5, [r4, #16]
    a684:	08bd8070 	popeq	{r4, r5, r6, pc}
    a688:	e8bd4070 	pop	{r4, r5, r6, lr}
    a68c:	ea0085d5 	b	2bde8 <LeaveCritical>
    a690:	eb0085a9 	bl	2bd3c <EnterCritical>
    a694:	eafffff2 	b	a664 <CDWHCIDevice::FreeChannel(unsigned int)+0x28>
    a698:	e59f2018 	ldr	r2, [pc, #24]	; a6b8 <CDWHCIDevice::FreeChannel(unsigned int)+0x7c>
    a69c:	e59f1018 	ldr	r1, [pc, #24]	; a6bc <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    a6a0:	e59f0018 	ldr	r0, [pc, #24]	; a6c0 <CDWHCIDevice::FreeChannel(unsigned int)+0x84>
    a6a4:	eb006855 	bl	24800 <assertion_failed>
    a6a8:	e59f2014 	ldr	r2, [pc, #20]	; a6c4 <CDWHCIDevice::FreeChannel(unsigned int)+0x88>
    a6ac:	e59f1008 	ldr	r1, [pc, #8]	; a6bc <CDWHCIDevice::FreeChannel(unsigned int)+0x80>
    a6b0:	e59f0010 	ldr	r0, [pc, #16]	; a6c8 <CDWHCIDevice::FreeChannel(unsigned int)+0x8c>
    a6b4:	eb006851 	bl	24800 <assertion_failed>
    a6b8:	00000578 	.word	0x00000578
    a6bc:	0003f158 	.word	0x0003f158
    a6c0:	0003f1d8 	.word	0x0003f1d8
    a6c4:	0000057d 	.word	0x0000057d
    a6c8:	0003f230 	.word	0x0003f230

0000a6cc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    a6cc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a6d0:	e2516000 	subs	r6, r1, #0
    a6d4:	e24dd00c 	sub	sp, sp, #12
    a6d8:	0a00003a 	beq	a7c8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xfc>
    a6dc:	e1a05000 	mov	r5, r0
    a6e0:	e1a09003 	mov	r9, r3
    a6e4:	e1a08002 	mov	r8, r2
    a6e8:	ebffff9d 	bl	a564 <CDWHCIDevice::AllocateChannel()>
    a6ec:	e595300c 	ldr	r3, [r5, #12]
    a6f0:	e1a04000 	mov	r4, r0
    a6f4:	e1500003 	cmp	r0, r3
    a6f8:	23a06000 	movcs	r6, #0
    a6fc:	3a000002 	bcc	a70c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x40>
    a700:	e1a00006 	mov	r0, r6
    a704:	e28dd00c 	add	sp, sp, #12
    a708:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a70c:	e3a00054 	mov	r0, #84	; 0x54
    a710:	eb000cea 	bl	dac0 <CDWHCITransferStageData::operator new(unsigned int)>
    a714:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    a718:	e58d9000 	str	r9, [sp]
    a71c:	e58d3004 	str	r3, [sp, #4]
    a720:	e1a02006 	mov	r2, r6
    a724:	e1a03008 	mov	r3, r8
    a728:	e1a01004 	mov	r1, r4
    a72c:	e0858104 	add	r8, r5, r4, lsl #2
    a730:	e1a07000 	mov	r7, r0
    a734:	eb000b3d 	bl	d430 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    a738:	e5989018 	ldr	r9, [r8, #24]
    a73c:	e3590000 	cmp	r9, #0
    a740:	1a000030 	bne	a808 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x13c>
    a744:	e1a01004 	mov	r1, r4
    a748:	e1a00005 	mov	r0, r5
    a74c:	e5887018 	str	r7, [r8, #24]
    a750:	ebfffdca 	bl	9e80 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    a754:	e1a00007 	mov	r0, r7
    a758:	eb000c5e 	bl	d8d8 <CDWHCITransferStageData::IsSplit() const>
    a75c:	e2501000 	subs	r1, r0, #0
    a760:	e1a00007 	mov	r0, r7
    a764:	1a000007 	bne	a788 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xbc>
    a768:	eb000b13 	bl	d3bc <CDWHCITransferStageData::SetState(unsigned int)>
    a76c:	e3a06001 	mov	r6, #1
    a770:	e1a00005 	mov	r0, r5
    a774:	e1a01007 	mov	r1, r7
    a778:	ebfffef0 	bl	a340 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    a77c:	e1a00006 	mov	r0, r6
    a780:	e28dd00c 	add	sp, sp, #12
    a784:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a788:	eb000b13 	bl	d3dc <CDWHCITransferStageData::BeginSplitCycle()>
    a78c:	e2506000 	subs	r6, r0, #0
    a790:	1a000010 	bne	a7d8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    a794:	e1a01004 	mov	r1, r4
    a798:	e1a00005 	mov	r0, r5
    a79c:	ebfffdd4 	bl	9ef4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a7a0:	e1a00007 	mov	r0, r7
    a7a4:	eb000a7e 	bl	d1a4 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    a7a8:	e1a00007 	mov	r0, r7
    a7ac:	e3a01054 	mov	r1, #84	; 0x54
    a7b0:	eb000cd8 	bl	db18 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    a7b4:	e5886018 	str	r6, [r8, #24]
    a7b8:	e1a01004 	mov	r1, r4
    a7bc:	e1a00005 	mov	r0, r5
    a7c0:	ebffff9d 	bl	a63c <CDWHCIDevice::FreeChannel(unsigned int)>
    a7c4:	eaffffcd 	b	a700 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x34>
    a7c8:	e59f2048 	ldr	r2, [pc, #72]	; a818 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x14c>
    a7cc:	e59f1048 	ldr	r1, [pc, #72]	; a81c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x150>
    a7d0:	e59f0048 	ldr	r0, [pc, #72]	; a820 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x154>
    a7d4:	eb006809 	bl	24800 <assertion_failed>
    a7d8:	e1a00007 	mov	r0, r7
    a7dc:	e3a01001 	mov	r1, #1
    a7e0:	eb000af5 	bl	d3bc <CDWHCITransferStageData::SetState(unsigned int)>
    a7e4:	e1a01009 	mov	r1, r9
    a7e8:	e1a00007 	mov	r0, r7
    a7ec:	eb000ae6 	bl	d38c <CDWHCITransferStageData::SetSplitComplete(bool)>
    a7f0:	e1a00007 	mov	r0, r7
    a7f4:	eb000caf 	bl	dab8 <CDWHCITransferStageData::GetFrameScheduler() const>
    a7f8:	e5903000 	ldr	r3, [r0]
    a7fc:	e5933008 	ldr	r3, [r3, #8]
    a800:	e12fff33 	blx	r3
    a804:	eaffffd8 	b	a76c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xa0>
    a808:	e59f2014 	ldr	r2, [pc, #20]	; a824 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x158>
    a80c:	e59f1008 	ldr	r1, [pc, #8]	; a81c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x150>
    a810:	e59f0010 	ldr	r0, [pc, #16]	; a828 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x15c>
    a814:	eb0067f9 	bl	24800 <assertion_failed>
    a818:	000002b6 	.word	0x000002b6
    a81c:	0003f158 	.word	0x0003f158
    a820:	0003f254 	.word	0x0003f254
    a824:	000002c7 	.word	0x000002c7
    a828:	0003f260 	.word	0x0003f260

0000a82c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    a82c:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    a830:	e21330ff 	ands	r3, r3, #255	; 0xff
    a834:	1a000020 	bne	a8bc <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x90>
    a838:	e92d4070 	push	{r4, r5, r6, lr}
    a83c:	e1a06002 	mov	r6, r2
    a840:	e24dd008 	sub	sp, sp, #8
    a844:	e1a04001 	mov	r4, r1
    a848:	e1a05000 	mov	r5, r0
    a84c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    a850:	e3510000 	cmp	r1, #0
    a854:	0a000027 	beq	a8f8 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xcc>
    a858:	e1a00001 	mov	r0, r1
    a85c:	eb002719 	bl	144c8 <CUSBRequest::GetEndpoint() const>
    a860:	eb0012c3 	bl	f374 <CUSBEndpoint::GetType() const>
    a864:	e3500001 	cmp	r0, #1
    a868:	1a000015 	bne	a8c4 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x98>
    a86c:	e1a00004 	mov	r0, r4
    a870:	eb002754 	bl	145c8 <CUSBRequest::GetBufLen() const>
    a874:	e3500000 	cmp	r0, #0
    a878:	0a00001a 	beq	a8e8 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xbc>
    a87c:	e3a01000 	mov	r1, #0
    a880:	e1a00004 	mov	r0, r4
    a884:	eb00271a 	bl	144f4 <CUSBRequest::SetStatus(int)>
    a888:	e1a00004 	mov	r0, r4
    a88c:	eb00270d 	bl	144c8 <CUSBRequest::GetEndpoint() const>
    a890:	eb0012b9 	bl	f37c <CUSBEndpoint::IsDirectionIn() const>
    a894:	e58d6000 	str	r6, [sp]
    a898:	e1a02000 	mov	r2, r0
    a89c:	e1a01004 	mov	r1, r4
    a8a0:	e1a00005 	mov	r0, r5
    a8a4:	e3a03000 	mov	r3, #0
    a8a8:	ebffff87 	bl	a6cc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    a8ac:	e3a03000 	mov	r3, #0
    a8b0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    a8b4:	e28dd008 	add	sp, sp, #8
    a8b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    a8bc:	e3a00000 	mov	r0, #0
    a8c0:	e12fff1e 	bx	lr
    a8c4:	e1a00004 	mov	r0, r4
    a8c8:	eb0026fe 	bl	144c8 <CUSBRequest::GetEndpoint() const>
    a8cc:	eb0012a8 	bl	f374 <CUSBEndpoint::GetType() const>
    a8d0:	e3500002 	cmp	r0, #2
    a8d4:	0affffe4 	beq	a86c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x40>
    a8d8:	e59f2028 	ldr	r2, [pc, #40]	; a908 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xdc>
    a8dc:	e59f1028 	ldr	r1, [pc, #40]	; a90c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    a8e0:	e59f0028 	ldr	r0, [pc, #40]	; a910 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe4>
    a8e4:	eb0067c5 	bl	24800 <assertion_failed>
    a8e8:	e59f2024 	ldr	r2, [pc, #36]	; a914 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe8>
    a8ec:	e59f1018 	ldr	r1, [pc, #24]	; a90c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    a8f0:	e59f0020 	ldr	r0, [pc, #32]	; a918 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xec>
    a8f4:	eb0067c1 	bl	24800 <assertion_failed>
    a8f8:	e3a02f45 	mov	r2, #276	; 0x114
    a8fc:	e59f1008 	ldr	r1, [pc, #8]	; a90c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xe0>
    a900:	e59f0014 	ldr	r0, [pc, #20]	; a91c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xf0>
    a904:	eb0067bd 	bl	24800 <assertion_failed>
    a908:	00000116 	.word	0x00000116
    a90c:	0003f158 	.word	0x0003f158
    a910:	0003f27c 	.word	0x0003f27c
    a914:	00000117 	.word	0x00000117
    a918:	0003f2f0 	.word	0x0003f2f0
    a91c:	0003f254 	.word	0x0003f254

0000a920 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>:
    a920:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a924:	e0807101 	add	r7, r0, r1, lsl #2
    a928:	e5974018 	ldr	r4, [r7, #24]
    a92c:	e24dd020 	sub	sp, sp, #32
    a930:	e3540000 	cmp	r4, #0
    a934:	0a00008d 	beq	ab70 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x250>
    a938:	e1a05000 	mov	r5, r0
    a93c:	e1a00004 	mov	r0, r4
    a940:	e1a06001 	mov	r6, r1
    a944:	eb000c50 	bl	da8c <CDWHCITransferStageData::GetURB() const>
    a948:	e2509000 	subs	r9, r0, #0
    a94c:	0a00008b 	beq	ab80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x260>
    a950:	e1a00004 	mov	r0, r4
    a954:	eb000a9e 	bl	d3d4 <CDWHCITransferStageData::GetSubState() const>
    a958:	e3500000 	cmp	r0, #0
    a95c:	0a00004a 	beq	aa8c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x16c>
    a960:	e3500001 	cmp	r0, #1
    a964:	1a000044 	bne	aa7c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x15c>
    a968:	e1a00004 	mov	r0, r4
    a96c:	eb000bc9 	bl	d898 <CDWHCITransferStageData::GetDMAAddress() const>
    a970:	e1a08000 	mov	r8, r0
    a974:	e1a00004 	mov	r0, r4
    a978:	eb000bd2 	bl	d8c8 <CDWHCITransferStageData::GetBytesToTransfer() const>
    a97c:	e1a01000 	mov	r1, r0
    a980:	e1a00008 	mov	r0, r8
    a984:	eb00852d 	bl	2be40 <CleanAndInvalidateDataCacheRange>
    a988:	e59f148c 	ldr	r1, [pc, #1164]	; ae1c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4fc>
    a98c:	e1a08286 	lsl	r8, r6, #5
    a990:	e0881001 	add	r1, r8, r1
    a994:	e28d0008 	add	r0, sp, #8
    a998:	eb0008a0 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a99c:	e28d0008 	add	r0, sp, #8
    a9a0:	eb0008a7 	bl	cc44 <CDWHCIRegister::Read()>
    a9a4:	e59f1474 	ldr	r1, [pc, #1140]	; ae20 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x500>
    a9a8:	e28d0014 	add	r0, sp, #20
    a9ac:	e0881001 	add	r1, r8, r1
    a9b0:	eb00089a 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a9b4:	e28d0014 	add	r0, sp, #20
    a9b8:	eb0008a1 	bl	cc44 <CDWHCIRegister::Read()>
    a9bc:	e3500002 	cmp	r0, #2
    a9c0:	0a000072 	beq	ab90 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x270>
    a9c4:	e1a00004 	mov	r0, r4
    a9c8:	eb000a87 	bl	d3ec <CDWHCITransferStageData::IsPeriodic() const>
    a9cc:	e3500000 	cmp	r0, #0
    a9d0:	1a0000aa 	bne	ac80 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x360>
    a9d4:	e28d0014 	add	r0, sp, #20
    a9d8:	eb000899 	bl	cc44 <CDWHCIRegister::Read()>
    a9dc:	e1a0a000 	mov	sl, r0
    a9e0:	e28d0008 	add	r0, sp, #8
    a9e4:	eb0008ab 	bl	cc98 <CDWHCIRegister::Get() const>
    a9e8:	e1a08000 	mov	r8, r0
    a9ec:	e28d0008 	add	r0, sp, #8
    a9f0:	eb0008a8 	bl	cc98 <CDWHCIRegister::Get() const>
    a9f4:	e59f2428 	ldr	r2, [pc, #1064]	; ae24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x504>
    a9f8:	e3c034ff 	bic	r3, r0, #-16777216	; 0xff000000
    a9fc:	e00229a8 	and	r2, r2, r8, lsr #19
    aa00:	e3c3373e 	bic	r3, r3, #16252928	; 0xf80000
    aa04:	e1a0100a 	mov	r1, sl
    aa08:	e1a00004 	mov	r0, r4
    aa0c:	eb0009f7 	bl	d1f0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    aa10:	e28d0014 	add	r0, sp, #20
    aa14:	eb000889 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    aa18:	e28d0008 	add	r0, sp, #8
    aa1c:	eb000887 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    aa20:	e1a00004 	mov	r0, r4
    aa24:	eb000a66 	bl	d3c4 <CDWHCITransferStageData::GetState() const>
    aa28:	e3500001 	cmp	r0, #1
    aa2c:	e1a08000 	mov	r8, r0
    aa30:	0a00001a 	beq	aaa0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x180>
    aa34:	3a000061 	bcc	abc0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2a0>
    aa38:	e3500002 	cmp	r0, #2
    aa3c:	1a00005b 	bne	abb0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x290>
    aa40:	e1a00004 	mov	r0, r4
    aa44:	eb000beb 	bl	d9f8 <CDWHCITransferStageData::GetTransactionStatus() const>
    aa48:	e59f33d8 	ldr	r3, [pc, #984]	; ae28 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x508>
    aa4c:	e1a08000 	mov	r8, r0
    aa50:	e0033000 	and	r3, r3, r0
    aa54:	e3530000 	cmp	r3, #0
    aa58:	0a000081 	beq	ac64 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x344>
    aa5c:	eb00705a 	bl	26bcc <CLogger::Get()>
    aa60:	e59f13c4 	ldr	r1, [pc, #964]	; ae2c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x50c>
    aa64:	e58d8000 	str	r8, [sp]
    aa68:	e59f33c0 	ldr	r3, [pc, #960]	; ae30 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x510>
    aa6c:	e3a02001 	mov	r2, #1
    aa70:	eb006f92 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    aa74:	e3a01000 	mov	r1, #0
    aa78:	ea00005e 	b	abf8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2d8>
    aa7c:	e59f23b0 	ldr	r2, [pc, #944]	; ae34 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x514>
    aa80:	e59f13b0 	ldr	r1, [pc, #944]	; ae38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    aa84:	e59f03b0 	ldr	r0, [pc, #944]	; ae3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x51c>
    aa88:	eb00675c 	bl	24800 <assertion_failed>
    aa8c:	e1a01004 	mov	r1, r4
    aa90:	e1a00005 	mov	r0, r5
    aa94:	ebfffd33 	bl	9f68 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    aa98:	e28dd020 	add	sp, sp, #32
    aa9c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    aaa0:	e1a00004 	mov	r0, r4
    aaa4:	eb000bd3 	bl	d9f8 <CDWHCITransferStageData::GetTransactionStatus() const>
    aaa8:	e59f3390 	ldr	r3, [pc, #912]	; ae40 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x520>
    aaac:	e1a0a000 	mov	sl, r0
    aab0:	e0033000 	and	r3, r3, r0
    aab4:	e3530000 	cmp	r3, #0
    aab8:	1a000061 	bne	ac44 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x324>
    aabc:	e1a00004 	mov	r0, r4
    aac0:	eb000bfc 	bl	dab8 <CDWHCITransferStageData::GetFrameScheduler() const>
    aac4:	e5903000 	ldr	r3, [r0]
    aac8:	e1a0100a 	mov	r1, sl
    aacc:	e5933010 	ldr	r3, [r3, #16]
    aad0:	e12fff33 	blx	r3
    aad4:	e3a01002 	mov	r1, #2
    aad8:	e1a00004 	mov	r0, r4
    aadc:	eb000a36 	bl	d3bc <CDWHCITransferStageData::SetState(unsigned int)>
    aae0:	e1a01008 	mov	r1, r8
    aae4:	e1a00004 	mov	r0, r4
    aae8:	eb000a27 	bl	d38c <CDWHCITransferStageData::SetSplitComplete(bool)>
    aaec:	e1a00004 	mov	r0, r4
    aaf0:	eb000bf0 	bl	dab8 <CDWHCITransferStageData::GetFrameScheduler() const>
    aaf4:	e5903000 	ldr	r3, [r0]
    aaf8:	e593300c 	ldr	r3, [r3, #12]
    aafc:	e12fff33 	blx	r3
    ab00:	e3500000 	cmp	r0, #0
    ab04:	1a000086 	bne	ad24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x404>
    ab08:	e1a00004 	mov	r0, r4
    ab0c:	eb000bc5 	bl	da28 <CDWHCITransferStageData::IsStageComplete() const>
    ab10:	e2508000 	subs	r8, r0, #0
    ab14:	1a00006c 	bne	accc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3ac>
    ab18:	e1a00004 	mov	r0, r4
    ab1c:	eb000a2e 	bl	d3dc <CDWHCITransferStageData::BeginSplitCycle()>
    ab20:	e250a000 	subs	sl, r0, #0
    ab24:	1a00009b 	bne	ad98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x478>
    ab28:	e1a0100a 	mov	r1, sl
    ab2c:	e1a00009 	mov	r0, r9
    ab30:	eb00266f 	bl	144f4 <CUSBRequest::SetStatus(int)>
    ab34:	e1a01006 	mov	r1, r6
    ab38:	e1a00005 	mov	r0, r5
    ab3c:	ebfffcec 	bl	9ef4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ab40:	e1a00004 	mov	r0, r4
    ab44:	eb000996 	bl	d1a4 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    ab48:	e1a00004 	mov	r0, r4
    ab4c:	e3a01054 	mov	r1, #84	; 0x54
    ab50:	eb000bf0 	bl	db18 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    ab54:	e587a018 	str	sl, [r7, #24]
    ab58:	e1a00005 	mov	r0, r5
    ab5c:	e1a01006 	mov	r1, r6
    ab60:	ebfffeb5 	bl	a63c <CDWHCIDevice::FreeChannel(unsigned int)>
    ab64:	e1a00009 	mov	r0, r9
    ab68:	eb0026a5 	bl	14604 <CUSBRequest::CallCompletionRoutine()>
    ab6c:	eaffffc9 	b	aa98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    ab70:	e59f22cc 	ldr	r2, [pc, #716]	; ae44 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x524>
    ab74:	e59f12bc 	ldr	r1, [pc, #700]	; ae38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    ab78:	e59f02c8 	ldr	r0, [pc, #712]	; ae48 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x528>
    ab7c:	eb00671f 	bl	24800 <assertion_failed>
    ab80:	e59f22c4 	ldr	r2, [pc, #708]	; ae4c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x52c>
    ab84:	e59f12ac 	ldr	r1, [pc, #684]	; ae38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    ab88:	e59f02c0 	ldr	r0, [pc, #704]	; ae50 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x530>
    ab8c:	eb00671b 	bl	24800 <assertion_failed>
    ab90:	e1a01004 	mov	r1, r4
    ab94:	e1a00005 	mov	r0, r5
    ab98:	ebfffde8 	bl	a340 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    ab9c:	e28d0014 	add	r0, sp, #20
    aba0:	eb000826 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    aba4:	e28d0008 	add	r0, sp, #8
    aba8:	eb000824 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    abac:	eaffffb9 	b	aa98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    abb0:	e59f229c 	ldr	r2, [pc, #668]	; ae54 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x534>
    abb4:	e59f127c 	ldr	r1, [pc, #636]	; ae38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    abb8:	e59f027c 	ldr	r0, [pc, #636]	; ae3c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x51c>
    abbc:	eb00670f 	bl	24800 <assertion_failed>
    abc0:	e1a00004 	mov	r0, r4
    abc4:	eb000b8b 	bl	d9f8 <CDWHCITransferStageData::GetTransactionStatus() const>
    abc8:	e59f8258 	ldr	r8, [pc, #600]	; ae28 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x508>
    abcc:	e1a0a000 	mov	sl, r0
    abd0:	e0088000 	and	r8, r8, r0
    abd4:	e3580000 	cmp	r8, #0
    abd8:	1a000031 	bne	aca4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x384>
    abdc:	e3100050 	tst	r0, #80	; 0x50
    abe0:	1a000053 	bne	ad34 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x414>
    abe4:	e1a00004 	mov	r0, r4
    abe8:	eb000b28 	bl	d890 <CDWHCITransferStageData::IsStatusStage() const>
    abec:	e3500000 	cmp	r0, #0
    abf0:	0a000083 	beq	ae04 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4e4>
    abf4:	e3a01001 	mov	r1, #1
    abf8:	e1a00009 	mov	r0, r9
    abfc:	eb00263c 	bl	144f4 <CUSBRequest::SetStatus(int)>
    ac00:	e1a01006 	mov	r1, r6
    ac04:	e1a00005 	mov	r0, r5
    ac08:	ebfffcb9 	bl	9ef4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    ac0c:	e1a00004 	mov	r0, r4
    ac10:	eb000963 	bl	d1a4 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    ac14:	e1a00004 	mov	r0, r4
    ac18:	e3a01054 	mov	r1, #84	; 0x54
    ac1c:	eb000bbd 	bl	db18 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    ac20:	e3a03000 	mov	r3, #0
    ac24:	e1a01006 	mov	r1, r6
    ac28:	e1a00005 	mov	r0, r5
    ac2c:	e5873018 	str	r3, [r7, #24]
    ac30:	ebfffe81 	bl	a63c <CDWHCIDevice::FreeChannel(unsigned int)>
    ac34:	e1a00009 	mov	r0, r9
    ac38:	eb002671 	bl	14604 <CUSBRequest::CallCompletionRoutine()>
    ac3c:	e28dd020 	add	sp, sp, #32
    ac40:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ac44:	eb006fe0 	bl	26bcc <CLogger::Get()>
    ac48:	e59f11dc 	ldr	r1, [pc, #476]	; ae2c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x50c>
    ac4c:	e58da000 	str	sl, [sp]
    ac50:	e1a02008 	mov	r2, r8
    ac54:	e59f31d4 	ldr	r3, [pc, #468]	; ae30 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x510>
    ac58:	eb006f18 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ac5c:	e3a01000 	mov	r1, #0
    ac60:	eaffffe4 	b	abf8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2d8>
    ac64:	e1a00004 	mov	r0, r4
    ac68:	eb000b92 	bl	dab8 <CDWHCITransferStageData::GetFrameScheduler() const>
    ac6c:	e5903000 	ldr	r3, [r0]
    ac70:	e1a01008 	mov	r1, r8
    ac74:	e5933010 	ldr	r3, [r3, #16]
    ac78:	e12fff33 	blx	r3
    ac7c:	eaffff9a 	b	aaec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x1cc>
    ac80:	e28d0008 	add	r0, sp, #8
    ac84:	eb000803 	bl	cc98 <CDWHCIRegister::Get() const>
    ac88:	e2200206 	eor	r0, r0, #1610612736	; 0x60000000
    ac8c:	e3100206 	tst	r0, #1610612736	; 0x60000000
    ac90:	1affff4f 	bne	a9d4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0xb4>
    ac94:	e59f21bc 	ldr	r2, [pc, #444]	; ae58 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x538>
    ac98:	e59f1198 	ldr	r1, [pc, #408]	; ae38 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x518>
    ac9c:	e59f01b8 	ldr	r0, [pc, #440]	; ae5c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x53c>
    aca0:	eb0066d6 	bl	24800 <assertion_failed>
    aca4:	eb006fc8 	bl	26bcc <CLogger::Get()>
    aca8:	e58da000 	str	sl, [sp]
    acac:	e59f317c 	ldr	r3, [pc, #380]	; ae30 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x510>
    acb0:	e3a02001 	mov	r2, #1
    acb4:	e59f1170 	ldr	r1, [pc, #368]	; ae2c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x50c>
    acb8:	eb006f00 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    acbc:	e3a01000 	mov	r1, #0
    acc0:	e1a00009 	mov	r0, r9
    acc4:	eb00260a 	bl	144f4 <CUSBRequest::SetStatus(int)>
    acc8:	eaffffcc 	b	ac00 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2e0>
    accc:	e1a01006 	mov	r1, r6
    acd0:	e1a00005 	mov	r0, r5
    acd4:	ebfffc86 	bl	9ef4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    acd8:	e1a00004 	mov	r0, r4
    acdc:	eb000aeb 	bl	d890 <CDWHCITransferStageData::IsStatusStage() const>
    ace0:	e3500000 	cmp	r0, #0
    ace4:	0a000040 	beq	adec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x4cc>
    ace8:	e3a01001 	mov	r1, #1
    acec:	e1a00009 	mov	r0, r9
    acf0:	eb0025ff 	bl	144f4 <CUSBRequest::SetStatus(int)>
    acf4:	eaffffc4 	b	ac0c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2ec>
    acf8:	e3a01001 	mov	r1, #1
    acfc:	e1a00004 	mov	r0, r4
    ad00:	eb0009ad 	bl	d3bc <CDWHCITransferStageData::SetState(unsigned int)>
    ad04:	e1a0100a 	mov	r1, sl
    ad08:	e1a00004 	mov	r0, r4
    ad0c:	eb00099e 	bl	d38c <CDWHCITransferStageData::SetSplitComplete(bool)>
    ad10:	e1a00004 	mov	r0, r4
    ad14:	eb000b67 	bl	dab8 <CDWHCITransferStageData::GetFrameScheduler() const>
    ad18:	e5903000 	ldr	r3, [r0]
    ad1c:	e5933008 	ldr	r3, [r3, #8]
    ad20:	e12fff33 	blx	r3
    ad24:	e1a01004 	mov	r1, r4
    ad28:	e1a00005 	mov	r0, r5
    ad2c:	ebfffd83 	bl	a340 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    ad30:	eaffff58 	b	aa98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    ad34:	e1a00004 	mov	r0, r4
    ad38:	eb0009ab 	bl	d3ec <CDWHCITransferStageData::IsPeriodic() const>
    ad3c:	e3500000 	cmp	r0, #0
    ad40:	0affffa7 	beq	abe4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2c4>
    ad44:	e1a00004 	mov	r0, r4
    ad48:	eb000b3f 	bl	da4c <CDWHCITransferStageData::IsTimeout() const>
    ad4c:	e3500000 	cmp	r0, #0
    ad50:	1affffd9 	bne	acbc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x39c>
    ad54:	e3a01003 	mov	r1, #3
    ad58:	e1a00004 	mov	r0, r4
    ad5c:	eb000996 	bl	d3bc <CDWHCITransferStageData::SetState(unsigned int)>
    ad60:	e1a00009 	mov	r0, r9
    ad64:	eb0025d7 	bl	144c8 <CUSBRequest::GetEndpoint() const>
    ad68:	eb00118a 	bl	f398 <CUSBEndpoint::GetInterval() const>
    ad6c:	e3a03064 	mov	r3, #100	; 0x64
    ad70:	e0030093 	mul	r3, r3, r0
    ad74:	e59f10e4 	ldr	r1, [pc, #228]	; ae60 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x540>
    ad78:	e5950008 	ldr	r0, [r5, #8]
    ad7c:	e0813391 	umull	r3, r1, r1, r3
    ad80:	e58d5000 	str	r5, [sp]
    ad84:	e1a03004 	mov	r3, r4
    ad88:	e1a01321 	lsr	r1, r1, #6
    ad8c:	e59f20d0 	ldr	r2, [pc, #208]	; ae64 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x544>
    ad90:	eb007a9a 	bl	29800 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    ad94:	eaffff3f 	b	aa98 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x178>
    ad98:	e1a00004 	mov	r0, r4
    ad9c:	eb000992 	bl	d3ec <CDWHCITransferStageData::IsPeriodic() const>
    ada0:	e250a000 	subs	sl, r0, #0
    ada4:	0affffd3 	beq	acf8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3d8>
    ada8:	e1a00004 	mov	r0, r4
    adac:	eb000b26 	bl	da4c <CDWHCITransferStageData::IsTimeout() const>
    adb0:	e3500000 	cmp	r0, #0
    adb4:	0affffe6 	beq	ad54 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x434>
    adb8:	e1a01006 	mov	r1, r6
    adbc:	e1a00005 	mov	r0, r5
    adc0:	ebfffc4b 	bl	9ef4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    adc4:	e1a01008 	mov	r1, r8
    adc8:	e1a00009 	mov	r0, r9
    adcc:	eb0025c8 	bl	144f4 <CUSBRequest::SetStatus(int)>
    add0:	e1a00004 	mov	r0, r4
    add4:	eb0008f2 	bl	d1a4 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    add8:	e1a00004 	mov	r0, r4
    addc:	e3a01054 	mov	r1, #84	; 0x54
    ade0:	eb000b4c 	bl	db18 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    ade4:	e5878018 	str	r8, [r7, #24]
    ade8:	eaffff5a 	b	ab58 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x238>
    adec:	e1a00004 	mov	r0, r4
    adf0:	eb000b10 	bl	da38 <CDWHCITransferStageData::GetResultLen() const>
    adf4:	e1a01000 	mov	r1, r0
    adf8:	e1a00009 	mov	r0, r9
    adfc:	eb0025be 	bl	144fc <CUSBRequest::SetResultLen(unsigned int)>
    ae00:	eaffffb8 	b	ace8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x3c8>
    ae04:	e1a00004 	mov	r0, r4
    ae08:	eb000b0a 	bl	da38 <CDWHCITransferStageData::GetResultLen() const>
    ae0c:	e1a01000 	mov	r1, r0
    ae10:	e1a00009 	mov	r0, r9
    ae14:	eb0025b8 	bl	144fc <CUSBRequest::SetResultLen(unsigned int)>
    ae18:	eaffff75 	b	abf4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]+0x2d4>
    ae1c:	20980510 	.word	0x20980510
    ae20:	20980508 	.word	0x20980508
    ae24:	000003ff 	.word	0x000003ff
    ae28:	0000078c 	.word	0x0000078c
    ae2c:	0003f134 	.word	0x0003f134
    ae30:	0003f380 	.word	0x0003f380
    ae34:	000003eb 	.word	0x000003eb
    ae38:	0003f158 	.word	0x0003f158
    ae3c:	0003fd5c 	.word	0x0003fd5c
    ae40:	000007dc 	.word	0x000007dc
    ae44:	000003c1 	.word	0x000003c1
    ae48:	0003f1c8 	.word	0x0003f1c8
    ae4c:	000003c3 	.word	0x000003c3
    ae50:	0003f254 	.word	0x0003f254
    ae54:	000004cc 	.word	0x000004cc
    ae58:	000003e3 	.word	0x000003e3
    ae5c:	0003f308 	.word	0x0003f308
    ae60:	10624dd3 	.word	0x10624dd3
    ae64:	0000a514 	.word	0x0000a514

0000ae68 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    ae68:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    ae6c:	e3530000 	cmp	r3, #0
    ae70:	112fff1e 	bxne	lr
    ae74:	eafffea9 	b	a920 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>

0000ae78 <CDWHCIDevice::InterruptHandler()>:
    ae78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ae7c:	e1a07000 	mov	r7, r0
    ae80:	e24dd028 	sub	sp, sp, #40	; 0x28
    ae84:	e3a04000 	mov	r4, #0
    ae88:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
    ae8c:	e59f10e8 	ldr	r1, [pc, #232]	; af7c <CDWHCIDevice::InterruptHandler()+0x104>
    ae90:	e28d0004 	add	r0, sp, #4
    ae94:	eb000761 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ae98:	e28d0004 	add	r0, sp, #4
    ae9c:	eb000768 	bl	cc44 <CDWHCIRegister::Read()>
    aea0:	e28d0004 	add	r0, sp, #4
    aea4:	eb00077b 	bl	cc98 <CDWHCIRegister::Get() const>
    aea8:	e3100402 	tst	r0, #33554432	; 0x2000000
    aeac:	1a000007 	bne	aed0 <CDWHCIDevice::InterruptHandler()+0x58>
    aeb0:	e28d0004 	add	r0, sp, #4
    aeb4:	eb000769 	bl	cc60 <CDWHCIRegister::Write()>
    aeb8:	e3a03000 	mov	r3, #0
    aebc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    aec0:	e28d0004 	add	r0, sp, #4
    aec4:	eb00075d 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    aec8:	e28dd028 	add	sp, sp, #40	; 0x28
    aecc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    aed0:	e59f10a8 	ldr	r1, [pc, #168]	; af80 <CDWHCIDevice::InterruptHandler()+0x108>
    aed4:	e28d0010 	add	r0, sp, #16
    aed8:	eb000750 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aedc:	e28d0010 	add	r0, sp, #16
    aee0:	eb000757 	bl	cc44 <CDWHCIRegister::Read()>
    aee4:	e28d0010 	add	r0, sp, #16
    aee8:	eb00075c 	bl	cc60 <CDWHCIRegister::Write()>
    aeec:	e597300c 	ldr	r3, [r7, #12]
    aef0:	e1530004 	cmp	r3, r4
    aef4:	0a000019 	beq	af60 <CDWHCIDevice::InterruptHandler()+0xe8>
    aef8:	e3a05001 	mov	r5, #1
    aefc:	e1a08004 	mov	r8, r4
    af00:	e59f607c 	ldr	r6, [pc, #124]	; af84 <CDWHCIDevice::InterruptHandler()+0x10c>
    af04:	ea000005 	b	af20 <CDWHCIDevice::InterruptHandler()+0xa8>
    af08:	e597300c 	ldr	r3, [r7, #12]
    af0c:	e2844001 	add	r4, r4, #1
    af10:	e1530004 	cmp	r3, r4
    af14:	e1a05085 	lsl	r5, r5, #1
    af18:	e2866020 	add	r6, r6, #32
    af1c:	9a00000f 	bls	af60 <CDWHCIDevice::InterruptHandler()+0xe8>
    af20:	e28d0010 	add	r0, sp, #16
    af24:	eb00075b 	bl	cc98 <CDWHCIRegister::Get() const>
    af28:	e1100005 	tst	r0, r5
    af2c:	0afffff5 	beq	af08 <CDWHCIDevice::InterruptHandler()+0x90>
    af30:	e1a02008 	mov	r2, r8
    af34:	e1a01006 	mov	r1, r6
    af38:	e28d001c 	add	r0, sp, #28
    af3c:	eb00073b 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    af40:	e28d001c 	add	r0, sp, #28
    af44:	eb000745 	bl	cc60 <CDWHCIRegister::Write()>
    af48:	e5d73081 	ldrb	r3, [r7, #129]	; 0x81
    af4c:	e3530000 	cmp	r3, #0
    af50:	0a000005 	beq	af6c <CDWHCIDevice::InterruptHandler()+0xf4>
    af54:	e28d001c 	add	r0, sp, #28
    af58:	eb000738 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    af5c:	eaffffe9 	b	af08 <CDWHCIDevice::InterruptHandler()+0x90>
    af60:	e28d0010 	add	r0, sp, #16
    af64:	eb000735 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    af68:	eaffffd0 	b	aeb0 <CDWHCIDevice::InterruptHandler()+0x38>
    af6c:	e1a01004 	mov	r1, r4
    af70:	e1a00007 	mov	r0, r7
    af74:	ebfffe69 	bl	a920 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.8]>
    af78:	eafffff5 	b	af54 <CDWHCIDevice::InterruptHandler()+0xdc>
    af7c:	20980014 	.word	0x20980014
    af80:	20980414 	.word	0x20980414
    af84:	2098050c 	.word	0x2098050c

0000af88 <CDWHCIDevice::InterruptStub(void*)>:
    af88:	e3500000 	cmp	r0, #0
    af8c:	0a000000 	beq	af94 <CDWHCIDevice::InterruptStub(void*)+0xc>
    af90:	eaffffb8 	b	ae78 <CDWHCIDevice::InterruptHandler()>
    af94:	e92d4010 	push	{r4, lr}
    af98:	e59f2008 	ldr	r2, [pc, #8]	; afa8 <CDWHCIDevice::InterruptStub(void*)+0x20>
    af9c:	e59f1008 	ldr	r1, [pc, #8]	; afac <CDWHCIDevice::InterruptStub(void*)+0x24>
    afa0:	e59f0008 	ldr	r0, [pc, #8]	; afb0 <CDWHCIDevice::InterruptStub(void*)+0x28>
    afa4:	eb006615 	bl	24800 <assertion_failed>
    afa8:	00000532 	.word	0x00000532
    afac:	0003f158 	.word	0x0003f158
    afb0:	0003f168 	.word	0x0003f168

0000afb4 <CDWHCIDevice::AllocateWaitBlock()>:
    afb4:	e92d4070 	push	{r4, r5, r6, lr}
    afb8:	e1a05000 	mov	r5, r0
    afbc:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    afc0:	e3500000 	cmp	r0, #0
    afc4:	1a000014 	bne	b01c <CDWHCIDevice::AllocateWaitBlock()+0x68>
    afc8:	e3a04000 	mov	r4, #0
    afcc:	e3a03001 	mov	r3, #1
    afd0:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    afd4:	e1120003 	tst	r2, r3
    afd8:	0a000007 	beq	affc <CDWHCIDevice::AllocateWaitBlock()+0x48>
    afdc:	e2844001 	add	r4, r4, #1
    afe0:	e3540010 	cmp	r4, #16
    afe4:	e1a03083 	lsl	r3, r3, #1
    afe8:	1afffff8 	bne	afd0 <CDWHCIDevice::AllocateWaitBlock()+0x1c>
    afec:	e3500000 	cmp	r0, #0
    aff0:	1a000006 	bne	b010 <CDWHCIDevice::AllocateWaitBlock()+0x5c>
    aff4:	e1a00004 	mov	r0, r4
    aff8:	e8bd8070 	pop	{r4, r5, r6, pc}
    affc:	e595206c 	ldr	r2, [r5, #108]	; 0x6c
    b000:	e3500000 	cmp	r0, #0
    b004:	e1823003 	orr	r3, r2, r3
    b008:	e585306c 	str	r3, [r5, #108]	; 0x6c
    b00c:	0afffff8 	beq	aff4 <CDWHCIDevice::AllocateWaitBlock()+0x40>
    b010:	eb008374 	bl	2bde8 <LeaveCritical>
    b014:	e1a00004 	mov	r0, r4
    b018:	e8bd8070 	pop	{r4, r5, r6, pc}
    b01c:	eb008346 	bl	2bd3c <EnterCritical>
    b020:	e5950070 	ldr	r0, [r5, #112]	; 0x70
    b024:	eaffffe7 	b	afc8 <CDWHCIDevice::AllocateWaitBlock()+0x14>

0000b028 <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    b028:	e351000f 	cmp	r1, #15
    b02c:	e92d4070 	push	{r4, r5, r6, lr}
    b030:	8a000012 	bhi	b080 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x58>
    b034:	e3a05001 	mov	r5, #1
    b038:	e1a04000 	mov	r4, r0
    b03c:	e5900070 	ldr	r0, [r0, #112]	; 0x70
    b040:	e1a05115 	lsl	r5, r5, r1
    b044:	e3500000 	cmp	r0, #0
    b048:	1a00000a 	bne	b078 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x50>
    b04c:	e594306c 	ldr	r3, [r4, #108]	; 0x6c
    b050:	e1150003 	tst	r5, r3
    b054:	0a00000d 	beq	b090 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x68>
    b058:	e594106c 	ldr	r1, [r4, #108]	; 0x6c
    b05c:	e5943070 	ldr	r3, [r4, #112]	; 0x70
    b060:	e1c15005 	bic	r5, r1, r5
    b064:	e3530000 	cmp	r3, #0
    b068:	e584506c 	str	r5, [r4, #108]	; 0x6c
    b06c:	08bd8070 	popeq	{r4, r5, r6, pc}
    b070:	e8bd4070 	pop	{r4, r5, r6, lr}
    b074:	ea00835b 	b	2bde8 <LeaveCritical>
    b078:	eb00832f 	bl	2bd3c <EnterCritical>
    b07c:	eafffff2 	b	b04c <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x24>
    b080:	e59f2018 	ldr	r2, [pc, #24]	; b0a0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x78>
    b084:	e59f1018 	ldr	r1, [pc, #24]	; b0a4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    b088:	e59f0018 	ldr	r0, [pc, #24]	; b0a8 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x80>
    b08c:	eb0065db 	bl	24800 <assertion_failed>
    b090:	e59f2014 	ldr	r2, [pc, #20]	; b0ac <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x84>
    b094:	e59f1008 	ldr	r1, [pc, #8]	; b0a4 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x7c>
    b098:	e59f0010 	ldr	r0, [pc, #16]	; b0b0 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x88>
    b09c:	eb0065d7 	bl	24800 <assertion_failed>
    b0a0:	0000059d 	.word	0x0000059d
    b0a4:	0003f158 	.word	0x0003f158
    b0a8:	0003f174 	.word	0x0003f174
    b0ac:	000005a2 	.word	0x000005a2
    b0b0:	0003f3a4 	.word	0x0003f3a4

0000b0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    b0b4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    b0b8:	e24dd00c 	sub	sp, sp, #12
    b0bc:	e1a07001 	mov	r7, r1
    b0c0:	e1a08002 	mov	r8, r2
    b0c4:	e1a09003 	mov	r9, r3
    b0c8:	e1a06000 	mov	r6, r0
    b0cc:	ebffffb8 	bl	afb4 <CDWHCIDevice::AllocateWaitBlock()>
    b0d0:	e350000f 	cmp	r0, #15
    b0d4:	8a000023 	bhi	b168 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb4>
    b0d8:	e3570000 	cmp	r7, #0
    b0dc:	0a000030 	beq	b1a4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xf0>
    b0e0:	e1a05000 	mov	r5, r0
    b0e4:	e1a03006 	mov	r3, r6
    b0e8:	e1a02000 	mov	r2, r0
    b0ec:	e59f10c0 	ldr	r1, [pc, #192]	; b1b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x100>
    b0f0:	e1a00007 	mov	r0, r7
    b0f4:	e0864005 	add	r4, r6, r5
    b0f8:	eb002534 	bl	145d0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    b0fc:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    b100:	e3530000 	cmp	r3, #0
    b104:	1a00001b 	bne	b178 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xc4>
    b108:	e3a01001 	mov	r1, #1
    b10c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    b110:	e1a02008 	mov	r2, r8
    b114:	e58d3000 	str	r3, [sp]
    b118:	e1a00006 	mov	r0, r6
    b11c:	e5c4105c 	strb	r1, [r4, #92]	; 0x5c
    b120:	e1a03009 	mov	r3, r9
    b124:	e1a01007 	mov	r1, r7
    b128:	ebfffd67 	bl	a6cc <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    b12c:	e2508000 	subs	r8, r0, #0
    b130:	0a000014 	beq	b188 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xd4>
    b134:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
    b138:	e3530000 	cmp	r3, #0
    b13c:	1afffffc 	bne	b134 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x80>
    b140:	e1a01005 	mov	r1, r5
    b144:	e1a00006 	mov	r0, r6
    b148:	ebffffb6 	bl	b028 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b14c:	e1a00007 	mov	r0, r7
    b150:	eb0024eb 	bl	14504 <CUSBRequest::GetStatus() const>
    b154:	e2908000 	adds	r8, r0, #0
    b158:	13a08001 	movne	r8, #1
    b15c:	e1a00008 	mov	r0, r8
    b160:	e28dd00c 	add	sp, sp, #12
    b164:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b168:	e3a08000 	mov	r8, #0
    b16c:	e1a00008 	mov	r0, r8
    b170:	e28dd00c 	add	sp, sp, #12
    b174:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b178:	e59f2038 	ldr	r2, [pc, #56]	; b1b8 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x104>
    b17c:	e59f1038 	ldr	r1, [pc, #56]	; b1bc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    b180:	e59f0038 	ldr	r0, [pc, #56]	; b1c0 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x10c>
    b184:	eb00659d 	bl	24800 <assertion_failed>
    b188:	e1a00006 	mov	r0, r6
    b18c:	e5c4805c 	strb	r8, [r4, #92]	; 0x5c
    b190:	e1a01005 	mov	r1, r5
    b194:	ebffffa3 	bl	b028 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    b198:	e1a00008 	mov	r0, r8
    b19c:	e28dd00c 	add	sp, sp, #12
    b1a0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    b1a4:	e3a02e29 	mov	r2, #656	; 0x290
    b1a8:	e59f100c 	ldr	r1, [pc, #12]	; b1bc <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x108>
    b1ac:	e59f0010 	ldr	r0, [pc, #16]	; b1c4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x110>
    b1b0:	eb006592 	bl	24800 <assertion_failed>
    b1b4:	00009ab8 	.word	0x00009ab8
    b1b8:	00000293 	.word	0x00000293
    b1bc:	0003f158 	.word	0x0003f158
    b1c0:	0003f3cc 	.word	0x0003f3cc
    b1c4:	0003f254 	.word	0x0003f254

0000b1c8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    b1c8:	e5d03081 	ldrb	r3, [r0, #129]	; 0x81
    b1cc:	e21330ff 	ands	r3, r3, #255	; 0xff
    b1d0:	1a000027 	bne	b274 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xac>
    b1d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    b1d8:	e1a06002 	mov	r6, r2
    b1dc:	e24dd00c 	sub	sp, sp, #12
    b1e0:	e1a04001 	mov	r4, r1
    b1e4:	e1a05000 	mov	r5, r0
    b1e8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    b1ec:	e3510000 	cmp	r1, #0
    b1f0:	0a000067 	beq	b394 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1cc>
    b1f4:	e1a01003 	mov	r1, r3
    b1f8:	e1a00004 	mov	r0, r4
    b1fc:	eb0024bc 	bl	144f4 <CUSBRequest::SetStatus(int)>
    b200:	e1a00004 	mov	r0, r4
    b204:	eb0024af 	bl	144c8 <CUSBRequest::GetEndpoint() const>
    b208:	eb001059 	bl	f374 <CUSBEndpoint::GetType() const>
    b20c:	e3500000 	cmp	r0, #0
    b210:	1a000019 	bne	b27c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xb4>
    b214:	e3560000 	cmp	r6, #0
    b218:	1a000061 	bne	b3a4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1dc>
    b21c:	e1a00004 	mov	r0, r4
    b220:	eb0024c5 	bl	1453c <CUSBRequest::GetSetupData()>
    b224:	e3500000 	cmp	r0, #0
    b228:	0a000061 	beq	b3b4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1ec>
    b22c:	e1d030d0 	ldrsb	r3, [r0]
    b230:	e1a00004 	mov	r0, r4
    b234:	e3530000 	cmp	r3, #0
    b238:	ba000039 	blt	b324 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x15c>
    b23c:	eb0024e1 	bl	145c8 <CUSBRequest::GetBufLen() const>
    b240:	e2507000 	subs	r7, r0, #0
    b244:	0a000025 	beq	b2e0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x118>
    b248:	e58d6000 	str	r6, [sp]
    b24c:	e1a03006 	mov	r3, r6
    b250:	e1a02006 	mov	r2, r6
    b254:	e1a01004 	mov	r1, r4
    b258:	e1a00005 	mov	r0, r5
    b25c:	ebffff94 	bl	b0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b260:	e3500000 	cmp	r0, #0
    b264:	1a000056 	bne	b3c4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1fc>
    b268:	e3a00000 	mov	r0, #0
    b26c:	e28dd00c 	add	sp, sp, #12
    b270:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b274:	e3a00000 	mov	r0, #0
    b278:	e12fff1e 	bx	lr
    b27c:	e1a00004 	mov	r0, r4
    b280:	eb002490 	bl	144c8 <CUSBRequest::GetEndpoint() const>
    b284:	eb00103a 	bl	f374 <CUSBEndpoint::GetType() const>
    b288:	e3500001 	cmp	r0, #1
    b28c:	1a000057 	bne	b3f0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x228>
    b290:	e1a00004 	mov	r0, r4
    b294:	eb0024cb 	bl	145c8 <CUSBRequest::GetBufLen() const>
    b298:	e3500000 	cmp	r0, #0
    b29c:	0a00005c 	beq	b414 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x24c>
    b2a0:	e1a00004 	mov	r0, r4
    b2a4:	eb002487 	bl	144c8 <CUSBRequest::GetEndpoint() const>
    b2a8:	eb001033 	bl	f37c <CUSBEndpoint::IsDirectionIn() const>
    b2ac:	e58d6000 	str	r6, [sp]
    b2b0:	e1a02000 	mov	r2, r0
    b2b4:	e1a01004 	mov	r1, r4
    b2b8:	e1a00005 	mov	r0, r5
    b2bc:	e3a03000 	mov	r3, #0
    b2c0:	ebffff7b 	bl	b0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b2c4:	e3500000 	cmp	r0, #0
    b2c8:	0affffe6 	beq	b268 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    b2cc:	e3a03000 	mov	r3, #0
    b2d0:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    b2d4:	e3a00001 	mov	r0, #1
    b2d8:	e28dd00c 	add	sp, sp, #12
    b2dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b2e0:	e1a03007 	mov	r3, r7
    b2e4:	e58d7000 	str	r7, [sp]
    b2e8:	e1a02007 	mov	r2, r7
    b2ec:	e1a01004 	mov	r1, r4
    b2f0:	e1a00005 	mov	r0, r5
    b2f4:	ebffff6e 	bl	b0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b2f8:	e3500000 	cmp	r0, #0
    b2fc:	13a03001 	movne	r3, #1
    b300:	158d7000 	strne	r7, [sp]
    b304:	0affffd7 	beq	b268 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    b308:	e1a01004 	mov	r1, r4
    b30c:	e1a00005 	mov	r0, r5
    b310:	e1a02003 	mov	r2, r3
    b314:	ebffff66 	bl	b0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b318:	e3500000 	cmp	r0, #0
    b31c:	1affffea 	bne	b2cc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x104>
    b320:	eaffffd0 	b	b268 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    b324:	eb0024a7 	bl	145c8 <CUSBRequest::GetBufLen() const>
    b328:	e3500000 	cmp	r0, #0
    b32c:	0a00003c 	beq	b424 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x25c>
    b330:	e58d6000 	str	r6, [sp]
    b334:	e1a03006 	mov	r3, r6
    b338:	e1a02006 	mov	r2, r6
    b33c:	e1a01004 	mov	r1, r4
    b340:	e1a00005 	mov	r0, r5
    b344:	ebffff5a 	bl	b0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b348:	e3500000 	cmp	r0, #0
    b34c:	0affffc5 	beq	b268 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    b350:	e58d6000 	str	r6, [sp]
    b354:	e1a03006 	mov	r3, r6
    b358:	e3a02001 	mov	r2, #1
    b35c:	e1a01004 	mov	r1, r4
    b360:	e1a00005 	mov	r0, r5
    b364:	ebffff52 	bl	b0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b368:	e3500000 	cmp	r0, #0
    b36c:	0affffbd 	beq	b268 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    b370:	e58d6000 	str	r6, [sp]
    b374:	e1a02006 	mov	r2, r6
    b378:	e1a01004 	mov	r1, r4
    b37c:	e1a00005 	mov	r0, r5
    b380:	e3a03001 	mov	r3, #1
    b384:	ebffff4a 	bl	b0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b388:	e3500000 	cmp	r0, #0
    b38c:	0affffb5 	beq	b268 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    b390:	eaffffcd 	b	b2cc <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x104>
    b394:	e3a020cf 	mov	r2, #207	; 0xcf
    b398:	e59f1094 	ldr	r1, [pc, #148]	; b434 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b39c:	e59f0094 	ldr	r0, [pc, #148]	; b438 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x270>
    b3a0:	eb006516 	bl	24800 <assertion_failed>
    b3a4:	e3a020d5 	mov	r2, #213	; 0xd5
    b3a8:	e59f1084 	ldr	r1, [pc, #132]	; b434 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b3ac:	e59f0088 	ldr	r0, [pc, #136]	; b43c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x274>
    b3b0:	eb006512 	bl	24800 <assertion_failed>
    b3b4:	e3a020d8 	mov	r2, #216	; 0xd8
    b3b8:	e59f1074 	ldr	r1, [pc, #116]	; b434 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b3bc:	e59f007c 	ldr	r0, [pc, #124]	; b440 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x278>
    b3c0:	eb00650e 	bl	24800 <assertion_failed>
    b3c4:	e58d6000 	str	r6, [sp]
    b3c8:	e1a03006 	mov	r3, r6
    b3cc:	e1a02006 	mov	r2, r6
    b3d0:	e1a01004 	mov	r1, r4
    b3d4:	e1a00005 	mov	r0, r5
    b3d8:	ebffff35 	bl	b0b4 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    b3dc:	e3500000 	cmp	r0, #0
    b3e0:	0affffa0 	beq	b268 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa0>
    b3e4:	e3a03001 	mov	r3, #1
    b3e8:	e58d6000 	str	r6, [sp]
    b3ec:	eaffffc5 	b	b308 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x140>
    b3f0:	e1a00004 	mov	r0, r4
    b3f4:	eb002433 	bl	144c8 <CUSBRequest::GetEndpoint() const>
    b3f8:	eb000fdd 	bl	f374 <CUSBEndpoint::GetType() const>
    b3fc:	e3500002 	cmp	r0, #2
    b400:	0affffa2 	beq	b290 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xc8>
    b404:	e3a020fd 	mov	r2, #253	; 0xfd
    b408:	e59f1024 	ldr	r1, [pc, #36]	; b434 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b40c:	e59f0030 	ldr	r0, [pc, #48]	; b444 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x27c>
    b410:	eb0064fa 	bl	24800 <assertion_failed>
    b414:	e3a020fe 	mov	r2, #254	; 0xfe
    b418:	e59f1014 	ldr	r1, [pc, #20]	; b434 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b41c:	e59f0024 	ldr	r0, [pc, #36]	; b448 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x280>
    b420:	eb0064f6 	bl	24800 <assertion_failed>
    b424:	e3a020dc 	mov	r2, #220	; 0xdc
    b428:	e59f1004 	ldr	r1, [pc, #4]	; b434 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x26c>
    b42c:	e59f0014 	ldr	r0, [pc, #20]	; b448 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x280>
    b430:	eb0064f2 	bl	24800 <assertion_failed>
    b434:	0003f158 	.word	0x0003f158
    b438:	0003f254 	.word	0x0003f254
    b43c:	0003f3e4 	.word	0x0003f3e4
    b440:	0003f404 	.word	0x0003f404
    b444:	0003f27c 	.word	0x0003f27c
    b448:	0003f2f0 	.word	0x0003f2f0

0000b44c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    b44c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b450:	e2516000 	subs	r6, r1, #0
    b454:	e59d4020 	ldr	r4, [sp, #32]
    b458:	0a00001f 	beq	b4dc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x90>
    b45c:	e3520000 	cmp	r2, #0
    b460:	e1a05002 	mov	r5, r2
    b464:	0a000020 	beq	b4ec <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xa0>
    b468:	e3540000 	cmp	r4, #0
    b46c:	11a09003 	movne	r9, r3
    b470:	13a08001 	movne	r8, #1
    b474:	11a07000 	movne	r7, r0
    b478:	1029a008 	eorne	sl, r9, r8
    b47c:	1a000004 	bne	b494 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x48>
    b480:	ea00001d 	b	b4fc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xb0>
    b484:	e1a00008 	mov	r0, r8
    b488:	eb007a63 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
    b48c:	e2544001 	subs	r4, r4, #1
    b490:	0a00000f 	beq	b4d4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x88>
    b494:	e1a00006 	mov	r0, r6
    b498:	eb0005e9 	bl	cc44 <CDWHCIRegister::Read()>
    b49c:	e1150000 	tst	r5, r0
    b4a0:	11a0300a 	movne	r3, sl
    b4a4:	01a03009 	moveq	r3, r9
    b4a8:	e3530000 	cmp	r3, #0
    b4ac:	0a000006 	beq	b4cc <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x80>
    b4b0:	e5973008 	ldr	r3, [r7, #8]
    b4b4:	e3530000 	cmp	r3, #0
    b4b8:	1afffff1 	bne	b484 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x38>
    b4bc:	e59f2048 	ldr	r2, [pc, #72]	; b50c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc0>
    b4c0:	e59f1048 	ldr	r1, [pc, #72]	; b510 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    b4c4:	e59f0048 	ldr	r0, [pc, #72]	; b514 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc8>
    b4c8:	eb0064cc 	bl	24800 <assertion_failed>
    b4cc:	e3a00001 	mov	r0, #1
    b4d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b4d4:	e1a00004 	mov	r0, r4
    b4d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b4dc:	e59f2034 	ldr	r2, [pc, #52]	; b518 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xcc>
    b4e0:	e59f1028 	ldr	r1, [pc, #40]	; b510 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    b4e4:	e59f0030 	ldr	r0, [pc, #48]	; b51c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd0>
    b4e8:	eb0064c4 	bl	24800 <assertion_failed>
    b4ec:	e59f202c 	ldr	r2, [pc, #44]	; b520 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd4>
    b4f0:	e59f1018 	ldr	r1, [pc, #24]	; b510 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    b4f4:	e59f0028 	ldr	r0, [pc, #40]	; b524 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xd8>
    b4f8:	eb0064c0 	bl	24800 <assertion_failed>
    b4fc:	e59f2024 	ldr	r2, [pc, #36]	; b528 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xdc>
    b500:	e59f1008 	ldr	r1, [pc, #8]	; b510 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    b504:	e59f0020 	ldr	r0, [pc, #32]	; b52c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xe0>
    b508:	eb0064bc 	bl	24800 <assertion_failed>
    b50c:	000005b3 	.word	0x000005b3
    b510:	0003f158 	.word	0x0003f158
    b514:	0003f1b8 	.word	0x0003f1b8
    b518:	000005ad 	.word	0x000005ad
    b51c:	0003f410 	.word	0x0003f410
    b520:	000005ae 	.word	0x000005ae
    b524:	0003f420 	.word	0x0003f420
    b528:	000005af 	.word	0x000005af
    b52c:	0003f42c 	.word	0x0003f42c

0000b530 <CDWHCIDevice::EnableRootPort()>:
    b530:	e92d4030 	push	{r4, r5, lr}
    b534:	e24dd01c 	sub	sp, sp, #28
    b538:	e1a05000 	mov	r5, r0
    b53c:	eb006b61 	bl	262c8 <CKernelOptions::Get()>
    b540:	e3500000 	cmp	r0, #0
    b544:	0a00002c 	beq	b5fc <CDWHCIDevice::EnableRootPort()+0xcc>
    b548:	eb006b51 	bl	26294 <CKernelOptions::GetUSBPowerDelay() const>
    b54c:	e2504000 	subs	r4, r0, #0
    b550:	0a000029 	beq	b5fc <CDWHCIDevice::EnableRootPort()+0xcc>
    b554:	e59f10a8 	ldr	r1, [pc, #168]	; b604 <CDWHCIDevice::EnableRootPort()+0xd4>
    b558:	e28d000c 	add	r0, sp, #12
    b55c:	eb0005af 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b560:	e3a03001 	mov	r3, #1
    b564:	e58d4000 	str	r4, [sp]
    b568:	e1a00005 	mov	r0, r5
    b56c:	e28d100c 	add	r1, sp, #12
    b570:	e1a02003 	mov	r2, r3
    b574:	ebffffb4 	bl	b44c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b578:	e2504000 	subs	r4, r0, #0
    b57c:	0a000019 	beq	b5e8 <CDWHCIDevice::EnableRootPort()+0xb8>
    b580:	e3a00064 	mov	r0, #100	; 0x64
    b584:	eb007a24 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
    b588:	e28d000c 	add	r0, sp, #12
    b58c:	eb0005ac 	bl	cc44 <CDWHCIRegister::Read()>
    b590:	e3e0102e 	mvn	r1, #46	; 0x2e
    b594:	e28d000c 	add	r0, sp, #12
    b598:	eb0005dd 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    b59c:	e3a01c01 	mov	r1, #256	; 0x100
    b5a0:	e28d000c 	add	r0, sp, #12
    b5a4:	eb0005e8 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    b5a8:	e28d000c 	add	r0, sp, #12
    b5ac:	eb0005ab 	bl	cc60 <CDWHCIRegister::Write()>
    b5b0:	e3a00032 	mov	r0, #50	; 0x32
    b5b4:	eb007a18 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
    b5b8:	e28d000c 	add	r0, sp, #12
    b5bc:	eb0005a0 	bl	cc44 <CDWHCIRegister::Read()>
    b5c0:	e3e0102e 	mvn	r1, #46	; 0x2e
    b5c4:	e28d000c 	add	r0, sp, #12
    b5c8:	eb0005d1 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    b5cc:	e3e01c01 	mvn	r1, #256	; 0x100
    b5d0:	e28d000c 	add	r0, sp, #12
    b5d4:	eb0005ce 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    b5d8:	e28d000c 	add	r0, sp, #12
    b5dc:	eb00059f 	bl	cc60 <CDWHCIRegister::Write()>
    b5e0:	e3a00014 	mov	r0, #20
    b5e4:	eb007a0c 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
    b5e8:	e28d000c 	add	r0, sp, #12
    b5ec:	eb000593 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    b5f0:	e1a00004 	mov	r0, r4
    b5f4:	e28dd01c 	add	sp, sp, #28
    b5f8:	e8bd8030 	pop	{r4, r5, pc}
    b5fc:	e59f4004 	ldr	r4, [pc, #4]	; b608 <CDWHCIDevice::EnableRootPort()+0xd8>
    b600:	eaffffd3 	b	b554 <CDWHCIDevice::EnableRootPort()+0x24>
    b604:	20980440 	.word	0x20980440
    b608:	000001fe 	.word	0x000001fe

0000b60c <CDWHCIDevice::Reset()>:
    b60c:	e92d4030 	push	{r4, r5, lr}
    b610:	e1a04000 	mov	r4, r0
    b614:	e3a05064 	mov	r5, #100	; 0x64
    b618:	e24dd01c 	sub	sp, sp, #28
    b61c:	e3a02000 	mov	r2, #0
    b620:	e59f1080 	ldr	r1, [pc, #128]	; b6a8 <CDWHCIDevice::Reset()+0x9c>
    b624:	e28d000c 	add	r0, sp, #12
    b628:	eb000580 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b62c:	e28d100c 	add	r1, sp, #12
    b630:	e1a00004 	mov	r0, r4
    b634:	e58d5000 	str	r5, [sp]
    b638:	e3a03001 	mov	r3, #1
    b63c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    b640:	ebffff81 	bl	b44c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b644:	e3500000 	cmp	r0, #0
    b648:	1a000005 	bne	b664 <CDWHCIDevice::Reset()+0x58>
    b64c:	e3a04000 	mov	r4, #0
    b650:	e28d000c 	add	r0, sp, #12
    b654:	eb000579 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    b658:	e1a00004 	mov	r0, r4
    b65c:	e28dd01c 	add	sp, sp, #28
    b660:	e8bd8030 	pop	{r4, r5, pc}
    b664:	e3a01001 	mov	r1, #1
    b668:	e28d000c 	add	r0, sp, #12
    b66c:	eb0005b6 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    b670:	e28d000c 	add	r0, sp, #12
    b674:	eb000579 	bl	cc60 <CDWHCIRegister::Write()>
    b678:	e3a0300a 	mov	r3, #10
    b67c:	e1a00004 	mov	r0, r4
    b680:	e58d3000 	str	r3, [sp]
    b684:	e3a02001 	mov	r2, #1
    b688:	e3a03000 	mov	r3, #0
    b68c:	e28d100c 	add	r1, sp, #12
    b690:	ebffff6d 	bl	b44c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b694:	e2504000 	subs	r4, r0, #0
    b698:	0affffeb 	beq	b64c <CDWHCIDevice::Reset()+0x40>
    b69c:	e1a00005 	mov	r0, r5
    b6a0:	eb0079dd 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
    b6a4:	eaffffe9 	b	b650 <CDWHCIDevice::Reset()+0x44>
    b6a8:	20980010 	.word	0x20980010

0000b6ac <CDWHCIDevice::InitCore()>:
    b6ac:	e92d4030 	push	{r4, r5, lr}
    b6b0:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    b6b4:	e59f1234 	ldr	r1, [pc, #564]	; b8f0 <CDWHCIDevice::InitCore()+0x244>
    b6b8:	e1a04000 	mov	r4, r0
    b6bc:	e28d0004 	add	r0, sp, #4
    b6c0:	eb000556 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b6c4:	e28d0004 	add	r0, sp, #4
    b6c8:	eb00055d 	bl	cc44 <CDWHCIRegister::Read()>
    b6cc:	eb006afd 	bl	262c8 <CKernelOptions::Get()>
    b6d0:	eb006af1 	bl	2629c <CKernelOptions::GetUSBFullSpeed() const>
    b6d4:	e3500000 	cmp	r0, #0
    b6d8:	1a000067 	bne	b87c <CDWHCIDevice::InitCore()+0x1d0>
    b6dc:	e3e01601 	mvn	r1, #1048576	; 0x100000
    b6e0:	e28d0004 	add	r0, sp, #4
    b6e4:	eb00058a 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    b6e8:	e3e01501 	mvn	r1, #4194304	; 0x400000
    b6ec:	e28d0004 	add	r0, sp, #4
    b6f0:	eb000587 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    b6f4:	e28d0004 	add	r0, sp, #4
    b6f8:	eb000558 	bl	cc60 <CDWHCIRegister::Write()>
    b6fc:	e1a00004 	mov	r0, r4
    b700:	ebffffc1 	bl	b60c <CDWHCIDevice::Reset()>
    b704:	e2505000 	subs	r5, r0, #0
    b708:	0a000055 	beq	b864 <CDWHCIDevice::InitCore()+0x1b8>
    b70c:	e28d0004 	add	r0, sp, #4
    b710:	eb00054b 	bl	cc44 <CDWHCIRegister::Read()>
    b714:	e3e01010 	mvn	r1, #16
    b718:	e28d0004 	add	r0, sp, #4
    b71c:	eb00057c 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    b720:	e3e01008 	mvn	r1, #8
    b724:	e28d0004 	add	r0, sp, #4
    b728:	eb000579 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    b72c:	e28d0004 	add	r0, sp, #4
    b730:	eb00054a 	bl	cc60 <CDWHCIRegister::Write()>
    b734:	e59f11b8 	ldr	r1, [pc, #440]	; b8f4 <CDWHCIDevice::InitCore()+0x248>
    b738:	e28d0010 	add	r0, sp, #16
    b73c:	eb000537 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b740:	e28d0010 	add	r0, sp, #16
    b744:	eb00053e 	bl	cc44 <CDWHCIRegister::Read()>
    b748:	e28d0010 	add	r0, sp, #16
    b74c:	eb000551 	bl	cc98 <CDWHCIRegister::Get() const>
    b750:	e1a001a0 	lsr	r0, r0, #3
    b754:	e2000003 	and	r0, r0, #3
    b758:	e3500002 	cmp	r0, #2
    b75c:	1a00005b 	bne	b8d0 <CDWHCIDevice::InitCore()+0x224>
    b760:	e28d0004 	add	r0, sp, #4
    b764:	eb000536 	bl	cc44 <CDWHCIRegister::Read()>
    b768:	e28d0010 	add	r0, sp, #16
    b76c:	eb000549 	bl	cc98 <CDWHCIRegister::Get() const>
    b770:	e1a00320 	lsr	r0, r0, #6
    b774:	e2000003 	and	r0, r0, #3
    b778:	e3500002 	cmp	r0, #2
    b77c:	0a000042 	beq	b88c <CDWHCIDevice::InitCore()+0x1e0>
    b780:	e3e01802 	mvn	r1, #131072	; 0x20000
    b784:	e28d0004 	add	r0, sp, #4
    b788:	eb000561 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    b78c:	e3e01702 	mvn	r1, #524288	; 0x80000
    b790:	e28d0004 	add	r0, sp, #4
    b794:	eb00055e 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    b798:	e28d0004 	add	r0, sp, #4
    b79c:	eb00052f 	bl	cc60 <CDWHCIRegister::Write()>
    b7a0:	e594300c 	ldr	r3, [r4, #12]
    b7a4:	e3530000 	cmp	r3, #0
    b7a8:	1a000044 	bne	b8c0 <CDWHCIDevice::InitCore()+0x214>
    b7ac:	e28d0010 	add	r0, sp, #16
    b7b0:	eb000538 	bl	cc98 <CDWHCIRegister::Get() const>
    b7b4:	e1a00720 	lsr	r0, r0, #14
    b7b8:	e200000f 	and	r0, r0, #15
    b7bc:	e2403003 	sub	r3, r0, #3
    b7c0:	e353000c 	cmp	r3, #12
    b7c4:	e2800001 	add	r0, r0, #1
    b7c8:	e584000c 	str	r0, [r4, #12]
    b7cc:	8a000043 	bhi	b8e0 <CDWHCIDevice::InitCore()+0x234>
    b7d0:	e59f1120 	ldr	r1, [pc, #288]	; b8f8 <CDWHCIDevice::InitCore()+0x24c>
    b7d4:	e28d001c 	add	r0, sp, #28
    b7d8:	eb000510 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b7dc:	e28d001c 	add	r0, sp, #28
    b7e0:	eb000517 	bl	cc44 <CDWHCIRegister::Read()>
    b7e4:	e28d001c 	add	r0, sp, #28
    b7e8:	e3a01020 	mov	r1, #32
    b7ec:	eb000556 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    b7f0:	e28d001c 	add	r0, sp, #28
    b7f4:	e3a01010 	mov	r1, #16
    b7f8:	eb000553 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    b7fc:	e3e01006 	mvn	r1, #6
    b800:	e28d001c 	add	r0, sp, #28
    b804:	eb000542 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    b808:	e28d001c 	add	r0, sp, #28
    b80c:	eb000513 	bl	cc60 <CDWHCIRegister::Write()>
    b810:	e28d0004 	add	r0, sp, #4
    b814:	eb00050a 	bl	cc44 <CDWHCIRegister::Read()>
    b818:	e3e01c02 	mvn	r1, #512	; 0x200
    b81c:	e28d0004 	add	r0, sp, #4
    b820:	eb00053b 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    b824:	e3e01c01 	mvn	r1, #256	; 0x100
    b828:	e28d0004 	add	r0, sp, #4
    b82c:	eb000538 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    b830:	e28d0004 	add	r0, sp, #4
    b834:	eb000509 	bl	cc60 <CDWHCIRegister::Write()>
    b838:	e1a00004 	mov	r0, r4
    b83c:	ebfff96a 	bl	9dec <CDWHCIDevice::EnableCommonInterrupts()>
    b840:	e28d001c 	add	r0, sp, #28
    b844:	eb0004fd 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    b848:	e28d0010 	add	r0, sp, #16
    b84c:	eb0004fb 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    b850:	e28d0004 	add	r0, sp, #4
    b854:	eb0004f9 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    b858:	e1a00005 	mov	r0, r5
    b85c:	e28dd02c 	add	sp, sp, #44	; 0x2c
    b860:	e8bd8030 	pop	{r4, r5, pc}
    b864:	eb006cd8 	bl	26bcc <CLogger::Get()>
    b868:	e59f308c 	ldr	r3, [pc, #140]	; b8fc <CDWHCIDevice::InitCore()+0x250>
    b86c:	e3a02001 	mov	r2, #1
    b870:	e59f1088 	ldr	r1, [pc, #136]	; b900 <CDWHCIDevice::InitCore()+0x254>
    b874:	eb006c11 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b878:	eafffff4 	b	b850 <CDWHCIDevice::InitCore()+0x1a4>
    b87c:	e3a01040 	mov	r1, #64	; 0x40
    b880:	e28d0004 	add	r0, sp, #4
    b884:	eb000530 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    b888:	eaffff93 	b	b6dc <CDWHCIDevice::InitCore()+0x30>
    b88c:	e28d0010 	add	r0, sp, #16
    b890:	eb000500 	bl	cc98 <CDWHCIRegister::Get() const>
    b894:	e1a00420 	lsr	r0, r0, #8
    b898:	e2000003 	and	r0, r0, #3
    b89c:	e3500001 	cmp	r0, #1
    b8a0:	1affffb6 	bne	b780 <CDWHCIDevice::InitCore()+0xd4>
    b8a4:	e28d0004 	add	r0, sp, #4
    b8a8:	e3a01802 	mov	r1, #131072	; 0x20000
    b8ac:	eb000526 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    b8b0:	e3a01702 	mov	r1, #524288	; 0x80000
    b8b4:	e28d0004 	add	r0, sp, #4
    b8b8:	eb000523 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    b8bc:	eaffffb5 	b	b798 <CDWHCIDevice::InitCore()+0xec>
    b8c0:	e59f203c 	ldr	r2, [pc, #60]	; b904 <CDWHCIDevice::InitCore()+0x258>
    b8c4:	e59f103c 	ldr	r1, [pc, #60]	; b908 <CDWHCIDevice::InitCore()+0x25c>
    b8c8:	e59f003c 	ldr	r0, [pc, #60]	; b90c <CDWHCIDevice::InitCore()+0x260>
    b8cc:	eb0063cb 	bl	24800 <assertion_failed>
    b8d0:	e59f2038 	ldr	r2, [pc, #56]	; b910 <CDWHCIDevice::InitCore()+0x264>
    b8d4:	e59f102c 	ldr	r1, [pc, #44]	; b908 <CDWHCIDevice::InitCore()+0x25c>
    b8d8:	e59f0034 	ldr	r0, [pc, #52]	; b914 <CDWHCIDevice::InitCore()+0x268>
    b8dc:	eb0063c7 	bl	24800 <assertion_failed>
    b8e0:	e59f2030 	ldr	r2, [pc, #48]	; b918 <CDWHCIDevice::InitCore()+0x26c>
    b8e4:	e59f101c 	ldr	r1, [pc, #28]	; b908 <CDWHCIDevice::InitCore()+0x25c>
    b8e8:	e59f002c 	ldr	r0, [pc, #44]	; b91c <CDWHCIDevice::InitCore()+0x270>
    b8ec:	eb0063c3 	bl	24800 <assertion_failed>
    b8f0:	2098000c 	.word	0x2098000c
    b8f4:	20980048 	.word	0x20980048
    b8f8:	20980008 	.word	0x20980008
    b8fc:	0003f43c 	.word	0x0003f43c
    b900:	0003f134 	.word	0x0003f134
    b904:	00000185 	.word	0x00000185
    b908:	0003f158 	.word	0x0003f158
    b90c:	0003f484 	.word	0x0003f484
    b910:	00000175 	.word	0x00000175
    b914:	0003f44c 	.word	0x0003f44c
    b918:	00000187 	.word	0x00000187
    b91c:	0003f498 	.word	0x0003f498

0000b920 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    b920:	e92d4030 	push	{r4, r5, lr}
    b924:	e1a05001 	mov	r5, r1
    b928:	e24dd01c 	sub	sp, sp, #28
    b92c:	e3a02000 	mov	r2, #0
    b930:	e1a04000 	mov	r4, r0
    b934:	e59f107c 	ldr	r1, [pc, #124]	; b9b8 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x98>
    b938:	e28d000c 	add	r0, sp, #12
    b93c:	eb0004bb 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b940:	e28d000c 	add	r0, sp, #12
    b944:	e3a01020 	mov	r1, #32
    b948:	eb0004ff 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    b94c:	e28d000c 	add	r0, sp, #12
    b950:	e3e01d1f 	mvn	r1, #1984	; 0x7c0
    b954:	eb0004ee 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    b958:	e1a01305 	lsl	r1, r5, #6
    b95c:	e28d000c 	add	r0, sp, #12
    b960:	eb0004f9 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    b964:	e28d000c 	add	r0, sp, #12
    b968:	eb0004bc 	bl	cc60 <CDWHCIRegister::Write()>
    b96c:	e3a0300a 	mov	r3, #10
    b970:	e1a00004 	mov	r0, r4
    b974:	e58d3000 	str	r3, [sp]
    b978:	e28d100c 	add	r1, sp, #12
    b97c:	e3a03000 	mov	r3, #0
    b980:	e3a02020 	mov	r2, #32
    b984:	ebfffeb0 	bl	b44c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    b988:	e3500000 	cmp	r0, #0
    b98c:	1a000003 	bne	b9a0 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x80>
    b990:	e28d000c 	add	r0, sp, #12
    b994:	eb0004a9 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    b998:	e28dd01c 	add	sp, sp, #28
    b99c:	e8bd8030 	pop	{r4, r5, pc}
    b9a0:	e3a00001 	mov	r0, #1
    b9a4:	eb007923 	bl	29e38 <CTimer::SimpleusDelay(unsigned int)>
    b9a8:	e28d000c 	add	r0, sp, #12
    b9ac:	eb0004a3 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    b9b0:	e28dd01c 	add	sp, sp, #28
    b9b4:	e8bd8030 	pop	{r4, r5, pc}
    b9b8:	20980010 	.word	0x20980010

0000b9bc <CDWHCIDevice::FlushRxFIFO()>:
    b9bc:	e92d4010 	push	{r4, lr}
    b9c0:	e24dd018 	sub	sp, sp, #24
    b9c4:	e3a02000 	mov	r2, #0
    b9c8:	e1a04000 	mov	r4, r0
    b9cc:	e59f1064 	ldr	r1, [pc, #100]	; ba38 <CDWHCIDevice::FlushRxFIFO()+0x7c>
    b9d0:	e28d000c 	add	r0, sp, #12
    b9d4:	eb000495 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    b9d8:	e3a01010 	mov	r1, #16
    b9dc:	e28d000c 	add	r0, sp, #12
    b9e0:	eb0004d9 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    b9e4:	e28d000c 	add	r0, sp, #12
    b9e8:	eb00049c 	bl	cc60 <CDWHCIRegister::Write()>
    b9ec:	e3a0300a 	mov	r3, #10
    b9f0:	e1a00004 	mov	r0, r4
    b9f4:	e58d3000 	str	r3, [sp]
    b9f8:	e28d100c 	add	r1, sp, #12
    b9fc:	e3a03000 	mov	r3, #0
    ba00:	e3a02010 	mov	r2, #16
    ba04:	ebfffe90 	bl	b44c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    ba08:	e3500000 	cmp	r0, #0
    ba0c:	1a000003 	bne	ba20 <CDWHCIDevice::FlushRxFIFO()+0x64>
    ba10:	e28d000c 	add	r0, sp, #12
    ba14:	eb000489 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    ba18:	e28dd018 	add	sp, sp, #24
    ba1c:	e8bd8010 	pop	{r4, pc}
    ba20:	e3a00001 	mov	r0, #1
    ba24:	eb007903 	bl	29e38 <CTimer::SimpleusDelay(unsigned int)>
    ba28:	e28d000c 	add	r0, sp, #12
    ba2c:	eb000483 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    ba30:	e28dd018 	add	sp, sp, #24
    ba34:	e8bd8010 	pop	{r4, pc}
    ba38:	20980010 	.word	0x20980010

0000ba3c <CDWHCIDevice::InitHost()>:
    ba3c:	e92d4010 	push	{r4, lr}
    ba40:	e24dd068 	sub	sp, sp, #104	; 0x68
    ba44:	e3a02000 	mov	r2, #0
    ba48:	e59f11cc 	ldr	r1, [pc, #460]	; bc1c <CDWHCIDevice::InitHost()+0x1e0>
    ba4c:	e1a04000 	mov	r4, r0
    ba50:	e28d0008 	add	r0, sp, #8
    ba54:	eb000475 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    ba58:	e28d0008 	add	r0, sp, #8
    ba5c:	eb00047f 	bl	cc60 <CDWHCIRegister::Write()>
    ba60:	e59f11b8 	ldr	r1, [pc, #440]	; bc20 <CDWHCIDevice::InitHost()+0x1e4>
    ba64:	e28d0014 	add	r0, sp, #20
    ba68:	eb00046c 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ba6c:	e28d0014 	add	r0, sp, #20
    ba70:	eb000473 	bl	cc44 <CDWHCIRegister::Read()>
    ba74:	e28d0014 	add	r0, sp, #20
    ba78:	e3e01003 	mvn	r1, #3
    ba7c:	eb0004a4 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    ba80:	e59f119c 	ldr	r1, [pc, #412]	; bc24 <CDWHCIDevice::InitHost()+0x1e8>
    ba84:	e28d0020 	add	r0, sp, #32
    ba88:	eb000464 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ba8c:	e59f1194 	ldr	r1, [pc, #404]	; bc28 <CDWHCIDevice::InitHost()+0x1ec>
    ba90:	e28d002c 	add	r0, sp, #44	; 0x2c
    ba94:	eb000461 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ba98:	e28d0020 	add	r0, sp, #32
    ba9c:	eb000468 	bl	cc44 <CDWHCIRegister::Read()>
    baa0:	e1a00320 	lsr	r0, r0, #6
    baa4:	e2000003 	and	r0, r0, #3
    baa8:	e3500002 	cmp	r0, #2
    baac:	0a00004d 	beq	bbe8 <CDWHCIDevice::InitHost()+0x1ac>
    bab0:	e3a01000 	mov	r1, #0
    bab4:	e28d0014 	add	r0, sp, #20
    bab8:	eb0004a3 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    babc:	e28d0014 	add	r0, sp, #20
    bac0:	eb000466 	bl	cc60 <CDWHCIRegister::Write()>
    bac4:	e3a02b01 	mov	r2, #1024	; 0x400
    bac8:	e59f115c 	ldr	r1, [pc, #348]	; bc2c <CDWHCIDevice::InitHost()+0x1f0>
    bacc:	e28d0038 	add	r0, sp, #56	; 0x38
    bad0:	eb000456 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bad4:	e28d0038 	add	r0, sp, #56	; 0x38
    bad8:	eb000460 	bl	cc60 <CDWHCIRegister::Write()>
    badc:	e3a02000 	mov	r2, #0
    bae0:	e59f1148 	ldr	r1, [pc, #328]	; bc30 <CDWHCIDevice::InitHost()+0x1f4>
    bae4:	e28d0044 	add	r0, sp, #68	; 0x44
    bae8:	eb000450 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    baec:	e28d0044 	add	r0, sp, #68	; 0x44
    baf0:	e3a01b01 	mov	r1, #1024	; 0x400
    baf4:	eb000494 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    baf8:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bafc:	e28d0044 	add	r0, sp, #68	; 0x44
    bb00:	eb000491 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    bb04:	e28d0044 	add	r0, sp, #68	; 0x44
    bb08:	eb000454 	bl	cc60 <CDWHCIRegister::Write()>
    bb0c:	e3a02000 	mov	r2, #0
    bb10:	e59f111c 	ldr	r1, [pc, #284]	; bc34 <CDWHCIDevice::InitHost()+0x1f8>
    bb14:	e28d0050 	add	r0, sp, #80	; 0x50
    bb18:	eb000444 	bl	cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    bb1c:	e28d0050 	add	r0, sp, #80	; 0x50
    bb20:	e3a01b02 	mov	r1, #2048	; 0x800
    bb24:	eb000488 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    bb28:	e3a01301 	mov	r1, #67108864	; 0x4000000
    bb2c:	e28d0050 	add	r0, sp, #80	; 0x50
    bb30:	eb000485 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    bb34:	e28d0050 	add	r0, sp, #80	; 0x50
    bb38:	eb000448 	bl	cc60 <CDWHCIRegister::Write()>
    bb3c:	e3a01010 	mov	r1, #16
    bb40:	e1a00004 	mov	r0, r4
    bb44:	ebffff75 	bl	b920 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    bb48:	e1a00004 	mov	r0, r4
    bb4c:	ebffff9a 	bl	b9bc <CDWHCIDevice::FlushRxFIFO()>
    bb50:	e59f10e0 	ldr	r1, [pc, #224]	; bc38 <CDWHCIDevice::InitHost()+0x1fc>
    bb54:	e28d005c 	add	r0, sp, #92	; 0x5c
    bb58:	eb000430 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bb5c:	e28d005c 	add	r0, sp, #92	; 0x5c
    bb60:	eb000437 	bl	cc44 <CDWHCIRegister::Read()>
    bb64:	e28d005c 	add	r0, sp, #92	; 0x5c
    bb68:	e3e0102e 	mvn	r1, #46	; 0x2e
    bb6c:	eb000468 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    bb70:	e28d005c 	add	r0, sp, #92	; 0x5c
    bb74:	eb000447 	bl	cc98 <CDWHCIRegister::Get() const>
    bb78:	e3100a01 	tst	r0, #4096	; 0x1000
    bb7c:	1a000004 	bne	bb94 <CDWHCIDevice::InitHost()+0x158>
    bb80:	e28d005c 	add	r0, sp, #92	; 0x5c
    bb84:	e3a01a01 	mov	r1, #4096	; 0x1000
    bb88:	eb00046f 	bl	cd4c <CDWHCIRegister::Or(unsigned int)>
    bb8c:	e28d005c 	add	r0, sp, #92	; 0x5c
    bb90:	eb000432 	bl	cc60 <CDWHCIRegister::Write()>
    bb94:	e1a00004 	mov	r0, r4
    bb98:	ebfff8a1 	bl	9e24 <CDWHCIDevice::EnableHostInterrupts()>
    bb9c:	e28d005c 	add	r0, sp, #92	; 0x5c
    bba0:	eb000426 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    bba4:	e28d0050 	add	r0, sp, #80	; 0x50
    bba8:	eb000424 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    bbac:	e28d0044 	add	r0, sp, #68	; 0x44
    bbb0:	eb000422 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    bbb4:	e28d0038 	add	r0, sp, #56	; 0x38
    bbb8:	eb000420 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    bbbc:	e28d002c 	add	r0, sp, #44	; 0x2c
    bbc0:	eb00041e 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    bbc4:	e28d0020 	add	r0, sp, #32
    bbc8:	eb00041c 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    bbcc:	e28d0014 	add	r0, sp, #20
    bbd0:	eb00041a 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    bbd4:	e28d0008 	add	r0, sp, #8
    bbd8:	eb000418 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    bbdc:	e3a00001 	mov	r0, #1
    bbe0:	e28dd068 	add	sp, sp, #104	; 0x68
    bbe4:	e8bd8010 	pop	{r4, pc}
    bbe8:	e28d0020 	add	r0, sp, #32
    bbec:	eb000429 	bl	cc98 <CDWHCIRegister::Get() const>
    bbf0:	e1a01420 	lsr	r1, r0, #8
    bbf4:	e2011003 	and	r1, r1, #3
    bbf8:	e3510001 	cmp	r1, #1
    bbfc:	1affffab 	bne	bab0 <CDWHCIDevice::InitHost()+0x74>
    bc00:	e28d002c 	add	r0, sp, #44	; 0x2c
    bc04:	e58d1004 	str	r1, [sp, #4]
    bc08:	eb00040d 	bl	cc44 <CDWHCIRegister::Read()>
    bc0c:	e3100802 	tst	r0, #131072	; 0x20000
    bc10:	e59d1004 	ldr	r1, [sp, #4]
    bc14:	1affffa6 	bne	bab4 <CDWHCIDevice::InitHost()+0x78>
    bc18:	eaffffa4 	b	bab0 <CDWHCIDevice::InitHost()+0x74>
    bc1c:	20980e00 	.word	0x20980e00
    bc20:	20980400 	.word	0x20980400
    bc24:	20980048 	.word	0x20980048
    bc28:	2098000c 	.word	0x2098000c
    bc2c:	20980024 	.word	0x20980024
    bc30:	20980028 	.word	0x20980028
    bc34:	20980100 	.word	0x20980100
    bc38:	20980440 	.word	0x20980440

0000bc3c <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    bc3c:	e92d4030 	push	{r4, r5, lr}
    bc40:	e24dd01c 	sub	sp, sp, #28
    bc44:	e1a05001 	mov	r5, r1
    bc48:	e28d000c 	add	r0, sp, #12
    bc4c:	e1a01002 	mov	r1, r2
    bc50:	eb0003f2 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bc54:	e3a03000 	mov	r3, #0
    bc58:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bc5c:	eb006bda 	bl	26bcc <CLogger::Get()>
    bc60:	e1a04000 	mov	r4, r0
    bc64:	e28d000c 	add	r0, sp, #12
    bc68:	eb0003f5 	bl	cc44 <CDWHCIRegister::Read()>
    bc6c:	e59f3020 	ldr	r3, [pc, #32]	; bc94 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x58>
    bc70:	e88d0021 	stm	sp, {r0, r5}
    bc74:	e3a02004 	mov	r2, #4
    bc78:	e1a00004 	mov	r0, r4
    bc7c:	e59f1014 	ldr	r1, [pc, #20]	; bc98 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    bc80:	eb006b0e 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bc84:	e28d000c 	add	r0, sp, #12
    bc88:	eb0003ec 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    bc8c:	e28dd01c 	add	sp, sp, #28
    bc90:	e8bd8030 	pop	{r4, r5, pc}
    bc94:	0003f194 	.word	0x0003f194
    bc98:	0003f134 	.word	0x0003f134

0000bc9c <CDWHCIDevice::DumpStatus(unsigned int)>:
    bc9c:	e92d4070 	push	{r4, r5, r6, lr}
    bca0:	e1a05001 	mov	r5, r1
    bca4:	e59f0104 	ldr	r0, [pc, #260]	; bdb0 <CDWHCIDevice::DumpStatus(unsigned int)+0x114>
    bca8:	e59f1104 	ldr	r1, [pc, #260]	; bdb4 <CDWHCIDevice::DumpStatus(unsigned int)+0x118>
    bcac:	ebfff797 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bcb0:	e59f1100 	ldr	r1, [pc, #256]	; bdb8 <CDWHCIDevice::DumpStatus(unsigned int)+0x11c>
    bcb4:	e59f0100 	ldr	r0, [pc, #256]	; bdbc <CDWHCIDevice::DumpStatus(unsigned int)+0x120>
    bcb8:	ebfff794 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bcbc:	e59f10fc 	ldr	r1, [pc, #252]	; bdc0 <CDWHCIDevice::DumpStatus(unsigned int)+0x124>
    bcc0:	e59f00fc 	ldr	r0, [pc, #252]	; bdc4 <CDWHCIDevice::DumpStatus(unsigned int)+0x128>
    bcc4:	ebfff791 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bcc8:	e59f10f8 	ldr	r1, [pc, #248]	; bdc8 <CDWHCIDevice::DumpStatus(unsigned int)+0x12c>
    bccc:	e59f00f8 	ldr	r0, [pc, #248]	; bdcc <CDWHCIDevice::DumpStatus(unsigned int)+0x130>
    bcd0:	ebfff78e 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bcd4:	e59f10f4 	ldr	r1, [pc, #244]	; bdd0 <CDWHCIDevice::DumpStatus(unsigned int)+0x134>
    bcd8:	e59f00f4 	ldr	r0, [pc, #244]	; bdd4 <CDWHCIDevice::DumpStatus(unsigned int)+0x138>
    bcdc:	ebfff78b 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bce0:	e59f10f0 	ldr	r1, [pc, #240]	; bdd8 <CDWHCIDevice::DumpStatus(unsigned int)+0x13c>
    bce4:	e59f00f0 	ldr	r0, [pc, #240]	; bddc <CDWHCIDevice::DumpStatus(unsigned int)+0x140>
    bce8:	ebfff788 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bcec:	e59f10ec 	ldr	r1, [pc, #236]	; bde0 <CDWHCIDevice::DumpStatus(unsigned int)+0x144>
    bcf0:	e59f00ec 	ldr	r0, [pc, #236]	; bde4 <CDWHCIDevice::DumpStatus(unsigned int)+0x148>
    bcf4:	ebfff785 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bcf8:	e59f10e8 	ldr	r1, [pc, #232]	; bde8 <CDWHCIDevice::DumpStatus(unsigned int)+0x14c>
    bcfc:	e59f00e8 	ldr	r0, [pc, #232]	; bdec <CDWHCIDevice::DumpStatus(unsigned int)+0x150>
    bd00:	ebfff782 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd04:	e59f10e4 	ldr	r1, [pc, #228]	; bdf0 <CDWHCIDevice::DumpStatus(unsigned int)+0x154>
    bd08:	e59f00e4 	ldr	r0, [pc, #228]	; bdf4 <CDWHCIDevice::DumpStatus(unsigned int)+0x158>
    bd0c:	ebfff77f 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd10:	e59f10e0 	ldr	r1, [pc, #224]	; bdf8 <CDWHCIDevice::DumpStatus(unsigned int)+0x15c>
    bd14:	e59f00e0 	ldr	r0, [pc, #224]	; bdfc <CDWHCIDevice::DumpStatus(unsigned int)+0x160>
    bd18:	ebfff77c 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd1c:	e59f10dc 	ldr	r1, [pc, #220]	; be00 <CDWHCIDevice::DumpStatus(unsigned int)+0x164>
    bd20:	e59f00dc 	ldr	r0, [pc, #220]	; be04 <CDWHCIDevice::DumpStatus(unsigned int)+0x168>
    bd24:	ebfff779 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd28:	e59f40d8 	ldr	r4, [pc, #216]	; be08 <CDWHCIDevice::DumpStatus(unsigned int)+0x16c>
    bd2c:	e59f10d8 	ldr	r1, [pc, #216]	; be0c <CDWHCIDevice::DumpStatus(unsigned int)+0x170>
    bd30:	e59f00d8 	ldr	r0, [pc, #216]	; be10 <CDWHCIDevice::DumpStatus(unsigned int)+0x174>
    bd34:	ebfff775 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd38:	e59f10d4 	ldr	r1, [pc, #212]	; be14 <CDWHCIDevice::DumpStatus(unsigned int)+0x178>
    bd3c:	e59f00d4 	ldr	r0, [pc, #212]	; be18 <CDWHCIDevice::DumpStatus(unsigned int)+0x17c>
    bd40:	ebfff772 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd44:	e0854004 	add	r4, r5, r4
    bd48:	e59f10cc 	ldr	r1, [pc, #204]	; be1c <CDWHCIDevice::DumpStatus(unsigned int)+0x180>
    bd4c:	e59f00cc 	ldr	r0, [pc, #204]	; be20 <CDWHCIDevice::DumpStatus(unsigned int)+0x184>
    bd50:	e1a04284 	lsl	r4, r4, #5
    bd54:	ebfff76d 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd58:	e59f10c4 	ldr	r1, [pc, #196]	; be24 <CDWHCIDevice::DumpStatus(unsigned int)+0x188>
    bd5c:	e59f00c4 	ldr	r0, [pc, #196]	; be28 <CDWHCIDevice::DumpStatus(unsigned int)+0x18c>
    bd60:	ebfff76a 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd64:	e1a01004 	mov	r1, r4
    bd68:	e59f00bc 	ldr	r0, [pc, #188]	; be2c <CDWHCIDevice::DumpStatus(unsigned int)+0x190>
    bd6c:	ebfff767 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd70:	e2841004 	add	r1, r4, #4
    bd74:	e59f00b4 	ldr	r0, [pc, #180]	; be30 <CDWHCIDevice::DumpStatus(unsigned int)+0x194>
    bd78:	ebfff764 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd7c:	e2841008 	add	r1, r4, #8
    bd80:	e59f00ac 	ldr	r0, [pc, #172]	; be34 <CDWHCIDevice::DumpStatus(unsigned int)+0x198>
    bd84:	ebfff761 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd88:	e284100c 	add	r1, r4, #12
    bd8c:	e59f00a4 	ldr	r0, [pc, #164]	; be38 <CDWHCIDevice::DumpStatus(unsigned int)+0x19c>
    bd90:	ebfff75e 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bd94:	e2841010 	add	r1, r4, #16
    bd98:	e59f009c 	ldr	r0, [pc, #156]	; be3c <CDWHCIDevice::DumpStatus(unsigned int)+0x1a0>
    bd9c:	ebfff75b 	bl	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bda0:	e2841014 	add	r1, r4, #20
    bda4:	e59f0094 	ldr	r0, [pc, #148]	; be40 <CDWHCIDevice::DumpStatus(unsigned int)+0x1a4>
    bda8:	e8bd4070 	pop	{r4, r5, r6, lr}
    bdac:	eafff757 	b	9b10 <CDWHCIDevice::DumpRegister(char const*, unsigned int) [clone .constprop.13]>
    bdb0:	0003f4d0 	.word	0x0003f4d0
    bdb4:	20980000 	.word	0x20980000
    bdb8:	20980008 	.word	0x20980008
    bdbc:	0003f4dc 	.word	0x0003f4dc
    bdc0:	2098000c 	.word	0x2098000c
    bdc4:	0003f4e4 	.word	0x0003f4e4
    bdc8:	20980010 	.word	0x20980010
    bdcc:	0003f4ec 	.word	0x0003f4ec
    bdd0:	20980014 	.word	0x20980014
    bdd4:	0003f4f4 	.word	0x0003f4f4
    bdd8:	20980018 	.word	0x20980018
    bddc:	0003f500 	.word	0x0003f500
    bde0:	20980024 	.word	0x20980024
    bde4:	0003f50c 	.word	0x0003f50c
    bde8:	20980028 	.word	0x20980028
    bdec:	0003f518 	.word	0x0003f518
    bdf0:	2098002c 	.word	0x2098002c
    bdf4:	0003f52c 	.word	0x0003f52c
    bdf8:	20980100 	.word	0x20980100
    bdfc:	0003f53c 	.word	0x0003f53c
    be00:	20980400 	.word	0x20980400
    be04:	0003f554 	.word	0x0003f554
    be08:	0104c028 	.word	0x0104c028
    be0c:	20980410 	.word	0x20980410
    be10:	0003f560 	.word	0x0003f560
    be14:	20980414 	.word	0x20980414
    be18:	0003f578 	.word	0x0003f578
    be1c:	20980418 	.word	0x20980418
    be20:	0003f58c 	.word	0x0003f58c
    be24:	20980440 	.word	0x20980440
    be28:	0003f5a4 	.word	0x0003f5a4
    be2c:	0003f5b0 	.word	0x0003f5b0
    be30:	0003f5c8 	.word	0x0003f5c8
    be34:	0003f5e0 	.word	0x0003f5e0
    be38:	0003f5f4 	.word	0x0003f5f4
    be3c:	0003f60c 	.word	0x0003f60c
    be40:	0003f624 	.word	0x0003f624

0000be44 <CDWHCIDevice::~CDWHCIDevice()>:
    be44:	e3a03001 	mov	r3, #1
    be48:	e92d4030 	push	{r4, r5, lr}
    be4c:	e5901008 	ldr	r1, [r0, #8]
    be50:	e59f20bc 	ldr	r2, [pc, #188]	; bf14 <CDWHCIDevice::~CDWHCIDevice()+0xd0>
    be54:	e3510000 	cmp	r1, #0
    be58:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    be5c:	e5802000 	str	r2, [r0]
    be60:	e5c03081 	strb	r3, [r0, #129]	; 0x81
    be64:	0a000022 	beq	bef4 <CDWHCIDevice::~CDWHCIDevice()+0xb0>
    be68:	e1a04000 	mov	r4, r0
    be6c:	e3a000c8 	mov	r0, #200	; 0xc8
    be70:	eb0077e9 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
    be74:	e5940004 	ldr	r0, [r4, #4]
    be78:	e3500000 	cmp	r0, #0
    be7c:	0a000020 	beq	bf04 <CDWHCIDevice::~CDWHCIDevice()+0xc0>
    be80:	e3a05000 	mov	r5, #0
    be84:	e3a01009 	mov	r1, #9
    be88:	eb0080e0 	bl	2c210 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    be8c:	e1a00004 	mov	r0, r4
    be90:	ebfffddd 	bl	b60c <CDWHCIDevice::Reset()>
    be94:	e1a01005 	mov	r1, r5
    be98:	e28d000c 	add	r0, sp, #12
    be9c:	eb006278 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    bea0:	e3a03014 	mov	r3, #20
    bea4:	e3a01003 	mov	r1, #3
    bea8:	e3a0c002 	mov	ip, #2
    beac:	e08d2003 	add	r2, sp, r3
    beb0:	e58d1020 	str	r1, [sp, #32]
    beb4:	e28d000c 	add	r0, sp, #12
    beb8:	e59f1058 	ldr	r1, [pc, #88]	; bf18 <CDWHCIDevice::~CDWHCIDevice()+0xd4>
    bebc:	e58d5000 	str	r5, [sp]
    bec0:	e58dc024 	str	ip, [sp, #36]	; 0x24
    bec4:	eb00627a 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    bec8:	e5845004 	str	r5, [r4, #4]
    becc:	e5845008 	str	r5, [r4, #8]
    bed0:	e28d000c 	add	r0, sp, #12
    bed4:	eb006271 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
    bed8:	e2840074 	add	r0, r4, #116	; 0x74
    bedc:	eb0003ff 	bl	cee0 <CDWHCIRootPort::~CDWHCIRootPort()>
    bee0:	e1a00004 	mov	r0, r4
    bee4:	eb001a4e 	bl	12824 <CUSBHostController::~CUSBHostController()>
    bee8:	e1a00004 	mov	r0, r4
    beec:	e28dd02c 	add	sp, sp, #44	; 0x2c
    bef0:	e8bd8030 	pop	{r4, r5, pc}
    bef4:	e3a0205d 	mov	r2, #93	; 0x5d
    bef8:	e59f101c 	ldr	r1, [pc, #28]	; bf1c <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    befc:	e59f001c 	ldr	r0, [pc, #28]	; bf20 <CDWHCIDevice::~CDWHCIDevice()+0xdc>
    bf00:	eb00623e 	bl	24800 <assertion_failed>
    bf04:	e3a02060 	mov	r2, #96	; 0x60
    bf08:	e59f100c 	ldr	r1, [pc, #12]	; bf1c <CDWHCIDevice::~CDWHCIDevice()+0xd8>
    bf0c:	e59f0010 	ldr	r0, [pc, #16]	; bf24 <CDWHCIDevice::~CDWHCIDevice()+0xe0>
    bf10:	eb00623a 	bl	24800 <assertion_failed>
    bf14:	0003f144 	.word	0x0003f144
    bf18:	00028001 	.word	0x00028001
    bf1c:	0003f158 	.word	0x0003f158
    bf20:	0003f1b8 	.word	0x0003f1b8
    bf24:	0003f1a0 	.word	0x0003f1a0

0000bf28 <CDWHCIDevice::~CDWHCIDevice()>:
    bf28:	e92d4010 	push	{r4, lr}
    bf2c:	e1a04000 	mov	r4, r0
    bf30:	ebffffc3 	bl	be44 <CDWHCIDevice::~CDWHCIDevice()>
    bf34:	e1a00004 	mov	r0, r4
    bf38:	e3a01084 	mov	r1, #132	; 0x84
    bf3c:	eb007c5a 	bl	2b0ac <operator delete(void*, unsigned int)>
    bf40:	e1a00004 	mov	r0, r4
    bf44:	e8bd8010 	pop	{r4, pc}

0000bf48 <CDWHCIDevice::ReScanDevices()>:
    bf48:	e92d4010 	push	{r4, lr}
    bf4c:	e3a03000 	mov	r3, #0
    bf50:	e1a04000 	mov	r4, r0
    bf54:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
    bf58:	e5d03080 	ldrb	r3, [r0, #128]	; 0x80
    bf5c:	e3530000 	cmp	r3, #0
    bf60:	1a00000e 	bne	bfa0 <CDWHCIDevice::ReScanDevices()+0x58>
    bf64:	ebfffd71 	bl	b530 <CDWHCIDevice::EnableRootPort()>
    bf68:	e3500000 	cmp	r0, #0
    bf6c:	0a000010 	beq	bfb4 <CDWHCIDevice::ReScanDevices()+0x6c>
    bf70:	e3a03001 	mov	r3, #1
    bf74:	e2840074 	add	r0, r4, #116	; 0x74
    bf78:	e5c43080 	strb	r3, [r4, #128]	; 0x80
    bf7c:	eb00042b 	bl	d030 <CDWHCIRootPort::Initialize()>
    bf80:	e3500000 	cmp	r0, #0
    bf84:	1a000007 	bne	bfa8 <CDWHCIDevice::ReScanDevices()+0x60>
    bf88:	eb006b0f 	bl	26bcc <CLogger::Get()>
    bf8c:	e59f3038 	ldr	r3, [pc, #56]	; bfcc <CDWHCIDevice::ReScanDevices()+0x84>
    bf90:	e3a02002 	mov	r2, #2
    bf94:	e59f1034 	ldr	r1, [pc, #52]	; bfd0 <CDWHCIDevice::ReScanDevices()+0x88>
    bf98:	eb006a48 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bf9c:	ea000001 	b	bfa8 <CDWHCIDevice::ReScanDevices()+0x60>
    bfa0:	e2800074 	add	r0, r0, #116	; 0x74
    bfa4:	eb000401 	bl	cfb0 <CDWHCIRootPort::ReScanDevices()>
    bfa8:	e3a03000 	mov	r3, #0
    bfac:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
    bfb0:	e8bd8010 	pop	{r4, pc}
    bfb4:	eb006b04 	bl	26bcc <CLogger::Get()>
    bfb8:	e59f3014 	ldr	r3, [pc, #20]	; bfd4 <CDWHCIDevice::ReScanDevices()+0x8c>
    bfbc:	e3a02002 	mov	r2, #2
    bfc0:	e59f1008 	ldr	r1, [pc, #8]	; bfd0 <CDWHCIDevice::ReScanDevices()+0x88>
    bfc4:	eb006a3d 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    bfc8:	eafffff6 	b	bfa8 <CDWHCIDevice::ReScanDevices()+0x60>
    bfcc:	0003f63c 	.word	0x0003f63c
    bfd0:	0003f134 	.word	0x0003f134
    bfd4:	0003f658 	.word	0x0003f658

0000bfd8 <CDWHCIDevice::Initialize()>:
    bfd8:	e92d4070 	push	{r4, r5, r6, lr}
    bfdc:	e3a01001 	mov	r1, #1
    bfe0:	e24dd020 	sub	sp, sp, #32
    bfe4:	e1a04000 	mov	r4, r0
    bfe8:	e3a00020 	mov	r0, #32
    bfec:	eb0021db 	bl	14760 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    bff0:	e3a01001 	mov	r1, #1
    bff4:	e3a00010 	mov	r0, #16
    bff8:	eb0006f6 	bl	dbd8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    bffc:	e3a01001 	mov	r1, #1
    c000:	e3a00010 	mov	r0, #16
    c004:	eb000137 	bl	c4e8 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    c008:	e3a01001 	mov	r1, #1
    c00c:	e3a00010 	mov	r0, #16
    c010:	eb0002e6 	bl	cbb0 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    c014:	e3a01001 	mov	r1, #1
    c018:	e3a00010 	mov	r0, #16
    c01c:	eb0001d1 	bl	c768 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    c020:	e3a05000 	mov	r5, #0
    c024:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
    c028:	e5943004 	ldr	r3, [r4, #4]
    c02c:	e1530005 	cmp	r3, r5
    c030:	0a000041 	beq	c13c <CDWHCIDevice::Initialize()+0x164>
    c034:	e5943008 	ldr	r3, [r4, #8]
    c038:	e3530000 	cmp	r3, #0
    c03c:	0a000042 	beq	c14c <CDWHCIDevice::Initialize()+0x174>
    c040:	e59f1164 	ldr	r1, [pc, #356]	; c1ac <CDWHCIDevice::Initialize()+0x1d4>
    c044:	e28d0008 	add	r0, sp, #8
    c048:	eb0002f4 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c04c:	e28d0008 	add	r0, sp, #8
    c050:	eb0002fb 	bl	cc44 <CDWHCIRegister::Read()>
    c054:	e59f3154 	ldr	r3, [pc, #340]	; c1b0 <CDWHCIDevice::Initialize()+0x1d8>
    c058:	e1500003 	cmp	r0, r3
    c05c:	0a00000f 	beq	c0a0 <CDWHCIDevice::Initialize()+0xc8>
    c060:	eb006ad9 	bl	26bcc <CLogger::Get()>
    c064:	e1a04000 	mov	r4, r0
    c068:	e28d0008 	add	r0, sp, #8
    c06c:	eb000309 	bl	cc98 <CDWHCIRegister::Get() const>
    c070:	e59f313c 	ldr	r3, [pc, #316]	; c1b4 <CDWHCIDevice::Initialize()+0x1dc>
    c074:	e58d0000 	str	r0, [sp]
    c078:	e3a02001 	mov	r2, #1
    c07c:	e1a00004 	mov	r0, r4
    c080:	e59f1130 	ldr	r1, [pc, #304]	; c1b8 <CDWHCIDevice::Initialize()+0x1e0>
    c084:	e1a06005 	mov	r6, r5
    c088:	eb006a0c 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c08c:	e28d0008 	add	r0, sp, #8
    c090:	eb0002ea 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    c094:	e1a00006 	mov	r0, r6
    c098:	e28dd020 	add	sp, sp, #32
    c09c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c0a0:	e1a00004 	mov	r0, r4
    c0a4:	ebfff724 	bl	9d3c <CDWHCIDevice::PowerOn()>
    c0a8:	e2506000 	subs	r6, r0, #0
    c0ac:	0a00001c 	beq	c124 <CDWHCIDevice::Initialize()+0x14c>
    c0b0:	e59f1104 	ldr	r1, [pc, #260]	; c1bc <CDWHCIDevice::Initialize()+0x1e4>
    c0b4:	e28d0014 	add	r0, sp, #20
    c0b8:	eb0002d8 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c0bc:	e28d0014 	add	r0, sp, #20
    c0c0:	eb0002df 	bl	cc44 <CDWHCIRegister::Read()>
    c0c4:	e28d0014 	add	r0, sp, #20
    c0c8:	e3e01001 	mvn	r1, #1
    c0cc:	eb000310 	bl	cd14 <CDWHCIRegister::And(unsigned int)>
    c0d0:	e28d0014 	add	r0, sp, #20
    c0d4:	eb0002e1 	bl	cc60 <CDWHCIRegister::Write()>
    c0d8:	e5940004 	ldr	r0, [r4, #4]
    c0dc:	e3500000 	cmp	r0, #0
    c0e0:	0a00002d 	beq	c19c <CDWHCIDevice::Initialize()+0x1c4>
    c0e4:	e1a03004 	mov	r3, r4
    c0e8:	e59f20d0 	ldr	r2, [pc, #208]	; c1c0 <CDWHCIDevice::Initialize()+0x1e8>
    c0ec:	e3a01009 	mov	r1, #9
    c0f0:	eb008012 	bl	2c140 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    c0f4:	e1a00004 	mov	r0, r4
    c0f8:	ebfffd6b 	bl	b6ac <CDWHCIDevice::InitCore()>
    c0fc:	e2506000 	subs	r6, r0, #0
    c100:	1a000015 	bne	c15c <CDWHCIDevice::Initialize()+0x184>
    c104:	eb006ab0 	bl	26bcc <CLogger::Get()>
    c108:	e59f30b4 	ldr	r3, [pc, #180]	; c1c4 <CDWHCIDevice::Initialize()+0x1ec>
    c10c:	e3a02001 	mov	r2, #1
    c110:	e59f10a0 	ldr	r1, [pc, #160]	; c1b8 <CDWHCIDevice::Initialize()+0x1e0>
    c114:	eb0069e9 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c118:	e28d0014 	add	r0, sp, #20
    c11c:	eb0002c7 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    c120:	eaffffd9 	b	c08c <CDWHCIDevice::Initialize()+0xb4>
    c124:	eb006aa8 	bl	26bcc <CLogger::Get()>
    c128:	e59f3098 	ldr	r3, [pc, #152]	; c1c8 <CDWHCIDevice::Initialize()+0x1f0>
    c12c:	e3a02001 	mov	r2, #1
    c130:	e59f1080 	ldr	r1, [pc, #128]	; c1b8 <CDWHCIDevice::Initialize()+0x1e0>
    c134:	eb0069e1 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c138:	eaffffd3 	b	c08c <CDWHCIDevice::Initialize()+0xb4>
    c13c:	e3a0207a 	mov	r2, #122	; 0x7a
    c140:	e59f1084 	ldr	r1, [pc, #132]	; c1cc <CDWHCIDevice::Initialize()+0x1f4>
    c144:	e59f0084 	ldr	r0, [pc, #132]	; c1d0 <CDWHCIDevice::Initialize()+0x1f8>
    c148:	eb0061ac 	bl	24800 <assertion_failed>
    c14c:	e3a0207b 	mov	r2, #123	; 0x7b
    c150:	e59f1074 	ldr	r1, [pc, #116]	; c1cc <CDWHCIDevice::Initialize()+0x1f4>
    c154:	e59f0078 	ldr	r0, [pc, #120]	; c1d4 <CDWHCIDevice::Initialize()+0x1fc>
    c158:	eb0061a8 	bl	24800 <assertion_failed>
    c15c:	e1a00004 	mov	r0, r4
    c160:	ebfff710 	bl	9da8 <CDWHCIDevice::EnableGlobalInterrupts()>
    c164:	e1a00004 	mov	r0, r4
    c168:	ebfffe33 	bl	ba3c <CDWHCIDevice::InitHost()>
    c16c:	e2506000 	subs	r6, r0, #0
    c170:	1a000005 	bne	c18c <CDWHCIDevice::Initialize()+0x1b4>
    c174:	eb006a94 	bl	26bcc <CLogger::Get()>
    c178:	e59f3058 	ldr	r3, [pc, #88]	; c1d8 <CDWHCIDevice::Initialize()+0x200>
    c17c:	e3a02001 	mov	r2, #1
    c180:	e59f1030 	ldr	r1, [pc, #48]	; c1b8 <CDWHCIDevice::Initialize()+0x1e0>
    c184:	eb0069cd 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c188:	eaffffe2 	b	c118 <CDWHCIDevice::Initialize()+0x140>
    c18c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
    c190:	e1a00004 	mov	r0, r4
    c194:	ebffff6b 	bl	bf48 <CDWHCIDevice::ReScanDevices()>
    c198:	eaffffde 	b	c118 <CDWHCIDevice::Initialize()+0x140>
    c19c:	e3a02090 	mov	r2, #144	; 0x90
    c1a0:	e59f1024 	ldr	r1, [pc, #36]	; c1cc <CDWHCIDevice::Initialize()+0x1f4>
    c1a4:	e59f0024 	ldr	r0, [pc, #36]	; c1d0 <CDWHCIDevice::Initialize()+0x1f8>
    c1a8:	eb006194 	bl	24800 <assertion_failed>
    c1ac:	20980040 	.word	0x20980040
    c1b0:	4f54280a 	.word	0x4f54280a
    c1b4:	0003f67c 	.word	0x0003f67c
    c1b8:	0003f134 	.word	0x0003f134
    c1bc:	20980008 	.word	0x20980008
    c1c0:	0000af88 	.word	0x0000af88
    c1c4:	0003f6a4 	.word	0x0003f6a4
    c1c8:	0003f694 	.word	0x0003f694
    c1cc:	0003f158 	.word	0x0003f158
    c1d0:	0003f1a0 	.word	0x0003f1a0
    c1d4:	0003f1b8 	.word	0x0003f1b8
    c1d8:	0003f6bc 	.word	0x0003f6bc

0000c1dc <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    c1dc:	e12fff1e 	bx	lr

0000c1e0 <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
    c1e0:	e3a03000 	mov	r3, #0
    c1e4:	e5803008 	str	r3, [r0, #8]
    c1e8:	e12fff1e 	bx	lr

0000c1ec <CDWHCIFrameSchedulerNonPeriodic::WaitForFrame()>:
    c1ec:	e12fff1e 	bx	lr

0000c1f0 <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
    c1f0:	e3a00000 	mov	r0, #0
    c1f4:	e12fff1e 	bx	lr

0000c1f8 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
    c1f8:	e5903008 	ldr	r3, [r0, #8]
    c1fc:	e92d4010 	push	{r4, lr}
    c200:	e2433001 	sub	r3, r3, #1
    c204:	e3530004 	cmp	r3, #4
    c208:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c20c:	ea000010 	b	c254 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x5c>
    c210:	0000c23c 	.word	0x0000c23c
    c214:	0000c22c 	.word	0x0000c22c
    c218:	0000c22c 	.word	0x0000c22c
    c21c:	0000c224 	.word	0x0000c224
    c220:	0000c224 	.word	0x0000c224
    c224:	e3a00000 	mov	r0, #0
    c228:	e8bd8010 	pop	{r4, pc}
    c22c:	e59f0030 	ldr	r0, [pc, #48]	; c264 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x6c>
    c230:	eb007700 	bl	29e38 <CTimer::SimpleusDelay(unsigned int)>
    c234:	e3a00001 	mov	r0, #1
    c238:	e8bd8010 	pop	{r4, pc}
    c23c:	e3a02002 	mov	r2, #2
    c240:	e3a03003 	mov	r3, #3
    c244:	e5802008 	str	r2, [r0, #8]
    c248:	e580300c 	str	r3, [r0, #12]
    c24c:	e3a00001 	mov	r0, #1
    c250:	e8bd8010 	pop	{r4, pc}
    c254:	e3a0205f 	mov	r2, #95	; 0x5f
    c258:	e59f1008 	ldr	r1, [pc, #8]	; c268 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x70>
    c25c:	e59f0008 	ldr	r0, [pc, #8]	; c26c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x74>
    c260:	eb006166 	bl	24800 <assertion_failed>
    c264:	00000271 	.word	0x00000271
    c268:	0003f6f8 	.word	0x0003f6f8
    c26c:	0003fd5c 	.word	0x0003fd5c

0000c270 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
    c270:	e92d4010 	push	{r4, lr}
    c274:	e5903008 	ldr	r3, [r0, #8]
    c278:	e24dd010 	sub	sp, sp, #16
    c27c:	e3530000 	cmp	r3, #0
    c280:	e1a04000 	mov	r4, r0
    c284:	0a000017 	beq	c2e8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x78>
    c288:	e2433002 	sub	r3, r3, #2
    c28c:	e3530001 	cmp	r3, #1
    c290:	8a000010 	bhi	c2d8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x68>
    c294:	e3110001 	tst	r1, #1
    c298:	13a03004 	movne	r3, #4
    c29c:	15803008 	strne	r3, [r0, #8]
    c2a0:	1a00000a 	bne	c2d0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    c2a4:	e3110060 	tst	r1, #96	; 0x60
    c2a8:	1a000016 	bne	c308 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x98>
    c2ac:	e3110010 	tst	r1, #16
    c2b0:	0a00001f 	beq	c334 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xc4>
    c2b4:	e590300c 	ldr	r3, [r0, #12]
    c2b8:	e3530000 	cmp	r3, #0
    c2bc:	e2433001 	sub	r3, r3, #1
    c2c0:	e580300c 	str	r3, [r0, #12]
    c2c4:	0a000017 	beq	c328 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xb8>
    c2c8:	e3a03003 	mov	r3, #3
    c2cc:	e5843008 	str	r3, [r4, #8]
    c2d0:	e28dd010 	add	sp, sp, #16
    c2d4:	e8bd8010 	pop	{r4, pc}
    c2d8:	e3a0209b 	mov	r2, #155	; 0x9b
    c2dc:	e59f1080 	ldr	r1, [pc, #128]	; c364 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf4>
    c2e0:	e59f0080 	ldr	r0, [pc, #128]	; c368 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    c2e4:	eb006145 	bl	24800 <assertion_failed>
    c2e8:	e3110020 	tst	r1, #32
    c2ec:	13a03001 	movne	r3, #1
    c2f0:	15803008 	strne	r3, [r0, #8]
    c2f4:	1afffff5 	bne	c2d0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    c2f8:	e3a0206b 	mov	r2, #107	; 0x6b
    c2fc:	e59f1060 	ldr	r1, [pc, #96]	; c364 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf4>
    c300:	e59f0064 	ldr	r0, [pc, #100]	; c36c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xfc>
    c304:	eb00613d 	bl	24800 <assertion_failed>
    c308:	e590300c 	ldr	r3, [r0, #12]
    c30c:	e3530000 	cmp	r3, #0
    c310:	e2433001 	sub	r3, r3, #1
    c314:	e580300c 	str	r3, [r0, #12]
    c318:	1affffea 	bne	c2c8 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x58>
    c31c:	e3a03005 	mov	r3, #5
    c320:	e5843008 	str	r3, [r4, #8]
    c324:	eaffffe9 	b	c2d0 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    c328:	e59f0040 	ldr	r0, [pc, #64]	; c370 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x100>
    c32c:	eb0076c1 	bl	29e38 <CTimer::SimpleusDelay(unsigned int)>
    c330:	eafffff9 	b	c31c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xac>
    c334:	e58d100c 	str	r1, [sp, #12]
    c338:	eb006a23 	bl	26bcc <CLogger::Get()>
    c33c:	e59d100c 	ldr	r1, [sp, #12]
    c340:	e3a02001 	mov	r2, #1
    c344:	e58d1000 	str	r1, [sp]
    c348:	e59f3024 	ldr	r3, [pc, #36]	; c374 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x104>
    c34c:	e59f1024 	ldr	r1, [pc, #36]	; c378 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x108>
    c350:	eb00695a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c354:	e3a02096 	mov	r2, #150	; 0x96
    c358:	e59f1004 	ldr	r1, [pc, #4]	; c364 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf4>
    c35c:	e59f0004 	ldr	r0, [pc, #4]	; c368 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xf8>
    c360:	eb006126 	bl	24800 <assertion_failed>
    c364:	0003f6f8 	.word	0x0003f6f8
    c368:	0003fd5c 	.word	0x0003fd5c
    c36c:	0003f710 	.word	0x0003f710
    c370:	00000271 	.word	0x00000271
    c374:	0003f734 	.word	0x0003f734
    c378:	0003f748 	.word	0x0003f748

0000c37c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
    c37c:	e59f3034 	ldr	r3, [pc, #52]	; c3b8 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x3c>
    c380:	e92d4010 	push	{r4, lr}
    c384:	e5803000 	str	r3, [r0]
    c388:	e1a04000 	mov	r4, r0
    c38c:	eb0076db 	bl	29f00 <CTimer::Get()>
    c390:	e3a03006 	mov	r3, #6
    c394:	e3500000 	cmp	r0, #0
    c398:	e9840009 	stmib	r4, {r0, r3}
    c39c:	0a000001 	beq	c3a8 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x2c>
    c3a0:	e1a00004 	mov	r0, r4
    c3a4:	e8bd8010 	pop	{r4, pc}
    c3a8:	e3a0202e 	mov	r2, #46	; 0x2e
    c3ac:	e59f1008 	ldr	r1, [pc, #8]	; c3bc <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x40>
    c3b0:	e59f0008 	ldr	r0, [pc, #8]	; c3c0 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x44>
    c3b4:	eb006111 	bl	24800 <assertion_failed>
    c3b8:	0003f6dc 	.word	0x0003f6dc
    c3bc:	0003f6f8 	.word	0x0003f6f8
    c3c0:	0003f1b8 	.word	0x0003f1b8

0000c3c4 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
    c3c4:	e3500010 	cmp	r0, #16
    c3c8:	e92d4010 	push	{r4, lr}
    c3cc:	1a000005 	bne	c3e8 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x24>
    c3d0:	e59f3030 	ldr	r3, [pc, #48]	; c408 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x44>
    c3d4:	e5930000 	ldr	r0, [r3]
    c3d8:	e3500000 	cmp	r0, #0
    c3dc:	0a000005 	beq	c3f8 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x34>
    c3e0:	e8bd4010 	pop	{r4, lr}
    c3e4:	ea00620b 	b	24c18 <CClassAllocator::Allocate()>
    c3e8:	e3a020bd 	mov	r2, #189	; 0xbd
    c3ec:	e59f1018 	ldr	r1, [pc, #24]	; c40c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    c3f0:	e59f0018 	ldr	r0, [pc, #24]	; c410 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x4c>
    c3f4:	eb006101 	bl	24800 <assertion_failed>
    c3f8:	e3a020bd 	mov	r2, #189	; 0xbd
    c3fc:	e59f1008 	ldr	r1, [pc, #8]	; c40c <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x48>
    c400:	e59f000c 	ldr	r0, [pc, #12]	; c414 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x50>
    c404:	eb0060fd 	bl	24800 <assertion_failed>
    c408:	0004e0c0 	.word	0x0004e0c0
    c40c:	0003f6f8 	.word	0x0003f6f8
    c410:	0003f750 	.word	0x0003f750
    c414:	0003f784 	.word	0x0003f784

0000c418 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
    c418:	e3510010 	cmp	r1, #16
    c41c:	e92d4010 	push	{r4, lr}
    c420:	1a000007 	bne	c444 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x2c>
    c424:	e59f3038 	ldr	r3, [pc, #56]	; c464 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x4c>
    c428:	e5933000 	ldr	r3, [r3]
    c42c:	e3530000 	cmp	r3, #0
    c430:	0a000007 	beq	c454 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x3c>
    c434:	e8bd4010 	pop	{r4, lr}
    c438:	e1a01000 	mov	r1, r0
    c43c:	e1a00003 	mov	r0, r3
    c440:	ea00622f 	b	24d04 <CClassAllocator::Free(void*)>
    c444:	e3a020bd 	mov	r2, #189	; 0xbd
    c448:	e59f1018 	ldr	r1, [pc, #24]	; c468 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x50>
    c44c:	e59f0018 	ldr	r0, [pc, #24]	; c46c <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x54>
    c450:	eb0060ea 	bl	24800 <assertion_failed>
    c454:	e3a020bd 	mov	r2, #189	; 0xbd
    c458:	e59f1008 	ldr	r1, [pc, #8]	; c468 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x50>
    c45c:	e59f000c 	ldr	r0, [pc, #12]	; c470 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x58>
    c460:	eb0060e6 	bl	24800 <assertion_failed>
    c464:	0004e0c0 	.word	0x0004e0c0
    c468:	0003f6f8 	.word	0x0003f6f8
    c46c:	0003f750 	.word	0x0003f750
    c470:	0003f784 	.word	0x0003f784

0000c474 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    c474:	e92d4010 	push	{r4, lr}
    c478:	e1a04000 	mov	r4, r0
    c47c:	e3a01010 	mov	r1, #16
    c480:	ebffffe4 	bl	c418 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>
    c484:	e1a00004 	mov	r0, r4
    c488:	e8bd8010 	pop	{r4, pc}

0000c48c <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
    c48c:	e92d4070 	push	{r4, r5, r6, lr}
    c490:	e59f4040 	ldr	r4, [pc, #64]	; c4d8 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x4c>
    c494:	e5943000 	ldr	r3, [r4]
    c498:	e3530000 	cmp	r3, #0
    c49c:	1a000009 	bne	c4c8 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x3c>
    c4a0:	e1a05000 	mov	r5, r0
    c4a4:	e3a0001c 	mov	r0, #28
    c4a8:	eb007af1 	bl	2b074 <operator new(unsigned int)>
    c4ac:	e1a06000 	mov	r6, r0
    c4b0:	e1a02005 	mov	r2, r5
    c4b4:	e59f3020 	ldr	r3, [pc, #32]	; c4dc <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x50>
    c4b8:	e3a01010 	mov	r1, #16
    c4bc:	eb0061bc 	bl	24bb4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c4c0:	e5846000 	str	r6, [r4]
    c4c4:	e8bd8070 	pop	{r4, r5, r6, pc}
    c4c8:	e3a020bd 	mov	r2, #189	; 0xbd
    c4cc:	e59f100c 	ldr	r1, [pc, #12]	; c4e0 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x54>
    c4d0:	e59f000c 	ldr	r0, [pc, #12]	; c4e4 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x58>
    c4d4:	eb0060c9 	bl	24800 <assertion_failed>
    c4d8:	0004e0c0 	.word	0x0004e0c0
    c4dc:	0003f7ac 	.word	0x0003f7ac
    c4e0:	0003f6f8 	.word	0x0003f6f8
    c4e4:	0003f798 	.word	0x0003f798

0000c4e8 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    c4e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c4ec:	e59f4054 	ldr	r4, [pc, #84]	; c548 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    c4f0:	e1a05000 	mov	r5, r0
    c4f4:	e5940000 	ldr	r0, [r4]
    c4f8:	e24dd00c 	sub	sp, sp, #12
    c4fc:	e3500000 	cmp	r0, #0
    c500:	1a00000c 	bne	c538 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    c504:	e1a06001 	mov	r6, r1
    c508:	e3a0001c 	mov	r0, #28
    c50c:	eb007ad8 	bl	2b074 <operator new(unsigned int)>
    c510:	e59f1034 	ldr	r1, [pc, #52]	; c54c <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    c514:	e1a03006 	mov	r3, r6
    c518:	e58d1000 	str	r1, [sp]
    c51c:	e1a02005 	mov	r2, r5
    c520:	e3a01010 	mov	r1, #16
    c524:	e1a07000 	mov	r7, r0
    c528:	eb0061ad 	bl	24be4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c52c:	e5847000 	str	r7, [r4]
    c530:	e28dd00c 	add	sp, sp, #12
    c534:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c538:	e3a020bd 	mov	r2, #189	; 0xbd
    c53c:	e59f100c 	ldr	r1, [pc, #12]	; c550 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    c540:	e59f000c 	ldr	r0, [pc, #12]	; c554 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    c544:	eb0060ad 	bl	24800 <assertion_failed>
    c548:	0004e0c0 	.word	0x0004e0c0
    c54c:	0003f7ac 	.word	0x0003f7ac
    c550:	0003f6f8 	.word	0x0003f6f8
    c554:	0003f798 	.word	0x0003f798

0000c558 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    c558:	e12fff1e 	bx	lr

0000c55c <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
    c55c:	e1d000b6 	ldrh	r0, [r0, #6]
    c560:	e2000001 	and	r0, r0, #1
    c564:	e12fff1e 	bx	lr

0000c568 <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
    c568:	e92d4010 	push	{r4, lr}
    c56c:	e3a02026 	mov	r2, #38	; 0x26
    c570:	e59f1004 	ldr	r1, [pc, #4]	; c57c <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x14>
    c574:	e59f0004 	ldr	r0, [pc, #4]	; c580 <CDWHCIFrameSchedulerNoSplit::StartSplit()+0x18>
    c578:	eb0060a0 	bl	24800 <assertion_failed>
    c57c:	0003f7f0 	.word	0x0003f7f0
    c580:	0003fd5c 	.word	0x0003fd5c

0000c584 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
    c584:	e92d4010 	push	{r4, lr}
    c588:	e3a0202b 	mov	r2, #43	; 0x2b
    c58c:	e59f1004 	ldr	r1, [pc, #4]	; c598 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x14>
    c590:	e59f0004 	ldr	r0, [pc, #4]	; c59c <CDWHCIFrameSchedulerNoSplit::CompleteSplit()+0x18>
    c594:	eb006099 	bl	24800 <assertion_failed>
    c598:	0003f7f0 	.word	0x0003f7f0
    c59c:	0003fd5c 	.word	0x0003fd5c

0000c5a0 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
    c5a0:	e92d4010 	push	{r4, lr}
    c5a4:	e3a02031 	mov	r2, #49	; 0x31
    c5a8:	e59f1004 	ldr	r1, [pc, #4]	; c5b4 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x14>
    c5ac:	e59f0004 	ldr	r0, [pc, #4]	; c5b8 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)+0x18>
    c5b0:	eb006092 	bl	24800 <assertion_failed>
    c5b4:	0003f7f0 	.word	0x0003f7f0
    c5b8:	0003fd5c 	.word	0x0003fd5c

0000c5bc <CDWHCIFrameSchedulerNoSplit::WaitForFrame()>:
    c5bc:	e92d4030 	push	{r4, r5, lr}
    c5c0:	e24dd014 	sub	sp, sp, #20
    c5c4:	e1a05000 	mov	r5, r0
    c5c8:	e59f1050 	ldr	r1, [pc, #80]	; c620 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x64>
    c5cc:	e28d0004 	add	r0, sp, #4
    c5d0:	eb000192 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c5d4:	e28d0004 	add	r0, sp, #4
    c5d8:	eb000199 	bl	cc44 <CDWHCIRegister::Read()>
    c5dc:	e59f4040 	ldr	r4, [pc, #64]	; c624 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x68>
    c5e0:	e5d53004 	ldrb	r3, [r5, #4]
    c5e4:	e2800001 	add	r0, r0, #1
    c5e8:	e0000004 	and	r0, r0, r4
    c5ec:	e3530000 	cmp	r3, #0
    c5f0:	e1c500b6 	strh	r0, [r5, #6]
    c5f4:	1a000005 	bne	c610 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x54>
    c5f8:	e28d0004 	add	r0, sp, #4
    c5fc:	eb000190 	bl	cc44 <CDWHCIRegister::Read()>
    c600:	e1d530b6 	ldrh	r3, [r5, #6]
    c604:	e0000004 	and	r0, r0, r4
    c608:	e1500003 	cmp	r0, r3
    c60c:	1afffff9 	bne	c5f8 <CDWHCIFrameSchedulerNoSplit::WaitForFrame()+0x3c>
    c610:	e28d0004 	add	r0, sp, #4
    c614:	eb000189 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    c618:	e28dd014 	add	sp, sp, #20
    c61c:	e8bd8030 	pop	{r4, r5, pc}
    c620:	20980408 	.word	0x20980408
    c624:	00003fff 	.word	0x00003fff

0000c628 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
    c628:	e3a02901 	mov	r2, #16384	; 0x4000
    c62c:	e59fc00c 	ldr	ip, [pc, #12]	; c640 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
    c630:	e5c01004 	strb	r1, [r0, #4]
    c634:	e580c000 	str	ip, [r0]
    c638:	e1c020b6 	strh	r2, [r0, #6]
    c63c:	e12fff1e 	bx	lr
    c640:	0003f7d4 	.word	0x0003f7d4

0000c644 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
    c644:	e3500008 	cmp	r0, #8
    c648:	e92d4010 	push	{r4, lr}
    c64c:	1a000005 	bne	c668 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x24>
    c650:	e59f3030 	ldr	r3, [pc, #48]	; c688 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x44>
    c654:	e5930000 	ldr	r0, [r3]
    c658:	e3500000 	cmp	r0, #0
    c65c:	0a000005 	beq	c678 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x34>
    c660:	e8bd4010 	pop	{r4, lr}
    c664:	ea00616b 	b	24c18 <CClassAllocator::Allocate()>
    c668:	e3a0205a 	mov	r2, #90	; 0x5a
    c66c:	e59f1018 	ldr	r1, [pc, #24]	; c68c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    c670:	e59f0018 	ldr	r0, [pc, #24]	; c690 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x4c>
    c674:	eb006061 	bl	24800 <assertion_failed>
    c678:	e3a0205a 	mov	r2, #90	; 0x5a
    c67c:	e59f1008 	ldr	r1, [pc, #8]	; c68c <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x48>
    c680:	e59f000c 	ldr	r0, [pc, #12]	; c694 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x50>
    c684:	eb00605d 	bl	24800 <assertion_failed>
    c688:	0004e0c4 	.word	0x0004e0c4
    c68c:	0003f7f0 	.word	0x0003f7f0
    c690:	0003f80c 	.word	0x0003f80c
    c694:	0003f784 	.word	0x0003f784

0000c698 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
    c698:	e3510008 	cmp	r1, #8
    c69c:	e92d4010 	push	{r4, lr}
    c6a0:	1a000007 	bne	c6c4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x2c>
    c6a4:	e59f3038 	ldr	r3, [pc, #56]	; c6e4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x4c>
    c6a8:	e5933000 	ldr	r3, [r3]
    c6ac:	e3530000 	cmp	r3, #0
    c6b0:	0a000007 	beq	c6d4 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x3c>
    c6b4:	e8bd4010 	pop	{r4, lr}
    c6b8:	e1a01000 	mov	r1, r0
    c6bc:	e1a00003 	mov	r0, r3
    c6c0:	ea00618f 	b	24d04 <CClassAllocator::Free(void*)>
    c6c4:	e3a0205a 	mov	r2, #90	; 0x5a
    c6c8:	e59f1018 	ldr	r1, [pc, #24]	; c6e8 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x50>
    c6cc:	e59f0018 	ldr	r0, [pc, #24]	; c6ec <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x54>
    c6d0:	eb00604a 	bl	24800 <assertion_failed>
    c6d4:	e3a0205a 	mov	r2, #90	; 0x5a
    c6d8:	e59f1008 	ldr	r1, [pc, #8]	; c6e8 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x50>
    c6dc:	e59f000c 	ldr	r0, [pc, #12]	; c6f0 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x58>
    c6e0:	eb006046 	bl	24800 <assertion_failed>
    c6e4:	0004e0c4 	.word	0x0004e0c4
    c6e8:	0003f7f0 	.word	0x0003f7f0
    c6ec:	0003f80c 	.word	0x0003f80c
    c6f0:	0003f784 	.word	0x0003f784

0000c6f4 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    c6f4:	e92d4010 	push	{r4, lr}
    c6f8:	e1a04000 	mov	r4, r0
    c6fc:	e3a01008 	mov	r1, #8
    c700:	ebffffe4 	bl	c698 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>
    c704:	e1a00004 	mov	r0, r4
    c708:	e8bd8010 	pop	{r4, pc}

0000c70c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
    c70c:	e92d4070 	push	{r4, r5, r6, lr}
    c710:	e59f4040 	ldr	r4, [pc, #64]	; c758 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x4c>
    c714:	e5943000 	ldr	r3, [r4]
    c718:	e3530000 	cmp	r3, #0
    c71c:	1a000009 	bne	c748 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x3c>
    c720:	e1a05000 	mov	r5, r0
    c724:	e3a0001c 	mov	r0, #28
    c728:	eb007a51 	bl	2b074 <operator new(unsigned int)>
    c72c:	e1a06000 	mov	r6, r0
    c730:	e1a02005 	mov	r2, r5
    c734:	e59f3020 	ldr	r3, [pc, #32]	; c75c <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x50>
    c738:	e3a01008 	mov	r1, #8
    c73c:	eb00611c 	bl	24bb4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c740:	e5846000 	str	r6, [r4]
    c744:	e8bd8070 	pop	{r4, r5, r6, pc}
    c748:	e3a0205a 	mov	r2, #90	; 0x5a
    c74c:	e59f100c 	ldr	r1, [pc, #12]	; c760 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x54>
    c750:	e59f000c 	ldr	r0, [pc, #12]	; c764 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x58>
    c754:	eb006029 	bl	24800 <assertion_failed>
    c758:	0004e0c4 	.word	0x0004e0c4
    c75c:	0003f83c 	.word	0x0003f83c
    c760:	0003f7f0 	.word	0x0003f7f0
    c764:	0003f798 	.word	0x0003f798

0000c768 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
    c768:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c76c:	e59f4054 	ldr	r4, [pc, #84]	; c7c8 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    c770:	e1a05000 	mov	r5, r0
    c774:	e5940000 	ldr	r0, [r4]
    c778:	e24dd00c 	sub	sp, sp, #12
    c77c:	e3500000 	cmp	r0, #0
    c780:	1a00000c 	bne	c7b8 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    c784:	e1a06001 	mov	r6, r1
    c788:	e3a0001c 	mov	r0, #28
    c78c:	eb007a38 	bl	2b074 <operator new(unsigned int)>
    c790:	e59f1034 	ldr	r1, [pc, #52]	; c7cc <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    c794:	e1a03006 	mov	r3, r6
    c798:	e58d1000 	str	r1, [sp]
    c79c:	e1a02005 	mov	r2, r5
    c7a0:	e3a01008 	mov	r1, #8
    c7a4:	e1a07000 	mov	r7, r0
    c7a8:	eb00610d 	bl	24be4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c7ac:	e5847000 	str	r7, [r4]
    c7b0:	e28dd00c 	add	sp, sp, #12
    c7b4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c7b8:	e3a0205a 	mov	r2, #90	; 0x5a
    c7bc:	e59f100c 	ldr	r1, [pc, #12]	; c7d0 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    c7c0:	e59f000c 	ldr	r0, [pc, #12]	; c7d4 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    c7c4:	eb00600d 	bl	24800 <assertion_failed>
    c7c8:	0004e0c4 	.word	0x0004e0c4
    c7cc:	0003f83c 	.word	0x0003f83c
    c7d0:	0003f7f0 	.word	0x0003f7f0
    c7d4:	0003f798 	.word	0x0003f798

0000c7d8 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    c7d8:	e12fff1e 	bx	lr

0000c7dc <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
    c7dc:	e3a02901 	mov	r2, #16384	; 0x4000
    c7e0:	e3a03000 	mov	r3, #0
    c7e4:	e1c021b0 	strh	r2, [r0, #16]
    c7e8:	e5803008 	str	r3, [r0, #8]
    c7ec:	e12fff1e 	bx	lr

0000c7f0 <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
    c7f0:	e1d001b0 	ldrh	r0, [r0, #16]
    c7f4:	e2000001 	and	r0, r0, #1
    c7f8:	e12fff1e 	bx	lr

0000c7fc <CDWHCIFrameSchedulerPeriodic::WaitForFrame()>:
    c7fc:	e92d4010 	push	{r4, lr}
    c800:	e1a04000 	mov	r4, r0
    c804:	e24dd010 	sub	sp, sp, #16
    c808:	e28d0004 	add	r0, sp, #4
    c80c:	e59f1054 	ldr	r1, [pc, #84]	; c868 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x6c>
    c810:	eb000102 	bl	cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    c814:	e1d431b0 	ldrh	r3, [r4, #16]
    c818:	e3530901 	cmp	r3, #16384	; 0x4000
    c81c:	0a000009 	beq	c848 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x4c>
    c820:	e28d0004 	add	r0, sp, #4
    c824:	eb000106 	bl	cc44 <CDWHCIRegister::Read()>
    c828:	e1d431b0 	ldrh	r3, [r4, #16]
    c82c:	e2000007 	and	r0, r0, #7
    c830:	e1500003 	cmp	r0, r3
    c834:	1afffff9 	bne	c820 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
    c838:	e28d0004 	add	r0, sp, #4
    c83c:	eb0000ff 	bl	cc40 <CDWHCIRegister::~CDWHCIRegister()>
    c840:	e28dd010 	add	sp, sp, #16
    c844:	e8bd8010 	pop	{r4, pc}
    c848:	e28d0004 	add	r0, sp, #4
    c84c:	eb0000fc 	bl	cc44 <CDWHCIRegister::Read()>
    c850:	e2803001 	add	r3, r0, #1
    c854:	e2033007 	and	r3, r3, #7
    c858:	e3530006 	cmp	r3, #6
    c85c:	03a03007 	moveq	r3, #7
    c860:	e1c431b0 	strh	r3, [r4, #16]
    c864:	eaffffed 	b	c820 <CDWHCIFrameSchedulerPeriodic::WaitForFrame()+0x24>
    c868:	20980408 	.word	0x20980408

0000c86c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
    c86c:	e5903008 	ldr	r3, [r0, #8]
    c870:	e92d4010 	push	{r4, lr}
    c874:	e2433001 	sub	r3, r3, #1
    c878:	e3530004 	cmp	r3, #4
    c87c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c880:	ea00001c 	b	c8f8 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x8c>
    c884:	0000c8c0 	.word	0x0000c8c0
    c888:	0000c8f8 	.word	0x0000c8f8
    c88c:	0000c8a0 	.word	0x0000c8a0
    c890:	0000c898 	.word	0x0000c898
    c894:	0000c898 	.word	0x0000c898
    c898:	e3a00000 	mov	r0, #0
    c89c:	e8bd8010 	pop	{r4, pc}
    c8a0:	e1d031b0 	ldrh	r3, [r0, #16]
    c8a4:	e3530901 	cmp	r3, #16384	; 0x4000
    c8a8:	0a000016 	beq	c908 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x9c>
    c8ac:	e2833001 	add	r3, r3, #1
    c8b0:	e2033007 	and	r3, r3, #7
    c8b4:	e1c031b0 	strh	r3, [r0, #16]
    c8b8:	e3a00001 	mov	r0, #1
    c8bc:	e8bd8010 	pop	{r4, pc}
    c8c0:	e3a02002 	mov	r2, #2
    c8c4:	e1d031b0 	ldrh	r3, [r0, #16]
    c8c8:	e5802008 	str	r2, [r0, #8]
    c8cc:	e3530901 	cmp	r3, #16384	; 0x4000
    c8d0:	0a000010 	beq	c918 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xac>
    c8d4:	e3530005 	cmp	r3, #5
    c8d8:	13a02003 	movne	r2, #3
    c8dc:	03a02002 	moveq	r2, #2
    c8e0:	e2833002 	add	r3, r3, #2
    c8e4:	e2033007 	and	r3, r3, #7
    c8e8:	e1c031b0 	strh	r3, [r0, #16]
    c8ec:	e580200c 	str	r2, [r0, #12]
    c8f0:	e3a00001 	mov	r0, #1
    c8f4:	e8bd8010 	pop	{r4, pc}
    c8f8:	e3a0206e 	mov	r2, #110	; 0x6e
    c8fc:	e59f1024 	ldr	r1, [pc, #36]	; c928 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    c900:	e59f0024 	ldr	r0, [pc, #36]	; c92c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc0>
    c904:	eb005fbd 	bl	24800 <assertion_failed>
    c908:	e3a02062 	mov	r2, #98	; 0x62
    c90c:	e59f1014 	ldr	r1, [pc, #20]	; c928 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    c910:	e59f0018 	ldr	r0, [pc, #24]	; c930 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc4>
    c914:	eb005fb9 	bl	24800 <assertion_failed>
    c918:	e3a02054 	mov	r2, #84	; 0x54
    c91c:	e59f1004 	ldr	r1, [pc, #4]	; c928 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xbc>
    c920:	e59f0008 	ldr	r0, [pc, #8]	; c930 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0xc4>
    c924:	eb005fb5 	bl	24800 <assertion_failed>
    c928:	0003f87c 	.word	0x0003f87c
    c92c:	0003fd5c 	.word	0x0003fd5c
    c930:	0003f894 	.word	0x0003f894

0000c934 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
    c934:	e92d4010 	push	{r4, lr}
    c938:	e5903008 	ldr	r3, [r0, #8]
    c93c:	e24dd010 	sub	sp, sp, #16
    c940:	e3530000 	cmp	r3, #0
    c944:	e1a04000 	mov	r4, r0
    c948:	0a000014 	beq	c9a0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x6c>
    c94c:	e2433002 	sub	r3, r3, #2
    c950:	e3530001 	cmp	r3, #1
    c954:	8a00000d 	bhi	c990 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x5c>
    c958:	e3110001 	tst	r1, #1
    c95c:	13a03004 	movne	r3, #4
    c960:	15803008 	strne	r3, [r0, #8]
    c964:	1a000007 	bne	c988 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    c968:	e3110060 	tst	r1, #96	; 0x60
    c96c:	1a000013 	bne	c9c0 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x8c>
    c970:	e3110010 	tst	r1, #16
    c974:	0a00001e 	beq	c9f4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xc0>
    c978:	e59f00a4 	ldr	r0, [pc, #164]	; ca24 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf0>
    c97c:	eb00752d 	bl	29e38 <CTimer::SimpleusDelay(unsigned int)>
    c980:	e3a03005 	mov	r3, #5
    c984:	e5843008 	str	r3, [r4, #8]
    c988:	e28dd010 	add	sp, sp, #16
    c98c:	e8bd8010 	pop	{r4, pc}
    c990:	e3a020a6 	mov	r2, #166	; 0xa6
    c994:	e59f108c 	ldr	r1, [pc, #140]	; ca28 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    c998:	e59f008c 	ldr	r0, [pc, #140]	; ca2c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
    c99c:	eb005f97 	bl	24800 <assertion_failed>
    c9a0:	e3110020 	tst	r1, #32
    c9a4:	13a03001 	movne	r3, #1
    c9a8:	15803008 	strne	r3, [r0, #8]
    c9ac:	1afffff5 	bne	c988 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    c9b0:	e3a0207a 	mov	r2, #122	; 0x7a
    c9b4:	e59f106c 	ldr	r1, [pc, #108]	; ca28 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    c9b8:	e59f0070 	ldr	r0, [pc, #112]	; ca30 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xfc>
    c9bc:	eb005f8f 	bl	24800 <assertion_failed>
    c9c0:	e590300c 	ldr	r3, [r0, #12]
    c9c4:	e3530000 	cmp	r3, #0
    c9c8:	e2433001 	sub	r3, r3, #1
    c9cc:	e580300c 	str	r3, [r0, #12]
    c9d0:	13a03003 	movne	r3, #3
    c9d4:	15803008 	strne	r3, [r0, #8]
    c9d8:	1affffea 	bne	c988 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    c9dc:	e3a03005 	mov	r3, #5
    c9e0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    c9e4:	e5843008 	str	r3, [r4, #8]
    c9e8:	e28dd010 	add	sp, sp, #16
    c9ec:	e8bd4010 	pop	{r4, lr}
    c9f0:	ea007510 	b	29e38 <CTimer::SimpleusDelay(unsigned int)>
    c9f4:	e58d100c 	str	r1, [sp, #12]
    c9f8:	eb006873 	bl	26bcc <CLogger::Get()>
    c9fc:	e59d100c 	ldr	r1, [sp, #12]
    ca00:	e3a02001 	mov	r2, #1
    ca04:	e58d1000 	str	r1, [sp]
    ca08:	e59f3024 	ldr	r3, [pc, #36]	; ca34 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x100>
    ca0c:	e59f1024 	ldr	r1, [pc, #36]	; ca38 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x104>
    ca10:	eb0067aa 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ca14:	e3a020a1 	mov	r2, #161	; 0xa1
    ca18:	e59f1008 	ldr	r1, [pc, #8]	; ca28 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf4>
    ca1c:	e59f0008 	ldr	r0, [pc, #8]	; ca2c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xf8>
    ca20:	eb005f76 	bl	24800 <assertion_failed>
    ca24:	00000271 	.word	0x00000271
    ca28:	0003f87c 	.word	0x0003f87c
    ca2c:	0003fd5c 	.word	0x0003fd5c
    ca30:	0003f710 	.word	0x0003f710
    ca34:	0003f734 	.word	0x0003f734
    ca38:	0003f748 	.word	0x0003f748

0000ca3c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
    ca3c:	e59f303c 	ldr	r3, [pc, #60]	; ca80 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x44>
    ca40:	e92d4010 	push	{r4, lr}
    ca44:	e5803000 	str	r3, [r0]
    ca48:	e1a04000 	mov	r4, r0
    ca4c:	eb00752b 	bl	29f00 <CTimer::Get()>
    ca50:	e3a02006 	mov	r2, #6
    ca54:	e3a03901 	mov	r3, #16384	; 0x4000
    ca58:	e3500000 	cmp	r0, #0
    ca5c:	e9840005 	stmib	r4, {r0, r2}
    ca60:	e1c431b0 	strh	r3, [r4, #16]
    ca64:	0a000001 	beq	ca70 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x34>
    ca68:	e1a00004 	mov	r0, r4
    ca6c:	e8bd8010 	pop	{r4, pc}
    ca70:	e3a02034 	mov	r2, #52	; 0x34
    ca74:	e59f1008 	ldr	r1, [pc, #8]	; ca84 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x48>
    ca78:	e59f0008 	ldr	r0, [pc, #8]	; ca88 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x4c>
    ca7c:	eb005f5f 	bl	24800 <assertion_failed>
    ca80:	0003f860 	.word	0x0003f860
    ca84:	0003f87c 	.word	0x0003f87c
    ca88:	0003f1b8 	.word	0x0003f1b8

0000ca8c <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
    ca8c:	e3500014 	cmp	r0, #20
    ca90:	e92d4010 	push	{r4, lr}
    ca94:	1a000005 	bne	cab0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x24>
    ca98:	e59f3030 	ldr	r3, [pc, #48]	; cad0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x44>
    ca9c:	e5930000 	ldr	r0, [r3]
    caa0:	e3500000 	cmp	r0, #0
    caa4:	0a000005 	beq	cac0 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x34>
    caa8:	e8bd4010 	pop	{r4, lr}
    caac:	ea006059 	b	24c18 <CClassAllocator::Allocate()>
    cab0:	e3a020e2 	mov	r2, #226	; 0xe2
    cab4:	e59f1018 	ldr	r1, [pc, #24]	; cad4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    cab8:	e59f0018 	ldr	r0, [pc, #24]	; cad8 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x4c>
    cabc:	eb005f4f 	bl	24800 <assertion_failed>
    cac0:	e3a020e2 	mov	r2, #226	; 0xe2
    cac4:	e59f1008 	ldr	r1, [pc, #8]	; cad4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x48>
    cac8:	e59f000c 	ldr	r0, [pc, #12]	; cadc <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x50>
    cacc:	eb005f4b 	bl	24800 <assertion_failed>
    cad0:	0004e0c8 	.word	0x0004e0c8
    cad4:	0003f87c 	.word	0x0003f87c
    cad8:	0003f8b4 	.word	0x0003f8b4
    cadc:	0003f784 	.word	0x0003f784

0000cae0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
    cae0:	e3510014 	cmp	r1, #20
    cae4:	e92d4010 	push	{r4, lr}
    cae8:	1a000007 	bne	cb0c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x2c>
    caec:	e59f3038 	ldr	r3, [pc, #56]	; cb2c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x4c>
    caf0:	e5933000 	ldr	r3, [r3]
    caf4:	e3530000 	cmp	r3, #0
    caf8:	0a000007 	beq	cb1c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x3c>
    cafc:	e8bd4010 	pop	{r4, lr}
    cb00:	e1a01000 	mov	r1, r0
    cb04:	e1a00003 	mov	r0, r3
    cb08:	ea00607d 	b	24d04 <CClassAllocator::Free(void*)>
    cb0c:	e3a020e2 	mov	r2, #226	; 0xe2
    cb10:	e59f1018 	ldr	r1, [pc, #24]	; cb30 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x50>
    cb14:	e59f0018 	ldr	r0, [pc, #24]	; cb34 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x54>
    cb18:	eb005f38 	bl	24800 <assertion_failed>
    cb1c:	e3a020e2 	mov	r2, #226	; 0xe2
    cb20:	e59f1008 	ldr	r1, [pc, #8]	; cb30 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x50>
    cb24:	e59f000c 	ldr	r0, [pc, #12]	; cb38 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x58>
    cb28:	eb005f34 	bl	24800 <assertion_failed>
    cb2c:	0004e0c8 	.word	0x0004e0c8
    cb30:	0003f87c 	.word	0x0003f87c
    cb34:	0003f8b4 	.word	0x0003f8b4
    cb38:	0003f784 	.word	0x0003f784

0000cb3c <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    cb3c:	e92d4010 	push	{r4, lr}
    cb40:	e1a04000 	mov	r4, r0
    cb44:	e3a01014 	mov	r1, #20
    cb48:	ebffffe4 	bl	cae0 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>
    cb4c:	e1a00004 	mov	r0, r4
    cb50:	e8bd8010 	pop	{r4, pc}

0000cb54 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
    cb54:	e92d4070 	push	{r4, r5, r6, lr}
    cb58:	e59f4040 	ldr	r4, [pc, #64]	; cba0 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x4c>
    cb5c:	e5943000 	ldr	r3, [r4]
    cb60:	e3530000 	cmp	r3, #0
    cb64:	1a000009 	bne	cb90 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x3c>
    cb68:	e1a05000 	mov	r5, r0
    cb6c:	e3a0001c 	mov	r0, #28
    cb70:	eb00793f 	bl	2b074 <operator new(unsigned int)>
    cb74:	e1a06000 	mov	r6, r0
    cb78:	e1a02005 	mov	r2, r5
    cb7c:	e59f3020 	ldr	r3, [pc, #32]	; cba4 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x50>
    cb80:	e3a01014 	mov	r1, #20
    cb84:	eb00600a 	bl	24bb4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    cb88:	e5846000 	str	r6, [r4]
    cb8c:	e8bd8070 	pop	{r4, r5, r6, pc}
    cb90:	e3a020e2 	mov	r2, #226	; 0xe2
    cb94:	e59f100c 	ldr	r1, [pc, #12]	; cba8 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x54>
    cb98:	e59f000c 	ldr	r0, [pc, #12]	; cbac <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x58>
    cb9c:	eb005f17 	bl	24800 <assertion_failed>
    cba0:	0004e0c8 	.word	0x0004e0c8
    cba4:	0003f8e4 	.word	0x0003f8e4
    cba8:	0003f87c 	.word	0x0003f87c
    cbac:	0003f798 	.word	0x0003f798

0000cbb0 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    cbb0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    cbb4:	e59f4054 	ldr	r4, [pc, #84]	; cc10 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    cbb8:	e1a05000 	mov	r5, r0
    cbbc:	e5940000 	ldr	r0, [r4]
    cbc0:	e24dd00c 	sub	sp, sp, #12
    cbc4:	e3500000 	cmp	r0, #0
    cbc8:	1a00000c 	bne	cc00 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    cbcc:	e1a06001 	mov	r6, r1
    cbd0:	e3a0001c 	mov	r0, #28
    cbd4:	eb007926 	bl	2b074 <operator new(unsigned int)>
    cbd8:	e59f1034 	ldr	r1, [pc, #52]	; cc14 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    cbdc:	e1a03006 	mov	r3, r6
    cbe0:	e58d1000 	str	r1, [sp]
    cbe4:	e1a02005 	mov	r2, r5
    cbe8:	e3a01014 	mov	r1, #20
    cbec:	e1a07000 	mov	r7, r0
    cbf0:	eb005ffb 	bl	24be4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    cbf4:	e5847000 	str	r7, [r4]
    cbf8:	e28dd00c 	add	sp, sp, #12
    cbfc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    cc00:	e3a020e2 	mov	r2, #226	; 0xe2
    cc04:	e59f100c 	ldr	r1, [pc, #12]	; cc18 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    cc08:	e59f000c 	ldr	r0, [pc, #12]	; cc1c <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    cc0c:	eb005efb 	bl	24800 <assertion_failed>
    cc10:	0004e0c8 	.word	0x0004e0c8
    cc14:	0003f8e4 	.word	0x0003f8e4
    cc18:	0003f87c 	.word	0x0003f87c
    cc1c:	0003f798 	.word	0x0003f798

0000cc20 <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
    cc20:	e3a02000 	mov	r2, #0
    cc24:	e5801004 	str	r1, [r0, #4]
    cc28:	e5c02000 	strb	r2, [r0]
    cc2c:	e12fff1e 	bx	lr

0000cc30 <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
    cc30:	e3a0c001 	mov	ip, #1
    cc34:	e9800006 	stmib	r0, {r1, r2}
    cc38:	e5c0c000 	strb	ip, [r0]
    cc3c:	e12fff1e 	bx	lr

0000cc40 <CDWHCIRegister::~CDWHCIRegister()>:
    cc40:	e12fff1e 	bx	lr

0000cc44 <CDWHCIRegister::Read()>:
    cc44:	e1a03000 	mov	r3, r0
    cc48:	e3a02001 	mov	r2, #1
    cc4c:	e5901004 	ldr	r1, [r0, #4]
    cc50:	e5910000 	ldr	r0, [r1]
    cc54:	e5c32000 	strb	r2, [r3]
    cc58:	e5830008 	str	r0, [r3, #8]
    cc5c:	e12fff1e 	bx	lr

0000cc60 <CDWHCIRegister::Write()>:
    cc60:	e5d03000 	ldrb	r3, [r0]
    cc64:	e3530000 	cmp	r3, #0
    cc68:	0a000003 	beq	cc7c <CDWHCIRegister::Write()+0x1c>
    cc6c:	e5902008 	ldr	r2, [r0, #8]
    cc70:	e5903004 	ldr	r3, [r0, #4]
    cc74:	e5832000 	str	r2, [r3]
    cc78:	e12fff1e 	bx	lr
    cc7c:	e92d4010 	push	{r4, lr}
    cc80:	e3a02035 	mov	r2, #53	; 0x35
    cc84:	e59f1004 	ldr	r1, [pc, #4]	; cc90 <CDWHCIRegister::Write()+0x30>
    cc88:	e59f0004 	ldr	r0, [pc, #4]	; cc94 <CDWHCIRegister::Write()+0x34>
    cc8c:	eb005edb 	bl	24800 <assertion_failed>
    cc90:	0003f904 	.word	0x0003f904
    cc94:	0003f918 	.word	0x0003f918

0000cc98 <CDWHCIRegister::Get() const>:
    cc98:	e5d03000 	ldrb	r3, [r0]
    cc9c:	e3530000 	cmp	r3, #0
    cca0:	0a000001 	beq	ccac <CDWHCIRegister::Get() const+0x14>
    cca4:	e5900008 	ldr	r0, [r0, #8]
    cca8:	e12fff1e 	bx	lr
    ccac:	e92d4010 	push	{r4, lr}
    ccb0:	e3a0203b 	mov	r2, #59	; 0x3b
    ccb4:	e59f1004 	ldr	r1, [pc, #4]	; ccc0 <CDWHCIRegister::Get() const+0x28>
    ccb8:	e59f0004 	ldr	r0, [pc, #4]	; ccc4 <CDWHCIRegister::Get() const+0x2c>
    ccbc:	eb005ecf 	bl	24800 <assertion_failed>
    ccc0:	0003f904 	.word	0x0003f904
    ccc4:	0003f918 	.word	0x0003f918

0000ccc8 <CDWHCIRegister::Set(unsigned int)>:
    ccc8:	e3a03001 	mov	r3, #1
    cccc:	e5801008 	str	r1, [r0, #8]
    ccd0:	e5c03000 	strb	r3, [r0]
    ccd4:	e12fff1e 	bx	lr

0000ccd8 <CDWHCIRegister::IsSet(unsigned int) const>:
    ccd8:	e5d03000 	ldrb	r3, [r0]
    ccdc:	e3530000 	cmp	r3, #0
    cce0:	0a000004 	beq	ccf8 <CDWHCIRegister::IsSet(unsigned int) const+0x20>
    cce4:	e5903008 	ldr	r3, [r0, #8]
    cce8:	e1110003 	tst	r1, r3
    ccec:	13a00001 	movne	r0, #1
    ccf0:	03a00000 	moveq	r0, #0
    ccf4:	e12fff1e 	bx	lr
    ccf8:	e92d4010 	push	{r4, lr}
    ccfc:	e3a02047 	mov	r2, #71	; 0x47
    cd00:	e59f1004 	ldr	r1, [pc, #4]	; cd0c <CDWHCIRegister::IsSet(unsigned int) const+0x34>
    cd04:	e59f0004 	ldr	r0, [pc, #4]	; cd10 <CDWHCIRegister::IsSet(unsigned int) const+0x38>
    cd08:	eb005ebc 	bl	24800 <assertion_failed>
    cd0c:	0003f904 	.word	0x0003f904
    cd10:	0003f918 	.word	0x0003f918

0000cd14 <CDWHCIRegister::And(unsigned int)>:
    cd14:	e5d03000 	ldrb	r3, [r0]
    cd18:	e3530000 	cmp	r3, #0
    cd1c:	0a000003 	beq	cd30 <CDWHCIRegister::And(unsigned int)+0x1c>
    cd20:	e5903008 	ldr	r3, [r0, #8]
    cd24:	e0011003 	and	r1, r1, r3
    cd28:	e5801008 	str	r1, [r0, #8]
    cd2c:	e12fff1e 	bx	lr
    cd30:	e92d4010 	push	{r4, lr}
    cd34:	e3a0204d 	mov	r2, #77	; 0x4d
    cd38:	e59f1004 	ldr	r1, [pc, #4]	; cd44 <CDWHCIRegister::And(unsigned int)+0x30>
    cd3c:	e59f0004 	ldr	r0, [pc, #4]	; cd48 <CDWHCIRegister::And(unsigned int)+0x34>
    cd40:	eb005eae 	bl	24800 <assertion_failed>
    cd44:	0003f904 	.word	0x0003f904
    cd48:	0003f918 	.word	0x0003f918

0000cd4c <CDWHCIRegister::Or(unsigned int)>:
    cd4c:	e5d03000 	ldrb	r3, [r0]
    cd50:	e3530000 	cmp	r3, #0
    cd54:	0a000003 	beq	cd68 <CDWHCIRegister::Or(unsigned int)+0x1c>
    cd58:	e5903008 	ldr	r3, [r0, #8]
    cd5c:	e1831001 	orr	r1, r3, r1
    cd60:	e5801008 	str	r1, [r0, #8]
    cd64:	e12fff1e 	bx	lr
    cd68:	e92d4010 	push	{r4, lr}
    cd6c:	e3a02053 	mov	r2, #83	; 0x53
    cd70:	e59f1004 	ldr	r1, [pc, #4]	; cd7c <CDWHCIRegister::Or(unsigned int)+0x30>
    cd74:	e59f0004 	ldr	r0, [pc, #4]	; cd80 <CDWHCIRegister::Or(unsigned int)+0x34>
    cd78:	eb005ea0 	bl	24800 <assertion_failed>
    cd7c:	0003f904 	.word	0x0003f904
    cd80:	0003f918 	.word	0x0003f918

0000cd84 <CDWHCIRegister::ClearBit(unsigned int)>:
    cd84:	e5d03000 	ldrb	r3, [r0]
    cd88:	e92d4010 	push	{r4, lr}
    cd8c:	e3530000 	cmp	r3, #0
    cd90:	0a000006 	beq	cdb0 <CDWHCIRegister::ClearBit(unsigned int)+0x2c>
    cd94:	e351001f 	cmp	r1, #31
    cd98:	8a000008 	bhi	cdc0 <CDWHCIRegister::ClearBit(unsigned int)+0x3c>
    cd9c:	e3a02001 	mov	r2, #1
    cda0:	e5903008 	ldr	r3, [r0, #8]
    cda4:	e1c31112 	bic	r1, r3, r2, lsl r1
    cda8:	e5801008 	str	r1, [r0, #8]
    cdac:	e8bd8010 	pop	{r4, pc}
    cdb0:	e3a02059 	mov	r2, #89	; 0x59
    cdb4:	e59f1014 	ldr	r1, [pc, #20]	; cdd0 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    cdb8:	e59f0014 	ldr	r0, [pc, #20]	; cdd4 <CDWHCIRegister::ClearBit(unsigned int)+0x50>
    cdbc:	eb005e8f 	bl	24800 <assertion_failed>
    cdc0:	e3a0205a 	mov	r2, #90	; 0x5a
    cdc4:	e59f1004 	ldr	r1, [pc, #4]	; cdd0 <CDWHCIRegister::ClearBit(unsigned int)+0x4c>
    cdc8:	e59f0008 	ldr	r0, [pc, #8]	; cdd8 <CDWHCIRegister::ClearBit(unsigned int)+0x54>
    cdcc:	eb005e8b 	bl	24800 <assertion_failed>
    cdd0:	0003f904 	.word	0x0003f904
    cdd4:	0003f918 	.word	0x0003f918
    cdd8:	0003f924 	.word	0x0003f924

0000cddc <CDWHCIRegister::SetBit(unsigned int)>:
    cddc:	e5d03000 	ldrb	r3, [r0]
    cde0:	e92d4010 	push	{r4, lr}
    cde4:	e3530000 	cmp	r3, #0
    cde8:	0a000006 	beq	ce08 <CDWHCIRegister::SetBit(unsigned int)+0x2c>
    cdec:	e351001f 	cmp	r1, #31
    cdf0:	8a000008 	bhi	ce18 <CDWHCIRegister::SetBit(unsigned int)+0x3c>
    cdf4:	e3a02001 	mov	r2, #1
    cdf8:	e5903008 	ldr	r3, [r0, #8]
    cdfc:	e1831112 	orr	r1, r3, r2, lsl r1
    ce00:	e5801008 	str	r1, [r0, #8]
    ce04:	e8bd8010 	pop	{r4, pc}
    ce08:	e3a02060 	mov	r2, #96	; 0x60
    ce0c:	e59f1014 	ldr	r1, [pc, #20]	; ce28 <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    ce10:	e59f0014 	ldr	r0, [pc, #20]	; ce2c <CDWHCIRegister::SetBit(unsigned int)+0x50>
    ce14:	eb005e79 	bl	24800 <assertion_failed>
    ce18:	e3a02061 	mov	r2, #97	; 0x61
    ce1c:	e59f1004 	ldr	r1, [pc, #4]	; ce28 <CDWHCIRegister::SetBit(unsigned int)+0x4c>
    ce20:	e59f0008 	ldr	r0, [pc, #8]	; ce30 <CDWHCIRegister::SetBit(unsigned int)+0x54>
    ce24:	eb005e75 	bl	24800 <assertion_failed>
    ce28:	0003f904 	.word	0x0003f904
    ce2c:	0003f918 	.word	0x0003f918
    ce30:	0003f924 	.word	0x0003f924

0000ce34 <CDWHCIRegister::ClearAll()>:
    ce34:	e3a02000 	mov	r2, #0
    ce38:	e3a03001 	mov	r3, #1
    ce3c:	e5802008 	str	r2, [r0, #8]
    ce40:	e5c03000 	strb	r3, [r0]
    ce44:	e12fff1e 	bx	lr

0000ce48 <CDWHCIRegister::SetAll()>:
    ce48:	e3e02000 	mvn	r2, #0
    ce4c:	e3a03001 	mov	r3, #1
    ce50:	e5802008 	str	r2, [r0, #8]
    ce54:	e5c03000 	strb	r3, [r0]
    ce58:	e12fff1e 	bx	lr

0000ce5c <CDWHCIRegister::Dump() const>:
    ce5c:	e92d4010 	push	{r4, lr}
    ce60:	e5d03000 	ldrb	r3, [r0]
    ce64:	e24dd008 	sub	sp, sp, #8
    ce68:	e3530000 	cmp	r3, #0
    ce6c:	e1a04000 	mov	r4, r0
    ce70:	1a00000a 	bne	cea0 <CDWHCIRegister::Dump() const+0x44>
    ce74:	eb006754 	bl	26bcc <CLogger::Get()>
    ce78:	e5942004 	ldr	r2, [r4, #4]
    ce7c:	e59f3050 	ldr	r3, [pc, #80]	; ced4 <CDWHCIRegister::Dump() const+0x78>
    ce80:	e1a02a02 	lsl	r2, r2, #20
    ce84:	e1a02a22 	lsr	r2, r2, #20
    ce88:	e58d2000 	str	r2, [sp]
    ce8c:	e59f1044 	ldr	r1, [pc, #68]	; ced8 <CDWHCIRegister::Dump() const+0x7c>
    ce90:	e3a02004 	mov	r2, #4
    ce94:	eb006689 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ce98:	e28dd008 	add	sp, sp, #8
    ce9c:	e8bd8010 	pop	{r4, pc}
    cea0:	eb006749 	bl	26bcc <CLogger::Get()>
    cea4:	e5943004 	ldr	r3, [r4, #4]
    cea8:	e5942008 	ldr	r2, [r4, #8]
    ceac:	e1a03a03 	lsl	r3, r3, #20
    ceb0:	e1a03a23 	lsr	r3, r3, #20
    ceb4:	e58d3000 	str	r3, [sp]
    ceb8:	e58d2004 	str	r2, [sp, #4]
    cebc:	e59f3018 	ldr	r3, [pc, #24]	; cedc <CDWHCIRegister::Dump() const+0x80>
    cec0:	e3a02004 	mov	r2, #4
    cec4:	e59f100c 	ldr	r1, [pc, #12]	; ced8 <CDWHCIRegister::Dump() const+0x7c>
    cec8:	eb00667c 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cecc:	e28dd008 	add	sp, sp, #8
    ced0:	e8bd8010 	pop	{r4, pc}
    ced4:	0003f964 	.word	0x0003f964
    ced8:	0003f95c 	.word	0x0003f95c
    cedc:	0003f940 	.word	0x0003f940

0000cee0 <CDWHCIRootPort::~CDWHCIRootPort()>:
    cee0:	e92d4010 	push	{r4, lr}
    cee4:	e1a04000 	mov	r4, r0
    cee8:	e5900008 	ldr	r0, [r0, #8]
    ceec:	e59f301c 	ldr	r3, [pc, #28]	; cf10 <CDWHCIRootPort::~CDWHCIRootPort()+0x30>
    cef0:	e3500000 	cmp	r0, #0
    cef4:	e5843000 	str	r3, [r4]
    cef8:	0a000002 	beq	cf08 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    cefc:	e5903000 	ldr	r3, [r0]
    cf00:	e5933004 	ldr	r3, [r3, #4]
    cf04:	e12fff33 	blx	r3
    cf08:	e1a00004 	mov	r0, r4
    cf0c:	e8bd8010 	pop	{r4, pc}
    cf10:	0003f98c 	.word	0x0003f98c

0000cf14 <CDWHCIRootPort::~CDWHCIRootPort()>:
    cf14:	e92d4010 	push	{r4, lr}
    cf18:	e1a04000 	mov	r4, r0
    cf1c:	e5900008 	ldr	r0, [r0, #8]
    cf20:	e59f3028 	ldr	r3, [pc, #40]	; cf50 <CDWHCIRootPort::~CDWHCIRootPort()+0x3c>
    cf24:	e3500000 	cmp	r0, #0
    cf28:	e5843000 	str	r3, [r4]
    cf2c:	0a000002 	beq	cf3c <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    cf30:	e5903000 	ldr	r3, [r0]
    cf34:	e5933004 	ldr	r3, [r3, #4]
    cf38:	e12fff33 	blx	r3
    cf3c:	e1a00004 	mov	r0, r4
    cf40:	e3a0100c 	mov	r1, #12
    cf44:	eb007858 	bl	2b0ac <operator delete(void*, unsigned int)>
    cf48:	e1a00004 	mov	r0, r4
    cf4c:	e8bd8010 	pop	{r4, pc}
    cf50:	0003f98c 	.word	0x0003f98c

0000cf54 <CDWHCIRootPort::RemoveDevice()>:
    cf54:	e92d4010 	push	{r4, lr}
    cf58:	e1a04000 	mov	r4, r0
    cf5c:	e5900004 	ldr	r0, [r0, #4]
    cf60:	e3500000 	cmp	r0, #0
    cf64:	0a00000b 	beq	cf98 <CDWHCIRootPort::RemoveDevice()+0x44>
    cf68:	e3a01000 	mov	r1, #0
    cf6c:	ebfff359 	bl	9cd8 <CDWHCIDevice::DisableRootPort(bool)>
    cf70:	e5940008 	ldr	r0, [r4, #8]
    cf74:	e3500000 	cmp	r0, #0
    cf78:	0a000002 	beq	cf88 <CDWHCIRootPort::RemoveDevice()+0x34>
    cf7c:	e5903000 	ldr	r3, [r0]
    cf80:	e5933004 	ldr	r3, [r3, #4]
    cf84:	e12fff33 	blx	r3
    cf88:	e3a03000 	mov	r3, #0
    cf8c:	e3a00001 	mov	r0, #1
    cf90:	e5843008 	str	r3, [r4, #8]
    cf94:	e8bd8010 	pop	{r4, pc}
    cf98:	e3a0206d 	mov	r2, #109	; 0x6d
    cf9c:	e59f1004 	ldr	r1, [pc, #4]	; cfa8 <CDWHCIRootPort::RemoveDevice()+0x54>
    cfa0:	e59f0004 	ldr	r0, [pc, #4]	; cfac <CDWHCIRootPort::RemoveDevice()+0x58>
    cfa4:	eb005e15 	bl	24800 <assertion_failed>
    cfa8:	0003f9a4 	.word	0x0003f9a4
    cfac:	0003f9b8 	.word	0x0003f9b8

0000cfb0 <CDWHCIRootPort::ReScanDevices()>:
    cfb0:	e92d4010 	push	{r4, lr}
    cfb4:	e5904008 	ldr	r4, [r0, #8]
    cfb8:	e3540000 	cmp	r4, #0
    cfbc:	0a000002 	beq	cfcc <CDWHCIRootPort::ReScanDevices()+0x1c>
    cfc0:	e1a00004 	mov	r0, r4
    cfc4:	e8bd4010 	pop	{r4, lr}
    cfc8:	ea0003f8 	b	dfb0 <CUSBDevice::ReScanDevices()>
    cfcc:	eb0066fe 	bl	26bcc <CLogger::Get()>
    cfd0:	e59f3010 	ldr	r3, [pc, #16]	; cfe8 <CDWHCIRootPort::ReScanDevices()+0x38>
    cfd4:	e3a02002 	mov	r2, #2
    cfd8:	e59f100c 	ldr	r1, [pc, #12]	; cfec <CDWHCIRootPort::ReScanDevices()+0x3c>
    cfdc:	eb006637 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    cfe0:	e1a00004 	mov	r0, r4
    cfe4:	e8bd8010 	pop	{r4, pc}
    cfe8:	0003f9c8 	.word	0x0003f9c8
    cfec:	0003f99c 	.word	0x0003f99c

0000cff0 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
    cff0:	e3a02000 	mov	r2, #0
    cff4:	e59fc028 	ldr	ip, [pc, #40]	; d024 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x34>
    cff8:	e1510002 	cmp	r1, r2
    cffc:	e5801004 	str	r1, [r0, #4]
    d000:	e580c000 	str	ip, [r0]
    d004:	e5802008 	str	r2, [r0, #8]
    d008:	0a000000 	beq	d010 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x20>
    d00c:	e12fff1e 	bx	lr
    d010:	e92d4010 	push	{r4, lr}
    d014:	e3a0201f 	mov	r2, #31
    d018:	e59f1008 	ldr	r1, [pc, #8]	; d028 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x38>
    d01c:	e59f0008 	ldr	r0, [pc, #8]	; d02c <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x3c>
    d020:	eb005df6 	bl	24800 <assertion_failed>
    d024:	0003f98c 	.word	0x0003f98c
    d028:	0003f9a4 	.word	0x0003f9a4
    d02c:	0003f9b8 	.word	0x0003f9b8

0000d030 <CDWHCIRootPort::Initialize()>:
    d030:	e92d4070 	push	{r4, r5, r6, lr}
    d034:	e1a04000 	mov	r4, r0
    d038:	e5900004 	ldr	r0, [r0, #4]
    d03c:	e3500000 	cmp	r0, #0
    d040:	0a00002b 	beq	d0f4 <CDWHCIRootPort::Initialize()+0xc4>
    d044:	ebfff2ff 	bl	9c48 <CDWHCIDevice::GetPortSpeed()>
    d048:	e3500004 	cmp	r0, #4
    d04c:	e1a05000 	mov	r5, r0
    d050:	0a000040 	beq	d158 <CDWHCIRootPort::Initialize()+0x128>
    d054:	e5943008 	ldr	r3, [r4, #8]
    d058:	e3530000 	cmp	r3, #0
    d05c:	1a000044 	bne	d174 <CDWHCIRootPort::Initialize()+0x144>
    d060:	e3a00058 	mov	r0, #88	; 0x58
    d064:	eb007802 	bl	2b074 <operator new(unsigned int)>
    d068:	e1a06000 	mov	r6, r0
    d06c:	e1a03004 	mov	r3, r4
    d070:	e1a02005 	mov	r2, r5
    d074:	e5941004 	ldr	r1, [r4, #4]
    d078:	eb000344 	bl	dd90 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>
    d07c:	e5846008 	str	r6, [r4, #8]
    d080:	e1a00006 	mov	r0, r6
    d084:	eb0004f6 	bl	e464 <CUSBDevice::Initialize()>
    d088:	e3500000 	cmp	r0, #0
    d08c:	e5940008 	ldr	r0, [r4, #8]
    d090:	1a000009 	bne	d0bc <CDWHCIRootPort::Initialize()+0x8c>
    d094:	e3500000 	cmp	r0, #0
    d098:	0a000002 	beq	d0a8 <CDWHCIRootPort::Initialize()+0x78>
    d09c:	e5903000 	ldr	r3, [r0]
    d0a0:	e5933004 	ldr	r3, [r3, #4]
    d0a4:	e12fff33 	blx	r3
    d0a8:	e3a00000 	mov	r0, #0
    d0ac:	e1a05000 	mov	r5, r0
    d0b0:	e5840008 	str	r0, [r4, #8]
    d0b4:	e1a00005 	mov	r0, r5
    d0b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    d0bc:	e5903000 	ldr	r3, [r0]
    d0c0:	e593300c 	ldr	r3, [r3, #12]
    d0c4:	e12fff33 	blx	r3
    d0c8:	e2505000 	subs	r5, r0, #0
    d0cc:	1a00000c 	bne	d104 <CDWHCIRootPort::Initialize()+0xd4>
    d0d0:	eb0066bd 	bl	26bcc <CLogger::Get()>
    d0d4:	e59f30a8 	ldr	r3, [pc, #168]	; d184 <CDWHCIRootPort::Initialize()+0x154>
    d0d8:	e3a02002 	mov	r2, #2
    d0dc:	e59f10a4 	ldr	r1, [pc, #164]	; d188 <CDWHCIRootPort::Initialize()+0x158>
    d0e0:	eb0065f6 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d0e4:	e5940008 	ldr	r0, [r4, #8]
    d0e8:	e3500000 	cmp	r0, #0
    d0ec:	1affffea 	bne	d09c <CDWHCIRootPort::Initialize()+0x6c>
    d0f0:	eaffffec 	b	d0a8 <CDWHCIRootPort::Initialize()+0x78>
    d0f4:	e3a0202c 	mov	r2, #44	; 0x2c
    d0f8:	e59f108c 	ldr	r1, [pc, #140]	; d18c <CDWHCIRootPort::Initialize()+0x15c>
    d0fc:	e59f008c 	ldr	r0, [pc, #140]	; d190 <CDWHCIRootPort::Initialize()+0x160>
    d100:	eb005dbe 	bl	24800 <assertion_failed>
    d104:	eb0066b0 	bl	26bcc <CLogger::Get()>
    d108:	e59f3084 	ldr	r3, [pc, #132]	; d194 <CDWHCIRootPort::Initialize()+0x164>
    d10c:	e3a02004 	mov	r2, #4
    d110:	e59f1070 	ldr	r1, [pc, #112]	; d188 <CDWHCIRootPort::Initialize()+0x158>
    d114:	eb0065e9 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d118:	e5940004 	ldr	r0, [r4, #4]
    d11c:	ebfff2de 	bl	9c9c <CDWHCIDevice::OvercurrentDetected()>
    d120:	e3500000 	cmp	r0, #0
    d124:	0affffe2 	beq	d0b4 <CDWHCIRootPort::Initialize()+0x84>
    d128:	eb0066a7 	bl	26bcc <CLogger::Get()>
    d12c:	e59f3064 	ldr	r3, [pc, #100]	; d198 <CDWHCIRootPort::Initialize()+0x168>
    d130:	e3a02001 	mov	r2, #1
    d134:	e59f104c 	ldr	r1, [pc, #76]	; d188 <CDWHCIRootPort::Initialize()+0x158>
    d138:	eb0065e0 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d13c:	e5940004 	ldr	r0, [r4, #4]
    d140:	e3a01001 	mov	r1, #1
    d144:	ebfff2e3 	bl	9cd8 <CDWHCIDevice::DisableRootPort(bool)>
    d148:	e5940008 	ldr	r0, [r4, #8]
    d14c:	e3500000 	cmp	r0, #0
    d150:	1affffd1 	bne	d09c <CDWHCIRootPort::Initialize()+0x6c>
    d154:	eaffffd3 	b	d0a8 <CDWHCIRootPort::Initialize()+0x78>
    d158:	eb00669b 	bl	26bcc <CLogger::Get()>
    d15c:	e59f3038 	ldr	r3, [pc, #56]	; d19c <CDWHCIRootPort::Initialize()+0x16c>
    d160:	e3a02001 	mov	r2, #1
    d164:	e59f101c 	ldr	r1, [pc, #28]	; d188 <CDWHCIRootPort::Initialize()+0x158>
    d168:	eb0065d4 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d16c:	e3a05000 	mov	r5, #0
    d170:	eaffffcf 	b	d0b4 <CDWHCIRootPort::Initialize()+0x84>
    d174:	e3a02036 	mov	r2, #54	; 0x36
    d178:	e59f100c 	ldr	r1, [pc, #12]	; d18c <CDWHCIRootPort::Initialize()+0x15c>
    d17c:	e59f001c 	ldr	r0, [pc, #28]	; d1a0 <CDWHCIRootPort::Initialize()+0x170>
    d180:	eb005d9e 	bl	24800 <assertion_failed>
    d184:	0003fa24 	.word	0x0003fa24
    d188:	0003f99c 	.word	0x0003f99c
    d18c:	0003f9a4 	.word	0x0003f9a4
    d190:	0003f9b8 	.word	0x0003f9b8
    d194:	0003fa3c 	.word	0x0003fa3c
    d198:	0003fa50 	.word	0x0003fa50
    d19c:	0003f9f8 	.word	0x0003f9f8
    d1a0:	0003fa14 	.word	0x0003fa14

0000d1a4 <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    d1a4:	e92d4010 	push	{r4, lr}
    d1a8:	e1a04000 	mov	r4, r0
    d1ac:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    d1b0:	e3500000 	cmp	r0, #0
    d1b4:	0a000002 	beq	d1c4 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    d1b8:	e5903000 	ldr	r3, [r0]
    d1bc:	e5933004 	ldr	r3, [r3, #4]
    d1c0:	e12fff33 	blx	r3
    d1c4:	e3a03000 	mov	r3, #0
    d1c8:	e5940044 	ldr	r0, [r4, #68]	; 0x44
    d1cc:	e5843050 	str	r3, [r4, #80]	; 0x50
    d1d0:	e1500003 	cmp	r0, r3
    d1d4:	e5843048 	str	r3, [r4, #72]	; 0x48
    d1d8:	0a000000 	beq	d1e0 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x3c>
    d1dc:	eb0077ac 	bl	2b094 <operator delete[](void*)>
    d1e0:	e1a00004 	mov	r0, r4
    d1e4:	e8bd8010 	pop	{r4, pc}

0000d1e8 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    d1e8:	e5801000 	str	r1, [r0]
    d1ec:	e12fff1e 	bx	lr

0000d1f0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    d1f0:	e92d4070 	push	{r4, r5, r6, lr}
    d1f4:	e1a04000 	mov	r4, r0
    d1f8:	e59f0174 	ldr	r0, [pc, #372]	; d374 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x184>
    d1fc:	e5841040 	str	r1, [r4, #64]	; 0x40
    d200:	e0000001 	and	r0, r0, r1
    d204:	e3500000 	cmp	r0, #0
    d208:	0a000006 	beq	d228 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x38>
    d20c:	e3110010 	tst	r1, #16
    d210:	08bd8070 	popeq	{r4, r5, r6, pc}
    d214:	e5940004 	ldr	r0, [r4, #4]
    d218:	eb001d0b 	bl	1464c <CUSBRequest::IsCompleteOnNAK() const>
    d21c:	e3500000 	cmp	r0, #0
    d220:	1a000039 	bne	d30c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x11c>
    d224:	e8bd8070 	pop	{r4, r5, r6, pc}
    d228:	e5d40010 	ldrb	r0, [r4, #16]
    d22c:	e5945030 	ldr	r5, [r4, #48]	; 0x30
    d230:	e594102c 	ldr	r1, [r4, #44]	; 0x2c
    d234:	e3500000 	cmp	r0, #0
    d238:	e0455002 	sub	r5, r5, r2
    d23c:	e0413003 	sub	r3, r1, r3
    d240:	1a000018 	bne	d2a8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb8>
    d244:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d248:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    d24c:	e0811003 	add	r1, r1, r3
    d250:	e0823003 	add	r3, r2, r3
    d254:	e5841034 	str	r1, [r4, #52]	; 0x34
    d258:	e5843048 	str	r3, [r4, #72]	; 0x48
    d25c:	e5d42009 	ldrb	r2, [r4, #9]
    d260:	e1a01005 	mov	r1, r5
    d264:	e5940018 	ldr	r0, [r4, #24]
    d268:	eb000866 	bl	f408 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    d26c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    d270:	e1550002 	cmp	r5, r2
    d274:	8a00002e 	bhi	d334 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x144>
    d278:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    d27c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    d280:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    d284:	e0410003 	sub	r0, r1, r3
    d288:	e0422005 	sub	r2, r2, r5
    d28c:	e150000c 	cmp	r0, ip
    d290:	e5842028 	str	r2, [r4, #40]	; 0x28
    d294:	28bd8070 	popcs	{r4, r5, r6, pc}
    d298:	e1510003 	cmp	r1, r3
    d29c:	3a000028 	bcc	d344 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x154>
    d2a0:	e584002c 	str	r0, [r4, #44]	; 0x2c
    d2a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d2a8:	e5d40011 	ldrb	r0, [r4, #17]
    d2ac:	e3530000 	cmp	r3, #0
    d2b0:	13a02000 	movne	r2, #0
    d2b4:	02002001 	andeq	r2, r0, #1
    d2b8:	e3520000 	cmp	r2, #0
    d2bc:	0a000009 	beq	d2e8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xf8>
    d2c0:	e3510000 	cmp	r1, #0
    d2c4:	15941020 	ldrne	r1, [r4, #32]
    d2c8:	10010591 	mulne	r1, r1, r5
    d2cc:	e5942034 	ldr	r2, [r4, #52]	; 0x34
    d2d0:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    d2d4:	e0822001 	add	r2, r2, r1
    d2d8:	e0831001 	add	r1, r3, r1
    d2dc:	e5842034 	str	r2, [r4, #52]	; 0x34
    d2e0:	e5841048 	str	r1, [r4, #72]	; 0x48
    d2e4:	eaffffdc 	b	d25c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x6c>
    d2e8:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    d2ec:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    d2f0:	e0811003 	add	r1, r1, r3
    d2f4:	e3500000 	cmp	r0, #0
    d2f8:	e0823003 	add	r3, r2, r3
    d2fc:	e5841034 	str	r1, [r4, #52]	; 0x34
    d300:	e5843048 	str	r3, [r4, #72]	; 0x48
    d304:	0affffd8 	beq	d26c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x7c>
    d308:	eaffffd3 	b	d25c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x6c>
    d30c:	e5940018 	ldr	r0, [r4, #24]
    d310:	eb000817 	bl	f374 <CUSBEndpoint::GetType() const>
    d314:	e3500001 	cmp	r0, #1
    d318:	1a00000d 	bne	d354 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x164>
    d31c:	e5d43008 	ldrb	r3, [r4, #8]
    d320:	e3530000 	cmp	r3, #0
    d324:	0a00000e 	beq	d364 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x174>
    d328:	e3a03000 	mov	r3, #0
    d32c:	e5843028 	str	r3, [r4, #40]	; 0x28
    d330:	e8bd8070 	pop	{r4, r5, r6, pc}
    d334:	e3a020d6 	mov	r2, #214	; 0xd6
    d338:	e59f1038 	ldr	r1, [pc, #56]	; d378 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    d33c:	e59f0038 	ldr	r0, [pc, #56]	; d37c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x18c>
    d340:	eb005d2e 	bl	24800 <assertion_failed>
    d344:	e3a020dc 	mov	r2, #220	; 0xdc
    d348:	e59f1028 	ldr	r1, [pc, #40]	; d378 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    d34c:	e59f002c 	ldr	r0, [pc, #44]	; d380 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x190>
    d350:	eb005d2a 	bl	24800 <assertion_failed>
    d354:	e3a020b9 	mov	r2, #185	; 0xb9
    d358:	e59f1018 	ldr	r1, [pc, #24]	; d378 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    d35c:	e59f0020 	ldr	r0, [pc, #32]	; d384 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x194>
    d360:	eb005d26 	bl	24800 <assertion_failed>
    d364:	e3a020ba 	mov	r2, #186	; 0xba
    d368:	e59f1008 	ldr	r1, [pc, #8]	; d378 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x188>
    d36c:	e59f0014 	ldr	r0, [pc, #20]	; d388 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x198>
    d370:	eb005d22 	bl	24800 <assertion_failed>
    d374:	000007dc 	.word	0x000007dc
    d378:	0003fa68 	.word	0x0003fa68
    d37c:	0003fab4 	.word	0x0003fab4
    d380:	0003fad8 	.word	0x0003fad8
    d384:	0003fa80 	.word	0x0003fa80
    d388:	0003faac 	.word	0x0003faac

0000d38c <CDWHCITransferStageData::SetSplitComplete(bool)>:
    d38c:	e5d03010 	ldrb	r3, [r0, #16]
    d390:	e3530000 	cmp	r3, #0
    d394:	0a000001 	beq	d3a0 <CDWHCITransferStageData::SetSplitComplete(bool)+0x14>
    d398:	e5c01011 	strb	r1, [r0, #17]
    d39c:	e12fff1e 	bx	lr
    d3a0:	e92d4010 	push	{r4, lr}
    d3a4:	e3a020e3 	mov	r2, #227	; 0xe3
    d3a8:	e59f1004 	ldr	r1, [pc, #4]	; d3b4 <CDWHCITransferStageData::SetSplitComplete(bool)+0x28>
    d3ac:	e59f0004 	ldr	r0, [pc, #4]	; d3b8 <CDWHCITransferStageData::SetSplitComplete(bool)+0x2c>
    d3b0:	eb005d12 	bl	24800 <assertion_failed>
    d3b4:	0003fa68 	.word	0x0003fa68
    d3b8:	0003fb04 	.word	0x0003fb04

0000d3bc <CDWHCITransferStageData::SetState(unsigned int)>:
    d3bc:	e5801038 	str	r1, [r0, #56]	; 0x38
    d3c0:	e12fff1e 	bx	lr

0000d3c4 <CDWHCITransferStageData::GetState() const>:
    d3c4:	e5900038 	ldr	r0, [r0, #56]	; 0x38
    d3c8:	e12fff1e 	bx	lr

0000d3cc <CDWHCITransferStageData::SetSubState(unsigned int)>:
    d3cc:	e580103c 	str	r1, [r0, #60]	; 0x3c
    d3d0:	e12fff1e 	bx	lr

0000d3d4 <CDWHCITransferStageData::GetSubState() const>:
    d3d4:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
    d3d8:	e12fff1e 	bx	lr

0000d3dc <CDWHCITransferStageData::BeginSplitCycle()>:
    d3dc:	e3a00001 	mov	r0, #1
    d3e0:	e12fff1e 	bx	lr

0000d3e4 <CDWHCITransferStageData::GetChannelNumber() const>:
    d3e4:	e5900000 	ldr	r0, [r0]
    d3e8:	e12fff1e 	bx	lr

0000d3ec <CDWHCITransferStageData::IsPeriodic() const>:
    d3ec:	e5900018 	ldr	r0, [r0, #24]
    d3f0:	e92d4010 	push	{r4, lr}
    d3f4:	e3500000 	cmp	r0, #0
    d3f8:	0a000006 	beq	d418 <CDWHCITransferStageData::IsPeriodic() const+0x2c>
    d3fc:	eb0007dc 	bl	f374 <CUSBEndpoint::GetType() const>
    d400:	e2400002 	sub	r0, r0, #2
    d404:	e6ef0070 	uxtb	r0, r0
    d408:	e3500001 	cmp	r0, #1
    d40c:	83a00000 	movhi	r0, #0
    d410:	93a00001 	movls	r0, #1
    d414:	e8bd8010 	pop	{r4, pc}
    d418:	e3a02f42 	mov	r2, #264	; 0x108
    d41c:	e59f1004 	ldr	r1, [pc, #4]	; d428 <CDWHCITransferStageData::IsPeriodic() const+0x3c>
    d420:	e59f0004 	ldr	r0, [pc, #4]	; d42c <CDWHCITransferStageData::IsPeriodic() const+0x40>
    d424:	eb005cf5 	bl	24800 <assertion_failed>
    d428:	0003fa68 	.word	0x0003fa68
    d42c:	0003fb18 	.word	0x0003fb18

0000d430 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    d430:	e92d4070 	push	{r4, r5, r6, lr}
    d434:	e1a05002 	mov	r5, r2
    d438:	e3a02000 	mov	r2, #0
    d43c:	e5dd6010 	ldrb	r6, [sp, #16]
    d440:	e1550002 	cmp	r5, r2
    d444:	e8800022 	stm	r0, {r1, r5}
    d448:	e5c03008 	strb	r3, [r0, #8]
    d44c:	e5c06009 	strb	r6, [r0, #9]
    d450:	e580200c 	str	r2, [r0, #12]
    d454:	e5c02011 	strb	r2, [r0, #17]
    d458:	e5802034 	str	r2, [r0, #52]	; 0x34
    d45c:	e5802038 	str	r2, [r0, #56]	; 0x38
    d460:	e580203c 	str	r2, [r0, #60]	; 0x3c
    d464:	e5802040 	str	r2, [r0, #64]	; 0x40
    d468:	e5802044 	str	r2, [r0, #68]	; 0x44
    d46c:	e580204c 	str	r2, [r0, #76]	; 0x4c
    d470:	e5802050 	str	r2, [r0, #80]	; 0x50
    d474:	0a00008b 	beq	d6a8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x278>
    d478:	e1a04000 	mov	r4, r0
    d47c:	e1a00005 	mov	r0, r5
    d480:	eb001c10 	bl	144c8 <CUSBRequest::GetEndpoint() const>
    d484:	e3500000 	cmp	r0, #0
    d488:	e5840018 	str	r0, [r4, #24]
    d48c:	0a000089 	beq	d6b8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x288>
    d490:	eb0007aa 	bl	f340 <CUSBEndpoint::GetDevice() const>
    d494:	e3500000 	cmp	r0, #0
    d498:	e5840014 	str	r0, [r4, #20]
    d49c:	0a000089 	beq	d6c8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x298>
    d4a0:	eb000374 	bl	e278 <CUSBDevice::GetSpeed() const>
    d4a4:	e5c4001c 	strb	r0, [r4, #28]
    d4a8:	e5940018 	ldr	r0, [r4, #24]
    d4ac:	eb0007b7 	bl	f390 <CUSBEndpoint::GetMaxPacketSize() const>
    d4b0:	e5840020 	str	r0, [r4, #32]
    d4b4:	e5940014 	ldr	r0, [r4, #20]
    d4b8:	eb000370 	bl	e280 <CUSBDevice::IsSplit() const>
    d4bc:	e3560000 	cmp	r6, #0
    d4c0:	e5c40010 	strb	r0, [r4, #16]
    d4c4:	0a00002f 	beq	d588 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x158>
    d4c8:	e5945044 	ldr	r5, [r4, #68]	; 0x44
    d4cc:	e3550000 	cmp	r5, #0
    d4d0:	1a00006c 	bne	d688 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x258>
    d4d4:	e3a00004 	mov	r0, #4
    d4d8:	eb0076e6 	bl	2b078 <operator new[](unsigned int)>
    d4dc:	e3a03001 	mov	r3, #1
    d4e0:	e5840044 	str	r0, [r4, #68]	; 0x44
    d4e4:	e5840048 	str	r0, [r4, #72]	; 0x48
    d4e8:	e5845024 	str	r5, [r4, #36]	; 0x24
    d4ec:	e584502c 	str	r5, [r4, #44]	; 0x2c
    d4f0:	e5843028 	str	r3, [r4, #40]	; 0x28
    d4f4:	e5843030 	str	r3, [r4, #48]	; 0x30
    d4f8:	e3100003 	tst	r0, #3
    d4fc:	1a000075 	bne	d6d8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a8>
    d500:	e5d43010 	ldrb	r3, [r4, #16]
    d504:	e3530000 	cmp	r3, #0
    d508:	0a00000d 	beq	d544 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x114>
    d50c:	e1a00004 	mov	r0, r4
    d510:	ebffffb5 	bl	d3ec <CDWHCITransferStageData::IsPeriodic() const>
    d514:	e3500000 	cmp	r0, #0
    d518:	0a00003b 	beq	d60c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1dc>
    d51c:	e3a00014 	mov	r0, #20
    d520:	ebfffd59 	bl	ca8c <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    d524:	e1a05000 	mov	r5, r0
    d528:	ebfffd43 	bl	ca3c <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    d52c:	e5845050 	str	r5, [r4, #80]	; 0x50
    d530:	e59d3014 	ldr	r3, [sp, #20]
    d534:	e3530000 	cmp	r3, #0
    d538:	1a00003b 	bne	d62c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1fc>
    d53c:	e1a00004 	mov	r0, r4
    d540:	e8bd8070 	pop	{r4, r5, r6, pc}
    d544:	e5940014 	ldr	r0, [r4, #20]
    d548:	eb00034e 	bl	e288 <CUSBDevice::GetHubAddress() const>
    d54c:	e3500000 	cmp	r0, #0
    d550:	1afffff6 	bne	d530 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x100>
    d554:	e5d4301c 	ldrb	r3, [r4, #28]
    d558:	e3530002 	cmp	r3, #2
    d55c:	0afffff3 	beq	d530 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x100>
    d560:	e1a00004 	mov	r0, r4
    d564:	ebffffa0 	bl	d3ec <CDWHCITransferStageData::IsPeriodic() const>
    d568:	e1a06000 	mov	r6, r0
    d56c:	e3a00008 	mov	r0, #8
    d570:	ebfffc33 	bl	c644 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
    d574:	e1a05000 	mov	r5, r0
    d578:	e1a01006 	mov	r1, r6
    d57c:	ebfffc29 	bl	c628 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
    d580:	e5845050 	str	r5, [r4, #80]	; 0x50
    d584:	eaffffe9 	b	d530 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x100>
    d588:	e1a01006 	mov	r1, r6
    d58c:	e5940018 	ldr	r0, [r4, #24]
    d590:	eb00078c 	bl	f3c8 <CUSBEndpoint::GetNextPID(bool)>
    d594:	e3500000 	cmp	r0, #0
    d598:	e1a00005 	mov	r0, r5
    d59c:	0a000034 	beq	d674 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x244>
    d5a0:	eb001bf9 	bl	1458c <CUSBRequest::GetBuffer()>
    d5a4:	e5840048 	str	r0, [r4, #72]	; 0x48
    d5a8:	e1a00005 	mov	r0, r5
    d5ac:	eb001c05 	bl	145c8 <CUSBRequest::GetBufLen() const>
    d5b0:	e1a05000 	mov	r5, r0
    d5b4:	e5840024 	str	r0, [r4, #36]	; 0x24
    d5b8:	e5946020 	ldr	r6, [r4, #32]
    d5bc:	e2460001 	sub	r0, r6, #1
    d5c0:	e0800005 	add	r0, r0, r5
    d5c4:	e1a01006 	mov	r1, r6
    d5c8:	eb00c1af 	bl	3dc8c <__aeabi_uidiv>
    d5cc:	e5d43010 	ldrb	r3, [r4, #16]
    d5d0:	e5840028 	str	r0, [r4, #40]	; 0x28
    d5d4:	e3530000 	cmp	r3, #0
    d5d8:	0a00002e 	beq	d698 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x268>
    d5dc:	e1560005 	cmp	r6, r5
    d5e0:	31a05006 	movcc	r5, r6
    d5e4:	e3a03001 	mov	r3, #1
    d5e8:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    d5ec:	e584502c 	str	r5, [r4, #44]	; 0x2c
    d5f0:	e5843030 	str	r3, [r4, #48]	; 0x30
    d5f4:	e3500000 	cmp	r0, #0
    d5f8:	1affffbe 	bne	d4f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xc8>
    d5fc:	e3a0206c 	mov	r2, #108	; 0x6c
    d600:	e59f1100 	ldr	r1, [pc, #256]	; d708 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d604:	e59f0100 	ldr	r0, [pc, #256]	; d70c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2dc>
    d608:	eb005c7c 	bl	24800 <assertion_failed>
    d60c:	e3a00010 	mov	r0, #16
    d610:	ebfffb6b 	bl	c3c4 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
    d614:	e1a05000 	mov	r5, r0
    d618:	ebfffb57 	bl	c37c <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    d61c:	e59d3014 	ldr	r3, [sp, #20]
    d620:	e5845050 	str	r5, [r4, #80]	; 0x50
    d624:	e3530000 	cmp	r3, #0
    d628:	0affffc3 	beq	d53c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x10c>
    d62c:	e5940018 	ldr	r0, [r4, #24]
    d630:	eb00074f 	bl	f374 <CUSBEndpoint::GetType() const>
    d634:	e3500002 	cmp	r0, #2
    d638:	1a00002a 	bne	d6e8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b8>
    d63c:	e3a03064 	mov	r3, #100	; 0x64
    d640:	e59d2014 	ldr	r2, [sp, #20]
    d644:	e0030293 	mul	r3, r3, r2
    d648:	e59f20c0 	ldr	r2, [pc, #192]	; d710 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e0>
    d64c:	e0832392 	umull	r2, r3, r2, r3
    d650:	e1a03323 	lsr	r3, r3, #6
    d654:	e3530000 	cmp	r3, #0
    d658:	e584300c 	str	r3, [r4, #12]
    d65c:	0a000025 	beq	d6f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2c8>
    d660:	eb007226 	bl	29f00 <CTimer::Get()>
    d664:	eb006f6f 	bl	29428 <CTimer::GetTicks() const>
    d668:	e584004c 	str	r0, [r4, #76]	; 0x4c
    d66c:	e1a00004 	mov	r0, r4
    d670:	e8bd8070 	pop	{r4, r5, r6, pc}
    d674:	eb001bb0 	bl	1453c <CUSBRequest::GetSetupData()>
    d678:	e3a05008 	mov	r5, #8
    d67c:	e5840048 	str	r0, [r4, #72]	; 0x48
    d680:	e5845024 	str	r5, [r4, #36]	; 0x24
    d684:	eaffffcb 	b	d5b8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x188>
    d688:	e3a02061 	mov	r2, #97	; 0x61
    d68c:	e59f1074 	ldr	r1, [pc, #116]	; d708 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d690:	e59f007c 	ldr	r0, [pc, #124]	; d714 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e4>
    d694:	eb005c59 	bl	24800 <assertion_failed>
    d698:	e5840030 	str	r0, [r4, #48]	; 0x30
    d69c:	e584502c 	str	r5, [r4, #44]	; 0x2c
    d6a0:	e5940048 	ldr	r0, [r4, #72]	; 0x48
    d6a4:	eaffffd2 	b	d5f4 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1c4>
    d6a8:	e3a02031 	mov	r2, #49	; 0x31
    d6ac:	e59f1054 	ldr	r1, [pc, #84]	; d708 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d6b0:	e59f0060 	ldr	r0, [pc, #96]	; d718 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2e8>
    d6b4:	eb005c51 	bl	24800 <assertion_failed>
    d6b8:	e3a02034 	mov	r2, #52	; 0x34
    d6bc:	e59f1044 	ldr	r1, [pc, #68]	; d708 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d6c0:	e59f0054 	ldr	r0, [pc, #84]	; d71c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2ec>
    d6c4:	eb005c4d 	bl	24800 <assertion_failed>
    d6c8:	e3a02036 	mov	r2, #54	; 0x36
    d6cc:	e59f1034 	ldr	r1, [pc, #52]	; d708 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d6d0:	e59f0048 	ldr	r0, [pc, #72]	; d720 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f0>
    d6d4:	eb005c49 	bl	24800 <assertion_failed>
    d6d8:	e3a0206d 	mov	r2, #109	; 0x6d
    d6dc:	e59f1024 	ldr	r1, [pc, #36]	; d708 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d6e0:	e59f003c 	ldr	r0, [pc, #60]	; d724 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f4>
    d6e4:	eb005c45 	bl	24800 <assertion_failed>
    d6e8:	e3a02088 	mov	r2, #136	; 0x88
    d6ec:	e59f1014 	ldr	r1, [pc, #20]	; d708 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d6f0:	e59f0030 	ldr	r0, [pc, #48]	; d728 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f8>
    d6f4:	eb005c41 	bl	24800 <assertion_failed>
    d6f8:	e3a0208b 	mov	r2, #139	; 0x8b
    d6fc:	e59f1004 	ldr	r1, [pc, #4]	; d708 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d8>
    d700:	e59f0024 	ldr	r0, [pc, #36]	; d72c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2fc>
    d704:	eb005c3d 	bl	24800 <assertion_failed>
    d708:	0003fa68 	.word	0x0003fa68
    d70c:	0003fb5c 	.word	0x0003fb5c
    d710:	10624dd3 	.word	0x10624dd3
    d714:	0003fb48 	.word	0x0003fb48
    d718:	0003fb2c 	.word	0x0003fb2c
    d71c:	0003fb18 	.word	0x0003fb18
    d720:	0003fb38 	.word	0x0003fb38
    d724:	0003fb74 	.word	0x0003fb74
    d728:	0003fb9c 	.word	0x0003fb9c
    d72c:	0003fbd0 	.word	0x0003fbd0

0000d730 <CDWHCITransferStageData::GetDeviceAddress() const>:
    d730:	e5900014 	ldr	r0, [r0, #20]
    d734:	e3500000 	cmp	r0, #0
    d738:	0a000000 	beq	d740 <CDWHCITransferStageData::GetDeviceAddress() const+0x10>
    d73c:	ea0002cb 	b	e270 <CUSBDevice::GetAddress() const>
    d740:	e92d4010 	push	{r4, lr}
    d744:	e59f2008 	ldr	r2, [pc, #8]	; d754 <CDWHCITransferStageData::GetDeviceAddress() const+0x24>
    d748:	e59f1008 	ldr	r1, [pc, #8]	; d758 <CDWHCITransferStageData::GetDeviceAddress() const+0x28>
    d74c:	e59f0008 	ldr	r0, [pc, #8]	; d75c <CDWHCITransferStageData::GetDeviceAddress() const+0x2c>
    d750:	eb005c2a 	bl	24800 <assertion_failed>
    d754:	00000111 	.word	0x00000111
    d758:	0003fa68 	.word	0x0003fa68
    d75c:	0003fb38 	.word	0x0003fb38

0000d760 <CDWHCITransferStageData::GetEndpointType() const>:
    d760:	e5900018 	ldr	r0, [r0, #24]
    d764:	e92d4010 	push	{r4, lr}
    d768:	e3500000 	cmp	r0, #0
    d76c:	0a00000f 	beq	d7b0 <CDWHCITransferStageData::GetEndpointType() const+0x50>
    d770:	eb0006ff 	bl	f374 <CUSBEndpoint::GetType() const>
    d774:	e3500001 	cmp	r0, #1
    d778:	0a00000a 	beq	d7a8 <CDWHCITransferStageData::GetEndpointType() const+0x48>
    d77c:	3a000003 	bcc	d790 <CDWHCITransferStageData::GetEndpointType() const+0x30>
    d780:	e3500002 	cmp	r0, #2
    d784:	1a000003 	bne	d798 <CDWHCITransferStageData::GetEndpointType() const+0x38>
    d788:	e3a00003 	mov	r0, #3
    d78c:	e8bd8010 	pop	{r4, pc}
    d790:	e3a00000 	mov	r0, #0
    d794:	e8bd8010 	pop	{r4, pc}
    d798:	e59f2020 	ldr	r2, [pc, #32]	; d7c0 <CDWHCITransferStageData::GetEndpointType() const+0x60>
    d79c:	e59f1020 	ldr	r1, [pc, #32]	; d7c4 <CDWHCITransferStageData::GetEndpointType() const+0x64>
    d7a0:	e59f0020 	ldr	r0, [pc, #32]	; d7c8 <CDWHCITransferStageData::GetEndpointType() const+0x68>
    d7a4:	eb005c15 	bl	24800 <assertion_failed>
    d7a8:	e3a00002 	mov	r0, #2
    d7ac:	e8bd8010 	pop	{r4, pc}
    d7b0:	e59f2014 	ldr	r2, [pc, #20]	; d7cc <CDWHCITransferStageData::GetEndpointType() const+0x6c>
    d7b4:	e59f1008 	ldr	r1, [pc, #8]	; d7c4 <CDWHCITransferStageData::GetEndpointType() const+0x64>
    d7b8:	e59f0010 	ldr	r0, [pc, #16]	; d7d0 <CDWHCITransferStageData::GetEndpointType() const+0x70>
    d7bc:	eb005c0f 	bl	24800 <assertion_failed>
    d7c0:	0000012a 	.word	0x0000012a
    d7c4:	0003fa68 	.word	0x0003fa68
    d7c8:	0003fd5c 	.word	0x0003fd5c
    d7cc:	00000117 	.word	0x00000117
    d7d0:	0003fb18 	.word	0x0003fb18

0000d7d4 <CDWHCITransferStageData::GetEndpointNumber() const>:
    d7d4:	e5900018 	ldr	r0, [r0, #24]
    d7d8:	e3500000 	cmp	r0, #0
    d7dc:	0a000000 	beq	d7e4 <CDWHCITransferStageData::GetEndpointNumber() const+0x10>
    d7e0:	ea0006e1 	b	f36c <CUSBEndpoint::GetNumber() const>
    d7e4:	e92d4010 	push	{r4, lr}
    d7e8:	e59f2008 	ldr	r2, [pc, #8]	; d7f8 <CDWHCITransferStageData::GetEndpointNumber() const+0x24>
    d7ec:	e59f1008 	ldr	r1, [pc, #8]	; d7fc <CDWHCITransferStageData::GetEndpointNumber() const+0x28>
    d7f0:	e59f0008 	ldr	r0, [pc, #8]	; d800 <CDWHCITransferStageData::GetEndpointNumber() const+0x2c>
    d7f4:	eb005c01 	bl	24800 <assertion_failed>
    d7f8:	00000133 	.word	0x00000133
    d7fc:	0003fa68 	.word	0x0003fa68
    d800:	0003fb18 	.word	0x0003fb18

0000d804 <CDWHCITransferStageData::GetMaxPacketSize() const>:
    d804:	e5900020 	ldr	r0, [r0, #32]
    d808:	e12fff1e 	bx	lr

0000d80c <CDWHCITransferStageData::GetSpeed() const>:
    d80c:	e5d0001c 	ldrb	r0, [r0, #28]
    d810:	e12fff1e 	bx	lr

0000d814 <CDWHCITransferStageData::GetPID() const>:
    d814:	e5903018 	ldr	r3, [r0, #24]
    d818:	e92d4010 	push	{r4, lr}
    d81c:	e3530000 	cmp	r3, #0
    d820:	0a00000f 	beq	d864 <CDWHCITransferStageData::GetPID() const+0x50>
    d824:	e5d01009 	ldrb	r1, [r0, #9]
    d828:	e1a00003 	mov	r0, r3
    d82c:	eb0006e5 	bl	f3c8 <CUSBEndpoint::GetNextPID(bool)>
    d830:	e3500001 	cmp	r0, #1
    d834:	0a000008 	beq	d85c <CDWHCITransferStageData::GetPID() const+0x48>
    d838:	3a000005 	bcc	d854 <CDWHCITransferStageData::GetPID() const+0x40>
    d83c:	e3500002 	cmp	r0, #2
    d840:	08bd8010 	popeq	{r4, pc}
    d844:	e59f2028 	ldr	r2, [pc, #40]	; d874 <CDWHCITransferStageData::GetPID() const+0x60>
    d848:	e59f1028 	ldr	r1, [pc, #40]	; d878 <CDWHCITransferStageData::GetPID() const+0x64>
    d84c:	e59f0028 	ldr	r0, [pc, #40]	; d87c <CDWHCITransferStageData::GetPID() const+0x68>
    d850:	eb005bea 	bl	24800 <assertion_failed>
    d854:	e3a00003 	mov	r0, #3
    d858:	e8bd8010 	pop	{r4, pc}
    d85c:	e3a00000 	mov	r0, #0
    d860:	e8bd8010 	pop	{r4, pc}
    d864:	e59f2014 	ldr	r2, [pc, #20]	; d880 <CDWHCITransferStageData::GetPID() const+0x6c>
    d868:	e59f1008 	ldr	r1, [pc, #8]	; d878 <CDWHCITransferStageData::GetPID() const+0x64>
    d86c:	e59f0010 	ldr	r0, [pc, #16]	; d884 <CDWHCITransferStageData::GetPID() const+0x70>
    d870:	eb005be2 	bl	24800 <assertion_failed>
    d874:	00000156 	.word	0x00000156
    d878:	0003fa68 	.word	0x0003fa68
    d87c:	0003fd5c 	.word	0x0003fd5c
    d880:	00000143 	.word	0x00000143
    d884:	0003fb18 	.word	0x0003fb18

0000d888 <CDWHCITransferStageData::IsDirectionIn() const>:
    d888:	e5d00008 	ldrb	r0, [r0, #8]
    d88c:	e12fff1e 	bx	lr

0000d890 <CDWHCITransferStageData::IsStatusStage() const>:
    d890:	e5d00009 	ldrb	r0, [r0, #9]
    d894:	e12fff1e 	bx	lr

0000d898 <CDWHCITransferStageData::GetDMAAddress() const>:
    d898:	e5900048 	ldr	r0, [r0, #72]	; 0x48
    d89c:	e3500000 	cmp	r0, #0
    d8a0:	0a000000 	beq	d8a8 <CDWHCITransferStageData::GetDMAAddress() const+0x10>
    d8a4:	e12fff1e 	bx	lr
    d8a8:	e92d4010 	push	{r4, lr}
    d8ac:	e59f2008 	ldr	r2, [pc, #8]	; d8bc <CDWHCITransferStageData::GetDMAAddress() const+0x24>
    d8b0:	e59f1008 	ldr	r1, [pc, #8]	; d8c0 <CDWHCITransferStageData::GetDMAAddress() const+0x28>
    d8b4:	e59f0008 	ldr	r0, [pc, #8]	; d8c4 <CDWHCITransferStageData::GetDMAAddress() const+0x2c>
    d8b8:	eb005bd0 	bl	24800 <assertion_failed>
    d8bc:	00000169 	.word	0x00000169
    d8c0:	0003fa68 	.word	0x0003fa68
    d8c4:	0003fb5c 	.word	0x0003fb5c

0000d8c8 <CDWHCITransferStageData::GetBytesToTransfer() const>:
    d8c8:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    d8cc:	e12fff1e 	bx	lr

0000d8d0 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    d8d0:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    d8d4:	e12fff1e 	bx	lr

0000d8d8 <CDWHCITransferStageData::IsSplit() const>:
    d8d8:	e5d00010 	ldrb	r0, [r0, #16]
    d8dc:	e12fff1e 	bx	lr

0000d8e0 <CDWHCITransferStageData::IsSplitComplete() const>:
    d8e0:	e5d03010 	ldrb	r3, [r0, #16]
    d8e4:	e3530000 	cmp	r3, #0
    d8e8:	0a000001 	beq	d8f4 <CDWHCITransferStageData::IsSplitComplete() const+0x14>
    d8ec:	e5d00011 	ldrb	r0, [r0, #17]
    d8f0:	e12fff1e 	bx	lr
    d8f4:	e92d4010 	push	{r4, lr}
    d8f8:	e59f2008 	ldr	r2, [pc, #8]	; d908 <CDWHCITransferStageData::IsSplitComplete() const+0x28>
    d8fc:	e59f1008 	ldr	r1, [pc, #8]	; d90c <CDWHCITransferStageData::IsSplitComplete() const+0x2c>
    d900:	e59f0008 	ldr	r0, [pc, #8]	; d910 <CDWHCITransferStageData::IsSplitComplete() const+0x30>
    d904:	eb005bbd 	bl	24800 <assertion_failed>
    d908:	0000017f 	.word	0x0000017f
    d90c:	0003fa68 	.word	0x0003fa68
    d910:	0003fb04 	.word	0x0003fb04

0000d914 <CDWHCITransferStageData::GetHubAddress() const>:
    d914:	e5d03010 	ldrb	r3, [r0, #16]
    d918:	e92d4010 	push	{r4, lr}
    d91c:	e3530000 	cmp	r3, #0
    d920:	0a000004 	beq	d938 <CDWHCITransferStageData::GetHubAddress() const+0x24>
    d924:	e5900014 	ldr	r0, [r0, #20]
    d928:	e3500000 	cmp	r0, #0
    d92c:	0a000005 	beq	d948 <CDWHCITransferStageData::GetHubAddress() const+0x34>
    d930:	e8bd4010 	pop	{r4, lr}
    d934:	ea000253 	b	e288 <CUSBDevice::GetHubAddress() const>
    d938:	e59f2018 	ldr	r2, [pc, #24]	; d958 <CDWHCITransferStageData::GetHubAddress() const+0x44>
    d93c:	e59f1018 	ldr	r1, [pc, #24]	; d95c <CDWHCITransferStageData::GetHubAddress() const+0x48>
    d940:	e59f0018 	ldr	r0, [pc, #24]	; d960 <CDWHCITransferStageData::GetHubAddress() const+0x4c>
    d944:	eb005bad 	bl	24800 <assertion_failed>
    d948:	e3a02f62 	mov	r2, #392	; 0x188
    d94c:	e59f1008 	ldr	r1, [pc, #8]	; d95c <CDWHCITransferStageData::GetHubAddress() const+0x48>
    d950:	e59f000c 	ldr	r0, [pc, #12]	; d964 <CDWHCITransferStageData::GetHubAddress() const+0x50>
    d954:	eb005ba9 	bl	24800 <assertion_failed>
    d958:	00000186 	.word	0x00000186
    d95c:	0003fa68 	.word	0x0003fa68
    d960:	0003fb04 	.word	0x0003fb04
    d964:	0003fb38 	.word	0x0003fb38

0000d968 <CDWHCITransferStageData::GetHubPortAddress() const>:
    d968:	e5d03010 	ldrb	r3, [r0, #16]
    d96c:	e92d4010 	push	{r4, lr}
    d970:	e3530000 	cmp	r3, #0
    d974:	0a000004 	beq	d98c <CDWHCITransferStageData::GetHubPortAddress() const+0x24>
    d978:	e5900014 	ldr	r0, [r0, #20]
    d97c:	e3500000 	cmp	r0, #0
    d980:	0a000005 	beq	d99c <CDWHCITransferStageData::GetHubPortAddress() const+0x34>
    d984:	e8bd4010 	pop	{r4, lr}
    d988:	ea000240 	b	e290 <CUSBDevice::GetHubPortNumber() const>
    d98c:	e59f2018 	ldr	r2, [pc, #24]	; d9ac <CDWHCITransferStageData::GetHubPortAddress() const+0x44>
    d990:	e59f1018 	ldr	r1, [pc, #24]	; d9b0 <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
    d994:	e59f0018 	ldr	r0, [pc, #24]	; d9b4 <CDWHCITransferStageData::GetHubPortAddress() const+0x4c>
    d998:	eb005b98 	bl	24800 <assertion_failed>
    d99c:	e3a02e19 	mov	r2, #400	; 0x190
    d9a0:	e59f1008 	ldr	r1, [pc, #8]	; d9b0 <CDWHCITransferStageData::GetHubPortAddress() const+0x48>
    d9a4:	e59f000c 	ldr	r0, [pc, #12]	; d9b8 <CDWHCITransferStageData::GetHubPortAddress() const+0x50>
    d9a8:	eb005b94 	bl	24800 <assertion_failed>
    d9ac:	0000018e 	.word	0x0000018e
    d9b0:	0003fa68 	.word	0x0003fa68
    d9b4:	0003fb04 	.word	0x0003fb04
    d9b8:	0003fb38 	.word	0x0003fb38

0000d9bc <CDWHCITransferStageData::GetSplitPosition() const>:
    d9bc:	e3a00003 	mov	r0, #3
    d9c0:	e12fff1e 	bx	lr

0000d9c4 <CDWHCITransferStageData::GetStatusMask() const>:
    d9c4:	e5d03010 	ldrb	r3, [r0, #16]
    d9c8:	e3530000 	cmp	r3, #0
    d9cc:	0a000001 	beq	d9d8 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    d9d0:	e59f0018 	ldr	r0, [pc, #24]	; d9f0 <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    d9d4:	e12fff1e 	bx	lr
    d9d8:	e92d4010 	push	{r4, lr}
    d9dc:	ebfffe82 	bl	d3ec <CDWHCITransferStageData::IsPeriodic() const>
    d9e0:	e3500000 	cmp	r0, #0
    d9e4:	059f0008 	ldreq	r0, [pc, #8]	; d9f4 <CDWHCITransferStageData::GetStatusMask() const+0x30>
    d9e8:	159f0000 	ldrne	r0, [pc]	; d9f0 <CDWHCITransferStageData::GetStatusMask() const+0x2c>
    d9ec:	e8bd8010 	pop	{r4, pc}
    d9f0:	000007ff 	.word	0x000007ff
    d9f4:	0000078f 	.word	0x0000078f

0000d9f8 <CDWHCITransferStageData::GetTransactionStatus() const>:
    d9f8:	e5900040 	ldr	r0, [r0, #64]	; 0x40
    d9fc:	e3500000 	cmp	r0, #0
    da00:	0a000000 	beq	da08 <CDWHCITransferStageData::GetTransactionStatus() const+0x10>
    da04:	e12fff1e 	bx	lr
    da08:	e92d4010 	push	{r4, lr}
    da0c:	e59f2008 	ldr	r2, [pc, #8]	; da1c <CDWHCITransferStageData::GetTransactionStatus() const+0x24>
    da10:	e59f1008 	ldr	r1, [pc, #8]	; da20 <CDWHCITransferStageData::GetTransactionStatus() const+0x28>
    da14:	e59f0008 	ldr	r0, [pc, #8]	; da24 <CDWHCITransferStageData::GetTransactionStatus() const+0x2c>
    da18:	eb005b78 	bl	24800 <assertion_failed>
    da1c:	000001ad 	.word	0x000001ad
    da20:	0003fa68 	.word	0x0003fa68
    da24:	0003fbe4 	.word	0x0003fbe4

0000da28 <CDWHCITransferStageData::IsStageComplete() const>:
    da28:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    da2c:	e16f0f10 	clz	r0, r0
    da30:	e1a002a0 	lsr	r0, r0, #5
    da34:	e12fff1e 	bx	lr

0000da38 <CDWHCITransferStageData::GetResultLen() const>:
    da38:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    da3c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    da40:	e1520000 	cmp	r2, r0
    da44:	31a00002 	movcc	r0, r2
    da48:	e12fff1e 	bx	lr

0000da4c <CDWHCITransferStageData::IsTimeout() const>:
    da4c:	e590300c 	ldr	r3, [r0, #12]
    da50:	e3530000 	cmp	r3, #0
    da54:	1a000001 	bne	da60 <CDWHCITransferStageData::IsTimeout() const+0x14>
    da58:	e1a00003 	mov	r0, r3
    da5c:	e12fff1e 	bx	lr
    da60:	e92d4010 	push	{r4, lr}
    da64:	e1a04000 	mov	r4, r0
    da68:	eb007124 	bl	29f00 <CTimer::Get()>
    da6c:	eb006e6d 	bl	29428 <CTimer::GetTicks() const>
    da70:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    da74:	e594200c 	ldr	r2, [r4, #12]
    da78:	e0400003 	sub	r0, r0, r3
    da7c:	e1500002 	cmp	r0, r2
    da80:	33a00000 	movcc	r0, #0
    da84:	23a00001 	movcs	r0, #1
    da88:	e8bd8010 	pop	{r4, pc}

0000da8c <CDWHCITransferStageData::GetURB() const>:
    da8c:	e5900004 	ldr	r0, [r0, #4]
    da90:	e3500000 	cmp	r0, #0
    da94:	0a000000 	beq	da9c <CDWHCITransferStageData::GetURB() const+0x10>
    da98:	e12fff1e 	bx	lr
    da9c:	e92d4010 	push	{r4, lr}
    daa0:	e3a02f73 	mov	r2, #460	; 0x1cc
    daa4:	e59f1004 	ldr	r1, [pc, #4]	; dab0 <CDWHCITransferStageData::GetURB() const+0x24>
    daa8:	e59f0004 	ldr	r0, [pc, #4]	; dab4 <CDWHCITransferStageData::GetURB() const+0x28>
    daac:	eb005b53 	bl	24800 <assertion_failed>
    dab0:	0003fa68 	.word	0x0003fa68
    dab4:	0003fb2c 	.word	0x0003fb2c

0000dab8 <CDWHCITransferStageData::GetFrameScheduler() const>:
    dab8:	e5900050 	ldr	r0, [r0, #80]	; 0x50
    dabc:	e12fff1e 	bx	lr

0000dac0 <CDWHCITransferStageData::operator new(unsigned int)>:
    dac0:	e3500054 	cmp	r0, #84	; 0x54
    dac4:	e92d4010 	push	{r4, lr}
    dac8:	1a000005 	bne	dae4 <CDWHCITransferStageData::operator new(unsigned int)+0x24>
    dacc:	e59f3030 	ldr	r3, [pc, #48]	; db04 <CDWHCITransferStageData::operator new(unsigned int)+0x44>
    dad0:	e5930000 	ldr	r0, [r3]
    dad4:	e3500000 	cmp	r0, #0
    dad8:	0a000005 	beq	daf4 <CDWHCITransferStageData::operator new(unsigned int)+0x34>
    dadc:	e8bd4010 	pop	{r4, lr}
    dae0:	ea005c4c 	b	24c18 <CClassAllocator::Allocate()>
    dae4:	e59f201c 	ldr	r2, [pc, #28]	; db08 <CDWHCITransferStageData::operator new(unsigned int)+0x48>
    dae8:	e59f101c 	ldr	r1, [pc, #28]	; db0c <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
    daec:	e59f001c 	ldr	r0, [pc, #28]	; db10 <CDWHCITransferStageData::operator new(unsigned int)+0x50>
    daf0:	eb005b42 	bl	24800 <assertion_failed>
    daf4:	e59f200c 	ldr	r2, [pc, #12]	; db08 <CDWHCITransferStageData::operator new(unsigned int)+0x48>
    daf8:	e59f100c 	ldr	r1, [pc, #12]	; db0c <CDWHCITransferStageData::operator new(unsigned int)+0x4c>
    dafc:	e59f0010 	ldr	r0, [pc, #16]	; db14 <CDWHCITransferStageData::operator new(unsigned int)+0x54>
    db00:	eb005b3e 	bl	24800 <assertion_failed>
    db04:	0004e0cc 	.word	0x0004e0cc
    db08:	000001d5 	.word	0x000001d5
    db0c:	0003fa68 	.word	0x0003fa68
    db10:	0003fc00 	.word	0x0003fc00
    db14:	0003f784 	.word	0x0003f784

0000db18 <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
    db18:	e3510054 	cmp	r1, #84	; 0x54
    db1c:	e92d4010 	push	{r4, lr}
    db20:	1a000007 	bne	db44 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x2c>
    db24:	e59f3038 	ldr	r3, [pc, #56]	; db64 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x4c>
    db28:	e5933000 	ldr	r3, [r3]
    db2c:	e3530000 	cmp	r3, #0
    db30:	0a000007 	beq	db54 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x3c>
    db34:	e8bd4010 	pop	{r4, lr}
    db38:	e1a01000 	mov	r1, r0
    db3c:	e1a00003 	mov	r0, r3
    db40:	ea005c6f 	b	24d04 <CClassAllocator::Free(void*)>
    db44:	e59f201c 	ldr	r2, [pc, #28]	; db68 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
    db48:	e59f101c 	ldr	r1, [pc, #28]	; db6c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x54>
    db4c:	e59f001c 	ldr	r0, [pc, #28]	; db70 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x58>
    db50:	eb005b2a 	bl	24800 <assertion_failed>
    db54:	e59f200c 	ldr	r2, [pc, #12]	; db68 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x50>
    db58:	e59f100c 	ldr	r1, [pc, #12]	; db6c <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x54>
    db5c:	e59f0010 	ldr	r0, [pc, #16]	; db74 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x5c>
    db60:	eb005b26 	bl	24800 <assertion_failed>
    db64:	0004e0cc 	.word	0x0004e0cc
    db68:	000001d5 	.word	0x000001d5
    db6c:	0003fa68 	.word	0x0003fa68
    db70:	0003fc00 	.word	0x0003fc00
    db74:	0003f784 	.word	0x0003f784

0000db78 <CDWHCITransferStageData::InitAllocator(unsigned int)>:
    db78:	e92d4070 	push	{r4, r5, r6, lr}
    db7c:	e59f4040 	ldr	r4, [pc, #64]	; dbc4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x4c>
    db80:	e5943000 	ldr	r3, [r4]
    db84:	e3530000 	cmp	r3, #0
    db88:	1a000009 	bne	dbb4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x3c>
    db8c:	e1a05000 	mov	r5, r0
    db90:	e3a0001c 	mov	r0, #28
    db94:	eb007536 	bl	2b074 <operator new(unsigned int)>
    db98:	e1a06000 	mov	r6, r0
    db9c:	e1a02005 	mov	r2, r5
    dba0:	e59f3020 	ldr	r3, [pc, #32]	; dbc8 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x50>
    dba4:	e3a01054 	mov	r1, #84	; 0x54
    dba8:	eb005c01 	bl	24bb4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    dbac:	e5846000 	str	r6, [r4]
    dbb0:	e8bd8070 	pop	{r4, r5, r6, pc}
    dbb4:	e59f2010 	ldr	r2, [pc, #16]	; dbcc <CDWHCITransferStageData::InitAllocator(unsigned int)+0x54>
    dbb8:	e59f1010 	ldr	r1, [pc, #16]	; dbd0 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x58>
    dbbc:	e59f0010 	ldr	r0, [pc, #16]	; dbd4 <CDWHCITransferStageData::InitAllocator(unsigned int)+0x5c>
    dbc0:	eb005b0e 	bl	24800 <assertion_failed>
    dbc4:	0004e0cc 	.word	0x0004e0cc
    dbc8:	0003fc2c 	.word	0x0003fc2c
    dbcc:	000001d5 	.word	0x000001d5
    dbd0:	0003fa68 	.word	0x0003fa68
    dbd4:	0003f798 	.word	0x0003f798

0000dbd8 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
    dbd8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    dbdc:	e59f4054 	ldr	r4, [pc, #84]	; dc38 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
    dbe0:	e1a05000 	mov	r5, r0
    dbe4:	e5940000 	ldr	r0, [r4]
    dbe8:	e24dd00c 	sub	sp, sp, #12
    dbec:	e3500000 	cmp	r0, #0
    dbf0:	1a00000c 	bne	dc28 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
    dbf4:	e1a06001 	mov	r6, r1
    dbf8:	e3a0001c 	mov	r0, #28
    dbfc:	eb00751c 	bl	2b074 <operator new(unsigned int)>
    dc00:	e59f1034 	ldr	r1, [pc, #52]	; dc3c <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
    dc04:	e1a03006 	mov	r3, r6
    dc08:	e58d1000 	str	r1, [sp]
    dc0c:	e1a02005 	mov	r2, r5
    dc10:	e3a01054 	mov	r1, #84	; 0x54
    dc14:	e1a07000 	mov	r7, r0
    dc18:	eb005bf1 	bl	24be4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    dc1c:	e5847000 	str	r7, [r4]
    dc20:	e28dd00c 	add	sp, sp, #12
    dc24:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    dc28:	e59f2010 	ldr	r2, [pc, #16]	; dc40 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
    dc2c:	e59f1010 	ldr	r1, [pc, #16]	; dc44 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
    dc30:	e59f0010 	ldr	r0, [pc, #16]	; dc48 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x70>
    dc34:	eb005af1 	bl	24800 <assertion_failed>
    dc38:	0004e0cc 	.word	0x0004e0cc
    dc3c:	0003fc2c 	.word	0x0003fc2c
    dc40:	000001d5 	.word	0x000001d5
    dc44:	0003fa68 	.word	0x0003fa68
    dc48:	0003f798 	.word	0x0003f798

0000dc4c <CUSBDevice::~CUSBDevice()>:
    dc4c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    dc50:	e1a04000 	mov	r4, r0
    dc54:	e1a05000 	mov	r5, r0
    dc58:	e3a06000 	mov	r6, #0
    dc5c:	e59f30fc 	ldr	r3, [pc, #252]	; dd60 <CUSBDevice::~CUSBDevice()+0x114>
    dc60:	e2807054 	add	r7, r0, #84	; 0x54
    dc64:	e484302c 	str	r3, [r4], #44	; 0x2c
    dc68:	e5940004 	ldr	r0, [r4, #4]
    dc6c:	e3500000 	cmp	r0, #0
    dc70:	0a000002 	beq	dc80 <CUSBDevice::~CUSBDevice()+0x34>
    dc74:	e5903000 	ldr	r3, [r0]
    dc78:	e5933004 	ldr	r3, [r3, #4]
    dc7c:	e12fff33 	blx	r3
    dc80:	e5a46004 	str	r6, [r4, #4]!
    dc84:	e1540007 	cmp	r4, r7
    dc88:	1afffff6 	bne	dc68 <CUSBDevice::~CUSBDevice()+0x1c>
    dc8c:	e5d51014 	ldrb	r1, [r5, #20]
    dc90:	e3510000 	cmp	r1, #0
    dc94:	0a000011 	beq	dce0 <CUSBDevice::~CUSBDevice()+0x94>
    dc98:	e3a03000 	mov	r3, #0
    dc9c:	e59f00c0 	ldr	r0, [pc, #192]	; dd64 <CUSBDevice::~CUSBDevice()+0x118>
    dca0:	e261c020 	rsb	ip, r1, #32
    dca4:	e1c080d0 	ldrd	r8, [r0]
    dca8:	e1a02138 	lsr	r2, r8, r1
    dcac:	e1822c19 	orr	r2, r2, r9, lsl ip
    dcb0:	e241e020 	sub	lr, r1, #32
    dcb4:	e1822e39 	orr	r2, r2, r9, lsr lr
    dcb8:	e2022001 	and	r2, r2, #1
    dcbc:	e1923003 	orrs	r3, r2, r3
    dcc0:	0a000022 	beq	dd50 <CUSBDevice::~CUSBDevice()+0x104>
    dcc4:	e3a04001 	mov	r4, #1
    dcc8:	e1a03e14 	lsl	r3, r4, lr
    dccc:	e1833c34 	orr	r3, r3, r4, lsr ip
    dcd0:	e1a02114 	lsl	r2, r4, r1
    dcd4:	e1c88002 	bic	r8, r8, r2
    dcd8:	e1c99003 	bic	r9, r9, r3
    dcdc:	e1c080f0 	strd	r8, [r0]
    dce0:	e595402c 	ldr	r4, [r5, #44]	; 0x2c
    dce4:	e3540000 	cmp	r4, #0
    dce8:	0a000004 	beq	dd00 <CUSBDevice::~CUSBDevice()+0xb4>
    dcec:	e1a00004 	mov	r0, r4
    dcf0:	eb002768 	bl	17a98 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    dcf4:	e1a00004 	mov	r0, r4
    dcf8:	e3a0101c 	mov	r1, #28
    dcfc:	eb0074ea 	bl	2b0ac <operator delete(void*, unsigned int)>
    dd00:	e3a04000 	mov	r4, #0
    dd04:	e3a01009 	mov	r1, #9
    dd08:	e5950028 	ldr	r0, [r5, #40]	; 0x28
    dd0c:	e585402c 	str	r4, [r5, #44]	; 0x2c
    dd10:	eb0074e5 	bl	2b0ac <operator delete(void*, unsigned int)>
    dd14:	e5854028 	str	r4, [r5, #40]	; 0x28
    dd18:	e3a01012 	mov	r1, #18
    dd1c:	e5950024 	ldr	r0, [r5, #36]	; 0x24
    dd20:	eb0074e1 	bl	2b0ac <operator delete(void*, unsigned int)>
    dd24:	e5956018 	ldr	r6, [r5, #24]
    dd28:	e5854024 	str	r4, [r5, #36]	; 0x24
    dd2c:	e1560004 	cmp	r6, r4
    dd30:	0a000004 	beq	dd48 <CUSBDevice::~CUSBDevice()+0xfc>
    dd34:	e1a00006 	mov	r0, r6
    dd38:	eb00057f 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
    dd3c:	e1a00006 	mov	r0, r6
    dd40:	e3a01014 	mov	r1, #20
    dd44:	eb0074d8 	bl	2b0ac <operator delete(void*, unsigned int)>
    dd48:	e1a00005 	mov	r0, r5
    dd4c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    dd50:	e3a02088 	mov	r2, #136	; 0x88
    dd54:	e59f100c 	ldr	r1, [pc, #12]	; dd68 <CUSBDevice::~CUSBDevice()+0x11c>
    dd58:	e59f000c 	ldr	r0, [pc, #12]	; dd6c <CUSBDevice::~CUSBDevice()+0x120>
    dd5c:	eb005aa7 	bl	24800 <assertion_failed>
    dd60:	0003fc4c 	.word	0x0003fc4c
    dd64:	0004e0d0 	.word	0x0004e0d0
    dd68:	0003fc64 	.word	0x0003fc64
    dd6c:	0003fc74 	.word	0x0003fc74

0000dd70 <CUSBDevice::~CUSBDevice()>:
    dd70:	e92d4010 	push	{r4, lr}
    dd74:	e1a04000 	mov	r4, r0
    dd78:	ebffffb3 	bl	dc4c <CUSBDevice::~CUSBDevice()>
    dd7c:	e1a00004 	mov	r0, r4
    dd80:	e3a01058 	mov	r1, #88	; 0x58
    dd84:	eb0074c8 	bl	2b0ac <operator delete(void*, unsigned int)>
    dd88:	e1a00004 	mov	r0, r4
    dd8c:	e8bd8010 	pop	{r4, pc}

0000dd90 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>:
    dd90:	e92d4070 	push	{r4, r5, r6, lr}
    dd94:	e3a05000 	mov	r5, #0
    dd98:	e1a04000 	mov	r4, r0
    dd9c:	e3a00001 	mov	r0, #1
    dda0:	e59fc098 	ldr	ip, [pc, #152]	; de40 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb0>
    dda4:	e1510005 	cmp	r1, r5
    dda8:	e5841004 	str	r1, [r4, #4]
    ddac:	e5c42015 	strb	r2, [r4, #21]
    ddb0:	e5843008 	str	r3, [r4, #8]
    ddb4:	e584c000 	str	ip, [r4]
    ddb8:	e5c4001e 	strb	r0, [r4, #30]
    ddbc:	e584500c 	str	r5, [r4, #12]
    ddc0:	e5c45014 	strb	r5, [r4, #20]
    ddc4:	e5845018 	str	r5, [r4, #24]
    ddc8:	e5c4501c 	strb	r5, [r4, #28]
    ddcc:	e5c4501d 	strb	r5, [r4, #29]
    ddd0:	e5845020 	str	r5, [r4, #32]
    ddd4:	e5845024 	str	r5, [r4, #36]	; 0x24
    ddd8:	e5845028 	str	r5, [r4, #40]	; 0x28
    dddc:	e584502c 	str	r5, [r4, #44]	; 0x2c
    dde0:	0a00000e 	beq	de20 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x90>
    dde4:	e3530000 	cmp	r3, #0
    dde8:	0a000010 	beq	de30 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xa0>
    ddec:	e3a00014 	mov	r0, #20
    ddf0:	eb00749f 	bl	2b074 <operator new(unsigned int)>
    ddf4:	e1a06000 	mov	r6, r0
    ddf8:	e1a01004 	mov	r1, r4
    ddfc:	eb0004d1 	bl	f148 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    de00:	e5846018 	str	r6, [r4, #24]
    de04:	e284302c 	add	r3, r4, #44	; 0x2c
    de08:	e2842054 	add	r2, r4, #84	; 0x54
    de0c:	e5a35004 	str	r5, [r3, #4]!
    de10:	e1530002 	cmp	r3, r2
    de14:	1afffffc 	bne	de0c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x7c>
    de18:	e1a00004 	mov	r0, r4
    de1c:	e8bd8070 	pop	{r4, r5, r6, pc}
    de20:	e3a02038 	mov	r2, #56	; 0x38
    de24:	e59f1018 	ldr	r1, [pc, #24]	; de44 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb4>
    de28:	e59f0018 	ldr	r0, [pc, #24]	; de48 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb8>
    de2c:	eb005a73 	bl	24800 <assertion_failed>
    de30:	e3a02039 	mov	r2, #57	; 0x39
    de34:	e59f1008 	ldr	r1, [pc, #8]	; de44 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb4>
    de38:	e59f000c 	ldr	r0, [pc, #12]	; de4c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xbc>
    de3c:	eb005a6f 	bl	24800 <assertion_failed>
    de40:	0003fc4c 	.word	0x0003fc4c
    de44:	0003fc64 	.word	0x0003fc64
    de48:	0003f9b8 	.word	0x0003f9b8
    de4c:	0003fca4 	.word	0x0003fca4

0000de50 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
    de50:	e3a0c000 	mov	ip, #0
    de54:	e92d4070 	push	{r4, r5, r6, lr}
    de58:	e1a04000 	mov	r4, r0
    de5c:	e59fe134 	ldr	lr, [pc, #308]	; df98 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x148>
    de60:	e59d0010 	ldr	r0, [sp, #16]
    de64:	e151000c 	cmp	r1, ip
    de68:	e5841004 	str	r1, [r4, #4]
    de6c:	e5c42015 	strb	r2, [r4, #21]
    de70:	e584300c 	str	r3, [r4, #12]
    de74:	e584e000 	str	lr, [r4]
    de78:	e5840010 	str	r0, [r4, #16]
    de7c:	e584c008 	str	ip, [r4, #8]
    de80:	e5c4c014 	strb	ip, [r4, #20]
    de84:	e584c018 	str	ip, [r4, #24]
    de88:	e584c024 	str	ip, [r4, #36]	; 0x24
    de8c:	e584c028 	str	ip, [r4, #40]	; 0x28
    de90:	e584c02c 	str	ip, [r4, #44]	; 0x2c
    de94:	0a00002f 	beq	df58 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x108>
    de98:	e3530000 	cmp	r3, #0
    de9c:	0a000031 	beq	df68 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x118>
    dea0:	e1a00003 	mov	r0, r3
    dea4:	eb00067d 	bl	f8a0 <CUSBFunction::GetDevice() const>
    dea8:	e3500000 	cmp	r0, #0
    deac:	0a000031 	beq	df78 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x128>
    deb0:	e5d0301c 	ldrb	r3, [r0, #28]
    deb4:	e5c4301c 	strb	r3, [r4, #28]
    deb8:	e5d0201d 	ldrb	r2, [r0, #29]
    debc:	e3530000 	cmp	r3, #0
    dec0:	e5c4201d 	strb	r2, [r4, #29]
    dec4:	e5d0301e 	ldrb	r3, [r0, #30]
    dec8:	e5c4301e 	strb	r3, [r4, #30]
    decc:	e5903020 	ldr	r3, [r0, #32]
    ded0:	e5843020 	str	r3, [r4, #32]
    ded4:	0a000010 	beq	df1c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xcc>
    ded8:	e5945018 	ldr	r5, [r4, #24]
    dedc:	e3550000 	cmp	r5, #0
    dee0:	1a000028 	bne	df88 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x138>
    dee4:	e3a00014 	mov	r0, #20
    dee8:	eb007461 	bl	2b074 <operator new(unsigned int)>
    deec:	e1a01004 	mov	r1, r4
    def0:	e1a06000 	mov	r6, r0
    def4:	eb000493 	bl	f148 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    def8:	e1a02005 	mov	r2, r5
    defc:	e5846018 	str	r6, [r4, #24]
    df00:	e284302c 	add	r3, r4, #44	; 0x2c
    df04:	e2841054 	add	r1, r4, #84	; 0x54
    df08:	e5a32004 	str	r2, [r3, #4]!
    df0c:	e1510003 	cmp	r1, r3
    df10:	1afffffc 	bne	df08 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xb8>
    df14:	e1a00004 	mov	r0, r4
    df18:	e8bd8070 	pop	{r4, r5, r6, pc}
    df1c:	e5d03015 	ldrb	r3, [r0, #21]
    df20:	e3530002 	cmp	r3, #2
    df24:	1affffeb 	bne	ded8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    df28:	e5d43015 	ldrb	r3, [r4, #21]
    df2c:	e3530001 	cmp	r3, #1
    df30:	caffffe8 	bgt	ded8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    df34:	e3a02001 	mov	r2, #1
    df38:	e5943010 	ldr	r3, [r4, #16]
    df3c:	e5c4201c 	strb	r2, [r4, #28]
    df40:	e5d02014 	ldrb	r2, [r0, #20]
    df44:	e2833001 	add	r3, r3, #1
    df48:	e5c4201d 	strb	r2, [r4, #29]
    df4c:	e5840020 	str	r0, [r4, #32]
    df50:	e5c4301e 	strb	r3, [r4, #30]
    df54:	eaffffdf 	b	ded8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x88>
    df58:	e3a02057 	mov	r2, #87	; 0x57
    df5c:	e59f1038 	ldr	r1, [pc, #56]	; df9c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    df60:	e59f0038 	ldr	r0, [pc, #56]	; dfa0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x150>
    df64:	eb005a25 	bl	24800 <assertion_failed>
    df68:	e3a02058 	mov	r2, #88	; 0x58
    df6c:	e59f1028 	ldr	r1, [pc, #40]	; df9c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    df70:	e59f002c 	ldr	r0, [pc, #44]	; dfa4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x154>
    df74:	eb005a21 	bl	24800 <assertion_failed>
    df78:	e3a0205b 	mov	r2, #91	; 0x5b
    df7c:	e59f1018 	ldr	r1, [pc, #24]	; df9c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    df80:	e59f0020 	ldr	r0, [pc, #32]	; dfa8 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x158>
    df84:	eb005a1d 	bl	24800 <assertion_failed>
    df88:	e3a02073 	mov	r2, #115	; 0x73
    df8c:	e59f1008 	ldr	r1, [pc, #8]	; df9c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x14c>
    df90:	e59f0014 	ldr	r0, [pc, #20]	; dfac <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x15c>
    df94:	eb005a19 	bl	24800 <assertion_failed>
    df98:	0003fc4c 	.word	0x0003fc4c
    df9c:	0003fc64 	.word	0x0003fc64
    dfa0:	0003f9b8 	.word	0x0003f9b8
    dfa4:	0003fcb8 	.word	0x0003fcb8
    dfa8:	0003fcc4 	.word	0x0003fcc4
    dfac:	0003fcd4 	.word	0x0003fcd4

0000dfb0 <CUSBDevice::ReScanDevices()>:
    dfb0:	e92d4070 	push	{r4, r5, r6, lr}
    dfb4:	e3a05000 	mov	r5, #0
    dfb8:	e280402c 	add	r4, r0, #44	; 0x2c
    dfbc:	e2806054 	add	r6, r0, #84	; 0x54
    dfc0:	e5b40004 	ldr	r0, [r4, #4]!
    dfc4:	e3500000 	cmp	r0, #0
    dfc8:	0a000004 	beq	dfe0 <CUSBDevice::ReScanDevices()+0x30>
    dfcc:	e5903000 	ldr	r3, [r0]
    dfd0:	e5933020 	ldr	r3, [r3, #32]
    dfd4:	e12fff33 	blx	r3
    dfd8:	e3500000 	cmp	r0, #0
    dfdc:	11a05000 	movne	r5, r0
    dfe0:	e1540006 	cmp	r4, r6
    dfe4:	1afffff5 	bne	dfc0 <CUSBDevice::ReScanDevices()+0x10>
    dfe8:	e1a00005 	mov	r0, r5
    dfec:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dff0 <CUSBDevice::RemoveDevice()>:
    dff0:	e5903008 	ldr	r3, [r0, #8]
    dff4:	e3530000 	cmp	r3, #0
    dff8:	0a000003 	beq	e00c <CUSBDevice::RemoveDevice()+0x1c>
    dffc:	e5932000 	ldr	r2, [r3]
    e000:	e1a00003 	mov	r0, r3
    e004:	e592300c 	ldr	r3, [r2, #12]
    e008:	e12fff13 	bx	r3
    e00c:	e590300c 	ldr	r3, [r0, #12]
    e010:	e3530000 	cmp	r3, #0
    e014:	0a000002 	beq	e024 <CUSBDevice::RemoveDevice()+0x34>
    e018:	e5901010 	ldr	r1, [r0, #16]
    e01c:	e1a00003 	mov	r0, r3
    e020:	ea001a68 	b	149c8 <CUSBStandardHub::RemoveDevice(unsigned int)>
    e024:	e92d4010 	push	{r4, lr}
    e028:	e3a02f7e 	mov	r2, #504	; 0x1f8
    e02c:	e59f1004 	ldr	r1, [pc, #4]	; e038 <CUSBDevice::RemoveDevice()+0x48>
    e030:	e59f0004 	ldr	r0, [pc, #4]	; e03c <CUSBDevice::RemoveDevice()+0x4c>
    e034:	eb0059f1 	bl	24800 <assertion_failed>
    e038:	0003fc64 	.word	0x0003fc64
    e03c:	0003fcb8 	.word	0x0003fcb8

0000e040 <CUSBDevice::GetName(TDeviceNameSelector) const>:
    e040:	e92d4070 	push	{r4, r5, r6, lr}
    e044:	e1a06000 	mov	r6, r0
    e048:	e24dd008 	sub	sp, sp, #8
    e04c:	e3a00010 	mov	r0, #16
    e050:	e1a04001 	mov	r4, r1
    e054:	eb007406 	bl	2b074 <operator new(unsigned int)>
    e058:	e1a05000 	mov	r5, r0
    e05c:	eb0066c0 	bl	27b64 <CString::CString()>
    e060:	e3540000 	cmp	r4, #0
    e064:	0a000013 	beq	e0b8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x78>
    e068:	e3540001 	cmp	r4, #1
    e06c:	1a00000d 	bne	e0a8 <CUSBDevice::GetName(TDeviceNameSelector) const+0x68>
    e070:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    e074:	e3510000 	cmp	r1, #0
    e078:	0a000026 	beq	e118 <CUSBDevice::GetName(TDeviceNameSelector) const+0xd8>
    e07c:	e5d12004 	ldrb	r2, [r1, #4]
    e080:	e2423001 	sub	r3, r2, #1
    e084:	e6ef3073 	uxtb	r3, r3
    e088:	e35300fd 	cmp	r3, #253	; 0xfd
    e08c:	9a000018 	bls	e0f4 <CUSBDevice::GetName(TDeviceNameSelector) const+0xb4>
    e090:	e59f10a0 	ldr	r1, [pc, #160]	; e138 <CUSBDevice::GetName(TDeviceNameSelector) const+0xf8>
    e094:	e1a00005 	mov	r0, r5
    e098:	eb0066cd 	bl	27bd4 <CString::operator=(char const*)>
    e09c:	e1a00005 	mov	r0, r5
    e0a0:	e28dd008 	add	sp, sp, #8
    e0a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0a8:	e3a02f86 	mov	r2, #536	; 0x218
    e0ac:	e59f1088 	ldr	r1, [pc, #136]	; e13c <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    e0b0:	e59f0088 	ldr	r0, [pc, #136]	; e140 <CUSBDevice::GetName(TDeviceNameSelector) const+0x100>
    e0b4:	eb0059d1 	bl	24800 <assertion_failed>
    e0b8:	e5961024 	ldr	r1, [r6, #36]	; 0x24
    e0bc:	e3510000 	cmp	r1, #0
    e0c0:	0a000018 	beq	e128 <CUSBDevice::GetName(TDeviceNameSelector) const+0xe8>
    e0c4:	e5d1000b 	ldrb	r0, [r1, #11]
    e0c8:	e5d1300a 	ldrb	r3, [r1, #10]
    e0cc:	e5d12008 	ldrb	r2, [r1, #8]
    e0d0:	e5d11009 	ldrb	r1, [r1, #9]
    e0d4:	e1833400 	orr	r3, r3, r0, lsl #8
    e0d8:	e1822401 	orr	r2, r2, r1, lsl #8
    e0dc:	e1a00005 	mov	r0, r5
    e0e0:	e59f105c 	ldr	r1, [pc, #92]	; e144 <CUSBDevice::GetName(TDeviceNameSelector) const+0x104>
    e0e4:	eb006be1 	bl	29070 <CString::Format(char const*, ...)>
    e0e8:	e1a00005 	mov	r0, r5
    e0ec:	e28dd008 	add	sp, sp, #8
    e0f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0f4:	e5d13005 	ldrb	r3, [r1, #5]
    e0f8:	e5d11006 	ldrb	r1, [r1, #6]
    e0fc:	e1a00005 	mov	r0, r5
    e100:	e58d1000 	str	r1, [sp]
    e104:	e59f103c 	ldr	r1, [pc, #60]	; e148 <CUSBDevice::GetName(TDeviceNameSelector) const+0x108>
    e108:	eb006bd8 	bl	29070 <CString::Format(char const*, ...)>
    e10c:	e1a00005 	mov	r0, r5
    e110:	e28dd008 	add	sp, sp, #8
    e114:	e8bd8070 	pop	{r4, r5, r6, pc}
    e118:	e59f202c 	ldr	r2, [pc, #44]	; e14c <CUSBDevice::GetName(TDeviceNameSelector) const+0x10c>
    e11c:	e59f1018 	ldr	r1, [pc, #24]	; e13c <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    e120:	e59f0028 	ldr	r0, [pc, #40]	; e150 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
    e124:	eb0059b5 	bl	24800 <assertion_failed>
    e128:	e3a02f81 	mov	r2, #516	; 0x204
    e12c:	e59f1008 	ldr	r1, [pc, #8]	; e13c <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
    e130:	e59f0018 	ldr	r0, [pc, #24]	; e150 <CUSBDevice::GetName(TDeviceNameSelector) const+0x110>
    e134:	eb0059b1 	bl	24800 <assertion_failed>
    e138:	0003fd14 	.word	0x0003fd14
    e13c:	0003fc64 	.word	0x0003fc64
    e140:	0003fd5c 	.word	0x0003fd5c
    e144:	0003fcfc 	.word	0x0003fcfc
    e148:	0003fd08 	.word	0x0003fd08
    e14c:	0000020b 	.word	0x0000020b
    e150:	0003fce8 	.word	0x0003fce8

0000e154 <CUSBDevice::GetNames() const>:
    e154:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    e158:	e1a07000 	mov	r7, r0
    e15c:	e3a00010 	mov	r0, #16
    e160:	eb0073c3 	bl	2b074 <operator new(unsigned int)>
    e164:	e3a04000 	mov	r4, #0
    e168:	e1a06000 	mov	r6, r0
    e16c:	eb00667c 	bl	27b64 <CString::CString()>
    e170:	e59f80b4 	ldr	r8, [pc, #180]	; e22c <CUSBDevice::GetNames() const+0xd8>
    e174:	e59f90b4 	ldr	r9, [pc, #180]	; e230 <CUSBDevice::GetNames() const+0xdc>
    e178:	e6ef1074 	uxtb	r1, r4
    e17c:	e1a00007 	mov	r0, r7
    e180:	ebffffae 	bl	e040 <CUSBDevice::GetName(TDeviceNameSelector) const>
    e184:	e2505000 	subs	r5, r0, #0
    e188:	0a00001f 	beq	e20c <CUSBDevice::GetNames() const+0xb8>
    e18c:	e1a01008 	mov	r1, r8
    e190:	eb0066dc 	bl	27d08 <CString::Compare(char const*) const>
    e194:	e3500000 	cmp	r0, #0
    e198:	1a000011 	bne	e1e4 <CUSBDevice::GetNames() const+0x90>
    e19c:	e5953000 	ldr	r3, [r5]
    e1a0:	e2844001 	add	r4, r4, #1
    e1a4:	e5933004 	ldr	r3, [r3, #4]
    e1a8:	e1a00005 	mov	r0, r5
    e1ac:	e12fff33 	blx	r3
    e1b0:	e3540002 	cmp	r4, #2
    e1b4:	1affffef 	bne	e178 <CUSBDevice::GetNames() const+0x24>
    e1b8:	e1a00006 	mov	r0, r6
    e1bc:	eb0066ac 	bl	27c74 <CString::GetLength() const>
    e1c0:	e3500000 	cmp	r0, #0
    e1c4:	0a000001 	beq	e1d0 <CUSBDevice::GetNames() const+0x7c>
    e1c8:	e1a00006 	mov	r0, r6
    e1cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e1d0:	e59f1054 	ldr	r1, [pc, #84]	; e22c <CUSBDevice::GetNames() const+0xd8>
    e1d4:	e1a00006 	mov	r0, r6
    e1d8:	eb00667d 	bl	27bd4 <CString::operator=(char const*)>
    e1dc:	e1a00006 	mov	r0, r6
    e1e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    e1e4:	e1a00006 	mov	r0, r6
    e1e8:	eb0066a1 	bl	27c74 <CString::GetLength() const>
    e1ec:	e3500000 	cmp	r0, #0
    e1f0:	1a000009 	bne	e21c <CUSBDevice::GetNames() const+0xc8>
    e1f4:	e1a00005 	mov	r0, r5
    e1f8:	eb00666f 	bl	27bbc <CString::operator char const*() const>
    e1fc:	e1a01000 	mov	r1, r0
    e200:	e1a00006 	mov	r0, r6
    e204:	eb00669e 	bl	27c84 <CString::Append(char const*)>
    e208:	eaffffe3 	b	e19c <CUSBDevice::GetNames() const+0x48>
    e20c:	e59f2020 	ldr	r2, [pc, #32]	; e234 <CUSBDevice::GetNames() const+0xe0>
    e210:	e59f1020 	ldr	r1, [pc, #32]	; e238 <CUSBDevice::GetNames() const+0xe4>
    e214:	e59f0020 	ldr	r0, [pc, #32]	; e23c <CUSBDevice::GetNames() const+0xe8>
    e218:	eb005978 	bl	24800 <assertion_failed>
    e21c:	e1a01009 	mov	r1, r9
    e220:	e1a00006 	mov	r0, r6
    e224:	eb006696 	bl	27c84 <CString::Append(char const*)>
    e228:	eafffff1 	b	e1f4 <CUSBDevice::GetNames() const+0xa0>
    e22c:	0003fd14 	.word	0x0003fd14
    e230:	0003fd28 	.word	0x0003fd28
    e234:	00000229 	.word	0x00000229
    e238:	0003fc64 	.word	0x0003fc64
    e23c:	0003fd1c 	.word	0x0003fd1c

0000e240 <CUSBDevice::SetAddress(unsigned char)>:
    e240:	e351003f 	cmp	r1, #63	; 0x3f
    e244:	ca000001 	bgt	e250 <CUSBDevice::SetAddress(unsigned char)+0x10>
    e248:	e5c01014 	strb	r1, [r0, #20]
    e24c:	e12fff1e 	bx	lr
    e250:	e92d4010 	push	{r4, lr}
    e254:	e59f2008 	ldr	r2, [pc, #8]	; e264 <CUSBDevice::SetAddress(unsigned char)+0x24>
    e258:	e59f1008 	ldr	r1, [pc, #8]	; e268 <CUSBDevice::SetAddress(unsigned char)+0x28>
    e25c:	e59f0008 	ldr	r0, [pc, #8]	; e26c <CUSBDevice::SetAddress(unsigned char)+0x2c>
    e260:	eb005966 	bl	24800 <assertion_failed>
    e264:	00000243 	.word	0x00000243
    e268:	0003fc64 	.word	0x0003fc64
    e26c:	0003fd2c 	.word	0x0003fd2c

0000e270 <CUSBDevice::GetAddress() const>:
    e270:	e5d00014 	ldrb	r0, [r0, #20]
    e274:	e12fff1e 	bx	lr

0000e278 <CUSBDevice::GetSpeed() const>:
    e278:	e5d00015 	ldrb	r0, [r0, #21]
    e27c:	e12fff1e 	bx	lr

0000e280 <CUSBDevice::IsSplit() const>:
    e280:	e5d0001c 	ldrb	r0, [r0, #28]
    e284:	e12fff1e 	bx	lr

0000e288 <CUSBDevice::GetHubAddress() const>:
    e288:	e5d0001d 	ldrb	r0, [r0, #29]
    e28c:	e12fff1e 	bx	lr

0000e290 <CUSBDevice::GetHubPortNumber() const>:
    e290:	e5d0001e 	ldrb	r0, [r0, #30]
    e294:	e12fff1e 	bx	lr

0000e298 <CUSBDevice::GetTTHubDevice() const>:
    e298:	e5900020 	ldr	r0, [r0, #32]
    e29c:	e12fff1e 	bx	lr

0000e2a0 <CUSBDevice::GetEndpoint0() const>:
    e2a0:	e5900018 	ldr	r0, [r0, #24]
    e2a4:	e3500000 	cmp	r0, #0
    e2a8:	0a000000 	beq	e2b0 <CUSBDevice::GetEndpoint0() const+0x10>
    e2ac:	e12fff1e 	bx	lr
    e2b0:	e92d4010 	push	{r4, lr}
    e2b4:	e3a02f9b 	mov	r2, #620	; 0x26c
    e2b8:	e59f1004 	ldr	r1, [pc, #4]	; e2c4 <CUSBDevice::GetEndpoint0() const+0x24>
    e2bc:	e59f0004 	ldr	r0, [pc, #4]	; e2c8 <CUSBDevice::GetEndpoint0() const+0x28>
    e2c0:	eb00594e 	bl	24800 <assertion_failed>
    e2c4:	0003fc64 	.word	0x0003fc64
    e2c8:	0003fd4c 	.word	0x0003fd4c

0000e2cc <CUSBDevice::GetHost() const>:
    e2cc:	e5900004 	ldr	r0, [r0, #4]
    e2d0:	e3500000 	cmp	r0, #0
    e2d4:	0a000000 	beq	e2dc <CUSBDevice::GetHost() const+0x10>
    e2d8:	e12fff1e 	bx	lr
    e2dc:	e92d4010 	push	{r4, lr}
    e2e0:	e59f2008 	ldr	r2, [pc, #8]	; e2f0 <CUSBDevice::GetHost() const+0x24>
    e2e4:	e59f1008 	ldr	r1, [pc, #8]	; e2f4 <CUSBDevice::GetHost() const+0x28>
    e2e8:	e59f0008 	ldr	r0, [pc, #8]	; e2f8 <CUSBDevice::GetHost() const+0x2c>
    e2ec:	eb005943 	bl	24800 <assertion_failed>
    e2f0:	00000272 	.word	0x00000272
    e2f4:	0003fc64 	.word	0x0003fc64
    e2f8:	0003f9b8 	.word	0x0003f9b8

0000e2fc <CUSBDevice::GetDeviceDescriptor() const>:
    e2fc:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    e300:	e3500000 	cmp	r0, #0
    e304:	0a000000 	beq	e30c <CUSBDevice::GetDeviceDescriptor() const+0x10>
    e308:	e12fff1e 	bx	lr
    e30c:	e92d4010 	push	{r4, lr}
    e310:	e3a02f9e 	mov	r2, #632	; 0x278
    e314:	e59f1004 	ldr	r1, [pc, #4]	; e320 <CUSBDevice::GetDeviceDescriptor() const+0x24>
    e318:	e59f0004 	ldr	r0, [pc, #4]	; e324 <CUSBDevice::GetDeviceDescriptor() const+0x28>
    e31c:	eb005937 	bl	24800 <assertion_failed>
    e320:	0003fc64 	.word	0x0003fc64
    e324:	0003fce8 	.word	0x0003fce8

0000e328 <CUSBDevice::GetConfigurationDescriptor() const>:
    e328:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    e32c:	e3500000 	cmp	r0, #0
    e330:	0a000000 	beq	e338 <CUSBDevice::GetConfigurationDescriptor() const+0x10>
    e334:	e12fff1e 	bx	lr
    e338:	e92d4010 	push	{r4, lr}
    e33c:	e59f2008 	ldr	r2, [pc, #8]	; e34c <CUSBDevice::GetConfigurationDescriptor() const+0x24>
    e340:	e59f1008 	ldr	r1, [pc, #8]	; e350 <CUSBDevice::GetConfigurationDescriptor() const+0x28>
    e344:	e59f0008 	ldr	r0, [pc, #8]	; e354 <CUSBDevice::GetConfigurationDescriptor() const+0x2c>
    e348:	eb00592c 	bl	24800 <assertion_failed>
    e34c:	0000027e 	.word	0x0000027e
    e350:	0003fc64 	.word	0x0003fc64
    e354:	0003fd60 	.word	0x0003fd60

0000e358 <CUSBDevice::GetDescriptor(unsigned char)>:
    e358:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e35c:	e3500000 	cmp	r0, #0
    e360:	0a000000 	beq	e368 <CUSBDevice::GetDescriptor(unsigned char)+0x10>
    e364:	ea0025ce 	b	17aa4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e368:	e92d4010 	push	{r4, lr}
    e36c:	e3a02fa1 	mov	r2, #644	; 0x284
    e370:	e59f1004 	ldr	r1, [pc, #4]	; e37c <CUSBDevice::GetDescriptor(unsigned char)+0x24>
    e374:	e59f0004 	ldr	r0, [pc, #4]	; e380 <CUSBDevice::GetDescriptor(unsigned char)+0x28>
    e378:	eb005920 	bl	24800 <assertion_failed>
    e37c:	0003fc64 	.word	0x0003fc64
    e380:	0003fd74 	.word	0x0003fd74

0000e384 <CUSBDevice::ConfigurationError(char const*) const>:
    e384:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
    e388:	e3500000 	cmp	r0, #0
    e38c:	0a000000 	beq	e394 <CUSBDevice::ConfigurationError(char const*) const+0x10>
    e390:	ea002611 	b	17bdc <CUSBConfigurationParser::Error(char const*) const>
    e394:	e92d4010 	push	{r4, lr}
    e398:	e59f2008 	ldr	r2, [pc, #8]	; e3a8 <CUSBDevice::ConfigurationError(char const*) const+0x24>
    e39c:	e59f1008 	ldr	r1, [pc, #8]	; e3ac <CUSBDevice::ConfigurationError(char const*) const+0x28>
    e3a0:	e59f0008 	ldr	r0, [pc, #8]	; e3b0 <CUSBDevice::ConfigurationError(char const*) const+0x2c>
    e3a4:	eb005915 	bl	24800 <assertion_failed>
    e3a8:	0000028a 	.word	0x0000028a
    e3ac:	0003fc64 	.word	0x0003fc64
    e3b0:	0003fd74 	.word	0x0003fd74

0000e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    e3b4:	e92d000c 	push	{r2, r3}
    e3b8:	e92d4070 	push	{r4, r5, r6, lr}
    e3bc:	e24dd020 	sub	sp, sp, #32
    e3c0:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
    e3c4:	e3540000 	cmp	r4, #0
    e3c8:	0a00001d 	beq	e444 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x90>
    e3cc:	e1a05000 	mov	r5, r0
    e3d0:	e28d0010 	add	r0, sp, #16
    e3d4:	e1a06001 	mov	r6, r1
    e3d8:	eb0065e1 	bl	27b64 <CString::CString()>
    e3dc:	e5d5201e 	ldrb	r2, [r5, #30]
    e3e0:	e5d5301d 	ldrb	r3, [r5, #29]
    e3e4:	e59f1068 	ldr	r1, [pc, #104]	; e454 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa0>
    e3e8:	e28d0010 	add	r0, sp, #16
    e3ec:	e58d2000 	str	r2, [sp]
    e3f0:	e59f2060 	ldr	r2, [pc, #96]	; e458 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa4>
    e3f4:	eb006b1d 	bl	29070 <CString::Format(char const*, ...)>
    e3f8:	e28d3034 	add	r3, sp, #52	; 0x34
    e3fc:	e58d300c 	str	r3, [sp, #12]
    e400:	eb0061f1 	bl	26bcc <CLogger::Get()>
    e404:	e1a05000 	mov	r5, r0
    e408:	e28d0010 	add	r0, sp, #16
    e40c:	eb0065ea 	bl	27bbc <CString::operator char const*() const>
    e410:	e59dc00c 	ldr	ip, [sp, #12]
    e414:	e1a01000 	mov	r1, r0
    e418:	e1a03004 	mov	r3, r4
    e41c:	e1a00005 	mov	r0, r5
    e420:	e1a02006 	mov	r2, r6
    e424:	e58dc000 	str	ip, [sp]
    e428:	eb006130 	bl	268f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    e42c:	e28d0010 	add	r0, sp, #16
    e430:	eb006598 	bl	27a98 <CString::~CString()>
    e434:	e28dd020 	add	sp, sp, #32
    e438:	e8bd4070 	pop	{r4, r5, r6, lr}
    e43c:	e28dd008 	add	sp, sp, #8
    e440:	e12fff1e 	bx	lr
    e444:	e3a02e29 	mov	r2, #656	; 0x290
    e448:	e59f100c 	ldr	r1, [pc, #12]	; e45c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xa8>
    e44c:	e59f000c 	ldr	r0, [pc, #12]	; e460 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xac>
    e450:	eb0058ea 	bl	24800 <assertion_failed>
    e454:	0003fd9c 	.word	0x0003fd9c
    e458:	0003fc5c 	.word	0x0003fc5c
    e45c:	0003fc64 	.word	0x0003fc64
    e460:	0003fd8c 	.word	0x0003fd8c

0000e464 <CUSBDevice::Initialize()>:
    e464:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e468:	e5906024 	ldr	r6, [r0, #36]	; 0x24
    e46c:	e24dd014 	sub	sp, sp, #20
    e470:	e3560000 	cmp	r6, #0
    e474:	1a000033 	bne	e548 <CUSBDevice::Initialize()+0xe4>
    e478:	e1a04000 	mov	r4, r0
    e47c:	e3a00012 	mov	r0, #18
    e480:	eb0072fb 	bl	2b074 <operator new(unsigned int)>
    e484:	e5943004 	ldr	r3, [r4, #4]
    e488:	e5840024 	str	r0, [r4, #36]	; 0x24
    e48c:	e3530000 	cmp	r3, #0
    e490:	0a000030 	beq	e558 <CUSBDevice::Initialize()+0xf4>
    e494:	e5941018 	ldr	r1, [r4, #24]
    e498:	e3510000 	cmp	r1, #0
    e49c:	0a000031 	beq	e568 <CUSBDevice::Initialize()+0x104>
    e4a0:	e3a02008 	mov	r2, #8
    e4a4:	e3a07080 	mov	r7, #128	; 0x80
    e4a8:	e58d0000 	str	r0, [sp]
    e4ac:	e98d0084 	stmib	sp, {r2, r7}
    e4b0:	e1a00003 	mov	r0, r3
    e4b4:	e58d600c 	str	r6, [sp, #12]
    e4b8:	e1a03006 	mov	r3, r6
    e4bc:	e3a02001 	mov	r2, #1
    e4c0:	eb001110 	bl	12908 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e4c4:	e3500008 	cmp	r0, #8
    e4c8:	1a000012 	bne	e518 <CUSBDevice::Initialize()+0xb4>
    e4cc:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e4d0:	e5d3b000 	ldrb	fp, [r3]
    e4d4:	e35b0012 	cmp	fp, #18
    e4d8:	1a000002 	bne	e4e8 <CUSBDevice::Initialize()+0x84>
    e4dc:	e5d3a001 	ldrb	sl, [r3, #1]
    e4e0:	e35a0001 	cmp	sl, #1
    e4e4:	0a000023 	beq	e578 <CUSBDevice::Initialize()+0x114>
    e4e8:	e3a05000 	mov	r5, #0
    e4ec:	e59f2668 	ldr	r2, [pc, #1640]	; eb5c <CUSBDevice::Initialize()+0x6f8>
    e4f0:	e1a00004 	mov	r0, r4
    e4f4:	e3a01001 	mov	r1, #1
    e4f8:	ebffffad 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e4fc:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    e500:	e3a01012 	mov	r1, #18
    e504:	eb0072e8 	bl	2b0ac <operator delete(void*, unsigned int)>
    e508:	e1a00005 	mov	r0, r5
    e50c:	e5845024 	str	r5, [r4, #36]	; 0x24
    e510:	e28dd014 	add	sp, sp, #20
    e514:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e518:	e3a01001 	mov	r1, #1
    e51c:	e59f263c 	ldr	r2, [pc, #1596]	; eb60 <CUSBDevice::Initialize()+0x6fc>
    e520:	e1a05006 	mov	r5, r6
    e524:	e1a00004 	mov	r0, r4
    e528:	ebffffa1 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e52c:	e3a01012 	mov	r1, #18
    e530:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    e534:	eb0072dc 	bl	2b0ac <operator delete(void*, unsigned int)>
    e538:	e5846024 	str	r6, [r4, #36]	; 0x24
    e53c:	e1a00005 	mov	r0, r5
    e540:	e28dd014 	add	sp, sp, #20
    e544:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e548:	e3a020a7 	mov	r2, #167	; 0xa7
    e54c:	e59f1610 	ldr	r1, [pc, #1552]	; eb64 <CUSBDevice::Initialize()+0x700>
    e550:	e59f0610 	ldr	r0, [pc, #1552]	; eb68 <CUSBDevice::Initialize()+0x704>
    e554:	eb0058a9 	bl	24800 <assertion_failed>
    e558:	e3a020ab 	mov	r2, #171	; 0xab
    e55c:	e59f1600 	ldr	r1, [pc, #1536]	; eb64 <CUSBDevice::Initialize()+0x700>
    e560:	e59f0604 	ldr	r0, [pc, #1540]	; eb6c <CUSBDevice::Initialize()+0x708>
    e564:	eb0058a5 	bl	24800 <assertion_failed>
    e568:	e3a020ac 	mov	r2, #172	; 0xac
    e56c:	e59f15f0 	ldr	r1, [pc, #1520]	; eb64 <CUSBDevice::Initialize()+0x700>
    e570:	e59f05f8 	ldr	r0, [pc, #1528]	; eb70 <CUSBDevice::Initialize()+0x70c>
    e574:	eb0058a1 	bl	24800 <assertion_failed>
    e578:	e5d31007 	ldrb	r1, [r3, #7]
    e57c:	e5940018 	ldr	r0, [r4, #24]
    e580:	eb00037f 	bl	f384 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    e584:	e2505000 	subs	r5, r0, #0
    e588:	0a000027 	beq	e62c <CUSBDevice::Initialize()+0x1c8>
    e58c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    e590:	e5941018 	ldr	r1, [r4, #24]
    e594:	e5940004 	ldr	r0, [r4, #4]
    e598:	e1a0200a 	mov	r2, sl
    e59c:	e88d0808 	stm	sp, {r3, fp}
    e5a0:	e58d600c 	str	r6, [sp, #12]
    e5a4:	e58d7008 	str	r7, [sp, #8]
    e5a8:	e1a03006 	mov	r3, r6
    e5ac:	eb0010d5 	bl	12908 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e5b0:	e3500012 	cmp	r0, #18
    e5b4:	1a000025 	bne	e650 <CUSBDevice::Initialize()+0x1ec>
    e5b8:	e59fc5b4 	ldr	ip, [pc, #1460]	; eb74 <CUSBDevice::Initialize()+0x710>
    e5bc:	e1cc20d0 	ldrd	r2, [ip]
    e5c0:	e1b010a3 	lsrs	r1, r3, #1
    e5c4:	e1a00062 	rrx	r0, r2
    e5c8:	e3a01000 	mov	r1, #0
    e5cc:	e2000001 	and	r0, r0, #1
    e5d0:	e1901001 	orrs	r1, r0, r1
    e5d4:	0a000020 	beq	e65c <CUSBDevice::Initialize()+0x1f8>
    e5d8:	e3a0e002 	mov	lr, #2
    e5dc:	e26e1020 	rsb	r1, lr, #32
    e5e0:	e1a08e32 	lsr	r8, r2, lr
    e5e4:	e1888113 	orr	r8, r8, r3, lsl r1
    e5e8:	e24e1020 	sub	r1, lr, #32
    e5ec:	e1888133 	orr	r8, r8, r3, lsr r1
    e5f0:	e3a01000 	mov	r1, #0
    e5f4:	e2080001 	and	r0, r8, #1
    e5f8:	e1901001 	orrs	r1, r0, r1
    e5fc:	e6ef607e 	uxtb	r6, lr
    e600:	e1a0a00e 	mov	sl, lr
    e604:	0a000015 	beq	e660 <CUSBDevice::Initialize()+0x1fc>
    e608:	e28ee001 	add	lr, lr, #1
    e60c:	e35e0040 	cmp	lr, #64	; 0x40
    e610:	1afffff1 	bne	e5dc <CUSBDevice::Initialize()+0x178>
    e614:	e1a00004 	mov	r0, r4
    e618:	e59f2558 	ldr	r2, [pc, #1368]	; eb78 <CUSBDevice::Initialize()+0x714>
    e61c:	e3a01001 	mov	r1, #1
    e620:	ebffff63 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e624:	e3a05000 	mov	r5, #0
    e628:	eaffffc3 	b	e53c <CUSBDevice::Initialize()+0xd8>
    e62c:	e1a0100a 	mov	r1, sl
    e630:	e59f2544 	ldr	r2, [pc, #1348]	; eb7c <CUSBDevice::Initialize()+0x718>
    e634:	e1a00004 	mov	r0, r4
    e638:	ebffff5d 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e63c:	e1a0100b 	mov	r1, fp
    e640:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    e644:	eb007298 	bl	2b0ac <operator delete(void*, unsigned int)>
    e648:	e5845024 	str	r5, [r4, #36]	; 0x24
    e64c:	eaffffba 	b	e53c <CUSBDevice::Initialize()+0xd8>
    e650:	e1a0100a 	mov	r1, sl
    e654:	e59f2524 	ldr	r2, [pc, #1316]	; eb80 <CUSBDevice::Initialize()+0x71c>
    e658:	eaffffb0 	b	e520 <CUSBDevice::Initialize()+0xbc>
    e65c:	e1a0600a 	mov	r6, sl
    e660:	e3a07001 	mov	r7, #1
    e664:	e24ae020 	sub	lr, sl, #32
    e668:	e1a09e17 	lsl	r9, r7, lr
    e66c:	e26ae020 	rsb	lr, sl, #32
    e670:	e1899e37 	orr	r9, r9, r7, lsr lr
    e674:	e1a08a17 	lsl	r8, r7, sl
    e678:	e1888002 	orr	r8, r8, r2
    e67c:	e1899003 	orr	r9, r9, r3
    e680:	e5940004 	ldr	r0, [r4, #4]
    e684:	e1a02006 	mov	r2, r6
    e688:	e5941018 	ldr	r1, [r4, #24]
    e68c:	e1cc80f0 	strd	r8, [ip]
    e690:	eb0010aa 	bl	12940 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    e694:	e2505000 	subs	r5, r0, #0
    e698:	0a000036 	beq	e778 <CUSBDevice::Initialize()+0x314>
    e69c:	e5945028 	ldr	r5, [r4, #40]	; 0x28
    e6a0:	e5c46014 	strb	r6, [r4, #20]
    e6a4:	e3550000 	cmp	r5, #0
    e6a8:	1a000069 	bne	e854 <CUSBDevice::Initialize()+0x3f0>
    e6ac:	e3a00009 	mov	r0, #9
    e6b0:	eb00726f 	bl	2b074 <operator new(unsigned int)>
    e6b4:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    e6b8:	e5840028 	str	r0, [r4, #40]	; 0x28
    e6bc:	e5d12008 	ldrb	r2, [r1, #8]
    e6c0:	e5d1c009 	ldrb	ip, [r1, #9]
    e6c4:	e59f34b8 	ldr	r3, [pc, #1208]	; eb84 <CUSBDevice::Initialize()+0x720>
    e6c8:	e182240c 	orr	r2, r2, ip, lsl #8
    e6cc:	e1520003 	cmp	r2, r3
    e6d0:	0a00002e 	beq	e790 <CUSBDevice::Initialize()+0x32c>
    e6d4:	e3a07009 	mov	r7, #9
    e6d8:	e3a06000 	mov	r6, #0
    e6dc:	e3a08080 	mov	r8, #128	; 0x80
    e6e0:	e5943004 	ldr	r3, [r4, #4]
    e6e4:	e5941018 	ldr	r1, [r4, #24]
    e6e8:	e3a02002 	mov	r2, #2
    e6ec:	e58d0000 	str	r0, [sp]
    e6f0:	e58d600c 	str	r6, [sp, #12]
    e6f4:	e1a00003 	mov	r0, r3
    e6f8:	e98d0180 	stmib	sp, {r7, r8}
    e6fc:	e1a03005 	mov	r3, r5
    e700:	eb001080 	bl	12908 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e704:	e1500007 	cmp	r0, r7
    e708:	1a000010 	bne	e750 <CUSBDevice::Initialize()+0x2ec>
    e70c:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e710:	e5d07000 	ldrb	r7, [r0]
    e714:	e3570009 	cmp	r7, #9
    e718:	1a000002 	bne	e728 <CUSBDevice::Initialize()+0x2c4>
    e71c:	e5d0a001 	ldrb	sl, [r0, #1]
    e720:	e35a0002 	cmp	sl, #2
    e724:	0a000021 	beq	e7b0 <CUSBDevice::Initialize()+0x34c>
    e728:	e3a05000 	mov	r5, #0
    e72c:	e59f2454 	ldr	r2, [pc, #1108]	; eb88 <CUSBDevice::Initialize()+0x724>
    e730:	e3a01001 	mov	r1, #1
    e734:	e1a00004 	mov	r0, r4
    e738:	ebffff1d 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e73c:	e3a01009 	mov	r1, #9
    e740:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e744:	eb007258 	bl	2b0ac <operator delete(void*, unsigned int)>
    e748:	e5845028 	str	r5, [r4, #40]	; 0x28
    e74c:	eaffff7a 	b	e53c <CUSBDevice::Initialize()+0xd8>
    e750:	e59f2434 	ldr	r2, [pc, #1076]	; eb8c <CUSBDevice::Initialize()+0x728>
    e754:	e3a01001 	mov	r1, #1
    e758:	e1a00004 	mov	r0, r4
    e75c:	ebffff14 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e760:	e1a01007 	mov	r1, r7
    e764:	e5940028 	ldr	r0, [r4, #40]	; 0x28
    e768:	eb00724f 	bl	2b0ac <operator delete(void*, unsigned int)>
    e76c:	e1a05006 	mov	r5, r6
    e770:	e5846028 	str	r6, [r4, #40]	; 0x28
    e774:	eaffff70 	b	e53c <CUSBDevice::Initialize()+0xd8>
    e778:	e1a03006 	mov	r3, r6
    e77c:	e1a01007 	mov	r1, r7
    e780:	e1a00004 	mov	r0, r4
    e784:	e59f2404 	ldr	r2, [pc, #1028]	; eb90 <CUSBDevice::Initialize()+0x72c>
    e788:	ebffff09 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e78c:	eaffff6a 	b	e53c <CUSBDevice::Initialize()+0xd8>
    e790:	e5d1500a 	ldrb	r5, [r1, #10]
    e794:	e5d1200b 	ldrb	r2, [r1, #11]
    e798:	e59f33f4 	ldr	r3, [pc, #1012]	; eb94 <CUSBDevice::Initialize()+0x730>
    e79c:	e1855402 	orr	r5, r5, r2, lsl #8
    e7a0:	e0455003 	sub	r5, r5, r3
    e7a4:	e16f5f15 	clz	r5, r5
    e7a8:	e1a052a5 	lsr	r5, r5, #5
    e7ac:	eaffffc8 	b	e6d4 <CUSBDevice::Initialize()+0x270>
    e7b0:	e5d09002 	ldrb	r9, [r0, #2]
    e7b4:	e5d03003 	ldrb	r3, [r0, #3]
    e7b8:	e1899403 	orr	r9, r9, r3, lsl #8
    e7bc:	e3590c02 	cmp	r9, #512	; 0x200
    e7c0:	caffffd8 	bgt	e728 <CUSBDevice::Initialize()+0x2c4>
    e7c4:	e1a01007 	mov	r1, r7
    e7c8:	eb007237 	bl	2b0ac <operator delete(void*, unsigned int)>
    e7cc:	e1a00009 	mov	r0, r9
    e7d0:	eb007228 	bl	2b078 <operator new[](unsigned int)>
    e7d4:	e58d600c 	str	r6, [sp, #12]
    e7d8:	e5840028 	str	r0, [r4, #40]	; 0x28
    e7dc:	e58d0000 	str	r0, [sp]
    e7e0:	e58d8008 	str	r8, [sp, #8]
    e7e4:	e58d9004 	str	r9, [sp, #4]
    e7e8:	e1a03005 	mov	r3, r5
    e7ec:	e1a0200a 	mov	r2, sl
    e7f0:	e5941018 	ldr	r1, [r4, #24]
    e7f4:	e5940004 	ldr	r0, [r4, #4]
    e7f8:	eb001042 	bl	12908 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    e7fc:	e1590000 	cmp	r9, r0
    e800:	1a000017 	bne	e864 <CUSBDevice::Initialize()+0x400>
    e804:	e594602c 	ldr	r6, [r4, #44]	; 0x2c
    e808:	e3560000 	cmp	r6, #0
    e80c:	1a000016 	bne	e86c <CUSBDevice::Initialize()+0x408>
    e810:	e3a0001c 	mov	r0, #28
    e814:	eb007216 	bl	2b074 <operator new(unsigned int)>
    e818:	e1a05000 	mov	r5, r0
    e81c:	e1a02009 	mov	r2, r9
    e820:	e5941028 	ldr	r1, [r4, #40]	; 0x28
    e824:	eb002432 	bl	178f4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    e828:	e584502c 	str	r5, [r4, #44]	; 0x2c
    e82c:	e1a00005 	mov	r0, r5
    e830:	eb002499 	bl	17a9c <CUSBConfigurationParser::IsValid() const>
    e834:	e2505000 	subs	r5, r0, #0
    e838:	1a000013 	bne	e88c <CUSBDevice::Initialize()+0x428>
    e83c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e840:	e3500000 	cmp	r0, #0
    e844:	0a00000c 	beq	e87c <CUSBDevice::Initialize()+0x418>
    e848:	e59f1348 	ldr	r1, [pc, #840]	; eb98 <CUSBDevice::Initialize()+0x734>
    e84c:	eb0024e2 	bl	17bdc <CUSBConfigurationParser::Error(char const*) const>
    e850:	eaffff39 	b	e53c <CUSBDevice::Initialize()+0xd8>
    e854:	e3a02c01 	mov	r2, #256	; 0x100
    e858:	e59f1304 	ldr	r1, [pc, #772]	; eb64 <CUSBDevice::Initialize()+0x700>
    e85c:	e59f0338 	ldr	r0, [pc, #824]	; eb9c <CUSBDevice::Initialize()+0x738>
    e860:	eb0057e6 	bl	24800 <assertion_failed>
    e864:	e59f2334 	ldr	r2, [pc, #820]	; eba0 <CUSBDevice::Initialize()+0x73c>
    e868:	eaffffb9 	b	e754 <CUSBDevice::Initialize()+0x2f0>
    e86c:	e59f2330 	ldr	r2, [pc, #816]	; eba4 <CUSBDevice::Initialize()+0x740>
    e870:	e59f12ec 	ldr	r1, [pc, #748]	; eb64 <CUSBDevice::Initialize()+0x700>
    e874:	e59f032c 	ldr	r0, [pc, #812]	; eba8 <CUSBDevice::Initialize()+0x744>
    e878:	eb0057e0 	bl	24800 <assertion_failed>
    e87c:	e59f2328 	ldr	r2, [pc, #808]	; ebac <CUSBDevice::Initialize()+0x748>
    e880:	e59f12dc 	ldr	r1, [pc, #732]	; eb64 <CUSBDevice::Initialize()+0x700>
    e884:	e59f0324 	ldr	r0, [pc, #804]	; ebb0 <CUSBDevice::Initialize()+0x74c>
    e888:	eb0057dc 	bl	24800 <assertion_failed>
    e88c:	e1a00004 	mov	r0, r4
    e890:	ebfffe2f 	bl	e154 <CUSBDevice::GetNames() const>
    e894:	e2507000 	subs	r7, r0, #0
    e898:	0a000051 	beq	e9e4 <CUSBDevice::Initialize()+0x580>
    e89c:	eb0064c6 	bl	27bbc <CString::operator char const*() const>
    e8a0:	e59f230c 	ldr	r2, [pc, #780]	; ebb4 <CUSBDevice::Initialize()+0x750>
    e8a4:	e1a03000 	mov	r3, r0
    e8a8:	e3a01003 	mov	r1, #3
    e8ac:	e1a00004 	mov	r0, r4
    e8b0:	ebfffebf 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e8b4:	e5973000 	ldr	r3, [r7]
    e8b8:	e1a00007 	mov	r0, r7
    e8bc:	e5933004 	ldr	r3, [r3, #4]
    e8c0:	e12fff33 	blx	r3
    e8c4:	e1a07006 	mov	r7, r6
    e8c8:	e1a0a006 	mov	sl, r6
    e8cc:	e3a01004 	mov	r1, #4
    e8d0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    e8d4:	eb002472 	bl	17aa4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e8d8:	e3500000 	cmp	r0, #0
    e8dc:	0a000038 	beq	e9c4 <CUSBDevice::Initialize()+0x560>
    e8e0:	e5d09002 	ldrb	r9, [r0, #2]
    e8e4:	e1590006 	cmp	r9, r6
    e8e8:	da000028 	ble	e990 <CUSBDevice::Initialize()+0x52c>
    e8ec:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    e8f0:	e3530000 	cmp	r3, #0
    e8f4:	0a00002e 	beq	e9b4 <CUSBDevice::Initialize()+0x550>
    e8f8:	e0846107 	add	r6, r4, r7, lsl #2
    e8fc:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    e900:	e3530000 	cmp	r3, #0
    e904:	1a000086 	bne	eb24 <CUSBDevice::Initialize()+0x6c0>
    e908:	e3a00010 	mov	r0, #16
    e90c:	eb0071d8 	bl	2b074 <operator new(unsigned int)>
    e910:	e1a08000 	mov	r8, r0
    e914:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    e918:	e1a01004 	mov	r1, r4
    e91c:	eb000357 	bl	f680 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    e920:	e3570000 	cmp	r7, #0
    e924:	e5868030 	str	r8, [r6, #48]	; 0x30
    e928:	0a00005c 	beq	eaa0 <CUSBDevice::Initialize()+0x63c>
    e92c:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    e930:	eb0003b3 	bl	f804 <CUSBFunction::GetInterfaceName() const>
    e934:	e2508000 	subs	r8, r0, #0
    e938:	0a00004d 	beq	ea74 <CUSBDevice::Initialize()+0x610>
    e93c:	e59f1274 	ldr	r1, [pc, #628]	; ebb8 <CUSBDevice::Initialize()+0x754>
    e940:	eb0064f0 	bl	27d08 <CString::Compare(char const*) const>
    e944:	e250b000 	subs	fp, r0, #0
    e948:	1a000029 	bne	e9f4 <CUSBDevice::Initialize()+0x590>
    e94c:	e5983000 	ldr	r3, [r8]
    e950:	e1a00008 	mov	r0, r8
    e954:	e5933004 	ldr	r3, [r3, #4]
    e958:	e12fff33 	blx	r3
    e95c:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    e960:	e3500000 	cmp	r0, #0
    e964:	0a000003 	beq	e978 <CUSBDevice::Initialize()+0x514>
    e968:	e5903000 	ldr	r3, [r0]
    e96c:	e5933004 	ldr	r3, [r3, #4]
    e970:	e12fff33 	blx	r3
    e974:	e586b030 	str	fp, [r6, #48]	; 0x30
    e978:	e59f223c 	ldr	r2, [pc, #572]	; ebbc <CUSBDevice::Initialize()+0x758>
    e97c:	e3a01002 	mov	r1, #2
    e980:	e1a00004 	mov	r0, r4
    e984:	ebfffe8a 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e988:	e1a06009 	mov	r6, r9
    e98c:	eaffffce 	b	e8cc <CUSBDevice::Initialize()+0x468>
    e990:	e1560009 	cmp	r6, r9
    e994:	0affffd4 	beq	e8ec <CUSBDevice::Initialize()+0x488>
    e998:	e5d03003 	ldrb	r3, [r0, #3]
    e99c:	e59f221c 	ldr	r2, [pc, #540]	; ebc0 <CUSBDevice::Initialize()+0x75c>
    e9a0:	e3a01004 	mov	r1, #4
    e9a4:	e1a00004 	mov	r0, r4
    e9a8:	e1a09006 	mov	r9, r6
    e9ac:	ebfffe80 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e9b0:	eafffff4 	b	e988 <CUSBDevice::Initialize()+0x524>
    e9b4:	e59f2208 	ldr	r2, [pc, #520]	; ebc4 <CUSBDevice::Initialize()+0x760>
    e9b8:	e59f11a4 	ldr	r1, [pc, #420]	; eb64 <CUSBDevice::Initialize()+0x700>
    e9bc:	e59f01ec 	ldr	r0, [pc, #492]	; ebb0 <CUSBDevice::Initialize()+0x74c>
    e9c0:	eb00578e 	bl	24800 <assertion_failed>
    e9c4:	e3570000 	cmp	r7, #0
    e9c8:	1afffedb 	bne	e53c <CUSBDevice::Initialize()+0xd8>
    e9cc:	e1a00004 	mov	r0, r4
    e9d0:	e59f21f0 	ldr	r2, [pc, #496]	; ebc8 <CUSBDevice::Initialize()+0x764>
    e9d4:	e3a01002 	mov	r1, #2
    e9d8:	e1a05007 	mov	r5, r7
    e9dc:	ebfffe74 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e9e0:	eafffed5 	b	e53c <CUSBDevice::Initialize()+0xd8>
    e9e4:	e59f21e0 	ldr	r2, [pc, #480]	; ebcc <CUSBDevice::Initialize()+0x768>
    e9e8:	e59f1174 	ldr	r1, [pc, #372]	; eb64 <CUSBDevice::Initialize()+0x700>
    e9ec:	e59f01dc 	ldr	r0, [pc, #476]	; ebd0 <CUSBDevice::Initialize()+0x76c>
    e9f0:	eb005782 	bl	24800 <assertion_failed>
    e9f4:	e1a00008 	mov	r0, r8
    e9f8:	eb00646f 	bl	27bbc <CString::operator char const*() const>
    e9fc:	e59f21d0 	ldr	r2, [pc, #464]	; ebd4 <CUSBDevice::Initialize()+0x770>
    ea00:	e1a03000 	mov	r3, r0
    ea04:	e3a01003 	mov	r1, #3
    ea08:	e1a00004 	mov	r0, r4
    ea0c:	ebfffe68 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ea10:	e1a01008 	mov	r1, r8
    ea14:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    ea18:	eb0000b1 	bl	ece4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    ea1c:	e1a08000 	mov	r8, r0
    ea20:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    ea24:	e3500000 	cmp	r0, #0
    ea28:	0a000002 	beq	ea38 <CUSBDevice::Initialize()+0x5d4>
    ea2c:	e5903000 	ldr	r3, [r0]
    ea30:	e5933004 	ldr	r3, [r3, #4]
    ea34:	e12fff33 	blx	r3
    ea38:	e3580000 	cmp	r8, #0
    ea3c:	0a000036 	beq	eb1c <CUSBDevice::Initialize()+0x6b8>
    ea40:	e5983000 	ldr	r3, [r8]
    ea44:	e1a00008 	mov	r0, r8
    ea48:	e5868030 	str	r8, [r6, #48]	; 0x30
    ea4c:	e5933018 	ldr	r3, [r3, #24]
    ea50:	e12fff33 	blx	r3
    ea54:	e3500000 	cmp	r0, #0
    ea58:	0a000023 	beq	eaec <CUSBDevice::Initialize()+0x688>
    ea5c:	e2877001 	add	r7, r7, #1
    ea60:	e357000a 	cmp	r7, #10
    ea64:	0a000006 	beq	ea84 <CUSBDevice::Initialize()+0x620>
    ea68:	e2899001 	add	r9, r9, #1
    ea6c:	e6ef9079 	uxtb	r9, r9
    ea70:	eaffffc4 	b	e988 <CUSBDevice::Initialize()+0x524>
    ea74:	e3a02d06 	mov	r2, #384	; 0x180
    ea78:	e59f10e4 	ldr	r1, [pc, #228]	; eb64 <CUSBDevice::Initialize()+0x700>
    ea7c:	e59f0154 	ldr	r0, [pc, #340]	; ebd8 <CUSBDevice::Initialize()+0x774>
    ea80:	eb00575e 	bl	24800 <assertion_failed>
    ea84:	e1a03000 	mov	r3, r0
    ea88:	e59f214c 	ldr	r2, [pc, #332]	; ebdc <CUSBDevice::Initialize()+0x778>
    ea8c:	e1a00004 	mov	r0, r4
    ea90:	e3a01002 	mov	r1, #2
    ea94:	e1a05003 	mov	r5, r3
    ea98:	ebfffe45 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ea9c:	eafffea6 	b	e53c <CUSBDevice::Initialize()+0xd8>
    eaa0:	e1a0100a 	mov	r1, sl
    eaa4:	e1a00004 	mov	r0, r4
    eaa8:	ebfffd64 	bl	e040 <CUSBDevice::GetName(TDeviceNameSelector) const>
    eaac:	e1a01000 	mov	r1, r0
    eab0:	e1a00008 	mov	r0, r8
    eab4:	eb00008a 	bl	ece4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    eab8:	e2508000 	subs	r8, r0, #0
    eabc:	0a00001c 	beq	eb34 <CUSBDevice::Initialize()+0x6d0>
    eac0:	e5940030 	ldr	r0, [r4, #48]	; 0x30
    eac4:	e3500000 	cmp	r0, #0
    eac8:	1affffd7 	bne	ea2c <CUSBDevice::Initialize()+0x5c8>
    eacc:	e5983000 	ldr	r3, [r8]
    ead0:	e1a00008 	mov	r0, r8
    ead4:	e5848030 	str	r8, [r4, #48]	; 0x30
    ead8:	e5933018 	ldr	r3, [r3, #24]
    eadc:	e12fff33 	blx	r3
    eae0:	e3500000 	cmp	r0, #0
    eae4:	13a07001 	movne	r7, #1
    eae8:	1affffde 	bne	ea68 <CUSBDevice::Initialize()+0x604>
    eaec:	e1a00004 	mov	r0, r4
    eaf0:	e59f20e8 	ldr	r2, [pc, #232]	; ebe0 <CUSBDevice::Initialize()+0x77c>
    eaf4:	e3a01001 	mov	r1, #1
    eaf8:	ebfffe2d 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    eafc:	e5960030 	ldr	r0, [r6, #48]	; 0x30
    eb00:	e3500000 	cmp	r0, #0
    eb04:	0a000002 	beq	eb14 <CUSBDevice::Initialize()+0x6b0>
    eb08:	e5903000 	ldr	r3, [r0]
    eb0c:	e5933004 	ldr	r3, [r3, #4]
    eb10:	e12fff33 	blx	r3
    eb14:	e586a030 	str	sl, [r6, #48]	; 0x30
    eb18:	eaffff9a 	b	e988 <CUSBDevice::Initialize()+0x524>
    eb1c:	e5868030 	str	r8, [r6, #48]	; 0x30
    eb20:	eaffff94 	b	e978 <CUSBDevice::Initialize()+0x514>
    eb24:	e59f20b8 	ldr	r2, [pc, #184]	; ebe4 <CUSBDevice::Initialize()+0x780>
    eb28:	e59f1034 	ldr	r1, [pc, #52]	; eb64 <CUSBDevice::Initialize()+0x700>
    eb2c:	e59f00b4 	ldr	r0, [pc, #180]	; ebe8 <CUSBDevice::Initialize()+0x784>
    eb30:	eb005732 	bl	24800 <assertion_failed>
    eb34:	e3a01001 	mov	r1, #1
    eb38:	e1a00004 	mov	r0, r4
    eb3c:	e5948030 	ldr	r8, [r4, #48]	; 0x30
    eb40:	ebfffd3e 	bl	e040 <CUSBDevice::GetName(TDeviceNameSelector) const>
    eb44:	e1a01000 	mov	r1, r0
    eb48:	e1a00008 	mov	r0, r8
    eb4c:	eb000064 	bl	ece4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    eb50:	e2508000 	subs	r8, r0, #0
    eb54:	1affffd9 	bne	eac0 <CUSBDevice::Initialize()+0x65c>
    eb58:	eaffff73 	b	e92c <CUSBDevice::Initialize()+0x4c8>
    eb5c:	0003fde0 	.word	0x0003fde0
    eb60:	0003fdb8 	.word	0x0003fdb8
    eb64:	0003fc64 	.word	0x0003fc64
    eb68:	0003fda4 	.word	0x0003fda4
    eb6c:	0003f9b8 	.word	0x0003f9b8
    eb70:	0003fd4c 	.word	0x0003fd4c
    eb74:	0004e0d0 	.word	0x0004e0d0
    eb78:	0003ffe4 	.word	0x0003ffe4
    eb7c:	0003fdfc 	.word	0x0003fdfc
    eb80:	0003fe24 	.word	0x0003fe24
    eb84:	00000525 	.word	0x00000525
    eb88:	0003fe9c 	.word	0x0003fe9c
    eb8c:	0003fe70 	.word	0x0003fe70
    eb90:	0003fe44 	.word	0x0003fe44
    eb94:	0000a4a2 	.word	0x0000a4a2
    eb98:	0003fc5c 	.word	0x0003fc5c
    eb9c:	0003fe5c 	.word	0x0003fe5c
    eba0:	0003fec0 	.word	0x0003fec0
    eba4:	0000013e 	.word	0x0000013e
    eba8:	0003fee4 	.word	0x0003fee4
    ebac:	0000028a 	.word	0x0000028a
    ebb0:	0003fd74 	.word	0x0003fd74
    ebb4:	0003ff08 	.word	0x0003ff08
    ebb8:	0003fd14 	.word	0x0003fd14
    ebbc:	0003ff68 	.word	0x0003ff68
    ebc0:	0003ff18 	.word	0x0003ff18
    ebc4:	0000016d 	.word	0x0000016d
    ebc8:	0003ffc0 	.word	0x0003ffc0
    ebcc:	0000014a 	.word	0x0000014a
    ebd0:	0003fefc 	.word	0x0003fefc
    ebd4:	0003ff54 	.word	0x0003ff54
    ebd8:	0003fd1c 	.word	0x0003fd1c
    ebdc:	0003ffa0 	.word	0x0003ffa0
    ebe0:	0003ff84 	.word	0x0003ff84
    ebe4:	0000016e 	.word	0x0000016e
    ebe8:	0003ff38 	.word	0x0003ff38

0000ebec <CUSBDevice::Configure()>:
    ebec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ebf0:	e1a05000 	mov	r5, r0
    ebf4:	e5900004 	ldr	r0, [r0, #4]
    ebf8:	e3500000 	cmp	r0, #0
    ebfc:	0a00002a 	beq	ecac <CUSBDevice::Configure()+0xc0>
    ec00:	e5951018 	ldr	r1, [r5, #24]
    ec04:	e3510000 	cmp	r1, #0
    ec08:	0a00002b 	beq	ecbc <CUSBDevice::Configure()+0xd0>
    ec0c:	e5956028 	ldr	r6, [r5, #40]	; 0x28
    ec10:	e3560000 	cmp	r6, #0
    ec14:	0a00001a 	beq	ec84 <CUSBDevice::Configure()+0x98>
    ec18:	e5d62005 	ldrb	r2, [r6, #5]
    ec1c:	eb000f5a 	bl	1298c <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    ec20:	e2506000 	subs	r6, r0, #0
    ec24:	0a000018 	beq	ec8c <CUSBDevice::Configure()+0xa0>
    ec28:	e3a06000 	mov	r6, #0
    ec2c:	e1a07006 	mov	r7, r6
    ec30:	e2854030 	add	r4, r5, #48	; 0x30
    ec34:	e2855058 	add	r5, r5, #88	; 0x58
    ec38:	e5940000 	ldr	r0, [r4]
    ec3c:	e3500000 	cmp	r0, #0
    ec40:	0a00000c 	beq	ec78 <CUSBDevice::Configure()+0x8c>
    ec44:	e5903000 	ldr	r3, [r0]
    ec48:	e593301c 	ldr	r3, [r3, #28]
    ec4c:	e12fff33 	blx	r3
    ec50:	e3500000 	cmp	r0, #0
    ec54:	11a06000 	movne	r6, r0
    ec58:	1a000006 	bne	ec78 <CUSBDevice::Configure()+0x8c>
    ec5c:	e5940000 	ldr	r0, [r4]
    ec60:	e3500000 	cmp	r0, #0
    ec64:	0a000002 	beq	ec74 <CUSBDevice::Configure()+0x88>
    ec68:	e5903000 	ldr	r3, [r0]
    ec6c:	e5933004 	ldr	r3, [r3, #4]
    ec70:	e12fff33 	blx	r3
    ec74:	e5847000 	str	r7, [r4]
    ec78:	e2844004 	add	r4, r4, #4
    ec7c:	e1550004 	cmp	r5, r4
    ec80:	1affffec 	bne	ec38 <CUSBDevice::Configure()+0x4c>
    ec84:	e1a00006 	mov	r0, r6
    ec88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ec8c:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    ec90:	e1a00005 	mov	r0, r5
    ec94:	e5d33005 	ldrb	r3, [r3, #5]
    ec98:	e59f202c 	ldr	r2, [pc, #44]	; eccc <CUSBDevice::Configure()+0xe0>
    ec9c:	e3a01001 	mov	r1, #1
    eca0:	ebfffdc3 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    eca4:	e1a00006 	mov	r0, r6
    eca8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    ecac:	e59f201c 	ldr	r2, [pc, #28]	; ecd0 <CUSBDevice::Configure()+0xe4>
    ecb0:	e59f101c 	ldr	r1, [pc, #28]	; ecd4 <CUSBDevice::Configure()+0xe8>
    ecb4:	e59f001c 	ldr	r0, [pc, #28]	; ecd8 <CUSBDevice::Configure()+0xec>
    ecb8:	eb0056d0 	bl	24800 <assertion_failed>
    ecbc:	e59f2018 	ldr	r2, [pc, #24]	; ecdc <CUSBDevice::Configure()+0xf0>
    ecc0:	e59f100c 	ldr	r1, [pc, #12]	; ecd4 <CUSBDevice::Configure()+0xe8>
    ecc4:	e59f0014 	ldr	r0, [pc, #20]	; ece0 <CUSBDevice::Configure()+0xf4>
    ecc8:	eb0056cc 	bl	24800 <assertion_failed>
    eccc:	0003fff8 	.word	0x0003fff8
    ecd0:	000001b9 	.word	0x000001b9
    ecd4:	0003fc64 	.word	0x0003fc64
    ecd8:	0003f9b8 	.word	0x0003f9b8
    ecdc:	000001ba 	.word	0x000001ba
    ece0:	0003fd4c 	.word	0x0003fd4c

0000ece4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    ece4:	e92d4070 	push	{r4, r5, r6, lr}
    ece8:	e2506000 	subs	r6, r0, #0
    ecec:	0a000042 	beq	edfc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x118>
    ecf0:	e3510000 	cmp	r1, #0
    ecf4:	e1a04001 	mov	r4, r1
    ecf8:	0a000043 	beq	ee0c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x128>
    ecfc:	e59f13d0 	ldr	r1, [pc, #976]	; f0d4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f0>
    ed00:	e1a00004 	mov	r0, r4
    ed04:	eb0063ff 	bl	27d08 <CString::Compare(char const*) const>
    ed08:	e3500000 	cmp	r0, #0
    ed0c:	1a000014 	bne	ed64 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x80>
    ed10:	e3a00068 	mov	r0, #104	; 0x68
    ed14:	eb0070d6 	bl	2b074 <operator new(unsigned int)>
    ed18:	e1a01006 	mov	r1, r6
    ed1c:	e1a05000 	mov	r5, r0
    ed20:	eb0016e2 	bl	148b0 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    ed24:	e1a00005 	mov	r0, r5
    ed28:	eb0002dc 	bl	f8a0 <CUSBFunction::GetDevice() const>
    ed2c:	e1a06000 	mov	r6, r0
    ed30:	e1a00004 	mov	r0, r4
    ed34:	eb0063a0 	bl	27bbc <CString::operator char const*() const>
    ed38:	e59f2398 	ldr	r2, [pc, #920]	; f0d8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f4>
    ed3c:	e1a03000 	mov	r3, r0
    ed40:	e3a01003 	mov	r1, #3
    ed44:	e1a00006 	mov	r0, r6
    ed48:	ebfffd99 	bl	e3b4 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ed4c:	e5943000 	ldr	r3, [r4]
    ed50:	e1a00004 	mov	r0, r4
    ed54:	e5933004 	ldr	r3, [r3, #4]
    ed58:	e12fff33 	blx	r3
    ed5c:	e1a00005 	mov	r0, r5
    ed60:	e8bd8070 	pop	{r4, r5, r6, pc}
    ed64:	e59f1370 	ldr	r1, [pc, #880]	; f0dc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3f8>
    ed68:	e1a00004 	mov	r0, r4
    ed6c:	eb0063e5 	bl	27d08 <CString::Compare(char const*) const>
    ed70:	e3500000 	cmp	r0, #0
    ed74:	0affffe5 	beq	ed10 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2c>
    ed78:	e59f1360 	ldr	r1, [pc, #864]	; f0e0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3fc>
    ed7c:	e1a00004 	mov	r0, r4
    ed80:	eb0063e0 	bl	27d08 <CString::Compare(char const*) const>
    ed84:	e3500000 	cmp	r0, #0
    ed88:	1a000005 	bne	eda4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xc0>
    ed8c:	e3a00030 	mov	r0, #48	; 0x30
    ed90:	eb0070b7 	bl	2b074 <operator new(unsigned int)>
    ed94:	e1a01006 	mov	r1, r6
    ed98:	e1a05000 	mov	r5, r0
    ed9c:	eb000f75 	bl	12b78 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    eda0:	eaffffdf 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eda4:	e59f1338 	ldr	r1, [pc, #824]	; f0e4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x400>
    eda8:	e1a00004 	mov	r0, r4
    edac:	eb0063d5 	bl	27d08 <CString::Compare(char const*) const>
    edb0:	e3500000 	cmp	r0, #0
    edb4:	0a00000a 	beq	ede4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x100>
    edb8:	e59f1328 	ldr	r1, [pc, #808]	; f0e8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x404>
    edbc:	e1a00004 	mov	r0, r4
    edc0:	eb0063d0 	bl	27d08 <CString::Compare(char const*) const>
    edc4:	e3500000 	cmp	r0, #0
    edc8:	1a000013 	bne	ee1c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x138>
    edcc:	e3a00030 	mov	r0, #48	; 0x30
    edd0:	eb0070a7 	bl	2b074 <operator new(unsigned int)>
    edd4:	e1a01006 	mov	r1, r6
    edd8:	e1a05000 	mov	r5, r0
    eddc:	eb0014ad 	bl	14098 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    ede0:	eaffffcf 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ede4:	e3a00e45 	mov	r0, #1104	; 0x450
    ede8:	eb0070a1 	bl	2b074 <operator new(unsigned int)>
    edec:	e1a01006 	mov	r1, r6
    edf0:	e1a05000 	mov	r5, r0
    edf4:	ebffea9f 	bl	9878 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    edf8:	eaffffc9 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    edfc:	e3a0202b 	mov	r2, #43	; 0x2b
    ee00:	e59f12e4 	ldr	r1, [pc, #740]	; f0ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x408>
    ee04:	e59f02e4 	ldr	r0, [pc, #740]	; f0f0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40c>
    ee08:	eb00567c 	bl	24800 <assertion_failed>
    ee0c:	e3a0202c 	mov	r2, #44	; 0x2c
    ee10:	e59f12d4 	ldr	r1, [pc, #724]	; f0ec <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x408>
    ee14:	e59f02d8 	ldr	r0, [pc, #728]	; f0f4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x410>
    ee18:	eb005678 	bl	24800 <assertion_failed>
    ee1c:	e59f12d4 	ldr	r1, [pc, #724]	; f0f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x414>
    ee20:	e1a00004 	mov	r0, r4
    ee24:	eb0063b7 	bl	27d08 <CString::Compare(char const*) const>
    ee28:	e3500000 	cmp	r0, #0
    ee2c:	0a00000a 	beq	ee5c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x178>
    ee30:	e59f12c4 	ldr	r1, [pc, #708]	; f0fc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x418>
    ee34:	e1a00004 	mov	r0, r4
    ee38:	eb0063b2 	bl	27d08 <CString::Compare(char const*) const>
    ee3c:	e3500000 	cmp	r0, #0
    ee40:	1a00000c 	bne	ee78 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x194>
    ee44:	e3a00f5b 	mov	r0, #364	; 0x16c
    ee48:	eb007089 	bl	2b074 <operator new(unsigned int)>
    ee4c:	e1a01006 	mov	r1, r6
    ee50:	e1a05000 	mov	r5, r0
    ee54:	eb0003b1 	bl	fd20 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
    ee58:	eaffffb1 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ee5c:	e3a00f4f 	mov	r0, #316	; 0x13c
    ee60:	eb007083 	bl	2b074 <operator new(unsigned int)>
    ee64:	e1a01006 	mov	r1, r6
    ee68:	e3a02001 	mov	r2, #1
    ee6c:	e1a05000 	mov	r5, r0
    ee70:	eb0006c0 	bl	10978 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    ee74:	eaffffaa 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ee78:	e59f1280 	ldr	r1, [pc, #640]	; f100 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x41c>
    ee7c:	e1a00004 	mov	r0, r4
    ee80:	eb0063a0 	bl	27d08 <CString::Compare(char const*) const>
    ee84:	e3500000 	cmp	r0, #0
    ee88:	1a000005 	bne	eea4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1c0>
    ee8c:	e3a00f53 	mov	r0, #332	; 0x14c
    ee90:	eb007077 	bl	2b074 <operator new(unsigned int)>
    ee94:	e1a01006 	mov	r1, r6
    ee98:	e1a05000 	mov	r5, r0
    ee9c:	eb000508 	bl	102c4 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
    eea0:	eaffff9f 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eea4:	e59f1258 	ldr	r1, [pc, #600]	; f104 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x420>
    eea8:	e1a00004 	mov	r0, r4
    eeac:	eb006395 	bl	27d08 <CString::Compare(char const*) const>
    eeb0:	e3500000 	cmp	r0, #0
    eeb4:	0afffff4 	beq	ee8c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1a8>
    eeb8:	e59f1248 	ldr	r1, [pc, #584]	; f108 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x424>
    eebc:	e1a00004 	mov	r0, r4
    eec0:	eb006390 	bl	27d08 <CString::Compare(char const*) const>
    eec4:	e3500000 	cmp	r0, #0
    eec8:	1a000005 	bne	eee4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x200>
    eecc:	e3a00e13 	mov	r0, #304	; 0x130
    eed0:	eb007067 	bl	2b074 <operator new(unsigned int)>
    eed4:	e1a01006 	mov	r1, r6
    eed8:	e1a05000 	mov	r5, r0
    eedc:	eb000ae4 	bl	11a74 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
    eee0:	eaffff8f 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eee4:	e59f1220 	ldr	r1, [pc, #544]	; f10c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x428>
    eee8:	e1a00004 	mov	r0, r4
    eeec:	eb006385 	bl	27d08 <CString::Compare(char const*) const>
    eef0:	e3500000 	cmp	r0, #0
    eef4:	0afffff4 	beq	eecc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1e8>
    eef8:	e59f1210 	ldr	r1, [pc, #528]	; f110 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x42c>
    eefc:	e1a00004 	mov	r0, r4
    ef00:	eb006380 	bl	27d08 <CString::Compare(char const*) const>
    ef04:	e3500000 	cmp	r0, #0
    ef08:	1a000005 	bne	ef24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x240>
    ef0c:	e3a00f4d 	mov	r0, #308	; 0x134
    ef10:	eb007057 	bl	2b074 <operator new(unsigned int)>
    ef14:	e1a01006 	mov	r1, r6
    ef18:	e1a05000 	mov	r5, r0
    ef1c:	eb000bec 	bl	11ed4 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
    ef20:	eaffff7f 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef24:	e59f11e8 	ldr	r1, [pc, #488]	; f114 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x430>
    ef28:	e1a00004 	mov	r0, r4
    ef2c:	eb006375 	bl	27d08 <CString::Compare(char const*) const>
    ef30:	e3500000 	cmp	r0, #0
    ef34:	0afffff4 	beq	ef0c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x228>
    ef38:	e59f11d8 	ldr	r1, [pc, #472]	; f118 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x434>
    ef3c:	e1a00004 	mov	r0, r4
    ef40:	eb006370 	bl	27d08 <CString::Compare(char const*) const>
    ef44:	e3500000 	cmp	r0, #0
    ef48:	0affffef 	beq	ef0c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x228>
    ef4c:	e59f11c8 	ldr	r1, [pc, #456]	; f11c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x438>
    ef50:	e1a00004 	mov	r0, r4
    ef54:	eb00636b 	bl	27d08 <CString::Compare(char const*) const>
    ef58:	e3500000 	cmp	r0, #0
    ef5c:	0affffea 	beq	ef0c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x228>
    ef60:	e59f11b8 	ldr	r1, [pc, #440]	; f120 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x43c>
    ef64:	e1a00004 	mov	r0, r4
    ef68:	eb006366 	bl	27d08 <CString::Compare(char const*) const>
    ef6c:	e3500000 	cmp	r0, #0
    ef70:	1a000005 	bne	ef8c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2a8>
    ef74:	e3a00f4d 	mov	r0, #308	; 0x134
    ef78:	eb00703d 	bl	2b074 <operator new(unsigned int)>
    ef7c:	e1a01006 	mov	r1, r6
    ef80:	e1a05000 	mov	r5, r0
    ef84:	eb00093e 	bl	11484 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
    ef88:	eaffff65 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    ef8c:	e59f1190 	ldr	r1, [pc, #400]	; f124 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x440>
    ef90:	e1a00004 	mov	r0, r4
    ef94:	eb00635b 	bl	27d08 <CString::Compare(char const*) const>
    ef98:	e3500000 	cmp	r0, #0
    ef9c:	1a000005 	bne	efb8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2d4>
    efa0:	e3a0001c 	mov	r0, #28
    efa4:	eb007032 	bl	2b074 <operator new(unsigned int)>
    efa8:	e1a01006 	mov	r1, r6
    efac:	e1a05000 	mov	r5, r0
    efb0:	eb00148f 	bl	141f4 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    efb4:	eaffff5a 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    efb8:	e59f1168 	ldr	r1, [pc, #360]	; f128 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x444>
    efbc:	e1a00004 	mov	r0, r4
    efc0:	eb006350 	bl	27d08 <CString::Compare(char const*) const>
    efc4:	e3500000 	cmp	r0, #0
    efc8:	0afffff4 	beq	efa0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2bc>
    efcc:	e59f1158 	ldr	r1, [pc, #344]	; f12c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x448>
    efd0:	e1a00004 	mov	r0, r4
    efd4:	eb00634b 	bl	27d08 <CString::Compare(char const*) const>
    efd8:	e3500000 	cmp	r0, #0
    efdc:	1a000005 	bne	eff8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x314>
    efe0:	e3a00024 	mov	r0, #36	; 0x24
    efe4:	eb007022 	bl	2b074 <operator new(unsigned int)>
    efe8:	e1a01006 	mov	r1, r6
    efec:	e1a05000 	mov	r5, r0
    eff0:	eb001d32 	bl	164c0 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    eff4:	eaffff4a 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    eff8:	e59f1130 	ldr	r1, [pc, #304]	; f130 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x44c>
    effc:	e1a00004 	mov	r0, r4
    f000:	eb006340 	bl	27d08 <CString::Compare(char const*) const>
    f004:	e3500000 	cmp	r0, #0
    f008:	1a000005 	bne	f024 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x340>
    f00c:	e3a00024 	mov	r0, #36	; 0x24
    f010:	eb007017 	bl	2b074 <operator new(unsigned int)>
    f014:	e1a01006 	mov	r1, r6
    f018:	e1a05000 	mov	r5, r0
    f01c:	eb001990 	bl	15664 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
    f020:	eaffff3f 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f024:	e59f1108 	ldr	r1, [pc, #264]	; f134 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x450>
    f028:	e1a00004 	mov	r0, r4
    f02c:	eb006335 	bl	27d08 <CString::Compare(char const*) const>
    f030:	e3500000 	cmp	r0, #0
    f034:	1a000005 	bne	f050 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x36c>
    f038:	e3a00028 	mov	r0, #40	; 0x28
    f03c:	eb00700c 	bl	2b074 <operator new(unsigned int)>
    f040:	e1a01006 	mov	r1, r6
    f044:	e1a05000 	mov	r5, r0
    f048:	eb001f6a 	bl	16df8 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    f04c:	eaffff34 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f050:	e59f10e0 	ldr	r1, [pc, #224]	; f138 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x454>
    f054:	e1a00004 	mov	r0, r4
    f058:	eb00632a 	bl	27d08 <CString::Compare(char const*) const>
    f05c:	e3500000 	cmp	r0, #0
    f060:	0afffff4 	beq	f038 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x354>
    f064:	e59f10d0 	ldr	r1, [pc, #208]	; f13c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x458>
    f068:	e1a00004 	mov	r0, r4
    f06c:	eb006325 	bl	27d08 <CString::Compare(char const*) const>
    f070:	e3500000 	cmp	r0, #0
    f074:	1a000005 	bne	f090 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3ac>
    f078:	e3a00028 	mov	r0, #40	; 0x28
    f07c:	eb006ffc 	bl	2b074 <operator new(unsigned int)>
    f080:	e1a01006 	mov	r1, r6
    f084:	e1a05000 	mov	r5, r0
    f088:	eb0011f9 	bl	13874 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>
    f08c:	eaffff24 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f090:	e59f10a8 	ldr	r1, [pc, #168]	; f140 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x45c>
    f094:	e1a00004 	mov	r0, r4
    f098:	eb00631a 	bl	27d08 <CString::Compare(char const*) const>
    f09c:	e3500000 	cmp	r0, #0
    f0a0:	0afffff4 	beq	f078 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x394>
    f0a4:	e59f1098 	ldr	r1, [pc, #152]	; f144 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x460>
    f0a8:	e1a00004 	mov	r0, r4
    f0ac:	eb006315 	bl	27d08 <CString::Compare(char const*) const>
    f0b0:	e3500000 	cmp	r0, #0
    f0b4:	13a05000 	movne	r5, #0
    f0b8:	1affff23 	bne	ed4c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
    f0bc:	e3a00024 	mov	r0, #36	; 0x24
    f0c0:	eb006feb 	bl	2b074 <operator new(unsigned int)>
    f0c4:	e1a01006 	mov	r1, r6
    f0c8:	e1a05000 	mov	r5, r0
    f0cc:	eb002126 	bl	1756c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    f0d0:	eaffff13 	b	ed24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x40>
    f0d4:	00040040 	.word	0x00040040
    f0d8:	0004016c 	.word	0x0004016c
    f0dc:	0004004c 	.word	0x0004004c
    f0e0:	00040118 	.word	0x00040118
    f0e4:	00040058 	.word	0x00040058
    f0e8:	00040064 	.word	0x00040064
    f0ec:	00040018 	.word	0x00040018
    f0f0:	00040030 	.word	0x00040030
    f0f4:	0003fd1c 	.word	0x0003fd1c
    f0f8:	00040070 	.word	0x00040070
    f0fc:	0004007c 	.word	0x0004007c
    f100:	00040088 	.word	0x00040088
    f104:	00040094 	.word	0x00040094
    f108:	00040124 	.word	0x00040124
    f10c:	000400a0 	.word	0x000400a0
    f110:	00040130 	.word	0x00040130
    f114:	000400ac 	.word	0x000400ac
    f118:	000400b8 	.word	0x000400b8
    f11c:	000400c4 	.word	0x000400c4
    f120:	0004013c 	.word	0x0004013c
    f124:	000400d0 	.word	0x000400d0
    f128:	000400dc 	.word	0x000400dc
    f12c:	00040148 	.word	0x00040148
    f130:	000400e8 	.word	0x000400e8
    f134:	000400f4 	.word	0x000400f4
    f138:	00040100 	.word	0x00040100
    f13c:	00040154 	.word	0x00040154
    f140:	0004010c 	.word	0x0004010c
    f144:	00040160 	.word	0x00040160

0000f148 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    f148:	e3a02000 	mov	r2, #0
    f14c:	e92d4010 	push	{r4, lr}
    f150:	e3a0c001 	mov	ip, #1
    f154:	e3a0e008 	mov	lr, #8
    f158:	e1510002 	cmp	r1, r2
    f15c:	e5801000 	str	r1, [r0]
    f160:	e580e008 	str	lr, [r0, #8]
    f164:	e580c00c 	str	ip, [r0, #12]
    f168:	e5c02004 	strb	r2, [r0, #4]
    f16c:	e5c02005 	strb	r2, [r0, #5]
    f170:	e5c02006 	strb	r2, [r0, #6]
    f174:	e5c02010 	strb	r2, [r0, #16]
    f178:	18bd8010 	popne	{r4, pc}
    f17c:	e3a02023 	mov	r2, #35	; 0x23
    f180:	e59f1004 	ldr	r1, [pc, #4]	; f18c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x44>
    f184:	e59f0004 	ldr	r0, [pc, #4]	; f190 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x48>
    f188:	eb00559c 	bl	24800 <assertion_failed>
    f18c:	00040188 	.word	0x00040188
    f190:	0003fb38 	.word	0x0003fb38

0000f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    f194:	e92d4070 	push	{r4, r5, r6, lr}
    f198:	e3a05001 	mov	r5, #1
    f19c:	e3510000 	cmp	r1, #0
    f1a0:	e5801000 	str	r1, [r0]
    f1a4:	e580500c 	str	r5, [r0, #12]
    f1a8:	e5c05010 	strb	r5, [r0, #16]
    f1ac:	0a000041 	beq	f2b8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x124>
    f1b0:	e3520000 	cmp	r2, #0
    f1b4:	0a000043 	beq	f2c8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x134>
    f1b8:	e5d23000 	ldrb	r3, [r2]
    f1bc:	e3530006 	cmp	r3, #6
    f1c0:	9a000044 	bls	f2d8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x144>
    f1c4:	e5d23001 	ldrb	r3, [r2, #1]
    f1c8:	e3530005 	cmp	r3, #5
    f1cc:	1a000045 	bne	f2e8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x154>
    f1d0:	e5d23003 	ldrb	r3, [r2, #3]
    f1d4:	e1a04000 	mov	r4, r0
    f1d8:	e2033003 	and	r3, r3, #3
    f1dc:	e3530002 	cmp	r3, #2
    f1e0:	0a000022 	beq	f270 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xdc>
    f1e4:	e3530003 	cmp	r3, #3
    f1e8:	1a00002e 	bne	f2a8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x114>
    f1ec:	e3a03002 	mov	r3, #2
    f1f0:	e5c03005 	strb	r3, [r0, #5]
    f1f4:	e5d23002 	ldrb	r3, [r2, #2]
    f1f8:	e203000f 	and	r0, r3, #15
    f1fc:	e1a033a3 	lsr	r3, r3, #7
    f200:	e5c40004 	strb	r0, [r4, #4]
    f204:	e5c43006 	strb	r3, [r4, #6]
    f208:	e5d23004 	ldrb	r3, [r2, #4]
    f20c:	e5d20005 	ldrb	r0, [r2, #5]
    f210:	e1833400 	orr	r3, r3, r0, lsl #8
    f214:	e1a03a83 	lsl	r3, r3, #21
    f218:	e1a03aa3 	lsr	r3, r3, #21
    f21c:	e5843008 	str	r3, [r4, #8]
    f220:	e5d26006 	ldrb	r6, [r2, #6]
    f224:	e3560000 	cmp	r6, #0
    f228:	0a000032 	beq	f2f8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x164>
    f22c:	e1a00001 	mov	r0, r1
    f230:	ebfffc10 	bl	e278 <CUSBDevice::GetSpeed() const>
    f234:	e3500001 	cmp	r0, #1
    f238:	da000037 	ble	f31c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x188>
    f23c:	e3560010 	cmp	r6, #16
    f240:	c3a03a01 	movgt	r3, #4096	; 0x1000
    f244:	c584300c 	strgt	r3, [r4, #12]
    f248:	ca000014 	bgt	f2a0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x10c>
    f24c:	e2466001 	sub	r6, r6, #1
    f250:	e1a05615 	lsl	r5, r5, r6
    f254:	e1a061a5 	lsr	r6, r5, #3
    f258:	e3560000 	cmp	r6, #0
    f25c:	e584600c 	str	r6, [r4, #12]
    f260:	0a000028 	beq	f308 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x174>
    f264:	e3560013 	cmp	r6, #19
    f268:	9a000026 	bls	f308 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x174>
    f26c:	ea00000b 	b	f2a0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x10c>
    f270:	e5c05005 	strb	r5, [r0, #5]
    f274:	e5d23002 	ldrb	r3, [r2, #2]
    f278:	e203100f 	and	r1, r3, #15
    f27c:	e1a033a3 	lsr	r3, r3, #7
    f280:	e5c01004 	strb	r1, [r0, #4]
    f284:	e5c03006 	strb	r3, [r0, #6]
    f288:	e5d23004 	ldrb	r3, [r2, #4]
    f28c:	e5d22005 	ldrb	r2, [r2, #5]
    f290:	e1833402 	orr	r3, r3, r2, lsl #8
    f294:	e1a03a83 	lsl	r3, r3, #21
    f298:	e1a03aa3 	lsr	r3, r3, #21
    f29c:	e5803008 	str	r3, [r0, #8]
    f2a0:	e1a00004 	mov	r0, r4
    f2a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    f2a8:	e3a02043 	mov	r2, #67	; 0x43
    f2ac:	e59f1070 	ldr	r1, [pc, #112]	; f324 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    f2b0:	e59f0070 	ldr	r0, [pc, #112]	; f328 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x194>
    f2b4:	eb005551 	bl	24800 <assertion_failed>
    f2b8:	e3a02032 	mov	r2, #50	; 0x32
    f2bc:	e59f1060 	ldr	r1, [pc, #96]	; f324 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    f2c0:	e59f0064 	ldr	r0, [pc, #100]	; f32c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x198>
    f2c4:	eb00554d 	bl	24800 <assertion_failed>
    f2c8:	e3a02034 	mov	r2, #52	; 0x34
    f2cc:	e59f1050 	ldr	r1, [pc, #80]	; f324 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    f2d0:	e59f0058 	ldr	r0, [pc, #88]	; f330 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x19c>
    f2d4:	eb005549 	bl	24800 <assertion_failed>
    f2d8:	e3a02035 	mov	r2, #53	; 0x35
    f2dc:	e59f1040 	ldr	r1, [pc, #64]	; f324 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    f2e0:	e59f004c 	ldr	r0, [pc, #76]	; f334 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a0>
    f2e4:	eb005545 	bl	24800 <assertion_failed>
    f2e8:	e3a02036 	mov	r2, #54	; 0x36
    f2ec:	e59f1030 	ldr	r1, [pc, #48]	; f324 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    f2f0:	e59f0040 	ldr	r0, [pc, #64]	; f338 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1a4>
    f2f4:	eb005541 	bl	24800 <assertion_failed>
    f2f8:	e1a00001 	mov	r0, r1
    f2fc:	ebfffbdd 	bl	e278 <CUSBDevice::GetSpeed() const>
    f300:	e3500001 	cmp	r0, #1
    f304:	da000003 	ble	f318 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x184>
    f308:	e3a03014 	mov	r3, #20
    f30c:	e1a00004 	mov	r0, r4
    f310:	e584300c 	str	r3, [r4, #12]
    f314:	e8bd8070 	pop	{r4, r5, r6, pc}
    f318:	e1a06005 	mov	r6, r5
    f31c:	e584600c 	str	r6, [r4, #12]
    f320:	eaffffcf 	b	f264 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd0>
    f324:	00040188 	.word	0x00040188
    f328:	0003fd5c 	.word	0x0003fd5c
    f32c:	0003fb38 	.word	0x0003fb38
    f330:	00040198 	.word	0x00040198
    f334:	000401a4 	.word	0x000401a4
    f338:	000401c4 	.word	0x000401c4

0000f33c <CUSBEndpoint::~CUSBEndpoint()>:
    f33c:	e12fff1e 	bx	lr

0000f340 <CUSBEndpoint::GetDevice() const>:
    f340:	e5900000 	ldr	r0, [r0]
    f344:	e3500000 	cmp	r0, #0
    f348:	0a000000 	beq	f350 <CUSBEndpoint::GetDevice() const+0x10>
    f34c:	e12fff1e 	bx	lr
    f350:	e92d4010 	push	{r4, lr}
    f354:	e3a02086 	mov	r2, #134	; 0x86
    f358:	e59f1004 	ldr	r1, [pc, #4]	; f364 <CUSBEndpoint::GetDevice() const+0x24>
    f35c:	e59f0004 	ldr	r0, [pc, #4]	; f368 <CUSBEndpoint::GetDevice() const+0x28>
    f360:	eb005526 	bl	24800 <assertion_failed>
    f364:	00040188 	.word	0x00040188
    f368:	0003fb38 	.word	0x0003fb38

0000f36c <CUSBEndpoint::GetNumber() const>:
    f36c:	e5d00004 	ldrb	r0, [r0, #4]
    f370:	e12fff1e 	bx	lr

0000f374 <CUSBEndpoint::GetType() const>:
    f374:	e5d00005 	ldrb	r0, [r0, #5]
    f378:	e12fff1e 	bx	lr

0000f37c <CUSBEndpoint::IsDirectionIn() const>:
    f37c:	e5d00006 	ldrb	r0, [r0, #6]
    f380:	e12fff1e 	bx	lr

0000f384 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
    f384:	e5801008 	str	r1, [r0, #8]
    f388:	e3a00001 	mov	r0, #1
    f38c:	e12fff1e 	bx	lr

0000f390 <CUSBEndpoint::GetMaxPacketSize() const>:
    f390:	e5900008 	ldr	r0, [r0, #8]
    f394:	e12fff1e 	bx	lr

0000f398 <CUSBEndpoint::GetInterval() const>:
    f398:	e5d03005 	ldrb	r3, [r0, #5]
    f39c:	e3530002 	cmp	r3, #2
    f3a0:	1a000001 	bne	f3ac <CUSBEndpoint::GetInterval() const+0x14>
    f3a4:	e590000c 	ldr	r0, [r0, #12]
    f3a8:	e12fff1e 	bx	lr
    f3ac:	e92d4010 	push	{r4, lr}
    f3b0:	e3a020ae 	mov	r2, #174	; 0xae
    f3b4:	e59f1004 	ldr	r1, [pc, #4]	; f3c0 <CUSBEndpoint::GetInterval() const+0x28>
    f3b8:	e59f0004 	ldr	r0, [pc, #4]	; f3c4 <CUSBEndpoint::GetInterval() const+0x2c>
    f3bc:	eb00550f 	bl	24800 <assertion_failed>
    f3c0:	00040188 	.word	0x00040188
    f3c4:	000401f4 	.word	0x000401f4

0000f3c8 <CUSBEndpoint::GetNextPID(bool)>:
    f3c8:	e3510000 	cmp	r1, #0
    f3cc:	0a000004 	beq	f3e4 <CUSBEndpoint::GetNextPID(bool)+0x1c>
    f3d0:	e5d03005 	ldrb	r3, [r0, #5]
    f3d4:	e3530000 	cmp	r3, #0
    f3d8:	03a00002 	moveq	r0, #2
    f3dc:	1a000002 	bne	f3ec <CUSBEndpoint::GetNextPID(bool)+0x24>
    f3e0:	e12fff1e 	bx	lr
    f3e4:	e5d00010 	ldrb	r0, [r0, #16]
    f3e8:	e12fff1e 	bx	lr
    f3ec:	e92d4010 	push	{r4, lr}
    f3f0:	e3a020b7 	mov	r2, #183	; 0xb7
    f3f4:	e59f1004 	ldr	r1, [pc, #4]	; f400 <CUSBEndpoint::GetNextPID(bool)+0x38>
    f3f8:	e59f0004 	ldr	r0, [pc, #4]	; f404 <CUSBEndpoint::GetNextPID(bool)+0x3c>
    f3fc:	eb0054ff 	bl	24800 <assertion_failed>
    f400:	00040188 	.word	0x00040188
    f404:	00040214 	.word	0x00040214

0000f408 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
    f408:	e5d03005 	ldrb	r3, [r0, #5]
    f40c:	e92d4010 	push	{r4, lr}
    f410:	e3530002 	cmp	r3, #2
    f414:	8a000018 	bhi	f47c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x74>
    f418:	e3520000 	cmp	r2, #0
    f41c:	1a000009 	bne	f448 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x40>
    f420:	e5d03010 	ldrb	r3, [r0, #16]
    f424:	e3530001 	cmp	r3, #1
    f428:	0a00000e 	beq	f468 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x60>
    f42c:	3a00000f 	bcc	f470 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x68>
    f430:	e3530002 	cmp	r3, #2
    f434:	1a000007 	bne	f458 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x50>
    f438:	e3110001 	tst	r1, #1
    f43c:	13a03001 	movne	r3, #1
    f440:	15c03010 	strbne	r3, [r0, #16]
    f444:	e8bd8010 	pop	{r4, pc}
    f448:	e3530000 	cmp	r3, #0
    f44c:	1a00000e 	bne	f48c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x84>
    f450:	e5c03010 	strb	r3, [r0, #16]
    f454:	e8bd8010 	pop	{r4, pc}
    f458:	e3a020dc 	mov	r2, #220	; 0xdc
    f45c:	e59f1038 	ldr	r1, [pc, #56]	; f49c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x94>
    f460:	e59f0038 	ldr	r0, [pc, #56]	; f4a0 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x98>
    f464:	eb0054e5 	bl	24800 <assertion_failed>
    f468:	e3110001 	tst	r1, #1
    f46c:	08bd8010 	popeq	{r4, pc}
    f470:	e3a03002 	mov	r3, #2
    f474:	e5c03010 	strb	r3, [r0, #16]
    f478:	e8bd8010 	pop	{r4, pc}
    f47c:	e3a020c3 	mov	r2, #195	; 0xc3
    f480:	e59f1014 	ldr	r1, [pc, #20]	; f49c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x94>
    f484:	e59f0018 	ldr	r0, [pc, #24]	; f4a4 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x9c>
    f488:	eb0054dc 	bl	24800 <assertion_failed>
    f48c:	e3a020e2 	mov	r2, #226	; 0xe2
    f490:	e59f1004 	ldr	r1, [pc, #4]	; f49c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x94>
    f494:	e59f000c 	ldr	r0, [pc, #12]	; f4a8 <CUSBEndpoint::SkipPID(unsigned int, bool)+0xa0>
    f498:	eb0054d8 	bl	24800 <assertion_failed>
    f49c:	00040188 	.word	0x00040188
    f4a0:	0003fd5c 	.word	0x0003fd5c
    f4a4:	00040234 	.word	0x00040234
    f4a8:	00040214 	.word	0x00040214

0000f4ac <CUSBEndpoint::ResetPID()>:
    f4ac:	e5d03005 	ldrb	r3, [r0, #5]
    f4b0:	e3530001 	cmp	r3, #1
    f4b4:	1a000001 	bne	f4c0 <CUSBEndpoint::ResetPID()+0x14>
    f4b8:	e5c03010 	strb	r3, [r0, #16]
    f4bc:	e12fff1e 	bx	lr
    f4c0:	e92d4010 	push	{r4, lr}
    f4c4:	e3a020ed 	mov	r2, #237	; 0xed
    f4c8:	e59f1004 	ldr	r1, [pc, #4]	; f4d4 <CUSBEndpoint::ResetPID()+0x28>
    f4cc:	e59f0004 	ldr	r0, [pc, #4]	; f4d8 <CUSBEndpoint::ResetPID()+0x2c>
    f4d0:	eb0054ca 	bl	24800 <assertion_failed>
    f4d4:	00040188 	.word	0x00040188
    f4d8:	00040294 	.word	0x00040294

0000f4dc <CUSBFunction::Initialize()>:
    f4dc:	e3a00001 	mov	r0, #1
    f4e0:	e12fff1e 	bx	lr

0000f4e4 <CUSBFunction::ReScanDevices()>:
    f4e4:	e3a00000 	mov	r0, #0
    f4e8:	e12fff1e 	bx	lr

0000f4ec <CUSBFunction::~CUSBFunction()>:
    f4ec:	e3a03000 	mov	r3, #0
    f4f0:	e92d4070 	push	{r4, r5, r6, lr}
    f4f4:	e5905008 	ldr	r5, [r0, #8]
    f4f8:	e59f2040 	ldr	r2, [pc, #64]	; f540 <CUSBFunction::~CUSBFunction()+0x54>
    f4fc:	e1550003 	cmp	r5, r3
    f500:	e1a04000 	mov	r4, r0
    f504:	e5802000 	str	r2, [r0]
    f508:	e580300c 	str	r3, [r0, #12]
    f50c:	0a000004 	beq	f524 <CUSBFunction::~CUSBFunction()+0x38>
    f510:	e1a00005 	mov	r0, r5
    f514:	eb00215f 	bl	17a98 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    f518:	e1a00005 	mov	r0, r5
    f51c:	e3a0101c 	mov	r1, #28
    f520:	eb006ee1 	bl	2b0ac <operator delete(void*, unsigned int)>
    f524:	e3a03000 	mov	r3, #0
    f528:	e1a00004 	mov	r0, r4
    f52c:	e5843008 	str	r3, [r4, #8]
    f530:	e5843004 	str	r3, [r4, #4]
    f534:	eb005694 	bl	24f8c <CDevice::~CDevice()>
    f538:	e1a00004 	mov	r0, r4
    f53c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f540:	000402b8 	.word	0x000402b8

0000f544 <CUSBFunction::~CUSBFunction()>:
    f544:	e92d4010 	push	{r4, lr}
    f548:	e1a04000 	mov	r4, r0
    f54c:	ebffffe6 	bl	f4ec <CUSBFunction::~CUSBFunction()>
    f550:	e1a00004 	mov	r0, r4
    f554:	e3a01010 	mov	r1, #16
    f558:	eb006ed3 	bl	2b0ac <operator delete(void*, unsigned int)>
    f55c:	e1a00004 	mov	r0, r4
    f560:	e8bd8010 	pop	{r4, pc}

0000f564 <CUSBFunction::RemoveDevice()>:
    f564:	e5900004 	ldr	r0, [r0, #4]
    f568:	e3500000 	cmp	r0, #0
    f56c:	0a000000 	beq	f574 <CUSBFunction::RemoveDevice()+0x10>
    f570:	eafffa9e 	b	dff0 <CUSBDevice::RemoveDevice()>
    f574:	e92d4010 	push	{r4, lr}
    f578:	e3a02066 	mov	r2, #102	; 0x66
    f57c:	e59f1004 	ldr	r1, [pc, #4]	; f588 <CUSBFunction::RemoveDevice()+0x24>
    f580:	e59f0004 	ldr	r0, [pc, #4]	; f58c <CUSBFunction::RemoveDevice()+0x28>
    f584:	eb00549d 	bl	24800 <assertion_failed>
    f588:	000402e4 	.word	0x000402e4
    f58c:	0003fb38 	.word	0x0003fb38

0000f590 <CUSBFunction::Configure()>:
    f590:	e92d4070 	push	{r4, r5, r6, lr}
    f594:	e590300c 	ldr	r3, [r0, #12]
    f598:	e24dd010 	sub	sp, sp, #16
    f59c:	e3530000 	cmp	r3, #0
    f5a0:	0a000029 	beq	f64c <CUSBFunction::Configure()+0xbc>
    f5a4:	e5d33003 	ldrb	r3, [r3, #3]
    f5a8:	e3530000 	cmp	r3, #0
    f5ac:	0a000018 	beq	f614 <CUSBFunction::Configure()+0x84>
    f5b0:	e1a04000 	mov	r4, r0
    f5b4:	e5900004 	ldr	r0, [r0, #4]
    f5b8:	e3500000 	cmp	r0, #0
    f5bc:	0a00001e 	beq	f63c <CUSBFunction::Configure()+0xac>
    f5c0:	ebfffb41 	bl	e2cc <CUSBDevice::GetHost() const>
    f5c4:	e1a06000 	mov	r6, r0
    f5c8:	e5940004 	ldr	r0, [r4, #4]
    f5cc:	e3500000 	cmp	r0, #0
    f5d0:	0a000021 	beq	f65c <CUSBFunction::Configure()+0xcc>
    f5d4:	e3a05000 	mov	r5, #0
    f5d8:	ebfffb30 	bl	e2a0 <CUSBDevice::GetEndpoint0() const>
    f5dc:	e594300c 	ldr	r3, [r4, #12]
    f5e0:	e58d500c 	str	r5, [sp, #12]
    f5e4:	e58d5008 	str	r5, [sp, #8]
    f5e8:	e5d32002 	ldrb	r2, [r3, #2]
    f5ec:	e1a01000 	mov	r1, r0
    f5f0:	e58d2004 	str	r2, [sp, #4]
    f5f4:	e5d33003 	ldrb	r3, [r3, #3]
    f5f8:	e1a00006 	mov	r0, r6
    f5fc:	e58d3000 	str	r3, [sp]
    f600:	e3a02001 	mov	r2, #1
    f604:	e3a0300b 	mov	r3, #11
    f608:	eb000c8c 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    f60c:	e1500005 	cmp	r0, r5
    f610:	ba000002 	blt	f620 <CUSBFunction::Configure()+0x90>
    f614:	e3a00001 	mov	r0, #1
    f618:	e28dd010 	add	sp, sp, #16
    f61c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f620:	eb005d69 	bl	26bcc <CLogger::Get()>
    f624:	e59f3040 	ldr	r3, [pc, #64]	; f66c <CUSBFunction::Configure()+0xdc>
    f628:	e3a02001 	mov	r2, #1
    f62c:	e59f103c 	ldr	r1, [pc, #60]	; f670 <CUSBFunction::Configure()+0xe0>
    f630:	eb005ca2 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f634:	e1a00005 	mov	r0, r5
    f638:	eafffff6 	b	f618 <CUSBFunction::Configure()+0x88>
    f63c:	e3a02090 	mov	r2, #144	; 0x90
    f640:	e59f102c 	ldr	r1, [pc, #44]	; f674 <CUSBFunction::Configure()+0xe4>
    f644:	e59f002c 	ldr	r0, [pc, #44]	; f678 <CUSBFunction::Configure()+0xe8>
    f648:	eb00546c 	bl	24800 <assertion_failed>
    f64c:	e3a0204e 	mov	r2, #78	; 0x4e
    f650:	e59f101c 	ldr	r1, [pc, #28]	; f674 <CUSBFunction::Configure()+0xe4>
    f654:	e59f0020 	ldr	r0, [pc, #32]	; f67c <CUSBFunction::Configure()+0xec>
    f658:	eb005468 	bl	24800 <assertion_failed>
    f65c:	e3a0208a 	mov	r2, #138	; 0x8a
    f660:	e59f100c 	ldr	r1, [pc, #12]	; f674 <CUSBFunction::Configure()+0xe4>
    f664:	e59f000c 	ldr	r0, [pc, #12]	; f678 <CUSBFunction::Configure()+0xe8>
    f668:	eb005464 	bl	24800 <assertion_failed>
    f66c:	0004030c 	.word	0x0004030c
    f670:	000402dc 	.word	0x000402dc
    f674:	000402e4 	.word	0x000402e4
    f678:	0003fb38 	.word	0x0003fb38
    f67c:	000402f4 	.word	0x000402f4

0000f680 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
    f680:	e92d4070 	push	{r4, r5, r6, lr}
    f684:	e1a04000 	mov	r4, r0
    f688:	e1a05001 	mov	r5, r1
    f68c:	e1a06002 	mov	r6, r2
    f690:	eb00564b 	bl	24fc4 <CDevice::CDevice()>
    f694:	e3a03000 	mov	r3, #0
    f698:	e59f207c 	ldr	r2, [pc, #124]	; f71c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x9c>
    f69c:	e1550003 	cmp	r5, r3
    f6a0:	e8840024 	stm	r4, {r2, r5}
    f6a4:	e5843008 	str	r3, [r4, #8]
    f6a8:	e584300c 	str	r3, [r4, #12]
    f6ac:	0a00000e 	beq	f6ec <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x6c>
    f6b0:	e3560000 	cmp	r6, #0
    f6b4:	0a000010 	beq	f6fc <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x7c>
    f6b8:	e3a0001c 	mov	r0, #28
    f6bc:	eb006e6c 	bl	2b074 <operator new(unsigned int)>
    f6c0:	e1a05000 	mov	r5, r0
    f6c4:	e1a01006 	mov	r1, r6
    f6c8:	eb0020db 	bl	17a3c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    f6cc:	e5845008 	str	r5, [r4, #8]
    f6d0:	e1a00005 	mov	r0, r5
    f6d4:	eb00212e 	bl	17b94 <CUSBConfigurationParser::GetCurrentDescriptor()>
    f6d8:	e3500000 	cmp	r0, #0
    f6dc:	e584000c 	str	r0, [r4, #12]
    f6e0:	0a000009 	beq	f70c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x8c>
    f6e4:	e1a00004 	mov	r0, r4
    f6e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f6ec:	e3a02022 	mov	r2, #34	; 0x22
    f6f0:	e59f1028 	ldr	r1, [pc, #40]	; f720 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f6f4:	e59f0028 	ldr	r0, [pc, #40]	; f724 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa4>
    f6f8:	eb005440 	bl	24800 <assertion_failed>
    f6fc:	e3a02024 	mov	r2, #36	; 0x24
    f700:	e59f1018 	ldr	r1, [pc, #24]	; f720 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f704:	e59f001c 	ldr	r0, [pc, #28]	; f728 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa8>
    f708:	eb00543c 	bl	24800 <assertion_failed>
    f70c:	e3a02029 	mov	r2, #41	; 0x29
    f710:	e59f1008 	ldr	r1, [pc, #8]	; f720 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
    f714:	e59f0010 	ldr	r0, [pc, #16]	; f72c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xac>
    f718:	eb005438 	bl	24800 <assertion_failed>
    f71c:	000402b8 	.word	0x000402b8
    f720:	000402e4 	.word	0x000402e4
    f724:	0003fb38 	.word	0x0003fb38
    f728:	00040324 	.word	0x00040324
    f72c:	000402f4 	.word	0x000402f4

0000f730 <CUSBFunction::CUSBFunction(CUSBFunction*)>:
    f730:	e92d4070 	push	{r4, r5, r6, lr}
    f734:	e1a04000 	mov	r4, r0
    f738:	e1a05001 	mov	r5, r1
    f73c:	eb005620 	bl	24fc4 <CDevice::CDevice()>
    f740:	e3a03000 	mov	r3, #0
    f744:	e59f20a0 	ldr	r2, [pc, #160]	; f7ec <CUSBFunction::CUSBFunction(CUSBFunction*)+0xbc>
    f748:	e1550003 	cmp	r5, r3
    f74c:	e884000c 	stm	r4, {r2, r3}
    f750:	e5843008 	str	r3, [r4, #8]
    f754:	e584300c 	str	r3, [r4, #12]
    f758:	0a000013 	beq	f7ac <CUSBFunction::CUSBFunction(CUSBFunction*)+0x7c>
    f75c:	e5953004 	ldr	r3, [r5, #4]
    f760:	e3530000 	cmp	r3, #0
    f764:	e5843004 	str	r3, [r4, #4]
    f768:	0a000013 	beq	f7bc <CUSBFunction::CUSBFunction(CUSBFunction*)+0x8c>
    f76c:	e5953008 	ldr	r3, [r5, #8]
    f770:	e3530000 	cmp	r3, #0
    f774:	0a000014 	beq	f7cc <CUSBFunction::CUSBFunction(CUSBFunction*)+0x9c>
    f778:	e3a0001c 	mov	r0, #28
    f77c:	eb006e3c 	bl	2b074 <operator new(unsigned int)>
    f780:	e1a06000 	mov	r6, r0
    f784:	e5951008 	ldr	r1, [r5, #8]
    f788:	eb0020ab 	bl	17a3c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
    f78c:	e5846008 	str	r6, [r4, #8]
    f790:	e1a00006 	mov	r0, r6
    f794:	eb0020fe 	bl	17b94 <CUSBConfigurationParser::GetCurrentDescriptor()>
    f798:	e3500000 	cmp	r0, #0
    f79c:	e584000c 	str	r0, [r4, #12]
    f7a0:	0a00000d 	beq	f7dc <CUSBFunction::CUSBFunction(CUSBFunction*)+0xac>
    f7a4:	e1a00004 	mov	r0, r4
    f7a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    f7ac:	e3a02031 	mov	r2, #49	; 0x31
    f7b0:	e59f1038 	ldr	r1, [pc, #56]	; f7f0 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f7b4:	e59f0038 	ldr	r0, [pc, #56]	; f7f4 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc4>
    f7b8:	eb005410 	bl	24800 <assertion_failed>
    f7bc:	e3a02033 	mov	r2, #51	; 0x33
    f7c0:	e59f1028 	ldr	r1, [pc, #40]	; f7f0 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f7c4:	e59f002c 	ldr	r0, [pc, #44]	; f7f8 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc8>
    f7c8:	eb00540c 	bl	24800 <assertion_failed>
    f7cc:	e3a02035 	mov	r2, #53	; 0x35
    f7d0:	e59f1018 	ldr	r1, [pc, #24]	; f7f0 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f7d4:	e59f0020 	ldr	r0, [pc, #32]	; f7fc <CUSBFunction::CUSBFunction(CUSBFunction*)+0xcc>
    f7d8:	eb005408 	bl	24800 <assertion_failed>
    f7dc:	e3a0203a 	mov	r2, #58	; 0x3a
    f7e0:	e59f1008 	ldr	r1, [pc, #8]	; f7f0 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
    f7e4:	e59f0014 	ldr	r0, [pc, #20]	; f800 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xd0>
    f7e8:	eb005404 	bl	24800 <assertion_failed>
    f7ec:	000402b8 	.word	0x000402b8
    f7f0:	000402e4 	.word	0x000402e4
    f7f4:	00040338 	.word	0x00040338
    f7f8:	0003fb38 	.word	0x0003fb38
    f7fc:	00040348 	.word	0x00040348
    f800:	000402f4 	.word	0x000402f4

0000f804 <CUSBFunction::GetInterfaceName() const>:
    f804:	e92d4030 	push	{r4, r5, lr}
    f808:	e1a05000 	mov	r5, r0
    f80c:	e24dd00c 	sub	sp, sp, #12
    f810:	e3a00010 	mov	r0, #16
    f814:	eb006e16 	bl	2b074 <operator new(unsigned int)>
    f818:	e59f1048 	ldr	r1, [pc, #72]	; f868 <CUSBFunction::GetInterfaceName() const+0x64>
    f81c:	e1a04000 	mov	r4, r0
    f820:	eb0060d5 	bl	27b7c <CString::CString(char const*)>
    f824:	e595100c 	ldr	r1, [r5, #12]
    f828:	e3510000 	cmp	r1, #0
    f82c:	0a00000a 	beq	f85c <CUSBFunction::GetInterfaceName() const+0x58>
    f830:	e5d12005 	ldrb	r2, [r1, #5]
    f834:	e2423001 	sub	r3, r2, #1
    f838:	e6ef3073 	uxtb	r3, r3
    f83c:	e35300fd 	cmp	r3, #253	; 0xfd
    f840:	8a000005 	bhi	f85c <CUSBFunction::GetInterfaceName() const+0x58>
    f844:	e5d13006 	ldrb	r3, [r1, #6]
    f848:	e5d11007 	ldrb	r1, [r1, #7]
    f84c:	e1a00004 	mov	r0, r4
    f850:	e58d1000 	str	r1, [sp]
    f854:	e59f1010 	ldr	r1, [pc, #16]	; f86c <CUSBFunction::GetInterfaceName() const+0x68>
    f858:	eb006604 	bl	29070 <CString::Format(char const*, ...)>
    f85c:	e1a00004 	mov	r0, r4
    f860:	e28dd00c 	add	sp, sp, #12
    f864:	e8bd8030 	pop	{r4, r5, pc}
    f868:	0003fd14 	.word	0x0003fd14
    f86c:	00040368 	.word	0x00040368

0000f870 <CUSBFunction::GetNumEndpoints() const>:
    f870:	e590300c 	ldr	r3, [r0, #12]
    f874:	e3530000 	cmp	r3, #0
    f878:	0a000001 	beq	f884 <CUSBFunction::GetNumEndpoints() const+0x14>
    f87c:	e5d30004 	ldrb	r0, [r3, #4]
    f880:	e12fff1e 	bx	lr
    f884:	e92d4010 	push	{r4, lr}
    f888:	e3a0207e 	mov	r2, #126	; 0x7e
    f88c:	e59f1004 	ldr	r1, [pc, #4]	; f898 <CUSBFunction::GetNumEndpoints() const+0x28>
    f890:	e59f0004 	ldr	r0, [pc, #4]	; f89c <CUSBFunction::GetNumEndpoints() const+0x2c>
    f894:	eb0053d9 	bl	24800 <assertion_failed>
    f898:	000402e4 	.word	0x000402e4
    f89c:	000402f4 	.word	0x000402f4

0000f8a0 <CUSBFunction::GetDevice() const>:
    f8a0:	e5900004 	ldr	r0, [r0, #4]
    f8a4:	e3500000 	cmp	r0, #0
    f8a8:	0a000000 	beq	f8b0 <CUSBFunction::GetDevice() const+0x10>
    f8ac:	e12fff1e 	bx	lr
    f8b0:	e92d4010 	push	{r4, lr}
    f8b4:	e3a02084 	mov	r2, #132	; 0x84
    f8b8:	e59f1004 	ldr	r1, [pc, #4]	; f8c4 <CUSBFunction::GetDevice() const+0x24>
    f8bc:	e59f0004 	ldr	r0, [pc, #4]	; f8c8 <CUSBFunction::GetDevice() const+0x28>
    f8c0:	eb0053ce 	bl	24800 <assertion_failed>
    f8c4:	000402e4 	.word	0x000402e4
    f8c8:	0003fb38 	.word	0x0003fb38

0000f8cc <CUSBFunction::GetEndpoint0() const>:
    f8cc:	e5900004 	ldr	r0, [r0, #4]
    f8d0:	e3500000 	cmp	r0, #0
    f8d4:	0a000000 	beq	f8dc <CUSBFunction::GetEndpoint0() const+0x10>
    f8d8:	eafffa70 	b	e2a0 <CUSBDevice::GetEndpoint0() const>
    f8dc:	e92d4010 	push	{r4, lr}
    f8e0:	e3a0208a 	mov	r2, #138	; 0x8a
    f8e4:	e59f1004 	ldr	r1, [pc, #4]	; f8f0 <CUSBFunction::GetEndpoint0() const+0x24>
    f8e8:	e59f0004 	ldr	r0, [pc, #4]	; f8f4 <CUSBFunction::GetEndpoint0() const+0x28>
    f8ec:	eb0053c3 	bl	24800 <assertion_failed>
    f8f0:	000402e4 	.word	0x000402e4
    f8f4:	0003fb38 	.word	0x0003fb38

0000f8f8 <CUSBFunction::GetHost() const>:
    f8f8:	e5900004 	ldr	r0, [r0, #4]
    f8fc:	e3500000 	cmp	r0, #0
    f900:	0a000000 	beq	f908 <CUSBFunction::GetHost() const+0x10>
    f904:	eafffa70 	b	e2cc <CUSBDevice::GetHost() const>
    f908:	e92d4010 	push	{r4, lr}
    f90c:	e3a02090 	mov	r2, #144	; 0x90
    f910:	e59f1004 	ldr	r1, [pc, #4]	; f91c <CUSBFunction::GetHost() const+0x24>
    f914:	e59f0004 	ldr	r0, [pc, #4]	; f920 <CUSBFunction::GetHost() const+0x28>
    f918:	eb0053b8 	bl	24800 <assertion_failed>
    f91c:	000402e4 	.word	0x000402e4
    f920:	0003fb38 	.word	0x0003fb38

0000f924 <CUSBFunction::GetDescriptor(unsigned char)>:
    f924:	e5900008 	ldr	r0, [r0, #8]
    f928:	e3500000 	cmp	r0, #0
    f92c:	0a000000 	beq	f934 <CUSBFunction::GetDescriptor(unsigned char)+0x10>
    f930:	ea00205b 	b	17aa4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    f934:	e92d4010 	push	{r4, lr}
    f938:	e3a02096 	mov	r2, #150	; 0x96
    f93c:	e59f1004 	ldr	r1, [pc, #4]	; f948 <CUSBFunction::GetDescriptor(unsigned char)+0x24>
    f940:	e59f0004 	ldr	r0, [pc, #4]	; f94c <CUSBFunction::GetDescriptor(unsigned char)+0x28>
    f944:	eb0053ad 	bl	24800 <assertion_failed>
    f948:	000402e4 	.word	0x000402e4
    f94c:	0003fd74 	.word	0x0003fd74

0000f950 <CUSBFunction::ConfigurationError(char const*) const>:
    f950:	e5900008 	ldr	r0, [r0, #8]
    f954:	e92d4010 	push	{r4, lr}
    f958:	e3500000 	cmp	r0, #0
    f95c:	0a000003 	beq	f970 <CUSBFunction::ConfigurationError(char const*) const+0x20>
    f960:	e3510000 	cmp	r1, #0
    f964:	0a000005 	beq	f980 <CUSBFunction::ConfigurationError(char const*) const+0x30>
    f968:	e8bd4010 	pop	{r4, lr}
    f96c:	ea00209a 	b	17bdc <CUSBConfigurationParser::Error(char const*) const>
    f970:	e3a0209c 	mov	r2, #156	; 0x9c
    f974:	e59f1014 	ldr	r1, [pc, #20]	; f990 <CUSBFunction::ConfigurationError(char const*) const+0x40>
    f978:	e59f0014 	ldr	r0, [pc, #20]	; f994 <CUSBFunction::ConfigurationError(char const*) const+0x44>
    f97c:	eb00539f 	bl	24800 <assertion_failed>
    f980:	e3a0209d 	mov	r2, #157	; 0x9d
    f984:	e59f1004 	ldr	r1, [pc, #4]	; f990 <CUSBFunction::ConfigurationError(char const*) const+0x40>
    f988:	e59f0008 	ldr	r0, [pc, #8]	; f998 <CUSBFunction::ConfigurationError(char const*) const+0x48>
    f98c:	eb00539b 	bl	24800 <assertion_failed>
    f990:	000402e4 	.word	0x000402e4
    f994:	0003fd74 	.word	0x0003fd74
    f998:	00040374 	.word	0x00040374

0000f99c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
    f99c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f9a0:	e1a04000 	mov	r4, r0
    f9a4:	e590000c 	ldr	r0, [r0, #12]
    f9a8:	e3500000 	cmp	r0, #0
    f9ac:	0a00001f 	beq	fa30 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x94>
    f9b0:	e1a08003 	mov	r8, r3
    f9b4:	e5943008 	ldr	r3, [r4, #8]
    f9b8:	e3530000 	cmp	r3, #0
    f9bc:	0a00001f 	beq	fa40 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xa4>
    f9c0:	e5943004 	ldr	r3, [r4, #4]
    f9c4:	e3530000 	cmp	r3, #0
    f9c8:	11a06001 	movne	r6, r1
    f9cc:	11a07002 	movne	r7, r2
    f9d0:	13a05004 	movne	r5, #4
    f9d4:	1a000009 	bne	fa00 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x64>
    f9d8:	ea00001c 	b	fa50 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xb4>
    f9dc:	e1a01005 	mov	r1, r5
    f9e0:	e5940004 	ldr	r0, [r4, #4]
    f9e4:	ebfffa5b 	bl	e358 <CUSBDevice::GetDescriptor(unsigned char)>
    f9e8:	e1a01005 	mov	r1, r5
    f9ec:	e5940008 	ldr	r0, [r4, #8]
    f9f0:	eb00202b 	bl	17aa4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    f9f4:	e3500000 	cmp	r0, #0
    f9f8:	e584000c 	str	r0, [r4, #12]
    f9fc:	0a00000a 	beq	fa2c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x90>
    fa00:	e5d03005 	ldrb	r3, [r0, #5]
    fa04:	e1530006 	cmp	r3, r6
    fa08:	1afffff3 	bne	f9dc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
    fa0c:	e5d03006 	ldrb	r3, [r0, #6]
    fa10:	e1530007 	cmp	r3, r7
    fa14:	1afffff0 	bne	f9dc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
    fa18:	e5d03007 	ldrb	r3, [r0, #7]
    fa1c:	e1530008 	cmp	r3, r8
    fa20:	1affffed 	bne	f9dc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x40>
    fa24:	e3a00001 	mov	r0, #1
    fa28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fa2c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    fa30:	e3a020a3 	mov	r2, #163	; 0xa3
    fa34:	e59f1024 	ldr	r1, [pc, #36]	; fa60 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    fa38:	e59f0024 	ldr	r0, [pc, #36]	; fa64 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc8>
    fa3c:	eb00536f 	bl	24800 <assertion_failed>
    fa40:	e3a020a4 	mov	r2, #164	; 0xa4
    fa44:	e59f1014 	ldr	r1, [pc, #20]	; fa60 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    fa48:	e59f0018 	ldr	r0, [pc, #24]	; fa68 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xcc>
    fa4c:	eb00536b 	bl	24800 <assertion_failed>
    fa50:	e3a020a5 	mov	r2, #165	; 0xa5
    fa54:	e59f1004 	ldr	r1, [pc, #4]	; fa60 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xc4>
    fa58:	e59f000c 	ldr	r0, [pc, #12]	; fa6c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xd0>
    fa5c:	eb005367 	bl	24800 <assertion_failed>
    fa60:	000402e4 	.word	0x000402e4
    fa64:	000402f4 	.word	0x000402f4
    fa68:	0003fd74 	.word	0x0003fd74
    fa6c:	0003fb38 	.word	0x0003fb38

0000fa70 <CUSBFunction::GetInterfaceNumber() const>:
    fa70:	e590300c 	ldr	r3, [r0, #12]
    fa74:	e3530000 	cmp	r3, #0
    fa78:	0a000001 	beq	fa84 <CUSBFunction::GetInterfaceNumber() const+0x14>
    fa7c:	e5d30002 	ldrb	r0, [r3, #2]
    fa80:	e12fff1e 	bx	lr
    fa84:	e92d4010 	push	{r4, lr}
    fa88:	e3a020bb 	mov	r2, #187	; 0xbb
    fa8c:	e59f1004 	ldr	r1, [pc, #4]	; fa98 <CUSBFunction::GetInterfaceNumber() const+0x28>
    fa90:	e59f0004 	ldr	r0, [pc, #4]	; fa9c <CUSBFunction::GetInterfaceNumber() const+0x2c>
    fa94:	eb005359 	bl	24800 <assertion_failed>
    fa98:	000402e4 	.word	0x000402e4
    fa9c:	000402f4 	.word	0x000402f4

0000faa0 <CUSBFunction::GetInterfaceClass() const>:
    faa0:	e590300c 	ldr	r3, [r0, #12]
    faa4:	e3530000 	cmp	r3, #0
    faa8:	0a000001 	beq	fab4 <CUSBFunction::GetInterfaceClass() const+0x14>
    faac:	e5d30005 	ldrb	r0, [r3, #5]
    fab0:	e12fff1e 	bx	lr
    fab4:	e92d4010 	push	{r4, lr}
    fab8:	e3a020c1 	mov	r2, #193	; 0xc1
    fabc:	e59f1004 	ldr	r1, [pc, #4]	; fac8 <CUSBFunction::GetInterfaceClass() const+0x28>
    fac0:	e59f0004 	ldr	r0, [pc, #4]	; facc <CUSBFunction::GetInterfaceClass() const+0x2c>
    fac4:	eb00534d 	bl	24800 <assertion_failed>
    fac8:	000402e4 	.word	0x000402e4
    facc:	000402f4 	.word	0x000402f4

0000fad0 <CUSBFunction::GetInterfaceSubClass() const>:
    fad0:	e590300c 	ldr	r3, [r0, #12]
    fad4:	e3530000 	cmp	r3, #0
    fad8:	0a000001 	beq	fae4 <CUSBFunction::GetInterfaceSubClass() const+0x14>
    fadc:	e5d30006 	ldrb	r0, [r3, #6]
    fae0:	e12fff1e 	bx	lr
    fae4:	e92d4010 	push	{r4, lr}
    fae8:	e3a020c7 	mov	r2, #199	; 0xc7
    faec:	e59f1004 	ldr	r1, [pc, #4]	; faf8 <CUSBFunction::GetInterfaceSubClass() const+0x28>
    faf0:	e59f0004 	ldr	r0, [pc, #4]	; fafc <CUSBFunction::GetInterfaceSubClass() const+0x2c>
    faf4:	eb005341 	bl	24800 <assertion_failed>
    faf8:	000402e4 	.word	0x000402e4
    fafc:	000402f4 	.word	0x000402f4

0000fb00 <CUSBFunction::GetInterfaceProtocol() const>:
    fb00:	e590300c 	ldr	r3, [r0, #12]
    fb04:	e3530000 	cmp	r3, #0
    fb08:	0a000001 	beq	fb14 <CUSBFunction::GetInterfaceProtocol() const+0x14>
    fb0c:	e5d30007 	ldrb	r0, [r3, #7]
    fb10:	e12fff1e 	bx	lr
    fb14:	e92d4010 	push	{r4, lr}
    fb18:	e3a020cd 	mov	r2, #205	; 0xcd
    fb1c:	e59f1004 	ldr	r1, [pc, #4]	; fb28 <CUSBFunction::GetInterfaceProtocol() const+0x28>
    fb20:	e59f0004 	ldr	r0, [pc, #4]	; fb2c <CUSBFunction::GetInterfaceProtocol() const+0x2c>
    fb24:	eb005335 	bl	24800 <assertion_failed>
    fb28:	000402e4 	.word	0x000402e4
    fb2c:	000402f4 	.word	0x000402f4

0000fb30 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    fb30:	e92d4010 	push	{r4, lr}
    fb34:	e1a04000 	mov	r4, r0
    fb38:	e59f300c 	ldr	r3, [pc, #12]	; fb4c <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
    fb3c:	e5803000 	str	r3, [r0]
    fb40:	eb000375 	bl	1091c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    fb44:	e1a00004 	mov	r0, r4
    fb48:	e8bd8010 	pop	{r4, pc}
    fb4c:	0004038c 	.word	0x0004038c

0000fb50 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
    fb50:	e92d4010 	push	{r4, lr}
    fb54:	e1a04000 	mov	r4, r0
    fb58:	e59f3018 	ldr	r3, [pc, #24]	; fb78 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
    fb5c:	e5803000 	str	r3, [r0]
    fb60:	eb00036d 	bl	1091c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
    fb64:	e1a00004 	mov	r0, r4
    fb68:	e3a01f5b 	mov	r1, #364	; 0x16c
    fb6c:	eb006d4e 	bl	2b0ac <operator delete(void*, unsigned int)>
    fb70:	e1a00004 	mov	r0, r4
    fb74:	e8bd8010 	pop	{r4, pc}
    fb78:	0004038c 	.word	0x0004038c

0000fb7c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
    fb7c:	e92d4070 	push	{r4, r5, r6, lr}
    fb80:	e1a05001 	mov	r5, r1
    fb84:	e24dd040 	sub	sp, sp, #64	; 0x40
    fb88:	e2801f4f 	add	r1, r0, #316	; 0x13c
    fb8c:	e1a04000 	mov	r4, r0
    fb90:	e3a02030 	mov	r2, #48	; 0x30
    fb94:	e28d0010 	add	r0, sp, #16
    fb98:	eb006b5c 	bl	2a910 <memcpy>
    fb9c:	e3550001 	cmp	r5, #1
    fba0:	0a00002c 	beq	fc58 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xdc>
    fba4:	3a000025 	bcc	fc40 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xc4>
    fba8:	e3550002 	cmp	r5, #2
    fbac:	1a00001f 	bne	fc30 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xb4>
    fbb0:	e3e03001 	mvn	r3, #1
    fbb4:	e3a01000 	mov	r1, #0
    fbb8:	e3e02000 	mvn	r2, #0
    fbbc:	e5cd3011 	strb	r3, [sp, #17]
    fbc0:	e5cd3013 	strb	r3, [sp, #19]
    fbc4:	e5cd1012 	strb	r1, [sp, #18]
    fbc8:	e5cd2014 	strb	r2, [sp, #20]
    fbcc:	e1a00004 	mov	r0, r4
    fbd0:	ebffff48 	bl	f8f8 <CUSBFunction::GetHost() const>
    fbd4:	e1a05000 	mov	r5, r0
    fbd8:	e1a00004 	mov	r0, r4
    fbdc:	ebffff3a 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
    fbe0:	e1a06000 	mov	r6, r0
    fbe4:	e1a00004 	mov	r0, r4
    fbe8:	ebffffa0 	bl	fa70 <CUSBFunction::GetInterfaceNumber() const>
    fbec:	e3a02030 	mov	r2, #48	; 0x30
    fbf0:	e59f3080 	ldr	r3, [pc, #128]	; fc78 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xfc>
    fbf4:	e28dc010 	add	ip, sp, #16
    fbf8:	e6ff0070 	uxth	r0, r0
    fbfc:	e58d0004 	str	r0, [sp, #4]
    fc00:	e58d200c 	str	r2, [sp, #12]
    fc04:	e58d3000 	str	r3, [sp]
    fc08:	e1a01006 	mov	r1, r6
    fc0c:	e1a00005 	mov	r0, r5
    fc10:	e58dc008 	str	ip, [sp, #8]
    fc14:	e3a03009 	mov	r3, #9
    fc18:	e3a02021 	mov	r2, #33	; 0x21
    fc1c:	eb000b07 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fc20:	e1e00000 	mvn	r0, r0
    fc24:	e1a00fa0 	lsr	r0, r0, #31
    fc28:	e28dd040 	add	sp, sp, #64	; 0x40
    fc2c:	e8bd8070 	pop	{r4, r5, r6, pc}
    fc30:	e59f2044 	ldr	r2, [pc, #68]	; fc7c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x100>
    fc34:	e59f1044 	ldr	r1, [pc, #68]	; fc80 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x104>
    fc38:	e59f0044 	ldr	r0, [pc, #68]	; fc84 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x108>
    fc3c:	eb0052ef 	bl	24800 <assertion_failed>
    fc40:	e3a03000 	mov	r3, #0
    fc44:	e5cd3011 	strb	r3, [sp, #17]
    fc48:	e5cd3012 	strb	r3, [sp, #18]
    fc4c:	e5cd3013 	strb	r3, [sp, #19]
    fc50:	e5cd3014 	strb	r3, [sp, #20]
    fc54:	eaffffdc 	b	fbcc <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
    fc58:	e3e03001 	mvn	r3, #1
    fc5c:	e3e01000 	mvn	r1, #0
    fc60:	e3a02000 	mov	r2, #0
    fc64:	e5cd3011 	strb	r3, [sp, #17]
    fc68:	e5cd3013 	strb	r3, [sp, #19]
    fc6c:	e5cd1012 	strb	r1, [sp, #18]
    fc70:	e5cd2014 	strb	r2, [sp, #20]
    fc74:	eaffffd4 	b	fbcc <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
    fc78:	00000201 	.word	0x00000201
    fc7c:	0000010e 	.word	0x0000010e
    fc80:	00040448 	.word	0x00040448
    fc84:	0003fd5c 	.word	0x0003fd5c

0000fc88 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
    fc88:	e351000a 	cmp	r1, #10
    fc8c:	9a000001 	bls	fc98 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
    fc90:	e3a00000 	mov	r0, #0
    fc94:	e12fff1e 	bx	lr
    fc98:	e59f3078 	ldr	r3, [pc, #120]	; fd18 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x90>
    fc9c:	e92d4070 	push	{r4, r5, r6, lr}
    fca0:	e0831001 	add	r1, r3, r1
    fca4:	e5d1304c 	ldrb	r3, [r1, #76]	; 0x4c
    fca8:	e24dd010 	sub	sp, sp, #16
    fcac:	e1a03083 	lsl	r3, r3, #1
    fcb0:	e5c03145 	strb	r3, [r0, #325]	; 0x145
    fcb4:	e1a04000 	mov	r4, r0
    fcb8:	ebffff0e 	bl	f8f8 <CUSBFunction::GetHost() const>
    fcbc:	e1a05000 	mov	r5, r0
    fcc0:	e1a00004 	mov	r0, r4
    fcc4:	ebffff00 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
    fcc8:	e1a06000 	mov	r6, r0
    fccc:	e1a00004 	mov	r0, r4
    fcd0:	ebffff66 	bl	fa70 <CUSBFunction::GetInterfaceNumber() const>
    fcd4:	e3a02030 	mov	r2, #48	; 0x30
    fcd8:	e59f303c 	ldr	r3, [pc, #60]	; fd1c <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x94>
    fcdc:	e6ff0070 	uxth	r0, r0
    fce0:	e2844f4f 	add	r4, r4, #316	; 0x13c
    fce4:	e58d0004 	str	r0, [sp, #4]
    fce8:	e58d200c 	str	r2, [sp, #12]
    fcec:	e58d3000 	str	r3, [sp]
    fcf0:	e1a01006 	mov	r1, r6
    fcf4:	e1a00005 	mov	r0, r5
    fcf8:	e58d4008 	str	r4, [sp, #8]
    fcfc:	e3a03009 	mov	r3, #9
    fd00:	e3a02021 	mov	r2, #33	; 0x21
    fd04:	eb000acd 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fd08:	e1e00000 	mvn	r0, r0
    fd0c:	e1a00fa0 	lsr	r0, r0, #31
    fd10:	e28dd010 	add	sp, sp, #16
    fd14:	e8bd8070 	pop	{r4, r5, r6, pc}
    fd18:	00040384 	.word	0x00040384
    fd1c:	00000201 	.word	0x00000201

0000fd20 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
    fd20:	e92d4070 	push	{r4, r5, r6, lr}
    fd24:	e3a02000 	mov	r2, #0
    fd28:	e1a04000 	mov	r4, r0
    fd2c:	eb000311 	bl	10978 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    fd30:	e3a03000 	mov	r3, #0
    fd34:	e59f5030 	ldr	r5, [pc, #48]	; fd6c <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)+0x4c>
    fd38:	e1a00004 	mov	r0, r4
    fd3c:	e2852008 	add	r2, r5, #8
    fd40:	e5842000 	str	r2, [r4]
    fd44:	e3a01003 	mov	r1, #3
    fd48:	e1a02003 	mov	r2, r3
    fd4c:	ebffff12 	bl	f99c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
    fd50:	e2851058 	add	r1, r5, #88	; 0x58
    fd54:	e5c4013a 	strb	r0, [r4, #314]	; 0x13a
    fd58:	e3a02030 	mov	r2, #48	; 0x30
    fd5c:	e2840f4f 	add	r0, r4, #316	; 0x13c
    fd60:	eb006aea 	bl	2a910 <memcpy>
    fd64:	e1a00004 	mov	r0, r4
    fd68:	e8bd8070 	pop	{r4, r5, r6, pc}
    fd6c:	00040384 	.word	0x00040384

0000fd70 <CUSBGamePadPS3Device::PS3Enable()>:
    fd70:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fd74:	e3a02042 	mov	r2, #66	; 0x42
    fd78:	e3a0300c 	mov	r3, #12
    fd7c:	e3a04000 	mov	r4, #0
    fd80:	e24dd01c 	sub	sp, sp, #28
    fd84:	e5cd2014 	strb	r2, [sp, #20]
    fd88:	e5cd3015 	strb	r3, [sp, #21]
    fd8c:	e1a05000 	mov	r5, r0
    fd90:	e5cd4016 	strb	r4, [sp, #22]
    fd94:	e5cd4017 	strb	r4, [sp, #23]
    fd98:	ebfffed6 	bl	f8f8 <CUSBFunction::GetHost() const>
    fd9c:	e1a06000 	mov	r6, r0
    fda0:	e1a00005 	mov	r0, r5
    fda4:	ebfffec8 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
    fda8:	e1a07000 	mov	r7, r0
    fdac:	e1a00005 	mov	r0, r5
    fdb0:	ebffff2e 	bl	fa70 <CUSBFunction::GetInterfaceNumber() const>
    fdb4:	e3a0c004 	mov	ip, #4
    fdb8:	e3a02ffd 	mov	r2, #1012	; 0x3f4
    fdbc:	e6ff0070 	uxth	r0, r0
    fdc0:	e28d3014 	add	r3, sp, #20
    fdc4:	e58d0004 	str	r0, [sp, #4]
    fdc8:	e58d2000 	str	r2, [sp]
    fdcc:	e58d3008 	str	r3, [sp, #8]
    fdd0:	e1a01007 	mov	r1, r7
    fdd4:	e1a00006 	mov	r0, r6
    fdd8:	e58dc00c 	str	ip, [sp, #12]
    fddc:	e3a03009 	mov	r3, #9
    fde0:	e3a02021 	mov	r2, #33	; 0x21
    fde4:	eb000a95 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
    fde8:	e1500004 	cmp	r0, r4
    fdec:	b1a00004 	movlt	r0, r4
    fdf0:	ba000004 	blt	fe08 <CUSBGamePadPS3Device::PS3Enable()+0x98>
    fdf4:	e5953000 	ldr	r3, [r5]
    fdf8:	e5d5112c 	ldrb	r1, [r5, #300]	; 0x12c
    fdfc:	e5933034 	ldr	r3, [r3, #52]	; 0x34
    fe00:	e1a00005 	mov	r0, r5
    fe04:	e12fff33 	blx	r3
    fe08:	e28dd01c 	add	sp, sp, #28
    fe0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000fe10 <CUSBGamePadPS3Device::Configure()>:
    fe10:	e92d4030 	push	{r4, r5, lr}
    fe14:	e5d0513a 	ldrb	r5, [r0, #314]	; 0x13a
    fe18:	e24dd00c 	sub	sp, sp, #12
    fe1c:	e3550000 	cmp	r5, #0
    fe20:	0a00001e 	beq	fea0 <CUSBGamePadPS3Device::Configure()+0x90>
    fe24:	e1a04000 	mov	r4, r0
    fe28:	eb000449 	bl	10f54 <CUSBGamePadStandardDevice::Configure()>
    fe2c:	e2505000 	subs	r5, r0, #0
    fe30:	0a00002a 	beq	fee0 <CUSBGamePadPS3Device::Configure()+0xd0>
    fe34:	e2845f4a 	add	r5, r4, #296	; 0x128
    fe38:	e1d530b0 	ldrh	r3, [r5]
    fe3c:	e2433031 	sub	r3, r3, #49	; 0x31
    fe40:	e3530001 	cmp	r3, #1
    fe44:	8a00001a 	bhi	feb4 <CUSBGamePadPS3Device::Configure()+0xa4>
    fe48:	e3a01010 	mov	r1, #16
    fe4c:	e3a0c013 	mov	ip, #19
    fe50:	e1a03004 	mov	r3, r4
    fe54:	e3a02000 	mov	r2, #0
    fe58:	e3a000ff 	mov	r0, #255	; 0xff
    fe5c:	e5841024 	str	r1, [r4, #36]	; 0x24
    fe60:	e584c104 	str	ip, [r4, #260]	; 0x104
    fe64:	e28410c0 	add	r1, r4, #192	; 0xc0
    fe68:	e583202c 	str	r2, [r3, #44]	; 0x2c
    fe6c:	e5830030 	str	r0, [r3, #48]	; 0x30
    fe70:	e283300c 	add	r3, r3, #12
    fe74:	e1530001 	cmp	r3, r1
    fe78:	1afffffa 	bne	fe68 <CUSBGamePadPS3Device::Configure()+0x58>
    fe7c:	e58420e8 	str	r2, [r4, #232]	; 0xe8
    fe80:	e1a00004 	mov	r0, r4
    fe84:	ebffffb9 	bl	fd70 <CUSBGamePadPS3Device::PS3Enable()>
    fe88:	e2505000 	subs	r5, r0, #0
    fe8c:	0a00001b 	beq	ff00 <CUSBGamePadPS3Device::Configure()+0xf0>
    fe90:	e1a00004 	mov	r0, r4
    fe94:	e28dd00c 	add	sp, sp, #12
    fe98:	e8bd4030 	pop	{r4, r5, lr}
    fe9c:	ea0009da 	b	1260c <CUSBHIDDevice::StartRequest()>
    fea0:	e59f1078 	ldr	r1, [pc, #120]	; ff20 <CUSBGamePadPS3Device::Configure()+0x110>
    fea4:	ebfffea9 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
    fea8:	e1a00005 	mov	r0, r5
    feac:	e28dd00c 	add	sp, sp, #12
    feb0:	e8bd8030 	pop	{r4, r5, pc}
    feb4:	eb005b44 	bl	26bcc <CLogger::Get()>
    feb8:	e1d520b0 	ldrh	r2, [r5]
    febc:	e3a05000 	mov	r5, #0
    fec0:	e58d2000 	str	r2, [sp]
    fec4:	e59f3058 	ldr	r3, [pc, #88]	; ff24 <CUSBGamePadPS3Device::Configure()+0x114>
    fec8:	e3a02001 	mov	r2, #1
    fecc:	e59f104c 	ldr	r1, [pc, #76]	; ff20 <CUSBGamePadPS3Device::Configure()+0x110>
    fed0:	eb005a7a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fed4:	e1a00005 	mov	r0, r5
    fed8:	e28dd00c 	add	sp, sp, #12
    fedc:	e8bd8030 	pop	{r4, r5, pc}
    fee0:	eb005b39 	bl	26bcc <CLogger::Get()>
    fee4:	e59f303c 	ldr	r3, [pc, #60]	; ff28 <CUSBGamePadPS3Device::Configure()+0x118>
    fee8:	e3a02001 	mov	r2, #1
    feec:	e59f102c 	ldr	r1, [pc, #44]	; ff20 <CUSBGamePadPS3Device::Configure()+0x110>
    fef0:	eb005a72 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fef4:	e1a00005 	mov	r0, r5
    fef8:	e28dd00c 	add	sp, sp, #12
    fefc:	e8bd8030 	pop	{r4, r5, pc}
    ff00:	eb005b31 	bl	26bcc <CLogger::Get()>
    ff04:	e59f3020 	ldr	r3, [pc, #32]	; ff2c <CUSBGamePadPS3Device::Configure()+0x11c>
    ff08:	e3a02001 	mov	r2, #1
    ff0c:	e59f100c 	ldr	r1, [pc, #12]	; ff20 <CUSBGamePadPS3Device::Configure()+0x110>
    ff10:	eb005a6a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ff14:	e1a00005 	mov	r0, r5
    ff18:	e28dd00c 	add	sp, sp, #12
    ff1c:	e8bd8030 	pop	{r4, r5, pc}
    ff20:	0004040c 	.word	0x0004040c
    ff24:	0004047c 	.word	0x0004047c
    ff28:	0004045c 	.word	0x0004045c
    ff2c:	00040498 	.word	0x00040498

0000ff30 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
    ff30:	e2803f4a 	add	r3, r0, #296	; 0x128
    ff34:	e1d330b0 	ldrh	r3, [r3]
    ff38:	e92d4010 	push	{r4, lr}
    ff3c:	e3530031 	cmp	r3, #49	; 0x31
    ff40:	e1a0c000 	mov	ip, r0
    ff44:	e1a0e001 	mov	lr, r1
    ff48:	0a000008 	beq	ff70 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x40>
    ff4c:	e3530032 	cmp	r3, #50	; 0x32
    ff50:	0a000005 	beq	ff6c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x3c>
    ff54:	e3530000 	cmp	r3, #0
    ff58:	0a000040 	beq	10060 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x130>
    ff5c:	e3a02092 	mov	r2, #146	; 0x92
    ff60:	e59f1110 	ldr	r1, [pc, #272]	; 10078 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x148>
    ff64:	e59f0110 	ldr	r0, [pc, #272]	; 1007c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x14c>
    ff68:	eb005224 	bl	24800 <assertion_failed>
    ff6c:	e281e001 	add	lr, r1, #1
    ff70:	e35e0000 	cmp	lr, #0
    ff74:	0a00003b 	beq	10068 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x138>
    ff78:	e5de0003 	ldrb	r0, [lr, #3]
    ff7c:	e5de2002 	ldrb	r2, [lr, #2]
    ff80:	e5de1004 	ldrb	r1, [lr, #4]
    ff84:	e1822400 	orr	r2, r2, r0, lsl #8
    ff88:	e5de0005 	ldrb	r0, [lr, #5]
    ff8c:	e1822801 	orr	r2, r2, r1, lsl #16
    ff90:	e59f10e8 	ldr	r1, [pc, #232]	; 10080 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x150>
    ff94:	e1822c00 	orr	r2, r2, r0, lsl #24
    ff98:	e59f00e4 	ldr	r0, [pc, #228]	; 10084 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x154>
    ff9c:	e1a04682 	lsl	r4, r2, #13
    ffa0:	e00112a2 	and	r1, r1, r2, lsr #5
    ffa4:	e1811ea4 	orr	r1, r1, r4, lsr #29
    ffa8:	e0002582 	and	r2, r0, r2, lsl #11
    ffac:	e1812002 	orr	r2, r1, r2
    ffb0:	e58c2108 	str	r2, [ip, #264]	; 0x108
    ffb4:	e5de2006 	ldrb	r2, [lr, #6]
    ffb8:	e3a03006 	mov	r3, #6
    ffbc:	e58c2028 	str	r2, [ip, #40]	; 0x28
    ffc0:	e5de1007 	ldrb	r1, [lr, #7]
    ffc4:	e59f00bc 	ldr	r0, [pc, #188]	; 10088 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x158>
    ffc8:	e58c1034 	str	r1, [ip, #52]	; 0x34
    ffcc:	e5de1008 	ldrb	r1, [lr, #8]
    ffd0:	e28e200d 	add	r2, lr, #13
    ffd4:	e58c1040 	str	r1, [ip, #64]	; 0x40
    ffd8:	e5de1009 	ldrb	r1, [lr, #9]
    ffdc:	e28e4019 	add	r4, lr, #25
    ffe0:	e58c104c 	str	r1, [ip, #76]	; 0x4c
    ffe4:	ea000000 	b	ffec <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xbc>
    ffe8:	e5b03004 	ldr	r3, [r0, #4]!
    ffec:	e5f21001 	ldrb	r1, [r2, #1]!
    fff0:	e0833083 	add	r3, r3, r3, lsl #1
    fff4:	e08c3103 	add	r3, ip, r3, lsl #2
    fff8:	e1520004 	cmp	r2, r4
    fffc:	e5831028 	str	r1, [r3, #40]	; 0x28
   10000:	1afffff8 	bne	ffe8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb8>
   10004:	e3a01000 	mov	r1, #0
   10008:	e59f407c 	ldr	r4, [pc, #124]	; 1008c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x15c>
   1000c:	e28c0f43 	add	r0, ip, #268	; 0x10c
   10010:	e2812014 	add	r2, r1, #20
   10014:	e08e2082 	add	r2, lr, r2, lsl #1
   10018:	e5d23001 	ldrb	r3, [r2, #1]
   1001c:	e5d22002 	ldrb	r2, [r2, #2]
   10020:	e2811001 	add	r1, r1, #1
   10024:	e1833402 	orr	r3, r3, r2, lsl #8
   10028:	e6bf3fb3 	rev16	r3, r3
   1002c:	e6ff3073 	uxth	r3, r3
   10030:	e0443003 	sub	r3, r4, r3
   10034:	e3510003 	cmp	r1, #3
   10038:	e4803004 	str	r3, [r0], #4
   1003c:	1afffff3 	bne	10010 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xe0>
   10040:	e5de302f 	ldrb	r3, [lr, #47]	; 0x2f
   10044:	e5de2030 	ldrb	r2, [lr, #48]	; 0x30
   10048:	e1833402 	orr	r3, r3, r2, lsl #8
   1004c:	e6bf3fb3 	rev16	r3, r3
   10050:	e6ff3073 	uxth	r3, r3
   10054:	e2433006 	sub	r3, r3, #6
   10058:	e58c3120 	str	r3, [ip, #288]	; 0x120
   1005c:	e8bd8010 	pop	{r4, pc}
   10060:	e8bd4010 	pop	{r4, lr}
   10064:	ea00029d 	b	10ae0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
   10068:	e3a02097 	mov	r2, #151	; 0x97
   1006c:	e59f1004 	ldr	r1, [pc, #4]	; 10078 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x148>
   10070:	e59f0018 	ldr	r0, [pc, #24]	; 10090 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x160>
   10074:	eb0051e1 	bl	24800 <assertion_failed>
   10078:	00040448 	.word	0x00040448
   1007c:	0003fd5c 	.word	0x0003fd5c
   10080:	000007f8 	.word	0x000007f8
   10084:	0007f800 	.word	0x0007f800
   10088:	00040418 	.word	0x00040418
   1008c:	000001ff 	.word	0x000001ff
   10090:	000404b8 	.word	0x000404b8

00010094 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   10094:	e3a00000 	mov	r0, #0
   10098:	e12fff1e 	bx	lr

0001009c <CUSBGamePadPS3Device::GetProperties()>:
   1009c:	e3a0001b 	mov	r0, #27
   100a0:	e12fff1e 	bx	lr

000100a4 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   100a4:	e5d13001 	ldrb	r3, [r1, #1]
   100a8:	e5d12005 	ldrb	r2, [r1, #5]
   100ac:	e5803028 	str	r3, [r0, #40]	; 0x28
   100b0:	e5d13002 	ldrb	r3, [r1, #2]
   100b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   100b8:	e5803034 	str	r3, [r0, #52]	; 0x34
   100bc:	e5d13003 	ldrb	r3, [r1, #3]
   100c0:	e59fc18c 	ldr	ip, [pc, #396]	; 10254 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x1b0>
   100c4:	e5803040 	str	r3, [r0, #64]	; 0x40
   100c8:	e5d1e004 	ldrb	lr, [r1, #4]
   100cc:	e5d13005 	ldrb	r3, [r1, #5]
   100d0:	e580e04c 	str	lr, [r0, #76]	; 0x4c
   100d4:	e202200f 	and	r2, r2, #15
   100d8:	e5d1e008 	ldrb	lr, [r1, #8]
   100dc:	e79cc102 	ldr	ip, [ip, r2, lsl #2]
   100e0:	e3130080 	tst	r3, #128	; 0x80
   100e4:	e580e058 	str	lr, [r0, #88]	; 0x58
   100e8:	e5d1e009 	ldrb	lr, [r1, #9]
   100ec:	e580c108 	str	ip, [r0, #264]	; 0x108
   100f0:	138cc080 	orrne	ip, ip, #128	; 0x80
   100f4:	1580c108 	strne	ip, [r0, #264]	; 0x108
   100f8:	e3130040 	tst	r3, #64	; 0x40
   100fc:	e58020ec 	str	r2, [r0, #236]	; 0xec
   10100:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10104:	e580e064 	str	lr, [r0, #100]	; 0x64
   10108:	13822c01 	orrne	r2, r2, #256	; 0x100
   1010c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10110:	e3130020 	tst	r3, #32
   10114:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   10118:	13822c02 	orrne	r2, r2, #512	; 0x200
   1011c:	15802108 	strne	r2, [r0, #264]	; 0x108
   10120:	e3130010 	tst	r3, #16
   10124:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   10128:	13833b01 	orrne	r3, r3, #1024	; 0x400
   1012c:	15803108 	strne	r3, [r0, #264]	; 0x108
   10130:	e5d13006 	ldrb	r3, [r1, #6]
   10134:	e3130080 	tst	r3, #128	; 0x80
   10138:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1013c:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   10140:	15802108 	strne	r2, [r0, #264]	; 0x108
   10144:	e3130040 	tst	r3, #64	; 0x40
   10148:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1014c:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   10150:	15802108 	strne	r2, [r0, #264]	; 0x108
   10154:	e3130020 	tst	r3, #32
   10158:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1015c:	13822901 	orrne	r2, r2, #16384	; 0x4000
   10160:	15802108 	strne	r2, [r0, #264]	; 0x108
   10164:	e3130010 	tst	r3, #16
   10168:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1016c:	13822b02 	orrne	r2, r2, #2048	; 0x800
   10170:	15802108 	strne	r2, [r0, #264]	; 0x108
   10174:	e3130008 	tst	r3, #8
   10178:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1017c:	13822010 	orrne	r2, r2, #16
   10180:	15802108 	strne	r2, [r0, #264]	; 0x108
   10184:	e3130004 	tst	r3, #4
   10188:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1018c:	13822008 	orrne	r2, r2, #8
   10190:	15802108 	strne	r2, [r0, #264]	; 0x108
   10194:	e3130002 	tst	r3, #2
   10198:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1019c:	13822040 	orrne	r2, r2, #64	; 0x40
   101a0:	15802108 	strne	r2, [r0, #264]	; 0x108
   101a4:	e3130001 	tst	r3, #1
   101a8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   101ac:	13833020 	orrne	r3, r3, #32
   101b0:	15803108 	strne	r3, [r0, #264]	; 0x108
   101b4:	e5d13007 	ldrb	r3, [r1, #7]
   101b8:	e3130002 	tst	r3, #2
   101bc:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   101c0:	13822602 	orrne	r2, r2, #2097152	; 0x200000
   101c4:	15802108 	strne	r2, [r0, #264]	; 0x108
   101c8:	e3130001 	tst	r3, #1
   101cc:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   101d0:	13833001 	orrne	r3, r3, #1
   101d4:	15803108 	strne	r3, [r0, #264]	; 0x108
   101d8:	e5d12014 	ldrb	r2, [r1, #20]
   101dc:	e5d13013 	ldrb	r3, [r1, #19]
   101e0:	e1833402 	orr	r3, r3, r2, lsl #8
   101e4:	e6bf3073 	sxth	r3, r3
   101e8:	e580310c 	str	r3, [r0, #268]	; 0x10c
   101ec:	e5d12018 	ldrb	r2, [r1, #24]
   101f0:	e5d13017 	ldrb	r3, [r1, #23]
   101f4:	e1833402 	orr	r3, r3, r2, lsl #8
   101f8:	e6bf3073 	sxth	r3, r3
   101fc:	e5803110 	str	r3, [r0, #272]	; 0x110
   10200:	e5d12016 	ldrb	r2, [r1, #22]
   10204:	e5d13015 	ldrb	r3, [r1, #21]
   10208:	e1833402 	orr	r3, r3, r2, lsl #8
   1020c:	e6bf3073 	sxth	r3, r3
   10210:	e5803114 	str	r3, [r0, #276]	; 0x114
   10214:	e5d12012 	ldrb	r2, [r1, #18]
   10218:	e5d13011 	ldrb	r3, [r1, #17]
   1021c:	e1833402 	orr	r3, r3, r2, lsl #8
   10220:	e6bf3073 	sxth	r3, r3
   10224:	e5803118 	str	r3, [r0, #280]	; 0x118
   10228:	e5d1200e 	ldrb	r2, [r1, #14]
   1022c:	e5d1300d 	ldrb	r3, [r1, #13]
   10230:	e1833402 	orr	r3, r3, r2, lsl #8
   10234:	e6bf3073 	sxth	r3, r3
   10238:	e580311c 	str	r3, [r0, #284]	; 0x11c
   1023c:	e5d1300f 	ldrb	r3, [r1, #15]
   10240:	e5d12010 	ldrb	r2, [r1, #16]
   10244:	e1833402 	orr	r3, r3, r2, lsl #8
   10248:	e6bf3073 	sxth	r3, r3
   1024c:	e5803120 	str	r3, [r0, #288]	; 0x120
   10250:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   10254:	000404c8 	.word	0x000404c8

00010258 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   10258:	e92d4010 	push	{r4, lr}
   1025c:	e1a04000 	mov	r4, r0
   10260:	e5900140 	ldr	r0, [r0, #320]	; 0x140
   10264:	e59f3034 	ldr	r3, [pc, #52]	; 102a0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
   10268:	e3500000 	cmp	r0, #0
   1026c:	e5843000 	str	r3, [r4]
   10270:	0a000002 	beq	10280 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
   10274:	e5903000 	ldr	r3, [r0]
   10278:	e5933004 	ldr	r3, [r3, #4]
   1027c:	e12fff33 	blx	r3
   10280:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   10284:	e3500000 	cmp	r0, #0
   10288:	0a000000 	beq	10290 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
   1028c:	eb006b80 	bl	2b094 <operator delete[](void*)>
   10290:	e1a00004 	mov	r0, r4
   10294:	eb001ed0 	bl	17ddc <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10298:	e1a00004 	mov	r0, r4
   1029c:	e8bd8010 	pop	{r4, pc}
   102a0:	000404f4 	.word	0x000404f4

000102a4 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   102a4:	e92d4010 	push	{r4, lr}
   102a8:	e1a04000 	mov	r4, r0
   102ac:	ebffffe9 	bl	10258 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>
   102b0:	e1a00004 	mov	r0, r4
   102b4:	e3a01f53 	mov	r1, #332	; 0x14c
   102b8:	eb006b7b 	bl	2b0ac <operator delete(void*, unsigned int)>
   102bc:	e1a00004 	mov	r0, r4
   102c0:	e8bd8010 	pop	{r4, pc}

000102c4 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   102c4:	e92d4010 	push	{r4, lr}
   102c8:	e1a04000 	mov	r4, r0
   102cc:	eb001eb0 	bl	17d94 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   102d0:	e3a03000 	mov	r3, #0
   102d4:	e59f2030 	ldr	r2, [pc, #48]	; 1030c <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x48>
   102d8:	e1a00004 	mov	r0, r4
   102dc:	e5842000 	str	r2, [r4]
   102e0:	e3a01003 	mov	r1, #3
   102e4:	e1a02003 	mov	r2, r3
   102e8:	ebfffdab 	bl	f99c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   102ec:	e3a03000 	mov	r3, #0
   102f0:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   102f4:	e584313c 	str	r3, [r4, #316]	; 0x13c
   102f8:	e5843140 	str	r3, [r4, #320]	; 0x140
   102fc:	e5c43144 	strb	r3, [r4, #324]	; 0x144
   10300:	e5c43145 	strb	r3, [r4, #325]	; 0x145
   10304:	e1a00004 	mov	r0, r4
   10308:	e8bd8010 	pop	{r4, pc}
   1030c:	000404f4 	.word	0x000404f4

00010310 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   10310:	e5d13007 	ldrb	r3, [r1, #7]
   10314:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10318:	e2133002 	ands	r3, r3, #2
   1031c:	e1a06001 	mov	r6, r1
   10320:	e1a05000 	mov	r5, r0
   10324:	1a000058 	bne	1048c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x17c>
   10328:	e5d00144 	ldrb	r0, [r0, #324]	; 0x144
   1032c:	e3500000 	cmp	r0, #0
   10330:	1a000059 	bne	1049c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x18c>
   10334:	e5d67021 	ldrb	r7, [r6, #33]	; 0x21
   10338:	e5d64023 	ldrb	r4, [r6, #35]	; 0x23
   1033c:	e2473001 	sub	r3, r7, #1
   10340:	e3530002 	cmp	r3, #2
   10344:	83a07001 	movhi	r7, #1
   10348:	e1b043a4 	lsrs	r4, r4, #7
   1034c:	1a000047 	bne	10470 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x160>
   10350:	e1a03004 	mov	r3, r4
   10354:	e5d5c145 	ldrb	ip, [r5, #325]	; 0x145
   10358:	e0833004 	add	r3, r3, r4
   1035c:	e35c0000 	cmp	ip, #0
   10360:	e0863003 	add	r3, r6, r3
   10364:	1a000022 	bne	103f4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe4>
   10368:	e5d32025 	ldrb	r2, [r3, #37]	; 0x25
   1036c:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
   10370:	e5d3e024 	ldrb	lr, [r3, #36]	; 0x24
   10374:	e1a01201 	lsl	r1, r1, #4
   10378:	e202300f 	and	r3, r2, #15
   1037c:	e18ee403 	orr	lr, lr, r3, lsl #8
   10380:	e1811222 	orr	r1, r1, r2, lsr #4
   10384:	e1a0300c 	mov	r3, ip
   10388:	e1a0200c 	mov	r2, ip
   1038c:	e2859f51 	add	r9, r5, #324	; 0x144
   10390:	e2858f52 	add	r8, r5, #328	; 0x148
   10394:	e3a0a001 	mov	sl, #1
   10398:	e190000c 	orrs	r0, r0, ip
   1039c:	e5c5a145 	strb	sl, [r5, #325]	; 0x145
   103a0:	e1c9e0b2 	strh	lr, [r9, #2]
   103a4:	e1c810b0 	strh	r1, [r8]
   103a8:	0a000004 	beq	103c0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb0>
   103ac:	e5950140 	ldr	r0, [r5, #320]	; 0x140
   103b0:	e3500000 	cmp	r0, #0
   103b4:	0a000029 	beq	10460 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x150>
   103b8:	e5d51144 	ldrb	r1, [r5, #324]	; 0x144
   103bc:	eb0021dd 	bl	18b38 <CMouseDevice::ReportHandler(unsigned int, int, int)>
   103c0:	e3a01000 	mov	r1, #0
   103c4:	e2844001 	add	r4, r4, #1
   103c8:	e1570004 	cmp	r7, r4
   103cc:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   103d0:	e1a03184 	lsl	r3, r4, #3
   103d4:	e0832004 	add	r2, r3, r4
   103d8:	e0862002 	add	r2, r6, r2
   103dc:	e5d22023 	ldrb	r2, [r2, #35]	; 0x23
   103e0:	e1a00001 	mov	r0, r1
   103e4:	e1b023a2 	lsrs	r2, r2, #7
   103e8:	0affffd9 	beq	10354 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x44>
   103ec:	e5c51145 	strb	r1, [r5, #325]	; 0x145
   103f0:	eafffff3 	b	103c4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb4>
   103f4:	e5d3a025 	ldrb	sl, [r3, #37]	; 0x25
   103f8:	e5d3e024 	ldrb	lr, [r3, #36]	; 0x24
   103fc:	e2859f51 	add	r9, r5, #324	; 0x144
   10400:	e20a100f 	and	r1, sl, #15
   10404:	e1d920b2 	ldrh	r2, [r9, #2]
   10408:	e18ee401 	orr	lr, lr, r1, lsl #8
   1040c:	e04e2002 	sub	r2, lr, r2
   10410:	e352007f 	cmp	r2, #127	; 0x7f
   10414:	e3e0c07e 	mvn	ip, #126	; 0x7e
   10418:	a3a0207f 	movge	r2, #127	; 0x7f
   1041c:	e5d31026 	ldrb	r1, [r3, #38]	; 0x26
   10420:	e2858f52 	add	r8, r5, #328	; 0x148
   10424:	e1a01201 	lsl	r1, r1, #4
   10428:	e1d830b0 	ldrh	r3, [r8]
   1042c:	e181122a 	orr	r1, r1, sl, lsr #4
   10430:	e0413003 	sub	r3, r1, r3
   10434:	e152000c 	cmp	r2, ip
   10438:	b1a0200c 	movlt	r2, ip
   1043c:	e353007f 	cmp	r3, #127	; 0x7f
   10440:	a3a0307f 	movge	r3, #127	; 0x7f
   10444:	e153000c 	cmp	r3, ip
   10448:	b1a0300c 	movlt	r3, ip
   1044c:	e3530000 	cmp	r3, #0
   10450:	03520000 	cmpeq	r2, #0
   10454:	13a0c001 	movne	ip, #1
   10458:	03a0c000 	moveq	ip, #0
   1045c:	eaffffcc 	b	10394 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x84>
   10460:	e59f2050 	ldr	r2, [pc, #80]	; 104b8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1a8>
   10464:	e59f1050 	ldr	r1, [pc, #80]	; 104bc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1ac>
   10468:	e59f0050 	ldr	r0, [pc, #80]	; 104c0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1b0>
   1046c:	eb0050e3 	bl	24800 <assertion_failed>
   10470:	e3a04000 	mov	r4, #0
   10474:	e1500004 	cmp	r0, r4
   10478:	e5c54145 	strb	r4, [r5, #325]	; 0x145
   1047c:	0a00000b 	beq	104b0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x1a0>
   10480:	e1a03004 	mov	r3, r4
   10484:	e1a02004 	mov	r2, r4
   10488:	eaffffc7 	b	103ac <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x9c>
   1048c:	e5d02144 	ldrb	r2, [r0, #324]	; 0x144
   10490:	e3520000 	cmp	r2, #0
   10494:	13a00000 	movne	r0, #0
   10498:	1affffa5 	bne	10334 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
   1049c:	e2933000 	adds	r3, r3, #0
   104a0:	13a03001 	movne	r3, #1
   104a4:	e3a00001 	mov	r0, #1
   104a8:	e5c53144 	strb	r3, [r5, #324]	; 0x144
   104ac:	eaffffa0 	b	10334 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x24>
   104b0:	e1a04000 	mov	r4, r0
   104b4:	eaffffc1 	b	103c0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xb0>
   104b8:	0000015a 	.word	0x0000015a
   104bc:	00040544 	.word	0x00040544
   104c0:	00040558 	.word	0x00040558

000104c4 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   104c4:	e2913000 	adds	r3, r1, #0
   104c8:	13a03001 	movne	r3, #1
   104cc:	e3520040 	cmp	r2, #64	; 0x40
   104d0:	13a03000 	movne	r3, #0
   104d4:	e2532000 	subs	r2, r3, #0
   104d8:	012fff1e 	bxeq	lr
   104dc:	e92d4070 	push	{r4, r5, r6, lr}
   104e0:	e1a04000 	mov	r4, r0
   104e4:	e5903000 	ldr	r3, [r0]
   104e8:	e1a05001 	mov	r5, r1
   104ec:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   104f0:	e12fff33 	blx	r3
   104f4:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   104f8:	e3530000 	cmp	r3, #0
   104fc:	0a000003 	beq	10510 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x4c>
   10500:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   10504:	e2841024 	add	r1, r4, #36	; 0x24
   10508:	e2400001 	sub	r0, r0, #1
   1050c:	e12fff33 	blx	r3
   10510:	e5943140 	ldr	r3, [r4, #320]	; 0x140
   10514:	e3530000 	cmp	r3, #0
   10518:	08bd8070 	popeq	{r4, r5, r6, pc}
   1051c:	e1a01005 	mov	r1, r5
   10520:	e1a00004 	mov	r0, r4
   10524:	e8bd4070 	pop	{r4, r5, r6, lr}
   10528:	eaffff78 	b	10310 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

0001052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   1052c:	e92d4010 	push	{r4, lr}
   10530:	e590213c 	ldr	r2, [r0, #316]	; 0x13c
   10534:	e5d0c131 	ldrb	ip, [r0, #305]	; 0x131
   10538:	e3a03000 	mov	r3, #0
   1053c:	e5c2c003 	strb	ip, [r2, #3]
   10540:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10544:	e5d0e133 	ldrb	lr, [r0, #307]	; 0x133
   10548:	e3a02020 	mov	r2, #32
   1054c:	e5cce004 	strb	lr, [ip, #4]
   10550:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10554:	e5d0e132 	ldrb	lr, [r0, #306]	; 0x132
   10558:	e5cce005 	strb	lr, [ip, #5]
   1055c:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10560:	e5d0e134 	ldrb	lr, [r0, #308]	; 0x134
   10564:	e5cce006 	strb	lr, [ip, #6]
   10568:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   1056c:	e5d0e135 	ldrb	lr, [r0, #309]	; 0x135
   10570:	e5cce007 	strb	lr, [ip, #7]
   10574:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10578:	e5d0e136 	ldrb	lr, [r0, #310]	; 0x136
   1057c:	e5cce008 	strb	lr, [ip, #8]
   10580:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10584:	e5d0e137 	ldrb	lr, [r0, #311]	; 0x137
   10588:	e5cce009 	strb	lr, [ip, #9]
   1058c:	e590c13c 	ldr	ip, [r0, #316]	; 0x13c
   10590:	e5d0e138 	ldrb	lr, [r0, #312]	; 0x138
   10594:	e5cce00a 	strb	lr, [ip, #10]
   10598:	e590113c 	ldr	r1, [r0, #316]	; 0x13c
   1059c:	eb000790 	bl	123e4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   105a0:	e2504000 	subs	r4, r0, #0
   105a4:	1a000004 	bne	105bc <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x90>
   105a8:	eb005987 	bl	26bcc <CLogger::Get()>
   105ac:	e59f3010 	ldr	r3, [pc, #16]	; 105c4 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x98>
   105b0:	e3a02001 	mov	r2, #1
   105b4:	e59f100c 	ldr	r1, [pc, #12]	; 105c8 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x9c>
   105b8:	eb0058c0 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   105bc:	e1a00004 	mov	r0, r4
   105c0:	e8bd8010 	pop	{r4, pc}
   105c4:	0004056c 	.word	0x0004056c
   105c8:	00040538 	.word	0x00040538

000105cc <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   105cc:	e2411001 	sub	r1, r1, #1
   105d0:	e3510006 	cmp	r1, #6
   105d4:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   105d8:	ea000044 	b	106f0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x124>
   105dc:	00010618 	.word	0x00010618
   105e0:	0001063c 	.word	0x0001063c
   105e4:	00010660 	.word	0x00010660
   105e8:	00010684 	.word	0x00010684
   105ec:	000106a8 	.word	0x000106a8
   105f0:	000106cc 	.word	0x000106cc
   105f4:	000105f8 	.word	0x000105f8
   105f8:	e3e03000 	mvn	r3, #0
   105fc:	e3a0207f 	mov	r2, #127	; 0x7f
   10600:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   10604:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   10608:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   1060c:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   10610:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   10614:	eaffffc4 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10618:	e3a02000 	mov	r2, #0
   1061c:	e3e03000 	mvn	r3, #0
   10620:	e3a0107f 	mov	r1, #127	; 0x7f
   10624:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   10628:	e5c02135 	strb	r2, [r0, #309]	; 0x135
   1062c:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   10630:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   10634:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   10638:	eaffffbb 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1063c:	e3e02000 	mvn	r2, #0
   10640:	e3a03000 	mov	r3, #0
   10644:	e3a0107f 	mov	r1, #127	; 0x7f
   10648:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   1064c:	e5c02138 	strb	r2, [r0, #312]	; 0x138
   10650:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   10654:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   10658:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   1065c:	eaffffb2 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10660:	e3e03000 	mvn	r3, #0
   10664:	e3a01000 	mov	r1, #0
   10668:	e3a0207f 	mov	r2, #127	; 0x7f
   1066c:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   10670:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   10674:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   10678:	e5c01135 	strb	r1, [r0, #309]	; 0x135
   1067c:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   10680:	eaffffa9 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10684:	e3a02000 	mov	r2, #0
   10688:	e3e03000 	mvn	r3, #0
   1068c:	e3a0107f 	mov	r1, #127	; 0x7f
   10690:	e5c02134 	strb	r2, [r0, #308]	; 0x134
   10694:	e5c02136 	strb	r2, [r0, #310]	; 0x136
   10698:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   1069c:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   106a0:	e5c01137 	strb	r1, [r0, #311]	; 0x137
   106a4:	eaffffa0 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   106a8:	e3e03000 	mvn	r3, #0
   106ac:	e3a01000 	mov	r1, #0
   106b0:	e3a0207f 	mov	r2, #127	; 0x7f
   106b4:	e5c01134 	strb	r1, [r0, #308]	; 0x134
   106b8:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   106bc:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   106c0:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   106c4:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   106c8:	eaffff97 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   106cc:	e3e03000 	mvn	r3, #0
   106d0:	e3a01000 	mov	r1, #0
   106d4:	e3a0207f 	mov	r2, #127	; 0x7f
   106d8:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   106dc:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   106e0:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   106e4:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   106e8:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   106ec:	eaffff8e 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   106f0:	e3a03000 	mov	r3, #0
   106f4:	e5c03134 	strb	r3, [r0, #308]	; 0x134
   106f8:	e5c03135 	strb	r3, [r0, #309]	; 0x135
   106fc:	e5c03136 	strb	r3, [r0, #310]	; 0x136
   10700:	e5c03137 	strb	r3, [r0, #311]	; 0x137
   10704:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   10708:	eaffff87 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

0001070c <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   1070c:	e92d4010 	push	{r4, lr}
   10710:	e1a04821 	lsr	r4, r1, #16
   10714:	e1a0e421 	lsr	lr, r1, #8
   10718:	e5c04134 	strb	r4, [r0, #308]	; 0x134
   1071c:	e5c01136 	strb	r1, [r0, #310]	; 0x136
   10720:	e5c0e135 	strb	lr, [r0, #309]	; 0x135
   10724:	e5c02137 	strb	r2, [r0, #311]	; 0x137
   10728:	e5c03138 	strb	r3, [r0, #312]	; 0x138
   1072c:	e8bd4010 	pop	{r4, lr}
   10730:	eaffff7d 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

00010734 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   10734:	e3510001 	cmp	r1, #1
   10738:	0a000011 	beq	10784 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x50>
   1073c:	3a00000a 	bcc	1076c <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x38>
   10740:	e3510002 	cmp	r1, #2
   10744:	1a000006 	bne	10764 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x30>
   10748:	e3e0100c 	mvn	r1, #12
   1074c:	e3a02000 	mov	r2, #0
   10750:	e3e03000 	mvn	r3, #0
   10754:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   10758:	e5c02133 	strb	r2, [r0, #307]	; 0x133
   1075c:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   10760:	eaffff71 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10764:	e3a00001 	mov	r0, #1
   10768:	e12fff1e 	bx	lr
   1076c:	e3a03000 	mov	r3, #0
   10770:	e3e0200f 	mvn	r2, #15
   10774:	e5c03133 	strb	r3, [r0, #307]	; 0x133
   10778:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   1077c:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   10780:	eaffff69 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   10784:	e3e0100c 	mvn	r1, #12
   10788:	e3e02000 	mvn	r2, #0
   1078c:	e3a03000 	mov	r3, #0
   10790:	e5c01131 	strb	r1, [r0, #305]	; 0x131
   10794:	e5c02133 	strb	r2, [r0, #307]	; 0x133
   10798:	e5c03132 	strb	r3, [r0, #306]	; 0x132
   1079c:	eaffff62 	b	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>

000107a0 <CUSBGamePadPS4Device::DisableTouchpad()>:
   107a0:	e3a02000 	mov	r2, #0
   107a4:	e59f3004 	ldr	r3, [pc, #4]	; 107b0 <CUSBGamePadPS4Device::DisableTouchpad()+0x10>
   107a8:	e5c32000 	strb	r2, [r3]
   107ac:	e12fff1e 	bx	lr
   107b0:	00047e84 	.word	0x00047e84

000107b4 <CUSBGamePadPS4Device::Configure()>:
   107b4:	e92d4070 	push	{r4, r5, r6, lr}
   107b8:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   107bc:	e3550000 	cmp	r5, #0
   107c0:	0a00003f 	beq	108c4 <CUSBGamePadPS4Device::Configure()+0x110>
   107c4:	e3a02040 	mov	r2, #64	; 0x40
   107c8:	e2803f4a 	add	r3, r0, #296	; 0x128
   107cc:	e1c320b0 	strh	r2, [r3]
   107d0:	e1a04000 	mov	r4, r0
   107d4:	eb001d43 	bl	17ce8 <CUSBGamePadDevice::Configure()>
   107d8:	e2505000 	subs	r5, r0, #0
   107dc:	0a00003c 	beq	108d4 <CUSBGamePadPS4Device::Configure()+0x120>
   107e0:	e59f3120 	ldr	r3, [pc, #288]	; 10908 <CUSBGamePadPS4Device::Configure()+0x154>
   107e4:	e5d33000 	ldrb	r3, [r3]
   107e8:	e3530000 	cmp	r3, #0
   107ec:	1a00003f 	bne	108f0 <CUSBGamePadPS4Device::Configure()+0x13c>
   107f0:	e3a02006 	mov	r2, #6
   107f4:	e3a0c00e 	mov	ip, #14
   107f8:	e3a00001 	mov	r0, #1
   107fc:	e1a03004 	mov	r3, r4
   10800:	e3a05000 	mov	r5, #0
   10804:	e3a010ff 	mov	r1, #255	; 0xff
   10808:	e5842024 	str	r2, [r4, #36]	; 0x24
   1080c:	e584c104 	str	ip, [r4, #260]	; 0x104
   10810:	e58400e8 	str	r0, [r4, #232]	; 0xe8
   10814:	e2842048 	add	r2, r4, #72	; 0x48
   10818:	e583502c 	str	r5, [r3, #44]	; 0x2c
   1081c:	e5831030 	str	r1, [r3, #48]	; 0x30
   10820:	e283300c 	add	r3, r3, #12
   10824:	e1520003 	cmp	r2, r3
   10828:	1afffffa 	bne	10818 <CUSBGamePadPS4Device::Configure()+0x64>
   1082c:	e3a00020 	mov	r0, #32
   10830:	eb006a10 	bl	2b078 <operator new[](unsigned int)>
   10834:	e3a06005 	mov	r6, #5
   10838:	e3a02020 	mov	r2, #32
   1083c:	e584013c 	str	r0, [r4, #316]	; 0x13c
   10840:	e3a01000 	mov	r1, #0
   10844:	eb0065ba 	bl	29f34 <memset>
   10848:	e3a0c007 	mov	ip, #7
   1084c:	e3e03000 	mvn	r3, #0
   10850:	e3a0e004 	mov	lr, #4
   10854:	e3e0100f 	mvn	r1, #15
   10858:	e3a0207f 	mov	r2, #127	; 0x7f
   1085c:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   10860:	e5c06000 	strb	r6, [r0]
   10864:	e594013c 	ldr	r0, [r4, #316]	; 0x13c
   10868:	e5c0c001 	strb	ip, [r0, #1]
   1086c:	e594c13c 	ldr	ip, [r4, #316]	; 0x13c
   10870:	e1a00004 	mov	r0, r4
   10874:	e5cce002 	strb	lr, [ip, #2]
   10878:	e5c41131 	strb	r1, [r4, #305]	; 0x131
   1087c:	e5c43134 	strb	r3, [r4, #308]	; 0x134
   10880:	e5c43135 	strb	r3, [r4, #309]	; 0x135
   10884:	e5c43136 	strb	r3, [r4, #310]	; 0x136
   10888:	e5c43138 	strb	r3, [r4, #312]	; 0x138
   1088c:	e5c42137 	strb	r2, [r4, #311]	; 0x137
   10890:	e5c45133 	strb	r5, [r4, #307]	; 0x133
   10894:	e5c45132 	strb	r5, [r4, #306]	; 0x132
   10898:	ebffff23 	bl	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1089c:	e5c45134 	strb	r5, [r4, #308]	; 0x134
   108a0:	e5c45135 	strb	r5, [r4, #309]	; 0x135
   108a4:	e5c45136 	strb	r5, [r4, #310]	; 0x136
   108a8:	e3a000fa 	mov	r0, #250	; 0xfa
   108ac:	eb00655a 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
   108b0:	e1a00004 	mov	r0, r4
   108b4:	ebffff1c 	bl	1052c <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   108b8:	e1a00004 	mov	r0, r4
   108bc:	e8bd4070 	pop	{r4, r5, r6, lr}
   108c0:	ea000751 	b	1260c <CUSBHIDDevice::StartRequest()>
   108c4:	e59f1040 	ldr	r1, [pc, #64]	; 1090c <CUSBGamePadPS4Device::Configure()+0x158>
   108c8:	ebfffc20 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   108cc:	e1a00005 	mov	r0, r5
   108d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   108d4:	eb0058bc 	bl	26bcc <CLogger::Get()>
   108d8:	e59f3030 	ldr	r3, [pc, #48]	; 10910 <CUSBGamePadPS4Device::Configure()+0x15c>
   108dc:	e3a02001 	mov	r2, #1
   108e0:	e59f1024 	ldr	r1, [pc, #36]	; 1090c <CUSBGamePadPS4Device::Configure()+0x158>
   108e4:	eb0057f5 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   108e8:	e1a00005 	mov	r0, r5
   108ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   108f0:	e3a00028 	mov	r0, #40	; 0x28
   108f4:	eb0069de 	bl	2b074 <operator new(unsigned int)>
   108f8:	e1a05000 	mov	r5, r0
   108fc:	eb002053 	bl	18a50 <CMouseDevice::CMouseDevice()>
   10900:	e5845140 	str	r5, [r4, #320]	; 0x140
   10904:	eaffffb9 	b	107f0 <CUSBGamePadPS4Device::Configure()+0x3c>
   10908:	00047e84 	.word	0x00047e84
   1090c:	00040538 	.word	0x00040538
   10910:	0004045c 	.word	0x0004045c

00010914 <CUSBGamePadPS4Device::GetProperties()>:
   10914:	e3a0003f 	mov	r0, #63	; 0x3f
   10918:	e12fff1e 	bx	lr

0001091c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   1091c:	e92d4010 	push	{r4, lr}
   10920:	e1a04000 	mov	r4, r0
   10924:	e5900134 	ldr	r0, [r0, #308]	; 0x134
   10928:	e59f3024 	ldr	r3, [pc, #36]	; 10954 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
   1092c:	e3500000 	cmp	r0, #0
   10930:	e5843000 	str	r3, [r4]
   10934:	0a000000 	beq	1093c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
   10938:	eb0069d5 	bl	2b094 <operator delete[](void*)>
   1093c:	e3a03000 	mov	r3, #0
   10940:	e1a00004 	mov	r0, r4
   10944:	e5843134 	str	r3, [r4, #308]	; 0x134
   10948:	eb001d23 	bl	17ddc <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1094c:	e1a00004 	mov	r0, r4
   10950:	e8bd8010 	pop	{r4, pc}
   10954:	00040594 	.word	0x00040594

00010958 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   10958:	e92d4010 	push	{r4, lr}
   1095c:	e1a04000 	mov	r4, r0
   10960:	ebffffed 	bl	1091c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   10964:	e1a00004 	mov	r0, r4
   10968:	e3a01f4f 	mov	r1, #316	; 0x13c
   1096c:	eb0069ce 	bl	2b0ac <operator delete(void*, unsigned int)>
   10970:	e1a00004 	mov	r0, r4
   10974:	e8bd8010 	pop	{r4, pc}

00010978 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   10978:	e92d4070 	push	{r4, r5, r6, lr}
   1097c:	e1a04000 	mov	r4, r0
   10980:	e1a05002 	mov	r5, r2
   10984:	eb001d02 	bl	17d94 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   10988:	e3a03000 	mov	r3, #0
   1098c:	e59f0018 	ldr	r0, [pc, #24]	; 109ac <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
   10990:	e2841f4e 	add	r1, r4, #312	; 0x138
   10994:	e5840000 	str	r0, [r4]
   10998:	e5c45130 	strb	r5, [r4, #304]	; 0x130
   1099c:	e5843134 	str	r3, [r4, #308]	; 0x134
   109a0:	e1a00004 	mov	r0, r4
   109a4:	e1c130b0 	strh	r3, [r1]
   109a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   109ac:	00040594 	.word	0x00040594

000109b0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   109b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109b4:	e0814002 	add	r4, r1, r2
   109b8:	e2846007 	add	r6, r4, #7
   109bc:	e1a061a6 	lsr	r6, r6, #3
   109c0:	e1a0e1a1 	lsr	lr, r1, #3
   109c4:	e15e0006 	cmp	lr, r6
   109c8:	e24dd00c 	sub	sp, sp, #12
   109cc:	2a000037 	bcs	10ab0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x100>
   109d0:	e3a07001 	mov	r7, #1
   109d4:	e3a05000 	mov	r5, #0
   109d8:	e2011007 	and	r1, r1, #7
   109dc:	e0828001 	add	r8, r2, r1
   109e0:	e1a08817 	lsl	r8, r7, r8
   109e4:	e6ef8078 	uxtb	r8, r8
   109e8:	e1a07117 	lsl	r7, r7, r1
   109ec:	e6ef7077 	uxtb	r7, r7
   109f0:	e2489001 	sub	r9, r8, #1
   109f4:	e2444001 	sub	r4, r4, #1
   109f8:	e0488007 	sub	r8, r8, r7
   109fc:	e6ef9079 	uxtb	r9, r9
   10a00:	e2677000 	rsb	r7, r7, #0
   10a04:	e1a03005 	mov	r3, r5
   10a08:	e1a0c00e 	mov	ip, lr
   10a0c:	e1a041a4 	lsr	r4, r4, #3
   10a10:	e080000e 	add	r0, r0, lr
   10a14:	e58d9004 	str	r9, [sp, #4]
   10a18:	e6ef8078 	uxtb	r8, r8
   10a1c:	e6ef7077 	uxtb	r7, r7
   10a20:	e261b008 	rsb	fp, r1, #8
   10a24:	ea00000e 	b	10a64 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
   10a28:	e15e000c 	cmp	lr, ip
   10a2c:	0a000018 	beq	10a94 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xe4>
   10a30:	e15c0004 	cmp	ip, r4
   10a34:	05d09000 	ldrbeq	r9, [r0]
   10a38:	059da004 	ldreq	sl, [sp, #4]
   10a3c:	12855008 	addne	r5, r5, #8
   10a40:	15d0a000 	ldrbne	sl, [r0]
   10a44:	0009900a 	andeq	r9, r9, sl
   10a48:	10429005 	subne	r9, r2, r5
   10a4c:	01833009 	orreq	r3, r3, r9
   10a50:	1183391a 	orrne	r3, r3, sl, lsl r9
   10a54:	e28cc001 	add	ip, ip, #1
   10a58:	e15c0006 	cmp	ip, r6
   10a5c:	e2800001 	add	r0, r0, #1
   10a60:	0a000008 	beq	10a88 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>
   10a64:	e15e0004 	cmp	lr, r4
   10a68:	1affffee 	bne	10a28 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x78>
   10a6c:	e5d03000 	ldrb	r3, [r0]
   10a70:	e28cc001 	add	ip, ip, #1
   10a74:	e0033008 	and	r3, r3, r8
   10a78:	e15c0006 	cmp	ip, r6
   10a7c:	e1a03153 	asr	r3, r3, r1
   10a80:	e2800001 	add	r0, r0, #1
   10a84:	1afffff6 	bne	10a64 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xb4>
   10a88:	e1a00003 	mov	r0, r3
   10a8c:	e28dd00c 	add	sp, sp, #12
   10a90:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a94:	e5d03000 	ldrb	r3, [r0]
   10a98:	e085500b 	add	r5, r5, fp
   10a9c:	e0033007 	and	r3, r3, r7
   10aa0:	e1a03153 	asr	r3, r3, r1
   10aa4:	e0429005 	sub	r9, r2, r5
   10aa8:	e1a03913 	lsl	r3, r3, r9
   10aac:	eaffffe8 	b	10a54 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xa4>
   10ab0:	e3a03000 	mov	r3, #0
   10ab4:	eafffff3 	b	10a88 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0xd8>

00010ab8 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   10ab8:	e92d4010 	push	{r4, lr}
   10abc:	e1a04002 	mov	r4, r2
   10ac0:	ebffffba 	bl	109b0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10ac4:	e3a02001 	mov	r2, #1
   10ac8:	e2443001 	sub	r3, r4, #1
   10acc:	e0103312 	ands	r3, r0, r2, lsl r3
   10ad0:	11a02412 	lslne	r2, r2, r4
   10ad4:	12622000 	rsbne	r2, r2, #0
   10ad8:	11800002 	orrne	r0, r0, r2
   10adc:	e8bd8010 	pop	{r4, pc}

00010ae0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   10ae0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ae4:	e5905134 	ldr	r5, [r0, #308]	; 0x134
   10ae8:	e24dd034 	sub	sp, sp, #52	; 0x34
   10aec:	e3550000 	cmp	r5, #0
   10af0:	e58d0014 	str	r0, [sp, #20]
   10af4:	e58d1000 	str	r1, [sp]
   10af8:	0a000108 	beq	10f20 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x440>
   10afc:	e3a09000 	mov	r9, #0
   10b00:	e59f3440 	ldr	r3, [pc, #1088]	; 10f48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x468>
   10b04:	e1a07009 	mov	r7, r9
   10b08:	e1a02003 	mov	r2, r3
   10b0c:	e1a0a009 	mov	sl, r9
   10b10:	e1a0b009 	mov	fp, r9
   10b14:	e1a08009 	mov	r8, r9
   10b18:	e58d300c 	str	r3, [sp, #12]
   10b1c:	e59d3014 	ldr	r3, [sp, #20]
   10b20:	e58d9020 	str	r9, [sp, #32]
   10b24:	e2833f4e 	add	r3, r3, #312	; 0x138
   10b28:	e1d340b0 	ldrh	r4, [r3]
   10b2c:	e58d901c 	str	r9, [sp, #28]
   10b30:	e58d9004 	str	r9, [sp, #4]
   10b34:	e58d2010 	str	r2, [sp, #16]
   10b38:	e58d2018 	str	r2, [sp, #24]
   10b3c:	e58d2008 	str	r2, [sp, #8]
   10b40:	e3540000 	cmp	r4, #0
   10b44:	0a000024 	beq	10bdc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
   10b48:	e1d530d0 	ldrsb	r3, [r5]
   10b4c:	e2032003 	and	r2, r3, #3
   10b50:	e3520001 	cmp	r2, #1
   10b54:	0a00004e 	beq	10c94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1b4>
   10b58:	e3520002 	cmp	r2, #2
   10b5c:	0a000045 	beq	10c78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x198>
   10b60:	e3520000 	cmp	r2, #0
   10b64:	0a00003e 	beq	10c64 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x184>
   10b68:	e1d560d3 	ldrsb	r6, [r5, #3]
   10b6c:	e1d520d2 	ldrsb	r2, [r5, #2]
   10b70:	e1d510d1 	ldrsb	r1, [r5, #1]
   10b74:	e1a06806 	lsl	r6, r6, #16
   10b78:	e1866402 	orr	r6, r6, r2, lsl #8
   10b7c:	e1d520d4 	ldrsb	r2, [r5, #4]
   10b80:	e2444005 	sub	r4, r4, #5
   10b84:	e1866001 	orr	r6, r6, r1
   10b88:	e6ff4074 	uxth	r4, r4
   10b8c:	e1866c02 	orr	r6, r6, r2, lsl #24
   10b90:	e2855005 	add	r5, r5, #5
   10b94:	e20330fc 	and	r3, r3, #252	; 0xfc
   10b98:	e3530084 	cmp	r3, #132	; 0x84
   10b9c:	0a000024 	beq	10c34 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x154>
   10ba0:	e3530034 	cmp	r3, #52	; 0x34
   10ba4:	0a00003f 	beq	10ca8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1c8>
   10ba8:	ca000016 	bgt	10c08 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x128>
   10bac:	e3530008 	cmp	r3, #8
   10bb0:	0a00003e 	beq	10cb0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1d0>
   10bb4:	da00004c 	ble	10cec <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x20c>
   10bb8:	e3530014 	cmp	r3, #20
   10bbc:	058d6018 	streq	r6, [sp, #24]
   10bc0:	0affffde 	beq	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10bc4:	e3530024 	cmp	r3, #36	; 0x24
   10bc8:	e59d2008 	ldr	r2, [sp, #8]
   10bcc:	01a02006 	moveq	r2, r6
   10bd0:	e3540000 	cmp	r4, #0
   10bd4:	e58d2008 	str	r2, [sp, #8]
   10bd8:	1affffda 	bne	10b48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   10bdc:	e59d1014 	ldr	r1, [sp, #20]
   10be0:	e59d001c 	ldr	r0, [sp, #28]
   10be4:	e28b3007 	add	r3, fp, #7
   10be8:	e5810024 	str	r0, [r1, #36]	; 0x24
   10bec:	e59d0020 	ldr	r0, [sp, #32]
   10bf0:	e1a031a3 	lsr	r3, r3, #3
   10bf4:	e2812f4a 	add	r2, r1, #296	; 0x128
   10bf8:	e58100e8 	str	r0, [r1, #232]	; 0xe8
   10bfc:	e1c230b0 	strh	r3, [r2]
   10c00:	e28dd034 	add	sp, sp, #52	; 0x34
   10c04:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c08:	e3530074 	cmp	r3, #116	; 0x74
   10c0c:	01a0a006 	moveq	sl, r6
   10c10:	0affffca 	beq	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10c14:	da00003b 	ble	10d08 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x228>
   10c18:	e3530080 	cmp	r3, #128	; 0x80
   10c1c:	0a00002b 	beq	10cd0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f0>
   10c20:	e3530094 	cmp	r3, #148	; 0x94
   10c24:	e59d2004 	ldr	r2, [sp, #4]
   10c28:	01a02006 	moveq	r2, r6
   10c2c:	e58d2004 	str	r2, [sp, #4]
   10c30:	eaffffc2 	b	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10c34:	e3570000 	cmp	r7, #0
   10c38:	1affffe7 	bne	10bdc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
   10c3c:	e3a02008 	mov	r2, #8
   10c40:	e1a01008 	mov	r1, r8
   10c44:	e59d0000 	ldr	r0, [sp]
   10c48:	ebffff58 	bl	109b0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10c4c:	e3500000 	cmp	r0, #0
   10c50:	11500006 	cmpne	r0, r6
   10c54:	1affffe9 	bne	10c00 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x120>
   10c58:	e1a07006 	mov	r7, r6
   10c5c:	e3a0b008 	mov	fp, #8
   10c60:	eaffffb6 	b	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10c64:	e2444001 	sub	r4, r4, #1
   10c68:	e6ff4074 	uxth	r4, r4
   10c6c:	e2855001 	add	r5, r5, #1
   10c70:	e1a06008 	mov	r6, r8
   10c74:	eaffffc6 	b	10b94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   10c78:	e5d56001 	ldrb	r6, [r5, #1]
   10c7c:	e1d520d2 	ldrsb	r2, [r5, #2]
   10c80:	e2444003 	sub	r4, r4, #3
   10c84:	e6ff4074 	uxth	r4, r4
   10c88:	e1866402 	orr	r6, r6, r2, lsl #8
   10c8c:	e2855003 	add	r5, r5, #3
   10c90:	eaffffbf 	b	10b94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   10c94:	e2444002 	sub	r4, r4, #2
   10c98:	e1d560d1 	ldrsb	r6, [r5, #1]
   10c9c:	e6ff4074 	uxth	r4, r4
   10ca0:	e2855002 	add	r5, r5, #2
   10ca4:	eaffffba 	b	10b94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb4>
   10ca8:	e58d6010 	str	r6, [sp, #16]
   10cac:	eaffffa3 	b	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10cb0:	e3560036 	cmp	r6, #54	; 0x36
   10cb4:	ca000018 	bgt	10d1c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x23c>
   10cb8:	e3560030 	cmp	r6, #48	; 0x30
   10cbc:	aa00002d 	bge	10d78 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x298>
   10cc0:	e2466004 	sub	r6, r6, #4
   10cc4:	e3560001 	cmp	r6, #1
   10cc8:	93a09001 	movls	r9, #1
   10ccc:	eaffff9b 	b	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10cd0:	e2066003 	and	r6, r6, #3
   10cd4:	e3560002 	cmp	r6, #2
   10cd8:	0a000014 	beq	10d30 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x250>
   10cdc:	e59d3004 	ldr	r3, [sp, #4]
   10ce0:	e0060a93 	mul	r6, r3, sl
   10ce4:	e08bb006 	add	fp, fp, r6
   10ce8:	eaffff94 	b	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10cec:	e3530004 	cmp	r3, #4
   10cf0:	1affff92 	bne	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10cf4:	e3560009 	cmp	r6, #9
   10cf8:	1affff90 	bne	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10cfc:	e3590001 	cmp	r9, #1
   10d00:	03a09002 	moveq	r9, #2
   10d04:	eaffff8d 	b	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10d08:	e3530044 	cmp	r3, #68	; 0x44
   10d0c:	e59d200c 	ldr	r2, [sp, #12]
   10d10:	01a02006 	moveq	r2, r6
   10d14:	e58d200c 	str	r2, [sp, #12]
   10d18:	eaffff88 	b	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10d1c:	e3560039 	cmp	r6, #57	; 0x39
   10d20:	1affff86 	bne	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10d24:	e3590001 	cmp	r9, #1
   10d28:	03a09004 	moveq	r9, #4
   10d2c:	eaffff83 	b	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10d30:	e3590003 	cmp	r9, #3
   10d34:	0a000012 	beq	10d84 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2a4>
   10d38:	e3590004 	cmp	r9, #4
   10d3c:	0a00004e 	beq	10e7c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x39c>
   10d40:	e59d3004 	ldr	r3, [sp, #4]
   10d44:	e3590002 	cmp	r9, #2
   10d48:	e0060a93 	mul	r6, r3, sl
   10d4c:	1affffe4 	bne	10ce4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10d50:	e59d2014 	ldr	r2, [sp, #20]
   10d54:	e1a0100b 	mov	r1, fp
   10d58:	e5823104 	str	r3, [r2, #260]	; 0x104
   10d5c:	e59d0000 	ldr	r0, [sp]
   10d60:	e1a02006 	mov	r2, r6
   10d64:	ebffff11 	bl	109b0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10d68:	e59d2014 	ldr	r2, [sp, #20]
   10d6c:	e3a09001 	mov	r9, #1
   10d70:	e5820108 	str	r0, [r2, #264]	; 0x108
   10d74:	eaffffda 	b	10ce4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10d78:	e3590001 	cmp	r9, #1
   10d7c:	03a09003 	moveq	r9, #3
   10d80:	eaffff6e 	b	10b40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x60>
   10d84:	e59d3004 	ldr	r3, [sp, #4]
   10d88:	e3530000 	cmp	r3, #0
   10d8c:	0a00006a 	beq	10f3c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x45c>
   10d90:	e59d2018 	ldr	r2, [sp, #24]
   10d94:	e59f01ac 	ldr	r0, [pc, #428]	; 10f48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x468>
   10d98:	e59d1010 	ldr	r1, [sp, #16]
   10d9c:	e1520000 	cmp	r2, r0
   10da0:	e1a03002 	mov	r3, r2
   10da4:	01a03001 	moveq	r3, r1
   10da8:	e59fc198 	ldr	ip, [pc, #408]	; 10f48 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x468>
   10dac:	e59d1008 	ldr	r1, [sp, #8]
   10db0:	e59d000c 	ldr	r0, [sp, #12]
   10db4:	e151000c 	cmp	r1, ip
   10db8:	e1a02003 	mov	r2, r3
   10dbc:	e1a03001 	mov	r3, r1
   10dc0:	01a03000 	moveq	r3, r0
   10dc4:	e1a01003 	mov	r1, r3
   10dc8:	e59d001c 	ldr	r0, [sp, #28]
   10dcc:	e59dc014 	ldr	ip, [sp, #20]
   10dd0:	e0806080 	add	r6, r0, r0, lsl #1
   10dd4:	e58db01c 	str	fp, [sp, #28]
   10dd8:	e58d7024 	str	r7, [sp, #36]	; 0x24
   10ddc:	e58d5028 	str	r5, [sp, #40]	; 0x28
   10de0:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   10de4:	e3a09000 	mov	r9, #0
   10de8:	e1a0400b 	mov	r4, fp
   10dec:	e08c6106 	add	r6, ip, r6, lsl #2
   10df0:	e1a05000 	mov	r5, r0
   10df4:	e1a07002 	mov	r7, r2
   10df8:	e1a0b001 	mov	fp, r1
   10dfc:	ea00000d 	b	10e38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x358>
   10e00:	ebfffeea 	bl	109b0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10e04:	e2899001 	add	r9, r9, #1
   10e08:	e359000f 	cmp	r9, #15
   10e0c:	93a02000 	movls	r2, #0
   10e10:	83a02001 	movhi	r2, #1
   10e14:	e59d3004 	ldr	r3, [sp, #4]
   10e18:	e5860028 	str	r0, [r6, #40]	; 0x28
   10e1c:	e1530009 	cmp	r3, r9
   10e20:	93822001 	orrls	r2, r2, #1
   10e24:	e3520000 	cmp	r2, #0
   10e28:	e2855001 	add	r5, r5, #1
   10e2c:	e286600c 	add	r6, r6, #12
   10e30:	e084400a 	add	r4, r4, sl
   10e34:	1a000008 	bne	10e5c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x37c>
   10e38:	e3570000 	cmp	r7, #0
   10e3c:	e1a0200a 	mov	r2, sl
   10e40:	e1a01004 	mov	r1, r4
   10e44:	e586702c 	str	r7, [r6, #44]	; 0x2c
   10e48:	e586b030 	str	fp, [r6, #48]	; 0x30
   10e4c:	e59d0000 	ldr	r0, [sp]
   10e50:	aaffffea 	bge	10e00 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x320>
   10e54:	ebffff17 	bl	10ab8 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   10e58:	eaffffe9 	b	10e04 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x324>
   10e5c:	e59db01c 	ldr	fp, [sp, #28]
   10e60:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   10e64:	e58d501c 	str	r5, [sp, #28]
   10e68:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   10e6c:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   10e70:	e0060a93 	mul	r6, r3, sl
   10e74:	e3a09001 	mov	r9, #1
   10e78:	eaffff99 	b	10ce4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10e7c:	e59d2004 	ldr	r2, [sp, #4]
   10e80:	e3520000 	cmp	r2, #0
   10e84:	0a000029 	beq	10f30 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x450>
   10e88:	e59d1020 	ldr	r1, [sp, #32]
   10e8c:	e59d0014 	ldr	r0, [sp, #20]
   10e90:	e281303b 	add	r3, r1, #59	; 0x3b
   10e94:	e0803103 	add	r3, r0, r3, lsl #2
   10e98:	e58d7024 	str	r7, [sp, #36]	; 0x24
   10e9c:	e58d5028 	str	r5, [sp, #40]	; 0x28
   10ea0:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   10ea4:	e3a06000 	mov	r6, #0
   10ea8:	e1a07001 	mov	r7, r1
   10eac:	e1a04002 	mov	r4, r2
   10eb0:	e1a05003 	mov	r5, r3
   10eb4:	e1a0900b 	mov	r9, fp
   10eb8:	e58db020 	str	fp, [sp, #32]
   10ebc:	e59db000 	ldr	fp, [sp]
   10ec0:	e1a0200a 	mov	r2, sl
   10ec4:	e2866001 	add	r6, r6, #1
   10ec8:	e1a01009 	mov	r1, r9
   10ecc:	e1a0000b 	mov	r0, fp
   10ed0:	ebfffeb6 	bl	109b0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   10ed4:	e3560005 	cmp	r6, #5
   10ed8:	93a02000 	movls	r2, #0
   10edc:	83a02001 	movhi	r2, #1
   10ee0:	e1540006 	cmp	r4, r6
   10ee4:	93822001 	orrls	r2, r2, #1
   10ee8:	e3520000 	cmp	r2, #0
   10eec:	e2877001 	add	r7, r7, #1
   10ef0:	e089900a 	add	r9, r9, sl
   10ef4:	e4850004 	str	r0, [r5], #4
   10ef8:	0afffff0 	beq	10ec0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3e0>
   10efc:	e59d3004 	ldr	r3, [sp, #4]
   10f00:	e59db020 	ldr	fp, [sp, #32]
   10f04:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   10f08:	e58d7020 	str	r7, [sp, #32]
   10f0c:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   10f10:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   10f14:	e0060a93 	mul	r6, r3, sl
   10f18:	e3a09001 	mov	r9, #1
   10f1c:	eaffff70 	b	10ce4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10f20:	e3a020a2 	mov	r2, #162	; 0xa2
   10f24:	e59f1020 	ldr	r1, [pc, #32]	; 10f4c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x46c>
   10f28:	e59f0020 	ldr	r0, [pc, #32]	; 10f50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x470>
   10f2c:	eb004e33 	bl	24800 <assertion_failed>
   10f30:	e59d6004 	ldr	r6, [sp, #4]
   10f34:	e3a09001 	mov	r9, #1
   10f38:	eaffff69 	b	10ce4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10f3c:	e1a06008 	mov	r6, r8
   10f40:	e3a09001 	mov	r9, #1
   10f44:	eaffff66 	b	10ce4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x204>
   10f48:	f8a432eb 	.word	0xf8a432eb
   10f4c:	000405e4 	.word	0x000405e4
   10f50:	000405fc 	.word	0x000405fc

00010f54 <CUSBGamePadStandardDevice::Configure()>:
   10f54:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10f58:	e3a01021 	mov	r1, #33	; 0x21
   10f5c:	e24dd078 	sub	sp, sp, #120	; 0x78
   10f60:	e1a04000 	mov	r4, r0
   10f64:	ebfffa6e 	bl	f924 <CUSBFunction::GetDescriptor(unsigned char)>
   10f68:	e2505000 	subs	r5, r0, #0
   10f6c:	0a000003 	beq	10f80 <CUSBGamePadStandardDevice::Configure()+0x2c>
   10f70:	e5d50007 	ldrb	r0, [r5, #7]
   10f74:	e5d53008 	ldrb	r3, [r5, #8]
   10f78:	e1900403 	orrs	r0, r0, r3, lsl #8
   10f7c:	1a000006 	bne	10f9c <CUSBGamePadStandardDevice::Configure()+0x48>
   10f80:	e1a00004 	mov	r0, r4
   10f84:	e59f1158 	ldr	r1, [pc, #344]	; 110e4 <CUSBGamePadStandardDevice::Configure()+0x190>
   10f88:	ebfffa70 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   10f8c:	e3a05000 	mov	r5, #0
   10f90:	e1a00005 	mov	r0, r5
   10f94:	e28dd078 	add	sp, sp, #120	; 0x78
   10f98:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10f9c:	e2846f4e 	add	r6, r4, #312	; 0x138
   10fa0:	e1c600b0 	strh	r0, [r6]
   10fa4:	eb006833 	bl	2b078 <operator new[](unsigned int)>
   10fa8:	e5840134 	str	r0, [r4, #308]	; 0x134
   10fac:	e1a00004 	mov	r0, r4
   10fb0:	ebfffa50 	bl	f8f8 <CUSBFunction::GetHost() const>
   10fb4:	e1a07000 	mov	r7, r0
   10fb8:	e1a00004 	mov	r0, r4
   10fbc:	ebfffa42 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
   10fc0:	e1a08000 	mov	r8, r0
   10fc4:	e1a00004 	mov	r0, r4
   10fc8:	e5d55006 	ldrb	r5, [r5, #6]
   10fcc:	e1d6a0b0 	ldrh	sl, [r6]
   10fd0:	e5949134 	ldr	r9, [r4, #308]	; 0x134
   10fd4:	ebfffaa5 	bl	fa70 <CUSBFunction::GetInterfaceNumber() const>
   10fd8:	e3a03081 	mov	r3, #129	; 0x81
   10fdc:	e6ff0070 	uxth	r0, r0
   10fe0:	e58d000c 	str	r0, [sp, #12]
   10fe4:	e58d3008 	str	r3, [sp, #8]
   10fe8:	e58da004 	str	sl, [sp, #4]
   10fec:	e3a03000 	mov	r3, #0
   10ff0:	e58d9000 	str	r9, [sp]
   10ff4:	e1a02005 	mov	r2, r5
   10ff8:	e1a01008 	mov	r1, r8
   10ffc:	e1a00007 	mov	r0, r7
   11000:	eb000640 	bl	12908 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   11004:	e1d630b0 	ldrh	r3, [r6]
   11008:	e1500003 	cmp	r0, r3
   1100c:	0a000008 	beq	11034 <CUSBGamePadStandardDevice::Configure()+0xe0>
   11010:	e3a05000 	mov	r5, #0
   11014:	eb0056ec 	bl	26bcc <CLogger::Get()>
   11018:	e59f30c8 	ldr	r3, [pc, #200]	; 110e8 <CUSBGamePadStandardDevice::Configure()+0x194>
   1101c:	e3a02001 	mov	r2, #1
   11020:	e59f10bc 	ldr	r1, [pc, #188]	; 110e4 <CUSBGamePadStandardDevice::Configure()+0x190>
   11024:	eb005625 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11028:	e1a00005 	mov	r0, r5
   1102c:	e28dd078 	add	sp, sp, #120	; 0x78
   11030:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11034:	e3a02064 	mov	r2, #100	; 0x64
   11038:	e3a01000 	mov	r1, #0
   1103c:	e28d0014 	add	r0, sp, #20
   11040:	eb0063bb 	bl	29f34 <memset>
   11044:	e5943000 	ldr	r3, [r4]
   11048:	e28d1014 	add	r1, sp, #20
   1104c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11050:	e1a00004 	mov	r0, r4
   11054:	e12fff33 	blx	r3
   11058:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   1105c:	e3530000 	cmp	r3, #0
   11060:	1a000002 	bne	11070 <CUSBGamePadStandardDevice::Configure()+0x11c>
   11064:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   11068:	e3530000 	cmp	r3, #0
   1106c:	0a00000e 	beq	110ac <CUSBGamePadStandardDevice::Configure()+0x158>
   11070:	e2843f4a 	add	r3, r4, #296	; 0x128
   11074:	e1d330b0 	ldrh	r3, [r3]
   11078:	e3530000 	cmp	r3, #0
   1107c:	0a000014 	beq	110d4 <CUSBGamePadStandardDevice::Configure()+0x180>
   11080:	e1a00004 	mov	r0, r4
   11084:	eb001b17 	bl	17ce8 <CUSBGamePadDevice::Configure()>
   11088:	e2505000 	subs	r5, r0, #0
   1108c:	0a00000a 	beq	110bc <CUSBGamePadStandardDevice::Configure()+0x168>
   11090:	e5d43130 	ldrb	r3, [r4, #304]	; 0x130
   11094:	e3530000 	cmp	r3, #0
   11098:	0affffbc 	beq	10f90 <CUSBGamePadStandardDevice::Configure()+0x3c>
   1109c:	e1a00004 	mov	r0, r4
   110a0:	eb000559 	bl	1260c <CUSBHIDDevice::StartRequest()>
   110a4:	e1a05000 	mov	r5, r0
   110a8:	eaffffb8 	b	10f90 <CUSBGamePadStandardDevice::Configure()+0x3c>
   110ac:	e5945104 	ldr	r5, [r4, #260]	; 0x104
   110b0:	e3550000 	cmp	r5, #0
   110b4:	1affffed 	bne	11070 <CUSBGamePadStandardDevice::Configure()+0x11c>
   110b8:	eaffffb4 	b	10f90 <CUSBGamePadStandardDevice::Configure()+0x3c>
   110bc:	eb0056c2 	bl	26bcc <CLogger::Get()>
   110c0:	e59f3024 	ldr	r3, [pc, #36]	; 110ec <CUSBGamePadStandardDevice::Configure()+0x198>
   110c4:	e3a02001 	mov	r2, #1
   110c8:	e59f1014 	ldr	r1, [pc, #20]	; 110e4 <CUSBGamePadStandardDevice::Configure()+0x190>
   110cc:	eb0055fb 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   110d0:	eaffffae 	b	10f90 <CUSBGamePadStandardDevice::Configure()+0x3c>
   110d4:	e3a02085 	mov	r2, #133	; 0x85
   110d8:	e59f1010 	ldr	r1, [pc, #16]	; 110f0 <CUSBGamePadStandardDevice::Configure()+0x19c>
   110dc:	e59f0010 	ldr	r0, [pc, #16]	; 110f4 <CUSBGamePadStandardDevice::Configure()+0x1a0>
   110e0:	eb004dc6 	bl	24800 <assertion_failed>
   110e4:	000405d8 	.word	0x000405d8
   110e8:	00040618 	.word	0x00040618
   110ec:	0004045c 	.word	0x0004045c
   110f0:	000405e4 	.word	0x000405e4
   110f4:	0004063c 	.word	0x0004063c

000110f8 <CUSBGamePadDevice::GetProperties()>:
   110f8:	e3a00000 	mov	r0, #0
   110fc:	e12fff1e 	bx	lr

00011100 <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   11100:	e3a00000 	mov	r0, #0
   11104:	e12fff1e 	bx	lr

00011108 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   11108:	e3a00000 	mov	r0, #0
   1110c:	e12fff1e 	bx	lr

00011110 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   11110:	e92d4010 	push	{r4, lr}
   11114:	e1a04000 	mov	r4, r0
   11118:	e59f300c 	ldr	r3, [pc, #12]	; 1112c <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
   1111c:	e5803000 	str	r3, [r0]
   11120:	eb001b2d 	bl	17ddc <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11124:	e1a00004 	mov	r0, r4
   11128:	e8bd8010 	pop	{r4, pc}
   1112c:	00040658 	.word	0x00040658

00011130 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   11130:	e92d4010 	push	{r4, lr}
   11134:	e1a04000 	mov	r4, r0
   11138:	e59f3018 	ldr	r3, [pc, #24]	; 11158 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
   1113c:	e5803000 	str	r3, [r0]
   11140:	eb001b25 	bl	17ddc <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11144:	e1a00004 	mov	r0, r4
   11148:	e3a01f4d 	mov	r1, #308	; 0x134
   1114c:	eb0067d6 	bl	2b0ac <operator delete(void*, unsigned int)>
   11150:	e1a00004 	mov	r0, r4
   11154:	e8bd8010 	pop	{r4, pc}
   11158:	00040658 	.word	0x00040658

0001115c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   1115c:	e5d13000 	ldrb	r3, [r1]
   11160:	e3530030 	cmp	r3, #48	; 0x30
   11164:	1a00005e 	bne	112e4 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x188>
   11168:	e3a02000 	mov	r2, #0
   1116c:	e5d13003 	ldrb	r3, [r1, #3]
   11170:	e5802108 	str	r2, [r0, #264]	; 0x108
   11174:	e3130001 	tst	r3, #1
   11178:	13a02080 	movne	r2, #128	; 0x80
   1117c:	15802108 	strne	r2, [r0, #264]	; 0x108
   11180:	e3130002 	tst	r3, #2
   11184:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11188:	13822b01 	orrne	r2, r2, #1024	; 0x400
   1118c:	15802108 	strne	r2, [r0, #264]	; 0x108
   11190:	e3130004 	tst	r3, #4
   11194:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11198:	13822c01 	orrne	r2, r2, #256	; 0x100
   1119c:	15802108 	strne	r2, [r0, #264]	; 0x108
   111a0:	e3130008 	tst	r3, #8
   111a4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   111a8:	13822c02 	orrne	r2, r2, #512	; 0x200
   111ac:	15802108 	strne	r2, [r0, #264]	; 0x108
   111b0:	e3130040 	tst	r3, #64	; 0x40
   111b4:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   111b8:	13822040 	orrne	r2, r2, #64	; 0x40
   111bc:	15802108 	strne	r2, [r0, #264]	; 0x108
   111c0:	e3130080 	tst	r3, #128	; 0x80
   111c4:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   111c8:	13833010 	orrne	r3, r3, #16
   111cc:	15803108 	strne	r3, [r0, #264]	; 0x108
   111d0:	e5d13004 	ldrb	r3, [r1, #4]
   111d4:	e3130001 	tst	r3, #1
   111d8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   111dc:	13822702 	orrne	r2, r2, #524288	; 0x80000
   111e0:	15802108 	strne	r2, [r0, #264]	; 0x108
   111e4:	e3130002 	tst	r3, #2
   111e8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   111ec:	13822601 	orrne	r2, r2, #1048576	; 0x100000
   111f0:	15802108 	strne	r2, [r0, #264]	; 0x108
   111f4:	e3130004 	tst	r3, #4
   111f8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   111fc:	13822a02 	orrne	r2, r2, #8192	; 0x2000
   11200:	15802108 	strne	r2, [r0, #264]	; 0x108
   11204:	e3130008 	tst	r3, #8
   11208:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1120c:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   11210:	15802108 	strne	r2, [r0, #264]	; 0x108
   11214:	e3130010 	tst	r3, #16
   11218:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   1121c:	13822001 	orrne	r2, r2, #1
   11220:	15802108 	strne	r2, [r0, #264]	; 0x108
   11224:	e3130020 	tst	r3, #32
   11228:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   1122c:	13833b02 	orrne	r3, r3, #2048	; 0x800
   11230:	15803108 	strne	r3, [r0, #264]	; 0x108
   11234:	e5d13005 	ldrb	r3, [r1, #5]
   11238:	e3130001 	tst	r3, #1
   1123c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11240:	13822802 	orrne	r2, r2, #131072	; 0x20000
   11244:	15802108 	strne	r2, [r0, #264]	; 0x108
   11248:	e3130002 	tst	r3, #2
   1124c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11250:	13822902 	orrne	r2, r2, #32768	; 0x8000
   11254:	15802108 	strne	r2, [r0, #264]	; 0x108
   11258:	e3130004 	tst	r3, #4
   1125c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11260:	13822801 	orrne	r2, r2, #65536	; 0x10000
   11264:	15802108 	strne	r2, [r0, #264]	; 0x108
   11268:	e3130008 	tst	r3, #8
   1126c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11270:	13822701 	orrne	r2, r2, #262144	; 0x40000
   11274:	15802108 	strne	r2, [r0, #264]	; 0x108
   11278:	e3130040 	tst	r3, #64	; 0x40
   1127c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11280:	13822020 	orrne	r2, r2, #32
   11284:	15802108 	strne	r2, [r0, #264]	; 0x108
   11288:	e3130080 	tst	r3, #128	; 0x80
   1128c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11290:	13833008 	orrne	r3, r3, #8
   11294:	15803108 	strne	r3, [r0, #264]	; 0x108
   11298:	e5d12007 	ldrb	r2, [r1, #7]
   1129c:	e5d13006 	ldrb	r3, [r1, #6]
   112a0:	e1833402 	orr	r3, r3, r2, lsl #8
   112a4:	e1a03243 	asr	r3, r3, #4
   112a8:	e6ef3073 	uxtb	r3, r3
   112ac:	e5803028 	str	r3, [r0, #40]	; 0x28
   112b0:	e5d13008 	ldrb	r3, [r1, #8]
   112b4:	e26330ff 	rsb	r3, r3, #255	; 0xff
   112b8:	e5803034 	str	r3, [r0, #52]	; 0x34
   112bc:	e5d13009 	ldrb	r3, [r1, #9]
   112c0:	e5d1200a 	ldrb	r2, [r1, #10]
   112c4:	e1833402 	orr	r3, r3, r2, lsl #8
   112c8:	e1a03243 	asr	r3, r3, #4
   112cc:	e6ef3073 	uxtb	r3, r3
   112d0:	e5803040 	str	r3, [r0, #64]	; 0x40
   112d4:	e5d1300b 	ldrb	r3, [r1, #11]
   112d8:	e26330ff 	rsb	r3, r3, #255	; 0xff
   112dc:	e580304c 	str	r3, [r0, #76]	; 0x4c
   112e0:	e12fff1e 	bx	lr
   112e4:	e92d4010 	push	{r4, lr}
   112e8:	e1a04001 	mov	r4, r1
   112ec:	e24dd008 	sub	sp, sp, #8
   112f0:	eb005635 	bl	26bcc <CLogger::Get()>
   112f4:	e5d42000 	ldrb	r2, [r4]
   112f8:	e59f3014 	ldr	r3, [pc, #20]	; 11314 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1b8>
   112fc:	e58d2000 	str	r2, [sp]
   11300:	e59f1010 	ldr	r1, [pc, #16]	; 11318 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1bc>
   11304:	e3a02003 	mov	r2, #3
   11308:	eb00556c 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1130c:	e28dd008 	add	sp, sp, #8
   11310:	e8bd8010 	pop	{r4, pc}
   11314:	000406c4 	.word	0x000406c4
   11318:	0004069c 	.word	0x0004069c

0001131c <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   1131c:	e92d4070 	push	{r4, r5, r6, lr}
   11320:	e1a05000 	mov	r5, r0
   11324:	e1a06001 	mov	r6, r1
   11328:	e5d03131 	ldrb	r3, [r0, #305]	; 0x131
   1132c:	e24dd010 	sub	sp, sp, #16
   11330:	e59f4058 	ldr	r4, [pc, #88]	; 11390 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x74>
   11334:	e2832001 	add	r2, r3, #1
   11338:	e28de004 	add	lr, sp, #4
   1133c:	e203c00f 	and	ip, r3, #15
   11340:	e5c02131 	strb	r2, [r0, #305]	; 0x131
   11344:	e3a03000 	mov	r3, #0
   11348:	e8940007 	ldm	r4, {r0, r1, r2}
   1134c:	e88e0007 	stm	lr, {r0, r1, r2}
   11350:	e1a00005 	mov	r0, r5
   11354:	e1a0100e 	mov	r1, lr
   11358:	e3a0200c 	mov	r2, #12
   1135c:	e5cdc005 	strb	ip, [sp, #5]
   11360:	e5cd600f 	strb	r6, [sp, #15]
   11364:	eb00041e 	bl	123e4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11368:	e2505000 	subs	r5, r0, #0
   1136c:	1a000004 	bne	11384 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x68>
   11370:	eb005615 	bl	26bcc <CLogger::Get()>
   11374:	e2441010 	sub	r1, r4, #16
   11378:	e59f3014 	ldr	r3, [pc, #20]	; 11394 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0x78>
   1137c:	e3a02001 	mov	r2, #1
   11380:	eb00554e 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11384:	e1a00005 	mov	r0, r5
   11388:	e28dd010 	add	sp, sp, #16
   1138c:	e8bd8070 	pop	{r4, r5, r6, pc}
   11390:	000406ac 	.word	0x000406ac
   11394:	000406e0 	.word	0x000406e0

00011398 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   11398:	e92d4010 	push	{r4, lr}
   1139c:	e1a0e001 	mov	lr, r1
   113a0:	e24dd010 	sub	sp, sp, #16
   113a4:	e59f20cc 	ldr	r2, [pc, #204]	; 11478 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe0>
   113a8:	e28d3004 	add	r3, sp, #4
   113ac:	e1a0c000 	mov	ip, r0
   113b0:	e8920007 	ldm	r2, {r0, r1, r2}
   113b4:	e8a30003 	stmia	r3!, {r0, r1}
   113b8:	e35e0001 	cmp	lr, #1
   113bc:	e1c320b0 	strh	r2, [r3]
   113c0:	0a000023 	beq	11454 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xbc>
   113c4:	3a000007 	bcc	113e8 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   113c8:	e35e0002 	cmp	lr, #2
   113cc:	1a00001c 	bne	11444 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xac>
   113d0:	e3a01020 	mov	r1, #32
   113d4:	e3a02062 	mov	r2, #98	; 0x62
   113d8:	e3e03000 	mvn	r3, #0
   113dc:	e5cd1007 	strb	r1, [sp, #7]
   113e0:	e5cd2008 	strb	r2, [sp, #8]
   113e4:	e5cd3009 	strb	r3, [sp, #9]
   113e8:	e5dc3131 	ldrb	r3, [ip, #305]	; 0x131
   113ec:	e1a0000c 	mov	r0, ip
   113f0:	e2832001 	add	r2, r3, #1
   113f4:	e5cc2131 	strb	r2, [ip, #305]	; 0x131
   113f8:	e28d1004 	add	r1, sp, #4
   113fc:	e203c00f 	and	ip, r3, #15
   11400:	e3a0200a 	mov	r2, #10
   11404:	e3a03000 	mov	r3, #0
   11408:	e5cdc005 	strb	ip, [sp, #5]
   1140c:	eb0003f4 	bl	123e4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11410:	e2504000 	subs	r4, r0, #0
   11414:	0a000002 	beq	11424 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   11418:	e1a00004 	mov	r0, r4
   1141c:	e28dd010 	add	sp, sp, #16
   11420:	e8bd8010 	pop	{r4, pc}
   11424:	eb0055e8 	bl	26bcc <CLogger::Get()>
   11428:	e59f304c 	ldr	r3, [pc, #76]	; 1147c <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe4>
   1142c:	e3a02001 	mov	r2, #1
   11430:	e59f1048 	ldr	r1, [pc, #72]	; 11480 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xe8>
   11434:	eb005521 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11438:	e1a00004 	mov	r0, r4
   1143c:	e28dd010 	add	sp, sp, #16
   11440:	e8bd8010 	pop	{r4, pc}
   11444:	e3a04001 	mov	r4, #1
   11448:	e1a00004 	mov	r0, r4
   1144c:	e28dd010 	add	sp, sp, #16
   11450:	e8bd8010 	pop	{r4, pc}
   11454:	e3e00067 	mvn	r0, #103	; 0x67
   11458:	e3a01020 	mov	r1, #32
   1145c:	e3a02062 	mov	r2, #98	; 0x62
   11460:	e3e03000 	mvn	r3, #0
   11464:	e5cd000a 	strb	r0, [sp, #10]
   11468:	e5cd100b 	strb	r1, [sp, #11]
   1146c:	e5cd200c 	strb	r2, [sp, #12]
   11470:	e5cd300d 	strb	r3, [sp, #13]
   11474:	eaffffdb 	b	113e8 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x50>
   11478:	000406b8 	.word	0x000406b8
   1147c:	000406f4 	.word	0x000406f4
   11480:	0004069c 	.word	0x0004069c

00011484 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   11484:	e92d4010 	push	{r4, lr}
   11488:	e1a04000 	mov	r4, r0
   1148c:	eb001a40 	bl	17d94 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11490:	e3a03000 	mov	r3, #0
   11494:	e59f2024 	ldr	r2, [pc, #36]	; 114c0 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
   11498:	e1a00004 	mov	r0, r4
   1149c:	e5842000 	str	r2, [r4]
   114a0:	e3a01003 	mov	r1, #3
   114a4:	e1a02003 	mov	r2, r3
   114a8:	ebfff93b 	bl	f99c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   114ac:	e3a03000 	mov	r3, #0
   114b0:	e5c40130 	strb	r0, [r4, #304]	; 0x130
   114b4:	e5c43131 	strb	r3, [r4, #305]	; 0x131
   114b8:	e1a00004 	mov	r0, r4
   114bc:	e8bd8010 	pop	{r4, pc}
   114c0:	00040658 	.word	0x00040658

000114c4 <CUSBGamePadSwitchProDevice::Configure()>:
   114c4:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   114c8:	e28db01c 	add	fp, sp, #28
   114cc:	e24dd010 	sub	sp, sp, #16
   114d0:	e5d05130 	ldrb	r5, [r0, #304]	; 0x130
   114d4:	e3550000 	cmp	r5, #0
   114d8:	0a00003e 	beq	115d8 <CUSBGamePadSwitchProDevice::Configure()+0x114>
   114dc:	e3a03040 	mov	r3, #64	; 0x40
   114e0:	e2807f4a 	add	r7, r0, #296	; 0x128
   114e4:	e1c730b0 	strh	r3, [r7]
   114e8:	e1a04000 	mov	r4, r0
   114ec:	eb0019fd 	bl	17ce8 <CUSBGamePadDevice::Configure()>
   114f0:	e2505000 	subs	r5, r0, #0
   114f4:	0a00003c 	beq	115ec <CUSBGamePadSwitchProDevice::Configure()+0x128>
   114f8:	e3a03012 	mov	r3, #18
   114fc:	e3a06000 	mov	r6, #0
   11500:	e3a000ff 	mov	r0, #255	; 0xff
   11504:	e3a0c004 	mov	ip, #4
   11508:	e1d720b0 	ldrh	r2, [r7]
   1150c:	e5843104 	str	r3, [r4, #260]	; 0x104
   11510:	e2823007 	add	r3, r2, #7
   11514:	e3c33007 	bic	r3, r3, #7
   11518:	e04dd003 	sub	sp, sp, r3
   1151c:	e1a0100d 	mov	r1, sp
   11520:	e1a03006 	mov	r3, r6
   11524:	e584c024 	str	ip, [r4, #36]	; 0x24
   11528:	e5840030 	str	r0, [r4, #48]	; 0x30
   1152c:	e584003c 	str	r0, [r4, #60]	; 0x3c
   11530:	e5840048 	str	r0, [r4, #72]	; 0x48
   11534:	e5840054 	str	r0, [r4, #84]	; 0x54
   11538:	e58460e8 	str	r6, [r4, #232]	; 0xe8
   1153c:	e584602c 	str	r6, [r4, #44]	; 0x2c
   11540:	e5846038 	str	r6, [r4, #56]	; 0x38
   11544:	e5846044 	str	r6, [r4, #68]	; 0x44
   11548:	e5846050 	str	r6, [r4, #80]	; 0x50
   1154c:	e1a00004 	mov	r0, r4
   11550:	eb000400 	bl	12558 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   11554:	e3e0807f 	mvn	r8, #127	; 0x7f
   11558:	e3a0c003 	mov	ip, #3
   1155c:	e1a03006 	mov	r3, r6
   11560:	e3a02002 	mov	r2, #2
   11564:	e24b1028 	sub	r1, fp, #40	; 0x28
   11568:	e1a00004 	mov	r0, r4
   1156c:	e54b8028 	strb	r8, [fp, #-40]	; 0xffffffd8
   11570:	e54bc027 	strb	ip, [fp, #-39]	; 0xffffffd9
   11574:	eb00039a 	bl	123e4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11578:	e2505000 	subs	r5, r0, #0
   1157c:	0a000022 	beq	1160c <CUSBGamePadSwitchProDevice::Configure()+0x148>
   11580:	e1a03006 	mov	r3, r6
   11584:	e1d720b0 	ldrh	r2, [r7]
   11588:	e1a0100d 	mov	r1, sp
   1158c:	e1a00004 	mov	r0, r4
   11590:	eb0003f0 	bl	12558 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   11594:	e3500000 	cmp	r0, #0
   11598:	da000041 	ble	116a4 <CUSBGamePadSwitchProDevice::Configure()+0x1e0>
   1159c:	e5dd3000 	ldrb	r3, [sp]
   115a0:	e3530081 	cmp	r3, #129	; 0x81
   115a4:	1a000002 	bne	115b4 <CUSBGamePadSwitchProDevice::Configure()+0xf0>
   115a8:	e5dd3001 	ldrb	r3, [sp, #1]
   115ac:	e3530003 	cmp	r3, #3
   115b0:	0a00001d 	beq	1162c <CUSBGamePadSwitchProDevice::Configure()+0x168>
   115b4:	eb005584 	bl	26bcc <CLogger::Get()>
   115b8:	e59f31d0 	ldr	r3, [pc, #464]	; 11790 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   115bc:	e3a02001 	mov	r2, #1
   115c0:	e59f11cc 	ldr	r1, [pc, #460]	; 11794 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   115c4:	eb0054bd 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   115c8:	e3a05000 	mov	r5, #0
   115cc:	e1a00005 	mov	r0, r5
   115d0:	e24bd01c 	sub	sp, fp, #28
   115d4:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   115d8:	e59f11b4 	ldr	r1, [pc, #436]	; 11794 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   115dc:	ebfff8db 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   115e0:	e1a00005 	mov	r0, r5
   115e4:	e24bd01c 	sub	sp, fp, #28
   115e8:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   115ec:	eb005576 	bl	26bcc <CLogger::Get()>
   115f0:	e59f31a0 	ldr	r3, [pc, #416]	; 11798 <CUSBGamePadSwitchProDevice::Configure()+0x2d4>
   115f4:	e3a02001 	mov	r2, #1
   115f8:	e59f1194 	ldr	r1, [pc, #404]	; 11794 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   115fc:	eb0054af 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11600:	e1a00005 	mov	r0, r5
   11604:	e24bd01c 	sub	sp, fp, #28
   11608:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1160c:	eb00556e 	bl	26bcc <CLogger::Get()>
   11610:	e59f3178 	ldr	r3, [pc, #376]	; 11790 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   11614:	e3a02001 	mov	r2, #1
   11618:	e59f1174 	ldr	r1, [pc, #372]	; 11794 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   1161c:	eb0054a7 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11620:	e1a00005 	mov	r0, r5
   11624:	e24bd01c 	sub	sp, fp, #28
   11628:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1162c:	e3a0c002 	mov	ip, #2
   11630:	e1a03006 	mov	r3, r6
   11634:	e1a0200c 	mov	r2, ip
   11638:	e24b1024 	sub	r1, fp, #36	; 0x24
   1163c:	e1a00004 	mov	r0, r4
   11640:	e54b8024 	strb	r8, [fp, #-36]	; 0xffffffdc
   11644:	e54bc023 	strb	ip, [fp, #-35]	; 0xffffffdd
   11648:	eb000365 	bl	123e4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1164c:	e2505000 	subs	r5, r0, #0
   11650:	0a00001a 	beq	116c0 <CUSBGamePadSwitchProDevice::Configure()+0x1fc>
   11654:	e1a03006 	mov	r3, r6
   11658:	e1d720b0 	ldrh	r2, [r7]
   1165c:	e1a0100d 	mov	r1, sp
   11660:	e1a00004 	mov	r0, r4
   11664:	eb0003bb 	bl	12558 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   11668:	e3500000 	cmp	r0, #0
   1166c:	da000034 	ble	11744 <CUSBGamePadSwitchProDevice::Configure()+0x280>
   11670:	e5dd3000 	ldrb	r3, [sp]
   11674:	e3530081 	cmp	r3, #129	; 0x81
   11678:	1a000002 	bne	11688 <CUSBGamePadSwitchProDevice::Configure()+0x1c4>
   1167c:	e5dd3001 	ldrb	r3, [sp, #1]
   11680:	e3530002 	cmp	r3, #2
   11684:	0a000013 	beq	116d8 <CUSBGamePadSwitchProDevice::Configure()+0x214>
   11688:	eb00554f 	bl	26bcc <CLogger::Get()>
   1168c:	e59f3108 	ldr	r3, [pc, #264]	; 1179c <CUSBGamePadSwitchProDevice::Configure()+0x2d8>
   11690:	e3a02001 	mov	r2, #1
   11694:	e59f10f8 	ldr	r1, [pc, #248]	; 11794 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   11698:	eb005488 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1169c:	e3a05000 	mov	r5, #0
   116a0:	eaffffc9 	b	115cc <CUSBGamePadSwitchProDevice::Configure()+0x108>
   116a4:	eb005548 	bl	26bcc <CLogger::Get()>
   116a8:	e59f30f0 	ldr	r3, [pc, #240]	; 117a0 <CUSBGamePadSwitchProDevice::Configure()+0x2dc>
   116ac:	e3a02001 	mov	r2, #1
   116b0:	e59f10dc 	ldr	r1, [pc, #220]	; 11794 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   116b4:	e1a05006 	mov	r5, r6
   116b8:	eb005480 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   116bc:	eaffffc2 	b	115cc <CUSBGamePadSwitchProDevice::Configure()+0x108>
   116c0:	eb005541 	bl	26bcc <CLogger::Get()>
   116c4:	e59f30d0 	ldr	r3, [pc, #208]	; 1179c <CUSBGamePadSwitchProDevice::Configure()+0x2d8>
   116c8:	e3a02001 	mov	r2, #1
   116cc:	e59f10c0 	ldr	r1, [pc, #192]	; 11794 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   116d0:	eb00547a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   116d4:	eaffffbc 	b	115cc <CUSBGamePadSwitchProDevice::Configure()+0x108>
   116d8:	e3e0e07f 	mvn	lr, #127	; 0x7f
   116dc:	e3a0c004 	mov	ip, #4
   116e0:	e3a03000 	mov	r3, #0
   116e4:	e3a02002 	mov	r2, #2
   116e8:	e24b1020 	sub	r1, fp, #32
   116ec:	e1a00004 	mov	r0, r4
   116f0:	e54be020 	strb	lr, [fp, #-32]	; 0xffffffe0
   116f4:	e54bc01f 	strb	ip, [fp, #-31]	; 0xffffffe1
   116f8:	eb000339 	bl	123e4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   116fc:	e2505000 	subs	r5, r0, #0
   11700:	0a000016 	beq	11760 <CUSBGamePadSwitchProDevice::Configure()+0x29c>
   11704:	e5943000 	ldr	r3, [r4]
   11708:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   1170c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   11710:	e1a00004 	mov	r0, r4
   11714:	e12fff33 	blx	r3
   11718:	e1d720b0 	ldrh	r2, [r7]
   1171c:	e1a0100d 	mov	r1, sp
   11720:	e3a03000 	mov	r3, #0
   11724:	e1a00004 	mov	r0, r4
   11728:	eb00038a 	bl	12558 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   1172c:	e3500000 	cmp	r0, #0
   11730:	da000010 	ble	11778 <CUSBGamePadSwitchProDevice::Configure()+0x2b4>
   11734:	e1a00004 	mov	r0, r4
   11738:	eb0003b3 	bl	1260c <CUSBHIDDevice::StartRequest()>
   1173c:	e1a05000 	mov	r5, r0
   11740:	eaffffa1 	b	115cc <CUSBGamePadSwitchProDevice::Configure()+0x108>
   11744:	eb005520 	bl	26bcc <CLogger::Get()>
   11748:	e59f3054 	ldr	r3, [pc, #84]	; 117a4 <CUSBGamePadSwitchProDevice::Configure()+0x2e0>
   1174c:	e3a02001 	mov	r2, #1
   11750:	e59f103c 	ldr	r1, [pc, #60]	; 11794 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   11754:	e1a05006 	mov	r5, r6
   11758:	eb005458 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1175c:	eaffff9a 	b	115cc <CUSBGamePadSwitchProDevice::Configure()+0x108>
   11760:	eb005519 	bl	26bcc <CLogger::Get()>
   11764:	e59f303c 	ldr	r3, [pc, #60]	; 117a8 <CUSBGamePadSwitchProDevice::Configure()+0x2e4>
   11768:	e3a02001 	mov	r2, #1
   1176c:	e59f1020 	ldr	r1, [pc, #32]	; 11794 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   11770:	eb005452 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11774:	eaffff94 	b	115cc <CUSBGamePadSwitchProDevice::Configure()+0x108>
   11778:	eb005513 	bl	26bcc <CLogger::Get()>
   1177c:	e59f3028 	ldr	r3, [pc, #40]	; 117ac <CUSBGamePadSwitchProDevice::Configure()+0x2e8>
   11780:	e3a02001 	mov	r2, #1
   11784:	e59f1008 	ldr	r1, [pc, #8]	; 11794 <CUSBGamePadSwitchProDevice::Configure()+0x2d0>
   11788:	eb00544c 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1178c:	eaffffe8 	b	11734 <CUSBGamePadSwitchProDevice::Configure()+0x270>
   11790:	0004070c 	.word	0x0004070c
   11794:	0004069c 	.word	0x0004069c
   11798:	0004045c 	.word	0x0004045c
   1179c:	0004074c 	.word	0x0004074c
   117a0:	0004072c 	.word	0x0004072c
   117a4:	00040768 	.word	0x00040768
   117a8:	00040784 	.word	0x00040784
   117ac:	000407a4 	.word	0x000407a4

000117b0 <CUSBGamePadSwitchProDevice::GetProperties()>:
   117b0:	e3a0004b 	mov	r0, #75	; 0x4b
   117b4:	e12fff1e 	bx	lr

000117b8 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   117b8:	e92d4010 	push	{r4, lr}
   117bc:	e1a04000 	mov	r4, r0
   117c0:	e59f300c 	ldr	r3, [pc, #12]	; 117d4 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   117c4:	e5803000 	str	r3, [r0]
   117c8:	eb001983 	bl	17ddc <CUSBGamePadDevice::~CUSBGamePadDevice()>
   117cc:	e1a00004 	mov	r0, r4
   117d0:	e8bd8010 	pop	{r4, pc}
   117d4:	000407c8 	.word	0x000407c8

000117d8 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   117d8:	e92d4010 	push	{r4, lr}
   117dc:	e1a04000 	mov	r4, r0
   117e0:	e59f3018 	ldr	r3, [pc, #24]	; 11800 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   117e4:	e5803000 	str	r3, [r0]
   117e8:	eb00197b 	bl	17ddc <CUSBGamePadDevice::~CUSBGamePadDevice()>
   117ec:	e1a00004 	mov	r0, r4
   117f0:	e3a01e13 	mov	r1, #304	; 0x130
   117f4:	eb00662c 	bl	2b0ac <operator delete(void*, unsigned int)>
   117f8:	e1a00004 	mov	r0, r4
   117fc:	e8bd8010 	pop	{r4, pc}
   11800:	000407c8 	.word	0x000407c8

00011804 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   11804:	e3510000 	cmp	r1, #0
   11808:	e92d4010 	push	{r4, lr}
   1180c:	0a00003b 	beq	11900 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xfc>
   11810:	e5d13000 	ldrb	r3, [r1]
   11814:	e5d12001 	ldrb	r2, [r1, #1]
   11818:	e1833402 	orr	r3, r3, r2, lsl #8
   1181c:	e3530b05 	cmp	r3, #5120	; 0x1400
   11820:	1a00003a 	bne	11910 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x10c>
   11824:	e3a0e000 	mov	lr, #0
   11828:	e5d1c003 	ldrb	ip, [r1, #3]
   1182c:	e5d12002 	ldrb	r2, [r1, #2]
   11830:	e59f30e8 	ldr	r3, [pc, #232]	; 11920 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x11c>
   11834:	e182240c 	orr	r2, r2, ip, lsl #8
   11838:	e580e108 	str	lr, [r0, #264]	; 0x108
   1183c:	e283c040 	add	ip, r3, #64	; 0x40
   11840:	e3120001 	tst	r2, #1
   11844:	15934000 	ldrne	r4, [r3]
   11848:	1590e108 	ldrne	lr, [r0, #264]	; 0x108
   1184c:	e2833004 	add	r3, r3, #4
   11850:	118ee004 	orrne	lr, lr, r4
   11854:	1580e108 	strne	lr, [r0, #264]	; 0x108
   11858:	e15c0003 	cmp	ip, r3
   1185c:	e1a020a2 	lsr	r2, r2, #1
   11860:	1afffff6 	bne	11840 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x3c>
   11864:	e3a0e000 	mov	lr, #0
   11868:	e1a0200e 	mov	r2, lr
   1186c:	e5d13006 	ldrb	r3, [r1, #6]
   11870:	e5d14007 	ldrb	r4, [r1, #7]
   11874:	e1833404 	orr	r3, r3, r4, lsl #8
   11878:	e6bf3073 	sxth	r3, r3
   1187c:	e2833902 	add	r3, r3, #32768	; 0x8000
   11880:	e1a03423 	lsr	r3, r3, #8
   11884:	e0822082 	add	r2, r2, r2, lsl #1
   11888:	e28ee001 	add	lr, lr, #1
   1188c:	e0802102 	add	r2, r0, r2, lsl #2
   11890:	e35e0004 	cmp	lr, #4
   11894:	e5823028 	str	r3, [r2, #40]	; 0x28
   11898:	0a00000b 	beq	118cc <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xc8>
   1189c:	e081208e 	add	r2, r1, lr, lsl #1
   118a0:	e5d24007 	ldrb	r4, [r2, #7]
   118a4:	e5d23006 	ldrb	r3, [r2, #6]
   118a8:	e79c210e 	ldr	r2, [ip, lr, lsl #2]
   118ac:	e1833404 	orr	r3, r3, r4, lsl #8
   118b0:	e6bf3073 	sxth	r3, r3
   118b4:	e3c24002 	bic	r4, r2, #2
   118b8:	e2833902 	add	r3, r3, #32768	; 0x8000
   118bc:	e3540001 	cmp	r4, #1
   118c0:	e1a03423 	lsr	r3, r3, #8
   118c4:	026330ff 	rsbeq	r3, r3, #255	; 0xff
   118c8:	eaffffed 	b	11884 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x80>
   118cc:	e5d13004 	ldrb	r3, [r1, #4]
   118d0:	e353007f 	cmp	r3, #127	; 0x7f
   118d4:	e5803058 	str	r3, [r0, #88]	; 0x58
   118d8:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   118dc:	c3833008 	orrgt	r3, r3, #8
   118e0:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   118e4:	e5d13005 	ldrb	r3, [r1, #5]
   118e8:	e353007f 	cmp	r3, #127	; 0x7f
   118ec:	e5803064 	str	r3, [r0, #100]	; 0x64
   118f0:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   118f4:	c3833010 	orrgt	r3, r3, #16
   118f8:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   118fc:	e8bd8010 	pop	{r4, pc}
   11900:	e3a02077 	mov	r2, #119	; 0x77
   11904:	e59f1018 	ldr	r1, [pc, #24]	; 11924 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x120>
   11908:	e59f0018 	ldr	r0, [pc, #24]	; 11928 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x124>
   1190c:	eb004bbb 	bl	24800 <assertion_failed>
   11910:	e3a02078 	mov	r2, #120	; 0x78
   11914:	e59f1008 	ldr	r1, [pc, #8]	; 11924 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x120>
   11918:	e59f000c 	ldr	r0, [pc, #12]	; 1192c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x128>
   1191c:	eb004bb7 	bl	24800 <assertion_failed>
   11920:	0004080c 	.word	0x0004080c
   11924:	0004087c 	.word	0x0004087c
   11928:	000404b8 	.word	0x000404b8
   1192c:	00040894 	.word	0x00040894

00011930 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   11930:	e2913000 	adds	r3, r1, #0
   11934:	13a03001 	movne	r3, #1
   11938:	e352000e 	cmp	r2, #14
   1193c:	13a03000 	movne	r3, #0
   11940:	e2532000 	subs	r2, r3, #0
   11944:	012fff1e 	bxeq	lr
   11948:	e5d1c000 	ldrb	ip, [r1]
   1194c:	e35c0000 	cmp	ip, #0
   11950:	112fff1e 	bxne	lr
   11954:	e5d13001 	ldrb	r3, [r1, #1]
   11958:	e3530014 	cmp	r3, #20
   1195c:	112fff1e 	bxne	lr
   11960:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   11964:	e92d4070 	push	{r4, r5, r6, lr}
   11968:	e3530000 	cmp	r3, #0
   1196c:	e1a04000 	mov	r4, r0
   11970:	08bd8070 	popeq	{r4, r5, r6, pc}
   11974:	e1a05000 	mov	r5, r0
   11978:	e4953024 	ldr	r3, [r5], #36	; 0x24
   1197c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11980:	e12fff33 	blx	r3
   11984:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   11988:	e1a01005 	mov	r1, r5
   1198c:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   11990:	e2400001 	sub	r0, r0, #1
   11994:	e8bd4070 	pop	{r4, r5, r6, lr}
   11998:	e12fff13 	bx	r3

0001199c <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   1199c:	e3510004 	cmp	r1, #4
   119a0:	9a000001 	bls	119ac <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x10>
   119a4:	e3a00000 	mov	r0, #0
   119a8:	e12fff1e 	bx	lr
   119ac:	e3a0c003 	mov	ip, #3
   119b0:	e92d4010 	push	{r4, lr}
   119b4:	e3a0e001 	mov	lr, #1
   119b8:	e59f302c 	ldr	r3, [pc, #44]	; 119ec <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x50>
   119bc:	e24dd008 	sub	sp, sp, #8
   119c0:	e0831001 	add	r1, r3, r1
   119c4:	e5d140a4 	ldrb	r4, [r1, #164]	; 0xa4
   119c8:	e1a0200c 	mov	r2, ip
   119cc:	e3a03000 	mov	r3, #0
   119d0:	e28d1004 	add	r1, sp, #4
   119d4:	e5cd4006 	strb	r4, [sp, #6]
   119d8:	e5cdc005 	strb	ip, [sp, #5]
   119dc:	e5cde004 	strb	lr, [sp, #4]
   119e0:	eb00027f 	bl	123e4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   119e4:	e28dd008 	add	sp, sp, #8
   119e8:	e8bd8010 	pop	{r4, pc}
   119ec:	000407c0 	.word	0x000407c0

000119f0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   119f0:	e92d4030 	push	{r4, r5, lr}
   119f4:	e24dd00c 	sub	sp, sp, #12
   119f8:	e1a04001 	mov	r4, r1
   119fc:	e1a05000 	mov	r5, r0
   11a00:	e3a02008 	mov	r2, #8
   11a04:	e1a0000d 	mov	r0, sp
   11a08:	e3a01000 	mov	r1, #0
   11a0c:	eb006148 	bl	29f34 <memset>
   11a10:	e3a03008 	mov	r3, #8
   11a14:	e3540001 	cmp	r4, #1
   11a18:	e5cd3001 	strb	r3, [sp, #1]
   11a1c:	0a00000f 	beq	11a60 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x70>
   11a20:	3a000003 	bcc	11a34 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   11a24:	e3540002 	cmp	r4, #2
   11a28:	1a000008 	bne	11a50 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x60>
   11a2c:	e3e03000 	mvn	r3, #0
   11a30:	e5cd3003 	strb	r3, [sp, #3]
   11a34:	e1a0100d 	mov	r1, sp
   11a38:	e1a00005 	mov	r0, r5
   11a3c:	e3a03000 	mov	r3, #0
   11a40:	e3a02008 	mov	r2, #8
   11a44:	eb000266 	bl	123e4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11a48:	e28dd00c 	add	sp, sp, #12
   11a4c:	e8bd8030 	pop	{r4, r5, pc}
   11a50:	e3a020e5 	mov	r2, #229	; 0xe5
   11a54:	e59f1010 	ldr	r1, [pc, #16]	; 11a6c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   11a58:	e59f0010 	ldr	r0, [pc, #16]	; 11a70 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x80>
   11a5c:	eb004b67 	bl	24800 <assertion_failed>
   11a60:	e3e03000 	mvn	r3, #0
   11a64:	e5cd3004 	strb	r3, [sp, #4]
   11a68:	eafffff1 	b	11a34 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x44>
   11a6c:	0004087c 	.word	0x0004087c
   11a70:	0003fd5c 	.word	0x0003fd5c

00011a74 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   11a74:	e92d4010 	push	{r4, lr}
   11a78:	e1a04000 	mov	r4, r0
   11a7c:	eb0018c4 	bl	17d94 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11a80:	e59f3008 	ldr	r3, [pc, #8]	; 11a90 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   11a84:	e1a00004 	mov	r0, r4
   11a88:	e5843000 	str	r3, [r4]
   11a8c:	e8bd8010 	pop	{r4, pc}
   11a90:	000407c8 	.word	0x000407c8

00011a94 <CUSBGamePadXbox360Device::Configure()>:
   11a94:	e3a0200e 	mov	r2, #14
   11a98:	e2803f4a 	add	r3, r0, #296	; 0x128
   11a9c:	e92d4070 	push	{r4, r5, r6, lr}
   11aa0:	e1c320b0 	strh	r2, [r3]
   11aa4:	e1a04000 	mov	r4, r0
   11aa8:	eb00188e 	bl	17ce8 <CUSBGamePadDevice::Configure()>
   11aac:	e2505000 	subs	r5, r0, #0
   11ab0:	0a00001e 	beq	11b30 <CUSBGamePadXbox360Device::Configure()+0x9c>
   11ab4:	e3a03000 	mov	r3, #0
   11ab8:	e3a020ff 	mov	r2, #255	; 0xff
   11abc:	e3a0c012 	mov	ip, #18
   11ac0:	e3a00006 	mov	r0, #6
   11ac4:	e5941000 	ldr	r1, [r4]
   11ac8:	e5840024 	str	r0, [r4, #36]	; 0x24
   11acc:	e584302c 	str	r3, [r4, #44]	; 0x2c
   11ad0:	e5843038 	str	r3, [r4, #56]	; 0x38
   11ad4:	e5843044 	str	r3, [r4, #68]	; 0x44
   11ad8:	e5843050 	str	r3, [r4, #80]	; 0x50
   11adc:	e584305c 	str	r3, [r4, #92]	; 0x5c
   11ae0:	e5843068 	str	r3, [r4, #104]	; 0x68
   11ae4:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   11ae8:	e584c104 	str	ip, [r4, #260]	; 0x104
   11aec:	e5913034 	ldr	r3, [r1, #52]	; 0x34
   11af0:	e5842030 	str	r2, [r4, #48]	; 0x30
   11af4:	e584203c 	str	r2, [r4, #60]	; 0x3c
   11af8:	e5842048 	str	r2, [r4, #72]	; 0x48
   11afc:	e5842054 	str	r2, [r4, #84]	; 0x54
   11b00:	e5842060 	str	r2, [r4, #96]	; 0x60
   11b04:	e584206c 	str	r2, [r4, #108]	; 0x6c
   11b08:	e5d4112c 	ldrb	r1, [r4, #300]	; 0x12c
   11b0c:	e1a00004 	mov	r0, r4
   11b10:	e12fff33 	blx	r3
   11b14:	e2505000 	subs	r5, r0, #0
   11b18:	1a000001 	bne	11b24 <CUSBGamePadXbox360Device::Configure()+0x90>
   11b1c:	e1a00005 	mov	r0, r5
   11b20:	e8bd8070 	pop	{r4, r5, r6, pc}
   11b24:	e1a00004 	mov	r0, r4
   11b28:	e8bd4070 	pop	{r4, r5, r6, lr}
   11b2c:	ea0002b6 	b	1260c <CUSBHIDDevice::StartRequest()>
   11b30:	eb005425 	bl	26bcc <CLogger::Get()>
   11b34:	e59f3010 	ldr	r3, [pc, #16]	; 11b4c <CUSBGamePadXbox360Device::Configure()+0xb8>
   11b38:	e3a02001 	mov	r2, #1
   11b3c:	e59f100c 	ldr	r1, [pc, #12]	; 11b50 <CUSBGamePadXbox360Device::Configure()+0xbc>
   11b40:	eb00535e 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11b44:	e1a00005 	mov	r0, r5
   11b48:	e8bd8070 	pop	{r4, r5, r6, pc}
   11b4c:	0004045c 	.word	0x0004045c
   11b50:	0004086c 	.word	0x0004086c

00011b54 <CUSBGamePadXbox360Device::GetProperties()>:
   11b54:	e3a0000b 	mov	r0, #11
   11b58:	e12fff1e 	bx	lr

00011b5c <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   11b5c:	e3a02000 	mov	r2, #0
   11b60:	e5d13004 	ldrb	r3, [r1, #4]
   11b64:	e5802108 	str	r2, [r0, #264]	; 0x108
   11b68:	e3130004 	tst	r3, #4
   11b6c:	13a02901 	movne	r2, #16384	; 0x4000
   11b70:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b74:	e3130008 	tst	r3, #8
   11b78:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b7c:	13822b02 	orrne	r2, r2, #2048	; 0x800
   11b80:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b84:	e3130010 	tst	r3, #16
   11b88:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b8c:	13822c02 	orrne	r2, r2, #512	; 0x200
   11b90:	15802108 	strne	r2, [r0, #264]	; 0x108
   11b94:	e3130020 	tst	r3, #32
   11b98:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11b9c:	13822c01 	orrne	r2, r2, #256	; 0x100
   11ba0:	15802108 	strne	r2, [r0, #264]	; 0x108
   11ba4:	e3130040 	tst	r3, #64	; 0x40
   11ba8:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11bac:	13822b01 	orrne	r2, r2, #1024	; 0x400
   11bb0:	15802108 	strne	r2, [r0, #264]	; 0x108
   11bb4:	e1b033a3 	lsrs	r3, r3, #7
   11bb8:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11bbc:	13833080 	orrne	r3, r3, #128	; 0x80
   11bc0:	15803108 	strne	r3, [r0, #264]	; 0x108
   11bc4:	e5d13005 	ldrb	r3, [r1, #5]
   11bc8:	e3130001 	tst	r3, #1
   11bcc:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11bd0:	13822902 	orrne	r2, r2, #32768	; 0x8000
   11bd4:	15802108 	strne	r2, [r0, #264]	; 0x108
   11bd8:	e3130002 	tst	r3, #2
   11bdc:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11be0:	13822802 	orrne	r2, r2, #131072	; 0x20000
   11be4:	15802108 	strne	r2, [r0, #264]	; 0x108
   11be8:	e3130004 	tst	r3, #4
   11bec:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11bf0:	13822701 	orrne	r2, r2, #262144	; 0x40000
   11bf4:	15802108 	strne	r2, [r0, #264]	; 0x108
   11bf8:	e3130008 	tst	r3, #8
   11bfc:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11c00:	13822801 	orrne	r2, r2, #65536	; 0x10000
   11c04:	15802108 	strne	r2, [r0, #264]	; 0x108
   11c08:	e3130010 	tst	r3, #16
   11c0c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11c10:	13822020 	orrne	r2, r2, #32
   11c14:	15802108 	strne	r2, [r0, #264]	; 0x108
   11c18:	e3130020 	tst	r3, #32
   11c1c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11c20:	13822040 	orrne	r2, r2, #64	; 0x40
   11c24:	15802108 	strne	r2, [r0, #264]	; 0x108
   11c28:	e3130040 	tst	r3, #64	; 0x40
   11c2c:	15902108 	ldrne	r2, [r0, #264]	; 0x108
   11c30:	13822a01 	orrne	r2, r2, #4096	; 0x1000
   11c34:	15802108 	strne	r2, [r0, #264]	; 0x108
   11c38:	e1b033a3 	lsrs	r3, r3, #7
   11c3c:	15903108 	ldrne	r3, [r0, #264]	; 0x108
   11c40:	13833a02 	orrne	r3, r3, #8192	; 0x2000
   11c44:	15803108 	strne	r3, [r0, #264]	; 0x108
   11c48:	e5d12007 	ldrb	r2, [r1, #7]
   11c4c:	e5d13006 	ldrb	r3, [r1, #6]
   11c50:	e1833402 	orr	r3, r3, r2, lsl #8
   11c54:	e1a03143 	asr	r3, r3, #2
   11c58:	e353007f 	cmp	r3, #127	; 0x7f
   11c5c:	e5803058 	str	r3, [r0, #88]	; 0x58
   11c60:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   11c64:	c3833008 	orrgt	r3, r3, #8
   11c68:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   11c6c:	e5d12009 	ldrb	r2, [r1, #9]
   11c70:	e5d13008 	ldrb	r3, [r1, #8]
   11c74:	e1833402 	orr	r3, r3, r2, lsl #8
   11c78:	e1a03143 	asr	r3, r3, #2
   11c7c:	e353007f 	cmp	r3, #127	; 0x7f
   11c80:	e5803064 	str	r3, [r0, #100]	; 0x64
   11c84:	c5903108 	ldrgt	r3, [r0, #264]	; 0x108
   11c88:	c3833010 	orrgt	r3, r3, #16
   11c8c:	c5803108 	strgt	r3, [r0, #264]	; 0x108
   11c90:	e5d1200b 	ldrb	r2, [r1, #11]
   11c94:	e5d1300a 	ldrb	r3, [r1, #10]
   11c98:	e1833402 	orr	r3, r3, r2, lsl #8
   11c9c:	e6bf3073 	sxth	r3, r3
   11ca0:	e2833902 	add	r3, r3, #32768	; 0x8000
   11ca4:	e1a03423 	lsr	r3, r3, #8
   11ca8:	e5803028 	str	r3, [r0, #40]	; 0x28
   11cac:	e5d1200d 	ldrb	r2, [r1, #13]
   11cb0:	e5d1300c 	ldrb	r3, [r1, #12]
   11cb4:	e1833402 	orr	r3, r3, r2, lsl #8
   11cb8:	e6bf3073 	sxth	r3, r3
   11cbc:	e2833902 	add	r3, r3, #32768	; 0x8000
   11cc0:	e1a03423 	lsr	r3, r3, #8
   11cc4:	e26330ff 	rsb	r3, r3, #255	; 0xff
   11cc8:	e5803034 	str	r3, [r0, #52]	; 0x34
   11ccc:	e5d1200f 	ldrb	r2, [r1, #15]
   11cd0:	e5d1300e 	ldrb	r3, [r1, #14]
   11cd4:	e1833402 	orr	r3, r3, r2, lsl #8
   11cd8:	e6bf3073 	sxth	r3, r3
   11cdc:	e2833902 	add	r3, r3, #32768	; 0x8000
   11ce0:	e1a03423 	lsr	r3, r3, #8
   11ce4:	e5803040 	str	r3, [r0, #64]	; 0x40
   11ce8:	e5d13010 	ldrb	r3, [r1, #16]
   11cec:	e5d12011 	ldrb	r2, [r1, #17]
   11cf0:	e1833402 	orr	r3, r3, r2, lsl #8
   11cf4:	e6bf3073 	sxth	r3, r3
   11cf8:	e2833902 	add	r3, r3, #32768	; 0x8000
   11cfc:	e1a03423 	lsr	r3, r3, #8
   11d00:	e26330ff 	rsb	r3, r3, #255	; 0xff
   11d04:	e580304c 	str	r3, [r0, #76]	; 0x4c
   11d08:	e12fff1e 	bx	lr

00011d0c <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   11d0c:	e92d4010 	push	{r4, lr}
   11d10:	e1a04000 	mov	r4, r0
   11d14:	e59f300c 	ldr	r3, [pc, #12]	; 11d28 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   11d18:	e5803000 	str	r3, [r0]
   11d1c:	eb00182e 	bl	17ddc <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11d20:	e1a00004 	mov	r0, r4
   11d24:	e8bd8010 	pop	{r4, pc}
   11d28:	000408c0 	.word	0x000408c0

00011d2c <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   11d2c:	e92d4010 	push	{r4, lr}
   11d30:	e1a04000 	mov	r4, r0
   11d34:	e59f3018 	ldr	r3, [pc, #24]	; 11d54 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   11d38:	e5803000 	str	r3, [r0]
   11d3c:	eb001826 	bl	17ddc <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11d40:	e1a00004 	mov	r0, r4
   11d44:	e3a01f4d 	mov	r1, #308	; 0x134
   11d48:	eb0064d7 	bl	2b0ac <operator delete(void*, unsigned int)>
   11d4c:	e1a00004 	mov	r0, r4
   11d50:	e8bd8010 	pop	{r4, pc}
   11d54:	000408c0 	.word	0x000408c0

00011d58 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   11d58:	e2513000 	subs	r3, r1, #0
   11d5c:	012fff1e 	bxeq	lr
   11d60:	e92d4030 	push	{r4, r5, lr}
   11d64:	e3520006 	cmp	r2, #6
   11d68:	e24dd014 	sub	sp, sp, #20
   11d6c:	e1a04000 	mov	r4, r0
   11d70:	e1a0c003 	mov	ip, r3
   11d74:	0a00000b 	beq	11da8 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x50>
   11d78:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   11d7c:	e2933000 	adds	r3, r3, #0
   11d80:	13a03001 	movne	r3, #1
   11d84:	e3520012 	cmp	r2, #18
   11d88:	13a03000 	movne	r3, #0
   11d8c:	e3530000 	cmp	r3, #0
   11d90:	0a000002 	beq	11da0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11d94:	e5dc3000 	ldrb	r3, [ip]
   11d98:	e3530020 	cmp	r3, #32
   11d9c:	0a00001b 	beq	11e10 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xb8>
   11da0:	e28dd014 	add	sp, sp, #20
   11da4:	e8bd8030 	pop	{r4, r5, pc}
   11da8:	e5d33000 	ldrb	r3, [r3]
   11dac:	e3530007 	cmp	r3, #7
   11db0:	1afffffa 	bne	11da0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11db4:	e5dc3001 	ldrb	r3, [ip, #1]
   11db8:	e3530030 	cmp	r3, #48	; 0x30
   11dbc:	1afffff7 	bne	11da0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11dc0:	e1a0e00d 	mov	lr, sp
   11dc4:	e59f506c 	ldr	r5, [pc, #108]	; 11e38 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
   11dc8:	e5dcc002 	ldrb	ip, [ip, #2]
   11dcc:	e895000f 	ldm	r5, {r0, r1, r2, r3}
   11dd0:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   11dd4:	e1a00004 	mov	r0, r4
   11dd8:	e5ce3000 	strb	r3, [lr]
   11ddc:	e3a0200d 	mov	r2, #13
   11de0:	e3a03000 	mov	r3, #0
   11de4:	e1a0100d 	mov	r1, sp
   11de8:	e5cdc002 	strb	ip, [sp, #2]
   11dec:	eb0001a1 	bl	12478 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   11df0:	e3500000 	cmp	r0, #0
   11df4:	1affffe9 	bne	11da0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11df8:	eb005373 	bl	26bcc <CLogger::Get()>
   11dfc:	e2851010 	add	r1, r5, #16
   11e00:	e59f3034 	ldr	r3, [pc, #52]	; 11e3c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   11e04:	e3a02001 	mov	r2, #1
   11e08:	eb0052ac 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11e0c:	eaffffe3 	b	11da0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11e10:	e1a05000 	mov	r5, r0
   11e14:	e4953024 	ldr	r3, [r5], #36	; 0x24
   11e18:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   11e1c:	e12fff33 	blx	r3
   11e20:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   11e24:	e1a01005 	mov	r1, r5
   11e28:	e2400001 	sub	r0, r0, #1
   11e2c:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   11e30:	e12fff33 	blx	r3
   11e34:	eaffffd9 	b	11da0 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   11e38:	00040904 	.word	0x00040904
   11e3c:	0004093c 	.word	0x0004093c

00011e40 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   11e40:	e92d4010 	push	{r4, lr}
   11e44:	e24dd010 	sub	sp, sp, #16
   11e48:	e1a0c00d 	mov	ip, sp
   11e4c:	e1a04001 	mov	r4, r1
   11e50:	e59f3070 	ldr	r3, [pc, #112]	; 11ec8 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x88>
   11e54:	e1a0e000 	mov	lr, r0
   11e58:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   11e5c:	e8ac0007 	stmia	ip!, {r0, r1, r2}
   11e60:	e3540001 	cmp	r4, #1
   11e64:	e5cc3000 	strb	r3, [ip]
   11e68:	0a000013 	beq	11ebc <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   11e6c:	3a000003 	bcc	11e80 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   11e70:	e3540002 	cmp	r4, #2
   11e74:	1a00000c 	bne	11eac <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x6c>
   11e78:	e3e03000 	mvn	r3, #0
   11e7c:	e5cd3008 	strb	r3, [sp, #8]
   11e80:	e5dec130 	ldrb	ip, [lr, #304]	; 0x130
   11e84:	e1a0100d 	mov	r1, sp
   11e88:	e28c3001 	add	r3, ip, #1
   11e8c:	e5ce3130 	strb	r3, [lr, #304]	; 0x130
   11e90:	e1a0000e 	mov	r0, lr
   11e94:	e3a03000 	mov	r3, #0
   11e98:	e3a0200d 	mov	r2, #13
   11e9c:	e5cdc002 	strb	ip, [sp, #2]
   11ea0:	eb00014f 	bl	123e4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11ea4:	e28dd010 	add	sp, sp, #16
   11ea8:	e8bd8010 	pop	{r4, pc}
   11eac:	e3a020ee 	mov	r2, #238	; 0xee
   11eb0:	e59f1014 	ldr	r1, [pc, #20]	; 11ecc <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   11eb4:	e59f0014 	ldr	r0, [pc, #20]	; 11ed0 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x90>
   11eb8:	eb004a50 	bl	24800 <assertion_failed>
   11ebc:	e3e03000 	mvn	r3, #0
   11ec0:	e5cd3009 	strb	r3, [sp, #9]
   11ec4:	eaffffed 	b	11e80 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x40>
   11ec8:	00040924 	.word	0x00040924
   11ecc:	00040950 	.word	0x00040950
   11ed0:	0003fd5c 	.word	0x0003fd5c

00011ed4 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   11ed4:	e92d4010 	push	{r4, lr}
   11ed8:	e1a04000 	mov	r4, r0
   11edc:	eb0017ac 	bl	17d94 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11ee0:	e3a02000 	mov	r2, #0
   11ee4:	e59f300c 	ldr	r3, [pc, #12]	; 11ef8 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   11ee8:	e5c42130 	strb	r2, [r4, #304]	; 0x130
   11eec:	e5843000 	str	r3, [r4]
   11ef0:	e1a00004 	mov	r0, r4
   11ef4:	e8bd8010 	pop	{r4, pc}
   11ef8:	000408c0 	.word	0x000408c0

00011efc <CUSBGamePadXboxOneDevice::Configure()>:
   11efc:	e3a02040 	mov	r2, #64	; 0x40
   11f00:	e92d4070 	push	{r4, r5, r6, lr}
   11f04:	e2803f4a 	add	r3, r0, #296	; 0x128
   11f08:	e24dd008 	sub	sp, sp, #8
   11f0c:	e1c320b0 	strh	r2, [r3]
   11f10:	e1a04000 	mov	r4, r0
   11f14:	eb001773 	bl	17ce8 <CUSBGamePadDevice::Configure()>
   11f18:	e2505000 	subs	r5, r0, #0
   11f1c:	0a00002a 	beq	11fcc <CUSBGamePadXboxOneDevice::Configure()+0xd0>
   11f20:	e3a03000 	mov	r3, #0
   11f24:	e3a020ff 	mov	r2, #255	; 0xff
   11f28:	e3a01010 	mov	r1, #16
   11f2c:	e3a0c006 	mov	ip, #6
   11f30:	e59f60b4 	ldr	r6, [pc, #180]	; 11fec <CUSBGamePadXboxOneDevice::Configure()+0xf0>
   11f34:	e5841104 	str	r1, [r4, #260]	; 0x104
   11f38:	e5842030 	str	r2, [r4, #48]	; 0x30
   11f3c:	e8960003 	ldm	r6, {r0, r1}
   11f40:	e584203c 	str	r2, [r4, #60]	; 0x3c
   11f44:	e58d0000 	str	r0, [sp]
   11f48:	e5cd1004 	strb	r1, [sp, #4]
   11f4c:	e5842048 	str	r2, [r4, #72]	; 0x48
   11f50:	e5842054 	str	r2, [r4, #84]	; 0x54
   11f54:	e5842060 	str	r2, [r4, #96]	; 0x60
   11f58:	e584206c 	str	r2, [r4, #108]	; 0x6c
   11f5c:	e584c024 	str	ip, [r4, #36]	; 0x24
   11f60:	e584302c 	str	r3, [r4, #44]	; 0x2c
   11f64:	e5843038 	str	r3, [r4, #56]	; 0x38
   11f68:	e5843044 	str	r3, [r4, #68]	; 0x44
   11f6c:	e5843050 	str	r3, [r4, #80]	; 0x50
   11f70:	e584305c 	str	r3, [r4, #92]	; 0x5c
   11f74:	e5843068 	str	r3, [r4, #104]	; 0x68
   11f78:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   11f7c:	e3a02005 	mov	r2, #5
   11f80:	e1a0100d 	mov	r1, sp
   11f84:	e1a00004 	mov	r0, r4
   11f88:	eb000115 	bl	123e4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11f8c:	e2505000 	subs	r5, r0, #0
   11f90:	0a000005 	beq	11fac <CUSBGamePadXboxOneDevice::Configure()+0xb0>
   11f94:	e1a00004 	mov	r0, r4
   11f98:	eb00019b 	bl	1260c <CUSBHIDDevice::StartRequest()>
   11f9c:	e1a05000 	mov	r5, r0
   11fa0:	e1a00005 	mov	r0, r5
   11fa4:	e28dd008 	add	sp, sp, #8
   11fa8:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fac:	eb005306 	bl	26bcc <CLogger::Get()>
   11fb0:	e2461020 	sub	r1, r6, #32
   11fb4:	e59f3034 	ldr	r3, [pc, #52]	; 11ff0 <CUSBGamePadXboxOneDevice::Configure()+0xf4>
   11fb8:	e3a02001 	mov	r2, #1
   11fbc:	eb00523f 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11fc0:	e1a00005 	mov	r0, r5
   11fc4:	e28dd008 	add	sp, sp, #8
   11fc8:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fcc:	eb0052fe 	bl	26bcc <CLogger::Get()>
   11fd0:	e59f301c 	ldr	r3, [pc, #28]	; 11ff4 <CUSBGamePadXboxOneDevice::Configure()+0xf8>
   11fd4:	e3a02001 	mov	r2, #1
   11fd8:	e59f1018 	ldr	r1, [pc, #24]	; 11ff8 <CUSBGamePadXboxOneDevice::Configure()+0xfc>
   11fdc:	eb005237 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11fe0:	e1a00005 	mov	r0, r5
   11fe4:	e28dd008 	add	sp, sp, #8
   11fe8:	e8bd8070 	pop	{r4, r5, r6, pc}
   11fec:	00040934 	.word	0x00040934
   11ff0:	00040968 	.word	0x00040968
   11ff4:	0004045c 	.word	0x0004045c
   11ff8:	00040914 	.word	0x00040914

00011ffc <CUSBGamePadXboxOneDevice::GetProperties()>:
   11ffc:	e3a00009 	mov	r0, #9
   12000:	e12fff1e 	bx	lr

00012004 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   12004:	e92d4070 	push	{r4, r5, r6, lr}
   12008:	e2504000 	subs	r4, r0, #0
   1200c:	0a000013 	beq	12060 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x5c>
   12010:	e1a05001 	mov	r5, r1
   12014:	eb00093a 	bl	14504 <CUSBRequest::GetStatus() const>
   12018:	e3500000 	cmp	r0, #0
   1201c:	0a000009 	beq	12048 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x44>
   12020:	e1a00004 	mov	r0, r4
   12024:	eb000926 	bl	144c4 <CUSBRequest::~CUSBRequest()>
   12028:	e1a00004 	mov	r0, r4
   1202c:	e3a01028 	mov	r1, #40	; 0x28
   12030:	eb00099c 	bl	146a8 <CUSBRequest::operator delete(void*, unsigned int)>
   12034:	e3550000 	cmp	r5, #0
   12038:	0a00000c 	beq	12070 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x6c>
   1203c:	e1a00005 	mov	r0, r5
   12040:	e8bd4070 	pop	{r4, r5, r6, lr}
   12044:	ea006412 	b	2b094 <operator delete[](void*)>
   12048:	eb0052df 	bl	26bcc <CLogger::Get()>
   1204c:	e59f302c 	ldr	r3, [pc, #44]	; 12080 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   12050:	e3a02002 	mov	r2, #2
   12054:	e59f1028 	ldr	r1, [pc, #40]	; 12084 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x80>
   12058:	eb005218 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1205c:	eaffffef 	b	12020 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
   12060:	e3a020af 	mov	r2, #175	; 0xaf
   12064:	e59f101c 	ldr	r1, [pc, #28]	; 12088 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x84>
   12068:	e59f001c 	ldr	r0, [pc, #28]	; 1208c <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x88>
   1206c:	eb0049e3 	bl	24800 <assertion_failed>
   12070:	e3a020b8 	mov	r2, #184	; 0xb8
   12074:	e59f100c 	ldr	r1, [pc, #12]	; 12088 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x84>
   12078:	e59f0010 	ldr	r0, [pc, #16]	; 12090 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x8c>
   1207c:	eb0049df 	bl	24800 <assertion_failed>
   12080:	000409cc 	.word	0x000409cc
   12084:	00040980 	.word	0x00040980
   12088:	000409b8 	.word	0x000409b8
   1208c:	0003f254 	.word	0x0003f254
   12090:	000409e8 	.word	0x000409e8

00012094 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   12094:	e92d4070 	push	{r4, r5, r6, lr}
   12098:	e1a04000 	mov	r4, r0
   1209c:	e1a05002 	mov	r5, r2
   120a0:	ebfff5a2 	bl	f730 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   120a4:	e3a03000 	mov	r3, #0
   120a8:	e59f2030 	ldr	r2, [pc, #48]	; 120e0 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x4c>
   120ac:	e1550003 	cmp	r5, r3
   120b0:	e5845010 	str	r5, [r4, #16]
   120b4:	e5842000 	str	r2, [r4]
   120b8:	e5843014 	str	r3, [r4, #20]
   120bc:	e5843018 	str	r3, [r4, #24]
   120c0:	e584301c 	str	r3, [r4, #28]
   120c4:	e5843020 	str	r3, [r4, #32]
   120c8:	0a000002 	beq	120d8 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x44>
   120cc:	e1a00005 	mov	r0, r5
   120d0:	eb0063e8 	bl	2b078 <operator new[](unsigned int)>
   120d4:	e5840020 	str	r0, [r4, #32]
   120d8:	e1a00004 	mov	r0, r4
   120dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   120e0:	00040990 	.word	0x00040990

000120e4 <CUSBHIDDevice::~CUSBHIDDevice()>:
   120e4:	e92d4070 	push	{r4, r5, r6, lr}
   120e8:	e1a04000 	mov	r4, r0
   120ec:	e5900020 	ldr	r0, [r0, #32]
   120f0:	e59f3074 	ldr	r3, [pc, #116]	; 1216c <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
   120f4:	e3500000 	cmp	r0, #0
   120f8:	e5843000 	str	r3, [r4]
   120fc:	0a000000 	beq	12104 <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   12100:	eb0063e3 	bl	2b094 <operator delete[](void*)>
   12104:	e3a03000 	mov	r3, #0
   12108:	e5945018 	ldr	r5, [r4, #24]
   1210c:	e5843020 	str	r3, [r4, #32]
   12110:	e1550003 	cmp	r5, r3
   12114:	0a000004 	beq	1212c <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   12118:	e1a00005 	mov	r0, r5
   1211c:	ebfff486 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   12120:	e1a00005 	mov	r0, r5
   12124:	e3a01014 	mov	r1, #20
   12128:	eb0063df 	bl	2b0ac <operator delete(void*, unsigned int)>
   1212c:	e3a03000 	mov	r3, #0
   12130:	e5945014 	ldr	r5, [r4, #20]
   12134:	e5843018 	str	r3, [r4, #24]
   12138:	e1550003 	cmp	r5, r3
   1213c:	0a000004 	beq	12154 <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
   12140:	e1a00005 	mov	r0, r5
   12144:	ebfff47c 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   12148:	e1a00005 	mov	r0, r5
   1214c:	e3a01014 	mov	r1, #20
   12150:	eb0063d5 	bl	2b0ac <operator delete(void*, unsigned int)>
   12154:	e3a03000 	mov	r3, #0
   12158:	e1a00004 	mov	r0, r4
   1215c:	e5843014 	str	r3, [r4, #20]
   12160:	ebfff4e1 	bl	f4ec <CUSBFunction::~CUSBFunction()>
   12164:	e1a00004 	mov	r0, r4
   12168:	e8bd8070 	pop	{r4, r5, r6, pc}
   1216c:	00040990 	.word	0x00040990

00012170 <CUSBHIDDevice::~CUSBHIDDevice()>:
   12170:	e92d4010 	push	{r4, lr}
   12174:	e1a04000 	mov	r4, r0
   12178:	ebffffd9 	bl	120e4 <CUSBHIDDevice::~CUSBHIDDevice()>
   1217c:	e1a00004 	mov	r0, r4
   12180:	e3a01024 	mov	r1, #36	; 0x24
   12184:	eb0063c8 	bl	2b0ac <operator delete(void*, unsigned int)>
   12188:	e1a00004 	mov	r0, r4
   1218c:	e8bd8010 	pop	{r4, pc}

00012190 <CUSBHIDDevice::Configure(unsigned int)>:
   12190:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12194:	e24dd010 	sub	sp, sp, #16
   12198:	e1a07001 	mov	r7, r1
   1219c:	e1a05000 	mov	r5, r0
   121a0:	ebfff5b2 	bl	f870 <CUSBFunction::GetNumEndpoints() const>
   121a4:	e2506000 	subs	r6, r0, #0
   121a8:	13a06005 	movne	r6, #5
   121ac:	13a08014 	movne	r8, #20
   121b0:	1a000004 	bne	121c8 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   121b4:	ea000053 	b	12308 <CUSBHIDDevice::Configure(unsigned int)+0x178>
   121b8:	e5d43003 	ldrb	r3, [r4, #3]
   121bc:	e203303f 	and	r3, r3, #63	; 0x3f
   121c0:	e3530003 	cmp	r3, #3
   121c4:	0a000019 	beq	12230 <CUSBHIDDevice::Configure(unsigned int)+0xa0>
   121c8:	e1a01006 	mov	r1, r6
   121cc:	e1a00005 	mov	r0, r5
   121d0:	ebfff5d3 	bl	f924 <CUSBFunction::GetDescriptor(unsigned char)>
   121d4:	e2504000 	subs	r4, r0, #0
   121d8:	1afffff6 	bne	121b8 <CUSBHIDDevice::Configure(unsigned int)+0x28>
   121dc:	e5956014 	ldr	r6, [r5, #20]
   121e0:	e1a00005 	mov	r0, r5
   121e4:	e3560000 	cmp	r6, #0
   121e8:	0a000043 	beq	122fc <CUSBHIDDevice::Configure(unsigned int)+0x16c>
   121ec:	ebfff4e7 	bl	f590 <CUSBFunction::Configure()>
   121f0:	e2506000 	subs	r6, r0, #0
   121f4:	0a00001e 	beq	12274 <CUSBHIDDevice::Configure(unsigned int)+0xe4>
   121f8:	e1a00005 	mov	r0, r5
   121fc:	ebfff627 	bl	faa0 <CUSBFunction::GetInterfaceClass() const>
   12200:	e3500003 	cmp	r0, #3
   12204:	0a000043 	beq	12318 <CUSBHIDDevice::Configure(unsigned int)+0x188>
   12208:	e5953010 	ldr	r3, [r5, #16]
   1220c:	e3530000 	cmp	r3, #0
   12210:	0a00001f 	beq	12294 <CUSBHIDDevice::Configure(unsigned int)+0x104>
   12214:	e5953020 	ldr	r3, [r5, #32]
   12218:	e3530000 	cmp	r3, #0
   1221c:	1a000019 	bne	12288 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   12220:	e3a02082 	mov	r2, #130	; 0x82
   12224:	e59f119c 	ldr	r1, [pc, #412]	; 123c8 <CUSBHIDDevice::Configure(unsigned int)+0x238>
   12228:	e59f019c 	ldr	r0, [pc, #412]	; 123cc <CUSBHIDDevice::Configure(unsigned int)+0x23c>
   1222c:	eb004973 	bl	24800 <assertion_failed>
   12230:	e1d430d2 	ldrsb	r3, [r4, #2]
   12234:	e3530000 	cmp	r3, #0
   12238:	ba000021 	blt	122c4 <CUSBHIDDevice::Configure(unsigned int)+0x134>
   1223c:	e5953018 	ldr	r3, [r5, #24]
   12240:	e1a00005 	mov	r0, r5
   12244:	e3530000 	cmp	r3, #0
   12248:	1a00005a 	bne	123b8 <CUSBHIDDevice::Configure(unsigned int)+0x228>
   1224c:	ebfff593 	bl	f8a0 <CUSBFunction::GetDevice() const>
   12250:	e1a0a000 	mov	sl, r0
   12254:	e1a00008 	mov	r0, r8
   12258:	eb006385 	bl	2b074 <operator new(unsigned int)>
   1225c:	e1a09000 	mov	r9, r0
   12260:	e1a02004 	mov	r2, r4
   12264:	e1a0100a 	mov	r1, sl
   12268:	ebfff3c9 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1226c:	e5859018 	str	r9, [r5, #24]
   12270:	eaffffd4 	b	121c8 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   12274:	eb005254 	bl	26bcc <CLogger::Get()>
   12278:	e59f3150 	ldr	r3, [pc, #336]	; 123d0 <CUSBHIDDevice::Configure(unsigned int)+0x240>
   1227c:	e3a02001 	mov	r2, #1
   12280:	e59f114c 	ldr	r1, [pc, #332]	; 123d4 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   12284:	eb00518d 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12288:	e1a00006 	mov	r0, r6
   1228c:	e28dd010 	add	sp, sp, #16
   12290:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12294:	e3570000 	cmp	r7, #0
   12298:	e5857010 	str	r7, [r5, #16]
   1229c:	0a000041 	beq	123a8 <CUSBHIDDevice::Configure(unsigned int)+0x218>
   122a0:	e5953020 	ldr	r3, [r5, #32]
   122a4:	e3530000 	cmp	r3, #0
   122a8:	1a00003a 	bne	12398 <CUSBHIDDevice::Configure(unsigned int)+0x208>
   122ac:	e1a00007 	mov	r0, r7
   122b0:	eb006370 	bl	2b078 <operator new[](unsigned int)>
   122b4:	e5850020 	str	r0, [r5, #32]
   122b8:	e1a00006 	mov	r0, r6
   122bc:	e28dd010 	add	sp, sp, #16
   122c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   122c4:	e5953014 	ldr	r3, [r5, #20]
   122c8:	e1a00005 	mov	r0, r5
   122cc:	e3530000 	cmp	r3, #0
   122d0:	1a000038 	bne	123b8 <CUSBHIDDevice::Configure(unsigned int)+0x228>
   122d4:	ebfff571 	bl	f8a0 <CUSBFunction::GetDevice() const>
   122d8:	e1a0a000 	mov	sl, r0
   122dc:	e1a00008 	mov	r0, r8
   122e0:	eb006363 	bl	2b074 <operator new(unsigned int)>
   122e4:	e1a09000 	mov	r9, r0
   122e8:	e1a02004 	mov	r2, r4
   122ec:	e1a0100a 	mov	r1, sl
   122f0:	ebfff3a7 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   122f4:	e5859014 	str	r9, [r5, #20]
   122f8:	eaffffb2 	b	121c8 <CUSBHIDDevice::Configure(unsigned int)+0x38>
   122fc:	e59f10d0 	ldr	r1, [pc, #208]	; 123d4 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   12300:	ebfff592 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   12304:	eaffffdf 	b	12288 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   12308:	e1a00005 	mov	r0, r5
   1230c:	e59f10c0 	ldr	r1, [pc, #192]	; 123d4 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   12310:	ebfff58e 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   12314:	eaffffdb 	b	12288 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   12318:	e1a00005 	mov	r0, r5
   1231c:	ebfff5eb 	bl	fad0 <CUSBFunction::GetInterfaceSubClass() const>
   12320:	e3500001 	cmp	r0, #1
   12324:	e1a0a000 	mov	sl, r0
   12328:	1affffb6 	bne	12208 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   1232c:	e1a00005 	mov	r0, r5
   12330:	ebfff570 	bl	f8f8 <CUSBFunction::GetHost() const>
   12334:	e1a08000 	mov	r8, r0
   12338:	e1a00005 	mov	r0, r5
   1233c:	ebfff562 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
   12340:	e1a09000 	mov	r9, r0
   12344:	e1a00005 	mov	r0, r5
   12348:	ebfff5c8 	bl	fa70 <CUSBFunction::GetInterfaceNumber() const>
   1234c:	e6ff0070 	uxth	r0, r0
   12350:	e58d0004 	str	r0, [sp, #4]
   12354:	e1a01009 	mov	r1, r9
   12358:	e1a00008 	mov	r0, r8
   1235c:	e58d400c 	str	r4, [sp, #12]
   12360:	e58d4008 	str	r4, [sp, #8]
   12364:	e58d4000 	str	r4, [sp]
   12368:	e3a0300b 	mov	r3, #11
   1236c:	e3a02021 	mov	r2, #33	; 0x21
   12370:	eb000132 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12374:	e3500000 	cmp	r0, #0
   12378:	aaffffa2 	bge	12208 <CUSBHIDDevice::Configure(unsigned int)+0x78>
   1237c:	eb005212 	bl	26bcc <CLogger::Get()>
   12380:	e1a0200a 	mov	r2, sl
   12384:	e59f304c 	ldr	r3, [pc, #76]	; 123d8 <CUSBHIDDevice::Configure(unsigned int)+0x248>
   12388:	e59f1044 	ldr	r1, [pc, #68]	; 123d4 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   1238c:	e1a06004 	mov	r6, r4
   12390:	eb00514a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12394:	eaffffbb 	b	12288 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   12398:	e3a0207f 	mov	r2, #127	; 0x7f
   1239c:	e59f1024 	ldr	r1, [pc, #36]	; 123c8 <CUSBHIDDevice::Configure(unsigned int)+0x238>
   123a0:	e59f0034 	ldr	r0, [pc, #52]	; 123dc <CUSBHIDDevice::Configure(unsigned int)+0x24c>
   123a4:	eb004915 	bl	24800 <assertion_failed>
   123a8:	e3a0207d 	mov	r2, #125	; 0x7d
   123ac:	e59f1014 	ldr	r1, [pc, #20]	; 123c8 <CUSBHIDDevice::Configure(unsigned int)+0x238>
   123b0:	e59f0028 	ldr	r0, [pc, #40]	; 123e0 <CUSBHIDDevice::Configure(unsigned int)+0x250>
   123b4:	eb004911 	bl	24800 <assertion_failed>
   123b8:	e59f1014 	ldr	r1, [pc, #20]	; 123d4 <CUSBHIDDevice::Configure(unsigned int)+0x244>
   123bc:	ebfff563 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   123c0:	e3a06000 	mov	r6, #0
   123c4:	eaffffaf 	b	12288 <CUSBHIDDevice::Configure(unsigned int)+0xf8>
   123c8:	000409b8 	.word	0x000409b8
   123cc:	00040a48 	.word	0x00040a48
   123d0:	0004030c 	.word	0x0004030c
   123d4:	00040980 	.word	0x00040980
   123d8:	000409fc 	.word	0x000409fc
   123dc:	00040a30 	.word	0x00040a30
   123e0:	00040a18 	.word	0x00040a18

000123e4 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   123e4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   123e8:	e590e018 	ldr	lr, [r0, #24]
   123ec:	e24dd00c 	sub	sp, sp, #12
   123f0:	e35e0000 	cmp	lr, #0
   123f4:	0a000011 	beq	12440 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x5c>
   123f8:	e3510000 	cmp	r1, #0
   123fc:	e1a07003 	mov	r7, r3
   12400:	e1a06002 	mov	r6, r2
   12404:	e1a05001 	mov	r5, r1
   12408:	0a00000f 	beq	1244c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x68>
   1240c:	e3520000 	cmp	r2, #0
   12410:	0a000011 	beq	1245c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x78>
   12414:	e1a04000 	mov	r4, r0
   12418:	ebfff536 	bl	f8f8 <CUSBFunction::GetHost() const>
   1241c:	e5941018 	ldr	r1, [r4, #24]
   12420:	e1a03006 	mov	r3, r6
   12424:	e58d7000 	str	r7, [sp]
   12428:	e1a02005 	mov	r2, r5
   1242c:	eb000169 	bl	129d8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12430:	e1e00000 	mvn	r0, r0
   12434:	e1a00fa0 	lsr	r0, r0, #31
   12438:	e28dd00c 	add	sp, sp, #12
   1243c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12440:	e1a0000e 	mov	r0, lr
   12444:	e28dd00c 	add	sp, sp, #12
   12448:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1244c:	e3a0208e 	mov	r2, #142	; 0x8e
   12450:	e59f1014 	ldr	r1, [pc, #20]	; 1246c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x88>
   12454:	e59f0014 	ldr	r0, [pc, #20]	; 12470 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x8c>
   12458:	eb0048e8 	bl	24800 <assertion_failed>
   1245c:	e3a0208f 	mov	r2, #143	; 0x8f
   12460:	e59f1004 	ldr	r1, [pc, #4]	; 1246c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x88>
   12464:	e59f0008 	ldr	r0, [pc, #8]	; 12474 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x90>
   12468:	eb0048e4 	bl	24800 <assertion_failed>
   1246c:	000409b8 	.word	0x000409b8
   12470:	00040b94 	.word	0x00040b94
   12474:	00040a60 	.word	0x00040a60

00012478 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   12478:	e590c018 	ldr	ip, [r0, #24]
   1247c:	e35c0000 	cmp	ip, #0
   12480:	0a00002e 	beq	12540 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc8>
   12484:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12488:	e3510000 	cmp	r1, #0
   1248c:	e24dd008 	sub	sp, sp, #8
   12490:	e1a07003 	mov	r7, r3
   12494:	e1a05002 	mov	r5, r2
   12498:	e1a06001 	mov	r6, r1
   1249c:	e1a04000 	mov	r4, r0
   124a0:	0a00001e 	beq	12520 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xa8>
   124a4:	e3520000 	cmp	r2, #0
   124a8:	0a000020 	beq	12530 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xb8>
   124ac:	e1a00002 	mov	r0, r2
   124b0:	eb0062f0 	bl	2b078 <operator new[](unsigned int)>
   124b4:	e1a02005 	mov	r2, r5
   124b8:	e1a01006 	mov	r1, r6
   124bc:	e1a08000 	mov	r8, r0
   124c0:	eb006112 	bl	2a910 <memcpy>
   124c4:	e3a00028 	mov	r0, #40	; 0x28
   124c8:	eb000861 	bl	14654 <CUSBRequest::operator new(unsigned int)>
   124cc:	e3a0c000 	mov	ip, #0
   124d0:	e1a06000 	mov	r6, r0
   124d4:	e5941018 	ldr	r1, [r4, #24]
   124d8:	e1a03005 	mov	r3, r5
   124dc:	e58dc000 	str	ip, [sp]
   124e0:	e1a02008 	mov	r2, r8
   124e4:	eb0007d5 	bl	14440 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   124e8:	e1a03004 	mov	r3, r4
   124ec:	e1a02008 	mov	r2, r8
   124f0:	e1a00006 	mov	r0, r6
   124f4:	e59f104c 	ldr	r1, [pc, #76]	; 12548 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd0>
   124f8:	eb000834 	bl	145d0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   124fc:	e1a00004 	mov	r0, r4
   12500:	ebfff4fc 	bl	f8f8 <CUSBFunction::GetHost() const>
   12504:	e1a01006 	mov	r1, r6
   12508:	e1a02007 	mov	r2, r7
   1250c:	e5903000 	ldr	r3, [r0]
   12510:	e593300c 	ldr	r3, [r3, #12]
   12514:	e28dd008 	add	sp, sp, #8
   12518:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1251c:	e12fff13 	bx	r3
   12520:	e3a020a0 	mov	r2, #160	; 0xa0
   12524:	e59f1020 	ldr	r1, [pc, #32]	; 1254c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   12528:	e59f0020 	ldr	r0, [pc, #32]	; 12550 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd8>
   1252c:	eb0048b3 	bl	24800 <assertion_failed>
   12530:	e3a020a1 	mov	r2, #161	; 0xa1
   12534:	e59f1010 	ldr	r1, [pc, #16]	; 1254c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xd4>
   12538:	e59f0014 	ldr	r0, [pc, #20]	; 12554 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xdc>
   1253c:	eb0048af 	bl	24800 <assertion_failed>
   12540:	e1a0000c 	mov	r0, ip
   12544:	e12fff1e 	bx	lr
   12548:	00012004 	.word	0x00012004
   1254c:	000409b8 	.word	0x000409b8
   12550:	00040b94 	.word	0x00040b94
   12554:	00040a60 	.word	0x00040a60

00012558 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   12558:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1255c:	e590c01c 	ldr	ip, [r0, #28]
   12560:	e24dd00c 	sub	sp, sp, #12
   12564:	e35c0000 	cmp	ip, #0
   12568:	1a000012 	bne	125b8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x60>
   1256c:	e1a06002 	mov	r6, r2
   12570:	e5902014 	ldr	r2, [r0, #20]
   12574:	e1a04000 	mov	r4, r0
   12578:	e3520000 	cmp	r2, #0
   1257c:	0a000011 	beq	125c8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x70>
   12580:	e3510000 	cmp	r1, #0
   12584:	e1a05001 	mov	r5, r1
   12588:	0a000012 	beq	125d8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x80>
   1258c:	e3560000 	cmp	r6, #0
   12590:	0a000014 	beq	125e8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x90>
   12594:	e1a07003 	mov	r7, r3
   12598:	ebfff4d6 	bl	f8f8 <CUSBFunction::GetHost() const>
   1259c:	e5941014 	ldr	r1, [r4, #20]
   125a0:	e1a03006 	mov	r3, r6
   125a4:	e58d7000 	str	r7, [sp]
   125a8:	e1a02005 	mov	r2, r5
   125ac:	eb000109 	bl	129d8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   125b0:	e28dd00c 	add	sp, sp, #12
   125b4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   125b8:	e3a020be 	mov	r2, #190	; 0xbe
   125bc:	e59f1034 	ldr	r1, [pc, #52]	; 125f8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   125c0:	e59f0034 	ldr	r0, [pc, #52]	; 125fc <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa4>
   125c4:	eb00488d 	bl	24800 <assertion_failed>
   125c8:	e3a020c0 	mov	r2, #192	; 0xc0
   125cc:	e59f1024 	ldr	r1, [pc, #36]	; 125f8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   125d0:	e59f0028 	ldr	r0, [pc, #40]	; 12600 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa8>
   125d4:	eb004889 	bl	24800 <assertion_failed>
   125d8:	e3a020c1 	mov	r2, #193	; 0xc1
   125dc:	e59f1014 	ldr	r1, [pc, #20]	; 125f8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   125e0:	e59f001c 	ldr	r0, [pc, #28]	; 12604 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xac>
   125e4:	eb004885 	bl	24800 <assertion_failed>
   125e8:	e3a020c2 	mov	r2, #194	; 0xc2
   125ec:	e59f1004 	ldr	r1, [pc, #4]	; 125f8 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xa0>
   125f0:	e59f0010 	ldr	r0, [pc, #16]	; 12608 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0xb0>
   125f4:	eb004881 	bl	24800 <assertion_failed>
   125f8:	000409b8 	.word	0x000409b8
   125fc:	00040a70 	.word	0x00040a70
   12600:	00040a7c 	.word	0x00040a7c
   12604:	00040b94 	.word	0x00040b94
   12608:	00040a60 	.word	0x00040a60

0001260c <CUSBHIDDevice::StartRequest()>:
   1260c:	e92d4070 	push	{r4, r5, r6, lr}
   12610:	e5903014 	ldr	r3, [r0, #20]
   12614:	e24dd008 	sub	sp, sp, #8
   12618:	e3530000 	cmp	r3, #0
   1261c:	0a000020 	beq	126a4 <CUSBHIDDevice::StartRequest()+0x98>
   12620:	e5903020 	ldr	r3, [r0, #32]
   12624:	e1a04000 	mov	r4, r0
   12628:	e3530000 	cmp	r3, #0
   1262c:	0a000020 	beq	126b4 <CUSBHIDDevice::StartRequest()+0xa8>
   12630:	e590501c 	ldr	r5, [r0, #28]
   12634:	e3550000 	cmp	r5, #0
   12638:	1a000021 	bne	126c4 <CUSBHIDDevice::StartRequest()+0xb8>
   1263c:	e5903010 	ldr	r3, [r0, #16]
   12640:	e3530000 	cmp	r3, #0
   12644:	0a000022 	beq	126d4 <CUSBHIDDevice::StartRequest()+0xc8>
   12648:	e3a00028 	mov	r0, #40	; 0x28
   1264c:	eb000800 	bl	14654 <CUSBRequest::operator new(unsigned int)>
   12650:	e1a06000 	mov	r6, r0
   12654:	e5943010 	ldr	r3, [r4, #16]
   12658:	e5942020 	ldr	r2, [r4, #32]
   1265c:	e5941014 	ldr	r1, [r4, #20]
   12660:	e58d5000 	str	r5, [sp]
   12664:	eb000775 	bl	14440 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   12668:	e1a03004 	mov	r3, r4
   1266c:	e1a02005 	mov	r2, r5
   12670:	e1a00006 	mov	r0, r6
   12674:	e59f1068 	ldr	r1, [pc, #104]	; 126e4 <CUSBHIDDevice::StartRequest()+0xd8>
   12678:	e584601c 	str	r6, [r4, #28]
   1267c:	eb0007d3 	bl	145d0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   12680:	e1a00004 	mov	r0, r4
   12684:	ebfff49b 	bl	f8f8 <CUSBFunction::GetHost() const>
   12688:	e1a02005 	mov	r2, r5
   1268c:	e5903000 	ldr	r3, [r0]
   12690:	e594101c 	ldr	r1, [r4, #28]
   12694:	e593300c 	ldr	r3, [r3, #12]
   12698:	e28dd008 	add	sp, sp, #8
   1269c:	e8bd4070 	pop	{r4, r5, r6, lr}
   126a0:	e12fff13 	bx	r3
   126a4:	e3a020c8 	mov	r2, #200	; 0xc8
   126a8:	e59f1038 	ldr	r1, [pc, #56]	; 126e8 <CUSBHIDDevice::StartRequest()+0xdc>
   126ac:	e59f0038 	ldr	r0, [pc, #56]	; 126ec <CUSBHIDDevice::StartRequest()+0xe0>
   126b0:	eb004852 	bl	24800 <assertion_failed>
   126b4:	e3a020c9 	mov	r2, #201	; 0xc9
   126b8:	e59f1028 	ldr	r1, [pc, #40]	; 126e8 <CUSBHIDDevice::StartRequest()+0xdc>
   126bc:	e59f002c 	ldr	r0, [pc, #44]	; 126f0 <CUSBHIDDevice::StartRequest()+0xe4>
   126c0:	eb00484e 	bl	24800 <assertion_failed>
   126c4:	e3a020cb 	mov	r2, #203	; 0xcb
   126c8:	e59f1018 	ldr	r1, [pc, #24]	; 126e8 <CUSBHIDDevice::StartRequest()+0xdc>
   126cc:	e59f0020 	ldr	r0, [pc, #32]	; 126f4 <CUSBHIDDevice::StartRequest()+0xe8>
   126d0:	eb00484a 	bl	24800 <assertion_failed>
   126d4:	e3a020cc 	mov	r2, #204	; 0xcc
   126d8:	e59f1008 	ldr	r1, [pc, #8]	; 126e8 <CUSBHIDDevice::StartRequest()+0xdc>
   126dc:	e59f0014 	ldr	r0, [pc, #20]	; 126f8 <CUSBHIDDevice::StartRequest()+0xec>
   126e0:	eb004846 	bl	24800 <assertion_failed>
   126e4:	000127e4 	.word	0x000127e4
   126e8:	000409b8 	.word	0x000409b8
   126ec:	00040a7c 	.word	0x00040a7c
   126f0:	00040a48 	.word	0x00040a48
   126f4:	00040a70 	.word	0x00040a70
   126f8:	00040a18 	.word	0x00040a18

000126fc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   126fc:	e92d4070 	push	{r4, r5, r6, lr}
   12700:	e2515000 	subs	r5, r1, #0
   12704:	0a000029 	beq	127b0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xb4>
   12708:	e590301c 	ldr	r3, [r0, #28]
   1270c:	e1a04000 	mov	r4, r0
   12710:	e1550003 	cmp	r5, r3
   12714:	1a000029 	bne	127c0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   12718:	e1a00005 	mov	r0, r5
   1271c:	eb000778 	bl	14504 <CUSBRequest::GetStatus() const>
   12720:	e2502000 	subs	r2, r0, #0
   12724:	e5943000 	ldr	r3, [r4]
   12728:	1a000017 	bne	1278c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x90>
   1272c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   12730:	e1a01002 	mov	r1, r2
   12734:	e1a00004 	mov	r0, r4
   12738:	e12fff33 	blx	r3
   1273c:	e594501c 	ldr	r5, [r4, #28]
   12740:	e3550000 	cmp	r5, #0
   12744:	0a000004 	beq	1275c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x60>
   12748:	e1a00005 	mov	r0, r5
   1274c:	eb00075c 	bl	144c4 <CUSBRequest::~CUSBRequest()>
   12750:	e1a00005 	mov	r0, r5
   12754:	e3a01028 	mov	r1, #40	; 0x28
   12758:	eb0007d2 	bl	146a8 <CUSBRequest::operator delete(void*, unsigned int)>
   1275c:	e3a03000 	mov	r3, #0
   12760:	e1a00004 	mov	r0, r4
   12764:	e584301c 	str	r3, [r4, #28]
   12768:	ebffffa7 	bl	1260c <CUSBHIDDevice::StartRequest()>
   1276c:	e3500000 	cmp	r0, #0
   12770:	18bd8070 	popne	{r4, r5, r6, pc}
   12774:	eb005114 	bl	26bcc <CLogger::Get()>
   12778:	e8bd4070 	pop	{r4, r5, r6, lr}
   1277c:	e59f304c 	ldr	r3, [pc, #76]	; 127d0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   12780:	e3a02001 	mov	r2, #1
   12784:	e59f1048 	ldr	r1, [pc, #72]	; 127d4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd8>
   12788:	ea00504c 	b	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1278c:	e1a00005 	mov	r0, r5
   12790:	e5946020 	ldr	r6, [r4, #32]
   12794:	e5935024 	ldr	r5, [r3, #36]	; 0x24
   12798:	eb00075b 	bl	1450c <CUSBRequest::GetResultLength() const>
   1279c:	e1a01006 	mov	r1, r6
   127a0:	e1a02000 	mov	r2, r0
   127a4:	e1a00004 	mov	r0, r4
   127a8:	e12fff35 	blx	r5
   127ac:	eaffffe2 	b	1273c <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x40>
   127b0:	e3a020d6 	mov	r2, #214	; 0xd6
   127b4:	e59f101c 	ldr	r1, [pc, #28]	; 127d8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   127b8:	e59f001c 	ldr	r0, [pc, #28]	; 127dc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   127bc:	eb00480f 	bl	24800 <assertion_failed>
   127c0:	e3a020d7 	mov	r2, #215	; 0xd7
   127c4:	e59f100c 	ldr	r1, [pc, #12]	; 127d8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   127c8:	e59f0010 	ldr	r0, [pc, #16]	; 127e0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   127cc:	eb00480b 	bl	24800 <assertion_failed>
   127d0:	00040aa4 	.word	0x00040aa4
   127d4:	00040980 	.word	0x00040980
   127d8:	000409b8 	.word	0x000409b8
   127dc:	0003f254 	.word	0x0003f254
   127e0:	00040a94 	.word	0x00040a94

000127e4 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   127e4:	e3520000 	cmp	r2, #0
   127e8:	0a000002 	beq	127f8 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   127ec:	e1a01000 	mov	r1, r0
   127f0:	e1a00002 	mov	r0, r2
   127f4:	eaffffc0 	b	126fc <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   127f8:	e92d4010 	push	{r4, lr}
   127fc:	e3a020ee 	mov	r2, #238	; 0xee
   12800:	e59f1004 	ldr	r1, [pc, #4]	; 1280c <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   12804:	e59f0004 	ldr	r0, [pc, #4]	; 12810 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   12808:	eb0047fc 	bl	24800 <assertion_failed>
   1280c:	000409b8 	.word	0x000409b8
   12810:	0003f168 	.word	0x0003f168

00012814 <CUSBHostController::CUSBHostController()>:
   12814:	e59f3004 	ldr	r3, [pc, #4]	; 12820 <CUSBHostController::CUSBHostController()+0xc>
   12818:	e5803000 	str	r3, [r0]
   1281c:	e12fff1e 	bx	lr
   12820:	00040ac4 	.word	0x00040ac4

00012824 <CUSBHostController::~CUSBHostController()>:
   12824:	e12fff1e 	bx	lr

00012828 <CUSBHostController::~CUSBHostController()>:
   12828:	e92d4010 	push	{r4, lr}
   1282c:	e1a04000 	mov	r4, r0
   12830:	e3a01004 	mov	r1, #4
   12834:	eb00621c 	bl	2b0ac <operator delete(void*, unsigned int)>
   12838:	e1a00004 	mov	r0, r4
   1283c:	e8bd8010 	pop	{r4, pc}

00012840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
   12840:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12844:	e1a06000 	mov	r6, r0
   12848:	e24dd034 	sub	sp, sp, #52	; 0x34
   1284c:	e3a00008 	mov	r0, #8
   12850:	e1dd56b4 	ldrh	r5, [sp, #100]	; 0x64
   12854:	e1a0a002 	mov	sl, r2
   12858:	e1a09003 	mov	r9, r3
   1285c:	e1dd85b8 	ldrh	r8, [sp, #88]	; 0x58
   12860:	e1dd75bc 	ldrh	r7, [sp, #92]	; 0x5c
   12864:	e1a0b001 	mov	fp, r1
   12868:	eb006201 	bl	2b074 <operator new(unsigned int)>
   1286c:	e1a04000 	mov	r4, r0
   12870:	e58d0000 	str	r0, [sp]
   12874:	e1a02428 	lsr	r2, r8, #8
   12878:	e5c0a000 	strb	sl, [r0]
   1287c:	e5c09001 	strb	r9, [r0, #1]
   12880:	e1a00427 	lsr	r0, r7, #8
   12884:	e1a0c425 	lsr	ip, r5, #8
   12888:	e1a0100b 	mov	r1, fp
   1288c:	e5c42003 	strb	r2, [r4, #3]
   12890:	e1a03005 	mov	r3, r5
   12894:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
   12898:	e5c40005 	strb	r0, [r4, #5]
   1289c:	e28d0008 	add	r0, sp, #8
   128a0:	e5c4c007 	strb	ip, [r4, #7]
   128a4:	e5c48002 	strb	r8, [r4, #2]
   128a8:	e5c47004 	strb	r7, [r4, #4]
   128ac:	e5c45006 	strb	r5, [r4, #6]
   128b0:	eb0006e2 	bl	14440 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   128b4:	e5963000 	ldr	r3, [r6]
   128b8:	e1a00006 	mov	r0, r6
   128bc:	e5933008 	ldr	r3, [r3, #8]
   128c0:	e28d1008 	add	r1, sp, #8
   128c4:	e3a02000 	mov	r2, #0
   128c8:	e12fff33 	blx	r3
   128cc:	e3500000 	cmp	r0, #0
   128d0:	0a00000a 	beq	12900 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xc0>
   128d4:	e28d0008 	add	r0, sp, #8
   128d8:	eb00070b 	bl	1450c <CUSBRequest::GetResultLength() const>
   128dc:	e1a05000 	mov	r5, r0
   128e0:	e1a00004 	mov	r0, r4
   128e4:	e3a01008 	mov	r1, #8
   128e8:	eb0061ef 	bl	2b0ac <operator delete(void*, unsigned int)>
   128ec:	e28d0008 	add	r0, sp, #8
   128f0:	eb0006f3 	bl	144c4 <CUSBRequest::~CUSBRequest()>
   128f4:	e1a00005 	mov	r0, r5
   128f8:	e28dd034 	add	sp, sp, #52	; 0x34
   128fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12900:	e3e05000 	mvn	r5, #0
   12904:	eafffff5 	b	128e0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xa0>

00012908 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
   12908:	e92d4030 	push	{r4, r5, lr}
   1290c:	e59d500c 	ldr	r5, [sp, #12]
   12910:	e5dd4014 	ldrb	r4, [sp, #20]
   12914:	e1dde1b8 	ldrh	lr, [sp, #24]
   12918:	e1ddc1b0 	ldrh	ip, [sp, #16]
   1291c:	e1833402 	orr	r3, r3, r2, lsl #8
   12920:	e58d300c 	str	r3, [sp, #12]
   12924:	e58d5014 	str	r5, [sp, #20]
   12928:	e1a02004 	mov	r2, r4
   1292c:	e58de010 	str	lr, [sp, #16]
   12930:	e58dc018 	str	ip, [sp, #24]
   12934:	e3a03006 	mov	r3, #6
   12938:	e8bd4030 	pop	{r4, r5, lr}
   1293c:	eaffffbf 	b	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

00012940 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
   12940:	e92d4010 	push	{r4, lr}
   12944:	e3a04000 	mov	r4, #0
   12948:	e24dd010 	sub	sp, sp, #16
   1294c:	e58d2000 	str	r2, [sp]
   12950:	e58d400c 	str	r4, [sp, #12]
   12954:	e58d4008 	str	r4, [sp, #8]
   12958:	e58d4004 	str	r4, [sp, #4]
   1295c:	e1a02004 	mov	r2, r4
   12960:	e3a03005 	mov	r3, #5
   12964:	ebffffb5 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   12968:	e1500004 	cmp	r0, r4
   1296c:	b1a00004 	movlt	r0, r4
   12970:	ba000003 	blt	12984 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x44>
   12974:	eb005d61 	bl	29f00 <CTimer::Get()>
   12978:	e3a00032 	mov	r0, #50	; 0x32
   1297c:	eb005d26 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
   12980:	e3a00001 	mov	r0, #1
   12984:	e28dd010 	add	sp, sp, #16
   12988:	e8bd8010 	pop	{r4, pc}

0001298c <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
   1298c:	e92d4010 	push	{r4, lr}
   12990:	e3a04000 	mov	r4, #0
   12994:	e24dd010 	sub	sp, sp, #16
   12998:	e58d2000 	str	r2, [sp]
   1299c:	e58d400c 	str	r4, [sp, #12]
   129a0:	e58d4008 	str	r4, [sp, #8]
   129a4:	e58d4004 	str	r4, [sp, #4]
   129a8:	e1a02004 	mov	r2, r4
   129ac:	e3a03009 	mov	r3, #9
   129b0:	ebffffa2 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   129b4:	e1500004 	cmp	r0, r4
   129b8:	b1a00004 	movlt	r0, r4
   129bc:	ba000003 	blt	129d0 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x44>
   129c0:	eb005d4e 	bl	29f00 <CTimer::Get()>
   129c4:	e3a00032 	mov	r0, #50	; 0x32
   129c8:	eb005d13 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
   129cc:	e3a00001 	mov	r0, #1
   129d0:	e28dd010 	add	sp, sp, #16
   129d4:	e8bd8010 	pop	{r4, pc}

000129d8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
   129d8:	e3a0c000 	mov	ip, #0
   129dc:	e92d4010 	push	{r4, lr}
   129e0:	e1a04000 	mov	r4, r0
   129e4:	e24dd030 	sub	sp, sp, #48	; 0x30
   129e8:	e58dc000 	str	ip, [sp]
   129ec:	e28d0008 	add	r0, sp, #8
   129f0:	eb000692 	bl	14440 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   129f4:	e5943000 	ldr	r3, [r4]
   129f8:	e1a00004 	mov	r0, r4
   129fc:	e5933008 	ldr	r3, [r3, #8]
   12a00:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   12a04:	e28d1008 	add	r1, sp, #8
   12a08:	e12fff33 	blx	r3
   12a0c:	e3500000 	cmp	r0, #0
   12a10:	0a000007 	beq	12a34 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
   12a14:	e28d0008 	add	r0, sp, #8
   12a18:	eb0006bb 	bl	1450c <CUSBRequest::GetResultLength() const>
   12a1c:	e1a04000 	mov	r4, r0
   12a20:	e28d0008 	add	r0, sp, #8
   12a24:	eb0006a6 	bl	144c4 <CUSBRequest::~CUSBRequest()>
   12a28:	e1a00004 	mov	r0, r4
   12a2c:	e28dd030 	add	sp, sp, #48	; 0x30
   12a30:	e8bd8010 	pop	{r4, pc}
   12a34:	e3e04000 	mvn	r4, #0
   12a38:	eafffff8 	b	12a20 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

00012a3c <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
   12a3c:	e1c022f0 	strd	r2, [r0, #32]
   12a40:	e1a01003 	mov	r1, r3
   12a44:	e1a00002 	mov	r0, r2
   12a48:	e12fff1e 	bx	lr

00012a4c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   12a4c:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   12a50:	e59f30ec 	ldr	r3, [pc, #236]	; 12b44 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xf8>
   12a54:	e3520000 	cmp	r2, #0
   12a58:	e92d4070 	push	{r4, r5, r6, lr}
   12a5c:	e1a04000 	mov	r4, r0
   12a60:	e5803000 	str	r3, [r0]
   12a64:	1a000021 	bne	12af0 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xa4>
   12a68:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   12a6c:	e3550000 	cmp	r5, #0
   12a70:	0a000004 	beq	12a88 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x3c>
   12a74:	e1a00005 	mov	r0, r5
   12a78:	eb001973 	bl	1904c <CPartitionManager::~CPartitionManager()>
   12a7c:	e1a00005 	mov	r0, r5
   12a80:	e3a01024 	mov	r1, #36	; 0x24
   12a84:	eb006188 	bl	2b0ac <operator delete(void*, unsigned int)>
   12a88:	e3a03000 	mov	r3, #0
   12a8c:	e5945014 	ldr	r5, [r4, #20]
   12a90:	e5843028 	str	r3, [r4, #40]	; 0x28
   12a94:	e1550003 	cmp	r5, r3
   12a98:	0a000004 	beq	12ab0 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x64>
   12a9c:	e1a00005 	mov	r0, r5
   12aa0:	ebfff225 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   12aa4:	e1a00005 	mov	r0, r5
   12aa8:	e3a01014 	mov	r1, #20
   12aac:	eb00617e 	bl	2b0ac <operator delete(void*, unsigned int)>
   12ab0:	e3a03000 	mov	r3, #0
   12ab4:	e5945010 	ldr	r5, [r4, #16]
   12ab8:	e5843014 	str	r3, [r4, #20]
   12abc:	e1550003 	cmp	r5, r3
   12ac0:	0a000004 	beq	12ad8 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x8c>
   12ac4:	e1a00005 	mov	r0, r5
   12ac8:	ebfff21b 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   12acc:	e1a00005 	mov	r0, r5
   12ad0:	e3a01014 	mov	r1, #20
   12ad4:	eb006174 	bl	2b0ac <operator delete(void*, unsigned int)>
   12ad8:	e3a03000 	mov	r3, #0
   12adc:	e1a00004 	mov	r0, r4
   12ae0:	e5843010 	str	r3, [r4, #16]
   12ae4:	ebfff280 	bl	f4ec <CUSBFunction::~CUSBFunction()>
   12ae8:	e1a00004 	mov	r0, r4
   12aec:	e8bd8070 	pop	{r4, r5, r6, pc}
   12af0:	eb004a1c 	bl	25368 <CDeviceNameService::Get()>
   12af4:	e3a03001 	mov	r3, #1
   12af8:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   12afc:	e59f1044 	ldr	r1, [pc, #68]	; 12b48 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xfc>
   12b00:	eb004a3f 	bl	25404 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   12b04:	e3a03001 	mov	r3, #1
   12b08:	e59f103c 	ldr	r1, [pc, #60]	; 12b4c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x100>
   12b0c:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   12b10:	e5912000 	ldr	r2, [r1]
   12b14:	e1a03013 	lsl	r3, r3, r0
   12b18:	e1130002 	tst	r3, r2
   12b1c:	0a000004 	beq	12b34 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xe8>
   12b20:	e3a00000 	mov	r0, #0
   12b24:	e1c23003 	bic	r3, r2, r3
   12b28:	e5813000 	str	r3, [r1]
   12b2c:	e584002c 	str	r0, [r4, #44]	; 0x2c
   12b30:	eaffffcc 	b	12a68 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x1c>
   12b34:	e3a020d4 	mov	r2, #212	; 0xd4
   12b38:	e59f1010 	ldr	r1, [pc, #16]	; 12b50 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x104>
   12b3c:	e59f0010 	ldr	r0, [pc, #16]	; 12b54 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x108>
   12b40:	eb00472e 	bl	24800 <assertion_failed>
   12b44:	00040adc 	.word	0x00040adc
   12b48:	00040b08 	.word	0x00040b08
   12b4c:	0004e0d8 	.word	0x0004e0d8
   12b50:	00040b10 	.word	0x00040b10
   12b54:	00040b24 	.word	0x00040b24

00012b58 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   12b58:	e92d4010 	push	{r4, lr}
   12b5c:	e1a04000 	mov	r4, r0
   12b60:	ebffffb9 	bl	12a4c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   12b64:	e1a00004 	mov	r0, r4
   12b68:	e3a01030 	mov	r1, #48	; 0x30
   12b6c:	eb00614e 	bl	2b0ac <operator delete(void*, unsigned int)>
   12b70:	e1a00004 	mov	r0, r4
   12b74:	e8bd8010 	pop	{r4, pc}

00012b78 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   12b78:	e92d4010 	push	{r4, lr}
   12b7c:	e1a04000 	mov	r4, r0
   12b80:	ebfff2ea 	bl	f730 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   12b84:	e3a03000 	mov	r3, #0
   12b88:	e3a00000 	mov	r0, #0
   12b8c:	e3a01000 	mov	r1, #0
   12b90:	e59f2024 	ldr	r2, [pc, #36]	; 12bbc <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x44>
   12b94:	e1c402f0 	strd	r0, [r4, #32]
   12b98:	e5842000 	str	r2, [r4]
   12b9c:	e5843010 	str	r3, [r4, #16]
   12ba0:	e5843014 	str	r3, [r4, #20]
   12ba4:	e5843018 	str	r3, [r4, #24]
   12ba8:	e584301c 	str	r3, [r4, #28]
   12bac:	e5843028 	str	r3, [r4, #40]	; 0x28
   12bb0:	e584302c 	str	r3, [r4, #44]	; 0x2c
   12bb4:	e1a00004 	mov	r0, r4
   12bb8:	e8bd8010 	pop	{r4, pc}
   12bbc:	00040adc 	.word	0x00040adc

00012bc0 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   12bc0:	e590001c 	ldr	r0, [r0, #28]
   12bc4:	e12fff1e 	bx	lr

00012bc8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
   12bc8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12bcc:	e2519000 	subs	r9, r1, #0
   12bd0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   12bd4:	e59d5058 	ldr	r5, [sp, #88]	; 0x58
   12bd8:	e5dd805c 	ldrb	r8, [sp, #92]	; 0x5c
   12bdc:	0a000059 	beq	12d48 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x180>
   12be0:	e1a07003 	mov	r7, r3
   12be4:	e2423006 	sub	r3, r2, #6
   12be8:	e353000a 	cmp	r3, #10
   12bec:	e1a06002 	mov	r6, r2
   12bf0:	8a000058 	bhi	12d58 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x190>
   12bf4:	e2973000 	adds	r3, r7, #0
   12bf8:	13a03001 	movne	r3, #1
   12bfc:	e3550000 	cmp	r5, #0
   12c00:	03833001 	orreq	r3, r3, #1
   12c04:	e3530000 	cmp	r3, #0
   12c08:	0a000056 	beq	12d68 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1a0>
   12c0c:	e1a04000 	mov	r4, r0
   12c10:	e3a0201f 	mov	r2, #31
   12c14:	e3a01000 	mov	r1, #0
   12c18:	e28d0018 	add	r0, sp, #24
   12c1c:	eb005cc4 	bl	29f34 <memset>
   12c20:	e3580000 	cmp	r8, #0
   12c24:	13a0e080 	movne	lr, #128	; 0x80
   12c28:	03a0e000 	moveq	lr, #0
   12c2c:	e5dd0026 	ldrb	r0, [sp, #38]	; 0x26
   12c30:	e5943018 	ldr	r3, [r4, #24]
   12c34:	e3c0201f 	bic	r2, r0, #31
   12c38:	e5ddc025 	ldrb	ip, [sp, #37]	; 0x25
   12c3c:	e206001f 	and	r0, r6, #31
   12c40:	e2833001 	add	r3, r3, #1
   12c44:	e1800002 	orr	r0, r0, r2
   12c48:	e1a02006 	mov	r2, r6
   12c4c:	e59f61e4 	ldr	r6, [pc, #484]	; 12e38 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x270>
   12c50:	e5843018 	str	r3, [r4, #24]
   12c54:	e3ccc00f 	bic	ip, ip, #15
   12c58:	e1a01009 	mov	r1, r9
   12c5c:	e5cd0026 	strb	r0, [sp, #38]	; 0x26
   12c60:	e28d0027 	add	r0, sp, #39	; 0x27
   12c64:	e58d301c 	str	r3, [sp, #28]
   12c68:	e5cdc025 	strb	ip, [sp, #37]	; 0x25
   12c6c:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   12c70:	e58d6018 	str	r6, [sp, #24]
   12c74:	e58d5020 	str	r5, [sp, #32]
   12c78:	eb005f24 	bl	2a910 <memcpy>
   12c7c:	e1a00004 	mov	r0, r4
   12c80:	ebfff31c 	bl	f8f8 <CUSBFunction::GetHost() const>
   12c84:	e2506000 	subs	r6, r0, #0
   12c88:	0a00003a 	beq	12d78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1b0>
   12c8c:	e3a09000 	mov	r9, #0
   12c90:	e5941014 	ldr	r1, [r4, #20]
   12c94:	e28d2018 	add	r2, sp, #24
   12c98:	e58d9000 	str	r9, [sp]
   12c9c:	e3a0301f 	mov	r3, #31
   12ca0:	ebffff4c 	bl	129d8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12ca4:	e1500009 	cmp	r0, r9
   12ca8:	ba00005b 	blt	12e1c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x254>
   12cac:	e3550000 	cmp	r5, #0
   12cb0:	0a00000a 	beq	12ce0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x118>
   12cb4:	e5940010 	ldr	r0, [r4, #16]
   12cb8:	e3580000 	cmp	r8, #0
   12cbc:	e5941014 	ldr	r1, [r4, #20]
   12cc0:	e1a03005 	mov	r3, r5
   12cc4:	11a01000 	movne	r1, r0
   12cc8:	e58d9000 	str	r9, [sp]
   12ccc:	e1a02007 	mov	r2, r7
   12cd0:	e1a00006 	mov	r0, r6
   12cd4:	ebffff3f 	bl	129d8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12cd8:	e2505000 	subs	r5, r0, #0
   12cdc:	ba000029 	blt	12d88 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1c0>
   12ce0:	e3a03000 	mov	r3, #0
   12ce4:	e5941010 	ldr	r1, [r4, #16]
   12ce8:	e1a00006 	mov	r0, r6
   12cec:	e58d3000 	str	r3, [sp]
   12cf0:	e28d2008 	add	r2, sp, #8
   12cf4:	e3a0300d 	mov	r3, #13
   12cf8:	ebffff36 	bl	129d8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   12cfc:	e350000d 	cmp	r0, #13
   12d00:	1a000027 	bne	12da4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1dc>
   12d04:	e59f3130 	ldr	r3, [pc, #304]	; 12e3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x274>
   12d08:	e59d2008 	ldr	r2, [sp, #8]
   12d0c:	e1520003 	cmp	r2, r3
   12d10:	1a00002a 	bne	12dc0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x1f8>
   12d14:	e5943018 	ldr	r3, [r4, #24]
   12d18:	e59d200c 	ldr	r2, [sp, #12]
   12d1c:	e1520003 	cmp	r2, r3
   12d20:	1a00002d 	bne	12ddc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x214>
   12d24:	e5dd3014 	ldrb	r3, [sp, #20]
   12d28:	e3530000 	cmp	r3, #0
   12d2c:	1a000031 	bne	12df8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x230>
   12d30:	e59d3010 	ldr	r3, [sp, #16]
   12d34:	e3530000 	cmp	r3, #0
   12d38:	1a000030 	bne	12e00 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x238>
   12d3c:	e1a00005 	mov	r0, r5
   12d40:	e28dd03c 	add	sp, sp, #60	; 0x3c
   12d44:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12d48:	e3a02f8e 	mov	r2, #568	; 0x238
   12d4c:	e59f10ec 	ldr	r1, [pc, #236]	; 12e40 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12d50:	e59f00ec 	ldr	r0, [pc, #236]	; 12e44 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x27c>
   12d54:	eb0046a9 	bl	24800 <assertion_failed>
   12d58:	e59f20e8 	ldr	r2, [pc, #232]	; 12e48 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x280>
   12d5c:	e59f10dc 	ldr	r1, [pc, #220]	; 12e40 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12d60:	e59f00e4 	ldr	r0, [pc, #228]	; 12e4c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x284>
   12d64:	eb0046a5 	bl	24800 <assertion_failed>
   12d68:	e59f20e0 	ldr	r2, [pc, #224]	; 12e50 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x288>
   12d6c:	e59f10cc 	ldr	r1, [pc, #204]	; 12e40 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12d70:	e59f00dc 	ldr	r0, [pc, #220]	; 12e54 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x28c>
   12d74:	eb0046a1 	bl	24800 <assertion_failed>
   12d78:	e59f20d8 	ldr	r2, [pc, #216]	; 12e58 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x290>
   12d7c:	e59f10bc 	ldr	r1, [pc, #188]	; 12e40 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x278>
   12d80:	e59f00d4 	ldr	r0, [pc, #212]	; 12e5c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x294>
   12d84:	eb00469d 	bl	24800 <assertion_failed>
   12d88:	eb004f8f 	bl	26bcc <CLogger::Get()>
   12d8c:	e59f30cc 	ldr	r3, [pc, #204]	; 12e60 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x298>
   12d90:	e3a02001 	mov	r2, #1
   12d94:	e59f10c8 	ldr	r1, [pc, #200]	; 12e64 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12d98:	eb004ec8 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12d9c:	e3e05000 	mvn	r5, #0
   12da0:	eaffffe5 	b	12d3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12da4:	eb004f88 	bl	26bcc <CLogger::Get()>
   12da8:	e59f30b8 	ldr	r3, [pc, #184]	; 12e68 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a0>
   12dac:	e3a02001 	mov	r2, #1
   12db0:	e59f10ac 	ldr	r1, [pc, #172]	; 12e64 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12db4:	eb004ec1 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12db8:	e3e05000 	mvn	r5, #0
   12dbc:	eaffffde 	b	12d3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12dc0:	eb004f81 	bl	26bcc <CLogger::Get()>
   12dc4:	e59f30a0 	ldr	r3, [pc, #160]	; 12e6c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a4>
   12dc8:	e3a02001 	mov	r2, #1
   12dcc:	e59f1090 	ldr	r1, [pc, #144]	; 12e64 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12dd0:	eb004eba 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12dd4:	e3e05000 	mvn	r5, #0
   12dd8:	eaffffd7 	b	12d3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12ddc:	eb004f7a 	bl	26bcc <CLogger::Get()>
   12de0:	e59f3088 	ldr	r3, [pc, #136]	; 12e70 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2a8>
   12de4:	e3a02001 	mov	r2, #1
   12de8:	e59f1074 	ldr	r1, [pc, #116]	; 12e64 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12dec:	eb004eb3 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12df0:	e3e05000 	mvn	r5, #0
   12df4:	eaffffd0 	b	12d3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12df8:	e3e05000 	mvn	r5, #0
   12dfc:	eaffffce 	b	12d3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12e00:	eb004f71 	bl	26bcc <CLogger::Get()>
   12e04:	e59f3068 	ldr	r3, [pc, #104]	; 12e74 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2ac>
   12e08:	e3a02001 	mov	r2, #1
   12e0c:	e59f1050 	ldr	r1, [pc, #80]	; 12e64 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12e10:	eb004eaa 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12e14:	e3e05000 	mvn	r5, #0
   12e18:	eaffffc7 	b	12d3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12e1c:	eb004f6a 	bl	26bcc <CLogger::Get()>
   12e20:	e59f3050 	ldr	r3, [pc, #80]	; 12e78 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2b0>
   12e24:	e3a02001 	mov	r2, #1
   12e28:	e59f1034 	ldr	r1, [pc, #52]	; 12e64 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x29c>
   12e2c:	eb004ea3 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12e30:	e3e05000 	mvn	r5, #0
   12e34:	eaffffc0 	b	12d3c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x174>
   12e38:	43425355 	.word	0x43425355
   12e3c:	53425355 	.word	0x53425355
   12e40:	00040b10 	.word	0x00040b10
   12e44:	00040b50 	.word	0x00040b50
   12e48:	00000239 	.word	0x00000239
   12e4c:	00040b60 	.word	0x00040b60
   12e50:	0000023a 	.word	0x0000023a
   12e54:	00040b84 	.word	0x00040b84
   12e58:	00000249 	.word	0x00000249
   12e5c:	00040ba4 	.word	0x00040ba4
   12e60:	00040bc4 	.word	0x00040bc4
   12e64:	00040b00 	.word	0x00040b00
   12e68:	00040bdc 	.word	0x00040bdc
   12e6c:	00040bf0 	.word	0x00040bf0
   12e70:	00040c08 	.word	0x00040c08
   12e74:	00040c1c 	.word	0x00040c1c
   12e78:	00040bb0 	.word	0x00040bb0

00012e7c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
   12e7c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12e80:	e3510000 	cmp	r1, #0
   12e84:	e24dd01c 	sub	sp, sp, #28
   12e88:	0a000034 	beq	12f60 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xe4>
   12e8c:	e1c062d0 	ldrd	r6, [r0, #32]
   12e90:	e3a03000 	mov	r3, #0
   12e94:	e1a04002 	mov	r4, r2
   12e98:	e59f20ec 	ldr	r2, [pc, #236]	; 12f8c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x110>
   12e9c:	e0033007 	and	r3, r3, r7
   12ea0:	e0022006 	and	r2, r2, r6
   12ea4:	e1923003 	orrs	r3, r2, r3
   12ea8:	e3e08000 	mvn	r8, #0
   12eac:	13a03001 	movne	r3, #1
   12eb0:	03a03000 	moveq	r3, #0
   12eb4:	e59f90d0 	ldr	r9, [pc, #208]	; 12f8c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x110>
   12eb8:	e1570009 	cmp	r7, r9
   12ebc:	01560008 	cmpeq	r6, r8
   12ec0:	83833001 	orrhi	r3, r3, #1
   12ec4:	e3530000 	cmp	r3, #0
   12ec8:	1a000020 	bne	12f50 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd4>
   12ecc:	e1a0cb84 	lsl	ip, r4, #23
   12ed0:	e1a0cbac 	lsr	ip, ip, #23
   12ed4:	e1a024a6 	lsr	r2, r6, #9
   12ed8:	e35c0000 	cmp	ip, #0
   12edc:	e1822b87 	orr	r2, r2, r7, lsl #23
   12ee0:	1a00001a 	bne	12f50 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd4>
   12ee4:	e3a05001 	mov	r5, #1
   12ee8:	e3a06028 	mov	r6, #40	; 0x28
   12eec:	e1a0e4a4 	lsr	lr, r4, #9
   12ef0:	e6bf2f32 	rev	r2, r2
   12ef4:	e6bfefbe 	rev16	lr, lr
   12ef8:	e6ffe07e 	uxth	lr, lr
   12efc:	e1cd20be 	strh	r2, [sp, #14]
   12f00:	e1a02822 	lsr	r2, r2, #16
   12f04:	e1a03001 	mov	r3, r1
   12f08:	e1cd21b0 	strh	r2, [sp, #16]
   12f0c:	e1a0742e 	lsr	r7, lr, #8
   12f10:	e58d4000 	str	r4, [sp]
   12f14:	e58d5004 	str	r5, [sp, #4]
   12f18:	e3a0200a 	mov	r2, #10
   12f1c:	e28d100c 	add	r1, sp, #12
   12f20:	e5cdc00d 	strb	ip, [sp, #13]
   12f24:	e5cdc012 	strb	ip, [sp, #18]
   12f28:	e5cdc015 	strb	ip, [sp, #21]
   12f2c:	e5cde013 	strb	lr, [sp, #19]
   12f30:	e5cd7014 	strb	r7, [sp, #20]
   12f34:	e5cd600c 	strb	r6, [sp, #12]
   12f38:	ebffff22 	bl	12bc8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   12f3c:	e1500004 	cmp	r0, r4
   12f40:	1a00000a 	bne	12f70 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xf4>
   12f44:	e1a00004 	mov	r0, r4
   12f48:	e28dd01c 	add	sp, sp, #28
   12f4c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12f50:	e3e04000 	mvn	r4, #0
   12f54:	e1a00004 	mov	r0, r4
   12f58:	e28dd01c 	add	sp, sp, #28
   12f5c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   12f60:	e59f2028 	ldr	r2, [pc, #40]	; 12f90 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x114>
   12f64:	e59f1028 	ldr	r1, [pc, #40]	; 12f94 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x118>
   12f68:	e59f0028 	ldr	r0, [pc, #40]	; 12f98 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x11c>
   12f6c:	eb004623 	bl	24800 <assertion_failed>
   12f70:	eb004f15 	bl	26bcc <CLogger::Get()>
   12f74:	e1a02005 	mov	r2, r5
   12f78:	e59f301c 	ldr	r3, [pc, #28]	; 12f9c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x120>
   12f7c:	e59f101c 	ldr	r1, [pc, #28]	; 12fa0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x124>
   12f80:	eb004e4e 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12f84:	e3e04000 	mvn	r4, #0
   12f88:	eaffffed 	b	12f44 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc8>
   12f8c:	000001ff 	.word	0x000001ff
   12f90:	000001ed 	.word	0x000001ed
   12f94:	00040b10 	.word	0x00040b10
   12f98:	00040b94 	.word	0x00040b94
   12f9c:	00040c34 	.word	0x00040c34
   12fa0:	00040b00 	.word	0x00040b00

00012fa4 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
   12fa4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   12fa8:	e3510000 	cmp	r1, #0
   12fac:	e24dd01c 	sub	sp, sp, #28
   12fb0:	0a000032 	beq	13080 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xdc>
   12fb4:	e1c062d0 	ldrd	r6, [r0, #32]
   12fb8:	e3a03000 	mov	r3, #0
   12fbc:	e1a04002 	mov	r4, r2
   12fc0:	e59f20e4 	ldr	r2, [pc, #228]	; 130ac <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x108>
   12fc4:	e0033007 	and	r3, r3, r7
   12fc8:	e0022006 	and	r2, r2, r6
   12fcc:	e1923003 	orrs	r3, r2, r3
   12fd0:	e3e08000 	mvn	r8, #0
   12fd4:	13a03001 	movne	r3, #1
   12fd8:	03a03000 	moveq	r3, #0
   12fdc:	e59f90c8 	ldr	r9, [pc, #200]	; 130ac <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x108>
   12fe0:	e1570009 	cmp	r7, r9
   12fe4:	01560008 	cmpeq	r6, r8
   12fe8:	83833001 	orrhi	r3, r3, #1
   12fec:	e3530000 	cmp	r3, #0
   12ff0:	1a00001f 	bne	13074 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd0>
   12ff4:	e1a0cb84 	lsl	ip, r4, #23
   12ff8:	e1a0cbac 	lsr	ip, ip, #23
   12ffc:	e1a024a6 	lsr	r2, r6, #9
   13000:	e35c0000 	cmp	ip, #0
   13004:	e1822b87 	orr	r2, r2, r7, lsl #23
   13008:	1a000019 	bne	13074 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xd0>
   1300c:	e3a05008 	mov	r5, #8
   13010:	e3a0602a 	mov	r6, #42	; 0x2a
   13014:	e1a0e4a4 	lsr	lr, r4, #9
   13018:	e6bf2f32 	rev	r2, r2
   1301c:	e6bfefbe 	rev16	lr, lr
   13020:	e6ffe07e 	uxth	lr, lr
   13024:	e1cd20be 	strh	r2, [sp, #14]
   13028:	e1a02822 	lsr	r2, r2, #16
   1302c:	e1a03001 	mov	r3, r1
   13030:	e1cd21b0 	strh	r2, [sp, #16]
   13034:	e1a0753e 	lsr	r7, lr, r5
   13038:	e88d1010 	stm	sp, {r4, ip}
   1303c:	e3a0200a 	mov	r2, #10
   13040:	e28d100c 	add	r1, sp, #12
   13044:	e5cdc012 	strb	ip, [sp, #18]
   13048:	e5cdc015 	strb	ip, [sp, #21]
   1304c:	e5cde013 	strb	lr, [sp, #19]
   13050:	e5cd7014 	strb	r7, [sp, #20]
   13054:	e5cd600c 	strb	r6, [sp, #12]
   13058:	e5cd500d 	strb	r5, [sp, #13]
   1305c:	ebfffed9 	bl	12bc8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13060:	e3500000 	cmp	r0, #0
   13064:	a1a00004 	movge	r0, r4
   13068:	ba000008 	blt	13090 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xec>
   1306c:	e28dd01c 	add	sp, sp, #28
   13070:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13074:	e3e00000 	mvn	r0, #0
   13078:	e28dd01c 	add	sp, sp, #28
   1307c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13080:	e59f2028 	ldr	r2, [pc, #40]	; 130b0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x10c>
   13084:	e59f1028 	ldr	r1, [pc, #40]	; 130b4 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x110>
   13088:	e59f0028 	ldr	r0, [pc, #40]	; 130b8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x114>
   1308c:	eb0045db 	bl	24800 <assertion_failed>
   13090:	eb004ecd 	bl	26bcc <CLogger::Get()>
   13094:	e59f3020 	ldr	r3, [pc, #32]	; 130bc <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x118>
   13098:	e3a02001 	mov	r2, #1
   1309c:	e59f101c 	ldr	r1, [pc, #28]	; 130c0 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x11c>
   130a0:	eb004e06 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   130a4:	e3e00000 	mvn	r0, #0
   130a8:	eaffffef 	b	1306c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc8>
   130ac:	000001ff 	.word	0x000001ff
   130b0:	00000212 	.word	0x00000212
   130b4:	00040b10 	.word	0x00040b10
   130b8:	00040b94 	.word	0x00040b94
   130bc:	00040c44 	.word	0x00040c44
   130c0:	00040b00 	.word	0x00040b00

000130c4 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   130c4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   130c8:	e24dd014 	sub	sp, sp, #20
   130cc:	e1a05000 	mov	r5, r0
   130d0:	ebfff208 	bl	f8f8 <CUSBFunction::GetHost() const>
   130d4:	e2506000 	subs	r6, r0, #0
   130d8:	0a00002e 	beq	13198 <CUSBBulkOnlyMassStorageDevice::Reset()+0xd4>
   130dc:	e1a00005 	mov	r0, r5
   130e0:	ebfff1f9 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
   130e4:	e3a04000 	mov	r4, #0
   130e8:	e1a01000 	mov	r1, r0
   130ec:	e58d400c 	str	r4, [sp, #12]
   130f0:	e58d4008 	str	r4, [sp, #8]
   130f4:	e58d4004 	str	r4, [sp, #4]
   130f8:	e58d4000 	str	r4, [sp]
   130fc:	e3a030ff 	mov	r3, #255	; 0xff
   13100:	e3a02021 	mov	r2, #33	; 0x21
   13104:	e1a00006 	mov	r0, r6
   13108:	ebfffdcc 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1310c:	e1500004 	cmp	r0, r4
   13110:	ba000024 	blt	131a8 <CUSBBulkOnlyMassStorageDevice::Reset()+0xe4>
   13114:	e1a00005 	mov	r0, r5
   13118:	ebfff1eb 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
   1311c:	e3a07001 	mov	r7, #1
   13120:	e1a01000 	mov	r1, r0
   13124:	e58d400c 	str	r4, [sp, #12]
   13128:	e58d4008 	str	r4, [sp, #8]
   1312c:	e88d0090 	stm	sp, {r4, r7}
   13130:	e1a03007 	mov	r3, r7
   13134:	e3a02002 	mov	r2, #2
   13138:	e1a00006 	mov	r0, r6
   1313c:	ebfffdbf 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13140:	e3500000 	cmp	r0, #0
   13144:	ba00001e 	blt	131c4 <CUSBBulkOnlyMassStorageDevice::Reset()+0x100>
   13148:	e1a00005 	mov	r0, r5
   1314c:	ebfff1de 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
   13150:	e3a02002 	mov	r2, #2
   13154:	e1a01000 	mov	r1, r0
   13158:	e58d400c 	str	r4, [sp, #12]
   1315c:	e58d4008 	str	r4, [sp, #8]
   13160:	e58d4000 	str	r4, [sp]
   13164:	e1a03007 	mov	r3, r7
   13168:	e1a00006 	mov	r0, r6
   1316c:	e58d2004 	str	r2, [sp, #4]
   13170:	ebfffdb2 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13174:	e3500000 	cmp	r0, #0
   13178:	ba000018 	blt	131e0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x11c>
   1317c:	e5950010 	ldr	r0, [r5, #16]
   13180:	ebfff0c9 	bl	f4ac <CUSBEndpoint::ResetPID()>
   13184:	e5950014 	ldr	r0, [r5, #20]
   13188:	ebfff0c7 	bl	f4ac <CUSBEndpoint::ResetPID()>
   1318c:	e1a00004 	mov	r0, r4
   13190:	e28dd014 	add	sp, sp, #20
   13194:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13198:	e3a02fa2 	mov	r2, #648	; 0x288
   1319c:	e59f1058 	ldr	r1, [pc, #88]	; 131fc <CUSBBulkOnlyMassStorageDevice::Reset()+0x138>
   131a0:	e59f0058 	ldr	r0, [pc, #88]	; 13200 <CUSBBulkOnlyMassStorageDevice::Reset()+0x13c>
   131a4:	eb004595 	bl	24800 <assertion_failed>
   131a8:	eb004e87 	bl	26bcc <CLogger::Get()>
   131ac:	e59f3050 	ldr	r3, [pc, #80]	; 13204 <CUSBBulkOnlyMassStorageDevice::Reset()+0x140>
   131b0:	e3a02004 	mov	r2, #4
   131b4:	e59f104c 	ldr	r1, [pc, #76]	; 13208 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   131b8:	eb004dc0 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   131bc:	e3e00000 	mvn	r0, #0
   131c0:	eafffff2 	b	13190 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   131c4:	eb004e80 	bl	26bcc <CLogger::Get()>
   131c8:	e59f303c 	ldr	r3, [pc, #60]	; 1320c <CUSBBulkOnlyMassStorageDevice::Reset()+0x148>
   131cc:	e3a02004 	mov	r2, #4
   131d0:	e59f1030 	ldr	r1, [pc, #48]	; 13208 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   131d4:	eb004db9 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   131d8:	e3e00000 	mvn	r0, #0
   131dc:	eaffffeb 	b	13190 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   131e0:	eb004e79 	bl	26bcc <CLogger::Get()>
   131e4:	e59f3024 	ldr	r3, [pc, #36]	; 13210 <CUSBBulkOnlyMassStorageDevice::Reset()+0x14c>
   131e8:	e3a02004 	mov	r2, #4
   131ec:	e59f1014 	ldr	r1, [pc, #20]	; 13208 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   131f0:	eb004db2 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   131f4:	e3e00000 	mvn	r0, #0
   131f8:	eaffffe4 	b	13190 <CUSBBulkOnlyMassStorageDevice::Reset()+0xcc>
   131fc:	00040b10 	.word	0x00040b10
   13200:	00040ba4 	.word	0x00040ba4
   13204:	00040c54 	.word	0x00040c54
   13208:	00040b00 	.word	0x00040b00
   1320c:	00040c68 	.word	0x00040c68
   13210:	00040c88 	.word	0x00040c88

00013214 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
   13214:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13218:	e1a06002 	mov	r6, r2
   1321c:	e1a07000 	mov	r7, r0
   13220:	e1a08001 	mov	r8, r1
   13224:	e1a09002 	mov	r9, r2
   13228:	e3a05004 	mov	r5, #4
   1322c:	e1a02006 	mov	r2, r6
   13230:	e1a01008 	mov	r1, r8
   13234:	e1a00007 	mov	r0, r7
   13238:	ebffff0f 	bl	12e7c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
   1323c:	e1500006 	cmp	r0, r6
   13240:	e1a04000 	mov	r4, r0
   13244:	1a000001 	bne	13250 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x3c>
   13248:	e1a00009 	mov	r0, r9
   1324c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13250:	e1a00007 	mov	r0, r7
   13254:	ebffff9a 	bl	130c4 <CUSBBulkOnlyMassStorageDevice::Reset()>
   13258:	e3500000 	cmp	r0, #0
   1325c:	1a000004 	bne	13274 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
   13260:	e2555001 	subs	r5, r5, #1
   13264:	1afffff0 	bne	1322c <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
   13268:	e1a09004 	mov	r9, r4
   1326c:	e1a00009 	mov	r0, r9
   13270:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13274:	e1a09000 	mov	r9, r0
   13278:	eafffff2 	b	13248 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x34>

0001327c <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
   1327c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13280:	e1a06002 	mov	r6, r2
   13284:	e1a07000 	mov	r7, r0
   13288:	e1a08001 	mov	r8, r1
   1328c:	e1a09002 	mov	r9, r2
   13290:	e3a05004 	mov	r5, #4
   13294:	e1a02006 	mov	r2, r6
   13298:	e1a01008 	mov	r1, r8
   1329c:	e1a00007 	mov	r0, r7
   132a0:	ebffff3f 	bl	12fa4 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
   132a4:	e1500006 	cmp	r0, r6
   132a8:	e1a04000 	mov	r4, r0
   132ac:	1a000001 	bne	132b8 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x3c>
   132b0:	e1a00009 	mov	r0, r9
   132b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   132b8:	e1a00007 	mov	r0, r7
   132bc:	ebffff80 	bl	130c4 <CUSBBulkOnlyMassStorageDevice::Reset()>
   132c0:	e3500000 	cmp	r0, #0
   132c4:	1a000004 	bne	132dc <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
   132c8:	e2555001 	subs	r5, r5, #1
   132cc:	1afffff0 	bne	13294 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
   132d0:	e1a09004 	mov	r9, r4
   132d4:	e1a00009 	mov	r0, r9
   132d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   132dc:	e1a09000 	mov	r9, r0
   132e0:	eafffff2 	b	132b0 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x34>

000132e4 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   132e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132e8:	e24dd064 	sub	sp, sp, #100	; 0x64
   132ec:	e1a05000 	mov	r5, r0
   132f0:	ebfff15e 	bl	f870 <CUSBFunction::GetNumEndpoints() const>
   132f4:	e3500001 	cmp	r0, #1
   132f8:	c3a06005 	movgt	r6, #5
   132fc:	c3a07014 	movgt	r7, #20
   13300:	ca000004 	bgt	13318 <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   13304:	ea0000e6 	b	136a4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3c0>
   13308:	e5d43003 	ldrb	r3, [r4, #3]
   1330c:	e203303f 	and	r3, r3, #63	; 0x3f
   13310:	e3530002 	cmp	r3, #2
   13314:	0a0000a2 	beq	135a4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c0>
   13318:	e1a01006 	mov	r1, r6
   1331c:	e1a00005 	mov	r0, r5
   13320:	ebfff17f 	bl	f924 <CUSBFunction::GetDescriptor(unsigned char)>
   13324:	e2504000 	subs	r4, r0, #0
   13328:	1afffff6 	bne	13308 <CUSBBulkOnlyMassStorageDevice::Configure()+0x24>
   1332c:	e5953010 	ldr	r3, [r5, #16]
   13330:	e1a00005 	mov	r0, r5
   13334:	e3530000 	cmp	r3, #0
   13338:	0a0000b2 	beq	13608 <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   1333c:	e5953014 	ldr	r3, [r5, #20]
   13340:	e3530000 	cmp	r3, #0
   13344:	0a0000af 	beq	13608 <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   13348:	ebfff090 	bl	f590 <CUSBFunction::Configure()>
   1334c:	e2506000 	subs	r6, r0, #0
   13350:	0a0000a4 	beq	135e8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x304>
   13354:	e3a0c024 	mov	ip, #36	; 0x24
   13358:	e3a06001 	mov	r6, #1
   1335c:	e3a07012 	mov	r7, #18
   13360:	e58dc000 	str	ip, [sp]
   13364:	e58d6004 	str	r6, [sp, #4]
   13368:	e28d303c 	add	r3, sp, #60	; 0x3c
   1336c:	e3a02006 	mov	r2, #6
   13370:	e28d100c 	add	r1, sp, #12
   13374:	e1a00005 	mov	r0, r5
   13378:	e5cd400d 	strb	r4, [sp, #13]
   1337c:	e5cd400e 	strb	r4, [sp, #14]
   13380:	e5cd400f 	strb	r4, [sp, #15]
   13384:	e5cd4011 	strb	r4, [sp, #17]
   13388:	e5cdc010 	strb	ip, [sp, #16]
   1338c:	e5cd700c 	strb	r7, [sp, #12]
   13390:	ebfffe0c 	bl	12bc8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13394:	e3500024 	cmp	r0, #36	; 0x24
   13398:	1a0000b8 	bne	13680 <CUSBBulkOnlyMassStorageDevice::Configure()+0x39c>
   1339c:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   133a0:	e213301f 	ands	r3, r3, #31
   133a4:	1a0000ab 	bne	13658 <CUSBBulkOnlyMassStorageDevice::Configure()+0x374>
   133a8:	e1a04003 	mov	r4, r3
   133ac:	e3a06063 	mov	r6, #99	; 0x63
   133b0:	e3a0a064 	mov	sl, #100	; 0x64
   133b4:	e3a08006 	mov	r8, #6
   133b8:	e3a0b003 	mov	fp, #3
   133bc:	ea000010 	b	13404 <CUSBBulkOnlyMassStorageDevice::Configure()+0x120>
   133c0:	e3a09001 	mov	r9, #1
   133c4:	e3a0c000 	mov	ip, #0
   133c8:	e88d0280 	stm	sp, {r7, r9}
   133cc:	e28d3028 	add	r3, sp, #40	; 0x28
   133d0:	e1a02008 	mov	r2, r8
   133d4:	e28d101c 	add	r1, sp, #28
   133d8:	e1a00005 	mov	r0, r5
   133dc:	e5cdb01c 	strb	fp, [sp, #28]
   133e0:	e1cd41be 	strh	r4, [sp, #30]
   133e4:	e5cd7020 	strb	r7, [sp, #32]
   133e8:	e5cd4021 	strb	r4, [sp, #33]	; 0x21
   133ec:	e5cdc01d 	strb	ip, [sp, #29]
   133f0:	ebfffdf4 	bl	12bc8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   133f4:	e3500000 	cmp	r0, #0
   133f8:	ba0000ae 	blt	136b8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3d4>
   133fc:	e2566001 	subs	r6, r6, #1
   13400:	0a0000bb 	beq	136f4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x410>
   13404:	eb005abd 	bl	29f00 <CTimer::Get()>
   13408:	e1a0000a 	mov	r0, sl
   1340c:	eb005a82 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
   13410:	e58d4004 	str	r4, [sp, #4]
   13414:	e58d4000 	str	r4, [sp]
   13418:	e3a03000 	mov	r3, #0
   1341c:	e1a02008 	mov	r2, r8
   13420:	e28d1014 	add	r1, sp, #20
   13424:	e1a00005 	mov	r0, r5
   13428:	e5cd4014 	strb	r4, [sp, #20]
   1342c:	e5cd4015 	strb	r4, [sp, #21]
   13430:	e5cd4016 	strb	r4, [sp, #22]
   13434:	e5cd4017 	strb	r4, [sp, #23]
   13438:	e5cd4018 	strb	r4, [sp, #24]
   1343c:	e5cd4019 	strb	r4, [sp, #25]
   13440:	ebfffde0 	bl	12bc8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13444:	e3500000 	cmp	r0, #0
   13448:	baffffdc 	blt	133c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0xdc>
   1344c:	e3a02008 	mov	r2, #8
   13450:	e3a00025 	mov	r0, #37	; 0x25
   13454:	e3a06001 	mov	r6, #1
   13458:	e3a0e000 	mov	lr, #0
   1345c:	e88d0044 	stm	sp, {r2, r6}
   13460:	e5cd001c 	strb	r0, [sp, #28]
   13464:	e28d3014 	add	r3, sp, #20
   13468:	e28d101c 	add	r1, sp, #28
   1346c:	e3a0200a 	mov	r2, #10
   13470:	e1a00005 	mov	r0, r5
   13474:	e1cd41be 	strh	r4, [sp, #30]
   13478:	e1cd42b0 	strh	r4, [sp, #32]
   1347c:	e1cd42b2 	strh	r4, [sp, #34]	; 0x22
   13480:	e5cd4025 	strb	r4, [sp, #37]	; 0x25
   13484:	e5cde01d 	strb	lr, [sp, #29]
   13488:	e5cde024 	strb	lr, [sp, #36]	; 0x24
   1348c:	ebfffdcd 	bl	12bc8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   13490:	e3500008 	cmp	r0, #8
   13494:	1a00009c 	bne	1370c <CUSBBulkOnlyMassStorageDevice::Configure()+0x428>
   13498:	e59d4018 	ldr	r4, [sp, #24]
   1349c:	e6bf4f34 	rev	r4, r4
   134a0:	e3540c02 	cmp	r4, #512	; 0x200
   134a4:	1a00008a 	bne	136d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3f0>
   134a8:	e59d3014 	ldr	r3, [sp, #20]
   134ac:	e6bf3f33 	rev	r3, r3
   134b0:	e3730001 	cmn	r3, #1
   134b4:	e585301c 	str	r3, [r5, #28]
   134b8:	0a0000ab 	beq	1376c <CUSBBulkOnlyMassStorageDevice::Configure()+0x488>
   134bc:	e2833001 	add	r3, r3, #1
   134c0:	e585301c 	str	r3, [r5, #28]
   134c4:	eb004dc0 	bl	26bcc <CLogger::Get()>
   134c8:	e595201c 	ldr	r2, [r5, #28]
   134cc:	e59f72d4 	ldr	r7, [pc, #724]	; 137a8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4c4>
   134d0:	e1a025a2 	lsr	r2, r2, #11
   134d4:	e59f32d0 	ldr	r3, [pc, #720]	; 137ac <CUSBBulkOnlyMassStorageDevice::Configure()+0x4c8>
   134d8:	e58d2000 	str	r2, [sp]
   134dc:	e59f12cc 	ldr	r1, [pc, #716]	; 137b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   134e0:	e3a02004 	mov	r2, #4
   134e4:	eb004cf5 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   134e8:	e1a04006 	mov	r4, r6
   134ec:	e1a03006 	mov	r3, r6
   134f0:	e5971000 	ldr	r1, [r7]
   134f4:	ea000002 	b	13504 <CUSBBulkOnlyMassStorageDevice::Configure()+0x220>
   134f8:	e2833001 	add	r3, r3, #1
   134fc:	e3530020 	cmp	r3, #32
   13500:	0a000088 	beq	13728 <CUSBBulkOnlyMassStorageDevice::Configure()+0x444>
   13504:	e1a02314 	lsl	r2, r4, r3
   13508:	e1120001 	tst	r2, r1
   1350c:	1afffff9 	bne	134f8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x214>
   13510:	e595002c 	ldr	r0, [r5, #44]	; 0x2c
   13514:	e1822001 	orr	r2, r2, r1
   13518:	e3500000 	cmp	r0, #0
   1351c:	e5872000 	str	r2, [r7]
   13520:	1a00009c 	bne	13798 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4b4>
   13524:	e585302c 	str	r3, [r5, #44]	; 0x2c
   13528:	e28d0028 	add	r0, sp, #40	; 0x28
   1352c:	eb00518c 	bl	27b64 <CString::CString()>
   13530:	e28d0028 	add	r0, sp, #40	; 0x28
   13534:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   13538:	e59f1274 	ldr	r1, [pc, #628]	; 137b4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4d0>
   1353c:	eb0056cb 	bl	29070 <CString::Format(char const*, ...)>
   13540:	e5953028 	ldr	r3, [r5, #40]	; 0x28
   13544:	e3530000 	cmp	r3, #0
   13548:	1a00008e 	bne	13788 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4a4>
   1354c:	e28d0028 	add	r0, sp, #40	; 0x28
   13550:	eb005199 	bl	27bbc <CString::operator char const*() const>
   13554:	e1a08000 	mov	r8, r0
   13558:	e3a00024 	mov	r0, #36	; 0x24
   1355c:	eb005ec4 	bl	2b074 <operator new(unsigned int)>
   13560:	e1a06000 	mov	r6, r0
   13564:	e1a02008 	mov	r2, r8
   13568:	e1a01005 	mov	r1, r5
   1356c:	eb0016aa 	bl	1901c <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   13570:	e5856028 	str	r6, [r5, #40]	; 0x28
   13574:	e1a00006 	mov	r0, r6
   13578:	eb0016e5 	bl	19114 <CPartitionManager::Initialize()>
   1357c:	e2506000 	subs	r6, r0, #0
   13580:	1a00006f 	bne	13744 <CUSBBulkOnlyMassStorageDevice::Configure()+0x460>
   13584:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
   13588:	e5973000 	ldr	r3, [r7]
   1358c:	e585602c 	str	r6, [r5, #44]	; 0x2c
   13590:	e1c34214 	bic	r4, r3, r4, lsl r2
   13594:	e5874000 	str	r4, [r7]
   13598:	e28d0028 	add	r0, sp, #40	; 0x28
   1359c:	eb00513d 	bl	27a98 <CString::~CString()>
   135a0:	ea000015 	b	135fc <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   135a4:	e1d430d2 	ldrsb	r3, [r4, #2]
   135a8:	e3530000 	cmp	r3, #0
   135ac:	ba00001b 	blt	13620 <CUSBBulkOnlyMassStorageDevice::Configure()+0x33c>
   135b0:	e5953014 	ldr	r3, [r5, #20]
   135b4:	e1a00005 	mov	r0, r5
   135b8:	e3530000 	cmp	r3, #0
   135bc:	1a000011 	bne	13608 <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   135c0:	ebfff0b6 	bl	f8a0 <CUSBFunction::GetDevice() const>
   135c4:	e1a09000 	mov	r9, r0
   135c8:	e1a00007 	mov	r0, r7
   135cc:	eb005ea8 	bl	2b074 <operator new(unsigned int)>
   135d0:	e1a08000 	mov	r8, r0
   135d4:	e1a02004 	mov	r2, r4
   135d8:	e1a01009 	mov	r1, r9
   135dc:	ebffeeec 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   135e0:	e5858014 	str	r8, [r5, #20]
   135e4:	eaffff4b 	b	13318 <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   135e8:	eb004d77 	bl	26bcc <CLogger::Get()>
   135ec:	e59f31c4 	ldr	r3, [pc, #452]	; 137b8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4d4>
   135f0:	e3a02001 	mov	r2, #1
   135f4:	e59f11b4 	ldr	r1, [pc, #436]	; 137b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   135f8:	eb004cb0 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   135fc:	e1a00006 	mov	r0, r6
   13600:	e28dd064 	add	sp, sp, #100	; 0x64
   13604:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13608:	e3a06000 	mov	r6, #0
   1360c:	e59f119c 	ldr	r1, [pc, #412]	; 137b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   13610:	ebfff0ce 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   13614:	e1a00006 	mov	r0, r6
   13618:	e28dd064 	add	sp, sp, #100	; 0x64
   1361c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13620:	e5953010 	ldr	r3, [r5, #16]
   13624:	e1a00005 	mov	r0, r5
   13628:	e3530000 	cmp	r3, #0
   1362c:	1afffff5 	bne	13608 <CUSBBulkOnlyMassStorageDevice::Configure()+0x324>
   13630:	ebfff09a 	bl	f8a0 <CUSBFunction::GetDevice() const>
   13634:	e1a09000 	mov	r9, r0
   13638:	e1a00007 	mov	r0, r7
   1363c:	eb005e8c 	bl	2b074 <operator new(unsigned int)>
   13640:	e1a08000 	mov	r8, r0
   13644:	e1a02004 	mov	r2, r4
   13648:	e1a01009 	mov	r1, r9
   1364c:	ebffeed0 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13650:	e5858010 	str	r8, [r5, #16]
   13654:	eaffff2f 	b	13318 <CUSBBulkOnlyMassStorageDevice::Configure()+0x34>
   13658:	eb004d5b 	bl	26bcc <CLogger::Get()>
   1365c:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   13660:	e1a02006 	mov	r2, r6
   13664:	e203301f 	and	r3, r3, #31
   13668:	e58d3000 	str	r3, [sp]
   1366c:	e59f113c 	ldr	r1, [pc, #316]	; 137b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   13670:	e59f3144 	ldr	r3, [pc, #324]	; 137bc <CUSBBulkOnlyMassStorageDevice::Configure()+0x4d8>
   13674:	e1a06004 	mov	r6, r4
   13678:	eb004c90 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1367c:	eaffffde 	b	135fc <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   13680:	eb004d51 	bl	26bcc <CLogger::Get()>
   13684:	e1a02006 	mov	r2, r6
   13688:	e1a06004 	mov	r6, r4
   1368c:	e59f312c 	ldr	r3, [pc, #300]	; 137c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4dc>
   13690:	e59f1118 	ldr	r1, [pc, #280]	; 137b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   13694:	eb004c89 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13698:	e1a00006 	mov	r0, r6
   1369c:	e28dd064 	add	sp, sp, #100	; 0x64
   136a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136a4:	e1a00005 	mov	r0, r5
   136a8:	e59f1100 	ldr	r1, [pc, #256]	; 137b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   136ac:	ebfff0a7 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   136b0:	e3a06000 	mov	r6, #0
   136b4:	eaffffd0 	b	135fc <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   136b8:	eb004d43 	bl	26bcc <CLogger::Get()>
   136bc:	e1a02009 	mov	r2, r9
   136c0:	e59f30fc 	ldr	r3, [pc, #252]	; 137c4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4e0>
   136c4:	e59f10e4 	ldr	r1, [pc, #228]	; 137b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   136c8:	eb004c7c 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   136cc:	e3a06000 	mov	r6, #0
   136d0:	eaffffc9 	b	135fc <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   136d4:	eb004d3c 	bl	26bcc <CLogger::Get()>
   136d8:	e1a02006 	mov	r2, r6
   136dc:	e58d4000 	str	r4, [sp]
   136e0:	e59f30e0 	ldr	r3, [pc, #224]	; 137c8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4e4>
   136e4:	e59f10c4 	ldr	r1, [pc, #196]	; 137b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   136e8:	eb004c74 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   136ec:	e3a06000 	mov	r6, #0
   136f0:	eaffffc1 	b	135fc <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   136f4:	eb004d34 	bl	26bcc <CLogger::Get()>
   136f8:	e1a02009 	mov	r2, r9
   136fc:	e59f30c8 	ldr	r3, [pc, #200]	; 137cc <CUSBBulkOnlyMassStorageDevice::Configure()+0x4e8>
   13700:	e59f10a8 	ldr	r1, [pc, #168]	; 137b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   13704:	eb004c6d 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13708:	eaffffbb 	b	135fc <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   1370c:	eb004d2e 	bl	26bcc <CLogger::Get()>
   13710:	e1a02006 	mov	r2, r6
   13714:	e59f30b4 	ldr	r3, [pc, #180]	; 137d0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4ec>
   13718:	e59f1090 	ldr	r1, [pc, #144]	; 137b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   1371c:	eb004c67 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13720:	e3a06000 	mov	r6, #0
   13724:	eaffffb4 	b	135fc <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   13728:	eb004d27 	bl	26bcc <CLogger::Get()>
   1372c:	e59f30a0 	ldr	r3, [pc, #160]	; 137d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4f0>
   13730:	e3a02001 	mov	r2, #1
   13734:	e59f1074 	ldr	r1, [pc, #116]	; 137b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   13738:	eb004c60 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1373c:	e3a06000 	mov	r6, #0
   13740:	eaffffad 	b	135fc <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   13744:	eb004707 	bl	25368 <CDeviceNameService::Get()>
   13748:	e1a04000 	mov	r4, r0
   1374c:	e28d0028 	add	r0, sp, #40	; 0x28
   13750:	eb005119 	bl	27bbc <CString::operator char const*() const>
   13754:	e1a02005 	mov	r2, r5
   13758:	e1a01000 	mov	r1, r0
   1375c:	e3a03001 	mov	r3, #1
   13760:	e1a00004 	mov	r0, r4
   13764:	eb004645 	bl	25080 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   13768:	eaffff8a 	b	13598 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2b4>
   1376c:	eb004d16 	bl	26bcc <CLogger::Get()>
   13770:	e1a02006 	mov	r2, r6
   13774:	e59f305c 	ldr	r3, [pc, #92]	; 137d8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4f4>
   13778:	e59f1030 	ldr	r1, [pc, #48]	; 137b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4cc>
   1377c:	eb004c4f 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13780:	e3a06000 	mov	r6, #0
   13784:	eaffff9c 	b	135fc <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   13788:	e59f204c 	ldr	r2, [pc, #76]	; 137dc <CUSBBulkOnlyMassStorageDevice::Configure()+0x4f8>
   1378c:	e59f104c 	ldr	r1, [pc, #76]	; 137e0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4fc>
   13790:	e59f004c 	ldr	r0, [pc, #76]	; 137e4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x500>
   13794:	eb004419 	bl	24800 <assertion_failed>
   13798:	e59f2048 	ldr	r2, [pc, #72]	; 137e8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x504>
   1379c:	e59f103c 	ldr	r1, [pc, #60]	; 137e0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x4fc>
   137a0:	e59f0044 	ldr	r0, [pc, #68]	; 137ec <CUSBBulkOnlyMassStorageDevice::Configure()+0x508>
   137a4:	eb004415 	bl	24800 <assertion_failed>
   137a8:	0004e0d8 	.word	0x0004e0d8
   137ac:	00040d48 	.word	0x00040d48
   137b0:	00040b00 	.word	0x00040b00
   137b4:	00040d78 	.word	0x00040d78
   137b8:	0004030c 	.word	0x0004030c
   137bc:	00040cc0 	.word	0x00040cc0
   137c0:	00040ca8 	.word	0x00040ca8
   137c4:	00040ce0 	.word	0x00040ce0
   137c8:	00040d10 	.word	0x00040d10
   137cc:	00040d9c 	.word	0x00040d9c
   137d0:	00040cf8 	.word	0x00040cf8
   137d4:	0003ffe4 	.word	0x0003ffe4
   137d8:	00040d2c 	.word	0x00040d2c
   137dc:	0000019d 	.word	0x0000019d
   137e0:	00040b10 	.word	0x00040b10
   137e4:	00040d80 	.word	0x00040d80
   137e8:	00000197 	.word	0x00000197
   137ec:	00040d60 	.word	0x00040d60

000137f0 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   137f0:	e92d4070 	push	{r4, r5, r6, lr}
   137f4:	e1a04000 	mov	r4, r0
   137f8:	e5900020 	ldr	r0, [r0, #32]
   137fc:	e59f304c 	ldr	r3, [pc, #76]	; 13850 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x60>
   13800:	e3500000 	cmp	r0, #0
   13804:	e5843000 	str	r3, [r4]
   13808:	0a000002 	beq	13818 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x28>
   1380c:	eb005e20 	bl	2b094 <operator delete[](void*)>
   13810:	e3a03000 	mov	r3, #0
   13814:	e5843020 	str	r3, [r4, #32]
   13818:	e5945010 	ldr	r5, [r4, #16]
   1381c:	e3550000 	cmp	r5, #0
   13820:	0a000006 	beq	13840 <CUSBMIDIDevice::~CUSBMIDIDevice()+0x50>
   13824:	e1a00005 	mov	r0, r5
   13828:	ebffeec3 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   1382c:	e1a00005 	mov	r0, r5
   13830:	e3a01014 	mov	r1, #20
   13834:	eb005e1c 	bl	2b0ac <operator delete(void*, unsigned int)>
   13838:	e3a03000 	mov	r3, #0
   1383c:	e5843010 	str	r3, [r4, #16]
   13840:	e1a00004 	mov	r0, r4
   13844:	ebffef28 	bl	f4ec <CUSBFunction::~CUSBFunction()>
   13848:	e1a00004 	mov	r0, r4
   1384c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13850:	00040db8 	.word	0x00040db8

00013854 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   13854:	e92d4010 	push	{r4, lr}
   13858:	e1a04000 	mov	r4, r0
   1385c:	ebffffe3 	bl	137f0 <CUSBMIDIDevice::~CUSBMIDIDevice()>
   13860:	e1a00004 	mov	r0, r4
   13864:	e3a01028 	mov	r1, #40	; 0x28
   13868:	eb005e0f 	bl	2b0ac <operator delete(void*, unsigned int)>
   1386c:	e1a00004 	mov	r0, r4
   13870:	e8bd8010 	pop	{r4, pc}

00013874 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)>:
   13874:	e92d4010 	push	{r4, lr}
   13878:	e1a04000 	mov	r4, r0
   1387c:	ebffefab 	bl	f730 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   13880:	e3a03000 	mov	r3, #0
   13884:	e59f201c 	ldr	r2, [pc, #28]	; 138a8 <CUSBMIDIDevice::CUSBMIDIDevice(CUSBFunction*)+0x34>
   13888:	e5843010 	str	r3, [r4, #16]
   1388c:	e5842000 	str	r2, [r4]
   13890:	e5843014 	str	r3, [r4, #20]
   13894:	e5843018 	str	r3, [r4, #24]
   13898:	e5843020 	str	r3, [r4, #32]
   1389c:	e5843024 	str	r3, [r4, #36]	; 0x24
   138a0:	e1a00004 	mov	r0, r4
   138a4:	e8bd8010 	pop	{r4, pc}
   138a8:	00040db8 	.word	0x00040db8

000138ac <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   138ac:	e5903014 	ldr	r3, [r0, #20]
   138b0:	e92d4010 	push	{r4, lr}
   138b4:	e3530000 	cmp	r3, #0
   138b8:	1a000006 	bne	138d8 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x2c>
   138bc:	e3510000 	cmp	r1, #0
   138c0:	e5801014 	str	r1, [r0, #20]
   138c4:	18bd8010 	popne	{r4, pc}
   138c8:	e3a0209b 	mov	r2, #155	; 0x9b
   138cc:	e59f1014 	ldr	r1, [pc, #20]	; 138e8 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
   138d0:	e59f0014 	ldr	r0, [pc, #20]	; 138ec <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x40>
   138d4:	eb0043c9 	bl	24800 <assertion_failed>
   138d8:	e3a02099 	mov	r2, #153	; 0x99
   138dc:	e59f1004 	ldr	r1, [pc, #4]	; 138e8 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x3c>
   138e0:	e59f0008 	ldr	r0, [pc, #8]	; 138f0 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x44>
   138e4:	eb0043c5 	bl	24800 <assertion_failed>
   138e8:	00040e24 	.word	0x00040e24
   138ec:	00040e48 	.word	0x00040e48
   138f0:	00040e30 	.word	0x00040e30

000138f4 <CUSBMIDIDevice::StartRequest()>:
   138f4:	e92d4070 	push	{r4, r5, r6, lr}
   138f8:	e5903010 	ldr	r3, [r0, #16]
   138fc:	e24dd008 	sub	sp, sp, #8
   13900:	e3530000 	cmp	r3, #0
   13904:	0a000022 	beq	13994 <CUSBMIDIDevice::StartRequest()+0xa0>
   13908:	e5903020 	ldr	r3, [r0, #32]
   1390c:	e1a04000 	mov	r4, r0
   13910:	e3530000 	cmp	r3, #0
   13914:	0a000022 	beq	139a4 <CUSBMIDIDevice::StartRequest()+0xb0>
   13918:	e5905018 	ldr	r5, [r0, #24]
   1391c:	e3550000 	cmp	r5, #0
   13920:	1a000023 	bne	139b4 <CUSBMIDIDevice::StartRequest()+0xc0>
   13924:	e1d031bc 	ldrh	r3, [r0, #28]
   13928:	e3530000 	cmp	r3, #0
   1392c:	0a000024 	beq	139c4 <CUSBMIDIDevice::StartRequest()+0xd0>
   13930:	e3a00028 	mov	r0, #40	; 0x28
   13934:	eb000346 	bl	14654 <CUSBRequest::operator new(unsigned int)>
   13938:	e1a06000 	mov	r6, r0
   1393c:	e1d431bc 	ldrh	r3, [r4, #28]
   13940:	e5942020 	ldr	r2, [r4, #32]
   13944:	e5941010 	ldr	r1, [r4, #16]
   13948:	e58d5000 	str	r5, [sp]
   1394c:	eb0002bb 	bl	14440 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   13950:	e1a03004 	mov	r3, r4
   13954:	e1a02005 	mov	r2, r5
   13958:	e59f1074 	ldr	r1, [pc, #116]	; 139d4 <CUSBMIDIDevice::StartRequest()+0xe0>
   1395c:	e1a00006 	mov	r0, r6
   13960:	e5846018 	str	r6, [r4, #24]
   13964:	eb000319 	bl	145d0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   13968:	e5940018 	ldr	r0, [r4, #24]
   1396c:	eb000333 	bl	14640 <CUSBRequest::SetCompleteOnNAK()>
   13970:	e1a00004 	mov	r0, r4
   13974:	ebffefdf 	bl	f8f8 <CUSBFunction::GetHost() const>
   13978:	e1a02005 	mov	r2, r5
   1397c:	e5903000 	ldr	r3, [r0]
   13980:	e5941018 	ldr	r1, [r4, #24]
   13984:	e593300c 	ldr	r3, [r3, #12]
   13988:	e28dd008 	add	sp, sp, #8
   1398c:	e8bd4070 	pop	{r4, r5, r6, lr}
   13990:	e12fff13 	bx	r3
   13994:	e3a020a0 	mov	r2, #160	; 0xa0
   13998:	e59f1038 	ldr	r1, [pc, #56]	; 139d8 <CUSBMIDIDevice::StartRequest()+0xe4>
   1399c:	e59f0038 	ldr	r0, [pc, #56]	; 139dc <CUSBMIDIDevice::StartRequest()+0xe8>
   139a0:	eb004396 	bl	24800 <assertion_failed>
   139a4:	e3a020a1 	mov	r2, #161	; 0xa1
   139a8:	e59f1028 	ldr	r1, [pc, #40]	; 139d8 <CUSBMIDIDevice::StartRequest()+0xe4>
   139ac:	e59f002c 	ldr	r0, [pc, #44]	; 139e0 <CUSBMIDIDevice::StartRequest()+0xec>
   139b0:	eb004392 	bl	24800 <assertion_failed>
   139b4:	e3a020a3 	mov	r2, #163	; 0xa3
   139b8:	e59f1018 	ldr	r1, [pc, #24]	; 139d8 <CUSBMIDIDevice::StartRequest()+0xe4>
   139bc:	e59f0020 	ldr	r0, [pc, #32]	; 139e4 <CUSBMIDIDevice::StartRequest()+0xf0>
   139c0:	eb00438e 	bl	24800 <assertion_failed>
   139c4:	e3a020a4 	mov	r2, #164	; 0xa4
   139c8:	e59f1008 	ldr	r1, [pc, #8]	; 139d8 <CUSBMIDIDevice::StartRequest()+0xe4>
   139cc:	e59f0014 	ldr	r0, [pc, #20]	; 139e8 <CUSBMIDIDevice::StartRequest()+0xf4>
   139d0:	eb00438a 	bl	24800 <assertion_failed>
   139d4:	00013bf8 	.word	0x00013bf8
   139d8:	00040e24 	.word	0x00040e24
   139dc:	00040e60 	.word	0x00040e60
   139e0:	00040e74 	.word	0x00040e74
   139e4:	00040a70 	.word	0x00040a70
   139e8:	00040e8c 	.word	0x00040e8c

000139ec <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)>:
   139ec:	e3520000 	cmp	r2, #0
   139f0:	e92d4010 	push	{r4, lr}
   139f4:	0a000007 	beq	13a18 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x2c>
   139f8:	e5923024 	ldr	r3, [r2, #36]	; 0x24
   139fc:	e1500003 	cmp	r0, r3
   13a00:	1a000008 	bne	13a28 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x3c>
   13a04:	e8bd4010 	pop	{r4, lr}
   13a08:	e3a03000 	mov	r3, #0
   13a0c:	e1a00002 	mov	r0, r2
   13a10:	e5823024 	str	r3, [r2, #36]	; 0x24
   13a14:	eaffffb6 	b	138f4 <CUSBMIDIDevice::StartRequest()>
   13a18:	e3a020f0 	mov	r2, #240	; 0xf0
   13a1c:	e59f1014 	ldr	r1, [pc, #20]	; 13a38 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
   13a20:	e59f0014 	ldr	r0, [pc, #20]	; 13a3c <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x50>
   13a24:	eb004375 	bl	24800 <assertion_failed>
   13a28:	e3a020e7 	mov	r2, #231	; 0xe7
   13a2c:	e59f1004 	ldr	r1, [pc, #4]	; 13a38 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x4c>
   13a30:	e59f0008 	ldr	r0, [pc, #8]	; 13a40 <CUSBMIDIDevice::TimerStub(unsigned int, void*, void*)+0x54>
   13a34:	eb004371 	bl	24800 <assertion_failed>
   13a38:	00040e24 	.word	0x00040e24
   13a3c:	0003f168 	.word	0x0003f168
   13a40:	00040ea0 	.word	0x00040ea0

00013a44 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>:
   13a44:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   13a48:	e2514000 	subs	r4, r1, #0
   13a4c:	e24dd00c 	sub	sp, sp, #12
   13a50:	0a000050 	beq	13b98 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x154>
   13a54:	e5903018 	ldr	r3, [r0, #24]
   13a58:	e1a05000 	mov	r5, r0
   13a5c:	e1540003 	cmp	r4, r3
   13a60:	1a000050 	bne	13ba8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x164>
   13a64:	e1a00004 	mov	r0, r4
   13a68:	eb0002a5 	bl	14504 <CUSBRequest::GetStatus() const>
   13a6c:	e3500000 	cmp	r0, #0
   13a70:	1a00001a 	bne	13ae0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x9c>
   13a74:	e5954018 	ldr	r4, [r5, #24]
   13a78:	e3540000 	cmp	r4, #0
   13a7c:	13a09000 	movne	r9, #0
   13a80:	0a000008 	beq	13aa8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x64>
   13a84:	e1a00004 	mov	r0, r4
   13a88:	eb00028d 	bl	144c4 <CUSBRequest::~CUSBRequest()>
   13a8c:	e1a00004 	mov	r0, r4
   13a90:	e3a01028 	mov	r1, #40	; 0x28
   13a94:	eb000303 	bl	146a8 <CUSBRequest::operator delete(void*, unsigned int)>
   13a98:	e3a03000 	mov	r3, #0
   13a9c:	e1590003 	cmp	r9, r3
   13aa0:	e5853018 	str	r3, [r5, #24]
   13aa4:	1a000033 	bne	13b78 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x134>
   13aa8:	e5954024 	ldr	r4, [r5, #36]	; 0x24
   13aac:	e3540000 	cmp	r4, #0
   13ab0:	1a000040 	bne	13bb8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x174>
   13ab4:	eb005911 	bl	29f00 <CTimer::Get()>
   13ab8:	e58d5000 	str	r5, [sp]
   13abc:	e1a03004 	mov	r3, r4
   13ac0:	e59f2110 	ldr	r2, [pc, #272]	; 13bd8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x194>
   13ac4:	e3a01001 	mov	r1, #1
   13ac8:	eb00574c 	bl	29800 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   13acc:	e3500000 	cmp	r0, #0
   13ad0:	e5850024 	str	r0, [r5, #36]	; 0x24
   13ad4:	0a00002b 	beq	13b88 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x144>
   13ad8:	e28dd00c 	add	sp, sp, #12
   13adc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13ae0:	e1a00004 	mov	r0, r4
   13ae4:	eb000288 	bl	1450c <CUSBRequest::GetResultLength() const>
   13ae8:	e2109003 	ands	r9, r0, #3
   13aec:	1affffe0 	bne	13a74 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   13af0:	e5956020 	ldr	r6, [r5, #32]
   13af4:	e3560000 	cmp	r6, #0
   13af8:	0a000032 	beq	13bc8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x184>
   13afc:	e1a00004 	mov	r0, r4
   13b00:	eb000281 	bl	1450c <CUSBRequest::GetResultLength() const>
   13b04:	e5954020 	ldr	r4, [r5, #32]
   13b08:	e0866000 	add	r6, r6, r0
   13b0c:	e1560004 	cmp	r6, r4
   13b10:	9affffd7 	bls	13a74 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x30>
   13b14:	e3a07001 	mov	r7, #1
   13b18:	e59f80bc 	ldr	r8, [pc, #188]	; 13bdc <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x198>
   13b1c:	e2844001 	add	r4, r4, #1
   13b20:	e5540001 	ldrb	r0, [r4, #-1]
   13b24:	e3500000 	cmp	r0, #0
   13b28:	0a00000a 	beq	13b58 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x114>
   13b2c:	e5959014 	ldr	r9, [r5, #20]
   13b30:	e3590000 	cmp	r9, #0
   13b34:	01a09007 	moveq	r9, r7
   13b38:	0a000006 	beq	13b58 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x114>
   13b3c:	e200300f 	and	r3, r0, #15
   13b40:	e0883103 	add	r3, r8, r3, lsl #2
   13b44:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   13b48:	e1a00220 	lsr	r0, r0, #4
   13b4c:	e1a01004 	mov	r1, r4
   13b50:	e12fff39 	blx	r9
   13b54:	e1a09007 	mov	r9, r7
   13b58:	e2843003 	add	r3, r4, #3
   13b5c:	e1560003 	cmp	r6, r3
   13b60:	e2844004 	add	r4, r4, #4
   13b64:	8affffed 	bhi	13b20 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0xdc>
   13b68:	e5954018 	ldr	r4, [r5, #24]
   13b6c:	e3540000 	cmp	r4, #0
   13b70:	1affffc3 	bne	13a84 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x40>
   13b74:	eaffffc7 	b	13a98 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x54>
   13b78:	e1a00005 	mov	r0, r5
   13b7c:	e28dd00c 	add	sp, sp, #12
   13b80:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   13b84:	eaffff5a 	b	138f4 <CUSBMIDIDevice::StartRequest()>
   13b88:	e3a020d9 	mov	r2, #217	; 0xd9
   13b8c:	e59f104c 	ldr	r1, [pc, #76]	; 13be0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13b90:	e59f004c 	ldr	r0, [pc, #76]	; 13be4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a0>
   13b94:	eb004319 	bl	24800 <assertion_failed>
   13b98:	e3a020b0 	mov	r2, #176	; 0xb0
   13b9c:	e59f103c 	ldr	r1, [pc, #60]	; 13be0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13ba0:	e59f0040 	ldr	r0, [pc, #64]	; 13be8 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a4>
   13ba4:	eb004315 	bl	24800 <assertion_failed>
   13ba8:	e3a020b1 	mov	r2, #177	; 0xb1
   13bac:	e59f102c 	ldr	r1, [pc, #44]	; 13be0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13bb0:	e59f0034 	ldr	r0, [pc, #52]	; 13bec <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1a8>
   13bb4:	eb004311 	bl	24800 <assertion_failed>
   13bb8:	e3a020d7 	mov	r2, #215	; 0xd7
   13bbc:	e59f101c 	ldr	r1, [pc, #28]	; 13be0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13bc0:	e59f0028 	ldr	r0, [pc, #40]	; 13bf0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1ac>
   13bc4:	eb00430d 	bl	24800 <assertion_failed>
   13bc8:	e3a020b8 	mov	r2, #184	; 0xb8
   13bcc:	e59f100c 	ldr	r1, [pc, #12]	; 13be0 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x19c>
   13bd0:	e59f001c 	ldr	r0, [pc, #28]	; 13bf4 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)+0x1b0>
   13bd4:	eb004309 	bl	24800 <assertion_failed>
   13bd8:	000139ec 	.word	0x000139ec
   13bdc:	00040db0 	.word	0x00040db0
   13be0:	00040e24 	.word	0x00040e24
   13be4:	00040ec4 	.word	0x00040ec4
   13be8:	0003f254 	.word	0x0003f254
   13bec:	00040a94 	.word	0x00040a94
   13bf0:	00040eb4 	.word	0x00040eb4
   13bf4:	00040e74 	.word	0x00040e74

00013bf8 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   13bf8:	e3520000 	cmp	r2, #0
   13bfc:	0a000002 	beq	13c0c <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   13c00:	e1a01000 	mov	r1, r0
   13c04:	e1a00002 	mov	r0, r2
   13c08:	eaffff8d 	b	13a44 <CUSBMIDIDevice::CompletionRoutine(CUSBRequest*)>
   13c0c:	e92d4010 	push	{r4, lr}
   13c10:	e3a020e0 	mov	r2, #224	; 0xe0
   13c14:	e59f1004 	ldr	r1, [pc, #4]	; 13c20 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   13c18:	e59f0004 	ldr	r0, [pc, #4]	; 13c24 <CUSBMIDIDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   13c1c:	eb0042f7 	bl	24800 <assertion_failed>
   13c20:	00040e24 	.word	0x00040e24
   13c24:	0003f168 	.word	0x0003f168

00013c28 <CUSBMIDIDevice::TimerHandler(unsigned int)>:
   13c28:	e5902024 	ldr	r2, [r0, #36]	; 0x24
   13c2c:	e1520001 	cmp	r2, r1
   13c30:	1a000002 	bne	13c40 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x18>
   13c34:	e3a02000 	mov	r2, #0
   13c38:	e5802024 	str	r2, [r0, #36]	; 0x24
   13c3c:	eaffff2c 	b	138f4 <CUSBMIDIDevice::StartRequest()>
   13c40:	e92d4010 	push	{r4, lr}
   13c44:	e3a020e7 	mov	r2, #231	; 0xe7
   13c48:	e59f1004 	ldr	r1, [pc, #4]	; 13c54 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x2c>
   13c4c:	e59f0004 	ldr	r0, [pc, #4]	; 13c58 <CUSBMIDIDevice::TimerHandler(unsigned int)+0x30>
   13c50:	eb0042ea 	bl	24800 <assertion_failed>
   13c54:	00040e24 	.word	0x00040e24
   13c58:	00040ea0 	.word	0x00040ea0

00013c5c <CUSBMIDIDevice::Configure()>:
   13c5c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c60:	e24dd014 	sub	sp, sp, #20
   13c64:	e1a05000 	mov	r5, r0
   13c68:	ebffef00 	bl	f870 <CUSBFunction::GetNumEndpoints() const>
   13c6c:	e2506000 	subs	r6, r0, #0
   13c70:	e1a00005 	mov	r0, r5
   13c74:	0a000065 	beq	13e10 <CUSBMIDIDevice::Configure()+0x1b4>
   13c78:	ebffef08 	bl	f8a0 <CUSBFunction::GetDevice() const>
   13c7c:	ebffe99e 	bl	e2fc <CUSBDevice::GetDeviceDescriptor() const>
   13c80:	e3500000 	cmp	r0, #0
   13c84:	0a000072 	beq	13e54 <CUSBMIDIDevice::Configure()+0x1f8>
   13c88:	e5d03008 	ldrb	r3, [r0, #8]
   13c8c:	e5d01009 	ldrb	r1, [r0, #9]
   13c90:	e59f21e0 	ldr	r2, [pc, #480]	; 13e78 <CUSBMIDIDevice::Configure()+0x21c>
   13c94:	e1833401 	orr	r3, r3, r1, lsl #8
   13c98:	e1530002 	cmp	r3, r2
   13c9c:	05d0700a 	ldrbeq	r7, [r0, #10]
   13ca0:	05d0200b 	ldrbeq	r2, [r0, #11]
   13ca4:	059f31d0 	ldreq	r3, [pc, #464]	; 13e7c <CUSBMIDIDevice::Configure()+0x220>
   13ca8:	01877402 	orreq	r7, r7, r2, lsl #8
   13cac:	00477003 	subeq	r7, r7, r3
   13cb0:	016f7f17 	clzeq	r7, r7
   13cb4:	13a07000 	movne	r7, #0
   13cb8:	e3a06005 	mov	r6, #5
   13cbc:	e3a08014 	mov	r8, #20
   13cc0:	e3a09025 	mov	r9, #37	; 0x25
   13cc4:	01a072a7 	lsreq	r7, r7, #5
   13cc8:	e1a01006 	mov	r1, r6
   13ccc:	e1a00005 	mov	r0, r5
   13cd0:	ebffef13 	bl	f924 <CUSBFunction::GetDescriptor(unsigned char)>
   13cd4:	e2504000 	subs	r4, r0, #0
   13cd8:	0a00002b 	beq	13d8c <CUSBMIDIDevice::Configure()+0x130>
   13cdc:	e1d430d2 	ldrsb	r3, [r4, #2]
   13ce0:	e3530000 	cmp	r3, #0
   13ce4:	aafffff7 	bge	13cc8 <CUSBMIDIDevice::Configure()+0x6c>
   13ce8:	e5d43003 	ldrb	r3, [r4, #3]
   13cec:	e203303f 	and	r3, r3, #63	; 0x3f
   13cf0:	e3530002 	cmp	r3, #2
   13cf4:	1afffff3 	bne	13cc8 <CUSBMIDIDevice::Configure()+0x6c>
   13cf8:	e3570000 	cmp	r7, #0
   13cfc:	0a000018 	beq	13d64 <CUSBMIDIDevice::Configure()+0x108>
   13d00:	e5953010 	ldr	r3, [r5, #16]
   13d04:	e3530000 	cmp	r3, #0
   13d08:	1a000055 	bne	13e64 <CUSBMIDIDevice::Configure()+0x208>
   13d0c:	e1a00005 	mov	r0, r5
   13d10:	ebffeee2 	bl	f8a0 <CUSBFunction::GetDevice() const>
   13d14:	e1a0b000 	mov	fp, r0
   13d18:	e1a00008 	mov	r0, r8
   13d1c:	eb005cd4 	bl	2b074 <operator new(unsigned int)>
   13d20:	e1a0a000 	mov	sl, r0
   13d24:	e1a02004 	mov	r2, r4
   13d28:	e1a0100b 	mov	r1, fp
   13d2c:	ebffed18 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   13d30:	e585a010 	str	sl, [r5, #16]
   13d34:	e5d40004 	ldrb	r0, [r4, #4]
   13d38:	e5d42005 	ldrb	r2, [r4, #5]
   13d3c:	e5953020 	ldr	r3, [r5, #32]
   13d40:	e1800402 	orr	r0, r0, r2, lsl #8
   13d44:	e3c00003 	bic	r0, r0, #3
   13d48:	e6ff0070 	uxth	r0, r0
   13d4c:	e3530000 	cmp	r3, #0
   13d50:	e1c501bc 	strh	r0, [r5, #28]
   13d54:	1a00003a 	bne	13e44 <CUSBMIDIDevice::Configure()+0x1e8>
   13d58:	eb005cc6 	bl	2b078 <operator new[](unsigned int)>
   13d5c:	e5850020 	str	r0, [r5, #32]
   13d60:	eaffffd8 	b	13cc8 <CUSBMIDIDevice::Configure()+0x6c>
   13d64:	e1a01009 	mov	r1, r9
   13d68:	e1a00005 	mov	r0, r5
   13d6c:	ebffeeec 	bl	f924 <CUSBFunction::GetDescriptor(unsigned char)>
   13d70:	e3500000 	cmp	r0, #0
   13d74:	0affffd3 	beq	13cc8 <CUSBMIDIDevice::Configure()+0x6c>
   13d78:	e5d43000 	ldrb	r3, [r4]
   13d7c:	e0843003 	add	r3, r4, r3
   13d80:	e1500003 	cmp	r0, r3
   13d84:	1affffcf 	bne	13cc8 <CUSBMIDIDevice::Configure()+0x6c>
   13d88:	eaffffdc 	b	13d00 <CUSBMIDIDevice::Configure()+0xa4>
   13d8c:	e5956010 	ldr	r6, [r5, #16]
   13d90:	e1a00005 	mov	r0, r5
   13d94:	e3560000 	cmp	r6, #0
   13d98:	0a00001c 	beq	13e10 <CUSBMIDIDevice::Configure()+0x1b4>
   13d9c:	ebffedfb 	bl	f590 <CUSBFunction::Configure()>
   13da0:	e2506000 	subs	r6, r0, #0
   13da4:	0a00001e 	beq	13e24 <CUSBMIDIDevice::Configure()+0x1c8>
   13da8:	e1a0000d 	mov	r0, sp
   13dac:	eb004f6c 	bl	27b64 <CString::CString()>
   13db0:	e59f30c8 	ldr	r3, [pc, #200]	; 13e80 <CUSBMIDIDevice::Configure()+0x224>
   13db4:	e59f10c8 	ldr	r1, [pc, #200]	; 13e84 <CUSBMIDIDevice::Configure()+0x228>
   13db8:	e5932000 	ldr	r2, [r3]
   13dbc:	e1a0000d 	mov	r0, sp
   13dc0:	e282c001 	add	ip, r2, #1
   13dc4:	e583c000 	str	ip, [r3]
   13dc8:	eb0054a8 	bl	29070 <CString::Format(char const*, ...)>
   13dcc:	eb004565 	bl	25368 <CDeviceNameService::Get()>
   13dd0:	e1a06000 	mov	r6, r0
   13dd4:	e1a0000d 	mov	r0, sp
   13dd8:	eb004f77 	bl	27bbc <CString::operator char const*() const>
   13ddc:	e1a03004 	mov	r3, r4
   13de0:	e1a01000 	mov	r1, r0
   13de4:	e1a02005 	mov	r2, r5
   13de8:	e1a00006 	mov	r0, r6
   13dec:	eb0044a3 	bl	25080 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   13df0:	e1a00005 	mov	r0, r5
   13df4:	ebfffebe 	bl	138f4 <CUSBMIDIDevice::StartRequest()>
   13df8:	e1a06000 	mov	r6, r0
   13dfc:	e1a0000d 	mov	r0, sp
   13e00:	eb004f24 	bl	27a98 <CString::~CString()>
   13e04:	e1a00006 	mov	r0, r6
   13e08:	e28dd014 	add	sp, sp, #20
   13e0c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e10:	e59f1070 	ldr	r1, [pc, #112]	; 13e88 <CUSBMIDIDevice::Configure()+0x22c>
   13e14:	ebffeecd 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   13e18:	e1a00006 	mov	r0, r6
   13e1c:	e28dd014 	add	sp, sp, #20
   13e20:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e24:	eb004b68 	bl	26bcc <CLogger::Get()>
   13e28:	e59f305c 	ldr	r3, [pc, #92]	; 13e8c <CUSBMIDIDevice::Configure()+0x230>
   13e2c:	e3a02001 	mov	r2, #1
   13e30:	e59f1050 	ldr	r1, [pc, #80]	; 13e88 <CUSBMIDIDevice::Configure()+0x22c>
   13e34:	eb004aa1 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13e38:	e1a00006 	mov	r0, r6
   13e3c:	e28dd014 	add	sp, sp, #20
   13e40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e44:	e3a0207d 	mov	r2, #125	; 0x7d
   13e48:	e59f1040 	ldr	r1, [pc, #64]	; 13e90 <CUSBMIDIDevice::Configure()+0x234>
   13e4c:	e59f0040 	ldr	r0, [pc, #64]	; 13e94 <CUSBMIDIDevice::Configure()+0x238>
   13e50:	eb00426a 	bl	24800 <assertion_failed>
   13e54:	e3a02051 	mov	r2, #81	; 0x51
   13e58:	e59f1030 	ldr	r1, [pc, #48]	; 13e90 <CUSBMIDIDevice::Configure()+0x234>
   13e5c:	e59f0034 	ldr	r0, [pc, #52]	; 13e98 <CUSBMIDIDevice::Configure()+0x23c>
   13e60:	eb004266 	bl	24800 <assertion_failed>
   13e64:	e1a00005 	mov	r0, r5
   13e68:	e59f1018 	ldr	r1, [pc, #24]	; 13e88 <CUSBMIDIDevice::Configure()+0x22c>
   13e6c:	ebffeeb7 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   13e70:	e3a06000 	mov	r6, #0
   13e74:	eaffffe2 	b	13e04 <CUSBMIDIDevice::Configure()+0x1a8>
   13e78:	00000582 	.word	0x00000582
   13e7c:	0000012a 	.word	0x0000012a
   13e80:	00047e88 	.word	0x00047e88
   13e84:	00040f00 	.word	0x00040f00
   13e88:	00040e1c 	.word	0x00040e1c
   13e8c:	0004030c 	.word	0x0004030c
   13e90:	00040e24 	.word	0x00040e24
   13e94:	00040ee8 	.word	0x00040ee8
   13e98:	00040ed4 	.word	0x00040ed4

00013e9c <CUSBMouseDevice::~CUSBMouseDevice()>:
   13e9c:	e92d4010 	push	{r4, lr}
   13ea0:	e1a04000 	mov	r4, r0
   13ea4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   13ea8:	e59f3044 	ldr	r3, [pc, #68]	; 13ef4 <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   13eac:	e3500000 	cmp	r0, #0
   13eb0:	e5843000 	str	r3, [r4]
   13eb4:	0a000002 	beq	13ec4 <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   13eb8:	e5903000 	ldr	r3, [r0]
   13ebc:	e5933004 	ldr	r3, [r3, #4]
   13ec0:	e12fff33 	blx	r3
   13ec4:	e3a03000 	mov	r3, #0
   13ec8:	e5940028 	ldr	r0, [r4, #40]	; 0x28
   13ecc:	e5843024 	str	r3, [r4, #36]	; 0x24
   13ed0:	e1500003 	cmp	r0, r3
   13ed4:	0a000000 	beq	13edc <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   13ed8:	eb005c6d 	bl	2b094 <operator delete[](void*)>
   13edc:	e3a03000 	mov	r3, #0
   13ee0:	e1a00004 	mov	r0, r4
   13ee4:	e5843028 	str	r3, [r4, #40]	; 0x28
   13ee8:	ebfff87d 	bl	120e4 <CUSBHIDDevice::~CUSBHIDDevice()>
   13eec:	e1a00004 	mov	r0, r4
   13ef0:	e8bd8010 	pop	{r4, pc}
   13ef4:	00040f10 	.word	0x00040f10

00013ef8 <CUSBMouseDevice::~CUSBMouseDevice()>:
   13ef8:	e92d4010 	push	{r4, lr}
   13efc:	e1a04000 	mov	r4, r0
   13f00:	ebffffe5 	bl	13e9c <CUSBMouseDevice::~CUSBMouseDevice()>
   13f04:	e1a00004 	mov	r0, r4
   13f08:	e3a01030 	mov	r1, #48	; 0x30
   13f0c:	eb005c66 	bl	2b0ac <operator delete(void*, unsigned int)>
   13f10:	e1a00004 	mov	r0, r4
   13f14:	e8bd8010 	pop	{r4, pc}

00013f18 <CUSBMouseDevice::Configure()>:
   13f18:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   13f1c:	e3a01021 	mov	r1, #33	; 0x21
   13f20:	e24dd014 	sub	sp, sp, #20
   13f24:	e1a04000 	mov	r4, r0
   13f28:	ebffee7d 	bl	f924 <CUSBFunction::GetDescriptor(unsigned char)>
   13f2c:	e2505000 	subs	r5, r0, #0
   13f30:	0a000003 	beq	13f44 <CUSBMouseDevice::Configure()+0x2c>
   13f34:	e5d50007 	ldrb	r0, [r5, #7]
   13f38:	e5d53008 	ldrb	r3, [r5, #8]
   13f3c:	e1900403 	orrs	r0, r0, r3, lsl #8
   13f40:	1a000006 	bne	13f60 <CUSBMouseDevice::Configure()+0x48>
   13f44:	e1a00004 	mov	r0, r4
   13f48:	e59f10f0 	ldr	r1, [pc, #240]	; 14040 <CUSBMouseDevice::Configure()+0x128>
   13f4c:	ebffee7f 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   13f50:	e3a05000 	mov	r5, #0
   13f54:	e1a00005 	mov	r0, r5
   13f58:	e28dd014 	add	sp, sp, #20
   13f5c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13f60:	e1c402bc 	strh	r0, [r4, #44]	; 0x2c
   13f64:	eb005c43 	bl	2b078 <operator new[](unsigned int)>
   13f68:	e5840028 	str	r0, [r4, #40]	; 0x28
   13f6c:	e1a00004 	mov	r0, r4
   13f70:	ebffee60 	bl	f8f8 <CUSBFunction::GetHost() const>
   13f74:	e1a06000 	mov	r6, r0
   13f78:	e1a00004 	mov	r0, r4
   13f7c:	ebffee52 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
   13f80:	e1a07000 	mov	r7, r0
   13f84:	e1a00004 	mov	r0, r4
   13f88:	e5d55006 	ldrb	r5, [r5, #6]
   13f8c:	e5948028 	ldr	r8, [r4, #40]	; 0x28
   13f90:	e1d492bc 	ldrh	r9, [r4, #44]	; 0x2c
   13f94:	ebffeeb5 	bl	fa70 <CUSBFunction::GetInterfaceNumber() const>
   13f98:	e3a03081 	mov	r3, #129	; 0x81
   13f9c:	e6ff0070 	uxth	r0, r0
   13fa0:	e58d000c 	str	r0, [sp, #12]
   13fa4:	e58d3008 	str	r3, [sp, #8]
   13fa8:	e88d0300 	stm	sp, {r8, r9}
   13fac:	e3a03000 	mov	r3, #0
   13fb0:	e1a02005 	mov	r2, r5
   13fb4:	e1a01007 	mov	r1, r7
   13fb8:	e1a00006 	mov	r0, r6
   13fbc:	ebfffa51 	bl	12908 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   13fc0:	e1d432bc 	ldrh	r3, [r4, #44]	; 0x2c
   13fc4:	e1500003 	cmp	r0, r3
   13fc8:	0a000008 	beq	13ff0 <CUSBMouseDevice::Configure()+0xd8>
   13fcc:	e3a05000 	mov	r5, #0
   13fd0:	eb004afd 	bl	26bcc <CLogger::Get()>
   13fd4:	e59f3068 	ldr	r3, [pc, #104]	; 14044 <CUSBMouseDevice::Configure()+0x12c>
   13fd8:	e3a02001 	mov	r2, #1
   13fdc:	e59f105c 	ldr	r1, [pc, #92]	; 14040 <CUSBMouseDevice::Configure()+0x128>
   13fe0:	eb004a36 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13fe4:	e1a00005 	mov	r0, r5
   13fe8:	e28dd014 	add	sp, sp, #20
   13fec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   13ff0:	e3a01000 	mov	r1, #0
   13ff4:	e1a00004 	mov	r0, r4
   13ff8:	ebfff864 	bl	12190 <CUSBHIDDevice::Configure(unsigned int)>
   13ffc:	e2505000 	subs	r5, r0, #0
   14000:	0a000008 	beq	14028 <CUSBMouseDevice::Configure()+0x110>
   14004:	e3a00028 	mov	r0, #40	; 0x28
   14008:	eb005c19 	bl	2b074 <operator new(unsigned int)>
   1400c:	e1a05000 	mov	r5, r0
   14010:	eb00128e 	bl	18a50 <CMouseDevice::CMouseDevice()>
   14014:	e1a00004 	mov	r0, r4
   14018:	e5845024 	str	r5, [r4, #36]	; 0x24
   1401c:	e28dd014 	add	sp, sp, #20
   14020:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   14024:	eafff978 	b	1260c <CUSBHIDDevice::StartRequest()>
   14028:	eb004ae7 	bl	26bcc <CLogger::Get()>
   1402c:	e59f3014 	ldr	r3, [pc, #20]	; 14048 <CUSBMouseDevice::Configure()+0x130>
   14030:	e3a02001 	mov	r2, #1
   14034:	e59f1004 	ldr	r1, [pc, #4]	; 14040 <CUSBMouseDevice::Configure()+0x128>
   14038:	eb004a20 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1403c:	eaffffc4 	b	13f54 <CUSBMouseDevice::Configure()+0x3c>
   14040:	00040f38 	.word	0x00040f38
   14044:	00040618 	.word	0x00040618
   14048:	0003f100 	.word	0x0003f100

0001404c <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   1404c:	e2913000 	adds	r3, r1, #0
   14050:	13a03001 	movne	r3, #1
   14054:	e3520003 	cmp	r2, #3
   14058:	13a03000 	movne	r3, #0
   1405c:	e3530000 	cmp	r3, #0
   14060:	e1a02001 	mov	r2, r1
   14064:	012fff1e 	bxeq	lr
   14068:	e5d13000 	ldrb	r3, [r1]
   1406c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   14070:	e3130002 	tst	r3, #2
   14074:	e2031001 	and	r1, r3, #1
   14078:	13811002 	orrne	r1, r1, #2
   1407c:	e3130004 	tst	r3, #4
   14080:	13811004 	orrne	r1, r1, #4
   14084:	e3500000 	cmp	r0, #0
   14088:	012fff1e 	bxeq	lr
   1408c:	e1d230d2 	ldrsb	r3, [r2, #2]
   14090:	e1d220d1 	ldrsb	r2, [r2, #1]
   14094:	ea0012a7 	b	18b38 <CMouseDevice::ReportHandler(unsigned int, int, int)>

00014098 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   14098:	e92d4010 	push	{r4, lr}
   1409c:	e3a02003 	mov	r2, #3
   140a0:	e1a04000 	mov	r4, r0
   140a4:	ebfff7fa 	bl	12094 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   140a8:	e3a03000 	mov	r3, #0
   140ac:	e59f2010 	ldr	r2, [pc, #16]	; 140c4 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x2c>
   140b0:	e5843024 	str	r3, [r4, #36]	; 0x24
   140b4:	e5842000 	str	r2, [r4]
   140b8:	e5843028 	str	r3, [r4, #40]	; 0x28
   140bc:	e1a00004 	mov	r0, r4
   140c0:	e8bd8010 	pop	{r4, pc}
   140c4:	00040f10 	.word	0x00040f10

000140c8 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   140c8:	e92d4070 	push	{r4, r5, r6, lr}
   140cc:	e5905018 	ldr	r5, [r0, #24]
   140d0:	e59f3060 	ldr	r3, [pc, #96]	; 14138 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x70>
   140d4:	e3550000 	cmp	r5, #0
   140d8:	e1a04000 	mov	r4, r0
   140dc:	e5803000 	str	r3, [r0]
   140e0:	0a000004 	beq	140f8 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x30>
   140e4:	e1a00005 	mov	r0, r5
   140e8:	ebffec93 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   140ec:	e1a00005 	mov	r0, r5
   140f0:	e3a01014 	mov	r1, #20
   140f4:	eb005bec 	bl	2b0ac <operator delete(void*, unsigned int)>
   140f8:	e3a03000 	mov	r3, #0
   140fc:	e5945014 	ldr	r5, [r4, #20]
   14100:	e5843018 	str	r3, [r4, #24]
   14104:	e1550003 	cmp	r5, r3
   14108:	0a000004 	beq	14120 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x58>
   1410c:	e1a00005 	mov	r0, r5
   14110:	ebffec89 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   14114:	e1a00005 	mov	r0, r5
   14118:	e3a01014 	mov	r1, #20
   1411c:	eb005be2 	bl	2b0ac <operator delete(void*, unsigned int)>
   14120:	e3a03000 	mov	r3, #0
   14124:	e1a00004 	mov	r0, r4
   14128:	e5843014 	str	r3, [r4, #20]
   1412c:	ebffecee 	bl	f4ec <CUSBFunction::~CUSBFunction()>
   14130:	e1a00004 	mov	r0, r4
   14134:	e8bd8070 	pop	{r4, r5, r6, pc}
   14138:	00040f48 	.word	0x00040f48

0001413c <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   1413c:	e92d4010 	push	{r4, lr}
   14140:	e1a04000 	mov	r4, r0
   14144:	ebffffdf 	bl	140c8 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   14148:	e1a00004 	mov	r0, r4
   1414c:	e3a0101c 	mov	r1, #28
   14150:	eb005bd5 	bl	2b0ac <operator delete(void*, unsigned int)>
   14154:	e1a00004 	mov	r0, r4
   14158:	e8bd8010 	pop	{r4, pc}

0001415c <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   1415c:	e92d4070 	push	{r4, r5, r6, lr}
   14160:	e2515000 	subs	r5, r1, #0
   14164:	e24dd008 	sub	sp, sp, #8
   14168:	0a000011 	beq	141b4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x58>
   1416c:	e3520000 	cmp	r2, #0
   14170:	e1a04002 	mov	r4, r2
   14174:	0a000012 	beq	141c4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x68>
   14178:	e1a06000 	mov	r6, r0
   1417c:	ebffeddd 	bl	f8f8 <CUSBFunction::GetHost() const>
   14180:	e3500000 	cmp	r0, #0
   14184:	0a000012 	beq	141d4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x78>
   14188:	e3a03000 	mov	r3, #0
   1418c:	e5961018 	ldr	r1, [r6, #24]
   14190:	e1a02005 	mov	r2, r5
   14194:	e58d3000 	str	r3, [sp]
   14198:	e1a03004 	mov	r3, r4
   1419c:	ebfffa0d 	bl	129d8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   141a0:	e3500000 	cmp	r0, #0
   141a4:	a1a00004 	movge	r0, r4
   141a8:	b3e00000 	mvnlt	r0, #0
   141ac:	e28dd008 	add	sp, sp, #8
   141b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   141b4:	e3a0207e 	mov	r2, #126	; 0x7e
   141b8:	e59f1024 	ldr	r1, [pc, #36]	; 141e4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   141bc:	e59f0024 	ldr	r0, [pc, #36]	; 141e8 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x8c>
   141c0:	eb00418e 	bl	24800 <assertion_failed>
   141c4:	e3a0207f 	mov	r2, #127	; 0x7f
   141c8:	e59f1014 	ldr	r1, [pc, #20]	; 141e4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   141cc:	e59f0018 	ldr	r0, [pc, #24]	; 141ec <CUSBPrinterDevice::Write(void const*, unsigned int)+0x90>
   141d0:	eb00418a 	bl	24800 <assertion_failed>
   141d4:	e3a02082 	mov	r2, #130	; 0x82
   141d8:	e59f1004 	ldr	r1, [pc, #4]	; 141e4 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   141dc:	e59f000c 	ldr	r0, [pc, #12]	; 141f0 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x94>
   141e0:	eb004186 	bl	24800 <assertion_failed>
   141e4:	00040f74 	.word	0x00040f74
   141e8:	00040b94 	.word	0x00040b94
   141ec:	00040f84 	.word	0x00040f84
   141f0:	00040ba4 	.word	0x00040ba4

000141f4 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   141f4:	e92d4010 	push	{r4, lr}
   141f8:	e1a04000 	mov	r4, r0
   141fc:	ebffed4b 	bl	f730 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   14200:	e3a03000 	mov	r3, #0
   14204:	e59f2014 	ldr	r2, [pc, #20]	; 14220 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x2c>
   14208:	e5c43010 	strb	r3, [r4, #16]
   1420c:	e5842000 	str	r2, [r4]
   14210:	e5843014 	str	r3, [r4, #20]
   14214:	e5843018 	str	r3, [r4, #24]
   14218:	e1a00004 	mov	r0, r4
   1421c:	e8bd8010 	pop	{r4, pc}
   14220:	00040f48 	.word	0x00040f48

00014224 <CUSBPrinterDevice::Configure()>:
   14224:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   14228:	e24dd01c 	sub	sp, sp, #28
   1422c:	e1a05000 	mov	r5, r0
   14230:	ebffee32 	bl	fb00 <CUSBFunction::GetInterfaceProtocol() const>
   14234:	e2403001 	sub	r3, r0, #1
   14238:	e3530001 	cmp	r3, #1
   1423c:	e5c50010 	strb	r0, [r5, #16]
   14240:	9a00000a 	bls	14270 <CUSBPrinterDevice::Configure()+0x4c>
   14244:	eb004a60 	bl	26bcc <CLogger::Get()>
   14248:	e5d52010 	ldrb	r2, [r5, #16]
   1424c:	e59f31d8 	ldr	r3, [pc, #472]	; 1442c <CUSBPrinterDevice::Configure()+0x208>
   14250:	e58d2000 	str	r2, [sp]
   14254:	e59f11d4 	ldr	r1, [pc, #468]	; 14430 <CUSBPrinterDevice::Configure()+0x20c>
   14258:	e3a02001 	mov	r2, #1
   1425c:	eb004997 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14260:	e3a04000 	mov	r4, #0
   14264:	e1a00004 	mov	r0, r4
   14268:	e28dd01c 	add	sp, sp, #28
   1426c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14270:	e1a00005 	mov	r0, r5
   14274:	ebffed7d 	bl	f870 <CUSBFunction::GetNumEndpoints() const>
   14278:	e5d53010 	ldrb	r3, [r5, #16]
   1427c:	e3530001 	cmp	r3, #1
   14280:	03a03001 	moveq	r3, #1
   14284:	13a03002 	movne	r3, #2
   14288:	e1530000 	cmp	r3, r0
   1428c:	d3a06005 	movle	r6, #5
   14290:	d3a07014 	movle	r7, #20
   14294:	da000004 	ble	142ac <CUSBPrinterDevice::Configure()+0x88>
   14298:	ea000053 	b	143ec <CUSBPrinterDevice::Configure()+0x1c8>
   1429c:	e5d43003 	ldrb	r3, [r4, #3]
   142a0:	e203303f 	and	r3, r3, #63	; 0x3f
   142a4:	e3530002 	cmp	r3, #2
   142a8:	0a000028 	beq	14350 <CUSBPrinterDevice::Configure()+0x12c>
   142ac:	e1a01006 	mov	r1, r6
   142b0:	e1a00005 	mov	r0, r5
   142b4:	ebffed9a 	bl	f924 <CUSBFunction::GetDescriptor(unsigned char)>
   142b8:	e2504000 	subs	r4, r0, #0
   142bc:	1afffff6 	bne	1429c <CUSBPrinterDevice::Configure()+0x78>
   142c0:	e5954018 	ldr	r4, [r5, #24]
   142c4:	e3540000 	cmp	r4, #0
   142c8:	0a00004c 	beq	14400 <CUSBPrinterDevice::Configure()+0x1dc>
   142cc:	e5d53010 	ldrb	r3, [r5, #16]
   142d0:	e1a00005 	mov	r0, r5
   142d4:	e3530001 	cmp	r3, #1
   142d8:	0a000002 	beq	142e8 <CUSBPrinterDevice::Configure()+0xc4>
   142dc:	e5954014 	ldr	r4, [r5, #20]
   142e0:	e3540000 	cmp	r4, #0
   142e4:	0a000049 	beq	14410 <CUSBPrinterDevice::Configure()+0x1ec>
   142e8:	ebffeca8 	bl	f590 <CUSBFunction::Configure()>
   142ec:	e2504000 	subs	r4, r0, #0
   142f0:	0a000027 	beq	14394 <CUSBPrinterDevice::Configure()+0x170>
   142f4:	e28d0008 	add	r0, sp, #8
   142f8:	eb004e19 	bl	27b64 <CString::CString()>
   142fc:	e59f3130 	ldr	r3, [pc, #304]	; 14434 <CUSBPrinterDevice::Configure()+0x210>
   14300:	e59f1130 	ldr	r1, [pc, #304]	; 14438 <CUSBPrinterDevice::Configure()+0x214>
   14304:	e5932000 	ldr	r2, [r3]
   14308:	e28d0008 	add	r0, sp, #8
   1430c:	e282c001 	add	ip, r2, #1
   14310:	e583c000 	str	ip, [r3]
   14314:	eb005355 	bl	29070 <CString::Format(char const*, ...)>
   14318:	eb004412 	bl	25368 <CDeviceNameService::Get()>
   1431c:	e1a06000 	mov	r6, r0
   14320:	e28d0008 	add	r0, sp, #8
   14324:	eb004e24 	bl	27bbc <CString::operator char const*() const>
   14328:	e1a02005 	mov	r2, r5
   1432c:	e1a01000 	mov	r1, r0
   14330:	e3a03000 	mov	r3, #0
   14334:	e1a00006 	mov	r0, r6
   14338:	eb004350 	bl	25080 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1433c:	e28d0008 	add	r0, sp, #8
   14340:	eb004dd4 	bl	27a98 <CString::~CString()>
   14344:	e1a00004 	mov	r0, r4
   14348:	e28dd01c 	add	sp, sp, #28
   1434c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14350:	e1d430d2 	ldrsb	r3, [r4, #2]
   14354:	e3530000 	cmp	r3, #0
   14358:	ba000015 	blt	143b4 <CUSBPrinterDevice::Configure()+0x190>
   1435c:	e5953018 	ldr	r3, [r5, #24]
   14360:	e1a00005 	mov	r0, r5
   14364:	e3530000 	cmp	r3, #0
   14368:	1a00002b 	bne	1441c <CUSBPrinterDevice::Configure()+0x1f8>
   1436c:	ebffed4b 	bl	f8a0 <CUSBFunction::GetDevice() const>
   14370:	e1a09000 	mov	r9, r0
   14374:	e1a00007 	mov	r0, r7
   14378:	eb005b3d 	bl	2b074 <operator new(unsigned int)>
   1437c:	e1a08000 	mov	r8, r0
   14380:	e1a02004 	mov	r2, r4
   14384:	e1a01009 	mov	r1, r9
   14388:	ebffeb81 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1438c:	e5858018 	str	r8, [r5, #24]
   14390:	eaffffc5 	b	142ac <CUSBPrinterDevice::Configure()+0x88>
   14394:	eb004a0c 	bl	26bcc <CLogger::Get()>
   14398:	e59f309c 	ldr	r3, [pc, #156]	; 1443c <CUSBPrinterDevice::Configure()+0x218>
   1439c:	e3a02001 	mov	r2, #1
   143a0:	e59f1088 	ldr	r1, [pc, #136]	; 14430 <CUSBPrinterDevice::Configure()+0x20c>
   143a4:	eb004945 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   143a8:	e1a00004 	mov	r0, r4
   143ac:	e28dd01c 	add	sp, sp, #28
   143b0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   143b4:	e5953014 	ldr	r3, [r5, #20]
   143b8:	e1a00005 	mov	r0, r5
   143bc:	e3530000 	cmp	r3, #0
   143c0:	1a000015 	bne	1441c <CUSBPrinterDevice::Configure()+0x1f8>
   143c4:	ebffed35 	bl	f8a0 <CUSBFunction::GetDevice() const>
   143c8:	e1a09000 	mov	r9, r0
   143cc:	e1a00007 	mov	r0, r7
   143d0:	eb005b27 	bl	2b074 <operator new(unsigned int)>
   143d4:	e1a08000 	mov	r8, r0
   143d8:	e1a02004 	mov	r2, r4
   143dc:	e1a01009 	mov	r1, r9
   143e0:	ebffeb6b 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   143e4:	e5858014 	str	r8, [r5, #20]
   143e8:	eaffffaf 	b	142ac <CUSBPrinterDevice::Configure()+0x88>
   143ec:	e1a00005 	mov	r0, r5
   143f0:	e59f1038 	ldr	r1, [pc, #56]	; 14430 <CUSBPrinterDevice::Configure()+0x20c>
   143f4:	ebffed55 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   143f8:	e3a04000 	mov	r4, #0
   143fc:	eaffff98 	b	14264 <CUSBPrinterDevice::Configure()+0x40>
   14400:	e1a00005 	mov	r0, r5
   14404:	e59f1024 	ldr	r1, [pc, #36]	; 14430 <CUSBPrinterDevice::Configure()+0x20c>
   14408:	ebffed50 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   1440c:	eaffff94 	b	14264 <CUSBPrinterDevice::Configure()+0x40>
   14410:	e59f1018 	ldr	r1, [pc, #24]	; 14430 <CUSBPrinterDevice::Configure()+0x20c>
   14414:	ebffed4d 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   14418:	eaffff91 	b	14264 <CUSBPrinterDevice::Configure()+0x40>
   1441c:	e59f100c 	ldr	r1, [pc, #12]	; 14430 <CUSBPrinterDevice::Configure()+0x20c>
   14420:	ebffed4a 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   14424:	e3a04000 	mov	r4, #0
   14428:	eaffff8d 	b	14264 <CUSBPrinterDevice::Configure()+0x40>
   1442c:	00040f90 	.word	0x00040f90
   14430:	00040f6c 	.word	0x00040f6c
   14434:	00047e8c 	.word	0x00047e8c
   14438:	00040fb0 	.word	0x00040fb0
   1443c:	0004030c 	.word	0x0004030c

00014440 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
   14440:	e92d4010 	push	{r4, lr}
   14444:	e3a0e000 	mov	lr, #0
   14448:	e59d4008 	ldr	r4, [sp, #8]
   1444c:	e151000e 	cmp	r1, lr
   14450:	e5801000 	str	r1, [r0]
   14454:	e5802008 	str	r2, [r0, #8]
   14458:	e580300c 	str	r3, [r0, #12]
   1445c:	e5804004 	str	r4, [r0, #4]
   14460:	e580e010 	str	lr, [r0, #16]
   14464:	e580e014 	str	lr, [r0, #20]
   14468:	e580e018 	str	lr, [r0, #24]
   1446c:	e580e01c 	str	lr, [r0, #28]
   14470:	e580e020 	str	lr, [r0, #32]
   14474:	e5c0e024 	strb	lr, [r0, #36]	; 0x24
   14478:	0a00000a 	beq	144a8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x68>
   1447c:	e2922000 	adds	r2, r2, #0
   14480:	13a02001 	movne	r2, #1
   14484:	e3530000 	cmp	r3, #0
   14488:	11a03002 	movne	r3, r2
   1448c:	03823001 	orreq	r3, r2, #1
   14490:	e3530000 	cmp	r3, #0
   14494:	18bd8010 	popne	{r4, pc}
   14498:	e3a02024 	mov	r2, #36	; 0x24
   1449c:	e59f1014 	ldr	r1, [pc, #20]	; 144b8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
   144a0:	e59f0014 	ldr	r0, [pc, #20]	; 144bc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x7c>
   144a4:	eb0040d5 	bl	24800 <assertion_failed>
   144a8:	e3a02023 	mov	r2, #35	; 0x23
   144ac:	e59f1004 	ldr	r1, [pc, #4]	; 144b8 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
   144b0:	e59f0008 	ldr	r0, [pc, #8]	; 144c0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x80>
   144b4:	eb0040d1 	bl	24800 <assertion_failed>
   144b8:	00040fb8 	.word	0x00040fb8
   144bc:	00040fc8 	.word	0x00040fc8
   144c0:	0003fb18 	.word	0x0003fb18

000144c4 <CUSBRequest::~CUSBRequest()>:
   144c4:	e12fff1e 	bx	lr

000144c8 <CUSBRequest::GetEndpoint() const>:
   144c8:	e5900000 	ldr	r0, [r0]
   144cc:	e3500000 	cmp	r0, #0
   144d0:	0a000000 	beq	144d8 <CUSBRequest::GetEndpoint() const+0x10>
   144d4:	e12fff1e 	bx	lr
   144d8:	e92d4010 	push	{r4, lr}
   144dc:	e3a02031 	mov	r2, #49	; 0x31
   144e0:	e59f1004 	ldr	r1, [pc, #4]	; 144ec <CUSBRequest::GetEndpoint() const+0x24>
   144e4:	e59f0004 	ldr	r0, [pc, #4]	; 144f0 <CUSBRequest::GetEndpoint() const+0x28>
   144e8:	eb0040c4 	bl	24800 <assertion_failed>
   144ec:	00040fb8 	.word	0x00040fb8
   144f0:	0003fb18 	.word	0x0003fb18

000144f4 <CUSBRequest::SetStatus(int)>:
   144f4:	e5801010 	str	r1, [r0, #16]
   144f8:	e12fff1e 	bx	lr

000144fc <CUSBRequest::SetResultLen(unsigned int)>:
   144fc:	e5801014 	str	r1, [r0, #20]
   14500:	e12fff1e 	bx	lr

00014504 <CUSBRequest::GetStatus() const>:
   14504:	e5900010 	ldr	r0, [r0, #16]
   14508:	e12fff1e 	bx	lr

0001450c <CUSBRequest::GetResultLength() const>:
   1450c:	e5903010 	ldr	r3, [r0, #16]
   14510:	e3530000 	cmp	r3, #0
   14514:	0a000001 	beq	14520 <CUSBRequest::GetResultLength() const+0x14>
   14518:	e5900014 	ldr	r0, [r0, #20]
   1451c:	e12fff1e 	bx	lr
   14520:	e92d4010 	push	{r4, lr}
   14524:	e3a02046 	mov	r2, #70	; 0x46
   14528:	e59f1004 	ldr	r1, [pc, #4]	; 14534 <CUSBRequest::GetResultLength() const+0x28>
   1452c:	e59f0004 	ldr	r0, [pc, #4]	; 14538 <CUSBRequest::GetResultLength() const+0x2c>
   14530:	eb0040b2 	bl	24800 <assertion_failed>
   14534:	00040fb8 	.word	0x00040fb8
   14538:	00040fec 	.word	0x00040fec

0001453c <CUSBRequest::GetSetupData()>:
   1453c:	e92d4010 	push	{r4, lr}
   14540:	e1a04000 	mov	r4, r0
   14544:	e5900000 	ldr	r0, [r0]
   14548:	ebffeb89 	bl	f374 <CUSBEndpoint::GetType() const>
   1454c:	e3500000 	cmp	r0, #0
   14550:	1a000006 	bne	14570 <CUSBRequest::GetSetupData()+0x34>
   14554:	e5940004 	ldr	r0, [r4, #4]
   14558:	e3500000 	cmp	r0, #0
   1455c:	18bd8010 	popne	{r4, pc}
   14560:	e3a0204e 	mov	r2, #78	; 0x4e
   14564:	e59f1014 	ldr	r1, [pc, #20]	; 14580 <CUSBRequest::GetSetupData()+0x44>
   14568:	e59f0014 	ldr	r0, [pc, #20]	; 14584 <CUSBRequest::GetSetupData()+0x48>
   1456c:	eb0040a3 	bl	24800 <assertion_failed>
   14570:	e3a0204d 	mov	r2, #77	; 0x4d
   14574:	e59f1004 	ldr	r1, [pc, #4]	; 14580 <CUSBRequest::GetSetupData()+0x44>
   14578:	e59f0008 	ldr	r0, [pc, #8]	; 14588 <CUSBRequest::GetSetupData()+0x4c>
   1457c:	eb00409f 	bl	24800 <assertion_failed>
   14580:	00040fb8 	.word	0x00040fb8
   14584:	00041028 	.word	0x00041028
   14588:	00040ff8 	.word	0x00040ff8

0001458c <CUSBRequest::GetBuffer()>:
   1458c:	e5903008 	ldr	r3, [r0, #8]
   14590:	e3530000 	cmp	r3, #0
   14594:	0a000001 	beq	145a0 <CUSBRequest::GetBuffer()+0x14>
   14598:	e1a00003 	mov	r0, r3
   1459c:	e12fff1e 	bx	lr
   145a0:	e590200c 	ldr	r2, [r0, #12]
   145a4:	e3520000 	cmp	r2, #0
   145a8:	0afffffa 	beq	14598 <CUSBRequest::GetBuffer()+0xc>
   145ac:	e92d4010 	push	{r4, lr}
   145b0:	e3a02056 	mov	r2, #86	; 0x56
   145b4:	e59f1004 	ldr	r1, [pc, #4]	; 145c0 <CUSBRequest::GetBuffer()+0x34>
   145b8:	e59f0004 	ldr	r0, [pc, #4]	; 145c4 <CUSBRequest::GetBuffer()+0x38>
   145bc:	eb00408f 	bl	24800 <assertion_failed>
   145c0:	00040fb8 	.word	0x00040fb8
   145c4:	00040fc8 	.word	0x00040fc8

000145c8 <CUSBRequest::GetBufLen() const>:
   145c8:	e590000c 	ldr	r0, [r0, #12]
   145cc:	e12fff1e 	bx	lr

000145d0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
   145d0:	e3510000 	cmp	r1, #0
   145d4:	e5801018 	str	r1, [r0, #24]
   145d8:	e580201c 	str	r2, [r0, #28]
   145dc:	e5803020 	str	r3, [r0, #32]
   145e0:	0a000000 	beq	145e8 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x18>
   145e4:	e12fff1e 	bx	lr
   145e8:	e92d4010 	push	{r4, lr}
   145ec:	e3a02066 	mov	r2, #102	; 0x66
   145f0:	e59f1004 	ldr	r1, [pc, #4]	; 145fc <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x2c>
   145f4:	e59f0004 	ldr	r0, [pc, #4]	; 14600 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x30>
   145f8:	eb004080 	bl	24800 <assertion_failed>
   145fc:	00040fb8 	.word	0x00040fb8
   14600:	0004103c 	.word	0x0004103c

00014604 <CUSBRequest::CallCompletionRoutine()>:
   14604:	e92d4010 	push	{r4, lr}
   14608:	e590e018 	ldr	lr, [r0, #24]
   1460c:	e35e0000 	cmp	lr, #0
   14610:	0a000004 	beq	14628 <CUSBRequest::CallCompletionRoutine()+0x24>
   14614:	e1a0300e 	mov	r3, lr
   14618:	e8bd4010 	pop	{r4, lr}
   1461c:	e5902020 	ldr	r2, [r0, #32]
   14620:	e590101c 	ldr	r1, [r0, #28]
   14624:	e12fff13 	bx	r3
   14628:	e3a0206b 	mov	r2, #107	; 0x6b
   1462c:	e59f1004 	ldr	r1, [pc, #4]	; 14638 <CUSBRequest::CallCompletionRoutine()+0x34>
   14630:	e59f0004 	ldr	r0, [pc, #4]	; 1463c <CUSBRequest::CallCompletionRoutine()+0x38>
   14634:	eb004071 	bl	24800 <assertion_failed>
   14638:	00040fb8 	.word	0x00040fb8
   1463c:	0004103c 	.word	0x0004103c

00014640 <CUSBRequest::SetCompleteOnNAK()>:
   14640:	e3a03001 	mov	r3, #1
   14644:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   14648:	e12fff1e 	bx	lr

0001464c <CUSBRequest::IsCompleteOnNAK() const>:
   1464c:	e5d00024 	ldrb	r0, [r0, #36]	; 0x24
   14650:	e12fff1e 	bx	lr

00014654 <CUSBRequest::operator new(unsigned int)>:
   14654:	e3500028 	cmp	r0, #40	; 0x28
   14658:	e92d4010 	push	{r4, lr}
   1465c:	1a000005 	bne	14678 <CUSBRequest::operator new(unsigned int)+0x24>
   14660:	e59f3030 	ldr	r3, [pc, #48]	; 14698 <CUSBRequest::operator new(unsigned int)+0x44>
   14664:	e5930000 	ldr	r0, [r3]
   14668:	e3500000 	cmp	r0, #0
   1466c:	0a000005 	beq	14688 <CUSBRequest::operator new(unsigned int)+0x34>
   14670:	e8bd4010 	pop	{r4, lr}
   14674:	ea004167 	b	24c18 <CClassAllocator::Allocate()>
   14678:	e3a0207a 	mov	r2, #122	; 0x7a
   1467c:	e59f1018 	ldr	r1, [pc, #24]	; 1469c <CUSBRequest::operator new(unsigned int)+0x48>
   14680:	e59f0018 	ldr	r0, [pc, #24]	; 146a0 <CUSBRequest::operator new(unsigned int)+0x4c>
   14684:	eb00405d 	bl	24800 <assertion_failed>
   14688:	e3a0207a 	mov	r2, #122	; 0x7a
   1468c:	e59f1008 	ldr	r1, [pc, #8]	; 1469c <CUSBRequest::operator new(unsigned int)+0x48>
   14690:	e59f000c 	ldr	r0, [pc, #12]	; 146a4 <CUSBRequest::operator new(unsigned int)+0x50>
   14694:	eb004059 	bl	24800 <assertion_failed>
   14698:	0004e0dc 	.word	0x0004e0dc
   1469c:	00040fb8 	.word	0x00040fb8
   146a0:	00041058 	.word	0x00041058
   146a4:	0003f784 	.word	0x0003f784

000146a8 <CUSBRequest::operator delete(void*, unsigned int)>:
   146a8:	e3510028 	cmp	r1, #40	; 0x28
   146ac:	e92d4010 	push	{r4, lr}
   146b0:	1a000007 	bne	146d4 <CUSBRequest::operator delete(void*, unsigned int)+0x2c>
   146b4:	e59f3038 	ldr	r3, [pc, #56]	; 146f4 <CUSBRequest::operator delete(void*, unsigned int)+0x4c>
   146b8:	e5933000 	ldr	r3, [r3]
   146bc:	e3530000 	cmp	r3, #0
   146c0:	0a000007 	beq	146e4 <CUSBRequest::operator delete(void*, unsigned int)+0x3c>
   146c4:	e8bd4010 	pop	{r4, lr}
   146c8:	e1a01000 	mov	r1, r0
   146cc:	e1a00003 	mov	r0, r3
   146d0:	ea00418b 	b	24d04 <CClassAllocator::Free(void*)>
   146d4:	e3a0207a 	mov	r2, #122	; 0x7a
   146d8:	e59f1018 	ldr	r1, [pc, #24]	; 146f8 <CUSBRequest::operator delete(void*, unsigned int)+0x50>
   146dc:	e59f0018 	ldr	r0, [pc, #24]	; 146fc <CUSBRequest::operator delete(void*, unsigned int)+0x54>
   146e0:	eb004046 	bl	24800 <assertion_failed>
   146e4:	e3a0207a 	mov	r2, #122	; 0x7a
   146e8:	e59f1008 	ldr	r1, [pc, #8]	; 146f8 <CUSBRequest::operator delete(void*, unsigned int)+0x50>
   146ec:	e59f000c 	ldr	r0, [pc, #12]	; 14700 <CUSBRequest::operator delete(void*, unsigned int)+0x58>
   146f0:	eb004042 	bl	24800 <assertion_failed>
   146f4:	0004e0dc 	.word	0x0004e0dc
   146f8:	00040fb8 	.word	0x00040fb8
   146fc:	00041058 	.word	0x00041058
   14700:	0003f784 	.word	0x0003f784

00014704 <CUSBRequest::InitAllocator(unsigned int)>:
   14704:	e92d4070 	push	{r4, r5, r6, lr}
   14708:	e59f4040 	ldr	r4, [pc, #64]	; 14750 <CUSBRequest::InitAllocator(unsigned int)+0x4c>
   1470c:	e5943000 	ldr	r3, [r4]
   14710:	e3530000 	cmp	r3, #0
   14714:	1a000009 	bne	14740 <CUSBRequest::InitAllocator(unsigned int)+0x3c>
   14718:	e1a05000 	mov	r5, r0
   1471c:	e3a0001c 	mov	r0, #28
   14720:	eb005a53 	bl	2b074 <operator new(unsigned int)>
   14724:	e1a06000 	mov	r6, r0
   14728:	e1a02005 	mov	r2, r5
   1472c:	e59f3020 	ldr	r3, [pc, #32]	; 14754 <CUSBRequest::InitAllocator(unsigned int)+0x50>
   14730:	e3a01028 	mov	r1, #40	; 0x28
   14734:	eb00411e 	bl	24bb4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   14738:	e5846000 	str	r6, [r4]
   1473c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14740:	e3a0207a 	mov	r2, #122	; 0x7a
   14744:	e59f100c 	ldr	r1, [pc, #12]	; 14758 <CUSBRequest::InitAllocator(unsigned int)+0x54>
   14748:	e59f000c 	ldr	r0, [pc, #12]	; 1475c <CUSBRequest::InitAllocator(unsigned int)+0x58>
   1474c:	eb00402b 	bl	24800 <assertion_failed>
   14750:	0004e0dc 	.word	0x0004e0dc
   14754:	00041078 	.word	0x00041078
   14758:	00040fb8 	.word	0x00040fb8
   1475c:	0003f798 	.word	0x0003f798

00014760 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
   14760:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14764:	e59f4054 	ldr	r4, [pc, #84]	; 147c0 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x60>
   14768:	e1a05000 	mov	r5, r0
   1476c:	e5940000 	ldr	r0, [r4]
   14770:	e24dd00c 	sub	sp, sp, #12
   14774:	e3500000 	cmp	r0, #0
   14778:	1a00000c 	bne	147b0 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x50>
   1477c:	e1a06001 	mov	r6, r1
   14780:	e3a0001c 	mov	r0, #28
   14784:	eb005a3a 	bl	2b074 <operator new(unsigned int)>
   14788:	e59f1034 	ldr	r1, [pc, #52]	; 147c4 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x64>
   1478c:	e1a03006 	mov	r3, r6
   14790:	e58d1000 	str	r1, [sp]
   14794:	e1a02005 	mov	r2, r5
   14798:	e3a01028 	mov	r1, #40	; 0x28
   1479c:	e1a07000 	mov	r7, r0
   147a0:	eb00410f 	bl	24be4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   147a4:	e5847000 	str	r7, [r4]
   147a8:	e28dd00c 	add	sp, sp, #12
   147ac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   147b0:	e3a0207a 	mov	r2, #122	; 0x7a
   147b4:	e59f100c 	ldr	r1, [pc, #12]	; 147c8 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x68>
   147b8:	e59f000c 	ldr	r0, [pc, #12]	; 147cc <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x6c>
   147bc:	eb00400f 	bl	24800 <assertion_failed>
   147c0:	0004e0dc 	.word	0x0004e0dc
   147c4:	00041078 	.word	0x00041078
   147c8:	00040fb8 	.word	0x00040fb8
   147cc:	0003f798 	.word	0x0003f798

000147d0 <CUSBStandardHub::~CUSBStandardHub()>:
   147d0:	e5902018 	ldr	r2, [r0, #24]
   147d4:	e59f30b0 	ldr	r3, [pc, #176]	; 1488c <CUSBStandardHub::~CUSBStandardHub()+0xbc>
   147d8:	e3520000 	cmp	r2, #0
   147dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   147e0:	e1a07000 	mov	r7, r0
   147e4:	e5803000 	str	r3, [r0]
   147e8:	0a000013 	beq	1483c <CUSBStandardHub::~CUSBStandardHub()+0x6c>
   147ec:	e3a04000 	mov	r4, #0
   147f0:	e3a09004 	mov	r9, #4
   147f4:	e1a08004 	mov	r8, r4
   147f8:	e2805020 	add	r5, r0, #32
   147fc:	e2806040 	add	r6, r0, #64	; 0x40
   14800:	e5960000 	ldr	r0, [r6]
   14804:	e1a01009 	mov	r1, r9
   14808:	eb005a27 	bl	2b0ac <operator delete(void*, unsigned int)>
   1480c:	e5950000 	ldr	r0, [r5]
   14810:	e2844001 	add	r4, r4, #1
   14814:	e3500000 	cmp	r0, #0
   14818:	e4868004 	str	r8, [r6], #4
   1481c:	0a000002 	beq	1482c <CUSBStandardHub::~CUSBStandardHub()+0x5c>
   14820:	e5903000 	ldr	r3, [r0]
   14824:	e5933004 	ldr	r3, [r3, #4]
   14828:	e12fff33 	blx	r3
   1482c:	e5973018 	ldr	r3, [r7, #24]
   14830:	e4858004 	str	r8, [r5], #4
   14834:	e1530004 	cmp	r3, r4
   14838:	8afffff0 	bhi	14800 <CUSBStandardHub::~CUSBStandardHub()+0x30>
   1483c:	e3a03000 	mov	r3, #0
   14840:	e5974014 	ldr	r4, [r7, #20]
   14844:	e5873018 	str	r3, [r7, #24]
   14848:	e1540003 	cmp	r4, r3
   1484c:	0a000004 	beq	14864 <CUSBStandardHub::~CUSBStandardHub()+0x94>
   14850:	e1a00004 	mov	r0, r4
   14854:	ebffeab8 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   14858:	e1a00004 	mov	r0, r4
   1485c:	e3a01014 	mov	r1, #20
   14860:	eb005a11 	bl	2b0ac <operator delete(void*, unsigned int)>
   14864:	e3a04000 	mov	r4, #0
   14868:	e3a01009 	mov	r1, #9
   1486c:	e5970010 	ldr	r0, [r7, #16]
   14870:	e5874014 	str	r4, [r7, #20]
   14874:	eb005a0c 	bl	2b0ac <operator delete(void*, unsigned int)>
   14878:	e5874010 	str	r4, [r7, #16]
   1487c:	e1a00007 	mov	r0, r7
   14880:	ebffeb19 	bl	f4ec <CUSBFunction::~CUSBFunction()>
   14884:	e1a00007 	mov	r0, r7
   14888:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1488c:	0004108c 	.word	0x0004108c

00014890 <CUSBStandardHub::~CUSBStandardHub()>:
   14890:	e92d4010 	push	{r4, lr}
   14894:	e1a04000 	mov	r4, r0
   14898:	ebffffcc 	bl	147d0 <CUSBStandardHub::~CUSBStandardHub()>
   1489c:	e1a00004 	mov	r0, r4
   148a0:	e3a01068 	mov	r1, #104	; 0x68
   148a4:	eb005a00 	bl	2b0ac <operator delete(void*, unsigned int)>
   148a8:	e1a00004 	mov	r0, r4
   148ac:	e8bd8010 	pop	{r4, pc}

000148b0 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
   148b0:	e92d4010 	push	{r4, lr}
   148b4:	e1a04000 	mov	r4, r0
   148b8:	ebffeb9c 	bl	f730 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   148bc:	e3a03000 	mov	r3, #0
   148c0:	e284c040 	add	ip, r4, #64	; 0x40
   148c4:	e1a0000c 	mov	r0, ip
   148c8:	e59f1038 	ldr	r1, [pc, #56]	; 14908 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x58>
   148cc:	e1a02003 	mov	r2, r3
   148d0:	e5843010 	str	r3, [r4, #16]
   148d4:	e5841000 	str	r1, [r4]
   148d8:	e5843014 	str	r3, [r4, #20]
   148dc:	e5843018 	str	r3, [r4, #24]
   148e0:	e5c4301c 	strb	r3, [r4, #28]
   148e4:	e2841060 	add	r1, r4, #96	; 0x60
   148e8:	e2843020 	add	r3, r4, #32
   148ec:	e4832004 	str	r2, [r3], #4
   148f0:	e153000c 	cmp	r3, ip
   148f4:	e4802004 	str	r2, [r0], #4
   148f8:	e4c12001 	strb	r2, [r1], #1
   148fc:	1afffffa 	bne	148ec <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x3c>
   14900:	e1a00004 	mov	r0, r4
   14904:	e8bd8010 	pop	{r4, pc}
   14908:	0004108c 	.word	0x0004108c

0001490c <CUSBStandardHub::DisablePort(unsigned int)>:
   1490c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   14910:	e5903018 	ldr	r3, [r0, #24]
   14914:	e24dd014 	sub	sp, sp, #20
   14918:	e1530001 	cmp	r3, r1
   1491c:	9a000019 	bls	14988 <CUSBStandardHub::DisablePort(unsigned int)+0x7c>
   14920:	e1a06001 	mov	r6, r1
   14924:	e1a05000 	mov	r5, r0
   14928:	ebffebf2 	bl	f8f8 <CUSBFunction::GetHost() const>
   1492c:	e3a04001 	mov	r4, #1
   14930:	e1a09000 	mov	r9, r0
   14934:	e1a00005 	mov	r0, r5
   14938:	ebffebe3 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
   1493c:	e3a07000 	mov	r7, #0
   14940:	e0868004 	add	r8, r6, r4
   14944:	e6ff3078 	uxth	r3, r8
   14948:	e1a01000 	mov	r1, r0
   1494c:	e58d3004 	str	r3, [sp, #4]
   14950:	e1a00009 	mov	r0, r9
   14954:	e58d700c 	str	r7, [sp, #12]
   14958:	e58d7008 	str	r7, [sp, #8]
   1495c:	e58d4000 	str	r4, [sp]
   14960:	e1a03004 	mov	r3, r4
   14964:	e3a02023 	mov	r2, #35	; 0x23
   14968:	ebfff7b4 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1496c:	e1500007 	cmp	r0, r7
   14970:	a0855006 	addge	r5, r5, r6
   14974:	a1a00004 	movge	r0, r4
   14978:	a5c57060 	strbge	r7, [r5, #96]	; 0x60
   1497c:	ba000005 	blt	14998 <CUSBStandardHub::DisablePort(unsigned int)+0x8c>
   14980:	e28dd014 	add	sp, sp, #20
   14984:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   14988:	e3a020c7 	mov	r2, #199	; 0xc7
   1498c:	e59f1024 	ldr	r1, [pc, #36]	; 149b8 <CUSBStandardHub::DisablePort(unsigned int)+0xac>
   14990:	e59f0024 	ldr	r0, [pc, #36]	; 149bc <CUSBStandardHub::DisablePort(unsigned int)+0xb0>
   14994:	eb003f99 	bl	24800 <assertion_failed>
   14998:	eb00488b 	bl	26bcc <CLogger::Get()>
   1499c:	e58d8000 	str	r8, [sp]
   149a0:	e1a02004 	mov	r2, r4
   149a4:	e59f3014 	ldr	r3, [pc, #20]	; 149c0 <CUSBStandardHub::DisablePort(unsigned int)+0xb4>
   149a8:	e59f1014 	ldr	r1, [pc, #20]	; 149c4 <CUSBStandardHub::DisablePort(unsigned int)+0xb8>
   149ac:	eb0047c3 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   149b0:	e1a00007 	mov	r0, r7
   149b4:	eafffff1 	b	14980 <CUSBStandardHub::DisablePort(unsigned int)+0x74>
   149b8:	000410b8 	.word	0x000410b8
   149bc:	000410cc 	.word	0x000410cc
   149c0:	000410e4 	.word	0x000410e4
   149c4:	000410b0 	.word	0x000410b0

000149c8 <CUSBStandardHub::RemoveDevice(unsigned int)>:
   149c8:	e92d4070 	push	{r4, r5, r6, lr}
   149cc:	e1a04000 	mov	r4, r0
   149d0:	e1a06001 	mov	r6, r1
   149d4:	ebffffcc 	bl	1490c <CUSBStandardHub::DisablePort(unsigned int)>
   149d8:	e2505000 	subs	r5, r0, #0
   149dc:	0a000008 	beq	14a04 <CUSBStandardHub::RemoveDevice(unsigned int)+0x3c>
   149e0:	e0844106 	add	r4, r4, r6, lsl #2
   149e4:	e5940020 	ldr	r0, [r4, #32]
   149e8:	e3500000 	cmp	r0, #0
   149ec:	0a000002 	beq	149fc <CUSBStandardHub::RemoveDevice(unsigned int)+0x34>
   149f0:	e5903000 	ldr	r3, [r0]
   149f4:	e5933004 	ldr	r3, [r3, #4]
   149f8:	e12fff33 	blx	r3
   149fc:	e3a03000 	mov	r3, #0
   14a00:	e5843020 	str	r3, [r4, #32]
   14a04:	e1a00005 	mov	r0, r5
   14a08:	e8bd8070 	pop	{r4, r5, r6, pc}

00014a0c <CUSBStandardHub::Initialize()>:
   14a0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14a10:	e24dd010 	sub	sp, sp, #16
   14a14:	e1a04000 	mov	r4, r0
   14a18:	ebffeaaf 	bl	f4dc <CUSBFunction::Initialize()>
   14a1c:	e2506000 	subs	r6, r0, #0
   14a20:	0a00001d 	beq	14a9c <CUSBStandardHub::Initialize()+0x90>
   14a24:	e5945010 	ldr	r5, [r4, #16]
   14a28:	e3550000 	cmp	r5, #0
   14a2c:	1a000039 	bne	14b18 <CUSBStandardHub::Initialize()+0x10c>
   14a30:	e3a00009 	mov	r0, #9
   14a34:	eb00598e 	bl	2b074 <operator new(unsigned int)>
   14a38:	e5840010 	str	r0, [r4, #16]
   14a3c:	e1a00004 	mov	r0, r4
   14a40:	ebffebac 	bl	f8f8 <CUSBFunction::GetHost() const>
   14a44:	e1a08000 	mov	r8, r0
   14a48:	e1a00004 	mov	r0, r4
   14a4c:	ebffeb9e 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
   14a50:	e3a07009 	mov	r7, #9
   14a54:	e3a020a0 	mov	r2, #160	; 0xa0
   14a58:	e5943010 	ldr	r3, [r4, #16]
   14a5c:	e1a01000 	mov	r1, r0
   14a60:	e58d2008 	str	r2, [sp, #8]
   14a64:	e1a00008 	mov	r0, r8
   14a68:	e88d0088 	stm	sp, {r3, r7}
   14a6c:	e58d500c 	str	r5, [sp, #12]
   14a70:	e1a03005 	mov	r3, r5
   14a74:	e3a02029 	mov	r2, #41	; 0x29
   14a78:	ebfff7a2 	bl	12908 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   14a7c:	e1500007 	cmp	r0, r7
   14a80:	e1a08000 	mov	r8, r0
   14a84:	1a000007 	bne	14aa8 <CUSBStandardHub::Initialize()+0x9c>
   14a88:	e5943010 	ldr	r3, [r4, #16]
   14a8c:	e5d33002 	ldrb	r3, [r3, #2]
   14a90:	e3530008 	cmp	r3, #8
   14a94:	e5843018 	str	r3, [r4, #24]
   14a98:	8a00000f 	bhi	14adc <CUSBStandardHub::Initialize()+0xd0>
   14a9c:	e1a00006 	mov	r0, r6
   14aa0:	e28dd010 	add	sp, sp, #16
   14aa4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14aa8:	e1a06005 	mov	r6, r5
   14aac:	eb004846 	bl	26bcc <CLogger::Get()>
   14ab0:	e59f3070 	ldr	r3, [pc, #112]	; 14b28 <CUSBStandardHub::Initialize()+0x11c>
   14ab4:	e3a02001 	mov	r2, #1
   14ab8:	e59f106c 	ldr	r1, [pc, #108]	; 14b2c <CUSBStandardHub::Initialize()+0x120>
   14abc:	eb00477f 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ac0:	e5940010 	ldr	r0, [r4, #16]
   14ac4:	e1a01007 	mov	r1, r7
   14ac8:	eb005977 	bl	2b0ac <operator delete(void*, unsigned int)>
   14acc:	e1a00006 	mov	r0, r6
   14ad0:	e5845010 	str	r5, [r4, #16]
   14ad4:	e28dd010 	add	sp, sp, #16
   14ad8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14adc:	e1a06005 	mov	r6, r5
   14ae0:	eb004839 	bl	26bcc <CLogger::Get()>
   14ae4:	e5942018 	ldr	r2, [r4, #24]
   14ae8:	e59f3040 	ldr	r3, [pc, #64]	; 14b30 <CUSBStandardHub::Initialize()+0x124>
   14aec:	e58d2000 	str	r2, [sp]
   14af0:	e59f1034 	ldr	r1, [pc, #52]	; 14b2c <CUSBStandardHub::Initialize()+0x120>
   14af4:	e3a02001 	mov	r2, #1
   14af8:	eb004770 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14afc:	e5940010 	ldr	r0, [r4, #16]
   14b00:	e1a01008 	mov	r1, r8
   14b04:	eb005968 	bl	2b0ac <operator delete(void*, unsigned int)>
   14b08:	e1a00006 	mov	r0, r6
   14b0c:	e5845010 	str	r5, [r4, #16]
   14b10:	e28dd010 	add	sp, sp, #16
   14b14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   14b18:	e3a02055 	mov	r2, #85	; 0x55
   14b1c:	e59f1010 	ldr	r1, [pc, #16]	; 14b34 <CUSBStandardHub::Initialize()+0x128>
   14b20:	e59f0010 	ldr	r0, [pc, #16]	; 14b38 <CUSBStandardHub::Initialize()+0x12c>
   14b24:	eb003f35 	bl	24800 <assertion_failed>
   14b28:	0004110c 	.word	0x0004110c
   14b2c:	000410b0 	.word	0x000410b0
   14b30:	00041128 	.word	0x00041128
   14b34:	000410b8 	.word	0x000410b8
   14b38:	000410fc 	.word	0x000410fc

00014b3c <CUSBStandardHub::EnumeratePorts()>:
   14b3c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b40:	e24dd024 	sub	sp, sp, #36	; 0x24
   14b44:	e1a07000 	mov	r7, r0
   14b48:	ebffeb6a 	bl	f8f8 <CUSBFunction::GetHost() const>
   14b4c:	e2509000 	subs	r9, r0, #0
   14b50:	0a000139 	beq	1503c <CUSBStandardHub::EnumeratePorts()+0x500>
   14b54:	e1a00007 	mov	r0, r7
   14b58:	ebffeb5b 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
   14b5c:	e2503000 	subs	r3, r0, #0
   14b60:	e58d3014 	str	r3, [sp, #20]
   14b64:	0a00013f 	beq	15068 <CUSBStandardHub::EnumeratePorts()+0x52c>
   14b68:	e5973018 	ldr	r3, [r7, #24]
   14b6c:	e3530000 	cmp	r3, #0
   14b70:	0a000140 	beq	15078 <CUSBStandardHub::EnumeratePorts()+0x53c>
   14b74:	e5d7601c 	ldrb	r6, [r7, #28]
   14b78:	e3560000 	cmp	r6, #0
   14b7c:	0a000074 	beq	14d54 <CUSBStandardHub::EnumeratePorts()+0x218>
   14b80:	e2873020 	add	r3, r7, #32
   14b84:	e58d3018 	str	r3, [sp, #24]
   14b88:	e1a05003 	mov	r5, r3
   14b8c:	e3a04001 	mov	r4, #1
   14b90:	e2876040 	add	r6, r7, #64	; 0x40
   14b94:	ea000006 	b	14bb4 <CUSBStandardHub::EnumeratePorts()+0x78>
   14b98:	ebffe504 	bl	dfb0 <CUSBDevice::ReScanDevices()>
   14b9c:	e5973018 	ldr	r3, [r7, #24]
   14ba0:	e2855004 	add	r5, r5, #4
   14ba4:	e1530004 	cmp	r3, r4
   14ba8:	e2866004 	add	r6, r6, #4
   14bac:	e2844001 	add	r4, r4, #1
   14bb0:	9a000089 	bls	14ddc <CUSBStandardHub::EnumeratePorts()+0x2a0>
   14bb4:	e5950000 	ldr	r0, [r5]
   14bb8:	e2448001 	sub	r8, r4, #1
   14bbc:	e3500000 	cmp	r0, #0
   14bc0:	1afffff4 	bne	14b98 <CUSBStandardHub::EnumeratePorts()+0x5c>
   14bc4:	e5963000 	ldr	r3, [r6]
   14bc8:	e3530000 	cmp	r3, #0
   14bcc:	0a00005b 	beq	14d40 <CUSBStandardHub::EnumeratePorts()+0x204>
   14bd0:	e3a02004 	mov	r2, #4
   14bd4:	e58d3008 	str	r3, [sp, #8]
   14bd8:	e3a03000 	mov	r3, #0
   14bdc:	e6ffa074 	uxth	sl, r4
   14be0:	e58d200c 	str	r2, [sp, #12]
   14be4:	e88d0408 	stm	sp, {r3, sl}
   14be8:	e3a020a3 	mov	r2, #163	; 0xa3
   14bec:	e59d1014 	ldr	r1, [sp, #20]
   14bf0:	e1a00009 	mov	r0, r9
   14bf4:	ebfff711 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14bf8:	e3500004 	cmp	r0, #4
   14bfc:	e1a0b000 	mov	fp, r0
   14c00:	0a000006 	beq	14c20 <CUSBStandardHub::EnumeratePorts()+0xe4>
   14c04:	eb0047f0 	bl	26bcc <CLogger::Get()>
   14c08:	e58d4000 	str	r4, [sp]
   14c0c:	e59f35b4 	ldr	r3, [pc, #1460]	; 151c8 <CUSBStandardHub::EnumeratePorts()+0x68c>
   14c10:	e3a02001 	mov	r2, #1
   14c14:	e59f15b0 	ldr	r1, [pc, #1456]	; 151cc <CUSBStandardHub::EnumeratePorts()+0x690>
   14c18:	eb004728 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14c1c:	eaffffde 	b	14b9c <CUSBStandardHub::EnumeratePorts()+0x60>
   14c20:	e5962000 	ldr	r2, [r6]
   14c24:	e5d23000 	ldrb	r3, [r2]
   14c28:	e5d22001 	ldrb	r2, [r2, #1]
   14c2c:	e1833402 	orr	r3, r3, r2, lsl #8
   14c30:	e3130c01 	tst	r3, #256	; 0x100
   14c34:	0a0000f5 	beq	15010 <CUSBStandardHub::EnumeratePorts()+0x4d4>
   14c38:	e3130001 	tst	r3, #1
   14c3c:	0affffd6 	beq	14b9c <CUSBStandardHub::EnumeratePorts()+0x60>
   14c40:	e3a03000 	mov	r3, #0
   14c44:	e58d0000 	str	r0, [sp]
   14c48:	e58d300c 	str	r3, [sp, #12]
   14c4c:	e58d3008 	str	r3, [sp, #8]
   14c50:	e58da004 	str	sl, [sp, #4]
   14c54:	e3a03003 	mov	r3, #3
   14c58:	e3a02023 	mov	r2, #35	; 0x23
   14c5c:	e59d1014 	ldr	r1, [sp, #20]
   14c60:	e1a00009 	mov	r0, r9
   14c64:	ebfff6f5 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14c68:	e3500000 	cmp	r0, #0
   14c6c:	ba0000eb 	blt	15020 <CUSBStandardHub::EnumeratePorts()+0x4e4>
   14c70:	eb0054a2 	bl	29f00 <CTimer::Get()>
   14c74:	e3a00064 	mov	r0, #100	; 0x64
   14c78:	eb005467 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
   14c7c:	e3a02000 	mov	r2, #0
   14c80:	e5963000 	ldr	r3, [r6]
   14c84:	e59d1014 	ldr	r1, [sp, #20]
   14c88:	e58d2000 	str	r2, [sp]
   14c8c:	e58d3008 	str	r3, [sp, #8]
   14c90:	e58db00c 	str	fp, [sp, #12]
   14c94:	e1a03002 	mov	r3, r2
   14c98:	e58da004 	str	sl, [sp, #4]
   14c9c:	e3a020a3 	mov	r2, #163	; 0xa3
   14ca0:	e1a00009 	mov	r0, r9
   14ca4:	ebfff6e5 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14ca8:	e3500004 	cmp	r0, #4
   14cac:	1a00012e 	bne	1516c <CUSBStandardHub::EnumeratePorts()+0x630>
   14cb0:	e5962000 	ldr	r2, [r6]
   14cb4:	e5d23000 	ldrb	r3, [r2]
   14cb8:	e5d22001 	ldrb	r2, [r2, #1]
   14cbc:	e1833402 	orr	r3, r3, r2, lsl #8
   14cc0:	e3130002 	tst	r3, #2
   14cc4:	0a0000e0 	beq	1504c <CUSBStandardHub::EnumeratePorts()+0x510>
   14cc8:	e3130008 	tst	r3, #8
   14ccc:	1a000128 	bne	15174 <CUSBStandardHub::EnumeratePorts()+0x638>
   14cd0:	e3130c02 	tst	r3, #512	; 0x200
   14cd4:	13a0b000 	movne	fp, #0
   14cd8:	0a0000ac 	beq	14f90 <CUSBStandardHub::EnumeratePorts()+0x454>
   14cdc:	e5953000 	ldr	r3, [r5]
   14ce0:	e3530000 	cmp	r3, #0
   14ce4:	1a0000e7 	bne	15088 <CUSBStandardHub::EnumeratePorts()+0x54c>
   14ce8:	e3a00058 	mov	r0, #88	; 0x58
   14cec:	eb0058e0 	bl	2b074 <operator new(unsigned int)>
   14cf0:	e1a0a000 	mov	sl, r0
   14cf4:	e1a0200b 	mov	r2, fp
   14cf8:	e1a03007 	mov	r3, r7
   14cfc:	e1a01009 	mov	r1, r9
   14d00:	e58d8000 	str	r8, [sp]
   14d04:	ebffe451 	bl	de50 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   14d08:	e585a000 	str	sl, [r5]
   14d0c:	e1a0000a 	mov	r0, sl
   14d10:	ebffe5d3 	bl	e464 <CUSBDevice::Initialize()>
   14d14:	e3500000 	cmp	r0, #0
   14d18:	1affff9f 	bne	14b9c <CUSBStandardHub::EnumeratePorts()+0x60>
   14d1c:	e5950000 	ldr	r0, [r5]
   14d20:	e3500000 	cmp	r0, #0
   14d24:	0a000002 	beq	14d34 <CUSBStandardHub::EnumeratePorts()+0x1f8>
   14d28:	e5903000 	ldr	r3, [r0]
   14d2c:	e5933004 	ldr	r3, [r3, #4]
   14d30:	e12fff33 	blx	r3
   14d34:	e3a03000 	mov	r3, #0
   14d38:	e5853000 	str	r3, [r5]
   14d3c:	eaffff96 	b	14b9c <CUSBStandardHub::EnumeratePorts()+0x60>
   14d40:	e3a00004 	mov	r0, #4
   14d44:	eb0058ca 	bl	2b074 <operator new(unsigned int)>
   14d48:	e1a03000 	mov	r3, r0
   14d4c:	e5860000 	str	r0, [r6]
   14d50:	eaffff9e 	b	14bd0 <CUSBStandardHub::EnumeratePorts()+0x94>
   14d54:	e1a04006 	mov	r4, r6
   14d58:	e1a05006 	mov	r5, r6
   14d5c:	e58d6018 	str	r6, [sp, #24]
   14d60:	e3a0b008 	mov	fp, #8
   14d64:	e3a0a003 	mov	sl, #3
   14d68:	e3a08023 	mov	r8, #35	; 0x23
   14d6c:	e59d6014 	ldr	r6, [sp, #20]
   14d70:	ea000002 	b	14d80 <CUSBStandardHub::EnumeratePorts()+0x244>
   14d74:	e5973018 	ldr	r3, [r7, #24]
   14d78:	e1530004 	cmp	r3, r4
   14d7c:	9a000093 	bls	14fd0 <CUSBStandardHub::EnumeratePorts()+0x494>
   14d80:	e2844001 	add	r4, r4, #1
   14d84:	e6ff3074 	uxth	r3, r4
   14d88:	e58d3004 	str	r3, [sp, #4]
   14d8c:	e58d500c 	str	r5, [sp, #12]
   14d90:	e58d5008 	str	r5, [sp, #8]
   14d94:	e58db000 	str	fp, [sp]
   14d98:	e1a0300a 	mov	r3, sl
   14d9c:	e1a02008 	mov	r2, r8
   14da0:	e1a01006 	mov	r1, r6
   14da4:	e1a00009 	mov	r0, r9
   14da8:	ebfff6a4 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14dac:	e3500000 	cmp	r0, #0
   14db0:	aaffffef 	bge	14d74 <CUSBStandardHub::EnumeratePorts()+0x238>
   14db4:	e59d6018 	ldr	r6, [sp, #24]
   14db8:	eb004783 	bl	26bcc <CLogger::Get()>
   14dbc:	e58d4000 	str	r4, [sp]
   14dc0:	e59f3408 	ldr	r3, [pc, #1032]	; 151d0 <CUSBStandardHub::EnumeratePorts()+0x694>
   14dc4:	e3a02001 	mov	r2, #1
   14dc8:	e59f13fc 	ldr	r1, [pc, #1020]	; 151cc <CUSBStandardHub::EnumeratePorts()+0x690>
   14dcc:	eb0046bb 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14dd0:	e1a00006 	mov	r0, r6
   14dd4:	e28dd024 	add	sp, sp, #36	; 0x24
   14dd8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ddc:	e3530000 	cmp	r3, #0
   14de0:	0a00002a 	beq	14e90 <CUSBStandardHub::EnumeratePorts()+0x354>
   14de4:	e3a04001 	mov	r4, #1
   14de8:	e58d901c 	str	r9, [sp, #28]
   14dec:	e3a0a004 	mov	sl, #4
   14df0:	e1a06004 	mov	r6, r4
   14df4:	e3a0b002 	mov	fp, #2
   14df8:	e59f83cc 	ldr	r8, [pc, #972]	; 151cc <CUSBStandardHub::EnumeratePorts()+0x690>
   14dfc:	e2875060 	add	r5, r7, #96	; 0x60
   14e00:	e59d9018 	ldr	r9, [sp, #24]
   14e04:	ea000004 	b	14e1c <CUSBStandardHub::EnumeratePorts()+0x2e0>
   14e08:	e1530004 	cmp	r3, r4
   14e0c:	e2899004 	add	r9, r9, #4
   14e10:	e2844001 	add	r4, r4, #1
   14e14:	e2855001 	add	r5, r5, #1
   14e18:	9a00001b 	bls	14e8c <CUSBStandardHub::EnumeratePorts()+0x350>
   14e1c:	e5990000 	ldr	r0, [r9]
   14e20:	e3500000 	cmp	r0, #0
   14e24:	0afffff7 	beq	14e08 <CUSBStandardHub::EnumeratePorts()+0x2cc>
   14e28:	e5d52000 	ldrb	r2, [r5]
   14e2c:	e3520000 	cmp	r2, #0
   14e30:	1afffff4 	bne	14e08 <CUSBStandardHub::EnumeratePorts()+0x2cc>
   14e34:	e5903000 	ldr	r3, [r0]
   14e38:	e5c56000 	strb	r6, [r5]
   14e3c:	e593300c 	ldr	r3, [r3, #12]
   14e40:	e12fff33 	blx	r3
   14e44:	e3500000 	cmp	r0, #0
   14e48:	1a000048 	bne	14f70 <CUSBStandardHub::EnumeratePorts()+0x434>
   14e4c:	eb00475e 	bl	26bcc <CLogger::Get()>
   14e50:	e58d4000 	str	r4, [sp]
   14e54:	e59f3378 	ldr	r3, [pc, #888]	; 151d4 <CUSBStandardHub::EnumeratePorts()+0x698>
   14e58:	e1a0200b 	mov	r2, fp
   14e5c:	e1a01008 	mov	r1, r8
   14e60:	eb004696 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14e64:	e5990000 	ldr	r0, [r9]
   14e68:	e3500000 	cmp	r0, #0
   14e6c:	0a000002 	beq	14e7c <CUSBStandardHub::EnumeratePorts()+0x340>
   14e70:	e5903000 	ldr	r3, [r0]
   14e74:	e5933004 	ldr	r3, [r3, #4]
   14e78:	e12fff33 	blx	r3
   14e7c:	e3a03000 	mov	r3, #0
   14e80:	e5893000 	str	r3, [r9]
   14e84:	e5973018 	ldr	r3, [r7, #24]
   14e88:	eaffffde 	b	14e08 <CUSBStandardHub::EnumeratePorts()+0x2cc>
   14e8c:	e59d901c 	ldr	r9, [sp, #28]
   14e90:	e3a00004 	mov	r0, #4
   14e94:	eb005876 	bl	2b074 <operator new(unsigned int)>
   14e98:	e3a06000 	mov	r6, #0
   14e9c:	e3a04004 	mov	r4, #4
   14ea0:	e58d0008 	str	r0, [sp, #8]
   14ea4:	e1a0b000 	mov	fp, r0
   14ea8:	e58d400c 	str	r4, [sp, #12]
   14eac:	e58d6004 	str	r6, [sp, #4]
   14eb0:	e58d6000 	str	r6, [sp]
   14eb4:	e1a03006 	mov	r3, r6
   14eb8:	e3a020a0 	mov	r2, #160	; 0xa0
   14ebc:	e59d1014 	ldr	r1, [sp, #20]
   14ec0:	e1a00009 	mov	r0, r9
   14ec4:	ebfff65d 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14ec8:	e1500004 	cmp	r0, r4
   14ecc:	e1a05000 	mov	r5, r0
   14ed0:	1a000035 	bne	14fac <CUSBStandardHub::EnumeratePorts()+0x470>
   14ed4:	e5db3000 	ldrb	r3, [fp]
   14ed8:	e2138002 	ands	r8, r3, #2
   14edc:	0a00006d 	beq	15098 <CUSBStandardHub::EnumeratePorts()+0x55c>
   14ee0:	e5973018 	ldr	r3, [r7, #24]
   14ee4:	e3530000 	cmp	r3, #0
   14ee8:	0a000016 	beq	14f48 <CUSBStandardHub::EnumeratePorts()+0x40c>
   14eec:	e3a04001 	mov	r4, #1
   14ef0:	e58db018 	str	fp, [sp, #24]
   14ef4:	e1a0a004 	mov	sl, r4
   14ef8:	e3a08008 	mov	r8, #8
   14efc:	e3a05023 	mov	r5, #35	; 0x23
   14f00:	e59db014 	ldr	fp, [sp, #20]
   14f04:	ea000000 	b	14f0c <CUSBStandardHub::EnumeratePorts()+0x3d0>
   14f08:	e1a04002 	mov	r4, r2
   14f0c:	e6ff3074 	uxth	r3, r4
   14f10:	e58d3004 	str	r3, [sp, #4]
   14f14:	e1a02005 	mov	r2, r5
   14f18:	e1a0300a 	mov	r3, sl
   14f1c:	e58d600c 	str	r6, [sp, #12]
   14f20:	e58d6008 	str	r6, [sp, #8]
   14f24:	e58d8000 	str	r8, [sp]
   14f28:	e1a0100b 	mov	r1, fp
   14f2c:	e1a00009 	mov	r0, r9
   14f30:	ebfff642 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14f34:	e5973018 	ldr	r3, [r7, #24]
   14f38:	e2842001 	add	r2, r4, #1
   14f3c:	e1540003 	cmp	r4, r3
   14f40:	3afffff0 	bcc	14f08 <CUSBStandardHub::EnumeratePorts()+0x3cc>
   14f44:	e59db018 	ldr	fp, [sp, #24]
   14f48:	eb00471f 	bl	26bcc <CLogger::Get()>
   14f4c:	e59f3284 	ldr	r3, [pc, #644]	; 151d8 <CUSBStandardHub::EnumeratePorts()+0x69c>
   14f50:	e3a02001 	mov	r2, #1
   14f54:	e59f1270 	ldr	r1, [pc, #624]	; 151cc <CUSBStandardHub::EnumeratePorts()+0x690>
   14f58:	eb004658 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14f5c:	e1a0000b 	mov	r0, fp
   14f60:	e3a01004 	mov	r1, #4
   14f64:	eb005850 	bl	2b0ac <operator delete(void*, unsigned int)>
   14f68:	e3a06000 	mov	r6, #0
   14f6c:	eaffff97 	b	14dd0 <CUSBStandardHub::EnumeratePorts()+0x294>
   14f70:	eb004715 	bl	26bcc <CLogger::Get()>
   14f74:	e59f3260 	ldr	r3, [pc, #608]	; 151dc <CUSBStandardHub::EnumeratePorts()+0x6a0>
   14f78:	e58d4000 	str	r4, [sp]
   14f7c:	e1a0200a 	mov	r2, sl
   14f80:	e1a01008 	mov	r1, r8
   14f84:	eb00464d 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14f88:	e5973018 	ldr	r3, [r7, #24]
   14f8c:	eaffff9d 	b	14e08 <CUSBStandardHub::EnumeratePorts()+0x2cc>
   14f90:	e3130b01 	tst	r3, #1024	; 0x400
   14f94:	e5953000 	ldr	r3, [r5]
   14f98:	03a0b001 	moveq	fp, #1
   14f9c:	13a0b002 	movne	fp, #2
   14fa0:	e3530000 	cmp	r3, #0
   14fa4:	0affff4f 	beq	14ce8 <CUSBStandardHub::EnumeratePorts()+0x1ac>
   14fa8:	ea000036 	b	15088 <CUSBStandardHub::EnumeratePorts()+0x54c>
   14fac:	eb004706 	bl	26bcc <CLogger::Get()>
   14fb0:	e59f3228 	ldr	r3, [pc, #552]	; 151e0 <CUSBStandardHub::EnumeratePorts()+0x6a4>
   14fb4:	e3a02001 	mov	r2, #1
   14fb8:	e59f120c 	ldr	r1, [pc, #524]	; 151cc <CUSBStandardHub::EnumeratePorts()+0x690>
   14fbc:	eb00463f 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14fc0:	e1a01004 	mov	r1, r4
   14fc4:	e1a0000b 	mov	r0, fp
   14fc8:	eb005837 	bl	2b0ac <operator delete(void*, unsigned int)>
   14fcc:	eaffff7f 	b	14dd0 <CUSBStandardHub::EnumeratePorts()+0x294>
   14fd0:	e3a03001 	mov	r3, #1
   14fd4:	e5c7301c 	strb	r3, [r7, #28]
   14fd8:	eb0044ba 	bl	262c8 <CKernelOptions::Get()>
   14fdc:	e3500000 	cmp	r0, #0
   14fe0:	0a000002 	beq	14ff0 <CUSBStandardHub::EnumeratePorts()+0x4b4>
   14fe4:	eb0044aa 	bl	26294 <CKernelOptions::GetUSBPowerDelay() const>
   14fe8:	e2504000 	subs	r4, r0, #0
   14fec:	1a000000 	bne	14ff4 <CUSBStandardHub::EnumeratePorts()+0x4b8>
   14ff0:	e59f41ec 	ldr	r4, [pc, #492]	; 151e4 <CUSBStandardHub::EnumeratePorts()+0x6a8>
   14ff4:	eb0053c1 	bl	29f00 <CTimer::Get()>
   14ff8:	e1a00004 	mov	r0, r4
   14ffc:	eb005386 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
   15000:	e5973018 	ldr	r3, [r7, #24]
   15004:	e3530000 	cmp	r3, #0
   15008:	1afffedc 	bne	14b80 <CUSBStandardHub::EnumeratePorts()+0x44>
   1500c:	eaffff9f 	b	14e90 <CUSBStandardHub::EnumeratePorts()+0x354>
   15010:	e59f21d0 	ldr	r2, [pc, #464]	; 151e8 <CUSBStandardHub::EnumeratePorts()+0x6ac>
   15014:	e59f11d0 	ldr	r1, [pc, #464]	; 151ec <CUSBStandardHub::EnumeratePorts()+0x6b0>
   15018:	e59f01d0 	ldr	r0, [pc, #464]	; 151f0 <CUSBStandardHub::EnumeratePorts()+0x6b4>
   1501c:	eb003df7 	bl	24800 <assertion_failed>
   15020:	eb0046e9 	bl	26bcc <CLogger::Get()>
   15024:	e58d4000 	str	r4, [sp]
   15028:	e59f31c4 	ldr	r3, [pc, #452]	; 151f4 <CUSBStandardHub::EnumeratePorts()+0x6b8>
   1502c:	e3a02001 	mov	r2, #1
   15030:	e59f1194 	ldr	r1, [pc, #404]	; 151cc <CUSBStandardHub::EnumeratePorts()+0x690>
   15034:	eb004621 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15038:	eafffed7 	b	14b9c <CUSBStandardHub::EnumeratePorts()+0x60>
   1503c:	e3a020e3 	mov	r2, #227	; 0xe3
   15040:	e59f11a4 	ldr	r1, [pc, #420]	; 151ec <CUSBStandardHub::EnumeratePorts()+0x6b0>
   15044:	e59f01ac 	ldr	r0, [pc, #428]	; 151f8 <CUSBStandardHub::EnumeratePorts()+0x6bc>
   15048:	eb003dec 	bl	24800 <assertion_failed>
   1504c:	eb0046de 	bl	26bcc <CLogger::Get()>
   15050:	e58d4000 	str	r4, [sp]
   15054:	e59f31a0 	ldr	r3, [pc, #416]	; 151fc <CUSBStandardHub::EnumeratePorts()+0x6c0>
   15058:	e3a02001 	mov	r2, #1
   1505c:	e59f1168 	ldr	r1, [pc, #360]	; 151cc <CUSBStandardHub::EnumeratePorts()+0x690>
   15060:	eb004616 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15064:	eafffecc 	b	14b9c <CUSBStandardHub::EnumeratePorts()+0x60>
   15068:	e3a020e6 	mov	r2, #230	; 0xe6
   1506c:	e59f1178 	ldr	r1, [pc, #376]	; 151ec <CUSBStandardHub::EnumeratePorts()+0x6b0>
   15070:	e59f0188 	ldr	r0, [pc, #392]	; 15200 <CUSBStandardHub::EnumeratePorts()+0x6c4>
   15074:	eb003de1 	bl	24800 <assertion_failed>
   15078:	e3a020e8 	mov	r2, #232	; 0xe8
   1507c:	e59f1168 	ldr	r1, [pc, #360]	; 151ec <CUSBStandardHub::EnumeratePorts()+0x6b0>
   15080:	e59f017c 	ldr	r0, [pc, #380]	; 15204 <CUSBStandardHub::EnumeratePorts()+0x6c8>
   15084:	eb003ddd 	bl	24800 <assertion_failed>
   15088:	e59f2178 	ldr	r2, [pc, #376]	; 15208 <CUSBStandardHub::EnumeratePorts()+0x6cc>
   1508c:	e59f1158 	ldr	r1, [pc, #344]	; 151ec <CUSBStandardHub::EnumeratePorts()+0x6b0>
   15090:	e59f0174 	ldr	r0, [pc, #372]	; 1520c <CUSBStandardHub::EnumeratePorts()+0x6d0>
   15094:	eb003dd9 	bl	24800 <assertion_failed>
   15098:	e1a0000b 	mov	r0, fp
   1509c:	e1a01005 	mov	r1, r5
   150a0:	eb005801 	bl	2b0ac <operator delete(void*, unsigned int)>
   150a4:	e5973018 	ldr	r3, [r7, #24]
   150a8:	e3530000 	cmp	r3, #0
   150ac:	0a000043 	beq	151c0 <CUSBStandardHub::EnumeratePorts()+0x684>
   150b0:	e3a04001 	mov	r4, #1
   150b4:	e1a0b005 	mov	fp, r5
   150b8:	e59da014 	ldr	sl, [sp, #20]
   150bc:	e2875040 	add	r5, r7, #64	; 0x40
   150c0:	e58d4014 	str	r4, [sp, #20]
   150c4:	ea000004 	b	150dc <CUSBStandardHub::EnumeratePorts()+0x5a0>
   150c8:	e5973018 	ldr	r3, [r7, #24]
   150cc:	e2855004 	add	r5, r5, #4
   150d0:	e1540003 	cmp	r4, r3
   150d4:	e2844001 	add	r4, r4, #1
   150d8:	2a000021 	bcs	15164 <CUSBStandardHub::EnumeratePorts()+0x628>
   150dc:	e5953000 	ldr	r3, [r5]
   150e0:	e6ff6074 	uxth	r6, r4
   150e4:	e58d3008 	str	r3, [sp, #8]
   150e8:	e58db00c 	str	fp, [sp, #12]
   150ec:	e58d8000 	str	r8, [sp]
   150f0:	e58d6004 	str	r6, [sp, #4]
   150f4:	e3a03000 	mov	r3, #0
   150f8:	e3a020a3 	mov	r2, #163	; 0xa3
   150fc:	e1a0100a 	mov	r1, sl
   15100:	e1a00009 	mov	r0, r9
   15104:	ebfff5cd 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15108:	e3500004 	cmp	r0, #4
   1510c:	1affffed 	bne	150c8 <CUSBStandardHub::EnumeratePorts()+0x58c>
   15110:	e5953000 	ldr	r3, [r5]
   15114:	e5d33000 	ldrb	r3, [r3]
   15118:	e3130008 	tst	r3, #8
   1511c:	0affffe9 	beq	150c8 <CUSBStandardHub::EnumeratePorts()+0x58c>
   15120:	e3a03008 	mov	r3, #8
   15124:	e3a02023 	mov	r2, #35	; 0x23
   15128:	e1a0100a 	mov	r1, sl
   1512c:	e58d3000 	str	r3, [sp]
   15130:	e58d800c 	str	r8, [sp, #12]
   15134:	e3a03001 	mov	r3, #1
   15138:	e98d0140 	stmib	sp, {r6, r8}
   1513c:	e1a00009 	mov	r0, r9
   15140:	ebfff5be 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15144:	eb0046a0 	bl	26bcc <CLogger::Get()>
   15148:	e58d4000 	str	r4, [sp]
   1514c:	e59f30bc 	ldr	r3, [pc, #188]	; 15210 <CUSBStandardHub::EnumeratePorts()+0x6d4>
   15150:	e3a02001 	mov	r2, #1
   15154:	e59f1070 	ldr	r1, [pc, #112]	; 151cc <CUSBStandardHub::EnumeratePorts()+0x690>
   15158:	eb0045d8 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1515c:	e58d8014 	str	r8, [sp, #20]
   15160:	eaffffd8 	b	150c8 <CUSBStandardHub::EnumeratePorts()+0x58c>
   15164:	e59d6014 	ldr	r6, [sp, #20]
   15168:	eaffff18 	b	14dd0 <CUSBStandardHub::EnumeratePorts()+0x294>
   1516c:	e3a06000 	mov	r6, #0
   15170:	eaffff16 	b	14dd0 <CUSBStandardHub::EnumeratePorts()+0x294>
   15174:	e3a02000 	mov	r2, #0
   15178:	e3a03008 	mov	r3, #8
   1517c:	e59d1014 	ldr	r1, [sp, #20]
   15180:	e58d200c 	str	r2, [sp, #12]
   15184:	e58d2008 	str	r2, [sp, #8]
   15188:	e58d3000 	str	r3, [sp]
   1518c:	e3a02023 	mov	r2, #35	; 0x23
   15190:	e3a03001 	mov	r3, #1
   15194:	e58da004 	str	sl, [sp, #4]
   15198:	e1a00009 	mov	r0, r9
   1519c:	ebfff5a7 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   151a0:	eb004689 	bl	26bcc <CLogger::Get()>
   151a4:	e58d4000 	str	r4, [sp]
   151a8:	e59f3060 	ldr	r3, [pc, #96]	; 15210 <CUSBStandardHub::EnumeratePorts()+0x6d4>
   151ac:	e3a02001 	mov	r2, #1
   151b0:	e59f1014 	ldr	r1, [pc, #20]	; 151cc <CUSBStandardHub::EnumeratePorts()+0x690>
   151b4:	eb0045c1 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   151b8:	e3a06000 	mov	r6, #0
   151bc:	eaffff03 	b	14dd0 <CUSBStandardHub::EnumeratePorts()+0x294>
   151c0:	e3a06001 	mov	r6, #1
   151c4:	eaffff01 	b	14dd0 <CUSBStandardHub::EnumeratePorts()+0x294>
   151c8:	00041174 	.word	0x00041174
   151cc:	000410b0 	.word	0x000410b0
   151d0:	0004115c 	.word	0x0004115c
   151d4:	00041234 	.word	0x00041234
   151d8:	0004128c 	.word	0x0004128c
   151dc:	00041258 	.word	0x00041258
   151e0:	00041274 	.word	0x00041274
   151e4:	000001fe 	.word	0x000001fe
   151e8:	00000125 	.word	0x00000125
   151ec:	000410b8 	.word	0x000410b8
   151f0:	00041194 	.word	0x00041194
   151f4:	000411c8 	.word	0x000411c8
   151f8:	00040ba4 	.word	0x00040ba4
   151fc:	000411e0 	.word	0x000411e0
   15200:	0004113c 	.word	0x0004113c
   15204:	0004114c 	.word	0x0004114c
   15208:	00000162 	.word	0x00000162
   1520c:	0004121c 	.word	0x0004121c
   15210:	000411f8 	.word	0x000411f8

00015214 <CUSBStandardHub::ReScanDevices()>:
   15214:	eafffe48 	b	14b3c <CUSBStandardHub::EnumeratePorts()>

00015218 <CUSBStandardHub::Configure()>:
   15218:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1521c:	e24dd010 	sub	sp, sp, #16
   15220:	e1a04000 	mov	r4, r0
   15224:	ebffe991 	bl	f870 <CUSBFunction::GetNumEndpoints() const>
   15228:	e3500001 	cmp	r0, #1
   1522c:	0a000006 	beq	1524c <CUSBStandardHub::Configure()+0x34>
   15230:	e1a00004 	mov	r0, r4
   15234:	e59f1110 	ldr	r1, [pc, #272]	; 1534c <CUSBStandardHub::Configure()+0x134>
   15238:	ebffe9c4 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   1523c:	e3a06000 	mov	r6, #0
   15240:	e1a00006 	mov	r0, r6
   15244:	e28dd010 	add	sp, sp, #16
   15248:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1524c:	e1a05000 	mov	r5, r0
   15250:	e3a01005 	mov	r1, #5
   15254:	e1a00004 	mov	r0, r4
   15258:	ebffe9b1 	bl	f924 <CUSBFunction::GetDescriptor(unsigned char)>
   1525c:	e2506000 	subs	r6, r0, #0
   15260:	0afffff2 	beq	15230 <CUSBStandardHub::Configure()+0x18>
   15264:	e1d630d2 	ldrsb	r3, [r6, #2]
   15268:	e3530000 	cmp	r3, #0
   1526c:	aaffffef 	bge	15230 <CUSBStandardHub::Configure()+0x18>
   15270:	e5d63003 	ldrb	r3, [r6, #3]
   15274:	e203303f 	and	r3, r3, #63	; 0x3f
   15278:	e3530003 	cmp	r3, #3
   1527c:	1affffeb 	bne	15230 <CUSBStandardHub::Configure()+0x18>
   15280:	e1a00004 	mov	r0, r4
   15284:	ebffe985 	bl	f8a0 <CUSBFunction::GetDevice() const>
   15288:	e1a08000 	mov	r8, r0
   1528c:	e3a00014 	mov	r0, #20
   15290:	eb005777 	bl	2b074 <operator new(unsigned int)>
   15294:	e1a07000 	mov	r7, r0
   15298:	e1a02006 	mov	r2, r6
   1529c:	e1a01008 	mov	r1, r8
   152a0:	ebffe7bb 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   152a4:	e5847014 	str	r7, [r4, #20]
   152a8:	e1a00004 	mov	r0, r4
   152ac:	ebffe8b7 	bl	f590 <CUSBFunction::Configure()>
   152b0:	e2506000 	subs	r6, r0, #0
   152b4:	0a000018 	beq	1531c <CUSBStandardHub::Configure()+0x104>
   152b8:	e1a0000d 	mov	r0, sp
   152bc:	eb004a28 	bl	27b64 <CString::CString()>
   152c0:	e59f3088 	ldr	r3, [pc, #136]	; 15350 <CUSBStandardHub::Configure()+0x138>
   152c4:	e59f1088 	ldr	r1, [pc, #136]	; 15354 <CUSBStandardHub::Configure()+0x13c>
   152c8:	e5932000 	ldr	r2, [r3]
   152cc:	e1a0000d 	mov	r0, sp
   152d0:	e282c001 	add	ip, r2, #1
   152d4:	e583c000 	str	ip, [r3]
   152d8:	eb004f64 	bl	29070 <CString::Format(char const*, ...)>
   152dc:	eb004021 	bl	25368 <CDeviceNameService::Get()>
   152e0:	e1a06000 	mov	r6, r0
   152e4:	e1a0000d 	mov	r0, sp
   152e8:	eb004a33 	bl	27bbc <CString::operator char const*() const>
   152ec:	e3a03000 	mov	r3, #0
   152f0:	e1a01000 	mov	r1, r0
   152f4:	e1a02004 	mov	r2, r4
   152f8:	e1a00006 	mov	r0, r6
   152fc:	eb003f5f 	bl	25080 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   15300:	e1a00004 	mov	r0, r4
   15304:	ebfffe0c 	bl	14b3c <CUSBStandardHub::EnumeratePorts()>
   15308:	e2506000 	subs	r6, r0, #0
   1530c:	0a000008 	beq	15334 <CUSBStandardHub::Configure()+0x11c>
   15310:	e1a0000d 	mov	r0, sp
   15314:	eb0049df 	bl	27a98 <CString::~CString()>
   15318:	eaffffc8 	b	15240 <CUSBStandardHub::Configure()+0x28>
   1531c:	eb00462a 	bl	26bcc <CLogger::Get()>
   15320:	e1a02005 	mov	r2, r5
   15324:	e59f302c 	ldr	r3, [pc, #44]	; 15358 <CUSBStandardHub::Configure()+0x140>
   15328:	e59f101c 	ldr	r1, [pc, #28]	; 1534c <CUSBStandardHub::Configure()+0x134>
   1532c:	eb004563 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15330:	eaffffc2 	b	15240 <CUSBStandardHub::Configure()+0x28>
   15334:	eb004624 	bl	26bcc <CLogger::Get()>
   15338:	e1a02005 	mov	r2, r5
   1533c:	e59f3018 	ldr	r3, [pc, #24]	; 1535c <CUSBStandardHub::Configure()+0x144>
   15340:	e59f1004 	ldr	r1, [pc, #4]	; 1534c <CUSBStandardHub::Configure()+0x134>
   15344:	eb00455d 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15348:	eafffff0 	b	15310 <CUSBStandardHub::Configure()+0xf8>
   1534c:	000410b0 	.word	0x000410b0
   15350:	00047e90 	.word	0x00047e90
   15354:	000412a8 	.word	0x000412a8
   15358:	0004030c 	.word	0x0004030c
   1535c:	000412b0 	.word	0x000412b0

00015360 <CLAN7800Device::GetMACAddress() const>:
   15360:	e280001c 	add	r0, r0, #28
   15364:	e12fff1e 	bx	lr

00015368 <non-virtual thunk to CLAN7800Device::GetMACAddress() const>:
   15368:	e2400010 	sub	r0, r0, #16
   1536c:	eafffffb 	b	15360 <CLAN7800Device::GetMACAddress() const>

00015370 <CLAN7800Device::~CLAN7800Device()>:
   15370:	e92d4070 	push	{r4, r5, r6, lr}
   15374:	e59f3074 	ldr	r3, [pc, #116]	; 153f0 <CLAN7800Device::~CLAN7800Device()+0x80>
   15378:	e5905018 	ldr	r5, [r0, #24]
   1537c:	e2832040 	add	r2, r3, #64	; 0x40
   15380:	e3550000 	cmp	r5, #0
   15384:	e1a04000 	mov	r4, r0
   15388:	e5803000 	str	r3, [r0]
   1538c:	e5802010 	str	r2, [r0, #16]
   15390:	0a000004 	beq	153a8 <CLAN7800Device::~CLAN7800Device()+0x38>
   15394:	e1a00005 	mov	r0, r5
   15398:	ebffe7e7 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   1539c:	e1a00005 	mov	r0, r5
   153a0:	e3a01014 	mov	r1, #20
   153a4:	eb005740 	bl	2b0ac <operator delete(void*, unsigned int)>
   153a8:	e3a03000 	mov	r3, #0
   153ac:	e5945014 	ldr	r5, [r4, #20]
   153b0:	e5843018 	str	r3, [r4, #24]
   153b4:	e1550003 	cmp	r5, r3
   153b8:	0a000004 	beq	153d0 <CLAN7800Device::~CLAN7800Device()+0x60>
   153bc:	e1a00005 	mov	r0, r5
   153c0:	ebffe7dd 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   153c4:	e1a00005 	mov	r0, r5
   153c8:	e3a01014 	mov	r1, #20
   153cc:	eb005736 	bl	2b0ac <operator delete(void*, unsigned int)>
   153d0:	e3a03000 	mov	r3, #0
   153d4:	e284001c 	add	r0, r4, #28
   153d8:	e5843014 	str	r3, [r4, #20]
   153dc:	eb00563f 	bl	2ace0 <CMACAddress::~CMACAddress()>
   153e0:	e1a00004 	mov	r0, r4
   153e4:	ebffe840 	bl	f4ec <CUSBFunction::~CUSBFunction()>
   153e8:	e1a00004 	mov	r0, r4
   153ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   153f0:	000412d0 	.word	0x000412d0

000153f4 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   153f4:	e2400010 	sub	r0, r0, #16
   153f8:	eaffffdc 	b	15370 <CLAN7800Device::~CLAN7800Device()>

000153fc <CLAN7800Device::~CLAN7800Device()>:
   153fc:	e92d4010 	push	{r4, lr}
   15400:	e1a04000 	mov	r4, r0
   15404:	ebffffd9 	bl	15370 <CLAN7800Device::~CLAN7800Device()>
   15408:	e1a00004 	mov	r0, r4
   1540c:	e3a01024 	mov	r1, #36	; 0x24
   15410:	eb005725 	bl	2b0ac <operator delete(void*, unsigned int)>
   15414:	e1a00004 	mov	r0, r4
   15418:	e8bd8010 	pop	{r4, pc}

0001541c <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   1541c:	e2400010 	sub	r0, r0, #16
   15420:	eafffff5 	b	153fc <CLAN7800Device::~CLAN7800Device()>

00015424 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   15424:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15428:	e5903014 	ldr	r3, [r0, #20]
   1542c:	e24dd030 	sub	sp, sp, #48	; 0x30
   15430:	e3530000 	cmp	r3, #0
   15434:	0a000034 	beq	1550c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe8>
   15438:	e3510000 	cmp	r1, #0
   1543c:	e1a04001 	mov	r4, r1
   15440:	0a000035 	beq	1551c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xf8>
   15444:	e3a06000 	mov	r6, #0
   15448:	e1a05000 	mov	r5, r0
   1544c:	e1a01003 	mov	r1, r3
   15450:	e1a08002 	mov	r8, r2
   15454:	e3a03d19 	mov	r3, #1600	; 0x640
   15458:	e1a02004 	mov	r2, r4
   1545c:	e58d6000 	str	r6, [sp]
   15460:	e28d0008 	add	r0, sp, #8
   15464:	ebfffbf5 	bl	14440 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15468:	e1a00005 	mov	r0, r5
   1546c:	ebffe921 	bl	f8f8 <CUSBFunction::GetHost() const>
   15470:	e5903000 	ldr	r3, [r0]
   15474:	e1a02006 	mov	r2, r6
   15478:	e5933008 	ldr	r3, [r3, #8]
   1547c:	e28d1008 	add	r1, sp, #8
   15480:	e12fff33 	blx	r3
   15484:	e2505000 	subs	r5, r0, #0
   15488:	0a000019 	beq	154f4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd0>
   1548c:	e28d0008 	add	r0, sp, #8
   15490:	ebfffc1d 	bl	1450c <CUSBRequest::GetResultLength() const>
   15494:	e3500009 	cmp	r0, #9
   15498:	9a000015 	bls	154f4 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd0>
   1549c:	e5947000 	ldr	r7, [r4]
   154a0:	e3170501 	tst	r7, #4194304	; 0x400000
   154a4:	1a000020 	bne	1552c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x108>
   154a8:	e1a03907 	lsl	r3, r7, #18
   154ac:	e1a03923 	lsr	r3, r3, #18
   154b0:	e240200a 	sub	r2, r0, #10
   154b4:	e1530002 	cmp	r3, r2
   154b8:	1a000027 	bne	1555c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x138>
   154bc:	e3530004 	cmp	r3, #4
   154c0:	9a000021 	bls	1554c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x128>
   154c4:	e240600e 	sub	r6, r0, #14
   154c8:	e1a02006 	mov	r2, r6
   154cc:	e284100a 	add	r1, r4, #10
   154d0:	e1a00004 	mov	r0, r4
   154d4:	eb00550d 	bl	2a910 <memcpy>
   154d8:	e3580000 	cmp	r8, #0
   154dc:	15886000 	strne	r6, [r8]
   154e0:	1a000004 	bne	154f8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd4>
   154e4:	e59f2080 	ldr	r2, [pc, #128]	; 1556c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x148>
   154e8:	e59f1080 	ldr	r1, [pc, #128]	; 15570 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   154ec:	e59f0080 	ldr	r0, [pc, #128]	; 15574 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x150>
   154f0:	eb003cc2 	bl	24800 <assertion_failed>
   154f4:	e3a05000 	mov	r5, #0
   154f8:	e28d0008 	add	r0, sp, #8
   154fc:	ebfffbf0 	bl	144c4 <CUSBRequest::~CUSBRequest()>
   15500:	e1a00005 	mov	r0, r5
   15504:	e28dd030 	add	sp, sp, #48	; 0x30
   15508:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1550c:	e59f2064 	ldr	r2, [pc, #100]	; 15578 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x154>
   15510:	e59f1058 	ldr	r1, [pc, #88]	; 15570 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15514:	e59f0060 	ldr	r0, [pc, #96]	; 1557c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x158>
   15518:	eb003cb8 	bl	24800 <assertion_failed>
   1551c:	e3a02d07 	mov	r2, #448	; 0x1c0
   15520:	e59f1048 	ldr	r1, [pc, #72]	; 15570 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15524:	e59f0054 	ldr	r0, [pc, #84]	; 15580 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x15c>
   15528:	eb003cb4 	bl	24800 <assertion_failed>
   1552c:	eb0045a6 	bl	26bcc <CLogger::Get()>
   15530:	e58d7000 	str	r7, [sp]
   15534:	e59f3048 	ldr	r3, [pc, #72]	; 15584 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x160>
   15538:	e3a02002 	mov	r2, #2
   1553c:	e59f1044 	ldr	r1, [pc, #68]	; 15588 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x164>
   15540:	e1a05006 	mov	r5, r6
   15544:	eb0044dd 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15548:	eaffffea 	b	154f8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd4>
   1554c:	e3a02f76 	mov	r2, #472	; 0x1d8
   15550:	e59f1018 	ldr	r1, [pc, #24]	; 15570 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15554:	e59f0030 	ldr	r0, [pc, #48]	; 1558c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x168>
   15558:	eb003ca8 	bl	24800 <assertion_failed>
   1555c:	e59f202c 	ldr	r2, [pc, #44]	; 15590 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x16c>
   15560:	e59f1008 	ldr	r1, [pc, #8]	; 15570 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x14c>
   15564:	e59f0028 	ldr	r0, [pc, #40]	; 15594 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x170>
   15568:	eb003ca4 	bl	24800 <assertion_failed>
   1556c:	000001e3 	.word	0x000001e3
   15570:	00041340 	.word	0x00041340
   15574:	000413c0 	.word	0x000413c0
   15578:	000001bf 	.word	0x000001bf
   1557c:	0004134c 	.word	0x0004134c
   15580:	00040b94 	.word	0x00040b94
   15584:	00041364 	.word	0x00041364
   15588:	00041338 	.word	0x00041338
   1558c:	000413ac 	.word	0x000413ac
   15590:	000001d7 	.word	0x000001d7
   15594:	0004137c 	.word	0x0004137c

00015598 <non-virtual thunk to CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   15598:	e2400010 	sub	r0, r0, #16
   1559c:	eaffffa0 	b	15424 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>

000155a0 <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   155a0:	e3520d19 	cmp	r2, #1600	; 0x640
   155a4:	8a00001d 	bhi	15620 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x80>
   155a8:	e92d4070 	push	{r4, r5, r6, lr}
   155ac:	e3510000 	cmp	r1, #0
   155b0:	e24dde65 	sub	sp, sp, #1616	; 0x650
   155b4:	e24dd008 	sub	sp, sp, #8
   155b8:	e1a05000 	mov	r5, r0
   155bc:	0a00001d 	beq	15638 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x98>
   155c0:	e1a04002 	mov	r4, r2
   155c4:	e3a06000 	mov	r6, #0
   155c8:	e28d0018 	add	r0, sp, #24
   155cc:	e2403008 	sub	r3, r0, #8
   155d0:	e58d300c 	str	r3, [sp, #12]
   155d4:	eb0054cd 	bl	2a910 <memcpy>
   155d8:	e5952018 	ldr	r2, [r5, #24]
   155dc:	e3843501 	orr	r3, r4, #4194304	; 0x400000
   155e0:	e1520006 	cmp	r2, r6
   155e4:	e58d6014 	str	r6, [sp, #20]
   155e8:	e58d3010 	str	r3, [sp, #16]
   155ec:	0a00000d 	beq	15628 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x88>
   155f0:	e1a00005 	mov	r0, r5
   155f4:	ebffe8bf 	bl	f8f8 <CUSBFunction::GetHost() const>
   155f8:	e5951018 	ldr	r1, [r5, #24]
   155fc:	e2843008 	add	r3, r4, #8
   15600:	e58d6000 	str	r6, [sp]
   15604:	e59d200c 	ldr	r2, [sp, #12]
   15608:	ebfff4f2 	bl	129d8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1560c:	e1e00000 	mvn	r0, r0
   15610:	e1a00fa0 	lsr	r0, r0, #31
   15614:	e28dde65 	add	sp, sp, #1616	; 0x650
   15618:	e28dd008 	add	sp, sp, #8
   1561c:	e8bd8070 	pop	{r4, r5, r6, pc}
   15620:	e3a00000 	mov	r0, #0
   15624:	e12fff1e 	bx	lr
   15628:	e59f2018 	ldr	r2, [pc, #24]	; 15648 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xa8>
   1562c:	e59f1018 	ldr	r1, [pc, #24]	; 1564c <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   15630:	e59f0018 	ldr	r0, [pc, #24]	; 15650 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb0>
   15634:	eb003c71 	bl	24800 <assertion_failed>
   15638:	e59f2014 	ldr	r2, [pc, #20]	; 15654 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb4>
   1563c:	e59f1008 	ldr	r1, [pc, #8]	; 1564c <CLAN7800Device::SendFrame(void const*, unsigned int)+0xac>
   15640:	e59f0010 	ldr	r0, [pc, #16]	; 15658 <CLAN7800Device::SendFrame(void const*, unsigned int)+0xb8>
   15644:	eb003c6d 	bl	24800 <assertion_failed>
   15648:	000001b9 	.word	0x000001b9
   1564c:	00041340 	.word	0x00041340
   15650:	000413d4 	.word	0x000413d4
   15654:	000001b2 	.word	0x000001b2
   15658:	00040b94 	.word	0x00040b94

0001565c <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)>:
   1565c:	e2400010 	sub	r0, r0, #16
   15660:	eaffffce 	b	155a0 <CLAN7800Device::SendFrame(void const*, unsigned int)>

00015664 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   15664:	e92d4010 	push	{r4, lr}
   15668:	e1a04000 	mov	r4, r0
   1566c:	ebffe82f 	bl	f730 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15670:	e3a02000 	mov	r2, #0
   15674:	e59f3024 	ldr	r3, [pc, #36]	; 156a0 <CLAN7800Device::CLAN7800Device(CUSBFunction*)+0x3c>
   15678:	e5842014 	str	r2, [r4, #20]
   1567c:	e2831008 	add	r1, r3, #8
   15680:	e2833048 	add	r3, r3, #72	; 0x48
   15684:	e5841000 	str	r1, [r4]
   15688:	e5843010 	str	r3, [r4, #16]
   1568c:	e5842018 	str	r2, [r4, #24]
   15690:	e284001c 	add	r0, r4, #28
   15694:	eb00558e 	bl	2acd4 <CMACAddress::CMACAddress()>
   15698:	e1a00004 	mov	r0, r4
   1569c:	e8bd8010 	pop	{r4, pc}
   156a0:	000412c8 	.word	0x000412c8

000156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   156a4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   156a8:	e24dd01c 	sub	sp, sp, #28
   156ac:	e28d5018 	add	r5, sp, #24
   156b0:	e1a06001 	mov	r6, r1
   156b4:	e5252004 	str	r2, [r5, #-4]!
   156b8:	e1a04000 	mov	r4, r0
   156bc:	ebffe88d 	bl	f8f8 <CUSBFunction::GetHost() const>
   156c0:	e1a07000 	mov	r7, r0
   156c4:	e1a00004 	mov	r0, r4
   156c8:	ebffe87f 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
   156cc:	e3a04000 	mov	r4, #0
   156d0:	e3a03004 	mov	r3, #4
   156d4:	e6ff2076 	uxth	r2, r6
   156d8:	e1a01000 	mov	r1, r0
   156dc:	e58d2004 	str	r2, [sp, #4]
   156e0:	e58d300c 	str	r3, [sp, #12]
   156e4:	e58d5008 	str	r5, [sp, #8]
   156e8:	e1a00007 	mov	r0, r7
   156ec:	e58d4000 	str	r4, [sp]
   156f0:	e3a030a0 	mov	r3, #160	; 0xa0
   156f4:	e3a02040 	mov	r2, #64	; 0x40
   156f8:	ebfff450 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   156fc:	e1500004 	cmp	r0, r4
   15700:	a3a00001 	movge	r0, #1
   15704:	ba000001 	blt	15710 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   15708:	e28dd01c 	add	sp, sp, #28
   1570c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15710:	eb00452d 	bl	26bcc <CLogger::Get()>
   15714:	e58d6000 	str	r6, [sp]
   15718:	e59f3014 	ldr	r3, [pc, #20]	; 15734 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x90>
   1571c:	e3a02002 	mov	r2, #2
   15720:	e59f1010 	ldr	r1, [pc, #16]	; 15738 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   15724:	eb004465 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15728:	e1a00004 	mov	r0, r4
   1572c:	e28dd01c 	add	sp, sp, #28
   15730:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15734:	000413ec 	.word	0x000413ec
   15738:	00041338 	.word	0x00041338

0001573c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   1573c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15740:	e24dd014 	sub	sp, sp, #20
   15744:	e1a05001 	mov	r5, r1
   15748:	e1a07002 	mov	r7, r2
   1574c:	e1a04000 	mov	r4, r0
   15750:	ebffe868 	bl	f8f8 <CUSBFunction::GetHost() const>
   15754:	e1a06000 	mov	r6, r0
   15758:	e1a00004 	mov	r0, r4
   1575c:	ebffe85a 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
   15760:	e3a04000 	mov	r4, #0
   15764:	e3a03004 	mov	r3, #4
   15768:	e6ffc075 	uxth	ip, r5
   1576c:	e1a01000 	mov	r1, r0
   15770:	e58d300c 	str	r3, [sp, #12]
   15774:	e58d7008 	str	r7, [sp, #8]
   15778:	e58dc004 	str	ip, [sp, #4]
   1577c:	e1a00006 	mov	r0, r6
   15780:	e58d4000 	str	r4, [sp]
   15784:	e3a030a1 	mov	r3, #161	; 0xa1
   15788:	e3a020c0 	mov	r2, #192	; 0xc0
   1578c:	ebfff42b 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   15790:	e3500004 	cmp	r0, #4
   15794:	03a00001 	moveq	r0, #1
   15798:	0a000006 	beq	157b8 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x7c>
   1579c:	eb00450a 	bl	26bcc <CLogger::Get()>
   157a0:	e58d5000 	str	r5, [sp]
   157a4:	e59f3014 	ldr	r3, [pc, #20]	; 157c0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x84>
   157a8:	e3a02002 	mov	r2, #2
   157ac:	e59f1010 	ldr	r1, [pc, #16]	; 157c4 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x88>
   157b0:	eb004442 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   157b4:	e1a00004 	mov	r0, r4
   157b8:	e28dd014 	add	sp, sp, #20
   157bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   157c0:	00041408 	.word	0x00041408
   157c4:	00041338 	.word	0x00041338

000157c8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   157c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157cc:	e24dd00c 	sub	sp, sp, #12
   157d0:	e1a08000 	mov	r8, r0
   157d4:	e1a09001 	mov	r9, r1
   157d8:	e1a0a002 	mov	sl, r2
   157dc:	e1a0b003 	mov	fp, r3
   157e0:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   157e4:	e59d6034 	ldr	r6, [sp, #52]	; 0x34
   157e8:	eb0051c4 	bl	29f00 <CTimer::Get()>
   157ec:	e2505000 	subs	r5, r0, #0
   157f0:	0a000019 	beq	1585c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x94>
   157f4:	eb004f0b 	bl	29428 <CTimer::GetTicks() const>
   157f8:	e1a07000 	mov	r7, r0
   157fc:	ea00000e 	b	1583c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   15800:	e1a00005 	mov	r0, r5
   15804:	eb004f07 	bl	29428 <CTimer::GetTicks() const>
   15808:	e0400007 	sub	r0, r0, r7
   1580c:	e1500006 	cmp	r0, r6
   15810:	2a00000e 	bcs	15850 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   15814:	e28d2004 	add	r2, sp, #4
   15818:	e1a01009 	mov	r1, r9
   1581c:	e1a00008 	mov	r0, r8
   15820:	ebffffc5 	bl	1573c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15824:	e3500000 	cmp	r0, #0
   15828:	0a000008 	beq	15850 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   1582c:	e59d3004 	ldr	r3, [sp, #4]
   15830:	e003300a 	and	r3, r3, sl
   15834:	e153000b 	cmp	r3, fp
   15838:	0a000005 	beq	15854 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   1583c:	e3540000 	cmp	r4, #0
   15840:	0affffee 	beq	15800 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   15844:	e1a00004 	mov	r0, r4
   15848:	eb00517a 	bl	29e38 <CTimer::SimpleusDelay(unsigned int)>
   1584c:	eaffffeb 	b	15800 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   15850:	e3a00000 	mov	r0, #0
   15854:	e28dd00c 	add	sp, sp, #12
   15858:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1585c:	e59f2008 	ldr	r2, [pc, #8]	; 1586c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa4>
   15860:	e59f1008 	ldr	r1, [pc, #8]	; 15870 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa8>
   15864:	e59f0008 	ldr	r0, [pc, #8]	; 15874 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xac>
   15868:	eb003be4 	bl	24800 <assertion_failed>
   1586c:	0000028e 	.word	0x0000028e
   15870:	00041340 	.word	0x00041340
   15874:	00041424 	.word	0x00041424

00015878 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   15878:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1587c:	e351001f 	cmp	r1, #31
   15880:	e24dd008 	sub	sp, sp, #8
   15884:	ca000025 	bgt	15920 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xa8>
   15888:	e3a05000 	mov	r5, #0
   1588c:	e3a06064 	mov	r6, #100	; 0x64
   15890:	e1a04001 	mov	r4, r1
   15894:	e1a08002 	mov	r8, r2
   15898:	e88d0060 	stm	sp, {r5, r6}
   1589c:	e1a03005 	mov	r3, r5
   158a0:	e3a02001 	mov	r2, #1
   158a4:	e3a01e12 	mov	r1, #288	; 0x120
   158a8:	e1a07000 	mov	r7, r0
   158ac:	ebffffc5 	bl	157c8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   158b0:	e1500005 	cmp	r0, r5
   158b4:	1a000002 	bne	158c4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x4c>
   158b8:	e3a00000 	mov	r0, #0
   158bc:	e28dd008 	add	sp, sp, #8
   158c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   158c4:	e1a02008 	mov	r2, r8
   158c8:	e3a01f49 	mov	r1, #292	; 0x124
   158cc:	e1a00007 	mov	r0, r7
   158d0:	ebffff73 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   158d4:	e3500000 	cmp	r0, #0
   158d8:	0afffff6 	beq	158b8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   158dc:	e1a02304 	lsl	r2, r4, #6
   158e0:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   158e4:	e3822b02 	orr	r2, r2, #2048	; 0x800
   158e8:	e3822003 	orr	r2, r2, #3
   158ec:	e3a01e12 	mov	r1, #288	; 0x120
   158f0:	e1a00007 	mov	r0, r7
   158f4:	ebffff6a 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   158f8:	e3500000 	cmp	r0, #0
   158fc:	0affffed 	beq	158b8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x40>
   15900:	e88d0060 	stm	sp, {r5, r6}
   15904:	e1a03005 	mov	r3, r5
   15908:	e1a00007 	mov	r0, r7
   1590c:	e3a02001 	mov	r2, #1
   15910:	e3a01e12 	mov	r1, #288	; 0x120
   15914:	ebffffab 	bl	157c8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15918:	e28dd008 	add	sp, sp, #8
   1591c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15920:	e59f2008 	ldr	r2, [pc, #8]	; 15930 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb8>
   15924:	e59f1008 	ldr	r1, [pc, #8]	; 15934 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xbc>
   15928:	e59f0008 	ldr	r0, [pc, #8]	; 15938 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xc0>
   1592c:	eb003bb3 	bl	24800 <assertion_failed>
   15930:	00000259 	.word	0x00000259
   15934:	00041340 	.word	0x00041340
   15938:	00041430 	.word	0x00041430

0001593c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   1593c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   15940:	e351001f 	cmp	r1, #31
   15944:	e24dd010 	sub	sp, sp, #16
   15948:	ca00002f 	bgt	15a0c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd0>
   1594c:	e3a05000 	mov	r5, #0
   15950:	e3a06064 	mov	r6, #100	; 0x64
   15954:	e1a04001 	mov	r4, r1
   15958:	e1a08002 	mov	r8, r2
   1595c:	e88d0060 	stm	sp, {r5, r6}
   15960:	e1a03005 	mov	r3, r5
   15964:	e3a02001 	mov	r2, #1
   15968:	e3a01e12 	mov	r1, #288	; 0x120
   1596c:	e1a07000 	mov	r7, r0
   15970:	ebffff94 	bl	157c8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15974:	e3500000 	cmp	r0, #0
   15978:	1a000001 	bne	15984 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x48>
   1597c:	e28dd010 	add	sp, sp, #16
   15980:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15984:	e1a02304 	lsl	r2, r4, #6
   15988:	e2022d1f 	and	r2, r2, #1984	; 0x7c0
   1598c:	e3822b02 	orr	r2, r2, #2048	; 0x800
   15990:	e3822001 	orr	r2, r2, #1
   15994:	e3a01e12 	mov	r1, #288	; 0x120
   15998:	e1a00007 	mov	r0, r7
   1599c:	ebffff40 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   159a0:	e1500005 	cmp	r0, r5
   159a4:	1a000002 	bne	159b4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x78>
   159a8:	e3a00000 	mov	r0, #0
   159ac:	e28dd010 	add	sp, sp, #16
   159b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   159b4:	e88d0060 	stm	sp, {r5, r6}
   159b8:	e1a03005 	mov	r3, r5
   159bc:	e3a02001 	mov	r2, #1
   159c0:	e3a01e12 	mov	r1, #288	; 0x120
   159c4:	e1a00007 	mov	r0, r7
   159c8:	ebffff7e 	bl	157c8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   159cc:	e3500000 	cmp	r0, #0
   159d0:	0afffff4 	beq	159a8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x6c>
   159d4:	e1a00007 	mov	r0, r7
   159d8:	e28d200c 	add	r2, sp, #12
   159dc:	e3a01f49 	mov	r1, #292	; 0x124
   159e0:	ebffff55 	bl	1573c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   159e4:	e3500000 	cmp	r0, #0
   159e8:	0affffee 	beq	159a8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x6c>
   159ec:	e3580000 	cmp	r8, #0
   159f0:	159d300c 	ldrne	r3, [sp, #12]
   159f4:	11c830b0 	strhne	r3, [r8]
   159f8:	1affffdf 	bne	1597c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x40>
   159fc:	e3a02fa1 	mov	r2, #644	; 0x284
   15a00:	e59f1014 	ldr	r1, [pc, #20]	; 15a1c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe0>
   15a04:	e59f0014 	ldr	r0, [pc, #20]	; 15a20 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe4>
   15a08:	eb003b7c 	bl	24800 <assertion_failed>
   15a0c:	e3a02e27 	mov	r2, #624	; 0x270
   15a10:	e59f1004 	ldr	r1, [pc, #4]	; 15a1c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe0>
   15a14:	e59f0008 	ldr	r0, [pc, #8]	; 15a24 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe8>
   15a18:	eb003b78 	bl	24800 <assertion_failed>
   15a1c:	00041340 	.word	0x00041340
   15a20:	00041440 	.word	0x00041440
   15a24:	00041430 	.word	0x00041430

00015a28 <CLAN7800Device::IsLinkUp()>:
   15a28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   15a2c:	e24dd00c 	sub	sp, sp, #12
   15a30:	e28d2006 	add	r2, sp, #6
   15a34:	e3a01001 	mov	r1, #1
   15a38:	ebffffbf 	bl	1593c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15a3c:	e3500000 	cmp	r0, #0
   15a40:	11dd00b6 	ldrhne	r0, [sp, #6]
   15a44:	11a00120 	lsrne	r0, r0, #2
   15a48:	12000001 	andne	r0, r0, #1
   15a4c:	e28dd00c 	add	sp, sp, #12
   15a50:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015a54 <non-virtual thunk to CLAN7800Device::IsLinkUp()>:
   15a54:	e2400010 	sub	r0, r0, #16
   15a58:	eafffff2 	b	15a28 <CLAN7800Device::IsLinkUp()>

00015a5c <CLAN7800Device::GetLinkSpeed()>:
   15a5c:	e92d4010 	push	{r4, lr}
   15a60:	e3a02000 	mov	r2, #0
   15a64:	e24dd008 	sub	sp, sp, #8
   15a68:	e3a0101f 	mov	r1, #31
   15a6c:	e1a04000 	mov	r4, r0
   15a70:	ebffff80 	bl	15878 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15a74:	e3500000 	cmp	r0, #0
   15a78:	1a000002 	bne	15a88 <CLAN7800Device::GetLinkSpeed()+0x2c>
   15a7c:	e3a00006 	mov	r0, #6
   15a80:	e28dd008 	add	sp, sp, #8
   15a84:	e8bd8010 	pop	{r4, pc}
   15a88:	e1a00004 	mov	r0, r4
   15a8c:	e28d2006 	add	r2, sp, #6
   15a90:	e3a0101c 	mov	r1, #28
   15a94:	ebffffa8 	bl	1593c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15a98:	e3500000 	cmp	r0, #0
   15a9c:	0afffff6 	beq	15a7c <CLAN7800Device::GetLinkSpeed()+0x20>
   15aa0:	e1dd30b6 	ldrh	r3, [sp, #6]
   15aa4:	e3130901 	tst	r3, #16384	; 0x4000
   15aa8:	1a00000d 	bne	15ae4 <CLAN7800Device::GetLinkSpeed()+0x88>
   15aac:	e3130902 	tst	r3, #32768	; 0x8000
   15ab0:	0afffff1 	beq	15a7c <CLAN7800Device::GetLinkSpeed()+0x20>
   15ab4:	e1a031c3 	asr	r3, r3, #3
   15ab8:	e2033007 	and	r3, r3, #7
   15abc:	e3530006 	cmp	r3, #6
   15ac0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   15ac4:	eaffffec 	b	15a7c <CLAN7800Device::GetLinkSpeed()+0x20>
   15ac8:	00015af4 	.word	0x00015af4
   15acc:	00015afc 	.word	0x00015afc
   15ad0:	00015b1c 	.word	0x00015b1c
   15ad4:	00015a7c 	.word	0x00015a7c
   15ad8:	00015b14 	.word	0x00015b14
   15adc:	00015b0c 	.word	0x00015b0c
   15ae0:	00015b04 	.word	0x00015b04
   15ae4:	e59f2038 	ldr	r2, [pc, #56]	; 15b24 <CLAN7800Device::GetLinkSpeed()+0xc8>
   15ae8:	e59f1038 	ldr	r1, [pc, #56]	; 15b28 <CLAN7800Device::GetLinkSpeed()+0xcc>
   15aec:	e59f0038 	ldr	r0, [pc, #56]	; 15b2c <CLAN7800Device::GetLinkSpeed()+0xd0>
   15af0:	eb003b42 	bl	24800 <assertion_failed>
   15af4:	e3a00000 	mov	r0, #0
   15af8:	eaffffe0 	b	15a80 <CLAN7800Device::GetLinkSpeed()+0x24>
   15afc:	e3a00002 	mov	r0, #2
   15b00:	eaffffde 	b	15a80 <CLAN7800Device::GetLinkSpeed()+0x24>
   15b04:	e3a00005 	mov	r0, #5
   15b08:	eaffffdc 	b	15a80 <CLAN7800Device::GetLinkSpeed()+0x24>
   15b0c:	e3a00003 	mov	r0, #3
   15b10:	eaffffda 	b	15a80 <CLAN7800Device::GetLinkSpeed()+0x24>
   15b14:	e3a00001 	mov	r0, #1
   15b18:	eaffffd8 	b	15a80 <CLAN7800Device::GetLinkSpeed()+0x24>
   15b1c:	e3a00004 	mov	r0, #4
   15b20:	eaffffd6 	b	15a80 <CLAN7800Device::GetLinkSpeed()+0x24>
   15b24:	00000203 	.word	0x00000203
   15b28:	00041340 	.word	0x00041340
   15b2c:	0004144c 	.word	0x0004144c

00015b30 <non-virtual thunk to CLAN7800Device::GetLinkSpeed()>:
   15b30:	e2400010 	sub	r0, r0, #16
   15b34:	eaffffc8 	b	15a5c <CLAN7800Device::GetLinkSpeed()>

00015b38 <CLAN7800Device::InitPHY()>:
   15b38:	e92d4010 	push	{r4, lr}
   15b3c:	e3a02000 	mov	r2, #0
   15b40:	e24dd008 	sub	sp, sp, #8
   15b44:	e3a0101f 	mov	r1, #31
   15b48:	e1a04000 	mov	r4, r0
   15b4c:	ebffff49 	bl	15878 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15b50:	e3500000 	cmp	r0, #0
   15b54:	1a000001 	bne	15b60 <CLAN7800Device::InitPHY()+0x28>
   15b58:	e28dd008 	add	sp, sp, #8
   15b5c:	e8bd8010 	pop	{r4, pc}
   15b60:	e28d2006 	add	r2, sp, #6
   15b64:	e3a0101d 	mov	r1, #29
   15b68:	e1a00004 	mov	r0, r4
   15b6c:	ebffff72 	bl	1593c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   15b70:	e3500000 	cmp	r0, #0
   15b74:	0afffff7 	beq	15b58 <CLAN7800Device::InitPHY()+0x20>
   15b78:	e1dd30b6 	ldrh	r3, [sp, #6]
   15b7c:	e1a00004 	mov	r0, r4
   15b80:	e3c330ff 	bic	r3, r3, #255	; 0xff
   15b84:	e3833061 	orr	r3, r3, #97	; 0x61
   15b88:	e1a02003 	mov	r2, r3
   15b8c:	e3a0101d 	mov	r1, #29
   15b90:	e1cd30b6 	strh	r3, [sp, #6]
   15b94:	ebffff37 	bl	15878 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   15b98:	e28dd008 	add	sp, sp, #8
   15b9c:	e8bd8010 	pop	{r4, pc}

00015ba0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   15ba0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15ba4:	e24dd00c 	sub	sp, sp, #12
   15ba8:	e1a06002 	mov	r6, r2
   15bac:	e28d2004 	add	r2, sp, #4
   15bb0:	e1a04003 	mov	r4, r3
   15bb4:	e1a05000 	mov	r5, r0
   15bb8:	e1a07001 	mov	r7, r1
   15bbc:	ebfffede 	bl	1573c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15bc0:	e3500000 	cmp	r0, #0
   15bc4:	0a000007 	beq	15be8 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x48>
   15bc8:	e59d3004 	ldr	r3, [sp, #4]
   15bcc:	e1a01007 	mov	r1, r7
   15bd0:	e0044003 	and	r4, r4, r3
   15bd4:	e1844006 	orr	r4, r4, r6
   15bd8:	e1a00005 	mov	r0, r5
   15bdc:	e1a02004 	mov	r2, r4
   15be0:	e58d4004 	str	r4, [sp, #4]
   15be4:	ebfffeae 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15be8:	e28dd00c 	add	sp, sp, #12
   15bec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00015bf0 <CLAN7800Device::InitMACAddress()>:
   15bf0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15bf4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   15bf8:	e3a01000 	mov	r1, #0
   15bfc:	e1a04000 	mov	r4, r0
   15c00:	e28d000c 	add	r0, sp, #12
   15c04:	eb003b1e 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   15c08:	e3a03000 	mov	r3, #0
   15c0c:	e28d000c 	add	r0, sp, #12
   15c10:	e58d3000 	str	r3, [sp]
   15c14:	e28d2024 	add	r2, sp, #36	; 0x24
   15c18:	e3a03014 	mov	r3, #20
   15c1c:	e59f10e0 	ldr	r1, [pc, #224]	; 15d04 <CLAN7800Device::InitMACAddress()+0x114>
   15c20:	eb003b23 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   15c24:	e3500000 	cmp	r0, #0
   15c28:	1a000005 	bne	15c44 <CLAN7800Device::InitMACAddress()+0x54>
   15c2c:	e3a04000 	mov	r4, #0
   15c30:	e28d000c 	add	r0, sp, #12
   15c34:	eb003b19 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   15c38:	e1a00004 	mov	r0, r4
   15c3c:	e28dd03c 	add	sp, sp, #60	; 0x3c
   15c40:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   15c44:	e284601c 	add	r6, r4, #28
   15c48:	e1a00006 	mov	r0, r6
   15c4c:	e28d1030 	add	r1, sp, #48	; 0x30
   15c50:	eb005440 	bl	2ad58 <CMACAddress::Set(unsigned char const*)>
   15c54:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   15c58:	e3a01f47 	mov	r1, #284	; 0x11c
   15c5c:	e1a02005 	mov	r2, r5
   15c60:	e1a00004 	mov	r0, r4
   15c64:	e1dd73b4 	ldrh	r7, [sp, #52]	; 0x34
   15c68:	ebfffe8d 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15c6c:	e3500000 	cmp	r0, #0
   15c70:	0affffed 	beq	15c2c <CLAN7800Device::InitMACAddress()+0x3c>
   15c74:	e1a02007 	mov	r2, r7
   15c78:	e3a01f46 	mov	r1, #280	; 0x118
   15c7c:	e1a00004 	mov	r0, r4
   15c80:	ebfffe87 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15c84:	e3500000 	cmp	r0, #0
   15c88:	0affffe7 	beq	15c2c <CLAN7800Device::InitMACAddress()+0x3c>
   15c8c:	e1a02005 	mov	r2, r5
   15c90:	e59f1070 	ldr	r1, [pc, #112]	; 15d08 <CLAN7800Device::InitMACAddress()+0x118>
   15c94:	e1a00004 	mov	r0, r4
   15c98:	ebfffe81 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15c9c:	e3500000 	cmp	r0, #0
   15ca0:	0affffe1 	beq	15c2c <CLAN7800Device::InitMACAddress()+0x3c>
   15ca4:	e1a00004 	mov	r0, r4
   15ca8:	e3872102 	orr	r2, r7, #-2147483648	; 0x80000000
   15cac:	e3a01b01 	mov	r1, #1024	; 0x400
   15cb0:	ebfffe7b 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15cb4:	e2504000 	subs	r4, r0, #0
   15cb8:	0affffdb 	beq	15c2c <CLAN7800Device::InitMACAddress()+0x3c>
   15cbc:	e28d0014 	add	r0, sp, #20
   15cc0:	eb0047a7 	bl	27b64 <CString::CString()>
   15cc4:	e28d1014 	add	r1, sp, #20
   15cc8:	e1a00006 	mov	r0, r6
   15ccc:	eb00547a 	bl	2aebc <CMACAddress::Format(CString*) const>
   15cd0:	eb0043bd 	bl	26bcc <CLogger::Get()>
   15cd4:	e1a05000 	mov	r5, r0
   15cd8:	e28d0014 	add	r0, sp, #20
   15cdc:	eb0047b6 	bl	27bbc <CString::operator char const*() const>
   15ce0:	e59f3024 	ldr	r3, [pc, #36]	; 15d0c <CLAN7800Device::InitMACAddress()+0x11c>
   15ce4:	e58d0000 	str	r0, [sp]
   15ce8:	e3a02004 	mov	r2, #4
   15cec:	e1a00005 	mov	r0, r5
   15cf0:	e59f1018 	ldr	r1, [pc, #24]	; 15d10 <CLAN7800Device::InitMACAddress()+0x120>
   15cf4:	eb0042f1 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15cf8:	e28d0014 	add	r0, sp, #20
   15cfc:	eb004765 	bl	27a98 <CString::~CString()>
   15d00:	eaffffca 	b	15c30 <CLAN7800Device::InitMACAddress()+0x40>
   15d04:	00010003 	.word	0x00010003
   15d08:	00000404 	.word	0x00000404
   15d0c:	00041474 	.word	0x00041474
   15d10:	00041338 	.word	0x00041338

00015d14 <CLAN7800Device::Configure()>:
   15d14:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   15d18:	e24dd014 	sub	sp, sp, #20
   15d1c:	e1a05000 	mov	r5, r0
   15d20:	ebffe6d2 	bl	f870 <CUSBFunction::GetNumEndpoints() const>
   15d24:	e3500003 	cmp	r0, #3
   15d28:	03a06005 	moveq	r6, #5
   15d2c:	03a07014 	moveq	r7, #20
   15d30:	0a000004 	beq	15d48 <CLAN7800Device::Configure()+0x34>
   15d34:	ea000034 	b	15e0c <CLAN7800Device::Configure()+0xf8>
   15d38:	e5d43003 	ldrb	r3, [r4, #3]
   15d3c:	e203303f 	and	r3, r3, #63	; 0x3f
   15d40:	e3530002 	cmp	r3, #2
   15d44:	0a00001f 	beq	15dc8 <CLAN7800Device::Configure()+0xb4>
   15d48:	e1a01006 	mov	r1, r6
   15d4c:	e1a00005 	mov	r0, r5
   15d50:	ebffe6f3 	bl	f924 <CUSBFunction::GetDescriptor(unsigned char)>
   15d54:	e2504000 	subs	r4, r0, #0
   15d58:	1afffff6 	bne	15d38 <CLAN7800Device::Configure()+0x24>
   15d5c:	e5953014 	ldr	r3, [r5, #20]
   15d60:	e1a00005 	mov	r0, r5
   15d64:	e3530000 	cmp	r3, #0
   15d68:	0a00004f 	beq	15eac <CLAN7800Device::Configure()+0x198>
   15d6c:	e5953018 	ldr	r3, [r5, #24]
   15d70:	e3530000 	cmp	r3, #0
   15d74:	0a00004c 	beq	15eac <CLAN7800Device::Configure()+0x198>
   15d78:	ebffe604 	bl	f590 <CUSBFunction::Configure()>
   15d7c:	e2506000 	subs	r6, r0, #0
   15d80:	0a00004f 	beq	15ec4 <CLAN7800Device::Configure()+0x1b0>
   15d84:	e28d200c 	add	r2, sp, #12
   15d88:	e1a01004 	mov	r1, r4
   15d8c:	e1a00005 	mov	r0, r5
   15d90:	ebfffe69 	bl	1573c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   15d94:	e3500000 	cmp	r0, #0
   15d98:	1a000030 	bne	15e60 <CLAN7800Device::Configure()+0x14c>
   15d9c:	eb00438a 	bl	26bcc <CLogger::Get()>
   15da0:	e1dd20be 	ldrh	r2, [sp, #14]
   15da4:	e59f33c0 	ldr	r3, [pc, #960]	; 1616c <CLAN7800Device::Configure()+0x458>
   15da8:	e58d2000 	str	r2, [sp]
   15dac:	e59f13bc 	ldr	r1, [pc, #956]	; 16170 <CLAN7800Device::Configure()+0x45c>
   15db0:	e3a02001 	mov	r2, #1
   15db4:	eb0042c1 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15db8:	e3a06000 	mov	r6, #0
   15dbc:	e1a00006 	mov	r0, r6
   15dc0:	e28dd014 	add	sp, sp, #20
   15dc4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15dc8:	e1d430d2 	ldrsb	r3, [r4, #2]
   15dcc:	e3530000 	cmp	r3, #0
   15dd0:	ba000014 	blt	15e28 <CLAN7800Device::Configure()+0x114>
   15dd4:	e5953018 	ldr	r3, [r5, #24]
   15dd8:	e1a00005 	mov	r0, r5
   15ddc:	e3530000 	cmp	r3, #0
   15de0:	1a000031 	bne	15eac <CLAN7800Device::Configure()+0x198>
   15de4:	ebffe6ad 	bl	f8a0 <CUSBFunction::GetDevice() const>
   15de8:	e1a09000 	mov	r9, r0
   15dec:	e1a00007 	mov	r0, r7
   15df0:	eb00549f 	bl	2b074 <operator new(unsigned int)>
   15df4:	e1a08000 	mov	r8, r0
   15df8:	e1a02004 	mov	r2, r4
   15dfc:	e1a01009 	mov	r1, r9
   15e00:	ebffe4e3 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15e04:	e5858018 	str	r8, [r5, #24]
   15e08:	eaffffce 	b	15d48 <CLAN7800Device::Configure()+0x34>
   15e0c:	e3a06000 	mov	r6, #0
   15e10:	e1a00005 	mov	r0, r5
   15e14:	e59f1354 	ldr	r1, [pc, #852]	; 16170 <CLAN7800Device::Configure()+0x45c>
   15e18:	ebffe6cc 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   15e1c:	e1a00006 	mov	r0, r6
   15e20:	e28dd014 	add	sp, sp, #20
   15e24:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15e28:	e5953014 	ldr	r3, [r5, #20]
   15e2c:	e1a00005 	mov	r0, r5
   15e30:	e3530000 	cmp	r3, #0
   15e34:	1a00001c 	bne	15eac <CLAN7800Device::Configure()+0x198>
   15e38:	ebffe698 	bl	f8a0 <CUSBFunction::GetDevice() const>
   15e3c:	e1a09000 	mov	r9, r0
   15e40:	e1a00007 	mov	r0, r7
   15e44:	eb00548a 	bl	2b074 <operator new(unsigned int)>
   15e48:	e1a08000 	mov	r8, r0
   15e4c:	e1a02004 	mov	r2, r4
   15e50:	e1a01009 	mov	r1, r9
   15e54:	ebffe4ce 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15e58:	e5858014 	str	r8, [r5, #20]
   15e5c:	eaffffb9 	b	15d48 <CLAN7800Device::Configure()+0x34>
   15e60:	e1dd30be 	ldrh	r3, [sp, #14]
   15e64:	e3530b1e 	cmp	r3, #30720	; 0x7800
   15e68:	1affffcb 	bne	15d9c <CLAN7800Device::Configure()+0x88>
   15e6c:	e3e03000 	mvn	r3, #0
   15e70:	e3a02002 	mov	r2, #2
   15e74:	e3a01010 	mov	r1, #16
   15e78:	e1a00005 	mov	r0, r5
   15e7c:	ebffff47 	bl	15ba0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15e80:	e3500000 	cmp	r0, #0
   15e84:	1a000016 	bne	15ee4 <CLAN7800Device::Configure()+0x1d0>
   15e88:	e3a06000 	mov	r6, #0
   15e8c:	eb00434e 	bl	26bcc <CLogger::Get()>
   15e90:	e59f32dc 	ldr	r3, [pc, #732]	; 16174 <CLAN7800Device::Configure()+0x460>
   15e94:	e3a02001 	mov	r2, #1
   15e98:	e59f12d0 	ldr	r1, [pc, #720]	; 16170 <CLAN7800Device::Configure()+0x45c>
   15e9c:	eb004287 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15ea0:	e1a00006 	mov	r0, r6
   15ea4:	e28dd014 	add	sp, sp, #20
   15ea8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15eac:	e3a06000 	mov	r6, #0
   15eb0:	e59f12b8 	ldr	r1, [pc, #696]	; 16170 <CLAN7800Device::Configure()+0x45c>
   15eb4:	ebffe6a5 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   15eb8:	e1a00006 	mov	r0, r6
   15ebc:	e28dd014 	add	sp, sp, #20
   15ec0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15ec4:	eb004340 	bl	26bcc <CLogger::Get()>
   15ec8:	e59f32a8 	ldr	r3, [pc, #680]	; 16178 <CLAN7800Device::Configure()+0x464>
   15ecc:	e3a02001 	mov	r2, #1
   15ed0:	e59f1298 	ldr	r1, [pc, #664]	; 16170 <CLAN7800Device::Configure()+0x45c>
   15ed4:	eb004279 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15ed8:	e1a00006 	mov	r0, r6
   15edc:	e28dd014 	add	sp, sp, #20
   15ee0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15ee4:	e3a01064 	mov	r1, #100	; 0x64
   15ee8:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   15eec:	e58d1004 	str	r1, [sp, #4]
   15ef0:	e58d2000 	str	r2, [sp]
   15ef4:	e1a03004 	mov	r3, r4
   15ef8:	e3a02002 	mov	r2, #2
   15efc:	e3a01010 	mov	r1, #16
   15f00:	e1a00005 	mov	r0, r5
   15f04:	ebfffe2f 	bl	157c8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   15f08:	e3500000 	cmp	r0, #0
   15f0c:	0affffdd 	beq	15e88 <CLAN7800Device::Configure()+0x174>
   15f10:	e1a00005 	mov	r0, r5
   15f14:	ebffff35 	bl	15bf0 <CLAN7800Device::InitMACAddress()>
   15f18:	e2506000 	subs	r6, r0, #0
   15f1c:	0a000052 	beq	1606c <CLAN7800Device::Configure()+0x358>
   15f20:	e3a02018 	mov	r2, #24
   15f24:	e3a01090 	mov	r1, #144	; 0x90
   15f28:	e1a00005 	mov	r0, r5
   15f2c:	ebfffddc 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15f30:	e3500000 	cmp	r0, #0
   15f34:	0affff9f 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   15f38:	e3a02b02 	mov	r2, #2048	; 0x800
   15f3c:	e3a01094 	mov	r1, #148	; 0x94
   15f40:	e1a00005 	mov	r0, r5
   15f44:	ebfffdd6 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15f48:	e3500000 	cmp	r0, #0
   15f4c:	0affff99 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   15f50:	e3e03010 	mvn	r3, #16
   15f54:	e3a02603 	mov	r2, #3145728	; 0x300000
   15f58:	e3a01010 	mov	r1, #16
   15f5c:	e1a00005 	mov	r0, r5
   15f60:	ebffff0e 	bl	15ba0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15f64:	e3500000 	cmp	r0, #0
   15f68:	0affff92 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   15f6c:	e3e03040 	mvn	r3, #64	; 0x40
   15f70:	e3a02020 	mov	r2, #32
   15f74:	e3a01080 	mov	r1, #128	; 0x80
   15f78:	e1a00005 	mov	r0, r5
   15f7c:	ebffff07 	bl	15ba0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   15f80:	e3500000 	cmp	r0, #0
   15f84:	0affff8b 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   15f88:	e3a02017 	mov	r2, #23
   15f8c:	e3a010c8 	mov	r1, #200	; 0xc8
   15f90:	e1a00005 	mov	r0, r5
   15f94:	ebfffdc2 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15f98:	e3500000 	cmp	r0, #0
   15f9c:	0affff85 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   15fa0:	e3a02017 	mov	r2, #23
   15fa4:	e3a010cc 	mov	r1, #204	; 0xcc
   15fa8:	e1a00005 	mov	r0, r5
   15fac:	ebfffdbc 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15fb0:	e3500000 	cmp	r0, #0
   15fb4:	0affff7f 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   15fb8:	e3a02000 	mov	r2, #0
   15fbc:	e3a01098 	mov	r1, #152	; 0x98
   15fc0:	e1a00005 	mov	r0, r5
   15fc4:	ebfffdb6 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15fc8:	e3500000 	cmp	r0, #0
   15fcc:	0affff79 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   15fd0:	e3e02000 	mvn	r2, #0
   15fd4:	e3a0100c 	mov	r1, #12
   15fd8:	e1a00005 	mov	r0, r5
   15fdc:	ebfffdb0 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15fe0:	e3500000 	cmp	r0, #0
   15fe4:	0affff73 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   15fe8:	e3a02000 	mov	r2, #0
   15fec:	e3a01f43 	mov	r1, #268	; 0x10c
   15ff0:	e1a00005 	mov	r0, r5
   15ff4:	ebfffdaa 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   15ff8:	e3500000 	cmp	r0, #0
   15ffc:	0affff6d 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   16000:	e3a02000 	mov	r2, #0
   16004:	e3a010d0 	mov	r1, #208	; 0xd0
   16008:	e1a00005 	mov	r0, r5
   1600c:	ebfffda4 	bl	156a4 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   16010:	e3500000 	cmp	r0, #0
   16014:	0affff67 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   16018:	e3e03000 	mvn	r3, #0
   1601c:	e59f2158 	ldr	r2, [pc, #344]	; 1617c <CLAN7800Device::Configure()+0x468>
   16020:	e3a010b0 	mov	r1, #176	; 0xb0
   16024:	e1a00005 	mov	r0, r5
   16028:	ebfffedc 	bl	15ba0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1602c:	e3500000 	cmp	r0, #0
   16030:	0affff60 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   16034:	e3e03000 	mvn	r3, #0
   16038:	e3a02010 	mov	r2, #16
   1603c:	e3a01014 	mov	r1, #20
   16040:	e1a00005 	mov	r0, r5
   16044:	ebfffed5 	bl	15ba0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16048:	e3500000 	cmp	r0, #0
   1604c:	1a00000c 	bne	16084 <CLAN7800Device::Configure()+0x370>
   16050:	eb0042dd 	bl	26bcc <CLogger::Get()>
   16054:	e59f3124 	ldr	r3, [pc, #292]	; 16180 <CLAN7800Device::Configure()+0x46c>
   16058:	e3a02001 	mov	r2, #1
   1605c:	e59f110c 	ldr	r1, [pc, #268]	; 16170 <CLAN7800Device::Configure()+0x45c>
   16060:	eb004216 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16064:	e3a06000 	mov	r6, #0
   16068:	eaffff53 	b	15dbc <CLAN7800Device::Configure()+0xa8>
   1606c:	eb0042d6 	bl	26bcc <CLogger::Get()>
   16070:	e59f310c 	ldr	r3, [pc, #268]	; 16184 <CLAN7800Device::Configure()+0x470>
   16074:	e3a02001 	mov	r2, #1
   16078:	e59f10f0 	ldr	r1, [pc, #240]	; 16170 <CLAN7800Device::Configure()+0x45c>
   1607c:	eb00420f 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16080:	eaffff4d 	b	15dbc <CLAN7800Device::Configure()+0xa8>
   16084:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   16088:	e3a03064 	mov	r3, #100	; 0x64
   1608c:	e3a01014 	mov	r1, #20
   16090:	e88d000c 	stm	sp, {r2, r3}
   16094:	e1a00005 	mov	r0, r5
   16098:	e3a03080 	mov	r3, #128	; 0x80
   1609c:	e3a02090 	mov	r2, #144	; 0x90
   160a0:	ebfffdc8 	bl	157c8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   160a4:	e3500000 	cmp	r0, #0
   160a8:	0affffe8 	beq	16050 <CLAN7800Device::Configure()+0x33c>
   160ac:	e3e03000 	mvn	r3, #0
   160b0:	e3a02b06 	mov	r2, #6144	; 0x1800
   160b4:	e3a01c01 	mov	r1, #256	; 0x100
   160b8:	e1a00005 	mov	r0, r5
   160bc:	ebfffeb7 	bl	15ba0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   160c0:	e3500000 	cmp	r0, #0
   160c4:	0affff3b 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   160c8:	e3e03000 	mvn	r3, #0
   160cc:	e3a02001 	mov	r2, #1
   160d0:	e3a01f42 	mov	r1, #264	; 0x108
   160d4:	e1a00005 	mov	r0, r5
   160d8:	ebfffeb0 	bl	15ba0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   160dc:	e3500000 	cmp	r0, #0
   160e0:	0affff34 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   160e4:	e3e03000 	mvn	r3, #0
   160e8:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   160ec:	e3a010c4 	mov	r1, #196	; 0xc4
   160f0:	e1a00005 	mov	r0, r5
   160f4:	ebfffea9 	bl	15ba0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   160f8:	e3500000 	cmp	r0, #0
   160fc:	0affff2d 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   16100:	e59f3080 	ldr	r3, [pc, #128]	; 16188 <CLAN7800Device::Configure()+0x474>
   16104:	e59f2080 	ldr	r2, [pc, #128]	; 1618c <CLAN7800Device::Configure()+0x478>
   16108:	e3a01f41 	mov	r1, #260	; 0x104
   1610c:	e1a00005 	mov	r0, r5
   16110:	ebfffea2 	bl	15ba0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16114:	e3500000 	cmp	r0, #0
   16118:	0affff26 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   1611c:	e3e03000 	mvn	r3, #0
   16120:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   16124:	e3a010c0 	mov	r1, #192	; 0xc0
   16128:	e1a00005 	mov	r0, r5
   1612c:	ebfffe9b 	bl	15ba0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   16130:	e3500000 	cmp	r0, #0
   16134:	0affff1f 	beq	15db8 <CLAN7800Device::Configure()+0xa4>
   16138:	e1a00005 	mov	r0, r5
   1613c:	ebfffe7d 	bl	15b38 <CLAN7800Device::InitPHY()>
   16140:	e2506000 	subs	r6, r0, #0
   16144:	0a000002 	beq	16154 <CLAN7800Device::Configure()+0x440>
   16148:	e2850010 	add	r0, r5, #16
   1614c:	eb00537b 	bl	2af40 <CNetDevice::AddNetDevice()>
   16150:	eaffff19 	b	15dbc <CLAN7800Device::Configure()+0xa8>
   16154:	eb00429c 	bl	26bcc <CLogger::Get()>
   16158:	e59f3030 	ldr	r3, [pc, #48]	; 16190 <CLAN7800Device::Configure()+0x47c>
   1615c:	e3a02001 	mov	r2, #1
   16160:	e59f1008 	ldr	r1, [pc, #8]	; 16170 <CLAN7800Device::Configure()+0x45c>
   16164:	eb0041d5 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16168:	eaffff13 	b	15dbc <CLAN7800Device::Configure()+0xa8>
   1616c:	000414c0 	.word	0x000414c0
   16170:	00041338 	.word	0x00041338
   16174:	00041488 	.word	0x00041488
   16178:	0004030c 	.word	0x0004030c
   1617c:	00000402 	.word	0x00000402
   16180:	000414d8 	.word	0x000414d8
   16184:	00041498 	.word	0x00041498
   16188:	c000ffff 	.word	0xc000ffff
   1618c:	05ee0001 	.word	0x05ee0001
   16190:	000414b0 	.word	0x000414b0

00016194 <CNetDevice::GetType()>:
   16194:	e3a00000 	mov	r0, #0
   16198:	e12fff1e 	bx	lr

0001619c <CNetDevice::IsSendFrameAdvisable()>:
   1619c:	e3a00001 	mov	r0, #1
   161a0:	e12fff1e 	bx	lr

000161a4 <CNetDevice::UpdatePHY()>:
   161a4:	e3a00000 	mov	r0, #0
   161a8:	e12fff1e 	bx	lr

000161ac <CSMSC951xDevice::GetMACAddress() const>:
   161ac:	e280001c 	add	r0, r0, #28
   161b0:	e12fff1e 	bx	lr

000161b4 <non-virtual thunk to CSMSC951xDevice::GetMACAddress() const>:
   161b4:	e2400010 	sub	r0, r0, #16
   161b8:	eafffffb 	b	161ac <CSMSC951xDevice::GetMACAddress() const>

000161bc <CSMSC951xDevice::~CSMSC951xDevice()>:
   161bc:	e92d4070 	push	{r4, r5, r6, lr}
   161c0:	e59f3074 	ldr	r3, [pc, #116]	; 1623c <CSMSC951xDevice::~CSMSC951xDevice()+0x80>
   161c4:	e5905018 	ldr	r5, [r0, #24]
   161c8:	e2832040 	add	r2, r3, #64	; 0x40
   161cc:	e3550000 	cmp	r5, #0
   161d0:	e1a04000 	mov	r4, r0
   161d4:	e5803000 	str	r3, [r0]
   161d8:	e5802010 	str	r2, [r0, #16]
   161dc:	0a000004 	beq	161f4 <CSMSC951xDevice::~CSMSC951xDevice()+0x38>
   161e0:	e1a00005 	mov	r0, r5
   161e4:	ebffe454 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   161e8:	e1a00005 	mov	r0, r5
   161ec:	e3a01014 	mov	r1, #20
   161f0:	eb0053ad 	bl	2b0ac <operator delete(void*, unsigned int)>
   161f4:	e3a03000 	mov	r3, #0
   161f8:	e5945014 	ldr	r5, [r4, #20]
   161fc:	e5843018 	str	r3, [r4, #24]
   16200:	e1550003 	cmp	r5, r3
   16204:	0a000004 	beq	1621c <CSMSC951xDevice::~CSMSC951xDevice()+0x60>
   16208:	e1a00005 	mov	r0, r5
   1620c:	ebffe44a 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   16210:	e1a00005 	mov	r0, r5
   16214:	e3a01014 	mov	r1, #20
   16218:	eb0053a3 	bl	2b0ac <operator delete(void*, unsigned int)>
   1621c:	e3a03000 	mov	r3, #0
   16220:	e284001c 	add	r0, r4, #28
   16224:	e5843014 	str	r3, [r4, #20]
   16228:	eb0052ac 	bl	2ace0 <CMACAddress::~CMACAddress()>
   1622c:	e1a00004 	mov	r0, r4
   16230:	ebffe4ad 	bl	f4ec <CUSBFunction::~CUSBFunction()>
   16234:	e1a00004 	mov	r0, r4
   16238:	e8bd8070 	pop	{r4, r5, r6, pc}
   1623c:	000414f4 	.word	0x000414f4

00016240 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   16240:	e2400010 	sub	r0, r0, #16
   16244:	eaffffdc 	b	161bc <CSMSC951xDevice::~CSMSC951xDevice()>

00016248 <CSMSC951xDevice::~CSMSC951xDevice()>:
   16248:	e92d4010 	push	{r4, lr}
   1624c:	e1a04000 	mov	r4, r0
   16250:	ebffffd9 	bl	161bc <CSMSC951xDevice::~CSMSC951xDevice()>
   16254:	e1a00004 	mov	r0, r4
   16258:	e3a01024 	mov	r1, #36	; 0x24
   1625c:	eb005392 	bl	2b0ac <operator delete(void*, unsigned int)>
   16260:	e1a00004 	mov	r0, r4
   16264:	e8bd8010 	pop	{r4, pc}

00016268 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   16268:	e2400010 	sub	r0, r0, #16
   1626c:	eafffff5 	b	16248 <CSMSC951xDevice::~CSMSC951xDevice()>

00016270 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   16270:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16274:	e5903014 	ldr	r3, [r0, #20]
   16278:	e24dd030 	sub	sp, sp, #48	; 0x30
   1627c:	e3530000 	cmp	r3, #0
   16280:	0a000036 	beq	16360 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf0>
   16284:	e3510000 	cmp	r1, #0
   16288:	e1a04001 	mov	r4, r1
   1628c:	0a000037 	beq	16370 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x100>
   16290:	e3a06000 	mov	r6, #0
   16294:	e1a05000 	mov	r5, r0
   16298:	e1a01003 	mov	r1, r3
   1629c:	e1a07002 	mov	r7, r2
   162a0:	e3a03d19 	mov	r3, #1600	; 0x640
   162a4:	e1a02004 	mov	r2, r4
   162a8:	e58d6000 	str	r6, [sp]
   162ac:	e28d0008 	add	r0, sp, #8
   162b0:	ebfff862 	bl	14440 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   162b4:	e1a00005 	mov	r0, r5
   162b8:	ebffe58e 	bl	f8f8 <CUSBFunction::GetHost() const>
   162bc:	e5903000 	ldr	r3, [r0]
   162c0:	e1a02006 	mov	r2, r6
   162c4:	e5933008 	ldr	r3, [r3, #8]
   162c8:	e28d1008 	add	r1, sp, #8
   162cc:	e12fff33 	blx	r3
   162d0:	e2505000 	subs	r5, r0, #0
   162d4:	0a00001b 	beq	16348 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   162d8:	e28d0008 	add	r0, sp, #8
   162dc:	ebfff88a 	bl	1450c <CUSBRequest::GetResultLength() const>
   162e0:	e3500003 	cmp	r0, #3
   162e4:	9a000017 	bls	16348 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   162e8:	e5948000 	ldr	r8, [r4]
   162ec:	e59f30cc 	ldr	r3, [pc, #204]	; 163c0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x150>
   162f0:	e0033008 	and	r3, r3, r8
   162f4:	e3530000 	cmp	r3, #0
   162f8:	1a000020 	bne	16380 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x110>
   162fc:	e59f20c0 	ldr	r2, [pc, #192]	; 163c4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x154>
   16300:	e2400004 	sub	r0, r0, #4
   16304:	e0022828 	and	r2, r2, r8, lsr #16
   16308:	e1520000 	cmp	r2, r0
   1630c:	1a000027 	bne	163b0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x140>
   16310:	e3520004 	cmp	r2, #4
   16314:	9a000021 	bls	163a0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x130>
   16318:	e2426004 	sub	r6, r2, #4
   1631c:	e1a02006 	mov	r2, r6
   16320:	e2841004 	add	r1, r4, #4
   16324:	e1a00004 	mov	r0, r4
   16328:	eb005178 	bl	2a910 <memcpy>
   1632c:	e3570000 	cmp	r7, #0
   16330:	15876000 	strne	r6, [r7]
   16334:	1a000004 	bne	1634c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   16338:	e59f2088 	ldr	r2, [pc, #136]	; 163c8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x158>
   1633c:	e59f1088 	ldr	r1, [pc, #136]	; 163cc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   16340:	e59f0088 	ldr	r0, [pc, #136]	; 163d0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x160>
   16344:	eb00392d 	bl	24800 <assertion_failed>
   16348:	e3a05000 	mov	r5, #0
   1634c:	e28d0008 	add	r0, sp, #8
   16350:	ebfff85b 	bl	144c4 <CUSBRequest::~CUSBRequest()>
   16354:	e1a00005 	mov	r0, r5
   16358:	e28dd030 	add	sp, sp, #48	; 0x30
   1635c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16360:	e59f206c 	ldr	r2, [pc, #108]	; 163d4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x164>
   16364:	e59f1060 	ldr	r1, [pc, #96]	; 163cc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   16368:	e59f0068 	ldr	r0, [pc, #104]	; 163d8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x168>
   1636c:	eb003923 	bl	24800 <assertion_failed>
   16370:	e3a02f45 	mov	r2, #276	; 0x114
   16374:	e59f1050 	ldr	r1, [pc, #80]	; 163cc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   16378:	e59f005c 	ldr	r0, [pc, #92]	; 163dc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x16c>
   1637c:	eb00391f 	bl	24800 <assertion_failed>
   16380:	eb004211 	bl	26bcc <CLogger::Get()>
   16384:	e58d8000 	str	r8, [sp]
   16388:	e59f3050 	ldr	r3, [pc, #80]	; 163e0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x170>
   1638c:	e3a02002 	mov	r2, #2
   16390:	e59f104c 	ldr	r1, [pc, #76]	; 163e4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   16394:	e1a05006 	mov	r5, r6
   16398:	eb004148 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1639c:	eaffffea 	b	1634c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   163a0:	e3a02f4b 	mov	r2, #300	; 0x12c
   163a4:	e59f1020 	ldr	r1, [pc, #32]	; 163cc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   163a8:	e59f0038 	ldr	r0, [pc, #56]	; 163e8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x178>
   163ac:	eb003913 	bl	24800 <assertion_failed>
   163b0:	e59f2034 	ldr	r2, [pc, #52]	; 163ec <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x17c>
   163b4:	e59f1010 	ldr	r1, [pc, #16]	; 163cc <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   163b8:	e59f0030 	ldr	r0, [pc, #48]	; 163f0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x180>
   163bc:	eb00390f 	bl	24800 <assertion_failed>
   163c0:	400090de 	.word	0x400090de
   163c4:	00003fff 	.word	0x00003fff
   163c8:	00000137 	.word	0x00000137
   163cc:	00041570 	.word	0x00041570
   163d0:	000413c0 	.word	0x000413c0
   163d4:	00000113 	.word	0x00000113
   163d8:	0004134c 	.word	0x0004134c
   163dc:	00040b94 	.word	0x00040b94
   163e0:	00041364 	.word	0x00041364
   163e4:	0004155c 	.word	0x0004155c
   163e8:	000413ac 	.word	0x000413ac
   163ec:	0000012b 	.word	0x0000012b
   163f0:	00041580 	.word	0x00041580

000163f4 <non-virtual thunk to CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   163f4:	e2400010 	sub	r0, r0, #16
   163f8:	eaffff9c 	b	16270 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>

000163fc <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   163fc:	e3520d19 	cmp	r2, #1600	; 0x640
   16400:	8a00001d 	bhi	1647c <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x80>
   16404:	e92d4030 	push	{r4, r5, lr}
   16408:	e3510000 	cmp	r1, #0
   1640c:	e24dde65 	sub	sp, sp, #1616	; 0x650
   16410:	e24dd00c 	sub	sp, sp, #12
   16414:	e1a05000 	mov	r5, r0
   16418:	0a00001d 	beq	16494 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x98>
   1641c:	e1a04002 	mov	r4, r2
   16420:	e28d0018 	add	r0, sp, #24
   16424:	e2403008 	sub	r3, r0, #8
   16428:	e58d300c 	str	r3, [sp, #12]
   1642c:	eb005137 	bl	2a910 <memcpy>
   16430:	e5952018 	ldr	r2, [r5, #24]
   16434:	e3843a03 	orr	r3, r4, #12288	; 0x3000
   16438:	e3520000 	cmp	r2, #0
   1643c:	e58d4014 	str	r4, [sp, #20]
   16440:	e58d3010 	str	r3, [sp, #16]
   16444:	0a00000e 	beq	16484 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x88>
   16448:	e1a00005 	mov	r0, r5
   1644c:	ebffe529 	bl	f8f8 <CUSBFunction::GetHost() const>
   16450:	e3a0c000 	mov	ip, #0
   16454:	e5951018 	ldr	r1, [r5, #24]
   16458:	e2843008 	add	r3, r4, #8
   1645c:	e59d200c 	ldr	r2, [sp, #12]
   16460:	e58dc000 	str	ip, [sp]
   16464:	ebfff15b 	bl	129d8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   16468:	e1e00000 	mvn	r0, r0
   1646c:	e1a00fa0 	lsr	r0, r0, #31
   16470:	e28dde65 	add	sp, sp, #1616	; 0x650
   16474:	e28dd00c 	add	sp, sp, #12
   16478:	e8bd8030 	pop	{r4, r5, pc}
   1647c:	e3a00000 	mov	r0, #0
   16480:	e12fff1e 	bx	lr
   16484:	e59f2018 	ldr	r2, [pc, #24]	; 164a4 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xa8>
   16488:	e59f1018 	ldr	r1, [pc, #24]	; 164a8 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   1648c:	e59f0018 	ldr	r0, [pc, #24]	; 164ac <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb0>
   16490:	eb0038da 	bl	24800 <assertion_failed>
   16494:	e59f2014 	ldr	r2, [pc, #20]	; 164b0 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb4>
   16498:	e59f1008 	ldr	r1, [pc, #8]	; 164a8 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xac>
   1649c:	e59f0010 	ldr	r0, [pc, #16]	; 164b4 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0xb8>
   164a0:	eb0038d6 	bl	24800 <assertion_failed>
   164a4:	0000010d 	.word	0x0000010d
   164a8:	00041570 	.word	0x00041570
   164ac:	000413d4 	.word	0x000413d4
   164b0:	00000106 	.word	0x00000106
   164b4:	00040b94 	.word	0x00040b94

000164b8 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   164b8:	e2400010 	sub	r0, r0, #16
   164bc:	eaffffce 	b	163fc <CSMSC951xDevice::SendFrame(void const*, unsigned int)>

000164c0 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   164c0:	e92d4010 	push	{r4, lr}
   164c4:	e1a04000 	mov	r4, r0
   164c8:	ebffe498 	bl	f730 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   164cc:	e3a02000 	mov	r2, #0
   164d0:	e59f3024 	ldr	r3, [pc, #36]	; 164fc <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)+0x3c>
   164d4:	e5842014 	str	r2, [r4, #20]
   164d8:	e2831008 	add	r1, r3, #8
   164dc:	e2833048 	add	r3, r3, #72	; 0x48
   164e0:	e5841000 	str	r1, [r4]
   164e4:	e5843010 	str	r3, [r4, #16]
   164e8:	e5842018 	str	r2, [r4, #24]
   164ec:	e284001c 	add	r0, r4, #28
   164f0:	eb0051f7 	bl	2acd4 <CMACAddress::CMACAddress()>
   164f4:	e1a00004 	mov	r0, r4
   164f8:	e8bd8010 	pop	{r4, pc}
   164fc:	000414ec 	.word	0x000414ec

00016500 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   16500:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16504:	e24dd01c 	sub	sp, sp, #28
   16508:	e28d5018 	add	r5, sp, #24
   1650c:	e5252004 	str	r2, [r5, #-4]!
   16510:	e1a04001 	mov	r4, r1
   16514:	e1a07000 	mov	r7, r0
   16518:	ebffe4f6 	bl	f8f8 <CUSBFunction::GetHost() const>
   1651c:	e1a06000 	mov	r6, r0
   16520:	e1a00007 	mov	r0, r7
   16524:	ebffe4e8 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
   16528:	e3a02004 	mov	r2, #4
   1652c:	e3a03000 	mov	r3, #0
   16530:	e6ff4074 	uxth	r4, r4
   16534:	e1a01000 	mov	r1, r0
   16538:	e58d200c 	str	r2, [sp, #12]
   1653c:	e58d3000 	str	r3, [sp]
   16540:	e58d5008 	str	r5, [sp, #8]
   16544:	e58d4004 	str	r4, [sp, #4]
   16548:	e1a00006 	mov	r0, r6
   1654c:	e3a030a0 	mov	r3, #160	; 0xa0
   16550:	e3a02040 	mov	r2, #64	; 0x40
   16554:	ebfff0b9 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16558:	e1e00000 	mvn	r0, r0
   1655c:	e1a00fa0 	lsr	r0, r0, #31
   16560:	e28dd01c 	add	sp, sp, #28
   16564:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00016568 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   16568:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1656c:	e24dd014 	sub	sp, sp, #20
   16570:	e1a06002 	mov	r6, r2
   16574:	e1a04001 	mov	r4, r1
   16578:	e1a07000 	mov	r7, r0
   1657c:	ebffe4dd 	bl	f8f8 <CUSBFunction::GetHost() const>
   16580:	e1a05000 	mov	r5, r0
   16584:	e1a00007 	mov	r0, r7
   16588:	ebffe4cf 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
   1658c:	e3a0c004 	mov	ip, #4
   16590:	e3a03000 	mov	r3, #0
   16594:	e6ff4074 	uxth	r4, r4
   16598:	e1a01000 	mov	r1, r0
   1659c:	e58d3000 	str	r3, [sp]
   165a0:	e58d6008 	str	r6, [sp, #8]
   165a4:	e58d4004 	str	r4, [sp, #4]
   165a8:	e1a00005 	mov	r0, r5
   165ac:	e58dc00c 	str	ip, [sp, #12]
   165b0:	e3a030a1 	mov	r3, #161	; 0xa1
   165b4:	e3a020c0 	mov	r2, #192	; 0xc0
   165b8:	ebfff0a0 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   165bc:	e2400004 	sub	r0, r0, #4
   165c0:	e16f0f10 	clz	r0, r0
   165c4:	e1a002a0 	lsr	r0, r0, #5
   165c8:	e28dd014 	add	sp, sp, #20
   165cc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000165d0 <CSMSC951xDevice::PHYWaitNotBusy()>:
   165d0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   165d4:	e24dd00c 	sub	sp, sp, #12
   165d8:	e1a06000 	mov	r6, r0
   165dc:	eb004e47 	bl	29f00 <CTimer::Get()>
   165e0:	e2504000 	subs	r4, r0, #0
   165e4:	0a000014 	beq	1663c <CSMSC951xDevice::PHYWaitNotBusy()+0x6c>
   165e8:	eb004b8e 	bl	29428 <CTimer::GetTicks() const>
   165ec:	e3a07f45 	mov	r7, #276	; 0x114
   165f0:	e1a05000 	mov	r5, r0
   165f4:	ea000008 	b	1661c <CSMSC951xDevice::PHYWaitNotBusy()+0x4c>
   165f8:	e28d2004 	add	r2, sp, #4
   165fc:	e1a01007 	mov	r1, r7
   16600:	e1a00006 	mov	r0, r6
   16604:	ebffffd7 	bl	16568 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   16608:	e3500000 	cmp	r0, #0
   1660c:	0a000007 	beq	16630 <CSMSC951xDevice::PHYWaitNotBusy()+0x60>
   16610:	e59d3004 	ldr	r3, [sp, #4]
   16614:	e3130001 	tst	r3, #1
   16618:	0a000005 	beq	16634 <CSMSC951xDevice::PHYWaitNotBusy()+0x64>
   1661c:	e1a00004 	mov	r0, r4
   16620:	eb004b80 	bl	29428 <CTimer::GetTicks() const>
   16624:	e0400005 	sub	r0, r0, r5
   16628:	e3500063 	cmp	r0, #99	; 0x63
   1662c:	9afffff1 	bls	165f8 <CSMSC951xDevice::PHYWaitNotBusy()+0x28>
   16630:	e3a00000 	mov	r0, #0
   16634:	e28dd00c 	add	sp, sp, #12
   16638:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1663c:	e59f2008 	ldr	r2, [pc, #8]	; 1664c <CSMSC951xDevice::PHYWaitNotBusy()+0x7c>
   16640:	e59f1008 	ldr	r1, [pc, #8]	; 16650 <CSMSC951xDevice::PHYWaitNotBusy()+0x80>
   16644:	e59f0008 	ldr	r0, [pc, #8]	; 16654 <CSMSC951xDevice::PHYWaitNotBusy()+0x84>
   16648:	eb00386c 	bl	24800 <assertion_failed>
   1664c:	0000018e 	.word	0x0000018e
   16650:	00041570 	.word	0x00041570
   16654:	00041424 	.word	0x00041424

00016658 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   16658:	e351001f 	cmp	r1, #31
   1665c:	e92d4070 	push	{r4, r5, r6, lr}
   16660:	ca000017 	bgt	166c4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x6c>
   16664:	e1a04001 	mov	r4, r1
   16668:	e1a06002 	mov	r6, r2
   1666c:	e1a05000 	mov	r5, r0
   16670:	ebffffd6 	bl	165d0 <CSMSC951xDevice::PHYWaitNotBusy()>
   16674:	e3500000 	cmp	r0, #0
   16678:	1a000001 	bne	16684 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x2c>
   1667c:	e3a00000 	mov	r0, #0
   16680:	e8bd8070 	pop	{r4, r5, r6, pc}
   16684:	e1a02006 	mov	r2, r6
   16688:	e3a01f46 	mov	r1, #280	; 0x118
   1668c:	e1a00005 	mov	r0, r5
   16690:	ebffff9a 	bl	16500 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16694:	e3500000 	cmp	r0, #0
   16698:	0afffff7 	beq	1667c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   1669c:	e59f2030 	ldr	r2, [pc, #48]	; 166d4 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x7c>
   166a0:	e3a01f45 	mov	r1, #276	; 0x114
   166a4:	e1822304 	orr	r2, r2, r4, lsl #6
   166a8:	e1a00005 	mov	r0, r5
   166ac:	ebffff93 	bl	16500 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   166b0:	e3500000 	cmp	r0, #0
   166b4:	0afffff0 	beq	1667c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x24>
   166b8:	e1a00005 	mov	r0, r5
   166bc:	e8bd4070 	pop	{r4, r5, r6, lr}
   166c0:	eaffffc2 	b	165d0 <CSMSC951xDevice::PHYWaitNotBusy()>
   166c4:	e59f200c 	ldr	r2, [pc, #12]	; 166d8 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x80>
   166c8:	e59f100c 	ldr	r1, [pc, #12]	; 166dc <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x84>
   166cc:	e59f000c 	ldr	r0, [pc, #12]	; 166e0 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x88>
   166d0:	eb00384a 	bl	24800 <assertion_failed>
   166d4:	00000803 	.word	0x00000803
   166d8:	00000162 	.word	0x00000162
   166dc:	00041570 	.word	0x00041570
   166e0:	00041430 	.word	0x00041430

000166e4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   166e4:	e92d4070 	push	{r4, r5, r6, lr}
   166e8:	e351001f 	cmp	r1, #31
   166ec:	e24dd008 	sub	sp, sp, #8
   166f0:	ca000023 	bgt	16784 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xa0>
   166f4:	e1a04001 	mov	r4, r1
   166f8:	e1a06002 	mov	r6, r2
   166fc:	e1a05000 	mov	r5, r0
   16700:	ebffffb2 	bl	165d0 <CSMSC951xDevice::PHYWaitNotBusy()>
   16704:	e3500000 	cmp	r0, #0
   16708:	1a000001 	bne	16714 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x30>
   1670c:	e28dd008 	add	sp, sp, #8
   16710:	e8bd8070 	pop	{r4, r5, r6, pc}
   16714:	e59f2078 	ldr	r2, [pc, #120]	; 16794 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb0>
   16718:	e3a01f45 	mov	r1, #276	; 0x114
   1671c:	e1822304 	orr	r2, r2, r4, lsl #6
   16720:	e1a00005 	mov	r0, r5
   16724:	ebffff75 	bl	16500 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16728:	e3500000 	cmp	r0, #0
   1672c:	1a000002 	bne	1673c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x58>
   16730:	e3a00000 	mov	r0, #0
   16734:	e28dd008 	add	sp, sp, #8
   16738:	e8bd8070 	pop	{r4, r5, r6, pc}
   1673c:	e1a00005 	mov	r0, r5
   16740:	ebffffa2 	bl	165d0 <CSMSC951xDevice::PHYWaitNotBusy()>
   16744:	e3500000 	cmp	r0, #0
   16748:	0afffff8 	beq	16730 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x4c>
   1674c:	e1a00005 	mov	r0, r5
   16750:	e28d2004 	add	r2, sp, #4
   16754:	e3a01f46 	mov	r1, #280	; 0x118
   16758:	ebffff82 	bl	16568 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   1675c:	e3500000 	cmp	r0, #0
   16760:	0afffff2 	beq	16730 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x4c>
   16764:	e3560000 	cmp	r6, #0
   16768:	159d3004 	ldrne	r3, [sp, #4]
   1676c:	11c630b0 	strhne	r3, [r6]
   16770:	1affffe5 	bne	1670c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   16774:	e59f201c 	ldr	r2, [pc, #28]	; 16798 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb4>
   16778:	e59f101c 	ldr	r1, [pc, #28]	; 1679c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   1677c:	e59f001c 	ldr	r0, [pc, #28]	; 167a0 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xbc>
   16780:	eb00381e 	bl	24800 <assertion_failed>
   16784:	e59f2018 	ldr	r2, [pc, #24]	; 167a4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc0>
   16788:	e59f100c 	ldr	r1, [pc, #12]	; 1679c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb8>
   1678c:	e59f0014 	ldr	r0, [pc, #20]	; 167a8 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xc4>
   16790:	eb00381a 	bl	24800 <assertion_failed>
   16794:	00000801 	.word	0x00000801
   16798:	00000185 	.word	0x00000185
   1679c:	00041570 	.word	0x00041570
   167a0:	00041440 	.word	0x00041440
   167a4:	00000175 	.word	0x00000175
   167a8:	00041430 	.word	0x00041430

000167ac <CSMSC951xDevice::IsLinkUp()>:
   167ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   167b0:	e24dd00c 	sub	sp, sp, #12
   167b4:	e28d2006 	add	r2, sp, #6
   167b8:	e3a01001 	mov	r1, #1
   167bc:	ebffffc8 	bl	166e4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   167c0:	e3500000 	cmp	r0, #0
   167c4:	11dd00b6 	ldrhne	r0, [sp, #6]
   167c8:	11a00120 	lsrne	r0, r0, #2
   167cc:	12000001 	andne	r0, r0, #1
   167d0:	e28dd00c 	add	sp, sp, #12
   167d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000167d8 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()>:
   167d8:	e2400010 	sub	r0, r0, #16
   167dc:	eafffff2 	b	167ac <CSMSC951xDevice::IsLinkUp()>

000167e0 <CSMSC951xDevice::GetLinkSpeed()>:
   167e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   167e4:	e24dd00c 	sub	sp, sp, #12
   167e8:	e28d2006 	add	r2, sp, #6
   167ec:	e3a0101f 	mov	r1, #31
   167f0:	ebffffbb 	bl	166e4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>
   167f4:	e3500000 	cmp	r0, #0
   167f8:	1a000002 	bne	16808 <CSMSC951xDevice::GetLinkSpeed()+0x28>
   167fc:	e3a00006 	mov	r0, #6
   16800:	e28dd00c 	add	sp, sp, #12
   16804:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   16808:	e1dd30b6 	ldrh	r3, [sp, #6]
   1680c:	e3130a01 	tst	r3, #4096	; 0x1000
   16810:	0afffff9 	beq	167fc <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   16814:	e1a03143 	asr	r3, r3, #2
   16818:	e2033007 	and	r3, r3, #7
   1681c:	e2433001 	sub	r3, r3, #1
   16820:	e3530005 	cmp	r3, #5
   16824:	8afffff4 	bhi	167fc <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   16828:	e59f2008 	ldr	r2, [pc, #8]	; 16838 <CSMSC951xDevice::GetLinkSpeed()+0x58>
   1682c:	e0823003 	add	r3, r2, r3
   16830:	e5d3007c 	ldrb	r0, [r3, #124]	; 0x7c
   16834:	eafffff1 	b	16800 <CSMSC951xDevice::GetLinkSpeed()+0x20>
   16838:	000414ec 	.word	0x000414ec

0001683c <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()>:
   1683c:	e2400010 	sub	r0, r0, #16
   16840:	eaffffe6 	b	167e0 <CSMSC951xDevice::GetLinkSpeed()>

00016844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   16844:	e92d4030 	push	{r4, r5, lr}
   16848:	e1a04002 	mov	r4, r2
   1684c:	e24dd014 	sub	sp, sp, #20
   16850:	e1a05001 	mov	r5, r1
   16854:	e28d200c 	add	r2, sp, #12
   16858:	e1a01004 	mov	r1, r4
   1685c:	ebffff41 	bl	16568 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>
   16860:	e3500000 	cmp	r0, #0
   16864:	0a000008 	beq	1688c <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x48>
   16868:	eb0040d7 	bl	26bcc <CLogger::Get()>
   1686c:	e59d300c 	ldr	r3, [sp, #12]
   16870:	e3a02004 	mov	r2, #4
   16874:	e88d0028 	stm	sp, {r3, r5}
   16878:	e59f102c 	ldr	r1, [pc, #44]	; 168ac <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   1687c:	e59f302c 	ldr	r3, [pc, #44]	; 168b0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x6c>
   16880:	eb00400e 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16884:	e28dd014 	add	sp, sp, #20
   16888:	e8bd8030 	pop	{r4, r5, pc}
   1688c:	eb0040ce 	bl	26bcc <CLogger::Get()>
   16890:	e58d4000 	str	r4, [sp]
   16894:	e59f3018 	ldr	r3, [pc, #24]	; 168b4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x70>
   16898:	e3a02001 	mov	r2, #1
   1689c:	e59f1008 	ldr	r1, [pc, #8]	; 168ac <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x68>
   168a0:	eb004006 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   168a4:	e28dd014 	add	sp, sp, #20
   168a8:	e8bd8030 	pop	{r4, r5, pc}
   168ac:	0004155c 	.word	0x0004155c
   168b0:	000415a0 	.word	0x000415a0
   168b4:	00041408 	.word	0x00041408

000168b8 <CSMSC951xDevice::DumpRegs()>:
   168b8:	e92d4010 	push	{r4, lr}
   168bc:	e1a04000 	mov	r4, r0
   168c0:	e3a02000 	mov	r2, #0
   168c4:	e59f1134 	ldr	r1, [pc, #308]	; 16a00 <CSMSC951xDevice::DumpRegs()+0x148>
   168c8:	ebffffdd 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168cc:	e1a00004 	mov	r0, r4
   168d0:	e3a02008 	mov	r2, #8
   168d4:	e59f1128 	ldr	r1, [pc, #296]	; 16a04 <CSMSC951xDevice::DumpRegs()+0x14c>
   168d8:	ebffffd9 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168dc:	e1a00004 	mov	r0, r4
   168e0:	e3a0200c 	mov	r2, #12
   168e4:	e59f111c 	ldr	r1, [pc, #284]	; 16a08 <CSMSC951xDevice::DumpRegs()+0x150>
   168e8:	ebffffd5 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168ec:	e1a00004 	mov	r0, r4
   168f0:	e3a02010 	mov	r2, #16
   168f4:	e59f1110 	ldr	r1, [pc, #272]	; 16a0c <CSMSC951xDevice::DumpRegs()+0x154>
   168f8:	ebffffd1 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   168fc:	e1a00004 	mov	r0, r4
   16900:	e3a02014 	mov	r2, #20
   16904:	e59f1104 	ldr	r1, [pc, #260]	; 16a10 <CSMSC951xDevice::DumpRegs()+0x158>
   16908:	ebffffcd 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1690c:	e1a00004 	mov	r0, r4
   16910:	e3a02018 	mov	r2, #24
   16914:	e59f10f8 	ldr	r1, [pc, #248]	; 16a14 <CSMSC951xDevice::DumpRegs()+0x15c>
   16918:	ebffffc9 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1691c:	e1a00004 	mov	r0, r4
   16920:	e3a02020 	mov	r2, #32
   16924:	e59f10ec 	ldr	r1, [pc, #236]	; 16a18 <CSMSC951xDevice::DumpRegs()+0x160>
   16928:	ebffffc5 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1692c:	e1a00004 	mov	r0, r4
   16930:	e3a02024 	mov	r2, #36	; 0x24
   16934:	e59f10e0 	ldr	r1, [pc, #224]	; 16a1c <CSMSC951xDevice::DumpRegs()+0x164>
   16938:	ebffffc1 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1693c:	e1a00004 	mov	r0, r4
   16940:	e3a02028 	mov	r2, #40	; 0x28
   16944:	e59f10d4 	ldr	r1, [pc, #212]	; 16a20 <CSMSC951xDevice::DumpRegs()+0x168>
   16948:	ebffffbd 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1694c:	e1a00004 	mov	r0, r4
   16950:	e3a0202c 	mov	r2, #44	; 0x2c
   16954:	e59f10c8 	ldr	r1, [pc, #200]	; 16a24 <CSMSC951xDevice::DumpRegs()+0x16c>
   16958:	ebffffb9 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1695c:	e1a00004 	mov	r0, r4
   16960:	e3a02038 	mov	r2, #56	; 0x38
   16964:	e59f10bc 	ldr	r1, [pc, #188]	; 16a28 <CSMSC951xDevice::DumpRegs()+0x170>
   16968:	ebffffb5 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1696c:	e1a00004 	mov	r0, r4
   16970:	e3a02068 	mov	r2, #104	; 0x68
   16974:	e59f10b0 	ldr	r1, [pc, #176]	; 16a2c <CSMSC951xDevice::DumpRegs()+0x174>
   16978:	ebffffb1 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1697c:	e1a00004 	mov	r0, r4
   16980:	e3a0206c 	mov	r2, #108	; 0x6c
   16984:	e59f10a4 	ldr	r1, [pc, #164]	; 16a30 <CSMSC951xDevice::DumpRegs()+0x178>
   16988:	ebffffad 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1698c:	e1a00004 	mov	r0, r4
   16990:	e3a02c01 	mov	r2, #256	; 0x100
   16994:	e59f1098 	ldr	r1, [pc, #152]	; 16a34 <CSMSC951xDevice::DumpRegs()+0x17c>
   16998:	ebffffa9 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1699c:	e1a00004 	mov	r0, r4
   169a0:	e3a02f41 	mov	r2, #260	; 0x104
   169a4:	e59f108c 	ldr	r1, [pc, #140]	; 16a38 <CSMSC951xDevice::DumpRegs()+0x180>
   169a8:	ebffffa5 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   169ac:	e1a00004 	mov	r0, r4
   169b0:	e3a02f42 	mov	r2, #264	; 0x108
   169b4:	e59f1080 	ldr	r1, [pc, #128]	; 16a3c <CSMSC951xDevice::DumpRegs()+0x184>
   169b8:	ebffffa1 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   169bc:	e1a00004 	mov	r0, r4
   169c0:	e3a02f43 	mov	r2, #268	; 0x10c
   169c4:	e59f1074 	ldr	r1, [pc, #116]	; 16a40 <CSMSC951xDevice::DumpRegs()+0x188>
   169c8:	ebffff9d 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   169cc:	e1a00004 	mov	r0, r4
   169d0:	e3a02e11 	mov	r2, #272	; 0x110
   169d4:	e59f1068 	ldr	r1, [pc, #104]	; 16a44 <CSMSC951xDevice::DumpRegs()+0x18c>
   169d8:	ebffff99 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   169dc:	e1a00004 	mov	r0, r4
   169e0:	e3a02f47 	mov	r2, #284	; 0x11c
   169e4:	e59f105c 	ldr	r1, [pc, #92]	; 16a48 <CSMSC951xDevice::DumpRegs()+0x190>
   169e8:	ebffff95 	bl	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   169ec:	e1a00004 	mov	r0, r4
   169f0:	e8bd4010 	pop	{r4, lr}
   169f4:	e3a02f4b 	mov	r2, #300	; 0x12c
   169f8:	e59f104c 	ldr	r1, [pc, #76]	; 16a4c <CSMSC951xDevice::DumpRegs()+0x194>
   169fc:	eaffff90 	b	16844 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   16a00:	000415a8 	.word	0x000415a8
   16a04:	000415b0 	.word	0x000415b0
   16a08:	000415b8 	.word	0x000415b8
   16a0c:	000415c0 	.word	0x000415c0
   16a10:	000415c8 	.word	0x000415c8
   16a14:	000415d0 	.word	0x000415d0
   16a18:	000415dc 	.word	0x000415dc
   16a1c:	000415e4 	.word	0x000415e4
   16a20:	000415e8 	.word	0x000415e8
   16a24:	000415f4 	.word	0x000415f4
   16a28:	000415fc 	.word	0x000415fc
   16a2c:	00041608 	.word	0x00041608
   16a30:	00041614 	.word	0x00041614
   16a34:	00041620 	.word	0x00041620
   16a38:	00041628 	.word	0x00041628
   16a3c:	00041630 	.word	0x00041630
   16a40:	00041638 	.word	0x00041638
   16a44:	00041640 	.word	0x00041640
   16a48:	00041648 	.word	0x00041648
   16a4c:	00041650 	.word	0x00041650

00016a50 <CSMSC951xDevice::Configure()>:
   16a50:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16a54:	e3a06000 	mov	r6, #0
   16a58:	e24dd040 	sub	sp, sp, #64	; 0x40
   16a5c:	e1a01006 	mov	r1, r6
   16a60:	e1a05000 	mov	r5, r0
   16a64:	e28d0014 	add	r0, sp, #20
   16a68:	eb003785 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   16a6c:	e28d0014 	add	r0, sp, #20
   16a70:	e58d6000 	str	r6, [sp]
   16a74:	e3a03014 	mov	r3, #20
   16a78:	e28d202c 	add	r2, sp, #44	; 0x2c
   16a7c:	e59f1274 	ldr	r1, [pc, #628]	; 16cf8 <CSMSC951xDevice::Configure()+0x2a8>
   16a80:	eb00378b 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   16a84:	e2504000 	subs	r4, r0, #0
   16a88:	0a00003c 	beq	16b80 <CSMSC951xDevice::Configure()+0x130>
   16a8c:	e285701c 	add	r7, r5, #28
   16a90:	e28d1038 	add	r1, sp, #56	; 0x38
   16a94:	e1a00007 	mov	r0, r7
   16a98:	eb0050ae 	bl	2ad58 <CMACAddress::Set(unsigned char const*)>
   16a9c:	e28d001c 	add	r0, sp, #28
   16aa0:	eb00442f 	bl	27b64 <CString::CString()>
   16aa4:	e28d101c 	add	r1, sp, #28
   16aa8:	e1a00007 	mov	r0, r7
   16aac:	eb005102 	bl	2aebc <CMACAddress::Format(CString*) const>
   16ab0:	eb004045 	bl	26bcc <CLogger::Get()>
   16ab4:	e1a04000 	mov	r4, r0
   16ab8:	e28d001c 	add	r0, sp, #28
   16abc:	eb00443e 	bl	27bbc <CString::operator char const*() const>
   16ac0:	e59f3234 	ldr	r3, [pc, #564]	; 16cfc <CSMSC951xDevice::Configure()+0x2ac>
   16ac4:	e58d0000 	str	r0, [sp]
   16ac8:	e3a02004 	mov	r2, #4
   16acc:	e1a00004 	mov	r0, r4
   16ad0:	e59f1228 	ldr	r1, [pc, #552]	; 16d00 <CSMSC951xDevice::Configure()+0x2b0>
   16ad4:	eb003f79 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16ad8:	e1a00005 	mov	r0, r5
   16adc:	ebffe363 	bl	f870 <CUSBFunction::GetNumEndpoints() const>
   16ae0:	e3500003 	cmp	r0, #3
   16ae4:	03a06005 	moveq	r6, #5
   16ae8:	03a08014 	moveq	r8, #20
   16aec:	0a00000e 	beq	16b2c <CSMSC951xDevice::Configure()+0xdc>
   16af0:	e1a00005 	mov	r0, r5
   16af4:	e59f1204 	ldr	r1, [pc, #516]	; 16d00 <CSMSC951xDevice::Configure()+0x2b0>
   16af8:	e1a04006 	mov	r4, r6
   16afc:	ebffe393 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   16b00:	e28d001c 	add	r0, sp, #28
   16b04:	eb0043e3 	bl	27a98 <CString::~CString()>
   16b08:	e28d0014 	add	r0, sp, #20
   16b0c:	eb003763 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   16b10:	e1a00004 	mov	r0, r4
   16b14:	e28dd040 	add	sp, sp, #64	; 0x40
   16b18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b1c:	e5d43003 	ldrb	r3, [r4, #3]
   16b20:	e203303f 	and	r3, r3, #63	; 0x3f
   16b24:	e3530002 	cmp	r3, #2
   16b28:	0a00001a 	beq	16b98 <CSMSC951xDevice::Configure()+0x148>
   16b2c:	e1a01006 	mov	r1, r6
   16b30:	e1a00005 	mov	r0, r5
   16b34:	ebffe37a 	bl	f924 <CUSBFunction::GetDescriptor(unsigned char)>
   16b38:	e2504000 	subs	r4, r0, #0
   16b3c:	1afffff6 	bne	16b1c <CSMSC951xDevice::Configure()+0xcc>
   16b40:	e5953014 	ldr	r3, [r5, #20]
   16b44:	e1a00005 	mov	r0, r5
   16b48:	e3530000 	cmp	r3, #0
   16b4c:	0a000022 	beq	16bdc <CSMSC951xDevice::Configure()+0x18c>
   16b50:	e5953018 	ldr	r3, [r5, #24]
   16b54:	e3530000 	cmp	r3, #0
   16b58:	0a00001f 	beq	16bdc <CSMSC951xDevice::Configure()+0x18c>
   16b5c:	ebffe28b 	bl	f590 <CUSBFunction::Configure()>
   16b60:	e2504000 	subs	r4, r0, #0
   16b64:	1a000020 	bne	16bec <CSMSC951xDevice::Configure()+0x19c>
   16b68:	eb004017 	bl	26bcc <CLogger::Get()>
   16b6c:	e59f3190 	ldr	r3, [pc, #400]	; 16d04 <CSMSC951xDevice::Configure()+0x2b4>
   16b70:	e3a02001 	mov	r2, #1
   16b74:	e59f1184 	ldr	r1, [pc, #388]	; 16d00 <CSMSC951xDevice::Configure()+0x2b0>
   16b78:	eb003f50 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16b7c:	eaffffdf 	b	16b00 <CSMSC951xDevice::Configure()+0xb0>
   16b80:	eb004011 	bl	26bcc <CLogger::Get()>
   16b84:	e59f317c 	ldr	r3, [pc, #380]	; 16d08 <CSMSC951xDevice::Configure()+0x2b8>
   16b88:	e3a02001 	mov	r2, #1
   16b8c:	e59f116c 	ldr	r1, [pc, #364]	; 16d00 <CSMSC951xDevice::Configure()+0x2b0>
   16b90:	eb003f4a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16b94:	eaffffdb 	b	16b08 <CSMSC951xDevice::Configure()+0xb8>
   16b98:	e1d430d2 	ldrsb	r3, [r4, #2]
   16b9c:	e3530000 	cmp	r3, #0
   16ba0:	ba000024 	blt	16c38 <CSMSC951xDevice::Configure()+0x1e8>
   16ba4:	e5953018 	ldr	r3, [r5, #24]
   16ba8:	e1a00005 	mov	r0, r5
   16bac:	e3530000 	cmp	r3, #0
   16bb0:	1a000009 	bne	16bdc <CSMSC951xDevice::Configure()+0x18c>
   16bb4:	ebffe339 	bl	f8a0 <CUSBFunction::GetDevice() const>
   16bb8:	e1a0a000 	mov	sl, r0
   16bbc:	e1a00008 	mov	r0, r8
   16bc0:	eb00512b 	bl	2b074 <operator new(unsigned int)>
   16bc4:	e1a09000 	mov	r9, r0
   16bc8:	e1a02004 	mov	r2, r4
   16bcc:	e1a0100a 	mov	r1, sl
   16bd0:	ebffe16f 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16bd4:	e5859018 	str	r9, [r5, #24]
   16bd8:	eaffffd3 	b	16b2c <CSMSC951xDevice::Configure()+0xdc>
   16bdc:	e59f111c 	ldr	r1, [pc, #284]	; 16d00 <CSMSC951xDevice::Configure()+0x2b0>
   16be0:	ebffe35a 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   16be4:	e3a04000 	mov	r4, #0
   16be8:	eaffffc4 	b	16b00 <CSMSC951xDevice::Configure()+0xb0>
   16bec:	e1a00007 	mov	r0, r7
   16bf0:	e28d100c 	add	r1, sp, #12
   16bf4:	eb005081 	bl	2ae00 <CMACAddress::CopyTo(unsigned char*) const>
   16bf8:	e5dd2011 	ldrb	r2, [sp, #17]
   16bfc:	e5dd3010 	ldrb	r3, [sp, #16]
   16c00:	e3a01f41 	mov	r1, #260	; 0x104
   16c04:	e1832402 	orr	r2, r3, r2, lsl #8
   16c08:	e1a00005 	mov	r0, r5
   16c0c:	e59d400c 	ldr	r4, [sp, #12]
   16c10:	ebfffe3a 	bl	16500 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16c14:	e3500000 	cmp	r0, #0
   16c18:	1a000014 	bne	16c70 <CSMSC951xDevice::Configure()+0x220>
   16c1c:	eb003fea 	bl	26bcc <CLogger::Get()>
   16c20:	e59f30e4 	ldr	r3, [pc, #228]	; 16d0c <CSMSC951xDevice::Configure()+0x2bc>
   16c24:	e3a02001 	mov	r2, #1
   16c28:	e59f10d0 	ldr	r1, [pc, #208]	; 16d00 <CSMSC951xDevice::Configure()+0x2b0>
   16c2c:	eb003f23 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16c30:	e3a04000 	mov	r4, #0
   16c34:	eaffffb1 	b	16b00 <CSMSC951xDevice::Configure()+0xb0>
   16c38:	e5953014 	ldr	r3, [r5, #20]
   16c3c:	e1a00005 	mov	r0, r5
   16c40:	e3530000 	cmp	r3, #0
   16c44:	1affffe4 	bne	16bdc <CSMSC951xDevice::Configure()+0x18c>
   16c48:	ebffe314 	bl	f8a0 <CUSBFunction::GetDevice() const>
   16c4c:	e1a0a000 	mov	sl, r0
   16c50:	e1a00008 	mov	r0, r8
   16c54:	eb005106 	bl	2b074 <operator new(unsigned int)>
   16c58:	e1a09000 	mov	r9, r0
   16c5c:	e1a02004 	mov	r2, r4
   16c60:	e1a0100a 	mov	r1, sl
   16c64:	ebffe14a 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16c68:	e5859014 	str	r9, [r5, #20]
   16c6c:	eaffffae 	b	16b2c <CSMSC951xDevice::Configure()+0xdc>
   16c70:	e1a02004 	mov	r2, r4
   16c74:	e3a01f42 	mov	r1, #264	; 0x108
   16c78:	e1a00005 	mov	r0, r5
   16c7c:	ebfffe1f 	bl	16500 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16c80:	e3500000 	cmp	r0, #0
   16c84:	0affffe4 	beq	16c1c <CSMSC951xDevice::Configure()+0x1cc>
   16c88:	e59f2080 	ldr	r2, [pc, #128]	; 16d10 <CSMSC951xDevice::Configure()+0x2c0>
   16c8c:	e3a01024 	mov	r1, #36	; 0x24
   16c90:	e1a00005 	mov	r0, r5
   16c94:	ebfffe19 	bl	16500 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16c98:	e3500000 	cmp	r0, #0
   16c9c:	1a000006 	bne	16cbc <CSMSC951xDevice::Configure()+0x26c>
   16ca0:	eb003fc9 	bl	26bcc <CLogger::Get()>
   16ca4:	e59f3068 	ldr	r3, [pc, #104]	; 16d14 <CSMSC951xDevice::Configure()+0x2c4>
   16ca8:	e3a02001 	mov	r2, #1
   16cac:	e59f104c 	ldr	r1, [pc, #76]	; 16d00 <CSMSC951xDevice::Configure()+0x2b0>
   16cb0:	eb003f02 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16cb4:	e3a04000 	mov	r4, #0
   16cb8:	eaffff90 	b	16b00 <CSMSC951xDevice::Configure()+0xb0>
   16cbc:	e59f2054 	ldr	r2, [pc, #84]	; 16d18 <CSMSC951xDevice::Configure()+0x2c8>
   16cc0:	e3a01c01 	mov	r1, #256	; 0x100
   16cc4:	e1a00005 	mov	r0, r5
   16cc8:	ebfffe0c 	bl	16500 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16ccc:	e3500000 	cmp	r0, #0
   16cd0:	0afffff2 	beq	16ca0 <CSMSC951xDevice::Configure()+0x250>
   16cd4:	e3a02004 	mov	r2, #4
   16cd8:	e3a01010 	mov	r1, #16
   16cdc:	e1a00005 	mov	r0, r5
   16ce0:	ebfffe06 	bl	16500 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>
   16ce4:	e2504000 	subs	r4, r0, #0
   16ce8:	0affffec 	beq	16ca0 <CSMSC951xDevice::Configure()+0x250>
   16cec:	e2850010 	add	r0, r5, #16
   16cf0:	eb005092 	bl	2af40 <CNetDevice::AddNetDevice()>
   16cf4:	eaffff81 	b	16b00 <CSMSC951xDevice::Configure()+0xb0>
   16cf8:	00010003 	.word	0x00010003
   16cfc:	00041474 	.word	0x00041474
   16d00:	0004155c 	.word	0x0004155c
   16d04:	0004030c 	.word	0x0004030c
   16d08:	00041658 	.word	0x00041658
   16d0c:	00041670 	.word	0x00041670
   16d10:	01110000 	.word	0x01110000
   16d14:	00041688 	.word	0x00041688
   16d18:	0080000c 	.word	0x0080000c

00016d1c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   16d1c:	e3a03000 	mov	r3, #0
   16d20:	e92d4070 	push	{r4, r5, r6, lr}
   16d24:	e1a04000 	mov	r4, r0
   16d28:	e5900020 	ldr	r0, [r0, #32]
   16d2c:	e59f20a0 	ldr	r2, [pc, #160]	; 16dd4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xb8>
   16d30:	e1500003 	cmp	r0, r3
   16d34:	e5842000 	str	r2, [r4]
   16d38:	e5843024 	str	r3, [r4, #36]	; 0x24
   16d3c:	0a000000 	beq	16d44 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   16d40:	eb0050d3 	bl	2b094 <operator delete[](void*)>
   16d44:	e3a03000 	mov	r3, #0
   16d48:	e5945018 	ldr	r5, [r4, #24]
   16d4c:	e5843020 	str	r3, [r4, #32]
   16d50:	e1550003 	cmp	r5, r3
   16d54:	0a000004 	beq	16d6c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x50>
   16d58:	e1a00005 	mov	r0, r5
   16d5c:	ebffe176 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   16d60:	e1a00005 	mov	r0, r5
   16d64:	e3a01014 	mov	r1, #20
   16d68:	eb0050cf 	bl	2b0ac <operator delete(void*, unsigned int)>
   16d6c:	e3a03000 	mov	r3, #0
   16d70:	e5945014 	ldr	r5, [r4, #20]
   16d74:	e5843018 	str	r3, [r4, #24]
   16d78:	e1550003 	cmp	r5, r3
   16d7c:	0a000004 	beq	16d94 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x78>
   16d80:	e1a00005 	mov	r0, r5
   16d84:	ebffe16c 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   16d88:	e1a00005 	mov	r0, r5
   16d8c:	e3a01014 	mov	r1, #20
   16d90:	eb0050c5 	bl	2b0ac <operator delete(void*, unsigned int)>
   16d94:	e3a03000 	mov	r3, #0
   16d98:	e5945010 	ldr	r5, [r4, #16]
   16d9c:	e5843014 	str	r3, [r4, #20]
   16da0:	e1550003 	cmp	r5, r3
   16da4:	0a000004 	beq	16dbc <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa0>
   16da8:	e1a00005 	mov	r0, r5
   16dac:	ebffe162 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   16db0:	e1a00005 	mov	r0, r5
   16db4:	e3a01014 	mov	r1, #20
   16db8:	eb0050bb 	bl	2b0ac <operator delete(void*, unsigned int)>
   16dbc:	e3a03000 	mov	r3, #0
   16dc0:	e1a00004 	mov	r0, r4
   16dc4:	e5843010 	str	r3, [r4, #16]
   16dc8:	ebffe1c7 	bl	f4ec <CUSBFunction::~CUSBFunction()>
   16dcc:	e1a00004 	mov	r0, r4
   16dd0:	e8bd8070 	pop	{r4, r5, r6, pc}
   16dd4:	000416a4 	.word	0x000416a4

00016dd8 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   16dd8:	e92d4010 	push	{r4, lr}
   16ddc:	e1a04000 	mov	r4, r0
   16de0:	ebffffcd 	bl	16d1c <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   16de4:	e1a00004 	mov	r0, r4
   16de8:	e3a01028 	mov	r1, #40	; 0x28
   16dec:	eb0050ae 	bl	2b0ac <operator delete(void*, unsigned int)>
   16df0:	e1a00004 	mov	r0, r4
   16df4:	e8bd8010 	pop	{r4, pc}

00016df8 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   16df8:	e92d4010 	push	{r4, lr}
   16dfc:	e1a04000 	mov	r4, r0
   16e00:	ebffe24a 	bl	f730 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   16e04:	e3a03000 	mov	r3, #0
   16e08:	e59f2020 	ldr	r2, [pc, #32]	; 16e30 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x38>
   16e0c:	e5843010 	str	r3, [r4, #16]
   16e10:	e5842000 	str	r2, [r4]
   16e14:	e5843014 	str	r3, [r4, #20]
   16e18:	e5843018 	str	r3, [r4, #24]
   16e1c:	e584301c 	str	r3, [r4, #28]
   16e20:	e5843020 	str	r3, [r4, #32]
   16e24:	e5843024 	str	r3, [r4, #36]	; 0x24
   16e28:	e1a00004 	mov	r0, r4
   16e2c:	e8bd8010 	pop	{r4, pc}
   16e30:	000416a4 	.word	0x000416a4

00016e34 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   16e34:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16e38:	e24dd014 	sub	sp, sp, #20
   16e3c:	e1a06001 	mov	r6, r1
   16e40:	e1a04002 	mov	r4, r2
   16e44:	e1a07000 	mov	r7, r0
   16e48:	ebffe2aa 	bl	f8f8 <CUSBFunction::GetHost() const>
   16e4c:	e1a05000 	mov	r5, r0
   16e50:	e1a00007 	mov	r0, r7
   16e54:	ebffe29c 	bl	f8cc <CUSBFunction::GetEndpoint0() const>
   16e58:	e3a03000 	mov	r3, #0
   16e5c:	e6ff4074 	uxth	r4, r4
   16e60:	e1a01000 	mov	r1, r0
   16e64:	e58d6008 	str	r6, [sp, #8]
   16e68:	e58d400c 	str	r4, [sp, #12]
   16e6c:	e1a00005 	mov	r0, r5
   16e70:	e58d3004 	str	r3, [sp, #4]
   16e74:	e58d3000 	str	r3, [sp]
   16e78:	e3a02020 	mov	r2, #32
   16e7c:	ebffee6f 	bl	12840 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16e80:	e1e00000 	mvn	r0, r0
   16e84:	e1a00fa0 	lsr	r0, r0, #31
   16e88:	e28dd014 	add	sp, sp, #20
   16e8c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00016e90 <CUSBBluetoothDevice::StartRequest()>:
   16e90:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16e94:	e1a04000 	mov	r4, r0
   16e98:	e5900010 	ldr	r0, [r0, #16]
   16e9c:	e24dd00c 	sub	sp, sp, #12
   16ea0:	e3500000 	cmp	r0, #0
   16ea4:	0a00001e 	beq	16f24 <CUSBBluetoothDevice::StartRequest()+0x94>
   16ea8:	e5943020 	ldr	r3, [r4, #32]
   16eac:	e3530000 	cmp	r3, #0
   16eb0:	0a00001f 	beq	16f34 <CUSBBluetoothDevice::StartRequest()+0xa4>
   16eb4:	e594501c 	ldr	r5, [r4, #28]
   16eb8:	e3550000 	cmp	r5, #0
   16ebc:	1a000020 	bne	16f44 <CUSBBluetoothDevice::StartRequest()+0xb4>
   16ec0:	ebffe132 	bl	f390 <CUSBEndpoint::GetMaxPacketSize() const>
   16ec4:	e1a07000 	mov	r7, r0
   16ec8:	e3a00028 	mov	r0, #40	; 0x28
   16ecc:	ebfff5e0 	bl	14654 <CUSBRequest::operator new(unsigned int)>
   16ed0:	e1a06000 	mov	r6, r0
   16ed4:	e5942020 	ldr	r2, [r4, #32]
   16ed8:	e5941010 	ldr	r1, [r4, #16]
   16edc:	e1a03007 	mov	r3, r7
   16ee0:	e58d5000 	str	r5, [sp]
   16ee4:	ebfff555 	bl	14440 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   16ee8:	e1a03004 	mov	r3, r4
   16eec:	e1a02005 	mov	r2, r5
   16ef0:	e1a00006 	mov	r0, r6
   16ef4:	e59f1058 	ldr	r1, [pc, #88]	; 16f54 <CUSBBluetoothDevice::StartRequest()+0xc4>
   16ef8:	e584601c 	str	r6, [r4, #28]
   16efc:	ebfff5b3 	bl	145d0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   16f00:	e1a00004 	mov	r0, r4
   16f04:	ebffe27b 	bl	f8f8 <CUSBFunction::GetHost() const>
   16f08:	e1a02005 	mov	r2, r5
   16f0c:	e5903000 	ldr	r3, [r0]
   16f10:	e594101c 	ldr	r1, [r4, #28]
   16f14:	e593300c 	ldr	r3, [r3, #12]
   16f18:	e28dd00c 	add	sp, sp, #12
   16f1c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   16f20:	e12fff13 	bx	r3
   16f24:	e3a020a3 	mov	r2, #163	; 0xa3
   16f28:	e59f1028 	ldr	r1, [pc, #40]	; 16f58 <CUSBBluetoothDevice::StartRequest()+0xc8>
   16f2c:	e59f0028 	ldr	r0, [pc, #40]	; 16f5c <CUSBBluetoothDevice::StartRequest()+0xcc>
   16f30:	eb003632 	bl	24800 <assertion_failed>
   16f34:	e3a020a4 	mov	r2, #164	; 0xa4
   16f38:	e59f1018 	ldr	r1, [pc, #24]	; 16f58 <CUSBBluetoothDevice::StartRequest()+0xc8>
   16f3c:	e59f001c 	ldr	r0, [pc, #28]	; 16f60 <CUSBBluetoothDevice::StartRequest()+0xd0>
   16f40:	eb00362e 	bl	24800 <assertion_failed>
   16f44:	e3a020a6 	mov	r2, #166	; 0xa6
   16f48:	e59f1008 	ldr	r1, [pc, #8]	; 16f58 <CUSBBluetoothDevice::StartRequest()+0xc8>
   16f4c:	e59f0010 	ldr	r0, [pc, #16]	; 16f64 <CUSBBluetoothDevice::StartRequest()+0xd4>
   16f50:	eb00362a 	bl	24800 <assertion_failed>
   16f54:	000170b8 	.word	0x000170b8
   16f58:	000416d0 	.word	0x000416d0
   16f5c:	000416e4 	.word	0x000416e4
   16f60:	00041700 	.word	0x00041700
   16f64:	00040a70 	.word	0x00040a70

00016f68 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   16f68:	e3510000 	cmp	r1, #0
   16f6c:	e5801024 	str	r1, [r0, #36]	; 0x24
   16f70:	0a000000 	beq	16f78 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x10>
   16f74:	eaffffc5 	b	16e90 <CUSBBluetoothDevice::StartRequest()>
   16f78:	e92d4010 	push	{r4, lr}
   16f7c:	e3a0209c 	mov	r2, #156	; 0x9c
   16f80:	e59f1004 	ldr	r1, [pc, #4]	; 16f8c <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x24>
   16f84:	e59f0004 	ldr	r0, [pc, #4]	; 16f90 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x28>
   16f88:	eb00361c 	bl	24800 <assertion_failed>
   16f8c:	000416d0 	.word	0x000416d0
   16f90:	00041714 	.word	0x00041714

00016f94 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   16f94:	e92d4070 	push	{r4, r5, r6, lr}
   16f98:	e2515000 	subs	r5, r1, #0
   16f9c:	0a000031 	beq	17068 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   16fa0:	e590301c 	ldr	r3, [r0, #28]
   16fa4:	e1a04000 	mov	r4, r0
   16fa8:	e1550003 	cmp	r5, r3
   16fac:	1a000031 	bne	17078 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xe4>
   16fb0:	e5903020 	ldr	r3, [r0, #32]
   16fb4:	e3530000 	cmp	r3, #0
   16fb8:	0a000032 	beq	17088 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xf4>
   16fbc:	e1a00005 	mov	r0, r5
   16fc0:	ebfff54f 	bl	14504 <CUSBRequest::GetStatus() const>
   16fc4:	e3500000 	cmp	r0, #0
   16fc8:	0a00001c 	beq	17040 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xac>
   16fcc:	e5946024 	ldr	r6, [r4, #36]	; 0x24
   16fd0:	e3560000 	cmp	r6, #0
   16fd4:	0a00001f 	beq	17058 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xc4>
   16fd8:	e1a00005 	mov	r0, r5
   16fdc:	e5945020 	ldr	r5, [r4, #32]
   16fe0:	ebfff549 	bl	1450c <CUSBRequest::GetResultLength() const>
   16fe4:	e1a01000 	mov	r1, r0
   16fe8:	e1a00005 	mov	r0, r5
   16fec:	e12fff36 	blx	r6
   16ff0:	e594501c 	ldr	r5, [r4, #28]
   16ff4:	e3550000 	cmp	r5, #0
   16ff8:	0a000004 	beq	17010 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x7c>
   16ffc:	e1a00005 	mov	r0, r5
   17000:	ebfff52f 	bl	144c4 <CUSBRequest::~CUSBRequest()>
   17004:	e1a00005 	mov	r0, r5
   17008:	e3a01028 	mov	r1, #40	; 0x28
   1700c:	ebfff5a5 	bl	146a8 <CUSBRequest::operator delete(void*, unsigned int)>
   17010:	e3a03000 	mov	r3, #0
   17014:	e1a00004 	mov	r0, r4
   17018:	e584301c 	str	r3, [r4, #28]
   1701c:	ebffff9b 	bl	16e90 <CUSBBluetoothDevice::StartRequest()>
   17020:	e3500000 	cmp	r0, #0
   17024:	18bd8070 	popne	{r4, r5, r6, pc}
   17028:	eb003ee7 	bl	26bcc <CLogger::Get()>
   1702c:	e8bd4070 	pop	{r4, r5, r6, lr}
   17030:	e59f3060 	ldr	r3, [pc, #96]	; 17098 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x104>
   17034:	e3a02001 	mov	r2, #1
   17038:	e59f105c 	ldr	r1, [pc, #92]	; 1709c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x108>
   1703c:	ea003e1f 	b	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17040:	eb003ee1 	bl	26bcc <CLogger::Get()>
   17044:	e59f3054 	ldr	r3, [pc, #84]	; 170a0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x10c>
   17048:	e3a02002 	mov	r2, #2
   1704c:	e59f1048 	ldr	r1, [pc, #72]	; 1709c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x108>
   17050:	eb003e1a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17054:	eaffffe5 	b	16ff0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   17058:	e3a020b8 	mov	r2, #184	; 0xb8
   1705c:	e59f1040 	ldr	r1, [pc, #64]	; 170a4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   17060:	e59f0040 	ldr	r0, [pc, #64]	; 170a8 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x114>
   17064:	eb0035e5 	bl	24800 <assertion_failed>
   17068:	e3a020b2 	mov	r2, #178	; 0xb2
   1706c:	e59f1030 	ldr	r1, [pc, #48]	; 170a4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   17070:	e59f0034 	ldr	r0, [pc, #52]	; 170ac <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x118>
   17074:	eb0035e1 	bl	24800 <assertion_failed>
   17078:	e3a020b3 	mov	r2, #179	; 0xb3
   1707c:	e59f1020 	ldr	r1, [pc, #32]	; 170a4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   17080:	e59f0028 	ldr	r0, [pc, #40]	; 170b0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   17084:	eb0035dd 	bl	24800 <assertion_failed>
   17088:	e3a020b4 	mov	r2, #180	; 0xb4
   1708c:	e59f1010 	ldr	r1, [pc, #16]	; 170a4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x110>
   17090:	e59f001c 	ldr	r0, [pc, #28]	; 170b4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x120>
   17094:	eb0035d9 	bl	24800 <assertion_failed>
   17098:	00040aa4 	.word	0x00040aa4
   1709c:	000416c8 	.word	0x000416c8
   170a0:	0004172c 	.word	0x0004172c
   170a4:	000416d0 	.word	0x000416d0
   170a8:	00041714 	.word	0x00041714
   170ac:	0003f254 	.word	0x0003f254
   170b0:	00040a94 	.word	0x00040a94
   170b4:	00041700 	.word	0x00041700

000170b8 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   170b8:	e3520000 	cmp	r2, #0
   170bc:	0a000002 	beq	170cc <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x14>
   170c0:	e1a01000 	mov	r1, r0
   170c4:	e1a00002 	mov	r0, r2
   170c8:	eaffffb1 	b	16f94 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   170cc:	e92d4010 	push	{r4, lr}
   170d0:	e3a020cc 	mov	r2, #204	; 0xcc
   170d4:	e59f1004 	ldr	r1, [pc, #4]	; 170e0 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x28>
   170d8:	e59f0004 	ldr	r0, [pc, #4]	; 170e4 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x2c>
   170dc:	eb0035c7 	bl	24800 <assertion_failed>
   170e0:	000416d0 	.word	0x000416d0
   170e4:	0003f168 	.word	0x0003f168

000170e8 <CUSBBluetoothDevice::Configure()>:
   170e8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   170ec:	e24dd014 	sub	sp, sp, #20
   170f0:	e1a05000 	mov	r5, r0
   170f4:	ebffe25d 	bl	fa70 <CUSBFunction::GetInterfaceNumber() const>
   170f8:	e2506000 	subs	r6, r0, #0
   170fc:	1a000043 	bne	17210 <CUSBBluetoothDevice::Configure()+0x128>
   17100:	e1a00005 	mov	r0, r5
   17104:	ebffe1d9 	bl	f870 <CUSBFunction::GetNumEndpoints() const>
   17108:	e3500003 	cmp	r0, #3
   1710c:	03a06005 	moveq	r6, #5
   17110:	03a07014 	moveq	r7, #20
   17114:	1a000037 	bne	171f8 <CUSBBluetoothDevice::Configure()+0x110>
   17118:	e1a01006 	mov	r1, r6
   1711c:	e1a00005 	mov	r0, r5
   17120:	ebffe1ff 	bl	f924 <CUSBFunction::GetDescriptor(unsigned char)>
   17124:	e2504000 	subs	r4, r0, #0
   17128:	0a000041 	beq	17234 <CUSBBluetoothDevice::Configure()+0x14c>
   1712c:	e5d42003 	ldrb	r2, [r4, #3]
   17130:	e202203f 	and	r2, r2, #63	; 0x3f
   17134:	e3520002 	cmp	r2, #2
   17138:	0a00000f 	beq	1717c <CUSBBluetoothDevice::Configure()+0x94>
   1713c:	e3520003 	cmp	r2, #3
   17140:	1afffff4 	bne	17118 <CUSBBluetoothDevice::Configure()+0x30>
   17144:	e5953010 	ldr	r3, [r5, #16]
   17148:	e1a00005 	mov	r0, r5
   1714c:	e3530000 	cmp	r3, #0
   17150:	1a000060 	bne	172d8 <CUSBBluetoothDevice::Configure()+0x1f0>
   17154:	ebffe1d1 	bl	f8a0 <CUSBFunction::GetDevice() const>
   17158:	e1a09000 	mov	r9, r0
   1715c:	e1a00007 	mov	r0, r7
   17160:	eb004fc3 	bl	2b074 <operator new(unsigned int)>
   17164:	e1a08000 	mov	r8, r0
   17168:	e1a02004 	mov	r2, r4
   1716c:	e1a01009 	mov	r1, r9
   17170:	ebffe007 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17174:	e5858010 	str	r8, [r5, #16]
   17178:	eaffffe6 	b	17118 <CUSBBluetoothDevice::Configure()+0x30>
   1717c:	e1d430d2 	ldrsb	r3, [r4, #2]
   17180:	e3530000 	cmp	r3, #0
   17184:	ba00000d 	blt	171c0 <CUSBBluetoothDevice::Configure()+0xd8>
   17188:	e5953018 	ldr	r3, [r5, #24]
   1718c:	e1a00005 	mov	r0, r5
   17190:	e3530000 	cmp	r3, #0
   17194:	1a00004f 	bne	172d8 <CUSBBluetoothDevice::Configure()+0x1f0>
   17198:	ebffe1c0 	bl	f8a0 <CUSBFunction::GetDevice() const>
   1719c:	e1a09000 	mov	r9, r0
   171a0:	e1a00007 	mov	r0, r7
   171a4:	eb004fb2 	bl	2b074 <operator new(unsigned int)>
   171a8:	e1a08000 	mov	r8, r0
   171ac:	e1a02004 	mov	r2, r4
   171b0:	e1a01009 	mov	r1, r9
   171b4:	ebffdff6 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   171b8:	e5858018 	str	r8, [r5, #24]
   171bc:	eaffffd5 	b	17118 <CUSBBluetoothDevice::Configure()+0x30>
   171c0:	e5953014 	ldr	r3, [r5, #20]
   171c4:	e1a00005 	mov	r0, r5
   171c8:	e3530000 	cmp	r3, #0
   171cc:	1a000041 	bne	172d8 <CUSBBluetoothDevice::Configure()+0x1f0>
   171d0:	ebffe1b2 	bl	f8a0 <CUSBFunction::GetDevice() const>
   171d4:	e1a09000 	mov	r9, r0
   171d8:	e1a00007 	mov	r0, r7
   171dc:	eb004fa4 	bl	2b074 <operator new(unsigned int)>
   171e0:	e1a08000 	mov	r8, r0
   171e4:	e1a02004 	mov	r2, r4
   171e8:	e1a01009 	mov	r1, r9
   171ec:	ebffdfe8 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   171f0:	e5858014 	str	r8, [r5, #20]
   171f4:	eaffffc7 	b	17118 <CUSBBluetoothDevice::Configure()+0x30>
   171f8:	e1a00005 	mov	r0, r5
   171fc:	e59f1104 	ldr	r1, [pc, #260]	; 17308 <CUSBBluetoothDevice::Configure()+0x220>
   17200:	ebffe1d2 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   17204:	e1a00006 	mov	r0, r6
   17208:	e28dd014 	add	sp, sp, #20
   1720c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17210:	e3a06000 	mov	r6, #0
   17214:	eb003e6c 	bl	26bcc <CLogger::Get()>
   17218:	e59f30ec 	ldr	r3, [pc, #236]	; 1730c <CUSBBluetoothDevice::Configure()+0x224>
   1721c:	e3a02002 	mov	r2, #2
   17220:	e59f10e0 	ldr	r1, [pc, #224]	; 17308 <CUSBBluetoothDevice::Configure()+0x220>
   17224:	eb003da5 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17228:	e1a00006 	mov	r0, r6
   1722c:	e28dd014 	add	sp, sp, #20
   17230:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17234:	e5953014 	ldr	r3, [r5, #20]
   17238:	e3530000 	cmp	r3, #0
   1723c:	0a000024 	beq	172d4 <CUSBBluetoothDevice::Configure()+0x1ec>
   17240:	e5953018 	ldr	r3, [r5, #24]
   17244:	e3530000 	cmp	r3, #0
   17248:	0a000021 	beq	172d4 <CUSBBluetoothDevice::Configure()+0x1ec>
   1724c:	e5953010 	ldr	r3, [r5, #16]
   17250:	e3530000 	cmp	r3, #0
   17254:	0a00001e 	beq	172d4 <CUSBBluetoothDevice::Configure()+0x1ec>
   17258:	e1a00005 	mov	r0, r5
   1725c:	ebffe0cb 	bl	f590 <CUSBFunction::Configure()>
   17260:	e2506000 	subs	r6, r0, #0
   17264:	0a000021 	beq	172f0 <CUSBBluetoothDevice::Configure()+0x208>
   17268:	e5950010 	ldr	r0, [r5, #16]
   1726c:	ebffe047 	bl	f390 <CUSBEndpoint::GetMaxPacketSize() const>
   17270:	eb004f80 	bl	2b078 <operator new[](unsigned int)>
   17274:	e5850020 	str	r0, [r5, #32]
   17278:	e1a0000d 	mov	r0, sp
   1727c:	eb004238 	bl	27b64 <CString::CString()>
   17280:	e59f3088 	ldr	r3, [pc, #136]	; 17310 <CUSBBluetoothDevice::Configure()+0x228>
   17284:	e59f1088 	ldr	r1, [pc, #136]	; 17314 <CUSBBluetoothDevice::Configure()+0x22c>
   17288:	e5932000 	ldr	r2, [r3]
   1728c:	e1a0000d 	mov	r0, sp
   17290:	e282c001 	add	ip, r2, #1
   17294:	e583c000 	str	ip, [r3]
   17298:	eb004774 	bl	29070 <CString::Format(char const*, ...)>
   1729c:	eb003831 	bl	25368 <CDeviceNameService::Get()>
   172a0:	e1a07000 	mov	r7, r0
   172a4:	e1a0000d 	mov	r0, sp
   172a8:	eb004243 	bl	27bbc <CString::operator char const*() const>
   172ac:	e1a03004 	mov	r3, r4
   172b0:	e1a01000 	mov	r1, r0
   172b4:	e1a02005 	mov	r2, r5
   172b8:	e1a00007 	mov	r0, r7
   172bc:	eb00376f 	bl	25080 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   172c0:	e1a0000d 	mov	r0, sp
   172c4:	eb0041f3 	bl	27a98 <CString::~CString()>
   172c8:	e1a00006 	mov	r0, r6
   172cc:	e28dd014 	add	sp, sp, #20
   172d0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   172d4:	e1a00005 	mov	r0, r5
   172d8:	e3a06000 	mov	r6, #0
   172dc:	e59f1024 	ldr	r1, [pc, #36]	; 17308 <CUSBBluetoothDevice::Configure()+0x220>
   172e0:	ebffe19a 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   172e4:	e1a00006 	mov	r0, r6
   172e8:	e28dd014 	add	sp, sp, #20
   172ec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   172f0:	eb003e35 	bl	26bcc <CLogger::Get()>
   172f4:	e59f301c 	ldr	r3, [pc, #28]	; 17318 <CUSBBluetoothDevice::Configure()+0x230>
   172f8:	e3a02001 	mov	r2, #1
   172fc:	e59f1004 	ldr	r1, [pc, #4]	; 17308 <CUSBBluetoothDevice::Configure()+0x220>
   17300:	eb003d6e 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17304:	eaffffbe 	b	17204 <CUSBBluetoothDevice::Configure()+0x11c>
   17308:	000416c8 	.word	0x000416c8
   1730c:	0004173c 	.word	0x0004173c
   17310:	00047e94 	.word	0x00047e94
   17314:	00041760 	.word	0x00041760
   17318:	0004030c 	.word	0x0004030c

0001731c <CUSBCDCEthernetDevice::GetMACAddress() const>:
   1731c:	e280001c 	add	r0, r0, #28
   17320:	e12fff1e 	bx	lr

00017324 <non-virtual thunk to CUSBCDCEthernetDevice::GetMACAddress() const>:
   17324:	e2400010 	sub	r0, r0, #16
   17328:	eafffffb 	b	1731c <CUSBCDCEthernetDevice::GetMACAddress() const>

0001732c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1732c:	e92d4070 	push	{r4, r5, r6, lr}
   17330:	e59f3074 	ldr	r3, [pc, #116]	; 173ac <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x80>
   17334:	e5905018 	ldr	r5, [r0, #24]
   17338:	e2832038 	add	r2, r3, #56	; 0x38
   1733c:	e3550000 	cmp	r5, #0
   17340:	e1a04000 	mov	r4, r0
   17344:	e5803000 	str	r3, [r0]
   17348:	e5802010 	str	r2, [r0, #16]
   1734c:	0a000004 	beq	17364 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x38>
   17350:	e1a00005 	mov	r0, r5
   17354:	ebffdff8 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   17358:	e1a00005 	mov	r0, r5
   1735c:	e3a01014 	mov	r1, #20
   17360:	eb004f51 	bl	2b0ac <operator delete(void*, unsigned int)>
   17364:	e3a03000 	mov	r3, #0
   17368:	e5945014 	ldr	r5, [r4, #20]
   1736c:	e5843018 	str	r3, [r4, #24]
   17370:	e1550003 	cmp	r5, r3
   17374:	0a000004 	beq	1738c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x60>
   17378:	e1a00005 	mov	r0, r5
   1737c:	ebffdfee 	bl	f33c <CUSBEndpoint::~CUSBEndpoint()>
   17380:	e1a00005 	mov	r0, r5
   17384:	e3a01014 	mov	r1, #20
   17388:	eb004f47 	bl	2b0ac <operator delete(void*, unsigned int)>
   1738c:	e3a03000 	mov	r3, #0
   17390:	e284001c 	add	r0, r4, #28
   17394:	e5843014 	str	r3, [r4, #20]
   17398:	eb004e50 	bl	2ace0 <CMACAddress::~CMACAddress()>
   1739c:	e1a00004 	mov	r0, r4
   173a0:	ebffe051 	bl	f4ec <CUSBFunction::~CUSBFunction()>
   173a4:	e1a00004 	mov	r0, r4
   173a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   173ac:	00041770 	.word	0x00041770

000173b0 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   173b0:	e2400010 	sub	r0, r0, #16
   173b4:	eaffffdc 	b	1732c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

000173b8 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   173b8:	e92d4010 	push	{r4, lr}
   173bc:	e1a04000 	mov	r4, r0
   173c0:	ebffffd9 	bl	1732c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   173c4:	e1a00004 	mov	r0, r4
   173c8:	e3a01024 	mov	r1, #36	; 0x24
   173cc:	eb004f36 	bl	2b0ac <operator delete(void*, unsigned int)>
   173d0:	e1a00004 	mov	r0, r4
   173d4:	e8bd8010 	pop	{r4, pc}

000173d8 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   173d8:	e2400010 	sub	r0, r0, #16
   173dc:	eafffff5 	b	173b8 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

000173e0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   173e0:	e92d4070 	push	{r4, r5, r6, lr}
   173e4:	e5903014 	ldr	r3, [r0, #20]
   173e8:	e24dd030 	sub	sp, sp, #48	; 0x30
   173ec:	e3530000 	cmp	r3, #0
   173f0:	0a000026 	beq	17490 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xb0>
   173f4:	e3510000 	cmp	r1, #0
   173f8:	0a000028 	beq	174a0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xc0>
   173fc:	e3a05000 	mov	r5, #0
   17400:	e1a04000 	mov	r4, r0
   17404:	e1a06002 	mov	r6, r2
   17408:	e58d5000 	str	r5, [sp]
   1740c:	e1a02001 	mov	r2, r1
   17410:	e28d0008 	add	r0, sp, #8
   17414:	e1a01003 	mov	r1, r3
   17418:	e3a03d19 	mov	r3, #1600	; 0x640
   1741c:	ebfff407 	bl	14440 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   17420:	e28d0008 	add	r0, sp, #8
   17424:	ebfff485 	bl	14640 <CUSBRequest::SetCompleteOnNAK()>
   17428:	e1a00004 	mov	r0, r4
   1742c:	ebffe131 	bl	f8f8 <CUSBFunction::GetHost() const>
   17430:	e5903000 	ldr	r3, [r0]
   17434:	e1a02005 	mov	r2, r5
   17438:	e5933008 	ldr	r3, [r3, #8]
   1743c:	e28d1008 	add	r1, sp, #8
   17440:	e12fff33 	blx	r3
   17444:	e2504000 	subs	r4, r0, #0
   17448:	0a00000a 	beq	17478 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x98>
   1744c:	e28d0008 	add	r0, sp, #8
   17450:	ebfff42d 	bl	1450c <CUSBRequest::GetResultLength() const>
   17454:	e3500000 	cmp	r0, #0
   17458:	0a000006 	beq	17478 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x98>
   1745c:	e3560000 	cmp	r6, #0
   17460:	15860000 	strne	r0, [r6]
   17464:	1a000004 	bne	1747c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x9c>
   17468:	e3a020c3 	mov	r2, #195	; 0xc3
   1746c:	e59f103c 	ldr	r1, [pc, #60]	; 174b0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   17470:	e59f003c 	ldr	r0, [pc, #60]	; 174b4 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd4>
   17474:	eb0034e1 	bl	24800 <assertion_failed>
   17478:	e3a04000 	mov	r4, #0
   1747c:	e28d0008 	add	r0, sp, #8
   17480:	ebfff40f 	bl	144c4 <CUSBRequest::~CUSBRequest()>
   17484:	e1a00004 	mov	r0, r4
   17488:	e28dd030 	add	sp, sp, #48	; 0x30
   1748c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17490:	e3a020b2 	mov	r2, #178	; 0xb2
   17494:	e59f1014 	ldr	r1, [pc, #20]	; 174b0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   17498:	e59f0018 	ldr	r0, [pc, #24]	; 174b8 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd8>
   1749c:	eb0034d7 	bl	24800 <assertion_failed>
   174a0:	e3a020b3 	mov	r2, #179	; 0xb3
   174a4:	e59f1004 	ldr	r1, [pc, #4]	; 174b0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   174a8:	e59f000c 	ldr	r0, [pc, #12]	; 174bc <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   174ac:	eb0034d3 	bl	24800 <assertion_failed>
   174b0:	000417d8 	.word	0x000417d8
   174b4:	000413c0 	.word	0x000413c0
   174b8:	0004134c 	.word	0x0004134c
   174bc:	00040b94 	.word	0x00040b94

000174c0 <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   174c0:	e2400010 	sub	r0, r0, #16
   174c4:	eaffffc5 	b	173e0 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>

000174c8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   174c8:	e92d4070 	push	{r4, r5, r6, lr}
   174cc:	e5903018 	ldr	r3, [r0, #24]
   174d0:	e24dd008 	sub	sp, sp, #8
   174d4:	e3530000 	cmp	r3, #0
   174d8:	0a000011 	beq	17524 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x5c>
   174dc:	e3510000 	cmp	r1, #0
   174e0:	e1a05001 	mov	r5, r1
   174e4:	0a000012 	beq	17534 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x6c>
   174e8:	e3520d19 	cmp	r2, #1600	; 0x640
   174ec:	e1a06002 	mov	r6, r2
   174f0:	8a000013 	bhi	17544 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x7c>
   174f4:	e1a04000 	mov	r4, r0
   174f8:	ebffe0fe 	bl	f8f8 <CUSBFunction::GetHost() const>
   174fc:	e3a0c000 	mov	ip, #0
   17500:	e5941018 	ldr	r1, [r4, #24]
   17504:	e1a03006 	mov	r3, r6
   17508:	e1a02005 	mov	r2, r5
   1750c:	e58dc000 	str	ip, [sp]
   17510:	ebffed30 	bl	129d8 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   17514:	e1e00000 	mvn	r0, r0
   17518:	e1a00fa0 	lsr	r0, r0, #31
   1751c:	e28dd008 	add	sp, sp, #8
   17520:	e8bd8070 	pop	{r4, r5, r6, pc}
   17524:	e3a020aa 	mov	r2, #170	; 0xaa
   17528:	e59f1024 	ldr	r1, [pc, #36]	; 17554 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   1752c:	e59f0024 	ldr	r0, [pc, #36]	; 17558 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x90>
   17530:	eb0034b2 	bl	24800 <assertion_failed>
   17534:	e3a020ab 	mov	r2, #171	; 0xab
   17538:	e59f1014 	ldr	r1, [pc, #20]	; 17554 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   1753c:	e59f0018 	ldr	r0, [pc, #24]	; 1755c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x94>
   17540:	eb0034ae 	bl	24800 <assertion_failed>
   17544:	e3a020ac 	mov	r2, #172	; 0xac
   17548:	e59f1004 	ldr	r1, [pc, #4]	; 17554 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   1754c:	e59f000c 	ldr	r0, [pc, #12]	; 17560 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x98>
   17550:	eb0034aa 	bl	24800 <assertion_failed>
   17554:	000417d8 	.word	0x000417d8
   17558:	000413d4 	.word	0x000413d4
   1755c:	00040b94 	.word	0x00040b94
   17560:	000417ec 	.word	0x000417ec

00017564 <non-virtual thunk to CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   17564:	e2400010 	sub	r0, r0, #16
   17568:	eaffffd6 	b	174c8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>

0001756c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   1756c:	e92d4010 	push	{r4, lr}
   17570:	e1a04000 	mov	r4, r0
   17574:	ebffe06d 	bl	f730 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   17578:	e3a02000 	mov	r2, #0
   1757c:	e59f3024 	ldr	r3, [pc, #36]	; 175a8 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x3c>
   17580:	e5842014 	str	r2, [r4, #20]
   17584:	e2831008 	add	r1, r3, #8
   17588:	e2833040 	add	r3, r3, #64	; 0x40
   1758c:	e5841000 	str	r1, [r4]
   17590:	e5843010 	str	r3, [r4, #16]
   17594:	e5842018 	str	r2, [r4, #24]
   17598:	e284001c 	add	r0, r4, #28
   1759c:	eb004dcc 	bl	2acd4 <CMACAddress::CMACAddress()>
   175a0:	e1a00004 	mov	r0, r4
   175a4:	e8bd8010 	pop	{r4, pc}
   175a8:	00041768 	.word	0x00041768

000175ac <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   175ac:	e92d4030 	push	{r4, r5, lr}
   175b0:	e24dd01c 	sub	sp, sp, #28
   175b4:	e1a04001 	mov	r4, r1
   175b8:	e1a05000 	mov	r5, r0
   175bc:	ebffe0b7 	bl	f8a0 <CUSBFunction::GetDevice() const>
   175c0:	e1a01000 	mov	r1, r0
   175c4:	e28d000c 	add	r0, sp, #12
   175c8:	eb00021c 	bl	17e40 <CUSBString::CUSBString(CUSBDevice*)>
   175cc:	e3540000 	cmp	r4, #0
   175d0:	1a000005 	bne	175ec <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   175d4:	e3a04000 	mov	r4, #0
   175d8:	e28d000c 	add	r0, sp, #12
   175dc:	eb00025a 	bl	17f4c <CUSBString::~CUSBString()>
   175e0:	e1a00004 	mov	r0, r4
   175e4:	e28dd01c 	add	sp, sp, #28
   175e8:	e8bd8030 	pop	{r4, r5, pc}
   175ec:	e28d000c 	add	r0, sp, #12
   175f0:	eb0002ec 	bl	181a8 <CUSBString::GetLanguageID()>
   175f4:	e1a01004 	mov	r1, r4
   175f8:	e1a02000 	mov	r2, r0
   175fc:	e28d000c 	add	r0, sp, #12
   17600:	eb000261 	bl	17f8c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   17604:	e2504000 	subs	r4, r0, #0
   17608:	0afffff1 	beq	175d4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1760c:	e28d000c 	add	r0, sp, #12
   17610:	eb0002e2 	bl	181a0 <CUSBString::Get() const>
   17614:	e3500000 	cmp	r0, #0
   17618:	0a00001b 	beq	1768c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe0>
   1761c:	e2801002 	add	r1, r0, #2
   17620:	e28dc003 	add	ip, sp, #3
   17624:	e280000e 	add	r0, r0, #14
   17628:	e15130d2 	ldrsb	r3, [r1, #-2]
   1762c:	e3530039 	cmp	r3, #57	; 0x39
   17630:	c2433007 	subgt	r3, r3, #7
   17634:	c6af3073 	sxtbgt	r3, r3
   17638:	e2433030 	sub	r3, r3, #48	; 0x30
   1763c:	e6ef2073 	uxtb	r2, r3
   17640:	e352000f 	cmp	r2, #15
   17644:	8affffe2 	bhi	175d4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   17648:	e15130d1 	ldrsb	r3, [r1, #-1]
   1764c:	e3530039 	cmp	r3, #57	; 0x39
   17650:	c2433007 	subgt	r3, r3, #7
   17654:	c6af3073 	sxtbgt	r3, r3
   17658:	e2433030 	sub	r3, r3, #48	; 0x30
   1765c:	e6ef3073 	uxtb	r3, r3
   17660:	e353000f 	cmp	r3, #15
   17664:	8affffda 	bhi	175d4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   17668:	e2811002 	add	r1, r1, #2
   1766c:	e1833202 	orr	r3, r3, r2, lsl #4
   17670:	e1500001 	cmp	r0, r1
   17674:	e5ec3001 	strb	r3, [ip, #1]!
   17678:	1affffea 	bne	17628 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   1767c:	e285001c 	add	r0, r5, #28
   17680:	e28d1004 	add	r1, sp, #4
   17684:	eb004db3 	bl	2ad58 <CMACAddress::Set(unsigned char const*)>
   17688:	eaffffd2 	b	175d8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   1768c:	e3a020d3 	mov	r2, #211	; 0xd3
   17690:	e59f1004 	ldr	r1, [pc, #4]	; 1769c <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf0>
   17694:	e59f0004 	ldr	r0, [pc, #4]	; 176a0 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xf4>
   17698:	eb003458 	bl	24800 <assertion_failed>
   1769c:	000417d8 	.word	0x000417d8
   176a0:	0004180c 	.word	0x0004180c

000176a4 <CUSBCDCEthernetDevice::Configure()>:
   176a4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   176a8:	e1a05000 	mov	r5, r0
   176ac:	e24dd01c 	sub	sp, sp, #28
   176b0:	e3a06024 	mov	r6, #36	; 0x24
   176b4:	ea000002 	b	176c4 <CUSBCDCEthernetDevice::Configure()+0x20>
   176b8:	e5d43002 	ldrb	r3, [r4, #2]
   176bc:	e353000f 	cmp	r3, #15
   176c0:	0a00000a 	beq	176f0 <CUSBCDCEthernetDevice::Configure()+0x4c>
   176c4:	e1a01006 	mov	r1, r6
   176c8:	e1a00005 	mov	r0, r5
   176cc:	ebffe094 	bl	f924 <CUSBFunction::GetDescriptor(unsigned char)>
   176d0:	e2504000 	subs	r4, r0, #0
   176d4:	1afffff7 	bne	176b8 <CUSBCDCEthernetDevice::Configure()+0x14>
   176d8:	e1a00005 	mov	r0, r5
   176dc:	e59f11f0 	ldr	r1, [pc, #496]	; 178d4 <CUSBCDCEthernetDevice::Configure()+0x230>
   176e0:	ebffe09a 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   176e4:	e1a00004 	mov	r0, r4
   176e8:	e28dd01c 	add	sp, sp, #28
   176ec:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   176f0:	e3a06004 	mov	r6, #4
   176f4:	e1a01006 	mov	r1, r6
   176f8:	e1a00005 	mov	r0, r5
   176fc:	ebffe088 	bl	f924 <CUSBFunction::GetDescriptor(unsigned char)>
   17700:	e2503000 	subs	r3, r0, #0
   17704:	0a00003c 	beq	177fc <CUSBCDCEthernetDevice::Configure()+0x158>
   17708:	e5d32005 	ldrb	r2, [r3, #5]
   1770c:	e352000a 	cmp	r2, #10
   17710:	1afffff7 	bne	176f4 <CUSBCDCEthernetDevice::Configure()+0x50>
   17714:	e5d32006 	ldrb	r2, [r3, #6]
   17718:	e3520000 	cmp	r2, #0
   1771c:	1afffff4 	bne	176f4 <CUSBCDCEthernetDevice::Configure()+0x50>
   17720:	e5d32007 	ldrb	r2, [r3, #7]
   17724:	e3520000 	cmp	r2, #0
   17728:	1afffff1 	bne	176f4 <CUSBCDCEthernetDevice::Configure()+0x50>
   1772c:	e5d33004 	ldrb	r3, [r3, #4]
   17730:	e3530001 	cmp	r3, #1
   17734:	daffffee 	ble	176f4 <CUSBCDCEthernetDevice::Configure()+0x50>
   17738:	e5d41003 	ldrb	r1, [r4, #3]
   1773c:	e1a00005 	mov	r0, r5
   17740:	ebffff99 	bl	175ac <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   17744:	e2504000 	subs	r4, r0, #0
   17748:	0a000043 	beq	1785c <CUSBCDCEthernetDevice::Configure()+0x1b8>
   1774c:	e28d0008 	add	r0, sp, #8
   17750:	eb004103 	bl	27b64 <CString::CString()>
   17754:	e28d1008 	add	r1, sp, #8
   17758:	e285001c 	add	r0, r5, #28
   1775c:	eb004dd6 	bl	2aebc <CMACAddress::Format(CString*) const>
   17760:	eb003d19 	bl	26bcc <CLogger::Get()>
   17764:	e1a04000 	mov	r4, r0
   17768:	e28d0008 	add	r0, sp, #8
   1776c:	eb004112 	bl	27bbc <CString::operator char const*() const>
   17770:	e59f3160 	ldr	r3, [pc, #352]	; 178d8 <CUSBCDCEthernetDevice::Configure()+0x234>
   17774:	e58d0000 	str	r0, [sp]
   17778:	e3a02004 	mov	r2, #4
   1777c:	e1a00004 	mov	r0, r4
   17780:	e59f114c 	ldr	r1, [pc, #332]	; 178d4 <CUSBCDCEthernetDevice::Configure()+0x230>
   17784:	eb003c4d 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17788:	e3a06005 	mov	r6, #5
   1778c:	e3a07014 	mov	r7, #20
   17790:	ea000003 	b	177a4 <CUSBCDCEthernetDevice::Configure()+0x100>
   17794:	e5d43003 	ldrb	r3, [r4, #3]
   17798:	e203303f 	and	r3, r3, #63	; 0x3f
   1779c:	e3530002 	cmp	r3, #2
   177a0:	0a00001c 	beq	17818 <CUSBCDCEthernetDevice::Configure()+0x174>
   177a4:	e1a01006 	mov	r1, r6
   177a8:	e1a00005 	mov	r0, r5
   177ac:	ebffe05c 	bl	f924 <CUSBFunction::GetDescriptor(unsigned char)>
   177b0:	e2504000 	subs	r4, r0, #0
   177b4:	1afffff6 	bne	17794 <CUSBCDCEthernetDevice::Configure()+0xf0>
   177b8:	e5953014 	ldr	r3, [r5, #20]
   177bc:	e1a00005 	mov	r0, r5
   177c0:	e3530000 	cmp	r3, #0
   177c4:	0a000030 	beq	1788c <CUSBCDCEthernetDevice::Configure()+0x1e8>
   177c8:	e5953018 	ldr	r3, [r5, #24]
   177cc:	e3530000 	cmp	r3, #0
   177d0:	0a00002d 	beq	1788c <CUSBCDCEthernetDevice::Configure()+0x1e8>
   177d4:	ebffdf6d 	bl	f590 <CUSBFunction::Configure()>
   177d8:	e2504000 	subs	r4, r0, #0
   177dc:	0a000024 	beq	17874 <CUSBCDCEthernetDevice::Configure()+0x1d0>
   177e0:	e2850010 	add	r0, r5, #16
   177e4:	eb004dd5 	bl	2af40 <CNetDevice::AddNetDevice()>
   177e8:	e28d0008 	add	r0, sp, #8
   177ec:	eb0040a9 	bl	27a98 <CString::~CString()>
   177f0:	e1a00004 	mov	r0, r4
   177f4:	e28dd01c 	add	sp, sp, #28
   177f8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   177fc:	e1a04003 	mov	r4, r3
   17800:	e1a00005 	mov	r0, r5
   17804:	e59f10c8 	ldr	r1, [pc, #200]	; 178d4 <CUSBCDCEthernetDevice::Configure()+0x230>
   17808:	ebffe050 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   1780c:	e1a00004 	mov	r0, r4
   17810:	e28dd01c 	add	sp, sp, #28
   17814:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17818:	e1d430d2 	ldrsb	r3, [r4, #2]
   1781c:	e3530000 	cmp	r3, #0
   17820:	ba00001d 	blt	1789c <CUSBCDCEthernetDevice::Configure()+0x1f8>
   17824:	e5953018 	ldr	r3, [r5, #24]
   17828:	e1a00005 	mov	r0, r5
   1782c:	e3530000 	cmp	r3, #0
   17830:	1a000015 	bne	1788c <CUSBCDCEthernetDevice::Configure()+0x1e8>
   17834:	ebffe019 	bl	f8a0 <CUSBFunction::GetDevice() const>
   17838:	e1a09000 	mov	r9, r0
   1783c:	e1a00007 	mov	r0, r7
   17840:	eb004e0b 	bl	2b074 <operator new(unsigned int)>
   17844:	e1a08000 	mov	r8, r0
   17848:	e1a02004 	mov	r2, r4
   1784c:	e1a01009 	mov	r1, r9
   17850:	ebffde4f 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   17854:	e5858018 	str	r8, [r5, #24]
   17858:	eaffffd1 	b	177a4 <CUSBCDCEthernetDevice::Configure()+0x100>
   1785c:	eb003cda 	bl	26bcc <CLogger::Get()>
   17860:	e59f3074 	ldr	r3, [pc, #116]	; 178dc <CUSBCDCEthernetDevice::Configure()+0x238>
   17864:	e3a02001 	mov	r2, #1
   17868:	e59f1064 	ldr	r1, [pc, #100]	; 178d4 <CUSBCDCEthernetDevice::Configure()+0x230>
   1786c:	eb003c13 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17870:	eaffff9b 	b	176e4 <CUSBCDCEthernetDevice::Configure()+0x40>
   17874:	eb003cd4 	bl	26bcc <CLogger::Get()>
   17878:	e59f3060 	ldr	r3, [pc, #96]	; 178e0 <CUSBCDCEthernetDevice::Configure()+0x23c>
   1787c:	e3a02001 	mov	r2, #1
   17880:	e59f104c 	ldr	r1, [pc, #76]	; 178d4 <CUSBCDCEthernetDevice::Configure()+0x230>
   17884:	eb003c0d 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17888:	eaffffd6 	b	177e8 <CUSBCDCEthernetDevice::Configure()+0x144>
   1788c:	e59f1040 	ldr	r1, [pc, #64]	; 178d4 <CUSBCDCEthernetDevice::Configure()+0x230>
   17890:	ebffe02e 	bl	f950 <CUSBFunction::ConfigurationError(char const*) const>
   17894:	e3a04000 	mov	r4, #0
   17898:	eaffffd2 	b	177e8 <CUSBCDCEthernetDevice::Configure()+0x144>
   1789c:	e5953014 	ldr	r3, [r5, #20]
   178a0:	e1a00005 	mov	r0, r5
   178a4:	e3530000 	cmp	r3, #0
   178a8:	1afffff7 	bne	1788c <CUSBCDCEthernetDevice::Configure()+0x1e8>
   178ac:	ebffdffb 	bl	f8a0 <CUSBFunction::GetDevice() const>
   178b0:	e1a09000 	mov	r9, r0
   178b4:	e1a00007 	mov	r0, r7
   178b8:	eb004ded 	bl	2b074 <operator new(unsigned int)>
   178bc:	e1a08000 	mov	r8, r0
   178c0:	e1a02004 	mov	r2, r4
   178c4:	e1a01009 	mov	r1, r9
   178c8:	ebffde31 	bl	f194 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   178cc:	e5858014 	str	r8, [r5, #20]
   178d0:	eaffffb3 	b	177a4 <CUSBCDCEthernetDevice::Configure()+0x100>
   178d4:	000417d0 	.word	0x000417d0
   178d8:	00041474 	.word	0x00041474
   178dc:	00041658 	.word	0x00041658
   178e0:	0004030c 	.word	0x0004030c

000178e4 <CNetDevice::IsLinkUp()>:
   178e4:	e3a00001 	mov	r0, #1
   178e8:	e12fff1e 	bx	lr

000178ec <CNetDevice::GetLinkSpeed()>:
   178ec:	e3a00006 	mov	r0, #6
   178f0:	e12fff1e 	bx	lr

000178f4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   178f4:	e3a0c000 	mov	ip, #0
   178f8:	e0813002 	add	r3, r1, r2
   178fc:	e151000c 	cmp	r1, ip
   17900:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   17904:	e8800006 	stm	r0, {r1, r2}
   17908:	e5801010 	str	r1, [r0, #16]
   1790c:	e5801018 	str	r1, [r0, #24]
   17910:	e580300c 	str	r3, [r0, #12]
   17914:	e5c0c008 	strb	ip, [r0, #8]
   17918:	e580c014 	str	ip, [r0, #20]
   1791c:	0a000030 	beq	179e4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   17920:	e242c004 	sub	ip, r2, #4
   17924:	e35c0f7f 	cmp	ip, #508	; 0x1fc
   17928:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   1792c:	e5d1c000 	ldrb	ip, [r1]
   17930:	e35c0009 	cmp	ip, #9
   17934:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   17938:	e5d1c001 	ldrb	ip, [r1, #1]
   1793c:	e35c0002 	cmp	ip, #2
   17940:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   17944:	e5d1c002 	ldrb	ip, [r1, #2]
   17948:	e5d1e003 	ldrb	lr, [r1, #3]
   1794c:	e18cc40e 	orr	ip, ip, lr, lsl #8
   17950:	e15c0002 	cmp	ip, r2
   17954:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   17958:	e3a05000 	mov	r5, #0
   1795c:	3081300c 	addcc	r3, r1, ip
   17960:	3580300c 	strcc	r3, [r0, #12]
   17964:	e1a04005 	mov	r4, r5
   17968:	e3a06009 	mov	r6, #9
   1796c:	e3a08007 	mov	r8, #7
   17970:	e3a07001 	mov	r7, #1
   17974:	ea000005 	b	17990 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x9c>
   17978:	e3520005 	cmp	r2, #5
   1797c:	0a000020 	beq	17a04 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x110>
   17980:	e3520002 	cmp	r2, #2
   17984:	0a00001a 	beq	179f4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x100>
   17988:	e1a0100c 	mov	r1, ip
   1798c:	e1a04002 	mov	r4, r2
   17990:	e2812002 	add	r2, r1, #2
   17994:	e1530002 	cmp	r3, r2
   17998:	9a000020 	bls	17a20 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x12c>
   1799c:	e5d1e000 	ldrb	lr, [r1]
   179a0:	e5d12001 	ldrb	r2, [r1, #1]
   179a4:	e081c00e 	add	ip, r1, lr
   179a8:	e15c0003 	cmp	ip, r3
   179ac:	8a00000a 	bhi	179dc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   179b0:	e3520004 	cmp	r2, #4
   179b4:	1affffef 	bne	17978 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x84>
   179b8:	e3540000 	cmp	r4, #0
   179bc:	0a000006 	beq	179dc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   179c0:	e5d15005 	ldrb	r5, [r1, #5]
   179c4:	e1a04006 	mov	r4, r6
   179c8:	e2455001 	sub	r5, r5, #1
   179cc:	e16f5f15 	clz	r5, r5
   179d0:	e1a052a5 	lsr	r5, r5, #5
   179d4:	e15e0004 	cmp	lr, r4
   179d8:	0affffea 	beq	17988 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x94>
   179dc:	e5801018 	str	r1, [r0, #24]
   179e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   179e4:	e3a02024 	mov	r2, #36	; 0x24
   179e8:	e59f1044 	ldr	r1, [pc, #68]	; 17a34 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x140>
   179ec:	e59f0044 	ldr	r0, [pc, #68]	; 17a38 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x144>
   179f0:	eb003382 	bl	24800 <assertion_failed>
   179f4:	e3540000 	cmp	r4, #0
   179f8:	1afffff7 	bne	179dc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   179fc:	e1a04006 	mov	r4, r6
   17a00:	eafffff3 	b	179d4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe0>
   17a04:	e31400fd 	tst	r4, #253	; 0xfd
   17a08:	0afffff3 	beq	179dc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   17a0c:	e3550000 	cmp	r5, #0
   17a10:	11a04006 	movne	r4, r6
   17a14:	11a05007 	movne	r5, r7
   17a18:	01a04008 	moveq	r4, r8
   17a1c:	eaffffec 	b	179d4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe0>
   17a20:	e1510003 	cmp	r1, r3
   17a24:	1affffec 	bne	179dc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe8>
   17a28:	e3a03001 	mov	r3, #1
   17a2c:	e5c03008 	strb	r3, [r0, #8]
   17a30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   17a34:	0004181c 	.word	0x0004181c
   17a38:	00041830 	.word	0x00041830

00017a3c <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   17a3c:	e3510000 	cmp	r1, #0
   17a40:	e92d4070 	push	{r4, r5, r6, lr}
   17a44:	0a00000d 	beq	17a80 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x44>
   17a48:	e8910044 	ldm	r1, {r2, r6}
   17a4c:	e5d15008 	ldrb	r5, [r1, #8]
   17a50:	e591400c 	ldr	r4, [r1, #12]
   17a54:	e591e010 	ldr	lr, [r1, #16]
   17a58:	e591c014 	ldr	ip, [r1, #20]
   17a5c:	e5802000 	str	r2, [r0]
   17a60:	e5912018 	ldr	r2, [r1, #24]
   17a64:	e5806004 	str	r6, [r0, #4]
   17a68:	e5c05008 	strb	r5, [r0, #8]
   17a6c:	e580400c 	str	r4, [r0, #12]
   17a70:	e580e010 	str	lr, [r0, #16]
   17a74:	e580c014 	str	ip, [r0, #20]
   17a78:	e5802018 	str	r2, [r0, #24]
   17a7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17a80:	e3a02082 	mov	r2, #130	; 0x82
   17a84:	e59f1004 	ldr	r1, [pc, #4]	; 17a90 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x54>
   17a88:	e59f0004 	ldr	r0, [pc, #4]	; 17a94 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x58>
   17a8c:	eb00335b 	bl	24800 <assertion_failed>
   17a90:	0004181c 	.word	0x0004181c
   17a94:	00041840 	.word	0x00041840

00017a98 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   17a98:	e12fff1e 	bx	lr

00017a9c <CUSBConfigurationParser::IsValid() const>:
   17a9c:	e5d00008 	ldrb	r0, [r0, #8]
   17aa0:	e12fff1e 	bx	lr

00017aa4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   17aa4:	e5d03008 	ldrb	r3, [r0, #8]
   17aa8:	e92d4070 	push	{r4, r5, r6, lr}
   17aac:	e3530000 	cmp	r3, #0
   17ab0:	0a00002a 	beq	17b60 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xbc>
   17ab4:	e590c010 	ldr	ip, [r0, #16]
   17ab8:	e590e00c 	ldr	lr, [r0, #12]
   17abc:	e15c000e 	cmp	ip, lr
   17ac0:	2a000022 	bcs	17b50 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xac>
   17ac4:	e5dc3000 	ldrb	r3, [ip]
   17ac8:	e5dc2001 	ldrb	r2, [ip, #1]
   17acc:	e08c3003 	add	r3, ip, r3
   17ad0:	e153000e 	cmp	r3, lr
   17ad4:	8a000018 	bhi	17b3c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x98>
   17ad8:	e2415005 	sub	r5, r1, #5
   17adc:	e16f5f15 	clz	r5, r5
   17ae0:	e3520004 	cmp	r2, #4
   17ae4:	03510005 	cmpeq	r1, #5
   17ae8:	e1a052a5 	lsr	r5, r5, #5
   17aec:	0a000017 	beq	17b50 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xac>
   17af0:	e1510002 	cmp	r1, r2
   17af4:	1a000008 	bne	17b1c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x78>
   17af8:	ea000020 	b	17b80 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xdc>
   17afc:	e35c0004 	cmp	ip, #4
   17b00:	13a04000 	movne	r4, #0
   17b04:	02054001 	andeq	r4, r5, #1
   17b08:	e3540000 	cmp	r4, #0
   17b0c:	1a00000e 	bne	17b4c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa8>
   17b10:	e15c0001 	cmp	ip, r1
   17b14:	0a000015 	beq	17b70 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xcc>
   17b18:	e1a03002 	mov	r3, r2
   17b1c:	e153000e 	cmp	r3, lr
   17b20:	2a000009 	bcs	17b4c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xa8>
   17b24:	e5d32000 	ldrb	r2, [r3]
   17b28:	e5d3c001 	ldrb	ip, [r3, #1]
   17b2c:	e0832002 	add	r2, r3, r2
   17b30:	e152000e 	cmp	r2, lr
   17b34:	9afffff0 	bls	17afc <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x58>
   17b38:	e5803010 	str	r3, [r0, #16]
   17b3c:	e3a020a9 	mov	r2, #169	; 0xa9
   17b40:	e59f1040 	ldr	r1, [pc, #64]	; 17b88 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xe4>
   17b44:	e59f0040 	ldr	r0, [pc, #64]	; 17b8c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xe8>
   17b48:	eb00332c 	bl	24800 <assertion_failed>
   17b4c:	e5803010 	str	r3, [r0, #16]
   17b50:	e3a0c000 	mov	ip, #0
   17b54:	e580c014 	str	ip, [r0, #20]
   17b58:	e1a0000c 	mov	r0, ip
   17b5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17b60:	e3a0209f 	mov	r2, #159	; 0x9f
   17b64:	e59f101c 	ldr	r1, [pc, #28]	; 17b88 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xe4>
   17b68:	e59f0020 	ldr	r0, [pc, #32]	; 17b90 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xec>
   17b6c:	eb003323 	bl	24800 <assertion_failed>
   17b70:	e1a0c003 	mov	ip, r3
   17b74:	e5802010 	str	r2, [r0, #16]
   17b78:	e580c018 	str	ip, [r0, #24]
   17b7c:	eafffff4 	b	17b54 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xb0>
   17b80:	e1a02003 	mov	r2, r3
   17b84:	eafffffa 	b	17b74 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0xd0>
   17b88:	0004181c 	.word	0x0004181c
   17b8c:	00041850 	.word	0x00041850
   17b90:	0003f918 	.word	0x0003f918

00017b94 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   17b94:	e5d03008 	ldrb	r3, [r0, #8]
   17b98:	e92d4010 	push	{r4, lr}
   17b9c:	e3530000 	cmp	r3, #0
   17ba0:	0a000006 	beq	17bc0 <CUSBConfigurationParser::GetCurrentDescriptor()+0x2c>
   17ba4:	e5900014 	ldr	r0, [r0, #20]
   17ba8:	e3500000 	cmp	r0, #0
   17bac:	18bd8010 	popne	{r4, pc}
   17bb0:	e3a020c8 	mov	r2, #200	; 0xc8
   17bb4:	e59f1014 	ldr	r1, [pc, #20]	; 17bd0 <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   17bb8:	e59f0014 	ldr	r0, [pc, #20]	; 17bd4 <CUSBConfigurationParser::GetCurrentDescriptor()+0x40>
   17bbc:	eb00330f 	bl	24800 <assertion_failed>
   17bc0:	e3a020c7 	mov	r2, #199	; 0xc7
   17bc4:	e59f1004 	ldr	r1, [pc, #4]	; 17bd0 <CUSBConfigurationParser::GetCurrentDescriptor()+0x3c>
   17bc8:	e59f0008 	ldr	r0, [pc, #8]	; 17bd8 <CUSBConfigurationParser::GetCurrentDescriptor()+0x44>
   17bcc:	eb00330b 	bl	24800 <assertion_failed>
   17bd0:	0004181c 	.word	0x0004181c
   17bd4:	0004186c 	.word	0x0004186c
   17bd8:	0003f918 	.word	0x0003f918

00017bdc <CUSBConfigurationParser::Error(char const*) const>:
   17bdc:	e92d4030 	push	{r4, r5, lr}
   17be0:	e2515000 	subs	r5, r1, #0
   17be4:	e24dd00c 	sub	sp, sp, #12
   17be8:	0a00000e 	beq	17c28 <CUSBConfigurationParser::Error(char const*) const+0x4c>
   17bec:	e1a04000 	mov	r4, r0
   17bf0:	eb003bf5 	bl	26bcc <CLogger::Get()>
   17bf4:	e5941000 	ldr	r1, [r4]
   17bf8:	e5942018 	ldr	r2, [r4, #24]
   17bfc:	e59f3034 	ldr	r3, [pc, #52]	; 17c38 <CUSBConfigurationParser::Error(char const*) const+0x5c>
   17c00:	e0422001 	sub	r2, r2, r1
   17c04:	e58d2000 	str	r2, [sp]
   17c08:	e1a01005 	mov	r1, r5
   17c0c:	e3a02001 	mov	r2, #1
   17c10:	eb003b2a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17c14:	e8940003 	ldm	r4, {r0, r1}
   17c18:	e1a02005 	mov	r2, r5
   17c1c:	e28dd00c 	add	sp, sp, #12
   17c20:	e8bd4030 	pop	{r4, r5, lr}
   17c24:	ea003469 	b	24dd0 <debug_hexdump(void const*, unsigned int, char const*)>
   17c28:	e3a020cf 	mov	r2, #207	; 0xcf
   17c2c:	e59f1008 	ldr	r1, [pc, #8]	; 17c3c <CUSBConfigurationParser::Error(char const*) const+0x60>
   17c30:	e59f0008 	ldr	r0, [pc, #8]	; 17c40 <CUSBConfigurationParser::Error(char const*) const+0x64>
   17c34:	eb0032f1 	bl	24800 <assertion_failed>
   17c38:	00041888 	.word	0x00041888
   17c3c:	0004181c 	.word	0x0004181c
   17c40:	00040374 	.word	0x00040374

00017c44 <CUSBGamePadDevice::GetInitialState()>:
   17c44:	e2800024 	add	r0, r0, #36	; 0x24
   17c48:	e12fff1e 	bx	lr

00017c4c <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   17c4c:	e3510000 	cmp	r1, #0
   17c50:	012fff1e 	bxeq	lr
   17c54:	e280cf4a 	add	ip, r0, #296	; 0x128
   17c58:	e1dcc0b0 	ldrh	ip, [ip]
   17c5c:	e92d4070 	push	{r4, r5, r6, lr}
   17c60:	e15c0002 	cmp	ip, r2
   17c64:	e1a04000 	mov	r4, r0
   17c68:	18bd8070 	popne	{r4, r5, r6, pc}
   17c6c:	e5902124 	ldr	r2, [r0, #292]	; 0x124
   17c70:	e3520000 	cmp	r2, #0
   17c74:	08bd8070 	popeq	{r4, r5, r6, pc}
   17c78:	e1a05000 	mov	r5, r0
   17c7c:	e4953024 	ldr	r3, [r5], #36	; 0x24
   17c80:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   17c84:	e12fff33 	blx	r3
   17c88:	e594012c 	ldr	r0, [r4, #300]	; 0x12c
   17c8c:	e1a01005 	mov	r1, r5
   17c90:	e5943124 	ldr	r3, [r4, #292]	; 0x124
   17c94:	e2400001 	sub	r0, r0, #1
   17c98:	e8bd4070 	pop	{r4, r5, r6, lr}
   17c9c:	e12fff13 	bx	r3

00017ca0 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   17ca0:	e5903124 	ldr	r3, [r0, #292]	; 0x124
   17ca4:	e92d4010 	push	{r4, lr}
   17ca8:	e3530000 	cmp	r3, #0
   17cac:	1a000006 	bne	17ccc <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x2c>
   17cb0:	e3510000 	cmp	r1, #0
   17cb4:	e5801124 	str	r1, [r0, #292]	; 0x124
   17cb8:	18bd8010 	popne	{r4, pc}
   17cbc:	e3a0204d 	mov	r2, #77	; 0x4d
   17cc0:	e59f1014 	ldr	r1, [pc, #20]	; 17cdc <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   17cc4:	e59f0014 	ldr	r0, [pc, #20]	; 17ce0 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x40>
   17cc8:	eb0032cc 	bl	24800 <assertion_failed>
   17ccc:	e3a0204b 	mov	r2, #75	; 0x4b
   17cd0:	e59f1004 	ldr	r1, [pc, #4]	; 17cdc <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x3c>
   17cd4:	e59f0008 	ldr	r0, [pc, #8]	; 17ce4 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x44>
   17cd8:	eb0032c8 	bl	24800 <assertion_failed>
   17cdc:	00041914 	.word	0x00041914
   17ce0:	0004193c 	.word	0x0004193c
   17ce4:	00041924 	.word	0x00041924

00017ce8 <CUSBGamePadDevice::Configure()>:
   17ce8:	e92d4030 	push	{r4, r5, lr}
   17cec:	e2803f4a 	add	r3, r0, #296	; 0x128
   17cf0:	e1d310b0 	ldrh	r1, [r3]
   17cf4:	e24dd00c 	sub	sp, sp, #12
   17cf8:	e3510000 	cmp	r1, #0
   17cfc:	0a00001a 	beq	17d6c <CUSBGamePadDevice::Configure()+0x84>
   17d00:	e1a04000 	mov	r4, r0
   17d04:	ebffe921 	bl	12190 <CUSBHIDDevice::Configure(unsigned int)>
   17d08:	e2505000 	subs	r5, r0, #0
   17d0c:	0a00000e 	beq	17d4c <CUSBGamePadDevice::Configure()+0x64>
   17d10:	e59f2064 	ldr	r2, [pc, #100]	; 17d7c <CUSBGamePadDevice::Configure()+0x94>
   17d14:	e5923000 	ldr	r3, [r2]
   17d18:	e584312c 	str	r3, [r4, #300]	; 0x12c
   17d1c:	e2833001 	add	r3, r3, #1
   17d20:	e5823000 	str	r3, [r2]
   17d24:	eb00358f 	bl	25368 <CDeviceNameService::Get()>
   17d28:	e3a03000 	mov	r3, #0
   17d2c:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   17d30:	e59f1048 	ldr	r1, [pc, #72]	; 17d80 <CUSBGamePadDevice::Configure()+0x98>
   17d34:	e58d3000 	str	r3, [sp]
   17d38:	e1a03004 	mov	r3, r4
   17d3c:	eb003596 	bl	2539c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   17d40:	e1a00005 	mov	r0, r5
   17d44:	e28dd00c 	add	sp, sp, #12
   17d48:	e8bd8030 	pop	{r4, r5, pc}
   17d4c:	eb003b9e 	bl	26bcc <CLogger::Get()>
   17d50:	e59f302c 	ldr	r3, [pc, #44]	; 17d84 <CUSBGamePadDevice::Configure()+0x9c>
   17d54:	e3a02001 	mov	r2, #1
   17d58:	e59f1028 	ldr	r1, [pc, #40]	; 17d88 <CUSBGamePadDevice::Configure()+0xa0>
   17d5c:	eb003ad7 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17d60:	e1a00005 	mov	r0, r5
   17d64:	e28dd00c 	add	sp, sp, #12
   17d68:	e8bd8030 	pop	{r4, r5, pc}
   17d6c:	e3a02035 	mov	r2, #53	; 0x35
   17d70:	e59f1014 	ldr	r1, [pc, #20]	; 17d8c <CUSBGamePadDevice::Configure()+0xa4>
   17d74:	e59f0014 	ldr	r0, [pc, #20]	; 17d90 <CUSBGamePadDevice::Configure()+0xa8>
   17d78:	eb0032a0 	bl	24800 <assertion_failed>
   17d7c:	00047e98 	.word	0x00047e98
   17d80:	000418c0 	.word	0x000418c0
   17d84:	0003f100 	.word	0x0003f100
   17d88:	000418b8 	.word	0x000418b8
   17d8c:	00041914 	.word	0x00041914
   17d90:	0004063c 	.word	0x0004063c

00017d94 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   17d94:	e92d4010 	push	{r4, lr}
   17d98:	e3a02000 	mov	r2, #0
   17d9c:	e1a04000 	mov	r4, r0
   17da0:	ebffe8bb 	bl	12094 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   17da4:	e3a03000 	mov	r3, #0
   17da8:	e59f1028 	ldr	r1, [pc, #40]	; 17dd8 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x44>
   17dac:	e2842f4a 	add	r2, r4, #296	; 0x128
   17db0:	e5841000 	str	r1, [r4]
   17db4:	e5843124 	str	r3, [r4, #292]	; 0x124
   17db8:	e1a01003 	mov	r1, r3
   17dbc:	e1c230b0 	strh	r3, [r2]
   17dc0:	e2840024 	add	r0, r4, #36	; 0x24
   17dc4:	e584312c 	str	r3, [r4, #300]	; 0x12c
   17dc8:	e3a02c01 	mov	r2, #256	; 0x100
   17dcc:	eb004858 	bl	29f34 <memset>
   17dd0:	e1a00004 	mov	r0, r4
   17dd4:	e8bd8010 	pop	{r4, pc}
   17dd8:	000418d0 	.word	0x000418d0

00017ddc <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   17ddc:	e92d4070 	push	{r4, r5, r6, lr}
   17de0:	e3a06000 	mov	r6, #0
   17de4:	e1a04000 	mov	r4, r0
   17de8:	e59f502c 	ldr	r5, [pc, #44]	; 17e1c <CUSBGamePadDevice::~CUSBGamePadDevice()+0x40>
   17dec:	e5806124 	str	r6, [r0, #292]	; 0x124
   17df0:	e2853018 	add	r3, r5, #24
   17df4:	e5803000 	str	r3, [r0]
   17df8:	eb00355a 	bl	25368 <CDeviceNameService::Get()>
   17dfc:	e1a03006 	mov	r3, r6
   17e00:	e2851008 	add	r1, r5, #8
   17e04:	e594212c 	ldr	r2, [r4, #300]	; 0x12c
   17e08:	eb00357d 	bl	25404 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   17e0c:	e1a00004 	mov	r0, r4
   17e10:	ebffe8b3 	bl	120e4 <CUSBHIDDevice::~CUSBHIDDevice()>
   17e14:	e1a00004 	mov	r0, r4
   17e18:	e8bd8070 	pop	{r4, r5, r6, pc}
   17e1c:	000418b8 	.word	0x000418b8

00017e20 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   17e20:	e92d4010 	push	{r4, lr}
   17e24:	e1a04000 	mov	r4, r0
   17e28:	ebffffeb 	bl	17ddc <CUSBGamePadDevice::~CUSBGamePadDevice()>
   17e2c:	e1a00004 	mov	r0, r4
   17e30:	e3a01e13 	mov	r1, #304	; 0x130
   17e34:	eb004c9c 	bl	2b0ac <operator delete(void*, unsigned int)>
   17e38:	e1a00004 	mov	r0, r4
   17e3c:	e8bd8010 	pop	{r4, pc}

00017e40 <CUSBString::CUSBString(CUSBDevice*)>:
   17e40:	e3a03000 	mov	r3, #0
   17e44:	e92d4070 	push	{r4, r5, r6, lr}
   17e48:	e880000a 	stm	r0, {r1, r3}
   17e4c:	e1a04000 	mov	r4, r0
   17e50:	e3a00010 	mov	r0, #16
   17e54:	eb004c86 	bl	2b074 <operator new(unsigned int)>
   17e58:	e1a05000 	mov	r5, r0
   17e5c:	eb003f40 	bl	27b64 <CString::CString()>
   17e60:	e5943000 	ldr	r3, [r4]
   17e64:	e5845008 	str	r5, [r4, #8]
   17e68:	e3530000 	cmp	r3, #0
   17e6c:	0a000001 	beq	17e78 <CUSBString::CUSBString(CUSBDevice*)+0x38>
   17e70:	e1a00004 	mov	r0, r4
   17e74:	e8bd8070 	pop	{r4, r5, r6, pc}
   17e78:	e3a02023 	mov	r2, #35	; 0x23
   17e7c:	e59f1004 	ldr	r1, [pc, #4]	; 17e88 <CUSBString::CUSBString(CUSBDevice*)+0x48>
   17e80:	e59f0004 	ldr	r0, [pc, #4]	; 17e8c <CUSBString::CUSBString(CUSBDevice*)+0x4c>
   17e84:	eb00325d 	bl	24800 <assertion_failed>
   17e88:	00041954 	.word	0x00041954
   17e8c:	0003fb38 	.word	0x0003fb38

00017e90 <CUSBString::CUSBString(CUSBString*)>:
   17e90:	e3a03000 	mov	r3, #0
   17e94:	e92d4070 	push	{r4, r5, r6, lr}
   17e98:	e5803004 	str	r3, [r0, #4]
   17e9c:	e1a04000 	mov	r4, r0
   17ea0:	e3a00010 	mov	r0, #16
   17ea4:	e1a05001 	mov	r5, r1
   17ea8:	eb004c71 	bl	2b074 <operator new(unsigned int)>
   17eac:	e1a06000 	mov	r6, r0
   17eb0:	eb003f2b 	bl	27b64 <CString::CString()>
   17eb4:	e3550000 	cmp	r5, #0
   17eb8:	e5846008 	str	r6, [r4, #8]
   17ebc:	0a000012 	beq	17f0c <CUSBString::CUSBString(CUSBString*)+0x7c>
   17ec0:	e895000c 	ldm	r5, {r2, r3}
   17ec4:	e3530000 	cmp	r3, #0
   17ec8:	e5842000 	str	r2, [r4]
   17ecc:	0a000008 	beq	17ef4 <CUSBString::CUSBString(CUSBString*)+0x64>
   17ed0:	e5d30000 	ldrb	r0, [r3]
   17ed4:	eb004c67 	bl	2b078 <operator new[](unsigned int)>
   17ed8:	e5840004 	str	r0, [r4, #4]
   17edc:	e5951004 	ldr	r1, [r5, #4]
   17ee0:	e5d12000 	ldrb	r2, [r1]
   17ee4:	eb004a89 	bl	2a910 <memcpy>
   17ee8:	e5943008 	ldr	r3, [r4, #8]
   17eec:	e3530000 	cmp	r3, #0
   17ef0:	0a000009 	beq	17f1c <CUSBString::CUSBString(CUSBString*)+0x8c>
   17ef4:	e5953008 	ldr	r3, [r5, #8]
   17ef8:	e3530000 	cmp	r3, #0
   17efc:	0a00000a 	beq	17f2c <CUSBString::CUSBString(CUSBString*)+0x9c>
   17f00:	e5843008 	str	r3, [r4, #8]
   17f04:	e1a00004 	mov	r0, r4
   17f08:	e8bd8070 	pop	{r4, r5, r6, pc}
   17f0c:	e3a0202b 	mov	r2, #43	; 0x2b
   17f10:	e59f1024 	ldr	r1, [pc, #36]	; 17f3c <CUSBString::CUSBString(CUSBString*)+0xac>
   17f14:	e59f0024 	ldr	r0, [pc, #36]	; 17f40 <CUSBString::CUSBString(CUSBString*)+0xb0>
   17f18:	eb003238 	bl	24800 <assertion_failed>
   17f1c:	e3a02035 	mov	r2, #53	; 0x35
   17f20:	e59f1014 	ldr	r1, [pc, #20]	; 17f3c <CUSBString::CUSBString(CUSBString*)+0xac>
   17f24:	e59f0018 	ldr	r0, [pc, #24]	; 17f44 <CUSBString::CUSBString(CUSBString*)+0xb4>
   17f28:	eb003234 	bl	24800 <assertion_failed>
   17f2c:	e3a02036 	mov	r2, #54	; 0x36
   17f30:	e59f1004 	ldr	r1, [pc, #4]	; 17f3c <CUSBString::CUSBString(CUSBString*)+0xac>
   17f34:	e59f000c 	ldr	r0, [pc, #12]	; 17f48 <CUSBString::CUSBString(CUSBString*)+0xb8>
   17f38:	eb003230 	bl	24800 <assertion_failed>
   17f3c:	00041954 	.word	0x00041954
   17f40:	00040030 	.word	0x00040030
   17f44:	00041964 	.word	0x00041964
   17f48:	00041974 	.word	0x00041974

00017f4c <CUSBString::~CUSBString()>:
   17f4c:	e92d4010 	push	{r4, lr}
   17f50:	e1a04000 	mov	r4, r0
   17f54:	e5900008 	ldr	r0, [r0, #8]
   17f58:	e3500000 	cmp	r0, #0
   17f5c:	0a000002 	beq	17f6c <CUSBString::~CUSBString()+0x20>
   17f60:	e5903000 	ldr	r3, [r0]
   17f64:	e5933004 	ldr	r3, [r3, #4]
   17f68:	e12fff33 	blx	r3
   17f6c:	e3a03000 	mov	r3, #0
   17f70:	e5940004 	ldr	r0, [r4, #4]
   17f74:	e5843008 	str	r3, [r4, #8]
   17f78:	e1500003 	cmp	r0, r3
   17f7c:	0a000000 	beq	17f84 <CUSBString::~CUSBString()+0x38>
   17f80:	eb004c43 	bl	2b094 <operator delete[](void*)>
   17f84:	e1a00004 	mov	r0, r4
   17f88:	e8bd8010 	pop	{r4, pc}

00017f8c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   17f8c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f90:	e2516000 	subs	r6, r1, #0
   17f94:	e28db020 	add	fp, sp, #32
   17f98:	e24dd014 	sub	sp, sp, #20
   17f9c:	0a000052 	beq	180ec <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x160>
   17fa0:	e1a04000 	mov	r4, r0
   17fa4:	e5900004 	ldr	r0, [r0, #4]
   17fa8:	e1a07002 	mov	r7, r2
   17fac:	e3500000 	cmp	r0, #0
   17fb0:	0a000000 	beq	17fb8 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   17fb4:	eb004c36 	bl	2b094 <operator delete[](void*)>
   17fb8:	e3a00004 	mov	r0, #4
   17fbc:	eb004c2d 	bl	2b078 <operator new[](unsigned int)>
   17fc0:	e5943000 	ldr	r3, [r4]
   17fc4:	e5840004 	str	r0, [r4, #4]
   17fc8:	e3530000 	cmp	r3, #0
   17fcc:	0a00004a 	beq	180fc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x170>
   17fd0:	e1a00003 	mov	r0, r3
   17fd4:	ebffd8bc 	bl	e2cc <CUSBDevice::GetHost() const>
   17fd8:	e1a05000 	mov	r5, r0
   17fdc:	e5940000 	ldr	r0, [r4]
   17fe0:	ebffd8ae 	bl	e2a0 <CUSBDevice::GetEndpoint0() const>
   17fe4:	e3a08080 	mov	r8, #128	; 0x80
   17fe8:	e3a02004 	mov	r2, #4
   17fec:	e5943004 	ldr	r3, [r4, #4]
   17ff0:	e1a01000 	mov	r1, r0
   17ff4:	e98d0104 	stmib	sp, {r2, r8}
   17ff8:	e58d3000 	str	r3, [sp]
   17ffc:	e58d700c 	str	r7, [sp, #12]
   18000:	e1a00005 	mov	r0, r5
   18004:	e1a03006 	mov	r3, r6
   18008:	e3a02003 	mov	r2, #3
   1800c:	ebffea3d 	bl	12908 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   18010:	e3500000 	cmp	r0, #0
   18014:	ba000008 	blt	1803c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   18018:	e5940004 	ldr	r0, [r4, #4]
   1801c:	e5d05000 	ldrb	r5, [r0]
   18020:	e3550001 	cmp	r5, #1
   18024:	da000004 	ble	1803c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   18028:	e3150001 	tst	r5, #1
   1802c:	1a000002 	bne	1803c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   18030:	e5d09001 	ldrb	r9, [r0, #1]
   18034:	e3590003 	cmp	r9, #3
   18038:	0a000002 	beq	18048 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xbc>
   1803c:	e3a00000 	mov	r0, #0
   18040:	e24bd020 	sub	sp, fp, #32
   18044:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18048:	e3550004 	cmp	r5, #4
   1804c:	ca00002e 	bgt	1810c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x180>
   18050:	e3550002 	cmp	r5, #2
   18054:	0a000049 	beq	18180 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x1f4>
   18058:	e2455002 	sub	r5, r5, #2
   1805c:	e1a0e0c5 	asr	lr, r5, #1
   18060:	e28e3008 	add	r3, lr, #8
   18064:	e3c33007 	bic	r3, r3, #7
   18068:	e35e0000 	cmp	lr, #0
   1806c:	e04dd003 	sub	sp, sp, r3
   18070:	e28d6010 	add	r6, sp, #16
   18074:	13a02000 	movne	r2, #0
   18078:	128d100f 	addne	r1, sp, #15
   1807c:	0a00000a 	beq	180ac <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x120>
   18080:	e080c082 	add	ip, r0, r2, lsl #1
   18084:	e5dc3002 	ldrb	r3, [ip, #2]
   18088:	e5dcc003 	ldrb	ip, [ip, #3]
   1808c:	e2822001 	add	r2, r2, #1
   18090:	e183340c 	orr	r3, r3, ip, lsl #8
   18094:	e243c020 	sub	ip, r3, #32
   18098:	e35c005e 	cmp	ip, #94	; 0x5e
   1809c:	83a0305f 	movhi	r3, #95	; 0x5f
   180a0:	e15e0002 	cmp	lr, r2
   180a4:	e5e13001 	strb	r3, [r1, #1]!
   180a8:	1afffff4 	bne	18080 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xf4>
   180ac:	e3a03000 	mov	r3, #0
   180b0:	e5940008 	ldr	r0, [r4, #8]
   180b4:	e7c630c5 	strb	r3, [r6, r5, asr #1]
   180b8:	e1500003 	cmp	r0, r3
   180bc:	0a000002 	beq	180cc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x140>
   180c0:	e5903000 	ldr	r3, [r0]
   180c4:	e5933004 	ldr	r3, [r3, #4]
   180c8:	e12fff33 	blx	r3
   180cc:	e3a00010 	mov	r0, #16
   180d0:	eb004be7 	bl	2b074 <operator new(unsigned int)>
   180d4:	e1a05000 	mov	r5, r0
   180d8:	e1a01006 	mov	r1, r6
   180dc:	eb003ea6 	bl	27b7c <CString::CString(char const*)>
   180e0:	e5845008 	str	r5, [r4, #8]
   180e4:	e3a00001 	mov	r0, #1
   180e8:	eaffffd4 	b	18040 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb4>
   180ec:	e3a02047 	mov	r2, #71	; 0x47
   180f0:	e59f1098 	ldr	r1, [pc, #152]	; 18190 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x204>
   180f4:	e59f0098 	ldr	r0, [pc, #152]	; 18194 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x208>
   180f8:	eb0031c0 	bl	24800 <assertion_failed>
   180fc:	e3a0204d 	mov	r2, #77	; 0x4d
   18100:	e59f1088 	ldr	r1, [pc, #136]	; 18190 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x204>
   18104:	e59f008c 	ldr	r0, [pc, #140]	; 18198 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x20c>
   18108:	eb0031bc 	bl	24800 <assertion_failed>
   1810c:	e3a01002 	mov	r1, #2
   18110:	eb004be5 	bl	2b0ac <operator delete(void*, unsigned int)>
   18114:	e1a00005 	mov	r0, r5
   18118:	eb004bd6 	bl	2b078 <operator new[](unsigned int)>
   1811c:	e5840004 	str	r0, [r4, #4]
   18120:	e5940000 	ldr	r0, [r4]
   18124:	ebffd868 	bl	e2cc <CUSBDevice::GetHost() const>
   18128:	e1a0a000 	mov	sl, r0
   1812c:	e5940000 	ldr	r0, [r4]
   18130:	ebffd85a 	bl	e2a0 <CUSBDevice::GetEndpoint0() const>
   18134:	e594c004 	ldr	ip, [r4, #4]
   18138:	e1a01000 	mov	r1, r0
   1813c:	e58d700c 	str	r7, [sp, #12]
   18140:	e1a0000a 	mov	r0, sl
   18144:	e98d0120 	stmib	sp, {r5, r8}
   18148:	e1a03006 	mov	r3, r6
   1814c:	e1a02009 	mov	r2, r9
   18150:	e58dc000 	str	ip, [sp]
   18154:	ebffe9eb 	bl	12908 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   18158:	e1550000 	cmp	r5, r0
   1815c:	1affffb6 	bne	1803c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   18160:	e5940004 	ldr	r0, [r4, #4]
   18164:	e5d03000 	ldrb	r3, [r0]
   18168:	e1530005 	cmp	r3, r5
   1816c:	1affffb2 	bne	1803c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   18170:	e5d03001 	ldrb	r3, [r0, #1]
   18174:	e3530003 	cmp	r3, #3
   18178:	1affffaf 	bne	1803c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xb0>
   1817c:	eaffffb5 	b	18058 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xcc>
   18180:	e3a02075 	mov	r2, #117	; 0x75
   18184:	e59f1004 	ldr	r1, [pc, #4]	; 18190 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x204>
   18188:	e59f000c 	ldr	r0, [pc, #12]	; 1819c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x210>
   1818c:	eb00319b 	bl	24800 <assertion_failed>
   18190:	00041954 	.word	0x00041954
   18194:	0004198c 	.word	0x0004198c
   18198:	0003fb38 	.word	0x0003fb38
   1819c:	00041998 	.word	0x00041998

000181a0 <CUSBString::Get() const>:
   181a0:	e5900008 	ldr	r0, [r0, #8]
   181a4:	ea003e84 	b	27bbc <CString::operator char const*() const>

000181a8 <CUSBString::GetLanguageID()>:
   181a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   181ac:	e1a05000 	mov	r5, r0
   181b0:	e24dd010 	sub	sp, sp, #16
   181b4:	e3a00004 	mov	r0, #4
   181b8:	eb004bae 	bl	2b078 <operator new[](unsigned int)>
   181bc:	e1a04000 	mov	r4, r0
   181c0:	e5950000 	ldr	r0, [r5]
   181c4:	e3500000 	cmp	r0, #0
   181c8:	0a00004c 	beq	18300 <CUSBString::GetLanguageID()+0x158>
   181cc:	ebffd83e 	bl	e2cc <CUSBDevice::GetHost() const>
   181d0:	e1a06000 	mov	r6, r0
   181d4:	e5950000 	ldr	r0, [r5]
   181d8:	ebffd830 	bl	e2a0 <CUSBDevice::GetEndpoint0() const>
   181dc:	e3a07080 	mov	r7, #128	; 0x80
   181e0:	e3a03000 	mov	r3, #0
   181e4:	e3a02004 	mov	r2, #4
   181e8:	e1a01000 	mov	r1, r0
   181ec:	e98d0084 	stmib	sp, {r2, r7}
   181f0:	e58d4000 	str	r4, [sp]
   181f4:	e1a00006 	mov	r0, r6
   181f8:	e58d300c 	str	r3, [sp, #12]
   181fc:	e3a02003 	mov	r2, #3
   18200:	ebffe9c0 	bl	12908 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   18204:	e3500000 	cmp	r0, #0
   18208:	ba000002 	blt	18218 <CUSBString::GetLanguageID()+0x70>
   1820c:	e5d46000 	ldrb	r6, [r4]
   18210:	e3560003 	cmp	r6, #3
   18214:	ca000005 	bgt	18230 <CUSBString::GetLanguageID()+0x88>
   18218:	e1a00004 	mov	r0, r4
   1821c:	eb004b9c 	bl	2b094 <operator delete[](void*)>
   18220:	e59f50f4 	ldr	r5, [pc, #244]	; 1831c <CUSBString::GetLanguageID()+0x174>
   18224:	e1a00005 	mov	r0, r5
   18228:	e28dd010 	add	sp, sp, #16
   1822c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18230:	e2168001 	ands	r8, r6, #1
   18234:	1afffff7 	bne	18218 <CUSBString::GetLanguageID()+0x70>
   18238:	e5d49001 	ldrb	r9, [r4, #1]
   1823c:	e3590003 	cmp	r9, #3
   18240:	1afffff4 	bne	18218 <CUSBString::GetLanguageID()+0x70>
   18244:	e3560004 	cmp	r6, #4
   18248:	0a000019 	beq	182b4 <CUSBString::GetLanguageID()+0x10c>
   1824c:	e1a00004 	mov	r0, r4
   18250:	eb004b8f 	bl	2b094 <operator delete[](void*)>
   18254:	e1a00006 	mov	r0, r6
   18258:	eb004b86 	bl	2b078 <operator new[](unsigned int)>
   1825c:	e1a04000 	mov	r4, r0
   18260:	e5950000 	ldr	r0, [r5]
   18264:	ebffd818 	bl	e2cc <CUSBDevice::GetHost() const>
   18268:	e1a0a000 	mov	sl, r0
   1826c:	e5950000 	ldr	r0, [r5]
   18270:	ebffd80a 	bl	e2a0 <CUSBDevice::GetEndpoint0() const>
   18274:	e58d4000 	str	r4, [sp]
   18278:	e1a01000 	mov	r1, r0
   1827c:	e58d800c 	str	r8, [sp, #12]
   18280:	e1a0000a 	mov	r0, sl
   18284:	e98d00c0 	stmib	sp, {r6, r7}
   18288:	e1a03008 	mov	r3, r8
   1828c:	e1a02009 	mov	r2, r9
   18290:	ebffe99c 	bl	12908 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   18294:	e1560000 	cmp	r6, r0
   18298:	1affffde 	bne	18218 <CUSBString::GetLanguageID()+0x70>
   1829c:	e5d43000 	ldrb	r3, [r4]
   182a0:	e1530006 	cmp	r3, r6
   182a4:	1affffdb 	bne	18218 <CUSBString::GetLanguageID()+0x70>
   182a8:	e5d43001 	ldrb	r3, [r4, #1]
   182ac:	e3530003 	cmp	r3, #3
   182b0:	1affffd8 	bne	18218 <CUSBString::GetLanguageID()+0x70>
   182b4:	e3a02000 	mov	r2, #0
   182b8:	e2466002 	sub	r6, r6, #2
   182bc:	e59f5058 	ldr	r5, [pc, #88]	; 1831c <CUSBString::GetLanguageID()+0x174>
   182c0:	e1a060c6 	asr	r6, r6, #1
   182c4:	e0841082 	add	r1, r4, r2, lsl #1
   182c8:	e5d13002 	ldrb	r3, [r1, #2]
   182cc:	e5d11003 	ldrb	r1, [r1, #3]
   182d0:	e1833401 	orr	r3, r3, r1, lsl #8
   182d4:	e1530005 	cmp	r3, r5
   182d8:	0a00000c 	beq	18310 <CUSBString::GetLanguageID()+0x168>
   182dc:	e2822001 	add	r2, r2, #1
   182e0:	e1560002 	cmp	r6, r2
   182e4:	8afffff6 	bhi	182c4 <CUSBString::GetLanguageID()+0x11c>
   182e8:	e5d43002 	ldrb	r3, [r4, #2]
   182ec:	e5d42003 	ldrb	r2, [r4, #3]
   182f0:	e1a00004 	mov	r0, r4
   182f4:	e1835402 	orr	r5, r3, r2, lsl #8
   182f8:	eb004b65 	bl	2b094 <operator delete[](void*)>
   182fc:	eaffffc8 	b	18224 <CUSBString::GetLanguageID()+0x7c>
   18300:	e3a0209a 	mov	r2, #154	; 0x9a
   18304:	e59f1014 	ldr	r1, [pc, #20]	; 18320 <CUSBString::GetLanguageID()+0x178>
   18308:	e59f0014 	ldr	r0, [pc, #20]	; 18324 <CUSBString::GetLanguageID()+0x17c>
   1830c:	eb00313b 	bl	24800 <assertion_failed>
   18310:	e1a00004 	mov	r0, r4
   18314:	eb004b5e 	bl	2b094 <operator delete[](void*)>
   18318:	eaffffc1 	b	18224 <CUSBString::GetLanguageID()+0x7c>
   1831c:	00000409 	.word	0x00000409
   18320:	00041954 	.word	0x00041954
   18324:	0003fb38 	.word	0x0003fb38

00018328 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   18328:	e92d4010 	push	{r4, lr}
   1832c:	e3a03000 	mov	r3, #0
   18330:	e1a04000 	mov	r4, r0
   18334:	e2800014 	add	r0, r0, #20
   18338:	e5843000 	str	r3, [r4]
   1833c:	e5843004 	str	r3, [r4, #4]
   18340:	e5843008 	str	r3, [r4, #8]
   18344:	e5c4300c 	strb	r3, [r4, #12]
   18348:	e5c4300d 	strb	r3, [r4, #13]
   1834c:	e5843010 	str	r3, [r4, #16]
   18350:	eb000180 	bl	18958 <CKeyMap::CKeyMap()>
   18354:	e1a00004 	mov	r0, r4
   18358:	e8bd8010 	pop	{r4, pc}

0001835c <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   1835c:	e92d4010 	push	{r4, lr}
   18360:	e3a03000 	mov	r3, #0
   18364:	e1a04000 	mov	r4, r0
   18368:	e2800014 	add	r0, r0, #20
   1836c:	e5843000 	str	r3, [r4]
   18370:	e5843004 	str	r3, [r4, #4]
   18374:	e5843008 	str	r3, [r4, #8]
   18378:	eb0000b2 	bl	18648 <CKeyMap::~CKeyMap()>
   1837c:	e1a00004 	mov	r0, r4
   18380:	e8bd8010 	pop	{r4, pc}

00018384 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   18384:	e3510000 	cmp	r1, #0
   18388:	0a000001 	beq	18394 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x10>
   1838c:	e5801000 	str	r1, [r0]
   18390:	e12fff1e 	bx	lr
   18394:	e92d4010 	push	{r4, lr}
   18398:	e3a0202f 	mov	r2, #47	; 0x2f
   1839c:	e59f1004 	ldr	r1, [pc, #4]	; 183a8 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x24>
   183a0:	e59f0004 	ldr	r0, [pc, #4]	; 183ac <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x28>
   183a4:	eb003115 	bl	24800 <assertion_failed>
   183a8:	000419b4 	.word	0x000419b4
   183ac:	000419cc 	.word	0x000419cc

000183b0 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   183b0:	e3510000 	cmp	r1, #0
   183b4:	0a000001 	beq	183c0 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x10>
   183b8:	e5801004 	str	r1, [r0, #4]
   183bc:	e12fff1e 	bx	lr
   183c0:	e92d4010 	push	{r4, lr}
   183c4:	e3a02035 	mov	r2, #53	; 0x35
   183c8:	e59f1004 	ldr	r1, [pc, #4]	; 183d4 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x24>
   183cc:	e59f0004 	ldr	r0, [pc, #4]	; 183d8 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x28>
   183d0:	eb00310a 	bl	24800 <assertion_failed>
   183d4:	000419b4 	.word	0x000419b4
   183d8:	000419e4 	.word	0x000419e4

000183dc <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   183dc:	e3510000 	cmp	r1, #0
   183e0:	0a000001 	beq	183ec <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x10>
   183e4:	e5801008 	str	r1, [r0, #8]
   183e8:	e12fff1e 	bx	lr
   183ec:	e92d4010 	push	{r4, lr}
   183f0:	e3a0203b 	mov	r2, #59	; 0x3b
   183f4:	e59f1004 	ldr	r1, [pc, #4]	; 18400 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x24>
   183f8:	e59f0004 	ldr	r0, [pc, #4]	; 18404 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x28>
   183fc:	eb0030ff 	bl	24800 <assertion_failed>
   18400:	000419b4 	.word	0x000419b4
   18404:	00041a00 	.word	0x00041a00

00018408 <CKeyboardBehaviour::GetLEDStatus() const>:
   18408:	e2800014 	add	r0, r0, #20
   1840c:	ea000124 	b	188a4 <CKeyMap::GetLEDStatus() const>

00018410 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   18410:	e92d4070 	push	{r4, r5, r6, lr}
   18414:	e5d0600c 	ldrb	r6, [r0, #12]
   18418:	e2805014 	add	r5, r0, #20
   1841c:	e24dd008 	sub	sp, sp, #8
   18420:	e1a04000 	mov	r4, r0
   18424:	e1a02006 	mov	r2, r6
   18428:	e1a00005 	mov	r0, r5
   1842c:	eb0000a9 	bl	186d8 <CKeyMap::Translate(unsigned char, unsigned char)>
   18430:	e2403e13 	sub	r3, r0, #304	; 0x130
   18434:	e2433003 	sub	r3, r3, #3
   18438:	e353000f 	cmp	r3, #15
   1843c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   18440:	ea00001d 	b	184bc <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xac>
   18444:	0001849c 	.word	0x0001849c
   18448:	0001849c 	.word	0x0001849c
   1844c:	0001849c 	.word	0x0001849c
   18450:	00018484 	.word	0x00018484
   18454:	00018484 	.word	0x00018484
   18458:	00018484 	.word	0x00018484
   1845c:	00018484 	.word	0x00018484
   18460:	00018484 	.word	0x00018484
   18464:	00018484 	.word	0x00018484
   18468:	00018484 	.word	0x00018484
   1846c:	00018484 	.word	0x00018484
   18470:	00018484 	.word	0x00018484
   18474:	00018484 	.word	0x00018484
   18478:	00018484 	.word	0x00018484
   1847c:	00018484 	.word	0x00018484
   18480:	000184a4 	.word	0x000184a4
   18484:	e5943004 	ldr	r3, [r4, #4]
   18488:	e3530000 	cmp	r3, #0
   1848c:	0a000002 	beq	1849c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   18490:	e2400f4d 	sub	r0, r0, #308	; 0x134
   18494:	e2400002 	sub	r0, r0, #2
   18498:	e12fff33 	blx	r3
   1849c:	e28dd008 	add	sp, sp, #8
   184a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   184a4:	e5943008 	ldr	r3, [r4, #8]
   184a8:	e3530000 	cmp	r3, #0
   184ac:	0afffffa 	beq	1849c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   184b0:	e12fff33 	blx	r3
   184b4:	e28dd008 	add	sp, sp, #8
   184b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   184bc:	e1a01000 	mov	r1, r0
   184c0:	e1a02006 	mov	r2, r6
   184c4:	e1a00005 	mov	r0, r5
   184c8:	e28d3004 	add	r3, sp, #4
   184cc:	eb0000c4 	bl	187e4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   184d0:	e3500000 	cmp	r0, #0
   184d4:	0afffff0 	beq	1849c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   184d8:	e5943000 	ldr	r3, [r4]
   184dc:	e3530000 	cmp	r3, #0
   184e0:	0affffed 	beq	1849c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x8c>
   184e4:	e12fff33 	blx	r3
   184e8:	e28dd008 	add	sp, sp, #8
   184ec:	e8bd8070 	pop	{r4, r5, r6, pc}

000184f0 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   184f0:	e241c080 	sub	ip, r1, #128	; 0x80
   184f4:	e6ef307c 	uxtb	r3, ip
   184f8:	e3530007 	cmp	r3, #7
   184fc:	e1a03000 	mov	r3, r0
   18500:	8a000004 	bhi	18518 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x28>
   18504:	e3a01001 	mov	r1, #1
   18508:	e5d0200c 	ldrb	r2, [r0, #12]
   1850c:	e182cc11 	orr	ip, r2, r1, lsl ip
   18510:	e5c0c00c 	strb	ip, [r0, #12]
   18514:	e12fff1e 	bx	lr
   18518:	e5d0c00d 	ldrb	ip, [r0, #13]
   1851c:	e15c0001 	cmp	ip, r1
   18520:	012fff1e 	bxeq	lr
   18524:	e5c3100d 	strb	r1, [r3, #13]
   18528:	eaffffb8 	b	18410 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

0001852c <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   1852c:	e2413080 	sub	r3, r1, #128	; 0x80
   18530:	e6ef2073 	uxtb	r2, r3
   18534:	e3520007 	cmp	r2, #7
   18538:	8a000004 	bhi	18550 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x24>
   1853c:	e3a01001 	mov	r1, #1
   18540:	e5d0200c 	ldrb	r2, [r0, #12]
   18544:	e1c23311 	bic	r3, r2, r1, lsl r3
   18548:	e5c0300c 	strb	r3, [r0, #12]
   1854c:	e12fff1e 	bx	lr
   18550:	e5d0300d 	ldrb	r3, [r0, #13]
   18554:	e1530001 	cmp	r3, r1
   18558:	112fff1e 	bxne	lr
   1855c:	e5903010 	ldr	r3, [r0, #16]
   18560:	e92d4010 	push	{r4, lr}
   18564:	e3530000 	cmp	r3, #0
   18568:	e1a04000 	mov	r4, r0
   1856c:	1a000002 	bne	1857c <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   18570:	e3a03000 	mov	r3, #0
   18574:	e5c4300d 	strb	r3, [r4, #13]
   18578:	e8bd8010 	pop	{r4, pc}
   1857c:	eb00465f 	bl	29f00 <CTimer::Get()>
   18580:	e5941010 	ldr	r1, [r4, #16]
   18584:	eb0044ec 	bl	2993c <CTimer::CancelKernelTimer(unsigned int)>
   18588:	e3a03000 	mov	r3, #0
   1858c:	e5843010 	str	r3, [r4, #16]
   18590:	eafffff6 	b	18570 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

00018594 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   18594:	e92d4010 	push	{r4, lr}
   18598:	e5903010 	ldr	r3, [r0, #16]
   1859c:	e24dd008 	sub	sp, sp, #8
   185a0:	e1530001 	cmp	r3, r1
   185a4:	1a000013 	bne	185f8 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x64>
   185a8:	e5d0100d 	ldrb	r1, [r0, #13]
   185ac:	e1a04000 	mov	r4, r0
   185b0:	e3510000 	cmp	r1, #0
   185b4:	1a000001 	bne	185c0 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x2c>
   185b8:	e28dd008 	add	sp, sp, #8
   185bc:	e8bd8010 	pop	{r4, pc}
   185c0:	ebffff92 	bl	18410 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   185c4:	eb00464d 	bl	29f00 <CTimer::Get()>
   185c8:	e58d4000 	str	r4, [sp]
   185cc:	e3a03000 	mov	r3, #0
   185d0:	e59f2030 	ldr	r2, [pc, #48]	; 18608 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x74>
   185d4:	e3a01008 	mov	r1, #8
   185d8:	eb004488 	bl	29800 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   185dc:	e3500000 	cmp	r0, #0
   185e0:	e5840010 	str	r0, [r4, #16]
   185e4:	1afffff3 	bne	185b8 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x24>
   185e8:	e3a020b7 	mov	r2, #183	; 0xb7
   185ec:	e59f1018 	ldr	r1, [pc, #24]	; 1860c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   185f0:	e59f0018 	ldr	r0, [pc, #24]	; 18610 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x7c>
   185f4:	eb003081 	bl	24800 <assertion_failed>
   185f8:	e3a020b0 	mov	r2, #176	; 0xb0
   185fc:	e59f1008 	ldr	r1, [pc, #8]	; 1860c <CKeyboardBehaviour::TimerHandler(unsigned int)+0x78>
   18600:	e59f000c 	ldr	r0, [pc, #12]	; 18614 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x80>
   18604:	eb00307d 	bl	24800 <assertion_failed>
   18608:	00018618 	.word	0x00018618
   1860c:	000419b4 	.word	0x000419b4
   18610:	00040ec4 	.word	0x00040ec4
   18614:	00041a18 	.word	0x00041a18

00018618 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   18618:	e3520000 	cmp	r2, #0
   1861c:	0a000002 	beq	1862c <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x14>
   18620:	e1a01000 	mov	r1, r0
   18624:	e1a00002 	mov	r0, r2
   18628:	eaffffd9 	b	18594 <CKeyboardBehaviour::TimerHandler(unsigned int)>
   1862c:	e92d4010 	push	{r4, lr}
   18630:	e3a020be 	mov	r2, #190	; 0xbe
   18634:	e59f1004 	ldr	r1, [pc, #4]	; 18640 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x28>
   18638:	e59f0004 	ldr	r0, [pc, #4]	; 18644 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x2c>
   1863c:	eb00306f 	bl	24800 <assertion_failed>
   18640:	000419b4 	.word	0x000419b4
   18644:	0003f168 	.word	0x0003f168

00018648 <CKeyMap::~CKeyMap()>:
   18648:	e12fff1e 	bx	lr

0001864c <CKeyMap::ClearTable(unsigned char)>:
   1864c:	e3510003 	cmp	r1, #3
   18650:	ca000009 	bgt	1867c <CKeyMap::ClearTable(unsigned char)+0x30>
   18654:	e3a0c000 	mov	ip, #0
   18658:	e1a03081 	lsl	r3, r1, #1
   1865c:	e2832b01 	add	r2, r3, #1024	; 0x400
   18660:	e0802002 	add	r2, r0, r2
   18664:	e0803003 	add	r3, r0, r3
   18668:	e0c3c0b8 	strh	ip, [r3], #8
   1866c:	e1530002 	cmp	r3, r2
   18670:	1afffffc 	bne	18668 <CKeyMap::ClearTable(unsigned char)+0x1c>
   18674:	e3a00001 	mov	r0, #1
   18678:	e12fff1e 	bx	lr
   1867c:	e3a00000 	mov	r0, #0
   18680:	e12fff1e 	bx	lr

00018684 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   18684:	e16fcf12 	clz	ip, r2
   18688:	e1a0c2ac 	lsr	ip, ip, #5
   1868c:	e3510003 	cmp	r1, #3
   18690:	c38cc001 	orrgt	ip, ip, #1
   18694:	e35c0000 	cmp	ip, #0
   18698:	1a00000a 	bne	186c8 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>
   1869c:	e352007f 	cmp	r2, #127	; 0x7f
   186a0:	ca000009 	bgt	186cc <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x48>
   186a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   186a8:	e59fe024 	ldr	lr, [pc, #36]	; 186d4 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x50>
   186ac:	e153000e 	cmp	r3, lr
   186b0:	d3a0c001 	movle	ip, #1
   186b4:	d0811102 	addle	r1, r1, r2, lsl #2
   186b8:	d1a01081 	lslle	r1, r1, #1
   186bc:	d18030b1 	strhle	r3, [r0, r1]
   186c0:	e1a0000c 	mov	r0, ip
   186c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   186c8:	e3a0c000 	mov	ip, #0
   186cc:	e1a0000c 	mov	r0, ip
   186d0:	e12fff1e 	bx	lr
   186d4:	00000132 	.word	0x00000132

000186d8 <CKeyMap::Translate(unsigned char, unsigned char)>:
   186d8:	e6af3071 	sxtb	r3, r1
   186dc:	e3530000 	cmp	r3, #0
   186e0:	da000023 	ble	18774 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   186e4:	e1a03181 	lsl	r3, r1, #3
   186e8:	e19030b3 	ldrh	r3, [r0, r3]
   186ec:	e3530f42 	cmp	r3, #264	; 0x108
   186f0:	0a000022 	beq	18780 <CKeyMap::Translate(unsigned char, unsigned char)+0xa8>
   186f4:	e243cf43 	sub	ip, r3, #268	; 0x10c
   186f8:	e24cc003 	sub	ip, ip, #3
   186fc:	e35c000b 	cmp	ip, #11
   18700:	8a000003 	bhi	18714 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   18704:	e3120004 	tst	r2, #4
   18708:	12833027 	addne	r3, r3, #39	; 0x27
   1870c:	16ff3073 	uxthne	r3, r3
   18710:	1a000018 	bne	18778 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   18714:	e312008c 	tst	r2, #140	; 0x8c
   18718:	1a000015 	bne	18774 <CKeyMap::Translate(unsigned char, unsigned char)+0x9c>
   1871c:	e2413053 	sub	r3, r1, #83	; 0x53
   18720:	e3530010 	cmp	r3, #16
   18724:	9a00001b 	bls	18798 <CKeyMap::Translate(unsigned char, unsigned char)+0xc0>
   18728:	e3120040 	tst	r2, #64	; 0x40
   1872c:	0a000025 	beq	187c8 <CKeyMap::Translate(unsigned char, unsigned char)+0xf0>
   18730:	e3120022 	tst	r2, #34	; 0x22
   18734:	13a03003 	movne	r3, #3
   18738:	03a03002 	moveq	r3, #2
   1873c:	e0831101 	add	r1, r3, r1, lsl #2
   18740:	e1a01081 	lsl	r1, r1, #1
   18744:	e19030b1 	ldrh	r3, [r0, r1]
   18748:	e59f2088 	ldr	r2, [pc, #136]	; 187d8 <CKeyMap::Translate(unsigned char, unsigned char)+0x100>
   1874c:	e1530002 	cmp	r3, r2
   18750:	0a000017 	beq	187b4 <CKeyMap::Translate(unsigned char, unsigned char)+0xdc>
   18754:	e3530e12 	cmp	r3, #288	; 0x120
   18758:	0a000010 	beq	187a0 <CKeyMap::Translate(unsigned char, unsigned char)+0xc8>
   1875c:	e3530f47 	cmp	r3, #284	; 0x11c
   18760:	05d02400 	ldrbeq	r2, [r0, #1024]	; 0x400
   18764:	02833017 	addeq	r3, r3, #23
   18768:	02222001 	eoreq	r2, r2, #1
   1876c:	05c02400 	strbeq	r2, [r0, #1024]	; 0x400
   18770:	ea000000 	b	18778 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   18774:	e3a03000 	mov	r3, #0
   18778:	e1a00003 	mov	r0, r3
   1877c:	e12fff1e 	bx	lr
   18780:	e3120011 	tst	r2, #17
   18784:	0affffe2 	beq	18714 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   18788:	e3120004 	tst	r2, #4
   1878c:	159f3048 	ldrne	r3, [pc, #72]	; 187dc <CKeyMap::Translate(unsigned char, unsigned char)+0x104>
   18790:	1afffff8 	bne	18778 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   18794:	eaffffde 	b	18714 <CKeyMap::Translate(unsigned char, unsigned char)+0x3c>
   18798:	e5d03401 	ldrb	r3, [r0, #1025]	; 0x401
   1879c:	eaffffe6 	b	1873c <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   187a0:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   187a4:	e3a03f4d 	mov	r3, #308	; 0x134
   187a8:	e2222001 	eor	r2, r2, #1
   187ac:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   187b0:	eafffff0 	b	18778 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   187b4:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   187b8:	e59f3020 	ldr	r3, [pc, #32]	; 187e0 <CKeyMap::Translate(unsigned char, unsigned char)+0x108>
   187bc:	e2222001 	eor	r2, r2, #1
   187c0:	e5c02402 	strb	r2, [r0, #1026]	; 0x402
   187c4:	eaffffeb 	b	18778 <CKeyMap::Translate(unsigned char, unsigned char)+0xa0>
   187c8:	e3120022 	tst	r2, #34	; 0x22
   187cc:	13a03001 	movne	r3, #1
   187d0:	03a03000 	moveq	r3, #0
   187d4:	eaffffd8 	b	1873c <CKeyMap::Translate(unsigned char, unsigned char)+0x64>
   187d8:	0000011e 	.word	0x0000011e
   187dc:	00000142 	.word	0x00000142
   187e0:	00000135 	.word	0x00000135

000187e4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   187e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   187e8:	e241c021 	sub	ip, r1, #33	; 0x21
   187ec:	e59fe0a8 	ldr	lr, [pc, #168]	; 1889c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb8>
   187f0:	e6ffc07c 	uxth	ip, ip
   187f4:	e15c000e 	cmp	ip, lr
   187f8:	8a000025 	bhi	18894 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   187fc:	e241cc01 	sub	ip, r1, #256	; 0x100
   18800:	e6ffe07c 	uxth	lr, ip
   18804:	e35e0032 	cmp	lr, #50	; 0x32
   18808:	9a00001e 	bls	18888 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xa4>
   1880c:	e3120011 	tst	r2, #17
   18810:	e6af2071 	sxtb	r2, r1
   18814:	0a000009 	beq	18840 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x5c>
   18818:	e6ef1071 	uxtb	r1, r1
   1881c:	e2412061 	sub	r2, r1, #97	; 0x61
   18820:	e3520019 	cmp	r2, #25
   18824:	8a00001a 	bhi	18894 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   18828:	e3a02000 	mov	r2, #0
   1882c:	e2411060 	sub	r1, r1, #96	; 0x60
   18830:	e5c31000 	strb	r1, [r3]
   18834:	e5c32001 	strb	r2, [r3, #1]
   18838:	e1a00003 	mov	r0, r3
   1883c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18840:	e5d00400 	ldrb	r0, [r0, #1024]	; 0x400
   18844:	e3500000 	cmp	r0, #0
   18848:	0a000009 	beq	18874 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   1884c:	e6ef1071 	uxtb	r1, r1
   18850:	e2410041 	sub	r0, r1, #65	; 0x41
   18854:	e3500019 	cmp	r0, #25
   18858:	92811020 	addls	r1, r1, #32
   1885c:	96af2071 	sxtbls	r2, r1
   18860:	9a000003 	bls	18874 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x90>
   18864:	e2410061 	sub	r0, r1, #97	; 0x61
   18868:	e3500019 	cmp	r0, #25
   1886c:	92411020 	subls	r1, r1, #32
   18870:	96af2071 	sxtbls	r2, r1
   18874:	e3a01000 	mov	r1, #0
   18878:	e5c32000 	strb	r2, [r3]
   1887c:	e5c31001 	strb	r1, [r3, #1]
   18880:	e1a00003 	mov	r0, r3
   18884:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18888:	e59f3010 	ldr	r3, [pc, #16]	; 188a0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xbc>
   1888c:	e793010c 	ldr	r0, [r3, ip, lsl #2]
   18890:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   18894:	e3a00000 	mov	r0, #0
   18898:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1889c:	00000111 	.word	0x00000111
   188a0:	00047e9c 	.word	0x00047e9c

000188a4 <CKeyMap::GetLEDStatus() const>:
   188a4:	e5d03400 	ldrb	r3, [r0, #1024]	; 0x400
   188a8:	e5d02401 	ldrb	r2, [r0, #1025]	; 0x401
   188ac:	e3530000 	cmp	r3, #0
   188b0:	13a03002 	movne	r3, #2
   188b4:	03a03000 	moveq	r3, #0
   188b8:	e3520000 	cmp	r2, #0
   188bc:	e5d02402 	ldrb	r2, [r0, #1026]	; 0x402
   188c0:	13833001 	orrne	r3, r3, #1
   188c4:	e3520000 	cmp	r2, #0
   188c8:	13833004 	orrne	r3, r3, #4
   188cc:	e1a00003 	mov	r0, r3
   188d0:	e12fff1e 	bx	lr

000188d4 <CKeyMap::LookupDefaultMap(char const*)>:
   188d4:	e92d4070 	push	{r4, r5, r6, lr}
   188d8:	e59f4064 	ldr	r4, [pc, #100]	; 18944 <CKeyMap::LookupDefaultMap(char const*)+0x70>
   188dc:	e1a06000 	mov	r6, r0
   188e0:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   188e4:	e3500000 	cmp	r0, #0
   188e8:	0a000013 	beq	1893c <CKeyMap::LookupDefaultMap(char const*)+0x68>
   188ec:	e3560000 	cmp	r6, #0
   188f0:	13a05000 	movne	r5, #0
   188f4:	128440d0 	addne	r4, r4, #208	; 0xd0
   188f8:	1a000004 	bne	18910 <CKeyMap::LookupDefaultMap(char const*)+0x3c>
   188fc:	ea00000a 	b	1892c <CKeyMap::LookupDefaultMap(char const*)+0x58>
   18900:	e4940004 	ldr	r0, [r4], #4
   18904:	e2855001 	add	r5, r5, #1
   18908:	e3500000 	cmp	r0, #0
   1890c:	0a00000a 	beq	1893c <CKeyMap::LookupDefaultMap(char const*)+0x68>
   18910:	e1a01006 	mov	r1, r6
   18914:	eb0045e2 	bl	2a0a4 <strcmp>
   18918:	e3500000 	cmp	r0, #0
   1891c:	1afffff7 	bne	18900 <CKeyMap::LookupDefaultMap(char const*)+0x2c>
   18920:	e59f0020 	ldr	r0, [pc, #32]	; 18948 <CKeyMap::LookupDefaultMap(char const*)+0x74>
   18924:	e0800505 	add	r0, r0, r5, lsl #10
   18928:	e8bd8070 	pop	{r4, r5, r6, pc}
   1892c:	e59f2018 	ldr	r2, [pc, #24]	; 1894c <CKeyMap::LookupDefaultMap(char const*)+0x78>
   18930:	e59f1018 	ldr	r1, [pc, #24]	; 18950 <CKeyMap::LookupDefaultMap(char const*)+0x7c>
   18934:	e59f0018 	ldr	r0, [pc, #24]	; 18954 <CKeyMap::LookupDefaultMap(char const*)+0x80>
   18938:	eb002fb0 	bl	24800 <assertion_failed>
   1893c:	e3a00000 	mov	r0, #0
   18940:	e8bd8070 	pop	{r4, r5, r6, pc}
   18944:	00047e9c 	.word	0x00047e9c
   18948:	00041a2c 	.word	0x00041a2c
   1894c:	0000013f 	.word	0x0000013f
   18950:	0004322c 	.word	0x0004322c
   18954:	00043238 	.word	0x00043238

00018958 <CKeyMap::CKeyMap()>:
   18958:	e3a03000 	mov	r3, #0
   1895c:	e3a02001 	mov	r2, #1
   18960:	e92d4010 	push	{r4, lr}
   18964:	e5c02401 	strb	r2, [r0, #1025]	; 0x401
   18968:	e5c03400 	strb	r3, [r0, #1024]	; 0x400
   1896c:	e5c03402 	strb	r3, [r0, #1026]	; 0x402
   18970:	e1a04000 	mov	r4, r0
   18974:	eb003653 	bl	262c8 <CKernelOptions::Get()>
   18978:	eb003643 	bl	2628c <CKernelOptions::GetKeyMap() const>
   1897c:	e3500000 	cmp	r0, #0
   18980:	0a00000f 	beq	189c4 <CKeyMap::CKeyMap()+0x6c>
   18984:	ebffffd2 	bl	188d4 <CKeyMap::LookupDefaultMap(char const*)>
   18988:	e2501000 	subs	r1, r0, #0
   1898c:	0a000004 	beq	189a4 <CKeyMap::CKeyMap()+0x4c>
   18990:	e3a02b01 	mov	r2, #1024	; 0x400
   18994:	e1a00004 	mov	r0, r4
   18998:	eb0047dc 	bl	2a910 <memcpy>
   1899c:	e1a00004 	mov	r0, r4
   189a0:	e8bd8010 	pop	{r4, pc}
   189a4:	e59f0028 	ldr	r0, [pc, #40]	; 189d4 <CKeyMap::CKeyMap()+0x7c>
   189a8:	ebffffc9 	bl	188d4 <CKeyMap::LookupDefaultMap(char const*)>
   189ac:	e2501000 	subs	r1, r0, #0
   189b0:	1afffff6 	bne	18990 <CKeyMap::CKeyMap()+0x38>
   189b4:	e3a02080 	mov	r2, #128	; 0x80
   189b8:	e59f1018 	ldr	r1, [pc, #24]	; 189d8 <CKeyMap::CKeyMap()+0x80>
   189bc:	e59f0018 	ldr	r0, [pc, #24]	; 189dc <CKeyMap::CKeyMap()+0x84>
   189c0:	eb002f8e 	bl	24800 <assertion_failed>
   189c4:	e3a0207a 	mov	r2, #122	; 0x7a
   189c8:	e59f1008 	ldr	r1, [pc, #8]	; 189d8 <CKeyMap::CKeyMap()+0x80>
   189cc:	e59f000c 	ldr	r0, [pc, #12]	; 189e0 <CKeyMap::CKeyMap()+0x88>
   189d0:	eb002f8a 	bl	24800 <assertion_failed>
   189d4:	00043248 	.word	0x00043248
   189d8:	0004322c 	.word	0x0004322c
   189dc:	0004324c 	.word	0x0004324c
   189e0:	00043238 	.word	0x00043238

000189e4 <CMouseDevice::~CMouseDevice()>:
   189e4:	e92d4070 	push	{r4, r5, r6, lr}
   189e8:	e3a06000 	mov	r6, #0
   189ec:	e1a04000 	mov	r4, r0
   189f0:	e59f5034 	ldr	r5, [pc, #52]	; 18a2c <CMouseDevice::~CMouseDevice()+0x48>
   189f4:	e5806020 	str	r6, [r0, #32]
   189f8:	e2853008 	add	r3, r5, #8
   189fc:	e5803000 	str	r3, [r0]
   18a00:	eb003258 	bl	25368 <CDeviceNameService::Get()>
   18a04:	e1a03006 	mov	r3, r6
   18a08:	e2851020 	add	r1, r5, #32
   18a0c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   18a10:	eb00327b 	bl	25404 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   18a14:	e2840004 	add	r0, r4, #4
   18a18:	eb00005f 	bl	18b9c <CMouseBehaviour::~CMouseBehaviour()>
   18a1c:	e1a00004 	mov	r0, r4
   18a20:	eb003159 	bl	24f8c <CDevice::~CDevice()>
   18a24:	e1a00004 	mov	r0, r4
   18a28:	e8bd8070 	pop	{r4, r5, r6, pc}
   18a2c:	00043334 	.word	0x00043334

00018a30 <CMouseDevice::~CMouseDevice()>:
   18a30:	e92d4010 	push	{r4, lr}
   18a34:	e1a04000 	mov	r4, r0
   18a38:	ebffffe9 	bl	189e4 <CMouseDevice::~CMouseDevice()>
   18a3c:	e1a00004 	mov	r0, r4
   18a40:	e3a01028 	mov	r1, #40	; 0x28
   18a44:	eb004998 	bl	2b0ac <operator delete(void*, unsigned int)>
   18a48:	e1a00004 	mov	r0, r4
   18a4c:	e8bd8010 	pop	{r4, pc}

00018a50 <CMouseDevice::CMouseDevice()>:
   18a50:	e92d4070 	push	{r4, r5, r6, lr}
   18a54:	e1a04000 	mov	r4, r0
   18a58:	e24dd008 	sub	sp, sp, #8
   18a5c:	eb003158 	bl	24fc4 <CDevice::CDevice()>
   18a60:	e1a00004 	mov	r0, r4
   18a64:	e3a06000 	mov	r6, #0
   18a68:	e59f5044 	ldr	r5, [pc, #68]	; 18ab4 <CMouseDevice::CMouseDevice()+0x64>
   18a6c:	e2853008 	add	r3, r5, #8
   18a70:	e4803004 	str	r3, [r0], #4
   18a74:	eb00003e 	bl	18b74 <CMouseBehaviour::CMouseBehaviour()>
   18a78:	e59f2038 	ldr	r2, [pc, #56]	; 18ab8 <CMouseDevice::CMouseDevice()+0x68>
   18a7c:	e5846020 	str	r6, [r4, #32]
   18a80:	e5923000 	ldr	r3, [r2]
   18a84:	e5843024 	str	r3, [r4, #36]	; 0x24
   18a88:	e2833001 	add	r3, r3, #1
   18a8c:	e5823000 	str	r3, [r2]
   18a90:	eb003234 	bl	25368 <CDeviceNameService::Get()>
   18a94:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   18a98:	e2851020 	add	r1, r5, #32
   18a9c:	e58d6000 	str	r6, [sp]
   18aa0:	e1a03004 	mov	r3, r4
   18aa4:	eb00323c 	bl	2539c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   18aa8:	e1a00004 	mov	r0, r4
   18aac:	e28dd008 	add	sp, sp, #8
   18ab0:	e8bd8070 	pop	{r4, r5, r6, pc}
   18ab4:	00043334 	.word	0x00043334
   18ab8:	00047f84 	.word	0x00047f84

00018abc <CMouseDevice::Setup(unsigned int, unsigned int)>:
   18abc:	e2800004 	add	r0, r0, #4
   18ac0:	ea000036 	b	18ba0 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

00018ac4 <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   18ac4:	e2800004 	add	r0, r0, #4
   18ac8:	ea00007c 	b	18cc0 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>

00018acc <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   18acc:	e2800004 	add	r0, r0, #4
   18ad0:	ea000106 	b	18ef0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

00018ad4 <CMouseDevice::ShowCursor(bool)>:
   18ad4:	e2800004 	add	r0, r0, #4
   18ad8:	ea000128 	b	18f80 <CMouseBehaviour::ShowCursor(bool)>

00018adc <CMouseDevice::UpdateCursor()>:
   18adc:	e5903020 	ldr	r3, [r0, #32]
   18ae0:	e3530000 	cmp	r3, #0
   18ae4:	112fff1e 	bxne	lr
   18ae8:	e2800004 	add	r0, r0, #4
   18aec:	ea00013e 	b	18fec <CMouseBehaviour::UpdateCursor()>

00018af0 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))>:
   18af0:	e5903020 	ldr	r3, [r0, #32]
   18af4:	e92d4010 	push	{r4, lr}
   18af8:	e3530000 	cmp	r3, #0
   18afc:	1a000006 	bne	18b1c <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x2c>
   18b00:	e3510000 	cmp	r1, #0
   18b04:	e5801020 	str	r1, [r0, #32]
   18b08:	18bd8010 	popne	{r4, pc}
   18b0c:	e3a0204a 	mov	r2, #74	; 0x4a
   18b10:	e59f1014 	ldr	r1, [pc, #20]	; 18b2c <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x3c>
   18b14:	e59f0014 	ldr	r0, [pc, #20]	; 18b30 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x40>
   18b18:	eb002f38 	bl	24800 <assertion_failed>
   18b1c:	e3a02048 	mov	r2, #72	; 0x48
   18b20:	e59f1004 	ldr	r1, [pc, #4]	; 18b2c <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x3c>
   18b24:	e59f0008 	ldr	r0, [pc, #8]	; 18b34 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int))+0x44>
   18b28:	eb002f34 	bl	24800 <assertion_failed>
   18b2c:	0004335c 	.word	0x0004335c
   18b30:	0004193c 	.word	0x0004193c
   18b34:	00041924 	.word	0x00041924

00018b38 <CMouseDevice::ReportHandler(unsigned int, int, int)>:
   18b38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18b3c:	e1a04000 	mov	r4, r0
   18b40:	e2800004 	add	r0, r0, #4
   18b44:	e1a07003 	mov	r7, r3
   18b48:	e1a05001 	mov	r5, r1
   18b4c:	e1a06002 	mov	r6, r2
   18b50:	eb00006c 	bl	18d08 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>
   18b54:	e5943020 	ldr	r3, [r4, #32]
   18b58:	e3530000 	cmp	r3, #0
   18b5c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   18b60:	e1a02007 	mov	r2, r7
   18b64:	e1a01006 	mov	r1, r6
   18b68:	e1a00005 	mov	r0, r5
   18b6c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   18b70:	e12fff13 	bx	r3

00018b74 <CMouseBehaviour::CMouseBehaviour()>:
   18b74:	e3a02000 	mov	r2, #0
   18b78:	e5802000 	str	r2, [r0]
   18b7c:	e5802004 	str	r2, [r0, #4]
   18b80:	e5802008 	str	r2, [r0, #8]
   18b84:	e580200c 	str	r2, [r0, #12]
   18b88:	e5c02010 	strb	r2, [r0, #16]
   18b8c:	e5c02011 	strb	r2, [r0, #17]
   18b90:	e5802014 	str	r2, [r0, #20]
   18b94:	e5802018 	str	r2, [r0, #24]
   18b98:	e12fff1e 	bx	lr

00018b9c <CMouseBehaviour::~CMouseBehaviour()>:
   18b9c:	e12fff1e 	bx	lr

00018ba0 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   18ba0:	e92d4010 	push	{r4, lr}
   18ba4:	e5903000 	ldr	r3, [r0]
   18ba8:	e24dd038 	sub	sp, sp, #56	; 0x38
   18bac:	e3530000 	cmp	r3, #0
   18bb0:	1a00002b 	bne	18c64 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xc4>
   18bb4:	e3510000 	cmp	r1, #0
   18bb8:	e5801000 	str	r1, [r0]
   18bbc:	0a00002c 	beq	18c74 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd4>
   18bc0:	e5904004 	ldr	r4, [r0, #4]
   18bc4:	e3540000 	cmp	r4, #0
   18bc8:	1a00002d 	bne	18c84 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xe4>
   18bcc:	e3520000 	cmp	r2, #0
   18bd0:	e5802004 	str	r2, [r0, #4]
   18bd4:	0a00002e 	beq	18c94 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf4>
   18bd8:	e2811001 	add	r1, r1, #1
   18bdc:	e2822001 	add	r2, r2, #1
   18be0:	e1a020a2 	lsr	r2, r2, #1
   18be4:	e1a010a1 	lsr	r1, r1, #1
   18be8:	e5801008 	str	r1, [r0, #8]
   18bec:	e580200c 	str	r2, [r0, #12]
   18bf0:	e1a01004 	mov	r1, r4
   18bf4:	e28d000c 	add	r0, sp, #12
   18bf8:	eb002f21 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   18bfc:	e3a03018 	mov	r3, #24
   18c00:	e3a0e010 	mov	lr, #16
   18c04:	e59fc098 	ldr	ip, [pc, #152]	; 18ca4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x104>
   18c08:	e58d3000 	str	r3, [sp]
   18c0c:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   18c10:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   18c14:	e3a03024 	mov	r3, #36	; 0x24
   18c18:	e28d2014 	add	r2, sp, #20
   18c1c:	e59f1084 	ldr	r1, [pc, #132]	; 18ca8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x108>
   18c20:	e28d000c 	add	r0, sp, #12
   18c24:	e58d4028 	str	r4, [sp, #40]	; 0x28
   18c28:	e58d4030 	str	r4, [sp, #48]	; 0x30
   18c2c:	e58d4034 	str	r4, [sp, #52]	; 0x34
   18c30:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   18c34:	e58de020 	str	lr, [sp, #32]
   18c38:	e58de024 	str	lr, [sp, #36]	; 0x24
   18c3c:	eb002f1c 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   18c40:	e2504000 	subs	r4, r0, #0
   18c44:	159d4020 	ldrne	r4, [sp, #32]
   18c48:	e28d000c 	add	r0, sp, #12
   18c4c:	116f4f14 	clzne	r4, r4
   18c50:	11a042a4 	lsrne	r4, r4, #5
   18c54:	eb002f11 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   18c58:	e1a00004 	mov	r0, r4
   18c5c:	e28dd038 	add	sp, sp, #56	; 0x38
   18c60:	e8bd8010 	pop	{r4, pc}
   18c64:	e3a0204c 	mov	r2, #76	; 0x4c
   18c68:	e59f103c 	ldr	r1, [pc, #60]	; 18cac <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18c6c:	e59f003c 	ldr	r0, [pc, #60]	; 18cb0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x110>
   18c70:	eb002ee2 	bl	24800 <assertion_failed>
   18c74:	e3a0204e 	mov	r2, #78	; 0x4e
   18c78:	e59f102c 	ldr	r1, [pc, #44]	; 18cac <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18c7c:	e59f0030 	ldr	r0, [pc, #48]	; 18cb4 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x114>
   18c80:	eb002ede 	bl	24800 <assertion_failed>
   18c84:	e3a02050 	mov	r2, #80	; 0x50
   18c88:	e59f101c 	ldr	r1, [pc, #28]	; 18cac <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18c8c:	e59f0024 	ldr	r0, [pc, #36]	; 18cb8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x118>
   18c90:	eb002eda 	bl	24800 <assertion_failed>
   18c94:	e3a02052 	mov	r2, #82	; 0x52
   18c98:	e59f100c 	ldr	r1, [pc, #12]	; 18cac <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x10c>
   18c9c:	e59f0018 	ldr	r0, [pc, #24]	; 18cbc <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x11c>
   18ca0:	eb002ed6 	bl	24800 <assertion_failed>
   18ca4:	00043368 	.word	0x00043368
   18ca8:	00008010 	.word	0x00008010
   18cac:	00043768 	.word	0x00043768
   18cb0:	0004377c 	.word	0x0004377c
   18cb4:	00043790 	.word	0x00043790
   18cb8:	000437a4 	.word	0x000437a4
   18cbc:	000437bc 	.word	0x000437bc

00018cc0 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))>:
   18cc0:	e5903018 	ldr	r3, [r0, #24]
   18cc4:	e92d4010 	push	{r4, lr}
   18cc8:	e3530000 	cmp	r3, #0
   18ccc:	1a000006 	bne	18cec <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x2c>
   18cd0:	e3510000 	cmp	r1, #0
   18cd4:	e5801018 	str	r1, [r0, #24]
   18cd8:	18bd8010 	popne	{r4, pc}
   18cdc:	e3a02070 	mov	r2, #112	; 0x70
   18ce0:	e59f1014 	ldr	r1, [pc, #20]	; 18cfc <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x3c>
   18ce4:	e59f0014 	ldr	r0, [pc, #20]	; 18d00 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x40>
   18ce8:	eb002ec4 	bl	24800 <assertion_failed>
   18cec:	e3a0206e 	mov	r2, #110	; 0x6e
   18cf0:	e59f1004 	ldr	r1, [pc, #4]	; 18cfc <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x3c>
   18cf4:	e59f0008 	ldr	r0, [pc, #8]	; 18d04 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int))+0x44>
   18cf8:	eb002ec0 	bl	24800 <assertion_failed>
   18cfc:	00043768 	.word	0x00043768
   18d00:	00041714 	.word	0x00041714
   18d04:	000437d0 	.word	0x000437d0

00018d08 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)>:
   18d08:	e590c000 	ldr	ip, [r0]
   18d0c:	e35c0000 	cmp	ip, #0
   18d10:	012fff1e 	bxeq	lr
   18d14:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d18:	e590e004 	ldr	lr, [r0, #4]
   18d1c:	e35e0000 	cmp	lr, #0
   18d20:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d24:	e1a04000 	mov	r4, r0
   18d28:	e1a05001 	mov	r5, r1
   18d2c:	e0822182 	add	r2, r2, r2, lsl #3
   18d30:	e59f113c 	ldr	r1, [pc, #316]	; 18e74 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x16c>
   18d34:	e1a02082 	lsl	r2, r2, #1
   18d38:	e0833183 	add	r3, r3, r3, lsl #3
   18d3c:	e0c60291 	smull	r0, r6, r1, r2
   18d40:	e1a03083 	lsl	r3, r3, #1
   18d44:	e0c10391 	smull	r0, r1, r1, r3
   18d48:	e1a02fc2 	asr	r2, r2, #31
   18d4c:	e5940008 	ldr	r0, [r4, #8]
   18d50:	e0622146 	rsb	r2, r2, r6, asr #2
   18d54:	e1a03fc3 	asr	r3, r3, #31
   18d58:	e0633141 	rsb	r3, r3, r1, asr #2
   18d5c:	e0822000 	add	r2, r2, r0
   18d60:	e594100c 	ldr	r1, [r4, #12]
   18d64:	e15c0002 	cmp	ip, r2
   18d68:	e0813003 	add	r3, r1, r3
   18d6c:	9a00002c 	bls	18e24 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x11c>
   18d70:	e15e0003 	cmp	lr, r3
   18d74:	e584300c 	str	r3, [r4, #12]
   18d78:	e5842008 	str	r2, [r4, #8]
   18d7c:	8a000037 	bhi	18e60 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x158>
   18d80:	e1500002 	cmp	r0, r2
   18d84:	e584100c 	str	r1, [r4, #12]
   18d88:	0a000008 	beq	18db0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   18d8c:	e3a03001 	mov	r3, #1
   18d90:	e5946018 	ldr	r6, [r4, #24]
   18d94:	e5c43010 	strb	r3, [r4, #16]
   18d98:	e3560000 	cmp	r6, #0
   18d9c:	0a000027 	beq	18e40 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   18da0:	e594300c 	ldr	r3, [r4, #12]
   18da4:	e1a01005 	mov	r1, r5
   18da8:	e3a00000 	mov	r0, #0
   18dac:	e12fff36 	blx	r6
   18db0:	e5943014 	ldr	r3, [r4, #20]
   18db4:	e1550003 	cmp	r5, r3
   18db8:	0a000020 	beq	18e40 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   18dbc:	e5942018 	ldr	r2, [r4, #24]
   18dc0:	e3520000 	cmp	r2, #0
   18dc4:	0a00001d 	beq	18e40 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   18dc8:	e3a06000 	mov	r6, #0
   18dcc:	e3a07001 	mov	r7, #1
   18dd0:	e1a01617 	lsl	r1, r7, r6
   18dd4:	e1110003 	tst	r1, r3
   18dd8:	e3a08002 	mov	r8, #2
   18ddc:	0a000008 	beq	18e04 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xfc>
   18de0:	e1150001 	tst	r5, r1
   18de4:	0a000017 	beq	18e48 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x140>
   18de8:	e2866001 	add	r6, r6, #1
   18dec:	e3560003 	cmp	r6, #3
   18df0:	0a000012 	beq	18e40 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x138>
   18df4:	e5943014 	ldr	r3, [r4, #20]
   18df8:	e1a01617 	lsl	r1, r7, r6
   18dfc:	e1110003 	tst	r1, r3
   18e00:	1afffff6 	bne	18de0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xd8>
   18e04:	e1150001 	tst	r5, r1
   18e08:	0afffff6 	beq	18de8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   18e0c:	e5949018 	ldr	r9, [r4, #24]
   18e10:	e594300c 	ldr	r3, [r4, #12]
   18e14:	e5942008 	ldr	r2, [r4, #8]
   18e18:	e1a00007 	mov	r0, r7
   18e1c:	e12fff39 	blx	r9
   18e20:	eafffff0 	b	18de8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   18e24:	e15e0003 	cmp	lr, r3
   18e28:	e584300c 	str	r3, [r4, #12]
   18e2c:	9a00000e 	bls	18e6c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x164>
   18e30:	e1510003 	cmp	r1, r3
   18e34:	11a02000 	movne	r2, r0
   18e38:	1affffd3 	bne	18d8c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   18e3c:	eaffffdb 	b	18db0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   18e40:	e5845014 	str	r5, [r4, #20]
   18e44:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e48:	e5949018 	ldr	r9, [r4, #24]
   18e4c:	e594300c 	ldr	r3, [r4, #12]
   18e50:	e5942008 	ldr	r2, [r4, #8]
   18e54:	e1a00008 	mov	r0, r8
   18e58:	e12fff39 	blx	r9
   18e5c:	eaffffe1 	b	18de8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xe0>
   18e60:	e1500002 	cmp	r0, r2
   18e64:	1affffc8 	bne	18d8c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x84>
   18e68:	eafffff0 	b	18e30 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0x128>
   18e6c:	e584100c 	str	r1, [r4, #12]
   18e70:	eaffffce 	b	18db0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int)+0xa8>
   18e74:	66666667 	.word	0x66666667

00018e78 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   18e78:	e92d4070 	push	{r4, r5, r6, lr}
   18e7c:	e24dd030 	sub	sp, sp, #48	; 0x30
   18e80:	e1a05000 	mov	r5, r0
   18e84:	e1a04001 	mov	r4, r1
   18e88:	e28d000c 	add	r0, sp, #12
   18e8c:	e3a01000 	mov	r1, #0
   18e90:	e1a06002 	mov	r6, r2
   18e94:	eb002e7a 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   18e98:	e3a03010 	mov	r3, #16
   18e9c:	e3a0c001 	mov	ip, #1
   18ea0:	e58d3000 	str	r3, [sp]
   18ea4:	e28d2014 	add	r2, sp, #20
   18ea8:	e3a0301c 	mov	r3, #28
   18eac:	e59f1038 	ldr	r1, [pc, #56]	; 18eec <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)+0x74>
   18eb0:	e28d000c 	add	r0, sp, #12
   18eb4:	e58d4028 	str	r4, [sp, #40]	; 0x28
   18eb8:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   18ebc:	e58d6020 	str	r6, [sp, #32]
   18ec0:	e58d5024 	str	r5, [sp, #36]	; 0x24
   18ec4:	eb002e7a 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   18ec8:	e2504000 	subs	r4, r0, #0
   18ecc:	159d4020 	ldrne	r4, [sp, #32]
   18ed0:	e28d000c 	add	r0, sp, #12
   18ed4:	116f4f14 	clzne	r4, r4
   18ed8:	11a042a4 	lsrne	r4, r4, #5
   18edc:	eb002e6f 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   18ee0:	e1a00004 	mov	r0, r4
   18ee4:	e28dd030 	add	sp, sp, #48	; 0x30
   18ee8:	e8bd8070 	pop	{r4, r5, r6, pc}
   18eec:	00008011 	.word	0x00008011

00018ef0 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   18ef0:	e5903000 	ldr	r3, [r0]
   18ef4:	e92d4010 	push	{r4, lr}
   18ef8:	e3530000 	cmp	r3, #0
   18efc:	0a000014 	beq	18f54 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x64>
   18f00:	e590c004 	ldr	ip, [r0, #4]
   18f04:	e35c0000 	cmp	ip, #0
   18f08:	0a000015 	beq	18f64 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x74>
   18f0c:	e1530001 	cmp	r3, r1
   18f10:	815c0002 	cmphi	ip, r2
   18f14:	e1a0e001 	mov	lr, r1
   18f18:	9a000006 	bls	18f38 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x48>
   18f1c:	e5d03011 	ldrb	r3, [r0, #17]
   18f20:	e5801008 	str	r1, [r0, #8]
   18f24:	e3530000 	cmp	r3, #0
   18f28:	e580200c 	str	r2, [r0, #12]
   18f2c:	1a000003 	bne	18f40 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x50>
   18f30:	e3a00001 	mov	r0, #1
   18f34:	e8bd8010 	pop	{r4, pc}
   18f38:	e3a00000 	mov	r0, #0
   18f3c:	e8bd8010 	pop	{r4, pc}
   18f40:	e1a01002 	mov	r1, r2
   18f44:	e1a0000e 	mov	r0, lr
   18f48:	e8bd4010 	pop	{r4, lr}
   18f4c:	e3a02001 	mov	r2, #1
   18f50:	eaffffc8 	b	18e78 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   18f54:	e3a02075 	mov	r2, #117	; 0x75
   18f58:	e59f1014 	ldr	r1, [pc, #20]	; 18f74 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   18f5c:	e59f0014 	ldr	r0, [pc, #20]	; 18f78 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x88>
   18f60:	eb002e26 	bl	24800 <assertion_failed>
   18f64:	e3a02076 	mov	r2, #118	; 0x76
   18f68:	e59f1004 	ldr	r1, [pc, #4]	; 18f74 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x84>
   18f6c:	e59f0008 	ldr	r0, [pc, #8]	; 18f7c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x8c>
   18f70:	eb002e22 	bl	24800 <assertion_failed>
   18f74:	00043768 	.word	0x00043768
   18f78:	00043790 	.word	0x00043790
   18f7c:	000437bc 	.word	0x000437bc

00018f80 <CMouseBehaviour::ShowCursor(bool)>:
   18f80:	e1a02001 	mov	r2, r1
   18f84:	e5903008 	ldr	r3, [r0, #8]
   18f88:	e5901000 	ldr	r1, [r0]
   18f8c:	e92d4010 	push	{r4, lr}
   18f90:	e1530001 	cmp	r3, r1
   18f94:	e5d04011 	ldrb	r4, [r0, #17]
   18f98:	e5c02011 	strb	r2, [r0, #17]
   18f9c:	2a000007 	bcs	18fc0 <CMouseBehaviour::ShowCursor(bool)+0x40>
   18fa0:	e590100c 	ldr	r1, [r0, #12]
   18fa4:	e5900004 	ldr	r0, [r0, #4]
   18fa8:	e1510000 	cmp	r1, r0
   18fac:	2a000007 	bcs	18fd0 <CMouseBehaviour::ShowCursor(bool)+0x50>
   18fb0:	e1a00003 	mov	r0, r3
   18fb4:	ebffffaf 	bl	18e78 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   18fb8:	e1a00004 	mov	r0, r4
   18fbc:	e8bd8010 	pop	{r4, pc}
   18fc0:	e3a0208d 	mov	r2, #141	; 0x8d
   18fc4:	e59f1014 	ldr	r1, [pc, #20]	; 18fe0 <CMouseBehaviour::ShowCursor(bool)+0x60>
   18fc8:	e59f0014 	ldr	r0, [pc, #20]	; 18fe4 <CMouseBehaviour::ShowCursor(bool)+0x64>
   18fcc:	eb002e0b 	bl	24800 <assertion_failed>
   18fd0:	e3a0208e 	mov	r2, #142	; 0x8e
   18fd4:	e59f1004 	ldr	r1, [pc, #4]	; 18fe0 <CMouseBehaviour::ShowCursor(bool)+0x60>
   18fd8:	e59f0008 	ldr	r0, [pc, #8]	; 18fe8 <CMouseBehaviour::ShowCursor(bool)+0x68>
   18fdc:	eb002e07 	bl	24800 <assertion_failed>
   18fe0:	00043768 	.word	0x00043768
   18fe4:	000437e8 	.word	0x000437e8
   18fe8:	00043804 	.word	0x00043804

00018fec <CMouseBehaviour::UpdateCursor()>:
   18fec:	e5d03011 	ldrb	r3, [r0, #17]
   18ff0:	e3530000 	cmp	r3, #0
   18ff4:	012fff1e 	bxeq	lr
   18ff8:	e5d03010 	ldrb	r3, [r0, #16]
   18ffc:	e3530000 	cmp	r3, #0
   19000:	012fff1e 	bxeq	lr
   19004:	e3a03000 	mov	r3, #0
   19008:	e590100c 	ldr	r1, [r0, #12]
   1900c:	e5c03010 	strb	r3, [r0, #16]
   19010:	e3a02001 	mov	r2, #1
   19014:	e5900008 	ldr	r0, [r0, #8]
   19018:	eaffff96 	b	18e78 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

0001901c <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   1901c:	e92d4010 	push	{r4, lr}
   19020:	e1a04000 	mov	r4, r0
   19024:	e4801004 	str	r1, [r0], #4
   19028:	e1a01002 	mov	r1, r2
   1902c:	eb003ad2 	bl	27b7c <CString::CString(char const*)>
   19030:	e3a03000 	mov	r3, #0
   19034:	e1a00004 	mov	r0, r4
   19038:	e5843014 	str	r3, [r4, #20]
   1903c:	e5843018 	str	r3, [r4, #24]
   19040:	e584301c 	str	r3, [r4, #28]
   19044:	e5843020 	str	r3, [r4, #32]
   19048:	e8bd8010 	pop	{r4, pc}

0001904c <CPartitionManager::~CPartitionManager()>:
   1904c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19050:	e3a05000 	mov	r5, #0
   19054:	e1a06000 	mov	r6, r0
   19058:	e1a0b005 	mov	fp, r5
   1905c:	e3a0a001 	mov	sl, #1
   19060:	e24dd014 	sub	sp, sp, #20
   19064:	e2808004 	add	r8, r0, #4
   19068:	e2804014 	add	r4, r0, #20
   1906c:	e2807024 	add	r7, r0, #36	; 0x24
   19070:	e5943000 	ldr	r3, [r4]
   19074:	e3530000 	cmp	r3, #0
   19078:	0a00001a 	beq	190e8 <CPartitionManager::~CPartitionManager()+0x9c>
   1907c:	e1a0000d 	mov	r0, sp
   19080:	eb003ab7 	bl	27b64 <CString::CString()>
   19084:	e1a00008 	mov	r0, r8
   19088:	eb003acb 	bl	27bbc <CString::operator char const*() const>
   1908c:	e2855001 	add	r5, r5, #1
   19090:	e1a02000 	mov	r2, r0
   19094:	e1a03005 	mov	r3, r5
   19098:	e59f1070 	ldr	r1, [pc, #112]	; 19110 <CPartitionManager::~CPartitionManager()+0xc4>
   1909c:	e1a0000d 	mov	r0, sp
   190a0:	eb003ff2 	bl	29070 <CString::Format(char const*, ...)>
   190a4:	eb0030af 	bl	25368 <CDeviceNameService::Get()>
   190a8:	e1a09000 	mov	r9, r0
   190ac:	e1a0000d 	mov	r0, sp
   190b0:	eb003ac1 	bl	27bbc <CString::operator char const*() const>
   190b4:	e1a0200a 	mov	r2, sl
   190b8:	e1a01000 	mov	r1, r0
   190bc:	e1a00009 	mov	r0, r9
   190c0:	eb00301b 	bl	25134 <CDeviceNameService::RemoveDevice(char const*, bool)>
   190c4:	e5940000 	ldr	r0, [r4]
   190c8:	e3500000 	cmp	r0, #0
   190cc:	0a000002 	beq	190dc <CPartitionManager::~CPartitionManager()+0x90>
   190d0:	e5903000 	ldr	r3, [r0]
   190d4:	e5933004 	ldr	r3, [r3, #4]
   190d8:	e12fff33 	blx	r3
   190dc:	e584b000 	str	fp, [r4]
   190e0:	e1a0000d 	mov	r0, sp
   190e4:	eb003a6b 	bl	27a98 <CString::~CString()>
   190e8:	e2844004 	add	r4, r4, #4
   190ec:	e1540007 	cmp	r4, r7
   190f0:	1affffde 	bne	19070 <CPartitionManager::~CPartitionManager()+0x24>
   190f4:	e3a03000 	mov	r3, #0
   190f8:	e1a00008 	mov	r0, r8
   190fc:	e5863000 	str	r3, [r6]
   19100:	eb003a64 	bl	27a98 <CString::~CString()>
   19104:	e1a00006 	mov	r0, r6
   19108:	e28dd014 	add	sp, sp, #20
   1910c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19110:	00043828 	.word	0x00043828

00019114 <CPartitionManager::Initialize()>:
   19114:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19118:	e1a06000 	mov	r6, r0
   1911c:	e5900000 	ldr	r0, [r0]
   19120:	e3a03000 	mov	r3, #0
   19124:	e5901000 	ldr	r1, [r0]
   19128:	e24ddf89 	sub	sp, sp, #548	; 0x224
   1912c:	e3a02000 	mov	r2, #0
   19130:	e5911010 	ldr	r1, [r1, #16]
   19134:	e12fff31 	blx	r1
   19138:	e1903001 	orrs	r3, r0, r1
   1913c:	0a000007 	beq	19160 <CPartitionManager::Initialize()+0x4c>
   19140:	eb0036a1 	bl	26bcc <CLogger::Get()>
   19144:	e59f31e0 	ldr	r3, [pc, #480]	; 1932c <CPartitionManager::Initialize()+0x218>
   19148:	e3a02001 	mov	r2, #1
   1914c:	e59f11dc 	ldr	r1, [pc, #476]	; 19330 <CPartitionManager::Initialize()+0x21c>
   19150:	eb0035da 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19154:	e3a00000 	mov	r0, #0
   19158:	e28ddf89 	add	sp, sp, #548	; 0x224
   1915c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19160:	e5960000 	ldr	r0, [r6]
   19164:	e28d1020 	add	r1, sp, #32
   19168:	e5903000 	ldr	r3, [r0]
   1916c:	e3a02c02 	mov	r2, #512	; 0x200
   19170:	e5933008 	ldr	r3, [r3, #8]
   19174:	e12fff33 	blx	r3
   19178:	e3500c02 	cmp	r0, #512	; 0x200
   1917c:	1affffef 	bne	19140 <CPartitionManager::Initialize()+0x2c>
   19180:	e28d3f87 	add	r3, sp, #540	; 0x21c
   19184:	e2833002 	add	r3, r3, #2
   19188:	e1d320b0 	ldrh	r2, [r3]
   1918c:	e59f31a0 	ldr	r3, [pc, #416]	; 19334 <CPartitionManager::Initialize()+0x220>
   19190:	e1520003 	cmp	r2, r3
   19194:	1a00002e 	bne	19254 <CPartitionManager::Initialize()+0x140>
   19198:	e3a04000 	mov	r4, #0
   1919c:	e3a0a020 	mov	sl, #32
   191a0:	e1a09004 	mov	r9, r4
   191a4:	e1a08004 	mov	r8, r4
   191a8:	e59f7188 	ldr	r7, [pc, #392]	; 19338 <CPartitionManager::Initialize()+0x224>
   191ac:	e2865014 	add	r5, r6, #20
   191b0:	e286b004 	add	fp, r6, #4
   191b4:	e28d3020 	add	r3, sp, #32
   191b8:	e0833204 	add	r3, r3, r4, lsl #4
   191bc:	e5d321c2 	ldrb	r2, [r3, #450]	; 0x1c2
   191c0:	e352000f 	cmp	r2, #15
   191c4:	91e03237 	mvnls	r3, r7, lsr r2
   191c8:	81a03008 	movhi	r3, r8
   191cc:	92033001 	andls	r3, r3, #1
   191d0:	92233001 	eorls	r3, r3, #1
   191d4:	e35200ef 	cmp	r2, #239	; 0xef
   191d8:	03833001 	orreq	r3, r3, #1
   191dc:	e3530000 	cmp	r3, #0
   191e0:	1a00000c 	bne	19218 <CPartitionManager::Initialize()+0x104>
   191e4:	e28d2e22 	add	r2, sp, #544	; 0x220
   191e8:	e284301c 	add	r3, r4, #28
   191ec:	e0823203 	add	r3, r2, r3, lsl #4
   191f0:	e2431f7e 	sub	r1, r3, #504	; 0x1f8
   191f4:	e15120b2 	ldrh	r2, [r1, #-2]
   191f8:	e1d100b0 	ldrh	r0, [r1]
   191fc:	e1922800 	orrs	r2, r2, r0, lsl #16
   19200:	0a000004 	beq	19218 <CPartitionManager::Initialize()+0x104>
   19204:	e2433f7d 	sub	r3, r3, #500	; 0x1f4
   19208:	e15320b2 	ldrh	r2, [r3, #-2]
   1920c:	e1d300b0 	ldrh	r0, [r3]
   19210:	e1922800 	orrs	r2, r2, r0, lsl #16
   19214:	1a000016 	bne	19274 <CPartitionManager::Initialize()+0x160>
   19218:	e2844001 	add	r4, r4, #1
   1921c:	e3540004 	cmp	r4, #4
   19220:	e2855004 	add	r5, r5, #4
   19224:	1affffe2 	bne	191b4 <CPartitionManager::Initialize()+0xa0>
   19228:	e3590000 	cmp	r9, #0
   1922c:	13a00001 	movne	r0, #1
   19230:	1affffc8 	bne	19158 <CPartitionManager::Initialize()+0x44>
   19234:	eb003664 	bl	26bcc <CLogger::Get()>
   19238:	e59f30fc 	ldr	r3, [pc, #252]	; 1933c <CPartitionManager::Initialize()+0x228>
   1923c:	e3a02002 	mov	r2, #2
   19240:	e59f10e8 	ldr	r1, [pc, #232]	; 19330 <CPartitionManager::Initialize()+0x21c>
   19244:	eb00359d 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19248:	e3a00001 	mov	r0, #1
   1924c:	e28ddf89 	add	sp, sp, #548	; 0x224
   19250:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19254:	eb00365c 	bl	26bcc <CLogger::Get()>
   19258:	e59f30e0 	ldr	r3, [pc, #224]	; 19340 <CPartitionManager::Initialize()+0x22c>
   1925c:	e3a02002 	mov	r2, #2
   19260:	e59f10c8 	ldr	r1, [pc, #200]	; 19330 <CPartitionManager::Initialize()+0x21c>
   19264:	eb003595 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19268:	e3a00001 	mov	r0, #1
   1926c:	e28ddf89 	add	sp, sp, #548	; 0x224
   19270:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19274:	e5952000 	ldr	r2, [r5]
   19278:	e3520000 	cmp	r2, #0
   1927c:	1a000026 	bne	1931c <CPartitionManager::Initialize()+0x208>
   19280:	e1a0000a 	mov	r0, sl
   19284:	e58d300c 	str	r3, [sp, #12]
   19288:	e58d1008 	str	r1, [sp, #8]
   1928c:	eb004778 	bl	2b074 <operator new(unsigned int)>
   19290:	e59d300c 	ldr	r3, [sp, #12]
   19294:	e59d1008 	ldr	r1, [sp, #8]
   19298:	e58d0004 	str	r0, [sp, #4]
   1929c:	e153c0b2 	ldrh	ip, [r3, #-2]
   192a0:	e15120b2 	ldrh	r2, [r1, #-2]
   192a4:	e1d330b0 	ldrh	r3, [r3]
   192a8:	e1d110b0 	ldrh	r1, [r1]
   192ac:	e18c3803 	orr	r3, ip, r3, lsl #16
   192b0:	e1822801 	orr	r2, r2, r1, lsl #16
   192b4:	e5961000 	ldr	r1, [r6]
   192b8:	eb0000b8 	bl	195a0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   192bc:	e59d3004 	ldr	r3, [sp, #4]
   192c0:	e28d0010 	add	r0, sp, #16
   192c4:	e5853000 	str	r3, [r5]
   192c8:	eb003a25 	bl	27b64 <CString::CString()>
   192cc:	e1a0000b 	mov	r0, fp
   192d0:	eb003a39 	bl	27bbc <CString::operator char const*() const>
   192d4:	e2899001 	add	r9, r9, #1
   192d8:	e1a02000 	mov	r2, r0
   192dc:	e1a03009 	mov	r3, r9
   192e0:	e59f105c 	ldr	r1, [pc, #92]	; 19344 <CPartitionManager::Initialize()+0x230>
   192e4:	e28d0010 	add	r0, sp, #16
   192e8:	eb003f60 	bl	29070 <CString::Format(char const*, ...)>
   192ec:	eb00301d 	bl	25368 <CDeviceNameService::Get()>
   192f0:	e58d0004 	str	r0, [sp, #4]
   192f4:	e28d0010 	add	r0, sp, #16
   192f8:	eb003a2f 	bl	27bbc <CString::operator char const*() const>
   192fc:	e3a03001 	mov	r3, #1
   19300:	e1a01000 	mov	r1, r0
   19304:	e5952000 	ldr	r2, [r5]
   19308:	e59d0004 	ldr	r0, [sp, #4]
   1930c:	eb002f5b 	bl	25080 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   19310:	e28d0010 	add	r0, sp, #16
   19314:	eb0039df 	bl	27a98 <CString::~CString()>
   19318:	eaffffbe 	b	19218 <CPartitionManager::Initialize()+0x104>
   1931c:	e3a02078 	mov	r2, #120	; 0x78
   19320:	e59f1020 	ldr	r1, [pc, #32]	; 19348 <CPartitionManager::Initialize()+0x234>
   19324:	e59f0020 	ldr	r0, [pc, #32]	; 1934c <CPartitionManager::Initialize()+0x238>
   19328:	eb002d34 	bl	24800 <assertion_failed>
   1932c:	00043898 	.word	0x00043898
   19330:	00043820 	.word	0x00043820
   19334:	0000aa55 	.word	0x0000aa55
   19338:	00008021 	.word	0x00008021
   1933c:	00043874 	.word	0x00043874
   19340:	00043830 	.word	0x00043830
   19344:	00043828 	.word	0x00043828
   19348:	00043844 	.word	0x00043844
   1934c:	0004385c 	.word	0x0004385c

00019350 <CPartition::~CPartition()>:
   19350:	e3a02000 	mov	r2, #0
   19354:	e92d4010 	push	{r4, lr}
   19358:	e1a04000 	mov	r4, r0
   1935c:	e59f3010 	ldr	r3, [pc, #16]	; 19374 <CPartition::~CPartition()+0x24>
   19360:	e5802004 	str	r2, [r0, #4]
   19364:	e5803000 	str	r3, [r0]
   19368:	eb002f07 	bl	24f8c <CDevice::~CDevice()>
   1936c:	e1a00004 	mov	r0, r4
   19370:	e8bd8010 	pop	{r4, pc}
   19374:	000438b0 	.word	0x000438b0

00019378 <CPartition::~CPartition()>:
   19378:	e3a02000 	mov	r2, #0
   1937c:	e92d4010 	push	{r4, lr}
   19380:	e1a04000 	mov	r4, r0
   19384:	e59f301c 	ldr	r3, [pc, #28]	; 193a8 <CPartition::~CPartition()+0x30>
   19388:	e5802004 	str	r2, [r0, #4]
   1938c:	e5803000 	str	r3, [r0]
   19390:	eb002efd 	bl	24f8c <CDevice::~CDevice()>
   19394:	e1a00004 	mov	r0, r4
   19398:	e3a01020 	mov	r1, #32
   1939c:	eb004742 	bl	2b0ac <operator delete(void*, unsigned int)>
   193a0:	e1a00004 	mov	r0, r4
   193a4:	e8bd8010 	pop	{r4, pc}
   193a8:	000438b0 	.word	0x000438b0

000193ac <CPartition::Read(void*, unsigned int)>:
   193ac:	e5d03018 	ldrb	r3, [r0, #24]
   193b0:	e3530000 	cmp	r3, #0
   193b4:	1a00001a 	bne	19424 <CPartition::Read(void*, unsigned int)+0x78>
   193b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   193bc:	e1c061d0 	ldrd	r6, [r0, #16]
   193c0:	e3a05000 	mov	r5, #0
   193c4:	e3a09000 	mov	r9, #0
   193c8:	e59f4064 	ldr	r4, [pc, #100]	; 19434 <CPartition::Read(void*, unsigned int)+0x88>
   193cc:	e590800c 	ldr	r8, [r0, #12]
   193d0:	e0944002 	adds	r4, r4, r2
   193d4:	e2a55000 	adc	r5, r5, #0
   193d8:	e0944006 	adds	r4, r4, r6
   193dc:	e0a55007 	adc	r5, r5, r7
   193e0:	e1a064a4 	lsr	r6, r4, #9
   193e4:	e1a074a5 	lsr	r7, r5, #9
   193e8:	e1866b85 	orr	r6, r6, r5, lsl #23
   193ec:	e1570009 	cmp	r7, r9
   193f0:	01560008 	cmpeq	r6, r8
   193f4:	8a00000c 	bhi	1942c <CPartition::Read(void*, unsigned int)+0x80>
   193f8:	e5900004 	ldr	r0, [r0, #4]
   193fc:	e3500000 	cmp	r0, #0
   19400:	0a000003 	beq	19414 <CPartition::Read(void*, unsigned int)+0x68>
   19404:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19408:	e5903000 	ldr	r3, [r0]
   1940c:	e5933008 	ldr	r3, [r3, #8]
   19410:	e12fff13 	bx	r3
   19414:	e3a02035 	mov	r2, #53	; 0x35
   19418:	e59f1018 	ldr	r1, [pc, #24]	; 19438 <CPartition::Read(void*, unsigned int)+0x8c>
   1941c:	e59f0018 	ldr	r0, [pc, #24]	; 1943c <CPartition::Read(void*, unsigned int)+0x90>
   19420:	eb002cf6 	bl	24800 <assertion_failed>
   19424:	e3e00000 	mvn	r0, #0
   19428:	e12fff1e 	bx	lr
   1942c:	e3e00000 	mvn	r0, #0
   19430:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19434:	000001ff 	.word	0x000001ff
   19438:	000438c8 	.word	0x000438c8
   1943c:	0003fb38 	.word	0x0003fb38

00019440 <CPartition::Write(void const*, unsigned int)>:
   19440:	e5d03018 	ldrb	r3, [r0, #24]
   19444:	e3530000 	cmp	r3, #0
   19448:	1a00001a 	bne	194b8 <CPartition::Write(void const*, unsigned int)+0x78>
   1944c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19450:	e1c061d0 	ldrd	r6, [r0, #16]
   19454:	e3a05000 	mov	r5, #0
   19458:	e3a09000 	mov	r9, #0
   1945c:	e59f4064 	ldr	r4, [pc, #100]	; 194c8 <CPartition::Write(void const*, unsigned int)+0x88>
   19460:	e590800c 	ldr	r8, [r0, #12]
   19464:	e0944002 	adds	r4, r4, r2
   19468:	e2a55000 	adc	r5, r5, #0
   1946c:	e0944006 	adds	r4, r4, r6
   19470:	e0a55007 	adc	r5, r5, r7
   19474:	e1a064a4 	lsr	r6, r4, #9
   19478:	e1a074a5 	lsr	r7, r5, #9
   1947c:	e1866b85 	orr	r6, r6, r5, lsl #23
   19480:	e1570009 	cmp	r7, r9
   19484:	01560008 	cmpeq	r6, r8
   19488:	8a00000c 	bhi	194c0 <CPartition::Write(void const*, unsigned int)+0x80>
   1948c:	e5900004 	ldr	r0, [r0, #4]
   19490:	e3500000 	cmp	r0, #0
   19494:	0a000003 	beq	194a8 <CPartition::Write(void const*, unsigned int)+0x68>
   19498:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1949c:	e5903000 	ldr	r3, [r0]
   194a0:	e593300c 	ldr	r3, [r3, #12]
   194a4:	e12fff13 	bx	r3
   194a8:	e3a02047 	mov	r2, #71	; 0x47
   194ac:	e59f1018 	ldr	r1, [pc, #24]	; 194cc <CPartition::Write(void const*, unsigned int)+0x8c>
   194b0:	e59f0018 	ldr	r0, [pc, #24]	; 194d0 <CPartition::Write(void const*, unsigned int)+0x90>
   194b4:	eb002cd1 	bl	24800 <assertion_failed>
   194b8:	e3e00000 	mvn	r0, #0
   194bc:	e12fff1e 	bx	lr
   194c0:	e3e00000 	mvn	r0, #0
   194c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   194c8:	000001ff 	.word	0x000001ff
   194cc:	000438c8 	.word	0x000438c8
   194d0:	0003fb38 	.word	0x0003fb38

000194d4 <CPartition::Seek(unsigned long long)>:
   194d4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   194d8:	e3a05000 	mov	r5, #0
   194dc:	e3a01001 	mov	r1, #1
   194e0:	e59f40ac 	ldr	r4, [pc, #172]	; 19594 <CPartition::Seek(unsigned long long)+0xc0>
   194e4:	e0055003 	and	r5, r5, r3
   194e8:	e0044002 	and	r4, r4, r2
   194ec:	e194c005 	orrs	ip, r4, r5
   194f0:	e5c01018 	strb	r1, [r0, #24]
   194f4:	0a000002 	beq	19504 <CPartition::Seek(unsigned long long)+0x30>
   194f8:	e3e00000 	mvn	r0, #0
   194fc:	e1a01000 	mov	r1, r0
   19500:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19504:	e3a07000 	mov	r7, #0
   19508:	e590600c 	ldr	r6, [r0, #12]
   1950c:	e1a044a2 	lsr	r4, r2, #9
   19510:	e1a054a3 	lsr	r5, r3, #9
   19514:	e1844b83 	orr	r4, r4, r3, lsl #23
   19518:	e1550007 	cmp	r5, r7
   1951c:	01540006 	cmpeq	r4, r6
   19520:	2afffff4 	bcs	194f8 <CPartition::Seek(unsigned long long)+0x24>
   19524:	e1a04000 	mov	r4, r0
   19528:	e9900003 	ldmib	r0, {r0, r1}
   1952c:	e1a08481 	lsl	r8, r1, #9
   19530:	e0988002 	adds	r8, r8, r2
   19534:	e1a09ba1 	lsr	r9, r1, #23
   19538:	e0a99003 	adc	r9, r9, r3
   1953c:	e3500000 	cmp	r0, #0
   19540:	e1a06002 	mov	r6, r2
   19544:	e1a07003 	mov	r7, r3
   19548:	0a00000d 	beq	19584 <CPartition::Seek(unsigned long long)+0xb0>
   1954c:	e5903000 	ldr	r3, [r0]
   19550:	e1a02008 	mov	r2, r8
   19554:	e5931010 	ldr	r1, [r3, #16]
   19558:	e1a03009 	mov	r3, r9
   1955c:	e12fff31 	blx	r1
   19560:	e1590001 	cmp	r9, r1
   19564:	01580000 	cmpeq	r8, r0
   19568:	1affffe2 	bne	194f8 <CPartition::Seek(unsigned long long)+0x24>
   1956c:	e3a03000 	mov	r3, #0
   19570:	e1a00006 	mov	r0, r6
   19574:	e1a01007 	mov	r1, r7
   19578:	e1c461f0 	strd	r6, [r4, #16]
   1957c:	e5c43018 	strb	r3, [r4, #24]
   19580:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19584:	e3a02059 	mov	r2, #89	; 0x59
   19588:	e59f1008 	ldr	r1, [pc, #8]	; 19598 <CPartition::Seek(unsigned long long)+0xc4>
   1958c:	e59f0008 	ldr	r0, [pc, #8]	; 1959c <CPartition::Seek(unsigned long long)+0xc8>
   19590:	eb002c9a 	bl	24800 <assertion_failed>
   19594:	000001ff 	.word	0x000001ff
   19598:	000438c8 	.word	0x000438c8
   1959c:	0003fb38 	.word	0x0003fb38

000195a0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   195a0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   195a4:	e1a05001 	mov	r5, r1
   195a8:	e1a04000 	mov	r4, r0
   195ac:	e1a09002 	mov	r9, r2
   195b0:	e1a08003 	mov	r8, r3
   195b4:	e3a06000 	mov	r6, #0
   195b8:	eb002e81 	bl	24fc4 <CDevice::CDevice()>
   195bc:	e3a07000 	mov	r7, #0
   195c0:	e3a01001 	mov	r1, #1
   195c4:	e59f0030 	ldr	r0, [pc, #48]	; 195fc <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x5c>
   195c8:	e3550000 	cmp	r5, #0
   195cc:	e9840220 	stmib	r4, {r5, r9}
   195d0:	e584800c 	str	r8, [r4, #12]
   195d4:	e5840000 	str	r0, [r4]
   195d8:	e1c461f0 	strd	r6, [r4, #16]
   195dc:	e5c41018 	strb	r1, [r4, #24]
   195e0:	0a000001 	beq	195ec <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   195e4:	e1a00004 	mov	r0, r4
   195e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195ec:	e3a0201f 	mov	r2, #31
   195f0:	e59f1008 	ldr	r1, [pc, #8]	; 19600 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x60>
   195f4:	e59f0008 	ldr	r0, [pc, #8]	; 19604 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   195f8:	eb002c80 	bl	24800 <assertion_failed>
   195fc:	000438b0 	.word	0x000438b0
   19600:	000438c8 	.word	0x000438c8
   19604:	0003fb38 	.word	0x0003fb38

00019608 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>:
   19608:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1960c:	e1a04000 	mov	r4, r0
   19610:	e1a08001 	mov	r8, r1
   19614:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   19618:	e59fc10c 	ldr	ip, [pc, #268]	; 1972c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x124>
   1961c:	e3510000 	cmp	r1, #0
   19620:	01a0100c 	moveq	r1, ip
   19624:	e2805010 	add	r5, r0, #16
   19628:	e5dd7028 	ldrb	r7, [sp, #40]	; 0x28
   1962c:	e1a09003 	mov	r9, r3
   19630:	e280603c 	add	r6, r0, #60	; 0x3c
   19634:	e1a0a002 	mov	sl, r2
   19638:	eb00394f 	bl	27b7c <CString::CString(char const*)>
   1963c:	e1a00005 	mov	r0, r5
   19640:	eb001da4 	bl	20cd8 <CNetConfig::CNetConfig()>
   19644:	e1a02007 	mov	r2, r7
   19648:	e1a01005 	mov	r1, r5
   1964c:	e1a00006 	mov	r0, r6
   19650:	e2847060 	add	r7, r4, #96	; 0x60
   19654:	eb0008d1 	bl	1b9a0 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>
   19658:	e1a02006 	mov	r2, r6
   1965c:	e1a01005 	mov	r1, r5
   19660:	e2846098 	add	r6, r4, #152	; 0x98
   19664:	e1a00007 	mov	r0, r7
   19668:	eb0006fa 	bl	1b258 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>
   1966c:	e1a02007 	mov	r2, r7
   19670:	e1a01005 	mov	r1, r5
   19674:	e1a00006 	mov	r0, r6
   19678:	eb0004b7 	bl	1a95c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>
   1967c:	e1a02006 	mov	r2, r6
   19680:	e1a01005 	mov	r1, r5
   19684:	e28400d8 	add	r0, r4, #216	; 0xd8
   19688:	eb0000ef 	bl	19a4c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>
   1968c:	e3a00000 	mov	r0, #0
   19690:	e16f1f18 	clz	r1, r8
   19694:	e59f3094 	ldr	r3, [pc, #148]	; 19730 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x128>
   19698:	e1a012a1 	lsr	r1, r1, #5
   1969c:	e5932000 	ldr	r2, [r3]
   196a0:	e5840128 	str	r0, [r4, #296]	; 0x128
   196a4:	e1520000 	cmp	r2, r0
   196a8:	e5c41124 	strb	r1, [r4, #292]	; 0x124
   196ac:	1a00001a 	bne	1971c <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x114>
   196b0:	e1a00005 	mov	r0, r5
   196b4:	e5834000 	str	r4, [r3]
   196b8:	eb001d4d 	bl	20bf4 <CNetConfig::SetDHCP(bool)>
   196bc:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   196c0:	e3530000 	cmp	r3, #0
   196c4:	0a000001 	beq	196d0 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xc8>
   196c8:	e1a00004 	mov	r0, r4
   196cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   196d0:	e1a01008 	mov	r1, r8
   196d4:	e1a00005 	mov	r0, r5
   196d8:	eb001d9d 	bl	20d54 <CNetConfig::SetIPAddress(unsigned char const*)>
   196dc:	e1a0100a 	mov	r1, sl
   196e0:	e1a00005 	mov	r0, r5
   196e4:	eb001da1 	bl	20d70 <CNetConfig::SetNetMask(unsigned char const*)>
   196e8:	e3590000 	cmp	r9, #0
   196ec:	0a000002 	beq	196fc <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xf4>
   196f0:	e1a01009 	mov	r1, r9
   196f4:	e1a00005 	mov	r0, r5
   196f8:	eb001d43 	bl	20c0c <CNetConfig::SetDefaultGateway(unsigned char const*)>
   196fc:	e59d3020 	ldr	r3, [sp, #32]
   19700:	e3530000 	cmp	r3, #0
   19704:	0affffef 	beq	196c8 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xc0>
   19708:	e1a00005 	mov	r0, r5
   1970c:	e1a01003 	mov	r1, r3
   19710:	eb001d3f 	bl	20c14 <CNetConfig::SetDNSServer(unsigned char const*)>
   19714:	e1a00004 	mov	r0, r4
   19718:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1971c:	e3a02026 	mov	r2, #38	; 0x26
   19720:	e59f100c 	ldr	r1, [pc, #12]	; 19734 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x12c>
   19724:	e59f000c 	ldr	r0, [pc, #12]	; 19738 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x130>
   19728:	eb002c34 	bl	24800 <assertion_failed>
   1972c:	00047764 	.word	0x00047764
   19730:	0004e0e0 	.word	0x0004e0e0
   19734:	000438d8 	.word	0x000438d8
   19738:	000438ec 	.word	0x000438ec

0001973c <CNetSubSystem::Process()>:
   1973c:	e59f3034 	ldr	r3, [pc, #52]	; 19778 <CNetSubSystem::Process()+0x3c>
   19740:	e5933000 	ldr	r3, [r3]
   19744:	e3530000 	cmp	r3, #0
   19748:	012fff1e 	bxeq	lr
   1974c:	e92d4010 	push	{r4, lr}
   19750:	e1a04000 	mov	r4, r0
   19754:	e280003c 	add	r0, r0, #60	; 0x3c
   19758:	eb0008f6 	bl	1bb38 <CNetDeviceLayer::Process()>
   1975c:	e2840060 	add	r0, r4, #96	; 0x60
   19760:	eb00071d 	bl	1b3dc <CLinkLayer::Process()>
   19764:	e2840098 	add	r0, r4, #152	; 0x98
   19768:	eb0004cb 	bl	1aa9c <CNetworkLayer::Process()>
   1976c:	e28400d8 	add	r0, r4, #216	; 0xd8
   19770:	e8bd4010 	pop	{r4, lr}
   19774:	ea0003b5 	b	1a650 <CTransportLayer::Process()>
   19778:	0004e0e0 	.word	0x0004e0e0

0001977c <CNetSubSystem::GetConfig()>:
   1977c:	e2800010 	add	r0, r0, #16
   19780:	e12fff1e 	bx	lr

00019784 <CNetSubSystem::GetNetDeviceLayer()>:
   19784:	e280003c 	add	r0, r0, #60	; 0x3c
   19788:	e12fff1e 	bx	lr

0001978c <CNetSubSystem::GetLinkLayer()>:
   1978c:	e2800060 	add	r0, r0, #96	; 0x60
   19790:	e12fff1e 	bx	lr

00019794 <CNetSubSystem::GetTransportLayer()>:
   19794:	e28000d8 	add	r0, r0, #216	; 0xd8
   19798:	e12fff1e 	bx	lr

0001979c <CNetSubSystem::IsRunning() const>:
   1979c:	e5d03124 	ldrb	r3, [r0, #292]	; 0x124
   197a0:	e3530000 	cmp	r3, #0
   197a4:	0a000003 	beq	197b8 <CNetSubSystem::IsRunning() const+0x1c>
   197a8:	e5900128 	ldr	r0, [r0, #296]	; 0x128
   197ac:	e3500000 	cmp	r0, #0
   197b0:	0a000002 	beq	197c0 <CNetSubSystem::IsRunning() const+0x24>
   197b4:	ea002072 	b	21984 <CDHCPClient::IsBound() const>
   197b8:	e3a00001 	mov	r0, #1
   197bc:	e12fff1e 	bx	lr
   197c0:	e92d4010 	push	{r4, lr}
   197c4:	e3a0209d 	mov	r2, #157	; 0x9d
   197c8:	e59f1004 	ldr	r1, [pc, #4]	; 197d4 <CNetSubSystem::IsRunning() const+0x38>
   197cc:	e59f0004 	ldr	r0, [pc, #4]	; 197d8 <CNetSubSystem::IsRunning() const+0x3c>
   197d0:	eb002c0a 	bl	24800 <assertion_failed>
   197d4:	000438d8 	.word	0x000438d8
   197d8:	000438fc 	.word	0x000438fc

000197dc <CNetSubSystem::Initialize(bool)>:
   197dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   197e0:	e2805010 	add	r5, r0, #16
   197e4:	e1a04000 	mov	r4, r0
   197e8:	e1a00005 	mov	r0, r5
   197ec:	e1a06001 	mov	r6, r1
   197f0:	eb001d09 	bl	20c1c <CNetConfig::GetIPAddress() const>
   197f4:	eb001e43 	bl	21108 <CIPAddress::IsNull() const>
   197f8:	e1a01000 	mov	r1, r0
   197fc:	e1a00005 	mov	r0, r5
   19800:	e5c41124 	strb	r1, [r4, #292]	; 0x124
   19804:	eb001cfa 	bl	20bf4 <CNetConfig::SetDHCP(bool)>
   19808:	e1a01006 	mov	r1, r6
   1980c:	e284003c 	add	r0, r4, #60	; 0x3c
   19810:	eb000878 	bl	1b9f8 <CNetDeviceLayer::Initialize(bool)>
   19814:	e3500000 	cmp	r0, #0
   19818:	1a000002 	bne	19828 <CNetSubSystem::Initialize(bool)+0x4c>
   1981c:	e3a05000 	mov	r5, #0
   19820:	e1a00005 	mov	r0, r5
   19824:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19828:	e2845060 	add	r5, r4, #96	; 0x60
   1982c:	e1a00005 	mov	r0, r5
   19830:	eb0006be 	bl	1b330 <CLinkLayer::Initialize()>
   19834:	e3500000 	cmp	r0, #0
   19838:	0afffff7 	beq	1981c <CNetSubSystem::Initialize(bool)+0x40>
   1983c:	e2847098 	add	r7, r4, #152	; 0x98
   19840:	e1a00007 	mov	r0, r7
   19844:	eb00047b 	bl	1aa38 <CNetworkLayer::Initialize()>
   19848:	e3500000 	cmp	r0, #0
   1984c:	0afffff2 	beq	1981c <CNetSubSystem::Initialize(bool)+0x40>
   19850:	e1a00005 	mov	r0, r5
   19854:	e1a01007 	mov	r1, r7
   19858:	eb0006cd 	bl	1b394 <CLinkLayer::AttachLayer(CNetworkLayer*)>
   1985c:	e28400d8 	add	r0, r4, #216	; 0xd8
   19860:	eb00009f 	bl	19ae4 <CTransportLayer::Initialize()>
   19864:	e2505000 	subs	r5, r0, #0
   19868:	0affffeb 	beq	1981c <CNetSubSystem::Initialize(bool)+0x40>
   1986c:	e3a000e0 	mov	r0, #224	; 0xe0
   19870:	eb0045ff 	bl	2b074 <operator new(unsigned int)>
   19874:	e1a01004 	mov	r1, r4
   19878:	eb000068 	bl	19a20 <CNetTask::CNetTask(CNetSubSystem*)>
   1987c:	e5d43124 	ldrb	r3, [r4, #292]	; 0x124
   19880:	e3530000 	cmp	r3, #0
   19884:	0a00000c 	beq	198bc <CNetSubSystem::Initialize(bool)+0xe0>
   19888:	e5943128 	ldr	r3, [r4, #296]	; 0x128
   1988c:	e3530000 	cmp	r3, #0
   19890:	1a000013 	bne	198e4 <CNetSubSystem::Initialize(bool)+0x108>
   19894:	e1a00004 	mov	r0, r4
   19898:	eb0038c7 	bl	27bbc <CString::operator char const*() const>
   1989c:	e1a08000 	mov	r8, r0
   198a0:	e3a00e1e 	mov	r0, #480	; 0x1e0
   198a4:	eb0045f2 	bl	2b074 <operator new(unsigned int)>
   198a8:	e1a07000 	mov	r7, r0
   198ac:	e1a02008 	mov	r2, r8
   198b0:	e1a01004 	mov	r1, r4
   198b4:	eb001ffc 	bl	218ac <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>
   198b8:	e5847128 	str	r7, [r4, #296]	; 0x128
   198bc:	e3560000 	cmp	r6, #0
   198c0:	1a000002 	bne	198d0 <CNetSubSystem::Initialize(bool)+0xf4>
   198c4:	eaffffd5 	b	19820 <CNetSubSystem::Initialize(bool)+0x44>
   198c8:	eb002b1e 	bl	24548 <CScheduler::Get()>
   198cc:	eb002a8a 	bl	242fc <CScheduler::Yield()>
   198d0:	e1a00004 	mov	r0, r4
   198d4:	ebffffb0 	bl	1979c <CNetSubSystem::IsRunning() const>
   198d8:	e3500000 	cmp	r0, #0
   198dc:	0afffff9 	beq	198c8 <CNetSubSystem::Initialize(bool)+0xec>
   198e0:	eaffffce 	b	19820 <CNetSubSystem::Initialize(bool)+0x44>
   198e4:	e3a02060 	mov	r2, #96	; 0x60
   198e8:	e59f1004 	ldr	r1, [pc, #4]	; 198f4 <CNetSubSystem::Initialize(bool)+0x118>
   198ec:	e59f0004 	ldr	r0, [pc, #4]	; 198f8 <CNetSubSystem::Initialize(bool)+0x11c>
   198f0:	eb002bc2 	bl	24800 <assertion_failed>
   198f4:	000438d8 	.word	0x000438d8
   198f8:	00043910 	.word	0x00043910

000198fc <CNetSubSystem::Get()>:
   198fc:	e59f3020 	ldr	r3, [pc, #32]	; 19924 <CNetSubSystem::Get()+0x28>
   19900:	e5930000 	ldr	r0, [r3]
   19904:	e3500000 	cmp	r0, #0
   19908:	0a000000 	beq	19910 <CNetSubSystem::Get()+0x14>
   1990c:	e12fff1e 	bx	lr
   19910:	e92d4010 	push	{r4, lr}
   19914:	e3a020a3 	mov	r2, #163	; 0xa3
   19918:	e59f1008 	ldr	r1, [pc, #8]	; 19928 <CNetSubSystem::Get()+0x2c>
   1991c:	e59f0008 	ldr	r0, [pc, #8]	; 1992c <CNetSubSystem::Get()+0x30>
   19920:	eb002bb6 	bl	24800 <assertion_failed>
   19924:	0004e0e0 	.word	0x0004e0e0
   19928:	000438d8 	.word	0x000438d8
   1992c:	00043924 	.word	0x00043924

00019930 <CNetSubSystem::~CNetSubSystem()>:
   19930:	e92d4010 	push	{r4, lr}
   19934:	e3a02000 	mov	r2, #0
   19938:	e1a04000 	mov	r4, r0
   1993c:	e59f3038 	ldr	r3, [pc, #56]	; 1997c <CNetSubSystem::~CNetSubSystem()+0x4c>
   19940:	e28000d8 	add	r0, r0, #216	; 0xd8
   19944:	e5832000 	str	r2, [r3]
   19948:	eb000336 	bl	1a628 <CTransportLayer::~CTransportLayer()>
   1994c:	e2840098 	add	r0, r4, #152	; 0x98
   19950:	eb000420 	bl	1a9d8 <CNetworkLayer::~CNetworkLayer()>
   19954:	e2840060 	add	r0, r4, #96	; 0x60
   19958:	eb00065d 	bl	1b2d4 <CLinkLayer::~CLinkLayer()>
   1995c:	e284003c 	add	r0, r4, #60	; 0x3c
   19960:	eb000819 	bl	1b9cc <CNetDeviceLayer::~CNetDeviceLayer()>
   19964:	e2840010 	add	r0, r4, #16
   19968:	eb001c93 	bl	20bbc <CNetConfig::~CNetConfig()>
   1996c:	e1a00004 	mov	r0, r4
   19970:	eb003848 	bl	27a98 <CString::~CString()>
   19974:	e1a00004 	mov	r0, r4
   19978:	e8bd8010 	pop	{r4, pc}
   1997c:	0004e0e0 	.word	0x0004e0e0

00019980 <CNetTask::~CNetTask()>:
   19980:	e3a02000 	mov	r2, #0
   19984:	e92d4010 	push	{r4, lr}
   19988:	e1a04000 	mov	r4, r0
   1998c:	e59f3010 	ldr	r3, [pc, #16]	; 199a4 <CNetTask::~CNetTask()+0x24>
   19990:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   19994:	e5803000 	str	r3, [r0]
   19998:	eb0028f4 	bl	23d70 <CTask::~CTask()>
   1999c:	e1a00004 	mov	r0, r4
   199a0:	e8bd8010 	pop	{r4, pc}
   199a4:	0004393c 	.word	0x0004393c

000199a8 <CNetTask::~CNetTask()>:
   199a8:	e3a02000 	mov	r2, #0
   199ac:	e92d4010 	push	{r4, lr}
   199b0:	e1a04000 	mov	r4, r0
   199b4:	e59f301c 	ldr	r3, [pc, #28]	; 199d8 <CNetTask::~CNetTask()+0x30>
   199b8:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   199bc:	e5803000 	str	r3, [r0]
   199c0:	eb0028ea 	bl	23d70 <CTask::~CTask()>
   199c4:	e1a00004 	mov	r0, r4
   199c8:	e3a010e0 	mov	r1, #224	; 0xe0
   199cc:	eb0045b6 	bl	2b0ac <operator delete(void*, unsigned int)>
   199d0:	e1a00004 	mov	r0, r4
   199d4:	e8bd8010 	pop	{r4, pc}
   199d8:	0004393c 	.word	0x0004393c

000199dc <CNetTask::Run()>:
   199dc:	e92d4010 	push	{r4, lr}
   199e0:	e1a04000 	mov	r4, r0
   199e4:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   199e8:	e3500000 	cmp	r0, #0
   199ec:	0a000005 	beq	19a08 <CNetTask::Run()+0x2c>
   199f0:	ebffff51 	bl	1973c <CNetSubSystem::Process()>
   199f4:	eb002ad3 	bl	24548 <CScheduler::Get()>
   199f8:	eb002a3f 	bl	242fc <CScheduler::Yield()>
   199fc:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   19a00:	e3500000 	cmp	r0, #0
   19a04:	1afffff9 	bne	199f0 <CNetTask::Run()+0x14>
   19a08:	e3a02026 	mov	r2, #38	; 0x26
   19a0c:	e59f1004 	ldr	r1, [pc, #4]	; 19a18 <CNetTask::Run()+0x3c>
   19a10:	e59f0004 	ldr	r0, [pc, #4]	; 19a1c <CNetTask::Run()+0x40>
   19a14:	eb002b79 	bl	24800 <assertion_failed>
   19a18:	00043948 	.word	0x00043948
   19a1c:	00043954 	.word	0x00043954

00019a20 <CNetTask::CNetTask(CNetSubSystem*)>:
   19a20:	e92d4070 	push	{r4, r5, r6, lr}
   19a24:	e1a04000 	mov	r4, r0
   19a28:	e1a05001 	mov	r5, r1
   19a2c:	e3a01902 	mov	r1, #32768	; 0x8000
   19a30:	eb002921 	bl	23ebc <CTask::CTask(unsigned int)>
   19a34:	e59f300c 	ldr	r3, [pc, #12]	; 19a48 <CNetTask::CNetTask(CNetSubSystem*)+0x28>
   19a38:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   19a3c:	e5843000 	str	r3, [r4]
   19a40:	e1a00004 	mov	r0, r4
   19a44:	e8bd8070 	pop	{r4, r5, r6, pc}
   19a48:	0004393c 	.word	0x0004393c

00019a4c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>:
   19a4c:	e92d4070 	push	{r4, r5, r6, lr}
   19a50:	e1a06002 	mov	r6, r2
   19a54:	e3a02064 	mov	r2, #100	; 0x64
   19a58:	e1a04000 	mov	r4, r0
   19a5c:	e5801000 	str	r1, [r0]
   19a60:	e1a05001 	mov	r5, r1
   19a64:	e5806004 	str	r6, [r0, #4]
   19a68:	e1a01002 	mov	r1, r2
   19a6c:	e2800008 	add	r0, r0, #8
   19a70:	eb00375c 	bl	277e8 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   19a74:	e3a03000 	mov	r3, #0
   19a78:	e59f0054 	ldr	r0, [pc, #84]	; 19ad4 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x88>
   19a7c:	e584301c 	str	r3, [r4, #28]
   19a80:	e1c401b8 	strh	r0, [r4, #24]
   19a84:	e1a02006 	mov	r2, r6
   19a88:	e1a01005 	mov	r1, r5
   19a8c:	e2840020 	add	r0, r4, #32
   19a90:	eb001b88 	bl	208b8 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>
   19a94:	e5943000 	ldr	r3, [r4]
   19a98:	e3530000 	cmp	r3, #0
   19a9c:	0a000004 	beq	19ab4 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x68>
   19aa0:	e5943004 	ldr	r3, [r4, #4]
   19aa4:	e3530000 	cmp	r3, #0
   19aa8:	0a000005 	beq	19ac4 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x78>
   19aac:	e1a00004 	mov	r0, r4
   19ab0:	e8bd8070 	pop	{r4, r5, r6, pc}
   19ab4:	e3a02025 	mov	r2, #37	; 0x25
   19ab8:	e59f1018 	ldr	r1, [pc, #24]	; 19ad8 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x8c>
   19abc:	e59f0018 	ldr	r0, [pc, #24]	; 19adc <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x90>
   19ac0:	eb002b4e 	bl	24800 <assertion_failed>
   19ac4:	e3a02026 	mov	r2, #38	; 0x26
   19ac8:	e59f1008 	ldr	r1, [pc, #8]	; 19ad8 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x8c>
   19acc:	e59f000c 	ldr	r0, [pc, #12]	; 19ae0 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x94>
   19ad0:	eb002b4a 	bl	24800 <assertion_failed>
   19ad4:	ffffea60 	.word	0xffffea60
   19ad8:	0004396c 	.word	0x0004396c
   19adc:	00043980 	.word	0x00043980
   19ae0:	00043994 	.word	0x00043994

00019ae4 <CTransportLayer::Initialize()>:
   19ae4:	e3a00001 	mov	r0, #1
   19ae8:	e12fff1e 	bx	lr

00019aec <CTransportLayer::Bind(unsigned short, int)>:
   19aec:	e3520011 	cmp	r2, #17
   19af0:	1a00004d 	bne	19c2c <CTransportLayer::Bind(unsigned short, int)+0x140>
   19af4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19af8:	e1a06000 	mov	r6, r0
   19afc:	e590001c 	ldr	r0, [r0, #28]
   19b00:	e1a07001 	mov	r7, r1
   19b04:	e3500000 	cmp	r0, #0
   19b08:	1a000038 	bne	19bf0 <CTransportLayer::Bind(unsigned short, int)+0x104>
   19b0c:	e3a04000 	mov	r4, #0
   19b10:	e2865008 	add	r5, r6, #8
   19b14:	ea000006 	b	19b34 <CTransportLayer::Bind(unsigned short, int)+0x48>
   19b18:	e1a01004 	mov	r1, r4
   19b1c:	e1a00005 	mov	r0, r5
   19b20:	eb003758 	bl	27888 <CPtrArray::operator[](unsigned int)>
   19b24:	e5903000 	ldr	r3, [r0]
   19b28:	e3530000 	cmp	r3, #0
   19b2c:	0a000004 	beq	19b44 <CTransportLayer::Bind(unsigned short, int)+0x58>
   19b30:	e2844001 	add	r4, r4, #1
   19b34:	e1a00005 	mov	r0, r5
   19b38:	eb003750 	bl	27880 <CPtrArray::GetCount() const>
   19b3c:	e1540000 	cmp	r4, r0
   19b40:	3afffff4 	bcc	19b18 <CTransportLayer::Bind(unsigned short, int)+0x2c>
   19b44:	e1a00005 	mov	r0, r5
   19b48:	eb00374c 	bl	27880 <CPtrArray::GetCount() const>
   19b4c:	e1540000 	cmp	r4, r0
   19b50:	2a000021 	bcs	19bdc <CTransportLayer::Bind(unsigned short, int)+0xf0>
   19b54:	e3570000 	cmp	r7, #0
   19b58:	0a00001a 	beq	19bc8 <CTransportLayer::Bind(unsigned short, int)+0xdc>
   19b5c:	e5963000 	ldr	r3, [r6]
   19b60:	e3530000 	cmp	r3, #0
   19b64:	0a000028 	beq	19c0c <CTransportLayer::Bind(unsigned short, int)+0x120>
   19b68:	e5963004 	ldr	r3, [r6, #4]
   19b6c:	e3530000 	cmp	r3, #0
   19b70:	0a000029 	beq	19c1c <CTransportLayer::Bind(unsigned short, int)+0x130>
   19b74:	e3a00048 	mov	r0, #72	; 0x48
   19b78:	eb00453d 	bl	2b074 <operator new(unsigned int)>
   19b7c:	e8960006 	ldm	r6, {r1, r2}
   19b80:	e1a03007 	mov	r3, r7
   19b84:	e1a08000 	mov	r8, r0
   19b88:	eb0010f5 	bl	1df64 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   19b8c:	e1a01004 	mov	r1, r4
   19b90:	e1a00005 	mov	r0, r5
   19b94:	eb00373b 	bl	27888 <CPtrArray::operator[](unsigned int)>
   19b98:	e1a01004 	mov	r1, r4
   19b9c:	e5808000 	str	r8, [r0]
   19ba0:	e1a00005 	mov	r0, r5
   19ba4:	eb003737 	bl	27888 <CPtrArray::operator[](unsigned int)>
   19ba8:	e5903000 	ldr	r3, [r0]
   19bac:	e3530000 	cmp	r3, #0
   19bb0:	0a00001f 	beq	19c34 <CTransportLayer::Bind(unsigned short, int)+0x148>
   19bb4:	e596301c 	ldr	r3, [r6, #28]
   19bb8:	e3530000 	cmp	r3, #0
   19bbc:	1a000010 	bne	19c04 <CTransportLayer::Bind(unsigned short, int)+0x118>
   19bc0:	e1a00004 	mov	r0, r4
   19bc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19bc8:	e596301c 	ldr	r3, [r6, #28]
   19bcc:	e3530000 	cmp	r3, #0
   19bd0:	1a000008 	bne	19bf8 <CTransportLayer::Bind(unsigned short, int)+0x10c>
   19bd4:	e3e00000 	mvn	r0, #0
   19bd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19bdc:	e3a01000 	mov	r1, #0
   19be0:	e1a00005 	mov	r0, r5
   19be4:	eb00375f 	bl	27968 <CPtrArray::Append(void*)>
   19be8:	e1a04000 	mov	r4, r0
   19bec:	eaffffd8 	b	19b54 <CTransportLayer::Bind(unsigned short, int)+0x68>
   19bf0:	eb004851 	bl	2bd3c <EnterCritical>
   19bf4:	eaffffc4 	b	19b0c <CTransportLayer::Bind(unsigned short, int)+0x20>
   19bf8:	eb00487a 	bl	2bde8 <LeaveCritical>
   19bfc:	e3e00000 	mvn	r0, #0
   19c00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19c04:	eb004877 	bl	2bde8 <LeaveCritical>
   19c08:	eaffffec 	b	19bc0 <CTransportLayer::Bind(unsigned short, int)+0xd4>
   19c0c:	e3a020ad 	mov	r2, #173	; 0xad
   19c10:	e59f102c 	ldr	r1, [pc, #44]	; 19c44 <CTransportLayer::Bind(unsigned short, int)+0x158>
   19c14:	e59f002c 	ldr	r0, [pc, #44]	; 19c48 <CTransportLayer::Bind(unsigned short, int)+0x15c>
   19c18:	eb002af8 	bl	24800 <assertion_failed>
   19c1c:	e3a020ae 	mov	r2, #174	; 0xae
   19c20:	e59f101c 	ldr	r1, [pc, #28]	; 19c44 <CTransportLayer::Bind(unsigned short, int)+0x158>
   19c24:	e59f0020 	ldr	r0, [pc, #32]	; 19c4c <CTransportLayer::Bind(unsigned short, int)+0x160>
   19c28:	eb002af4 	bl	24800 <assertion_failed>
   19c2c:	e3e00000 	mvn	r0, #0
   19c30:	e12fff1e 	bx	lr
   19c34:	e3a020b0 	mov	r2, #176	; 0xb0
   19c38:	e59f1004 	ldr	r1, [pc, #4]	; 19c44 <CTransportLayer::Bind(unsigned short, int)+0x158>
   19c3c:	e59f000c 	ldr	r0, [pc, #12]	; 19c50 <CTransportLayer::Bind(unsigned short, int)+0x164>
   19c40:	eb002aee 	bl	24800 <assertion_failed>
   19c44:	0004396c 	.word	0x0004396c
   19c48:	00043980 	.word	0x00043980
   19c4c:	00043994 	.word	0x00043994
   19c50:	000439ac 	.word	0x000439ac

00019c54 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>:
   19c54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c58:	e1a08000 	mov	r8, r0
   19c5c:	e590001c 	ldr	r0, [r0, #28]
   19c60:	e24dd014 	sub	sp, sp, #20
   19c64:	e3500000 	cmp	r0, #0
   19c68:	e58d1008 	str	r1, [sp, #8]
   19c6c:	e58d200c 	str	r2, [sp, #12]
   19c70:	e1a06003 	mov	r6, r3
   19c74:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
   19c78:	1a000072 	bne	19e48 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1f4>
   19c7c:	e3a07000 	mov	r7, #0
   19c80:	e2885008 	add	r5, r8, #8
   19c84:	ea000006 	b	19ca4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x50>
   19c88:	e1a01007 	mov	r1, r7
   19c8c:	e1a00005 	mov	r0, r5
   19c90:	eb0036fc 	bl	27888 <CPtrArray::operator[](unsigned int)>
   19c94:	e5903000 	ldr	r3, [r0]
   19c98:	e3530000 	cmp	r3, #0
   19c9c:	0a000004 	beq	19cb4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x60>
   19ca0:	e2877001 	add	r7, r7, #1
   19ca4:	e1a00005 	mov	r0, r5
   19ca8:	eb0036f4 	bl	27880 <CPtrArray::GetCount() const>
   19cac:	e1570000 	cmp	r7, r0
   19cb0:	3afffff4 	bcc	19c88 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x34>
   19cb4:	e1a00005 	mov	r0, r5
   19cb8:	eb0036f0 	bl	27880 <CPtrArray::GetCount() const>
   19cbc:	e1570000 	cmp	r7, r0
   19cc0:	2a00005b 	bcs	19e34 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1e0>
   19cc4:	e3560000 	cmp	r6, #0
   19cc8:	1a000026 	bne	19d68 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x114>
   19ccc:	e59fa200 	ldr	sl, [pc, #512]	; 19ed4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x280>
   19cd0:	e59fb200 	ldr	fp, [pc, #512]	; 19ed8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x284>
   19cd4:	e1d861b8 	ldrh	r6, [r8, #24]
   19cd8:	e3a04000 	mov	r4, #0
   19cdc:	e2863001 	add	r3, r6, #1
   19ce0:	e6ff3073 	uxth	r3, r3
   19ce4:	e153000a 	cmp	r3, sl
   19ce8:	91c831b8 	strhls	r3, [r8, #24]
   19cec:	81c8b1b8 	strhhi	fp, [r8, #24]
   19cf0:	ea000000 	b	19cf8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   19cf4:	e2844001 	add	r4, r4, #1
   19cf8:	e1a00005 	mov	r0, r5
   19cfc:	eb0036df 	bl	27880 <CPtrArray::GetCount() const>
   19d00:	e1540000 	cmp	r4, r0
   19d04:	2a000013 	bcs	19d58 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x104>
   19d08:	e1a01004 	mov	r1, r4
   19d0c:	e1a00005 	mov	r0, r5
   19d10:	eb0036dc 	bl	27888 <CPtrArray::operator[](unsigned int)>
   19d14:	e5903000 	ldr	r3, [r0]
   19d18:	e3530000 	cmp	r3, #0
   19d1c:	0afffff4 	beq	19cf4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19d20:	e1a01004 	mov	r1, r4
   19d24:	e1a00005 	mov	r0, r5
   19d28:	eb0036d6 	bl	27888 <CPtrArray::operator[](unsigned int)>
   19d2c:	e5900000 	ldr	r0, [r0]
   19d30:	eb000e0c 	bl	1d568 <CNetConnection::GetOwnPort() const>
   19d34:	e1560000 	cmp	r6, r0
   19d38:	1affffed 	bne	19cf4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19d3c:	e1a01004 	mov	r1, r4
   19d40:	e1a00005 	mov	r0, r5
   19d44:	eb0036cf 	bl	27888 <CPtrArray::operator[](unsigned int)>
   19d48:	e5900000 	ldr	r0, [r0]
   19d4c:	eb000e10 	bl	1d594 <CNetConnection::GetProtocol() const>
   19d50:	e1500009 	cmp	r0, r9
   19d54:	1affffe6 	bne	19cf4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   19d58:	e1a00005 	mov	r0, r5
   19d5c:	eb0036c7 	bl	27880 <CPtrArray::GetCount() const>
   19d60:	e1540000 	cmp	r4, r0
   19d64:	3affffda 	bcc	19cd4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x80>
   19d68:	e5983000 	ldr	r3, [r8]
   19d6c:	e3530000 	cmp	r3, #0
   19d70:	0a000049 	beq	19e9c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x248>
   19d74:	e5983004 	ldr	r3, [r8, #4]
   19d78:	e3530000 	cmp	r3, #0
   19d7c:	0a00004a 	beq	19eac <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x258>
   19d80:	e3590006 	cmp	r9, #6
   19d84:	0a000031 	beq	19e50 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1fc>
   19d88:	e3590011 	cmp	r9, #17
   19d8c:	1a000022 	bne	19e1c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1c8>
   19d90:	e3a00048 	mov	r0, #72	; 0x48
   19d94:	eb0044b6 	bl	2b074 <operator new(unsigned int)>
   19d98:	e59d300c 	ldr	r3, [sp, #12]
   19d9c:	e5982004 	ldr	r2, [r8, #4]
   19da0:	e58d6004 	str	r6, [sp, #4]
   19da4:	e5981000 	ldr	r1, [r8]
   19da8:	e58d3000 	str	r3, [sp]
   19dac:	e59d3008 	ldr	r3, [sp, #8]
   19db0:	e1a04000 	mov	r4, r0
   19db4:	eb00104f 	bl	1def8 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   19db8:	e1a01007 	mov	r1, r7
   19dbc:	e1a00005 	mov	r0, r5
   19dc0:	eb0036b0 	bl	27888 <CPtrArray::operator[](unsigned int)>
   19dc4:	e598301c 	ldr	r3, [r8, #28]
   19dc8:	e5804000 	str	r4, [r0]
   19dcc:	e3530000 	cmp	r3, #0
   19dd0:	1a00002f 	bne	19e94 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x240>
   19dd4:	e1a01007 	mov	r1, r7
   19dd8:	e1a00005 	mov	r0, r5
   19ddc:	eb0036a9 	bl	27888 <CPtrArray::operator[](unsigned int)>
   19de0:	e5903000 	ldr	r3, [r0]
   19de4:	e3530000 	cmp	r3, #0
   19de8:	0a000035 	beq	19ec4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x270>
   19dec:	e1a01007 	mov	r1, r7
   19df0:	e1a00005 	mov	r0, r5
   19df4:	eb0036a3 	bl	27888 <CPtrArray::operator[](unsigned int)>
   19df8:	e5900000 	ldr	r0, [r0]
   19dfc:	e5903000 	ldr	r3, [r0]
   19e00:	e5933008 	ldr	r3, [r3, #8]
   19e04:	e12fff33 	blx	r3
   19e08:	e3500000 	cmp	r0, #0
   19e0c:	ba000005 	blt	19e28 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1d4>
   19e10:	e1a00007 	mov	r0, r7
   19e14:	e28dd014 	add	sp, sp, #20
   19e18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e1c:	e598301c 	ldr	r3, [r8, #28]
   19e20:	e3530000 	cmp	r3, #0
   19e24:	1a000024 	bne	19ebc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x268>
   19e28:	e3e00000 	mvn	r0, #0
   19e2c:	e28dd014 	add	sp, sp, #20
   19e30:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e34:	e3a01000 	mov	r1, #0
   19e38:	e1a00005 	mov	r0, r5
   19e3c:	eb0036c9 	bl	27968 <CPtrArray::Append(void*)>
   19e40:	e1a07000 	mov	r7, r0
   19e44:	eaffff9e 	b	19cc4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x70>
   19e48:	eb0047bb 	bl	2bd3c <EnterCritical>
   19e4c:	eaffff8a 	b	19c7c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28>
   19e50:	e3a000e0 	mov	r0, #224	; 0xe0
   19e54:	eb004486 	bl	2b074 <operator new(unsigned int)>
   19e58:	e59d300c 	ldr	r3, [sp, #12]
   19e5c:	e5982004 	ldr	r2, [r8, #4]
   19e60:	e58d6004 	str	r6, [sp, #4]
   19e64:	e5981000 	ldr	r1, [r8]
   19e68:	e58d3000 	str	r3, [sp]
   19e6c:	e59d3008 	ldr	r3, [sp, #8]
   19e70:	e1a04000 	mov	r4, r0
   19e74:	eb0012ba 	bl	1e964 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   19e78:	e1a01007 	mov	r1, r7
   19e7c:	e1a00005 	mov	r0, r5
   19e80:	eb003680 	bl	27888 <CPtrArray::operator[](unsigned int)>
   19e84:	e598301c 	ldr	r3, [r8, #28]
   19e88:	e5804000 	str	r4, [r0]
   19e8c:	e3530000 	cmp	r3, #0
   19e90:	0affffcf 	beq	19dd4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x180>
   19e94:	eb0047d3 	bl	2bde8 <LeaveCritical>
   19e98:	eaffffcd 	b	19dd4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x180>
   19e9c:	e3a020e1 	mov	r2, #225	; 0xe1
   19ea0:	e59f1034 	ldr	r1, [pc, #52]	; 19edc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   19ea4:	e59f0034 	ldr	r0, [pc, #52]	; 19ee0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28c>
   19ea8:	eb002a54 	bl	24800 <assertion_failed>
   19eac:	e3a020e2 	mov	r2, #226	; 0xe2
   19eb0:	e59f1024 	ldr	r1, [pc, #36]	; 19edc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   19eb4:	e59f0028 	ldr	r0, [pc, #40]	; 19ee4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x290>
   19eb8:	eb002a50 	bl	24800 <assertion_failed>
   19ebc:	eb0047c9 	bl	2bde8 <LeaveCritical>
   19ec0:	eaffffd8 	b	19e28 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1d4>
   19ec4:	e3a020f4 	mov	r2, #244	; 0xf4
   19ec8:	e59f100c 	ldr	r1, [pc, #12]	; 19edc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   19ecc:	e59f0014 	ldr	r0, [pc, #20]	; 19ee8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x294>
   19ed0:	eb002a4a 	bl	24800 <assertion_failed>
   19ed4:	0000ee47 	.word	0x0000ee47
   19ed8:	ffffea60 	.word	0xffffea60
   19edc:	0004396c 	.word	0x0004396c
   19ee0:	00043980 	.word	0x00043980
   19ee4:	00043994 	.word	0x00043994
   19ee8:	000439ac 	.word	0x000439ac

00019eec <CTransportLayer::Listen(unsigned short, int)>:
   19eec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19ef0:	e1a06000 	mov	r6, r0
   19ef4:	e590001c 	ldr	r0, [r0, #28]
   19ef8:	e1a07001 	mov	r7, r1
   19efc:	e3500000 	cmp	r0, #0
   19f00:	e1a08002 	mov	r8, r2
   19f04:	1a00001f 	bne	19f88 <CTransportLayer::Listen(unsigned short, int)+0x9c>
   19f08:	e3a04000 	mov	r4, #0
   19f0c:	e2865008 	add	r5, r6, #8
   19f10:	ea000006 	b	19f30 <CTransportLayer::Listen(unsigned short, int)+0x44>
   19f14:	e1a01004 	mov	r1, r4
   19f18:	e1a00005 	mov	r0, r5
   19f1c:	eb003659 	bl	27888 <CPtrArray::operator[](unsigned int)>
   19f20:	e5903000 	ldr	r3, [r0]
   19f24:	e3530000 	cmp	r3, #0
   19f28:	0a000004 	beq	19f40 <CTransportLayer::Listen(unsigned short, int)+0x54>
   19f2c:	e2844001 	add	r4, r4, #1
   19f30:	e1a00005 	mov	r0, r5
   19f34:	eb003651 	bl	27880 <CPtrArray::GetCount() const>
   19f38:	e1540000 	cmp	r4, r0
   19f3c:	3afffff4 	bcc	19f14 <CTransportLayer::Listen(unsigned short, int)+0x28>
   19f40:	e1a00005 	mov	r0, r5
   19f44:	eb00364d 	bl	27880 <CPtrArray::GetCount() const>
   19f48:	e1540000 	cmp	r4, r0
   19f4c:	2a000008 	bcs	19f74 <CTransportLayer::Listen(unsigned short, int)+0x88>
   19f50:	e3570000 	cmp	r7, #0
   19f54:	0a000001 	beq	19f60 <CTransportLayer::Listen(unsigned short, int)+0x74>
   19f58:	e3580006 	cmp	r8, #6
   19f5c:	0a00000e 	beq	19f9c <CTransportLayer::Listen(unsigned short, int)+0xb0>
   19f60:	e596301c 	ldr	r3, [r6, #28]
   19f64:	e3530000 	cmp	r3, #0
   19f68:	1a000008 	bne	19f90 <CTransportLayer::Listen(unsigned short, int)+0xa4>
   19f6c:	e3e00000 	mvn	r0, #0
   19f70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19f74:	e3a01000 	mov	r1, #0
   19f78:	e1a00005 	mov	r0, r5
   19f7c:	eb003679 	bl	27968 <CPtrArray::Append(void*)>
   19f80:	e1a04000 	mov	r4, r0
   19f84:	eafffff1 	b	19f50 <CTransportLayer::Listen(unsigned short, int)+0x64>
   19f88:	eb00476b 	bl	2bd3c <EnterCritical>
   19f8c:	eaffffdd 	b	19f08 <CTransportLayer::Listen(unsigned short, int)+0x1c>
   19f90:	eb004794 	bl	2bde8 <LeaveCritical>
   19f94:	e3e00000 	mvn	r0, #0
   19f98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19f9c:	e5963000 	ldr	r3, [r6]
   19fa0:	e3530000 	cmp	r3, #0
   19fa4:	0a000019 	beq	1a010 <CTransportLayer::Listen(unsigned short, int)+0x124>
   19fa8:	e5963004 	ldr	r3, [r6, #4]
   19fac:	e3530000 	cmp	r3, #0
   19fb0:	0a00001a 	beq	1a020 <CTransportLayer::Listen(unsigned short, int)+0x134>
   19fb4:	e3a000e0 	mov	r0, #224	; 0xe0
   19fb8:	eb00442d 	bl	2b074 <operator new(unsigned int)>
   19fbc:	e8960006 	ldm	r6, {r1, r2}
   19fc0:	e1a03007 	mov	r3, r7
   19fc4:	e1a08000 	mov	r8, r0
   19fc8:	eb0010a8 	bl	1e270 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   19fcc:	e1a01004 	mov	r1, r4
   19fd0:	e1a00005 	mov	r0, r5
   19fd4:	eb00362b 	bl	27888 <CPtrArray::operator[](unsigned int)>
   19fd8:	e1a01004 	mov	r1, r4
   19fdc:	e5808000 	str	r8, [r0]
   19fe0:	e1a00005 	mov	r0, r5
   19fe4:	eb003627 	bl	27888 <CPtrArray::operator[](unsigned int)>
   19fe8:	e5903000 	ldr	r3, [r0]
   19fec:	e3530000 	cmp	r3, #0
   19ff0:	0a00000e 	beq	1a030 <CTransportLayer::Listen(unsigned short, int)+0x144>
   19ff4:	e596301c 	ldr	r3, [r6, #28]
   19ff8:	e3530000 	cmp	r3, #0
   19ffc:	1a000001 	bne	1a008 <CTransportLayer::Listen(unsigned short, int)+0x11c>
   1a000:	e1a00004 	mov	r0, r4
   1a004:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a008:	eb004776 	bl	2bde8 <LeaveCritical>
   1a00c:	eafffffb 	b	1a000 <CTransportLayer::Listen(unsigned short, int)+0x114>
   1a010:	e59f2028 	ldr	r2, [pc, #40]	; 1a040 <CTransportLayer::Listen(unsigned short, int)+0x154>
   1a014:	e59f1028 	ldr	r1, [pc, #40]	; 1a044 <CTransportLayer::Listen(unsigned short, int)+0x158>
   1a018:	e59f0028 	ldr	r0, [pc, #40]	; 1a048 <CTransportLayer::Listen(unsigned short, int)+0x15c>
   1a01c:	eb0029f7 	bl	24800 <assertion_failed>
   1a020:	e59f2024 	ldr	r2, [pc, #36]	; 1a04c <CTransportLayer::Listen(unsigned short, int)+0x160>
   1a024:	e59f1018 	ldr	r1, [pc, #24]	; 1a044 <CTransportLayer::Listen(unsigned short, int)+0x158>
   1a028:	e59f0020 	ldr	r0, [pc, #32]	; 1a050 <CTransportLayer::Listen(unsigned short, int)+0x164>
   1a02c:	eb0029f3 	bl	24800 <assertion_failed>
   1a030:	e59f201c 	ldr	r2, [pc, #28]	; 1a054 <CTransportLayer::Listen(unsigned short, int)+0x168>
   1a034:	e59f1008 	ldr	r1, [pc, #8]	; 1a044 <CTransportLayer::Listen(unsigned short, int)+0x158>
   1a038:	e59f0018 	ldr	r0, [pc, #24]	; 1a058 <CTransportLayer::Listen(unsigned short, int)+0x16c>
   1a03c:	eb0029ef 	bl	24800 <assertion_failed>
   1a040:	0000011e 	.word	0x0000011e
   1a044:	0004396c 	.word	0x0004396c
   1a048:	00043980 	.word	0x00043980
   1a04c:	0000011f 	.word	0x0000011f
   1a050:	00043994 	.word	0x00043994
   1a054:	00000121 	.word	0x00000121
   1a058:	000439ac 	.word	0x000439ac

0001a05c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>:
   1a05c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a060:	e2535000 	subs	r5, r3, #0
   1a064:	ba00001c 	blt	1a0dc <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x80>
   1a068:	e2804008 	add	r4, r0, #8
   1a06c:	e1a00004 	mov	r0, r4
   1a070:	e1a06001 	mov	r6, r1
   1a074:	e1a07002 	mov	r7, r2
   1a078:	eb003600 	bl	27880 <CPtrArray::GetCount() const>
   1a07c:	e1550000 	cmp	r5, r0
   1a080:	ba000001 	blt	1a08c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x30>
   1a084:	e3e00000 	mvn	r0, #0
   1a088:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a08c:	e1a01005 	mov	r1, r5
   1a090:	e1a00004 	mov	r0, r4
   1a094:	eb0035fb 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a098:	e5903000 	ldr	r3, [r0]
   1a09c:	e3530000 	cmp	r3, #0
   1a0a0:	0afffff7 	beq	1a084 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x28>
   1a0a4:	e3560000 	cmp	r6, #0
   1a0a8:	0a00000f 	beq	1a0ec <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x90>
   1a0ac:	e3570000 	cmp	r7, #0
   1a0b0:	0a000011 	beq	1a0fc <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xa0>
   1a0b4:	e1a01005 	mov	r1, r5
   1a0b8:	e1a00004 	mov	r0, r4
   1a0bc:	eb0035f1 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a0c0:	e5900000 	ldr	r0, [r0]
   1a0c4:	e1a02007 	mov	r2, r7
   1a0c8:	e5903000 	ldr	r3, [r0]
   1a0cc:	e1a01006 	mov	r1, r6
   1a0d0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a0d4:	e593300c 	ldr	r3, [r3, #12]
   1a0d8:	e12fff13 	bx	r3
   1a0dc:	e59f2028 	ldr	r2, [pc, #40]	; 1a10c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb0>
   1a0e0:	e59f1028 	ldr	r1, [pc, #40]	; 1a110 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb4>
   1a0e4:	e59f0028 	ldr	r0, [pc, #40]	; 1a114 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb8>
   1a0e8:	eb0029c4 	bl	24800 <assertion_failed>
   1a0ec:	e59f2024 	ldr	r2, [pc, #36]	; 1a118 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xbc>
   1a0f0:	e59f1018 	ldr	r1, [pc, #24]	; 1a110 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb4>
   1a0f4:	e59f0020 	ldr	r0, [pc, #32]	; 1a11c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc0>
   1a0f8:	eb0029c0 	bl	24800 <assertion_failed>
   1a0fc:	e59f201c 	ldr	r2, [pc, #28]	; 1a120 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   1a100:	e59f1008 	ldr	r1, [pc, #8]	; 1a110 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xb4>
   1a104:	e59f0018 	ldr	r0, [pc, #24]	; 1a124 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc8>
   1a108:	eb0029bc 	bl	24800 <assertion_failed>
   1a10c:	0000012a 	.word	0x0000012a
   1a110:	0004396c 	.word	0x0004396c
   1a114:	000439c4 	.word	0x000439c4
   1a118:	00000131 	.word	0x00000131
   1a11c:	000439d8 	.word	0x000439d8
   1a120:	00000132 	.word	0x00000132
   1a124:	000439e8 	.word	0x000439e8

0001a128 <CTransportLayer::Disconnect(int)>:
   1a128:	e92d4070 	push	{r4, r5, r6, lr}
   1a12c:	e2515000 	subs	r5, r1, #0
   1a130:	ba000014 	blt	1a188 <CTransportLayer::Disconnect(int)+0x60>
   1a134:	e2804008 	add	r4, r0, #8
   1a138:	e1a00004 	mov	r0, r4
   1a13c:	eb0035cf 	bl	27880 <CPtrArray::GetCount() const>
   1a140:	e1550000 	cmp	r5, r0
   1a144:	ba000001 	blt	1a150 <CTransportLayer::Disconnect(int)+0x28>
   1a148:	e3e00000 	mvn	r0, #0
   1a14c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a150:	e1a01005 	mov	r1, r5
   1a154:	e1a00004 	mov	r0, r4
   1a158:	eb0035ca 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a15c:	e5903000 	ldr	r3, [r0]
   1a160:	e3530000 	cmp	r3, #0
   1a164:	0afffff7 	beq	1a148 <CTransportLayer::Disconnect(int)+0x20>
   1a168:	e1a01005 	mov	r1, r5
   1a16c:	e1a00004 	mov	r0, r4
   1a170:	eb0035c4 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a174:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a178:	e5900000 	ldr	r0, [r0]
   1a17c:	e5903000 	ldr	r3, [r0]
   1a180:	e5933010 	ldr	r3, [r3, #16]
   1a184:	e12fff13 	bx	r3
   1a188:	e3a02f4e 	mov	r2, #312	; 0x138
   1a18c:	e59f1004 	ldr	r1, [pc, #4]	; 1a198 <CTransportLayer::Disconnect(int)+0x70>
   1a190:	e59f0004 	ldr	r0, [pc, #4]	; 1a19c <CTransportLayer::Disconnect(int)+0x74>
   1a194:	eb002999 	bl	24800 <assertion_failed>
   1a198:	0004396c 	.word	0x0004396c
   1a19c:	000439c4 	.word	0x000439c4

0001a1a0 <CTransportLayer::Send(void const*, unsigned int, int, int)>:
   1a1a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a1a4:	e59d5018 	ldr	r5, [sp, #24]
   1a1a8:	e3550000 	cmp	r5, #0
   1a1ac:	ba00001f 	blt	1a230 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x90>
   1a1b0:	e2804008 	add	r4, r0, #8
   1a1b4:	e1a00004 	mov	r0, r4
   1a1b8:	e1a06001 	mov	r6, r1
   1a1bc:	e1a07002 	mov	r7, r2
   1a1c0:	e1a08003 	mov	r8, r3
   1a1c4:	eb0035ad 	bl	27880 <CPtrArray::GetCount() const>
   1a1c8:	e1550000 	cmp	r5, r0
   1a1cc:	ba000001 	blt	1a1d8 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x38>
   1a1d0:	e3e00000 	mvn	r0, #0
   1a1d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a1d8:	e1a01005 	mov	r1, r5
   1a1dc:	e1a00004 	mov	r0, r4
   1a1e0:	eb0035a8 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a1e4:	e5903000 	ldr	r3, [r0]
   1a1e8:	e3530000 	cmp	r3, #0
   1a1ec:	0afffff7 	beq	1a1d0 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x30>
   1a1f0:	e3560000 	cmp	r6, #0
   1a1f4:	0a000011 	beq	1a240 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xa0>
   1a1f8:	e3570000 	cmp	r7, #0
   1a1fc:	0a000013 	beq	1a250 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xb0>
   1a200:	e1a01005 	mov	r1, r5
   1a204:	e1a00004 	mov	r0, r4
   1a208:	eb00359e 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a20c:	e5900000 	ldr	r0, [r0]
   1a210:	e1a03008 	mov	r3, r8
   1a214:	e590c000 	ldr	ip, [r0]
   1a218:	e1a02007 	mov	r2, r7
   1a21c:	e59ce014 	ldr	lr, [ip, #20]
   1a220:	e1a01006 	mov	r1, r6
   1a224:	e1a0c00e 	mov	ip, lr
   1a228:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a22c:	e12fff1c 	bx	ip
   1a230:	e3a02f51 	mov	r2, #324	; 0x144
   1a234:	e59f1024 	ldr	r1, [pc, #36]	; 1a260 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc0>
   1a238:	e59f0024 	ldr	r0, [pc, #36]	; 1a264 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc4>
   1a23c:	eb00296f 	bl	24800 <assertion_failed>
   1a240:	e59f2020 	ldr	r2, [pc, #32]	; 1a268 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc8>
   1a244:	e59f1014 	ldr	r1, [pc, #20]	; 1a260 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc0>
   1a248:	e59f001c 	ldr	r0, [pc, #28]	; 1a26c <CTransportLayer::Send(void const*, unsigned int, int, int)+0xcc>
   1a24c:	eb00296b 	bl	24800 <assertion_failed>
   1a250:	e3a02f53 	mov	r2, #332	; 0x14c
   1a254:	e59f1004 	ldr	r1, [pc, #4]	; 1a260 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xc0>
   1a258:	e59f0010 	ldr	r0, [pc, #16]	; 1a270 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   1a25c:	eb002967 	bl	24800 <assertion_failed>
   1a260:	0004396c 	.word	0x0004396c
   1a264:	000439c4 	.word	0x000439c4
   1a268:	0000014b 	.word	0x0000014b
   1a26c:	000439fc 	.word	0x000439fc
   1a270:	00043a08 	.word	0x00043a08

0001a274 <CTransportLayer::Receive(void*, int, int)>:
   1a274:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1a278:	e2535000 	subs	r5, r3, #0
   1a27c:	ba00001a 	blt	1a2ec <CTransportLayer::Receive(void*, int, int)+0x78>
   1a280:	e2804008 	add	r4, r0, #8
   1a284:	e1a00004 	mov	r0, r4
   1a288:	e1a06001 	mov	r6, r1
   1a28c:	e1a07002 	mov	r7, r2
   1a290:	eb00357a 	bl	27880 <CPtrArray::GetCount() const>
   1a294:	e1550000 	cmp	r5, r0
   1a298:	ba000001 	blt	1a2a4 <CTransportLayer::Receive(void*, int, int)+0x30>
   1a29c:	e3e00000 	mvn	r0, #0
   1a2a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1a2a4:	e1a01005 	mov	r1, r5
   1a2a8:	e1a00004 	mov	r0, r4
   1a2ac:	eb003575 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a2b0:	e5903000 	ldr	r3, [r0]
   1a2b4:	e3530000 	cmp	r3, #0
   1a2b8:	0afffff7 	beq	1a29c <CTransportLayer::Receive(void*, int, int)+0x28>
   1a2bc:	e3560000 	cmp	r6, #0
   1a2c0:	0a00000d 	beq	1a2fc <CTransportLayer::Receive(void*, int, int)+0x88>
   1a2c4:	e1a01005 	mov	r1, r5
   1a2c8:	e1a00004 	mov	r0, r4
   1a2cc:	eb00356d 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a2d0:	e5900000 	ldr	r0, [r0]
   1a2d4:	e1a02007 	mov	r2, r7
   1a2d8:	e5903000 	ldr	r3, [r0]
   1a2dc:	e1a01006 	mov	r1, r6
   1a2e0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1a2e4:	e5933018 	ldr	r3, [r3, #24]
   1a2e8:	e12fff13 	bx	r3
   1a2ec:	e59f2018 	ldr	r2, [pc, #24]	; 1a30c <CTransportLayer::Receive(void*, int, int)+0x98>
   1a2f0:	e59f1018 	ldr	r1, [pc, #24]	; 1a310 <CTransportLayer::Receive(void*, int, int)+0x9c>
   1a2f4:	e59f0018 	ldr	r0, [pc, #24]	; 1a314 <CTransportLayer::Receive(void*, int, int)+0xa0>
   1a2f8:	eb002940 	bl	24800 <assertion_failed>
   1a2fc:	e59f2014 	ldr	r2, [pc, #20]	; 1a318 <CTransportLayer::Receive(void*, int, int)+0xa4>
   1a300:	e59f1008 	ldr	r1, [pc, #8]	; 1a310 <CTransportLayer::Receive(void*, int, int)+0x9c>
   1a304:	e59f0010 	ldr	r0, [pc, #16]	; 1a31c <CTransportLayer::Receive(void*, int, int)+0xa8>
   1a308:	eb00293c 	bl	24800 <assertion_failed>
   1a30c:	00000152 	.word	0x00000152
   1a310:	0004396c 	.word	0x0004396c
   1a314:	000439c4 	.word	0x000439c4
   1a318:	00000159 	.word	0x00000159
   1a31c:	00040b94 	.word	0x00040b94

0001a320 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>:
   1a320:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a324:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   1a328:	e59d9020 	ldr	r9, [sp, #32]
   1a32c:	e3550000 	cmp	r5, #0
   1a330:	e1dda2b4 	ldrh	sl, [sp, #36]	; 0x24
   1a334:	ba000021 	blt	1a3c0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xa0>
   1a338:	e2804008 	add	r4, r0, #8
   1a33c:	e1a00004 	mov	r0, r4
   1a340:	e1a06001 	mov	r6, r1
   1a344:	e1a07002 	mov	r7, r2
   1a348:	e1a08003 	mov	r8, r3
   1a34c:	eb00354b 	bl	27880 <CPtrArray::GetCount() const>
   1a350:	e1550000 	cmp	r5, r0
   1a354:	ba000001 	blt	1a360 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x40>
   1a358:	e3e00000 	mvn	r0, #0
   1a35c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a360:	e1a01005 	mov	r1, r5
   1a364:	e1a00004 	mov	r0, r4
   1a368:	eb003546 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a36c:	e5903000 	ldr	r3, [r0]
   1a370:	e3530000 	cmp	r3, #0
   1a374:	0afffff7 	beq	1a358 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x38>
   1a378:	e3560000 	cmp	r6, #0
   1a37c:	0a000013 	beq	1a3d0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xb0>
   1a380:	e3570000 	cmp	r7, #0
   1a384:	0a000015 	beq	1a3e0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xc0>
   1a388:	e1a01005 	mov	r1, r5
   1a38c:	e1a00004 	mov	r0, r4
   1a390:	eb00353c 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a394:	e5900000 	ldr	r0, [r0]
   1a398:	e1a03008 	mov	r3, r8
   1a39c:	e590c000 	ldr	ip, [r0]
   1a3a0:	e58da024 	str	sl, [sp, #36]	; 0x24
   1a3a4:	e58d9020 	str	r9, [sp, #32]
   1a3a8:	e59ce01c 	ldr	lr, [ip, #28]
   1a3ac:	e1a02007 	mov	r2, r7
   1a3b0:	e1a01006 	mov	r1, r6
   1a3b4:	e1a0c00e 	mov	ip, lr
   1a3b8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a3bc:	e12fff1c 	bx	ip
   1a3c0:	e3a02e16 	mov	r2, #352	; 0x160
   1a3c4:	e59f1024 	ldr	r1, [pc, #36]	; 1a3f0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd0>
   1a3c8:	e59f0024 	ldr	r0, [pc, #36]	; 1a3f4 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd4>
   1a3cc:	eb00290b 	bl	24800 <assertion_failed>
   1a3d0:	e59f2020 	ldr	r2, [pc, #32]	; 1a3f8 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd8>
   1a3d4:	e59f1014 	ldr	r1, [pc, #20]	; 1a3f0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd0>
   1a3d8:	e59f001c 	ldr	r0, [pc, #28]	; 1a3fc <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xdc>
   1a3dc:	eb002907 	bl	24800 <assertion_failed>
   1a3e0:	e3a02f5a 	mov	r2, #360	; 0x168
   1a3e4:	e59f1004 	ldr	r1, [pc, #4]	; 1a3f0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xd0>
   1a3e8:	e59f0010 	ldr	r0, [pc, #16]	; 1a400 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   1a3ec:	eb002903 	bl	24800 <assertion_failed>
   1a3f0:	0004396c 	.word	0x0004396c
   1a3f4:	000439c4 	.word	0x000439c4
   1a3f8:	00000167 	.word	0x00000167
   1a3fc:	000439fc 	.word	0x000439fc
   1a400:	00043a08 	.word	0x00043a08

0001a404 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>:
   1a404:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a408:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1a40c:	e59d9020 	ldr	r9, [sp, #32]
   1a410:	e3550000 	cmp	r5, #0
   1a414:	ba00001e 	blt	1a494 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x90>
   1a418:	e2804008 	add	r4, r0, #8
   1a41c:	e1a00004 	mov	r0, r4
   1a420:	e1a06001 	mov	r6, r1
   1a424:	e1a07002 	mov	r7, r2
   1a428:	e1a08003 	mov	r8, r3
   1a42c:	eb003513 	bl	27880 <CPtrArray::GetCount() const>
   1a430:	e1550000 	cmp	r5, r0
   1a434:	ba000001 	blt	1a440 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x3c>
   1a438:	e3e00000 	mvn	r0, #0
   1a43c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a440:	e1a01005 	mov	r1, r5
   1a444:	e1a00004 	mov	r0, r4
   1a448:	eb00350e 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a44c:	e5903000 	ldr	r3, [r0]
   1a450:	e3530000 	cmp	r3, #0
   1a454:	0afffff7 	beq	1a438 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x34>
   1a458:	e3560000 	cmp	r6, #0
   1a45c:	0a000010 	beq	1a4a4 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xa0>
   1a460:	e1a01005 	mov	r1, r5
   1a464:	e1a00004 	mov	r0, r4
   1a468:	eb003506 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a46c:	e5900000 	ldr	r0, [r0]
   1a470:	e1a03008 	mov	r3, r8
   1a474:	e590c000 	ldr	ip, [r0]
   1a478:	e58d9020 	str	r9, [sp, #32]
   1a47c:	e59ce020 	ldr	lr, [ip, #32]
   1a480:	e1a02007 	mov	r2, r7
   1a484:	e1a01006 	mov	r1, r6
   1a488:	e1a0c00e 	mov	ip, lr
   1a48c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a490:	e12fff1c 	bx	ip
   1a494:	e3a02e17 	mov	r2, #368	; 0x170
   1a498:	e59f1014 	ldr	r1, [pc, #20]	; 1a4b4 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb0>
   1a49c:	e59f0014 	ldr	r0, [pc, #20]	; 1a4b8 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb4>
   1a4a0:	eb0028d6 	bl	24800 <assertion_failed>
   1a4a4:	e59f2010 	ldr	r2, [pc, #16]	; 1a4bc <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb8>
   1a4a8:	e59f1004 	ldr	r1, [pc, #4]	; 1a4b4 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb0>
   1a4ac:	e59f000c 	ldr	r0, [pc, #12]	; 1a4c0 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xbc>
   1a4b0:	eb0028d2 	bl	24800 <assertion_failed>
   1a4b4:	0004396c 	.word	0x0004396c
   1a4b8:	000439c4 	.word	0x000439c4
   1a4bc:	00000177 	.word	0x00000177
   1a4c0:	00040b94 	.word	0x00040b94

0001a4c4 <CTransportLayer::SetOptionBroadcast(bool, int)>:
   1a4c4:	e92d4070 	push	{r4, r5, r6, lr}
   1a4c8:	e2525000 	subs	r5, r2, #0
   1a4cc:	ba000016 	blt	1a52c <CTransportLayer::SetOptionBroadcast(bool, int)+0x68>
   1a4d0:	e2804008 	add	r4, r0, #8
   1a4d4:	e1a00004 	mov	r0, r4
   1a4d8:	e1a06001 	mov	r6, r1
   1a4dc:	eb0034e7 	bl	27880 <CPtrArray::GetCount() const>
   1a4e0:	e1550000 	cmp	r5, r0
   1a4e4:	ba000001 	blt	1a4f0 <CTransportLayer::SetOptionBroadcast(bool, int)+0x2c>
   1a4e8:	e3e00000 	mvn	r0, #0
   1a4ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a4f0:	e1a01005 	mov	r1, r5
   1a4f4:	e1a00004 	mov	r0, r4
   1a4f8:	eb0034e2 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a4fc:	e5903000 	ldr	r3, [r0]
   1a500:	e3530000 	cmp	r3, #0
   1a504:	0afffff7 	beq	1a4e8 <CTransportLayer::SetOptionBroadcast(bool, int)+0x24>
   1a508:	e1a01005 	mov	r1, r5
   1a50c:	e1a00004 	mov	r0, r4
   1a510:	eb0034dc 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a514:	e5900000 	ldr	r0, [r0]
   1a518:	e1a01006 	mov	r1, r6
   1a51c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a520:	e5903000 	ldr	r3, [r0]
   1a524:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1a528:	e12fff13 	bx	r3
   1a52c:	e59f2008 	ldr	r2, [pc, #8]	; 1a53c <CTransportLayer::SetOptionBroadcast(bool, int)+0x78>
   1a530:	e59f1008 	ldr	r1, [pc, #8]	; 1a540 <CTransportLayer::SetOptionBroadcast(bool, int)+0x7c>
   1a534:	e59f0008 	ldr	r0, [pc, #8]	; 1a544 <CTransportLayer::SetOptionBroadcast(bool, int)+0x80>
   1a538:	eb0028b0 	bl	24800 <assertion_failed>
   1a53c:	0000017e 	.word	0x0000017e
   1a540:	0004396c 	.word	0x0004396c
   1a544:	000439c4 	.word	0x000439c4

0001a548 <CTransportLayer::IsConnected(int) const>:
   1a548:	e92d4070 	push	{r4, r5, r6, lr}
   1a54c:	e2515000 	subs	r5, r1, #0
   1a550:	ba000012 	blt	1a5a0 <CTransportLayer::IsConnected(int) const+0x58>
   1a554:	e2804008 	add	r4, r0, #8
   1a558:	e1a00004 	mov	r0, r4
   1a55c:	eb0034c7 	bl	27880 <CPtrArray::GetCount() const>
   1a560:	e1550000 	cmp	r5, r0
   1a564:	ba000001 	blt	1a570 <CTransportLayer::IsConnected(int) const+0x28>
   1a568:	e3a00000 	mov	r0, #0
   1a56c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a570:	e1a01005 	mov	r1, r5
   1a574:	e1a00004 	mov	r0, r4
   1a578:	eb0034de 	bl	278f8 <CPtrArray::operator[](unsigned int) const>
   1a57c:	e3500000 	cmp	r0, #0
   1a580:	0afffff8 	beq	1a568 <CTransportLayer::IsConnected(int) const+0x20>
   1a584:	e1a01005 	mov	r1, r5
   1a588:	e1a00004 	mov	r0, r4
   1a58c:	eb0034d9 	bl	278f8 <CPtrArray::operator[](unsigned int) const>
   1a590:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a594:	e5903000 	ldr	r3, [r0]
   1a598:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   1a59c:	e12fff13 	bx	r3
   1a5a0:	e59f2008 	ldr	r2, [pc, #8]	; 1a5b0 <CTransportLayer::IsConnected(int) const+0x68>
   1a5a4:	e59f1008 	ldr	r1, [pc, #8]	; 1a5b4 <CTransportLayer::IsConnected(int) const+0x6c>
   1a5a8:	e59f0008 	ldr	r0, [pc, #8]	; 1a5b8 <CTransportLayer::IsConnected(int) const+0x70>
   1a5ac:	eb002893 	bl	24800 <assertion_failed>
   1a5b0:	0000018a 	.word	0x0000018a
   1a5b4:	0004396c 	.word	0x0004396c
   1a5b8:	000439c4 	.word	0x000439c4

0001a5bc <CTransportLayer::GetForeignIP(int) const>:
   1a5bc:	e92d4070 	push	{r4, r5, r6, lr}
   1a5c0:	e2515000 	subs	r5, r1, #0
   1a5c4:	ba000010 	blt	1a60c <CTransportLayer::GetForeignIP(int) const+0x50>
   1a5c8:	e2804008 	add	r4, r0, #8
   1a5cc:	e1a00004 	mov	r0, r4
   1a5d0:	eb0034aa 	bl	27880 <CPtrArray::GetCount() const>
   1a5d4:	e1550000 	cmp	r5, r0
   1a5d8:	ba000001 	blt	1a5e4 <CTransportLayer::GetForeignIP(int) const+0x28>
   1a5dc:	e3a00000 	mov	r0, #0
   1a5e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a5e4:	e1a01005 	mov	r1, r5
   1a5e8:	e1a00004 	mov	r0, r4
   1a5ec:	eb0034c1 	bl	278f8 <CPtrArray::operator[](unsigned int) const>
   1a5f0:	e3500000 	cmp	r0, #0
   1a5f4:	0afffff8 	beq	1a5dc <CTransportLayer::GetForeignIP(int) const+0x20>
   1a5f8:	e1a01005 	mov	r1, r5
   1a5fc:	e1a00004 	mov	r0, r4
   1a600:	eb0034bc 	bl	278f8 <CPtrArray::operator[](unsigned int) const>
   1a604:	e8bd4070 	pop	{r4, r5, r6, lr}
   1a608:	ea000bd4 	b	1d560 <CNetConnection::GetForeignIP() const>
   1a60c:	e59f2008 	ldr	r2, [pc, #8]	; 1a61c <CTransportLayer::GetForeignIP(int) const+0x60>
   1a610:	e59f1008 	ldr	r1, [pc, #8]	; 1a620 <CTransportLayer::GetForeignIP(int) const+0x64>
   1a614:	e59f0008 	ldr	r0, [pc, #8]	; 1a624 <CTransportLayer::GetForeignIP(int) const+0x68>
   1a618:	eb002878 	bl	24800 <assertion_failed>
   1a61c:	00000196 	.word	0x00000196
   1a620:	0004396c 	.word	0x0004396c
   1a624:	000439c4 	.word	0x000439c4

0001a628 <CTransportLayer::~CTransportLayer()>:
   1a628:	e3a03000 	mov	r3, #0
   1a62c:	e92d4010 	push	{r4, lr}
   1a630:	e1a04000 	mov	r4, r0
   1a634:	e5803004 	str	r3, [r0, #4]
   1a638:	e4803020 	str	r3, [r0], #32
   1a63c:	eb00188a 	bl	2086c <CTCPRejector::~CTCPRejector()>
   1a640:	e2840008 	add	r0, r4, #8
   1a644:	eb003482 	bl	27854 <CPtrArray::~CPtrArray()>
   1a648:	e1a00004 	mov	r0, r4
   1a64c:	e8bd8010 	pop	{r4, pc}

0001a650 <CTransportLayer::Process()>:
   1a650:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a654:	e1a07000 	mov	r7, r0
   1a658:	e24dde67 	sub	sp, sp, #1648	; 0x670
   1a65c:	e24dd004 	sub	sp, sp, #4
   1a660:	e28d0020 	add	r0, sp, #32
   1a664:	e28d6028 	add	r6, sp, #40	; 0x28
   1a668:	eb0019c7 	bl	20d8c <CIPAddress::CIPAddress()>
   1a66c:	e1a00006 	mov	r0, r6
   1a670:	eb0019c5 	bl	20d8c <CIPAddress::CIPAddress()>
   1a674:	e5970004 	ldr	r0, [r7, #4]
   1a678:	e3500000 	cmp	r0, #0
   1a67c:	12874008 	addne	r4, r7, #8
   1a680:	128d801c 	addne	r8, sp, #28
   1a684:	12879020 	addne	r9, r7, #32
   1a688:	0a0000a5 	beq	1a924 <CTransportLayer::Process()+0x2d4>
   1a68c:	e88d0140 	stm	sp, {r6, r8}
   1a690:	e28d3020 	add	r3, sp, #32
   1a694:	e28d2018 	add	r2, sp, #24
   1a698:	e28d1030 	add	r1, sp, #48	; 0x30
   1a69c:	eb00022c 	bl	1af54 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>
   1a6a0:	e3500000 	cmp	r0, #0
   1a6a4:	0a000021 	beq	1a730 <CTransportLayer::Process()+0xe0>
   1a6a8:	e3a05000 	mov	r5, #0
   1a6ac:	ea000015 	b	1a708 <CTransportLayer::Process()+0xb8>
   1a6b0:	e1a01005 	mov	r1, r5
   1a6b4:	e1a00004 	mov	r0, r4
   1a6b8:	eb003472 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a6bc:	e5903000 	ldr	r3, [r0]
   1a6c0:	e3530000 	cmp	r3, #0
   1a6c4:	0a00000e 	beq	1a704 <CTransportLayer::Process()+0xb4>
   1a6c8:	e1a01005 	mov	r1, r5
   1a6cc:	e1a00004 	mov	r0, r4
   1a6d0:	eb00346c 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a6d4:	e5900000 	ldr	r0, [r0]
   1a6d8:	e59d101c 	ldr	r1, [sp, #28]
   1a6dc:	e5903000 	ldr	r3, [r0]
   1a6e0:	e58d1004 	str	r1, [sp, #4]
   1a6e4:	e58d6000 	str	r6, [sp]
   1a6e8:	e593a034 	ldr	sl, [r3, #52]	; 0x34
   1a6ec:	e59d2018 	ldr	r2, [sp, #24]
   1a6f0:	e28d3020 	add	r3, sp, #32
   1a6f4:	e28d1030 	add	r1, sp, #48	; 0x30
   1a6f8:	e12fff3a 	blx	sl
   1a6fc:	e3500000 	cmp	r0, #0
   1a700:	1a000004 	bne	1a718 <CTransportLayer::Process()+0xc8>
   1a704:	e2855001 	add	r5, r5, #1
   1a708:	e1a00004 	mov	r0, r4
   1a70c:	eb00345b 	bl	27880 <CPtrArray::GetCount() const>
   1a710:	e1550000 	cmp	r5, r0
   1a714:	3affffe5 	bcc	1a6b0 <CTransportLayer::Process()+0x60>
   1a718:	e1a00004 	mov	r0, r4
   1a71c:	eb003457 	bl	27880 <CPtrArray::GetCount() const>
   1a720:	e1550000 	cmp	r5, r0
   1a724:	2a000064 	bcs	1a8bc <CTransportLayer::Process()+0x26c>
   1a728:	e5970004 	ldr	r0, [r7, #4]
   1a72c:	eaffffd6 	b	1a68c <CTransportLayer::Process()+0x3c>
   1a730:	e28da016 	add	sl, sp, #22
   1a734:	e28d9014 	add	r9, sp, #20
   1a738:	e5970004 	ldr	r0, [r7, #4]
   1a73c:	e1a03006 	mov	r3, r6
   1a740:	e58d8008 	str	r8, [sp, #8]
   1a744:	e88d0600 	stm	sp, {r9, sl}
   1a748:	e28d2020 	add	r2, sp, #32
   1a74c:	e28d1013 	add	r1, sp, #19
   1a750:	eb000246 	bl	1b070 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>
   1a754:	e3500000 	cmp	r0, #0
   1a758:	0a00001c 	beq	1a7d0 <CTransportLayer::Process()+0x180>
   1a75c:	e3a05000 	mov	r5, #0
   1a760:	e1a00004 	mov	r0, r4
   1a764:	eb003445 	bl	27880 <CPtrArray::GetCount() const>
   1a768:	e1550000 	cmp	r5, r0
   1a76c:	2afffff1 	bcs	1a738 <CTransportLayer::Process()+0xe8>
   1a770:	e1a01005 	mov	r1, r5
   1a774:	e1a00004 	mov	r0, r4
   1a778:	eb003442 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a77c:	e5903000 	ldr	r3, [r0]
   1a780:	e3530000 	cmp	r3, #0
   1a784:	0a00000f 	beq	1a7c8 <CTransportLayer::Process()+0x178>
   1a788:	e1a01005 	mov	r1, r5
   1a78c:	e1a00004 	mov	r0, r4
   1a790:	eb00343c 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a794:	e1dd21b4 	ldrh	r2, [sp, #20]
   1a798:	e5900000 	ldr	r0, [r0]
   1a79c:	e59de01c 	ldr	lr, [sp, #28]
   1a7a0:	e1ddc1b6 	ldrh	ip, [sp, #22]
   1a7a4:	e5903000 	ldr	r3, [r0]
   1a7a8:	e88d5004 	stm	sp, {r2, ip, lr}
   1a7ac:	e5dd1013 	ldrb	r1, [sp, #19]
   1a7b0:	e593b038 	ldr	fp, [r3, #56]	; 0x38
   1a7b4:	e28d2020 	add	r2, sp, #32
   1a7b8:	e1a03006 	mov	r3, r6
   1a7bc:	e12fff3b 	blx	fp
   1a7c0:	e3500000 	cmp	r0, #0
   1a7c4:	1affffdb 	bne	1a738 <CTransportLayer::Process()+0xe8>
   1a7c8:	e2855001 	add	r5, r5, #1
   1a7cc:	eaffffe3 	b	1a760 <CTransportLayer::Process()+0x110>
   1a7d0:	e1a05000 	mov	r5, r0
   1a7d4:	e1a08000 	mov	r8, r0
   1a7d8:	ea000005 	b	1a7f4 <CTransportLayer::Process()+0x1a4>
   1a7dc:	eb003429 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a7e0:	e5900000 	ldr	r0, [r0]
   1a7e4:	e5903000 	ldr	r3, [r0]
   1a7e8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   1a7ec:	e12fff33 	blx	r3
   1a7f0:	e2855001 	add	r5, r5, #1
   1a7f4:	e1a00004 	mov	r0, r4
   1a7f8:	eb003420 	bl	27880 <CPtrArray::GetCount() const>
   1a7fc:	e1550000 	cmp	r5, r0
   1a800:	2a00001c 	bcs	1a878 <CTransportLayer::Process()+0x228>
   1a804:	e1a01005 	mov	r1, r5
   1a808:	e1a00004 	mov	r0, r4
   1a80c:	eb00341d 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a810:	e5903000 	ldr	r3, [r0]
   1a814:	e3530000 	cmp	r3, #0
   1a818:	0afffff4 	beq	1a7f0 <CTransportLayer::Process()+0x1a0>
   1a81c:	e1a01005 	mov	r1, r5
   1a820:	e1a00004 	mov	r0, r4
   1a824:	eb003417 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a828:	e5900000 	ldr	r0, [r0]
   1a82c:	e5903000 	ldr	r3, [r0]
   1a830:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   1a834:	e12fff33 	blx	r3
   1a838:	e3500000 	cmp	r0, #0
   1a83c:	e1a01005 	mov	r1, r5
   1a840:	e1a00004 	mov	r0, r4
   1a844:	0affffe4 	beq	1a7dc <CTransportLayer::Process()+0x18c>
   1a848:	eb00340e 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a84c:	e5900000 	ldr	r0, [r0]
   1a850:	e3500000 	cmp	r0, #0
   1a854:	0a000002 	beq	1a864 <CTransportLayer::Process()+0x214>
   1a858:	e5903000 	ldr	r3, [r0]
   1a85c:	e5933004 	ldr	r3, [r3, #4]
   1a860:	e12fff33 	blx	r3
   1a864:	e1a01005 	mov	r1, r5
   1a868:	e1a00004 	mov	r0, r4
   1a86c:	eb003405 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a870:	e5808000 	str	r8, [r0]
   1a874:	eaffffdd 	b	1a7f0 <CTransportLayer::Process()+0x1a0>
   1a878:	e597001c 	ldr	r0, [r7, #28]
   1a87c:	e3500000 	cmp	r0, #0
   1a880:	1a000025 	bne	1a91c <CTransportLayer::Process()+0x2cc>
   1a884:	e1a00004 	mov	r0, r4
   1a888:	eb0033fc 	bl	27880 <CPtrArray::GetCount() const>
   1a88c:	e3500000 	cmp	r0, #0
   1a890:	1a000014 	bne	1a8e8 <CTransportLayer::Process()+0x298>
   1a894:	e597301c 	ldr	r3, [r7, #28]
   1a898:	e3530000 	cmp	r3, #0
   1a89c:	1a00000f 	bne	1a8e0 <CTransportLayer::Process()+0x290>
   1a8a0:	e1a00006 	mov	r0, r6
   1a8a4:	eb00194e 	bl	20de4 <CIPAddress::~CIPAddress()>
   1a8a8:	e28d0020 	add	r0, sp, #32
   1a8ac:	eb00194c 	bl	20de4 <CIPAddress::~CIPAddress()>
   1a8b0:	e28dde67 	add	sp, sp, #1648	; 0x670
   1a8b4:	e28dd004 	add	sp, sp, #4
   1a8b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8bc:	e59d301c 	ldr	r3, [sp, #28]
   1a8c0:	e59d2018 	ldr	r2, [sp, #24]
   1a8c4:	e58d3004 	str	r3, [sp, #4]
   1a8c8:	e58d6000 	str	r6, [sp]
   1a8cc:	e28d3020 	add	r3, sp, #32
   1a8d0:	e28d1030 	add	r1, sp, #48	; 0x30
   1a8d4:	e1a00009 	mov	r0, r9
   1a8d8:	eb001838 	bl	209c0 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>
   1a8dc:	eaffff91 	b	1a728 <CTransportLayer::Process()+0xd8>
   1a8e0:	eb004540 	bl	2bde8 <LeaveCritical>
   1a8e4:	eaffffed 	b	1a8a0 <CTransportLayer::Process()+0x250>
   1a8e8:	e2405001 	sub	r5, r0, #1
   1a8ec:	e1a01005 	mov	r1, r5
   1a8f0:	e1a00004 	mov	r0, r4
   1a8f4:	eb0033e3 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1a8f8:	e5903000 	ldr	r3, [r0]
   1a8fc:	e3530000 	cmp	r3, #0
   1a900:	1affffe3 	bne	1a894 <CTransportLayer::Process()+0x244>
   1a904:	e2455001 	sub	r5, r5, #1
   1a908:	e1a00004 	mov	r0, r4
   1a90c:	eb003453 	bl	27a60 <CPtrArray::RemoveLast()>
   1a910:	e3750001 	cmn	r5, #1
   1a914:	0affffde 	beq	1a894 <CTransportLayer::Process()+0x244>
   1a918:	eafffff3 	b	1a8ec <CTransportLayer::Process()+0x29c>
   1a91c:	eb004506 	bl	2bd3c <EnterCritical>
   1a920:	eaffffd7 	b	1a884 <CTransportLayer::Process()+0x234>
   1a924:	e3a0203a 	mov	r2, #58	; 0x3a
   1a928:	e59f1004 	ldr	r1, [pc, #4]	; 1a934 <CTransportLayer::Process()+0x2e4>
   1a92c:	e59f0004 	ldr	r0, [pc, #4]	; 1a938 <CTransportLayer::Process()+0x2e8>
   1a930:	eb0027b2 	bl	24800 <assertion_failed>
   1a934:	0004396c 	.word	0x0004396c
   1a938:	00043994 	.word	0x00043994

0001a93c <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>:
   1a93c:	e92d4010 	push	{r4, lr}
   1a940:	e59f2008 	ldr	r2, [pc, #8]	; 1a950 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]+0x14>
   1a944:	e59f1008 	ldr	r1, [pc, #8]	; 1a954 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]+0x18>
   1a948:	e59f0008 	ldr	r0, [pc, #8]	; 1a958 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]+0x1c>
   1a94c:	eb0027ab 	bl	24800 <assertion_failed>
   1a950:	0000012b 	.word	0x0000012b
   1a954:	00043a14 	.word	0x00043a14
   1a958:	00043a28 	.word	0x00043a28

0001a95c <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>:
   1a95c:	e3a03000 	mov	r3, #0
   1a960:	e92d4010 	push	{r4, lr}
   1a964:	e1a04000 	mov	r4, r0
   1a968:	e880000e 	stm	r0, {r1, r2, r3}
   1a96c:	e280000c 	add	r0, r0, #12
   1a970:	eb001a51 	bl	212bc <CNetQueue::CNetQueue()>
   1a974:	e2840018 	add	r0, r4, #24
   1a978:	eb001a4f 	bl	212bc <CNetQueue::CNetQueue()>
   1a97c:	e2840024 	add	r0, r4, #36	; 0x24
   1a980:	eb001a4d 	bl	212bc <CNetQueue::CNetQueue()>
   1a984:	e2840030 	add	r0, r4, #48	; 0x30
   1a988:	eb000a04 	bl	1d1a0 <CRouteCache::CRouteCache()>
   1a98c:	e5943000 	ldr	r3, [r4]
   1a990:	e3530000 	cmp	r3, #0
   1a994:	0a000004 	beq	1a9ac <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x50>
   1a998:	e5943004 	ldr	r3, [r4, #4]
   1a99c:	e3530000 	cmp	r3, #0
   1a9a0:	0a000005 	beq	1a9bc <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x60>
   1a9a4:	e1a00004 	mov	r0, r4
   1a9a8:	e8bd8010 	pop	{r4, pc}
   1a9ac:	e3a0201f 	mov	r2, #31
   1a9b0:	e59f1014 	ldr	r1, [pc, #20]	; 1a9cc <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x70>
   1a9b4:	e59f0014 	ldr	r0, [pc, #20]	; 1a9d0 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x74>
   1a9b8:	eb002790 	bl	24800 <assertion_failed>
   1a9bc:	e3a02020 	mov	r2, #32
   1a9c0:	e59f1004 	ldr	r1, [pc, #4]	; 1a9cc <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x70>
   1a9c4:	e59f0008 	ldr	r0, [pc, #8]	; 1a9d4 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x78>
   1a9c8:	eb00278c 	bl	24800 <assertion_failed>
   1a9cc:	00043a14 	.word	0x00043a14
   1a9d0:	00043980 	.word	0x00043980
   1a9d4:	00043a3c 	.word	0x00043a3c

0001a9d8 <CNetworkLayer::~CNetworkLayer()>:
   1a9d8:	e92d4070 	push	{r4, r5, r6, lr}
   1a9dc:	e5905008 	ldr	r5, [r0, #8]
   1a9e0:	e1a04000 	mov	r4, r0
   1a9e4:	e3550000 	cmp	r5, #0
   1a9e8:	0a000004 	beq	1aa00 <CNetworkLayer::~CNetworkLayer()+0x28>
   1a9ec:	e1a00005 	mov	r0, r5
   1a9f0:	eb000850 	bl	1cb38 <CICMPHandler::~CICMPHandler()>
   1a9f4:	e1a00005 	mov	r0, r5
   1a9f8:	e3a01010 	mov	r1, #16
   1a9fc:	eb0041aa 	bl	2b0ac <operator delete(void*, unsigned int)>
   1aa00:	e3a03000 	mov	r3, #0
   1aa04:	e1a00004 	mov	r0, r4
   1aa08:	e5843008 	str	r3, [r4, #8]
   1aa0c:	e5843004 	str	r3, [r4, #4]
   1aa10:	e4803030 	str	r3, [r0], #48	; 0x30
   1aa14:	eb0009fb 	bl	1d208 <CRouteCache::~CRouteCache()>
   1aa18:	e2840024 	add	r0, r4, #36	; 0x24
   1aa1c:	eb001a60 	bl	213a4 <CNetQueue::~CNetQueue()>
   1aa20:	e2840018 	add	r0, r4, #24
   1aa24:	eb001a5e 	bl	213a4 <CNetQueue::~CNetQueue()>
   1aa28:	e284000c 	add	r0, r4, #12
   1aa2c:	eb001a5c 	bl	213a4 <CNetQueue::~CNetQueue()>
   1aa30:	e1a00004 	mov	r0, r4
   1aa34:	e8bd8070 	pop	{r4, r5, r6, pc}

0001aa38 <CNetworkLayer::Initialize()>:
   1aa38:	e92d4030 	push	{r4, r5, lr}
   1aa3c:	e5903008 	ldr	r3, [r0, #8]
   1aa40:	e24dd00c 	sub	sp, sp, #12
   1aa44:	e3530000 	cmp	r3, #0
   1aa48:	1a00000d 	bne	1aa84 <CNetworkLayer::Initialize()+0x4c>
   1aa4c:	e1a04000 	mov	r4, r0
   1aa50:	e3a00010 	mov	r0, #16
   1aa54:	eb004186 	bl	2b074 <operator new(unsigned int)>
   1aa58:	e1a02004 	mov	r2, r4
   1aa5c:	e4921024 	ldr	r1, [r2], #36	; 0x24
   1aa60:	e2843018 	add	r3, r4, #24
   1aa64:	e58d2000 	str	r2, [sp]
   1aa68:	e1a02004 	mov	r2, r4
   1aa6c:	e1a05000 	mov	r5, r0
   1aa70:	eb000810 	bl	1cab8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>
   1aa74:	e3a00001 	mov	r0, #1
   1aa78:	e5845008 	str	r5, [r4, #8]
   1aa7c:	e28dd00c 	add	sp, sp, #12
   1aa80:	e8bd8030 	pop	{r4, r5, pc}
   1aa84:	e3a0202e 	mov	r2, #46	; 0x2e
   1aa88:	e59f1004 	ldr	r1, [pc, #4]	; 1aa94 <CNetworkLayer::Initialize()+0x5c>
   1aa8c:	e59f0004 	ldr	r0, [pc, #4]	; 1aa98 <CNetworkLayer::Initialize()+0x60>
   1aa90:	eb00275a 	bl	24800 <assertion_failed>
   1aa94:	00043a14 	.word	0x00043a14
   1aa98:	00043a50 	.word	0x00043a50

0001aa9c <CNetworkLayer::Process()>:
   1aa9c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aaa0:	e1a05000 	mov	r5, r0
   1aaa4:	e5900000 	ldr	r0, [r0]
   1aaa8:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1aaac:	e3500000 	cmp	r0, #0
   1aab0:	e24dd00c 	sub	sp, sp, #12
   1aab4:	0a000062 	beq	1ac44 <CNetworkLayer::Process()+0x1a8>
   1aab8:	eb001857 	bl	20c1c <CNetConfig::GetIPAddress() const>
   1aabc:	e2507000 	subs	r7, r0, #0
   1aac0:	0a000063 	beq	1ac54 <CNetworkLayer::Process()+0x1b8>
   1aac4:	e5950004 	ldr	r0, [r5, #4]
   1aac8:	e3500000 	cmp	r0, #0
   1aacc:	0a000069 	beq	1ac78 <CNetworkLayer::Process()+0x1dc>
   1aad0:	e28d3018 	add	r3, sp, #24
   1aad4:	e28d6010 	add	r6, sp, #16
   1aad8:	e283b00c 	add	fp, r3, #12
   1aadc:	e3a0a009 	mov	sl, #9
   1aae0:	e3a08004 	mov	r8, #4
   1aae4:	e285900c 	add	r9, r5, #12
   1aae8:	ea000000 	b	1aaf0 <CNetworkLayer::Process()+0x54>
   1aaec:	e5950004 	ldr	r0, [r5, #4]
   1aaf0:	e28d200c 	add	r2, sp, #12
   1aaf4:	e28d1018 	add	r1, sp, #24
   1aaf8:	eb00031a 	bl	1b768 <CLinkLayer::Receive(void*, unsigned int*)>
   1aafc:	e3500000 	cmp	r0, #0
   1ab00:	0a000048 	beq	1ac28 <CNetworkLayer::Process()+0x18c>
   1ab04:	e59d300c 	ldr	r3, [sp, #12]
   1ab08:	e3530014 	cmp	r3, #20
   1ab0c:	9afffff6 	bls	1aaec <CNetworkLayer::Process()+0x50>
   1ab10:	e5dd4018 	ldrb	r4, [sp, #24]
   1ab14:	e204400f 	and	r4, r4, #15
   1ab18:	e2442005 	sub	r2, r4, #5
   1ab1c:	e3520001 	cmp	r2, #1
   1ab20:	8afffff1 	bhi	1aaec <CNetworkLayer::Process()+0x50>
   1ab24:	e1a04104 	lsl	r4, r4, #2
   1ab28:	e1530004 	cmp	r3, r4
   1ab2c:	9affffee 	bls	1aaec <CNetworkLayer::Process()+0x50>
   1ab30:	e1a01004 	mov	r1, r4
   1ab34:	e28d0018 	add	r0, sp, #24
   1ab38:	eb001b2a 	bl	217e8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1ab3c:	e3500000 	cmp	r0, #0
   1ab40:	1affffe9 	bne	1aaec <CNetworkLayer::Process()+0x50>
   1ab44:	e5dd3018 	ldrb	r3, [sp, #24]
   1ab48:	e1a03243 	asr	r3, r3, #4
   1ab4c:	e3530004 	cmp	r3, #4
   1ab50:	1affffe5 	bne	1aaec <CNetworkLayer::Process()+0x50>
   1ab54:	e28d1028 	add	r1, sp, #40	; 0x28
   1ab58:	e1a00006 	mov	r0, r6
   1ab5c:	eb001921 	bl	20fe8 <CIPAddress::CIPAddress(unsigned char const*)>
   1ab60:	e1a00007 	mov	r0, r7
   1ab64:	eb001967 	bl	21108 <CIPAddress::IsNull() const>
   1ab68:	e3500000 	cmp	r0, #0
   1ab6c:	1a00003c 	bne	1ac64 <CNetworkLayer::Process()+0x1c8>
   1ab70:	e1a01006 	mov	r1, r6
   1ab74:	e1a00007 	mov	r0, r7
   1ab78:	eb0018b2 	bl	20e48 <CIPAddress::operator!=(CIPAddress const&) const>
   1ab7c:	e3500000 	cmp	r0, #0
   1ab80:	1a000044 	bne	1ac98 <CNetworkLayer::Process()+0x1fc>
   1ab84:	e1dd31be 	ldrh	r3, [sp, #30]
   1ab88:	e3130020 	tst	r3, #32
   1ab8c:	1a000022 	bne	1ac1c <CNetworkLayer::Process()+0x180>
   1ab90:	e6bf3fb3 	rev16	r3, r3
   1ab94:	e2033c1f 	and	r3, r3, #7936	; 0x1f00
   1ab98:	e3530000 	cmp	r3, #0
   1ab9c:	1a00001e 	bne	1ac1c <CNetworkLayer::Process()+0x180>
   1aba0:	e1dd31ba 	ldrh	r3, [sp, #26]
   1aba4:	e59d200c 	ldr	r2, [sp, #12]
   1aba8:	e6bf3fb3 	rev16	r3, r3
   1abac:	e6ff3073 	uxth	r3, r3
   1abb0:	e1530002 	cmp	r3, r2
   1abb4:	8a000018 	bhi	1ac1c <CNetworkLayer::Process()+0x180>
   1abb8:	e1a0000a 	mov	r0, sl
   1abbc:	e58d300c 	str	r3, [sp, #12]
   1abc0:	eb00412b 	bl	2b074 <operator new(unsigned int)>
   1abc4:	e5dd1021 	ldrb	r1, [sp, #33]	; 0x21
   1abc8:	e58d0004 	str	r0, [sp, #4]
   1abcc:	e1a02008 	mov	r2, r8
   1abd0:	e4c01001 	strb	r1, [r0], #1
   1abd4:	e1a0100b 	mov	r1, fp
   1abd8:	eb003f4c 	bl	2a910 <memcpy>
   1abdc:	e59d3004 	ldr	r3, [sp, #4]
   1abe0:	e1a02008 	mov	r2, r8
   1abe4:	e28d1028 	add	r1, sp, #40	; 0x28
   1abe8:	e2830005 	add	r0, r3, #5
   1abec:	eb003f47 	bl	2a910 <memcpy>
   1abf0:	e5dd1021 	ldrb	r1, [sp, #33]	; 0x21
   1abf4:	e59d200c 	ldr	r2, [sp, #12]
   1abf8:	e3510001 	cmp	r1, #1
   1abfc:	e28d1018 	add	r1, sp, #24
   1ac00:	e0422004 	sub	r2, r2, r4
   1ac04:	e59d3004 	ldr	r3, [sp, #4]
   1ac08:	e0811004 	add	r1, r1, r4
   1ac0c:	02850018 	addeq	r0, r5, #24
   1ac10:	11a00009 	movne	r0, r9
   1ac14:	e58d200c 	str	r2, [sp, #12]
   1ac18:	eb0019e6 	bl	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1ac1c:	e1a00006 	mov	r0, r6
   1ac20:	eb00186f 	bl	20de4 <CIPAddress::~CIPAddress()>
   1ac24:	eaffffb0 	b	1aaec <CNetworkLayer::Process()+0x50>
   1ac28:	e5950008 	ldr	r0, [r5, #8]
   1ac2c:	e3500000 	cmp	r0, #0
   1ac30:	0a000014 	beq	1ac88 <CNetworkLayer::Process()+0x1ec>
   1ac34:	eb0007fe 	bl	1cc34 <CICMPHandler::Process()>
   1ac38:	e28dde65 	add	sp, sp, #1616	; 0x650
   1ac3c:	e28dd00c 	add	sp, sp, #12
   1ac40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac44:	e3a02037 	mov	r2, #55	; 0x37
   1ac48:	e59f1074 	ldr	r1, [pc, #116]	; 1acc4 <CNetworkLayer::Process()+0x228>
   1ac4c:	e59f0074 	ldr	r0, [pc, #116]	; 1acc8 <CNetworkLayer::Process()+0x22c>
   1ac50:	eb0026ea 	bl	24800 <assertion_failed>
   1ac54:	e3a02039 	mov	r2, #57	; 0x39
   1ac58:	e59f1064 	ldr	r1, [pc, #100]	; 1acc4 <CNetworkLayer::Process()+0x228>
   1ac5c:	e59f0068 	ldr	r0, [pc, #104]	; 1accc <CNetworkLayer::Process()+0x230>
   1ac60:	eb0026e6 	bl	24800 <assertion_failed>
   1ac64:	e1a00006 	mov	r0, r6
   1ac68:	eb001934 	bl	21140 <CIPAddress::IsBroadcast() const>
   1ac6c:	e3500000 	cmp	r0, #0
   1ac70:	1affffc3 	bne	1ab84 <CNetworkLayer::Process()+0xe8>
   1ac74:	eaffffe8 	b	1ac1c <CNetworkLayer::Process()+0x180>
   1ac78:	e3a0203d 	mov	r2, #61	; 0x3d
   1ac7c:	e59f1040 	ldr	r1, [pc, #64]	; 1acc4 <CNetworkLayer::Process()+0x228>
   1ac80:	e59f0048 	ldr	r0, [pc, #72]	; 1acd0 <CNetworkLayer::Process()+0x234>
   1ac84:	eb0026dd 	bl	24800 <assertion_failed>
   1ac88:	e3a0208a 	mov	r2, #138	; 0x8a
   1ac8c:	e59f1030 	ldr	r1, [pc, #48]	; 1acc4 <CNetworkLayer::Process()+0x228>
   1ac90:	e59f003c 	ldr	r0, [pc, #60]	; 1acd4 <CNetworkLayer::Process()+0x238>
   1ac94:	eb0026d9 	bl	24800 <assertion_failed>
   1ac98:	e1a00006 	mov	r0, r6
   1ac9c:	eb001927 	bl	21140 <CIPAddress::IsBroadcast() const>
   1aca0:	e3500000 	cmp	r0, #0
   1aca4:	1affffb6 	bne	1ab84 <CNetworkLayer::Process()+0xe8>
   1aca8:	e5950000 	ldr	r0, [r5]
   1acac:	eb0017e4 	bl	20c44 <CNetConfig::GetBroadcastAddress() const>
   1acb0:	e1a01006 	mov	r1, r6
   1acb4:	eb001863 	bl	20e48 <CIPAddress::operator!=(CIPAddress const&) const>
   1acb8:	e3500000 	cmp	r0, #0
   1acbc:	1affffd6 	bne	1ac1c <CNetworkLayer::Process()+0x180>
   1acc0:	eaffffaf 	b	1ab84 <CNetworkLayer::Process()+0xe8>
   1acc4:	00043a14 	.word	0x00043a14
   1acc8:	00043980 	.word	0x00043980
   1accc:	00043a64 	.word	0x00043a64
   1acd0:	00043a3c 	.word	0x00043a3c
   1acd4:	00043a28 	.word	0x00043a28

0001acd8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>:
   1acd8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acdc:	e59fc254 	ldr	ip, [pc, #596]	; 1af38 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x260>
   1ace0:	e243e001 	sub	lr, r3, #1
   1ace4:	e28db020 	add	fp, sp, #32
   1ace8:	e15e000c 	cmp	lr, ip
   1acec:	e24dd014 	sub	sp, sp, #20
   1acf0:	8a00004b 	bhi	1ae24 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x14c>
   1acf4:	e1a06000 	mov	r6, r0
   1acf8:	e3a0a000 	mov	sl, #0
   1acfc:	e3a0c040 	mov	ip, #64	; 0x40
   1ad00:	e3a0e045 	mov	lr, #69	; 0x45
   1ad04:	e2838014 	add	r8, r3, #20
   1ad08:	e1a07002 	mov	r7, r2
   1ad0c:	e1a05001 	mov	r5, r1
   1ad10:	e6bf2fb8 	rev16	r2, r8
   1ad14:	e283101b 	add	r1, r3, #27
   1ad18:	e6ff2072 	uxth	r2, r2
   1ad1c:	e3c11007 	bic	r1, r1, #7
   1ad20:	e04dd001 	sub	sp, sp, r1
   1ad24:	e1a00422 	lsr	r0, r2, #8
   1ad28:	e5cd0003 	strb	r0, [sp, #3]
   1ad2c:	e5960000 	ldr	r0, [r6]
   1ad30:	e1a04003 	mov	r4, r3
   1ad34:	e5db3004 	ldrb	r3, [fp, #4]
   1ad38:	e150000a 	cmp	r0, sl
   1ad3c:	e5cd2002 	strb	r2, [sp, #2]
   1ad40:	e5cd3009 	strb	r3, [sp, #9]
   1ad44:	e5cde000 	strb	lr, [sp]
   1ad48:	e50bd030 	str	sp, [fp, #-48]	; 0xffffffd0
   1ad4c:	e5cda001 	strb	sl, [sp, #1]
   1ad50:	e5cda004 	strb	sl, [sp, #4]
   1ad54:	e5cda005 	strb	sl, [sp, #5]
   1ad58:	e5cda007 	strb	sl, [sp, #7]
   1ad5c:	e5cdc006 	strb	ip, [sp, #6]
   1ad60:	e5cdc008 	strb	ip, [sp, #8]
   1ad64:	0a000044 	beq	1ae7c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1a4>
   1ad68:	eb0017ab 	bl	20c1c <CNetConfig::GetIPAddress() const>
   1ad6c:	e2509000 	subs	r9, r0, #0
   1ad70:	0a00002f 	beq	1ae34 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x15c>
   1ad74:	e28d100c 	add	r1, sp, #12
   1ad78:	eb0018cb 	bl	210ac <CIPAddress::CopyTo(unsigned char*) const>
   1ad7c:	e28d1010 	add	r1, sp, #16
   1ad80:	e1a00005 	mov	r0, r5
   1ad84:	eb0018c8 	bl	210ac <CIPAddress::CopyTo(unsigned char*) const>
   1ad88:	e3a01014 	mov	r1, #20
   1ad8c:	e1a0000d 	mov	r0, sp
   1ad90:	e5cda00a 	strb	sl, [sp, #10]
   1ad94:	e5cda00b 	strb	sl, [sp, #11]
   1ad98:	eb001a92 	bl	217e8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1ad9c:	e3570000 	cmp	r7, #0
   1ada0:	e1a03420 	lsr	r3, r0, #8
   1ada4:	e5cd000a 	strb	r0, [sp, #10]
   1ada8:	e5cd300b 	strb	r3, [sp, #11]
   1adac:	0a00003a 	beq	1ae9c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1c4>
   1adb0:	e1a02004 	mov	r2, r4
   1adb4:	e1a01007 	mov	r1, r7
   1adb8:	e28d0014 	add	r0, sp, #20
   1adbc:	eb003ed3 	bl	2a910 <memcpy>
   1adc0:	e1a00009 	mov	r0, r9
   1adc4:	eb0018cf 	bl	21108 <CIPAddress::IsNull() const>
   1adc8:	e3500000 	cmp	r0, #0
   1adcc:	1a00001c 	bne	1ae44 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x16c>
   1add0:	e24b002c 	sub	r0, fp, #44	; 0x2c
   1add4:	eb0017ec 	bl	20d8c <CIPAddress::CIPAddress()>
   1add8:	e5960000 	ldr	r0, [r6]
   1addc:	eb001792 	bl	20c2c <CNetConfig::GetNetMask() const>
   1ade0:	e1a01005 	mov	r1, r5
   1ade4:	e1a02000 	mov	r2, r0
   1ade8:	e1a00009 	mov	r0, r9
   1adec:	eb001905 	bl	21208 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   1adf0:	e2504000 	subs	r4, r0, #0
   1adf4:	0a00002c 	beq	1aeac <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1d4>
   1adf8:	e5960004 	ldr	r0, [r6, #4]
   1adfc:	e3500000 	cmp	r0, #0
   1ae00:	0a000021 	beq	1ae8c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1b4>
   1ae04:	e1a03008 	mov	r3, r8
   1ae08:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   1ae0c:	e1a01005 	mov	r1, r5
   1ae10:	eb0001ea 	bl	1b5c0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>
   1ae14:	e1a04000 	mov	r4, r0
   1ae18:	e24b002c 	sub	r0, fp, #44	; 0x2c
   1ae1c:	eb0017f0 	bl	20de4 <CIPAddress::~CIPAddress()>
   1ae20:	ea000000 	b	1ae28 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x150>
   1ae24:	e3a04000 	mov	r4, #0
   1ae28:	e1a00004 	mov	r0, r4
   1ae2c:	e24bd020 	sub	sp, fp, #32
   1ae30:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae34:	e3a020a4 	mov	r2, #164	; 0xa4
   1ae38:	e59f10fc 	ldr	r1, [pc, #252]	; 1af3c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1ae3c:	e59f00fc 	ldr	r0, [pc, #252]	; 1af40 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x268>
   1ae40:	eb00266e 	bl	24800 <assertion_failed>
   1ae44:	e1a00005 	mov	r0, r5
   1ae48:	eb0018bc 	bl	21140 <CIPAddress::IsBroadcast() const>
   1ae4c:	e2504000 	subs	r4, r0, #0
   1ae50:	1affffde 	bne	1add0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0xf8>
   1ae54:	e5960008 	ldr	r0, [r6, #8]
   1ae58:	e3500000 	cmp	r0, #0
   1ae5c:	0a00001d 	beq	1aed8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x200>
   1ae60:	e1a03008 	mov	r3, r8
   1ae64:	e1a0200d 	mov	r2, sp
   1ae68:	e1a01004 	mov	r1, r4
   1ae6c:	eb000864 	bl	1d004 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1ae70:	e1a00004 	mov	r0, r4
   1ae74:	e24bd020 	sub	sp, fp, #32
   1ae78:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae7c:	e3a020a2 	mov	r2, #162	; 0xa2
   1ae80:	e59f10b4 	ldr	r1, [pc, #180]	; 1af3c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1ae84:	e59f00b8 	ldr	r0, [pc, #184]	; 1af44 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x26c>
   1ae88:	eb00265c 	bl	24800 <assertion_failed>
   1ae8c:	e3a020d0 	mov	r2, #208	; 0xd0
   1ae90:	e59f10a4 	ldr	r1, [pc, #164]	; 1af3c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1ae94:	e59f00ac 	ldr	r0, [pc, #172]	; 1af48 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x270>
   1ae98:	eb002658 	bl	24800 <assertion_failed>
   1ae9c:	e3a020ad 	mov	r2, #173	; 0xad
   1aea0:	e59f1094 	ldr	r1, [pc, #148]	; 1af3c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1aea4:	e59f00a0 	ldr	r0, [pc, #160]	; 1af4c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x274>
   1aea8:	eb002654 	bl	24800 <assertion_failed>
   1aeac:	e1a00005 	mov	r0, r5
   1aeb0:	eb001871 	bl	2107c <CIPAddress::Get() const>
   1aeb4:	e1a01000 	mov	r1, r0
   1aeb8:	e2860030 	add	r0, r6, #48	; 0x30
   1aebc:	eb000912 	bl	1d30c <CRouteCache::GetRoute(unsigned char const*) const>
   1aec0:	e2501000 	subs	r1, r0, #0
   1aec4:	0a000004 	beq	1aedc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x204>
   1aec8:	e24b002c 	sub	r0, fp, #44	; 0x2c
   1aecc:	eb001835 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   1aed0:	e24b502c 	sub	r5, fp, #44	; 0x2c
   1aed4:	eaffffc7 	b	1adf8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x120>
   1aed8:	ebfffe97 	bl	1a93c <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>
   1aedc:	e5960000 	ldr	r0, [r6]
   1aee0:	eb001753 	bl	20c34 <CNetConfig::GetDefaultGateway() const>
   1aee4:	e1a05000 	mov	r5, r0
   1aee8:	eb001886 	bl	21108 <CIPAddress::IsNull() const>
   1aeec:	e3500000 	cmp	r0, #0
   1aef0:	0a000007 	beq	1af14 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x23c>
   1aef4:	e5960008 	ldr	r0, [r6, #8]
   1aef8:	e3500000 	cmp	r0, #0
   1aefc:	0afffff5 	beq	1aed8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x200>
   1af00:	e1a03008 	mov	r3, r8
   1af04:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   1af08:	e1a01004 	mov	r1, r4
   1af0c:	eb00083c 	bl	1d004 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1af10:	eaffffc0 	b	1ae18 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x140>
   1af14:	e5960004 	ldr	r0, [r6, #4]
   1af18:	e3500000 	cmp	r0, #0
   1af1c:	0affffda 	beq	1ae8c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1b4>
   1af20:	e3550000 	cmp	r5, #0
   1af24:	1affffb6 	bne	1ae04 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x12c>
   1af28:	e3a020d1 	mov	r2, #209	; 0xd1
   1af2c:	e59f1008 	ldr	r1, [pc, #8]	; 1af3c <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x264>
   1af30:	e59f0018 	ldr	r0, [pc, #24]	; 1af50 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x278>
   1af34:	eb002631 	bl	24800 <assertion_failed>
   1af38:	0000062b 	.word	0x0000062b
   1af3c:	00043a14 	.word	0x00043a14
   1af40:	00043a64 	.word	0x00043a64
   1af44:	00043980 	.word	0x00043980
   1af48:	00043a3c 	.word	0x00043a3c
   1af4c:	00043a78 	.word	0x00043a78
   1af50:	00043a88 	.word	0x00043a88

0001af54 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>:
   1af54:	e92d4030 	push	{r4, r5, lr}
   1af58:	e3510000 	cmp	r1, #0
   1af5c:	e24dd00c 	sub	sp, sp, #12
   1af60:	0a000023 	beq	1aff4 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xa0>
   1af64:	e3520000 	cmp	r2, #0
   1af68:	e1a04002 	mov	r4, r2
   1af6c:	0a000024 	beq	1b004 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xb0>
   1af70:	e280000c 	add	r0, r0, #12
   1af74:	e28d2004 	add	r2, sp, #4
   1af78:	e1a05003 	mov	r5, r3
   1af7c:	eb001953 	bl	214d0 <CNetQueue::Dequeue(void*, void**)>
   1af80:	e3500000 	cmp	r0, #0
   1af84:	e5840000 	str	r0, [r4]
   1af88:	0a000017 	beq	1afec <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x98>
   1af8c:	e59d4004 	ldr	r4, [sp, #4]
   1af90:	e3540000 	cmp	r4, #0
   1af94:	0a00001e 	beq	1b014 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xc0>
   1af98:	e59d301c 	ldr	r3, [sp, #28]
   1af9c:	e3530000 	cmp	r3, #0
   1afa0:	0a00001f 	beq	1b024 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xd0>
   1afa4:	e5d43000 	ldrb	r3, [r4]
   1afa8:	e59d201c 	ldr	r2, [sp, #28]
   1afac:	e3550000 	cmp	r5, #0
   1afb0:	e5823000 	str	r3, [r2]
   1afb4:	0a00001e 	beq	1b034 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xe0>
   1afb8:	e1a00005 	mov	r0, r5
   1afbc:	e2841001 	add	r1, r4, #1
   1afc0:	eb0017f8 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   1afc4:	e59d3018 	ldr	r3, [sp, #24]
   1afc8:	e3530000 	cmp	r3, #0
   1afcc:	0a00001c 	beq	1b044 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xf0>
   1afd0:	e2841005 	add	r1, r4, #5
   1afd4:	e59d0018 	ldr	r0, [sp, #24]
   1afd8:	eb0017f2 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   1afdc:	e1a00004 	mov	r0, r4
   1afe0:	e3a01009 	mov	r1, #9
   1afe4:	eb004030 	bl	2b0ac <operator delete(void*, unsigned int)>
   1afe8:	e3a00001 	mov	r0, #1
   1afec:	e28dd00c 	add	sp, sp, #12
   1aff0:	e8bd8030 	pop	{r4, r5, pc}
   1aff4:	e3a020d9 	mov	r2, #217	; 0xd9
   1aff8:	e59f1054 	ldr	r1, [pc, #84]	; 1b054 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1affc:	e59f0054 	ldr	r0, [pc, #84]	; 1b058 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x104>
   1b000:	eb0025fe 	bl	24800 <assertion_failed>
   1b004:	e3a020da 	mov	r2, #218	; 0xda
   1b008:	e59f1044 	ldr	r1, [pc, #68]	; 1b054 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b00c:	e59f0048 	ldr	r0, [pc, #72]	; 1b05c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x108>
   1b010:	eb0025fa 	bl	24800 <assertion_failed>
   1b014:	e3a020e2 	mov	r2, #226	; 0xe2
   1b018:	e59f1034 	ldr	r1, [pc, #52]	; 1b054 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b01c:	e59f003c 	ldr	r0, [pc, #60]	; 1b060 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x10c>
   1b020:	eb0025f6 	bl	24800 <assertion_failed>
   1b024:	e3a020e4 	mov	r2, #228	; 0xe4
   1b028:	e59f1024 	ldr	r1, [pc, #36]	; 1b054 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b02c:	e59f0030 	ldr	r0, [pc, #48]	; 1b064 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x110>
   1b030:	eb0025f2 	bl	24800 <assertion_failed>
   1b034:	e3a020e7 	mov	r2, #231	; 0xe7
   1b038:	e59f1014 	ldr	r1, [pc, #20]	; 1b054 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b03c:	e59f0024 	ldr	r0, [pc, #36]	; 1b068 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x114>
   1b040:	eb0025ee 	bl	24800 <assertion_failed>
   1b044:	e3a020ea 	mov	r2, #234	; 0xea
   1b048:	e59f1004 	ldr	r1, [pc, #4]	; 1b054 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   1b04c:	e59f0018 	ldr	r0, [pc, #24]	; 1b06c <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x118>
   1b050:	eb0025ea 	bl	24800 <assertion_failed>
   1b054:	00043a14 	.word	0x00043a14
   1b058:	00040b94 	.word	0x00040b94
   1b05c:	000413c0 	.word	0x000413c0
   1b060:	000439fc 	.word	0x000439fc
   1b064:	00043a98 	.word	0x00043a98
   1b068:	00043aa8 	.word	0x00043aa8
   1b06c:	00043ab8 	.word	0x00043ab8

0001b070 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>:
   1b070:	e92d4070 	push	{r4, r5, r6, lr}
   1b074:	e24dd010 	sub	sp, sp, #16
   1b078:	e1a04001 	mov	r4, r1
   1b07c:	e1a05002 	mov	r5, r2
   1b080:	e2800024 	add	r0, r0, #36	; 0x24
   1b084:	e3a02000 	mov	r2, #0
   1b088:	e1a0100d 	mov	r1, sp
   1b08c:	e1a06003 	mov	r6, r3
   1b090:	eb00190e 	bl	214d0 <CNetQueue::Dequeue(void*, void**)>
   1b094:	e3500000 	cmp	r0, #0
   1b098:	0a000022 	beq	1b128 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xb8>
   1b09c:	e350000e 	cmp	r0, #14
   1b0a0:	1a000026 	bne	1b140 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xd0>
   1b0a4:	e3540000 	cmp	r4, #0
   1b0a8:	0a000020 	beq	1b130 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xc0>
   1b0ac:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1b0b0:	e5dd3000 	ldrb	r3, [sp]
   1b0b4:	e3520000 	cmp	r2, #0
   1b0b8:	e5c43000 	strb	r3, [r4]
   1b0bc:	0a000023 	beq	1b150 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xe0>
   1b0c0:	e5dd3001 	ldrb	r3, [sp, #1]
   1b0c4:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1b0c8:	e3550000 	cmp	r5, #0
   1b0cc:	e5823000 	str	r3, [r2]
   1b0d0:	0a000022 	beq	1b160 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xf0>
   1b0d4:	e1a00005 	mov	r0, r5
   1b0d8:	e28d1002 	add	r1, sp, #2
   1b0dc:	eb0017b1 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   1b0e0:	e3560000 	cmp	r6, #0
   1b0e4:	0a000021 	beq	1b170 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x100>
   1b0e8:	e1a00006 	mov	r0, r6
   1b0ec:	e28d1006 	add	r1, sp, #6
   1b0f0:	eb0017ac 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   1b0f4:	e59d3020 	ldr	r3, [sp, #32]
   1b0f8:	e3530000 	cmp	r3, #0
   1b0fc:	0a00001f 	beq	1b180 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x110>
   1b100:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   1b104:	e1dd30ba 	ldrh	r3, [sp, #10]
   1b108:	e3520000 	cmp	r2, #0
   1b10c:	e59d2020 	ldr	r2, [sp, #32]
   1b110:	e1c230b0 	strh	r3, [r2]
   1b114:	0a00001d 	beq	1b190 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x120>
   1b118:	e3a00001 	mov	r0, #1
   1b11c:	e1dd30bc 	ldrh	r3, [sp, #12]
   1b120:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   1b124:	e1c230b0 	strh	r3, [r2]
   1b128:	e28dd010 	add	sp, sp, #16
   1b12c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b130:	e3a02c01 	mov	r2, #256	; 0x100
   1b134:	e59f1064 	ldr	r1, [pc, #100]	; 1b1a0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b138:	e59f0064 	ldr	r0, [pc, #100]	; 1b1a4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x134>
   1b13c:	eb0025af 	bl	24800 <assertion_failed>
   1b140:	e3a020fe 	mov	r2, #254	; 0xfe
   1b144:	e59f1054 	ldr	r1, [pc, #84]	; 1b1a0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b148:	e59f0058 	ldr	r0, [pc, #88]	; 1b1a8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x138>
   1b14c:	eb0025ab 	bl	24800 <assertion_failed>
   1b150:	e59f2054 	ldr	r2, [pc, #84]	; 1b1ac <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x13c>
   1b154:	e59f1044 	ldr	r1, [pc, #68]	; 1b1a0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b158:	e59f0050 	ldr	r0, [pc, #80]	; 1b1b0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x140>
   1b15c:	eb0025a7 	bl	24800 <assertion_failed>
   1b160:	e59f204c 	ldr	r2, [pc, #76]	; 1b1b4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x144>
   1b164:	e59f1034 	ldr	r1, [pc, #52]	; 1b1a0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b168:	e59f0048 	ldr	r0, [pc, #72]	; 1b1b8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x148>
   1b16c:	eb0025a3 	bl	24800 <assertion_failed>
   1b170:	e59f2044 	ldr	r2, [pc, #68]	; 1b1bc <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x14c>
   1b174:	e59f1024 	ldr	r1, [pc, #36]	; 1b1a0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b178:	e59f0040 	ldr	r0, [pc, #64]	; 1b1c0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x150>
   1b17c:	eb00259f 	bl	24800 <assertion_failed>
   1b180:	e3a02f43 	mov	r2, #268	; 0x10c
   1b184:	e59f1014 	ldr	r1, [pc, #20]	; 1b1a0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b188:	e59f0034 	ldr	r0, [pc, #52]	; 1b1c4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x154>
   1b18c:	eb00259b 	bl	24800 <assertion_failed>
   1b190:	e59f2030 	ldr	r2, [pc, #48]	; 1b1c8 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x158>
   1b194:	e59f1004 	ldr	r1, [pc, #4]	; 1b1a0 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x130>
   1b198:	e59f002c 	ldr	r0, [pc, #44]	; 1b1cc <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x15c>
   1b19c:	eb002597 	bl	24800 <assertion_failed>
   1b1a0:	00043a14 	.word	0x00043a14
   1b1a4:	00043ae8 	.word	0x00043ae8
   1b1a8:	00043ac8 	.word	0x00043ac8
   1b1ac:	00000103 	.word	0x00000103
   1b1b0:	00043a98 	.word	0x00043a98
   1b1b4:	00000106 	.word	0x00000106
   1b1b8:	00043aa8 	.word	0x00043aa8
   1b1bc:	00000109 	.word	0x00000109
   1b1c0:	00043ab8 	.word	0x00043ab8
   1b1c4:	00043af4 	.word	0x00043af4
   1b1c8:	0000010f 	.word	0x0000010f
   1b1cc:	00043b04 	.word	0x00043b04

0001b1d0 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>:
   1b1d0:	e2800030 	add	r0, r0, #48	; 0x30
   1b1d4:	ea000812 	b	1d224 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>

0001b1d8 <CNetworkLayer::GetGateway(unsigned char const*) const>:
   1b1d8:	e92d4010 	push	{r4, lr}
   1b1dc:	e1a04000 	mov	r4, r0
   1b1e0:	e2800030 	add	r0, r0, #48	; 0x30
   1b1e4:	eb000848 	bl	1d30c <CRouteCache::GetRoute(unsigned char const*) const>
   1b1e8:	e3500000 	cmp	r0, #0
   1b1ec:	18bd8010 	popne	{r4, pc}
   1b1f0:	e5940000 	ldr	r0, [r4]
   1b1f4:	e3500000 	cmp	r0, #0
   1b1f8:	0a000004 	beq	1b210 <CNetworkLayer::GetGateway(unsigned char const*) const+0x38>
   1b1fc:	eb00168c 	bl	20c34 <CNetConfig::GetDefaultGateway() const>
   1b200:	e3500000 	cmp	r0, #0
   1b204:	0a000005 	beq	1b220 <CNetworkLayer::GetGateway(unsigned char const*) const+0x48>
   1b208:	e8bd4010 	pop	{r4, lr}
   1b20c:	ea00179a 	b	2107c <CIPAddress::Get() const>
   1b210:	e59f2018 	ldr	r2, [pc, #24]	; 1b230 <CNetworkLayer::GetGateway(unsigned char const*) const+0x58>
   1b214:	e59f1018 	ldr	r1, [pc, #24]	; 1b234 <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   1b218:	e59f0018 	ldr	r0, [pc, #24]	; 1b238 <CNetworkLayer::GetGateway(unsigned char const*) const+0x60>
   1b21c:	eb002577 	bl	24800 <assertion_failed>
   1b220:	e3a02f49 	mov	r2, #292	; 0x124
   1b224:	e59f1008 	ldr	r1, [pc, #8]	; 1b234 <CNetworkLayer::GetGateway(unsigned char const*) const+0x5c>
   1b228:	e59f000c 	ldr	r0, [pc, #12]	; 1b23c <CNetworkLayer::GetGateway(unsigned char const*) const+0x64>
   1b22c:	eb002573 	bl	24800 <assertion_failed>
   1b230:	00000122 	.word	0x00000122
   1b234:	00043a14 	.word	0x00043a14
   1b238:	00043980 	.word	0x00043980
   1b23c:	00043b18 	.word	0x00043b18

0001b240 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>:
   1b240:	e5900008 	ldr	r0, [r0, #8]
   1b244:	e3500000 	cmp	r0, #0
   1b248:	0a000000 	beq	1b250 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)+0x10>
   1b24c:	ea00076c 	b	1d004 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   1b250:	e92d4010 	push	{r4, lr}
   1b254:	ebfffdb8 	bl	1a93c <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int) [clone .part.1]>

0001b258 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>:
   1b258:	e92d4070 	push	{r4, r5, r6, lr}
   1b25c:	e3a05000 	mov	r5, #0
   1b260:	e1a04000 	mov	r4, r0
   1b264:	e8800026 	stm	r0, {r1, r2, r5}
   1b268:	e580500c 	str	r5, [r0, #12]
   1b26c:	e2800010 	add	r0, r0, #16
   1b270:	eb001811 	bl	212bc <CNetQueue::CNetQueue()>
   1b274:	e284001c 	add	r0, r4, #28
   1b278:	eb00180f 	bl	212bc <CNetQueue::CNetQueue()>
   1b27c:	e2840028 	add	r0, r4, #40	; 0x28
   1b280:	eb00180d 	bl	212bc <CNetQueue::CNetQueue()>
   1b284:	e5943000 	ldr	r3, [r4]
   1b288:	e1c453b4 	strh	r5, [r4, #52]	; 0x34
   1b28c:	e1530005 	cmp	r3, r5
   1b290:	0a000004 	beq	1b2a8 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x50>
   1b294:	e5943004 	ldr	r3, [r4, #4]
   1b298:	e3530000 	cmp	r3, #0
   1b29c:	0a000005 	beq	1b2b8 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x60>
   1b2a0:	e1a00004 	mov	r0, r4
   1b2a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b2a8:	e3a02025 	mov	r2, #37	; 0x25
   1b2ac:	e59f1014 	ldr	r1, [pc, #20]	; 1b2c8 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   1b2b0:	e59f0014 	ldr	r0, [pc, #20]	; 1b2cc <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x74>
   1b2b4:	eb002551 	bl	24800 <assertion_failed>
   1b2b8:	e3a02026 	mov	r2, #38	; 0x26
   1b2bc:	e59f1004 	ldr	r1, [pc, #4]	; 1b2c8 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   1b2c0:	e59f0008 	ldr	r0, [pc, #8]	; 1b2d0 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x78>
   1b2c4:	eb00254d 	bl	24800 <assertion_failed>
   1b2c8:	00043b30 	.word	0x00043b30
   1b2cc:	00043980 	.word	0x00043980
   1b2d0:	00043b40 	.word	0x00043b40

0001b2d4 <CLinkLayer::~CLinkLayer()>:
   1b2d4:	e92d4070 	push	{r4, r5, r6, lr}
   1b2d8:	e590500c 	ldr	r5, [r0, #12]
   1b2dc:	e1a04000 	mov	r4, r0
   1b2e0:	e3550000 	cmp	r5, #0
   1b2e4:	0a000004 	beq	1b2fc <CLinkLayer::~CLinkLayer()+0x28>
   1b2e8:	e1a00005 	mov	r0, r5
   1b2ec:	eb00030e 	bl	1bf2c <CARPHandler::~CARPHandler()>
   1b2f0:	e1a00005 	mov	r0, r5
   1b2f4:	e3a01f93 	mov	r1, #588	; 0x24c
   1b2f8:	eb003f6b 	bl	2b0ac <operator delete(void*, unsigned int)>
   1b2fc:	e3a03000 	mov	r3, #0
   1b300:	e1a00004 	mov	r0, r4
   1b304:	e584300c 	str	r3, [r4, #12]
   1b308:	e5843008 	str	r3, [r4, #8]
   1b30c:	e5843004 	str	r3, [r4, #4]
   1b310:	e4803028 	str	r3, [r0], #40	; 0x28
   1b314:	eb001822 	bl	213a4 <CNetQueue::~CNetQueue()>
   1b318:	e284001c 	add	r0, r4, #28
   1b31c:	eb001820 	bl	213a4 <CNetQueue::~CNetQueue()>
   1b320:	e2840010 	add	r0, r4, #16
   1b324:	eb00181e 	bl	213a4 <CNetQueue::~CNetQueue()>
   1b328:	e1a00004 	mov	r0, r4
   1b32c:	e8bd8070 	pop	{r4, r5, r6, pc}

0001b330 <CLinkLayer::Initialize()>:
   1b330:	e92d4030 	push	{r4, r5, lr}
   1b334:	e5903000 	ldr	r3, [r0]
   1b338:	e24dd00c 	sub	sp, sp, #12
   1b33c:	e3530000 	cmp	r3, #0
   1b340:	0a00000d 	beq	1b37c <CLinkLayer::Initialize()+0x4c>
   1b344:	e1a04000 	mov	r4, r0
   1b348:	e3a00f93 	mov	r0, #588	; 0x24c
   1b34c:	eb003f48 	bl	2b074 <operator new(unsigned int)>
   1b350:	e1a03004 	mov	r3, r4
   1b354:	e4931010 	ldr	r1, [r3], #16
   1b358:	e5942004 	ldr	r2, [r4, #4]
   1b35c:	e58d3000 	str	r3, [sp]
   1b360:	e1a03004 	mov	r3, r4
   1b364:	e1a05000 	mov	r5, r0
   1b368:	eb0002c9 	bl	1be94 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>
   1b36c:	e3a00001 	mov	r0, #1
   1b370:	e584500c 	str	r5, [r4, #12]
   1b374:	e28dd00c 	add	sp, sp, #12
   1b378:	e8bd8030 	pop	{r4, r5, pc}
   1b37c:	e3a02035 	mov	r2, #53	; 0x35
   1b380:	e59f1004 	ldr	r1, [pc, #4]	; 1b38c <CLinkLayer::Initialize()+0x5c>
   1b384:	e59f0004 	ldr	r0, [pc, #4]	; 1b390 <CLinkLayer::Initialize()+0x60>
   1b388:	eb00251c 	bl	24800 <assertion_failed>
   1b38c:	00043b30 	.word	0x00043b30
   1b390:	00043980 	.word	0x00043980

0001b394 <CLinkLayer::AttachLayer(CNetworkLayer*)>:
   1b394:	e5903008 	ldr	r3, [r0, #8]
   1b398:	e92d4010 	push	{r4, lr}
   1b39c:	e3530000 	cmp	r3, #0
   1b3a0:	1a000006 	bne	1b3c0 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x2c>
   1b3a4:	e3510000 	cmp	r1, #0
   1b3a8:	e5801008 	str	r1, [r0, #8]
   1b3ac:	18bd8010 	popne	{r4, pc}
   1b3b0:	e3a02040 	mov	r2, #64	; 0x40
   1b3b4:	e59f1014 	ldr	r1, [pc, #20]	; 1b3d0 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x3c>
   1b3b8:	e59f0014 	ldr	r0, [pc, #20]	; 1b3d4 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x40>
   1b3bc:	eb00250f 	bl	24800 <assertion_failed>
   1b3c0:	e3a0203e 	mov	r2, #62	; 0x3e
   1b3c4:	e59f1004 	ldr	r1, [pc, #4]	; 1b3d0 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x3c>
   1b3c8:	e59f0008 	ldr	r0, [pc, #8]	; 1b3d8 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x44>
   1b3cc:	eb00250b 	bl	24800 <assertion_failed>
   1b3d0:	00043b30 	.word	0x00043b30
   1b3d4:	00043994 	.word	0x00043994
   1b3d8:	00043b54 	.word	0x00043b54

0001b3dc <CLinkLayer::Process()>:
   1b3dc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3e0:	e1a04000 	mov	r4, r0
   1b3e4:	e5900004 	ldr	r0, [r0, #4]
   1b3e8:	e24dde65 	sub	sp, sp, #1616	; 0x650
   1b3ec:	e3500000 	cmp	r0, #0
   1b3f0:	e24dd00c 	sub	sp, sp, #12
   1b3f4:	0a00004a 	beq	1b524 <CLinkLayer::Process()+0x148>
   1b3f8:	eb000214 	bl	1bc50 <CNetDeviceLayer::GetMACAddress() const>
   1b3fc:	e2506000 	subs	r6, r0, #0
   1b400:	0a00004f 	beq	1b544 <CLinkLayer::Process()+0x168>
   1b404:	e5940004 	ldr	r0, [r4, #4]
   1b408:	e3500000 	cmp	r0, #0
   1b40c:	0a000050 	beq	1b554 <CLinkLayer::Process()+0x178>
   1b410:	e28d3018 	add	r3, sp, #24
   1b414:	e28d5010 	add	r5, sp, #16
   1b418:	e283700e 	add	r7, r3, #14
   1b41c:	e284a01c 	add	sl, r4, #28
   1b420:	e3a09000 	mov	r9, #0
   1b424:	e59f8178 	ldr	r8, [pc, #376]	; 1b5a4 <CLinkLayer::Process()+0x1c8>
   1b428:	e3a0b006 	mov	fp, #6
   1b42c:	ea000000 	b	1b434 <CLinkLayer::Process()+0x58>
   1b430:	e5940004 	ldr	r0, [r4, #4]
   1b434:	e28d200c 	add	r2, sp, #12
   1b438:	e28d1018 	add	r1, sp, #24
   1b43c:	eb000213 	bl	1bc90 <CNetDeviceLayer::Receive(void*, unsigned int*)>
   1b440:	e3500000 	cmp	r0, #0
   1b444:	0a00002f 	beq	1b508 <CLinkLayer::Process()+0x12c>
   1b448:	e59d300c 	ldr	r3, [sp, #12]
   1b44c:	e3530d19 	cmp	r3, #1600	; 0x640
   1b450:	8a000019 	bhi	1b4bc <CLinkLayer::Process()+0xe0>
   1b454:	e353000e 	cmp	r3, #14
   1b458:	9afffff4 	bls	1b430 <CLinkLayer::Process()+0x54>
   1b45c:	e28d1018 	add	r1, sp, #24
   1b460:	e1a00005 	mov	r0, r5
   1b464:	eb003e4b 	bl	2ad98 <CMACAddress::CMACAddress(unsigned char const*)>
   1b468:	e1a01006 	mov	r1, r6
   1b46c:	e1a00005 	mov	r0, r5
   1b470:	eb003e33 	bl	2ad44 <CMACAddress::operator!=(CMACAddress const&) const>
   1b474:	e3500000 	cmp	r0, #0
   1b478:	1a000018 	bne	1b4e0 <CLinkLayer::Process()+0x104>
   1b47c:	e59d200c 	ldr	r2, [sp, #12]
   1b480:	e242200e 	sub	r2, r2, #14
   1b484:	e3520000 	cmp	r2, #0
   1b488:	e58d200c 	str	r2, [sp, #12]
   1b48c:	0a000028 	beq	1b534 <CLinkLayer::Process()+0x158>
   1b490:	e1dd32b4 	ldrh	r3, [sp, #36]	; 0x24
   1b494:	e3530008 	cmp	r3, #8
   1b498:	0a000015 	beq	1b4f4 <CLinkLayer::Process()+0x118>
   1b49c:	e1530008 	cmp	r3, r8
   1b4a0:	0a000009 	beq	1b4cc <CLinkLayer::Process()+0xf0>
   1b4a4:	e1d423b4 	ldrh	r2, [r4, #52]	; 0x34
   1b4a8:	e1520003 	cmp	r2, r3
   1b4ac:	0a00002c 	beq	1b564 <CLinkLayer::Process()+0x188>
   1b4b0:	e1a00005 	mov	r0, r5
   1b4b4:	eb003e09 	bl	2ace0 <CMACAddress::~CMACAddress()>
   1b4b8:	eaffffdc 	b	1b430 <CLinkLayer::Process()+0x54>
   1b4bc:	e3a0204e 	mov	r2, #78	; 0x4e
   1b4c0:	e59f10e0 	ldr	r1, [pc, #224]	; 1b5a8 <CLinkLayer::Process()+0x1cc>
   1b4c4:	e59f00e0 	ldr	r0, [pc, #224]	; 1b5ac <CLinkLayer::Process()+0x1d0>
   1b4c8:	eb0024cc 	bl	24800 <assertion_failed>
   1b4cc:	e1a03009 	mov	r3, r9
   1b4d0:	e1a01007 	mov	r1, r7
   1b4d4:	e2840010 	add	r0, r4, #16
   1b4d8:	eb0017b6 	bl	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b4dc:	eafffff3 	b	1b4b0 <CLinkLayer::Process()+0xd4>
   1b4e0:	e1a00005 	mov	r0, r5
   1b4e4:	eb003e5c 	bl	2ae5c <CMACAddress::IsBroadcast() const>
   1b4e8:	e3500000 	cmp	r0, #0
   1b4ec:	1affffe2 	bne	1b47c <CLinkLayer::Process()+0xa0>
   1b4f0:	eaffffee 	b	1b4b0 <CLinkLayer::Process()+0xd4>
   1b4f4:	e1a03009 	mov	r3, r9
   1b4f8:	e1a01007 	mov	r1, r7
   1b4fc:	e1a0000a 	mov	r0, sl
   1b500:	eb0017ac 	bl	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b504:	eaffffe9 	b	1b4b0 <CLinkLayer::Process()+0xd4>
   1b508:	e594000c 	ldr	r0, [r4, #12]
   1b50c:	e3500000 	cmp	r0, #0
   1b510:	0a00001f 	beq	1b594 <CLinkLayer::Process()+0x1b8>
   1b514:	eb000385 	bl	1c330 <CARPHandler::Process()>
   1b518:	e28dde65 	add	sp, sp, #1616	; 0x650
   1b51c:	e28dd00c 	add	sp, sp, #12
   1b520:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b524:	e3a02045 	mov	r2, #69	; 0x45
   1b528:	e59f1078 	ldr	r1, [pc, #120]	; 1b5a8 <CLinkLayer::Process()+0x1cc>
   1b52c:	e59f007c 	ldr	r0, [pc, #124]	; 1b5b0 <CLinkLayer::Process()+0x1d4>
   1b530:	eb0024b2 	bl	24800 <assertion_failed>
   1b534:	e3a0205d 	mov	r2, #93	; 0x5d
   1b538:	e59f1068 	ldr	r1, [pc, #104]	; 1b5a8 <CLinkLayer::Process()+0x1cc>
   1b53c:	e59f0070 	ldr	r0, [pc, #112]	; 1b5b4 <CLinkLayer::Process()+0x1d8>
   1b540:	eb0024ae 	bl	24800 <assertion_failed>
   1b544:	e3a02047 	mov	r2, #71	; 0x47
   1b548:	e59f1058 	ldr	r1, [pc, #88]	; 1b5a8 <CLinkLayer::Process()+0x1cc>
   1b54c:	e59f0064 	ldr	r0, [pc, #100]	; 1b5b8 <CLinkLayer::Process()+0x1dc>
   1b550:	eb0024aa 	bl	24800 <assertion_failed>
   1b554:	e3a02049 	mov	r2, #73	; 0x49
   1b558:	e59f1048 	ldr	r1, [pc, #72]	; 1b5a8 <CLinkLayer::Process()+0x1cc>
   1b55c:	e59f004c 	ldr	r0, [pc, #76]	; 1b5b0 <CLinkLayer::Process()+0x1d4>
   1b560:	eb0024a6 	bl	24800 <assertion_failed>
   1b564:	e1a0000b 	mov	r0, fp
   1b568:	eb003ec1 	bl	2b074 <operator new(unsigned int)>
   1b56c:	e1a0200b 	mov	r2, fp
   1b570:	e28d101e 	add	r1, sp, #30
   1b574:	e58d0004 	str	r0, [sp, #4]
   1b578:	eb003ce4 	bl	2a910 <memcpy>
   1b57c:	e59d3004 	ldr	r3, [sp, #4]
   1b580:	e59d200c 	ldr	r2, [sp, #12]
   1b584:	e1a01007 	mov	r1, r7
   1b588:	e2840028 	add	r0, r4, #40	; 0x28
   1b58c:	eb001789 	bl	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1b590:	eaffffc6 	b	1b4b0 <CLinkLayer::Process()+0xd4>
   1b594:	e3a02077 	mov	r2, #119	; 0x77
   1b598:	e59f1008 	ldr	r1, [pc, #8]	; 1b5a8 <CLinkLayer::Process()+0x1cc>
   1b59c:	e59f0018 	ldr	r0, [pc, #24]	; 1b5bc <CLinkLayer::Process()+0x1e0>
   1b5a0:	eb002496 	bl	24800 <assertion_failed>
   1b5a4:	00000608 	.word	0x00000608
   1b5a8:	00043b30 	.word	0x00043b30
   1b5ac:	000417ec 	.word	0x000417ec
   1b5b0:	00043b40 	.word	0x00043b40
   1b5b4:	00043a08 	.word	0x00043a08
   1b5b8:	00043b6c 	.word	0x00043b6c
   1b5bc:	00043b80 	.word	0x00043b80

0001b5c0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>:
   1b5c0:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b5c4:	e59fc180 	ldr	ip, [pc, #384]	; 1b74c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x18c>
   1b5c8:	e243e001 	sub	lr, r3, #1
   1b5cc:	e28db01c 	add	fp, sp, #28
   1b5d0:	e15e000c 	cmp	lr, ip
   1b5d4:	e24dd010 	sub	sp, sp, #16
   1b5d8:	8a000034 	bhi	1b6b0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xf0>
   1b5dc:	e1a04003 	mov	r4, r3
   1b5e0:	e1a05000 	mov	r5, r0
   1b5e4:	e2833015 	add	r3, r3, #21
   1b5e8:	e5900004 	ldr	r0, [r0, #4]
   1b5ec:	e3c33007 	bic	r3, r3, #7
   1b5f0:	e04dd003 	sub	sp, sp, r3
   1b5f4:	e3500000 	cmp	r0, #0
   1b5f8:	e1a06002 	mov	r6, r2
   1b5fc:	e1a07001 	mov	r7, r1
   1b600:	e28d8008 	add	r8, sp, #8
   1b604:	e284900e 	add	r9, r4, #14
   1b608:	0a00003f 	beq	1b70c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x14c>
   1b60c:	eb00018f 	bl	1bc50 <CNetDeviceLayer::GetMACAddress() const>
   1b610:	e3500000 	cmp	r0, #0
   1b614:	0a000028 	beq	1b6bc <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xfc>
   1b618:	e28d100e 	add	r1, sp, #14
   1b61c:	eb003df7 	bl	2ae00 <CMACAddress::CopyTo(unsigned char*) const>
   1b620:	e3a02000 	mov	r2, #0
   1b624:	e3a03008 	mov	r3, #8
   1b628:	e1560002 	cmp	r6, r2
   1b62c:	e5c8200d 	strb	r2, [r8, #13]
   1b630:	e5c8300c 	strb	r3, [r8, #12]
   1b634:	0a000038 	beq	1b71c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x15c>
   1b638:	e1a02004 	mov	r2, r4
   1b63c:	e1a01006 	mov	r1, r6
   1b640:	e28d0016 	add	r0, sp, #22
   1b644:	eb003cb1 	bl	2a910 <memcpy>
   1b648:	e5953000 	ldr	r3, [r5]
   1b64c:	e3530000 	cmp	r3, #0
   1b650:	0a000035 	beq	1b72c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x16c>
   1b654:	e595300c 	ldr	r3, [r5, #12]
   1b658:	e3530000 	cmp	r3, #0
   1b65c:	0a000036 	beq	1b73c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x17c>
   1b660:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b664:	eb003d9a 	bl	2acd4 <CMACAddress::CMACAddress()>
   1b668:	e1a00007 	mov	r0, r7
   1b66c:	eb0016b3 	bl	21140 <CIPAddress::IsBroadcast() const>
   1b670:	e3500000 	cmp	r0, #0
   1b674:	0a000014 	beq	1b6cc <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x10c>
   1b678:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b67c:	eb003dca 	bl	2adac <CMACAddress::SetBroadcast()>
   1b680:	e1a01008 	mov	r1, r8
   1b684:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b688:	eb003ddc 	bl	2ae00 <CMACAddress::CopyTo(unsigned char*) const>
   1b68c:	e1a02009 	mov	r2, r9
   1b690:	e1a01008 	mov	r1, r8
   1b694:	e5950004 	ldr	r0, [r5, #4]
   1b698:	eb000179 	bl	1bc84 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b69c:	e24b0024 	sub	r0, fp, #36	; 0x24
   1b6a0:	eb003d8e 	bl	2ace0 <CMACAddress::~CMACAddress()>
   1b6a4:	e3a00001 	mov	r0, #1
   1b6a8:	e24bd01c 	sub	sp, fp, #28
   1b6ac:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b6b0:	e3a00000 	mov	r0, #0
   1b6b4:	e24bd01c 	sub	sp, fp, #28
   1b6b8:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b6bc:	e3a02089 	mov	r2, #137	; 0x89
   1b6c0:	e59f1088 	ldr	r1, [pc, #136]	; 1b750 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b6c4:	e59f0088 	ldr	r0, [pc, #136]	; 1b754 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x194>
   1b6c8:	eb00244c 	bl	24800 <assertion_failed>
   1b6cc:	e5950000 	ldr	r0, [r5]
   1b6d0:	eb00155b 	bl	20c44 <CNetConfig::GetBroadcastAddress() const>
   1b6d4:	e1a01000 	mov	r1, r0
   1b6d8:	e1a00007 	mov	r0, r7
   1b6dc:	eb0015c1 	bl	20de8 <CIPAddress::operator==(CIPAddress const&) const>
   1b6e0:	e3500000 	cmp	r0, #0
   1b6e4:	1affffe3 	bne	1b678 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xb8>
   1b6e8:	e595000c 	ldr	r0, [r5, #12]
   1b6ec:	e1a01007 	mov	r1, r7
   1b6f0:	e58d9000 	str	r9, [sp]
   1b6f4:	e1a03008 	mov	r3, r8
   1b6f8:	e24b2024 	sub	r2, fp, #36	; 0x24
   1b6fc:	eb000417 	bl	1c760 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>
   1b700:	e3500000 	cmp	r0, #0
   1b704:	1affffdd 	bne	1b680 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xc0>
   1b708:	eaffffe3 	b	1b69c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xdc>
   1b70c:	e3a02087 	mov	r2, #135	; 0x87
   1b710:	e59f1038 	ldr	r1, [pc, #56]	; 1b750 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b714:	e59f003c 	ldr	r0, [pc, #60]	; 1b758 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x198>
   1b718:	eb002438 	bl	24800 <assertion_failed>
   1b71c:	e3a0208e 	mov	r2, #142	; 0x8e
   1b720:	e59f1028 	ldr	r1, [pc, #40]	; 1b750 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b724:	e59f0030 	ldr	r0, [pc, #48]	; 1b75c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x19c>
   1b728:	eb002434 	bl	24800 <assertion_failed>
   1b72c:	e3a02092 	mov	r2, #146	; 0x92
   1b730:	e59f1018 	ldr	r1, [pc, #24]	; 1b750 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b734:	e59f0024 	ldr	r0, [pc, #36]	; 1b760 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1a0>
   1b738:	eb002430 	bl	24800 <assertion_failed>
   1b73c:	e3a02093 	mov	r2, #147	; 0x93
   1b740:	e59f1008 	ldr	r1, [pc, #8]	; 1b750 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x190>
   1b744:	e59f0018 	ldr	r0, [pc, #24]	; 1b764 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x1a4>
   1b748:	eb00242c 	bl	24800 <assertion_failed>
   1b74c:	00000631 	.word	0x00000631
   1b750:	00043b30 	.word	0x00043b30
   1b754:	00043b6c 	.word	0x00043b6c
   1b758:	00043b40 	.word	0x00043b40
   1b75c:	00043b94 	.word	0x00043b94
   1b760:	00043980 	.word	0x00043980
   1b764:	00043b80 	.word	0x00043b80

0001b768 <CLinkLayer::Receive(void*, unsigned int*)>:
   1b768:	e3510000 	cmp	r1, #0
   1b76c:	e92d4010 	push	{r4, lr}
   1b770:	0a000009 	beq	1b79c <CLinkLayer::Receive(void*, unsigned int*)+0x34>
   1b774:	e3520000 	cmp	r2, #0
   1b778:	e1a04002 	mov	r4, r2
   1b77c:	0a00000a 	beq	1b7ac <CLinkLayer::Receive(void*, unsigned int*)+0x44>
   1b780:	e3a02000 	mov	r2, #0
   1b784:	e280001c 	add	r0, r0, #28
   1b788:	eb001750 	bl	214d0 <CNetQueue::Dequeue(void*, void**)>
   1b78c:	e5840000 	str	r0, [r4]
   1b790:	e2900000 	adds	r0, r0, #0
   1b794:	13a00001 	movne	r0, #1
   1b798:	e8bd8010 	pop	{r4, pc}
   1b79c:	e3a020a9 	mov	r2, #169	; 0xa9
   1b7a0:	e59f1014 	ldr	r1, [pc, #20]	; 1b7bc <CLinkLayer::Receive(void*, unsigned int*)+0x54>
   1b7a4:	e59f0014 	ldr	r0, [pc, #20]	; 1b7c0 <CLinkLayer::Receive(void*, unsigned int*)+0x58>
   1b7a8:	eb002414 	bl	24800 <assertion_failed>
   1b7ac:	e3a020aa 	mov	r2, #170	; 0xaa
   1b7b0:	e59f1004 	ldr	r1, [pc, #4]	; 1b7bc <CLinkLayer::Receive(void*, unsigned int*)+0x54>
   1b7b4:	e59f0008 	ldr	r0, [pc, #8]	; 1b7c4 <CLinkLayer::Receive(void*, unsigned int*)+0x5c>
   1b7b8:	eb002410 	bl	24800 <assertion_failed>
   1b7bc:	00043b30 	.word	0x00043b30
   1b7c0:	00040b94 	.word	0x00040b94
   1b7c4:	000413c0 	.word	0x000413c0

0001b7c8 <CLinkLayer::SendRaw(void const*, unsigned int)>:
   1b7c8:	e3510000 	cmp	r1, #0
   1b7cc:	e92d4010 	push	{r4, lr}
   1b7d0:	0a000007 	beq	1b7f4 <CLinkLayer::SendRaw(void const*, unsigned int)+0x2c>
   1b7d4:	e3520000 	cmp	r2, #0
   1b7d8:	0a000009 	beq	1b804 <CLinkLayer::SendRaw(void const*, unsigned int)+0x3c>
   1b7dc:	e5900004 	ldr	r0, [r0, #4]
   1b7e0:	e3500000 	cmp	r0, #0
   1b7e4:	0a00000a 	beq	1b814 <CLinkLayer::SendRaw(void const*, unsigned int)+0x4c>
   1b7e8:	eb000125 	bl	1bc84 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1b7ec:	e3a00001 	mov	r0, #1
   1b7f0:	e8bd8010 	pop	{r4, pc}
   1b7f4:	e3a020b2 	mov	r2, #178	; 0xb2
   1b7f8:	e59f1024 	ldr	r1, [pc, #36]	; 1b824 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b7fc:	e59f0024 	ldr	r0, [pc, #36]	; 1b828 <CLinkLayer::SendRaw(void const*, unsigned int)+0x60>
   1b800:	eb0023fe 	bl	24800 <assertion_failed>
   1b804:	e3a020b3 	mov	r2, #179	; 0xb3
   1b808:	e59f1014 	ldr	r1, [pc, #20]	; 1b824 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b80c:	e59f0018 	ldr	r0, [pc, #24]	; 1b82c <CLinkLayer::SendRaw(void const*, unsigned int)+0x64>
   1b810:	eb0023fa 	bl	24800 <assertion_failed>
   1b814:	e3a020b4 	mov	r2, #180	; 0xb4
   1b818:	e59f1004 	ldr	r1, [pc, #4]	; 1b824 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   1b81c:	e59f000c 	ldr	r0, [pc, #12]	; 1b830 <CLinkLayer::SendRaw(void const*, unsigned int)+0x68>
   1b820:	eb0023f6 	bl	24800 <assertion_failed>
   1b824:	00043b30 	.word	0x00043b30
   1b828:	00043ba4 	.word	0x00043ba4
   1b82c:	00043a08 	.word	0x00043a08
   1b830:	00043b40 	.word	0x00043b40

0001b834 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)>:
   1b834:	e92d4030 	push	{r4, r5, lr}
   1b838:	e3510000 	cmp	r1, #0
   1b83c:	e24dd00c 	sub	sp, sp, #12
   1b840:	0a000017 	beq	1b8a4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x70>
   1b844:	e3520000 	cmp	r2, #0
   1b848:	e1a04002 	mov	r4, r2
   1b84c:	0a000018 	beq	1b8b4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x80>
   1b850:	e2800028 	add	r0, r0, #40	; 0x28
   1b854:	e28d2004 	add	r2, sp, #4
   1b858:	e1a05003 	mov	r5, r3
   1b85c:	eb00171b 	bl	214d0 <CNetQueue::Dequeue(void*, void**)>
   1b860:	e3500000 	cmp	r0, #0
   1b864:	e5840000 	str	r0, [r4]
   1b868:	0a00000b 	beq	1b89c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x68>
   1b86c:	e3550000 	cmp	r5, #0
   1b870:	e59d4004 	ldr	r4, [sp, #4]
   1b874:	0a000004 	beq	1b88c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x58>
   1b878:	e3540000 	cmp	r4, #0
   1b87c:	0a000010 	beq	1b8c4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x90>
   1b880:	e1a00005 	mov	r0, r5
   1b884:	e1a01004 	mov	r1, r4
   1b888:	eb003d32 	bl	2ad58 <CMACAddress::Set(unsigned char const*)>
   1b88c:	e1a00004 	mov	r0, r4
   1b890:	e3a01006 	mov	r1, #6
   1b894:	eb003e04 	bl	2b0ac <operator delete(void*, unsigned int)>
   1b898:	e3a00001 	mov	r0, #1
   1b89c:	e28dd00c 	add	sp, sp, #12
   1b8a0:	e8bd8030 	pop	{r4, r5, pc}
   1b8a4:	e3a020bd 	mov	r2, #189	; 0xbd
   1b8a8:	e59f1024 	ldr	r1, [pc, #36]	; 1b8d4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa0>
   1b8ac:	e59f0024 	ldr	r0, [pc, #36]	; 1b8d8 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa4>
   1b8b0:	eb0023d2 	bl	24800 <assertion_failed>
   1b8b4:	e3a020be 	mov	r2, #190	; 0xbe
   1b8b8:	e59f1014 	ldr	r1, [pc, #20]	; 1b8d4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa0>
   1b8bc:	e59f0018 	ldr	r0, [pc, #24]	; 1b8dc <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa8>
   1b8c0:	eb0023ce 	bl	24800 <assertion_failed>
   1b8c4:	e3a020c9 	mov	r2, #201	; 0xc9
   1b8c8:	e59f1004 	ldr	r1, [pc, #4]	; 1b8d4 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xa0>
   1b8cc:	e59f000c 	ldr	r0, [pc, #12]	; 1b8e0 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xac>
   1b8d0:	eb0023ca 	bl	24800 <assertion_failed>
   1b8d4:	00043b30 	.word	0x00043b30
   1b8d8:	00040b94 	.word	0x00040b94
   1b8dc:	000413c0 	.word	0x000413c0
   1b8e0:	000439fc 	.word	0x000439fc

0001b8e4 <CLinkLayer::EnableReceiveRaw(unsigned short)>:
   1b8e4:	e1d033b4 	ldrh	r3, [r0, #52]	; 0x34
   1b8e8:	e3530000 	cmp	r3, #0
   1b8ec:	1a000005 	bne	1b908 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x24>
   1b8f0:	e3510000 	cmp	r1, #0
   1b8f4:	0a000005 	beq	1b910 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x2c>
   1b8f8:	e6bf1fb1 	rev16	r1, r1
   1b8fc:	e1c013b4 	strh	r1, [r0, #52]	; 0x34
   1b900:	e3a00001 	mov	r0, #1
   1b904:	e12fff1e 	bx	lr
   1b908:	e3a00000 	mov	r0, #0
   1b90c:	e12fff1e 	bx	lr
   1b910:	e92d4010 	push	{r4, lr}
   1b914:	e3a020d9 	mov	r2, #217	; 0xd9
   1b918:	e59f1004 	ldr	r1, [pc, #4]	; 1b924 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x40>
   1b91c:	e59f0004 	ldr	r0, [pc, #4]	; 1b928 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x44>
   1b920:	eb0023b6 	bl	24800 <assertion_failed>
   1b924:	00043b30 	.word	0x00043b30
   1b928:	00043bb0 	.word	0x00043bb0

0001b92c <CLinkLayer::ResolveFailed(void const*, unsigned int)>:
   1b92c:	e3510000 	cmp	r1, #0
   1b930:	e92d4010 	push	{r4, lr}
   1b934:	0a000009 	beq	1b960 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x34>
   1b938:	e352000e 	cmp	r2, #14
   1b93c:	9a00000b 	bls	1b970 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x44>
   1b940:	e5900008 	ldr	r0, [r0, #8]
   1b944:	e3500000 	cmp	r0, #0
   1b948:	0a00000c 	beq	1b980 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x54>
   1b94c:	e8bd4010 	pop	{r4, lr}
   1b950:	e242300e 	sub	r3, r2, #14
   1b954:	e281200e 	add	r2, r1, #14
   1b958:	e3a01001 	mov	r1, #1
   1b95c:	eafffe37 	b	1b240 <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>
   1b960:	e3a020e1 	mov	r2, #225	; 0xe1
   1b964:	e59f1024 	ldr	r1, [pc, #36]	; 1b990 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b968:	e59f0024 	ldr	r0, [pc, #36]	; 1b994 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x68>
   1b96c:	eb0023a3 	bl	24800 <assertion_failed>
   1b970:	e3a020e2 	mov	r2, #226	; 0xe2
   1b974:	e59f1014 	ldr	r1, [pc, #20]	; 1b990 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b978:	e59f0018 	ldr	r0, [pc, #24]	; 1b998 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x6c>
   1b97c:	eb00239f 	bl	24800 <assertion_failed>
   1b980:	e3a020e3 	mov	r2, #227	; 0xe3
   1b984:	e59f1004 	ldr	r1, [pc, #4]	; 1b990 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   1b988:	e59f000c 	ldr	r0, [pc, #12]	; 1b99c <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x70>
   1b98c:	eb00239b 	bl	24800 <assertion_failed>
   1b990:	00043b30 	.word	0x00043b30
   1b994:	00043bc4 	.word	0x00043bc4
   1b998:	00043bd8 	.word	0x00043bd8
   1b99c:	00043994 	.word	0x00043994

0001b9a0 <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>:
   1b9a0:	e3a03000 	mov	r3, #0
   1b9a4:	e92d4010 	push	{r4, lr}
   1b9a8:	e1a04000 	mov	r4, r0
   1b9ac:	e5c02000 	strb	r2, [r0]
   1b9b0:	e980000a 	stmib	r0, {r1, r3}
   1b9b4:	e280000c 	add	r0, r0, #12
   1b9b8:	eb00163f 	bl	212bc <CNetQueue::CNetQueue()>
   1b9bc:	e2840018 	add	r0, r4, #24
   1b9c0:	eb00163d 	bl	212bc <CNetQueue::CNetQueue()>
   1b9c4:	e1a00004 	mov	r0, r4
   1b9c8:	e8bd8010 	pop	{r4, pc}

0001b9cc <CNetDeviceLayer::~CNetDeviceLayer()>:
   1b9cc:	e92d4010 	push	{r4, lr}
   1b9d0:	e3a03000 	mov	r3, #0
   1b9d4:	e1a04000 	mov	r4, r0
   1b9d8:	e2800018 	add	r0, r0, #24
   1b9dc:	e5843008 	str	r3, [r4, #8]
   1b9e0:	e5843004 	str	r3, [r4, #4]
   1b9e4:	eb00166e 	bl	213a4 <CNetQueue::~CNetQueue()>
   1b9e8:	e284000c 	add	r0, r4, #12
   1b9ec:	eb00166c 	bl	213a4 <CNetQueue::~CNetQueue()>
   1b9f0:	e1a00004 	mov	r0, r4
   1b9f4:	e8bd8010 	pop	{r4, pc}

0001b9f8 <CNetDeviceLayer::Initialize(bool)>:
   1b9f8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b9fc:	e5903008 	ldr	r3, [r0, #8]
   1ba00:	e24dd00c 	sub	sp, sp, #12
   1ba04:	e3530000 	cmp	r3, #0
   1ba08:	1a000039 	bne	1baf4 <CNetDeviceLayer::Initialize(bool)+0xfc>
   1ba0c:	e1a04000 	mov	r4, r0
   1ba10:	e5d00000 	ldrb	r0, [r0]
   1ba14:	e1a06001 	mov	r6, r1
   1ba18:	eb003d60 	bl	2afa0 <CNetDevice::GetNetDevice(TNetDeviceType)>
   1ba1c:	e3500000 	cmp	r0, #0
   1ba20:	e1a05000 	mov	r5, r0
   1ba24:	e5840008 	str	r0, [r4, #8]
   1ba28:	0a000035 	beq	1bb04 <CNetDeviceLayer::Initialize(bool)+0x10c>
   1ba2c:	e3a000e0 	mov	r0, #224	; 0xe0
   1ba30:	eb003d8f 	bl	2b074 <operator new(unsigned int)>
   1ba34:	e5941008 	ldr	r1, [r4, #8]
   1ba38:	eb0000dd 	bl	1bdb4 <CPHYTask::CPHYTask(CNetDevice*)>
   1ba3c:	e3560000 	cmp	r6, #0
   1ba40:	1a000003 	bne	1ba54 <CNetDeviceLayer::Initialize(bool)+0x5c>
   1ba44:	e3a05001 	mov	r5, #1
   1ba48:	e1a00005 	mov	r0, r5
   1ba4c:	e28dd00c 	add	sp, sp, #12
   1ba50:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ba54:	eb003929 	bl	29f00 <CTimer::Get()>
   1ba58:	eb003672 	bl	29428 <CTimer::GetTicks() const>
   1ba5c:	e59f60b8 	ldr	r6, [pc, #184]	; 1bb1c <CNetDeviceLayer::Initialize(bool)+0x124>
   1ba60:	e1a07000 	mov	r7, r0
   1ba64:	ea000005 	b	1ba80 <CNetDeviceLayer::Initialize(bool)+0x88>
   1ba68:	e5940008 	ldr	r0, [r4, #8]
   1ba6c:	e5903000 	ldr	r3, [r0]
   1ba70:	e593301c 	ldr	r3, [r3, #28]
   1ba74:	e12fff33 	blx	r3
   1ba78:	e2505000 	subs	r5, r0, #0
   1ba7c:	1a00000a 	bne	1baac <CNetDeviceLayer::Initialize(bool)+0xb4>
   1ba80:	eb00391e 	bl	29f00 <CTimer::Get()>
   1ba84:	eb003667 	bl	29428 <CTimer::GetTicks() const>
   1ba88:	e0400007 	sub	r0, r0, r7
   1ba8c:	e1500006 	cmp	r0, r6
   1ba90:	9afffff4 	bls	1ba68 <CNetDeviceLayer::Initialize(bool)+0x70>
   1ba94:	eb002c4c 	bl	26bcc <CLogger::Get()>
   1ba98:	e59f3080 	ldr	r3, [pc, #128]	; 1bb20 <CNetDeviceLayer::Initialize(bool)+0x128>
   1ba9c:	e3a02002 	mov	r2, #2
   1baa0:	e59f107c 	ldr	r1, [pc, #124]	; 1bb24 <CNetDeviceLayer::Initialize(bool)+0x12c>
   1baa4:	eb002b85 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1baa8:	eaffffe5 	b	1ba44 <CNetDeviceLayer::Initialize(bool)+0x4c>
   1baac:	e5940008 	ldr	r0, [r4, #8]
   1bab0:	e5903000 	ldr	r3, [r0]
   1bab4:	e5933020 	ldr	r3, [r3, #32]
   1bab8:	e12fff33 	blx	r3
   1babc:	e3500006 	cmp	r0, #6
   1bac0:	e1a04000 	mov	r4, r0
   1bac4:	0affffde 	beq	1ba44 <CNetDeviceLayer::Initialize(bool)+0x4c>
   1bac8:	eb002c3f 	bl	26bcc <CLogger::Get()>
   1bacc:	e1a06000 	mov	r6, r0
   1bad0:	e1a00004 	mov	r0, r4
   1bad4:	eb003d22 	bl	2af64 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>
   1bad8:	e59f3048 	ldr	r3, [pc, #72]	; 1bb28 <CNetDeviceLayer::Initialize(bool)+0x130>
   1badc:	e58d0000 	str	r0, [sp]
   1bae0:	e3a02003 	mov	r2, #3
   1bae4:	e1a00006 	mov	r0, r6
   1bae8:	e59f1034 	ldr	r1, [pc, #52]	; 1bb24 <CNetDeviceLayer::Initialize(bool)+0x12c>
   1baec:	eb002b73 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1baf0:	eaffffd4 	b	1ba48 <CNetDeviceLayer::Initialize(bool)+0x50>
   1baf4:	e3a02033 	mov	r2, #51	; 0x33
   1baf8:	e59f102c 	ldr	r1, [pc, #44]	; 1bb2c <CNetDeviceLayer::Initialize(bool)+0x134>
   1bafc:	e59f002c 	ldr	r0, [pc, #44]	; 1bb30 <CNetDeviceLayer::Initialize(bool)+0x138>
   1bb00:	eb00233e 	bl	24800 <assertion_failed>
   1bb04:	eb002c30 	bl	26bcc <CLogger::Get()>
   1bb08:	e59f3024 	ldr	r3, [pc, #36]	; 1bb34 <CNetDeviceLayer::Initialize(bool)+0x13c>
   1bb0c:	e3a02001 	mov	r2, #1
   1bb10:	e59f100c 	ldr	r1, [pc, #12]	; 1bb24 <CNetDeviceLayer::Initialize(bool)+0x12c>
   1bb14:	eb002b69 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bb18:	eaffffca 	b	1ba48 <CNetDeviceLayer::Initialize(bool)+0x50>
   1bb1c:	0000018f 	.word	0x0000018f
   1bb20:	00043c30 	.word	0x00043c30
   1bb24:	00043bfc 	.word	0x00043bfc
   1bb28:	00043c40 	.word	0x00043c40
   1bb2c:	00043c04 	.word	0x00043c04
   1bb30:	0003fa14 	.word	0x0003fa14
   1bb34:	00043c14 	.word	0x00043c14

0001bb38 <CNetDeviceLayer::Process()>:
   1bb38:	e92d4070 	push	{r4, r5, r6, lr}
   1bb3c:	e1a04000 	mov	r4, r0
   1bb40:	e5900008 	ldr	r0, [r0, #8]
   1bb44:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1bb48:	e3500000 	cmp	r0, #0
   1bb4c:	e24dd008 	sub	sp, sp, #8
   1bb50:	0a000035 	beq	1bc2c <CNetDeviceLayer::Process()+0xf4>
   1bb54:	e3a05000 	mov	r5, #0
   1bb58:	e284600c 	add	r6, r4, #12
   1bb5c:	e5903000 	ldr	r3, [r0]
   1bb60:	e5933010 	ldr	r3, [r3, #16]
   1bb64:	e12fff33 	blx	r3
   1bb68:	e3500000 	cmp	r0, #0
   1bb6c:	1a000015 	bne	1bbc8 <CNetDeviceLayer::Process()+0x90>
   1bb70:	e3a06000 	mov	r6, #0
   1bb74:	e2845018 	add	r5, r4, #24
   1bb78:	ea000003 	b	1bb8c <CNetDeviceLayer::Process()+0x54>
   1bb7c:	e1a03006 	mov	r3, r6
   1bb80:	e28d1008 	add	r1, sp, #8
   1bb84:	e1a00005 	mov	r0, r5
   1bb88:	eb00160a 	bl	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1bb8c:	e5940008 	ldr	r0, [r4, #8]
   1bb90:	e28d2004 	add	r2, sp, #4
   1bb94:	e5903000 	ldr	r3, [r0]
   1bb98:	e28d1008 	add	r1, sp, #8
   1bb9c:	e5933018 	ldr	r3, [r3, #24]
   1bba0:	e12fff33 	blx	r3
   1bba4:	e3500000 	cmp	r0, #0
   1bba8:	0a00001c 	beq	1bc20 <CNetDeviceLayer::Process()+0xe8>
   1bbac:	e59d2004 	ldr	r2, [sp, #4]
   1bbb0:	e3520000 	cmp	r2, #0
   1bbb4:	1afffff0 	bne	1bb7c <CNetDeviceLayer::Process()+0x44>
   1bbb8:	e3a0206d 	mov	r2, #109	; 0x6d
   1bbbc:	e59f1078 	ldr	r1, [pc, #120]	; 1bc3c <CNetDeviceLayer::Process()+0x104>
   1bbc0:	e59f0078 	ldr	r0, [pc, #120]	; 1bc40 <CNetDeviceLayer::Process()+0x108>
   1bbc4:	eb00230d 	bl	24800 <assertion_failed>
   1bbc8:	e1a02005 	mov	r2, r5
   1bbcc:	e28d1008 	add	r1, sp, #8
   1bbd0:	e1a00006 	mov	r0, r6
   1bbd4:	eb00163d 	bl	214d0 <CNetQueue::Dequeue(void*, void**)>
   1bbd8:	e3500000 	cmp	r0, #0
   1bbdc:	e1a02000 	mov	r2, r0
   1bbe0:	e58d0004 	str	r0, [sp, #4]
   1bbe4:	0affffe1 	beq	1bb70 <CNetDeviceLayer::Process()+0x38>
   1bbe8:	e5940008 	ldr	r0, [r4, #8]
   1bbec:	e28d1008 	add	r1, sp, #8
   1bbf0:	e5903000 	ldr	r3, [r0]
   1bbf4:	e5933014 	ldr	r3, [r3, #20]
   1bbf8:	e12fff33 	blx	r3
   1bbfc:	e3500000 	cmp	r0, #0
   1bc00:	15940008 	ldrne	r0, [r4, #8]
   1bc04:	1affffd4 	bne	1bb5c <CNetDeviceLayer::Process()+0x24>
   1bc08:	eb002bef 	bl	26bcc <CLogger::Get()>
   1bc0c:	e59f3030 	ldr	r3, [pc, #48]	; 1bc44 <CNetDeviceLayer::Process()+0x10c>
   1bc10:	e3a02002 	mov	r2, #2
   1bc14:	e59f102c 	ldr	r1, [pc, #44]	; 1bc48 <CNetDeviceLayer::Process()+0x110>
   1bc18:	eb002b28 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1bc1c:	eaffffd3 	b	1bb70 <CNetDeviceLayer::Process()+0x38>
   1bc20:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1bc24:	e28dd008 	add	sp, sp, #8
   1bc28:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bc2c:	e3a0205c 	mov	r2, #92	; 0x5c
   1bc30:	e59f1004 	ldr	r1, [pc, #4]	; 1bc3c <CNetDeviceLayer::Process()+0x104>
   1bc34:	e59f0010 	ldr	r0, [pc, #16]	; 1bc4c <CNetDeviceLayer::Process()+0x114>
   1bc38:	eb0022f0 	bl	24800 <assertion_failed>
   1bc3c:	00043c04 	.word	0x00043c04
   1bc40:	00043a08 	.word	0x00043a08
   1bc44:	00043c4c 	.word	0x00043c4c
   1bc48:	00043bfc 	.word	0x00043bfc
   1bc4c:	0003fb38 	.word	0x0003fb38

0001bc50 <CNetDeviceLayer::GetMACAddress() const>:
   1bc50:	e5900008 	ldr	r0, [r0, #8]
   1bc54:	e3500000 	cmp	r0, #0
   1bc58:	0a000002 	beq	1bc68 <CNetDeviceLayer::GetMACAddress() const+0x18>
   1bc5c:	e5903000 	ldr	r3, [r0]
   1bc60:	e593300c 	ldr	r3, [r3, #12]
   1bc64:	e12fff13 	bx	r3
   1bc68:	e92d4010 	push	{r4, lr}
   1bc6c:	e3a02074 	mov	r2, #116	; 0x74
   1bc70:	e59f1004 	ldr	r1, [pc, #4]	; 1bc7c <CNetDeviceLayer::GetMACAddress() const+0x2c>
   1bc74:	e59f0004 	ldr	r0, [pc, #4]	; 1bc80 <CNetDeviceLayer::GetMACAddress() const+0x30>
   1bc78:	eb0022e0 	bl	24800 <assertion_failed>
   1bc7c:	00043c04 	.word	0x00043c04
   1bc80:	0003fb38 	.word	0x0003fb38

0001bc84 <CNetDeviceLayer::Send(void const*, unsigned int)>:
   1bc84:	e280000c 	add	r0, r0, #12
   1bc88:	e3a03000 	mov	r3, #0
   1bc8c:	ea0015c9 	b	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>

0001bc90 <CNetDeviceLayer::Receive(void*, unsigned int*)>:
   1bc90:	e92d4010 	push	{r4, lr}
   1bc94:	e2800018 	add	r0, r0, #24
   1bc98:	e1a04002 	mov	r4, r2
   1bc9c:	e3a02000 	mov	r2, #0
   1bca0:	eb00160a 	bl	214d0 <CNetQueue::Dequeue(void*, void**)>
   1bca4:	e3500000 	cmp	r0, #0
   1bca8:	08bd8010 	popeq	{r4, pc}
   1bcac:	e3540000 	cmp	r4, #0
   1bcb0:	0a000002 	beq	1bcc0 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x30>
   1bcb4:	e5840000 	str	r0, [r4]
   1bcb8:	e3a00001 	mov	r0, #1
   1bcbc:	e8bd8010 	pop	{r4, pc}
   1bcc0:	e3a02085 	mov	r2, #133	; 0x85
   1bcc4:	e59f1004 	ldr	r1, [pc, #4]	; 1bcd0 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x40>
   1bcc8:	e59f0004 	ldr	r0, [pc, #4]	; 1bcd4 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x44>
   1bccc:	eb0022cb 	bl	24800 <assertion_failed>
   1bcd0:	00043c04 	.word	0x00043c04
   1bcd4:	000413c0 	.word	0x000413c0

0001bcd8 <CPHYTask::~CPHYTask()>:
   1bcd8:	e3a02000 	mov	r2, #0
   1bcdc:	e92d4010 	push	{r4, lr}
   1bce0:	e1a04000 	mov	r4, r0
   1bce4:	e59f3010 	ldr	r3, [pc, #16]	; 1bcfc <CPHYTask::~CPHYTask()+0x24>
   1bce8:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1bcec:	e5803000 	str	r3, [r0]
   1bcf0:	eb00201e 	bl	23d70 <CTask::~CTask()>
   1bcf4:	e1a00004 	mov	r0, r4
   1bcf8:	e8bd8010 	pop	{r4, pc}
   1bcfc:	00043c64 	.word	0x00043c64

0001bd00 <CPHYTask::~CPHYTask()>:
   1bd00:	e3a02000 	mov	r2, #0
   1bd04:	e92d4010 	push	{r4, lr}
   1bd08:	e1a04000 	mov	r4, r0
   1bd0c:	e59f301c 	ldr	r3, [pc, #28]	; 1bd30 <CPHYTask::~CPHYTask()+0x30>
   1bd10:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   1bd14:	e5803000 	str	r3, [r0]
   1bd18:	eb002014 	bl	23d70 <CTask::~CTask()>
   1bd1c:	e1a00004 	mov	r0, r4
   1bd20:	e3a010e0 	mov	r1, #224	; 0xe0
   1bd24:	eb003ce0 	bl	2b0ac <operator delete(void*, unsigned int)>
   1bd28:	e1a00004 	mov	r0, r4
   1bd2c:	e8bd8010 	pop	{r4, pc}
   1bd30:	00043c64 	.word	0x00043c64

0001bd34 <CPHYTask::Run()>:
   1bd34:	e92d4070 	push	{r4, r5, r6, lr}
   1bd38:	e1a04000 	mov	r4, r0
   1bd3c:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   1bd40:	e3500000 	cmp	r0, #0
   1bd44:	0a000013 	beq	1bd98 <CPHYTask::Run()+0x64>
   1bd48:	e5903000 	ldr	r3, [r0]
   1bd4c:	e59f5054 	ldr	r5, [pc, #84]	; 1bda8 <CPHYTask::Run()+0x74>
   1bd50:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1bd54:	e1530005 	cmp	r3, r5
   1bd58:	08bd8070 	popeq	{r4, r5, r6, pc}
   1bd5c:	e3a06e7d 	mov	r6, #2000	; 0x7d0
   1bd60:	ea000003 	b	1bd74 <CPHYTask::Run()+0x40>
   1bd64:	e5903000 	ldr	r3, [r0]
   1bd68:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   1bd6c:	e1530005 	cmp	r3, r5
   1bd70:	08bd8070 	popeq	{r4, r5, r6, pc}
   1bd74:	e12fff33 	blx	r3
   1bd78:	e3500000 	cmp	r0, #0
   1bd7c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1bd80:	eb0021f0 	bl	24548 <CScheduler::Get()>
   1bd84:	e1a01006 	mov	r1, r6
   1bd88:	eb0021ca 	bl	244b8 <CScheduler::MsSleep(unsigned int)>
   1bd8c:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   1bd90:	e3500000 	cmp	r0, #0
   1bd94:	1afffff2 	bne	1bd64 <CPHYTask::Run()+0x30>
   1bd98:	e3a02026 	mov	r2, #38	; 0x26
   1bd9c:	e59f1008 	ldr	r1, [pc, #8]	; 1bdac <CPHYTask::Run()+0x78>
   1bda0:	e59f0008 	ldr	r0, [pc, #8]	; 1bdb0 <CPHYTask::Run()+0x7c>
   1bda4:	eb002295 	bl	24800 <assertion_failed>
   1bda8:	000161a4 	.word	0x000161a4
   1bdac:	00043c70 	.word	0x00043c70
   1bdb0:	0003fb38 	.word	0x0003fb38

0001bdb4 <CPHYTask::CPHYTask(CNetDevice*)>:
   1bdb4:	e92d4070 	push	{r4, r5, r6, lr}
   1bdb8:	e1a04000 	mov	r4, r0
   1bdbc:	e1a05001 	mov	r5, r1
   1bdc0:	e3a01902 	mov	r1, #32768	; 0x8000
   1bdc4:	eb00203c 	bl	23ebc <CTask::CTask(unsigned int)>
   1bdc8:	e59f300c 	ldr	r3, [pc, #12]	; 1bddc <CPHYTask::CPHYTask(CNetDevice*)+0x28>
   1bdcc:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   1bdd0:	e5843000 	str	r3, [r4]
   1bdd4:	e1a00004 	mov	r0, r4
   1bdd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bddc:	00043c64 	.word	0x00043c64

0001bde0 <CARPHandler::TimerHandler(unsigned int, void*, void*)>:
   1bde0:	e92d4070 	push	{r4, r5, r6, lr}
   1bde4:	e2524000 	subs	r4, r2, #0
   1bde8:	0a00001d 	beq	1be64 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x84>
   1bdec:	e5943010 	ldr	r3, [r4, #16]
   1bdf0:	e1a05001 	mov	r5, r1
   1bdf4:	e1510003 	cmp	r1, r3
   1bdf8:	2a00001d 	bcs	1be74 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x94>
   1bdfc:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1be00:	e3500000 	cmp	r0, #0
   1be04:	1a000006 	bne	1be24 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x44>
   1be08:	e1a01181 	lsl	r1, r1, #3
   1be0c:	e0413005 	sub	r3, r1, r5
   1be10:	e0843103 	add	r3, r4, r3, lsl #2
   1be14:	e5d33014 	ldrb	r3, [r3, #20]
   1be18:	e3530001 	cmp	r3, #1
   1be1c:	0a000008 	beq	1be44 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x64>
   1be20:	e8bd8070 	pop	{r4, r5, r6, pc}
   1be24:	eb003fc4 	bl	2bd3c <EnterCritical>
   1be28:	e1a01185 	lsl	r1, r5, #3
   1be2c:	e0413005 	sub	r3, r1, r5
   1be30:	e0843103 	add	r3, r4, r3, lsl #2
   1be34:	e5d33014 	ldrb	r3, [r3, #20]
   1be38:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1be3c:	e3530001 	cmp	r3, #1
   1be40:	1a000003 	bne	1be54 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x74>
   1be44:	e3a03002 	mov	r3, #2
   1be48:	e0411005 	sub	r1, r1, r5
   1be4c:	e0844311 	add	r4, r4, r1, lsl r3
   1be50:	e5c43014 	strb	r3, [r4, #20]
   1be54:	e3500000 	cmp	r0, #0
   1be58:	08bd8070 	popeq	{r4, r5, r6, pc}
   1be5c:	e8bd4070 	pop	{r4, r5, r6, lr}
   1be60:	ea003fe0 	b	2bde8 <LeaveCritical>
   1be64:	e59f2018 	ldr	r2, [pc, #24]	; 1be84 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa4>
   1be68:	e59f1018 	ldr	r1, [pc, #24]	; 1be88 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa8>
   1be6c:	e59f0018 	ldr	r0, [pc, #24]	; 1be8c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xac>
   1be70:	eb002262 	bl	24800 <assertion_failed>
   1be74:	e3a02f6b 	mov	r2, #428	; 0x1ac
   1be78:	e59f1008 	ldr	r1, [pc, #8]	; 1be88 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xa8>
   1be7c:	e59f000c 	ldr	r0, [pc, #12]	; 1be90 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0xb0>
   1be80:	eb00225e 	bl	24800 <assertion_failed>
   1be84:	000001a9 	.word	0x000001a9
   1be88:	00043c7c 	.word	0x00043c7c
   1be8c:	0003f168 	.word	0x0003f168
   1be90:	00043c8c 	.word	0x00043c8c

0001be94 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>:
   1be94:	e92d4070 	push	{r4, r5, r6, lr}
   1be98:	e3a0e000 	mov	lr, #0
   1be9c:	e3a05001 	mov	r5, #1
   1bea0:	e59d4010 	ldr	r4, [sp, #16]
   1bea4:	e151000e 	cmp	r1, lr
   1bea8:	e880000e 	stm	r0, {r1, r2, r3}
   1beac:	e5805244 	str	r5, [r0, #580]	; 0x244
   1beb0:	e580400c 	str	r4, [r0, #12]
   1beb4:	e580e010 	str	lr, [r0, #16]
   1beb8:	e580e248 	str	lr, [r0, #584]	; 0x248
   1bebc:	0a000009 	beq	1bee8 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x54>
   1bec0:	e3520000 	cmp	r2, #0
   1bec4:	0a00000b 	beq	1bef8 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x64>
   1bec8:	e3530000 	cmp	r3, #0
   1becc:	0a00000d 	beq	1bf08 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x74>
   1bed0:	e3540000 	cmp	r4, #0
   1bed4:	18bd8070 	popne	{r4, r5, r6, pc}
   1bed8:	e3a02045 	mov	r2, #69	; 0x45
   1bedc:	e59f1034 	ldr	r1, [pc, #52]	; 1bf18 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1bee0:	e59f0034 	ldr	r0, [pc, #52]	; 1bf1c <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x88>
   1bee4:	eb002245 	bl	24800 <assertion_failed>
   1bee8:	e3a02042 	mov	r2, #66	; 0x42
   1beec:	e59f1024 	ldr	r1, [pc, #36]	; 1bf18 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1bef0:	e59f0028 	ldr	r0, [pc, #40]	; 1bf20 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x8c>
   1bef4:	eb002241 	bl	24800 <assertion_failed>
   1bef8:	e3a02043 	mov	r2, #67	; 0x43
   1befc:	e59f1014 	ldr	r1, [pc, #20]	; 1bf18 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1bf00:	e59f001c 	ldr	r0, [pc, #28]	; 1bf24 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x90>
   1bf04:	eb00223d 	bl	24800 <assertion_failed>
   1bf08:	e3a02044 	mov	r2, #68	; 0x44
   1bf0c:	e59f1004 	ldr	r1, [pc, #4]	; 1bf18 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x84>
   1bf10:	e59f0010 	ldr	r0, [pc, #16]	; 1bf28 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x94>
   1bf14:	eb002239 	bl	24800 <assertion_failed>
   1bf18:	00043c7c 	.word	0x00043c7c
   1bf1c:	00043ca8 	.word	0x00043ca8
   1bf20:	00043980 	.word	0x00043980
   1bf24:	00043b40 	.word	0x00043b40
   1bf28:	00043a3c 	.word	0x00043a3c

0001bf2c <CARPHandler::~CARPHandler()>:
   1bf2c:	e5903010 	ldr	r3, [r0, #16]
   1bf30:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bf34:	e3530000 	cmp	r3, #0
   1bf38:	e1a08000 	mov	r8, r0
   1bf3c:	0a000011 	beq	1bf88 <CARPHandler::~CARPHandler()+0x5c>
   1bf40:	e3a06000 	mov	r6, #0
   1bf44:	e1a04000 	mov	r4, r0
   1bf48:	e1a07006 	mov	r7, r6
   1bf4c:	e3a0900c 	mov	r9, #12
   1bf50:	e594502c 	ldr	r5, [r4, #44]	; 0x2c
   1bf54:	e2866001 	add	r6, r6, #1
   1bf58:	e3550000 	cmp	r5, #0
   1bf5c:	0a000005 	beq	1bf78 <CARPHandler::~CARPHandler()+0x4c>
   1bf60:	e1a00005 	mov	r0, r5
   1bf64:	eb00150e 	bl	213a4 <CNetQueue::~CNetQueue()>
   1bf68:	e1a01009 	mov	r1, r9
   1bf6c:	e1a00005 	mov	r0, r5
   1bf70:	eb003c4d 	bl	2b0ac <operator delete(void*, unsigned int)>
   1bf74:	e5983010 	ldr	r3, [r8, #16]
   1bf78:	e1530006 	cmp	r3, r6
   1bf7c:	e584702c 	str	r7, [r4, #44]	; 0x2c
   1bf80:	e284401c 	add	r4, r4, #28
   1bf84:	8afffff1 	bhi	1bf50 <CARPHandler::~CARPHandler()+0x24>
   1bf88:	e1a00008 	mov	r0, r8
   1bf8c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001bf90 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>:
   1bf90:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bf94:	e1a06000 	mov	r6, r0
   1bf98:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1bf9c:	e1a09001 	mov	r9, r1
   1bfa0:	e3500000 	cmp	r0, #0
   1bfa4:	e1a08002 	mov	r8, r2
   1bfa8:	1a000023 	bne	1c03c <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xac>
   1bfac:	e5961010 	ldr	r1, [r6, #16]
   1bfb0:	e3510000 	cmp	r1, #0
   1bfb4:	0a00001f 	beq	1c038 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xa8>
   1bfb8:	e3a05000 	mov	r5, #0
   1bfbc:	e1a04005 	mov	r4, r5
   1bfc0:	ea000006 	b	1bfe0 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x50>
   1bfc4:	e5d33014 	ldrb	r3, [r3, #20]
   1bfc8:	e3530002 	cmp	r3, #2
   1bfcc:	0a000009 	beq	1bff8 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x68>
   1bfd0:	e2844001 	add	r4, r4, #1
   1bfd4:	e1510004 	cmp	r1, r4
   1bfd8:	e285501c 	add	r5, r5, #28
   1bfdc:	9a000010 	bls	1c024 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x94>
   1bfe0:	e1a07184 	lsl	r7, r4, #3
   1bfe4:	e0473004 	sub	r3, r7, r4
   1bfe8:	e0863103 	add	r3, r6, r3, lsl #2
   1bfec:	e5d32014 	ldrb	r2, [r3, #20]
   1bff0:	e3520001 	cmp	r2, #1
   1bff4:	1afffff2 	bne	1bfc4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x34>
   1bff8:	e2851015 	add	r1, r5, #21
   1bffc:	e0861001 	add	r1, r6, r1
   1c000:	e1a00009 	mov	r0, r9
   1c004:	eb0013a6 	bl	20ea4 <CIPAddress::operator==(unsigned char const*) const>
   1c008:	e3500000 	cmp	r0, #0
   1c00c:	1a00000f 	bne	1c050 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xc0>
   1c010:	e5961010 	ldr	r1, [r6, #16]
   1c014:	e2844001 	add	r4, r4, #1
   1c018:	e1510004 	cmp	r1, r4
   1c01c:	e285501c 	add	r5, r5, #28
   1c020:	8affffee 	bhi	1bfe0 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x50>
   1c024:	e5963244 	ldr	r3, [r6, #580]	; 0x244
   1c028:	e3530000 	cmp	r3, #0
   1c02c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c030:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c034:	ea003f6b 	b	2bde8 <LeaveCritical>
   1c038:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c03c:	eb003f3e 	bl	2bd3c <EnterCritical>
   1c040:	e5961010 	ldr	r1, [r6, #16]
   1c044:	e3510000 	cmp	r1, #0
   1c048:	1affffda 	bne	1bfb8 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x28>
   1c04c:	eafffff4 	b	1c024 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x94>
   1c050:	e0474004 	sub	r4, r7, r4
   1c054:	e0864104 	add	r4, r6, r4, lsl #2
   1c058:	eb0037a8 	bl	29f00 <CTimer::Get()>
   1c05c:	e5941020 	ldr	r1, [r4, #32]
   1c060:	eb003635 	bl	2993c <CTimer::CancelKernelTimer(unsigned int)>
   1c064:	e2851019 	add	r1, r5, #25
   1c068:	e0861001 	add	r1, r6, r1
   1c06c:	e1a00008 	mov	r0, r8
   1c070:	eb003b62 	bl	2ae00 <CMACAddress::CopyTo(unsigned char*) const>
   1c074:	e3a03003 	mov	r3, #3
   1c078:	e5c43014 	strb	r3, [r4, #20]
   1c07c:	eaffffe8 	b	1c024 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x94>

0001c080 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>:
   1c080:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c084:	e1a09000 	mov	r9, r0
   1c088:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1c08c:	e24dd00c 	sub	sp, sp, #12
   1c090:	e3500000 	cmp	r0, #0
   1c094:	e1a07001 	mov	r7, r1
   1c098:	e1a08002 	mov	r8, r2
   1c09c:	1a000038 	bne	1c184 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x104>
   1c0a0:	e5992010 	ldr	r2, [r9, #16]
   1c0a4:	e3520000 	cmp	r2, #0
   1c0a8:	e1a05002 	mov	r5, r2
   1c0ac:	0a00004c 	beq	1c1e4 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x164>
   1c0b0:	e3a04000 	mov	r4, #0
   1c0b4:	e3a05014 	mov	r5, #20
   1c0b8:	e2896015 	add	r6, r9, #21
   1c0bc:	ea000005 	b	1c0d8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x58>
   1c0c0:	e3550014 	cmp	r5, #20
   1c0c4:	01a05004 	moveq	r5, r4
   1c0c8:	e2844001 	add	r4, r4, #1
   1c0cc:	e1520004 	cmp	r2, r4
   1c0d0:	e286601c 	add	r6, r6, #28
   1c0d4:	9a00000e 	bls	1c114 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x94>
   1c0d8:	e0643184 	rsb	r3, r4, r4, lsl #3
   1c0dc:	e0893103 	add	r3, r9, r3, lsl #2
   1c0e0:	e5d33014 	ldrb	r3, [r3, #20]
   1c0e4:	e3530000 	cmp	r3, #0
   1c0e8:	0afffff4 	beq	1c0c0 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x40>
   1c0ec:	e1a01006 	mov	r1, r6
   1c0f0:	e1a00007 	mov	r0, r7
   1c0f4:	eb00136a 	bl	20ea4 <CIPAddress::operator==(unsigned char const*) const>
   1c0f8:	e3500000 	cmp	r0, #0
   1c0fc:	1a000018 	bne	1c164 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xe4>
   1c100:	e5992010 	ldr	r2, [r9, #16]
   1c104:	e2844001 	add	r4, r4, #1
   1c108:	e1520004 	cmp	r2, r4
   1c10c:	e286601c 	add	r6, r6, #28
   1c110:	8afffff0 	bhi	1c0d8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x58>
   1c114:	e3550014 	cmp	r5, #20
   1c118:	0a00001b 	beq	1c18c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x10c>
   1c11c:	e1a0a185 	lsl	sl, r5, #3
   1c120:	e04a6005 	sub	r6, sl, r5
   1c124:	e1a06106 	lsl	r6, r6, #2
   1c128:	e286b015 	add	fp, r6, #21
   1c12c:	e2866019 	add	r6, r6, #25
   1c130:	e089100b 	add	r1, r9, fp
   1c134:	e1a00007 	mov	r0, r7
   1c138:	eb0013db 	bl	210ac <CIPAddress::CopyTo(unsigned char*) const>
   1c13c:	e0891006 	add	r1, r9, r6
   1c140:	e1a00008 	mov	r0, r8
   1c144:	eb003b2d 	bl	2ae00 <CMACAddress::CopyTo(unsigned char*) const>
   1c148:	eb00376c 	bl	29f00 <CTimer::Get()>
   1c14c:	eb0034b5 	bl	29428 <CTimer::GetTicks() const>
   1c150:	e3a02004 	mov	r2, #4
   1c154:	e04a3005 	sub	r3, sl, r5
   1c158:	e0893103 	add	r3, r9, r3, lsl #2
   1c15c:	e5830028 	str	r0, [r3, #40]	; 0x28
   1c160:	e5c32014 	strb	r2, [r3, #20]
   1c164:	e5993244 	ldr	r3, [r9, #580]	; 0x244
   1c168:	e3530000 	cmp	r3, #0
   1c16c:	1a000001 	bne	1c178 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xf8>
   1c170:	e28dd00c 	add	sp, sp, #12
   1c174:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c178:	e28dd00c 	add	sp, sp, #12
   1c17c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c180:	ea003f18 	b	2bde8 <LeaveCritical>
   1c184:	eb003eec 	bl	2bd3c <EnterCritical>
   1c188:	eaffffc4 	b	1c0a0 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x20>
   1c18c:	e3520014 	cmp	r2, #20
   1c190:	0afffff3 	beq	1c164 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xe4>
   1c194:	e1a05002 	mov	r5, r2
   1c198:	e0626182 	rsb	r6, r2, r2, lsl #3
   1c19c:	e1a06106 	lsl	r6, r6, #2
   1c1a0:	e286b015 	add	fp, r6, #21
   1c1a4:	e2866019 	add	r6, r6, #25
   1c1a8:	e3a03000 	mov	r3, #0
   1c1ac:	e1a0a182 	lsl	sl, r2, #3
   1c1b0:	e04a2002 	sub	r2, sl, r2
   1c1b4:	e0894102 	add	r4, r9, r2, lsl #2
   1c1b8:	e5c43014 	strb	r3, [r4, #20]
   1c1bc:	e3a0000c 	mov	r0, #12
   1c1c0:	eb003bab 	bl	2b074 <operator new(unsigned int)>
   1c1c4:	e58d0004 	str	r0, [sp, #4]
   1c1c8:	eb00143b 	bl	212bc <CNetQueue::CNetQueue()>
   1c1cc:	e5993010 	ldr	r3, [r9, #16]
   1c1d0:	e59d2004 	ldr	r2, [sp, #4]
   1c1d4:	e2833001 	add	r3, r3, #1
   1c1d8:	e584202c 	str	r2, [r4, #44]	; 0x2c
   1c1dc:	e5893010 	str	r3, [r9, #16]
   1c1e0:	eaffffd2 	b	1c130 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xb0>
   1c1e4:	e3a06019 	mov	r6, #25
   1c1e8:	e3a0b015 	mov	fp, #21
   1c1ec:	eaffffed 	b	1c1a8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x128>

0001c1f0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>:
   1c1f0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1c1f4:	e1a04000 	mov	r4, r0
   1c1f8:	e5900000 	ldr	r0, [r0]
   1c1fc:	e24dd034 	sub	sp, sp, #52	; 0x34
   1c200:	e3500000 	cmp	r0, #0
   1c204:	0a000031 	beq	1c2d0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xe0>
   1c208:	e1a05001 	mov	r5, r1
   1c20c:	e1a08002 	mov	r8, r2
   1c210:	e1a06003 	mov	r6, r3
   1c214:	eb001280 	bl	20c1c <CNetConfig::GetIPAddress() const>
   1c218:	e2509000 	subs	r9, r0, #0
   1c21c:	0a00002f 	beq	1c2e0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xf0>
   1c220:	e5940004 	ldr	r0, [r4, #4]
   1c224:	e3500000 	cmp	r0, #0
   1c228:	0a000030 	beq	1c2f0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x100>
   1c22c:	ebfffe87 	bl	1bc50 <CNetDeviceLayer::GetMACAddress() const>
   1c230:	e2507000 	subs	r7, r0, #0
   1c234:	0a000031 	beq	1c300 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x110>
   1c238:	e28d1004 	add	r1, sp, #4
   1c23c:	e1a00006 	mov	r0, r6
   1c240:	eb003aee 	bl	2ae00 <CMACAddress::CopyTo(unsigned char*) const>
   1c244:	e28d100a 	add	r1, sp, #10
   1c248:	e1a00007 	mov	r0, r7
   1c24c:	eb003aeb 	bl	2ae00 <CMACAddress::CopyTo(unsigned char*) const>
   1c250:	e3a03c01 	mov	r3, #256	; 0x100
   1c254:	e3550000 	cmp	r5, #0
   1c258:	e3a01008 	mov	r1, #8
   1c25c:	13a05c01 	movne	r5, #256	; 0x100
   1c260:	03a05c02 	moveq	r5, #512	; 0x200
   1c264:	e3a0c006 	mov	ip, #6
   1c268:	e3a02004 	mov	r2, #4
   1c26c:	e1cd31b2 	strh	r3, [sp, #18]
   1c270:	e59f3098 	ldr	r3, [pc, #152]	; 1c310 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x120>
   1c274:	e1a00007 	mov	r0, r7
   1c278:	e1cd11b4 	strh	r1, [sp, #20]
   1c27c:	e28d101a 	add	r1, sp, #26
   1c280:	e5cdc016 	strb	ip, [sp, #22]
   1c284:	e5cd2017 	strb	r2, [sp, #23]
   1c288:	e1cd31b0 	strh	r3, [sp, #16]
   1c28c:	e1cd51b8 	strh	r5, [sp, #24]
   1c290:	eb003ada 	bl	2ae00 <CMACAddress::CopyTo(unsigned char*) const>
   1c294:	e1a00009 	mov	r0, r9
   1c298:	e28d1020 	add	r1, sp, #32
   1c29c:	eb001382 	bl	210ac <CIPAddress::CopyTo(unsigned char*) const>
   1c2a0:	e1a00006 	mov	r0, r6
   1c2a4:	e28d1024 	add	r1, sp, #36	; 0x24
   1c2a8:	eb003ad4 	bl	2ae00 <CMACAddress::CopyTo(unsigned char*) const>
   1c2ac:	e1a00008 	mov	r0, r8
   1c2b0:	e28d102a 	add	r1, sp, #42	; 0x2a
   1c2b4:	eb00137c 	bl	210ac <CIPAddress::CopyTo(unsigned char*) const>
   1c2b8:	e28d1004 	add	r1, sp, #4
   1c2bc:	e5940004 	ldr	r0, [r4, #4]
   1c2c0:	e3a0202a 	mov	r2, #42	; 0x2a
   1c2c4:	ebfffe6e 	bl	1bc84 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1c2c8:	e28dd034 	add	sp, sp, #52	; 0x34
   1c2cc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c2d0:	e59f203c 	ldr	r2, [pc, #60]	; 1c314 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x124>
   1c2d4:	e59f103c 	ldr	r1, [pc, #60]	; 1c318 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1c2d8:	e59f003c 	ldr	r0, [pc, #60]	; 1c31c <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x12c>
   1c2dc:	eb002147 	bl	24800 <assertion_failed>
   1c2e0:	e3a02f63 	mov	r2, #396	; 0x18c
   1c2e4:	e59f102c 	ldr	r1, [pc, #44]	; 1c318 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1c2e8:	e59f0030 	ldr	r0, [pc, #48]	; 1c320 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x130>
   1c2ec:	eb002143 	bl	24800 <assertion_failed>
   1c2f0:	e59f202c 	ldr	r2, [pc, #44]	; 1c324 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x134>
   1c2f4:	e59f101c 	ldr	r1, [pc, #28]	; 1c318 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1c2f8:	e59f0028 	ldr	r0, [pc, #40]	; 1c328 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x138>
   1c2fc:	eb00213f 	bl	24800 <assertion_failed>
   1c300:	e3a02e19 	mov	r2, #400	; 0x190
   1c304:	e59f100c 	ldr	r1, [pc, #12]	; 1c318 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x128>
   1c308:	e59f001c 	ldr	r0, [pc, #28]	; 1c32c <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x13c>
   1c30c:	eb00213b 	bl	24800 <assertion_failed>
   1c310:	00000608 	.word	0x00000608
   1c314:	0000018a 	.word	0x0000018a
   1c318:	00043c7c 	.word	0x00043c7c
   1c31c:	00043980 	.word	0x00043980
   1c320:	00043a64 	.word	0x00043a64
   1c324:	0000018e 	.word	0x0000018e
   1c328:	00043b40 	.word	0x00043b40
   1c32c:	00043b6c 	.word	0x00043b6c

0001c330 <CARPHandler::Process()>:
   1c330:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c334:	e1a04000 	mov	r4, r0
   1c338:	e5900000 	ldr	r0, [r0]
   1c33c:	e24dde66 	sub	sp, sp, #1632	; 0x660
   1c340:	e3500000 	cmp	r0, #0
   1c344:	e24dd004 	sub	sp, sp, #4
   1c348:	0a0000d7 	beq	1c6ac <CARPHandler::Process()+0x37c>
   1c34c:	eb001232 	bl	20c1c <CNetConfig::GetIPAddress() const>
   1c350:	e2507000 	subs	r7, r0, #0
   1c354:	0a0000d8 	beq	1c6bc <CARPHandler::Process()+0x38c>
   1c358:	e594000c 	ldr	r0, [r4, #12]
   1c35c:	e3500000 	cmp	r0, #0
   1c360:	0a0000d9 	beq	1c6cc <CARPHandler::Process()+0x39c>
   1c364:	e28d3020 	add	r3, sp, #32
   1c368:	e28db038 	add	fp, sp, #56	; 0x38
   1c36c:	e283a008 	add	sl, r3, #8
   1c370:	e283900e 	add	r9, r3, #14
   1c374:	e2438008 	sub	r8, r3, #8
   1c378:	e3a05000 	mov	r5, #0
   1c37c:	ea000000 	b	1c384 <CARPHandler::Process()+0x54>
   1c380:	e594000c 	ldr	r0, [r4, #12]
   1c384:	e1a02005 	mov	r2, r5
   1c388:	e28d1020 	add	r1, sp, #32
   1c38c:	eb00144f 	bl	214d0 <CNetQueue::Dequeue(void*, void**)>
   1c390:	e3500000 	cmp	r0, #0
   1c394:	0a00002a 	beq	1c444 <CARPHandler::Process()+0x114>
   1c398:	e350001b 	cmp	r0, #27
   1c39c:	9afffff7 	bls	1c380 <CARPHandler::Process()+0x50>
   1c3a0:	e1dd32b0 	ldrh	r3, [sp, #32]
   1c3a4:	e3530c01 	cmp	r3, #256	; 0x100
   1c3a8:	1afffff4 	bne	1c380 <CARPHandler::Process()+0x50>
   1c3ac:	e1dd32b2 	ldrh	r3, [sp, #34]	; 0x22
   1c3b0:	e3530008 	cmp	r3, #8
   1c3b4:	1afffff1 	bne	1c380 <CARPHandler::Process()+0x50>
   1c3b8:	e5dd3024 	ldrb	r3, [sp, #36]	; 0x24
   1c3bc:	e3530006 	cmp	r3, #6
   1c3c0:	1affffee 	bne	1c380 <CARPHandler::Process()+0x50>
   1c3c4:	e5dd3025 	ldrb	r3, [sp, #37]	; 0x25
   1c3c8:	e3530004 	cmp	r3, #4
   1c3cc:	1affffeb 	bne	1c380 <CARPHandler::Process()+0x50>
   1c3d0:	e1a00007 	mov	r0, r7
   1c3d4:	eb00134b 	bl	21108 <CIPAddress::IsNull() const>
   1c3d8:	e3500000 	cmp	r0, #0
   1c3dc:	1affffe7 	bne	1c380 <CARPHandler::Process()+0x50>
   1c3e0:	e1a0100b 	mov	r1, fp
   1c3e4:	e1a00007 	mov	r0, r7
   1c3e8:	eb0012c4 	bl	20f00 <CIPAddress::operator!=(unsigned char const*) const>
   1c3ec:	e3500000 	cmp	r0, #0
   1c3f0:	1affffe2 	bne	1c380 <CARPHandler::Process()+0x50>
   1c3f4:	e1a0100a 	mov	r1, sl
   1c3f8:	e28d0010 	add	r0, sp, #16
   1c3fc:	eb003a65 	bl	2ad98 <CMACAddress::CMACAddress(unsigned char const*)>
   1c400:	e1a01009 	mov	r1, r9
   1c404:	e1a00008 	mov	r0, r8
   1c408:	eb0012f6 	bl	20fe8 <CIPAddress::CIPAddress(unsigned char const*)>
   1c40c:	e1dd32b6 	ldrh	r3, [sp, #38]	; 0x26
   1c410:	e3530c01 	cmp	r3, #256	; 0x100
   1c414:	0a0000be 	beq	1c714 <CARPHandler::Process()+0x3e4>
   1c418:	e3530c02 	cmp	r3, #512	; 0x200
   1c41c:	1a000003 	bne	1c430 <CARPHandler::Process()+0x100>
   1c420:	e28d2010 	add	r2, sp, #16
   1c424:	e1a01008 	mov	r1, r8
   1c428:	e1a00004 	mov	r0, r4
   1c42c:	ebfffed7 	bl	1bf90 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>
   1c430:	e1a00008 	mov	r0, r8
   1c434:	eb00126a 	bl	20de4 <CIPAddress::~CIPAddress()>
   1c438:	e28d0010 	add	r0, sp, #16
   1c43c:	eb003a27 	bl	2ace0 <CMACAddress::~CMACAddress()>
   1c440:	eaffffce 	b	1c380 <CARPHandler::Process()+0x50>
   1c444:	e5943008 	ldr	r3, [r4, #8]
   1c448:	e3530000 	cmp	r3, #0
   1c44c:	0a0000a2 	beq	1c6dc <CARPHandler::Process()+0x3ac>
   1c450:	e5943004 	ldr	r3, [r4, #4]
   1c454:	e3530000 	cmp	r3, #0
   1c458:	0a0000a3 	beq	1c6ec <CARPHandler::Process()+0x3bc>
   1c45c:	e5942010 	ldr	r2, [r4, #16]
   1c460:	e3520000 	cmp	r2, #0
   1c464:	0a00002a 	beq	1c514 <CARPHandler::Process()+0x1e4>
   1c468:	e1a06000 	mov	r6, r0
   1c46c:	e1a07000 	mov	r7, r0
   1c470:	e28d3018 	add	r3, sp, #24
   1c474:	e2845015 	add	r5, r4, #21
   1c478:	e58d300c 	str	r3, [sp, #12]
   1c47c:	e1a08186 	lsl	r8, r6, #3
   1c480:	e0489006 	sub	r9, r8, r6
   1c484:	e0849109 	add	r9, r4, r9, lsl #2
   1c488:	e5d93014 	ldrb	r3, [r9, #20]
   1c48c:	e6ef3073 	uxtb	r3, r3
   1c490:	e3530002 	cmp	r3, #2
   1c494:	0a000049 	beq	1c5c0 <CARPHandler::Process()+0x290>
   1c498:	e3530003 	cmp	r3, #3
   1c49c:	1a000018 	bne	1c504 <CARPHandler::Process()+0x1d4>
   1c4a0:	e5950017 	ldr	r0, [r5, #23]
   1c4a4:	e3500000 	cmp	r0, #0
   1c4a8:	0a000077 	beq	1c68c <CARPHandler::Process()+0x35c>
   1c4ac:	e285a004 	add	sl, r5, #4
   1c4b0:	e3a09006 	mov	r9, #6
   1c4b4:	ea000008 	b	1c4dc <CARPHandler::Process()+0x1ac>
   1c4b8:	e1a02009 	mov	r2, r9
   1c4bc:	e1a0100a 	mov	r1, sl
   1c4c0:	e28d0020 	add	r0, sp, #32
   1c4c4:	eb003911 	bl	2a910 <memcpy>
   1c4c8:	e5940004 	ldr	r0, [r4, #4]
   1c4cc:	e1a0200b 	mov	r2, fp
   1c4d0:	e28d1020 	add	r1, sp, #32
   1c4d4:	ebfffdea 	bl	1bc84 <CNetDeviceLayer::Send(void const*, unsigned int)>
   1c4d8:	e5950017 	ldr	r0, [r5, #23]
   1c4dc:	e1a02007 	mov	r2, r7
   1c4e0:	e28d1020 	add	r1, sp, #32
   1c4e4:	eb0013f9 	bl	214d0 <CNetQueue::Dequeue(void*, void**)>
   1c4e8:	e250b000 	subs	fp, r0, #0
   1c4ec:	1afffff1 	bne	1c4b8 <CARPHandler::Process()+0x188>
   1c4f0:	e3a03004 	mov	r3, #4
   1c4f4:	e0488006 	sub	r8, r8, r6
   1c4f8:	e0848108 	add	r8, r4, r8, lsl #2
   1c4fc:	e5c83014 	strb	r3, [r8, #20]
   1c500:	e5942010 	ldr	r2, [r4, #16]
   1c504:	e2866001 	add	r6, r6, #1
   1c508:	e1520006 	cmp	r2, r6
   1c50c:	e285501c 	add	r5, r5, #28
   1c510:	8affffd9 	bhi	1c47c <CARPHandler::Process()+0x14c>
   1c514:	eb003679 	bl	29f00 <CTimer::Get()>
   1c518:	eb0033c2 	bl	29428 <CTimer::GetTicks() const>
   1c51c:	e5943248 	ldr	r3, [r4, #584]	; 0x248
   1c520:	e59f2214 	ldr	r2, [pc, #532]	; 1c73c <CARPHandler::Process()+0x40c>
   1c524:	e0403003 	sub	r3, r0, r3
   1c528:	e1530002 	cmp	r3, r2
   1c52c:	e1a06000 	mov	r6, r0
   1c530:	9a00001f 	bls	1c5b4 <CARPHandler::Process()+0x284>
   1c534:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1c538:	e5846248 	str	r6, [r4, #584]	; 0x248
   1c53c:	e3500000 	cmp	r0, #0
   1c540:	1a00006d 	bne	1c6fc <CARPHandler::Process()+0x3cc>
   1c544:	e594e010 	ldr	lr, [r4, #16]
   1c548:	e35e0000 	cmp	lr, #0
   1c54c:	0a000018 	beq	1c5b4 <CARPHandler::Process()+0x284>
   1c550:	e3a03000 	mov	r3, #0
   1c554:	e1a01004 	mov	r1, r4
   1c558:	e1a05003 	mov	r5, r3
   1c55c:	ea000003 	b	1c570 <CARPHandler::Process()+0x240>
   1c560:	e2833001 	add	r3, r3, #1
   1c564:	e15e0003 	cmp	lr, r3
   1c568:	e281101c 	add	r1, r1, #28
   1c56c:	9a00000d 	bls	1c5a8 <CARPHandler::Process()+0x278>
   1c570:	e0632183 	rsb	r2, r3, r3, lsl #3
   1c574:	e0842102 	add	r2, r4, r2, lsl #2
   1c578:	e5d2c014 	ldrb	ip, [r2, #20]
   1c57c:	e35c0004 	cmp	ip, #4
   1c580:	1afffff6 	bne	1c560 <CARPHandler::Process()+0x230>
   1c584:	e591c028 	ldr	ip, [r1, #40]	; 0x28
   1c588:	e2833001 	add	r3, r3, #1
   1c58c:	e28cccea 	add	ip, ip, #59904	; 0xea00
   1c590:	e28cc060 	add	ip, ip, #96	; 0x60
   1c594:	e15c0006 	cmp	ip, r6
   1c598:	35c25014 	strbcc	r5, [r2, #20]
   1c59c:	e15e0003 	cmp	lr, r3
   1c5a0:	e281101c 	add	r1, r1, #28
   1c5a4:	8afffff1 	bhi	1c570 <CARPHandler::Process()+0x240>
   1c5a8:	e3500000 	cmp	r0, #0
   1c5ac:	0a000000 	beq	1c5b4 <CARPHandler::Process()+0x284>
   1c5b0:	eb003e0c 	bl	2bde8 <LeaveCritical>
   1c5b4:	e28dde66 	add	sp, sp, #1632	; 0x660
   1c5b8:	e28dd004 	add	sp, sp, #4
   1c5bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5c0:	e595300f 	ldr	r3, [r5, #15]
   1c5c4:	e3530002 	cmp	r3, #2
   1c5c8:	e2833001 	add	r3, r3, #1
   1c5cc:	e585300f 	str	r3, [r5, #15]
   1c5d0:	9a000011 	bls	1c61c <CARPHandler::Process()+0x2ec>
   1c5d4:	e5950017 	ldr	r0, [r5, #23]
   1c5d8:	e3500000 	cmp	r0, #0
   1c5dc:	1a000004 	bne	1c5f4 <CARPHandler::Process()+0x2c4>
   1c5e0:	ea00002d 	b	1c69c <CARPHandler::Process()+0x36c>
   1c5e4:	e5940008 	ldr	r0, [r4, #8]
   1c5e8:	e28d1020 	add	r1, sp, #32
   1c5ec:	ebfffcce 	bl	1b92c <CLinkLayer::ResolveFailed(void const*, unsigned int)>
   1c5f0:	e5950017 	ldr	r0, [r5, #23]
   1c5f4:	e1a02007 	mov	r2, r7
   1c5f8:	e28d1020 	add	r1, sp, #32
   1c5fc:	eb0013b3 	bl	214d0 <CNetQueue::Dequeue(void*, void**)>
   1c600:	e2502000 	subs	r2, r0, #0
   1c604:	1afffff6 	bne	1c5e4 <CARPHandler::Process()+0x2b4>
   1c608:	e0488006 	sub	r8, r8, r6
   1c60c:	e0848108 	add	r8, r4, r8, lsl #2
   1c610:	e5c82014 	strb	r2, [r8, #20]
   1c614:	e5942010 	ldr	r2, [r4, #16]
   1c618:	eaffffb9 	b	1c504 <CARPHandler::Process()+0x1d4>
   1c61c:	e59d800c 	ldr	r8, [sp, #12]
   1c620:	e1a01005 	mov	r1, r5
   1c624:	e1a00008 	mov	r0, r8
   1c628:	eb00126e 	bl	20fe8 <CIPAddress::CIPAddress(unsigned char const*)>
   1c62c:	e28d0010 	add	r0, sp, #16
   1c630:	eb0039a7 	bl	2acd4 <CMACAddress::CMACAddress()>
   1c634:	e28d0010 	add	r0, sp, #16
   1c638:	eb0039db 	bl	2adac <CMACAddress::SetBroadcast()>
   1c63c:	e1a02008 	mov	r2, r8
   1c640:	e3a01001 	mov	r1, #1
   1c644:	e28d3010 	add	r3, sp, #16
   1c648:	e1a00004 	mov	r0, r4
   1c64c:	ebfffee7 	bl	1c1f0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c650:	e3a03001 	mov	r3, #1
   1c654:	e5c93014 	strb	r3, [r9, #20]
   1c658:	eb003628 	bl	29f00 <CTimer::Get()>
   1c65c:	e59f20dc 	ldr	r2, [pc, #220]	; 1c740 <CARPHandler::Process()+0x410>
   1c660:	e1a03006 	mov	r3, r6
   1c664:	e3a01050 	mov	r1, #80	; 0x50
   1c668:	e58d4000 	str	r4, [sp]
   1c66c:	eb003463 	bl	29800 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1c670:	e585000b 	str	r0, [r5, #11]
   1c674:	e28d0010 	add	r0, sp, #16
   1c678:	eb003998 	bl	2ace0 <CMACAddress::~CMACAddress()>
   1c67c:	e1a00008 	mov	r0, r8
   1c680:	eb0011d7 	bl	20de4 <CIPAddress::~CIPAddress()>
   1c684:	e5942010 	ldr	r2, [r4, #16]
   1c688:	eaffff9d 	b	1c504 <CARPHandler::Process()+0x1d4>
   1c68c:	e3a020aa 	mov	r2, #170	; 0xaa
   1c690:	e59f10ac 	ldr	r1, [pc, #172]	; 1c744 <CARPHandler::Process()+0x414>
   1c694:	e59f00ac 	ldr	r0, [pc, #172]	; 1c748 <CARPHandler::Process()+0x418>
   1c698:	eb002058 	bl	24800 <assertion_failed>
   1c69c:	e3a0209f 	mov	r2, #159	; 0x9f
   1c6a0:	e59f109c 	ldr	r1, [pc, #156]	; 1c744 <CARPHandler::Process()+0x414>
   1c6a4:	e59f009c 	ldr	r0, [pc, #156]	; 1c748 <CARPHandler::Process()+0x418>
   1c6a8:	eb002054 	bl	24800 <assertion_failed>
   1c6ac:	e3a02057 	mov	r2, #87	; 0x57
   1c6b0:	e59f108c 	ldr	r1, [pc, #140]	; 1c744 <CARPHandler::Process()+0x414>
   1c6b4:	e59f0090 	ldr	r0, [pc, #144]	; 1c74c <CARPHandler::Process()+0x41c>
   1c6b8:	eb002050 	bl	24800 <assertion_failed>
   1c6bc:	e3a02059 	mov	r2, #89	; 0x59
   1c6c0:	e59f107c 	ldr	r1, [pc, #124]	; 1c744 <CARPHandler::Process()+0x414>
   1c6c4:	e59f0084 	ldr	r0, [pc, #132]	; 1c750 <CARPHandler::Process()+0x420>
   1c6c8:	eb00204c 	bl	24800 <assertion_failed>
   1c6cc:	e3a0205f 	mov	r2, #95	; 0x5f
   1c6d0:	e59f106c 	ldr	r1, [pc, #108]	; 1c744 <CARPHandler::Process()+0x414>
   1c6d4:	e59f0078 	ldr	r0, [pc, #120]	; 1c754 <CARPHandler::Process()+0x424>
   1c6d8:	eb002048 	bl	24800 <assertion_failed>
   1c6dc:	e3a02088 	mov	r2, #136	; 0x88
   1c6e0:	e59f105c 	ldr	r1, [pc, #92]	; 1c744 <CARPHandler::Process()+0x414>
   1c6e4:	e59f006c 	ldr	r0, [pc, #108]	; 1c758 <CARPHandler::Process()+0x428>
   1c6e8:	eb002044 	bl	24800 <assertion_failed>
   1c6ec:	e3a02089 	mov	r2, #137	; 0x89
   1c6f0:	e59f104c 	ldr	r1, [pc, #76]	; 1c744 <CARPHandler::Process()+0x414>
   1c6f4:	e59f0060 	ldr	r0, [pc, #96]	; 1c75c <CARPHandler::Process()+0x42c>
   1c6f8:	eb002040 	bl	24800 <assertion_failed>
   1c6fc:	eb003d8e 	bl	2bd3c <EnterCritical>
   1c700:	e594e010 	ldr	lr, [r4, #16]
   1c704:	e5940244 	ldr	r0, [r4, #580]	; 0x244
   1c708:	e35e0000 	cmp	lr, #0
   1c70c:	1affff8f 	bne	1c550 <CARPHandler::Process()+0x220>
   1c710:	eaffffa4 	b	1c5a8 <CARPHandler::Process()+0x278>
   1c714:	e1a02008 	mov	r2, r8
   1c718:	e1a01005 	mov	r1, r5
   1c71c:	e1a00004 	mov	r0, r4
   1c720:	e28d3010 	add	r3, sp, #16
   1c724:	ebfffeb1 	bl	1c1f0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c728:	e28d2010 	add	r2, sp, #16
   1c72c:	e1a01008 	mov	r1, r8
   1c730:	e1a00004 	mov	r0, r4
   1c734:	ebfffe51 	bl	1c080 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>
   1c738:	eaffff3c 	b	1c430 <CARPHandler::Process()+0x100>
   1c73c:	0000176f 	.word	0x0000176f
   1c740:	0001bde0 	.word	0x0001bde0
   1c744:	00043c7c 	.word	0x00043c7c
   1c748:	00043cb8 	.word	0x00043cb8
   1c74c:	00043980 	.word	0x00043980
   1c750:	00043a64 	.word	0x00043a64
   1c754:	00043ca8 	.word	0x00043ca8
   1c758:	00043a3c 	.word	0x00043a3c
   1c75c:	00043b40 	.word	0x00043b40

0001c760 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>:
   1c760:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c764:	e1a05000 	mov	r5, r0
   1c768:	e5900244 	ldr	r0, [r0, #580]	; 0x244
   1c76c:	e24dd024 	sub	sp, sp, #36	; 0x24
   1c770:	e3500000 	cmp	r0, #0
   1c774:	e1a0a001 	mov	sl, r1
   1c778:	e58d2014 	str	r2, [sp, #20]
   1c77c:	e58d3010 	str	r3, [sp, #16]
   1c780:	1a000076 	bne	1c960 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x200>
   1c784:	e5950010 	ldr	r0, [r5, #16]
   1c788:	e3500000 	cmp	r0, #0
   1c78c:	e1a08000 	mov	r8, r0
   1c790:	0a000084 	beq	1c9a8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x248>
   1c794:	e3e09000 	mvn	r9, #0
   1c798:	e3e0b014 	mvn	fp, #20
   1c79c:	e3a04000 	mov	r4, #0
   1c7a0:	e3a08014 	mov	r8, #20
   1c7a4:	e58d900c 	str	r9, [sp, #12]
   1c7a8:	e04bb005 	sub	fp, fp, r5
   1c7ac:	e2856015 	add	r6, r5, #21
   1c7b0:	e1a07184 	lsl	r7, r4, #3
   1c7b4:	e0473004 	sub	r3, r7, r4
   1c7b8:	e0853103 	add	r3, r5, r3, lsl #2
   1c7bc:	e5d33014 	ldrb	r3, [r3, #20]
   1c7c0:	e3530004 	cmp	r3, #4
   1c7c4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c7c8:	ea000060 	b	1c950 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x1f0>
   1c7cc:	0001c944 	.word	0x0001c944
   1c7d0:	0001c8e8 	.word	0x0001c8e8
   1c7d4:	0001c8e8 	.word	0x0001c8e8
   1c7d8:	0001c8e8 	.word	0x0001c8e8
   1c7dc:	0001c7e0 	.word	0x0001c7e0
   1c7e0:	e5963013 	ldr	r3, [r6, #19]
   1c7e4:	e1a01006 	mov	r1, r6
   1c7e8:	e1530009 	cmp	r3, r9
   1c7ec:	31a09003 	movcc	r9, r3
   1c7f0:	e59d300c 	ldr	r3, [sp, #12]
   1c7f4:	31a03004 	movcc	r3, r4
   1c7f8:	e1a0000a 	mov	r0, sl
   1c7fc:	e58d300c 	str	r3, [sp, #12]
   1c800:	eb0011a7 	bl	20ea4 <CIPAddress::operator==(unsigned char const*) const>
   1c804:	e3500000 	cmp	r0, #0
   1c808:	e08b1006 	add	r1, fp, r6
   1c80c:	1a000076 	bne	1c9ec <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x28c>
   1c810:	e5950010 	ldr	r0, [r5, #16]
   1c814:	e2844001 	add	r4, r4, #1
   1c818:	e1500004 	cmp	r0, r4
   1c81c:	e286601c 	add	r6, r6, #28
   1c820:	8affffe2 	bhi	1c7b0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x50>
   1c824:	e3580014 	cmp	r8, #20
   1c828:	0a00004e 	beq	1c968 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x208>
   1c82c:	e1a06188 	lsl	r6, r8, #3
   1c830:	e0467008 	sub	r7, r6, r8
   1c834:	e1a07107 	lsl	r7, r7, #2
   1c838:	e2877015 	add	r7, r7, #21
   1c83c:	e3a09001 	mov	r9, #1
   1c840:	e0464008 	sub	r4, r6, r8
   1c844:	e0854104 	add	r4, r5, r4, lsl #2
   1c848:	e1a0000a 	mov	r0, sl
   1c84c:	e0851007 	add	r1, r5, r7
   1c850:	e5c49014 	strb	r9, [r4, #20]
   1c854:	eb001214 	bl	210ac <CIPAddress::CopyTo(unsigned char*) const>
   1c858:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c85c:	e3500000 	cmp	r0, #0
   1c860:	0a000075 	beq	1ca3c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2dc>
   1c864:	e59d1010 	ldr	r1, [sp, #16]
   1c868:	e3a03000 	mov	r3, #0
   1c86c:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1c870:	eb0012d0 	bl	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c874:	eb0035a1 	bl	29f00 <CTimer::Get()>
   1c878:	eb0032ea 	bl	29428 <CTimer::GetTicks() const>
   1c87c:	e5849024 	str	r9, [r4, #36]	; 0x24
   1c880:	e5840028 	str	r0, [r4, #40]	; 0x28
   1c884:	eb00359d 	bl	29f00 <CTimer::Get()>
   1c888:	e1a03008 	mov	r3, r8
   1c88c:	e58d5000 	str	r5, [sp]
   1c890:	e59f21f8 	ldr	r2, [pc, #504]	; 1ca90 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x330>
   1c894:	e3a01050 	mov	r1, #80	; 0x50
   1c898:	eb0033d8 	bl	29800 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1c89c:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   1c8a0:	e5840020 	str	r0, [r4, #32]
   1c8a4:	e3530000 	cmp	r3, #0
   1c8a8:	1a00004d 	bne	1c9e4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x284>
   1c8ac:	e28d0018 	add	r0, sp, #24
   1c8b0:	eb003907 	bl	2acd4 <CMACAddress::CMACAddress()>
   1c8b4:	e28d0018 	add	r0, sp, #24
   1c8b8:	eb00393b 	bl	2adac <CMACAddress::SetBroadcast()>
   1c8bc:	e1a0200a 	mov	r2, sl
   1c8c0:	e28d3018 	add	r3, sp, #24
   1c8c4:	e1a00005 	mov	r0, r5
   1c8c8:	e3a01001 	mov	r1, #1
   1c8cc:	ebfffe47 	bl	1c1f0 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   1c8d0:	e28d0018 	add	r0, sp, #24
   1c8d4:	eb003901 	bl	2ace0 <CMACAddress::~CMACAddress()>
   1c8d8:	e3a02000 	mov	r2, #0
   1c8dc:	e1a00002 	mov	r0, r2
   1c8e0:	e28dd024 	add	sp, sp, #36	; 0x24
   1c8e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8e8:	e1a01006 	mov	r1, r6
   1c8ec:	e1a0000a 	mov	r0, sl
   1c8f0:	eb00116b 	bl	20ea4 <CIPAddress::operator==(unsigned char const*) const>
   1c8f4:	e3500000 	cmp	r0, #0
   1c8f8:	0affffc4 	beq	1c810 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xb0>
   1c8fc:	e0474004 	sub	r4, r7, r4
   1c900:	e0854104 	add	r4, r5, r4, lsl #2
   1c904:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1c908:	e3500000 	cmp	r0, #0
   1c90c:	0a000052 	beq	1ca5c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2fc>
   1c910:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1c914:	e59d1010 	ldr	r1, [sp, #16]
   1c918:	e3a03000 	mov	r3, #0
   1c91c:	eb0012a5 	bl	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1c920:	eb003576 	bl	29f00 <CTimer::Get()>
   1c924:	eb0032bf 	bl	29428 <CTimer::GetTicks() const>
   1c928:	e5952244 	ldr	r2, [r5, #580]	; 0x244
   1c92c:	e5840028 	str	r0, [r4, #40]	; 0x28
   1c930:	e3520000 	cmp	r2, #0
   1c934:	0affffe8 	beq	1c8dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1c938:	eb003d2a 	bl	2bde8 <LeaveCritical>
   1c93c:	e3a02000 	mov	r2, #0
   1c940:	eaffffe5 	b	1c8dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1c944:	e3580014 	cmp	r8, #20
   1c948:	01a08004 	moveq	r8, r4
   1c94c:	eaffffb0 	b	1c814 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xb4>
   1c950:	e59f213c 	ldr	r2, [pc, #316]	; 1ca94 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x334>
   1c954:	e59f113c 	ldr	r1, [pc, #316]	; 1ca98 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1c958:	e59f013c 	ldr	r0, [pc, #316]	; 1ca9c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x33c>
   1c95c:	eb001fa7 	bl	24800 <assertion_failed>
   1c960:	eb003cf5 	bl	2bd3c <EnterCritical>
   1c964:	eaffff86 	b	1c784 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x24>
   1c968:	e3500014 	cmp	r0, #20
   1c96c:	1a000042 	bne	1ca7c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x31c>
   1c970:	e59d300c 	ldr	r3, [sp, #12]
   1c974:	e3530013 	cmp	r3, #19
   1c978:	8a000033 	bhi	1ca4c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2ec>
   1c97c:	e3a02000 	mov	r2, #0
   1c980:	e59d100c 	ldr	r1, [sp, #12]
   1c984:	e1a03181 	lsl	r3, r1, #3
   1c988:	e0437001 	sub	r7, r3, r1
   1c98c:	e1a07107 	lsl	r7, r7, #2
   1c990:	e1a06003 	mov	r6, r3
   1c994:	e0853007 	add	r3, r5, r7
   1c998:	e1a08001 	mov	r8, r1
   1c99c:	e2877015 	add	r7, r7, #21
   1c9a0:	e5c32014 	strb	r2, [r3, #20]
   1c9a4:	eaffffa4 	b	1c83c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xdc>
   1c9a8:	e3a07015 	mov	r7, #21
   1c9ac:	e3a03000 	mov	r3, #0
   1c9b0:	e1a06180 	lsl	r6, r0, #3
   1c9b4:	e0460000 	sub	r0, r6, r0
   1c9b8:	e0854100 	add	r4, r5, r0, lsl #2
   1c9bc:	e5c43014 	strb	r3, [r4, #20]
   1c9c0:	e3a0000c 	mov	r0, #12
   1c9c4:	eb0039aa 	bl	2b074 <operator new(unsigned int)>
   1c9c8:	e1a09000 	mov	r9, r0
   1c9cc:	eb00123a 	bl	212bc <CNetQueue::CNetQueue()>
   1c9d0:	e5953010 	ldr	r3, [r5, #16]
   1c9d4:	e584902c 	str	r9, [r4, #44]	; 0x2c
   1c9d8:	e2833001 	add	r3, r3, #1
   1c9dc:	e5853010 	str	r3, [r5, #16]
   1c9e0:	eaffff95 	b	1c83c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xdc>
   1c9e4:	eb003cff 	bl	2bde8 <LeaveCritical>
   1c9e8:	eaffffaf 	b	1c8ac <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x14c>
   1c9ec:	e59d3014 	ldr	r3, [sp, #20]
   1c9f0:	e3530000 	cmp	r3, #0
   1c9f4:	0a00001c 	beq	1ca6c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x30c>
   1c9f8:	e2811019 	add	r1, r1, #25
   1c9fc:	e0851001 	add	r1, r5, r1
   1ca00:	e58d000c 	str	r0, [sp, #12]
   1ca04:	e59d0014 	ldr	r0, [sp, #20]
   1ca08:	eb0038d2 	bl	2ad58 <CMACAddress::Set(unsigned char const*)>
   1ca0c:	eb00353b 	bl	29f00 <CTimer::Get()>
   1ca10:	eb003284 	bl	29428 <CTimer::GetTicks() const>
   1ca14:	e5953244 	ldr	r3, [r5, #580]	; 0x244
   1ca18:	e0474004 	sub	r4, r7, r4
   1ca1c:	e0855104 	add	r5, r5, r4, lsl #2
   1ca20:	e3530000 	cmp	r3, #0
   1ca24:	e5850028 	str	r0, [r5, #40]	; 0x28
   1ca28:	e59d200c 	ldr	r2, [sp, #12]
   1ca2c:	0affffaa 	beq	1c8dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1ca30:	eb003cec 	bl	2bde8 <LeaveCritical>
   1ca34:	e59d200c 	ldr	r2, [sp, #12]
   1ca38:	eaffffa7 	b	1c8dc <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x17c>
   1ca3c:	e59f205c 	ldr	r2, [pc, #92]	; 1caa0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x340>
   1ca40:	e59f1050 	ldr	r1, [pc, #80]	; 1ca98 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1ca44:	e59f0058 	ldr	r0, [pc, #88]	; 1caa4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x344>
   1ca48:	eb001f6c 	bl	24800 <assertion_failed>
   1ca4c:	e59f2054 	ldr	r2, [pc, #84]	; 1caa8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x348>
   1ca50:	e59f1040 	ldr	r1, [pc, #64]	; 1ca98 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1ca54:	e59f0050 	ldr	r0, [pc, #80]	; 1caac <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x34c>
   1ca58:	eb001f68 	bl	24800 <assertion_failed>
   1ca5c:	e3a020eb 	mov	r2, #235	; 0xeb
   1ca60:	e59f1030 	ldr	r1, [pc, #48]	; 1ca98 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1ca64:	e59f0044 	ldr	r0, [pc, #68]	; 1cab0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x350>
   1ca68:	eb001f64 	bl	24800 <assertion_failed>
   1ca6c:	e3a020ff 	mov	r2, #255	; 0xff
   1ca70:	e59f1020 	ldr	r1, [pc, #32]	; 1ca98 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x338>
   1ca74:	e59f0038 	ldr	r0, [pc, #56]	; 1cab4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x354>
   1ca78:	eb001f60 	bl	24800 <assertion_failed>
   1ca7c:	e3a0701c 	mov	r7, #28
   1ca80:	e0070097 	mul	r7, r7, r0
   1ca84:	e1a08000 	mov	r8, r0
   1ca88:	e2877015 	add	r7, r7, #21
   1ca8c:	eaffffc6 	b	1c9ac <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x24c>
   1ca90:	0001bde0 	.word	0x0001bde0
   1ca94:	0000010a 	.word	0x0000010a
   1ca98:	00043c7c 	.word	0x00043c7c
   1ca9c:	0003fd5c 	.word	0x0003fd5c
   1caa0:	00000129 	.word	0x00000129
   1caa4:	00043cb8 	.word	0x00043cb8
   1caa8:	0000011d 	.word	0x0000011d
   1caac:	00043d04 	.word	0x00043d04
   1cab0:	00043cd0 	.word	0x00043cd0
   1cab4:	00043cf0 	.word	0x00043cf0

0001cab8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>:
   1cab8:	e92d4010 	push	{r4, lr}
   1cabc:	e59de008 	ldr	lr, [sp, #8]
   1cac0:	e3510000 	cmp	r1, #0
   1cac4:	e880400e 	stm	r0, {r1, r2, r3, lr}
   1cac8:	0a000009 	beq	1caf4 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x3c>
   1cacc:	e3520000 	cmp	r2, #0
   1cad0:	0a00000b 	beq	1cb04 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x4c>
   1cad4:	e3530000 	cmp	r3, #0
   1cad8:	0a00000d 	beq	1cb14 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x5c>
   1cadc:	e35e0000 	cmp	lr, #0
   1cae0:	18bd8010 	popne	{r4, pc}
   1cae4:	e3a0203e 	mov	r2, #62	; 0x3e
   1cae8:	e59f1034 	ldr	r1, [pc, #52]	; 1cb24 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1caec:	e59f0034 	ldr	r0, [pc, #52]	; 1cb28 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x70>
   1caf0:	eb001f42 	bl	24800 <assertion_failed>
   1caf4:	e3a0203b 	mov	r2, #59	; 0x3b
   1caf8:	e59f1024 	ldr	r1, [pc, #36]	; 1cb24 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1cafc:	e59f0028 	ldr	r0, [pc, #40]	; 1cb2c <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x74>
   1cb00:	eb001f3e 	bl	24800 <assertion_failed>
   1cb04:	e3a0203c 	mov	r2, #60	; 0x3c
   1cb08:	e59f1014 	ldr	r1, [pc, #20]	; 1cb24 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1cb0c:	e59f001c 	ldr	r0, [pc, #28]	; 1cb30 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x78>
   1cb10:	eb001f3a 	bl	24800 <assertion_failed>
   1cb14:	e3a0203d 	mov	r2, #61	; 0x3d
   1cb18:	e59f1004 	ldr	r1, [pc, #4]	; 1cb24 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x6c>
   1cb1c:	e59f0010 	ldr	r0, [pc, #16]	; 1cb34 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x7c>
   1cb20:	eb001f36 	bl	24800 <assertion_failed>
   1cb24:	00043d28 	.word	0x00043d28
   1cb28:	00043d38 	.word	0x00043d38
   1cb2c:	00043980 	.word	0x00043980
   1cb30:	00043994 	.word	0x00043994
   1cb34:	00043ca8 	.word	0x00043ca8

0001cb38 <CICMPHandler::~CICMPHandler()>:
   1cb38:	e12fff1e 	bx	lr

0001cb3c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>:
   1cb3c:	e92d4070 	push	{r4, r5, r6, lr}
   1cb40:	e3510002 	cmp	r1, #2
   1cb44:	e24dd010 	sub	sp, sp, #16
   1cb48:	ca000024 	bgt	1cbe0 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xa4>
   1cb4c:	e3520000 	cmp	r2, #0
   1cb50:	e1a05002 	mov	r5, r2
   1cb54:	e5cd1000 	strb	r1, [sp]
   1cb58:	0a000024 	beq	1cbf0 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xb4>
   1cb5c:	e1a04003 	mov	r4, r3
   1cb60:	e5d23009 	ldrb	r3, [r2, #9]
   1cb64:	e2851010 	add	r1, r5, #16
   1cb68:	e3a02004 	mov	r2, #4
   1cb6c:	e1a06000 	mov	r6, r0
   1cb70:	e28d0002 	add	r0, sp, #2
   1cb74:	e5cd3001 	strb	r3, [sp, #1]
   1cb78:	eb003764 	bl	2a910 <memcpy>
   1cb7c:	e285100c 	add	r1, r5, #12
   1cb80:	e3a02004 	mov	r2, #4
   1cb84:	e28d0006 	add	r0, sp, #6
   1cb88:	eb003760 	bl	2a910 <memcpy>
   1cb8c:	e3540000 	cmp	r4, #0
   1cb90:	0a00001a 	beq	1cc00 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xc4>
   1cb94:	e5d42002 	ldrb	r2, [r4, #2]
   1cb98:	e5d4c003 	ldrb	ip, [r4, #3]
   1cb9c:	e5d43000 	ldrb	r3, [r4]
   1cba0:	e5d41001 	ldrb	r1, [r4, #1]
   1cba4:	e596000c 	ldr	r0, [r6, #12]
   1cba8:	e182240c 	orr	r2, r2, ip, lsl #8
   1cbac:	e1833401 	orr	r3, r3, r1, lsl #8
   1cbb0:	e6bf2fb2 	rev16	r2, r2
   1cbb4:	e6bf3fb3 	rev16	r3, r3
   1cbb8:	e3500000 	cmp	r0, #0
   1cbbc:	e1cd20ba 	strh	r2, [sp, #10]
   1cbc0:	e1cd30bc 	strh	r3, [sp, #12]
   1cbc4:	0a000011 	beq	1cc10 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xd4>
   1cbc8:	e1a0100d 	mov	r1, sp
   1cbcc:	e3a03000 	mov	r3, #0
   1cbd0:	e3a0200e 	mov	r2, #14
   1cbd4:	eb0011f7 	bl	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1cbd8:	e28dd010 	add	sp, sp, #16
   1cbdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cbe0:	e3a020ee 	mov	r2, #238	; 0xee
   1cbe4:	e59f1034 	ldr	r1, [pc, #52]	; 1cc20 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cbe8:	e59f0034 	ldr	r0, [pc, #52]	; 1cc24 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe8>
   1cbec:	eb001f03 	bl	24800 <assertion_failed>
   1cbf0:	e3a020f3 	mov	r2, #243	; 0xf3
   1cbf4:	e59f1024 	ldr	r1, [pc, #36]	; 1cc20 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cbf8:	e59f0028 	ldr	r0, [pc, #40]	; 1cc28 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xec>
   1cbfc:	eb001eff 	bl	24800 <assertion_failed>
   1cc00:	e3a020f8 	mov	r2, #248	; 0xf8
   1cc04:	e59f1014 	ldr	r1, [pc, #20]	; 1cc20 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cc08:	e59f001c 	ldr	r0, [pc, #28]	; 1cc2c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf0>
   1cc0c:	eb001efb 	bl	24800 <assertion_failed>
   1cc10:	e3a020fc 	mov	r2, #252	; 0xfc
   1cc14:	e59f1004 	ldr	r1, [pc, #4]	; 1cc20 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xe4>
   1cc18:	e59f0010 	ldr	r0, [pc, #16]	; 1cc30 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xf4>
   1cc1c:	eb001ef7 	bl	24800 <assertion_failed>
   1cc20:	00043d28 	.word	0x00043d28
   1cc24:	00043d54 	.word	0x00043d54
   1cc28:	00043d74 	.word	0x00043d74
   1cc2c:	00043d84 	.word	0x00043d84
   1cc30:	00043d38 	.word	0x00043d38

0001cc34 <CICMPHandler::Process()>:
   1cc34:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc38:	e1a04000 	mov	r4, r0
   1cc3c:	e5900008 	ldr	r0, [r0, #8]
   1cc40:	e24dde67 	sub	sp, sp, #1648	; 0x670
   1cc44:	e3500000 	cmp	r0, #0
   1cc48:	e24dd004 	sub	sp, sp, #4
   1cc4c:	0a00007e 	beq	1ce4c <CICMPHandler::Process()+0x218>
   1cc50:	e59fb380 	ldr	fp, [pc, #896]	; 1cfd8 <CICMPHandler::Process()+0x3a4>
   1cc54:	e59f6380 	ldr	r6, [pc, #896]	; 1cfdc <CICMPHandler::Process()+0x3a8>
   1cc58:	e59fa380 	ldr	sl, [pc, #896]	; 1cfe0 <CICMPHandler::Process()+0x3ac>
   1cc5c:	e59f9380 	ldr	r9, [pc, #896]	; 1cfe4 <CICMPHandler::Process()+0x3b0>
   1cc60:	e28d7048 	add	r7, sp, #72	; 0x48
   1cc64:	e28d2014 	add	r2, sp, #20
   1cc68:	e28d1030 	add	r1, sp, #48	; 0x30
   1cc6c:	eb001217 	bl	214d0 <CNetQueue::Dequeue(void*, void**)>
   1cc70:	e2505000 	subs	r5, r0, #0
   1cc74:	0a000078 	beq	1ce5c <CICMPHandler::Process()+0x228>
   1cc78:	e59d8014 	ldr	r8, [sp, #20]
   1cc7c:	e3580000 	cmp	r8, #0
   1cc80:	0a000050 	beq	1cdc8 <CICMPHandler::Process()+0x194>
   1cc84:	e5d82000 	ldrb	r2, [r8]
   1cc88:	e3520001 	cmp	r2, #1
   1cc8c:	1a000051 	bne	1cdd8 <CICMPHandler::Process()+0x1a4>
   1cc90:	e2881001 	add	r1, r8, #1
   1cc94:	e28d0018 	add	r0, sp, #24
   1cc98:	eb0010d2 	bl	20fe8 <CIPAddress::CIPAddress(unsigned char const*)>
   1cc9c:	e2881005 	add	r1, r8, #5
   1cca0:	e28d0020 	add	r0, sp, #32
   1cca4:	eb0010cf 	bl	20fe8 <CIPAddress::CIPAddress(unsigned char const*)>
   1cca8:	e1a00008 	mov	r0, r8
   1ccac:	e3a01009 	mov	r1, #9
   1ccb0:	eb0038fd 	bl	2b0ac <operator delete(void*, unsigned int)>
   1ccb4:	e5943000 	ldr	r3, [r4]
   1ccb8:	e3530000 	cmp	r3, #0
   1ccbc:	0a000049 	beq	1cde8 <CICMPHandler::Process()+0x1b4>
   1ccc0:	e28d0020 	add	r0, sp, #32
   1ccc4:	eb00111d 	bl	21140 <CIPAddress::IsBroadcast() const>
   1ccc8:	e3500000 	cmp	r0, #0
   1cccc:	0a000005 	beq	1cce8 <CICMPHandler::Process()+0xb4>
   1ccd0:	e28d0020 	add	r0, sp, #32
   1ccd4:	eb001042 	bl	20de4 <CIPAddress::~CIPAddress()>
   1ccd8:	e28d0018 	add	r0, sp, #24
   1ccdc:	eb001040 	bl	20de4 <CIPAddress::~CIPAddress()>
   1cce0:	e5940008 	ldr	r0, [r4, #8]
   1cce4:	eaffffde 	b	1cc64 <CICMPHandler::Process()+0x30>
   1cce8:	e5940000 	ldr	r0, [r4]
   1ccec:	eb000fd4 	bl	20c44 <CNetConfig::GetBroadcastAddress() const>
   1ccf0:	e1a01000 	mov	r1, r0
   1ccf4:	e28d0020 	add	r0, sp, #32
   1ccf8:	eb00103a 	bl	20de8 <CIPAddress::operator==(CIPAddress const&) const>
   1ccfc:	e3500000 	cmp	r0, #0
   1cd00:	1afffff2 	bne	1ccd0 <CICMPHandler::Process()+0x9c>
   1cd04:	e3550007 	cmp	r5, #7
   1cd08:	9afffff0 	bls	1ccd0 <CICMPHandler::Process()+0x9c>
   1cd0c:	e1a01005 	mov	r1, r5
   1cd10:	e28d0030 	add	r0, sp, #48	; 0x30
   1cd14:	eb0012b3 	bl	217e8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1cd18:	e3500000 	cmp	r0, #0
   1cd1c:	1affffeb 	bne	1ccd0 <CICMPHandler::Process()+0x9c>
   1cd20:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1cd24:	e3530008 	cmp	r3, #8
   1cd28:	0a000032 	beq	1cdf8 <CICMPHandler::Process()+0x1c4>
   1cd2c:	e355001c 	cmp	r5, #28
   1cd30:	9affffe6 	bls	1ccd0 <CICMPHandler::Process()+0x9c>
   1cd34:	e5dd3038 	ldrb	r3, [sp, #56]	; 0x38
   1cd38:	e203200f 	and	r2, r3, #15
   1cd3c:	e2421005 	sub	r1, r2, #5
   1cd40:	e3510001 	cmp	r1, #1
   1cd44:	8affffe1 	bhi	1ccd0 <CICMPHandler::Process()+0x9c>
   1cd48:	e1a03243 	asr	r3, r3, #4
   1cd4c:	e3530004 	cmp	r3, #4
   1cd50:	1affffde 	bne	1ccd0 <CICMPHandler::Process()+0x9c>
   1cd54:	e5940000 	ldr	r0, [r4]
   1cd58:	e58d200c 	str	r2, [sp, #12]
   1cd5c:	eb000fae 	bl	20c1c <CNetConfig::GetIPAddress() const>
   1cd60:	e28d1044 	add	r1, sp, #68	; 0x44
   1cd64:	eb001065 	bl	20f00 <CIPAddress::operator!=(unsigned char const*) const>
   1cd68:	e3500000 	cmp	r0, #0
   1cd6c:	1affffd7 	bne	1ccd0 <CICMPHandler::Process()+0x9c>
   1cd70:	e59d200c 	ldr	r2, [sp, #12]
   1cd74:	e1a02102 	lsl	r2, r2, #2
   1cd78:	e2823010 	add	r3, r2, #16
   1cd7c:	e1550003 	cmp	r5, r3
   1cd80:	3affffd2 	bcc	1ccd0 <CICMPHandler::Process()+0x9c>
   1cd84:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   1cd88:	e28d5038 	add	r5, sp, #56	; 0x38
   1cd8c:	e2433003 	sub	r3, r3, #3
   1cd90:	e0855002 	add	r5, r5, r2
   1cd94:	e3530009 	cmp	r3, #9
   1cd98:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1cd9c:	eaffffcb 	b	1ccd0 <CICMPHandler::Process()+0x9c>
   1cda0:	0001ceec 	.word	0x0001ceec
   1cda4:	0001ccd0 	.word	0x0001ccd0
   1cda8:	0001ce9c 	.word	0x0001ce9c
   1cdac:	0001ccd0 	.word	0x0001ccd0
   1cdb0:	0001ccd0 	.word	0x0001ccd0
   1cdb4:	0001ccd0 	.word	0x0001ccd0
   1cdb8:	0001ccd0 	.word	0x0001ccd0
   1cdbc:	0001ccd0 	.word	0x0001ccd0
   1cdc0:	0001cf20 	.word	0x0001cf20
   1cdc4:	0001ce68 	.word	0x0001ce68
   1cdc8:	e3a02052 	mov	r2, #82	; 0x52
   1cdcc:	e59f1214 	ldr	r1, [pc, #532]	; 1cfe8 <CICMPHandler::Process()+0x3b4>
   1cdd0:	e59f0214 	ldr	r0, [pc, #532]	; 1cfec <CICMPHandler::Process()+0x3b8>
   1cdd4:	eb001e89 	bl	24800 <assertion_failed>
   1cdd8:	e3a02053 	mov	r2, #83	; 0x53
   1cddc:	e59f1204 	ldr	r1, [pc, #516]	; 1cfe8 <CICMPHandler::Process()+0x3b4>
   1cde0:	e59f0208 	ldr	r0, [pc, #520]	; 1cff0 <CICMPHandler::Process()+0x3bc>
   1cde4:	eb001e85 	bl	24800 <assertion_failed>
   1cde8:	e3a0205b 	mov	r2, #91	; 0x5b
   1cdec:	e59f11f4 	ldr	r1, [pc, #500]	; 1cfe8 <CICMPHandler::Process()+0x3b4>
   1cdf0:	e59f01fc 	ldr	r0, [pc, #508]	; 1cff4 <CICMPHandler::Process()+0x3c0>
   1cdf4:	eb001e81 	bl	24800 <assertion_failed>
   1cdf8:	e5dd3031 	ldrb	r3, [sp, #49]	; 0x31
   1cdfc:	e3530000 	cmp	r3, #0
   1ce00:	1affffb2 	bne	1ccd0 <CICMPHandler::Process()+0x9c>
   1ce04:	e1a01005 	mov	r1, r5
   1ce08:	e28d0030 	add	r0, sp, #48	; 0x30
   1ce0c:	e5cd3030 	strb	r3, [sp, #48]	; 0x30
   1ce10:	e5cd3031 	strb	r3, [sp, #49]	; 0x31
   1ce14:	e1cd33b2 	strh	r3, [sp, #50]	; 0x32
   1ce18:	eb001272 	bl	217e8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   1ce1c:	e5942004 	ldr	r2, [r4, #4]
   1ce20:	e1cd03b2 	strh	r0, [sp, #50]	; 0x32
   1ce24:	e3520000 	cmp	r2, #0
   1ce28:	0a000049 	beq	1cf54 <CICMPHandler::Process()+0x320>
   1ce2c:	e3a01001 	mov	r1, #1
   1ce30:	e1a03005 	mov	r3, r5
   1ce34:	e58d1000 	str	r1, [sp]
   1ce38:	e1a00002 	mov	r0, r2
   1ce3c:	e28d1018 	add	r1, sp, #24
   1ce40:	e28d2030 	add	r2, sp, #48	; 0x30
   1ce44:	ebfff7a3 	bl	1acd8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1ce48:	eaffffa0 	b	1ccd0 <CICMPHandler::Process()+0x9c>
   1ce4c:	e3a0204e 	mov	r2, #78	; 0x4e
   1ce50:	e59f1190 	ldr	r1, [pc, #400]	; 1cfe8 <CICMPHandler::Process()+0x3b4>
   1ce54:	e59f019c 	ldr	r0, [pc, #412]	; 1cff8 <CICMPHandler::Process()+0x3c4>
   1ce58:	eb001e68 	bl	24800 <assertion_failed>
   1ce5c:	e28dde67 	add	sp, sp, #1648	; 0x670
   1ce60:	e28dd004 	add	sp, sp, #4
   1ce64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce68:	eb002757 	bl	26bcc <CLogger::Get()>
   1ce6c:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1ce70:	e1a0300b 	mov	r3, fp
   1ce74:	e58d2000 	str	r2, [sp]
   1ce78:	e1a01006 	mov	r1, r6
   1ce7c:	e3a02002 	mov	r2, #2
   1ce80:	eb00268e 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ce84:	e1a03005 	mov	r3, r5
   1ce88:	e28d2038 	add	r2, sp, #56	; 0x38
   1ce8c:	e3a01002 	mov	r1, #2
   1ce90:	e1a00004 	mov	r0, r4
   1ce94:	ebffff28 	bl	1cb3c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1ce98:	eaffff8c 	b	1ccd0 <CICMPHandler::Process()+0x9c>
   1ce9c:	e28d0028 	add	r0, sp, #40	; 0x28
   1cea0:	e28d1034 	add	r1, sp, #52	; 0x34
   1cea4:	eb00104f 	bl	20fe8 <CIPAddress::CIPAddress(unsigned char const*)>
   1cea8:	e5943004 	ldr	r3, [r4, #4]
   1ceac:	e3530000 	cmp	r3, #0
   1ceb0:	0a000044 	beq	1cfc8 <CICMPHandler::Process()+0x394>
   1ceb4:	e5940000 	ldr	r0, [r4]
   1ceb8:	eb000f57 	bl	20c1c <CNetConfig::GetIPAddress() const>
   1cebc:	e1a05000 	mov	r5, r0
   1cec0:	e5940000 	ldr	r0, [r4]
   1cec4:	eb000f58 	bl	20c2c <CNetConfig::GetNetMask() const>
   1cec8:	e1a01005 	mov	r1, r5
   1cecc:	e1a02000 	mov	r2, r0
   1ced0:	e28d0028 	add	r0, sp, #40	; 0x28
   1ced4:	eb0010cb 	bl	21208 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   1ced8:	e3500000 	cmp	r0, #0
   1cedc:	1a000020 	bne	1cf64 <CICMPHandler::Process()+0x330>
   1cee0:	e28d0028 	add	r0, sp, #40	; 0x28
   1cee4:	eb000fbe 	bl	20de4 <CIPAddress::~CIPAddress()>
   1cee8:	eaffff78 	b	1ccd0 <CICMPHandler::Process()+0x9c>
   1ceec:	eb002736 	bl	26bcc <CLogger::Get()>
   1cef0:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1cef4:	e1a01006 	mov	r1, r6
   1cef8:	e58d2000 	str	r2, [sp]
   1cefc:	e59f30f8 	ldr	r3, [pc, #248]	; 1cffc <CICMPHandler::Process()+0x3c8>
   1cf00:	e3a02004 	mov	r2, #4
   1cf04:	eb00266d 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cf08:	e1a03005 	mov	r3, r5
   1cf0c:	e28d2038 	add	r2, sp, #56	; 0x38
   1cf10:	e3a01000 	mov	r1, #0
   1cf14:	e1a00004 	mov	r0, r4
   1cf18:	ebffff07 	bl	1cb3c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1cf1c:	eaffff6b 	b	1ccd0 <CICMPHandler::Process()+0x9c>
   1cf20:	eb002729 	bl	26bcc <CLogger::Get()>
   1cf24:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1cf28:	e1a0300a 	mov	r3, sl
   1cf2c:	e58d2000 	str	r2, [sp]
   1cf30:	e1a01006 	mov	r1, r6
   1cf34:	e3a02002 	mov	r2, #2
   1cf38:	eb002660 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cf3c:	e1a03005 	mov	r3, r5
   1cf40:	e28d2038 	add	r2, sp, #56	; 0x38
   1cf44:	e3a01001 	mov	r1, #1
   1cf48:	e1a00004 	mov	r0, r4
   1cf4c:	ebfffefa 	bl	1cb3c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1cf50:	eaffff5e 	b	1ccd0 <CICMPHandler::Process()+0x9c>
   1cf54:	e3a02078 	mov	r2, #120	; 0x78
   1cf58:	e59f1088 	ldr	r1, [pc, #136]	; 1cfe8 <CICMPHandler::Process()+0x3b4>
   1cf5c:	e59f009c 	ldr	r0, [pc, #156]	; 1d000 <CICMPHandler::Process()+0x3cc>
   1cf60:	eb001e26 	bl	24800 <assertion_failed>
   1cf64:	e1a01007 	mov	r1, r7
   1cf68:	e5940004 	ldr	r0, [r4, #4]
   1cf6c:	ebfff899 	bl	1b1d8 <CNetworkLayer::GetGateway(unsigned char const*) const>
   1cf70:	e1a01000 	mov	r1, r0
   1cf74:	e28d0018 	add	r0, sp, #24
   1cf78:	eb000fe0 	bl	20f00 <CIPAddress::operator!=(unsigned char const*) const>
   1cf7c:	e3500000 	cmp	r0, #0
   1cf80:	1affffd6 	bne	1cee0 <CICMPHandler::Process()+0x2ac>
   1cf84:	eb002710 	bl	26bcc <CLogger::Get()>
   1cf88:	e5dd2031 	ldrb	r2, [sp, #49]	; 0x31
   1cf8c:	e1a03009 	mov	r3, r9
   1cf90:	e1a01006 	mov	r1, r6
   1cf94:	e58d2000 	str	r2, [sp]
   1cf98:	e3a02004 	mov	r2, #4
   1cf9c:	eb002647 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cfa0:	e28d0028 	add	r0, sp, #40	; 0x28
   1cfa4:	e5945004 	ldr	r5, [r4, #4]
   1cfa8:	eb001033 	bl	2107c <CIPAddress::Get() const>
   1cfac:	e1a01007 	mov	r1, r7
   1cfb0:	e1a02000 	mov	r2, r0
   1cfb4:	e1a00005 	mov	r0, r5
   1cfb8:	ebfff884 	bl	1b1d0 <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>
   1cfbc:	e28d0028 	add	r0, sp, #40	; 0x28
   1cfc0:	eb000f87 	bl	20de4 <CIPAddress::~CIPAddress()>
   1cfc4:	eaffff41 	b	1ccd0 <CICMPHandler::Process()+0x9c>
   1cfc8:	e3a020a7 	mov	r2, #167	; 0xa7
   1cfcc:	e59f1014 	ldr	r1, [pc, #20]	; 1cfe8 <CICMPHandler::Process()+0x3b4>
   1cfd0:	e59f0028 	ldr	r0, [pc, #40]	; 1d000 <CICMPHandler::Process()+0x3cc>
   1cfd4:	eb001e09 	bl	24800 <assertion_failed>
   1cfd8:	00043df4 	.word	0x00043df4
   1cfdc:	00043d20 	.word	0x00043d20
   1cfe0:	00043de0 	.word	0x00043de0
   1cfe4:	00043e0c 	.word	0x00043e0c
   1cfe8:	00043d28 	.word	0x00043d28
   1cfec:	000439fc 	.word	0x000439fc
   1cff0:	00043d9c 	.word	0x00043d9c
   1cff4:	00043980 	.word	0x00043980
   1cff8:	00043ca8 	.word	0x00043ca8
   1cffc:	00043dc0 	.word	0x00043dc0
   1d000:	00043994 	.word	0x00043994

0001d004 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>:
   1d004:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1d008:	e2525000 	subs	r5, r2, #0
   1d00c:	e24dd020 	sub	sp, sp, #32
   1d010:	0a00003e 	beq	1d110 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x10c>
   1d014:	e3530014 	cmp	r3, #20
   1d018:	e1a06003 	mov	r6, r3
   1d01c:	9a00003f 	bls	1d120 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x11c>
   1d020:	e1a08001 	mov	r8, r1
   1d024:	e5d51000 	ldrb	r1, [r5]
   1d028:	e201200f 	and	r2, r1, #15
   1d02c:	e2423005 	sub	r3, r2, #5
   1d030:	e3530001 	cmp	r3, #1
   1d034:	8a00003d 	bhi	1d130 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x12c>
   1d038:	e1a01241 	asr	r1, r1, #4
   1d03c:	e3510004 	cmp	r1, #4
   1d040:	e1a04102 	lsl	r4, r2, #2
   1d044:	1a00003d 	bne	1d140 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x13c>
   1d048:	e1a07000 	mov	r7, r0
   1d04c:	e5900000 	ldr	r0, [r0]
   1d050:	eb000ef1 	bl	20c1c <CNetConfig::GetIPAddress() const>
   1d054:	e285100c 	add	r1, r5, #12
   1d058:	eb000f91 	bl	20ea4 <CIPAddress::operator==(unsigned char const*) const>
   1d05c:	e3500000 	cmp	r0, #0
   1d060:	0a00003a 	beq	1d150 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x14c>
   1d064:	e2843008 	add	r3, r4, #8
   1d068:	e1560003 	cmp	r6, r3
   1d06c:	3a00003b 	bcc	1d160 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x15c>
   1d070:	e3580000 	cmp	r8, #0
   1d074:	e0854004 	add	r4, r5, r4
   1d078:	0a000022 	beq	1d108 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x104>
   1d07c:	e59f30ec 	ldr	r3, [pc, #236]	; 1d170 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x16c>
   1d080:	e59f20ec 	ldr	r2, [pc, #236]	; 1d174 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x170>
   1d084:	e3580001 	cmp	r8, #1
   1d088:	01a08003 	moveq	r8, r3
   1d08c:	11a08002 	movne	r8, r2
   1d090:	e28d0010 	add	r0, sp, #16
   1d094:	eb002ab2 	bl	27b64 <CString::CString()>
   1d098:	e2851010 	add	r1, r5, #16
   1d09c:	e28d0008 	add	r0, sp, #8
   1d0a0:	eb000fd0 	bl	20fe8 <CIPAddress::CIPAddress(unsigned char const*)>
   1d0a4:	e28d1010 	add	r1, sp, #16
   1d0a8:	e28d0008 	add	r0, sp, #8
   1d0ac:	eb001034 	bl	21184 <CIPAddress::Format(CString*) const>
   1d0b0:	eb0026c5 	bl	26bcc <CLogger::Get()>
   1d0b4:	e1a06000 	mov	r6, r0
   1d0b8:	e28d0010 	add	r0, sp, #16
   1d0bc:	eb002abe 	bl	27bbc <CString::operator char const*() const>
   1d0c0:	e58d8000 	str	r8, [sp]
   1d0c4:	e58d0004 	str	r0, [sp, #4]
   1d0c8:	e59f30a8 	ldr	r3, [pc, #168]	; 1d178 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x174>
   1d0cc:	e1a00006 	mov	r0, r6
   1d0d0:	e3a02004 	mov	r2, #4
   1d0d4:	e59f10a0 	ldr	r1, [pc, #160]	; 1d17c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x178>
   1d0d8:	eb0025f8 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d0dc:	e1a03004 	mov	r3, r4
   1d0e0:	e1a02005 	mov	r2, r5
   1d0e4:	e3a01000 	mov	r1, #0
   1d0e8:	e1a00007 	mov	r0, r7
   1d0ec:	ebfffe92 	bl	1cb3c <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   1d0f0:	e28d0008 	add	r0, sp, #8
   1d0f4:	eb000f3a 	bl	20de4 <CIPAddress::~CIPAddress()>
   1d0f8:	e28d0010 	add	r0, sp, #16
   1d0fc:	eb002a65 	bl	27a98 <CString::~CString()>
   1d100:	e28dd020 	add	sp, sp, #32
   1d104:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1d108:	e59f8070 	ldr	r8, [pc, #112]	; 1d180 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x17c>
   1d10c:	eaffffdf 	b	1d090 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x8c>
   1d110:	e3a020c9 	mov	r2, #201	; 0xc9
   1d114:	e59f1068 	ldr	r1, [pc, #104]	; 1d184 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d118:	e59f0068 	ldr	r0, [pc, #104]	; 1d188 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x184>
   1d11c:	eb001db7 	bl	24800 <assertion_failed>
   1d120:	e3a020ca 	mov	r2, #202	; 0xca
   1d124:	e59f1058 	ldr	r1, [pc, #88]	; 1d184 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d128:	e59f005c 	ldr	r0, [pc, #92]	; 1d18c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x188>
   1d12c:	eb001db3 	bl	24800 <assertion_failed>
   1d130:	e3a020cf 	mov	r2, #207	; 0xcf
   1d134:	e59f1048 	ldr	r1, [pc, #72]	; 1d184 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d138:	e59f0050 	ldr	r0, [pc, #80]	; 1d190 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x18c>
   1d13c:	eb001daf 	bl	24800 <assertion_failed>
   1d140:	e3a020d2 	mov	r2, #210	; 0xd2
   1d144:	e59f1038 	ldr	r1, [pc, #56]	; 1d184 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d148:	e59f0044 	ldr	r0, [pc, #68]	; 1d194 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x190>
   1d14c:	eb001dab 	bl	24800 <assertion_failed>
   1d150:	e3a020d3 	mov	r2, #211	; 0xd3
   1d154:	e59f1028 	ldr	r1, [pc, #40]	; 1d184 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d158:	e59f0038 	ldr	r0, [pc, #56]	; 1d198 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x194>
   1d15c:	eb001da7 	bl	24800 <assertion_failed>
   1d160:	e3a020d4 	mov	r2, #212	; 0xd4
   1d164:	e59f1018 	ldr	r1, [pc, #24]	; 1d184 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x180>
   1d168:	e59f002c 	ldr	r0, [pc, #44]	; 1d19c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x198>
   1d16c:	eb001da3 	bl	24800 <assertion_failed>
   1d170:	00043e28 	.word	0x00043e28
   1d174:	00047764 	.word	0x00047764
   1d178:	00043f70 	.word	0x00043f70
   1d17c:	00043d20 	.word	0x00043d20
   1d180:	00043e1c 	.word	0x00043e1c
   1d184:	00043d28 	.word	0x00043d28
   1d188:	00043e30 	.word	0x00043e30
   1d18c:	00043e48 	.word	0x00043e48
   1d190:	00043e68 	.word	0x00043e68
   1d194:	00043ec8 	.word	0x00043ec8
   1d198:	00043ef4 	.word	0x00043ef4
   1d19c:	00043f30 	.word	0x00043f30

0001d1a0 <CRouteCache::CRouteCache()>:
   1d1a0:	e3a02064 	mov	r2, #100	; 0x64
   1d1a4:	e92d4010 	push	{r4, lr}
   1d1a8:	e1a04000 	mov	r4, r0
   1d1ac:	e1a01002 	mov	r1, r2
   1d1b0:	eb00298c 	bl	277e8 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   1d1b4:	e1a00004 	mov	r0, r4
   1d1b8:	e8bd8010 	pop	{r4, pc}

0001d1bc <CRouteCache::Flush()>:
   1d1bc:	e92d4070 	push	{r4, r5, r6, lr}
   1d1c0:	e1a05000 	mov	r5, r0
   1d1c4:	eb0029ad 	bl	27880 <CPtrArray::GetCount() const>
   1d1c8:	e3500000 	cmp	r0, #0
   1d1cc:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d1d0:	e3a06008 	mov	r6, #8
   1d1d4:	e2404001 	sub	r4, r0, #1
   1d1d8:	e1a01004 	mov	r1, r4
   1d1dc:	e1a00005 	mov	r0, r5
   1d1e0:	eb0029a8 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1d1e4:	e1a01006 	mov	r1, r6
   1d1e8:	e5900000 	ldr	r0, [r0]
   1d1ec:	eb0037ae 	bl	2b0ac <operator delete(void*, unsigned int)>
   1d1f0:	e2444001 	sub	r4, r4, #1
   1d1f4:	e1a00005 	mov	r0, r5
   1d1f8:	eb002a18 	bl	27a60 <CPtrArray::RemoveLast()>
   1d1fc:	e3740001 	cmn	r4, #1
   1d200:	1afffff4 	bne	1d1d8 <CRouteCache::Flush()+0x1c>
   1d204:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d208 <CRouteCache::~CRouteCache()>:
   1d208:	e92d4010 	push	{r4, lr}
   1d20c:	e1a04000 	mov	r4, r0
   1d210:	ebffffe9 	bl	1d1bc <CRouteCache::Flush()>
   1d214:	e1a00004 	mov	r0, r4
   1d218:	eb00298d 	bl	27854 <CPtrArray::~CPtrArray()>
   1d21c:	e1a00004 	mov	r0, r4
   1d220:	e8bd8010 	pop	{r4, pc}

0001d224 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>:
   1d224:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d228:	e2517000 	subs	r7, r1, #0
   1d22c:	0a00002a 	beq	1d2dc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xb8>
   1d230:	e3520000 	cmp	r2, #0
   1d234:	e1a0a002 	mov	sl, r2
   1d238:	0a00002b 	beq	1d2ec <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xc8>
   1d23c:	e1a06000 	mov	r6, r0
   1d240:	eb00298e 	bl	27880 <CPtrArray::GetCount() const>
   1d244:	e2509000 	subs	r9, r0, #0
   1d248:	0a000015 	beq	1d2a4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x80>
   1d24c:	e3a04000 	mov	r4, #0
   1d250:	e3a08004 	mov	r8, #4
   1d254:	ea000008 	b	1d27c <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x58>
   1d258:	e1a02008 	mov	r2, r8
   1d25c:	e1a01007 	mov	r1, r7
   1d260:	e1a00005 	mov	r0, r5
   1d264:	eb00336d 	bl	2a020 <memcmp>
   1d268:	e3500000 	cmp	r0, #0
   1d26c:	0a000015 	beq	1d2c8 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xa4>
   1d270:	e2844001 	add	r4, r4, #1
   1d274:	e1590004 	cmp	r9, r4
   1d278:	0a000009 	beq	1d2a4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x80>
   1d27c:	e1a01004 	mov	r1, r4
   1d280:	e1a00006 	mov	r0, r6
   1d284:	eb00297f 	bl	27888 <CPtrArray::operator[](unsigned int)>
   1d288:	e5905000 	ldr	r5, [r0]
   1d28c:	e3550000 	cmp	r5, #0
   1d290:	1afffff0 	bne	1d258 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x34>
   1d294:	e3a0203e 	mov	r2, #62	; 0x3e
   1d298:	e59f105c 	ldr	r1, [pc, #92]	; 1d2fc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1d29c:	e59f005c 	ldr	r0, [pc, #92]	; 1d300 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xdc>
   1d2a0:	eb001d56 	bl	24800 <assertion_failed>
   1d2a4:	e3a00008 	mov	r0, #8
   1d2a8:	eb003771 	bl	2b074 <operator new(unsigned int)>
   1d2ac:	e1a05000 	mov	r5, r0
   1d2b0:	e1a01007 	mov	r1, r7
   1d2b4:	e3a02004 	mov	r2, #4
   1d2b8:	eb003594 	bl	2a910 <memcpy>
   1d2bc:	e1a01005 	mov	r1, r5
   1d2c0:	e1a00006 	mov	r0, r6
   1d2c4:	eb0029a7 	bl	27968 <CPtrArray::Append(void*)>
   1d2c8:	e1a0100a 	mov	r1, sl
   1d2cc:	e2850004 	add	r0, r5, #4
   1d2d0:	e3a02004 	mov	r2, #4
   1d2d4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d2d8:	ea00358c 	b	2a910 <memcpy>
   1d2dc:	e3a02035 	mov	r2, #53	; 0x35
   1d2e0:	e59f1014 	ldr	r1, [pc, #20]	; 1d2fc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1d2e4:	e59f0018 	ldr	r0, [pc, #24]	; 1d304 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xe0>
   1d2e8:	eb001d44 	bl	24800 <assertion_failed>
   1d2ec:	e3a02036 	mov	r2, #54	; 0x36
   1d2f0:	e59f1004 	ldr	r1, [pc, #4]	; 1d2fc <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd8>
   1d2f4:	e59f000c 	ldr	r0, [pc, #12]	; 1d308 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xe4>
   1d2f8:	eb001d40 	bl	24800 <assertion_failed>
   1d2fc:	00043f90 	.word	0x00043f90
   1d300:	00043fc0 	.word	0x00043fc0
   1d304:	00043fa0 	.word	0x00043fa0
   1d308:	00043fb0 	.word	0x00043fb0

0001d30c <CRouteCache::GetRoute(unsigned char const*) const>:
   1d30c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d310:	e2517000 	subs	r7, r1, #0
   1d314:	0a00001b 	beq	1d388 <CRouteCache::GetRoute(unsigned char const*) const+0x7c>
   1d318:	e1a05000 	mov	r5, r0
   1d31c:	eb002957 	bl	27880 <CPtrArray::GetCount() const>
   1d320:	e2509000 	subs	r9, r0, #0
   1d324:	13a04000 	movne	r4, #0
   1d328:	13a08004 	movne	r8, #4
   1d32c:	1a000008 	bne	1d354 <CRouteCache::GetRoute(unsigned char const*) const+0x48>
   1d330:	ea000010 	b	1d378 <CRouteCache::GetRoute(unsigned char const*) const+0x6c>
   1d334:	e1a02008 	mov	r2, r8
   1d338:	e1a01007 	mov	r1, r7
   1d33c:	eb003337 	bl	2a020 <memcmp>
   1d340:	e3500000 	cmp	r0, #0
   1d344:	0a00000d 	beq	1d380 <CRouteCache::GetRoute(unsigned char const*) const+0x74>
   1d348:	e2844001 	add	r4, r4, #1
   1d34c:	e1590004 	cmp	r9, r4
   1d350:	0a000008 	beq	1d378 <CRouteCache::GetRoute(unsigned char const*) const+0x6c>
   1d354:	e1a01004 	mov	r1, r4
   1d358:	e1a00005 	mov	r0, r5
   1d35c:	eb002965 	bl	278f8 <CPtrArray::operator[](unsigned int) const>
   1d360:	e2506000 	subs	r6, r0, #0
   1d364:	1afffff2 	bne	1d334 <CRouteCache::GetRoute(unsigned char const*) const+0x28>
   1d368:	e3a0205d 	mov	r2, #93	; 0x5d
   1d36c:	e59f1024 	ldr	r1, [pc, #36]	; 1d398 <CRouteCache::GetRoute(unsigned char const*) const+0x8c>
   1d370:	e59f0024 	ldr	r0, [pc, #36]	; 1d39c <CRouteCache::GetRoute(unsigned char const*) const+0x90>
   1d374:	eb001d21 	bl	24800 <assertion_failed>
   1d378:	e3a00000 	mov	r0, #0
   1d37c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d380:	e2860004 	add	r0, r6, #4
   1d384:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d388:	e3a02057 	mov	r2, #87	; 0x57
   1d38c:	e59f1004 	ldr	r1, [pc, #4]	; 1d398 <CRouteCache::GetRoute(unsigned char const*) const+0x8c>
   1d390:	e59f0008 	ldr	r0, [pc, #8]	; 1d3a0 <CRouteCache::GetRoute(unsigned char const*) const+0x94>
   1d394:	eb001d19 	bl	24800 <assertion_failed>
   1d398:	00043f90 	.word	0x00043f90
   1d39c:	00043fc0 	.word	0x00043fc0
   1d3a0:	00043fa0 	.word	0x00043fa0

0001d3a4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>:
   1d3a4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d3a8:	e1a05003 	mov	r5, r3
   1d3ac:	e1a04000 	mov	r4, r0
   1d3b0:	e1a07001 	mov	r7, r1
   1d3b4:	e59f3088 	ldr	r3, [pc, #136]	; 1d444 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1d3b8:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   1d3bc:	e1dd92b0 	ldrh	r9, [sp, #32]
   1d3c0:	e1dd82b4 	ldrh	r8, [sp, #36]	; 0x24
   1d3c4:	e5802008 	str	r2, [r0, #8]
   1d3c8:	e5803000 	str	r3, [r0]
   1d3cc:	e5801004 	str	r1, [r0, #4]
   1d3d0:	e1a01005 	mov	r1, r5
   1d3d4:	e280000c 	add	r0, r0, #12
   1d3d8:	eb000e72 	bl	20da8 <CIPAddress::CIPAddress(CIPAddress const&)>
   1d3dc:	e1c491b4 	strh	r9, [r4, #20]
   1d3e0:	e1c481b6 	strh	r8, [r4, #22]
   1d3e4:	e5846018 	str	r6, [r4, #24]
   1d3e8:	e1a00007 	mov	r0, r7
   1d3ec:	eb000e0a 	bl	20c1c <CNetConfig::GetIPAddress() const>
   1d3f0:	e1a03006 	mov	r3, r6
   1d3f4:	e1a01000 	mov	r1, r0
   1d3f8:	e1a02005 	mov	r2, r5
   1d3fc:	e284001c 	add	r0, r4, #28
   1d400:	eb001084 	bl	21618 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>
   1d404:	e5943004 	ldr	r3, [r4, #4]
   1d408:	e3530000 	cmp	r3, #0
   1d40c:	0a000004 	beq	1d424 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x80>
   1d410:	e5943008 	ldr	r3, [r4, #8]
   1d414:	e3530000 	cmp	r3, #0
   1d418:	0a000005 	beq	1d434 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x90>
   1d41c:	e1a00004 	mov	r0, r4
   1d420:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d424:	e3a02025 	mov	r2, #37	; 0x25
   1d428:	e59f1018 	ldr	r1, [pc, #24]	; 1d448 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   1d42c:	e59f0018 	ldr	r0, [pc, #24]	; 1d44c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa8>
   1d430:	eb001cf2 	bl	24800 <assertion_failed>
   1d434:	e3a02026 	mov	r2, #38	; 0x26
   1d438:	e59f1008 	ldr	r1, [pc, #8]	; 1d448 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   1d43c:	e59f000c 	ldr	r0, [pc, #12]	; 1d450 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xac>
   1d440:	eb001cee 	bl	24800 <assertion_failed>
   1d444:	00043fd4 	.word	0x00043fd4
   1d448:	00044010 	.word	0x00044010
   1d44c:	00043980 	.word	0x00043980
   1d450:	00043994 	.word	0x00043994

0001d454 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>:
   1d454:	e92d4070 	push	{r4, r5, r6, lr}
   1d458:	e1a05001 	mov	r5, r1
   1d45c:	e59f1078 	ldr	r1, [pc, #120]	; 1d4dc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x88>
   1d460:	e1a04000 	mov	r4, r0
   1d464:	e8800022 	stm	r0, {r1, r5}
   1d468:	e5802008 	str	r2, [r0, #8]
   1d46c:	e280000c 	add	r0, r0, #12
   1d470:	e1a06003 	mov	r6, r3
   1d474:	eb000e44 	bl	20d8c <CIPAddress::CIPAddress()>
   1d478:	e3a02000 	mov	r2, #0
   1d47c:	e1c461b6 	strh	r6, [r4, #22]
   1d480:	e1c421b4 	strh	r2, [r4, #20]
   1d484:	e1a00005 	mov	r0, r5
   1d488:	eb000de3 	bl	20c1c <CNetConfig::GetIPAddress() const>
   1d48c:	e59d2010 	ldr	r2, [sp, #16]
   1d490:	e1a01000 	mov	r1, r0
   1d494:	e284001c 	add	r0, r4, #28
   1d498:	eb001052 	bl	215e8 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>
   1d49c:	e5943004 	ldr	r3, [r4, #4]
   1d4a0:	e3530000 	cmp	r3, #0
   1d4a4:	0a000004 	beq	1d4bc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x68>
   1d4a8:	e5943008 	ldr	r3, [r4, #8]
   1d4ac:	e3530000 	cmp	r3, #0
   1d4b0:	0a000005 	beq	1d4cc <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x78>
   1d4b4:	e1a00004 	mov	r0, r4
   1d4b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d4bc:	e3a02033 	mov	r2, #51	; 0x33
   1d4c0:	e59f1018 	ldr	r1, [pc, #24]	; 1d4e0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x8c>
   1d4c4:	e59f0018 	ldr	r0, [pc, #24]	; 1d4e4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x90>
   1d4c8:	eb001ccc 	bl	24800 <assertion_failed>
   1d4cc:	e3a02034 	mov	r2, #52	; 0x34
   1d4d0:	e59f1008 	ldr	r1, [pc, #8]	; 1d4e0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x8c>
   1d4d4:	e59f000c 	ldr	r0, [pc, #12]	; 1d4e8 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x94>
   1d4d8:	eb001cc8 	bl	24800 <assertion_failed>
   1d4dc:	00043fd4 	.word	0x00043fd4
   1d4e0:	00044010 	.word	0x00044010
   1d4e4:	00043980 	.word	0x00043980
   1d4e8:	00043994 	.word	0x00043994

0001d4ec <CNetConnection::~CNetConnection()>:
   1d4ec:	e3a03000 	mov	r3, #0
   1d4f0:	e92d4010 	push	{r4, lr}
   1d4f4:	e1a04000 	mov	r4, r0
   1d4f8:	e59f201c 	ldr	r2, [pc, #28]	; 1d51c <CNetConnection::~CNetConnection()+0x30>
   1d4fc:	e5803008 	str	r3, [r0, #8]
   1d500:	e880000c 	stm	r0, {r2, r3}
   1d504:	e280001c 	add	r0, r0, #28
   1d508:	eb001053 	bl	2165c <CChecksumCalculator::~CChecksumCalculator()>
   1d50c:	e284000c 	add	r0, r4, #12
   1d510:	eb000e33 	bl	20de4 <CIPAddress::~CIPAddress()>
   1d514:	e1a00004 	mov	r0, r4
   1d518:	e8bd8010 	pop	{r4, pc}
   1d51c:	00043fd4 	.word	0x00043fd4

0001d520 <CNetConnection::~CNetConnection()>:
   1d520:	e3a03000 	mov	r3, #0
   1d524:	e92d4010 	push	{r4, lr}
   1d528:	e1a04000 	mov	r4, r0
   1d52c:	e59f2028 	ldr	r2, [pc, #40]	; 1d55c <CNetConnection::~CNetConnection()+0x3c>
   1d530:	e5803008 	str	r3, [r0, #8]
   1d534:	e880000c 	stm	r0, {r2, r3}
   1d538:	e280001c 	add	r0, r0, #28
   1d53c:	eb001046 	bl	2165c <CChecksumCalculator::~CChecksumCalculator()>
   1d540:	e284000c 	add	r0, r4, #12
   1d544:	eb000e26 	bl	20de4 <CIPAddress::~CIPAddress()>
   1d548:	e1a00004 	mov	r0, r4
   1d54c:	e3a0102c 	mov	r1, #44	; 0x2c
   1d550:	eb0036d5 	bl	2b0ac <operator delete(void*, unsigned int)>
   1d554:	e1a00004 	mov	r0, r4
   1d558:	e8bd8010 	pop	{r4, pc}
   1d55c:	00043fd4 	.word	0x00043fd4

0001d560 <CNetConnection::GetForeignIP() const>:
   1d560:	e280000c 	add	r0, r0, #12
   1d564:	ea000ec4 	b	2107c <CIPAddress::Get() const>

0001d568 <CNetConnection::GetOwnPort() const>:
   1d568:	e1d001b6 	ldrh	r0, [r0, #22]
   1d56c:	e3500000 	cmp	r0, #0
   1d570:	0a000000 	beq	1d578 <CNetConnection::GetOwnPort() const+0x10>
   1d574:	e12fff1e 	bx	lr
   1d578:	e92d4010 	push	{r4, lr}
   1d57c:	e3a02044 	mov	r2, #68	; 0x44
   1d580:	e59f1004 	ldr	r1, [pc, #4]	; 1d58c <CNetConnection::GetOwnPort() const+0x24>
   1d584:	e59f0004 	ldr	r0, [pc, #4]	; 1d590 <CNetConnection::GetOwnPort() const+0x28>
   1d588:	eb001c9c 	bl	24800 <assertion_failed>
   1d58c:	00044010 	.word	0x00044010
   1d590:	00044024 	.word	0x00044024

0001d594 <CNetConnection::GetProtocol() const>:
   1d594:	e5900018 	ldr	r0, [r0, #24]
   1d598:	e12fff1e 	bx	lr

0001d59c <CUDPConnection::Accept(CIPAddress*, unsigned short*)>:
   1d59c:	e3e00000 	mvn	r0, #0
   1d5a0:	e12fff1e 	bx	lr

0001d5a4 <CUDPConnection::Close()>:
   1d5a4:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1d5a8:	e3530000 	cmp	r3, #0
   1d5ac:	13a03000 	movne	r3, #0
   1d5b0:	15c03029 	strbne	r3, [r0, #41]	; 0x29
   1d5b4:	11a00003 	movne	r0, r3
   1d5b8:	03e00000 	mvneq	r0, #0
   1d5bc:	e12fff1e 	bx	lr

0001d5c0 <CUDPConnection::SetOptionBroadcast(bool)>:
   1d5c0:	e5c01040 	strb	r1, [r0, #64]	; 0x40
   1d5c4:	e3a00000 	mov	r0, #0
   1d5c8:	e12fff1e 	bx	lr

0001d5cc <CUDPConnection::IsConnected() const>:
   1d5cc:	e3a00000 	mov	r0, #0
   1d5d0:	e12fff1e 	bx	lr

0001d5d4 <CUDPConnection::IsTerminated() const>:
   1d5d4:	e5d00029 	ldrb	r0, [r0, #41]	; 0x29
   1d5d8:	e2200001 	eor	r0, r0, #1
   1d5dc:	e12fff1e 	bx	lr

0001d5e0 <CUDPConnection::Process()>:
   1d5e0:	e12fff1e 	bx	lr

0001d5e4 <CUDPConnection::Send(void const*, unsigned int, int)>:
   1d5e4:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d5e8:	e28db01c 	add	fp, sp, #28
   1d5ec:	e24dd008 	sub	sp, sp, #8
   1d5f0:	e5906044 	ldr	r6, [r0, #68]	; 0x44
   1d5f4:	e3560000 	cmp	r6, #0
   1d5f8:	b3a03000 	movlt	r3, #0
   1d5fc:	b5803044 	strlt	r3, [r0, #68]	; 0x44
   1d600:	ba00004d 	blt	1d73c <CUDPConnection::Send(void const*, unsigned int, int)+0x158>
   1d604:	e5d0c02a 	ldrb	ip, [r0, #42]	; 0x2a
   1d608:	e35c0000 	cmp	ip, #0
   1d60c:	0a000059 	beq	1d778 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d610:	e3d33040 	bics	r3, r3, #64	; 0x40
   1d614:	1a000057 	bne	1d778 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d618:	e59f3198 	ldr	r3, [pc, #408]	; 1d7b8 <CUDPConnection::Send(void const*, unsigned int, int)+0x1d4>
   1d61c:	e242c001 	sub	ip, r2, #1
   1d620:	e15c0003 	cmp	ip, r3
   1d624:	e2827008 	add	r7, r2, #8
   1d628:	8a000052 	bhi	1d778 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d62c:	e5903004 	ldr	r3, [r0, #4]
   1d630:	e1a06002 	mov	r6, r2
   1d634:	e3530000 	cmp	r3, #0
   1d638:	e1a08001 	mov	r8, r1
   1d63c:	e1a04000 	mov	r4, r0
   1d640:	0a000050 	beq	1d788 <CUDPConnection::Send(void const*, unsigned int, int)+0x1a4>
   1d644:	e5d03040 	ldrb	r3, [r0, #64]	; 0x40
   1d648:	e3530000 	cmp	r3, #0
   1d64c:	0a00003d 	beq	1d748 <CUDPConnection::Send(void const*, unsigned int, int)+0x164>
   1d650:	e3a01000 	mov	r1, #0
   1d654:	e1d431b6 	ldrh	r3, [r4, #22]
   1d658:	e1d401b4 	ldrh	r0, [r4, #20]
   1d65c:	e2872007 	add	r2, r7, #7
   1d660:	e3c22007 	bic	r2, r2, #7
   1d664:	e6bf3fb3 	rev16	r3, r3
   1d668:	e04dd002 	sub	sp, sp, r2
   1d66c:	e6ff3073 	uxth	r3, r3
   1d670:	e6bf0fb0 	rev16	r0, r0
   1d674:	e6bf2fb7 	rev16	r2, r7
   1d678:	e28d5008 	add	r5, sp, #8
   1d67c:	e1a0c423 	lsr	ip, r3, #8
   1d680:	e6ff0070 	uxth	r0, r0
   1d684:	e6ff2072 	uxth	r2, r2
   1d688:	e5cd3008 	strb	r3, [sp, #8]
   1d68c:	e1580001 	cmp	r8, r1
   1d690:	e5c5c001 	strb	ip, [r5, #1]
   1d694:	e1a03422 	lsr	r3, r2, #8
   1d698:	e1a0c420 	lsr	ip, r0, #8
   1d69c:	e5c50002 	strb	r0, [r5, #2]
   1d6a0:	e5c5c003 	strb	ip, [r5, #3]
   1d6a4:	e5c52004 	strb	r2, [r5, #4]
   1d6a8:	e5c53005 	strb	r3, [r5, #5]
   1d6ac:	e5c51006 	strb	r1, [r5, #6]
   1d6b0:	e5c51007 	strb	r1, [r5, #7]
   1d6b4:	0a000037 	beq	1d798 <CUDPConnection::Send(void const*, unsigned int, int)+0x1b4>
   1d6b8:	e1a02006 	mov	r2, r6
   1d6bc:	e1a01008 	mov	r1, r8
   1d6c0:	e2850008 	add	r0, r5, #8
   1d6c4:	eb003491 	bl	2a910 <memcpy>
   1d6c8:	e5940004 	ldr	r0, [r4, #4]
   1d6cc:	eb000d52 	bl	20c1c <CNetConfig::GetIPAddress() const>
   1d6d0:	e284801c 	add	r8, r4, #28
   1d6d4:	e1a01000 	mov	r1, r0
   1d6d8:	e284900c 	add	r9, r4, #12
   1d6dc:	e1a00008 	mov	r0, r8
   1d6e0:	eb000fde 	bl	21660 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1d6e4:	e1a00008 	mov	r0, r8
   1d6e8:	e1a01009 	mov	r1, r9
   1d6ec:	eb000fdf 	bl	21670 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1d6f0:	e1a02007 	mov	r2, r7
   1d6f4:	e1a01005 	mov	r1, r5
   1d6f8:	e1a00008 	mov	r0, r8
   1d6fc:	eb001007 	bl	21720 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d700:	e594c008 	ldr	ip, [r4, #8]
   1d704:	e1a03420 	lsr	r3, r0, #8
   1d708:	e35c0000 	cmp	ip, #0
   1d70c:	e5c50006 	strb	r0, [r5, #6]
   1d710:	e5c53007 	strb	r3, [r5, #7]
   1d714:	0a000023 	beq	1d7a8 <CUDPConnection::Send(void const*, unsigned int, int)+0x1c4>
   1d718:	e3a0e011 	mov	lr, #17
   1d71c:	e1a03007 	mov	r3, r7
   1d720:	e1a02005 	mov	r2, r5
   1d724:	e1a01009 	mov	r1, r9
   1d728:	e1a0000c 	mov	r0, ip
   1d72c:	e58de000 	str	lr, [sp]
   1d730:	ebfff568 	bl	1acd8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d734:	e3500000 	cmp	r0, #0
   1d738:	0a00000e 	beq	1d778 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d73c:	e1a00006 	mov	r0, r6
   1d740:	e24bd01c 	sub	sp, fp, #28
   1d744:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d748:	e280500c 	add	r5, r0, #12
   1d74c:	e1a00005 	mov	r0, r5
   1d750:	eb000e7a 	bl	21140 <CIPAddress::IsBroadcast() const>
   1d754:	e3500000 	cmp	r0, #0
   1d758:	1a000006 	bne	1d778 <CUDPConnection::Send(void const*, unsigned int, int)+0x194>
   1d75c:	e5940004 	ldr	r0, [r4, #4]
   1d760:	eb000d37 	bl	20c44 <CNetConfig::GetBroadcastAddress() const>
   1d764:	e1a01000 	mov	r1, r0
   1d768:	e1a00005 	mov	r0, r5
   1d76c:	eb000d9d 	bl	20de8 <CIPAddress::operator==(CIPAddress const&) const>
   1d770:	e3500000 	cmp	r0, #0
   1d774:	0affffb5 	beq	1d650 <CUDPConnection::Send(void const*, unsigned int, int)+0x6c>
   1d778:	e3e06000 	mvn	r6, #0
   1d77c:	e1a00006 	mov	r0, r6
   1d780:	e24bd01c 	sub	sp, fp, #28
   1d784:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d788:	e3a0207b 	mov	r2, #123	; 0x7b
   1d78c:	e59f1028 	ldr	r1, [pc, #40]	; 1d7bc <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1d790:	e59f0028 	ldr	r0, [pc, #40]	; 1d7c0 <CUDPConnection::Send(void const*, unsigned int, int)+0x1dc>
   1d794:	eb001c19 	bl	24800 <assertion_failed>
   1d798:	e3a0208b 	mov	r2, #139	; 0x8b
   1d79c:	e59f1018 	ldr	r1, [pc, #24]	; 1d7bc <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1d7a0:	e59f001c 	ldr	r0, [pc, #28]	; 1d7c4 <CUDPConnection::Send(void const*, unsigned int, int)+0x1e0>
   1d7a4:	eb001c15 	bl	24800 <assertion_failed>
   1d7a8:	e3a02093 	mov	r2, #147	; 0x93
   1d7ac:	e59f1008 	ldr	r1, [pc, #8]	; 1d7bc <CUDPConnection::Send(void const*, unsigned int, int)+0x1d8>
   1d7b0:	e59f0010 	ldr	r0, [pc, #16]	; 1d7c8 <CUDPConnection::Send(void const*, unsigned int, int)+0x1e4>
   1d7b4:	eb001c11 	bl	24800 <assertion_failed>
   1d7b8:	00000637 	.word	0x00000637
   1d7bc:	00044078 	.word	0x00044078
   1d7c0:	00043980 	.word	0x00043980
   1d7c4:	000439fc 	.word	0x000439fc
   1d7c8:	00043994 	.word	0x00043994

0001d7cc <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1d7cc:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   1d7d0:	e28db018 	add	fp, sp, #24
   1d7d4:	e24dd00c 	sub	sp, sp, #12
   1d7d8:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   1d7dc:	e1a04000 	mov	r4, r0
   1d7e0:	e35c0000 	cmp	ip, #0
   1d7e4:	b3a03000 	movlt	r3, #0
   1d7e8:	e1db60b8 	ldrh	r6, [fp, #8]
   1d7ec:	b5803044 	strlt	r3, [r0, #68]	; 0x44
   1d7f0:	ba00004c 	blt	1d928 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x15c>
   1d7f4:	e5d0c02a 	ldrb	ip, [r0, #42]	; 0x2a
   1d7f8:	e35c0000 	cmp	ip, #0
   1d7fc:	1a000054 	bne	1d954 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x188>
   1d800:	e1a0e003 	mov	lr, r3
   1d804:	e3de3040 	bics	r3, lr, #64	; 0x40
   1d808:	1a00004d 	bne	1d944 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1d80c:	e1a05002 	mov	r5, r2
   1d810:	e59f31a8 	ldr	r3, [pc, #424]	; 1d9c0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f4>
   1d814:	e2422001 	sub	r2, r2, #1
   1d818:	e1520003 	cmp	r2, r3
   1d81c:	e2858008 	add	r8, r5, #8
   1d820:	8a000047 	bhi	1d944 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1d824:	e5903004 	ldr	r3, [r0, #4]
   1d828:	e3530000 	cmp	r3, #0
   1d82c:	0a00004f 	beq	1d970 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1a4>
   1d830:	e5d03040 	ldrb	r3, [r0, #64]	; 0x40
   1d834:	e1a07001 	mov	r7, r1
   1d838:	e3530000 	cmp	r3, #0
   1d83c:	0a00003c 	beq	1d934 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x168>
   1d840:	e3a00000 	mov	r0, #0
   1d844:	e1d411b6 	ldrh	r1, [r4, #22]
   1d848:	e2883007 	add	r3, r8, #7
   1d84c:	e3c33007 	bic	r3, r3, #7
   1d850:	e04dd003 	sub	sp, sp, r3
   1d854:	e6bf6fb6 	rev16	r6, r6
   1d858:	e6bf1fb1 	rev16	r1, r1
   1d85c:	e6bf3fb8 	rev16	r3, r8
   1d860:	e6ff2076 	uxth	r2, r6
   1d864:	e6ff1071 	uxth	r1, r1
   1d868:	e28d6008 	add	r6, sp, #8
   1d86c:	e6ff3073 	uxth	r3, r3
   1d870:	e5cd1008 	strb	r1, [sp, #8]
   1d874:	e1a0c421 	lsr	ip, r1, #8
   1d878:	e5c62002 	strb	r2, [r6, #2]
   1d87c:	e1a01422 	lsr	r1, r2, #8
   1d880:	e1570000 	cmp	r7, r0
   1d884:	e1a02423 	lsr	r2, r3, #8
   1d888:	e5c6c001 	strb	ip, [r6, #1]
   1d88c:	e5c61003 	strb	r1, [r6, #3]
   1d890:	e5c63004 	strb	r3, [r6, #4]
   1d894:	e5c62005 	strb	r2, [r6, #5]
   1d898:	e5c60006 	strb	r0, [r6, #6]
   1d89c:	e5c60007 	strb	r0, [r6, #7]
   1d8a0:	0a000036 	beq	1d980 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1b4>
   1d8a4:	e1a02005 	mov	r2, r5
   1d8a8:	e1a01007 	mov	r1, r7
   1d8ac:	e2860008 	add	r0, r6, #8
   1d8b0:	eb003416 	bl	2a910 <memcpy>
   1d8b4:	e5940004 	ldr	r0, [r4, #4]
   1d8b8:	eb000cd7 	bl	20c1c <CNetConfig::GetIPAddress() const>
   1d8bc:	e284701c 	add	r7, r4, #28
   1d8c0:	e1a01000 	mov	r1, r0
   1d8c4:	e1a00007 	mov	r0, r7
   1d8c8:	eb000f64 	bl	21660 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1d8cc:	e59b1004 	ldr	r1, [fp, #4]
   1d8d0:	e1a00007 	mov	r0, r7
   1d8d4:	eb000f65 	bl	21670 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1d8d8:	e1a01006 	mov	r1, r6
   1d8dc:	e1a02008 	mov	r2, r8
   1d8e0:	e1a00007 	mov	r0, r7
   1d8e4:	eb000f8d 	bl	21720 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1d8e8:	e5941008 	ldr	r1, [r4, #8]
   1d8ec:	e1a03420 	lsr	r3, r0, #8
   1d8f0:	e3510000 	cmp	r1, #0
   1d8f4:	e5c60006 	strb	r0, [r6, #6]
   1d8f8:	e5c63007 	strb	r3, [r6, #7]
   1d8fc:	0a00002b 	beq	1d9b0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1e4>
   1d900:	e3a0c011 	mov	ip, #17
   1d904:	e1a00001 	mov	r0, r1
   1d908:	e1a03008 	mov	r3, r8
   1d90c:	e1a02006 	mov	r2, r6
   1d910:	e58dc000 	str	ip, [sp]
   1d914:	e59b1004 	ldr	r1, [fp, #4]
   1d918:	ebfff4ee 	bl	1acd8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1d91c:	e3500000 	cmp	r0, #0
   1d920:	0a000007 	beq	1d944 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1d924:	e1a0c005 	mov	ip, r5
   1d928:	e1a0000c 	mov	r0, ip
   1d92c:	e24bd018 	sub	sp, fp, #24
   1d930:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d934:	e59b0004 	ldr	r0, [fp, #4]
   1d938:	eb000e00 	bl	21140 <CIPAddress::IsBroadcast() const>
   1d93c:	e3500000 	cmp	r0, #0
   1d940:	0a000012 	beq	1d990 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1c4>
   1d944:	e3e0c000 	mvn	ip, #0
   1d948:	e1a0000c 	mov	r0, ip
   1d94c:	e24bd018 	sub	sp, fp, #24
   1d950:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d954:	e590c000 	ldr	ip, [r0]
   1d958:	e59c4014 	ldr	r4, [ip, #20]
   1d95c:	e12fff34 	blx	r4
   1d960:	e1a0c000 	mov	ip, r0
   1d964:	e1a0000c 	mov	r0, ip
   1d968:	e24bd018 	sub	sp, fp, #24
   1d96c:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1d970:	e3a020e4 	mov	r2, #228	; 0xe4
   1d974:	e59f1048 	ldr	r1, [pc, #72]	; 1d9c4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1d978:	e59f0048 	ldr	r0, [pc, #72]	; 1d9c8 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1fc>
   1d97c:	eb001b9f 	bl	24800 <assertion_failed>
   1d980:	e3a020f4 	mov	r2, #244	; 0xf4
   1d984:	e59f1038 	ldr	r1, [pc, #56]	; 1d9c4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1d988:	e59f003c 	ldr	r0, [pc, #60]	; 1d9cc <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x200>
   1d98c:	eb001b9b 	bl	24800 <assertion_failed>
   1d990:	e5940004 	ldr	r0, [r4, #4]
   1d994:	eb000caa 	bl	20c44 <CNetConfig::GetBroadcastAddress() const>
   1d998:	e1a01000 	mov	r1, r0
   1d99c:	e59b0004 	ldr	r0, [fp, #4]
   1d9a0:	eb000d10 	bl	20de8 <CIPAddress::operator==(CIPAddress const&) const>
   1d9a4:	e3500000 	cmp	r0, #0
   1d9a8:	1affffe5 	bne	1d944 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x178>
   1d9ac:	eaffffa3 	b	1d840 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x74>
   1d9b0:	e3a020fc 	mov	r2, #252	; 0xfc
   1d9b4:	e59f1008 	ldr	r1, [pc, #8]	; 1d9c4 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1f8>
   1d9b8:	e59f0010 	ldr	r0, [pc, #16]	; 1d9d0 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x204>
   1d9bc:	eb001b8f 	bl	24800 <assertion_failed>
   1d9c0:	00000637 	.word	0x00000637
   1d9c4:	00044078 	.word	0x00044078
   1d9c8:	00043980 	.word	0x00043980
   1d9cc:	000439fc 	.word	0x000439fc
   1d9d0:	00043994 	.word	0x00043994

0001d9d4 <CUDPConnection::Receive(void*, int)>:
   1d9d4:	e5903044 	ldr	r3, [r0, #68]	; 0x44
   1d9d8:	e3530000 	cmp	r3, #0
   1d9dc:	ba000028 	blt	1da84 <CUDPConnection::Receive(void*, int)+0xb0>
   1d9e0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1d9e4:	e1a08002 	mov	r8, r2
   1d9e8:	e1a04001 	mov	r4, r1
   1d9ec:	e1a05000 	mov	r5, r0
   1d9f0:	e24dd00c 	sub	sp, sp, #12
   1d9f4:	e280602c 	add	r6, r0, #44	; 0x2c
   1d9f8:	e2807038 	add	r7, r0, #56	; 0x38
   1d9fc:	e3540000 	cmp	r4, #0
   1da00:	0a00001b 	beq	1da74 <CUDPConnection::Receive(void*, int)+0xa0>
   1da04:	e28d2004 	add	r2, sp, #4
   1da08:	e1a01004 	mov	r1, r4
   1da0c:	e1a00006 	mov	r0, r6
   1da10:	eb000eae 	bl	214d0 <CNetQueue::Dequeue(void*, void**)>
   1da14:	e2509000 	subs	r9, r0, #0
   1da18:	1a00000c 	bne	1da50 <CUDPConnection::Receive(void*, int)+0x7c>
   1da1c:	e3580040 	cmp	r8, #64	; 0x40
   1da20:	0a00001b 	beq	1da94 <CUDPConnection::Receive(void*, int)+0xc0>
   1da24:	e1a00007 	mov	r0, r7
   1da28:	eb001aee 	bl	245e8 <CSynchronizationEvent::Clear()>
   1da2c:	e1a00007 	mov	r0, r7
   1da30:	eb001afd 	bl	2462c <CSynchronizationEvent::Wait()>
   1da34:	e5953044 	ldr	r3, [r5, #68]	; 0x44
   1da38:	e3530000 	cmp	r3, #0
   1da3c:	aaffffee 	bge	1d9fc <CUDPConnection::Receive(void*, int)+0x28>
   1da40:	e5859044 	str	r9, [r5, #68]	; 0x44
   1da44:	e1a00003 	mov	r0, r3
   1da48:	e28dd00c 	add	sp, sp, #12
   1da4c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1da50:	e59d0004 	ldr	r0, [sp, #4]
   1da54:	e3500000 	cmp	r0, #0
   1da58:	0a00000f 	beq	1da9c <CUDPConnection::Receive(void*, int)+0xc8>
   1da5c:	e3a01006 	mov	r1, #6
   1da60:	eb003591 	bl	2b0ac <operator delete(void*, unsigned int)>
   1da64:	e1a03009 	mov	r3, r9
   1da68:	e1a00003 	mov	r0, r3
   1da6c:	e28dd00c 	add	sp, sp, #12
   1da70:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1da74:	e3a020a7 	mov	r2, #167	; 0xa7
   1da78:	e59f102c 	ldr	r1, [pc, #44]	; 1daac <CUDPConnection::Receive(void*, int)+0xd8>
   1da7c:	e59f002c 	ldr	r0, [pc, #44]	; 1dab0 <CUDPConnection::Receive(void*, int)+0xdc>
   1da80:	eb001b5e 	bl	24800 <assertion_failed>
   1da84:	e3a02000 	mov	r2, #0
   1da88:	e5802044 	str	r2, [r0, #68]	; 0x44
   1da8c:	e1a00003 	mov	r0, r3
   1da90:	e12fff1e 	bx	lr
   1da94:	e1a03009 	mov	r3, r9
   1da98:	eaffffe9 	b	1da44 <CUDPConnection::Receive(void*, int)+0x70>
   1da9c:	e3a020bf 	mov	r2, #191	; 0xbf
   1daa0:	e59f1004 	ldr	r1, [pc, #4]	; 1daac <CUDPConnection::Receive(void*, int)+0xd8>
   1daa4:	e59f0008 	ldr	r0, [pc, #8]	; 1dab4 <CUDPConnection::Receive(void*, int)+0xe0>
   1daa8:	eb001b54 	bl	24800 <assertion_failed>
   1daac:	00044078 	.word	0x00044078
   1dab0:	00040b94 	.word	0x00040b94
   1dab4:	000439fc 	.word	0x000439fc

0001dab8 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1dab8:	e590c044 	ldr	ip, [r0, #68]	; 0x44
   1dabc:	e35c0000 	cmp	ip, #0
   1dac0:	ba00002c 	blt	1db78 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xc0>
   1dac4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dac8:	e1a09003 	mov	r9, r3
   1dacc:	e1a08002 	mov	r8, r2
   1dad0:	e1a04001 	mov	r4, r1
   1dad4:	e1a05000 	mov	r5, r0
   1dad8:	e24dd008 	sub	sp, sp, #8
   1dadc:	e280602c 	add	r6, r0, #44	; 0x2c
   1dae0:	e2807038 	add	r7, r0, #56	; 0x38
   1dae4:	e3540000 	cmp	r4, #0
   1dae8:	0a00001e 	beq	1db68 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xb0>
   1daec:	e28d2004 	add	r2, sp, #4
   1daf0:	e1a01004 	mov	r1, r4
   1daf4:	e1a00006 	mov	r0, r6
   1daf8:	eb000e74 	bl	214d0 <CNetQueue::Dequeue(void*, void**)>
   1dafc:	e250a000 	subs	sl, r0, #0
   1db00:	1a00000a 	bne	1db30 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x78>
   1db04:	e3580040 	cmp	r8, #64	; 0x40
   1db08:	0a00001e 	beq	1db88 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xd0>
   1db0c:	e1a00007 	mov	r0, r7
   1db10:	eb001ab4 	bl	245e8 <CSynchronizationEvent::Clear()>
   1db14:	e1a00007 	mov	r0, r7
   1db18:	eb001ac3 	bl	2462c <CSynchronizationEvent::Wait()>
   1db1c:	e595c044 	ldr	ip, [r5, #68]	; 0x44
   1db20:	e35c0000 	cmp	ip, #0
   1db24:	aaffffee 	bge	1dae4 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x2c>
   1db28:	e585a044 	str	sl, [r5, #68]	; 0x44
   1db2c:	ea00000a 	b	1db5c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xa4>
   1db30:	e59d4004 	ldr	r4, [sp, #4]
   1db34:	e3540000 	cmp	r4, #0
   1db38:	0a00001b 	beq	1dbac <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xf4>
   1db3c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1db40:	e3590000 	cmp	r9, #0
   1db44:	13530000 	cmpne	r3, #0
   1db48:	1a000010 	bne	1db90 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xd8>
   1db4c:	e1a00004 	mov	r0, r4
   1db50:	e3a01006 	mov	r1, #6
   1db54:	eb003554 	bl	2b0ac <operator delete(void*, unsigned int)>
   1db58:	e1a0c00a 	mov	ip, sl
   1db5c:	e1a0000c 	mov	r0, ip
   1db60:	e28dd008 	add	sp, sp, #8
   1db64:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1db68:	e3a02e11 	mov	r2, #272	; 0x110
   1db6c:	e59f1048 	ldr	r1, [pc, #72]	; 1dbbc <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x104>
   1db70:	e59f0048 	ldr	r0, [pc, #72]	; 1dbc0 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x108>
   1db74:	eb001b21 	bl	24800 <assertion_failed>
   1db78:	e3a03000 	mov	r3, #0
   1db7c:	e5803044 	str	r3, [r0, #68]	; 0x44
   1db80:	e1a0000c 	mov	r0, ip
   1db84:	e12fff1e 	bx	lr
   1db88:	e1a0c00a 	mov	ip, sl
   1db8c:	eafffff2 	b	1db5c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xa4>
   1db90:	e1a00009 	mov	r0, r9
   1db94:	e1a01004 	mov	r1, r4
   1db98:	eb000d02 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   1db9c:	e1d430b4 	ldrh	r3, [r4, #4]
   1dba0:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1dba4:	e1c230b0 	strh	r3, [r2]
   1dba8:	eaffffe7 	b	1db4c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x94>
   1dbac:	e3a02f4a 	mov	r2, #296	; 0x128
   1dbb0:	e59f1004 	ldr	r1, [pc, #4]	; 1dbbc <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x104>
   1dbb4:	e59f0008 	ldr	r0, [pc, #8]	; 1dbc4 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x10c>
   1dbb8:	eb001b10 	bl	24800 <assertion_failed>
   1dbbc:	00044078 	.word	0x00044078
   1dbc0:	00040b94 	.word	0x00040b94
   1dbc4:	000439fc 	.word	0x000439fc

0001dbc8 <CUDPConnection::Connect()>:
   1dbc8:	e5d03029 	ldrb	r3, [r0, #41]	; 0x29
   1dbcc:	e3530000 	cmp	r3, #0
   1dbd0:	0a000001 	beq	1dbdc <CUDPConnection::Connect()+0x14>
   1dbd4:	e3a00000 	mov	r0, #0
   1dbd8:	e12fff1e 	bx	lr
   1dbdc:	e92d4010 	push	{r4, lr}
   1dbe0:	e3a02049 	mov	r2, #73	; 0x49
   1dbe4:	e59f1004 	ldr	r1, [pc, #4]	; 1dbf0 <CUDPConnection::Connect()+0x28>
   1dbe8:	e59f0004 	ldr	r0, [pc, #4]	; 1dbf4 <CUDPConnection::Connect()+0x2c>
   1dbec:	eb001b03 	bl	24800 <assertion_failed>
   1dbf0:	00044078 	.word	0x00044078
   1dbf4:	0004408c 	.word	0x0004408c

0001dbf8 <CUDPConnection::~CUDPConnection()>:
   1dbf8:	e5d02029 	ldrb	r2, [r0, #41]	; 0x29
   1dbfc:	e59f3040 	ldr	r3, [pc, #64]	; 1dc44 <CUDPConnection::~CUDPConnection()+0x4c>
   1dc00:	e3520000 	cmp	r2, #0
   1dc04:	e92d4010 	push	{r4, lr}
   1dc08:	e5803000 	str	r3, [r0]
   1dc0c:	1a000008 	bne	1dc34 <CUDPConnection::~CUDPConnection()+0x3c>
   1dc10:	e1a04000 	mov	r4, r0
   1dc14:	e2800038 	add	r0, r0, #56	; 0x38
   1dc18:	eb001a65 	bl	245b4 <CSynchronizationEvent::~CSynchronizationEvent()>
   1dc1c:	e284002c 	add	r0, r4, #44	; 0x2c
   1dc20:	eb000ddf 	bl	213a4 <CNetQueue::~CNetQueue()>
   1dc24:	e1a00004 	mov	r0, r4
   1dc28:	ebfffe2f 	bl	1d4ec <CNetConnection::~CNetConnection()>
   1dc2c:	e1a00004 	mov	r0, r4
   1dc30:	e8bd8010 	pop	{r4, pc}
   1dc34:	e3a02044 	mov	r2, #68	; 0x44
   1dc38:	e59f1008 	ldr	r1, [pc, #8]	; 1dc48 <CUDPConnection::~CUDPConnection()+0x50>
   1dc3c:	e59f0008 	ldr	r0, [pc, #8]	; 1dc4c <CUDPConnection::~CUDPConnection()+0x54>
   1dc40:	eb001aee 	bl	24800 <assertion_failed>
   1dc44:	0004403c 	.word	0x0004403c
   1dc48:	00044078 	.word	0x00044078
   1dc4c:	00044094 	.word	0x00044094

0001dc50 <CUDPConnection::~CUDPConnection()>:
   1dc50:	e92d4010 	push	{r4, lr}
   1dc54:	e1a04000 	mov	r4, r0
   1dc58:	ebffffe6 	bl	1dbf8 <CUDPConnection::~CUDPConnection()>
   1dc5c:	e1a00004 	mov	r0, r4
   1dc60:	e3a01048 	mov	r1, #72	; 0x48
   1dc64:	eb003510 	bl	2b0ac <operator delete(void*, unsigned int)>
   1dc68:	e1a00004 	mov	r0, r4
   1dc6c:	e8bd8010 	pop	{r4, pc}

0001dc70 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1dc70:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dc74:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1dc78:	e35c0011 	cmp	ip, #17
   1dc7c:	0a000001 	beq	1dc88 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1dc80:	e3a00000 	mov	r0, #0
   1dc84:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dc88:	e3520008 	cmp	r2, #8
   1dc8c:	9a000055 	bls	1dde8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x178>
   1dc90:	e5d1c002 	ldrb	ip, [r1, #2]
   1dc94:	e5d14003 	ldrb	r4, [r1, #3]
   1dc98:	e1d0e1b6 	ldrh	lr, [r0, #22]
   1dc9c:	e18cc404 	orr	ip, ip, r4, lsl #8
   1dca0:	e6bfcfbc 	rev16	ip, ip
   1dca4:	e6ffc07c 	uxth	ip, ip
   1dca8:	e15e000c 	cmp	lr, ip
   1dcac:	1afffff3 	bne	1dc80 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1dcb0:	e1a06003 	mov	r6, r3
   1dcb4:	e5903004 	ldr	r3, [r0, #4]
   1dcb8:	e1a05002 	mov	r5, r2
   1dcbc:	e3530000 	cmp	r3, #0
   1dcc0:	e1a04001 	mov	r4, r1
   1dcc4:	e1a08000 	mov	r8, r0
   1dcc8:	0a000054 	beq	1de20 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1b0>
   1dccc:	e5d17000 	ldrb	r7, [r1]
   1dcd0:	e5d12001 	ldrb	r2, [r1, #1]
   1dcd4:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1dcd8:	e1877402 	orr	r7, r7, r2, lsl #8
   1dcdc:	e6bf7fb7 	rev16	r7, r7
   1dce0:	e3530000 	cmp	r3, #0
   1dce4:	e6ff3077 	uxth	r3, r7
   1dce8:	0a000013 	beq	1dd3c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcc>
   1dcec:	e1d021b4 	ldrh	r2, [r0, #20]
   1dcf0:	e1520003 	cmp	r2, r3
   1dcf4:	1affffe1 	bne	1dc80 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1dcf8:	e280900c 	add	r9, r0, #12
   1dcfc:	e1a00009 	mov	r0, r9
   1dd00:	e1a01006 	mov	r1, r6
   1dd04:	eb000c4f 	bl	20e48 <CIPAddress::operator!=(CIPAddress const&) const>
   1dd08:	e3500000 	cmp	r0, #0
   1dd0c:	0a00000a 	beq	1dd3c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcc>
   1dd10:	e1a00009 	mov	r0, r9
   1dd14:	eb000d09 	bl	21140 <CIPAddress::IsBroadcast() const>
   1dd18:	e3500000 	cmp	r0, #0
   1dd1c:	1a000006 	bne	1dd3c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcc>
   1dd20:	e5980004 	ldr	r0, [r8, #4]
   1dd24:	eb000bc6 	bl	20c44 <CNetConfig::GetBroadcastAddress() const>
   1dd28:	e1a01000 	mov	r1, r0
   1dd2c:	e1a00009 	mov	r0, r9
   1dd30:	eb000c44 	bl	20e48 <CIPAddress::operator!=(CIPAddress const&) const>
   1dd34:	e3500000 	cmp	r0, #0
   1dd38:	1affffd0 	bne	1dc80 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   1dd3c:	e5d43004 	ldrb	r3, [r4, #4]
   1dd40:	e5d42005 	ldrb	r2, [r4, #5]
   1dd44:	e1833402 	orr	r3, r3, r2, lsl #8
   1dd48:	e6bf3fb3 	rev16	r3, r3
   1dd4c:	e6ff3073 	uxth	r3, r3
   1dd50:	e1550003 	cmp	r5, r3
   1dd54:	3a000023 	bcc	1dde8 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x178>
   1dd58:	e5d43006 	ldrb	r3, [r4, #6]
   1dd5c:	e5d42007 	ldrb	r2, [r4, #7]
   1dd60:	e1933402 	orrs	r3, r3, r2, lsl #8
   1dd64:	1a000012 	bne	1ddb4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x144>
   1dd68:	e5d83040 	ldrb	r3, [r8, #64]	; 0x40
   1dd6c:	e3530000 	cmp	r3, #0
   1dd70:	0a00001e 	beq	1ddf0 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x180>
   1dd74:	e3a00006 	mov	r0, #6
   1dd78:	eb0034bd 	bl	2b074 <operator new(unsigned int)>
   1dd7c:	e1a09000 	mov	r9, r0
   1dd80:	e1a01000 	mov	r1, r0
   1dd84:	e1a00006 	mov	r0, r6
   1dd88:	eb000cc7 	bl	210ac <CIPAddress::CopyTo(unsigned char*) const>
   1dd8c:	e288002c 	add	r0, r8, #44	; 0x2c
   1dd90:	e1a03009 	mov	r3, r9
   1dd94:	e2452008 	sub	r2, r5, #8
   1dd98:	e2841008 	add	r1, r4, #8
   1dd9c:	e1c970b4 	strh	r7, [r9, #4]
   1dda0:	eb000d84 	bl	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1dda4:	e2880038 	add	r0, r8, #56	; 0x38
   1dda8:	eb001a11 	bl	245f4 <CSynchronizationEvent::Set()>
   1ddac:	e3a00001 	mov	r0, #1
   1ddb0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ddb4:	e288901c 	add	r9, r8, #28
   1ddb8:	e1a00009 	mov	r0, r9
   1ddbc:	e1a01006 	mov	r1, r6
   1ddc0:	eb000e26 	bl	21660 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   1ddc4:	e59d1020 	ldr	r1, [sp, #32]
   1ddc8:	e1a00009 	mov	r0, r9
   1ddcc:	eb000e27 	bl	21670 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1ddd0:	e1a02005 	mov	r2, r5
   1ddd4:	e1a01004 	mov	r1, r4
   1ddd8:	e1a00009 	mov	r0, r9
   1dddc:	eb000e4f 	bl	21720 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1dde0:	e3500000 	cmp	r0, #0
   1dde4:	0affffdf 	beq	1dd68 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xf8>
   1dde8:	e3e00000 	mvn	r0, #0
   1ddec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ddf0:	e59d0020 	ldr	r0, [sp, #32]
   1ddf4:	eb000cd1 	bl	21140 <CIPAddress::IsBroadcast() const>
   1ddf8:	e3500000 	cmp	r0, #0
   1ddfc:	1affffea 	bne	1ddac <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x13c>
   1de00:	e5980004 	ldr	r0, [r8, #4]
   1de04:	eb000b8e 	bl	20c44 <CNetConfig::GetBroadcastAddress() const>
   1de08:	e1a01000 	mov	r1, r0
   1de0c:	e59d0020 	ldr	r0, [sp, #32]
   1de10:	eb000bf4 	bl	20de8 <CIPAddress::operator==(CIPAddress const&) const>
   1de14:	e3500000 	cmp	r0, #0
   1de18:	1affffe3 	bne	1ddac <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x13c>
   1de1c:	eaffffd4 	b	1dd74 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x104>
   1de20:	e59f2008 	ldr	r2, [pc, #8]	; 1de30 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c0>
   1de24:	e59f1008 	ldr	r1, [pc, #8]	; 1de34 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c4>
   1de28:	e59f0008 	ldr	r0, [pc, #8]	; 1de38 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c8>
   1de2c:	eb001a73 	bl	24800 <assertion_failed>
   1de30:	0000015e 	.word	0x0000015e
   1de34:	00044078 	.word	0x00044078
   1de38:	00043980 	.word	0x00043980

0001de3c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1de3c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1de40:	e59d1020 	ldr	r1, [sp, #32]
   1de44:	e1dd71b8 	ldrh	r7, [sp, #24]
   1de48:	e3510011 	cmp	r1, #17
   1de4c:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1de50:	0a000001 	beq	1de5c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x20>
   1de54:	e3a00000 	mov	r0, #0
   1de58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1de5c:	e1d011b6 	ldrh	r1, [r0, #22]
   1de60:	e151000c 	cmp	r1, ip
   1de64:	1afffffa 	bne	1de54 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1de68:	e1a04000 	mov	r4, r0
   1de6c:	e5900004 	ldr	r0, [r0, #4]
   1de70:	e1a05003 	mov	r5, r3
   1de74:	e3500000 	cmp	r0, #0
   1de78:	e1a06002 	mov	r6, r2
   1de7c:	0a000016 	beq	1dedc <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   1de80:	eb000b65 	bl	20c1c <CNetConfig::GetIPAddress() const>
   1de84:	e1a01000 	mov	r1, r0
   1de88:	e1a00005 	mov	r0, r5
   1de8c:	eb000bed 	bl	20e48 <CIPAddress::operator!=(CIPAddress const&) const>
   1de90:	e3500000 	cmp	r0, #0
   1de94:	1affffee 	bne	1de54 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1de98:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1de9c:	e3530000 	cmp	r3, #0
   1dea0:	0a000007 	beq	1dec4 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x88>
   1dea4:	e1d431b4 	ldrh	r3, [r4, #20]
   1dea8:	e1530007 	cmp	r3, r7
   1deac:	1affffe8 	bne	1de54 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1deb0:	e1a01006 	mov	r1, r6
   1deb4:	e284000c 	add	r0, r4, #12
   1deb8:	eb000be2 	bl	20e48 <CIPAddress::operator!=(CIPAddress const&) const>
   1debc:	e3500000 	cmp	r0, #0
   1dec0:	1affffe3 	bne	1de54 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1dec4:	e3e03000 	mvn	r3, #0
   1dec8:	e2840038 	add	r0, r4, #56	; 0x38
   1decc:	e5843044 	str	r3, [r4, #68]	; 0x44
   1ded0:	eb0019c7 	bl	245f4 <CSynchronizationEvent::Set()>
   1ded4:	e3a00001 	mov	r0, #1
   1ded8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1dedc:	e59f2008 	ldr	r2, [pc, #8]	; 1deec <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb0>
   1dee0:	e59f1008 	ldr	r1, [pc, #8]	; 1def0 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb4>
   1dee4:	e59f0008 	ldr	r0, [pc, #8]	; 1def4 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xb8>
   1dee8:	eb001a44 	bl	24800 <assertion_failed>
   1deec:	000001a7 	.word	0x000001a7
   1def0:	00044078 	.word	0x00044078
   1def4:	00043980 	.word	0x00043980

0001def8 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1def8:	e92d4010 	push	{r4, lr}
   1defc:	e3a04011 	mov	r4, #17
   1df00:	e24dd010 	sub	sp, sp, #16
   1df04:	e1dde1b8 	ldrh	lr, [sp, #24]
   1df08:	e1ddc1bc 	ldrh	ip, [sp, #28]
   1df0c:	e58de000 	str	lr, [sp]
   1df10:	e58dc004 	str	ip, [sp, #4]
   1df14:	e58d4008 	str	r4, [sp, #8]
   1df18:	e1a04000 	mov	r4, r0
   1df1c:	ebfffd20 	bl	1d3a4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1df20:	e3a03001 	mov	r3, #1
   1df24:	e59f2034 	ldr	r2, [pc, #52]	; 1df60 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x68>
   1df28:	e5c43029 	strb	r3, [r4, #41]	; 0x29
   1df2c:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1df30:	e5842000 	str	r2, [r4]
   1df34:	e284002c 	add	r0, r4, #44	; 0x2c
   1df38:	eb000cdf 	bl	212bc <CNetQueue::CNetQueue()>
   1df3c:	e2840038 	add	r0, r4, #56	; 0x38
   1df40:	e3a01000 	mov	r1, #0
   1df44:	eb001996 	bl	245a4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1df48:	e3a03000 	mov	r3, #0
   1df4c:	e1a00004 	mov	r0, r4
   1df50:	e5c43040 	strb	r3, [r4, #64]	; 0x40
   1df54:	e5843044 	str	r3, [r4, #68]	; 0x44
   1df58:	e28dd010 	add	sp, sp, #16
   1df5c:	e8bd8010 	pop	{r4, pc}
   1df60:	0004403c 	.word	0x0004403c

0001df64 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1df64:	e3a0c011 	mov	ip, #17
   1df68:	e92d4030 	push	{r4, r5, lr}
   1df6c:	e24dd00c 	sub	sp, sp, #12
   1df70:	e58dc000 	str	ip, [sp]
   1df74:	e1a04000 	mov	r4, r0
   1df78:	e3a05000 	mov	r5, #0
   1df7c:	ebfffd34 	bl	1d454 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1df80:	e3a02001 	mov	r2, #1
   1df84:	e59f3030 	ldr	r3, [pc, #48]	; 1dfbc <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0x58>
   1df88:	e5c42029 	strb	r2, [r4, #41]	; 0x29
   1df8c:	e5843000 	str	r3, [r4]
   1df90:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1df94:	e284002c 	add	r0, r4, #44	; 0x2c
   1df98:	eb000cc7 	bl	212bc <CNetQueue::CNetQueue()>
   1df9c:	e1a01005 	mov	r1, r5
   1dfa0:	e2840038 	add	r0, r4, #56	; 0x38
   1dfa4:	eb00197e 	bl	245a4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1dfa8:	e1a00004 	mov	r0, r4
   1dfac:	e5c45040 	strb	r5, [r4, #64]	; 0x40
   1dfb0:	e5845044 	str	r5, [r4, #68]	; 0x44
   1dfb4:	e28dd00c 	add	sp, sp, #12
   1dfb8:	e8bd8030 	pop	{r4, r5, pc}
   1dfbc:	0004403c 	.word	0x0004403c

0001dfc0 <CTCPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   1dfc0:	e590c000 	ldr	ip, [r0]
   1dfc4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1dfc8:	e59ce014 	ldr	lr, [ip, #20]
   1dfcc:	e1a0c00e 	mov	ip, lr
   1dfd0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1dfd4:	e12fff1c 	bx	ip

0001dfd8 <CTCPConnection::SetOptionBroadcast(bool)>:
   1dfd8:	e3a00000 	mov	r0, #0
   1dfdc:	e12fff1e 	bx	lr

0001dfe0 <CTCPConnection::IsConnected() const>:
   1dfe0:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1dfe4:	e3530002 	cmp	r3, #2
   1dfe8:	da000003 	ble	1dffc <CTCPConnection::IsConnected() const+0x1c>
   1dfec:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1dff0:	e250000a 	subs	r0, r0, #10
   1dff4:	13a00001 	movne	r0, #1
   1dff8:	e12fff1e 	bx	lr
   1dffc:	e3a00000 	mov	r0, #0
   1e000:	e12fff1e 	bx	lr

0001e004 <CTCPConnection::IsTerminated() const>:
   1e004:	e5d0002a 	ldrb	r0, [r0, #42]	; 0x2a
   1e008:	e16f0f10 	clz	r0, r0
   1e00c:	e1a002a0 	lsr	r0, r0, #5
   1e010:	e12fff1e 	bx	lr

0001e014 <CTCPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   1e014:	e590c000 	ldr	ip, [r0]
   1e018:	e92d4070 	push	{r4, r5, r6, lr}
   1e01c:	e1a05003 	mov	r5, r3
   1e020:	e59c3018 	ldr	r3, [ip, #24]
   1e024:	e1a06000 	mov	r6, r0
   1e028:	e59d4010 	ldr	r4, [sp, #16]
   1e02c:	e12fff33 	blx	r3
   1e030:	e3500000 	cmp	r0, #0
   1e034:	d8bd8070 	pople	{r4, r5, r6, pc}
   1e038:	e3550000 	cmp	r5, #0
   1e03c:	13540000 	cmpne	r4, #0
   1e040:	13a00001 	movne	r0, #1
   1e044:	03a00000 	moveq	r0, #0
   1e048:	08bd8070 	popeq	{r4, r5, r6, pc}
   1e04c:	e1a00005 	mov	r0, r5
   1e050:	e286100c 	add	r1, r6, #12
   1e054:	eb000be8 	bl	20ffc <CIPAddress::Set(CIPAddress const&)>
   1e058:	e1d631b4 	ldrh	r3, [r6, #20]
   1e05c:	e3a00000 	mov	r0, #0
   1e060:	e1c430b0 	strh	r3, [r4]
   1e064:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e068 <CTCPConnection::Send(void const*, unsigned int, int)>:
   1e068:	e3d3c040 	bics	ip, r3, #64	; 0x40
   1e06c:	1a000040 	bne	1e174 <CTCPConnection::Send(void const*, unsigned int, int)+0x10c>
   1e070:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e074:	e1a04001 	mov	r4, r1
   1e078:	e590102c 	ldr	r1, [r0, #44]	; 0x2c
   1e07c:	e3510000 	cmp	r1, #0
   1e080:	ba000030 	blt	1e148 <CTCPConnection::Send(void const*, unsigned int, int)+0xe0>
   1e084:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1e088:	e6ef1071 	uxtb	r1, r1
   1e08c:	e351000a 	cmp	r1, #10
   1e090:	9a00001c 	bls	1e108 <CTCPConnection::Send(void const*, unsigned int, int)+0xa0>
   1e094:	e3540000 	cmp	r4, #0
   1e098:	e1a08002 	mov	r8, r2
   1e09c:	e1a09000 	mov	r9, r0
   1e0a0:	e1a0a003 	mov	sl, r3
   1e0a4:	0a000029 	beq	1e150 <CTCPConnection::Send(void const*, unsigned int, int)+0xe8>
   1e0a8:	e3520d19 	cmp	r2, #1600	; 0x640
   1e0ac:	9a00002b 	bls	1e160 <CTCPConnection::Send(void const*, unsigned int, int)+0xf8>
   1e0b0:	e1a05002 	mov	r5, r2
   1e0b4:	e3a0b000 	mov	fp, #0
   1e0b8:	e3a07d19 	mov	r7, #1600	; 0x640
   1e0bc:	e2806030 	add	r6, r0, #48	; 0x30
   1e0c0:	e1a01004 	mov	r1, r4
   1e0c4:	e2455d19 	sub	r5, r5, #1600	; 0x640
   1e0c8:	e1a0300b 	mov	r3, fp
   1e0cc:	e1a02007 	mov	r2, r7
   1e0d0:	e1a00006 	mov	r0, r6
   1e0d4:	eb000cb7 	bl	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e0d8:	e3550d19 	cmp	r5, #1600	; 0x640
   1e0dc:	e2844d19 	add	r4, r4, #1600	; 0x640
   1e0e0:	8afffff6 	bhi	1e0c0 <CTCPConnection::Send(void const*, unsigned int, int)+0x58>
   1e0e4:	e1a02005 	mov	r2, r5
   1e0e8:	e1a01004 	mov	r1, r4
   1e0ec:	e1a00006 	mov	r0, r6
   1e0f0:	e3a03000 	mov	r3, #0
   1e0f4:	eb000caf 	bl	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1e0f8:	e31a0040 	tst	sl, #64	; 0x40
   1e0fc:	0a000007 	beq	1e120 <CTCPConnection::Send(void const*, unsigned int, int)+0xb8>
   1e100:	e1a00008 	mov	r0, r8
   1e104:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e108:	e3a0e001 	mov	lr, #1
   1e10c:	e59fc068 	ldr	ip, [pc, #104]	; 1e17c <CTCPConnection::Send(void const*, unsigned int, int)+0x114>
   1e110:	e01c111e 	ands	r1, ip, lr, lsl r1
   1e114:	0affffde 	beq	1e094 <CTCPConnection::Send(void const*, unsigned int, int)+0x2c>
   1e118:	e3e00000 	mvn	r0, #0
   1e11c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e120:	e2894070 	add	r4, r9, #112	; 0x70
   1e124:	e1a00004 	mov	r0, r4
   1e128:	eb00192e 	bl	245e8 <CSynchronizationEvent::Clear()>
   1e12c:	e1a00004 	mov	r0, r4
   1e130:	eb00193d 	bl	2462c <CSynchronizationEvent::Wait()>
   1e134:	e599302c 	ldr	r3, [r9, #44]	; 0x2c
   1e138:	e3530000 	cmp	r3, #0
   1e13c:	aaffffef 	bge	1e100 <CTCPConnection::Send(void const*, unsigned int, int)+0x98>
   1e140:	e599002c 	ldr	r0, [r9, #44]	; 0x2c
   1e144:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e148:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e14c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e150:	e3a02d06 	mov	r2, #384	; 0x180
   1e154:	e59f1024 	ldr	r1, [pc, #36]	; 1e180 <CTCPConnection::Send(void const*, unsigned int, int)+0x118>
   1e158:	e59f0024 	ldr	r0, [pc, #36]	; 1e184 <CTCPConnection::Send(void const*, unsigned int, int)+0x11c>
   1e15c:	eb0019a7 	bl	24800 <assertion_failed>
   1e160:	e3520000 	cmp	r2, #0
   1e164:	0affffe3 	beq	1e0f8 <CTCPConnection::Send(void const*, unsigned int, int)+0x90>
   1e168:	e1a05002 	mov	r5, r2
   1e16c:	e2806030 	add	r6, r0, #48	; 0x30
   1e170:	eaffffdb 	b	1e0e4 <CTCPConnection::Send(void const*, unsigned int, int)+0x7c>
   1e174:	e3e00000 	mvn	r0, #0
   1e178:	e12fff1e 	bx	lr
   1e17c:	00000763 	.word	0x00000763
   1e180:	00044114 	.word	0x00044114
   1e184:	000439fc 	.word	0x000439fc

0001e188 <CTCPConnection::Receive(void*, int)>:
   1e188:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e18c:	e3d23040 	bics	r3, r2, #64	; 0x40
   1e190:	e24dd00c 	sub	sp, sp, #12
   1e194:	e58d3004 	str	r3, [sp, #4]
   1e198:	1a00002e 	bne	1e258 <CTCPConnection::Receive(void*, int)+0xd0>
   1e19c:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e1a0:	e3530000 	cmp	r3, #0
   1e1a4:	ba000026 	blt	1e244 <CTCPConnection::Receive(void*, int)+0xbc>
   1e1a8:	e1a07001 	mov	r7, r1
   1e1ac:	e1a04000 	mov	r4, r0
   1e1b0:	e59d9004 	ldr	r9, [sp, #4]
   1e1b4:	e3a0b001 	mov	fp, #1
   1e1b8:	e59fa0ac 	ldr	sl, [pc, #172]	; 1e26c <CTCPConnection::Receive(void*, int)+0xe4>
   1e1bc:	e2026040 	and	r6, r2, #64	; 0x40
   1e1c0:	e280803c 	add	r8, r0, #60	; 0x3c
   1e1c4:	e2805068 	add	r5, r0, #104	; 0x68
   1e1c8:	ea00000e 	b	1e208 <CTCPConnection::Receive(void*, int)+0x80>
   1e1cc:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   1e1d0:	e6ef3073 	uxtb	r3, r3
   1e1d4:	e353000a 	cmp	r3, #10
   1e1d8:	8a000001 	bhi	1e1e4 <CTCPConnection::Receive(void*, int)+0x5c>
   1e1dc:	e01a331b 	ands	r3, sl, fp, lsl r3
   1e1e0:	1a00001c 	bne	1e258 <CTCPConnection::Receive(void*, int)+0xd0>
   1e1e4:	e3560000 	cmp	r6, #0
   1e1e8:	1a00000d 	bne	1e224 <CTCPConnection::Receive(void*, int)+0x9c>
   1e1ec:	e1a00005 	mov	r0, r5
   1e1f0:	eb0018fc 	bl	245e8 <CSynchronizationEvent::Clear()>
   1e1f4:	e1a00005 	mov	r0, r5
   1e1f8:	eb00190b 	bl	2462c <CSynchronizationEvent::Wait()>
   1e1fc:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e200:	e3530000 	cmp	r3, #0
   1e204:	ba000009 	blt	1e230 <CTCPConnection::Receive(void*, int)+0xa8>
   1e208:	e1a02009 	mov	r2, r9
   1e20c:	e1a01007 	mov	r1, r7
   1e210:	e1a00008 	mov	r0, r8
   1e214:	eb000cad 	bl	214d0 <CNetQueue::Dequeue(void*, void**)>
   1e218:	e3500000 	cmp	r0, #0
   1e21c:	0affffea 	beq	1e1cc <CTCPConnection::Receive(void*, int)+0x44>
   1e220:	e58d0004 	str	r0, [sp, #4]
   1e224:	e59d0004 	ldr	r0, [sp, #4]
   1e228:	e28dd00c 	add	sp, sp, #12
   1e22c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e230:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e234:	e58d3004 	str	r3, [sp, #4]
   1e238:	e59d0004 	ldr	r0, [sp, #4]
   1e23c:	e28dd00c 	add	sp, sp, #12
   1e240:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e244:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e248:	e58d3004 	str	r3, [sp, #4]
   1e24c:	e59d0004 	ldr	r0, [sp, #4]
   1e250:	e28dd00c 	add	sp, sp, #12
   1e254:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e258:	e3e03000 	mvn	r3, #0
   1e25c:	e58d3004 	str	r3, [sp, #4]
   1e260:	e59d0004 	ldr	r0, [sp, #4]
   1e264:	e28dd00c 	add	sp, sp, #12
   1e268:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e26c:	000007e3 	.word	0x000007e3

0001e270 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   1e270:	e3a0c006 	mov	ip, #6
   1e274:	e92d4070 	push	{r4, r5, r6, lr}
   1e278:	e1a04000 	mov	r4, r0
   1e27c:	e3a05000 	mov	r5, #0
   1e280:	e3a06001 	mov	r6, #1
   1e284:	e24dd008 	sub	sp, sp, #8
   1e288:	e58dc000 	str	ip, [sp]
   1e28c:	ebfffc70 	bl	1d454 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   1e290:	e59f30b0 	ldr	r3, [pc, #176]	; 1e348 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xd8>
   1e294:	e5c4602a 	strb	r6, [r4, #42]	; 0x2a
   1e298:	e5843000 	str	r3, [r4]
   1e29c:	e5c45029 	strb	r5, [r4, #41]	; 0x29
   1e2a0:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1e2a4:	e2840030 	add	r0, r4, #48	; 0x30
   1e2a8:	eb000c03 	bl	212bc <CNetQueue::CNetQueue()>
   1e2ac:	e284003c 	add	r0, r4, #60	; 0x3c
   1e2b0:	eb000c01 	bl	212bc <CNetQueue::CNetQueue()>
   1e2b4:	e2840048 	add	r0, r4, #72	; 0x48
   1e2b8:	e3a01801 	mov	r1, #65536	; 0x10000
   1e2bc:	eb0007c0 	bl	201c4 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1e2c0:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1e2c4:	e1a01005 	mov	r1, r5
   1e2c8:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1e2cc:	e2840068 	add	r0, r4, #104	; 0x68
   1e2d0:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1e2d4:	e5845060 	str	r5, [r4, #96]	; 0x60
   1e2d8:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1e2dc:	eb0018b0 	bl	245a4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e2e0:	e1a01005 	mov	r1, r5
   1e2e4:	e2840070 	add	r0, r4, #112	; 0x70
   1e2e8:	eb0018ad 	bl	245a4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e2ec:	eb002f03 	bl	29f00 <CTimer::Get()>
   1e2f0:	e3a02f86 	mov	r2, #536	; 0x218
   1e2f4:	e59f3050 	ldr	r3, [pc, #80]	; 1e34c <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xdc>
   1e2f8:	e5840078 	str	r0, [r4, #120]	; 0x78
   1e2fc:	e1c42bb4 	strh	r2, [r4, #180]	; 0xb4
   1e300:	e5843094 	str	r3, [r4, #148]	; 0x94
   1e304:	e58430ac 	str	r3, [r4, #172]	; 0xac
   1e308:	e5846088 	str	r6, [r4, #136]	; 0x88
   1e30c:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   1e310:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1e314:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   1e318:	e28400b8 	add	r0, r4, #184	; 0xb8
   1e31c:	eb000893 	bl	20570 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1e320:	e1a00004 	mov	r0, r4
   1e324:	e59f2024 	ldr	r2, [pc, #36]	; 1e350 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xe0>
   1e328:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1e32c:	e5923000 	ldr	r3, [r2]
   1e330:	e5845080 	str	r5, [r4, #128]	; 0x80
   1e334:	e0833006 	add	r3, r3, r6
   1e338:	e5845084 	str	r5, [r4, #132]	; 0x84
   1e33c:	e5823000 	str	r3, [r2]
   1e340:	e28dd008 	add	sp, sp, #8
   1e344:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e348:	000440a8 	.word	0x000440a8
   1e34c:	00003908 	.word	0x00003908
   1e350:	0004e0e4 	.word	0x0004e0e4

0001e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>:
   1e354:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e358:	e2017c02 	and	r7, r1, #512	; 0x200
   1e35c:	e3570000 	cmp	r7, #0
   1e360:	13a0e018 	movne	lr, #24
   1e364:	03a0e014 	moveq	lr, #20
   1e368:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1e36c:	e24dd008 	sub	sp, sp, #8
   1e370:	e59dc664 	ldr	ip, [sp, #1636]	; 0x664
   1e374:	13a05006 	movne	r5, #6
   1e378:	03a05005 	moveq	r5, #5
   1e37c:	e09c600e 	adds	r6, ip, lr
   1e380:	2a00003f 	bcs	1e484 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x130>
   1e384:	e1d081b6 	ldrh	r8, [r0, #22]
   1e388:	e1a04000 	mov	r4, r0
   1e38c:	e1d001b4 	ldrh	r0, [r0, #20]
   1e390:	e6bf2f32 	rev	r2, r2
   1e394:	e6bf8fb8 	rev16	r8, r8
   1e398:	e6bf0fb0 	rev16	r0, r0
   1e39c:	e58d200c 	str	r2, [sp, #12]
   1e3a0:	e2112a01 	ands	r2, r1, #4096	; 0x1000
   1e3a4:	e1cd80b8 	strh	r8, [sp, #8]
   1e3a8:	e1cd00ba 	strh	r0, [sp, #10]
   1e3ac:	01a03002 	moveq	r3, r2
   1e3b0:	1a000031 	bne	1e47c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x128>
   1e3b4:	e59400ac 	ldr	r0, [r4, #172]	; 0xac
   1e3b8:	e1d429b8 	ldrh	r2, [r4, #152]	; 0x98
   1e3bc:	e1811205 	orr	r1, r1, r5, lsl #4
   1e3c0:	e6bf0fb0 	rev16	r0, r0
   1e3c4:	e6bf2fb2 	rev16	r2, r2
   1e3c8:	e3570000 	cmp	r7, #0
   1e3cc:	e1cd11b4 	strh	r1, [sp, #20]
   1e3d0:	e58d3010 	str	r3, [sp, #16]
   1e3d4:	e1cd01b6 	strh	r0, [sp, #22]
   1e3d8:	e1cd21ba 	strh	r2, [sp, #26]
   1e3dc:	1a00001d 	bne	1e458 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x104>
   1e3e0:	e35c0000 	cmp	ip, #0
   1e3e4:	0a000007 	beq	1e408 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xb4>
   1e3e8:	e59d3660 	ldr	r3, [sp, #1632]	; 0x660
   1e3ec:	e3530000 	cmp	r3, #0
   1e3f0:	0a00002b 	beq	1e4a4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x150>
   1e3f4:	e28d3008 	add	r3, sp, #8
   1e3f8:	e1a0200c 	mov	r2, ip
   1e3fc:	e083000e 	add	r0, r3, lr
   1e400:	e59d1660 	ldr	r1, [sp, #1632]	; 0x660
   1e404:	eb003141 	bl	2a910 <memcpy>
   1e408:	e3a03000 	mov	r3, #0
   1e40c:	e1a02006 	mov	r2, r6
   1e410:	e28d1008 	add	r1, sp, #8
   1e414:	e284001c 	add	r0, r4, #28
   1e418:	e1cd31b8 	strh	r3, [sp, #24]
   1e41c:	eb000cbf 	bl	21720 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1e420:	e594c008 	ldr	ip, [r4, #8]
   1e424:	e1cd01b8 	strh	r0, [sp, #24]
   1e428:	e35c0000 	cmp	ip, #0
   1e42c:	0a000018 	beq	1e494 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x140>
   1e430:	e3a0e006 	mov	lr, #6
   1e434:	e1a03006 	mov	r3, r6
   1e438:	e28d2008 	add	r2, sp, #8
   1e43c:	e284100c 	add	r1, r4, #12
   1e440:	e1a0000c 	mov	r0, ip
   1e444:	e58de000 	str	lr, [sp]
   1e448:	ebfff222 	bl	1acd8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   1e44c:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1e450:	e28dd008 	add	sp, sp, #8
   1e454:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1e458:	e3a00002 	mov	r0, #2
   1e45c:	e3a01004 	mov	r1, #4
   1e460:	e3a02005 	mov	r2, #5
   1e464:	e3e0304b 	mvn	r3, #75	; 0x4b
   1e468:	e5cd001c 	strb	r0, [sp, #28]
   1e46c:	e5cd101d 	strb	r1, [sp, #29]
   1e470:	e5cd201e 	strb	r2, [sp, #30]
   1e474:	e5cd301f 	strb	r3, [sp, #31]
   1e478:	eaffffd8 	b	1e3e0 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x8c>
   1e47c:	e6bf3f33 	rev	r3, r3
   1e480:	eaffffcb 	b	1e3b4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x60>
   1e484:	e59f2028 	ldr	r2, [pc, #40]	; 1e4b4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x160>
   1e488:	e59f1028 	ldr	r1, [pc, #40]	; 1e4b8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x164>
   1e48c:	e59f0028 	ldr	r0, [pc, #40]	; 1e4bc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x168>
   1e490:	eb0018da 	bl	24800 <assertion_failed>
   1e494:	e59f2024 	ldr	r2, [pc, #36]	; 1e4c0 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x16c>
   1e498:	e59f1018 	ldr	r1, [pc, #24]	; 1e4b8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x164>
   1e49c:	e59f0020 	ldr	r0, [pc, #32]	; 1e4c4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x170>
   1e4a0:	eb0018d6 	bl	24800 <assertion_failed>
   1e4a4:	e59f201c 	ldr	r2, [pc, #28]	; 1e4c8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x174>
   1e4a8:	e59f1008 	ldr	r1, [pc, #8]	; 1e4b8 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x164>
   1e4ac:	e59f0018 	ldr	r0, [pc, #24]	; 1e4cc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x178>
   1e4b0:	eb0018d2 	bl	24800 <assertion_failed>
   1e4b4:	00000557 	.word	0x00000557
   1e4b8:	00044114 	.word	0x00044114
   1e4bc:	00044128 	.word	0x00044128
   1e4c0:	00000587 	.word	0x00000587
   1e4c4:	00043994 	.word	0x00043994
   1e4c8:	00000571 	.word	0x00000571
   1e4cc:	000439fc 	.word	0x000439fc

0001e4d0 <CTCPConnection::ScanOptions(TTCPHeader*)>:
   1e4d0:	e3510000 	cmp	r1, #0
   1e4d4:	e92d4010 	push	{r4, lr}
   1e4d8:	0a000021 	beq	1e564 <CTCPConnection::ScanOptions(TTCPHeader*)+0x94>
   1e4dc:	e5d1300c 	ldrb	r3, [r1, #12]
   1e4e0:	e59fe08c 	ldr	lr, [pc, #140]	; 1e574 <CTCPConnection::ScanOptions(TTCPHeader*)+0xa4>
   1e4e4:	e1a03223 	lsr	r3, r3, #4
   1e4e8:	e0813103 	add	r3, r1, r3, lsl #2
   1e4ec:	e2811014 	add	r1, r1, #20
   1e4f0:	e2812002 	add	r2, r1, #2
   1e4f4:	e1530002 	cmp	r3, r2
   1e4f8:	38bd8010 	popcc	{r4, pc}
   1e4fc:	e5d12000 	ldrb	r2, [r1]
   1e500:	e3520001 	cmp	r2, #1
   1e504:	0a000007 	beq	1e528 <CTCPConnection::ScanOptions(TTCPHeader*)+0x58>
   1e508:	38bd8010 	popcc	{r4, pc}
   1e50c:	e3520002 	cmp	r2, #2
   1e510:	e5d12001 	ldrb	r2, [r1, #1]
   1e514:	1a000001 	bne	1e520 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1e518:	e3520004 	cmp	r2, #4
   1e51c:	0a000003 	beq	1e530 <CTCPConnection::ScanOptions(TTCPHeader*)+0x60>
   1e520:	e0811002 	add	r1, r1, r2
   1e524:	eafffff1 	b	1e4f0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x20>
   1e528:	e2811001 	add	r1, r1, #1
   1e52c:	eaffffef 	b	1e4f0 <CTCPConnection::ScanOptions(TTCPHeader*)+0x20>
   1e530:	e281c004 	add	ip, r1, #4
   1e534:	e153000c 	cmp	r3, ip
   1e538:	3afffff8 	bcc	1e520 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1e53c:	e5d14002 	ldrb	r4, [r1, #2]
   1e540:	e5d1c003 	ldrb	ip, [r1, #3]
   1e544:	e18cc404 	orr	ip, ip, r4, lsl #8
   1e548:	e28cc014 	add	ip, ip, #20
   1e54c:	e15c000e 	cmp	ip, lr
   1e550:	21a0c00e 	movcs	ip, lr
   1e554:	e24cc014 	sub	ip, ip, #20
   1e558:	e35c0009 	cmp	ip, #9
   1e55c:	81c0cbb4 	strhhi	ip, [r0, #180]	; 0xb4
   1e560:	eaffffee 	b	1e520 <CTCPConnection::ScanOptions(TTCPHeader*)+0x50>
   1e564:	e59f200c 	ldr	r2, [pc, #12]	; 1e578 <CTCPConnection::ScanOptions(TTCPHeader*)+0xa8>
   1e568:	e59f100c 	ldr	r1, [pc, #12]	; 1e57c <CTCPConnection::ScanOptions(TTCPHeader*)+0xac>
   1e56c:	e59f000c 	ldr	r0, [pc, #12]	; 1e580 <CTCPConnection::ScanOptions(TTCPHeader*)+0xb0>
   1e570:	eb0018a2 	bl	24800 <assertion_failed>
   1e574:	000005c8 	.word	0x000005c8
   1e578:	0000058d 	.word	0x0000058d
   1e57c:	00044114 	.word	0x00044114
   1e580:	00044148 	.word	0x00044148

0001e584 <CTCPConnection::CalculateISN()>:
   1e584:	e92d4070 	push	{r4, r5, r6, lr}
   1e588:	e1a05000 	mov	r5, r0
   1e58c:	e5900078 	ldr	r0, [r0, #120]	; 0x78
   1e590:	e3500000 	cmp	r0, #0
   1e594:	0a00000d 	beq	1e5d0 <CTCPConnection::CalculateISN()+0x4c>
   1e598:	eb002ba6 	bl	29438 <CTimer::GetTime() const>
   1e59c:	e1a04000 	mov	r4, r0
   1e5a0:	e5950078 	ldr	r0, [r5, #120]	; 0x78
   1e5a4:	eb002b9f 	bl	29428 <CTimer::GetTicks() const>
   1e5a8:	e3a02064 	mov	r2, #100	; 0x64
   1e5ac:	e59f302c 	ldr	r3, [pc, #44]	; 1e5e0 <CTCPConnection::CalculateISN()+0x5c>
   1e5b0:	e0831093 	umull	r1, r3, r3, r0
   1e5b4:	e1a032a3 	lsr	r3, r3, #5
   1e5b8:	e0030392 	mul	r3, r2, r3
   1e5bc:	e0400003 	sub	r0, r0, r3
   1e5c0:	e0200492 	mla	r0, r2, r4, r0
   1e5c4:	e0800080 	add	r0, r0, r0, lsl #1
   1e5c8:	e0600180 	rsb	r0, r0, r0, lsl #3
   1e5cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e5d0:	e59f200c 	ldr	r2, [pc, #12]	; 1e5e4 <CTCPConnection::CalculateISN()+0x60>
   1e5d4:	e59f100c 	ldr	r1, [pc, #12]	; 1e5e8 <CTCPConnection::CalculateISN()+0x64>
   1e5d8:	e59f000c 	ldr	r0, [pc, #12]	; 1e5ec <CTCPConnection::CalculateISN()+0x68>
   1e5dc:	eb001887 	bl	24800 <assertion_failed>
   1e5e0:	51eb851f 	.word	0x51eb851f
   1e5e4:	000005b6 	.word	0x000005b6
   1e5e8:	00044114 	.word	0x00044114
   1e5ec:	0003f1b8 	.word	0x0003f1b8

0001e5f0 <CTCPConnection::StopTimer(unsigned int)>:
   1e5f0:	e3510002 	cmp	r1, #2
   1e5f4:	e92d4070 	push	{r4, r5, r6, lr}
   1e5f8:	8a00001c 	bhi	1e670 <CTCPConnection::StopTimer(unsigned int)+0x80>
   1e5fc:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1e600:	e1a05000 	mov	r5, r0
   1e604:	e3530000 	cmp	r3, #0
   1e608:	0a00001c 	beq	1e680 <CTCPConnection::StopTimer(unsigned int)+0x90>
   1e60c:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   1e610:	e281401e 	add	r4, r1, #30
   1e614:	e3500000 	cmp	r0, #0
   1e618:	1a000004 	bne	1e630 <CTCPConnection::StopTimer(unsigned int)+0x40>
   1e61c:	e0852104 	add	r2, r5, r4, lsl #2
   1e620:	e5921004 	ldr	r1, [r2, #4]
   1e624:	e3510000 	cmp	r1, #0
   1e628:	1a000006 	bne	1e648 <CTCPConnection::StopTimer(unsigned int)+0x58>
   1e62c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e630:	eb0035c1 	bl	2bd3c <EnterCritical>
   1e634:	e0853104 	add	r3, r5, r4, lsl #2
   1e638:	e5931004 	ldr	r1, [r3, #4]
   1e63c:	e3510000 	cmp	r1, #0
   1e640:	0a000005 	beq	1e65c <CTCPConnection::StopTimer(unsigned int)+0x6c>
   1e644:	e5953078 	ldr	r3, [r5, #120]	; 0x78
   1e648:	e1a00003 	mov	r0, r3
   1e64c:	eb002cba 	bl	2993c <CTimer::CancelKernelTimer(unsigned int)>
   1e650:	e3a03000 	mov	r3, #0
   1e654:	e0851104 	add	r1, r5, r4, lsl #2
   1e658:	e5813004 	str	r3, [r1, #4]
   1e65c:	e5953088 	ldr	r3, [r5, #136]	; 0x88
   1e660:	e3530000 	cmp	r3, #0
   1e664:	08bd8070 	popeq	{r4, r5, r6, pc}
   1e668:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e66c:	ea0035dd 	b	2bde8 <LeaveCritical>
   1e670:	e59f2018 	ldr	r2, [pc, #24]	; 1e690 <CTCPConnection::StopTimer(unsigned int)+0xa0>
   1e674:	e59f1018 	ldr	r1, [pc, #24]	; 1e694 <CTCPConnection::StopTimer(unsigned int)+0xa4>
   1e678:	e59f0018 	ldr	r0, [pc, #24]	; 1e698 <CTCPConnection::StopTimer(unsigned int)+0xa8>
   1e67c:	eb00185f 	bl	24800 <assertion_failed>
   1e680:	e59f2014 	ldr	r2, [pc, #20]	; 1e69c <CTCPConnection::StopTimer(unsigned int)+0xac>
   1e684:	e59f1008 	ldr	r1, [pc, #8]	; 1e694 <CTCPConnection::StopTimer(unsigned int)+0xa4>
   1e688:	e59f0010 	ldr	r0, [pc, #16]	; 1e6a0 <CTCPConnection::StopTimer(unsigned int)+0xb0>
   1e68c:	eb00185b 	bl	24800 <assertion_failed>
   1e690:	000005c9 	.word	0x000005c9
   1e694:	00044114 	.word	0x00044114
   1e698:	00044158 	.word	0x00044158
   1e69c:	000005ca 	.word	0x000005ca
   1e6a0:	0003f1b8 	.word	0x0003f1b8

0001e6a4 <CTCPConnection::~CTCPConnection()>:
   1e6a4:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1e6a8:	e59f30bc 	ldr	r3, [pc, #188]	; 1e76c <CTCPConnection::~CTCPConnection()+0xc8>
   1e6ac:	e21110ff 	ands	r1, r1, #255	; 0xff
   1e6b0:	e92d4070 	push	{r4, r5, r6, lr}
   1e6b4:	e5803000 	str	r3, [r0]
   1e6b8:	1a000023 	bne	1e74c <CTCPConnection::~CTCPConnection()+0xa8>
   1e6bc:	e1a04000 	mov	r4, r0
   1e6c0:	ebffffca 	bl	1e5f0 <CTCPConnection::StopTimer(unsigned int)>
   1e6c4:	e3a01001 	mov	r1, #1
   1e6c8:	e1a00004 	mov	r0, r4
   1e6cc:	ebffffc7 	bl	1e5f0 <CTCPConnection::StopTimer(unsigned int)>
   1e6d0:	e2845068 	add	r5, r4, #104	; 0x68
   1e6d4:	e3a01002 	mov	r1, #2
   1e6d8:	e1a00004 	mov	r0, r4
   1e6dc:	ebffffc3 	bl	1e5f0 <CTCPConnection::StopTimer(unsigned int)>
   1e6e0:	e2846070 	add	r6, r4, #112	; 0x70
   1e6e4:	e1a00005 	mov	r0, r5
   1e6e8:	eb0017c1 	bl	245f4 <CSynchronizationEvent::Set()>
   1e6ec:	e1a00006 	mov	r0, r6
   1e6f0:	eb0017bf 	bl	245f4 <CSynchronizationEvent::Set()>
   1e6f4:	e59f2074 	ldr	r2, [pc, #116]	; 1e770 <CTCPConnection::~CTCPConnection()+0xcc>
   1e6f8:	e5923000 	ldr	r3, [r2]
   1e6fc:	e3530000 	cmp	r3, #0
   1e700:	0a000015 	beq	1e75c <CTCPConnection::~CTCPConnection()+0xb8>
   1e704:	e2433001 	sub	r3, r3, #1
   1e708:	e28400b8 	add	r0, r4, #184	; 0xb8
   1e70c:	e5823000 	str	r3, [r2]
   1e710:	eb0007ad 	bl	205cc <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>
   1e714:	e1a00006 	mov	r0, r6
   1e718:	eb0017a5 	bl	245b4 <CSynchronizationEvent::~CSynchronizationEvent()>
   1e71c:	e1a00005 	mov	r0, r5
   1e720:	eb0017a3 	bl	245b4 <CSynchronizationEvent::~CSynchronizationEvent()>
   1e724:	e2840048 	add	r0, r4, #72	; 0x48
   1e728:	eb0006b9 	bl	20214 <CRetransmissionQueue::~CRetransmissionQueue()>
   1e72c:	e284003c 	add	r0, r4, #60	; 0x3c
   1e730:	eb000b1b 	bl	213a4 <CNetQueue::~CNetQueue()>
   1e734:	e2840030 	add	r0, r4, #48	; 0x30
   1e738:	eb000b19 	bl	213a4 <CNetQueue::~CNetQueue()>
   1e73c:	e1a00004 	mov	r0, r4
   1e740:	ebfffb69 	bl	1d4ec <CNetConnection::~CNetConnection()>
   1e744:	e1a00004 	mov	r0, r4
   1e748:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e74c:	e3a020d1 	mov	r2, #209	; 0xd1
   1e750:	e59f101c 	ldr	r1, [pc, #28]	; 1e774 <CTCPConnection::~CTCPConnection()+0xd0>
   1e754:	e59f001c 	ldr	r0, [pc, #28]	; 1e778 <CTCPConnection::~CTCPConnection()+0xd4>
   1e758:	eb001828 	bl	24800 <assertion_failed>
   1e75c:	e3a020dc 	mov	r2, #220	; 0xdc
   1e760:	e59f100c 	ldr	r1, [pc, #12]	; 1e774 <CTCPConnection::~CTCPConnection()+0xd0>
   1e764:	e59f0010 	ldr	r0, [pc, #16]	; 1e77c <CTCPConnection::~CTCPConnection()+0xd8>
   1e768:	eb001824 	bl	24800 <assertion_failed>
   1e76c:	000440a8 	.word	0x000440a8
   1e770:	0004e0e4 	.word	0x0004e0e4
   1e774:	00044114 	.word	0x00044114
   1e778:	00044174 	.word	0x00044174
   1e77c:	00044190 	.word	0x00044190

0001e780 <CTCPConnection::~CTCPConnection()>:
   1e780:	e92d4010 	push	{r4, lr}
   1e784:	e1a04000 	mov	r4, r0
   1e788:	ebffffc5 	bl	1e6a4 <CTCPConnection::~CTCPConnection()>
   1e78c:	e1a00004 	mov	r0, r4
   1e790:	e3a010e0 	mov	r1, #224	; 0xe0
   1e794:	eb003244 	bl	2b0ac <operator delete(void*, unsigned int)>
   1e798:	e1a00004 	mov	r0, r4
   1e79c:	e8bd8010 	pop	{r4, pc}

0001e7a0 <CTCPConnection::Close()>:
   1e7a0:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1e7a4:	e3530000 	cmp	r3, #0
   1e7a8:	ba000036 	blt	1e888 <CTCPConnection::Close()+0xe8>
   1e7ac:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1e7b0:	e92d4010 	push	{r4, lr}
   1e7b4:	e1a04000 	mov	r4, r0
   1e7b8:	e353000a 	cmp	r3, #10
   1e7bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1e7c0:	ea000013 	b	1e814 <CTCPConnection::Close()+0x74>
   1e7c4:	0001e830 	.word	0x0001e830
   1e7c8:	0001e838 	.word	0x0001e838
   1e7cc:	0001e838 	.word	0x0001e838
   1e7d0:	0001e858 	.word	0x0001e858
   1e7d4:	0001e858 	.word	0x0001e858
   1e7d8:	0001e814 	.word	0x0001e814
   1e7dc:	0001e814 	.word	0x0001e814
   1e7e0:	0001e7f0 	.word	0x0001e7f0
   1e7e4:	0001e830 	.word	0x0001e830
   1e7e8:	0001e830 	.word	0x0001e830
   1e7ec:	0001e830 	.word	0x0001e830
   1e7f0:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1e7f4:	e3530000 	cmp	r3, #0
   1e7f8:	1a000028 	bne	1e8a0 <CTCPConnection::Close()+0x100>
   1e7fc:	e3a01005 	mov	r1, #5
   1e800:	e3a02009 	mov	r2, #9
   1e804:	e3a03001 	mov	r3, #1
   1e808:	e5801060 	str	r1, [r0, #96]	; 0x60
   1e80c:	e5c0205f 	strb	r2, [r0, #95]	; 0x5f
   1e810:	e5c0305e 	strb	r3, [r0, #94]	; 0x5e
   1e814:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e818:	e3530000 	cmp	r3, #0
   1e81c:	ba000001 	blt	1e828 <CTCPConnection::Close()+0x88>
   1e820:	e3a00000 	mov	r0, #0
   1e824:	e8bd8010 	pop	{r4, pc}
   1e828:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1e82c:	e8bd8010 	pop	{r4, pc}
   1e830:	e3e00000 	mvn	r0, #0
   1e834:	e8bd8010 	pop	{r4, pc}
   1e838:	e3a01001 	mov	r1, #1
   1e83c:	ebffff6b 	bl	1e5f0 <CTCPConnection::StopTimer(unsigned int)>
   1e840:	e3a03000 	mov	r3, #0
   1e844:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1e848:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e84c:	e3530000 	cmp	r3, #0
   1e850:	aafffff2 	bge	1e820 <CTCPConnection::Close()+0x80>
   1e854:	eafffff3 	b	1e828 <CTCPConnection::Close()+0x88>
   1e858:	e5d0305e 	ldrb	r3, [r0, #94]	; 0x5e
   1e85c:	e3530000 	cmp	r3, #0
   1e860:	1a00000a 	bne	1e890 <CTCPConnection::Close()+0xf0>
   1e864:	e3a03005 	mov	r3, #5
   1e868:	e3a02001 	mov	r2, #1
   1e86c:	e5803060 	str	r3, [r0, #96]	; 0x60
   1e870:	e5c0205e 	strb	r2, [r0, #94]	; 0x5e
   1e874:	e5c0305f 	strb	r3, [r0, #95]	; 0x5f
   1e878:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   1e87c:	e3530000 	cmp	r3, #0
   1e880:	aaffffe6 	bge	1e820 <CTCPConnection::Close()+0x80>
   1e884:	eaffffe7 	b	1e828 <CTCPConnection::Close()+0x88>
   1e888:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1e88c:	e12fff1e 	bx	lr
   1e890:	e3a02d05 	mov	r2, #320	; 0x140
   1e894:	e59f1014 	ldr	r1, [pc, #20]	; 1e8b0 <CTCPConnection::Close()+0x110>
   1e898:	e59f0014 	ldr	r0, [pc, #20]	; 1e8b4 <CTCPConnection::Close()+0x114>
   1e89c:	eb0017d7 	bl	24800 <assertion_failed>
   1e8a0:	e59f2010 	ldr	r2, [pc, #16]	; 1e8b8 <CTCPConnection::Close()+0x118>
   1e8a4:	e59f1004 	ldr	r1, [pc, #4]	; 1e8b0 <CTCPConnection::Close()+0x110>
   1e8a8:	e59f0004 	ldr	r0, [pc, #4]	; 1e8b4 <CTCPConnection::Close()+0x114>
   1e8ac:	eb0017d3 	bl	24800 <assertion_failed>
   1e8b0:	00044114 	.word	0x00044114
   1e8b4:	000441a4 	.word	0x000441a4
   1e8b8:	0000014b 	.word	0x0000014b

0001e8bc <CTCPConnection::StartTimer(unsigned int, unsigned int)>:
   1e8bc:	e92d4070 	push	{r4, r5, r6, lr}
   1e8c0:	e3510002 	cmp	r1, #2
   1e8c4:	e24dd008 	sub	sp, sp, #8
   1e8c8:	8a000012 	bhi	1e918 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x5c>
   1e8cc:	e3520000 	cmp	r2, #0
   1e8d0:	e1a06002 	mov	r6, r2
   1e8d4:	0a000013 	beq	1e928 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x6c>
   1e8d8:	e5903078 	ldr	r3, [r0, #120]	; 0x78
   1e8dc:	e1a04000 	mov	r4, r0
   1e8e0:	e3530000 	cmp	r3, #0
   1e8e4:	0a000013 	beq	1e938 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x7c>
   1e8e8:	e1a05001 	mov	r5, r1
   1e8ec:	ebffff3f 	bl	1e5f0 <CTCPConnection::StopTimer(unsigned int)>
   1e8f0:	e5940078 	ldr	r0, [r4, #120]	; 0x78
   1e8f4:	e1a01006 	mov	r1, r6
   1e8f8:	e58d4000 	str	r4, [sp]
   1e8fc:	e1a03005 	mov	r3, r5
   1e900:	e59f2040 	ldr	r2, [pc, #64]	; 1e948 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x8c>
   1e904:	eb002bbd 	bl	29800 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1e908:	e0844105 	add	r4, r4, r5, lsl #2
   1e90c:	e584007c 	str	r0, [r4, #124]	; 0x7c
   1e910:	e28dd008 	add	sp, sp, #8
   1e914:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e918:	e59f202c 	ldr	r2, [pc, #44]	; 1e94c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x90>
   1e91c:	e59f102c 	ldr	r1, [pc, #44]	; 1e950 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e920:	e59f002c 	ldr	r0, [pc, #44]	; 1e954 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x98>
   1e924:	eb0017b5 	bl	24800 <assertion_failed>
   1e928:	e59f2028 	ldr	r2, [pc, #40]	; 1e958 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x9c>
   1e92c:	e59f101c 	ldr	r1, [pc, #28]	; 1e950 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e930:	e59f0024 	ldr	r0, [pc, #36]	; 1e95c <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xa0>
   1e934:	eb0017b1 	bl	24800 <assertion_failed>
   1e938:	e3a02d17 	mov	r2, #1472	; 0x5c0
   1e93c:	e59f100c 	ldr	r1, [pc, #12]	; 1e950 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x94>
   1e940:	e59f0018 	ldr	r0, [pc, #24]	; 1e960 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0xa4>
   1e944:	eb0017ad 	bl	24800 <assertion_failed>
   1e948:	00020174 	.word	0x00020174
   1e94c:	000005be 	.word	0x000005be
   1e950:	00044114 	.word	0x00044114
   1e954:	00044158 	.word	0x00044158
   1e958:	000005bf 	.word	0x000005bf
   1e95c:	000441b4 	.word	0x000441b4
   1e960:	0003f1b8 	.word	0x0003f1b8

0001e964 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   1e964:	e3a0c006 	mov	ip, #6
   1e968:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1e96c:	e1a04000 	mov	r4, r0
   1e970:	e3a05000 	mov	r5, #0
   1e974:	e3a06001 	mov	r6, #1
   1e978:	e24dd014 	sub	sp, sp, #20
   1e97c:	e1dde2b8 	ldrh	lr, [sp, #40]	; 0x28
   1e980:	e58dc008 	str	ip, [sp, #8]
   1e984:	e1ddc2bc 	ldrh	ip, [sp, #44]	; 0x2c
   1e988:	e58de000 	str	lr, [sp]
   1e98c:	e58dc004 	str	ip, [sp, #4]
   1e990:	ebfffa83 	bl	1d3a4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   1e994:	e59f3134 	ldr	r3, [pc, #308]	; 1ead0 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x16c>
   1e998:	e5c4502a 	strb	r5, [r4, #42]	; 0x2a
   1e99c:	e5843000 	str	r3, [r4]
   1e9a0:	e584502c 	str	r5, [r4, #44]	; 0x2c
   1e9a4:	e5c46029 	strb	r6, [r4, #41]	; 0x29
   1e9a8:	e2840030 	add	r0, r4, #48	; 0x30
   1e9ac:	eb000a42 	bl	212bc <CNetQueue::CNetQueue()>
   1e9b0:	e284003c 	add	r0, r4, #60	; 0x3c
   1e9b4:	eb000a40 	bl	212bc <CNetQueue::CNetQueue()>
   1e9b8:	e3a01801 	mov	r1, #65536	; 0x10000
   1e9bc:	e2840048 	add	r0, r4, #72	; 0x48
   1e9c0:	eb0005ff 	bl	201c4 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   1e9c4:	e5c4505c 	strb	r5, [r4, #92]	; 0x5c
   1e9c8:	e1a01005 	mov	r1, r5
   1e9cc:	e5c4505d 	strb	r5, [r4, #93]	; 0x5d
   1e9d0:	e2840068 	add	r0, r4, #104	; 0x68
   1e9d4:	e5c4505e 	strb	r5, [r4, #94]	; 0x5e
   1e9d8:	e5845060 	str	r5, [r4, #96]	; 0x60
   1e9dc:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   1e9e0:	eb0016ef 	bl	245a4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e9e4:	e1a01005 	mov	r1, r5
   1e9e8:	e2840070 	add	r0, r4, #112	; 0x70
   1e9ec:	eb0016ec 	bl	245a4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   1e9f0:	eb002d42 	bl	29f00 <CTimer::Get()>
   1e9f4:	e3a02f86 	mov	r2, #536	; 0x218
   1e9f8:	e59f30d4 	ldr	r3, [pc, #212]	; 1ead4 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x170>
   1e9fc:	e28470b8 	add	r7, r4, #184	; 0xb8
   1ea00:	e5840078 	str	r0, [r4, #120]	; 0x78
   1ea04:	e1c42bb4 	strh	r2, [r4, #180]	; 0xb4
   1ea08:	e5843094 	str	r3, [r4, #148]	; 0x94
   1ea0c:	e58430ac 	str	r3, [r4, #172]	; 0xac
   1ea10:	e5846088 	str	r6, [r4, #136]	; 0x88
   1ea14:	e1c459b8 	strh	r5, [r4, #152]	; 0x98
   1ea18:	e58450a8 	str	r5, [r4, #168]	; 0xa8
   1ea1c:	e58450b0 	str	r5, [r4, #176]	; 0xb0
   1ea20:	e1a00007 	mov	r0, r7
   1ea24:	eb0006d1 	bl	20570 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   1ea28:	e59f20a8 	ldr	r2, [pc, #168]	; 1ead8 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x174>
   1ea2c:	e584507c 	str	r5, [r4, #124]	; 0x7c
   1ea30:	e5923000 	ldr	r3, [r2]
   1ea34:	e5845080 	str	r5, [r4, #128]	; 0x80
   1ea38:	e0833006 	add	r3, r3, r6
   1ea3c:	e5845084 	str	r5, [r4, #132]	; 0x84
   1ea40:	e1a00004 	mov	r0, r4
   1ea44:	e5823000 	str	r3, [r2]
   1ea48:	ebfffecd 	bl	1e584 <CTCPConnection::CalculateISN()>
   1ea4c:	e1a01000 	mov	r1, r0
   1ea50:	e1a00007 	mov	r0, r7
   1ea54:	e58410a4 	str	r1, [r4, #164]	; 0xa4
   1ea58:	eb0006de 	bl	205d8 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1ea5c:	e59420a4 	ldr	r2, [r4, #164]	; 0xa4
   1ea60:	e1a03005 	mov	r3, r5
   1ea64:	e0821006 	add	r1, r2, r6
   1ea68:	e58d5004 	str	r5, [sp, #4]
   1ea6c:	e58d5000 	str	r5, [sp]
   1ea70:	e1a00004 	mov	r0, r4
   1ea74:	e5841090 	str	r1, [r4, #144]	; 0x90
   1ea78:	e584208c 	str	r2, [r4, #140]	; 0x8c
   1ea7c:	e3a01c02 	mov	r1, #512	; 0x200
   1ea80:	ebfffe33 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ea84:	e1500005 	cmp	r0, r5
   1ea88:	0a00000d 	beq	1eac4 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x160>
   1ea8c:	e59410a4 	ldr	r1, [r4, #164]	; 0xa4
   1ea90:	e1a02006 	mov	r2, r6
   1ea94:	e1a00007 	mov	r0, r7
   1ea98:	eb0006eb 	bl	2064c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1ea9c:	e3a02002 	mov	r2, #2
   1eaa0:	e3a03005 	mov	r3, #5
   1eaa4:	e5c4202a 	strb	r2, [r4, #42]	; 0x2a
   1eaa8:	e1a00007 	mov	r0, r7
   1eaac:	e5843060 	str	r3, [r4, #96]	; 0x60
   1eab0:	eb0006c6 	bl	205d0 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1eab4:	e1a01006 	mov	r1, r6
   1eab8:	e1a02000 	mov	r2, r0
   1eabc:	e1a00004 	mov	r0, r4
   1eac0:	ebffff7d 	bl	1e8bc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1eac4:	e1a00004 	mov	r0, r4
   1eac8:	e28dd014 	add	sp, sp, #20
   1eacc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ead0:	000440a8 	.word	0x000440a8
   1ead4:	00003908 	.word	0x00003908
   1ead8:	0004e0e4 	.word	0x0004e0e4

0001eadc <CTCPConnection::Process()>:
   1eadc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eae0:	e5d03064 	ldrb	r3, [r0, #100]	; 0x64
   1eae4:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   1eae8:	e3530000 	cmp	r3, #0
   1eaec:	e24dd00c 	sub	sp, sp, #12
   1eaf0:	e1a05000 	mov	r5, r0
   1eaf4:	1a000085 	bne	1ed10 <CTCPConnection::Process()+0x234>
   1eaf8:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1eafc:	e6ef3073 	uxtb	r3, r3
   1eb00:	e353000a 	cmp	r3, #10
   1eb04:	9a00001c 	bls	1eb7c <CTCPConnection::Process()+0xa0>
   1eb08:	e2856048 	add	r6, r5, #72	; 0x48
   1eb0c:	e3a07000 	mov	r7, #0
   1eb10:	e59f42f0 	ldr	r4, [pc, #752]	; 1ee08 <CTCPConnection::Process()+0x32c>
   1eb14:	e2858030 	add	r8, r5, #48	; 0x30
   1eb18:	e1a00006 	mov	r0, r6
   1eb1c:	eb0005c9 	bl	20248 <CRetransmissionQueue::GetFreeSpace() const>
   1eb20:	e1500004 	cmp	r0, r4
   1eb24:	8a000065 	bhi	1ecc0 <CTCPConnection::Process()+0x1e4>
   1eb28:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1eb2c:	e3530004 	cmp	r3, #4
   1eb30:	0a00007f 	beq	1ed34 <CTCPConnection::Process()+0x258>
   1eb34:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1eb38:	e3530007 	cmp	r3, #7
   1eb3c:	0a00007c 	beq	1ed34 <CTCPConnection::Process()+0x258>
   1eb40:	e5d5305c 	ldrb	r3, [r5, #92]	; 0x5c
   1eb44:	e3530000 	cmp	r3, #0
   1eb48:	1a000082 	bne	1ed58 <CTCPConnection::Process()+0x27c>
   1eb4c:	e3a0aa01 	mov	sl, #4096	; 0x1000
   1eb50:	e3a09001 	mov	r9, #1
   1eb54:	e28d8008 	add	r8, sp, #8
   1eb58:	e285b030 	add	fp, r5, #48	; 0x30
   1eb5c:	e28570b8 	add	r7, r5, #184	; 0xb8
   1eb60:	e1a00006 	mov	r0, r6
   1eb64:	eb000608 	bl	2038c <CRetransmissionQueue::GetBytesAvailable() const>
   1eb68:	e3500000 	cmp	r0, #0
   1eb6c:	1a000029 	bne	1ec18 <CTCPConnection::Process()+0x13c>
   1eb70:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1eb74:	e28dd00c 	add	sp, sp, #12
   1eb78:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb7c:	e3a07001 	mov	r7, #1
   1eb80:	e59f4284 	ldr	r4, [pc, #644]	; 1ee0c <CTCPConnection::Process()+0x330>
   1eb84:	e1a03317 	lsl	r3, r7, r3
   1eb88:	e0044003 	and	r4, r4, r3
   1eb8c:	e3540000 	cmp	r4, #0
   1eb90:	1afffff6 	bne	1eb70 <CTCPConnection::Process()+0x94>
   1eb94:	e2131e3b 	ands	r1, r3, #944	; 0x3b0
   1eb98:	1a000075 	bne	1ed74 <CTCPConnection::Process()+0x298>
   1eb9c:	e313000c 	tst	r3, #12
   1eba0:	0affffd8 	beq	1eb08 <CTCPConnection::Process()+0x2c>
   1eba4:	e5d0305d 	ldrb	r3, [r0, #93]	; 0x5d
   1eba8:	e3530000 	cmp	r3, #0
   1ebac:	0affffef 	beq	1eb70 <CTCPConnection::Process()+0x94>
   1ebb0:	e5c0105d 	strb	r1, [r0, #93]	; 0x5d
   1ebb4:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1ebb8:	e28540b8 	add	r4, r5, #184	; 0xb8
   1ebbc:	e3530002 	cmp	r3, #2
   1ebc0:	059020a4 	ldreq	r2, [r0, #164]	; 0xa4
   1ebc4:	159020a4 	ldrne	r2, [r0, #164]	; 0xa4
   1ebc8:	058d1004 	streq	r1, [sp, #4]
   1ebcc:	058d1000 	streq	r1, [sp]
   1ebd0:	01a03001 	moveq	r3, r1
   1ebd4:	159030a8 	ldrne	r3, [r0, #168]	; 0xa8
   1ebd8:	03a01c02 	moveq	r1, #512	; 0x200
   1ebdc:	158d1004 	strne	r1, [sp, #4]
   1ebe0:	158d1000 	strne	r1, [sp]
   1ebe4:	13a01c12 	movne	r1, #4608	; 0x1200
   1ebe8:	ebfffdd9 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ebec:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1ebf0:	e1a00004 	mov	r0, r4
   1ebf4:	e3a02001 	mov	r2, #1
   1ebf8:	eb000693 	bl	2064c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1ebfc:	e1a00004 	mov	r0, r4
   1ec00:	eb000672 	bl	205d0 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ec04:	e3a01001 	mov	r1, #1
   1ec08:	e1a02000 	mov	r2, r0
   1ec0c:	e1a00005 	mov	r0, r5
   1ec10:	ebffff29 	bl	1e8bc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ec14:	eaffffd5 	b	1eb70 <CTCPConnection::Process()+0x94>
   1ec18:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1ec1c:	e5954094 	ldr	r4, [r5, #148]	; 0x94
   1ec20:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1ec24:	e0834004 	add	r4, r3, r4
   1ec28:	e0543002 	subs	r3, r4, r2
   1ec2c:	0affffcf 	beq	1eb70 <CTCPConnection::Process()+0x94>
   1ec30:	e1d54bb4 	ldrh	r4, [r5, #180]	; 0xb4
   1ec34:	e1540003 	cmp	r4, r3
   1ec38:	21a04003 	movcs	r4, r3
   1ec3c:	e1540000 	cmp	r4, r0
   1ec40:	21a04000 	movcs	r4, r0
   1ec44:	e3540d19 	cmp	r4, #1600	; 0x640
   1ec48:	8a00002c 	bhi	1ed00 <CTCPConnection::Process()+0x224>
   1ec4c:	e1a02004 	mov	r2, r4
   1ec50:	e1a01008 	mov	r1, r8
   1ec54:	e1a00006 	mov	r0, r6
   1ec58:	eb0005ea 	bl	20408 <CRetransmissionQueue::Read(void*, unsigned int)>
   1ec5c:	e1a00006 	mov	r0, r6
   1ec60:	eb000572 	bl	20230 <CRetransmissionQueue::IsEmpty() const>
   1ec64:	e3500000 	cmp	r0, #0
   1ec68:	1a00001e 	bne	1ece8 <CTCPConnection::Process()+0x20c>
   1ec6c:	e1a0100a 	mov	r1, sl
   1ec70:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1ec74:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1ec78:	e1a00005 	mov	r0, r5
   1ec7c:	e58d4004 	str	r4, [sp, #4]
   1ec80:	e58d8000 	str	r8, [sp]
   1ec84:	ebfffdb2 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1ec88:	e1a02004 	mov	r2, r4
   1ec8c:	e5951090 	ldr	r1, [r5, #144]	; 0x90
   1ec90:	e1a00007 	mov	r0, r7
   1ec94:	eb00066c 	bl	2064c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1ec98:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1ec9c:	e1a00007 	mov	r0, r7
   1eca0:	e0834004 	add	r4, r3, r4
   1eca4:	e5854090 	str	r4, [r5, #144]	; 0x90
   1eca8:	eb000648 	bl	205d0 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1ecac:	e1a01009 	mov	r1, r9
   1ecb0:	e1a02000 	mov	r2, r0
   1ecb4:	e1a00005 	mov	r0, r5
   1ecb8:	ebfffeff 	bl	1e8bc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ecbc:	eaffffa7 	b	1eb60 <CTCPConnection::Process()+0x84>
   1ecc0:	e1a02007 	mov	r2, r7
   1ecc4:	e28d1008 	add	r1, sp, #8
   1ecc8:	e1a00008 	mov	r0, r8
   1eccc:	eb0009ff 	bl	214d0 <CNetQueue::Dequeue(void*, void**)>
   1ecd0:	e2502000 	subs	r2, r0, #0
   1ecd4:	0affff93 	beq	1eb28 <CTCPConnection::Process()+0x4c>
   1ecd8:	e28d1008 	add	r1, sp, #8
   1ecdc:	e1a00006 	mov	r0, r6
   1ece0:	eb000578 	bl	202c8 <CRetransmissionQueue::Write(void const*, unsigned int)>
   1ece4:	eaffff8b 	b	1eb18 <CTCPConnection::Process()+0x3c>
   1ece8:	e1a0000b 	mov	r0, fp
   1ecec:	eb000977 	bl	212d0 <CNetQueue::IsEmpty() const>
   1ecf0:	e3500000 	cmp	r0, #0
   1ecf4:	0affffdc 	beq	1ec6c <CTCPConnection::Process()+0x190>
   1ecf8:	e3a01b06 	mov	r1, #6144	; 0x1800
   1ecfc:	eaffffdb 	b	1ec70 <CTCPConnection::Process()+0x194>
   1ed00:	e59f2108 	ldr	r2, [pc, #264]	; 1ee10 <CTCPConnection::Process()+0x334>
   1ed04:	e59f1108 	ldr	r1, [pc, #264]	; 1ee14 <CTCPConnection::Process()+0x338>
   1ed08:	e59f0108 	ldr	r0, [pc, #264]	; 1ee18 <CTCPConnection::Process()+0x33c>
   1ed0c:	eb0016bb 	bl	24800 <assertion_failed>
   1ed10:	e3e02000 	mvn	r2, #0
   1ed14:	e3a03000 	mov	r3, #0
   1ed18:	e580202c 	str	r2, [r0, #44]	; 0x2c
   1ed1c:	e2800068 	add	r0, r0, #104	; 0x68
   1ed20:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1ed24:	eb001632 	bl	245f4 <CSynchronizationEvent::Set()>
   1ed28:	e28ddd19 	add	sp, sp, #1600	; 0x640
   1ed2c:	e28dd00c 	add	sp, sp, #12
   1ed30:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ed34:	e2850030 	add	r0, r5, #48	; 0x30
   1ed38:	eb000964 	bl	212d0 <CNetQueue::IsEmpty() const>
   1ed3c:	e3500000 	cmp	r0, #0
   1ed40:	0affff7e 	beq	1eb40 <CTCPConnection::Process()+0x64>
   1ed44:	e2850070 	add	r0, r5, #112	; 0x70
   1ed48:	eb001629 	bl	245f4 <CSynchronizationEvent::Set()>
   1ed4c:	e5d5305c 	ldrb	r3, [r5, #92]	; 0x5c
   1ed50:	e3530000 	cmp	r3, #0
   1ed54:	0affff7c 	beq	1eb4c <CTCPConnection::Process()+0x70>
   1ed58:	e3a03000 	mov	r3, #0
   1ed5c:	e1a00006 	mov	r0, r6
   1ed60:	e5c5305c 	strb	r3, [r5, #92]	; 0x5c
   1ed64:	eb0005f9 	bl	20550 <CRetransmissionQueue::Reset()>
   1ed68:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1ed6c:	e5853090 	str	r3, [r5, #144]	; 0x90
   1ed70:	eaffff75 	b	1eb4c <CTCPConnection::Process()+0x70>
   1ed74:	e2806048 	add	r6, r0, #72	; 0x48
   1ed78:	e1a00006 	mov	r0, r6
   1ed7c:	eb00052b 	bl	20230 <CRetransmissionQueue::IsEmpty() const>
   1ed80:	e3500000 	cmp	r0, #0
   1ed84:	0affff60 	beq	1eb0c <CTCPConnection::Process()+0x30>
   1ed88:	e2850030 	add	r0, r5, #48	; 0x30
   1ed8c:	eb00094f 	bl	212d0 <CNetQueue::IsEmpty() const>
   1ed90:	e3500000 	cmp	r0, #0
   1ed94:	0affff5c 	beq	1eb0c <CTCPConnection::Process()+0x30>
   1ed98:	e5d5305e 	ldrb	r3, [r5, #94]	; 0x5e
   1ed9c:	e3530000 	cmp	r3, #0
   1eda0:	0affff59 	beq	1eb0c <CTCPConnection::Process()+0x30>
   1eda4:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1eda8:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1edac:	e28580b8 	add	r8, r5, #184	; 0xb8
   1edb0:	e58d4004 	str	r4, [sp, #4]
   1edb4:	e58d4000 	str	r4, [sp]
   1edb8:	e3a01c11 	mov	r1, #4352	; 0x1100
   1edbc:	e1a00005 	mov	r0, r5
   1edc0:	ebfffd63 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1edc4:	e5951090 	ldr	r1, [r5, #144]	; 0x90
   1edc8:	e1a00008 	mov	r0, r8
   1edcc:	e1a02007 	mov	r2, r7
   1edd0:	eb00061d 	bl	2064c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1edd4:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1edd8:	e5d5205f 	ldrb	r2, [r5, #95]	; 0x5f
   1eddc:	e2833001 	add	r3, r3, #1
   1ede0:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1ede4:	e1a00008 	mov	r0, r8
   1ede8:	e5853090 	str	r3, [r5, #144]	; 0x90
   1edec:	e5c5405e 	strb	r4, [r5, #94]	; 0x5e
   1edf0:	eb0005f6 	bl	205d0 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1edf4:	e1a01007 	mov	r1, r7
   1edf8:	e1a02000 	mov	r2, r0
   1edfc:	e1a00005 	mov	r0, r5
   1ee00:	ebfffead 	bl	1e8bc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1ee04:	eaffff40 	b	1eb0c <CTCPConnection::Process()+0x30>
   1ee08:	0000063f 	.word	0x0000063f
   1ee0c:	00000443 	.word	0x00000443
   1ee10:	0000025b 	.word	0x0000025b
   1ee14:	00044114 	.word	0x00044114
   1ee18:	000417ec 	.word	0x000417ec

0001ee1c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   1ee1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ee20:	e59d1020 	ldr	r1, [sp, #32]
   1ee24:	e1dd61b8 	ldrh	r6, [sp, #24]
   1ee28:	e3510006 	cmp	r1, #6
   1ee2c:	e1dd71bc 	ldrh	r7, [sp, #28]
   1ee30:	0a000001 	beq	1ee3c <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x20>
   1ee34:	e3a00000 	mov	r0, #0
   1ee38:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ee3c:	e5d0102a 	ldrb	r1, [r0, #42]	; 0x2a
   1ee40:	e3510001 	cmp	r1, #1
   1ee44:	dafffffa 	ble	1ee34 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ee48:	e1a01002 	mov	r1, r2
   1ee4c:	e1a04000 	mov	r4, r0
   1ee50:	e280000c 	add	r0, r0, #12
   1ee54:	e1a05003 	mov	r5, r3
   1ee58:	eb0007fa 	bl	20e48 <CIPAddress::operator!=(CIPAddress const&) const>
   1ee5c:	e3500000 	cmp	r0, #0
   1ee60:	1afffff3 	bne	1ee34 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ee64:	e1d431b4 	ldrh	r3, [r4, #20]
   1ee68:	e1530006 	cmp	r3, r6
   1ee6c:	1afffff0 	bne	1ee34 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ee70:	e5940004 	ldr	r0, [r4, #4]
   1ee74:	e3500000 	cmp	r0, #0
   1ee78:	0a000017 	beq	1eedc <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xc0>
   1ee7c:	eb000766 	bl	20c1c <CNetConfig::GetIPAddress() const>
   1ee80:	e1a01000 	mov	r1, r0
   1ee84:	e1a00005 	mov	r0, r5
   1ee88:	eb0007ee 	bl	20e48 <CIPAddress::operator!=(CIPAddress const&) const>
   1ee8c:	e3500000 	cmp	r0, #0
   1ee90:	1affffe7 	bne	1ee34 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1ee94:	e1d431b6 	ldrh	r3, [r4, #22]
   1ee98:	e1530007 	cmp	r3, r7
   1ee9c:	1affffe4 	bne	1ee34 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x18>
   1eea0:	e3e03000 	mvn	r3, #0
   1eea4:	e1a00004 	mov	r0, r4
   1eea8:	e584302c 	str	r3, [r4, #44]	; 0x2c
   1eeac:	e3a01001 	mov	r1, #1
   1eeb0:	ebfffdce 	bl	1e5f0 <CTCPConnection::StopTimer(unsigned int)>
   1eeb4:	e3a0300a 	mov	r3, #10
   1eeb8:	e59f202c 	ldr	r2, [pc, #44]	; 1eeec <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd0>
   1eebc:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1eec0:	e3a01002 	mov	r1, #2
   1eec4:	e1a00004 	mov	r0, r4
   1eec8:	ebfffe7b 	bl	1e8bc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1eecc:	e2840068 	add	r0, r4, #104	; 0x68
   1eed0:	eb0015c7 	bl	245f4 <CSynchronizationEvent::Set()>
   1eed4:	e3a00001 	mov	r0, #1
   1eed8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1eedc:	e59f200c 	ldr	r2, [pc, #12]	; 1eef0 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd4>
   1eee0:	e59f100c 	ldr	r1, [pc, #12]	; 1eef4 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xd8>
   1eee4:	e59f000c 	ldr	r0, [pc, #12]	; 1eef8 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xdc>
   1eee8:	eb001644 	bl	24800 <assertion_failed>
   1eeec:	00001770 	.word	0x00001770
   1eef0:	00000539 	.word	0x00000539
   1eef4:	00044114 	.word	0x00044114
   1eef8:	00043980 	.word	0x00043980

0001eefc <CTCPConnection::DumpStatus()>:
   1eefc:	e92d4070 	push	{r4, r5, r6, lr}
   1ef00:	e1a04000 	mov	r4, r0
   1ef04:	e24dd020 	sub	sp, sp, #32
   1ef08:	eb001f2f 	bl	26bcc <CLogger::Get()>
   1ef0c:	e594c0a4 	ldr	ip, [r4, #164]	; 0xa4
   1ef10:	e594e0b0 	ldr	lr, [r4, #176]	; 0xb0
   1ef14:	e5941090 	ldr	r1, [r4, #144]	; 0x90
   1ef18:	e594208c 	ldr	r2, [r4, #140]	; 0x8c
   1ef1c:	e59430a8 	ldr	r3, [r4, #168]	; 0xa8
   1ef20:	e5d4602a 	ldrb	r6, [r4, #42]	; 0x2a
   1ef24:	e1d451b4 	ldrh	r5, [r4, #20]
   1ef28:	e041100c 	sub	r1, r1, ip
   1ef2c:	e042200c 	sub	r2, r2, ip
   1ef30:	e043300e 	sub	r3, r3, lr
   1ef34:	e594c094 	ldr	ip, [r4, #148]	; 0x94
   1ef38:	e594e0ac 	ldr	lr, [r4, #172]	; 0xac
   1ef3c:	e58d1008 	str	r1, [sp, #8]
   1ef40:	e58d2004 	str	r2, [sp, #4]
   1ef44:	e58d3010 	str	r3, [sp, #16]
   1ef48:	e58d6000 	str	r6, [sp]
   1ef4c:	e58d5018 	str	r5, [sp, #24]
   1ef50:	e58de014 	str	lr, [sp, #20]
   1ef54:	e58dc00c 	str	ip, [sp, #12]
   1ef58:	e59f3010 	ldr	r3, [pc, #16]	; 1ef70 <CTCPConnection::DumpStatus()+0x74>
   1ef5c:	e3a02004 	mov	r2, #4
   1ef60:	e59f100c 	ldr	r1, [pc, #12]	; 1ef74 <CTCPConnection::DumpStatus()+0x78>
   1ef64:	eb001e55 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ef68:	e28dd020 	add	sp, sp, #32
   1ef6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ef70:	000441bc 	.word	0x000441bc
   1ef74:	000440e4 	.word	0x000440e4

0001ef78 <CTCPConnection::NewState(TTCPState, unsigned int)>:
   1ef78:	e92d4070 	push	{r4, r5, r6, lr}
   1ef7c:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1ef80:	e24dd010 	sub	sp, sp, #16
   1ef84:	e353000a 	cmp	r3, #10
   1ef88:	8a000015 	bhi	1efe4 <CTCPConnection::NewState(TTCPState, unsigned int)+0x6c>
   1ef8c:	e351000a 	cmp	r1, #10
   1ef90:	e1a04001 	mov	r4, r1
   1ef94:	8a000016 	bhi	1eff4 <CTCPConnection::NewState(TTCPState, unsigned int)+0x7c>
   1ef98:	e1a05000 	mov	r5, r0
   1ef9c:	e1a06002 	mov	r6, r2
   1efa0:	eb001f09 	bl	26bcc <CLogger::Get()>
   1efa4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1efa8:	e59f1054 	ldr	r1, [pc, #84]	; 1f004 <CTCPConnection::NewState(TTCPState, unsigned int)+0x8c>
   1efac:	e58d6008 	str	r6, [sp, #8]
   1efb0:	e081c104 	add	ip, r1, r4, lsl #2
   1efb4:	e0813103 	add	r3, r1, r3, lsl #2
   1efb8:	e5932048 	ldr	r2, [r3, #72]	; 0x48
   1efbc:	e59c3048 	ldr	r3, [ip, #72]	; 0x48
   1efc0:	e2811044 	add	r1, r1, #68	; 0x44
   1efc4:	e88d000c 	stm	sp, {r2, r3}
   1efc8:	e59f3038 	ldr	r3, [pc, #56]	; 1f008 <CTCPConnection::NewState(TTCPState, unsigned int)+0x90>
   1efcc:	e3a02004 	mov	r2, #4
   1efd0:	eb001e3a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1efd4:	e1a00004 	mov	r0, r4
   1efd8:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1efdc:	e28dd010 	add	sp, sp, #16
   1efe0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1efe4:	e59f2020 	ldr	r2, [pc, #32]	; 1f00c <CTCPConnection::NewState(TTCPState, unsigned int)+0x94>
   1efe8:	e59f1020 	ldr	r1, [pc, #32]	; 1f010 <CTCPConnection::NewState(TTCPState, unsigned int)+0x98>
   1efec:	e59f0020 	ldr	r0, [pc, #32]	; 1f014 <CTCPConnection::NewState(TTCPState, unsigned int)+0x9c>
   1eff0:	eb001602 	bl	24800 <assertion_failed>
   1eff4:	e59f201c 	ldr	r2, [pc, #28]	; 1f018 <CTCPConnection::NewState(TTCPState, unsigned int)+0xa0>
   1eff8:	e59f1010 	ldr	r1, [pc, #16]	; 1f010 <CTCPConnection::NewState(TTCPState, unsigned int)+0x98>
   1effc:	e59f0018 	ldr	r0, [pc, #24]	; 1f01c <CTCPConnection::NewState(TTCPState, unsigned int)+0xa4>
   1f000:	eb0015fe 	bl	24800 <assertion_failed>
   1f004:	000440a0 	.word	0x000440a0
   1f008:	00044258 	.word	0x00044258
   1f00c:	00000647 	.word	0x00000647
   1f010:	00044114 	.word	0x00044114
   1f014:	000441f4 	.word	0x000441f4
   1f018:	00000648 	.word	0x00000648
   1f01c:	00044228 	.word	0x00044228

0001f020 <CTCPConnection::UnexpectedState(unsigned int)>:
   1f020:	e92d4030 	push	{r4, r5, lr}
   1f024:	e1a05000 	mov	r5, r0
   1f028:	e1a04001 	mov	r4, r1
   1f02c:	e24dd00c 	sub	sp, sp, #12
   1f030:	ebffffb1 	bl	1eefc <CTCPConnection::DumpStatus()>
   1f034:	eb001ee4 	bl	26bcc <CLogger::Get()>
   1f038:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f03c:	e3a02000 	mov	r2, #0
   1f040:	e88d0018 	stm	sp, {r3, r4}
   1f044:	e59f100c 	ldr	r1, [pc, #12]	; 1f058 <CTCPConnection::UnexpectedState(unsigned int)+0x38>
   1f048:	e59f300c 	ldr	r3, [pc, #12]	; 1f05c <CTCPConnection::UnexpectedState(unsigned int)+0x3c>
   1f04c:	eb001e1b 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1f050:	e28dd00c 	add	sp, sp, #12
   1f054:	e8bd8030 	pop	{r4, r5, pc}
   1f058:	000440e4 	.word	0x000440e4
   1f05c:	00044274 	.word	0x00044274

0001f060 <CTCPConnection::Connect()>:
   1f060:	e590202c 	ldr	r2, [r0, #44]	; 0x2c
   1f064:	e92d4070 	push	{r4, r5, r6, lr}
   1f068:	e3520000 	cmp	r2, #0
   1f06c:	e1a04000 	mov	r4, r0
   1f070:	ba00000d 	blt	1f0ac <CTCPConnection::Connect()+0x4c>
   1f074:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1f078:	e6ef3073 	uxtb	r3, r3
   1f07c:	e353000a 	cmp	r3, #10
   1f080:	8a000009 	bhi	1f0ac <CTCPConnection::Connect()+0x4c>
   1f084:	e3a02001 	mov	r2, #1
   1f088:	e59f1058 	ldr	r1, [pc, #88]	; 1f0e8 <CTCPConnection::Connect()+0x88>
   1f08c:	e1a02312 	lsl	r2, r2, r3
   1f090:	e0011002 	and	r1, r1, r2
   1f094:	e3510000 	cmp	r1, #0
   1f098:	1a00000e 	bne	1f0d8 <CTCPConnection::Connect()+0x78>
   1f09c:	e3530000 	cmp	r3, #0
   1f0a0:	0a00000a 	beq	1f0d0 <CTCPConnection::Connect()+0x70>
   1f0a4:	e312000c 	tst	r2, #12
   1f0a8:	1a000001 	bne	1f0b4 <CTCPConnection::Connect()+0x54>
   1f0ac:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f0b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f0b4:	e2805068 	add	r5, r0, #104	; 0x68
   1f0b8:	e1a00005 	mov	r0, r5
   1f0bc:	eb001549 	bl	245e8 <CSynchronizationEvent::Clear()>
   1f0c0:	e1a00005 	mov	r0, r5
   1f0c4:	eb001558 	bl	2462c <CSynchronizationEvent::Wait()>
   1f0c8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f0cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f0d0:	e3e00000 	mvn	r0, #0
   1f0d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f0d8:	e3a010f9 	mov	r1, #249	; 0xf9
   1f0dc:	ebffffcf 	bl	1f020 <CTCPConnection::UnexpectedState(unsigned int)>
   1f0e0:	e3e00000 	mvn	r0, #0
   1f0e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f0e8:	000007e2 	.word	0x000007e2

0001f0ec <CTCPConnection::Accept(CIPAddress*, unsigned short*)>:
   1f0ec:	e590302c 	ldr	r3, [r0, #44]	; 0x2c
   1f0f0:	e3530000 	cmp	r3, #0
   1f0f4:	ba000028 	blt	1f19c <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xb0>
   1f0f8:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1f0fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1f100:	e1a06002 	mov	r6, r2
   1f104:	e1a05001 	mov	r5, r1
   1f108:	e1a04000 	mov	r4, r0
   1f10c:	e353000a 	cmp	r3, #10
   1f110:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f114:	ea000015 	b	1f170 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x84>
   1f118:	0001f144 	.word	0x0001f144
   1f11c:	0001f15c 	.word	0x0001f15c
   1f120:	0001f14c 	.word	0x0001f14c
   1f124:	0001f170 	.word	0x0001f170
   1f128:	0001f170 	.word	0x0001f170
   1f12c:	0001f144 	.word	0x0001f144
   1f130:	0001f144 	.word	0x0001f144
   1f134:	0001f144 	.word	0x0001f144
   1f138:	0001f144 	.word	0x0001f144
   1f13c:	0001f144 	.word	0x0001f144
   1f140:	0001f144 	.word	0x0001f144
   1f144:	e3e00000 	mvn	r0, #0
   1f148:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f14c:	e59f1070 	ldr	r1, [pc, #112]	; 1f1c4 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xd8>
   1f150:	ebffffb2 	bl	1f020 <CTCPConnection::UnexpectedState(unsigned int)>
   1f154:	e3e00000 	mvn	r0, #0
   1f158:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f15c:	e2807068 	add	r7, r0, #104	; 0x68
   1f160:	e1a00007 	mov	r0, r7
   1f164:	eb00151f 	bl	245e8 <CSynchronizationEvent::Clear()>
   1f168:	e1a00007 	mov	r0, r7
   1f16c:	eb00152e 	bl	2462c <CSynchronizationEvent::Wait()>
   1f170:	e3550000 	cmp	r5, #0
   1f174:	0a00000a 	beq	1f1a4 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xb8>
   1f178:	e1a00005 	mov	r0, r5
   1f17c:	e284100c 	add	r1, r4, #12
   1f180:	eb00079d 	bl	20ffc <CIPAddress::Set(CIPAddress const&)>
   1f184:	e3560000 	cmp	r6, #0
   1f188:	0a000009 	beq	1f1b4 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xc8>
   1f18c:	e1d431b4 	ldrh	r3, [r4, #20]
   1f190:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   1f194:	e1c630b0 	strh	r3, [r6]
   1f198:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f19c:	e590002c 	ldr	r0, [r0, #44]	; 0x2c
   1f1a0:	e12fff1e 	bx	lr
   1f1a4:	e59f201c 	ldr	r2, [pc, #28]	; 1f1c8 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xdc>
   1f1a8:	e59f101c 	ldr	r1, [pc, #28]	; 1f1cc <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe0>
   1f1ac:	e59f001c 	ldr	r0, [pc, #28]	; 1f1d0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe4>
   1f1b0:	eb001592 	bl	24800 <assertion_failed>
   1f1b4:	e59f2018 	ldr	r2, [pc, #24]	; 1f1d4 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe8>
   1f1b8:	e59f100c 	ldr	r1, [pc, #12]	; 1f1cc <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xe0>
   1f1bc:	e59f0014 	ldr	r0, [pc, #20]	; 1f1d8 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xec>
   1f1c0:	eb00158e 	bl	24800 <assertion_failed>
   1f1c4:	0000010d 	.word	0x0000010d
   1f1c8:	00000123 	.word	0x00000123
   1f1cc:	00044114 	.word	0x00044114
   1f1d0:	000439d8 	.word	0x000439d8
   1f1d4:	00000126 	.word	0x00000126
   1f1d8:	000439e8 	.word	0x000439e8

0001f1dc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   1f1dc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1e0:	e24dd024 	sub	sp, sp, #36	; 0x24
   1f1e4:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   1f1e8:	e35c0006 	cmp	ip, #6
   1f1ec:	0a000002 	beq	1f1fc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x20>
   1f1f0:	e3a00000 	mov	r0, #0
   1f1f4:	e28dd024 	add	sp, sp, #36	; 0x24
   1f1f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1fc:	e3520013 	cmp	r2, #19
   1f200:	9a0000e5 	bls	1f59c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3c0>
   1f204:	e3510000 	cmp	r1, #0
   1f208:	e1a07003 	mov	r7, r3
   1f20c:	e1a06002 	mov	r6, r2
   1f210:	e1a04001 	mov	r4, r1
   1f214:	e1a05000 	mov	r5, r0
   1f218:	0a0000db 	beq	1f58c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3b0>
   1f21c:	e5d13002 	ldrb	r3, [r1, #2]
   1f220:	e5d11003 	ldrb	r1, [r1, #3]
   1f224:	e1d021b6 	ldrh	r2, [r0, #22]
   1f228:	e1833401 	orr	r3, r3, r1, lsl #8
   1f22c:	e6bf3fb3 	rev16	r3, r3
   1f230:	e6ff3073 	uxth	r3, r3
   1f234:	e1520003 	cmp	r2, r3
   1f238:	1affffec 	bne	1f1f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1f23c:	e5d0302a 	ldrb	r3, [r0, #42]	; 0x2a
   1f240:	e3530001 	cmp	r3, #1
   1f244:	0a00004a 	beq	1f374 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x198>
   1f248:	e1a01007 	mov	r1, r7
   1f24c:	e280000c 	add	r0, r0, #12
   1f250:	eb0006fc 	bl	20e48 <CIPAddress::operator!=(CIPAddress const&) const>
   1f254:	e3500000 	cmp	r0, #0
   1f258:	1affffe4 	bne	1f1f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1f25c:	e5d43000 	ldrb	r3, [r4]
   1f260:	e5d41001 	ldrb	r1, [r4, #1]
   1f264:	e1d521b4 	ldrh	r2, [r5, #20]
   1f268:	e1833401 	orr	r3, r3, r1, lsl #8
   1f26c:	e6bf3fb3 	rev16	r3, r3
   1f270:	e6ff3073 	uxth	r3, r3
   1f274:	e1520003 	cmp	r2, r3
   1f278:	0285a01c 	addeq	sl, r5, #28
   1f27c:	1affffdb 	bne	1f1f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1f280:	e1a02006 	mov	r2, r6
   1f284:	e1a01004 	mov	r1, r4
   1f288:	e1a0000a 	mov	r0, sl
   1f28c:	eb000923 	bl	21720 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   1f290:	e3500000 	cmp	r0, #0
   1f294:	1affffd5 	bne	1f1f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1f298:	e5d43005 	ldrb	r3, [r4, #5]
   1f29c:	e5d42004 	ldrb	r2, [r4, #4]
   1f2a0:	e5d48008 	ldrb	r8, [r4, #8]
   1f2a4:	e5d4c009 	ldrb	ip, [r4, #9]
   1f2a8:	e5d40006 	ldrb	r0, [r4, #6]
   1f2ac:	e5d4100a 	ldrb	r1, [r4, #10]
   1f2b0:	e5d4900d 	ldrb	r9, [r4, #13]
   1f2b4:	e1822403 	orr	r2, r2, r3, lsl #8
   1f2b8:	e5d4300c 	ldrb	r3, [r4, #12]
   1f2bc:	e188840c 	orr	r8, r8, ip, lsl #8
   1f2c0:	e1839409 	orr	r9, r3, r9, lsl #8
   1f2c4:	e1822800 	orr	r2, r2, r0, lsl #16
   1f2c8:	e1888801 	orr	r8, r8, r1, lsl #16
   1f2cc:	e5d40007 	ldrb	r0, [r4, #7]
   1f2d0:	e5d4100b 	ldrb	r1, [r4, #11]
   1f2d4:	e1a03223 	lsr	r3, r3, #4
   1f2d8:	e1a03103 	lsl	r3, r3, #2
   1f2dc:	e0466003 	sub	r6, r6, r3
   1f2e0:	e1822c00 	orr	r2, r2, r0, lsl #24
   1f2e4:	e1888c01 	orr	r8, r8, r1, lsl #24
   1f2e8:	e2191c02 	ands	r1, r9, #512	; 0x200
   1f2ec:	e58d3014 	str	r3, [sp, #20]
   1f2f0:	e6bf2f32 	rev	r2, r2
   1f2f4:	1286b001 	addne	fp, r6, #1
   1f2f8:	01a0b006 	moveq	fp, r6
   1f2fc:	e2193c01 	ands	r3, r9, #256	; 0x100
   1f300:	e58d1018 	str	r1, [sp, #24]
   1f304:	e58d200c 	str	r2, [sp, #12]
   1f308:	e58d301c 	str	r3, [sp, #28]
   1f30c:	e5d4300e 	ldrb	r3, [r4, #14]
   1f310:	e5d4200f 	ldrb	r2, [r4, #15]
   1f314:	e1a01004 	mov	r1, r4
   1f318:	e1833402 	orr	r3, r3, r2, lsl #8
   1f31c:	e6bf3fb3 	rev16	r3, r3
   1f320:	e6ff3073 	uxth	r3, r3
   1f324:	e1a00005 	mov	r0, r5
   1f328:	e58d3010 	str	r3, [sp, #16]
   1f32c:	128bb001 	addne	fp, fp, #1
   1f330:	ebfffc66 	bl	1e4d0 <CTCPConnection::ScanOptions(TTCPHeader*)>
   1f334:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f338:	e6bf8f38 	rev	r8, r8
   1f33c:	e353000a 	cmp	r3, #10
   1f340:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f344:	ea000031 	b	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f348:	0001f52c 	.word	0x0001f52c
   1f34c:	0001f418 	.word	0x0001f418
   1f350:	0001f3f0 	.word	0x0001f3f0
   1f354:	0001f394 	.word	0x0001f394
   1f358:	0001f394 	.word	0x0001f394
   1f35c:	0001f394 	.word	0x0001f394
   1f360:	0001f394 	.word	0x0001f394
   1f364:	0001f394 	.word	0x0001f394
   1f368:	0001f394 	.word	0x0001f394
   1f36c:	0001f394 	.word	0x0001f394
   1f370:	0001f394 	.word	0x0001f394
   1f374:	e5d4300d 	ldrb	r3, [r4, #13]
   1f378:	e3130002 	tst	r3, #2
   1f37c:	0affff9b 	beq	1f1f0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x14>
   1f380:	e280a01c 	add	sl, r0, #28
   1f384:	e1a0000a 	mov	r0, sl
   1f388:	e1a01007 	mov	r1, r7
   1f38c:	eb0008b7 	bl	21670 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f390:	eaffffba 	b	1f280 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa4>
   1f394:	e59530ac 	ldr	r3, [r5, #172]	; 0xac
   1f398:	e3530000 	cmp	r3, #0
   1f39c:	0a000080 	beq	1f5a4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3c8>
   1f3a0:	e59520a8 	ldr	r2, [r5, #168]	; 0xa8
   1f3a4:	e59d100c 	ldr	r1, [sp, #12]
   1f3a8:	e35b0000 	cmp	fp, #0
   1f3ac:	e0421001 	sub	r1, r2, r1
   1f3b0:	1a000116 	bne	1f810 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x634>
   1f3b4:	e3510000 	cmp	r1, #0
   1f3b8:	da0001ea 	ble	1fb68 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x98c>
   1f3bc:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f3c0:	e3530003 	cmp	r3, #3
   1f3c4:	0a00007c 	beq	1f5bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1f3c8:	e3a01000 	mov	r1, #0
   1f3cc:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f3d0:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f3d4:	e1a00005 	mov	r0, r5
   1f3d8:	e58d1004 	str	r1, [sp, #4]
   1f3dc:	e58d1000 	str	r1, [sp]
   1f3e0:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f3e4:	ebfffbda 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f3e8:	e3a00001 	mov	r0, #1
   1f3ec:	eaffff80 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f3f0:	e3190a01 	tst	r9, #4096	; 0x1000
   1f3f4:	0a000095 	beq	1f650 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x474>
   1f3f8:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1f3fc:	e0433008 	sub	r3, r3, r8
   1f400:	e3530000 	cmp	r3, #0
   1f404:	ba0001bf 	blt	1fb08 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x92c>
   1f408:	e2193b01 	ands	r3, r9, #1024	; 0x400
   1f40c:	0a0000fc 	beq	1f804 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x628>
   1f410:	e3a00001 	mov	r0, #1
   1f414:	eaffff76 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f418:	e2193b01 	ands	r3, r9, #1024	; 0x400
   1f41c:	1afffffb 	bne	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f420:	e2199a01 	ands	r9, r9, #4096	; 0x1000
   1f424:	1a0000e9 	bne	1f7d0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5f4>
   1f428:	e59d3018 	ldr	r3, [sp, #24]
   1f42c:	e3530000 	cmp	r3, #0
   1f430:	0afffff6 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f434:	e59f3b30 	ldr	r3, [pc, #2864]	; 1ff6c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd90>
   1f438:	e5933000 	ldr	r3, [r3]
   1f43c:	e3530ffa 	cmp	r3, #1000	; 0x3e8
   1f440:	2a0000ce 	bcs	1f780 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5a4>
   1f444:	e59d200c 	ldr	r2, [sp, #12]
   1f448:	e59d1010 	ldr	r1, [sp, #16]
   1f44c:	e2823001 	add	r3, r2, #1
   1f450:	e35b0000 	cmp	fp, #0
   1f454:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1f458:	e5851094 	str	r1, [r5, #148]	; 0x94
   1f45c:	e585209c 	str	r2, [r5, #156]	; 0x9c
   1f460:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f464:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1f468:	0a0001f9 	beq	1fc54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa78>
   1f46c:	e3560000 	cmp	r6, #0
   1f470:	0a000005 	beq	1f48c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x2b0>
   1f474:	e59d1014 	ldr	r1, [sp, #20]
   1f478:	e1a03009 	mov	r3, r9
   1f47c:	e1a02006 	mov	r2, r6
   1f480:	e0841001 	add	r1, r4, r1
   1f484:	e285003c 	add	r0, r5, #60	; 0x3c
   1f488:	eb0007ca 	bl	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1f48c:	e1a00005 	mov	r0, r5
   1f490:	ebfffc3b 	bl	1e584 <CTCPConnection::CalculateISN()>
   1f494:	e28560b8 	add	r6, r5, #184	; 0xb8
   1f498:	e1a01000 	mov	r1, r0
   1f49c:	e58500a4 	str	r0, [r5, #164]	; 0xa4
   1f4a0:	e1a00006 	mov	r0, r6
   1f4a4:	eb00044b 	bl	205d8 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   1f4a8:	e1a01007 	mov	r1, r7
   1f4ac:	e285000c 	add	r0, r5, #12
   1f4b0:	eb0006d1 	bl	20ffc <CIPAddress::Set(CIPAddress const&)>
   1f4b4:	e5d42001 	ldrb	r2, [r4, #1]
   1f4b8:	e5d43000 	ldrb	r3, [r4]
   1f4bc:	e1a01007 	mov	r1, r7
   1f4c0:	e1833402 	orr	r3, r3, r2, lsl #8
   1f4c4:	e6bf3fb3 	rev16	r3, r3
   1f4c8:	e1a0000a 	mov	r0, sl
   1f4cc:	e1c531b4 	strh	r3, [r5, #20]
   1f4d0:	eb000866 	bl	21670 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f4d4:	e3a01000 	mov	r1, #0
   1f4d8:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f4dc:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1f4e0:	e1a00005 	mov	r0, r5
   1f4e4:	e58d1004 	str	r1, [sp, #4]
   1f4e8:	e58d1000 	str	r1, [sp]
   1f4ec:	e3a01c12 	mov	r1, #4608	; 0x1200
   1f4f0:	ebfffb97 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f4f4:	e1a00006 	mov	r0, r6
   1f4f8:	e3a02001 	mov	r2, #1
   1f4fc:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1f500:	eb000451 	bl	2064c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1f504:	e3a02003 	mov	r2, #3
   1f508:	e59530a4 	ldr	r3, [r5, #164]	; 0xa4
   1f50c:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1f510:	e2832001 	add	r2, r3, #1
   1f514:	e2850068 	add	r0, r5, #104	; 0x68
   1f518:	e585308c 	str	r3, [r5, #140]	; 0x8c
   1f51c:	e5852090 	str	r2, [r5, #144]	; 0x90
   1f520:	eb001433 	bl	245f4 <CSynchronizationEvent::Set()>
   1f524:	e3a00001 	mov	r0, #1
   1f528:	eaffff31 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f52c:	e2196b01 	ands	r6, r9, #1024	; 0x400
   1f530:	1affffb6 	bne	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f534:	e2199a01 	ands	r9, r9, #4096	; 0x1000
   1f538:	e1a01007 	mov	r1, r7
   1f53c:	e285000c 	add	r0, r5, #12
   1f540:	0a000090 	beq	1f788 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5ac>
   1f544:	eb0006ac 	bl	20ffc <CIPAddress::Set(CIPAddress const&)>
   1f548:	e5d43000 	ldrb	r3, [r4]
   1f54c:	e5d42001 	ldrb	r2, [r4, #1]
   1f550:	e1a01007 	mov	r1, r7
   1f554:	e1833402 	orr	r3, r3, r2, lsl #8
   1f558:	e6bf3fb3 	rev16	r3, r3
   1f55c:	e1c531b4 	strh	r3, [r5, #20]
   1f560:	e1a0000a 	mov	r0, sl
   1f564:	eb000841 	bl	21670 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f568:	e1a03006 	mov	r3, r6
   1f56c:	e58d6004 	str	r6, [sp, #4]
   1f570:	e58d6000 	str	r6, [sp]
   1f574:	e1a02008 	mov	r2, r8
   1f578:	e1a00005 	mov	r0, r5
   1f57c:	e3a01b01 	mov	r1, #1024	; 0x400
   1f580:	ebfffb73 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f584:	e3a00001 	mov	r0, #1
   1f588:	eaffff19 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f58c:	e3a02f9f 	mov	r2, #636	; 0x27c
   1f590:	e59f19d8 	ldr	r1, [pc, #2520]	; 1ff70 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd94>
   1f594:	e59f09d8 	ldr	r0, [pc, #2520]	; 1ff74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd98>
   1f598:	eb001498 	bl	24800 <assertion_failed>
   1f59c:	e3e00000 	mvn	r0, #0
   1f5a0:	eaffff13 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f5a4:	e35b0000 	cmp	fp, #0
   1f5a8:	1affff83 	bne	1f3bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1f5ac:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f5b0:	e59d200c 	ldr	r2, [sp, #12]
   1f5b4:	e1520003 	cmp	r2, r3
   1f5b8:	1affff7f 	bne	1f3bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1f5bc:	e3190b01 	tst	r9, #1024	; 0x400
   1f5c0:	0a000054 	beq	1f718 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x53c>
   1f5c4:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f5c8:	e2433003 	sub	r3, r3, #3
   1f5cc:	e3530007 	cmp	r3, #7
   1f5d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f5d4:	ea00015e 	b	1fb54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x978>
   1f5d8:	0001f630 	.word	0x0001f630
   1f5dc:	0001f5f8 	.word	0x0001f5f8
   1f5e0:	0001f5f8 	.word	0x0001f5f8
   1f5e4:	0001f5f8 	.word	0x0001f5f8
   1f5e8:	0001f5f8 	.word	0x0001f5f8
   1f5ec:	0001f618 	.word	0x0001f618
   1f5f0:	0001f618 	.word	0x0001f618
   1f5f4:	0001f618 	.word	0x0001f618
   1f5f8:	e3e03000 	mvn	r3, #0
   1f5fc:	e2850048 	add	r0, r5, #72	; 0x48
   1f600:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1f604:	eb0003d4 	bl	2055c <CRetransmissionQueue::Flush()>
   1f608:	e2850030 	add	r0, r5, #48	; 0x30
   1f60c:	eb000733 	bl	212e0 <CNetQueue::Flush()>
   1f610:	e285003c 	add	r0, r5, #60	; 0x3c
   1f614:	eb000731 	bl	212e0 <CNetQueue::Flush()>
   1f618:	e3a03000 	mov	r3, #0
   1f61c:	e2850068 	add	r0, r5, #104	; 0x68
   1f620:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f624:	eb0013f2 	bl	245f4 <CSynchronizationEvent::Set()>
   1f628:	e3a00001 	mov	r0, #1
   1f62c:	eafffef0 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f630:	e2850048 	add	r0, r5, #72	; 0x48
   1f634:	eb0003c8 	bl	2055c <CRetransmissionQueue::Flush()>
   1f638:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1f63c:	e3530000 	cmp	r3, #0
   1f640:	1a00018b 	bne	1fc74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa98>
   1f644:	e3a00001 	mov	r0, #1
   1f648:	e5c5002a 	strb	r0, [r5, #42]	; 0x2a
   1f64c:	eafffee8 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f650:	e3190b01 	tst	r9, #1024	; 0x400
   1f654:	1affff6d 	bne	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f658:	e2193c02 	ands	r3, r9, #512	; 0x200
   1f65c:	e3530000 	cmp	r3, #0
   1f660:	0affff6a 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f664:	e59d200c 	ldr	r2, [sp, #12]
   1f668:	e2823001 	add	r3, r2, #1
   1f66c:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1f670:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f674:	e59520a4 	ldr	r2, [r5, #164]	; 0xa4
   1f678:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f67c:	e0423003 	sub	r3, r2, r3
   1f680:	e3530000 	cmp	r3, #0
   1f684:	ba000156 	blt	1fbe4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa08>
   1f688:	e3a07000 	mov	r7, #0
   1f68c:	e3a03003 	mov	r3, #3
   1f690:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f694:	e58d7004 	str	r7, [sp, #4]
   1f698:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1f69c:	e58d7000 	str	r7, [sp]
   1f6a0:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f6a4:	e3a01c12 	mov	r1, #4608	; 0x1200
   1f6a8:	e28580b8 	add	r8, r5, #184	; 0xb8
   1f6ac:	e1a00005 	mov	r0, r5
   1f6b0:	ebfffb27 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f6b4:	e3a02001 	mov	r2, #1
   1f6b8:	e59510a4 	ldr	r1, [r5, #164]	; 0xa4
   1f6bc:	e1a00008 	mov	r0, r8
   1f6c0:	eb0003e1 	bl	2064c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   1f6c4:	e3a03005 	mov	r3, #5
   1f6c8:	e1a00008 	mov	r0, r8
   1f6cc:	e5853060 	str	r3, [r5, #96]	; 0x60
   1f6d0:	eb0003be 	bl	205d0 <CRetransmissionTimeoutCalculator::GetRTO() const>
   1f6d4:	e3a01001 	mov	r1, #1
   1f6d8:	e1a02000 	mov	r2, r0
   1f6dc:	e1a00005 	mov	r0, r5
   1f6e0:	ebfffc75 	bl	1e8bc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1f6e4:	e59d301c 	ldr	r3, [sp, #28]
   1f6e8:	e1530007 	cmp	r3, r7
   1f6ec:	1a000129 	bne	1fb98 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9bc>
   1f6f0:	e1560007 	cmp	r6, r7
   1f6f4:	0affff45 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f6f8:	e59d3014 	ldr	r3, [sp, #20]
   1f6fc:	e285003c 	add	r0, r5, #60	; 0x3c
   1f700:	e0841003 	add	r1, r4, r3
   1f704:	e1a02006 	mov	r2, r6
   1f708:	e3a03000 	mov	r3, #0
   1f70c:	eb000729 	bl	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1f710:	e3a00001 	mov	r0, #1
   1f714:	eafffeb6 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f718:	e2193c02 	ands	r3, r9, #512	; 0x200
   1f71c:	e3530000 	cmp	r3, #0
   1f720:	0a000047 	beq	1f844 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x668>
   1f724:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f728:	e3530003 	cmp	r3, #3
   1f72c:	0a000128 	beq	1fbd4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9f8>
   1f730:	e3a04000 	mov	r4, #0
   1f734:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f738:	e3a01b01 	mov	r1, #1024	; 0x400
   1f73c:	e1a03004 	mov	r3, r4
   1f740:	e58d4004 	str	r4, [sp, #4]
   1f744:	e58d4000 	str	r4, [sp]
   1f748:	e1a00005 	mov	r0, r5
   1f74c:	ebfffb00 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f750:	e3e03000 	mvn	r3, #0
   1f754:	e2850048 	add	r0, r5, #72	; 0x48
   1f758:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1f75c:	eb00037e 	bl	2055c <CRetransmissionQueue::Flush()>
   1f760:	e2850030 	add	r0, r5, #48	; 0x30
   1f764:	eb0006dd 	bl	212e0 <CNetQueue::Flush()>
   1f768:	e285003c 	add	r0, r5, #60	; 0x3c
   1f76c:	eb0006db 	bl	212e0 <CNetQueue::Flush()>
   1f770:	e5c5402a 	strb	r4, [r5, #42]	; 0x2a
   1f774:	e2850068 	add	r0, r5, #104	; 0x68
   1f778:	eb00139d 	bl	245f4 <CSynchronizationEvent::Set()>
   1f77c:	eaffff23 	b	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f780:	e1a01007 	mov	r1, r7
   1f784:	e285000c 	add	r0, r5, #12
   1f788:	eb00061b 	bl	20ffc <CIPAddress::Set(CIPAddress const&)>
   1f78c:	e5d42001 	ldrb	r2, [r4, #1]
   1f790:	e5d43000 	ldrb	r3, [r4]
   1f794:	e1a01007 	mov	r1, r7
   1f798:	e1833402 	orr	r3, r3, r2, lsl #8
   1f79c:	e6bf3fb3 	rev16	r3, r3
   1f7a0:	e1a0000a 	mov	r0, sl
   1f7a4:	e1c531b4 	strh	r3, [r5, #20]
   1f7a8:	eb0007b0 	bl	21670 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f7ac:	e59d300c 	ldr	r3, [sp, #12]
   1f7b0:	e58d9004 	str	r9, [sp, #4]
   1f7b4:	e58d9000 	str	r9, [sp]
   1f7b8:	e083300b 	add	r3, r3, fp
   1f7bc:	e1a02009 	mov	r2, r9
   1f7c0:	e1a00005 	mov	r0, r5
   1f7c4:	e3a01b05 	mov	r1, #5120	; 0x1400
   1f7c8:	ebfffae1 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f7cc:	eaffff0f 	b	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f7d0:	e1a01007 	mov	r1, r7
   1f7d4:	e285000c 	add	r0, r5, #12
   1f7d8:	e58d300c 	str	r3, [sp, #12]
   1f7dc:	eb000606 	bl	20ffc <CIPAddress::Set(CIPAddress const&)>
   1f7e0:	e5d40001 	ldrb	r0, [r4, #1]
   1f7e4:	e5d42000 	ldrb	r2, [r4]
   1f7e8:	e1a01007 	mov	r1, r7
   1f7ec:	e1822400 	orr	r2, r2, r0, lsl #8
   1f7f0:	e6bf2fb2 	rev16	r2, r2
   1f7f4:	e1a0000a 	mov	r0, sl
   1f7f8:	e1c521b4 	strh	r2, [r5, #20]
   1f7fc:	eb00079b 	bl	21670 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   1f800:	e59d300c 	ldr	r3, [sp, #12]
   1f804:	e58d3004 	str	r3, [sp, #4]
   1f808:	e58d3000 	str	r3, [sp]
   1f80c:	eaffff58 	b	1f574 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x398>
   1f810:	e3510000 	cmp	r1, #0
   1f814:	da0000d9 	ble	1fb80 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9a4>
   1f818:	e59d100c 	ldr	r1, [sp, #12]
   1f81c:	e081000b 	add	r0, r1, fp
   1f820:	e2821001 	add	r1, r2, #1
   1f824:	e0411000 	sub	r1, r1, r0
   1f828:	e3510000 	cmp	r1, #0
   1f82c:	cafffee2 	bgt	1f3bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1f830:	e0833002 	add	r3, r3, r2
   1f834:	e1e03003 	mvn	r3, r3
   1f838:	e1730000 	cmn	r3, r0
   1f83c:	5afffede 	bpl	1f3bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1f840:	eaffff5d 	b	1f5bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1f844:	e3190a01 	tst	r9, #4096	; 0x1000
   1f848:	0afffef0 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f84c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f850:	e2433003 	sub	r3, r3, #3
   1f854:	e3530007 	cmp	r3, #7
   1f858:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f85c:	ea000100 	b	1fc64 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa88>
   1f860:	0001fa30 	.word	0x0001fa30
   1f864:	0001f9e0 	.word	0x0001f9e0
   1f868:	0001f9e0 	.word	0x0001f9e0
   1f86c:	0001f9e0 	.word	0x0001f9e0
   1f870:	0001f9e0 	.word	0x0001f9e0
   1f874:	0001f9e0 	.word	0x0001f9e0
   1f878:	0001f9b8 	.word	0x0001f9b8
   1f87c:	0001f880 	.word	0x0001f880
   1f880:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f884:	e1580003 	cmp	r8, r3
   1f888:	0a000120 	beq	1fd10 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb34>
   1f88c:	e35b0000 	cmp	fp, #0
   1f890:	0afffede 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f894:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f898:	e2433004 	sub	r3, r3, #4
   1f89c:	e3530006 	cmp	r3, #6
   1f8a0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f8a4:	ea0000fa 	b	1fc94 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xab8>
   1f8a8:	0001f8c4 	.word	0x0001f8c4
   1f8ac:	0001f8c4 	.word	0x0001f8c4
   1f8b0:	0001f8c4 	.word	0x0001f8c4
   1f8b4:	0001f92c 	.word	0x0001f92c
   1f8b8:	0001f92c 	.word	0x0001f92c
   1f8bc:	0001f92c 	.word	0x0001f92c
   1f8c0:	0001f92c 	.word	0x0001f92c
   1f8c4:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f8c8:	e59d200c 	ldr	r2, [sp, #12]
   1f8cc:	e1520003 	cmp	r2, r3
   1f8d0:	1a000105 	bne	1fcec <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb10>
   1f8d4:	e3560000 	cmp	r6, #0
   1f8d8:	0a000013 	beq	1f92c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x750>
   1f8dc:	e59d3014 	ldr	r3, [sp, #20]
   1f8e0:	e1a02006 	mov	r2, r6
   1f8e4:	e0841003 	add	r1, r4, r3
   1f8e8:	e285003c 	add	r0, r5, #60	; 0x3c
   1f8ec:	e3a03000 	mov	r3, #0
   1f8f0:	eb0006b0 	bl	213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   1f8f4:	e3a02000 	mov	r2, #0
   1f8f8:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f8fc:	e58d2004 	str	r2, [sp, #4]
   1f900:	e0863003 	add	r3, r6, r3
   1f904:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f908:	e58d2000 	str	r2, [sp]
   1f90c:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f910:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f914:	e1a00005 	mov	r0, r5
   1f918:	ebfffa8d 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f91c:	e3190b02 	tst	r9, #2048	; 0x800
   1f920:	0a000001 	beq	1f92c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x750>
   1f924:	e2850068 	add	r0, r5, #104	; 0x68
   1f928:	eb001331 	bl	245f4 <CSynchronizationEvent::Set()>
   1f92c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f930:	e3530000 	cmp	r3, #0
   1f934:	0afffeb5 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f938:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f93c:	e3530001 	cmp	r3, #1
   1f940:	0afffeb2 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f944:	e5d5202a 	ldrb	r2, [r5, #42]	; 0x2a
   1f948:	e59d301c 	ldr	r3, [sp, #28]
   1f94c:	e3530000 	cmp	r3, #0
   1f950:	13520002 	cmpne	r2, #2
   1f954:	03a02001 	moveq	r2, #1
   1f958:	13a02000 	movne	r2, #0
   1f95c:	0afffeab 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1f960:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1f964:	e58d2004 	str	r2, [sp, #4]
   1f968:	e2833001 	add	r3, r3, #1
   1f96c:	e58d2000 	str	r2, [sp]
   1f970:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1f974:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1f978:	e3a01a01 	mov	r1, #4096	; 0x1000
   1f97c:	e1a00005 	mov	r0, r5
   1f980:	ebfffa73 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1f984:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1f988:	e2433003 	sub	r3, r3, #3
   1f98c:	e3530007 	cmp	r3, #7
   1f990:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1f994:	ea000143 	b	1fea8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xccc>
   1f998:	0001fe90 	.word	0x0001fe90
   1f99c:	0001fe90 	.word	0x0001fe90
   1f9a0:	0001febc 	.word	0x0001febc
   1f9a4:	0001fe58 	.word	0x0001fe58
   1f9a8:	0001f410 	.word	0x0001f410
   1f9ac:	0001f410 	.word	0x0001f410
   1f9b0:	0001f410 	.word	0x0001f410
   1f9b4:	0001fd48 	.word	0x0001fd48
   1f9b8:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1f9bc:	e1580003 	cmp	r8, r3
   1f9c0:	1affffb1 	bne	1f88c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1f9c4:	e3a03000 	mov	r3, #0
   1f9c8:	e2850068 	add	r0, r5, #104	; 0x68
   1f9cc:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1f9d0:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1f9d4:	eb001306 	bl	245f4 <CSynchronizationEvent::Set()>
   1f9d8:	e3a00001 	mov	r0, #1
   1f9dc:	eafffe04 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1f9e0:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1f9e4:	e0532008 	subs	r2, r3, r8
   1f9e8:	4a000112 	bmi	1fe38 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc5c>
   1f9ec:	e0483003 	sub	r3, r8, r3
   1f9f0:	e3530000 	cmp	r3, #0
   1f9f4:	c5952090 	ldrgt	r2, [r5, #144]	; 0x90
   1f9f8:	da0000f7 	ble	1fddc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc00>
   1f9fc:	e0423008 	sub	r3, r2, r8
   1fa00:	e3530000 	cmp	r3, #0
   1fa04:	ba0000eb 	blt	1fdb8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbdc>
   1fa08:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1fa0c:	e2433004 	sub	r3, r3, #4
   1fa10:	e3530004 	cmp	r3, #4
   1fa14:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1fa18:	ea0000e2 	b	1fda8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbcc>
   1fa1c:	0001f88c 	.word	0x0001f88c
   1fa20:	0001faa8 	.word	0x0001faa8
   1fa24:	0001faec 	.word	0x0001faec
   1fa28:	0001f88c 	.word	0x0001f88c
   1fa2c:	0001fa60 	.word	0x0001fa60
   1fa30:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1fa34:	e0433008 	sub	r3, r3, r8
   1fa38:	e3530000 	cmp	r3, #0
   1fa3c:	da000098 	ble	1fca4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xac8>
   1fa40:	e3a03000 	mov	r3, #0
   1fa44:	e1a02008 	mov	r2, r8
   1fa48:	e58d3004 	str	r3, [sp, #4]
   1fa4c:	e58d3000 	str	r3, [sp]
   1fa50:	e3a01b01 	mov	r1, #1024	; 0x400
   1fa54:	e1a00005 	mov	r0, r5
   1fa58:	ebfffa3d 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fa5c:	eaffff8a 	b	1f88c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fa60:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fa64:	e1580003 	cmp	r8, r3
   1fa68:	1affff87 	bne	1f88c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fa6c:	e1a01008 	mov	r1, r8
   1fa70:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fa74:	eb000359 	bl	207e0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fa78:	e3a03000 	mov	r3, #0
   1fa7c:	e1a00005 	mov	r0, r5
   1fa80:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1fa84:	e3a01001 	mov	r1, #1
   1fa88:	ebfffad8 	bl	1e5f0 <CTCPConnection::StopTimer(unsigned int)>
   1fa8c:	e3a0300a 	mov	r3, #10
   1fa90:	e59f24e0 	ldr	r2, [pc, #1248]	; 1ff78 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1fa94:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fa98:	e3a01002 	mov	r1, #2
   1fa9c:	e1a00005 	mov	r0, r5
   1faa0:	ebfffb85 	bl	1e8bc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1faa4:	eaffff78 	b	1f88c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1faa8:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1faac:	e1580003 	cmp	r8, r3
   1fab0:	1affff75 	bne	1f88c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fab4:	e1a01008 	mov	r1, r8
   1fab8:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fabc:	eb000347 	bl	207e0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fac0:	e3a03000 	mov	r3, #0
   1fac4:	e3a01001 	mov	r1, #1
   1fac8:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1facc:	e1a00005 	mov	r0, r5
   1fad0:	ebfffac6 	bl	1e5f0 <CTCPConnection::StopTimer(unsigned int)>
   1fad4:	e3a03006 	mov	r3, #6
   1fad8:	e59f2498 	ldr	r2, [pc, #1176]	; 1ff78 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1fadc:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fae0:	e3a01002 	mov	r1, #2
   1fae4:	e1a00005 	mov	r0, r5
   1fae8:	ebfffb73 	bl	1e8bc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1faec:	e2850048 	add	r0, r5, #72	; 0x48
   1faf0:	eb0001ce 	bl	20230 <CRetransmissionQueue::IsEmpty() const>
   1faf4:	e3500000 	cmp	r0, #0
   1faf8:	0affff63 	beq	1f88c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fafc:	e2850068 	add	r0, r5, #104	; 0x68
   1fb00:	eb0012bb 	bl	245f4 <CSynchronizationEvent::Set()>
   1fb04:	eaffff60 	b	1f88c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fb08:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fb0c:	e0483003 	sub	r3, r8, r3
   1fb10:	e3530000 	cmp	r3, #0
   1fb14:	cafffe3b 	bgt	1f408 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x22c>
   1fb18:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
   1fb1c:	e0433008 	sub	r3, r3, r8
   1fb20:	e3530000 	cmp	r3, #0
   1fb24:	cafffe39 	bgt	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1fb28:	e3190b01 	tst	r9, #1024	; 0x400
   1fb2c:	0a00008a 	beq	1fd5c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb80>
   1fb30:	e3a03000 	mov	r3, #0
   1fb34:	e3e02000 	mvn	r2, #0
   1fb38:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fb3c:	e2850068 	add	r0, r5, #104	; 0x68
   1fb40:	e5c5305d 	strb	r3, [r5, #93]	; 0x5d
   1fb44:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1fb48:	eb0012a9 	bl	245f4 <CSynchronizationEvent::Set()>
   1fb4c:	e3a00001 	mov	r0, #1
   1fb50:	eafffda7 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fb54:	e1a00005 	mov	r0, r5
   1fb58:	e59f141c 	ldr	r1, [pc, #1052]	; 1ff7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xda0>
   1fb5c:	ebfffd2f 	bl	1f020 <CTCPConnection::UnexpectedState(unsigned int)>
   1fb60:	e3a00001 	mov	r0, #1
   1fb64:	eafffda2 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fb68:	e0833002 	add	r3, r3, r2
   1fb6c:	e59d200c 	ldr	r2, [sp, #12]
   1fb70:	e0423003 	sub	r3, r2, r3
   1fb74:	e3530000 	cmp	r3, #0
   1fb78:	aafffe0f 	bge	1f3bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1e0>
   1fb7c:	eafffe8e 	b	1f5bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1fb80:	e59d000c 	ldr	r0, [sp, #12]
   1fb84:	e0831002 	add	r1, r3, r2
   1fb88:	e0401001 	sub	r1, r0, r1
   1fb8c:	e3510000 	cmp	r1, #0
   1fb90:	aaffff20 	bge	1f818 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x63c>
   1fb94:	eafffe88 	b	1f5bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3e0>
   1fb98:	e58d7004 	str	r7, [sp, #4]
   1fb9c:	e58d7000 	str	r7, [sp]
   1fba0:	e1a03007 	mov	r3, r7
   1fba4:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fba8:	e3a01b01 	mov	r1, #1024	; 0x400
   1fbac:	e1a00005 	mov	r0, r5
   1fbb0:	ebfff9e7 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fbb4:	e3e03000 	mvn	r3, #0
   1fbb8:	e5c5702a 	strb	r7, [r5, #42]	; 0x2a
   1fbbc:	e2850068 	add	r0, r5, #104	; 0x68
   1fbc0:	e585302c 	str	r3, [r5, #44]	; 0x2c
   1fbc4:	eb00128a 	bl	245f4 <CSynchronizationEvent::Set()>
   1fbc8:	e3560000 	cmp	r6, #0
   1fbcc:	0afffe0f 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1fbd0:	eafffec8 	b	1f6f8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x51c>
   1fbd4:	e5d53029 	ldrb	r3, [r5, #41]	; 0x29
   1fbd8:	e3530000 	cmp	r3, #0
   1fbdc:	1afffed3 	bne	1f730 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x554>
   1fbe0:	eafffe97 	b	1f644 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x468>
   1fbe4:	e3a07000 	mov	r7, #0
   1fbe8:	e3a03004 	mov	r3, #4
   1fbec:	e3a01001 	mov	r1, #1
   1fbf0:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fbf4:	e1a00005 	mov	r0, r5
   1fbf8:	e5c5705d 	strb	r7, [r5, #93]	; 0x5d
   1fbfc:	ebfffa7b 	bl	1e5f0 <CTCPConnection::StopTimer(unsigned int)>
   1fc00:	e3a03005 	mov	r3, #5
   1fc04:	e2850068 	add	r0, r5, #104	; 0x68
   1fc08:	e5853060 	str	r3, [r5, #96]	; 0x60
   1fc0c:	eb001278 	bl	245f4 <CSynchronizationEvent::Set()>
   1fc10:	e59d3010 	ldr	r3, [sp, #16]
   1fc14:	e58d7004 	str	r7, [sp, #4]
   1fc18:	e58d7000 	str	r7, [sp]
   1fc1c:	e5853094 	str	r3, [r5, #148]	; 0x94
   1fc20:	e59d300c 	ldr	r3, [sp, #12]
   1fc24:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1fc28:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1fc2c:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fc30:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fc34:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fc38:	e1a00005 	mov	r0, r5
   1fc3c:	ebfff9c4 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fc40:	e2193c01 	ands	r3, r9, #256	; 0x100
   1fc44:	e1530007 	cmp	r3, r7
   1fc48:	01560007 	cmpeq	r6, r7
   1fc4c:	1affff0e 	bne	1f88c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fc50:	eafffdee 	b	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1fc54:	e59f2324 	ldr	r2, [pc, #804]	; 1ff80 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xda4>
   1fc58:	e59f1310 	ldr	r1, [pc, #784]	; 1ff70 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd94>
   1fc5c:	e59f0320 	ldr	r0, [pc, #800]	; 1ff84 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xda8>
   1fc60:	eb0012e6 	bl	24800 <assertion_failed>
   1fc64:	e59f131c 	ldr	r1, [pc, #796]	; 1ff88 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdac>
   1fc68:	e1a00005 	mov	r0, r5
   1fc6c:	ebfffceb 	bl	1f020 <CTCPConnection::UnexpectedState(unsigned int)>
   1fc70:	eaffff05 	b	1f88c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fc74:	e3e02000 	mvn	r2, #0
   1fc78:	e3a03000 	mov	r3, #0
   1fc7c:	e585202c 	str	r2, [r5, #44]	; 0x2c
   1fc80:	e2850068 	add	r0, r5, #104	; 0x68
   1fc84:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fc88:	eb001259 	bl	245f4 <CSynchronizationEvent::Set()>
   1fc8c:	e3a00001 	mov	r0, #1
   1fc90:	eafffd57 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fc94:	e59f12f0 	ldr	r1, [pc, #752]	; 1ff8c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdb0>
   1fc98:	e1a00005 	mov	r0, r5
   1fc9c:	ebfffcdf 	bl	1f020 <CTCPConnection::UnexpectedState(unsigned int)>
   1fca0:	eaffff21 	b	1f92c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x750>
   1fca4:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fca8:	e0483003 	sub	r3, r8, r3
   1fcac:	e3530000 	cmp	r3, #0
   1fcb0:	caffff62 	bgt	1fa40 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x864>
   1fcb4:	e59d3010 	ldr	r3, [sp, #16]
   1fcb8:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1fcbc:	e5853094 	str	r3, [r5, #148]	; 0x94
   1fcc0:	e59d300c 	ldr	r3, [sp, #12]
   1fcc4:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1fcc8:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1fccc:	e1a01008 	mov	r1, r8
   1fcd0:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fcd4:	eb0002c1 	bl	207e0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fcd8:	e3a02004 	mov	r2, #4
   1fcdc:	e3a03005 	mov	r3, #5
   1fce0:	e5c5202a 	strb	r2, [r5, #42]	; 0x2a
   1fce4:	e5853060 	str	r3, [r5, #96]	; 0x60
   1fce8:	eafffee7 	b	1f88c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fcec:	e3a02000 	mov	r2, #0
   1fcf0:	e58d2004 	str	r2, [sp, #4]
   1fcf4:	e58d2000 	str	r2, [sp]
   1fcf8:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fcfc:	e1a00005 	mov	r0, r5
   1fd00:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fd04:	ebfff992 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fd08:	e3a00001 	mov	r0, #1
   1fd0c:	eafffd38 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fd10:	e3a02000 	mov	r2, #0
   1fd14:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fd18:	e5c5205e 	strb	r2, [r5, #94]	; 0x5e
   1fd1c:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fd20:	e58d2004 	str	r2, [sp, #4]
   1fd24:	e58d2000 	str	r2, [sp]
   1fd28:	e1a00005 	mov	r0, r5
   1fd2c:	e1a02008 	mov	r2, r8
   1fd30:	ebfff987 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fd34:	e59f223c 	ldr	r2, [pc, #572]	; 1ff78 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1fd38:	e3a01002 	mov	r1, #2
   1fd3c:	e1a00005 	mov	r0, r5
   1fd40:	ebfffadd 	bl	1e8bc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fd44:	eafffed0 	b	1f88c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fd48:	e1a00005 	mov	r0, r5
   1fd4c:	e59f2224 	ldr	r2, [pc, #548]	; 1ff78 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1fd50:	e3a01002 	mov	r1, #2
   1fd54:	ebfffad8 	bl	1e8bc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fd58:	eafffdac 	b	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1fd5c:	e2193c02 	ands	r3, r9, #512	; 0x200
   1fd60:	e3530000 	cmp	r3, #0
   1fd64:	0afffda9 	beq	1f410 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x234>
   1fd68:	e59d200c 	ldr	r2, [sp, #12]
   1fd6c:	e1a01008 	mov	r1, r8
   1fd70:	e2823001 	add	r3, r2, #1
   1fd74:	e58520b0 	str	r2, [r5, #176]	; 0xb0
   1fd78:	e58530a8 	str	r3, [r5, #168]	; 0xa8
   1fd7c:	e28500b8 	add	r0, r5, #184	; 0xb8
   1fd80:	eb000296 	bl	207e0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fd84:	e595108c 	ldr	r1, [r5, #140]	; 0x8c
   1fd88:	e0481001 	sub	r1, r8, r1
   1fd8c:	e3510001 	cmp	r1, #1
   1fd90:	9a000002 	bls	1fda0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc4>
   1fd94:	e2411001 	sub	r1, r1, #1
   1fd98:	e2850048 	add	r0, r5, #72	; 0x48
   1fd9c:	eb0001ca 	bl	204cc <CRetransmissionQueue::Advance(unsigned int)>
   1fda0:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1fda4:	eafffe32 	b	1f674 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x498>
   1fda8:	e3a01e49 	mov	r1, #1168	; 0x490
   1fdac:	e1a00005 	mov	r0, r5
   1fdb0:	ebfffc9a 	bl	1f020 <CTCPConnection::UnexpectedState(unsigned int)>
   1fdb4:	eafffeb4 	b	1f88c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x6b0>
   1fdb8:	e3a03000 	mov	r3, #0
   1fdbc:	e58d3004 	str	r3, [sp, #4]
   1fdc0:	e58d3000 	str	r3, [sp]
   1fdc4:	e59530a8 	ldr	r3, [r5, #168]	; 0xa8
   1fdc8:	e1a00005 	mov	r0, r5
   1fdcc:	e3a01a01 	mov	r1, #4096	; 0x1000
   1fdd0:	ebfff95f 	bl	1e354 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   1fdd4:	e3a00001 	mov	r0, #1
   1fdd8:	eafffd05 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fddc:	e3520000 	cmp	r2, #0
   1fde0:	1affff08 	bne	1fa08 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1fde4:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fde8:	e0483003 	sub	r3, r8, r3
   1fdec:	e3530000 	cmp	r3, #0
   1fdf0:	caffff04 	bgt	1fa08 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1fdf4:	e595309c 	ldr	r3, [r5, #156]	; 0x9c
   1fdf8:	e59d100c 	ldr	r1, [sp, #12]
   1fdfc:	e0432001 	sub	r2, r3, r1
   1fe00:	e3520000 	cmp	r2, #0
   1fe04:	ba000005 	blt	1fe20 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc44>
   1fe08:	e1510003 	cmp	r1, r3
   1fe0c:	1afffefd 	bne	1fa08 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1fe10:	e59530a0 	ldr	r3, [r5, #160]	; 0xa0
   1fe14:	e0433008 	sub	r3, r3, r8
   1fe18:	e3530000 	cmp	r3, #0
   1fe1c:	cafffef9 	bgt	1fa08 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1fe20:	e59d3010 	ldr	r3, [sp, #16]
   1fe24:	e58580a0 	str	r8, [r5, #160]	; 0xa0
   1fe28:	e5853094 	str	r3, [r5, #148]	; 0x94
   1fe2c:	e59d300c 	ldr	r3, [sp, #12]
   1fe30:	e585309c 	str	r3, [r5, #156]	; 0x9c
   1fe34:	eafffef3 	b	1fa08 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1fe38:	e5952090 	ldr	r2, [r5, #144]	; 0x90
   1fe3c:	e0481002 	sub	r1, r8, r2
   1fe40:	e3510000 	cmp	r1, #0
   1fe44:	da000026 	ble	1fee4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd08>
   1fe48:	e0483003 	sub	r3, r8, r3
   1fe4c:	e3530000 	cmp	r3, #0
   1fe50:	cafffee9 	bgt	1f9fc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x820>
   1fe54:	eafffeeb 	b	1fa08 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x82c>
   1fe58:	e3a01001 	mov	r1, #1
   1fe5c:	e1a00005 	mov	r0, r5
   1fe60:	ebfff9e2 	bl	1e5f0 <CTCPConnection::StopTimer(unsigned int)>
   1fe64:	e3a01000 	mov	r1, #0
   1fe68:	e1a00005 	mov	r0, r5
   1fe6c:	ebfff9df 	bl	1e5f0 <CTCPConnection::StopTimer(unsigned int)>
   1fe70:	e3a0300a 	mov	r3, #10
   1fe74:	e1a00005 	mov	r0, r5
   1fe78:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fe7c:	e59f20f4 	ldr	r2, [pc, #244]	; 1ff78 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd9c>
   1fe80:	e3a01002 	mov	r1, #2
   1fe84:	ebfffa8c 	bl	1e8bc <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   1fe88:	e3a00001 	mov	r0, #1
   1fe8c:	eafffcd8 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fe90:	e3a03007 	mov	r3, #7
   1fe94:	e2850068 	add	r0, r5, #104	; 0x68
   1fe98:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fe9c:	eb0011d4 	bl	245f4 <CSynchronizationEvent::Set()>
   1fea0:	e3a00001 	mov	r0, #1
   1fea4:	eafffcd2 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fea8:	e1a00005 	mov	r0, r5
   1feac:	e59f10dc 	ldr	r1, [pc, #220]	; 1ff90 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xdb4>
   1feb0:	ebfffc5a 	bl	1f020 <CTCPConnection::UnexpectedState(unsigned int)>
   1feb4:	e3a00001 	mov	r0, #1
   1feb8:	eafffccd 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1febc:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fec0:	e1580003 	cmp	r8, r3
   1fec4:	03a04000 	moveq	r4, #0
   1fec8:	03a01001 	moveq	r1, #1
   1fecc:	05c5405e 	strbeq	r4, [r5, #94]	; 0x5e
   1fed0:	0affffe1 	beq	1fe5c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc80>
   1fed4:	e3a03008 	mov	r3, #8
   1fed8:	e3a00001 	mov	r0, #1
   1fedc:	e5c5302a 	strb	r3, [r5, #42]	; 0x2a
   1fee0:	eafffcc3 	b	1f1f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   1fee4:	e1a01008 	mov	r1, r8
   1fee8:	e28500b8 	add	r0, r5, #184	; 0xb8
   1feec:	eb00023b 	bl	207e0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   1fef0:	e5953090 	ldr	r3, [r5, #144]	; 0x90
   1fef4:	e595708c 	ldr	r7, [r5, #140]	; 0x8c
   1fef8:	e1580003 	cmp	r8, r3
   1fefc:	e0487007 	sub	r7, r8, r7
   1ff00:	e585808c 	str	r8, [r5, #140]	; 0x8c
   1ff04:	1a000004 	bne	1ff1c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd40>
   1ff08:	e3a01001 	mov	r1, #1
   1ff0c:	e1a00005 	mov	r0, r5
   1ff10:	ebfff9b6 	bl	1e5f0 <CTCPConnection::StopTimer(unsigned int)>
   1ff14:	e3a03005 	mov	r3, #5
   1ff18:	e5853060 	str	r3, [r5, #96]	; 0x60
   1ff1c:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1ff20:	e3530005 	cmp	r3, #5
   1ff24:	0a00000c 	beq	1ff5c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd80>
   1ff28:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1ff2c:	e3530008 	cmp	r3, #8
   1ff30:	0a000009 	beq	1ff5c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd80>
   1ff34:	e5d5302a 	ldrb	r3, [r5, #42]	; 0x2a
   1ff38:	e3530004 	cmp	r3, #4
   1ff3c:	03570001 	cmpeq	r7, #1
   1ff40:	0affffab 	beq	1fdf4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc18>
   1ff44:	e3570000 	cmp	r7, #0
   1ff48:	0affffa9 	beq	1fdf4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc18>
   1ff4c:	e1a01007 	mov	r1, r7
   1ff50:	e2850048 	add	r0, r5, #72	; 0x48
   1ff54:	eb00015c 	bl	204cc <CRetransmissionQueue::Advance(unsigned int)>
   1ff58:	eaffffa5 	b	1fdf4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc18>
   1ff5c:	e3a03000 	mov	r3, #0
   1ff60:	e2477001 	sub	r7, r7, #1
   1ff64:	e5c5305e 	strb	r3, [r5, #94]	; 0x5e
   1ff68:	eafffff1 	b	1ff34 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd58>
   1ff6c:	0004e0e4 	.word	0x0004e0e4
   1ff70:	00044114 	.word	0x00044114
   1ff74:	00043a78 	.word	0x00043a78
   1ff78:	00001770 	.word	0x00001770
   1ff7c:	000003e3 	.word	0x000003e3
   1ff80:	00000301 	.word	0x00000301
   1ff84:	00044294 	.word	0x00044294
   1ff88:	000004a9 	.word	0x000004a9
   1ff8c:	000004dc 	.word	0x000004dc
   1ff90:	00000519 	.word	0x00000519

0001ff94 <CTCPConnection::TimerHandler(unsigned int)>:
   1ff94:	e3510002 	cmp	r1, #2
   1ff98:	e92d4070 	push	{r4, r5, r6, lr}
   1ff9c:	8a000040 	bhi	200a4 <CTCPConnection::TimerHandler(unsigned int)+0x110>
   1ffa0:	e1a04000 	mov	r4, r0
   1ffa4:	e5900088 	ldr	r0, [r0, #136]	; 0x88
   1ffa8:	e1a05001 	mov	r5, r1
   1ffac:	e3500000 	cmp	r0, #0
   1ffb0:	1a00000d 	bne	1ffec <CTCPConnection::TimerHandler(unsigned int)+0x58>
   1ffb4:	e281301e 	add	r3, r1, #30
   1ffb8:	e0843103 	add	r3, r4, r3, lsl #2
   1ffbc:	e5932004 	ldr	r2, [r3, #4]
   1ffc0:	e3520000 	cmp	r2, #0
   1ffc4:	15830004 	strne	r0, [r3, #4]
   1ffc8:	0a000006 	beq	1ffe8 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   1ffcc:	e3550001 	cmp	r5, #1
   1ffd0:	0a00001c 	beq	20048 <CTCPConnection::TimerHandler(unsigned int)+0xb4>
   1ffd4:	e3550002 	cmp	r5, #2
   1ffd8:	1a00000e 	bne	20018 <CTCPConnection::TimerHandler(unsigned int)+0x84>
   1ffdc:	e3a03000 	mov	r3, #0
   1ffe0:	e5c4302a 	strb	r3, [r4, #42]	; 0x2a
   1ffe4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ffe8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ffec:	eb002f52 	bl	2bd3c <EnterCritical>
   1fff0:	e285301e 	add	r3, r5, #30
   1fff4:	e0843103 	add	r3, r4, r3, lsl #2
   1fff8:	e5932004 	ldr	r2, [r3, #4]
   1fffc:	e3520000 	cmp	r2, #0
   20000:	1a000008 	bne	20028 <CTCPConnection::TimerHandler(unsigned int)+0x94>
   20004:	e5943088 	ldr	r3, [r4, #136]	; 0x88
   20008:	e3530000 	cmp	r3, #0
   2000c:	08bd8070 	popeq	{r4, r5, r6, pc}
   20010:	e8bd4070 	pop	{r4, r5, r6, lr}
   20014:	ea002f73 	b	2bde8 <LeaveCritical>
   20018:	e59f2124 	ldr	r2, [pc, #292]	; 20144 <CTCPConnection::TimerHandler(unsigned int)+0x1b0>
   2001c:	e59f1124 	ldr	r1, [pc, #292]	; 20148 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   20020:	e59f0124 	ldr	r0, [pc, #292]	; 2014c <CTCPConnection::TimerHandler(unsigned int)+0x1b8>
   20024:	eb0011f5 	bl	24800 <assertion_failed>
   20028:	e3a01000 	mov	r1, #0
   2002c:	e5942088 	ldr	r2, [r4, #136]	; 0x88
   20030:	e5831004 	str	r1, [r3, #4]
   20034:	e1520001 	cmp	r2, r1
   20038:	0affffe3 	beq	1ffcc <CTCPConnection::TimerHandler(unsigned int)+0x38>
   2003c:	eb002f69 	bl	2bde8 <LeaveCritical>
   20040:	e3550001 	cmp	r5, #1
   20044:	1affffe2 	bne	1ffd4 <CTCPConnection::TimerHandler(unsigned int)+0x40>
   20048:	e28400b8 	add	r0, r4, #184	; 0xb8
   2004c:	eb0001a4 	bl	206e4 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>
   20050:	e5943060 	ldr	r3, [r4, #96]	; 0x60
   20054:	e3530000 	cmp	r3, #0
   20058:	e2433001 	sub	r3, r3, #1
   2005c:	e5843060 	str	r3, [r4, #96]	; 0x60
   20060:	0a000029 	beq	2010c <CTCPConnection::TimerHandler(unsigned int)+0x178>
   20064:	e5d4302a 	ldrb	r3, [r4, #42]	; 0x2a
   20068:	e353000a 	cmp	r3, #10
   2006c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   20070:	ea00000a 	b	200a0 <CTCPConnection::TimerHandler(unsigned int)+0x10c>
   20074:	000200e4 	.word	0x000200e4
   20078:	000200e4 	.word	0x000200e4
   2007c:	000200f4 	.word	0x000200f4
   20080:	000200f4 	.word	0x000200f4
   20084:	000200cc 	.word	0x000200cc
   20088:	000200b4 	.word	0x000200b4
   2008c:	000200e4 	.word	0x000200e4
   20090:	000200cc 	.word	0x000200cc
   20094:	000200b4 	.word	0x000200b4
   20098:	000200b4 	.word	0x000200b4
   2009c:	000200e4 	.word	0x000200e4
   200a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   200a4:	e59f20a4 	ldr	r2, [pc, #164]	; 20150 <CTCPConnection::TimerHandler(unsigned int)+0x1bc>
   200a8:	e59f1098 	ldr	r1, [pc, #152]	; 20148 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   200ac:	e59f00a0 	ldr	r0, [pc, #160]	; 20154 <CTCPConnection::TimerHandler(unsigned int)+0x1c0>
   200b0:	eb0011d2 	bl	24800 <assertion_failed>
   200b4:	e5d4305e 	ldrb	r3, [r4, #94]	; 0x5e
   200b8:	e3530000 	cmp	r3, #0
   200bc:	1a000014 	bne	20114 <CTCPConnection::TimerHandler(unsigned int)+0x180>
   200c0:	e3a03001 	mov	r3, #1
   200c4:	e5c4305e 	strb	r3, [r4, #94]	; 0x5e
   200c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   200cc:	e5d4305c 	ldrb	r3, [r4, #92]	; 0x5c
   200d0:	e3530000 	cmp	r3, #0
   200d4:	1a000012 	bne	20124 <CTCPConnection::TimerHandler(unsigned int)+0x190>
   200d8:	e3a03001 	mov	r3, #1
   200dc:	e5c4305c 	strb	r3, [r4, #92]	; 0x5c
   200e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   200e4:	e1a00004 	mov	r0, r4
   200e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   200ec:	e59f1064 	ldr	r1, [pc, #100]	; 20158 <CTCPConnection::TimerHandler(unsigned int)+0x1c4>
   200f0:	eafffbca 	b	1f020 <CTCPConnection::UnexpectedState(unsigned int)>
   200f4:	e5d4305d 	ldrb	r3, [r4, #93]	; 0x5d
   200f8:	e3530000 	cmp	r3, #0
   200fc:	1a00000c 	bne	20134 <CTCPConnection::TimerHandler(unsigned int)+0x1a0>
   20100:	e3a03001 	mov	r3, #1
   20104:	e5c4305d 	strb	r3, [r4, #93]	; 0x5d
   20108:	e8bd8070 	pop	{r4, r5, r6, pc}
   2010c:	e5c45064 	strb	r5, [r4, #100]	; 0x64
   20110:	e8bd8070 	pop	{r4, r5, r6, pc}
   20114:	e59f2040 	ldr	r2, [pc, #64]	; 2015c <CTCPConnection::TimerHandler(unsigned int)+0x1c8>
   20118:	e59f1028 	ldr	r1, [pc, #40]	; 20148 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   2011c:	e59f003c 	ldr	r0, [pc, #60]	; 20160 <CTCPConnection::TimerHandler(unsigned int)+0x1cc>
   20120:	eb0011b6 	bl	24800 <assertion_failed>
   20124:	e59f2038 	ldr	r2, [pc, #56]	; 20164 <CTCPConnection::TimerHandler(unsigned int)+0x1d0>
   20128:	e59f1018 	ldr	r1, [pc, #24]	; 20148 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   2012c:	e59f0034 	ldr	r0, [pc, #52]	; 20168 <CTCPConnection::TimerHandler(unsigned int)+0x1d4>
   20130:	eb0011b2 	bl	24800 <assertion_failed>
   20134:	e59f2030 	ldr	r2, [pc, #48]	; 2016c <CTCPConnection::TimerHandler(unsigned int)+0x1d8>
   20138:	e59f1008 	ldr	r1, [pc, #8]	; 20148 <CTCPConnection::TimerHandler(unsigned int)+0x1b4>
   2013c:	e59f002c 	ldr	r0, [pc, #44]	; 20170 <CTCPConnection::TimerHandler(unsigned int)+0x1dc>
   20140:	eb0011ae 	bl	24800 <assertion_failed>
   20144:	00000617 	.word	0x00000617
   20148:	00044114 	.word	0x00044114
   2014c:	0003fd5c 	.word	0x0003fd5c
   20150:	000005d9 	.word	0x000005d9
   20154:	00044158 	.word	0x00044158
   20158:	000005f9 	.word	0x000005f9
   2015c:	0000060b 	.word	0x0000060b
   20160:	000441a4 	.word	0x000441a4
   20164:	00000604 	.word	0x00000604
   20168:	000442b0 	.word	0x000442b0
   2016c:	000005fe 	.word	0x000005fe
   20170:	000442a4 	.word	0x000442a4

00020174 <CTCPConnection::TimerStub(unsigned int, void*, void*)>:
   20174:	e2520000 	subs	r0, r2, #0
   20178:	e92d4010 	push	{r4, lr}
   2017c:	0a000003 	beq	20190 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x1c>
   20180:	e3510002 	cmp	r1, #2
   20184:	8a000005 	bhi	201a0 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x2c>
   20188:	e8bd4010 	pop	{r4, lr}
   2018c:	eaffff80 	b	1ff94 <CTCPConnection::TimerHandler(unsigned int)>
   20190:	e59f2018 	ldr	r2, [pc, #24]	; 201b0 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x3c>
   20194:	e59f1018 	ldr	r1, [pc, #24]	; 201b4 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   20198:	e59f0018 	ldr	r0, [pc, #24]	; 201b8 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x44>
   2019c:	eb001197 	bl	24800 <assertion_failed>
   201a0:	e59f2014 	ldr	r2, [pc, #20]	; 201bc <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x48>
   201a4:	e59f1008 	ldr	r1, [pc, #8]	; 201b4 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x40>
   201a8:	e59f0010 	ldr	r0, [pc, #16]	; 201c0 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x4c>
   201ac:	eb001193 	bl	24800 <assertion_failed>
   201b0:	0000061f 	.word	0x0000061f
   201b4:	00044114 	.word	0x00044114
   201b8:	0003f168 	.word	0x0003f168
   201bc:	00000622 	.word	0x00000622
   201c0:	00044158 	.word	0x00044158

000201c4 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>:
   201c4:	e3a03000 	mov	r3, #0
   201c8:	e3510001 	cmp	r1, #1
   201cc:	e92d4010 	push	{r4, lr}
   201d0:	e880000a 	stm	r0, {r1, r3}
   201d4:	e5803008 	str	r3, [r0, #8]
   201d8:	e580300c 	str	r3, [r0, #12]
   201dc:	e5803010 	str	r3, [r0, #16]
   201e0:	9a000005 	bls	201fc <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x38>
   201e4:	e1a04000 	mov	r4, r0
   201e8:	e1a00001 	mov	r0, r1
   201ec:	eb002ba1 	bl	2b078 <operator new[](unsigned int)>
   201f0:	e5840004 	str	r0, [r4, #4]
   201f4:	e1a00004 	mov	r0, r4
   201f8:	e8bd8010 	pop	{r4, pc}
   201fc:	e3a0201e 	mov	r2, #30
   20200:	e59f1004 	ldr	r1, [pc, #4]	; 2020c <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x48>
   20204:	e59f0004 	ldr	r0, [pc, #4]	; 20210 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x4c>
   20208:	eb00117c 	bl	24800 <assertion_failed>
   2020c:	0004433c 	.word	0x0004433c
   20210:	00044354 	.word	0x00044354

00020214 <CRetransmissionQueue::~CRetransmissionQueue()>:
   20214:	e92d4010 	push	{r4, lr}
   20218:	e1a04000 	mov	r4, r0
   2021c:	e3a01001 	mov	r1, #1
   20220:	e5900004 	ldr	r0, [r0, #4]
   20224:	eb002ba0 	bl	2b0ac <operator delete(void*, unsigned int)>
   20228:	e1a00004 	mov	r0, r4
   2022c:	e8bd8010 	pop	{r4, pc}

00020230 <CRetransmissionQueue::IsEmpty() const>:
   20230:	e590200c 	ldr	r2, [r0, #12]
   20234:	e5900008 	ldr	r0, [r0, #8]
   20238:	e0420000 	sub	r0, r2, r0
   2023c:	e16f0f10 	clz	r0, r0
   20240:	e1a002a0 	lsr	r0, r0, #5
   20244:	e12fff1e 	bx	lr

00020248 <CRetransmissionQueue::GetFreeSpace() const>:
   20248:	e5903000 	ldr	r3, [r0]
   2024c:	e92d4010 	push	{r4, lr}
   20250:	e3530001 	cmp	r3, #1
   20254:	9a00000b 	bls	20288 <CRetransmissionQueue::GetFreeSpace() const+0x40>
   20258:	e5902008 	ldr	r2, [r0, #8]
   2025c:	e1530002 	cmp	r3, r2
   20260:	9a00000c 	bls	20298 <CRetransmissionQueue::GetFreeSpace() const+0x50>
   20264:	e590000c 	ldr	r0, [r0, #12]
   20268:	e1530000 	cmp	r3, r0
   2026c:	9a00000d 	bls	202a8 <CRetransmissionQueue::GetFreeSpace() const+0x60>
   20270:	e1520000 	cmp	r2, r0
   20274:	20833000 	addcs	r3, r3, r0
   20278:	22433001 	subcs	r3, r3, #1
   2027c:	32403001 	subcc	r3, r0, #1
   20280:	e0430002 	sub	r0, r3, r2
   20284:	e8bd8010 	pop	{r4, pc}
   20288:	e3a02033 	mov	r2, #51	; 0x33
   2028c:	e59f1024 	ldr	r1, [pc, #36]	; 202b8 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   20290:	e59f0024 	ldr	r0, [pc, #36]	; 202bc <CRetransmissionQueue::GetFreeSpace() const+0x74>
   20294:	eb001159 	bl	24800 <assertion_failed>
   20298:	e3a02034 	mov	r2, #52	; 0x34
   2029c:	e59f1014 	ldr	r1, [pc, #20]	; 202b8 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   202a0:	e59f0018 	ldr	r0, [pc, #24]	; 202c0 <CRetransmissionQueue::GetFreeSpace() const+0x78>
   202a4:	eb001155 	bl	24800 <assertion_failed>
   202a8:	e3a02035 	mov	r2, #53	; 0x35
   202ac:	e59f1004 	ldr	r1, [pc, #4]	; 202b8 <CRetransmissionQueue::GetFreeSpace() const+0x70>
   202b0:	e59f000c 	ldr	r0, [pc, #12]	; 202c4 <CRetransmissionQueue::GetFreeSpace() const+0x7c>
   202b4:	eb001151 	bl	24800 <assertion_failed>
   202b8:	0004433c 	.word	0x0004433c
   202bc:	00044354 	.word	0x00044354
   202c0:	00044360 	.word	0x00044360
   202c4:	00044374 	.word	0x00044374

000202c8 <CRetransmissionQueue::Write(void const*, unsigned int)>:
   202c8:	e92d4070 	push	{r4, r5, r6, lr}
   202cc:	e2526000 	subs	r6, r2, #0
   202d0:	0a000018 	beq	20338 <CRetransmissionQueue::Write(void const*, unsigned int)+0x70>
   202d4:	e1a05001 	mov	r5, r1
   202d8:	e1a04000 	mov	r4, r0
   202dc:	ebffffd9 	bl	20248 <CRetransmissionQueue::GetFreeSpace() const>
   202e0:	e1560000 	cmp	r6, r0
   202e4:	8a000017 	bhi	20348 <CRetransmissionQueue::Write(void const*, unsigned int)+0x80>
   202e8:	e3550000 	cmp	r5, #0
   202ec:	0a000019 	beq	20358 <CRetransmissionQueue::Write(void const*, unsigned int)+0x90>
   202f0:	e5943004 	ldr	r3, [r4, #4]
   202f4:	e3530000 	cmp	r3, #0
   202f8:	0a00001a 	beq	20368 <CRetransmissionQueue::Write(void const*, unsigned int)+0xa0>
   202fc:	e0856006 	add	r6, r5, r6
   20300:	e5941008 	ldr	r1, [r4, #8]
   20304:	ea000000 	b	2030c <CRetransmissionQueue::Write(void const*, unsigned int)+0x44>
   20308:	e5943004 	ldr	r3, [r4, #4]
   2030c:	e2812001 	add	r2, r1, #1
   20310:	e5842008 	str	r2, [r4, #8]
   20314:	e4d52001 	ldrb	r2, [r5], #1
   20318:	e7c32001 	strb	r2, [r3, r1]
   2031c:	e5940008 	ldr	r0, [r4, #8]
   20320:	e5941000 	ldr	r1, [r4]
   20324:	eb007695 	bl	3dd80 <__aeabi_uidivmod>
   20328:	e1560005 	cmp	r6, r5
   2032c:	e5841008 	str	r1, [r4, #8]
   20330:	1afffff4 	bne	20308 <CRetransmissionQueue::Write(void const*, unsigned int)+0x40>
   20334:	e8bd8070 	pop	{r4, r5, r6, pc}
   20338:	e3a02041 	mov	r2, #65	; 0x41
   2033c:	e59f1034 	ldr	r1, [pc, #52]	; 20378 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   20340:	e59f0034 	ldr	r0, [pc, #52]	; 2037c <CRetransmissionQueue::Write(void const*, unsigned int)+0xb4>
   20344:	eb00112d 	bl	24800 <assertion_failed>
   20348:	e3a02042 	mov	r2, #66	; 0x42
   2034c:	e59f1024 	ldr	r1, [pc, #36]	; 20378 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   20350:	e59f0028 	ldr	r0, [pc, #40]	; 20380 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb8>
   20354:	eb001129 	bl	24800 <assertion_failed>
   20358:	e3a02045 	mov	r2, #69	; 0x45
   2035c:	e59f1014 	ldr	r1, [pc, #20]	; 20378 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   20360:	e59f001c 	ldr	r0, [pc, #28]	; 20384 <CRetransmissionQueue::Write(void const*, unsigned int)+0xbc>
   20364:	eb001125 	bl	24800 <assertion_failed>
   20368:	e3a02046 	mov	r2, #70	; 0x46
   2036c:	e59f1004 	ldr	r1, [pc, #4]	; 20378 <CRetransmissionQueue::Write(void const*, unsigned int)+0xb0>
   20370:	e59f0010 	ldr	r0, [pc, #16]	; 20388 <CRetransmissionQueue::Write(void const*, unsigned int)+0xc0>
   20374:	eb001121 	bl	24800 <assertion_failed>
   20378:	0004433c 	.word	0x0004433c
   2037c:	00043a08 	.word	0x00043a08
   20380:	00044388 	.word	0x00044388
   20384:	000443a4 	.word	0x000443a4
   20388:	00041830 	.word	0x00041830

0002038c <CRetransmissionQueue::GetBytesAvailable() const>:
   2038c:	e5903000 	ldr	r3, [r0]
   20390:	e92d4010 	push	{r4, lr}
   20394:	e3530001 	cmp	r3, #1
   20398:	9a00000a 	bls	203c8 <CRetransmissionQueue::GetBytesAvailable() const+0x3c>
   2039c:	e5902008 	ldr	r2, [r0, #8]
   203a0:	e1530002 	cmp	r3, r2
   203a4:	9a00000b 	bls	203d8 <CRetransmissionQueue::GetBytesAvailable() const+0x4c>
   203a8:	e5900010 	ldr	r0, [r0, #16]
   203ac:	e1530000 	cmp	r3, r0
   203b0:	9a00000c 	bls	203e8 <CRetransmissionQueue::GetBytesAvailable() const+0x5c>
   203b4:	e1520000 	cmp	r2, r0
   203b8:	30833002 	addcc	r3, r3, r2
   203bc:	30430000 	subcc	r0, r3, r0
   203c0:	20420000 	subcs	r0, r2, r0
   203c4:	e8bd8010 	pop	{r4, pc}
   203c8:	e3a02051 	mov	r2, #81	; 0x51
   203cc:	e59f1024 	ldr	r1, [pc, #36]	; 203f8 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   203d0:	e59f0024 	ldr	r0, [pc, #36]	; 203fc <CRetransmissionQueue::GetBytesAvailable() const+0x70>
   203d4:	eb001109 	bl	24800 <assertion_failed>
   203d8:	e3a02052 	mov	r2, #82	; 0x52
   203dc:	e59f1014 	ldr	r1, [pc, #20]	; 203f8 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   203e0:	e59f0018 	ldr	r0, [pc, #24]	; 20400 <CRetransmissionQueue::GetBytesAvailable() const+0x74>
   203e4:	eb001105 	bl	24800 <assertion_failed>
   203e8:	e3a02053 	mov	r2, #83	; 0x53
   203ec:	e59f1004 	ldr	r1, [pc, #4]	; 203f8 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   203f0:	e59f000c 	ldr	r0, [pc, #12]	; 20404 <CRetransmissionQueue::GetBytesAvailable() const+0x78>
   203f4:	eb001101 	bl	24800 <assertion_failed>
   203f8:	0004433c 	.word	0x0004433c
   203fc:	00044354 	.word	0x00044354
   20400:	00044360 	.word	0x00044360
   20404:	000443ac 	.word	0x000443ac

00020408 <CRetransmissionQueue::Read(void*, unsigned int)>:
   20408:	e92d4070 	push	{r4, r5, r6, lr}
   2040c:	e2526000 	subs	r6, r2, #0
   20410:	0a000018 	beq	20478 <CRetransmissionQueue::Read(void*, unsigned int)+0x70>
   20414:	e1a05001 	mov	r5, r1
   20418:	e1a04000 	mov	r4, r0
   2041c:	ebffffda 	bl	2038c <CRetransmissionQueue::GetBytesAvailable() const>
   20420:	e1560000 	cmp	r6, r0
   20424:	8a000017 	bhi	20488 <CRetransmissionQueue::Read(void*, unsigned int)+0x80>
   20428:	e3550000 	cmp	r5, #0
   2042c:	0a000019 	beq	20498 <CRetransmissionQueue::Read(void*, unsigned int)+0x90>
   20430:	e5943004 	ldr	r3, [r4, #4]
   20434:	e3530000 	cmp	r3, #0
   20438:	0a00001a 	beq	204a8 <CRetransmissionQueue::Read(void*, unsigned int)+0xa0>
   2043c:	e0856006 	add	r6, r5, r6
   20440:	e5941010 	ldr	r1, [r4, #16]
   20444:	ea000000 	b	2044c <CRetransmissionQueue::Read(void*, unsigned int)+0x44>
   20448:	e5943004 	ldr	r3, [r4, #4]
   2044c:	e2812001 	add	r2, r1, #1
   20450:	e5842010 	str	r2, [r4, #16]
   20454:	e7d33001 	ldrb	r3, [r3, r1]
   20458:	e4c53001 	strb	r3, [r5], #1
   2045c:	e5940010 	ldr	r0, [r4, #16]
   20460:	e5941000 	ldr	r1, [r4]
   20464:	eb007645 	bl	3dd80 <__aeabi_uidivmod>
   20468:	e1560005 	cmp	r6, r5
   2046c:	e5841010 	str	r1, [r4, #16]
   20470:	1afffff4 	bne	20448 <CRetransmissionQueue::Read(void*, unsigned int)+0x40>
   20474:	e8bd8070 	pop	{r4, r5, r6, pc}
   20478:	e3a0205f 	mov	r2, #95	; 0x5f
   2047c:	e59f1034 	ldr	r1, [pc, #52]	; 204b8 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   20480:	e59f0034 	ldr	r0, [pc, #52]	; 204bc <CRetransmissionQueue::Read(void*, unsigned int)+0xb4>
   20484:	eb0010dd 	bl	24800 <assertion_failed>
   20488:	e3a02060 	mov	r2, #96	; 0x60
   2048c:	e59f1024 	ldr	r1, [pc, #36]	; 204b8 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   20490:	e59f0028 	ldr	r0, [pc, #40]	; 204c0 <CRetransmissionQueue::Read(void*, unsigned int)+0xb8>
   20494:	eb0010d9 	bl	24800 <assertion_failed>
   20498:	e3a02063 	mov	r2, #99	; 0x63
   2049c:	e59f1014 	ldr	r1, [pc, #20]	; 204b8 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   204a0:	e59f001c 	ldr	r0, [pc, #28]	; 204c4 <CRetransmissionQueue::Read(void*, unsigned int)+0xbc>
   204a4:	eb0010d5 	bl	24800 <assertion_failed>
   204a8:	e3a02064 	mov	r2, #100	; 0x64
   204ac:	e59f1004 	ldr	r1, [pc, #4]	; 204b8 <CRetransmissionQueue::Read(void*, unsigned int)+0xb0>
   204b0:	e59f0010 	ldr	r0, [pc, #16]	; 204c8 <CRetransmissionQueue::Read(void*, unsigned int)+0xc0>
   204b4:	eb0010d1 	bl	24800 <assertion_failed>
   204b8:	0004433c 	.word	0x0004433c
   204bc:	00043a08 	.word	0x00043a08
   204c0:	000443c4 	.word	0x000443c4
   204c4:	000443a4 	.word	0x000443a4
   204c8:	00041830 	.word	0x00041830

000204cc <CRetransmissionQueue::Advance(unsigned int)>:
   204cc:	e5903000 	ldr	r3, [r0]
   204d0:	e92d4010 	push	{r4, lr}
   204d4:	e3530001 	cmp	r3, #1
   204d8:	9a00000c 	bls	20510 <CRetransmissionQueue::Advance(unsigned int)+0x44>
   204dc:	e590200c 	ldr	r2, [r0, #12]
   204e0:	e1a04000 	mov	r4, r0
   204e4:	e1530002 	cmp	r3, r2
   204e8:	9a00000c 	bls	20520 <CRetransmissionQueue::Advance(unsigned int)+0x54>
   204ec:	e1a00001 	mov	r0, r1
   204f0:	e5941010 	ldr	r1, [r4, #16]
   204f4:	e1530001 	cmp	r3, r1
   204f8:	9a00000c 	bls	20530 <CRetransmissionQueue::Advance(unsigned int)+0x64>
   204fc:	e1a01003 	mov	r1, r3
   20500:	e0820000 	add	r0, r2, r0
   20504:	eb00761d 	bl	3dd80 <__aeabi_uidivmod>
   20508:	e584100c 	str	r1, [r4, #12]
   2050c:	e8bd8010 	pop	{r4, pc}
   20510:	e3a0206f 	mov	r2, #111	; 0x6f
   20514:	e59f1024 	ldr	r1, [pc, #36]	; 20540 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   20518:	e59f0024 	ldr	r0, [pc, #36]	; 20544 <CRetransmissionQueue::Advance(unsigned int)+0x78>
   2051c:	eb0010b7 	bl	24800 <assertion_failed>
   20520:	e3a02070 	mov	r2, #112	; 0x70
   20524:	e59f1014 	ldr	r1, [pc, #20]	; 20540 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   20528:	e59f0018 	ldr	r0, [pc, #24]	; 20548 <CRetransmissionQueue::Advance(unsigned int)+0x7c>
   2052c:	eb0010b3 	bl	24800 <assertion_failed>
   20530:	e3a02071 	mov	r2, #113	; 0x71
   20534:	e59f1004 	ldr	r1, [pc, #4]	; 20540 <CRetransmissionQueue::Advance(unsigned int)+0x74>
   20538:	e59f000c 	ldr	r0, [pc, #12]	; 2054c <CRetransmissionQueue::Advance(unsigned int)+0x80>
   2053c:	eb0010af 	bl	24800 <assertion_failed>
   20540:	0004433c 	.word	0x0004433c
   20544:	00044354 	.word	0x00044354
   20548:	00044374 	.word	0x00044374
   2054c:	000443ac 	.word	0x000443ac

00020550 <CRetransmissionQueue::Reset()>:
   20550:	e590300c 	ldr	r3, [r0, #12]
   20554:	e5803010 	str	r3, [r0, #16]
   20558:	e12fff1e 	bx	lr

0002055c <CRetransmissionQueue::Flush()>:
   2055c:	e3a03000 	mov	r3, #0
   20560:	e5803008 	str	r3, [r0, #8]
   20564:	e580300c 	str	r3, [r0, #12]
   20568:	e5803010 	str	r3, [r0, #16]
   2056c:	e12fff1e 	bx	lr

00020570 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>:
   20570:	e92d4010 	push	{r4, lr}
   20574:	e1a04000 	mov	r4, r0
   20578:	eb002660 	bl	29f00 <CTimer::Get()>
   2057c:	e3a03000 	mov	r3, #0
   20580:	e3a02001 	mov	r2, #1
   20584:	e3a01f4b 	mov	r1, #300	; 0x12c
   20588:	e1500003 	cmp	r0, r3
   2058c:	e5840000 	str	r0, [r4]
   20590:	e5841008 	str	r1, [r4, #8]
   20594:	e5843004 	str	r3, [r4, #4]
   20598:	e5c43018 	strb	r3, [r4, #24]
   2059c:	e5843020 	str	r3, [r4, #32]
   205a0:	e5c4200c 	strb	r2, [r4, #12]
   205a4:	e5842024 	str	r2, [r4, #36]	; 0x24
   205a8:	0a000001 	beq	205b4 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x44>
   205ac:	e1a00004 	mov	r0, r4
   205b0:	e8bd8010 	pop	{r4, pc}
   205b4:	e3a02033 	mov	r2, #51	; 0x33
   205b8:	e59f1004 	ldr	r1, [pc, #4]	; 205c4 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x54>
   205bc:	e59f0004 	ldr	r0, [pc, #4]	; 205c8 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x58>
   205c0:	eb00108e 	bl	24800 <assertion_failed>
   205c4:	000443e4 	.word	0x000443e4
   205c8:	0003f1b8 	.word	0x0003f1b8

000205cc <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>:
   205cc:	e12fff1e 	bx	lr

000205d0 <CRetransmissionTimeoutCalculator::GetRTO() const>:
   205d0:	e5900008 	ldr	r0, [r0, #8]
   205d4:	e12fff1e 	bx	lr

000205d8 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>:
   205d8:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   205dc:	e3530000 	cmp	r3, #0
   205e0:	1a000007 	bne	20604 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)+0x2c>
   205e4:	e3a0cf4b 	mov	ip, #300	; 0x12c
   205e8:	e3a02001 	mov	r2, #1
   205ec:	e5801004 	str	r1, [r0, #4]
   205f0:	e5c03018 	strb	r3, [r0, #24]
   205f4:	e5803020 	str	r3, [r0, #32]
   205f8:	e580c008 	str	ip, [r0, #8]
   205fc:	e5c0200c 	strb	r2, [r0, #12]
   20600:	e12fff1e 	bx	lr
   20604:	e92d4070 	push	{r4, r5, r6, lr}
   20608:	e1a04000 	mov	r4, r0
   2060c:	e1a00003 	mov	r0, r3
   20610:	e1a05001 	mov	r5, r1
   20614:	eb002dc8 	bl	2bd3c <EnterCritical>
   20618:	e3a03000 	mov	r3, #0
   2061c:	e3a01f4b 	mov	r1, #300	; 0x12c
   20620:	e3a02001 	mov	r2, #1
   20624:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   20628:	e5845004 	str	r5, [r4, #4]
   2062c:	e1500003 	cmp	r0, r3
   20630:	e5841008 	str	r1, [r4, #8]
   20634:	e5c4200c 	strb	r2, [r4, #12]
   20638:	e5c43018 	strb	r3, [r4, #24]
   2063c:	e5843020 	str	r3, [r4, #32]
   20640:	08bd8070 	popeq	{r4, r5, r6, pc}
   20644:	e8bd4070 	pop	{r4, r5, r6, lr}
   20648:	ea002de6 	b	2bde8 <LeaveCritical>

0002064c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>:
   2064c:	e92d4010 	push	{r4, lr}
   20650:	e1a04000 	mov	r4, r0
   20654:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   20658:	e3500000 	cmp	r0, #0
   2065c:	1a000012 	bne	206ac <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x60>
   20660:	e5d43018 	ldrb	r3, [r4, #24]
   20664:	e3530000 	cmp	r3, #0
   20668:	1a00000e 	bne	206a8 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x5c>
   2066c:	e5943020 	ldr	r3, [r4, #32]
   20670:	e3530000 	cmp	r3, #0
   20674:	1a000006 	bne	20694 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   20678:	e3a03001 	mov	r3, #1
   2067c:	e5940000 	ldr	r0, [r4]
   20680:	e5c43018 	strb	r3, [r4, #24]
   20684:	e3500000 	cmp	r0, #0
   20688:	0a00000f 	beq	206cc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x80>
   2068c:	eb002365 	bl	29428 <CTimer::GetTicks() const>
   20690:	e584001c 	str	r0, [r4, #28]
   20694:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   20698:	e3530000 	cmp	r3, #0
   2069c:	08bd8010 	popeq	{r4, pc}
   206a0:	e8bd4010 	pop	{r4, lr}
   206a4:	ea002dcf 	b	2bde8 <LeaveCritical>
   206a8:	e8bd8010 	pop	{r4, pc}
   206ac:	eb002da2 	bl	2bd3c <EnterCritical>
   206b0:	e5d43018 	ldrb	r3, [r4, #24]
   206b4:	e3530000 	cmp	r3, #0
   206b8:	1afffff5 	bne	20694 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   206bc:	e5943020 	ldr	r3, [r4, #32]
   206c0:	e3530000 	cmp	r3, #0
   206c4:	1afffff2 	bne	20694 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   206c8:	eaffffea 	b	20678 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x2c>
   206cc:	e3a0205f 	mov	r2, #95	; 0x5f
   206d0:	e59f1004 	ldr	r1, [pc, #4]	; 206dc <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x90>
   206d4:	e59f0004 	ldr	r0, [pc, #4]	; 206e0 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x94>
   206d8:	eb001048 	bl	24800 <assertion_failed>
   206dc:	000443e4 	.word	0x000443e4
   206e0:	0003f1b8 	.word	0x0003f1b8

000206e4 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>:
   206e4:	e92d4010 	push	{r4, lr}
   206e8:	e1a04000 	mov	r4, r0
   206ec:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   206f0:	e3500000 	cmp	r0, #0
   206f4:	1a000011 	bne	20740 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x5c>
   206f8:	e5943008 	ldr	r3, [r4, #8]
   206fc:	e59f2048 	ldr	r2, [pc, #72]	; 2074c <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x68>
   20700:	e1a03083 	lsl	r3, r3, #1
   20704:	e1530002 	cmp	r3, r2
   20708:	21a03002 	movcs	r3, r2
   2070c:	e5942020 	ldr	r2, [r4, #32]
   20710:	e5843008 	str	r3, [r4, #8]
   20714:	e2823001 	add	r3, r2, #1
   20718:	e3530002 	cmp	r3, #2
   2071c:	e5843020 	str	r3, [r4, #32]
   20720:	83a03001 	movhi	r3, #1
   20724:	85c4300c 	strbhi	r3, [r4, #12]
   20728:	e3a03000 	mov	r3, #0
   2072c:	e1500003 	cmp	r0, r3
   20730:	e5c43018 	strb	r3, [r4, #24]
   20734:	08bd8010 	popeq	{r4, pc}
   20738:	e8bd4010 	pop	{r4, lr}
   2073c:	ea002da9 	b	2bde8 <LeaveCritical>
   20740:	eb002d7d 	bl	2bd3c <EnterCritical>
   20744:	e5940024 	ldr	r0, [r4, #36]	; 0x24
   20748:	eaffffea 	b	206f8 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x14>
   2074c:	00002ee0 	.word	0x00002ee0

00020750 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>:
   20750:	e5d0300c 	ldrb	r3, [r0, #12]
   20754:	e3530000 	cmp	r3, #0
   20758:	0a00000e 	beq	20798 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x48>
   2075c:	e3a02000 	mov	r2, #0
   20760:	e1a030a1 	lsr	r3, r1, #1
   20764:	e5801010 	str	r1, [r0, #16]
   20768:	e5c0200c 	strb	r2, [r0, #12]
   2076c:	e5803014 	str	r3, [r0, #20]
   20770:	e1b03103 	lsls	r3, r3, #2
   20774:	03a03001 	moveq	r3, #1
   20778:	e0833001 	add	r3, r3, r1
   2077c:	e3530063 	cmp	r3, #99	; 0x63
   20780:	9a000012 	bls	207d0 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x80>
   20784:	e59f1050 	ldr	r1, [pc, #80]	; 207dc <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x8c>
   20788:	e1530001 	cmp	r3, r1
   2078c:	21a03001 	movcs	r3, r1
   20790:	e5803008 	str	r3, [r0, #8]
   20794:	e12fff1e 	bx	lr
   20798:	e5903010 	ldr	r3, [r0, #16]
   2079c:	e5902014 	ldr	r2, [r0, #20]
   207a0:	e043c001 	sub	ip, r3, r1
   207a4:	e35c0000 	cmp	ip, #0
   207a8:	b26cc000 	rsblt	ip, ip, #0
   207ac:	e0633183 	rsb	r3, r3, r3, lsl #3
   207b0:	e0822082 	add	r2, r2, r2, lsl #1
   207b4:	e0833001 	add	r3, r3, r1
   207b8:	e082200c 	add	r2, r2, ip
   207bc:	e1a011a3 	lsr	r1, r3, #3
   207c0:	e1a03122 	lsr	r3, r2, #2
   207c4:	e5801010 	str	r1, [r0, #16]
   207c8:	e5803014 	str	r3, [r0, #20]
   207cc:	eaffffe7 	b	20770 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x20>
   207d0:	e3a03064 	mov	r3, #100	; 0x64
   207d4:	e5803008 	str	r3, [r0, #8]
   207d8:	e12fff1e 	bx	lr
   207dc:	00002ee0 	.word	0x00002ee0

000207e0 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>:
   207e0:	e92d4010 	push	{r4, lr}
   207e4:	e1a04000 	mov	r4, r0
   207e8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   207ec:	e3500000 	cmp	r0, #0
   207f0:	1a000015 	bne	2084c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x6c>
   207f4:	e5d43018 	ldrb	r3, [r4, #24]
   207f8:	e3530000 	cmp	r3, #0
   207fc:	0a00000a 	beq	2082c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x4c>
   20800:	e5943020 	ldr	r3, [r4, #32]
   20804:	e3530000 	cmp	r3, #0
   20808:	1a000007 	bne	2082c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x4c>
   2080c:	e5940000 	ldr	r0, [r4]
   20810:	e3500000 	cmp	r0, #0
   20814:	0a00000e 	beq	20854 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x74>
   20818:	eb002302 	bl	29428 <CTimer::GetTicks() const>
   2081c:	e594101c 	ldr	r1, [r4, #28]
   20820:	e0401001 	sub	r1, r0, r1
   20824:	e1a00004 	mov	r0, r4
   20828:	ebffffc8 	bl	20750 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>
   2082c:	e3a03000 	mov	r3, #0
   20830:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   20834:	e5c43018 	strb	r3, [r4, #24]
   20838:	e1520003 	cmp	r2, r3
   2083c:	e5843020 	str	r3, [r4, #32]
   20840:	08bd8010 	popeq	{r4, pc}
   20844:	e8bd4010 	pop	{r4, lr}
   20848:	ea002d66 	b	2bde8 <LeaveCritical>
   2084c:	eb002d3a 	bl	2bd3c <EnterCritical>
   20850:	eaffffe7 	b	207f4 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x14>
   20854:	e3a02074 	mov	r2, #116	; 0x74
   20858:	e59f1004 	ldr	r1, [pc, #4]	; 20864 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x84>
   2085c:	e59f0004 	ldr	r0, [pc, #4]	; 20868 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x88>
   20860:	eb000fe6 	bl	24800 <assertion_failed>
   20864:	000443e4 	.word	0x000443e4
   20868:	0003f1b8 	.word	0x0003f1b8

0002086c <CTCPRejector::~CTCPRejector()>:
   2086c:	e92d4010 	push	{r4, lr}
   20870:	e1a04000 	mov	r4, r0
   20874:	e59f300c 	ldr	r3, [pc, #12]	; 20888 <CTCPRejector::~CTCPRejector()+0x1c>
   20878:	e5803000 	str	r3, [r0]
   2087c:	ebfff31a 	bl	1d4ec <CNetConnection::~CNetConnection()>
   20880:	e1a00004 	mov	r0, r4
   20884:	e8bd8010 	pop	{r4, pc}
   20888:	00044404 	.word	0x00044404

0002088c <CTCPRejector::~CTCPRejector()>:
   2088c:	e92d4010 	push	{r4, lr}
   20890:	e1a04000 	mov	r4, r0
   20894:	e59f3018 	ldr	r3, [pc, #24]	; 208b4 <CTCPRejector::~CTCPRejector()+0x28>
   20898:	e5803000 	str	r3, [r0]
   2089c:	ebfff312 	bl	1d4ec <CNetConnection::~CNetConnection()>
   208a0:	e1a00004 	mov	r0, r4
   208a4:	e3a0102c 	mov	r1, #44	; 0x2c
   208a8:	eb0029ff 	bl	2b0ac <operator delete(void*, unsigned int)>
   208ac:	e1a00004 	mov	r0, r4
   208b0:	e8bd8010 	pop	{r4, pc}
   208b4:	00044404 	.word	0x00044404

000208b8 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>:
   208b8:	e3a03006 	mov	r3, #6
   208bc:	e92d4010 	push	{r4, lr}
   208c0:	e1a04000 	mov	r4, r0
   208c4:	e24dd008 	sub	sp, sp, #8
   208c8:	e58d3000 	str	r3, [sp]
   208cc:	e3a03000 	mov	r3, #0
   208d0:	ebfff2df 	bl	1d454 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   208d4:	e1a00004 	mov	r0, r4
   208d8:	e59f3008 	ldr	r3, [pc, #8]	; 208e8 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)+0x30>
   208dc:	e5843000 	str	r3, [r4]
   208e0:	e28dd008 	add	sp, sp, #8
   208e4:	e8bd8010 	pop	{r4, pc}
   208e8:	00044404 	.word	0x00044404

000208ec <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>:
   208ec:	e92d4010 	push	{r4, lr}
   208f0:	e3110c02 	tst	r1, #512	; 0x200
   208f4:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   208f8:	e24dd008 	sub	sp, sp, #8
   208fc:	1a000024 	bne	20994 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xa8>
   20900:	e211ea01 	ands	lr, r1, #4096	; 0x1000
   20904:	e1a04000 	mov	r4, r0
   20908:	01a0300e 	moveq	r3, lr
   2090c:	e3a0e000 	mov	lr, #0
   20910:	e1d0c1b6 	ldrh	ip, [r0, #22]
   20914:	e1d001b4 	ldrh	r0, [r0, #20]
   20918:	e6bf2f32 	rev	r2, r2
   2091c:	e6bfcfbc 	rev16	ip, ip
   20920:	e6bf0fb0 	rev16	r0, r0
   20924:	16bf3f33 	revne	r3, r3
   20928:	e58d200c 	str	r2, [sp, #12]
   2092c:	e1cdc0b8 	strh	ip, [sp, #8]
   20930:	e1cd00ba 	strh	r0, [sp, #10]
   20934:	e381c050 	orr	ip, r1, #80	; 0x50
   20938:	e3a02014 	mov	r2, #20
   2093c:	e28d1008 	add	r1, sp, #8
   20940:	e284001c 	add	r0, r4, #28
   20944:	e58d3010 	str	r3, [sp, #16]
   20948:	e1cdc1b4 	strh	ip, [sp, #20]
   2094c:	e1cde1b6 	strh	lr, [sp, #22]
   20950:	e1cde1ba 	strh	lr, [sp, #26]
   20954:	e1cde1b8 	strh	lr, [sp, #24]
   20958:	eb000370 	bl	21720 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   2095c:	e5943008 	ldr	r3, [r4, #8]
   20960:	e1cd01b8 	strh	r0, [sp, #24]
   20964:	e3530000 	cmp	r3, #0
   20968:	0a00000d 	beq	209a4 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xb8>
   2096c:	e3a0c006 	mov	ip, #6
   20970:	e28d2008 	add	r2, sp, #8
   20974:	e284100c 	add	r1, r4, #12
   20978:	e1a00003 	mov	r0, r3
   2097c:	e58dc000 	str	ip, [sp]
   20980:	e3a03014 	mov	r3, #20
   20984:	ebffe8d3 	bl	1acd8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   20988:	e28ddd19 	add	sp, sp, #1600	; 0x640
   2098c:	e28dd008 	add	sp, sp, #8
   20990:	e8bd8010 	pop	{r4, pc}
   20994:	e3a020a1 	mov	r2, #161	; 0xa1
   20998:	e59f1014 	ldr	r1, [pc, #20]	; 209b4 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc8>
   2099c:	e59f0014 	ldr	r0, [pc, #20]	; 209b8 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xcc>
   209a0:	eb000f96 	bl	24800 <assertion_failed>
   209a4:	e3a020c7 	mov	r2, #199	; 0xc7
   209a8:	e59f1004 	ldr	r1, [pc, #4]	; 209b4 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xc8>
   209ac:	e59f0008 	ldr	r0, [pc, #8]	; 209bc <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xd0>
   209b0:	eb000f92 	bl	24800 <assertion_failed>
   209b4:	00044440 	.word	0x00044440
   209b8:	00044450 	.word	0x00044450
   209bc:	00043994 	.word	0x00043994

000209c0 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   209c0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   209c4:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   209c8:	e35c0006 	cmp	ip, #6
   209cc:	0a000001 	beq	209d8 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18>
   209d0:	e3a00000 	mov	r0, #0
   209d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   209d8:	e3520013 	cmp	r2, #19
   209dc:	9a00005a 	bls	20b4c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18c>
   209e0:	e3510000 	cmp	r1, #0
   209e4:	e1a06003 	mov	r6, r3
   209e8:	e1a07002 	mov	r7, r2
   209ec:	e1a04001 	mov	r4, r1
   209f0:	e1a05000 	mov	r5, r0
   209f4:	0a00004c 	beq	20b2c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x16c>
   209f8:	e5d43003 	ldrb	r3, [r4, #3]
   209fc:	e5d11002 	ldrb	r1, [r1, #2]
   20a00:	e1811403 	orr	r1, r1, r3, lsl #8
   20a04:	e6bf1fb1 	rev16	r1, r1
   20a08:	e6ff3071 	uxth	r3, r1
   20a0c:	e3530000 	cmp	r3, #0
   20a10:	e1c011b6 	strh	r1, [r0, #22]
   20a14:	0a00004c 	beq	20b4c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x18c>
   20a18:	e5900004 	ldr	r0, [r0, #4]
   20a1c:	e3500000 	cmp	r0, #0
   20a20:	0a000045 	beq	20b3c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x17c>
   20a24:	eb00007c 	bl	20c1c <CNetConfig::GetIPAddress() const>
   20a28:	eb0001b6 	bl	21108 <CIPAddress::IsNull() const>
   20a2c:	e3500000 	cmp	r0, #0
   20a30:	1affffe6 	bne	209d0 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   20a34:	e5950004 	ldr	r0, [r5, #4]
   20a38:	eb000077 	bl	20c1c <CNetConfig::GetIPAddress() const>
   20a3c:	e285801c 	add	r8, r5, #28
   20a40:	e1a01000 	mov	r1, r0
   20a44:	e1a00008 	mov	r0, r8
   20a48:	eb000304 	bl	21660 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   20a4c:	e1a01006 	mov	r1, r6
   20a50:	e1a00008 	mov	r0, r8
   20a54:	eb000305 	bl	21670 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   20a58:	e1a02007 	mov	r2, r7
   20a5c:	e1a01004 	mov	r1, r4
   20a60:	e1a00008 	mov	r0, r8
   20a64:	eb00032d 	bl	21720 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   20a68:	e3500000 	cmp	r0, #0
   20a6c:	1affffd7 	bne	209d0 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10>
   20a70:	e5d40005 	ldrb	r0, [r4, #5]
   20a74:	e5d49004 	ldrb	r9, [r4, #4]
   20a78:	e5d43009 	ldrb	r3, [r4, #9]
   20a7c:	e5d41008 	ldrb	r1, [r4, #8]
   20a80:	e1899400 	orr	r9, r9, r0, lsl #8
   20a84:	e5d4000a 	ldrb	r0, [r4, #10]
   20a88:	e1811403 	orr	r1, r1, r3, lsl #8
   20a8c:	e5d4a00d 	ldrb	sl, [r4, #13]
   20a90:	e5d4300c 	ldrb	r3, [r4, #12]
   20a94:	e5d42006 	ldrb	r2, [r4, #6]
   20a98:	e1811800 	orr	r1, r1, r0, lsl #16
   20a9c:	e5d4000b 	ldrb	r0, [r4, #11]
   20aa0:	e183a40a 	orr	sl, r3, sl, lsl #8
   20aa4:	e1a03223 	lsr	r3, r3, #4
   20aa8:	e0477103 	sub	r7, r7, r3, lsl #2
   20aac:	e1811c00 	orr	r1, r1, r0, lsl #24
   20ab0:	e1899802 	orr	r9, r9, r2, lsl #16
   20ab4:	e31a0c02 	tst	sl, #512	; 0x200
   20ab8:	e5d42007 	ldrb	r2, [r4, #7]
   20abc:	12877001 	addne	r7, r7, #1
   20ac0:	e6bf8f31 	rev	r8, r1
   20ac4:	e31a0c01 	tst	sl, #256	; 0x100
   20ac8:	e1a01006 	mov	r1, r6
   20acc:	e285000c 	add	r0, r5, #12
   20ad0:	e1899c02 	orr	r9, r9, r2, lsl #24
   20ad4:	12877001 	addne	r7, r7, #1
   20ad8:	eb000147 	bl	20ffc <CIPAddress::Set(CIPAddress const&)>
   20adc:	e5d42000 	ldrb	r2, [r4]
   20ae0:	e5d41001 	ldrb	r1, [r4, #1]
   20ae4:	e21a3b01 	ands	r3, sl, #1024	; 0x400
   20ae8:	e1822401 	orr	r2, r2, r1, lsl #8
   20aec:	e6bf2fb2 	rev16	r2, r2
   20af0:	e6bf9f39 	rev	r9, r9
   20af4:	e1c521b4 	strh	r2, [r5, #20]
   20af8:	1a000009 	bne	20b24 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   20afc:	e21a2a01 	ands	r2, sl, #4096	; 0x1000
   20b00:	00893007 	addeq	r3, r9, r7
   20b04:	01a00005 	moveq	r0, r5
   20b08:	03a01b05 	moveq	r1, #5120	; 0x1400
   20b0c:	11a02008 	movne	r2, r8
   20b10:	11a00005 	movne	r0, r5
   20b14:	13a01b01 	movne	r1, #1024	; 0x400
   20b18:	ebffff73 	bl	208ec <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>
   20b1c:	e3a00001 	mov	r0, #1
   20b20:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20b24:	e3a00001 	mov	r0, #1
   20b28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20b2c:	e3a02052 	mov	r2, #82	; 0x52
   20b30:	e59f101c 	ldr	r1, [pc, #28]	; 20b54 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x194>
   20b34:	e59f001c 	ldr	r0, [pc, #28]	; 20b58 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x198>
   20b38:	eb000f30 	bl	24800 <assertion_failed>
   20b3c:	e3a0205b 	mov	r2, #91	; 0x5b
   20b40:	e59f100c 	ldr	r1, [pc, #12]	; 20b54 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x194>
   20b44:	e59f0010 	ldr	r0, [pc, #16]	; 20b5c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x19c>
   20b48:	eb000f2c 	bl	24800 <assertion_failed>
   20b4c:	e3e00000 	mvn	r0, #0
   20b50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20b54:	00044440 	.word	0x00044440
   20b58:	00043a78 	.word	0x00043a78
   20b5c:	00043980 	.word	0x00043980

00020b60 <CTCPRejector::Connect()>:
   20b60:	e3e00000 	mvn	r0, #0
   20b64:	e12fff1e 	bx	lr

00020b68 <CTCPRejector::Accept(CIPAddress*, unsigned short*)>:
   20b68:	e3e00000 	mvn	r0, #0
   20b6c:	e12fff1e 	bx	lr

00020b70 <CTCPRejector::Close()>:
   20b70:	e3e00000 	mvn	r0, #0
   20b74:	e12fff1e 	bx	lr

00020b78 <CTCPRejector::Send(void const*, unsigned int, int)>:
   20b78:	e3e00000 	mvn	r0, #0
   20b7c:	e12fff1e 	bx	lr

00020b80 <CTCPRejector::Receive(void*, int)>:
   20b80:	e3e00000 	mvn	r0, #0
   20b84:	e12fff1e 	bx	lr

00020b88 <CTCPRejector::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   20b88:	e3e00000 	mvn	r0, #0
   20b8c:	e12fff1e 	bx	lr

00020b90 <CTCPRejector::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   20b90:	e3e00000 	mvn	r0, #0
   20b94:	e12fff1e 	bx	lr

00020b98 <CTCPRejector::SetOptionBroadcast(bool)>:
   20b98:	e3e00000 	mvn	r0, #0
   20b9c:	e12fff1e 	bx	lr

00020ba0 <CTCPRejector::IsConnected() const>:
   20ba0:	e3a00000 	mov	r0, #0
   20ba4:	e12fff1e 	bx	lr

00020ba8 <CTCPRejector::IsTerminated() const>:
   20ba8:	e3a00000 	mov	r0, #0
   20bac:	e12fff1e 	bx	lr

00020bb0 <CTCPRejector::Process()>:
   20bb0:	e12fff1e 	bx	lr

00020bb4 <CTCPRejector::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   20bb4:	e3a00000 	mov	r0, #0
   20bb8:	e12fff1e 	bx	lr

00020bbc <CNetConfig::~CNetConfig()>:
   20bbc:	e92d4010 	push	{r4, lr}
   20bc0:	e1a04000 	mov	r4, r0
   20bc4:	e2800024 	add	r0, r0, #36	; 0x24
   20bc8:	eb000085 	bl	20de4 <CIPAddress::~CIPAddress()>
   20bcc:	e284001c 	add	r0, r4, #28
   20bd0:	eb000083 	bl	20de4 <CIPAddress::~CIPAddress()>
   20bd4:	e2840014 	add	r0, r4, #20
   20bd8:	eb000081 	bl	20de4 <CIPAddress::~CIPAddress()>
   20bdc:	e284000c 	add	r0, r4, #12
   20be0:	eb00007f 	bl	20de4 <CIPAddress::~CIPAddress()>
   20be4:	e2840004 	add	r0, r4, #4
   20be8:	eb00007d 	bl	20de4 <CIPAddress::~CIPAddress()>
   20bec:	e1a00004 	mov	r0, r4
   20bf0:	e8bd8010 	pop	{r4, pc}

00020bf4 <CNetConfig::SetDHCP(bool)>:
   20bf4:	e5c01000 	strb	r1, [r0]
   20bf8:	e12fff1e 	bx	lr

00020bfc <CNetConfig::SetDefaultGateway(unsigned int)>:
   20bfc:	e2800014 	add	r0, r0, #20
   20c00:	ea0000e4 	b	20f98 <CIPAddress::Set(unsigned int)>

00020c04 <CNetConfig::SetDNSServer(unsigned int)>:
   20c04:	e280001c 	add	r0, r0, #28
   20c08:	ea0000e2 	b	20f98 <CIPAddress::Set(unsigned int)>

00020c0c <CNetConfig::SetDefaultGateway(unsigned char const*)>:
   20c0c:	e2800014 	add	r0, r0, #20
   20c10:	ea0000e4 	b	20fa8 <CIPAddress::Set(unsigned char const*)>

00020c14 <CNetConfig::SetDNSServer(unsigned char const*)>:
   20c14:	e280001c 	add	r0, r0, #28
   20c18:	ea0000e2 	b	20fa8 <CIPAddress::Set(unsigned char const*)>

00020c1c <CNetConfig::GetIPAddress() const>:
   20c1c:	e2800004 	add	r0, r0, #4
   20c20:	e12fff1e 	bx	lr

00020c24 <CNetConfig::IsDHCPUsed() const>:
   20c24:	e5d00000 	ldrb	r0, [r0]
   20c28:	e12fff1e 	bx	lr

00020c2c <CNetConfig::GetNetMask() const>:
   20c2c:	e280000c 	add	r0, r0, #12
   20c30:	ea000111 	b	2107c <CIPAddress::Get() const>

00020c34 <CNetConfig::GetDefaultGateway() const>:
   20c34:	e2800014 	add	r0, r0, #20
   20c38:	e12fff1e 	bx	lr

00020c3c <CNetConfig::GetDNSServer() const>:
   20c3c:	e280001c 	add	r0, r0, #28
   20c40:	e12fff1e 	bx	lr

00020c44 <CNetConfig::GetBroadcastAddress() const>:
   20c44:	e2800024 	add	r0, r0, #36	; 0x24
   20c48:	e12fff1e 	bx	lr

00020c4c <CNetConfig::UpdateBroadcastAddress()>:
   20c4c:	e92d4010 	push	{r4, lr}
   20c50:	e1a04000 	mov	r4, r0
   20c54:	e24dd008 	sub	sp, sp, #8
   20c58:	e1a0100d 	mov	r1, sp
   20c5c:	e2800004 	add	r0, r0, #4
   20c60:	eb000111 	bl	210ac <CIPAddress::CopyTo(unsigned char*) const>
   20c64:	e284000c 	add	r0, r4, #12
   20c68:	e28d1004 	add	r1, sp, #4
   20c6c:	eb00010e 	bl	210ac <CIPAddress::CopyTo(unsigned char*) const>
   20c70:	e89d000a 	ldm	sp, {r1, r3}
   20c74:	e1e03003 	mvn	r3, r3
   20c78:	e2840024 	add	r0, r4, #36	; 0x24
   20c7c:	e1831001 	orr	r1, r3, r1
   20c80:	eb0000c4 	bl	20f98 <CIPAddress::Set(unsigned int)>
   20c84:	e28dd008 	add	sp, sp, #8
   20c88:	e8bd8010 	pop	{r4, pc}

00020c8c <CNetConfig::Reset()>:
   20c8c:	e92d4070 	push	{r4, r5, r6, lr}
   20c90:	e1a04000 	mov	r4, r0
   20c94:	e59f5038 	ldr	r5, [pc, #56]	; 20cd4 <CNetConfig::Reset()+0x48>
   20c98:	e2800004 	add	r0, r0, #4
   20c9c:	e1a01005 	mov	r1, r5
   20ca0:	eb0000c0 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   20ca4:	e1a01005 	mov	r1, r5
   20ca8:	e284000c 	add	r0, r4, #12
   20cac:	eb0000bd 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   20cb0:	e1a01005 	mov	r1, r5
   20cb4:	e2840014 	add	r0, r4, #20
   20cb8:	eb0000ba 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   20cbc:	e284001c 	add	r0, r4, #28
   20cc0:	e1a01005 	mov	r1, r5
   20cc4:	eb0000b7 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   20cc8:	e1a00004 	mov	r0, r4
   20ccc:	e8bd4070 	pop	{r4, r5, r6, lr}
   20cd0:	eaffffdd 	b	20c4c <CNetConfig::UpdateBroadcastAddress()>
   20cd4:	0004446c 	.word	0x0004446c

00020cd8 <CNetConfig::CNetConfig()>:
   20cd8:	e3a03001 	mov	r3, #1
   20cdc:	e92d4010 	push	{r4, lr}
   20ce0:	e1a04000 	mov	r4, r0
   20ce4:	e4c03004 	strb	r3, [r0], #4
   20ce8:	eb000027 	bl	20d8c <CIPAddress::CIPAddress()>
   20cec:	e284000c 	add	r0, r4, #12
   20cf0:	eb000025 	bl	20d8c <CIPAddress::CIPAddress()>
   20cf4:	e2840014 	add	r0, r4, #20
   20cf8:	eb000023 	bl	20d8c <CIPAddress::CIPAddress()>
   20cfc:	e284001c 	add	r0, r4, #28
   20d00:	eb000021 	bl	20d8c <CIPAddress::CIPAddress()>
   20d04:	e2840024 	add	r0, r4, #36	; 0x24
   20d08:	eb00001f 	bl	20d8c <CIPAddress::CIPAddress()>
   20d0c:	e1a00004 	mov	r0, r4
   20d10:	ebffffdd 	bl	20c8c <CNetConfig::Reset()>
   20d14:	e1a00004 	mov	r0, r4
   20d18:	e8bd8010 	pop	{r4, pc}

00020d1c <CNetConfig::SetIPAddress(unsigned int)>:
   20d1c:	e92d4010 	push	{r4, lr}
   20d20:	e1a04000 	mov	r4, r0
   20d24:	e2800004 	add	r0, r0, #4
   20d28:	eb00009a 	bl	20f98 <CIPAddress::Set(unsigned int)>
   20d2c:	e1a00004 	mov	r0, r4
   20d30:	e8bd4010 	pop	{r4, lr}
   20d34:	eaffffc4 	b	20c4c <CNetConfig::UpdateBroadcastAddress()>

00020d38 <CNetConfig::SetNetMask(unsigned int)>:
   20d38:	e92d4010 	push	{r4, lr}
   20d3c:	e1a04000 	mov	r4, r0
   20d40:	e280000c 	add	r0, r0, #12
   20d44:	eb000093 	bl	20f98 <CIPAddress::Set(unsigned int)>
   20d48:	e1a00004 	mov	r0, r4
   20d4c:	e8bd4010 	pop	{r4, lr}
   20d50:	eaffffbd 	b	20c4c <CNetConfig::UpdateBroadcastAddress()>

00020d54 <CNetConfig::SetIPAddress(unsigned char const*)>:
   20d54:	e92d4010 	push	{r4, lr}
   20d58:	e1a04000 	mov	r4, r0
   20d5c:	e2800004 	add	r0, r0, #4
   20d60:	eb000090 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   20d64:	e1a00004 	mov	r0, r4
   20d68:	e8bd4010 	pop	{r4, lr}
   20d6c:	eaffffb6 	b	20c4c <CNetConfig::UpdateBroadcastAddress()>

00020d70 <CNetConfig::SetNetMask(unsigned char const*)>:
   20d70:	e92d4010 	push	{r4, lr}
   20d74:	e1a04000 	mov	r4, r0
   20d78:	e280000c 	add	r0, r0, #12
   20d7c:	eb000089 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   20d80:	e1a00004 	mov	r0, r4
   20d84:	e8bd4010 	pop	{r4, lr}
   20d88:	eaffffaf 	b	20c4c <CNetConfig::UpdateBroadcastAddress()>

00020d8c <CIPAddress::CIPAddress()>:
   20d8c:	e3a02000 	mov	r2, #0
   20d90:	e5c02000 	strb	r2, [r0]
   20d94:	e12fff1e 	bx	lr

00020d98 <CIPAddress::CIPAddress(unsigned int)>:
   20d98:	e3a02001 	mov	r2, #1
   20d9c:	e5801004 	str	r1, [r0, #4]
   20da0:	e5c02000 	strb	r2, [r0]
   20da4:	e12fff1e 	bx	lr

00020da8 <CIPAddress::CIPAddress(CIPAddress const&)>:
   20da8:	e5d12000 	ldrb	r2, [r1]
   20dac:	e3520000 	cmp	r2, #0
   20db0:	0a000004 	beq	20dc8 <CIPAddress::CIPAddress(CIPAddress const&)+0x20>
   20db4:	e3a0c001 	mov	ip, #1
   20db8:	e5912004 	ldr	r2, [r1, #4]
   20dbc:	e5c0c000 	strb	ip, [r0]
   20dc0:	e5802004 	str	r2, [r0, #4]
   20dc4:	e12fff1e 	bx	lr
   20dc8:	e92d4010 	push	{r4, lr}
   20dcc:	e3a0202e 	mov	r2, #46	; 0x2e
   20dd0:	e59f1004 	ldr	r1, [pc, #4]	; 20ddc <CIPAddress::CIPAddress(CIPAddress const&)+0x34>
   20dd4:	e59f0004 	ldr	r0, [pc, #4]	; 20de0 <CIPAddress::CIPAddress(CIPAddress const&)+0x38>
   20dd8:	eb000e88 	bl	24800 <assertion_failed>
   20ddc:	00044470 	.word	0x00044470
   20de0:	00044480 	.word	0x00044480

00020de4 <CIPAddress::~CIPAddress()>:
   20de4:	e12fff1e 	bx	lr

00020de8 <CIPAddress::operator==(CIPAddress const&) const>:
   20de8:	e5d03000 	ldrb	r3, [r0]
   20dec:	e92d4010 	push	{r4, lr}
   20df0:	e3530000 	cmp	r3, #0
   20df4:	0a000008 	beq	20e1c <CIPAddress::operator==(CIPAddress const&) const+0x34>
   20df8:	e5d13000 	ldrb	r3, [r1]
   20dfc:	e3530000 	cmp	r3, #0
   20e00:	0a000009 	beq	20e2c <CIPAddress::operator==(CIPAddress const&) const+0x44>
   20e04:	e5900004 	ldr	r0, [r0, #4]
   20e08:	e5913004 	ldr	r3, [r1, #4]
   20e0c:	e0400003 	sub	r0, r0, r3
   20e10:	e16f0f10 	clz	r0, r0
   20e14:	e1a002a0 	lsr	r0, r0, #5
   20e18:	e8bd8010 	pop	{r4, pc}
   20e1c:	e3a0203e 	mov	r2, #62	; 0x3e
   20e20:	e59f1014 	ldr	r1, [pc, #20]	; 20e3c <CIPAddress::operator==(CIPAddress const&) const+0x54>
   20e24:	e59f0014 	ldr	r0, [pc, #20]	; 20e40 <CIPAddress::operator==(CIPAddress const&) const+0x58>
   20e28:	eb000e74 	bl	24800 <assertion_failed>
   20e2c:	e3a0203f 	mov	r2, #63	; 0x3f
   20e30:	e59f1004 	ldr	r1, [pc, #4]	; 20e3c <CIPAddress::operator==(CIPAddress const&) const+0x54>
   20e34:	e59f0008 	ldr	r0, [pc, #8]	; 20e44 <CIPAddress::operator==(CIPAddress const&) const+0x5c>
   20e38:	eb000e70 	bl	24800 <assertion_failed>
   20e3c:	00044470 	.word	0x00044470
   20e40:	0003f918 	.word	0x0003f918
   20e44:	00044494 	.word	0x00044494

00020e48 <CIPAddress::operator!=(CIPAddress const&) const>:
   20e48:	e5d03000 	ldrb	r3, [r0]
   20e4c:	e92d4010 	push	{r4, lr}
   20e50:	e3530000 	cmp	r3, #0
   20e54:	0a000007 	beq	20e78 <CIPAddress::operator!=(CIPAddress const&) const+0x30>
   20e58:	e5d13000 	ldrb	r3, [r1]
   20e5c:	e3530000 	cmp	r3, #0
   20e60:	0a000008 	beq	20e88 <CIPAddress::operator!=(CIPAddress const&) const+0x40>
   20e64:	e5900004 	ldr	r0, [r0, #4]
   20e68:	e5913004 	ldr	r3, [r1, #4]
   20e6c:	e0500003 	subs	r0, r0, r3
   20e70:	13a00001 	movne	r0, #1
   20e74:	e8bd8010 	pop	{r4, pc}
   20e78:	e3a02045 	mov	r2, #69	; 0x45
   20e7c:	e59f1014 	ldr	r1, [pc, #20]	; 20e98 <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   20e80:	e59f0014 	ldr	r0, [pc, #20]	; 20e9c <CIPAddress::operator!=(CIPAddress const&) const+0x54>
   20e84:	eb000e5d 	bl	24800 <assertion_failed>
   20e88:	e3a02046 	mov	r2, #70	; 0x46
   20e8c:	e59f1004 	ldr	r1, [pc, #4]	; 20e98 <CIPAddress::operator!=(CIPAddress const&) const+0x50>
   20e90:	e59f0008 	ldr	r0, [pc, #8]	; 20ea0 <CIPAddress::operator!=(CIPAddress const&) const+0x58>
   20e94:	eb000e59 	bl	24800 <assertion_failed>
   20e98:	00044470 	.word	0x00044470
   20e9c:	0003f918 	.word	0x0003f918
   20ea0:	00044494 	.word	0x00044494

00020ea4 <CIPAddress::operator==(unsigned char const*) const>:
   20ea4:	e5d03000 	ldrb	r3, [r0]
   20ea8:	e92d4010 	push	{r4, lr}
   20eac:	e3530000 	cmp	r3, #0
   20eb0:	0a000007 	beq	20ed4 <CIPAddress::operator==(unsigned char const*) const+0x30>
   20eb4:	e3510000 	cmp	r1, #0
   20eb8:	0a000009 	beq	20ee4 <CIPAddress::operator==(unsigned char const*) const+0x40>
   20ebc:	e3a02004 	mov	r2, #4
   20ec0:	e2800004 	add	r0, r0, #4
   20ec4:	eb002455 	bl	2a020 <memcmp>
   20ec8:	e16f0f10 	clz	r0, r0
   20ecc:	e1a002a0 	lsr	r0, r0, #5
   20ed0:	e8bd8010 	pop	{r4, pc}
   20ed4:	e3a0204c 	mov	r2, #76	; 0x4c
   20ed8:	e59f1014 	ldr	r1, [pc, #20]	; 20ef4 <CIPAddress::operator==(unsigned char const*) const+0x50>
   20edc:	e59f0014 	ldr	r0, [pc, #20]	; 20ef8 <CIPAddress::operator==(unsigned char const*) const+0x54>
   20ee0:	eb000e46 	bl	24800 <assertion_failed>
   20ee4:	e3a0204d 	mov	r2, #77	; 0x4d
   20ee8:	e59f1004 	ldr	r1, [pc, #4]	; 20ef4 <CIPAddress::operator==(unsigned char const*) const+0x50>
   20eec:	e59f0008 	ldr	r0, [pc, #8]	; 20efc <CIPAddress::operator==(unsigned char const*) const+0x58>
   20ef0:	eb000e42 	bl	24800 <assertion_failed>
   20ef4:	00044470 	.word	0x00044470
   20ef8:	0003f918 	.word	0x0003f918
   20efc:	000444a8 	.word	0x000444a8

00020f00 <CIPAddress::operator!=(unsigned char const*) const>:
   20f00:	e92d4010 	push	{r4, lr}
   20f04:	ebffffe6 	bl	20ea4 <CIPAddress::operator==(unsigned char const*) const>
   20f08:	e2200001 	eor	r0, r0, #1
   20f0c:	e6ef0070 	uxtb	r0, r0
   20f10:	e8bd8010 	pop	{r4, pc}

00020f14 <CIPAddress::operator==(unsigned int) const>:
   20f14:	e5d03000 	ldrb	r3, [r0]
   20f18:	e3530000 	cmp	r3, #0
   20f1c:	0a000004 	beq	20f34 <CIPAddress::operator==(unsigned int) const+0x20>
   20f20:	e5900004 	ldr	r0, [r0, #4]
   20f24:	e0400001 	sub	r0, r0, r1
   20f28:	e16f0f10 	clz	r0, r0
   20f2c:	e1a002a0 	lsr	r0, r0, #5
   20f30:	e12fff1e 	bx	lr
   20f34:	e92d4010 	push	{r4, lr}
   20f38:	e3a02058 	mov	r2, #88	; 0x58
   20f3c:	e59f1004 	ldr	r1, [pc, #4]	; 20f48 <CIPAddress::operator==(unsigned int) const+0x34>
   20f40:	e59f0004 	ldr	r0, [pc, #4]	; 20f4c <CIPAddress::operator==(unsigned int) const+0x38>
   20f44:	eb000e2d 	bl	24800 <assertion_failed>
   20f48:	00044470 	.word	0x00044470
   20f4c:	0003f918 	.word	0x0003f918

00020f50 <CIPAddress::operator!=(unsigned int) const>:
   20f50:	e5d03000 	ldrb	r3, [r0]
   20f54:	e3530000 	cmp	r3, #0
   20f58:	0a000003 	beq	20f6c <CIPAddress::operator!=(unsigned int) const+0x1c>
   20f5c:	e5900004 	ldr	r0, [r0, #4]
   20f60:	e0500001 	subs	r0, r0, r1
   20f64:	13a00001 	movne	r0, #1
   20f68:	e12fff1e 	bx	lr
   20f6c:	e92d4010 	push	{r4, lr}
   20f70:	e3a0205e 	mov	r2, #94	; 0x5e
   20f74:	e59f1004 	ldr	r1, [pc, #4]	; 20f80 <CIPAddress::operator!=(unsigned int) const+0x30>
   20f78:	e59f0004 	ldr	r0, [pc, #4]	; 20f84 <CIPAddress::operator!=(unsigned int) const+0x34>
   20f7c:	eb000e1f 	bl	24800 <assertion_failed>
   20f80:	00044470 	.word	0x00044470
   20f84:	0003f918 	.word	0x0003f918

00020f88 <CIPAddress::operator=(unsigned int)>:
   20f88:	e3a02001 	mov	r2, #1
   20f8c:	e5801004 	str	r1, [r0, #4]
   20f90:	e5c02000 	strb	r2, [r0]
   20f94:	e12fff1e 	bx	lr

00020f98 <CIPAddress::Set(unsigned int)>:
   20f98:	e3a03001 	mov	r3, #1
   20f9c:	e5801004 	str	r1, [r0, #4]
   20fa0:	e5c03000 	strb	r3, [r0]
   20fa4:	e12fff1e 	bx	lr

00020fa8 <CIPAddress::Set(unsigned char const*)>:
   20fa8:	e3510000 	cmp	r1, #0
   20fac:	e92d4010 	push	{r4, lr}
   20fb0:	0a000006 	beq	20fd0 <CIPAddress::Set(unsigned char const*)+0x28>
   20fb4:	e3a02004 	mov	r2, #4
   20fb8:	e1a04000 	mov	r4, r0
   20fbc:	e0800002 	add	r0, r0, r2
   20fc0:	eb002652 	bl	2a910 <memcpy>
   20fc4:	e3a03001 	mov	r3, #1
   20fc8:	e5c43000 	strb	r3, [r4]
   20fcc:	e8bd8010 	pop	{r4, pc}
   20fd0:	e3a02075 	mov	r2, #117	; 0x75
   20fd4:	e59f1004 	ldr	r1, [pc, #4]	; 20fe0 <CIPAddress::Set(unsigned char const*)+0x38>
   20fd8:	e59f0004 	ldr	r0, [pc, #4]	; 20fe4 <CIPAddress::Set(unsigned char const*)+0x3c>
   20fdc:	eb000e07 	bl	24800 <assertion_failed>
   20fe0:	00044470 	.word	0x00044470
   20fe4:	000444b8 	.word	0x000444b8

00020fe8 <CIPAddress::CIPAddress(unsigned char const*)>:
   20fe8:	e92d4010 	push	{r4, lr}
   20fec:	e1a04000 	mov	r4, r0
   20ff0:	ebffffec 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   20ff4:	e1a00004 	mov	r0, r4
   20ff8:	e8bd8010 	pop	{r4, pc}

00020ffc <CIPAddress::Set(CIPAddress const&)>:
   20ffc:	e5d13000 	ldrb	r3, [r1]
   21000:	e3530000 	cmp	r3, #0
   21004:	0a000004 	beq	2101c <CIPAddress::Set(CIPAddress const&)+0x20>
   21008:	e3a02001 	mov	r2, #1
   2100c:	e5913004 	ldr	r3, [r1, #4]
   21010:	e5c02000 	strb	r2, [r0]
   21014:	e5803004 	str	r3, [r0, #4]
   21018:	e12fff1e 	bx	lr
   2101c:	e92d4010 	push	{r4, lr}
   21020:	e3a0207e 	mov	r2, #126	; 0x7e
   21024:	e59f1004 	ldr	r1, [pc, #4]	; 21030 <CIPAddress::Set(CIPAddress const&)+0x34>
   21028:	e59f0004 	ldr	r0, [pc, #4]	; 21034 <CIPAddress::Set(CIPAddress const&)+0x38>
   2102c:	eb000df3 	bl	24800 <assertion_failed>
   21030:	00044470 	.word	0x00044470
   21034:	00044480 	.word	0x00044480

00021038 <CIPAddress::SetBroadcast()>:
   21038:	e3e02000 	mvn	r2, #0
   2103c:	e3a03001 	mov	r3, #1
   21040:	e5802004 	str	r2, [r0, #4]
   21044:	e5c03000 	strb	r3, [r0]
   21048:	e12fff1e 	bx	lr

0002104c <CIPAddress::operator unsigned int() const>:
   2104c:	e5d03000 	ldrb	r3, [r0]
   21050:	e3530000 	cmp	r3, #0
   21054:	0a000001 	beq	21060 <CIPAddress::operator unsigned int() const+0x14>
   21058:	e5900004 	ldr	r0, [r0, #4]
   2105c:	e12fff1e 	bx	lr
   21060:	e92d4010 	push	{r4, lr}
   21064:	e3a0208f 	mov	r2, #143	; 0x8f
   21068:	e59f1004 	ldr	r1, [pc, #4]	; 21074 <CIPAddress::operator unsigned int() const+0x28>
   2106c:	e59f0004 	ldr	r0, [pc, #4]	; 21078 <CIPAddress::operator unsigned int() const+0x2c>
   21070:	eb000de2 	bl	24800 <assertion_failed>
   21074:	00044470 	.word	0x00044470
   21078:	0003f918 	.word	0x0003f918

0002107c <CIPAddress::Get() const>:
   2107c:	e5d03000 	ldrb	r3, [r0]
   21080:	e3530000 	cmp	r3, #0
   21084:	0a000001 	beq	21090 <CIPAddress::Get() const+0x14>
   21088:	e2800004 	add	r0, r0, #4
   2108c:	e12fff1e 	bx	lr
   21090:	e92d4010 	push	{r4, lr}
   21094:	e3a02095 	mov	r2, #149	; 0x95
   21098:	e59f1004 	ldr	r1, [pc, #4]	; 210a4 <CIPAddress::Get() const+0x28>
   2109c:	e59f0004 	ldr	r0, [pc, #4]	; 210a8 <CIPAddress::Get() const+0x2c>
   210a0:	eb000dd6 	bl	24800 <assertion_failed>
   210a4:	00044470 	.word	0x00044470
   210a8:	0003f918 	.word	0x0003f918

000210ac <CIPAddress::CopyTo(unsigned char*) const>:
   210ac:	e5d02000 	ldrb	r2, [r0]
   210b0:	e92d4010 	push	{r4, lr}
   210b4:	e3520000 	cmp	r2, #0
   210b8:	0a000007 	beq	210dc <CIPAddress::CopyTo(unsigned char*) const+0x30>
   210bc:	e3510000 	cmp	r1, #0
   210c0:	e1a03001 	mov	r3, r1
   210c4:	0a000008 	beq	210ec <CIPAddress::CopyTo(unsigned char*) const+0x40>
   210c8:	e8bd4010 	pop	{r4, lr}
   210cc:	e2801004 	add	r1, r0, #4
   210d0:	e3a02004 	mov	r2, #4
   210d4:	e1a00003 	mov	r0, r3
   210d8:	ea00260c 	b	2a910 <memcpy>
   210dc:	e3a0209b 	mov	r2, #155	; 0x9b
   210e0:	e59f1014 	ldr	r1, [pc, #20]	; 210fc <CIPAddress::CopyTo(unsigned char*) const+0x50>
   210e4:	e59f0014 	ldr	r0, [pc, #20]	; 21100 <CIPAddress::CopyTo(unsigned char*) const+0x54>
   210e8:	eb000dc4 	bl	24800 <assertion_failed>
   210ec:	e3a0209c 	mov	r2, #156	; 0x9c
   210f0:	e59f1004 	ldr	r1, [pc, #4]	; 210fc <CIPAddress::CopyTo(unsigned char*) const+0x50>
   210f4:	e59f0008 	ldr	r0, [pc, #8]	; 21104 <CIPAddress::CopyTo(unsigned char*) const+0x58>
   210f8:	eb000dc0 	bl	24800 <assertion_failed>
   210fc:	00044470 	.word	0x00044470
   21100:	0003f918 	.word	0x0003f918
   21104:	00040b94 	.word	0x00040b94

00021108 <CIPAddress::IsNull() const>:
   21108:	e5d03000 	ldrb	r3, [r0]
   2110c:	e3530000 	cmp	r3, #0
   21110:	0a000003 	beq	21124 <CIPAddress::IsNull() const+0x1c>
   21114:	e5900004 	ldr	r0, [r0, #4]
   21118:	e16f0f10 	clz	r0, r0
   2111c:	e1a002a0 	lsr	r0, r0, #5
   21120:	e12fff1e 	bx	lr
   21124:	e92d4010 	push	{r4, lr}
   21128:	e3a020a2 	mov	r2, #162	; 0xa2
   2112c:	e59f1004 	ldr	r1, [pc, #4]	; 21138 <CIPAddress::IsNull() const+0x30>
   21130:	e59f0004 	ldr	r0, [pc, #4]	; 2113c <CIPAddress::IsNull() const+0x34>
   21134:	eb000db1 	bl	24800 <assertion_failed>
   21138:	00044470 	.word	0x00044470
   2113c:	0003f918 	.word	0x0003f918

00021140 <CIPAddress::IsBroadcast() const>:
   21140:	e5d03000 	ldrb	r3, [r0]
   21144:	e3530000 	cmp	r3, #0
   21148:	0a000004 	beq	21160 <CIPAddress::IsBroadcast() const+0x20>
   2114c:	e5900004 	ldr	r0, [r0, #4]
   21150:	e3700001 	cmn	r0, #1
   21154:	13a00000 	movne	r0, #0
   21158:	03a00001 	moveq	r0, #1
   2115c:	e12fff1e 	bx	lr
   21160:	e92d4010 	push	{r4, lr}
   21164:	e3a020a8 	mov	r2, #168	; 0xa8
   21168:	e59f1004 	ldr	r1, [pc, #4]	; 21174 <CIPAddress::IsBroadcast() const+0x34>
   2116c:	e59f0004 	ldr	r0, [pc, #4]	; 21178 <CIPAddress::IsBroadcast() const+0x38>
   21170:	eb000da2 	bl	24800 <assertion_failed>
   21174:	00044470 	.word	0x00044470
   21178:	0003f918 	.word	0x0003f918

0002117c <CIPAddress::GetSize() const>:
   2117c:	e3a00004 	mov	r0, #4
   21180:	e12fff1e 	bx	lr

00021184 <CIPAddress::Format(CString*) const>:
   21184:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   21188:	e5d03000 	ldrb	r3, [r0]
   2118c:	e24dd00c 	sub	sp, sp, #12
   21190:	e3530000 	cmp	r3, #0
   21194:	0a00000f 	beq	211d8 <CIPAddress::Format(CString*) const+0x54>
   21198:	e3510000 	cmp	r1, #0
   2119c:	0a000011 	beq	211e8 <CIPAddress::Format(CString*) const+0x64>
   211a0:	e5902004 	ldr	r2, [r0, #4]
   211a4:	e1a00001 	mov	r0, r1
   211a8:	e1a01822 	lsr	r1, r2, #16
   211ac:	e1a0cc22 	lsr	ip, r2, #24
   211b0:	e6ef1071 	uxtb	r1, r1
   211b4:	e1a03422 	lsr	r3, r2, #8
   211b8:	e58d1000 	str	r1, [sp]
   211bc:	e6ef3073 	uxtb	r3, r3
   211c0:	e58dc004 	str	ip, [sp, #4]
   211c4:	e6ef2072 	uxtb	r2, r2
   211c8:	e59f1028 	ldr	r1, [pc, #40]	; 211f8 <CIPAddress::Format(CString*) const+0x74>
   211cc:	eb001fa7 	bl	29070 <CString::Format(char const*, ...)>
   211d0:	e28dd00c 	add	sp, sp, #12
   211d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   211d8:	e3a020b3 	mov	r2, #179	; 0xb3
   211dc:	e59f1018 	ldr	r1, [pc, #24]	; 211fc <CIPAddress::Format(CString*) const+0x78>
   211e0:	e59f0018 	ldr	r0, [pc, #24]	; 21200 <CIPAddress::Format(CString*) const+0x7c>
   211e4:	eb000d85 	bl	24800 <assertion_failed>
   211e8:	e3a020b4 	mov	r2, #180	; 0xb4
   211ec:	e59f1008 	ldr	r1, [pc, #8]	; 211fc <CIPAddress::Format(CString*) const+0x78>
   211f0:	e59f000c 	ldr	r0, [pc, #12]	; 21204 <CIPAddress::Format(CString*) const+0x80>
   211f4:	eb000d81 	bl	24800 <assertion_failed>
   211f8:	000444d8 	.word	0x000444d8
   211fc:	00044470 	.word	0x00044470
   21200:	0003f918 	.word	0x0003f918
   21204:	000444c8 	.word	0x000444c8

00021208 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>:
   21208:	e92d4030 	push	{r4, r5, lr}
   2120c:	e5d13000 	ldrb	r3, [r1]
   21210:	e24dd00c 	sub	sp, sp, #12
   21214:	e3530000 	cmp	r3, #0
   21218:	0a000018 	beq	21280 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x78>
   2121c:	e1a04001 	mov	r4, r1
   21220:	e5911004 	ldr	r1, [r1, #4]
   21224:	e3710001 	cmn	r1, #1
   21228:	0a000011 	beq	21274 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x6c>
   2122c:	e3520000 	cmp	r2, #0
   21230:	0a000016 	beq	21290 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x88>
   21234:	e1a01002 	mov	r1, r2
   21238:	e3a02004 	mov	r2, #4
   2123c:	e1a05000 	mov	r5, r0
   21240:	e08d0002 	add	r0, sp, r2
   21244:	eb0025b1 	bl	2a910 <memcpy>
   21248:	e5d53000 	ldrb	r3, [r5]
   2124c:	e3530000 	cmp	r3, #0
   21250:	0a000012 	beq	212a0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x98>
   21254:	e59d2004 	ldr	r2, [sp, #4]
   21258:	e5953004 	ldr	r3, [r5, #4]
   2125c:	e5941004 	ldr	r1, [r4, #4]
   21260:	e0033002 	and	r3, r3, r2
   21264:	e0022001 	and	r2, r2, r1
   21268:	e0433002 	sub	r3, r3, r2
   2126c:	e16f3f13 	clz	r3, r3
   21270:	e1a032a3 	lsr	r3, r3, #5
   21274:	e1a00003 	mov	r0, r3
   21278:	e28dd00c 	add	sp, sp, #12
   2127c:	e8bd8030 	pop	{r4, r5, pc}
   21280:	e3a020a8 	mov	r2, #168	; 0xa8
   21284:	e59f1024 	ldr	r1, [pc, #36]	; 212b0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   21288:	e59f0024 	ldr	r0, [pc, #36]	; 212b4 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xac>
   2128c:	eb000d5b 	bl	24800 <assertion_failed>
   21290:	e3a020c1 	mov	r2, #193	; 0xc1
   21294:	e59f1014 	ldr	r1, [pc, #20]	; 212b0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   21298:	e59f0018 	ldr	r0, [pc, #24]	; 212b8 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xb0>
   2129c:	eb000d57 	bl	24800 <assertion_failed>
   212a0:	e3a020c5 	mov	r2, #197	; 0xc5
   212a4:	e59f1004 	ldr	r1, [pc, #4]	; 212b0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa8>
   212a8:	e59f0004 	ldr	r0, [pc, #4]	; 212b4 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xac>
   212ac:	eb000d53 	bl	24800 <assertion_failed>
   212b0:	00044470 	.word	0x00044470
   212b4:	0003f918 	.word	0x0003f918
   212b8:	000444e4 	.word	0x000444e4

000212bc <CNetQueue::CNetQueue()>:
   212bc:	e3a02000 	mov	r2, #0
   212c0:	e5802000 	str	r2, [r0]
   212c4:	e5802004 	str	r2, [r0, #4]
   212c8:	e5802008 	str	r2, [r0, #8]
   212cc:	e12fff1e 	bx	lr

000212d0 <CNetQueue::IsEmpty() const>:
   212d0:	e5900000 	ldr	r0, [r0]
   212d4:	e16f0f10 	clz	r0, r0
   212d8:	e1a002a0 	lsr	r0, r0, #5
   212dc:	e12fff1e 	bx	lr

000212e0 <CNetQueue::Flush()>:
   212e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   212e4:	e5904000 	ldr	r4, [r0]
   212e8:	e3540000 	cmp	r4, #0
   212ec:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   212f0:	e1a05000 	mov	r5, r0
   212f4:	e3a07000 	mov	r7, #0
   212f8:	e3a06e65 	mov	r6, #1616	; 0x650
   212fc:	ea00000f 	b	21340 <CNetQueue::Flush()+0x60>
   21300:	e3540000 	cmp	r4, #0
   21304:	0a000014 	beq	2135c <CNetQueue::Flush()+0x7c>
   21308:	e5943004 	ldr	r3, [r4, #4]
   2130c:	e3530000 	cmp	r3, #0
   21310:	e5853000 	str	r3, [r5]
   21314:	15837000 	strne	r7, [r3]
   21318:	0a000016 	beq	21378 <CNetQueue::Flush()+0x98>
   2131c:	e5953008 	ldr	r3, [r5, #8]
   21320:	e3530000 	cmp	r3, #0
   21324:	1a000010 	bne	2136c <CNetQueue::Flush()+0x8c>
   21328:	e1a00004 	mov	r0, r4
   2132c:	e1a01006 	mov	r1, r6
   21330:	eb00275d 	bl	2b0ac <operator delete(void*, unsigned int)>
   21334:	e5954000 	ldr	r4, [r5]
   21338:	e3540000 	cmp	r4, #0
   2133c:	0a00000c 	beq	21374 <CNetQueue::Flush()+0x94>
   21340:	e5950008 	ldr	r0, [r5, #8]
   21344:	e3500000 	cmp	r0, #0
   21348:	0affffec 	beq	21300 <CNetQueue::Flush()+0x20>
   2134c:	eb002a7a 	bl	2bd3c <EnterCritical>
   21350:	e5954000 	ldr	r4, [r5]
   21354:	e3540000 	cmp	r4, #0
   21358:	1affffea 	bne	21308 <CNetQueue::Flush()+0x28>
   2135c:	e3a0203a 	mov	r2, #58	; 0x3a
   21360:	e59f1030 	ldr	r1, [pc, #48]	; 21398 <CNetQueue::Flush()+0xb8>
   21364:	e59f0030 	ldr	r0, [pc, #48]	; 2139c <CNetQueue::Flush()+0xbc>
   21368:	eb000d24 	bl	24800 <assertion_failed>
   2136c:	eb002a9d 	bl	2bde8 <LeaveCritical>
   21370:	eaffffec 	b	21328 <CNetQueue::Flush()+0x48>
   21374:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21378:	e5952004 	ldr	r2, [r5, #4]
   2137c:	e1540002 	cmp	r4, r2
   21380:	05853004 	streq	r3, [r5, #4]
   21384:	0affffe4 	beq	2131c <CNetQueue::Flush()+0x3c>
   21388:	e3a02043 	mov	r2, #67	; 0x43
   2138c:	e59f1004 	ldr	r1, [pc, #4]	; 21398 <CNetQueue::Flush()+0xb8>
   21390:	e59f0008 	ldr	r0, [pc, #8]	; 213a0 <CNetQueue::Flush()+0xc0>
   21394:	eb000d19 	bl	24800 <assertion_failed>
   21398:	000444f4 	.word	0x000444f4
   2139c:	00043fc0 	.word	0x00043fc0
   213a0:	00044504 	.word	0x00044504

000213a4 <CNetQueue::~CNetQueue()>:
   213a4:	e92d4010 	push	{r4, lr}
   213a8:	e1a04000 	mov	r4, r0
   213ac:	ebffffcb 	bl	212e0 <CNetQueue::Flush()>
   213b0:	e1a00004 	mov	r0, r4
   213b4:	e8bd8010 	pop	{r4, pc}

000213b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)>:
   213b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   213bc:	e1a05002 	mov	r5, r2
   213c0:	e1a06000 	mov	r6, r0
   213c4:	e3a00e65 	mov	r0, #1616	; 0x650
   213c8:	e1a07001 	mov	r7, r1
   213cc:	e1a08003 	mov	r8, r3
   213d0:	eb002727 	bl	2b074 <operator new(unsigned int)>
   213d4:	e3550000 	cmp	r5, #0
   213d8:	0a000026 	beq	21478 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xc0>
   213dc:	e3550d19 	cmp	r5, #1600	; 0x640
   213e0:	8a000028 	bhi	21488 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xd0>
   213e4:	e3570000 	cmp	r7, #0
   213e8:	e1a04000 	mov	r4, r0
   213ec:	e5805008 	str	r5, [r0, #8]
   213f0:	0a000028 	beq	21498 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xe0>
   213f4:	e1a02005 	mov	r2, r5
   213f8:	e1a01007 	mov	r1, r7
   213fc:	e280000c 	add	r0, r0, #12
   21400:	eb002542 	bl	2a910 <memcpy>
   21404:	e5960008 	ldr	r0, [r6, #8]
   21408:	e584864c 	str	r8, [r4, #1612]	; 0x64c
   2140c:	e3500000 	cmp	r0, #0
   21410:	1a000012 	bne	21460 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xa8>
   21414:	e896000a 	ldm	r6, {r1, r3}
   21418:	e3a02000 	mov	r2, #0
   2141c:	e1510002 	cmp	r1, r2
   21420:	e5842004 	str	r2, [r4, #4]
   21424:	e5843000 	str	r3, [r4]
   21428:	05864000 	streq	r4, [r6]
   2142c:	0a000005 	beq	21448 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x90>
   21430:	e3530000 	cmp	r3, #0
   21434:	0a00001b 	beq	214a8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xf0>
   21438:	e5932004 	ldr	r2, [r3, #4]
   2143c:	e3520000 	cmp	r2, #0
   21440:	05834004 	streq	r4, [r3, #4]
   21444:	1a000007 	bne	21468 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xb0>
   21448:	e5963008 	ldr	r3, [r6, #8]
   2144c:	e5864004 	str	r4, [r6, #4]
   21450:	e3530000 	cmp	r3, #0
   21454:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   21458:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2145c:	ea002a61 	b	2bde8 <LeaveCritical>
   21460:	eb002a35 	bl	2bd3c <EnterCritical>
   21464:	eaffffea 	b	21414 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x5c>
   21468:	e3a02067 	mov	r2, #103	; 0x67
   2146c:	e59f1044 	ldr	r1, [pc, #68]	; 214b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   21470:	e59f0044 	ldr	r0, [pc, #68]	; 214bc <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x104>
   21474:	eb000ce1 	bl	24800 <assertion_failed>
   21478:	e3a02052 	mov	r2, #82	; 0x52
   2147c:	e59f1034 	ldr	r1, [pc, #52]	; 214b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   21480:	e59f0038 	ldr	r0, [pc, #56]	; 214c0 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x108>
   21484:	eb000cdd 	bl	24800 <assertion_failed>
   21488:	e3a02053 	mov	r2, #83	; 0x53
   2148c:	e59f1024 	ldr	r1, [pc, #36]	; 214b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   21490:	e59f002c 	ldr	r0, [pc, #44]	; 214c4 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x10c>
   21494:	eb000cd9 	bl	24800 <assertion_failed>
   21498:	e3a02056 	mov	r2, #86	; 0x56
   2149c:	e59f1014 	ldr	r1, [pc, #20]	; 214b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   214a0:	e59f0020 	ldr	r0, [pc, #32]	; 214c8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x110>
   214a4:	eb000cd5 	bl	24800 <assertion_failed>
   214a8:	e3a02066 	mov	r2, #102	; 0x66
   214ac:	e59f1004 	ldr	r1, [pc, #4]	; 214b8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x100>
   214b0:	e59f0014 	ldr	r0, [pc, #20]	; 214cc <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x114>
   214b4:	eb000cd1 	bl	24800 <assertion_failed>
   214b8:	000444f4 	.word	0x000444f4
   214bc:	00044528 	.word	0x00044528
   214c0:	00043a08 	.word	0x00043a08
   214c4:	000417ec 	.word	0x000417ec
   214c8:	00040b94 	.word	0x00040b94
   214cc:	00044518 	.word	0x00044518

000214d0 <CNetQueue::Dequeue(void*, void**)>:
   214d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   214d4:	e5905000 	ldr	r5, [r0]
   214d8:	e3550000 	cmp	r5, #0
   214dc:	0a000031 	beq	215a8 <CNetQueue::Dequeue(void*, void**)+0xd8>
   214e0:	e1a04000 	mov	r4, r0
   214e4:	e5900008 	ldr	r0, [r0, #8]
   214e8:	e1a06002 	mov	r6, r2
   214ec:	e3500000 	cmp	r0, #0
   214f0:	e1a07001 	mov	r7, r1
   214f4:	1a000019 	bne	21560 <CNetQueue::Dequeue(void*, void**)+0x90>
   214f8:	e5953004 	ldr	r3, [r5, #4]
   214fc:	e3530000 	cmp	r3, #0
   21500:	e5843000 	str	r3, [r4]
   21504:	0a00001f 	beq	21588 <CNetQueue::Dequeue(void*, void**)+0xb8>
   21508:	e3a02000 	mov	r2, #0
   2150c:	e5832000 	str	r2, [r3]
   21510:	e5943008 	ldr	r3, [r4, #8]
   21514:	e3530000 	cmp	r3, #0
   21518:	1a000018 	bne	21580 <CNetQueue::Dequeue(void*, void**)+0xb0>
   2151c:	e5954008 	ldr	r4, [r5, #8]
   21520:	e3540000 	cmp	r4, #0
   21524:	0a000022 	beq	215b4 <CNetQueue::Dequeue(void*, void**)+0xe4>
   21528:	e3540d19 	cmp	r4, #1600	; 0x640
   2152c:	8a000024 	bhi	215c4 <CNetQueue::Dequeue(void*, void**)+0xf4>
   21530:	e1a02004 	mov	r2, r4
   21534:	e285100c 	add	r1, r5, #12
   21538:	e1a00007 	mov	r0, r7
   2153c:	eb0024f3 	bl	2a910 <memcpy>
   21540:	e3560000 	cmp	r6, #0
   21544:	1595364c 	ldrne	r3, [r5, #1612]	; 0x64c
   21548:	e1a00005 	mov	r0, r5
   2154c:	15863000 	strne	r3, [r6]
   21550:	e3a01e65 	mov	r1, #1616	; 0x650
   21554:	eb0026d4 	bl	2b0ac <operator delete(void*, unsigned int)>
   21558:	e1a00004 	mov	r0, r4
   2155c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21560:	eb0029f5 	bl	2bd3c <EnterCritical>
   21564:	e5945000 	ldr	r5, [r4]
   21568:	e3550000 	cmp	r5, #0
   2156c:	1affffe1 	bne	214f8 <CNetQueue::Dequeue(void*, void**)+0x28>
   21570:	e3a02078 	mov	r2, #120	; 0x78
   21574:	e59f1058 	ldr	r1, [pc, #88]	; 215d4 <CNetQueue::Dequeue(void*, void**)+0x104>
   21578:	e59f0058 	ldr	r0, [pc, #88]	; 215d8 <CNetQueue::Dequeue(void*, void**)+0x108>
   2157c:	eb000c9f 	bl	24800 <assertion_failed>
   21580:	eb002a18 	bl	2bde8 <LeaveCritical>
   21584:	eaffffe4 	b	2151c <CNetQueue::Dequeue(void*, void**)+0x4c>
   21588:	e5942004 	ldr	r2, [r4, #4]
   2158c:	e1520005 	cmp	r2, r5
   21590:	05843004 	streq	r3, [r4, #4]
   21594:	0affffdd 	beq	21510 <CNetQueue::Dequeue(void*, void**)+0x40>
   21598:	e3a02081 	mov	r2, #129	; 0x81
   2159c:	e59f1030 	ldr	r1, [pc, #48]	; 215d4 <CNetQueue::Dequeue(void*, void**)+0x104>
   215a0:	e59f0034 	ldr	r0, [pc, #52]	; 215dc <CNetQueue::Dequeue(void*, void**)+0x10c>
   215a4:	eb000c95 	bl	24800 <assertion_failed>
   215a8:	e1a04005 	mov	r4, r5
   215ac:	e1a00004 	mov	r0, r4
   215b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   215b4:	e3a02088 	mov	r2, #136	; 0x88
   215b8:	e59f1014 	ldr	r1, [pc, #20]	; 215d4 <CNetQueue::Dequeue(void*, void**)+0x104>
   215bc:	e59f001c 	ldr	r0, [pc, #28]	; 215e0 <CNetQueue::Dequeue(void*, void**)+0x110>
   215c0:	eb000c8e 	bl	24800 <assertion_failed>
   215c4:	e3a02089 	mov	r2, #137	; 0x89
   215c8:	e59f1004 	ldr	r1, [pc, #4]	; 215d4 <CNetQueue::Dequeue(void*, void**)+0x104>
   215cc:	e59f0010 	ldr	r0, [pc, #16]	; 215e4 <CNetQueue::Dequeue(void*, void**)+0x114>
   215d0:	eb000c8a 	bl	24800 <assertion_failed>
   215d4:	000444f4 	.word	0x000444f4
   215d8:	00043fc0 	.word	0x00043fc0
   215dc:	00044504 	.word	0x00044504
   215e0:	0004453c 	.word	0x0004453c
   215e4:	00044548 	.word	0x00044548

000215e8 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>:
   215e8:	e92d4070 	push	{r4, r5, r6, lr}
   215ec:	e1a04000 	mov	r4, r0
   215f0:	e3a05000 	mov	r5, #0
   215f4:	e1a06002 	mov	r6, r2
   215f8:	e1a00001 	mov	r0, r1
   215fc:	e5c4500c 	strb	r5, [r4, #12]
   21600:	e1a01004 	mov	r1, r4
   21604:	ebfffea8 	bl	210ac <CIPAddress::CopyTo(unsigned char*) const>
   21608:	e5c45008 	strb	r5, [r4, #8]
   2160c:	e5c46009 	strb	r6, [r4, #9]
   21610:	e1a00004 	mov	r0, r4
   21614:	e8bd8070 	pop	{r4, r5, r6, pc}

00021618 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>:
   21618:	e92d4070 	push	{r4, r5, r6, lr}
   2161c:	e3a0c001 	mov	ip, #1
   21620:	e1a04000 	mov	r4, r0
   21624:	e1a06002 	mov	r6, r2
   21628:	e1a00001 	mov	r0, r1
   2162c:	e5c4c00c 	strb	ip, [r4, #12]
   21630:	e1a01004 	mov	r1, r4
   21634:	e1a05003 	mov	r5, r3
   21638:	ebfffe9b 	bl	210ac <CIPAddress::CopyTo(unsigned char*) const>
   2163c:	e1a00006 	mov	r0, r6
   21640:	e2841004 	add	r1, r4, #4
   21644:	ebfffe98 	bl	210ac <CIPAddress::CopyTo(unsigned char*) const>
   21648:	e3a02000 	mov	r2, #0
   2164c:	e5c45009 	strb	r5, [r4, #9]
   21650:	e5c42008 	strb	r2, [r4, #8]
   21654:	e1a00004 	mov	r0, r4
   21658:	e8bd8070 	pop	{r4, r5, r6, pc}

0002165c <CChecksumCalculator::~CChecksumCalculator()>:
   2165c:	e12fff1e 	bx	lr

00021660 <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>:
   21660:	e1a03001 	mov	r3, r1
   21664:	e1a01000 	mov	r1, r0
   21668:	e1a00003 	mov	r0, r3
   2166c:	eafffe8e 	b	210ac <CIPAddress::CopyTo(unsigned char*) const>

00021670 <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>:
   21670:	e92d4010 	push	{r4, lr}
   21674:	e1a04000 	mov	r4, r0
   21678:	e1a00001 	mov	r0, r1
   2167c:	e2841004 	add	r1, r4, #4
   21680:	ebfffe89 	bl	210ac <CIPAddress::CopyTo(unsigned char*) const>
   21684:	e3a03001 	mov	r3, #1
   21688:	e5c4300c 	strb	r3, [r4, #12]
   2168c:	e8bd8010 	pop	{r4, pc}

00021690 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>:
   21690:	e3500000 	cmp	r0, #0
   21694:	e92d4010 	push	{r4, lr}
   21698:	0a000015 	beq	216f4 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x64>
   2169c:	e3510000 	cmp	r1, #0
   216a0:	0a000017 	beq	21704 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x74>
   216a4:	e3510001 	cmp	r1, #1
   216a8:	9a00000c 	bls	216e0 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x50>
   216ac:	e1a0c000 	mov	ip, r0
   216b0:	e1a03001 	mov	r3, r1
   216b4:	e2433002 	sub	r3, r3, #2
   216b8:	e0dce0b2 	ldrh	lr, [ip], #2
   216bc:	e3530001 	cmp	r3, #1
   216c0:	e082200e 	add	r2, r2, lr
   216c4:	8afffffa 	bhi	216b4 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x24>
   216c8:	e2413002 	sub	r3, r1, #2
   216cc:	e3c33001 	bic	r3, r3, #1
   216d0:	e2833002 	add	r3, r3, #2
   216d4:	e3110001 	tst	r1, #1
   216d8:	e0800003 	add	r0, r0, r3
   216dc:	0a000002 	beq	216ec <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x5c>
   216e0:	e5d00000 	ldrb	r0, [r0]
   216e4:	e0800002 	add	r0, r0, r2
   216e8:	e8bd8010 	pop	{r4, pc}
   216ec:	e1a00002 	mov	r0, r2
   216f0:	e8bd8010 	pop	{r4, pc}
   216f4:	e3a02054 	mov	r2, #84	; 0x54
   216f8:	e59f1014 	ldr	r1, [pc, #20]	; 21714 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x84>
   216fc:	e59f0014 	ldr	r0, [pc, #20]	; 21718 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x88>
   21700:	eb000c3e 	bl	24800 <assertion_failed>
   21704:	e3a02055 	mov	r2, #85	; 0x55
   21708:	e59f1004 	ldr	r1, [pc, #4]	; 21714 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x84>
   2170c:	e59f0008 	ldr	r0, [pc, #8]	; 2171c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x8c>
   21710:	eb000c3a 	bl	24800 <assertion_failed>
   21714:	00044568 	.word	0x00044568
   21718:	00044580 	.word	0x00044580
   2171c:	00043a08 	.word	0x00043a08

00021720 <CChecksumCalculator::Calculate(void const*, unsigned int)>:
   21720:	e5d0300c 	ldrb	r3, [r0, #12]
   21724:	e92d4070 	push	{r4, r5, r6, lr}
   21728:	e3530000 	cmp	r3, #0
   2172c:	0a00001d 	beq	217a8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x88>
   21730:	e1a05001 	mov	r5, r1
   21734:	e6bf3fb2 	rev16	r3, r2
   21738:	e6ff3073 	uxth	r3, r3
   2173c:	e1a04002 	mov	r4, r2
   21740:	e1a02423 	lsr	r2, r3, #8
   21744:	e5c0200b 	strb	r2, [r0, #11]
   21748:	e5c0300a 	strb	r3, [r0, #10]
   2174c:	e3a02000 	mov	r2, #0
   21750:	e3a0100c 	mov	r1, #12
   21754:	ebffffcd 	bl	21690 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   21758:	e3550000 	cmp	r5, #0
   2175c:	0a000015 	beq	217b8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x98>
   21760:	e3540000 	cmp	r4, #0
   21764:	0a000017 	beq	217c8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xa8>
   21768:	e1a02000 	mov	r2, r0
   2176c:	e1a01004 	mov	r1, r4
   21770:	e1a00005 	mov	r0, r5
   21774:	ebffffc5 	bl	21690 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   21778:	e1a03820 	lsr	r3, r0, #16
   2177c:	e3530000 	cmp	r3, #0
   21780:	e6ff3073 	uxth	r3, r3
   21784:	0a000004 	beq	2179c <CChecksumCalculator::Calculate(void const*, unsigned int)+0x7c>
   21788:	e3a02001 	mov	r2, #1
   2178c:	e6f30070 	uxtah	r0, r3, r0
   21790:	e1b03820 	lsrs	r3, r0, #16
   21794:	e1a03002 	mov	r3, r2
   21798:	1afffffb 	bne	2178c <CChecksumCalculator::Calculate(void const*, unsigned int)+0x6c>
   2179c:	e1e00000 	mvn	r0, r0
   217a0:	e6ff0070 	uxth	r0, r0
   217a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   217a8:	e3a0203c 	mov	r2, #60	; 0x3c
   217ac:	e59f1024 	ldr	r1, [pc, #36]	; 217d8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   217b0:	e59f0024 	ldr	r0, [pc, #36]	; 217dc <CChecksumCalculator::Calculate(void const*, unsigned int)+0xbc>
   217b4:	eb000c11 	bl	24800 <assertion_failed>
   217b8:	e3a02041 	mov	r2, #65	; 0x41
   217bc:	e59f1014 	ldr	r1, [pc, #20]	; 217d8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   217c0:	e59f0018 	ldr	r0, [pc, #24]	; 217e0 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xc0>
   217c4:	eb000c0d 	bl	24800 <assertion_failed>
   217c8:	e3a02042 	mov	r2, #66	; 0x42
   217cc:	e59f1004 	ldr	r1, [pc, #4]	; 217d8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xb8>
   217d0:	e59f000c 	ldr	r0, [pc, #12]	; 217e4 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xc4>
   217d4:	eb000c09 	bl	24800 <assertion_failed>
   217d8:	00044568 	.word	0x00044568
   217dc:	00044590 	.word	0x00044590
   217e0:	00040b94 	.word	0x00040b94
   217e4:	00043a08 	.word	0x00043a08

000217e8 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>:
   217e8:	e3500000 	cmp	r0, #0
   217ec:	e92d4010 	push	{r4, lr}
   217f0:	0a00000f 	beq	21834 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x4c>
   217f4:	e3510000 	cmp	r1, #0
   217f8:	0a000011 	beq	21844 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x5c>
   217fc:	e3a02000 	mov	r2, #0
   21800:	ebffffa2 	bl	21690 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   21804:	e1a03820 	lsr	r3, r0, #16
   21808:	e3530000 	cmp	r3, #0
   2180c:	e6ff3073 	uxth	r3, r3
   21810:	0a000004 	beq	21828 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x40>
   21814:	e3a02001 	mov	r2, #1
   21818:	e6f30070 	uxtah	r0, r3, r0
   2181c:	e1b03820 	lsrs	r3, r0, #16
   21820:	e1a03002 	mov	r3, r2
   21824:	1afffffb 	bne	21818 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x30>
   21828:	e1e00000 	mvn	r0, r0
   2182c:	e6ff0070 	uxth	r0, r0
   21830:	e8bd8010 	pop	{r4, pc}
   21834:	e3a0204a 	mov	r2, #74	; 0x4a
   21838:	e59f1014 	ldr	r1, [pc, #20]	; 21854 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x6c>
   2183c:	e59f0014 	ldr	r0, [pc, #20]	; 21858 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x70>
   21840:	eb000bee 	bl	24800 <assertion_failed>
   21844:	e3a0204b 	mov	r2, #75	; 0x4b
   21848:	e59f1004 	ldr	r1, [pc, #4]	; 21854 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x6c>
   2184c:	e59f0008 	ldr	r0, [pc, #8]	; 2185c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x74>
   21850:	eb000bea 	bl	24800 <assertion_failed>
   21854:	00044568 	.word	0x00044568
   21858:	00040b94 	.word	0x00040b94
   2185c:	00043a08 	.word	0x00043a08

00021860 <CChecksumCalculator::FoldResult(unsigned int)>:
   21860:	e1a03820 	lsr	r3, r0, #16
   21864:	e3530000 	cmp	r3, #0
   21868:	e6ff3073 	uxth	r3, r3
   2186c:	0a000004 	beq	21884 <CChecksumCalculator::FoldResult(unsigned int)+0x24>
   21870:	e3a02001 	mov	r2, #1
   21874:	e6f30070 	uxtah	r0, r3, r0
   21878:	e1b03820 	lsrs	r3, r0, #16
   2187c:	e1a03002 	mov	r3, r2
   21880:	1afffffb 	bne	21874 <CChecksumCalculator::FoldResult(unsigned int)+0x14>
   21884:	e6ff0070 	uxth	r0, r0
   21888:	e12fff1e 	bx	lr

0002188c <CDHCPClient::HaltNetwork() [clone .part.0]>:
   2188c:	e92d4010 	push	{r4, lr}
   21890:	e59f2008 	ldr	r2, [pc, #8]	; 218a0 <CDHCPClient::HaltNetwork() [clone .part.0]+0x14>
   21894:	e59f1008 	ldr	r1, [pc, #8]	; 218a4 <CDHCPClient::HaltNetwork() [clone .part.0]+0x18>
   21898:	e59f0008 	ldr	r0, [pc, #8]	; 218a8 <CDHCPClient::HaltNetwork() [clone .part.0]+0x1c>
   2189c:	eb000bd7 	bl	24800 <assertion_failed>
   218a0:	000001ae 	.word	0x000001ae
   218a4:	000445e8 	.word	0x000445e8
   218a8:	00043980 	.word	0x00043980

000218ac <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>:
   218ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   218b0:	e1a04000 	mov	r4, r0
   218b4:	e1a05001 	mov	r5, r1
   218b8:	e3a01902 	mov	r1, #32768	; 0x8000
   218bc:	e1a06002 	mov	r6, r2
   218c0:	eb00097d 	bl	23ebc <CTask::CTask(unsigned int)>
   218c4:	e59f30a0 	ldr	r3, [pc, #160]	; 2196c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc0>
   218c8:	e58450dc 	str	r5, [r4, #220]	; 0xdc
   218cc:	e5843000 	str	r3, [r4]
   218d0:	e1a00005 	mov	r0, r5
   218d4:	ebffdfa8 	bl	1977c <CNetSubSystem::GetConfig()>
   218d8:	e28470e4 	add	r7, r4, #228	; 0xe4
   218dc:	e3560000 	cmp	r6, #0
   218e0:	e59f1088 	ldr	r1, [pc, #136]	; 21970 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc4>
   218e4:	e58400e0 	str	r0, [r4, #224]	; 0xe0
   218e8:	11a01006 	movne	r1, r6
   218ec:	e1a00007 	mov	r0, r7
   218f0:	eb0018a1 	bl	27b7c <CString::CString(char const*)>
   218f4:	e3a02011 	mov	r2, #17
   218f8:	e1a01005 	mov	r1, r5
   218fc:	e28400f4 	add	r0, r4, #244	; 0xf4
   21900:	eb00065a 	bl	23270 <CSocket::CSocket(CNetSubSystem*, int)>
   21904:	e3a02000 	mov	r2, #0
   21908:	e59430dc 	ldr	r3, [r4, #220]	; 0xdc
   2190c:	e5c42194 	strb	r2, [r4, #404]	; 0x194
   21910:	e1530002 	cmp	r3, r2
   21914:	0a000008 	beq	2193c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0x90>
   21918:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
   2191c:	e3530000 	cmp	r3, #0
   21920:	0a000009 	beq	2194c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xa0>
   21924:	e1a00007 	mov	r0, r7
   21928:	eb0018d1 	bl	27c74 <CString::GetLength() const>
   2192c:	e350001e 	cmp	r0, #30
   21930:	8a000009 	bhi	2195c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xb0>
   21934:	e1a00004 	mov	r0, r4
   21938:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2193c:	e3a02073 	mov	r2, #115	; 0x73
   21940:	e59f102c 	ldr	r1, [pc, #44]	; 21974 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   21944:	e59f002c 	ldr	r0, [pc, #44]	; 21978 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xcc>
   21948:	eb000bac 	bl	24800 <assertion_failed>
   2194c:	e3a02074 	mov	r2, #116	; 0x74
   21950:	e59f101c 	ldr	r1, [pc, #28]	; 21974 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   21954:	e59f0020 	ldr	r0, [pc, #32]	; 2197c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd0>
   21958:	eb000ba8 	bl	24800 <assertion_failed>
   2195c:	e3a02076 	mov	r2, #118	; 0x76
   21960:	e59f100c 	ldr	r1, [pc, #12]	; 21974 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xc8>
   21964:	e59f0014 	ldr	r0, [pc, #20]	; 21980 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd4>
   21968:	eb000ba4 	bl	24800 <assertion_failed>
   2196c:	000445ac 	.word	0x000445ac
   21970:	00047764 	.word	0x00047764
   21974:	000445e8 	.word	0x000445e8
   21978:	00043954 	.word	0x00043954
   2197c:	00043980 	.word	0x00043980
   21980:	000445f8 	.word	0x000445f8

00021984 <CDHCPClient::IsBound() const>:
   21984:	e5d00194 	ldrb	r0, [r0, #404]	; 0x194
   21988:	e12fff1e 	bx	lr

0002198c <CDHCPClient::HaltNetwork()>:
   2198c:	e3a02000 	mov	r2, #0
   21990:	e59030e0 	ldr	r3, [r0, #224]	; 0xe0
   21994:	e5c02194 	strb	r2, [r0, #404]	; 0x194
   21998:	e1530002 	cmp	r3, r2
   2199c:	0a000001 	beq	219a8 <CDHCPClient::HaltNetwork()+0x1c>
   219a0:	e1a00003 	mov	r0, r3
   219a4:	eafffcb8 	b	20c8c <CNetConfig::Reset()>
   219a8:	e92d4010 	push	{r4, lr}
   219ac:	ebffffb6 	bl	2188c <CDHCPClient::HaltNetwork() [clone .part.0]>

000219b0 <CDHCPClient::CheckConfig()>:
   219b0:	e92d4030 	push	{r4, r5, lr}
   219b4:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   219b8:	e24dd014 	sub	sp, sp, #20
   219bc:	e3530000 	cmp	r3, #0
   219c0:	e1a04000 	mov	r4, r0
   219c4:	0a00002e 	beq	21a84 <CDHCPClient::CheckConfig()+0xd4>
   219c8:	e59021c0 	ldr	r2, [r0, #448]	; 0x1c0
   219cc:	e3520000 	cmp	r2, #0
   219d0:	0a00002b 	beq	21a84 <CDHCPClient::CheckConfig()+0xd4>
   219d4:	e59011c4 	ldr	r1, [r0, #452]	; 0x1c4
   219d8:	e3510000 	cmp	r1, #0
   219dc:	0a000028 	beq	21a84 <CDHCPClient::CheckConfig()+0xd4>
   219e0:	e59001c8 	ldr	r0, [r0, #456]	; 0x1c8
   219e4:	e3500000 	cmp	r0, #0
   219e8:	0a000025 	beq	21a84 <CDHCPClient::CheckConfig()+0xd4>
   219ec:	e0233001 	eor	r3, r3, r1
   219f0:	e1130002 	tst	r3, r2
   219f4:	1a000037 	bne	21ad8 <CDHCPClient::CheckConfig()+0x128>
   219f8:	e59451cc 	ldr	r5, [r4, #460]	; 0x1cc
   219fc:	e3550000 	cmp	r5, #0
   21a00:	0a000041 	beq	21b0c <CDHCPClient::CheckConfig()+0x15c>
   21a04:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   21a08:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   21a0c:	e3520000 	cmp	r2, #0
   21a10:	1a00002b 	bne	21ac4 <CDHCPClient::CheckConfig()+0x114>
   21a14:	e3530000 	cmp	r3, #0
   21a18:	01a020a5 	lsreq	r2, r5, #1
   21a1c:	004531a5 	subeq	r3, r5, r5, lsr #3
   21a20:	10652083 	rsbne	r2, r5, r3, lsl #1
   21a24:	058421d8 	streq	r2, [r4, #472]	; 0x1d8
   21a28:	058431dc 	streq	r3, [r4, #476]	; 0x1dc
   21a2c:	158421d8 	strne	r2, [r4, #472]	; 0x1d8
   21a30:	e1550003 	cmp	r5, r3
   21a34:	23a00000 	movcs	r0, #0
   21a38:	33a00001 	movcc	r0, #1
   21a3c:	e1520003 	cmp	r2, r3
   21a40:	83800001 	orrhi	r0, r0, #1
   21a44:	e3500000 	cmp	r0, #0
   21a48:	03a00001 	moveq	r0, #1
   21a4c:	0a00001a 	beq	21abc <CDHCPClient::CheckConfig()+0x10c>
   21a50:	eb00145d 	bl	26bcc <CLogger::Get()>
   21a54:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   21a58:	e59421dc 	ldr	r2, [r4, #476]	; 0x1dc
   21a5c:	e59431d8 	ldr	r3, [r4, #472]	; 0x1d8
   21a60:	e58d1008 	str	r1, [sp, #8]
   21a64:	e58d2004 	str	r2, [sp, #4]
   21a68:	e58d3000 	str	r3, [sp]
   21a6c:	e3a02002 	mov	r2, #2
   21a70:	e59f30b0 	ldr	r3, [pc, #176]	; 21b28 <CDHCPClient::CheckConfig()+0x178>
   21a74:	e59f10b0 	ldr	r1, [pc, #176]	; 21b2c <CDHCPClient::CheckConfig()+0x17c>
   21a78:	eb001390 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21a7c:	e3a00000 	mov	r0, #0
   21a80:	ea00000d 	b	21abc <CDHCPClient::CheckConfig()+0x10c>
   21a84:	eb001450 	bl	26bcc <CLogger::Get()>
   21a88:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   21a8c:	e59421c0 	ldr	r2, [r4, #448]	; 0x1c0
   21a90:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   21a94:	e594c1c8 	ldr	ip, [r4, #456]	; 0x1c8
   21a98:	e58d1008 	str	r1, [sp, #8]
   21a9c:	e58d2004 	str	r2, [sp, #4]
   21aa0:	e58d3000 	str	r3, [sp]
   21aa4:	e58dc00c 	str	ip, [sp, #12]
   21aa8:	e59f3080 	ldr	r3, [pc, #128]	; 21b30 <CDHCPClient::CheckConfig()+0x180>
   21aac:	e3a02002 	mov	r2, #2
   21ab0:	e59f1074 	ldr	r1, [pc, #116]	; 21b2c <CDHCPClient::CheckConfig()+0x17c>
   21ab4:	eb001381 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21ab8:	e3a00000 	mov	r0, #0
   21abc:	e28dd014 	add	sp, sp, #20
   21ac0:	e8bd8030 	pop	{r4, r5, pc}
   21ac4:	e3530000 	cmp	r3, #0
   21ac8:	00453002 	subeq	r3, r5, r2
   21acc:	008230a3 	addeq	r3, r2, r3, lsr #1
   21ad0:	058431dc 	streq	r3, [r4, #476]	; 0x1dc
   21ad4:	eaffffd5 	b	21a30 <CDHCPClient::CheckConfig()+0x80>
   21ad8:	eb00143b 	bl	26bcc <CLogger::Get()>
   21adc:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   21ae0:	e59421c4 	ldr	r2, [r4, #452]	; 0x1c4
   21ae4:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   21ae8:	e58d1008 	str	r1, [sp, #8]
   21aec:	e58d2004 	str	r2, [sp, #4]
   21af0:	e58d3000 	str	r3, [sp]
   21af4:	e3a02002 	mov	r2, #2
   21af8:	e59f3034 	ldr	r3, [pc, #52]	; 21b34 <CDHCPClient::CheckConfig()+0x184>
   21afc:	e59f1028 	ldr	r1, [pc, #40]	; 21b2c <CDHCPClient::CheckConfig()+0x17c>
   21b00:	eb00136e 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21b04:	e3a00000 	mov	r0, #0
   21b08:	eaffffeb 	b	21abc <CDHCPClient::CheckConfig()+0x10c>
   21b0c:	eb00142e 	bl	26bcc <CLogger::Get()>
   21b10:	e59f3020 	ldr	r3, [pc, #32]	; 21b38 <CDHCPClient::CheckConfig()+0x188>
   21b14:	e3a02002 	mov	r2, #2
   21b18:	e59f100c 	ldr	r1, [pc, #12]	; 21b2c <CDHCPClient::CheckConfig()+0x17c>
   21b1c:	eb001367 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   21b20:	e1a00005 	mov	r0, r5
   21b24:	eaffffe4 	b	21abc <CDHCPClient::CheckConfig()+0x10c>
   21b28:	0004468c 	.word	0x0004468c
   21b2c:	000445b8 	.word	0x000445b8
   21b30:	00044618 	.word	0x00044618
   21b34:	00044648 	.word	0x00044648
   21b38:	00044674 	.word	0x00044674

00021b3c <CDHCPClient::GetUnaligned(void const*)>:
   21b3c:	e3500000 	cmp	r0, #0
   21b40:	0a000001 	beq	21b4c <CDHCPClient::GetUnaligned(void const*)+0x10>
   21b44:	e5900000 	ldr	r0, [r0]
   21b48:	e12fff1e 	bx	lr
   21b4c:	e92d4010 	push	{r4, lr}
   21b50:	e3a02e36 	mov	r2, #864	; 0x360
   21b54:	e59f1004 	ldr	r1, [pc, #4]	; 21b60 <CDHCPClient::GetUnaligned(void const*)+0x24>
   21b58:	e59f0004 	ldr	r0, [pc, #4]	; 21b64 <CDHCPClient::GetUnaligned(void const*)+0x28>
   21b5c:	eb000b27 	bl	24800 <assertion_failed>
   21b60:	000445e8 	.word	0x000445e8
   21b64:	000446ac 	.word	0x000446ac

00021b68 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>:
   21b68:	e3510000 	cmp	r1, #0
   21b6c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21b70:	11a07000 	movne	r7, r0
   21b74:	11a04001 	movne	r4, r1
   21b78:	10816002 	addne	r6, r1, r2
   21b7c:	0a000079 	beq	21d68 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x200>
   21b80:	e2840002 	add	r0, r4, #2
   21b84:	e1560000 	cmp	r6, r0
   21b88:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
   21b8c:	e5d43000 	ldrb	r3, [r4]
   21b90:	e3530034 	cmp	r3, #52	; 0x34
   21b94:	0a000034 	beq	21c6c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x104>
   21b98:	8a00000d 	bhi	21bd4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x6c>
   21b9c:	e3530003 	cmp	r3, #3
   21ba0:	0a000043 	beq	21cb4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x14c>
   21ba4:	8a00001a 	bhi	21c14 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xac>
   21ba8:	e3530000 	cmp	r3, #0
   21bac:	02844001 	addeq	r4, r4, #1
   21bb0:	0afffff2 	beq	21b80 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   21bb4:	e3530001 	cmp	r3, #1
   21bb8:	1a000027 	bne	21c5c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xf4>
   21bbc:	e5d45001 	ldrb	r5, [r4, #1]
   21bc0:	e3550004 	cmp	r5, #4
   21bc4:	0a000061 	beq	21d50 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1e8>
   21bc8:	e2855002 	add	r5, r5, #2
   21bcc:	e0844005 	add	r4, r4, r5
   21bd0:	eaffffea 	b	21b80 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   21bd4:	e353003a 	cmp	r3, #58	; 0x3a
   21bd8:	0a000049 	beq	21d04 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x19c>
   21bdc:	8a00001a 	bhi	21c4c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xe4>
   21be0:	e3530035 	cmp	r3, #53	; 0x35
   21be4:	0a00003e 	beq	21ce4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x17c>
   21be8:	e3530036 	cmp	r3, #54	; 0x36
   21bec:	1a00001a 	bne	21c5c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xf4>
   21bf0:	e5d45001 	ldrb	r5, [r4, #1]
   21bf4:	e3550004 	cmp	r5, #4
   21bf8:	1afffff2 	bne	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21bfc:	e2843006 	add	r3, r4, #6
   21c00:	e1560003 	cmp	r6, r3
   21c04:	3affffef 	bcc	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c08:	ebffffcb 	bl	21b3c <CDHCPClient::GetUnaligned(void const*)>
   21c0c:	e58701d4 	str	r0, [r7, #468]	; 0x1d4
   21c10:	eaffffec 	b	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c14:	e3530006 	cmp	r3, #6
   21c18:	0a000043 	beq	21d2c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x1c4>
   21c1c:	e3530033 	cmp	r3, #51	; 0x33
   21c20:	1a00000d 	bne	21c5c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xf4>
   21c24:	e5d45001 	ldrb	r5, [r4, #1]
   21c28:	e3550004 	cmp	r5, #4
   21c2c:	1affffe5 	bne	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c30:	e2843006 	add	r3, r4, #6
   21c34:	e1560003 	cmp	r6, r3
   21c38:	3affffe2 	bcc	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c3c:	ebffffbe 	bl	21b3c <CDHCPClient::GetUnaligned(void const*)>
   21c40:	e6bf0f30 	rev	r0, r0
   21c44:	e58701cc 	str	r0, [r7, #460]	; 0x1cc
   21c48:	eaffffde 	b	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c4c:	e353003b 	cmp	r3, #59	; 0x3b
   21c50:	0a00000d 	beq	21c8c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x124>
   21c54:	e35300ff 	cmp	r3, #255	; 0xff
   21c58:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   21c5c:	e5d45001 	ldrb	r5, [r4, #1]
   21c60:	e2855002 	add	r5, r5, #2
   21c64:	e0844005 	add	r4, r4, r5
   21c68:	eaffffc4 	b	21b80 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x18>
   21c6c:	e5d45001 	ldrb	r5, [r4, #1]
   21c70:	e3550001 	cmp	r5, #1
   21c74:	1affffd3 	bne	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c78:	e2843003 	add	r3, r4, #3
   21c7c:	e1560003 	cmp	r6, r3
   21c80:	25d43002 	ldrbcs	r3, [r4, #2]
   21c84:	25c731d0 	strbcs	r3, [r7, #464]	; 0x1d0
   21c88:	eaffffce 	b	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c8c:	e5d45001 	ldrb	r5, [r4, #1]
   21c90:	e3550004 	cmp	r5, #4
   21c94:	1affffcb 	bne	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21c98:	e2843006 	add	r3, r4, #6
   21c9c:	e1560003 	cmp	r6, r3
   21ca0:	3affffc8 	bcc	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21ca4:	ebffffa4 	bl	21b3c <CDHCPClient::GetUnaligned(void const*)>
   21ca8:	e6bf0f30 	rev	r0, r0
   21cac:	e58701dc 	str	r0, [r7, #476]	; 0x1dc
   21cb0:	eaffffc4 	b	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21cb4:	e5d45001 	ldrb	r5, [r4, #1]
   21cb8:	e3550003 	cmp	r5, #3
   21cbc:	daffffc1 	ble	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21cc0:	e2843006 	add	r3, r4, #6
   21cc4:	e1560003 	cmp	r6, r3
   21cc8:	3affffbe 	bcc	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21ccc:	e59731c4 	ldr	r3, [r7, #452]	; 0x1c4
   21cd0:	e3530000 	cmp	r3, #0
   21cd4:	1affffbb 	bne	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21cd8:	ebffff97 	bl	21b3c <CDHCPClient::GetUnaligned(void const*)>
   21cdc:	e58701c4 	str	r0, [r7, #452]	; 0x1c4
   21ce0:	eaffffb8 	b	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21ce4:	e5d45001 	ldrb	r5, [r4, #1]
   21ce8:	e3550001 	cmp	r5, #1
   21cec:	1affffb5 	bne	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21cf0:	e2843003 	add	r3, r4, #3
   21cf4:	e1560003 	cmp	r6, r3
   21cf8:	25d43002 	ldrbcs	r3, [r4, #2]
   21cfc:	25c731d1 	strbcs	r3, [r7, #465]	; 0x1d1
   21d00:	eaffffb0 	b	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d04:	e5d45001 	ldrb	r5, [r4, #1]
   21d08:	e3550004 	cmp	r5, #4
   21d0c:	1affffad 	bne	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d10:	e2843006 	add	r3, r4, #6
   21d14:	e1560003 	cmp	r6, r3
   21d18:	3affffaa 	bcc	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d1c:	ebffff86 	bl	21b3c <CDHCPClient::GetUnaligned(void const*)>
   21d20:	e6bf0f30 	rev	r0, r0
   21d24:	e58701d8 	str	r0, [r7, #472]	; 0x1d8
   21d28:	eaffffa6 	b	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d2c:	e5d45001 	ldrb	r5, [r4, #1]
   21d30:	e3550003 	cmp	r5, #3
   21d34:	daffffa3 	ble	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d38:	e2843006 	add	r3, r4, #6
   21d3c:	e1560003 	cmp	r6, r3
   21d40:	3affffa0 	bcc	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d44:	ebffff7c 	bl	21b3c <CDHCPClient::GetUnaligned(void const*)>
   21d48:	e58701c8 	str	r0, [r7, #456]	; 0x1c8
   21d4c:	eaffff9d 	b	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d50:	e2843006 	add	r3, r4, #6
   21d54:	e1560003 	cmp	r6, r3
   21d58:	3affff9a 	bcc	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d5c:	ebffff76 	bl	21b3c <CDHCPClient::GetUnaligned(void const*)>
   21d60:	e58701c0 	str	r0, [r7, #448]	; 0x1c0
   21d64:	eaffff97 	b	21bc8 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x60>
   21d68:	e59f2008 	ldr	r2, [pc, #8]	; 21d78 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x210>
   21d6c:	e59f1008 	ldr	r1, [pc, #8]	; 21d7c <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x214>
   21d70:	e59f0008 	ldr	r0, [pc, #8]	; 21d80 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x218>
   21d74:	eb000aa1 	bl	24800 <assertion_failed>
   21d78:	000002ad 	.word	0x000002ad
   21d7c:	000445e8 	.word	0x000445e8
   21d80:	000446b8 	.word	0x000446b8

00021d84 <CDHCPClient::GetXID() const>:
   21d84:	e59000dc 	ldr	r0, [r0, #220]	; 0xdc
   21d88:	e92d4010 	push	{r4, lr}
   21d8c:	e3500000 	cmp	r0, #0
   21d90:	0a00000b 	beq	21dc4 <CDHCPClient::GetXID() const+0x40>
   21d94:	ebffde7a 	bl	19784 <CNetSubSystem::GetNetDeviceLayer()>
   21d98:	ebffe7ac 	bl	1bc50 <CNetDeviceLayer::GetMACAddress() const>
   21d9c:	eb00240b 	bl	2add0 <CMACAddress::Get() const>
   21da0:	e2504000 	subs	r4, r0, #0
   21da4:	0a00000a 	beq	21dd4 <CDHCPClient::GetXID() const+0x50>
   21da8:	eb002054 	bl	29f00 <CTimer::Get()>
   21dac:	e2840002 	add	r0, r4, #2
   21db0:	ebffff61 	bl	21b3c <CDHCPClient::GetUnaligned(void const*)>
   21db4:	e1a04000 	mov	r4, r0
   21db8:	eb001d93 	bl	2940c <CTimer::GetClockTicks()>
   21dbc:	e0840000 	add	r0, r4, r0
   21dc0:	e8bd8010 	pop	{r4, pc}
   21dc4:	e59f2018 	ldr	r2, [pc, #24]	; 21de4 <CDHCPClient::GetXID() const+0x60>
   21dc8:	e59f1018 	ldr	r1, [pc, #24]	; 21de8 <CDHCPClient::GetXID() const+0x64>
   21dcc:	e59f0018 	ldr	r0, [pc, #24]	; 21dec <CDHCPClient::GetXID() const+0x68>
   21dd0:	eb000a8a 	bl	24800 <assertion_failed>
   21dd4:	e3a02fd6 	mov	r2, #856	; 0x358
   21dd8:	e59f1008 	ldr	r1, [pc, #8]	; 21de8 <CDHCPClient::GetXID() const+0x64>
   21ddc:	e59f000c 	ldr	r0, [pc, #12]	; 21df0 <CDHCPClient::GetXID() const+0x6c>
   21de0:	eb000a86 	bl	24800 <assertion_failed>
   21de4:	00000356 	.word	0x00000356
   21de8:	000445e8 	.word	0x000445e8
   21dec:	00043954 	.word	0x00043954
   21df0:	00043cf0 	.word	0x00043cf0

00021df4 <CDHCPClient::SetUnaligned(void*, unsigned int)>:
   21df4:	e3500000 	cmp	r0, #0
   21df8:	0a000007 	beq	21e1c <CDHCPClient::SetUnaligned(void*, unsigned int)+0x28>
   21dfc:	e1a0c421 	lsr	ip, r1, #8
   21e00:	e1a02821 	lsr	r2, r1, #16
   21e04:	e1a03c21 	lsr	r3, r1, #24
   21e08:	e5c01000 	strb	r1, [r0]
   21e0c:	e5c0c001 	strb	ip, [r0, #1]
   21e10:	e5c02002 	strb	r2, [r0, #2]
   21e14:	e5c03003 	strb	r3, [r0, #3]
   21e18:	e12fff1e 	bx	lr
   21e1c:	e92d4010 	push	{r4, lr}
   21e20:	e59f2008 	ldr	r2, [pc, #8]	; 21e30 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x3c>
   21e24:	e59f1008 	ldr	r1, [pc, #8]	; 21e34 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x40>
   21e28:	e59f0008 	ldr	r0, [pc, #8]	; 21e38 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x44>
   21e2c:	eb000a73 	bl	24800 <assertion_failed>
   21e30:	0000036d 	.word	0x0000036d
   21e34:	000445e8 	.word	0x000445e8
   21e38:	000446ac 	.word	0x000446ac

00021e3c <CDHCPClient::~CDHCPClient()>:
   21e3c:	e3a02000 	mov	r2, #0
   21e40:	e92d4010 	push	{r4, lr}
   21e44:	e1a04000 	mov	r4, r0
   21e48:	e59f3024 	ldr	r3, [pc, #36]	; 21e74 <CDHCPClient::~CDHCPClient()+0x38>
   21e4c:	e58020dc 	str	r2, [r0, #220]	; 0xdc
   21e50:	e5803000 	str	r3, [r0]
   21e54:	e28000f4 	add	r0, r0, #244	; 0xf4
   21e58:	eb0003f5 	bl	22e34 <CSocket::~CSocket()>
   21e5c:	e28400e4 	add	r0, r4, #228	; 0xe4
   21e60:	eb00170c 	bl	27a98 <CString::~CString()>
   21e64:	e1a00004 	mov	r0, r4
   21e68:	eb0007c0 	bl	23d70 <CTask::~CTask()>
   21e6c:	e1a00004 	mov	r0, r4
   21e70:	e8bd8010 	pop	{r4, pc}
   21e74:	000445ac 	.word	0x000445ac

00021e78 <CDHCPClient::~CDHCPClient()>:
   21e78:	e92d4010 	push	{r4, lr}
   21e7c:	e1a04000 	mov	r4, r0
   21e80:	ebffffed 	bl	21e3c <CDHCPClient::~CDHCPClient()>
   21e84:	e1a00004 	mov	r0, r4
   21e88:	e3a01e1e 	mov	r1, #480	; 0x1e0
   21e8c:	eb002486 	bl	2b0ac <operator delete(void*, unsigned int)>
   21e90:	e1a00004 	mov	r0, r4
   21e94:	e8bd8010 	pop	{r4, pc}

00021e98 <CDHCPClient::ReceiveMessage()>:
   21e98:	e92d4070 	push	{r4, r5, r6, lr}
   21e9c:	e24dde23 	sub	sp, sp, #560	; 0x230
   21ea0:	e1a04000 	mov	r4, r0
   21ea4:	e3a03040 	mov	r3, #64	; 0x40
   21ea8:	e28000f4 	add	r0, r0, #244	; 0xf4
   21eac:	e3a02f89 	mov	r2, #548	; 0x224
   21eb0:	e28d100c 	add	r1, sp, #12
   21eb4:	eb00046a 	bl	23064 <CSocket::Receive(void*, unsigned int, int)>
   21eb8:	e35000ef 	cmp	r0, #239	; 0xef
   21ebc:	da000002 	ble	21ecc <CDHCPClient::ReceiveMessage()+0x34>
   21ec0:	e5dd300c 	ldrb	r3, [sp, #12]
   21ec4:	e3530002 	cmp	r3, #2
   21ec8:	0a000003 	beq	21edc <CDHCPClient::ReceiveMessage()+0x44>
   21ecc:	e3a04000 	mov	r4, #0
   21ed0:	e1a00004 	mov	r0, r4
   21ed4:	e28dde23 	add	sp, sp, #560	; 0x230
   21ed8:	e8bd8070 	pop	{r4, r5, r6, pc}
   21edc:	e5dd300d 	ldrb	r3, [sp, #13]
   21ee0:	e3530001 	cmp	r3, #1
   21ee4:	1afffff8 	bne	21ecc <CDHCPClient::ReceiveMessage()+0x34>
   21ee8:	e5dd300e 	ldrb	r3, [sp, #14]
   21eec:	e3530006 	cmp	r3, #6
   21ef0:	1afffff5 	bne	21ecc <CDHCPClient::ReceiveMessage()+0x34>
   21ef4:	e59d2010 	ldr	r2, [sp, #16]
   21ef8:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
   21efc:	e1520003 	cmp	r2, r3
   21f00:	1afffff1 	bne	21ecc <CDHCPClient::ReceiveMessage()+0x34>
   21f04:	e59f3114 	ldr	r3, [pc, #276]	; 22020 <CDHCPClient::ReceiveMessage()+0x188>
   21f08:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   21f0c:	e1520003 	cmp	r2, r3
   21f10:	1affffed 	bne	21ecc <CDHCPClient::ReceiveMessage()+0x34>
   21f14:	e1a05000 	mov	r5, r0
   21f18:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   21f1c:	e3500000 	cmp	r0, #0
   21f20:	0a000036 	beq	22000 <CDHCPClient::ReceiveMessage()+0x168>
   21f24:	ebffde16 	bl	19784 <CNetSubSystem::GetNetDeviceLayer()>
   21f28:	ebffe748 	bl	1bc50 <CNetDeviceLayer::GetMACAddress() const>
   21f2c:	e2506000 	subs	r6, r0, #0
   21f30:	0a000036 	beq	22010 <CDHCPClient::ReceiveMessage()+0x178>
   21f34:	e28d1028 	add	r1, sp, #40	; 0x28
   21f38:	e28d0004 	add	r0, sp, #4
   21f3c:	eb002395 	bl	2ad98 <CMACAddress::CMACAddress(unsigned char const*)>
   21f40:	e1a01006 	mov	r1, r6
   21f44:	e28d0004 	add	r0, sp, #4
   21f48:	eb00237d 	bl	2ad44 <CMACAddress::operator!=(CMACAddress const&) const>
   21f4c:	e3500000 	cmp	r0, #0
   21f50:	13a04000 	movne	r4, #0
   21f54:	0a000002 	beq	21f64 <CDHCPClient::ReceiveMessage()+0xcc>
   21f58:	e28d0004 	add	r0, sp, #4
   21f5c:	eb00235f 	bl	2ace0 <CMACAddress::~CMACAddress()>
   21f60:	eaffffda 	b	21ed0 <CDHCPClient::ReceiveMessage()+0x38>
   21f64:	e59d301c 	ldr	r3, [sp, #28]
   21f68:	e24520f0 	sub	r2, r5, #240	; 0xf0
   21f6c:	e58401c0 	str	r0, [r4, #448]	; 0x1c0
   21f70:	e58401c4 	str	r0, [r4, #452]	; 0x1c4
   21f74:	e58401c8 	str	r0, [r4, #456]	; 0x1c8
   21f78:	e58401cc 	str	r0, [r4, #460]	; 0x1cc
   21f7c:	e5c401d0 	strb	r0, [r4, #464]	; 0x1d0
   21f80:	e5c401d1 	strb	r0, [r4, #465]	; 0x1d1
   21f84:	e58401d4 	str	r0, [r4, #468]	; 0x1d4
   21f88:	e58401d8 	str	r0, [r4, #472]	; 0x1d8
   21f8c:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   21f90:	e58431bc 	str	r3, [r4, #444]	; 0x1bc
   21f94:	e28d10fc 	add	r1, sp, #252	; 0xfc
   21f98:	e1a00004 	mov	r0, r4
   21f9c:	ebfffef1 	bl	21b68 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21fa0:	e5d431d0 	ldrb	r3, [r4, #464]	; 0x1d0
   21fa4:	e3530002 	cmp	r3, #2
   21fa8:	0a00000e 	beq	21fe8 <CDHCPClient::ReceiveMessage()+0x150>
   21fac:	e3530003 	cmp	r3, #3
   21fb0:	0a000008 	beq	21fd8 <CDHCPClient::ReceiveMessage()+0x140>
   21fb4:	e3530001 	cmp	r3, #1
   21fb8:	13a04001 	movne	r4, #1
   21fbc:	1affffe5 	bne	21f58 <CDHCPClient::ReceiveMessage()+0xc0>
   21fc0:	e1a00004 	mov	r0, r4
   21fc4:	e3a02080 	mov	r2, #128	; 0x80
   21fc8:	e28d1078 	add	r1, sp, #120	; 0x78
   21fcc:	e1a04003 	mov	r4, r3
   21fd0:	ebfffee4 	bl	21b68 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21fd4:	eaffffdf 	b	21f58 <CDHCPClient::ReceiveMessage()+0xc0>
   21fd8:	e3a02080 	mov	r2, #128	; 0x80
   21fdc:	e28d1078 	add	r1, sp, #120	; 0x78
   21fe0:	e1a00004 	mov	r0, r4
   21fe4:	ebfffedf 	bl	21b68 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21fe8:	e1a00004 	mov	r0, r4
   21fec:	e3a02040 	mov	r2, #64	; 0x40
   21ff0:	e28d1038 	add	r1, sp, #56	; 0x38
   21ff4:	ebfffedb 	bl	21b68 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   21ff8:	e3a04001 	mov	r4, #1
   21ffc:	eaffffd5 	b	21f58 <CDHCPClient::ReceiveMessage()+0xc0>
   22000:	e59f201c 	ldr	r2, [pc, #28]	; 22024 <CDHCPClient::ReceiveMessage()+0x18c>
   22004:	e59f101c 	ldr	r1, [pc, #28]	; 22028 <CDHCPClient::ReceiveMessage()+0x190>
   22008:	e59f001c 	ldr	r0, [pc, #28]	; 2202c <CDHCPClient::ReceiveMessage()+0x194>
   2200c:	eb0009fb 	bl	24800 <assertion_failed>
   22010:	e59f2018 	ldr	r2, [pc, #24]	; 22030 <CDHCPClient::ReceiveMessage()+0x198>
   22014:	e59f100c 	ldr	r1, [pc, #12]	; 22028 <CDHCPClient::ReceiveMessage()+0x190>
   22018:	e59f0014 	ldr	r0, [pc, #20]	; 22034 <CDHCPClient::ReceiveMessage()+0x19c>
   2201c:	eb0009f7 	bl	24800 <assertion_failed>
   22020:	63538263 	.word	0x63538263
   22024:	0000027b 	.word	0x0000027b
   22028:	000445e8 	.word	0x000445e8
   2202c:	00043954 	.word	0x00043954
   22030:	0000027d 	.word	0x0000027d
   22034:	00043b6c 	.word	0x00043b6c

00022038 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>:
   22038:	e92d4070 	push	{r4, r5, r6, lr}
   2203c:	e1a04000 	mov	r4, r0
   22040:	e24ddf8a 	sub	sp, sp, #552	; 0x228
   22044:	e1a05001 	mov	r5, r1
   22048:	e1a06002 	mov	r6, r2
   2204c:	e3a01000 	mov	r1, #0
   22050:	e3a02f89 	mov	r2, #548	; 0x224
   22054:	e28d0004 	add	r0, sp, #4
   22058:	eb001fb5 	bl	29f34 <memset>
   2205c:	e5d431b0 	ldrb	r3, [r4, #432]	; 0x1b0
   22060:	e3a02001 	mov	r2, #1
   22064:	e3530000 	cmp	r3, #0
   22068:	13a03080 	movne	r3, #128	; 0x80
   2206c:	03a03000 	moveq	r3, #0
   22070:	e3a01006 	mov	r1, #6
   22074:	e1cd30be 	strh	r3, [sp, #14]
   22078:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
   2207c:	e59400dc 	ldr	r0, [r4, #220]	; 0xdc
   22080:	e58d3008 	str	r3, [sp, #8]
   22084:	e59431b8 	ldr	r3, [r4, #440]	; 0x1b8
   22088:	e3500000 	cmp	r0, #0
   2208c:	e58d3010 	str	r3, [sp, #16]
   22090:	e59f30b0 	ldr	r3, [pc, #176]	; 22148 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x110>
   22094:	e5cd2004 	strb	r2, [sp, #4]
   22098:	e5cd2005 	strb	r2, [sp, #5]
   2209c:	e5cd1006 	strb	r1, [sp, #6]
   220a0:	e58d30f0 	str	r3, [sp, #240]	; 0xf0
   220a4:	0a000017 	beq	22108 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xd0>
   220a8:	ebffddb5 	bl	19784 <CNetSubSystem::GetNetDeviceLayer()>
   220ac:	ebffe6e7 	bl	1bc50 <CNetDeviceLayer::GetMACAddress() const>
   220b0:	e3500000 	cmp	r0, #0
   220b4:	0a000017 	beq	22118 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xe0>
   220b8:	e28d1020 	add	r1, sp, #32
   220bc:	eb00234f 	bl	2ae00 <CMACAddress::CopyTo(unsigned char*) const>
   220c0:	e3550000 	cmp	r5, #0
   220c4:	0a000017 	beq	22128 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xf0>
   220c8:	e3560f4d 	cmp	r6, #308	; 0x134
   220cc:	8a000019 	bhi	22138 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x100>
   220d0:	e1a02006 	mov	r2, r6
   220d4:	e1a01005 	mov	r1, r5
   220d8:	e28d00f4 	add	r0, sp, #244	; 0xf4
   220dc:	eb00220b 	bl	2a910 <memcpy>
   220e0:	e28d1004 	add	r1, sp, #4
   220e4:	e28400f4 	add	r0, r4, #244	; 0xf4
   220e8:	e3a03000 	mov	r3, #0
   220ec:	e3a02f89 	mov	r2, #548	; 0x224
   220f0:	eb0003be 	bl	22ff0 <CSocket::Send(void const*, unsigned int, int)>
   220f4:	e2400f89 	sub	r0, r0, #548	; 0x224
   220f8:	e16f0f10 	clz	r0, r0
   220fc:	e1a002a0 	lsr	r0, r0, #5
   22100:	e28ddf8a 	add	sp, sp, #552	; 0x228
   22104:	e8bd8070 	pop	{r4, r5, r6, pc}
   22108:	e3a02f96 	mov	r2, #600	; 0x258
   2210c:	e59f1038 	ldr	r1, [pc, #56]	; 2214c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   22110:	e59f0038 	ldr	r0, [pc, #56]	; 22150 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x118>
   22114:	eb0009b9 	bl	24800 <assertion_failed>
   22118:	e59f2034 	ldr	r2, [pc, #52]	; 22154 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x11c>
   2211c:	e59f1028 	ldr	r1, [pc, #40]	; 2214c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   22120:	e59f0030 	ldr	r0, [pc, #48]	; 22158 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x120>
   22124:	eb0009b5 	bl	24800 <assertion_failed>
   22128:	e59f202c 	ldr	r2, [pc, #44]	; 2215c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x124>
   2212c:	e59f1018 	ldr	r1, [pc, #24]	; 2214c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   22130:	e59f0028 	ldr	r0, [pc, #40]	; 22160 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x128>
   22134:	eb0009b1 	bl	24800 <assertion_failed>
   22138:	e59f2024 	ldr	r2, [pc, #36]	; 22164 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x12c>
   2213c:	e59f1008 	ldr	r1, [pc, #8]	; 2214c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x114>
   22140:	e59f0020 	ldr	r0, [pc, #32]	; 22168 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x130>
   22144:	eb0009ad 	bl	24800 <assertion_failed>
   22148:	63538263 	.word	0x63538263
   2214c:	000445e8 	.word	0x000445e8
   22150:	00043954 	.word	0x00043954
   22154:	0000025a 	.word	0x0000025a
   22158:	00043cf0 	.word	0x00043cf0
   2215c:	0000025d 	.word	0x0000025d
   22160:	000446b8 	.word	0x000446b8
   22164:	0000025e 	.word	0x0000025e
   22168:	000446c8 	.word	0x000446c8

0002216c <CDHCPClient::SendDiscover()>:
   2216c:	e3a01000 	mov	r1, #0
   22170:	e3a0200c 	mov	r2, #12
   22174:	e58011b8 	str	r1, [r0, #440]	; 0x1b8
   22178:	e59f1000 	ldr	r1, [pc]	; 22180 <CDHCPClient::SendDiscover()+0x14>
   2217c:	eaffffad 	b	22038 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   22180:	000445c0 	.word	0x000445c0

00022184 <CDHCPClient::SendRequest(unsigned int)>:
   22184:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22188:	e3510000 	cmp	r1, #0
   2218c:	e28db01c 	add	fp, sp, #28
   22190:	e1a06000 	mov	r6, r0
   22194:	e58011b8 	str	r1, [r0, #440]	; 0x1b8
   22198:	1a000036 	bne	22278 <CDHCPClient::SendRequest(unsigned int)+0xf4>
   2219c:	e59021a0 	ldr	r2, [r0, #416]	; 0x1a0
   221a0:	e59f1104 	ldr	r1, [pc, #260]	; 222ac <CDHCPClient::SendRequest(unsigned int)+0x128>
   221a4:	e1a05822 	lsr	r5, r2, #16
   221a8:	e1a04c22 	lsr	r4, r2, #24
   221ac:	e5c15007 	strb	r5, [r1, #7]
   221b0:	e5c14008 	strb	r4, [r1, #8]
   221b4:	e3a05018 	mov	r5, #24
   221b8:	e1a04001 	mov	r4, r1
   221bc:	e590319c 	ldr	r3, [r0, #412]	; 0x19c
   221c0:	e1a00422 	lsr	r0, r2, #8
   221c4:	e1a0e423 	lsr	lr, r3, #8
   221c8:	e1a0c823 	lsr	ip, r3, #16
   221cc:	e5c10006 	strb	r0, [r1, #6]
   221d0:	e1a00c23 	lsr	r0, r3, #24
   221d4:	e5c12005 	strb	r2, [r1, #5]
   221d8:	e5c1300b 	strb	r3, [r1, #11]
   221dc:	e5c1e00c 	strb	lr, [r1, #12]
   221e0:	e5c1c00d 	strb	ip, [r1, #13]
   221e4:	e5c1000e 	strb	r0, [r1, #14]
   221e8:	e28680e4 	add	r8, r6, #228	; 0xe4
   221ec:	e1a00008 	mov	r0, r8
   221f0:	eb00169f 	bl	27c74 <CString::GetLength() const>
   221f4:	e2507000 	subs	r7, r0, #0
   221f8:	0a000021 	beq	22284 <CDHCPClient::SendRequest(unsigned int)+0x100>
   221fc:	e35700ff 	cmp	r7, #255	; 0xff
   22200:	8a000025 	bhi	2229c <CDHCPClient::SendRequest(unsigned int)+0x118>
   22204:	e085c007 	add	ip, r5, r7
   22208:	e28c3009 	add	r3, ip, #9
   2220c:	e3c33007 	bic	r3, r3, #7
   22210:	e04dd003 	sub	sp, sp, r3
   22214:	e1a01004 	mov	r1, r4
   22218:	e1a02005 	mov	r2, r5
   2221c:	e1a0000d 	mov	r0, sp
   22220:	e28c9002 	add	r9, ip, #2
   22224:	eb0021b9 	bl	2a910 <memcpy>
   22228:	e3a0200c 	mov	r2, #12
   2222c:	e2455001 	sub	r5, r5, #1
   22230:	e08d3005 	add	r3, sp, r5
   22234:	e7cd2005 	strb	r2, [sp, r5]
   22238:	e1a00008 	mov	r0, r8
   2223c:	e5c37001 	strb	r7, [r3, #1]
   22240:	e2834002 	add	r4, r3, #2
   22244:	eb00165c 	bl	27bbc <CString::operator char const*() const>
   22248:	e1a02007 	mov	r2, r7
   2224c:	e1a01000 	mov	r1, r0
   22250:	e1a00004 	mov	r0, r4
   22254:	eb0021ad 	bl	2a910 <memcpy>
   22258:	e3e03000 	mvn	r3, #0
   2225c:	e1a02009 	mov	r2, r9
   22260:	e1a00006 	mov	r0, r6
   22264:	e1a0100d 	mov	r1, sp
   22268:	e7c43007 	strb	r3, [r4, r7]
   2226c:	ebffff71 	bl	22038 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   22270:	e24bd01c 	sub	sp, fp, #28
   22274:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22278:	e3a0500c 	mov	r5, #12
   2227c:	e59f402c 	ldr	r4, [pc, #44]	; 222b0 <CDHCPClient::SendRequest(unsigned int)+0x12c>
   22280:	eaffffd8 	b	221e8 <CDHCPClient::SendRequest(unsigned int)+0x64>
   22284:	e1a02005 	mov	r2, r5
   22288:	e1a01004 	mov	r1, r4
   2228c:	e1a00006 	mov	r0, r6
   22290:	ebffff68 	bl	22038 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   22294:	e24bd01c 	sub	sp, fp, #28
   22298:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2229c:	e59f2010 	ldr	r2, [pc, #16]	; 222b4 <CDHCPClient::SendRequest(unsigned int)+0x130>
   222a0:	e59f1010 	ldr	r1, [pc, #16]	; 222b8 <CDHCPClient::SendRequest(unsigned int)+0x134>
   222a4:	e59f0010 	ldr	r0, [pc, #16]	; 222bc <CDHCPClient::SendRequest(unsigned int)+0x138>
   222a8:	eb000954 	bl	24800 <assertion_failed>
   222ac:	00047f88 	.word	0x00047f88
   222b0:	000445cc 	.word	0x000445cc
   222b4:	00000231 	.word	0x00000231
   222b8:	000445e8 	.word	0x000445e8
   222bc:	000446f0 	.word	0x000446f0

000222c0 <CDHCPClient::SendAndReceive(bool, unsigned int)>:
   222c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222c4:	e1a04000 	mov	r4, r0
   222c8:	e1a07001 	mov	r7, r1
   222cc:	e3a0b002 	mov	fp, #2
   222d0:	e24dd014 	sub	sp, sp, #20
   222d4:	e59f8160 	ldr	r8, [pc, #352]	; 2243c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x17c>
   222d8:	e59fa160 	ldr	sl, [pc, #352]	; 22440 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x180>
   222dc:	e58d200c 	str	r2, [sp, #12]
   222e0:	e3570000 	cmp	r7, #0
   222e4:	0a00003f 	beq	223e8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x128>
   222e8:	e59d100c 	ldr	r1, [sp, #12]
   222ec:	e1a00004 	mov	r0, r4
   222f0:	ebffffa3 	bl	22184 <CDHCPClient::SendRequest(unsigned int)>
   222f4:	e2200001 	eor	r0, r0, #1
   222f8:	e6ef0070 	uxtb	r0, r0
   222fc:	e3500000 	cmp	r0, #0
   22300:	1a000040 	bne	22408 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x148>
   22304:	eb001efd 	bl	29f00 <CTimer::Get()>
   22308:	eb001c46 	bl	29428 <CTimer::GetTicks() const>
   2230c:	e4985004 	ldr	r5, [r8], #4
   22310:	e1a06000 	mov	r6, r0
   22314:	ea000004 	b	2232c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x6c>
   22318:	e2433005 	sub	r3, r3, #5
   2231c:	e3530001 	cmp	r3, #1
   22320:	9a000016 	bls	22380 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc0>
   22324:	eb000887 	bl	24548 <CScheduler::Get()>
   22328:	eb0007f3 	bl	242fc <CScheduler::Yield()>
   2232c:	eb001ef3 	bl	29f00 <CTimer::Get()>
   22330:	eb001c3c 	bl	29428 <CTimer::GetTicks() const>
   22334:	e0400006 	sub	r0, r0, r6
   22338:	e1550000 	cmp	r5, r0
   2233c:	9a000012 	bls	2238c <CDHCPClient::SendAndReceive(bool, unsigned int)+0xcc>
   22340:	e1a00004 	mov	r0, r4
   22344:	ebfffed3 	bl	21e98 <CDHCPClient::ReceiveMessage()>
   22348:	e2509000 	subs	r9, r0, #0
   2234c:	0afffff4 	beq	22324 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22350:	e3570000 	cmp	r7, #0
   22354:	e5d431d1 	ldrb	r3, [r4, #465]	; 0x1d1
   22358:	1affffee 	bne	22318 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x58>
   2235c:	e3530002 	cmp	r3, #2
   22360:	1affffef 	bne	22324 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22364:	e1a00004 	mov	r0, r4
   22368:	ebfffd90 	bl	219b0 <CDHCPClient::CheckConfig()>
   2236c:	e3500000 	cmp	r0, #0
   22370:	0affffeb 	beq	22324 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22374:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   22378:	e3530000 	cmp	r3, #0
   2237c:	0affffe8 	beq	22324 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x64>
   22380:	e1a00009 	mov	r0, r9
   22384:	e28dd014 	add	sp, sp, #20
   22388:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2238c:	eb00120e 	bl	26bcc <CLogger::Get()>
   22390:	e1a0300a 	mov	r3, sl
   22394:	e1a0200b 	mov	r2, fp
   22398:	e59f10a4 	ldr	r1, [pc, #164]	; 22444 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   2239c:	eb001147 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   223a0:	e59f30a0 	ldr	r3, [pc, #160]	; 22448 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x188>
   223a4:	e1530008 	cmp	r3, r8
   223a8:	1affffcc 	bne	222e0 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x20>
   223ac:	eb001206 	bl	26bcc <CLogger::Get()>
   223b0:	e59f2094 	ldr	r2, [pc, #148]	; 2244c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x18c>
   223b4:	e59f1094 	ldr	r1, [pc, #148]	; 22450 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x190>
   223b8:	e3570000 	cmp	r7, #0
   223bc:	01a07002 	moveq	r7, r2
   223c0:	11a07001 	movne	r7, r1
   223c4:	e3a09000 	mov	r9, #0
   223c8:	e59f3084 	ldr	r3, [pc, #132]	; 22454 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x194>
   223cc:	e3a02002 	mov	r2, #2
   223d0:	e58d7000 	str	r7, [sp]
   223d4:	e59f1068 	ldr	r1, [pc, #104]	; 22444 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   223d8:	eb001138 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   223dc:	e1a00009 	mov	r0, r9
   223e0:	e28dd014 	add	sp, sp, #20
   223e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223e8:	e58471b8 	str	r7, [r4, #440]	; 0x1b8
   223ec:	e3a0200c 	mov	r2, #12
   223f0:	e59f1060 	ldr	r1, [pc, #96]	; 22458 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x198>
   223f4:	e1a00004 	mov	r0, r4
   223f8:	ebffff0e 	bl	22038 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   223fc:	e2200001 	eor	r0, r0, #1
   22400:	e6ef0070 	uxtb	r0, r0
   22404:	eaffffbc 	b	222fc <CDHCPClient::SendAndReceive(bool, unsigned int)+0x3c>
   22408:	eb0011ef 	bl	26bcc <CLogger::Get()>
   2240c:	e59f2048 	ldr	r2, [pc, #72]	; 2245c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x19c>
   22410:	e59f1048 	ldr	r1, [pc, #72]	; 22460 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a0>
   22414:	e3570000 	cmp	r7, #0
   22418:	01a07002 	moveq	r7, r2
   2241c:	11a07001 	movne	r7, r1
   22420:	e59f303c 	ldr	r3, [pc, #60]	; 22464 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a4>
   22424:	e3a02001 	mov	r2, #1
   22428:	e58d7000 	str	r7, [sp]
   2242c:	e59f1010 	ldr	r1, [pc, #16]	; 22444 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x184>
   22430:	eb001122 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22434:	e3a09000 	mov	r9, #0
   22438:	eaffffd0 	b	22380 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xc0>
   2243c:	000445d8 	.word	0x000445d8
   22440:	0004473c 	.word	0x0004473c
   22444:	000445b8 	.word	0x000445b8
   22448:	000445e8 	.word	0x000445e8
   2244c:	00044724 	.word	0x00044724
   22450:	00044718 	.word	0x00044718
   22454:	00044760 	.word	0x00044760
   22458:	000445c0 	.word	0x000445c0
   2245c:	0004470c 	.word	0x0004470c
   22460:	00044704 	.word	0x00044704
   22464:	0004472c 	.word	0x0004472c

00022468 <CDHCPClient::SelectAndRequest()>:
   22468:	e92d4070 	push	{r4, r5, r6, lr}
   2246c:	e3a05001 	mov	r5, #1
   22470:	e1a04000 	mov	r4, r0
   22474:	e24dd028 	sub	sp, sp, #40	; 0x28
   22478:	e5c051b0 	strb	r5, [r0, #432]	; 0x1b0
   2247c:	e28d0008 	add	r0, sp, #8
   22480:	ebfffa41 	bl	20d8c <CIPAddress::CIPAddress()>
   22484:	e28460f4 	add	r6, r4, #244	; 0xf4
   22488:	e28d0008 	add	r0, sp, #8
   2248c:	ebfffae9 	bl	21038 <CIPAddress::SetBroadcast()>
   22490:	e1a00006 	mov	r0, r6
   22494:	e28d1008 	add	r1, sp, #8
   22498:	e3a02043 	mov	r2, #67	; 0x43
   2249c:	eb0001f1 	bl	22c68 <CSocket::Connect(CIPAddress&, unsigned short)>
   224a0:	e3500000 	cmp	r0, #0
   224a4:	ba00001a 	blt	22514 <CDHCPClient::SelectAndRequest()+0xac>
   224a8:	e1a00006 	mov	r0, r6
   224ac:	e1a01005 	mov	r1, r5
   224b0:	eb000347 	bl	231d4 <CSocket::SetOptionBroadcast(bool)>
   224b4:	e2506000 	subs	r6, r0, #0
   224b8:	1a00000e 	bne	224f8 <CDHCPClient::SelectAndRequest()+0x90>
   224bc:	e1a00004 	mov	r0, r4
   224c0:	ebfffe2f 	bl	21d84 <CDHCPClient::GetXID() const>
   224c4:	e1a02006 	mov	r2, r6
   224c8:	e58401b4 	str	r0, [r4, #436]	; 0x1b4
   224cc:	e1a01006 	mov	r1, r6
   224d0:	e1a00004 	mov	r0, r4
   224d4:	ebffff79 	bl	222c0 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   224d8:	e3500000 	cmp	r0, #0
   224dc:	1a000015 	bne	22538 <CDHCPClient::SelectAndRequest()+0xd0>
   224e0:	e3a04002 	mov	r4, #2
   224e4:	e28d0008 	add	r0, sp, #8
   224e8:	ebfffa3d 	bl	20de4 <CIPAddress::~CIPAddress()>
   224ec:	e1a00004 	mov	r0, r4
   224f0:	e28dd028 	add	sp, sp, #40	; 0x28
   224f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   224f8:	eb0011b3 	bl	26bcc <CLogger::Get()>
   224fc:	e59f31f0 	ldr	r3, [pc, #496]	; 226f4 <CDHCPClient::SelectAndRequest()+0x28c>
   22500:	e1a02005 	mov	r2, r5
   22504:	e59f11ec 	ldr	r1, [pc, #492]	; 226f8 <CDHCPClient::SelectAndRequest()+0x290>
   22508:	e1a04005 	mov	r4, r5
   2250c:	eb0010eb 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22510:	eafffff3 	b	224e4 <CDHCPClient::SelectAndRequest()+0x7c>
   22514:	eb0011ac 	bl	26bcc <CLogger::Get()>
   22518:	e3a02043 	mov	r2, #67	; 0x43
   2251c:	e59f31d8 	ldr	r3, [pc, #472]	; 226fc <CDHCPClient::SelectAndRequest()+0x294>
   22520:	e58d2000 	str	r2, [sp]
   22524:	e59f11cc 	ldr	r1, [pc, #460]	; 226f8 <CDHCPClient::SelectAndRequest()+0x290>
   22528:	e1a02005 	mov	r2, r5
   2252c:	e1a04005 	mov	r4, r5
   22530:	eb0010e2 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22534:	eaffffea 	b	224e4 <CDHCPClient::SelectAndRequest()+0x7c>
   22538:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   2253c:	e3530000 	cmp	r3, #0
   22540:	e584319c 	str	r3, [r4, #412]	; 0x19c
   22544:	0a000023 	beq	225d8 <CDHCPClient::SelectAndRequest()+0x170>
   22548:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   2254c:	e3530000 	cmp	r3, #0
   22550:	e58431a0 	str	r3, [r4, #416]	; 0x1a0
   22554:	0a000023 	beq	225e8 <CDHCPClient::SelectAndRequest()+0x180>
   22558:	e1a02006 	mov	r2, r6
   2255c:	e1a01005 	mov	r1, r5
   22560:	e1a00004 	mov	r0, r4
   22564:	ebffff55 	bl	222c0 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   22568:	e3500000 	cmp	r0, #0
   2256c:	0affffdb 	beq	224e0 <CDHCPClient::SelectAndRequest()+0x78>
   22570:	e5d431d1 	ldrb	r3, [r4, #465]	; 0x1d1
   22574:	e3530006 	cmp	r3, #6
   22578:	0a00000f 	beq	225bc <CDHCPClient::SelectAndRequest()+0x154>
   2257c:	e1a00004 	mov	r0, r4
   22580:	ebfffd0a 	bl	219b0 <CDHCPClient::CheckConfig()>
   22584:	e3500000 	cmp	r0, #0
   22588:	03a04004 	moveq	r4, #4
   2258c:	0affffd4 	beq	224e4 <CDHCPClient::SelectAndRequest()+0x7c>
   22590:	e594219c 	ldr	r2, [r4, #412]	; 0x19c
   22594:	e59431bc 	ldr	r3, [r4, #444]	; 0x1bc
   22598:	e1520003 	cmp	r2, r3
   2259c:	0a000015 	beq	225f8 <CDHCPClient::SelectAndRequest()+0x190>
   225a0:	eb001189 	bl	26bcc <CLogger::Get()>
   225a4:	e59f3154 	ldr	r3, [pc, #340]	; 22700 <CDHCPClient::SelectAndRequest()+0x298>
   225a8:	e3a02002 	mov	r2, #2
   225ac:	e59f1144 	ldr	r1, [pc, #324]	; 226f8 <CDHCPClient::SelectAndRequest()+0x290>
   225b0:	eb0010c2 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   225b4:	e3a04005 	mov	r4, #5
   225b8:	eaffffc9 	b	224e4 <CDHCPClient::SelectAndRequest()+0x7c>
   225bc:	eb001182 	bl	26bcc <CLogger::Get()>
   225c0:	e59f313c 	ldr	r3, [pc, #316]	; 22704 <CDHCPClient::SelectAndRequest()+0x29c>
   225c4:	e3a02002 	mov	r2, #2
   225c8:	e59f1128 	ldr	r1, [pc, #296]	; 226f8 <CDHCPClient::SelectAndRequest()+0x290>
   225cc:	eb0010bb 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   225d0:	e3a04003 	mov	r4, #3
   225d4:	eaffffc2 	b	224e4 <CDHCPClient::SelectAndRequest()+0x7c>
   225d8:	e3a020f9 	mov	r2, #249	; 0xf9
   225dc:	e59f1124 	ldr	r1, [pc, #292]	; 22708 <CDHCPClient::SelectAndRequest()+0x2a0>
   225e0:	e59f0124 	ldr	r0, [pc, #292]	; 2270c <CDHCPClient::SelectAndRequest()+0x2a4>
   225e4:	eb000885 	bl	24800 <assertion_failed>
   225e8:	e3a020fc 	mov	r2, #252	; 0xfc
   225ec:	e59f1114 	ldr	r1, [pc, #276]	; 22708 <CDHCPClient::SelectAndRequest()+0x2a0>
   225f0:	e59f0118 	ldr	r0, [pc, #280]	; 22710 <CDHCPClient::SelectAndRequest()+0x2a8>
   225f4:	eb000881 	bl	24800 <assertion_failed>
   225f8:	e59421a0 	ldr	r2, [r4, #416]	; 0x1a0
   225fc:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   22600:	e1520003 	cmp	r2, r3
   22604:	0a000006 	beq	22624 <CDHCPClient::SelectAndRequest()+0x1bc>
   22608:	eb00116f 	bl	26bcc <CLogger::Get()>
   2260c:	e59f3100 	ldr	r3, [pc, #256]	; 22714 <CDHCPClient::SelectAndRequest()+0x2ac>
   22610:	e3a02002 	mov	r2, #2
   22614:	e59f10dc 	ldr	r1, [pc, #220]	; 226f8 <CDHCPClient::SelectAndRequest()+0x290>
   22618:	eb0010a8 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2261c:	e3a04005 	mov	r4, #5
   22620:	eaffffaf 	b	224e4 <CDHCPClient::SelectAndRequest()+0x7c>
   22624:	e28d0010 	add	r0, sp, #16
   22628:	ebfff9d7 	bl	20d8c <CIPAddress::CIPAddress()>
   2262c:	e594119c 	ldr	r1, [r4, #412]	; 0x19c
   22630:	e28d0010 	add	r0, sp, #16
   22634:	ebfffa57 	bl	20f98 <CIPAddress::Set(unsigned int)>
   22638:	e28d0018 	add	r0, sp, #24
   2263c:	eb001548 	bl	27b64 <CString::CString()>
   22640:	e28d1018 	add	r1, sp, #24
   22644:	e28d0010 	add	r0, sp, #16
   22648:	ebfffacd 	bl	21184 <CIPAddress::Format(CString*) const>
   2264c:	eb00115e 	bl	26bcc <CLogger::Get()>
   22650:	e1a05000 	mov	r5, r0
   22654:	e28d0018 	add	r0, sp, #24
   22658:	eb001557 	bl	27bbc <CString::operator char const*() const>
   2265c:	e59f30b4 	ldr	r3, [pc, #180]	; 22718 <CDHCPClient::SelectAndRequest()+0x2b0>
   22660:	e58d0000 	str	r0, [sp]
   22664:	e3a02003 	mov	r2, #3
   22668:	e1a00005 	mov	r0, r5
   2266c:	e59f1084 	ldr	r1, [pc, #132]	; 226f8 <CDHCPClient::SelectAndRequest()+0x290>
   22670:	eb001092 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22674:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22678:	e3500000 	cmp	r0, #0
   2267c:	0a000018 	beq	226e4 <CDHCPClient::SelectAndRequest()+0x27c>
   22680:	e594119c 	ldr	r1, [r4, #412]	; 0x19c
   22684:	ebfff9a4 	bl	20d1c <CNetConfig::SetIPAddress(unsigned int)>
   22688:	e59411c0 	ldr	r1, [r4, #448]	; 0x1c0
   2268c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   22690:	ebfff9a8 	bl	20d38 <CNetConfig::SetNetMask(unsigned int)>
   22694:	e59411c4 	ldr	r1, [r4, #452]	; 0x1c4
   22698:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   2269c:	ebfff956 	bl	20bfc <CNetConfig::SetDefaultGateway(unsigned int)>
   226a0:	e59411c8 	ldr	r1, [r4, #456]	; 0x1c8
   226a4:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
   226a8:	ebfff955 	bl	20c04 <CNetConfig::SetDNSServer(unsigned int)>
   226ac:	e3a0c001 	mov	ip, #1
   226b0:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   226b4:	e59421d8 	ldr	r2, [r4, #472]	; 0x1d8
   226b8:	e59431dc 	ldr	r3, [r4, #476]	; 0x1dc
   226bc:	e5c4c194 	strb	ip, [r4, #404]	; 0x194
   226c0:	e58411a4 	str	r1, [r4, #420]	; 0x1a4
   226c4:	e58421a8 	str	r2, [r4, #424]	; 0x1a8
   226c8:	e58431ac 	str	r3, [r4, #428]	; 0x1ac
   226cc:	e28d0018 	add	r0, sp, #24
   226d0:	eb0014f0 	bl	27a98 <CString::~CString()>
   226d4:	e28d0010 	add	r0, sp, #16
   226d8:	ebfff9c1 	bl	20de4 <CIPAddress::~CIPAddress()>
   226dc:	e3a04000 	mov	r4, #0
   226e0:	eaffff7f 	b	224e4 <CDHCPClient::SelectAndRequest()+0x7c>
   226e4:	e59f2030 	ldr	r2, [pc, #48]	; 2271c <CDHCPClient::SelectAndRequest()+0x2b4>
   226e8:	e59f1018 	ldr	r1, [pc, #24]	; 22708 <CDHCPClient::SelectAndRequest()+0x2a0>
   226ec:	e59f002c 	ldr	r0, [pc, #44]	; 22720 <CDHCPClient::SelectAndRequest()+0x2b8>
   226f0:	eb000842 	bl	24800 <assertion_failed>
   226f4:	00044798 	.word	0x00044798
   226f8:	000445b8 	.word	0x000445b8
   226fc:	00044774 	.word	0x00044774
   22700:	00044804 	.word	0x00044804
   22704:	000447e8 	.word	0x000447e8
   22708:	000445e8 	.word	0x000445e8
   2270c:	000447b4 	.word	0x000447b4
   22710:	000447cc 	.word	0x000447cc
   22714:	0004481c 	.word	0x0004481c
   22718:	0004483c 	.word	0x0004483c
   2271c:	00000126 	.word	0x00000126
   22720:	00043980 	.word	0x00043980

00022724 <CDHCPClient::RenewOrRebind(bool, unsigned int)>:
   22724:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   22728:	e1a05000 	mov	r5, r0
   2272c:	e24dd014 	sub	sp, sp, #20
   22730:	e1a04001 	mov	r4, r1
   22734:	e1a06002 	mov	r6, r2
   22738:	eb001df0 	bl	29f00 <CTimer::Get()>
   2273c:	eb001b3b 	bl	29430 <CTimer::GetUptime() const>
   22740:	e5953198 	ldr	r3, [r5, #408]	; 0x198
   22744:	e0400003 	sub	r0, r0, r3
   22748:	e1500006 	cmp	r0, r6
   2274c:	23a04002 	movcs	r4, #2
   22750:	3a000002 	bcc	22760 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x3c>
   22754:	e1a00004 	mov	r0, r4
   22758:	e28dd014 	add	sp, sp, #20
   2275c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   22760:	eb001119 	bl	26bcc <CLogger::Get()>
   22764:	e3540000 	cmp	r4, #0
   22768:	0a00003d 	beq	22864 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x140>
   2276c:	e59f92b8 	ldr	r9, [pc, #696]	; 22a2c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x308>
   22770:	e59f32b8 	ldr	r3, [pc, #696]	; 22a30 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x30c>
   22774:	e59f12b8 	ldr	r1, [pc, #696]	; 22a34 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   22778:	e3a02004 	mov	r2, #4
   2277c:	e28d8008 	add	r8, sp, #8
   22780:	e58d9000 	str	r9, [sp]
   22784:	eb00104d 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22788:	e1a00008 	mov	r0, r8
   2278c:	ebfff97e 	bl	20d8c <CIPAddress::CIPAddress()>
   22790:	e3a03000 	mov	r3, #0
   22794:	e1a00008 	mov	r0, r8
   22798:	e5c531b0 	strb	r3, [r5, #432]	; 0x1b0
   2279c:	e59511a0 	ldr	r1, [r5, #416]	; 0x1a0
   227a0:	ebfff9fc 	bl	20f98 <CIPAddress::Set(unsigned int)>
   227a4:	e28540f4 	add	r4, r5, #244	; 0xf4
   227a8:	e1a00004 	mov	r0, r4
   227ac:	e3a02043 	mov	r2, #67	; 0x43
   227b0:	e1a01008 	mov	r1, r8
   227b4:	eb00012b 	bl	22c68 <CSocket::Connect(CIPAddress&, unsigned short)>
   227b8:	e3500000 	cmp	r0, #0
   227bc:	ba000036 	blt	2289c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x178>
   227c0:	e1a00004 	mov	r0, r4
   227c4:	e5d511b0 	ldrb	r1, [r5, #432]	; 0x1b0
   227c8:	eb000281 	bl	231d4 <CSocket::SetOptionBroadcast(bool)>
   227cc:	e3500000 	cmp	r0, #0
   227d0:	03a07001 	moveq	r7, #1
   227d4:	0a000016 	beq	22834 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x110>
   227d8:	ea00003e 	b	228d8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x1b4>
   227dc:	e1a00005 	mov	r0, r5
   227e0:	ebfffd67 	bl	21d84 <CDHCPClient::GetXID() const>
   227e4:	e595219c 	ldr	r2, [r5, #412]	; 0x19c
   227e8:	e58501b4 	str	r0, [r5, #436]	; 0x1b4
   227ec:	e1a01007 	mov	r1, r7
   227f0:	e1a00005 	mov	r0, r5
   227f4:	ebfffeb1 	bl	222c0 <CDHCPClient::SendAndReceive(bool, unsigned int)>
   227f8:	e3500000 	cmp	r0, #0
   227fc:	1a00003c 	bne	228f4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x1d0>
   22800:	eb001dbe 	bl	29f00 <CTimer::Get()>
   22804:	eb001b09 	bl	29430 <CTimer::GetUptime() const>
   22808:	e5951198 	ldr	r1, [r5, #408]	; 0x198
   2280c:	e0400001 	sub	r0, r0, r1
   22810:	e1560000 	cmp	r6, r0
   22814:	9a00000c 	bls	2284c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x128>
   22818:	e0460000 	sub	r0, r6, r0
   2281c:	e1a040a0 	lsr	r4, r0, #1
   22820:	eb000748 	bl	24548 <CScheduler::Get()>
   22824:	e354003c 	cmp	r4, #60	; 0x3c
   22828:	21a01004 	movcs	r1, r4
   2282c:	33a0103c 	movcc	r1, #60	; 0x3c
   22830:	eb00070a 	bl	24460 <CScheduler::Sleep(unsigned int)>
   22834:	eb001db1 	bl	29f00 <CTimer::Get()>
   22838:	eb001afc 	bl	29430 <CTimer::GetUptime() const>
   2283c:	e5953198 	ldr	r3, [r5, #408]	; 0x198
   22840:	e0400003 	sub	r0, r0, r3
   22844:	e1560000 	cmp	r6, r0
   22848:	8affffe3 	bhi	227dc <CDHCPClient::RenewOrRebind(bool, unsigned int)+0xb8>
   2284c:	e3a04002 	mov	r4, #2
   22850:	e1a00008 	mov	r0, r8
   22854:	ebfff962 	bl	20de4 <CIPAddress::~CIPAddress()>
   22858:	e1a00004 	mov	r0, r4
   2285c:	e28dd014 	add	sp, sp, #20
   22860:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   22864:	e59f91cc 	ldr	r9, [pc, #460]	; 22a38 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x314>
   22868:	e59f31c0 	ldr	r3, [pc, #448]	; 22a30 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x30c>
   2286c:	e3a02004 	mov	r2, #4
   22870:	e59f11bc 	ldr	r1, [pc, #444]	; 22a34 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   22874:	e28d8008 	add	r8, sp, #8
   22878:	e58d9000 	str	r9, [sp]
   2287c:	eb00100f 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22880:	e1a00008 	mov	r0, r8
   22884:	ebfff940 	bl	20d8c <CIPAddress::CIPAddress()>
   22888:	e3a03001 	mov	r3, #1
   2288c:	e1a00008 	mov	r0, r8
   22890:	e5c531b0 	strb	r3, [r5, #432]	; 0x1b0
   22894:	ebfff9e7 	bl	21038 <CIPAddress::SetBroadcast()>
   22898:	eaffffc1 	b	227a4 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x80>
   2289c:	eb0010ca 	bl	26bcc <CLogger::Get()>
   228a0:	e5d5c1b0 	ldrb	ip, [r5, #432]	; 0x1b0
   228a4:	e59f1190 	ldr	r1, [pc, #400]	; 22a3c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x318>
   228a8:	e35c0000 	cmp	ip, #0
   228ac:	e59f318c 	ldr	r3, [pc, #396]	; 22a40 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x31c>
   228b0:	e3a02043 	mov	r2, #67	; 0x43
   228b4:	01a03001 	moveq	r3, r1
   228b8:	e58d2004 	str	r2, [sp, #4]
   228bc:	e58d3000 	str	r3, [sp]
   228c0:	e3a02001 	mov	r2, #1
   228c4:	e59f3178 	ldr	r3, [pc, #376]	; 22a44 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x320>
   228c8:	e59f1164 	ldr	r1, [pc, #356]	; 22a34 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   228cc:	eb000ffb 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   228d0:	e3a04001 	mov	r4, #1
   228d4:	eaffffdd 	b	22850 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   228d8:	eb0010bb 	bl	26bcc <CLogger::Get()>
   228dc:	e59f3164 	ldr	r3, [pc, #356]	; 22a48 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x324>
   228e0:	e3a02001 	mov	r2, #1
   228e4:	e59f1148 	ldr	r1, [pc, #328]	; 22a34 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   228e8:	eb000ff4 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   228ec:	e3a04001 	mov	r4, #1
   228f0:	eaffffd6 	b	22850 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   228f4:	e5d531d1 	ldrb	r3, [r5, #465]	; 0x1d1
   228f8:	e3530006 	cmp	r3, #6
   228fc:	0a00001f 	beq	22980 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x25c>
   22900:	e1a00005 	mov	r0, r5
   22904:	ebfffc29 	bl	219b0 <CDHCPClient::CheckConfig()>
   22908:	e3500000 	cmp	r0, #0
   2290c:	0a000019 	beq	22978 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x254>
   22910:	e59531d4 	ldr	r3, [r5, #468]	; 0x1d4
   22914:	e3530000 	cmp	r3, #0
   22918:	e58531a0 	str	r3, [r5, #416]	; 0x1a0
   2291c:	0a00001e 	beq	2299c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x278>
   22920:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   22924:	e3500000 	cmp	r0, #0
   22928:	0a00003b 	beq	22a1c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x2f8>
   2292c:	ebfff8ba 	bl	20c1c <CNetConfig::GetIPAddress() const>
   22930:	e59511bc 	ldr	r1, [r5, #444]	; 0x1bc
   22934:	ebfff985 	bl	20f50 <CIPAddress::operator!=(unsigned int) const>
   22938:	e3500000 	cmp	r0, #0
   2293c:	1a00001d 	bne	229b8 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x294>
   22940:	e59511cc 	ldr	r1, [r5, #460]	; 0x1cc
   22944:	e59521d8 	ldr	r2, [r5, #472]	; 0x1d8
   22948:	e59531dc 	ldr	r3, [r5, #476]	; 0x1dc
   2294c:	e58511a4 	str	r1, [r5, #420]	; 0x1a4
   22950:	e58521a8 	str	r2, [r5, #424]	; 0x1a8
   22954:	e58531ac 	str	r3, [r5, #428]	; 0x1ac
   22958:	eb00109b 	bl	26bcc <CLogger::Get()>
   2295c:	e58d9000 	str	r9, [sp]
   22960:	e59f30e4 	ldr	r3, [pc, #228]	; 22a4c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x328>
   22964:	e3a02004 	mov	r2, #4
   22968:	e59f10c4 	ldr	r1, [pc, #196]	; 22a34 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   2296c:	eb000fd3 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22970:	e3a04000 	mov	r4, #0
   22974:	eaffffb5 	b	22850 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   22978:	e3a04004 	mov	r4, #4
   2297c:	eaffffb3 	b	22850 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   22980:	eb001091 	bl	26bcc <CLogger::Get()>
   22984:	e59f30c4 	ldr	r3, [pc, #196]	; 22a50 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x32c>
   22988:	e3a02002 	mov	r2, #2
   2298c:	e59f10a0 	ldr	r1, [pc, #160]	; 22a34 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   22990:	eb000fca 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22994:	e3a04003 	mov	r4, #3
   22998:	eaffffac 	b	22850 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   2299c:	eb00108a 	bl	26bcc <CLogger::Get()>
   229a0:	e59f30ac 	ldr	r3, [pc, #172]	; 22a54 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x330>
   229a4:	e3a02002 	mov	r2, #2
   229a8:	e59f1084 	ldr	r1, [pc, #132]	; 22a34 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   229ac:	eb000fc3 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   229b0:	e3a04004 	mov	r4, #4
   229b4:	eaffffa5 	b	22850 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   229b8:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   229bc:	ebfff89a 	bl	20c2c <CNetConfig::GetNetMask() const>
   229c0:	e59531c0 	ldr	r3, [r5, #448]	; 0x1c0
   229c4:	e5902000 	ldr	r2, [r0]
   229c8:	e1520003 	cmp	r2, r3
   229cc:	0affffdb 	beq	22940 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x21c>
   229d0:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   229d4:	ebfff896 	bl	20c34 <CNetConfig::GetDefaultGateway() const>
   229d8:	e59511c4 	ldr	r1, [r5, #452]	; 0x1c4
   229dc:	ebfff95b 	bl	20f50 <CIPAddress::operator!=(unsigned int) const>
   229e0:	e3500000 	cmp	r0, #0
   229e4:	0affffd5 	beq	22940 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x21c>
   229e8:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
   229ec:	ebfff892 	bl	20c3c <CNetConfig::GetDNSServer() const>
   229f0:	e59511c8 	ldr	r1, [r5, #456]	; 0x1c8
   229f4:	ebfff955 	bl	20f50 <CIPAddress::operator!=(unsigned int) const>
   229f8:	e3500000 	cmp	r0, #0
   229fc:	0affffcf 	beq	22940 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x21c>
   22a00:	eb001071 	bl	26bcc <CLogger::Get()>
   22a04:	e59f304c 	ldr	r3, [pc, #76]	; 22a58 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x334>
   22a08:	e3a02002 	mov	r2, #2
   22a0c:	e59f1020 	ldr	r1, [pc, #32]	; 22a34 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x310>
   22a10:	eb000faa 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22a14:	e3a04005 	mov	r4, #5
   22a18:	eaffff8c 	b	22850 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x12c>
   22a1c:	e59f2038 	ldr	r2, [pc, #56]	; 22a5c <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x338>
   22a20:	e59f1038 	ldr	r1, [pc, #56]	; 22a60 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x33c>
   22a24:	e59f0038 	ldr	r0, [pc, #56]	; 22a64 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x340>
   22a28:	eb000774 	bl	24800 <assertion_failed>
   22a2c:	00044850 	.word	0x00044850
   22a30:	000448b8 	.word	0x000448b8
   22a34:	000445b8 	.word	0x000445b8
   22a38:	0004485c 	.word	0x0004485c
   22a3c:	00044870 	.word	0x00044870
   22a40:	00044868 	.word	0x00044868
   22a44:	00044874 	.word	0x00044874
   22a48:	00044798 	.word	0x00044798
   22a4c:	000448e8 	.word	0x000448e8
   22a50:	000447e8 	.word	0x000447e8
   22a54:	00044898 	.word	0x00044898
   22a58:	000448c4 	.word	0x000448c4
   22a5c:	00000195 	.word	0x00000195
   22a60:	000445e8 	.word	0x000445e8
   22a64:	00043980 	.word	0x00043980

00022a68 <CDHCPClient::Run()>:
   22a68:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a6c:	e28040f4 	add	r4, r0, #244	; 0xf4
   22a70:	e24ddf8d 	sub	sp, sp, #564	; 0x234
   22a74:	e1a07000 	mov	r7, r0
   22a78:	e3a01044 	mov	r1, #68	; 0x44
   22a7c:	e1a00004 	mov	r0, r4
   22a80:	eb000061 	bl	22c0c <CSocket::Bind(unsigned short)>
   22a84:	e3500000 	cmp	r0, #0
   22a88:	ba000053 	blt	22bdc <CDHCPClient::Run()+0x174>
   22a8c:	e3a06040 	mov	r6, #64	; 0x40
   22a90:	e3a05f89 	mov	r5, #548	; 0x224
   22a94:	e3a0800a 	mov	r8, #10
   22a98:	e59fa160 	ldr	sl, [pc, #352]	; 22c00 <CDHCPClient::Run()+0x198>
   22a9c:	e59fb160 	ldr	fp, [pc, #352]	; 22c04 <CDHCPClient::Run()+0x19c>
   22aa0:	e1a00007 	mov	r0, r7
   22aa4:	ebfffe6f 	bl	22468 <CDHCPClient::SelectAndRequest()>
   22aa8:	e3500001 	cmp	r0, #1
   22aac:	0a000009 	beq	22ad8 <CDHCPClient::Run()+0x70>
   22ab0:	3a00000a 	bcc	22ae0 <CDHCPClient::Run()+0x78>
   22ab4:	e3500005 	cmp	r0, #5
   22ab8:	8a000008 	bhi	22ae0 <CDHCPClient::Run()+0x78>
   22abc:	eb0006a1 	bl	24548 <CScheduler::Get()>
   22ac0:	e3a0103c 	mov	r1, #60	; 0x3c
   22ac4:	eb000665 	bl	24460 <CScheduler::Sleep(unsigned int)>
   22ac8:	e1a00007 	mov	r0, r7
   22acc:	ebfffe65 	bl	22468 <CDHCPClient::SelectAndRequest()>
   22ad0:	e3500001 	cmp	r0, #1
   22ad4:	1afffff5 	bne	22ab0 <CDHCPClient::Run()+0x48>
   22ad8:	e28ddf8d 	add	sp, sp, #564	; 0x234
   22adc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ae0:	e3a09001 	mov	r9, #1
   22ae4:	eb001d05 	bl	29f00 <CTimer::Get()>
   22ae8:	eb001a50 	bl	29430 <CTimer::GetUptime() const>
   22aec:	e5870198 	str	r0, [r7, #408]	; 0x198
   22af0:	eb001d02 	bl	29f00 <CTimer::Get()>
   22af4:	eb001a4d 	bl	29430 <CTimer::GetUptime() const>
   22af8:	e5973198 	ldr	r3, [r7, #408]	; 0x198
   22afc:	e59721a8 	ldr	r2, [r7, #424]	; 0x1a8
   22b00:	e0400003 	sub	r0, r0, r3
   22b04:	e1500002 	cmp	r0, r2
   22b08:	3a000002 	bcc	22b18 <CDHCPClient::Run()+0xb0>
   22b0c:	ea00000c 	b	22b44 <CDHCPClient::Run()+0xdc>
   22b10:	eb00068c 	bl	24548 <CScheduler::Get()>
   22b14:	eb0005f8 	bl	242fc <CScheduler::Yield()>
   22b18:	e1a03006 	mov	r3, r6
   22b1c:	e1a02005 	mov	r2, r5
   22b20:	e28d100c 	add	r1, sp, #12
   22b24:	e1a00004 	mov	r0, r4
   22b28:	eb00014d 	bl	23064 <CSocket::Receive(void*, unsigned int, int)>
   22b2c:	e3500000 	cmp	r0, #0
   22b30:	cafffff6 	bgt	22b10 <CDHCPClient::Run()+0xa8>
   22b34:	eb000683 	bl	24548 <CScheduler::Get()>
   22b38:	e1a01008 	mov	r1, r8
   22b3c:	eb000647 	bl	24460 <CScheduler::Sleep(unsigned int)>
   22b40:	eaffffea 	b	22af0 <CDHCPClient::Run()+0x88>
   22b44:	e59721ac 	ldr	r2, [r7, #428]	; 0x1ac
   22b48:	e1a01009 	mov	r1, r9
   22b4c:	e1a00007 	mov	r0, r7
   22b50:	ebfffef3 	bl	22724 <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   22b54:	e3500005 	cmp	r0, #5
   22b58:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   22b5c:	ea000011 	b	22ba8 <CDHCPClient::Run()+0x140>
   22b60:	00022ae4 	.word	0x00022ae4
   22b64:	00022ad8 	.word	0x00022ad8
   22b68:	00022ba8 	.word	0x00022ba8
   22b6c:	00022b8c 	.word	0x00022b8c
   22b70:	00022b8c 	.word	0x00022b8c
   22b74:	00022b8c 	.word	0x00022b8c
   22b78:	eb001013 	bl	26bcc <CLogger::Get()>
   22b7c:	e1a0300a 	mov	r3, sl
   22b80:	e3a02001 	mov	r2, #1
   22b84:	e1a0100b 	mov	r1, fp
   22b88:	eb000f4c 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22b8c:	e3a03000 	mov	r3, #0
   22b90:	e59700e0 	ldr	r0, [r7, #224]	; 0xe0
   22b94:	e5c73194 	strb	r3, [r7, #404]	; 0x194
   22b98:	e1500003 	cmp	r0, r3
   22b9c:	0a000016 	beq	22bfc <CDHCPClient::Run()+0x194>
   22ba0:	ebfff839 	bl	20c8c <CNetConfig::Reset()>
   22ba4:	eaffffbd 	b	22aa0 <CDHCPClient::Run()+0x38>
   22ba8:	e59721a4 	ldr	r2, [r7, #420]	; 0x1a4
   22bac:	e3a01000 	mov	r1, #0
   22bb0:	e1a00007 	mov	r0, r7
   22bb4:	ebfffeda 	bl	22724 <CDHCPClient::RenewOrRebind(bool, unsigned int)>
   22bb8:	e3500005 	cmp	r0, #5
   22bbc:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
   22bc0:	eaffffec 	b	22b78 <CDHCPClient::Run()+0x110>
   22bc4:	00022ae4 	.word	0x00022ae4
   22bc8:	00022ad8 	.word	0x00022ad8
   22bcc:	00022b78 	.word	0x00022b78
   22bd0:	00022b8c 	.word	0x00022b8c
   22bd4:	00022b8c 	.word	0x00022b8c
   22bd8:	00022b8c 	.word	0x00022b8c
   22bdc:	eb000ffa 	bl	26bcc <CLogger::Get()>
   22be0:	e3a02044 	mov	r2, #68	; 0x44
   22be4:	e59f301c 	ldr	r3, [pc, #28]	; 22c08 <CDHCPClient::Run()+0x1a0>
   22be8:	e58d2000 	str	r2, [sp]
   22bec:	e59f1010 	ldr	r1, [pc, #16]	; 22c04 <CDHCPClient::Run()+0x19c>
   22bf0:	e3a02001 	mov	r2, #1
   22bf4:	eb000f31 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   22bf8:	eaffffb6 	b	22ad8 <CDHCPClient::Run()+0x70>
   22bfc:	ebfffb22 	bl	2188c <CDHCPClient::HaltNetwork() [clone .part.0]>
   22c00:	00044910 	.word	0x00044910
   22c04:	000445b8 	.word	0x000445b8
   22c08:	000448f8 	.word	0x000448f8

00022c0c <CSocket::Bind(unsigned short)>:
   22c0c:	e251c000 	subs	ip, r1, #0
   22c10:	0a00000b 	beq	22c44 <CSocket::Bind(unsigned short)+0x38>
   22c14:	e1d031b4 	ldrh	r3, [r0, #20]
   22c18:	e3530000 	cmp	r3, #0
   22c1c:	1a000008 	bne	22c44 <CSocket::Bind(unsigned short)+0x38>
   22c20:	e5902018 	ldr	r2, [r0, #24]
   22c24:	e3520000 	cmp	r2, #0
   22c28:	aa000005 	bge	22c44 <CSocket::Bind(unsigned short)+0x38>
   22c2c:	e5902010 	ldr	r2, [r0, #16]
   22c30:	e1c0c1b4 	strh	ip, [r0, #20]
   22c34:	e3520011 	cmp	r2, #17
   22c38:	0a000003 	beq	22c4c <CSocket::Bind(unsigned short)+0x40>
   22c3c:	e1a00003 	mov	r0, r3
   22c40:	e12fff1e 	bx	lr
   22c44:	e3e00000 	mvn	r0, #0
   22c48:	e12fff1e 	bx	lr
   22c4c:	e92d4010 	push	{r4, lr}
   22c50:	e1a04000 	mov	r4, r0
   22c54:	e590000c 	ldr	r0, [r0, #12]
   22c58:	ebffdba3 	bl	19aec <CTransportLayer::Bind(unsigned short, int)>
   22c5c:	e5840018 	str	r0, [r4, #24]
   22c60:	e0000fc0 	and	r0, r0, r0, asr #31
   22c64:	e8bd8010 	pop	{r4, pc}

00022c68 <CSocket::Connect(CIPAddress&, unsigned short)>:
   22c68:	e92d4070 	push	{r4, r5, r6, lr}
   22c6c:	e2525000 	subs	r5, r2, #0
   22c70:	e24dd008 	sub	sp, sp, #8
   22c74:	0a000017 	beq	22cd8 <CSocket::Connect(CIPAddress&, unsigned short)+0x70>
   22c78:	e1a04000 	mov	r4, r0
   22c7c:	e590000c 	ldr	r0, [r0, #12]
   22c80:	e1a06001 	mov	r6, r1
   22c84:	e3500000 	cmp	r0, #0
   22c88:	0a000024 	beq	22d20 <CSocket::Connect(CIPAddress&, unsigned short)+0xb8>
   22c8c:	e5941018 	ldr	r1, [r4, #24]
   22c90:	e3510000 	cmp	r1, #0
   22c94:	ba000005 	blt	22cb0 <CSocket::Connect(CIPAddress&, unsigned short)+0x48>
   22c98:	e5943010 	ldr	r3, [r4, #16]
   22c9c:	e3530011 	cmp	r3, #17
   22ca0:	1a00000c 	bne	22cd8 <CSocket::Connect(CIPAddress&, unsigned short)+0x70>
   22ca4:	ebffdd1f 	bl	1a128 <CTransportLayer::Disconnect(int)>
   22ca8:	e3e03000 	mvn	r3, #0
   22cac:	e5843018 	str	r3, [r4, #24]
   22cb0:	e5940008 	ldr	r0, [r4, #8]
   22cb4:	e3500000 	cmp	r0, #0
   22cb8:	0a00001c 	beq	22d30 <CSocket::Connect(CIPAddress&, unsigned short)+0xc8>
   22cbc:	ebfff7d6 	bl	20c1c <CNetConfig::GetIPAddress() const>
   22cc0:	ebfff910 	bl	21108 <CIPAddress::IsNull() const>
   22cc4:	e3500000 	cmp	r0, #0
   22cc8:	0a000009 	beq	22cf4 <CSocket::Connect(CIPAddress&, unsigned short)+0x8c>
   22ccc:	e5943010 	ldr	r3, [r4, #16]
   22cd0:	e3530011 	cmp	r3, #17
   22cd4:	0a000002 	beq	22ce4 <CSocket::Connect(CIPAddress&, unsigned short)+0x7c>
   22cd8:	e3e00000 	mvn	r0, #0
   22cdc:	e28dd008 	add	sp, sp, #8
   22ce0:	e8bd8070 	pop	{r4, r5, r6, pc}
   22ce4:	e1a00006 	mov	r0, r6
   22ce8:	ebfff914 	bl	21140 <CIPAddress::IsBroadcast() const>
   22cec:	e3500000 	cmp	r0, #0
   22cf0:	0afffff8 	beq	22cd8 <CSocket::Connect(CIPAddress&, unsigned short)+0x70>
   22cf4:	e594c010 	ldr	ip, [r4, #16]
   22cf8:	e1d431b4 	ldrh	r3, [r4, #20]
   22cfc:	e594000c 	ldr	r0, [r4, #12]
   22d00:	e1a02005 	mov	r2, r5
   22d04:	e1a01006 	mov	r1, r6
   22d08:	e58dc000 	str	ip, [sp]
   22d0c:	ebffdbd0 	bl	19c54 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>
   22d10:	e5840018 	str	r0, [r4, #24]
   22d14:	e0000fc0 	and	r0, r0, r0, asr #31
   22d18:	e28dd008 	add	sp, sp, #8
   22d1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22d20:	e3a02070 	mov	r2, #112	; 0x70
   22d24:	e59f1014 	ldr	r1, [pc, #20]	; 22d40 <CSocket::Connect(CIPAddress&, unsigned short)+0xd8>
   22d28:	e59f0014 	ldr	r0, [pc, #20]	; 22d44 <CSocket::Connect(CIPAddress&, unsigned short)+0xdc>
   22d2c:	eb0006b3 	bl	24800 <assertion_failed>
   22d30:	e3a0207d 	mov	r2, #125	; 0x7d
   22d34:	e59f1004 	ldr	r1, [pc, #4]	; 22d40 <CSocket::Connect(CIPAddress&, unsigned short)+0xd8>
   22d38:	e59f0008 	ldr	r0, [pc, #8]	; 22d48 <CSocket::Connect(CIPAddress&, unsigned short)+0xe0>
   22d3c:	eb0006af 	bl	24800 <assertion_failed>
   22d40:	0004495c 	.word	0x0004495c
   22d44:	00044968 	.word	0x00044968
   22d48:	00043980 	.word	0x00043980

00022d4c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   22d4c:	e16fcf12 	clz	ip, r2
   22d50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22d54:	e590e018 	ldr	lr, [r0, #24]
   22d58:	e1a0c2ac 	lsr	ip, ip, #5
   22d5c:	e24dd010 	sub	sp, sp, #16
   22d60:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   22d64:	e1dd82bc 	ldrh	r8, [sp, #44]	; 0x2c
   22d68:	1a000024 	bne	22e00 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb4>
   22d6c:	e1a04000 	mov	r4, r0
   22d70:	e5900008 	ldr	r0, [r0, #8]
   22d74:	e1a06002 	mov	r6, r2
   22d78:	e3500000 	cmp	r0, #0
   22d7c:	e1a07003 	mov	r7, r3
   22d80:	e1a05001 	mov	r5, r1
   22d84:	0a000015 	beq	22de0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x94>
   22d88:	ebfff7a3 	bl	20c1c <CNetConfig::GetIPAddress() const>
   22d8c:	ebfff8dd 	bl	21108 <CIPAddress::IsNull() const>
   22d90:	e3580000 	cmp	r8, #0
   22d94:	03800001 	orreq	r0, r0, #1
   22d98:	e31000ff 	tst	r0, #255	; 0xff
   22d9c:	1a000017 	bne	22e00 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb4>
   22da0:	e594000c 	ldr	r0, [r4, #12]
   22da4:	e3500000 	cmp	r0, #0
   22da8:	0a000010 	beq	22df0 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xa4>
   22dac:	e3550000 	cmp	r5, #0
   22db0:	0a000014 	beq	22e08 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xbc>
   22db4:	e5943018 	ldr	r3, [r4, #24]
   22db8:	e1a02006 	mov	r2, r6
   22dbc:	e58d3008 	str	r3, [sp, #8]
   22dc0:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   22dc4:	e58d8004 	str	r8, [sp, #4]
   22dc8:	e58d3000 	str	r3, [sp]
   22dcc:	e1a01005 	mov	r1, r5
   22dd0:	e1a03007 	mov	r3, r7
   22dd4:	ebffdd51 	bl	1a320 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>
   22dd8:	e28dd010 	add	sp, sp, #16
   22ddc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22de0:	e59f2030 	ldr	r2, [pc, #48]	; 22e18 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xcc>
   22de4:	e59f1030 	ldr	r1, [pc, #48]	; 22e1c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22de8:	e59f0030 	ldr	r0, [pc, #48]	; 22e20 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd4>
   22dec:	eb000683 	bl	24800 <assertion_failed>
   22df0:	e59f202c 	ldr	r2, [pc, #44]	; 22e24 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd8>
   22df4:	e59f1020 	ldr	r1, [pc, #32]	; 22e1c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22df8:	e59f0028 	ldr	r0, [pc, #40]	; 22e28 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xdc>
   22dfc:	eb00067f 	bl	24800 <assertion_failed>
   22e00:	e3e00000 	mvn	r0, #0
   22e04:	eafffff3 	b	22dd8 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x8c>
   22e08:	e59f201c 	ldr	r2, [pc, #28]	; 22e2c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe0>
   22e0c:	e59f1008 	ldr	r1, [pc, #8]	; 22e1c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xd0>
   22e10:	e59f0018 	ldr	r0, [pc, #24]	; 22e30 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe4>
   22e14:	eb000679 	bl	24800 <assertion_failed>
   22e18:	0000011e 	.word	0x0000011e
   22e1c:	0004495c 	.word	0x0004495c
   22e20:	00043980 	.word	0x00043980
   22e24:	00000129 	.word	0x00000129
   22e28:	00044968 	.word	0x00044968
   22e2c:	0000012a 	.word	0x0000012a
   22e30:	00040b94 	.word	0x00040b94

00022e34 <CSocket::~CSocket()>:
   22e34:	e92d4070 	push	{r4, r5, r6, lr}
   22e38:	e1a04000 	mov	r4, r0
   22e3c:	e590000c 	ldr	r0, [r0, #12]
   22e40:	e59f309c 	ldr	r3, [pc, #156]	; 22ee4 <CSocket::~CSocket()+0xb0>
   22e44:	e3500000 	cmp	r0, #0
   22e48:	e5843000 	str	r3, [r4]
   22e4c:	0a00001c 	beq	22ec4 <CSocket::~CSocket()+0x90>
   22e50:	e5941018 	ldr	r1, [r4, #24]
   22e54:	e594301c 	ldr	r3, [r4, #28]
   22e58:	e3510000 	cmp	r1, #0
   22e5c:	ba00000b 	blt	22e90 <CSocket::~CSocket()+0x5c>
   22e60:	e3530000 	cmp	r3, #0
   22e64:	1a00001a 	bne	22ed4 <CSocket::~CSocket()+0xa0>
   22e68:	ebffdcae 	bl	1a128 <CTransportLayer::Disconnect(int)>
   22e6c:	e3e03000 	mvn	r3, #0
   22e70:	e5843018 	str	r3, [r4, #24]
   22e74:	e3a03000 	mov	r3, #0
   22e78:	e1a00004 	mov	r0, r4
   22e7c:	e584300c 	str	r3, [r4, #12]
   22e80:	e5843008 	str	r3, [r4, #8]
   22e84:	eb00021e 	bl	23704 <CNetSocket::~CNetSocket()>
   22e88:	e1a00004 	mov	r0, r4
   22e8c:	e8bd8070 	pop	{r4, r5, r6, pc}
   22e90:	e3530000 	cmp	r3, #0
   22e94:	0afffff6 	beq	22e74 <CSocket::~CSocket()+0x40>
   22e98:	e284601c 	add	r6, r4, #28
   22e9c:	e3a05000 	mov	r5, #0
   22ea0:	ea000000 	b	22ea8 <CSocket::~CSocket()+0x74>
   22ea4:	e594000c 	ldr	r0, [r4, #12]
   22ea8:	e5b61004 	ldr	r1, [r6, #4]!
   22eac:	ebffdc9d 	bl	1a128 <CTransportLayer::Disconnect(int)>
   22eb0:	e594301c 	ldr	r3, [r4, #28]
   22eb4:	e2855001 	add	r5, r5, #1
   22eb8:	e1530005 	cmp	r3, r5
   22ebc:	8afffff8 	bhi	22ea4 <CSocket::~CSocket()+0x70>
   22ec0:	eaffffeb 	b	22e74 <CSocket::~CSocket()+0x40>
   22ec4:	e3a02036 	mov	r2, #54	; 0x36
   22ec8:	e59f1018 	ldr	r1, [pc, #24]	; 22ee8 <CSocket::~CSocket()+0xb4>
   22ecc:	e59f0018 	ldr	r0, [pc, #24]	; 22eec <CSocket::~CSocket()+0xb8>
   22ed0:	eb00064a 	bl	24800 <assertion_failed>
   22ed4:	e3a0203a 	mov	r2, #58	; 0x3a
   22ed8:	e59f1008 	ldr	r1, [pc, #8]	; 22ee8 <CSocket::~CSocket()+0xb4>
   22edc:	e59f000c 	ldr	r0, [pc, #12]	; 22ef0 <CSocket::~CSocket()+0xbc>
   22ee0:	eb000646 	bl	24800 <assertion_failed>
   22ee4:	00044928 	.word	0x00044928
   22ee8:	0004495c 	.word	0x0004495c
   22eec:	00044968 	.word	0x00044968
   22ef0:	00044980 	.word	0x00044980

00022ef4 <CSocket::~CSocket()>:
   22ef4:	e92d4010 	push	{r4, lr}
   22ef8:	e1a04000 	mov	r4, r0
   22efc:	ebffffcc 	bl	22e34 <CSocket::~CSocket()>
   22f00:	e1a00004 	mov	r0, r4
   22f04:	e3a010a0 	mov	r1, #160	; 0xa0
   22f08:	eb002067 	bl	2b0ac <operator delete(void*, unsigned int)>
   22f0c:	e1a00004 	mov	r0, r4
   22f10:	e8bd8010 	pop	{r4, pc}

00022f14 <CSocket::Listen(unsigned int)>:
   22f14:	e5902010 	ldr	r2, [r0, #16]
   22f18:	e3520006 	cmp	r2, #6
   22f1c:	1a000023 	bne	22fb0 <CSocket::Listen(unsigned int)+0x9c>
   22f20:	e1a03001 	mov	r3, r1
   22f24:	e1d011b4 	ldrh	r1, [r0, #20]
   22f28:	e3510000 	cmp	r1, #0
   22f2c:	0a00001f 	beq	22fb0 <CSocket::Listen(unsigned int)+0x9c>
   22f30:	e590c018 	ldr	ip, [r0, #24]
   22f34:	e35c0000 	cmp	ip, #0
   22f38:	aa00001c 	bge	22fb0 <CSocket::Listen(unsigned int)+0x9c>
   22f3c:	e243c001 	sub	ip, r3, #1
   22f40:	e35c001f 	cmp	ip, #31
   22f44:	8a000019 	bhi	22fb0 <CSocket::Listen(unsigned int)+0x9c>
   22f48:	e92d4070 	push	{r4, r5, r6, lr}
   22f4c:	e590501c 	ldr	r5, [r0, #28]
   22f50:	e1a04000 	mov	r4, r0
   22f54:	e3550000 	cmp	r5, #0
   22f58:	1a000018 	bne	22fc0 <CSocket::Listen(unsigned int)+0xac>
   22f5c:	e590000c 	ldr	r0, [r0, #12]
   22f60:	e584301c 	str	r3, [r4, #28]
   22f64:	e3500000 	cmp	r0, #0
   22f68:	1a000007 	bne	22f8c <CSocket::Listen(unsigned int)+0x78>
   22f6c:	ea000017 	b	22fd0 <CSocket::Listen(unsigned int)+0xbc>
   22f70:	e594301c 	ldr	r3, [r4, #28]
   22f74:	e2855001 	add	r5, r5, #1
   22f78:	e1530005 	cmp	r3, r5
   22f7c:	9a00000d 	bls	22fb8 <CSocket::Listen(unsigned int)+0xa4>
   22f80:	e594000c 	ldr	r0, [r4, #12]
   22f84:	e1d411b4 	ldrh	r1, [r4, #20]
   22f88:	e5942010 	ldr	r2, [r4, #16]
   22f8c:	ebffdbd6 	bl	19eec <CTransportLayer::Listen(unsigned short, int)>
   22f90:	e0843105 	add	r3, r4, r5, lsl #2
   22f94:	e3500000 	cmp	r0, #0
   22f98:	e5830020 	str	r0, [r3, #32]
   22f9c:	aafffff3 	bge	22f70 <CSocket::Listen(unsigned int)+0x5c>
   22fa0:	e3a020a5 	mov	r2, #165	; 0xa5
   22fa4:	e59f1034 	ldr	r1, [pc, #52]	; 22fe0 <CSocket::Listen(unsigned int)+0xcc>
   22fa8:	e59f0034 	ldr	r0, [pc, #52]	; 22fe4 <CSocket::Listen(unsigned int)+0xd0>
   22fac:	eb000613 	bl	24800 <assertion_failed>
   22fb0:	e3e00000 	mvn	r0, #0
   22fb4:	e12fff1e 	bx	lr
   22fb8:	e3a00000 	mov	r0, #0
   22fbc:	e8bd8070 	pop	{r4, r5, r6, pc}
   22fc0:	e3a0209d 	mov	r2, #157	; 0x9d
   22fc4:	e59f1014 	ldr	r1, [pc, #20]	; 22fe0 <CSocket::Listen(unsigned int)+0xcc>
   22fc8:	e59f0018 	ldr	r0, [pc, #24]	; 22fe8 <CSocket::Listen(unsigned int)+0xd4>
   22fcc:	eb00060b 	bl	24800 <assertion_failed>
   22fd0:	e3a020a0 	mov	r2, #160	; 0xa0
   22fd4:	e59f1004 	ldr	r1, [pc, #4]	; 22fe0 <CSocket::Listen(unsigned int)+0xcc>
   22fd8:	e59f000c 	ldr	r0, [pc, #12]	; 22fec <CSocket::Listen(unsigned int)+0xd8>
   22fdc:	eb000607 	bl	24800 <assertion_failed>
   22fe0:	0004495c 	.word	0x0004495c
   22fe4:	00044990 	.word	0x00044990
   22fe8:	00044980 	.word	0x00044980
   22fec:	00044968 	.word	0x00044968

00022ff0 <CSocket::Send(void const*, unsigned int, int)>:
   22ff0:	e16fcf12 	clz	ip, r2
   22ff4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   22ff8:	e590e018 	ldr	lr, [r0, #24]
   22ffc:	e1a0c2ac 	lsr	ip, ip, #5
   23000:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   23004:	e24dd00c 	sub	sp, sp, #12
   23008:	1a000010 	bne	23050 <CSocket::Send(void const*, unsigned int, int)+0x60>
   2300c:	e590000c 	ldr	r0, [r0, #12]
   23010:	e3500000 	cmp	r0, #0
   23014:	0a000005 	beq	23030 <CSocket::Send(void const*, unsigned int, int)+0x40>
   23018:	e3510000 	cmp	r1, #0
   2301c:	0a000007 	beq	23040 <CSocket::Send(void const*, unsigned int, int)+0x50>
   23020:	e58de000 	str	lr, [sp]
   23024:	ebffdc5d 	bl	1a1a0 <CTransportLayer::Send(void const*, unsigned int, int, int)>
   23028:	e28dd00c 	add	sp, sp, #12
   2302c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   23030:	e3a020ed 	mov	r2, #237	; 0xed
   23034:	e59f101c 	ldr	r1, [pc, #28]	; 23058 <CSocket::Send(void const*, unsigned int, int)+0x68>
   23038:	e59f001c 	ldr	r0, [pc, #28]	; 2305c <CSocket::Send(void const*, unsigned int, int)+0x6c>
   2303c:	eb0005ef 	bl	24800 <assertion_failed>
   23040:	e3a020ee 	mov	r2, #238	; 0xee
   23044:	e59f100c 	ldr	r1, [pc, #12]	; 23058 <CSocket::Send(void const*, unsigned int, int)+0x68>
   23048:	e59f0010 	ldr	r0, [pc, #16]	; 23060 <CSocket::Send(void const*, unsigned int, int)+0x70>
   2304c:	eb0005eb 	bl	24800 <assertion_failed>
   23050:	e3e00000 	mvn	r0, #0
   23054:	eafffff3 	b	23028 <CSocket::Send(void const*, unsigned int, int)+0x38>
   23058:	0004495c 	.word	0x0004495c
   2305c:	00044968 	.word	0x00044968
   23060:	00040b94 	.word	0x00040b94

00023064 <CSocket::Receive(void*, unsigned int, int)>:
   23064:	e16fcf12 	clz	ip, r2
   23068:	e92d4070 	push	{r4, r5, r6, lr}
   2306c:	e590e018 	ldr	lr, [r0, #24]
   23070:	e1a0c2ac 	lsr	ip, ip, #5
   23074:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   23078:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   2307c:	1a00001d 	bne	230f8 <CSocket::Receive(void*, unsigned int, int)+0x94>
   23080:	e590000c 	ldr	r0, [r0, #12]
   23084:	e1a05002 	mov	r5, r2
   23088:	e3500000 	cmp	r0, #0
   2308c:	e1a02003 	mov	r2, r3
   23090:	e1a06001 	mov	r6, r1
   23094:	0a00000f 	beq	230d8 <CSocket::Receive(void*, unsigned int, int)+0x74>
   23098:	e1a0300e 	mov	r3, lr
   2309c:	e1a0100d 	mov	r1, sp
   230a0:	ebffdc73 	bl	1a274 <CTransportLayer::Receive(void*, int, int)>
   230a4:	e2504000 	subs	r4, r0, #0
   230a8:	ba000007 	blt	230cc <CSocket::Receive(void*, unsigned int, int)+0x68>
   230ac:	e1540005 	cmp	r4, r5
   230b0:	21a04005 	movcs	r4, r5
   230b4:	e3560000 	cmp	r6, #0
   230b8:	0a00000a 	beq	230e8 <CSocket::Receive(void*, unsigned int, int)+0x84>
   230bc:	e1a0100d 	mov	r1, sp
   230c0:	e1a00006 	mov	r0, r6
   230c4:	e1a02004 	mov	r2, r4
   230c8:	eb001e10 	bl	2a910 <memcpy>
   230cc:	e1a00004 	mov	r0, r4
   230d0:	e28ddd19 	add	sp, sp, #1600	; 0x640
   230d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   230d8:	e3a020fe 	mov	r2, #254	; 0xfe
   230dc:	e59f101c 	ldr	r1, [pc, #28]	; 23100 <CSocket::Receive(void*, unsigned int, int)+0x9c>
   230e0:	e59f001c 	ldr	r0, [pc, #28]	; 23104 <CSocket::Receive(void*, unsigned int, int)+0xa0>
   230e4:	eb0005c5 	bl	24800 <assertion_failed>
   230e8:	e59f2018 	ldr	r2, [pc, #24]	; 23108 <CSocket::Receive(void*, unsigned int, int)+0xa4>
   230ec:	e59f100c 	ldr	r1, [pc, #12]	; 23100 <CSocket::Receive(void*, unsigned int, int)+0x9c>
   230f0:	e59f0014 	ldr	r0, [pc, #20]	; 2310c <CSocket::Receive(void*, unsigned int, int)+0xa8>
   230f4:	eb0005c1 	bl	24800 <assertion_failed>
   230f8:	e3e04000 	mvn	r4, #0
   230fc:	eafffff2 	b	230cc <CSocket::Receive(void*, unsigned int, int)+0x68>
   23100:	0004495c 	.word	0x0004495c
   23104:	00044968 	.word	0x00044968
   23108:	0000010b 	.word	0x0000010b
   2310c:	00040b94 	.word	0x00040b94

00023110 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   23110:	e16fcf12 	clz	ip, r2
   23114:	e92d4070 	push	{r4, r5, r6, lr}
   23118:	e590e018 	ldr	lr, [r0, #24]
   2311c:	e1a0c2ac 	lsr	ip, ip, #5
   23120:	e24ddd19 	sub	sp, sp, #1600	; 0x640
   23124:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   23128:	e24dd008 	sub	sp, sp, #8
   2312c:	1a000021 	bne	231b8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xa8>
   23130:	e590000c 	ldr	r0, [r0, #12]
   23134:	e1a05002 	mov	r5, r2
   23138:	e3500000 	cmp	r0, #0
   2313c:	e1a02003 	mov	r2, r3
   23140:	e1a06001 	mov	r6, r1
   23144:	0a000013 	beq	23198 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x88>
   23148:	e59d365c 	ldr	r3, [sp, #1628]	; 0x65c
   2314c:	e58de004 	str	lr, [sp, #4]
   23150:	e58d3000 	str	r3, [sp]
   23154:	e28d1008 	add	r1, sp, #8
   23158:	e59d3658 	ldr	r3, [sp, #1624]	; 0x658
   2315c:	ebffdca8 	bl	1a404 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>
   23160:	e2504000 	subs	r4, r0, #0
   23164:	ba000007 	blt	23188 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x78>
   23168:	e1540005 	cmp	r4, r5
   2316c:	21a04005 	movcs	r4, r5
   23170:	e3560000 	cmp	r6, #0
   23174:	0a00000b 	beq	231a8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x98>
   23178:	e28d1008 	add	r1, sp, #8
   2317c:	e1a00006 	mov	r0, r6
   23180:	e1a02004 	mov	r2, r4
   23184:	eb001de1 	bl	2a910 <memcpy>
   23188:	e1a00004 	mov	r0, r4
   2318c:	e28ddd19 	add	sp, sp, #1600	; 0x640
   23190:	e28dd008 	add	sp, sp, #8
   23194:	e8bd8070 	pop	{r4, r5, r6, pc}
   23198:	e59f2020 	ldr	r2, [pc, #32]	; 231c0 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb0>
   2319c:	e59f1020 	ldr	r1, [pc, #32]	; 231c4 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb4>
   231a0:	e59f0020 	ldr	r0, [pc, #32]	; 231c8 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb8>
   231a4:	eb000595 	bl	24800 <assertion_failed>
   231a8:	e59f201c 	ldr	r2, [pc, #28]	; 231cc <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xbc>
   231ac:	e59f1010 	ldr	r1, [pc, #16]	; 231c4 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xb4>
   231b0:	e59f0018 	ldr	r0, [pc, #24]	; 231d0 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xc0>
   231b4:	eb000591 	bl	24800 <assertion_failed>
   231b8:	e3e04000 	mvn	r4, #0
   231bc:	eafffff1 	b	23188 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x78>
   231c0:	0000013b 	.word	0x0000013b
   231c4:	0004495c 	.word	0x0004495c
   231c8:	00044968 	.word	0x00044968
   231cc:	00000149 	.word	0x00000149
   231d0:	00040b94 	.word	0x00040b94

000231d4 <CSocket::SetOptionBroadcast(bool)>:
   231d4:	e5902018 	ldr	r2, [r0, #24]
   231d8:	e3520000 	cmp	r2, #0
   231dc:	ba00000d 	blt	23218 <CSocket::SetOptionBroadcast(bool)+0x44>
   231e0:	e5903010 	ldr	r3, [r0, #16]
   231e4:	e3530011 	cmp	r3, #17
   231e8:	0a000001 	beq	231f4 <CSocket::SetOptionBroadcast(bool)+0x20>
   231ec:	e3a00000 	mov	r0, #0
   231f0:	e12fff1e 	bx	lr
   231f4:	e590000c 	ldr	r0, [r0, #12]
   231f8:	e3500000 	cmp	r0, #0
   231fc:	0a000000 	beq	23204 <CSocket::SetOptionBroadcast(bool)+0x30>
   23200:	eaffdcaf 	b	1a4c4 <CTransportLayer::SetOptionBroadcast(bool, int)>
   23204:	e92d4010 	push	{r4, lr}
   23208:	e59f2010 	ldr	r2, [pc, #16]	; 23220 <CSocket::SetOptionBroadcast(bool)+0x4c>
   2320c:	e59f1010 	ldr	r1, [pc, #16]	; 23224 <CSocket::SetOptionBroadcast(bool)+0x50>
   23210:	e59f0010 	ldr	r0, [pc, #16]	; 23228 <CSocket::SetOptionBroadcast(bool)+0x54>
   23214:	eb000579 	bl	24800 <assertion_failed>
   23218:	e3e00000 	mvn	r0, #0
   2321c:	e12fff1e 	bx	lr
   23220:	0000015b 	.word	0x0000015b
   23224:	0004495c 	.word	0x0004495c
   23228:	00044968 	.word	0x00044968

0002322c <CSocket::GetForeignIP() const>:
   2322c:	e5901018 	ldr	r1, [r0, #24]
   23230:	e3510000 	cmp	r1, #0
   23234:	ba000008 	blt	2325c <CSocket::GetForeignIP() const+0x30>
   23238:	e590000c 	ldr	r0, [r0, #12]
   2323c:	e3500000 	cmp	r0, #0
   23240:	0a000000 	beq	23248 <CSocket::GetForeignIP() const+0x1c>
   23244:	eaffdcdc 	b	1a5bc <CTransportLayer::GetForeignIP(int) const>
   23248:	e92d4010 	push	{r4, lr}
   2324c:	e59f2010 	ldr	r2, [pc, #16]	; 23264 <CSocket::GetForeignIP() const+0x38>
   23250:	e59f1010 	ldr	r1, [pc, #16]	; 23268 <CSocket::GetForeignIP() const+0x3c>
   23254:	e59f0010 	ldr	r0, [pc, #16]	; 2326c <CSocket::GetForeignIP() const+0x40>
   23258:	eb000568 	bl	24800 <assertion_failed>
   2325c:	e3a00000 	mov	r0, #0
   23260:	e12fff1e 	bx	lr
   23264:	00000166 	.word	0x00000166
   23268:	0004495c 	.word	0x0004495c
   2326c:	00044968 	.word	0x00044968

00023270 <CSocket::CSocket(CNetSubSystem*, int)>:
   23270:	e92d4070 	push	{r4, r5, r6, lr}
   23274:	e1a04000 	mov	r4, r0
   23278:	e1a05001 	mov	r5, r1
   2327c:	e1a06002 	mov	r6, r2
   23280:	eb000111 	bl	236cc <CNetSocket::CNetSocket(CNetSubSystem*)>
   23284:	e59f306c 	ldr	r3, [pc, #108]	; 232f8 <CSocket::CSocket(CNetSubSystem*, int)+0x88>
   23288:	e1a00005 	mov	r0, r5
   2328c:	e5843000 	str	r3, [r4]
   23290:	ebffd939 	bl	1977c <CNetSubSystem::GetConfig()>
   23294:	e5840008 	str	r0, [r4, #8]
   23298:	e1a00005 	mov	r0, r5
   2329c:	ebffd93c 	bl	19794 <CNetSubSystem::GetTransportLayer()>
   232a0:	e3a03000 	mov	r3, #0
   232a4:	e3e01000 	mvn	r1, #0
   232a8:	e594c008 	ldr	ip, [r4, #8]
   232ac:	e5846010 	str	r6, [r4, #16]
   232b0:	e15c0003 	cmp	ip, r3
   232b4:	e584000c 	str	r0, [r4, #12]
   232b8:	e5841018 	str	r1, [r4, #24]
   232bc:	e1c431b4 	strh	r3, [r4, #20]
   232c0:	e584301c 	str	r3, [r4, #28]
   232c4:	0a000003 	beq	232d8 <CSocket::CSocket(CNetSubSystem*, int)+0x68>
   232c8:	e3500000 	cmp	r0, #0
   232cc:	0a000005 	beq	232e8 <CSocket::CSocket(CNetSubSystem*, int)+0x78>
   232d0:	e1a00004 	mov	r0, r4
   232d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   232d8:	e3a02023 	mov	r2, #35	; 0x23
   232dc:	e59f1018 	ldr	r1, [pc, #24]	; 232fc <CSocket::CSocket(CNetSubSystem*, int)+0x8c>
   232e0:	e59f0018 	ldr	r0, [pc, #24]	; 23300 <CSocket::CSocket(CNetSubSystem*, int)+0x90>
   232e4:	eb000545 	bl	24800 <assertion_failed>
   232e8:	e3a02024 	mov	r2, #36	; 0x24
   232ec:	e59f1008 	ldr	r1, [pc, #8]	; 232fc <CSocket::CSocket(CNetSubSystem*, int)+0x8c>
   232f0:	e59f000c 	ldr	r0, [pc, #12]	; 23304 <CSocket::CSocket(CNetSubSystem*, int)+0x94>
   232f4:	eb000541 	bl	24800 <assertion_failed>
   232f8:	00044928 	.word	0x00044928
   232fc:	0004495c 	.word	0x0004495c
   23300:	00043980 	.word	0x00043980
   23304:	00044968 	.word	0x00044968

00023308 <CSocket::CSocket(CSocket&, int)>:
   23308:	e92d4070 	push	{r4, r5, r6, lr}
   2330c:	e1a04000 	mov	r4, r0
   23310:	e1a00001 	mov	r0, r1
   23314:	e1a05001 	mov	r5, r1
   23318:	e1a06002 	mov	r6, r2
   2331c:	eb0000ff 	bl	23720 <CNetSocket::GetNetSubSystem()>
   23320:	e1a01000 	mov	r1, r0
   23324:	e1a00004 	mov	r0, r4
   23328:	eb0000e7 	bl	236cc <CNetSocket::CNetSocket(CNetSubSystem*)>
   2332c:	e3a00000 	mov	r0, #0
   23330:	e5953008 	ldr	r3, [r5, #8]
   23334:	e595100c 	ldr	r1, [r5, #12]
   23338:	e595c010 	ldr	ip, [r5, #16]
   2333c:	e1d521b4 	ldrh	r2, [r5, #20]
   23340:	e59fe050 	ldr	lr, [pc, #80]	; 23398 <CSocket::CSocket(CSocket&, int)+0x90>
   23344:	e1530000 	cmp	r3, r0
   23348:	e584e000 	str	lr, [r4]
   2334c:	e5843008 	str	r3, [r4, #8]
   23350:	e584100c 	str	r1, [r4, #12]
   23354:	e584c010 	str	ip, [r4, #16]
   23358:	e1c421b4 	strh	r2, [r4, #20]
   2335c:	e5846018 	str	r6, [r4, #24]
   23360:	e584001c 	str	r0, [r4, #28]
   23364:	0a000003 	beq	23378 <CSocket::CSocket(CSocket&, int)+0x70>
   23368:	e3510000 	cmp	r1, #0
   2336c:	0a000005 	beq	23388 <CSocket::CSocket(CSocket&, int)+0x80>
   23370:	e1a00004 	mov	r0, r4
   23374:	e8bd8070 	pop	{r4, r5, r6, pc}
   23378:	e3a02030 	mov	r2, #48	; 0x30
   2337c:	e59f1018 	ldr	r1, [pc, #24]	; 2339c <CSocket::CSocket(CSocket&, int)+0x94>
   23380:	e59f0018 	ldr	r0, [pc, #24]	; 233a0 <CSocket::CSocket(CSocket&, int)+0x98>
   23384:	eb00051d 	bl	24800 <assertion_failed>
   23388:	e3a02031 	mov	r2, #49	; 0x31
   2338c:	e59f1008 	ldr	r1, [pc, #8]	; 2339c <CSocket::CSocket(CSocket&, int)+0x94>
   23390:	e59f000c 	ldr	r0, [pc, #12]	; 233a4 <CSocket::CSocket(CSocket&, int)+0x9c>
   23394:	eb000519 	bl	24800 <assertion_failed>
   23398:	00044928 	.word	0x00044928
   2339c:	0004495c 	.word	0x0004495c
   233a0:	00043980 	.word	0x00043980
   233a4:	00044968 	.word	0x00044968

000233a8 <CSocket::Accept(CIPAddress*, unsigned short*)>:
   233a8:	e590301c 	ldr	r3, [r0, #28]
   233ac:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   233b0:	e3530000 	cmp	r3, #0
   233b4:	0a000048 	beq	234dc <CSocket::Accept(CIPAddress*, unsigned short*)+0x134>
   233b8:	e1d041b4 	ldrh	r4, [r0, #20]
   233bc:	e3540000 	cmp	r4, #0
   233c0:	0a00003f 	beq	234c4 <CSocket::Accept(CIPAddress*, unsigned short*)+0x11c>
   233c4:	e1a06000 	mov	r6, r0
   233c8:	e590000c 	ldr	r0, [r0, #12]
   233cc:	e1a0a002 	mov	sl, r2
   233d0:	e3500000 	cmp	r0, #0
   233d4:	e1a09001 	mov	r9, r1
   233d8:	0a000042 	beq	234e8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x140>
   233dc:	e3530020 	cmp	r3, #32
   233e0:	8a000044 	bhi	234f8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x150>
   233e4:	e3a08020 	mov	r8, #32
   233e8:	e3e05102 	mvn	r5, #-2147483648	; 0x80000000
   233ec:	e3a04000 	mov	r4, #0
   233f0:	e286701c 	add	r7, r6, #28
   233f4:	ea000008 	b	2341c <CSocket::Accept(CIPAddress*, unsigned short*)+0x74>
   233f8:	e5b73004 	ldr	r3, [r7, #4]!
   233fc:	e596201c 	ldr	r2, [r6, #28]
   23400:	e1530005 	cmp	r3, r5
   23404:	b1a08004 	movlt	r8, r4
   23408:	e2844001 	add	r4, r4, #1
   2340c:	b1a05003 	movlt	r5, r3
   23410:	e1520004 	cmp	r2, r4
   23414:	9a000007 	bls	23438 <CSocket::Accept(CIPAddress*, unsigned short*)+0x90>
   23418:	e596000c 	ldr	r0, [r6, #12]
   2341c:	e5971004 	ldr	r1, [r7, #4]
   23420:	ebffdc48 	bl	1a548 <CTransportLayer::IsConnected(int) const>
   23424:	e3500000 	cmp	r0, #0
   23428:	0afffff2 	beq	233f8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x50>
   2342c:	e1a08004 	mov	r8, r4
   23430:	e2843008 	add	r3, r4, #8
   23434:	e7965103 	ldr	r5, [r6, r3, lsl #2]
   23438:	e1e03005 	mvn	r3, r5
   2343c:	e3750106 	cmn	r5, #-2147483647	; 0x80000001
   23440:	e1a03fa3 	lsr	r3, r3, #31
   23444:	03a03000 	moveq	r3, #0
   23448:	e3530000 	cmp	r3, #0
   2344c:	0a00002d 	beq	23508 <CSocket::Accept(CIPAddress*, unsigned short*)+0x160>
   23450:	e596301c 	ldr	r3, [r6, #28]
   23454:	e1530008 	cmp	r3, r8
   23458:	9a00002e 	bls	23518 <CSocket::Accept(CIPAddress*, unsigned short*)+0x170>
   2345c:	e3590000 	cmp	r9, #0
   23460:	0a000019 	beq	234cc <CSocket::Accept(CIPAddress*, unsigned short*)+0x124>
   23464:	e35a0000 	cmp	sl, #0
   23468:	0a000032 	beq	23538 <CSocket::Accept(CIPAddress*, unsigned short*)+0x190>
   2346c:	e1a0200a 	mov	r2, sl
   23470:	e1a01009 	mov	r1, r9
   23474:	e1a03005 	mov	r3, r5
   23478:	e596000c 	ldr	r0, [r6, #12]
   2347c:	ebffdaf6 	bl	1a05c <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>
   23480:	e3500000 	cmp	r0, #0
   23484:	b3a04000 	movlt	r4, #0
   23488:	ba000005 	blt	234a4 <CSocket::Accept(CIPAddress*, unsigned short*)+0xfc>
   2348c:	e3a000a0 	mov	r0, #160	; 0xa0
   23490:	eb001ef7 	bl	2b074 <operator new(unsigned int)>
   23494:	e1a02005 	mov	r2, r5
   23498:	e1a01006 	mov	r1, r6
   2349c:	e1a04000 	mov	r4, r0
   234a0:	ebffff98 	bl	23308 <CSocket::CSocket(CSocket&, int)>
   234a4:	e5962010 	ldr	r2, [r6, #16]
   234a8:	e1d611b4 	ldrh	r1, [r6, #20]
   234ac:	e596000c 	ldr	r0, [r6, #12]
   234b0:	ebffda8d 	bl	19eec <CTransportLayer::Listen(unsigned short, int)>
   234b4:	e2888008 	add	r8, r8, #8
   234b8:	e3500000 	cmp	r0, #0
   234bc:	e7860108 	str	r0, [r6, r8, lsl #2]
   234c0:	ba000018 	blt	23528 <CSocket::Accept(CIPAddress*, unsigned short*)+0x180>
   234c4:	e1a00004 	mov	r0, r4
   234c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   234cc:	e3a020d0 	mov	r2, #208	; 0xd0
   234d0:	e59f1070 	ldr	r1, [pc, #112]	; 23548 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   234d4:	e59f0070 	ldr	r0, [pc, #112]	; 2354c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a4>
   234d8:	eb0004c8 	bl	24800 <assertion_failed>
   234dc:	e1a04003 	mov	r4, r3
   234e0:	e1a00004 	mov	r0, r4
   234e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   234e8:	e3a020b3 	mov	r2, #179	; 0xb3
   234ec:	e59f1054 	ldr	r1, [pc, #84]	; 23548 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   234f0:	e59f0058 	ldr	r0, [pc, #88]	; 23550 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a8>
   234f4:	eb0004c1 	bl	24800 <assertion_failed>
   234f8:	e3a020b4 	mov	r2, #180	; 0xb4
   234fc:	e59f1044 	ldr	r1, [pc, #68]	; 23548 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   23500:	e59f004c 	ldr	r0, [pc, #76]	; 23554 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1ac>
   23504:	eb0004bd 	bl	24800 <assertion_failed>
   23508:	e3a020cb 	mov	r2, #203	; 0xcb
   2350c:	e59f1034 	ldr	r1, [pc, #52]	; 23548 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   23510:	e59f0040 	ldr	r0, [pc, #64]	; 23558 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1b0>
   23514:	eb0004b9 	bl	24800 <assertion_failed>
   23518:	e3a020cc 	mov	r2, #204	; 0xcc
   2351c:	e59f1024 	ldr	r1, [pc, #36]	; 23548 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   23520:	e59f0034 	ldr	r0, [pc, #52]	; 2355c <CSocket::Accept(CIPAddress*, unsigned short*)+0x1b4>
   23524:	eb0004b5 	bl	24800 <assertion_failed>
   23528:	e3a020dc 	mov	r2, #220	; 0xdc
   2352c:	e59f1014 	ldr	r1, [pc, #20]	; 23548 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   23530:	e59f0028 	ldr	r0, [pc, #40]	; 23560 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1b8>
   23534:	eb0004b1 	bl	24800 <assertion_failed>
   23538:	e3a020d1 	mov	r2, #209	; 0xd1
   2353c:	e59f1004 	ldr	r1, [pc, #4]	; 23548 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a0>
   23540:	e59f001c 	ldr	r0, [pc, #28]	; 23564 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1bc>
   23544:	eb0004ad 	bl	24800 <assertion_failed>
   23548:	0004495c 	.word	0x0004495c
   2354c:	000439d8 	.word	0x000439d8
   23550:	00044968 	.word	0x00044968
   23554:	00044a10 	.word	0x00044a10
   23558:	000449ac 	.word	0x000449ac
   2355c:	000449d8 	.word	0x000449d8
   23560:	000449ec 	.word	0x000449ec
   23564:	000439e8 	.word	0x000439e8

00023568 <CNetSocket::Connect(char const*, char const*)>:
   23568:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2356c:	e2516000 	subs	r6, r1, #0
   23570:	e24dd01c 	sub	sp, sp, #28
   23574:	0a000038 	beq	2365c <CNetSocket::Connect(char const*, char const*)+0xf4>
   23578:	e3520000 	cmp	r2, #0
   2357c:	e1a05002 	mov	r5, r2
   23580:	0a000039 	beq	2366c <CNetSocket::Connect(char const*, char const*)+0x104>
   23584:	e3a03000 	mov	r3, #0
   23588:	e28d1018 	add	r1, sp, #24
   2358c:	e5213010 	str	r3, [r1, #-16]!
   23590:	e1a04000 	mov	r4, r0
   23594:	e3a0200a 	mov	r2, #10
   23598:	e1a00005 	mov	r0, r5
   2359c:	eb001c03 	bl	2a5b0 <strtoul>
   235a0:	e59d3008 	ldr	r3, [sp, #8]
   235a4:	e1a07000 	mov	r7, r0
   235a8:	e3530000 	cmp	r3, #0
   235ac:	0a000002 	beq	235bc <CNetSocket::Connect(char const*, char const*)+0x54>
   235b0:	e1d330d0 	ldrsb	r3, [r3]
   235b4:	e3530000 	cmp	r3, #0
   235b8:	1a000033 	bne	2368c <CNetSocket::Connect(char const*, char const*)+0x124>
   235bc:	e59f30e8 	ldr	r3, [pc, #232]	; 236ac <CNetSocket::Connect(char const*, char const*)+0x144>
   235c0:	e2472001 	sub	r2, r7, #1
   235c4:	e1520003 	cmp	r2, r3
   235c8:	8a00002f 	bhi	2368c <CNetSocket::Connect(char const*, char const*)+0x124>
   235cc:	e5943004 	ldr	r3, [r4, #4]
   235d0:	e3530000 	cmp	r3, #0
   235d4:	0a000028 	beq	2367c <CNetSocket::Connect(char const*, char const*)+0x114>
   235d8:	e28d0010 	add	r0, sp, #16
   235dc:	ebfff5ea 	bl	20d8c <CIPAddress::CIPAddress()>
   235e0:	e5941004 	ldr	r1, [r4, #4]
   235e4:	e28d000c 	add	r0, sp, #12
   235e8:	eb000063 	bl	2377c <CDNSClient::CDNSClient(CNetSubSystem*)>
   235ec:	e28d2010 	add	r2, sp, #16
   235f0:	e1a01006 	mov	r1, r6
   235f4:	e28d000c 	add	r0, sp, #12
   235f8:	eb0000b3 	bl	238cc <CDNSClient::Resolve(char const*, CIPAddress*)>
   235fc:	e3500000 	cmp	r0, #0
   23600:	0a00000d 	beq	2363c <CNetSocket::Connect(char const*, char const*)+0xd4>
   23604:	e5943000 	ldr	r3, [r4]
   23608:	e1a00004 	mov	r0, r4
   2360c:	e6ff2077 	uxth	r2, r7
   23610:	e593300c 	ldr	r3, [r3, #12]
   23614:	e28d1010 	add	r1, sp, #16
   23618:	e12fff33 	blx	r3
   2361c:	e1a04000 	mov	r4, r0
   23620:	e28d000c 	add	r0, sp, #12
   23624:	eb00005f 	bl	237a8 <CDNSClient::~CDNSClient()>
   23628:	e28d0010 	add	r0, sp, #16
   2362c:	ebfff5ec 	bl	20de4 <CIPAddress::~CIPAddress()>
   23630:	e1a00004 	mov	r0, r4
   23634:	e28dd01c 	add	sp, sp, #28
   23638:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2363c:	eb000d62 	bl	26bcc <CLogger::Get()>
   23640:	e58d6000 	str	r6, [sp]
   23644:	e59f3064 	ldr	r3, [pc, #100]	; 236b0 <CNetSocket::Connect(char const*, char const*)+0x148>
   23648:	e3a02004 	mov	r2, #4
   2364c:	e59f1060 	ldr	r1, [pc, #96]	; 236b4 <CNetSocket::Connect(char const*, char const*)+0x14c>
   23650:	eb000c9a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23654:	e3e04000 	mvn	r4, #0
   23658:	eafffff0 	b	23620 <CNetSocket::Connect(char const*, char const*)+0xb8>
   2365c:	e3a0202a 	mov	r2, #42	; 0x2a
   23660:	e59f1050 	ldr	r1, [pc, #80]	; 236b8 <CNetSocket::Connect(char const*, char const*)+0x150>
   23664:	e59f0050 	ldr	r0, [pc, #80]	; 236bc <CNetSocket::Connect(char const*, char const*)+0x154>
   23668:	eb000464 	bl	24800 <assertion_failed>
   2366c:	e3a0202b 	mov	r2, #43	; 0x2b
   23670:	e59f1040 	ldr	r1, [pc, #64]	; 236b8 <CNetSocket::Connect(char const*, char const*)+0x150>
   23674:	e59f0044 	ldr	r0, [pc, #68]	; 236c0 <CNetSocket::Connect(char const*, char const*)+0x158>
   23678:	eb000460 	bl	24800 <assertion_failed>
   2367c:	e3a02037 	mov	r2, #55	; 0x37
   23680:	e59f1030 	ldr	r1, [pc, #48]	; 236b8 <CNetSocket::Connect(char const*, char const*)+0x150>
   23684:	e59f0038 	ldr	r0, [pc, #56]	; 236c4 <CNetSocket::Connect(char const*, char const*)+0x15c>
   23688:	eb00045c 	bl	24800 <assertion_failed>
   2368c:	eb000d4e 	bl	26bcc <CLogger::Get()>
   23690:	e58d5000 	str	r5, [sp]
   23694:	e59f302c 	ldr	r3, [pc, #44]	; 236c8 <CNetSocket::Connect(char const*, char const*)+0x160>
   23698:	e3a02004 	mov	r2, #4
   2369c:	e59f1010 	ldr	r1, [pc, #16]	; 236b4 <CNetSocket::Connect(char const*, char const*)+0x14c>
   236a0:	eb000c86 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   236a4:	e3e04000 	mvn	r4, #0
   236a8:	eaffffe0 	b	23630 <CNetSocket::Connect(char const*, char const*)+0xc8>
   236ac:	0000fffe 	.word	0x0000fffe
   236b0:	00044ab4 	.word	0x00044ab4
   236b4:	00044a38 	.word	0x00044a38
   236b8:	00044a80 	.word	0x00044a80
   236bc:	00040ba4 	.word	0x00040ba4
   236c0:	00044a90 	.word	0x00044a90
   236c4:	00043954 	.word	0x00043954
   236c8:	00044a9c 	.word	0x00044a9c

000236cc <CNetSocket::CNetSocket(CNetSubSystem*)>:
   236cc:	e59f2024 	ldr	r2, [pc, #36]	; 236f8 <CNetSocket::CNetSocket(CNetSubSystem*)+0x2c>
   236d0:	e3510000 	cmp	r1, #0
   236d4:	e5801004 	str	r1, [r0, #4]
   236d8:	e5802000 	str	r2, [r0]
   236dc:	0a000000 	beq	236e4 <CNetSocket::CNetSocket(CNetSubSystem*)+0x18>
   236e0:	e12fff1e 	bx	lr
   236e4:	e92d4010 	push	{r4, lr}
   236e8:	e3a02020 	mov	r2, #32
   236ec:	e59f1008 	ldr	r1, [pc, #8]	; 236fc <CNetSocket::CNetSocket(CNetSubSystem*)+0x30>
   236f0:	e59f0008 	ldr	r0, [pc, #8]	; 23700 <CNetSocket::CNetSocket(CNetSubSystem*)+0x34>
   236f4:	eb000441 	bl	24800 <assertion_failed>
   236f8:	00044a4c 	.word	0x00044a4c
   236fc:	00044a80 	.word	0x00044a80
   23700:	00043954 	.word	0x00043954

00023704 <CNetSocket::~CNetSocket()>:
   23704:	e12fff1e 	bx	lr

00023708 <CNetSocket::~CNetSocket()>:
   23708:	e92d4010 	push	{r4, lr}
   2370c:	e1a04000 	mov	r4, r0
   23710:	e3a01008 	mov	r1, #8
   23714:	eb001e64 	bl	2b0ac <operator delete(void*, unsigned int)>
   23718:	e1a00004 	mov	r0, r4
   2371c:	e8bd8010 	pop	{r4, pc}

00023720 <CNetSocket::GetNetSubSystem()>:
   23720:	e5900004 	ldr	r0, [r0, #4]
   23724:	e3500000 	cmp	r0, #0
   23728:	0a000000 	beq	23730 <CNetSocket::GetNetSubSystem()+0x10>
   2372c:	e12fff1e 	bx	lr
   23730:	e92d4010 	push	{r4, lr}
   23734:	e3a02046 	mov	r2, #70	; 0x46
   23738:	e59f1004 	ldr	r1, [pc, #4]	; 23744 <CNetSocket::GetNetSubSystem()+0x24>
   2373c:	e59f0004 	ldr	r0, [pc, #4]	; 23748 <CNetSocket::GetNetSubSystem()+0x28>
   23740:	eb00042e 	bl	24800 <assertion_failed>
   23744:	00044a80 	.word	0x00044a80
   23748:	00043954 	.word	0x00043954

0002374c <CNetSocket::Bind(unsigned short)>:
   2374c:	e3e00000 	mvn	r0, #0
   23750:	e12fff1e 	bx	lr

00023754 <CNetSocket::Listen(unsigned int)>:
   23754:	e3e00000 	mvn	r0, #0
   23758:	e12fff1e 	bx	lr

0002375c <CNetSocket::Accept(CIPAddress*, unsigned short*)>:
   2375c:	e3a00000 	mov	r0, #0
   23760:	e12fff1e 	bx	lr

00023764 <CNetSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   23764:	e3e00000 	mvn	r0, #0
   23768:	e12fff1e 	bx	lr

0002376c <CNetSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   2376c:	e3e00000 	mvn	r0, #0
   23770:	e12fff1e 	bx	lr

00023774 <CNetSocket::SetOptionBroadcast(bool)>:
   23774:	e3e00000 	mvn	r0, #0
   23778:	e12fff1e 	bx	lr

0002377c <CDNSClient::CDNSClient(CNetSubSystem*)>:
   2377c:	e3510000 	cmp	r1, #0
   23780:	e5801000 	str	r1, [r0]
   23784:	0a000000 	beq	2378c <CDNSClient::CDNSClient(CNetSubSystem*)+0x10>
   23788:	e12fff1e 	bx	lr
   2378c:	e92d4010 	push	{r4, lr}
   23790:	e3a02056 	mov	r2, #86	; 0x56
   23794:	e59f1004 	ldr	r1, [pc, #4]	; 237a0 <CDNSClient::CDNSClient(CNetSubSystem*)+0x24>
   23798:	e59f0004 	ldr	r0, [pc, #4]	; 237a4 <CDNSClient::CDNSClient(CNetSubSystem*)+0x28>
   2379c:	eb000417 	bl	24800 <assertion_failed>
   237a0:	00044ac8 	.word	0x00044ac8
   237a4:	00043954 	.word	0x00043954

000237a8 <CDNSClient::~CDNSClient()>:
   237a8:	e12fff1e 	bx	lr

000237ac <CDNSClient::ConvertIPString(char const*, CIPAddress*)>:
   237ac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   237b0:	e3a04000 	mov	r4, #0
   237b4:	e1a00001 	mov	r0, r1
   237b8:	e1a05004 	mov	r5, r4
   237bc:	e24dd00c 	sub	sp, sp, #12
   237c0:	e3500000 	cmp	r0, #0
   237c4:	e1a07002 	mov	r7, r2
   237c8:	e3a0600a 	mov	r6, #10
   237cc:	e58d5004 	str	r5, [sp, #4]
   237d0:	0a000013 	beq	23824 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x78>
   237d4:	e1a02006 	mov	r2, r6
   237d8:	e28d1004 	add	r1, sp, #4
   237dc:	eb001b73 	bl	2a5b0 <strtoul>
   237e0:	e3540003 	cmp	r4, #3
   237e4:	e1a03000 	mov	r3, r0
   237e8:	0a000014 	beq	23840 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x94>
   237ec:	e59d0004 	ldr	r0, [sp, #4]
   237f0:	e3500000 	cmp	r0, #0
   237f4:	0a00000e 	beq	23834 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   237f8:	e1d020d0 	ldrsb	r2, [r0]
   237fc:	e352002e 	cmp	r2, #46	; 0x2e
   23800:	1a00000b 	bne	23834 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   23804:	e35300ff 	cmp	r3, #255	; 0xff
   23808:	8a000009 	bhi	23834 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   2380c:	e2800001 	add	r0, r0, #1
   23810:	e3500000 	cmp	r0, #0
   23814:	e7cd3004 	strb	r3, [sp, r4]
   23818:	e58d5004 	str	r5, [sp, #4]
   2381c:	e2844001 	add	r4, r4, #1
   23820:	1affffeb 	bne	237d4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x28>
   23824:	e59f2084 	ldr	r2, [pc, #132]	; 238b0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x104>
   23828:	e59f1084 	ldr	r1, [pc, #132]	; 238b4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   2382c:	e59f0084 	ldr	r0, [pc, #132]	; 238b8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x10c>
   23830:	eb0003f2 	bl	24800 <assertion_failed>
   23834:	e3a00000 	mov	r0, #0
   23838:	e28dd00c 	add	sp, sp, #12
   2383c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   23840:	e59d2004 	ldr	r2, [sp, #4]
   23844:	e3520000 	cmp	r2, #0
   23848:	0a000011 	beq	23894 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xe8>
   2384c:	e1d220d0 	ldrsb	r2, [r2]
   23850:	e3520000 	cmp	r2, #0
   23854:	1afffff6 	bne	23834 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   23858:	e35000ff 	cmp	r0, #255	; 0xff
   2385c:	8afffff4 	bhi	23834 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   23860:	e3570000 	cmp	r7, #0
   23864:	e5cd3003 	strb	r3, [sp, #3]
   23868:	0a000005 	beq	23884 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xd8>
   2386c:	e1a00007 	mov	r0, r7
   23870:	e1a0100d 	mov	r1, sp
   23874:	ebfff5cb 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   23878:	e3a00001 	mov	r0, #1
   2387c:	e28dd00c 	add	sp, sp, #12
   23880:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   23884:	e59f2030 	ldr	r2, [pc, #48]	; 238bc <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x110>
   23888:	e59f1024 	ldr	r1, [pc, #36]	; 238b4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   2388c:	e59f002c 	ldr	r0, [pc, #44]	; 238c0 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x114>
   23890:	eb0003da 	bl	24800 <assertion_failed>
   23894:	e35000ff 	cmp	r0, #255	; 0xff
   23898:	8affffe5 	bhi	23834 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x88>
   2389c:	e59f2020 	ldr	r2, [pc, #32]	; 238c4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x118>
   238a0:	e59f100c 	ldr	r1, [pc, #12]	; 238b4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x108>
   238a4:	e59f001c 	ldr	r0, [pc, #28]	; 238c8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x11c>
   238a8:	e5cd3003 	strb	r3, [sp, #3]
   238ac:	eb0003d3 	bl	24800 <assertion_failed>
   238b0:	0000011a 	.word	0x0000011a
   238b4:	00044ac8 	.word	0x00044ac8
   238b8:	00044ad8 	.word	0x00044ad8
   238bc:	00000139 	.word	0x00000139
   238c0:	00044ae8 	.word	0x00044ae8
   238c4:	00000135 	.word	0x00000135
   238c8:	00044af8 	.word	0x00044af8

000238cc <CDNSClient::Resolve(char const*, CIPAddress*)>:
   238cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238d0:	e24ddd17 	sub	sp, sp, #1472	; 0x5c0
   238d4:	e24dd00c 	sub	sp, sp, #12
   238d8:	e2518000 	subs	r8, r1, #0
   238dc:	e58d2000 	str	r2, [sp]
   238e0:	0a000063 	beq	23a74 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1a8>
   238e4:	e5d83000 	ldrb	r3, [r8]
   238e8:	e1a04000 	mov	r4, r0
   238ec:	e2433031 	sub	r3, r3, #49	; 0x31
   238f0:	e3530008 	cmp	r3, #8
   238f4:	9a000057 	bls	23a58 <CDNSClient::Resolve(char const*, CIPAddress*)+0x18c>
   238f8:	e5940000 	ldr	r0, [r4]
   238fc:	e3500000 	cmp	r0, #0
   23900:	0a00005f 	beq	23a84 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1b8>
   23904:	ebffd79c 	bl	1977c <CNetSubSystem::GetConfig()>
   23908:	ebfff4cb 	bl	20c3c <CNetConfig::GetDNSServer() const>
   2390c:	ebfff5da 	bl	2107c <CIPAddress::Get() const>
   23910:	e1a01000 	mov	r1, r0
   23914:	e28d0010 	add	r0, sp, #16
   23918:	ebfff5b2 	bl	20fe8 <CIPAddress::CIPAddress(unsigned char const*)>
   2391c:	e28d0010 	add	r0, sp, #16
   23920:	ebfff5f8 	bl	21108 <CIPAddress::IsNull() const>
   23924:	e2505000 	subs	r5, r0, #0
   23928:	0a000006 	beq	23948 <CDNSClient::Resolve(char const*, CIPAddress*)+0x7c>
   2392c:	e3a05000 	mov	r5, #0
   23930:	e28d0010 	add	r0, sp, #16
   23934:	ebfff52a 	bl	20de4 <CIPAddress::~CIPAddress()>
   23938:	e1a00005 	mov	r0, r5
   2393c:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   23940:	e28dd00c 	add	sp, sp, #12
   23944:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23948:	e5941000 	ldr	r1, [r4]
   2394c:	e3a02011 	mov	r2, #17
   23950:	e28d0028 	add	r0, sp, #40	; 0x28
   23954:	ebfffe45 	bl	23270 <CSocket::CSocket(CNetSubSystem*, int)>
   23958:	e28d0028 	add	r0, sp, #40	; 0x28
   2395c:	e3a02035 	mov	r2, #53	; 0x35
   23960:	e28d1010 	add	r1, sp, #16
   23964:	ebfffcbf 	bl	22c68 <CSocket::Connect(CIPAddress&, unsigned short)>
   23968:	e3500000 	cmp	r0, #0
   2396c:	1a000036 	bne	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23970:	e28d4f72 	add	r4, sp, #456	; 0x1c8
   23974:	e3a02c02 	mov	r2, #512	; 0x200
   23978:	e1a01005 	mov	r1, r5
   2397c:	e1a00004 	mov	r0, r4
   23980:	eb00196b 	bl	29f34 <memset>
   23984:	e3a02001 	mov	r2, #1
   23988:	e3a00c01 	mov	r0, #256	; 0x100
   2398c:	e59f3338 	ldr	r3, [pc, #824]	; 23ccc <CDNSClient::Resolve(char const*, CIPAddress*)+0x400>
   23990:	e1c420b2 	strh	r2, [r4, #2]
   23994:	e1d360b0 	ldrh	r6, [r3]
   23998:	e1a01008 	mov	r1, r8
   2399c:	e0862002 	add	r2, r6, r2
   239a0:	e6bf6fb6 	rev16	r6, r6
   239a4:	e1c320b0 	strh	r2, [r3]
   239a8:	e1c400b4 	strh	r0, [r4, #4]
   239ac:	e6ff3076 	uxth	r3, r6
   239b0:	e3a020ff 	mov	r2, #255	; 0xff
   239b4:	e1c460b0 	strh	r6, [r4]
   239b8:	e28d00c8 	add	r0, sp, #200	; 0xc8
   239bc:	e58d3004 	str	r3, [sp, #4]
   239c0:	eb001a76 	bl	2a3a0 <strncpy>
   239c4:	e28d00c8 	add	r0, sp, #200	; 0xc8
   239c8:	e28d2008 	add	r2, sp, #8
   239cc:	e59f12fc 	ldr	r1, [pc, #764]	; 23cd0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x404>
   239d0:	e5cd51c7 	strb	r5, [sp, #455]	; 0x1c7
   239d4:	eb001ac2 	bl	2a4e4 <strtok_r>
   239d8:	e2506000 	subs	r6, r0, #0
   239dc:	028d9f75 	addeq	r9, sp, #468	; 0x1d4
   239e0:	0a00002b 	beq	23a94 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1c8>
   239e4:	e1a0b005 	mov	fp, r5
   239e8:	e59fa2e0 	ldr	sl, [pc, #736]	; 23cd0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x404>
   239ec:	e28d9f75 	add	r9, sp, #468	; 0x1d4
   239f0:	ea000010 	b	23a38 <CDNSClient::Resolve(char const*, CIPAddress*)+0x16c>
   239f4:	e0493004 	sub	r3, r9, r4
   239f8:	e2633c02 	rsb	r3, r3, #512	; 0x200
   239fc:	e2802002 	add	r2, r0, #2
   23a00:	e1520003 	cmp	r2, r3
   23a04:	aa000010 	bge	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23a08:	e2898001 	add	r8, r9, #1
   23a0c:	e5c90000 	strb	r0, [r9]
   23a10:	e1a01006 	mov	r1, r6
   23a14:	e1a00008 	mov	r0, r8
   23a18:	eb001a55 	bl	2a374 <strcpy>
   23a1c:	e28d2008 	add	r2, sp, #8
   23a20:	e1a0100a 	mov	r1, sl
   23a24:	e1a0000b 	mov	r0, fp
   23a28:	eb001aad 	bl	2a4e4 <strtok_r>
   23a2c:	e2506000 	subs	r6, r0, #0
   23a30:	e0889007 	add	r9, r8, r7
   23a34:	0a000016 	beq	23a94 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1c8>
   23a38:	e1a00006 	mov	r0, r6
   23a3c:	eb00198e 	bl	2a07c <strlen>
   23a40:	e35000ff 	cmp	r0, #255	; 0xff
   23a44:	e1a07000 	mov	r7, r0
   23a48:	9affffe9 	bls	239f4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x128>
   23a4c:	e28d0028 	add	r0, sp, #40	; 0x28
   23a50:	ebfffcf7 	bl	22e34 <CSocket::~CSocket()>
   23a54:	eaffffb5 	b	23930 <CDNSClient::Resolve(char const*, CIPAddress*)+0x64>
   23a58:	ebffff53 	bl	237ac <CDNSClient::ConvertIPString(char const*, CIPAddress*)>
   23a5c:	e2505000 	subs	r5, r0, #0
   23a60:	0affffa4 	beq	238f8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2c>
   23a64:	e1a00005 	mov	r0, r5
   23a68:	e28ddd17 	add	sp, sp, #1472	; 0x5c0
   23a6c:	e28dd00c 	add	sp, sp, #12
   23a70:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a74:	e3a02060 	mov	r2, #96	; 0x60
   23a78:	e59f1254 	ldr	r1, [pc, #596]	; 23cd4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   23a7c:	e59f0254 	ldr	r0, [pc, #596]	; 23cd8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x40c>
   23a80:	eb00035e 	bl	24800 <assertion_failed>
   23a84:	e3a0206a 	mov	r2, #106	; 0x6a
   23a88:	e59f1244 	ldr	r1, [pc, #580]	; 23cd4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   23a8c:	e59f0248 	ldr	r0, [pc, #584]	; 23cdc <CDNSClient::Resolve(char const*, CIPAddress*)+0x410>
   23a90:	eb00035a 	bl	24800 <assertion_failed>
   23a94:	e3a02c01 	mov	r2, #256	; 0x100
   23a98:	e3a08000 	mov	r8, #0
   23a9c:	e2890001 	add	r0, r9, #1
   23aa0:	e0403004 	sub	r3, r0, r4
   23aa4:	e2633c02 	rsb	r3, r3, #512	; 0x200
   23aa8:	e28d100c 	add	r1, sp, #12
   23aac:	e3530003 	cmp	r3, #3
   23ab0:	e5c98000 	strb	r8, [r9]
   23ab4:	e1cd20bc 	strh	r2, [sp, #12]
   23ab8:	e1c120b2 	strh	r2, [r1, #2]
   23abc:	daffffe2 	ble	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23ac0:	e3a02004 	mov	r2, #4
   23ac4:	e2899005 	add	r9, r9, #5
   23ac8:	eb001b90 	bl	2a910 <memcpy>
   23acc:	e0493004 	sub	r3, r9, r4
   23ad0:	e3530c02 	cmp	r3, #512	; 0x200
   23ad4:	ca000053 	bgt	23c28 <CDNSClient::Resolve(char const*, CIPAddress*)+0x35c>
   23ad8:	e1a07008 	mov	r7, r8
   23adc:	e3a0bffa 	mov	fp, #1000	; 0x3e8
   23ae0:	e3a08003 	mov	r8, #3
   23ae4:	e3a0a040 	mov	sl, #64	; 0x40
   23ae8:	e1a06003 	mov	r6, r3
   23aec:	e28d9ff2 	add	r9, sp, #968	; 0x3c8
   23af0:	e1a03007 	mov	r3, r7
   23af4:	e1a02006 	mov	r2, r6
   23af8:	e1a01004 	mov	r1, r4
   23afc:	e28d0028 	add	r0, sp, #40	; 0x28
   23b00:	ebfffd3a 	bl	22ff0 <CSocket::Send(void const*, unsigned int, int)>
   23b04:	e1560000 	cmp	r6, r0
   23b08:	1affffcf 	bne	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23b0c:	eb00028d 	bl	24548 <CScheduler::Get()>
   23b10:	e1a0100b 	mov	r1, fp
   23b14:	eb000267 	bl	244b8 <CScheduler::MsSleep(unsigned int)>
   23b18:	e1a0300a 	mov	r3, sl
   23b1c:	e3a02c02 	mov	r2, #512	; 0x200
   23b20:	e1a01009 	mov	r1, r9
   23b24:	e28d0028 	add	r0, sp, #40	; 0x28
   23b28:	ebfffd4d 	bl	23064 <CSocket::Receive(void*, unsigned int, int)>
   23b2c:	e59f31ac 	ldr	r3, [pc, #428]	; 23ce0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x414>
   23b30:	e1500003 	cmp	r0, r3
   23b34:	ca000006 	bgt	23b54 <CDNSClient::Resolve(char const*, CIPAddress*)+0x288>
   23b38:	e3500000 	cmp	r0, #0
   23b3c:	baffffc2 	blt	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23b40:	e3500019 	cmp	r0, #25
   23b44:	ca000006 	bgt	23b64 <CDNSClient::Resolve(char const*, CIPAddress*)+0x298>
   23b48:	e2588001 	subs	r8, r8, #1
   23b4c:	0affffbe 	beq	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23b50:	eaffffe6 	b	23af0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x224>
   23b54:	e3a020ba 	mov	r2, #186	; 0xba
   23b58:	e59f1174 	ldr	r1, [pc, #372]	; 23cd4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   23b5c:	e59f0180 	ldr	r0, [pc, #384]	; 23ce4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x418>
   23b60:	eb000326 	bl	24800 <assertion_failed>
   23b64:	e1d920b0 	ldrh	r2, [r9]
   23b68:	e59d1004 	ldr	r1, [sp, #4]
   23b6c:	e1a03000 	mov	r3, r0
   23b70:	e1520001 	cmp	r2, r1
   23b74:	1affffb4 	bne	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23b78:	e1d910b2 	ldrh	r1, [r9, #2]
   23b7c:	e59f2164 	ldr	r2, [pc, #356]	; 23ce8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x41c>
   23b80:	e0022001 	and	r2, r2, r1
   23b84:	e3520080 	cmp	r2, #128	; 0x80
   23b88:	1affffaf 	bne	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23b8c:	e1d920b4 	ldrh	r2, [r9, #4]
   23b90:	e3520c01 	cmp	r2, #256	; 0x100
   23b94:	1affffac 	bne	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23b98:	e1d920b6 	ldrh	r2, [r9, #6]
   23b9c:	e3520000 	cmp	r2, #0
   23ba0:	0affffa9 	beq	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23ba4:	e28d2ff5 	add	r2, sp, #980	; 0x3d4
   23ba8:	ea000004 	b	23bc0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2f4>
   23bac:	e2811001 	add	r1, r1, #1
   23bb0:	e0822001 	add	r2, r2, r1
   23bb4:	e0421009 	sub	r1, r2, r9
   23bb8:	e1530001 	cmp	r3, r1
   23bbc:	daffffa2 	ble	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23bc0:	e5d21000 	ldrb	r1, [r2]
   23bc4:	e3510000 	cmp	r1, #0
   23bc8:	1afffff7 	bne	23bac <CDNSClient::Resolve(char const*, CIPAddress*)+0x2e0>
   23bcc:	e2822005 	add	r2, r2, #5
   23bd0:	e0421009 	sub	r1, r2, r9
   23bd4:	e1530001 	cmp	r3, r1
   23bd8:	daffff9b 	ble	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23bdc:	e3a0800e 	mov	r8, #14
   23be0:	e1a07003 	mov	r7, r3
   23be4:	e243600e 	sub	r6, r3, #14
   23be8:	e5d23000 	ldrb	r3, [r2]
   23bec:	e2824001 	add	r4, r2, #1
   23bf0:	e20310c0 	and	r1, r3, #192	; 0xc0
   23bf4:	e35100c0 	cmp	r1, #192	; 0xc0
   23bf8:	02824002 	addeq	r4, r2, #2
   23bfc:	1a000004 	bne	23c14 <CDNSClient::Resolve(char const*, CIPAddress*)+0x348>
   23c00:	ea00000c 	b	23c38 <CDNSClient::Resolve(char const*, CIPAddress*)+0x36c>
   23c04:	e5d43000 	ldrb	r3, [r4]
   23c08:	e2844001 	add	r4, r4, #1
   23c0c:	e3530000 	cmp	r3, #0
   23c10:	0a000008 	beq	23c38 <CDNSClient::Resolve(char const*, CIPAddress*)+0x36c>
   23c14:	e0844003 	add	r4, r4, r3
   23c18:	e0443009 	sub	r3, r4, r9
   23c1c:	e1570003 	cmp	r7, r3
   23c20:	cafffff7 	bgt	23c04 <CDNSClient::Resolve(char const*, CIPAddress*)+0x338>
   23c24:	eaffff88 	b	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23c28:	e3a020a9 	mov	r2, #169	; 0xa9
   23c2c:	e59f10a0 	ldr	r1, [pc, #160]	; 23cd4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   23c30:	e59f00b4 	ldr	r0, [pc, #180]	; 23cec <CDNSClient::Resolve(char const*, CIPAddress*)+0x420>
   23c34:	eb0002f1 	bl	24800 <assertion_failed>
   23c38:	e0443009 	sub	r3, r4, r9
   23c3c:	e1530006 	cmp	r3, r6
   23c40:	caffff81 	bgt	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23c44:	e1a02008 	mov	r2, r8
   23c48:	e1a01004 	mov	r1, r4
   23c4c:	e28d0018 	add	r0, sp, #24
   23c50:	eb001b2e 	bl	2a910 <memcpy>
   23c54:	e1dd31b8 	ldrh	r3, [sp, #24]
   23c58:	e3530c01 	cmp	r3, #256	; 0x100
   23c5c:	0a000008 	beq	23c84 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3b8>
   23c60:	e1dd22b0 	ldrh	r2, [sp, #32]
   23c64:	e6bf2fb2 	rev16	r2, r2
   23c68:	e6ff2072 	uxth	r2, r2
   23c6c:	e282200a 	add	r2, r2, #10
   23c70:	e0842002 	add	r2, r4, r2
   23c74:	e0423009 	sub	r3, r2, r9
   23c78:	e1570003 	cmp	r7, r3
   23c7c:	caffffd9 	bgt	23be8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x31c>
   23c80:	eaffff71 	b	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23c84:	e1dd31ba 	ldrh	r3, [sp, #26]
   23c88:	e3530c01 	cmp	r3, #256	; 0x100
   23c8c:	1afffff3 	bne	23c60 <CDNSClient::Resolve(char const*, CIPAddress*)+0x394>
   23c90:	e1dd32b0 	ldrh	r3, [sp, #32]
   23c94:	e3530b01 	cmp	r3, #1024	; 0x400
   23c98:	1afffff0 	bne	23c60 <CDNSClient::Resolve(char const*, CIPAddress*)+0x394>
   23c9c:	e59d3000 	ldr	r3, [sp]
   23ca0:	e3530000 	cmp	r3, #0
   23ca4:	0a000004 	beq	23cbc <CDNSClient::Resolve(char const*, CIPAddress*)+0x3f0>
   23ca8:	e28d1022 	add	r1, sp, #34	; 0x22
   23cac:	e59d0000 	ldr	r0, [sp]
   23cb0:	ebfff4bc 	bl	20fa8 <CIPAddress::Set(unsigned char const*)>
   23cb4:	e3a05001 	mov	r5, #1
   23cb8:	eaffff63 	b	23a4c <CDNSClient::Resolve(char const*, CIPAddress*)+0x180>
   23cbc:	e59f202c 	ldr	r2, [pc, #44]	; 23cf0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x424>
   23cc0:	e59f100c 	ldr	r1, [pc, #12]	; 23cd4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x408>
   23cc4:	e59f0028 	ldr	r0, [pc, #40]	; 23cf4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x428>
   23cc8:	eb0002cc 	bl	24800 <assertion_failed>
   23ccc:	00047fa0 	.word	0x00047fa0
   23cd0:	0003ed38 	.word	0x0003ed38
   23cd4:	00044ac8 	.word	0x00044ac8
   23cd8:	00044b04 	.word	0x00044b04
   23cdc:	00043954 	.word	0x00043954
   23ce0:	000001ff 	.word	0x000001ff
   23ce4:	00044b34 	.word	0x00044b34
   23ce8:	00000ffa 	.word	0x00000ffa
   23cec:	00044b14 	.word	0x00044b14
   23cf0:	0000010d 	.word	0x0000010d
   23cf4:	00044ae8 	.word	0x00044ae8

00023cf8 <CTask::Run()>:
   23cf8:	e92d4010 	push	{r4, lr}
   23cfc:	e3a0203f 	mov	r2, #63	; 0x3f
   23d00:	e59f1004 	ldr	r1, [pc, #4]	; 23d0c <CTask::Run()+0x14>
   23d04:	e59f0004 	ldr	r0, [pc, #4]	; 23d10 <CTask::Run()+0x18>
   23d08:	eb0002bc 	bl	24800 <assertion_failed>
   23d0c:	00044b6c 	.word	0x00044b6c
   23d10:	0003fd5c 	.word	0x0003fd5c

00023d14 <CTask::TaskEntry(void*)>:
   23d14:	e92d4010 	push	{r4, lr}
   23d18:	e2504000 	subs	r4, r0, #0
   23d1c:	0a00000c 	beq	23d54 <CTask::TaskEntry(void*)+0x40>
   23d20:	e5943000 	ldr	r3, [r4]
   23d24:	e5933008 	ldr	r3, [r3, #8]
   23d28:	e12fff33 	blx	r3
   23d2c:	e3a03003 	mov	r3, #3
   23d30:	e28400d4 	add	r0, r4, #212	; 0xd4
   23d34:	e5c43004 	strb	r3, [r4, #4]
   23d38:	eb00022d 	bl	245f4 <CSynchronizationEvent::Set()>
   23d3c:	eb000201 	bl	24548 <CScheduler::Get()>
   23d40:	eb00016d 	bl	242fc <CScheduler::Yield()>
   23d44:	e3a0208c 	mov	r2, #140	; 0x8c
   23d48:	e59f1014 	ldr	r1, [pc, #20]	; 23d64 <CTask::TaskEntry(void*)+0x50>
   23d4c:	e59f0014 	ldr	r0, [pc, #20]	; 23d68 <CTask::TaskEntry(void*)+0x54>
   23d50:	eb0002aa 	bl	24800 <assertion_failed>
   23d54:	e3a02084 	mov	r2, #132	; 0x84
   23d58:	e59f1004 	ldr	r1, [pc, #4]	; 23d64 <CTask::TaskEntry(void*)+0x50>
   23d5c:	e59f0008 	ldr	r0, [pc, #8]	; 23d6c <CTask::TaskEntry(void*)+0x58>
   23d60:	eb0002a6 	bl	24800 <assertion_failed>
   23d64:	00044b6c 	.word	0x00044b6c
   23d68:	0003fd5c 	.word	0x0003fd5c
   23d6c:	0003f168 	.word	0x0003f168

00023d70 <CTask::~CTask()>:
   23d70:	e5d02004 	ldrb	r2, [r0, #4]
   23d74:	e59f3050 	ldr	r3, [pc, #80]	; 23dcc <CTask::~CTask()+0x5c>
   23d78:	e3520003 	cmp	r2, #3
   23d7c:	e92d4010 	push	{r4, lr}
   23d80:	e5803000 	str	r3, [r0]
   23d84:	1a00000c 	bne	23dbc <CTask::~CTask()+0x4c>
   23d88:	e1a04000 	mov	r4, r0
   23d8c:	e3a03004 	mov	r3, #4
   23d90:	e59000c8 	ldr	r0, [r0, #200]	; 0xc8
   23d94:	e5c43004 	strb	r3, [r4, #4]
   23d98:	e3500000 	cmp	r0, #0
   23d9c:	0a000000 	beq	23da4 <CTask::~CTask()+0x34>
   23da0:	eb001cbb 	bl	2b094 <operator delete[](void*)>
   23da4:	e3a03000 	mov	r3, #0
   23da8:	e28400d4 	add	r0, r4, #212	; 0xd4
   23dac:	e58430c8 	str	r3, [r4, #200]	; 0xc8
   23db0:	eb0001ff 	bl	245b4 <CSynchronizationEvent::~CSynchronizationEvent()>
   23db4:	e1a00004 	mov	r0, r4
   23db8:	e8bd8010 	pop	{r4, pc}
   23dbc:	e3a02036 	mov	r2, #54	; 0x36
   23dc0:	e59f1008 	ldr	r1, [pc, #8]	; 23dd0 <CTask::~CTask()+0x60>
   23dc4:	e59f0008 	ldr	r0, [pc, #8]	; 23dd4 <CTask::~CTask()+0x64>
   23dc8:	eb00028c 	bl	24800 <assertion_failed>
   23dcc:	00044b60 	.word	0x00044b60
   23dd0:	00044b6c 	.word	0x00044b6c
   23dd4:	00044b78 	.word	0x00044b78

00023dd8 <CTask::~CTask()>:
   23dd8:	e92d4010 	push	{r4, lr}
   23ddc:	e1a04000 	mov	r4, r0
   23de0:	ebffffe2 	bl	23d70 <CTask::~CTask()>
   23de4:	e1a00004 	mov	r0, r4
   23de8:	e3a010dc 	mov	r1, #220	; 0xdc
   23dec:	eb001cae 	bl	2b0ac <operator delete(void*, unsigned int)>
   23df0:	e1a00004 	mov	r0, r4
   23df4:	e8bd8010 	pop	{r4, pc}

00023df8 <CTask::Terminate()>:
   23df8:	e1a03000 	mov	r3, r0
   23dfc:	e3a02003 	mov	r2, #3
   23e00:	e92d4010 	push	{r4, lr}
   23e04:	e28000d4 	add	r0, r0, #212	; 0xd4
   23e08:	e5c32004 	strb	r2, [r3, #4]
   23e0c:	eb0001f8 	bl	245f4 <CSynchronizationEvent::Set()>
   23e10:	eb0001cc 	bl	24548 <CScheduler::Get()>
   23e14:	eb000138 	bl	242fc <CScheduler::Yield()>
   23e18:	e3a02048 	mov	r2, #72	; 0x48
   23e1c:	e59f1004 	ldr	r1, [pc, #4]	; 23e28 <CTask::Terminate()+0x30>
   23e20:	e59f0004 	ldr	r0, [pc, #4]	; 23e2c <CTask::Terminate()+0x34>
   23e24:	eb000275 	bl	24800 <assertion_failed>
   23e28:	00044b6c 	.word	0x00044b6c
   23e2c:	0003fd5c 	.word	0x0003fd5c

00023e30 <CTask::WaitForTermination()>:
   23e30:	e28000d4 	add	r0, r0, #212	; 0xd4
   23e34:	ea0001fc 	b	2462c <CSynchronizationEvent::Wait()>

00023e38 <CTask::SetUserData(void*, unsigned int)>:
   23e38:	e0802102 	add	r2, r0, r2, lsl #2
   23e3c:	e58210cc 	str	r1, [r2, #204]	; 0xcc
   23e40:	e12fff1e 	bx	lr

00023e44 <CTask::GetUserData(unsigned int)>:
   23e44:	e0801101 	add	r1, r0, r1, lsl #2
   23e48:	e59100cc 	ldr	r0, [r1, #204]	; 0xcc
   23e4c:	e12fff1e 	bx	lr

00023e50 <CTask::InitializeRegs()>:
   23e50:	e92d4010 	push	{r4, lr}
   23e54:	e1a04000 	mov	r4, r0
   23e58:	e3a020b8 	mov	r2, #184	; 0xb8
   23e5c:	e280000c 	add	r0, r0, #12
   23e60:	e3a01000 	mov	r1, #0
   23e64:	eb001832 	bl	29f34 <memset>
   23e68:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
   23e6c:	e584400c 	str	r4, [r4, #12]
   23e70:	e3530000 	cmp	r3, #0
   23e74:	0a000009 	beq	23ea0 <CTask::InitializeRegs()+0x50>
   23e78:	e3a00101 	mov	r0, #1073741824	; 0x40000000
   23e7c:	e3a01402 	mov	r1, #33554432	; 0x2000000
   23e80:	e594c0c4 	ldr	ip, [r4, #196]	; 0xc4
   23e84:	e59f2024 	ldr	r2, [pc, #36]	; 23eb0 <CTask::InitializeRegs()+0x60>
   23e88:	e083300c 	add	r3, r3, ip
   23e8c:	e584303c 	str	r3, [r4, #60]	; 0x3c
   23e90:	e5840010 	str	r0, [r4, #16]
   23e94:	e5841014 	str	r1, [r4, #20]
   23e98:	e5842040 	str	r2, [r4, #64]	; 0x40
   23e9c:	e8bd8010 	pop	{r4, pc}
   23ea0:	e3a02062 	mov	r2, #98	; 0x62
   23ea4:	e59f1008 	ldr	r1, [pc, #8]	; 23eb4 <CTask::InitializeRegs()+0x64>
   23ea8:	e59f0008 	ldr	r0, [pc, #8]	; 23eb8 <CTask::InitializeRegs()+0x68>
   23eac:	eb000253 	bl	24800 <assertion_failed>
   23eb0:	00023d14 	.word	0x00023d14
   23eb4:	00044b6c 	.word	0x00044b6c
   23eb8:	00044b98 	.word	0x00044b98

00023ebc <CTask::CTask(unsigned int)>:
   23ebc:	e92d4070 	push	{r4, r5, r6, lr}
   23ec0:	e3a05000 	mov	r5, #0
   23ec4:	e1a04000 	mov	r4, r0
   23ec8:	e59f3080 	ldr	r3, [pc, #128]	; 23f50 <CTask::CTask(unsigned int)+0x94>
   23ecc:	e58010c4 	str	r1, [r0, #196]	; 0xc4
   23ed0:	e5803000 	str	r3, [r0]
   23ed4:	e5c05004 	strb	r5, [r0, #4]
   23ed8:	e58050c8 	str	r5, [r0, #200]	; 0xc8
   23edc:	e1a01005 	mov	r1, r5
   23ee0:	e28000d4 	add	r0, r0, #212	; 0xd4
   23ee4:	eb0001ae 	bl	245a4 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   23ee8:	e59400c4 	ldr	r0, [r4, #196]	; 0xc4
   23eec:	e58450cc 	str	r5, [r4, #204]	; 0xcc
   23ef0:	e1500005 	cmp	r0, r5
   23ef4:	e58450d0 	str	r5, [r4, #208]	; 0xd0
   23ef8:	0a000007 	beq	23f1c <CTask::CTask(unsigned int)+0x60>
   23efc:	e3500b01 	cmp	r0, #1024	; 0x400
   23f00:	3a00000a 	bcc	23f30 <CTask::CTask(unsigned int)+0x74>
   23f04:	e3100003 	tst	r0, #3
   23f08:	1a00000c 	bne	23f40 <CTask::CTask(unsigned int)+0x84>
   23f0c:	eb001c59 	bl	2b078 <operator new[](unsigned int)>
   23f10:	e58400c8 	str	r0, [r4, #200]	; 0xc8
   23f14:	e1a00004 	mov	r0, r4
   23f18:	ebffffcc 	bl	23e50 <CTask::InitializeRegs()>
   23f1c:	eb000189 	bl	24548 <CScheduler::Get()>
   23f20:	e1a01004 	mov	r1, r4
   23f24:	eb000054 	bl	2407c <CScheduler::AddTask(CTask*)>
   23f28:	e1a00004 	mov	r0, r4
   23f2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23f30:	e3a02025 	mov	r2, #37	; 0x25
   23f34:	e59f1018 	ldr	r1, [pc, #24]	; 23f54 <CTask::CTask(unsigned int)+0x98>
   23f38:	e59f0018 	ldr	r0, [pc, #24]	; 23f58 <CTask::CTask(unsigned int)+0x9c>
   23f3c:	eb00022f 	bl	24800 <assertion_failed>
   23f40:	e3a02027 	mov	r2, #39	; 0x27
   23f44:	e59f1008 	ldr	r1, [pc, #8]	; 23f54 <CTask::CTask(unsigned int)+0x98>
   23f48:	e59f000c 	ldr	r0, [pc, #12]	; 23f5c <CTask::CTask(unsigned int)+0xa0>
   23f4c:	eb00022b 	bl	24800 <assertion_failed>
   23f50:	00044b60 	.word	0x00044b60
   23f54:	00044b6c 	.word	0x00044b6c
   23f58:	00044ba8 	.word	0x00044ba8
   23f5c:	00044bc0 	.word	0x00044bc0

00023f60 <CScheduler::CScheduler()>:
   23f60:	e3a03000 	mov	r3, #0
   23f64:	e59f2058 	ldr	r2, [pc, #88]	; 23fc4 <CScheduler::CScheduler()+0x64>
   23f68:	e92d4070 	push	{r4, r5, r6, lr}
   23f6c:	e5925000 	ldr	r5, [r2]
   23f70:	e5803050 	str	r3, [r0, #80]	; 0x50
   23f74:	e1550003 	cmp	r5, r3
   23f78:	e5803054 	str	r3, [r0, #84]	; 0x54
   23f7c:	e5803058 	str	r3, [r0, #88]	; 0x58
   23f80:	e580305c 	str	r3, [r0, #92]	; 0x5c
   23f84:	e5803060 	str	r3, [r0, #96]	; 0x60
   23f88:	1a000009 	bne	23fb4 <CScheduler::CScheduler()+0x54>
   23f8c:	e1a04000 	mov	r4, r0
   23f90:	e3a000dc 	mov	r0, #220	; 0xdc
   23f94:	e5824000 	str	r4, [r2]
   23f98:	eb001c35 	bl	2b074 <operator new(unsigned int)>
   23f9c:	e1a06000 	mov	r6, r0
   23fa0:	e1a01005 	mov	r1, r5
   23fa4:	ebffffc4 	bl	23ebc <CTask::CTask(unsigned int)>
   23fa8:	e5846054 	str	r6, [r4, #84]	; 0x54
   23fac:	e1a00004 	mov	r0, r4
   23fb0:	e8bd8070 	pop	{r4, r5, r6, pc}
   23fb4:	e3a02024 	mov	r2, #36	; 0x24
   23fb8:	e59f1008 	ldr	r1, [pc, #8]	; 23fc8 <CScheduler::CScheduler()+0x68>
   23fbc:	e59f0008 	ldr	r0, [pc, #8]	; 23fcc <CScheduler::CScheduler()+0x6c>
   23fc0:	eb00020e 	bl	24800 <assertion_failed>
   23fc4:	0004e0e8 	.word	0x0004e0e8
   23fc8:	00044be0 	.word	0x00044be0
   23fcc:	000438ec 	.word	0x000438ec

00023fd0 <CScheduler::~CScheduler()>:
   23fd0:	e3a02000 	mov	r2, #0
   23fd4:	e59f3004 	ldr	r3, [pc, #4]	; 23fe0 <CScheduler::~CScheduler()+0x10>
   23fd8:	e5832000 	str	r2, [r3]
   23fdc:	e12fff1e 	bx	lr
   23fe0:	0004e0e8 	.word	0x0004e0e8

00023fe4 <CScheduler::GetCurrentTask()>:
   23fe4:	e5900054 	ldr	r0, [r0, #84]	; 0x54
   23fe8:	e12fff1e 	bx	lr

00023fec <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))>:
   23fec:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
   23ff0:	e92d4010 	push	{r4, lr}
   23ff4:	e3530000 	cmp	r3, #0
   23ff8:	1a000006 	bne	24018 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x2c>
   23ffc:	e3510000 	cmp	r1, #0
   24000:	e580105c 	str	r1, [r0, #92]	; 0x5c
   24004:	18bd8010 	popne	{r4, pc}
   24008:	e3a02080 	mov	r2, #128	; 0x80
   2400c:	e59f1014 	ldr	r1, [pc, #20]	; 24028 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x3c>
   24010:	e59f0014 	ldr	r0, [pc, #20]	; 2402c <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x40>
   24014:	eb0001f9 	bl	24800 <assertion_failed>
   24018:	e3a0207e 	mov	r2, #126	; 0x7e
   2401c:	e59f1004 	ldr	r1, [pc, #4]	; 24028 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x3c>
   24020:	e59f0008 	ldr	r0, [pc, #8]	; 24030 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x44>
   24024:	eb0001f5 	bl	24800 <assertion_failed>
   24028:	00044be0 	.word	0x00044be0
   2402c:	00044c0c 	.word	0x00044c0c
   24030:	00044bf0 	.word	0x00044bf0

00024034 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))>:
   24034:	e5903060 	ldr	r3, [r0, #96]	; 0x60
   24038:	e92d4010 	push	{r4, lr}
   2403c:	e3530000 	cmp	r3, #0
   24040:	1a000006 	bne	24060 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x2c>
   24044:	e3510000 	cmp	r1, #0
   24048:	e5801060 	str	r1, [r0, #96]	; 0x60
   2404c:	18bd8010 	popne	{r4, pc}
   24050:	e3a02087 	mov	r2, #135	; 0x87
   24054:	e59f1014 	ldr	r1, [pc, #20]	; 24070 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x3c>
   24058:	e59f0014 	ldr	r0, [pc, #20]	; 24074 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x40>
   2405c:	eb0001e7 	bl	24800 <assertion_failed>
   24060:	e3a02085 	mov	r2, #133	; 0x85
   24064:	e59f1004 	ldr	r1, [pc, #4]	; 24070 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x3c>
   24068:	e59f0008 	ldr	r0, [pc, #8]	; 24078 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x44>
   2406c:	eb0001e3 	bl	24800 <assertion_failed>
   24070:	00044be0 	.word	0x00044be0
   24074:	00044c48 	.word	0x00044c48
   24078:	00044c28 	.word	0x00044c28

0002407c <CScheduler::AddTask(CTask*)>:
   2407c:	e92d4070 	push	{r4, r5, r6, lr}
   24080:	e2515000 	subs	r5, r1, #0
   24084:	0a00001c 	beq	240fc <CScheduler::AddTask(CTask*)+0x80>
   24088:	e1a04000 	mov	r4, r0
   2408c:	e5900050 	ldr	r0, [r0, #80]	; 0x50
   24090:	e3500000 	cmp	r0, #0
   24094:	0a00001c 	beq	2410c <CScheduler::AddTask(CTask*)+0x90>
   24098:	e5943000 	ldr	r3, [r4]
   2409c:	e3530000 	cmp	r3, #0
   240a0:	11a02004 	movne	r2, r4
   240a4:	13a03000 	movne	r3, #0
   240a8:	1a000003 	bne	240bc <CScheduler::AddTask(CTask*)+0x40>
   240ac:	ea000009 	b	240d8 <CScheduler::AddTask(CTask*)+0x5c>
   240b0:	e5b21004 	ldr	r1, [r2, #4]!
   240b4:	e3510000 	cmp	r1, #0
   240b8:	0a000006 	beq	240d8 <CScheduler::AddTask(CTask*)+0x5c>
   240bc:	e2833001 	add	r3, r3, #1
   240c0:	e1530000 	cmp	r3, r0
   240c4:	1afffff9 	bne	240b0 <CScheduler::AddTask(CTask*)+0x34>
   240c8:	e3530014 	cmp	r3, #20
   240cc:	0a000003 	beq	240e0 <CScheduler::AddTask(CTask*)+0x64>
   240d0:	e2832001 	add	r2, r3, #1
   240d4:	e5842050 	str	r2, [r4, #80]	; 0x50
   240d8:	e7845103 	str	r5, [r4, r3, lsl #2]
   240dc:	e8bd8070 	pop	{r4, r5, r6, pc}
   240e0:	eb000ab9 	bl	26bcc <CLogger::Get()>
   240e4:	e59f3028 	ldr	r3, [pc, #40]	; 24114 <CScheduler::AddTask(CTask*)+0x98>
   240e8:	e3a02000 	mov	r2, #0
   240ec:	e59f1024 	ldr	r1, [pc, #36]	; 24118 <CScheduler::AddTask(CTask*)+0x9c>
   240f0:	eb0009f2 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   240f4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   240f8:	eafffff4 	b	240d0 <CScheduler::AddTask(CTask*)+0x54>
   240fc:	e3a0208c 	mov	r2, #140	; 0x8c
   24100:	e59f1014 	ldr	r1, [pc, #20]	; 2411c <CScheduler::AddTask(CTask*)+0xa0>
   24104:	e59f0014 	ldr	r0, [pc, #20]	; 24120 <CScheduler::AddTask(CTask*)+0xa4>
   24108:	eb0001bc 	bl	24800 <assertion_failed>
   2410c:	e1a03000 	mov	r3, r0
   24110:	eaffffee 	b	240d0 <CScheduler::AddTask(CTask*)+0x54>
   24114:	00044c74 	.word	0x00044c74
   24118:	00044bd8 	.word	0x00044bd8
   2411c:	00044be0 	.word	0x00044be0
   24120:	00044c68 	.word	0x00044c68

00024124 <CScheduler::RemoveTask(CTask*)>:
   24124:	e92d4010 	push	{r4, lr}
   24128:	e590e050 	ldr	lr, [r0, #80]	; 0x50
   2412c:	e35e0000 	cmp	lr, #0
   24130:	0a000012 	beq	24180 <CScheduler::RemoveTask(CTask*)+0x5c>
   24134:	e5903000 	ldr	r3, [r0]
   24138:	e1510003 	cmp	r1, r3
   2413c:	11a02000 	movne	r2, r0
   24140:	13a03000 	movne	r3, #0
   24144:	0a00000b 	beq	24178 <CScheduler::RemoveTask(CTask*)+0x54>
   24148:	e2833001 	add	r3, r3, #1
   2414c:	e153000e 	cmp	r3, lr
   24150:	0a00000a 	beq	24180 <CScheduler::RemoveTask(CTask*)+0x5c>
   24154:	e5b2c004 	ldr	ip, [r2, #4]!
   24158:	e15c0001 	cmp	ip, r1
   2415c:	1afffff9 	bne	24148 <CScheduler::RemoveTask(CTask*)+0x24>
   24160:	e3a02000 	mov	r2, #0
   24164:	e24ee001 	sub	lr, lr, #1
   24168:	e15e0003 	cmp	lr, r3
   2416c:	e7802103 	str	r2, [r0, r3, lsl #2]
   24170:	05803050 	streq	r3, [r0, #80]	; 0x50
   24174:	e8bd8010 	pop	{r4, pc}
   24178:	e3a03000 	mov	r3, #0
   2417c:	eafffff7 	b	24160 <CScheduler::RemoveTask(CTask*)+0x3c>
   24180:	e3a020b2 	mov	r2, #178	; 0xb2
   24184:	e59f1004 	ldr	r1, [pc, #4]	; 24190 <CScheduler::RemoveTask(CTask*)+0x6c>
   24188:	e59f0004 	ldr	r0, [pc, #4]	; 24194 <CScheduler::RemoveTask(CTask*)+0x70>
   2418c:	eb00019b 	bl	24800 <assertion_failed>
   24190:	00044be0 	.word	0x00044be0
   24194:	0003fd5c 	.word	0x0003fd5c

00024198 <CScheduler::WakeTask(CTask**)>:
   24198:	e3510000 	cmp	r1, #0
   2419c:	e92d4010 	push	{r4, lr}
   241a0:	0a000009 	beq	241cc <CScheduler::WakeTask(CTask**)+0x34>
   241a4:	e3a02000 	mov	r2, #0
   241a8:	e5913000 	ldr	r3, [r1]
   241ac:	e5812000 	str	r2, [r1]
   241b0:	e1530002 	cmp	r3, r2
   241b4:	0a000008 	beq	241dc <CScheduler::WakeTask(CTask**)+0x44>
   241b8:	e5d31004 	ldrb	r1, [r3, #4]
   241bc:	e3510001 	cmp	r1, #1
   241c0:	1a000009 	bne	241ec <CScheduler::WakeTask(CTask**)+0x54>
   241c4:	e5c32004 	strb	r2, [r3, #4]
   241c8:	e8bd8010 	pop	{r4, pc}
   241cc:	e3a020c3 	mov	r2, #195	; 0xc3
   241d0:	e59f1024 	ldr	r1, [pc, #36]	; 241fc <CScheduler::WakeTask(CTask**)+0x64>
   241d4:	e59f0024 	ldr	r0, [pc, #36]	; 24200 <CScheduler::WakeTask(CTask**)+0x68>
   241d8:	eb000188 	bl	24800 <assertion_failed>
   241dc:	e3a020cf 	mov	r2, #207	; 0xcf
   241e0:	e59f1014 	ldr	r1, [pc, #20]	; 241fc <CScheduler::WakeTask(CTask**)+0x64>
   241e4:	e59f0018 	ldr	r0, [pc, #24]	; 24204 <CScheduler::WakeTask(CTask**)+0x6c>
   241e8:	eb000184 	bl	24800 <assertion_failed>
   241ec:	e3a020d0 	mov	r2, #208	; 0xd0
   241f0:	e59f1004 	ldr	r1, [pc, #4]	; 241fc <CScheduler::WakeTask(CTask**)+0x64>
   241f4:	e59f000c 	ldr	r0, [pc, #12]	; 24208 <CScheduler::WakeTask(CTask**)+0x70>
   241f8:	eb000180 	bl	24800 <assertion_failed>
   241fc:	00044be0 	.word	0x00044be0
   24200:	00044c94 	.word	0x00044c94
   24204:	00044c68 	.word	0x00044c68
   24208:	00044ca0 	.word	0x00044ca0

0002420c <CScheduler::GetNextTask()>:
   2420c:	e92d4070 	push	{r4, r5, r6, lr}
   24210:	e1a06000 	mov	r6, r0
   24214:	e5904058 	ldr	r4, [r0, #88]	; 0x58
   24218:	eb001738 	bl	29f00 <CTimer::Get()>
   2421c:	eb00147a 	bl	2940c <CTimer::GetClockTicks()>
   24220:	e5963050 	ldr	r3, [r6, #80]	; 0x50
   24224:	e3540013 	cmp	r4, #19
   24228:	83a04000 	movhi	r4, #0
   2422c:	e3530000 	cmp	r3, #0
   24230:	0a000015 	beq	2428c <CScheduler::GetNextTask()+0x80>
   24234:	e3a01001 	mov	r1, #1
   24238:	e2844001 	add	r4, r4, #1
   2423c:	e1540003 	cmp	r4, r3
   24240:	23a04000 	movcs	r4, #0
   24244:	e7965104 	ldr	r5, [r6, r4, lsl #2]
   24248:	e3550000 	cmp	r5, #0
   2424c:	0a00000b 	beq	24280 <CScheduler::GetNextTask()+0x74>
   24250:	e5d52004 	ldrb	r2, [r5, #4]
   24254:	e3520003 	cmp	r2, #3
   24258:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   2425c:	ea00001c 	b	242d4 <CScheduler::GetNextTask()+0xc8>
   24260:	00024290 	.word	0x00024290
   24264:	00024280 	.word	0x00024280
   24268:	00024270 	.word	0x00024270
   2426c:	00024298 	.word	0x00024298
   24270:	e5952008 	ldr	r2, [r5, #8]
   24274:	e0422000 	sub	r2, r2, r0
   24278:	e3520000 	cmp	r2, #0
   2427c:	da000018 	ble	242e4 <CScheduler::GetNextTask()+0xd8>
   24280:	e2811001 	add	r1, r1, #1
   24284:	e1510003 	cmp	r1, r3
   24288:	9affffea 	bls	24238 <CScheduler::GetNextTask()+0x2c>
   2428c:	e3a04014 	mov	r4, #20
   24290:	e1a00004 	mov	r0, r4
   24294:	e8bd8070 	pop	{r4, r5, r6, pc}
   24298:	e5963060 	ldr	r3, [r6, #96]	; 0x60
   2429c:	e3530000 	cmp	r3, #0
   242a0:	0a000001 	beq	242ac <CScheduler::GetNextTask()+0xa0>
   242a4:	e1a00005 	mov	r0, r5
   242a8:	e12fff33 	blx	r3
   242ac:	e3a04014 	mov	r4, #20
   242b0:	e1a00006 	mov	r0, r6
   242b4:	e1a01005 	mov	r1, r5
   242b8:	ebffff99 	bl	24124 <CScheduler::RemoveTask(CTask*)>
   242bc:	e5953000 	ldr	r3, [r5]
   242c0:	e1a00005 	mov	r0, r5
   242c4:	e5933004 	ldr	r3, [r3, #4]
   242c8:	e12fff33 	blx	r3
   242cc:	e1a00004 	mov	r0, r4
   242d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   242d4:	e59f2014 	ldr	r2, [pc, #20]	; 242f0 <CScheduler::GetNextTask()+0xe4>
   242d8:	e59f1014 	ldr	r1, [pc, #20]	; 242f4 <CScheduler::GetNextTask()+0xe8>
   242dc:	e59f0014 	ldr	r0, [pc, #20]	; 242f8 <CScheduler::GetNextTask()+0xec>
   242e0:	eb000146 	bl	24800 <assertion_failed>
   242e4:	e3a03000 	mov	r3, #0
   242e8:	e5c53004 	strb	r3, [r5, #4]
   242ec:	eaffffe7 	b	24290 <CScheduler::GetNextTask()+0x84>
   242f0:	00000103 	.word	0x00000103
   242f4:	00044be0 	.word	0x00044be0
   242f8:	0003fd5c 	.word	0x0003fd5c

000242fc <CScheduler::Yield()>:
   242fc:	e92d4070 	push	{r4, r5, r6, lr}
   24300:	e1a04000 	mov	r4, r0
   24304:	e1a00004 	mov	r0, r4
   24308:	ebffffbf 	bl	2420c <CScheduler::GetNextTask()>
   2430c:	e3500014 	cmp	r0, #20
   24310:	e5840058 	str	r0, [r4, #88]	; 0x58
   24314:	1a000006 	bne	24334 <CScheduler::Yield()+0x38>
   24318:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   2431c:	e3530000 	cmp	r3, #0
   24320:	1afffff7 	bne	24304 <CScheduler::Yield()+0x8>
   24324:	e3a02037 	mov	r2, #55	; 0x37
   24328:	e59f10a0 	ldr	r1, [pc, #160]	; 243d0 <CScheduler::Yield()+0xd4>
   2432c:	e59f00a0 	ldr	r0, [pc, #160]	; 243d4 <CScheduler::Yield()+0xd8>
   24330:	eb000132 	bl	24800 <assertion_failed>
   24334:	e3500013 	cmp	r0, #19
   24338:	8a000018 	bhi	243a0 <CScheduler::Yield()+0xa4>
   2433c:	e7940100 	ldr	r0, [r4, r0, lsl #2]
   24340:	e3500000 	cmp	r0, #0
   24344:	0a000019 	beq	243b0 <CScheduler::Yield()+0xb4>
   24348:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   2434c:	e1500003 	cmp	r0, r3
   24350:	08bd8070 	popeq	{r4, r5, r6, pc}
   24354:	e594205c 	ldr	r2, [r4, #92]	; 0x5c
   24358:	e5840054 	str	r0, [r4, #84]	; 0x54
   2435c:	e3520000 	cmp	r2, #0
   24360:	e283500c 	add	r5, r3, #12
   24364:	e280400c 	add	r4, r0, #12
   24368:	0a000000 	beq	24370 <CScheduler::Yield()+0x74>
   2436c:	e12fff32 	blx	r2
   24370:	e3550000 	cmp	r5, #0
   24374:	0a000011 	beq	243c0 <CScheduler::Yield()+0xc4>
   24378:	e3540000 	cmp	r4, #0
   2437c:	0a000003 	beq	24390 <CScheduler::Yield()+0x94>
   24380:	e1a01004 	mov	r1, r4
   24384:	e1a00005 	mov	r0, r5
   24388:	e8bd4070 	pop	{r4, r5, r6, lr}
   2438c:	ea00007b 	b	24580 <TaskSwitch>
   24390:	e3a0204c 	mov	r2, #76	; 0x4c
   24394:	e59f1034 	ldr	r1, [pc, #52]	; 243d0 <CScheduler::Yield()+0xd4>
   24398:	e59f0038 	ldr	r0, [pc, #56]	; 243d8 <CScheduler::Yield()+0xdc>
   2439c:	eb000117 	bl	24800 <assertion_failed>
   243a0:	e3a0203a 	mov	r2, #58	; 0x3a
   243a4:	e59f1024 	ldr	r1, [pc, #36]	; 243d0 <CScheduler::Yield()+0xd4>
   243a8:	e59f002c 	ldr	r0, [pc, #44]	; 243dc <CScheduler::Yield()+0xe0>
   243ac:	eb000113 	bl	24800 <assertion_failed>
   243b0:	e3a0203c 	mov	r2, #60	; 0x3c
   243b4:	e59f1014 	ldr	r1, [pc, #20]	; 243d0 <CScheduler::Yield()+0xd4>
   243b8:	e59f0020 	ldr	r0, [pc, #32]	; 243e0 <CScheduler::Yield()+0xe4>
   243bc:	eb00010f 	bl	24800 <assertion_failed>
   243c0:	e3a0204b 	mov	r2, #75	; 0x4b
   243c4:	e59f1004 	ldr	r1, [pc, #4]	; 243d0 <CScheduler::Yield()+0xd4>
   243c8:	e59f0014 	ldr	r0, [pc, #20]	; 243e4 <CScheduler::Yield()+0xe8>
   243cc:	eb00010b 	bl	24800 <assertion_failed>
   243d0:	00044be0 	.word	0x00044be0
   243d4:	00044cc8 	.word	0x00044cc8
   243d8:	00044d0c 	.word	0x00044d0c
   243dc:	00044cd8 	.word	0x00044cd8
   243e0:	00044cf0 	.word	0x00044cf0
   243e4:	00044cfc 	.word	0x00044cfc

000243e8 <CScheduler::usSleep(unsigned int)>:
   243e8:	e92d4070 	push	{r4, r5, r6, lr}
   243ec:	e2514000 	subs	r4, r1, #0
   243f0:	08bd8070 	popeq	{r4, r5, r6, pc}
   243f4:	e1a05000 	mov	r5, r0
   243f8:	eb0016c0 	bl	29f00 <CTimer::Get()>
   243fc:	eb001402 	bl	2940c <CTimer::GetClockTicks()>
   24400:	e5953054 	ldr	r3, [r5, #84]	; 0x54
   24404:	e3530000 	cmp	r3, #0
   24408:	0a000009 	beq	24434 <CScheduler::usSleep(unsigned int)+0x4c>
   2440c:	e5d32004 	ldrb	r2, [r3, #4]
   24410:	e3520000 	cmp	r2, #0
   24414:	1a00000a 	bne	24444 <CScheduler::usSleep(unsigned int)+0x5c>
   24418:	e3a02002 	mov	r2, #2
   2441c:	e0841000 	add	r1, r4, r0
   24420:	e5831008 	str	r1, [r3, #8]
   24424:	e1a00005 	mov	r0, r5
   24428:	e8bd4070 	pop	{r4, r5, r6, lr}
   2442c:	e5c32004 	strb	r2, [r3, #4]
   24430:	eaffffb1 	b	242fc <CScheduler::Yield()>
   24434:	e3a0206e 	mov	r2, #110	; 0x6e
   24438:	e59f1014 	ldr	r1, [pc, #20]	; 24454 <CScheduler::usSleep(unsigned int)+0x6c>
   2443c:	e59f0014 	ldr	r0, [pc, #20]	; 24458 <CScheduler::usSleep(unsigned int)+0x70>
   24440:	eb0000ee 	bl	24800 <assertion_failed>
   24444:	e3a0206f 	mov	r2, #111	; 0x6f
   24448:	e59f1004 	ldr	r1, [pc, #4]	; 24454 <CScheduler::usSleep(unsigned int)+0x6c>
   2444c:	e59f0008 	ldr	r0, [pc, #8]	; 2445c <CScheduler::usSleep(unsigned int)+0x74>
   24450:	eb0000ea 	bl	24800 <assertion_failed>
   24454:	00044be0 	.word	0x00044be0
   24458:	00044d1c 	.word	0x00044d1c
   2445c:	00044d2c 	.word	0x00044d2c

00024460 <CScheduler::Sleep(unsigned int)>:
   24460:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24464:	e59f5040 	ldr	r5, [pc, #64]	; 244ac <CScheduler::Sleep(unsigned int)+0x4c>
   24468:	e1a04001 	mov	r4, r1
   2446c:	e1510005 	cmp	r1, r5
   24470:	e1a06000 	mov	r6, r0
   24474:	9a000007 	bls	24498 <CScheduler::Sleep(unsigned int)+0x38>
   24478:	e59f7030 	ldr	r7, [pc, #48]	; 244b0 <CScheduler::Sleep(unsigned int)+0x50>
   2447c:	e2444c07 	sub	r4, r4, #1792	; 0x700
   24480:	e1a01007 	mov	r1, r7
   24484:	e1a00006 	mov	r0, r6
   24488:	e2444008 	sub	r4, r4, #8
   2448c:	ebffffd5 	bl	243e8 <CScheduler::usSleep(unsigned int)>
   24490:	e1540005 	cmp	r4, r5
   24494:	8afffff8 	bhi	2447c <CScheduler::Sleep(unsigned int)+0x1c>
   24498:	e59f1014 	ldr	r1, [pc, #20]	; 244b4 <CScheduler::Sleep(unsigned int)+0x54>
   2449c:	e1a00006 	mov	r0, r6
   244a0:	e0010491 	mul	r1, r1, r4
   244a4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   244a8:	eaffffce 	b	243e8 <CScheduler::usSleep(unsigned int)>
   244ac:	00000708 	.word	0x00000708
   244b0:	6b49d200 	.word	0x6b49d200
   244b4:	000f4240 	.word	0x000f4240

000244b8 <CScheduler::MsSleep(unsigned int)>:
   244b8:	e3510000 	cmp	r1, #0
   244bc:	012fff1e 	bxeq	lr
   244c0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   244c4:	e0010193 	mul	r1, r3, r1
   244c8:	eaffffc6 	b	243e8 <CScheduler::usSleep(unsigned int)>

000244cc <CScheduler::BlockTask(CTask**)>:
   244cc:	e3510000 	cmp	r1, #0
   244d0:	e92d4010 	push	{r4, lr}
   244d4:	0a00000b 	beq	24508 <CScheduler::BlockTask(CTask**)+0x3c>
   244d8:	e5902054 	ldr	r2, [r0, #84]	; 0x54
   244dc:	e5812000 	str	r2, [r1]
   244e0:	e5903054 	ldr	r3, [r0, #84]	; 0x54
   244e4:	e3530000 	cmp	r3, #0
   244e8:	0a00000a 	beq	24518 <CScheduler::BlockTask(CTask**)+0x4c>
   244ec:	e5d32004 	ldrb	r2, [r3, #4]
   244f0:	e3520000 	cmp	r2, #0
   244f4:	1a00000b 	bne	24528 <CScheduler::BlockTask(CTask**)+0x5c>
   244f8:	e8bd4010 	pop	{r4, lr}
   244fc:	e3a02001 	mov	r2, #1
   24500:	e5c32004 	strb	r2, [r3, #4]
   24504:	eaffff7c 	b	242fc <CScheduler::Yield()>
   24508:	e3a020b7 	mov	r2, #183	; 0xb7
   2450c:	e59f1024 	ldr	r1, [pc, #36]	; 24538 <CScheduler::BlockTask(CTask**)+0x6c>
   24510:	e59f0024 	ldr	r0, [pc, #36]	; 2453c <CScheduler::BlockTask(CTask**)+0x70>
   24514:	eb0000b9 	bl	24800 <assertion_failed>
   24518:	e3a020ba 	mov	r2, #186	; 0xba
   2451c:	e59f1014 	ldr	r1, [pc, #20]	; 24538 <CScheduler::BlockTask(CTask**)+0x6c>
   24520:	e59f0018 	ldr	r0, [pc, #24]	; 24540 <CScheduler::BlockTask(CTask**)+0x74>
   24524:	eb0000b5 	bl	24800 <assertion_failed>
   24528:	e3a020bb 	mov	r2, #187	; 0xbb
   2452c:	e59f1004 	ldr	r1, [pc, #4]	; 24538 <CScheduler::BlockTask(CTask**)+0x6c>
   24530:	e59f000c 	ldr	r0, [pc, #12]	; 24544 <CScheduler::BlockTask(CTask**)+0x78>
   24534:	eb0000b1 	bl	24800 <assertion_failed>
   24538:	00044be0 	.word	0x00044be0
   2453c:	00044c94 	.word	0x00044c94
   24540:	00044d1c 	.word	0x00044d1c
   24544:	00044d2c 	.word	0x00044d2c

00024548 <CScheduler::Get()>:
   24548:	e59f3020 	ldr	r3, [pc, #32]	; 24570 <CScheduler::Get()+0x28>
   2454c:	e5930000 	ldr	r0, [r3]
   24550:	e3500000 	cmp	r0, #0
   24554:	0a000000 	beq	2455c <CScheduler::Get()+0x14>
   24558:	e12fff1e 	bx	lr
   2455c:	e92d4010 	push	{r4, lr}
   24560:	e59f200c 	ldr	r2, [pc, #12]	; 24574 <CScheduler::Get()+0x2c>
   24564:	e59f100c 	ldr	r1, [pc, #12]	; 24578 <CScheduler::Get()+0x30>
   24568:	e59f000c 	ldr	r0, [pc, #12]	; 2457c <CScheduler::Get()+0x34>
   2456c:	eb0000a3 	bl	24800 <assertion_failed>
   24570:	0004e0e8 	.word	0x0004e0e8
   24574:	0000010d 	.word	0x0000010d
   24578:	00044be0 	.word	0x00044be0
   2457c:	00043924 	.word	0x00043924

00024580 <TaskSwitch>:
   24580:	eef82a10 	vmrs	r2, fpexc
   24584:	eef13a10 	vmrs	r3, fpscr
   24588:	e8a07ffd 	stmia	r0!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   2458c:	ec800b20 	vstmia	r0, {d0-d15}
   24590:	e8b17ffd 	ldm	r1!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   24594:	eee82a10 	vmsr	fpexc, r2
   24598:	eee13a10 	vmsr	fpscr, r3
   2459c:	ec910b20 	vldmia	r1, {d0-d15}
   245a0:	e12fff1e 	bx	lr

000245a4 <CSynchronizationEvent::CSynchronizationEvent(bool)>:
   245a4:	e3a02000 	mov	r2, #0
   245a8:	e5c01000 	strb	r1, [r0]
   245ac:	e5802004 	str	r2, [r0, #4]
   245b0:	e12fff1e 	bx	lr

000245b4 <CSynchronizationEvent::~CSynchronizationEvent()>:
   245b4:	e5903004 	ldr	r3, [r0, #4]
   245b8:	e3530000 	cmp	r3, #0
   245bc:	1a000000 	bne	245c4 <CSynchronizationEvent::~CSynchronizationEvent()+0x10>
   245c0:	e12fff1e 	bx	lr
   245c4:	e92d4010 	push	{r4, lr}
   245c8:	e3a02023 	mov	r2, #35	; 0x23
   245cc:	e59f1004 	ldr	r1, [pc, #4]	; 245d8 <CSynchronizationEvent::~CSynchronizationEvent()+0x24>
   245d0:	e59f0004 	ldr	r0, [pc, #4]	; 245dc <CSynchronizationEvent::~CSynchronizationEvent()+0x28>
   245d4:	eb000089 	bl	24800 <assertion_failed>
   245d8:	00044d58 	.word	0x00044d58
   245dc:	00044d74 	.word	0x00044d74

000245e0 <CSynchronizationEvent::GetState()>:
   245e0:	e5d00000 	ldrb	r0, [r0]
   245e4:	e12fff1e 	bx	lr

000245e8 <CSynchronizationEvent::Clear()>:
   245e8:	e3a03000 	mov	r3, #0
   245ec:	e5c03000 	strb	r3, [r0]
   245f0:	e12fff1e 	bx	lr

000245f4 <CSynchronizationEvent::Set()>:
   245f4:	e5d03000 	ldrb	r3, [r0]
   245f8:	e3530000 	cmp	r3, #0
   245fc:	112fff1e 	bxne	lr
   24600:	e3a02001 	mov	r2, #1
   24604:	e5903004 	ldr	r3, [r0, #4]
   24608:	e5c02000 	strb	r2, [r0]
   2460c:	e3530000 	cmp	r3, #0
   24610:	012fff1e 	bxeq	lr
   24614:	e92d4010 	push	{r4, lr}
   24618:	e1a04000 	mov	r4, r0
   2461c:	ebffffc9 	bl	24548 <CScheduler::Get()>
   24620:	e2841004 	add	r1, r4, #4
   24624:	e8bd4010 	pop	{r4, lr}
   24628:	eafffeda 	b	24198 <CScheduler::WakeTask(CTask**)>

0002462c <CSynchronizationEvent::Wait()>:
   2462c:	e5d03000 	ldrb	r3, [r0]
   24630:	e3530000 	cmp	r3, #0
   24634:	112fff1e 	bxne	lr
   24638:	e5903004 	ldr	r3, [r0, #4]
   2463c:	e92d4010 	push	{r4, lr}
   24640:	e3530000 	cmp	r3, #0
   24644:	e1a04000 	mov	r4, r0
   24648:	1a000009 	bne	24674 <CSynchronizationEvent::Wait()+0x48>
   2464c:	ebffffbd 	bl	24548 <CScheduler::Get()>
   24650:	e2841004 	add	r1, r4, #4
   24654:	ebffff9c 	bl	244cc <CScheduler::BlockTask(CTask**)>
   24658:	e5d43000 	ldrb	r3, [r4]
   2465c:	e3530000 	cmp	r3, #0
   24660:	18bd8010 	popne	{r4, pc}
   24664:	e3a0204c 	mov	r2, #76	; 0x4c
   24668:	e59f1014 	ldr	r1, [pc, #20]	; 24684 <CSynchronizationEvent::Wait()+0x58>
   2466c:	e59f0014 	ldr	r0, [pc, #20]	; 24688 <CSynchronizationEvent::Wait()+0x5c>
   24670:	eb000062 	bl	24800 <assertion_failed>
   24674:	e3a02049 	mov	r2, #73	; 0x49
   24678:	e59f1004 	ldr	r1, [pc, #4]	; 24684 <CSynchronizationEvent::Wait()+0x58>
   2467c:	e59f0008 	ldr	r0, [pc, #8]	; 2468c <CSynchronizationEvent::Wait()+0x60>
   24680:	eb00005e 	bl	24800 <assertion_failed>
   24684:	00044d58 	.word	0x00044d58
   24688:	00044d88 	.word	0x00044d88
   2468c:	00044d74 	.word	0x00044d74

00024690 <CActLED::CActLED(bool)>:
   24690:	e3a03000 	mov	r3, #0
   24694:	e59f2088 	ldr	r2, [pc, #136]	; 24724 <CActLED::CActLED(bool)+0x94>
   24698:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2469c:	e5803000 	str	r3, [r0]
   246a0:	e5803004 	str	r3, [r0, #4]
   246a4:	e1a07001 	mov	r7, r1
   246a8:	e5820000 	str	r0, [r2]
   246ac:	e1a05000 	mov	r5, r0
   246b0:	eb000c3f 	bl	277b4 <CMachineInfo::Get()>
   246b4:	eb000b68 	bl	2745c <CMachineInfo::GetActLEDInfo() const>
   246b8:	e2106080 	ands	r6, r0, #128	; 0x80
   246bc:	e1a04000 	mov	r4, r0
   246c0:	1a00000f 	bne	24704 <CActLED::CActLED(bool)+0x74>
   246c4:	e3a00028 	mov	r0, #40	; 0x28
   246c8:	eb001a69 	bl	2b074 <operator new(unsigned int)>
   246cc:	e1a07000 	mov	r7, r0
   246d0:	e1a03006 	mov	r3, r6
   246d4:	e3a02001 	mov	r2, #1
   246d8:	e204103f 	and	r1, r4, #63	; 0x3f
   246dc:	eb0003cb 	bl	25610 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   246e0:	e5857000 	str	r7, [r5]
   246e4:	e1a04324 	lsr	r4, r4, #6
   246e8:	e2244001 	eor	r4, r4, #1
   246ec:	e2044001 	and	r4, r4, #1
   246f0:	e1a00005 	mov	r0, r5
   246f4:	e5c54008 	strb	r4, [r5, #8]
   246f8:	eb00001b 	bl	2476c <CActLED::Off()>
   246fc:	e1a00005 	mov	r0, r5
   24700:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24704:	e3a00014 	mov	r0, #20
   24708:	eb001a59 	bl	2b074 <operator new(unsigned int)>
   2470c:	e1a06000 	mov	r6, r0
   24710:	e1a02007 	mov	r2, r7
   24714:	e204103f 	and	r1, r4, #63	; 0x3f
   24718:	eb001893 	bl	2a96c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   2471c:	e5856004 	str	r6, [r5, #4]
   24720:	eaffffef 	b	246e4 <CActLED::CActLED(bool)+0x54>
   24724:	0004e0ec 	.word	0x0004e0ec

00024728 <CActLED::~CActLED()>:
   24728:	e3a02000 	mov	r2, #0
   2472c:	e59f3004 	ldr	r3, [pc, #4]	; 24738 <CActLED::~CActLED()+0x10>
   24730:	e5832000 	str	r2, [r3]
   24734:	e12fff1e 	bx	lr
   24738:	0004e0ec 	.word	0x0004e0ec

0002473c <CActLED::On()>:
   2473c:	e5903000 	ldr	r3, [r0]
   24740:	e3530000 	cmp	r3, #0
   24744:	0a000002 	beq	24754 <CActLED::On()+0x18>
   24748:	e5d01008 	ldrb	r1, [r0, #8]
   2474c:	e1a00003 	mov	r0, r3
   24750:	ea000453 	b	258a4 <CGPIOPin::Write(unsigned int)>
   24754:	e5903004 	ldr	r3, [r0, #4]
   24758:	e3530000 	cmp	r3, #0
   2475c:	012fff1e 	bxeq	lr
   24760:	e5d01008 	ldrb	r1, [r0, #8]
   24764:	e1a00003 	mov	r0, r3
   24768:	ea0018d8 	b	2aad0 <CVirtualGPIOPin::Write(unsigned int)>

0002476c <CActLED::Off()>:
   2476c:	e5903000 	ldr	r3, [r0]
   24770:	e3530000 	cmp	r3, #0
   24774:	0a000003 	beq	24788 <CActLED::Off()+0x1c>
   24778:	e5d01008 	ldrb	r1, [r0, #8]
   2477c:	e1a00003 	mov	r0, r3
   24780:	e2211001 	eor	r1, r1, #1
   24784:	ea000446 	b	258a4 <CGPIOPin::Write(unsigned int)>
   24788:	e5903004 	ldr	r3, [r0, #4]
   2478c:	e3530000 	cmp	r3, #0
   24790:	012fff1e 	bxeq	lr
   24794:	e5d01008 	ldrb	r1, [r0, #8]
   24798:	e1a00003 	mov	r0, r3
   2479c:	e2211001 	eor	r1, r1, #1
   247a0:	ea0018ca 	b	2aad0 <CVirtualGPIOPin::Write(unsigned int)>

000247a4 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   247a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   247a8:	e2516000 	subs	r6, r1, #0
   247ac:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   247b0:	e1a08003 	mov	r8, r3
   247b4:	e1a07002 	mov	r7, r2
   247b8:	e1a05000 	mov	r5, r0
   247bc:	e3a04001 	mov	r4, #1
   247c0:	e1a00005 	mov	r0, r5
   247c4:	ebffffdc 	bl	2473c <CActLED::On()>
   247c8:	e1a00007 	mov	r0, r7
   247cc:	eb001592 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
   247d0:	e1a00005 	mov	r0, r5
   247d4:	ebffffe4 	bl	2476c <CActLED::Off()>
   247d8:	e2844001 	add	r4, r4, #1
   247dc:	e1a00008 	mov	r0, r8
   247e0:	eb00158d 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
   247e4:	e1560004 	cmp	r6, r4
   247e8:	2afffff4 	bcs	247c0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x1c>
   247ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000247f0 <CActLED::Get()>:
   247f0:	e59f3004 	ldr	r3, [pc, #4]	; 247fc <CActLED::Get()+0xc>
   247f4:	e5930000 	ldr	r0, [r3]
   247f8:	e12fff1e 	bx	lr
   247fc:	0004e0ec 	.word	0x0004e0ec

00024800 <assertion_failed>:
   24800:	e92d4080 	push	{r7, lr}
   24804:	e1a05000 	mov	r5, r0
   24808:	e24dd018 	sub	sp, sp, #24
   2480c:	e1a06001 	mov	r6, r1
   24810:	e1a07002 	mov	r7, r2
   24814:	e1a0400d 	mov	r4, sp
   24818:	eb001ea7 	bl	2c2bc <CInterruptSystem::DisableFIQ()>
   2481c:	f1080040 	cpsie	f
   24820:	e28d0008 	add	r0, sp, #8
   24824:	eb000cce 	bl	27b64 <CString::CString()>
   24828:	e1a03007 	mov	r3, r7
   2482c:	e1a02006 	mov	r2, r6
   24830:	e59f1044 	ldr	r1, [pc, #68]	; 2487c <assertion_failed+0x7c>
   24834:	e28d0008 	add	r0, sp, #8
   24838:	eb00120c 	bl	29070 <CString::Format(char const*, ...)>
   2483c:	e28d0008 	add	r0, sp, #8
   24840:	eb000cdd 	bl	27bbc <CString::operator char const*() const>
   24844:	e1a01000 	mov	r1, r0
   24848:	e1a00004 	mov	r0, r4
   2484c:	eb0001a5 	bl	24ee8 <debug_stacktrace(unsigned int const*, char const*)>
   24850:	eb0008dd 	bl	26bcc <CLogger::Get()>
   24854:	e1a04000 	mov	r4, r0
   24858:	e28d0008 	add	r0, sp, #8
   2485c:	eb000cd6 	bl	27bbc <CString::operator char const*() const>
   24860:	e58d5000 	str	r5, [sp]
   24864:	e1a01000 	mov	r1, r0
   24868:	e59f3010 	ldr	r3, [pc, #16]	; 24880 <assertion_failed+0x80>
   2486c:	e1a00004 	mov	r0, r4
   24870:	e3a02000 	mov	r2, #0
   24874:	eb000811 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24878:	eafffffe 	b	24878 <assertion_failed+0x78>
   2487c:	00044d94 	.word	0x00044d94
   24880:	00044d9c 	.word	0x00044d9c

00024884 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   24884:	e92d4010 	push	{r4, lr}
   24888:	e1a04000 	mov	r4, r0
   2488c:	e1a02001 	mov	r2, r1
   24890:	e3a01008 	mov	r1, #8
   24894:	eb001f25 	bl	2c530 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   24898:	e1a00004 	mov	r0, r4
   2489c:	e8bd8010 	pop	{r4, pc}

000248a0 <CBcmPropertyTags::~CBcmPropertyTags()>:
   248a0:	e92d4010 	push	{r4, lr}
   248a4:	e1a04000 	mov	r4, r0
   248a8:	eb001f23 	bl	2c53c <CBcmMailBox::~CBcmMailBox()>
   248ac:	e1a00004 	mov	r0, r4
   248b0:	e8bd8010 	pop	{r4, pc}

000248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   248b4:	e92d4070 	push	{r4, r5, r6, lr}
   248b8:	e2524000 	subs	r4, r2, #0
   248bc:	0a000030 	beq	24984 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd0>
   248c0:	e353000f 	cmp	r3, #15
   248c4:	9a000032 	bls	24994 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   248c8:	e59d2010 	ldr	r2, [sp, #16]
   248cc:	e243e00c 	sub	lr, r3, #12
   248d0:	e3c2c102 	bic	ip, r2, #-2147483648	; 0x80000000
   248d4:	e1a0582e 	lsr	r5, lr, #16
   248d8:	e1a0642e 	lsr	r6, lr, #8
   248dc:	e5c4e004 	strb	lr, [r4, #4]
   248e0:	e1a02003 	mov	r2, r3
   248e4:	e1a0ec2e 	lsr	lr, lr, #24
   248e8:	e1a0342c 	lsr	r3, ip, #8
   248ec:	e5c41000 	strb	r1, [r4]
   248f0:	e5c45006 	strb	r5, [r4, #6]
   248f4:	e5c4e007 	strb	lr, [r4, #7]
   248f8:	e1a0582c 	lsr	r5, ip, #16
   248fc:	e1a0ec2c 	lsr	lr, ip, #24
   24900:	e5c4c008 	strb	ip, [r4, #8]
   24904:	e5c43009 	strb	r3, [r4, #9]
   24908:	e1a0c421 	lsr	ip, r1, #8
   2490c:	e1a03821 	lsr	r3, r1, #16
   24910:	e1a01c21 	lsr	r1, r1, #24
   24914:	e5c41003 	strb	r1, [r4, #3]
   24918:	e5c46005 	strb	r6, [r4, #5]
   2491c:	e5c4500a 	strb	r5, [r4, #10]
   24920:	e5c4e00b 	strb	lr, [r4, #11]
   24924:	e5c4c001 	strb	ip, [r4, #1]
   24928:	e5c43002 	strb	r3, [r4, #2]
   2492c:	e1a01004 	mov	r1, r4
   24930:	eb00001c 	bl	249a8 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   24934:	e3500000 	cmp	r0, #0
   24938:	08bd8070 	popeq	{r4, r5, r6, pc}
   2493c:	e5d42009 	ldrb	r2, [r4, #9]
   24940:	e5d43008 	ldrb	r3, [r4, #8]
   24944:	e5d4100a 	ldrb	r1, [r4, #10]
   24948:	e1833402 	orr	r3, r3, r2, lsl #8
   2494c:	e5d4200b 	ldrb	r2, [r4, #11]
   24950:	e1833801 	orr	r3, r3, r1, lsl #16
   24954:	e1833c02 	orr	r3, r3, r2, lsl #24
   24958:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   2495c:	e2930000 	adds	r0, r3, #0
   24960:	e1a0c423 	lsr	ip, r3, #8
   24964:	e1a01823 	lsr	r1, r3, #16
   24968:	e1a02c23 	lsr	r2, r3, #24
   2496c:	13a00001 	movne	r0, #1
   24970:	e5c43008 	strb	r3, [r4, #8]
   24974:	e5c4c009 	strb	ip, [r4, #9]
   24978:	e5c4100a 	strb	r1, [r4, #10]
   2497c:	e5c4200b 	strb	r2, [r4, #11]
   24980:	e8bd8070 	pop	{r4, r5, r6, pc}
   24984:	e59f1018 	ldr	r1, [pc, #24]	; 249a4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   24988:	e3a02033 	mov	r2, #51	; 0x33
   2498c:	e2810014 	add	r0, r1, #20
   24990:	ebffff9a 	bl	24800 <assertion_failed>
   24994:	e59f1008 	ldr	r1, [pc, #8]	; 249a4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xf0>
   24998:	e3a02034 	mov	r2, #52	; 0x34
   2499c:	e2810020 	add	r0, r1, #32
   249a0:	ebffff96 	bl	24800 <assertion_failed>
   249a4:	00044db4 	.word	0x00044db4

000249a8 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   249a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   249ac:	e2519000 	subs	r9, r1, #0
   249b0:	0a000034 	beq	24a88 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
   249b4:	e352000f 	cmp	r2, #15
   249b8:	e1a07002 	mov	r7, r2
   249bc:	9a000035 	bls	24a98 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   249c0:	e282600c 	add	r6, r2, #12
   249c4:	e2165003 	ands	r5, r6, #3
   249c8:	1a000036 	bne	24aa8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x100>
   249cc:	e1a0a000 	mov	sl, r0
   249d0:	e1a00005 	mov	r0, r5
   249d4:	eb001c96 	bl	2bc34 <CMemorySystem::GetCoherentPage(unsigned int)>
   249d8:	e1a01426 	lsr	r1, r6, #8
   249dc:	e1a02826 	lsr	r2, r6, #16
   249e0:	e1a03c26 	lsr	r3, r6, #24
   249e4:	e2808008 	add	r8, r0, #8
   249e8:	e5c06000 	strb	r6, [r0]
   249ec:	e5c05004 	strb	r5, [r0, #4]
   249f0:	e5c05005 	strb	r5, [r0, #5]
   249f4:	e5c05006 	strb	r5, [r0, #6]
   249f8:	e5c05007 	strb	r5, [r0, #7]
   249fc:	e5c01001 	strb	r1, [r0, #1]
   24a00:	e5c02002 	strb	r2, [r0, #2]
   24a04:	e5c03003 	strb	r3, [r0, #3]
   24a08:	e1a04000 	mov	r4, r0
   24a0c:	e1a02007 	mov	r2, r7
   24a10:	e1a00008 	mov	r0, r8
   24a14:	e1a01009 	mov	r1, r9
   24a18:	eb0017bc 	bl	2a910 <memcpy>
   24a1c:	e7885007 	str	r5, [r8, r7]
   24a20:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   24a24:	e3c46103 	bic	r6, r4, #-1073741824	; 0xc0000000
   24a28:	e3866101 	orr	r6, r6, #1073741824	; 0x40000000
   24a2c:	e1a0000a 	mov	r0, sl
   24a30:	e1a01006 	mov	r1, r6
   24a34:	eb001ec1 	bl	2c540 <CBcmMailBox::WriteRead(unsigned int)>
   24a38:	e1560000 	cmp	r6, r0
   24a3c:	0a000001 	beq	24a48 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
   24a40:	e3a00000 	mov	r0, #0
   24a44:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24a48:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   24a4c:	e5d42005 	ldrb	r2, [r4, #5]
   24a50:	e5d43004 	ldrb	r3, [r4, #4]
   24a54:	e5d41006 	ldrb	r1, [r4, #6]
   24a58:	e1833402 	orr	r3, r3, r2, lsl #8
   24a5c:	e5d42007 	ldrb	r2, [r4, #7]
   24a60:	e1833801 	orr	r3, r3, r1, lsl #16
   24a64:	e1833c02 	orr	r3, r3, r2, lsl #24
   24a68:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   24a6c:	1afffff3 	bne	24a40 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x98>
   24a70:	e1a02007 	mov	r2, r7
   24a74:	e1a01008 	mov	r1, r8
   24a78:	e1a00009 	mov	r0, r9
   24a7c:	eb0017a3 	bl	2a910 <memcpy>
   24a80:	e3a00001 	mov	r0, #1
   24a84:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24a88:	e59f1028 	ldr	r1, [pc, #40]	; 24ab8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24a8c:	e3a0204b 	mov	r2, #75	; 0x4b
   24a90:	e2810048 	add	r0, r1, #72	; 0x48
   24a94:	ebffff59 	bl	24800 <assertion_failed>
   24a98:	e59f1018 	ldr	r1, [pc, #24]	; 24ab8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24a9c:	e3a0204c 	mov	r2, #76	; 0x4c
   24aa0:	e2810054 	add	r0, r1, #84	; 0x54
   24aa4:	ebffff55 	bl	24800 <assertion_failed>
   24aa8:	e59f1008 	ldr	r1, [pc, #8]	; 24ab8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x110>
   24aac:	e3a0204e 	mov	r2, #78	; 0x4e
   24ab0:	e2810080 	add	r0, r1, #128	; 0x80
   24ab4:	ebffff51 	bl	24800 <assertion_failed>
   24ab8:	00044db4 	.word	0x00044db4

00024abc <CClassAllocator::~CClassAllocator()>:
   24abc:	e3a03000 	mov	r3, #0
   24ac0:	e92d4010 	push	{r4, lr}
   24ac4:	e1a04000 	mov	r4, r0
   24ac8:	e590000c 	ldr	r0, [r0, #12]
   24acc:	e5843010 	str	r3, [r4, #16]
   24ad0:	e1500003 	cmp	r0, r3
   24ad4:	0a000000 	beq	24adc <CClassAllocator::~CClassAllocator()+0x20>
   24ad8:	eb001e64 	bl	2c470 <free>
   24adc:	e1a00004 	mov	r0, r4
   24ae0:	e8bd8010 	pop	{r4, pc}

00024ae4 <CClassAllocator::Init(unsigned int, unsigned int)>:
   24ae4:	e3510000 	cmp	r1, #0
   24ae8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24aec:	e1a06000 	mov	r6, r0
   24af0:	03a00020 	moveq	r0, #32
   24af4:	1281301f 	addne	r3, r1, #31
   24af8:	13c3000f 	bicne	r0, r3, #15
   24afc:	e3520000 	cmp	r2, #0
   24b00:	e5860000 	str	r0, [r6]
   24b04:	0a00001b 	beq	24b78 <CClassAllocator::Init(unsigned int, unsigned int)+0x94>
   24b08:	e5862004 	str	r2, [r6, #4]
   24b0c:	e0000290 	mul	r0, r0, r2
   24b10:	eb001e50 	bl	2c458 <malloc>
   24b14:	e3500000 	cmp	r0, #0
   24b18:	e586000c 	str	r0, [r6, #12]
   24b1c:	0a000019 	beq	24b88 <CClassAllocator::Init(unsigned int, unsigned int)+0xa4>
   24b20:	e210100f 	ands	r1, r0, #15
   24b24:	1a000019 	bne	24b90 <CClassAllocator::Init(unsigned int, unsigned int)+0xac>
   24b28:	e5965004 	ldr	r5, [r6, #4]
   24b2c:	e3550000 	cmp	r5, #0
   24b30:	0a00001a 	beq	24ba0 <CClassAllocator::Init(unsigned int, unsigned int)+0xbc>
   24b34:	e5964000 	ldr	r4, [r6]
   24b38:	e596c010 	ldr	ip, [r6, #16]
   24b3c:	e1a03000 	mov	r3, r0
   24b40:	e59f705c 	ldr	r7, [pc, #92]	; 24ba4 <CClassAllocator::Init(unsigned int, unsigned int)+0xc0>
   24b44:	ea000000 	b	24b4c <CClassAllocator::Init(unsigned int, unsigned int)+0x68>
   24b48:	e1a01002 	mov	r1, r2
   24b4c:	e2812001 	add	r2, r1, #1
   24b50:	e1550002 	cmp	r5, r2
   24b54:	e583c00c 	str	ip, [r3, #12]
   24b58:	e1a0e003 	mov	lr, r3
   24b5c:	e5837000 	str	r7, [r3]
   24b60:	e1a0c003 	mov	ip, r3
   24b64:	e0833004 	add	r3, r3, r4
   24b68:	1afffff6 	bne	24b48 <CClassAllocator::Init(unsigned int, unsigned int)+0x64>
   24b6c:	e0210491 	mla	r1, r1, r4, r0
   24b70:	e5861010 	str	r1, [r6, #16]
   24b74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24b78:	e3a02055 	mov	r2, #85	; 0x55
   24b7c:	e59f1024 	ldr	r1, [pc, #36]	; 24ba8 <CClassAllocator::Init(unsigned int, unsigned int)+0xc4>
   24b80:	e59f0024 	ldr	r0, [pc, #36]	; 24bac <CClassAllocator::Init(unsigned int, unsigned int)+0xc8>
   24b84:	ebffff1d 	bl	24800 <assertion_failed>
   24b88:	e5860004 	str	r0, [r6, #4]
   24b8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24b90:	e3a0205f 	mov	r2, #95	; 0x5f
   24b94:	e59f100c 	ldr	r1, [pc, #12]	; 24ba8 <CClassAllocator::Init(unsigned int, unsigned int)+0xc4>
   24b98:	e59f0010 	ldr	r0, [pc, #16]	; 24bb0 <CClassAllocator::Init(unsigned int, unsigned int)+0xcc>
   24b9c:	ebffff17 	bl	24800 <assertion_failed>
   24ba0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24ba4:	4f425350 	.word	0x4f425350
   24ba8:	00044e4c 	.word	0x00044e4c
   24bac:	00044e60 	.word	0x00044e60
   24bb0:	00044e78 	.word	0x00044e78

00024bb4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   24bb4:	e92d4010 	push	{r4, lr}
   24bb8:	e3a0c000 	mov	ip, #0
   24bbc:	e3a0e001 	mov	lr, #1
   24bc0:	e1a04000 	mov	r4, r0
   24bc4:	e5803008 	str	r3, [r0, #8]
   24bc8:	e580e018 	str	lr, [r0, #24]
   24bcc:	e580c00c 	str	ip, [r0, #12]
   24bd0:	e580c010 	str	ip, [r0, #16]
   24bd4:	e5c0c014 	strb	ip, [r0, #20]
   24bd8:	ebffffc1 	bl	24ae4 <CClassAllocator::Init(unsigned int, unsigned int)>
   24bdc:	e1a00004 	mov	r0, r4
   24be0:	e8bd8010 	pop	{r4, pc}

00024be4 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   24be4:	e92d4070 	push	{r4, r5, r6, lr}
   24be8:	e3a0c000 	mov	ip, #0
   24bec:	e3a0e001 	mov	lr, #1
   24bf0:	e1a04000 	mov	r4, r0
   24bf4:	e59d5010 	ldr	r5, [sp, #16]
   24bf8:	e5803018 	str	r3, [r0, #24]
   24bfc:	e5805008 	str	r5, [r0, #8]
   24c00:	e5c0e014 	strb	lr, [r0, #20]
   24c04:	e580c00c 	str	ip, [r0, #12]
   24c08:	e580c010 	str	ip, [r0, #16]
   24c0c:	ebffffb4 	bl	24ae4 <CClassAllocator::Init(unsigned int, unsigned int)>
   24c10:	e1a00004 	mov	r0, r4
   24c14:	e8bd8070 	pop	{r4, r5, r6, pc}

00024c18 <CClassAllocator::Allocate()>:
   24c18:	e92d4030 	push	{r4, r5, lr}
   24c1c:	e5d03014 	ldrb	r3, [r0, #20]
   24c20:	e24dd00c 	sub	sp, sp, #12
   24c24:	e3530000 	cmp	r3, #0
   24c28:	e1a05000 	mov	r5, r0
   24c2c:	0a000002 	beq	24c3c <CClassAllocator::Allocate()+0x24>
   24c30:	e5900018 	ldr	r0, [r0, #24]
   24c34:	e3500000 	cmp	r0, #0
   24c38:	1a000015 	bne	24c94 <CClassAllocator::Allocate()+0x7c>
   24c3c:	e5954010 	ldr	r4, [r5, #16]
   24c40:	e3540000 	cmp	r4, #0
   24c44:	0a00001d 	beq	24cc0 <CClassAllocator::Allocate()+0xa8>
   24c48:	e59f30a4 	ldr	r3, [pc, #164]	; 24cf4 <CClassAllocator::Allocate()+0xdc>
   24c4c:	e5942000 	ldr	r2, [r4]
   24c50:	e1520003 	cmp	r2, r3
   24c54:	1a000022 	bne	24ce4 <CClassAllocator::Allocate()+0xcc>
   24c58:	e3a03000 	mov	r3, #0
   24c5c:	e5d51014 	ldrb	r1, [r5, #20]
   24c60:	e594200c 	ldr	r2, [r4, #12]
   24c64:	e1510003 	cmp	r1, r3
   24c68:	e5852010 	str	r2, [r5, #16]
   24c6c:	e584300c 	str	r3, [r4, #12]
   24c70:	1a000002 	bne	24c80 <CClassAllocator::Allocate()+0x68>
   24c74:	e2840010 	add	r0, r4, #16
   24c78:	e28dd00c 	add	sp, sp, #12
   24c7c:	e8bd8030 	pop	{r4, r5, pc}
   24c80:	e5953018 	ldr	r3, [r5, #24]
   24c84:	e3530000 	cmp	r3, #0
   24c88:	0afffff9 	beq	24c74 <CClassAllocator::Allocate()+0x5c>
   24c8c:	eb001c55 	bl	2bde8 <LeaveCritical>
   24c90:	eafffff7 	b	24c74 <CClassAllocator::Allocate()+0x5c>
   24c94:	eb001c28 	bl	2bd3c <EnterCritical>
   24c98:	e5954010 	ldr	r4, [r5, #16]
   24c9c:	e3540000 	cmp	r4, #0
   24ca0:	1affffe8 	bne	24c48 <CClassAllocator::Allocate()+0x30>
   24ca4:	e5d53014 	ldrb	r3, [r5, #20]
   24ca8:	e3530000 	cmp	r3, #0
   24cac:	0a000003 	beq	24cc0 <CClassAllocator::Allocate()+0xa8>
   24cb0:	e5953018 	ldr	r3, [r5, #24]
   24cb4:	e3530000 	cmp	r3, #0
   24cb8:	0a000000 	beq	24cc0 <CClassAllocator::Allocate()+0xa8>
   24cbc:	eb001c49 	bl	2bde8 <LeaveCritical>
   24cc0:	eb0007c1 	bl	26bcc <CLogger::Get()>
   24cc4:	e5953004 	ldr	r3, [r5, #4]
   24cc8:	e5951008 	ldr	r1, [r5, #8]
   24ccc:	e3a02000 	mov	r2, #0
   24cd0:	e58d3000 	str	r3, [sp]
   24cd4:	e59f301c 	ldr	r3, [pc, #28]	; 24cf8 <CClassAllocator::Allocate()+0xe0>
   24cd8:	eb0006f8 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24cdc:	e3a00000 	mov	r0, #0
   24ce0:	eaffffe4 	b	24c78 <CClassAllocator::Allocate()+0x60>
   24ce4:	e3a02082 	mov	r2, #130	; 0x82
   24ce8:	e59f100c 	ldr	r1, [pc, #12]	; 24cfc <CClassAllocator::Allocate()+0xe4>
   24cec:	e59f000c 	ldr	r0, [pc, #12]	; 24d00 <CClassAllocator::Allocate()+0xe8>
   24cf0:	ebfffec2 	bl	24800 <assertion_failed>
   24cf4:	4f425350 	.word	0x4f425350
   24cf8:	00044eb4 	.word	0x00044eb4
   24cfc:	00044e4c 	.word	0x00044e4c
   24d00:	00044ee0 	.word	0x00044ee0

00024d04 <CClassAllocator::Free(void*)>:
   24d04:	e92d4070 	push	{r4, r5, r6, lr}
   24d08:	e2514000 	subs	r4, r1, #0
   24d0c:	0a00001e 	beq	24d8c <CClassAllocator::Free(void*)+0x88>
   24d10:	e59f30a4 	ldr	r3, [pc, #164]	; 24dbc <CClassAllocator::Free(void*)+0xb8>
   24d14:	e5142010 	ldr	r2, [r4, #-16]
   24d18:	e2446010 	sub	r6, r4, #16
   24d1c:	e1520003 	cmp	r2, r3
   24d20:	1a00001d 	bne	24d9c <CClassAllocator::Free(void*)+0x98>
   24d24:	e5143004 	ldr	r3, [r4, #-4]
   24d28:	e3530000 	cmp	r3, #0
   24d2c:	1a00001e 	bne	24dac <CClassAllocator::Free(void*)+0xa8>
   24d30:	e5d03014 	ldrb	r3, [r0, #20]
   24d34:	e1a05000 	mov	r5, r0
   24d38:	e3530000 	cmp	r3, #0
   24d3c:	0a000002 	beq	24d4c <CClassAllocator::Free(void*)+0x48>
   24d40:	e5900018 	ldr	r0, [r0, #24]
   24d44:	e3500000 	cmp	r0, #0
   24d48:	1a000003 	bne	24d5c <CClassAllocator::Free(void*)+0x58>
   24d4c:	e5953010 	ldr	r3, [r5, #16]
   24d50:	e5043004 	str	r3, [r4, #-4]
   24d54:	e5856010 	str	r6, [r5, #16]
   24d58:	e8bd8070 	pop	{r4, r5, r6, pc}
   24d5c:	eb001bf6 	bl	2bd3c <EnterCritical>
   24d60:	e5d52014 	ldrb	r2, [r5, #20]
   24d64:	e5953010 	ldr	r3, [r5, #16]
   24d68:	e3520000 	cmp	r2, #0
   24d6c:	e5043004 	str	r3, [r4, #-4]
   24d70:	e5856010 	str	r6, [r5, #16]
   24d74:	08bd8070 	popeq	{r4, r5, r6, pc}
   24d78:	e5950018 	ldr	r0, [r5, #24]
   24d7c:	e3500000 	cmp	r0, #0
   24d80:	08bd8070 	popeq	{r4, r5, r6, pc}
   24d84:	e8bd4070 	pop	{r4, r5, r6, lr}
   24d88:	ea001c16 	b	2bde8 <LeaveCritical>
   24d8c:	e3a02090 	mov	r2, #144	; 0x90
   24d90:	e59f1028 	ldr	r1, [pc, #40]	; 24dc0 <CClassAllocator::Free(void*)+0xbc>
   24d94:	e59f0028 	ldr	r0, [pc, #40]	; 24dc4 <CClassAllocator::Free(void*)+0xc0>
   24d98:	ebfffe98 	bl	24800 <assertion_failed>
   24d9c:	e3a02094 	mov	r2, #148	; 0x94
   24da0:	e59f1018 	ldr	r1, [pc, #24]	; 24dc0 <CClassAllocator::Free(void*)+0xbc>
   24da4:	e59f001c 	ldr	r0, [pc, #28]	; 24dc8 <CClassAllocator::Free(void*)+0xc4>
   24da8:	ebfffe94 	bl	24800 <assertion_failed>
   24dac:	e3a02095 	mov	r2, #149	; 0x95
   24db0:	e59f1008 	ldr	r1, [pc, #8]	; 24dc0 <CClassAllocator::Free(void*)+0xbc>
   24db4:	e59f0010 	ldr	r0, [pc, #16]	; 24dcc <CClassAllocator::Free(void*)+0xc8>
   24db8:	ebfffe90 	bl	24800 <assertion_failed>
   24dbc:	4f425350 	.word	0x4f425350
   24dc0:	00044e4c 	.word	0x00044e4c
   24dc4:	00044f00 	.word	0x00044f00
   24dc8:	00044f0c 	.word	0x00044f0c
   24dcc:	00044f28 	.word	0x00044f28

00024dd0 <debug_hexdump(void const*, unsigned int, char const*)>:
   24dd0:	e3520000 	cmp	r2, #0
   24dd4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24dd8:	e1a05001 	mov	r5, r1
   24ddc:	e59f60f4 	ldr	r6, [pc, #244]	; 24ed8 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   24de0:	e1a04000 	mov	r4, r0
   24de4:	11a06002 	movne	r6, r2
   24de8:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   24dec:	eb000776 	bl	26bcc <CLogger::Get()>
   24df0:	e58d4004 	str	r4, [sp, #4]
   24df4:	e58d5000 	str	r5, [sp]
   24df8:	e1a01006 	mov	r1, r6
   24dfc:	e59f30d8 	ldr	r3, [pc, #216]	; 24edc <debug_hexdump(void const*, unsigned int, char const*)+0x10c>
   24e00:	e3a02004 	mov	r2, #4
   24e04:	eb0006ad 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24e08:	e3550000 	cmp	r5, #0
   24e0c:	0a00002b 	beq	24ec0 <debug_hexdump(void const*, unsigned int, char const*)+0xf0>
   24e10:	e3a09004 	mov	r9, #4
   24e14:	e59f80c4 	ldr	r8, [pc, #196]	; 24ee0 <debug_hexdump(void const*, unsigned int, char const*)+0x110>
   24e18:	e59f70c4 	ldr	r7, [pc, #196]	; 24ee4 <debug_hexdump(void const*, unsigned int, char const*)+0x114>
   24e1c:	eb00076a 	bl	26bcc <CLogger::Get()>
   24e20:	e5d4a00f 	ldrb	sl, [r4, #15]
   24e24:	e5d4e00e 	ldrb	lr, [r4, #14]
   24e28:	e5d4c00d 	ldrb	ip, [r4, #13]
   24e2c:	e5d4300c 	ldrb	r3, [r4, #12]
   24e30:	e5d4200b 	ldrb	r2, [r4, #11]
   24e34:	e5d4100a 	ldrb	r1, [r4, #10]
   24e38:	e5d4b009 	ldrb	fp, [r4, #9]
   24e3c:	e58da040 	str	sl, [sp, #64]	; 0x40
   24e40:	e5d4a008 	ldrb	sl, [r4, #8]
   24e44:	e58de03c 	str	lr, [sp, #60]	; 0x3c
   24e48:	e5d4e007 	ldrb	lr, [r4, #7]
   24e4c:	e58dc038 	str	ip, [sp, #56]	; 0x38
   24e50:	e5d4c006 	ldrb	ip, [r4, #6]
   24e54:	e58d3034 	str	r3, [sp, #52]	; 0x34
   24e58:	e5d43005 	ldrb	r3, [r4, #5]
   24e5c:	e58d2030 	str	r2, [sp, #48]	; 0x30
   24e60:	e5d42004 	ldrb	r2, [r4, #4]
   24e64:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   24e68:	e5d41003 	ldrb	r1, [r4, #3]
   24e6c:	e58db028 	str	fp, [sp, #40]	; 0x28
   24e70:	e5d4b002 	ldrb	fp, [r4, #2]
   24e74:	e58da024 	str	sl, [sp, #36]	; 0x24
   24e78:	e5d4a001 	ldrb	sl, [r4, #1]
   24e7c:	e58de020 	str	lr, [sp, #32]
   24e80:	e5d4e000 	ldrb	lr, [r4]
   24e84:	e58dc01c 	str	ip, [sp, #28]
   24e88:	e58d3018 	str	r3, [sp, #24]
   24e8c:	e004c008 	and	ip, r4, r8
   24e90:	e58d2014 	str	r2, [sp, #20]
   24e94:	e58d1010 	str	r1, [sp, #16]
   24e98:	e1a03007 	mov	r3, r7
   24e9c:	e1a02009 	mov	r2, r9
   24ea0:	e1a01006 	mov	r1, r6
   24ea4:	e58db00c 	str	fp, [sp, #12]
   24ea8:	e58da008 	str	sl, [sp, #8]
   24eac:	e88d5000 	stm	sp, {ip, lr}
   24eb0:	eb000682 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24eb4:	e355000f 	cmp	r5, #15
   24eb8:	e2844010 	add	r4, r4, #16
   24ebc:	8a000001 	bhi	24ec8 <debug_hexdump(void const*, unsigned int, char const*)+0xf8>
   24ec0:	e28dd04c 	add	sp, sp, #76	; 0x4c
   24ec4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ec8:	e2555010 	subs	r5, r5, #16
   24ecc:	1affffd2 	bne	24e1c <debug_hexdump(void const*, unsigned int, char const*)+0x4c>
   24ed0:	e28dd04c 	add	sp, sp, #76	; 0x4c
   24ed4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ed8:	00044f3c 	.word	0x00044f3c
   24edc:	00044f44 	.word	0x00044f44
   24ee0:	0000ffff 	.word	0x0000ffff
   24ee4:	00044f6c 	.word	0x00044f6c

00024ee8 <debug_stacktrace(unsigned int const*, char const*)>:
   24ee8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24eec:	e3510000 	cmp	r1, #0
   24ef0:	e59f8084 	ldr	r8, [pc, #132]	; 24f7c <debug_stacktrace(unsigned int const*, char const*)+0x94>
   24ef4:	e24dd008 	sub	sp, sp, #8
   24ef8:	e1a05000 	mov	r5, r0
   24efc:	11a08001 	movne	r8, r1
   24f00:	e3a04000 	mov	r4, #0
   24f04:	e3a0a004 	mov	sl, #4
   24f08:	e59f6070 	ldr	r6, [pc, #112]	; 24f80 <debug_stacktrace(unsigned int const*, char const*)+0x98>
   24f0c:	e59f7070 	ldr	r7, [pc, #112]	; 24f84 <debug_stacktrace(unsigned int const*, char const*)+0x9c>
   24f10:	e59f9070 	ldr	r9, [pc, #112]	; 24f88 <debug_stacktrace(unsigned int const*, char const*)+0xa0>
   24f14:	ea000003 	b	24f28 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   24f18:	e2844001 	add	r4, r4, #1
   24f1c:	e3540040 	cmp	r4, #64	; 0x40
   24f20:	e2855004 	add	r5, r5, #4
   24f24:	0a000012 	beq	24f74 <debug_stacktrace(unsigned int const*, char const*)+0x8c>
   24f28:	e5953000 	ldr	r3, [r5]
   24f2c:	e1530006 	cmp	r3, r6
   24f30:	9afffff8 	bls	24f18 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   24f34:	e1530007 	cmp	r3, r7
   24f38:	2afffff6 	bcs	24f18 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   24f3c:	e3130003 	tst	r3, #3
   24f40:	1afffff4 	bne	24f18 <debug_stacktrace(unsigned int const*, char const*)+0x30>
   24f44:	eb000720 	bl	26bcc <CLogger::Get()>
   24f48:	e5953000 	ldr	r3, [r5]
   24f4c:	e1a0200a 	mov	r2, sl
   24f50:	e58d4000 	str	r4, [sp]
   24f54:	e58d3004 	str	r3, [sp, #4]
   24f58:	e1a01008 	mov	r1, r8
   24f5c:	e1a03009 	mov	r3, r9
   24f60:	e2844001 	add	r4, r4, #1
   24f64:	eb000655 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24f68:	e3540040 	cmp	r4, #64	; 0x40
   24f6c:	e2855004 	add	r5, r5, #4
   24f70:	1affffec 	bne	24f28 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   24f74:	e28dd008 	add	sp, sp, #8
   24f78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24f7c:	00044f3c 	.word	0x00044f3c
   24f80:	00007fff 	.word	0x00007fff
   24f84:	0003ecc8 	.word	0x0003ecc8
   24f88:	00044fc4 	.word	0x00044fc4

00024f8c <CDevice::~CDevice()>:
   24f8c:	e12fff1e 	bx	lr

00024f90 <CDevice::Read(void*, unsigned int)>:
   24f90:	e3e00000 	mvn	r0, #0
   24f94:	e12fff1e 	bx	lr

00024f98 <CDevice::Seek(unsigned long long)>:
   24f98:	e3e00000 	mvn	r0, #0
   24f9c:	e3e01000 	mvn	r1, #0
   24fa0:	e12fff1e 	bx	lr

00024fa4 <CDevice::RemoveDevice()>:
   24fa4:	e3a00000 	mov	r0, #0
   24fa8:	e12fff1e 	bx	lr

00024fac <CDevice::~CDevice()>:
   24fac:	e92d4010 	push	{r4, lr}
   24fb0:	e1a04000 	mov	r4, r0
   24fb4:	e3a01004 	mov	r1, #4
   24fb8:	eb00183b 	bl	2b0ac <operator delete(void*, unsigned int)>
   24fbc:	e1a00004 	mov	r0, r4
   24fc0:	e8bd8010 	pop	{r4, pc}

00024fc4 <CDevice::CDevice()>:
   24fc4:	e59f3004 	ldr	r3, [pc, #4]	; 24fd0 <CDevice::CDevice()+0xc>
   24fc8:	e5803000 	str	r3, [r0]
   24fcc:	e12fff1e 	bx	lr
   24fd0:	00044fe0 	.word	0x00044fe0

00024fd4 <CDeviceNameService::CDeviceNameService()>:
   24fd4:	e3a02000 	mov	r2, #0
   24fd8:	e59f102c 	ldr	r1, [pc, #44]	; 2500c <CDeviceNameService::CDeviceNameService()+0x38>
   24fdc:	e5802000 	str	r2, [r0]
   24fe0:	e591c000 	ldr	ip, [r1]
   24fe4:	e5802004 	str	r2, [r0, #4]
   24fe8:	e15c0002 	cmp	ip, r2
   24fec:	1a000001 	bne	24ff8 <CDeviceNameService::CDeviceNameService()+0x24>
   24ff0:	e5810000 	str	r0, [r1]
   24ff4:	e12fff1e 	bx	lr
   24ff8:	e92d4010 	push	{r4, lr}
   24ffc:	e3a0201f 	mov	r2, #31
   25000:	e59f1008 	ldr	r1, [pc, #8]	; 25010 <CDeviceNameService::CDeviceNameService()+0x3c>
   25004:	e59f0008 	ldr	r0, [pc, #8]	; 25014 <CDeviceNameService::CDeviceNameService()+0x40>
   25008:	ebfffdfc 	bl	24800 <assertion_failed>
   2500c:	0004e0f0 	.word	0x0004e0f0
   25010:	00044ff8 	.word	0x00044ff8
   25014:	00045010 	.word	0x00045010

00025018 <CDeviceNameService::~CDeviceNameService()>:
   25018:	e5903000 	ldr	r3, [r0]
   2501c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25020:	e3530000 	cmp	r3, #0
   25024:	e1a05000 	mov	r5, r0
   25028:	0a00000e 	beq	25068 <CDeviceNameService::~CDeviceNameService()+0x50>
   2502c:	e3a06000 	mov	r6, #0
   25030:	e3a07010 	mov	r7, #16
   25034:	e5930004 	ldr	r0, [r3, #4]
   25038:	e5934000 	ldr	r4, [r3]
   2503c:	e3500000 	cmp	r0, #0
   25040:	0a000000 	beq	25048 <CDeviceNameService::~CDeviceNameService()+0x30>
   25044:	eb001812 	bl	2b094 <operator delete[](void*)>
   25048:	e5950000 	ldr	r0, [r5]
   2504c:	e1a01007 	mov	r1, r7
   25050:	e5806004 	str	r6, [r0, #4]
   25054:	e5806008 	str	r6, [r0, #8]
   25058:	eb001813 	bl	2b0ac <operator delete(void*, unsigned int)>
   2505c:	e2543000 	subs	r3, r4, #0
   25060:	e5854000 	str	r4, [r5]
   25064:	1afffff2 	bne	25034 <CDeviceNameService::~CDeviceNameService()+0x1c>
   25068:	e3a02000 	mov	r2, #0
   2506c:	e59f3008 	ldr	r3, [pc, #8]	; 2507c <CDeviceNameService::~CDeviceNameService()+0x64>
   25070:	e1a00005 	mov	r0, r5
   25074:	e5832000 	str	r2, [r3]
   25078:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2507c:	0004e0f0 	.word	0x0004e0f0

00025080 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   25080:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25084:	e1a05000 	mov	r5, r0
   25088:	e5900004 	ldr	r0, [r0, #4]
   2508c:	e1a06001 	mov	r6, r1
   25090:	e3500000 	cmp	r0, #0
   25094:	e1a07002 	mov	r7, r2
   25098:	e1a08003 	mov	r8, r3
   2509c:	1a000017 	bne	25100 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x80>
   250a0:	e3a00010 	mov	r0, #16
   250a4:	eb0017f2 	bl	2b074 <operator new(unsigned int)>
   250a8:	e3560000 	cmp	r6, #0
   250ac:	e1a04000 	mov	r4, r0
   250b0:	0a000014 	beq	25108 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x88>
   250b4:	e1a00006 	mov	r0, r6
   250b8:	eb0013ef 	bl	2a07c <strlen>
   250bc:	e2800001 	add	r0, r0, #1
   250c0:	eb0017ec 	bl	2b078 <operator new[](unsigned int)>
   250c4:	e1a01006 	mov	r1, r6
   250c8:	e5840004 	str	r0, [r4, #4]
   250cc:	eb0014a8 	bl	2a374 <strcpy>
   250d0:	e3570000 	cmp	r7, #0
   250d4:	0a00000f 	beq	25118 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x98>
   250d8:	e5952004 	ldr	r2, [r5, #4]
   250dc:	e5953000 	ldr	r3, [r5]
   250e0:	e3520000 	cmp	r2, #0
   250e4:	e5847008 	str	r7, [r4, #8]
   250e8:	e5c4800c 	strb	r8, [r4, #12]
   250ec:	e5843000 	str	r3, [r4]
   250f0:	e5854000 	str	r4, [r5]
   250f4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   250f8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   250fc:	ea001b39 	b	2bde8 <LeaveCritical>
   25100:	eb001b0d 	bl	2bd3c <EnterCritical>
   25104:	eaffffe5 	b	250a0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
   25108:	e3a0203b 	mov	r2, #59	; 0x3b
   2510c:	e59f1014 	ldr	r1, [pc, #20]	; 25128 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   25110:	e59f0014 	ldr	r0, [pc, #20]	; 2512c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xac>
   25114:	ebfffdb9 	bl	24800 <assertion_failed>
   25118:	e3a02040 	mov	r2, #64	; 0x40
   2511c:	e59f1004 	ldr	r1, [pc, #4]	; 25128 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa8>
   25120:	e59f0008 	ldr	r0, [pc, #8]	; 25130 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb0>
   25124:	ebfffdb5 	bl	24800 <assertion_failed>
   25128:	00044ff8 	.word	0x00044ff8
   2512c:	0003fd1c 	.word	0x0003fd1c
   25130:	0004501c 	.word	0x0004501c

00025134 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   25134:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25138:	e2515000 	subs	r5, r1, #0
   2513c:	0a00003c 	beq	25234 <CDeviceNameService::RemoveDevice(char const*, bool)+0x100>
   25140:	e1a08000 	mov	r8, r0
   25144:	e5900004 	ldr	r0, [r0, #4]
   25148:	e1a07002 	mov	r7, r2
   2514c:	e3500000 	cmp	r0, #0
   25150:	1a00002c 	bne	25208 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd4>
   25154:	e5984000 	ldr	r4, [r8]
   25158:	e3540000 	cmp	r4, #0
   2515c:	0a00003b 	beq	25250 <CDeviceNameService::RemoveDevice(char const*, bool)+0x11c>
   25160:	e5941004 	ldr	r1, [r4, #4]
   25164:	e3510000 	cmp	r1, #0
   25168:	13a06000 	movne	r6, #0
   2516c:	1a000001 	bne	25178 <CDeviceNameService::RemoveDevice(char const*, bool)+0x44>
   25170:	ea00000e 	b	251b0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x7c>
   25174:	e1a04003 	mov	r4, r3
   25178:	e1a00005 	mov	r0, r5
   2517c:	eb0013c8 	bl	2a0a4 <strcmp>
   25180:	e3500000 	cmp	r0, #0
   25184:	1a000002 	bne	25194 <CDeviceNameService::RemoveDevice(char const*, bool)+0x60>
   25188:	e5d4300c 	ldrb	r3, [r4, #12]
   2518c:	e1530007 	cmp	r3, r7
   25190:	0a00000a 	beq	251c0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x8c>
   25194:	e5943000 	ldr	r3, [r4]
   25198:	e3530000 	cmp	r3, #0
   2519c:	0a00001d 	beq	25218 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe4>
   251a0:	e5931004 	ldr	r1, [r3, #4]
   251a4:	e1a06004 	mov	r6, r4
   251a8:	e3510000 	cmp	r1, #0
   251ac:	1afffff0 	bne	25174 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
   251b0:	e3a0205e 	mov	r2, #94	; 0x5e
   251b4:	e59f1098 	ldr	r1, [pc, #152]	; 25254 <CDeviceNameService::RemoveDevice(char const*, bool)+0x120>
   251b8:	e59f0098 	ldr	r0, [pc, #152]	; 25258 <CDeviceNameService::RemoveDevice(char const*, bool)+0x124>
   251bc:	ebfffd8f 	bl	24800 <assertion_failed>
   251c0:	e3560000 	cmp	r6, #0
   251c4:	0a00001e 	beq	25244 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
   251c8:	e5943000 	ldr	r3, [r4]
   251cc:	e5863000 	str	r3, [r6]
   251d0:	e5983004 	ldr	r3, [r8, #4]
   251d4:	e3530000 	cmp	r3, #0
   251d8:	1a000013 	bne	2522c <CDeviceNameService::RemoveDevice(char const*, bool)+0xf8>
   251dc:	e5940004 	ldr	r0, [r4, #4]
   251e0:	e3500000 	cmp	r0, #0
   251e4:	0a000000 	beq	251ec <CDeviceNameService::RemoveDevice(char const*, bool)+0xb8>
   251e8:	eb0017a9 	bl	2b094 <operator delete[](void*)>
   251ec:	e3a03000 	mov	r3, #0
   251f0:	e1a00004 	mov	r0, r4
   251f4:	e5843004 	str	r3, [r4, #4]
   251f8:	e5843008 	str	r3, [r4, #8]
   251fc:	e3a01010 	mov	r1, #16
   25200:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25204:	ea0017a8 	b	2b0ac <operator delete(void*, unsigned int)>
   25208:	eb001acb 	bl	2bd3c <EnterCritical>
   2520c:	e5984000 	ldr	r4, [r8]
   25210:	e3540000 	cmp	r4, #0
   25214:	1affffd1 	bne	25160 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   25218:	e5983004 	ldr	r3, [r8, #4]
   2521c:	e3530000 	cmp	r3, #0
   25220:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25224:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25228:	ea001aee 	b	2bde8 <LeaveCritical>
   2522c:	eb001aed 	bl	2bde8 <LeaveCritical>
   25230:	eaffffe9 	b	251dc <CDeviceNameService::RemoveDevice(char const*, bool)+0xa8>
   25234:	e3a02056 	mov	r2, #86	; 0x56
   25238:	e59f1014 	ldr	r1, [pc, #20]	; 25254 <CDeviceNameService::RemoveDevice(char const*, bool)+0x120>
   2523c:	e59f0018 	ldr	r0, [pc, #24]	; 2525c <CDeviceNameService::RemoveDevice(char const*, bool)+0x128>
   25240:	ebfffd6e 	bl	24800 <assertion_failed>
   25244:	e5943000 	ldr	r3, [r4]
   25248:	e5883000 	str	r3, [r8]
   2524c:	eaffffdf 	b	251d0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x9c>
   25250:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25254:	00044ff8 	.word	0x00044ff8
   25258:	0004502c 	.word	0x0004502c
   2525c:	0003fd1c 	.word	0x0003fd1c

00025260 <CDeviceNameService::GetDevice(char const*, bool)>:
   25260:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25264:	e2515000 	subs	r5, r1, #0
   25268:	e24dd00c 	sub	sp, sp, #12
   2526c:	0a00002b 	beq	25320 <CDeviceNameService::GetDevice(char const*, bool)+0xc0>
   25270:	e1a07000 	mov	r7, r0
   25274:	e5900004 	ldr	r0, [r0, #4]
   25278:	e1a06002 	mov	r6, r2
   2527c:	e3500000 	cmp	r0, #0
   25280:	1a000014 	bne	252d8 <CDeviceNameService::GetDevice(char const*, bool)+0x78>
   25284:	e5974000 	ldr	r4, [r7]
   25288:	e3540000 	cmp	r4, #0
   2528c:	1a00000a 	bne	252bc <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   25290:	ea000017 	b	252f4 <CDeviceNameService::GetDevice(char const*, bool)+0x94>
   25294:	e1a00005 	mov	r0, r5
   25298:	eb001381 	bl	2a0a4 <strcmp>
   2529c:	e3500000 	cmp	r0, #0
   252a0:	1a000002 	bne	252b0 <CDeviceNameService::GetDevice(char const*, bool)+0x50>
   252a4:	e5d4300c 	ldrb	r3, [r4, #12]
   252a8:	e1530006 	cmp	r3, r6
   252ac:	0a000013 	beq	25300 <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
   252b0:	e5944000 	ldr	r4, [r4]
   252b4:	e3540000 	cmp	r4, #0
   252b8:	0a00000a 	beq	252e8 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   252bc:	e5941004 	ldr	r1, [r4, #4]
   252c0:	e3510000 	cmp	r1, #0
   252c4:	1afffff2 	bne	25294 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   252c8:	e3a02092 	mov	r2, #146	; 0x92
   252cc:	e59f1084 	ldr	r1, [pc, #132]	; 25358 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   252d0:	e59f0084 	ldr	r0, [pc, #132]	; 2535c <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
   252d4:	ebfffd49 	bl	24800 <assertion_failed>
   252d8:	eb001a97 	bl	2bd3c <EnterCritical>
   252dc:	e5974000 	ldr	r4, [r7]
   252e0:	e3540000 	cmp	r4, #0
   252e4:	1afffff4 	bne	252bc <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   252e8:	e5973004 	ldr	r3, [r7, #4]
   252ec:	e3530000 	cmp	r3, #0
   252f0:	1a00000e 	bne	25330 <CDeviceNameService::GetDevice(char const*, bool)+0xd0>
   252f4:	e3a00000 	mov	r0, #0
   252f8:	e28dd00c 	add	sp, sp, #12
   252fc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   25300:	e5973004 	ldr	r3, [r7, #4]
   25304:	e5940008 	ldr	r0, [r4, #8]
   25308:	e3530000 	cmp	r3, #0
   2530c:	1a000009 	bne	25338 <CDeviceNameService::GetDevice(char const*, bool)+0xd8>
   25310:	e3500000 	cmp	r0, #0
   25314:	0a00000b 	beq	25348 <CDeviceNameService::GetDevice(char const*, bool)+0xe8>
   25318:	e28dd00c 	add	sp, sp, #12
   2531c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   25320:	e3a0208b 	mov	r2, #139	; 0x8b
   25324:	e59f102c 	ldr	r1, [pc, #44]	; 25358 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   25328:	e59f0030 	ldr	r0, [pc, #48]	; 25360 <CDeviceNameService::GetDevice(char const*, bool)+0x100>
   2532c:	ebfffd33 	bl	24800 <assertion_failed>
   25330:	eb001aac 	bl	2bde8 <LeaveCritical>
   25334:	eaffffee 	b	252f4 <CDeviceNameService::GetDevice(char const*, bool)+0x94>
   25338:	e58d0004 	str	r0, [sp, #4]
   2533c:	eb001aa9 	bl	2bde8 <LeaveCritical>
   25340:	e59d0004 	ldr	r0, [sp, #4]
   25344:	eafffff1 	b	25310 <CDeviceNameService::GetDevice(char const*, bool)+0xb0>
   25348:	e3a0209a 	mov	r2, #154	; 0x9a
   2534c:	e59f1004 	ldr	r1, [pc, #4]	; 25358 <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
   25350:	e59f000c 	ldr	r0, [pc, #12]	; 25364 <CDeviceNameService::GetDevice(char const*, bool)+0x104>
   25354:	ebfffd29 	bl	24800 <assertion_failed>
   25358:	00044ff8 	.word	0x00044ff8
   2535c:	0004502c 	.word	0x0004502c
   25360:	0003fd1c 	.word	0x0003fd1c
   25364:	00045040 	.word	0x00045040

00025368 <CDeviceNameService::Get()>:
   25368:	e59f3020 	ldr	r3, [pc, #32]	; 25390 <CDeviceNameService::Get()+0x28>
   2536c:	e5930000 	ldr	r0, [r3]
   25370:	e3500000 	cmp	r0, #0
   25374:	0a000000 	beq	2537c <CDeviceNameService::Get()+0x14>
   25378:	e12fff1e 	bx	lr
   2537c:	e92d4010 	push	{r4, lr}
   25380:	e3a020cc 	mov	r2, #204	; 0xcc
   25384:	e59f1008 	ldr	r1, [pc, #8]	; 25394 <CDeviceNameService::Get()+0x2c>
   25388:	e59f0008 	ldr	r0, [pc, #8]	; 25398 <CDeviceNameService::Get()+0x30>
   2538c:	ebfffd1b 	bl	24800 <assertion_failed>
   25390:	0004e0f0 	.word	0x0004e0f0
   25394:	00044ff8 	.word	0x00044ff8
   25398:	00045050 	.word	0x00045050

0002539c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   2539c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   253a0:	e1a07001 	mov	r7, r1
   253a4:	e1a08002 	mov	r8, r2
   253a8:	e24dd010 	sub	sp, sp, #16
   253ac:	e1a04000 	mov	r4, r0
   253b0:	e1a0000d 	mov	r0, sp
   253b4:	e1a05003 	mov	r5, r3
   253b8:	e5dd6028 	ldrb	r6, [sp, #40]	; 0x28
   253bc:	eb0009e8 	bl	27b64 <CString::CString()>
   253c0:	e1a03008 	mov	r3, r8
   253c4:	e1a02007 	mov	r2, r7
   253c8:	e1a0000d 	mov	r0, sp
   253cc:	e59f102c 	ldr	r1, [pc, #44]	; 25400 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x64>
   253d0:	eb000f26 	bl	29070 <CString::Format(char const*, ...)>
   253d4:	e1a0000d 	mov	r0, sp
   253d8:	eb0009f7 	bl	27bbc <CString::operator char const*() const>
   253dc:	e1a03006 	mov	r3, r6
   253e0:	e1a01000 	mov	r1, r0
   253e4:	e1a02005 	mov	r2, r5
   253e8:	e1a00004 	mov	r0, r4
   253ec:	ebffff23 	bl	25080 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   253f0:	e1a0000d 	mov	r0, sp
   253f4:	eb0009a7 	bl	27a98 <CString::~CString()>
   253f8:	e28dd010 	add	sp, sp, #16
   253fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25400:	0004505c 	.word	0x0004505c

00025404 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   25404:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25408:	e1a06001 	mov	r6, r1
   2540c:	e1a07002 	mov	r7, r2
   25410:	e24dd014 	sub	sp, sp, #20
   25414:	e1a04000 	mov	r4, r0
   25418:	e1a0000d 	mov	r0, sp
   2541c:	e1a05003 	mov	r5, r3
   25420:	eb0009cf 	bl	27b64 <CString::CString()>
   25424:	e1a03007 	mov	r3, r7
   25428:	e1a02006 	mov	r2, r6
   2542c:	e1a0000d 	mov	r0, sp
   25430:	e59f1028 	ldr	r1, [pc, #40]	; 25460 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x5c>
   25434:	eb000f0d 	bl	29070 <CString::Format(char const*, ...)>
   25438:	e1a0000d 	mov	r0, sp
   2543c:	eb0009de 	bl	27bbc <CString::operator char const*() const>
   25440:	e1a02005 	mov	r2, r5
   25444:	e1a01000 	mov	r1, r0
   25448:	e1a00004 	mov	r0, r4
   2544c:	ebffff38 	bl	25134 <CDeviceNameService::RemoveDevice(char const*, bool)>
   25450:	e1a0000d 	mov	r0, sp
   25454:	eb00098f 	bl	27a98 <CString::~CString()>
   25458:	e28dd014 	add	sp, sp, #20
   2545c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   25460:	0004505c 	.word	0x0004505c

00025464 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   25464:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   25468:	e1a06001 	mov	r6, r1
   2546c:	e1a07002 	mov	r7, r2
   25470:	e24dd014 	sub	sp, sp, #20
   25474:	e1a04000 	mov	r4, r0
   25478:	e1a0000d 	mov	r0, sp
   2547c:	e1a05003 	mov	r5, r3
   25480:	eb0009b7 	bl	27b64 <CString::CString()>
   25484:	e1a03007 	mov	r3, r7
   25488:	e1a02006 	mov	r2, r6
   2548c:	e1a0000d 	mov	r0, sp
   25490:	e59f1030 	ldr	r1, [pc, #48]	; 254c8 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x64>
   25494:	eb000ef5 	bl	29070 <CString::Format(char const*, ...)>
   25498:	e1a0000d 	mov	r0, sp
   2549c:	eb0009c6 	bl	27bbc <CString::operator char const*() const>
   254a0:	e1a02005 	mov	r2, r5
   254a4:	e1a01000 	mov	r1, r0
   254a8:	e1a00004 	mov	r0, r4
   254ac:	ebffff6b 	bl	25260 <CDeviceNameService::GetDevice(char const*, bool)>
   254b0:	e1a04000 	mov	r4, r0
   254b4:	e1a0000d 	mov	r0, sp
   254b8:	eb000976 	bl	27a98 <CString::~CString()>
   254bc:	e1a00004 	mov	r0, r4
   254c0:	e28dd014 	add	sp, sp, #20
   254c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   254c8:	0004505c 	.word	0x0004505c

000254cc <CDeviceNameService::ListDevices(CDevice*)>:
   254cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   254d0:	e2516000 	subs	r6, r1, #0
   254d4:	e24dd018 	sub	sp, sp, #24
   254d8:	0a000034 	beq	255b0 <CDeviceNameService::ListDevices(CDevice*)+0xe4>
   254dc:	e5904000 	ldr	r4, [r0]
   254e0:	e3540000 	cmp	r4, #0
   254e4:	0a00002f 	beq	255a8 <CDeviceNameService::ListDevices(CDevice*)+0xdc>
   254e8:	e3a05000 	mov	r5, #0
   254ec:	e59f90cc 	ldr	r9, [pc, #204]	; 255c0 <CDeviceNameService::ListDevices(CDevice*)+0xf4>
   254f0:	ea00001b 	b	25564 <CDeviceNameService::ListDevices(CDevice*)+0x98>
   254f4:	e2855001 	add	r5, r5, #1
   254f8:	e215a003 	ands	sl, r5, #3
   254fc:	13a01020 	movne	r1, #32
   25500:	03a0100a 	moveq	r1, #10
   25504:	e5d4200c 	ldrb	r2, [r4, #12]
   25508:	e28d0008 	add	r0, sp, #8
   2550c:	e3520000 	cmp	r2, #0
   25510:	03a02063 	moveq	r2, #99	; 0x63
   25514:	13a02062 	movne	r2, #98	; 0x62
   25518:	e58d1000 	str	r1, [sp]
   2551c:	e1a01009 	mov	r1, r9
   25520:	eb000ed2 	bl	29070 <CString::Format(char const*, ...)>
   25524:	e5963000 	ldr	r3, [r6]
   25528:	e28d0008 	add	r0, sp, #8
   2552c:	e593700c 	ldr	r7, [r3, #12]
   25530:	eb0009a1 	bl	27bbc <CString::operator char const*() const>
   25534:	e1a08000 	mov	r8, r0
   25538:	e28d0008 	add	r0, sp, #8
   2553c:	eb0009cc 	bl	27c74 <CString::GetLength() const>
   25540:	e1a01008 	mov	r1, r8
   25544:	e1a02000 	mov	r2, r0
   25548:	e1a00006 	mov	r0, r6
   2554c:	e12fff37 	blx	r7
   25550:	e5944000 	ldr	r4, [r4]
   25554:	e28d0008 	add	r0, sp, #8
   25558:	eb00094e 	bl	27a98 <CString::~CString()>
   2555c:	e3540000 	cmp	r4, #0
   25560:	0a000008 	beq	25588 <CDeviceNameService::ListDevices(CDevice*)+0xbc>
   25564:	e28d0008 	add	r0, sp, #8
   25568:	eb00097d 	bl	27b64 <CString::CString()>
   2556c:	e5943004 	ldr	r3, [r4, #4]
   25570:	e3530000 	cmp	r3, #0
   25574:	1affffde 	bne	254f4 <CDeviceNameService::ListDevices(CDevice*)+0x28>
   25578:	e3a020b9 	mov	r2, #185	; 0xb9
   2557c:	e59f1040 	ldr	r1, [pc, #64]	; 255c4 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   25580:	e59f0040 	ldr	r0, [pc, #64]	; 255c8 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
   25584:	ebfffc9d 	bl	24800 <assertion_failed>
   25588:	e35a0000 	cmp	sl, #0
   2558c:	0a000005 	beq	255a8 <CDeviceNameService::ListDevices(CDevice*)+0xdc>
   25590:	e5963000 	ldr	r3, [r6]
   25594:	e1a00006 	mov	r0, r6
   25598:	e593300c 	ldr	r3, [r3, #12]
   2559c:	e3a02001 	mov	r2, #1
   255a0:	e59f1024 	ldr	r1, [pc, #36]	; 255cc <CDeviceNameService::ListDevices(CDevice*)+0x100>
   255a4:	e12fff33 	blx	r3
   255a8:	e28dd018 	add	sp, sp, #24
   255ac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   255b0:	e3a020b0 	mov	r2, #176	; 0xb0
   255b4:	e59f1008 	ldr	r1, [pc, #8]	; 255c4 <CDeviceNameService::ListDevices(CDevice*)+0xf8>
   255b8:	e59f0010 	ldr	r0, [pc, #16]	; 255d0 <CDeviceNameService::ListDevices(CDevice*)+0x104>
   255bc:	ebfffc8f 	bl	24800 <assertion_failed>
   255c0:	00045074 	.word	0x00045074
   255c4:	00044ff8 	.word	0x00044ff8
   255c8:	0004502c 	.word	0x0004502c
   255cc:	000475e0 	.word	0x000475e0
   255d0:	00045064 	.word	0x00045064

000255d4 <CGPIOPin::CGPIOPin()>:
   255d4:	e92d4010 	push	{r4, lr}
   255d8:	e3a01000 	mov	r1, #0
   255dc:	e3a02006 	mov	r2, #6
   255e0:	e3a04036 	mov	r4, #54	; 0x36
   255e4:	e3a0c00a 	mov	ip, #10
   255e8:	e59fe01c 	ldr	lr, [pc, #28]	; 2560c <CGPIOPin::CGPIOPin()+0x38>
   255ec:	e5804004 	str	r4, [r0, #4]
   255f0:	e580e000 	str	lr, [r0]
   255f4:	e5c0c010 	strb	ip, [r0, #16]
   255f8:	e5801018 	str	r1, [r0, #24]
   255fc:	e580101c 	str	r1, [r0, #28]
   25600:	e5c02025 	strb	r2, [r0, #37]	; 0x25
   25604:	e5c02026 	strb	r2, [r0, #38]	; 0x26
   25608:	e8bd8010 	pop	{r4, pc}
   2560c:	00045088 	.word	0x00045088

00025610 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   25610:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25614:	e3a0c006 	mov	ip, #6
   25618:	e3a0e000 	mov	lr, #0
   2561c:	e3a07036 	mov	r7, #54	; 0x36
   25620:	e3a0600a 	mov	r6, #10
   25624:	e1a04000 	mov	r4, r0
   25628:	e1a05002 	mov	r5, r2
   2562c:	e5803018 	str	r3, [r0, #24]
   25630:	e59f302c 	ldr	r3, [pc, #44]	; 25664 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x54>
   25634:	e580e01c 	str	lr, [r0, #28]
   25638:	e8800088 	stm	r0, {r3, r7}
   2563c:	e5c0c025 	strb	ip, [r0, #37]	; 0x25
   25640:	e5c0c026 	strb	ip, [r0, #38]	; 0x26
   25644:	e5c06010 	strb	r6, [r0, #16]
   25648:	eb00000d 	bl	25684 <CGPIOPin::AssignPin(unsigned int)>
   2564c:	e1a00004 	mov	r0, r4
   25650:	e1a01005 	mov	r1, r5
   25654:	e3a02001 	mov	r2, #1
   25658:	eb00002a 	bl	25708 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2565c:	e1a00004 	mov	r0, r4
   25660:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25664:	00045088 	.word	0x00045088

00025668 <CGPIOPin::~CGPIOPin()>:
   25668:	e12fff1e 	bx	lr

0002566c <CGPIOPin::~CGPIOPin()>:
   2566c:	e92d4010 	push	{r4, lr}
   25670:	e1a04000 	mov	r4, r0
   25674:	e3a01028 	mov	r1, #40	; 0x28
   25678:	eb00168b 	bl	2b0ac <operator delete(void*, unsigned int)>
   2567c:	e1a00004 	mov	r0, r4
   25680:	e8bd8010 	pop	{r4, pc}

00025684 <CGPIOPin::AssignPin(unsigned int)>:
   25684:	e5903004 	ldr	r3, [r0, #4]
   25688:	e92d4070 	push	{r4, r5, r6, lr}
   2568c:	e3530036 	cmp	r3, #54	; 0x36
   25690:	1a000017 	bne	256f4 <CGPIOPin::AssignPin(unsigned int)+0x70>
   25694:	e1a05000 	mov	r5, r0
   25698:	e3510035 	cmp	r1, #53	; 0x35
   2569c:	e1a04001 	mov	r4, r1
   256a0:	e5851004 	str	r1, [r5, #4]
   256a4:	8a000007 	bhi	256c8 <CGPIOPin::AssignPin(unsigned int)+0x44>
   256a8:	e3a03001 	mov	r3, #1
   256ac:	e204201f 	and	r2, r4, #31
   256b0:	e1a042a4 	lsr	r4, r4, #5
   256b4:	e1a03213 	lsl	r3, r3, r2
   256b8:	e1a04104 	lsl	r4, r4, #2
   256bc:	e585300c 	str	r3, [r5, #12]
   256c0:	e5854008 	str	r4, [r5, #8]
   256c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   256c8:	eb000839 	bl	277b4 <CMachineInfo::Get()>
   256cc:	e6ef1074 	uxtb	r1, r4
   256d0:	eb000799 	bl	2753c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   256d4:	e3500035 	cmp	r0, #53	; 0x35
   256d8:	e1a04000 	mov	r4, r0
   256dc:	e5850004 	str	r0, [r5, #4]
   256e0:	9afffff0 	bls	256a8 <CGPIOPin::AssignPin(unsigned int)+0x24>
   256e4:	e59f1018 	ldr	r1, [pc, #24]	; 25704 <CGPIOPin::AssignPin(unsigned int)+0x80>
   256e8:	e3a02047 	mov	r2, #71	; 0x47
   256ec:	e2810020 	add	r0, r1, #32
   256f0:	ebfffc42 	bl	24800 <assertion_failed>
   256f4:	e59f1008 	ldr	r1, [pc, #8]	; 25704 <CGPIOPin::AssignPin(unsigned int)+0x80>
   256f8:	e3a02040 	mov	r2, #64	; 0x40
   256fc:	e281000c 	add	r0, r1, #12
   25700:	ebfffc3e 	bl	24800 <assertion_failed>
   25704:	00045090 	.word	0x00045090

00025708 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   25708:	e3510009 	cmp	r1, #9
   2570c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25710:	ca000049 	bgt	2583c <CGPIOPin::SetMode(TGPIOMode, bool)+0x134>
   25714:	e1a06002 	mov	r6, r2
   25718:	e1a04000 	mov	r4, r0
   2571c:	e5c01010 	strb	r1, [r0, #16]
   25720:	e3a02000 	mov	r2, #0
   25724:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   25728:	e5d03010 	ldrb	r3, [r0, #16]
   2572c:	e2431004 	sub	r1, r3, #4
   25730:	e6efc071 	uxtb	ip, r1
   25734:	e35c0005 	cmp	ip, #5
   25738:	8a00000a 	bhi	25768 <CGPIOPin::SetMode(TGPIOMode, bool)+0x60>
   2573c:	e1560002 	cmp	r6, r2
   25740:	0a000003 	beq	25754 <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
   25744:	e1a01002 	mov	r1, r2
   25748:	eb000205 	bl	25f64 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2574c:	e5d43010 	ldrb	r3, [r4, #16]
   25750:	e2431004 	sub	r1, r3, #4
   25754:	e1a00004 	mov	r0, r4
   25758:	eb000229 	bl	26004 <CGPIOPin::SetAlternateFunction(unsigned int)>
   2575c:	e3a03000 	mov	r3, #0
   25760:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25764:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25768:	e3530001 	cmp	r3, #1
   2576c:	13a03000 	movne	r3, #0
   25770:	02063001 	andeq	r3, r6, #1
   25774:	e3530000 	cmp	r3, #0
   25778:	1a00003f 	bne	2587c <CGPIOPin::SetMode(TGPIOMode, bool)+0x174>
   2577c:	e5943004 	ldr	r3, [r4, #4]
   25780:	e3530035 	cmp	r3, #53	; 0x35
   25784:	8a00003f 	bhi	25888 <CGPIOPin::SetMode(TGPIOMode, bool)+0x180>
   25788:	e59f5108 	ldr	r5, [pc, #264]	; 25898 <CGPIOPin::SetMode(TGPIOMode, bool)+0x190>
   2578c:	e59f8108 	ldr	r8, [pc, #264]	; 2589c <CGPIOPin::SetMode(TGPIOMode, bool)+0x194>
   25790:	e0852395 	umull	r2, r5, r5, r3
   25794:	e5980000 	ldr	r0, [r8]
   25798:	e1a051a5 	lsr	r5, r5, #3
   2579c:	e2857302 	add	r7, r5, #134217728	; 0x8000000
   257a0:	e0855105 	add	r5, r5, r5, lsl #2
   257a4:	e2877702 	add	r7, r7, #524288	; 0x80000
   257a8:	e0435085 	sub	r5, r3, r5, lsl #1
   257ac:	e3500000 	cmp	r0, #0
   257b0:	e1a07107 	lsl	r7, r7, #2
   257b4:	e0855085 	add	r5, r5, r5, lsl #1
   257b8:	1a00001d 	bne	25834 <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>
   257bc:	e5d42010 	ldrb	r2, [r4, #16]
   257c0:	e3a01007 	mov	r1, #7
   257c4:	e2422001 	sub	r2, r2, #1
   257c8:	e16f2f12 	clz	r2, r2
   257cc:	e5973000 	ldr	r3, [r7]
   257d0:	e1a022a2 	lsr	r2, r2, #5
   257d4:	e1c33511 	bic	r3, r3, r1, lsl r5
   257d8:	e1835512 	orr	r5, r3, r2, lsl r5
   257dc:	e5875000 	str	r5, [r7]
   257e0:	e5983000 	ldr	r3, [r8]
   257e4:	e3530000 	cmp	r3, #0
   257e8:	1a00000f 	bne	2582c <CGPIOPin::SetMode(TGPIOMode, bool)+0x124>
   257ec:	e3560000 	cmp	r6, #0
   257f0:	0a00000a 	beq	25820 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   257f4:	e5d43010 	ldrb	r3, [r4, #16]
   257f8:	e3530003 	cmp	r3, #3
   257fc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   25800:	ea000006 	b	25820 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   25804:	0002584c 	.word	0x0002584c
   25808:	0002585c 	.word	0x0002585c
   2580c:	0002586c 	.word	0x0002586c
   25810:	00025814 	.word	0x00025814
   25814:	e1a00004 	mov	r0, r4
   25818:	e3a01001 	mov	r1, #1
   2581c:	eb0001d0 	bl	25f64 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25820:	e3a03000 	mov	r3, #0
   25824:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25828:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2582c:	eb00196d 	bl	2bde8 <LeaveCritical>
   25830:	eaffffed 	b	257ec <CGPIOPin::SetMode(TGPIOMode, bool)+0xe4>
   25834:	eb001940 	bl	2bd3c <EnterCritical>
   25838:	eaffffdf 	b	257bc <CGPIOPin::SetMode(TGPIOMode, bool)+0xb4>
   2583c:	e59f105c 	ldr	r1, [pc, #92]	; 258a0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
   25840:	e3a0204f 	mov	r2, #79	; 0x4f
   25844:	e2810034 	add	r0, r1, #52	; 0x34
   25848:	ebfffbec 	bl	24800 <assertion_failed>
   2584c:	e1a00004 	mov	r0, r4
   25850:	e3a01000 	mov	r1, #0
   25854:	eb0001c2 	bl	25f64 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25858:	eafffff0 	b	25820 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   2585c:	e1a00004 	mov	r0, r4
   25860:	e3a01000 	mov	r1, #0
   25864:	eb00000e 	bl	258a4 <CGPIOPin::Write(unsigned int)>
   25868:	eaffffec 	b	25820 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   2586c:	e1a00004 	mov	r0, r4
   25870:	e3a01002 	mov	r1, #2
   25874:	eb0001ba 	bl	25f64 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25878:	eaffffe8 	b	25820 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   2587c:	e1a01002 	mov	r1, r2
   25880:	eb0001b7 	bl	25f64 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   25884:	eaffffbc 	b	2577c <CGPIOPin::SetMode(TGPIOMode, bool)+0x74>
   25888:	e59f1010 	ldr	r1, [pc, #16]	; 258a0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
   2588c:	e3a02068 	mov	r2, #104	; 0x68
   25890:	e2810020 	add	r0, r1, #32
   25894:	ebfffbd9 	bl	24800 <assertion_failed>
   25898:	cccccccd 	.word	0xcccccccd
   2589c:	0004e0f4 	.word	0x0004e0f4
   258a0:	00045090 	.word	0x00045090

000258a4 <CGPIOPin::Write(unsigned int)>:
   258a4:	e5903004 	ldr	r3, [r0, #4]
   258a8:	e92d4010 	push	{r4, lr}
   258ac:	e3530035 	cmp	r3, #53	; 0x35
   258b0:	8a000010 	bhi	258f8 <CGPIOPin::Write(unsigned int)+0x54>
   258b4:	e5d03010 	ldrb	r3, [r0, #16]
   258b8:	e3530003 	cmp	r3, #3
   258bc:	ca000011 	bgt	25908 <CGPIOPin::Write(unsigned int)+0x64>
   258c0:	e3a02000 	mov	r2, #0
   258c4:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   258c8:	e3510001 	cmp	r1, #1
   258cc:	8a000011 	bhi	25918 <CGPIOPin::Write(unsigned int)+0x74>
   258d0:	e59fc050 	ldr	ip, [pc, #80]	; 25928 <CGPIOPin::Write(unsigned int)+0x84>
   258d4:	e3510000 	cmp	r1, #0
   258d8:	e59f304c 	ldr	r3, [pc, #76]	; 2592c <CGPIOPin::Write(unsigned int)+0x88>
   258dc:	01a0300c 	moveq	r3, ip
   258e0:	e590e00c 	ldr	lr, [r0, #12]
   258e4:	e590c008 	ldr	ip, [r0, #8]
   258e8:	e5801014 	str	r1, [r0, #20]
   258ec:	e783e00c 	str	lr, [r3, ip]
   258f0:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   258f4:	e8bd8010 	pop	{r4, pc}
   258f8:	e59f1030 	ldr	r1, [pc, #48]	; 25930 <CGPIOPin::Write(unsigned int)+0x8c>
   258fc:	e3a02091 	mov	r2, #145	; 0x91
   25900:	e2810020 	add	r0, r1, #32
   25904:	ebfffbbd 	bl	24800 <assertion_failed>
   25908:	e59f1020 	ldr	r1, [pc, #32]	; 25930 <CGPIOPin::Write(unsigned int)+0x8c>
   2590c:	e3a02094 	mov	r2, #148	; 0x94
   25910:	e281004c 	add	r0, r1, #76	; 0x4c
   25914:	ebfffbb9 	bl	24800 <assertion_failed>
   25918:	e59f1010 	ldr	r1, [pc, #16]	; 25930 <CGPIOPin::Write(unsigned int)+0x8c>
   2591c:	e3a02098 	mov	r2, #152	; 0x98
   25920:	e2810070 	add	r0, r1, #112	; 0x70
   25924:	ebfffbb5 	bl	24800 <assertion_failed>
   25928:	20200028 	.word	0x20200028
   2592c:	2020001c 	.word	0x2020001c
   25930:	00045090 	.word	0x00045090

00025934 <CGPIOPin::Read() const>:
   25934:	e5903004 	ldr	r3, [r0, #4]
   25938:	e92d4010 	push	{r4, lr}
   2593c:	e3530035 	cmp	r3, #53	; 0x35
   25940:	8a00000f 	bhi	25984 <CGPIOPin::Read() const+0x50>
   25944:	e5d03010 	ldrb	r3, [r0, #16]
   25948:	e2432002 	sub	r2, r3, #2
   2594c:	e3530000 	cmp	r3, #0
   25950:	13520001 	cmpne	r2, #1
   25954:	8a00000e 	bhi	25994 <CGPIOPin::Read() const+0x60>
   25958:	e3a03000 	mov	r3, #0
   2595c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25960:	e59f103c 	ldr	r1, [pc, #60]	; 259a4 <CGPIOPin::Read() const+0x70>
   25964:	e590c008 	ldr	ip, [r0, #8]
   25968:	e590200c 	ldr	r2, [r0, #12]
   2596c:	e79c1001 	ldr	r1, [ip, r1]
   25970:	e1110002 	tst	r1, r2
   25974:	13a00001 	movne	r0, #1
   25978:	01a00003 	moveq	r0, r3
   2597c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25980:	e8bd8010 	pop	{r4, pc}
   25984:	e59f101c 	ldr	r1, [pc, #28]	; 259a8 <CGPIOPin::Read() const+0x74>
   25988:	e3a020a4 	mov	r2, #164	; 0xa4
   2598c:	e2810020 	add	r0, r1, #32
   25990:	ebfffb9a 	bl	24800 <assertion_failed>
   25994:	e59f100c 	ldr	r1, [pc, #12]	; 259a8 <CGPIOPin::Read() const+0x74>
   25998:	e3a020a8 	mov	r2, #168	; 0xa8
   2599c:	e2810090 	add	r0, r1, #144	; 0x90
   259a0:	ebfffb96 	bl	24800 <assertion_failed>
   259a4:	20200034 	.word	0x20200034
   259a8:	00045090 	.word	0x00045090

000259ac <CGPIOPin::Invert()>:
   259ac:	e5d02010 	ldrb	r2, [r0, #16]
   259b0:	e3520001 	cmp	r2, #1
   259b4:	1a000002 	bne	259c4 <CGPIOPin::Invert()+0x18>
   259b8:	e5901014 	ldr	r1, [r0, #20]
   259bc:	e2211001 	eor	r1, r1, #1
   259c0:	eaffffb7 	b	258a4 <CGPIOPin::Write(unsigned int)>
   259c4:	e59f100c 	ldr	r1, [pc, #12]	; 259d8 <CGPIOPin::Invert()+0x2c>
   259c8:	e92d4010 	push	{r4, lr}
   259cc:	e3a020b5 	mov	r2, #181	; 0xb5
   259d0:	e28100ec 	add	r0, r1, #236	; 0xec
   259d4:	ebfffb89 	bl	24800 <assertion_failed>
   259d8:	00045090 	.word	0x00045090

000259dc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   259dc:	e5d0c010 	ldrb	ip, [r0, #16]
   259e0:	e92d4010 	push	{r4, lr}
   259e4:	e24ce002 	sub	lr, ip, #2
   259e8:	e35c0000 	cmp	ip, #0
   259ec:	135e0001 	cmpne	lr, #1
   259f0:	8a000028 	bhi	25a98 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
   259f4:	e5d0c025 	ldrb	ip, [r0, #37]	; 0x25
   259f8:	e35c0006 	cmp	ip, #6
   259fc:	1a000011 	bne	25a48 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
   25a00:	e5d0c026 	ldrb	ip, [r0, #38]	; 0x26
   25a04:	e35c0006 	cmp	ip, #6
   25a08:	1a000012 	bne	25a58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
   25a0c:	e3510000 	cmp	r1, #0
   25a10:	0a000014 	beq	25a68 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   25a14:	e590c01c 	ldr	ip, [r0, #28]
   25a18:	e35c0000 	cmp	ip, #0
   25a1c:	1a000015 	bne	25a78 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
   25a20:	e590c018 	ldr	ip, [r0, #24]
   25a24:	e580101c 	str	r1, [r0, #28]
   25a28:	e35c0000 	cmp	ip, #0
   25a2c:	e5802020 	str	r2, [r0, #32]
   25a30:	e5c03024 	strb	r3, [r0, #36]	; 0x24
   25a34:	0a000013 	beq	25a88 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
   25a38:	e8bd4010 	pop	{r4, lr}
   25a3c:	e1a01000 	mov	r1, r0
   25a40:	e1a0000c 	mov	r0, ip
   25a44:	ea001b7f 	b	2c848 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   25a48:	e59f1058 	ldr	r1, [pc, #88]	; 25aa8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25a4c:	e3a020c0 	mov	r2, #192	; 0xc0
   25a50:	e2810f42 	add	r0, r1, #264	; 0x108
   25a54:	ebfffb69 	bl	24800 <assertion_failed>
   25a58:	e59f1048 	ldr	r1, [pc, #72]	; 25aa8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25a5c:	e3a020c1 	mov	r2, #193	; 0xc1
   25a60:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25a64:	ebfffb65 	bl	24800 <assertion_failed>
   25a68:	e59f1038 	ldr	r1, [pc, #56]	; 25aa8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25a6c:	e3a020c3 	mov	r2, #195	; 0xc3
   25a70:	e2810f55 	add	r0, r1, #340	; 0x154
   25a74:	ebfffb61 	bl	24800 <assertion_failed>
   25a78:	e59f1028 	ldr	r1, [pc, #40]	; 25aa8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25a7c:	e3a020c4 	mov	r2, #196	; 0xc4
   25a80:	e2810f59 	add	r0, r1, #356	; 0x164
   25a84:	ebfffb5d 	bl	24800 <assertion_failed>
   25a88:	e59f1018 	ldr	r1, [pc, #24]	; 25aa8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25a8c:	e3a020cb 	mov	r2, #203	; 0xcb
   25a90:	e2810f5d 	add	r0, r1, #372	; 0x174
   25a94:	ebfffb59 	bl	24800 <assertion_failed>
   25a98:	e59f1008 	ldr	r1, [pc, #8]	; 25aa8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   25a9c:	e3a020be 	mov	r2, #190	; 0xbe
   25aa0:	e2810090 	add	r0, r1, #144	; 0x90
   25aa4:	ebfffb55 	bl	24800 <assertion_failed>
   25aa8:	00045090 	.word	0x00045090

00025aac <CGPIOPin::DisconnectInterrupt()>:
   25aac:	e5d03010 	ldrb	r3, [r0, #16]
   25ab0:	e92d4010 	push	{r4, lr}
   25ab4:	e2432002 	sub	r2, r3, #2
   25ab8:	e3530000 	cmp	r3, #0
   25abc:	13520001 	cmpne	r2, #1
   25ac0:	8a000020 	bhi	25b48 <CGPIOPin::DisconnectInterrupt()+0x9c>
   25ac4:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25ac8:	e1a01000 	mov	r1, r0
   25acc:	e3530006 	cmp	r3, #6
   25ad0:	1a00000c 	bne	25b08 <CGPIOPin::DisconnectInterrupt()+0x5c>
   25ad4:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25ad8:	e3530006 	cmp	r3, #6
   25adc:	1a00000d 	bne	25b18 <CGPIOPin::DisconnectInterrupt()+0x6c>
   25ae0:	e590301c 	ldr	r3, [r0, #28]
   25ae4:	e3530000 	cmp	r3, #0
   25ae8:	0a00000e 	beq	25b28 <CGPIOPin::DisconnectInterrupt()+0x7c>
   25aec:	e3a03000 	mov	r3, #0
   25af0:	e5900018 	ldr	r0, [r0, #24]
   25af4:	e581301c 	str	r3, [r1, #28]
   25af8:	e1500003 	cmp	r0, r3
   25afc:	0a00000d 	beq	25b38 <CGPIOPin::DisconnectInterrupt()+0x8c>
   25b00:	e8bd4010 	pop	{r4, lr}
   25b04:	ea001b73 	b	2c8d8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   25b08:	e59f1048 	ldr	r1, [pc, #72]	; 25b58 <CGPIOPin::DisconnectInterrupt()+0xac>
   25b0c:	e3a020d5 	mov	r2, #213	; 0xd5
   25b10:	e2810f42 	add	r0, r1, #264	; 0x108
   25b14:	ebfffb39 	bl	24800 <assertion_failed>
   25b18:	e59f1038 	ldr	r1, [pc, #56]	; 25b58 <CGPIOPin::DisconnectInterrupt()+0xac>
   25b1c:	e3a020d6 	mov	r2, #214	; 0xd6
   25b20:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25b24:	ebfffb35 	bl	24800 <assertion_failed>
   25b28:	e59f1028 	ldr	r1, [pc, #40]	; 25b58 <CGPIOPin::DisconnectInterrupt()+0xac>
   25b2c:	e3a020d8 	mov	r2, #216	; 0xd8
   25b30:	e2810f61 	add	r0, r1, #388	; 0x184
   25b34:	ebfffb31 	bl	24800 <assertion_failed>
   25b38:	e59f1018 	ldr	r1, [pc, #24]	; 25b58 <CGPIOPin::DisconnectInterrupt()+0xac>
   25b3c:	e3a020db 	mov	r2, #219	; 0xdb
   25b40:	e2810f5d 	add	r0, r1, #372	; 0x174
   25b44:	ebfffb2d 	bl	24800 <assertion_failed>
   25b48:	e59f1008 	ldr	r1, [pc, #8]	; 25b58 <CGPIOPin::DisconnectInterrupt()+0xac>
   25b4c:	e3a020d3 	mov	r2, #211	; 0xd3
   25b50:	e2810090 	add	r0, r1, #144	; 0x90
   25b54:	ebfffb29 	bl	24800 <assertion_failed>
   25b58:	00045090 	.word	0x00045090

00025b5c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   25b5c:	e5d03010 	ldrb	r3, [r0, #16]
   25b60:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25b64:	e2432002 	sub	r2, r3, #2
   25b68:	e3530000 	cmp	r3, #0
   25b6c:	13520001 	cmpne	r2, #1
   25b70:	8a000030 	bhi	25c38 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xdc>
   25b74:	e590301c 	ldr	r3, [r0, #28]
   25b78:	e1a04000 	mov	r4, r0
   25b7c:	e3530000 	cmp	r3, #0
   25b80:	0a00001c 	beq	25bf8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
   25b84:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25b88:	e3530006 	cmp	r3, #6
   25b8c:	1a00001d 	bne	25c08 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xac>
   25b90:	e3510005 	cmp	r1, #5
   25b94:	ca00001f 	bgt	25c18 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xbc>
   25b98:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25b9c:	e1530001 	cmp	r3, r1
   25ba0:	0a000020 	beq	25c28 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xcc>
   25ba4:	e59f709c 	ldr	r7, [pc, #156]	; 25c48 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xec>
   25ba8:	e5903008 	ldr	r3, [r0, #8]
   25bac:	e5970000 	ldr	r0, [r7]
   25bb0:	e59f6094 	ldr	r6, [pc, #148]	; 25c4c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf0>
   25bb4:	e0815081 	add	r5, r1, r1, lsl #1
   25bb8:	e3500000 	cmp	r0, #0
   25bbc:	e5c41025 	strb	r1, [r4, #37]	; 0x25
   25bc0:	e1a05105 	lsl	r5, r5, #2
   25bc4:	e0836006 	add	r6, r3, r6
   25bc8:	1a000008 	bne	25bf0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x94>
   25bcc:	e594200c 	ldr	r2, [r4, #12]
   25bd0:	e7963005 	ldr	r3, [r6, r5]
   25bd4:	e1833002 	orr	r3, r3, r2
   25bd8:	e7863005 	str	r3, [r6, r5]
   25bdc:	e5973000 	ldr	r3, [r7]
   25be0:	e3530000 	cmp	r3, #0
   25be4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25be8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25bec:	ea00187d 	b	2bde8 <LeaveCritical>
   25bf0:	eb001851 	bl	2bd3c <EnterCritical>
   25bf4:	eafffff4 	b	25bcc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x70>
   25bf8:	e59f1050 	ldr	r1, [pc, #80]	; 25c50 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25bfc:	e3a020e4 	mov	r2, #228	; 0xe4
   25c00:	e2810f61 	add	r0, r1, #388	; 0x184
   25c04:	ebfffafd 	bl	24800 <assertion_failed>
   25c08:	e59f1040 	ldr	r1, [pc, #64]	; 25c50 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25c0c:	e3a020e6 	mov	r2, #230	; 0xe6
   25c10:	e2810f42 	add	r0, r1, #264	; 0x108
   25c14:	ebfffaf9 	bl	24800 <assertion_failed>
   25c18:	e59f1030 	ldr	r1, [pc, #48]	; 25c50 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25c1c:	e3a020e7 	mov	r2, #231	; 0xe7
   25c20:	e2810f65 	add	r0, r1, #404	; 0x194
   25c24:	ebfffaf5 	bl	24800 <assertion_failed>
   25c28:	e59f1020 	ldr	r1, [pc, #32]	; 25c50 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25c2c:	e3a020e8 	mov	r2, #232	; 0xe8
   25c30:	e2810f6e 	add	r0, r1, #440	; 0x1b8
   25c34:	ebfffaf1 	bl	24800 <assertion_failed>
   25c38:	e59f1010 	ldr	r1, [pc, #16]	; 25c50 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   25c3c:	e3a020e3 	mov	r2, #227	; 0xe3
   25c40:	e2810090 	add	r0, r1, #144	; 0x90
   25c44:	ebfffaed 	bl	24800 <assertion_failed>
   25c48:	0004e0f4 	.word	0x0004e0f4
   25c4c:	2020004c 	.word	0x2020004c
   25c50:	00045090 	.word	0x00045090

00025c54 <CGPIOPin::DisableInterrupt()>:
   25c54:	e5d03010 	ldrb	r3, [r0, #16]
   25c58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25c5c:	e2432002 	sub	r2, r3, #2
   25c60:	e3530000 	cmp	r3, #0
   25c64:	13520001 	cmpne	r2, #1
   25c68:	8a00001d 	bhi	25ce4 <CGPIOPin::DisableInterrupt()+0x90>
   25c6c:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25c70:	e1a05000 	mov	r5, r0
   25c74:	e3530005 	cmp	r3, #5
   25c78:	ca000015 	bgt	25cd4 <CGPIOPin::DisableInterrupt()+0x80>
   25c7c:	e59f7070 	ldr	r7, [pc, #112]	; 25cf4 <CGPIOPin::DisableInterrupt()+0xa0>
   25c80:	e5902008 	ldr	r2, [r0, #8]
   25c84:	e5970000 	ldr	r0, [r7]
   25c88:	e59f6068 	ldr	r6, [pc, #104]	; 25cf8 <CGPIOPin::DisableInterrupt()+0xa4>
   25c8c:	e0833083 	add	r3, r3, r3, lsl #1
   25c90:	e3500000 	cmp	r0, #0
   25c94:	e1a04103 	lsl	r4, r3, #2
   25c98:	e0826006 	add	r6, r2, r6
   25c9c:	1a00000a 	bne	25ccc <CGPIOPin::DisableInterrupt()+0x78>
   25ca0:	e7963004 	ldr	r3, [r6, r4]
   25ca4:	e595200c 	ldr	r2, [r5, #12]
   25ca8:	e1c33002 	bic	r3, r3, r2
   25cac:	e7863004 	str	r3, [r6, r4]
   25cb0:	e5973000 	ldr	r3, [r7]
   25cb4:	e3530000 	cmp	r3, #0
   25cb8:	0a000000 	beq	25cc0 <CGPIOPin::DisableInterrupt()+0x6c>
   25cbc:	eb001849 	bl	2bde8 <LeaveCritical>
   25cc0:	e3a03006 	mov	r3, #6
   25cc4:	e5c53025 	strb	r3, [r5, #37]	; 0x25
   25cc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25ccc:	eb00181a 	bl	2bd3c <EnterCritical>
   25cd0:	eafffff2 	b	25ca0 <CGPIOPin::DisableInterrupt()+0x4c>
   25cd4:	e59f1020 	ldr	r1, [pc, #32]	; 25cfc <CGPIOPin::DisableInterrupt()+0xa8>
   25cd8:	e3a020fb 	mov	r2, #251	; 0xfb
   25cdc:	e2810f75 	add	r0, r1, #468	; 0x1d4
   25ce0:	ebfffac6 	bl	24800 <assertion_failed>
   25ce4:	e59f1010 	ldr	r1, [pc, #16]	; 25cfc <CGPIOPin::DisableInterrupt()+0xa8>
   25ce8:	e3a020f9 	mov	r2, #249	; 0xf9
   25cec:	e2810090 	add	r0, r1, #144	; 0x90
   25cf0:	ebfffac2 	bl	24800 <assertion_failed>
   25cf4:	0004e0f4 	.word	0x0004e0f4
   25cf8:	2020004c 	.word	0x2020004c
   25cfc:	00045090 	.word	0x00045090

00025d00 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   25d00:	e5d03010 	ldrb	r3, [r0, #16]
   25d04:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25d08:	e2432002 	sub	r2, r3, #2
   25d0c:	e3530000 	cmp	r3, #0
   25d10:	13520001 	cmpne	r2, #1
   25d14:	8a000030 	bhi	25ddc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xdc>
   25d18:	e590301c 	ldr	r3, [r0, #28]
   25d1c:	e1a04000 	mov	r4, r0
   25d20:	e3530000 	cmp	r3, #0
   25d24:	0a00001c 	beq	25d9c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
   25d28:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25d2c:	e3530006 	cmp	r3, #6
   25d30:	1a00001d 	bne	25dac <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xac>
   25d34:	e3510005 	cmp	r1, #5
   25d38:	ca00001f 	bgt	25dbc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xbc>
   25d3c:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   25d40:	e1530001 	cmp	r3, r1
   25d44:	0a000020 	beq	25dcc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xcc>
   25d48:	e59f709c 	ldr	r7, [pc, #156]	; 25dec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xec>
   25d4c:	e5903008 	ldr	r3, [r0, #8]
   25d50:	e5970000 	ldr	r0, [r7]
   25d54:	e59f6094 	ldr	r6, [pc, #148]	; 25df0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf0>
   25d58:	e0815081 	add	r5, r1, r1, lsl #1
   25d5c:	e3500000 	cmp	r0, #0
   25d60:	e5c41026 	strb	r1, [r4, #38]	; 0x26
   25d64:	e1a05105 	lsl	r5, r5, #2
   25d68:	e0836006 	add	r6, r3, r6
   25d6c:	1a000008 	bne	25d94 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x94>
   25d70:	e594200c 	ldr	r2, [r4, #12]
   25d74:	e7963005 	ldr	r3, [r6, r5]
   25d78:	e1833002 	orr	r3, r3, r2
   25d7c:	e7863005 	str	r3, [r6, r5]
   25d80:	e5973000 	ldr	r3, [r7]
   25d84:	e3530000 	cmp	r3, #0
   25d88:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   25d8c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   25d90:	ea001814 	b	2bde8 <LeaveCritical>
   25d94:	eb0017e8 	bl	2bd3c <EnterCritical>
   25d98:	eafffff4 	b	25d70 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x70>
   25d9c:	e59f1050 	ldr	r1, [pc, #80]	; 25df4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25da0:	e59f2050 	ldr	r2, [pc, #80]	; 25df8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
   25da4:	e2810f61 	add	r0, r1, #388	; 0x184
   25da8:	ebfffa94 	bl	24800 <assertion_failed>
   25dac:	e59f1040 	ldr	r1, [pc, #64]	; 25df4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25db0:	e59f2044 	ldr	r2, [pc, #68]	; 25dfc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xfc>
   25db4:	e2810f4b 	add	r0, r1, #300	; 0x12c
   25db8:	ebfffa90 	bl	24800 <assertion_failed>
   25dbc:	e59f1030 	ldr	r1, [pc, #48]	; 25df4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25dc0:	e3a02e11 	mov	r2, #272	; 0x110
   25dc4:	e2810f65 	add	r0, r1, #404	; 0x194
   25dc8:	ebfffa8c 	bl	24800 <assertion_failed>
   25dcc:	e59f1020 	ldr	r1, [pc, #32]	; 25df4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25dd0:	e59f2028 	ldr	r2, [pc, #40]	; 25e00 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x100>
   25dd4:	e2810f7e 	add	r0, r1, #504	; 0x1f8
   25dd8:	ebfffa88 	bl	24800 <assertion_failed>
   25ddc:	e59f1010 	ldr	r1, [pc, #16]	; 25df4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   25de0:	e3a02f43 	mov	r2, #268	; 0x10c
   25de4:	e2810090 	add	r0, r1, #144	; 0x90
   25de8:	ebfffa84 	bl	24800 <assertion_failed>
   25dec:	0004e0f4 	.word	0x0004e0f4
   25df0:	2020004c 	.word	0x2020004c
   25df4:	00045090 	.word	0x00045090
   25df8:	0000010d 	.word	0x0000010d
   25dfc:	0000010f 	.word	0x0000010f
   25e00:	00000111 	.word	0x00000111

00025e04 <CGPIOPin::DisableInterrupt2()>:
   25e04:	e5d03010 	ldrb	r3, [r0, #16]
   25e08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25e0c:	e2432002 	sub	r2, r3, #2
   25e10:	e3530000 	cmp	r3, #0
   25e14:	13520001 	cmpne	r2, #1
   25e18:	8a00001d 	bhi	25e94 <CGPIOPin::DisableInterrupt2()+0x90>
   25e1c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   25e20:	e1a05000 	mov	r5, r0
   25e24:	e3530005 	cmp	r3, #5
   25e28:	ca000015 	bgt	25e84 <CGPIOPin::DisableInterrupt2()+0x80>
   25e2c:	e59f7070 	ldr	r7, [pc, #112]	; 25ea4 <CGPIOPin::DisableInterrupt2()+0xa0>
   25e30:	e5902008 	ldr	r2, [r0, #8]
   25e34:	e5970000 	ldr	r0, [r7]
   25e38:	e59f6068 	ldr	r6, [pc, #104]	; 25ea8 <CGPIOPin::DisableInterrupt2()+0xa4>
   25e3c:	e0833083 	add	r3, r3, r3, lsl #1
   25e40:	e3500000 	cmp	r0, #0
   25e44:	e1a04103 	lsl	r4, r3, #2
   25e48:	e0826006 	add	r6, r2, r6
   25e4c:	1a00000a 	bne	25e7c <CGPIOPin::DisableInterrupt2()+0x78>
   25e50:	e7963004 	ldr	r3, [r6, r4]
   25e54:	e595200c 	ldr	r2, [r5, #12]
   25e58:	e1c33002 	bic	r3, r3, r2
   25e5c:	e7863004 	str	r3, [r6, r4]
   25e60:	e5973000 	ldr	r3, [r7]
   25e64:	e3530000 	cmp	r3, #0
   25e68:	0a000000 	beq	25e70 <CGPIOPin::DisableInterrupt2()+0x6c>
   25e6c:	eb0017dd 	bl	2bde8 <LeaveCritical>
   25e70:	e3a03006 	mov	r3, #6
   25e74:	e5c53026 	strb	r3, [r5, #38]	; 0x26
   25e78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25e7c:	eb0017ae 	bl	2bd3c <EnterCritical>
   25e80:	eafffff2 	b	25e50 <CGPIOPin::DisableInterrupt2()+0x4c>
   25e84:	e59f1020 	ldr	r1, [pc, #32]	; 25eac <CGPIOPin::DisableInterrupt2()+0xa8>
   25e88:	e3a02f49 	mov	r2, #292	; 0x124
   25e8c:	e2810f85 	add	r0, r1, #532	; 0x214
   25e90:	ebfffa5a 	bl	24800 <assertion_failed>
   25e94:	e59f1010 	ldr	r1, [pc, #16]	; 25eac <CGPIOPin::DisableInterrupt2()+0xa8>
   25e98:	e59f2010 	ldr	r2, [pc, #16]	; 25eb0 <CGPIOPin::DisableInterrupt2()+0xac>
   25e9c:	e2810090 	add	r0, r1, #144	; 0x90
   25ea0:	ebfffa56 	bl	24800 <assertion_failed>
   25ea4:	0004e0f4 	.word	0x0004e0f4
   25ea8:	2020004c 	.word	0x2020004c
   25eac:	00045090 	.word	0x00045090
   25eb0:	00000122 	.word	0x00000122

00025eb4 <CGPIOPin::AcknowledgeInterrupt()>:
   25eb4:	e590301c 	ldr	r3, [r0, #28]
   25eb8:	e92d4010 	push	{r4, lr}
   25ebc:	e3530000 	cmp	r3, #0
   25ec0:	0a000009 	beq	25eec <CGPIOPin::AcknowledgeInterrupt()+0x38>
   25ec4:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
   25ec8:	e3530000 	cmp	r3, #0
   25ecc:	1a00000a 	bne	25efc <CGPIOPin::AcknowledgeInterrupt()+0x48>
   25ed0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25ed4:	e59f2030 	ldr	r2, [pc, #48]	; 25f0c <CGPIOPin::AcknowledgeInterrupt()+0x58>
   25ed8:	e590c00c 	ldr	ip, [r0, #12]
   25edc:	e5901008 	ldr	r1, [r0, #8]
   25ee0:	e781c002 	str	ip, [r1, r2]
   25ee4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25ee8:	e8bd8010 	pop	{r4, pc}
   25eec:	e59f101c 	ldr	r1, [pc, #28]	; 25f10 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   25ef0:	e59f201c 	ldr	r2, [pc, #28]	; 25f14 <CGPIOPin::AcknowledgeInterrupt()+0x60>
   25ef4:	e2810f61 	add	r0, r1, #388	; 0x184
   25ef8:	ebfffa40 	bl	24800 <assertion_failed>
   25efc:	e59f100c 	ldr	r1, [pc, #12]	; 25f10 <CGPIOPin::AcknowledgeInterrupt()+0x5c>
   25f00:	e3a02f4d 	mov	r2, #308	; 0x134
   25f04:	e2810f8e 	add	r0, r1, #568	; 0x238
   25f08:	ebfffa3c 	bl	24800 <assertion_failed>
   25f0c:	20200040 	.word	0x20200040
   25f10:	00045090 	.word	0x00045090
   25f14:	00000133 	.word	0x00000133

00025f18 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   25f18:	e3a03000 	mov	r3, #0
   25f1c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25f20:	e1d13000 	bics	r3, r1, r0
   25f24:	159f2018 	ldrne	r2, [pc, #24]	; 25f44 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   25f28:	15823028 	strne	r3, [r2, #40]	; 0x28
   25f2c:	e0100001 	ands	r0, r0, r1
   25f30:	159f300c 	ldrne	r3, [pc, #12]	; 25f44 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x2c>
   25f34:	1583001c 	strne	r0, [r3, #28]
   25f38:	e3a03000 	mov	r3, #0
   25f3c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25f40:	e12fff1e 	bx	lr
   25f44:	20200000 	.word	0x20200000

00025f48 <CGPIOPin::ReadAll()>:
   25f48:	e3a03000 	mov	r3, #0
   25f4c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   25f50:	e59f2008 	ldr	r2, [pc, #8]	; 25f60 <CGPIOPin::ReadAll()+0x18>
   25f54:	e5920034 	ldr	r0, [r2, #52]	; 0x34
   25f58:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   25f5c:	e12fff1e 	bx	lr
   25f60:	20200000 	.word	0x20200000

00025f64 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   25f64:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25f68:	e59f5080 	ldr	r5, [pc, #128]	; 25ff0 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x8c>
   25f6c:	e1a06000 	mov	r6, r0
   25f70:	e5950000 	ldr	r0, [r5]
   25f74:	e1a07001 	mov	r7, r1
   25f78:	e3500000 	cmp	r0, #0
   25f7c:	1a000015 	bne	25fd8 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x74>
   25f80:	e3a04000 	mov	r4, #0
   25f84:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   25f88:	e3570002 	cmp	r7, #2
   25f8c:	e5969008 	ldr	r9, [r6, #8]
   25f90:	e59f805c 	ldr	r8, [pc, #92]	; 25ff4 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   25f94:	ca000011 	bgt	25fe0 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x7c>
   25f98:	e59fa058 	ldr	sl, [pc, #88]	; 25ff8 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x94>
   25f9c:	e3a00005 	mov	r0, #5
   25fa0:	e58a7094 	str	r7, [sl, #148]	; 0x94
   25fa4:	eb000fa3 	bl	29e38 <CTimer::SimpleusDelay(unsigned int)>
   25fa8:	e596300c 	ldr	r3, [r6, #12]
   25fac:	e3a00005 	mov	r0, #5
   25fb0:	e7893008 	str	r3, [r9, r8]
   25fb4:	eb000f9f 	bl	29e38 <CTimer::SimpleusDelay(unsigned int)>
   25fb8:	e58a4094 	str	r4, [sl, #148]	; 0x94
   25fbc:	e7894008 	str	r4, [r9, r8]
   25fc0:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   25fc4:	e5953000 	ldr	r3, [r5]
   25fc8:	e3530000 	cmp	r3, #0
   25fcc:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   25fd0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   25fd4:	ea001783 	b	2bde8 <LeaveCritical>
   25fd8:	eb001757 	bl	2bd3c <EnterCritical>
   25fdc:	eaffffe7 	b	25f80 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x1c>
   25fe0:	e59f1014 	ldr	r1, [pc, #20]	; 25ffc <CGPIOPin::SetPullMode(TGPIOPullMode)+0x98>
   25fe4:	e59f2014 	ldr	r2, [pc, #20]	; 26000 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x9c>
   25fe8:	e2810f91 	add	r0, r1, #580	; 0x244
   25fec:	ebfffa03 	bl	24800 <assertion_failed>
   25ff0:	0004e0f4 	.word	0x0004e0f4
   25ff4:	20200098 	.word	0x20200098
   25ff8:	20200000 	.word	0x20200000
   25ffc:	00045090 	.word	0x00045090
   26000:	00000165 	.word	0x00000165

00026004 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   26004:	e5903004 	ldr	r3, [r0, #4]
   26008:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2600c:	e3530035 	cmp	r3, #53	; 0x35
   26010:	8a00001e 	bhi	26090 <CGPIOPin::SetAlternateFunction(unsigned int)+0x8c>
   26014:	e59f2094 	ldr	r2, [pc, #148]	; 260b0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xac>
   26018:	e1a06001 	mov	r6, r1
   2601c:	e3510005 	cmp	r1, #5
   26020:	e0821392 	umull	r1, r2, r2, r3
   26024:	e1a021a2 	lsr	r2, r2, #3
   26028:	e2825302 	add	r5, r2, #134217728	; 0x8000000
   2602c:	e0822102 	add	r2, r2, r2, lsl #2
   26030:	e2855702 	add	r5, r5, #524288	; 0x80000
   26034:	e0433082 	sub	r3, r3, r2, lsl #1
   26038:	e1a05105 	lsl	r5, r5, #2
   2603c:	e0834083 	add	r4, r3, r3, lsl #1
   26040:	8a000016 	bhi	260a0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
   26044:	e59f7068 	ldr	r7, [pc, #104]	; 260b4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb0>
   26048:	e5970000 	ldr	r0, [r7]
   2604c:	e3500000 	cmp	r0, #0
   26050:	1a00000c 	bne	26088 <CGPIOPin::SetAlternateFunction(unsigned int)+0x84>
   26054:	e3a00007 	mov	r0, #7
   26058:	e59f1058 	ldr	r1, [pc, #88]	; 260b8 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb4>
   2605c:	e5953000 	ldr	r3, [r5]
   26060:	e0816106 	add	r6, r1, r6, lsl #2
   26064:	e5962260 	ldr	r2, [r6, #608]	; 0x260
   26068:	e1c33410 	bic	r3, r3, r0, lsl r4
   2606c:	e1833412 	orr	r3, r3, r2, lsl r4
   26070:	e5853000 	str	r3, [r5]
   26074:	e5973000 	ldr	r3, [r7]
   26078:	e3530000 	cmp	r3, #0
   2607c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   26080:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   26084:	ea001757 	b	2bde8 <LeaveCritical>
   26088:	eb00172b 	bl	2bd3c <EnterCritical>
   2608c:	eafffff0 	b	26054 <CGPIOPin::SetAlternateFunction(unsigned int)+0x50>
   26090:	e59f1024 	ldr	r1, [pc, #36]	; 260bc <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   26094:	e59f2024 	ldr	r2, [pc, #36]	; 260c0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
   26098:	e2810020 	add	r0, r1, #32
   2609c:	ebfff9d7 	bl	24800 <assertion_failed>
   260a0:	e59f1014 	ldr	r1, [pc, #20]	; 260bc <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   260a4:	e59f2018 	ldr	r2, [pc, #24]	; 260c4 <CGPIOPin::SetAlternateFunction(unsigned int)+0xc0>
   260a8:	e2810f9a 	add	r0, r1, #616	; 0x268
   260ac:	ebfff9d3 	bl	24800 <assertion_failed>
   260b0:	cccccccd 	.word	0xcccccccd
   260b4:	0004e0f4 	.word	0x0004e0f4
   260b8:	00045080 	.word	0x00045080
   260bc:	00045090 	.word	0x00045090
   260c0:	00000181 	.word	0x00000181
   260c4:	00000185 	.word	0x00000185

000260c8 <CGPIOPin::InterruptHandler()>:
   260c8:	e5d03010 	ldrb	r3, [r0, #16]
   260cc:	e92d4010 	push	{r4, lr}
   260d0:	e2432002 	sub	r2, r3, #2
   260d4:	e3530000 	cmp	r3, #0
   260d8:	13520001 	cmpne	r2, #1
   260dc:	8a000013 	bhi	26130 <CGPIOPin::InterruptHandler()+0x68>
   260e0:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
   260e4:	e3530005 	cmp	r3, #5
   260e8:	ca000005 	bgt	26104 <CGPIOPin::InterruptHandler()+0x3c>
   260ec:	e590301c 	ldr	r3, [r0, #28]
   260f0:	e3530000 	cmp	r3, #0
   260f4:	0a000009 	beq	26120 <CGPIOPin::InterruptHandler()+0x58>
   260f8:	e8bd4010 	pop	{r4, lr}
   260fc:	e5900020 	ldr	r0, [r0, #32]
   26100:	e12fff13 	bx	r3
   26104:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
   26108:	e3530005 	cmp	r3, #5
   2610c:	dafffff6 	ble	260ec <CGPIOPin::InterruptHandler()+0x24>
   26110:	e59f1028 	ldr	r1, [pc, #40]	; 26140 <CGPIOPin::InterruptHandler()+0x78>
   26114:	e59f2028 	ldr	r2, [pc, #40]	; 26144 <CGPIOPin::InterruptHandler()+0x7c>
   26118:	e2810f9e 	add	r0, r1, #632	; 0x278
   2611c:	ebfff9b7 	bl	24800 <assertion_failed>
   26120:	e59f1018 	ldr	r1, [pc, #24]	; 26140 <CGPIOPin::InterruptHandler()+0x78>
   26124:	e3a02f66 	mov	r2, #408	; 0x198
   26128:	e2810f61 	add	r0, r1, #388	; 0x184
   2612c:	ebfff9b3 	bl	24800 <assertion_failed>
   26130:	e59f1008 	ldr	r1, [pc, #8]	; 26140 <CGPIOPin::InterruptHandler()+0x78>
   26134:	e3a02f65 	mov	r2, #404	; 0x194
   26138:	e2810090 	add	r0, r1, #144	; 0x90
   2613c:	ebfff9af 	bl	24800 <assertion_failed>
   26140:	00045090 	.word	0x00045090
   26144:	00000196 	.word	0x00000196

00026148 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   26148:	e3500035 	cmp	r0, #53	; 0x35
   2614c:	e92d4070 	push	{r4, r5, r6, lr}
   26150:	8a000018 	bhi	261b8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   26154:	e3a02001 	mov	r2, #1
   26158:	e59f6068 	ldr	r6, [pc, #104]	; 261c8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x80>
   2615c:	e59f4068 	ldr	r4, [pc, #104]	; 261cc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   26160:	e5963000 	ldr	r3, [r6]
   26164:	e08442a0 	add	r4, r4, r0, lsr #5
   26168:	e200501f 	and	r5, r0, #31
   2616c:	e3530000 	cmp	r3, #0
   26170:	e1a04104 	lsl	r4, r4, #2
   26174:	e1a05512 	lsl	r5, r2, r5
   26178:	1a00000b 	bne	261ac <CGPIOPin::DisableAllInterrupts(unsigned int)+0x64>
   2617c:	e1e02005 	mvn	r2, r5
   26180:	e59f1048 	ldr	r1, [pc, #72]	; 261d0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
   26184:	e5943000 	ldr	r3, [r4]
   26188:	e0033002 	and	r3, r3, r2
   2618c:	e484300c 	str	r3, [r4], #12
   26190:	e1540001 	cmp	r4, r1
   26194:	9afffffa 	bls	26184 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
   26198:	e5963000 	ldr	r3, [r6]
   2619c:	e3530000 	cmp	r3, #0
   261a0:	08bd8070 	popeq	{r4, r5, r6, pc}
   261a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   261a8:	ea00170e 	b	2bde8 <LeaveCritical>
   261ac:	e1a00003 	mov	r0, r3
   261b0:	eb0016e1 	bl	2bd3c <EnterCritical>
   261b4:	eafffff0 	b	2617c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x34>
   261b8:	e59f1014 	ldr	r1, [pc, #20]	; 261d4 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x8c>
   261bc:	e59f2014 	ldr	r2, [pc, #20]	; 261d8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x90>
   261c0:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   261c4:	ebfff98d 	bl	24800 <assertion_failed>
   261c8:	0004e0f4 	.word	0x0004e0f4
   261cc:	08080013 	.word	0x08080013
   261d0:	2020008b 	.word	0x2020008b
   261d4:	00045090 	.word	0x00045090
   261d8:	0000019e 	.word	0x0000019e

000261dc <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   261dc:	e3a02001 	mov	r2, #1
   261e0:	e59f3004 	ldr	r3, [pc, #4]	; 261ec <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE+0x10>
   261e4:	e5832000 	str	r2, [r3]
   261e8:	e12fff1e 	bx	lr
   261ec:	0004e0f4 	.word	0x0004e0f4

000261f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
   261f0:	e3a01000 	mov	r1, #0
   261f4:	ea00000a 	b	26224 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
   261f8:	e3520009 	cmp	r2, #9
   261fc:	8a000011 	bhi	26248 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   26200:	e3730001 	cmn	r3, #1
   26204:	13a02000 	movne	r2, #0
   26208:	03a02001 	moveq	r2, #1
   2620c:	e1510003 	cmp	r1, r3
   26210:	91a01002 	movls	r1, r2
   26214:	83821001 	orrhi	r1, r2, #1
   26218:	e3510000 	cmp	r1, #0
   2621c:	1a000009 	bne	26248 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x58>
   26220:	e1a01003 	mov	r1, r3
   26224:	e0d0c0d1 	ldrsb	ip, [r0], #1
   26228:	e0813101 	add	r3, r1, r1, lsl #2
   2622c:	e24c2030 	sub	r2, ip, #48	; 0x30
   26230:	e35c0000 	cmp	ip, #0
   26234:	e0823083 	add	r3, r2, r3, lsl #1
   26238:	e6ef2072 	uxtb	r2, r2
   2623c:	1affffed 	bne	261f8 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
   26240:	e1a00001 	mov	r0, r1
   26244:	e12fff1e 	bx	lr
   26248:	e3e01000 	mvn	r1, #0
   2624c:	e1a00001 	mov	r0, r1
   26250:	e12fff1e 	bx	lr

00026254 <CKernelOptions::~CKernelOptions()>:
   26254:	e3a02000 	mov	r2, #0
   26258:	e59f3004 	ldr	r3, [pc, #4]	; 26264 <CKernelOptions::~CKernelOptions()+0x10>
   2625c:	e5832000 	str	r2, [r3]
   26260:	e12fff1e 	bx	lr
   26264:	0004e0f8 	.word	0x0004e0f8

00026268 <CKernelOptions::GetWidth() const>:
   26268:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
   2626c:	e12fff1e 	bx	lr

00026270 <CKernelOptions::GetHeight() const>:
   26270:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
   26274:	e12fff1e 	bx	lr

00026278 <CKernelOptions::GetLogDevice() const>:
   26278:	e2800e81 	add	r0, r0, #2064	; 0x810
   2627c:	e2800008 	add	r0, r0, #8
   26280:	e12fff1e 	bx	lr

00026284 <CKernelOptions::GetLogLevel() const>:
   26284:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
   26288:	e12fff1e 	bx	lr

0002628c <CKernelOptions::GetKeyMap() const>:
   2628c:	e2800e83 	add	r0, r0, #2096	; 0x830
   26290:	e12fff1e 	bx	lr

00026294 <CKernelOptions::GetUSBPowerDelay() const>:
   26294:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
   26298:	e12fff1e 	bx	lr

0002629c <CKernelOptions::GetUSBFullSpeed() const>:
   2629c:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
   262a0:	e12fff1e 	bx	lr

000262a4 <CKernelOptions::GetSoundDevice() const>:
   262a4:	e2800e83 	add	r0, r0, #2096	; 0x830
   262a8:	e2800009 	add	r0, r0, #9
   262ac:	e12fff1e 	bx	lr

000262b0 <CKernelOptions::GetSoundOption() const>:
   262b0:	e5900850 	ldr	r0, [r0, #2128]	; 0x850
   262b4:	e12fff1e 	bx	lr

000262b8 <CKernelOptions::GetCPUSpeed() const>:
   262b8:	e5d00854 	ldrb	r0, [r0, #2132]	; 0x854
   262bc:	e12fff1e 	bx	lr

000262c0 <CKernelOptions::GetSoCMaxTemp() const>:
   262c0:	e5900858 	ldr	r0, [r0, #2136]	; 0x858
   262c4:	e12fff1e 	bx	lr

000262c8 <CKernelOptions::Get()>:
   262c8:	e59f3004 	ldr	r3, [pc, #4]	; 262d4 <CKernelOptions::Get()+0xc>
   262cc:	e5930000 	ldr	r0, [r3]
   262d0:	e12fff1e 	bx	lr
   262d4:	0004e0f8 	.word	0x0004e0f8

000262d8 <CKernelOptions::GetToken()>:
   262d8:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
   262dc:	e1d320d0 	ldrsb	r2, [r3]
   262e0:	e3520000 	cmp	r2, #0
   262e4:	1a000005 	bne	26300 <CKernelOptions::GetToken()+0x28>
   262e8:	ea000016 	b	26348 <CKernelOptions::GetToken()+0x70>
   262ec:	e2833001 	add	r3, r3, #1
   262f0:	e580380c 	str	r3, [r0, #2060]	; 0x80c
   262f4:	e1d320d0 	ldrsb	r2, [r3]
   262f8:	e3520000 	cmp	r2, #0
   262fc:	0a000011 	beq	26348 <CKernelOptions::GetToken()+0x70>
   26300:	e3520020 	cmp	r2, #32
   26304:	0afffff8 	beq	262ec <CKernelOptions::GetToken()+0x14>
   26308:	e1a02003 	mov	r2, r3
   2630c:	ea000000 	b	26314 <CKernelOptions::GetToken()+0x3c>
   26310:	e1a02001 	mov	r2, r1
   26314:	e2821001 	add	r1, r2, #1
   26318:	e580180c 	str	r1, [r0, #2060]	; 0x80c
   2631c:	e1d2c0d1 	ldrsb	ip, [r2, #1]
   26320:	e35c0000 	cmp	ip, #0
   26324:	0a000008 	beq	2634c <CKernelOptions::GetToken()+0x74>
   26328:	e35c0020 	cmp	ip, #32
   2632c:	1afffff7 	bne	26310 <CKernelOptions::GetToken()+0x38>
   26330:	e3a0c000 	mov	ip, #0
   26334:	e2822002 	add	r2, r2, #2
   26338:	e580280c 	str	r2, [r0, #2060]	; 0x80c
   2633c:	e5c1c000 	strb	ip, [r1]
   26340:	e1a00003 	mov	r0, r3
   26344:	e12fff1e 	bx	lr
   26348:	e3a03000 	mov	r3, #0
   2634c:	e1a00003 	mov	r0, r3
   26350:	e12fff1e 	bx	lr

00026354 <CKernelOptions::CKernelOptions()>:
   26354:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26358:	e3a02004 	mov	r2, #4
   2635c:	e1a04000 	mov	r4, r0
   26360:	e3a05000 	mov	r5, #0
   26364:	e3a0303c 	mov	r3, #60	; 0x3c
   26368:	e2807e81 	add	r7, r0, #2064	; 0x810
   2636c:	e2877008 	add	r7, r7, #8
   26370:	e580282c 	str	r2, [r0, #2092]	; 0x82c
   26374:	e5803858 	str	r3, [r0, #2136]	; 0x858
   26378:	e24dd014 	sub	sp, sp, #20
   2637c:	e59f1380 	ldr	r1, [pc, #896]	; 26704 <CKernelOptions::CKernelOptions()+0x3b0>
   26380:	e1a00007 	mov	r0, r7
   26384:	e5845810 	str	r5, [r4, #2064]	; 0x810
   26388:	e5845814 	str	r5, [r4, #2068]	; 0x814
   2638c:	e5845834 	str	r5, [r4, #2100]	; 0x834
   26390:	e5c45838 	strb	r5, [r4, #2104]	; 0x838
   26394:	e5845850 	str	r5, [r4, #2128]	; 0x850
   26398:	e5c45854 	strb	r5, [r4, #2132]	; 0x854
   2639c:	e2849e83 	add	r9, r4, #2096	; 0x830
   263a0:	eb000ff3 	bl	2a374 <strcpy>
   263a4:	e59f135c 	ldr	r1, [pc, #860]	; 26708 <CKernelOptions::CKernelOptions()+0x3b4>
   263a8:	e1a00009 	mov	r0, r9
   263ac:	eb000ff0 	bl	2a374 <strcpy>
   263b0:	e59f3354 	ldr	r3, [pc, #852]	; 2670c <CKernelOptions::CKernelOptions()+0x3b8>
   263b4:	e1a01005 	mov	r1, r5
   263b8:	e5c45839 	strb	r5, [r4, #2105]	; 0x839
   263bc:	e28d0008 	add	r0, sp, #8
   263c0:	e5834000 	str	r4, [r3]
   263c4:	ebfff92e 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   263c8:	e58d5000 	str	r5, [sp]
   263cc:	e1a02004 	mov	r2, r4
   263d0:	e28d0008 	add	r0, sp, #8
   263d4:	e59f3334 	ldr	r3, [pc, #820]	; 26710 <CKernelOptions::CKernelOptions()+0x3bc>
   263d8:	e59f1334 	ldr	r1, [pc, #820]	; 26714 <CKernelOptions::CKernelOptions()+0x3c0>
   263dc:	ebfff934 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   263e0:	e1500005 	cmp	r0, r5
   263e4:	0a000037 	beq	264c8 <CKernelOptions::CKernelOptions()+0x174>
   263e8:	e5943008 	ldr	r3, [r4, #8]
   263ec:	e3530b02 	cmp	r3, #2048	; 0x800
   263f0:	2a000034 	bcs	264c8 <CKernelOptions::CKernelOptions()+0x174>
   263f4:	e0843003 	add	r3, r4, r3
   263f8:	e284200c 	add	r2, r4, #12
   263fc:	e59f8314 	ldr	r8, [pc, #788]	; 26718 <CKernelOptions::CKernelOptions()+0x3c4>
   26400:	e59fa314 	ldr	sl, [pc, #788]	; 2671c <CKernelOptions::CKernelOptions()+0x3c8>
   26404:	e5c3500c 	strb	r5, [r3, #12]
   26408:	e584280c 	str	r2, [r4, #2060]	; 0x80c
   2640c:	e1a00004 	mov	r0, r4
   26410:	ebffffb0 	bl	262d8 <CKernelOptions::GetToken()>
   26414:	e2506000 	subs	r6, r0, #0
   26418:	0a00002a 	beq	264c8 <CKernelOptions::CKernelOptions()+0x174>
   2641c:	e1d630d0 	ldrsb	r3, [r6]
   26420:	e3530000 	cmp	r3, #0
   26424:	0a000008 	beq	2644c <CKernelOptions::CKernelOptions()+0xf8>
   26428:	e353003d 	cmp	r3, #61	; 0x3d
   2642c:	e1a05006 	mov	r5, r6
   26430:	1a000002 	bne	26440 <CKernelOptions::CKernelOptions()+0xec>
   26434:	ea000028 	b	264dc <CKernelOptions::CKernelOptions()+0x188>
   26438:	e353003d 	cmp	r3, #61	; 0x3d
   2643c:	0a000026 	beq	264dc <CKernelOptions::CKernelOptions()+0x188>
   26440:	e1f530d1 	ldrsb	r3, [r5, #1]!
   26444:	e3530000 	cmp	r3, #0
   26448:	1afffffa 	bne	26438 <CKernelOptions::CKernelOptions()+0xe4>
   2644c:	e1a01008 	mov	r1, r8
   26450:	e1a00006 	mov	r0, r6
   26454:	eb000f12 	bl	2a0a4 <strcmp>
   26458:	e3500000 	cmp	r0, #0
   2645c:	0affffea 	beq	2640c <CKernelOptions::CKernelOptions()+0xb8>
   26460:	e1a0100a 	mov	r1, sl
   26464:	e1a00006 	mov	r0, r6
   26468:	eb000f0d 	bl	2a0a4 <strcmp>
   2646c:	e3500000 	cmp	r0, #0
   26470:	13a0b000 	movne	fp, #0
   26474:	0affffe4 	beq	2640c <CKernelOptions::CKernelOptions()+0xb8>
   26478:	e59f12a0 	ldr	r1, [pc, #672]	; 26720 <CKernelOptions::CKernelOptions()+0x3cc>
   2647c:	e1a00006 	mov	r0, r6
   26480:	eb000f07 	bl	2a0a4 <strcmp>
   26484:	e2505000 	subs	r5, r0, #0
   26488:	0a000027 	beq	2652c <CKernelOptions::CKernelOptions()+0x1d8>
   2648c:	e59f1290 	ldr	r1, [pc, #656]	; 26724 <CKernelOptions::CKernelOptions()+0x3d0>
   26490:	e1a00006 	mov	r0, r6
   26494:	eb000f02 	bl	2a0a4 <strcmp>
   26498:	e3500000 	cmp	r0, #0
   2649c:	1a000028 	bne	26544 <CKernelOptions::CKernelOptions()+0x1f0>
   264a0:	e35b0000 	cmp	fp, #0
   264a4:	0affffd8 	beq	2640c <CKernelOptions::CKernelOptions()+0xb8>
   264a8:	e1db30d0 	ldrsb	r3, [fp]
   264ac:	e3530000 	cmp	r3, #0
   264b0:	0affffd5 	beq	2640c <CKernelOptions::CKernelOptions()+0xb8>
   264b4:	e1a0000b 	mov	r0, fp
   264b8:	ebffff4c 	bl	261f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   264bc:	e3500004 	cmp	r0, #4
   264c0:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
   264c4:	eaffffd0 	b	2640c <CKernelOptions::CKernelOptions()+0xb8>
   264c8:	e28d0008 	add	r0, sp, #8
   264cc:	ebfff8f3 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   264d0:	e1a00004 	mov	r0, r4
   264d4:	e28dd014 	add	sp, sp, #20
   264d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264dc:	e3a03000 	mov	r3, #0
   264e0:	e1a01008 	mov	r1, r8
   264e4:	e5c53000 	strb	r3, [r5]
   264e8:	e1a00006 	mov	r0, r6
   264ec:	eb000eec 	bl	2a0a4 <strcmp>
   264f0:	e3500000 	cmp	r0, #0
   264f4:	e285b001 	add	fp, r5, #1
   264f8:	1a000044 	bne	26610 <CKernelOptions::CKernelOptions()+0x2bc>
   264fc:	e35b0000 	cmp	fp, #0
   26500:	0affffc1 	beq	2640c <CKernelOptions::CKernelOptions()+0xb8>
   26504:	e1d530d1 	ldrsb	r3, [r5, #1]
   26508:	e3530000 	cmp	r3, #0
   2650c:	0affffbe 	beq	2640c <CKernelOptions::CKernelOptions()+0xb8>
   26510:	e1a0000b 	mov	r0, fp
   26514:	ebffff35 	bl	261f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26518:	e59f3208 	ldr	r3, [pc, #520]	; 26728 <CKernelOptions::CKernelOptions()+0x3d4>
   2651c:	e2402d0a 	sub	r2, r0, #640	; 0x280
   26520:	e1520003 	cmp	r2, r3
   26524:	95840810 	strls	r0, [r4, #2064]	; 0x810
   26528:	eaffffb7 	b	2640c <CKernelOptions::CKernelOptions()+0xb8>
   2652c:	e1a0100b 	mov	r1, fp
   26530:	e3a02013 	mov	r2, #19
   26534:	e1a00007 	mov	r0, r7
   26538:	eb000f98 	bl	2a3a0 <strncpy>
   2653c:	e5c4582b 	strb	r5, [r4, #2091]	; 0x82b
   26540:	eaffffb1 	b	2640c <CKernelOptions::CKernelOptions()+0xb8>
   26544:	e59f11e0 	ldr	r1, [pc, #480]	; 2672c <CKernelOptions::CKernelOptions()+0x3d8>
   26548:	e1a00006 	mov	r0, r6
   2654c:	eb000ed4 	bl	2a0a4 <strcmp>
   26550:	e2505000 	subs	r5, r0, #0
   26554:	1a000005 	bne	26570 <CKernelOptions::CKernelOptions()+0x21c>
   26558:	e1a0100b 	mov	r1, fp
   2655c:	e3a02002 	mov	r2, #2
   26560:	e1a00009 	mov	r0, r9
   26564:	eb000f8d 	bl	2a3a0 <strncpy>
   26568:	e5c45832 	strb	r5, [r4, #2098]	; 0x832
   2656c:	eaffffa6 	b	2640c <CKernelOptions::CKernelOptions()+0xb8>
   26570:	e59f11b8 	ldr	r1, [pc, #440]	; 26730 <CKernelOptions::CKernelOptions()+0x3dc>
   26574:	e1a00006 	mov	r0, r6
   26578:	eb000ec9 	bl	2a0a4 <strcmp>
   2657c:	e3500000 	cmp	r0, #0
   26580:	1a00000b 	bne	265b4 <CKernelOptions::CKernelOptions()+0x260>
   26584:	e35b0000 	cmp	fp, #0
   26588:	0affff9f 	beq	2640c <CKernelOptions::CKernelOptions()+0xb8>
   2658c:	e1db30d0 	ldrsb	r3, [fp]
   26590:	e3530000 	cmp	r3, #0
   26594:	0affff9c 	beq	2640c <CKernelOptions::CKernelOptions()+0xb8>
   26598:	e1a0000b 	mov	r0, fp
   2659c:	ebffff13 	bl	261f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   265a0:	e59f318c 	ldr	r3, [pc, #396]	; 26734 <CKernelOptions::CKernelOptions()+0x3e0>
   265a4:	e24020c8 	sub	r2, r0, #200	; 0xc8
   265a8:	e1520003 	cmp	r2, r3
   265ac:	95840834 	strls	r0, [r4, #2100]	; 0x834
   265b0:	eaffff95 	b	2640c <CKernelOptions::CKernelOptions()+0xb8>
   265b4:	e59f117c 	ldr	r1, [pc, #380]	; 26738 <CKernelOptions::CKernelOptions()+0x3e4>
   265b8:	e1a00006 	mov	r0, r6
   265bc:	eb000eb8 	bl	2a0a4 <strcmp>
   265c0:	e3500000 	cmp	r0, #0
   265c4:	1a000006 	bne	265e4 <CKernelOptions::CKernelOptions()+0x290>
   265c8:	e1a0000b 	mov	r0, fp
   265cc:	e59f1168 	ldr	r1, [pc, #360]	; 2673c <CKernelOptions::CKernelOptions()+0x3e8>
   265d0:	eb000eb3 	bl	2a0a4 <strcmp>
   265d4:	e3500000 	cmp	r0, #0
   265d8:	03a03001 	moveq	r3, #1
   265dc:	05c43838 	strbeq	r3, [r4, #2104]	; 0x838
   265e0:	eaffff89 	b	2640c <CKernelOptions::CKernelOptions()+0xb8>
   265e4:	e59f1154 	ldr	r1, [pc, #340]	; 26740 <CKernelOptions::CKernelOptions()+0x3ec>
   265e8:	e1a00006 	mov	r0, r6
   265ec:	eb000eac 	bl	2a0a4 <strcmp>
   265f0:	e2505000 	subs	r5, r0, #0
   265f4:	1a000015 	bne	26650 <CKernelOptions::CKernelOptions()+0x2fc>
   265f8:	e1a0100b 	mov	r1, fp
   265fc:	e3a02013 	mov	r2, #19
   26600:	e2890009 	add	r0, r9, #9
   26604:	eb000f65 	bl	2a3a0 <strncpy>
   26608:	e5c4584c 	strb	r5, [r4, #2124]	; 0x84c
   2660c:	eaffff7e 	b	2640c <CKernelOptions::CKernelOptions()+0xb8>
   26610:	e1a0100a 	mov	r1, sl
   26614:	e1a00006 	mov	r0, r6
   26618:	eb000ea1 	bl	2a0a4 <strcmp>
   2661c:	e3500000 	cmp	r0, #0
   26620:	1affff94 	bne	26478 <CKernelOptions::CKernelOptions()+0x124>
   26624:	e35b0000 	cmp	fp, #0
   26628:	0affff77 	beq	2640c <CKernelOptions::CKernelOptions()+0xb8>
   2662c:	e1d530d1 	ldrsb	r3, [r5, #1]
   26630:	e3530000 	cmp	r3, #0
   26634:	0affff74 	beq	2640c <CKernelOptions::CKernelOptions()+0xb8>
   26638:	e1a0000b 	mov	r0, fp
   2663c:	ebfffeeb 	bl	261f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26640:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
   26644:	e3530f96 	cmp	r3, #600	; 0x258
   26648:	95840814 	strls	r0, [r4, #2068]	; 0x814
   2664c:	eaffff6e 	b	2640c <CKernelOptions::CKernelOptions()+0xb8>
   26650:	e59f10ec 	ldr	r1, [pc, #236]	; 26744 <CKernelOptions::CKernelOptions()+0x3f0>
   26654:	e1a00006 	mov	r0, r6
   26658:	eb000e91 	bl	2a0a4 <strcmp>
   2665c:	e3500000 	cmp	r0, #0
   26660:	1a000009 	bne	2668c <CKernelOptions::CKernelOptions()+0x338>
   26664:	e35b0000 	cmp	fp, #0
   26668:	0affff67 	beq	2640c <CKernelOptions::CKernelOptions()+0xb8>
   2666c:	e1db30d0 	ldrsb	r3, [fp]
   26670:	e3530000 	cmp	r3, #0
   26674:	0affff64 	beq	2640c <CKernelOptions::CKernelOptions()+0xb8>
   26678:	e1a0000b 	mov	r0, fp
   2667c:	ebfffedb 	bl	261f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   26680:	e3500002 	cmp	r0, #2
   26684:	95840850 	strls	r0, [r4, #2128]	; 0x850
   26688:	eaffff5f 	b	2640c <CKernelOptions::CKernelOptions()+0xb8>
   2668c:	e59f10b4 	ldr	r1, [pc, #180]	; 26748 <CKernelOptions::CKernelOptions()+0x3f4>
   26690:	e1a00006 	mov	r0, r6
   26694:	eb000e82 	bl	2a0a4 <strcmp>
   26698:	e3500000 	cmp	r0, #0
   2669c:	1a000006 	bne	266bc <CKernelOptions::CKernelOptions()+0x368>
   266a0:	e1a0000b 	mov	r0, fp
   266a4:	e59f10a0 	ldr	r1, [pc, #160]	; 2674c <CKernelOptions::CKernelOptions()+0x3f8>
   266a8:	eb000e7d 	bl	2a0a4 <strcmp>
   266ac:	e3500000 	cmp	r0, #0
   266b0:	03a03001 	moveq	r3, #1
   266b4:	05c43854 	strbeq	r3, [r4, #2132]	; 0x854
   266b8:	eaffff53 	b	2640c <CKernelOptions::CKernelOptions()+0xb8>
   266bc:	e1a00006 	mov	r0, r6
   266c0:	e59f1088 	ldr	r1, [pc, #136]	; 26750 <CKernelOptions::CKernelOptions()+0x3fc>
   266c4:	eb000e76 	bl	2a0a4 <strcmp>
   266c8:	e2903000 	adds	r3, r0, #0
   266cc:	13a03001 	movne	r3, #1
   266d0:	e35b0000 	cmp	fp, #0
   266d4:	03833001 	orreq	r3, r3, #1
   266d8:	e3530000 	cmp	r3, #0
   266dc:	1affff4a 	bne	2640c <CKernelOptions::CKernelOptions()+0xb8>
   266e0:	e1db30d0 	ldrsb	r3, [fp]
   266e4:	e3530000 	cmp	r3, #0
   266e8:	0affff47 	beq	2640c <CKernelOptions::CKernelOptions()+0xb8>
   266ec:	e1a0000b 	mov	r0, fp
   266f0:	ebfffebe 	bl	261f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
   266f4:	e2403028 	sub	r3, r0, #40	; 0x28
   266f8:	e3530026 	cmp	r3, #38	; 0x26
   266fc:	95840858 	strls	r0, [r4, #2136]	; 0x858
   26700:	eaffff41 	b	2640c <CKernelOptions::CKernelOptions()+0xb8>
   26704:	00045368 	.word	0x00045368
   26708:	00043248 	.word	0x00043248
   2670c:	0004e0f8 	.word	0x0004e0f8
   26710:	0000080c 	.word	0x0000080c
   26714:	00050001 	.word	0x00050001
   26718:	000453ec 	.word	0x000453ec
   2671c:	00045370 	.word	0x00045370
   26720:	00045378 	.word	0x00045378
   26724:	00045380 	.word	0x00045380
   26728:	0000053c 	.word	0x0000053c
   2672c:	0004538c 	.word	0x0004538c
   26730:	00045394 	.word	0x00045394
   26734:	00001e78 	.word	0x00001e78
   26738:	000453a4 	.word	0x000453a4
   2673c:	000453b0 	.word	0x000453b0
   26740:	000453b8 	.word	0x000453b8
   26744:	000453c4 	.word	0x000453c4
   26748:	000453d0 	.word	0x000453d0
   2674c:	000453d8 	.word	0x000453d8
   26750:	000453e0 	.word	0x000453e0

00026754 <CKernelOptions::GetOptionValue(char*)>:
   26754:	e1d030d0 	ldrsb	r3, [r0]
   26758:	e3530000 	cmp	r3, #0
   2675c:	1a000003 	bne	26770 <CKernelOptions::GetOptionValue(char*)+0x1c>
   26760:	ea000007 	b	26784 <CKernelOptions::GetOptionValue(char*)+0x30>
   26764:	e1f030d1 	ldrsb	r3, [r0, #1]!
   26768:	e3530000 	cmp	r3, #0
   2676c:	0a000004 	beq	26784 <CKernelOptions::GetOptionValue(char*)+0x30>
   26770:	e353003d 	cmp	r3, #61	; 0x3d
   26774:	1afffffa 	bne	26764 <CKernelOptions::GetOptionValue(char*)+0x10>
   26778:	e3a02000 	mov	r2, #0
   2677c:	e2803001 	add	r3, r0, #1
   26780:	e5c02000 	strb	r2, [r0]
   26784:	e1a00003 	mov	r0, r3
   26788:	e12fff1e 	bx	lr

0002678c <CKernelOptions::GetDecimal(char*)>:
   2678c:	e2503000 	subs	r3, r0, #0
   26790:	0a000002 	beq	267a0 <CKernelOptions::GetDecimal(char*)+0x14>
   26794:	e1d330d0 	ldrsb	r3, [r3]
   26798:	e3530000 	cmp	r3, #0
   2679c:	1a000001 	bne	267a8 <CKernelOptions::GetDecimal(char*)+0x1c>
   267a0:	e3e00000 	mvn	r0, #0
   267a4:	e12fff1e 	bx	lr
   267a8:	eafffe90 	b	261f0 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

000267ac <CLogger::CLogger(unsigned int, CTimer*)>:
   267ac:	e92d4010 	push	{r4, lr}
   267b0:	e3a03000 	mov	r3, #0
   267b4:	e1a04000 	mov	r4, r0
   267b8:	e3a00001 	mov	r0, #1
   267bc:	e884000e 	stm	r4, {r1, r2, r3}
   267c0:	e584300c 	str	r3, [r4, #12]
   267c4:	e5843010 	str	r3, [r4, #16]
   267c8:	e5843014 	str	r3, [r4, #20]
   267cc:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   267d0:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   267d4:	e58430f0 	str	r3, [r4, #240]	; 0xf0
   267d8:	e58430f4 	str	r3, [r4, #244]	; 0xf4
   267dc:	e5840018 	str	r0, [r4, #24]
   267e0:	e58400ec 	str	r0, [r4, #236]	; 0xec
   267e4:	e3a00901 	mov	r0, #16384	; 0x4000
   267e8:	eb001222 	bl	2b078 <operator new[](unsigned int)>
   267ec:	e59f300c 	ldr	r3, [pc, #12]	; 26800 <CLogger::CLogger(unsigned int, CTimer*)+0x54>
   267f0:	e584000c 	str	r0, [r4, #12]
   267f4:	e5834000 	str	r4, [r3]
   267f8:	e1a00004 	mov	r0, r4
   267fc:	e8bd8010 	pop	{r4, pc}
   26800:	0004e0fc 	.word	0x0004e0fc

00026804 <CLogger::~CLogger()>:
   26804:	e3a02000 	mov	r2, #0
   26808:	e59f1064 	ldr	r1, [pc, #100]	; 26874 <CLogger::~CLogger()+0x70>
   2680c:	e92d4070 	push	{r4, r5, r6, lr}
   26810:	e59030e8 	ldr	r3, [r0, #232]	; 0xe8
   26814:	e1a04000 	mov	r4, r0
   26818:	e1a06002 	mov	r6, r2
   2681c:	e3a05f42 	mov	r5, #264	; 0x108
   26820:	e5812000 	str	r2, [r1]
   26824:	ea000008 	b	2684c <CLogger::~CLogger()+0x48>
   26828:	e591001c 	ldr	r0, [r1, #28]
   2682c:	e1a01005 	mov	r1, r5
   26830:	eb00121d 	bl	2b0ac <operator delete(void*, unsigned int)>
   26834:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   26838:	e2833001 	add	r3, r3, #1
   2683c:	e3530032 	cmp	r3, #50	; 0x32
   26840:	e58430e8 	str	r3, [r4, #232]	; 0xe8
   26844:	03a03000 	moveq	r3, #0
   26848:	058460e8 	streq	r6, [r4, #232]	; 0xe8
   2684c:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   26850:	e0841103 	add	r1, r4, r3, lsl #2
   26854:	e1520003 	cmp	r2, r3
   26858:	1afffff2 	bne	26828 <CLogger::~CLogger()+0x24>
   2685c:	e594000c 	ldr	r0, [r4, #12]
   26860:	e3500000 	cmp	r0, #0
   26864:	0a000000 	beq	2686c <CLogger::~CLogger()+0x68>
   26868:	eb001209 	bl	2b094 <operator delete[](void*)>
   2686c:	e1a00004 	mov	r0, r4
   26870:	e8bd8070 	pop	{r4, r5, r6, pc}
   26874:	0004e0fc 	.word	0x0004e0fc

00026878 <CLogger::Initialize(CDevice*)>:
   26878:	e92d4010 	push	{r4, lr}
   2687c:	e5801008 	str	r1, [r0, #8]
   26880:	e24dd008 	sub	sp, sp, #8
   26884:	e1a04000 	mov	r4, r0
   26888:	eb0003c9 	bl	277b4 <CMachineInfo::Get()>
   2688c:	eb0002dc 	bl	27404 <CMachineInfo::GetMachineName() const>
   26890:	e59f301c 	ldr	r3, [pc, #28]	; 268b4 <CLogger::Initialize(CDevice*)+0x3c>
   26894:	e58d0000 	str	r0, [sp]
   26898:	e283101c 	add	r1, r3, #28
   2689c:	e1a00004 	mov	r0, r4
   268a0:	e3a02003 	mov	r2, #3
   268a4:	eb000005 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   268a8:	e3a00001 	mov	r0, #1
   268ac:	e28dd008 	add	sp, sp, #8
   268b0:	e8bd8010 	pop	{r4, pc}
   268b4:	000453f4 	.word	0x000453f4

000268b8 <CLogger::SetNewTarget(CDevice*)>:
   268b8:	e5801008 	str	r1, [r0, #8]
   268bc:	e12fff1e 	bx	lr

000268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   268c0:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   268c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   268c8:	e24dd010 	sub	sp, sp, #16
   268cc:	e28dc018 	add	ip, sp, #24
   268d0:	e58dc000 	str	ip, [sp]
   268d4:	e59d3014 	ldr	r3, [sp, #20]
   268d8:	e58dc00c 	str	ip, [sp, #12]
   268dc:	eb000003 	bl	268f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   268e0:	e28dd010 	add	sp, sp, #16
   268e4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   268e8:	e28dd004 	add	sp, sp, #4
   268ec:	e12fff1e 	bx	lr

000268f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   268f0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   268f4:	e1a07003 	mov	r7, r3
   268f8:	e24dd024 	sub	sp, sp, #36	; 0x24
   268fc:	e1a04000 	mov	r4, r0
   26900:	e1a0000d 	mov	r0, sp
   26904:	e1a05002 	mov	r5, r2
   26908:	e1a06001 	mov	r6, r1
   2690c:	eb000494 	bl	27b64 <CString::CString()>
   26910:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   26914:	e1a01007 	mov	r1, r7
   26918:	e1a0000d 	mov	r0, sp
   2691c:	eb0006ab 	bl	283d0 <CString::FormatV(char const*, std::__va_list)>
   26920:	e1a0000d 	mov	r0, sp
   26924:	eb0004a4 	bl	27bbc <CString::operator char const*() const>
   26928:	e1a02005 	mov	r2, r5
   2692c:	e1a03000 	mov	r3, r0
   26930:	e1a01006 	mov	r1, r6
   26934:	e1a00004 	mov	r0, r4
   26938:	eb000103 	bl	26d4c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   2693c:	e5943000 	ldr	r3, [r4]
   26940:	e1550003 	cmp	r5, r3
   26944:	8a00002c 	bhi	269fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
   26948:	e28d0010 	add	r0, sp, #16
   2694c:	eb000484 	bl	27b64 <CString::CString()>
   26950:	e3550000 	cmp	r5, #0
   26954:	0a00002c 	beq	26a0c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>
   26958:	e5940004 	ldr	r0, [r4, #4]
   2695c:	e3500000 	cmp	r0, #0
   26960:	0a00004c 	beq	26a98 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a8>
   26964:	eb000b24 	bl	295fc <CTimer::GetTimeString()>
   26968:	e2507000 	subs	r7, r0, #0
   2696c:	0a000049 	beq	26a98 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1a8>
   26970:	e1a00007 	mov	r0, r7
   26974:	eb000490 	bl	27bbc <CString::operator char const*() const>
   26978:	e1a01000 	mov	r1, r0
   2697c:	e28d0010 	add	r0, sp, #16
   26980:	eb0004bf 	bl	27c84 <CString::Append(char const*)>
   26984:	e59f114c 	ldr	r1, [pc, #332]	; 26ad8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
   26988:	e28d0010 	add	r0, sp, #16
   2698c:	eb0004bc 	bl	27c84 <CString::Append(char const*)>
   26990:	e5973000 	ldr	r3, [r7]
   26994:	e1a00007 	mov	r0, r7
   26998:	e5933004 	ldr	r3, [r3, #4]
   2699c:	e12fff33 	blx	r3
   269a0:	e1a01006 	mov	r1, r6
   269a4:	e28d0010 	add	r0, sp, #16
   269a8:	eb0004b5 	bl	27c84 <CString::Append(char const*)>
   269ac:	e59f1128 	ldr	r1, [pc, #296]	; 26adc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   269b0:	e28d0010 	add	r0, sp, #16
   269b4:	eb0004b2 	bl	27c84 <CString::Append(char const*)>
   269b8:	e1a0000d 	mov	r0, sp
   269bc:	eb00047e 	bl	27bbc <CString::operator char const*() const>
   269c0:	e1a01000 	mov	r1, r0
   269c4:	e28d0010 	add	r0, sp, #16
   269c8:	eb0004ad 	bl	27c84 <CString::Append(char const*)>
   269cc:	e3550000 	cmp	r5, #0
   269d0:	0a00001e 	beq	26a50 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   269d4:	e59f1104 	ldr	r1, [pc, #260]	; 26ae0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
   269d8:	e28d0010 	add	r0, sp, #16
   269dc:	eb0004a8 	bl	27c84 <CString::Append(char const*)>
   269e0:	e28d0010 	add	r0, sp, #16
   269e4:	eb000474 	bl	27bbc <CString::operator char const*() const>
   269e8:	e1a01000 	mov	r1, r0
   269ec:	e1a00004 	mov	r0, r4
   269f0:	eb000079 	bl	26bdc <CLogger::Write(char const*)>
   269f4:	e28d0010 	add	r0, sp, #16
   269f8:	eb000426 	bl	27a98 <CString::~CString()>
   269fc:	e1a0000d 	mov	r0, sp
   26a00:	eb000424 	bl	27a98 <CString::~CString()>
   26a04:	e28dd024 	add	sp, sp, #36	; 0x24
   26a08:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   26a0c:	e59f10d0 	ldr	r1, [pc, #208]	; 26ae4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f4>
   26a10:	e28d0010 	add	r0, sp, #16
   26a14:	eb00046e 	bl	27bd4 <CString::operator=(char const*)>
   26a18:	e5940004 	ldr	r0, [r4, #4]
   26a1c:	e3500000 	cmp	r0, #0
   26a20:	1a000028 	bne	26ac8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
   26a24:	e1a01006 	mov	r1, r6
   26a28:	e28d0010 	add	r0, sp, #16
   26a2c:	eb000494 	bl	27c84 <CString::Append(char const*)>
   26a30:	e59f10a4 	ldr	r1, [pc, #164]	; 26adc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   26a34:	e28d0010 	add	r0, sp, #16
   26a38:	eb000491 	bl	27c84 <CString::Append(char const*)>
   26a3c:	e1a0000d 	mov	r0, sp
   26a40:	eb00045d 	bl	27bbc <CString::operator char const*() const>
   26a44:	e1a01000 	mov	r1, r0
   26a48:	e28d0010 	add	r0, sp, #16
   26a4c:	eb00048c 	bl	27c84 <CString::Append(char const*)>
   26a50:	e59f1090 	ldr	r1, [pc, #144]	; 26ae8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f8>
   26a54:	e28d0010 	add	r0, sp, #16
   26a58:	eb000489 	bl	27c84 <CString::Append(char const*)>
   26a5c:	e59f107c 	ldr	r1, [pc, #124]	; 26ae0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
   26a60:	e28d0010 	add	r0, sp, #16
   26a64:	eb000486 	bl	27c84 <CString::Append(char const*)>
   26a68:	e28d0010 	add	r0, sp, #16
   26a6c:	eb000452 	bl	27bbc <CString::operator char const*() const>
   26a70:	e1a01000 	mov	r1, r0
   26a74:	e1a00004 	mov	r0, r4
   26a78:	eb000057 	bl	26bdc <CLogger::Write(char const*)>
   26a7c:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
   26a80:	e3530000 	cmp	r3, #0
   26a84:	0a000000 	beq	26a8c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x19c>
   26a88:	e12fff33 	blx	r3
   26a8c:	e3a000ff 	mov	r0, #255	; 0xff
   26a90:	eb000986 	bl	290b0 <set_qemu_exit_status>
   26a94:	eb000989 	bl	290c0 <halt>
   26a98:	e1a01006 	mov	r1, r6
   26a9c:	e28d0010 	add	r0, sp, #16
   26aa0:	eb000477 	bl	27c84 <CString::Append(char const*)>
   26aa4:	e59f1030 	ldr	r1, [pc, #48]	; 26adc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
   26aa8:	e28d0010 	add	r0, sp, #16
   26aac:	eb000474 	bl	27c84 <CString::Append(char const*)>
   26ab0:	e1a0000d 	mov	r0, sp
   26ab4:	eb000440 	bl	27bbc <CString::operator char const*() const>
   26ab8:	e1a01000 	mov	r1, r0
   26abc:	e28d0010 	add	r0, sp, #16
   26ac0:	eb00046f 	bl	27c84 <CString::Append(char const*)>
   26ac4:	eaffffc2 	b	269d4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xe4>
   26ac8:	eb000acb 	bl	295fc <CTimer::GetTimeString()>
   26acc:	e2507000 	subs	r7, r0, #0
   26ad0:	1affffa6 	bne	26970 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x80>
   26ad4:	eaffffd2 	b	26a24 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x134>
   26ad8:	00045420 	.word	0x00045420
   26adc:	00045424 	.word	0x00045424
   26ae0:	00045430 	.word	0x00045430
   26ae4:	00045418 	.word	0x00045418
   26ae8:	00045428 	.word	0x00045428

00026aec <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   26aec:	e590c000 	ldr	ip, [r0]
   26af0:	e152000c 	cmp	r2, ip
   26af4:	812fff1e 	bxhi	lr
   26af8:	e92d4070 	push	{r4, r5, r6, lr}
   26afc:	e1a05003 	mov	r5, r3
   26b00:	e3a03000 	mov	r3, #0
   26b04:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
   26b08:	e1520003 	cmp	r2, r3
   26b0c:	e1a04000 	mov	r4, r0
   26b10:	e5cd3000 	strb	r3, [sp]
   26b14:	0a00000f 	beq	26b58 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   26b18:	e1a0000d 	mov	r0, sp
   26b1c:	eb000e32 	bl	2a3ec <strcat>
   26b20:	e1a0000d 	mov	r0, sp
   26b24:	e59f1090 	ldr	r1, [pc, #144]	; 26bbc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   26b28:	eb000e2f 	bl	2a3ec <strcat>
   26b2c:	e1a01005 	mov	r1, r5
   26b30:	e1a0000d 	mov	r0, sp
   26b34:	eb000e2c 	bl	2a3ec <strcat>
   26b38:	e1a0000d 	mov	r0, sp
   26b3c:	e59f107c 	ldr	r1, [pc, #124]	; 26bc0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   26b40:	eb000e29 	bl	2a3ec <strcat>
   26b44:	e1a0100d 	mov	r1, sp
   26b48:	e1a00004 	mov	r0, r4
   26b4c:	eb000022 	bl	26bdc <CLogger::Write(char const*)>
   26b50:	e28dd0c8 	add	sp, sp, #200	; 0xc8
   26b54:	e8bd8070 	pop	{r4, r5, r6, pc}
   26b58:	e1a06001 	mov	r6, r1
   26b5c:	e1a0000d 	mov	r0, sp
   26b60:	e59f105c 	ldr	r1, [pc, #92]	; 26bc4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   26b64:	eb000e02 	bl	2a374 <strcpy>
   26b68:	e1a01006 	mov	r1, r6
   26b6c:	e1a0000d 	mov	r0, sp
   26b70:	eb000e1d 	bl	2a3ec <strcat>
   26b74:	e59f1040 	ldr	r1, [pc, #64]	; 26bbc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd0>
   26b78:	e1a0000d 	mov	r0, sp
   26b7c:	eb000e1a 	bl	2a3ec <strcat>
   26b80:	e1a01005 	mov	r1, r5
   26b84:	e1a0000d 	mov	r0, sp
   26b88:	eb000e17 	bl	2a3ec <strcat>
   26b8c:	e59f1034 	ldr	r1, [pc, #52]	; 26bc8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
   26b90:	e1a0000d 	mov	r0, sp
   26b94:	eb000e14 	bl	2a3ec <strcat>
   26b98:	e59f1020 	ldr	r1, [pc, #32]	; 26bc0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   26b9c:	e1a0000d 	mov	r0, sp
   26ba0:	eb000e11 	bl	2a3ec <strcat>
   26ba4:	e1a0100d 	mov	r1, sp
   26ba8:	e1a00004 	mov	r0, r4
   26bac:	eb00000a 	bl	26bdc <CLogger::Write(char const*)>
   26bb0:	e3a000ff 	mov	r0, #255	; 0xff
   26bb4:	eb00093d 	bl	290b0 <set_qemu_exit_status>
   26bb8:	eb000940 	bl	290c0 <halt>
   26bbc:	00045424 	.word	0x00045424
   26bc0:	00045430 	.word	0x00045430
   26bc4:	00045418 	.word	0x00045418
   26bc8:	00045428 	.word	0x00045428

00026bcc <CLogger::Get()>:
   26bcc:	e59f3004 	ldr	r3, [pc, #4]	; 26bd8 <CLogger::Get()+0xc>
   26bd0:	e5930000 	ldr	r0, [r3]
   26bd4:	e12fff1e 	bx	lr
   26bd8:	0004e0fc 	.word	0x0004e0fc

00026bdc <CLogger::Write(char const*)>:
   26bdc:	e92d4070 	push	{r4, r5, r6, lr}
   26be0:	e1a04000 	mov	r4, r0
   26be4:	e1a00001 	mov	r0, r1
   26be8:	e1a05001 	mov	r5, r1
   26bec:	eb000d22 	bl	2a07c <strlen>
   26bf0:	e1a06000 	mov	r6, r0
   26bf4:	e5940008 	ldr	r0, [r4, #8]
   26bf8:	e1a02006 	mov	r2, r6
   26bfc:	e5903000 	ldr	r3, [r0]
   26c00:	e1a01005 	mov	r1, r5
   26c04:	e593300c 	ldr	r3, [r3, #12]
   26c08:	e12fff33 	blx	r3
   26c0c:	e5940018 	ldr	r0, [r4, #24]
   26c10:	e3500000 	cmp	r0, #0
   26c14:	1a000018 	bne	26c7c <CLogger::Write(char const*)+0xa0>
   26c18:	e59f2064 	ldr	r2, [pc, #100]	; 26c84 <CLogger::Write(char const*)+0xa8>
   26c1c:	e0850006 	add	r0, r5, r6
   26c20:	e1550000 	cmp	r5, r0
   26c24:	0a00000f 	beq	26c68 <CLogger::Write(char const*)+0x8c>
   26c28:	e0d510d1 	ldrsb	r1, [r5], #1
   26c2c:	e351000d 	cmp	r1, #13
   26c30:	0afffffa 	beq	26c20 <CLogger::Write(char const*)+0x44>
   26c34:	e594c010 	ldr	ip, [r4, #16]
   26c38:	e594e00c 	ldr	lr, [r4, #12]
   26c3c:	e7ce100c 	strb	r1, [lr, ip]
   26c40:	e5943010 	ldr	r3, [r4, #16]
   26c44:	e5941014 	ldr	r1, [r4, #20]
   26c48:	e2833001 	add	r3, r3, #1
   26c4c:	e0033002 	and	r3, r3, r2
   26c50:	e1530001 	cmp	r3, r1
   26c54:	e5843010 	str	r3, [r4, #16]
   26c58:	1afffff0 	bne	26c20 <CLogger::Write(char const*)+0x44>
   26c5c:	e2433001 	sub	r3, r3, #1
   26c60:	e0033002 	and	r3, r3, r2
   26c64:	e5843010 	str	r3, [r4, #16]
   26c68:	e5943018 	ldr	r3, [r4, #24]
   26c6c:	e3530000 	cmp	r3, #0
   26c70:	08bd8070 	popeq	{r4, r5, r6, pc}
   26c74:	e8bd4070 	pop	{r4, r5, r6, lr}
   26c78:	ea00145a 	b	2bde8 <LeaveCritical>
   26c7c:	eb00142e 	bl	2bd3c <EnterCritical>
   26c80:	eaffffe4 	b	26c18 <CLogger::Write(char const*)+0x3c>
   26c84:	00003fff 	.word	0x00003fff

00026c88 <CLogger::Read(void*, unsigned int)>:
   26c88:	e92d4070 	push	{r4, r5, r6, lr}
   26c8c:	e1a04000 	mov	r4, r0
   26c90:	e5900018 	ldr	r0, [r0, #24]
   26c94:	e1a05001 	mov	r5, r1
   26c98:	e3500000 	cmp	r0, #0
   26c9c:	e1a06002 	mov	r6, r2
   26ca0:	1a00001c 	bne	26d18 <CLogger::Read(void*, unsigned int)+0x90>
   26ca4:	e5942010 	ldr	r2, [r4, #16]
   26ca8:	e5943014 	ldr	r3, [r4, #20]
   26cac:	e1520003 	cmp	r2, r3
   26cb0:	0a000021 	beq	26d3c <CLogger::Read(void*, unsigned int)+0xb4>
   26cb4:	e1a01005 	mov	r1, r5
   26cb8:	e59f2088 	ldr	r2, [pc, #136]	; 26d48 <CLogger::Read(void*, unsigned int)+0xc0>
   26cbc:	e3a05000 	mov	r5, #0
   26cc0:	ea00000a 	b	26cf0 <CLogger::Read(void*, unsigned int)+0x68>
   26cc4:	e594000c 	ldr	r0, [r4, #12]
   26cc8:	e2855001 	add	r5, r5, #1
   26ccc:	e19030d3 	ldrsb	r3, [r0, r3]
   26cd0:	e4c13001 	strb	r3, [r1], #1
   26cd4:	e5943014 	ldr	r3, [r4, #20]
   26cd8:	e5940010 	ldr	r0, [r4, #16]
   26cdc:	e2833001 	add	r3, r3, #1
   26ce0:	e0033002 	and	r3, r3, r2
   26ce4:	e1530000 	cmp	r3, r0
   26ce8:	e5843014 	str	r3, [r4, #20]
   26cec:	0a000001 	beq	26cf8 <CLogger::Read(void*, unsigned int)+0x70>
   26cf0:	e1550006 	cmp	r5, r6
   26cf4:	1afffff2 	bne	26cc4 <CLogger::Read(void*, unsigned int)+0x3c>
   26cf8:	e5943018 	ldr	r3, [r4, #24]
   26cfc:	e3530000 	cmp	r3, #0
   26d00:	1a000001 	bne	26d0c <CLogger::Read(void*, unsigned int)+0x84>
   26d04:	e1a00005 	mov	r0, r5
   26d08:	e8bd8070 	pop	{r4, r5, r6, pc}
   26d0c:	eb001435 	bl	2bde8 <LeaveCritical>
   26d10:	e1a00005 	mov	r0, r5
   26d14:	e8bd8070 	pop	{r4, r5, r6, pc}
   26d18:	eb001407 	bl	2bd3c <EnterCritical>
   26d1c:	e5942010 	ldr	r2, [r4, #16]
   26d20:	e5943014 	ldr	r3, [r4, #20]
   26d24:	e1520003 	cmp	r2, r3
   26d28:	1affffe1 	bne	26cb4 <CLogger::Read(void*, unsigned int)+0x2c>
   26d2c:	e5943018 	ldr	r3, [r4, #24]
   26d30:	e3530000 	cmp	r3, #0
   26d34:	0a000000 	beq	26d3c <CLogger::Read(void*, unsigned int)+0xb4>
   26d38:	eb00142a 	bl	2bde8 <LeaveCritical>
   26d3c:	e3e05000 	mvn	r5, #0
   26d40:	e1a00005 	mov	r0, r5
   26d44:	e8bd8070 	pop	{r4, r5, r6, pc}
   26d48:	00003fff 	.word	0x00003fff

00026d4c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   26d4c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   26d50:	e1a05000 	mov	r5, r0
   26d54:	e24dd00c 	sub	sp, sp, #12
   26d58:	e3a00f42 	mov	r0, #264	; 0x108
   26d5c:	e1a07003 	mov	r7, r3
   26d60:	e1a09002 	mov	r9, r2
   26d64:	e1a08001 	mov	r8, r1
   26d68:	eb0010c1 	bl	2b074 <operator new(unsigned int)>
   26d6c:	e3a06000 	mov	r6, #0
   26d70:	e1a04000 	mov	r4, r0
   26d74:	e1a01008 	mov	r1, r8
   26d78:	e3a02032 	mov	r2, #50	; 0x32
   26d7c:	e4c09001 	strb	r9, [r0], #1
   26d80:	eb000d86 	bl	2a3a0 <strncpy>
   26d84:	e1a01007 	mov	r1, r7
   26d88:	e2840033 	add	r0, r4, #51	; 0x33
   26d8c:	e3a020c8 	mov	r2, #200	; 0xc8
   26d90:	e5c46032 	strb	r6, [r4, #50]	; 0x32
   26d94:	eb000d81 	bl	2a3a0 <strncpy>
   26d98:	e5950004 	ldr	r0, [r5, #4]
   26d9c:	e5c460fa 	strb	r6, [r4, #250]	; 0xfa
   26da0:	e1500006 	cmp	r0, r6
   26da4:	0a000004 	beq	26dbc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   26da8:	e28d2004 	add	r2, sp, #4
   26dac:	e1a0100d 	mov	r1, sp
   26db0:	eb0009a2 	bl	29440 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   26db4:	e1500006 	cmp	r0, r6
   26db8:	1a000021 	bne	26e44 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   26dbc:	e3a03000 	mov	r3, #0
   26dc0:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   26dc4:	e58430fc 	str	r3, [r4, #252]	; 0xfc
   26dc8:	e3500000 	cmp	r0, #0
   26dcc:	e5843100 	str	r3, [r4, #256]	; 0x100
   26dd0:	e5843104 	str	r3, [r4, #260]	; 0x104
   26dd4:	1a000027 	bne	26e78 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
   26dd8:	e59520e4 	ldr	r2, [r5, #228]	; 0xe4
   26ddc:	e2823001 	add	r3, r2, #1
   26de0:	e3530032 	cmp	r3, #50	; 0x32
   26de4:	e0852102 	add	r2, r5, r2, lsl #2
   26de8:	e582401c 	str	r4, [r2, #28]
   26dec:	03a02000 	moveq	r2, #0
   26df0:	01a03002 	moveq	r3, r2
   26df4:	058520e4 	streq	r2, [r5, #228]	; 0xe4
   26df8:	e59520e8 	ldr	r2, [r5, #232]	; 0xe8
   26dfc:	158530e4 	strne	r3, [r5, #228]	; 0xe4
   26e00:	e1520003 	cmp	r2, r3
   26e04:	0a00001e 	beq	26e84 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
   26e08:	e3500000 	cmp	r0, #0
   26e0c:	13a04000 	movne	r4, #0
   26e10:	0a000005 	beq	26e2c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   26e14:	eb0013f3 	bl	2bde8 <LeaveCritical>
   26e18:	e3540000 	cmp	r4, #0
   26e1c:	0a000002 	beq	26e2c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe0>
   26e20:	e1a00004 	mov	r0, r4
   26e24:	e3a01f42 	mov	r1, #264	; 0x108
   26e28:	eb00109f 	bl	2b0ac <operator delete(void*, unsigned int)>
   26e2c:	e59530f0 	ldr	r3, [r5, #240]	; 0xf0
   26e30:	e3530000 	cmp	r3, #0
   26e34:	0a000000 	beq	26e3c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
   26e38:	e12fff33 	blx	r3
   26e3c:	e28dd00c 	add	sp, sp, #12
   26e40:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   26e44:	e59d3004 	ldr	r3, [sp, #4]
   26e48:	e59f105c 	ldr	r1, [pc, #92]	; 26eac <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x160>
   26e4c:	e59d2000 	ldr	r2, [sp]
   26e50:	e0831391 	umull	r1, r3, r1, r3
   26e54:	e1a036a3 	lsr	r3, r3, #13
   26e58:	e5950004 	ldr	r0, [r5, #4]
   26e5c:	e5843100 	str	r3, [r4, #256]	; 0x100
   26e60:	e58420fc 	str	r2, [r4, #252]	; 0xfc
   26e64:	eb000947 	bl	29388 <CTimer::GetTimeZone() const>
   26e68:	e5840104 	str	r0, [r4, #260]	; 0x104
   26e6c:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   26e70:	e3500000 	cmp	r0, #0
   26e74:	0affffd7 	beq	26dd8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   26e78:	eb0013af 	bl	2bd3c <EnterCritical>
   26e7c:	e59500ec 	ldr	r0, [r5, #236]	; 0xec
   26e80:	eaffffd4 	b	26dd8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
   26e84:	e2832001 	add	r2, r3, #1
   26e88:	e3520032 	cmp	r2, #50	; 0x32
   26e8c:	e0853103 	add	r3, r5, r3, lsl #2
   26e90:	e593401c 	ldr	r4, [r3, #28]
   26e94:	03a03000 	moveq	r3, #0
   26e98:	158520e8 	strne	r2, [r5, #232]	; 0xe8
   26e9c:	058530e8 	streq	r3, [r5, #232]	; 0xe8
   26ea0:	e3500000 	cmp	r0, #0
   26ea4:	0affffdb 	beq	26e18 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
   26ea8:	eaffffd9 	b	26e14 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
   26eac:	d1b71759 	.word	0xd1b71759

00026eb0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   26eb0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   26eb4:	e1a04000 	mov	r4, r0
   26eb8:	e59000ec 	ldr	r0, [r0, #236]	; 0xec
   26ebc:	e1a07001 	mov	r7, r1
   26ec0:	e3500000 	cmp	r0, #0
   26ec4:	e1a08002 	mov	r8, r2
   26ec8:	e1a06003 	mov	r6, r3
   26ecc:	1a000022 	bne	26f5c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xac>
   26ed0:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   26ed4:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   26ed8:	e1530002 	cmp	r3, r2
   26edc:	0a000028 	beq	26f84 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   26ee0:	e283c001 	add	ip, r3, #1
   26ee4:	e35c0032 	cmp	ip, #50	; 0x32
   26ee8:	e0843103 	add	r3, r4, r3, lsl #2
   26eec:	e593501c 	ldr	r5, [r3, #28]
   26ef0:	03a03000 	moveq	r3, #0
   26ef4:	1584c0e8 	strne	ip, [r4, #232]	; 0xe8
   26ef8:	058430e8 	streq	r3, [r4, #232]	; 0xe8
   26efc:	e3500000 	cmp	r0, #0
   26f00:	1a000021 	bne	26f8c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
   26f04:	e1a01005 	mov	r1, r5
   26f08:	e4d12001 	ldrb	r2, [r1], #1
   26f0c:	e1a00008 	mov	r0, r8
   26f10:	e5c72000 	strb	r2, [r7]
   26f14:	eb000d16 	bl	2a374 <strcpy>
   26f18:	e2851033 	add	r1, r5, #51	; 0x33
   26f1c:	e1a00006 	mov	r0, r6
   26f20:	eb000d13 	bl	2a374 <strcpy>
   26f24:	e59520fc 	ldr	r2, [r5, #252]	; 0xfc
   26f28:	e59d1018 	ldr	r1, [sp, #24]
   26f2c:	e5953100 	ldr	r3, [r5, #256]	; 0x100
   26f30:	e5812000 	str	r2, [r1]
   26f34:	e59d201c 	ldr	r2, [sp, #28]
   26f38:	e1a00005 	mov	r0, r5
   26f3c:	e5823000 	str	r3, [r2]
   26f40:	e5953104 	ldr	r3, [r5, #260]	; 0x104
   26f44:	e59d2020 	ldr	r2, [sp, #32]
   26f48:	e3a01f42 	mov	r1, #264	; 0x108
   26f4c:	e5823000 	str	r3, [r2]
   26f50:	eb001055 	bl	2b0ac <operator delete(void*, unsigned int)>
   26f54:	e3a00001 	mov	r0, #1
   26f58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26f5c:	eb001376 	bl	2bd3c <EnterCritical>
   26f60:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
   26f64:	e59420e4 	ldr	r2, [r4, #228]	; 0xe4
   26f68:	e1520003 	cmp	r2, r3
   26f6c:	159400ec 	ldrne	r0, [r4, #236]	; 0xec
   26f70:	1affffda 	bne	26ee0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
   26f74:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
   26f78:	e3530000 	cmp	r3, #0
   26f7c:	0a000000 	beq	26f84 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd4>
   26f80:	eb001398 	bl	2bde8 <LeaveCritical>
   26f84:	e3a00000 	mov	r0, #0
   26f88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26f8c:	eb001395 	bl	2bde8 <LeaveCritical>
   26f90:	eaffffdb 	b	26f04 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

00026f94 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   26f94:	e58010f0 	str	r1, [r0, #240]	; 0xf0
   26f98:	e12fff1e 	bx	lr

00026f9c <CLogger::RegisterPanicHandler(void (*)())>:
   26f9c:	e58010f4 	str	r1, [r0, #244]	; 0xf4
   26fa0:	e12fff1e 	bx	lr

00026fa4 <CMachineInfo::CMachineInfo()>:
   26fa4:	e92d4810 	push	{r4, fp, lr}
   26fa8:	e28db008 	add	fp, sp, #8
   26fac:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   26fb0:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
   26fb4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fb8:	e3a02000 	mov	r2, #0
   26fbc:	e5832000 	str	r2, [r3]
   26fc0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fc4:	e3a02010 	mov	r2, #16
   26fc8:	e5c32004 	strb	r2, [r3, #4]
   26fcc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fd0:	e3a02000 	mov	r2, #0
   26fd4:	e5832008 	str	r2, [r3, #8]
   26fd8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fdc:	e3a02000 	mov	r2, #0
   26fe0:	e583200c 	str	r2, [r3, #12]
   26fe4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26fe8:	e3a02004 	mov	r2, #4
   26fec:	e5c32010 	strb	r2, [r3, #16]
   26ff0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   26ff4:	e3a02000 	mov	r2, #0
   26ff8:	e5832014 	str	r2, [r3, #20]
   26ffc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27000:	e59f23b8 	ldr	r2, [pc, #952]	; 273c0 <CMachineInfo::CMachineInfo()+0x41c>
   27004:	e1c321b8 	strh	r2, [r3, #24]
   27008:	e59f33b4 	ldr	r3, [pc, #948]	; 273c4 <CMachineInfo::CMachineInfo()+0x420>
   2700c:	e5933000 	ldr	r3, [r3]
   27010:	e3530000 	cmp	r3, #0
   27014:	0a00001e 	beq	27094 <CMachineInfo::CMachineInfo()+0xf0>
   27018:	e59f33a4 	ldr	r3, [pc, #932]	; 273c4 <CMachineInfo::CMachineInfo()+0x420>
   2701c:	e5933000 	ldr	r3, [r3]
   27020:	e5932000 	ldr	r2, [r3]
   27024:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27028:	e5832000 	str	r2, [r3]
   2702c:	e59f3390 	ldr	r3, [pc, #912]	; 273c4 <CMachineInfo::CMachineInfo()+0x420>
   27030:	e5933000 	ldr	r3, [r3]
   27034:	e5d32004 	ldrb	r2, [r3, #4]
   27038:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2703c:	e5c32004 	strb	r2, [r3, #4]
   27040:	e59f337c 	ldr	r3, [pc, #892]	; 273c4 <CMachineInfo::CMachineInfo()+0x420>
   27044:	e5933000 	ldr	r3, [r3]
   27048:	e5932008 	ldr	r2, [r3, #8]
   2704c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27050:	e5832008 	str	r2, [r3, #8]
   27054:	e59f3368 	ldr	r3, [pc, #872]	; 273c4 <CMachineInfo::CMachineInfo()+0x420>
   27058:	e5933000 	ldr	r3, [r3]
   2705c:	e593200c 	ldr	r2, [r3, #12]
   27060:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27064:	e583200c 	str	r2, [r3, #12]
   27068:	e59f3354 	ldr	r3, [pc, #852]	; 273c4 <CMachineInfo::CMachineInfo()+0x420>
   2706c:	e5933000 	ldr	r3, [r3]
   27070:	e5d32010 	ldrb	r2, [r3, #16]
   27074:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27078:	e5c32010 	strb	r2, [r3, #16]
   2707c:	e59f3340 	ldr	r3, [pc, #832]	; 273c4 <CMachineInfo::CMachineInfo()+0x420>
   27080:	e5933000 	ldr	r3, [r3]
   27084:	e5932014 	ldr	r2, [r3, #20]
   27088:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2708c:	e5832014 	str	r2, [r3, #20]
   27090:	ea0000c6 	b	273b0 <CMachineInfo::CMachineInfo()+0x40c>
   27094:	e59f2328 	ldr	r2, [pc, #808]	; 273c4 <CMachineInfo::CMachineInfo()+0x420>
   27098:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2709c:	e5823000 	str	r3, [r2]
   270a0:	e24b3020 	sub	r3, fp, #32
   270a4:	e3a01001 	mov	r1, #1
   270a8:	e1a00003 	mov	r0, r3
   270ac:	ebfff5f4 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   270b0:	e24b2030 	sub	r2, fp, #48	; 0x30
   270b4:	e24b0020 	sub	r0, fp, #32
   270b8:	e3a03000 	mov	r3, #0
   270bc:	e58d3000 	str	r3, [sp]
   270c0:	e3a03010 	mov	r3, #16
   270c4:	e59f12fc 	ldr	r1, [pc, #764]	; 273c8 <CMachineInfo::CMachineInfo()+0x424>
   270c8:	ebfff5f9 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   270cc:	e1a03000 	mov	r3, r0
   270d0:	e3530000 	cmp	r3, #0
   270d4:	0a000003 	beq	270e8 <CMachineInfo::CMachineInfo()+0x144>
   270d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   270dc:	e6ff2073 	uxth	r2, r3
   270e0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   270e4:	e1c321b8 	strh	r2, [r3, #24]
   270e8:	e24b2040 	sub	r2, fp, #64	; 0x40
   270ec:	e24b0020 	sub	r0, fp, #32
   270f0:	e3a03000 	mov	r3, #0
   270f4:	e58d3000 	str	r3, [sp]
   270f8:	e3a03010 	mov	r3, #16
   270fc:	e59f12c8 	ldr	r1, [pc, #712]	; 273cc <CMachineInfo::CMachineInfo()+0x428>
   27100:	ebfff5eb 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   27104:	e1a03000 	mov	r3, r0
   27108:	e2233001 	eor	r3, r3, #1
   2710c:	e6ef3073 	uxtb	r3, r3
   27110:	e3530000 	cmp	r3, #0
   27114:	0a000001 	beq	27120 <CMachineInfo::CMachineInfo()+0x17c>
   27118:	e3a04000 	mov	r4, #0
   2711c:	ea00009e 	b	2739c <CMachineInfo::CMachineInfo()+0x3f8>
   27120:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   27124:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27128:	e5832000 	str	r2, [r3]
   2712c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27130:	e5933000 	ldr	r3, [r3]
   27134:	e2033502 	and	r3, r3, #8388608	; 0x800000
   27138:	e3530000 	cmp	r3, #0
   2713c:	0a000064 	beq	272d4 <CMachineInfo::CMachineInfo()+0x330>
   27140:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27144:	e5933000 	ldr	r3, [r3]
   27148:	e1a03223 	lsr	r3, r3, #4
   2714c:	e6ef3073 	uxtb	r3, r3
   27150:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   27154:	e3a03000 	mov	r3, #0
   27158:	e50b3010 	str	r3, [fp, #-16]
   2715c:	e51b3010 	ldr	r3, [fp, #-16]
   27160:	e353000d 	cmp	r3, #13
   27164:	8a00000f 	bhi	271a8 <CMachineInfo::CMachineInfo()+0x204>
   27168:	e59f1260 	ldr	r1, [pc, #608]	; 273d0 <CMachineInfo::CMachineInfo()+0x42c>
   2716c:	e51b2010 	ldr	r2, [fp, #-16]
   27170:	e1a03002 	mov	r3, r2
   27174:	e1a03083 	lsl	r3, r3, #1
   27178:	e0833002 	add	r3, r3, r2
   2717c:	e1a03103 	lsl	r3, r3, #2
   27180:	e0813003 	add	r3, r1, r3
   27184:	e5932000 	ldr	r2, [r3]
   27188:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2718c:	e1520003 	cmp	r2, r3
   27190:	0a000003 	beq	271a4 <CMachineInfo::CMachineInfo()+0x200>
   27194:	e51b3010 	ldr	r3, [fp, #-16]
   27198:	e2833001 	add	r3, r3, #1
   2719c:	e50b3010 	str	r3, [fp, #-16]
   271a0:	eaffffed 	b	2715c <CMachineInfo::CMachineInfo()+0x1b8>
   271a4:	e320f000 	nop	{0}
   271a8:	e51b3010 	ldr	r3, [fp, #-16]
   271ac:	e353000d 	cmp	r3, #13
   271b0:	9a000001 	bls	271bc <CMachineInfo::CMachineInfo()+0x218>
   271b4:	e3a04000 	mov	r4, #0
   271b8:	ea000077 	b	2739c <CMachineInfo::CMachineInfo()+0x3f8>
   271bc:	e59f120c 	ldr	r1, [pc, #524]	; 273d0 <CMachineInfo::CMachineInfo()+0x42c>
   271c0:	e51b2010 	ldr	r2, [fp, #-16]
   271c4:	e1a03002 	mov	r3, r2
   271c8:	e1a03083 	lsl	r3, r3, #1
   271cc:	e0833002 	add	r3, r3, r2
   271d0:	e1a03103 	lsl	r3, r3, #2
   271d4:	e0813003 	add	r3, r1, r3
   271d8:	e2833004 	add	r3, r3, #4
   271dc:	e5d32000 	ldrb	r2, [r3]
   271e0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   271e4:	e5c32004 	strb	r2, [r3, #4]
   271e8:	e59f11e0 	ldr	r1, [pc, #480]	; 273d0 <CMachineInfo::CMachineInfo()+0x42c>
   271ec:	e51b2010 	ldr	r2, [fp, #-16]
   271f0:	e1a03002 	mov	r3, r2
   271f4:	e1a03083 	lsl	r3, r3, #1
   271f8:	e0833002 	add	r3, r3, r2
   271fc:	e1a03103 	lsl	r3, r3, #2
   27200:	e0813003 	add	r3, r1, r3
   27204:	e2833008 	add	r3, r3, #8
   27208:	e5932000 	ldr	r2, [r3]
   2720c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27210:	e5832008 	str	r2, [r3, #8]
   27214:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27218:	e5933000 	ldr	r3, [r3]
   2721c:	e203300f 	and	r3, r3, #15
   27220:	e2832001 	add	r2, r3, #1
   27224:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27228:	e583200c 	str	r2, [r3, #12]
   2722c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27230:	e5933000 	ldr	r3, [r3]
   27234:	e1a03623 	lsr	r3, r3, #12
   27238:	e6ef3073 	uxtb	r3, r3
   2723c:	e203300f 	and	r3, r3, #15
   27240:	e6ef2073 	uxtb	r2, r3
   27244:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27248:	e5c32010 	strb	r2, [r3, #16]
   2724c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27250:	e5933000 	ldr	r3, [r3]
   27254:	e1a03a23 	lsr	r3, r3, #20
   27258:	e2033007 	and	r3, r3, #7
   2725c:	e3a02c01 	mov	r2, #256	; 0x100
   27260:	e1a03312 	lsl	r3, r2, r3
   27264:	e1a02003 	mov	r2, r3
   27268:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2726c:	e5832014 	str	r2, [r3, #20]
   27270:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27274:	e5d33010 	ldrb	r3, [r3, #16]
   27278:	e3530003 	cmp	r3, #3
   2727c:	da000002 	ble	2728c <CMachineInfo::CMachineInfo()+0x2e8>
   27280:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27284:	e3a02004 	mov	r2, #4
   27288:	e5c32010 	strb	r2, [r3, #16]
   2728c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27290:	e5d33004 	ldrb	r3, [r3, #4]
   27294:	e3530003 	cmp	r3, #3
   27298:	1a00003e 	bne	27398 <CMachineInfo::CMachineInfo()+0x3f4>
   2729c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   272a0:	e5933014 	ldr	r3, [r3, #20]
   272a4:	e3530c01 	cmp	r3, #256	; 0x100
   272a8:	1a00003a 	bne	27398 <CMachineInfo::CMachineInfo()+0x3f4>
   272ac:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   272b0:	e593300c 	ldr	r3, [r3, #12]
   272b4:	e3530001 	cmp	r3, #1
   272b8:	1a000001 	bne	272c4 <CMachineInfo::CMachineInfo()+0x320>
   272bc:	e3a02001 	mov	r2, #1
   272c0:	ea000000 	b	272c8 <CMachineInfo::CMachineInfo()+0x324>
   272c4:	e3a02002 	mov	r2, #2
   272c8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   272cc:	e5c32004 	strb	r2, [r3, #4]
   272d0:	ea000030 	b	27398 <CMachineInfo::CMachineInfo()+0x3f4>
   272d4:	e3a03000 	mov	r3, #0
   272d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   272dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   272e0:	e3530010 	cmp	r3, #16
   272e4:	8a00000b 	bhi	27318 <CMachineInfo::CMachineInfo()+0x374>
   272e8:	e59f20e4 	ldr	r2, [pc, #228]	; 273d4 <CMachineInfo::CMachineInfo()+0x430>
   272ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   272f0:	e7922203 	ldr	r2, [r2, r3, lsl #4]
   272f4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   272f8:	e5933000 	ldr	r3, [r3]
   272fc:	e1520003 	cmp	r2, r3
   27300:	0a000003 	beq	27314 <CMachineInfo::CMachineInfo()+0x370>
   27304:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27308:	e2833001 	add	r3, r3, #1
   2730c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   27310:	eafffff1 	b	272dc <CMachineInfo::CMachineInfo()+0x338>
   27314:	e320f000 	nop	{0}
   27318:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2731c:	e3530010 	cmp	r3, #16
   27320:	9a000001 	bls	2732c <CMachineInfo::CMachineInfo()+0x388>
   27324:	e3a04000 	mov	r4, #0
   27328:	ea00001b 	b	2739c <CMachineInfo::CMachineInfo()+0x3f8>
   2732c:	e59f20a0 	ldr	r2, [pc, #160]	; 273d4 <CMachineInfo::CMachineInfo()+0x430>
   27330:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27334:	e1a03203 	lsl	r3, r3, #4
   27338:	e0823003 	add	r3, r2, r3
   2733c:	e5d32004 	ldrb	r2, [r3, #4]
   27340:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27344:	e5c32004 	strb	r2, [r3, #4]
   27348:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2734c:	e3a02001 	mov	r2, #1
   27350:	e5832008 	str	r2, [r3, #8]
   27354:	e59f2078 	ldr	r2, [pc, #120]	; 273d4 <CMachineInfo::CMachineInfo()+0x430>
   27358:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2735c:	e1a03203 	lsl	r3, r3, #4
   27360:	e0823003 	add	r3, r2, r3
   27364:	e5932008 	ldr	r2, [r3, #8]
   27368:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2736c:	e583200c 	str	r2, [r3, #12]
   27370:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27374:	e3a02000 	mov	r2, #0
   27378:	e5c32010 	strb	r2, [r3, #16]
   2737c:	e59f2050 	ldr	r2, [pc, #80]	; 273d4 <CMachineInfo::CMachineInfo()+0x430>
   27380:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27384:	e1a03203 	lsl	r3, r3, #4
   27388:	e0823003 	add	r3, r2, r3
   2738c:	e593200c 	ldr	r2, [r3, #12]
   27390:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   27394:	e5832014 	str	r2, [r3, #20]
   27398:	e3a04001 	mov	r4, #1
   2739c:	e24b3020 	sub	r3, fp, #32
   273a0:	e1a00003 	mov	r0, r3
   273a4:	ebfff53d 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   273a8:	e3540001 	cmp	r4, #1
   273ac:	e320f000 	nop	{0}
   273b0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   273b4:	e1a00003 	mov	r0, r3
   273b8:	e24bd008 	sub	sp, fp, #8
   273bc:	e8bd8810 	pop	{r4, fp, pc}
   273c0:	00001f35 	.word	0x00001f35
   273c4:	0004e100 	.word	0x0004e100
   273c8:	00060001 	.word	0x00060001
   273cc:	00010002 	.word	0x00010002
   273d0:	000480b4 	.word	0x000480b4
   273d4:	00047fa4 	.word	0x00047fa4

000273d8 <CMachineInfo::~CMachineInfo()>:
   273d8:	e3a02010 	mov	r2, #16
   273dc:	e59f3014 	ldr	r3, [pc, #20]	; 273f8 <CMachineInfo::~CMachineInfo()+0x20>
   273e0:	e5c02004 	strb	r2, [r0, #4]
   273e4:	e5932000 	ldr	r2, [r3]
   273e8:	e1500002 	cmp	r0, r2
   273ec:	03a02000 	moveq	r2, #0
   273f0:	05832000 	streq	r2, [r3]
   273f4:	e12fff1e 	bx	lr
   273f8:	0004e100 	.word	0x0004e100

000273fc <CMachineInfo::GetMachineModel() const>:
   273fc:	e5d00004 	ldrb	r0, [r0, #4]
   27400:	e12fff1e 	bx	lr

00027404 <CMachineInfo::GetMachineName() const>:
   27404:	e5d02004 	ldrb	r2, [r0, #4]
   27408:	e59f3008 	ldr	r3, [pc, #8]	; 27418 <CMachineInfo::GetMachineName() const+0x14>
   2740c:	e0833102 	add	r3, r3, r2, lsl #2
   27410:	e59301b8 	ldr	r0, [r3, #440]	; 0x1b8
   27414:	e12fff1e 	bx	lr
   27418:	00047fa4 	.word	0x00047fa4

0002741c <CMachineInfo::GetModelMajor() const>:
   2741c:	e5900008 	ldr	r0, [r0, #8]
   27420:	e12fff1e 	bx	lr

00027424 <CMachineInfo::GetModelRevision() const>:
   27424:	e590000c 	ldr	r0, [r0, #12]
   27428:	e12fff1e 	bx	lr

0002742c <CMachineInfo::GetSoCType() const>:
   2742c:	e5d00010 	ldrb	r0, [r0, #16]
   27430:	e12fff1e 	bx	lr

00027434 <CMachineInfo::GetRAMSize() const>:
   27434:	e5900014 	ldr	r0, [r0, #20]
   27438:	e12fff1e 	bx	lr

0002743c <CMachineInfo::GetSoCName() const>:
   2743c:	e5d02010 	ldrb	r2, [r0, #16]
   27440:	e59f3008 	ldr	r3, [pc, #8]	; 27450 <CMachineInfo::GetSoCName() const+0x14>
   27444:	e0833102 	add	r3, r3, r2, lsl #2
   27448:	e59301fc 	ldr	r0, [r3, #508]	; 0x1fc
   2744c:	e12fff1e 	bx	lr
   27450:	00047fa4 	.word	0x00047fa4

00027454 <CMachineInfo::GetRevisionRaw() const>:
   27454:	e5900000 	ldr	r0, [r0]
   27458:	e12fff1e 	bx	lr

0002745c <CMachineInfo::GetActLEDInfo() const>:
   2745c:	e5d02004 	ldrb	r2, [r0, #4]
   27460:	e59f3008 	ldr	r3, [pc, #8]	; 27470 <CMachineInfo::GetActLEDInfo() const+0x14>
   27464:	e0833102 	add	r3, r3, r2, lsl #2
   27468:	e5930210 	ldr	r0, [r3, #528]	; 0x210
   2746c:	e12fff1e 	bx	lr
   27470:	00047fa4 	.word	0x00047fa4

00027474 <CMachineInfo::GetClockRate(unsigned int) const>:
   27474:	e92d4030 	push	{r4, r5, lr}
   27478:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   2747c:	e1a04001 	mov	r4, r1
   27480:	e1a05000 	mov	r5, r0
   27484:	e3a01000 	mov	r1, #0
   27488:	e28d000c 	add	r0, sp, #12
   2748c:	ebfff4fc 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   27490:	e3a03004 	mov	r3, #4
   27494:	e58d3000 	str	r3, [sp]
   27498:	e3a03014 	mov	r3, #20
   2749c:	e28d000c 	add	r0, sp, #12
   274a0:	e08d2003 	add	r2, sp, r3
   274a4:	e59f1074 	ldr	r1, [pc, #116]	; 27520 <CMachineInfo::GetClockRate(unsigned int) const+0xac>
   274a8:	e58d4020 	str	r4, [sp, #32]
   274ac:	ebfff500 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   274b0:	e3500000 	cmp	r0, #0
   274b4:	1a000009 	bne	274e0 <CMachineInfo::GetClockRate(unsigned int) const+0x6c>
   274b8:	e3540002 	cmp	r4, #2
   274bc:	0a00000d 	beq	274f8 <CMachineInfo::GetClockRate(unsigned int) const+0x84>
   274c0:	e3540004 	cmp	r4, #4
   274c4:	0a00000f 	beq	27508 <CMachineInfo::GetClockRate(unsigned int) const+0x94>
   274c8:	e3540001 	cmp	r4, #1
   274cc:	0a00000b 	beq	27500 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   274d0:	e59f104c 	ldr	r1, [pc, #76]	; 27524 <CMachineInfo::GetClockRate(unsigned int) const+0xb0>
   274d4:	e59f204c 	ldr	r2, [pc, #76]	; 27528 <CMachineInfo::GetClockRate(unsigned int) const+0xb4>
   274d8:	e2810010 	add	r0, r1, #16
   274dc:	ebfff4c7 	bl	24800 <assertion_failed>
   274e0:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   274e4:	e28d000c 	add	r0, sp, #12
   274e8:	ebfff4ec 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   274ec:	e1a00004 	mov	r0, r4
   274f0:	e28dd02c 	add	sp, sp, #44	; 0x2c
   274f4:	e8bd8030 	pop	{r4, r5, pc}
   274f8:	e59f402c 	ldr	r4, [pc, #44]	; 2752c <CMachineInfo::GetClockRate(unsigned int) const+0xb8>
   274fc:	eafffff8 	b	274e4 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   27500:	e59f4028 	ldr	r4, [pc, #40]	; 27530 <CMachineInfo::GetClockRate(unsigned int) const+0xbc>
   27504:	eafffff6 	b	274e4 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   27508:	e5952008 	ldr	r2, [r5, #8]
   2750c:	e59f3020 	ldr	r3, [pc, #32]	; 27534 <CMachineInfo::GetClockRate(unsigned int) const+0xc0>
   27510:	e3520002 	cmp	r2, #2
   27514:	e59f401c 	ldr	r4, [pc, #28]	; 27538 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
   27518:	81a04003 	movhi	r4, r3
   2751c:	eafffff0 	b	274e4 <CMachineInfo::GetClockRate(unsigned int) const+0x70>
   27520:	00030002 	.word	0x00030002
   27524:	000455ac 	.word	0x000455ac
   27528:	00000141 	.word	0x00000141
   2752c:	02dc6c00 	.word	0x02dc6c00
   27530:	05f5e100 	.word	0x05f5e100
   27534:	11e1a300 	.word	0x11e1a300
   27538:	0ee6b280 	.word	0x0ee6b280

0002753c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   2753c:	e3510036 	cmp	r1, #54	; 0x36
   27540:	0a00000b 	beq	27574 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x38>
   27544:	e3510037 	cmp	r1, #55	; 0x37
   27548:	1a000004 	bne	27560 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   2754c:	e5d00004 	ldrb	r0, [r0, #4]
   27550:	e3500003 	cmp	r0, #3
   27554:	c3a00028 	movgt	r0, #40	; 0x28
   27558:	d3a0002d 	movle	r0, #45	; 0x2d
   2755c:	e12fff1e 	bx	lr
   27560:	e59f1030 	ldr	r1, [pc, #48]	; 27598 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
   27564:	e92d4010 	push	{r4, lr}
   27568:	e59f202c 	ldr	r2, [pc, #44]	; 2759c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
   2756c:	e2810010 	add	r0, r1, #16
   27570:	ebfff4a2 	bl	24800 <assertion_failed>
   27574:	e5d03004 	ldrb	r3, [r0, #4]
   27578:	e3530003 	cmp	r3, #3
   2757c:	d3a00028 	movle	r0, #40	; 0x28
   27580:	dafffff5 	ble	2755c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x20>
   27584:	e5900008 	ldr	r0, [r0, #8]
   27588:	e3500002 	cmp	r0, #2
   2758c:	93a0002d 	movls	r0, #45	; 0x2d
   27590:	83a00029 	movhi	r0, #41	; 0x29
   27594:	e12fff1e 	bx	lr
   27598:	000455ac 	.word	0x000455ac
   2759c:	0000017a 	.word	0x0000017a

000275a0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   275a0:	e5903008 	ldr	r3, [r0, #8]
   275a4:	e3530003 	cmp	r3, #3
   275a8:	8a000005 	bhi	275c4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x24>
   275ac:	e3510001 	cmp	r1, #1
   275b0:	0a00000b 	beq	275e4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
   275b4:	e3510006 	cmp	r1, #6
   275b8:	e59f002c 	ldr	r0, [pc, #44]	; 275ec <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x4c>
   275bc:	13a00000 	movne	r0, #0
   275c0:	e12fff1e 	bx	lr
   275c4:	e3510001 	cmp	r1, #1
   275c8:	0a000003 	beq	275dc <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x3c>
   275cc:	e3510006 	cmp	r1, #6
   275d0:	e59f0018 	ldr	r0, [pc, #24]	; 275f0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
   275d4:	13a00000 	movne	r0, #0
   275d8:	e12fff1e 	bx	lr
   275dc:	e59f0010 	ldr	r0, [pc, #16]	; 275f4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x54>
   275e0:	e12fff1e 	bx	lr
   275e4:	e59f000c 	ldr	r0, [pc, #12]	; 275f8 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x58>
   275e8:	e12fff1e 	bx	lr
   275ec:	1dcd6500 	.word	0x1dcd6500
   275f0:	2cb41780 	.word	0x2cb41780
   275f4:	0337f980 	.word	0x0337f980
   275f8:	0124f800 	.word	0x0124f800

000275fc <CMachineInfo::GetDevice(TDeviceId) const>:
   275fc:	e3510000 	cmp	r1, #0
   27600:	1a000003 	bne	27614 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   27604:	e5d00004 	ldrb	r0, [r0, #4]
   27608:	e2500001 	subs	r0, r0, #1
   2760c:	13a00001 	movne	r0, #1
   27610:	e12fff1e 	bx	lr
   27614:	e59f100c 	ldr	r1, [pc, #12]	; 27628 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
   27618:	e92d4010 	push	{r4, lr}
   2761c:	e59f2008 	ldr	r2, [pc, #8]	; 2762c <CMachineInfo::GetDevice(TDeviceId) const+0x30>
   27620:	e2810010 	add	r0, r1, #16
   27624:	ebfff475 	bl	24800 <assertion_failed>
   27628:	000455ac 	.word	0x000455ac
   2762c:	000001b5 	.word	0x000001b5

00027630 <CMachineInfo::ArePWMChannelsSwapped() const>:
   27630:	e5d03004 	ldrb	r3, [r0, #4]
   27634:	e2430004 	sub	r0, r3, #4
   27638:	e6ef0070 	uxtb	r0, r0
   2763c:	e35000fb 	cmp	r0, #251	; 0xfb
   27640:	e2433006 	sub	r3, r3, #6
   27644:	93a00001 	movls	r0, #1
   27648:	83a00000 	movhi	r0, #0
   2764c:	e3530001 	cmp	r3, #1
   27650:	93a00000 	movls	r0, #0
   27654:	e12fff1e 	bx	lr

00027658 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   27658:	e59f30b4 	ldr	r3, [pc, #180]	; 27714 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xbc>
   2765c:	e92d4010 	push	{r4, lr}
   27660:	e5933000 	ldr	r3, [r3]
   27664:	ea000002 	b	27674 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c>
   27668:	e1500003 	cmp	r0, r3
   2766c:	0a000006 	beq	2768c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x34>
   27670:	e1a00003 	mov	r0, r3
   27674:	e3530000 	cmp	r3, #0
   27678:	1afffffa 	bne	27668 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x10>
   2767c:	e59f1094 	ldr	r1, [pc, #148]	; 27718 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   27680:	e59f2094 	ldr	r2, [pc, #148]	; 2771c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc4>
   27684:	e2810014 	add	r0, r1, #20
   27688:	ebfff45c 	bl	24800 <assertion_failed>
   2768c:	e3d1300f 	bics	r3, r1, #15
   27690:	1a000007 	bne	276b4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x5c>
   27694:	e351000c 	cmp	r1, #12
   27698:	8a000019 	bhi	27704 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xac>
   2769c:	e1d031b8 	ldrh	r3, [r0, #24]
   276a0:	e1a02153 	asr	r2, r3, r1
   276a4:	e3120001 	tst	r2, #1
   276a8:	1a000010 	bne	276f0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x98>
   276ac:	e3a00080 	mov	r0, #128	; 0x80
   276b0:	e8bd8010 	pop	{r4, pc}
   276b4:	e3510081 	cmp	r1, #129	; 0x81
   276b8:	13a0100c 	movne	r1, #12
   276bc:	03a01006 	moveq	r1, #6
   276c0:	e1d021b8 	ldrh	r2, [r0, #24]
   276c4:	e1a03152 	asr	r3, r2, r1
   276c8:	e3130001 	tst	r3, #1
   276cc:	1a000002 	bne	276dc <CMachineInfo::AllocateDMAChannel(unsigned int)+0x84>
   276d0:	e2511001 	subs	r1, r1, #1
   276d4:	2afffffa 	bcs	276c4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x6c>
   276d8:	eafffff3 	b	276ac <CMachineInfo::AllocateDMAChannel(unsigned int)+0x54>
   276dc:	e3a03001 	mov	r3, #1
   276e0:	e1c22113 	bic	r2, r2, r3, lsl r1
   276e4:	e1c021b8 	strh	r2, [r0, #24]
   276e8:	e1a00001 	mov	r0, r1
   276ec:	e8bd8010 	pop	{r4, pc}
   276f0:	e3a02001 	mov	r2, #1
   276f4:	e1c33112 	bic	r3, r3, r2, lsl r1
   276f8:	e1c031b8 	strh	r3, [r0, #24]
   276fc:	e1a00001 	mov	r0, r1
   27700:	e8bd8010 	pop	{r4, pc}
   27704:	e59f100c 	ldr	r1, [pc, #12]	; 27718 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   27708:	e59f2010 	ldr	r2, [pc, #16]	; 27720 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc8>
   2770c:	e2810024 	add	r0, r1, #36	; 0x24
   27710:	ebfff43a 	bl	24800 <assertion_failed>
   27714:	0004e100 	.word	0x0004e100
   27718:	000455ac 	.word	0x000455ac
   2771c:	000001c5 	.word	0x000001c5
   27720:	000001ce 	.word	0x000001ce

00027724 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   27724:	e59f3074 	ldr	r3, [pc, #116]	; 277a0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
   27728:	e92d4010 	push	{r4, lr}
   2772c:	e5933000 	ldr	r3, [r3]
   27730:	ea000002 	b	27740 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
   27734:	e1530000 	cmp	r3, r0
   27738:	0a000006 	beq	27758 <CMachineInfo::FreeDMAChannel(unsigned int)+0x34>
   2773c:	e1a00003 	mov	r0, r3
   27740:	e3530000 	cmp	r3, #0
   27744:	1afffffa 	bne	27734 <CMachineInfo::FreeDMAChannel(unsigned int)+0x10>
   27748:	e59f1054 	ldr	r1, [pc, #84]	; 277a4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   2774c:	e59f2054 	ldr	r2, [pc, #84]	; 277a8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x84>
   27750:	e2810014 	add	r0, r1, #20
   27754:	ebfff429 	bl	24800 <assertion_failed>
   27758:	e351000c 	cmp	r1, #12
   2775c:	8a000007 	bhi	27780 <CMachineInfo::FreeDMAChannel(unsigned int)+0x5c>
   27760:	e1d321b8 	ldrh	r2, [r3, #24]
   27764:	e1a00152 	asr	r0, r2, r1
   27768:	e3100001 	tst	r0, #1
   2776c:	1a000007 	bne	27790 <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>
   27770:	e3a00001 	mov	r0, #1
   27774:	e1821110 	orr	r1, r2, r0, lsl r1
   27778:	e1c311b8 	strh	r1, [r3, #24]
   2777c:	e8bd8010 	pop	{r4, pc}
   27780:	e59f101c 	ldr	r1, [pc, #28]	; 277a4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   27784:	e59f2020 	ldr	r2, [pc, #32]	; 277ac <CMachineInfo::FreeDMAChannel(unsigned int)+0x88>
   27788:	e2810024 	add	r0, r1, #36	; 0x24
   2778c:	ebfff41b 	bl	24800 <assertion_failed>
   27790:	e59f100c 	ldr	r1, [pc, #12]	; 277a4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   27794:	e59f2014 	ldr	r2, [pc, #20]	; 277b0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x8c>
   27798:	e2810040 	add	r0, r1, #64	; 0x40
   2779c:	ebfff417 	bl	24800 <assertion_failed>
   277a0:	0004e100 	.word	0x0004e100
   277a4:	000455ac 	.word	0x000455ac
   277a8:	000001f2 	.word	0x000001f2
   277ac:	000001fa 	.word	0x000001fa
   277b0:	000001fb 	.word	0x000001fb

000277b4 <CMachineInfo::Get()>:
   277b4:	e59f3020 	ldr	r3, [pc, #32]	; 277dc <CMachineInfo::Get()+0x28>
   277b8:	e5930000 	ldr	r0, [r3]
   277bc:	e3500000 	cmp	r0, #0
   277c0:	0a000000 	beq	277c8 <CMachineInfo::Get()+0x14>
   277c4:	e12fff1e 	bx	lr
   277c8:	e59f1010 	ldr	r1, [pc, #16]	; 277e0 <CMachineInfo::Get()+0x2c>
   277cc:	e92d4010 	push	{r4, lr}
   277d0:	e59f200c 	ldr	r2, [pc, #12]	; 277e4 <CMachineInfo::Get()+0x30>
   277d4:	e2810014 	add	r0, r1, #20
   277d8:	ebfff408 	bl	24800 <assertion_failed>
   277dc:	0004e100 	.word	0x0004e100
   277e0:	000455ac 	.word	0x000455ac
   277e4:	00000201 	.word	0x00000201

000277e8 <CPtrArray::CPtrArray(unsigned int, unsigned int)>:
   277e8:	e3a03000 	mov	r3, #0
   277ec:	e1510003 	cmp	r1, r3
   277f0:	e92d4010 	push	{r4, lr}
   277f4:	e880000e 	stm	r0, {r1, r2, r3}
   277f8:	e580300c 	str	r3, [r0, #12]
   277fc:	0a000009 	beq	27828 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x40>
   27800:	e3520000 	cmp	r2, #0
   27804:	0a00000b 	beq	27838 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x50>
   27808:	e371022e 	cmn	r1, #-536870910	; 0xe0000002
   2780c:	e1a04000 	mov	r4, r0
   27810:	91a00101 	lslls	r0, r1, #2
   27814:	83e00000 	mvnhi	r0, #0
   27818:	eb000e16 	bl	2b078 <operator new[](unsigned int)>
   2781c:	e584000c 	str	r0, [r4, #12]
   27820:	e1a00004 	mov	r0, r4
   27824:	e8bd8010 	pop	{r4, pc}
   27828:	e3a0201e 	mov	r2, #30
   2782c:	e59f1014 	ldr	r1, [pc, #20]	; 27848 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x60>
   27830:	e59f0014 	ldr	r0, [pc, #20]	; 2784c <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x64>
   27834:	ebfff3f1 	bl	24800 <assertion_failed>
   27838:	e3a0201f 	mov	r2, #31
   2783c:	e59f1004 	ldr	r1, [pc, #4]	; 27848 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x60>
   27840:	e59f0008 	ldr	r0, [pc, #8]	; 27850 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x68>
   27844:	ebfff3ed 	bl	24800 <assertion_failed>
   27848:	00045614 	.word	0x00045614
   2784c:	00045624 	.word	0x00045624
   27850:	00045638 	.word	0x00045638

00027854 <CPtrArray::~CPtrArray()>:
   27854:	e3a03000 	mov	r3, #0
   27858:	e92d4010 	push	{r4, lr}
   2785c:	e1a04000 	mov	r4, r0
   27860:	e590000c 	ldr	r0, [r0, #12]
   27864:	e5843000 	str	r3, [r4]
   27868:	e1500003 	cmp	r0, r3
   2786c:	e5843004 	str	r3, [r4, #4]
   27870:	0a000000 	beq	27878 <CPtrArray::~CPtrArray()+0x24>
   27874:	eb000e06 	bl	2b094 <operator delete[](void*)>
   27878:	e1a00004 	mov	r0, r4
   2787c:	e8bd8010 	pop	{r4, pc}

00027880 <CPtrArray::GetCount() const>:
   27880:	e5900008 	ldr	r0, [r0, #8]
   27884:	e12fff1e 	bx	lr

00027888 <CPtrArray::operator[](unsigned int)>:
   27888:	e5903008 	ldr	r3, [r0, #8]
   2788c:	e92d4010 	push	{r4, lr}
   27890:	e1530001 	cmp	r3, r1
   27894:	9a000007 	bls	278b8 <CPtrArray::operator[](unsigned int)+0x30>
   27898:	e5902000 	ldr	r2, [r0]
   2789c:	e1530002 	cmp	r3, r2
   278a0:	8a000008 	bhi	278c8 <CPtrArray::operator[](unsigned int)+0x40>
   278a4:	e590000c 	ldr	r0, [r0, #12]
   278a8:	e3500000 	cmp	r0, #0
   278ac:	0a000009 	beq	278d8 <CPtrArray::operator[](unsigned int)+0x50>
   278b0:	e0800101 	add	r0, r0, r1, lsl #2
   278b4:	e8bd8010 	pop	{r4, pc}
   278b8:	e3a02035 	mov	r2, #53	; 0x35
   278bc:	e59f1024 	ldr	r1, [pc, #36]	; 278e8 <CPtrArray::operator[](unsigned int)+0x60>
   278c0:	e59f0024 	ldr	r0, [pc, #36]	; 278ec <CPtrArray::operator[](unsigned int)+0x64>
   278c4:	ebfff3cd 	bl	24800 <assertion_failed>
   278c8:	e3a02036 	mov	r2, #54	; 0x36
   278cc:	e59f1014 	ldr	r1, [pc, #20]	; 278e8 <CPtrArray::operator[](unsigned int)+0x60>
   278d0:	e59f0018 	ldr	r0, [pc, #24]	; 278f0 <CPtrArray::operator[](unsigned int)+0x68>
   278d4:	ebfff3c9 	bl	24800 <assertion_failed>
   278d8:	e3a02037 	mov	r2, #55	; 0x37
   278dc:	e59f1004 	ldr	r1, [pc, #4]	; 278e8 <CPtrArray::operator[](unsigned int)+0x60>
   278e0:	e59f000c 	ldr	r0, [pc, #12]	; 278f4 <CPtrArray::operator[](unsigned int)+0x6c>
   278e4:	ebfff3c5 	bl	24800 <assertion_failed>
   278e8:	00045614 	.word	0x00045614
   278ec:	00045650 	.word	0x00045650
   278f0:	00045668 	.word	0x00045668
   278f4:	00045688 	.word	0x00045688

000278f8 <CPtrArray::operator[](unsigned int) const>:
   278f8:	e5903008 	ldr	r3, [r0, #8]
   278fc:	e92d4010 	push	{r4, lr}
   27900:	e1530001 	cmp	r3, r1
   27904:	9a000007 	bls	27928 <CPtrArray::operator[](unsigned int) const+0x30>
   27908:	e5902000 	ldr	r2, [r0]
   2790c:	e1530002 	cmp	r3, r2
   27910:	8a000008 	bhi	27938 <CPtrArray::operator[](unsigned int) const+0x40>
   27914:	e590300c 	ldr	r3, [r0, #12]
   27918:	e3530000 	cmp	r3, #0
   2791c:	0a000009 	beq	27948 <CPtrArray::operator[](unsigned int) const+0x50>
   27920:	e7930101 	ldr	r0, [r3, r1, lsl #2]
   27924:	e8bd8010 	pop	{r4, pc}
   27928:	e3a0203e 	mov	r2, #62	; 0x3e
   2792c:	e59f1024 	ldr	r1, [pc, #36]	; 27958 <CPtrArray::operator[](unsigned int) const+0x60>
   27930:	e59f0024 	ldr	r0, [pc, #36]	; 2795c <CPtrArray::operator[](unsigned int) const+0x64>
   27934:	ebfff3b1 	bl	24800 <assertion_failed>
   27938:	e3a0203f 	mov	r2, #63	; 0x3f
   2793c:	e59f1014 	ldr	r1, [pc, #20]	; 27958 <CPtrArray::operator[](unsigned int) const+0x60>
   27940:	e59f0018 	ldr	r0, [pc, #24]	; 27960 <CPtrArray::operator[](unsigned int) const+0x68>
   27944:	ebfff3ad 	bl	24800 <assertion_failed>
   27948:	e3a02040 	mov	r2, #64	; 0x40
   2794c:	e59f1004 	ldr	r1, [pc, #4]	; 27958 <CPtrArray::operator[](unsigned int) const+0x60>
   27950:	e59f000c 	ldr	r0, [pc, #12]	; 27964 <CPtrArray::operator[](unsigned int) const+0x6c>
   27954:	ebfff3a9 	bl	24800 <assertion_failed>
   27958:	00045614 	.word	0x00045614
   2795c:	00045650 	.word	0x00045650
   27960:	00045668 	.word	0x00045668
   27964:	00045688 	.word	0x00045688

00027968 <CPtrArray::Append(void*)>:
   27968:	e5903000 	ldr	r3, [r0]
   2796c:	e92d4070 	push	{r4, r5, r6, lr}
   27970:	e3530000 	cmp	r3, #0
   27974:	0a000024 	beq	27a0c <CPtrArray::Append(void*)+0xa4>
   27978:	e590500c 	ldr	r5, [r0, #12]
   2797c:	e1a04000 	mov	r4, r0
   27980:	e3550000 	cmp	r5, #0
   27984:	0a000024 	beq	27a1c <CPtrArray::Append(void*)+0xb4>
   27988:	e5900008 	ldr	r0, [r0, #8]
   2798c:	e1530000 	cmp	r3, r0
   27990:	3a000025 	bcc	27a2c <CPtrArray::Append(void*)+0xc4>
   27994:	e1a06001 	mov	r6, r1
   27998:	0a000003 	beq	279ac <CPtrArray::Append(void*)+0x44>
   2799c:	e2803001 	add	r3, r0, #1
   279a0:	e7856100 	str	r6, [r5, r0, lsl #2]
   279a4:	e5843008 	str	r3, [r4, #8]
   279a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   279ac:	e5940004 	ldr	r0, [r4, #4]
   279b0:	e3500000 	cmp	r0, #0
   279b4:	0a000020 	beq	27a3c <CPtrArray::Append(void*)+0xd4>
   279b8:	e0833000 	add	r3, r3, r0
   279bc:	e373022e 	cmn	r3, #-536870910	; 0xe0000002
   279c0:	91a00103 	lslls	r0, r3, #2
   279c4:	83e00000 	mvnhi	r0, #0
   279c8:	eb000daa 	bl	2b078 <operator new[](unsigned int)>
   279cc:	e5942000 	ldr	r2, [r4]
   279d0:	e594100c 	ldr	r1, [r4, #12]
   279d4:	e1a02102 	lsl	r2, r2, #2
   279d8:	e1a05000 	mov	r5, r0
   279dc:	eb000bcb 	bl	2a910 <memcpy>
   279e0:	e594000c 	ldr	r0, [r4, #12]
   279e4:	e3500000 	cmp	r0, #0
   279e8:	0a000000 	beq	279f0 <CPtrArray::Append(void*)+0x88>
   279ec:	eb000da8 	bl	2b094 <operator delete[](void*)>
   279f0:	e5943000 	ldr	r3, [r4]
   279f4:	e5942004 	ldr	r2, [r4, #4]
   279f8:	e5940008 	ldr	r0, [r4, #8]
   279fc:	e0833002 	add	r3, r3, r2
   27a00:	e584500c 	str	r5, [r4, #12]
   27a04:	e5843000 	str	r3, [r4]
   27a08:	eaffffe3 	b	2799c <CPtrArray::Append(void*)+0x34>
   27a0c:	e3a02047 	mov	r2, #71	; 0x47
   27a10:	e59f1034 	ldr	r1, [pc, #52]	; 27a4c <CPtrArray::Append(void*)+0xe4>
   27a14:	e59f0034 	ldr	r0, [pc, #52]	; 27a50 <CPtrArray::Append(void*)+0xe8>
   27a18:	ebfff378 	bl	24800 <assertion_failed>
   27a1c:	e3a02048 	mov	r2, #72	; 0x48
   27a20:	e59f1024 	ldr	r1, [pc, #36]	; 27a4c <CPtrArray::Append(void*)+0xe4>
   27a24:	e59f0028 	ldr	r0, [pc, #40]	; 27a54 <CPtrArray::Append(void*)+0xec>
   27a28:	ebfff374 	bl	24800 <assertion_failed>
   27a2c:	e3a0204a 	mov	r2, #74	; 0x4a
   27a30:	e59f1014 	ldr	r1, [pc, #20]	; 27a4c <CPtrArray::Append(void*)+0xe4>
   27a34:	e59f001c 	ldr	r0, [pc, #28]	; 27a58 <CPtrArray::Append(void*)+0xf0>
   27a38:	ebfff370 	bl	24800 <assertion_failed>
   27a3c:	e3a0204d 	mov	r2, #77	; 0x4d
   27a40:	e59f1004 	ldr	r1, [pc, #4]	; 27a4c <CPtrArray::Append(void*)+0xe4>
   27a44:	e59f0010 	ldr	r0, [pc, #16]	; 27a5c <CPtrArray::Append(void*)+0xf4>
   27a48:	ebfff36c 	bl	24800 <assertion_failed>
   27a4c:	00045614 	.word	0x00045614
   27a50:	00045624 	.word	0x00045624
   27a54:	00045688 	.word	0x00045688
   27a58:	00045668 	.word	0x00045668
   27a5c:	00045638 	.word	0x00045638

00027a60 <CPtrArray::RemoveLast()>:
   27a60:	e5903008 	ldr	r3, [r0, #8]
   27a64:	e3530000 	cmp	r3, #0
   27a68:	0a000002 	beq	27a78 <CPtrArray::RemoveLast()+0x18>
   27a6c:	e2433001 	sub	r3, r3, #1
   27a70:	e5803008 	str	r3, [r0, #8]
   27a74:	e12fff1e 	bx	lr
   27a78:	e92d4010 	push	{r4, lr}
   27a7c:	e3a02060 	mov	r2, #96	; 0x60
   27a80:	e59f1004 	ldr	r1, [pc, #4]	; 27a8c <CPtrArray::RemoveLast()+0x2c>
   27a84:	e59f0004 	ldr	r0, [pc, #4]	; 27a90 <CPtrArray::RemoveLast()+0x30>
   27a88:	ebfff35c 	bl	24800 <assertion_failed>
   27a8c:	00045614 	.word	0x00045614
   27a90:	00045698 	.word	0x00045698
   27a94:	00000000 	.word	0x00000000

00027a98 <CString::~CString()>:
   27a98:	e92d4010 	push	{r4, lr}
   27a9c:	e1a04000 	mov	r4, r0
   27aa0:	e5900004 	ldr	r0, [r0, #4]
   27aa4:	e59f3014 	ldr	r3, [pc, #20]	; 27ac0 <CString::~CString()+0x28>
   27aa8:	e3500000 	cmp	r0, #0
   27aac:	e5843000 	str	r3, [r4]
   27ab0:	0a000000 	beq	27ab8 <CString::~CString()+0x20>
   27ab4:	eb000d76 	bl	2b094 <operator delete[](void*)>
   27ab8:	e1a00004 	mov	r0, r4
   27abc:	e8bd8010 	pop	{r4, pc}
   27ac0:	000456b4 	.word	0x000456b4

00027ac4 <CString::~CString()>:
   27ac4:	e92d4010 	push	{r4, lr}
   27ac8:	e1a04000 	mov	r4, r0
   27acc:	e5900004 	ldr	r0, [r0, #4]
   27ad0:	e59f3020 	ldr	r3, [pc, #32]	; 27af8 <CString::~CString()+0x34>
   27ad4:	e3500000 	cmp	r0, #0
   27ad8:	e5843000 	str	r3, [r4]
   27adc:	0a000000 	beq	27ae4 <CString::~CString()+0x20>
   27ae0:	eb000d6b 	bl	2b094 <operator delete[](void*)>
   27ae4:	e1a00004 	mov	r0, r4
   27ae8:	e3a01010 	mov	r1, #16
   27aec:	eb000d6e 	bl	2b0ac <operator delete(void*, unsigned int)>
   27af0:	e1a00004 	mov	r0, r4
   27af4:	e8bd8010 	pop	{r4, pc}
   27af8:	000456b4 	.word	0x000456b4

00027afc <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   27afc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   27b00:	e990002c 	ldmib	r0, {r2, r3, r5}
   27b04:	e0455002 	sub	r5, r5, r2
   27b08:	e0851001 	add	r1, r5, r1
   27b0c:	e2812001 	add	r2, r1, #1
   27b10:	e1520003 	cmp	r2, r3
   27b14:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   27b18:	e1a04000 	mov	r4, r0
   27b1c:	e2816041 	add	r6, r1, #65	; 0x41
   27b20:	e1a00006 	mov	r0, r6
   27b24:	eb000d53 	bl	2b078 <operator new[](unsigned int)>
   27b28:	e3a02000 	mov	r2, #0
   27b2c:	e594300c 	ldr	r3, [r4, #12]
   27b30:	e1a07000 	mov	r7, r0
   27b34:	e5c32000 	strb	r2, [r3]
   27b38:	e5941004 	ldr	r1, [r4, #4]
   27b3c:	eb000a0c 	bl	2a374 <strcpy>
   27b40:	e5940004 	ldr	r0, [r4, #4]
   27b44:	e3500000 	cmp	r0, #0
   27b48:	0a000000 	beq	27b50 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   27b4c:	eb000d50 	bl	2b094 <operator delete[](void*)>
   27b50:	e0875005 	add	r5, r7, r5
   27b54:	e584500c 	str	r5, [r4, #12]
   27b58:	e5847004 	str	r7, [r4, #4]
   27b5c:	e5846008 	str	r6, [r4, #8]
   27b60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00027b64 <CString::CString()>:
   27b64:	e3a02000 	mov	r2, #0
   27b68:	e59f1008 	ldr	r1, [pc, #8]	; 27b78 <CString::CString()+0x14>
   27b6c:	e5802008 	str	r2, [r0, #8]
   27b70:	e8800006 	stm	r0, {r1, r2}
   27b74:	e12fff1e 	bx	lr
   27b78:	000456b4 	.word	0x000456b4

00027b7c <CString::CString(char const*)>:
   27b7c:	e92d4070 	push	{r4, r5, r6, lr}
   27b80:	e1a04000 	mov	r4, r0
   27b84:	e59f302c 	ldr	r3, [pc, #44]	; 27bb8 <CString::CString(char const*)+0x3c>
   27b88:	e1a00001 	mov	r0, r1
   27b8c:	e5843000 	str	r3, [r4]
   27b90:	e1a05001 	mov	r5, r1
   27b94:	eb000938 	bl	2a07c <strlen>
   27b98:	e2800001 	add	r0, r0, #1
   27b9c:	e5840008 	str	r0, [r4, #8]
   27ba0:	eb000d34 	bl	2b078 <operator new[](unsigned int)>
   27ba4:	e1a01005 	mov	r1, r5
   27ba8:	e5840004 	str	r0, [r4, #4]
   27bac:	eb0009f0 	bl	2a374 <strcpy>
   27bb0:	e1a00004 	mov	r0, r4
   27bb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   27bb8:	000456b4 	.word	0x000456b4

00027bbc <CString::operator char const*() const>:
   27bbc:	e5900004 	ldr	r0, [r0, #4]
   27bc0:	e59f3008 	ldr	r3, [pc, #8]	; 27bd0 <CString::operator char const*() const+0x14>
   27bc4:	e3500000 	cmp	r0, #0
   27bc8:	01a00003 	moveq	r0, r3
   27bcc:	e12fff1e 	bx	lr
   27bd0:	00047764 	.word	0x00047764

00027bd4 <CString::operator=(char const*)>:
   27bd4:	e92d4070 	push	{r4, r5, r6, lr}
   27bd8:	e1a04000 	mov	r4, r0
   27bdc:	e5900004 	ldr	r0, [r0, #4]
   27be0:	e1a05001 	mov	r5, r1
   27be4:	e3500000 	cmp	r0, #0
   27be8:	0a000000 	beq	27bf0 <CString::operator=(char const*)+0x1c>
   27bec:	eb000d28 	bl	2b094 <operator delete[](void*)>
   27bf0:	e1a00005 	mov	r0, r5
   27bf4:	eb000920 	bl	2a07c <strlen>
   27bf8:	e2800001 	add	r0, r0, #1
   27bfc:	e5840008 	str	r0, [r4, #8]
   27c00:	eb000d1c 	bl	2b078 <operator new[](unsigned int)>
   27c04:	e1a01005 	mov	r1, r5
   27c08:	e5840004 	str	r0, [r4, #4]
   27c0c:	eb0009d8 	bl	2a374 <strcpy>
   27c10:	e5940004 	ldr	r0, [r4, #4]
   27c14:	e8bd8070 	pop	{r4, r5, r6, pc}

00027c18 <CString::operator=(CString const&)>:
   27c18:	e92d4070 	push	{r4, r5, r6, lr}
   27c1c:	e1a04000 	mov	r4, r0
   27c20:	e5900004 	ldr	r0, [r0, #4]
   27c24:	e1a06001 	mov	r6, r1
   27c28:	e3500000 	cmp	r0, #0
   27c2c:	0a000000 	beq	27c34 <CString::operator=(CString const&)+0x1c>
   27c30:	eb000d17 	bl	2b094 <operator delete[](void*)>
   27c34:	e5960004 	ldr	r0, [r6, #4]
   27c38:	e59f5030 	ldr	r5, [pc, #48]	; 27c70 <CString::operator=(CString const&)+0x58>
   27c3c:	e3500000 	cmp	r0, #0
   27c40:	01a00005 	moveq	r0, r5
   27c44:	eb00090c 	bl	2a07c <strlen>
   27c48:	e2800001 	add	r0, r0, #1
   27c4c:	e5840008 	str	r0, [r4, #8]
   27c50:	eb000d08 	bl	2b078 <operator new[](unsigned int)>
   27c54:	e5840004 	str	r0, [r4, #4]
   27c58:	e5961004 	ldr	r1, [r6, #4]
   27c5c:	e3510000 	cmp	r1, #0
   27c60:	01a01005 	moveq	r1, r5
   27c64:	eb0009c2 	bl	2a374 <strcpy>
   27c68:	e1a00004 	mov	r0, r4
   27c6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   27c70:	00047764 	.word	0x00047764

00027c74 <CString::GetLength() const>:
   27c74:	e5900004 	ldr	r0, [r0, #4]
   27c78:	e3500000 	cmp	r0, #0
   27c7c:	012fff1e 	bxeq	lr
   27c80:	ea0008fd 	b	2a07c <strlen>

00027c84 <CString::Append(char const*)>:
   27c84:	e92d4070 	push	{r4, r5, r6, lr}
   27c88:	e3a03001 	mov	r3, #1
   27c8c:	e1a04000 	mov	r4, r0
   27c90:	e5900004 	ldr	r0, [r0, #4]
   27c94:	e1a06001 	mov	r6, r1
   27c98:	e3500000 	cmp	r0, #0
   27c9c:	e5843008 	str	r3, [r4, #8]
   27ca0:	0a000003 	beq	27cb4 <CString::Append(char const*)+0x30>
   27ca4:	eb0008f4 	bl	2a07c <strlen>
   27ca8:	e5943008 	ldr	r3, [r4, #8]
   27cac:	e0830000 	add	r0, r3, r0
   27cb0:	e5840008 	str	r0, [r4, #8]
   27cb4:	e1a00006 	mov	r0, r6
   27cb8:	eb0008ef 	bl	2a07c <strlen>
   27cbc:	e5943008 	ldr	r3, [r4, #8]
   27cc0:	e0800003 	add	r0, r0, r3
   27cc4:	e5840008 	str	r0, [r4, #8]
   27cc8:	eb000cea 	bl	2b078 <operator new[](unsigned int)>
   27ccc:	e5941004 	ldr	r1, [r4, #4]
   27cd0:	e1a05000 	mov	r5, r0
   27cd4:	e3510000 	cmp	r1, #0
   27cd8:	05c01000 	strbeq	r1, [r0]
   27cdc:	0a000004 	beq	27cf4 <CString::Append(char const*)+0x70>
   27ce0:	eb0009a3 	bl	2a374 <strcpy>
   27ce4:	e5940004 	ldr	r0, [r4, #4]
   27ce8:	e3500000 	cmp	r0, #0
   27cec:	0a000000 	beq	27cf4 <CString::Append(char const*)+0x70>
   27cf0:	eb000ce7 	bl	2b094 <operator delete[](void*)>
   27cf4:	e1a01006 	mov	r1, r6
   27cf8:	e1a00005 	mov	r0, r5
   27cfc:	eb0009ba 	bl	2a3ec <strcat>
   27d00:	e5845004 	str	r5, [r4, #4]
   27d04:	e8bd8070 	pop	{r4, r5, r6, pc}

00027d08 <CString::Compare(char const*) const>:
   27d08:	e5900004 	ldr	r0, [r0, #4]
   27d0c:	ea0008e4 	b	2a0a4 <strcmp>

00027d10 <CString::Find(char) const>:
   27d10:	e5902004 	ldr	r2, [r0, #4]
   27d14:	e1d230d0 	ldrsb	r3, [r2]
   27d18:	e3530000 	cmp	r3, #0
   27d1c:	0a000009 	beq	27d48 <CString::Find(char) const+0x38>
   27d20:	e1510003 	cmp	r1, r3
   27d24:	e3a00000 	mov	r0, #0
   27d28:	1a000002 	bne	27d38 <CString::Find(char) const+0x28>
   27d2c:	ea000007 	b	27d50 <CString::Find(char) const+0x40>
   27d30:	e1530001 	cmp	r3, r1
   27d34:	012fff1e 	bxeq	lr
   27d38:	e1f230d1 	ldrsb	r3, [r2, #1]!
   27d3c:	e2800001 	add	r0, r0, #1
   27d40:	e3530000 	cmp	r3, #0
   27d44:	1afffff9 	bne	27d30 <CString::Find(char) const+0x20>
   27d48:	e3e00000 	mvn	r0, #0
   27d4c:	e12fff1e 	bx	lr
   27d50:	e12fff1e 	bx	lr

00027d54 <CString::PutChar(char, unsigned int)>:
   27d54:	e92d4070 	push	{r4, r5, r6, lr}
   27d58:	e2524000 	subs	r4, r2, #0
   27d5c:	08bd8070 	popeq	{r4, r5, r6, pc}
   27d60:	e1a06001 	mov	r6, r1
   27d64:	e1a01004 	mov	r1, r4
   27d68:	e1a05000 	mov	r5, r0
   27d6c:	ebffff62 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27d70:	e2443001 	sub	r3, r4, #1
   27d74:	e595200c 	ldr	r2, [r5, #12]
   27d78:	e2433001 	sub	r3, r3, #1
   27d7c:	e2820001 	add	r0, r2, #1
   27d80:	e3730001 	cmn	r3, #1
   27d84:	e585000c 	str	r0, [r5, #12]
   27d88:	e5c26000 	strb	r6, [r2]
   27d8c:	1afffff8 	bne	27d74 <CString::PutChar(char, unsigned int)+0x20>
   27d90:	e8bd8070 	pop	{r4, r5, r6, pc}

00027d94 <CString::PutString(char const*)>:
   27d94:	e92d4070 	push	{r4, r5, r6, lr}
   27d98:	e1a04000 	mov	r4, r0
   27d9c:	e1a00001 	mov	r0, r1
   27da0:	e1a05001 	mov	r5, r1
   27da4:	eb0008b4 	bl	2a07c <strlen>
   27da8:	e2506000 	subs	r6, r0, #0
   27dac:	0a000002 	beq	27dbc <CString::PutString(char const*)+0x28>
   27db0:	e1a01006 	mov	r1, r6
   27db4:	e1a00004 	mov	r0, r4
   27db8:	ebffff4f 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27dbc:	e1a01005 	mov	r1, r5
   27dc0:	e594000c 	ldr	r0, [r4, #12]
   27dc4:	eb00096a 	bl	2a374 <strcpy>
   27dc8:	e594100c 	ldr	r1, [r4, #12]
   27dcc:	e0811006 	add	r1, r1, r6
   27dd0:	e584100c 	str	r1, [r4, #12]
   27dd4:	e8bd8070 	pop	{r4, r5, r6, pc}

00027dd8 <CString::Replace(char const*, char const*)>:
   27dd8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ddc:	e1d180d0 	ldrsb	r8, [r1]
   27de0:	e24dd014 	sub	sp, sp, #20
   27de4:	e3580000 	cmp	r8, #0
   27de8:	1a000002 	bne	27df8 <CString::Replace(char const*, char const*)+0x20>
   27dec:	e1a00008 	mov	r0, r8
   27df0:	e28dd014 	add	sp, sp, #20
   27df4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27df8:	e1a0a000 	mov	sl, r0
   27dfc:	e1a07001 	mov	r7, r1
   27e00:	e5901004 	ldr	r1, [r0, #4]
   27e04:	e1a0000d 	mov	r0, sp
   27e08:	e1a09002 	mov	r9, r2
   27e0c:	ebffff5a 	bl	27b7c <CString::CString(char const*)>
   27e10:	e59a0004 	ldr	r0, [sl, #4]
   27e14:	e3500000 	cmp	r0, #0
   27e18:	0a000000 	beq	27e20 <CString::Replace(char const*, char const*)+0x48>
   27e1c:	eb000c9c 	bl	2b094 <operator delete[](void*)>
   27e20:	e3a00040 	mov	r0, #64	; 0x40
   27e24:	e58a0008 	str	r0, [sl, #8]
   27e28:	eb000c92 	bl	2b078 <operator new[](unsigned int)>
   27e2c:	e3a08000 	mov	r8, #0
   27e30:	e3a06001 	mov	r6, #1
   27e34:	e59d4004 	ldr	r4, [sp, #4]
   27e38:	e58a0004 	str	r0, [sl, #4]
   27e3c:	e58a000c 	str	r0, [sl, #12]
   27e40:	e1d710d0 	ldrsb	r1, [r7]
   27e44:	e1a00004 	mov	r0, r4
   27e48:	eb000978 	bl	2a430 <strchr>
   27e4c:	e2505000 	subs	r5, r0, #0
   27e50:	0a00002d 	beq	27f0c <CString::Replace(char const*, char const*)+0x134>
   27e54:	e1540005 	cmp	r4, r5
   27e58:	2a000039 	bcs	27f44 <CString::Replace(char const*, char const*)+0x16c>
   27e5c:	e1a01006 	mov	r1, r6
   27e60:	e1a0000a 	mov	r0, sl
   27e64:	e0d4b0d1 	ldrsb	fp, [r4], #1
   27e68:	ebffff23 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27e6c:	e59a300c 	ldr	r3, [sl, #12]
   27e70:	e1550004 	cmp	r5, r4
   27e74:	e2832001 	add	r2, r3, #1
   27e78:	e58a200c 	str	r2, [sl, #12]
   27e7c:	e5c3b000 	strb	fp, [r3]
   27e80:	1afffff5 	bne	27e5c <CString::Replace(char const*, char const*)+0x84>
   27e84:	e1a0c005 	mov	ip, r5
   27e88:	e2854001 	add	r4, r5, #1
   27e8c:	e1d730d1 	ldrsb	r3, [r7, #1]
   27e90:	e2871001 	add	r1, r7, #1
   27e94:	e3530000 	cmp	r3, #0
   27e98:	0a00000c 	beq	27ed0 <CString::Replace(char const*, char const*)+0xf8>
   27e9c:	e1d520d1 	ldrsb	r2, [r5, #1]
   27ea0:	e1520003 	cmp	r2, r3
   27ea4:	1a00000e 	bne	27ee4 <CString::Replace(char const*, char const*)+0x10c>
   27ea8:	e2853002 	add	r3, r5, #2
   27eac:	ea000003 	b	27ec0 <CString::Replace(char const*, char const*)+0xe8>
   27eb0:	e1d400d0 	ldrsb	r0, [r4]
   27eb4:	e2833001 	add	r3, r3, #1
   27eb8:	e1500002 	cmp	r0, r2
   27ebc:	1a000008 	bne	27ee4 <CString::Replace(char const*, char const*)+0x10c>
   27ec0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   27ec4:	e1a04003 	mov	r4, r3
   27ec8:	e3520000 	cmp	r2, #0
   27ecc:	1afffff7 	bne	27eb0 <CString::Replace(char const*, char const*)+0xd8>
   27ed0:	e1a01009 	mov	r1, r9
   27ed4:	e1a0000a 	mov	r0, sl
   27ed8:	e2888001 	add	r8, r8, #1
   27edc:	ebffffac 	bl	27d94 <CString::PutString(char const*)>
   27ee0:	eaffffd6 	b	27e40 <CString::Replace(char const*, char const*)+0x68>
   27ee4:	e1a01006 	mov	r1, r6
   27ee8:	e1a0000a 	mov	r0, sl
   27eec:	e1dc50d0 	ldrsb	r5, [ip]
   27ef0:	e28c4001 	add	r4, ip, #1
   27ef4:	ebffff00 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   27ef8:	e59a300c 	ldr	r3, [sl, #12]
   27efc:	e2832001 	add	r2, r3, #1
   27f00:	e58a200c 	str	r2, [sl, #12]
   27f04:	e5c35000 	strb	r5, [r3]
   27f08:	eaffffcc 	b	27e40 <CString::Replace(char const*, char const*)+0x68>
   27f0c:	e1a0000a 	mov	r0, sl
   27f10:	e1a01004 	mov	r1, r4
   27f14:	ebffff9e 	bl	27d94 <CString::PutString(char const*)>
   27f18:	e59a200c 	ldr	r2, [sl, #12]
   27f1c:	e59f302c 	ldr	r3, [pc, #44]	; 27f50 <CString::Replace(char const*, char const*)+0x178>
   27f20:	e5c25000 	strb	r5, [r2]
   27f24:	e59d0004 	ldr	r0, [sp, #4]
   27f28:	e58d3000 	str	r3, [sp]
   27f2c:	e3500000 	cmp	r0, #0
   27f30:	0affffad 	beq	27dec <CString::Replace(char const*, char const*)+0x14>
   27f34:	eb000c56 	bl	2b094 <operator delete[](void*)>
   27f38:	e1a00008 	mov	r0, r8
   27f3c:	e28dd014 	add	sp, sp, #20
   27f40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f44:	e1a0c004 	mov	ip, r4
   27f48:	e2854001 	add	r4, r5, #1
   27f4c:	eaffffce 	b	27e8c <CString::Replace(char const*, char const*)+0xb4>
   27f50:	000456b4 	.word	0x000456b4

00027f54 <CString::ReserveSpace(unsigned int)>:
   27f54:	e3510000 	cmp	r1, #0
   27f58:	012fff1e 	bxeq	lr
   27f5c:	eafffee6 	b	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>

00027f60 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   27f60:	e1510002 	cmp	r1, r2
   27f64:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27f68:	e1a05001 	mov	r5, r1
   27f6c:	e1a07002 	mov	r7, r2
   27f70:	e1a09000 	mov	r9, r0
   27f74:	e1a08003 	mov	r8, r3
   27f78:	23a0a001 	movcs	sl, #1
   27f7c:	3a000022 	bcc	2800c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0xac>
   27f80:	e00a0a97 	mul	sl, r7, sl
   27f84:	e1a00005 	mov	r0, r5
   27f88:	e1a0100a 	mov	r1, sl
   27f8c:	eb00573e 	bl	3dc8c <__aeabi_uidiv>
   27f90:	e1500007 	cmp	r0, r7
   27f94:	e1a04000 	mov	r4, r0
   27f98:	2afffff8 	bcs	27f80 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x20>
   27f9c:	e3580000 	cmp	r8, #0
   27fa0:	13a08037 	movne	r8, #55	; 0x37
   27fa4:	03a08057 	moveq	r8, #87	; 0x57
   27fa8:	e1a06009 	mov	r6, r9
   27fac:	ea000003 	b	27fc0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x60>
   27fb0:	e1a0100a 	mov	r1, sl
   27fb4:	e1a00005 	mov	r0, r5
   27fb8:	eb005733 	bl	3dc8c <__aeabi_uidiv>
   27fbc:	e1a04000 	mov	r4, r0
   27fc0:	e1a00005 	mov	r0, r5
   27fc4:	e1a0100a 	mov	r1, sl
   27fc8:	eb00576c 	bl	3dd80 <__aeabi_uidivmod>
   27fcc:	e3540009 	cmp	r4, #9
   27fd0:	e2843030 	add	r3, r4, #48	; 0x30
   27fd4:	80884004 	addhi	r4, r8, r4
   27fd8:	96af4073 	sxtbls	r4, r3
   27fdc:	86af4074 	sxtbhi	r4, r4
   27fe0:	e2866001 	add	r6, r6, #1
   27fe4:	e1a0000a 	mov	r0, sl
   27fe8:	e1a05001 	mov	r5, r1
   27fec:	e5464001 	strb	r4, [r6, #-1]
   27ff0:	e1a01007 	mov	r1, r7
   27ff4:	eb005724 	bl	3dc8c <__aeabi_uidiv>
   27ff8:	e250a000 	subs	sl, r0, #0
   27ffc:	1affffeb 	bne	27fb0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
   28000:	e5c6a000 	strb	sl, [r6]
   28004:	e1a00009 	mov	r0, r9
   28008:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2800c:	e1a04001 	mov	r4, r1
   28010:	e3a0a001 	mov	sl, #1
   28014:	eaffffe0 	b	27f9c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>

00028018 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   28018:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2801c:	e3a0b000 	mov	fp, #0
   28020:	e24dd014 	sub	sp, sp, #20
   28024:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   28028:	e153000b 	cmp	r3, fp
   2802c:	e1a07003 	mov	r7, r3
   28030:	e5dd303c 	ldrb	r3, [sp, #60]	; 0x3c
   28034:	01520001 	cmpeq	r2, r1
   28038:	e1a06002 	mov	r6, r2
   2803c:	e1a0a001 	mov	sl, r1
   28040:	e58d000c 	str	r0, [sp, #12]
   28044:	e58d3000 	str	r3, [sp]
   28048:	23a04001 	movcs	r4, #1
   2804c:	23a05000 	movcs	r5, #0
   28050:	3a00003a 	bcc	28140 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x128>
   28054:	e0030b94 	mul	r3, r4, fp
   28058:	e023359a 	mla	r3, sl, r5, r3
   2805c:	e0854a94 	umull	r4, r5, r4, sl
   28060:	e0835005 	add	r5, r3, r5
   28064:	e1a02004 	mov	r2, r4
   28068:	e1a03005 	mov	r3, r5
   2806c:	e1a00006 	mov	r0, r6
   28070:	e1a01007 	mov	r1, r7
   28074:	eb00579c 	bl	3deec <__aeabi_uldivmod>
   28078:	e151000b 	cmp	r1, fp
   2807c:	0150000a 	cmpeq	r0, sl
   28080:	e1a08000 	mov	r8, r0
   28084:	e1a09001 	mov	r9, r1
   28088:	2afffff1 	bcs	28054 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x3c>
   2808c:	e59d3000 	ldr	r3, [sp]
   28090:	e1cda0f0 	strd	sl, [sp]
   28094:	e3530000 	cmp	r3, #0
   28098:	13a03037 	movne	r3, #55	; 0x37
   2809c:	03a03057 	moveq	r3, #87	; 0x57
   280a0:	e58d3008 	str	r3, [sp, #8]
   280a4:	e59d300c 	ldr	r3, [sp, #12]
   280a8:	e1a0b003 	mov	fp, r3
   280ac:	ea000006 	b	280cc <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0xb4>
   280b0:	e1a02000 	mov	r2, r0
   280b4:	e1a03001 	mov	r3, r1
   280b8:	e1a00006 	mov	r0, r6
   280bc:	e1a01007 	mov	r1, r7
   280c0:	eb005789 	bl	3deec <__aeabi_uldivmod>
   280c4:	e1a08000 	mov	r8, r0
   280c8:	e1a09001 	mov	r9, r1
   280cc:	e1a00006 	mov	r0, r6
   280d0:	e1a01007 	mov	r1, r7
   280d4:	e1a02004 	mov	r2, r4
   280d8:	e1a03005 	mov	r3, r5
   280dc:	eb005782 	bl	3deec <__aeabi_uldivmod>
   280e0:	e3590000 	cmp	r9, #0
   280e4:	03580009 	cmpeq	r8, #9
   280e8:	e1a07003 	mov	r7, r3
   280ec:	e2883030 	add	r3, r8, #48	; 0x30
   280f0:	859d3008 	ldrhi	r3, [sp, #8]
   280f4:	96af8073 	sxtbls	r8, r3
   280f8:	80838008 	addhi	r8, r3, r8
   280fc:	86af8078 	sxtbhi	r8, r8
   28100:	e28bb001 	add	fp, fp, #1
   28104:	e1a00004 	mov	r0, r4
   28108:	e1a01005 	mov	r1, r5
   2810c:	e1a06002 	mov	r6, r2
   28110:	e1cd20d0 	ldrd	r2, [sp]
   28114:	e54b8001 	strb	r8, [fp, #-1]
   28118:	eb005773 	bl	3deec <__aeabi_uldivmod>
   2811c:	e1a04000 	mov	r4, r0
   28120:	e1a05001 	mov	r5, r1
   28124:	e1943005 	orrs	r3, r4, r5
   28128:	1affffe0 	bne	280b0 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x98>
   2812c:	e3a03000 	mov	r3, #0
   28130:	e59d000c 	ldr	r0, [sp, #12]
   28134:	e5cb3000 	strb	r3, [fp]
   28138:	e28dd014 	add	sp, sp, #20
   2813c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28140:	e1a08002 	mov	r8, r2
   28144:	e1a09007 	mov	r9, r7
   28148:	e3a04001 	mov	r4, #1
   2814c:	e3a05000 	mov	r5, #0
   28150:	eaffffcd 	b	2808c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x74>

00028154 <CString::ftoa(char*, double, unsigned int)>:
   28154:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28158:	ed2d8b02 	vpush	{d8}
   2815c:	ec432b18 	vmov	d8, r2, r3
   28160:	eeb58bc0 	vcmpe.f64	d8, #0.0
   28164:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   28168:	ed9f7b92 	vldr	d7, [pc, #584]	; 283b8 <CString::ftoa(char*, double, unsigned int)+0x264>
   2816c:	4eb18b48 	vnegmi.f64	d8, d8
   28170:	43a0302d 	movmi	r3, #45	; 0x2d
   28174:	eeb48bc7 	vcmpe.f64	d8, d7
   28178:	45c03000 	strbmi	r3, [r0]
   2817c:	4280b001 	addmi	fp, r0, #1
   28180:	51a0b000 	movpl	fp, r0
   28184:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   28188:	e24dd01c 	sub	sp, sp, #28
   2818c:	e1a0a000 	mov	sl, r0
   28190:	ca000079 	bgt	2837c <CString::ftoa(char*, double, unsigned int)+0x228>
   28194:	eefc7bc8 	vcvt.u32.f64	s15, d8
   28198:	ee177a90 	vmov	r7, s15
   2819c:	e3570009 	cmp	r7, #9
   281a0:	83a04001 	movhi	r4, #1
   281a4:	9a00007b 	bls	28398 <CString::ftoa(char*, double, unsigned int)+0x244>
   281a8:	e0844104 	add	r4, r4, r4, lsl #2
   281ac:	e1a04084 	lsl	r4, r4, #1
   281b0:	e1a01004 	mov	r1, r4
   281b4:	e1a00007 	mov	r0, r7
   281b8:	eb0056b3 	bl	3dc8c <__aeabi_uidiv>
   281bc:	e3500009 	cmp	r0, #9
   281c0:	e1a05000 	mov	r5, r0
   281c4:	8afffff7 	bhi	281a8 <CString::ftoa(char*, double, unsigned int)+0x54>
   281c8:	e1a0600b 	mov	r6, fp
   281cc:	e1a09007 	mov	r9, r7
   281d0:	e59f81f0 	ldr	r8, [pc, #496]	; 283c8 <CString::ftoa(char*, double, unsigned int)+0x274>
   281d4:	ea000003 	b	281e8 <CString::ftoa(char*, double, unsigned int)+0x94>
   281d8:	e1a01004 	mov	r1, r4
   281dc:	e1a00009 	mov	r0, r9
   281e0:	eb0056a9 	bl	3dc8c <__aeabi_uidiv>
   281e4:	e1a05000 	mov	r5, r0
   281e8:	e1a00009 	mov	r0, r9
   281ec:	e1a01004 	mov	r1, r4
   281f0:	eb0056e2 	bl	3dd80 <__aeabi_uidivmod>
   281f4:	e0843498 	umull	r3, r4, r8, r4
   281f8:	e3550009 	cmp	r5, #9
   281fc:	e2852030 	add	r2, r5, #48	; 0x30
   28200:	82855057 	addhi	r5, r5, #87	; 0x57
   28204:	96af5072 	sxtbls	r5, r2
   28208:	86af5075 	sxtbhi	r5, r5
   2820c:	e2866001 	add	r6, r6, #1
   28210:	e1b041a4 	lsrs	r4, r4, #3
   28214:	e1a09001 	mov	r9, r1
   28218:	e5465001 	strb	r5, [r6, #-1]
   2821c:	1affffed 	bne	281d8 <CString::ftoa(char*, double, unsigned int)+0x84>
   28220:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
   28224:	e5c64000 	strb	r4, [r6]
   28228:	e3530000 	cmp	r3, #0
   2822c:	1a000003 	bne	28240 <CString::ftoa(char*, double, unsigned int)+0xec>
   28230:	e1a0000a 	mov	r0, sl
   28234:	e28dd01c 	add	sp, sp, #28
   28238:	ecbd8b02 	vpop	{d8}
   2823c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28240:	e1a0000b 	mov	r0, fp
   28244:	eb00078c 	bl	2a07c <strlen>
   28248:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
   2824c:	e08b2000 	add	r2, fp, r0
   28250:	e3530009 	cmp	r3, #9
   28254:	31a09003 	movcc	r9, r3
   28258:	23a09009 	movcs	r9, #9
   2825c:	e3a0302e 	mov	r3, #46	; 0x2e
   28260:	e3590001 	cmp	r9, #1
   28264:	e7cb3000 	strb	r3, [fp, r0]
   28268:	e58d2004 	str	r2, [sp, #4]
   2826c:	e282b001 	add	fp, r2, #1
   28270:	0a00004e 	beq	283b0 <CString::ftoa(char*, double, unsigned int)+0x25c>
   28274:	e3a02002 	mov	r2, #2
   28278:	e3a0300a 	mov	r3, #10
   2827c:	e2822001 	add	r2, r2, #1
   28280:	e0833103 	add	r3, r3, r3, lsl #2
   28284:	e1520009 	cmp	r2, r9
   28288:	e1a03083 	lsl	r3, r3, #1
   2828c:	9afffffa 	bls	2827c <CString::ftoa(char*, double, unsigned int)+0x128>
   28290:	ee073a90 	vmov	s15, r3
   28294:	eeb87b67 	vcvt.f64.u32	d7, s15
   28298:	ee067a90 	vmov	s13, r7
   2829c:	eeb86b66 	vcvt.f64.u32	d6, s13
   282a0:	ee386b46 	vsub.f64	d6, d8, d6
   282a4:	ee267b07 	vmul.f64	d7, d6, d7
   282a8:	eefc7bc7 	vcvt.u32.f64	s15, d7
   282ac:	ee178a90 	vmov	r8, s15
   282b0:	e3580009 	cmp	r8, #9
   282b4:	83a04001 	movhi	r4, #1
   282b8:	9a000039 	bls	283a4 <CString::ftoa(char*, double, unsigned int)+0x250>
   282bc:	e0844104 	add	r4, r4, r4, lsl #2
   282c0:	e1a04084 	lsl	r4, r4, #1
   282c4:	e1a01004 	mov	r1, r4
   282c8:	e1a00008 	mov	r0, r8
   282cc:	eb00566e 	bl	3dc8c <__aeabi_uidiv>
   282d0:	e3500009 	cmp	r0, #9
   282d4:	e1a05000 	mov	r5, r0
   282d8:	8afffff7 	bhi	282bc <CString::ftoa(char*, double, unsigned int)+0x168>
   282dc:	e28d600c 	add	r6, sp, #12
   282e0:	e59f70e0 	ldr	r7, [pc, #224]	; 283c8 <CString::ftoa(char*, double, unsigned int)+0x274>
   282e4:	ea000003 	b	282f8 <CString::ftoa(char*, double, unsigned int)+0x1a4>
   282e8:	e1a01004 	mov	r1, r4
   282ec:	e1a00008 	mov	r0, r8
   282f0:	eb005665 	bl	3dc8c <__aeabi_uidiv>
   282f4:	e1a05000 	mov	r5, r0
   282f8:	e1a00008 	mov	r0, r8
   282fc:	e1a01004 	mov	r1, r4
   28300:	eb00569e 	bl	3dd80 <__aeabi_uidivmod>
   28304:	e0843497 	umull	r3, r4, r7, r4
   28308:	e3550009 	cmp	r5, #9
   2830c:	e2852030 	add	r2, r5, #48	; 0x30
   28310:	82855057 	addhi	r5, r5, #87	; 0x57
   28314:	96af5072 	sxtbls	r5, r2
   28318:	86af5075 	sxtbhi	r5, r5
   2831c:	e2866001 	add	r6, r6, #1
   28320:	e1b041a4 	lsrs	r4, r4, #3
   28324:	e1a08001 	mov	r8, r1
   28328:	e5465001 	strb	r5, [r6, #-1]
   2832c:	1affffed 	bne	282e8 <CString::ftoa(char*, double, unsigned int)+0x194>
   28330:	e28d000c 	add	r0, sp, #12
   28334:	e5c64000 	strb	r4, [r6]
   28338:	eb00074f 	bl	2a07c <strlen>
   2833c:	e0599000 	subs	r9, r9, r0
   28340:	0a000006 	beq	28360 <CString::ftoa(char*, double, unsigned int)+0x20c>
   28344:	e3a02030 	mov	r2, #48	; 0x30
   28348:	e59d8004 	ldr	r8, [sp, #4]
   2834c:	e0883009 	add	r3, r8, r9
   28350:	e5e82001 	strb	r2, [r8, #1]!
   28354:	e1580003 	cmp	r8, r3
   28358:	1afffffc 	bne	28350 <CString::ftoa(char*, double, unsigned int)+0x1fc>
   2835c:	e08bb009 	add	fp, fp, r9
   28360:	e28d100c 	add	r1, sp, #12
   28364:	e1a0000b 	mov	r0, fp
   28368:	eb000801 	bl	2a374 <strcpy>
   2836c:	e1a0000a 	mov	r0, sl
   28370:	e28dd01c 	add	sp, sp, #28
   28374:	ecbd8b02 	vpop	{d8}
   28378:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2837c:	e1a0000b 	mov	r0, fp
   28380:	e59f1044 	ldr	r1, [pc, #68]	; 283cc <CString::ftoa(char*, double, unsigned int)+0x278>
   28384:	eb0007fa 	bl	2a374 <strcpy>
   28388:	e1a0000a 	mov	r0, sl
   2838c:	e28dd01c 	add	sp, sp, #28
   28390:	ecbd8b02 	vpop	{d8}
   28394:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28398:	ee175a90 	vmov	r5, s15
   2839c:	e3a04001 	mov	r4, #1
   283a0:	eaffff88 	b	281c8 <CString::ftoa(char*, double, unsigned int)+0x74>
   283a4:	ee175a90 	vmov	r5, s15
   283a8:	e3a04001 	mov	r4, #1
   283ac:	eaffffca 	b	282dc <CString::ftoa(char*, double, unsigned int)+0x188>
   283b0:	ed9f7b02 	vldr	d7, [pc, #8]	; 283c0 <CString::ftoa(char*, double, unsigned int)+0x26c>
   283b4:	eaffffb7 	b	28298 <CString::ftoa(char*, double, unsigned int)+0x144>
   283b8:	ffe00000 	.word	0xffe00000
   283bc:	41efffff 	.word	0x41efffff
   283c0:	00000000 	.word	0x00000000
   283c4:	40240000 	.word	0x40240000
   283c8:	cccccccd 	.word	0xcccccccd
   283cc:	000456bc 	.word	0x000456bc

000283d0 <CString::FormatV(char const*, std::__va_list)>:
   283d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   283d4:	e24dd064 	sub	sp, sp, #100	; 0x64
   283d8:	e58d000c 	str	r0, [sp, #12]
   283dc:	e5900004 	ldr	r0, [r0, #4]
   283e0:	e1a09001 	mov	r9, r1
   283e4:	e3500000 	cmp	r0, #0
   283e8:	e58d2018 	str	r2, [sp, #24]
   283ec:	0a000000 	beq	283f4 <CString::FormatV(char const*, std::__va_list)+0x24>
   283f0:	eb000b27 	bl	2b094 <operator delete[](void*)>
   283f4:	e3a00040 	mov	r0, #64	; 0x40
   283f8:	e59d400c 	ldr	r4, [sp, #12]
   283fc:	e1a05009 	mov	r5, r9
   28400:	e5840008 	str	r0, [r4, #8]
   28404:	eb000b1b 	bl	2b078 <operator new[](unsigned int)>
   28408:	e1a03004 	mov	r3, r4
   2840c:	e5840004 	str	r0, [r4, #4]
   28410:	e584000c 	str	r0, [r4, #12]
   28414:	e1d540d0 	ldrsb	r4, [r5]
   28418:	e3540000 	cmp	r4, #0
   2841c:	0a00009f 	beq	286a0 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   28420:	e3540025 	cmp	r4, #37	; 0x25
   28424:	1a0001d7 	bne	28b88 <CString::FormatV(char const*, std::__va_list)+0x7b8>
   28428:	e1d560d1 	ldrsb	r6, [r5, #1]
   2842c:	e3560025 	cmp	r6, #37	; 0x25
   28430:	0a0001f5 	beq	28c0c <CString::FormatV(char const*, std::__va_list)+0x83c>
   28434:	e3560023 	cmp	r6, #35	; 0x23
   28438:	01d560d2 	ldrsbeq	r6, [r5, #2]
   2843c:	12855001 	addne	r5, r5, #1
   28440:	02855002 	addeq	r5, r5, #2
   28444:	13a02000 	movne	r2, #0
   28448:	03a02001 	moveq	r2, #1
   2844c:	e356002d 	cmp	r6, #45	; 0x2d
   28450:	03a03001 	moveq	r3, #1
   28454:	13a03000 	movne	r3, #0
   28458:	01d560d1 	ldrsbeq	r6, [r5, #1]
   2845c:	058d301c 	streq	r3, [sp, #28]
   28460:	00855003 	addeq	r5, r5, r3
   28464:	158d301c 	strne	r3, [sp, #28]
   28468:	e3560030 	cmp	r6, #48	; 0x30
   2846c:	03a03001 	moveq	r3, #1
   28470:	13a03000 	movne	r3, #0
   28474:	01d560d1 	ldrsbeq	r6, [r5, #1]
   28478:	058d3024 	streq	r3, [sp, #36]	; 0x24
   2847c:	00855003 	addeq	r5, r5, r3
   28480:	158d3024 	strne	r3, [sp, #36]	; 0x24
   28484:	e2463030 	sub	r3, r6, #48	; 0x30
   28488:	e6ef3073 	uxtb	r3, r3
   2848c:	e3530009 	cmp	r3, #9
   28490:	e3a04000 	mov	r4, #0
   28494:	8a000007 	bhi	284b8 <CString::FormatV(char const*, std::__va_list)+0xe8>
   28498:	e0844104 	add	r4, r4, r4, lsl #2
   2849c:	e0864084 	add	r4, r6, r4, lsl #1
   284a0:	e1f560d1 	ldrsb	r6, [r5, #1]!
   284a4:	e2444030 	sub	r4, r4, #48	; 0x30
   284a8:	e2463030 	sub	r3, r6, #48	; 0x30
   284ac:	e6ef3073 	uxtb	r3, r3
   284b0:	e3530009 	cmp	r3, #9
   284b4:	9afffff7 	bls	28498 <CString::FormatV(char const*, std::__va_list)+0xc8>
   284b8:	e356002e 	cmp	r6, #46	; 0x2e
   284bc:	0a0001c2 	beq	28bcc <CString::FormatV(char const*, std::__va_list)+0x7fc>
   284c0:	e3a01006 	mov	r1, #6
   284c4:	e1d5a0d0 	ldrsb	sl, [r5]
   284c8:	e35a006c 	cmp	sl, #108	; 0x6c
   284cc:	13a06000 	movne	r6, #0
   284d0:	0a0001b5 	beq	28bac <CString::FormatV(char const*, std::__va_list)+0x7dc>
   284d4:	e24a3058 	sub	r3, sl, #88	; 0x58
   284d8:	e3530020 	cmp	r3, #32
   284dc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   284e0:	ea000196 	b	28b40 <CString::FormatV(char const*, std::__va_list)+0x770>
   284e4:	00028b10 	.word	0x00028b10
   284e8:	00028b40 	.word	0x00028b40
   284ec:	00028b40 	.word	0x00028b40
   284f0:	00028b40 	.word	0x00028b40
   284f4:	00028b40 	.word	0x00028b40
   284f8:	00028b40 	.word	0x00028b40
   284fc:	00028b40 	.word	0x00028b40
   28500:	00028b40 	.word	0x00028b40
   28504:	00028b40 	.word	0x00028b40
   28508:	00028b40 	.word	0x00028b40
   2850c:	00028b40 	.word	0x00028b40
   28510:	00028a90 	.word	0x00028a90
   28514:	000287bc 	.word	0x000287bc
   28518:	00028b40 	.word	0x00028b40
   2851c:	00028730 	.word	0x00028730
   28520:	00028b40 	.word	0x00028b40
   28524:	00028b40 	.word	0x00028b40
   28528:	000287bc 	.word	0x000287bc
   2852c:	00028b40 	.word	0x00028b40
   28530:	00028b40 	.word	0x00028b40
   28534:	00028b40 	.word	0x00028b40
   28538:	00028b40 	.word	0x00028b40
   2853c:	00028b40 	.word	0x00028b40
   28540:	000288f0 	.word	0x000288f0
   28544:	00028b10 	.word	0x00028b10
   28548:	00028b40 	.word	0x00028b40
   2854c:	00028b40 	.word	0x00028b40
   28550:	000286b4 	.word	0x000286b4
   28554:	00028b40 	.word	0x00028b40
   28558:	00028568 	.word	0x00028568
   2855c:	00028b40 	.word	0x00028b40
   28560:	00028b40 	.word	0x00028b40
   28564:	00028b10 	.word	0x00028b10
   28568:	e3a0700a 	mov	r7, #10
   2856c:	e3560000 	cmp	r6, #0
   28570:	1a0000ee 	bne	28930 <CString::FormatV(char const*, std::__va_list)+0x560>
   28574:	e59d3018 	ldr	r3, [sp, #24]
   28578:	e5936000 	ldr	r6, [r3]
   2857c:	e2833004 	add	r3, r3, #4
   28580:	e1570006 	cmp	r7, r6
   28584:	e58d3018 	str	r3, [sp, #24]
   28588:	93a0b001 	movls	fp, #1
   2858c:	8a000298 	bhi	28ff4 <CString::FormatV(char const*, std::__va_list)+0xc24>
   28590:	e00b0b97 	mul	fp, r7, fp
   28594:	e1a00006 	mov	r0, r6
   28598:	e1a0100b 	mov	r1, fp
   2859c:	eb0055ba 	bl	3dc8c <__aeabi_uidiv>
   285a0:	e1570000 	cmp	r7, r0
   285a4:	9afffff9 	bls	28590 <CString::FormatV(char const*, std::__va_list)+0x1c0>
   285a8:	e1a09000 	mov	r9, r0
   285ac:	e28d303c 	add	r3, sp, #60	; 0x3c
   285b0:	e35a0058 	cmp	sl, #88	; 0x58
   285b4:	e58d3020 	str	r3, [sp, #32]
   285b8:	13a0a057 	movne	sl, #87	; 0x57
   285bc:	03a0a037 	moveq	sl, #55	; 0x37
   285c0:	e1a08003 	mov	r8, r3
   285c4:	ea000003 	b	285d8 <CString::FormatV(char const*, std::__va_list)+0x208>
   285c8:	e1a0100b 	mov	r1, fp
   285cc:	e1a00006 	mov	r0, r6
   285d0:	eb0055ad 	bl	3dc8c <__aeabi_uidiv>
   285d4:	e1a09000 	mov	r9, r0
   285d8:	e1a00006 	mov	r0, r6
   285dc:	e1a0100b 	mov	r1, fp
   285e0:	eb0055e6 	bl	3dd80 <__aeabi_uidivmod>
   285e4:	e3590009 	cmp	r9, #9
   285e8:	e2893030 	add	r3, r9, #48	; 0x30
   285ec:	808a9009 	addhi	r9, sl, r9
   285f0:	96af9073 	sxtbls	r9, r3
   285f4:	86af9079 	sxtbhi	r9, r9
   285f8:	e2888001 	add	r8, r8, #1
   285fc:	e1a0000b 	mov	r0, fp
   28600:	e1a06001 	mov	r6, r1
   28604:	e5489001 	strb	r9, [r8, #-1]
   28608:	e1a01007 	mov	r1, r7
   2860c:	eb00559e 	bl	3dc8c <__aeabi_uidiv>
   28610:	e250b000 	subs	fp, r0, #0
   28614:	1affffeb 	bne	285c8 <CString::FormatV(char const*, std::__va_list)+0x1f8>
   28618:	e5c8b000 	strb	fp, [r8]
   2861c:	e59d0020 	ldr	r0, [sp, #32]
   28620:	eb000695 	bl	2a07c <strlen>
   28624:	e59d301c 	ldr	r3, [sp, #28]
   28628:	e1a06000 	mov	r6, r0
   2862c:	e3530000 	cmp	r3, #0
   28630:	1a00017f 	bne	28c34 <CString::FormatV(char const*, std::__va_list)+0x864>
   28634:	e1500004 	cmp	r0, r4
   28638:	2a000011 	bcs	28684 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   2863c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28640:	e59d600c 	ldr	r6, [sp, #12]
   28644:	e0444000 	sub	r4, r4, r0
   28648:	e3530000 	cmp	r3, #0
   2864c:	e1a01004 	mov	r1, r4
   28650:	e1a00006 	mov	r0, r6
   28654:	03a07020 	moveq	r7, #32
   28658:	13a07030 	movne	r7, #48	; 0x30
   2865c:	ebfffd26 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28660:	e1a01006 	mov	r1, r6
   28664:	e2443001 	sub	r3, r4, #1
   28668:	e591200c 	ldr	r2, [r1, #12]
   2866c:	e2433001 	sub	r3, r3, #1
   28670:	e2820001 	add	r0, r2, #1
   28674:	e3730001 	cmn	r3, #1
   28678:	e581000c 	str	r0, [r1, #12]
   2867c:	e5c27000 	strb	r7, [r2]
   28680:	1afffff8 	bne	28668 <CString::FormatV(char const*, std::__va_list)+0x298>
   28684:	e59d1020 	ldr	r1, [sp, #32]
   28688:	e59d000c 	ldr	r0, [sp, #12]
   2868c:	ebfffdc0 	bl	27d94 <CString::PutString(char const*)>
   28690:	e2855001 	add	r5, r5, #1
   28694:	e1d540d0 	ldrsb	r4, [r5]
   28698:	e3540000 	cmp	r4, #0
   2869c:	1affff5f 	bne	28420 <CString::FormatV(char const*, std::__va_list)+0x50>
   286a0:	e59d300c 	ldr	r3, [sp, #12]
   286a4:	e593300c 	ldr	r3, [r3, #12]
   286a8:	e5c34000 	strb	r4, [r3]
   286ac:	e28dd064 	add	sp, sp, #100	; 0x64
   286b0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   286b4:	e59d3018 	ldr	r3, [sp, #24]
   286b8:	e5938000 	ldr	r8, [r3]
   286bc:	e2836004 	add	r6, r3, #4
   286c0:	e1a00008 	mov	r0, r8
   286c4:	eb00066c 	bl	2a07c <strlen>
   286c8:	e59d301c 	ldr	r3, [sp, #28]
   286cc:	e1a07000 	mov	r7, r0
   286d0:	e3530000 	cmp	r3, #0
   286d4:	1a0001fd 	bne	28ed0 <CString::FormatV(char const*, std::__va_list)+0xb00>
   286d8:	e1500004 	cmp	r0, r4
   286dc:	2a00000e 	bcs	2871c <CString::FormatV(char const*, std::__va_list)+0x34c>
   286e0:	e59d700c 	ldr	r7, [sp, #12]
   286e4:	e0444000 	sub	r4, r4, r0
   286e8:	e1a01004 	mov	r1, r4
   286ec:	e1a00007 	mov	r0, r7
   286f0:	ebfffd01 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   286f4:	e1a01007 	mov	r1, r7
   286f8:	e2443001 	sub	r3, r4, #1
   286fc:	e591200c 	ldr	r2, [r1, #12]
   28700:	e2433001 	sub	r3, r3, #1
   28704:	e2820001 	add	r0, r2, #1
   28708:	e581000c 	str	r0, [r1, #12]
   2870c:	e3a00020 	mov	r0, #32
   28710:	e3730001 	cmn	r3, #1
   28714:	e5c20000 	strb	r0, [r2]
   28718:	1afffff7 	bne	286fc <CString::FormatV(char const*, std::__va_list)+0x32c>
   2871c:	e1a01008 	mov	r1, r8
   28720:	e59d000c 	ldr	r0, [sp, #12]
   28724:	e58d6018 	str	r6, [sp, #24]
   28728:	ebfffd99 	bl	27d94 <CString::PutString(char const*)>
   2872c:	eaffffd7 	b	28690 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28730:	e28d003c 	add	r0, sp, #60	; 0x3c
   28734:	e1a06000 	mov	r6, r0
   28738:	e59d3018 	ldr	r3, [sp, #24]
   2873c:	e58d0020 	str	r0, [sp, #32]
   28740:	e283c007 	add	ip, r3, #7
   28744:	e3ccc007 	bic	ip, ip, #7
   28748:	e1cc20d0 	ldrd	r2, [ip]
   2874c:	e58d1000 	str	r1, [sp]
   28750:	e28c1008 	add	r1, ip, #8
   28754:	e58d1018 	str	r1, [sp, #24]
   28758:	ebfffe7d 	bl	28154 <CString::ftoa(char*, double, unsigned int)>
   2875c:	e1a00006 	mov	r0, r6
   28760:	eb000645 	bl	2a07c <strlen>
   28764:	e59d301c 	ldr	r3, [sp, #28]
   28768:	e1a06000 	mov	r6, r0
   2876c:	e3530000 	cmp	r3, #0
   28770:	1a0001eb 	bne	28f24 <CString::FormatV(char const*, std::__va_list)+0xb54>
   28774:	e1500004 	cmp	r0, r4
   28778:	2affffc1 	bcs	28684 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   2877c:	e59d600c 	ldr	r6, [sp, #12]
   28780:	e0444000 	sub	r4, r4, r0
   28784:	e1a01004 	mov	r1, r4
   28788:	e1a00006 	mov	r0, r6
   2878c:	ebfffcda 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28790:	e1a01006 	mov	r1, r6
   28794:	e2443001 	sub	r3, r4, #1
   28798:	e591200c 	ldr	r2, [r1, #12]
   2879c:	e2433001 	sub	r3, r3, #1
   287a0:	e2820001 	add	r0, r2, #1
   287a4:	e581000c 	str	r0, [r1, #12]
   287a8:	e3a00020 	mov	r0, #32
   287ac:	e3730001 	cmn	r3, #1
   287b0:	e5c20000 	strb	r0, [r2]
   287b4:	1afffff7 	bne	28798 <CString::FormatV(char const*, std::__va_list)+0x3c8>
   287b8:	eaffffb1 	b	28684 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   287bc:	e3560000 	cmp	r6, #0
   287c0:	e59d3018 	ldr	r3, [sp, #24]
   287c4:	1a00016a 	bne	28d74 <CString::FormatV(char const*, std::__va_list)+0x9a4>
   287c8:	e5936000 	ldr	r6, [r3]
   287cc:	e2833004 	add	r3, r3, #4
   287d0:	e3560000 	cmp	r6, #0
   287d4:	e58d3018 	str	r3, [sp, #24]
   287d8:	aa000208 	bge	29000 <CString::FormatV(char const*, std::__va_list)+0xc30>
   287dc:	e3a0b001 	mov	fp, #1
   287e0:	e2666000 	rsb	r6, r6, #0
   287e4:	e58db010 	str	fp, [sp, #16]
   287e8:	e3560009 	cmp	r6, #9
   287ec:	e1a07006 	mov	r7, r6
   287f0:	da000218 	ble	29058 <CString::FormatV(char const*, std::__va_list)+0xc88>
   287f4:	e3a08001 	mov	r8, #1
   287f8:	e0888108 	add	r8, r8, r8, lsl #2
   287fc:	e1a08088 	lsl	r8, r8, #1
   28800:	e1a01008 	mov	r1, r8
   28804:	e1a00006 	mov	r0, r6
   28808:	eb00551f 	bl	3dc8c <__aeabi_uidiv>
   2880c:	e3500009 	cmp	r0, #9
   28810:	8afffff8 	bhi	287f8 <CString::FormatV(char const*, std::__va_list)+0x428>
   28814:	e1a09000 	mov	r9, r0
   28818:	e28d303c 	add	r3, sp, #60	; 0x3c
   2881c:	e58d3020 	str	r3, [sp, #32]
   28820:	e1a06003 	mov	r6, r3
   28824:	ea000003 	b	28838 <CString::FormatV(char const*, std::__va_list)+0x468>
   28828:	e1a01008 	mov	r1, r8
   2882c:	e1a00007 	mov	r0, r7
   28830:	eb005515 	bl	3dc8c <__aeabi_uidiv>
   28834:	e1a09000 	mov	r9, r0
   28838:	e1a00007 	mov	r0, r7
   2883c:	e1a01008 	mov	r1, r8
   28840:	eb00554e 	bl	3dd80 <__aeabi_uidivmod>
   28844:	e3590009 	cmp	r9, #9
   28848:	e2893030 	add	r3, r9, #48	; 0x30
   2884c:	96af9073 	sxtbls	r9, r3
   28850:	e59f380c 	ldr	r3, [pc, #2060]	; 29064 <CString::FormatV(char const*, std::__va_list)+0xc94>
   28854:	82899057 	addhi	r9, r9, #87	; 0x57
   28858:	e0883893 	umull	r3, r8, r3, r8
   2885c:	86af9079 	sxtbhi	r9, r9
   28860:	e2866001 	add	r6, r6, #1
   28864:	e1b081a8 	lsrs	r8, r8, #3
   28868:	e1a07001 	mov	r7, r1
   2886c:	e5469001 	strb	r9, [r6, #-1]
   28870:	1affffec 	bne	28828 <CString::FormatV(char const*, std::__va_list)+0x458>
   28874:	e5c68000 	strb	r8, [r6]
   28878:	e59d0020 	ldr	r0, [sp, #32]
   2887c:	eb0005fe 	bl	2a07c <strlen>
   28880:	e59d301c 	ldr	r3, [sp, #28]
   28884:	e080b00b 	add	fp, r0, fp
   28888:	e3530000 	cmp	r3, #0
   2888c:	0a0000fd 	beq	28c88 <CString::FormatV(char const*, std::__va_list)+0x8b8>
   28890:	e59d3010 	ldr	r3, [sp, #16]
   28894:	e3530000 	cmp	r3, #0
   28898:	1a0001cb 	bne	28fcc <CString::FormatV(char const*, std::__va_list)+0xbfc>
   2889c:	e59d1020 	ldr	r1, [sp, #32]
   288a0:	e59d000c 	ldr	r0, [sp, #12]
   288a4:	ebfffd3a 	bl	27d94 <CString::PutString(char const*)>
   288a8:	e15b0004 	cmp	fp, r4
   288ac:	2affff77 	bcs	28690 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   288b0:	e59d600c 	ldr	r6, [sp, #12]
   288b4:	e044400b 	sub	r4, r4, fp
   288b8:	e1a01004 	mov	r1, r4
   288bc:	e1a00006 	mov	r0, r6
   288c0:	ebfffc8d 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   288c4:	e1a01006 	mov	r1, r6
   288c8:	e2443001 	sub	r3, r4, #1
   288cc:	e591200c 	ldr	r2, [r1, #12]
   288d0:	e2433001 	sub	r3, r3, #1
   288d4:	e2820001 	add	r0, r2, #1
   288d8:	e581000c 	str	r0, [r1, #12]
   288dc:	e3a00020 	mov	r0, #32
   288e0:	e3730001 	cmn	r3, #1
   288e4:	e5c20000 	strb	r0, [r2]
   288e8:	1afffff7 	bne	288cc <CString::FormatV(char const*, std::__va_list)+0x4fc>
   288ec:	eaffff67 	b	28690 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   288f0:	e3520000 	cmp	r2, #0
   288f4:	03a07008 	moveq	r7, #8
   288f8:	0affff1b 	beq	2856c <CString::FormatV(char const*, std::__va_list)+0x19c>
   288fc:	e59d700c 	ldr	r7, [sp, #12]
   28900:	e3a01001 	mov	r1, #1
   28904:	e1a00007 	mov	r0, r7
   28908:	ebfffc7b 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2890c:	e3a02030 	mov	r2, #48	; 0x30
   28910:	e597300c 	ldr	r3, [r7, #12]
   28914:	e3560000 	cmp	r6, #0
   28918:	e2831001 	add	r1, r3, #1
   2891c:	e587100c 	str	r1, [r7, #12]
   28920:	e5c32000 	strb	r2, [r3]
   28924:	e1d5a0d0 	ldrsb	sl, [r5]
   28928:	e3a07008 	mov	r7, #8
   2892c:	0affff10 	beq	28574 <CString::FormatV(char const*, std::__va_list)+0x1a4>
   28930:	e3a03000 	mov	r3, #0
   28934:	e1a01003 	mov	r1, r3
   28938:	e59d3018 	ldr	r3, [sp, #24]
   2893c:	e1a02007 	mov	r2, r7
   28940:	e2833007 	add	r3, r3, #7
   28944:	e3c33007 	bic	r3, r3, #7
   28948:	e1a00007 	mov	r0, r7
   2894c:	e1c360d0 	ldrd	r6, [r3]
   28950:	e1a08006 	mov	r8, r6
   28954:	e1a09007 	mov	r9, r7
   28958:	e1510007 	cmp	r1, r7
   2895c:	e2833008 	add	r3, r3, #8
   28960:	01520006 	cmpeq	r2, r6
   28964:	e1cd01f0 	strd	r0, [sp, #16]
   28968:	e1cd82f8 	strd	r8, [sp, #40]	; 0x28
   2896c:	e58d3018 	str	r3, [sp, #24]
   28970:	8a0001a5 	bhi	2900c <CString::FormatV(char const*, std::__va_list)+0xc3c>
   28974:	e58da020 	str	sl, [sp, #32]
   28978:	e58d4030 	str	r4, [sp, #48]	; 0x30
   2897c:	e58d5034 	str	r5, [sp, #52]	; 0x34
   28980:	e3a06001 	mov	r6, #1
   28984:	e3a07000 	mov	r7, #0
   28988:	e1a0a008 	mov	sl, r8
   2898c:	e1a0b009 	mov	fp, r9
   28990:	e1a04002 	mov	r4, r2
   28994:	e1a05001 	mov	r5, r1
   28998:	e0030596 	mul	r3, r6, r5
   2899c:	e0233794 	mla	r3, r4, r7, r3
   289a0:	e0876496 	umull	r6, r7, r6, r4
   289a4:	e0837007 	add	r7, r3, r7
   289a8:	e1a02006 	mov	r2, r6
   289ac:	e1a03007 	mov	r3, r7
   289b0:	e1a0000a 	mov	r0, sl
   289b4:	e1a0100b 	mov	r1, fp
   289b8:	eb00554b 	bl	3deec <__aeabi_uldivmod>
   289bc:	e1550001 	cmp	r5, r1
   289c0:	01540000 	cmpeq	r4, r0
   289c4:	e1a08000 	mov	r8, r0
   289c8:	e1a09001 	mov	r9, r1
   289cc:	9afffff1 	bls	28998 <CString::FormatV(char const*, std::__va_list)+0x5c8>
   289d0:	e59da020 	ldr	sl, [sp, #32]
   289d4:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   289d8:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   289dc:	e35a0058 	cmp	sl, #88	; 0x58
   289e0:	e28d303c 	add	r3, sp, #60	; 0x3c
   289e4:	e58d4030 	str	r4, [sp, #48]	; 0x30
   289e8:	e58d5034 	str	r5, [sp, #52]	; 0x34
   289ec:	e58d3020 	str	r3, [sp, #32]
   289f0:	13a0b057 	movne	fp, #87	; 0x57
   289f4:	e1cd42d8 	ldrd	r4, [sp, #40]	; 0x28
   289f8:	03a0b037 	moveq	fp, #55	; 0x37
   289fc:	e1a0a003 	mov	sl, r3
   28a00:	ea000006 	b	28a20 <CString::FormatV(char const*, std::__va_list)+0x650>
   28a04:	e1a02000 	mov	r2, r0
   28a08:	e1a03001 	mov	r3, r1
   28a0c:	e1a00004 	mov	r0, r4
   28a10:	e1a01005 	mov	r1, r5
   28a14:	eb005534 	bl	3deec <__aeabi_uldivmod>
   28a18:	e1a08000 	mov	r8, r0
   28a1c:	e1a09001 	mov	r9, r1
   28a20:	e1a00004 	mov	r0, r4
   28a24:	e1a01005 	mov	r1, r5
   28a28:	e1a02006 	mov	r2, r6
   28a2c:	e1a03007 	mov	r3, r7
   28a30:	eb00552d 	bl	3deec <__aeabi_uldivmod>
   28a34:	e3590000 	cmp	r9, #0
   28a38:	03580009 	cmpeq	r8, #9
   28a3c:	e1a05003 	mov	r5, r3
   28a40:	e2883030 	add	r3, r8, #48	; 0x30
   28a44:	808b8008 	addhi	r8, fp, r8
   28a48:	96af8073 	sxtbls	r8, r3
   28a4c:	86af8078 	sxtbhi	r8, r8
   28a50:	e28aa001 	add	sl, sl, #1
   28a54:	e1a00006 	mov	r0, r6
   28a58:	e1a01007 	mov	r1, r7
   28a5c:	e1a04002 	mov	r4, r2
   28a60:	e1cd21d0 	ldrd	r2, [sp, #16]
   28a64:	e54a8001 	strb	r8, [sl, #-1]
   28a68:	eb00551f 	bl	3deec <__aeabi_uldivmod>
   28a6c:	e1a06000 	mov	r6, r0
   28a70:	e1a07001 	mov	r7, r1
   28a74:	e1963007 	orrs	r3, r6, r7
   28a78:	1affffe1 	bne	28a04 <CString::FormatV(char const*, std::__va_list)+0x634>
   28a7c:	e3a03000 	mov	r3, #0
   28a80:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   28a84:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   28a88:	e5ca3000 	strb	r3, [sl]
   28a8c:	eafffee2 	b	2861c <CString::FormatV(char const*, std::__va_list)+0x24c>
   28a90:	e59d301c 	ldr	r3, [sp, #28]
   28a94:	e3530000 	cmp	r3, #0
   28a98:	e59d3018 	ldr	r3, [sp, #24]
   28a9c:	e2836004 	add	r6, r3, #4
   28aa0:	e1d370d0 	ldrsb	r7, [r3]
   28aa4:	1a000098 	bne	28d0c <CString::FormatV(char const*, std::__va_list)+0x93c>
   28aa8:	e3540001 	cmp	r4, #1
   28aac:	9a00000d 	bls	28ae8 <CString::FormatV(char const*, std::__va_list)+0x718>
   28ab0:	e59d800c 	ldr	r8, [sp, #12]
   28ab4:	e2441001 	sub	r1, r4, #1
   28ab8:	e1a00008 	mov	r0, r8
   28abc:	ebfffc0e 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28ac0:	e1a02008 	mov	r2, r8
   28ac4:	e2444002 	sub	r4, r4, #2
   28ac8:	e592300c 	ldr	r3, [r2, #12]
   28acc:	e2444001 	sub	r4, r4, #1
   28ad0:	e2831001 	add	r1, r3, #1
   28ad4:	e582100c 	str	r1, [r2, #12]
   28ad8:	e3a01020 	mov	r1, #32
   28adc:	e3740001 	cmn	r4, #1
   28ae0:	e5c31000 	strb	r1, [r3]
   28ae4:	1afffff7 	bne	28ac8 <CString::FormatV(char const*, std::__va_list)+0x6f8>
   28ae8:	e59d400c 	ldr	r4, [sp, #12]
   28aec:	e3a01001 	mov	r1, #1
   28af0:	e1a00004 	mov	r0, r4
   28af4:	ebfffc00 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28af8:	e594300c 	ldr	r3, [r4, #12]
   28afc:	e58d6018 	str	r6, [sp, #24]
   28b00:	e2832001 	add	r2, r3, #1
   28b04:	e584200c 	str	r2, [r4, #12]
   28b08:	e5c37000 	strb	r7, [r3]
   28b0c:	eafffedf 	b	28690 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28b10:	e3520000 	cmp	r2, #0
   28b14:	03a07010 	moveq	r7, #16
   28b18:	0afffe93 	beq	2856c <CString::FormatV(char const*, std::__va_list)+0x19c>
   28b1c:	e59f3544 	ldr	r3, [pc, #1348]	; 29068 <CString::FormatV(char const*, std::__va_list)+0xc98>
   28b20:	e35a0058 	cmp	sl, #88	; 0x58
   28b24:	e59f1540 	ldr	r1, [pc, #1344]	; 2906c <CString::FormatV(char const*, std::__va_list)+0xc9c>
   28b28:	e59d000c 	ldr	r0, [sp, #12]
   28b2c:	11a01003 	movne	r1, r3
   28b30:	ebfffc97 	bl	27d94 <CString::PutString(char const*)>
   28b34:	e3a07010 	mov	r7, #16
   28b38:	e1d5a0d0 	ldrsb	sl, [r5]
   28b3c:	eafffe8a 	b	2856c <CString::FormatV(char const*, std::__va_list)+0x19c>
   28b40:	e59d600c 	ldr	r6, [sp, #12]
   28b44:	e3a01001 	mov	r1, #1
   28b48:	e1a00006 	mov	r0, r6
   28b4c:	ebfffbea 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28b50:	e3a01001 	mov	r1, #1
   28b54:	e596300c 	ldr	r3, [r6, #12]
   28b58:	e1a00006 	mov	r0, r6
   28b5c:	e0832001 	add	r2, r3, r1
   28b60:	e586200c 	str	r2, [r6, #12]
   28b64:	e3a02025 	mov	r2, #37	; 0x25
   28b68:	e5c32000 	strb	r2, [r3]
   28b6c:	e1d540d0 	ldrsb	r4, [r5]
   28b70:	ebfffbe1 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28b74:	e596300c 	ldr	r3, [r6, #12]
   28b78:	e2832001 	add	r2, r3, #1
   28b7c:	e586200c 	str	r2, [r6, #12]
   28b80:	e5c34000 	strb	r4, [r3]
   28b84:	eafffec1 	b	28690 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28b88:	e59d600c 	ldr	r6, [sp, #12]
   28b8c:	e3a01001 	mov	r1, #1
   28b90:	e1a00006 	mov	r0, r6
   28b94:	ebfffbd8 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28b98:	e596300c 	ldr	r3, [r6, #12]
   28b9c:	e2832001 	add	r2, r3, #1
   28ba0:	e586200c 	str	r2, [r6, #12]
   28ba4:	e5c34000 	strb	r4, [r3]
   28ba8:	eafffeb8 	b	28690 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28bac:	e1d5a0d1 	ldrsb	sl, [r5, #1]
   28bb0:	e35a006c 	cmp	sl, #108	; 0x6c
   28bb4:	03a06001 	moveq	r6, #1
   28bb8:	01d5a0d2 	ldrsbeq	sl, [r5, #2]
   28bbc:	00855006 	addeq	r5, r5, r6
   28bc0:	13a06000 	movne	r6, #0
   28bc4:	e2855001 	add	r5, r5, #1
   28bc8:	eafffe41 	b	284d4 <CString::FormatV(char const*, std::__va_list)+0x104>
   28bcc:	e1d5a0d1 	ldrsb	sl, [r5, #1]
   28bd0:	e3a01000 	mov	r1, #0
   28bd4:	e24a3030 	sub	r3, sl, #48	; 0x30
   28bd8:	e6ef3073 	uxtb	r3, r3
   28bdc:	e3530009 	cmp	r3, #9
   28be0:	e2855001 	add	r5, r5, #1
   28be4:	8afffe37 	bhi	284c8 <CString::FormatV(char const*, std::__va_list)+0xf8>
   28be8:	e0811101 	add	r1, r1, r1, lsl #2
   28bec:	e08a1081 	add	r1, sl, r1, lsl #1
   28bf0:	e1f5a0d1 	ldrsb	sl, [r5, #1]!
   28bf4:	e2411030 	sub	r1, r1, #48	; 0x30
   28bf8:	e24a3030 	sub	r3, sl, #48	; 0x30
   28bfc:	e6ef3073 	uxtb	r3, r3
   28c00:	e3530009 	cmp	r3, #9
   28c04:	9afffff7 	bls	28be8 <CString::FormatV(char const*, std::__va_list)+0x818>
   28c08:	eafffe2e 	b	284c8 <CString::FormatV(char const*, std::__va_list)+0xf8>
   28c0c:	e59d400c 	ldr	r4, [sp, #12]
   28c10:	e3a01001 	mov	r1, #1
   28c14:	e1a00004 	mov	r0, r4
   28c18:	ebfffbb7 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28c1c:	e594300c 	ldr	r3, [r4, #12]
   28c20:	e2855002 	add	r5, r5, #2
   28c24:	e2832001 	add	r2, r3, #1
   28c28:	e584200c 	str	r2, [r4, #12]
   28c2c:	e5c36000 	strb	r6, [r3]
   28c30:	eafffdf7 	b	28414 <CString::FormatV(char const*, std::__va_list)+0x44>
   28c34:	e59d700c 	ldr	r7, [sp, #12]
   28c38:	e59d1020 	ldr	r1, [sp, #32]
   28c3c:	e1a00007 	mov	r0, r7
   28c40:	ebfffc53 	bl	27d94 <CString::PutString(char const*)>
   28c44:	e1560004 	cmp	r6, r4
   28c48:	2afffe90 	bcs	28690 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28c4c:	e0444006 	sub	r4, r4, r6
   28c50:	e1a01004 	mov	r1, r4
   28c54:	e1a00007 	mov	r0, r7
   28c58:	ebfffba7 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28c5c:	e1a01007 	mov	r1, r7
   28c60:	e2443001 	sub	r3, r4, #1
   28c64:	e591200c 	ldr	r2, [r1, #12]
   28c68:	e2433001 	sub	r3, r3, #1
   28c6c:	e2820001 	add	r0, r2, #1
   28c70:	e581000c 	str	r0, [r1, #12]
   28c74:	e3a00020 	mov	r0, #32
   28c78:	e3730001 	cmn	r3, #1
   28c7c:	e5c20000 	strb	r0, [r2]
   28c80:	1afffff7 	bne	28c64 <CString::FormatV(char const*, std::__va_list)+0x894>
   28c84:	eafffe81 	b	28690 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28c88:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   28c8c:	e3530000 	cmp	r3, #0
   28c90:	1a0000b8 	bne	28f78 <CString::FormatV(char const*, std::__va_list)+0xba8>
   28c94:	e15b0004 	cmp	fp, r4
   28c98:	2a00000e 	bcs	28cd8 <CString::FormatV(char const*, std::__va_list)+0x908>
   28c9c:	e59d600c 	ldr	r6, [sp, #12]
   28ca0:	e044400b 	sub	r4, r4, fp
   28ca4:	e1a01004 	mov	r1, r4
   28ca8:	e1a00006 	mov	r0, r6
   28cac:	ebfffb92 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28cb0:	e1a01006 	mov	r1, r6
   28cb4:	e2443001 	sub	r3, r4, #1
   28cb8:	e591200c 	ldr	r2, [r1, #12]
   28cbc:	e2433001 	sub	r3, r3, #1
   28cc0:	e2820001 	add	r0, r2, #1
   28cc4:	e581000c 	str	r0, [r1, #12]
   28cc8:	e3a00020 	mov	r0, #32
   28ccc:	e3730001 	cmn	r3, #1
   28cd0:	e5c20000 	strb	r0, [r2]
   28cd4:	1afffff7 	bne	28cb8 <CString::FormatV(char const*, std::__va_list)+0x8e8>
   28cd8:	e59d3010 	ldr	r3, [sp, #16]
   28cdc:	e3530000 	cmp	r3, #0
   28ce0:	0afffe67 	beq	28684 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   28ce4:	e59d400c 	ldr	r4, [sp, #12]
   28ce8:	e3a01001 	mov	r1, #1
   28cec:	e1a00004 	mov	r0, r4
   28cf0:	ebfffb81 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28cf4:	e3a0202d 	mov	r2, #45	; 0x2d
   28cf8:	e594300c 	ldr	r3, [r4, #12]
   28cfc:	e2831001 	add	r1, r3, #1
   28d00:	e584100c 	str	r1, [r4, #12]
   28d04:	e5c32000 	strb	r2, [r3]
   28d08:	eafffe5d 	b	28684 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   28d0c:	e59d800c 	ldr	r8, [sp, #12]
   28d10:	e3a01001 	mov	r1, #1
   28d14:	e1a00008 	mov	r0, r8
   28d18:	ebfffb77 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28d1c:	e598300c 	ldr	r3, [r8, #12]
   28d20:	e3540001 	cmp	r4, #1
   28d24:	e2832001 	add	r2, r3, #1
   28d28:	e588200c 	str	r2, [r8, #12]
   28d2c:	e1a00008 	mov	r0, r8
   28d30:	e5c37000 	strb	r7, [r3]
   28d34:	9a00000c 	bls	28d6c <CString::FormatV(char const*, std::__va_list)+0x99c>
   28d38:	e2441001 	sub	r1, r4, #1
   28d3c:	ebfffb6e 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28d40:	e1a07008 	mov	r7, r8
   28d44:	e1a02008 	mov	r2, r8
   28d48:	e2444002 	sub	r4, r4, #2
   28d4c:	e592300c 	ldr	r3, [r2, #12]
   28d50:	e2444001 	sub	r4, r4, #1
   28d54:	e2831001 	add	r1, r3, #1
   28d58:	e582100c 	str	r1, [r2, #12]
   28d5c:	e3a01020 	mov	r1, #32
   28d60:	e3740001 	cmn	r4, #1
   28d64:	e5c31000 	strb	r1, [r3]
   28d68:	1afffff7 	bne	28d4c <CString::FormatV(char const*, std::__va_list)+0x97c>
   28d6c:	e58d6018 	str	r6, [sp, #24]
   28d70:	eafffe46 	b	28690 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28d74:	e2833007 	add	r3, r3, #7
   28d78:	e3c33007 	bic	r3, r3, #7
   28d7c:	e1c300d0 	ldrd	r0, [r3]
   28d80:	e3500000 	cmp	r0, #0
   28d84:	e2d12000 	sbcs	r2, r1, #0
   28d88:	a3a0b000 	movge	fp, #0
   28d8c:	e2833008 	add	r3, r3, #8
   28d90:	e58d3018 	str	r3, [sp, #24]
   28d94:	a58db010 	strge	fp, [sp, #16]
   28d98:	aa000005 	bge	28db4 <CString::FormatV(char const*, std::__va_list)+0x9e4>
   28d9c:	e2702000 	rsbs	r2, r0, #0
   28da0:	e2e13000 	rsc	r3, r1, #0
   28da4:	e3a0b001 	mov	fp, #1
   28da8:	e1a00002 	mov	r0, r2
   28dac:	e1a01003 	mov	r1, r3
   28db0:	e58db010 	str	fp, [sp, #16]
   28db4:	e1a03001 	mov	r3, r1
   28db8:	e1a02000 	mov	r2, r0
   28dbc:	e350000a 	cmp	r0, #10
   28dc0:	e1cd22f8 	strd	r2, [sp, #40]	; 0x28
   28dc4:	e2d33000 	sbcs	r3, r3, #0
   28dc8:	ba00009d 	blt	29044 <CString::FormatV(char const*, std::__va_list)+0xc74>
   28dcc:	e58d4020 	str	r4, [sp, #32]
   28dd0:	e58d5030 	str	r5, [sp, #48]	; 0x30
   28dd4:	e3a08001 	mov	r8, #1
   28dd8:	e3a09000 	mov	r9, #0
   28ddc:	e3a0a00a 	mov	sl, #10
   28de0:	e1a04000 	mov	r4, r0
   28de4:	e1a05001 	mov	r5, r1
   28de8:	e003099a 	mul	r3, sl, r9
   28dec:	e0898a98 	umull	r8, r9, r8, sl
   28df0:	e0839009 	add	r9, r3, r9
   28df4:	e1a02008 	mov	r2, r8
   28df8:	e1a03009 	mov	r3, r9
   28dfc:	e1a00004 	mov	r0, r4
   28e00:	e1a01005 	mov	r1, r5
   28e04:	eb005438 	bl	3deec <__aeabi_uldivmod>
   28e08:	e3510000 	cmp	r1, #0
   28e0c:	03500009 	cmpeq	r0, #9
   28e10:	e1a06000 	mov	r6, r0
   28e14:	e1a07001 	mov	r7, r1
   28e18:	8afffff2 	bhi	28de8 <CString::FormatV(char const*, std::__va_list)+0xa18>
   28e1c:	e59d4020 	ldr	r4, [sp, #32]
   28e20:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   28e24:	e28d303c 	add	r3, sp, #60	; 0x3c
   28e28:	e58d4030 	str	r4, [sp, #48]	; 0x30
   28e2c:	e58d5034 	str	r5, [sp, #52]	; 0x34
   28e30:	e58d3020 	str	r3, [sp, #32]
   28e34:	e1a0a003 	mov	sl, r3
   28e38:	e1cd42d8 	ldrd	r4, [sp, #40]	; 0x28
   28e3c:	ea000006 	b	28e5c <CString::FormatV(char const*, std::__va_list)+0xa8c>
   28e40:	e1a02000 	mov	r2, r0
   28e44:	e1a03001 	mov	r3, r1
   28e48:	e1a00004 	mov	r0, r4
   28e4c:	e1a01005 	mov	r1, r5
   28e50:	eb005425 	bl	3deec <__aeabi_uldivmod>
   28e54:	e1a06000 	mov	r6, r0
   28e58:	e1a07001 	mov	r7, r1
   28e5c:	e1a00004 	mov	r0, r4
   28e60:	e1a01005 	mov	r1, r5
   28e64:	e1a02008 	mov	r2, r8
   28e68:	e1a03009 	mov	r3, r9
   28e6c:	eb00541e 	bl	3deec <__aeabi_uldivmod>
   28e70:	e3570000 	cmp	r7, #0
   28e74:	03560009 	cmpeq	r6, #9
   28e78:	e1a05003 	mov	r5, r3
   28e7c:	e2863030 	add	r3, r6, #48	; 0x30
   28e80:	82866057 	addhi	r6, r6, #87	; 0x57
   28e84:	96af6073 	sxtbls	r6, r3
   28e88:	86af6076 	sxtbhi	r6, r6
   28e8c:	e28aa001 	add	sl, sl, #1
   28e90:	e1a00008 	mov	r0, r8
   28e94:	e1a01009 	mov	r1, r9
   28e98:	e3a03000 	mov	r3, #0
   28e9c:	e1a04002 	mov	r4, r2
   28ea0:	e54a6001 	strb	r6, [sl, #-1]
   28ea4:	e3a0200a 	mov	r2, #10
   28ea8:	eb00540f 	bl	3deec <__aeabi_uldivmod>
   28eac:	e1a08000 	mov	r8, r0
   28eb0:	e1a09001 	mov	r9, r1
   28eb4:	e1983009 	orrs	r3, r8, r9
   28eb8:	1affffe0 	bne	28e40 <CString::FormatV(char const*, std::__va_list)+0xa70>
   28ebc:	e3a03000 	mov	r3, #0
   28ec0:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   28ec4:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   28ec8:	e5ca3000 	strb	r3, [sl]
   28ecc:	eafffe69 	b	28878 <CString::FormatV(char const*, std::__va_list)+0x4a8>
   28ed0:	e1a01008 	mov	r1, r8
   28ed4:	e59d800c 	ldr	r8, [sp, #12]
   28ed8:	e1a00008 	mov	r0, r8
   28edc:	ebfffbac 	bl	27d94 <CString::PutString(char const*)>
   28ee0:	e1570004 	cmp	r7, r4
   28ee4:	2affffa0 	bcs	28d6c <CString::FormatV(char const*, std::__va_list)+0x99c>
   28ee8:	e0444007 	sub	r4, r4, r7
   28eec:	e1a01004 	mov	r1, r4
   28ef0:	e1a00008 	mov	r0, r8
   28ef4:	ebfffb00 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28ef8:	e1a01008 	mov	r1, r8
   28efc:	e2443001 	sub	r3, r4, #1
   28f00:	e591200c 	ldr	r2, [r1, #12]
   28f04:	e2433001 	sub	r3, r3, #1
   28f08:	e2820001 	add	r0, r2, #1
   28f0c:	e581000c 	str	r0, [r1, #12]
   28f10:	e3a00020 	mov	r0, #32
   28f14:	e3730001 	cmn	r3, #1
   28f18:	e5c20000 	strb	r0, [r2]
   28f1c:	1afffff7 	bne	28f00 <CString::FormatV(char const*, std::__va_list)+0xb30>
   28f20:	eaffff91 	b	28d6c <CString::FormatV(char const*, std::__va_list)+0x99c>
   28f24:	e59d700c 	ldr	r7, [sp, #12]
   28f28:	e59d1020 	ldr	r1, [sp, #32]
   28f2c:	e1a00007 	mov	r0, r7
   28f30:	ebfffb97 	bl	27d94 <CString::PutString(char const*)>
   28f34:	e1560004 	cmp	r6, r4
   28f38:	2afffdd4 	bcs	28690 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28f3c:	e0444006 	sub	r4, r4, r6
   28f40:	e1a01004 	mov	r1, r4
   28f44:	e1a00007 	mov	r0, r7
   28f48:	ebfffaeb 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28f4c:	e1a01007 	mov	r1, r7
   28f50:	e2443001 	sub	r3, r4, #1
   28f54:	e591200c 	ldr	r2, [r1, #12]
   28f58:	e2433001 	sub	r3, r3, #1
   28f5c:	e2820001 	add	r0, r2, #1
   28f60:	e581000c 	str	r0, [r1, #12]
   28f64:	e3a00020 	mov	r0, #32
   28f68:	e3730001 	cmn	r3, #1
   28f6c:	e5c20000 	strb	r0, [r2]
   28f70:	1afffff7 	bne	28f54 <CString::FormatV(char const*, std::__va_list)+0xb84>
   28f74:	eafffdc5 	b	28690 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   28f78:	e59d3010 	ldr	r3, [sp, #16]
   28f7c:	e3530000 	cmp	r3, #0
   28f80:	1a000025 	bne	2901c <CString::FormatV(char const*, std::__va_list)+0xc4c>
   28f84:	e15b0004 	cmp	fp, r4
   28f88:	2afffdbd 	bcs	28684 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   28f8c:	e59d600c 	ldr	r6, [sp, #12]
   28f90:	e044400b 	sub	r4, r4, fp
   28f94:	e1a01004 	mov	r1, r4
   28f98:	e1a00006 	mov	r0, r6
   28f9c:	ebfffad6 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28fa0:	e3a00030 	mov	r0, #48	; 0x30
   28fa4:	e1a01006 	mov	r1, r6
   28fa8:	e2443001 	sub	r3, r4, #1
   28fac:	e591200c 	ldr	r2, [r1, #12]
   28fb0:	e2433001 	sub	r3, r3, #1
   28fb4:	e282c001 	add	ip, r2, #1
   28fb8:	e3730001 	cmn	r3, #1
   28fbc:	e581c00c 	str	ip, [r1, #12]
   28fc0:	e5c20000 	strb	r0, [r2]
   28fc4:	1afffff8 	bne	28fac <CString::FormatV(char const*, std::__va_list)+0xbdc>
   28fc8:	eafffdad 	b	28684 <CString::FormatV(char const*, std::__va_list)+0x2b4>
   28fcc:	e59d600c 	ldr	r6, [sp, #12]
   28fd0:	e3a01001 	mov	r1, #1
   28fd4:	e1a00006 	mov	r0, r6
   28fd8:	ebfffac7 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   28fdc:	e3a0202d 	mov	r2, #45	; 0x2d
   28fe0:	e596300c 	ldr	r3, [r6, #12]
   28fe4:	e2831001 	add	r1, r3, #1
   28fe8:	e586100c 	str	r1, [r6, #12]
   28fec:	e5c32000 	strb	r2, [r3]
   28ff0:	eafffe29 	b	2889c <CString::FormatV(char const*, std::__va_list)+0x4cc>
   28ff4:	e1a09006 	mov	r9, r6
   28ff8:	e3a0b001 	mov	fp, #1
   28ffc:	eafffd6a 	b	285ac <CString::FormatV(char const*, std::__va_list)+0x1dc>
   29000:	e3a0b000 	mov	fp, #0
   29004:	e58db010 	str	fp, [sp, #16]
   29008:	eafffdf6 	b	287e8 <CString::FormatV(char const*, std::__va_list)+0x418>
   2900c:	e1cd82d8 	ldrd	r8, [sp, #40]	; 0x28
   29010:	e3a06001 	mov	r6, #1
   29014:	e3a07000 	mov	r7, #0
   29018:	eafffe6f 	b	289dc <CString::FormatV(char const*, std::__va_list)+0x60c>
   2901c:	e59d600c 	ldr	r6, [sp, #12]
   29020:	e3a01001 	mov	r1, #1
   29024:	e1a00006 	mov	r0, r6
   29028:	ebfffab3 	bl	27afc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   2902c:	e3a0202d 	mov	r2, #45	; 0x2d
   29030:	e596300c 	ldr	r3, [r6, #12]
   29034:	e2831001 	add	r1, r3, #1
   29038:	e586100c 	str	r1, [r6, #12]
   2903c:	e5c32000 	strb	r2, [r3]
   29040:	eaffffcf 	b	28f84 <CString::FormatV(char const*, std::__va_list)+0xbb4>
   29044:	e1a06000 	mov	r6, r0
   29048:	e1a07001 	mov	r7, r1
   2904c:	e3a08001 	mov	r8, #1
   29050:	e3a09000 	mov	r9, #0
   29054:	eaffff72 	b	28e24 <CString::FormatV(char const*, std::__va_list)+0xa54>
   29058:	e1a09007 	mov	r9, r7
   2905c:	e3a08001 	mov	r8, #1
   29060:	eafffdec 	b	28818 <CString::FormatV(char const*, std::__va_list)+0x448>
   29064:	cccccccd 	.word	0xcccccccd
   29068:	000456cc 	.word	0x000456cc
   2906c:	000456c8 	.word	0x000456c8

00029070 <CString::Format(char const*, ...)>:
   29070:	e92d000e 	push	{r1, r2, r3}
   29074:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   29078:	e24dd008 	sub	sp, sp, #8
   2907c:	e28d3010 	add	r3, sp, #16
   29080:	e1a02003 	mov	r2, r3
   29084:	e59d100c 	ldr	r1, [sp, #12]
   29088:	e58d3004 	str	r3, [sp, #4]
   2908c:	ebfffccf 	bl	283d0 <CString::FormatV(char const*, std::__va_list)>
   29090:	e28dd008 	add	sp, sp, #8
   29094:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   29098:	e28dd00c 	add	sp, sp, #12
   2909c:	e12fff1e 	bx	lr

000290a0 <__aeabi_atexit>:
   290a0:	e12fff1e 	bx	lr

000290a4 <__errno>:
   290a4:	e59f0000 	ldr	r0, [pc]	; 290ac <__errno+0x8>
   290a8:	e12fff1e 	bx	lr
   290ac:	0004e108 	.word	0x0004e108

000290b0 <set_qemu_exit_status>:
   290b0:	e59f3004 	ldr	r3, [pc, #4]	; 290bc <set_qemu_exit_status+0xc>
   290b4:	e5830008 	str	r0, [r3, #8]
   290b8:	e12fff1e 	bx	lr
   290bc:	0004e104 	.word	0x0004e104

000290c0 <halt>:
   290c0:	f10c0080 	cpsid	i
   290c4:	f10c0040 	cpsid	f
   290c8:	eafffffe 	b	290c8 <halt+0x8>

000290cc <reboot>:
   290cc:	e3a03000 	mov	r3, #0
   290d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   290d4:	e59f3010 	ldr	r3, [pc, #16]	; 290ec <reboot+0x20>
   290d8:	e59f1010 	ldr	r1, [pc, #16]	; 290f0 <reboot+0x24>
   290dc:	e59f2010 	ldr	r2, [pc, #16]	; 290f4 <reboot+0x28>
   290e0:	e5831024 	str	r1, [r3, #36]	; 0x24
   290e4:	e583201c 	str	r2, [r3, #28]
   290e8:	eafffffe 	b	290e8 <reboot+0x1c>
   290ec:	20100000 	.word	0x20100000
   290f0:	5a000001 	.word	0x5a000001
   290f4:	5a000020 	.word	0x5a000020

000290f8 <sysinit>:
   290f8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   290fc:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   29100:	f1080040 	cpsie	f
   29104:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   29108:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   2910c:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   29110:	e3a04000 	mov	r4, #0
   29114:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   29118:	e3a03101 	mov	r3, #1073741824	; 0x40000000
   2911c:	eee83a10 	vmsr	fpexc, r3
   29120:	e3a03402 	mov	r3, #33554432	; 0x2000000
   29124:	eee13a10 	vmsr	fpscr, r3
   29128:	e59f0088 	ldr	r0, [pc, #136]	; 291b8 <sysinit+0xc0>
   2912c:	e59f2088 	ldr	r2, [pc, #136]	; 291bc <sysinit+0xc4>
   29130:	e1a01004 	mov	r1, r4
   29134:	e0422000 	sub	r2, r2, r0
   29138:	eb00037d 	bl	29f34 <memset>
   2913c:	e1a0000d 	mov	r0, sp
   29140:	ebfff797 	bl	26fa4 <CMachineInfo::CMachineInfo()>
   29144:	e28d001c 	add	r0, sp, #28
   29148:	e3a01001 	mov	r1, #1
   2914c:	eb000a05 	bl	2b968 <CMemorySystem::CMemorySystem(bool)>
   29150:	e59f5068 	ldr	r5, [pc, #104]	; 291c0 <sysinit+0xc8>
   29154:	e59f3068 	ldr	r3, [pc, #104]	; 291c4 <sysinit+0xcc>
   29158:	e1550003 	cmp	r5, r3
   2915c:	31e06005 	mvncc	r6, r5
   29160:	30866003 	addcc	r6, r6, r3
   29164:	31a06126 	lsrcc	r6, r6, #2
   29168:	32866001 	addcc	r6, r6, #1
   2916c:	2a000004 	bcs	29184 <sysinit+0x8c>
   29170:	e2844001 	add	r4, r4, #1
   29174:	e4953004 	ldr	r3, [r5], #4
   29178:	e12fff33 	blx	r3
   2917c:	e1540006 	cmp	r4, r6
   29180:	1afffffa 	bne	29170 <sysinit+0x78>
   29184:	ebff7bb7 	bl	8068 <main>
   29188:	e3500001 	cmp	r0, #1
   2918c:	0a000000 	beq	29194 <sysinit+0x9c>
   29190:	ebffffca 	bl	290c0 <halt>
   29194:	eb0006c3 	bl	2aca8 <IsChainBootEnabled>
   29198:	e3500000 	cmp	r0, #0
   2919c:	1a000000 	bne	291a4 <sysinit+0xac>
   291a0:	ebffffc9 	bl	290cc <reboot>
   291a4:	e28d001c 	add	r0, sp, #28
   291a8:	eb000a4f 	bl	2baec <CMemorySystem::Destructor()>
   291ac:	f10c0040 	cpsid	f
   291b0:	eb0006c2 	bl	2acc0 <DoChainBoot>
   291b4:	eafffff9 	b	291a0 <sysinit+0xa8>
   291b8:	0004e0b8 	.word	0x0004e0b8
   291bc:	00050fc0 	.word	0x00050fc0
   291c0:	00047e60 	.word	0x00047e60
   291c4:	00047e70 	.word	0x00047e70

000291c8 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>:
   291c8:	e2800001 	add	r0, r0, #1
   291cc:	e3a03000 	mov	r3, #0
   291d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   291d4:	e59f3020 	ldr	r3, [pc, #32]	; 291fc <CTimer::SimpleusDelay(unsigned int) [clone .part.3]+0x34>
   291d8:	e1a01003 	mov	r1, r3
   291dc:	e5932004 	ldr	r2, [r3, #4]
   291e0:	e5913004 	ldr	r3, [r1, #4]
   291e4:	e0433002 	sub	r3, r3, r2
   291e8:	e1500003 	cmp	r0, r3
   291ec:	8afffffb 	bhi	291e0 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]+0x18>
   291f0:	e3a03000 	mov	r3, #0
   291f4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   291f8:	e12fff1e 	bx	lr
   291fc:	20003000 	.word	0x20003000

00029200 <CTimer::CTimer(CInterruptSystem*)>:
   29200:	e92d4070 	push	{r4, r5, r6, lr}
   29204:	e3a05000 	mov	r5, #0
   29208:	e3a06001 	mov	r6, #1
   2920c:	e1a04000 	mov	r4, r0
   29210:	e5805004 	str	r5, [r0, #4]
   29214:	e5801000 	str	r1, [r0]
   29218:	e5805008 	str	r5, [r0, #8]
   2921c:	e5805014 	str	r5, [r0, #20]
   29220:	e5806010 	str	r6, [r0, #16]
   29224:	e580500c 	str	r5, [r0, #12]
   29228:	e2800018 	add	r0, r0, #24
   2922c:	eb000e0b 	bl	2ca60 <CPtrList::CPtrList()>
   29230:	e3a020c8 	mov	r2, #200	; 0xc8
   29234:	e59f3038 	ldr	r3, [pc, #56]	; 29274 <CTimer::CTimer(CInterruptSystem*)+0x74>
   29238:	e59f1038 	ldr	r1, [pc, #56]	; 29278 <CTimer::CTimer(CInterruptSystem*)+0x78>
   2923c:	e5930000 	ldr	r0, [r3]
   29240:	e584601c 	str	r6, [r4, #28]
   29244:	e1500005 	cmp	r0, r5
   29248:	e5845038 	str	r5, [r4, #56]	; 0x38
   2924c:	e5841020 	str	r1, [r4, #32]
   29250:	e5842024 	str	r2, [r4, #36]	; 0x24
   29254:	1a000002 	bne	29264 <CTimer::CTimer(CInterruptSystem*)+0x64>
   29258:	e5834000 	str	r4, [r3]
   2925c:	e1a00004 	mov	r0, r4
   29260:	e8bd8070 	pop	{r4, r5, r6, pc}
   29264:	e3a02041 	mov	r2, #65	; 0x41
   29268:	e59f100c 	ldr	r1, [pc, #12]	; 2927c <CTimer::CTimer(CInterruptSystem*)+0x7c>
   2926c:	e59f000c 	ldr	r0, [pc, #12]	; 29280 <CTimer::CTimer(CInterruptSystem*)+0x80>
   29270:	ebffed62 	bl	24800 <assertion_failed>
   29274:	0004e110 	.word	0x0004e110
   29278:	00030d40 	.word	0x00030d40
   2927c:	00045708 	.word	0x00045708
   29280:	000438ec 	.word	0x000438ec

00029284 <CTimer::~CTimer()>:
   29284:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29288:	e1a09000 	mov	r9, r0
   2928c:	e5900000 	ldr	r0, [r0]
   29290:	e3500000 	cmp	r0, #0
   29294:	0a000028 	beq	2933c <CTimer::~CTimer()+0xb8>
   29298:	e3a01003 	mov	r1, #3
   2929c:	e2894018 	add	r4, r9, #24
   292a0:	eb000bda 	bl	2c210 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   292a4:	e1a00004 	mov	r0, r4
   292a8:	eb000dfa 	bl	2ca98 <CPtrList::GetFirst()>
   292ac:	e2505000 	subs	r5, r0, #0
   292b0:	e3a08014 	mov	r8, #20
   292b4:	e59f7090 	ldr	r7, [pc, #144]	; 2934c <CTimer::~CTimer()+0xc8>
   292b8:	0a000011 	beq	29304 <CTimer::~CTimer()+0x80>
   292bc:	e1a01005 	mov	r1, r5
   292c0:	e1a00004 	mov	r0, r4
   292c4:	eb000e0a 	bl	2caf4 <CPtrList::GetPtr(TPtrListElement*)>
   292c8:	e2506000 	subs	r6, r0, #0
   292cc:	0a000012 	beq	2931c <CTimer::~CTimer()+0x98>
   292d0:	e5963000 	ldr	r3, [r6]
   292d4:	e1530007 	cmp	r3, r7
   292d8:	1a000013 	bne	2932c <CTimer::~CTimer()+0xa8>
   292dc:	e1a01005 	mov	r1, r5
   292e0:	e1a00004 	mov	r0, r4
   292e4:	eb000e89 	bl	2cd10 <CPtrList::Remove(TPtrListElement*)>
   292e8:	e1a01008 	mov	r1, r8
   292ec:	e1a00006 	mov	r0, r6
   292f0:	eb00076d 	bl	2b0ac <operator delete(void*, unsigned int)>
   292f4:	e1a00004 	mov	r0, r4
   292f8:	eb000de6 	bl	2ca98 <CPtrList::GetFirst()>
   292fc:	e2505000 	subs	r5, r0, #0
   29300:	1affffed 	bne	292bc <CTimer::~CTimer()+0x38>
   29304:	e59f3044 	ldr	r3, [pc, #68]	; 29350 <CTimer::~CTimer()+0xcc>
   29308:	e1a00004 	mov	r0, r4
   2930c:	e5835000 	str	r5, [r3]
   29310:	eb000dd5 	bl	2ca6c <CPtrList::~CPtrList()>
   29314:	e1a00009 	mov	r0, r9
   29318:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2931c:	e3a02058 	mov	r2, #88	; 0x58
   29320:	e59f102c 	ldr	r1, [pc, #44]	; 29354 <CTimer::~CTimer()+0xd0>
   29324:	e59f002c 	ldr	r0, [pc, #44]	; 29358 <CTimer::~CTimer()+0xd4>
   29328:	ebffed34 	bl	24800 <assertion_failed>
   2932c:	e3a02059 	mov	r2, #89	; 0x59
   29330:	e59f101c 	ldr	r1, [pc, #28]	; 29354 <CTimer::~CTimer()+0xd0>
   29334:	e59f0020 	ldr	r0, [pc, #32]	; 2935c <CTimer::~CTimer()+0xd8>
   29338:	ebffed30 	bl	24800 <assertion_failed>
   2933c:	e3a02047 	mov	r2, #71	; 0x47
   29340:	e59f100c 	ldr	r1, [pc, #12]	; 29354 <CTimer::~CTimer()+0xd0>
   29344:	e59f0014 	ldr	r0, [pc, #20]	; 29360 <CTimer::~CTimer()+0xdc>
   29348:	ebffed2c 	bl	24800 <assertion_failed>
   2934c:	4b544d43 	.word	0x4b544d43
   29350:	0004e110 	.word	0x0004e110
   29354:	00045708 	.word	0x00045708
   29358:	00041424 	.word	0x00041424
   2935c:	00045714 	.word	0x00045714
   29360:	0003f1a0 	.word	0x0003f1a0

00029364 <CTimer::SetTimeZone(int)>:
   29364:	e59f2018 	ldr	r2, [pc, #24]	; 29384 <CTimer::SetTimeZone(int)+0x20>
   29368:	e2813e59 	add	r3, r1, #1424	; 0x590
   2936c:	e283300f 	add	r3, r3, #15
   29370:	e1530002 	cmp	r3, r2
   29374:	95801014 	strls	r1, [r0, #20]
   29378:	93a00001 	movls	r0, #1
   2937c:	83a00000 	movhi	r0, #0
   29380:	e12fff1e 	bx	lr
   29384:	00000b3e 	.word	0x00000b3e

00029388 <CTimer::GetTimeZone() const>:
   29388:	e5900014 	ldr	r0, [r0, #20]
   2938c:	e12fff1e 	bx	lr

00029390 <CTimer::SetTime(unsigned int, bool)>:
   29390:	e3520000 	cmp	r2, #0
   29394:	e92d4070 	push	{r4, r5, r6, lr}
   29398:	e1a04000 	mov	r4, r0
   2939c:	e1a05001 	mov	r5, r1
   293a0:	1a000004 	bne	293b8 <CTimer::SetTime(unsigned int, bool)+0x28>
   293a4:	e5903014 	ldr	r3, [r0, #20]
   293a8:	e0633203 	rsb	r3, r3, r3, lsl #4
   293ac:	e1b03103 	lsls	r3, r3, #2
   293b0:	4a00000e 	bmi	293f0 <CTimer::SetTime(unsigned int, bool)+0x60>
   293b4:	e0855003 	add	r5, r5, r3
   293b8:	e5940010 	ldr	r0, [r4, #16]
   293bc:	e3500000 	cmp	r0, #0
   293c0:	1a000002 	bne	293d0 <CTimer::SetTime(unsigned int, bool)+0x40>
   293c4:	e3a00001 	mov	r0, #1
   293c8:	e584500c 	str	r5, [r4, #12]
   293cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   293d0:	eb000a59 	bl	2bd3c <EnterCritical>
   293d4:	e5943010 	ldr	r3, [r4, #16]
   293d8:	e584500c 	str	r5, [r4, #12]
   293dc:	e3530000 	cmp	r3, #0
   293e0:	0a000007 	beq	29404 <CTimer::SetTime(unsigned int, bool)+0x74>
   293e4:	eb000a7f 	bl	2bde8 <LeaveCritical>
   293e8:	e3a00001 	mov	r0, #1
   293ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   293f0:	e2631000 	rsb	r1, r3, #0
   293f4:	e1510005 	cmp	r1, r5
   293f8:	daffffed 	ble	293b4 <CTimer::SetTime(unsigned int, bool)+0x24>
   293fc:	e1a00002 	mov	r0, r2
   29400:	e8bd8070 	pop	{r4, r5, r6, pc}
   29404:	e3a00001 	mov	r0, #1
   29408:	e8bd8070 	pop	{r4, r5, r6, pc}

0002940c <CTimer::GetClockTicks()>:
   2940c:	e3a03000 	mov	r3, #0
   29410:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29414:	e59f2008 	ldr	r2, [pc, #8]	; 29424 <CTimer::GetClockTicks()+0x18>
   29418:	e5920004 	ldr	r0, [r2, #4]
   2941c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   29420:	e12fff1e 	bx	lr
   29424:	20003000 	.word	0x20003000

00029428 <CTimer::GetTicks() const>:
   29428:	e5900004 	ldr	r0, [r0, #4]
   2942c:	e12fff1e 	bx	lr

00029430 <CTimer::GetUptime() const>:
   29430:	e5900008 	ldr	r0, [r0, #8]
   29434:	e12fff1e 	bx	lr

00029438 <CTimer::GetTime() const>:
   29438:	e590000c 	ldr	r0, [r0, #12]
   2943c:	e12fff1e 	bx	lr

00029440 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   29440:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29444:	e1a04000 	mov	r4, r0
   29448:	e5900010 	ldr	r0, [r0, #16]
   2944c:	e1a06001 	mov	r6, r1
   29450:	e3500000 	cmp	r0, #0
   29454:	e1a05002 	mov	r5, r2
   29458:	1a000011 	bne	294a4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
   2945c:	e594700c 	ldr	r7, [r4, #12]
   29460:	e5944004 	ldr	r4, [r4, #4]
   29464:	e3560000 	cmp	r6, #0
   29468:	0a000016 	beq	294c8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
   2946c:	e3550000 	cmp	r5, #0
   29470:	e5867000 	str	r7, [r6]
   29474:	0a000017 	beq	294d8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x98>
   29478:	e3a00064 	mov	r0, #100	; 0x64
   2947c:	e59f3064 	ldr	r3, [pc, #100]	; 294e8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa8>
   29480:	e59f1064 	ldr	r1, [pc, #100]	; 294ec <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   29484:	e0832493 	umull	r2, r3, r3, r4
   29488:	e1a032a3 	lsr	r3, r3, #5
   2948c:	e0030390 	mul	r3, r0, r3
   29490:	e0444003 	sub	r4, r4, r3
   29494:	e0040491 	mul	r4, r1, r4
   29498:	e3a00001 	mov	r0, #1
   2949c:	e5854000 	str	r4, [r5]
   294a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   294a4:	eb000a24 	bl	2bd3c <EnterCritical>
   294a8:	e5943010 	ldr	r3, [r4, #16]
   294ac:	e594700c 	ldr	r7, [r4, #12]
   294b0:	e3530000 	cmp	r3, #0
   294b4:	e5944004 	ldr	r4, [r4, #4]
   294b8:	0affffe9 	beq	29464 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   294bc:	eb000a49 	bl	2bde8 <LeaveCritical>
   294c0:	e3560000 	cmp	r6, #0
   294c4:	1affffe8 	bne	2946c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   294c8:	e3a02f41 	mov	r2, #260	; 0x104
   294cc:	e59f101c 	ldr	r1, [pc, #28]	; 294f0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   294d0:	e59f001c 	ldr	r0, [pc, #28]	; 294f4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb4>
   294d4:	ebffecc9 	bl	24800 <assertion_failed>
   294d8:	e59f2018 	ldr	r2, [pc, #24]	; 294f8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb8>
   294dc:	e59f100c 	ldr	r1, [pc, #12]	; 294f0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xb0>
   294e0:	e59f0014 	ldr	r0, [pc, #20]	; 294fc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
   294e4:	ebffecc5 	bl	24800 <assertion_failed>
   294e8:	51eb851f 	.word	0x51eb851f
   294ec:	00002710 	.word	0x00002710
   294f0:	00045708 	.word	0x00045708
   294f4:	0004573c 	.word	0x0004573c
   294f8:	00000107 	.word	0x00000107
   294fc:	0004574c 	.word	0x0004574c

00029500 <CTimer::GetUniversalTime() const>:
   29500:	e5903014 	ldr	r3, [r0, #20]
   29504:	e590000c 	ldr	r0, [r0, #12]
   29508:	e0633203 	rsb	r3, r3, r3, lsl #4
   2950c:	e1a03103 	lsl	r3, r3, #2
   29510:	e1530000 	cmp	r3, r0
   29514:	d0400003 	suble	r0, r0, r3
   29518:	c3a00000 	movgt	r0, #0
   2951c:	e12fff1e 	bx	lr

00029520 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   29520:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29524:	e1a04000 	mov	r4, r0
   29528:	e5900010 	ldr	r0, [r0, #16]
   2952c:	e1a08001 	mov	r8, r1
   29530:	e3500000 	cmp	r0, #0
   29534:	e1a06002 	mov	r6, r2
   29538:	1a000019 	bne	295a4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   2953c:	e594500c 	ldr	r5, [r4, #12]
   29540:	e5947004 	ldr	r7, [r4, #4]
   29544:	e5943014 	ldr	r3, [r4, #20]
   29548:	e0633203 	rsb	r3, r3, r3, lsl #4
   2954c:	e1a03103 	lsl	r3, r3, #2
   29550:	e1530005 	cmp	r3, r5
   29554:	ca000010 	bgt	2959c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
   29558:	e3580000 	cmp	r8, #0
   2955c:	0a00001c 	beq	295d4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xb4>
   29560:	e0453003 	sub	r3, r5, r3
   29564:	e3560000 	cmp	r6, #0
   29568:	e5883000 	str	r3, [r8]
   2956c:	0a000014 	beq	295c4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
   29570:	e3a03064 	mov	r3, #100	; 0x64
   29574:	e59f1068 	ldr	r1, [pc, #104]	; 295e4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xc4>
   29578:	e59f2068 	ldr	r2, [pc, #104]	; 295e8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xc8>
   2957c:	e0810791 	umull	r0, r1, r1, r7
   29580:	e1a012a1 	lsr	r1, r1, #5
   29584:	e0030193 	mul	r3, r3, r1
   29588:	e0473003 	sub	r3, r7, r3
   2958c:	e0030392 	mul	r3, r2, r3
   29590:	e3a00001 	mov	r0, #1
   29594:	e5863000 	str	r3, [r6]
   29598:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2959c:	e3a00000 	mov	r0, #0
   295a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   295a4:	eb0009e4 	bl	2bd3c <EnterCritical>
   295a8:	e5943010 	ldr	r3, [r4, #16]
   295ac:	e594500c 	ldr	r5, [r4, #12]
   295b0:	e3530000 	cmp	r3, #0
   295b4:	e5947004 	ldr	r7, [r4, #4]
   295b8:	0affffe1 	beq	29544 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   295bc:	eb000a09 	bl	2bde8 <LeaveCritical>
   295c0:	eaffffdf 	b	29544 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   295c4:	e3a02f4b 	mov	r2, #300	; 0x12c
   295c8:	e59f101c 	ldr	r1, [pc, #28]	; 295ec <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   295cc:	e59f001c 	ldr	r0, [pc, #28]	; 295f0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd0>
   295d0:	ebffec8a 	bl	24800 <assertion_failed>
   295d4:	e59f2018 	ldr	r2, [pc, #24]	; 295f4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd4>
   295d8:	e59f100c 	ldr	r1, [pc, #12]	; 295ec <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xcc>
   295dc:	e59f0014 	ldr	r0, [pc, #20]	; 295f8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
   295e0:	ebffec86 	bl	24800 <assertion_failed>
   295e4:	51eb851f 	.word	0x51eb851f
   295e8:	00002710 	.word	0x00002710
   295ec:	00045708 	.word	0x00045708
   295f0:	0004574c 	.word	0x0004574c
   295f4:	00000129 	.word	0x00000129
   295f8:	0004573c 	.word	0x0004573c

000295fc <CTimer::GetTimeString()>:
   295fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29600:	e1a05000 	mov	r5, r0
   29604:	e5900010 	ldr	r0, [r0, #16]
   29608:	e24dd014 	sub	sp, sp, #20
   2960c:	e3500000 	cmp	r0, #0
   29610:	1a000065 	bne	297ac <CTimer::GetTimeString()+0x1b0>
   29614:	e595400c 	ldr	r4, [r5, #12]
   29618:	e5959004 	ldr	r9, [r5, #4]
   2961c:	e1940009 	orrs	r0, r4, r9
   29620:	0a00003e 	beq	29720 <CTimer::GetTimeString()+0x124>
   29624:	e59f61a0 	ldr	r6, [pc, #416]	; 297cc <CTimer::GetTimeString()+0x1d0>
   29628:	e59f81a0 	ldr	r8, [pc, #416]	; 297d0 <CTimer::GetTimeString()+0x1d4>
   2962c:	e0873496 	umull	r3, r7, r6, r4
   29630:	e1a072a7 	lsr	r7, r7, #5
   29634:	e0863796 	umull	r3, r6, r6, r7
   29638:	e59f3194 	ldr	r3, [pc, #404]	; 297d4 <CTimer::GetTimeString()+0x1d8>
   2963c:	e0882498 	umull	r2, r8, r8, r4
   29640:	e0832493 	umull	r2, r3, r3, r4
   29644:	e1a062a6 	lsr	r6, r6, #5
   29648:	e0666206 	rsb	r6, r6, r6, lsl #4
   2964c:	e0672207 	rsb	r2, r7, r7, lsl #4
   29650:	e0476106 	sub	r6, r7, r6, lsl #2
   29654:	e3a0a064 	mov	sl, #100	; 0x64
   29658:	e0447102 	sub	r7, r4, r2, lsl #2
   2965c:	e3a0be19 	mov	fp, #400	; 0x190
   29660:	e59f5170 	ldr	r5, [pc, #368]	; 297d8 <CTimer::GetTimeString()+0x1dc>
   29664:	e59fe170 	ldr	lr, [pc, #368]	; 297dc <CTimer::GetTimeString()+0x1e0>
   29668:	e59fc170 	ldr	ip, [pc, #368]	; 297e0 <CTimer::GetTimeString()+0x1e4>
   2966c:	e59f0170 	ldr	r0, [pc, #368]	; 297e4 <CTimer::GetTimeString()+0x1e8>
   29670:	e1a085a8 	lsr	r8, r8, #11
   29674:	e1a04823 	lsr	r4, r3, #16
   29678:	ea00000a 	b	296a8 <CTimer::GetTimeString()+0xac>
   2967c:	e001019b 	mul	r1, fp, r1
   29680:	e0451001 	sub	r1, r5, r1
   29684:	e16f1f11 	clz	r1, r1
   29688:	e1a012a1 	lsr	r1, r1, #5
   2968c:	e3510000 	cmp	r1, #0
   29690:	01a0300c 	moveq	r3, ip
   29694:	11a03000 	movne	r3, r0
   29698:	e1540003 	cmp	r4, r3
   2969c:	3a000021 	bcc	29728 <CTimer::GetTimeString()+0x12c>
   296a0:	e0444003 	sub	r4, r4, r3
   296a4:	e2855001 	add	r5, r5, #1
   296a8:	e081359e 	umull	r3, r1, lr, r5
   296ac:	e1a032a1 	lsr	r3, r1, #5
   296b0:	e003039a 	mul	r3, sl, r3
   296b4:	e1550003 	cmp	r5, r3
   296b8:	e1a013a1 	lsr	r1, r1, #7
   296bc:	0affffee 	beq	2967c <CTimer::GetTimeString()+0x80>
   296c0:	e3150003 	tst	r5, #3
   296c4:	03a01001 	moveq	r1, #1
   296c8:	13a01000 	movne	r1, #0
   296cc:	eaffffee 	b	2968c <CTimer::GetTimeString()+0x90>
   296d0:	e3a03064 	mov	r3, #100	; 0x64
   296d4:	e59fb100 	ldr	fp, [pc, #256]	; 297dc <CTimer::GetTimeString()+0x1e0>
   296d8:	e3a00010 	mov	r0, #16
   296dc:	e08b299b 	umull	r2, fp, fp, r9
   296e0:	e1a0b2ab 	lsr	fp, fp, #5
   296e4:	e00b0b93 	mul	fp, r3, fp
   296e8:	eb000661 	bl	2b074 <operator new(unsigned int)>
   296ec:	e049b00b 	sub	fp, r9, fp
   296f0:	e1a09000 	mov	r9, r0
   296f4:	ebfff91a 	bl	27b64 <CString::CString()>
   296f8:	e59f30e8 	ldr	r3, [pc, #232]	; 297e8 <CTimer::GetTimeString()+0x1ec>
   296fc:	e1550003 	cmp	r5, r3
   29700:	8a000018 	bhi	29768 <CTimer::GetTimeString()+0x16c>
   29704:	e1a00009 	mov	r0, r9
   29708:	e88d0880 	stm	sp, {r7, fp}
   2970c:	e1a03006 	mov	r3, r6
   29710:	e1a02008 	mov	r2, r8
   29714:	e59f10d0 	ldr	r1, [pc, #208]	; 297ec <CTimer::GetTimeString()+0x1f0>
   29718:	ebfffe54 	bl	29070 <CString::Format(char const*, ...)>
   2971c:	e1a00009 	mov	r0, r9
   29720:	e28dd014 	add	sp, sp, #20
   29724:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29728:	e3a0a000 	mov	sl, #0
   2972c:	e3a0001d 	mov	r0, #29
   29730:	e59f20b8 	ldr	r2, [pc, #184]	; 297f0 <CTimer::GetTimeString()+0x1f4>
   29734:	ea000004 	b	2974c <CTimer::GetTimeString()+0x150>
   29738:	e1a03000 	mov	r3, r0
   2973c:	e1540003 	cmp	r4, r3
   29740:	3affffe2 	bcc	296d0 <CTimer::GetTimeString()+0xd4>
   29744:	e0444003 	sub	r4, r4, r3
   29748:	e28aa001 	add	sl, sl, #1
   2974c:	e35a0001 	cmp	sl, #1
   29750:	13a03000 	movne	r3, #0
   29754:	02013001 	andeq	r3, r1, #1
   29758:	e3530000 	cmp	r3, #0
   2975c:	1afffff5 	bne	29738 <CTimer::GetTimeString()+0x13c>
   29760:	e792310a 	ldr	r3, [r2, sl, lsl #2]
   29764:	eafffff4 	b	2973c <CTimer::GetTimeString()+0x140>
   29768:	e59f3084 	ldr	r3, [pc, #132]	; 297f4 <CTimer::GetTimeString()+0x1f8>
   2976c:	e58db00c 	str	fp, [sp, #12]
   29770:	e0832893 	umull	r2, r3, r3, r8
   29774:	e1a03223 	lsr	r3, r3, #4
   29778:	e0833083 	add	r3, r3, r3, lsl #1
   2977c:	e59f2074 	ldr	r2, [pc, #116]	; 297f8 <CTimer::GetTimeString()+0x1fc>
   29780:	e0488183 	sub	r8, r8, r3, lsl #3
   29784:	e792210a 	ldr	r2, [r2, sl, lsl #2]
   29788:	e1a00009 	mov	r0, r9
   2978c:	e98d00c0 	stmib	sp, {r6, r7}
   29790:	e2843001 	add	r3, r4, #1
   29794:	e58d8000 	str	r8, [sp]
   29798:	e59f105c 	ldr	r1, [pc, #92]	; 297fc <CTimer::GetTimeString()+0x200>
   2979c:	ebfffe33 	bl	29070 <CString::Format(char const*, ...)>
   297a0:	e1a00009 	mov	r0, r9
   297a4:	e28dd014 	add	sp, sp, #20
   297a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   297ac:	eb000962 	bl	2bd3c <EnterCritical>
   297b0:	e5953010 	ldr	r3, [r5, #16]
   297b4:	e595400c 	ldr	r4, [r5, #12]
   297b8:	e3530000 	cmp	r3, #0
   297bc:	e5959004 	ldr	r9, [r5, #4]
   297c0:	0affff95 	beq	2961c <CTimer::GetTimeString()+0x20>
   297c4:	eb000987 	bl	2bde8 <LeaveCritical>
   297c8:	eaffff93 	b	2961c <CTimer::GetTimeString()+0x20>
   297cc:	88888889 	.word	0x88888889
   297d0:	91a2b3c5 	.word	0x91a2b3c5
   297d4:	c22e4507 	.word	0xc22e4507
   297d8:	000007b2 	.word	0x000007b2
   297dc:	51eb851f 	.word	0x51eb851f
   297e0:	0000016d 	.word	0x0000016d
   297e4:	0000016e 	.word	0x0000016e
   297e8:	000007b7 	.word	0x000007b7
   297ec:	0004577c 	.word	0x0004577c
   297f0:	000456d0 	.word	0x000456d0
   297f4:	aaaaaaab 	.word	0xaaaaaaab
   297f8:	000481f8 	.word	0x000481f8
   297fc:	00045760 	.word	0x00045760

00029800 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   29800:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29804:	e1a09000 	mov	r9, r0
   29808:	e1a04002 	mov	r4, r2
   2980c:	e1a05001 	mov	r5, r1
   29810:	e3a00014 	mov	r0, #20
   29814:	e1a08003 	mov	r8, r3
   29818:	eb000615 	bl	2b074 <operator new(unsigned int)>
   2981c:	e5996004 	ldr	r6, [r9, #4]
   29820:	e3540000 	cmp	r4, #0
   29824:	e0866005 	add	r6, r6, r5
   29828:	0a000033 	beq	298fc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
   2982c:	e1a07000 	mov	r7, r0
   29830:	e599001c 	ldr	r0, [r9, #28]
   29834:	e59f30e4 	ldr	r3, [pc, #228]	; 29920 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
   29838:	e59d2020 	ldr	r2, [sp, #32]
   2983c:	e3500000 	cmp	r0, #0
   29840:	e9870150 	stmib	r7, {r4, r6, r8}
   29844:	e5872010 	str	r2, [r7, #16]
   29848:	e5873000 	str	r3, [r7]
   2984c:	1a000020 	bne	298d4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd4>
   29850:	e2895018 	add	r5, r9, #24
   29854:	e1a00005 	mov	r0, r5
   29858:	eb000c8e 	bl	2ca98 <CPtrList::GetFirst()>
   2985c:	e2504000 	subs	r4, r0, #0
   29860:	0a000029 	beq	2990c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   29864:	e59f80b4 	ldr	r8, [pc, #180]	; 29920 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
   29868:	e1a01004 	mov	r1, r4
   2986c:	e1a00005 	mov	r0, r5
   29870:	eb000c9f 	bl	2caf4 <CPtrList::GetPtr(TPtrListElement*)>
   29874:	e3500000 	cmp	r0, #0
   29878:	0a00000d 	beq	298b4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xb4>
   2987c:	e5903000 	ldr	r3, [r0]
   29880:	e1530008 	cmp	r3, r8
   29884:	1a00000e 	bne	298c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc4>
   29888:	e5903008 	ldr	r3, [r0, #8]
   2988c:	e1a01004 	mov	r1, r4
   29890:	e0433006 	sub	r3, r3, r6
   29894:	e3530000 	cmp	r3, #0
   29898:	e1a00005 	mov	r0, r5
   2989c:	ca00000e 	bgt	298dc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
   298a0:	eb000c7e 	bl	2caa0 <CPtrList::GetNext(TPtrListElement*)>
   298a4:	e3500000 	cmp	r0, #0
   298a8:	0a000017 	beq	2990c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
   298ac:	e1a04000 	mov	r4, r0
   298b0:	eaffffec 	b	29868 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x68>
   298b4:	e59f2068 	ldr	r2, [pc, #104]	; 29924 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x124>
   298b8:	e59f1068 	ldr	r1, [pc, #104]	; 29928 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   298bc:	e59f0068 	ldr	r0, [pc, #104]	; 2992c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x12c>
   298c0:	ebffebce 	bl	24800 <assertion_failed>
   298c4:	e3a02f65 	mov	r2, #404	; 0x194
   298c8:	e59f1058 	ldr	r1, [pc, #88]	; 29928 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   298cc:	e59f005c 	ldr	r0, [pc, #92]	; 29930 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
   298d0:	ebffebca 	bl	24800 <assertion_failed>
   298d4:	eb000918 	bl	2bd3c <EnterCritical>
   298d8:	eaffffdc 	b	29850 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x50>
   298dc:	e1a02007 	mov	r2, r7
   298e0:	eb000c98 	bl	2cb48 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   298e4:	e599301c 	ldr	r3, [r9, #28]
   298e8:	e3530000 	cmp	r3, #0
   298ec:	0a000000 	beq	298f4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf4>
   298f0:	eb00093c 	bl	2bde8 <LeaveCritical>
   298f4:	e1a00007 	mov	r0, r7
   298f8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   298fc:	e59f2030 	ldr	r2, [pc, #48]	; 29934 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x134>
   29900:	e59f1020 	ldr	r1, [pc, #32]	; 29928 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
   29904:	e59f002c 	ldr	r0, [pc, #44]	; 29938 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
   29908:	ebffebbc 	bl	24800 <assertion_failed>
   2990c:	e1a01004 	mov	r1, r4
   29910:	e1a00005 	mov	r0, r5
   29914:	e1a02007 	mov	r2, r7
   29918:	eb000cc3 	bl	2cc2c <CPtrList::InsertAfter(TPtrListElement*, void*)>
   2991c:	eafffff0 	b	298e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe4>
   29920:	4b544d43 	.word	0x4b544d43
   29924:	00000193 	.word	0x00000193
   29928:	00045708 	.word	0x00045708
   2992c:	00045790 	.word	0x00045790
   29930:	000457a0 	.word	0x000457a0
   29934:	00000183 	.word	0x00000183
   29938:	00045bfc 	.word	0x00045bfc

0002993c <CTimer::CancelKernelTimer(unsigned int)>:
   2993c:	e92d4070 	push	{r4, r5, r6, lr}
   29940:	e2514000 	subs	r4, r1, #0
   29944:	0a00001b 	beq	299b8 <CTimer::CancelKernelTimer(unsigned int)+0x7c>
   29948:	e1a05000 	mov	r5, r0
   2994c:	e590001c 	ldr	r0, [r0, #28]
   29950:	e3500000 	cmp	r0, #0
   29954:	1a000015 	bne	299b0 <CTimer::CancelKernelTimer(unsigned int)+0x74>
   29958:	e2856018 	add	r6, r5, #24
   2995c:	e1a01004 	mov	r1, r4
   29960:	e1a00006 	mov	r0, r6
   29964:	eb000d30 	bl	2ce2c <CPtrList::Find(void*)>
   29968:	e2501000 	subs	r1, r0, #0
   2996c:	0a00000a 	beq	2999c <CTimer::CancelKernelTimer(unsigned int)+0x60>
   29970:	e59f3060 	ldr	r3, [pc, #96]	; 299d8 <CTimer::CancelKernelTimer(unsigned int)+0x9c>
   29974:	e5942000 	ldr	r2, [r4]
   29978:	e1520003 	cmp	r2, r3
   2997c:	1a000011 	bne	299c8 <CTimer::CancelKernelTimer(unsigned int)+0x8c>
   29980:	e1a00006 	mov	r0, r6
   29984:	eb000ce1 	bl	2cd10 <CPtrList::Remove(TPtrListElement*)>
   29988:	e3a03000 	mov	r3, #0
   2998c:	e1a00004 	mov	r0, r4
   29990:	e5843000 	str	r3, [r4]
   29994:	e3a01014 	mov	r1, #20
   29998:	eb0005c3 	bl	2b0ac <operator delete(void*, unsigned int)>
   2999c:	e595301c 	ldr	r3, [r5, #28]
   299a0:	e3530000 	cmp	r3, #0
   299a4:	08bd8070 	popeq	{r4, r5, r6, pc}
   299a8:	e8bd4070 	pop	{r4, r5, r6, lr}
   299ac:	ea00090d 	b	2bde8 <LeaveCritical>
   299b0:	eb0008e1 	bl	2bd3c <EnterCritical>
   299b4:	eaffffe7 	b	29958 <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   299b8:	e3a02e1b 	mov	r2, #432	; 0x1b0
   299bc:	e59f1018 	ldr	r1, [pc, #24]	; 299dc <CTimer::CancelKernelTimer(unsigned int)+0xa0>
   299c0:	e59f0018 	ldr	r0, [pc, #24]	; 299e0 <CTimer::CancelKernelTimer(unsigned int)+0xa4>
   299c4:	ebffeb8d 	bl	24800 <assertion_failed>
   299c8:	e59f2014 	ldr	r2, [pc, #20]	; 299e4 <CTimer::CancelKernelTimer(unsigned int)+0xa8>
   299cc:	e59f1008 	ldr	r1, [pc, #8]	; 299dc <CTimer::CancelKernelTimer(unsigned int)+0xa0>
   299d0:	e59f0010 	ldr	r0, [pc, #16]	; 299e8 <CTimer::CancelKernelTimer(unsigned int)+0xac>
   299d4:	ebffeb89 	bl	24800 <assertion_failed>
   299d8:	4b544d43 	.word	0x4b544d43
   299dc:	00045708 	.word	0x00045708
   299e0:	00041424 	.word	0x00041424
   299e4:	000001b7 	.word	0x000001b7
   299e8:	00045714 	.word	0x00045714

000299ec <CTimer::PollKernelTimers()>:
   299ec:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   299f0:	e1a06000 	mov	r6, r0
   299f4:	e590001c 	ldr	r0, [r0, #28]
   299f8:	e3500000 	cmp	r0, #0
   299fc:	1a000045 	bne	29b18 <CTimer::PollKernelTimers()+0x12c>
   29a00:	e2867018 	add	r7, r6, #24
   29a04:	e1a00007 	mov	r0, r7
   29a08:	eb000c22 	bl	2ca98 <CPtrList::GetFirst()>
   29a0c:	e2505000 	subs	r5, r0, #0
   29a10:	0a000029 	beq	29abc <CTimer::PollKernelTimers()+0xd0>
   29a14:	e3a0a000 	mov	sl, #0
   29a18:	e3a09014 	mov	r9, #20
   29a1c:	e59f80fc 	ldr	r8, [pc, #252]	; 29b20 <CTimer::PollKernelTimers()+0x134>
   29a20:	e1a01005 	mov	r1, r5
   29a24:	e1a00007 	mov	r0, r7
   29a28:	eb000c31 	bl	2caf4 <CPtrList::GetPtr(TPtrListElement*)>
   29a2c:	e2504000 	subs	r4, r0, #0
   29a30:	0a000030 	beq	29af8 <CTimer::PollKernelTimers()+0x10c>
   29a34:	e5943000 	ldr	r3, [r4]
   29a38:	e1530008 	cmp	r3, r8
   29a3c:	1a000031 	bne	29b08 <CTimer::PollKernelTimers()+0x11c>
   29a40:	e5962004 	ldr	r2, [r6, #4]
   29a44:	e5943008 	ldr	r3, [r4, #8]
   29a48:	e0433002 	sub	r3, r3, r2
   29a4c:	e3530000 	cmp	r3, #0
   29a50:	ca000019 	bgt	29abc <CTimer::PollKernelTimers()+0xd0>
   29a54:	e1a01005 	mov	r1, r5
   29a58:	e1a00007 	mov	r0, r7
   29a5c:	eb000c0f 	bl	2caa0 <CPtrList::GetNext(TPtrListElement*)>
   29a60:	e1a01005 	mov	r1, r5
   29a64:	e1a0b000 	mov	fp, r0
   29a68:	e1a00007 	mov	r0, r7
   29a6c:	eb000ca7 	bl	2cd10 <CPtrList::Remove(TPtrListElement*)>
   29a70:	e596301c 	ldr	r3, [r6, #28]
   29a74:	e3530000 	cmp	r3, #0
   29a78:	1a000014 	bne	29ad0 <CTimer::PollKernelTimers()+0xe4>
   29a7c:	e5943004 	ldr	r3, [r4, #4]
   29a80:	e3530000 	cmp	r3, #0
   29a84:	0a000015 	beq	29ae0 <CTimer::PollKernelTimers()+0xf4>
   29a88:	e5942010 	ldr	r2, [r4, #16]
   29a8c:	e594100c 	ldr	r1, [r4, #12]
   29a90:	e1a00004 	mov	r0, r4
   29a94:	e12fff33 	blx	r3
   29a98:	e1a00004 	mov	r0, r4
   29a9c:	e584a000 	str	sl, [r4]
   29aa0:	e1a01009 	mov	r1, r9
   29aa4:	eb000580 	bl	2b0ac <operator delete(void*, unsigned int)>
   29aa8:	e596001c 	ldr	r0, [r6, #28]
   29aac:	e3500000 	cmp	r0, #0
   29ab0:	1a00000e 	bne	29af0 <CTimer::PollKernelTimers()+0x104>
   29ab4:	e25b5000 	subs	r5, fp, #0
   29ab8:	1affffd8 	bne	29a20 <CTimer::PollKernelTimers()+0x34>
   29abc:	e596301c 	ldr	r3, [r6, #28]
   29ac0:	e3530000 	cmp	r3, #0
   29ac4:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ac8:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29acc:	ea0008c5 	b	2bde8 <LeaveCritical>
   29ad0:	eb0008c4 	bl	2bde8 <LeaveCritical>
   29ad4:	e5943004 	ldr	r3, [r4, #4]
   29ad8:	e3530000 	cmp	r3, #0
   29adc:	1affffe9 	bne	29a88 <CTimer::PollKernelTimers()+0x9c>
   29ae0:	e59f203c 	ldr	r2, [pc, #60]	; 29b24 <CTimer::PollKernelTimers()+0x138>
   29ae4:	e59f103c 	ldr	r1, [pc, #60]	; 29b28 <CTimer::PollKernelTimers()+0x13c>
   29ae8:	e59f003c 	ldr	r0, [pc, #60]	; 29b2c <CTimer::PollKernelTimers()+0x140>
   29aec:	ebffeb43 	bl	24800 <assertion_failed>
   29af0:	eb000891 	bl	2bd3c <EnterCritical>
   29af4:	eaffffee 	b	29ab4 <CTimer::PollKernelTimers()+0xc8>
   29af8:	e3a02f73 	mov	r2, #460	; 0x1cc
   29afc:	e59f1024 	ldr	r1, [pc, #36]	; 29b28 <CTimer::PollKernelTimers()+0x13c>
   29b00:	e59f0028 	ldr	r0, [pc, #40]	; 29b30 <CTimer::PollKernelTimers()+0x144>
   29b04:	ebffeb3d 	bl	24800 <assertion_failed>
   29b08:	e59f2024 	ldr	r2, [pc, #36]	; 29b34 <CTimer::PollKernelTimers()+0x148>
   29b0c:	e59f1014 	ldr	r1, [pc, #20]	; 29b28 <CTimer::PollKernelTimers()+0x13c>
   29b10:	e59f0020 	ldr	r0, [pc, #32]	; 29b38 <CTimer::PollKernelTimers()+0x14c>
   29b14:	ebffeb39 	bl	24800 <assertion_failed>
   29b18:	eb000887 	bl	2bd3c <EnterCritical>
   29b1c:	eaffffb7 	b	29a00 <CTimer::PollKernelTimers()+0x14>
   29b20:	4b544d43 	.word	0x4b544d43
   29b24:	000001db 	.word	0x000001db
   29b28:	00045708 	.word	0x00045708
   29b2c:	00045bfc 	.word	0x00045bfc
   29b30:	00041424 	.word	0x00041424
   29b34:	000001cd 	.word	0x000001cd
   29b38:	00045714 	.word	0x00045714

00029b3c <CTimer::InterruptHandler()>:
   29b3c:	e92d4070 	push	{r4, r5, r6, lr}
   29b40:	e3a03000 	mov	r3, #0
   29b44:	e1a04000 	mov	r4, r0
   29b48:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   29b4c:	e59f20fc 	ldr	r2, [pc, #252]	; 29c50 <CTimer::InterruptHandler()+0x114>
   29b50:	e5923018 	ldr	r3, [r2, #24]
   29b54:	e2833c27 	add	r3, r3, #9984	; 0x2700
   29b58:	e2833010 	add	r3, r3, #16
   29b5c:	e5823018 	str	r3, [r2, #24]
   29b60:	e5921004 	ldr	r1, [r2, #4]
   29b64:	e1530001 	cmp	r3, r1
   29b68:	e3a01008 	mov	r1, #8
   29b6c:	35923004 	ldrcc	r3, [r2, #4]
   29b70:	32833c27 	addcc	r3, r3, #9984	; 0x2700
   29b74:	32833010 	addcc	r3, r3, #16
   29b78:	35823018 	strcc	r3, [r2, #24]
   29b7c:	e59f20cc 	ldr	r2, [pc, #204]	; 29c50 <CTimer::InterruptHandler()+0x114>
   29b80:	e3a03000 	mov	r3, #0
   29b84:	e5821000 	str	r1, [r2]
   29b88:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   29b8c:	e5900010 	ldr	r0, [r0, #16]
   29b90:	e1500003 	cmp	r0, r3
   29b94:	1a000017 	bne	29bf8 <CTimer::InterruptHandler()+0xbc>
   29b98:	e3a01064 	mov	r1, #100	; 0x64
   29b9c:	e5942004 	ldr	r2, [r4, #4]
   29ba0:	e59f30ac 	ldr	r3, [pc, #172]	; 29c54 <CTimer::InterruptHandler()+0x118>
   29ba4:	e2822001 	add	r2, r2, #1
   29ba8:	e0830293 	umull	r0, r3, r3, r2
   29bac:	e1a032a3 	lsr	r3, r3, #5
   29bb0:	e0030391 	mul	r3, r1, r3
   29bb4:	e0523003 	subs	r3, r2, r3
   29bb8:	e5842004 	str	r2, [r4, #4]
   29bbc:	0a000019 	beq	29c28 <CTimer::InterruptHandler()+0xec>
   29bc0:	e1a00004 	mov	r0, r4
   29bc4:	ebffff88 	bl	299ec <CTimer::PollKernelTimers()>
   29bc8:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   29bcc:	e3530000 	cmp	r3, #0
   29bd0:	08bd8070 	popeq	{r4, r5, r6, pc}
   29bd4:	e3a05000 	mov	r5, #0
   29bd8:	e2846028 	add	r6, r4, #40	; 0x28
   29bdc:	e4963004 	ldr	r3, [r6], #4
   29be0:	e12fff33 	blx	r3
   29be4:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   29be8:	e2855001 	add	r5, r5, #1
   29bec:	e1530005 	cmp	r3, r5
   29bf0:	8afffff9 	bhi	29bdc <CTimer::InterruptHandler()+0xa0>
   29bf4:	e8bd8070 	pop	{r4, r5, r6, pc}
   29bf8:	eb00084f 	bl	2bd3c <EnterCritical>
   29bfc:	e3a01064 	mov	r1, #100	; 0x64
   29c00:	e5943004 	ldr	r3, [r4, #4]
   29c04:	e59f2048 	ldr	r2, [pc, #72]	; 29c54 <CTimer::InterruptHandler()+0x118>
   29c08:	e2833001 	add	r3, r3, #1
   29c0c:	e0820392 	umull	r0, r2, r2, r3
   29c10:	e1a022a2 	lsr	r2, r2, #5
   29c14:	e0020291 	mul	r2, r1, r2
   29c18:	e1530002 	cmp	r3, r2
   29c1c:	e5843004 	str	r3, [r4, #4]
   29c20:	e5943010 	ldr	r3, [r4, #16]
   29c24:	1a000005 	bne	29c40 <CTimer::InterruptHandler()+0x104>
   29c28:	e5942008 	ldr	r2, [r4, #8]
   29c2c:	e2822001 	add	r2, r2, #1
   29c30:	e5842008 	str	r2, [r4, #8]
   29c34:	e594200c 	ldr	r2, [r4, #12]
   29c38:	e2822001 	add	r2, r2, #1
   29c3c:	e584200c 	str	r2, [r4, #12]
   29c40:	e3530000 	cmp	r3, #0
   29c44:	0affffdd 	beq	29bc0 <CTimer::InterruptHandler()+0x84>
   29c48:	eb000866 	bl	2bde8 <LeaveCritical>
   29c4c:	eaffffdb 	b	29bc0 <CTimer::InterruptHandler()+0x84>
   29c50:	20003000 	.word	0x20003000
   29c54:	51eb851f 	.word	0x51eb851f

00029c58 <CTimer::InterruptHandler(void*)>:
   29c58:	e3500000 	cmp	r0, #0
   29c5c:	0a000000 	beq	29c64 <CTimer::InterruptHandler(void*)+0xc>
   29c60:	eaffffb5 	b	29b3c <CTimer::InterruptHandler()>
   29c64:	e92d4010 	push	{r4, lr}
   29c68:	e59f2008 	ldr	r2, [pc, #8]	; 29c78 <CTimer::InterruptHandler(void*)+0x20>
   29c6c:	e59f1008 	ldr	r1, [pc, #8]	; 29c7c <CTimer::InterruptHandler(void*)+0x24>
   29c70:	e59f0008 	ldr	r0, [pc, #8]	; 29c80 <CTimer::InterruptHandler(void*)+0x28>
   29c74:	ebffeae1 	bl	24800 <assertion_failed>
   29c78:	00000223 	.word	0x00000223
   29c7c:	00045708 	.word	0x00045708
   29c80:	0003f168 	.word	0x0003f168

00029c84 <CTimer::TuneMsDelay()>:
   29c84:	e92d4070 	push	{r4, r5, r6, lr}
   29c88:	e1a05000 	mov	r5, r0
   29c8c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   29c90:	e5953020 	ldr	r3, [r5, #32]
   29c94:	e24dd008 	sub	sp, sp, #8
   29c98:	e0000390 	mul	r0, r0, r3
   29c9c:	e5954004 	ldr	r4, [r5, #4]
   29ca0:	eb000a9e 	bl	2c720 <DelayLoop>
   29ca4:	e5951004 	ldr	r1, [r5, #4]
   29ca8:	e59f0068 	ldr	r0, [pc, #104]	; 29d18 <CTimer::TuneMsDelay()+0x94>
   29cac:	e0411004 	sub	r1, r1, r4
   29cb0:	eb004ff5 	bl	3dc8c <__aeabi_uidiv>
   29cb4:	e5953020 	ldr	r3, [r5, #32]
   29cb8:	e59f405c 	ldr	r4, [pc, #92]	; 29d1c <CTimer::TuneMsDelay()+0x98>
   29cbc:	e0030093 	mul	r3, r3, r0
   29cc0:	e0832394 	umull	r2, r3, r4, r3
   29cc4:	e59f1054 	ldr	r1, [pc, #84]	; 29d20 <CTimer::TuneMsDelay()+0x9c>
   29cc8:	e1a032a3 	lsr	r3, r3, #5
   29ccc:	e2832f7d 	add	r2, r3, #500	; 0x1f4
   29cd0:	e0821291 	umull	r1, r2, r1, r2
   29cd4:	e1a06000 	mov	r6, r0
   29cd8:	e1a02322 	lsr	r2, r2, #6
   29cdc:	e5852024 	str	r2, [r5, #36]	; 0x24
   29ce0:	e5853020 	str	r3, [r5, #32]
   29ce4:	ebfff3b8 	bl	26bcc <CLogger::Get()>
   29ce8:	e3a03064 	mov	r3, #100	; 0x64
   29cec:	e0842694 	umull	r2, r4, r4, r6
   29cf0:	e1a042a4 	lsr	r4, r4, #5
   29cf4:	e0030493 	mul	r3, r3, r4
   29cf8:	e0466003 	sub	r6, r6, r3
   29cfc:	e88d0050 	stm	sp, {r4, r6}
   29d00:	e59f301c 	ldr	r3, [pc, #28]	; 29d24 <CTimer::TuneMsDelay()+0xa0>
   29d04:	e3a02003 	mov	r2, #3
   29d08:	e59f1018 	ldr	r1, [pc, #24]	; 29d28 <CTimer::TuneMsDelay()+0xa4>
   29d0c:	ebfff2eb 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29d10:	e28dd008 	add	sp, sp, #8
   29d14:	e8bd8070 	pop	{r4, r5, r6, pc}
   29d18:	00002710 	.word	0x00002710
   29d1c:	51eb851f 	.word	0x51eb851f
   29d20:	10624dd3 	.word	0x10624dd3
   29d24:	000457c8 	.word	0x000457c8
   29d28:	00045700 	.word	0x00045700

00029d2c <CTimer::Initialize()>:
   29d2c:	e92d4070 	push	{r4, r5, r6, lr}
   29d30:	e1a04000 	mov	r4, r0
   29d34:	e5900000 	ldr	r0, [r0]
   29d38:	e3500000 	cmp	r0, #0
   29d3c:	0a000011 	beq	29d88 <CTimer::Initialize()+0x5c>
   29d40:	e1a03004 	mov	r3, r4
   29d44:	e59f204c 	ldr	r2, [pc, #76]	; 29d98 <CTimer::Initialize()+0x6c>
   29d48:	e3a01003 	mov	r1, #3
   29d4c:	eb0008fb 	bl	2c140 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   29d50:	e3a05000 	mov	r5, #0
   29d54:	ee075f9a 	mcr	15, 0, r5, cr7, cr10, {4}
   29d58:	e59f203c 	ldr	r2, [pc, #60]	; 29d9c <CTimer::Initialize()+0x70>
   29d5c:	e59f303c 	ldr	r3, [pc, #60]	; 29da0 <CTimer::Initialize()+0x74>
   29d60:	e1a00004 	mov	r0, r4
   29d64:	e5823004 	str	r3, [r2, #4]
   29d68:	e5923004 	ldr	r3, [r2, #4]
   29d6c:	e2833c27 	add	r3, r3, #9984	; 0x2700
   29d70:	e2833010 	add	r3, r3, #16
   29d74:	e5823018 	str	r3, [r2, #24]
   29d78:	ebffffc1 	bl	29c84 <CTimer::TuneMsDelay()>
   29d7c:	ee075fba 	mcr	15, 0, r5, cr7, cr10, {5}
   29d80:	e3a00001 	mov	r0, #1
   29d84:	e8bd8070 	pop	{r4, r5, r6, pc}
   29d88:	e3a02065 	mov	r2, #101	; 0x65
   29d8c:	e59f1010 	ldr	r1, [pc, #16]	; 29da4 <CTimer::Initialize()+0x78>
   29d90:	e59f0010 	ldr	r0, [pc, #16]	; 29da8 <CTimer::Initialize()+0x7c>
   29d94:	ebffea99 	bl	24800 <assertion_failed>
   29d98:	00029c58 	.word	0x00029c58
   29d9c:	20003000 	.word	0x20003000
   29da0:	fe363c80 	.word	0xfe363c80
   29da4:	00045708 	.word	0x00045708
   29da8:	0003f1a0 	.word	0x0003f1a0

00029dac <CTimer::RegisterPeriodicHandler(void (*)())>:
   29dac:	e3510000 	cmp	r1, #0
   29db0:	e92d4010 	push	{r4, lr}
   29db4:	0a00000b 	beq	29de8 <CTimer::RegisterPeriodicHandler(void (*)())+0x3c>
   29db8:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29dbc:	e3530003 	cmp	r3, #3
   29dc0:	8a00000c 	bhi	29df8 <CTimer::RegisterPeriodicHandler(void (*)())+0x4c>
   29dc4:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29dc8:	e3a02000 	mov	r2, #0
   29dcc:	e283300a 	add	r3, r3, #10
   29dd0:	e7801103 	str	r1, [r0, r3, lsl #2]
   29dd4:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   29dd8:	e5903038 	ldr	r3, [r0, #56]	; 0x38
   29ddc:	e2833001 	add	r3, r3, #1
   29de0:	e5803038 	str	r3, [r0, #56]	; 0x38
   29de4:	e8bd8010 	pop	{r4, pc}
   29de8:	e59f2018 	ldr	r2, [pc, #24]	; 29e08 <CTimer::RegisterPeriodicHandler(void (*)())+0x5c>
   29dec:	e59f1018 	ldr	r1, [pc, #24]	; 29e0c <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   29df0:	e59f0018 	ldr	r0, [pc, #24]	; 29e10 <CTimer::RegisterPeriodicHandler(void (*)())+0x64>
   29df4:	ebffea81 	bl	24800 <assertion_failed>
   29df8:	e59f2014 	ldr	r2, [pc, #20]	; 29e14 <CTimer::RegisterPeriodicHandler(void (*)())+0x68>
   29dfc:	e59f1008 	ldr	r1, [pc, #8]	; 29e0c <CTimer::RegisterPeriodicHandler(void (*)())+0x60>
   29e00:	e59f0010 	ldr	r0, [pc, #16]	; 29e18 <CTimer::RegisterPeriodicHandler(void (*)())+0x6c>
   29e04:	ebffea7d 	bl	24800 <assertion_failed>
   29e08:	00000239 	.word	0x00000239
   29e0c:	00045708 	.word	0x00045708
   29e10:	00045bfc 	.word	0x00045bfc
   29e14:	0000023b 	.word	0x0000023b
   29e18:	000457e0 	.word	0x000457e0

00029e1c <CTimer::SimpleMsDelay(unsigned int)>:
   29e1c:	e3500000 	cmp	r0, #0
   29e20:	012fff1e 	bxeq	lr
   29e24:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   29e28:	e0000093 	mul	r0, r3, r0
   29e2c:	e3500000 	cmp	r0, #0
   29e30:	012fff1e 	bxeq	lr
   29e34:	eafffce3 	b	291c8 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>

00029e38 <CTimer::SimpleusDelay(unsigned int)>:
   29e38:	e3500000 	cmp	r0, #0
   29e3c:	012fff1e 	bxeq	lr
   29e40:	eafffce0 	b	291c8 <CTimer::SimpleusDelay(unsigned int) [clone .part.3]>

00029e44 <CTimer::IsLeapYear(unsigned int)>:
   29e44:	e3a02064 	mov	r2, #100	; 0x64
   29e48:	e59f303c 	ldr	r3, [pc, #60]	; 29e8c <CTimer::IsLeapYear(unsigned int)+0x48>
   29e4c:	e0831093 	umull	r1, r3, r3, r0
   29e50:	e1a012a3 	lsr	r1, r3, #5
   29e54:	e0020192 	mul	r2, r2, r1
   29e58:	e1500002 	cmp	r0, r2
   29e5c:	0a000003 	beq	29e70 <CTimer::IsLeapYear(unsigned int)+0x2c>
   29e60:	e3100003 	tst	r0, #3
   29e64:	03a00001 	moveq	r0, #1
   29e68:	13a00000 	movne	r0, #0
   29e6c:	e12fff1e 	bx	lr
   29e70:	e3a02e19 	mov	r2, #400	; 0x190
   29e74:	e1a033a3 	lsr	r3, r3, #7
   29e78:	e0030392 	mul	r3, r2, r3
   29e7c:	e0400003 	sub	r0, r0, r3
   29e80:	e16f0f10 	clz	r0, r0
   29e84:	e1a002a0 	lsr	r0, r0, #5
   29e88:	e12fff1e 	bx	lr
   29e8c:	51eb851f 	.word	0x51eb851f

00029e90 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   29e90:	e3500001 	cmp	r0, #1
   29e94:	0a000002 	beq	29ea4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x14>
   29e98:	e59f3058 	ldr	r3, [pc, #88]	; 29ef8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x68>
   29e9c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   29ea0:	e12fff1e 	bx	lr
   29ea4:	e3a02064 	mov	r2, #100	; 0x64
   29ea8:	e59f304c 	ldr	r3, [pc, #76]	; 29efc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x6c>
   29eac:	e083c193 	umull	ip, r3, r3, r1
   29eb0:	e1a0c2a3 	lsr	ip, r3, #5
   29eb4:	e0020c92 	mul	r2, r2, ip
   29eb8:	e1510002 	cmp	r1, r2
   29ebc:	0a000006 	beq	29edc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>
   29ec0:	e3110003 	tst	r1, #3
   29ec4:	03a01001 	moveq	r1, #1
   29ec8:	13a01000 	movne	r1, #0
   29ecc:	e3510000 	cmp	r1, #0
   29ed0:	0afffff0 	beq	29e98 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   29ed4:	e3a0001d 	mov	r0, #29
   29ed8:	e12fff1e 	bx	lr
   29edc:	e3a02e19 	mov	r2, #400	; 0x190
   29ee0:	e1a033a3 	lsr	r3, r3, #7
   29ee4:	e0030392 	mul	r3, r2, r3
   29ee8:	e0411003 	sub	r1, r1, r3
   29eec:	e16f1f11 	clz	r1, r1
   29ef0:	e1a012a1 	lsr	r1, r1, #5
   29ef4:	eafffff4 	b	29ecc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>
   29ef8:	000456d0 	.word	0x000456d0
   29efc:	51eb851f 	.word	0x51eb851f

00029f00 <CTimer::Get()>:
   29f00:	e59f3020 	ldr	r3, [pc, #32]	; 29f28 <CTimer::Get()+0x28>
   29f04:	e5930000 	ldr	r0, [r3]
   29f08:	e3500000 	cmp	r0, #0
   29f0c:	0a000000 	beq	29f14 <CTimer::Get()+0x14>
   29f10:	e12fff1e 	bx	lr
   29f14:	e92d4010 	push	{r4, lr}
   29f18:	e3a02f9f 	mov	r2, #636	; 0x27c
   29f1c:	e59f1008 	ldr	r1, [pc, #8]	; 29f2c <CTimer::Get()+0x2c>
   29f20:	e59f0008 	ldr	r0, [pc, #8]	; 29f30 <CTimer::Get()+0x30>
   29f24:	ebffea35 	bl	24800 <assertion_failed>
   29f28:	0004e110 	.word	0x0004e110
   29f2c:	00045708 	.word	0x00045708
   29f30:	00043924 	.word	0x00043924

00029f34 <memset>:
   29f34:	e3100003 	tst	r0, #3
   29f38:	03a03001 	moveq	r3, #1
   29f3c:	13a03000 	movne	r3, #0
   29f40:	e352000f 	cmp	r2, #15
   29f44:	93a03000 	movls	r3, #0
   29f48:	82033001 	andhi	r3, r3, #1
   29f4c:	e3530000 	cmp	r3, #0
   29f50:	0a000019 	beq	29fbc <memset+0x88>
   29f54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   29f58:	e1a0e002 	mov	lr, r2
   29f5c:	e181c401 	orr	ip, r1, r1, lsl #8
   29f60:	e18cc80c 	orr	ip, ip, ip, lsl #16
   29f64:	e2803010 	add	r3, r0, #16
   29f68:	e24ee010 	sub	lr, lr, #16
   29f6c:	e35e000f 	cmp	lr, #15
   29f70:	e503c010 	str	ip, [r3, #-16]
   29f74:	e503c00c 	str	ip, [r3, #-12]
   29f78:	e503c008 	str	ip, [r3, #-8]
   29f7c:	e503c004 	str	ip, [r3, #-4]
   29f80:	e2833010 	add	r3, r3, #16
   29f84:	8afffff7 	bhi	29f68 <memset+0x34>
   29f88:	e2423010 	sub	r3, r2, #16
   29f8c:	e3c3300f 	bic	r3, r3, #15
   29f90:	e202200f 	and	r2, r2, #15
   29f94:	e2833010 	add	r3, r3, #16
   29f98:	e3520000 	cmp	r2, #0
   29f9c:	e0803003 	add	r3, r0, r3
   29fa0:	0a00000f 	beq	29fe4 <memset+0xb0>
   29fa4:	e6af1071 	sxtb	r1, r1
   29fa8:	e0832002 	add	r2, r3, r2
   29fac:	e4c31001 	strb	r1, [r3], #1
   29fb0:	e1530002 	cmp	r3, r2
   29fb4:	1afffffc 	bne	29fac <memset+0x78>
   29fb8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   29fbc:	e3520000 	cmp	r2, #0
   29fc0:	e1a03000 	mov	r3, r0
   29fc4:	16af1071 	sxtbne	r1, r1
   29fc8:	10802002 	addne	r2, r0, r2
   29fcc:	0a000003 	beq	29fe0 <memset+0xac>
   29fd0:	e4c31001 	strb	r1, [r3], #1
   29fd4:	e1530002 	cmp	r3, r2
   29fd8:	1afffffc 	bne	29fd0 <memset+0x9c>
   29fdc:	e12fff1e 	bx	lr
   29fe0:	e12fff1e 	bx	lr
   29fe4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00029fe8 <memmove>:
   29fe8:	e1500001 	cmp	r0, r1
   29fec:	9a00000a 	bls	2a01c <memmove+0x34>
   29ff0:	e0813002 	add	r3, r1, r2
   29ff4:	e1500003 	cmp	r0, r3
   29ff8:	2a000007 	bcs	2a01c <memmove+0x34>
   29ffc:	e3520000 	cmp	r2, #0
   2a000:	e0802002 	add	r2, r0, r2
   2a004:	012fff1e 	bxeq	lr
   2a008:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   2a00c:	e1510003 	cmp	r1, r3
   2a010:	e562c001 	strb	ip, [r2, #-1]!
   2a014:	1afffffb 	bne	2a008 <memmove+0x20>
   2a018:	e12fff1e 	bx	lr
   2a01c:	ea00023b 	b	2a910 <memcpy>

0002a020 <memcmp>:
   2a020:	e3520000 	cmp	r2, #0
   2a024:	0a00000e 	beq	2a064 <memcmp+0x44>
   2a028:	e5d0c000 	ldrb	ip, [r0]
   2a02c:	e5d13000 	ldrb	r3, [r1]
   2a030:	e15c0003 	cmp	ip, r3
   2a034:	ca00000c 	bgt	2a06c <memcmp+0x4c>
   2a038:	ba00000d 	blt	2a074 <memcmp+0x54>
   2a03c:	e0812002 	add	r2, r1, r2
   2a040:	e2811001 	add	r1, r1, #1
   2a044:	ea000004 	b	2a05c <memcmp+0x3c>
   2a048:	e5f0c001 	ldrb	ip, [r0, #1]!
   2a04c:	e4d13001 	ldrb	r3, [r1], #1
   2a050:	e15c0003 	cmp	ip, r3
   2a054:	ca000004 	bgt	2a06c <memcmp+0x4c>
   2a058:	ba000005 	blt	2a074 <memcmp+0x54>
   2a05c:	e1510002 	cmp	r1, r2
   2a060:	1afffff8 	bne	2a048 <memcmp+0x28>
   2a064:	e3a00000 	mov	r0, #0
   2a068:	e12fff1e 	bx	lr
   2a06c:	e3a00001 	mov	r0, #1
   2a070:	e12fff1e 	bx	lr
   2a074:	e3e00000 	mvn	r0, #0
   2a078:	e12fff1e 	bx	lr

0002a07c <strlen>:
   2a07c:	e1d010d0 	ldrsb	r1, [r0]
   2a080:	e2803001 	add	r3, r0, #1
   2a084:	e3510000 	cmp	r1, #0
   2a088:	0a000003 	beq	2a09c <strlen+0x20>
   2a08c:	e0431000 	sub	r1, r3, r0
   2a090:	e0d320d1 	ldrsb	r2, [r3], #1
   2a094:	e3520000 	cmp	r2, #0
   2a098:	1afffffb 	bne	2a08c <strlen+0x10>
   2a09c:	e1a00001 	mov	r0, r1
   2a0a0:	e12fff1e 	bx	lr

0002a0a4 <strcmp>:
   2a0a4:	e1d030d0 	ldrsb	r3, [r0]
   2a0a8:	e1d120d0 	ldrsb	r2, [r1]
   2a0ac:	e3530000 	cmp	r3, #0
   2a0b0:	1a000007 	bne	2a0d4 <strcmp+0x30>
   2a0b4:	ea000008 	b	2a0dc <strcmp+0x38>
   2a0b8:	e1530002 	cmp	r3, r2
   2a0bc:	ca00000b 	bgt	2a0f0 <strcmp+0x4c>
   2a0c0:	ba00000c 	blt	2a0f8 <strcmp+0x54>
   2a0c4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a0c8:	e3530000 	cmp	r3, #0
   2a0cc:	0a00000b 	beq	2a100 <strcmp+0x5c>
   2a0d0:	e1f120d1 	ldrsb	r2, [r1, #1]!
   2a0d4:	e3520000 	cmp	r2, #0
   2a0d8:	1afffff6 	bne	2a0b8 <strcmp+0x14>
   2a0dc:	e1530002 	cmp	r3, r2
   2a0e0:	ca000002 	bgt	2a0f0 <strcmp+0x4c>
   2a0e4:	b3e00000 	mvnlt	r0, #0
   2a0e8:	a3a00000 	movge	r0, #0
   2a0ec:	e12fff1e 	bx	lr
   2a0f0:	e3a00001 	mov	r0, #1
   2a0f4:	e12fff1e 	bx	lr
   2a0f8:	e3e00000 	mvn	r0, #0
   2a0fc:	e12fff1e 	bx	lr
   2a100:	e1d120d1 	ldrsb	r2, [r1, #1]
   2a104:	e1530002 	cmp	r3, r2
   2a108:	dafffff5 	ble	2a0e4 <strcmp+0x40>
   2a10c:	eafffff7 	b	2a0f0 <strcmp+0x4c>

0002a110 <strcasecmp>:
   2a110:	e2400001 	sub	r0, r0, #1
   2a114:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a118:	e2432061 	sub	r2, r3, #97	; 0x61
   2a11c:	e3520019 	cmp	r2, #25
   2a120:	92433020 	subls	r3, r3, #32
   2a124:	e3530000 	cmp	r3, #0
   2a128:	0a00001f 	beq	2a1ac <strcasecmp+0x9c>
   2a12c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2a130:	e0d120d1 	ldrsb	r2, [r1], #1
   2a134:	e242c061 	sub	ip, r2, #97	; 0x61
   2a138:	e35c0019 	cmp	ip, #25
   2a13c:	81a0e002 	movhi	lr, r2
   2a140:	9242e020 	subls	lr, r2, #32
   2a144:	e35e0000 	cmp	lr, #0
   2a148:	1a000006 	bne	2a168 <strcasecmp+0x58>
   2a14c:	e35c0019 	cmp	ip, #25
   2a150:	92422020 	subls	r2, r2, #32
   2a154:	e1530002 	cmp	r3, r2
   2a158:	ca000011 	bgt	2a1a4 <strcasecmp+0x94>
   2a15c:	b3e00000 	mvnlt	r0, #0
   2a160:	a3a00000 	movge	r0, #0
   2a164:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a168:	e153000e 	cmp	r3, lr
   2a16c:	ca00000c 	bgt	2a1a4 <strcasecmp+0x94>
   2a170:	ba000016 	blt	2a1d0 <strcasecmp+0xc0>
   2a174:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a178:	e2432061 	sub	r2, r3, #97	; 0x61
   2a17c:	e3520019 	cmp	r2, #25
   2a180:	92433020 	subls	r3, r3, #32
   2a184:	e3530000 	cmp	r3, #0
   2a188:	1affffe8 	bne	2a130 <strcasecmp+0x20>
   2a18c:	e1d120d0 	ldrsb	r2, [r1]
   2a190:	e242c061 	sub	ip, r2, #97	; 0x61
   2a194:	e35c0019 	cmp	ip, #25
   2a198:	92422020 	subls	r2, r2, #32
   2a19c:	e1530002 	cmp	r3, r2
   2a1a0:	daffffed 	ble	2a15c <strcasecmp+0x4c>
   2a1a4:	e3a00001 	mov	r0, #1
   2a1a8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a1ac:	e1d120d0 	ldrsb	r2, [r1]
   2a1b0:	e242c061 	sub	ip, r2, #97	; 0x61
   2a1b4:	e35c0019 	cmp	ip, #25
   2a1b8:	92422020 	subls	r2, r2, #32
   2a1bc:	e1530002 	cmp	r3, r2
   2a1c0:	ca000004 	bgt	2a1d8 <strcasecmp+0xc8>
   2a1c4:	b3e00000 	mvnlt	r0, #0
   2a1c8:	a3a00000 	movge	r0, #0
   2a1cc:	e12fff1e 	bx	lr
   2a1d0:	e3e00000 	mvn	r0, #0
   2a1d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2a1d8:	e3a00001 	mov	r0, #1
   2a1dc:	e12fff1e 	bx	lr

0002a1e0 <strncmp>:
   2a1e0:	e3520000 	cmp	r2, #0
   2a1e4:	0a000016 	beq	2a244 <strncmp+0x64>
   2a1e8:	e1d030d0 	ldrsb	r3, [r0]
   2a1ec:	e1d1c0d0 	ldrsb	ip, [r1]
   2a1f0:	e3530000 	cmp	r3, #0
   2a1f4:	0a000015 	beq	2a250 <strncmp+0x70>
   2a1f8:	e35c0000 	cmp	ip, #0
   2a1fc:	0a000013 	beq	2a250 <strncmp+0x70>
   2a200:	e15c0003 	cmp	ip, r3
   2a204:	ba000016 	blt	2a264 <strncmp+0x84>
   2a208:	d0802002 	addle	r2, r0, r2
   2a20c:	d2800001 	addle	r0, r0, #1
   2a210:	da000009 	ble	2a23c <strncmp+0x5c>
   2a214:	ea000014 	b	2a26c <strncmp+0x8c>
   2a218:	e0d030d1 	ldrsb	r3, [r0], #1
   2a21c:	e3530000 	cmp	r3, #0
   2a220:	0a000009 	beq	2a24c <strncmp+0x6c>
   2a224:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   2a228:	e35c0000 	cmp	ip, #0
   2a22c:	0a000007 	beq	2a250 <strncmp+0x70>
   2a230:	e153000c 	cmp	r3, ip
   2a234:	ca00000a 	bgt	2a264 <strncmp+0x84>
   2a238:	ba00000b 	blt	2a26c <strncmp+0x8c>
   2a23c:	e1500002 	cmp	r0, r2
   2a240:	1afffff4 	bne	2a218 <strncmp+0x38>
   2a244:	e3a00000 	mov	r0, #0
   2a248:	e12fff1e 	bx	lr
   2a24c:	e1d1c0d1 	ldrsb	ip, [r1, #1]
   2a250:	e153000c 	cmp	r3, ip
   2a254:	ca000002 	bgt	2a264 <strncmp+0x84>
   2a258:	b3e00000 	mvnlt	r0, #0
   2a25c:	a3a00000 	movge	r0, #0
   2a260:	e12fff1e 	bx	lr
   2a264:	e3a00001 	mov	r0, #1
   2a268:	e12fff1e 	bx	lr
   2a26c:	e3e00000 	mvn	r0, #0
   2a270:	e12fff1e 	bx	lr

0002a274 <strncasecmp>:
   2a274:	e3520000 	cmp	r2, #0
   2a278:	0a00002c 	beq	2a330 <strncasecmp+0xbc>
   2a27c:	e1a0c001 	mov	ip, r1
   2a280:	e92d4010 	push	{r4, lr}
   2a284:	e2400001 	sub	r0, r0, #1
   2a288:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a28c:	e2431061 	sub	r1, r3, #97	; 0x61
   2a290:	e3510019 	cmp	r1, #25
   2a294:	92433020 	subls	r3, r3, #32
   2a298:	e3530000 	cmp	r3, #0
   2a29c:	0a00001c 	beq	2a314 <strncasecmp+0xa0>
   2a2a0:	e0dc10d1 	ldrsb	r1, [ip], #1
   2a2a4:	e241e061 	sub	lr, r1, #97	; 0x61
   2a2a8:	e35e0019 	cmp	lr, #25
   2a2ac:	81a04001 	movhi	r4, r1
   2a2b0:	92414020 	subls	r4, r1, #32
   2a2b4:	e3540000 	cmp	r4, #0
   2a2b8:	1a000006 	bne	2a2d8 <strncasecmp+0x64>
   2a2bc:	e35e0019 	cmp	lr, #25
   2a2c0:	9a00000e 	bls	2a300 <strncasecmp+0x8c>
   2a2c4:	e1510003 	cmp	r1, r3
   2a2c8:	ba000014 	blt	2a320 <strncasecmp+0xac>
   2a2cc:	c3e00000 	mvngt	r0, #0
   2a2d0:	d3a00000 	movle	r0, #0
   2a2d4:	e8bd8010 	pop	{r4, pc}
   2a2d8:	e1530004 	cmp	r3, r4
   2a2dc:	ca00000f 	bgt	2a320 <strncasecmp+0xac>
   2a2e0:	ba000010 	blt	2a328 <strncasecmp+0xb4>
   2a2e4:	e2522001 	subs	r2, r2, #1
   2a2e8:	1affffe6 	bne	2a288 <strncasecmp+0x14>
   2a2ec:	e1dc10d0 	ldrsb	r1, [ip]
   2a2f0:	e2412061 	sub	r2, r1, #97	; 0x61
   2a2f4:	e3520019 	cmp	r2, #25
   2a2f8:	93a02000 	movls	r2, #0
   2a2fc:	8a000002 	bhi	2a30c <strncasecmp+0x98>
   2a300:	e3520000 	cmp	r2, #0
   2a304:	e2411020 	sub	r1, r1, #32
   2a308:	1affffed 	bne	2a2c4 <strncasecmp+0x50>
   2a30c:	e3a00000 	mov	r0, #0
   2a310:	e8bd8010 	pop	{r4, pc}
   2a314:	e1dc10d0 	ldrsb	r1, [ip]
   2a318:	e241e061 	sub	lr, r1, #97	; 0x61
   2a31c:	eaffffe6 	b	2a2bc <strncasecmp+0x48>
   2a320:	e3a00001 	mov	r0, #1
   2a324:	e8bd8010 	pop	{r4, pc}
   2a328:	e3e00000 	mvn	r0, #0
   2a32c:	e8bd8010 	pop	{r4, pc}
   2a330:	e1d110d0 	ldrsb	r1, [r1]
   2a334:	e2412061 	sub	r2, r1, #97	; 0x61
   2a338:	e3520019 	cmp	r2, #25
   2a33c:	8a00000a 	bhi	2a36c <strncasecmp+0xf8>
   2a340:	e3a02000 	mov	r2, #0
   2a344:	e3520000 	cmp	r2, #0
   2a348:	e2411020 	sub	r1, r1, #32
   2a34c:	0a000006 	beq	2a36c <strncasecmp+0xf8>
   2a350:	e1510003 	cmp	r1, r3
   2a354:	ba000002 	blt	2a364 <strncasecmp+0xf0>
   2a358:	c3e00000 	mvngt	r0, #0
   2a35c:	d3a00000 	movle	r0, #0
   2a360:	e12fff1e 	bx	lr
   2a364:	e3a00001 	mov	r0, #1
   2a368:	e12fff1e 	bx	lr
   2a36c:	e3a00000 	mov	r0, #0
   2a370:	e12fff1e 	bx	lr

0002a374 <strcpy>:
   2a374:	e1d130d0 	ldrsb	r3, [r1]
   2a378:	e1a02000 	mov	r2, r0
   2a37c:	e3530000 	cmp	r3, #0
   2a380:	0a000003 	beq	2a394 <strcpy+0x20>
   2a384:	e4c23001 	strb	r3, [r2], #1
   2a388:	e1f130d1 	ldrsb	r3, [r1, #1]!
   2a38c:	e3530000 	cmp	r3, #0
   2a390:	1afffffb 	bne	2a384 <strcpy+0x10>
   2a394:	e3a03000 	mov	r3, #0
   2a398:	e5c23000 	strb	r3, [r2]
   2a39c:	e12fff1e 	bx	lr

0002a3a0 <strncpy>:
   2a3a0:	e3520000 	cmp	r2, #0
   2a3a4:	012fff1e 	bxeq	lr
   2a3a8:	e1d1c0d0 	ldrsb	ip, [r1]
   2a3ac:	e35c0000 	cmp	ip, #0
   2a3b0:	0a000009 	beq	2a3dc <strncpy+0x3c>
   2a3b4:	e0802002 	add	r2, r0, r2
   2a3b8:	e1a03000 	mov	r3, r0
   2a3bc:	ea000002 	b	2a3cc <strncpy+0x2c>
   2a3c0:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
   2a3c4:	e35c0000 	cmp	ip, #0
   2a3c8:	0a000004 	beq	2a3e0 <strncpy+0x40>
   2a3cc:	e4c3c001 	strb	ip, [r3], #1
   2a3d0:	e1530002 	cmp	r3, r2
   2a3d4:	1afffff9 	bne	2a3c0 <strncpy+0x20>
   2a3d8:	e12fff1e 	bx	lr
   2a3dc:	e1a03000 	mov	r3, r0
   2a3e0:	e3a02000 	mov	r2, #0
   2a3e4:	e5c32000 	strb	r2, [r3]
   2a3e8:	e12fff1e 	bx	lr

0002a3ec <strcat>:
   2a3ec:	e1d030d0 	ldrsb	r3, [r0]
   2a3f0:	e3530000 	cmp	r3, #0
   2a3f4:	e1a03000 	mov	r3, r0
   2a3f8:	0a000002 	beq	2a408 <strcat+0x1c>
   2a3fc:	e1f320d1 	ldrsb	r2, [r3, #1]!
   2a400:	e3520000 	cmp	r2, #0
   2a404:	1afffffc 	bne	2a3fc <strcat+0x10>
   2a408:	e1d120d0 	ldrsb	r2, [r1]
   2a40c:	e3520000 	cmp	r2, #0
   2a410:	0a000003 	beq	2a424 <strcat+0x38>
   2a414:	e4c32001 	strb	r2, [r3], #1
   2a418:	e1f120d1 	ldrsb	r2, [r1, #1]!
   2a41c:	e3520000 	cmp	r2, #0
   2a420:	1afffffb 	bne	2a414 <strcat+0x28>
   2a424:	e3a02000 	mov	r2, #0
   2a428:	e5c32000 	strb	r2, [r3]
   2a42c:	e12fff1e 	bx	lr

0002a430 <strchr>:
   2a430:	e1d020d0 	ldrsb	r2, [r0]
   2a434:	e3520000 	cmp	r2, #0
   2a438:	0a000009 	beq	2a464 <strchr+0x34>
   2a43c:	e1510002 	cmp	r1, r2
   2a440:	1a000002 	bne	2a450 <strchr+0x20>
   2a444:	ea000008 	b	2a46c <strchr+0x3c>
   2a448:	e1530001 	cmp	r3, r1
   2a44c:	012fff1e 	bxeq	lr
   2a450:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a454:	e3530000 	cmp	r3, #0
   2a458:	1afffffa 	bne	2a448 <strchr+0x18>
   2a45c:	e1a00003 	mov	r0, r3
   2a460:	e12fff1e 	bx	lr
   2a464:	e1a00002 	mov	r0, r2
   2a468:	e12fff1e 	bx	lr
   2a46c:	e12fff1e 	bx	lr

0002a470 <strstr>:
   2a470:	e1d030d0 	ldrsb	r3, [r0]
   2a474:	e3530000 	cmp	r3, #0
   2a478:	1a000003 	bne	2a48c <strstr+0x1c>
   2a47c:	e1d130d0 	ldrsb	r3, [r1]
   2a480:	e3530000 	cmp	r3, #0
   2a484:	13a00000 	movne	r0, #0
   2a488:	e12fff1e 	bx	lr
   2a48c:	e92d4010 	push	{r4, lr}
   2a490:	e1d140d0 	ldrsb	r4, [r1]
   2a494:	e3540000 	cmp	r4, #0
   2a498:	08bd8010 	popeq	{r4, pc}
   2a49c:	e1d030d0 	ldrsb	r3, [r0]
   2a4a0:	e1530004 	cmp	r3, r4
   2a4a4:	01a02001 	moveq	r2, r1
   2a4a8:	01a0c000 	moveq	ip, r0
   2a4ac:	0a000003 	beq	2a4c0 <strstr+0x50>
   2a4b0:	ea000006 	b	2a4d0 <strstr+0x60>
   2a4b4:	e1fce0d1 	ldrsb	lr, [ip, #1]!
   2a4b8:	e15e0003 	cmp	lr, r3
   2a4bc:	1a000003 	bne	2a4d0 <strstr+0x60>
   2a4c0:	e1f230d1 	ldrsb	r3, [r2, #1]!
   2a4c4:	e3530000 	cmp	r3, #0
   2a4c8:	1afffff9 	bne	2a4b4 <strstr+0x44>
   2a4cc:	e8bd8010 	pop	{r4, pc}
   2a4d0:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2a4d4:	e3530000 	cmp	r3, #0
   2a4d8:	1affffed 	bne	2a494 <strstr+0x24>
   2a4dc:	e1a00003 	mov	r0, r3
   2a4e0:	e8bd8010 	pop	{r4, pc}

0002a4e4 <strtok_r>:
   2a4e4:	e3500000 	cmp	r0, #0
   2a4e8:	0a00002c 	beq	2a5a0 <strtok_r+0xbc>
   2a4ec:	e92d4030 	push	{r4, r5, lr}
   2a4f0:	e1d0e0d0 	ldrsb	lr, [r0]
   2a4f4:	e35e0000 	cmp	lr, #0
   2a4f8:	11d140d0 	ldrsbne	r4, [r1]
   2a4fc:	0a000024 	beq	2a594 <strtok_r+0xb0>
   2a500:	e3540000 	cmp	r4, #0
   2a504:	0a000008 	beq	2a52c <strtok_r+0x48>
   2a508:	e15e0004 	cmp	lr, r4
   2a50c:	0a000019 	beq	2a578 <strtok_r+0x94>
   2a510:	e1a0c001 	mov	ip, r1
   2a514:	ea000001 	b	2a520 <strtok_r+0x3c>
   2a518:	e15e0003 	cmp	lr, r3
   2a51c:	0a000015 	beq	2a578 <strtok_r+0x94>
   2a520:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a524:	e3530000 	cmp	r3, #0
   2a528:	1afffffa 	bne	2a518 <strtok_r+0x34>
   2a52c:	e35e0000 	cmp	lr, #0
   2a530:	0a000017 	beq	2a594 <strtok_r+0xb0>
   2a534:	e1a05000 	mov	r5, r0
   2a538:	e3540000 	cmp	r4, #0
   2a53c:	0a000008 	beq	2a564 <strtok_r+0x80>
   2a540:	e15e0004 	cmp	lr, r4
   2a544:	0a00000d 	beq	2a580 <strtok_r+0x9c>
   2a548:	e1a0c001 	mov	ip, r1
   2a54c:	ea000001 	b	2a558 <strtok_r+0x74>
   2a550:	e15e0003 	cmp	lr, r3
   2a554:	0a000009 	beq	2a580 <strtok_r+0x9c>
   2a558:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a55c:	e3530000 	cmp	r3, #0
   2a560:	1afffffa 	bne	2a550 <strtok_r+0x6c>
   2a564:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
   2a568:	e35e0000 	cmp	lr, #0
   2a56c:	1afffff1 	bne	2a538 <strtok_r+0x54>
   2a570:	e5825000 	str	r5, [r2]
   2a574:	e8bd8030 	pop	{r4, r5, pc}
   2a578:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
   2a57c:	eaffffdf 	b	2a500 <strtok_r+0x1c>
   2a580:	e3a03000 	mov	r3, #0
   2a584:	e2855001 	add	r5, r5, #1
   2a588:	e5453001 	strb	r3, [r5, #-1]
   2a58c:	e5825000 	str	r5, [r2]
   2a590:	e8bd8030 	pop	{r4, r5, pc}
   2a594:	e3a00000 	mov	r0, #0
   2a598:	e5820000 	str	r0, [r2]
   2a59c:	e8bd8030 	pop	{r4, r5, pc}
   2a5a0:	e5920000 	ldr	r0, [r2]
   2a5a4:	e3500000 	cmp	r0, #0
   2a5a8:	1affffcf 	bne	2a4ec <strtok_r+0x8>
   2a5ac:	e12fff1e 	bx	lr

0002a5b0 <strtoul>:
   2a5b0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2a5b4:	e3510000 	cmp	r1, #0
   2a5b8:	e2425002 	sub	r5, r2, #2
   2a5bc:	15810000 	strne	r0, [r1]
   2a5c0:	e3520000 	cmp	r2, #0
   2a5c4:	13550022 	cmpne	r5, #34	; 0x22
   2a5c8:	e3c2e010 	bic	lr, r2, #16
   2a5cc:	83a05001 	movhi	r5, #1
   2a5d0:	93a05000 	movls	r5, #0
   2a5d4:	8a000037 	bhi	2a6b8 <strtoul+0x108>
   2a5d8:	e1d0c0d0 	ldrsb	ip, [r0]
   2a5dc:	e1a04000 	mov	r4, r0
   2a5e0:	e24c3009 	sub	r3, ip, #9
   2a5e4:	e35c0020 	cmp	ip, #32
   2a5e8:	e2800001 	add	r0, r0, #1
   2a5ec:	e6ef3073 	uxtb	r3, r3
   2a5f0:	0afffff8 	beq	2a5d8 <strtoul+0x28>
   2a5f4:	e3530004 	cmp	r3, #4
   2a5f8:	9afffff6 	bls	2a5d8 <strtoul+0x28>
   2a5fc:	e35c002b 	cmp	ip, #43	; 0x2b
   2a600:	0a00002e 	beq	2a6c0 <strtoul+0x110>
   2a604:	e35c002d 	cmp	ip, #45	; 0x2d
   2a608:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
   2a60c:	03a07001 	moveq	r7, #1
   2a610:	01a04000 	moveq	r4, r0
   2a614:	13a07000 	movne	r7, #0
   2a618:	e35c0030 	cmp	ip, #48	; 0x30
   2a61c:	0a00002c 	beq	2a6d4 <strtoul+0x124>
   2a620:	e3520000 	cmp	r2, #0
   2a624:	03a0200a 	moveq	r2, #10
   2a628:	e35c002f 	cmp	ip, #47	; 0x2f
   2a62c:	e1a0300c 	mov	r3, ip
   2a630:	da00001d 	ble	2a6ac <strtoul+0xfc>
   2a634:	e3a0e000 	mov	lr, #0
   2a638:	e3a05001 	mov	r5, #1
   2a63c:	e1a0600e 	mov	r6, lr
   2a640:	ea000008 	b	2a668 <strtoul+0xb8>
   2a644:	e020329e 	mla	r0, lr, r2, r3
   2a648:	e150000e 	cmp	r0, lr
   2a64c:	3a000029 	bcc	2a6f8 <strtoul+0x148>
   2a650:	e1f430d1 	ldrsb	r3, [r4, #1]!
   2a654:	e1a05006 	mov	r5, r6
   2a658:	e353002f 	cmp	r3, #47	; 0x2f
   2a65c:	e1a0c003 	mov	ip, r3
   2a660:	da000029 	ble	2a70c <strtoul+0x15c>
   2a664:	e1a0e000 	mov	lr, r0
   2a668:	e24cc061 	sub	ip, ip, #97	; 0x61
   2a66c:	e35c0019 	cmp	ip, #25
   2a670:	92433020 	subls	r3, r3, #32
   2a674:	e3530040 	cmp	r3, #64	; 0x40
   2a678:	c2433007 	subgt	r3, r3, #7
   2a67c:	e2433030 	sub	r3, r3, #48	; 0x30
   2a680:	e1520003 	cmp	r2, r3
   2a684:	caffffee 	bgt	2a644 <strtoul+0x94>
   2a688:	e1a0000e 	mov	r0, lr
   2a68c:	e2255001 	eor	r5, r5, #1
   2a690:	e3510000 	cmp	r1, #0
   2a694:	e0055007 	and	r5, r5, r7
   2a698:	0a000000 	beq	2a6a0 <strtoul+0xf0>
   2a69c:	e5814000 	str	r4, [r1]
   2a6a0:	e3550000 	cmp	r5, #0
   2a6a4:	12600000 	rsbne	r0, r0, #0
   2a6a8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2a6ac:	e3510000 	cmp	r1, #0
   2a6b0:	13a00000 	movne	r0, #0
   2a6b4:	1afffff8 	bne	2a69c <strtoul+0xec>
   2a6b8:	e3a00000 	mov	r0, #0
   2a6bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2a6c0:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   2a6c4:	e3a07000 	mov	r7, #0
   2a6c8:	e35c0030 	cmp	ip, #48	; 0x30
   2a6cc:	e1a04000 	mov	r4, r0
   2a6d0:	1affffd2 	bne	2a620 <strtoul+0x70>
   2a6d4:	e1d4c0d1 	ldrsb	ip, [r4, #1]
   2a6d8:	e2840001 	add	r0, r4, #1
   2a6dc:	e3cc3020 	bic	r3, ip, #32
   2a6e0:	e3530058 	cmp	r3, #88	; 0x58
   2a6e4:	0a00000a 	beq	2a714 <strtoul+0x164>
   2a6e8:	e3520000 	cmp	r2, #0
   2a6ec:	e1a04000 	mov	r4, r0
   2a6f0:	03a02008 	moveq	r2, #8
   2a6f4:	eaffffcb 	b	2a628 <strtoul+0x78>
   2a6f8:	e3510000 	cmp	r1, #0
   2a6fc:	0a00000a 	beq	2a72c <strtoul+0x17c>
   2a700:	e5814000 	str	r4, [r1]
   2a704:	e3e00000 	mvn	r0, #0
   2a708:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2a70c:	e3a05001 	mov	r5, #1
   2a710:	eaffffde 	b	2a690 <strtoul+0xe0>
   2a714:	e35e0000 	cmp	lr, #0
   2a718:	1affffe6 	bne	2a6b8 <strtoul+0x108>
   2a71c:	e1d4c0d2 	ldrsb	ip, [r4, #2]
   2a720:	e3a02010 	mov	r2, #16
   2a724:	e2844002 	add	r4, r4, #2
   2a728:	eaffffbe 	b	2a628 <strtoul+0x78>
   2a72c:	e3e00000 	mvn	r0, #0
   2a730:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002a734 <strtoull>:
   2a734:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a738:	e251e000 	subs	lr, r1, #0
   2a73c:	e242b002 	sub	fp, r2, #2
   2a740:	158e0000 	strne	r0, [lr]
   2a744:	e3520000 	cmp	r2, #0
   2a748:	135b0022 	cmpne	fp, #34	; 0x22
   2a74c:	e3c21010 	bic	r1, r2, #16
   2a750:	83a0b001 	movhi	fp, #1
   2a754:	93a0b000 	movls	fp, #0
   2a758:	8a000041 	bhi	2a864 <strtoull+0x130>
   2a75c:	e1d0a0d0 	ldrsb	sl, [r0]
   2a760:	e1a0c000 	mov	ip, r0
   2a764:	e24a3009 	sub	r3, sl, #9
   2a768:	e35a0020 	cmp	sl, #32
   2a76c:	e2800001 	add	r0, r0, #1
   2a770:	e6ef3073 	uxtb	r3, r3
   2a774:	0afffff8 	beq	2a75c <strtoull+0x28>
   2a778:	e3530004 	cmp	r3, #4
   2a77c:	9afffff6 	bls	2a75c <strtoull+0x28>
   2a780:	e35a002b 	cmp	sl, #43	; 0x2b
   2a784:	0a000039 	beq	2a870 <strtoull+0x13c>
   2a788:	e35a002d 	cmp	sl, #45	; 0x2d
   2a78c:	01dca0d1 	ldrsbeq	sl, [ip, #1]
   2a790:	03a09001 	moveq	r9, #1
   2a794:	01a0c000 	moveq	ip, r0
   2a798:	13a09000 	movne	r9, #0
   2a79c:	e35a0030 	cmp	sl, #48	; 0x30
   2a7a0:	0a000037 	beq	2a884 <strtoull+0x150>
   2a7a4:	e3520000 	cmp	r2, #0
   2a7a8:	03a0200a 	moveq	r2, #10
   2a7ac:	e35a002f 	cmp	sl, #47	; 0x2f
   2a7b0:	e1a0300a 	mov	r3, sl
   2a7b4:	da00004c 	ble	2a8ec <strtoull+0x1b8>
   2a7b8:	e3a0b001 	mov	fp, #1
   2a7bc:	e3a04000 	mov	r4, #0
   2a7c0:	e3a05000 	mov	r5, #0
   2a7c4:	e1a06002 	mov	r6, r2
   2a7c8:	e1a07fc2 	asr	r7, r2, #31
   2a7cc:	e3a08000 	mov	r8, #0
   2a7d0:	ea00000f 	b	2a814 <strtoull+0xe0>
   2a7d4:	e00a0592 	mul	sl, r2, r5
   2a7d8:	e0810492 	umull	r0, r1, r2, r4
   2a7dc:	e02aa794 	mla	sl, r4, r7, sl
   2a7e0:	e0900003 	adds	r0, r0, r3
   2a7e4:	e08a1001 	add	r1, sl, r1
   2a7e8:	e0a11fc3 	adc	r1, r1, r3, asr #31
   2a7ec:	e1510005 	cmp	r1, r5
   2a7f0:	01500004 	cmpeq	r0, r4
   2a7f4:	3a00002b 	bcc	2a8a8 <strtoull+0x174>
   2a7f8:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   2a7fc:	e1a0b008 	mov	fp, r8
   2a800:	e353002f 	cmp	r3, #47	; 0x2f
   2a804:	e1a0a003 	mov	sl, r3
   2a808:	da00002c 	ble	2a8c0 <strtoull+0x18c>
   2a80c:	e1a04000 	mov	r4, r0
   2a810:	e1a05001 	mov	r5, r1
   2a814:	e24aa061 	sub	sl, sl, #97	; 0x61
   2a818:	e35a0019 	cmp	sl, #25
   2a81c:	92433020 	subls	r3, r3, #32
   2a820:	e3530040 	cmp	r3, #64	; 0x40
   2a824:	c2433007 	subgt	r3, r3, #7
   2a828:	e2433030 	sub	r3, r3, #48	; 0x30
   2a82c:	e1520003 	cmp	r2, r3
   2a830:	caffffe7 	bgt	2a7d4 <strtoull+0xa0>
   2a834:	e1a00004 	mov	r0, r4
   2a838:	e1a01005 	mov	r1, r5
   2a83c:	e22bb001 	eor	fp, fp, #1
   2a840:	e35e0000 	cmp	lr, #0
   2a844:	e00bb009 	and	fp, fp, r9
   2a848:	0a000000 	beq	2a850 <strtoull+0x11c>
   2a84c:	e58ec000 	str	ip, [lr]
   2a850:	e35b0000 	cmp	fp, #0
   2a854:	08bd8ff0 	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a858:	e2700000 	rsbs	r0, r0, #0
   2a85c:	e2e11000 	rsc	r1, r1, #0
   2a860:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a864:	e3a00000 	mov	r0, #0
   2a868:	e3a01000 	mov	r1, #0
   2a86c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a870:	e1dca0d1 	ldrsb	sl, [ip, #1]
   2a874:	e3a09000 	mov	r9, #0
   2a878:	e35a0030 	cmp	sl, #48	; 0x30
   2a87c:	e1a0c000 	mov	ip, r0
   2a880:	1affffc7 	bne	2a7a4 <strtoull+0x70>
   2a884:	e1dca0d1 	ldrsb	sl, [ip, #1]
   2a888:	e28c0001 	add	r0, ip, #1
   2a88c:	e3ca3020 	bic	r3, sl, #32
   2a890:	e3530058 	cmp	r3, #88	; 0x58
   2a894:	0a00000b 	beq	2a8c8 <strtoull+0x194>
   2a898:	e3520000 	cmp	r2, #0
   2a89c:	e1a0c000 	mov	ip, r0
   2a8a0:	03a02008 	moveq	r2, #8
   2a8a4:	eaffffc0 	b	2a7ac <strtoull+0x78>
   2a8a8:	e35e0000 	cmp	lr, #0
   2a8ac:	0a00000b 	beq	2a8e0 <strtoull+0x1ac>
   2a8b0:	e58ec000 	str	ip, [lr]
   2a8b4:	e3e00000 	mvn	r0, #0
   2a8b8:	e3a01000 	mov	r1, #0
   2a8bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a8c0:	e3a0b001 	mov	fp, #1
   2a8c4:	eaffffdd 	b	2a840 <strtoull+0x10c>
   2a8c8:	e3510000 	cmp	r1, #0
   2a8cc:	1affffe4 	bne	2a864 <strtoull+0x130>
   2a8d0:	e1dca0d2 	ldrsb	sl, [ip, #2]
   2a8d4:	e3a02010 	mov	r2, #16
   2a8d8:	e28cc002 	add	ip, ip, #2
   2a8dc:	eaffffb2 	b	2a7ac <strtoull+0x78>
   2a8e0:	e3e00000 	mvn	r0, #0
   2a8e4:	e3a01000 	mov	r1, #0
   2a8e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a8ec:	e35e0000 	cmp	lr, #0
   2a8f0:	e3a00000 	mov	r0, #0
   2a8f4:	e3a01000 	mov	r1, #0
   2a8f8:	1affffd3 	bne	2a84c <strtoull+0x118>
   2a8fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a900 <atoi>:
   2a900:	e3a0200a 	mov	r2, #10
   2a904:	e3a01000 	mov	r1, #0
   2a908:	eaffff28 	b	2a5b0 <strtoul>

0002a90c <char2int>:
   2a90c:	e12fff1e 	bx	lr

0002a910 <memcpy>:
   2a910:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   2a914:	e352007f 	cmp	r2, #127	; 0x7f
   2a918:	9a00000b 	bls	2a94c <memcpy+0x3c>
   2a91c:	e3110003 	tst	r1, #3
   2a920:	1a000009 	bne	2a94c <memcpy+0x3c>
   2a924:	e3100003 	tst	r0, #3
   2a928:	1a000007 	bne	2a94c <memcpy+0x3c>
   2a92c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   2a930:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2a934:	e2422020 	sub	r2, r2, #32
   2a938:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   2a93c:	f5d1f040 	pld	[r1, #64]	; 0x40
   2a940:	e352001f 	cmp	r2, #31
   2a944:	8afffff9 	bhi	2a930 <memcpy+0x20>
   2a948:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   2a94c:	e3520000 	cmp	r2, #0
   2a950:	0a000003 	beq	2a964 <memcpy+0x54>
   2a954:	e4d13001 	ldrb	r3, [r1], #1
   2a958:	e2522001 	subs	r2, r2, #1
   2a95c:	e4c03001 	strb	r3, [r0], #1
   2a960:	1afffffb 	bne	2a954 <memcpy+0x44>
   2a964:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   2a968:	e12fff1e 	bx	lr

0002a96c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   2a96c:	e3a03000 	mov	r3, #0
   2a970:	e3510001 	cmp	r1, #1
   2a974:	91a0c002 	movls	ip, r2
   2a978:	8382c001 	orrhi	ip, r2, #1
   2a97c:	e92d4070 	push	{r4, r5, r6, lr}
   2a980:	e1a04000 	mov	r4, r0
   2a984:	e59f0118 	ldr	r0, [pc, #280]	; 2aaa4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x138>
   2a988:	e15c0003 	cmp	ip, r3
   2a98c:	e24dd020 	sub	sp, sp, #32
   2a990:	e5c42004 	strb	r2, [r4, #4]
   2a994:	e5841008 	str	r1, [r4, #8]
   2a998:	e5840000 	str	r0, [r4]
   2a99c:	e1c431b0 	strh	r3, [r4, #16]
   2a9a0:	e1c431b2 	strh	r3, [r4, #18]
   2a9a4:	0a000002 	beq	2a9b4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x48>
   2a9a8:	e1a00004 	mov	r0, r4
   2a9ac:	e28dd020 	add	sp, sp, #32
   2a9b0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a9b4:	e59f50ec 	ldr	r5, [pc, #236]	; 2aaa8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x13c>
   2a9b8:	e5950004 	ldr	r0, [r5, #4]
   2a9bc:	e1500003 	cmp	r0, r3
   2a9c0:	1a000027 	bne	2aa64 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf8>
   2a9c4:	e5956000 	ldr	r6, [r5]
   2a9c8:	e3560000 	cmp	r6, #0
   2a9cc:	0a00000b 	beq	2aa00 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x94>
   2a9d0:	e3a02000 	mov	r2, #0
   2a9d4:	e5943008 	ldr	r3, [r4, #8]
   2a9d8:	e7862103 	str	r2, [r6, r3, lsl #2]
   2a9dc:	e5953004 	ldr	r3, [r5, #4]
   2a9e0:	e3530000 	cmp	r3, #0
   2a9e4:	1a000020 	bne	2aa6c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x100>
   2a9e8:	e1a00004 	mov	r0, r4
   2a9ec:	e3a01000 	mov	r1, #0
   2a9f0:	eb000036 	bl	2aad0 <CVirtualGPIOPin::Write(unsigned int)>
   2a9f4:	e1a00004 	mov	r0, r4
   2a9f8:	e28dd020 	add	sp, sp, #32
   2a9fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   2aa00:	e3a00001 	mov	r0, #1
   2aa04:	eb00048a 	bl	2bc34 <CMemorySystem::GetCoherentPage(unsigned int)>
   2aa08:	e1a01006 	mov	r1, r6
   2aa0c:	e5850000 	str	r0, [r5]
   2aa10:	e28d0008 	add	r0, sp, #8
   2aa14:	ebffe79a 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2aa18:	e3a03004 	mov	r3, #4
   2aa1c:	e595c000 	ldr	ip, [r5]
   2aa20:	e58d3000 	str	r3, [sp]
   2aa24:	e3ccc103 	bic	ip, ip, #-1073741824	; 0xc0000000
   2aa28:	e38cc101 	orr	ip, ip, #1073741824	; 0x40000000
   2aa2c:	e28d0008 	add	r0, sp, #8
   2aa30:	e28d2010 	add	r2, sp, #16
   2aa34:	e3a03010 	mov	r3, #16
   2aa38:	e59f106c 	ldr	r1, [pc, #108]	; 2aaac <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x140>
   2aa3c:	e58dc01c 	str	ip, [sp, #28]
   2aa40:	ebffe79b 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2aa44:	e3500000 	cmp	r0, #0
   2aa48:	0a000009 	beq	2aa74 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x108>
   2aa4c:	e28d0008 	add	r0, sp, #8
   2aa50:	ebffe792 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   2aa54:	e5956000 	ldr	r6, [r5]
   2aa58:	e3560000 	cmp	r6, #0
   2aa5c:	0affffde 	beq	2a9dc <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x70>
   2aa60:	eaffffda 	b	2a9d0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x64>
   2aa64:	eb0004b4 	bl	2bd3c <EnterCritical>
   2aa68:	eaffffd5 	b	2a9c4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x58>
   2aa6c:	eb0004dd 	bl	2bde8 <LeaveCritical>
   2aa70:	eaffffdc 	b	2a9e8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x7c>
   2aa74:	e3a03010 	mov	r3, #16
   2aa78:	e58d0000 	str	r0, [sp]
   2aa7c:	e28d2010 	add	r2, sp, #16
   2aa80:	e59f1028 	ldr	r1, [pc, #40]	; 2aab0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x144>
   2aa84:	e28d0008 	add	r0, sp, #8
   2aa88:	ebffe789 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2aa8c:	e3500000 	cmp	r0, #0
   2aa90:	159d301c 	ldrne	r3, [sp, #28]
   2aa94:	05850000 	streq	r0, [r5]
   2aa98:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   2aa9c:	15853000 	strne	r3, [r5]
   2aaa0:	eaffffe9 	b	2aa4c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xe0>
   2aaa4:	0004584c 	.word	0x0004584c
   2aaa8:	0004e114 	.word	0x0004e114
   2aaac:	00048020 	.word	0x00048020
   2aab0:	00040010 	.word	0x00040010

0002aab4 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   2aab4:	e12fff1e 	bx	lr

0002aab8 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   2aab8:	e92d4010 	push	{r4, lr}
   2aabc:	e1a04000 	mov	r4, r0
   2aac0:	e3a01014 	mov	r1, #20
   2aac4:	eb000178 	bl	2b0ac <operator delete(void*, unsigned int)>
   2aac8:	e1a00004 	mov	r0, r4
   2aacc:	e8bd8010 	pop	{r4, pc}

0002aad0 <CVirtualGPIOPin::Write(unsigned int)>:
   2aad0:	e92d4070 	push	{r4, r5, r6, lr}
   2aad4:	e5d03004 	ldrb	r3, [r0, #4]
   2aad8:	e24dd028 	sub	sp, sp, #40	; 0x28
   2aadc:	e3530000 	cmp	r3, #0
   2aae0:	e1a04000 	mov	r4, r0
   2aae4:	e1a05001 	mov	r5, r1
   2aae8:	0a000012 	beq	2ab38 <CVirtualGPIOPin::Write(unsigned int)+0x68>
   2aaec:	e5901008 	ldr	r1, [r0, #8]
   2aaf0:	e3510000 	cmp	r1, #0
   2aaf4:	1a000033 	bne	2abc8 <CVirtualGPIOPin::Write(unsigned int)+0xf8>
   2aaf8:	e28d000c 	add	r0, sp, #12
   2aafc:	ebffe760 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2ab00:	e3a03008 	mov	r3, #8
   2ab04:	e58d3000 	str	r3, [sp]
   2ab08:	e3a03014 	mov	r3, #20
   2ab0c:	e3a0c082 	mov	ip, #130	; 0x82
   2ab10:	e28d000c 	add	r0, sp, #12
   2ab14:	e08d2003 	add	r2, sp, r3
   2ab18:	e59f10d8 	ldr	r1, [pc, #216]	; 2abf8 <CVirtualGPIOPin::Write(unsigned int)+0x128>
   2ab1c:	e58d5024 	str	r5, [sp, #36]	; 0x24
   2ab20:	e58dc020 	str	ip, [sp, #32]
   2ab24:	ebffe762 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2ab28:	e28d000c 	add	r0, sp, #12
   2ab2c:	ebffe75b 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   2ab30:	e28dd028 	add	sp, sp, #40	; 0x28
   2ab34:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ab38:	e5903008 	ldr	r3, [r0, #8]
   2ab3c:	e3530001 	cmp	r3, #1
   2ab40:	8afffffa 	bhi	2ab30 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2ab44:	e3510001 	cmp	r1, #1
   2ab48:	93a03000 	movls	r3, #0
   2ab4c:	83a03001 	movhi	r3, #1
   2ab50:	e59f60a4 	ldr	r6, [pc, #164]	; 2abfc <CVirtualGPIOPin::Write(unsigned int)+0x12c>
   2ab54:	e5962000 	ldr	r2, [r6]
   2ab58:	e3520000 	cmp	r2, #0
   2ab5c:	03833001 	orreq	r3, r3, #1
   2ab60:	e3530000 	cmp	r3, #0
   2ab64:	1afffff1 	bne	2ab30 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2ab68:	e5960004 	ldr	r0, [r6, #4]
   2ab6c:	e3500000 	cmp	r0, #0
   2ab70:	1a000018 	bne	2abd8 <CVirtualGPIOPin::Write(unsigned int)+0x108>
   2ab74:	e1d411b0 	ldrh	r1, [r4, #16]
   2ab78:	e1d431b2 	ldrh	r3, [r4, #18]
   2ab7c:	e584500c 	str	r5, [r4, #12]
   2ab80:	e0412003 	sub	r2, r1, r3
   2ab84:	e6bf2072 	sxth	r2, r2
   2ab88:	e3520000 	cmp	r2, #0
   2ab8c:	da000013 	ble	2abe0 <CVirtualGPIOPin::Write(unsigned int)+0x110>
   2ab90:	e3550000 	cmp	r5, #0
   2ab94:	1a000006 	bne	2abb4 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   2ab98:	e2833001 	add	r3, r3, #1
   2ab9c:	e6ff3073 	uxth	r3, r3
   2aba0:	e1c431b2 	strh	r3, [r4, #18]
   2aba4:	e5940008 	ldr	r0, [r4, #8]
   2aba8:	e5962000 	ldr	r2, [r6]
   2abac:	e1833801 	orr	r3, r3, r1, lsl #16
   2abb0:	e7823100 	str	r3, [r2, r0, lsl #2]
   2abb4:	e5963004 	ldr	r3, [r6, #4]
   2abb8:	e3530000 	cmp	r3, #0
   2abbc:	0affffdb 	beq	2ab30 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2abc0:	eb000488 	bl	2bde8 <LeaveCritical>
   2abc4:	eaffffd9 	b	2ab30 <CVirtualGPIOPin::Write(unsigned int)+0x60>
   2abc8:	e59f1030 	ldr	r1, [pc, #48]	; 2ac00 <CVirtualGPIOPin::Write(unsigned int)+0x130>
   2abcc:	e3a0205b 	mov	r2, #91	; 0x5b
   2abd0:	e2810014 	add	r0, r1, #20
   2abd4:	ebffe709 	bl	24800 <assertion_failed>
   2abd8:	eb000457 	bl	2bd3c <EnterCritical>
   2abdc:	eaffffe4 	b	2ab74 <CVirtualGPIOPin::Write(unsigned int)+0xa4>
   2abe0:	e3550000 	cmp	r5, #0
   2abe4:	0afffff2 	beq	2abb4 <CVirtualGPIOPin::Write(unsigned int)+0xe4>
   2abe8:	e2811001 	add	r1, r1, #1
   2abec:	e6ff1071 	uxth	r1, r1
   2abf0:	e1c411b0 	strh	r1, [r4, #16]
   2abf4:	eaffffea 	b	2aba4 <CVirtualGPIOPin::Write(unsigned int)+0xd4>
   2abf8:	00038041 	.word	0x00038041
   2abfc:	0004e114 	.word	0x0004e114
   2ac00:	00045854 	.word	0x00045854

0002ac04 <CVirtualGPIOPin::Invert()>:
   2ac04:	e590100c 	ldr	r1, [r0, #12]
   2ac08:	e2211001 	eor	r1, r1, #1
   2ac0c:	eaffffaf 	b	2aad0 <CVirtualGPIOPin::Write(unsigned int)>

0002ac10 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   2ac10:	e3a02000 	mov	r2, #0
   2ac14:	e59f3004 	ldr	r3, [pc, #4]	; 2ac20 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE+0x10>
   2ac18:	e5832004 	str	r2, [r3, #4]
   2ac1c:	e12fff1e 	bx	lr
   2ac20:	0004e114 	.word	0x0004e114

0002ac24 <ChainBootStub(void const*, unsigned int)>:
   2ac24:	e2811003 	add	r1, r1, #3
   2ac28:	e1b01121 	lsrs	r1, r1, #2
   2ac2c:	11a03000 	movne	r3, r0
   2ac30:	159f2030 	ldrne	r2, [pc, #48]	; 2ac68 <ChainBootStub(void const*, unsigned int)+0x44>
   2ac34:	10800101 	addne	r0, r0, r1, lsl #2
   2ac38:	0a000003 	beq	2ac4c <ChainBootStub(void const*, unsigned int)+0x28>
   2ac3c:	e4931004 	ldr	r1, [r3], #4
   2ac40:	e1500003 	cmp	r0, r3
   2ac44:	e5a21004 	str	r1, [r2, #4]!
   2ac48:	1afffffb 	bne	2ac3c <ChainBootStub(void const*, unsigned int)+0x18>
   2ac4c:	e3a03000 	mov	r3, #0
   2ac50:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2ac54:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2ac58:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ac5c:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2ac60:	e3a03902 	mov	r3, #32768	; 0x8000
   2ac64:	e12fff13 	bx	r3
   2ac68:	00007ffc 	.word	0x00007ffc

0002ac6c <EnableChainBoot>:
   2ac6c:	e59f302c 	ldr	r3, [pc, #44]	; 2aca0 <EnableChainBoot+0x34>
   2ac70:	e92d4010 	push	{r4, lr}
   2ac74:	e3a02b01 	mov	r2, #1024	; 0x400
   2ac78:	e8830003 	stm	r3, {r0, r1}
   2ac7c:	e59f1020 	ldr	r1, [pc, #32]	; 2aca4 <EnableChainBoot+0x38>
   2ac80:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   2ac84:	ebffff21 	bl	2a910 <memcpy>
   2ac88:	e3a03000 	mov	r3, #0
   2ac8c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2ac90:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2ac94:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2ac98:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2ac9c:	e8bd8010 	pop	{r4, pc}
   2aca0:	0004e11c 	.word	0x0004e11c
   2aca4:	0002ac24 	.word	0x0002ac24

0002aca8 <IsChainBootEnabled>:
   2aca8:	e59f300c 	ldr	r3, [pc, #12]	; 2acbc <IsChainBootEnabled+0x14>
   2acac:	e5930000 	ldr	r0, [r3]
   2acb0:	e2900000 	adds	r0, r0, #0
   2acb4:	13a00001 	movne	r0, #1
   2acb8:	e12fff1e 	bx	lr
   2acbc:	0004e11c 	.word	0x0004e11c

0002acc0 <DoChainBoot>:
   2acc0:	e59f3008 	ldr	r3, [pc, #8]	; 2acd0 <DoChainBoot+0x10>
   2acc4:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   2acc8:	e8930003 	ldm	r3, {r0, r1}
   2accc:	e12fff12 	bx	r2
   2acd0:	0004e11c 	.word	0x0004e11c

0002acd4 <CMACAddress::CMACAddress()>:
   2acd4:	e3a02000 	mov	r2, #0
   2acd8:	e5c02000 	strb	r2, [r0]
   2acdc:	e12fff1e 	bx	lr

0002ace0 <CMACAddress::~CMACAddress()>:
   2ace0:	e12fff1e 	bx	lr

0002ace4 <CMACAddress::operator==(CMACAddress const&) const>:
   2ace4:	e5d03000 	ldrb	r3, [r0]
   2ace8:	e92d4010 	push	{r4, lr}
   2acec:	e3530000 	cmp	r3, #0
   2acf0:	0a000009 	beq	2ad1c <CMACAddress::operator==(CMACAddress const&) const+0x38>
   2acf4:	e5d13000 	ldrb	r3, [r1]
   2acf8:	e2800001 	add	r0, r0, #1
   2acfc:	e3530000 	cmp	r3, #0
   2ad00:	0a000009 	beq	2ad2c <CMACAddress::operator==(CMACAddress const&) const+0x48>
   2ad04:	e2811001 	add	r1, r1, #1
   2ad08:	e3a02006 	mov	r2, #6
   2ad0c:	ebfffcc3 	bl	2a020 <memcmp>
   2ad10:	e16f0f10 	clz	r0, r0
   2ad14:	e1a002a0 	lsr	r0, r0, #5
   2ad18:	e8bd8010 	pop	{r4, pc}
   2ad1c:	e3a02029 	mov	r2, #41	; 0x29
   2ad20:	e59f1014 	ldr	r1, [pc, #20]	; 2ad3c <CMACAddress::operator==(CMACAddress const&) const+0x58>
   2ad24:	e59f0014 	ldr	r0, [pc, #20]	; 2ad40 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   2ad28:	ebffe6b4 	bl	24800 <assertion_failed>
   2ad2c:	e3a02041 	mov	r2, #65	; 0x41
   2ad30:	e59f1004 	ldr	r1, [pc, #4]	; 2ad3c <CMACAddress::operator==(CMACAddress const&) const+0x58>
   2ad34:	e59f0004 	ldr	r0, [pc, #4]	; 2ad40 <CMACAddress::operator==(CMACAddress const&) const+0x5c>
   2ad38:	ebffe6b0 	bl	24800 <assertion_failed>
   2ad3c:	00045874 	.word	0x00045874
   2ad40:	0003f918 	.word	0x0003f918

0002ad44 <CMACAddress::operator!=(CMACAddress const&) const>:
   2ad44:	e92d4010 	push	{r4, lr}
   2ad48:	ebffffe5 	bl	2ace4 <CMACAddress::operator==(CMACAddress const&) const>
   2ad4c:	e2200001 	eor	r0, r0, #1
   2ad50:	e6ef0070 	uxtb	r0, r0
   2ad54:	e8bd8010 	pop	{r4, pc}

0002ad58 <CMACAddress::Set(unsigned char const*)>:
   2ad58:	e3510000 	cmp	r1, #0
   2ad5c:	e92d4010 	push	{r4, lr}
   2ad60:	0a000006 	beq	2ad80 <CMACAddress::Set(unsigned char const*)+0x28>
   2ad64:	e1a04000 	mov	r4, r0
   2ad68:	e3a02006 	mov	r2, #6
   2ad6c:	e2800001 	add	r0, r0, #1
   2ad70:	ebfffee6 	bl	2a910 <memcpy>
   2ad74:	e3a03001 	mov	r3, #1
   2ad78:	e5c43000 	strb	r3, [r4]
   2ad7c:	e8bd8010 	pop	{r4, pc}
   2ad80:	e3a02034 	mov	r2, #52	; 0x34
   2ad84:	e59f1004 	ldr	r1, [pc, #4]	; 2ad90 <CMACAddress::Set(unsigned char const*)+0x38>
   2ad88:	e59f0004 	ldr	r0, [pc, #4]	; 2ad94 <CMACAddress::Set(unsigned char const*)+0x3c>
   2ad8c:	ebffe69b 	bl	24800 <assertion_failed>
   2ad90:	00045874 	.word	0x00045874
   2ad94:	000444b8 	.word	0x000444b8

0002ad98 <CMACAddress::CMACAddress(unsigned char const*)>:
   2ad98:	e92d4010 	push	{r4, lr}
   2ad9c:	e1a04000 	mov	r4, r0
   2ada0:	ebffffec 	bl	2ad58 <CMACAddress::Set(unsigned char const*)>
   2ada4:	e1a00004 	mov	r0, r4
   2ada8:	e8bd8010 	pop	{r4, pc}

0002adac <CMACAddress::SetBroadcast()>:
   2adac:	e92d4010 	push	{r4, lr}
   2adb0:	e3a02006 	mov	r2, #6
   2adb4:	e1a04000 	mov	r4, r0
   2adb8:	e3a010ff 	mov	r1, #255	; 0xff
   2adbc:	e2800001 	add	r0, r0, #1
   2adc0:	ebfffc5b 	bl	29f34 <memset>
   2adc4:	e3a03001 	mov	r3, #1
   2adc8:	e5c43000 	strb	r3, [r4]
   2adcc:	e8bd8010 	pop	{r4, pc}

0002add0 <CMACAddress::Get() const>:
   2add0:	e5d03000 	ldrb	r3, [r0]
   2add4:	e3530000 	cmp	r3, #0
   2add8:	0a000001 	beq	2ade4 <CMACAddress::Get() const+0x14>
   2addc:	e2800001 	add	r0, r0, #1
   2ade0:	e12fff1e 	bx	lr
   2ade4:	e92d4010 	push	{r4, lr}
   2ade8:	e3a02041 	mov	r2, #65	; 0x41
   2adec:	e59f1004 	ldr	r1, [pc, #4]	; 2adf8 <CMACAddress::Get() const+0x28>
   2adf0:	e59f0004 	ldr	r0, [pc, #4]	; 2adfc <CMACAddress::Get() const+0x2c>
   2adf4:	ebffe681 	bl	24800 <assertion_failed>
   2adf8:	00045874 	.word	0x00045874
   2adfc:	0003f918 	.word	0x0003f918

0002ae00 <CMACAddress::CopyTo(unsigned char*) const>:
   2ae00:	e5d02000 	ldrb	r2, [r0]
   2ae04:	e92d4010 	push	{r4, lr}
   2ae08:	e3520000 	cmp	r2, #0
   2ae0c:	0a000007 	beq	2ae30 <CMACAddress::CopyTo(unsigned char*) const+0x30>
   2ae10:	e3510000 	cmp	r1, #0
   2ae14:	e1a03001 	mov	r3, r1
   2ae18:	0a000008 	beq	2ae40 <CMACAddress::CopyTo(unsigned char*) const+0x40>
   2ae1c:	e8bd4010 	pop	{r4, lr}
   2ae20:	e2801001 	add	r1, r0, #1
   2ae24:	e3a02006 	mov	r2, #6
   2ae28:	e1a00003 	mov	r0, r3
   2ae2c:	eafffeb7 	b	2a910 <memcpy>
   2ae30:	e3a02047 	mov	r2, #71	; 0x47
   2ae34:	e59f1014 	ldr	r1, [pc, #20]	; 2ae50 <CMACAddress::CopyTo(unsigned char*) const+0x50>
   2ae38:	e59f0014 	ldr	r0, [pc, #20]	; 2ae54 <CMACAddress::CopyTo(unsigned char*) const+0x54>
   2ae3c:	ebffe66f 	bl	24800 <assertion_failed>
   2ae40:	e3a02048 	mov	r2, #72	; 0x48
   2ae44:	e59f1004 	ldr	r1, [pc, #4]	; 2ae50 <CMACAddress::CopyTo(unsigned char*) const+0x50>
   2ae48:	e59f0008 	ldr	r0, [pc, #8]	; 2ae58 <CMACAddress::CopyTo(unsigned char*) const+0x58>
   2ae4c:	ebffe66b 	bl	24800 <assertion_failed>
   2ae50:	00045874 	.word	0x00045874
   2ae54:	0003f918 	.word	0x0003f918
   2ae58:	00040b94 	.word	0x00040b94

0002ae5c <CMACAddress::IsBroadcast() const>:
   2ae5c:	e5d0c000 	ldrb	ip, [r0]
   2ae60:	e35c0000 	cmp	ip, #0
   2ae64:	12803001 	addne	r3, r0, #1
   2ae68:	12802007 	addne	r2, r0, #7
   2ae6c:	0a000009 	beq	2ae98 <CMACAddress::IsBroadcast() const+0x3c>
   2ae70:	e4d31001 	ldrb	r1, [r3], #1
   2ae74:	e35100ff 	cmp	r1, #255	; 0xff
   2ae78:	1a000003 	bne	2ae8c <CMACAddress::IsBroadcast() const+0x30>
   2ae7c:	e1530002 	cmp	r3, r2
   2ae80:	1afffffa 	bne	2ae70 <CMACAddress::IsBroadcast() const+0x14>
   2ae84:	e1a0000c 	mov	r0, ip
   2ae88:	e12fff1e 	bx	lr
   2ae8c:	e3a0c000 	mov	ip, #0
   2ae90:	e1a0000c 	mov	r0, ip
   2ae94:	e12fff1e 	bx	lr
   2ae98:	e92d4010 	push	{r4, lr}
   2ae9c:	e3a0204e 	mov	r2, #78	; 0x4e
   2aea0:	e59f1004 	ldr	r1, [pc, #4]	; 2aeac <CMACAddress::IsBroadcast() const+0x50>
   2aea4:	e59f0004 	ldr	r0, [pc, #4]	; 2aeb0 <CMACAddress::IsBroadcast() const+0x54>
   2aea8:	ebffe654 	bl	24800 <assertion_failed>
   2aeac:	00045874 	.word	0x00045874
   2aeb0:	0003f918 	.word	0x0003f918

0002aeb4 <CMACAddress::GetSize() const>:
   2aeb4:	e3a00006 	mov	r0, #6
   2aeb8:	e12fff1e 	bx	lr

0002aebc <CMACAddress::Format(CString*) const>:
   2aebc:	e92d4030 	push	{r4, r5, lr}
   2aec0:	e5d03000 	ldrb	r3, [r0]
   2aec4:	e24dd014 	sub	sp, sp, #20
   2aec8:	e3530000 	cmp	r3, #0
   2aecc:	0a00000f 	beq	2af10 <CMACAddress::Format(CString*) const+0x54>
   2aed0:	e3510000 	cmp	r1, #0
   2aed4:	0a000011 	beq	2af20 <CMACAddress::Format(CString*) const+0x64>
   2aed8:	e5d05006 	ldrb	r5, [r0, #6]
   2aedc:	e5d04005 	ldrb	r4, [r0, #5]
   2aee0:	e5d0e004 	ldrb	lr, [r0, #4]
   2aee4:	e5d0c003 	ldrb	ip, [r0, #3]
   2aee8:	e5d03002 	ldrb	r3, [r0, #2]
   2aeec:	e5d02001 	ldrb	r2, [r0, #1]
   2aef0:	e1a00001 	mov	r0, r1
   2aef4:	e58d500c 	str	r5, [sp, #12]
   2aef8:	e58d4008 	str	r4, [sp, #8]
   2aefc:	e88d5000 	stm	sp, {ip, lr}
   2af00:	e59f1028 	ldr	r1, [pc, #40]	; 2af30 <CMACAddress::Format(CString*) const+0x74>
   2af04:	ebfff859 	bl	29070 <CString::Format(char const*, ...)>
   2af08:	e28dd014 	add	sp, sp, #20
   2af0c:	e8bd8030 	pop	{r4, r5, pc}
   2af10:	e3a02062 	mov	r2, #98	; 0x62
   2af14:	e59f1018 	ldr	r1, [pc, #24]	; 2af34 <CMACAddress::Format(CString*) const+0x78>
   2af18:	e59f0018 	ldr	r0, [pc, #24]	; 2af38 <CMACAddress::Format(CString*) const+0x7c>
   2af1c:	ebffe637 	bl	24800 <assertion_failed>
   2af20:	e3a02063 	mov	r2, #99	; 0x63
   2af24:	e59f1008 	ldr	r1, [pc, #8]	; 2af34 <CMACAddress::Format(CString*) const+0x78>
   2af28:	e59f000c 	ldr	r0, [pc, #12]	; 2af3c <CMACAddress::Format(CString*) const+0x80>
   2af2c:	ebffe633 	bl	24800 <assertion_failed>
   2af30:	00045884 	.word	0x00045884
   2af34:	00045874 	.word	0x00045874
   2af38:	0003f918 	.word	0x0003f918
   2af3c:	000444c8 	.word	0x000444c8

0002af40 <CNetDevice::AddNetDevice()>:
   2af40:	e59f2018 	ldr	r2, [pc, #24]	; 2af60 <CNetDevice::AddNetDevice()+0x20>
   2af44:	e5923000 	ldr	r3, [r2]
   2af48:	e3530004 	cmp	r3, #4
   2af4c:	92831001 	addls	r1, r3, #1
   2af50:	90823103 	addls	r3, r2, r3, lsl #2
   2af54:	95821000 	strls	r1, [r2]
   2af58:	95830004 	strls	r0, [r3, #4]
   2af5c:	e12fff1e 	bx	lr
   2af60:	0004e124 	.word	0x0004e124

0002af64 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   2af64:	e3500005 	cmp	r0, #5
   2af68:	d59f3008 	ldrle	r3, [pc, #8]	; 2af78 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x14>
   2af6c:	d7930100 	ldrle	r0, [r3, r0, lsl #2]
   2af70:	c59f0004 	ldrgt	r0, [pc, #4]	; 2af7c <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x18>
   2af74:	e12fff1e 	bx	lr
   2af78:	00048228 	.word	0x00048228
   2af7c:	000458a4 	.word	0x000458a4

0002af80 <CNetDevice::GetNetDevice(unsigned int)>:
   2af80:	e59f3014 	ldr	r3, [pc, #20]	; 2af9c <CNetDevice::GetNetDevice(unsigned int)+0x1c>
   2af84:	e5932000 	ldr	r2, [r3]
   2af88:	e1520000 	cmp	r2, r0
   2af8c:	80833100 	addhi	r3, r3, r0, lsl #2
   2af90:	85930004 	ldrhi	r0, [r3, #4]
   2af94:	93a00000 	movls	r0, #0
   2af98:	e12fff1e 	bx	lr
   2af9c:	0004e124 	.word	0x0004e124

0002afa0 <CNetDevice::GetNetDevice(TNetDeviceType)>:
   2afa0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2afa4:	e59f608c 	ldr	r6, [pc, #140]	; 2b038 <CNetDevice::GetNetDevice(TNetDeviceType)+0x98>
   2afa8:	e5963000 	ldr	r3, [r6]
   2afac:	e3530000 	cmp	r3, #0
   2afb0:	0a00001a 	beq	2b020 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   2afb4:	e5965004 	ldr	r5, [r6, #4]
   2afb8:	e3550000 	cmp	r5, #0
   2afbc:	0a000017 	beq	2b020 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   2afc0:	e3500002 	cmp	r0, #2
   2afc4:	0a000013 	beq	2b018 <CNetDevice::GetNetDevice(TNetDeviceType)+0x78>
   2afc8:	e3a04000 	mov	r4, #0
   2afcc:	e1a08000 	mov	r8, r0
   2afd0:	e59f9064 	ldr	r9, [pc, #100]	; 2b03c <CNetDevice::GetNetDevice(TNetDeviceType)+0x9c>
   2afd4:	e1a0a004 	mov	sl, r4
   2afd8:	e2867004 	add	r7, r6, #4
   2afdc:	ea000005 	b	2aff8 <CNetDevice::GetNetDevice(TNetDeviceType)+0x58>
   2afe0:	e5963000 	ldr	r3, [r6]
   2afe4:	e1530004 	cmp	r3, r4
   2afe8:	9a00000c 	bls	2b020 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   2afec:	e7975104 	ldr	r5, [r7, r4, lsl #2]
   2aff0:	e3550000 	cmp	r5, #0
   2aff4:	0a000009 	beq	2b020 <CNetDevice::GetNetDevice(TNetDeviceType)+0x80>
   2aff8:	e5953000 	ldr	r3, [r5]
   2affc:	e5933008 	ldr	r3, [r3, #8]
   2b000:	e1530009 	cmp	r3, r9
   2b004:	01a0000a 	moveq	r0, sl
   2b008:	1a000007 	bne	2b02c <CNetDevice::GetNetDevice(TNetDeviceType)+0x8c>
   2b00c:	e1580000 	cmp	r8, r0
   2b010:	e2844001 	add	r4, r4, #1
   2b014:	1afffff1 	bne	2afe0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x40>
   2b018:	e1a00005 	mov	r0, r5
   2b01c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b020:	e3a05000 	mov	r5, #0
   2b024:	e1a00005 	mov	r0, r5
   2b028:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b02c:	e1a00005 	mov	r0, r5
   2b030:	e12fff33 	blx	r3
   2b034:	eafffff4 	b	2b00c <CNetDevice::GetNetDevice(TNetDeviceType)+0x6c>
   2b038:	0004e124 	.word	0x0004e124
   2b03c:	00016194 	.word	0x00016194

0002b040 <operator new(unsigned int, int)>:
   2b040:	eaffffff 	b	2b044 <operator new[](unsigned int, int)>

0002b044 <operator new[](unsigned int, int)>:
   2b044:	e3510000 	cmp	r1, #0
   2b048:	0a000001 	beq	2b054 <operator new[](unsigned int, int)+0x10>
   2b04c:	e3510002 	cmp	r1, #2
   2b050:	1a000004 	bne	2b068 <operator new[](unsigned int, int)+0x24>
   2b054:	e59f3014 	ldr	r3, [pc, #20]	; 2b070 <operator new[](unsigned int, int)+0x2c>
   2b058:	e1a01000 	mov	r1, r0
   2b05c:	e5930000 	ldr	r0, [r3]
   2b060:	e280000c 	add	r0, r0, #12
   2b064:	ea000036 	b	2b144 <CHeapAllocator::Allocate(unsigned int)>
   2b068:	e3a00000 	mov	r0, #0
   2b06c:	e12fff1e 	bx	lr
   2b070:	0004e140 	.word	0x0004e140

0002b074 <operator new(unsigned int)>:
   2b074:	eaffffff 	b	2b078 <operator new[](unsigned int)>

0002b078 <operator new[](unsigned int)>:
   2b078:	e59f300c 	ldr	r3, [pc, #12]	; 2b08c <operator new[](unsigned int)+0x14>
   2b07c:	e1a01000 	mov	r1, r0
   2b080:	e5930000 	ldr	r0, [r3]
   2b084:	e280000c 	add	r0, r0, #12
   2b088:	ea00002d 	b	2b144 <CHeapAllocator::Allocate(unsigned int)>
   2b08c:	0004e140 	.word	0x0004e140

0002b090 <operator delete(void*)>:
   2b090:	eaffffff 	b	2b094 <operator delete[](void*)>

0002b094 <operator delete[](void*)>:
   2b094:	e59f300c 	ldr	r3, [pc, #12]	; 2b0a8 <operator delete[](void*)+0x14>
   2b098:	e1a01000 	mov	r1, r0
   2b09c:	e5930000 	ldr	r0, [r3]
   2b0a0:	e280000c 	add	r0, r0, #12
   2b0a4:	ea0000a4 	b	2b33c <CHeapAllocator::Free(void*)>
   2b0a8:	0004e140 	.word	0x0004e140

0002b0ac <operator delete(void*, unsigned int)>:
   2b0ac:	eaffffff 	b	2b0b0 <operator delete[](void*, unsigned int)>

0002b0b0 <operator delete[](void*, unsigned int)>:
   2b0b0:	e59f300c 	ldr	r3, [pc, #12]	; 2b0c4 <operator delete[](void*, unsigned int)+0x14>
   2b0b4:	e1a01000 	mov	r1, r0
   2b0b8:	e5930000 	ldr	r0, [r3]
   2b0bc:	e280000c 	add	r0, r0, #12
   2b0c0:	ea00009d 	b	2b33c <CHeapAllocator::Free(void*)>
   2b0c4:	0004e140 	.word	0x0004e140

0002b0c8 <CHeapAllocator::CHeapAllocator(char const*)>:
   2b0c8:	e3a03000 	mov	r3, #0
   2b0cc:	e3a02001 	mov	r2, #1
   2b0d0:	e92d4010 	push	{r4, lr}
   2b0d4:	e1a04000 	mov	r4, r0
   2b0d8:	e5801000 	str	r1, [r0]
   2b0dc:	e58020b8 	str	r2, [r0, #184]	; 0xb8
   2b0e0:	e5803004 	str	r3, [r0, #4]
   2b0e4:	e5803008 	str	r3, [r0, #8]
   2b0e8:	e580300c 	str	r3, [r0, #12]
   2b0ec:	e1a01003 	mov	r1, r3
   2b0f0:	e3a020a8 	mov	r2, #168	; 0xa8
   2b0f4:	e2800010 	add	r0, r0, #16
   2b0f8:	ebfffb8d 	bl	29f34 <memset>
   2b0fc:	e1a03004 	mov	r3, r4
   2b100:	e59f201c 	ldr	r2, [pc, #28]	; 2b124 <CHeapAllocator::CHeapAllocator(char const*)+0x5c>
   2b104:	e2840038 	add	r0, r4, #56	; 0x38
   2b108:	e4921004 	ldr	r1, [r2], #4
   2b10c:	e2833008 	add	r3, r3, #8
   2b110:	e5831008 	str	r1, [r3, #8]
   2b114:	e1530000 	cmp	r3, r0
   2b118:	1afffffa 	bne	2b108 <CHeapAllocator::CHeapAllocator(char const*)+0x40>
   2b11c:	e1a00004 	mov	r0, r4
   2b120:	e8bd8010 	pop	{r4, pc}
   2b124:	00048240 	.word	0x00048240

0002b128 <CHeapAllocator::~CHeapAllocator()>:
   2b128:	e12fff1e 	bx	lr

0002b12c <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   2b12c:	e0812002 	add	r2, r1, r2
   2b130:	e980000e 	stmib	r0, {r1, r2, r3}
   2b134:	e12fff1e 	bx	lr

0002b138 <CHeapAllocator::GetFreeSpace() const>:
   2b138:	e9900005 	ldmib	r0, {r0, r2}
   2b13c:	e0420000 	sub	r0, r2, r0
   2b140:	e12fff1e 	bx	lr

0002b144 <CHeapAllocator::Allocate(unsigned int)>:
   2b144:	e5903004 	ldr	r3, [r0, #4]
   2b148:	e3530000 	cmp	r3, #0
   2b14c:	0a000073 	beq	2b320 <CHeapAllocator::Allocate(unsigned int)+0x1dc>
   2b150:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2b154:	e1a06000 	mov	r6, r0
   2b158:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   2b15c:	e1a04001 	mov	r4, r1
   2b160:	e3500000 	cmp	r0, #0
   2b164:	1a000042 	bne	2b274 <CHeapAllocator::Allocate(unsigned int)+0x130>
   2b168:	e5963010 	ldr	r3, [r6, #16]
   2b16c:	e2862010 	add	r2, r6, #16
   2b170:	e3530000 	cmp	r3, #0
   2b174:	0a000007 	beq	2b198 <CHeapAllocator::Allocate(unsigned int)+0x54>
   2b178:	e1540003 	cmp	r4, r3
   2b17c:	8a000002 	bhi	2b18c <CHeapAllocator::Allocate(unsigned int)+0x48>
   2b180:	ea000016 	b	2b1e0 <CHeapAllocator::Allocate(unsigned int)+0x9c>
   2b184:	e1530004 	cmp	r3, r4
   2b188:	2a000014 	bcs	2b1e0 <CHeapAllocator::Allocate(unsigned int)+0x9c>
   2b18c:	e5b23008 	ldr	r3, [r2, #8]!
   2b190:	e3530000 	cmp	r3, #0
   2b194:	1afffffa 	bne	2b184 <CHeapAllocator::Allocate(unsigned int)+0x40>
   2b198:	e5965004 	ldr	r5, [r6, #4]
   2b19c:	e284301f 	add	r3, r4, #31
   2b1a0:	e3c3300f 	bic	r3, r3, #15
   2b1a4:	e0853003 	add	r3, r5, r3
   2b1a8:	e1550003 	cmp	r5, r3
   2b1ac:	e596700c 	ldr	r7, [r6, #12]
   2b1b0:	2a000003 	bcs	2b1c4 <CHeapAllocator::Allocate(unsigned int)+0x80>
   2b1b4:	e5962008 	ldr	r2, [r6, #8]
   2b1b8:	e0422007 	sub	r2, r2, r7
   2b1bc:	e1530002 	cmp	r3, r2
   2b1c0:	9a00002d 	bls	2b27c <CHeapAllocator::Allocate(unsigned int)+0x138>
   2b1c4:	e3570000 	cmp	r7, #0
   2b1c8:	1a000047 	bne	2b2ec <CHeapAllocator::Allocate(unsigned int)+0x1a8>
   2b1cc:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2b1d0:	e3530000 	cmp	r3, #0
   2b1d4:	1a00003d 	bne	2b2d0 <CHeapAllocator::Allocate(unsigned int)+0x18c>
   2b1d8:	e3a00000 	mov	r0, #0
   2b1dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b1e0:	e5925004 	ldr	r5, [r2, #4]
   2b1e4:	e3550000 	cmp	r5, #0
   2b1e8:	01a04003 	moveq	r4, r3
   2b1ec:	0affffe9 	beq	2b198 <CHeapAllocator::Allocate(unsigned int)+0x54>
   2b1f0:	e5d50001 	ldrb	r0, [r5, #1]
   2b1f4:	e5d53000 	ldrb	r3, [r5]
   2b1f8:	e5d51002 	ldrb	r1, [r5, #2]
   2b1fc:	e1833400 	orr	r3, r3, r0, lsl #8
   2b200:	e5d50003 	ldrb	r0, [r5, #3]
   2b204:	e1833801 	orr	r3, r3, r1, lsl #16
   2b208:	e59f1118 	ldr	r1, [pc, #280]	; 2b328 <CHeapAllocator::Allocate(unsigned int)+0x1e4>
   2b20c:	e1833c00 	orr	r3, r3, r0, lsl #24
   2b210:	e1530001 	cmp	r3, r1
   2b214:	1a000030 	bne	2b2dc <CHeapAllocator::Allocate(unsigned int)+0x198>
   2b218:	e5d51009 	ldrb	r1, [r5, #9]
   2b21c:	e5d53008 	ldrb	r3, [r5, #8]
   2b220:	e5d5000a 	ldrb	r0, [r5, #10]
   2b224:	e1833401 	orr	r3, r3, r1, lsl #8
   2b228:	e5d5100b 	ldrb	r1, [r5, #11]
   2b22c:	e1833800 	orr	r3, r3, r0, lsl #16
   2b230:	e1833c01 	orr	r3, r3, r1, lsl #24
   2b234:	e5823004 	str	r3, [r2, #4]
   2b238:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2b23c:	e3530000 	cmp	r3, #0
   2b240:	1a000020 	bne	2b2c8 <CHeapAllocator::Allocate(unsigned int)+0x184>
   2b244:	e3a03000 	mov	r3, #0
   2b248:	e2850010 	add	r0, r5, #16
   2b24c:	e310000f 	tst	r0, #15
   2b250:	e5c53008 	strb	r3, [r5, #8]
   2b254:	e5c53009 	strb	r3, [r5, #9]
   2b258:	e5c5300a 	strb	r3, [r5, #10]
   2b25c:	e5c5300b 	strb	r3, [r5, #11]
   2b260:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2b264:	e3a0208e 	mov	r2, #142	; 0x8e
   2b268:	e59f10bc 	ldr	r1, [pc, #188]	; 2b32c <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   2b26c:	e59f00bc 	ldr	r0, [pc, #188]	; 2b330 <CHeapAllocator::Allocate(unsigned int)+0x1ec>
   2b270:	ebffe562 	bl	24800 <assertion_failed>
   2b274:	eb0002b0 	bl	2bd3c <EnterCritical>
   2b278:	eaffffba 	b	2b168 <CHeapAllocator::Allocate(unsigned int)+0x24>
   2b27c:	e3a0e043 	mov	lr, #67	; 0x43
   2b280:	e3a0c04d 	mov	ip, #77	; 0x4d
   2b284:	e3a0004c 	mov	r0, #76	; 0x4c
   2b288:	e3a01042 	mov	r1, #66	; 0x42
   2b28c:	e5863004 	str	r3, [r6, #4]
   2b290:	e1a03824 	lsr	r3, r4, #16
   2b294:	e5c53006 	strb	r3, [r5, #6]
   2b298:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2b29c:	e1a02424 	lsr	r2, r4, #8
   2b2a0:	e5c54004 	strb	r4, [r5, #4]
   2b2a4:	e3530000 	cmp	r3, #0
   2b2a8:	e1a04c24 	lsr	r4, r4, #24
   2b2ac:	e5c5e000 	strb	lr, [r5]
   2b2b0:	e5c5c001 	strb	ip, [r5, #1]
   2b2b4:	e5c50002 	strb	r0, [r5, #2]
   2b2b8:	e5c51003 	strb	r1, [r5, #3]
   2b2bc:	e5c52005 	strb	r2, [r5, #5]
   2b2c0:	e5c54007 	strb	r4, [r5, #7]
   2b2c4:	0affffde 	beq	2b244 <CHeapAllocator::Allocate(unsigned int)+0x100>
   2b2c8:	eb0002c6 	bl	2bde8 <LeaveCritical>
   2b2cc:	eaffffdc 	b	2b244 <CHeapAllocator::Allocate(unsigned int)+0x100>
   2b2d0:	eb0002c4 	bl	2bde8 <LeaveCritical>
   2b2d4:	e1a00007 	mov	r0, r7
   2b2d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b2dc:	e3a0205e 	mov	r2, #94	; 0x5e
   2b2e0:	e59f1044 	ldr	r1, [pc, #68]	; 2b32c <CHeapAllocator::Allocate(unsigned int)+0x1e8>
   2b2e4:	e59f0048 	ldr	r0, [pc, #72]	; 2b334 <CHeapAllocator::Allocate(unsigned int)+0x1f0>
   2b2e8:	ebffe544 	bl	24800 <assertion_failed>
   2b2ec:	e3a02000 	mov	r2, #0
   2b2f0:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   2b2f4:	e586200c 	str	r2, [r6, #12]
   2b2f8:	e1530002 	cmp	r3, r2
   2b2fc:	0a000000 	beq	2b304 <CHeapAllocator::Allocate(unsigned int)+0x1c0>
   2b300:	eb0002b8 	bl	2bde8 <LeaveCritical>
   2b304:	ebffee30 	bl	26bcc <CLogger::Get()>
   2b308:	e5961000 	ldr	r1, [r6]
   2b30c:	e59f3024 	ldr	r3, [pc, #36]	; 2b338 <CHeapAllocator::Allocate(unsigned int)+0x1f4>
   2b310:	e3a02000 	mov	r2, #0
   2b314:	ebffed69 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b318:	e3a00000 	mov	r0, #0
   2b31c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b320:	e3a00000 	mov	r0, #0
   2b324:	e12fff1e 	bx	lr
   2b328:	424c4d43 	.word	0x424c4d43
   2b32c:	0004593c 	.word	0x0004593c
   2b330:	0004598c 	.word	0x0004598c
   2b334:	00045950 	.word	0x00045950
   2b338:	0004597c 	.word	0x0004597c

0002b33c <CHeapAllocator::Free(void*)>:
   2b33c:	e3510000 	cmp	r1, #0
   2b340:	012fff1e 	bxeq	lr
   2b344:	e92d4070 	push	{r4, r5, r6, lr}
   2b348:	e2415010 	sub	r5, r1, #16
   2b34c:	e5513010 	ldrb	r3, [r1, #-16]
   2b350:	e5d51001 	ldrb	r1, [r5, #1]
   2b354:	e5d52002 	ldrb	r2, [r5, #2]
   2b358:	e1833401 	orr	r3, r3, r1, lsl #8
   2b35c:	e5d51003 	ldrb	r1, [r5, #3]
   2b360:	e1833802 	orr	r3, r3, r2, lsl #16
   2b364:	e59f20dc 	ldr	r2, [pc, #220]	; 2b448 <CHeapAllocator::Free(void*)+0x10c>
   2b368:	e1833c01 	orr	r3, r3, r1, lsl #24
   2b36c:	e1530002 	cmp	r3, r2
   2b370:	e1a06000 	mov	r6, r0
   2b374:	1a00002f 	bne	2b438 <CHeapAllocator::Free(void*)+0xfc>
   2b378:	e5903010 	ldr	r3, [r0, #16]
   2b37c:	e2804010 	add	r4, r0, #16
   2b380:	e3530000 	cmp	r3, #0
   2b384:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b388:	e5d51005 	ldrb	r1, [r5, #5]
   2b38c:	e5d52004 	ldrb	r2, [r5, #4]
   2b390:	e5d50006 	ldrb	r0, [r5, #6]
   2b394:	e1822401 	orr	r2, r2, r1, lsl #8
   2b398:	e5d51007 	ldrb	r1, [r5, #7]
   2b39c:	e1822800 	orr	r2, r2, r0, lsl #16
   2b3a0:	e1822c01 	orr	r2, r2, r1, lsl #24
   2b3a4:	e1530002 	cmp	r3, r2
   2b3a8:	1a000002 	bne	2b3b8 <CHeapAllocator::Free(void*)+0x7c>
   2b3ac:	ea000005 	b	2b3c8 <CHeapAllocator::Free(void*)+0x8c>
   2b3b0:	e1520003 	cmp	r2, r3
   2b3b4:	0a000003 	beq	2b3c8 <CHeapAllocator::Free(void*)+0x8c>
   2b3b8:	e5b43008 	ldr	r3, [r4, #8]!
   2b3bc:	e3530000 	cmp	r3, #0
   2b3c0:	1afffffa 	bne	2b3b0 <CHeapAllocator::Free(void*)+0x74>
   2b3c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b3c8:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   2b3cc:	e3500000 	cmp	r0, #0
   2b3d0:	1a000009 	bne	2b3fc <CHeapAllocator::Free(void*)+0xc0>
   2b3d4:	e5d40004 	ldrb	r0, [r4, #4]
   2b3d8:	e5d41005 	ldrb	r1, [r4, #5]
   2b3dc:	e5d42006 	ldrb	r2, [r4, #6]
   2b3e0:	e5d43007 	ldrb	r3, [r4, #7]
   2b3e4:	e5c50008 	strb	r0, [r5, #8]
   2b3e8:	e5c51009 	strb	r1, [r5, #9]
   2b3ec:	e5c5200a 	strb	r2, [r5, #10]
   2b3f0:	e5c5300b 	strb	r3, [r5, #11]
   2b3f4:	e5845004 	str	r5, [r4, #4]
   2b3f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b3fc:	eb00024e 	bl	2bd3c <EnterCritical>
   2b400:	e596c0b8 	ldr	ip, [r6, #184]	; 0xb8
   2b404:	e5d40004 	ldrb	r0, [r4, #4]
   2b408:	e5d41005 	ldrb	r1, [r4, #5]
   2b40c:	e5d42006 	ldrb	r2, [r4, #6]
   2b410:	e5d43007 	ldrb	r3, [r4, #7]
   2b414:	e35c0000 	cmp	ip, #0
   2b418:	e5c50008 	strb	r0, [r5, #8]
   2b41c:	e5c51009 	strb	r1, [r5, #9]
   2b420:	e5c5200a 	strb	r2, [r5, #10]
   2b424:	e5c5300b 	strb	r3, [r5, #11]
   2b428:	e5845004 	str	r5, [r4, #4]
   2b42c:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b430:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b434:	ea00026b 	b	2bde8 <LeaveCritical>
   2b438:	e3a020bf 	mov	r2, #191	; 0xbf
   2b43c:	e59f1008 	ldr	r1, [pc, #8]	; 2b44c <CHeapAllocator::Free(void*)+0x110>
   2b440:	e59f0008 	ldr	r0, [pc, #8]	; 2b450 <CHeapAllocator::Free(void*)+0x114>
   2b444:	ebffe4ed 	bl	24800 <assertion_failed>
   2b448:	424c4d43 	.word	0x424c4d43
   2b44c:	0004593c 	.word	0x0004593c
   2b450:	00045950 	.word	0x00045950

0002b454 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   2b454:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b458:	e2515000 	subs	r5, r1, #0
   2b45c:	e24dd00c 	sub	sp, sp, #12
   2b460:	0a000031 	beq	2b52c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xd8>
   2b464:	e3520000 	cmp	r2, #0
   2b468:	0a000033 	beq	2b53c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xe8>
   2b46c:	e2454010 	sub	r4, r5, #16
   2b470:	e5d4c001 	ldrb	ip, [r4, #1]
   2b474:	e5553010 	ldrb	r3, [r5, #-16]
   2b478:	e5d41002 	ldrb	r1, [r4, #2]
   2b47c:	e183340c 	orr	r3, r3, ip, lsl #8
   2b480:	e5d4c003 	ldrb	ip, [r4, #3]
   2b484:	e1833801 	orr	r3, r3, r1, lsl #16
   2b488:	e59f10c8 	ldr	r1, [pc, #200]	; 2b558 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x104>
   2b48c:	e1833c0c 	orr	r3, r3, ip, lsl #24
   2b490:	e1530001 	cmp	r3, r1
   2b494:	1a000020 	bne	2b51c <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc8>
   2b498:	e5d41005 	ldrb	r1, [r4, #5]
   2b49c:	e5d43004 	ldrb	r3, [r4, #4]
   2b4a0:	e5d4c006 	ldrb	ip, [r4, #6]
   2b4a4:	e1833401 	orr	r3, r3, r1, lsl #8
   2b4a8:	e5d41007 	ldrb	r1, [r4, #7]
   2b4ac:	e183380c 	orr	r3, r3, ip, lsl #16
   2b4b0:	e1833c01 	orr	r3, r3, r1, lsl #24
   2b4b4:	e1520003 	cmp	r2, r3
   2b4b8:	8a000002 	bhi	2b4c8 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x74>
   2b4bc:	e1a00005 	mov	r0, r5
   2b4c0:	e28dd00c 	add	sp, sp, #12
   2b4c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b4c8:	e1a01002 	mov	r1, r2
   2b4cc:	e1a06000 	mov	r6, r0
   2b4d0:	ebffff1b 	bl	2b144 <CHeapAllocator::Allocate(unsigned int)>
   2b4d4:	e2507000 	subs	r7, r0, #0
   2b4d8:	0a00001c 	beq	2b550 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xfc>
   2b4dc:	e5d42005 	ldrb	r2, [r4, #5]
   2b4e0:	e5d43004 	ldrb	r3, [r4, #4]
   2b4e4:	e5d41006 	ldrb	r1, [r4, #6]
   2b4e8:	e1833402 	orr	r3, r3, r2, lsl #8
   2b4ec:	e5d42007 	ldrb	r2, [r4, #7]
   2b4f0:	e1833801 	orr	r3, r3, r1, lsl #16
   2b4f4:	e1832c02 	orr	r2, r3, r2, lsl #24
   2b4f8:	e1a01005 	mov	r1, r5
   2b4fc:	ebfffd03 	bl	2a910 <memcpy>
   2b500:	e1a01005 	mov	r1, r5
   2b504:	e1a05007 	mov	r5, r7
   2b508:	e1a00006 	mov	r0, r6
   2b50c:	ebffff8a 	bl	2b33c <CHeapAllocator::Free(void*)>
   2b510:	e1a00005 	mov	r0, r5
   2b514:	e28dd00c 	add	sp, sp, #12
   2b518:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b51c:	e3a020a3 	mov	r2, #163	; 0xa3
   2b520:	e59f1034 	ldr	r1, [pc, #52]	; 2b55c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x108>
   2b524:	e59f0034 	ldr	r0, [pc, #52]	; 2b560 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x10c>
   2b528:	ebffe4b4 	bl	24800 <assertion_failed>
   2b52c:	e1a01002 	mov	r1, r2
   2b530:	e28dd00c 	add	sp, sp, #12
   2b534:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   2b538:	eaffff01 	b	2b144 <CHeapAllocator::Allocate(unsigned int)>
   2b53c:	e58d2004 	str	r2, [sp, #4]
   2b540:	ebffff7d 	bl	2b33c <CHeapAllocator::Free(void*)>
   2b544:	e59d2004 	ldr	r2, [sp, #4]
   2b548:	e1a05002 	mov	r5, r2
   2b54c:	eaffffda 	b	2b4bc <CHeapAllocator::ReAllocate(void*, unsigned int)+0x68>
   2b550:	e1a05007 	mov	r5, r7
   2b554:	eaffffd8 	b	2b4bc <CHeapAllocator::ReAllocate(void*, unsigned int)+0x68>
   2b558:	424c4d43 	.word	0x424c4d43
   2b55c:	0004593c 	.word	0x0004593c
   2b560:	00045950 	.word	0x00045950

0002b564 <CExceptionHandler::Get() [clone .part.1]>:
   2b564:	e92d4010 	push	{r4, lr}
   2b568:	e3a02087 	mov	r2, #135	; 0x87
   2b56c:	e59f1004 	ldr	r1, [pc, #4]	; 2b578 <CExceptionHandler::Get() [clone .part.1]+0x14>
   2b570:	e59f0004 	ldr	r0, [pc, #4]	; 2b57c <CExceptionHandler::Get() [clone .part.1]+0x18>
   2b574:	ebffe4a1 	bl	24800 <assertion_failed>
   2b578:	000459c0 	.word	0x000459c0
   2b57c:	00043924 	.word	0x00043924

0002b580 <CExceptionHandler::CExceptionHandler()>:
   2b580:	e59fc06c 	ldr	ip, [pc, #108]	; 2b5f4 <CExceptionHandler::CExceptionHandler()+0x74>
   2b584:	e92d4010 	push	{r4, lr}
   2b588:	e1a04000 	mov	r4, r0
   2b58c:	e59c0000 	ldr	r0, [ip]
   2b590:	e3500000 	cmp	r0, #0
   2b594:	1a000012 	bne	2b5e4 <CExceptionHandler::CExceptionHandler()+0x64>
   2b598:	e59f1058 	ldr	r1, [pc, #88]	; 2b5f8 <CExceptionHandler::CExceptionHandler()+0x78>
   2b59c:	e59f2058 	ldr	r2, [pc, #88]	; 2b5fc <CExceptionHandler::CExceptionHandler()+0x7c>
   2b5a0:	e59f3058 	ldr	r3, [pc, #88]	; 2b600 <CExceptionHandler::CExceptionHandler()+0x80>
   2b5a4:	e1a01141 	asr	r1, r1, #2
   2b5a8:	e1a02142 	asr	r2, r2, #2
   2b5ac:	e1a03143 	asr	r3, r3, #2
   2b5b0:	e2411002 	sub	r1, r1, #2
   2b5b4:	e2422002 	sub	r2, r2, #2
   2b5b8:	e2433002 	sub	r3, r3, #2
   2b5bc:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   2b5c0:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2b5c4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2b5c8:	e58c4000 	str	r4, [ip]
   2b5cc:	e5801004 	str	r1, [r0, #4]
   2b5d0:	e580200c 	str	r2, [r0, #12]
   2b5d4:	e5803010 	str	r3, [r0, #16]
   2b5d8:	eb000227 	bl	2be7c <SyncDataAndInstructionCache>
   2b5dc:	e1a00004 	mov	r0, r4
   2b5e0:	e8bd8010 	pop	{r4, pc}
   2b5e4:	e3a02030 	mov	r2, #48	; 0x30
   2b5e8:	e59f1014 	ldr	r1, [pc, #20]	; 2b604 <CExceptionHandler::CExceptionHandler()+0x84>
   2b5ec:	e59f0014 	ldr	r0, [pc, #20]	; 2b608 <CExceptionHandler::CExceptionHandler()+0x88>
   2b5f0:	ebffe482 	bl	24800 <assertion_failed>
   2b5f4:	0004e13c 	.word	0x0004e13c
   2b5f8:	0002b8cc 	.word	0x0002b8cc
   2b5fc:	0002b824 	.word	0x0002b824
   2b600:	0002b870 	.word	0x0002b870
   2b604:	000459c0 	.word	0x000459c0
   2b608:	000438ec 	.word	0x000438ec

0002b60c <CExceptionHandler::~CExceptionHandler()>:
   2b60c:	e3a02000 	mov	r2, #0
   2b610:	e59f3004 	ldr	r3, [pc, #4]	; 2b61c <CExceptionHandler::~CExceptionHandler()+0x10>
   2b614:	e5832000 	str	r2, [r3]
   2b618:	e12fff1e 	bx	lr
   2b61c:	0004e13c 	.word	0x0004e13c

0002b620 <CExceptionHandler::Throw(unsigned int)>:
   2b620:	e92d4010 	push	{r4, lr}
   2b624:	e1a04001 	mov	r4, r1
   2b628:	e24dd008 	sub	sp, sp, #8
   2b62c:	ebffed66 	bl	26bcc <CLogger::Get()>
   2b630:	e59f201c 	ldr	r2, [pc, #28]	; 2b654 <CExceptionHandler::Throw(unsigned int)+0x34>
   2b634:	e59f301c 	ldr	r3, [pc, #28]	; 2b658 <CExceptionHandler::Throw(unsigned int)+0x38>
   2b638:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   2b63c:	e3a02000 	mov	r2, #0
   2b640:	e58d1000 	str	r1, [sp]
   2b644:	e59f1010 	ldr	r1, [pc, #16]	; 2b65c <CExceptionHandler::Throw(unsigned int)+0x3c>
   2b648:	ebffec9c 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b64c:	e28dd008 	add	sp, sp, #8
   2b650:	e8bd8010 	pop	{r4, pc}
   2b654:	0004825c 	.word	0x0004825c
   2b658:	000459d8 	.word	0x000459d8
   2b65c:	000459b8 	.word	0x000459b8

0002b660 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   2b660:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2b664:	e3510002 	cmp	r1, #2
   2b668:	e24dd024 	sub	sp, sp, #36	; 0x24
   2b66c:	e1a05001 	mov	r5, r1
   2b670:	e1a04002 	mov	r4, r2
   2b674:	0a00002a 	beq	2b724 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
   2b678:	e3510003 	cmp	r1, #3
   2b67c:	0a000020 	beq	2b704 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xa4>
   2b680:	e3a08000 	mov	r8, #0
   2b684:	e1a09008 	mov	r9, r8
   2b688:	e3540000 	cmp	r4, #0
   2b68c:	0a000020 	beq	2b714 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   2b690:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   2b694:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   2b698:	e203301f 	and	r3, r3, #31
   2b69c:	e3530011 	cmp	r3, #17
   2b6a0:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   2b6a4:	0a000021 	beq	2b730 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd0>
   2b6a8:	e3530012 	cmp	r3, #18
   2b6ac:	089400c0 	ldmeq	r4, {r6, r7}
   2b6b0:	e59f1084 	ldr	r1, [pc, #132]	; 2b73c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2b6b4:	e1a00006 	mov	r0, r6
   2b6b8:	ebffe60a 	bl	24ee8 <debug_stacktrace(unsigned int const*, char const*)>
   2b6bc:	ebffed42 	bl	26bcc <CLogger::Get()>
   2b6c0:	e59f3078 	ldr	r3, [pc, #120]	; 2b740 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe0>
   2b6c4:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
   2b6c8:	e7931105 	ldr	r1, [r3, r5, lsl #2]
   2b6cc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   2b6d0:	e58d1000 	str	r1, [sp]
   2b6d4:	e58d2018 	str	r2, [sp, #24]
   2b6d8:	e58d3004 	str	r3, [sp, #4]
   2b6dc:	e58d7014 	str	r7, [sp, #20]
   2b6e0:	e58d6010 	str	r6, [sp, #16]
   2b6e4:	e58d800c 	str	r8, [sp, #12]
   2b6e8:	e58d9008 	str	r9, [sp, #8]
   2b6ec:	e59f3050 	ldr	r3, [pc, #80]	; 2b744 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   2b6f0:	e3a02000 	mov	r2, #0
   2b6f4:	e59f1040 	ldr	r1, [pc, #64]	; 2b73c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   2b6f8:	ebffec70 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b6fc:	e28dd024 	add	sp, sp, #36	; 0x24
   2b700:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2b704:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   2b708:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   2b70c:	e3540000 	cmp	r4, #0
   2b710:	1affffde 	bne	2b690 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   2b714:	e3a02069 	mov	r2, #105	; 0x69
   2b718:	e59f1028 	ldr	r1, [pc, #40]	; 2b748 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   2b71c:	e59f0028 	ldr	r0, [pc, #40]	; 2b74c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xec>
   2b720:	ebffe436 	bl	24800 <assertion_failed>
   2b724:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   2b728:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   2b72c:	eaffffd5 	b	2b688 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   2b730:	e594700c 	ldr	r7, [r4, #12]
   2b734:	e5946008 	ldr	r6, [r4, #8]
   2b738:	eaffffdc 	b	2b6b0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>
   2b73c:	000459b8 	.word	0x000459b8
   2b740:	0004825c 	.word	0x0004825c
   2b744:	000459e8 	.word	0x000459e8
   2b748:	000459c0 	.word	0x000459c0
   2b74c:	00043ba4 	.word	0x00043ba4

0002b750 <CExceptionHandler::Get()>:
   2b750:	e59f3014 	ldr	r3, [pc, #20]	; 2b76c <CExceptionHandler::Get()+0x1c>
   2b754:	e5930000 	ldr	r0, [r3]
   2b758:	e3500000 	cmp	r0, #0
   2b75c:	0a000000 	beq	2b764 <CExceptionHandler::Get()+0x14>
   2b760:	e12fff1e 	bx	lr
   2b764:	e92d4010 	push	{r4, lr}
   2b768:	ebffff7d 	bl	2b564 <CExceptionHandler::Get() [clone .part.1]>
   2b76c:	0004e13c 	.word	0x0004e13c

0002b770 <ExceptionHandler>:
   2b770:	e92d4070 	push	{r4, r5, r6, lr}
   2b774:	e3a03000 	mov	r3, #0
   2b778:	e1a04000 	mov	r4, r0
   2b77c:	e1a05001 	mov	r5, r1
   2b780:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b784:	eb0002cc 	bl	2c2bc <CInterruptSystem::DisableFIQ()>
   2b788:	f1080040 	cpsie	f
   2b78c:	e59f301c 	ldr	r3, [pc, #28]	; 2b7b0 <ExceptionHandler+0x40>
   2b790:	e5930000 	ldr	r0, [r3]
   2b794:	e3500000 	cmp	r0, #0
   2b798:	0a000003 	beq	2b7ac <ExceptionHandler+0x3c>
   2b79c:	e1a02005 	mov	r2, r5
   2b7a0:	e1a01004 	mov	r1, r4
   2b7a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b7a8:	eaffffac 	b	2b660 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   2b7ac:	ebffff6c 	bl	2b564 <CExceptionHandler::Get() [clone .part.1]>
   2b7b0:	0004e13c 	.word	0x0004e13c

0002b7b4 <raise>:
   2b7b4:	e59f3020 	ldr	r3, [pc, #32]	; 2b7dc <raise+0x28>
   2b7b8:	e92d4010 	push	{r4, lr}
   2b7bc:	e5930000 	ldr	r0, [r3]
   2b7c0:	e3500000 	cmp	r0, #0
   2b7c4:	0a000003 	beq	2b7d8 <raise+0x24>
   2b7c8:	e3a01004 	mov	r1, #4
   2b7cc:	ebffff93 	bl	2b620 <CExceptionHandler::Throw(unsigned int)>
   2b7d0:	e3a00000 	mov	r0, #0
   2b7d4:	e8bd8010 	pop	{r4, pc}
   2b7d8:	ebffff61 	bl	2b564 <CExceptionHandler::Get() [clone .part.1]>
   2b7dc:	0004e13c 	.word	0x0004e13c

0002b7e0 <UndefinedInstructionInternal>:
   2b7e0:	e24dd004 	sub	sp, sp, #4
   2b7e4:	e24ee004 	sub	lr, lr, #4
   2b7e8:	e92d4000 	stmfd	sp!, {lr}
   2b7ec:	e14fe000 	mrs	lr, SPSR
   2b7f0:	e92d4000 	stmfd	sp!, {lr}
   2b7f4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b7f8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b7fc:	e1a0100d 	mov	r1, sp
   2b800:	f1020012 	cps	#18
   2b804:	e1a0200d 	mov	r2, sp
   2b808:	e1a0300e 	mov	r3, lr
   2b80c:	f1020011 	cps	#17
   2b810:	e1a0400d 	mov	r4, sp
   2b814:	e1a0500e 	mov	r5, lr
   2b818:	f102001f 	cps	#31
   2b81c:	e1a0d001 	mov	sp, r1
   2b820:	e92d003c 	push	{r2, r3, r4, r5}
   2b824:	e1a0100d 	mov	r1, sp
   2b828:	e3a00001 	mov	r0, #1
   2b82c:	eaffffcf 	b	2b770 <ExceptionHandler>

0002b830 <PrefetchAbortStub>:
   2b830:	e24dd004 	sub	sp, sp, #4
   2b834:	e24ee004 	sub	lr, lr, #4
   2b838:	e92d4000 	stmfd	sp!, {lr}
   2b83c:	e14fe000 	mrs	lr, SPSR
   2b840:	e92d4000 	stmfd	sp!, {lr}
   2b844:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b848:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b84c:	e1a0100d 	mov	r1, sp
   2b850:	f1020012 	cps	#18
   2b854:	e1a0200d 	mov	r2, sp
   2b858:	e1a0300e 	mov	r3, lr
   2b85c:	f1020011 	cps	#17
   2b860:	e1a0400d 	mov	r4, sp
   2b864:	e1a0500e 	mov	r5, lr
   2b868:	f102001f 	cps	#31
   2b86c:	e1a0d001 	mov	sp, r1
   2b870:	e92d003c 	push	{r2, r3, r4, r5}
   2b874:	e1a0100d 	mov	r1, sp
   2b878:	e3a00002 	mov	r0, #2
   2b87c:	eaffffbb 	b	2b770 <ExceptionHandler>

0002b880 <DataAbortStub>:
   2b880:	e24dd004 	sub	sp, sp, #4
   2b884:	e24ee008 	sub	lr, lr, #8
   2b888:	e92d4000 	stmfd	sp!, {lr}
   2b88c:	e14fe000 	mrs	lr, SPSR
   2b890:	e92d4000 	stmfd	sp!, {lr}
   2b894:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   2b898:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   2b89c:	e1a0100d 	mov	r1, sp
   2b8a0:	f1020012 	cps	#18
   2b8a4:	e1a0200d 	mov	r2, sp
   2b8a8:	e1a0300e 	mov	r3, lr
   2b8ac:	f1020011 	cps	#17
   2b8b0:	e1a0400d 	mov	r4, sp
   2b8b4:	e1a0500e 	mov	r5, lr
   2b8b8:	f102001f 	cps	#31
   2b8bc:	e1a0d001 	mov	sp, r1
   2b8c0:	e92d003c 	push	{r2, r3, r4, r5}
   2b8c4:	e1a0100d 	mov	r1, sp
   2b8c8:	e3a00003 	mov	r0, #3
   2b8cc:	eaffffa7 	b	2b770 <ExceptionHandler>

0002b8d0 <UndefinedInstructionStub>:
   2b8d0:	e92d4001 	push	{r0, lr}
   2b8d4:	eef80a10 	vmrs	r0, fpexc
   2b8d8:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   2b8dc:	0affffbf 	beq	2b7e0 <UndefinedInstructionInternal>
   2b8e0:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   2b8e4:	eee80a10 	vmsr	fpexc, r0
   2b8e8:	e8fd8001 	ldm	sp!, {r0, pc}^

0002b8ec <IRQStub>:
   2b8ec:	e24ee004 	sub	lr, lr, #4
   2b8f0:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2b8f4:	e59f0060 	ldr	r0, [pc, #96]	; 2b95c <FIQStub+0x58>
   2b8f8:	e580e000 	str	lr, [r0]
   2b8fc:	eb0002c8 	bl	2c424 <InterruptHandler>
   2b900:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

0002b904 <FIQStub>:
   2b904:	e24ee004 	sub	lr, lr, #4
   2b908:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   2b90c:	e3a03000 	mov	r3, #0
   2b910:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b914:	e59f2044 	ldr	r2, [pc, #68]	; 2b960 <FIQStub+0x5c>
   2b918:	e5921000 	ldr	r1, [r2]
   2b91c:	e3510000 	cmp	r1, #0
   2b920:	0a000004 	beq	2b938 <FIQStub+0x34>
   2b924:	e5920004 	ldr	r0, [r2, #4]
   2b928:	e12fff31 	blx	r1
   2b92c:	e3a03000 	mov	r3, #0
   2b930:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b934:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2b938:	e3a03000 	mov	r3, #0
   2b93c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b940:	e59f101c 	ldr	r1, [pc, #28]	; 2b964 <FIQStub+0x60>
   2b944:	e3a00000 	mov	r0, #0
   2b948:	e5810000 	str	r0, [r1]
   2b94c:	e3a03000 	mov	r3, #0
   2b950:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2b954:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2b958:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   2b95c:	0004827c 	.word	0x0004827c
   2b960:	00048270 	.word	0x00048270
   2b964:	2000b20c 	.word	0x2000b20c

0002b968 <CMemorySystem::CMemorySystem(bool)>:
   2b968:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b96c:	e1a04000 	mov	r4, r0
   2b970:	e3a05000 	mov	r5, #0
   2b974:	e280700c 	add	r7, r0, #12
   2b978:	e5c01000 	strb	r1, [r0]
   2b97c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   2b980:	e5845004 	str	r5, [r4, #4]
   2b984:	e5845008 	str	r5, [r4, #8]
   2b988:	e59f10fc 	ldr	r1, [pc, #252]	; 2ba8c <CMemorySystem::CMemorySystem(bool)+0x124>
   2b98c:	e1a00007 	mov	r0, r7
   2b990:	e28460c8 	add	r6, r4, #200	; 0xc8
   2b994:	ebfffdcb 	bl	2b0c8 <CHeapAllocator::CHeapAllocator(char const*)>
   2b998:	e1a00006 	mov	r0, r6
   2b99c:	eb00053f 	bl	2cea0 <CPageAllocator::CPageAllocator()>
   2b9a0:	e59f30e8 	ldr	r3, [pc, #232]	; 2ba90 <CMemorySystem::CMemorySystem(bool)+0x128>
   2b9a4:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2b9a8:	e5935000 	ldr	r5, [r3]
   2b9ac:	e3550000 	cmp	r5, #0
   2b9b0:	0a000002 	beq	2b9c0 <CMemorySystem::CMemorySystem(bool)+0x58>
   2b9b4:	e1a00004 	mov	r0, r4
   2b9b8:	e28dd02c 	add	sp, sp, #44	; 0x2c
   2b9bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2b9c0:	e3a01001 	mov	r1, #1
   2b9c4:	e28d000c 	add	r0, sp, #12
   2b9c8:	e5834000 	str	r4, [r3]
   2b9cc:	ebffe3ac 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2b9d0:	e3a03014 	mov	r3, #20
   2b9d4:	e58d5000 	str	r5, [sp]
   2b9d8:	e28d000c 	add	r0, sp, #12
   2b9dc:	e08d2003 	add	r2, sp, r3
   2b9e0:	e59f10ac 	ldr	r1, [pc, #172]	; 2ba94 <CMemorySystem::CMemorySystem(bool)+0x12c>
   2b9e4:	ebffe3b2 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2b9e8:	e3500000 	cmp	r0, #0
   2b9ec:	0a00001c 	beq	2ba64 <CMemorySystem::CMemorySystem(bool)+0xfc>
   2b9f0:	e59d3020 	ldr	r3, [sp, #32]
   2b9f4:	e3530000 	cmp	r3, #0
   2b9f8:	1a00001f 	bne	2ba7c <CMemorySystem::CMemorySystem(bool)+0x114>
   2b9fc:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2ba00:	e2432609 	sub	r2, r3, #9437184	; 0x900000
   2ba04:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   2ba08:	e5843004 	str	r3, [r4, #4]
   2ba0c:	e1a00007 	mov	r0, r7
   2ba10:	e3a03701 	mov	r3, #262144	; 0x40000
   2ba14:	e3a01605 	mov	r1, #5242880	; 0x500000
   2ba18:	ebfffdc3 	bl	2b12c <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   2ba1c:	e1a01005 	mov	r1, r5
   2ba20:	e1a00006 	mov	r0, r6
   2ba24:	e3a02501 	mov	r2, #4194304	; 0x400000
   2ba28:	eb000524 	bl	2cec0 <CPageAllocator::Setup(unsigned int, unsigned int)>
   2ba2c:	e5d43000 	ldrb	r3, [r4]
   2ba30:	e3530000 	cmp	r3, #0
   2ba34:	0a000007 	beq	2ba58 <CMemorySystem::CMemorySystem(bool)+0xf0>
   2ba38:	e3a00004 	mov	r0, #4
   2ba3c:	ebfffd8c 	bl	2b074 <operator new(unsigned int)>
   2ba40:	e1a05000 	mov	r5, r0
   2ba44:	e5941004 	ldr	r1, [r4, #4]
   2ba48:	eb000087 	bl	2bc6c <CPageTable::CPageTable(unsigned int)>
   2ba4c:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   2ba50:	e1a00004 	mov	r0, r4
   2ba54:	eb000049 	bl	2bb80 <CMemorySystem::EnableMMU()>
   2ba58:	e28d000c 	add	r0, sp, #12
   2ba5c:	ebffe38f 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   2ba60:	eaffffd3 	b	2b9b4 <CMemorySystem::CMemorySystem(bool)+0x4c>
   2ba64:	e3a03303 	mov	r3, #201326592	; 0xc000000
   2ba68:	e58d0020 	str	r0, [sp, #32]
   2ba6c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   2ba70:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   2ba74:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   2ba78:	eaffffe2 	b	2ba08 <CMemorySystem::CMemorySystem(bool)+0xa0>
   2ba7c:	e59f1014 	ldr	r1, [pc, #20]	; 2ba98 <CMemorySystem::CMemorySystem(bool)+0x130>
   2ba80:	e3a0204e 	mov	r2, #78	; 0x4e
   2ba84:	e281000c 	add	r0, r1, #12
   2ba88:	ebffe35c 	bl	24800 <assertion_failed>
   2ba8c:	00045a70 	.word	0x00045a70
   2ba90:	0004e140 	.word	0x0004e140
   2ba94:	00010005 	.word	0x00010005
   2ba98:	00045a78 	.word	0x00045a78

0002ba9c <CMemorySystem::~CMemorySystem()>:
   2ba9c:	e59f3044 	ldr	r3, [pc, #68]	; 2bae8 <CMemorySystem::~CMemorySystem()+0x4c>
   2baa0:	e92d4010 	push	{r4, lr}
   2baa4:	e5932000 	ldr	r2, [r3]
   2baa8:	e1a04000 	mov	r4, r0
   2baac:	e1500002 	cmp	r0, r2
   2bab0:	0a000005 	beq	2bacc <CMemorySystem::~CMemorySystem()+0x30>
   2bab4:	e28400c8 	add	r0, r4, #200	; 0xc8
   2bab8:	eb0004ff 	bl	2cebc <CPageAllocator::~CPageAllocator()>
   2babc:	e284000c 	add	r0, r4, #12
   2bac0:	ebfffd98 	bl	2b128 <CHeapAllocator::~CHeapAllocator()>
   2bac4:	e1a00004 	mov	r0, r4
   2bac8:	e8bd8010 	pop	{r4, pc}
   2bacc:	e3a01000 	mov	r1, #0
   2bad0:	e5d02000 	ldrb	r2, [r0]
   2bad4:	e5831000 	str	r1, [r3]
   2bad8:	e1520001 	cmp	r2, r1
   2badc:	0afffff4 	beq	2bab4 <CMemorySystem::~CMemorySystem()+0x18>
   2bae0:	eb000056 	bl	2bc40 <CMemorySystem::Destructor() [clone .part.0]>
   2bae4:	eafffff2 	b	2bab4 <CMemorySystem::~CMemorySystem()+0x18>
   2bae8:	0004e140 	.word	0x0004e140

0002baec <CMemorySystem::Destructor()>:
   2baec:	e59f3020 	ldr	r3, [pc, #32]	; 2bb14 <CMemorySystem::Destructor()+0x28>
   2baf0:	e5932000 	ldr	r2, [r3]
   2baf4:	e1520000 	cmp	r2, r0
   2baf8:	112fff1e 	bxne	lr
   2bafc:	e3a01000 	mov	r1, #0
   2bb00:	e5d22000 	ldrb	r2, [r2]
   2bb04:	e5831000 	str	r1, [r3]
   2bb08:	e1520001 	cmp	r2, r1
   2bb0c:	012fff1e 	bxeq	lr
   2bb10:	ea00004a 	b	2bc40 <CMemorySystem::Destructor() [clone .part.0]>
   2bb14:	0004e140 	.word	0x0004e140

0002bb18 <CMemorySystem::GetMemSize() const>:
   2bb18:	e59f3028 	ldr	r3, [pc, #40]	; 2bb48 <CMemorySystem::GetMemSize() const+0x30>
   2bb1c:	e5933000 	ldr	r3, [r3]
   2bb20:	e3530000 	cmp	r3, #0
   2bb24:	0a000002 	beq	2bb34 <CMemorySystem::GetMemSize() const+0x1c>
   2bb28:	e9930009 	ldmib	r3, {r0, r3}
   2bb2c:	e0800003 	add	r0, r0, r3
   2bb30:	e12fff1e 	bx	lr
   2bb34:	e59f1010 	ldr	r1, [pc, #16]	; 2bb4c <CMemorySystem::GetMemSize() const+0x34>
   2bb38:	e92d4010 	push	{r4, lr}
   2bb3c:	e3a020a0 	mov	r2, #160	; 0xa0
   2bb40:	e2810028 	add	r0, r1, #40	; 0x28
   2bb44:	ebffe32d 	bl	24800 <assertion_failed>
   2bb48:	0004e140 	.word	0x0004e140
   2bb4c:	00045a78 	.word	0x00045a78

0002bb50 <CMemorySystem::Get()>:
   2bb50:	e59f3020 	ldr	r3, [pc, #32]	; 2bb78 <CMemorySystem::Get()+0x28>
   2bb54:	e5930000 	ldr	r0, [r3]
   2bb58:	e3500000 	cmp	r0, #0
   2bb5c:	0a000000 	beq	2bb64 <CMemorySystem::Get()+0x14>
   2bb60:	e12fff1e 	bx	lr
   2bb64:	e59f1010 	ldr	r1, [pc, #16]	; 2bb7c <CMemorySystem::Get()+0x2c>
   2bb68:	e92d4010 	push	{r4, lr}
   2bb6c:	e3a020a6 	mov	r2, #166	; 0xa6
   2bb70:	e2810028 	add	r0, r1, #40	; 0x28
   2bb74:	ebffe321 	bl	24800 <assertion_failed>
   2bb78:	0004e140 	.word	0x0004e140
   2bb7c:	00045a78 	.word	0x00045a78

0002bb80 <CMemorySystem::EnableMMU()>:
   2bb80:	e5d03000 	ldrb	r3, [r0]
   2bb84:	e92d4010 	push	{r4, lr}
   2bb88:	e3530000 	cmp	r3, #0
   2bb8c:	0a00001a 	beq	2bbfc <CMemorySystem::EnableMMU()+0x7c>
   2bb90:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   2bb94:	e3833040 	orr	r3, r3, #64	; 0x40
   2bb98:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   2bb9c:	ee104f70 	mrc	15, 0, r4, cr0, cr0, {3}
   2bba0:	e2144001 	ands	r4, r4, #1
   2bba4:	1a000018 	bne	2bc0c <CMemorySystem::EnableMMU()+0x8c>
   2bba8:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   2bbac:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   2bbb0:	e3500000 	cmp	r0, #0
   2bbb4:	0a000018 	beq	2bc1c <CMemorySystem::EnableMMU()+0x9c>
   2bbb8:	eb000056 	bl	2bd18 <CPageTable::GetBaseAddress() const>
   2bbbc:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   2bbc0:	e3a03001 	mov	r3, #1
   2bbc4:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   2bbc8:	ee074f16 	mcr	15, 0, r4, cr7, cr6, {0}
   2bbcc:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2bbd0:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   2bbd4:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   2bbd8:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   2bbdc:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2bbe0:	ee074f95 	mcr	15, 0, r4, cr7, cr5, {4}
   2bbe4:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   2bbe8:	e59f203c 	ldr	r2, [pc, #60]	; 2bc2c <CMemorySystem::EnableMMU()+0xac>
   2bbec:	e3c33002 	bic	r3, r3, #2
   2bbf0:	e1832002 	orr	r2, r3, r2
   2bbf4:	ee012f10 	mcr	15, 0, r2, cr1, cr0, {0}
   2bbf8:	e8bd8010 	pop	{r4, pc}
   2bbfc:	e59f102c 	ldr	r1, [pc, #44]	; 2bc30 <CMemorySystem::EnableMMU()+0xb0>
   2bc00:	e3a020ac 	mov	r2, #172	; 0xac
   2bc04:	e2810038 	add	r0, r1, #56	; 0x38
   2bc08:	ebffe2fc 	bl	24800 <assertion_failed>
   2bc0c:	e59f101c 	ldr	r1, [pc, #28]	; 2bc30 <CMemorySystem::EnableMMU()+0xb0>
   2bc10:	e3a020ba 	mov	r2, #186	; 0xba
   2bc14:	e2810048 	add	r0, r1, #72	; 0x48
   2bc18:	ebffe2f8 	bl	24800 <assertion_failed>
   2bc1c:	e59f100c 	ldr	r1, [pc, #12]	; 2bc30 <CMemorySystem::EnableMMU()+0xb0>
   2bc20:	e3a020c0 	mov	r2, #192	; 0xc0
   2bc24:	e2810074 	add	r0, r1, #116	; 0x74
   2bc28:	ebffe2f4 	bl	24800 <assertion_failed>
   2bc2c:	00c01805 	.word	0x00c01805
   2bc30:	00045a78 	.word	0x00045a78

0002bc34 <CMemorySystem::GetCoherentPage(unsigned int)>:
   2bc34:	e1a00600 	lsl	r0, r0, #12
   2bc38:	e2800501 	add	r0, r0, #4194304	; 0x400000
   2bc3c:	e12fff1e 	bx	lr

0002bc40 <CMemorySystem::Destructor() [clone .part.0]>:
   2bc40:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   2bc44:	e3c33005 	bic	r3, r3, #5
   2bc48:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   2bc4c:	e3a03000 	mov	r3, #0
   2bc50:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2bc54:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bc58:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   2bc5c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bc60:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   2bc64:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bc68:	e12fff1e 	bx	lr

0002bc6c <CPageTable::CPageTable(unsigned int)>:
   2bc6c:	e3a02709 	mov	r2, #2359296	; 0x240000
   2bc70:	e3a03000 	mov	r3, #0
   2bc74:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2bc78:	e59fc074 	ldr	ip, [pc, #116]	; 2bcf4 <CPageTable::CPageTable(unsigned int)+0x88>
   2bc7c:	e59f4074 	ldr	r4, [pc, #116]	; 2bcf8 <CPageTable::CPageTable(unsigned int)+0x8c>
   2bc80:	e59f5074 	ldr	r5, [pc, #116]	; 2bcfc <CPageTable::CPageTable(unsigned int)+0x90>
   2bc84:	e59f9074 	ldr	r9, [pc, #116]	; 2bd00 <CPageTable::CPageTable(unsigned int)+0x94>
   2bc88:	e59f8074 	ldr	r8, [pc, #116]	; 2bd04 <CPageTable::CPageTable(unsigned int)+0x98>
   2bc8c:	e59f7074 	ldr	r7, [pc, #116]	; 2bd08 <CPageTable::CPageTable(unsigned int)+0x9c>
   2bc90:	e59f6074 	ldr	r6, [pc, #116]	; 2bd0c <CPageTable::CPageTable(unsigned int)+0xa0>
   2bc94:	e59fe074 	ldr	lr, [pc, #116]	; 2bd10 <CPageTable::CPageTable(unsigned int)+0xa4>
   2bc98:	e5802000 	str	r2, [r0]
   2bc9c:	e1530004 	cmp	r3, r4
   2bca0:	31a02005 	movcc	r2, r5
   2bca4:	3a000007 	bcc	2bcc8 <CPageTable::CPageTable(unsigned int)+0x5c>
   2bca8:	e3530501 	cmp	r3, #4194304	; 0x400000
   2bcac:	0a00000e 	beq	2bcec <CPageTable::CPageTable(unsigned int)+0x80>
   2bcb0:	e1510003 	cmp	r1, r3
   2bcb4:	81a02008 	movhi	r2, r8
   2bcb8:	8a000002 	bhi	2bcc8 <CPageTable::CPageTable(unsigned int)+0x5c>
   2bcbc:	e1530007 	cmp	r3, r7
   2bcc0:	91a02006 	movls	r2, r6
   2bcc4:	83a02000 	movhi	r2, #0
   2bcc8:	e1822003 	orr	r2, r2, r3
   2bccc:	e5ac2004 	str	r2, [ip, #4]!
   2bcd0:	e15c000e 	cmp	ip, lr
   2bcd4:	e2833601 	add	r3, r3, #1048576	; 0x100000
   2bcd8:	1affffef 	bne	2bc9c <CPageTable::CPageTable(unsigned int)+0x30>
   2bcdc:	e3a03000 	mov	r3, #0
   2bce0:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2bce4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bce8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2bcec:	e1a02009 	mov	r2, r9
   2bcf0:	eafffff4 	b	2bcc8 <CPageTable::CPageTable(unsigned int)+0x5c>
   2bcf4:	0023fffc 	.word	0x0023fffc
   2bcf8:	0003ecc8 	.word	0x0003ecc8
   2bcfc:	0000040e 	.word	0x0000040e
   2bd00:	00010412 	.word	0x00010412
   2bd04:	0000041e 	.word	0x0000041e
   2bd08:	20fffffe 	.word	0x20fffffe
   2bd0c:	00010416 	.word	0x00010416
   2bd10:	00243ffc 	.word	0x00243ffc

0002bd14 <CPageTable::~CPageTable()>:
   2bd14:	e12fff1e 	bx	lr

0002bd18 <CPageTable::GetBaseAddress() const>:
   2bd18:	e5900000 	ldr	r0, [r0]
   2bd1c:	e3800001 	orr	r0, r0, #1
   2bd20:	e12fff1e 	bx	lr

0002bd24 <CurrentExecutionLevel>:
   2bd24:	e10f0000 	mrs	r0, CPSR
   2bd28:	e3100040 	tst	r0, #64	; 0x40
   2bd2c:	01a003a0 	lsreq	r0, r0, #7
   2bd30:	02000001 	andeq	r0, r0, #1
   2bd34:	13a00002 	movne	r0, #2
   2bd38:	e12fff1e 	bx	lr

0002bd3c <EnterCritical>:
   2bd3c:	e2403001 	sub	r3, r0, #1
   2bd40:	e3530001 	cmp	r3, #1
   2bd44:	e92d4010 	push	{r4, lr}
   2bd48:	8a000013 	bhi	2bd9c <EnterCritical+0x60>
   2bd4c:	e10f1000 	mrs	r1, CPSR
   2bd50:	e3500002 	cmp	r0, #2
   2bd54:	1a000014 	bne	2bdac <EnterCritical+0x70>
   2bd58:	f10c00c0 	cpsid	if
   2bd5c:	e59f3070 	ldr	r3, [pc, #112]	; 2bdd4 <EnterCritical+0x98>
   2bd60:	e5932000 	ldr	r2, [r3]
   2bd64:	e3520013 	cmp	r2, #19
   2bd68:	8a000015 	bhi	2bdc4 <EnterCritical+0x88>
   2bd6c:	e5932000 	ldr	r2, [r3]
   2bd70:	e3500001 	cmp	r0, #1
   2bd74:	e2820001 	add	r0, r2, #1
   2bd78:	e0832102 	add	r2, r3, r2, lsl #2
   2bd7c:	e5830000 	str	r0, [r3]
   2bd80:	e5821004 	str	r1, [r2, #4]
   2bd84:	0a000002 	beq	2bd94 <EnterCritical+0x58>
   2bd88:	e3a03000 	mov	r3, #0
   2bd8c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bd90:	e8bd8010 	pop	{r4, pc}
   2bd94:	f1080040 	cpsie	f
   2bd98:	eafffffa 	b	2bd88 <EnterCritical+0x4c>
   2bd9c:	e3a02064 	mov	r2, #100	; 0x64
   2bda0:	e59f1030 	ldr	r1, [pc, #48]	; 2bdd8 <EnterCritical+0x9c>
   2bda4:	e59f0030 	ldr	r0, [pc, #48]	; 2bddc <EnterCritical+0xa0>
   2bda8:	ebffe294 	bl	24800 <assertion_failed>
   2bdac:	e3110040 	tst	r1, #64	; 0x40
   2bdb0:	0affffe8 	beq	2bd58 <EnterCritical+0x1c>
   2bdb4:	e3a0206a 	mov	r2, #106	; 0x6a
   2bdb8:	e59f1018 	ldr	r1, [pc, #24]	; 2bdd8 <EnterCritical+0x9c>
   2bdbc:	e59f001c 	ldr	r0, [pc, #28]	; 2bde0 <EnterCritical+0xa4>
   2bdc0:	ebffe28e 	bl	24800 <assertion_failed>
   2bdc4:	e3a0206e 	mov	r2, #110	; 0x6e
   2bdc8:	e59f1008 	ldr	r1, [pc, #8]	; 2bdd8 <EnterCritical+0x9c>
   2bdcc:	e59f0010 	ldr	r0, [pc, #16]	; 2bde4 <EnterCritical+0xa8>
   2bdd0:	ebffe28a 	bl	24800 <assertion_failed>
   2bdd4:	0004e144 	.word	0x0004e144
   2bdd8:	00045b00 	.word	0x00045b00
   2bddc:	00045b10 	.word	0x00045b10
   2bde0:	00045b48 	.word	0x00045b48
   2bde4:	00045b78 	.word	0x00045b78

0002bde8 <LeaveCritical>:
   2bde8:	e3a03000 	mov	r3, #0
   2bdec:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2bdf0:	f10c0040 	cpsid	f
   2bdf4:	e59f3038 	ldr	r3, [pc, #56]	; 2be34 <LeaveCritical+0x4c>
   2bdf8:	e5932000 	ldr	r2, [r3]
   2bdfc:	e3520000 	cmp	r2, #0
   2be00:	0a000006 	beq	2be20 <LeaveCritical+0x38>
   2be04:	e5932000 	ldr	r2, [r3]
   2be08:	e2422001 	sub	r2, r2, #1
   2be0c:	e5832000 	str	r2, [r3]
   2be10:	e0833102 	add	r3, r3, r2, lsl #2
   2be14:	e5933004 	ldr	r3, [r3, #4]
   2be18:	e121f003 	msr	CPSR_c, r3
   2be1c:	e12fff1e 	bx	lr
   2be20:	e92d4010 	push	{r4, lr}
   2be24:	e3a0207f 	mov	r2, #127	; 0x7f
   2be28:	e59f1008 	ldr	r1, [pc, #8]	; 2be38 <LeaveCritical+0x50>
   2be2c:	e59f0008 	ldr	r0, [pc, #8]	; 2be3c <LeaveCritical+0x54>
   2be30:	ebffe272 	bl	24800 <assertion_failed>
   2be34:	0004e144 	.word	0x0004e144
   2be38:	00045b00 	.word	0x00045b00
   2be3c:	00045ba0 	.word	0x00045ba0

0002be40 <CleanAndInvalidateDataCacheRange>:
   2be40:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2be44:	e2813020 	add	r3, r1, #32
   2be48:	e353001f 	cmp	r3, #31
   2be4c:	82800020 	addhi	r0, r0, #32
   2be50:	83c1101f 	bichi	r1, r1, #31
   2be54:	80801001 	addhi	r1, r0, r1
   2be58:	8a000001 	bhi	2be64 <CleanAndInvalidateDataCacheRange+0x24>
   2be5c:	ea000003 	b	2be70 <CleanAndInvalidateDataCacheRange+0x30>
   2be60:	e2800020 	add	r0, r0, #32
   2be64:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   2be68:	e1510000 	cmp	r1, r0
   2be6c:	1afffffb 	bne	2be60 <CleanAndInvalidateDataCacheRange+0x20>
   2be70:	e3a03000 	mov	r3, #0
   2be74:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2be78:	e12fff1e 	bx	lr

0002be7c <SyncDataAndInstructionCache>:
   2be7c:	e3a03000 	mov	r3, #0
   2be80:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   2be84:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2be88:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   2be8c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   2be90:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2be94:	ee073f95 	mcr	15, 0, r3, cr7, cr5, {4}
   2be98:	e12fff1e 	bx	lr

0002be9c <CInterruptSystem::CInterruptSystem()>:
   2be9c:	e1a0c000 	mov	ip, r0
   2bea0:	e2802f47 	add	r2, r0, #284	; 0x11c
   2bea4:	e1a00002 	mov	r0, r2
   2bea8:	e3a01000 	mov	r1, #0
   2beac:	e24c3004 	sub	r3, ip, #4
   2beb0:	e5a31004 	str	r1, [r3, #4]!
   2beb4:	e1530000 	cmp	r3, r0
   2beb8:	e5a21004 	str	r1, [r2, #4]!
   2bebc:	1afffffb 	bne	2beb0 <CInterruptSystem::CInterruptSystem()+0x14>
   2bec0:	e59f3008 	ldr	r3, [pc, #8]	; 2bed0 <CInterruptSystem::CInterruptSystem()+0x34>
   2bec4:	e1a0000c 	mov	r0, ip
   2bec8:	e583c000 	str	ip, [r3]
   2becc:	e12fff1e 	bx	lr
   2bed0:	0004e198 	.word	0x0004e198

0002bed4 <CInterruptSystem::~CInterruptSystem()>:
   2bed4:	f10c0080 	cpsid	i
   2bed8:	e3a03000 	mov	r3, #0
   2bedc:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2bee0:	e3e01000 	mvn	r1, #0
   2bee4:	e59f201c 	ldr	r2, [pc, #28]	; 2bf08 <CInterruptSystem::~CInterruptSystem()+0x34>
   2bee8:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2beec:	e582121c 	str	r1, [r2, #540]	; 0x21c
   2bef0:	e5821220 	str	r1, [r2, #544]	; 0x220
   2bef4:	e5821224 	str	r1, [r2, #548]	; 0x224
   2bef8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2befc:	e59f2008 	ldr	r2, [pc, #8]	; 2bf0c <CInterruptSystem::~CInterruptSystem()+0x38>
   2bf00:	e5823000 	str	r3, [r2]
   2bf04:	e12fff1e 	bx	lr
   2bf08:	2000b000 	.word	0x2000b000
   2bf0c:	0004e198 	.word	0x0004e198

0002bf10 <CInterruptSystem::Initialize()>:
   2bf10:	e92d4010 	push	{r4, lr}
   2bf14:	e3a04000 	mov	r4, #0
   2bf18:	e59f2050 	ldr	r2, [pc, #80]	; 2bf70 <CInterruptSystem::Initialize()+0x60>
   2bf1c:	e59f3050 	ldr	r3, [pc, #80]	; 2bf74 <CInterruptSystem::Initialize()+0x64>
   2bf20:	e1a02142 	asr	r2, r2, #2
   2bf24:	e1a03143 	asr	r3, r3, #2
   2bf28:	e2422002 	sub	r2, r2, #2
   2bf2c:	e2433002 	sub	r3, r3, #2
   2bf30:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   2bf34:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   2bf38:	e5842018 	str	r2, [r4, #24]
   2bf3c:	e584301c 	str	r3, [r4, #28]
   2bf40:	ebffffcd 	bl	2be7c <SyncDataAndInstructionCache>
   2bf44:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2bf48:	e3e02000 	mvn	r2, #0
   2bf4c:	e59f3024 	ldr	r3, [pc, #36]	; 2bf78 <CInterruptSystem::Initialize()+0x68>
   2bf50:	e583420c 	str	r4, [r3, #524]	; 0x20c
   2bf54:	e583221c 	str	r2, [r3, #540]	; 0x21c
   2bf58:	e5832220 	str	r2, [r3, #544]	; 0x220
   2bf5c:	e5832224 	str	r2, [r3, #548]	; 0x224
   2bf60:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2bf64:	f1080080 	cpsie	i
   2bf68:	e3a00001 	mov	r0, #1
   2bf6c:	e8bd8010 	pop	{r4, pc}
   2bf70:	0002b8d4 	.word	0x0002b8d4
   2bf74:	0002b8e8 	.word	0x0002b8e8
   2bf78:	2000b000 	.word	0x2000b000

0002bf7c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   2bf7c:	e3510047 	cmp	r1, #71	; 0x47
   2bf80:	e92d4070 	push	{r4, r5, r6, lr}
   2bf84:	8a00001e 	bhi	2c004 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   2bf88:	e3520000 	cmp	r2, #0
   2bf8c:	0a000020 	beq	2c014 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x98>
   2bf90:	e59f009c 	ldr	r0, [pc, #156]	; 2c034 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   2bf94:	e5d0e001 	ldrb	lr, [r0, #1]
   2bf98:	e5d0c000 	ldrb	ip, [r0]
   2bf9c:	e5d04002 	ldrb	r4, [r0, #2]
   2bfa0:	e18cc40e 	orr	ip, ip, lr, lsl #8
   2bfa4:	e5d0e003 	ldrb	lr, [r0, #3]
   2bfa8:	e18cc804 	orr	ip, ip, r4, lsl #16
   2bfac:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   2bfb0:	1a00001b 	bne	2c024 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa8>
   2bfb4:	e1a06422 	lsr	r6, r2, #8
   2bfb8:	e1a05822 	lsr	r5, r2, #16
   2bfbc:	e1a04c22 	lsr	r4, r2, #24
   2bfc0:	e1a0e423 	lsr	lr, r3, #8
   2bfc4:	e5c02000 	strb	r2, [r0]
   2bfc8:	e5c03004 	strb	r3, [r0, #4]
   2bfcc:	e1a02823 	lsr	r2, r3, #16
   2bfd0:	e1a03c23 	lsr	r3, r3, #24
   2bfd4:	e5c06001 	strb	r6, [r0, #1]
   2bfd8:	e5c05002 	strb	r5, [r0, #2]
   2bfdc:	e5c04003 	strb	r4, [r0, #3]
   2bfe0:	e5c0e005 	strb	lr, [r0, #5]
   2bfe4:	e5c02006 	strb	r2, [r0, #6]
   2bfe8:	e5c03007 	strb	r3, [r0, #7]
   2bfec:	ee07cf9a 	mcr	15, 0, ip, cr7, cr10, {4}
   2bff0:	e59f3040 	ldr	r3, [pc, #64]	; 2c038 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xbc>
   2bff4:	e3811080 	orr	r1, r1, #128	; 0x80
   2bff8:	e583120c 	str	r1, [r3, #524]	; 0x20c
   2bffc:	ee07cfba 	mcr	15, 0, ip, cr7, cr10, {5}
   2c000:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c004:	e3a0208f 	mov	r2, #143	; 0x8f
   2c008:	e59f102c 	ldr	r1, [pc, #44]	; 2c03c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2c00c:	e59f002c 	ldr	r0, [pc, #44]	; 2c040 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc4>
   2c010:	ebffe1fa 	bl	24800 <assertion_failed>
   2c014:	e3a02090 	mov	r2, #144	; 0x90
   2c018:	e59f101c 	ldr	r1, [pc, #28]	; 2c03c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2c01c:	e59f0020 	ldr	r0, [pc, #32]	; 2c044 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc8>
   2c020:	ebffe1f6 	bl	24800 <assertion_failed>
   2c024:	e3a02091 	mov	r2, #145	; 0x91
   2c028:	e59f100c 	ldr	r1, [pc, #12]	; 2c03c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xc0>
   2c02c:	e59f0014 	ldr	r0, [pc, #20]	; 2c048 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xcc>
   2c030:	ebffe1f2 	bl	24800 <assertion_failed>
   2c034:	00048270 	.word	0x00048270
   2c038:	2000b000 	.word	0x2000b000
   2c03c:	00045bb8 	.word	0x00045bb8
   2c040:	00045bc8 	.word	0x00045bc8
   2c044:	00045bfc 	.word	0x00045bfc
   2c048:	00045bdc 	.word	0x00045bdc

0002c04c <CInterruptSystem::DisconnectFIQ()>:
   2c04c:	e59f3068 	ldr	r3, [pc, #104]	; 2c0bc <CInterruptSystem::DisconnectFIQ()+0x70>
   2c050:	e5d31001 	ldrb	r1, [r3, #1]
   2c054:	e5d32000 	ldrb	r2, [r3]
   2c058:	e5d30002 	ldrb	r0, [r3, #2]
   2c05c:	e1822401 	orr	r2, r2, r1, lsl #8
   2c060:	e5d31003 	ldrb	r1, [r3, #3]
   2c064:	e1822800 	orr	r2, r2, r0, lsl #16
   2c068:	e1922c01 	orrs	r2, r2, r1, lsl #24
   2c06c:	0a00000d 	beq	2c0a8 <CInterruptSystem::DisconnectFIQ()+0x5c>
   2c070:	e3a02000 	mov	r2, #0
   2c074:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2c078:	e59f1040 	ldr	r1, [pc, #64]	; 2c0c0 <CInterruptSystem::DisconnectFIQ()+0x74>
   2c07c:	e581220c 	str	r2, [r1, #524]	; 0x20c
   2c080:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   2c084:	e5c32000 	strb	r2, [r3]
   2c088:	e5c32001 	strb	r2, [r3, #1]
   2c08c:	e5c32002 	strb	r2, [r3, #2]
   2c090:	e5c32003 	strb	r2, [r3, #3]
   2c094:	e5c32004 	strb	r2, [r3, #4]
   2c098:	e5c32005 	strb	r2, [r3, #5]
   2c09c:	e5c32006 	strb	r2, [r3, #6]
   2c0a0:	e5c32007 	strb	r2, [r3, #7]
   2c0a4:	e12fff1e 	bx	lr
   2c0a8:	e92d4010 	push	{r4, lr}
   2c0ac:	e3a0209b 	mov	r2, #155	; 0x9b
   2c0b0:	e59f100c 	ldr	r1, [pc, #12]	; 2c0c4 <CInterruptSystem::DisconnectFIQ()+0x78>
   2c0b4:	e59f000c 	ldr	r0, [pc, #12]	; 2c0c8 <CInterruptSystem::DisconnectFIQ()+0x7c>
   2c0b8:	ebffe1d0 	bl	24800 <assertion_failed>
   2c0bc:	00048270 	.word	0x00048270
   2c0c0:	2000b000 	.word	0x2000b000
   2c0c4:	00045bb8 	.word	0x00045bb8
   2c0c8:	00045bf4 	.word	0x00045bf4

0002c0cc <CInterruptSystem::EnableIRQ(unsigned int)>:
   2c0cc:	e3a03000 	mov	r3, #0
   2c0d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c0d4:	e3500047 	cmp	r0, #71	; 0x47
   2c0d8:	8a00000e 	bhi	2c118 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
   2c0dc:	e350001f 	cmp	r0, #31
   2c0e0:	9a00000a 	bls	2c110 <CInterruptSystem::EnableIRQ(unsigned int)+0x44>
   2c0e4:	e59f3040 	ldr	r3, [pc, #64]	; 2c12c <CInterruptSystem::EnableIRQ(unsigned int)+0x60>
   2c0e8:	e350003f 	cmp	r0, #63	; 0x3f
   2c0ec:	e59f203c 	ldr	r2, [pc, #60]	; 2c130 <CInterruptSystem::EnableIRQ(unsigned int)+0x64>
   2c0f0:	91a02003 	movls	r2, r3
   2c0f4:	e3a03001 	mov	r3, #1
   2c0f8:	e200001f 	and	r0, r0, #31
   2c0fc:	e1a00013 	lsl	r0, r3, r0
   2c100:	e5820000 	str	r0, [r2]
   2c104:	e3a03000 	mov	r3, #0
   2c108:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c10c:	e12fff1e 	bx	lr
   2c110:	e59f201c 	ldr	r2, [pc, #28]	; 2c134 <CInterruptSystem::EnableIRQ(unsigned int)+0x68>
   2c114:	eafffff6 	b	2c0f4 <CInterruptSystem::EnableIRQ(unsigned int)+0x28>
   2c118:	e92d4010 	push	{r4, lr}
   2c11c:	e3a020a7 	mov	r2, #167	; 0xa7
   2c120:	e59f1010 	ldr	r1, [pc, #16]	; 2c138 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   2c124:	e59f0010 	ldr	r0, [pc, #16]	; 2c13c <CInterruptSystem::EnableIRQ(unsigned int)+0x70>
   2c128:	ebffe1b4 	bl	24800 <assertion_failed>
   2c12c:	2000b214 	.word	0x2000b214
   2c130:	2000b218 	.word	0x2000b218
   2c134:	2000b210 	.word	0x2000b210
   2c138:	00045bb8 	.word	0x00045bb8
   2c13c:	00045c0c 	.word	0x00045c0c

0002c140 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   2c140:	e3510047 	cmp	r1, #71	; 0x47
   2c144:	e92d4010 	push	{r4, lr}
   2c148:	8a000008 	bhi	2c170 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x30>
   2c14c:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   2c150:	e080e101 	add	lr, r0, r1, lsl #2
   2c154:	e35c0000 	cmp	ip, #0
   2c158:	1a000008 	bne	2c180 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x40>
   2c15c:	e7802101 	str	r2, [r0, r1, lsl #2]
   2c160:	e58e3120 	str	r3, [lr, #288]	; 0x120
   2c164:	e1a00001 	mov	r0, r1
   2c168:	e8bd4010 	pop	{r4, lr}
   2c16c:	eaffffd6 	b	2c0cc <CInterruptSystem::EnableIRQ(unsigned int)>
   2c170:	e3a02076 	mov	r2, #118	; 0x76
   2c174:	e59f1014 	ldr	r1, [pc, #20]	; 2c190 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   2c178:	e59f0014 	ldr	r0, [pc, #20]	; 2c194 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x54>
   2c17c:	ebffe19f 	bl	24800 <assertion_failed>
   2c180:	e3a02077 	mov	r2, #119	; 0x77
   2c184:	e59f1004 	ldr	r1, [pc, #4]	; 2c190 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x50>
   2c188:	e59f0008 	ldr	r0, [pc, #8]	; 2c198 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
   2c18c:	ebffe19b 	bl	24800 <assertion_failed>
   2c190:	00045bb8 	.word	0x00045bb8
   2c194:	00045c0c 	.word	0x00045c0c
   2c198:	00045c20 	.word	0x00045c20

0002c19c <CInterruptSystem::DisableIRQ(unsigned int)>:
   2c19c:	e3a03000 	mov	r3, #0
   2c1a0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c1a4:	e3500047 	cmp	r0, #71	; 0x47
   2c1a8:	8a00000e 	bhi	2c1e8 <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
   2c1ac:	e350001f 	cmp	r0, #31
   2c1b0:	9a00000a 	bls	2c1e0 <CInterruptSystem::DisableIRQ(unsigned int)+0x44>
   2c1b4:	e59f3040 	ldr	r3, [pc, #64]	; 2c1fc <CInterruptSystem::DisableIRQ(unsigned int)+0x60>
   2c1b8:	e350003f 	cmp	r0, #63	; 0x3f
   2c1bc:	e59f203c 	ldr	r2, [pc, #60]	; 2c200 <CInterruptSystem::DisableIRQ(unsigned int)+0x64>
   2c1c0:	91a02003 	movls	r2, r3
   2c1c4:	e3a03001 	mov	r3, #1
   2c1c8:	e200001f 	and	r0, r0, #31
   2c1cc:	e1a00013 	lsl	r0, r3, r0
   2c1d0:	e5820000 	str	r0, [r2]
   2c1d4:	e3a03000 	mov	r3, #0
   2c1d8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c1dc:	e12fff1e 	bx	lr
   2c1e0:	e59f201c 	ldr	r2, [pc, #28]	; 2c204 <CInterruptSystem::DisableIRQ(unsigned int)+0x68>
   2c1e4:	eafffff6 	b	2c1c4 <CInterruptSystem::DisableIRQ(unsigned int)+0x28>
   2c1e8:	e92d4010 	push	{r4, lr}
   2c1ec:	e3a020bf 	mov	r2, #191	; 0xbf
   2c1f0:	e59f1010 	ldr	r1, [pc, #16]	; 2c208 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   2c1f4:	e59f0010 	ldr	r0, [pc, #16]	; 2c20c <CInterruptSystem::DisableIRQ(unsigned int)+0x70>
   2c1f8:	ebffe180 	bl	24800 <assertion_failed>
   2c1fc:	2000b220 	.word	0x2000b220
   2c200:	2000b224 	.word	0x2000b224
   2c204:	2000b21c 	.word	0x2000b21c
   2c208:	00045bb8 	.word	0x00045bb8
   2c20c:	00045c0c 	.word	0x00045c0c

0002c210 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   2c210:	e3510047 	cmp	r1, #71	; 0x47
   2c214:	e92d4070 	push	{r4, r5, r6, lr}
   2c218:	8a00000b 	bhi	2c24c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   2c21c:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   2c220:	e1a04001 	mov	r4, r1
   2c224:	e3530000 	cmp	r3, #0
   2c228:	e1a05000 	mov	r5, r0
   2c22c:	e0806101 	add	r6, r0, r1, lsl #2
   2c230:	0a000009 	beq	2c25c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   2c234:	e1a00001 	mov	r0, r1
   2c238:	ebffffd7 	bl	2c19c <CInterruptSystem::DisableIRQ(unsigned int)>
   2c23c:	e3a03000 	mov	r3, #0
   2c240:	e7853104 	str	r3, [r5, r4, lsl #2]
   2c244:	e5863120 	str	r3, [r6, #288]	; 0x120
   2c248:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c24c:	e3a02081 	mov	r2, #129	; 0x81
   2c250:	e59f1014 	ldr	r1, [pc, #20]	; 2c26c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   2c254:	e59f0014 	ldr	r0, [pc, #20]	; 2c270 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x60>
   2c258:	ebffe168 	bl	24800 <assertion_failed>
   2c25c:	e3a02082 	mov	r2, #130	; 0x82
   2c260:	e59f1004 	ldr	r1, [pc, #4]	; 2c26c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x5c>
   2c264:	e59f0008 	ldr	r0, [pc, #8]	; 2c274 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   2c268:	ebffe164 	bl	24800 <assertion_failed>
   2c26c:	00045bb8 	.word	0x00045bb8
   2c270:	00045c0c 	.word	0x00045c0c
   2c274:	00045c3c 	.word	0x00045c3c

0002c278 <CInterruptSystem::EnableFIQ(unsigned int)>:
   2c278:	e3a03000 	mov	r3, #0
   2c27c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c280:	e3500047 	cmp	r0, #71	; 0x47
   2c284:	8a000004 	bhi	2c29c <CInterruptSystem::EnableFIQ(unsigned int)+0x24>
   2c288:	e59f2020 	ldr	r2, [pc, #32]	; 2c2b0 <CInterruptSystem::EnableFIQ(unsigned int)+0x38>
   2c28c:	e3800080 	orr	r0, r0, #128	; 0x80
   2c290:	e582020c 	str	r0, [r2, #524]	; 0x20c
   2c294:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c298:	e12fff1e 	bx	lr
   2c29c:	e92d4010 	push	{r4, lr}
   2c2a0:	e3a020d7 	mov	r2, #215	; 0xd7
   2c2a4:	e59f1008 	ldr	r1, [pc, #8]	; 2c2b4 <CInterruptSystem::EnableFIQ(unsigned int)+0x3c>
   2c2a8:	e59f0008 	ldr	r0, [pc, #8]	; 2c2b8 <CInterruptSystem::EnableFIQ(unsigned int)+0x40>
   2c2ac:	ebffe153 	bl	24800 <assertion_failed>
   2c2b0:	2000b000 	.word	0x2000b000
   2c2b4:	00045bb8 	.word	0x00045bb8
   2c2b8:	00045bc8 	.word	0x00045bc8

0002c2bc <CInterruptSystem::DisableFIQ()>:
   2c2bc:	e3a03000 	mov	r3, #0
   2c2c0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c2c4:	e59f2008 	ldr	r2, [pc, #8]	; 2c2d4 <CInterruptSystem::DisableFIQ()+0x18>
   2c2c8:	e582320c 	str	r3, [r2, #524]	; 0x20c
   2c2cc:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c2d0:	e12fff1e 	bx	lr
   2c2d4:	2000b000 	.word	0x2000b000

0002c2d8 <CInterruptSystem::Get()>:
   2c2d8:	e59f3020 	ldr	r3, [pc, #32]	; 2c300 <CInterruptSystem::Get()+0x28>
   2c2dc:	e5930000 	ldr	r0, [r3]
   2c2e0:	e3500000 	cmp	r0, #0
   2c2e4:	0a000000 	beq	2c2ec <CInterruptSystem::Get()+0x14>
   2c2e8:	e12fff1e 	bx	lr
   2c2ec:	e92d4010 	push	{r4, lr}
   2c2f0:	e3a020e9 	mov	r2, #233	; 0xe9
   2c2f4:	e59f1008 	ldr	r1, [pc, #8]	; 2c304 <CInterruptSystem::Get()+0x2c>
   2c2f8:	e59f0008 	ldr	r0, [pc, #8]	; 2c308 <CInterruptSystem::Get()+0x30>
   2c2fc:	ebffe13f 	bl	24800 <assertion_failed>
   2c300:	0004e198 	.word	0x0004e198
   2c304:	00045bb8 	.word	0x00045bb8
   2c308:	00043924 	.word	0x00043924

0002c30c <CInterruptSystem::CallIRQHandler(unsigned int)>:
   2c30c:	e3510047 	cmp	r1, #71	; 0x47
   2c310:	e92d4010 	push	{r4, lr}
   2c314:	8a00000b 	bhi	2c348 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   2c318:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   2c31c:	e0800101 	add	r0, r0, r1, lsl #2
   2c320:	e3540000 	cmp	r4, #0
   2c324:	0a000003 	beq	2c338 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   2c328:	e5900120 	ldr	r0, [r0, #288]	; 0x120
   2c32c:	e12fff34 	blx	r4
   2c330:	e3a00001 	mov	r0, #1
   2c334:	e8bd8010 	pop	{r4, pc}
   2c338:	e1a00001 	mov	r0, r1
   2c33c:	ebffff96 	bl	2c19c <CInterruptSystem::DisableIRQ(unsigned int)>
   2c340:	e1a00004 	mov	r0, r4
   2c344:	e8bd8010 	pop	{r4, pc}
   2c348:	e3a020ef 	mov	r2, #239	; 0xef
   2c34c:	e59f1004 	ldr	r1, [pc, #4]	; 2c358 <CInterruptSystem::CallIRQHandler(unsigned int)+0x4c>
   2c350:	e59f0004 	ldr	r0, [pc, #4]	; 2c35c <CInterruptSystem::CallIRQHandler(unsigned int)+0x50>
   2c354:	ebffe129 	bl	24800 <assertion_failed>
   2c358:	00045bb8 	.word	0x00045bb8
   2c35c:	00045c0c 	.word	0x00045c0c

0002c360 <CInterruptSystem::InterruptHandler()>:
   2c360:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c364:	e59f70a4 	ldr	r7, [pc, #164]	; 2c410 <CInterruptSystem::InterruptHandler()+0xb0>
   2c368:	e24dd010 	sub	sp, sp, #16
   2c36c:	e5973000 	ldr	r3, [r7]
   2c370:	e3530000 	cmp	r3, #0
   2c374:	0a000021 	beq	2c400 <CInterruptSystem::InterruptHandler()+0xa0>
   2c378:	e3a06000 	mov	r6, #0
   2c37c:	ee076f9a 	mcr	15, 0, r6, cr7, cr10, {4}
   2c380:	e59f308c 	ldr	r3, [pc, #140]	; 2c414 <CInterruptSystem::InterruptHandler()+0xb4>
   2c384:	e5932204 	ldr	r2, [r3, #516]	; 0x204
   2c388:	e58d2004 	str	r2, [sp, #4]
   2c38c:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   2c390:	e58d2008 	str	r2, [sp, #8]
   2c394:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   2c398:	e6ef3073 	uxtb	r3, r3
   2c39c:	e58d300c 	str	r3, [sp, #12]
   2c3a0:	ee076fba 	mcr	15, 0, r6, cr7, cr10, {5}
   2c3a4:	e28d8004 	add	r8, sp, #4
   2c3a8:	e4984004 	ldr	r4, [r8], #4
   2c3ac:	e3540000 	cmp	r4, #0
   2c3b0:	0a00000d 	beq	2c3ec <CInterruptSystem::InterruptHandler()+0x8c>
   2c3b4:	e1a05006 	mov	r5, r6
   2c3b8:	ea000002 	b	2c3c8 <CInterruptSystem::InterruptHandler()+0x68>
   2c3bc:	e1b040a4 	lsrs	r4, r4, #1
   2c3c0:	e2855001 	add	r5, r5, #1
   2c3c4:	0a000008 	beq	2c3ec <CInterruptSystem::InterruptHandler()+0x8c>
   2c3c8:	e3140001 	tst	r4, #1
   2c3cc:	0afffffa 	beq	2c3bc <CInterruptSystem::InterruptHandler()+0x5c>
   2c3d0:	e1a01005 	mov	r1, r5
   2c3d4:	e5970000 	ldr	r0, [r7]
   2c3d8:	ebffffcb 	bl	2c30c <CInterruptSystem::CallIRQHandler(unsigned int)>
   2c3dc:	e3500000 	cmp	r0, #0
   2c3e0:	0afffff5 	beq	2c3bc <CInterruptSystem::InterruptHandler()+0x5c>
   2c3e4:	e28dd010 	add	sp, sp, #16
   2c3e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c3ec:	e2866020 	add	r6, r6, #32
   2c3f0:	e3560060 	cmp	r6, #96	; 0x60
   2c3f4:	1affffeb 	bne	2c3a8 <CInterruptSystem::InterruptHandler()+0x48>
   2c3f8:	e28dd010 	add	sp, sp, #16
   2c3fc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c400:	e59f2010 	ldr	r2, [pc, #16]	; 2c418 <CInterruptSystem::InterruptHandler()+0xb8>
   2c404:	e59f1010 	ldr	r1, [pc, #16]	; 2c41c <CInterruptSystem::InterruptHandler()+0xbc>
   2c408:	e59f0010 	ldr	r0, [pc, #16]	; 2c420 <CInterruptSystem::InterruptHandler()+0xc0>
   2c40c:	ebffe0fb 	bl	24800 <assertion_failed>
   2c410:	0004e198 	.word	0x0004e198
   2c414:	2000b000 	.word	0x2000b000
   2c418:	00000102 	.word	0x00000102
   2c41c:	00045bb8 	.word	0x00045bb8
   2c420:	00043924 	.word	0x00043924

0002c424 <InterruptHandler>:
   2c424:	e92d4010 	push	{r4, lr}
   2c428:	e3a04000 	mov	r4, #0
   2c42c:	ee074fba 	mcr	15, 0, r4, cr7, cr10, {5}
   2c430:	ebffffca 	bl	2c360 <CInterruptSystem::InterruptHandler()>
   2c434:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2c438:	e8bd8010 	pop	{r4, pc}

0002c43c <__cxa_pure_virtual>:
   2c43c:	e92d4010 	push	{r4, lr}
   2c440:	e3a02018 	mov	r2, #24
   2c444:	e59f1004 	ldr	r1, [pc, #4]	; 2c450 <__cxa_pure_virtual+0x14>
   2c448:	e59f0004 	ldr	r0, [pc, #4]	; 2c454 <__cxa_pure_virtual+0x18>
   2c44c:	ebffe0eb 	bl	24800 <assertion_failed>
   2c450:	00045c58 	.word	0x00045c58
   2c454:	0003fd5c 	.word	0x0003fd5c

0002c458 <malloc>:
   2c458:	e59f300c 	ldr	r3, [pc, #12]	; 2c46c <malloc+0x14>
   2c45c:	e1a01000 	mov	r1, r0
   2c460:	e5930000 	ldr	r0, [r3]
   2c464:	e280000c 	add	r0, r0, #12
   2c468:	eafffb35 	b	2b144 <CHeapAllocator::Allocate(unsigned int)>
   2c46c:	0004e140 	.word	0x0004e140

0002c470 <free>:
   2c470:	e59f300c 	ldr	r3, [pc, #12]	; 2c484 <free+0x14>
   2c474:	e1a01000 	mov	r1, r0
   2c478:	e5930000 	ldr	r0, [r3]
   2c47c:	e280000c 	add	r0, r0, #12
   2c480:	eafffbad 	b	2b33c <CHeapAllocator::Free(void*)>
   2c484:	0004e140 	.word	0x0004e140

0002c488 <calloc>:
   2c488:	e92d4070 	push	{r4, r5, r6, lr}
   2c48c:	e0040190 	mul	r4, r0, r1
   2c490:	e3540000 	cmp	r4, #0
   2c494:	03a04001 	moveq	r4, #1
   2c498:	e1540000 	cmp	r4, r0
   2c49c:	3a00000b 	bcc	2c4d0 <calloc+0x48>
   2c4a0:	e59f3038 	ldr	r3, [pc, #56]	; 2c4e0 <calloc+0x58>
   2c4a4:	e1a01004 	mov	r1, r4
   2c4a8:	e5930000 	ldr	r0, [r3]
   2c4ac:	e280000c 	add	r0, r0, #12
   2c4b0:	ebfffb23 	bl	2b144 <CHeapAllocator::Allocate(unsigned int)>
   2c4b4:	e2505000 	subs	r5, r0, #0
   2c4b8:	0a000002 	beq	2c4c8 <calloc+0x40>
   2c4bc:	e1a02004 	mov	r2, r4
   2c4c0:	e3a01000 	mov	r1, #0
   2c4c4:	ebfff69a 	bl	29f34 <memset>
   2c4c8:	e1a00005 	mov	r0, r5
   2c4cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c4d0:	e59f100c 	ldr	r1, [pc, #12]	; 2c4e4 <calloc+0x5c>
   2c4d4:	e3a0202b 	mov	r2, #43	; 0x2b
   2c4d8:	e281000c 	add	r0, r1, #12
   2c4dc:	ebffe0c7 	bl	24800 <assertion_failed>
   2c4e0:	0004e140 	.word	0x0004e140
   2c4e4:	00045c68 	.word	0x00045c68

0002c4e8 <realloc>:
   2c4e8:	e59f3010 	ldr	r3, [pc, #16]	; 2c500 <realloc+0x18>
   2c4ec:	e1a02001 	mov	r2, r1
   2c4f0:	e5933000 	ldr	r3, [r3]
   2c4f4:	e1a01000 	mov	r1, r0
   2c4f8:	e283000c 	add	r0, r3, #12
   2c4fc:	eafffbd4 	b	2b454 <CHeapAllocator::ReAllocate(void*, unsigned int)>
   2c500:	0004e140 	.word	0x0004e140

0002c504 <palloc>:
   2c504:	e59f3008 	ldr	r3, [pc, #8]	; 2c514 <palloc+0x10>
   2c508:	e5930000 	ldr	r0, [r3]
   2c50c:	e28000c8 	add	r0, r0, #200	; 0xc8
   2c510:	ea000287 	b	2cf34 <CPageAllocator::Allocate()>
   2c514:	0004e140 	.word	0x0004e140

0002c518 <pfree>:
   2c518:	e59f300c 	ldr	r3, [pc, #12]	; 2c52c <pfree+0x14>
   2c51c:	e1a01000 	mov	r1, r0
   2c520:	e5930000 	ldr	r0, [r3]
   2c524:	e28000c8 	add	r0, r0, #200	; 0xc8
   2c528:	ea0002b6 	b	2d008 <CPageAllocator::Free(void*)>
   2c52c:	0004e140 	.word	0x0004e140

0002c530 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   2c530:	e5801000 	str	r1, [r0]
   2c534:	e5c02004 	strb	r2, [r0, #4]
   2c538:	e12fff1e 	bx	lr

0002c53c <CBcmMailBox::~CBcmMailBox()>:
   2c53c:	e12fff1e 	bx	lr

0002c540 <CBcmMailBox::WriteRead(unsigned int)>:
   2c540:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2c544:	e3a03000 	mov	r3, #0
   2c548:	e24dd00c 	sub	sp, sp, #12
   2c54c:	e1a05000 	mov	r5, r0
   2c550:	e1a06001 	mov	r6, r1
   2c554:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2c558:	e5d03004 	ldrb	r3, [r0, #4]
   2c55c:	e3530000 	cmp	r3, #0
   2c560:	1a000003 	bne	2c574 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   2c564:	e59f30e0 	ldr	r3, [pc, #224]	; 2c64c <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2c568:	e5930000 	ldr	r0, [r3]
   2c56c:	e3500000 	cmp	r0, #0
   2c570:	1a00002f 	bne	2c634 <CBcmMailBox::WriteRead(unsigned int)+0xf4>
   2c574:	e59f40d4 	ldr	r4, [pc, #212]	; 2c650 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2c578:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c57c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c580:	1a000006 	bne	2c5a0 <CBcmMailBox::WriteRead(unsigned int)+0x60>
   2c584:	e3a07014 	mov	r7, #20
   2c588:	e1a00007 	mov	r0, r7
   2c58c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2c590:	ebfff621 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
   2c594:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c598:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c59c:	0afffff9 	beq	2c588 <CBcmMailBox::WriteRead(unsigned int)+0x48>
   2c5a0:	e59f10a8 	ldr	r1, [pc, #168]	; 2c650 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2c5a4:	e59138b8 	ldr	r3, [r1, #2232]	; 0x8b8
   2c5a8:	e3530000 	cmp	r3, #0
   2c5ac:	bafffffc 	blt	2c5a4 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   2c5b0:	e316000f 	tst	r6, #15
   2c5b4:	1a000020 	bne	2c63c <CBcmMailBox::WriteRead(unsigned int)+0xfc>
   2c5b8:	e5953000 	ldr	r3, [r5]
   2c5bc:	e59f208c 	ldr	r2, [pc, #140]	; 2c650 <CBcmMailBox::WriteRead(unsigned int)+0x110>
   2c5c0:	e1866003 	orr	r6, r6, r3
   2c5c4:	e58168a0 	str	r6, [r1, #2208]	; 0x8a0
   2c5c8:	e5950000 	ldr	r0, [r5]
   2c5cc:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2c5d0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c5d4:	1afffffc 	bne	2c5cc <CBcmMailBox::WriteRead(unsigned int)+0x8c>
   2c5d8:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   2c5dc:	e203100f 	and	r1, r3, #15
   2c5e0:	e1510000 	cmp	r1, r0
   2c5e4:	1afffff8 	bne	2c5cc <CBcmMailBox::WriteRead(unsigned int)+0x8c>
   2c5e8:	e5d52004 	ldrb	r2, [r5, #4]
   2c5ec:	e3c3000f 	bic	r0, r3, #15
   2c5f0:	e3520000 	cmp	r2, #0
   2c5f4:	1a000003 	bne	2c608 <CBcmMailBox::WriteRead(unsigned int)+0xc8>
   2c5f8:	e59f304c 	ldr	r3, [pc, #76]	; 2c64c <CBcmMailBox::WriteRead(unsigned int)+0x10c>
   2c5fc:	e5933000 	ldr	r3, [r3]
   2c600:	e3530000 	cmp	r3, #0
   2c604:	1a000003 	bne	2c618 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   2c608:	e3a03000 	mov	r3, #0
   2c60c:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c610:	e28dd00c 	add	sp, sp, #12
   2c614:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2c618:	e58d0004 	str	r0, [sp, #4]
   2c61c:	ebfffdf1 	bl	2bde8 <LeaveCritical>
   2c620:	e59d0004 	ldr	r0, [sp, #4]
   2c624:	e3a03000 	mov	r3, #0
   2c628:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c62c:	e28dd00c 	add	sp, sp, #12
   2c630:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2c634:	ebfffdc0 	bl	2bd3c <EnterCritical>
   2c638:	eaffffcd 	b	2c574 <CBcmMailBox::WriteRead(unsigned int)+0x34>
   2c63c:	e3a02062 	mov	r2, #98	; 0x62
   2c640:	e59f100c 	ldr	r1, [pc, #12]	; 2c654 <CBcmMailBox::WriteRead(unsigned int)+0x114>
   2c644:	e59f000c 	ldr	r0, [pc, #12]	; 2c658 <CBcmMailBox::WriteRead(unsigned int)+0x118>
   2c648:	ebffe06c 	bl	24800 <assertion_failed>
   2c64c:	0004e19c 	.word	0x0004e19c
   2c650:	2000b000 	.word	0x2000b000
   2c654:	00045c88 	.word	0x00045c88
   2c658:	00045c98 	.word	0x00045c98

0002c65c <CBcmMailBox::Flush()>:
   2c65c:	e92d4070 	push	{r4, r5, r6, lr}
   2c660:	e59f4028 	ldr	r4, [pc, #40]	; 2c690 <CBcmMailBox::Flush()+0x34>
   2c664:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c668:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c66c:	18bd8070 	popne	{r4, r5, r6, pc}
   2c670:	e3a05014 	mov	r5, #20
   2c674:	e1a00005 	mov	r0, r5
   2c678:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   2c67c:	ebfff5e6 	bl	29e1c <CTimer::SimpleMsDelay(unsigned int)>
   2c680:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   2c684:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c688:	0afffff9 	beq	2c674 <CBcmMailBox::Flush()+0x18>
   2c68c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c690:	2000b000 	.word	0x2000b000

0002c694 <CBcmMailBox::Read()>:
   2c694:	e5901000 	ldr	r1, [r0]
   2c698:	e59f2020 	ldr	r2, [pc, #32]	; 2c6c0 <CBcmMailBox::Read()+0x2c>
   2c69c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   2c6a0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   2c6a4:	1afffffc 	bne	2c69c <CBcmMailBox::Read()+0x8>
   2c6a8:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   2c6ac:	e200300f 	and	r3, r0, #15
   2c6b0:	e1510003 	cmp	r1, r3
   2c6b4:	1afffff8 	bne	2c69c <CBcmMailBox::Read()+0x8>
   2c6b8:	e3c0000f 	bic	r0, r0, #15
   2c6bc:	e12fff1e 	bx	lr
   2c6c0:	2000b000 	.word	0x2000b000

0002c6c4 <CBcmMailBox::Write(unsigned int)>:
   2c6c4:	e59f2034 	ldr	r2, [pc, #52]	; 2c700 <CBcmMailBox::Write(unsigned int)+0x3c>
   2c6c8:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   2c6cc:	e3530000 	cmp	r3, #0
   2c6d0:	bafffffc 	blt	2c6c8 <CBcmMailBox::Write(unsigned int)+0x4>
   2c6d4:	e311000f 	tst	r1, #15
   2c6d8:	1a000003 	bne	2c6ec <CBcmMailBox::Write(unsigned int)+0x28>
   2c6dc:	e5903000 	ldr	r3, [r0]
   2c6e0:	e1811003 	orr	r1, r1, r3
   2c6e4:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   2c6e8:	e12fff1e 	bx	lr
   2c6ec:	e92d4010 	push	{r4, lr}
   2c6f0:	e3a02062 	mov	r2, #98	; 0x62
   2c6f4:	e59f1008 	ldr	r1, [pc, #8]	; 2c704 <CBcmMailBox::Write(unsigned int)+0x40>
   2c6f8:	e59f0008 	ldr	r0, [pc, #8]	; 2c708 <CBcmMailBox::Write(unsigned int)+0x44>
   2c6fc:	ebffe03f 	bl	24800 <assertion_failed>
   2c700:	2000b000 	.word	0x2000b000
   2c704:	00045c88 	.word	0x00045c88
   2c708:	00045c98 	.word	0x00045c98

0002c70c <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   2c70c:	e3a02000 	mov	r2, #0
   2c710:	e59f3004 	ldr	r3, [pc, #4]	; 2c71c <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE+0x10>
   2c714:	e5832000 	str	r2, [r3]
   2c718:	e12fff1e 	bx	lr
   2c71c:	0004e19c 	.word	0x0004e19c

0002c720 <DelayLoop>:
   2c720:	e1a01001 	mov	r1, r1
   2c724:	e1a02002 	mov	r2, r2
   2c728:	e2500001 	subs	r0, r0, #1
   2c72c:	8afffffb 	bhi	2c720 <DelayLoop>
   2c730:	e1a0f00e 	mov	pc, lr

0002c734 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   2c734:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2c738:	e3a0e000 	mov	lr, #0
   2c73c:	e1a03000 	mov	r3, r0
   2c740:	e1a0c00e 	mov	ip, lr
   2c744:	e5801000 	str	r1, [r0]
   2c748:	e28020dc 	add	r2, r0, #220	; 0xdc
   2c74c:	e5e3e004 	strb	lr, [r3, #4]!
   2c750:	e5a3c004 	str	ip, [r3, #4]!
   2c754:	e1530002 	cmp	r3, r2
   2c758:	1afffffc 	bne	2c750 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x1c>
   2c75c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002c760 <CGPIOManager::~CGPIOManager()>:
   2c760:	e92d4010 	push	{r4, lr}
   2c764:	e2803004 	add	r3, r0, #4
   2c768:	e1a04000 	mov	r4, r0
   2c76c:	e28010dc 	add	r1, r0, #220	; 0xdc
   2c770:	ea000001 	b	2c77c <CGPIOManager::~CGPIOManager()+0x1c>
   2c774:	e1530001 	cmp	r3, r1
   2c778:	0a000006 	beq	2c798 <CGPIOManager::~CGPIOManager()+0x38>
   2c77c:	e5b32004 	ldr	r2, [r3, #4]!
   2c780:	e3520000 	cmp	r2, #0
   2c784:	0afffffa 	beq	2c774 <CGPIOManager::~CGPIOManager()+0x14>
   2c788:	e3a0202c 	mov	r2, #44	; 0x2c
   2c78c:	e59f103c 	ldr	r1, [pc, #60]	; 2c7d0 <CGPIOManager::~CGPIOManager()+0x70>
   2c790:	e59f003c 	ldr	r0, [pc, #60]	; 2c7d4 <CGPIOManager::~CGPIOManager()+0x74>
   2c794:	ebffe019 	bl	24800 <assertion_failed>
   2c798:	e5d43004 	ldrb	r3, [r4, #4]
   2c79c:	e3530000 	cmp	r3, #0
   2c7a0:	0a000004 	beq	2c7b8 <CGPIOManager::~CGPIOManager()+0x58>
   2c7a4:	e5940000 	ldr	r0, [r4]
   2c7a8:	e3500000 	cmp	r0, #0
   2c7ac:	0a000003 	beq	2c7c0 <CGPIOManager::~CGPIOManager()+0x60>
   2c7b0:	e3a01034 	mov	r1, #52	; 0x34
   2c7b4:	ebfffe95 	bl	2c210 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2c7b8:	e1a00004 	mov	r0, r4
   2c7bc:	e8bd8010 	pop	{r4, pc}
   2c7c0:	e3a02032 	mov	r2, #50	; 0x32
   2c7c4:	e59f1004 	ldr	r1, [pc, #4]	; 2c7d0 <CGPIOManager::~CGPIOManager()+0x70>
   2c7c8:	e59f0008 	ldr	r0, [pc, #8]	; 2c7d8 <CGPIOManager::~CGPIOManager()+0x78>
   2c7cc:	ebffe00b 	bl	24800 <assertion_failed>
   2c7d0:	00045cac 	.word	0x00045cac
   2c7d4:	00045cbc 	.word	0x00045cbc
   2c7d8:	00045cd0 	.word	0x00045cd0

0002c7dc <CGPIOManager::Initialize()>:
   2c7dc:	e5d03004 	ldrb	r3, [r0, #4]
   2c7e0:	e92d4010 	push	{r4, lr}
   2c7e4:	e3530000 	cmp	r3, #0
   2c7e8:	1a00000a 	bne	2c818 <CGPIOManager::Initialize()+0x3c>
   2c7ec:	e1a04000 	mov	r4, r0
   2c7f0:	e5900000 	ldr	r0, [r0]
   2c7f4:	e3500000 	cmp	r0, #0
   2c7f8:	0a00000a 	beq	2c828 <CGPIOManager::Initialize()+0x4c>
   2c7fc:	e1a03004 	mov	r3, r4
   2c800:	e59f2030 	ldr	r2, [pc, #48]	; 2c838 <CGPIOManager::Initialize()+0x5c>
   2c804:	e3a01034 	mov	r1, #52	; 0x34
   2c808:	ebfffe4c 	bl	2c140 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2c80c:	e3a00001 	mov	r0, #1
   2c810:	e5c40004 	strb	r0, [r4, #4]
   2c814:	e8bd8010 	pop	{r4, pc}
   2c818:	e3a0203b 	mov	r2, #59	; 0x3b
   2c81c:	e59f1018 	ldr	r1, [pc, #24]	; 2c83c <CGPIOManager::Initialize()+0x60>
   2c820:	e59f0018 	ldr	r0, [pc, #24]	; 2c840 <CGPIOManager::Initialize()+0x64>
   2c824:	ebffdff5 	bl	24800 <assertion_failed>
   2c828:	e3a0203c 	mov	r2, #60	; 0x3c
   2c82c:	e59f1008 	ldr	r1, [pc, #8]	; 2c83c <CGPIOManager::Initialize()+0x60>
   2c830:	e59f000c 	ldr	r0, [pc, #12]	; 2c844 <CGPIOManager::Initialize()+0x68>
   2c834:	ebffdff1 	bl	24800 <assertion_failed>
   2c838:	0002ca38 	.word	0x0002ca38
   2c83c:	00045cac 	.word	0x00045cac
   2c840:	00045ce4 	.word	0x00045ce4
   2c844:	00045cd0 	.word	0x00045cd0

0002c848 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   2c848:	e5d03004 	ldrb	r3, [r0, #4]
   2c84c:	e92d4010 	push	{r4, lr}
   2c850:	e3530000 	cmp	r3, #0
   2c854:	0a00000a 	beq	2c884 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   2c858:	e3510000 	cmp	r1, #0
   2c85c:	0a00000c 	beq	2c894 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x4c>
   2c860:	e5913004 	ldr	r3, [r1, #4]
   2c864:	e3530035 	cmp	r3, #53	; 0x35
   2c868:	8a00000d 	bhi	2c8a4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x5c>
   2c86c:	e0800103 	add	r0, r0, r3, lsl #2
   2c870:	e5903008 	ldr	r3, [r0, #8]
   2c874:	e3530000 	cmp	r3, #0
   2c878:	1a00000d 	bne	2c8b4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   2c87c:	e5801008 	str	r1, [r0, #8]
   2c880:	e8bd8010 	pop	{r4, pc}
   2c884:	e3a02045 	mov	r2, #69	; 0x45
   2c888:	e59f1034 	ldr	r1, [pc, #52]	; 2c8c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c88c:	e59f0034 	ldr	r0, [pc, #52]	; 2c8c8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   2c890:	ebffdfda 	bl	24800 <assertion_failed>
   2c894:	e3a02047 	mov	r2, #71	; 0x47
   2c898:	e59f1024 	ldr	r1, [pc, #36]	; 2c8c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c89c:	e59f0028 	ldr	r0, [pc, #40]	; 2c8cc <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   2c8a0:	ebffdfd6 	bl	24800 <assertion_failed>
   2c8a4:	e3a02049 	mov	r2, #73	; 0x49
   2c8a8:	e59f1014 	ldr	r1, [pc, #20]	; 2c8c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c8ac:	e59f001c 	ldr	r0, [pc, #28]	; 2c8d0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x88>
   2c8b0:	ebffdfd2 	bl	24800 <assertion_failed>
   2c8b4:	e3a0204b 	mov	r2, #75	; 0x4b
   2c8b8:	e59f1004 	ldr	r1, [pc, #4]	; 2c8c4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x7c>
   2c8bc:	e59f0010 	ldr	r0, [pc, #16]	; 2c8d4 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x8c>
   2c8c0:	ebffdfce 	bl	24800 <assertion_failed>
   2c8c4:	00045cac 	.word	0x00045cac
   2c8c8:	00045cf8 	.word	0x00045cf8
   2c8cc:	00045d08 	.word	0x00045d08
   2c8d0:	00045d14 	.word	0x00045d14
   2c8d4:	00045cbc 	.word	0x00045cbc

0002c8d8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   2c8d8:	e5d03004 	ldrb	r3, [r0, #4]
   2c8dc:	e92d4010 	push	{r4, lr}
   2c8e0:	e3530000 	cmp	r3, #0
   2c8e4:	0a00000b 	beq	2c918 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   2c8e8:	e3510000 	cmp	r1, #0
   2c8ec:	0a00000d 	beq	2c928 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   2c8f0:	e5913004 	ldr	r3, [r1, #4]
   2c8f4:	e3530035 	cmp	r3, #53	; 0x35
   2c8f8:	8a00000e 	bhi	2c938 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x60>
   2c8fc:	e0800103 	add	r0, r0, r3, lsl #2
   2c900:	e5903008 	ldr	r3, [r0, #8]
   2c904:	e3530000 	cmp	r3, #0
   2c908:	0a00000e 	beq	2c948 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   2c90c:	e3a03000 	mov	r3, #0
   2c910:	e5803008 	str	r3, [r0, #8]
   2c914:	e8bd8010 	pop	{r4, pc}
   2c918:	e3a02052 	mov	r2, #82	; 0x52
   2c91c:	e59f1034 	ldr	r1, [pc, #52]	; 2c958 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c920:	e59f0034 	ldr	r0, [pc, #52]	; 2c95c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x84>
   2c924:	ebffdfb5 	bl	24800 <assertion_failed>
   2c928:	e3a02054 	mov	r2, #84	; 0x54
   2c92c:	e59f1024 	ldr	r1, [pc, #36]	; 2c958 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c930:	e59f0028 	ldr	r0, [pc, #40]	; 2c960 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   2c934:	ebffdfb1 	bl	24800 <assertion_failed>
   2c938:	e3a02056 	mov	r2, #86	; 0x56
   2c93c:	e59f1014 	ldr	r1, [pc, #20]	; 2c958 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c940:	e59f001c 	ldr	r0, [pc, #28]	; 2c964 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x8c>
   2c944:	ebffdfad 	bl	24800 <assertion_failed>
   2c948:	e3a02058 	mov	r2, #88	; 0x58
   2c94c:	e59f1004 	ldr	r1, [pc, #4]	; 2c958 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   2c950:	e59f0010 	ldr	r0, [pc, #16]	; 2c968 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x90>
   2c954:	ebffdfa9 	bl	24800 <assertion_failed>
   2c958:	00045cac 	.word	0x00045cac
   2c95c:	00045cf8 	.word	0x00045cf8
   2c960:	00045d08 	.word	0x00045d08
   2c964:	00045d14 	.word	0x00045d14
   2c968:	00045d28 	.word	0x00045d28

0002c96c <CGPIOManager::InterruptHandler()>:
   2c96c:	e5d03004 	ldrb	r3, [r0, #4]
   2c970:	e92d4070 	push	{r4, r5, r6, lr}
   2c974:	e3530000 	cmp	r3, #0
   2c978:	0a00001b 	beq	2c9ec <CGPIOManager::InterruptHandler()+0x80>
   2c97c:	e3a04000 	mov	r4, #0
   2c980:	ee074f9a 	mcr	15, 0, r4, cr7, cr10, {4}
   2c984:	e59f2098 	ldr	r2, [pc, #152]	; 2ca24 <CGPIOManager::InterruptHandler()+0xb8>
   2c988:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   2c98c:	ea000005 	b	2c9a8 <CGPIOManager::InterruptHandler()+0x3c>
   2c990:	e2844001 	add	r4, r4, #1
   2c994:	e314001f 	tst	r4, #31
   2c998:	11a030a3 	lsrne	r3, r3, #1
   2c99c:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   2c9a0:	e3540036 	cmp	r4, #54	; 0x36
   2c9a4:	0a00000d 	beq	2c9e0 <CGPIOManager::InterruptHandler()+0x74>
   2c9a8:	e3130001 	tst	r3, #1
   2c9ac:	0afffff7 	beq	2c990 <CGPIOManager::InterruptHandler()+0x24>
   2c9b0:	e2843002 	add	r3, r4, #2
   2c9b4:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   2c9b8:	e3550000 	cmp	r5, #0
   2c9bc:	0a00000e 	beq	2c9fc <CGPIOManager::InterruptHandler()+0x90>
   2c9c0:	e1a00005 	mov	r0, r5
   2c9c4:	ebffe5bf 	bl	260c8 <CGPIOPin::InterruptHandler()>
   2c9c8:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   2c9cc:	e3530000 	cmp	r3, #0
   2c9d0:	1595100c 	ldrne	r1, [r5, #12]
   2c9d4:	15952008 	ldrne	r2, [r5, #8]
   2c9d8:	159f3048 	ldrne	r3, [pc, #72]	; 2ca28 <CGPIOManager::InterruptHandler()+0xbc>
   2c9dc:	17821003 	strne	r1, [r2, r3]
   2c9e0:	e3a03000 	mov	r3, #0
   2c9e4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2c9e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c9ec:	e3a0205e 	mov	r2, #94	; 0x5e
   2c9f0:	e59f1034 	ldr	r1, [pc, #52]	; 2ca2c <CGPIOManager::InterruptHandler()+0xc0>
   2c9f4:	e59f0034 	ldr	r0, [pc, #52]	; 2ca30 <CGPIOManager::InterruptHandler()+0xc4>
   2c9f8:	ebffdf80 	bl	24800 <assertion_failed>
   2c9fc:	e1a00004 	mov	r0, r4
   2ca00:	ebffe5d0 	bl	26148 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   2ca04:	e3a02001 	mov	r2, #1
   2ca08:	e59f3024 	ldr	r3, [pc, #36]	; 2ca34 <CGPIOManager::InterruptHandler()+0xc8>
   2ca0c:	e204101f 	and	r1, r4, #31
   2ca10:	e08332a4 	add	r3, r3, r4, lsr #5
   2ca14:	e1a03103 	lsl	r3, r3, #2
   2ca18:	e1a02112 	lsl	r2, r2, r1
   2ca1c:	e5832000 	str	r2, [r3]
   2ca20:	eaffffee 	b	2c9e0 <CGPIOManager::InterruptHandler()+0x74>
   2ca24:	20200000 	.word	0x20200000
   2ca28:	20200040 	.word	0x20200040
   2ca2c:	00045cac 	.word	0x00045cac
   2ca30:	00045cf8 	.word	0x00045cf8
   2ca34:	08080010 	.word	0x08080010

0002ca38 <CGPIOManager::InterruptStub(void*)>:
   2ca38:	e3500000 	cmp	r0, #0
   2ca3c:	0a000000 	beq	2ca44 <CGPIOManager::InterruptStub(void*)+0xc>
   2ca40:	eaffffc9 	b	2c96c <CGPIOManager::InterruptHandler()>
   2ca44:	e92d4010 	push	{r4, lr}
   2ca48:	e3a0208e 	mov	r2, #142	; 0x8e
   2ca4c:	e59f1004 	ldr	r1, [pc, #4]	; 2ca58 <CGPIOManager::InterruptStub(void*)+0x20>
   2ca50:	e59f0004 	ldr	r0, [pc, #4]	; 2ca5c <CGPIOManager::InterruptStub(void*)+0x24>
   2ca54:	ebffdf69 	bl	24800 <assertion_failed>
   2ca58:	00045cac 	.word	0x00045cac
   2ca5c:	0003f224 	.word	0x0003f224

0002ca60 <CPtrList::CPtrList()>:
   2ca60:	e3a02000 	mov	r2, #0
   2ca64:	e5802000 	str	r2, [r0]
   2ca68:	e12fff1e 	bx	lr

0002ca6c <CPtrList::~CPtrList()>:
   2ca6c:	e5903000 	ldr	r3, [r0]
   2ca70:	e3530000 	cmp	r3, #0
   2ca74:	1a000000 	bne	2ca7c <CPtrList::~CPtrList()+0x10>
   2ca78:	e12fff1e 	bx	lr
   2ca7c:	e92d4010 	push	{r4, lr}
   2ca80:	e3a0202a 	mov	r2, #42	; 0x2a
   2ca84:	e59f1004 	ldr	r1, [pc, #4]	; 2ca90 <CPtrList::~CPtrList()+0x24>
   2ca88:	e59f0004 	ldr	r0, [pc, #4]	; 2ca94 <CPtrList::~CPtrList()+0x28>
   2ca8c:	ebffdf5b 	bl	24800 <assertion_failed>
   2ca90:	00045d3c 	.word	0x00045d3c
   2ca94:	00045d48 	.word	0x00045d48

0002ca98 <CPtrList::GetFirst()>:
   2ca98:	e5900000 	ldr	r0, [r0]
   2ca9c:	e12fff1e 	bx	lr

0002caa0 <CPtrList::GetNext(TPtrListElement*)>:
   2caa0:	e3510000 	cmp	r1, #0
   2caa4:	e92d4010 	push	{r4, lr}
   2caa8:	0a000005 	beq	2cac4 <CPtrList::GetNext(TPtrListElement*)+0x24>
   2caac:	e59f3030 	ldr	r3, [pc, #48]	; 2cae4 <CPtrList::GetNext(TPtrListElement*)+0x44>
   2cab0:	e5912000 	ldr	r2, [r1]
   2cab4:	e1520003 	cmp	r2, r3
   2cab8:	1a000005 	bne	2cad4 <CPtrList::GetNext(TPtrListElement*)+0x34>
   2cabc:	e5910008 	ldr	r0, [r1, #8]
   2cac0:	e8bd8010 	pop	{r4, pc}
   2cac4:	e3a02034 	mov	r2, #52	; 0x34
   2cac8:	e59f1018 	ldr	r1, [pc, #24]	; 2cae8 <CPtrList::GetNext(TPtrListElement*)+0x48>
   2cacc:	e59f0018 	ldr	r0, [pc, #24]	; 2caec <CPtrList::GetNext(TPtrListElement*)+0x4c>
   2cad0:	ebffdf4a 	bl	24800 <assertion_failed>
   2cad4:	e3a02035 	mov	r2, #53	; 0x35
   2cad8:	e59f1008 	ldr	r1, [pc, #8]	; 2cae8 <CPtrList::GetNext(TPtrListElement*)+0x48>
   2cadc:	e59f000c 	ldr	r0, [pc, #12]	; 2caf0 <CPtrList::GetNext(TPtrListElement*)+0x50>
   2cae0:	ebffdf46 	bl	24800 <assertion_failed>
   2cae4:	504c4d43 	.word	0x504c4d43
   2cae8:	00045d3c 	.word	0x00045d3c
   2caec:	00045d58 	.word	0x00045d58
   2caf0:	00045d68 	.word	0x00045d68

0002caf4 <CPtrList::GetPtr(TPtrListElement*)>:
   2caf4:	e3510000 	cmp	r1, #0
   2caf8:	e92d4010 	push	{r4, lr}
   2cafc:	0a000005 	beq	2cb18 <CPtrList::GetPtr(TPtrListElement*)+0x24>
   2cb00:	e59f3030 	ldr	r3, [pc, #48]	; 2cb38 <CPtrList::GetPtr(TPtrListElement*)+0x44>
   2cb04:	e5912000 	ldr	r2, [r1]
   2cb08:	e1520003 	cmp	r2, r3
   2cb0c:	1a000005 	bne	2cb28 <CPtrList::GetPtr(TPtrListElement*)+0x34>
   2cb10:	e591000c 	ldr	r0, [r1, #12]
   2cb14:	e8bd8010 	pop	{r4, pc}
   2cb18:	e3a0203c 	mov	r2, #60	; 0x3c
   2cb1c:	e59f1018 	ldr	r1, [pc, #24]	; 2cb3c <CPtrList::GetPtr(TPtrListElement*)+0x48>
   2cb20:	e59f0018 	ldr	r0, [pc, #24]	; 2cb40 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   2cb24:	ebffdf35 	bl	24800 <assertion_failed>
   2cb28:	e3a0203d 	mov	r2, #61	; 0x3d
   2cb2c:	e59f1008 	ldr	r1, [pc, #8]	; 2cb3c <CPtrList::GetPtr(TPtrListElement*)+0x48>
   2cb30:	e59f000c 	ldr	r0, [pc, #12]	; 2cb44 <CPtrList::GetPtr(TPtrListElement*)+0x50>
   2cb34:	ebffdf31 	bl	24800 <assertion_failed>
   2cb38:	504c4d43 	.word	0x504c4d43
   2cb3c:	00045d3c 	.word	0x00045d3c
   2cb40:	00045d58 	.word	0x00045d58
   2cb44:	00045d68 	.word	0x00045d68

0002cb48 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   2cb48:	e92d4070 	push	{r4, r5, r6, lr}
   2cb4c:	e1a05000 	mov	r5, r0
   2cb50:	e3a00010 	mov	r0, #16
   2cb54:	e1a04001 	mov	r4, r1
   2cb58:	e1a06002 	mov	r6, r2
   2cb5c:	ebfff944 	bl	2b074 <operator new(unsigned int)>
   2cb60:	e5953000 	ldr	r3, [r5]
   2cb64:	e59f10a8 	ldr	r1, [pc, #168]	; 2cc14 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xcc>
   2cb68:	e3530000 	cmp	r3, #0
   2cb6c:	e580600c 	str	r6, [r0, #12]
   2cb70:	e5801000 	str	r1, [r0]
   2cb74:	0a000015 	beq	2cbd0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x88>
   2cb78:	e3540000 	cmp	r4, #0
   2cb7c:	0a000017 	beq	2cbe0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x98>
   2cb80:	e5942000 	ldr	r2, [r4]
   2cb84:	e1520001 	cmp	r2, r1
   2cb88:	1a000018 	bne	2cbf0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa8>
   2cb8c:	e1530004 	cmp	r3, r4
   2cb90:	0a00001a 	beq	2cc00 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb8>
   2cb94:	e5943004 	ldr	r3, [r4, #4]
   2cb98:	e5804008 	str	r4, [r0, #8]
   2cb9c:	e3530000 	cmp	r3, #0
   2cba0:	e5803004 	str	r3, [r0, #4]
   2cba4:	0a000003 	beq	2cbb8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   2cba8:	e5931000 	ldr	r1, [r3]
   2cbac:	e1510002 	cmp	r1, r2
   2cbb0:	05830008 	streq	r0, [r3, #8]
   2cbb4:	1a000001 	bne	2cbc0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   2cbb8:	e5840004 	str	r0, [r4, #4]
   2cbbc:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cbc0:	e3a02060 	mov	r2, #96	; 0x60
   2cbc4:	e59f104c 	ldr	r1, [pc, #76]	; 2cc18 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2cbc8:	e59f004c 	ldr	r0, [pc, #76]	; 2cc1c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd4>
   2cbcc:	ebffdf0b 	bl	24800 <assertion_failed>
   2cbd0:	e3a0204c 	mov	r2, #76	; 0x4c
   2cbd4:	e59f103c 	ldr	r1, [pc, #60]	; 2cc18 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2cbd8:	e59f0040 	ldr	r0, [pc, #64]	; 2cc20 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   2cbdc:	ebffdf07 	bl	24800 <assertion_failed>
   2cbe0:	e3a0204d 	mov	r2, #77	; 0x4d
   2cbe4:	e59f102c 	ldr	r1, [pc, #44]	; 2cc18 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2cbe8:	e59f0034 	ldr	r0, [pc, #52]	; 2cc24 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xdc>
   2cbec:	ebffdf03 	bl	24800 <assertion_failed>
   2cbf0:	e3a0204e 	mov	r2, #78	; 0x4e
   2cbf4:	e59f101c 	ldr	r1, [pc, #28]	; 2cc18 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>
   2cbf8:	e59f0028 	ldr	r0, [pc, #40]	; 2cc28 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   2cbfc:	ebffdeff 	bl	24800 <assertion_failed>
   2cc00:	e3a02000 	mov	r2, #0
   2cc04:	e980000c 	stmib	r0, {r2, r3}
   2cc08:	e5830004 	str	r0, [r3, #4]
   2cc0c:	e5850000 	str	r0, [r5]
   2cc10:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cc14:	504c4d43 	.word	0x504c4d43
   2cc18:	00045d3c 	.word	0x00045d3c
   2cc1c:	00045dcc 	.word	0x00045dcc
   2cc20:	00045d8c 	.word	0x00045d8c
   2cc24:	00045d9c 	.word	0x00045d9c
   2cc28:	00045da8 	.word	0x00045da8

0002cc2c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   2cc2c:	e92d4070 	push	{r4, r5, r6, lr}
   2cc30:	e1a04001 	mov	r4, r1
   2cc34:	e1a05000 	mov	r5, r0
   2cc38:	e3a00010 	mov	r0, #16
   2cc3c:	e1a06002 	mov	r6, r2
   2cc40:	ebfff90b 	bl	2b074 <operator new(unsigned int)>
   2cc44:	e59f30ac 	ldr	r3, [pc, #172]	; 2ccf8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>
   2cc48:	e3540000 	cmp	r4, #0
   2cc4c:	e580600c 	str	r6, [r0, #12]
   2cc50:	e5803000 	str	r3, [r0]
   2cc54:	0a000014 	beq	2ccac <CPtrList::InsertAfter(TPtrListElement*, void*)+0x80>
   2cc58:	e5952000 	ldr	r2, [r5]
   2cc5c:	e3520000 	cmp	r2, #0
   2cc60:	0a000018 	beq	2ccc8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   2cc64:	e5942000 	ldr	r2, [r4]
   2cc68:	e1520003 	cmp	r2, r3
   2cc6c:	1a000019 	bne	2ccd8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xac>
   2cc70:	e5943008 	ldr	r3, [r4, #8]
   2cc74:	e5804004 	str	r4, [r0, #4]
   2cc78:	e3530000 	cmp	r3, #0
   2cc7c:	e5803008 	str	r3, [r0, #8]
   2cc80:	0a000003 	beq	2cc94 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   2cc84:	e5931000 	ldr	r1, [r3]
   2cc88:	e1510002 	cmp	r1, r2
   2cc8c:	05830004 	streq	r0, [r3, #4]
   2cc90:	1a000001 	bne	2cc9c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x70>
   2cc94:	e5840008 	str	r0, [r4, #8]
   2cc98:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cc9c:	e3a02085 	mov	r2, #133	; 0x85
   2cca0:	e59f1054 	ldr	r1, [pc, #84]	; 2ccfc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cca4:	e59f0054 	ldr	r0, [pc, #84]	; 2cd00 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd4>
   2cca8:	ebffded4 	bl	24800 <assertion_failed>
   2ccac:	e5953000 	ldr	r3, [r5]
   2ccb0:	e3530000 	cmp	r3, #0
   2ccb4:	1a00000b 	bne	2cce8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
   2ccb8:	e5803004 	str	r3, [r0, #4]
   2ccbc:	e5803008 	str	r3, [r0, #8]
   2ccc0:	e5850000 	str	r0, [r5]
   2ccc4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ccc8:	e3a0207d 	mov	r2, #125	; 0x7d
   2cccc:	e59f1028 	ldr	r1, [pc, #40]	; 2ccfc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2ccd0:	e59f002c 	ldr	r0, [pc, #44]	; 2cd04 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   2ccd4:	ebffdec9 	bl	24800 <assertion_failed>
   2ccd8:	e3a0207e 	mov	r2, #126	; 0x7e
   2ccdc:	e59f1018 	ldr	r1, [pc, #24]	; 2ccfc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2cce0:	e59f0020 	ldr	r0, [pc, #32]	; 2cd08 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
   2cce4:	ebffdec5 	bl	24800 <assertion_failed>
   2cce8:	e3a02074 	mov	r2, #116	; 0x74
   2ccec:	e59f1008 	ldr	r1, [pc, #8]	; 2ccfc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   2ccf0:	e59f0014 	ldr	r0, [pc, #20]	; 2cd0c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe0>
   2ccf4:	ebffdec1 	bl	24800 <assertion_failed>
   2ccf8:	504c4d43 	.word	0x504c4d43
   2ccfc:	00045d3c 	.word	0x00045d3c
   2cd00:	00045e18 	.word	0x00045e18
   2cd04:	00045d8c 	.word	0x00045d8c
   2cd08:	00045df4 	.word	0x00045df4
   2cd0c:	00045d48 	.word	0x00045d48

0002cd10 <CPtrList::Remove(TPtrListElement*)>:
   2cd10:	e3510000 	cmp	r1, #0
   2cd14:	e92d4010 	push	{r4, lr}
   2cd18:	0a00002c 	beq	2cdd0 <CPtrList::Remove(TPtrListElement*)+0xc0>
   2cd1c:	e59f30ec 	ldr	r3, [pc, #236]	; 2ce10 <CPtrList::Remove(TPtrListElement*)+0x100>
   2cd20:	e5912000 	ldr	r2, [r1]
   2cd24:	e1520003 	cmp	r2, r3
   2cd28:	1a00002c 	bne	2cde0 <CPtrList::Remove(TPtrListElement*)+0xd0>
   2cd2c:	e5903000 	ldr	r3, [r0]
   2cd30:	e1510003 	cmp	r1, r3
   2cd34:	0a000018 	beq	2cd9c <CPtrList::Remove(TPtrListElement*)+0x8c>
   2cd38:	e5913004 	ldr	r3, [r1, #4]
   2cd3c:	e3530000 	cmp	r3, #0
   2cd40:	0a00002a 	beq	2cdf0 <CPtrList::Remove(TPtrListElement*)+0xe0>
   2cd44:	e5930000 	ldr	r0, [r3]
   2cd48:	e1500002 	cmp	r0, r2
   2cd4c:	1a00002b 	bne	2ce00 <CPtrList::Remove(TPtrListElement*)+0xf0>
   2cd50:	e5912008 	ldr	r2, [r1, #8]
   2cd54:	e5832008 	str	r2, [r3, #8]
   2cd58:	e5912008 	ldr	r2, [r1, #8]
   2cd5c:	e3520000 	cmp	r2, #0
   2cd60:	0a000003 	beq	2cd74 <CPtrList::Remove(TPtrListElement*)+0x64>
   2cd64:	e592c000 	ldr	ip, [r2]
   2cd68:	e15c0000 	cmp	ip, r0
   2cd6c:	05823004 	streq	r3, [r2, #4]
   2cd70:	1a000005 	bne	2cd8c <CPtrList::Remove(TPtrListElement*)+0x7c>
   2cd74:	e8bd4010 	pop	{r4, lr}
   2cd78:	e3a03000 	mov	r3, #0
   2cd7c:	e1a00001 	mov	r0, r1
   2cd80:	e5813000 	str	r3, [r1]
   2cd84:	e3a01010 	mov	r1, #16
   2cd88:	eafff8c7 	b	2b0ac <operator delete(void*, unsigned int)>
   2cd8c:	e3a020a4 	mov	r2, #164	; 0xa4
   2cd90:	e59f107c 	ldr	r1, [pc, #124]	; 2ce14 <CPtrList::Remove(TPtrListElement*)+0x104>
   2cd94:	e59f007c 	ldr	r0, [pc, #124]	; 2ce18 <CPtrList::Remove(TPtrListElement*)+0x108>
   2cd98:	ebffde98 	bl	24800 <assertion_failed>
   2cd9c:	e5913008 	ldr	r3, [r1, #8]
   2cda0:	e3530000 	cmp	r3, #0
   2cda4:	e5803000 	str	r3, [r0]
   2cda8:	0afffff1 	beq	2cd74 <CPtrList::Remove(TPtrListElement*)+0x64>
   2cdac:	e5930000 	ldr	r0, [r3]
   2cdb0:	e1500002 	cmp	r0, r2
   2cdb4:	03a02000 	moveq	r2, #0
   2cdb8:	05832004 	streq	r2, [r3, #4]
   2cdbc:	0affffec 	beq	2cd74 <CPtrList::Remove(TPtrListElement*)+0x64>
   2cdc0:	e3a02098 	mov	r2, #152	; 0x98
   2cdc4:	e59f1048 	ldr	r1, [pc, #72]	; 2ce14 <CPtrList::Remove(TPtrListElement*)+0x104>
   2cdc8:	e59f0048 	ldr	r0, [pc, #72]	; 2ce18 <CPtrList::Remove(TPtrListElement*)+0x108>
   2cdcc:	ebffde8b 	bl	24800 <assertion_failed>
   2cdd0:	e3a0208f 	mov	r2, #143	; 0x8f
   2cdd4:	e59f1038 	ldr	r1, [pc, #56]	; 2ce14 <CPtrList::Remove(TPtrListElement*)+0x104>
   2cdd8:	e59f003c 	ldr	r0, [pc, #60]	; 2ce1c <CPtrList::Remove(TPtrListElement*)+0x10c>
   2cddc:	ebffde87 	bl	24800 <assertion_failed>
   2cde0:	e3a02090 	mov	r2, #144	; 0x90
   2cde4:	e59f1028 	ldr	r1, [pc, #40]	; 2ce14 <CPtrList::Remove(TPtrListElement*)+0x104>
   2cde8:	e59f0030 	ldr	r0, [pc, #48]	; 2ce20 <CPtrList::Remove(TPtrListElement*)+0x110>
   2cdec:	ebffde83 	bl	24800 <assertion_failed>
   2cdf0:	e3a0209e 	mov	r2, #158	; 0x9e
   2cdf4:	e59f1018 	ldr	r1, [pc, #24]	; 2ce14 <CPtrList::Remove(TPtrListElement*)+0x104>
   2cdf8:	e59f0024 	ldr	r0, [pc, #36]	; 2ce24 <CPtrList::Remove(TPtrListElement*)+0x114>
   2cdfc:	ebffde7f 	bl	24800 <assertion_failed>
   2ce00:	e3a0209f 	mov	r2, #159	; 0x9f
   2ce04:	e59f1008 	ldr	r1, [pc, #8]	; 2ce14 <CPtrList::Remove(TPtrListElement*)+0x104>
   2ce08:	e59f0018 	ldr	r0, [pc, #24]	; 2ce28 <CPtrList::Remove(TPtrListElement*)+0x118>
   2ce0c:	ebffde7b 	bl	24800 <assertion_failed>
   2ce10:	504c4d43 	.word	0x504c4d43
   2ce14:	00045d3c 	.word	0x00045d3c
   2ce18:	00045e44 	.word	0x00045e44
   2ce1c:	00045d58 	.word	0x00045d58
   2ce20:	00045d68 	.word	0x00045d68
   2ce24:	00045e70 	.word	0x00045e70
   2ce28:	00045e88 	.word	0x00045e88

0002ce2c <CPtrList::Find(void*)>:
   2ce2c:	e5900000 	ldr	r0, [r0]
   2ce30:	e3500000 	cmp	r0, #0
   2ce34:	0a000015 	beq	2ce90 <CPtrList::Find(void*)+0x64>
   2ce38:	e59f3054 	ldr	r3, [pc, #84]	; 2ce94 <CPtrList::Find(void*)+0x68>
   2ce3c:	e5902000 	ldr	r2, [r0]
   2ce40:	e1520003 	cmp	r2, r3
   2ce44:	1a00000c 	bne	2ce7c <CPtrList::Find(void*)+0x50>
   2ce48:	e590300c 	ldr	r3, [r0, #12]
   2ce4c:	e1510003 	cmp	r1, r3
   2ce50:	1a000003 	bne	2ce64 <CPtrList::Find(void*)+0x38>
   2ce54:	ea00000d 	b	2ce90 <CPtrList::Find(void*)+0x64>
   2ce58:	e590300c 	ldr	r3, [r0, #12]
   2ce5c:	e1530001 	cmp	r3, r1
   2ce60:	0a00000a 	beq	2ce90 <CPtrList::Find(void*)+0x64>
   2ce64:	e5900008 	ldr	r0, [r0, #8]
   2ce68:	e3500000 	cmp	r0, #0
   2ce6c:	0a000007 	beq	2ce90 <CPtrList::Find(void*)+0x64>
   2ce70:	e5903000 	ldr	r3, [r0]
   2ce74:	e1530002 	cmp	r3, r2
   2ce78:	0afffff6 	beq	2ce58 <CPtrList::Find(void*)+0x2c>
   2ce7c:	e92d4010 	push	{r4, lr}
   2ce80:	e3a020b3 	mov	r2, #179	; 0xb3
   2ce84:	e59f100c 	ldr	r1, [pc, #12]	; 2ce98 <CPtrList::Find(void*)+0x6c>
   2ce88:	e59f000c 	ldr	r0, [pc, #12]	; 2ce9c <CPtrList::Find(void*)+0x70>
   2ce8c:	ebffde5b 	bl	24800 <assertion_failed>
   2ce90:	e12fff1e 	bx	lr
   2ce94:	504c4d43 	.word	0x504c4d43
   2ce98:	00045d3c 	.word	0x00045d3c
   2ce9c:	00045d68 	.word	0x00045d68

0002cea0 <CPageAllocator::CPageAllocator()>:
   2cea0:	e3a02000 	mov	r2, #0
   2cea4:	e3a01001 	mov	r1, #1
   2cea8:	e5802000 	str	r2, [r0]
   2ceac:	e580100c 	str	r1, [r0, #12]
   2ceb0:	e5802004 	str	r2, [r0, #4]
   2ceb4:	e5802008 	str	r2, [r0, #8]
   2ceb8:	e12fff1e 	bx	lr

0002cebc <CPageAllocator::~CPageAllocator()>:
   2cebc:	e12fff1e 	bx	lr

0002cec0 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   2cec0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2cec4:	e28db000 	add	fp, sp, #0
   2cec8:	e24dd014 	sub	sp, sp, #20
   2cecc:	e50b0008 	str	r0, [fp, #-8]
   2ced0:	e50b100c 	str	r1, [fp, #-12]
   2ced4:	e50b2010 	str	r2, [fp, #-16]
   2ced8:	e51b300c 	ldr	r3, [fp, #-12]
   2cedc:	e2833eff 	add	r3, r3, #4080	; 0xff0
   2cee0:	e283300f 	add	r3, r3, #15
   2cee4:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2cee8:	e3c3300f 	bic	r3, r3, #15
   2ceec:	e1a02003 	mov	r2, r3
   2cef0:	e51b3008 	ldr	r3, [fp, #-8]
   2cef4:	e5832000 	str	r2, [r3]
   2cef8:	e51b200c 	ldr	r2, [fp, #-12]
   2cefc:	e51b3010 	ldr	r3, [fp, #-16]
   2cf00:	e0823003 	add	r3, r2, r3
   2cf04:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   2cf08:	e3c3300f 	bic	r3, r3, #15
   2cf0c:	e1a02003 	mov	r2, r3
   2cf10:	e51b3008 	ldr	r3, [fp, #-8]
   2cf14:	e5832004 	str	r2, [r3, #4]
   2cf18:	e320f000 	nop	{0}
   2cf1c:	e28bd000 	add	sp, fp, #0
   2cf20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2cf24:	e12fff1e 	bx	lr

0002cf28 <CPageAllocator::GetFreeSpace() const>:
   2cf28:	e8900005 	ldm	r0, {r0, r2}
   2cf2c:	e0420000 	sub	r0, r2, r0
   2cf30:	e12fff1e 	bx	lr

0002cf34 <CPageAllocator::Allocate()>:
   2cf34:	e5903000 	ldr	r3, [r0]
   2cf38:	e92d4070 	push	{r4, r5, r6, lr}
   2cf3c:	e3530000 	cmp	r3, #0
   2cf40:	0a000026 	beq	2cfe0 <CPageAllocator::Allocate()+0xac>
   2cf44:	e1a05000 	mov	r5, r0
   2cf48:	e590000c 	ldr	r0, [r0, #12]
   2cf4c:	e3500000 	cmp	r0, #0
   2cf50:	1a000012 	bne	2cfa0 <CPageAllocator::Allocate()+0x6c>
   2cf54:	e5954008 	ldr	r4, [r5, #8]
   2cf58:	e3540000 	cmp	r4, #0
   2cf5c:	0a000013 	beq	2cfb0 <CPageAllocator::Allocate()+0x7c>
   2cf60:	e59f3098 	ldr	r3, [pc, #152]	; 2d000 <CPageAllocator::Allocate()+0xcc>
   2cf64:	e5942000 	ldr	r2, [r4]
   2cf68:	e1520003 	cmp	r2, r3
   2cf6c:	1a00001f 	bne	2cff0 <CPageAllocator::Allocate()+0xbc>
   2cf70:	e3a03000 	mov	r3, #0
   2cf74:	e5942004 	ldr	r2, [r4, #4]
   2cf78:	e5852008 	str	r2, [r5, #8]
   2cf7c:	e5843000 	str	r3, [r4]
   2cf80:	e595300c 	ldr	r3, [r5, #12]
   2cf84:	e3530000 	cmp	r3, #0
   2cf88:	1a000001 	bne	2cf94 <CPageAllocator::Allocate()+0x60>
   2cf8c:	e1a00004 	mov	r0, r4
   2cf90:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cf94:	ebfffb93 	bl	2bde8 <LeaveCritical>
   2cf98:	e1a00004 	mov	r0, r4
   2cf9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cfa0:	ebfffb65 	bl	2bd3c <EnterCritical>
   2cfa4:	e5954008 	ldr	r4, [r5, #8]
   2cfa8:	e3540000 	cmp	r4, #0
   2cfac:	1affffeb 	bne	2cf60 <CPageAllocator::Allocate()+0x2c>
   2cfb0:	e5954000 	ldr	r4, [r5]
   2cfb4:	e5952004 	ldr	r2, [r5, #4]
   2cfb8:	e2843a01 	add	r3, r4, #4096	; 0x1000
   2cfbc:	e1530002 	cmp	r3, r2
   2cfc0:	e5853000 	str	r3, [r5]
   2cfc4:	9affffed 	bls	2cf80 <CPageAllocator::Allocate()+0x4c>
   2cfc8:	e595400c 	ldr	r4, [r5, #12]
   2cfcc:	e3540000 	cmp	r4, #0
   2cfd0:	0affffed 	beq	2cf8c <CPageAllocator::Allocate()+0x58>
   2cfd4:	ebfffb83 	bl	2bde8 <LeaveCritical>
   2cfd8:	e3a00000 	mov	r0, #0
   2cfdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   2cfe0:	e59f101c 	ldr	r1, [pc, #28]	; 2d004 <CPageAllocator::Allocate()+0xd0>
   2cfe4:	e3a02036 	mov	r2, #54	; 0x36
   2cfe8:	e2810014 	add	r0, r1, #20
   2cfec:	ebffde03 	bl	24800 <assertion_failed>
   2cff0:	e59f100c 	ldr	r1, [pc, #12]	; 2d004 <CPageAllocator::Allocate()+0xd0>
   2cff4:	e3a02044 	mov	r2, #68	; 0x44
   2cff8:	e2810024 	add	r0, r1, #36	; 0x24
   2cffc:	ebffddff 	bl	24800 <assertion_failed>
   2d000:	50474d43 	.word	0x50474d43
   2d004:	00045eb4 	.word	0x00045eb4

0002d008 <CPageAllocator::Free(void*)>:
   2d008:	e92d4070 	push	{r4, r5, r6, lr}
   2d00c:	e2515000 	subs	r5, r1, #0
   2d010:	08bd8070 	popeq	{r4, r5, r6, pc}
   2d014:	e590300c 	ldr	r3, [r0, #12]
   2d018:	e3530000 	cmp	r3, #0
   2d01c:	1a000004 	bne	2d034 <CPageAllocator::Free(void*)+0x2c>
   2d020:	e5903008 	ldr	r3, [r0, #8]
   2d024:	e59f2038 	ldr	r2, [pc, #56]	; 2d064 <CPageAllocator::Free(void*)+0x5c>
   2d028:	e885000c 	stm	r5, {r2, r3}
   2d02c:	e5805008 	str	r5, [r0, #8]
   2d030:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d034:	e1a04000 	mov	r4, r0
   2d038:	e1a00003 	mov	r0, r3
   2d03c:	ebfffb3e 	bl	2bd3c <EnterCritical>
   2d040:	e594100c 	ldr	r1, [r4, #12]
   2d044:	e5943008 	ldr	r3, [r4, #8]
   2d048:	e59f2014 	ldr	r2, [pc, #20]	; 2d064 <CPageAllocator::Free(void*)+0x5c>
   2d04c:	e3510000 	cmp	r1, #0
   2d050:	e885000c 	stm	r5, {r2, r3}
   2d054:	e5845008 	str	r5, [r4, #8]
   2d058:	08bd8070 	popeq	{r4, r5, r6, pc}
   2d05c:	e8bd4070 	pop	{r4, r5, r6, lr}
   2d060:	eafffb60 	b	2bde8 <LeaveCritical>
   2d064:	50474d43 	.word	0x50474d43

0002d068 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   2d068:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d06c:	e1a04000 	mov	r4, r0
   2d070:	e3a0b000 	mov	fp, #0
   2d074:	e1a06002 	mov	r6, r2
   2d078:	e1a07001 	mov	r7, r1
   2d07c:	e1a05003 	mov	r5, r3
   2d080:	e24dd00c 	sub	sp, sp, #12
   2d084:	e280a018 	add	sl, r0, #24
   2d088:	ebffdfcd 	bl	24fc4 <CDevice::CDevice()>
   2d08c:	e59f31d8 	ldr	r3, [pc, #472]	; 2d26c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x204>
   2d090:	e5c46008 	strb	r6, [r4, #8]
   2d094:	e5843000 	str	r3, [r4]
   2d098:	e5847004 	str	r7, [r4, #4]
   2d09c:	e2849040 	add	r9, r4, #64	; 0x40
   2d0a0:	e584500c 	str	r5, [r4, #12]
   2d0a4:	e1a0000a 	mov	r0, sl
   2d0a8:	e584b010 	str	fp, [r4, #16]
   2d0ac:	e5c4b014 	strb	fp, [r4, #20]
   2d0b0:	ebffe147 	bl	255d4 <CGPIOPin::CGPIOPin()>
   2d0b4:	e2848068 	add	r8, r4, #104	; 0x68
   2d0b8:	e1a00009 	mov	r0, r9
   2d0bc:	ebffe144 	bl	255d4 <CGPIOPin::CGPIOPin()>
   2d0c0:	e2847090 	add	r7, r4, #144	; 0x90
   2d0c4:	e1a00008 	mov	r0, r8
   2d0c8:	ebffe141 	bl	255d4 <CGPIOPin::CGPIOPin()>
   2d0cc:	e1a00007 	mov	r0, r7
   2d0d0:	ebffe13f 	bl	255d4 <CGPIOPin::CGPIOPin()>
   2d0d4:	e156000b 	cmp	r6, fp
   2d0d8:	13a06002 	movne	r6, #2
   2d0dc:	03a06001 	moveq	r6, #1
   2d0e0:	e3a03001 	mov	r3, #1
   2d0e4:	e594000c 	ldr	r0, [r4, #12]
   2d0e8:	e2841901 	add	r1, r4, #16384	; 0x4000
   2d0ec:	e150000b 	cmp	r0, fp
   2d0f0:	e584b0bc 	str	fp, [r4, #188]	; 0xbc
   2d0f4:	e584b0b8 	str	fp, [r4, #184]	; 0xb8
   2d0f8:	e584b0c0 	str	fp, [r4, #192]	; 0xc0
   2d0fc:	e584b0c4 	str	fp, [r4, #196]	; 0xc4
   2d100:	e584b0d0 	str	fp, [r4, #208]	; 0xd0
   2d104:	e5c4b0c8 	strb	fp, [r4, #200]	; 0xc8
   2d108:	e5c4b0c9 	strb	fp, [r4, #201]	; 0xc9
   2d10c:	e584b0cc 	str	fp, [r4, #204]	; 0xcc
   2d110:	e584b0d8 	str	fp, [r4, #216]	; 0xd8
   2d114:	e584b0d4 	str	fp, [r4, #212]	; 0xd4
   2d118:	e5c4b0dc 	strb	fp, [r4, #220]	; 0xdc
   2d11c:	e584b0f4 	str	fp, [r4, #244]	; 0xf4
   2d120:	e584b0e4 	str	fp, [r4, #228]	; 0xe4
   2d124:	e584b0e8 	str	fp, [r4, #232]	; 0xe8
   2d128:	e584b0ec 	str	fp, [r4, #236]	; 0xec
   2d12c:	e584b0f0 	str	fp, [r4, #240]	; 0xf0
   2d130:	e584b0e0 	str	fp, [r4, #224]	; 0xe0
   2d134:	e5816f28 	str	r6, [r1, #3880]	; 0xf28
   2d138:	e581bf1c 	str	fp, [r1, #3868]	; 0xf1c
   2d13c:	e581bf2c 	str	fp, [r1, #3884]	; 0xf2c
   2d140:	e5813f18 	str	r3, [r1, #3864]	; 0xf18
   2d144:	1a000029 	bne	2d1f0 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x188>
   2d148:	e59f6120 	ldr	r6, [pc, #288]	; 2d270 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x208>
   2d14c:	e1a02205 	lsl	r2, r5, #4
   2d150:	e1a0b002 	mov	fp, r2
   2d154:	e0862002 	add	r2, r6, r2
   2d158:	e5922004 	ldr	r2, [r2, #4]
   2d15c:	e3520035 	cmp	r2, #53	; 0x35
   2d160:	8a000022 	bhi	2d1f0 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x188>
   2d164:	e59f2108 	ldr	r2, [pc, #264]	; 2d274 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x20c>
   2d168:	e5921020 	ldr	r1, [r2, #32]
   2d16c:	e3510000 	cmp	r1, #0
   2d170:	1a000033 	bne	2d244 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1dc>
   2d174:	e7961105 	ldr	r1, [r6, r5, lsl #2]
   2d178:	e5824020 	str	r4, [r2, #32]
   2d17c:	e3510000 	cmp	r1, #0
   2d180:	e5841010 	str	r1, [r4, #16]
   2d184:	0a000033 	beq	2d258 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1f0>
   2d188:	e3550000 	cmp	r5, #0
   2d18c:	0a00001a 	beq	2d1fc <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x194>
   2d190:	e086600b 	add	r6, r6, fp
   2d194:	e5961004 	ldr	r1, [r6, #4]
   2d198:	e1a00008 	mov	r0, r8
   2d19c:	ebffe138 	bl	25684 <CGPIOPin::AssignPin(unsigned int)>
   2d1a0:	e5961008 	ldr	r1, [r6, #8]
   2d1a4:	e3a02001 	mov	r2, #1
   2d1a8:	e2811004 	add	r1, r1, #4
   2d1ac:	e1a00008 	mov	r0, r8
   2d1b0:	e6ef1071 	uxtb	r1, r1
   2d1b4:	ebffe153 	bl	25708 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d1b8:	e596100c 	ldr	r1, [r6, #12]
   2d1bc:	e1a00007 	mov	r0, r7
   2d1c0:	ebffe12f 	bl	25684 <CGPIOPin::AssignPin(unsigned int)>
   2d1c4:	e5961010 	ldr	r1, [r6, #16]
   2d1c8:	e3a02001 	mov	r2, #1
   2d1cc:	e2811004 	add	r1, r1, #4
   2d1d0:	e6ef1071 	uxtb	r1, r1
   2d1d4:	e1a00007 	mov	r0, r7
   2d1d8:	ebffe14a 	bl	25708 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d1dc:	e1a00007 	mov	r0, r7
   2d1e0:	e3a01002 	mov	r1, #2
   2d1e4:	ebffe35e 	bl	25f64 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2d1e8:	e3a03001 	mov	r3, #1
   2d1ec:	e5c43014 	strb	r3, [r4, #20]
   2d1f0:	e1a00004 	mov	r0, r4
   2d1f4:	e28dd00c 	add	sp, sp, #12
   2d1f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d1fc:	e1a0000a 	mov	r0, sl
   2d200:	e3a01020 	mov	r1, #32
   2d204:	e58d3004 	str	r3, [sp, #4]
   2d208:	ebffe11d 	bl	25684 <CGPIOPin::AssignPin(unsigned int)>
   2d20c:	e59d3004 	ldr	r3, [sp, #4]
   2d210:	e1a01005 	mov	r1, r5
   2d214:	e1a02003 	mov	r2, r3
   2d218:	e1a0000a 	mov	r0, sl
   2d21c:	ebffe139 	bl	25708 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d220:	e1a00009 	mov	r0, r9
   2d224:	e3a01021 	mov	r1, #33	; 0x21
   2d228:	ebffe115 	bl	25684 <CGPIOPin::AssignPin(unsigned int)>
   2d22c:	e59d3004 	ldr	r3, [sp, #4]
   2d230:	e1a01005 	mov	r1, r5
   2d234:	e1a02003 	mov	r2, r3
   2d238:	e1a00009 	mov	r0, r9
   2d23c:	ebffe131 	bl	25708 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d240:	eaffffd2 	b	2d190 <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x128>
   2d244:	e59f3020 	ldr	r3, [pc, #32]	; 2d26c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x204>
   2d248:	e3a020bd 	mov	r2, #189	; 0xbd
   2d24c:	e2831018 	add	r1, r3, #24
   2d250:	e2830034 	add	r0, r3, #52	; 0x34
   2d254:	ebffdd69 	bl	24800 <assertion_failed>
   2d258:	e59f300c 	ldr	r3, [pc, #12]	; 2d26c <CUartMaxiSerialDevice::CUartMaxiSerialDevice(CInterruptSystem*, bool, unsigned int)+0x204>
   2d25c:	e3a020c1 	mov	r2, #193	; 0xc1
   2d260:	e2831018 	add	r1, r3, #24
   2d264:	e283004c 	add	r0, r3, #76	; 0x4c
   2d268:	ebffdd64 	bl	24800 <assertion_failed>
   2d26c:	00045f10 	.word	0x00045f10
   2d270:	00048280 	.word	0x00048280
   2d274:	0004e1a0 	.word	0x0004e1a0

0002d278 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>:
   2d278:	e5d03014 	ldrb	r3, [r0, #20]
   2d27c:	e59fc16c 	ldr	ip, [pc, #364]	; 2d3f0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x178>
   2d280:	e3530000 	cmp	r3, #0
   2d284:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d288:	e1a04000 	mov	r4, r0
   2d28c:	e580c000 	str	ip, [r0]
   2d290:	0a00004a 	beq	2d3c0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x148>
   2d294:	e3a00001 	mov	r0, #1
   2d298:	e59f5154 	ldr	r5, [pc, #340]	; 2d3f4 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x17c>
   2d29c:	e594100c 	ldr	r1, [r4, #12]
   2d2a0:	e595201c 	ldr	r2, [r5, #28]
   2d2a4:	e3a03000 	mov	r3, #0
   2d2a8:	e1c22110 	bic	r2, r2, r0, lsl r1
   2d2ac:	e585201c 	str	r2, [r5, #28]
   2d2b0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d2b4:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d2b8:	e5942010 	ldr	r2, [r4, #16]
   2d2bc:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d2c0:	e5942010 	ldr	r2, [r4, #16]
   2d2c4:	e5823030 	str	r3, [r2, #48]	; 0x30
   2d2c8:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2d2cc:	e5943004 	ldr	r3, [r4, #4]
   2d2d0:	e3530000 	cmp	r3, #0
   2d2d4:	0a000004 	beq	2d2ec <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x74>
   2d2d8:	e5953010 	ldr	r3, [r5, #16]
   2d2dc:	e2433001 	sub	r3, r3, #1
   2d2e0:	e3530000 	cmp	r3, #0
   2d2e4:	e5853010 	str	r3, [r5, #16]
   2d2e8:	0a000026 	beq	2d388 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x110>
   2d2ec:	e2846068 	add	r6, r4, #104	; 0x68
   2d2f0:	e1a00006 	mov	r0, r6
   2d2f4:	e3a02001 	mov	r2, #1
   2d2f8:	e3a01000 	mov	r1, #0
   2d2fc:	e2847090 	add	r7, r4, #144	; 0x90
   2d300:	ebffe100 	bl	25708 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d304:	e1a00007 	mov	r0, r7
   2d308:	e3a02001 	mov	r2, #1
   2d30c:	e3a01000 	mov	r1, #0
   2d310:	ebffe0fc 	bl	25708 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2d314:	e59400b8 	ldr	r0, [r4, #184]	; 0xb8
   2d318:	e3500000 	cmp	r0, #0
   2d31c:	0a000002 	beq	2d32c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xb4>
   2d320:	e5d430c8 	ldrb	r3, [r4, #200]	; 0xc8
   2d324:	e3530000 	cmp	r3, #0
   2d328:	1a00002a 	bne	2d3d8 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x160>
   2d32c:	e59400cc 	ldr	r0, [r4, #204]	; 0xcc
   2d330:	e3500000 	cmp	r0, #0
   2d334:	0a000002 	beq	2d344 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xcc>
   2d338:	e5d430dc 	ldrb	r3, [r4, #220]	; 0xdc
   2d33c:	e3530000 	cmp	r3, #0
   2d340:	1a00001c 	bne	2d3b8 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x140>
   2d344:	e3a02000 	mov	r2, #0
   2d348:	e594300c 	ldr	r3, [r4, #12]
   2d34c:	e1a00007 	mov	r0, r7
   2d350:	e0855103 	add	r5, r5, r3, lsl #2
   2d354:	e5c42014 	strb	r2, [r4, #20]
   2d358:	e5852020 	str	r2, [r5, #32]
   2d35c:	ebffe0c1 	bl	25668 <CGPIOPin::~CGPIOPin()>
   2d360:	e1a00006 	mov	r0, r6
   2d364:	ebffe0bf 	bl	25668 <CGPIOPin::~CGPIOPin()>
   2d368:	e2840040 	add	r0, r4, #64	; 0x40
   2d36c:	ebffe0bd 	bl	25668 <CGPIOPin::~CGPIOPin()>
   2d370:	e2840018 	add	r0, r4, #24
   2d374:	ebffe0bb 	bl	25668 <CGPIOPin::~CGPIOPin()>
   2d378:	e1a00004 	mov	r0, r4
   2d37c:	ebffdf02 	bl	24f8c <CDevice::~CDevice()>
   2d380:	e1a00004 	mov	r0, r4
   2d384:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d388:	e5950014 	ldr	r0, [r5, #20]
   2d38c:	e3500000 	cmp	r0, #0
   2d390:	0a000012 	beq	2d3e0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x168>
   2d394:	e5d53018 	ldrb	r3, [r5, #24]
   2d398:	e3530000 	cmp	r3, #0
   2d39c:	1a00000b 	bne	2d3d0 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x158>
   2d3a0:	e3a01039 	mov	r1, #57	; 0x39
   2d3a4:	ebfffb99 	bl	2c210 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2d3a8:	e3a03000 	mov	r3, #0
   2d3ac:	e5853014 	str	r3, [r5, #20]
   2d3b0:	e5c53018 	strb	r3, [r5, #24]
   2d3b4:	eaffffcc 	b	2d2ec <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x74>
   2d3b8:	ebfff735 	bl	2b094 <operator delete[](void*)>
   2d3bc:	eaffffe0 	b	2d344 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xcc>
   2d3c0:	e2800090 	add	r0, r0, #144	; 0x90
   2d3c4:	ebffe0a7 	bl	25668 <CGPIOPin::~CGPIOPin()>
   2d3c8:	e2840068 	add	r0, r4, #104	; 0x68
   2d3cc:	eaffffe4 	b	2d364 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xec>
   2d3d0:	ebfffb1d 	bl	2c04c <CInterruptSystem::DisconnectFIQ()>
   2d3d4:	eafffff3 	b	2d3a8 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x130>
   2d3d8:	ebfff72d 	bl	2b094 <operator delete[](void*)>
   2d3dc:	eaffffd2 	b	2d32c <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0xb4>
   2d3e0:	e3a020ed 	mov	r2, #237	; 0xed
   2d3e4:	e28c1018 	add	r1, ip, #24
   2d3e8:	e28c0060 	add	r0, ip, #96	; 0x60
   2d3ec:	ebffdd03 	bl	24800 <assertion_failed>
   2d3f0:	00045f10 	.word	0x00045f10
   2d3f4:	0004e1a0 	.word	0x0004e1a0

0002d3f8 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>:
   2d3f8:	e92d4010 	push	{r4, lr}
   2d3fc:	e1a04000 	mov	r4, r0
   2d400:	ebffff9c 	bl	2d278 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()>
   2d404:	e1a00004 	mov	r0, r4
   2d408:	e59f1008 	ldr	r1, [pc, #8]	; 2d418 <CUartMaxiSerialDevice::~CUartMaxiSerialDevice()+0x20>
   2d40c:	ebfff726 	bl	2b0ac <operator delete(void*, unsigned int)>
   2d410:	e1a00004 	mov	r0, r4
   2d414:	e8bd8010 	pop	{r4, pc}
   2d418:	00004f30 	.word	0x00004f30

0002d41c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)>:
   2d41c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d420:	e5d05014 	ldrb	r5, [r0, #20]
   2d424:	e24dd014 	sub	sp, sp, #20
   2d428:	e3550000 	cmp	r5, #0
   2d42c:	1a000002 	bne	2d43c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x20>
   2d430:	e1a00005 	mov	r0, r5
   2d434:	e28dd014 	add	sp, sp, #20
   2d438:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d43c:	e1a08003 	mov	r8, r3
   2d440:	e1a07002 	mov	r7, r2
   2d444:	e3a03001 	mov	r3, #1
   2d448:	e59f2280 	ldr	r2, [pc, #640]	; 2d6d0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b4>
   2d44c:	e1a06001 	mov	r6, r1
   2d450:	e3a01002 	mov	r1, #2
   2d454:	e1a04000 	mov	r4, r0
   2d458:	eb0000ac 	bl	2d710 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)>
   2d45c:	ebffe8d4 	bl	277b4 <CMachineInfo::Get()>
   2d460:	e3a01002 	mov	r1, #2
   2d464:	ebffe802 	bl	27474 <CMachineInfo::GetClockRate(unsigned int) const>
   2d468:	e250b000 	subs	fp, r0, #0
   2d46c:	0a00007b 	beq	2d660 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x244>
   2d470:	e59f325c 	ldr	r3, [pc, #604]	; 2d6d4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2b8>
   2d474:	e2462f4b 	sub	r2, r6, #300	; 0x12c
   2d478:	e1520003 	cmp	r2, r3
   2d47c:	8a00007b 	bhi	2d670 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x254>
   2d480:	e1a09206 	lsl	r9, r6, #4
   2d484:	e1a01009 	mov	r1, r9
   2d488:	eb0041ff 	bl	3dc8c <__aeabi_uidiv>
   2d48c:	e59f3244 	ldr	r3, [pc, #580]	; 2d6d8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2bc>
   2d490:	e2402001 	sub	r2, r0, #1
   2d494:	e1520003 	cmp	r2, r3
   2d498:	e1a0a000 	mov	sl, r0
   2d49c:	8a000077 	bhi	2d680 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x264>
   2d4a0:	e1a01009 	mov	r1, r9
   2d4a4:	e1a0000b 	mov	r0, fp
   2d4a8:	eb004234 	bl	3dd80 <__aeabi_uidivmod>
   2d4ac:	e1a00181 	lsl	r0, r1, #3
   2d4b0:	e1a01006 	mov	r1, r6
   2d4b4:	eb0041f4 	bl	3dc8c <__aeabi_uidiv>
   2d4b8:	e2009001 	and	r9, r0, #1
   2d4bc:	e08990a0 	add	r9, r9, r0, lsr #1
   2d4c0:	e359003f 	cmp	r9, #63	; 0x3f
   2d4c4:	8a000071 	bhi	2d690 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x274>
   2d4c8:	e59f620c 	ldr	r6, [pc, #524]	; 2d6dc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c0>
   2d4cc:	e28410f8 	add	r1, r4, #248	; 0xf8
   2d4d0:	e28420bc 	add	r2, r4, #188	; 0xbc
   2d4d4:	e98d0042 	stmib	sp, {r1, r6}
   2d4d8:	e1a03007 	mov	r3, r7
   2d4dc:	e58d2000 	str	r2, [sp]
   2d4e0:	e28410b8 	add	r1, r4, #184	; 0xb8
   2d4e4:	e28420c8 	add	r2, r4, #200	; 0xc8
   2d4e8:	e1a00004 	mov	r0, r4
   2d4ec:	eb000264 	bl	2de84 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>
   2d4f0:	e2842b0a 	add	r2, r4, #10240	; 0x2800
   2d4f4:	e2822008 	add	r2, r2, #8
   2d4f8:	e28410d0 	add	r1, r4, #208	; 0xd0
   2d4fc:	e88d0006 	stm	sp, {r1, r2}
   2d500:	e58d6008 	str	r6, [sp, #8]
   2d504:	e1a00004 	mov	r0, r4
   2d508:	e1a03008 	mov	r3, r8
   2d50c:	e28420dc 	add	r2, r4, #220	; 0xdc
   2d510:	e28410cc 	add	r1, r4, #204	; 0xcc
   2d514:	eb00025a 	bl	2de84 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>
   2d518:	e5940004 	ldr	r0, [r4, #4]
   2d51c:	e59f61bc 	ldr	r6, [pc, #444]	; 2d6e0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c4>
   2d520:	e3500000 	cmp	r0, #0
   2d524:	0a000013 	beq	2d578 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x15c>
   2d528:	e5963010 	ldr	r3, [r6, #16]
   2d52c:	e3530000 	cmp	r3, #0
   2d530:	1a00003d 	bne	2d62c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x210>
   2d534:	e5d42008 	ldrb	r2, [r4, #8]
   2d538:	e5860014 	str	r0, [r6, #20]
   2d53c:	e3520000 	cmp	r2, #0
   2d540:	e5c62018 	strb	r2, [r6, #24]
   2d544:	1a000041 	bne	2d650 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x234>
   2d548:	e1a03002 	mov	r3, r2
   2d54c:	e3a01039 	mov	r1, #57	; 0x39
   2d550:	e59f218c 	ldr	r2, [pc, #396]	; 2d6e4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c8>
   2d554:	ebfffaf9 	bl	2c140 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2d558:	e5963008 	ldr	r3, [r6, #8]
   2d55c:	e2833001 	add	r3, r3, #1
   2d560:	e5863008 	str	r3, [r6, #8]
   2d564:	e5963010 	ldr	r3, [r6, #16]
   2d568:	e3530000 	cmp	r3, #0
   2d56c:	1a00004f 	bne	2d6b0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x294>
   2d570:	e3a03001 	mov	r3, #1
   2d574:	e5863010 	str	r3, [r6, #16]
   2d578:	e3a03000 	mov	r3, #0
   2d57c:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d580:	e5942010 	ldr	r2, [r4, #16]
   2d584:	e59f015c 	ldr	r0, [pc, #348]	; 2d6e8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2cc>
   2d588:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d58c:	e5942010 	ldr	r2, [r4, #16]
   2d590:	e5941004 	ldr	r1, [r4, #4]
   2d594:	e5820044 	str	r0, [r2, #68]	; 0x44
   2d598:	e5942010 	ldr	r2, [r4, #16]
   2d59c:	e1510003 	cmp	r1, r3
   2d5a0:	e582a024 	str	sl, [r2, #36]	; 0x24
   2d5a4:	e5942010 	ldr	r2, [r4, #16]
   2d5a8:	e5829028 	str	r9, [r2, #40]	; 0x28
   2d5ac:	0a000043 	beq	2d6c0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2a4>
   2d5b0:	e3a0e011 	mov	lr, #17
   2d5b4:	e3a0c070 	mov	ip, #112	; 0x70
   2d5b8:	e3a01e45 	mov	r1, #1104	; 0x450
   2d5bc:	e3a00001 	mov	r0, #1
   2d5c0:	e5942010 	ldr	r2, [r4, #16]
   2d5c4:	e582e034 	str	lr, [r2, #52]	; 0x34
   2d5c8:	e5942010 	ldr	r2, [r4, #16]
   2d5cc:	e582c02c 	str	ip, [r2, #44]	; 0x2c
   2d5d0:	e5942010 	ldr	r2, [r4, #16]
   2d5d4:	e5821038 	str	r1, [r2, #56]	; 0x38
   2d5d8:	e596201c 	ldr	r2, [r6, #28]
   2d5dc:	e594100c 	ldr	r1, [r4, #12]
   2d5e0:	e1822110 	orr	r2, r2, r0, lsl r1
   2d5e4:	e586201c 	str	r2, [r6, #28]
   2d5e8:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d5ec:	e5942010 	ldr	r2, [r4, #16]
   2d5f0:	e59f10f4 	ldr	r1, [pc, #244]	; 2d6ec <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d0>
   2d5f4:	e59f30f4 	ldr	r3, [pc, #244]	; 2d6f0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d4>
   2d5f8:	e5821030 	str	r1, [r2, #48]	; 0x30
   2d5fc:	e5933214 	ldr	r3, [r3, #532]	; 0x214
   2d600:	e3a07000 	mov	r7, #0
   2d604:	e586300c 	str	r3, [r6, #12]
   2d608:	ee077fba 	mcr	15, 0, r7, cr7, cr10, {5}
   2d60c:	ebffdf55 	bl	25368 <CDeviceNameService::Get()>
   2d610:	e1a03007 	mov	r3, r7
   2d614:	e1a02004 	mov	r2, r4
   2d618:	e59f10d4 	ldr	r1, [pc, #212]	; 2d6f4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2d8>
   2d61c:	ebffde97 	bl	25080 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   2d620:	e1a00005 	mov	r0, r5
   2d624:	e28dd014 	add	sp, sp, #20
   2d628:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d62c:	e5963014 	ldr	r3, [r6, #20]
   2d630:	e1500003 	cmp	r0, r3
   2d634:	0a000019 	beq	2d6a0 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x284>
   2d638:	e3a05000 	mov	r5, #0
   2d63c:	e594300c 	ldr	r3, [r4, #12]
   2d640:	e5c45014 	strb	r5, [r4, #20]
   2d644:	e0866103 	add	r6, r6, r3, lsl #2
   2d648:	e5865020 	str	r5, [r6, #32]
   2d64c:	eaffff77 	b	2d430 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x14>
   2d650:	e59f208c 	ldr	r2, [pc, #140]	; 2d6e4 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2c8>
   2d654:	e3a01039 	mov	r1, #57	; 0x39
   2d658:	ebfffa47 	bl	2bf7c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   2d65c:	eaffffc0 	b	2d564 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x148>
   2d660:	e59f1090 	ldr	r1, [pc, #144]	; 2d6f8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d664:	e59f2090 	ldr	r2, [pc, #144]	; 2d6fc <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e0>
   2d668:	e2810060 	add	r0, r1, #96	; 0x60
   2d66c:	ebffdc63 	bl	24800 <assertion_failed>
   2d670:	e59f1080 	ldr	r1, [pc, #128]	; 2d6f8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d674:	e59f2084 	ldr	r2, [pc, #132]	; 2d700 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e4>
   2d678:	e2810070 	add	r0, r1, #112	; 0x70
   2d67c:	ebffdc5f 	bl	24800 <assertion_failed>
   2d680:	e59f1070 	ldr	r1, [pc, #112]	; 2d6f8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d684:	e59f2078 	ldr	r2, [pc, #120]	; 2d704 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2e8>
   2d688:	e281009c 	add	r0, r1, #156	; 0x9c
   2d68c:	ebffdc5b 	bl	24800 <assertion_failed>
   2d690:	e59f1060 	ldr	r1, [pc, #96]	; 2d6f8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d694:	e59f206c 	ldr	r2, [pc, #108]	; 2d708 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2ec>
   2d698:	e28100c0 	add	r0, r1, #192	; 0xc0
   2d69c:	ebffdc57 	bl	24800 <assertion_failed>
   2d6a0:	e5d42008 	ldrb	r2, [r4, #8]
   2d6a4:	e5d63018 	ldrb	r3, [r6, #24]
   2d6a8:	e1520003 	cmp	r2, r3
   2d6ac:	1affffe1 	bne	2d638 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x21c>
   2d6b0:	e59f1040 	ldr	r1, [pc, #64]	; 2d6f8 <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2dc>
   2d6b4:	e59f2050 	ldr	r2, [pc, #80]	; 2d70c <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x2f0>
   2d6b8:	e28100d4 	add	r0, r1, #212	; 0xd4
   2d6bc:	ebffdc4f 	bl	24800 <assertion_failed>
   2d6c0:	e3a02060 	mov	r2, #96	; 0x60
   2d6c4:	e5943010 	ldr	r3, [r4, #16]
   2d6c8:	e583202c 	str	r2, [r3, #44]	; 0x2c
   2d6cc:	eaffffc6 	b	2d5ec <CUartMaxiSerialDevice::Initialize(unsigned int, unsigned int, unsigned int)+0x1d0>
   2d6d0:	01e84800 	.word	0x01e84800
   2d6d4:	003d07d4 	.word	0x003d07d4
   2d6d8:	0000fffe 	.word	0x0000fffe
   2d6dc:	00002710 	.word	0x00002710
   2d6e0:	0004e1a0 	.word	0x0004e1a0
   2d6e4:	0002de34 	.word	0x0002de34
   2d6e8:	000007ff 	.word	0x000007ff
   2d6ec:	00000301 	.word	0x00000301
   2d6f0:	2000b000 	.word	0x2000b000
   2d6f4:	00046024 	.word	0x00046024
   2d6f8:	00045f28 	.word	0x00045f28
   2d6fc:	00000115 	.word	0x00000115
   2d700:	00000117 	.word	0x00000117
   2d704:	0000011a 	.word	0x0000011a
   2d708:	0000011d 	.word	0x0000011d
   2d70c:	00000149 	.word	0x00000149

0002d710 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)>:
   2d710:	e92d4070 	push	{r4, r5, r6, lr}
   2d714:	e24dd028 	sub	sp, sp, #40	; 0x28
   2d718:	e1a06001 	mov	r6, r1
   2d71c:	e28d0008 	add	r0, sp, #8
   2d720:	e3a01000 	mov	r1, #0
   2d724:	e1a05002 	mov	r5, r2
   2d728:	e1a04003 	mov	r4, r3
   2d72c:	ebffdc54 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2d730:	e3a0300c 	mov	r3, #12
   2d734:	e28d2010 	add	r2, sp, #16
   2d738:	e58d3000 	str	r3, [sp]
   2d73c:	e59f102c 	ldr	r1, [pc, #44]	; 2d770 <CUartMaxiSerialDevice::SetClockRate(unsigned int, unsigned int, bool)+0x60>
   2d740:	e3a03018 	mov	r3, #24
   2d744:	e28d0008 	add	r0, sp, #8
   2d748:	e58d4024 	str	r4, [sp, #36]	; 0x24
   2d74c:	e58d601c 	str	r6, [sp, #28]
   2d750:	e58d5020 	str	r5, [sp, #32]
   2d754:	ebffdc56 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2d758:	e1a04000 	mov	r4, r0
   2d75c:	e28d0008 	add	r0, sp, #8
   2d760:	ebffdc4e 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   2d764:	e1a00004 	mov	r0, r4
   2d768:	e28dd028 	add	sp, sp, #40	; 0x28
   2d76c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d770:	00038002 	.word	0x00038002

0002d774 <CUartMaxiSerialDevice::Clear()>:
   2d774:	e3a03000 	mov	r3, #0
   2d778:	e58030bc 	str	r3, [r0, #188]	; 0xbc
   2d77c:	e58030f4 	str	r3, [r0, #244]	; 0xf4
   2d780:	e58030c0 	str	r3, [r0, #192]	; 0xc0
   2d784:	e58030e4 	str	r3, [r0, #228]	; 0xe4
   2d788:	e58030e8 	str	r3, [r0, #232]	; 0xe8
   2d78c:	e58030ec 	str	r3, [r0, #236]	; 0xec
   2d790:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   2d794:	e58030e0 	str	r3, [r0, #224]	; 0xe0
   2d798:	e12fff1e 	bx	lr

0002d79c <CUartMaxiSerialDevice::AvailableForWrite()>:
   2d79c:	e59030d4 	ldr	r3, [r0, #212]	; 0xd4
   2d7a0:	e59010d0 	ldr	r1, [r0, #208]	; 0xd0
   2d7a4:	e59020d8 	ldr	r2, [r0, #216]	; 0xd8
   2d7a8:	e59000d0 	ldr	r0, [r0, #208]	; 0xd0
   2d7ac:	e1530001 	cmp	r3, r1
   2d7b0:	80800002 	addhi	r0, r0, r2
   2d7b4:	e0400003 	sub	r0, r0, r3
   2d7b8:	e0420000 	sub	r0, r2, r0
   2d7bc:	e12fff1e 	bx	lr

0002d7c0 <CUartMaxiSerialDevice::WriteBase(unsigned int)>:
   2d7c0:	e1a03000 	mov	r3, r0
   2d7c4:	e59000cc 	ldr	r0, [r0, #204]	; 0xcc
   2d7c8:	e3500000 	cmp	r0, #0
   2d7cc:	012fff1e 	bxeq	lr
   2d7d0:	e59320d8 	ldr	r2, [r3, #216]	; 0xd8
   2d7d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2d7d8:	e3520000 	cmp	r2, #0
   2d7dc:	0a00001d 	beq	2d858 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x98>
   2d7e0:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d7e4:	e593c0d4 	ldr	ip, [r3, #212]	; 0xd4
   2d7e8:	e15e000c 	cmp	lr, ip
   2d7ec:	0a000008 	beq	2d814 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x54>
   2d7f0:	e593c0d4 	ldr	ip, [r3, #212]	; 0xd4
   2d7f4:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d7f8:	e15c000e 	cmp	ip, lr
   2d7fc:	2a000011 	bcs	2d848 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x88>
   2d800:	e593e0d0 	ldr	lr, [r3, #208]	; 0xd0
   2d804:	e2422001 	sub	r2, r2, #1
   2d808:	e35c0000 	cmp	ip, #0
   2d80c:	0152000e 	cmpeq	r2, lr
   2d810:	0a000010 	beq	2d858 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x98>
   2d814:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d818:	e7c01002 	strb	r1, [r0, r2]
   2d81c:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d820:	e59310d8 	ldr	r1, [r3, #216]	; 0xd8
   2d824:	e2822001 	add	r2, r2, #1
   2d828:	e58320d0 	str	r2, [r3, #208]	; 0xd0
   2d82c:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d830:	e1520001 	cmp	r2, r1
   2d834:	23a02000 	movcs	r2, #0
   2d838:	23a00001 	movcs	r0, #1
   2d83c:	258320d0 	strcs	r2, [r3, #208]	; 0xd0
   2d840:	33a00001 	movcc	r0, #1
   2d844:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2d848:	e59320d0 	ldr	r2, [r3, #208]	; 0xd0
   2d84c:	e04cc002 	sub	ip, ip, r2
   2d850:	e35c0001 	cmp	ip, #1
   2d854:	8affffee 	bhi	2d814 <CUartMaxiSerialDevice::WriteBase(unsigned int)+0x54>
   2d858:	e59320f4 	ldr	r2, [r3, #244]	; 0xf4
   2d85c:	e3a00000 	mov	r0, #0
   2d860:	e2822001 	add	r2, r2, #1
   2d864:	e58320f4 	str	r2, [r3, #244]	; 0xf4
   2d868:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002d86c <CUartMaxiSerialDevice::Write(unsigned int)>:
   2d86c:	e92d4070 	push	{r4, r5, r6, lr}
   2d870:	e1a05000 	mov	r5, r0
   2d874:	ebffffd1 	bl	2d7c0 <CUartMaxiSerialDevice::WriteBase(unsigned int)>
   2d878:	e1a04000 	mov	r4, r0
   2d87c:	e1a00005 	mov	r0, r5
   2d880:	eb00001e 	bl	2d900 <CUartMaxiSerialDevice::TxPumpPrime()>
   2d884:	e1a00004 	mov	r0, r4
   2d888:	e8bd8070 	pop	{r4, r5, r6, pc}

0002d88c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>:
   2d88c:	e3520000 	cmp	r2, #0
   2d890:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d894:	e1a07000 	mov	r7, r0
   2d898:	0a00000c 	beq	2d8d0 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x44>
   2d89c:	e1a04001 	mov	r4, r1
   2d8a0:	e3a05000 	mov	r5, #0
   2d8a4:	e0816002 	add	r6, r1, r2
   2d8a8:	e4d41001 	ldrb	r1, [r4], #1
   2d8ac:	e1a00007 	mov	r0, r7
   2d8b0:	ebffffc2 	bl	2d7c0 <CUartMaxiSerialDevice::WriteBase(unsigned int)>
   2d8b4:	e1540006 	cmp	r4, r6
   2d8b8:	e0855000 	add	r5, r5, r0
   2d8bc:	1afffff9 	bne	2d8a8 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x1c>
   2d8c0:	e1a00007 	mov	r0, r7
   2d8c4:	eb00000d 	bl	2d900 <CUartMaxiSerialDevice::TxPumpPrime()>
   2d8c8:	e1a00005 	mov	r0, r5
   2d8cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d8d0:	e1a05002 	mov	r5, r2
   2d8d4:	eafffff9 	b	2d8c0 <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)+0x34>

0002d8d8 <CUartMaxiSerialDevice::WriteStr(char const*)>:
   2d8d8:	e92d4070 	push	{r4, r5, r6, lr}
   2d8dc:	e1a05000 	mov	r5, r0
   2d8e0:	e1a00001 	mov	r0, r1
   2d8e4:	e1a04001 	mov	r4, r1
   2d8e8:	ebfff1e3 	bl	2a07c <strlen>
   2d8ec:	e1a01004 	mov	r1, r4
   2d8f0:	e1a02000 	mov	r2, r0
   2d8f4:	e1a00005 	mov	r0, r5
   2d8f8:	e8bd4070 	pop	{r4, r5, r6, lr}
   2d8fc:	eaffffe2 	b	2d88c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>

0002d900 <CUartMaxiSerialDevice::TxPumpPrime()>:
   2d900:	e92d4010 	push	{r4, lr}
   2d904:	e1a04000 	mov	r4, r0
   2d908:	e3a00001 	mov	r0, #1
   2d90c:	ebfff90a 	bl	2bd3c <EnterCritical>
   2d910:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
   2d914:	e59420d4 	ldr	r2, [r4, #212]	; 0xd4
   2d918:	e1520003 	cmp	r2, r3
   2d91c:	0a000020 	beq	2d9a4 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2d920:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   2d924:	e3530000 	cmp	r3, #0
   2d928:	0a00001d 	beq	2d9a4 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2d92c:	e3a03000 	mov	r3, #0
   2d930:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   2d934:	e59f1088 	ldr	r1, [pc, #136]	; 2d9c4 <CUartMaxiSerialDevice::TxPumpPrime()+0xc4>
   2d938:	e5912018 	ldr	r2, [r1, #24]
   2d93c:	e2122020 	ands	r2, r2, #32
   2d940:	0a000007 	beq	2d964 <CUartMaxiSerialDevice::TxPumpPrime()+0x64>
   2d944:	ea000018 	b	2d9ac <CUartMaxiSerialDevice::TxPumpPrime()+0xac>
   2d948:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
   2d94c:	e3530000 	cmp	r3, #0
   2d950:	0a000013 	beq	2d9a4 <CUartMaxiSerialDevice::TxPumpPrime()+0xa4>
   2d954:	ee072f9a 	mcr	15, 0, r2, cr7, cr10, {4}
   2d958:	e5913018 	ldr	r3, [r1, #24]
   2d95c:	e3130020 	tst	r3, #32
   2d960:	1a000011 	bne	2d9ac <CUartMaxiSerialDevice::TxPumpPrime()+0xac>
   2d964:	e59400d4 	ldr	r0, [r4, #212]	; 0xd4
   2d968:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   2d96c:	e594c0cc 	ldr	ip, [r4, #204]	; 0xcc
   2d970:	e2833001 	add	r3, r3, #1
   2d974:	e7dc0000 	ldrb	r0, [ip, r0]
   2d978:	e58430d4 	str	r3, [r4, #212]	; 0xd4
   2d97c:	e594c0d4 	ldr	ip, [r4, #212]	; 0xd4
   2d980:	e59430d8 	ldr	r3, [r4, #216]	; 0xd8
   2d984:	e15c0003 	cmp	ip, r3
   2d988:	258420d4 	strcs	r2, [r4, #212]	; 0xd4
   2d98c:	e5810000 	str	r0, [r1]
   2d990:	ee072fba 	mcr	15, 0, r2, cr7, cr10, {5}
   2d994:	e59400d0 	ldr	r0, [r4, #208]	; 0xd0
   2d998:	e59430d4 	ldr	r3, [r4, #212]	; 0xd4
   2d99c:	e1500003 	cmp	r0, r3
   2d9a0:	1affffe8 	bne	2d948 <CUartMaxiSerialDevice::TxPumpPrime()+0x48>
   2d9a4:	e8bd4010 	pop	{r4, lr}
   2d9a8:	eafff90e 	b	2bde8 <LeaveCritical>
   2d9ac:	e59f2010 	ldr	r2, [pc, #16]	; 2d9c4 <CUartMaxiSerialDevice::TxPumpPrime()+0xc4>
   2d9b0:	e8bd4010 	pop	{r4, lr}
   2d9b4:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   2d9b8:	e3833020 	orr	r3, r3, #32
   2d9bc:	e5823038 	str	r3, [r2, #56]	; 0x38
   2d9c0:	eafff908 	b	2bde8 <LeaveCritical>
   2d9c4:	20201000 	.word	0x20201000

0002d9c8 <CUartMaxiSerialDevice::Read()>:
   2d9c8:	e59010b8 	ldr	r1, [r0, #184]	; 0xb8
   2d9cc:	e1a03000 	mov	r3, r0
   2d9d0:	e3510000 	cmp	r1, #0
   2d9d4:	0a000010 	beq	2da1c <CUartMaxiSerialDevice::Read()+0x54>
   2d9d8:	e59000bc 	ldr	r0, [r0, #188]	; 0xbc
   2d9dc:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
   2d9e0:	e1500002 	cmp	r0, r2
   2d9e4:	0a00000c 	beq	2da1c <CUartMaxiSerialDevice::Read()+0x54>
   2d9e8:	e59300c0 	ldr	r0, [r3, #192]	; 0xc0
   2d9ec:	e59320c0 	ldr	r2, [r3, #192]	; 0xc0
   2d9f0:	e7d10000 	ldrb	r0, [r1, r0]
   2d9f4:	e2822001 	add	r2, r2, #1
   2d9f8:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   2d9fc:	e59310c0 	ldr	r1, [r3, #192]	; 0xc0
   2da00:	e59320c4 	ldr	r2, [r3, #196]	; 0xc4
   2da04:	e1510002 	cmp	r1, r2
   2da08:	3a000002 	bcc	2da18 <CUartMaxiSerialDevice::Read()+0x50>
   2da0c:	e3a02000 	mov	r2, #0
   2da10:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   2da14:	e12fff1e 	bx	lr
   2da18:	e12fff1e 	bx	lr
   2da1c:	e3e00000 	mvn	r0, #0
   2da20:	e12fff1e 	bx	lr

0002da24 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)>:
   2da24:	e1a03000 	mov	r3, r0
   2da28:	e59f0090 	ldr	r0, [pc, #144]	; 2dac0 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x9c>
   2da2c:	e92d4010 	push	{r4, lr}
   2da30:	e593e0b8 	ldr	lr, [r3, #184]	; 0xb8
   2da34:	e590c040 	ldr	ip, [r0, #64]	; 0x40
   2da38:	e59f0084 	ldr	r0, [pc, #132]	; 2dac4 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0xa0>
   2da3c:	e35e0000 	cmp	lr, #0
   2da40:	e580c004 	str	ip, [r0, #4]
   2da44:	0a00001b 	beq	2dab8 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x94>
   2da48:	e59300bc 	ldr	r0, [r3, #188]	; 0xbc
   2da4c:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2da50:	e3520000 	cmp	r2, #0
   2da54:	1150000c 	cmpne	r0, ip
   2da58:	13a00001 	movne	r0, #1
   2da5c:	03a00000 	moveq	r0, #0
   2da60:	08bd8010 	popeq	{r4, pc}
   2da64:	e3a00000 	mov	r0, #0
   2da68:	e1a04000 	mov	r4, r0
   2da6c:	e2411001 	sub	r1, r1, #1
   2da70:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2da74:	e2800001 	add	r0, r0, #1
   2da78:	e7dec00c 	ldrb	ip, [lr, ip]
   2da7c:	e5e1c001 	strb	ip, [r1, #1]!
   2da80:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2da84:	e593e0c4 	ldr	lr, [r3, #196]	; 0xc4
   2da88:	e28cc001 	add	ip, ip, #1
   2da8c:	e583c0c0 	str	ip, [r3, #192]	; 0xc0
   2da90:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2da94:	e15c000e 	cmp	ip, lr
   2da98:	258340c0 	strcs	r4, [r3, #192]	; 0xc0
   2da9c:	e593e0bc 	ldr	lr, [r3, #188]	; 0xbc
   2daa0:	e593c0c0 	ldr	ip, [r3, #192]	; 0xc0
   2daa4:	e15e000c 	cmp	lr, ip
   2daa8:	11520000 	cmpne	r2, r0
   2daac:	98bd8010 	popls	{r4, pc}
   2dab0:	e593e0b8 	ldr	lr, [r3, #184]	; 0xb8
   2dab4:	eaffffed 	b	2da70 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)+0x4c>
   2dab8:	e1a0000e 	mov	r0, lr
   2dabc:	e8bd8010 	pop	{r4, pc}
   2dac0:	20201000 	.word	0x20201000
   2dac4:	0004e1a0 	.word	0x0004e1a0

0002dac8 <CUartMaxiSerialDevice::CanGet()>:
   2dac8:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2dacc:	e59000c0 	ldr	r0, [r0, #192]	; 0xc0
   2dad0:	e0520000 	subs	r0, r2, r0
   2dad4:	13a00001 	movne	r0, #1
   2dad8:	e12fff1e 	bx	lr

0002dadc <CUartMaxiSerialDevice::Peek()>:
   2dadc:	e59030b8 	ldr	r3, [r0, #184]	; 0xb8
   2dae0:	e3530000 	cmp	r3, #0
   2dae4:	0a000006 	beq	2db04 <CUartMaxiSerialDevice::Peek()+0x28>
   2dae8:	e59010bc 	ldr	r1, [r0, #188]	; 0xbc
   2daec:	e59020c0 	ldr	r2, [r0, #192]	; 0xc0
   2daf0:	e1510002 	cmp	r1, r2
   2daf4:	0a000002 	beq	2db04 <CUartMaxiSerialDevice::Peek()+0x28>
   2daf8:	e59020c0 	ldr	r2, [r0, #192]	; 0xc0
   2dafc:	e7d30002 	ldrb	r0, [r3, r2]
   2db00:	e12fff1e 	bx	lr
   2db04:	e3e00000 	mvn	r0, #0
   2db08:	e12fff1e 	bx	lr

0002db0c <CUartMaxiSerialDevice::AvailableForRead()>:
   2db0c:	e59030c0 	ldr	r3, [r0, #192]	; 0xc0
   2db10:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2db14:	e1530002 	cmp	r3, r2
   2db18:	859020bc 	ldrhi	r2, [r0, #188]	; 0xbc
   2db1c:	859000c4 	ldrhi	r0, [r0, #196]	; 0xc4
   2db20:	959000bc 	ldrls	r0, [r0, #188]	; 0xbc
   2db24:	80820000 	addhi	r0, r2, r0
   2db28:	e0400003 	sub	r0, r0, r3
   2db2c:	e12fff1e 	bx	lr

0002db30 <CUartMaxiSerialDevice::GetOptions() const>:
   2db30:	e2800901 	add	r0, r0, #16384	; 0x4000
   2db34:	e5900f18 	ldr	r0, [r0, #3864]	; 0xf18
   2db38:	e12fff1e 	bx	lr

0002db3c <CUartMaxiSerialDevice::SetOptions(unsigned int)>:
   2db3c:	e2800901 	add	r0, r0, #16384	; 0x4000
   2db40:	e5801f18 	str	r1, [r0, #3864]	; 0xf18
   2db44:	e12fff1e 	bx	lr

0002db48 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   2db48:	e5903004 	ldr	r3, [r0, #4]
   2db4c:	e92d4010 	push	{r4, lr}
   2db50:	e3530000 	cmp	r3, #0
   2db54:	0a00000e 	beq	2db94 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
   2db58:	e2800901 	add	r0, r0, #16384	; 0x4000
   2db5c:	e5903f1c 	ldr	r3, [r0, #3868]	; 0xf1c
   2db60:	e3530000 	cmp	r3, #0
   2db64:	1a00000e 	bne	2dba4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x5c>
   2db68:	e3510000 	cmp	r1, #0
   2db6c:	0a000010 	beq	2dbb4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x6c>
   2db70:	e1d130d0 	ldrsb	r3, [r1]
   2db74:	e3530000 	cmp	r3, #0
   2db78:	0a000011 	beq	2dbc4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x7c>
   2db7c:	e3520000 	cmp	r2, #0
   2db80:	0a000013 	beq	2dbd4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
   2db84:	e5802f24 	str	r2, [r0, #3876]	; 0xf24
   2db88:	e5801f20 	str	r1, [r0, #3872]	; 0xf20
   2db8c:	e5801f1c 	str	r1, [r0, #3868]	; 0xf1c
   2db90:	e8bd8010 	pop	{r4, pc}
   2db94:	e59f1048 	ldr	r1, [pc, #72]	; 2dbe4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2db98:	e59f2048 	ldr	r2, [pc, #72]	; 2dbe8 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa0>
   2db9c:	e2810f41 	add	r0, r1, #260	; 0x104
   2dba0:	ebffdb16 	bl	24800 <assertion_failed>
   2dba4:	e59f1038 	ldr	r1, [pc, #56]	; 2dbe4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2dba8:	e59f203c 	ldr	r2, [pc, #60]	; 2dbec <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa4>
   2dbac:	e2810f47 	add	r0, r1, #284	; 0x11c
   2dbb0:	ebffdb12 	bl	24800 <assertion_failed>
   2dbb4:	e59f1028 	ldr	r1, [pc, #40]	; 2dbe4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2dbb8:	e3a02f87 	mov	r2, #540	; 0x21c
   2dbbc:	e2810f4b 	add	r0, r1, #300	; 0x12c
   2dbc0:	ebffdb0e 	bl	24800 <assertion_failed>
   2dbc4:	e59f1018 	ldr	r1, [pc, #24]	; 2dbe4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2dbc8:	e59f2020 	ldr	r2, [pc, #32]	; 2dbf0 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xa8>
   2dbcc:	e2810f4e 	add	r0, r1, #312	; 0x138
   2dbd0:	ebffdb0a 	bl	24800 <assertion_failed>
   2dbd4:	e59f1008 	ldr	r1, [pc, #8]	; 2dbe4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   2dbd8:	e59f2014 	ldr	r2, [pc, #20]	; 2dbf4 <CUartMaxiSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0xac>
   2dbdc:	e2810f52 	add	r0, r1, #328	; 0x148
   2dbe0:	ebffdb06 	bl	24800 <assertion_failed>
   2dbe4:	00045f28 	.word	0x00045f28
   2dbe8:	00000219 	.word	0x00000219
   2dbec:	0000021a 	.word	0x0000021a
   2dbf0:	0000021d 	.word	0x0000021d
   2dbf4:	0000021e 	.word	0x0000021e

0002dbf8 <CUartMaxiSerialDevice::InterruptHandler()>:
   2dbf8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2dbfc:	e3a0e000 	mov	lr, #0
   2dc00:	ee07ef9a 	mcr	15, 0, lr, cr7, cr10, {4}
   2dc04:	e59f3224 	ldr	r3, [pc, #548]	; 2de30 <CUartMaxiSerialDevice::InterruptHandler()+0x238>
   2dc08:	e1a0700e 	mov	r7, lr
   2dc0c:	e1a01003 	mov	r1, r3
   2dc10:	e3a04003 	mov	r4, #3
   2dc14:	e3a08002 	mov	r8, #2
   2dc18:	e3a06001 	mov	r6, #1
   2dc1c:	e3a05004 	mov	r5, #4
   2dc20:	e5932040 	ldr	r2, [r3, #64]	; 0x40
   2dc24:	e280c901 	add	ip, r0, #16384	; 0x4000
   2dc28:	e5832044 	str	r2, [r3, #68]	; 0x44
   2dc2c:	e5913018 	ldr	r3, [r1, #24]
   2dc30:	e3130010 	tst	r3, #16
   2dc34:	1a000036 	bne	2dd14 <CUartMaxiSerialDevice::InterruptHandler()+0x11c>
   2dc38:	e5913000 	ldr	r3, [r1]
   2dc3c:	e3130b01 	tst	r3, #1024	; 0x400
   2dc40:	0a000060 	beq	2ddc8 <CUartMaxiSerialDevice::InterruptHandler()+0x1d0>
   2dc44:	e59020ec 	ldr	r2, [r0, #236]	; 0xec
   2dc48:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2dc4c:	e2822001 	add	r2, r2, #1
   2dc50:	e3590000 	cmp	r9, #0
   2dc54:	e58020ec 	str	r2, [r0, #236]	; 0xec
   2dc58:	05c060c9 	strbeq	r6, [r0, #201]	; 0xc9
   2dc5c:	e59020c4 	ldr	r2, [r0, #196]	; 0xc4
   2dc60:	e3520000 	cmp	r2, #0
   2dc64:	0a000050 	beq	2ddac <CUartMaxiSerialDevice::InterruptHandler()+0x1b4>
   2dc68:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2dc6c:	e59090c0 	ldr	r9, [r0, #192]	; 0xc0
   2dc70:	e15a0009 	cmp	sl, r9
   2dc74:	0a000008 	beq	2dc9c <CUartMaxiSerialDevice::InterruptHandler()+0xa4>
   2dc78:	e59090c0 	ldr	r9, [r0, #192]	; 0xc0
   2dc7c:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2dc80:	e159000a 	cmp	r9, sl
   2dc84:	2a000044 	bcs	2dd9c <CUartMaxiSerialDevice::InterruptHandler()+0x1a4>
   2dc88:	e590a0bc 	ldr	sl, [r0, #188]	; 0xbc
   2dc8c:	e2422001 	sub	r2, r2, #1
   2dc90:	e3590000 	cmp	r9, #0
   2dc94:	0152000a 	cmpeq	r2, sl
   2dc98:	0a000043 	beq	2ddac <CUartMaxiSerialDevice::InterruptHandler()+0x1b4>
   2dc9c:	e59020b8 	ldr	r2, [r0, #184]	; 0xb8
   2dca0:	e3520000 	cmp	r2, #0
   2dca4:	0a000040 	beq	2ddac <CUartMaxiSerialDevice::InterruptHandler()+0x1b4>
   2dca8:	e59090bc 	ldr	r9, [r0, #188]	; 0xbc
   2dcac:	e7c23009 	strb	r3, [r2, r9]
   2dcb0:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2dcb4:	e59090c4 	ldr	r9, [r0, #196]	; 0xc4
   2dcb8:	e2822001 	add	r2, r2, #1
   2dcbc:	e58020bc 	str	r2, [r0, #188]	; 0xbc
   2dcc0:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2dcc4:	e1520009 	cmp	r2, r9
   2dcc8:	e59c2f1c 	ldr	r2, [ip, #3868]	; 0xf1c
   2dccc:	258070bc 	strcs	r7, [r0, #188]	; 0xbc
   2dcd0:	e3520000 	cmp	r2, #0
   2dcd4:	0affffd4 	beq	2dc2c <CUartMaxiSerialDevice::InterruptHandler()+0x34>
   2dcd8:	e59c9f20 	ldr	r9, [ip, #3872]	; 0xf20
   2dcdc:	e6af3073 	sxtb	r3, r3
   2dce0:	e1d9a0d0 	ldrsb	sl, [r9]
   2dce4:	e15a0003 	cmp	sl, r3
   2dce8:	158c2f20 	strne	r2, [ip, #3872]	; 0xf20
   2dcec:	0a000047 	beq	2de10 <CUartMaxiSerialDevice::InterruptHandler()+0x218>
   2dcf0:	e59030e4 	ldr	r3, [r0, #228]	; 0xe4
   2dcf4:	e5d020c9 	ldrb	r2, [r0, #201]	; 0xc9
   2dcf8:	e2833001 	add	r3, r3, #1
   2dcfc:	e58030e4 	str	r3, [r0, #228]	; 0xe4
   2dd00:	e5913018 	ldr	r3, [r1, #24]
   2dd04:	e3520000 	cmp	r2, #0
   2dd08:	05c040c9 	strbeq	r4, [r0, #201]	; 0xc9
   2dd0c:	e3130010 	tst	r3, #16
   2dd10:	0affffc8 	beq	2dc38 <CUartMaxiSerialDevice::InterruptHandler()+0x40>
   2dd14:	e59f1114 	ldr	r1, [pc, #276]	; 2de30 <CUartMaxiSerialDevice::InterruptHandler()+0x238>
   2dd18:	ea00000c 	b	2dd50 <CUartMaxiSerialDevice::InterruptHandler()+0x158>
   2dd1c:	e59020cc 	ldr	r2, [r0, #204]	; 0xcc
   2dd20:	e3520000 	cmp	r2, #0
   2dd24:	0a000010 	beq	2dd6c <CUartMaxiSerialDevice::InterruptHandler()+0x174>
   2dd28:	e590c0d4 	ldr	ip, [r0, #212]	; 0xd4
   2dd2c:	e7d2200c 	ldrb	r2, [r2, ip]
   2dd30:	e5812000 	str	r2, [r1]
   2dd34:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2dd38:	e590c0d8 	ldr	ip, [r0, #216]	; 0xd8
   2dd3c:	e2822001 	add	r2, r2, #1
   2dd40:	e58020d4 	str	r2, [r0, #212]	; 0xd4
   2dd44:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2dd48:	e152000c 	cmp	r2, ip
   2dd4c:	2a000035 	bcs	2de28 <CUartMaxiSerialDevice::InterruptHandler()+0x230>
   2dd50:	e5913018 	ldr	r3, [r1, #24]
   2dd54:	e2133020 	ands	r3, r3, #32
   2dd58:	1a000007 	bne	2dd7c <CUartMaxiSerialDevice::InterruptHandler()+0x184>
   2dd5c:	e590c0d0 	ldr	ip, [r0, #208]	; 0xd0
   2dd60:	e59020d4 	ldr	r2, [r0, #212]	; 0xd4
   2dd64:	e15c0002 	cmp	ip, r2
   2dd68:	1affffeb 	bne	2dd1c <CUartMaxiSerialDevice::InterruptHandler()+0x124>
   2dd6c:	e59f20bc 	ldr	r2, [pc, #188]	; 2de30 <CUartMaxiSerialDevice::InterruptHandler()+0x238>
   2dd70:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   2dd74:	e3c33020 	bic	r3, r3, #32
   2dd78:	e5823038 	str	r3, [r2, #56]	; 0x38
   2dd7c:	e35e0000 	cmp	lr, #0
   2dd80:	0a000002 	beq	2dd90 <CUartMaxiSerialDevice::InterruptHandler()+0x198>
   2dd84:	e2800901 	add	r0, r0, #16384	; 0x4000
   2dd88:	e5903f24 	ldr	r3, [r0, #3876]	; 0xf24
   2dd8c:	e12fff33 	blx	r3
   2dd90:	e3a03000 	mov	r3, #0
   2dd94:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   2dd98:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2dd9c:	e59020bc 	ldr	r2, [r0, #188]	; 0xbc
   2dda0:	e0499002 	sub	r9, r9, r2
   2dda4:	e3590001 	cmp	r9, #1
   2dda8:	8affffbb 	bhi	2dc9c <CUartMaxiSerialDevice::InterruptHandler()+0xa4>
   2ddac:	e59030f0 	ldr	r3, [r0, #240]	; 0xf0
   2ddb0:	e5d020c9 	ldrb	r2, [r0, #201]	; 0xc9
   2ddb4:	e2833001 	add	r3, r3, #1
   2ddb8:	e3520000 	cmp	r2, #0
   2ddbc:	e58030f0 	str	r3, [r0, #240]	; 0xf0
   2ddc0:	05c050c9 	strbeq	r5, [r0, #201]	; 0xc9
   2ddc4:	eaffff98 	b	2dc2c <CUartMaxiSerialDevice::InterruptHandler()+0x34>
   2ddc8:	e3130b02 	tst	r3, #2048	; 0x800
   2ddcc:	0a000006 	beq	2ddec <CUartMaxiSerialDevice::InterruptHandler()+0x1f4>
   2ddd0:	e59020e8 	ldr	r2, [r0, #232]	; 0xe8
   2ddd4:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2ddd8:	e2822001 	add	r2, r2, #1
   2dddc:	e3590000 	cmp	r9, #0
   2dde0:	e58020e8 	str	r2, [r0, #232]	; 0xe8
   2dde4:	05c080c9 	strbeq	r8, [r0, #201]	; 0xc9
   2dde8:	eaffff9b 	b	2dc5c <CUartMaxiSerialDevice::InterruptHandler()+0x64>
   2ddec:	e3130c01 	tst	r3, #256	; 0x100
   2ddf0:	0affff99 	beq	2dc5c <CUartMaxiSerialDevice::InterruptHandler()+0x64>
   2ddf4:	e59020e4 	ldr	r2, [r0, #228]	; 0xe4
   2ddf8:	e5d090c9 	ldrb	r9, [r0, #201]	; 0xc9
   2ddfc:	e2822001 	add	r2, r2, #1
   2de00:	e3590000 	cmp	r9, #0
   2de04:	e58020e4 	str	r2, [r0, #228]	; 0xe4
   2de08:	05c040c9 	strbeq	r4, [r0, #201]	; 0xc9
   2de0c:	eaffff92 	b	2dc5c <CUartMaxiSerialDevice::InterruptHandler()+0x64>
   2de10:	e2893001 	add	r3, r9, #1
   2de14:	e58c3f20 	str	r3, [ip, #3872]	; 0xf20
   2de18:	e1d930d1 	ldrsb	r3, [r9, #1]
   2de1c:	e3530000 	cmp	r3, #0
   2de20:	03a0e001 	moveq	lr, #1
   2de24:	eaffffb1 	b	2dcf0 <CUartMaxiSerialDevice::InterruptHandler()+0xf8>
   2de28:	e58030d4 	str	r3, [r0, #212]	; 0xd4
   2de2c:	eaffffc7 	b	2dd50 <CUartMaxiSerialDevice::InterruptHandler()+0x158>
   2de30:	20201000 	.word	0x20201000

0002de34 <CUartMaxiSerialDevice::InterruptStub(void*)>:
   2de34:	e59f3040 	ldr	r3, [pc, #64]	; 2de7c <CUartMaxiSerialDevice::InterruptStub(void*)+0x48>
   2de38:	e3a01000 	mov	r1, #0
   2de3c:	e5932000 	ldr	r2, [r3]
   2de40:	e2822001 	add	r2, r2, #1
   2de44:	e5832000 	str	r2, [r3]
   2de48:	ee071fba 	mcr	15, 0, r1, cr7, cr10, {5}
   2de4c:	e593201c 	ldr	r2, [r3, #28]
   2de50:	e3120001 	tst	r2, #1
   2de54:	012fff1e 	bxeq	lr
   2de58:	e5930020 	ldr	r0, [r3, #32]
   2de5c:	e1500001 	cmp	r0, r1
   2de60:	0a000000 	beq	2de68 <CUartMaxiSerialDevice::InterruptStub(void*)+0x34>
   2de64:	eaffff63 	b	2dbf8 <CUartMaxiSerialDevice::InterruptHandler()>
   2de68:	e59f1010 	ldr	r1, [pc, #16]	; 2de80 <CUartMaxiSerialDevice::InterruptStub(void*)+0x4c>
   2de6c:	e92d4010 	push	{r4, lr}
   2de70:	e3a02fa9 	mov	r2, #676	; 0x2a4
   2de74:	e2810f56 	add	r0, r1, #344	; 0x158
   2de78:	ebffda60 	bl	24800 <assertion_failed>
   2de7c:	0004e1a0 	.word	0x0004e1a0
   2de80:	00045f28 	.word	0x00045f28

0002de84 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)>:
   2de84:	e5910000 	ldr	r0, [r1]
   2de88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2de8c:	e3500000 	cmp	r0, #0
   2de90:	e1a06001 	mov	r6, r1
   2de94:	e1a07002 	mov	r7, r2
   2de98:	e1a05003 	mov	r5, r3
   2de9c:	e59d4018 	ldr	r4, [sp, #24]
   2dea0:	0a00000c 	beq	2ded8 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x54>
   2dea4:	e5943008 	ldr	r3, [r4, #8]
   2dea8:	e1530005 	cmp	r3, r5
   2deac:	0a00001d 	beq	2df28 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0xa4>
   2deb0:	e5d23000 	ldrb	r3, [r2]
   2deb4:	e3530000 	cmp	r3, #0
   2deb8:	0a000006 	beq	2ded8 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x54>
   2debc:	ebfff474 	bl	2b094 <operator delete[](void*)>
   2dec0:	e3a03000 	mov	r3, #0
   2dec4:	e5863000 	str	r3, [r6]
   2dec8:	e5c73000 	strb	r3, [r7]
   2decc:	e5843000 	str	r3, [r4]
   2ded0:	e5843008 	str	r3, [r4, #8]
   2ded4:	e5843004 	str	r3, [r4, #4]
   2ded8:	e3550000 	cmp	r5, #0
   2dedc:	1a000007 	bne	2df00 <CUartMaxiSerialDevice::AllocateBuffer(unsigned char*&, bool&, unsigned int, RingBufferPosn&, unsigned char*, unsigned int)+0x7c>
   2dee0:	e59d301c 	ldr	r3, [sp, #28]
   2dee4:	e5863000 	str	r3, [r6]
   2dee8:	e59d3020 	ldr	r3, [sp, #32]
   2deec:	e5c75000 	strb	r5, [r7]
   2def0:	e5845000 	str	r5, [r4]
   2def4:	e5843008 	str	r3, [r4, #8]
   2def8:	e5845004 	str	r5, [r4, #4]
   2defc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2df00:	e1a00005 	mov	r0, r5
   2df04:	ebfff45b 	bl	2b078 <operator new[](unsigned int)>
   2df08:	e3a03000 	mov	r3, #0
   2df0c:	e3a02001 	mov	r2, #1
   2df10:	e5860000 	str	r0, [r6]
   2df14:	e5c72000 	strb	r2, [r7]
   2df18:	e5843000 	str	r3, [r4]
   2df1c:	e5845008 	str	r5, [r4, #8]
   2df20:	e5843004 	str	r3, [r4, #4]
   2df24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2df28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002df2c <micros>:
   2df2c:	eaffed36 	b	2940c <CTimer::GetClockTicks()>

0002df30 <millis>:
   2df30:	e92d4010 	push	{r4, lr}
   2df34:	ebffed34 	bl	2940c <CTimer::GetClockTicks()>
   2df38:	e59f3008 	ldr	r3, [pc, #8]	; 2df48 <millis+0x18>
   2df3c:	e0803093 	umull	r3, r0, r3, r0
   2df40:	e1a00320 	lsr	r0, r0, #6
   2df44:	e8bd8010 	pop	{r4, pc}
   2df48:	10624dd3 	.word	0x10624dd3

0002df4c <microsDelay>:
   2df4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2df50:	e1a06000 	mov	r6, r0
   2df54:	ebffed2c 	bl	2940c <CTimer::GetClockTicks()>
   2df58:	e1a04000 	mov	r4, r0
   2df5c:	e1e05000 	mvn	r5, r0
   2df60:	e0867000 	add	r7, r6, r0
   2df64:	ea000004 	b	2df7c <microsDelay+0x30>
   2df68:	e1570000 	cmp	r7, r0
   2df6c:	23a00000 	movcs	r0, #0
   2df70:	33a00001 	movcc	r0, #1
   2df74:	e3500000 	cmp	r0, #0
   2df78:	1a000008 	bne	2dfa0 <microsDelay+0x54>
   2df7c:	ebffed22 	bl	2940c <CTimer::GetClockTicks()>
   2df80:	e1540000 	cmp	r4, r0
   2df84:	e0853000 	add	r3, r5, r0
   2df88:	9afffff6 	bls	2df68 <microsDelay+0x1c>
   2df8c:	e1560003 	cmp	r6, r3
   2df90:	23a00000 	movcs	r0, #0
   2df94:	33a00001 	movcc	r0, #1
   2df98:	e3500000 	cmp	r0, #0
   2df9c:	0afffff6 	beq	2df7c <microsDelay+0x30>
   2dfa0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002dfa4 <isTimeout>:
   2dfa4:	e1500001 	cmp	r0, r1
   2dfa8:	2a000005 	bcs	2dfc4 <isTimeout+0x20>
   2dfac:	e0400001 	sub	r0, r0, r1
   2dfb0:	e2400001 	sub	r0, r0, #1
   2dfb4:	e1520000 	cmp	r2, r0
   2dfb8:	23a00000 	movcs	r0, #0
   2dfbc:	33a00001 	movcc	r0, #1
   2dfc0:	e12fff1e 	bx	lr
   2dfc4:	e0812002 	add	r2, r1, r2
   2dfc8:	e1500002 	cmp	r0, r2
   2dfcc:	93a00000 	movls	r0, #0
   2dfd0:	83a00001 	movhi	r0, #1
   2dfd4:	e12fff1e 	bx	lr

0002dfd8 <timeToTimeout>:
   2dfd8:	e1500001 	cmp	r0, r1
   2dfdc:	3a000004 	bcc	2dff4 <timeToTimeout+0x1c>
   2dfe0:	e0811002 	add	r1, r1, r2
   2dfe4:	e1500001 	cmp	r0, r1
   2dfe8:	9a000008 	bls	2e010 <timeToTimeout+0x38>
   2dfec:	e3a00000 	mov	r0, #0
   2dff0:	e12fff1e 	bx	lr
   2dff4:	e0411000 	sub	r1, r1, r0
   2dff8:	e1e03001 	mvn	r3, r1
   2dffc:	e1520003 	cmp	r2, r3
   2e000:	3afffff9 	bcc	2dfec <timeToTimeout+0x14>
   2e004:	e2820001 	add	r0, r2, #1
   2e008:	e0800001 	add	r0, r0, r1
   2e00c:	e12fff1e 	bx	lr
   2e010:	e0410000 	sub	r0, r1, r0
   2e014:	e12fff1e 	bx	lr

0002e018 <strlcpy>:
   2e018:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e01c:	e1a07000 	mov	r7, r0
   2e020:	e1a00001 	mov	r0, r1
   2e024:	e1a04002 	mov	r4, r2
   2e028:	e1a06001 	mov	r6, r1
   2e02c:	ebfff012 	bl	2a07c <strlen>
   2e030:	e2802001 	add	r2, r0, #1
   2e034:	e1520004 	cmp	r2, r4
   2e038:	e1a05000 	mov	r5, r0
   2e03c:	3a00000c 	bcc	2e074 <strlcpy+0x5c>
   2e040:	e3540000 	cmp	r4, #0
   2e044:	1a000001 	bne	2e050 <strlcpy+0x38>
   2e048:	e1a00005 	mov	r0, r5
   2e04c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e050:	e2444001 	sub	r4, r4, #1
   2e054:	e1a01006 	mov	r1, r6
   2e058:	e1a02004 	mov	r2, r4
   2e05c:	e1a00007 	mov	r0, r7
   2e060:	ebfff22a 	bl	2a910 <memcpy>
   2e064:	e3a03000 	mov	r3, #0
   2e068:	e1a00005 	mov	r0, r5
   2e06c:	e7c73004 	strb	r3, [r7, r4]
   2e070:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e074:	e1a01006 	mov	r1, r6
   2e078:	e1a00007 	mov	r0, r7
   2e07c:	ebfff223 	bl	2a910 <memcpy>
   2e080:	e1a00005 	mov	r0, r5
   2e084:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002e088 <strlcat>:
   2e088:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e08c:	e1a05002 	mov	r5, r2
   2e090:	e1a08000 	mov	r8, r0
   2e094:	e1a00001 	mov	r0, r1
   2e098:	e1a06001 	mov	r6, r1
   2e09c:	ebffeff6 	bl	2a07c <strlen>
   2e0a0:	e3550000 	cmp	r5, #0
   2e0a4:	e1a07000 	mov	r7, r0
   2e0a8:	0a000021 	beq	2e134 <strlcat+0xac>
   2e0ac:	e1d800d0 	ldrsb	r0, [r8]
   2e0b0:	e3500000 	cmp	r0, #0
   2e0b4:	11a03008 	movne	r3, r8
   2e0b8:	13a04000 	movne	r4, #0
   2e0bc:	1a000003 	bne	2e0d0 <strlcat+0x48>
   2e0c0:	ea000007 	b	2e0e4 <strlcat+0x5c>
   2e0c4:	e1f3c0d1 	ldrsb	ip, [r3, #1]!
   2e0c8:	e35c0000 	cmp	ip, #0
   2e0cc:	0a000005 	beq	2e0e8 <strlcat+0x60>
   2e0d0:	e2844001 	add	r4, r4, #1
   2e0d4:	e1550004 	cmp	r5, r4
   2e0d8:	1afffff9 	bne	2e0c4 <strlcat+0x3c>
   2e0dc:	e0870004 	add	r0, r7, r4
   2e0e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e0e4:	e1a04000 	mov	r4, r0
   2e0e8:	e0453004 	sub	r3, r5, r4
   2e0ec:	e1570003 	cmp	r7, r3
   2e0f0:	2a000005 	bcs	2e10c <strlcat+0x84>
   2e0f4:	e1a01006 	mov	r1, r6
   2e0f8:	e0880004 	add	r0, r8, r4
   2e0fc:	e2872001 	add	r2, r7, #1
   2e100:	ebfff202 	bl	2a910 <memcpy>
   2e104:	e0870004 	add	r0, r7, r4
   2e108:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e10c:	e2455001 	sub	r5, r5, #1
   2e110:	e1a02005 	mov	r2, r5
   2e114:	e1a01006 	mov	r1, r6
   2e118:	e0880004 	add	r0, r8, r4
   2e11c:	ebfff1fb 	bl	2a910 <memcpy>
   2e120:	e3a03000 	mov	r3, #0
   2e124:	e0885005 	add	r5, r8, r5
   2e128:	e7c53004 	strb	r3, [r5, r4]
   2e12c:	e0870004 	add	r0, r7, r4
   2e130:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e134:	e1a04005 	mov	r4, r5
   2e138:	eaffffe7 	b	2e0dc <strlcat+0x54>

0002e13c <strnlen>:
   2e13c:	e3510000 	cmp	r1, #0
   2e140:	0a00000c 	beq	2e178 <strnlen+0x3c>
   2e144:	e1d030d0 	ldrsb	r3, [r0]
   2e148:	e3530000 	cmp	r3, #0
   2e14c:	0a00000b 	beq	2e180 <strnlen+0x44>
   2e150:	e1a03000 	mov	r3, r0
   2e154:	e3a00000 	mov	r0, #0
   2e158:	ea000002 	b	2e168 <strnlen+0x2c>
   2e15c:	e1f320d1 	ldrsb	r2, [r3, #1]!
   2e160:	e3520000 	cmp	r2, #0
   2e164:	012fff1e 	bxeq	lr
   2e168:	e2800001 	add	r0, r0, #1
   2e16c:	e1510000 	cmp	r1, r0
   2e170:	1afffff9 	bne	2e15c <strnlen+0x20>
   2e174:	e12fff1e 	bx	lr
   2e178:	e1a00001 	mov	r0, r1
   2e17c:	e12fff1e 	bx	lr
   2e180:	e1a00003 	mov	r0, r3
   2e184:	e12fff1e 	bx	lr

0002e188 <sprintf>:
   2e188:	e92d000e 	push	{r1, r2, r3}
   2e18c:	e92d4010 	push	{r4, lr}
   2e190:	e24dd01c 	sub	sp, sp, #28
   2e194:	e28d3028 	add	r3, sp, #40	; 0x28
   2e198:	e1a04000 	mov	r4, r0
   2e19c:	e28d0008 	add	r0, sp, #8
   2e1a0:	e58d3004 	str	r3, [sp, #4]
   2e1a4:	ebffe66e 	bl	27b64 <CString::CString()>
   2e1a8:	e59d2004 	ldr	r2, [sp, #4]
   2e1ac:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   2e1b0:	e28d0008 	add	r0, sp, #8
   2e1b4:	ebffe885 	bl	283d0 <CString::FormatV(char const*, std::__va_list)>
   2e1b8:	e28d0008 	add	r0, sp, #8
   2e1bc:	ebffe67e 	bl	27bbc <CString::operator char const*() const>
   2e1c0:	e1a01000 	mov	r1, r0
   2e1c4:	e1a00004 	mov	r0, r4
   2e1c8:	ebfff069 	bl	2a374 <strcpy>
   2e1cc:	e28d0008 	add	r0, sp, #8
   2e1d0:	ebffe6a7 	bl	27c74 <CString::GetLength() const>
   2e1d4:	e1a04000 	mov	r4, r0
   2e1d8:	e28d0008 	add	r0, sp, #8
   2e1dc:	ebffe62d 	bl	27a98 <CString::~CString()>
   2e1e0:	e1a00004 	mov	r0, r4
   2e1e4:	e28dd01c 	add	sp, sp, #28
   2e1e8:	e8bd4010 	pop	{r4, lr}
   2e1ec:	e28dd00c 	add	sp, sp, #12
   2e1f0:	e12fff1e 	bx	lr

0002e1f4 <snprintf>:
   2e1f4:	e92d000c 	push	{r2, r3}
   2e1f8:	e92d4030 	push	{r4, r5, lr}
   2e1fc:	e24dd01c 	sub	sp, sp, #28
   2e200:	e28d302c 	add	r3, sp, #44	; 0x2c
   2e204:	e1a05000 	mov	r5, r0
   2e208:	e28d0008 	add	r0, sp, #8
   2e20c:	e58d3004 	str	r3, [sp, #4]
   2e210:	e1a04001 	mov	r4, r1
   2e214:	ebffe652 	bl	27b64 <CString::CString()>
   2e218:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   2e21c:	e59d2004 	ldr	r2, [sp, #4]
   2e220:	e28d0008 	add	r0, sp, #8
   2e224:	ebffe869 	bl	283d0 <CString::FormatV(char const*, std::__va_list)>
   2e228:	e28d0008 	add	r0, sp, #8
   2e22c:	ebffe690 	bl	27c74 <CString::GetLength() const>
   2e230:	e2444001 	sub	r4, r4, #1
   2e234:	e1540000 	cmp	r4, r0
   2e238:	21a04000 	movcs	r4, r0
   2e23c:	e28d0008 	add	r0, sp, #8
   2e240:	ebffe65d 	bl	27bbc <CString::operator char const*() const>
   2e244:	e1a02004 	mov	r2, r4
   2e248:	e1a01000 	mov	r1, r0
   2e24c:	e1a00005 	mov	r0, r5
   2e250:	ebfff1ae 	bl	2a910 <memcpy>
   2e254:	e3a03000 	mov	r3, #0
   2e258:	e28d0008 	add	r0, sp, #8
   2e25c:	e7c53004 	strb	r3, [r5, r4]
   2e260:	ebffe60c 	bl	27a98 <CString::~CString()>
   2e264:	e1a00004 	mov	r0, r4
   2e268:	e28dd01c 	add	sp, sp, #28
   2e26c:	e8bd4030 	pop	{r4, r5, lr}
   2e270:	e28dd008 	add	sp, sp, #8
   2e274:	e12fff1e 	bx	lr

0002e278 <vsnprintf>:
   2e278:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2e27c:	e1a07003 	mov	r7, r3
   2e280:	e1a06002 	mov	r6, r2
   2e284:	e24dd014 	sub	sp, sp, #20
   2e288:	e1a05000 	mov	r5, r0
   2e28c:	e1a0000d 	mov	r0, sp
   2e290:	e1a04001 	mov	r4, r1
   2e294:	ebffe632 	bl	27b64 <CString::CString()>
   2e298:	e1a02007 	mov	r2, r7
   2e29c:	e1a01006 	mov	r1, r6
   2e2a0:	e1a0000d 	mov	r0, sp
   2e2a4:	ebffe849 	bl	283d0 <CString::FormatV(char const*, std::__va_list)>
   2e2a8:	e1a0000d 	mov	r0, sp
   2e2ac:	ebffe670 	bl	27c74 <CString::GetLength() const>
   2e2b0:	e2444001 	sub	r4, r4, #1
   2e2b4:	e1540000 	cmp	r4, r0
   2e2b8:	21a04000 	movcs	r4, r0
   2e2bc:	e1a0000d 	mov	r0, sp
   2e2c0:	ebffe63d 	bl	27bbc <CString::operator char const*() const>
   2e2c4:	e1a02004 	mov	r2, r4
   2e2c8:	e1a01000 	mov	r1, r0
   2e2cc:	e1a00005 	mov	r0, r5
   2e2d0:	ebfff18e 	bl	2a910 <memcpy>
   2e2d4:	e3a03000 	mov	r3, #0
   2e2d8:	e1a0000d 	mov	r0, sp
   2e2dc:	e7c53004 	strb	r3, [r5, r4]
   2e2e0:	ebffe5ec 	bl	27a98 <CString::~CString()>
   2e2e4:	e1a00004 	mov	r0, r4
   2e2e8:	e28dd014 	add	sp, sp, #20
   2e2ec:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002e2f0 <jsonGetValueForKey>:
   2e2f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e2f4:	e1a08001 	mov	r8, r1
   2e2f8:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e2fc:	e24dd018 	sub	sp, sp, #24
   2e300:	e1a07000 	mov	r7, r0
   2e304:	e28d000c 	add	r0, sp, #12
   2e308:	e1a09002 	mov	r9, r2
   2e30c:	e1a0a003 	mov	sl, r3
   2e310:	eb000139 	bl	2e7fc <JSMNR_init>
   2e314:	e1a00008 	mov	r0, r8
   2e318:	ebffef57 	bl	2a07c <strlen>
   2e31c:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e320:	e1a02000 	mov	r2, r0
   2e324:	e28d3018 	add	r3, sp, #24
   2e328:	e28d000c 	add	r0, sp, #12
   2e32c:	e1a01008 	mov	r1, r8
   2e330:	e58dc000 	str	ip, [sp]
   2e334:	eb00014c 	bl	2e86c <JSMNR_parse>
   2e338:	e2506000 	subs	r6, r0, #0
   2e33c:	c28d4018 	addgt	r4, sp, #24
   2e340:	c3a05000 	movgt	r5, #0
   2e344:	ca000003 	bgt	2e358 <jsonGetValueForKey+0x68>
   2e348:	ea00001d 	b	2e3c4 <jsonGetValueForKey+0xd4>
   2e34c:	e1560005 	cmp	r6, r5
   2e350:	e2844010 	add	r4, r4, #16
   2e354:	0a00001a 	beq	2e3c4 <jsonGetValueForKey+0xd4>
   2e358:	e5d43000 	ldrb	r3, [r4]
   2e35c:	e2855001 	add	r5, r5, #1
   2e360:	e3530003 	cmp	r3, #3
   2e364:	1afffff8 	bne	2e34c <jsonGetValueForKey+0x5c>
   2e368:	e1a00007 	mov	r0, r7
   2e36c:	ebffef42 	bl	2a07c <strlen>
   2e370:	e994000a 	ldmib	r4, {r1, r3}
   2e374:	e0433001 	sub	r3, r3, r1
   2e378:	e1500003 	cmp	r0, r3
   2e37c:	1afffff2 	bne	2e34c <jsonGetValueForKey+0x5c>
   2e380:	e1a02000 	mov	r2, r0
   2e384:	e0880001 	add	r0, r8, r1
   2e388:	e1a01007 	mov	r1, r7
   2e38c:	ebffef93 	bl	2a1e0 <strncmp>
   2e390:	e3500000 	cmp	r0, #0
   2e394:	1affffec 	bne	2e34c <jsonGetValueForKey+0x5c>
   2e398:	e5941014 	ldr	r1, [r4, #20]
   2e39c:	e5942018 	ldr	r2, [r4, #24]
   2e3a0:	e0422001 	sub	r2, r2, r1
   2e3a4:	e152000a 	cmp	r2, sl
   2e3a8:	aa000005 	bge	2e3c4 <jsonGetValueForKey+0xd4>
   2e3ac:	e2822001 	add	r2, r2, #1
   2e3b0:	e0881001 	add	r1, r8, r1
   2e3b4:	e1a00009 	mov	r0, r9
   2e3b8:	ebffff16 	bl	2e018 <strlcpy>
   2e3bc:	e3a00001 	mov	r0, #1
   2e3c0:	ea000000 	b	2e3c8 <jsonGetValueForKey+0xd8>
   2e3c4:	e3a00000 	mov	r0, #0
   2e3c8:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e3cc:	e28dd018 	add	sp, sp, #24
   2e3d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002e3d4 <jsonGetArrayLen>:
   2e3d4:	e92d4010 	push	{r4, lr}
   2e3d8:	e1a04000 	mov	r4, r0
   2e3dc:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e3e0:	e24dd018 	sub	sp, sp, #24
   2e3e4:	e28d000c 	add	r0, sp, #12
   2e3e8:	eb000103 	bl	2e7fc <JSMNR_init>
   2e3ec:	e1a00004 	mov	r0, r4
   2e3f0:	ebffef21 	bl	2a07c <strlen>
   2e3f4:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e3f8:	e1a02000 	mov	r2, r0
   2e3fc:	e28d3018 	add	r3, sp, #24
   2e400:	e28d000c 	add	r0, sp, #12
   2e404:	e1a01004 	mov	r1, r4
   2e408:	e58dc000 	str	ip, [sp]
   2e40c:	eb000116 	bl	2e86c <JSMNR_parse>
   2e410:	e3500000 	cmp	r0, #0
   2e414:	b3a00000 	movlt	r0, #0
   2e418:	ba000004 	blt	2e430 <jsonGetArrayLen+0x5c>
   2e41c:	0a000006 	beq	2e43c <jsonGetArrayLen+0x68>
   2e420:	e5dd3018 	ldrb	r3, [sp, #24]
   2e424:	e3530002 	cmp	r3, #2
   2e428:	1a000003 	bne	2e43c <jsonGetArrayLen+0x68>
   2e42c:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   2e430:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e434:	e28dd018 	add	sp, sp, #24
   2e438:	e8bd8010 	pop	{r4, pc}
   2e43c:	e3e00000 	mvn	r0, #0
   2e440:	eafffffa 	b	2e430 <jsonGetArrayLen+0x5c>

0002e444 <jsonGetArrayElem>:
   2e444:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2e448:	e1a06002 	mov	r6, r2
   2e44c:	e1a04001 	mov	r4, r1
   2e450:	e24ddd7d 	sub	sp, sp, #8000	; 0x1f40
   2e454:	e24dd01c 	sub	sp, sp, #28
   2e458:	e1a02003 	mov	r2, r3
   2e45c:	e59f1134 	ldr	r1, [pc, #308]	; 2e598 <jsonGetArrayElem+0x154>
   2e460:	e1a07000 	mov	r7, r0
   2e464:	e1a00006 	mov	r0, r6
   2e468:	e1a05003 	mov	r5, r3
   2e46c:	ebfffee9 	bl	2e018 <strlcpy>
   2e470:	e28d000c 	add	r0, sp, #12
   2e474:	eb0000e0 	bl	2e7fc <JSMNR_init>
   2e478:	e1a00004 	mov	r0, r4
   2e47c:	ebffeefe 	bl	2a07c <strlen>
   2e480:	e3a0cf7d 	mov	ip, #500	; 0x1f4
   2e484:	e1a02000 	mov	r2, r0
   2e488:	e28d3018 	add	r3, sp, #24
   2e48c:	e28d000c 	add	r0, sp, #12
   2e490:	e1a01004 	mov	r1, r4
   2e494:	e58dc000 	str	ip, [sp]
   2e498:	eb0000f3 	bl	2e86c <JSMNR_parse>
   2e49c:	e3500000 	cmp	r0, #0
   2e4a0:	da000002 	ble	2e4b0 <jsonGetArrayElem+0x6c>
   2e4a4:	e5dd3018 	ldrb	r3, [sp, #24]
   2e4a8:	e3530002 	cmp	r3, #2
   2e4ac:	0a000003 	beq	2e4c0 <jsonGetArrayElem+0x7c>
   2e4b0:	e3a00000 	mov	r0, #0
   2e4b4:	e28ddd7d 	add	sp, sp, #8000	; 0x1f40
   2e4b8:	e28dd01c 	add	sp, sp, #28
   2e4bc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2e4c0:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   2e4c4:	e1530007 	cmp	r3, r7
   2e4c8:	dafffff8 	ble	2e4b0 <jsonGetArrayElem+0x6c>
   2e4cc:	e3570000 	cmp	r7, #0
   2e4d0:	0a00002b 	beq	2e584 <jsonGetArrayElem+0x140>
   2e4d4:	e3a0e000 	mov	lr, #0
   2e4d8:	e3a02001 	mov	r2, #1
   2e4dc:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   2e4e0:	e1500002 	cmp	r0, r2
   2e4e4:	dafffff1 	ble	2e4b0 <jsonGetArrayElem+0x6c>
   2e4e8:	e28d1ef5 	add	r1, sp, #3920	; 0xf50
   2e4ec:	e1a03202 	lsl	r3, r2, #4
   2e4f0:	e2811008 	add	r1, r1, #8
   2e4f4:	e0811003 	add	r1, r1, r3
   2e4f8:	e5111f3c 	ldr	r1, [r1, #-3900]	; 0xfffff0c4
   2e4fc:	e151000c 	cmp	r1, ip
   2e500:	d28d1018 	addle	r1, sp, #24
   2e504:	d0813003 	addle	r3, r1, r3
   2e508:	da000003 	ble	2e51c <jsonGetArrayElem+0xd8>
   2e50c:	ea00000c 	b	2e544 <jsonGetArrayElem+0x100>
   2e510:	e5931004 	ldr	r1, [r3, #4]
   2e514:	e151000c 	cmp	r1, ip
   2e518:	ca000004 	bgt	2e530 <jsonGetArrayElem+0xec>
   2e51c:	e2822001 	add	r2, r2, #1
   2e520:	e1500002 	cmp	r0, r2
   2e524:	e2833010 	add	r3, r3, #16
   2e528:	1afffff8 	bne	2e510 <jsonGetArrayElem+0xcc>
   2e52c:	eaffffdf 	b	2e4b0 <jsonGetArrayElem+0x6c>
   2e530:	e28d1ef5 	add	r1, sp, #3920	; 0xf50
   2e534:	e1a03202 	lsl	r3, r2, #4
   2e538:	e2811008 	add	r1, r1, #8
   2e53c:	e0811003 	add	r1, r1, r3
   2e540:	e511cf38 	ldr	ip, [r1, #-3896]	; 0xfffff0c8
   2e544:	e28ee001 	add	lr, lr, #1
   2e548:	e157000e 	cmp	r7, lr
   2e54c:	1affffe3 	bne	2e4e0 <jsonGetArrayElem+0x9c>
   2e550:	e28d2ef5 	add	r2, sp, #3920	; 0xf50
   2e554:	e2822008 	add	r2, r2, #8
   2e558:	e0823003 	add	r3, r2, r3
   2e55c:	e5131f3c 	ldr	r1, [r3, #-3900]	; 0xfffff0c4
   2e560:	e1a00006 	mov	r0, r6
   2e564:	e04c2001 	sub	r2, ip, r1
   2e568:	e2822001 	add	r2, r2, #1
   2e56c:	e1520005 	cmp	r2, r5
   2e570:	a1a02005 	movge	r2, r5
   2e574:	e0841001 	add	r1, r4, r1
   2e578:	ebfffea6 	bl	2e018 <strlcpy>
   2e57c:	e3a00001 	mov	r0, #1
   2e580:	eaffffcb 	b	2e4b4 <jsonGetArrayElem+0x70>
   2e584:	e3500001 	cmp	r0, #1
   2e588:	daffffc8 	ble	2e4b0 <jsonGetArrayElem+0x6c>
   2e58c:	e3a03010 	mov	r3, #16
   2e590:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   2e594:	eaffffed 	b	2e550 <jsonGetArrayElem+0x10c>
   2e598:	00047764 	.word	0x00047764

0002e59c <jsonEscape>:
   2e59c:	e1d030d0 	ldrsb	r3, [r0]
   2e5a0:	e92d4070 	push	{r4, r5, r6, lr}
   2e5a4:	e3530000 	cmp	r3, #0
   2e5a8:	0a00002d 	beq	2e664 <jsonEscape+0xc8>
   2e5ac:	e3520002 	cmp	r2, #2
   2e5b0:	da00002b 	ble	2e664 <jsonEscape+0xc8>
   2e5b4:	e3a0c002 	mov	ip, #2
   2e5b8:	e3a0e000 	mov	lr, #0
   2e5bc:	e3a0505c 	mov	r5, #92	; 0x5c
   2e5c0:	e3a0606e 	mov	r6, #110	; 0x6e
   2e5c4:	ea000011 	b	2e610 <jsonEscape+0x74>
   2e5c8:	e353005c 	cmp	r3, #92	; 0x5c
   2e5cc:	0a00001e 	beq	2e64c <jsonEscape+0xb0>
   2e5d0:	e353000a 	cmp	r3, #10
   2e5d4:	15c13000 	strbne	r3, [r1]
   2e5d8:	128ee001 	addne	lr, lr, #1
   2e5dc:	12811001 	addne	r1, r1, #1
   2e5e0:	1a000004 	bne	2e5f8 <jsonEscape+0x5c>
   2e5e4:	e1a03001 	mov	r3, r1
   2e5e8:	e4c35002 	strb	r5, [r3], #2
   2e5ec:	e1a0e00c 	mov	lr, ip
   2e5f0:	e5c16001 	strb	r6, [r1, #1]
   2e5f4:	e1a01003 	mov	r1, r3
   2e5f8:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2e5fc:	e28ec002 	add	ip, lr, #2
   2e600:	e3530000 	cmp	r3, #0
   2e604:	0a00000c 	beq	2e63c <jsonEscape+0xa0>
   2e608:	e15c0002 	cmp	ip, r2
   2e60c:	aa00000a 	bge	2e63c <jsonEscape+0xa0>
   2e610:	e3530022 	cmp	r3, #34	; 0x22
   2e614:	1affffeb 	bne	2e5c8 <jsonEscape+0x2c>
   2e618:	e1a04001 	mov	r4, r1
   2e61c:	e1a0e00c 	mov	lr, ip
   2e620:	e4c45002 	strb	r5, [r4], #2
   2e624:	e5c13001 	strb	r3, [r1, #1]
   2e628:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2e62c:	e1a01004 	mov	r1, r4
   2e630:	e3530000 	cmp	r3, #0
   2e634:	e28ec002 	add	ip, lr, #2
   2e638:	1afffff2 	bne	2e608 <jsonEscape+0x6c>
   2e63c:	e152000e 	cmp	r2, lr
   2e640:	c3a03000 	movgt	r3, #0
   2e644:	c5c13000 	strbgt	r3, [r1]
   2e648:	e8bd8070 	pop	{r4, r5, r6, pc}
   2e64c:	e1a04001 	mov	r4, r1
   2e650:	e4c43002 	strb	r3, [r4], #2
   2e654:	e1a0e00c 	mov	lr, ip
   2e658:	e5c13001 	strb	r3, [r1, #1]
   2e65c:	e1a01004 	mov	r1, r4
   2e660:	eaffffe4 	b	2e5f8 <jsonEscape+0x5c>
   2e664:	e3a0e000 	mov	lr, #0
   2e668:	eafffff3 	b	2e63c <jsonEscape+0xa0>

0002e66c <rdisspace>:
   2e66c:	e3500020 	cmp	r0, #32
   2e670:	0a000004 	beq	2e688 <rdisspace+0x1c>
   2e674:	e2400009 	sub	r0, r0, #9
   2e678:	e3500004 	cmp	r0, #4
   2e67c:	83a00000 	movhi	r0, #0
   2e680:	93a00001 	movls	r0, #1
   2e684:	e12fff1e 	bx	lr
   2e688:	e3a00001 	mov	r0, #1
   2e68c:	e12fff1e 	bx	lr

0002e690 <rdisdigit>:
   2e690:	e2400030 	sub	r0, r0, #48	; 0x30
   2e694:	e3500009 	cmp	r0, #9
   2e698:	83a00000 	movhi	r0, #0
   2e69c:	93a00001 	movls	r0, #1
   2e6a0:	e12fff1e 	bx	lr

0002e6a4 <rdisupper>:
   2e6a4:	e2400041 	sub	r0, r0, #65	; 0x41
   2e6a8:	e3500019 	cmp	r0, #25
   2e6ac:	83a00000 	movhi	r0, #0
   2e6b0:	93a00001 	movls	r0, #1
   2e6b4:	e12fff1e 	bx	lr

0002e6b8 <rdislower>:
   2e6b8:	e2400061 	sub	r0, r0, #97	; 0x61
   2e6bc:	e3500019 	cmp	r0, #25
   2e6c0:	83a00000 	movhi	r0, #0
   2e6c4:	93a00001 	movls	r0, #1
   2e6c8:	e12fff1e 	bx	lr

0002e6cc <rdtolower>:
   2e6cc:	e6ef3070 	uxtb	r3, r0
   2e6d0:	e2432041 	sub	r2, r3, #65	; 0x41
   2e6d4:	e3520019 	cmp	r2, #25
   2e6d8:	92833020 	addls	r3, r3, #32
   2e6dc:	96af0073 	sxtbls	r0, r3
   2e6e0:	e12fff1e 	bx	lr

0002e6e4 <rdtoupper>:
   2e6e4:	e6ef3070 	uxtb	r3, r0
   2e6e8:	e2432061 	sub	r2, r3, #97	; 0x61
   2e6ec:	e3520019 	cmp	r2, #25
   2e6f0:	92433020 	subls	r3, r3, #32
   2e6f4:	96af0073 	sxtbls	r0, r3
   2e6f8:	e12fff1e 	bx	lr

0002e6fc <rdisalpha>:
   2e6fc:	e3c00020 	bic	r0, r0, #32
   2e700:	e2400041 	sub	r0, r0, #65	; 0x41
   2e704:	e3500019 	cmp	r0, #25
   2e708:	83a00000 	movhi	r0, #0
   2e70c:	93a00001 	movls	r0, #1
   2e710:	e12fff1e 	bx	lr

0002e714 <rdstrrev>:
   2e714:	e92d4010 	push	{r4, lr}
   2e718:	e1a04000 	mov	r4, r0
   2e71c:	ebffee56 	bl	2a07c <strlen>
   2e720:	e2402001 	sub	r2, r0, #1
   2e724:	e3520000 	cmp	r2, #0
   2e728:	d8bd8010 	pople	{r4, pc}
   2e72c:	e3a01000 	mov	r1, #0
   2e730:	e0840000 	add	r0, r4, r0
   2e734:	e2443001 	sub	r3, r4, #1
   2e738:	e5d3c001 	ldrb	ip, [r3, #1]
   2e73c:	e550e001 	ldrb	lr, [r0, #-1]
   2e740:	e2811001 	add	r1, r1, #1
   2e744:	e2422001 	sub	r2, r2, #1
   2e748:	e1510002 	cmp	r1, r2
   2e74c:	e5e3e001 	strb	lr, [r3, #1]!
   2e750:	e560c001 	strb	ip, [r0, #-1]!
   2e754:	bafffff7 	blt	2e738 <rdstrrev+0x24>
   2e758:	e8bd8010 	pop	{r4, pc}

0002e75c <rditoa>:
   2e75c:	e3520000 	cmp	r2, #0
   2e760:	0a000023 	beq	2e7f4 <rditoa+0x98>
   2e764:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e768:	e1a04000 	mov	r4, r0
   2e76c:	e1a09001 	mov	r9, r1
   2e770:	e1a07003 	mov	r7, r3
   2e774:	e1a06001 	mov	r6, r1
   2e778:	e3a05001 	mov	r5, #1
   2e77c:	e2428001 	sub	r8, r2, #1
   2e780:	ea000003 	b	2e794 <rditoa+0x38>
   2e784:	e15a0008 	cmp	sl, r8
   2e788:	e2855001 	add	r5, r5, #1
   2e78c:	e2866001 	add	r6, r6, #1
   2e790:	aa000014 	bge	2e7e8 <rditoa+0x8c>
   2e794:	e1a00004 	mov	r0, r4
   2e798:	e1a01007 	mov	r1, r7
   2e79c:	eb003dc9 	bl	3dec8 <__aeabi_idivmod>
   2e7a0:	e3510009 	cmp	r1, #9
   2e7a4:	e2813030 	add	r3, r1, #48	; 0x30
   2e7a8:	c2811037 	addgt	r1, r1, #55	; 0x37
   2e7ac:	c5c61000 	strbgt	r1, [r6]
   2e7b0:	d5c63000 	strble	r3, [r6]
   2e7b4:	e1a00004 	mov	r0, r4
   2e7b8:	e1a01007 	mov	r1, r7
   2e7bc:	d1a0a005 	movle	sl, r5
   2e7c0:	c1a0a005 	movgt	sl, r5
   2e7c4:	eb003d75 	bl	3dda0 <__aeabi_idiv>
   2e7c8:	e2504000 	subs	r4, r0, #0
   2e7cc:	1affffec 	bne	2e784 <rditoa+0x28>
   2e7d0:	e3a04000 	mov	r4, #0
   2e7d4:	e1a00009 	mov	r0, r9
   2e7d8:	e7c9400a 	strb	r4, [r9, sl]
   2e7dc:	ebffffcc 	bl	2e714 <rdstrrev>
   2e7e0:	e1a00004 	mov	r0, r4
   2e7e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e7e8:	1afffff8 	bne	2e7d0 <rditoa+0x74>
   2e7ec:	e3e00000 	mvn	r0, #0
   2e7f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e7f4:	e3e00000 	mvn	r0, #0
   2e7f8:	e12fff1e 	bx	lr

0002e7fc <JSMNR_init>:
   2e7fc:	e3a03000 	mov	r3, #0
   2e800:	e3e02000 	mvn	r2, #0
   2e804:	e5803000 	str	r3, [r0]
   2e808:	e5802008 	str	r2, [r0, #8]
   2e80c:	e5803004 	str	r3, [r0, #4]
   2e810:	e12fff1e 	bx	lr

0002e814 <JSMNR_logLongStr>:
   2e814:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e818:	e3a04000 	mov	r4, #0
   2e81c:	e28db01c 	add	fp, sp, #28
   2e820:	e1a05001 	mov	r5, r1
   2e824:	e1a08004 	mov	r8, r4
   2e828:	e3a07051 	mov	r7, #81	; 0x51
   2e82c:	ea000007 	b	2e850 <JSMNR_logLongStr+0x3c>
   2e830:	e1a0600d 	mov	r6, sp
   2e834:	e24dd058 	sub	sp, sp, #88	; 0x58
   2e838:	e1a0000d 	mov	r0, sp
   2e83c:	e1a02007 	mov	r2, r7
   2e840:	ebfffdf4 	bl	2e018 <strlcpy>
   2e844:	e5cd8050 	strb	r8, [sp, #80]	; 0x50
   2e848:	e1a0d006 	mov	sp, r6
   2e84c:	e2844050 	add	r4, r4, #80	; 0x50
   2e850:	e1a00005 	mov	r0, r5
   2e854:	ebffee08 	bl	2a07c <strlen>
   2e858:	e1540000 	cmp	r4, r0
   2e85c:	e0851004 	add	r1, r5, r4
   2e860:	3afffff2 	bcc	2e830 <JSMNR_logLongStr+0x1c>
   2e864:	e24bd01c 	sub	sp, fp, #28
   2e868:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002e86c <JSMNR_parse>:
   2e86c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e870:	e590e000 	ldr	lr, [r0]
   2e874:	e5905004 	ldr	r5, [r0, #4]
   2e878:	e152000e 	cmp	r2, lr
   2e87c:	9a0000b7 	bls	2eb60 <JSMNR_parse+0x2f4>
   2e880:	e191c0de 	ldrsb	ip, [r1, lr]
   2e884:	e35c0000 	cmp	ip, #0
   2e888:	0a0000b4 	beq	2eb60 <JSMNR_parse+0x2f4>
   2e88c:	e3a0b000 	mov	fp, #0
   2e890:	ea00000e 	b	2e8d0 <JSMNR_parse+0x64>
   2e894:	e35c005d 	cmp	ip, #93	; 0x5d
   2e898:	0a0000c7 	beq	2ebbc <JSMNR_parse+0x350>
   2e89c:	ca0000c2 	bgt	2ebac <JSMNR_parse+0x340>
   2e8a0:	e35c003a 	cmp	ip, #58	; 0x3a
   2e8a4:	1a0000dd 	bne	2ec20 <JSMNR_parse+0x3b4>
   2e8a8:	e8905000 	ldm	r0, {ip, lr}
   2e8ac:	e24ee001 	sub	lr, lr, #1
   2e8b0:	e580e008 	str	lr, [r0, #8]
   2e8b4:	e28ce001 	add	lr, ip, #1
   2e8b8:	e152000e 	cmp	r2, lr
   2e8bc:	e580e000 	str	lr, [r0]
   2e8c0:	9a0000a6 	bls	2eb60 <JSMNR_parse+0x2f4>
   2e8c4:	e191c0de 	ldrsb	ip, [r1, lr]
   2e8c8:	e35c0000 	cmp	ip, #0
   2e8cc:	0a0000a3 	beq	2eb60 <JSMNR_parse+0x2f4>
   2e8d0:	e35c002c 	cmp	ip, #44	; 0x2c
   2e8d4:	0a0000ef 	beq	2ec98 <JSMNR_parse+0x42c>
   2e8d8:	caffffed 	bgt	2e894 <JSMNR_parse+0x28>
   2e8dc:	e35c000d 	cmp	ip, #13
   2e8e0:	0a000099 	beq	2eb4c <JSMNR_parse+0x2e0>
   2e8e4:	da00010a 	ble	2ed14 <JSMNR_parse+0x4a8>
   2e8e8:	e35c0020 	cmp	ip, #32
   2e8ec:	0a000096 	beq	2eb4c <JSMNR_parse+0x2e0>
   2e8f0:	e35c0022 	cmp	ip, #34	; 0x22
   2e8f4:	1a000109 	bne	2ed20 <JSMNR_parse+0x4b4>
   2e8f8:	e28e7001 	add	r7, lr, #1
   2e8fc:	e1520007 	cmp	r2, r7
   2e900:	e5807000 	str	r7, [r0]
   2e904:	e1a0c007 	mov	ip, r7
   2e908:	9a000085 	bls	2eb24 <JSMNR_parse+0x2b8>
   2e90c:	e19140d7 	ldrsb	r4, [r1, r7]
   2e910:	e3540000 	cmp	r4, #0
   2e914:	1a000008 	bne	2e93c <JSMNR_parse+0xd0>
   2e918:	ea000081 	b	2eb24 <JSMNR_parse+0x2b8>
   2e91c:	e5904000 	ldr	r4, [r0]
   2e920:	e284c001 	add	ip, r4, #1
   2e924:	e152000c 	cmp	r2, ip
   2e928:	e580c000 	str	ip, [r0]
   2e92c:	9a00007c 	bls	2eb24 <JSMNR_parse+0x2b8>
   2e930:	e19140dc 	ldrsb	r4, [r1, ip]
   2e934:	e3540000 	cmp	r4, #0
   2e938:	0a000079 	beq	2eb24 <JSMNR_parse+0x2b8>
   2e93c:	e3540022 	cmp	r4, #34	; 0x22
   2e940:	0a00014f 	beq	2ee84 <JSMNR_parse+0x618>
   2e944:	e354005c 	cmp	r4, #92	; 0x5c
   2e948:	1afffff3 	bne	2e91c <JSMNR_parse+0xb0>
   2e94c:	e28c4001 	add	r4, ip, #1
   2e950:	e1520004 	cmp	r2, r4
   2e954:	9afffff0 	bls	2e91c <JSMNR_parse+0xb0>
   2e958:	e5804000 	str	r4, [r0]
   2e95c:	e19160d4 	ldrsb	r6, [r1, r4]
   2e960:	e0819004 	add	r9, r1, r4
   2e964:	e2466022 	sub	r6, r6, #34	; 0x22
   2e968:	e3560053 	cmp	r6, #83	; 0x53
   2e96c:	979ff106 	ldrls	pc, [pc, r6, lsl #2]
   2e970:	ea00006f 	b	2eb34 <JSMNR_parse+0x2c8>
   2e974:	0002e920 	.word	0x0002e920
   2e978:	0002eb34 	.word	0x0002eb34
   2e97c:	0002eb34 	.word	0x0002eb34
   2e980:	0002eb34 	.word	0x0002eb34
   2e984:	0002eb34 	.word	0x0002eb34
   2e988:	0002eb34 	.word	0x0002eb34
   2e98c:	0002eb34 	.word	0x0002eb34
   2e990:	0002eb34 	.word	0x0002eb34
   2e994:	0002eb34 	.word	0x0002eb34
   2e998:	0002eb34 	.word	0x0002eb34
   2e99c:	0002eb34 	.word	0x0002eb34
   2e9a0:	0002eb34 	.word	0x0002eb34
   2e9a4:	0002eb34 	.word	0x0002eb34
   2e9a8:	0002e920 	.word	0x0002e920
   2e9ac:	0002eb34 	.word	0x0002eb34
   2e9b0:	0002eb34 	.word	0x0002eb34
   2e9b4:	0002eb34 	.word	0x0002eb34
   2e9b8:	0002eb34 	.word	0x0002eb34
   2e9bc:	0002eb34 	.word	0x0002eb34
   2e9c0:	0002eb34 	.word	0x0002eb34
   2e9c4:	0002eb34 	.word	0x0002eb34
   2e9c8:	0002eb34 	.word	0x0002eb34
   2e9cc:	0002eb34 	.word	0x0002eb34
   2e9d0:	0002eb34 	.word	0x0002eb34
   2e9d4:	0002eb34 	.word	0x0002eb34
   2e9d8:	0002eb34 	.word	0x0002eb34
   2e9dc:	0002eb34 	.word	0x0002eb34
   2e9e0:	0002eb34 	.word	0x0002eb34
   2e9e4:	0002eb34 	.word	0x0002eb34
   2e9e8:	0002eb34 	.word	0x0002eb34
   2e9ec:	0002eb34 	.word	0x0002eb34
   2e9f0:	0002eb34 	.word	0x0002eb34
   2e9f4:	0002eb34 	.word	0x0002eb34
   2e9f8:	0002eb34 	.word	0x0002eb34
   2e9fc:	0002eb34 	.word	0x0002eb34
   2ea00:	0002eb34 	.word	0x0002eb34
   2ea04:	0002eb34 	.word	0x0002eb34
   2ea08:	0002eb34 	.word	0x0002eb34
   2ea0c:	0002eb34 	.word	0x0002eb34
   2ea10:	0002eb34 	.word	0x0002eb34
   2ea14:	0002eb34 	.word	0x0002eb34
   2ea18:	0002eb34 	.word	0x0002eb34
   2ea1c:	0002eb34 	.word	0x0002eb34
   2ea20:	0002eb34 	.word	0x0002eb34
   2ea24:	0002eb34 	.word	0x0002eb34
   2ea28:	0002eb34 	.word	0x0002eb34
   2ea2c:	0002eb34 	.word	0x0002eb34
   2ea30:	0002eb34 	.word	0x0002eb34
   2ea34:	0002eb34 	.word	0x0002eb34
   2ea38:	0002eb34 	.word	0x0002eb34
   2ea3c:	0002eb34 	.word	0x0002eb34
   2ea40:	0002eb34 	.word	0x0002eb34
   2ea44:	0002eb34 	.word	0x0002eb34
   2ea48:	0002eb34 	.word	0x0002eb34
   2ea4c:	0002eb34 	.word	0x0002eb34
   2ea50:	0002eb34 	.word	0x0002eb34
   2ea54:	0002eb34 	.word	0x0002eb34
   2ea58:	0002eb34 	.word	0x0002eb34
   2ea5c:	0002e920 	.word	0x0002e920
   2ea60:	0002eb34 	.word	0x0002eb34
   2ea64:	0002eb34 	.word	0x0002eb34
   2ea68:	0002eb34 	.word	0x0002eb34
   2ea6c:	0002eb34 	.word	0x0002eb34
   2ea70:	0002eb34 	.word	0x0002eb34
   2ea74:	0002e920 	.word	0x0002e920
   2ea78:	0002eb34 	.word	0x0002eb34
   2ea7c:	0002eb34 	.word	0x0002eb34
   2ea80:	0002eb34 	.word	0x0002eb34
   2ea84:	0002e920 	.word	0x0002e920
   2ea88:	0002eb34 	.word	0x0002eb34
   2ea8c:	0002eb34 	.word	0x0002eb34
   2ea90:	0002eb34 	.word	0x0002eb34
   2ea94:	0002eb34 	.word	0x0002eb34
   2ea98:	0002eb34 	.word	0x0002eb34
   2ea9c:	0002eb34 	.word	0x0002eb34
   2eaa0:	0002eb34 	.word	0x0002eb34
   2eaa4:	0002e920 	.word	0x0002e920
   2eaa8:	0002eb34 	.word	0x0002eb34
   2eaac:	0002eb34 	.word	0x0002eb34
   2eab0:	0002eb34 	.word	0x0002eb34
   2eab4:	0002e920 	.word	0x0002e920
   2eab8:	0002eb34 	.word	0x0002eb34
   2eabc:	0002e920 	.word	0x0002e920
   2eac0:	0002eac4 	.word	0x0002eac4
   2eac4:	e28c4002 	add	r4, ip, #2
   2eac8:	e5804000 	str	r4, [r0]
   2eacc:	e28cc006 	add	ip, ip, #6
   2ead0:	e1520004 	cmp	r2, r4
   2ead4:	0a00000d 	beq	2eb10 <JSMNR_parse+0x2a4>
   2ead8:	e1f9a0d1 	ldrsb	sl, [r9, #1]!
   2eadc:	e6ef607a 	uxtb	r6, sl
   2eae0:	e3c68020 	bic	r8, r6, #32
   2eae4:	e35a0000 	cmp	sl, #0
   2eae8:	e2488041 	sub	r8, r8, #65	; 0x41
   2eaec:	e2466030 	sub	r6, r6, #48	; 0x30
   2eaf0:	0a000006 	beq	2eb10 <JSMNR_parse+0x2a4>
   2eaf4:	e3580005 	cmp	r8, #5
   2eaf8:	83560009 	cmphi	r6, #9
   2eafc:	e2844001 	add	r4, r4, #1
   2eb00:	8a00000b 	bhi	2eb34 <JSMNR_parse+0x2c8>
   2eb04:	e154000c 	cmp	r4, ip
   2eb08:	e5804000 	str	r4, [r0]
   2eb0c:	1affffef 	bne	2ead0 <JSMNR_parse+0x264>
   2eb10:	e2444001 	sub	r4, r4, #1
   2eb14:	e284c001 	add	ip, r4, #1
   2eb18:	e152000c 	cmp	r2, ip
   2eb1c:	e580c000 	str	ip, [r0]
   2eb20:	8affff82 	bhi	2e930 <JSMNR_parse+0xc4>
   2eb24:	e3e05002 	mvn	r5, #2
   2eb28:	e580e000 	str	lr, [r0]
   2eb2c:	e1a00005 	mov	r0, r5
   2eb30:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eb34:	e3e05001 	mvn	r5, #1
   2eb38:	e580e000 	str	lr, [r0]
   2eb3c:	e1a00005 	mov	r0, r5
   2eb40:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eb44:	e37c0001 	cmn	ip, #1
   2eb48:	0a00002f 	beq	2ec0c <JSMNR_parse+0x3a0>
   2eb4c:	e590c000 	ldr	ip, [r0]
   2eb50:	e28ce001 	add	lr, ip, #1
   2eb54:	e152000e 	cmp	r2, lr
   2eb58:	e580e000 	str	lr, [r0]
   2eb5c:	8affff58 	bhi	2e8c4 <JSMNR_parse+0x58>
   2eb60:	e3530000 	cmp	r3, #0
   2eb64:	0afffff4 	beq	2eb3c <JSMNR_parse+0x2d0>
   2eb68:	e5901004 	ldr	r1, [r0, #4]
   2eb6c:	e2512001 	subs	r2, r1, #1
   2eb70:	4afffff1 	bmi	2eb3c <JSMNR_parse+0x2d0>
   2eb74:	e0833201 	add	r3, r3, r1, lsl #4
   2eb78:	ea000002 	b	2eb88 <JSMNR_parse+0x31c>
   2eb7c:	e3720001 	cmn	r2, #1
   2eb80:	e2433010 	sub	r3, r3, #16
   2eb84:	0affffec 	beq	2eb3c <JSMNR_parse+0x2d0>
   2eb88:	e513100c 	ldr	r1, [r3, #-12]
   2eb8c:	e2422001 	sub	r2, r2, #1
   2eb90:	e3710001 	cmn	r1, #1
   2eb94:	0afffff8 	beq	2eb7c <JSMNR_parse+0x310>
   2eb98:	e5131008 	ldr	r1, [r3, #-8]
   2eb9c:	e3710001 	cmn	r1, #1
   2eba0:	1afffff5 	bne	2eb7c <JSMNR_parse+0x310>
   2eba4:	e3e05002 	mvn	r5, #2
   2eba8:	eaffffe3 	b	2eb3c <JSMNR_parse+0x2d0>
   2ebac:	e35c007b 	cmp	ip, #123	; 0x7b
   2ebb0:	0a00001c 	beq	2ec28 <JSMNR_parse+0x3bc>
   2ebb4:	e35c007d 	cmp	ip, #125	; 0x7d
   2ebb8:	1a000058 	bne	2ed20 <JSMNR_parse+0x4b4>
   2ebbc:	e3530000 	cmp	r3, #0
   2ebc0:	0affffe1 	beq	2eb4c <JSMNR_parse+0x2e0>
   2ebc4:	e5904004 	ldr	r4, [r0, #4]
   2ebc8:	e35c007d 	cmp	ip, #125	; 0x7d
   2ebcc:	13a07002 	movne	r7, #2
   2ebd0:	03a07001 	moveq	r7, #1
   2ebd4:	e254c001 	subs	ip, r4, #1
   2ebd8:	4affffd9 	bmi	2eb44 <JSMNR_parse+0x2d8>
   2ebdc:	e244421f 	sub	r4, r4, #-268435455	; 0xf0000001
   2ebe0:	e0834204 	add	r4, r3, r4, lsl #4
   2ebe4:	e5946004 	ldr	r6, [r4, #4]
   2ebe8:	e3760001 	cmn	r6, #1
   2ebec:	0a000002 	beq	2ebfc <JSMNR_parse+0x390>
   2ebf0:	e5946008 	ldr	r6, [r4, #8]
   2ebf4:	e3760001 	cmn	r6, #1
   2ebf8:	0a00008b 	beq	2ee2c <JSMNR_parse+0x5c0>
   2ebfc:	e24cc001 	sub	ip, ip, #1
   2ec00:	e37c0001 	cmn	ip, #1
   2ec04:	e2444010 	sub	r4, r4, #16
   2ec08:	1afffff5 	bne	2ebe4 <JSMNR_parse+0x378>
   2ec0c:	e3a02001 	mov	r2, #1
   2ec10:	e59f02dc 	ldr	r0, [pc, #732]	; 2eef4 <JSMNR_parse+0x688>
   2ec14:	ebfffefe 	bl	2e814 <JSMNR_logLongStr>
   2ec18:	e3e05001 	mvn	r5, #1
   2ec1c:	eaffffc6 	b	2eb3c <JSMNR_parse+0x2d0>
   2ec20:	e35c005b 	cmp	ip, #91	; 0x5b
   2ec24:	1a00003d 	bne	2ed20 <JSMNR_parse+0x4b4>
   2ec28:	e3530000 	cmp	r3, #0
   2ec2c:	e2855001 	add	r5, r5, #1
   2ec30:	0affffc5 	beq	2eb4c <JSMNR_parse+0x2e0>
   2ec34:	e5904004 	ldr	r4, [r0, #4]
   2ec38:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2ec3c:	e1560004 	cmp	r6, r4
   2ec40:	9a000060 	bls	2edc8 <JSMNR_parse+0x55c>
   2ec44:	e2848001 	add	r8, r4, #1
   2ec48:	e5808004 	str	r8, [r0, #4]
   2ec4c:	e3e08000 	mvn	r8, #0
   2ec50:	e5907008 	ldr	r7, [r0, #8]
   2ec54:	e0836204 	add	r6, r3, r4, lsl #4
   2ec58:	e3770001 	cmn	r7, #1
   2ec5c:	10837207 	addne	r7, r3, r7, lsl #4
   2ec60:	e586b00c 	str	fp, [r6, #12]
   2ec64:	e5868004 	str	r8, [r6, #4]
   2ec68:	e5868008 	str	r8, [r6, #8]
   2ec6c:	1597800c 	ldrne	r8, [r7, #12]
   2ec70:	12888001 	addne	r8, r8, #1
   2ec74:	1587800c 	strne	r8, [r7, #12]
   2ec78:	e35c007b 	cmp	ip, #123	; 0x7b
   2ec7c:	13a07002 	movne	r7, #2
   2ec80:	03a07001 	moveq	r7, #1
   2ec84:	e590c000 	ldr	ip, [r0]
   2ec88:	e7c37204 	strb	r7, [r3, r4, lsl #4]
   2ec8c:	e586e004 	str	lr, [r6, #4]
   2ec90:	e5804008 	str	r4, [r0, #8]
   2ec94:	eaffff06 	b	2e8b4 <JSMNR_parse+0x48>
   2ec98:	e3530000 	cmp	r3, #0
   2ec9c:	0affffaa 	beq	2eb4c <JSMNR_parse+0x2e0>
   2eca0:	e590c008 	ldr	ip, [r0, #8]
   2eca4:	e37c0001 	cmn	ip, #1
   2eca8:	0affffa7 	beq	2eb4c <JSMNR_parse+0x2e0>
   2ecac:	e7d3c20c 	ldrb	ip, [r3, ip, lsl #4]
   2ecb0:	e24cc001 	sub	ip, ip, #1
   2ecb4:	e35c0001 	cmp	ip, #1
   2ecb8:	9affffa3 	bls	2eb4c <JSMNR_parse+0x2e0>
   2ecbc:	e590e004 	ldr	lr, [r0, #4]
   2ecc0:	e25e4001 	subs	r4, lr, #1
   2ecc4:	4affffa0 	bmi	2eb4c <JSMNR_parse+0x2e0>
   2ecc8:	e083e20e 	add	lr, r3, lr, lsl #4
   2eccc:	ea000003 	b	2ece0 <JSMNR_parse+0x474>
   2ecd0:	e2444001 	sub	r4, r4, #1
   2ecd4:	e3740001 	cmn	r4, #1
   2ecd8:	e24ee010 	sub	lr, lr, #16
   2ecdc:	0affff9a 	beq	2eb4c <JSMNR_parse+0x2e0>
   2ece0:	e55ec010 	ldrb	ip, [lr, #-16]
   2ece4:	e24cc001 	sub	ip, ip, #1
   2ece8:	e35c0001 	cmp	ip, #1
   2ecec:	8afffff7 	bhi	2ecd0 <JSMNR_parse+0x464>
   2ecf0:	e51ec00c 	ldr	ip, [lr, #-12]
   2ecf4:	e37c0001 	cmn	ip, #1
   2ecf8:	0afffff4 	beq	2ecd0 <JSMNR_parse+0x464>
   2ecfc:	e51ec008 	ldr	ip, [lr, #-8]
   2ed00:	e37c0001 	cmn	ip, #1
   2ed04:	1afffff1 	bne	2ecd0 <JSMNR_parse+0x464>
   2ed08:	e5804008 	str	r4, [r0, #8]
   2ed0c:	e590c000 	ldr	ip, [r0]
   2ed10:	eafffee7 	b	2e8b4 <JSMNR_parse+0x48>
   2ed14:	e24c7009 	sub	r7, ip, #9
   2ed18:	e3570001 	cmp	r7, #1
   2ed1c:	9affff8a 	bls	2eb4c <JSMNR_parse+0x2e0>
   2ed20:	e5904000 	ldr	r4, [r0]
   2ed24:	e1520004 	cmp	r2, r4
   2ed28:	9a00001d 	bls	2eda4 <JSMNR_parse+0x538>
   2ed2c:	e191c0d4 	ldrsb	ip, [r1, r4]
   2ed30:	e0816004 	add	r6, r1, r4
   2ed34:	e35c0000 	cmp	ip, #0
   2ed38:	1a000011 	bne	2ed84 <JSMNR_parse+0x518>
   2ed3c:	ea000018 	b	2eda4 <JSMNR_parse+0x538>
   2ed40:	e35c0009 	cmp	ip, #9
   2ed44:	ba000003 	blt	2ed58 <JSMNR_parse+0x4ec>
   2ed48:	e35c000a 	cmp	ip, #10
   2ed4c:	da000014 	ble	2eda4 <JSMNR_parse+0x538>
   2ed50:	e35c000d 	cmp	ip, #13
   2ed54:	0a000012 	beq	2eda4 <JSMNR_parse+0x538>
   2ed58:	e24cc020 	sub	ip, ip, #32
   2ed5c:	e6efc07c 	uxtb	ip, ip
   2ed60:	e35c005e 	cmp	ip, #94	; 0x5e
   2ed64:	8affff72 	bhi	2eb34 <JSMNR_parse+0x2c8>
   2ed68:	e2844001 	add	r4, r4, #1
   2ed6c:	e1520004 	cmp	r2, r4
   2ed70:	e5804000 	str	r4, [r0]
   2ed74:	0a00000a 	beq	2eda4 <JSMNR_parse+0x538>
   2ed78:	e1f6c0d1 	ldrsb	ip, [r6, #1]!
   2ed7c:	e35c0000 	cmp	ip, #0
   2ed80:	0a000007 	beq	2eda4 <JSMNR_parse+0x538>
   2ed84:	e35c0020 	cmp	ip, #32
   2ed88:	0a000005 	beq	2eda4 <JSMNR_parse+0x538>
   2ed8c:	daffffeb 	ble	2ed40 <JSMNR_parse+0x4d4>
   2ed90:	e35c003a 	cmp	ip, #58	; 0x3a
   2ed94:	0a000002 	beq	2eda4 <JSMNR_parse+0x538>
   2ed98:	ca00000c 	bgt	2edd0 <JSMNR_parse+0x564>
   2ed9c:	e35c002c 	cmp	ip, #44	; 0x2c
   2eda0:	1affffec 	bne	2ed58 <JSMNR_parse+0x4ec>
   2eda4:	e3530000 	cmp	r3, #0
   2eda8:	0244c001 	subeq	ip, r4, #1
   2edac:	02855001 	addeq	r5, r5, #1
   2edb0:	0afffebf 	beq	2e8b4 <JSMNR_parse+0x48>
   2edb4:	e590c004 	ldr	ip, [r0, #4]
   2edb8:	e59d6028 	ldr	r6, [sp, #40]	; 0x28
   2edbc:	e156000c 	cmp	r6, ip
   2edc0:	8a000007 	bhi	2ede4 <JSMNR_parse+0x578>
   2edc4:	e580e000 	str	lr, [r0]
   2edc8:	e3e05000 	mvn	r5, #0
   2edcc:	eaffff5a 	b	2eb3c <JSMNR_parse+0x2d0>
   2edd0:	e35c005d 	cmp	ip, #93	; 0x5d
   2edd4:	0afffff2 	beq	2eda4 <JSMNR_parse+0x538>
   2edd8:	e35c007d 	cmp	ip, #125	; 0x7d
   2eddc:	1affffdd 	bne	2ed58 <JSMNR_parse+0x4ec>
   2ede0:	eaffffef 	b	2eda4 <JSMNR_parse+0x538>
   2ede4:	e3a08004 	mov	r8, #4
   2ede8:	e5906008 	ldr	r6, [r0, #8]
   2edec:	e28c7001 	add	r7, ip, #1
   2edf0:	e5807004 	str	r7, [r0, #4]
   2edf4:	e3760001 	cmn	r6, #1
   2edf8:	e083720c 	add	r7, r3, ip, lsl #4
   2edfc:	e7c3820c 	strb	r8, [r3, ip, lsl #4]
   2ee00:	10836206 	addne	r6, r3, r6, lsl #4
   2ee04:	e587b00c 	str	fp, [r7, #12]
   2ee08:	e587e004 	str	lr, [r7, #4]
   2ee0c:	1596e00c 	ldrne	lr, [r6, #12]
   2ee10:	e244c001 	sub	ip, r4, #1
   2ee14:	128ee001 	addne	lr, lr, #1
   2ee18:	e5874008 	str	r4, [r7, #8]
   2ee1c:	e2855001 	add	r5, r5, #1
   2ee20:	e580c000 	str	ip, [r0]
   2ee24:	1586e00c 	strne	lr, [r6, #12]
   2ee28:	eafffea1 	b	2e8b4 <JSMNR_parse+0x48>
   2ee2c:	e5d48000 	ldrb	r8, [r4]
   2ee30:	e1580007 	cmp	r8, r7
   2ee34:	1a00002c 	bne	2eeec <JSMNR_parse+0x680>
   2ee38:	e28ee001 	add	lr, lr, #1
   2ee3c:	e5806008 	str	r6, [r0, #8]
   2ee40:	e083620c 	add	r6, r3, ip, lsl #4
   2ee44:	e584e008 	str	lr, [r4, #8]
   2ee48:	e596e004 	ldr	lr, [r6, #4]
   2ee4c:	e37e0001 	cmn	lr, #1
   2ee50:	0a000002 	beq	2ee60 <JSMNR_parse+0x5f4>
   2ee54:	e596e008 	ldr	lr, [r6, #8]
   2ee58:	e37e0001 	cmn	lr, #1
   2ee5c:	0a000005 	beq	2ee78 <JSMNR_parse+0x60c>
   2ee60:	e24cc001 	sub	ip, ip, #1
   2ee64:	e37c0001 	cmn	ip, #1
   2ee68:	e2466010 	sub	r6, r6, #16
   2ee6c:	1afffff5 	bne	2ee48 <JSMNR_parse+0x5dc>
   2ee70:	e590c000 	ldr	ip, [r0]
   2ee74:	eaffff35 	b	2eb50 <JSMNR_parse+0x2e4>
   2ee78:	e580c008 	str	ip, [r0, #8]
   2ee7c:	e590c000 	ldr	ip, [r0]
   2ee80:	eafffe8b 	b	2e8b4 <JSMNR_parse+0x48>
   2ee84:	e3530000 	cmp	r3, #0
   2ee88:	0a000014 	beq	2eee0 <JSMNR_parse+0x674>
   2ee8c:	e5906004 	ldr	r6, [r0, #4]
   2ee90:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   2ee94:	e1540006 	cmp	r4, r6
   2ee98:	9affffc9 	bls	2edc4 <JSMNR_parse+0x558>
   2ee9c:	e3a08003 	mov	r8, #3
   2eea0:	e590e008 	ldr	lr, [r0, #8]
   2eea4:	e2864001 	add	r4, r6, #1
   2eea8:	e5804004 	str	r4, [r0, #4]
   2eeac:	e37e0001 	cmn	lr, #1
   2eeb0:	e0834206 	add	r4, r3, r6, lsl #4
   2eeb4:	e7c38206 	strb	r8, [r3, r6, lsl #4]
   2eeb8:	e2855001 	add	r5, r5, #1
   2eebc:	e9841080 	stmib	r4, {r7, ip}
   2eec0:	e584b00c 	str	fp, [r4, #12]
   2eec4:	0affff20 	beq	2eb4c <JSMNR_parse+0x2e0>
   2eec8:	e083e20e 	add	lr, r3, lr, lsl #4
   2eecc:	e59e400c 	ldr	r4, [lr, #12]
   2eed0:	e590c000 	ldr	ip, [r0]
   2eed4:	e2844001 	add	r4, r4, #1
   2eed8:	e58e400c 	str	r4, [lr, #12]
   2eedc:	eafffe74 	b	2e8b4 <JSMNR_parse+0x48>
   2eee0:	e2855001 	add	r5, r5, #1
   2eee4:	e590c000 	ldr	ip, [r0]
   2eee8:	eafffe71 	b	2e8b4 <JSMNR_parse+0x48>
   2eeec:	e3e05001 	mvn	r5, #1
   2eef0:	eaffff11 	b	2eb3c <JSMNR_parse+0x2d0>
   2eef4:	00046090 	.word	0x00046090

0002eef8 <MiniHDLC::~MiniHDLC()>:
   2eef8:	e12fff1e 	bx	lr

0002eefc <MiniHDLC::~MiniHDLC()>:
   2eefc:	e92d4010 	push	{r4, lr}
   2ef00:	e1a04000 	mov	r4, r0
   2ef04:	e59f1008 	ldr	r1, [pc, #8]	; 2ef14 <MiniHDLC::~MiniHDLC()+0x18>
   2ef08:	ebfff067 	bl	2b0ac <operator delete(void*, unsigned int)>
   2ef0c:	e1a00004 	mov	r0, r4
   2ef10:	e8bd8010 	pop	{r4, pc}
   2ef14:	00004e6c 	.word	0x00004e6c

0002ef18 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]>:
   2ef18:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2ef1c:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   2ef20:	e59de01c 	ldr	lr, [sp, #28]
   2ef24:	e3560000 	cmp	r6, #0
   2ef28:	e59d8020 	ldr	r8, [sp, #32]
   2ef2c:	0a00001d 	beq	2efa8 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x90>
   2ef30:	e28ec002 	add	ip, lr, #2
   2ef34:	e152000c 	cmp	r2, ip
   2ef38:	859f9074 	ldrhi	r9, [pc, #116]	; 2efb4 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x9c>
   2ef3c:	8a00000b 	bhi	2ef70 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x58>
   2ef40:	ea000018 	b	2efa8 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x90>
   2ef44:	e5d05004 	ldrb	r5, [r0, #4]
   2ef48:	e155000c 	cmp	r5, ip
   2ef4c:	0a000011 	beq	2ef98 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x80>
   2ef50:	e2566001 	subs	r6, r6, #1
   2ef54:	e7c1c00e 	strb	ip, [r1, lr]
   2ef58:	e28e4003 	add	r4, lr, #3
   2ef5c:	e28ec001 	add	ip, lr, #1
   2ef60:	0a000011 	beq	2efac <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x94>
   2ef64:	e1540002 	cmp	r4, r2
   2ef68:	e1a0e00c 	mov	lr, ip
   2ef6c:	2a00000e 	bcs	2efac <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x94>
   2ef70:	e4d8c001 	ldrb	ip, [r8], #1
   2ef74:	e1d370b0 	ldrh	r7, [r3]
   2ef78:	e02c5427 	eor	r5, ip, r7, lsr #8
   2ef7c:	e1a05085 	lsl	r5, r5, #1
   2ef80:	e19940b5 	ldrh	r4, [r9, r5]
   2ef84:	e0244407 	eor	r4, r4, r7, lsl #8
   2ef88:	e1c340b0 	strh	r4, [r3]
   2ef8c:	e5d04005 	ldrb	r4, [r0, #5]
   2ef90:	e15c0004 	cmp	ip, r4
   2ef94:	1affffea 	bne	2ef44 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x2c>
   2ef98:	e7c1400e 	strb	r4, [r1, lr]
   2ef9c:	e22cc020 	eor	ip, ip, #32
   2efa0:	e28ee001 	add	lr, lr, #1
   2efa4:	eaffffe9 	b	2ef50 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]+0x38>
   2efa8:	e1a0c00e 	mov	ip, lr
   2efac:	e1a0000c 	mov	r0, ip
   2efb0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2efb4:	000460a4 	.word	0x000460a4

0002efb8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]>:
   2efb8:	e92d4070 	push	{r4, r5, r6, lr}
   2efbc:	e1d330b0 	ldrh	r3, [r3]
   2efc0:	e5d0e007 	ldrb	lr, [r0, #7]
   2efc4:	e59d4010 	ldr	r4, [sp, #16]
   2efc8:	e35e0000 	cmp	lr, #0
   2efcc:	e6efc073 	uxtb	ip, r3
   2efd0:	e1a03423 	lsr	r3, r3, #8
   2efd4:	11a0e003 	movne	lr, r3
   2efd8:	01a05003 	moveq	r5, r3
   2efdc:	e2843002 	add	r3, r4, #2
   2efe0:	01a0e00c 	moveq	lr, ip
   2efe4:	11a0500c 	movne	r5, ip
   2efe8:	e1530002 	cmp	r3, r2
   2efec:	2a000018 	bcs	2f054 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x9c>
   2eff0:	e5d02005 	ldrb	r2, [r0, #5]
   2eff4:	e1a03005 	mov	r3, r5
   2eff8:	e152000e 	cmp	r2, lr
   2effc:	0a000010 	beq	2f044 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x8c>
   2f000:	e5d06004 	ldrb	r6, [r0, #4]
   2f004:	e1a0c00e 	mov	ip, lr
   2f008:	e156000e 	cmp	r6, lr
   2f00c:	0a00000c 	beq	2f044 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x8c>
   2f010:	e7c1c004 	strb	ip, [r1, r4]
   2f014:	e5d0c005 	ldrb	ip, [r0, #5]
   2f018:	e2842001 	add	r2, r4, #1
   2f01c:	e15c0005 	cmp	ip, r5
   2f020:	0a00000d 	beq	2f05c <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0xa4>
   2f024:	e5d0e004 	ldrb	lr, [r0, #4]
   2f028:	e15e0005 	cmp	lr, r5
   2f02c:	0a00000a 	beq	2f05c <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0xa4>
   2f030:	e7e13002 	strb	r3, [r1, r2]!
   2f034:	e5d03004 	ldrb	r3, [r0, #4]
   2f038:	e2820002 	add	r0, r2, #2
   2f03c:	e5c13001 	strb	r3, [r1, #1]
   2f040:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f044:	e7c12004 	strb	r2, [r1, r4]
   2f048:	e22ec020 	eor	ip, lr, #32
   2f04c:	e2844001 	add	r4, r4, #1
   2f050:	eaffffee 	b	2f010 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x58>
   2f054:	e3a00000 	mov	r0, #0
   2f058:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f05c:	e7c1c002 	strb	ip, [r1, r2]
   2f060:	e2253020 	eor	r3, r5, #32
   2f064:	e2842002 	add	r2, r4, #2
   2f068:	eafffff0 	b	2f030 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]+0x78>

0002f06c <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)>:
   2f06c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2f070:	e59fe09c 	ldr	lr, [pc, #156]	; 2f114 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xa8>
   2f074:	e59f509c 	ldr	r5, [pc, #156]	; 2f118 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xac>
   2f078:	e580e000 	str	lr, [r0]
   2f07c:	e59fe098 	ldr	lr, [pc, #152]	; 2f11c <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb0>
   2f080:	e2807901 	add	r7, r0, #16384	; 0x4000
   2f084:	e2804a02 	add	r4, r0, #8192	; 0x2000
   2f088:	e3a0c000 	mov	ip, #0
   2f08c:	e580501c 	str	r5, [r0, #28]
   2f090:	e3e06000 	mvn	r6, #0
   2f094:	e5845738 	str	r5, [r4, #1848]	; 0x738
   2f098:	e584e730 	str	lr, [r4, #1840]	; 0x730
   2f09c:	e587ee4c 	str	lr, [r7, #3660]	; 0xe4c
   2f0a0:	e1a0e007 	mov	lr, r7
   2f0a4:	e59f5074 	ldr	r5, [pc, #116]	; 2f120 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb4>
   2f0a8:	e5875e50 	str	r5, [r7, #3664]	; 0xe50
   2f0ac:	e5dd5014 	ldrb	r5, [sp, #20]
   2f0b0:	e58ece5c 	str	ip, [lr, #3676]	; 0xe5c
   2f0b4:	e58ece60 	str	ip, [lr, #3680]	; 0xe60
   2f0b8:	e58ece64 	str	ip, [lr, #3684]	; 0xe64
   2f0bc:	e58ece68 	str	ip, [lr, #3688]	; 0xe68
   2f0c0:	e5dd7018 	ldrb	r7, [sp, #24]
   2f0c4:	e1c060bc 	strh	r6, [r0, #12]
   2f0c8:	e580c008 	str	ip, [r0, #8]
   2f0cc:	e5c0c00e 	strb	ip, [r0, #14]
   2f0d0:	e5c0c00f 	strb	ip, [r0, #15]
   2f0d4:	e5c0c010 	strb	ip, [r0, #16]
   2f0d8:	e580c014 	str	ip, [r0, #20]
   2f0dc:	e580c018 	str	ip, [r0, #24]
   2f0e0:	e5dd601c 	ldrb	r6, [sp, #28]
   2f0e4:	e58ece54 	str	ip, [lr, #3668]	; 0xe54
   2f0e8:	e58ece58 	str	ip, [lr, #3672]	; 0xe58
   2f0ec:	e5c05004 	strb	r5, [r0, #4]
   2f0f0:	e59fe02c 	ldr	lr, [pc, #44]	; 2f124 <MiniHDLC::MiniHDLC(unsigned long, void (*)(unsigned char), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, bool, bool)+0xb8>
   2f0f4:	e5dd5020 	ldrb	r5, [sp, #32]
   2f0f8:	e5c07005 	strb	r7, [r0, #5]
   2f0fc:	e5c06007 	strb	r6, [r0, #7]
   2f100:	e5c05006 	strb	r5, [r0, #6]
   2f104:	e58ec000 	str	ip, [lr]
   2f108:	e5841734 	str	r1, [r4, #1844]	; 0x734
   2f10c:	e58e3004 	str	r3, [lr, #4]
   2f110:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2f114:	000462ac 	.word	0x000462ac
   2f118:	0003ed44 	.word	0x0003ed44
   2f11c:	00002710 	.word	0x00002710
   2f120:	00001388 	.word	0x00001388
   2f124:	0004e1c4 	.word	0x0004e1c4

0002f128 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)>:
   2f128:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   2f12c:	e59f409c 	ldr	r4, [pc, #156]	; 2f1d0 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xa8>
   2f130:	e59f609c 	ldr	r6, [pc, #156]	; 2f1d4 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xac>
   2f134:	e5804000 	str	r4, [r0]
   2f138:	e59f4098 	ldr	r4, [pc, #152]	; 2f1d8 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xb0>
   2f13c:	e2805a02 	add	r5, r0, #8192	; 0x2000
   2f140:	e2808901 	add	r8, r0, #16384	; 0x4000
   2f144:	e3a0e000 	mov	lr, #0
   2f148:	e580601c 	str	r6, [r0, #28]
   2f14c:	e3e07000 	mvn	r7, #0
   2f150:	e5856738 	str	r6, [r5, #1848]	; 0x738
   2f154:	e5854730 	str	r4, [r5, #1840]	; 0x730
   2f158:	e5884e4c 	str	r4, [r8, #3660]	; 0xe4c
   2f15c:	e1a04008 	mov	r4, r8
   2f160:	e5dd901c 	ldrb	r9, [sp, #28]
   2f164:	e584ee5c 	str	lr, [r4, #3676]	; 0xe5c
   2f168:	e584ee60 	str	lr, [r4, #3680]	; 0xe60
   2f16c:	e584ee64 	str	lr, [r4, #3684]	; 0xe64
   2f170:	e584ee68 	str	lr, [r4, #3688]	; 0xe68
   2f174:	e5dd8028 	ldrb	r8, [sp, #40]	; 0x28
   2f178:	e580e008 	str	lr, [r0, #8]
   2f17c:	e5c0e00e 	strb	lr, [r0, #14]
   2f180:	e5c0e00f 	strb	lr, [r0, #15]
   2f184:	e5c0e010 	strb	lr, [r0, #16]
   2f188:	e580e014 	str	lr, [r0, #20]
   2f18c:	e580e018 	str	lr, [r0, #24]
   2f190:	e1c070bc 	strh	r7, [r0, #12]
   2f194:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   2f198:	e584ee54 	str	lr, [r4, #3668]	; 0xe54
   2f19c:	e584ee58 	str	lr, [r4, #3672]	; 0xe58
   2f1a0:	e5dd702c 	ldrb	r7, [sp, #44]	; 0x2c
   2f1a4:	e5c03004 	strb	r3, [r0, #4]
   2f1a8:	e59de020 	ldr	lr, [sp, #32]
   2f1ac:	e59f3028 	ldr	r3, [pc, #40]	; 2f1dc <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)+0xb4>
   2f1b0:	e5c09005 	strb	r9, [r0, #5]
   2f1b4:	e5c08007 	strb	r8, [r0, #7]
   2f1b8:	e5c07006 	strb	r7, [r0, #6]
   2f1bc:	e5831000 	str	r1, [r3]
   2f1c0:	e5856734 	str	r6, [r5, #1844]	; 0x734
   2f1c4:	e5832004 	str	r2, [r3, #4]
   2f1c8:	e584ee50 	str	lr, [r4, #3664]	; 0xe50
   2f1cc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f1d0:	000462ac 	.word	0x000462ac
   2f1d4:	0003ed44 	.word	0x0003ed44
   2f1d8:	00002710 	.word	0x00002710
   2f1dc:	0004e1c4 	.word	0x0004e1c4

0002f1e0 <MiniHDLC::clear()>:
   2f1e0:	e3a03000 	mov	r3, #0
   2f1e4:	e92d4010 	push	{r4, lr}
   2f1e8:	e3e0e000 	mvn	lr, #0
   2f1ec:	e59f1048 	ldr	r1, [pc, #72]	; 2f23c <MiniHDLC::clear()+0x5c>
   2f1f0:	e59fc048 	ldr	ip, [pc, #72]	; 2f240 <MiniHDLC::clear()+0x60>
   2f1f4:	e2802901 	add	r2, r0, #16384	; 0x4000
   2f1f8:	e2804a02 	add	r4, r0, #8192	; 0x2000
   2f1fc:	e5c03007 	strb	r3, [r0, #7]
   2f200:	e5c03006 	strb	r3, [r0, #6]
   2f204:	e58c3004 	str	r3, [ip, #4]
   2f208:	e5841734 	str	r1, [r4, #1844]	; 0x734
   2f20c:	e58c3000 	str	r3, [ip]
   2f210:	e5821e50 	str	r1, [r2, #3664]	; 0xe50
   2f214:	e5803008 	str	r3, [r0, #8]
   2f218:	e5c0300e 	strb	r3, [r0, #14]
   2f21c:	e5c0300f 	strb	r3, [r0, #15]
   2f220:	e5c03010 	strb	r3, [r0, #16]
   2f224:	e5803014 	str	r3, [r0, #20]
   2f228:	e5803018 	str	r3, [r0, #24]
   2f22c:	e1c0e0bc 	strh	lr, [r0, #12]
   2f230:	e5823e54 	str	r3, [r2, #3668]	; 0xe54
   2f234:	e5823e58 	str	r3, [r2, #3672]	; 0xe58
   2f238:	e8bd8010 	pop	{r4, pc}
   2f23c:	00001388 	.word	0x00001388
   2f240:	0004e1c4 	.word	0x0004e1c4

0002f244 <MiniHDLC::handleChar(unsigned char)>:
   2f244:	e92d4070 	push	{r4, r5, r6, lr}
   2f248:	e5d03004 	ldrb	r3, [r0, #4]
   2f24c:	e24dd010 	sub	sp, sp, #16
   2f250:	e1530001 	cmp	r3, r1
   2f254:	e1a04000 	mov	r4, r0
   2f258:	0a000035 	beq	2f334 <MiniHDLC::handleChar(unsigned char)+0xf0>
   2f25c:	e5d0300e 	ldrb	r3, [r0, #14]
   2f260:	e3530000 	cmp	r3, #0
   2f264:	1a00001a 	bne	2f2d4 <MiniHDLC::handleChar(unsigned char)+0x90>
   2f268:	e5d03005 	ldrb	r3, [r0, #5]
   2f26c:	e1530001 	cmp	r3, r1
   2f270:	03a03001 	moveq	r3, #1
   2f274:	05c0300e 	strbeq	r3, [r0, #14]
   2f278:	0a000013 	beq	2f2cc <MiniHDLC::handleChar(unsigned char)+0x88>
   2f27c:	e2842a02 	add	r2, r4, #8192	; 0x2000
   2f280:	e5920730 	ldr	r0, [r2, #1840]	; 0x730
   2f284:	e5943008 	ldr	r3, [r4, #8]
   2f288:	e1530000 	cmp	r3, r0
   2f28c:	3a000014 	bcc	2f2e4 <MiniHDLC::handleChar(unsigned char)+0xa0>
   2f290:	e3a00000 	mov	r0, #0
   2f294:	e3e01000 	mvn	r1, #0
   2f298:	e5922734 	ldr	r2, [r2, #1844]	; 0x734
   2f29c:	e1530002 	cmp	r3, r2
   2f2a0:	e2842901 	add	r2, r4, #16384	; 0x4000
   2f2a4:	25923e64 	ldrcs	r3, [r2, #3684]	; 0xe64
   2f2a8:	35923e68 	ldrcc	r3, [r2, #3688]	; 0xe68
   2f2ac:	22833001 	addcs	r3, r3, #1
   2f2b0:	32833001 	addcc	r3, r3, #1
   2f2b4:	25840008 	strcs	r0, [r4, #8]
   2f2b8:	21c410bc 	strhcs	r1, [r4, #12]
   2f2bc:	35840008 	strcc	r0, [r4, #8]
   2f2c0:	31c410bc 	strhcc	r1, [r4, #12]
   2f2c4:	25823e64 	strcs	r3, [r2, #3684]	; 0xe64
   2f2c8:	35823e68 	strcc	r3, [r2, #3688]	; 0xe68
   2f2cc:	e28dd010 	add	sp, sp, #16
   2f2d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f2d4:	e3a03000 	mov	r3, #0
   2f2d8:	e2211020 	eor	r1, r1, #32
   2f2dc:	e5c0300e 	strb	r3, [r0, #14]
   2f2e0:	eaffffe5 	b	2f27c <MiniHDLC::handleChar(unsigned char)+0x38>
   2f2e4:	e0842003 	add	r2, r4, r3
   2f2e8:	e3530001 	cmp	r3, #1
   2f2ec:	e5c21020 	strb	r1, [r2, #32]
   2f2f0:	9a00000b 	bls	2f324 <MiniHDLC::handleChar(unsigned char)+0xe0>
   2f2f4:	e2431002 	sub	r1, r3, #2
   2f2f8:	e1510000 	cmp	r1, r0
   2f2fc:	23a02000 	movcs	r2, #0
   2f300:	30841001 	addcc	r1, r4, r1
   2f304:	e1d400bc 	ldrh	r0, [r4, #12]
   2f308:	35d12020 	ldrbcc	r2, [r1, #32]
   2f30c:	e59f11b4 	ldr	r1, [pc, #436]	; 2f4c8 <MiniHDLC::handleChar(unsigned char)+0x284>
   2f310:	e0222420 	eor	r2, r2, r0, lsr #8
   2f314:	e1a02082 	lsl	r2, r2, #1
   2f318:	e19120b2 	ldrh	r2, [r1, r2]
   2f31c:	e0222400 	eor	r2, r2, r0, lsl #8
   2f320:	e1c420bc 	strh	r2, [r4, #12]
   2f324:	e2833001 	add	r3, r3, #1
   2f328:	e5843008 	str	r3, [r4, #8]
   2f32c:	e28dd010 	add	sp, sp, #16
   2f330:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f334:	e5900008 	ldr	r0, [r0, #8]
   2f338:	e3500001 	cmp	r0, #1
   2f33c:	9a00005d 	bls	2f4b8 <MiniHDLC::handleChar(unsigned char)+0x274>
   2f340:	e5d43007 	ldrb	r3, [r4, #7]
   2f344:	e3530000 	cmp	r3, #0
   2f348:	1a00003f 	bne	2f44c <MiniHDLC::handleChar(unsigned char)+0x208>
   2f34c:	e2842a02 	add	r2, r4, #8192	; 0x2000
   2f350:	e592c730 	ldr	ip, [r2, #1840]	; 0x730
   2f354:	e2401002 	sub	r1, r0, #2
   2f358:	e151000c 	cmp	r1, ip
   2f35c:	30843001 	addcc	r3, r4, r1
   2f360:	35d33020 	ldrbcc	r3, [r3, #32]
   2f364:	e2402001 	sub	r2, r0, #1
   2f368:	e15c0002 	cmp	ip, r2
   2f36c:	e6bf5073 	sxth	r5, r3
   2f370:	9a000052 	bls	2f4c0 <MiniHDLC::handleChar(unsigned char)+0x27c>
   2f374:	e0843002 	add	r3, r4, r2
   2f378:	e5d33020 	ldrb	r3, [r3, #32]
   2f37c:	e1a03403 	lsl	r3, r3, #8
   2f380:	e1855003 	orr	r5, r5, r3
   2f384:	e1d430bc 	ldrh	r3, [r4, #12]
   2f388:	e1530005 	cmp	r3, r5
   2f38c:	0a00003d 	beq	2f488 <MiniHDLC::handleChar(unsigned char)+0x244>
   2f390:	e35c0000 	cmp	ip, #0
   2f394:	0a00001e 	beq	2f414 <MiniHDLC::handleChar(unsigned char)+0x1d0>
   2f398:	e5d43020 	ldrb	r3, [r4, #32]
   2f39c:	e3530000 	cmp	r3, #0
   2f3a0:	0a00001b 	beq	2f414 <MiniHDLC::handleChar(unsigned char)+0x1d0>
   2f3a4:	e2846020 	add	r6, r4, #32
   2f3a8:	e1a02006 	mov	r2, r6
   2f3ac:	e3a03001 	mov	r3, #1
   2f3b0:	ea000007 	b	2f3d4 <MiniHDLC::handleChar(unsigned char)+0x190>
   2f3b4:	e5f21001 	ldrb	r1, [r2, #1]!
   2f3b8:	e3510000 	cmp	r1, #0
   2f3bc:	0a000006 	beq	2f3dc <MiniHDLC::handleChar(unsigned char)+0x198>
   2f3c0:	e2833001 	add	r3, r3, #1
   2f3c4:	e1500003 	cmp	r0, r3
   2f3c8:	0a000011 	beq	2f414 <MiniHDLC::handleChar(unsigned char)+0x1d0>
   2f3cc:	e35300c8 	cmp	r3, #200	; 0xc8
   2f3d0:	0a00000f 	beq	2f414 <MiniHDLC::handleChar(unsigned char)+0x1d0>
   2f3d4:	e153000c 	cmp	r3, ip
   2f3d8:	1afffff5 	bne	2f3b4 <MiniHDLC::handleChar(unsigned char)+0x170>
   2f3dc:	e2433001 	sub	r3, r3, #1
   2f3e0:	e35300c6 	cmp	r3, #198	; 0xc6
   2f3e4:	8a00000a 	bhi	2f414 <MiniHDLC::handleChar(unsigned char)+0x1d0>
   2f3e8:	ebffddf7 	bl	26bcc <CLogger::Get()>
   2f3ec:	e1d420bc 	ldrh	r2, [r4, #12]
   2f3f0:	e5943008 	ldr	r3, [r4, #8]
   2f3f4:	e59f10d0 	ldr	r1, [pc, #208]	; 2f4cc <MiniHDLC::handleChar(unsigned char)+0x288>
   2f3f8:	e58d2008 	str	r2, [sp, #8]
   2f3fc:	e58d3000 	str	r3, [sp]
   2f400:	e58d600c 	str	r6, [sp, #12]
   2f404:	e58d5004 	str	r5, [sp, #4]
   2f408:	e59f30c0 	ldr	r3, [pc, #192]	; 2f4d0 <MiniHDLC::handleChar(unsigned char)+0x28c>
   2f40c:	e3a02003 	mov	r2, #3
   2f410:	ebffdd2a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2f414:	e2843901 	add	r3, r4, #16384	; 0x4000
   2f418:	e5932e60 	ldr	r2, [r3, #3680]	; 0xe60
   2f41c:	e2822001 	add	r2, r2, #1
   2f420:	e5832e60 	str	r2, [r3, #3680]	; 0xe60
   2f424:	e3a01000 	mov	r1, #0
   2f428:	e3e00000 	mvn	r0, #0
   2f42c:	e5932e5c 	ldr	r2, [r3, #3676]	; 0xe5c
   2f430:	e5c4100e 	strb	r1, [r4, #14]
   2f434:	e2822001 	add	r2, r2, #1
   2f438:	e5841008 	str	r1, [r4, #8]
   2f43c:	e1c400bc 	strh	r0, [r4, #12]
   2f440:	e5832e5c 	str	r2, [r3, #3676]	; 0xe5c
   2f444:	e28dd010 	add	sp, sp, #16
   2f448:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f44c:	e2843a02 	add	r3, r4, #8192	; 0x2000
   2f450:	e593c730 	ldr	ip, [r3, #1840]	; 0x730
   2f454:	e2402001 	sub	r2, r0, #1
   2f458:	e152000c 	cmp	r2, ip
   2f45c:	23a05000 	movcs	r5, #0
   2f460:	30843002 	addcc	r3, r4, r2
   2f464:	35d35020 	ldrbcc	r5, [r3, #32]
   2f468:	e2401002 	sub	r1, r0, #2
   2f46c:	e15c0001 	cmp	ip, r1
   2f470:	e6bf5075 	sxth	r5, r5
   2f474:	9a000011 	bls	2f4c0 <MiniHDLC::handleChar(unsigned char)+0x27c>
   2f478:	e0843001 	add	r3, r4, r1
   2f47c:	e5d33020 	ldrb	r3, [r3, #32]
   2f480:	e1a03403 	lsl	r3, r3, #8
   2f484:	eaffffbd 	b	2f380 <MiniHDLC::handleChar(unsigned char)+0x13c>
   2f488:	e152000c 	cmp	r2, ip
   2f48c:	8a000009 	bhi	2f4b8 <MiniHDLC::handleChar(unsigned char)+0x274>
   2f490:	e151000c 	cmp	r1, ip
   2f494:	33a02000 	movcc	r2, #0
   2f498:	30843001 	addcc	r3, r4, r1
   2f49c:	35c32020 	strbcc	r2, [r3, #32]
   2f4a0:	e59f302c 	ldr	r3, [pc, #44]	; 2f4d4 <MiniHDLC::handleChar(unsigned char)+0x290>
   2f4a4:	e5933004 	ldr	r3, [r3, #4]
   2f4a8:	e3530000 	cmp	r3, #0
   2f4ac:	0a000001 	beq	2f4b8 <MiniHDLC::handleChar(unsigned char)+0x274>
   2f4b0:	e2840020 	add	r0, r4, #32
   2f4b4:	e12fff33 	blx	r3
   2f4b8:	e2843901 	add	r3, r4, #16384	; 0x4000
   2f4bc:	eaffffd8 	b	2f424 <MiniHDLC::handleChar(unsigned char)+0x1e0>
   2f4c0:	e3a03000 	mov	r3, #0
   2f4c4:	eaffffad 	b	2f380 <MiniHDLC::handleChar(unsigned char)+0x13c>
   2f4c8:	000460a4 	.word	0x000460a4
   2f4cc:	000462f4 	.word	0x000462f4
   2f4d0:	000462b4 	.word	0x000462b4
   2f4d4:	0004e1c4 	.word	0x0004e1c4

0002f4d8 <MiniHDLC::handleBit(unsigned char)>:
   2f4d8:	e3510000 	cmp	r1, #0
   2f4dc:	13e0207f 	mvnne	r2, #127	; 0x7f
   2f4e0:	03a02000 	moveq	r2, #0
   2f4e4:	e5d0300f 	ldrb	r3, [r0, #15]
   2f4e8:	e5d01004 	ldrb	r1, [r0, #4]
   2f4ec:	e18230a3 	orr	r3, r2, r3, lsr #1
   2f4f0:	e6ef3073 	uxtb	r3, r3
   2f4f4:	e1510003 	cmp	r1, r3
   2f4f8:	e92d4010 	push	{r4, lr}
   2f4fc:	e5c0300f 	strb	r3, [r0, #15]
   2f500:	e1a04000 	mov	r4, r0
   2f504:	0a00000b 	beq	2f538 <MiniHDLC::handleBit(unsigned char)+0x60>
   2f508:	e20330fc 	and	r3, r3, #252	; 0xfc
   2f50c:	e353007c 	cmp	r3, #124	; 0x7c
   2f510:	08bd8010 	popeq	{r4, pc}
   2f514:	e5d01010 	ldrb	r1, [r0, #16]
   2f518:	e5903014 	ldr	r3, [r0, #20]
   2f51c:	e18210a1 	orr	r1, r2, r1, lsr #1
   2f520:	e2833001 	add	r3, r3, #1
   2f524:	e6ef1071 	uxtb	r1, r1
   2f528:	e3530008 	cmp	r3, #8
   2f52c:	e5c01010 	strb	r1, [r0, #16]
   2f530:	e5803014 	str	r3, [r0, #20]
   2f534:	18bd8010 	popne	{r4, pc}
   2f538:	ebffff41 	bl	2f244 <MiniHDLC::handleChar(unsigned char)>
   2f53c:	e3a03000 	mov	r3, #0
   2f540:	e5c43010 	strb	r3, [r4, #16]
   2f544:	e5843014 	str	r3, [r4, #20]
   2f548:	e8bd8010 	pop	{r4, pc}

0002f54c <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)>:
   2f54c:	e92d4070 	push	{r4, r5, r6, lr}
   2f550:	e2525000 	subs	r5, r2, #0
   2f554:	08bd8070 	popeq	{r4, r5, r6, pc}
   2f558:	e1a06000 	mov	r6, r0
   2f55c:	e1a04001 	mov	r4, r1
   2f560:	e0815005 	add	r5, r1, r5
   2f564:	e4d41001 	ldrb	r1, [r4], #1
   2f568:	e1a00006 	mov	r0, r6
   2f56c:	ebffff34 	bl	2f244 <MiniHDLC::handleChar(unsigned char)>
   2f570:	e1540005 	cmp	r4, r5
   2f574:	1afffffa 	bne	2f564 <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)+0x18>
   2f578:	e8bd8070 	pop	{r4, r5, r6, pc}

0002f57c <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)>:
   2f57c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2f580:	e3e0e000 	mvn	lr, #0
   2f584:	e24dd01c 	sub	sp, sp, #28
   2f588:	e3520003 	cmp	r2, #3
   2f58c:	e1cde1b6 	strh	lr, [sp, #22]
   2f590:	9a000010 	bls	2f5d8 <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)+0x5c>
   2f594:	e3a0e001 	mov	lr, #1
   2f598:	e5d0c004 	ldrb	ip, [r0, #4]
   2f59c:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   2f5a0:	e58de000 	str	lr, [sp]
   2f5a4:	e98d0088 	stmib	sp, {r3, r7}
   2f5a8:	e5c1c000 	strb	ip, [r1]
   2f5ac:	e28d3016 	add	r3, sp, #22
   2f5b0:	e1a05000 	mov	r5, r0
   2f5b4:	ebfffe57 	bl	2ef18 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]>
   2f5b8:	e3500000 	cmp	r0, #0
   2f5bc:	0a000005 	beq	2f5d8 <MiniHDLC::encodeFrame(unsigned char*, unsigned long, unsigned char const*, unsigned long)+0x5c>
   2f5c0:	e58d0000 	str	r0, [sp]
   2f5c4:	e28d3016 	add	r3, sp, #22
   2f5c8:	e1a00005 	mov	r0, r5
   2f5cc:	ebfffe79 	bl	2efb8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]>
   2f5d0:	e28dd01c 	add	sp, sp, #28
   2f5d4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2f5d8:	e3a00000 	mov	r0, #0
   2f5dc:	e28dd01c 	add	sp, sp, #28
   2f5e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002f5e4 <MiniHDLC::encodeFrameStart(unsigned char*, unsigned long, unsigned short&)>:
   2f5e4:	e3e0c000 	mvn	ip, #0
   2f5e8:	e3520003 	cmp	r2, #3
   2f5ec:	e1c3c0b0 	strh	ip, [r3]
   2f5f0:	85d03004 	ldrbhi	r3, [r0, #4]
   2f5f4:	83a00001 	movhi	r0, #1
   2f5f8:	85c13000 	strbhi	r3, [r1]
   2f5fc:	93a00000 	movls	r0, #0
   2f600:	e12fff1e 	bx	lr

0002f604 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long)>:
   2f604:	e92d4010 	push	{r4, lr}
   2f608:	e59dc008 	ldr	ip, [sp, #8]
   2f60c:	e59de00c 	ldr	lr, [sp, #12]
   2f610:	e35c0000 	cmp	ip, #0
   2f614:	e59d4010 	ldr	r4, [sp, #16]
   2f618:	0a000001 	beq	2f624 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long)+0x20>
   2f61c:	e8bd4010 	pop	{r4, lr}
   2f620:	eafffe3c 	b	2ef18 <MiniHDLC::encodeFrameAddPayload(unsigned char*, unsigned long, unsigned short&, unsigned long, unsigned char const*, unsigned long) [clone .part.3]>
   2f624:	e1a0000c 	mov	r0, ip
   2f628:	e8bd8010 	pop	{r4, pc}

0002f62c <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long)>:
   2f62c:	e59dc000 	ldr	ip, [sp]
   2f630:	e35c0000 	cmp	ip, #0
   2f634:	0a000000 	beq	2f63c <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long)+0x10>
   2f638:	eafffe5e 	b	2efb8 <MiniHDLC::encodeFrameEnd(unsigned char*, unsigned long, unsigned short&, unsigned long) [clone .part.4]>
   2f63c:	e1a0000c 	mov	r0, ip
   2f640:	e12fff1e 	bx	lr

0002f644 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)>:
   2f644:	e3520000 	cmp	r2, #0
   2f648:	0a000011 	beq	2f694 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x50>
   2f64c:	e92d4010 	push	{r4, lr}
   2f650:	e1a04000 	mov	r4, r0
   2f654:	e1a00002 	mov	r0, r2
   2f658:	e5d4e004 	ldrb	lr, [r4, #4]
   2f65c:	e0812002 	add	r2, r1, r2
   2f660:	ea000004 	b	2f678 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x34>
   2f664:	e5d4c005 	ldrb	ip, [r4, #5]
   2f668:	e15c0003 	cmp	ip, r3
   2f66c:	0a000004 	beq	2f684 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x40>
   2f670:	e1510002 	cmp	r1, r2
   2f674:	0a000005 	beq	2f690 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x4c>
   2f678:	e4d13001 	ldrb	r3, [r1], #1
   2f67c:	e15e0003 	cmp	lr, r3
   2f680:	1afffff7 	bne	2f664 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x20>
   2f684:	e1510002 	cmp	r1, r2
   2f688:	e2800001 	add	r0, r0, #1
   2f68c:	1afffff9 	bne	2f678 <MiniHDLC::calcEncodedPayloadLen(unsigned char const*, unsigned long)+0x34>
   2f690:	e8bd8010 	pop	{r4, pc}
   2f694:	e1a00002 	mov	r0, r2
   2f698:	e12fff1e 	bx	lr

0002f69c <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)>:
   2f69c:	e0211420 	eor	r1, r1, r0, lsr #8
   2f6a0:	e59f3010 	ldr	r3, [pc, #16]	; 2f6b8 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char)+0x1c>
   2f6a4:	e1a01081 	lsl	r1, r1, #1
   2f6a8:	e19330b1 	ldrh	r3, [r3, r1]
   2f6ac:	e0230400 	eor	r0, r3, r0, lsl #8
   2f6b0:	e6ff0070 	uxth	r0, r0
   2f6b4:	e12fff1e 	bx	lr
   2f6b8:	000460a4 	.word	0x000460a4

0002f6bc <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)>:
   2f6bc:	e3520000 	cmp	r2, #0
   2f6c0:	012fff1e 	bxeq	lr
   2f6c4:	e59fc024 	ldr	ip, [pc, #36]	; 2f6f0 <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)+0x34>
   2f6c8:	e0812002 	add	r2, r1, r2
   2f6cc:	e4d13001 	ldrb	r3, [r1], #1
   2f6d0:	e0233420 	eor	r3, r3, r0, lsr #8
   2f6d4:	e1a03083 	lsl	r3, r3, #1
   2f6d8:	e19c30b3 	ldrh	r3, [ip, r3]
   2f6dc:	e1520001 	cmp	r2, r1
   2f6e0:	e0230400 	eor	r0, r3, r0, lsl #8
   2f6e4:	e6ff0070 	uxth	r0, r0
   2f6e8:	1afffff7 	bne	2f6cc <MiniHDLC::crcUpdateCCITT(unsigned short, unsigned char const*, unsigned int)+0x10>
   2f6ec:	e12fff1e 	bx	lr
   2f6f0:	000460a4 	.word	0x000460a4

0002f6f4 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)>:
   2f6f4:	e5d0c005 	ldrb	ip, [r0, #5]
   2f6f8:	e15c0001 	cmp	ip, r1
   2f6fc:	0a000005 	beq	2f718 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x24>
   2f700:	e5d00004 	ldrb	r0, [r0, #4]
   2f704:	e1500001 	cmp	r0, r1
   2f708:	0a000002 	beq	2f718 <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x24>
   2f70c:	e7c21003 	strb	r1, [r2, r3]
   2f710:	e2830001 	add	r0, r3, #1
   2f714:	e12fff1e 	bx	lr
   2f718:	e7c2c003 	strb	ip, [r2, r3]
   2f71c:	e2211020 	eor	r1, r1, #32
   2f720:	e2833001 	add	r3, r3, #1
   2f724:	eafffff8 	b	2f70c <MiniHDLC::putEscaped(unsigned char, unsigned char*, unsigned long)+0x18>

0002f728 <MiniHDLC::setFrameRxMaxLen(unsigned long)>:
   2f728:	e2800a02 	add	r0, r0, #8192	; 0x2000
   2f72c:	e5801734 	str	r1, [r0, #1844]	; 0x734
   2f730:	e12fff1e 	bx	lr

0002f734 <MiniHDLC::putCharToFrame(unsigned char)>:
   2f734:	e2803901 	add	r3, r0, #16384	; 0x4000
   2f738:	e5932e54 	ldr	r2, [r3, #3668]	; 0xe54
   2f73c:	e593ce50 	ldr	ip, [r3, #3664]	; 0xe50
   2f740:	e152000c 	cmp	r2, ip
   2f744:	2a000017 	bcs	2f7a8 <MiniHDLC::putCharToFrame(unsigned char)+0x74>
   2f748:	e5d0c006 	ldrb	ip, [r0, #6]
   2f74c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   2f750:	e35c0000 	cmp	ip, #0
   2f754:	e593ee4c 	ldr	lr, [r3, #3660]	; 0xe4c
   2f758:	0a00000b 	beq	2f78c <MiniHDLC::putCharToFrame(unsigned char)+0x58>
   2f75c:	e593ce58 	ldr	ip, [r3, #3672]	; 0xe58
   2f760:	e35c0000 	cmp	ip, #0
   2f764:	1a000013 	bne	2f7b8 <MiniHDLC::putCharToFrame(unsigned char)+0x84>
   2f768:	e3510000 	cmp	r1, #0
   2f76c:	13a01080 	movne	r1, #128	; 0x80
   2f770:	e152000e 	cmp	r2, lr
   2f774:	32800a02 	addcc	r0, r0, #8192	; 0x2000
   2f778:	30800002 	addcc	r0, r0, r2
   2f77c:	35c0173c 	strbcc	r1, [r0, #1852]	; 0x73c
   2f780:	e3a02001 	mov	r2, #1
   2f784:	e5832e58 	str	r2, [r3, #3672]	; 0xe58
   2f788:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2f78c:	e152000e 	cmp	r2, lr
   2f790:	32800a02 	addcc	r0, r0, #8192	; 0x2000
   2f794:	e282c001 	add	ip, r2, #1
   2f798:	30800002 	addcc	r0, r0, r2
   2f79c:	e583ce54 	str	ip, [r3, #3668]	; 0xe54
   2f7a0:	35c0173c 	strbcc	r1, [r0, #1852]	; 0x73c
   2f7a4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   2f7a8:	e3a02000 	mov	r2, #0
   2f7ac:	e5832e54 	str	r2, [r3, #3668]	; 0xe54
   2f7b0:	e5832e58 	str	r2, [r3, #3672]	; 0xe58
   2f7b4:	e12fff1e 	bx	lr
   2f7b8:	e152000e 	cmp	r2, lr
   2f7bc:	2a000009 	bcs	2f7e8 <MiniHDLC::putCharToFrame(unsigned char)+0xb4>
   2f7c0:	e2800a02 	add	r0, r0, #8192	; 0x2000
   2f7c4:	e080e002 	add	lr, r0, r2
   2f7c8:	e5dee73c 	ldrb	lr, [lr, #1852]	; 0x73c
   2f7cc:	e3510000 	cmp	r1, #0
   2f7d0:	e1a010ce 	asr	r1, lr, #1
   2f7d4:	e6afe071 	sxtb	lr, r1
   2f7d8:	138e1080 	orrne	r1, lr, #128	; 0x80
   2f7dc:	06ef1071 	uxtbeq	r1, r1
   2f7e0:	e0800002 	add	r0, r0, r2
   2f7e4:	e5c0173c 	strb	r1, [r0, #1852]	; 0x73c
   2f7e8:	e28cc001 	add	ip, ip, #1
   2f7ec:	e35c0008 	cmp	ip, #8
   2f7f0:	03a01000 	moveq	r1, #0
   2f7f4:	02820001 	addeq	r0, r2, #1
   2f7f8:	1583ce58 	strne	ip, [r3, #3672]	; 0xe58
   2f7fc:	05830e54 	streq	r0, [r3, #3668]	; 0xe54
   2f800:	05831e58 	streq	r1, [r3, #3672]	; 0xe58
   2f804:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0002f808 <MiniHDLC::sendChar(unsigned char)>:
   2f808:	e5d03006 	ldrb	r3, [r0, #6]
   2f80c:	e3530000 	cmp	r3, #0
   2f810:	0a00000a 	beq	2f840 <MiniHDLC::sendChar(unsigned char)+0x38>
   2f814:	e92d4070 	push	{r4, r5, r6, lr}
   2f818:	e1a06000 	mov	r6, r0
   2f81c:	e1a04001 	mov	r4, r1
   2f820:	e3a05008 	mov	r5, #8
   2f824:	e2041001 	and	r1, r4, #1
   2f828:	e1a00006 	mov	r0, r6
   2f82c:	ebffffc0 	bl	2f734 <MiniHDLC::putCharToFrame(unsigned char)>
   2f830:	e2555001 	subs	r5, r5, #1
   2f834:	e1a040a4 	lsr	r4, r4, #1
   2f838:	1afffff9 	bne	2f824 <MiniHDLC::sendChar(unsigned char)+0x1c>
   2f83c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f840:	eaffffbb 	b	2f734 <MiniHDLC::putCharToFrame(unsigned char)>

0002f844 <MiniHDLC::sendCharWithStuffing(unsigned char)>:
   2f844:	e5d03006 	ldrb	r3, [r0, #6]
   2f848:	e3530000 	cmp	r3, #0
   2f84c:	0a000019 	beq	2f8b8 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x74>
   2f850:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2f854:	e1a07000 	mov	r7, r0
   2f858:	e1a05001 	mov	r5, r1
   2f85c:	e3a06008 	mov	r6, #8
   2f860:	e3a08000 	mov	r8, #0
   2f864:	e2054001 	and	r4, r5, #1
   2f868:	e1a01004 	mov	r1, r4
   2f86c:	e1a00007 	mov	r0, r7
   2f870:	ebffffaf 	bl	2f734 <MiniHDLC::putCharToFrame(unsigned char)>
   2f874:	e3540000 	cmp	r4, #0
   2f878:	05874018 	streq	r4, [r7, #24]
   2f87c:	0a000004 	beq	2f894 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x50>
   2f880:	e5973018 	ldr	r3, [r7, #24]
   2f884:	e2833001 	add	r3, r3, #1
   2f888:	e3530005 	cmp	r3, #5
   2f88c:	e5873018 	str	r3, [r7, #24]
   2f890:	0a000003 	beq	2f8a4 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x60>
   2f894:	e2566001 	subs	r6, r6, #1
   2f898:	e1a050a5 	lsr	r5, r5, #1
   2f89c:	1afffff0 	bne	2f864 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x20>
   2f8a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2f8a4:	e1a01008 	mov	r1, r8
   2f8a8:	e1a00007 	mov	r0, r7
   2f8ac:	ebffffa0 	bl	2f734 <MiniHDLC::putCharToFrame(unsigned char)>
   2f8b0:	e5878018 	str	r8, [r7, #24]
   2f8b4:	eafffff6 	b	2f894 <MiniHDLC::sendCharWithStuffing(unsigned char)+0x50>
   2f8b8:	eaffffd2 	b	2f808 <MiniHDLC::sendChar(unsigned char)>

0002f8bc <MiniHDLC::sendEscaped(unsigned char)>:
   2f8bc:	e92d4070 	push	{r4, r5, r6, lr}
   2f8c0:	e1a04001 	mov	r4, r1
   2f8c4:	e5d01005 	ldrb	r1, [r0, #5]
   2f8c8:	e1a05000 	mov	r5, r0
   2f8cc:	e1510004 	cmp	r1, r4
   2f8d0:	0a000006 	beq	2f8f0 <MiniHDLC::sendEscaped(unsigned char)+0x34>
   2f8d4:	e5d03004 	ldrb	r3, [r0, #4]
   2f8d8:	e1530004 	cmp	r3, r4
   2f8dc:	0a000003 	beq	2f8f0 <MiniHDLC::sendEscaped(unsigned char)+0x34>
   2f8e0:	e1a01004 	mov	r1, r4
   2f8e4:	e1a00005 	mov	r0, r5
   2f8e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   2f8ec:	eaffffd4 	b	2f844 <MiniHDLC::sendCharWithStuffing(unsigned char)>
   2f8f0:	e1a00005 	mov	r0, r5
   2f8f4:	e2244020 	eor	r4, r4, #32
   2f8f8:	ebffffd1 	bl	2f844 <MiniHDLC::sendCharWithStuffing(unsigned char)>
   2f8fc:	e1a01004 	mov	r1, r4
   2f900:	e1a00005 	mov	r0, r5
   2f904:	e8bd4070 	pop	{r4, r5, r6, lr}
   2f908:	eaffffcd 	b	2f844 <MiniHDLC::sendCharWithStuffing(unsigned char)>

0002f90c <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>:
   2f90c:	e3a03000 	mov	r3, #0
   2f910:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f914:	e1a09002 	mov	r9, r2
   2f918:	e2807901 	add	r7, r0, #16384	; 0x4000
   2f91c:	e5873e54 	str	r3, [r7, #3668]	; 0xe54
   2f920:	e5873e58 	str	r3, [r7, #3672]	; 0xe58
   2f924:	e1a05001 	mov	r5, r1
   2f928:	e5d01004 	ldrb	r1, [r0, #4]
   2f92c:	e1a06000 	mov	r6, r0
   2f930:	ebffffb4 	bl	2f808 <MiniHDLC::sendChar(unsigned char)>
   2f934:	e3590000 	cmp	r9, #0
   2f938:	0a000029 	beq	2f9e4 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xd8>
   2f93c:	e59f20ac 	ldr	r2, [pc, #172]	; 2f9f0 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xe4>
   2f940:	e59f80ac 	ldr	r8, [pc, #172]	; 2f9f4 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xe8>
   2f944:	e4d51001 	ldrb	r1, [r5], #1
   2f948:	e1a00006 	mov	r0, r6
   2f94c:	e0213422 	eor	r3, r1, r2, lsr #8
   2f950:	e1a03083 	lsl	r3, r3, #1
   2f954:	e19840b3 	ldrh	r4, [r8, r3]
   2f958:	e0244402 	eor	r4, r4, r2, lsl #8
   2f95c:	e6bf4074 	sxth	r4, r4
   2f960:	ebffffd5 	bl	2f8bc <MiniHDLC::sendEscaped(unsigned char)>
   2f964:	e2599001 	subs	r9, r9, #1
   2f968:	e6ff2074 	uxth	r2, r4
   2f96c:	1afffff4 	bne	2f944 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0x38>
   2f970:	e6ef1074 	uxtb	r1, r4
   2f974:	e1a02422 	lsr	r2, r2, #8
   2f978:	e5d63007 	ldrb	r3, [r6, #7]
   2f97c:	e1a00006 	mov	r0, r6
   2f980:	e3530000 	cmp	r3, #0
   2f984:	11a05001 	movne	r5, r1
   2f988:	01a05002 	moveq	r5, r2
   2f98c:	11a01002 	movne	r1, r2
   2f990:	ebffffc9 	bl	2f8bc <MiniHDLC::sendEscaped(unsigned char)>
   2f994:	e1a01005 	mov	r1, r5
   2f998:	e1a00006 	mov	r0, r6
   2f99c:	ebffffc6 	bl	2f8bc <MiniHDLC::sendEscaped(unsigned char)>
   2f9a0:	e5d61004 	ldrb	r1, [r6, #4]
   2f9a4:	e1a00006 	mov	r0, r6
   2f9a8:	ebffff96 	bl	2f808 <MiniHDLC::sendChar(unsigned char)>
   2f9ac:	e59f3044 	ldr	r3, [pc, #68]	; 2f9f8 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0xec>
   2f9b0:	e5933000 	ldr	r3, [r3]
   2f9b4:	e3530000 	cmp	r3, #0
   2f9b8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f9bc:	e5971e54 	ldr	r1, [r7, #3668]	; 0xe54
   2f9c0:	e3510000 	cmp	r1, #0
   2f9c4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f9c8:	e2860c27 	add	r0, r6, #9984	; 0x2700
   2f9cc:	e280003c 	add	r0, r0, #60	; 0x3c
   2f9d0:	e12fff33 	blx	r3
   2f9d4:	e3a03000 	mov	r3, #0
   2f9d8:	e5873e54 	str	r3, [r7, #3668]	; 0xe54
   2f9dc:	e5873e58 	str	r3, [r7, #3672]	; 0xe58
   2f9e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f9e4:	e3a020ff 	mov	r2, #255	; 0xff
   2f9e8:	e1a01002 	mov	r1, r2
   2f9ec:	eaffffe1 	b	2f978 <MiniHDLC::sendFrame(unsigned char const*, unsigned int)+0x6c>
   2f9f0:	0000ffff 	.word	0x0000ffff
   2f9f4:	000460a4 	.word	0x000460a4
   2f9f8:	0004e1c4 	.word	0x0004e1c4

0002f9fc <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>:
   2f9fc:	e3510000 	cmp	r1, #0
   2fa00:	0a00000c 	beq	2fa38 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x3c>
   2fa04:	e1a02000 	mov	r2, r0
   2fa08:	e59fc030 	ldr	ip, [pc, #48]	; 2fa40 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x44>
   2fa0c:	e59f0030 	ldr	r0, [pc, #48]	; 2fa44 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x48>
   2fa10:	e0821001 	add	r1, r2, r1
   2fa14:	e4d23001 	ldrb	r3, [r2], #1
   2fa18:	e0233420 	eor	r3, r3, r0, lsr #8
   2fa1c:	e1a03083 	lsl	r3, r3, #1
   2fa20:	e19c30b3 	ldrh	r3, [ip, r3]
   2fa24:	e1510002 	cmp	r1, r2
   2fa28:	e0230400 	eor	r0, r3, r0, lsl #8
   2fa2c:	e6ff0070 	uxth	r0, r0
   2fa30:	1afffff7 	bne	2fa14 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x18>
   2fa34:	e12fff1e 	bx	lr
   2fa38:	e59f0004 	ldr	r0, [pc, #4]	; 2fa44 <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)+0x48>
   2fa3c:	e12fff1e 	bx	lr
   2fa40:	000460a4 	.word	0x000460a4
   2fa44:	0000ffff 	.word	0x0000ffff

0002fa48 <CommandHandler::hdlcFrameTxStatic(unsigned char const*, unsigned int)>:
   2fa48:	e59f3018 	ldr	r3, [pc, #24]	; 2fa68 <CommandHandler::hdlcFrameTxStatic(unsigned char const*, unsigned int)+0x20>
   2fa4c:	e5932000 	ldr	r2, [r3]
   2fa50:	e3520000 	cmp	r2, #0
   2fa54:	012fff1e 	bxeq	lr
   2fa58:	e5933004 	ldr	r3, [r3, #4]
   2fa5c:	e3530000 	cmp	r3, #0
   2fa60:	012fff1e 	bxeq	lr
   2fa64:	e12fff13 	bx	r3
   2fa68:	0004e1cc 	.word	0x0004e1cc

0002fa6c <CommandHandler::CommandHandler()>:
   2fa6c:	e92d4070 	push	{r4, r5, r6, lr}
   2fa70:	e3a0207d 	mov	r2, #125	; 0x7d
   2fa74:	e3a04000 	mov	r4, #0
   2fa78:	e3a06001 	mov	r6, #1
   2fa7c:	e1a05000 	mov	r5, r0
   2fa80:	e59f3090 	ldr	r3, [pc, #144]	; 2fb18 <CommandHandler::CommandHandler()+0xac>
   2fa84:	e24dd018 	sub	sp, sp, #24
   2fa88:	e58d2000 	str	r2, [sp]
   2fa8c:	e58d3008 	str	r3, [sp, #8]
   2fa90:	e58d3004 	str	r3, [sp, #4]
   2fa94:	e58d4010 	str	r4, [sp, #16]
   2fa98:	e58d600c 	str	r6, [sp, #12]
   2fa9c:	e3a0307e 	mov	r3, #126	; 0x7e
   2faa0:	e59f2074 	ldr	r2, [pc, #116]	; 2fb1c <CommandHandler::CommandHandler()+0xb0>
   2faa4:	e59f1074 	ldr	r1, [pc, #116]	; 2fb20 <CommandHandler::CommandHandler()+0xb4>
   2faa8:	e2800f65 	add	r0, r0, #404	; 0x194
   2faac:	ebfffd9d 	bl	2f128 <MiniHDLC::MiniHDLC(void (*)(unsigned char const*, unsigned int), void (*)(unsigned char const*, unsigned int), unsigned char, unsigned char, unsigned long, unsigned long, bool, bool)>
   2fab0:	e59f006c 	ldr	r0, [pc, #108]	; 2fb24 <CommandHandler::CommandHandler()+0xb8>
   2fab4:	e3a01032 	mov	r1, #50	; 0x32
   2fab8:	e5805000 	str	r5, [r0]
   2fabc:	e1a00005 	mov	r0, r5
   2fac0:	e2853a05 	add	r3, r5, #20480	; 0x5000
   2fac4:	e2852a07 	add	r2, r5, #28672	; 0x7000
   2fac8:	e5834870 	str	r4, [r3, #2160]	; 0x870
   2facc:	e5831878 	str	r1, [r3, #2168]	; 0x878
   2fad0:	e5834874 	str	r4, [r3, #2164]	; 0x874
   2fad4:	e58247fc 	str	r4, [r2, #2044]	; 0x7fc
   2fad8:	e5824800 	str	r4, [r2, #2048]	; 0x800
   2fadc:	e5824804 	str	r4, [r2, #2052]	; 0x804
   2fae0:	e5824808 	str	r4, [r2, #2056]	; 0x808
   2fae4:	e5854190 	str	r4, [r5, #400]	; 0x190
   2fae8:	e5c34000 	strb	r4, [r3]
   2faec:	e5c34065 	strb	r4, [r3, #101]	; 0x65
   2faf0:	e5c3408e 	strb	r4, [r3, #142]	; 0x8e
   2faf4:	e5834860 	str	r4, [r3, #2144]	; 0x860
   2faf8:	e5834864 	str	r4, [r3, #2148]	; 0x864
   2fafc:	e5834868 	str	r4, [r3, #2152]	; 0x868
   2fb00:	e583486c 	str	r4, [r3, #2156]	; 0x86c
   2fb04:	e58348b0 	str	r4, [r3, #2224]	; 0x8b0
   2fb08:	e5c267f8 	strb	r6, [r2, #2040]	; 0x7f8
   2fb0c:	e58247f4 	str	r4, [r2, #2036]	; 0x7f4
   2fb10:	e28dd018 	add	sp, sp, #24
   2fb14:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fb18:	00002710 	.word	0x00002710
   2fb1c:	00030ad8 	.word	0x00030ad8
   2fb20:	0002fa48 	.word	0x0002fa48
   2fb24:	0004e1cc 	.word	0x0004e1cc

0002fb28 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>:
   2fb28:	e590c190 	ldr	ip, [r0, #400]	; 0x190
   2fb2c:	e35c0013 	cmp	ip, #19
   2fb30:	8a00000e 	bhi	2fb70 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))+0x48>
   2fb34:	e92d4030 	push	{r4, r5, lr}
   2fb38:	e08c410c 	add	r4, ip, ip, lsl #2
   2fb3c:	e1a04104 	lsl	r4, r4, #2
   2fb40:	e080e004 	add	lr, r0, r4
   2fb44:	e7801004 	str	r1, [r0, r4]
   2fb48:	e58e3008 	str	r3, [lr, #8]
   2fb4c:	e59d300c 	ldr	r3, [sp, #12]
   2fb50:	e28c5001 	add	r5, ip, #1
   2fb54:	e58e300c 	str	r3, [lr, #12]
   2fb58:	e59d3010 	ldr	r3, [sp, #16]
   2fb5c:	e5ce2004 	strb	r2, [lr, #4]
   2fb60:	e58e3010 	str	r3, [lr, #16]
   2fb64:	e5805190 	str	r5, [r0, #400]	; 0x190
   2fb68:	e1a0000c 	mov	r0, ip
   2fb6c:	e8bd8030 	pop	{r4, r5, pc}
   2fb70:	e3e0c000 	mvn	ip, #0
   2fb74:	e1a0000c 	mov	r0, ip
   2fb78:	e12fff1e 	bx	lr

0002fb7c <CommandHandler::commsSocketEnable(unsigned int, bool)>:
   2fb7c:	e5903190 	ldr	r3, [r0, #400]	; 0x190
   2fb80:	e1530001 	cmp	r3, r1
   2fb84:	80811101 	addhi	r1, r1, r1, lsl #2
   2fb88:	80801101 	addhi	r1, r0, r1, lsl #2
   2fb8c:	85c12004 	strbhi	r2, [r1, #4]
   2fb90:	e12fff1e 	bx	lr

0002fb94 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)>:
   2fb94:	e59f3010 	ldr	r3, [pc, #16]	; 2fbac <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)+0x18>
   2fb98:	e5930000 	ldr	r0, [r3]
   2fb9c:	e3500000 	cmp	r0, #0
   2fba0:	012fff1e 	bxeq	lr
   2fba4:	e2800f65 	add	r0, r0, #404	; 0x194
   2fba8:	eafffe67 	b	2f54c <MiniHDLC::handleBuffer(unsigned char const*, unsigned int)>
   2fbac:	0004e1cc 	.word	0x0004e1cc

0002fbb0 <CommandHandler::hdlcTxAvailableStatic()>:
   2fbb0:	e59f3018 	ldr	r3, [pc, #24]	; 2fbd0 <CommandHandler::hdlcTxAvailableStatic()+0x20>
   2fbb4:	e5930000 	ldr	r0, [r3]
   2fbb8:	e3500000 	cmp	r0, #0
   2fbbc:	012fff1e 	bxeq	lr
   2fbc0:	e5930008 	ldr	r0, [r3, #8]
   2fbc4:	e3500000 	cmp	r0, #0
   2fbc8:	012fff1e 	bxeq	lr
   2fbcc:	e12fff10 	bx	r0
   2fbd0:	0004e1cc 	.word	0x0004e1cc

0002fbd4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>:
   2fbd4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fbd8:	e1a07000 	mov	r7, r0
   2fbdc:	e5900190 	ldr	r0, [r0, #400]	; 0x190
   2fbe0:	e24dd00c 	sub	sp, sp, #12
   2fbe4:	e3500000 	cmp	r0, #0
   2fbe8:	e1a08001 	mov	r8, r1
   2fbec:	e1a09002 	mov	r9, r2
   2fbf0:	e1a0a003 	mov	sl, r3
   2fbf4:	0a00002f 	beq	2fcb8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xe4>
   2fbf8:	e1a04007 	mov	r4, r7
   2fbfc:	e3a05000 	mov	r5, #0
   2fc00:	e3a0b004 	mov	fp, #4
   2fc04:	ea000012 	b	2fc54 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x80>
   2fc08:	e5946008 	ldr	r6, [r4, #8]
   2fc0c:	e3560000 	cmp	r6, #0
   2fc10:	0a00001f 	beq	2fc94 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xc0>
   2fc14:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   2fc18:	e5940000 	ldr	r0, [r4]
   2fc1c:	e58d3004 	str	r3, [sp, #4]
   2fc20:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   2fc24:	e1a02009 	mov	r2, r9
   2fc28:	e58d3000 	str	r3, [sp]
   2fc2c:	e1a01008 	mov	r1, r8
   2fc30:	e1a0300a 	mov	r3, sl
   2fc34:	e12fff36 	blx	r6
   2fc38:	e3500000 	cmp	r0, #0
   2fc3c:	1a000012 	bne	2fc8c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xb8>
   2fc40:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2fc44:	e2855001 	add	r5, r5, #1
   2fc48:	e1500005 	cmp	r0, r5
   2fc4c:	e2844014 	add	r4, r4, #20
   2fc50:	9a00000d 	bls	2fc8c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xb8>
   2fc54:	e5d43004 	ldrb	r3, [r4, #4]
   2fc58:	e3530000 	cmp	r3, #0
   2fc5c:	1affffe9 	bne	2fc08 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x34>
   2fc60:	ebffdbd9 	bl	26bcc <CLogger::Get()>
   2fc64:	e58d5000 	str	r5, [sp]
   2fc68:	e59f306c 	ldr	r3, [pc, #108]	; 2fcdc <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x108>
   2fc6c:	e1a0200b 	mov	r2, fp
   2fc70:	e59f1068 	ldr	r1, [pc, #104]	; 2fce0 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x10c>
   2fc74:	ebffdb11 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fc78:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2fc7c:	e2855001 	add	r5, r5, #1
   2fc80:	e1500005 	cmp	r0, r5
   2fc84:	e2844014 	add	r4, r4, #20
   2fc88:	8afffff1 	bhi	2fc54 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x80>
   2fc8c:	e28dd00c 	add	sp, sp, #12
   2fc90:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fc94:	e3550000 	cmp	r5, #0
   2fc98:	0affffe9 	beq	2fc44 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x70>
   2fc9c:	ebffdbca 	bl	26bcc <CLogger::Get()>
   2fca0:	e58d5000 	str	r5, [sp]
   2fca4:	e59f3038 	ldr	r3, [pc, #56]	; 2fce4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x110>
   2fca8:	e1a0200b 	mov	r2, fp
   2fcac:	e59f102c 	ldr	r1, [pc, #44]	; 2fce0 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x10c>
   2fcb0:	ebffdb02 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fcb4:	eaffffe1 	b	2fc40 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x6c>
   2fcb8:	ebffdbc3 	bl	26bcc <CLogger::Get()>
   2fcbc:	e59f3024 	ldr	r3, [pc, #36]	; 2fce8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x114>
   2fcc0:	e3a02004 	mov	r2, #4
   2fcc4:	e59f1014 	ldr	r1, [pc, #20]	; 2fce0 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x10c>
   2fcc8:	ebffdafc 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2fccc:	e5970190 	ldr	r0, [r7, #400]	; 0x190
   2fcd0:	e3500000 	cmp	r0, #0
   2fcd4:	1affffc7 	bne	2fbf8 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0x24>
   2fcd8:	eaffffeb 	b	2fc8c <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)+0xb8>
   2fcdc:	00046338 	.word	0x00046338
   2fce0:	00046300 	.word	0x00046300
   2fce4:	00046350 	.word	0x00046350
   2fce8:	00046310 	.word	0x00046310

0002fcec <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>:
   2fcec:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fcf0:	e590e190 	ldr	lr, [r0, #400]	; 0x190
   2fcf4:	e5dd7028 	ldrb	r7, [sp, #40]	; 0x28
   2fcf8:	e35e0000 	cmp	lr, #0
   2fcfc:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd00:	e1a09003 	mov	r9, r3
   2fd04:	e1a08002 	mov	r8, r2
   2fd08:	e1a0a001 	mov	sl, r1
   2fd0c:	e1a06000 	mov	r6, r0
   2fd10:	e1a04000 	mov	r4, r0
   2fd14:	e3a05000 	mov	r5, #0
   2fd18:	ea00000c 	b	2fd50 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x64>
   2fd1c:	e594300c 	ldr	r3, [r4, #12]
   2fd20:	e3530000 	cmp	r3, #0
   2fd24:	0a000005 	beq	2fd40 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fd28:	e1a01009 	mov	r1, r9
   2fd2c:	e1a00008 	mov	r0, r8
   2fd30:	e12fff33 	blx	r3
   2fd34:	e3500000 	cmp	r0, #0
   2fd38:	18bd8ff8 	popne	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd3c:	e596e190 	ldr	lr, [r6, #400]	; 0x190
   2fd40:	e2855001 	add	r5, r5, #1
   2fd44:	e15e0005 	cmp	lr, r5
   2fd48:	e2844014 	add	r4, r4, #20
   2fd4c:	9a00000f 	bls	2fd90 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0xa4>
   2fd50:	e5d4c004 	ldrb	ip, [r4, #4]
   2fd54:	e35c0000 	cmp	ip, #0
   2fd58:	0afffff8 	beq	2fd40 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fd5c:	e3570000 	cmp	r7, #0
   2fd60:	1affffed 	bne	2fd1c <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x30>
   2fd64:	e594b010 	ldr	fp, [r4, #16]
   2fd68:	e35b0000 	cmp	fp, #0
   2fd6c:	0afffff3 	beq	2fd40 <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x54>
   2fd70:	e1a03009 	mov	r3, r9
   2fd74:	e1a02008 	mov	r2, r8
   2fd78:	e1a0100a 	mov	r1, sl
   2fd7c:	e5940000 	ldr	r0, [r4]
   2fd80:	e12fff3b 	blx	fp
   2fd84:	e3500000 	cmp	r0, #0
   2fd88:	0affffeb 	beq	2fd3c <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)+0x50>
   2fd8c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd90:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002fd94 <CommandHandler::getFileReceiveStatus(unsigned long&, unsigned long&)>:
   2fd94:	e2803a05 	add	r3, r0, #20480	; 0x5000
   2fd98:	e5930864 	ldr	r0, [r3, #2148]	; 0x864
   2fd9c:	e3500000 	cmp	r0, #0
   2fda0:	012fff1e 	bxeq	lr
   2fda4:	e5933868 	ldr	r3, [r3, #2152]	; 0x868
   2fda8:	e1500003 	cmp	r0, r3
   2fdac:	15810000 	strne	r0, [r1]
   2fdb0:	13a00001 	movne	r0, #1
   2fdb4:	15823000 	strne	r3, [r2]
   2fdb8:	03a00000 	moveq	r0, #0
   2fdbc:	e12fff1e 	bx	lr

0002fdc0 <CommandHandler::sendKeyStrToTarget(char const*)>:
   2fdc0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2fdc4:	e3a04000 	mov	r4, #0
   2fdc8:	e1a07000 	mov	r7, r0
   2fdcc:	e1a05001 	mov	r5, r1
   2fdd0:	e1a08004 	mov	r8, r4
   2fdd4:	e59f60a0 	ldr	r6, [pc, #160]	; 2fe7c <CommandHandler::sendKeyStrToTarget(char const*)+0xbc>
   2fdd8:	e2809a05 	add	r9, r0, #20480	; 0x5000
   2fddc:	ea00000f 	b	2fe20 <CommandHandler::sendKeyStrToTarget(char const*)+0x60>
   2fde0:	e3510000 	cmp	r1, #0
   2fde4:	01520003 	cmpeq	r2, r3
   2fde8:	0a00000b 	beq	2fe1c <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fdec:	e5993870 	ldr	r3, [r9, #2160]	; 0x870
   2fdf0:	e7d52004 	ldrb	r2, [r5, r4]
   2fdf4:	e0873003 	add	r3, r7, r3
   2fdf8:	e2833b16 	add	r3, r3, #22528	; 0x5800
   2fdfc:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
   2fe00:	e5993870 	ldr	r3, [r9, #2160]	; 0x870
   2fe04:	e5992878 	ldr	r2, [r9, #2168]	; 0x878
   2fe08:	e2833001 	add	r3, r3, #1
   2fe0c:	e5893870 	str	r3, [r9, #2160]	; 0x870
   2fe10:	e5993870 	ldr	r3, [r9, #2160]	; 0x870
   2fe14:	e1530002 	cmp	r3, r2
   2fe18:	25898870 	strcs	r8, [r9, #2160]	; 0x870
   2fe1c:	e2844001 	add	r4, r4, #1
   2fe20:	e1a00005 	mov	r0, r5
   2fe24:	ebffe894 	bl	2a07c <strlen>
   2fe28:	e1540000 	cmp	r4, r0
   2fe2c:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
   2fe30:	e5963000 	ldr	r3, [r6]
   2fe34:	e2833a05 	add	r3, r3, #20480	; 0x5000
   2fe38:	e5932878 	ldr	r2, [r3, #2168]	; 0x878
   2fe3c:	e3520000 	cmp	r2, #0
   2fe40:	0afffff5 	beq	2fe1c <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fe44:	e5930870 	ldr	r0, [r3, #2160]	; 0x870
   2fe48:	e5931874 	ldr	r1, [r3, #2164]	; 0x874
   2fe4c:	e2422001 	sub	r2, r2, #1
   2fe50:	e1500001 	cmp	r0, r1
   2fe54:	0affffe4 	beq	2fdec <CommandHandler::sendKeyStrToTarget(char const*)+0x2c>
   2fe58:	e5931874 	ldr	r1, [r3, #2164]	; 0x874
   2fe5c:	e5930870 	ldr	r0, [r3, #2160]	; 0x870
   2fe60:	e5933870 	ldr	r3, [r3, #2160]	; 0x870
   2fe64:	e1510000 	cmp	r1, r0
   2fe68:	3affffdc 	bcc	2fde0 <CommandHandler::sendKeyStrToTarget(char const*)+0x20>
   2fe6c:	e0411003 	sub	r1, r1, r3
   2fe70:	e3510001 	cmp	r1, #1
   2fe74:	8affffdc 	bhi	2fdec <CommandHandler::sendKeyStrToTarget(char const*)+0x2c>
   2fe78:	eaffffe7 	b	2fe1c <CommandHandler::sendKeyStrToTarget(char const*)+0x5c>
   2fe7c:	0004e1cc 	.word	0x0004e1cc

0002fe80 <CommandHandler::sendKeyStrToTargetStatic(char const*)>:
   2fe80:	e59f300c 	ldr	r3, [pc, #12]	; 2fe94 <CommandHandler::sendKeyStrToTargetStatic(char const*)+0x14>
   2fe84:	e5930000 	ldr	r0, [r3]
   2fe88:	e3500000 	cmp	r0, #0
   2fe8c:	012fff1e 	bxeq	lr
   2fe90:	eaffffca 	b	2fdc0 <CommandHandler::sendKeyStrToTarget(char const*)>
   2fe94:	0004e1cc 	.word	0x0004e1cc

0002fe98 <CommandHandler::getTxAvailable()>:
   2fe98:	e59f3018 	ldr	r3, [pc, #24]	; 2feb8 <CommandHandler::getTxAvailable()+0x20>
   2fe9c:	e5930000 	ldr	r0, [r3]
   2fea0:	e3500000 	cmp	r0, #0
   2fea4:	012fff1e 	bxeq	lr
   2fea8:	e5930008 	ldr	r0, [r3, #8]
   2feac:	e3500000 	cmp	r0, #0
   2feb0:	012fff1e 	bxeq	lr
   2feb4:	e12fff10 	bx	r0
   2feb8:	0004e1cc 	.word	0x0004e1cc

0002febc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
   2febc:	e92d4070 	push	{r4, r5, r6, lr}
   2fec0:	e1a06001 	mov	r6, r1
   2fec4:	e1a05002 	mov	r5, r2
   2fec8:	e24ddc4e 	sub	sp, sp, #19968	; 0x4e00
   2fecc:	e24dd050 	sub	sp, sp, #80	; 0x50
   2fed0:	e28d1c4e 	add	r1, sp, #19968	; 0x4e00
   2fed4:	e2811064 	add	r1, r1, #100	; 0x64
   2fed8:	e5914000 	ldr	r4, [r1]
   2fedc:	e28dc030 	add	ip, sp, #48	; 0x30
   2fee0:	e59f2188 	ldr	r2, [pc, #392]	; 30070 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b4>
   2fee4:	e3a01014 	mov	r1, #20
   2fee8:	e28d0008 	add	r0, sp, #8
   2feec:	e58dc004 	str	ip, [sp, #4]
   2fef0:	ebfff8bf 	bl	2e1f4 <snprintf>
   2fef4:	e1a03004 	mov	r3, r4
   2fef8:	e59f2170 	ldr	r2, [pc, #368]	; 30070 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b4>
   2fefc:	e3a01014 	mov	r1, #20
   2ff00:	e28d001c 	add	r0, sp, #28
   2ff04:	ebfff8ba 	bl	2e1f4 <snprintf>
   2ff08:	e59f2164 	ldr	r2, [pc, #356]	; 30074 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff0c:	e59f1164 	ldr	r1, [pc, #356]	; 30078 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1bc>
   2ff10:	e59d0004 	ldr	r0, [sp, #4]
   2ff14:	ebfff83f 	bl	2e018 <strlcpy>
   2ff18:	e1a01006 	mov	r1, r6
   2ff1c:	e59f2150 	ldr	r2, [pc, #336]	; 30074 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff20:	e59d0004 	ldr	r0, [sp, #4]
   2ff24:	ebfff857 	bl	2e088 <strlcat>
   2ff28:	e59f2144 	ldr	r2, [pc, #324]	; 30074 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff2c:	e59f1148 	ldr	r1, [pc, #328]	; 3007c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c0>
   2ff30:	e59d0004 	ldr	r0, [sp, #4]
   2ff34:	ebfff853 	bl	2e088 <strlcat>
   2ff38:	e1a00005 	mov	r0, r5
   2ff3c:	ebffe84e 	bl	2a07c <strlen>
   2ff40:	e3500000 	cmp	r0, #0
   2ff44:	1a000040 	bne	3004c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x190>
   2ff48:	e59f2124 	ldr	r2, [pc, #292]	; 30074 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff4c:	e59f112c 	ldr	r1, [pc, #300]	; 30080 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c4>
   2ff50:	e59d0004 	ldr	r0, [sp, #4]
   2ff54:	ebfff84b 	bl	2e088 <strlcat>
   2ff58:	e28d1008 	add	r1, sp, #8
   2ff5c:	e59f2110 	ldr	r2, [pc, #272]	; 30074 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff60:	e59d0004 	ldr	r0, [sp, #4]
   2ff64:	ebfff847 	bl	2e088 <strlcat>
   2ff68:	e59f2104 	ldr	r2, [pc, #260]	; 30074 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff6c:	e59f1110 	ldr	r1, [pc, #272]	; 30084 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1c8>
   2ff70:	e59d0004 	ldr	r0, [sp, #4]
   2ff74:	ebfff843 	bl	2e088 <strlcat>
   2ff78:	e28d101c 	add	r1, sp, #28
   2ff7c:	e59f20f0 	ldr	r2, [pc, #240]	; 30074 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff80:	e59d0004 	ldr	r0, [sp, #4]
   2ff84:	ebfff83f 	bl	2e088 <strlcat>
   2ff88:	e59f20e4 	ldr	r2, [pc, #228]	; 30074 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   2ff8c:	e59f10f4 	ldr	r1, [pc, #244]	; 30088 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1cc>
   2ff90:	e59d0004 	ldr	r0, [sp, #4]
   2ff94:	ebfff83b 	bl	2e088 <strlcat>
   2ff98:	e59d0004 	ldr	r0, [sp, #4]
   2ff9c:	ebffe836 	bl	2a07c <strlen>
   2ffa0:	e2800001 	add	r0, r0, #1
   2ffa4:	e0845000 	add	r5, r4, r0
   2ffa8:	e59f30dc 	ldr	r3, [pc, #220]	; 3008c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d0>
   2ffac:	e2856001 	add	r6, r5, #1
   2ffb0:	e1560003 	cmp	r6, r3
   2ffb4:	8a00001c 	bhi	3002c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x170>
   2ffb8:	e3540000 	cmp	r4, #0
   2ffbc:	0a00000b 	beq	2fff0 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x134>
   2ffc0:	e28d3c4e 	add	r3, sp, #19968	; 0x4e00
   2ffc4:	e2833060 	add	r3, r3, #96	; 0x60
   2ffc8:	e5933000 	ldr	r3, [r3]
   2ffcc:	e3530000 	cmp	r3, #0
   2ffd0:	0a000012 	beq	30020 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x164>
   2ffd4:	e59d3004 	ldr	r3, [sp, #4]
   2ffd8:	e1a02004 	mov	r2, r4
   2ffdc:	e0830000 	add	r0, r3, r0
   2ffe0:	e28d3c4e 	add	r3, sp, #19968	; 0x4e00
   2ffe4:	e2833060 	add	r3, r3, #96	; 0x60
   2ffe8:	e5931000 	ldr	r1, [r3]
   2ffec:	ebffea47 	bl	2a910 <memcpy>
   2fff0:	e3a03000 	mov	r3, #0
   2fff4:	e59f2094 	ldr	r2, [pc, #148]	; 30090 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d4>
   2fff8:	e5920000 	ldr	r0, [r2]
   2fffc:	e28d2ee5 	add	r2, sp, #3664	; 0xe50
   30000:	e0825005 	add	r5, r2, r5
   30004:	e1500003 	cmp	r0, r3
   30008:	e5453e20 	strb	r3, [r5, #-3616]	; 0xfffff1e0
   3000c:	0a000003 	beq	30020 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x164>
   30010:	e1a02006 	mov	r2, r6
   30014:	e59d1004 	ldr	r1, [sp, #4]
   30018:	e2800f65 	add	r0, r0, #404	; 0x194
   3001c:	ebfffe3a 	bl	2f90c <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>
   30020:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   30024:	e28dd050 	add	sp, sp, #80	; 0x50
   30028:	e8bd8070 	pop	{r4, r5, r6, pc}
   3002c:	ebffdae6 	bl	26bcc <CLogger::Get()>
   30030:	e59f305c 	ldr	r3, [pc, #92]	; 30094 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1d8>
   30034:	e3a02002 	mov	r2, #2
   30038:	e59f1058 	ldr	r1, [pc, #88]	; 30098 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1dc>
   3003c:	ebffda1f 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30040:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   30044:	e28dd050 	add	sp, sp, #80	; 0x50
   30048:	e8bd8070 	pop	{r4, r5, r6, pc}
   3004c:	e59f2020 	ldr	r2, [pc, #32]	; 30074 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   30050:	e59f1044 	ldr	r1, [pc, #68]	; 3009c <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1e0>
   30054:	e59d0004 	ldr	r0, [sp, #4]
   30058:	ebfff80a 	bl	2e088 <strlcat>
   3005c:	e1a01005 	mov	r1, r5
   30060:	e59f200c 	ldr	r2, [pc, #12]	; 30074 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x1b8>
   30064:	e59d0004 	ldr	r0, [sp, #4]
   30068:	ebfff806 	bl	2e088 <strlcat>
   3006c:	eaffffb5 	b	2ff48 <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)+0x8c>
   30070:	00046364 	.word	0x00046364
   30074:	00004e20 	.word	0x00004e20
   30078:	00046368 	.word	0x00046368
   3007c:	00046eec 	.word	0x00046eec
   30080:	00046378 	.word	0x00046378
   30084:	00046384 	.word	0x00046384
   30088:	000463ac 	.word	0x000463ac
   3008c:	00004e1f 	.word	0x00004e1f
   30090:	0004e1cc 	.word	0x0004e1cc
   30094:	00046390 	.word	0x00046390
   30098:	00046300 	.word	0x00046300
   3009c:	00043330 	.word	0x00043330

000300a0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>:
   300a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   300a4:	e1a08002 	mov	r8, r2
   300a8:	e1a07003 	mov	r7, r3
   300ac:	e1a05001 	mov	r5, r1
   300b0:	e24ddc27 	sub	sp, sp, #9984	; 0x2700
   300b4:	e24dd028 	sub	sp, sp, #40	; 0x28
   300b8:	e1a03001 	mov	r3, r1
   300bc:	e28d4018 	add	r4, sp, #24
   300c0:	e59f20c4 	ldr	r2, [pc, #196]	; 3018c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xec>
   300c4:	e3a0100a 	mov	r1, #10
   300c8:	e1a06000 	mov	r6, r0
   300cc:	e28d000c 	add	r0, sp, #12
   300d0:	ebfff847 	bl	2e1f4 <snprintf>
   300d4:	e59f20b4 	ldr	r2, [pc, #180]	; 30190 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   300d8:	e59f10b4 	ldr	r1, [pc, #180]	; 30194 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf4>
   300dc:	e1a00004 	mov	r0, r4
   300e0:	ebfff7cc 	bl	2e018 <strlcpy>
   300e4:	e1a01008 	mov	r1, r8
   300e8:	e59f20a0 	ldr	r2, [pc, #160]	; 30190 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   300ec:	e1a00004 	mov	r0, r4
   300f0:	ebfff7e4 	bl	2e088 <strlcat>
   300f4:	e59f2094 	ldr	r2, [pc, #148]	; 30190 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   300f8:	e59f1098 	ldr	r1, [pc, #152]	; 30198 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf8>
   300fc:	e1a00004 	mov	r0, r4
   30100:	ebfff7e0 	bl	2e088 <strlcat>
   30104:	e59f2084 	ldr	r2, [pc, #132]	; 30190 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   30108:	e59f108c 	ldr	r1, [pc, #140]	; 3019c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xfc>
   3010c:	e1a00004 	mov	r0, r4
   30110:	ebfff7dc 	bl	2e088 <strlcat>
   30114:	e1a01007 	mov	r1, r7
   30118:	e1a00004 	mov	r0, r4
   3011c:	e59f206c 	ldr	r2, [pc, #108]	; 30190 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   30120:	ebfff7d8 	bl	2e088 <strlcat>
   30124:	e3750001 	cmn	r5, #1
   30128:	0a000007 	beq	3014c <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xac>
   3012c:	e59f205c 	ldr	r2, [pc, #92]	; 30190 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   30130:	e59f1068 	ldr	r1, [pc, #104]	; 301a0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x100>
   30134:	e1a00004 	mov	r0, r4
   30138:	ebfff7d2 	bl	2e088 <strlcat>
   3013c:	e28d100c 	add	r1, sp, #12
   30140:	e59f2048 	ldr	r2, [pc, #72]	; 30190 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   30144:	e1a00004 	mov	r0, r4
   30148:	ebfff7ce 	bl	2e088 <strlcat>
   3014c:	e59f203c 	ldr	r2, [pc, #60]	; 30190 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0xf0>
   30150:	e59f104c 	ldr	r1, [pc, #76]	; 301a4 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x104>
   30154:	e1a00004 	mov	r0, r4
   30158:	ebfff7ca 	bl	2e088 <strlcat>
   3015c:	e1a00004 	mov	r0, r4
   30160:	ebffe7c5 	bl	2a07c <strlen>
   30164:	e58d4000 	str	r4, [sp]
   30168:	e58d0004 	str	r0, [sp, #4]
   3016c:	e1a03005 	mov	r3, r5
   30170:	e1a00006 	mov	r0, r6
   30174:	e59f202c 	ldr	r2, [pc, #44]	; 301a8 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x108>
   30178:	e59f102c 	ldr	r1, [pc, #44]	; 301ac <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)+0x10c>
   3017c:	ebffff4e 	bl	2febc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30180:	e28ddc27 	add	sp, sp, #9984	; 0x2700
   30184:	e28dd028 	add	sp, sp, #40	; 0x28
   30188:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3018c:	00046364 	.word	0x00046364
   30190:	00002710 	.word	0x00002710
   30194:	00046368 	.word	0x00046368
   30198:	00046eec 	.word	0x00046eec
   3019c:	00043330 	.word	0x00043330
   301a0:	00046378 	.word	0x00046378
   301a4:	000463a0 	.word	0x000463a0
   301a8:	00047764 	.word	0x00047764
   301ac:	000463b0 	.word	0x000463b0

000301b0 <CommandHandler::sendUnnumberedMsg(char const*, char const*)>:
   301b0:	e1a03002 	mov	r3, r2
   301b4:	e1a02001 	mov	r2, r1
   301b8:	e3e01000 	mvn	r1, #0
   301bc:	eaffffb7 	b	300a0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>

000301c0 <CommandHandler::handleFileStart(char const*)>:
   301c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   301c4:	e2804a05 	add	r4, r0, #20480	; 0x5000
   301c8:	e24dd024 	sub	sp, sp, #36	; 0x24
   301cc:	e1a05000 	mov	r5, r0
   301d0:	e1a02004 	mov	r2, r4
   301d4:	e3a03064 	mov	r3, #100	; 0x64
   301d8:	e59f00e4 	ldr	r0, [pc, #228]	; 302c4 <CommandHandler::handleFileStart(char const*)+0x104>
   301dc:	e1a06001 	mov	r6, r1
   301e0:	ebfff842 	bl	2e2f0 <jsonGetValueForKey>
   301e4:	e3500000 	cmp	r0, #0
   301e8:	1a000001 	bne	301f4 <CommandHandler::handleFileStart(char const*)+0x34>
   301ec:	e28dd024 	add	sp, sp, #36	; 0x24
   301f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   301f4:	e3a03028 	mov	r3, #40	; 0x28
   301f8:	e2842065 	add	r2, r4, #101	; 0x65
   301fc:	e1a01006 	mov	r1, r6
   30200:	e59f00c0 	ldr	r0, [pc, #192]	; 302c8 <CommandHandler::handleFileStart(char const*)+0x108>
   30204:	ebfff839 	bl	2e2f0 <jsonGetValueForKey>
   30208:	e3500000 	cmp	r0, #0
   3020c:	0afffff6 	beq	301ec <CommandHandler::handleFileStart(char const*)+0x2c>
   30210:	e28d2008 	add	r2, sp, #8
   30214:	e3a03014 	mov	r3, #20
   30218:	e1a01006 	mov	r1, r6
   3021c:	e59f00a8 	ldr	r0, [pc, #168]	; 302cc <CommandHandler::handleFileStart(char const*)+0x10c>
   30220:	ebfff832 	bl	2e2f0 <jsonGetValueForKey>
   30224:	e3500000 	cmp	r0, #0
   30228:	0affffef 	beq	301ec <CommandHandler::handleFileStart(char const*)+0x2c>
   3022c:	e3a0200a 	mov	r2, #10
   30230:	e3a01000 	mov	r1, #0
   30234:	e28d0008 	add	r0, sp, #8
   30238:	ebffe8dc 	bl	2a5b0 <strtoul>
   3023c:	e1a01006 	mov	r1, r6
   30240:	e1a07000 	mov	r7, r0
   30244:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   30248:	e284008e 	add	r0, r4, #142	; 0x8e
   3024c:	ebfff771 	bl	2e018 <strlcpy>
   30250:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30254:	e3500000 	cmp	r0, #0
   30258:	0a000000 	beq	30260 <CommandHandler::handleFileStart(char const*)+0xa0>
   3025c:	ebffeb8c 	bl	2b094 <operator delete[](void*)>
   30260:	e1a00007 	mov	r0, r7
   30264:	ebffeb83 	bl	2b078 <operator new[](unsigned int)>
   30268:	e3a06000 	mov	r6, #0
   3026c:	e5840860 	str	r0, [r4, #2144]	; 0x860
   30270:	e5847864 	str	r7, [r4, #2148]	; 0x864
   30274:	e5846868 	str	r6, [r4, #2152]	; 0x868
   30278:	e584686c 	str	r6, [r4, #2156]	; 0x86c
   3027c:	ebfff72b 	bl	2df30 <millis>
   30280:	e2852a07 	add	r2, r5, #28672	; 0x7000
   30284:	e282ce7f 	add	ip, r2, #2032	; 0x7f0
   30288:	e2853901 	add	r3, r5, #16384	; 0x4000
   3028c:	e58408b0 	str	r0, [r4, #2224]	; 0x8b0
   30290:	e28cc00c 	add	ip, ip, #12
   30294:	e58d6004 	str	r6, [sp, #4]
   30298:	e58d6000 	str	r6, [sp]
   3029c:	e2833eff 	add	r3, r3, #4080	; 0xff0
   302a0:	e58267f4 	str	r6, [r2, #2036]	; 0x7f4
   302a4:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   302a8:	e88c000f 	stm	ip, {r0, r1, r2, r3}
   302ac:	e1a03006 	mov	r3, r6
   302b0:	e1a00005 	mov	r0, r5
   302b4:	e59f2014 	ldr	r2, [pc, #20]	; 302d0 <CommandHandler::handleFileStart(char const*)+0x110>
   302b8:	e59f1014 	ldr	r1, [pc, #20]	; 302d4 <CommandHandler::handleFileStart(char const*)+0x114>
   302bc:	ebfffefe 	bl	2febc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   302c0:	eaffffc9 	b	301ec <CommandHandler::handleFileStart(char const*)+0x2c>
   302c4:	000463b4 	.word	0x000463b4
   302c8:	000463c0 	.word	0x000463c0
   302cc:	000463cc 	.word	0x000463cc
   302d0:	00047764 	.word	0x00047764
   302d4:	000463d4 	.word	0x000463d4

000302d8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)>:
   302d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   302dc:	e2807a05 	add	r7, r0, #20480	; 0x5000
   302e0:	e597c860 	ldr	ip, [r7, #2144]	; 0x860
   302e4:	e24dd088 	sub	sp, sp, #136	; 0x88
   302e8:	e35c0000 	cmp	ip, #0
   302ec:	0a000008 	beq	30314 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   302f0:	e1a06003 	mov	r6, r3
   302f4:	e1a05002 	mov	r5, r2
   302f8:	e1a04000 	mov	r4, r0
   302fc:	e28d200c 	add	r2, sp, #12
   30300:	e3a03014 	mov	r3, #20
   30304:	e59f00c0 	ldr	r0, [pc, #192]	; 303cc <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0xf4>
   30308:	ebfff7f8 	bl	2e2f0 <jsonGetValueForKey>
   3030c:	e3500000 	cmp	r0, #0
   30310:	1a000001 	bne	3031c <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x44>
   30314:	e28dd088 	add	sp, sp, #136	; 0x88
   30318:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3031c:	e3a0200a 	mov	r2, #10
   30320:	e28d000c 	add	r0, sp, #12
   30324:	e3a01000 	mov	r1, #0
   30328:	ebffe8a0 	bl	2a5b0 <strtoul>
   3032c:	e5973864 	ldr	r3, [r7, #2148]	; 0x864
   30330:	e0802006 	add	r2, r0, r6
   30334:	e1520003 	cmp	r2, r3
   30338:	e1a08000 	mov	r8, r0
   3033c:	8afffff4 	bhi	30314 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   30340:	e5970860 	ldr	r0, [r7, #2144]	; 0x860
   30344:	e1a01005 	mov	r1, r5
   30348:	e1a02006 	mov	r2, r6
   3034c:	e0800008 	add	r0, r0, r8
   30350:	ebffe96e 	bl	2a910 <memcpy>
   30354:	e5972868 	ldr	r2, [r7, #2152]	; 0x868
   30358:	e597386c 	ldr	r3, [r7, #2156]	; 0x86c
   3035c:	e0822006 	add	r2, r2, r6
   30360:	e2833001 	add	r3, r3, #1
   30364:	e5872868 	str	r2, [r7, #2152]	; 0x868
   30368:	e587386c 	str	r3, [r7, #2156]	; 0x86c
   3036c:	ebfff6ef 	bl	2df30 <millis>
   30370:	e284ca07 	add	ip, r4, #28672	; 0x7000
   30374:	e59c37f4 	ldr	r3, [ip, #2036]	; 0x7f4
   30378:	e58708b0 	str	r0, [r7, #2224]	; 0x8b0
   3037c:	e0841103 	add	r1, r4, r3, lsl #2
   30380:	e2832001 	add	r2, r3, #1
   30384:	e2813a05 	add	r3, r1, #20480	; 0x5000
   30388:	e2811a06 	add	r1, r1, #24576	; 0x6000
   3038c:	e58388b4 	str	r8, [r3, #2228]	; 0x8b4
   30390:	e28d0024 	add	r0, sp, #36	; 0x24
   30394:	e5816854 	str	r6, [r1, #2132]	; 0x854
   30398:	e1a03008 	mov	r3, r8
   3039c:	e58c27f4 	str	r2, [ip, #2036]	; 0x7f4
   303a0:	e3a01064 	mov	r1, #100	; 0x64
   303a4:	e59f2024 	ldr	r2, [pc, #36]	; 303d0 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0xf8>
   303a8:	ebfff791 	bl	2e1f4 <snprintf>
   303ac:	e3a03000 	mov	r3, #0
   303b0:	e28d2024 	add	r2, sp, #36	; 0x24
   303b4:	e1a00004 	mov	r0, r4
   303b8:	e58d3004 	str	r3, [sp, #4]
   303bc:	e58d3000 	str	r3, [sp]
   303c0:	e59f100c 	ldr	r1, [pc, #12]	; 303d4 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0xfc>
   303c4:	ebfffebc 	bl	2febc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   303c8:	eaffffd1 	b	30314 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)+0x3c>
   303cc:	000463e0 	.word	0x000463e0
   303d0:	000463e8 	.word	0x000463e8
   303d4:	000463f4 	.word	0x000463f4

000303d8 <CommandHandler::sendAPIReq(char const*)>:
   303d8:	e92d4010 	push	{r4, lr}
   303dc:	e24dd070 	sub	sp, sp, #112	; 0x70
   303e0:	e3a02064 	mov	r2, #100	; 0x64
   303e4:	e1a04001 	mov	r4, r1
   303e8:	e28d0008 	add	r0, sp, #8
   303ec:	e59f1068 	ldr	r1, [pc, #104]	; 3045c <CommandHandler::sendAPIReq(char const*)+0x84>
   303f0:	ebfff708 	bl	2e018 <strlcpy>
   303f4:	e28d0008 	add	r0, sp, #8
   303f8:	ebffe71f 	bl	2a07c <strlen>
   303fc:	e28d3008 	add	r3, sp, #8
   30400:	e1a01004 	mov	r1, r4
   30404:	e0830000 	add	r0, r3, r0
   30408:	e3a02064 	mov	r2, #100	; 0x64
   3040c:	ebfff701 	bl	2e018 <strlcpy>
   30410:	e28d0008 	add	r0, sp, #8
   30414:	ebffe718 	bl	2a07c <strlen>
   30418:	e28d3008 	add	r3, sp, #8
   3041c:	e0830000 	add	r0, r3, r0
   30420:	e3a02064 	mov	r2, #100	; 0x64
   30424:	e59f1034 	ldr	r1, [pc, #52]	; 30460 <CommandHandler::sendAPIReq(char const*)+0x88>
   30428:	ebfff6fa 	bl	2e018 <strlcpy>
   3042c:	e59f3030 	ldr	r3, [pc, #48]	; 30464 <CommandHandler::sendAPIReq(char const*)+0x8c>
   30430:	e5930000 	ldr	r0, [r3]
   30434:	e3500000 	cmp	r0, #0
   30438:	0a000005 	beq	30454 <CommandHandler::sendAPIReq(char const*)+0x7c>
   3043c:	e3a03000 	mov	r3, #0
   30440:	e28d2008 	add	r2, sp, #8
   30444:	e58d3004 	str	r3, [sp, #4]
   30448:	e58d3000 	str	r3, [sp]
   3044c:	e59f1014 	ldr	r1, [pc, #20]	; 30468 <CommandHandler::sendAPIReq(char const*)+0x90>
   30450:	ebfffe99 	bl	2febc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30454:	e28dd070 	add	sp, sp, #112	; 0x70
   30458:	e8bd8010 	pop	{r4, pc}
   3045c:	00046400 	.word	0x00046400
   30460:	00046eec 	.word	0x00046eec
   30464:	0004e1cc 	.word	0x0004e1cc
   30468:	00046408 	.word	0x00046408

0003046c <CommandHandler::logDebugMessage(char const*)>:
   3046c:	e92d4070 	push	{r4, r5, r6, lr}
   30470:	e1a06001 	mov	r6, r1
   30474:	e24ddc4e 	sub	sp, sp, #19968	; 0x4e00
   30478:	e24dd038 	sub	sp, sp, #56	; 0x38
   3047c:	e59f4060 	ldr	r4, [pc, #96]	; 304e4 <CommandHandler::logDebugMessage(char const*)+0x78>
   30480:	e28d3014 	add	r3, sp, #20
   30484:	e1a05000 	mov	r5, r0
   30488:	e1a02004 	mov	r2, r4
   3048c:	e1a00003 	mov	r0, r3
   30490:	e59f1050 	ldr	r1, [pc, #80]	; 304e8 <CommandHandler::logDebugMessage(char const*)+0x7c>
   30494:	e58d300c 	str	r3, [sp, #12]
   30498:	ebfff6de 	bl	2e018 <strlcpy>
   3049c:	e1a02004 	mov	r2, r4
   304a0:	e1a01006 	mov	r1, r6
   304a4:	e59d000c 	ldr	r0, [sp, #12]
   304a8:	ebfff6f6 	bl	2e088 <strlcat>
   304ac:	e1a02004 	mov	r2, r4
   304b0:	e59d000c 	ldr	r0, [sp, #12]
   304b4:	e59f1030 	ldr	r1, [pc, #48]	; 304ec <CommandHandler::logDebugMessage(char const*)+0x80>
   304b8:	ebfff6f2 	bl	2e088 <strlcat>
   304bc:	e3a03000 	mov	r3, #0
   304c0:	e59d200c 	ldr	r2, [sp, #12]
   304c4:	e1a00005 	mov	r0, r5
   304c8:	e58d3004 	str	r3, [sp, #4]
   304cc:	e58d3000 	str	r3, [sp]
   304d0:	e59f1018 	ldr	r1, [pc, #24]	; 304f0 <CommandHandler::logDebugMessage(char const*)+0x84>
   304d4:	ebfffe78 	bl	2febc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   304d8:	e28ddc4e 	add	sp, sp, #19968	; 0x4e00
   304dc:	e28dd038 	add	sp, sp, #56	; 0x38
   304e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   304e4:	00004e20 	.word	0x00004e20
   304e8:	00046410 	.word	0x00046410
   304ec:	00046eec 	.word	0x00046eec
   304f0:	00046418 	.word	0x00046418

000304f4 <CommandHandler::handleFileEnd(char const*)>:
   304f4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   304f8:	e2804a05 	add	r4, r0, #20480	; 0x5000
   304fc:	e5942860 	ldr	r2, [r4, #2144]	; 0x860
   30500:	e24dde17 	sub	sp, sp, #368	; 0x170
   30504:	e3520000 	cmp	r2, #0
   30508:	0a000063 	beq	3069c <CommandHandler::handleFileEnd(char const*)+0x1a8>
   3050c:	e1a08000 	mov	r8, r0
   30510:	e28d2014 	add	r2, sp, #20
   30514:	e3a03014 	mov	r3, #20
   30518:	e59f0264 	ldr	r0, [pc, #612]	; 30784 <CommandHandler::handleFileEnd(char const*)+0x290>
   3051c:	e1a06001 	mov	r6, r1
   30520:	ebfff772 	bl	2e2f0 <jsonGetValueForKey>
   30524:	e2505000 	subs	r5, r0, #0
   30528:	1a00006d 	bne	306e4 <CommandHandler::handleFileEnd(char const*)+0x1f0>
   3052c:	e1a01006 	mov	r1, r6
   30530:	e28d202c 	add	r2, sp, #44	; 0x2c
   30534:	e3a03014 	mov	r3, #20
   30538:	e59f0248 	ldr	r0, [pc, #584]	; 30788 <CommandHandler::handleFileEnd(char const*)+0x294>
   3053c:	ebfff76b 	bl	2e2f0 <jsonGetValueForKey>
   30540:	e2506000 	subs	r6, r0, #0
   30544:	1a000060 	bne	306cc <CommandHandler::handleFileEnd(char const*)+0x1d8>
   30548:	e5941868 	ldr	r1, [r4, #2152]	; 0x868
   3054c:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30550:	ebfffd29 	bl	2f9fc <MiniHDLC::computeCRC16(unsigned char const*, unsigned int)>
   30554:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   30558:	e1a07000 	mov	r7, r0
   3055c:	e58d0004 	str	r0, [sp, #4]
   30560:	e58d6008 	str	r6, [sp, #8]
   30564:	e58d5000 	str	r5, [sp]
   30568:	e28d0044 	add	r0, sp, #68	; 0x44
   3056c:	e59f2218 	ldr	r2, [pc, #536]	; 3078c <CommandHandler::handleFileEnd(char const*)+0x298>
   30570:	e3a01064 	mov	r1, #100	; 0x64
   30574:	ebfff71e 	bl	2e1f4 <snprintf>
   30578:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   3057c:	e1550003 	cmp	r5, r3
   30580:	0a000047 	beq	306a4 <CommandHandler::handleFileEnd(char const*)+0x1b0>
   30584:	ebffd990 	bl	26bcc <CLogger::Get()>
   30588:	e594386c 	ldr	r3, [r4, #2156]	; 0x86c
   3058c:	e3a02002 	mov	r2, #2
   30590:	e58d3004 	str	r3, [sp, #4]
   30594:	e58d5008 	str	r5, [sp, #8]
   30598:	e58d4000 	str	r4, [sp]
   3059c:	e59f31ec 	ldr	r3, [pc, #492]	; 30790 <CommandHandler::handleFileEnd(char const*)+0x29c>
   305a0:	e59f11ec 	ldr	r1, [pc, #492]	; 30794 <CommandHandler::handleFileEnd(char const*)+0x2a0>
   305a4:	ebffd8c5 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   305a8:	e3a03000 	mov	r3, #0
   305ac:	e28d2044 	add	r2, sp, #68	; 0x44
   305b0:	e58d3004 	str	r3, [sp, #4]
   305b4:	e58d3000 	str	r3, [sp]
   305b8:	e59f11d8 	ldr	r1, [pc, #472]	; 30798 <CommandHandler::handleFileEnd(char const*)+0x2a4>
   305bc:	e1a00008 	mov	r0, r8
   305c0:	ebfffe3d 	bl	2febc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   305c4:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   305c8:	e3500000 	cmp	r0, #0
   305cc:	0a000000 	beq	305d4 <CommandHandler::handleFileEnd(char const*)+0xe0>
   305d0:	ebffeaaf 	bl	2b094 <operator delete[](void*)>
   305d4:	e3a05000 	mov	r5, #0
   305d8:	e2887a07 	add	r7, r8, #28672	; 0x7000
   305dc:	e59737f4 	ldr	r3, [r7, #2036]	; 0x7f4
   305e0:	e5845860 	str	r5, [r4, #2144]	; 0x860
   305e4:	e1530005 	cmp	r3, r5
   305e8:	e5845864 	str	r5, [r4, #2148]	; 0x864
   305ec:	0a000062 	beq	3077c <CommandHandler::handleFileEnd(char const*)+0x288>
   305f0:	e3a0a0c8 	mov	sl, #200	; 0xc8
   305f4:	e1a02005 	mov	r2, r5
   305f8:	e2884b16 	add	r4, r8, #22528	; 0x5800
   305fc:	e59f9198 	ldr	r9, [pc, #408]	; 3079c <CommandHandler::handleFileEnd(char const*)+0x2a8>
   30600:	e28440b4 	add	r4, r4, #180	; 0xb4
   30604:	e28d60a8 	add	r6, sp, #168	; 0xa8
   30608:	e5941000 	ldr	r1, [r4]
   3060c:	e1510002 	cmp	r1, r2
   30610:	0a00000c 	beq	30648 <CommandHandler::handleFileEnd(char const*)+0x154>
   30614:	e5940fa0 	ldr	r0, [r4, #4000]	; 0xfa0
   30618:	e1a03005 	mov	r3, r5
   3061c:	e58d0008 	str	r0, [sp, #8]
   30620:	e58d1004 	str	r1, [sp, #4]
   30624:	e58d2000 	str	r2, [sp]
   30628:	e1a0100a 	mov	r1, sl
   3062c:	e1a02009 	mov	r2, r9
   30630:	e1a00006 	mov	r0, r6
   30634:	ebfff6ee 	bl	2e1f4 <snprintf>
   30638:	e1a01006 	mov	r1, r6
   3063c:	e1a00008 	mov	r0, r8
   30640:	ebffff89 	bl	3046c <CommandHandler::logDebugMessage(char const*)>
   30644:	e5942000 	ldr	r2, [r4]
   30648:	e59717f4 	ldr	r1, [r7, #2036]	; 0x7f4
   3064c:	e5943fa0 	ldr	r3, [r4, #4000]	; 0xfa0
   30650:	e2855001 	add	r5, r5, #1
   30654:	e1510005 	cmp	r1, r5
   30658:	e0822003 	add	r2, r2, r3
   3065c:	e2844004 	add	r4, r4, #4
   30660:	8affffe8 	bhi	30608 <CommandHandler::handleFileEnd(char const*)+0x114>
   30664:	e2882901 	add	r2, r8, #16384	; 0x4000
   30668:	e5920ff8 	ldr	r0, [r2, #4088]	; 0xff8
   3066c:	e5923ff4 	ldr	r3, [r2, #4084]	; 0xff4
   30670:	e5971804 	ldr	r1, [r7, #2052]	; 0x804
   30674:	e5972800 	ldr	r2, [r7, #2048]	; 0x800
   30678:	e98d0003 	stmib	sp, {r0, r1}
   3067c:	e58d2000 	str	r2, [sp]
   30680:	e3a010c8 	mov	r1, #200	; 0xc8
   30684:	e59f2114 	ldr	r2, [pc, #276]	; 307a0 <CommandHandler::handleFileEnd(char const*)+0x2ac>
   30688:	e1a00006 	mov	r0, r6
   3068c:	ebfff6d8 	bl	2e1f4 <snprintf>
   30690:	e1a01006 	mov	r1, r6
   30694:	e1a00008 	mov	r0, r8
   30698:	ebffff73 	bl	3046c <CommandHandler::logDebugMessage(char const*)>
   3069c:	e28dde17 	add	sp, sp, #368	; 0x170
   306a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   306a4:	e1560007 	cmp	r6, r7
   306a8:	0a000013 	beq	306fc <CommandHandler::handleFileEnd(char const*)+0x208>
   306ac:	ebffd946 	bl	26bcc <CLogger::Get()>
   306b0:	e58d500c 	str	r5, [sp, #12]
   306b4:	e88d00d0 	stm	sp, {r4, r6, r7}
   306b8:	e59f30e4 	ldr	r3, [pc, #228]	; 307a4 <CommandHandler::handleFileEnd(char const*)+0x2b0>
   306bc:	e3a02002 	mov	r2, #2
   306c0:	e59f10cc 	ldr	r1, [pc, #204]	; 30794 <CommandHandler::handleFileEnd(char const*)+0x2a0>
   306c4:	ebffd87d 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   306c8:	eaffffb6 	b	305a8 <CommandHandler::handleFileEnd(char const*)+0xb4>
   306cc:	e28d002c 	add	r0, sp, #44	; 0x2c
   306d0:	e3a02010 	mov	r2, #16
   306d4:	e3a01000 	mov	r1, #0
   306d8:	ebffe7b4 	bl	2a5b0 <strtoul>
   306dc:	e1a06000 	mov	r6, r0
   306e0:	eaffff98 	b	30548 <CommandHandler::handleFileEnd(char const*)+0x54>
   306e4:	e28d0014 	add	r0, sp, #20
   306e8:	e3a0200a 	mov	r2, #10
   306ec:	e3a01000 	mov	r1, #0
   306f0:	ebffe7ae 	bl	2a5b0 <strtoul>
   306f4:	e1a05000 	mov	r5, r0
   306f8:	eaffff8b 	b	3052c <CommandHandler::handleFileEnd(char const*)+0x38>
   306fc:	e3a03000 	mov	r3, #0
   30700:	e28d2044 	add	r2, sp, #68	; 0x44
   30704:	e58d3004 	str	r3, [sp, #4]
   30708:	e58d3000 	str	r3, [sp]
   3070c:	e59f1094 	ldr	r1, [pc, #148]	; 307a8 <CommandHandler::handleFileEnd(char const*)+0x2b4>
   30710:	e1a00008 	mov	r0, r8
   30714:	ebfffde8 	bl	2febc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30718:	e59f108c 	ldr	r1, [pc, #140]	; 307ac <CommandHandler::handleFileEnd(char const*)+0x2b8>
   3071c:	e2840065 	add	r0, r4, #101	; 0x65
   30720:	ebffe67a 	bl	2a110 <strcasecmp>
   30724:	e3500000 	cmp	r0, #0
   30728:	03a05001 	moveq	r5, #1
   3072c:	13a05000 	movne	r5, #0
   30730:	1a000008 	bne	30758 <CommandHandler::handleFileEnd(char const*)+0x264>
   30734:	e59f0074 	ldr	r0, [pc, #116]	; 307b0 <CommandHandler::handleFileEnd(char const*)+0x2bc>
   30738:	ebfff603 	bl	2df4c <microsDelay>
   3073c:	e5943868 	ldr	r3, [r4, #2152]	; 0x868
   30740:	e5942860 	ldr	r2, [r4, #2144]	; 0x860
   30744:	e284108e 	add	r1, r4, #142	; 0x8e
   30748:	e58d5000 	str	r5, [sp]
   3074c:	e1a00008 	mov	r0, r8
   30750:	ebfffd65 	bl	2fcec <CommandHandler::commsSocketHandleReceivedFile(char const*, unsigned char*, int, bool)>
   30754:	eaffff9a 	b	305c4 <CommandHandler::handleFileEnd(char const*)+0xd0>
   30758:	ebffd91b 	bl	26bcc <CLogger::Get()>
   3075c:	e5943868 	ldr	r3, [r4, #2152]	; 0x868
   30760:	e3a02004 	mov	r2, #4
   30764:	e58d3004 	str	r3, [sp, #4]
   30768:	e58d4000 	str	r4, [sp]
   3076c:	e59f3040 	ldr	r3, [pc, #64]	; 307b4 <CommandHandler::handleFileEnd(char const*)+0x2c0>
   30770:	e59f101c 	ldr	r1, [pc, #28]	; 30794 <CommandHandler::handleFileEnd(char const*)+0x2a0>
   30774:	ebffd851 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30778:	eaffffef 	b	3073c <CommandHandler::handleFileEnd(char const*)+0x248>
   3077c:	e28d60a8 	add	r6, sp, #168	; 0xa8
   30780:	eaffffb7 	b	30664 <CommandHandler::handleFileEnd(char const*)+0x170>
   30784:	0004641c 	.word	0x0004641c
   30788:	00046428 	.word	0x00046428
   3078c:	0004642c 	.word	0x0004642c
   30790:	00046470 	.word	0x00046470
   30794:	00046300 	.word	0x00046300
   30798:	000464a4 	.word	0x000464a4
   3079c:	00046568 	.word	0x00046568
   307a0:	0004652c 	.word	0x0004652c
   307a4:	000464b0 	.word	0x000464b0
   307a8:	000464fc 	.word	0x000464fc
   307ac:	00046508 	.word	0x00046508
   307b0:	000186a0 	.word	0x000186a0
   307b4:	00046514 	.word	0x00046514

000307b8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)>:
   307b8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   307bc:	e24ddc57 	sub	sp, sp, #22272	; 0x5700
   307c0:	e24dd0b4 	sub	sp, sp, #180	; 0xb4
   307c4:	e28dc0f0 	add	ip, sp, #240	; 0xf0
   307c8:	e1a05000 	mov	r5, r0
   307cc:	e1a08002 	mov	r8, r2
   307d0:	e1a07003 	mov	r7, r3
   307d4:	e1a0200c 	mov	r2, ip
   307d8:	e3a030c8 	mov	r3, #200	; 0xc8
   307dc:	e59f026c 	ldr	r0, [pc, #620]	; 30a50 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x298>
   307e0:	e58dc008 	str	ip, [sp, #8]
   307e4:	e1a04001 	mov	r4, r1
   307e8:	ebfff6c0 	bl	2e2f0 <jsonGetValueForKey>
   307ec:	e3500000 	cmp	r0, #0
   307f0:	1a000002 	bne	30800 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x48>
   307f4:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   307f8:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   307fc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30800:	e3a06000 	mov	r6, #0
   30804:	e3a03014 	mov	r3, #20
   30808:	e28d2014 	add	r2, sp, #20
   3080c:	e1a01004 	mov	r1, r4
   30810:	e59f023c 	ldr	r0, [pc, #572]	; 30a54 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x29c>
   30814:	e5cd6014 	strb	r6, [sp, #20]
   30818:	ebfff6b4 	bl	2e2f0 <jsonGetValueForKey>
   3081c:	e1a01006 	mov	r1, r6
   30820:	e3a0200a 	mov	r2, #10
   30824:	e28d0014 	add	r0, sp, #20
   30828:	e5cd61bc 	strb	r6, [sp, #444]	; 0x1bc
   3082c:	ebffe75f 	bl	2a5b0 <strtoul>
   30830:	e59f1220 	ldr	r1, [pc, #544]	; 30a58 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a0>
   30834:	e1a09000 	mov	r9, r0
   30838:	e59d0008 	ldr	r0, [sp, #8]
   3083c:	ebffe633 	bl	2a110 <strcasecmp>
   30840:	e1500006 	cmp	r0, r6
   30844:	0a00000a 	beq	30874 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0xbc>
   30848:	e59f120c 	ldr	r1, [pc, #524]	; 30a5c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a4>
   3084c:	e59d0008 	ldr	r0, [sp, #8]
   30850:	ebffe62e 	bl	2a110 <strcasecmp>
   30854:	e3500000 	cmp	r0, #0
   30858:	1a00000b 	bne	3088c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0xd4>
   3085c:	e1a03007 	mov	r3, r7
   30860:	e1a02008 	mov	r2, r8
   30864:	e1a01004 	mov	r1, r4
   30868:	e1a00005 	mov	r0, r5
   3086c:	ebfffe99 	bl	302d8 <CommandHandler::handleFileBlock(char const*, unsigned char const*, unsigned int)>
   30870:	eaffffdf 	b	307f4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   30874:	e1a01004 	mov	r1, r4
   30878:	e1a00005 	mov	r0, r5
   3087c:	ebfffe4f 	bl	301c0 <CommandHandler::handleFileStart(char const*)>
   30880:	e28ddc57 	add	sp, sp, #22272	; 0x5700
   30884:	e28dd0b4 	add	sp, sp, #180	; 0xb4
   30888:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3088c:	e59f11cc 	ldr	r1, [pc, #460]	; 30a60 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2a8>
   30890:	e59d0008 	ldr	r0, [sp, #8]
   30894:	ebffe61d 	bl	2a110 <strcasecmp>
   30898:	e3500000 	cmp	r0, #0
   3089c:	0a00003e 	beq	3099c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1e4>
   308a0:	e59f11bc 	ldr	r1, [pc, #444]	; 30a64 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2ac>
   308a4:	e59d0008 	ldr	r0, [sp, #8]
   308a8:	ebffe618 	bl	2a110 <strcasecmp>
   308ac:	e3500000 	cmp	r0, #0
   308b0:	1a00003d 	bne	309ac <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x1f4>
   308b4:	e28d3f6f 	add	r3, sp, #444	; 0x1bc
   308b8:	e1a01008 	mov	r1, r8
   308bc:	e1a00003 	mov	r0, r3
   308c0:	e3a02e7d 	mov	r2, #2000	; 0x7d0
   308c4:	e58d300c 	str	r3, [sp, #12]
   308c8:	ebfff5d2 	bl	2e018 <strlcpy>
   308cc:	e59d000c 	ldr	r0, [sp, #12]
   308d0:	ebffe5e9 	bl	2a07c <strlen>
   308d4:	e2477001 	sub	r7, r7, #1
   308d8:	e0577000 	subs	r7, r7, r0
   308dc:	e0888000 	add	r8, r8, r0
   308e0:	e3a030c8 	mov	r3, #200	; 0xc8
   308e4:	e59d2008 	ldr	r2, [sp, #8]
   308e8:	e59d100c 	ldr	r1, [sp, #12]
   308ec:	e59f015c 	ldr	r0, [pc, #348]	; 30a50 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x298>
   308f0:	12888001 	addne	r8, r8, #1
   308f4:	ebfff67d 	bl	2e2f0 <jsonGetValueForKey>
   308f8:	e3a03014 	mov	r3, #20
   308fc:	e59d100c 	ldr	r1, [sp, #12]
   30900:	e08d2003 	add	r2, sp, r3
   30904:	e59f0148 	ldr	r0, [pc, #328]	; 30a54 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x29c>
   30908:	ebfff678 	bl	2e2f0 <jsonGetValueForKey>
   3090c:	e59f1154 	ldr	r1, [pc, #340]	; 30a68 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b0>
   30910:	e59d0008 	ldr	r0, [sp, #8]
   30914:	ebffe5fd 	bl	2a110 <strcasecmp>
   30918:	e2501000 	subs	r1, r0, #0
   3091c:	0a000042 	beq	30a2c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x274>
   30920:	e3a0c000 	mov	ip, #0
   30924:	e59f0140 	ldr	r0, [pc, #320]	; 30a6c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b4>
   30928:	e28d4e99 	add	r4, sp, #2448	; 0x990
   3092c:	e28de028 	add	lr, sp, #40	; 0x28
   30930:	e1a03007 	mov	r3, r7
   30934:	e59d100c 	ldr	r1, [sp, #12]
   30938:	e1a02008 	mov	r2, r8
   3093c:	e58d0004 	str	r0, [sp, #4]
   30940:	e58d4000 	str	r4, [sp]
   30944:	e1a00005 	mov	r0, r5
   30948:	e58de00c 	str	lr, [sp, #12]
   3094c:	e5cdc990 	strb	ip, [sp, #2448]	; 0x990
   30950:	ebfffc9f 	bl	2fbd4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>
   30954:	e59d1008 	ldr	r1, [sp, #8]
   30958:	e3a020c8 	mov	r2, #200	; 0xc8
   3095c:	e59d000c 	ldr	r0, [sp, #12]
   30960:	ebfff5ac 	bl	2e018 <strlcpy>
   30964:	e3a020c8 	mov	r2, #200	; 0xc8
   30968:	e59f1100 	ldr	r1, [pc, #256]	; 30a70 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b8>
   3096c:	e59d000c 	ldr	r0, [sp, #12]
   30970:	ebfff5c4 	bl	2e088 <strlcat>
   30974:	e1a00004 	mov	r0, r4
   30978:	ebffe5bf 	bl	2a07c <strlen>
   3097c:	e3500000 	cmp	r0, #0
   30980:	0affff9b 	beq	307f4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   30984:	e1a03004 	mov	r3, r4
   30988:	e59d200c 	ldr	r2, [sp, #12]
   3098c:	e1a01009 	mov	r1, r9
   30990:	e1a00005 	mov	r0, r5
   30994:	ebfffdc1 	bl	300a0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>
   30998:	eaffff95 	b	307f4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   3099c:	e1a01004 	mov	r1, r4
   309a0:	e1a00005 	mov	r0, r5
   309a4:	ebfffed2 	bl	304f4 <CommandHandler::handleFileEnd(char const*)>
   309a8:	eaffff91 	b	307f4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   309ac:	e59f00b8 	ldr	r0, [pc, #184]	; 30a6c <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b4>
   309b0:	e28d9e99 	add	r9, sp, #2448	; 0x990
   309b4:	e28dc028 	add	ip, sp, #40	; 0x28
   309b8:	e1a03007 	mov	r3, r7
   309bc:	e1a02008 	mov	r2, r8
   309c0:	e1a01004 	mov	r1, r4
   309c4:	e58d0004 	str	r0, [sp, #4]
   309c8:	e58d9000 	str	r9, [sp]
   309cc:	e1a00005 	mov	r0, r5
   309d0:	e58dc00c 	str	ip, [sp, #12]
   309d4:	e5cd6990 	strb	r6, [sp, #2448]	; 0x990
   309d8:	ebfffc7d 	bl	2fbd4 <CommandHandler::commsSocketHandleRxMsg(char const*, unsigned char const*, unsigned int, char*, int)>
   309dc:	e59d1008 	ldr	r1, [sp, #8]
   309e0:	e3a020c8 	mov	r2, #200	; 0xc8
   309e4:	e59d000c 	ldr	r0, [sp, #12]
   309e8:	ebfff58a 	bl	2e018 <strlcpy>
   309ec:	e3a020c8 	mov	r2, #200	; 0xc8
   309f0:	e59f1078 	ldr	r1, [pc, #120]	; 30a70 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2b8>
   309f4:	e59d000c 	ldr	r0, [sp, #12]
   309f8:	ebfff5a2 	bl	2e088 <strlcat>
   309fc:	e1a00009 	mov	r0, r9
   30a00:	ebffe59d 	bl	2a07c <strlen>
   30a04:	e3500000 	cmp	r0, #0
   30a08:	0affff79 	beq	307f4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   30a0c:	e58d6004 	str	r6, [sp, #4]
   30a10:	e58d6000 	str	r6, [sp]
   30a14:	e1a03006 	mov	r3, r6
   30a18:	e1a02009 	mov	r2, r9
   30a1c:	e59d100c 	ldr	r1, [sp, #12]
   30a20:	e1a00005 	mov	r0, r5
   30a24:	ebfffd24 	bl	2febc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30a28:	eaffff71 	b	307f4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   30a2c:	e28d0014 	add	r0, sp, #20
   30a30:	e3a0200a 	mov	r2, #10
   30a34:	ebffe6dd 	bl	2a5b0 <strtoul>
   30a38:	e59f3034 	ldr	r3, [pc, #52]	; 30a74 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2bc>
   30a3c:	e1a01000 	mov	r1, r0
   30a40:	e59f2030 	ldr	r2, [pc, #48]	; 30a78 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x2c0>
   30a44:	e1a00005 	mov	r0, r5
   30a48:	ebfffd94 	bl	300a0 <CommandHandler::sendRDPMsg(unsigned long, char const*, char const*)>
   30a4c:	eaffff68 	b	307f4 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)+0x3c>
   30a50:	0003f00c 	.word	0x0003f00c
   30a54:	000465a0 	.word	0x000465a0
   30a58:	000465a8 	.word	0x000465a8
   30a5c:	000465b0 	.word	0x000465b0
   30a60:	000465b8 	.word	0x000465b8
   30a64:	000463b0 	.word	0x000463b0
   30a68:	000465c0 	.word	0x000465c0
   30a6c:	00004e20 	.word	0x00004e20
   30a70:	000465e0 	.word	0x000465e0
   30a74:	000465c8 	.word	0x000465c8
   30a78:	000465d4 	.word	0x000465d4

00030a7c <CommandHandler::hdlcFrameRx(unsigned char const*, unsigned int)>:
   30a7c:	e92d4070 	push	{r4, r5, r6, lr}
   30a80:	e24dde7e 	sub	sp, sp, #2016	; 0x7e0
   30a84:	e3520e7d 	cmp	r2, #2000	; 0x7d0
   30a88:	e28d300c 	add	r3, sp, #12
   30a8c:	e1a04002 	mov	r4, r2
   30a90:	e1a06000 	mov	r6, r0
   30a94:	92822001 	addls	r2, r2, #1
   30a98:	83a02e7d 	movhi	r2, #2000	; 0x7d0
   30a9c:	e1a00003 	mov	r0, r3
   30aa0:	e1a05001 	mov	r5, r1
   30aa4:	e58d3004 	str	r3, [sp, #4]
   30aa8:	ebfff55a 	bl	2e018 <strlcpy>
   30aac:	e59d0004 	ldr	r0, [sp, #4]
   30ab0:	ebffe571 	bl	2a07c <strlen>
   30ab4:	e2444001 	sub	r4, r4, #1
   30ab8:	e2802001 	add	r2, r0, #1
   30abc:	e0443000 	sub	r3, r4, r0
   30ac0:	e59d1004 	ldr	r1, [sp, #4]
   30ac4:	e0852002 	add	r2, r5, r2
   30ac8:	e1a00006 	mov	r0, r6
   30acc:	ebffff39 	bl	307b8 <CommandHandler::processRxCmd(char const*, unsigned char const*, unsigned int)>
   30ad0:	e28dde7e 	add	sp, sp, #2016	; 0x7e0
   30ad4:	e8bd8070 	pop	{r4, r5, r6, pc}

00030ad8 <CommandHandler::hdlcFrameRxStatic(unsigned char const*, unsigned int)>:
   30ad8:	e59f3018 	ldr	r3, [pc, #24]	; 30af8 <CommandHandler::hdlcFrameRxStatic(unsigned char const*, unsigned int)+0x20>
   30adc:	e5933000 	ldr	r3, [r3]
   30ae0:	e3530000 	cmp	r3, #0
   30ae4:	012fff1e 	bxeq	lr
   30ae8:	e1a02001 	mov	r2, r1
   30aec:	e1a01000 	mov	r1, r0
   30af0:	e1a00003 	mov	r0, r3
   30af4:	eaffffe0 	b	30a7c <CommandHandler::hdlcFrameRx(unsigned char const*, unsigned int)>
   30af8:	0004e1cc 	.word	0x0004e1cc

00030afc <CommandHandler::logDebugJson(char const*)>:
   30afc:	e3a03000 	mov	r3, #0
   30b00:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   30b04:	e24dd00c 	sub	sp, sp, #12
   30b08:	e1a02001 	mov	r2, r1
   30b0c:	e58d3004 	str	r3, [sp, #4]
   30b10:	e58d3000 	str	r3, [sp]
   30b14:	e59f1008 	ldr	r1, [pc, #8]	; 30b24 <CommandHandler::logDebugJson(char const*)+0x28>
   30b18:	ebfffce7 	bl	2febc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30b1c:	e28dd00c 	add	sp, sp, #12
   30b20:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   30b24:	00046418 	.word	0x00046418

00030b28 <CommandHandler::logDebug(char const*, char const*, char const*)>:
   30b28:	e92d4030 	push	{r4, r5, lr}
   30b2c:	e1a05001 	mov	r5, r1
   30b30:	e24ddd9e 	sub	sp, sp, #10112	; 0x2780
   30b34:	e24dd00c 	sub	sp, sp, #12
   30b38:	e28d1074 	add	r1, sp, #116	; 0x74
   30b3c:	e1a00003 	mov	r0, r3
   30b40:	e1a04002 	mov	r4, r2
   30b44:	e59f20fc 	ldr	r2, [pc, #252]	; 30c48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30b48:	e58d100c 	str	r1, [sp, #12]
   30b4c:	ebfff692 	bl	2e59c <jsonEscape>
   30b50:	e28d3b05 	add	r3, sp, #5120	; 0x1400
   30b54:	e2833008 	add	r3, r3, #8
   30b58:	e243300c 	sub	r3, r3, #12
   30b5c:	e1a00003 	mov	r0, r3
   30b60:	e59f20e0 	ldr	r2, [pc, #224]	; 30c48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30b64:	e59f10e0 	ldr	r1, [pc, #224]	; 30c4c <CommandHandler::logDebug(char const*, char const*, char const*)+0x124>
   30b68:	e58d3008 	str	r3, [sp, #8]
   30b6c:	ebfff529 	bl	2e018 <strlcpy>
   30b70:	e59d100c 	ldr	r1, [sp, #12]
   30b74:	e59f20cc 	ldr	r2, [pc, #204]	; 30c48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30b78:	e59d0008 	ldr	r0, [sp, #8]
   30b7c:	ebfff541 	bl	2e088 <strlcat>
   30b80:	e59f20c0 	ldr	r2, [pc, #192]	; 30c48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30b84:	e59f10c4 	ldr	r1, [pc, #196]	; 30c50 <CommandHandler::logDebug(char const*, char const*, char const*)+0x128>
   30b88:	e59d0008 	ldr	r0, [sp, #8]
   30b8c:	ebfff53d 	bl	2e088 <strlcat>
   30b90:	e59f20b0 	ldr	r2, [pc, #176]	; 30c48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30b94:	e59f10b8 	ldr	r1, [pc, #184]	; 30c54 <CommandHandler::logDebug(char const*, char const*, char const*)+0x12c>
   30b98:	e59d0008 	ldr	r0, [sp, #8]
   30b9c:	ebfff539 	bl	2e088 <strlcat>
   30ba0:	e1a01005 	mov	r1, r5
   30ba4:	e59f209c 	ldr	r2, [pc, #156]	; 30c48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30ba8:	e59d0008 	ldr	r0, [sp, #8]
   30bac:	ebfff535 	bl	2e088 <strlcat>
   30bb0:	e59f2090 	ldr	r2, [pc, #144]	; 30c48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30bb4:	e59f1094 	ldr	r1, [pc, #148]	; 30c50 <CommandHandler::logDebug(char const*, char const*, char const*)+0x128>
   30bb8:	e59d0008 	ldr	r0, [sp, #8]
   30bbc:	ebfff531 	bl	2e088 <strlcat>
   30bc0:	e59f2080 	ldr	r2, [pc, #128]	; 30c48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30bc4:	e59f108c 	ldr	r1, [pc, #140]	; 30c58 <CommandHandler::logDebug(char const*, char const*, char const*)+0x130>
   30bc8:	e59d0008 	ldr	r0, [sp, #8]
   30bcc:	ebfff52d 	bl	2e088 <strlcat>
   30bd0:	ebfff4d5 	bl	2df2c <micros>
   30bd4:	e28d3010 	add	r3, sp, #16
   30bd8:	e58d300c 	str	r3, [sp, #12]
   30bdc:	e59f2078 	ldr	r2, [pc, #120]	; 30c5c <CommandHandler::logDebug(char const*, char const*, char const*)+0x134>
   30be0:	e1a03000 	mov	r3, r0
   30be4:	e3a01064 	mov	r1, #100	; 0x64
   30be8:	e58d4000 	str	r4, [sp]
   30bec:	e59d000c 	ldr	r0, [sp, #12]
   30bf0:	ebfff57f 	bl	2e1f4 <snprintf>
   30bf4:	e59d100c 	ldr	r1, [sp, #12]
   30bf8:	e59f2048 	ldr	r2, [pc, #72]	; 30c48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30bfc:	e59d0008 	ldr	r0, [sp, #8]
   30c00:	ebfff520 	bl	2e088 <strlcat>
   30c04:	e59d0008 	ldr	r0, [sp, #8]
   30c08:	e59f2038 	ldr	r2, [pc, #56]	; 30c48 <CommandHandler::logDebug(char const*, char const*, char const*)+0x120>
   30c0c:	e59f104c 	ldr	r1, [pc, #76]	; 30c60 <CommandHandler::logDebug(char const*, char const*, char const*)+0x138>
   30c10:	ebfff51c 	bl	2e088 <strlcat>
   30c14:	e59f3048 	ldr	r3, [pc, #72]	; 30c64 <CommandHandler::logDebug(char const*, char const*, char const*)+0x13c>
   30c18:	e5930000 	ldr	r0, [r3]
   30c1c:	e3500000 	cmp	r0, #0
   30c20:	0a000005 	beq	30c3c <CommandHandler::logDebug(char const*, char const*, char const*)+0x114>
   30c24:	e3a03000 	mov	r3, #0
   30c28:	e59d2008 	ldr	r2, [sp, #8]
   30c2c:	e58d3004 	str	r3, [sp, #4]
   30c30:	e58d3000 	str	r3, [sp]
   30c34:	e59f102c 	ldr	r1, [pc, #44]	; 30c68 <CommandHandler::logDebug(char const*, char const*, char const*)+0x140>
   30c38:	ebfffc9f 	bl	2febc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   30c3c:	e28ddd9e 	add	sp, sp, #10112	; 0x2780
   30c40:	e28dd00c 	add	sp, sp, #12
   30c44:	e8bd8030 	pop	{r4, r5, pc}
   30c48:	00001388 	.word	0x00001388
   30c4c:	00046410 	.word	0x00046410
   30c50:	000465e8 	.word	0x000465e8
   30c54:	000465ec 	.word	0x000465ec
   30c58:	000465f4 	.word	0x000465f4
   30c5c:	000465fc 	.word	0x000465fc
   30c60:	00046eec 	.word	0x00046eec
   30c64:	0004e1cc 	.word	0x0004e1cc
   30c68:	00046418 	.word	0x00046418

00030c6c <CommandHandler::service()>:
   30c6c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   30c70:	e2804a05 	add	r4, r0, #20480	; 0x5000
   30c74:	e5942870 	ldr	r2, [r4, #2160]	; 0x870
   30c78:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
   30c7c:	e24dd084 	sub	sp, sp, #132	; 0x84
   30c80:	e1520003 	cmp	r2, r3
   30c84:	0a000016 	beq	30ce4 <CommandHandler::service()+0x78>
   30c88:	e5943874 	ldr	r3, [r4, #2164]	; 0x874
   30c8c:	e5942874 	ldr	r2, [r4, #2164]	; 0x874
   30c90:	e0803003 	add	r3, r0, r3
   30c94:	e2822001 	add	r2, r2, #1
   30c98:	e2833b16 	add	r3, r3, #22528	; 0x5800
   30c9c:	e5d3307c 	ldrb	r3, [r3, #124]	; 0x7c
   30ca0:	e5842874 	str	r2, [r4, #2164]	; 0x874
   30ca4:	e5941874 	ldr	r1, [r4, #2164]	; 0x874
   30ca8:	e5942878 	ldr	r2, [r4, #2168]	; 0x878
   30cac:	e1a05000 	mov	r5, r0
   30cb0:	e1510002 	cmp	r1, r2
   30cb4:	23a02000 	movcs	r2, #0
   30cb8:	e3a01064 	mov	r1, #100	; 0x64
   30cbc:	25842874 	strcs	r2, [r4, #2164]	; 0x874
   30cc0:	e28d001c 	add	r0, sp, #28
   30cc4:	e59f20a8 	ldr	r2, [pc, #168]	; 30d74 <CommandHandler::service()+0x108>
   30cc8:	ebfff549 	bl	2e1f4 <snprintf>
   30ccc:	e28d001c 	add	r0, sp, #28
   30cd0:	ebffe4e9 	bl	2a07c <strlen>
   30cd4:	e28d101c 	add	r1, sp, #28
   30cd8:	e2802001 	add	r2, r0, #1
   30cdc:	e2850f65 	add	r0, r5, #404	; 0x194
   30ce0:	ebfffb09 	bl	2f90c <MiniHDLC::sendFrame(unsigned char const*, unsigned int)>
   30ce4:	e5943860 	ldr	r3, [r4, #2144]	; 0x860
   30ce8:	e3530000 	cmp	r3, #0
   30cec:	0a000006 	beq	30d0c <CommandHandler::service()+0xa0>
   30cf0:	e59f5080 	ldr	r5, [pc, #128]	; 30d78 <CommandHandler::service()+0x10c>
   30cf4:	ebfff48d 	bl	2df30 <millis>
   30cf8:	e1a02005 	mov	r2, r5
   30cfc:	e59418b0 	ldr	r1, [r4, #2224]	; 0x8b0
   30d00:	ebfff4a7 	bl	2dfa4 <isTimeout>
   30d04:	e3500000 	cmp	r0, #0
   30d08:	1a000001 	bne	30d14 <CommandHandler::service()+0xa8>
   30d0c:	e28dd084 	add	sp, sp, #132	; 0x84
   30d10:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30d14:	ebffd7ac 	bl	26bcc <CLogger::Get()>
   30d18:	e594986c 	ldr	r9, [r4, #2156]	; 0x86c
   30d1c:	e1a06000 	mov	r6, r0
   30d20:	e5947868 	ldr	r7, [r4, #2152]	; 0x868
   30d24:	e59488b0 	ldr	r8, [r4, #2224]	; 0x8b0
   30d28:	ebfff480 	bl	2df30 <millis>
   30d2c:	e58d9000 	str	r9, [sp]
   30d30:	e58d000c 	str	r0, [sp, #12]
   30d34:	e98d0180 	stmib	sp, {r7, r8}
   30d38:	e1a00006 	mov	r0, r6
   30d3c:	e58d5010 	str	r5, [sp, #16]
   30d40:	e59f3034 	ldr	r3, [pc, #52]	; 30d7c <CommandHandler::service()+0x110>
   30d44:	e3a02004 	mov	r2, #4
   30d48:	e59f1030 	ldr	r1, [pc, #48]	; 30d80 <CommandHandler::service()+0x114>
   30d4c:	ebffd6db 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30d50:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30d54:	e3500000 	cmp	r0, #0
   30d58:	0a000000 	beq	30d60 <CommandHandler::service()+0xf4>
   30d5c:	ebffe8cc 	bl	2b094 <operator delete[](void*)>
   30d60:	e3a03000 	mov	r3, #0
   30d64:	e5843860 	str	r3, [r4, #2144]	; 0x860
   30d68:	e5843864 	str	r3, [r4, #2148]	; 0x864
   30d6c:	e28dd084 	add	sp, sp, #132	; 0x84
   30d70:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   30d74:	00046604 	.word	0x00046604
   30d78:	00000bb8 	.word	0x00000bb8
   30d7c:	00046624 	.word	0x00046624
   30d80:	00046300 	.word	0x00046300

00030d84 <CommandHandler::fileReceiveCleardown()>:
   30d84:	e92d4010 	push	{r4, lr}
   30d88:	e2804a05 	add	r4, r0, #20480	; 0x5000
   30d8c:	e5940860 	ldr	r0, [r4, #2144]	; 0x860
   30d90:	e3500000 	cmp	r0, #0
   30d94:	0a000000 	beq	30d9c <CommandHandler::fileReceiveCleardown()+0x18>
   30d98:	ebffe8bd 	bl	2b094 <operator delete[](void*)>
   30d9c:	e3a03000 	mov	r3, #0
   30da0:	e5843860 	str	r3, [r4, #2144]	; 0x860
   30da4:	e5843864 	str	r3, [r4, #2148]	; 0x864
   30da8:	e8bd8010 	pop	{r4, pc}

00030dac <CommandHandler::~CommandHandler()>:
   30dac:	e92d4010 	push	{r4, lr}
   30db0:	e1a04000 	mov	r4, r0
   30db4:	e2800f65 	add	r0, r0, #404	; 0x194
   30db8:	ebfff84e 	bl	2eef8 <MiniHDLC::~MiniHDLC()>
   30dbc:	e1a00004 	mov	r0, r4
   30dc0:	e8bd8010 	pop	{r4, pc}

00030dc4 <CommsManager::handleRxMsg(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   30dc4:	e3a00000 	mov	r0, #0
   30dc8:	e12fff1e 	bx	lr

00030dcc <CommsManager::serialPutStr(unsigned char const*, unsigned int)>:
   30dcc:	e59f3020 	ldr	r3, [pc, #32]	; 30df4 <CommsManager::serialPutStr(unsigned char const*, unsigned int)+0x28>
   30dd0:	e5933000 	ldr	r3, [r3]
   30dd4:	e2833a07 	add	r3, r3, #28672	; 0x7000
   30dd8:	e593380c 	ldr	r3, [r3, #2060]	; 0x80c
   30ddc:	e3530000 	cmp	r3, #0
   30de0:	012fff1e 	bxeq	lr
   30de4:	e1a02001 	mov	r2, r1
   30de8:	e1a01000 	mov	r1, r0
   30dec:	e1a00003 	mov	r0, r3
   30df0:	eafff2a5 	b	2d88c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>
   30df4:	0004e1d8 	.word	0x0004e1d8

00030df8 <CommsManager::serialTxAvailable()>:
   30df8:	e59f3014 	ldr	r3, [pc, #20]	; 30e14 <CommsManager::serialTxAvailable()+0x1c>
   30dfc:	e5933000 	ldr	r3, [r3]
   30e00:	e2833a07 	add	r3, r3, #28672	; 0x7000
   30e04:	e593080c 	ldr	r0, [r3, #2060]	; 0x80c
   30e08:	e3500000 	cmp	r0, #0
   30e0c:	012fff1e 	bxeq	lr
   30e10:	eafff261 	b	2d79c <CUartMaxiSerialDevice::AvailableForWrite()>
   30e14:	0004e1d8 	.word	0x0004e1d8

00030e18 <CommsManager::performUpdate(unsigned char const*, unsigned int)>:
   30e18:	e92d4030 	push	{r4, r5, lr}
   30e1c:	e1a05001 	mov	r5, r1
   30e20:	e1a04000 	mov	r4, r0
   30e24:	e24dd014 	sub	sp, sp, #20
   30e28:	ebffd767 	bl	26bcc <CLogger::Get()>
   30e2c:	e0843005 	add	r3, r4, r5
   30e30:	e5532001 	ldrb	r2, [r3, #-1]
   30e34:	e5d43000 	ldrb	r3, [r4]
   30e38:	e59f1034 	ldr	r1, [pc, #52]	; 30e74 <CommsManager::performUpdate(unsigned char const*, unsigned int)+0x5c>
   30e3c:	e58d2008 	str	r2, [sp, #8]
   30e40:	e58d3004 	str	r3, [sp, #4]
   30e44:	e3a02004 	mov	r2, #4
   30e48:	e59f3028 	ldr	r3, [pc, #40]	; 30e78 <CommsManager::performUpdate(unsigned char const*, unsigned int)+0x60>
   30e4c:	e58d5000 	str	r5, [sp]
   30e50:	ebffd69a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30e54:	e59f0020 	ldr	r0, [pc, #32]	; 30e7c <CommsManager::performUpdate(unsigned char const*, unsigned int)+0x64>
   30e58:	ebfff43b 	bl	2df4c <microsDelay>
   30e5c:	e1a00004 	mov	r0, r4
   30e60:	e1a01005 	mov	r1, r5
   30e64:	ebffe780 	bl	2ac6c <EnableChainBoot>
   30e68:	e3a00001 	mov	r0, #1
   30e6c:	e28dd014 	add	sp, sp, #20
   30e70:	e8bd8030 	pop	{r4, r5, pc}
   30e74:	000466b8 	.word	0x000466b8
   30e78:	00046680 	.word	0x00046680
   30e7c:	000f4240 	.word	0x000f4240

00030e80 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)>:
   30e80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   30e84:	e1a04000 	mov	r4, r0
   30e88:	e24dd008 	sub	sp, sp, #8
   30e8c:	e1a06001 	mov	r6, r1
   30e90:	e1a08002 	mov	r8, r2
   30e94:	ebfffaf4 	bl	2fa6c <CommandHandler::CommandHandler()>
   30e98:	e3a0e000 	mov	lr, #0
   30e9c:	e2843a07 	add	r3, r4, #28672	; 0x7000
   30ea0:	e59f004c 	ldr	r0, [pc, #76]	; 30ef4 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x74>
   30ea4:	e583680c 	str	r6, [r3, #2060]	; 0x80c
   30ea8:	e5838810 	str	r8, [r3, #2064]	; 0x810
   30eac:	e59fc044 	ldr	ip, [pc, #68]	; 30ef8 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x78>
   30eb0:	e58de004 	str	lr, [sp, #4]
   30eb4:	e59f7040 	ldr	r7, [pc, #64]	; 30efc <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x7c>
   30eb8:	e59fe040 	ldr	lr, [pc, #64]	; 30f00 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x80>
   30ebc:	e59f5040 	ldr	r5, [pc, #64]	; 30f04 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x84>
   30ec0:	e59f6040 	ldr	r6, [pc, #64]	; 30f08 <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x88>
   30ec4:	e58d0000 	str	r0, [sp]
   30ec8:	e1a01004 	mov	r1, r4
   30ecc:	e1a00004 	mov	r0, r4
   30ed0:	e59f3034 	ldr	r3, [pc, #52]	; 30f0c <CommsManager::CommsManager(CUartMaxiSerialDevice*, AppSerialIF*)+0x8c>
   30ed4:	e3a02001 	mov	r2, #1
   30ed8:	e5874000 	str	r4, [r7]
   30edc:	e5856000 	str	r6, [r5]
   30ee0:	e58ce000 	str	lr, [ip]
   30ee4:	ebfffb0f 	bl	2fb28 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   30ee8:	e1a00004 	mov	r0, r4
   30eec:	e28dd008 	add	sp, sp, #8
   30ef0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   30ef4:	00030e18 	.word	0x00030e18
   30ef8:	0004e1d4 	.word	0x0004e1d4
   30efc:	0004e1d8 	.word	0x0004e1d8
   30f00:	00030df8 	.word	0x00030df8
   30f04:	0004e1d0 	.word	0x0004e1d0
   30f08:	00030dcc 	.word	0x00030dcc
   30f0c:	00030dc4 	.word	0x00030dc4

00030f10 <CommsManager::~CommsManager()>:
   30f10:	e92d4010 	push	{r4, lr}
   30f14:	e1a04000 	mov	r4, r0
   30f18:	ebffffa3 	bl	30dac <CommandHandler::~CommandHandler()>
   30f1c:	e1a00004 	mov	r0, r4
   30f20:	e8bd8010 	pop	{r4, pc}

00030f24 <CommsManager::setup()>:
   30f24:	e3a00001 	mov	r0, #1
   30f28:	e12fff1e 	bx	lr

00030f2c <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)>:
   30f2c:	e92d4010 	push	{r4, lr}
   30f30:	e1a04001 	mov	r4, r1
   30f34:	e24dd008 	sub	sp, sp, #8
   30f38:	ebffd723 	bl	26bcc <CLogger::Get()>
   30f3c:	e59fe04c 	ldr	lr, [pc, #76]	; 30f90 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x64>
   30f40:	e5d41000 	ldrb	r1, [r4]
   30f44:	e59e3004 	ldr	r3, [lr, #4]
   30f48:	e5d42001 	ldrb	r2, [r4, #1]
   30f4c:	e59f4040 	ldr	r4, [pc, #64]	; 30f94 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x68>
   30f50:	e283c001 	add	ip, r3, #1
   30f54:	e0822401 	add	r2, r2, r1, lsl #8
   30f58:	e58d2004 	str	r2, [sp, #4]
   30f5c:	e58d3000 	str	r3, [sp]
   30f60:	e1a01004 	mov	r1, r4
   30f64:	e59f302c 	ldr	r3, [pc, #44]	; 30f98 <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x6c>
   30f68:	e3a02003 	mov	r2, #3
   30f6c:	e58ec004 	str	ip, [lr, #4]
   30f70:	ebffd652 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30f74:	ebffd714 	bl	26bcc <CLogger::Get()>
   30f78:	e1a01004 	mov	r1, r4
   30f7c:	e3a02003 	mov	r2, #3
   30f80:	e59f3014 	ldr	r3, [pc, #20]	; 30f9c <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)+0x70>
   30f84:	e28dd008 	add	sp, sp, #8
   30f88:	e8bd4010 	pop	{r4, lr}
   30f8c:	eaffd64b 	b	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   30f90:	0004e1d8 	.word	0x0004e1d8
   30f94:	000466b8 	.word	0x000466b8
   30f98:	000466c8 	.word	0x000466c8
   30f9c:	000466dc 	.word	0x000466dc

00030fa0 <CommsManager::hdlcFrameRxCBStatic(unsigned char const*, unsigned int)>:
   30fa0:	e59f300c 	ldr	r3, [pc, #12]	; 30fb4 <CommsManager::hdlcFrameRxCBStatic(unsigned char const*, unsigned int)+0x14>
   30fa4:	e1a02001 	mov	r2, r1
   30fa8:	e1a01000 	mov	r1, r0
   30fac:	e5930000 	ldr	r0, [r3]
   30fb0:	eaffffdd 	b	30f2c <CommsManager::hdlcFrameRxCB(unsigned char const*, unsigned int)>
   30fb4:	0004e1d8 	.word	0x0004e1d8

00030fb8 <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)>:
   30fb8:	e59f3020 	ldr	r3, [pc, #32]	; 30fe0 <CommsManager::hdlcFrameTxCBStatic(unsigned char const*, unsigned int)+0x28>
   30fbc:	e5933000 	ldr	r3, [r3]
   30fc0:	e2833a07 	add	r3, r3, #28672	; 0x7000
   30fc4:	e593380c 	ldr	r3, [r3, #2060]	; 0x80c
   30fc8:	e3530000 	cmp	r3, #0
   30fcc:	012fff1e 	bxeq	lr
   30fd0:	e1a02001 	mov	r2, r1
   30fd4:	e1a01000 	mov	r1, r0
   30fd8:	e1a00003 	mov	r0, r3
   30fdc:	eafff22a 	b	2d88c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>
   30fe0:	0004e1d8 	.word	0x0004e1d8

00030fe4 <CommsManager::hdlcFrameTxCB(unsigned char const*, unsigned int)>:
   30fe4:	e2800a07 	add	r0, r0, #28672	; 0x7000
   30fe8:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
   30fec:	e3500000 	cmp	r0, #0
   30ff0:	012fff1e 	bxeq	lr
   30ff4:	eafff224 	b	2d88c <CUartMaxiSerialDevice::Write(unsigned char const*, unsigned int)>

00030ff8 <CommsManager::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>:
   30ff8:	eafffbaf 	b	2febc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>

00030ffc <CommsManager::serviceGetFromSerial()>:
   30ffc:	e2803a07 	add	r3, r0, #28672	; 0x7000
   31000:	e593380c 	ldr	r3, [r3, #2060]	; 0x80c
   31004:	e3530000 	cmp	r3, #0
   31008:	012fff1e 	bxeq	lr
   3100c:	e92d4010 	push	{r4, lr}
   31010:	e24ddffa 	sub	sp, sp, #1000	; 0x3e8
   31014:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   31018:	e1a04000 	mov	r4, r0
   3101c:	e1a0100d 	mov	r1, sp
   31020:	e1a00003 	mov	r0, r3
   31024:	ebfff27e 	bl	2da24 <CUartMaxiSerialDevice::Read(unsigned char*, unsigned int)>
   31028:	e2502000 	subs	r2, r0, #0
   3102c:	da000002 	ble	3103c <CommsManager::serviceGetFromSerial()+0x40>
   31030:	e1a0100d 	mov	r1, sp
   31034:	e1a00004 	mov	r0, r4
   31038:	ebfffad5 	bl	2fb94 <CommandHandler::handleHDLCReceivedChars(unsigned char const*, unsigned int)>
   3103c:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   31040:	e8bd8010 	pop	{r4, pc}

00031044 <CommsManager::service()>:
   31044:	e92d4010 	push	{r4, lr}
   31048:	e1a04000 	mov	r4, r0
   3104c:	ebffff06 	bl	30c6c <CommandHandler::service()>
   31050:	e1a00004 	mov	r0, r4
   31054:	e8bd4010 	pop	{r4, lr}
   31058:	eaffffe7 	b	30ffc <CommsManager::serviceGetFromSerial()>

0003105c <BusAccess::busActionHandleStart() [clone .part.7]>:
   3105c:	e92d4070 	push	{r4, r5, r6, lr}
   31060:	e5d011d8 	ldrb	r1, [r0, #472]	; 0x1d8
   31064:	e3a02001 	mov	r2, #1
   31068:	e1a04000 	mov	r4, r0
   3106c:	eb000a86 	bl	33a8c <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   31070:	ebfff3ad 	bl	2df2c <micros>
   31074:	e58401e0 	str	r0, [r4, #480]	; 0x1e0
   31078:	e1a00004 	mov	r0, r4
   3107c:	e59461d4 	ldr	r6, [r4, #468]	; 0x1d4
   31080:	e5d451d8 	ldrb	r5, [r4, #472]	; 0x1d8
   31084:	eb000811 	bl	330d0 <BusAccess::clockCurFreqHz()>
   31088:	e6ef5075 	uxtb	r5, r5
   3108c:	e3550004 	cmp	r5, #4
   31090:	e1a01000 	mov	r1, r0
   31094:	0a00000b 	beq	310c8 <BusAccess::busActionHandleStart() [clone .part.7]+0x6c>
   31098:	e3550001 	cmp	r5, #1
   3109c:	0a00000e 	beq	310dc <BusAccess::busActionHandleStart() [clone .part.7]+0x80>
   310a0:	e3550002 	cmp	r5, #2
   310a4:	0a000017 	beq	31108 <BusAccess::busActionHandleStart() [clone .part.7]+0xac>
   310a8:	e3550003 	cmp	r5, #3
   310ac:	13a00000 	movne	r0, #0
   310b0:	0a00001d 	beq	3112c <BusAccess::busActionHandleStart() [clone .part.7]+0xd0>
   310b4:	e3a03002 	mov	r3, #2
   310b8:	e58401e4 	str	r0, [r4, #484]	; 0x1e4
   310bc:	e3a00001 	mov	r0, #1
   310c0:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   310c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   310c8:	e59f0074 	ldr	r0, [pc, #116]	; 31144 <BusAccess::busActionHandleStart() [clone .part.7]+0xe8>
   310cc:	eb0032ee 	bl	3dc8c <__aeabi_uidiv>
   310d0:	e3500000 	cmp	r0, #0
   310d4:	03a00001 	moveq	r0, #1
   310d8:	eafffff5 	b	310b4 <BusAccess::busActionHandleStart() [clone .part.7]+0x58>
   310dc:	e3a0302c 	mov	r3, #44	; 0x2c
   310e0:	e0264693 	mla	r6, r3, r6, r4
   310e4:	e5963018 	ldr	r3, [r6, #24]
   310e8:	e3530000 	cmp	r3, #0
   310ec:	0a00000c 	beq	31124 <BusAccess::busActionHandleStart() [clone .part.7]+0xc8>
   310f0:	e59f0050 	ldr	r0, [pc, #80]	; 31148 <BusAccess::busActionHandleStart() [clone .part.7]+0xec>
   310f4:	e0000390 	mul	r0, r0, r3
   310f8:	eb0032e3 	bl	3dc8c <__aeabi_uidiv>
   310fc:	e3500000 	cmp	r0, #0
   31100:	03a00001 	moveq	r0, #1
   31104:	eaffffea 	b	310b4 <BusAccess::busActionHandleStart() [clone .part.7]+0x58>
   31108:	e3a0302c 	mov	r3, #44	; 0x2c
   3110c:	e0264693 	mla	r6, r3, r6, r4
   31110:	e5963020 	ldr	r3, [r6, #32]
   31114:	e3530000 	cmp	r3, #0
   31118:	1afffff4 	bne	310f0 <BusAccess::busActionHandleStart() [clone .part.7]+0x94>
   3111c:	e59f0028 	ldr	r0, [pc, #40]	; 3114c <BusAccess::busActionHandleStart() [clone .part.7]+0xf0>
   31120:	eafffff4 	b	310f8 <BusAccess::busActionHandleStart() [clone .part.7]+0x9c>
   31124:	e59f0024 	ldr	r0, [pc, #36]	; 31150 <BusAccess::busActionHandleStart() [clone .part.7]+0xf4>
   31128:	eafffff2 	b	310f8 <BusAccess::busActionHandleStart() [clone .part.7]+0x9c>
   3112c:	e3a0302c 	mov	r3, #44	; 0x2c
   31130:	e0264693 	mla	r6, r3, r6, r4
   31134:	e5963028 	ldr	r3, [r6, #40]	; 0x28
   31138:	e3530000 	cmp	r3, #0
   3113c:	0afffff6 	beq	3111c <BusAccess::busActionHandleStart() [clone .part.7]+0xc0>
   31140:	eaffffea 	b	310f0 <BusAccess::busActionHandleStart() [clone .part.7]+0x94>
   31144:	3b9aca00 	.word	0x3b9aca00
   31148:	000f4240 	.word	0x000f4240
   3114c:	01e84800 	.word	0x01e84800
   31150:	05f5e100 	.word	0x05f5e100

00031154 <BusAccess::busActionCheck() [clone .part.6]>:
   31154:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   31158:	e35c0000 	cmp	ip, #0
   3115c:	d12fff1e 	bxle	lr
   31160:	e92d4010 	push	{r4, lr}
   31164:	e1a02000 	mov	r2, r0
   31168:	e3a03000 	mov	r3, #0
   3116c:	e3a0402c 	mov	r4, #44	; 0x2c
   31170:	e5d21004 	ldrb	r1, [r2, #4]
   31174:	e282202c 	add	r2, r2, #44	; 0x2c
   31178:	e3510000 	cmp	r1, #0
   3117c:	0a00001a 	beq	311ec <BusAccess::busActionCheck() [clone .part.6]+0x98>
   31180:	e0210394 	mla	r1, r4, r3, r0
   31184:	e5d1e02c 	ldrb	lr, [r1, #44]	; 0x2c
   31188:	e35e0000 	cmp	lr, #0
   3118c:	0a00000d 	beq	311c8 <BusAccess::busActionCheck() [clone .part.6]+0x74>
   31190:	e3a0202c 	mov	r2, #44	; 0x2c
   31194:	e0220392 	mla	r2, r2, r3, r0
   31198:	e58031d4 	str	r3, [r0, #468]	; 0x1d4
   3119c:	e5d2302c 	ldrb	r3, [r2, #44]	; 0x2c
   311a0:	e3530000 	cmp	r3, #0
   311a4:	13a03004 	movne	r3, #4
   311a8:	0a000013 	beq	311fc <BusAccess::busActionCheck() [clone .part.6]+0xa8>
   311ac:	e3a02001 	mov	r2, #1
   311b0:	e5c031d8 	strb	r3, [r0, #472]	; 0x1d8
   311b4:	e5c021f0 	strb	r2, [r0, #496]	; 0x1f0
   311b8:	e1a04000 	mov	r4, r0
   311bc:	ebfff35a 	bl	2df2c <micros>
   311c0:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   311c4:	e8bd8010 	pop	{r4, pc}
   311c8:	e5d1e016 	ldrb	lr, [r1, #22]
   311cc:	e35e0000 	cmp	lr, #0
   311d0:	1affffee 	bne	31190 <BusAccess::busActionCheck() [clone .part.6]+0x3c>
   311d4:	e5d1e01c 	ldrb	lr, [r1, #28]
   311d8:	e35e0000 	cmp	lr, #0
   311dc:	1affffeb 	bne	31190 <BusAccess::busActionCheck() [clone .part.6]+0x3c>
   311e0:	e5d11024 	ldrb	r1, [r1, #36]	; 0x24
   311e4:	e3510000 	cmp	r1, #0
   311e8:	1affffe8 	bne	31190 <BusAccess::busActionCheck() [clone .part.6]+0x3c>
   311ec:	e2833001 	add	r3, r3, #1
   311f0:	e153000c 	cmp	r3, ip
   311f4:	1affffdd 	bne	31170 <BusAccess::busActionCheck() [clone .part.6]+0x1c>
   311f8:	e8bd8010 	pop	{r4, pc}
   311fc:	e5d23016 	ldrb	r3, [r2, #22]
   31200:	e3530000 	cmp	r3, #0
   31204:	13a03001 	movne	r3, #1
   31208:	1affffe7 	bne	311ac <BusAccess::busActionCheck() [clone .part.6]+0x58>
   3120c:	e5d2301c 	ldrb	r3, [r2, #28]
   31210:	e3530000 	cmp	r3, #0
   31214:	13a03002 	movne	r3, #2
   31218:	1affffe3 	bne	311ac <BusAccess::busActionCheck() [clone .part.6]+0x58>
   3121c:	e5d23024 	ldrb	r3, [r2, #36]	; 0x24
   31220:	e3530000 	cmp	r3, #0
   31224:	13a03003 	movne	r3, #3
   31228:	03a03000 	moveq	r3, #0
   3122c:	eaffffde 	b	311ac <BusAccess::busActionCheck() [clone .part.6]+0x58>

00031230 <BusAccess::BusAccess()>:
   31230:	e3a02000 	mov	r2, #0
   31234:	e92d4030 	push	{r4, r5, lr}
   31238:	e3a01001 	mov	r1, #1
   3123c:	e3a05064 	mov	r5, #100	; 0x64
   31240:	e3e0e000 	mvn	lr, #0
   31244:	e3a0c014 	mov	ip, #20
   31248:	e59f40b0 	ldr	r4, [pc, #176]	; 31300 <BusAccess::BusAccess()+0xd0>
   3124c:	e5c021c3 	strb	r2, [r0, #451]	; 0x1c3
   31250:	e58051ec 	str	r5, [r0, #492]	; 0x1ec
   31254:	e5804224 	str	r4, [r0, #548]	; 0x224
   31258:	e580e22c 	str	lr, [r0, #556]	; 0x22c
   3125c:	e580c000 	str	ip, [r0]
   31260:	e5c02228 	strb	r2, [r0, #552]	; 0x228
   31264:	e5802230 	str	r2, [r0, #560]	; 0x230
   31268:	e5802234 	str	r2, [r0, #564]	; 0x234
   3126c:	e5802238 	str	r2, [r0, #568]	; 0x238
   31270:	e580223c 	str	r2, [r0, #572]	; 0x23c
   31274:	e5802240 	str	r2, [r0, #576]	; 0x240
   31278:	e5802244 	str	r2, [r0, #580]	; 0x244
   3127c:	e5802248 	str	r2, [r0, #584]	; 0x248
   31280:	e580224c 	str	r2, [r0, #588]	; 0x24c
   31284:	e5802250 	str	r2, [r0, #592]	; 0x250
   31288:	e5802268 	str	r2, [r0, #616]	; 0x268
   3128c:	e580226c 	str	r2, [r0, #620]	; 0x26c
   31290:	e5802270 	str	r2, [r0, #624]	; 0x270
   31294:	e5802274 	str	r2, [r0, #628]	; 0x274
   31298:	e5802278 	str	r2, [r0, #632]	; 0x278
   3129c:	e580227c 	str	r2, [r0, #636]	; 0x27c
   312a0:	e5802254 	str	r2, [r0, #596]	; 0x254
   312a4:	e5802258 	str	r2, [r0, #600]	; 0x258
   312a8:	e580225c 	str	r2, [r0, #604]	; 0x25c
   312ac:	e5802260 	str	r2, [r0, #608]	; 0x260
   312b0:	e5802264 	str	r2, [r0, #612]	; 0x264
   312b4:	e58021bc 	str	r2, [r0, #444]	; 0x1bc
   312b8:	e5c021c1 	strb	r2, [r0, #449]	; 0x1c1
   312bc:	e5c021c2 	strb	r2, [r0, #450]	; 0x1c2
   312c0:	e58011c8 	str	r1, [r0, #456]	; 0x1c8
   312c4:	e5c011c0 	strb	r1, [r0, #448]	; 0x1c0
   312c8:	e58021cc 	str	r2, [r0, #460]	; 0x1cc
   312cc:	e5c021d0 	strb	r2, [r0, #464]	; 0x1d0
   312d0:	e5c021d1 	strb	r2, [r0, #465]	; 0x1d1
   312d4:	e58021d4 	str	r2, [r0, #468]	; 0x1d4
   312d8:	e5c021d8 	strb	r2, [r0, #472]	; 0x1d8
   312dc:	e58021dc 	str	r2, [r0, #476]	; 0x1dc
   312e0:	e58021e0 	str	r2, [r0, #480]	; 0x1e0
   312e4:	e58021e4 	str	r2, [r0, #484]	; 0x1e4
   312e8:	e5c021f0 	strb	r2, [r0, #496]	; 0x1f0
   312ec:	e5c021e8 	strb	r2, [r0, #488]	; 0x1e8
   312f0:	e5c021c5 	strb	r2, [r0, #453]	; 0x1c5
   312f4:	e5c021c4 	strb	r2, [r0, #452]	; 0x1c4
   312f8:	e5c021f1 	strb	r2, [r0, #497]	; 0x1f1
   312fc:	e8bd8030 	pop	{r4, r5, pc}
   31300:	000f4240 	.word	0x000f4240

00031304 <BusAccess::init()>:
   31304:	e92d4070 	push	{r4, r5, r6, lr}
   31308:	e1a04000 	mov	r4, r0
   3130c:	e3a05000 	mov	r5, #0
   31310:	eb0005fa 	bl	32b00 <BusAccess::clockSetup()>
   31314:	e1a00004 	mov	r0, r4
   31318:	e59f10ac 	ldr	r1, [pc, #172]	; 313cc <BusAccess::init()+0xc8>
   3131c:	eb000670 	bl	32ce4 <BusAccess::clockSetFreqHz(unsigned long)>
   31320:	e1a00004 	mov	r0, r4
   31324:	e3a01001 	mov	r1, #1
   31328:	eb0006f5 	bl	32f04 <BusAccess::clockEnable(bool)>
   3132c:	e1a00004 	mov	r0, r4
   31330:	e1a02005 	mov	r2, r5
   31334:	e3a0100b 	mov	r1, #11
   31338:	eb0008b6 	bl	33618 <BusAccess::setPinOut(int, bool)>
   3133c:	e1a00004 	mov	r0, r4
   31340:	e1a02005 	mov	r2, r5
   31344:	e3a01009 	mov	r1, #9
   31348:	eb0008b2 	bl	33618 <BusAccess::setPinOut(int, bool)>
   3134c:	e1a00004 	mov	r0, r4
   31350:	e1a02005 	mov	r2, r5
   31354:	e3a0100a 	mov	r1, #10
   31358:	eb0008ae 	bl	33618 <BusAccess::setPinOut(int, bool)>
   3135c:	e1a00004 	mov	r0, r4
   31360:	e3a02001 	mov	r2, #1
   31364:	e3a01010 	mov	r1, #16
   31368:	eb0008aa 	bl	33618 <BusAccess::setPinOut(int, bool)>
   3136c:	e1a00004 	mov	r0, r4
   31370:	e3a02001 	mov	r2, #1
   31374:	e3a01013 	mov	r1, #19
   31378:	eb0008a6 	bl	33618 <BusAccess::setPinOut(int, bool)>
   3137c:	e1a02005 	mov	r2, r5
   31380:	e1a00004 	mov	r0, r4
   31384:	e3a01007 	mov	r1, #7
   31388:	e5c451f1 	strb	r5, [r4, #497]	; 0x1f1
   3138c:	eb0008a1 	bl	33618 <BusAccess::setPinOut(int, bool)>
   31390:	e1a00004 	mov	r0, r4
   31394:	e3a02001 	mov	r2, #1
   31398:	e3a01006 	mov	r1, #6
   3139c:	eb00089d 	bl	33618 <BusAccess::setPinOut(int, bool)>
   313a0:	e3a02001 	mov	r2, #1
   313a4:	e1a00004 	mov	r0, r4
   313a8:	e3a01008 	mov	r1, #8
   313ac:	eb000899 	bl	33618 <BusAccess::setPinOut(int, bool)>
   313b0:	e1a01005 	mov	r1, r5
   313b4:	e1a00004 	mov	r0, r4
   313b8:	eb000a1d 	bl	33c34 <BusAccess::busPagePinSetActive(bool)>
   313bc:	e1a00004 	mov	r0, r4
   313c0:	eb000823 	bl	33454 <BusAccess::waitSetupMREQAndIORQEnables()>
   313c4:	e5c451c3 	strb	r5, [r4, #451]	; 0x1c3
   313c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   313cc:	000f4240 	.word	0x000f4240

000313d0 <BusAccess::busAccessReinit()>:
   313d0:	e92d4010 	push	{r4, lr}
   313d4:	e1a04000 	mov	r4, r0
   313d8:	eb0009fa 	bl	33bc8 <BusAccess::busAccessCallbackPageIn()>
   313dc:	e5943000 	ldr	r3, [r4]
   313e0:	e3a0e040 	mov	lr, #64	; 0x40
   313e4:	e3530011 	cmp	r3, #17
   313e8:	03a02c0e 	moveq	r2, #3584	; 0xe00
   313ec:	13a01801 	movne	r1, #65536	; 0x10000
   313f0:	13a02c0e 	movne	r2, #3584	; 0xe00
   313f4:	159f3070 	ldrne	r3, [pc, #112]	; 3146c <BusAccess::busAccessReinit()+0x9c>
   313f8:	059f306c 	ldreq	r3, [pc, #108]	; 3146c <BusAccess::busAccessReinit()+0x9c>
   313fc:	1583101c 	strne	r1, [r3, #28]
   31400:	e5832028 	str	r2, [r3, #40]	; 0x28
   31404:	e3a03000 	mov	r3, #0
   31408:	e59f205c 	ldr	r2, [pc, #92]	; 3146c <BusAccess::busAccessReinit()+0x9c>
   3140c:	e1a01003 	mov	r1, r3
   31410:	e592c008 	ldr	ip, [r2, #8]
   31414:	e1a00004 	mov	r0, r4
   31418:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   3141c:	e582c008 	str	ip, [r2, #8]
   31420:	e582e01c 	str	lr, [r2, #28]
   31424:	e5c431c4 	strb	r3, [r4, #452]	; 0x1c4
   31428:	e58431c8 	str	r3, [r4, #456]	; 0x1c8
   3142c:	eb0003ab 	bl	322e0 <BusAccess::waitForBusAck(bool)>
   31430:	e1a00004 	mov	r0, r4
   31434:	eb000a16 	bl	33c94 <BusAccess::waitGenerationDisable()>
   31438:	ebffd5e3 	bl	26bcc <CLogger::Get()>
   3143c:	e59f302c 	ldr	r3, [pc, #44]	; 31470 <BusAccess::busAccessReinit()+0xa0>
   31440:	e3a02004 	mov	r2, #4
   31444:	e59f1028 	ldr	r1, [pc, #40]	; 31474 <BusAccess::busAccessReinit()+0xa4>
   31448:	ebffd51c 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3144c:	e3a01001 	mov	r1, #1
   31450:	e1a00004 	mov	r0, r4
   31454:	eb000843 	bl	33568 <BusAccess::waitResetFlipFlops(bool)>
   31458:	e1a00004 	mov	r0, r4
   3145c:	eb000722 	bl	330ec <BusAccess::waitEnablementUpdate()>
   31460:	e3a03001 	mov	r3, #1
   31464:	e5c431c0 	strb	r3, [r4, #448]	; 0x1c0
   31468:	e8bd8010 	pop	{r4, pc}
   3146c:	20200000 	.word	0x20200000
   31470:	000466f0 	.word	0x000466f0
   31474:	000466e4 	.word	0x000466e4

00031478 <BusAccess::waitOnMemory(int, bool)>:
   31478:	e3510000 	cmp	r1, #0
   3147c:	b12fff1e 	bxlt	lr
   31480:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   31484:	e151000c 	cmp	r1, ip
   31488:	a12fff1e 	bxge	lr
   3148c:	e3a0c02c 	mov	ip, #44	; 0x2c
   31490:	e021019c 	mla	r1, ip, r1, r0
   31494:	e5c12014 	strb	r2, [r1, #20]
   31498:	ea000713 	b	330ec <BusAccess::waitEnablementUpdate()>

0003149c <BusAccess::waitOnIO(int, bool)>:
   3149c:	e3510000 	cmp	r1, #0
   314a0:	b12fff1e 	bxlt	lr
   314a4:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   314a8:	e151000c 	cmp	r1, ip
   314ac:	a12fff1e 	bxge	lr
   314b0:	e3a0c02c 	mov	ip, #44	; 0x2c
   314b4:	e021019c 	mla	r1, ip, r1, r0
   314b8:	e5c12015 	strb	r2, [r1, #21]
   314bc:	ea00070a 	b	330ec <BusAccess::waitEnablementUpdate()>

000314c0 <BusAccess::waitIsOnMemory()>:
   314c0:	e5d001c1 	ldrb	r0, [r0, #449]	; 0x1c1
   314c4:	e12fff1e 	bx	lr

000314c8 <BusAccess::waitSetCycleUs(unsigned long)>:
   314c8:	e58011c8 	str	r1, [r0, #456]	; 0x1c8
   314cc:	e12fff1e 	bx	lr

000314d0 <BusAccess::waitIsHeld()>:
   314d0:	e5d001d0 	ldrb	r0, [r0, #464]	; 0x1d0
   314d4:	e12fff1e 	bx	lr

000314d8 <BusAccess::waitHold(int, bool)>:
   314d8:	e3510000 	cmp	r1, #0
   314dc:	b12fff1e 	bxlt	lr
   314e0:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   314e4:	e151000c 	cmp	r1, ip
   314e8:	a12fff1e 	bxge	lr
   314ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   314f0:	e3a0e02c 	mov	lr, #44	; 0x2c
   314f4:	e021019e 	mla	r1, lr, r1, r0
   314f8:	e35c0000 	cmp	ip, #0
   314fc:	e5c1202e 	strb	r2, [r1, #46]	; 0x2e
   31500:	da00000c 	ble	31538 <BusAccess::waitHold(int, bool)+0x60>
   31504:	e1a02000 	mov	r2, r0
   31508:	e3a03000 	mov	r3, #0
   3150c:	e5d21004 	ldrb	r1, [r2, #4]
   31510:	e282202c 	add	r2, r2, #44	; 0x2c
   31514:	e3510000 	cmp	r1, #0
   31518:	0a000003 	beq	3152c <BusAccess::waitHold(int, bool)+0x54>
   3151c:	e021039e 	mla	r1, lr, r3, r0
   31520:	e5d1102e 	ldrb	r1, [r1, #46]	; 0x2e
   31524:	e3510000 	cmp	r1, #0
   31528:	1a000005 	bne	31544 <BusAccess::waitHold(int, bool)+0x6c>
   3152c:	e2833001 	add	r3, r3, #1
   31530:	e15c0003 	cmp	ip, r3
   31534:	1afffff4 	bne	3150c <BusAccess::waitHold(int, bool)+0x34>
   31538:	e3a03000 	mov	r3, #0
   3153c:	e5c031d0 	strb	r3, [r0, #464]	; 0x1d0
   31540:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   31544:	e3a03001 	mov	r3, #1
   31548:	e5c031d0 	strb	r3, [r0, #464]	; 0x1d0
   3154c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00031550 <BusAccess::targetReqReset(int, int)>:
   31550:	e3510000 	cmp	r1, #0
   31554:	b12fff1e 	bxlt	lr
   31558:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   3155c:	e1510003 	cmp	r1, r3
   31560:	a12fff1e 	bxge	lr
   31564:	e3a0c02c 	mov	ip, #44	; 0x2c
   31568:	e3520000 	cmp	r2, #0
   3156c:	d3a02064 	movle	r2, #100	; 0x64
   31570:	e3a03001 	mov	r3, #1
   31574:	e92d4010 	push	{r4, lr}
   31578:	e021019c 	mla	r1, ip, r1, r0
   3157c:	e5812018 	str	r2, [r1, #24]
   31580:	e5c13016 	strb	r3, [r1, #22]
   31584:	ebffd590 	bl	26bcc <CLogger::Get()>
   31588:	e8bd4010 	pop	{r4, lr}
   3158c:	e59f3008 	ldr	r3, [pc, #8]	; 3159c <BusAccess::targetReqReset(int, int)+0x4c>
   31590:	e3a02004 	mov	r2, #4
   31594:	e59f1004 	ldr	r1, [pc, #4]	; 315a0 <BusAccess::targetReqReset(int, int)+0x50>
   31598:	eaffd4c8 	b	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3159c:	00046700 	.word	0x00046700
   315a0:	000466e4 	.word	0x000466e4

000315a4 <BusAccess::targetReqNMI(int, int)>:
   315a4:	e3510000 	cmp	r1, #0
   315a8:	b12fff1e 	bxlt	lr
   315ac:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   315b0:	e1510003 	cmp	r1, r3
   315b4:	a12fff1e 	bxge	lr
   315b8:	e3a0c02c 	mov	ip, #44	; 0x2c
   315bc:	e3520000 	cmp	r2, #0
   315c0:	d3a02020 	movle	r2, #32
   315c4:	e3a03001 	mov	r3, #1
   315c8:	e021019c 	mla	r1, ip, r1, r0
   315cc:	e5812020 	str	r2, [r1, #32]
   315d0:	e5c1301c 	strb	r3, [r1, #28]
   315d4:	e12fff1e 	bx	lr

000315d8 <BusAccess::targetReqIRQ(int, int)>:
   315d8:	e3510000 	cmp	r1, #0
   315dc:	b12fff1e 	bxlt	lr
   315e0:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   315e4:	e1510003 	cmp	r1, r3
   315e8:	a12fff1e 	bxge	lr
   315ec:	e3a0c02c 	mov	ip, #44	; 0x2c
   315f0:	e3520000 	cmp	r2, #0
   315f4:	d3a02020 	movle	r2, #32
   315f8:	e3a03001 	mov	r3, #1
   315fc:	e021019c 	mla	r1, ip, r1, r0
   31600:	e5812028 	str	r2, [r1, #40]	; 0x28
   31604:	e5c13024 	strb	r3, [r1, #36]	; 0x24
   31608:	e12fff1e 	bx	lr

0003160c <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>:
   3160c:	e92d4030 	push	{r4, r5, lr}
   31610:	e2514000 	subs	r4, r1, #0
   31614:	e24dd00c 	sub	sp, sp, #12
   31618:	e1a05000 	mov	r5, r0
   3161c:	ba00000f 	blt	31660 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x54>
   31620:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   31624:	e1540003 	cmp	r4, r3
   31628:	aa00000c 	bge	31660 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x54>
   3162c:	e3a0102c 	mov	r1, #44	; 0x2c
   31630:	e3a03001 	mov	r3, #1
   31634:	e0240491 	mla	r4, r1, r4, r0
   31638:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3163c:	e5c4202d 	strb	r2, [r4, #45]	; 0x2d
   31640:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   31644:	e3530000 	cmp	r3, #0
   31648:	0a00000e 	beq	31688 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x7c>
   3164c:	e5d531f0 	ldrb	r3, [r5, #496]	; 0x1f0
   31650:	e3530001 	cmp	r3, #1
   31654:	0a00000f 	beq	31698 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x8c>
   31658:	e28dd00c 	add	sp, sp, #12
   3165c:	e8bd8030 	pop	{r4, r5, pc}
   31660:	ebffd559 	bl	26bcc <CLogger::Get()>
   31664:	e59531bc 	ldr	r3, [r5, #444]	; 0x1bc
   31668:	e3a02004 	mov	r2, #4
   3166c:	e58d3004 	str	r3, [sp, #4]
   31670:	e58d4000 	str	r4, [sp]
   31674:	e59f302c 	ldr	r3, [pc, #44]	; 316a8 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x9c>
   31678:	e59f102c 	ldr	r1, [pc, #44]	; 316ac <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0xa0>
   3167c:	ebffd48f 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   31680:	e28dd00c 	add	sp, sp, #12
   31684:	e8bd8030 	pop	{r4, r5, pc}
   31688:	ebfffeb1 	bl	31154 <BusAccess::busActionCheck() [clone .part.6]>
   3168c:	e5d531f0 	ldrb	r3, [r5, #496]	; 0x1f0
   31690:	e3530001 	cmp	r3, #1
   31694:	1affffef 	bne	31658 <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)+0x4c>
   31698:	e1a00005 	mov	r0, r5
   3169c:	e28dd00c 	add	sp, sp, #12
   316a0:	e8bd4030 	pop	{r4, r5, lr}
   316a4:	eafffe6c 	b	3105c <BusAccess::busActionHandleStart() [clone .part.7]>
   316a8:	00046710 	.word	0x00046710
   316ac:	00046738 	.word	0x00046738

000316b0 <BusAccess::targetPageForInjection(int, bool)>:
   316b0:	e3520000 	cmp	r2, #0
   316b4:	0a00001a 	beq	31724 <BusAccess::targetPageForInjection(int, bool)+0x74>
   316b8:	e59021bc 	ldr	r2, [r0, #444]	; 0x1bc
   316bc:	e3520000 	cmp	r2, #0
   316c0:	d12fff1e 	bxle	lr
   316c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   316c8:	e1a06000 	mov	r6, r0
   316cc:	e1a04000 	mov	r4, r0
   316d0:	e3a05000 	mov	r5, #0
   316d4:	e3a08004 	mov	r8, #4
   316d8:	e3a07007 	mov	r7, #7
   316dc:	ea000002 	b	316ec <BusAccess::targetPageForInjection(int, bool)+0x3c>
   316e0:	e1520005 	cmp	r2, r5
   316e4:	e284402c 	add	r4, r4, #44	; 0x2c
   316e8:	da00000c 	ble	31720 <BusAccess::targetPageForInjection(int, bool)+0x70>
   316ec:	e5d43004 	ldrb	r3, [r4, #4]
   316f0:	e2855001 	add	r5, r5, #1
   316f4:	e3530000 	cmp	r3, #0
   316f8:	0afffff8 	beq	316e0 <BusAccess::targetPageForInjection(int, bool)+0x30>
   316fc:	e594300c 	ldr	r3, [r4, #12]
   31700:	e1a02008 	mov	r2, r8
   31704:	e5940010 	ldr	r0, [r4, #16]
   31708:	e1a01007 	mov	r1, r7
   3170c:	e12fff33 	blx	r3
   31710:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
   31714:	e284402c 	add	r4, r4, #44	; 0x2c
   31718:	e1520005 	cmp	r2, r5
   3171c:	cafffff2 	bgt	316ec <BusAccess::targetPageForInjection(int, bool)+0x3c>
   31720:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31724:	e3a03001 	mov	r3, #1
   31728:	e5c031c5 	strb	r3, [r0, #453]	; 0x1c5
   3172c:	e12fff1e 	bx	lr

00031730 <BusAccess::busActionCheck()>:
   31730:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   31734:	e3530000 	cmp	r3, #0
   31738:	112fff1e 	bxne	lr
   3173c:	eafffe84 	b	31154 <BusAccess::busActionCheck() [clone .part.6]>

00031740 <BusAccess::busActionHandleStart()>:
   31740:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   31744:	e3530001 	cmp	r3, #1
   31748:	0a000001 	beq	31754 <BusAccess::busActionHandleStart()+0x14>
   3174c:	e3a00000 	mov	r0, #0
   31750:	e12fff1e 	bx	lr
   31754:	eafffe40 	b	3105c <BusAccess::busActionHandleStart() [clone .part.7]>

00031758 <BusAccess::busAccessHandleIrqAck()>:
   31758:	e5d021d8 	ldrb	r2, [r0, #472]	; 0x1d8
   3175c:	e3520003 	cmp	r2, #3
   31760:	0a000001 	beq	3176c <BusAccess::busAccessHandleIrqAck()+0x14>
   31764:	e3a00000 	mov	r0, #0
   31768:	e12fff1e 	bx	lr
   3176c:	e92d4010 	push	{r4, lr}
   31770:	e1a04000 	mov	r4, r0
   31774:	eb00030b 	bl	323a8 <BusAccess::controlBusRead()>
   31778:	e59f3094 	ldr	r3, [pc, #148]	; 31814 <BusAccess::busAccessHandleIrqAck()+0xbc>
   3177c:	e0033000 	and	r3, r3, r0
   31780:	e3530018 	cmp	r3, #24
   31784:	0a000001 	beq	31790 <BusAccess::busAccessHandleIrqAck()+0x38>
   31788:	e3a00000 	mov	r0, #0
   3178c:	e8bd8010 	pop	{r4, pc}
   31790:	e3a02000 	mov	r2, #0
   31794:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   31798:	e1a00004 	mov	r0, r4
   3179c:	eb0008ba 	bl	33a8c <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   317a0:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   317a4:	e3510000 	cmp	r1, #0
   317a8:	c3a02000 	movgt	r2, #0
   317ac:	c3a0c02c 	movgt	ip, #44	; 0x2c
   317b0:	c1a00002 	movgt	r0, r2
   317b4:	da000013 	ble	31808 <BusAccess::busAccessHandleIrqAck()+0xb0>
   317b8:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   317bc:	e6ef3073 	uxtb	r3, r3
   317c0:	e3530004 	cmp	r3, #4
   317c4:	0023429c 	mlaeq	r3, ip, r2, r4
   317c8:	05c3002c 	strbeq	r0, [r3, #44]	; 0x2c
   317cc:	0a00000a 	beq	317fc <BusAccess::busAccessHandleIrqAck()+0xa4>
   317d0:	e3530001 	cmp	r3, #1
   317d4:	0023429c 	mlaeq	r3, ip, r2, r4
   317d8:	05c30016 	strbeq	r0, [r3, #22]
   317dc:	0a000006 	beq	317fc <BusAccess::busAccessHandleIrqAck()+0xa4>
   317e0:	e3530002 	cmp	r3, #2
   317e4:	0023429c 	mlaeq	r3, ip, r2, r4
   317e8:	05c3001c 	strbeq	r0, [r3, #28]
   317ec:	0a000002 	beq	317fc <BusAccess::busAccessHandleIrqAck()+0xa4>
   317f0:	e3530003 	cmp	r3, #3
   317f4:	0023429c 	mlaeq	r3, ip, r2, r4
   317f8:	05c30024 	strbeq	r0, [r3, #36]	; 0x24
   317fc:	e2822001 	add	r2, r2, #1
   31800:	e1520001 	cmp	r2, r1
   31804:	1affffeb 	bne	317b8 <BusAccess::busAccessHandleIrqAck()+0x60>
   31808:	e3a03000 	mov	r3, #0
   3180c:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   31810:	eaffffdc 	b	31788 <BusAccess::busAccessHandleIrqAck()+0x30>
   31814:	00000418 	.word	0x00000418

00031818 <BusAccess::busActionClearFlags()>:
   31818:	e59011bc 	ldr	r1, [r0, #444]	; 0x1bc
   3181c:	e3510000 	cmp	r1, #0
   31820:	da00001a 	ble	31890 <BusAccess::busActionClearFlags()+0x78>
   31824:	e3a02000 	mov	r2, #0
   31828:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3182c:	e1a0c002 	mov	ip, r2
   31830:	e3a0e02c 	mov	lr, #44	; 0x2c
   31834:	e5d031d8 	ldrb	r3, [r0, #472]	; 0x1d8
   31838:	e6ef3073 	uxtb	r3, r3
   3183c:	e3530004 	cmp	r3, #4
   31840:	0023029e 	mlaeq	r3, lr, r2, r0
   31844:	05c3c02c 	strbeq	ip, [r3, #44]	; 0x2c
   31848:	0a00000a 	beq	31878 <BusAccess::busActionClearFlags()+0x60>
   3184c:	e3530001 	cmp	r3, #1
   31850:	0023029e 	mlaeq	r3, lr, r2, r0
   31854:	05c3c016 	strbeq	ip, [r3, #22]
   31858:	0a000006 	beq	31878 <BusAccess::busActionClearFlags()+0x60>
   3185c:	e3530002 	cmp	r3, #2
   31860:	0023029e 	mlaeq	r3, lr, r2, r0
   31864:	05c3c01c 	strbeq	ip, [r3, #28]
   31868:	0a000002 	beq	31878 <BusAccess::busActionClearFlags()+0x60>
   3186c:	e3530003 	cmp	r3, #3
   31870:	0023029e 	mlaeq	r3, lr, r2, r0
   31874:	05c3c024 	strbeq	ip, [r3, #36]	; 0x24
   31878:	e2822001 	add	r2, r2, #1
   3187c:	e1520001 	cmp	r2, r1
   31880:	1affffeb 	bne	31834 <BusAccess::busActionClearFlags()+0x1c>
   31884:	e3a03000 	mov	r3, #0
   31888:	e5c031f0 	strb	r3, [r0, #496]	; 0x1f0
   3188c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   31890:	e3a03000 	mov	r3, #0
   31894:	e5c031f0 	strb	r3, [r0, #496]	; 0x1f0
   31898:	e12fff1e 	bx	lr

0003189c <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   3189c:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   318a0:	e3530000 	cmp	r3, #0
   318a4:	da00002b 	ble	31958 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xbc>
   318a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   318ac:	e1a09002 	mov	r9, r2
   318b0:	e1a08001 	mov	r8, r1
   318b4:	e1a07000 	mov	r7, r0
   318b8:	e1a04000 	mov	r4, r0
   318bc:	e3a05000 	mov	r5, #0
   318c0:	e5d4c004 	ldrb	ip, [r4, #4]
   318c4:	e2855001 	add	r5, r5, #1
   318c8:	e35c0000 	cmp	ip, #0
   318cc:	0a000007 	beq	318f0 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x54>
   318d0:	e594600c 	ldr	r6, [r4, #12]
   318d4:	e3560000 	cmp	r6, #0
   318d8:	0a000004 	beq	318f0 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x54>
   318dc:	e1a02009 	mov	r2, r9
   318e0:	e1a01008 	mov	r1, r8
   318e4:	e5940010 	ldr	r0, [r4, #16]
   318e8:	e12fff36 	blx	r6
   318ec:	e59731bc 	ldr	r3, [r7, #444]	; 0x1bc
   318f0:	e1530005 	cmp	r3, r5
   318f4:	e284402c 	add	r4, r4, #44	; 0x2c
   318f8:	cafffff0 	bgt	318c0 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x24>
   318fc:	e3590002 	cmp	r9, #2
   31900:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   31904:	e3530000 	cmp	r3, #0
   31908:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3190c:	e1a04007 	mov	r4, r7
   31910:	e3a05000 	mov	r5, #0
   31914:	e3a09001 	mov	r9, #1
   31918:	e5d42004 	ldrb	r2, [r4, #4]
   3191c:	e2855001 	add	r5, r5, #1
   31920:	e3520000 	cmp	r2, #0
   31924:	0a000007 	beq	31948 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xac>
   31928:	e594600c 	ldr	r6, [r4, #12]
   3192c:	e3560000 	cmp	r6, #0
   31930:	0a000004 	beq	31948 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xac>
   31934:	e1a02009 	mov	r2, r9
   31938:	e1a01008 	mov	r1, r8
   3193c:	e5940010 	ldr	r0, [r4, #16]
   31940:	e12fff36 	blx	r6
   31944:	e59731bc 	ldr	r3, [r7, #444]	; 0x1bc
   31948:	e1530005 	cmp	r3, r5
   3194c:	e284402c 	add	r4, r4, #44	; 0x2c
   31950:	cafffff0 	bgt	31918 <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x7c>
   31954:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31958:	e12fff1e 	bx	lr

0003195c <BusAccess::busActionHandleActive()>:
   3195c:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   31960:	e92d4070 	push	{r4, r5, r6, lr}
   31964:	e3530001 	cmp	r3, #1
   31968:	e1a04000 	mov	r4, r0
   3196c:	0a000068 	beq	31b14 <BusAccess::busActionHandleActive()+0x1b8>
   31970:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   31974:	e3530002 	cmp	r3, #2
   31978:	18bd8070 	popne	{r4, r5, r6, pc}
   3197c:	e5d461d8 	ldrb	r6, [r4, #472]	; 0x1d8
   31980:	e6ef6076 	uxtb	r6, r6
   31984:	e3560004 	cmp	r6, #4
   31988:	0a000035 	beq	31a64 <BusAccess::busActionHandleActive()+0x108>
   3198c:	e1a00004 	mov	r0, r4
   31990:	ebffff70 	bl	31758 <BusAccess::busAccessHandleIrqAck()>
   31994:	e2505000 	subs	r5, r0, #0
   31998:	18bd8070 	popne	{r4, r5, r6, pc}
   3199c:	ebfff162 	bl	2df2c <micros>
   319a0:	e59411e0 	ldr	r1, [r4, #480]	; 0x1e0
   319a4:	e59421e4 	ldr	r2, [r4, #484]	; 0x1e4
   319a8:	ebfff17d 	bl	2dfa4 <isTimeout>
   319ac:	e3500000 	cmp	r0, #0
   319b0:	08bd8070 	popeq	{r4, r5, r6, pc}
   319b4:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   319b8:	e3a02004 	mov	r2, #4
   319bc:	e1a00004 	mov	r0, r4
   319c0:	ebffffb5 	bl	3189c <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   319c4:	e1a02005 	mov	r2, r5
   319c8:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   319cc:	e1a00004 	mov	r0, r4
   319d0:	eb00082d 	bl	33a8c <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   319d4:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   319d8:	e3510000 	cmp	r1, #0
   319dc:	c1a02005 	movgt	r2, r5
   319e0:	c3a0c02c 	movgt	ip, #44	; 0x2c
   319e4:	c1a00002 	movgt	r0, r2
   319e8:	da000013 	ble	31a3c <BusAccess::busActionHandleActive()+0xe0>
   319ec:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   319f0:	e6ef3073 	uxtb	r3, r3
   319f4:	e3530004 	cmp	r3, #4
   319f8:	0023429c 	mlaeq	r3, ip, r2, r4
   319fc:	05c3002c 	strbeq	r0, [r3, #44]	; 0x2c
   31a00:	0a00000a 	beq	31a30 <BusAccess::busActionHandleActive()+0xd4>
   31a04:	e3530001 	cmp	r3, #1
   31a08:	0023429c 	mlaeq	r3, ip, r2, r4
   31a0c:	05c30016 	strbeq	r0, [r3, #22]
   31a10:	0a000006 	beq	31a30 <BusAccess::busActionHandleActive()+0xd4>
   31a14:	e3530002 	cmp	r3, #2
   31a18:	0023429c 	mlaeq	r3, ip, r2, r4
   31a1c:	05c3001c 	strbeq	r0, [r3, #28]
   31a20:	0a000002 	beq	31a30 <BusAccess::busActionHandleActive()+0xd4>
   31a24:	e3530003 	cmp	r3, #3
   31a28:	0023429c 	mlaeq	r3, ip, r2, r4
   31a2c:	05c30024 	strbeq	r0, [r3, #36]	; 0x24
   31a30:	e2822001 	add	r2, r2, #1
   31a34:	e1520001 	cmp	r2, r1
   31a38:	1affffeb 	bne	319ec <BusAccess::busActionHandleActive()+0x90>
   31a3c:	e3a03000 	mov	r3, #0
   31a40:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   31a44:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   31a48:	e3530001 	cmp	r3, #1
   31a4c:	18bd8070 	popne	{r4, r5, r6, pc}
   31a50:	e1a00004 	mov	r0, r4
   31a54:	e8bd4070 	pop	{r4, r5, r6, lr}
   31a58:	e3a02004 	mov	r2, #4
   31a5c:	e3a01009 	mov	r1, #9
   31a60:	eaffff8d 	b	3189c <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   31a64:	e59f31fc 	ldr	r3, [pc, #508]	; 31c68 <BusAccess::busActionHandleActive()+0x30c>
   31a68:	e5932034 	ldr	r2, [r3, #52]	; 0x34
   31a6c:	e2125004 	ands	r5, r2, #4
   31a70:	1a00004e 	bne	31bb0 <BusAccess::busActionHandleActive()+0x254>
   31a74:	e1a00004 	mov	r0, r4
   31a78:	eb0006f3 	bl	3364c <BusAccess::controlTake()>
   31a7c:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   31a80:	e3510000 	cmp	r1, #0
   31a84:	c1a02005 	movgt	r2, r5
   31a88:	c3a0c02c 	movgt	ip, #44	; 0x2c
   31a8c:	c1a00002 	movgt	r0, r2
   31a90:	da000013 	ble	31ae4 <BusAccess::busActionHandleActive()+0x188>
   31a94:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   31a98:	e6ef3073 	uxtb	r3, r3
   31a9c:	e3530004 	cmp	r3, #4
   31aa0:	0023429c 	mlaeq	r3, ip, r2, r4
   31aa4:	05c3002c 	strbeq	r0, [r3, #44]	; 0x2c
   31aa8:	0a00000a 	beq	31ad8 <BusAccess::busActionHandleActive()+0x17c>
   31aac:	e3530001 	cmp	r3, #1
   31ab0:	0023429c 	mlaeq	r3, ip, r2, r4
   31ab4:	05c30016 	strbeq	r0, [r3, #22]
   31ab8:	0a000006 	beq	31ad8 <BusAccess::busActionHandleActive()+0x17c>
   31abc:	e3530002 	cmp	r3, #2
   31ac0:	0023429c 	mlaeq	r3, ip, r2, r4
   31ac4:	05c3001c 	strbeq	r0, [r3, #28]
   31ac8:	0a000002 	beq	31ad8 <BusAccess::busActionHandleActive()+0x17c>
   31acc:	e3530003 	cmp	r3, #3
   31ad0:	0023429c 	mlaeq	r3, ip, r2, r4
   31ad4:	05c30024 	strbeq	r0, [r3, #36]	; 0x24
   31ad8:	e2822001 	add	r2, r2, #1
   31adc:	e1520001 	cmp	r2, r1
   31ae0:	1affffeb 	bne	31a94 <BusAccess::busActionHandleActive()+0x138>
   31ae4:	e3a03000 	mov	r3, #0
   31ae8:	e3a0202c 	mov	r2, #44	; 0x2c
   31aec:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   31af0:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   31af4:	e1a00004 	mov	r0, r4
   31af8:	e0234392 	mla	r3, r2, r3, r4
   31afc:	e3a01004 	mov	r1, #4
   31b00:	e5d3202d 	ldrb	r2, [r3, #45]	; 0x2d
   31b04:	ebffff64 	bl	3189c <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   31b08:	e1a00004 	mov	r0, r4
   31b0c:	e8bd4070 	pop	{r4, r5, r6, lr}
   31b10:	ea0005d6 	b	33270 <BusAccess::controlRelease()>
   31b14:	ebfff104 	bl	2df2c <micros>
   31b18:	e59411dc 	ldr	r1, [r4, #476]	; 0x1dc
   31b1c:	e59f2148 	ldr	r2, [pc, #328]	; 31c6c <BusAccess::busActionHandleActive()+0x310>
   31b20:	ebfff11f 	bl	2dfa4 <isTimeout>
   31b24:	e3500000 	cmp	r0, #0
   31b28:	0affff90 	beq	31970 <BusAccess::busActionHandleActive()+0x14>
   31b2c:	e3a02000 	mov	r2, #0
   31b30:	e5d411d8 	ldrb	r1, [r4, #472]	; 0x1d8
   31b34:	e1a00004 	mov	r0, r4
   31b38:	eb0007d3 	bl	33a8c <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   31b3c:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   31b40:	e3510000 	cmp	r1, #0
   31b44:	c3a02000 	movgt	r2, #0
   31b48:	c3a0c02c 	movgt	ip, #44	; 0x2c
   31b4c:	c1a00002 	movgt	r0, r2
   31b50:	da000013 	ble	31ba4 <BusAccess::busActionHandleActive()+0x248>
   31b54:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   31b58:	e6ef3073 	uxtb	r3, r3
   31b5c:	e3530004 	cmp	r3, #4
   31b60:	0023429c 	mlaeq	r3, ip, r2, r4
   31b64:	05c3002c 	strbeq	r0, [r3, #44]	; 0x2c
   31b68:	0a00000a 	beq	31b98 <BusAccess::busActionHandleActive()+0x23c>
   31b6c:	e3530001 	cmp	r3, #1
   31b70:	0023429c 	mlaeq	r3, ip, r2, r4
   31b74:	05c30016 	strbeq	r0, [r3, #22]
   31b78:	0a000006 	beq	31b98 <BusAccess::busActionHandleActive()+0x23c>
   31b7c:	e3530002 	cmp	r3, #2
   31b80:	0023429c 	mlaeq	r3, ip, r2, r4
   31b84:	05c3001c 	strbeq	r0, [r3, #28]
   31b88:	0a000002 	beq	31b98 <BusAccess::busActionHandleActive()+0x23c>
   31b8c:	e3530003 	cmp	r3, #3
   31b90:	0023429c 	mlaeq	r3, ip, r2, r4
   31b94:	05c30024 	strbeq	r0, [r3, #36]	; 0x24
   31b98:	e2822001 	add	r2, r2, #1
   31b9c:	e1520001 	cmp	r2, r1
   31ba0:	1affffeb 	bne	31b54 <BusAccess::busActionHandleActive()+0x1f8>
   31ba4:	e3a03000 	mov	r3, #0
   31ba8:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   31bac:	eaffff6f 	b	31970 <BusAccess::busActionHandleActive()+0x14>
   31bb0:	ebfff0dd 	bl	2df2c <micros>
   31bb4:	e59411e0 	ldr	r1, [r4, #480]	; 0x1e0
   31bb8:	e59421e4 	ldr	r2, [r4, #484]	; 0x1e4
   31bbc:	ebfff0f8 	bl	2dfa4 <isTimeout>
   31bc0:	e3500000 	cmp	r0, #0
   31bc4:	08bd8070 	popeq	{r4, r5, r6, pc}
   31bc8:	e3a0502c 	mov	r5, #44	; 0x2c
   31bcc:	e59431d4 	ldr	r3, [r4, #468]	; 0x1d4
   31bd0:	e3a01005 	mov	r1, #5
   31bd4:	e0234395 	mla	r3, r5, r3, r4
   31bd8:	e1a00004 	mov	r0, r4
   31bdc:	e5d3202d 	ldrb	r2, [r3, #45]	; 0x2d
   31be0:	ebffff2d 	bl	3189c <BusAccess::busActionCallback(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>
   31be4:	e3a02000 	mov	r2, #0
   31be8:	e1a01006 	mov	r1, r6
   31bec:	e1a00004 	mov	r0, r4
   31bf0:	eb0007a5 	bl	33a8c <BusAccess::setSignal(BR_BUS_ACTION, bool)>
   31bf4:	e59411bc 	ldr	r1, [r4, #444]	; 0x1bc
   31bf8:	e3510000 	cmp	r1, #0
   31bfc:	c3a02000 	movgt	r2, #0
   31c00:	c1a00005 	movgt	r0, r5
   31c04:	c1a0c002 	movgt	ip, r2
   31c08:	da000013 	ble	31c5c <BusAccess::busActionHandleActive()+0x300>
   31c0c:	e5d431d8 	ldrb	r3, [r4, #472]	; 0x1d8
   31c10:	e6ef3073 	uxtb	r3, r3
   31c14:	e3530004 	cmp	r3, #4
   31c18:	00234290 	mlaeq	r3, r0, r2, r4
   31c1c:	05c3c02c 	strbeq	ip, [r3, #44]	; 0x2c
   31c20:	0a00000a 	beq	31c50 <BusAccess::busActionHandleActive()+0x2f4>
   31c24:	e3530001 	cmp	r3, #1
   31c28:	00234290 	mlaeq	r3, r0, r2, r4
   31c2c:	05c3c016 	strbeq	ip, [r3, #22]
   31c30:	0a000006 	beq	31c50 <BusAccess::busActionHandleActive()+0x2f4>
   31c34:	e3530002 	cmp	r3, #2
   31c38:	00234290 	mlaeq	r3, r0, r2, r4
   31c3c:	05c3c01c 	strbeq	ip, [r3, #28]
   31c40:	0a000002 	beq	31c50 <BusAccess::busActionHandleActive()+0x2f4>
   31c44:	e3530003 	cmp	r3, #3
   31c48:	00234290 	mlaeq	r3, r0, r2, r4
   31c4c:	05c3c024 	strbeq	ip, [r3, #36]	; 0x24
   31c50:	e2822001 	add	r2, r2, #1
   31c54:	e1520001 	cmp	r2, r1
   31c58:	1affffeb 	bne	31c0c <BusAccess::busActionHandleActive()+0x2b0>
   31c5c:	e3a03000 	mov	r3, #0
   31c60:	e5c431f0 	strb	r3, [r4, #496]	; 0x1f0
   31c64:	e8bd8070 	pop	{r4, r5, r6, pc}
   31c68:	20200000 	.word	0x20200000
   31c6c:	000186a0 	.word	0x000186a0

00031c70 <BusAccess::stepTimerISR(void*)>:
   31c70:	e12fff1e 	bx	lr

00031c74 <BusAccess::waitHandleReadRelease()>:
   31c74:	e5d031c4 	ldrb	r3, [r0, #452]	; 0x1c4
   31c78:	e3530000 	cmp	r3, #0
   31c7c:	012fff1e 	bxeq	lr
   31c80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31c84:	e1a08000 	mov	r8, r0
   31c88:	ebfff0a7 	bl	2df2c <micros>
   31c8c:	e3a05064 	mov	r5, #100	; 0x64
   31c90:	e1a06000 	mov	r6, r0
   31c94:	e59f4064 	ldr	r4, [pc, #100]	; 31d00 <BusAccess::waitHandleReadRelease()+0x8c>
   31c98:	ea000003 	b	31cac <BusAccess::waitHandleReadRelease()+0x38>
   31c9c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   31ca0:	e2033003 	and	r3, r3, #3
   31ca4:	e3530003 	cmp	r3, #3
   31ca8:	0a000008 	beq	31cd0 <BusAccess::waitHandleReadRelease()+0x5c>
   31cac:	ebfff09e 	bl	2df2c <micros>
   31cb0:	e1a02005 	mov	r2, r5
   31cb4:	e1a01006 	mov	r1, r6
   31cb8:	ebfff0b9 	bl	2dfa4 <isTimeout>
   31cbc:	e2507000 	subs	r7, r0, #0
   31cc0:	0afffff5 	beq	31c9c <BusAccess::waitHandleReadRelease()+0x28>
   31cc4:	e3a03000 	mov	r3, #0
   31cc8:	e5c831c4 	strb	r3, [r8, #452]	; 0x1c4
   31ccc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31cd0:	e3a02040 	mov	r2, #64	; 0x40
   31cd4:	e5943008 	ldr	r3, [r4, #8]
   31cd8:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   31cdc:	e5843008 	str	r3, [r4, #8]
   31ce0:	e584201c 	str	r2, [r4, #28]
   31ce4:	e5d831c5 	ldrb	r3, [r8, #453]	; 0x1c5
   31ce8:	e3530000 	cmp	r3, #0
   31cec:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   31cf0:	e1a00008 	mov	r0, r8
   31cf4:	eb0007b3 	bl	33bc8 <BusAccess::busAccessCallbackPageIn()>
   31cf8:	e5c871c5 	strb	r7, [r8, #453]	; 0x1c5
   31cfc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31d00:	20200000 	.word	0x20200000

00031d04 <BusAccess::waitRelease()>:
   31d04:	e92d4010 	push	{r4, lr}
   31d08:	e1a04000 	mov	r4, r0
   31d0c:	e3a01000 	mov	r1, #0
   31d10:	eb000614 	bl	33568 <BusAccess::waitResetFlipFlops(bool)>
   31d14:	e1a00004 	mov	r0, r4
   31d18:	e8bd4010 	pop	{r4, lr}
   31d1c:	eaffffd4 	b	31c74 <BusAccess::waitHandleReadRelease()>

00031d20 <BusAccess::waitHandleNew()>:
   31d20:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   31d24:	e1a06000 	mov	r6, r0
   31d28:	e24dd018 	sub	sp, sp, #24
   31d2c:	e3a04000 	mov	r4, #0
   31d30:	ebfff07d 	bl	2df2c <micros>
   31d34:	e5d631c5 	ldrb	r3, [r6, #453]	; 0x1c5
   31d38:	e1a08000 	mov	r8, r0
   31d3c:	e1530004 	cmp	r3, r4
   31d40:	e58d400c 	str	r4, [sp, #12]
   31d44:	e58d4010 	str	r4, [sp, #16]
   31d48:	1a000076 	bne	31f28 <BusAccess::waitHandleNew()+0x208>
   31d4c:	e1a00006 	mov	r0, r6
   31d50:	eb000194 	bl	323a8 <BusAccess::controlBusRead()>
   31d54:	e5d631d1 	ldrb	r3, [r6, #465]	; 0x1d1
   31d58:	e1a07000 	mov	r7, r0
   31d5c:	e3530000 	cmp	r3, #0
   31d60:	0a00006b 	beq	31f14 <BusAccess::waitHandleNew()+0x1f4>
   31d64:	e3a03000 	mov	r3, #0
   31d68:	e5c631d1 	strb	r3, [r6, #465]	; 0x1d1
   31d6c:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
   31d70:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
   31d74:	e58d3014 	str	r3, [sp, #20]
   31d78:	e3520000 	cmp	r2, #0
   31d7c:	c1a04006 	movgt	r4, r6
   31d80:	c3a05000 	movgt	r5, #0
   31d84:	c28d9014 	addgt	r9, sp, #20
   31d88:	da000010 	ble	31dd0 <BusAccess::waitHandleNew()+0xb0>
   31d8c:	e5d43004 	ldrb	r3, [r4, #4]
   31d90:	e2855001 	add	r5, r5, #1
   31d94:	e3530000 	cmp	r3, #0
   31d98:	0a000009 	beq	31dc4 <BusAccess::waitHandleNew()+0xa4>
   31d9c:	e594a008 	ldr	sl, [r4, #8]
   31da0:	e35a0000 	cmp	sl, #0
   31da4:	0a000006 	beq	31dc4 <BusAccess::waitHandleNew()+0xa4>
   31da8:	e59d2010 	ldr	r2, [sp, #16]
   31dac:	e5940010 	ldr	r0, [r4, #16]
   31db0:	e59d100c 	ldr	r1, [sp, #12]
   31db4:	e58d9000 	str	r9, [sp]
   31db8:	e1a03007 	mov	r3, r7
   31dbc:	e12fff3a 	blx	sl
   31dc0:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
   31dc4:	e1520005 	cmp	r2, r5
   31dc8:	e284402c 	add	r4, r4, #44	; 0x2c
   31dcc:	caffffee 	bgt	31d8c <BusAccess::waitHandleNew()+0x6c>
   31dd0:	e2174001 	ands	r4, r7, #1
   31dd4:	0a000001 	beq	31de0 <BusAccess::waitHandleNew()+0xc0>
   31dd8:	e317000c 	tst	r7, #12
   31ddc:	1a000026 	bne	31e7c <BusAccess::waitHandleNew()+0x15c>
   31de0:	e2073018 	and	r3, r7, #24
   31de4:	e3530018 	cmp	r3, #24
   31de8:	0a000023 	beq	31e7c <BusAccess::waitHandleNew()+0x15c>
   31dec:	ebfff04e 	bl	2df2c <micros>
   31df0:	e5963234 	ldr	r3, [r6, #564]	; 0x234
   31df4:	e3170004 	tst	r7, #4
   31df8:	e2833001 	add	r3, r3, #1
   31dfc:	e0408008 	sub	r8, r0, r8
   31e00:	e5863234 	str	r3, [r6, #564]	; 0x234
   31e04:	0a000033 	beq	31ed8 <BusAccess::waitHandleNew()+0x1b8>
   31e08:	e3540000 	cmp	r4, #0
   31e0c:	0a00003b 	beq	31f00 <BusAccess::waitHandleNew()+0x1e0>
   31e10:	e5963254 	ldr	r3, [r6, #596]	; 0x254
   31e14:	e2833001 	add	r3, r3, #1
   31e18:	e5863254 	str	r3, [r6, #596]	; 0x254
   31e1c:	e59f319c 	ldr	r3, [pc, #412]	; 31fc0 <BusAccess::waitHandleNew()+0x2a0>
   31e20:	e5962238 	ldr	r2, [r6, #568]	; 0x238
   31e24:	e1520003 	cmp	r2, r3
   31e28:	83a03000 	movhi	r3, #0
   31e2c:	85863238 	strhi	r3, [r6, #568]	; 0x238
   31e30:	8586323c 	strhi	r3, [r6, #572]	; 0x23c
   31e34:	e59f3188 	ldr	r3, [pc, #392]	; 31fc4 <BusAccess::waitHandleNew()+0x2a4>
   31e38:	e1580003 	cmp	r8, r3
   31e3c:	8a000009 	bhi	31e68 <BusAccess::waitHandleNew()+0x148>
   31e40:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   31e44:	e5963238 	ldr	r3, [r6, #568]	; 0x238
   31e48:	e596123c 	ldr	r1, [r6, #572]	; 0x23c
   31e4c:	e0883003 	add	r3, r8, r3
   31e50:	e2811001 	add	r1, r1, #1
   31e54:	e5863238 	str	r3, [r6, #568]	; 0x238
   31e58:	e0000390 	mul	r0, r0, r3
   31e5c:	e586123c 	str	r1, [r6, #572]	; 0x23c
   31e60:	eb002f89 	bl	3dc8c <__aeabi_uidiv>
   31e64:	e5860240 	str	r0, [r6, #576]	; 0x240
   31e68:	e5963244 	ldr	r3, [r6, #580]	; 0x244
   31e6c:	e1580003 	cmp	r8, r3
   31e70:	85868244 	strhi	r8, [r6, #580]	; 0x244
   31e74:	e28dd018 	add	sp, sp, #24
   31e78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   31e7c:	e59d3014 	ldr	r3, [sp, #20]
   31e80:	e3530000 	cmp	r3, #0
   31e84:	baffffd8 	blt	31dec <BusAccess::waitHandleNew()+0xcc>
   31e88:	e5d621d1 	ldrb	r2, [r6, #465]	; 0x1d1
   31e8c:	e3520000 	cmp	r2, #0
   31e90:	1a00002c 	bne	31f48 <BusAccess::waitHandleNew()+0x228>
   31e94:	e3a0c040 	mov	ip, #64	; 0x40
   31e98:	e1a03a03 	lsl	r3, r3, #20
   31e9c:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
   31ea0:	e1e01003 	mvn	r1, r3
   31ea4:	e3a0e001 	mov	lr, #1
   31ea8:	e59f2118 	ldr	r2, [pc, #280]	; 31fc8 <BusAccess::waitHandleNew()+0x2a8>
   31eac:	e59f0118 	ldr	r0, [pc, #280]	; 31fcc <BusAccess::waitHandleNew()+0x2ac>
   31eb0:	e582c028 	str	ip, [r2, #40]	; 0x28
   31eb4:	e592c008 	ldr	ip, [r2, #8]
   31eb8:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   31ebc:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   31ec0:	e18c0000 	orr	r0, ip, r0
   31ec4:	e5820008 	str	r0, [r2, #8]
   31ec8:	e582301c 	str	r3, [r2, #28]
   31ecc:	e5821028 	str	r1, [r2, #40]	; 0x28
   31ed0:	e5c6e1c4 	strb	lr, [r6, #452]	; 0x1c4
   31ed4:	eaffffc4 	b	31dec <BusAccess::waitHandleNew()+0xcc>
   31ed8:	e3170008 	tst	r7, #8
   31edc:	0affffce 	beq	31e1c <BusAccess::waitHandleNew()+0xfc>
   31ee0:	e3540000 	cmp	r4, #0
   31ee4:	1a000013 	bne	31f38 <BusAccess::waitHandleNew()+0x218>
   31ee8:	e3170002 	tst	r7, #2
   31eec:	0a000024 	beq	31f84 <BusAccess::waitHandleNew()+0x264>
   31ef0:	e5963260 	ldr	r3, [r6, #608]	; 0x260
   31ef4:	e2833001 	add	r3, r3, #1
   31ef8:	e5863260 	str	r3, [r6, #608]	; 0x260
   31efc:	eaffffc6 	b	31e1c <BusAccess::waitHandleNew()+0xfc>
   31f00:	e3170002 	tst	r7, #2
   31f04:	15963258 	ldrne	r3, [r6, #600]	; 0x258
   31f08:	12833001 	addne	r3, r3, #1
   31f0c:	15863258 	strne	r3, [r6, #600]	; 0x258
   31f10:	eaffffc1 	b	31e1c <BusAccess::waitHandleNew()+0xfc>
   31f14:	e28d2010 	add	r2, sp, #16
   31f18:	e28d100c 	add	r1, sp, #12
   31f1c:	e1a00006 	mov	r0, r6
   31f20:	eb00016d 	bl	324dc <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>
   31f24:	eaffff90 	b	31d6c <BusAccess::waitHandleNew()+0x4c>
   31f28:	e1a00006 	mov	r0, r6
   31f2c:	eb000725 	bl	33bc8 <BusAccess::busAccessCallbackPageIn()>
   31f30:	e5c641c5 	strb	r4, [r6, #453]	; 0x1c5
   31f34:	eaffff84 	b	31d4c <BusAccess::waitHandleNew()+0x2c>
   31f38:	e596325c 	ldr	r3, [r6, #604]	; 0x25c
   31f3c:	e2833001 	add	r3, r3, #1
   31f40:	e586325c 	str	r3, [r6, #604]	; 0x25c
   31f44:	eaffffb4 	b	31e1c <BusAccess::waitHandleNew()+0xfc>
   31f48:	e5963000 	ldr	r3, [r6]
   31f4c:	e3530011 	cmp	r3, #17
   31f50:	0a000010 	beq	31f98 <BusAccess::waitHandleNew()+0x278>
   31f54:	e3a03c02 	mov	r3, #512	; 0x200
   31f58:	e3a02c0e 	mov	r2, #3584	; 0xe00
   31f5c:	e3a09801 	mov	r9, #65536	; 0x10000
   31f60:	e59f5060 	ldr	r5, [pc, #96]	; 31fc8 <BusAccess::waitHandleNew()+0x2a8>
   31f64:	e3a0000a 	mov	r0, #10
   31f68:	e5852028 	str	r2, [r5, #40]	; 0x28
   31f6c:	e585301c 	str	r3, [r5, #28]
   31f70:	e5859028 	str	r9, [r5, #40]	; 0x28
   31f74:	eb0031fe 	bl	3e774 <lowlev_cycleDelay>
   31f78:	e59d3014 	ldr	r3, [sp, #20]
   31f7c:	e585901c 	str	r9, [r5, #28]
   31f80:	eaffffc3 	b	31e94 <BusAccess::waitHandleNew()+0x174>
   31f84:	e3170010 	tst	r7, #16
   31f88:	15963264 	ldrne	r3, [r6, #612]	; 0x264
   31f8c:	12833001 	addne	r3, r3, #1
   31f90:	15863264 	strne	r3, [r6, #612]	; 0x264
   31f94:	eaffffa0 	b	31e1c <BusAccess::waitHandleNew()+0xfc>
   31f98:	e3a03c02 	mov	r3, #512	; 0x200
   31f9c:	e3a09c0e 	mov	r9, #3584	; 0xe00
   31fa0:	e59f5020 	ldr	r5, [pc, #32]	; 31fc8 <BusAccess::waitHandleNew()+0x2a8>
   31fa4:	e3a0000a 	mov	r0, #10
   31fa8:	e5859028 	str	r9, [r5, #40]	; 0x28
   31fac:	e585301c 	str	r3, [r5, #28]
   31fb0:	eb0031ef 	bl	3e774 <lowlev_cycleDelay>
   31fb4:	e5859028 	str	r9, [r5, #40]	; 0x28
   31fb8:	e59d3014 	ldr	r3, [sp, #20]
   31fbc:	eaffffb4 	b	31e94 <BusAccess::waitHandleNew()+0x174>
   31fc0:	3b9aca00 	.word	0x3b9aca00
   31fc4:	000f423f 	.word	0x000f423f
   31fc8:	20200000 	.word	0x20200000
   31fcc:	00249249 	.word	0x00249249

00031fd0 <BusAccess::serviceWaitActivity()>:
   31fd0:	e5d031f0 	ldrb	r3, [r0, #496]	; 0x1f0
   31fd4:	e92d4010 	push	{r4, lr}
   31fd8:	e3530000 	cmp	r3, #0
   31fdc:	e1a04000 	mov	r4, r0
   31fe0:	0a00002d 	beq	3209c <BusAccess::serviceWaitActivity()+0xcc>
   31fe4:	e1a00004 	mov	r0, r4
   31fe8:	ebfffe5b 	bl	3195c <BusAccess::busActionHandleActive()>
   31fec:	e5d431c3 	ldrb	r3, [r4, #451]	; 0x1c3
   31ff0:	e3530000 	cmp	r3, #0
   31ff4:	1a00000a 	bne	32024 <BusAccess::serviceWaitActivity()+0x54>
   31ff8:	e59f30d8 	ldr	r3, [pc, #216]	; 320d8 <BusAccess::serviceWaitActivity()+0x108>
   31ffc:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   32000:	e2033024 	and	r3, r3, #36	; 0x24
   32004:	e3530004 	cmp	r3, #4
   32008:	0a000025 	beq	320a4 <BusAccess::serviceWaitActivity()+0xd4>
   3200c:	e5d431c1 	ldrb	r3, [r4, #449]	; 0x1c1
   32010:	e3530000 	cmp	r3, #0
   32014:	1a000002 	bne	32024 <BusAccess::serviceWaitActivity()+0x54>
   32018:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   3201c:	e3530001 	cmp	r3, #1
   32020:	0a000029 	beq	320cc <BusAccess::serviceWaitActivity()+0xfc>
   32024:	e5d431c3 	ldrb	r3, [r4, #451]	; 0x1c3
   32028:	e3530000 	cmp	r3, #0
   3202c:	08bd8010 	popeq	{r4, pc}
   32030:	e59f30a0 	ldr	r3, [pc, #160]	; 320d8 <BusAccess::serviceWaitActivity()+0x108>
   32034:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   32038:	e3130001 	tst	r3, #1
   3203c:	0a00000e 	beq	3207c <BusAccess::serviceWaitActivity()+0xac>
   32040:	ebffefb9 	bl	2df2c <micros>
   32044:	e59411cc 	ldr	r1, [r4, #460]	; 0x1cc
   32048:	e59421c8 	ldr	r2, [r4, #456]	; 0x1c8
   3204c:	ebffefd4 	bl	2dfa4 <isTimeout>
   32050:	e3500000 	cmp	r0, #0
   32054:	08bd8010 	popeq	{r4, pc}
   32058:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   3205c:	e3530001 	cmp	r3, #1
   32060:	0a000016 	beq	320c0 <BusAccess::serviceWaitActivity()+0xf0>
   32064:	e1a00004 	mov	r0, r4
   32068:	e3a01000 	mov	r1, #0
   3206c:	eb00053d 	bl	33568 <BusAccess::waitResetFlipFlops(bool)>
   32070:	e1a00004 	mov	r0, r4
   32074:	e8bd4010 	pop	{r4, lr}
   32078:	eafffefd 	b	31c74 <BusAccess::waitHandleReadRelease()>
   3207c:	e5d431d0 	ldrb	r3, [r4, #464]	; 0x1d0
   32080:	e3530000 	cmp	r3, #0
   32084:	0affffed 	beq	32040 <BusAccess::serviceWaitActivity()+0x70>
   32088:	ebffefa7 	bl	2df2c <micros>
   3208c:	e58401dc 	str	r0, [r4, #476]	; 0x1dc
   32090:	ebffefa5 	bl	2df2c <micros>
   32094:	e58401e0 	str	r0, [r4, #480]	; 0x1e0
   32098:	e8bd8010 	pop	{r4, pc}
   3209c:	ebfffc2c 	bl	31154 <BusAccess::busActionCheck() [clone .part.6]>
   320a0:	eaffffcf 	b	31fe4 <BusAccess::serviceWaitActivity()+0x14>
   320a4:	ebffefa0 	bl	2df2c <micros>
   320a8:	e3a03001 	mov	r3, #1
   320ac:	e58401cc 	str	r0, [r4, #460]	; 0x1cc
   320b0:	e1a00004 	mov	r0, r4
   320b4:	e5c431c3 	strb	r3, [r4, #451]	; 0x1c3
   320b8:	ebffff18 	bl	31d20 <BusAccess::waitHandleNew()>
   320bc:	eaffffd8 	b	32024 <BusAccess::serviceWaitActivity()+0x54>
   320c0:	e1a00004 	mov	r0, r4
   320c4:	ebfffbe4 	bl	3105c <BusAccess::busActionHandleStart() [clone .part.7]>
   320c8:	eaffffe5 	b	32064 <BusAccess::serviceWaitActivity()+0x94>
   320cc:	e1a00004 	mov	r0, r4
   320d0:	ebfffbe1 	bl	3105c <BusAccess::busActionHandleStart() [clone .part.7]>
   320d4:	eaffffd2 	b	32024 <BusAccess::serviceWaitActivity()+0x54>
   320d8:	20200000 	.word	0x20200000

000320dc <BusAccess::service()>:
   320dc:	e5d031c0 	ldrb	r3, [r0, #448]	; 0x1c0
   320e0:	e3530000 	cmp	r3, #0
   320e4:	012fff1e 	bxeq	lr
   320e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   320ec:	e1a04000 	mov	r4, r0
   320f0:	ebffef8d 	bl	2df2c <micros>
   320f4:	e3a0500a 	mov	r5, #10
   320f8:	e1a07000 	mov	r7, r0
   320fc:	e59f6048 	ldr	r6, [pc, #72]	; 3214c <BusAccess::service()+0x70>
   32100:	e1a00004 	mov	r0, r4
   32104:	ebffffb1 	bl	31fd0 <BusAccess::serviceWaitActivity()>
   32108:	e5d431f0 	ldrb	r3, [r4, #496]	; 0x1f0
   3210c:	e3530002 	cmp	r3, #2
   32110:	0a000002 	beq	32120 <BusAccess::service()+0x44>
   32114:	e5d431c3 	ldrb	r3, [r4, #451]	; 0x1c3
   32118:	e3530000 	cmp	r3, #0
   3211c:	0a000009 	beq	32148 <BusAccess::service()+0x6c>
   32120:	ebffef81 	bl	2df2c <micros>
   32124:	e1a02006 	mov	r2, r6
   32128:	e1a01007 	mov	r1, r7
   3212c:	ebffef9c 	bl	2dfa4 <isTimeout>
   32130:	e3500000 	cmp	r0, #0
   32134:	1a000002 	bne	32144 <BusAccess::service()+0x68>
   32138:	e2555001 	subs	r5, r5, #1
   3213c:	1affffef 	bne	32100 <BusAccess::service()+0x24>
   32140:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   32144:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   32148:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3214c:	00002710 	.word	0x00002710

00032150 <BusAccessStatusInfo::getJson()>:
   32150:	e92d4070 	push	{r4, r5, r6, lr}
   32154:	e1a04000 	mov	r4, r0
   32158:	e5902048 	ldr	r2, [r0, #72]	; 0x48
   3215c:	e24ddf9e 	sub	sp, sp, #632	; 0x278
   32160:	e5903000 	ldr	r3, [r0]
   32164:	e280003c 	add	r0, r0, #60	; 0x3c
   32168:	e8905001 	ldm	r0, {r0, ip, lr}
   3216c:	e5941010 	ldr	r1, [r4, #16]
   32170:	e58d2014 	str	r2, [sp, #20]
   32174:	e594200c 	ldr	r2, [r4, #12]
   32178:	e59f5088 	ldr	r5, [pc, #136]	; 32208 <BusAccessStatusInfo::getJson()+0xb8>
   3217c:	e58de010 	str	lr, [sp, #16]
   32180:	e58dc00c 	str	ip, [sp, #12]
   32184:	e58d0008 	str	r0, [sp, #8]
   32188:	e58d1004 	str	r1, [sp, #4]
   3218c:	e58d2000 	str	r2, [sp]
   32190:	e1a00005 	mov	r0, r5
   32194:	e59f2070 	ldr	r2, [pc, #112]	; 3220c <BusAccessStatusInfo::getJson()+0xbc>
   32198:	e3a01f96 	mov	r1, #600	; 0x258
   3219c:	ebfff014 	bl	2e1f4 <snprintf>
   321a0:	e594201c 	ldr	r2, [r4, #28]
   321a4:	e5943020 	ldr	r3, [r4, #32]
   321a8:	e594e014 	ldr	lr, [r4, #20]
   321ac:	e594c030 	ldr	ip, [r4, #48]	; 0x30
   321b0:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
   321b4:	e5946018 	ldr	r6, [r4, #24]
   321b8:	e58d2018 	str	r2, [sp, #24]
   321bc:	e5941028 	ldr	r1, [r4, #40]	; 0x28
   321c0:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   321c4:	e58de010 	str	lr, [sp, #16]
   321c8:	e58dc00c 	str	ip, [sp, #12]
   321cc:	e58d0008 	str	r0, [sp, #8]
   321d0:	e58d1004 	str	r1, [sp, #4]
   321d4:	e58d2000 	str	r2, [sp]
   321d8:	e58d6014 	str	r6, [sp, #20]
   321dc:	e28d0020 	add	r0, sp, #32
   321e0:	e59f2028 	ldr	r2, [pc, #40]	; 32210 <BusAccessStatusInfo::getJson()+0xc0>
   321e4:	e3a01f96 	mov	r1, #600	; 0x258
   321e8:	ebfff001 	bl	2e1f4 <snprintf>
   321ec:	e28d1020 	add	r1, sp, #32
   321f0:	e1a00005 	mov	r0, r5
   321f4:	e3a02f96 	mov	r2, #600	; 0x258
   321f8:	ebffefa2 	bl	2e088 <strlcat>
   321fc:	e1a00005 	mov	r0, r5
   32200:	e28ddf9e 	add	sp, sp, #632	; 0x278
   32204:	e8bd8070 	pop	{r4, r5, r6, pc}
   32208:	0004e1e0 	.word	0x0004e1e0
   3220c:	0004673c 	.word	0x0004673c
   32210:	000467a8 	.word	0x000467a8

00032214 <BusAccess::busSocketIsEnabled(int)>:
   32214:	e3510000 	cmp	r1, #0
   32218:	ba000006 	blt	32238 <BusAccess::busSocketIsEnabled(int)+0x24>
   3221c:	e59031bc 	ldr	r3, [r0, #444]	; 0x1bc
   32220:	e1510003 	cmp	r1, r3
   32224:	aa000003 	bge	32238 <BusAccess::busSocketIsEnabled(int)+0x24>
   32228:	e3a0302c 	mov	r3, #44	; 0x2c
   3222c:	e0210193 	mla	r1, r3, r1, r0
   32230:	e5d10004 	ldrb	r0, [r1, #4]
   32234:	e12fff1e 	bx	lr
   32238:	e3a00000 	mov	r0, #0
   3223c:	e12fff1e 	bx	lr

00032240 <BusAccess::getStatus(BusAccessStatusInfo&)>:
   32240:	e1a03001 	mov	r3, r1
   32244:	e92d4010 	push	{r4, lr}
   32248:	e2801f8d 	add	r1, r0, #564	; 0x234
   3224c:	e3a0204c 	mov	r2, #76	; 0x4c
   32250:	e1a00003 	mov	r0, r3
   32254:	ebffe1ad 	bl	2a910 <memcpy>
   32258:	e8bd8010 	pop	{r4, pc}

0003225c <BusAccess::clearStatus()>:
   3225c:	e3a03000 	mov	r3, #0
   32260:	e5803234 	str	r3, [r0, #564]	; 0x234
   32264:	e5803238 	str	r3, [r0, #568]	; 0x238
   32268:	e580323c 	str	r3, [r0, #572]	; 0x23c
   3226c:	e5803240 	str	r3, [r0, #576]	; 0x240
   32270:	e5803244 	str	r3, [r0, #580]	; 0x244
   32274:	e5803248 	str	r3, [r0, #584]	; 0x248
   32278:	e580324c 	str	r3, [r0, #588]	; 0x24c
   3227c:	e5803250 	str	r3, [r0, #592]	; 0x250
   32280:	e5803268 	str	r3, [r0, #616]	; 0x268
   32284:	e580326c 	str	r3, [r0, #620]	; 0x26c
   32288:	e5803270 	str	r3, [r0, #624]	; 0x270
   3228c:	e5803274 	str	r3, [r0, #628]	; 0x274
   32290:	e5803278 	str	r3, [r0, #632]	; 0x278
   32294:	e580327c 	str	r3, [r0, #636]	; 0x27c
   32298:	e5803254 	str	r3, [r0, #596]	; 0x254
   3229c:	e5803258 	str	r3, [r0, #600]	; 0x258
   322a0:	e580325c 	str	r3, [r0, #604]	; 0x25c
   322a4:	e5803260 	str	r3, [r0, #608]	; 0x260
   322a8:	e5803264 	str	r3, [r0, #612]	; 0x264
   322ac:	e12fff1e 	bx	lr

000322b0 <BusAccess::isUnderControl()>:
   322b0:	e5d001f1 	ldrb	r0, [r0, #497]	; 0x1f1
   322b4:	e12fff1e 	bx	lr

000322b8 <BusAccess::controlRequest()>:
   322b8:	e3a0c040 	mov	ip, #64	; 0x40
   322bc:	e59f3018 	ldr	r3, [pc, #24]	; 322dc <BusAccess::controlRequest()+0x24>
   322c0:	e3a01000 	mov	r1, #0
   322c4:	e5932008 	ldr	r2, [r3, #8]
   322c8:	e3a00013 	mov	r0, #19
   322cc:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   322d0:	e5832008 	str	r2, [r3, #8]
   322d4:	e583c01c 	str	ip, [r3, #28]
   322d8:	ea0030f8 	b	3e6c0 <digitalWrite>
   322dc:	20200000 	.word	0x20200000

000322e0 <BusAccess::waitForBusAck(bool)>:
   322e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   322e4:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   322e8:	e1a04001 	mov	r4, r1
   322ec:	e59f10ac 	ldr	r1, [pc, #172]	; 323a0 <BusAccess::waitForBusAck(bool)+0xc0>
   322f0:	ea000001 	b	322fc <BusAccess::waitForBusAck(bool)+0x1c>
   322f4:	e2522001 	subs	r2, r2, #1
   322f8:	0a000005 	beq	32314 <BusAccess::waitForBusAck(bool)+0x34>
   322fc:	e5913034 	ldr	r3, [r1, #52]	; 0x34
   32300:	e1a03123 	lsr	r3, r3, #2
   32304:	e2233001 	eor	r3, r3, #1
   32308:	e2033001 	and	r3, r3, #1
   3230c:	e1540003 	cmp	r4, r3
   32310:	1afffff7 	bne	322f4 <BusAccess::waitForBusAck(bool)+0x14>
   32314:	e59f5084 	ldr	r5, [pc, #132]	; 323a0 <BusAccess::waitForBusAck(bool)+0xc0>
   32318:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   3231c:	e1a03123 	lsr	r3, r3, #2
   32320:	e2233001 	eor	r3, r3, #1
   32324:	e2033001 	and	r3, r3, #1
   32328:	e1540003 	cmp	r4, r3
   3232c:	0a000012 	beq	3237c <BusAccess::waitForBusAck(bool)+0x9c>
   32330:	e5901224 	ldr	r1, [r0, #548]	; 0x224
   32334:	e59f0068 	ldr	r0, [pc, #104]	; 323a4 <BusAccess::waitForBusAck(bool)+0xc4>
   32338:	eb002e53 	bl	3dc8c <__aeabi_uidiv>
   3233c:	e3500000 	cmp	r0, #0
   32340:	11a07000 	movne	r7, r0
   32344:	03a07001 	moveq	r7, #1
   32348:	e3a08000 	mov	r8, #0
   3234c:	e3a06001 	mov	r6, #1
   32350:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   32354:	e2888001 	add	r8, r8, #1
   32358:	e1a03123 	lsr	r3, r3, #2
   3235c:	e2233001 	eor	r3, r3, #1
   32360:	e2033001 	and	r3, r3, #1
   32364:	e1540003 	cmp	r4, r3
   32368:	0a000003 	beq	3237c <BusAccess::waitForBusAck(bool)+0x9c>
   3236c:	e1a00006 	mov	r0, r6
   32370:	ebffeef5 	bl	2df4c <microsDelay>
   32374:	e1580007 	cmp	r8, r7
   32378:	1afffff4 	bne	32350 <BusAccess::waitForBusAck(bool)+0x70>
   3237c:	e59f301c 	ldr	r3, [pc, #28]	; 323a0 <BusAccess::waitForBusAck(bool)+0xc0>
   32380:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   32384:	e1a00120 	lsr	r0, r0, #2
   32388:	e2200001 	eor	r0, r0, #1
   3238c:	e2000001 	and	r0, r0, #1
   32390:	e0400004 	sub	r0, r0, r4
   32394:	e16f0f10 	clz	r0, r0
   32398:	e1a002a0 	lsr	r0, r0, #5
   3239c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   323a0:	20200000 	.word	0x20200000
   323a4:	3b9aca00 	.word	0x3b9aca00

000323a8 <BusAccess::controlBusRead()>:
   323a8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   323ac:	e1a05000 	mov	r5, r0
   323b0:	ebffeedd 	bl	2df2c <micros>
   323b4:	e595b000 	ldr	fp, [r5]
   323b8:	e59f4118 	ldr	r4, [pc, #280]	; 324d8 <BusAccess::controlBusRead()+0x130>
   323bc:	e35b0011 	cmp	fp, #17
   323c0:	e3a08000 	mov	r8, #0
   323c4:	e1a07000 	mov	r7, r0
   323c8:	e3a0600a 	mov	r6, #10
   323cc:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   323d0:	0a000031 	beq	3249c <BusAccess::controlBusRead()+0xf4>
   323d4:	e3130802 	tst	r3, #131072	; 0x20000
   323d8:	13a0a000 	movne	sl, #0
   323dc:	03a0a002 	moveq	sl, #2
   323e0:	e3130001 	tst	r3, #1
   323e4:	13a0e000 	movne	lr, #0
   323e8:	03a0e004 	moveq	lr, #4
   323ec:	e3130002 	tst	r3, #2
   323f0:	13a0c000 	movne	ip, #0
   323f4:	03a0c008 	moveq	ip, #8
   323f8:	e3130020 	tst	r3, #32
   323fc:	13a00000 	movne	r0, #0
   32400:	03a00020 	moveq	r0, #32
   32404:	e3130008 	tst	r3, #8
   32408:	13a01000 	movne	r1, #0
   3240c:	03a01010 	moveq	r1, #16
   32410:	e3130004 	tst	r3, #4
   32414:	13a09000 	movne	r9, #0
   32418:	03a09b01 	moveq	r9, #1024	; 0x400
   3241c:	e1a02923 	lsr	r2, r3, #18
   32420:	e2222001 	eor	r2, r2, #1
   32424:	e2022001 	and	r2, r2, #1
   32428:	e18a2002 	orr	r2, sl, r2
   3242c:	e18ee002 	orr	lr, lr, r2
   32430:	e18cc00e 	orr	ip, ip, lr
   32434:	e180000c 	orr	r0, r0, ip
   32438:	e1811000 	orr	r1, r1, r0
   3243c:	e35b0011 	cmp	fp, #17
   32440:	e2888001 	add	r8, r8, #1
   32444:	e1899001 	orr	r9, r9, r1
   32448:	0a00001c 	beq	324c0 <BusAccess::controlBusRead()+0x118>
   3244c:	e319000c 	tst	r9, #12
   32450:	e2093018 	and	r3, r9, #24
   32454:	0a000003 	beq	32468 <BusAccess::controlBusRead()+0xc0>
   32458:	e3190003 	tst	r9, #3
   3245c:	0a000001 	beq	32468 <BusAccess::controlBusRead()+0xc0>
   32460:	e1a00009 	mov	r0, r9
   32464:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32468:	e3530018 	cmp	r3, #24
   3246c:	0afffffb 	beq	32460 <BusAccess::controlBusRead()+0xb8>
   32470:	ebffeead 	bl	2df2c <micros>
   32474:	e1a02006 	mov	r2, r6
   32478:	e1a01007 	mov	r1, r7
   3247c:	ebffeec8 	bl	2dfa4 <isTimeout>
   32480:	e3500000 	cmp	r0, #0
   32484:	13580064 	cmpne	r8, #100	; 0x64
   32488:	cafffff4 	bgt	32460 <BusAccess::controlBusRead()+0xb8>
   3248c:	e595b000 	ldr	fp, [r5]
   32490:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   32494:	e35b0011 	cmp	fp, #17
   32498:	1affffcd 	bne	323d4 <BusAccess::controlBusRead()+0x2c>
   3249c:	e3a03040 	mov	r3, #64	; 0x40
   324a0:	e3a00064 	mov	r0, #100	; 0x64
   324a4:	e5843028 	str	r3, [r4, #40]	; 0x28
   324a8:	eb0030b1 	bl	3e774 <lowlev_cycleDelay>
   324ac:	e3a02040 	mov	r2, #64	; 0x40
   324b0:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   324b4:	e584201c 	str	r2, [r4, #28]
   324b8:	e595b000 	ldr	fp, [r5]
   324bc:	eaffffc4 	b	323d4 <BusAccess::controlBusRead()+0x2c>
   324c0:	e3130601 	tst	r3, #1048576	; 0x100000
   324c4:	13a03000 	movne	r3, #0
   324c8:	03a03010 	moveq	r3, #16
   324cc:	e3c99010 	bic	r9, r9, #16
   324d0:	e1839009 	orr	r9, r3, r9
   324d4:	eaffffdc 	b	3244c <BusAccess::controlBusRead()+0xa4>
   324d8:	20200000 	.word	0x20200000

000324dc <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>:
   324dc:	e5903000 	ldr	r3, [r0]
   324e0:	e92d4070 	push	{r4, r5, r6, lr}
   324e4:	e3530011 	cmp	r3, #17
   324e8:	e1a05002 	mov	r5, r2
   324ec:	03a02040 	moveq	r2, #64	; 0x40
   324f0:	059f315c 	ldreq	r3, [pc, #348]	; 32654 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   324f4:	e1a06001 	mov	r6, r1
   324f8:	05832028 	streq	r2, [r3, #40]	; 0x28
   324fc:	e59f3150 	ldr	r3, [pc, #336]	; 32654 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   32500:	e1a04000 	mov	r4, r0
   32504:	e5932008 	ldr	r2, [r3, #8]
   32508:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   3250c:	e5832008 	str	r2, [r3, #8]
   32510:	e5902000 	ldr	r2, [r0]
   32514:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32518:	e3520011 	cmp	r2, #17
   3251c:	03a02c0e 	moveq	r2, #3584	; 0xe00
   32520:	13a02801 	movne	r2, #65536	; 0x10000
   32524:	13a01c0e 	movne	r1, #3584	; 0xe00
   32528:	1583201c 	strne	r2, [r3, #28]
   3252c:	05832028 	streq	r2, [r3, #40]	; 0x28
   32530:	15831028 	strne	r1, [r3, #40]	; 0x28
   32534:	0583201c 	streq	r2, [r3, #28]
   32538:	1583101c 	strne	r1, [r3, #28]
   3253c:	15832028 	strne	r2, [r3, #40]	; 0x28
   32540:	eb00308b 	bl	3e774 <lowlev_cycleDelay>
   32544:	e59f2108 	ldr	r2, [pc, #264]	; 32654 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   32548:	e5941000 	ldr	r1, [r4]
   3254c:	e5923034 	ldr	r3, [r2, #52]	; 0x34
   32550:	e3510011 	cmp	r1, #17
   32554:	e1a03623 	lsr	r3, r3, #12
   32558:	e2033cff 	and	r3, r3, #65280	; 0xff00
   3255c:	e5863000 	str	r3, [r6]
   32560:	0a00002e 	beq	32620 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x144>
   32564:	e3a03801 	mov	r3, #65536	; 0x10000
   32568:	e3a00c0e 	mov	r0, #3584	; 0xe00
   3256c:	e3a01c06 	mov	r1, #1536	; 0x600
   32570:	e582301c 	str	r3, [r2, #28]
   32574:	e5820028 	str	r0, [r2, #40]	; 0x28
   32578:	e582101c 	str	r1, [r2, #28]
   3257c:	e5823028 	str	r3, [r2, #40]	; 0x28
   32580:	e3a00f7d 	mov	r0, #500	; 0x1f4
   32584:	eb00307a 	bl	3e774 <lowlev_cycleDelay>
   32588:	e59f10c4 	ldr	r1, [pc, #196]	; 32654 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   3258c:	e5963000 	ldr	r3, [r6]
   32590:	e5912034 	ldr	r2, [r1, #52]	; 0x34
   32594:	e5940000 	ldr	r0, [r4]
   32598:	e1a02202 	lsl	r2, r2, #4
   3259c:	e1833c22 	orr	r3, r3, r2, lsr #24
   325a0:	e3500011 	cmp	r0, #17
   325a4:	e5863000 	str	r3, [r6]
   325a8:	13a02801 	movne	r2, #65536	; 0x10000
   325ac:	03a03c0e 	moveq	r3, #3584	; 0xe00
   325b0:	13a03c0e 	movne	r3, #3584	; 0xe00
   325b4:	1581201c 	strne	r2, [r1, #28]
   325b8:	e3a00f7d 	mov	r0, #500	; 0x1f4
   325bc:	e5813028 	str	r3, [r1, #40]	; 0x28
   325c0:	eb00306b 	bl	3e774 <lowlev_cycleDelay>
   325c4:	e3a03040 	mov	r3, #64	; 0x40
   325c8:	e59f6084 	ldr	r6, [pc, #132]	; 32654 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   325cc:	e586301c 	str	r3, [r6, #28]
   325d0:	e5943000 	ldr	r3, [r4]
   325d4:	e3530011 	cmp	r3, #17
   325d8:	0a000015 	beq	32634 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x158>
   325dc:	e3a02c0e 	mov	r2, #3584	; 0xe00
   325e0:	e3a03c02 	mov	r3, #512	; 0x200
   325e4:	e3a04801 	mov	r4, #65536	; 0x10000
   325e8:	e5862028 	str	r2, [r6, #40]	; 0x28
   325ec:	e3a0000a 	mov	r0, #10
   325f0:	e586301c 	str	r3, [r6, #28]
   325f4:	e5864028 	str	r4, [r6, #40]	; 0x28
   325f8:	eb00305d 	bl	3e774 <lowlev_cycleDelay>
   325fc:	e586401c 	str	r4, [r6, #28]
   32600:	e3a00f7d 	mov	r0, #500	; 0x1f4
   32604:	eb00305a 	bl	3e774 <lowlev_cycleDelay>
   32608:	e59f3044 	ldr	r3, [pc, #68]	; 32654 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x178>
   3260c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   32610:	e1a03a23 	lsr	r3, r3, #20
   32614:	e6ef3073 	uxtb	r3, r3
   32618:	e5853000 	str	r3, [r5]
   3261c:	e8bd8070 	pop	{r4, r5, r6, pc}
   32620:	e3a01c0e 	mov	r1, #3584	; 0xe00
   32624:	e3a03c06 	mov	r3, #1536	; 0x600
   32628:	e5821028 	str	r1, [r2, #40]	; 0x28
   3262c:	e582301c 	str	r3, [r2, #28]
   32630:	eaffffd2 	b	32580 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0xa4>
   32634:	e3a04c0e 	mov	r4, #3584	; 0xe00
   32638:	e3a03c02 	mov	r3, #512	; 0x200
   3263c:	e5864028 	str	r4, [r6, #40]	; 0x28
   32640:	e3a0000a 	mov	r0, #10
   32644:	e586301c 	str	r3, [r6, #28]
   32648:	eb003049 	bl	3e774 <lowlev_cycleDelay>
   3264c:	e5864028 	str	r4, [r6, #40]	; 0x28
   32650:	eaffffea 	b	32600 <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)+0x124>
   32654:	20200000 	.word	0x20200000

00032658 <BusAccess::addrLowSet(unsigned long)>:
   32658:	e5903000 	ldr	r3, [r0]
   3265c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   32660:	e3530011 	cmp	r3, #17
   32664:	e1a05000 	mov	r5, r0
   32668:	e1a08001 	mov	r8, r1
   3266c:	0a00002f 	beq	32730 <BusAccess::addrLowSet(unsigned long)+0xd8>
   32670:	e3a03b02 	mov	r3, #2048	; 0x800
   32674:	e3a06801 	mov	r6, #65536	; 0x10000
   32678:	e3a07c0e 	mov	r7, #3584	; 0xe00
   3267c:	e59f40f0 	ldr	r4, [pc, #240]	; 32774 <BusAccess::addrLowSet(unsigned long)+0x11c>
   32680:	e3a00096 	mov	r0, #150	; 0x96
   32684:	e5847028 	str	r7, [r4, #40]	; 0x28
   32688:	e584301c 	str	r3, [r4, #28]
   3268c:	e5846028 	str	r6, [r4, #40]	; 0x28
   32690:	eb003037 	bl	3e774 <lowlev_cycleDelay>
   32694:	e584601c 	str	r6, [r4, #28]
   32698:	e5953000 	ldr	r3, [r5]
   3269c:	e3530011 	cmp	r3, #17
   326a0:	0a000012 	beq	326f0 <BusAccess::addrLowSet(unsigned long)+0x98>
   326a4:	e3a03000 	mov	r3, #0
   326a8:	e6ef8078 	uxtb	r8, r8
   326ac:	e5847028 	str	r7, [r4, #40]	; 0x28
   326b0:	e2888001 	add	r8, r8, #1
   326b4:	e584301c 	str	r3, [r4, #28]
   326b8:	e3a04000 	mov	r4, #0
   326bc:	e3a07801 	mov	r7, #65536	; 0x10000
   326c0:	e3a06096 	mov	r6, #150	; 0x96
   326c4:	e59f50a8 	ldr	r5, [pc, #168]	; 32774 <BusAccess::addrLowSet(unsigned long)+0x11c>
   326c8:	e1a00006 	mov	r0, r6
   326cc:	e5857028 	str	r7, [r5, #40]	; 0x28
   326d0:	eb003027 	bl	3e774 <lowlev_cycleDelay>
   326d4:	e2844001 	add	r4, r4, #1
   326d8:	e585701c 	str	r7, [r5, #28]
   326dc:	e1a00006 	mov	r0, r6
   326e0:	eb003023 	bl	3e774 <lowlev_cycleDelay>
   326e4:	e1540008 	cmp	r4, r8
   326e8:	1afffff6 	bne	326c8 <BusAccess::addrLowSet(unsigned long)+0x70>
   326ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   326f0:	e3a04000 	mov	r4, #0
   326f4:	e3a07801 	mov	r7, #65536	; 0x10000
   326f8:	e3a06096 	mov	r6, #150	; 0x96
   326fc:	e6ef8078 	uxtb	r8, r8
   32700:	e59f506c 	ldr	r5, [pc, #108]	; 32774 <BusAccess::addrLowSet(unsigned long)+0x11c>
   32704:	e2888001 	add	r8, r8, #1
   32708:	e1a00006 	mov	r0, r6
   3270c:	e585701c 	str	r7, [r5, #28]
   32710:	eb003017 	bl	3e774 <lowlev_cycleDelay>
   32714:	e2844001 	add	r4, r4, #1
   32718:	e5857028 	str	r7, [r5, #40]	; 0x28
   3271c:	e1a00006 	mov	r0, r6
   32720:	eb003013 	bl	3e774 <lowlev_cycleDelay>
   32724:	e1540008 	cmp	r4, r8
   32728:	1afffff6 	bne	32708 <BusAccess::addrLowSet(unsigned long)+0xb0>
   3272c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   32730:	e3a03b02 	mov	r3, #2048	; 0x800
   32734:	e3a06c0e 	mov	r6, #3584	; 0xe00
   32738:	e59f4034 	ldr	r4, [pc, #52]	; 32774 <BusAccess::addrLowSet(unsigned long)+0x11c>
   3273c:	e3a0000a 	mov	r0, #10
   32740:	e5846028 	str	r6, [r4, #40]	; 0x28
   32744:	e584301c 	str	r3, [r4, #28]
   32748:	eb003009 	bl	3e774 <lowlev_cycleDelay>
   3274c:	e5846028 	str	r6, [r4, #40]	; 0x28
   32750:	e5953000 	ldr	r3, [r5]
   32754:	e3530011 	cmp	r3, #17
   32758:	0affffe4 	beq	326f0 <BusAccess::addrLowSet(unsigned long)+0x98>
   3275c:	e3a03000 	mov	r3, #0
   32760:	e6ef8078 	uxtb	r8, r8
   32764:	e5846028 	str	r6, [r4, #40]	; 0x28
   32768:	e2888001 	add	r8, r8, #1
   3276c:	e584301c 	str	r3, [r4, #28]
   32770:	eaffffd0 	b	326b8 <BusAccess::addrLowSet(unsigned long)+0x60>
   32774:	20200000 	.word	0x20200000

00032778 <BusAccess::addrLowInc()>:
   32778:	e5903000 	ldr	r3, [r0]
   3277c:	e92d4070 	push	{r4, r5, r6, lr}
   32780:	e3530011 	cmp	r3, #17
   32784:	0a000008 	beq	327ac <BusAccess::addrLowInc()+0x34>
   32788:	e3a03c0e 	mov	r3, #3584	; 0xe00
   3278c:	e3a05801 	mov	r5, #65536	; 0x10000
   32790:	e59f4038 	ldr	r4, [pc, #56]	; 327d0 <BusAccess::addrLowInc()+0x58>
   32794:	e3a00096 	mov	r0, #150	; 0x96
   32798:	e5843028 	str	r3, [r4, #40]	; 0x28
   3279c:	e5845028 	str	r5, [r4, #40]	; 0x28
   327a0:	eb002ff3 	bl	3e774 <lowlev_cycleDelay>
   327a4:	e584501c 	str	r5, [r4, #28]
   327a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   327ac:	e3a05801 	mov	r5, #65536	; 0x10000
   327b0:	e59f4018 	ldr	r4, [pc, #24]	; 327d0 <BusAccess::addrLowInc()+0x58>
   327b4:	e3a00096 	mov	r0, #150	; 0x96
   327b8:	e584501c 	str	r5, [r4, #28]
   327bc:	eb002fec 	bl	3e774 <lowlev_cycleDelay>
   327c0:	e5845028 	str	r5, [r4, #40]	; 0x28
   327c4:	e3a00096 	mov	r0, #150	; 0x96
   327c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   327cc:	ea002fe8 	b	3e774 <lowlev_cycleDelay>
   327d0:	20200000 	.word	0x20200000

000327d4 <BusAccess::addrHighSet(unsigned long)>:
   327d4:	e5902000 	ldr	r2, [r0]
   327d8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   327dc:	e3520011 	cmp	r2, #17
   327e0:	e1a08000 	mov	r8, r0
   327e4:	e1a04001 	mov	r4, r1
   327e8:	0a00002a 	beq	32898 <BusAccess::addrHighSet(unsigned long)+0xc4>
   327ec:	e3a0b009 	mov	fp, #9
   327f0:	e59f5140 	ldr	r5, [pc, #320]	; 32938 <BusAccess::addrHighSet(unsigned long)+0x164>
   327f4:	e3a09801 	mov	r9, #65536	; 0x10000
   327f8:	e3a0ac0e 	mov	sl, #3584	; 0xe00
   327fc:	e3a070c8 	mov	r7, #200	; 0xc8
   32800:	e3a06080 	mov	r6, #128	; 0x80
   32804:	ea00000c 	b	3283c <BusAccess::addrHighSet(unsigned long)+0x68>
   32808:	e3520011 	cmp	r2, #17
   3280c:	1585901c 	strne	r9, [r5, #28]
   32810:	e585a028 	str	sl, [r5, #40]	; 0x28
   32814:	e1a00007 	mov	r0, r7
   32818:	eb002fd5 	bl	3e774 <lowlev_cycleDelay>
   3281c:	e585601c 	str	r6, [r5, #28]
   32820:	e1a00007 	mov	r0, r7
   32824:	eb002fd2 	bl	3e774 <lowlev_cycleDelay>
   32828:	e25bb001 	subs	fp, fp, #1
   3282c:	e1a04084 	lsl	r4, r4, #1
   32830:	e5856028 	str	r6, [r5, #40]	; 0x28
   32834:	0a00000c 	beq	3286c <BusAccess::addrHighSet(unsigned long)+0x98>
   32838:	e5982000 	ldr	r2, [r8]
   3283c:	e3140080 	tst	r4, #128	; 0x80
   32840:	1afffff0 	bne	32808 <BusAccess::addrHighSet(unsigned long)+0x34>
   32844:	e3520011 	cmp	r2, #17
   32848:	03a03b02 	moveq	r3, #2048	; 0x800
   3284c:	13a03b02 	movne	r3, #2048	; 0x800
   32850:	1585901c 	strne	r9, [r5, #28]
   32854:	0585a028 	streq	sl, [r5, #40]	; 0x28
   32858:	1585a028 	strne	sl, [r5, #40]	; 0x28
   3285c:	0585301c 	streq	r3, [r5, #28]
   32860:	1585301c 	strne	r3, [r5, #28]
   32864:	15859028 	strne	r9, [r5, #40]	; 0x28
   32868:	eaffffe9 	b	32814 <BusAccess::addrHighSet(unsigned long)+0x40>
   3286c:	e3a000c8 	mov	r0, #200	; 0xc8
   32870:	eb002fbf 	bl	3e774 <lowlev_cycleDelay>
   32874:	e5983000 	ldr	r3, [r8]
   32878:	e3530011 	cmp	r3, #17
   3287c:	0a000029 	beq	32928 <BusAccess::addrHighSet(unsigned long)+0x154>
   32880:	e3a01801 	mov	r1, #65536	; 0x10000
   32884:	e3a02c0e 	mov	r2, #3584	; 0xe00
   32888:	e59f30a8 	ldr	r3, [pc, #168]	; 32938 <BusAccess::addrHighSet(unsigned long)+0x164>
   3288c:	e583101c 	str	r1, [r3, #28]
   32890:	e5832028 	str	r2, [r3, #40]	; 0x28
   32894:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32898:	e3a0a009 	mov	sl, #9
   3289c:	e3a07801 	mov	r7, #65536	; 0x10000
   328a0:	e3a09c0e 	mov	r9, #3584	; 0xe00
   328a4:	e3a060c8 	mov	r6, #200	; 0xc8
   328a8:	e3a05080 	mov	r5, #128	; 0x80
   328ac:	e59fb084 	ldr	fp, [pc, #132]	; 32938 <BusAccess::addrHighSet(unsigned long)+0x164>
   328b0:	ea000012 	b	32900 <BusAccess::addrHighSet(unsigned long)+0x12c>
   328b4:	e3520011 	cmp	r2, #17
   328b8:	03a03b02 	moveq	r3, #2048	; 0x800
   328bc:	13a03b02 	movne	r3, #2048	; 0x800
   328c0:	158b701c 	strne	r7, [fp, #28]
   328c4:	058b9028 	streq	r9, [fp, #40]	; 0x28
   328c8:	158b9028 	strne	r9, [fp, #40]	; 0x28
   328cc:	058b301c 	streq	r3, [fp, #28]
   328d0:	158b301c 	strne	r3, [fp, #28]
   328d4:	158b7028 	strne	r7, [fp, #40]	; 0x28
   328d8:	e1a00006 	mov	r0, r6
   328dc:	eb002fa4 	bl	3e774 <lowlev_cycleDelay>
   328e0:	e58b501c 	str	r5, [fp, #28]
   328e4:	e1a00006 	mov	r0, r6
   328e8:	eb002fa1 	bl	3e774 <lowlev_cycleDelay>
   328ec:	e25aa001 	subs	sl, sl, #1
   328f0:	e1a04084 	lsl	r4, r4, #1
   328f4:	e58b5028 	str	r5, [fp, #40]	; 0x28
   328f8:	0affffdb 	beq	3286c <BusAccess::addrHighSet(unsigned long)+0x98>
   328fc:	e5982000 	ldr	r2, [r8]
   32900:	e2141080 	ands	r1, r4, #128	; 0x80
   32904:	1affffea 	bne	328b4 <BusAccess::addrHighSet(unsigned long)+0xe0>
   32908:	e3520011 	cmp	r2, #17
   3290c:	158b701c 	strne	r7, [fp, #28]
   32910:	058b9028 	streq	r9, [fp, #40]	; 0x28
   32914:	158b9028 	strne	r9, [fp, #40]	; 0x28
   32918:	058b101c 	streq	r1, [fp, #28]
   3291c:	158b101c 	strne	r1, [fp, #28]
   32920:	158b7028 	strne	r7, [fp, #40]	; 0x28
   32924:	eaffffeb 	b	328d8 <BusAccess::addrHighSet(unsigned long)+0x104>
   32928:	e3a02c0e 	mov	r2, #3584	; 0xe00
   3292c:	e59f3004 	ldr	r3, [pc, #4]	; 32938 <BusAccess::addrHighSet(unsigned long)+0x164>
   32930:	e5832028 	str	r2, [r3, #40]	; 0x28
   32934:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32938:	20200000 	.word	0x20200000

0003293c <BusAccess::addrSet(unsigned int)>:
   3293c:	e92d4070 	push	{r4, r5, r6, lr}
   32940:	e1a04001 	mov	r4, r1
   32944:	e1a05000 	mov	r5, r0
   32948:	e1a01421 	lsr	r1, r1, #8
   3294c:	ebffffa0 	bl	327d4 <BusAccess::addrHighSet(unsigned long)>
   32950:	e6ef1074 	uxtb	r1, r4
   32954:	e1a00005 	mov	r0, r5
   32958:	e8bd4070 	pop	{r4, r5, r6, lr}
   3295c:	eaffff3d 	b	32658 <BusAccess::addrLowSet(unsigned long)>

00032960 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)>:
   32960:	e1a01a01 	lsl	r1, r1, #20
   32964:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   32968:	e59f30b8 	ldr	r3, [pc, #184]	; 32a28 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xc8>
   3296c:	e92d4070 	push	{r4, r5, r6, lr}
   32970:	e3520001 	cmp	r2, #1
   32974:	e1e0e001 	mvn	lr, r1
   32978:	e59fc0ac 	ldr	ip, [pc, #172]	; 32a2c <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xcc>
   3297c:	e1a05002 	mov	r5, r2
   32980:	11a0c003 	movne	ip, r3
   32984:	e3a02c02 	mov	r2, #512	; 0x200
   32988:	e59f30a0 	ldr	r3, [pc, #160]	; 32a30 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xd0>
   3298c:	e20ee6ff 	and	lr, lr, #267386880	; 0xff00000
   32990:	e583101c 	str	r1, [r3, #28]
   32994:	e583e028 	str	lr, [r3, #40]	; 0x28
   32998:	e583c028 	str	ip, [r3, #40]	; 0x28
   3299c:	e583201c 	str	r2, [r3, #28]
   329a0:	e5902000 	ldr	r2, [r0]
   329a4:	e1a04000 	mov	r4, r0
   329a8:	e3520011 	cmp	r2, #17
   329ac:	03a02802 	moveq	r2, #131072	; 0x20000
   329b0:	13a02803 	movne	r2, #196608	; 0x30000
   329b4:	e3a000fa 	mov	r0, #250	; 0xfa
   329b8:	e5832028 	str	r2, [r3, #40]	; 0x28
   329bc:	eb002f6c 	bl	3e774 <lowlev_cycleDelay>
   329c0:	e5943000 	ldr	r3, [r4]
   329c4:	e3530011 	cmp	r3, #17
   329c8:	0a000007 	beq	329ec <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0x8c>
   329cc:	e59f2060 	ldr	r2, [pc, #96]	; 32a34 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xd4>
   329d0:	e59f1060 	ldr	r1, [pc, #96]	; 32a38 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xd8>
   329d4:	e3550001 	cmp	r5, #1
   329d8:	01a05002 	moveq	r5, r2
   329dc:	11a05001 	movne	r5, r1
   329e0:	e59f3048 	ldr	r3, [pc, #72]	; 32a30 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xd0>
   329e4:	e583501c 	str	r5, [r3, #28]
   329e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   329ec:	e59f1048 	ldr	r1, [pc, #72]	; 32a3c <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xdc>
   329f0:	e59f2048 	ldr	r2, [pc, #72]	; 32a40 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xe0>
   329f4:	e3550001 	cmp	r5, #1
   329f8:	01a05002 	moveq	r5, r2
   329fc:	11a05001 	movne	r5, r1
   32a00:	e59f3028 	ldr	r3, [pc, #40]	; 32a30 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)+0xd0>
   32a04:	e583501c 	str	r5, [r3, #28]
   32a08:	e5942000 	ldr	r2, [r4]
   32a0c:	e3520011 	cmp	r2, #17
   32a10:	03a02c0e 	moveq	r2, #3584	; 0xe00
   32a14:	13a01801 	movne	r1, #65536	; 0x10000
   32a18:	13a02c0e 	movne	r2, #3584	; 0xe00
   32a1c:	1583101c 	strne	r1, [r3, #28]
   32a20:	e5832028 	str	r2, [r3, #40]	; 0x28
   32a24:	e8bd8070 	pop	{r4, r5, r6, pc}
   32a28:	00000e41 	.word	0x00000e41
   32a2c:	00000e42 	.word	0x00000e42
   32a30:	20200000 	.word	0x20200000
   32a34:	00030042 	.word	0x00030042
   32a38:	00030041 	.word	0x00030041
   32a3c:	00020041 	.word	0x00020041
   32a40:	00020042 	.word	0x00020042

00032a44 <BusAccess::byteRead(BusAccess::BlockAccessType)>:
   32a44:	e92d4070 	push	{r4, r5, r6, lr}
   32a48:	e1a04001 	mov	r4, r1
   32a4c:	e59f2090 	ldr	r2, [pc, #144]	; 32ae4 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xa0>
   32a50:	e3540001 	cmp	r4, #1
   32a54:	e59f308c 	ldr	r3, [pc, #140]	; 32ae8 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xa4>
   32a58:	e3a01d09 	mov	r1, #576	; 0x240
   32a5c:	11a03002 	movne	r3, r2
   32a60:	e59f2084 	ldr	r2, [pc, #132]	; 32aec <BusAccess::byteRead(BusAccess::BlockAccessType)+0xa8>
   32a64:	e1a05000 	mov	r5, r0
   32a68:	e5823028 	str	r3, [r2, #40]	; 0x28
   32a6c:	e582101c 	str	r1, [r2, #28]
   32a70:	e5903000 	ldr	r3, [r0]
   32a74:	e3a00f7d 	mov	r0, #500	; 0x1f4
   32a78:	e3530011 	cmp	r3, #17
   32a7c:	13a03801 	movne	r3, #65536	; 0x10000
   32a80:	15823028 	strne	r3, [r2, #40]	; 0x28
   32a84:	eb002f3a 	bl	3e774 <lowlev_cycleDelay>
   32a88:	e59f305c 	ldr	r3, [pc, #92]	; 32aec <BusAccess::byteRead(BusAccess::BlockAccessType)+0xa8>
   32a8c:	e5952000 	ldr	r2, [r5]
   32a90:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   32a94:	e3520011 	cmp	r2, #17
   32a98:	e1a00a20 	lsr	r0, r0, #20
   32a9c:	e6ef0070 	uxtb	r0, r0
   32aa0:	0a000006 	beq	32ac0 <BusAccess::byteRead(BusAccess::BlockAccessType)+0x7c>
   32aa4:	e59f1044 	ldr	r1, [pc, #68]	; 32af0 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xac>
   32aa8:	e59f2044 	ldr	r2, [pc, #68]	; 32af4 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xb0>
   32aac:	e3540001 	cmp	r4, #1
   32ab0:	01a04001 	moveq	r4, r1
   32ab4:	11a04002 	movne	r4, r2
   32ab8:	e583401c 	str	r4, [r3, #28]
   32abc:	e8bd8070 	pop	{r4, r5, r6, pc}
   32ac0:	e59f1030 	ldr	r1, [pc, #48]	; 32af8 <BusAccess::byteRead(BusAccess::BlockAccessType)+0xb4>
   32ac4:	e59fc030 	ldr	ip, [pc, #48]	; 32afc <BusAccess::byteRead(BusAccess::BlockAccessType)+0xb8>
   32ac8:	e3540001 	cmp	r4, #1
   32acc:	e3a02c0e 	mov	r2, #3584	; 0xe00
   32ad0:	01a04001 	moveq	r4, r1
   32ad4:	11a0400c 	movne	r4, ip
   32ad8:	e5832028 	str	r2, [r3, #40]	; 0x28
   32adc:	e583401c 	str	r4, [r3, #28]
   32ae0:	e8bd8070 	pop	{r4, r5, r6, pc}
   32ae4:	00040e01 	.word	0x00040e01
   32ae8:	00040e02 	.word	0x00040e02
   32aec:	20200000 	.word	0x20200000
   32af0:	00050002 	.word	0x00050002
   32af4:	00050001 	.word	0x00050001
   32af8:	00040002 	.word	0x00040002
   32afc:	00040001 	.word	0x00040001

00032b00 <BusAccess::clockSetup()>:
   32b00:	e3a03004 	mov	r3, #4
   32b04:	e5d02228 	ldrb	r2, [r0, #552]	; 0x228
   32b08:	e5803230 	str	r3, [r0, #560]	; 0x230
   32b0c:	e3520000 	cmp	r2, #0
   32b10:	1a000001 	bne	32b1c <BusAccess::clockSetup()+0x1c>
   32b14:	e580322c 	str	r3, [r0, #556]	; 0x22c
   32b18:	e12fff1e 	bx	lr
   32b1c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32b20:	e3a07000 	mov	r7, #0
   32b24:	e59f5184 	ldr	r5, [pc, #388]	; 32cb0 <BusAccess::clockSetup()+0x1b0>
   32b28:	e59f1184 	ldr	r1, [pc, #388]	; 32cb4 <BusAccess::clockSetup()+0x1b4>
   32b2c:	e5952070 	ldr	r2, [r5, #112]	; 0x70
   32b30:	e24dd020 	sub	sp, sp, #32
   32b34:	e0022001 	and	r2, r2, r1
   32b38:	e382245a 	orr	r2, r2, #1509949440	; 0x5a000000
   32b3c:	e5852070 	str	r2, [r5, #112]	; 0x70
   32b40:	e580322c 	str	r3, [r0, #556]	; 0x22c
   32b44:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   32b48:	e5c07228 	strb	r7, [r0, #552]	; 0x228
   32b4c:	e0033001 	and	r3, r3, r1
   32b50:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32b54:	e5853070 	str	r3, [r5, #112]	; 0x70
   32b58:	e590322c 	ldr	r3, [r0, #556]	; 0x22c
   32b5c:	e1a06000 	mov	r6, r0
   32b60:	e3730001 	cmn	r3, #1
   32b64:	0a000004 	beq	32b7c <BusAccess::clockSetup()+0x7c>
   32b68:	e5903230 	ldr	r3, [r0, #560]	; 0x230
   32b6c:	e1530007 	cmp	r3, r7
   32b70:	11a04007 	movne	r4, r7
   32b74:	13a08001 	movne	r8, #1
   32b78:	1a000012 	bne	32bc8 <BusAccess::clockSetup()+0xc8>
   32b7c:	e3a03000 	mov	r3, #0
   32b80:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   32b84:	ebffd010 	bl	26bcc <CLogger::Get()>
   32b88:	e5962230 	ldr	r2, [r6, #560]	; 0x230
   32b8c:	e596322c 	ldr	r3, [r6, #556]	; 0x22c
   32b90:	e59f1120 	ldr	r1, [pc, #288]	; 32cb8 <BusAccess::clockSetup()+0x1b8>
   32b94:	e58d2004 	str	r2, [sp, #4]
   32b98:	e58d3000 	str	r3, [sp]
   32b9c:	e3a02001 	mov	r2, #1
   32ba0:	e59f3114 	ldr	r3, [pc, #276]	; 32cbc <BusAccess::clockSetup()+0x1bc>
   32ba4:	ebffcf45 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32ba8:	e28dd020 	add	sp, sp, #32
   32bac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32bb0:	e2844001 	add	r4, r4, #1
   32bb4:	e1a00008 	mov	r0, r8
   32bb8:	ebffece3 	bl	2df4c <microsDelay>
   32bbc:	e3540064 	cmp	r4, #100	; 0x64
   32bc0:	e59570a0 	ldr	r7, [r5, #160]	; 0xa0
   32bc4:	0a000002 	beq	32bd4 <BusAccess::clockSetup()+0xd4>
   32bc8:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   32bcc:	e3130080 	tst	r3, #128	; 0x80
   32bd0:	1afffff6 	bne	32bb0 <BusAccess::clockSetup()+0xb0>
   32bd4:	e5d61230 	ldrb	r1, [r6, #560]	; 0x230
   32bd8:	e5d6022c 	ldrb	r0, [r6, #556]	; 0x22c
   32bdc:	eb002e77 	bl	3e5c0 <pinMode>
   32be0:	e5960224 	ldr	r0, [r6, #548]	; 0x224
   32be4:	e59f20d4 	ldr	r2, [pc, #212]	; 32cc0 <BusAccess::clockSetup()+0x1c0>
   32be8:	e59f10d4 	ldr	r1, [pc, #212]	; 32cc4 <BusAccess::clockSetup()+0x1c4>
   32bec:	e1500002 	cmp	r0, r2
   32bf0:	e59f20d0 	ldr	r2, [pc, #208]	; 32cc8 <BusAccess::clockSetup()+0x1c8>
   32bf4:	e59f30d0 	ldr	r3, [pc, #208]	; 32ccc <BusAccess::clockSetup()+0x1cc>
   32bf8:	81a03001 	movhi	r3, r1
   32bfc:	e59f80cc 	ldr	r8, [pc, #204]	; 32cd0 <BusAccess::clockSetup()+0x1d0>
   32c00:	81a08002 	movhi	r8, r2
   32c04:	e59f90a4 	ldr	r9, [pc, #164]	; 32cb0 <BusAccess::clockSetup()+0x1b0>
   32c08:	e59f20c4 	ldr	r2, [pc, #196]	; 32cd4 <BusAccess::clockSetup()+0x1d4>
   32c0c:	e5893070 	str	r3, [r9, #112]	; 0x70
   32c10:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32c14:	e59fa0bc 	ldr	sl, [pc, #188]	; 32cd8 <BusAccess::clockSetup()+0x1d8>
   32c18:	81a0a002 	movhi	sl, r2
   32c1c:	ebffecca 	bl	2df4c <microsDelay>
   32c20:	e5961224 	ldr	r1, [r6, #548]	; 0x224
   32c24:	e1a00008 	mov	r0, r8
   32c28:	eb002c17 	bl	3dc8c <__aeabi_uidiv>
   32c2c:	e59f50a8 	ldr	r5, [pc, #168]	; 32cdc <BusAccess::clockSetup()+0x1dc>
   32c30:	e1500005 	cmp	r0, r5
   32c34:	31a05000 	movcc	r5, r0
   32c38:	e1a03605 	lsl	r3, r5, #12
   32c3c:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32c40:	e5893074 	str	r3, [r9, #116]	; 0x74
   32c44:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32c48:	ebffecbf 	bl	2df4c <microsDelay>
   32c4c:	e3a03001 	mov	r3, #1
   32c50:	e589a070 	str	sl, [r9, #112]	; 0x70
   32c54:	e1a01005 	mov	r1, r5
   32c58:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   32c5c:	e1a00008 	mov	r0, r8
   32c60:	eb002c09 	bl	3dc8c <__aeabi_uidiv>
   32c64:	e1a09000 	mov	r9, r0
   32c68:	ebffcfd7 	bl	26bcc <CLogger::Get()>
   32c6c:	e5961230 	ldr	r1, [r6, #560]	; 0x230
   32c70:	e596222c 	ldr	r2, [r6, #556]	; 0x22c
   32c74:	e5963224 	ldr	r3, [r6, #548]	; 0x224
   32c78:	e58d1014 	str	r1, [sp, #20]
   32c7c:	e58d2010 	str	r2, [sp, #16]
   32c80:	e58d3004 	str	r3, [sp, #4]
   32c84:	e58d500c 	str	r5, [sp, #12]
   32c88:	e58d8008 	str	r8, [sp, #8]
   32c8c:	e58d9000 	str	r9, [sp]
   32c90:	e58d701c 	str	r7, [sp, #28]
   32c94:	e58d4018 	str	r4, [sp, #24]
   32c98:	e59f3040 	ldr	r3, [pc, #64]	; 32ce0 <BusAccess::clockSetup()+0x1e0>
   32c9c:	e3a02003 	mov	r2, #3
   32ca0:	e59f1010 	ldr	r1, [pc, #16]	; 32cb8 <BusAccess::clockSetup()+0x1b8>
   32ca4:	ebffcf05 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32ca8:	e28dd020 	add	sp, sp, #32
   32cac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32cb0:	20101000 	.word	0x20101000
   32cb4:	00000f0f 	.word	0x00000f0f
   32cb8:	0004683c 	.word	0x0004683c
   32cbc:	0004681c 	.word	0x0004681c
   32cc0:	0003d08f 	.word	0x0003d08f
   32cc4:	5a000006 	.word	0x5a000006
   32cc8:	1dcd6500 	.word	0x1dcd6500
   32ccc:	5a000001 	.word	0x5a000001
   32cd0:	0124f800 	.word	0x0124f800
   32cd4:	5a000016 	.word	0x5a000016
   32cd8:	5a000011 	.word	0x5a000011
   32cdc:	00000fff 	.word	0x00000fff
   32ce0:	00046848 	.word	0x00046848

00032ce4 <BusAccess::clockSetFreqHz(unsigned long)>:
   32ce4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32ce8:	e1a04001 	mov	r4, r1
   32cec:	e1a06000 	mov	r6, r0
   32cf0:	e5d05228 	ldrb	r5, [r0, #552]	; 0x228
   32cf4:	e24dd020 	sub	sp, sp, #32
   32cf8:	ebffcfb3 	bl	26bcc <CLogger::Get()>
   32cfc:	e59f31c8 	ldr	r3, [pc, #456]	; 32ecc <BusAccess::clockSetFreqHz(unsigned long)+0x1e8>
   32d00:	e88d0030 	stm	sp, {r4, r5}
   32d04:	e3a02004 	mov	r2, #4
   32d08:	e59f11c0 	ldr	r1, [pc, #448]	; 32ed0 <BusAccess::clockSetFreqHz(unsigned long)+0x1ec>
   32d0c:	ebffceeb 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32d10:	e5d63228 	ldrb	r3, [r6, #552]	; 0x228
   32d14:	e3530000 	cmp	r3, #0
   32d18:	1a000062 	bne	32ea8 <BusAccess::clockSetFreqHz(unsigned long)+0x1c4>
   32d1c:	e3550000 	cmp	r5, #0
   32d20:	e5864224 	str	r4, [r6, #548]	; 0x224
   32d24:	1a000001 	bne	32d30 <BusAccess::clockSetFreqHz(unsigned long)+0x4c>
   32d28:	e28dd020 	add	sp, sp, #32
   32d2c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32d30:	e5d67228 	ldrb	r7, [r6, #552]	; 0x228
   32d34:	e3570000 	cmp	r7, #0
   32d38:	1afffffa 	bne	32d28 <BusAccess::clockSetFreqHz(unsigned long)+0x44>
   32d3c:	e59f5190 	ldr	r5, [pc, #400]	; 32ed4 <BusAccess::clockSetFreqHz(unsigned long)+0x1f0>
   32d40:	e59f3190 	ldr	r3, [pc, #400]	; 32ed8 <BusAccess::clockSetFreqHz(unsigned long)+0x1f4>
   32d44:	e5952070 	ldr	r2, [r5, #112]	; 0x70
   32d48:	e0033002 	and	r3, r3, r2
   32d4c:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32d50:	e5853070 	str	r3, [r5, #112]	; 0x70
   32d54:	e596322c 	ldr	r3, [r6, #556]	; 0x22c
   32d58:	e3730001 	cmn	r3, #1
   32d5c:	0a000004 	beq	32d74 <BusAccess::clockSetFreqHz(unsigned long)+0x90>
   32d60:	e5963230 	ldr	r3, [r6, #560]	; 0x230
   32d64:	e3530000 	cmp	r3, #0
   32d68:	11a04007 	movne	r4, r7
   32d6c:	13a08001 	movne	r8, #1
   32d70:	1a000012 	bne	32dc0 <BusAccess::clockSetFreqHz(unsigned long)+0xdc>
   32d74:	e3a03000 	mov	r3, #0
   32d78:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   32d7c:	ebffcf92 	bl	26bcc <CLogger::Get()>
   32d80:	e5962230 	ldr	r2, [r6, #560]	; 0x230
   32d84:	e596322c 	ldr	r3, [r6, #556]	; 0x22c
   32d88:	e59f1140 	ldr	r1, [pc, #320]	; 32ed0 <BusAccess::clockSetFreqHz(unsigned long)+0x1ec>
   32d8c:	e58d2004 	str	r2, [sp, #4]
   32d90:	e58d3000 	str	r3, [sp]
   32d94:	e3a02001 	mov	r2, #1
   32d98:	e59f313c 	ldr	r3, [pc, #316]	; 32edc <BusAccess::clockSetFreqHz(unsigned long)+0x1f8>
   32d9c:	ebffcec7 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32da0:	e28dd020 	add	sp, sp, #32
   32da4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32da8:	e2844001 	add	r4, r4, #1
   32dac:	e1a00008 	mov	r0, r8
   32db0:	ebffec65 	bl	2df4c <microsDelay>
   32db4:	e3540064 	cmp	r4, #100	; 0x64
   32db8:	e59570a0 	ldr	r7, [r5, #160]	; 0xa0
   32dbc:	0a000002 	beq	32dcc <BusAccess::clockSetFreqHz(unsigned long)+0xe8>
   32dc0:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   32dc4:	e3130080 	tst	r3, #128	; 0x80
   32dc8:	1afffff6 	bne	32da8 <BusAccess::clockSetFreqHz(unsigned long)+0xc4>
   32dcc:	e5d61230 	ldrb	r1, [r6, #560]	; 0x230
   32dd0:	e5d6022c 	ldrb	r0, [r6, #556]	; 0x22c
   32dd4:	eb002df9 	bl	3e5c0 <pinMode>
   32dd8:	e5960224 	ldr	r0, [r6, #548]	; 0x224
   32ddc:	e59f20fc 	ldr	r2, [pc, #252]	; 32ee0 <BusAccess::clockSetFreqHz(unsigned long)+0x1fc>
   32de0:	e59f10fc 	ldr	r1, [pc, #252]	; 32ee4 <BusAccess::clockSetFreqHz(unsigned long)+0x200>
   32de4:	e1500002 	cmp	r0, r2
   32de8:	e59f20f8 	ldr	r2, [pc, #248]	; 32ee8 <BusAccess::clockSetFreqHz(unsigned long)+0x204>
   32dec:	e59f30f8 	ldr	r3, [pc, #248]	; 32eec <BusAccess::clockSetFreqHz(unsigned long)+0x208>
   32df0:	81a03001 	movhi	r3, r1
   32df4:	e59f80f4 	ldr	r8, [pc, #244]	; 32ef0 <BusAccess::clockSetFreqHz(unsigned long)+0x20c>
   32df8:	81a08002 	movhi	r8, r2
   32dfc:	e59f90d0 	ldr	r9, [pc, #208]	; 32ed4 <BusAccess::clockSetFreqHz(unsigned long)+0x1f0>
   32e00:	e59f20ec 	ldr	r2, [pc, #236]	; 32ef4 <BusAccess::clockSetFreqHz(unsigned long)+0x210>
   32e04:	e5893070 	str	r3, [r9, #112]	; 0x70
   32e08:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32e0c:	e59fa0e4 	ldr	sl, [pc, #228]	; 32ef8 <BusAccess::clockSetFreqHz(unsigned long)+0x214>
   32e10:	81a0a002 	movhi	sl, r2
   32e14:	ebffec4c 	bl	2df4c <microsDelay>
   32e18:	e5961224 	ldr	r1, [r6, #548]	; 0x224
   32e1c:	e1a00008 	mov	r0, r8
   32e20:	eb002b99 	bl	3dc8c <__aeabi_uidiv>
   32e24:	e59f50d0 	ldr	r5, [pc, #208]	; 32efc <BusAccess::clockSetFreqHz(unsigned long)+0x218>
   32e28:	e1500005 	cmp	r0, r5
   32e2c:	31a05000 	movcc	r5, r0
   32e30:	e1a03605 	lsl	r3, r5, #12
   32e34:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32e38:	e5893074 	str	r3, [r9, #116]	; 0x74
   32e3c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32e40:	ebffec41 	bl	2df4c <microsDelay>
   32e44:	e3a03001 	mov	r3, #1
   32e48:	e589a070 	str	sl, [r9, #112]	; 0x70
   32e4c:	e1a01005 	mov	r1, r5
   32e50:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   32e54:	e1a00008 	mov	r0, r8
   32e58:	eb002b8b 	bl	3dc8c <__aeabi_uidiv>
   32e5c:	e1a09000 	mov	r9, r0
   32e60:	ebffcf59 	bl	26bcc <CLogger::Get()>
   32e64:	e5961230 	ldr	r1, [r6, #560]	; 0x230
   32e68:	e596222c 	ldr	r2, [r6, #556]	; 0x22c
   32e6c:	e5963224 	ldr	r3, [r6, #548]	; 0x224
   32e70:	e58d1014 	str	r1, [sp, #20]
   32e74:	e58d2010 	str	r2, [sp, #16]
   32e78:	e58d3004 	str	r3, [sp, #4]
   32e7c:	e58d500c 	str	r5, [sp, #12]
   32e80:	e58d8008 	str	r8, [sp, #8]
   32e84:	e58d9000 	str	r9, [sp]
   32e88:	e58d701c 	str	r7, [sp, #28]
   32e8c:	e58d4018 	str	r4, [sp, #24]
   32e90:	e59f3068 	ldr	r3, [pc, #104]	; 32f00 <BusAccess::clockSetFreqHz(unsigned long)+0x21c>
   32e94:	e3a02003 	mov	r2, #3
   32e98:	e59f1030 	ldr	r1, [pc, #48]	; 32ed0 <BusAccess::clockSetFreqHz(unsigned long)+0x1ec>
   32e9c:	ebffce87 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   32ea0:	e28dd020 	add	sp, sp, #32
   32ea4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32ea8:	e3a01000 	mov	r1, #0
   32eac:	e59f2020 	ldr	r2, [pc, #32]	; 32ed4 <BusAccess::clockSetFreqHz(unsigned long)+0x1f0>
   32eb0:	e59f3020 	ldr	r3, [pc, #32]	; 32ed8 <BusAccess::clockSetFreqHz(unsigned long)+0x1f4>
   32eb4:	e5920070 	ldr	r0, [r2, #112]	; 0x70
   32eb8:	e0033000 	and	r3, r3, r0
   32ebc:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32ec0:	e5823070 	str	r3, [r2, #112]	; 0x70
   32ec4:	e5c61228 	strb	r1, [r6, #552]	; 0x228
   32ec8:	eaffff93 	b	32d1c <BusAccess::clockSetFreqHz(unsigned long)+0x38>
   32ecc:	0004689c 	.word	0x0004689c
   32ed0:	0004683c 	.word	0x0004683c
   32ed4:	20101000 	.word	0x20101000
   32ed8:	00000f0f 	.word	0x00000f0f
   32edc:	0004681c 	.word	0x0004681c
   32ee0:	0003d08f 	.word	0x0003d08f
   32ee4:	5a000006 	.word	0x5a000006
   32ee8:	1dcd6500 	.word	0x1dcd6500
   32eec:	5a000001 	.word	0x5a000001
   32ef0:	0124f800 	.word	0x0124f800
   32ef4:	5a000016 	.word	0x5a000016
   32ef8:	5a000011 	.word	0x5a000011
   32efc:	00000fff 	.word	0x00000fff
   32f00:	00046848 	.word	0x00046848

00032f04 <BusAccess::clockEnable(bool)>:
   32f04:	e5d03228 	ldrb	r3, [r0, #552]	; 0x228
   32f08:	e1530001 	cmp	r3, r1
   32f0c:	012fff1e 	bxeq	lr
   32f10:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32f14:	e59f5180 	ldr	r5, [pc, #384]	; 3309c <BusAccess::clockEnable(bool)+0x198>
   32f18:	e59f3180 	ldr	r3, [pc, #384]	; 330a0 <BusAccess::clockEnable(bool)+0x19c>
   32f1c:	e5952070 	ldr	r2, [r5, #112]	; 0x70
   32f20:	e3510000 	cmp	r1, #0
   32f24:	e0033002 	and	r3, r3, r2
   32f28:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32f2c:	e5853070 	str	r3, [r5, #112]	; 0x70
   32f30:	e24dd020 	sub	sp, sp, #32
   32f34:	05c01228 	strbeq	r1, [r0, #552]	; 0x228
   32f38:	0a000048 	beq	33060 <BusAccess::clockEnable(bool)+0x15c>
   32f3c:	e590322c 	ldr	r3, [r0, #556]	; 0x22c
   32f40:	e1a06000 	mov	r6, r0
   32f44:	e3730001 	cmn	r3, #1
   32f48:	0a000046 	beq	33068 <BusAccess::clockEnable(bool)+0x164>
   32f4c:	e5903230 	ldr	r3, [r0, #560]	; 0x230
   32f50:	e3530000 	cmp	r3, #0
   32f54:	0a000043 	beq	33068 <BusAccess::clockEnable(bool)+0x164>
   32f58:	e3a07000 	mov	r7, #0
   32f5c:	e3a08001 	mov	r8, #1
   32f60:	e1a04007 	mov	r4, r7
   32f64:	ea000005 	b	32f80 <BusAccess::clockEnable(bool)+0x7c>
   32f68:	e2844001 	add	r4, r4, #1
   32f6c:	e1a00008 	mov	r0, r8
   32f70:	ebffebf5 	bl	2df4c <microsDelay>
   32f74:	e3540064 	cmp	r4, #100	; 0x64
   32f78:	e59570a0 	ldr	r7, [r5, #160]	; 0xa0
   32f7c:	0a000002 	beq	32f8c <BusAccess::clockEnable(bool)+0x88>
   32f80:	e5953070 	ldr	r3, [r5, #112]	; 0x70
   32f84:	e3130080 	tst	r3, #128	; 0x80
   32f88:	1afffff6 	bne	32f68 <BusAccess::clockEnable(bool)+0x64>
   32f8c:	e5d61230 	ldrb	r1, [r6, #560]	; 0x230
   32f90:	e5d6022c 	ldrb	r0, [r6, #556]	; 0x22c
   32f94:	eb002d89 	bl	3e5c0 <pinMode>
   32f98:	e5960224 	ldr	r0, [r6, #548]	; 0x224
   32f9c:	e59f2100 	ldr	r2, [pc, #256]	; 330a4 <BusAccess::clockEnable(bool)+0x1a0>
   32fa0:	e59f1100 	ldr	r1, [pc, #256]	; 330a8 <BusAccess::clockEnable(bool)+0x1a4>
   32fa4:	e1500002 	cmp	r0, r2
   32fa8:	e59f20fc 	ldr	r2, [pc, #252]	; 330ac <BusAccess::clockEnable(bool)+0x1a8>
   32fac:	e59f30fc 	ldr	r3, [pc, #252]	; 330b0 <BusAccess::clockEnable(bool)+0x1ac>
   32fb0:	81a03001 	movhi	r3, r1
   32fb4:	e59f80f8 	ldr	r8, [pc, #248]	; 330b4 <BusAccess::clockEnable(bool)+0x1b0>
   32fb8:	81a08002 	movhi	r8, r2
   32fbc:	e59f90d8 	ldr	r9, [pc, #216]	; 3309c <BusAccess::clockEnable(bool)+0x198>
   32fc0:	e59f20f0 	ldr	r2, [pc, #240]	; 330b8 <BusAccess::clockEnable(bool)+0x1b4>
   32fc4:	e5893070 	str	r3, [r9, #112]	; 0x70
   32fc8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   32fcc:	e59fa0e8 	ldr	sl, [pc, #232]	; 330bc <BusAccess::clockEnable(bool)+0x1b8>
   32fd0:	81a0a002 	movhi	sl, r2
   32fd4:	ebffebdc 	bl	2df4c <microsDelay>
   32fd8:	e5961224 	ldr	r1, [r6, #548]	; 0x224
   32fdc:	e1a00008 	mov	r0, r8
   32fe0:	eb002b29 	bl	3dc8c <__aeabi_uidiv>
   32fe4:	e59f50d4 	ldr	r5, [pc, #212]	; 330c0 <BusAccess::clockEnable(bool)+0x1bc>
   32fe8:	e1500005 	cmp	r0, r5
   32fec:	31a05000 	movcc	r5, r0
   32ff0:	e1a03605 	lsl	r3, r5, #12
   32ff4:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   32ff8:	e5893074 	str	r3, [r9, #116]	; 0x74
   32ffc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33000:	ebffebd1 	bl	2df4c <microsDelay>
   33004:	e3a03001 	mov	r3, #1
   33008:	e589a070 	str	sl, [r9, #112]	; 0x70
   3300c:	e1a01005 	mov	r1, r5
   33010:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   33014:	e1a00008 	mov	r0, r8
   33018:	eb002b1b 	bl	3dc8c <__aeabi_uidiv>
   3301c:	e1a09000 	mov	r9, r0
   33020:	ebffcee9 	bl	26bcc <CLogger::Get()>
   33024:	e5961230 	ldr	r1, [r6, #560]	; 0x230
   33028:	e596222c 	ldr	r2, [r6, #556]	; 0x22c
   3302c:	e5963224 	ldr	r3, [r6, #548]	; 0x224
   33030:	e58d1014 	str	r1, [sp, #20]
   33034:	e58d2010 	str	r2, [sp, #16]
   33038:	e58d3004 	str	r3, [sp, #4]
   3303c:	e58d500c 	str	r5, [sp, #12]
   33040:	e58d8008 	str	r8, [sp, #8]
   33044:	e58d9000 	str	r9, [sp]
   33048:	e58d701c 	str	r7, [sp, #28]
   3304c:	e58d4018 	str	r4, [sp, #24]
   33050:	e59f306c 	ldr	r3, [pc, #108]	; 330c4 <BusAccess::clockEnable(bool)+0x1c0>
   33054:	e3a02003 	mov	r2, #3
   33058:	e59f1068 	ldr	r1, [pc, #104]	; 330c8 <BusAccess::clockEnable(bool)+0x1c4>
   3305c:	ebffce17 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33060:	e28dd020 	add	sp, sp, #32
   33064:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33068:	e3a03000 	mov	r3, #0
   3306c:	e5c63228 	strb	r3, [r6, #552]	; 0x228
   33070:	ebffced5 	bl	26bcc <CLogger::Get()>
   33074:	e5962230 	ldr	r2, [r6, #560]	; 0x230
   33078:	e596322c 	ldr	r3, [r6, #556]	; 0x22c
   3307c:	e59f1044 	ldr	r1, [pc, #68]	; 330c8 <BusAccess::clockEnable(bool)+0x1c4>
   33080:	e58d2004 	str	r2, [sp, #4]
   33084:	e58d3000 	str	r3, [sp]
   33088:	e3a02001 	mov	r2, #1
   3308c:	e59f3038 	ldr	r3, [pc, #56]	; 330cc <BusAccess::clockEnable(bool)+0x1c8>
   33090:	ebffce0a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33094:	e28dd020 	add	sp, sp, #32
   33098:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3309c:	20101000 	.word	0x20101000
   330a0:	00000f0f 	.word	0x00000f0f
   330a4:	0003d08f 	.word	0x0003d08f
   330a8:	5a000006 	.word	0x5a000006
   330ac:	1dcd6500 	.word	0x1dcd6500
   330b0:	5a000001 	.word	0x5a000001
   330b4:	0124f800 	.word	0x0124f800
   330b8:	5a000016 	.word	0x5a000016
   330bc:	5a000011 	.word	0x5a000011
   330c0:	00000fff 	.word	0x00000fff
   330c4:	00046848 	.word	0x00046848
   330c8:	0004683c 	.word	0x0004683c
   330cc:	0004681c 	.word	0x0004681c

000330d0 <BusAccess::clockCurFreqHz()>:
   330d0:	e5900224 	ldr	r0, [r0, #548]	; 0x224
   330d4:	e12fff1e 	bx	lr

000330d8 <BusAccess::clockGetMinFreqHz()>:
   330d8:	e3a00001 	mov	r0, #1
   330dc:	e12fff1e 	bx	lr

000330e0 <BusAccess::clockGetMaxFreqHz()>:
   330e0:	e59f0000 	ldr	r0, [pc]	; 330e8 <BusAccess::clockGetMaxFreqHz()+0x8>
   330e4:	e12fff1e 	bx	lr
   330e8:	017d7840 	.word	0x017d7840

000330ec <BusAccess::waitEnablementUpdate()>:
   330ec:	e59011bc 	ldr	r1, [r0, #444]	; 0x1bc
   330f0:	e3510000 	cmp	r1, #0
   330f4:	da00001c 	ble	3316c <BusAccess::waitEnablementUpdate()+0x80>
   330f8:	e3a0c000 	mov	ip, #0
   330fc:	e3a0202c 	mov	r2, #44	; 0x2c
   33100:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   33104:	e1a03000 	mov	r3, r0
   33108:	e1a0e00c 	mov	lr, ip
   3310c:	e0210192 	mla	r1, r2, r1, r0
   33110:	e5d32004 	ldrb	r2, [r3, #4]
   33114:	e3520000 	cmp	r2, #0
   33118:	0a000003 	beq	3312c <BusAccess::waitEnablementUpdate()+0x40>
   3311c:	e35c0000 	cmp	ip, #0
   33120:	05d3c014 	ldrbeq	ip, [r3, #20]
   33124:	e35e0000 	cmp	lr, #0
   33128:	05d3e015 	ldrbeq	lr, [r3, #21]
   3312c:	e283302c 	add	r3, r3, #44	; 0x2c
   33130:	e1530001 	cmp	r3, r1
   33134:	1afffff5 	bne	33110 <BusAccess::waitEnablementUpdate()+0x24>
   33138:	e59f3054 	ldr	r3, [pc, #84]	; 33194 <BusAccess::waitEnablementUpdate()+0xa8>
   3313c:	e35e0000 	cmp	lr, #0
   33140:	e5933000 	ldr	r3, [r3]
   33144:	e59f2048 	ldr	r2, [pc, #72]	; 33194 <BusAccess::waitEnablementUpdate()+0xa8>
   33148:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   3314c:	e3c33008 	bic	r3, r3, #8
   33150:	13833008 	orrne	r3, r3, #8
   33154:	e35c0000 	cmp	ip, #0
   33158:	13833b02 	orrne	r3, r3, #2048	; 0x800
   3315c:	e5c0c1c1 	strb	ip, [r0, #449]	; 0x1c1
   33160:	e5c0e1c2 	strb	lr, [r0, #450]	; 0x1c2
   33164:	e5823000 	str	r3, [r2]
   33168:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   3316c:	e3a02000 	mov	r2, #0
   33170:	e59f301c 	ldr	r3, [pc, #28]	; 33194 <BusAccess::waitEnablementUpdate()+0xa8>
   33174:	e5c021c1 	strb	r2, [r0, #449]	; 0x1c1
   33178:	e5933000 	ldr	r3, [r3]
   3317c:	e5c021c2 	strb	r2, [r0, #450]	; 0x1c2
   33180:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   33184:	e59f2008 	ldr	r2, [pc, #8]	; 33194 <BusAccess::waitEnablementUpdate()+0xa8>
   33188:	e3c33008 	bic	r3, r3, #8
   3318c:	e5823000 	str	r3, [r2]
   33190:	e12fff1e 	bx	lr
   33194:	2020c000 	.word	0x2020c000

00033198 <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>:
   33198:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3319c:	e59041bc 	ldr	r4, [r0, #444]	; 0x1bc
   331a0:	e24dd00c 	sub	sp, sp, #12
   331a4:	e3540009 	cmp	r4, #9
   331a8:	e5dd8030 	ldrb	r8, [sp, #48]	; 0x30
   331ac:	e5dd7034 	ldrb	r7, [sp, #52]	; 0x34
   331b0:	e5ddb038 	ldrb	fp, [sp, #56]	; 0x38
   331b4:	e5dda040 	ldrb	sl, [sp, #64]	; 0x40
   331b8:	e5dd9048 	ldrb	r9, [sp, #72]	; 0x48
   331bc:	e5dd6050 	ldrb	r6, [sp, #80]	; 0x50
   331c0:	e5dd5054 	ldrb	r5, [sp, #84]	; 0x54
   331c4:	e5dde058 	ldrb	lr, [sp, #88]	; 0x58
   331c8:	ca00001d 	bgt	33244 <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)+0xac>
   331cc:	e88d000c 	stm	sp, {r2, r3}
   331d0:	e3a0302c 	mov	r3, #44	; 0x2c
   331d4:	e0230493 	mla	r3, r3, r4, r0
   331d8:	e5c31004 	strb	r1, [r3, #4]
   331dc:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
   331e0:	e5c3b016 	strb	fp, [r3, #22]
   331e4:	e5831018 	str	r1, [r3, #24]
   331e8:	e59d1000 	ldr	r1, [sp]
   331ec:	e5c3a01c 	strb	sl, [r3, #28]
   331f0:	e5831008 	str	r1, [r3, #8]
   331f4:	e59d1004 	ldr	r1, [sp, #4]
   331f8:	e2842001 	add	r2, r4, #1
   331fc:	e583100c 	str	r1, [r3, #12]
   33200:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
   33204:	e5c38014 	strb	r8, [r3, #20]
   33208:	e5831020 	str	r1, [r3, #32]
   3320c:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
   33210:	e5c39024 	strb	r9, [r3, #36]	; 0x24
   33214:	e5831010 	str	r1, [r3, #16]
   33218:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   3321c:	e5c37015 	strb	r7, [r3, #21]
   33220:	e5831028 	str	r1, [r3, #40]	; 0x28
   33224:	e5c3602c 	strb	r6, [r3, #44]	; 0x2c
   33228:	e5c3502d 	strb	r5, [r3, #45]	; 0x2d
   3322c:	e5c3e02e 	strb	lr, [r3, #46]	; 0x2e
   33230:	e58021bc 	str	r2, [r0, #444]	; 0x1bc
   33234:	ebffffac 	bl	330ec <BusAccess::waitEnablementUpdate()>
   33238:	e1a00004 	mov	r0, r4
   3323c:	e28dd00c 	add	sp, sp, #12
   33240:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33244:	e3e04000 	mvn	r4, #0
   33248:	eafffffa 	b	33238 <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)+0xa0>

0003324c <BusAccess::busSocketEnable(int, bool)>:
   3324c:	e3510000 	cmp	r1, #0
   33250:	b12fff1e 	bxlt	lr
   33254:	e590c1bc 	ldr	ip, [r0, #444]	; 0x1bc
   33258:	e151000c 	cmp	r1, ip
   3325c:	a12fff1e 	bxge	lr
   33260:	e3a0c02c 	mov	ip, #44	; 0x2c
   33264:	e021019c 	mla	r1, ip, r1, r0
   33268:	e5c12004 	strb	r2, [r1, #4]
   3326c:	eaffff9e 	b	330ec <BusAccess::waitEnablementUpdate()>

00033270 <BusAccess::controlRelease()>:
   33270:	e5903000 	ldr	r3, [r0]
   33274:	e92d4070 	push	{r4, r5, r6, lr}
   33278:	e3530011 	cmp	r3, #17
   3327c:	e1a04000 	mov	r4, r0
   33280:	0a000053 	beq	333d4 <BusAccess::controlRelease()+0x164>
   33284:	e3a06001 	mov	r6, #1
   33288:	e59f51a8 	ldr	r5, [pc, #424]	; 33438 <BusAccess::controlRelease()+0x1c8>
   3328c:	e59f31a8 	ldr	r3, [pc, #424]	; 3343c <BusAccess::controlRelease()+0x1cc>
   33290:	e3a00014 	mov	r0, #20
   33294:	e585301c 	str	r3, [r5, #28]
   33298:	eb002d35 	bl	3e774 <lowlev_cycleDelay>
   3329c:	e5856028 	str	r6, [r5, #40]	; 0x28
   332a0:	e3a00014 	mov	r0, #20
   332a4:	eb002d32 	bl	3e774 <lowlev_cycleDelay>
   332a8:	e585601c 	str	r6, [r5, #28]
   332ac:	e3a01040 	mov	r1, #64	; 0x40
   332b0:	e59f3180 	ldr	r3, [pc, #384]	; 33438 <BusAccess::controlRelease()+0x1c8>
   332b4:	e5932008 	ldr	r2, [r3, #8]
   332b8:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   332bc:	e5832008 	str	r2, [r3, #8]
   332c0:	e583101c 	str	r1, [r3, #28]
   332c4:	e5942000 	ldr	r2, [r4]
   332c8:	e3520011 	cmp	r2, #17
   332cc:	03a02c0e 	moveq	r2, #3584	; 0xe00
   332d0:	13a01801 	movne	r1, #65536	; 0x10000
   332d4:	13a02c0e 	movne	r2, #3584	; 0xe00
   332d8:	1583101c 	strne	r1, [r3, #28]
   332dc:	e5832028 	str	r2, [r3, #40]	; 0x28
   332e0:	e5943000 	ldr	r3, [r4]
   332e4:	e3530011 	cmp	r3, #17
   332e8:	0a00004e 	beq	33428 <BusAccess::controlRelease()+0x1b8>
   332ec:	e59f314c 	ldr	r3, [pc, #332]	; 33440 <BusAccess::controlRelease()+0x1d0>
   332f0:	e5932004 	ldr	r2, [r3, #4]
   332f4:	e3120001 	tst	r2, #1
   332f8:	1a00000b 	bne	3332c <BusAccess::controlRelease()+0xbc>
   332fc:	e5d411c2 	ldrb	r1, [r4, #450]	; 0x1c2
   33300:	e5d421c1 	ldrb	r2, [r4, #449]	; 0x1c1
   33304:	e3510000 	cmp	r1, #0
   33308:	13e014ff 	mvnne	r1, #-16777216	; 0xff000000
   3330c:	03a01000 	moveq	r1, #0
   33310:	e3520000 	cmp	r2, #0
   33314:	03a02000 	moveq	r2, #0
   33318:	13e024ff 	mvnne	r2, #-16777216	; 0xff000000
   3331c:	e59f0114 	ldr	r0, [pc, #276]	; 33438 <BusAccess::controlRelease()+0x1c8>
   33320:	e5900034 	ldr	r0, [r0, #52]	; 0x34
   33324:	e5831018 	str	r1, [r3, #24]
   33328:	e5832018 	str	r2, [r3, #24]
   3332c:	e3a05000 	mov	r5, #0
   33330:	e1a00004 	mov	r0, r4
   33334:	e5c451c3 	strb	r5, [r4, #451]	; 0x1c3
   33338:	ebffff6b 	bl	330ec <BusAccess::waitEnablementUpdate()>
   3333c:	e1a00004 	mov	r0, r4
   33340:	ebfff8fa 	bl	31730 <BusAccess::busActionCheck()>
   33344:	e1a00004 	mov	r0, r4
   33348:	ebfff8fc 	bl	31740 <BusAccess::busActionHandleStart()>
   3334c:	e5940000 	ldr	r0, [r4]
   33350:	e59f10ec 	ldr	r1, [pc, #236]	; 33444 <BusAccess::controlRelease()+0x1d4>
   33354:	e3500011 	cmp	r0, #17
   33358:	e59f30e8 	ldr	r3, [pc, #232]	; 33448 <BusAccess::controlRelease()+0x1d8>
   3335c:	11a03001 	movne	r3, r1
   33360:	e59f20d0 	ldr	r2, [pc, #208]	; 33438 <BusAccess::controlRelease()+0x1c8>
   33364:	e1a01005 	mov	r1, r5
   33368:	e582301c 	str	r3, [r2, #28]
   3336c:	e3a00011 	mov	r0, #17
   33370:	eb002c92 	bl	3e5c0 <pinMode>
   33374:	e1a01005 	mov	r1, r5
   33378:	e3a00012 	mov	r0, #18
   3337c:	eb002c8f 	bl	3e5c0 <pinMode>
   33380:	e1a01005 	mov	r1, r5
   33384:	e1a00005 	mov	r0, r5
   33388:	eb002c8c 	bl	3e5c0 <pinMode>
   3338c:	e1a01005 	mov	r1, r5
   33390:	e3a00001 	mov	r0, #1
   33394:	eb002c89 	bl	3e5c0 <pinMode>
   33398:	e1a01005 	mov	r1, r5
   3339c:	e3a00005 	mov	r0, #5
   333a0:	eb002c86 	bl	3e5c0 <pinMode>
   333a4:	e5943000 	ldr	r3, [r4]
   333a8:	e3530011 	cmp	r3, #17
   333ac:	0a000002 	beq	333bc <BusAccess::controlRelease()+0x14c>
   333b0:	e1a01005 	mov	r1, r5
   333b4:	e3a00003 	mov	r0, #3
   333b8:	eb002c80 	bl	3e5c0 <pinMode>
   333bc:	e3a01000 	mov	r1, #0
   333c0:	e1a00004 	mov	r0, r4
   333c4:	ebfffbc5 	bl	322e0 <BusAccess::waitForBusAck(bool)>
   333c8:	e3a03000 	mov	r3, #0
   333cc:	e5c431f1 	strb	r3, [r4, #497]	; 0x1f1
   333d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   333d4:	e3a02040 	mov	r2, #64	; 0x40
   333d8:	e3a06001 	mov	r6, #1
   333dc:	e59f5054 	ldr	r5, [pc, #84]	; 33438 <BusAccess::controlRelease()+0x1c8>
   333e0:	e59f3064 	ldr	r3, [pc, #100]	; 3344c <BusAccess::controlRelease()+0x1dc>
   333e4:	e5852028 	str	r2, [r5, #40]	; 0x28
   333e8:	e5952008 	ldr	r2, [r5, #8]
   333ec:	e59f105c 	ldr	r1, [pc, #92]	; 33450 <BusAccess::controlRelease()+0x1e0>
   333f0:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   333f4:	e1823003 	orr	r3, r2, r3
   333f8:	e5853008 	str	r3, [r5, #8]
   333fc:	e3a00064 	mov	r0, #100	; 0x64
   33400:	e585101c 	str	r1, [r5, #28]
   33404:	eb002cda 	bl	3e774 <lowlev_cycleDelay>
   33408:	e5856028 	str	r6, [r5, #40]	; 0x28
   3340c:	e3a00014 	mov	r0, #20
   33410:	eb002cd7 	bl	3e774 <lowlev_cycleDelay>
   33414:	e585601c 	str	r6, [r5, #28]
   33418:	e5953008 	ldr	r3, [r5, #8]
   3341c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   33420:	e5853008 	str	r3, [r5, #8]
   33424:	eaffffa0 	b	332ac <BusAccess::controlRelease()+0x3c>
   33428:	e3a01001 	mov	r1, #1
   3342c:	e3a00003 	mov	r0, #3
   33430:	eb002ca2 	bl	3e6c0 <digitalWrite>
   33434:	eaffffac 	b	332ec <BusAccess::controlRelease()+0x7c>
   33438:	20200000 	.word	0x20200000
   3343c:	0006000b 	.word	0x0006000b
   33440:	2020c000 	.word	0x2020c000
   33444:	000e002b 	.word	0x000e002b
   33448:	000e0023 	.word	0x000e0023
   3344c:	00249249 	.word	0x00249249
   33450:	00100002 	.word	0x00100002

00033454 <BusAccess::waitSetupMREQAndIORQEnables()>:
   33454:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33458:	e3a06000 	mov	r6, #0
   3345c:	e59f30dc 	ldr	r3, [pc, #220]	; 33540 <BusAccess::waitSetupMREQAndIORQEnables()+0xec>
   33460:	e59f20dc 	ldr	r2, [pc, #220]	; 33544 <BusAccess::waitSetupMREQAndIORQEnables()+0xf0>
   33464:	e24dd010 	sub	sp, sp, #16
   33468:	e1a05006 	mov	r5, r6
   3346c:	e1a04003 	mov	r4, r3
   33470:	e3a08001 	mov	r8, #1
   33474:	e59f70cc 	ldr	r7, [pc, #204]	; 33548 <BusAccess::waitSetupMREQAndIORQEnables()+0xf4>
   33478:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   3347c:	ea000005 	b	33498 <BusAccess::waitSetupMREQAndIORQEnables()+0x44>
   33480:	e2855001 	add	r5, r5, #1
   33484:	e1a00008 	mov	r0, r8
   33488:	ebffeaaf 	bl	2df4c <microsDelay>
   3348c:	e1550007 	cmp	r5, r7
   33490:	e59460a0 	ldr	r6, [r4, #160]	; 0xa0
   33494:	0a000023 	beq	33528 <BusAccess::waitSetupMREQAndIORQEnables()+0xd4>
   33498:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
   3349c:	e2133080 	ands	r3, r3, #128	; 0x80
   334a0:	1afffff6 	bne	33480 <BusAccess::waitSetupMREQAndIORQEnables()+0x2c>
   334a4:	e1a04003 	mov	r4, r3
   334a8:	e3a01004 	mov	r1, #4
   334ac:	e3a0000d 	mov	r0, #13
   334b0:	eb002c42 	bl	3e5c0 <pinMode>
   334b4:	e3a01004 	mov	r1, #4
   334b8:	e3a0000c 	mov	r0, #12
   334bc:	eb002c3f 	bl	3e5c0 <pinMode>
   334c0:	e3e02000 	mvn	r2, #0
   334c4:	e59f7080 	ldr	r7, [pc, #128]	; 3354c <BusAccess::waitSetupMREQAndIORQEnables()+0xf8>
   334c8:	e59f8070 	ldr	r8, [pc, #112]	; 33540 <BusAccess::waitSetupMREQAndIORQEnables()+0xec>
   334cc:	e59f307c 	ldr	r3, [pc, #124]	; 33550 <BusAccess::waitSetupMREQAndIORQEnables()+0xfc>
   334d0:	e5872004 	str	r2, [r7, #4]
   334d4:	e3a00001 	mov	r0, #1
   334d8:	e58830a4 	str	r3, [r8, #164]	; 0xa4
   334dc:	ebffea9a 	bl	2df4c <microsDelay>
   334e0:	e59f306c 	ldr	r3, [pc, #108]	; 33554 <BusAccess::waitSetupMREQAndIORQEnables()+0x100>
   334e4:	e3a00001 	mov	r0, #1
   334e8:	e58830a0 	str	r3, [r8, #160]	; 0xa0
   334ec:	ebffea96 	bl	2df4c <microsDelay>
   334f0:	e59f3060 	ldr	r3, [pc, #96]	; 33558 <BusAccess::waitSetupMREQAndIORQEnables()+0x104>
   334f4:	e3a00001 	mov	r0, #1
   334f8:	e5873000 	str	r3, [r7]
   334fc:	ebffea92 	bl	2df4c <microsDelay>
   33500:	ebffcdb1 	bl	26bcc <CLogger::Get()>
   33504:	e3a03010 	mov	r3, #16
   33508:	e58d400c 	str	r4, [sp, #12]
   3350c:	e88d0068 	stm	sp, {r3, r5, r6}
   33510:	e3a02004 	mov	r2, #4
   33514:	e59f3040 	ldr	r3, [pc, #64]	; 3355c <BusAccess::waitSetupMREQAndIORQEnables()+0x108>
   33518:	e59f1040 	ldr	r1, [pc, #64]	; 33560 <BusAccess::waitSetupMREQAndIORQEnables()+0x10c>
   3351c:	ebffcce7 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33520:	e28dd010 	add	sp, sp, #16
   33524:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   33528:	e59f3034 	ldr	r3, [pc, #52]	; 33564 <BusAccess::waitSetupMREQAndIORQEnables()+0x110>
   3352c:	e3a00001 	mov	r0, #1
   33530:	e58430a0 	str	r3, [r4, #160]	; 0xa0
   33534:	ebffea84 	bl	2df4c <microsDelay>
   33538:	e59440a0 	ldr	r4, [r4, #160]	; 0xa0
   3353c:	eaffffd9 	b	334a8 <BusAccess::waitSetupMREQAndIORQEnables()+0x54>
   33540:	20101000 	.word	0x20101000
   33544:	5a000006 	.word	0x5a000006
   33548:	000186a0 	.word	0x000186a0
   3354c:	2020c000 	.word	0x2020c000
   33550:	5a010000 	.word	0x5a010000
   33554:	5a000016 	.word	0x5a000016
   33558:	00002363 	.word	0x00002363
   3355c:	000468bc 	.word	0x000468bc
   33560:	000468f4 	.word	0x000468f4
   33564:	5a000026 	.word	0x5a000026

00033568 <BusAccess::waitResetFlipFlops(bool)>:
   33568:	e59f3088 	ldr	r3, [pc, #136]	; 335f8 <BusAccess::waitResetFlipFlops(bool)+0x90>
   3356c:	e5932004 	ldr	r2, [r3, #4]
   33570:	e3120001 	tst	r2, #1
   33574:	1a00000d 	bne	335b0 <BusAccess::waitResetFlipFlops(bool)+0x48>
   33578:	e59f207c 	ldr	r2, [pc, #124]	; 335fc <BusAccess::waitResetFlipFlops(bool)+0x94>
   3357c:	e3510000 	cmp	r1, #0
   33580:	e5922034 	ldr	r2, [r2, #52]	; 0x34
   33584:	0a00000c 	beq	335bc <BusAccess::waitResetFlipFlops(bool)+0x54>
   33588:	e5d021c2 	ldrb	r2, [r0, #450]	; 0x1c2
   3358c:	e3520000 	cmp	r2, #0
   33590:	1a000016 	bne	335f0 <BusAccess::waitResetFlipFlops(bool)+0x88>
   33594:	e5832018 	str	r2, [r3, #24]
   33598:	e5d031c1 	ldrb	r3, [r0, #449]	; 0x1c1
   3359c:	e3530000 	cmp	r3, #0
   335a0:	0a00000a 	beq	335d0 <BusAccess::waitResetFlipFlops(bool)+0x68>
   335a4:	e3e024ff 	mvn	r2, #-16777216	; 0xff000000
   335a8:	e59f3048 	ldr	r3, [pc, #72]	; 335f8 <BusAccess::waitResetFlipFlops(bool)+0x90>
   335ac:	e5832018 	str	r2, [r3, #24]
   335b0:	e3a03000 	mov	r3, #0
   335b4:	e5c031c3 	strb	r3, [r0, #451]	; 0x1c3
   335b8:	e12fff1e 	bx	lr
   335bc:	e3120002 	tst	r2, #2
   335c0:	0a000004 	beq	335d8 <BusAccess::waitResetFlipFlops(bool)+0x70>
   335c4:	e5831018 	str	r1, [r3, #24]
   335c8:	e3120001 	tst	r2, #1
   335cc:	0afffff1 	beq	33598 <BusAccess::waitResetFlipFlops(bool)+0x30>
   335d0:	e3a02000 	mov	r2, #0
   335d4:	eafffff3 	b	335a8 <BusAccess::waitResetFlipFlops(bool)+0x40>
   335d8:	e5d011c2 	ldrb	r1, [r0, #450]	; 0x1c2
   335dc:	e3510000 	cmp	r1, #0
   335e0:	13e014ff 	mvnne	r1, #-16777216	; 0xff000000
   335e4:	15831018 	strne	r1, [r3, #24]
   335e8:	1afffff6 	bne	335c8 <BusAccess::waitResetFlipFlops(bool)+0x60>
   335ec:	eafffff4 	b	335c4 <BusAccess::waitResetFlipFlops(bool)+0x5c>
   335f0:	e3e024ff 	mvn	r2, #-16777216	; 0xff000000
   335f4:	eaffffe6 	b	33594 <BusAccess::waitResetFlipFlops(bool)+0x2c>
   335f8:	2020c000 	.word	0x2020c000
   335fc:	20200000 	.word	0x20200000

00033600 <BusAccess::waitClearDetected()>:
   33600:	e12fff1e 	bx	lr

00033604 <BusAccess::waitSuspendBusDetailOneCycle()>:
   33604:	e5903000 	ldr	r3, [r0]
   33608:	e3530011 	cmp	r3, #17
   3360c:	03a03001 	moveq	r3, #1
   33610:	05c031d1 	strbeq	r3, [r0, #465]	; 0x1d1
   33614:	e12fff1e 	bx	lr

00033618 <BusAccess::setPinOut(int, bool)>:
   33618:	e92d4070 	push	{r4, r5, r6, lr}
   3361c:	e1a05002 	mov	r5, r2
   33620:	e6ef4071 	uxtb	r4, r1
   33624:	e1a00004 	mov	r0, r4
   33628:	e1a01002 	mov	r1, r2
   3362c:	eb002c23 	bl	3e6c0 <digitalWrite>
   33630:	e1a00004 	mov	r0, r4
   33634:	e3a01001 	mov	r1, #1
   33638:	eb002be0 	bl	3e5c0 <pinMode>
   3363c:	e1a01005 	mov	r1, r5
   33640:	e1a00004 	mov	r0, r4
   33644:	e8bd4070 	pop	{r4, r5, r6, lr}
   33648:	ea002c1c 	b	3e6c0 <digitalWrite>

0003364c <BusAccess::controlTake()>:
   3364c:	e92d4070 	push	{r4, r5, r6, lr}
   33650:	e3a04001 	mov	r4, #1
   33654:	e3a0e040 	mov	lr, #64	; 0x40
   33658:	e1a05000 	mov	r5, r0
   3365c:	e59f209c 	ldr	r2, [pc, #156]	; 33700 <BusAccess::controlTake()+0xb4>
   33660:	e5c041f1 	strb	r4, [r0, #497]	; 0x1f1
   33664:	e5923000 	ldr	r3, [r2]
   33668:	e59fc094 	ldr	ip, [pc, #148]	; 33704 <BusAccess::controlTake()+0xb8>
   3366c:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   33670:	e3c33008 	bic	r3, r3, #8
   33674:	e5823000 	str	r3, [r2]
   33678:	e59c3008 	ldr	r3, [ip, #8]
   3367c:	e1a02004 	mov	r2, r4
   33680:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   33684:	e58c3008 	str	r3, [ip, #8]
   33688:	e3a01011 	mov	r1, #17
   3368c:	e58ce01c 	str	lr, [ip, #28]
   33690:	ebffffe0 	bl	33618 <BusAccess::setPinOut(int, bool)>
   33694:	e1a02004 	mov	r2, r4
   33698:	e1a00005 	mov	r0, r5
   3369c:	e3a01012 	mov	r1, #18
   336a0:	ebffffdc 	bl	33618 <BusAccess::setPinOut(int, bool)>
   336a4:	e1a02004 	mov	r2, r4
   336a8:	e1a00005 	mov	r0, r5
   336ac:	e3a01000 	mov	r1, #0
   336b0:	ebffffd8 	bl	33618 <BusAccess::setPinOut(int, bool)>
   336b4:	e1a02004 	mov	r2, r4
   336b8:	e1a01004 	mov	r1, r4
   336bc:	e1a00005 	mov	r0, r5
   336c0:	ebffffd4 	bl	33618 <BusAccess::setPinOut(int, bool)>
   336c4:	e1a02004 	mov	r2, r4
   336c8:	e1a00005 	mov	r0, r5
   336cc:	e3a01005 	mov	r1, #5
   336d0:	ebffffd0 	bl	33618 <BusAccess::setPinOut(int, bool)>
   336d4:	e1a02004 	mov	r2, r4
   336d8:	e1a00005 	mov	r0, r5
   336dc:	e3a01003 	mov	r1, #3
   336e0:	ebffffcc 	bl	33618 <BusAccess::setPinOut(int, bool)>
   336e4:	e5953000 	ldr	r3, [r5]
   336e8:	e3530011 	cmp	r3, #17
   336ec:	18bd8070 	popne	{r4, r5, r6, pc}
   336f0:	e3a01000 	mov	r1, #0
   336f4:	e8bd4070 	pop	{r4, r5, r6, lr}
   336f8:	e3a00003 	mov	r0, #3
   336fc:	ea002bef 	b	3e6c0 <digitalWrite>
   33700:	2020c000 	.word	0x2020c000
   33704:	20200000 	.word	0x20200000

00033708 <BusAccess::controlRequestAndTake()>:
   33708:	e3a0c040 	mov	ip, #64	; 0x40
   3370c:	e92d4010 	push	{r4, lr}
   33710:	e1a04000 	mov	r4, r0
   33714:	e59f3048 	ldr	r3, [pc, #72]	; 33764 <BusAccess::controlRequestAndTake()+0x5c>
   33718:	e3a01000 	mov	r1, #0
   3371c:	e5932008 	ldr	r2, [r3, #8]
   33720:	e3a00013 	mov	r0, #19
   33724:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   33728:	e5832008 	str	r2, [r3, #8]
   3372c:	e583c01c 	str	ip, [r3, #28]
   33730:	eb002be2 	bl	3e6c0 <digitalWrite>
   33734:	e1a00004 	mov	r0, r4
   33738:	e3a01001 	mov	r1, #1
   3373c:	ebfffae7 	bl	322e0 <BusAccess::waitForBusAck(bool)>
   33740:	e3500000 	cmp	r0, #0
   33744:	e1a00004 	mov	r0, r4
   33748:	1a000002 	bne	33758 <BusAccess::controlRequestAndTake()+0x50>
   3374c:	ebfffec7 	bl	33270 <BusAccess::controlRelease()>
   33750:	e3a00002 	mov	r0, #2
   33754:	e8bd8010 	pop	{r4, pc}
   33758:	ebffffbb 	bl	3364c <BusAccess::controlTake()>
   3375c:	e3a00000 	mov	r0, #0
   33760:	e8bd8010 	pop	{r4, pc}
   33764:	20200000 	.word	0x20200000

00033768 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>:
   33768:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3376c:	e5d0a1f1 	ldrb	sl, [r0, #497]	; 0x1f1
   33770:	e1a05000 	mov	r5, r0
   33774:	e23aa001 	eors	sl, sl, #1
   33778:	e1a07002 	mov	r7, r2
   3377c:	e1a08003 	mov	r8, r3
   33780:	e1a06001 	mov	r6, r1
   33784:	e5dd9020 	ldrb	r9, [sp, #32]
   33788:	0a00002c 	beq	33840 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0xd8>
   3378c:	ebffffdd 	bl	33708 <BusAccess::controlRequestAndTake()>
   33790:	e3500000 	cmp	r0, #0
   33794:	1a000041 	bne	338a0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x138>
   33798:	e59f4104 	ldr	r4, [pc, #260]	; 338a4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x13c>
   3379c:	e1a01006 	mov	r1, r6
   337a0:	e5943008 	ldr	r3, [r4, #8]
   337a4:	e1a00005 	mov	r0, r5
   337a8:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   337ac:	e5843008 	str	r3, [r4, #8]
   337b0:	ebfffc61 	bl	3293c <BusAccess::addrSet(unsigned int)>
   337b4:	e5942008 	ldr	r2, [r4, #8]
   337b8:	e59f30e8 	ldr	r3, [pc, #232]	; 338a8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x140>
   337bc:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   337c0:	e1823003 	orr	r3, r2, r3
   337c4:	e3580000 	cmp	r8, #0
   337c8:	e5843008 	str	r3, [r4, #8]
   337cc:	0a00002c 	beq	33884 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x11c>
   337d0:	e1a04007 	mov	r4, r7
   337d4:	e0466007 	sub	r6, r6, r7
   337d8:	ea000002 	b	337e8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x80>
   337dc:	e0443007 	sub	r3, r4, r7
   337e0:	e1530008 	cmp	r3, r8
   337e4:	2a00000d 	bcs	33820 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0xb8>
   337e8:	e4d41001 	ldrb	r1, [r4], #1
   337ec:	e1a02009 	mov	r2, r9
   337f0:	e1a00005 	mov	r0, r5
   337f4:	ebfffc59 	bl	32960 <BusAccess::byteWrite(unsigned long, BusAccess::BlockAccessType)>
   337f8:	e1a00005 	mov	r0, r5
   337fc:	ebfffbdd 	bl	32778 <BusAccess::addrLowInc()>
   33800:	e0841006 	add	r1, r4, r6
   33804:	e31100ff 	tst	r1, #255	; 0xff
   33808:	1afffff3 	bne	337dc <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x74>
   3380c:	e1a00005 	mov	r0, r5
   33810:	ebfffc49 	bl	3293c <BusAccess::addrSet(unsigned int)>
   33814:	e0443007 	sub	r3, r4, r7
   33818:	e1530008 	cmp	r3, r8
   3381c:	3afffff1 	bcc	337e8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x80>
   33820:	e59f207c 	ldr	r2, [pc, #124]	; 338a4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x13c>
   33824:	e35a0000 	cmp	sl, #0
   33828:	e5923008 	ldr	r3, [r2, #8]
   3382c:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   33830:	e5823008 	str	r3, [r2, #8]
   33834:	1a000015 	bne	33890 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x128>
   33838:	e3a00000 	mov	r0, #0
   3383c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33840:	e59f405c 	ldr	r4, [pc, #92]	; 338a4 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x13c>
   33844:	e5943008 	ldr	r3, [r4, #8]
   33848:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   3384c:	e5843008 	str	r3, [r4, #8]
   33850:	ebfffc39 	bl	3293c <BusAccess::addrSet(unsigned int)>
   33854:	e5942008 	ldr	r2, [r4, #8]
   33858:	e59f3048 	ldr	r3, [pc, #72]	; 338a8 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x140>
   3385c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   33860:	e1823003 	orr	r3, r2, r3
   33864:	e3580000 	cmp	r8, #0
   33868:	e5843008 	str	r3, [r4, #8]
   3386c:	1affffd7 	bne	337d0 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)+0x68>
   33870:	e5943008 	ldr	r3, [r4, #8]
   33874:	e1a00008 	mov	r0, r8
   33878:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   3387c:	e5843008 	str	r3, [r4, #8]
   33880:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33884:	e5943008 	ldr	r3, [r4, #8]
   33888:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   3388c:	e5843008 	str	r3, [r4, #8]
   33890:	e1a00005 	mov	r0, r5
   33894:	ebfffe75 	bl	33270 <BusAccess::controlRelease()>
   33898:	e3a00000 	mov	r0, #0
   3389c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   338a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   338a4:	20200000 	.word	0x20200000
   338a8:	00249249 	.word	0x00249249

000338ac <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>:
   338ac:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   338b0:	e5d0c1f1 	ldrb	ip, [r0, #497]	; 0x1f1
   338b4:	e24dd00c 	sub	sp, sp, #12
   338b8:	e1a0a001 	mov	sl, r1
   338bc:	e23c1001 	eors	r1, ip, #1
   338c0:	e1a05000 	mov	r5, r0
   338c4:	e58d1000 	str	r1, [sp]
   338c8:	e1a0b003 	mov	fp, r3
   338cc:	e5dd4030 	ldrb	r4, [sp, #48]	; 0x30
   338d0:	0a000004 	beq	338e8 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x3c>
   338d4:	e58d2004 	str	r2, [sp, #4]
   338d8:	ebffff8a 	bl	33708 <BusAccess::controlRequestAndTake()>
   338dc:	e3500000 	cmp	r0, #0
   338e0:	e59d2004 	ldr	r2, [sp, #4]
   338e4:	1a000044 	bne	339fc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x150>
   338e8:	e3a00040 	mov	r0, #64	; 0x40
   338ec:	e59f912c 	ldr	r9, [pc, #300]	; 33a20 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x174>
   338f0:	e58d2004 	str	r2, [sp, #4]
   338f4:	e5993008 	ldr	r3, [r9, #8]
   338f8:	e1a0100a 	mov	r1, sl
   338fc:	e20334ff 	and	r3, r3, #-16777216	; 0xff000000
   33900:	e5893008 	str	r3, [r9, #8]
   33904:	e589001c 	str	r0, [r9, #28]
   33908:	e1a00005 	mov	r0, r5
   3390c:	ebfffc0a 	bl	3293c <BusAccess::addrSet(unsigned int)>
   33910:	e59f310c 	ldr	r3, [pc, #268]	; 33a24 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x178>
   33914:	e3540001 	cmp	r4, #1
   33918:	e59f6108 	ldr	r6, [pc, #264]	; 33a28 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x17c>
   3391c:	11a06003 	movne	r6, r3
   33920:	e35b0000 	cmp	fp, #0
   33924:	e59d2004 	ldr	r2, [sp, #4]
   33928:	0a00002f 	beq	339ec <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x140>
   3392c:	e1a04002 	mov	r4, r2
   33930:	e3a08c0e 	mov	r8, #3584	; 0xe00
   33934:	e3a07801 	mov	r7, #65536	; 0x10000
   33938:	e082b00b 	add	fp, r2, fp
   3393c:	e04aa002 	sub	sl, sl, r2
   33940:	ea000001 	b	3394c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0xa0>
   33944:	e154000b 	cmp	r4, fp
   33948:	0a000027 	beq	339ec <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x140>
   3394c:	e5953000 	ldr	r3, [r5]
   33950:	e3a0000a 	mov	r0, #10
   33954:	e3530011 	cmp	r3, #17
   33958:	e3a03c02 	mov	r3, #512	; 0x200
   3395c:	e5898028 	str	r8, [r9, #40]	; 0x28
   33960:	e589301c 	str	r3, [r9, #28]
   33964:	0a000026 	beq	33a04 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x158>
   33968:	e5897028 	str	r7, [r9, #40]	; 0x28
   3396c:	eb002b80 	bl	3e774 <lowlev_cycleDelay>
   33970:	e589701c 	str	r7, [r9, #28]
   33974:	e5896028 	str	r6, [r9, #40]	; 0x28
   33978:	e3a00f7d 	mov	r0, #500	; 0x1f4
   3397c:	eb002b7c 	bl	3e774 <lowlev_cycleDelay>
   33980:	e5993034 	ldr	r3, [r9, #52]	; 0x34
   33984:	e4d42001 	ldrb	r2, [r4], #1
   33988:	e1a03a23 	lsr	r3, r3, #20
   3398c:	e6ef3073 	uxtb	r3, r3
   33990:	e1520003 	cmp	r2, r3
   33994:	0a000007 	beq	339b8 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x10c>
   33998:	e3a01000 	mov	r1, #0
   3399c:	e3a00008 	mov	r0, #8
   339a0:	eb002b46 	bl	3e6c0 <digitalWrite>
   339a4:	e3a00004 	mov	r0, #4
   339a8:	ebffe967 	bl	2df4c <microsDelay>
   339ac:	e3a01001 	mov	r1, #1
   339b0:	e3a00008 	mov	r0, #8
   339b4:	eb002b41 	bl	3e6c0 <digitalWrite>
   339b8:	e5993034 	ldr	r3, [r9, #52]	; 0x34
   339bc:	e1a00005 	mov	r0, r5
   339c0:	e1a03a23 	lsr	r3, r3, #20
   339c4:	e5443001 	strb	r3, [r4, #-1]
   339c8:	e589601c 	str	r6, [r9, #28]
   339cc:	ebfffb69 	bl	32778 <BusAccess::addrLowInc()>
   339d0:	e08a1004 	add	r1, sl, r4
   339d4:	e31100ff 	tst	r1, #255	; 0xff
   339d8:	1affffd9 	bne	33944 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x98>
   339dc:	e1a00005 	mov	r0, r5
   339e0:	ebfffbd5 	bl	3293c <BusAccess::addrSet(unsigned int)>
   339e4:	e154000b 	cmp	r4, fp
   339e8:	1affffd7 	bne	3394c <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0xa0>
   339ec:	e59d3000 	ldr	r3, [sp]
   339f0:	e3530000 	cmp	r3, #0
   339f4:	1a000005 	bne	33a10 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x164>
   339f8:	e3a00000 	mov	r0, #0
   339fc:	e28dd00c 	add	sp, sp, #12
   33a00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33a04:	eb002b5a 	bl	3e774 <lowlev_cycleDelay>
   33a08:	e5898028 	str	r8, [r9, #40]	; 0x28
   33a0c:	eaffffd8 	b	33974 <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0xc8>
   33a10:	e1a00005 	mov	r0, r5
   33a14:	ebfffe15 	bl	33270 <BusAccess::controlRelease()>
   33a18:	e3a00000 	mov	r0, #0
   33a1c:	eafffff6 	b	339fc <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)+0x150>
   33a20:	20200000 	.word	0x20200000
   33a24:	00040001 	.word	0x00040001
   33a28:	00040002 	.word	0x00040002

00033a2c <BusAccess::isrAssert(int)>:
   33a2c:	e351000b 	cmp	r1, #11
   33a30:	d0800101 	addle	r0, r0, r1, lsl #2
   33a34:	d59031f4 	ldrle	r3, [r0, #500]	; 0x1f4
   33a38:	d2833001 	addle	r3, r3, #1
   33a3c:	d58031f4 	strle	r3, [r0, #500]	; 0x1f4
   33a40:	e12fff1e 	bx	lr

00033a44 <BusAccess::isrAssertGetCount(int)>:
   33a44:	e351000b 	cmp	r1, #11
   33a48:	d281107c 	addle	r1, r1, #124	; 0x7c
   33a4c:	d0801101 	addle	r1, r0, r1, lsl #2
   33a50:	d5910004 	ldrle	r0, [r1, #4]
   33a54:	c3a00000 	movgt	r0, #0
   33a58:	e12fff1e 	bx	lr

00033a5c <BusAccess::isrValue(int, int)>:
   33a5c:	e351000b 	cmp	r1, #11
   33a60:	d281107c 	addle	r1, r1, #124	; 0x7c
   33a64:	d0801101 	addle	r1, r0, r1, lsl #2
   33a68:	d5812004 	strle	r2, [r1, #4]
   33a6c:	e12fff1e 	bx	lr

00033a70 <BusAccess::isrPeak(int, int)>:
   33a70:	e351000b 	cmp	r1, #11
   33a74:	c12fff1e 	bxgt	lr
   33a78:	e0800101 	add	r0, r0, r1, lsl #2
   33a7c:	e59031f4 	ldr	r3, [r0, #500]	; 0x1f4
   33a80:	e1530002 	cmp	r3, r2
   33a84:	b58021f4 	strlt	r2, [r0, #500]	; 0x1f4
   33a88:	e12fff1e 	bx	lr

00033a8c <BusAccess::setSignal(BR_BUS_ACTION, bool)>:
   33a8c:	e2411001 	sub	r1, r1, #1
   33a90:	e3510003 	cmp	r1, #3
   33a94:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   33a98:	ea000003 	b	33aac <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x20>
   33a9c:	00033b2c 	.word	0x00033b2c
   33aa0:	00033af4 	.word	0x00033af4
   33aa4:	00033abc 	.word	0x00033abc
   33aa8:	00033ab0 	.word	0x00033ab0
   33aac:	e12fff1e 	bx	lr
   33ab0:	e3520000 	cmp	r2, #0
   33ab4:	1a000033 	bne	33b88 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xfc>
   33ab8:	eafffdec 	b	33270 <BusAccess::controlRelease()>
   33abc:	e3520000 	cmp	r2, #0
   33ac0:	e5903000 	ldr	r3, [r0]
   33ac4:	0a000026 	beq	33b64 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xd8>
   33ac8:	e3530011 	cmp	r3, #17
   33acc:	13a02801 	movne	r2, #65536	; 0x10000
   33ad0:	13a00c0e 	movne	r0, #3584	; 0xe00
   33ad4:	13a01b01 	movne	r1, #1024	; 0x400
   33ad8:	1a00001b 	bne	33b4c <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xc0>
   33adc:	e3a01c0e 	mov	r1, #3584	; 0xe00
   33ae0:	e3a02b01 	mov	r2, #1024	; 0x400
   33ae4:	e59f30d8 	ldr	r3, [pc, #216]	; 33bc4 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33ae8:	e5831028 	str	r1, [r3, #40]	; 0x28
   33aec:	e583201c 	str	r2, [r3, #28]
   33af0:	e12fff1e 	bx	lr
   33af4:	e3520000 	cmp	r2, #0
   33af8:	e5903000 	ldr	r3, [r0]
   33afc:	0a000018 	beq	33b64 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xd8>
   33b00:	e3530011 	cmp	r3, #17
   33b04:	13a02801 	movne	r2, #65536	; 0x10000
   33b08:	13a00c0e 	movne	r0, #3584	; 0xe00
   33b0c:	13a01b03 	movne	r1, #3072	; 0xc00
   33b10:	1a00000d 	bne	33b4c <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xc0>
   33b14:	e3a01c0e 	mov	r1, #3584	; 0xe00
   33b18:	e3a02b03 	mov	r2, #3072	; 0xc00
   33b1c:	e59f30a0 	ldr	r3, [pc, #160]	; 33bc4 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33b20:	e5831028 	str	r1, [r3, #40]	; 0x28
   33b24:	e583201c 	str	r2, [r3, #28]
   33b28:	e12fff1e 	bx	lr
   33b2c:	e3520000 	cmp	r2, #0
   33b30:	e5903000 	ldr	r3, [r0]
   33b34:	0a00000a 	beq	33b64 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0xd8>
   33b38:	e3530011 	cmp	r3, #17
   33b3c:	13a02801 	movne	r2, #65536	; 0x10000
   33b40:	13a00c0e 	movne	r0, #3584	; 0xe00
   33b44:	13a01c0a 	movne	r1, #2560	; 0xa00
   33b48:	0a000017 	beq	33bac <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x120>
   33b4c:	e59f3070 	ldr	r3, [pc, #112]	; 33bc4 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33b50:	e583201c 	str	r2, [r3, #28]
   33b54:	e5830028 	str	r0, [r3, #40]	; 0x28
   33b58:	e583101c 	str	r1, [r3, #28]
   33b5c:	e5832028 	str	r2, [r3, #40]	; 0x28
   33b60:	e12fff1e 	bx	lr
   33b64:	e3530011 	cmp	r3, #17
   33b68:	03a02c0e 	moveq	r2, #3584	; 0xe00
   33b6c:	13a01801 	movne	r1, #65536	; 0x10000
   33b70:	13a02c0e 	movne	r2, #3584	; 0xe00
   33b74:	159f3048 	ldrne	r3, [pc, #72]	; 33bc4 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33b78:	059f3044 	ldreq	r3, [pc, #68]	; 33bc4 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33b7c:	1583101c 	strne	r1, [r3, #28]
   33b80:	e5832028 	str	r2, [r3, #40]	; 0x28
   33b84:	e12fff1e 	bx	lr
   33b88:	e3a0c040 	mov	ip, #64	; 0x40
   33b8c:	e59f3030 	ldr	r3, [pc, #48]	; 33bc4 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33b90:	e3a01000 	mov	r1, #0
   33b94:	e5932008 	ldr	r2, [r3, #8]
   33b98:	e3a00013 	mov	r0, #19
   33b9c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   33ba0:	e5832008 	str	r2, [r3, #8]
   33ba4:	e583c01c 	str	ip, [r3, #28]
   33ba8:	ea002ac4 	b	3e6c0 <digitalWrite>
   33bac:	e3a01c0e 	mov	r1, #3584	; 0xe00
   33bb0:	e3a02c0a 	mov	r2, #2560	; 0xa00
   33bb4:	e59f3008 	ldr	r3, [pc, #8]	; 33bc4 <BusAccess::setSignal(BR_BUS_ACTION, bool)+0x138>
   33bb8:	e5831028 	str	r1, [r3, #40]	; 0x28
   33bbc:	e583201c 	str	r2, [r3, #28]
   33bc0:	e12fff1e 	bx	lr
   33bc4:	20200000 	.word	0x20200000

00033bc8 <BusAccess::busAccessCallbackPageIn()>:
   33bc8:	e59021bc 	ldr	r2, [r0, #444]	; 0x1bc
   33bcc:	e3520000 	cmp	r2, #0
   33bd0:	d12fff1e 	bxle	lr
   33bd4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   33bd8:	e1a06000 	mov	r6, r0
   33bdc:	e1a04000 	mov	r4, r0
   33be0:	e3a05000 	mov	r5, #0
   33be4:	e3a08004 	mov	r8, #4
   33be8:	e3a07008 	mov	r7, #8
   33bec:	ea000002 	b	33bfc <BusAccess::busAccessCallbackPageIn()+0x34>
   33bf0:	e1520005 	cmp	r2, r5
   33bf4:	e284402c 	add	r4, r4, #44	; 0x2c
   33bf8:	da00000c 	ble	33c30 <BusAccess::busAccessCallbackPageIn()+0x68>
   33bfc:	e5d43004 	ldrb	r3, [r4, #4]
   33c00:	e2855001 	add	r5, r5, #1
   33c04:	e3530000 	cmp	r3, #0
   33c08:	0afffff8 	beq	33bf0 <BusAccess::busAccessCallbackPageIn()+0x28>
   33c0c:	e594300c 	ldr	r3, [r4, #12]
   33c10:	e1a02008 	mov	r2, r8
   33c14:	e5940010 	ldr	r0, [r4, #16]
   33c18:	e1a01007 	mov	r1, r7
   33c1c:	e12fff33 	blx	r3
   33c20:	e59621bc 	ldr	r2, [r6, #444]	; 0x1bc
   33c24:	e284402c 	add	r4, r4, #44	; 0x2c
   33c28:	e1520005 	cmp	r2, r5
   33c2c:	cafffff2 	bgt	33bfc <BusAccess::busAccessCallbackPageIn()+0x34>
   33c30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00033c34 <BusAccess::busPagePinSetActive(bool)>:
   33c34:	e5903000 	ldr	r3, [r0]
   33c38:	e3a00008 	mov	r0, #8
   33c3c:	e3530011 	cmp	r3, #17
   33c40:	12211001 	eorne	r1, r1, #1
   33c44:	ea002a9d 	b	3e6c0 <digitalWrite>

00033c48 <BusAccess::rawBusControlEnable(bool)>:
   33c48:	e92d4070 	push	{r4, r5, r6, lr}
   33c4c:	e1a04001 	mov	r4, r1
   33c50:	e1a05000 	mov	r5, r0
   33c54:	e2244001 	eor	r4, r4, #1
   33c58:	ebfff5dc 	bl	313d0 <BusAccess::busAccessReinit()>
   33c5c:	e5c541c0 	strb	r4, [r5, #448]	; 0x1c0
   33c60:	e8bd8070 	pop	{r4, r5, r6, pc}

00033c64 <BusAccess::rawBusControlClearWait()>:
   33c64:	e92d4010 	push	{r4, lr}
   33c68:	e3a01000 	mov	r1, #0
   33c6c:	ebfffe3d 	bl	33568 <BusAccess::waitResetFlipFlops(bool)>
   33c70:	e8bd4010 	pop	{r4, lr}
   33c74:	eafff7fe 	b	31c74 <BusAccess::waitHandleReadRelease()>

00033c78 <BusAccess::rawBusControlWaitDisable()>:
   33c78:	e59f2010 	ldr	r2, [pc, #16]	; 33c90 <BusAccess::rawBusControlWaitDisable()+0x18>
   33c7c:	e5923000 	ldr	r3, [r2]
   33c80:	e3c33b02 	bic	r3, r3, #2048	; 0x800
   33c84:	e3c33008 	bic	r3, r3, #8
   33c88:	e5823000 	str	r3, [r2]
   33c8c:	e12fff1e 	bx	lr
   33c90:	2020c000 	.word	0x2020c000

00033c94 <BusAccess::waitGenerationDisable()>:
   33c94:	eafffff7 	b	33c78 <BusAccess::rawBusControlWaitDisable()>

00033c98 <BusAccess::rawBusControlClockEnable(bool)>:
   33c98:	e3510000 	cmp	r1, #0
   33c9c:	0a000125 	beq	34138 <BusAccess::rawBusControlClockEnable(bool)+0x4a0>
   33ca0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33ca4:	e3a04004 	mov	r4, #4
   33ca8:	e5d07228 	ldrb	r7, [r0, #552]	; 0x228
   33cac:	e24dd020 	sub	sp, sp, #32
   33cb0:	e3570000 	cmp	r7, #0
   33cb4:	e1a05000 	mov	r5, r0
   33cb8:	e5804230 	str	r4, [r0, #560]	; 0x230
   33cbc:	1a00005d 	bne	33e38 <BusAccess::rawBusControlClockEnable(bool)+0x1a0>
   33cc0:	e59f6530 	ldr	r6, [pc, #1328]	; 341f8 <BusAccess::rawBusControlClockEnable(bool)+0x560>
   33cc4:	e580422c 	str	r4, [r0, #556]	; 0x22c
   33cc8:	ebffcbbf 	bl	26bcc <CLogger::Get()>
   33ccc:	e59f3528 	ldr	r3, [pc, #1320]	; 341fc <BusAccess::rawBusControlClockEnable(bool)+0x564>
   33cd0:	e58d7004 	str	r7, [sp, #4]
   33cd4:	e1a02004 	mov	r2, r4
   33cd8:	e58d6000 	str	r6, [sp]
   33cdc:	e59f151c 	ldr	r1, [pc, #1308]	; 34200 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   33ce0:	ebffcaf6 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33ce4:	e5d53228 	ldrb	r3, [r5, #552]	; 0x228
   33ce8:	e3530000 	cmp	r3, #0
   33cec:	05856224 	streq	r6, [r5, #548]	; 0x224
   33cf0:	1a00012a 	bne	341a0 <BusAccess::rawBusControlClockEnable(bool)+0x508>
   33cf4:	e59f6508 	ldr	r6, [pc, #1288]	; 34204 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   33cf8:	e59f3508 	ldr	r3, [pc, #1288]	; 34208 <BusAccess::rawBusControlClockEnable(bool)+0x570>
   33cfc:	e5962070 	ldr	r2, [r6, #112]	; 0x70
   33d00:	e0033002 	and	r3, r3, r2
   33d04:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   33d08:	e5863070 	str	r3, [r6, #112]	; 0x70
   33d0c:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   33d10:	e3730001 	cmn	r3, #1
   33d14:	0a000114 	beq	3416c <BusAccess::rawBusControlClockEnable(bool)+0x4d4>
   33d18:	e5953230 	ldr	r3, [r5, #560]	; 0x230
   33d1c:	e3530000 	cmp	r3, #0
   33d20:	0a000111 	beq	3416c <BusAccess::rawBusControlClockEnable(bool)+0x4d4>
   33d24:	e3a07000 	mov	r7, #0
   33d28:	e3a08001 	mov	r8, #1
   33d2c:	e1a04007 	mov	r4, r7
   33d30:	ea000005 	b	33d4c <BusAccess::rawBusControlClockEnable(bool)+0xb4>
   33d34:	e2844001 	add	r4, r4, #1
   33d38:	e1a00008 	mov	r0, r8
   33d3c:	ebffe882 	bl	2df4c <microsDelay>
   33d40:	e3540064 	cmp	r4, #100	; 0x64
   33d44:	e59670a0 	ldr	r7, [r6, #160]	; 0xa0
   33d48:	0a000002 	beq	33d58 <BusAccess::rawBusControlClockEnable(bool)+0xc0>
   33d4c:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   33d50:	e3130080 	tst	r3, #128	; 0x80
   33d54:	1afffff6 	bne	33d34 <BusAccess::rawBusControlClockEnable(bool)+0x9c>
   33d58:	e5d51230 	ldrb	r1, [r5, #560]	; 0x230
   33d5c:	e5d5022c 	ldrb	r0, [r5, #556]	; 0x22c
   33d60:	eb002a16 	bl	3e5c0 <pinMode>
   33d64:	e5950224 	ldr	r0, [r5, #548]	; 0x224
   33d68:	e59f249c 	ldr	r2, [pc, #1180]	; 3420c <BusAccess::rawBusControlClockEnable(bool)+0x574>
   33d6c:	e59f149c 	ldr	r1, [pc, #1180]	; 34210 <BusAccess::rawBusControlClockEnable(bool)+0x578>
   33d70:	e1500002 	cmp	r0, r2
   33d74:	e59f2498 	ldr	r2, [pc, #1176]	; 34214 <BusAccess::rawBusControlClockEnable(bool)+0x57c>
   33d78:	e59f3498 	ldr	r3, [pc, #1176]	; 34218 <BusAccess::rawBusControlClockEnable(bool)+0x580>
   33d7c:	91a03001 	movls	r3, r1
   33d80:	e59f6494 	ldr	r6, [pc, #1172]	; 3421c <BusAccess::rawBusControlClockEnable(bool)+0x584>
   33d84:	91a06002 	movls	r6, r2
   33d88:	e59f9474 	ldr	r9, [pc, #1140]	; 34204 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   33d8c:	e59f248c 	ldr	r2, [pc, #1164]	; 34220 <BusAccess::rawBusControlClockEnable(bool)+0x588>
   33d90:	e5893070 	str	r3, [r9, #112]	; 0x70
   33d94:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33d98:	e59fa484 	ldr	sl, [pc, #1156]	; 34224 <BusAccess::rawBusControlClockEnable(bool)+0x58c>
   33d9c:	91a0a002 	movls	sl, r2
   33da0:	ebffe869 	bl	2df4c <microsDelay>
   33da4:	e5951224 	ldr	r1, [r5, #548]	; 0x224
   33da8:	e1a00006 	mov	r0, r6
   33dac:	eb0027b6 	bl	3dc8c <__aeabi_uidiv>
   33db0:	e59f3470 	ldr	r3, [pc, #1136]	; 34228 <BusAccess::rawBusControlClockEnable(bool)+0x590>
   33db4:	e1500003 	cmp	r0, r3
   33db8:	31a08000 	movcc	r8, r0
   33dbc:	21a08003 	movcs	r8, r3
   33dc0:	e1a03608 	lsl	r3, r8, #12
   33dc4:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   33dc8:	e5893074 	str	r3, [r9, #116]	; 0x74
   33dcc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33dd0:	ebffe85d 	bl	2df4c <microsDelay>
   33dd4:	e3a03001 	mov	r3, #1
   33dd8:	e589a070 	str	sl, [r9, #112]	; 0x70
   33ddc:	e1a01008 	mov	r1, r8
   33de0:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   33de4:	e1a00006 	mov	r0, r6
   33de8:	eb0027a7 	bl	3dc8c <__aeabi_uidiv>
   33dec:	e1a09000 	mov	r9, r0
   33df0:	ebffcb75 	bl	26bcc <CLogger::Get()>
   33df4:	e5951230 	ldr	r1, [r5, #560]	; 0x230
   33df8:	e595222c 	ldr	r2, [r5, #556]	; 0x22c
   33dfc:	e5953224 	ldr	r3, [r5, #548]	; 0x224
   33e00:	e58d1014 	str	r1, [sp, #20]
   33e04:	e58d2010 	str	r2, [sp, #16]
   33e08:	e58d3004 	str	r3, [sp, #4]
   33e0c:	e58d800c 	str	r8, [sp, #12]
   33e10:	e58d6008 	str	r6, [sp, #8]
   33e14:	e58d9000 	str	r9, [sp]
   33e18:	e58d701c 	str	r7, [sp, #28]
   33e1c:	e58d4018 	str	r4, [sp, #24]
   33e20:	e59f3404 	ldr	r3, [pc, #1028]	; 3422c <BusAccess::rawBusControlClockEnable(bool)+0x594>
   33e24:	e3a02003 	mov	r2, #3
   33e28:	e59f13d0 	ldr	r1, [pc, #976]	; 34200 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   33e2c:	ebffcaa3 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33e30:	e28dd020 	add	sp, sp, #32
   33e34:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33e38:	e3a07000 	mov	r7, #0
   33e3c:	e59f63c0 	ldr	r6, [pc, #960]	; 34204 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   33e40:	e59f13c0 	ldr	r1, [pc, #960]	; 34208 <BusAccess::rawBusControlClockEnable(bool)+0x570>
   33e44:	e5962070 	ldr	r2, [r6, #112]	; 0x70
   33e48:	e0022001 	and	r2, r2, r1
   33e4c:	e382245a 	orr	r2, r2, #1509949440	; 0x5a000000
   33e50:	e5862070 	str	r2, [r6, #112]	; 0x70
   33e54:	e580422c 	str	r4, [r0, #556]	; 0x22c
   33e58:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   33e5c:	e5c07228 	strb	r7, [r0, #552]	; 0x228
   33e60:	e0033001 	and	r3, r3, r1
   33e64:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   33e68:	e5863070 	str	r3, [r6, #112]	; 0x70
   33e6c:	e590322c 	ldr	r3, [r0, #556]	; 0x22c
   33e70:	e3730001 	cmn	r3, #1
   33e74:	0a000004 	beq	33e8c <BusAccess::rawBusControlClockEnable(bool)+0x1f4>
   33e78:	e5903230 	ldr	r3, [r0, #560]	; 0x230
   33e7c:	e1530007 	cmp	r3, r7
   33e80:	11a04007 	movne	r4, r7
   33e84:	13a08001 	movne	r8, #1
   33e88:	1a000011 	bne	33ed4 <BusAccess::rawBusControlClockEnable(bool)+0x23c>
   33e8c:	e3a03000 	mov	r3, #0
   33e90:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   33e94:	ebffcb4c 	bl	26bcc <CLogger::Get()>
   33e98:	e5952230 	ldr	r2, [r5, #560]	; 0x230
   33e9c:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   33ea0:	e59f1358 	ldr	r1, [pc, #856]	; 34200 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   33ea4:	e58d2004 	str	r2, [sp, #4]
   33ea8:	e58d3000 	str	r3, [sp]
   33eac:	e3a02001 	mov	r2, #1
   33eb0:	e59f3378 	ldr	r3, [pc, #888]	; 34230 <BusAccess::rawBusControlClockEnable(bool)+0x598>
   33eb4:	ebffca81 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33eb8:	ea00003d 	b	33fb4 <BusAccess::rawBusControlClockEnable(bool)+0x31c>
   33ebc:	e2844001 	add	r4, r4, #1
   33ec0:	e1a00008 	mov	r0, r8
   33ec4:	ebffe820 	bl	2df4c <microsDelay>
   33ec8:	e3540064 	cmp	r4, #100	; 0x64
   33ecc:	e59670a0 	ldr	r7, [r6, #160]	; 0xa0
   33ed0:	0a000002 	beq	33ee0 <BusAccess::rawBusControlClockEnable(bool)+0x248>
   33ed4:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   33ed8:	e3130080 	tst	r3, #128	; 0x80
   33edc:	1afffff6 	bne	33ebc <BusAccess::rawBusControlClockEnable(bool)+0x224>
   33ee0:	e5d51230 	ldrb	r1, [r5, #560]	; 0x230
   33ee4:	e5d5022c 	ldrb	r0, [r5, #556]	; 0x22c
   33ee8:	eb0029b4 	bl	3e5c0 <pinMode>
   33eec:	e5950224 	ldr	r0, [r5, #548]	; 0x224
   33ef0:	e59f2314 	ldr	r2, [pc, #788]	; 3420c <BusAccess::rawBusControlClockEnable(bool)+0x574>
   33ef4:	e59f131c 	ldr	r1, [pc, #796]	; 34218 <BusAccess::rawBusControlClockEnable(bool)+0x580>
   33ef8:	e1500002 	cmp	r0, r2
   33efc:	e59f2318 	ldr	r2, [pc, #792]	; 3421c <BusAccess::rawBusControlClockEnable(bool)+0x584>
   33f00:	e59f3308 	ldr	r3, [pc, #776]	; 34210 <BusAccess::rawBusControlClockEnable(bool)+0x578>
   33f04:	81a03001 	movhi	r3, r1
   33f08:	e59f8304 	ldr	r8, [pc, #772]	; 34214 <BusAccess::rawBusControlClockEnable(bool)+0x57c>
   33f0c:	81a08002 	movhi	r8, r2
   33f10:	e59fa2ec 	ldr	sl, [pc, #748]	; 34204 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   33f14:	e59f2308 	ldr	r2, [pc, #776]	; 34224 <BusAccess::rawBusControlClockEnable(bool)+0x58c>
   33f18:	e58a3070 	str	r3, [sl, #112]	; 0x70
   33f1c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33f20:	e59f92f8 	ldr	r9, [pc, #760]	; 34220 <BusAccess::rawBusControlClockEnable(bool)+0x588>
   33f24:	81a09002 	movhi	r9, r2
   33f28:	ebffe807 	bl	2df4c <microsDelay>
   33f2c:	e5951224 	ldr	r1, [r5, #548]	; 0x224
   33f30:	e1a00008 	mov	r0, r8
   33f34:	eb002754 	bl	3dc8c <__aeabi_uidiv>
   33f38:	e59f62e8 	ldr	r6, [pc, #744]	; 34228 <BusAccess::rawBusControlClockEnable(bool)+0x590>
   33f3c:	e1500006 	cmp	r0, r6
   33f40:	31a06000 	movcc	r6, r0
   33f44:	e1a03606 	lsl	r3, r6, #12
   33f48:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   33f4c:	e58a3074 	str	r3, [sl, #116]	; 0x74
   33f50:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   33f54:	ebffe7fc 	bl	2df4c <microsDelay>
   33f58:	e3a03001 	mov	r3, #1
   33f5c:	e58a9070 	str	r9, [sl, #112]	; 0x70
   33f60:	e1a01006 	mov	r1, r6
   33f64:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   33f68:	e1a00008 	mov	r0, r8
   33f6c:	eb002746 	bl	3dc8c <__aeabi_uidiv>
   33f70:	e1a09000 	mov	r9, r0
   33f74:	ebffcb14 	bl	26bcc <CLogger::Get()>
   33f78:	e5951230 	ldr	r1, [r5, #560]	; 0x230
   33f7c:	e595222c 	ldr	r2, [r5, #556]	; 0x22c
   33f80:	e58d600c 	str	r6, [sp, #12]
   33f84:	e5953224 	ldr	r3, [r5, #548]	; 0x224
   33f88:	e58d1014 	str	r1, [sp, #20]
   33f8c:	e58d2010 	str	r2, [sp, #16]
   33f90:	e58d3004 	str	r3, [sp, #4]
   33f94:	e58d8008 	str	r8, [sp, #8]
   33f98:	e58d9000 	str	r9, [sp]
   33f9c:	e58d701c 	str	r7, [sp, #28]
   33fa0:	e58d4018 	str	r4, [sp, #24]
   33fa4:	e59f3280 	ldr	r3, [pc, #640]	; 3422c <BusAccess::rawBusControlClockEnable(bool)+0x594>
   33fa8:	e3a02003 	mov	r2, #3
   33fac:	e59f124c 	ldr	r1, [pc, #588]	; 34200 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   33fb0:	ebffca42 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33fb4:	e5d57228 	ldrb	r7, [r5, #552]	; 0x228
   33fb8:	ebffcb03 	bl	26bcc <CLogger::Get()>
   33fbc:	e59f3234 	ldr	r3, [pc, #564]	; 341f8 <BusAccess::rawBusControlClockEnable(bool)+0x560>
   33fc0:	e3a02004 	mov	r2, #4
   33fc4:	e88d0088 	stm	sp, {r3, r7}
   33fc8:	e59f1230 	ldr	r1, [pc, #560]	; 34200 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   33fcc:	e59f3228 	ldr	r3, [pc, #552]	; 341fc <BusAccess::rawBusControlClockEnable(bool)+0x564>
   33fd0:	ebffca3a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   33fd4:	e5d53228 	ldrb	r3, [r5, #552]	; 0x228
   33fd8:	e3530000 	cmp	r3, #0
   33fdc:	1a00006f 	bne	341a0 <BusAccess::rawBusControlClockEnable(bool)+0x508>
   33fe0:	e59f3210 	ldr	r3, [pc, #528]	; 341f8 <BusAccess::rawBusControlClockEnable(bool)+0x560>
   33fe4:	e3570000 	cmp	r7, #0
   33fe8:	e5853224 	str	r3, [r5, #548]	; 0x224
   33fec:	0affff40 	beq	33cf4 <BusAccess::rawBusControlClockEnable(bool)+0x5c>
   33ff0:	e59f620c 	ldr	r6, [pc, #524]	; 34204 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   33ff4:	e59f320c 	ldr	r3, [pc, #524]	; 34208 <BusAccess::rawBusControlClockEnable(bool)+0x570>
   33ff8:	e5962070 	ldr	r2, [r6, #112]	; 0x70
   33ffc:	e0033002 	and	r3, r3, r2
   34000:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   34004:	e5863070 	str	r3, [r6, #112]	; 0x70
   34008:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   3400c:	e3730001 	cmn	r3, #1
   34010:	0a00006b 	beq	341c4 <BusAccess::rawBusControlClockEnable(bool)+0x52c>
   34014:	e5953230 	ldr	r3, [r5, #560]	; 0x230
   34018:	e3530000 	cmp	r3, #0
   3401c:	0a000068 	beq	341c4 <BusAccess::rawBusControlClockEnable(bool)+0x52c>
   34020:	e3a08000 	mov	r8, #0
   34024:	e3a07001 	mov	r7, #1
   34028:	e1a04008 	mov	r4, r8
   3402c:	ea000005 	b	34048 <BusAccess::rawBusControlClockEnable(bool)+0x3b0>
   34030:	e2844001 	add	r4, r4, #1
   34034:	e1a00007 	mov	r0, r7
   34038:	ebffe7c3 	bl	2df4c <microsDelay>
   3403c:	e3540064 	cmp	r4, #100	; 0x64
   34040:	e59680a0 	ldr	r8, [r6, #160]	; 0xa0
   34044:	0a000002 	beq	34054 <BusAccess::rawBusControlClockEnable(bool)+0x3bc>
   34048:	e5963070 	ldr	r3, [r6, #112]	; 0x70
   3404c:	e3130080 	tst	r3, #128	; 0x80
   34050:	1afffff6 	bne	34030 <BusAccess::rawBusControlClockEnable(bool)+0x398>
   34054:	e5d51230 	ldrb	r1, [r5, #560]	; 0x230
   34058:	e5d5022c 	ldrb	r0, [r5, #556]	; 0x22c
   3405c:	eb002957 	bl	3e5c0 <pinMode>
   34060:	e5950224 	ldr	r0, [r5, #548]	; 0x224
   34064:	e59f21a0 	ldr	r2, [pc, #416]	; 3420c <BusAccess::rawBusControlClockEnable(bool)+0x574>
   34068:	e59f11a0 	ldr	r1, [pc, #416]	; 34210 <BusAccess::rawBusControlClockEnable(bool)+0x578>
   3406c:	e1500002 	cmp	r0, r2
   34070:	e59f219c 	ldr	r2, [pc, #412]	; 34214 <BusAccess::rawBusControlClockEnable(bool)+0x57c>
   34074:	e59f319c 	ldr	r3, [pc, #412]	; 34218 <BusAccess::rawBusControlClockEnable(bool)+0x580>
   34078:	91a03001 	movls	r3, r1
   3407c:	e59f7198 	ldr	r7, [pc, #408]	; 3421c <BusAccess::rawBusControlClockEnable(bool)+0x584>
   34080:	91a07002 	movls	r7, r2
   34084:	e59f9178 	ldr	r9, [pc, #376]	; 34204 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   34088:	e59f2190 	ldr	r2, [pc, #400]	; 34220 <BusAccess::rawBusControlClockEnable(bool)+0x588>
   3408c:	e5893070 	str	r3, [r9, #112]	; 0x70
   34090:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   34094:	e59fa188 	ldr	sl, [pc, #392]	; 34224 <BusAccess::rawBusControlClockEnable(bool)+0x58c>
   34098:	91a0a002 	movls	sl, r2
   3409c:	ebffe7aa 	bl	2df4c <microsDelay>
   340a0:	e5951224 	ldr	r1, [r5, #548]	; 0x224
   340a4:	e1a00007 	mov	r0, r7
   340a8:	eb0026f7 	bl	3dc8c <__aeabi_uidiv>
   340ac:	e59f6174 	ldr	r6, [pc, #372]	; 34228 <BusAccess::rawBusControlClockEnable(bool)+0x590>
   340b0:	e1500006 	cmp	r0, r6
   340b4:	31a06000 	movcc	r6, r0
   340b8:	e1a03606 	lsl	r3, r6, #12
   340bc:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   340c0:	e5893074 	str	r3, [r9, #116]	; 0x74
   340c4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   340c8:	ebffe79f 	bl	2df4c <microsDelay>
   340cc:	e3a03001 	mov	r3, #1
   340d0:	e589a070 	str	sl, [r9, #112]	; 0x70
   340d4:	e1a01006 	mov	r1, r6
   340d8:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   340dc:	e1a00007 	mov	r0, r7
   340e0:	eb0026e9 	bl	3dc8c <__aeabi_uidiv>
   340e4:	e1a09000 	mov	r9, r0
   340e8:	ebffcab7 	bl	26bcc <CLogger::Get()>
   340ec:	e5951230 	ldr	r1, [r5, #560]	; 0x230
   340f0:	e595222c 	ldr	r2, [r5, #556]	; 0x22c
   340f4:	e58d600c 	str	r6, [sp, #12]
   340f8:	e5953224 	ldr	r3, [r5, #548]	; 0x224
   340fc:	e58d1014 	str	r1, [sp, #20]
   34100:	e58d2010 	str	r2, [sp, #16]
   34104:	e58d3004 	str	r3, [sp, #4]
   34108:	e58d7008 	str	r7, [sp, #8]
   3410c:	e59f3118 	ldr	r3, [pc, #280]	; 3422c <BusAccess::rawBusControlClockEnable(bool)+0x594>
   34110:	e58d9000 	str	r9, [sp]
   34114:	e58d801c 	str	r8, [sp, #28]
   34118:	e58d4018 	str	r4, [sp, #24]
   3411c:	e3a02003 	mov	r2, #3
   34120:	e59f10d8 	ldr	r1, [pc, #216]	; 34200 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   34124:	ebffc9e5 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34128:	e5d53228 	ldrb	r3, [r5, #552]	; 0x228
   3412c:	e3530000 	cmp	r3, #0
   34130:	0afffeef 	beq	33cf4 <BusAccess::rawBusControlClockEnable(bool)+0x5c>
   34134:	eaffff3d 	b	33e30 <BusAccess::rawBusControlClockEnable(bool)+0x198>
   34138:	e5d03228 	ldrb	r3, [r0, #552]	; 0x228
   3413c:	e3530000 	cmp	r3, #0
   34140:	0a000006 	beq	34160 <BusAccess::rawBusControlClockEnable(bool)+0x4c8>
   34144:	e59f20b8 	ldr	r2, [pc, #184]	; 34204 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   34148:	e59f30b8 	ldr	r3, [pc, #184]	; 34208 <BusAccess::rawBusControlClockEnable(bool)+0x570>
   3414c:	e592c070 	ldr	ip, [r2, #112]	; 0x70
   34150:	e003300c 	and	r3, r3, ip
   34154:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   34158:	e5823070 	str	r3, [r2, #112]	; 0x70
   3415c:	e5c01228 	strb	r1, [r0, #552]	; 0x228
   34160:	e3a01001 	mov	r1, #1
   34164:	e3a00004 	mov	r0, #4
   34168:	ea002914 	b	3e5c0 <pinMode>
   3416c:	e3a03000 	mov	r3, #0
   34170:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   34174:	ebffca94 	bl	26bcc <CLogger::Get()>
   34178:	e5952230 	ldr	r2, [r5, #560]	; 0x230
   3417c:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   34180:	e59f1078 	ldr	r1, [pc, #120]	; 34200 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   34184:	e58d2004 	str	r2, [sp, #4]
   34188:	e58d3000 	str	r3, [sp]
   3418c:	e3a02001 	mov	r2, #1
   34190:	e59f3098 	ldr	r3, [pc, #152]	; 34230 <BusAccess::rawBusControlClockEnable(bool)+0x598>
   34194:	ebffc9c9 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34198:	e28dd020 	add	sp, sp, #32
   3419c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   341a0:	e3a01000 	mov	r1, #0
   341a4:	e59f2058 	ldr	r2, [pc, #88]	; 34204 <BusAccess::rawBusControlClockEnable(bool)+0x56c>
   341a8:	e59f3058 	ldr	r3, [pc, #88]	; 34208 <BusAccess::rawBusControlClockEnable(bool)+0x570>
   341ac:	e5920070 	ldr	r0, [r2, #112]	; 0x70
   341b0:	e0033000 	and	r3, r3, r0
   341b4:	e383345a 	orr	r3, r3, #1509949440	; 0x5a000000
   341b8:	e5823070 	str	r3, [r2, #112]	; 0x70
   341bc:	e5c51228 	strb	r1, [r5, #552]	; 0x228
   341c0:	eaffff86 	b	33fe0 <BusAccess::rawBusControlClockEnable(bool)+0x348>
   341c4:	e3a03000 	mov	r3, #0
   341c8:	e5c53228 	strb	r3, [r5, #552]	; 0x228
   341cc:	ebffca7e 	bl	26bcc <CLogger::Get()>
   341d0:	e5952230 	ldr	r2, [r5, #560]	; 0x230
   341d4:	e595322c 	ldr	r3, [r5, #556]	; 0x22c
   341d8:	e59f1020 	ldr	r1, [pc, #32]	; 34200 <BusAccess::rawBusControlClockEnable(bool)+0x568>
   341dc:	e58d2004 	str	r2, [sp, #4]
   341e0:	e58d3000 	str	r3, [sp]
   341e4:	e3a02001 	mov	r2, #1
   341e8:	e59f3040 	ldr	r3, [pc, #64]	; 34230 <BusAccess::rawBusControlClockEnable(bool)+0x598>
   341ec:	ebffc9b3 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   341f0:	e5d53228 	ldrb	r3, [r5, #552]	; 0x228
   341f4:	eaffffcc 	b	3412c <BusAccess::rawBusControlClockEnable(bool)+0x494>
   341f8:	000f4240 	.word	0x000f4240
   341fc:	0004689c 	.word	0x0004689c
   34200:	0004683c 	.word	0x0004683c
   34204:	20101000 	.word	0x20101000
   34208:	00000f0f 	.word	0x00000f0f
   3420c:	0003d08f 	.word	0x0003d08f
   34210:	5a000001 	.word	0x5a000001
   34214:	0124f800 	.word	0x0124f800
   34218:	5a000006 	.word	0x5a000006
   3421c:	1dcd6500 	.word	0x1dcd6500
   34220:	5a000011 	.word	0x5a000011
   34224:	5a000016 	.word	0x5a000016
   34228:	00000fff 	.word	0x00000fff
   3422c:	00046848 	.word	0x00046848
   34230:	0004681c 	.word	0x0004681c

00034234 <BusAccess::rawBusControlTakeBus()>:
   34234:	e92d4010 	push	{r4, lr}
   34238:	ebfffd32 	bl	33708 <BusAccess::controlRequestAndTake()>
   3423c:	e16f0f10 	clz	r0, r0
   34240:	e1a002a0 	lsr	r0, r0, #5
   34244:	e8bd8010 	pop	{r4, pc}

00034248 <BusAccess::rawBusControlReleaseBus()>:
   34248:	eafffc08 	b	33270 <BusAccess::controlRelease()>

0003424c <BusAccess::rawBusControlSetAddress(unsigned long)>:
   3424c:	eafff9ba 	b	3293c <BusAccess::addrSet(unsigned int)>

00034250 <BusAccess::rawBusControlSetData(unsigned long)>:
   34250:	e1a01a01 	lsl	r1, r1, #20
   34254:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   34258:	e1e03001 	mvn	r3, r1
   3425c:	e92d4070 	push	{r4, r5, r6, lr}
   34260:	e3a05d39 	mov	r5, #3648	; 0xe40
   34264:	e3a0ec02 	mov	lr, #512	; 0x200
   34268:	e59f4064 	ldr	r4, [pc, #100]	; 342d4 <BusAccess::rawBusControlSetData(unsigned long)+0x84>
   3426c:	e59f2064 	ldr	r2, [pc, #100]	; 342d8 <BusAccess::rawBusControlSetData(unsigned long)+0x88>
   34270:	e594c008 	ldr	ip, [r4, #8]
   34274:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
   34278:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   3427c:	e18c2002 	orr	r2, ip, r2
   34280:	e5842008 	str	r2, [r4, #8]
   34284:	e584101c 	str	r1, [r4, #28]
   34288:	e5843028 	str	r3, [r4, #40]	; 0x28
   3428c:	e5845028 	str	r5, [r4, #40]	; 0x28
   34290:	e584e01c 	str	lr, [r4, #28]
   34294:	e5903000 	ldr	r3, [r0]
   34298:	e3530011 	cmp	r3, #17
   3429c:	0a000007 	beq	342c0 <BusAccess::rawBusControlSetData(unsigned long)+0x70>
   342a0:	e3a05801 	mov	r5, #65536	; 0x10000
   342a4:	e3a0000a 	mov	r0, #10
   342a8:	e5845028 	str	r5, [r4, #40]	; 0x28
   342ac:	eb002930 	bl	3e774 <lowlev_cycleDelay>
   342b0:	e3a03c0e 	mov	r3, #3584	; 0xe00
   342b4:	e584501c 	str	r5, [r4, #28]
   342b8:	e5843028 	str	r3, [r4, #40]	; 0x28
   342bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   342c0:	e3a0000a 	mov	r0, #10
   342c4:	eb00292a 	bl	3e774 <lowlev_cycleDelay>
   342c8:	e3a03c0e 	mov	r3, #3584	; 0xe00
   342cc:	e5843028 	str	r3, [r4, #40]	; 0x28
   342d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   342d4:	20200000 	.word	0x20200000
   342d8:	00249249 	.word	0x00249249

000342dc <BusAccess::rawBusControlReadRaw()>:
   342dc:	e59f3004 	ldr	r3, [pc, #4]	; 342e8 <BusAccess::rawBusControlReadRaw()+0xc>
   342e0:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   342e4:	e12fff1e 	bx	lr
   342e8:	20200000 	.word	0x20200000

000342ec <BusAccess::rawBusControlReadCtrl()>:
   342ec:	eafff82d 	b	323a8 <BusAccess::controlBusRead()>

000342f0 <BusAccess::rawBusControlReadAll(unsigned long&, unsigned long&, unsigned long&)>:
   342f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   342f4:	e1a06001 	mov	r6, r1
   342f8:	e1a05002 	mov	r5, r2
   342fc:	e1a07003 	mov	r7, r3
   34300:	e1a04000 	mov	r4, r0
   34304:	ebfff827 	bl	323a8 <BusAccess::controlBusRead()>
   34308:	e1a02007 	mov	r2, r7
   3430c:	e5860000 	str	r0, [r6]
   34310:	e1a01005 	mov	r1, r5
   34314:	e1a00004 	mov	r0, r4
   34318:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3431c:	eafff86e 	b	324dc <BusAccess::addrAndDataBusRead(unsigned long&, unsigned long&)>

00034320 <BusAccess::rawBusControlSetPin(unsigned long, bool)>:
   34320:	e6ef0071 	uxtb	r0, r1
   34324:	e1a01002 	mov	r1, r2
   34328:	ea0028e4 	b	3e6c0 <digitalWrite>

0003432c <BusAccess::rawBusControlGetPin(unsigned long)>:
   3432c:	e92d4010 	push	{r4, lr}
   34330:	e6ef0071 	uxtb	r0, r1
   34334:	eb0028f7 	bl	3e718 <digitalRead>
   34338:	e2900000 	adds	r0, r0, #0
   3433c:	13a00001 	movne	r0, #1
   34340:	e8bd8010 	pop	{r4, pc}

00034344 <BusAccess::rawBusControlReadPIB()>:
   34344:	e59f3018 	ldr	r3, [pc, #24]	; 34364 <BusAccess::rawBusControlReadPIB()+0x20>
   34348:	e5932008 	ldr	r2, [r3, #8]
   3434c:	e20224ff 	and	r2, r2, #-16777216	; 0xff000000
   34350:	e5832008 	str	r2, [r3, #8]
   34354:	e5930034 	ldr	r0, [r3, #52]	; 0x34
   34358:	e1a00a20 	lsr	r0, r0, #20
   3435c:	e6ef0070 	uxtb	r0, r0
   34360:	e12fff1e 	bx	lr
   34364:	20200000 	.word	0x20200000

00034368 <BusAccess::rawBusControlWritePIB(unsigned long)>:
   34368:	e1a01a01 	lsl	r1, r1, #20
   3436c:	e20116ff 	and	r1, r1, #267386880	; 0xff00000
   34370:	e1e02001 	mvn	r2, r1
   34374:	e59f3020 	ldr	r3, [pc, #32]	; 3439c <BusAccess::rawBusControlWritePIB(unsigned long)+0x34>
   34378:	e59f0020 	ldr	r0, [pc, #32]	; 343a0 <BusAccess::rawBusControlWritePIB(unsigned long)+0x38>
   3437c:	e593c008 	ldr	ip, [r3, #8]
   34380:	e20226ff 	and	r2, r2, #267386880	; 0xff00000
   34384:	e20cc4ff 	and	ip, ip, #-16777216	; 0xff000000
   34388:	e18c0000 	orr	r0, ip, r0
   3438c:	e5830008 	str	r0, [r3, #8]
   34390:	e583101c 	str	r1, [r3, #28]
   34394:	e5832028 	str	r2, [r3, #40]	; 0x28
   34398:	e12fff1e 	bx	lr
   3439c:	20200000 	.word	0x20200000
   343a0:	00249249 	.word	0x00249249

000343a4 <BusAccess::rawBusControlMuxSet(unsigned long)>:
   343a4:	e5903000 	ldr	r3, [r0]
   343a8:	e3530011 	cmp	r3, #17
   343ac:	0a000008 	beq	343d4 <BusAccess::rawBusControlMuxSet(unsigned long)+0x30>
   343b0:	e3a02801 	mov	r2, #65536	; 0x10000
   343b4:	e3a00c0e 	mov	r0, #3584	; 0xe00
   343b8:	e59f302c 	ldr	r3, [pc, #44]	; 343ec <BusAccess::rawBusControlMuxSet(unsigned long)+0x48>
   343bc:	e1a01481 	lsl	r1, r1, #9
   343c0:	e583201c 	str	r2, [r3, #28]
   343c4:	e5830028 	str	r0, [r3, #40]	; 0x28
   343c8:	e583101c 	str	r1, [r3, #28]
   343cc:	e5832028 	str	r2, [r3, #40]	; 0x28
   343d0:	e12fff1e 	bx	lr
   343d4:	e3a02c0e 	mov	r2, #3584	; 0xe00
   343d8:	e59f300c 	ldr	r3, [pc, #12]	; 343ec <BusAccess::rawBusControlMuxSet(unsigned long)+0x48>
   343dc:	e1a01481 	lsl	r1, r1, #9
   343e0:	e5832028 	str	r2, [r3, #40]	; 0x28
   343e4:	e583101c 	str	r1, [r3, #28]
   343e8:	e12fff1e 	bx	lr
   343ec:	20200000 	.word	0x20200000

000343f0 <BusAccess::rawBusControlMuxClear()>:
   343f0:	e5903000 	ldr	r3, [r0]
   343f4:	e3530011 	cmp	r3, #17
   343f8:	03a02c0e 	moveq	r2, #3584	; 0xe00
   343fc:	13a01801 	movne	r1, #65536	; 0x10000
   34400:	13a02c0e 	movne	r2, #3584	; 0xe00
   34404:	159f300c 	ldrne	r3, [pc, #12]	; 34418 <BusAccess::rawBusControlMuxClear()+0x28>
   34408:	059f3008 	ldreq	r3, [pc, #8]	; 34418 <BusAccess::rawBusControlMuxClear()+0x28>
   3440c:	1583101c 	strne	r1, [r3, #28]
   34410:	e5832028 	str	r2, [r3, #40]	; 0x28
   34414:	e12fff1e 	bx	lr
   34418:	20200000 	.word	0x20200000

0003441c <BusAccess::formatCtrlBus(unsigned long, char*, int)>:
   3441c:	e3530013 	cmp	r3, #19
   34420:	d12fff1e 	bxle	lr
   34424:	e1a0c001 	mov	ip, r1
   34428:	e31c0004 	tst	ip, #4
   3442c:	e1a01003 	mov	r1, r3
   34430:	13a0304d 	movne	r3, #77	; 0x4d
   34434:	03a0302e 	moveq	r3, #46	; 0x2e
   34438:	e31c0008 	tst	ip, #8
   3443c:	e92d4030 	push	{r4, r5, lr}
   34440:	13a05049 	movne	r5, #73	; 0x49
   34444:	03a0502e 	moveq	r5, #46	; 0x2e
   34448:	e31c0001 	tst	ip, #1
   3444c:	13a04052 	movne	r4, #82	; 0x52
   34450:	03a0402e 	moveq	r4, #46	; 0x2e
   34454:	e31c0002 	tst	ip, #2
   34458:	13a0e057 	movne	lr, #87	; 0x57
   3445c:	03a0e02e 	moveq	lr, #46	; 0x2e
   34460:	e31c0010 	tst	ip, #16
   34464:	e1a00002 	mov	r0, r2
   34468:	13a02031 	movne	r2, #49	; 0x31
   3446c:	03a0202e 	moveq	r2, #46	; 0x2e
   34470:	e24dd014 	sub	sp, sp, #20
   34474:	e58d200c 	str	r2, [sp, #12]
   34478:	e58d5000 	str	r5, [sp]
   3447c:	e98d4010 	stmib	sp, {r4, lr}
   34480:	e59f2008 	ldr	r2, [pc, #8]	; 34490 <BusAccess::formatCtrlBus(unsigned long, char*, int)+0x74>
   34484:	ebffe75a 	bl	2e1f4 <snprintf>
   34488:	e28dd014 	add	sp, sp, #20
   3448c:	e8bd8030 	pop	{r4, r5, pc}
   34490:	00046900 	.word	0x00046900

00034494 <TargetProgrammer::TargetProgrammer()>:
   34494:	e3a02000 	mov	r2, #0
   34498:	e2803601 	add	r3, r0, #1048576	; 0x100000
   3449c:	e58320c4 	str	r2, [r3, #196]	; 0xc4
   344a0:	e58320c0 	str	r2, [r3, #192]	; 0xc0
   344a4:	e58320bc 	str	r2, [r3, #188]	; 0xbc
   344a8:	e58320b8 	str	r2, [r3, #184]	; 0xb8
   344ac:	e58320b4 	str	r2, [r3, #180]	; 0xb4
   344b0:	e58320b0 	str	r2, [r3, #176]	; 0xb0
   344b4:	e58320ac 	str	r2, [r3, #172]	; 0xac
   344b8:	e58320a8 	str	r2, [r3, #168]	; 0xa8
   344bc:	e58320d8 	str	r2, [r3, #216]	; 0xd8
   344c0:	e58320d4 	str	r2, [r3, #212]	; 0xd4
   344c4:	e58320d0 	str	r2, [r3, #208]	; 0xd0
   344c8:	e58320cc 	str	r2, [r3, #204]	; 0xcc
   344cc:	e58320c8 	str	r2, [r3, #200]	; 0xc8
   344d0:	e58320ec 	str	r2, [r3, #236]	; 0xec
   344d4:	e58320e8 	str	r2, [r3, #232]	; 0xe8
   344d8:	e58320e4 	str	r2, [r3, #228]	; 0xe4
   344dc:	e58320e0 	str	r2, [r3, #224]	; 0xe0
   344e0:	e58320dc 	str	r2, [r3, #220]	; 0xdc
   344e4:	e58320a0 	str	r2, [r3, #160]	; 0xa0
   344e8:	e5c320a4 	strb	r2, [r3, #164]	; 0xa4
   344ec:	e12fff1e 	bx	lr

000344f0 <TargetProgrammer::clear()>:
   344f0:	e3a03000 	mov	r3, #0
   344f4:	e2802601 	add	r2, r0, #1048576	; 0x100000
   344f8:	e5c230a4 	strb	r3, [r2, #164]	; 0xa4
   344fc:	e58230a0 	str	r3, [r2, #160]	; 0xa0
   34500:	e1a01003 	mov	r1, r3
   34504:	e2823004 	add	r3, r2, #4
   34508:	e28220a4 	add	r2, r2, #164	; 0xa4
   3450c:	e4831008 	str	r1, [r3], #8
   34510:	e1530002 	cmp	r3, r2
   34514:	1afffffc 	bne	3450c <TargetProgrammer::clear()+0x1c>
   34518:	e3a01000 	mov	r1, #0
   3451c:	e240237f 	sub	r2, r0, #-67108863	; 0xfc000001
   34520:	e242263f 	sub	r2, r2, #66060288	; 0x3f00000
   34524:	e2403001 	sub	r3, r0, #1
   34528:	e5e31001 	strb	r1, [r3, #1]!
   3452c:	e1520003 	cmp	r2, r3
   34530:	1afffffc 	bne	34528 <TargetProgrammer::clear()+0x38>
   34534:	e12fff1e 	bx	lr

00034538 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>:
   34538:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3453c:	e2807601 	add	r7, r0, #1048576	; 0x100000
   34540:	e59760a0 	ldr	r6, [r7, #160]	; 0xa0
   34544:	e3560000 	cmp	r6, #0
   34548:	da000012 	ble	34598 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x60>
   3454c:	e5975004 	ldr	r5, [r7, #4]
   34550:	e597c000 	ldr	ip, [r7]
   34554:	e085c00c 	add	ip, r5, ip
   34558:	e151000c 	cmp	r1, ip
   3455c:	13a04000 	movne	r4, #0
   34560:	1287c008 	addne	ip, r7, #8
   34564:	1a000006 	bne	34584 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x4c>
   34568:	ea00001b 	b	345dc <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xa4>
   3456c:	e59c5004 	ldr	r5, [ip, #4]
   34570:	e59ce000 	ldr	lr, [ip]
   34574:	e28cc008 	add	ip, ip, #8
   34578:	e085e00e 	add	lr, r5, lr
   3457c:	e15e0001 	cmp	lr, r1
   34580:	0a000016 	beq	345e0 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xa8>
   34584:	e2844001 	add	r4, r4, #1
   34588:	e1540006 	cmp	r4, r6
   3458c:	1afffff6 	bne	3456c <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x34>
   34590:	e3540013 	cmp	r4, #19
   34594:	ca000017 	bgt	345f8 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xc0>
   34598:	e080c186 	add	ip, r0, r6, lsl #3
   3459c:	e28cc601 	add	ip, ip, #1048576	; 0x100000
   345a0:	e2866001 	add	r6, r6, #1
   345a4:	e88c000a 	stm	ip, {r1, r3}
   345a8:	e58760a0 	str	r6, [r7, #160]	; 0xa0
   345ac:	e3530000 	cmp	r3, #0
   345b0:	159fc058 	ldrne	ip, [pc, #88]	; 34610 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xd8>
   345b4:	10813003 	addne	r3, r1, r3
   345b8:	0a00000d 	beq	345f4 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xbc>
   345bc:	e151000c 	cmp	r1, ip
   345c0:	95d2e000 	ldrbls	lr, [r2]
   345c4:	e2822001 	add	r2, r2, #1
   345c8:	97c0e001 	strbls	lr, [r0, r1]
   345cc:	e2811001 	add	r1, r1, #1
   345d0:	e1510003 	cmp	r1, r3
   345d4:	1afffff8 	bne	345bc <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x84>
   345d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   345dc:	e3a04000 	mov	r4, #0
   345e0:	e2844802 	add	r4, r4, #131072	; 0x20000
   345e4:	e0804184 	add	r4, r0, r4, lsl #3
   345e8:	e0835005 	add	r5, r3, r5
   345ec:	e5845004 	str	r5, [r4, #4]
   345f0:	eaffffed 	b	345ac <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0x74>
   345f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   345f8:	ebffc973 	bl	26bcc <CLogger::Get()>
   345fc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   34600:	e59f300c 	ldr	r3, [pc, #12]	; 34614 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xdc>
   34604:	e3a02004 	mov	r2, #4
   34608:	e59f1008 	ldr	r1, [pc, #8]	; 34618 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)+0xe0>
   3460c:	eaffc8ab 	b	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34610:	000fffff 	.word	0x000fffff
   34614:	00046920 	.word	0x00046920
   34618:	0004690c 	.word	0x0004690c

0003461c <TargetProgrammer::addMemoryBlockStatic(unsigned long, unsigned char const*, unsigned long, void*)>:
   3461c:	e253c000 	subs	ip, r3, #0
   34620:	012fff1e 	bxeq	lr
   34624:	e1a03002 	mov	r3, r2
   34628:	e1a02001 	mov	r2, r1
   3462c:	e1a01000 	mov	r1, r0
   34630:	e1a0000c 	mov	r0, ip
   34634:	eaffffbf 	b	34538 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>

00034638 <TargetProgrammer::numMemoryBlocks()>:
   34638:	e2800601 	add	r0, r0, #1048576	; 0x100000
   3463c:	e59000a0 	ldr	r0, [r0, #160]	; 0xa0
   34640:	e12fff1e 	bx	lr

00034644 <TargetProgrammer::getMemoryBlock(int)>:
   34644:	e2811802 	add	r1, r1, #131072	; 0x20000
   34648:	e0800181 	add	r0, r0, r1, lsl #3
   3464c:	e12fff1e 	bx	lr

00034650 <TargetProgrammer::getMemoryImagePtr()>:
   34650:	e12fff1e 	bx	lr

00034654 <TargetProgrammer::getMemoryImageSize()>:
   34654:	e3a00601 	mov	r0, #1048576	; 0x100000
   34658:	e12fff1e 	bx	lr

0003465c <TargetProgrammer::setTargetRegisters(Z80Registers const&)>:
   3465c:	e92d4030 	push	{r4, r5, lr}
   34660:	e2805601 	add	r5, r0, #1048576	; 0x100000
   34664:	e24dd00c 	sub	sp, sp, #12
   34668:	e3a02048 	mov	r2, #72	; 0x48
   3466c:	e28500a8 	add	r0, r5, #168	; 0xa8
   34670:	e1a04001 	mov	r4, r1
   34674:	ebffd8a5 	bl	2a910 <memcpy>
   34678:	e3a03001 	mov	r3, #1
   3467c:	e5c530a4 	strb	r3, [r5, #164]	; 0xa4
   34680:	ebffc951 	bl	26bcc <CLogger::Get()>
   34684:	e5942004 	ldr	r2, [r4, #4]
   34688:	e5943000 	ldr	r3, [r4]
   3468c:	e59f1018 	ldr	r1, [pc, #24]	; 346ac <TargetProgrammer::setTargetRegisters(Z80Registers const&)+0x50>
   34690:	e58d2004 	str	r2, [sp, #4]
   34694:	e58d3000 	str	r3, [sp]
   34698:	e3a02004 	mov	r2, #4
   3469c:	e59f300c 	ldr	r3, [pc, #12]	; 346b0 <TargetProgrammer::setTargetRegisters(Z80Registers const&)+0x54>
   346a0:	ebffc886 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   346a4:	e28dd00c 	add	sp, sp, #12
   346a8:	e8bd8030 	pop	{r4, r5, pc}
   346ac:	0004690c 	.word	0x0004690c
   346b0:	00046940 	.word	0x00046940

000346b4 <TargetProgrammer::setTargetRegistersStatic(Z80Registers const&, void*)>:
   346b4:	e2513000 	subs	r3, r1, #0
   346b8:	012fff1e 	bxeq	lr
   346bc:	e1a01000 	mov	r1, r0
   346c0:	e1a00003 	mov	r0, r3
   346c4:	eaffffe4 	b	3465c <TargetProgrammer::setTargetRegisters(Z80Registers const&)>

000346c8 <TargetProgrammer::areRegistersValid()>:
   346c8:	e2800601 	add	r0, r0, #1048576	; 0x100000
   346cc:	e5d000a4 	ldrb	r0, [r0, #164]	; 0xa4
   346d0:	e12fff1e 	bx	lr

000346d4 <TargetProgrammer::getTargetRegs(Z80Registers&)>:
   346d4:	e92d4010 	push	{r4, lr}
   346d8:	e1a04001 	mov	r4, r1
   346dc:	e2801601 	add	r1, r0, #1048576	; 0x100000
   346e0:	e24dd008 	sub	sp, sp, #8
   346e4:	e28110a8 	add	r1, r1, #168	; 0xa8
   346e8:	e3a02048 	mov	r2, #72	; 0x48
   346ec:	e1a00004 	mov	r0, r4
   346f0:	ebffd886 	bl	2a910 <memcpy>
   346f4:	ebffc934 	bl	26bcc <CLogger::Get()>
   346f8:	e5942000 	ldr	r2, [r4]
   346fc:	e59f3014 	ldr	r3, [pc, #20]	; 34718 <TargetProgrammer::getTargetRegs(Z80Registers&)+0x44>
   34700:	e58d2000 	str	r2, [sp]
   34704:	e59f1010 	ldr	r1, [pc, #16]	; 3471c <TargetProgrammer::getTargetRegs(Z80Registers&)+0x48>
   34708:	e3a02004 	mov	r2, #4
   3470c:	ebffc86b 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34710:	e28dd008 	add	sp, sp, #8
   34714:	e8bd8010 	pop	{r4, pc}
   34718:	00046960 	.word	0x00046960
   3471c:	0004690c 	.word	0x0004690c

00034720 <HwManager::HwManager(CommandHandler&, BusAccess&)>:
   34720:	e3a0c000 	mov	ip, #0
   34724:	e92d4010 	push	{r4, lr}
   34728:	e3e0e000 	mvn	lr, #0
   3472c:	e59f4024 	ldr	r4, [pc, #36]	; 34758 <HwManager::HwManager(CommandHandler&, BusAccess&)+0x38>
   34730:	e8800006 	stm	r0, {r1, r2}
   34734:	e580e034 	str	lr, [r0, #52]	; 0x34
   34738:	e5840000 	str	r0, [r4]
   3473c:	e580e038 	str	lr, [r0, #56]	; 0x38
   34740:	e5c0c03c 	strb	ip, [r0, #60]	; 0x3c
   34744:	e5c0c03e 	strb	ip, [r0, #62]	; 0x3e
   34748:	e5c0c03f 	strb	ip, [r0, #63]	; 0x3f
   3474c:	e5c0c03d 	strb	ip, [r0, #61]	; 0x3d
   34750:	e580c030 	str	ip, [r0, #48]	; 0x30
   34754:	e8bd8010 	pop	{r4, pc}
   34758:	0004e438 	.word	0x0004e438

0003475c <HwManager::init()>:
   3475c:	e92d4010 	push	{r4, lr}
   34760:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   34764:	e24dd030 	sub	sp, sp, #48	; 0x30
   34768:	e3530000 	cmp	r3, #0
   3476c:	e1a04000 	mov	r4, r0
   34770:	ba000016 	blt	347d0 <HwManager::init()+0x74>
   34774:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   34778:	e3530000 	cmp	r3, #0
   3477c:	ba000001 	blt	34788 <HwManager::init()+0x2c>
   34780:	e28dd030 	add	sp, sp, #48	; 0x30
   34784:	e8bd8010 	pop	{r4, pc}
   34788:	e3a03000 	mov	r3, #0
   3478c:	e5940000 	ldr	r0, [r4]
   34790:	e1a01004 	mov	r1, r4
   34794:	e58d3004 	str	r3, [sp, #4]
   34798:	e58d3000 	str	r3, [sp]
   3479c:	e3a02001 	mov	r2, #1
   347a0:	e59f307c 	ldr	r3, [pc, #124]	; 34824 <HwManager::init()+0xc8>
   347a4:	ebffecdf 	bl	2fb28 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   347a8:	e5840038 	str	r0, [r4, #56]	; 0x38
   347ac:	ebffc906 	bl	26bcc <CLogger::Get()>
   347b0:	e5942038 	ldr	r2, [r4, #56]	; 0x38
   347b4:	e59f306c 	ldr	r3, [pc, #108]	; 34828 <HwManager::init()+0xcc>
   347b8:	e58d2000 	str	r2, [sp]
   347bc:	e59f1068 	ldr	r1, [pc, #104]	; 3482c <HwManager::init()+0xd0>
   347c0:	e3a02004 	mov	r2, #4
   347c4:	ebffc83d 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   347c8:	e28dd030 	add	sp, sp, #48	; 0x30
   347cc:	e8bd8010 	pop	{r4, pc}
   347d0:	e3a03000 	mov	r3, #0
   347d4:	e3a02004 	mov	r2, #4
   347d8:	e5900004 	ldr	r0, [r0, #4]
   347dc:	e3a01001 	mov	r1, #1
   347e0:	e58d3028 	str	r3, [sp, #40]	; 0x28
   347e4:	e58d3020 	str	r3, [sp, #32]
   347e8:	e58d301c 	str	r3, [sp, #28]
   347ec:	e58d3018 	str	r3, [sp, #24]
   347f0:	e58d3014 	str	r3, [sp, #20]
   347f4:	e58d3010 	str	r3, [sp, #16]
   347f8:	e58d300c 	str	r3, [sp, #12]
   347fc:	e58d3008 	str	r3, [sp, #8]
   34800:	e58d3004 	str	r3, [sp, #4]
   34804:	e58d3000 	str	r3, [sp]
   34808:	e58d2024 	str	r2, [sp, #36]	; 0x24
   3480c:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   34810:	e59f3018 	ldr	r3, [pc, #24]	; 34830 <HwManager::init()+0xd4>
   34814:	e59f2018 	ldr	r2, [pc, #24]	; 34834 <HwManager::init()+0xd8>
   34818:	ebfffa5e 	bl	33198 <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   3481c:	e5840034 	str	r0, [r4, #52]	; 0x34
   34820:	eaffffd3 	b	34774 <HwManager::init()+0x18>
   34824:	0003562c 	.word	0x0003562c
   34828:	00046984 	.word	0x00046984
   3482c:	00046978 	.word	0x00046978
   34830:	00035140 	.word	0x00035140
   34834:	00035208 	.word	0x00035208

00034838 <HwManager::service()>:
   34838:	e12fff1e 	bx	lr

0003483c <HwManager::addHardwareElementStatic(HwBase*)>:
   3483c:	e59f301c 	ldr	r3, [pc, #28]	; 34860 <HwManager::addHardwareElementStatic(HwBase*)+0x24>
   34840:	e5932000 	ldr	r2, [r3]
   34844:	e5923030 	ldr	r3, [r2, #48]	; 0x30
   34848:	e3530009 	cmp	r3, #9
   3484c:	d2831001 	addle	r1, r3, #1
   34850:	d2833002 	addle	r3, r3, #2
   34854:	d5821030 	strle	r1, [r2, #48]	; 0x30
   34858:	d7820103 	strle	r0, [r2, r3, lsl #2]
   3485c:	e12fff1e 	bx	lr
   34860:	0004e438 	.word	0x0004e438

00034864 <HwManager::setMemoryEmulationMode(bool)>:
   34864:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34868:	e1a08001 	mov	r8, r1
   3486c:	e24dd008 	sub	sp, sp, #8
   34870:	e1a06000 	mov	r6, r0
   34874:	ebffc8d4 	bl	26bcc <CLogger::Get()>
   34878:	e59f20b0 	ldr	r2, [pc, #176]	; 34930 <HwManager::setMemoryEmulationMode(bool)+0xcc>
   3487c:	e3580000 	cmp	r8, #0
   34880:	e59f10ac 	ldr	r1, [pc, #172]	; 34934 <HwManager::setMemoryEmulationMode(bool)+0xd0>
   34884:	01a01002 	moveq	r1, r2
   34888:	e59f30a8 	ldr	r3, [pc, #168]	; 34938 <HwManager::setMemoryEmulationMode(bool)+0xd4>
   3488c:	e58d1000 	str	r1, [sp]
   34890:	e3a02004 	mov	r2, #4
   34894:	e59f10a0 	ldr	r1, [pc, #160]	; 3493c <HwManager::setMemoryEmulationMode(bool)+0xd8>
   34898:	ebffc808 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3489c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   348a0:	e3530000 	cmp	r3, #0
   348a4:	da00001c 	ble	3491c <HwManager::setMemoryEmulationMode(bool)+0xb8>
   348a8:	e3a05000 	mov	r5, #0
   348ac:	e59f708c 	ldr	r7, [pc, #140]	; 34940 <HwManager::setMemoryEmulationMode(bool)+0xdc>
   348b0:	e2864008 	add	r4, r6, #8
   348b4:	ea000004 	b	348cc <HwManager::setMemoryEmulationMode(bool)+0x68>
   348b8:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   348bc:	e2855001 	add	r5, r5, #1
   348c0:	e1530005 	cmp	r3, r5
   348c4:	e2844004 	add	r4, r4, #4
   348c8:	da000013 	ble	3491c <HwManager::setMemoryEmulationMode(bool)+0xb8>
   348cc:	e5940000 	ldr	r0, [r4]
   348d0:	e3500000 	cmp	r0, #0
   348d4:	0afffff8 	beq	348bc <HwManager::setMemoryEmulationMode(bool)+0x58>
   348d8:	e5903000 	ldr	r3, [r0]
   348dc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   348e0:	e1530007 	cmp	r3, r7
   348e4:	1a00000f 	bne	34928 <HwManager::setMemoryEmulationMode(bool)+0xc4>
   348e8:	e5d0000c 	ldrb	r0, [r0, #12]
   348ec:	e3500000 	cmp	r0, #0
   348f0:	0afffff0 	beq	348b8 <HwManager::setMemoryEmulationMode(bool)+0x54>
   348f4:	e5940000 	ldr	r0, [r4]
   348f8:	e1a01008 	mov	r1, r8
   348fc:	e5903000 	ldr	r3, [r0]
   34900:	e2855001 	add	r5, r5, #1
   34904:	e5933008 	ldr	r3, [r3, #8]
   34908:	e12fff33 	blx	r3
   3490c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34910:	e2844004 	add	r4, r4, #4
   34914:	e1530005 	cmp	r3, r5
   34918:	caffffeb 	bgt	348cc <HwManager::setMemoryEmulationMode(bool)+0x68>
   3491c:	e5c6803c 	strb	r8, [r6, #60]	; 0x3c
   34920:	e28dd008 	add	sp, sp, #8
   34924:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34928:	e12fff33 	blx	r3
   3492c:	eaffffee 	b	348ec <HwManager::setMemoryEmulationMode(bool)+0x88>
   34930:	000469a0 	.word	0x000469a0
   34934:	0004699c 	.word	0x0004699c
   34938:	000469a4 	.word	0x000469a4
   3493c:	00046978 	.word	0x00046978
   34940:	000358b0 	.word	0x000358b0

00034944 <HwManager::pageOutForInjection(bool)>:
   34944:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34948:	e3530000 	cmp	r3, #0
   3494c:	d12fff1e 	bxle	lr
   34950:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34954:	e1a08001 	mov	r8, r1
   34958:	e1a06000 	mov	r6, r0
   3495c:	e3a05000 	mov	r5, #0
   34960:	e59f7074 	ldr	r7, [pc, #116]	; 349dc <HwManager::pageOutForInjection(bool)+0x98>
   34964:	e2804008 	add	r4, r0, #8
   34968:	ea000004 	b	34980 <HwManager::pageOutForInjection(bool)+0x3c>
   3496c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34970:	e2855001 	add	r5, r5, #1
   34974:	e1530005 	cmp	r3, r5
   34978:	e2844004 	add	r4, r4, #4
   3497c:	da000013 	ble	349d0 <HwManager::pageOutForInjection(bool)+0x8c>
   34980:	e5940000 	ldr	r0, [r4]
   34984:	e3500000 	cmp	r0, #0
   34988:	0afffff8 	beq	34970 <HwManager::pageOutForInjection(bool)+0x2c>
   3498c:	e5903000 	ldr	r3, [r0]
   34990:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34994:	e1530007 	cmp	r3, r7
   34998:	1a00000d 	bne	349d4 <HwManager::pageOutForInjection(bool)+0x90>
   3499c:	e5d0000c 	ldrb	r0, [r0, #12]
   349a0:	e3500000 	cmp	r0, #0
   349a4:	0afffff0 	beq	3496c <HwManager::pageOutForInjection(bool)+0x28>
   349a8:	e5940000 	ldr	r0, [r4]
   349ac:	e1a01008 	mov	r1, r8
   349b0:	e5903000 	ldr	r3, [r0]
   349b4:	e2855001 	add	r5, r5, #1
   349b8:	e5933010 	ldr	r3, [r3, #16]
   349bc:	e12fff33 	blx	r3
   349c0:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   349c4:	e2844004 	add	r4, r4, #4
   349c8:	e1530005 	cmp	r3, r5
   349cc:	caffffeb 	bgt	34980 <HwManager::pageOutForInjection(bool)+0x3c>
   349d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   349d4:	e12fff33 	blx	r3
   349d8:	eafffff0 	b	349a0 <HwManager::pageOutForInjection(bool)+0x5c>
   349dc:	000358b0 	.word	0x000358b0

000349e0 <HwManager::setMemoryPagingEnable(bool)>:
   349e0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   349e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   349e8:	e3530000 	cmp	r3, #0
   349ec:	e1a08000 	mov	r8, r0
   349f0:	e1a07001 	mov	r7, r1
   349f4:	da00001c 	ble	34a6c <HwManager::setMemoryPagingEnable(bool)+0x8c>
   349f8:	e3a05000 	mov	r5, #0
   349fc:	e59f6078 	ldr	r6, [pc, #120]	; 34a7c <HwManager::setMemoryPagingEnable(bool)+0x9c>
   34a00:	e2804008 	add	r4, r0, #8
   34a04:	ea000004 	b	34a1c <HwManager::setMemoryPagingEnable(bool)+0x3c>
   34a08:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   34a0c:	e2855001 	add	r5, r5, #1
   34a10:	e1530005 	cmp	r3, r5
   34a14:	e2844004 	add	r4, r4, #4
   34a18:	da000013 	ble	34a6c <HwManager::setMemoryPagingEnable(bool)+0x8c>
   34a1c:	e5940000 	ldr	r0, [r4]
   34a20:	e3500000 	cmp	r0, #0
   34a24:	0afffff8 	beq	34a0c <HwManager::setMemoryPagingEnable(bool)+0x2c>
   34a28:	e5903000 	ldr	r3, [r0]
   34a2c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34a30:	e1530006 	cmp	r3, r6
   34a34:	1a00000e 	bne	34a74 <HwManager::setMemoryPagingEnable(bool)+0x94>
   34a38:	e5d0000c 	ldrb	r0, [r0, #12]
   34a3c:	e3500000 	cmp	r0, #0
   34a40:	0afffff0 	beq	34a08 <HwManager::setMemoryPagingEnable(bool)+0x28>
   34a44:	e5940000 	ldr	r0, [r4]
   34a48:	e1a01007 	mov	r1, r7
   34a4c:	e5903000 	ldr	r3, [r0]
   34a50:	e2855001 	add	r5, r5, #1
   34a54:	e593300c 	ldr	r3, [r3, #12]
   34a58:	e12fff33 	blx	r3
   34a5c:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   34a60:	e2844004 	add	r4, r4, #4
   34a64:	e1530005 	cmp	r3, r5
   34a68:	caffffeb 	bgt	34a1c <HwManager::setMemoryPagingEnable(bool)+0x3c>
   34a6c:	e5c8703e 	strb	r7, [r8, #62]	; 0x3e
   34a70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34a74:	e12fff33 	blx	r3
   34a78:	eaffffef 	b	34a3c <HwManager::setMemoryPagingEnable(bool)+0x5c>
   34a7c:	000358b0 	.word	0x000358b0

00034a80 <HwManager::setOpcodeInjectEnable(bool)>:
   34a80:	e92d4030 	push	{r4, r5, lr}
   34a84:	e1a04001 	mov	r4, r1
   34a88:	e24dd00c 	sub	sp, sp, #12
   34a8c:	e1a05000 	mov	r5, r0
   34a90:	ebffc84d 	bl	26bcc <CLogger::Get()>
   34a94:	e59f2028 	ldr	r2, [pc, #40]	; 34ac4 <HwManager::setOpcodeInjectEnable(bool)+0x44>
   34a98:	e3540000 	cmp	r4, #0
   34a9c:	e59f1024 	ldr	r1, [pc, #36]	; 34ac8 <HwManager::setOpcodeInjectEnable(bool)+0x48>
   34aa0:	01a01002 	moveq	r1, r2
   34aa4:	e59f3020 	ldr	r3, [pc, #32]	; 34acc <HwManager::setOpcodeInjectEnable(bool)+0x4c>
   34aa8:	e58d1000 	str	r1, [sp]
   34aac:	e3a02004 	mov	r2, #4
   34ab0:	e59f1018 	ldr	r1, [pc, #24]	; 34ad0 <HwManager::setOpcodeInjectEnable(bool)+0x50>
   34ab4:	ebffc781 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34ab8:	e5c5403f 	strb	r4, [r5, #63]	; 0x3f
   34abc:	e28dd00c 	add	sp, sp, #12
   34ac0:	e8bd8030 	pop	{r4, r5, pc}
   34ac4:	000469a0 	.word	0x000469a0
   34ac8:	0004699c 	.word	0x0004699c
   34acc:	000469c0 	.word	0x000469c0
   34ad0:	00046978 	.word	0x00046978

00034ad4 <HwManager::setMirrorMode(bool)>:
   34ad4:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34ad8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34adc:	e3530000 	cmp	r3, #0
   34ae0:	e1a08000 	mov	r8, r0
   34ae4:	e1a07001 	mov	r7, r1
   34ae8:	da00001c 	ble	34b60 <HwManager::setMirrorMode(bool)+0x8c>
   34aec:	e3a05000 	mov	r5, #0
   34af0:	e59f6078 	ldr	r6, [pc, #120]	; 34b70 <HwManager::setMirrorMode(bool)+0x9c>
   34af4:	e2804008 	add	r4, r0, #8
   34af8:	ea000004 	b	34b10 <HwManager::setMirrorMode(bool)+0x3c>
   34afc:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   34b00:	e2855001 	add	r5, r5, #1
   34b04:	e1530005 	cmp	r3, r5
   34b08:	e2844004 	add	r4, r4, #4
   34b0c:	da000013 	ble	34b60 <HwManager::setMirrorMode(bool)+0x8c>
   34b10:	e5940000 	ldr	r0, [r4]
   34b14:	e3500000 	cmp	r0, #0
   34b18:	0afffff8 	beq	34b00 <HwManager::setMirrorMode(bool)+0x2c>
   34b1c:	e5903000 	ldr	r3, [r0]
   34b20:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34b24:	e1530006 	cmp	r3, r6
   34b28:	1a00000e 	bne	34b68 <HwManager::setMirrorMode(bool)+0x94>
   34b2c:	e5d0000c 	ldrb	r0, [r0, #12]
   34b30:	e3500000 	cmp	r0, #0
   34b34:	0afffff0 	beq	34afc <HwManager::setMirrorMode(bool)+0x28>
   34b38:	e5940000 	ldr	r0, [r4]
   34b3c:	e1a01007 	mov	r1, r7
   34b40:	e5903000 	ldr	r3, [r0]
   34b44:	e2855001 	add	r5, r5, #1
   34b48:	e5933014 	ldr	r3, [r3, #20]
   34b4c:	e12fff33 	blx	r3
   34b50:	e5983030 	ldr	r3, [r8, #48]	; 0x30
   34b54:	e2844004 	add	r4, r4, #4
   34b58:	e1530005 	cmp	r3, r5
   34b5c:	caffffeb 	bgt	34b10 <HwManager::setMirrorMode(bool)+0x3c>
   34b60:	e5c8703d 	strb	r7, [r8, #61]	; 0x3d
   34b64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34b68:	e12fff33 	blx	r3
   34b6c:	eaffffef 	b	34b30 <HwManager::setMirrorMode(bool)+0x5c>
   34b70:	000358b0 	.word	0x000358b0

00034b74 <HwManager::getMaxAddress()>:
   34b74:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34b78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34b7c:	e3530000 	cmp	r3, #0
   34b80:	da000023 	ble	34c14 <HwManager::getMaxAddress()+0xa0>
   34b84:	e1a06000 	mov	r6, r0
   34b88:	e3a05000 	mov	r5, #0
   34b8c:	e59f8088 	ldr	r8, [pc, #136]	; 34c1c <HwManager::getMaxAddress()+0xa8>
   34b90:	e59f7088 	ldr	r7, [pc, #136]	; 34c20 <HwManager::getMaxAddress()+0xac>
   34b94:	e2804008 	add	r4, r0, #8
   34b98:	ea000004 	b	34bb0 <HwManager::getMaxAddress()+0x3c>
   34b9c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34ba0:	e2855001 	add	r5, r5, #1
   34ba4:	e1530005 	cmp	r3, r5
   34ba8:	e2844004 	add	r4, r4, #4
   34bac:	da000014 	ble	34c04 <HwManager::getMaxAddress()+0x90>
   34bb0:	e5940000 	ldr	r0, [r4]
   34bb4:	e3500000 	cmp	r0, #0
   34bb8:	0afffff8 	beq	34ba0 <HwManager::getMaxAddress()+0x2c>
   34bbc:	e5903000 	ldr	r3, [r0]
   34bc0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34bc4:	e1530007 	cmp	r3, r7
   34bc8:	1a00000f 	bne	34c0c <HwManager::getMaxAddress()+0x98>
   34bcc:	e5d0000c 	ldrb	r0, [r0, #12]
   34bd0:	e3500000 	cmp	r0, #0
   34bd4:	0afffff0 	beq	34b9c <HwManager::getMaxAddress()+0x28>
   34bd8:	e5940000 	ldr	r0, [r4]
   34bdc:	e2855001 	add	r5, r5, #1
   34be0:	e5903000 	ldr	r3, [r0]
   34be4:	e2844004 	add	r4, r4, #4
   34be8:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   34bec:	e12fff33 	blx	r3
   34bf0:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34bf4:	e1580000 	cmp	r8, r0
   34bf8:	31a08000 	movcc	r8, r0
   34bfc:	e1530005 	cmp	r3, r5
   34c00:	caffffea 	bgt	34bb0 <HwManager::getMaxAddress()+0x3c>
   34c04:	e1a00008 	mov	r0, r8
   34c08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34c0c:	e12fff33 	blx	r3
   34c10:	eaffffee 	b	34bd0 <HwManager::getMaxAddress()+0x5c>
   34c14:	e59f8000 	ldr	r8, [pc]	; 34c1c <HwManager::getMaxAddress()+0xa8>
   34c18:	eafffff9 	b	34c04 <HwManager::getMaxAddress()+0x90>
   34c1c:	0000ffff 	.word	0x0000ffff
   34c20:	000358b0 	.word	0x000358b0

00034c24 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>:
   34c24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34c28:	e24dd024 	sub	sp, sp, #36	; 0x24
   34c2c:	e5ddc050 	ldrb	ip, [sp, #80]	; 0x50
   34c30:	e1a06000 	mov	r6, r0
   34c34:	e35c0000 	cmp	ip, #0
   34c38:	e58d1014 	str	r1, [sp, #20]
   34c3c:	e58d2018 	str	r2, [sp, #24]
   34c40:	e1a09003 	mov	r9, r3
   34c44:	e5dda048 	ldrb	sl, [sp, #72]	; 0x48
   34c48:	e5ddb04c 	ldrb	fp, [sp, #76]	; 0x4c
   34c4c:	0a00002b 	beq	34d00 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xdc>
   34c50:	e3a03001 	mov	r3, #1
   34c54:	e58d3010 	str	r3, [sp, #16]
   34c58:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34c5c:	e3530000 	cmp	r3, #0
   34c60:	da000021 	ble	34cec <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xc8>
   34c64:	e3a05000 	mov	r5, #0
   34c68:	e59f70ac 	ldr	r7, [pc, #172]	; 34d1c <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xf8>
   34c6c:	e58d501c 	str	r5, [sp, #28]
   34c70:	e2864008 	add	r4, r6, #8
   34c74:	ea000013 	b	34cc8 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xa4>
   34c78:	e5d0000c 	ldrb	r0, [r0, #12]
   34c7c:	e3500000 	cmp	r0, #0
   34c80:	0a00000b 	beq	34cb4 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x90>
   34c84:	e5940000 	ldr	r0, [r4]
   34c88:	e59d1010 	ldr	r1, [sp, #16]
   34c8c:	e5902000 	ldr	r2, [r0]
   34c90:	e88d0c00 	stm	sp, {sl, fp}
   34c94:	e58d1008 	str	r1, [sp, #8]
   34c98:	e592801c 	ldr	r8, [r2, #28]
   34c9c:	e1a03009 	mov	r3, r9
   34ca0:	e59d2018 	ldr	r2, [sp, #24]
   34ca4:	e59d1014 	ldr	r1, [sp, #20]
   34ca8:	e12fff38 	blx	r8
   34cac:	e31000fb 	tst	r0, #251	; 0xfb
   34cb0:	158d001c 	strne	r0, [sp, #28]
   34cb4:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34cb8:	e2855001 	add	r5, r5, #1
   34cbc:	e1530005 	cmp	r3, r5
   34cc0:	e2844004 	add	r4, r4, #4
   34cc4:	da00000a 	ble	34cf4 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0xd0>
   34cc8:	e5940000 	ldr	r0, [r4]
   34ccc:	e3500000 	cmp	r0, #0
   34cd0:	0afffff8 	beq	34cb8 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x94>
   34cd4:	e5903000 	ldr	r3, [r0]
   34cd8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34cdc:	e1530007 	cmp	r3, r7
   34ce0:	0affffe4 	beq	34c78 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x54>
   34ce4:	e12fff33 	blx	r3
   34ce8:	eaffffe3 	b	34c7c <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x58>
   34cec:	e3a03000 	mov	r3, #0
   34cf0:	e58d301c 	str	r3, [sp, #28]
   34cf4:	e59d001c 	ldr	r0, [sp, #28]
   34cf8:	e28dd024 	add	sp, sp, #36	; 0x24
   34cfc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34d00:	e5900004 	ldr	r0, [r0, #4]
   34d04:	ebfff1f1 	bl	314d0 <BusAccess::waitIsHeld()>
   34d08:	e3500000 	cmp	r0, #0
   34d0c:	1affffcf 	bne	34c50 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x2c>
   34d10:	e5d6303c 	ldrb	r3, [r6, #60]	; 0x3c
   34d14:	e58d3010 	str	r3, [sp, #16]
   34d18:	eaffffce 	b	34c58 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)+0x34>
   34d1c:	000358b0 	.word	0x000358b0

00034d20 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>:
   34d20:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34d24:	e24dd024 	sub	sp, sp, #36	; 0x24
   34d28:	e5ddc050 	ldrb	ip, [sp, #80]	; 0x50
   34d2c:	e1a06000 	mov	r6, r0
   34d30:	e35c0000 	cmp	ip, #0
   34d34:	e58d1014 	str	r1, [sp, #20]
   34d38:	e58d2018 	str	r2, [sp, #24]
   34d3c:	e1a09003 	mov	r9, r3
   34d40:	e5dda048 	ldrb	sl, [sp, #72]	; 0x48
   34d44:	e5ddb04c 	ldrb	fp, [sp, #76]	; 0x4c
   34d48:	0a00002b 	beq	34dfc <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xdc>
   34d4c:	e3a03001 	mov	r3, #1
   34d50:	e58d3010 	str	r3, [sp, #16]
   34d54:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34d58:	e3530000 	cmp	r3, #0
   34d5c:	da000021 	ble	34de8 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xc8>
   34d60:	e3a05000 	mov	r5, #0
   34d64:	e59f70ac 	ldr	r7, [pc, #172]	; 34e18 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xf8>
   34d68:	e58d501c 	str	r5, [sp, #28]
   34d6c:	e2864008 	add	r4, r6, #8
   34d70:	ea000013 	b	34dc4 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xa4>
   34d74:	e5d0000c 	ldrb	r0, [r0, #12]
   34d78:	e3500000 	cmp	r0, #0
   34d7c:	0a00000b 	beq	34db0 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x90>
   34d80:	e5940000 	ldr	r0, [r4]
   34d84:	e59d1010 	ldr	r1, [sp, #16]
   34d88:	e5902000 	ldr	r2, [r0]
   34d8c:	e88d0c00 	stm	sp, {sl, fp}
   34d90:	e58d1008 	str	r1, [sp, #8]
   34d94:	e5928020 	ldr	r8, [r2, #32]
   34d98:	e1a03009 	mov	r3, r9
   34d9c:	e59d2018 	ldr	r2, [sp, #24]
   34da0:	e59d1014 	ldr	r1, [sp, #20]
   34da4:	e12fff38 	blx	r8
   34da8:	e31000fb 	tst	r0, #251	; 0xfb
   34dac:	158d001c 	strne	r0, [sp, #28]
   34db0:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34db4:	e2855001 	add	r5, r5, #1
   34db8:	e1530005 	cmp	r3, r5
   34dbc:	e2844004 	add	r4, r4, #4
   34dc0:	da00000a 	ble	34df0 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0xd0>
   34dc4:	e5940000 	ldr	r0, [r4]
   34dc8:	e3500000 	cmp	r0, #0
   34dcc:	0afffff8 	beq	34db4 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x94>
   34dd0:	e5903000 	ldr	r3, [r0]
   34dd4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34dd8:	e1530007 	cmp	r3, r7
   34ddc:	0affffe4 	beq	34d74 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x54>
   34de0:	e12fff33 	blx	r3
   34de4:	eaffffe3 	b	34d78 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x58>
   34de8:	e3a03000 	mov	r3, #0
   34dec:	e58d301c 	str	r3, [sp, #28]
   34df0:	e59d001c 	ldr	r0, [sp, #28]
   34df4:	e28dd024 	add	sp, sp, #36	; 0x24
   34df8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34dfc:	e5900004 	ldr	r0, [r0, #4]
   34e00:	ebfff1b2 	bl	314d0 <BusAccess::waitIsHeld()>
   34e04:	e3500000 	cmp	r0, #0
   34e08:	1affffcf 	bne	34d4c <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x2c>
   34e0c:	e5d6303c 	ldrb	r3, [r6, #60]	; 0x3c
   34e10:	e58d3010 	str	r3, [sp, #16]
   34e14:	eaffffce 	b	34d54 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)+0x34>
   34e18:	000358b0 	.word	0x000358b0

00034e1c <HwManager::getMirrorMemForAddr(unsigned long)>:
   34e1c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34e20:	e3530000 	cmp	r3, #0
   34e24:	da000020 	ble	34eac <HwManager::getMirrorMemForAddr(unsigned long)+0x90>
   34e28:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34e2c:	e1a08001 	mov	r8, r1
   34e30:	e1a06000 	mov	r6, r0
   34e34:	e3a05000 	mov	r5, #0
   34e38:	e59f7074 	ldr	r7, [pc, #116]	; 34eb4 <HwManager::getMirrorMemForAddr(unsigned long)+0x98>
   34e3c:	e2804008 	add	r4, r0, #8
   34e40:	ea00000e 	b	34e80 <HwManager::getMirrorMemForAddr(unsigned long)+0x64>
   34e44:	e5d0000c 	ldrb	r0, [r0, #12]
   34e48:	e3500000 	cmp	r0, #0
   34e4c:	0a000006 	beq	34e6c <HwManager::getMirrorMemForAddr(unsigned long)+0x50>
   34e50:	e5940000 	ldr	r0, [r4]
   34e54:	e1a01008 	mov	r1, r8
   34e58:	e5903000 	ldr	r3, [r0]
   34e5c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   34e60:	e12fff33 	blx	r3
   34e64:	e3500000 	cmp	r0, #0
   34e68:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   34e6c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34e70:	e2855001 	add	r5, r5, #1
   34e74:	e1530005 	cmp	r3, r5
   34e78:	e2844004 	add	r4, r4, #4
   34e7c:	da000008 	ble	34ea4 <HwManager::getMirrorMemForAddr(unsigned long)+0x88>
   34e80:	e5940000 	ldr	r0, [r4]
   34e84:	e3500000 	cmp	r0, #0
   34e88:	0afffff8 	beq	34e70 <HwManager::getMirrorMemForAddr(unsigned long)+0x54>
   34e8c:	e5903000 	ldr	r3, [r0]
   34e90:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34e94:	e1530007 	cmp	r3, r7
   34e98:	0affffe9 	beq	34e44 <HwManager::getMirrorMemForAddr(unsigned long)+0x28>
   34e9c:	e12fff33 	blx	r3
   34ea0:	eaffffe8 	b	34e48 <HwManager::getMirrorMemForAddr(unsigned long)+0x2c>
   34ea4:	e3a00000 	mov	r0, #0
   34ea8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34eac:	e3a00000 	mov	r0, #0
   34eb0:	e12fff1e 	bx	lr
   34eb4:	000358b0 	.word	0x000358b0

00034eb8 <HwManager::mirrorClone()>:
   34eb8:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34ebc:	e3530000 	cmp	r3, #0
   34ec0:	d12fff1e 	bxle	lr
   34ec4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34ec8:	e1a06000 	mov	r6, r0
   34ecc:	e3a05000 	mov	r5, #0
   34ed0:	e59f7070 	ldr	r7, [pc, #112]	; 34f48 <HwManager::mirrorClone()+0x90>
   34ed4:	e2804008 	add	r4, r0, #8
   34ed8:	ea000004 	b	34ef0 <HwManager::mirrorClone()+0x38>
   34edc:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34ee0:	e2855001 	add	r5, r5, #1
   34ee4:	e1530005 	cmp	r3, r5
   34ee8:	e2844004 	add	r4, r4, #4
   34eec:	da000012 	ble	34f3c <HwManager::mirrorClone()+0x84>
   34ef0:	e5940000 	ldr	r0, [r4]
   34ef4:	e3500000 	cmp	r0, #0
   34ef8:	0afffff8 	beq	34ee0 <HwManager::mirrorClone()+0x28>
   34efc:	e5903000 	ldr	r3, [r0]
   34f00:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34f04:	e1530007 	cmp	r3, r7
   34f08:	1a00000c 	bne	34f40 <HwManager::mirrorClone()+0x88>
   34f0c:	e5d0000c 	ldrb	r0, [r0, #12]
   34f10:	e3500000 	cmp	r0, #0
   34f14:	0afffff0 	beq	34edc <HwManager::mirrorClone()+0x24>
   34f18:	e5940000 	ldr	r0, [r4]
   34f1c:	e2855001 	add	r5, r5, #1
   34f20:	e5903000 	ldr	r3, [r0]
   34f24:	e2844004 	add	r4, r4, #4
   34f28:	e5933018 	ldr	r3, [r3, #24]
   34f2c:	e12fff33 	blx	r3
   34f30:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34f34:	e1530005 	cmp	r3, r5
   34f38:	caffffec 	bgt	34ef0 <HwManager::mirrorClone()+0x38>
   34f3c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34f40:	e12fff33 	blx	r3
   34f44:	eafffff1 	b	34f10 <HwManager::mirrorClone()+0x58>
   34f48:	000358b0 	.word	0x000358b0

00034f4c <HwManager::tracerClone()>:
   34f4c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   34f50:	e3530000 	cmp	r3, #0
   34f54:	d12fff1e 	bxle	lr
   34f58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34f5c:	e1a06000 	mov	r6, r0
   34f60:	e3a05000 	mov	r5, #0
   34f64:	e59f7070 	ldr	r7, [pc, #112]	; 34fdc <HwManager::tracerClone()+0x90>
   34f68:	e2804008 	add	r4, r0, #8
   34f6c:	ea000004 	b	34f84 <HwManager::tracerClone()+0x38>
   34f70:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34f74:	e2855001 	add	r5, r5, #1
   34f78:	e1530005 	cmp	r3, r5
   34f7c:	e2844004 	add	r4, r4, #4
   34f80:	da000012 	ble	34fd0 <HwManager::tracerClone()+0x84>
   34f84:	e5940000 	ldr	r0, [r4]
   34f88:	e3500000 	cmp	r0, #0
   34f8c:	0afffff8 	beq	34f74 <HwManager::tracerClone()+0x28>
   34f90:	e5903000 	ldr	r3, [r0]
   34f94:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   34f98:	e1530007 	cmp	r3, r7
   34f9c:	1a00000c 	bne	34fd4 <HwManager::tracerClone()+0x88>
   34fa0:	e5d0000c 	ldrb	r0, [r0, #12]
   34fa4:	e3500000 	cmp	r0, #0
   34fa8:	0afffff0 	beq	34f70 <HwManager::tracerClone()+0x24>
   34fac:	e5940000 	ldr	r0, [r4]
   34fb0:	e2855001 	add	r5, r5, #1
   34fb4:	e5903000 	ldr	r3, [r0]
   34fb8:	e2844004 	add	r4, r4, #4
   34fbc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   34fc0:	e12fff33 	blx	r3
   34fc4:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   34fc8:	e1530005 	cmp	r3, r5
   34fcc:	caffffec 	bgt	34f84 <HwManager::tracerClone()+0x38>
   34fd0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34fd4:	e12fff33 	blx	r3
   34fd8:	eafffff1 	b	34fa4 <HwManager::tracerClone()+0x58>
   34fdc:	000358b0 	.word	0x000358b0

00034fe0 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   34fe0:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   34fe4:	e35c0000 	cmp	ip, #0
   34fe8:	d12fff1e 	bxle	lr
   34fec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34ff0:	e1a0b003 	mov	fp, r3
   34ff4:	e24dd00c 	sub	sp, sp, #12
   34ff8:	e1a0a002 	mov	sl, r2
   34ffc:	e1a09001 	mov	r9, r1
   35000:	e1a06000 	mov	r6, r0
   35004:	e3a05000 	mov	r5, #0
   35008:	e59f7088 	ldr	r7, [pc, #136]	; 35098 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb8>
   3500c:	e2804008 	add	r4, r0, #8
   35010:	ea000004 	b	35028 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48>
   35014:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   35018:	e2855001 	add	r5, r5, #1
   3501c:	e15c0005 	cmp	ip, r5
   35020:	e2844004 	add	r4, r4, #4
   35024:	da000017 	ble	35088 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0xa8>
   35028:	e5940000 	ldr	r0, [r4]
   3502c:	e3500000 	cmp	r0, #0
   35030:	0afffff8 	beq	35018 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x38>
   35034:	e5903000 	ldr	r3, [r0]
   35038:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   3503c:	e1530007 	cmp	r3, r7
   35040:	1a000012 	bne	35090 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb0>
   35044:	e5d0000c 	ldrb	r0, [r0, #12]
   35048:	e3500000 	cmp	r0, #0
   3504c:	0afffff0 	beq	35014 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x34>
   35050:	e5940000 	ldr	r0, [r4]
   35054:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   35058:	e5902000 	ldr	r2, [r0]
   3505c:	e58d1000 	str	r1, [sp]
   35060:	e592802c 	ldr	r8, [r2, #44]	; 0x2c
   35064:	e1a0300b 	mov	r3, fp
   35068:	e1a0200a 	mov	r2, sl
   3506c:	e1a01009 	mov	r1, r9
   35070:	e12fff38 	blx	r8
   35074:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   35078:	e2855001 	add	r5, r5, #1
   3507c:	e15c0005 	cmp	ip, r5
   35080:	e2844004 	add	r4, r4, #4
   35084:	caffffe7 	bgt	35028 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48>
   35088:	e28dd00c 	add	sp, sp, #12
   3508c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35090:	e12fff33 	blx	r3
   35094:	eaffffeb 	b	35048 <HwManager::tracerHandleAccess(unsigned long, unsigned long, unsigned long, unsigned long&)+0x68>
   35098:	000358b0 	.word	0x000358b0

0003509c <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   3509c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   350a0:	e3530000 	cmp	r3, #0
   350a4:	d12fff1e 	bxle	lr
   350a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   350ac:	e1a09002 	mov	r9, r2
   350b0:	e1a08001 	mov	r8, r1
   350b4:	e1a06000 	mov	r6, r0
   350b8:	e3a05000 	mov	r5, #0
   350bc:	e59f7078 	ldr	r7, [pc, #120]	; 3513c <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0xa0>
   350c0:	e2804008 	add	r4, r0, #8
   350c4:	ea000004 	b	350dc <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x40>
   350c8:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   350cc:	e2855001 	add	r5, r5, #1
   350d0:	e1530005 	cmp	r3, r5
   350d4:	e2844004 	add	r4, r4, #4
   350d8:	da000014 	ble	35130 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x94>
   350dc:	e5940000 	ldr	r0, [r4]
   350e0:	e3500000 	cmp	r0, #0
   350e4:	0afffff8 	beq	350cc <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x30>
   350e8:	e5903000 	ldr	r3, [r0]
   350ec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   350f0:	e1530007 	cmp	r3, r7
   350f4:	1a00000e 	bne	35134 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x98>
   350f8:	e5d0000c 	ldrb	r0, [r0, #12]
   350fc:	e3500000 	cmp	r0, #0
   35100:	0afffff0 	beq	350c8 <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x2c>
   35104:	e5940000 	ldr	r0, [r4]
   35108:	e1a02009 	mov	r2, r9
   3510c:	e5903000 	ldr	r3, [r0]
   35110:	e1a01008 	mov	r1, r8
   35114:	e5933000 	ldr	r3, [r3]
   35118:	e12fff33 	blx	r3
   3511c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   35120:	e2855001 	add	r5, r5, #1
   35124:	e1530005 	cmp	r3, r5
   35128:	e2844004 	add	r4, r4, #4
   3512c:	caffffea 	bgt	350dc <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x40>
   35130:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35134:	e12fff33 	blx	r3
   35138:	eaffffef 	b	350fc <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x60>
   3513c:	000358b0 	.word	0x000358b0

00035140 <HwManager::busActionCompleteStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   35140:	e3500000 	cmp	r0, #0
   35144:	012fff1e 	bxeq	lr
   35148:	eaffffd3 	b	3509c <HwManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>

0003514c <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   3514c:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   35150:	e35c0000 	cmp	ip, #0
   35154:	d12fff1e 	bxle	lr
   35158:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3515c:	e1a0b003 	mov	fp, r3
   35160:	e24dd00c 	sub	sp, sp, #12
   35164:	e1a0a002 	mov	sl, r2
   35168:	e1a09001 	mov	r9, r1
   3516c:	e1a06000 	mov	r6, r0
   35170:	e3a05000 	mov	r5, #0
   35174:	e59f7088 	ldr	r7, [pc, #136]	; 35204 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb8>
   35178:	e2804008 	add	r4, r0, #8
   3517c:	ea000004 	b	35194 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48>
   35180:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   35184:	e2855001 	add	r5, r5, #1
   35188:	e15c0005 	cmp	ip, r5
   3518c:	e2844004 	add	r4, r4, #4
   35190:	da000017 	ble	351f4 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xa8>
   35194:	e5940000 	ldr	r0, [r4]
   35198:	e3500000 	cmp	r0, #0
   3519c:	0afffff8 	beq	35184 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x38>
   351a0:	e5903000 	ldr	r3, [r0]
   351a4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   351a8:	e1530007 	cmp	r3, r7
   351ac:	1a000012 	bne	351fc <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0xb0>
   351b0:	e5d0000c 	ldrb	r0, [r0, #12]
   351b4:	e3500000 	cmp	r0, #0
   351b8:	0afffff0 	beq	35180 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x34>
   351bc:	e5940000 	ldr	r0, [r4]
   351c0:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   351c4:	e5902000 	ldr	r2, [r0]
   351c8:	e58d1000 	str	r1, [sp]
   351cc:	e5928004 	ldr	r8, [r2, #4]
   351d0:	e1a0300b 	mov	r3, fp
   351d4:	e1a0200a 	mov	r2, sl
   351d8:	e1a01009 	mov	r1, r9
   351dc:	e12fff38 	blx	r8
   351e0:	e596c030 	ldr	ip, [r6, #48]	; 0x30
   351e4:	e2855001 	add	r5, r5, #1
   351e8:	e15c0005 	cmp	ip, r5
   351ec:	e2844004 	add	r4, r4, #4
   351f0:	caffffe7 	bgt	35194 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x48>
   351f4:	e28dd00c 	add	sp, sp, #12
   351f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   351fc:	e12fff33 	blx	r3
   35200:	eaffffeb 	b	351b4 <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)+0x68>
   35204:	000358b0 	.word	0x000358b0

00035208 <HwManager::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   35208:	e3500000 	cmp	r0, #0
   3520c:	012fff1e 	bxeq	lr
   35210:	eaffffcd 	b	3514c <HwManager::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>

00035214 <HwManager::enableHw(char const*, bool)>:
   35214:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   35218:	e3530000 	cmp	r3, #0
   3521c:	da00002c 	ble	352d4 <HwManager::enableHw(char const*, bool)+0xc0>
   35220:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35224:	e1a08002 	mov	r8, r2
   35228:	e1a07001 	mov	r7, r1
   3522c:	e1a06000 	mov	r6, r0
   35230:	e3a04000 	mov	r4, #0
   35234:	e59f90a0 	ldr	r9, [pc, #160]	; 352dc <HwManager::enableHw(char const*, bool)+0xc8>
   35238:	e2805004 	add	r5, r0, #4
   3523c:	ea000008 	b	35264 <HwManager::enableHw(char const*, bool)+0x50>
   35240:	e5900010 	ldr	r0, [r0, #16]
   35244:	e1a01007 	mov	r1, r7
   35248:	ebffd3b0 	bl	2a110 <strcasecmp>
   3524c:	e3500000 	cmp	r0, #0
   35250:	0a00000f 	beq	35294 <HwManager::enableHw(char const*, bool)+0x80>
   35254:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   35258:	e2844001 	add	r4, r4, #1
   3525c:	e1530004 	cmp	r3, r4
   35260:	da000015 	ble	352bc <HwManager::enableHw(char const*, bool)+0xa8>
   35264:	e5b50004 	ldr	r0, [r5, #4]!
   35268:	e3500000 	cmp	r0, #0
   3526c:	0afffff9 	beq	35258 <HwManager::enableHw(char const*, bool)+0x44>
   35270:	e5903000 	ldr	r3, [r0]
   35274:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   35278:	e1530009 	cmp	r3, r9
   3527c:	0affffef 	beq	35240 <HwManager::enableHw(char const*, bool)+0x2c>
   35280:	e12fff33 	blx	r3
   35284:	e1a01007 	mov	r1, r7
   35288:	ebffd3a0 	bl	2a110 <strcasecmp>
   3528c:	e3500000 	cmp	r0, #0
   35290:	1affffef 	bne	35254 <HwManager::enableHw(char const*, bool)+0x40>
   35294:	e2844002 	add	r4, r4, #2
   35298:	e7960104 	ldr	r0, [r6, r4, lsl #2]
   3529c:	e59f203c 	ldr	r2, [pc, #60]	; 352e0 <HwManager::enableHw(char const*, bool)+0xcc>
   352a0:	e5903000 	ldr	r3, [r0]
   352a4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   352a8:	e1530002 	cmp	r3, r2
   352ac:	1a000004 	bne	352c4 <HwManager::enableHw(char const*, bool)+0xb0>
   352b0:	e5c0800c 	strb	r8, [r0, #12]
   352b4:	e3a00001 	mov	r0, #1
   352b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   352bc:	e3a00000 	mov	r0, #0
   352c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   352c4:	e1a01008 	mov	r1, r8
   352c8:	e12fff33 	blx	r3
   352cc:	e3a00001 	mov	r0, #1
   352d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   352d4:	e3a00000 	mov	r0, #0
   352d8:	e12fff1e 	bx	lr
   352dc:	000358c0 	.word	0x000358c0
   352e0:	000358b8 	.word	0x000358b8

000352e4 <HwManager::disableAll()>:
   352e4:	e5902030 	ldr	r2, [r0, #48]	; 0x30
   352e8:	e3520000 	cmp	r2, #0
   352ec:	d12fff1e 	bxle	lr
   352f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   352f4:	e3a04000 	mov	r4, #0
   352f8:	e1a08000 	mov	r8, r0
   352fc:	e1a07004 	mov	r7, r4
   35300:	e59f604c 	ldr	r6, [pc, #76]	; 35354 <HwManager::disableAll()+0x70>
   35304:	e2805004 	add	r5, r0, #4
   35308:	ea000002 	b	35318 <HwManager::disableAll()+0x34>
   3530c:	e2844001 	add	r4, r4, #1
   35310:	e1520004 	cmp	r2, r4
   35314:	da00000d 	ble	35350 <HwManager::disableAll()+0x6c>
   35318:	e5b50004 	ldr	r0, [r5, #4]!
   3531c:	e3500000 	cmp	r0, #0
   35320:	0afffff9 	beq	3530c <HwManager::disableAll()+0x28>
   35324:	e5903000 	ldr	r3, [r0]
   35328:	e5933034 	ldr	r3, [r3, #52]	; 0x34
   3532c:	e1530006 	cmp	r3, r6
   35330:	05c0700c 	strbeq	r7, [r0, #12]
   35334:	0afffff4 	beq	3530c <HwManager::disableAll()+0x28>
   35338:	e1a01007 	mov	r1, r7
   3533c:	e12fff33 	blx	r3
   35340:	e5982030 	ldr	r2, [r8, #48]	; 0x30
   35344:	e2844001 	add	r4, r4, #1
   35348:	e1520004 	cmp	r2, r4
   3534c:	cafffff1 	bgt	35318 <HwManager::disableAll()+0x34>
   35350:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   35354:	000358b8 	.word	0x000358b8

00035358 <HwManager::configureHw(char const*, char const*)>:
   35358:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3535c:	e3530000 	cmp	r3, #0
   35360:	d12fff1e 	bxle	lr
   35364:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35368:	e1a08002 	mov	r8, r2
   3536c:	e1a07001 	mov	r7, r1
   35370:	e1a06000 	mov	r6, r0
   35374:	e3a04000 	mov	r4, #0
   35378:	e59f9078 	ldr	r9, [pc, #120]	; 353f8 <HwManager::configureHw(char const*, char const*)+0xa0>
   3537c:	e2805004 	add	r5, r0, #4
   35380:	ea000008 	b	353a8 <HwManager::configureHw(char const*, char const*)+0x50>
   35384:	e5900010 	ldr	r0, [r0, #16]
   35388:	e1a01007 	mov	r1, r7
   3538c:	ebffd35f 	bl	2a110 <strcasecmp>
   35390:	e3500000 	cmp	r0, #0
   35394:	0a00000f 	beq	353d8 <HwManager::configureHw(char const*, char const*)+0x80>
   35398:	e5963030 	ldr	r3, [r6, #48]	; 0x30
   3539c:	e2844001 	add	r4, r4, #1
   353a0:	e1530004 	cmp	r3, r4
   353a4:	da000012 	ble	353f4 <HwManager::configureHw(char const*, char const*)+0x9c>
   353a8:	e5b50004 	ldr	r0, [r5, #4]!
   353ac:	e3500000 	cmp	r0, #0
   353b0:	0afffff9 	beq	3539c <HwManager::configureHw(char const*, char const*)+0x44>
   353b4:	e5903000 	ldr	r3, [r0]
   353b8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   353bc:	e1530009 	cmp	r3, r9
   353c0:	0affffef 	beq	35384 <HwManager::configureHw(char const*, char const*)+0x2c>
   353c4:	e12fff33 	blx	r3
   353c8:	e1a01007 	mov	r1, r7
   353cc:	ebffd34f 	bl	2a110 <strcasecmp>
   353d0:	e3500000 	cmp	r0, #0
   353d4:	1affffef 	bne	35398 <HwManager::configureHw(char const*, char const*)+0x40>
   353d8:	e2844002 	add	r4, r4, #2
   353dc:	e7960104 	ldr	r0, [r6, r4, lsl #2]
   353e0:	e1a01008 	mov	r1, r8
   353e4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   353e8:	e5903000 	ldr	r3, [r0]
   353ec:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   353f0:	e12fff13 	bx	r3
   353f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   353f8:	000358c0 	.word	0x000358c0

000353fc <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   353fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35400:	e24dde49 	sub	sp, sp, #1168	; 0x490
   35404:	e24dd00c 	sub	sp, sp, #12
   35408:	e28d3014 	add	r3, sp, #20
   3540c:	e58d300c 	str	r3, [sp, #12]
   35410:	e1a02003 	mov	r2, r3
   35414:	e1a07000 	mov	r7, r0
   35418:	e3a03032 	mov	r3, #50	; 0x32
   3541c:	e59f01d0 	ldr	r0, [pc, #464]	; 355f4 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1f8>
   35420:	e1a05001 	mov	r5, r1
   35424:	ebffe3b1 	bl	2e2f0 <jsonGetValueForKey>
   35428:	e2504000 	subs	r4, r0, #0
   3542c:	1a000004 	bne	35444 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x48>
   35430:	e3a04000 	mov	r4, #0
   35434:	e1a00004 	mov	r0, r4
   35438:	e28dde49 	add	sp, sp, #1168	; 0x490
   3543c:	e28dd00c 	add	sp, sp, #12
   35440:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35444:	e59f11ac 	ldr	r1, [pc, #428]	; 355f8 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1fc>
   35448:	e59d000c 	ldr	r0, [sp, #12]
   3544c:	ebffd32f 	bl	2a110 <strcasecmp>
   35450:	e2506000 	subs	r6, r0, #0
   35454:	0a000033 	beq	35528 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x12c>
   35458:	e59d000c 	ldr	r0, [sp, #12]
   3545c:	e59f1198 	ldr	r1, [pc, #408]	; 355fc <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x200>
   35460:	ebffd32a 	bl	2a110 <strcasecmp>
   35464:	e2505000 	subs	r5, r0, #0
   35468:	1afffff0 	bne	35430 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   3546c:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   35470:	e59f1188 	ldr	r1, [pc, #392]	; 35600 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x204>
   35474:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   35478:	ebffe2e6 	bl	2e018 <strlcpy>
   3547c:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   35480:	e3530000 	cmp	r3, #0
   35484:	da000055 	ble	355e0 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1e4>
   35488:	e1a08005 	mov	r8, r5
   3548c:	e3a0bffa 	mov	fp, #1000	; 0x3e8
   35490:	e59fa16c 	ldr	sl, [pc, #364]	; 35604 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x208>
   35494:	e59f916c 	ldr	r9, [pc, #364]	; 35608 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x20c>
   35498:	e2876008 	add	r6, r7, #8
   3549c:	ea000009 	b	354c8 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc>
   354a0:	e1a08004 	mov	r8, r4
   354a4:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   354a8:	e28d10b0 	add	r1, sp, #176	; 0xb0
   354ac:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   354b0:	ebffe2f4 	bl	2e088 <strlcat>
   354b4:	e5973030 	ldr	r3, [r7, #48]	; 0x30
   354b8:	e2855001 	add	r5, r5, #1
   354bc:	e1530005 	cmp	r3, r5
   354c0:	e2866004 	add	r6, r6, #4
   354c4:	da000045 	ble	355e0 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1e4>
   354c8:	e5960000 	ldr	r0, [r6]
   354cc:	e3500000 	cmp	r0, #0
   354d0:	0afffff8 	beq	354b8 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xbc>
   354d4:	e5902000 	ldr	r2, [r0]
   354d8:	e5923038 	ldr	r3, [r2, #56]	; 0x38
   354dc:	e153000a 	cmp	r3, sl
   354e0:	1a000039 	bne	355cc <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1d0>
   354e4:	e5903010 	ldr	r3, [r0, #16]
   354e8:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   354ec:	e1520009 	cmp	r2, r9
   354f0:	1a000031 	bne	355bc <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x1c0>
   354f4:	e5d0000c 	ldrb	r0, [r0, #12]
   354f8:	e58d0000 	str	r0, [sp]
   354fc:	e59f2108 	ldr	r2, [pc, #264]	; 3560c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x210>
   35500:	e1a0100b 	mov	r1, fp
   35504:	e28d00b0 	add	r0, sp, #176	; 0xb0
   35508:	ebffe339 	bl	2e1f4 <snprintf>
   3550c:	e3580000 	cmp	r8, #0
   35510:	0affffe2 	beq	354a0 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa4>
   35514:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   35518:	e59f10f0 	ldr	r1, [pc, #240]	; 35610 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x214>
   3551c:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   35520:	ebffe2d8 	bl	2e088 <strlcat>
   35524:	eaffffdd 	b	354a0 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa4>
   35528:	e28d2048 	add	r2, sp, #72	; 0x48
   3552c:	e3a03064 	mov	r3, #100	; 0x64
   35530:	e1a01005 	mov	r1, r5
   35534:	e59f00d8 	ldr	r0, [pc, #216]	; 35614 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x218>
   35538:	ebffe36c 	bl	2e2f0 <jsonGetValueForKey>
   3553c:	e3500000 	cmp	r0, #0
   35540:	0affffba 	beq	35430 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   35544:	e28d20b0 	add	r2, sp, #176	; 0xb0
   35548:	e3a03064 	mov	r3, #100	; 0x64
   3554c:	e1a01005 	mov	r1, r5
   35550:	e59f00c0 	ldr	r0, [pc, #192]	; 35618 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   35554:	ebffe365 	bl	2e2f0 <jsonGetValueForKey>
   35558:	e2504000 	subs	r4, r0, #0
   3555c:	0affffb3 	beq	35430 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   35560:	e1a01006 	mov	r1, r6
   35564:	e28d00b0 	add	r0, sp, #176	; 0xb0
   35568:	e3a0200a 	mov	r2, #10
   3556c:	ebffd40f 	bl	2a5b0 <strtoul>
   35570:	e2902000 	adds	r2, r0, #0
   35574:	13a02001 	movne	r2, #1
   35578:	e28d1048 	add	r1, sp, #72	; 0x48
   3557c:	e1a00007 	mov	r0, r7
   35580:	ebffff23 	bl	35214 <HwManager::enableHw(char const*, bool)>
   35584:	e1a06000 	mov	r6, r0
   35588:	e1a02005 	mov	r2, r5
   3558c:	e28d1048 	add	r1, sp, #72	; 0x48
   35590:	e1a00007 	mov	r0, r7
   35594:	ebffff6f 	bl	35358 <HwManager::configureHw(char const*, char const*)>
   35598:	e59f107c 	ldr	r1, [pc, #124]	; 3561c <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x220>
   3559c:	e3560000 	cmp	r6, #0
   355a0:	e59f3078 	ldr	r3, [pc, #120]	; 35620 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x224>
   355a4:	e59f2078 	ldr	r2, [pc, #120]	; 35624 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x228>
   355a8:	11a03001 	movne	r3, r1
   355ac:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   355b0:	e59d14c4 	ldr	r1, [sp, #1220]	; 0x4c4
   355b4:	ebffe30e 	bl	2e1f4 <snprintf>
   355b8:	eaffff9d 	b	35434 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   355bc:	e58d300c 	str	r3, [sp, #12]
   355c0:	e12fff32 	blx	r2
   355c4:	e59d300c 	ldr	r3, [sp, #12]
   355c8:	eaffffca 	b	354f8 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xfc>
   355cc:	e12fff33 	blx	r3
   355d0:	e1a03000 	mov	r3, r0
   355d4:	e5960000 	ldr	r0, [r6]
   355d8:	e5902000 	ldr	r2, [r0]
   355dc:	eaffffc1 	b	354e8 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xec>
   355e0:	e59d24c4 	ldr	r2, [sp, #1220]	; 0x4c4
   355e4:	e59f103c 	ldr	r1, [pc, #60]	; 35628 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x22c>
   355e8:	e59d04c0 	ldr	r0, [sp, #1216]	; 0x4c0
   355ec:	ebffe2a5 	bl	2e088 <strlcat>
   355f0:	eaffff8f 	b	35434 <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   355f4:	0003f00c 	.word	0x0003f00c
   355f8:	000469ec 	.word	0x000469ec
   355fc:	00046a14 	.word	0x00046a14
   35600:	00046a1c 	.word	0x00046a1c
   35604:	000358c0 	.word	0x000358c0
   35608:	000358b0 	.word	0x000358b0
   3560c:	00046a38 	.word	0x00046a38
   35610:	00043330 	.word	0x00043330
   35614:	000469f8 	.word	0x000469f8
   35618:	00046a00 	.word	0x00046a00
   3561c:	000469dc 	.word	0x000469dc
   35620:	000469e0 	.word	0x000469e0
   35624:	00046a08 	.word	0x00046a08
   35628:	00046a34 	.word	0x00046a34

0003562c <HwManager::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   3562c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   35630:	e99d5000 	ldmib	sp, {ip, lr}
   35634:	e3500000 	cmp	r0, #0
   35638:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3563c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   35640:	eaffff6d 	b	353fc <HwManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

00035644 <HwManager::setupFromJson(char const*, char const*)>:
   35644:	e1a03001 	mov	r3, r1
   35648:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3564c:	e24ddd61 	sub	sp, sp, #6208	; 0x1840
   35650:	e24dd01c 	sub	sp, sp, #28
   35654:	e28d1e4d 	add	r1, sp, #1232	; 0x4d0
   35658:	e58d1014 	str	r1, [sp, #20]
   3565c:	e58d001c 	str	r0, [sp, #28]
   35660:	e1a01002 	mov	r1, r2
   35664:	e1a00003 	mov	r0, r3
   35668:	e59d2014 	ldr	r2, [sp, #20]
   3566c:	e59f31e8 	ldr	r3, [pc, #488]	; 3585c <HwManager::setupFromJson(char const*, char const*)+0x218>
   35670:	ebffe31e 	bl	2e2f0 <jsonGetValueForKey>
   35674:	e3500000 	cmp	r0, #0
   35678:	1a000060 	bne	35800 <HwManager::setupFromJson(char const*, char const*)+0x1bc>
   3567c:	e59f31dc 	ldr	r3, [pc, #476]	; 35860 <HwManager::setupFromJson(char const*, char const*)+0x21c>
   35680:	e5937000 	ldr	r7, [r3]
   35684:	e1a00007 	mov	r0, r7
   35688:	ebffe351 	bl	2e3d4 <jsonGetArrayLen>
   3568c:	e1a08000 	mov	r8, r0
   35690:	ebffc54d 	bl	26bcc <CLogger::Get()>
   35694:	e58d8000 	str	r8, [sp]
   35698:	e59f31c4 	ldr	r3, [pc, #452]	; 35864 <HwManager::setupFromJson(char const*, char const*)+0x220>
   3569c:	e3a02004 	mov	r2, #4
   356a0:	e59f11c0 	ldr	r1, [pc, #448]	; 35868 <HwManager::setupFromJson(char const*, char const*)+0x224>
   356a4:	ebffc485 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   356a8:	e3580000 	cmp	r8, #0
   356ac:	da000050 	ble	357f4 <HwManager::setupFromJson(char const*, char const*)+0x1b0>
   356b0:	e3a04000 	mov	r4, #0
   356b4:	e59fa1b0 	ldr	sl, [pc, #432]	; 3586c <HwManager::setupFromJson(char const*, char const*)+0x228>
   356b8:	e59f91a8 	ldr	r9, [pc, #424]	; 35868 <HwManager::setupFromJson(char const*, char const*)+0x224>
   356bc:	e59fb1ac 	ldr	fp, [pc, #428]	; 35870 <HwManager::setupFromJson(char const*, char const*)+0x22c>
   356c0:	e28d60e8 	add	r6, sp, #232	; 0xe8
   356c4:	ea000002 	b	356d4 <HwManager::setupFromJson(char const*, char const*)+0x90>
   356c8:	e2844001 	add	r4, r4, #1
   356cc:	e1580004 	cmp	r8, r4
   356d0:	0a000047 	beq	357f4 <HwManager::setupFromJson(char const*, char const*)+0x1b0>
   356d4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   356d8:	e1a02006 	mov	r2, r6
   356dc:	e1a01007 	mov	r1, r7
   356e0:	e1a00004 	mov	r0, r4
   356e4:	ebffe356 	bl	2e444 <jsonGetArrayElem>
   356e8:	e1a05000 	mov	r5, r0
   356ec:	ebffc536 	bl	26bcc <CLogger::Get()>
   356f0:	e88d0060 	stm	sp, {r5, r6}
   356f4:	e1a0300a 	mov	r3, sl
   356f8:	e3a02004 	mov	r2, #4
   356fc:	e1a01009 	mov	r1, r9
   35700:	ebffc46e 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   35704:	e3550000 	cmp	r5, #0
   35708:	0affffee 	beq	356c8 <HwManager::setupFromJson(char const*, char const*)+0x84>
   3570c:	e28d3020 	add	r3, sp, #32
   35710:	e58d3014 	str	r3, [sp, #20]
   35714:	e1a02003 	mov	r2, r3
   35718:	e1a01006 	mov	r1, r6
   3571c:	e3a03064 	mov	r3, #100	; 0x64
   35720:	e1a0000b 	mov	r0, fp
   35724:	ebffe2f1 	bl	2e2f0 <jsonGetValueForKey>
   35728:	e2505000 	subs	r5, r0, #0
   3572c:	0affffe5 	beq	356c8 <HwManager::setupFromJson(char const*, char const*)+0x84>
   35730:	ebffc525 	bl	26bcc <CLogger::Get()>
   35734:	e59d3014 	ldr	r3, [sp, #20]
   35738:	e3a02004 	mov	r2, #4
   3573c:	e58d3004 	str	r3, [sp, #4]
   35740:	e1a01009 	mov	r1, r9
   35744:	e59f3128 	ldr	r3, [pc, #296]	; 35874 <HwManager::setupFromJson(char const*, char const*)+0x230>
   35748:	e58d4000 	str	r4, [sp]
   3574c:	ebffc45b 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   35750:	e28d3084 	add	r3, sp, #132	; 0x84
   35754:	e1a00003 	mov	r0, r3
   35758:	e59f1118 	ldr	r1, [pc, #280]	; 35878 <HwManager::setupFromJson(char const*, char const*)+0x234>
   3575c:	e58d3018 	str	r3, [sp, #24]
   35760:	ebffd303 	bl	2a374 <strcpy>
   35764:	e59d2018 	ldr	r2, [sp, #24]
   35768:	e3a03064 	mov	r3, #100	; 0x64
   3576c:	e1a01006 	mov	r1, r6
   35770:	e59f0104 	ldr	r0, [pc, #260]	; 3587c <HwManager::setupFromJson(char const*, char const*)+0x238>
   35774:	ebffe2dd 	bl	2e2f0 <jsonGetValueForKey>
   35778:	e3500000 	cmp	r0, #0
   3577c:	0a000032 	beq	3584c <HwManager::setupFromJson(char const*, char const*)+0x208>
   35780:	e59f10f8 	ldr	r1, [pc, #248]	; 35880 <HwManager::setupFromJson(char const*, char const*)+0x23c>
   35784:	e59d0018 	ldr	r0, [sp, #24]
   35788:	ebffd260 	bl	2a110 <strcasecmp>
   3578c:	e3500000 	cmp	r0, #0
   35790:	03a03001 	moveq	r3, #1
   35794:	1a000024 	bne	3582c <HwManager::setupFromJson(char const*, char const*)+0x1e8>
   35798:	e1a02005 	mov	r2, r5
   3579c:	e59d501c 	ldr	r5, [sp, #28]
   357a0:	e59d1014 	ldr	r1, [sp, #20]
   357a4:	e1a00005 	mov	r0, r5
   357a8:	e58d3018 	str	r3, [sp, #24]
   357ac:	ebfffe98 	bl	35214 <HwManager::enableHw(char const*, bool)>
   357b0:	ebffc505 	bl	26bcc <CLogger::Get()>
   357b4:	e59d3018 	ldr	r3, [sp, #24]
   357b8:	e58d4000 	str	r4, [sp]
   357bc:	e58d3008 	str	r3, [sp, #8]
   357c0:	e59d3014 	ldr	r3, [sp, #20]
   357c4:	e3a02004 	mov	r2, #4
   357c8:	e58d3004 	str	r3, [sp, #4]
   357cc:	e1a01009 	mov	r1, r9
   357d0:	e59f30ac 	ldr	r3, [pc, #172]	; 35884 <HwManager::setupFromJson(char const*, char const*)+0x240>
   357d4:	ebffc439 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   357d8:	e2844001 	add	r4, r4, #1
   357dc:	e1a02006 	mov	r2, r6
   357e0:	e59d1014 	ldr	r1, [sp, #20]
   357e4:	e1a00005 	mov	r0, r5
   357e8:	ebfffeda 	bl	35358 <HwManager::configureHw(char const*, char const*)>
   357ec:	e1580004 	cmp	r8, r4
   357f0:	1affffb7 	bne	356d4 <HwManager::setupFromJson(char const*, char const*)+0x90>
   357f4:	e28ddd61 	add	sp, sp, #6208	; 0x1840
   357f8:	e28dd01c 	add	sp, sp, #28
   357fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35800:	e59d0014 	ldr	r0, [sp, #20]
   35804:	ebffd21c 	bl	2a07c <strlen>
   35808:	e3500000 	cmp	r0, #0
   3580c:	0affff9a 	beq	3567c <HwManager::setupFromJson(char const*, char const*)+0x38>
   35810:	e59f1070 	ldr	r1, [pc, #112]	; 35888 <HwManager::setupFromJson(char const*, char const*)+0x244>
   35814:	e59d0014 	ldr	r0, [sp, #20]
   35818:	ebffd23c 	bl	2a110 <strcasecmp>
   3581c:	e3500000 	cmp	r0, #0
   35820:	0affff95 	beq	3567c <HwManager::setupFromJson(char const*, char const*)+0x38>
   35824:	e59d7014 	ldr	r7, [sp, #20]
   35828:	eaffff95 	b	35684 <HwManager::setupFromJson(char const*, char const*)+0x40>
   3582c:	e59d0018 	ldr	r0, [sp, #24]
   35830:	e3a0200a 	mov	r2, #10
   35834:	e3a01000 	mov	r1, #0
   35838:	ebffd35c 	bl	2a5b0 <strtoul>
   3583c:	e2905000 	adds	r5, r0, #0
   35840:	13a05001 	movne	r5, #1
   35844:	e1a03005 	mov	r3, r5
   35848:	eaffffd2 	b	35798 <HwManager::setupFromJson(char const*, char const*)+0x154>
   3584c:	e59f1024 	ldr	r1, [pc, #36]	; 35878 <HwManager::setupFromJson(char const*, char const*)+0x234>
   35850:	e59d0018 	ldr	r0, [sp, #24]
   35854:	ebffd2c6 	bl	2a374 <strcpy>
   35858:	eaffffc8 	b	35780 <HwManager::setupFromJson(char const*, char const*)+0x13c>
   3585c:	00001388 	.word	0x00001388
   35860:	00048294 	.word	0x00048294
   35864:	00046a58 	.word	0x00046a58
   35868:	00046978 	.word	0x00046978
   3586c:	00046a70 	.word	0x00046a70
   35870:	00046a90 	.word	0x00046a90
   35874:	00046a98 	.word	0x00046a98
   35878:	000400fc 	.word	0x000400fc
   3587c:	00046a00 	.word	0x00046a00
   35880:	000453a0 	.word	0x000453a0
   35884:	00046aac 	.word	0x00046aac
   35888:	00046a54 	.word	0x00046a54

0003588c <HwManager::busAccessAvailable()>:
   3588c:	e92d4010 	push	{r4, lr}
   35890:	e1a04000 	mov	r4, r0
   35894:	e5900004 	ldr	r0, [r0, #4]
   35898:	ebffef0c 	bl	314d0 <BusAccess::waitIsHeld()>
   3589c:	e3500000 	cmp	r0, #0
   358a0:	05d4003c 	ldrbeq	r0, [r4, #60]	; 0x3c
   358a4:	02200001 	eoreq	r0, r0, #1
   358a8:	13a00000 	movne	r0, #0
   358ac:	e8bd8010 	pop	{r4, pc}

000358b0 <HwBase::isEnabled()>:
   358b0:	e5d0000c 	ldrb	r0, [r0, #12]
   358b4:	e12fff1e 	bx	lr

000358b8 <HwBase::enable(bool)>:
   358b8:	e5c0100c 	strb	r1, [r0, #12]
   358bc:	e12fff1e 	bx	lr

000358c0 <HwBase::name()>:
   358c0:	e5900010 	ldr	r0, [r0, #16]
   358c4:	e12fff1e 	bx	lr

000358c8 <BusControlAPI::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   358c8:	e12fff1e 	bx	lr

000358cc <BusControlAPI::BusControlAPI(CommandHandler&, HwManager&, BusAccess&)>:
   358cc:	e92d4030 	push	{r4, r5, lr}
   358d0:	e3a0e000 	mov	lr, #0
   358d4:	e3e04000 	mvn	r4, #0
   358d8:	e59f5034 	ldr	r5, [pc, #52]	; 35914 <BusControlAPI::BusControlAPI(CommandHandler&, HwManager&, BusAccess&)+0x48>
   358dc:	e880000e 	stm	r0, {r1, r2, r3}
   358e0:	e580400c 	str	r4, [r0, #12]
   358e4:	e5850000 	str	r0, [r5]
   358e8:	e5804010 	str	r4, [r0, #16]
   358ec:	e5c0e414 	strb	lr, [r0, #1044]	; 0x414
   358f0:	e5c0e415 	strb	lr, [r0, #1045]	; 0x415
   358f4:	e580e418 	str	lr, [r0, #1048]	; 0x418
   358f8:	e580e41c 	str	lr, [r0, #1052]	; 0x41c
   358fc:	e5c0e420 	strb	lr, [r0, #1056]	; 0x420
   35900:	e580e424 	str	lr, [r0, #1060]	; 0x424
   35904:	e5c0e4f0 	strb	lr, [r0, #1264]	; 0x4f0
   35908:	e5c0e4f1 	strb	lr, [r0, #1265]	; 0x4f1
   3590c:	e5c0e4f2 	strb	lr, [r0, #1266]	; 0x4f2
   35910:	e8bd8030 	pop	{r4, r5, pc}
   35914:	0004e43c 	.word	0x0004e43c

00035918 <BusControlAPI::init()>:
   35918:	e92d4010 	push	{r4, lr}
   3591c:	e590300c 	ldr	r3, [r0, #12]
   35920:	e24dd030 	sub	sp, sp, #48	; 0x30
   35924:	e3530000 	cmp	r3, #0
   35928:	e1a04000 	mov	r4, r0
   3592c:	ba00000f 	blt	35970 <BusControlAPI::init()+0x58>
   35930:	e5943010 	ldr	r3, [r4, #16]
   35934:	e3530000 	cmp	r3, #0
   35938:	ba000001 	blt	35944 <BusControlAPI::init()+0x2c>
   3593c:	e28dd030 	add	sp, sp, #48	; 0x30
   35940:	e8bd8010 	pop	{r4, pc}
   35944:	e3a03000 	mov	r3, #0
   35948:	e5940000 	ldr	r0, [r4]
   3594c:	e3a02001 	mov	r2, #1
   35950:	e58d3004 	str	r3, [sp, #4]
   35954:	e58d3000 	str	r3, [sp]
   35958:	e1a01004 	mov	r1, r4
   3595c:	e59f3060 	ldr	r3, [pc, #96]	; 359c4 <BusControlAPI::init()+0xac>
   35960:	ebffe870 	bl	2fb28 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   35964:	e5840010 	str	r0, [r4, #16]
   35968:	e28dd030 	add	sp, sp, #48	; 0x30
   3596c:	e8bd8010 	pop	{r4, pc}
   35970:	e3a03000 	mov	r3, #0
   35974:	e3a02004 	mov	r2, #4
   35978:	e5900008 	ldr	r0, [r0, #8]
   3597c:	e3a01001 	mov	r1, #1
   35980:	e58d3028 	str	r3, [sp, #40]	; 0x28
   35984:	e58d3020 	str	r3, [sp, #32]
   35988:	e58d301c 	str	r3, [sp, #28]
   3598c:	e58d3018 	str	r3, [sp, #24]
   35990:	e58d3014 	str	r3, [sp, #20]
   35994:	e58d3010 	str	r3, [sp, #16]
   35998:	e58d300c 	str	r3, [sp, #12]
   3599c:	e58d3008 	str	r3, [sp, #8]
   359a0:	e58d3004 	str	r3, [sp, #4]
   359a4:	e58d3000 	str	r3, [sp]
   359a8:	e58d2024 	str	r2, [sp, #36]	; 0x24
   359ac:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   359b0:	e59f3010 	ldr	r3, [pc, #16]	; 359c8 <BusControlAPI::init()+0xb0>
   359b4:	e59f2010 	ldr	r2, [pc, #16]	; 359cc <BusControlAPI::init()+0xb4>
   359b8:	ebfff5f6 	bl	33198 <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   359bc:	e584000c 	str	r0, [r4, #12]
   359c0:	eaffffda 	b	35930 <BusControlAPI::init()+0x18>
   359c4:	00037058 	.word	0x00037058
   359c8:	000361f8 	.word	0x000361f8
   359cc:	000358c8 	.word	0x000358c8

000359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>:
   359d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   359d4:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
   359d8:	e1a08003 	mov	r8, r3
   359dc:	e1a09001 	mov	r9, r1
   359e0:	e1a05002 	mov	r5, r2
   359e4:	e1a01003 	mov	r1, r3
   359e8:	e28d206c 	add	r2, sp, #108	; 0x6c
   359ec:	e3a030c8 	mov	r3, #200	; 0xc8
   359f0:	e59f01b4 	ldr	r0, [pc, #436]	; 35bac <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1dc>
   359f4:	e5dda16c 	ldrb	sl, [sp, #364]	; 0x16c
   359f8:	ebffe23c 	bl	2e2f0 <jsonGetValueForKey>
   359fc:	e2507000 	subs	r7, r0, #0
   35a00:	0a00000e 	beq	35a40 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x70>
   35a04:	e2955001 	adds	r5, r5, #1
   35a08:	e28d406c 	add	r4, sp, #108	; 0x6c
   35a0c:	4a000038 	bmi	35af4 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x124>
   35a10:	e3a0b000 	mov	fp, #0
   35a14:	e59f6194 	ldr	r6, [pc, #404]	; 35bb0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1e0>
   35a18:	ea000002 	b	35a28 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x58>
   35a1c:	e15b0005 	cmp	fp, r5
   35a20:	e2804001 	add	r4, r0, #1
   35a24:	ca000030 	bgt	35aec <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x11c>
   35a28:	e1a00004 	mov	r0, r4
   35a2c:	e1a01006 	mov	r1, r6
   35a30:	ebffd28e 	bl	2a470 <strstr>
   35a34:	e3500000 	cmp	r0, #0
   35a38:	e28bb001 	add	fp, fp, #1
   35a3c:	1afffff6 	bne	35a1c <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x4c>
   35a40:	e3a02032 	mov	r2, #50	; 0x32
   35a44:	e1a01009 	mov	r1, r9
   35a48:	e28d0038 	add	r0, sp, #56	; 0x38
   35a4c:	ebffe171 	bl	2e018 <strlcpy>
   35a50:	e3a02032 	mov	r2, #50	; 0x32
   35a54:	e59f1158 	ldr	r1, [pc, #344]	; 35bb4 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1e4>
   35a58:	e28d0038 	add	r0, sp, #56	; 0x38
   35a5c:	ebffe189 	bl	2e088 <strlcat>
   35a60:	e1a00009 	mov	r0, r9
   35a64:	e28d2004 	add	r2, sp, #4
   35a68:	e3a03032 	mov	r3, #50	; 0x32
   35a6c:	e1a01008 	mov	r1, r8
   35a70:	ebffe21e 	bl	2e2f0 <jsonGetValueForKey>
   35a74:	e2507000 	subs	r7, r0, #0
   35a78:	0a000034 	beq	35b50 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x180>
   35a7c:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   35a80:	e3530000 	cmp	r3, #0
   35a84:	0a000003 	beq	35a98 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xc8>
   35a88:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   35a8c:	e28d1004 	add	r1, sp, #4
   35a90:	e1a00003 	mov	r0, r3
   35a94:	ebffe15f 	bl	2e018 <strlcpy>
   35a98:	e35a0000 	cmp	sl, #0
   35a9c:	0a000009 	beq	35ac8 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xf8>
   35aa0:	e28d0004 	add	r0, sp, #4
   35aa4:	e3a0200a 	mov	r2, #10
   35aa8:	e3a01000 	mov	r1, #0
   35aac:	ebffd2bf 	bl	2a5b0 <strtoul>
   35ab0:	e1a0700a 	mov	r7, sl
   35ab4:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   35ab8:	e5830000 	str	r0, [r3]
   35abc:	e1a00007 	mov	r0, r7
   35ac0:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   35ac4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35ac8:	e1a0100a 	mov	r1, sl
   35acc:	e28d0004 	add	r0, sp, #4
   35ad0:	e3a02010 	mov	r2, #16
   35ad4:	ebffd2b5 	bl	2a5b0 <strtoul>
   35ad8:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   35adc:	e5830000 	str	r0, [r3]
   35ae0:	e1a00007 	mov	r0, r7
   35ae4:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   35ae8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35aec:	e3540000 	cmp	r4, #0
   35af0:	0affffd2 	beq	35a40 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x70>
   35af4:	e1a00004 	mov	r0, r4
   35af8:	ebffd15f 	bl	2a07c <strlen>
   35afc:	e3500000 	cmp	r0, #0
   35b00:	0affffce 	beq	35a40 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x70>
   35b04:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   35b08:	e3530000 	cmp	r3, #0
   35b0c:	0a000003 	beq	35b20 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x150>
   35b10:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   35b14:	e1a01004 	mov	r1, r4
   35b18:	e1a00003 	mov	r0, r3
   35b1c:	ebffe13d 	bl	2e018 <strlcpy>
   35b20:	e35a0000 	cmp	sl, #0
   35b24:	11a00004 	movne	r0, r4
   35b28:	1affffdd 	bne	35aa4 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0xd4>
   35b2c:	e1a0100a 	mov	r1, sl
   35b30:	e1a00004 	mov	r0, r4
   35b34:	e3a02010 	mov	r2, #16
   35b38:	ebffd29c 	bl	2a5b0 <strtoul>
   35b3c:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   35b40:	e5830000 	str	r0, [r3]
   35b44:	e1a00007 	mov	r0, r7
   35b48:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   35b4c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35b50:	e1a01008 	mov	r1, r8
   35b54:	e28d0038 	add	r0, sp, #56	; 0x38
   35b58:	e3a03032 	mov	r3, #50	; 0x32
   35b5c:	e28d2004 	add	r2, sp, #4
   35b60:	ebffe1e2 	bl	2e2f0 <jsonGetValueForKey>
   35b64:	e2507000 	subs	r7, r0, #0
   35b68:	0affffdc 	beq	35ae0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x110>
   35b6c:	e59d3164 	ldr	r3, [sp, #356]	; 0x164
   35b70:	e3530000 	cmp	r3, #0
   35b74:	0a000003 	beq	35b88 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)+0x1b8>
   35b78:	e59d2168 	ldr	r2, [sp, #360]	; 0x168
   35b7c:	e28d1004 	add	r1, sp, #4
   35b80:	e1a00003 	mov	r0, r3
   35b84:	ebffe123 	bl	2e018 <strlcpy>
   35b88:	e28d0004 	add	r0, sp, #4
   35b8c:	e3a0200a 	mov	r2, #10
   35b90:	e3a01000 	mov	r1, #0
   35b94:	ebffd285 	bl	2a5b0 <strtoul>
   35b98:	e59d3160 	ldr	r3, [sp, #352]	; 0x160
   35b9c:	e5830000 	str	r0, [r3]
   35ba0:	e1a00007 	mov	r0, r7
   35ba4:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   35ba8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35bac:	00046b34 	.word	0x00046b34
   35bb0:	00047050 	.word	0x00047050
   35bb4:	00045840 	.word	0x00045840

00035bb8 <BusControlAPI::busLineHandler(char const*)>:
   35bb8:	e92d4070 	push	{r4, r5, r6, lr}
   35bbc:	e1a04001 	mov	r4, r1
   35bc0:	e3a01032 	mov	r1, #50	; 0x32
   35bc4:	e3a05000 	mov	r5, #0
   35bc8:	e24dd050 	sub	sp, sp, #80	; 0x50
   35bcc:	e28d2014 	add	r2, sp, #20
   35bd0:	e58d1008 	str	r1, [sp, #8]
   35bd4:	e28d101c 	add	r1, sp, #28
   35bd8:	e58d1004 	str	r1, [sp, #4]
   35bdc:	e58d2000 	str	r2, [sp]
   35be0:	e1a03004 	mov	r3, r4
   35be4:	e58d500c 	str	r5, [sp, #12]
   35be8:	e3a02001 	mov	r2, #1
   35bec:	e59f129c 	ldr	r1, [pc, #668]	; 35e90 <BusControlAPI::busLineHandler(char const*)+0x2d8>
   35bf0:	e1a06000 	mov	r6, r0
   35bf4:	ebffff75 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35bf8:	e1500005 	cmp	r0, r5
   35bfc:	1a000003 	bne	35c10 <BusControlAPI::busLineHandler(char const*)+0x58>
   35c00:	e3a04000 	mov	r4, #0
   35c04:	e1a00004 	mov	r0, r4
   35c08:	e28dd050 	add	sp, sp, #80	; 0x50
   35c0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   35c10:	e59f127c 	ldr	r1, [pc, #636]	; 35e94 <BusControlAPI::busLineHandler(char const*)+0x2dc>
   35c14:	e28d001c 	add	r0, sp, #28
   35c18:	ebffd214 	bl	2a470 <strstr>
   35c1c:	e3a02000 	mov	r2, #0
   35c20:	e3500000 	cmp	r0, #0
   35c24:	e28d1050 	add	r1, sp, #80	; 0x50
   35c28:	15c05000 	strbne	r5, [r0]
   35c2c:	e5212038 	str	r2, [r1, #-56]!	; 0xffffffc8
   35c30:	e88d0006 	stm	sp, {r1, r2}
   35c34:	e1a03004 	mov	r3, r4
   35c38:	e58d200c 	str	r2, [sp, #12]
   35c3c:	e58d2008 	str	r2, [sp, #8]
   35c40:	e59f1250 	ldr	r1, [pc, #592]	; 35e98 <BusControlAPI::busLineHandler(char const*)+0x2e0>
   35c44:	e3a02002 	mov	r2, #2
   35c48:	e1a00006 	mov	r0, r6
   35c4c:	ebffff5f 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35c50:	e2504000 	subs	r4, r0, #0
   35c54:	0affffe9 	beq	35c00 <BusControlAPI::busLineHandler(char const*)+0x48>
   35c58:	e5965008 	ldr	r5, [r6, #8]
   35c5c:	ebffc3da 	bl	26bcc <CLogger::Get()>
   35c60:	e59d3018 	ldr	r3, [sp, #24]
   35c64:	e28d201c 	add	r2, sp, #28
   35c68:	e88d000c 	stm	sp, {r2, r3}
   35c6c:	e59f1228 	ldr	r1, [pc, #552]	; 35e9c <BusControlAPI::busLineHandler(char const*)+0x2e4>
   35c70:	e59f3228 	ldr	r3, [pc, #552]	; 35ea0 <BusControlAPI::busLineHandler(char const*)+0x2e8>
   35c74:	e3a02004 	mov	r2, #4
   35c78:	ebffc310 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   35c7c:	e59f1220 	ldr	r1, [pc, #544]	; 35ea4 <BusControlAPI::busLineHandler(char const*)+0x2ec>
   35c80:	e28d001c 	add	r0, sp, #28
   35c84:	ebffd121 	bl	2a110 <strcasecmp>
   35c88:	e3500000 	cmp	r0, #0
   35c8c:	0a000036 	beq	35d6c <BusControlAPI::busLineHandler(char const*)+0x1b4>
   35c90:	e59f1210 	ldr	r1, [pc, #528]	; 35ea8 <BusControlAPI::busLineHandler(char const*)+0x2f0>
   35c94:	e28d001c 	add	r0, sp, #28
   35c98:	ebffd11c 	bl	2a110 <strcasecmp>
   35c9c:	e3500000 	cmp	r0, #0
   35ca0:	0a00003e 	beq	35da0 <BusControlAPI::busLineHandler(char const*)+0x1e8>
   35ca4:	e59f1200 	ldr	r1, [pc, #512]	; 35eac <BusControlAPI::busLineHandler(char const*)+0x2f4>
   35ca8:	e28d001c 	add	r0, sp, #28
   35cac:	ebffd117 	bl	2a110 <strcasecmp>
   35cb0:	e2501000 	subs	r1, r0, #0
   35cb4:	0a000033 	beq	35d88 <BusControlAPI::busLineHandler(char const*)+0x1d0>
   35cb8:	e59f11f0 	ldr	r1, [pc, #496]	; 35eb0 <BusControlAPI::busLineHandler(char const*)+0x2f8>
   35cbc:	e28d001c 	add	r0, sp, #28
   35cc0:	ebffd112 	bl	2a110 <strcasecmp>
   35cc4:	e3500000 	cmp	r0, #0
   35cc8:	0a00003b 	beq	35dbc <BusControlAPI::busLineHandler(char const*)+0x204>
   35ccc:	e59f11e0 	ldr	r1, [pc, #480]	; 35eb4 <BusControlAPI::busLineHandler(char const*)+0x2fc>
   35cd0:	e28d001c 	add	r0, sp, #28
   35cd4:	ebffd10d 	bl	2a110 <strcasecmp>
   35cd8:	e3500000 	cmp	r0, #0
   35cdc:	0a000036 	beq	35dbc <BusControlAPI::busLineHandler(char const*)+0x204>
   35ce0:	e59f11d0 	ldr	r1, [pc, #464]	; 35eb8 <BusControlAPI::busLineHandler(char const*)+0x300>
   35ce4:	e28d001c 	add	r0, sp, #28
   35ce8:	ebffd108 	bl	2a110 <strcasecmp>
   35cec:	e3500000 	cmp	r0, #0
   35cf0:	0a000038 	beq	35dd8 <BusControlAPI::busLineHandler(char const*)+0x220>
   35cf4:	e59f11c0 	ldr	r1, [pc, #448]	; 35ebc <BusControlAPI::busLineHandler(char const*)+0x304>
   35cf8:	e28d001c 	add	r0, sp, #28
   35cfc:	ebffd103 	bl	2a110 <strcasecmp>
   35d00:	e3500000 	cmp	r0, #0
   35d04:	0a00003a 	beq	35df4 <BusControlAPI::busLineHandler(char const*)+0x23c>
   35d08:	e59f11b0 	ldr	r1, [pc, #432]	; 35ec0 <BusControlAPI::busLineHandler(char const*)+0x308>
   35d0c:	e28d001c 	add	r0, sp, #28
   35d10:	ebffd0fe 	bl	2a110 <strcasecmp>
   35d14:	e3500000 	cmp	r0, #0
   35d18:	0a00003c 	beq	35e10 <BusControlAPI::busLineHandler(char const*)+0x258>
   35d1c:	e59f11a0 	ldr	r1, [pc, #416]	; 35ec4 <BusControlAPI::busLineHandler(char const*)+0x30c>
   35d20:	e28d001c 	add	r0, sp, #28
   35d24:	ebffd0f9 	bl	2a110 <strcasecmp>
   35d28:	e3500000 	cmp	r0, #0
   35d2c:	0a00003e 	beq	35e2c <BusControlAPI::busLineHandler(char const*)+0x274>
   35d30:	e59f1190 	ldr	r1, [pc, #400]	; 35ec8 <BusControlAPI::busLineHandler(char const*)+0x310>
   35d34:	e28d001c 	add	r0, sp, #28
   35d38:	ebffd0f4 	bl	2a110 <strcasecmp>
   35d3c:	e3500000 	cmp	r0, #0
   35d40:	1a000040 	bne	35e48 <BusControlAPI::busLineHandler(char const*)+0x290>
   35d44:	e5953000 	ldr	r3, [r5]
   35d48:	e3530011 	cmp	r3, #17
   35d4c:	1affffac 	bne	35c04 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35d50:	e59d2018 	ldr	r2, [sp, #24]
   35d54:	e1a00005 	mov	r0, r5
   35d58:	e2922000 	adds	r2, r2, #0
   35d5c:	13a02001 	movne	r2, #1
   35d60:	e3a01003 	mov	r1, #3
   35d64:	ebfff96d 	bl	34320 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35d68:	eaffffa5 	b	35c04 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35d6c:	e59d2018 	ldr	r2, [sp, #24]
   35d70:	e1a00005 	mov	r0, r5
   35d74:	e2922000 	adds	r2, r2, #0
   35d78:	13a02001 	movne	r2, #1
   35d7c:	e3a01011 	mov	r1, #17
   35d80:	ebfff966 	bl	34320 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35d84:	eaffff9e 	b	35c04 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35d88:	e59d2018 	ldr	r2, [sp, #24]
   35d8c:	e1a00005 	mov	r0, r5
   35d90:	e2922000 	adds	r2, r2, #0
   35d94:	13a02001 	movne	r2, #1
   35d98:	ebfff960 	bl	34320 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35d9c:	eaffff98 	b	35c04 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35da0:	e59d2018 	ldr	r2, [sp, #24]
   35da4:	e1a00005 	mov	r0, r5
   35da8:	e2922000 	adds	r2, r2, #0
   35dac:	13a02001 	movne	r2, #1
   35db0:	e3a01012 	mov	r1, #18
   35db4:	ebfff959 	bl	34320 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35db8:	eaffff91 	b	35c04 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35dbc:	e59d2018 	ldr	r2, [sp, #24]
   35dc0:	e1a00005 	mov	r0, r5
   35dc4:	e2922000 	adds	r2, r2, #0
   35dc8:	13a02001 	movne	r2, #1
   35dcc:	e3a01001 	mov	r1, #1
   35dd0:	ebfff952 	bl	34320 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35dd4:	eaffff8a 	b	35c04 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35dd8:	e59d2018 	ldr	r2, [sp, #24]
   35ddc:	e1a00005 	mov	r0, r5
   35de0:	e2922000 	adds	r2, r2, #0
   35de4:	13a02001 	movne	r2, #1
   35de8:	e3a01006 	mov	r1, #6
   35dec:	ebfff94b 	bl	34320 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35df0:	eaffff83 	b	35c04 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35df4:	e59d2018 	ldr	r2, [sp, #24]
   35df8:	e1a00005 	mov	r0, r5
   35dfc:	e2922000 	adds	r2, r2, #0
   35e00:	13a02001 	movne	r2, #1
   35e04:	e3a0100c 	mov	r1, #12
   35e08:	ebfff944 	bl	34320 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35e0c:	eaffff7c 	b	35c04 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35e10:	e59d2018 	ldr	r2, [sp, #24]
   35e14:	e1a00005 	mov	r0, r5
   35e18:	e2922000 	adds	r2, r2, #0
   35e1c:	13a02001 	movne	r2, #1
   35e20:	e3a0100d 	mov	r1, #13
   35e24:	ebfff93d 	bl	34320 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35e28:	eaffff75 	b	35c04 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35e2c:	e59d2018 	ldr	r2, [sp, #24]
   35e30:	e1a00005 	mov	r0, r5
   35e34:	e2922000 	adds	r2, r2, #0
   35e38:	13a02001 	movne	r2, #1
   35e3c:	e3a01007 	mov	r1, #7
   35e40:	ebfff936 	bl	34320 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35e44:	eaffff6e 	b	35c04 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35e48:	e59f107c 	ldr	r1, [pc, #124]	; 35ecc <BusControlAPI::busLineHandler(char const*)+0x314>
   35e4c:	e28d001c 	add	r0, sp, #28
   35e50:	ebffd0ae 	bl	2a110 <strcasecmp>
   35e54:	e3500000 	cmp	r0, #0
   35e58:	0a000005 	beq	35e74 <BusControlAPI::busLineHandler(char const*)+0x2bc>
   35e5c:	e28d001c 	add	r0, sp, #28
   35e60:	e59f1068 	ldr	r1, [pc, #104]	; 35ed0 <BusControlAPI::busLineHandler(char const*)+0x318>
   35e64:	ebffd0a9 	bl	2a110 <strcasecmp>
   35e68:	e3500000 	cmp	r0, #0
   35e6c:	1affff64 	bne	35c04 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35e70:	eaffffb6 	b	35d50 <BusControlAPI::busLineHandler(char const*)+0x198>
   35e74:	e59d2018 	ldr	r2, [sp, #24]
   35e78:	e1a00005 	mov	r0, r5
   35e7c:	e2922000 	adds	r2, r2, #0
   35e80:	13a02001 	movne	r2, #1
   35e84:	e3a01004 	mov	r1, #4
   35e88:	ebfff924 	bl	34320 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   35e8c:	eaffff5c 	b	35c04 <BusControlAPI::busLineHandler(char const*)+0x4c>
   35e90:	00046b3c 	.word	0x00046b3c
   35e94:	00047050 	.word	0x00047050
   35e98:	00046b44 	.word	0x00046b44
   35e9c:	00046b24 	.word	0x00046b24
   35ea0:	00046b4c 	.word	0x00046b4c
   35ea4:	00046b60 	.word	0x00046b60
   35ea8:	00046b64 	.word	0x00046b64
   35eac:	00046b68 	.word	0x00046b68
   35eb0:	00046b70 	.word	0x00046b70
   35eb4:	00046b78 	.word	0x00046b78
   35eb8:	00046b80 	.word	0x00046b80
   35ebc:	00046b8c 	.word	0x00046b8c
   35ec0:	00046b9c 	.word	0x00046b9c
   35ec4:	00046bac 	.word	0x00046bac
   35ec8:	00046bb8 	.word	0x00046bb8
   35ecc:	00046bc4 	.word	0x00046bc4
   35ed0:	00046bcc 	.word	0x00046bcc

00035ed4 <BusControlAPI::muxLineHandler(char const*)>:
   35ed4:	e92d4070 	push	{r4, r5, r6, lr}
   35ed8:	e3a0c032 	mov	ip, #50	; 0x32
   35edc:	e3a04000 	mov	r4, #0
   35ee0:	e24dd048 	sub	sp, sp, #72	; 0x48
   35ee4:	e28d2010 	add	r2, sp, #16
   35ee8:	e1a03001 	mov	r3, r1
   35eec:	e28d1014 	add	r1, sp, #20
   35ef0:	e58d1004 	str	r1, [sp, #4]
   35ef4:	e58d2000 	str	r2, [sp]
   35ef8:	e58d400c 	str	r4, [sp, #12]
   35efc:	e58dc008 	str	ip, [sp, #8]
   35f00:	e3a02001 	mov	r2, #1
   35f04:	e59f1170 	ldr	r1, [pc, #368]	; 3607c <BusControlAPI::muxLineHandler(char const*)+0x1a8>
   35f08:	e1a06000 	mov	r6, r0
   35f0c:	ebfffeaf 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   35f10:	e2505000 	subs	r5, r0, #0
   35f14:	1a000002 	bne	35f24 <BusControlAPI::muxLineHandler(char const*)+0x50>
   35f18:	e1a00005 	mov	r0, r5
   35f1c:	e28dd048 	add	sp, sp, #72	; 0x48
   35f20:	e8bd8070 	pop	{r4, r5, r6, pc}
   35f24:	e59f1154 	ldr	r1, [pc, #340]	; 36080 <BusControlAPI::muxLineHandler(char const*)+0x1ac>
   35f28:	e28d0014 	add	r0, sp, #20
   35f2c:	ebffd14f 	bl	2a470 <strstr>
   35f30:	e3500000 	cmp	r0, #0
   35f34:	15c04000 	strbne	r4, [r0]
   35f38:	ebffc323 	bl	26bcc <CLogger::Get()>
   35f3c:	e28d3014 	add	r3, sp, #20
   35f40:	e58d3000 	str	r3, [sp]
   35f44:	e3a02004 	mov	r2, #4
   35f48:	e59f3134 	ldr	r3, [pc, #308]	; 36084 <BusControlAPI::muxLineHandler(char const*)+0x1b0>
   35f4c:	e59f1134 	ldr	r1, [pc, #308]	; 36088 <BusControlAPI::muxLineHandler(char const*)+0x1b4>
   35f50:	ebffc25a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   35f54:	e59f1130 	ldr	r1, [pc, #304]	; 3608c <BusControlAPI::muxLineHandler(char const*)+0x1b8>
   35f58:	e28d0014 	add	r0, sp, #20
   35f5c:	e5964008 	ldr	r4, [r6, #8]
   35f60:	ebffd06a 	bl	2a110 <strcasecmp>
   35f64:	e2501000 	subs	r1, r0, #0
   35f68:	0a00002a 	beq	36018 <BusControlAPI::muxLineHandler(char const*)+0x144>
   35f6c:	e59f111c 	ldr	r1, [pc, #284]	; 36090 <BusControlAPI::muxLineHandler(char const*)+0x1bc>
   35f70:	e28d0014 	add	r0, sp, #20
   35f74:	ebffd065 	bl	2a110 <strcasecmp>
   35f78:	e3500000 	cmp	r0, #0
   35f7c:	0a000021 	beq	36008 <BusControlAPI::muxLineHandler(char const*)+0x134>
   35f80:	e59f110c 	ldr	r1, [pc, #268]	; 36094 <BusControlAPI::muxLineHandler(char const*)+0x1c0>
   35f84:	e28d0014 	add	r0, sp, #20
   35f88:	ebffd060 	bl	2a110 <strcasecmp>
   35f8c:	e3500000 	cmp	r0, #0
   35f90:	0a000025 	beq	3602c <BusControlAPI::muxLineHandler(char const*)+0x158>
   35f94:	e59f10fc 	ldr	r1, [pc, #252]	; 36098 <BusControlAPI::muxLineHandler(char const*)+0x1c4>
   35f98:	e28d0014 	add	r0, sp, #20
   35f9c:	ebffd05b 	bl	2a110 <strcasecmp>
   35fa0:	e3500000 	cmp	r0, #0
   35fa4:	0a000028 	beq	3604c <BusControlAPI::muxLineHandler(char const*)+0x178>
   35fa8:	e59f10ec 	ldr	r1, [pc, #236]	; 3609c <BusControlAPI::muxLineHandler(char const*)+0x1c8>
   35fac:	e28d0014 	add	r0, sp, #20
   35fb0:	ebffd056 	bl	2a110 <strcasecmp>
   35fb4:	e3500000 	cmp	r0, #0
   35fb8:	0a00001f 	beq	3603c <BusControlAPI::muxLineHandler(char const*)+0x168>
   35fbc:	e59f10dc 	ldr	r1, [pc, #220]	; 360a0 <BusControlAPI::muxLineHandler(char const*)+0x1cc>
   35fc0:	e28d0014 	add	r0, sp, #20
   35fc4:	ebffd051 	bl	2a110 <strcasecmp>
   35fc8:	e3500000 	cmp	r0, #0
   35fcc:	0a000022 	beq	3605c <BusControlAPI::muxLineHandler(char const*)+0x188>
   35fd0:	e59f10cc 	ldr	r1, [pc, #204]	; 360a4 <BusControlAPI::muxLineHandler(char const*)+0x1d0>
   35fd4:	e28d0014 	add	r0, sp, #20
   35fd8:	ebffd04c 	bl	2a110 <strcasecmp>
   35fdc:	e3500000 	cmp	r0, #0
   35fe0:	0a000021 	beq	3606c <BusControlAPI::muxLineHandler(char const*)+0x198>
   35fe4:	e28d0014 	add	r0, sp, #20
   35fe8:	e59f10b8 	ldr	r1, [pc, #184]	; 360a8 <BusControlAPI::muxLineHandler(char const*)+0x1d4>
   35fec:	ebffd047 	bl	2a110 <strcasecmp>
   35ff0:	e3500000 	cmp	r0, #0
   35ff4:	1affffc7 	bne	35f18 <BusControlAPI::muxLineHandler(char const*)+0x44>
   35ff8:	e1a00004 	mov	r0, r4
   35ffc:	e3a01007 	mov	r1, #7
   36000:	ebfff8e7 	bl	343a4 <BusAccess::rawBusControlMuxSet(unsigned long)>
   36004:	eaffffc3 	b	35f18 <BusControlAPI::muxLineHandler(char const*)+0x44>
   36008:	e1a00004 	mov	r0, r4
   3600c:	e3a01004 	mov	r1, #4
   36010:	ebfff8e3 	bl	343a4 <BusAccess::rawBusControlMuxSet(unsigned long)>
   36014:	eaffffbf 	b	35f18 <BusControlAPI::muxLineHandler(char const*)+0x44>
   36018:	e1a00004 	mov	r0, r4
   3601c:	ebfff8e0 	bl	343a4 <BusAccess::rawBusControlMuxSet(unsigned long)>
   36020:	e1a00005 	mov	r0, r5
   36024:	e28dd048 	add	sp, sp, #72	; 0x48
   36028:	e8bd8070 	pop	{r4, r5, r6, pc}
   3602c:	e1a00004 	mov	r0, r4
   36030:	e3a01001 	mov	r1, #1
   36034:	ebfff8da 	bl	343a4 <BusAccess::rawBusControlMuxSet(unsigned long)>
   36038:	eaffffb6 	b	35f18 <BusControlAPI::muxLineHandler(char const*)+0x44>
   3603c:	e1a00004 	mov	r0, r4
   36040:	e3a01002 	mov	r1, #2
   36044:	ebfff8d6 	bl	343a4 <BusAccess::rawBusControlMuxSet(unsigned long)>
   36048:	eaffffb2 	b	35f18 <BusControlAPI::muxLineHandler(char const*)+0x44>
   3604c:	e1a00004 	mov	r0, r4
   36050:	e3a01005 	mov	r1, #5
   36054:	ebfff8d2 	bl	343a4 <BusAccess::rawBusControlMuxSet(unsigned long)>
   36058:	eaffffae 	b	35f18 <BusControlAPI::muxLineHandler(char const*)+0x44>
   3605c:	e1a00004 	mov	r0, r4
   36060:	e3a01006 	mov	r1, #6
   36064:	ebfff8ce 	bl	343a4 <BusAccess::rawBusControlMuxSet(unsigned long)>
   36068:	eaffffaa 	b	35f18 <BusControlAPI::muxLineHandler(char const*)+0x44>
   3606c:	e1a00004 	mov	r0, r4
   36070:	e3a01003 	mov	r1, #3
   36074:	ebfff8ca 	bl	343a4 <BusAccess::rawBusControlMuxSet(unsigned long)>
   36078:	eaffffa6 	b	35f18 <BusControlAPI::muxLineHandler(char const*)+0x44>
   3607c:	00046b3c 	.word	0x00046b3c
   36080:	00047050 	.word	0x00047050
   36084:	00046bd0 	.word	0x00046bd0
   36088:	00046b24 	.word	0x00046b24
   3608c:	00046bdc 	.word	0x00046bdc
   36090:	00046be8 	.word	0x00046be8
   36094:	00046bf8 	.word	0x00046bf8
   36098:	0003f4ec 	.word	0x0003f4ec
   3609c:	00046c04 	.word	0x00046c04
   360a0:	00046c08 	.word	0x00046c08
   360a4:	00046c0c 	.word	0x00046c0c
   360a8:	00046c1c 	.word	0x00046c1c

000360ac <BusControlAPI::busLinesRead(char*, int)>:
   360ac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   360b0:	e5906008 	ldr	r6, [r0, #8]
   360b4:	e24dd01c 	sub	sp, sp, #28
   360b8:	e1a00006 	mov	r0, r6
   360bc:	e1a08002 	mov	r8, r2
   360c0:	e1a07001 	mov	r7, r1
   360c4:	ebfff884 	bl	342dc <BusAccess::rawBusControlReadRaw()>
   360c8:	e5963000 	ldr	r3, [r6]
   360cc:	e1a05000 	mov	r5, r0
   360d0:	e3530011 	cmp	r3, #17
   360d4:	11a021a0 	lsrne	r2, r0, #3
   360d8:	01a02a20 	lsreq	r2, r0, #20
   360dc:	e1a00006 	mov	r0, r6
   360e0:	e2024001 	and	r4, r2, #1
   360e4:	ebfff87c 	bl	342dc <BusAccess::rawBusControlReadRaw()>
   360e8:	e1a09000 	mov	r9, r0
   360ec:	e1a00006 	mov	r0, r6
   360f0:	ebfff879 	bl	342dc <BusAccess::rawBusControlReadRaw()>
   360f4:	e3150001 	tst	r5, #1
   360f8:	13a0604d 	movne	r6, #77	; 0x4d
   360fc:	03a0602e 	moveq	r6, #46	; 0x2e
   36100:	e3150002 	tst	r5, #2
   36104:	13a0e049 	movne	lr, #73	; 0x49
   36108:	03a0e02e 	moveq	lr, #46	; 0x2e
   3610c:	e3150701 	tst	r5, #262144	; 0x40000
   36110:	13a0c052 	movne	ip, #82	; 0x52
   36114:	03a0c02e 	moveq	ip, #46	; 0x2e
   36118:	e3150802 	tst	r5, #131072	; 0x20000
   3611c:	13a05057 	movne	r5, #87	; 0x57
   36120:	03a0502e 	moveq	r5, #46	; 0x2e
   36124:	e3540000 	cmp	r4, #0
   36128:	13a02031 	movne	r2, #49	; 0x31
   3612c:	03a0202e 	moveq	r2, #46	; 0x2e
   36130:	e1a00a20 	lsr	r0, r0, #20
   36134:	e6ef0070 	uxtb	r0, r0
   36138:	e58d0000 	str	r0, [sp]
   3613c:	e58d2014 	str	r2, [sp, #20]
   36140:	e1a03009 	mov	r3, r9
   36144:	e1a01008 	mov	r1, r8
   36148:	e1a00007 	mov	r0, r7
   3614c:	e98d4040 	stmib	sp, {r6, lr}
   36150:	e58dc00c 	str	ip, [sp, #12]
   36154:	e58d5010 	str	r5, [sp, #16]
   36158:	e59f2008 	ldr	r2, [pc, #8]	; 36168 <BusControlAPI::busLinesRead(char*, int)+0xbc>
   3615c:	ebffe024 	bl	2e1f4 <snprintf>
   36160:	e28dd01c 	add	sp, sp, #28
   36164:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   36168:	00046c2c 	.word	0x00046c2c

0003616c <BusControlAPI::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   3616c:	e3510004 	cmp	r1, #4
   36170:	112fff1e 	bxne	lr
   36174:	e5d03414 	ldrb	r3, [r0, #1044]	; 0x414
   36178:	e3530000 	cmp	r3, #0
   3617c:	012fff1e 	bxeq	lr
   36180:	e92d4010 	push	{r4, lr}
   36184:	e5d02415 	ldrb	r2, [r0, #1045]	; 0x415
   36188:	e1a04000 	mov	r4, r0
   3618c:	e3520000 	cmp	r2, #0
   36190:	e24dd010 	sub	sp, sp, #16
   36194:	e5900004 	ldr	r0, [r0, #4]
   36198:	0a00000b 	beq	361cc <BusControlAPI::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)+0x60>
   3619c:	e3a02000 	mov	r2, #0
   361a0:	e5d4c420 	ldrb	ip, [r4, #1056]	; 0x420
   361a4:	e5943418 	ldr	r3, [r4, #1048]	; 0x418
   361a8:	e594141c 	ldr	r1, [r4, #1052]	; 0x41c
   361ac:	e58d2008 	str	r2, [sp, #8]
   361b0:	e88d1004 	stm	sp, {r2, ip}
   361b4:	e2842014 	add	r2, r4, #20
   361b8:	ebfffa99 	bl	34c24 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
   361bc:	e3a03000 	mov	r3, #0
   361c0:	e5c43414 	strb	r3, [r4, #1044]	; 0x414
   361c4:	e28dd010 	add	sp, sp, #16
   361c8:	e8bd8010 	pop	{r4, pc}
   361cc:	e5d4c420 	ldrb	ip, [r4, #1056]	; 0x420
   361d0:	e5943418 	ldr	r3, [r4, #1048]	; 0x418
   361d4:	e594141c 	ldr	r1, [r4, #1052]	; 0x41c
   361d8:	e58d2008 	str	r2, [sp, #8]
   361dc:	e88d1004 	stm	sp, {r2, ip}
   361e0:	e2842014 	add	r2, r4, #20
   361e4:	ebfffacd 	bl	34d20 <HwManager::blockRead(unsigned long, unsigned char*, unsigned long, bool, bool, bool)>
   361e8:	e3a03000 	mov	r3, #0
   361ec:	e5c43414 	strb	r3, [r4, #1044]	; 0x414
   361f0:	e28dd010 	add	sp, sp, #16
   361f4:	e8bd8010 	pop	{r4, pc}

000361f8 <BusControlAPI::busActionCompleteStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   361f8:	e3500000 	cmp	r0, #0
   361fc:	012fff1e 	bxeq	lr
   36200:	eaffffd9 	b	3616c <BusControlAPI::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>

00036204 <BusControlAPI::handleWaitInterrupt(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   36204:	e12fff1e 	bx	lr

00036208 <BusControlAPI::service()>:
   36208:	e12fff1e 	bx	lr

0003620c <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)>:
   3620c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36210:	e1a09003 	mov	r9, r3
   36214:	e3a03001 	mov	r3, #1
   36218:	e3590b01 	cmp	r9, #1024	; 0x400
   3621c:	e1a0a002 	mov	sl, r2
   36220:	83a02b01 	movhi	r2, #1024	; 0x400
   36224:	e5dd8024 	ldrb	r8, [sp, #36]	; 0x24
   36228:	e5c03414 	strb	r3, [r0, #1044]	; 0x414
   3622c:	e5dd3020 	ldrb	r3, [sp, #32]
   36230:	95809418 	strls	r9, [r0, #1048]	; 0x418
   36234:	85802418 	strhi	r2, [r0, #1048]	; 0x418
   36238:	e3580000 	cmp	r8, #0
   3623c:	e1a04000 	mov	r4, r0
   36240:	e5c08415 	strb	r8, [r0, #1045]	; 0x415
   36244:	e580141c 	str	r1, [r0, #1052]	; 0x41c
   36248:	e5c03420 	strb	r3, [r0, #1056]	; 0x420
   3624c:	1a00001d 	bne	362c8 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xbc>
   36250:	e5947008 	ldr	r7, [r4, #8]
   36254:	e3a02004 	mov	r2, #4
   36258:	e1a00007 	mov	r0, r7
   3625c:	e594100c 	ldr	r1, [r4, #12]
   36260:	ebffece9 	bl	3160c <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   36264:	ebffdf30 	bl	2df2c <micros>
   36268:	e59f5084 	ldr	r5, [pc, #132]	; 362f4 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xe8>
   3626c:	e1a06000 	mov	r6, r0
   36270:	ea000003 	b	36284 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0x78>
   36274:	e3530000 	cmp	r3, #0
   36278:	0a00000e 	beq	362b8 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xac>
   3627c:	e1a00007 	mov	r0, r7
   36280:	ebffef95 	bl	320dc <BusAccess::service()>
   36284:	ebffdf28 	bl	2df2c <micros>
   36288:	e1a02005 	mov	r2, r5
   3628c:	e1a01006 	mov	r1, r6
   36290:	ebffdf43 	bl	2dfa4 <isTimeout>
   36294:	e3500000 	cmp	r0, #0
   36298:	e5d43414 	ldrb	r3, [r4, #1044]	; 0x414
   3629c:	0afffff4 	beq	36274 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0x68>
   362a0:	e3530000 	cmp	r3, #0
   362a4:	0a000003 	beq	362b8 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xac>
   362a8:	e3a03000 	mov	r3, #0
   362ac:	e3a00002 	mov	r0, #2
   362b0:	e5c43414 	strb	r3, [r4, #1044]	; 0x414
   362b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   362b8:	e3580000 	cmp	r8, #0
   362bc:	0a000006 	beq	362dc <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0xd0>
   362c0:	e3a00000 	mov	r0, #0
   362c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   362c8:	e1a02009 	mov	r2, r9
   362cc:	e1a0100a 	mov	r1, sl
   362d0:	e2800014 	add	r0, r0, #20
   362d4:	ebffd18d 	bl	2a910 <memcpy>
   362d8:	eaffffdc 	b	36250 <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)+0x44>
   362dc:	e1a02009 	mov	r2, r9
   362e0:	e2841014 	add	r1, r4, #20
   362e4:	e1a0000a 	mov	r0, sl
   362e8:	ebffd188 	bl	2a910 <memcpy>
   362ec:	e1a00008 	mov	r0, r8
   362f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   362f4:	0000c350 	.word	0x0000c350

000362f8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   362f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   362fc:	e24ddecb 	sub	sp, sp, #3248	; 0xcb0
   36300:	e24dd00c 	sub	sp, sp, #12
   36304:	e1a05000 	mov	r5, r0
   36308:	e1a09002 	mov	r9, r2
   3630c:	e1a08003 	mov	r8, r3
   36310:	e28d2020 	add	r2, sp, #32
   36314:	e3a03032 	mov	r3, #50	; 0x32
   36318:	e59f0c38 	ldr	r0, [pc, #3128]	; 36f58 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc60>
   3631c:	e1a07001 	mov	r7, r1
   36320:	ebffdff2 	bl	2e2f0 <jsonGetValueForKey>
   36324:	e2504000 	subs	r4, r0, #0
   36328:	1a000004 	bne	36340 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x48>
   3632c:	e3a04000 	mov	r4, #0
   36330:	e1a00004 	mov	r0, r4
   36334:	e28ddecb 	add	sp, sp, #3248	; 0xcb0
   36338:	e28dd00c 	add	sp, sp, #12
   3633c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36340:	e59f1c14 	ldr	r1, [pc, #3092]	; 36f5c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc64>
   36344:	e28d0020 	add	r0, sp, #32
   36348:	e595b008 	ldr	fp, [r5, #8]
   3634c:	ebffcf6f 	bl	2a110 <strcasecmp>
   36350:	e2506000 	subs	r6, r0, #0
   36354:	1a000037 	bne	36438 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x140>
   36358:	e28d8ecb 	add	r8, sp, #3248	; 0xcb0
   3635c:	e2888008 	add	r8, r8, #8
   36360:	e5286ca0 	str	r6, [r8, #-3232]!	; 0xfffff360
   36364:	e2483004 	sub	r3, r8, #4
   36368:	e88d0048 	stm	sp, {r3, r6}
   3636c:	e58d600c 	str	r6, [sp, #12]
   36370:	e58d6008 	str	r6, [sp, #8]
   36374:	e1a03007 	mov	r3, r7
   36378:	e3a02001 	mov	r2, #1
   3637c:	e59f1bdc 	ldr	r1, [pc, #3036]	; 36f60 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc68>
   36380:	e1a00005 	mov	r0, r5
   36384:	e58d6014 	str	r6, [sp, #20]
   36388:	ebfffd90 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   3638c:	e3500000 	cmp	r0, #0
   36390:	0a00005f 	beq	36514 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36394:	e58d600c 	str	r6, [sp, #12]
   36398:	e58d6008 	str	r6, [sp, #8]
   3639c:	e58d6004 	str	r6, [sp, #4]
   363a0:	e58d8000 	str	r8, [sp]
   363a4:	e1a03007 	mov	r3, r7
   363a8:	e3a02002 	mov	r2, #2
   363ac:	e59f1bb0 	ldr	r1, [pc, #2992]	; 36f64 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc6c>
   363b0:	e1a00005 	mov	r0, r5
   363b4:	ebfffd85 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   363b8:	e3500000 	cmp	r0, #0
   363bc:	0a000054 	beq	36514 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   363c0:	e28d301c 	add	r3, sp, #28
   363c4:	e58d3000 	str	r3, [sp]
   363c8:	e58d600c 	str	r6, [sp, #12]
   363cc:	e58d6008 	str	r6, [sp, #8]
   363d0:	e58d6004 	str	r6, [sp, #4]
   363d4:	e1a03007 	mov	r3, r7
   363d8:	e3a02003 	mov	r2, #3
   363dc:	e59f1b84 	ldr	r1, [pc, #2948]	; 36f68 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc70>
   363e0:	e1a00005 	mov	r0, r5
   363e4:	e58d601c 	str	r6, [sp, #28]
   363e8:	ebfffd78 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   363ec:	e3500000 	cmp	r0, #0
   363f0:	0a000047 	beq	36514 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   363f4:	e59d3018 	ldr	r3, [sp, #24]
   363f8:	e2432001 	sub	r2, r3, #1
   363fc:	e3520b01 	cmp	r2, #1024	; 0x400
   36400:	2a00003e 	bcs	36500 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x208>
   36404:	e1a00005 	mov	r0, r5
   36408:	e59d1014 	ldr	r1, [sp, #20]
   3640c:	e58d6004 	str	r6, [sp, #4]
   36410:	e58d6000 	str	r6, [sp]
   36414:	e28d2054 	add	r2, sp, #84	; 0x54
   36418:	ebffff7b 	bl	3620c <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)>
   3641c:	e2505000 	subs	r5, r0, #0
   36420:	0a0000f3 	beq	367f4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x4fc>
   36424:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36428:	e59f1b3c 	ldr	r1, [pc, #2876]	; 36f6c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc74>
   3642c:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36430:	ebffdef8 	bl	2e018 <strlcpy>
   36434:	eaffffbd 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36438:	e59f1b30 	ldr	r1, [pc, #2864]	; 36f70 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc78>
   3643c:	e28d0020 	add	r0, sp, #32
   36440:	ebffcf32 	bl	2a110 <strcasecmp>
   36444:	e2506000 	subs	r6, r0, #0
   36448:	1a000039 	bne	36534 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x23c>
   3644c:	e28d301c 	add	r3, sp, #28
   36450:	e58d3000 	str	r3, [sp]
   36454:	e58d600c 	str	r6, [sp, #12]
   36458:	e58d6008 	str	r6, [sp, #8]
   3645c:	e58d6004 	str	r6, [sp, #4]
   36460:	e1a03007 	mov	r3, r7
   36464:	e3a02001 	mov	r2, #1
   36468:	e59f1af0 	ldr	r1, [pc, #2800]	; 36f60 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc68>
   3646c:	e1a00005 	mov	r0, r5
   36470:	e58d601c 	str	r6, [sp, #28]
   36474:	e58d6054 	str	r6, [sp, #84]	; 0x54
   36478:	e58d6454 	str	r6, [sp, #1108]	; 0x454
   3647c:	ebfffd53 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36480:	e3500000 	cmp	r0, #0
   36484:	0a000022 	beq	36514 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36488:	e28d3054 	add	r3, sp, #84	; 0x54
   3648c:	e88d0048 	stm	sp, {r3, r6}
   36490:	e58d600c 	str	r6, [sp, #12]
   36494:	e58d6008 	str	r6, [sp, #8]
   36498:	e1a03007 	mov	r3, r7
   3649c:	e3a02002 	mov	r2, #2
   364a0:	e59f1abc 	ldr	r1, [pc, #2748]	; 36f64 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc6c>
   364a4:	e1a00005 	mov	r0, r5
   364a8:	ebfffd48 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   364ac:	e3500000 	cmp	r0, #0
   364b0:	0a000017 	beq	36514 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   364b4:	e28d3e45 	add	r3, sp, #1104	; 0x450
   364b8:	e2833008 	add	r3, r3, #8
   364bc:	e2432004 	sub	r2, r3, #4
   364c0:	e58d2000 	str	r2, [sp]
   364c4:	e58d600c 	str	r6, [sp, #12]
   364c8:	e58d6008 	str	r6, [sp, #8]
   364cc:	e58d6004 	str	r6, [sp, #4]
   364d0:	e1a03007 	mov	r3, r7
   364d4:	e3a02003 	mov	r2, #3
   364d8:	e59f1a88 	ldr	r1, [pc, #2696]	; 36f68 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc70>
   364dc:	e1a00005 	mov	r0, r5
   364e0:	ebfffd3a 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   364e4:	e3500000 	cmp	r0, #0
   364e8:	0a000009 	beq	36514 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   364ec:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
   364f0:	e2432001 	sub	r2, r3, #1
   364f4:	e1530008 	cmp	r3, r8
   364f8:	93520b01 	cmpls	r2, #1024	; 0x400
   364fc:	3a0000f2 	bcc	368cc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x5d4>
   36500:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36504:	e59f1a68 	ldr	r1, [pc, #2664]	; 36f74 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc7c>
   36508:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   3650c:	ebffdec1 	bl	2e018 <strlcpy>
   36510:	eaffff86 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36514:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36518:	e59f1a58 	ldr	r1, [pc, #2648]	; 36f78 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc80>
   3651c:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36520:	ebffdebc 	bl	2e018 <strlcpy>
   36524:	e1a00004 	mov	r0, r4
   36528:	e28ddecb 	add	sp, sp, #3248	; 0xcb0
   3652c:	e28dd00c 	add	sp, sp, #12
   36530:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36534:	e59f1a40 	ldr	r1, [pc, #2624]	; 36f7c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc84>
   36538:	e28d0020 	add	r0, sp, #32
   3653c:	ebffcef3 	bl	2a110 <strcasecmp>
   36540:	e3500000 	cmp	r0, #0
   36544:	0a00009e 	beq	367c4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x4cc>
   36548:	e59f1a30 	ldr	r1, [pc, #2608]	; 36f80 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc88>
   3654c:	e28d0020 	add	r0, sp, #32
   36550:	ebffceee 	bl	2a110 <strcasecmp>
   36554:	e3500000 	cmp	r0, #0
   36558:	01a0000b 	moveq	r0, fp
   3655c:	03a01001 	moveq	r1, #1
   36560:	0a000040 	beq	36668 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x370>
   36564:	e59f1a18 	ldr	r1, [pc, #2584]	; 36f84 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc8c>
   36568:	e28d0020 	add	r0, sp, #32
   3656c:	ebffcee7 	bl	2a110 <strcasecmp>
   36570:	e2501000 	subs	r1, r0, #0
   36574:	0a00003a 	beq	36664 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x36c>
   36578:	e59f1a08 	ldr	r1, [pc, #2568]	; 36f88 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc90>
   3657c:	e28d0020 	add	r0, sp, #32
   36580:	ebffcee2 	bl	2a110 <strcasecmp>
   36584:	e3500000 	cmp	r0, #0
   36588:	0a000092 	beq	367d8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x4e0>
   3658c:	e59f19f8 	ldr	r1, [pc, #2552]	; 36f8c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc94>
   36590:	e28d0020 	add	r0, sp, #32
   36594:	ebffcedd 	bl	2a110 <strcasecmp>
   36598:	e3500000 	cmp	r0, #0
   3659c:	0a0000bb 	beq	36890 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x598>
   365a0:	e59f19e8 	ldr	r1, [pc, #2536]	; 36f90 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc98>
   365a4:	e28d0020 	add	r0, sp, #32
   365a8:	ebffced8 	bl	2a110 <strcasecmp>
   365ac:	e3500000 	cmp	r0, #0
   365b0:	01a0000b 	moveq	r0, fp
   365b4:	03a01001 	moveq	r1, #1
   365b8:	0a0000bd 	beq	368b4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x5bc>
   365bc:	e59f19d0 	ldr	r1, [pc, #2512]	; 36f94 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc9c>
   365c0:	e28d0020 	add	r0, sp, #32
   365c4:	ebffced1 	bl	2a110 <strcasecmp>
   365c8:	e3500000 	cmp	r0, #0
   365cc:	0a0000b6 	beq	368ac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x5b4>
   365d0:	e59f19c0 	ldr	r1, [pc, #2496]	; 36f98 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xca0>
   365d4:	e28d0020 	add	r0, sp, #32
   365d8:	ebffcecc 	bl	2a110 <strcasecmp>
   365dc:	e3500000 	cmp	r0, #0
   365e0:	0a0000c9 	beq	3690c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x614>
   365e4:	e59f19b0 	ldr	r1, [pc, #2480]	; 36f9c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xca4>
   365e8:	e28d0020 	add	r0, sp, #32
   365ec:	ebffcec7 	bl	2a110 <strcasecmp>
   365f0:	e3500000 	cmp	r0, #0
   365f4:	0a0000cb 	beq	36928 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x630>
   365f8:	e59f19a0 	ldr	r1, [pc, #2464]	; 36fa0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xca8>
   365fc:	e28d0020 	add	r0, sp, #32
   36600:	ebffcec2 	bl	2a110 <strcasecmp>
   36604:	e250c000 	subs	ip, r0, #0
   36608:	1a0000cd 	bne	36944 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x64c>
   3660c:	e28d2e45 	add	r2, sp, #1104	; 0x450
   36610:	e2822004 	add	r2, r2, #4
   36614:	e58d2000 	str	r2, [sp]
   36618:	e58dc00c 	str	ip, [sp, #12]
   3661c:	e58dc008 	str	ip, [sp, #8]
   36620:	e58dc004 	str	ip, [sp, #4]
   36624:	e1a03007 	mov	r3, r7
   36628:	e3a02001 	mov	r2, #1
   3662c:	e59f192c 	ldr	r1, [pc, #2348]	; 36f60 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc68>
   36630:	e1a00005 	mov	r0, r5
   36634:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   36638:	ebfffce4 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   3663c:	e3500000 	cmp	r0, #0
   36640:	0affffb3 	beq	36514 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36644:	e1a0000b 	mov	r0, fp
   36648:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   3664c:	ebfff6fe 	bl	3424c <BusAccess::rawBusControlSetAddress(unsigned long)>
   36650:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36654:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36658:	e1a00005 	mov	r0, r5
   3665c:	ebfffe92 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   36660:	eaffff32 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36664:	e1a0000b 	mov	r0, fp
   36668:	ebfff576 	bl	33c48 <BusAccess::rawBusControlEnable(bool)>
   3666c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36670:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36674:	e1a00005 	mov	r0, r5
   36678:	ebfffe8b 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   3667c:	eaffff2b 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36680:	e59f191c 	ldr	r1, [pc, #2332]	; 36fa4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcac>
   36684:	e28d0020 	add	r0, sp, #32
   36688:	ebffcea0 	bl	2a110 <strcasecmp>
   3668c:	e3500000 	cmp	r0, #0
   36690:	0a0001cc 	beq	36dc8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xad0>
   36694:	e59f190c 	ldr	r1, [pc, #2316]	; 36fa8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcb0>
   36698:	e28d0020 	add	r0, sp, #32
   3669c:	ebffce9b 	bl	2a110 <strcasecmp>
   366a0:	e2502000 	subs	r2, r0, #0
   366a4:	0a0001bf 	beq	36da8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xab0>
   366a8:	e59f18fc 	ldr	r1, [pc, #2300]	; 36fac <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcb4>
   366ac:	e28d0020 	add	r0, sp, #32
   366b0:	ebffce96 	bl	2a110 <strcasecmp>
   366b4:	e3500000 	cmp	r0, #0
   366b8:	0a0001b3 	beq	36d8c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa94>
   366bc:	e59f18ec 	ldr	r1, [pc, #2284]	; 36fb0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcb8>
   366c0:	e28d0020 	add	r0, sp, #32
   366c4:	ebffce91 	bl	2a110 <strcasecmp>
   366c8:	e3500000 	cmp	r0, #0
   366cc:	0a0001aa 	beq	36d7c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa84>
   366d0:	e59f18dc 	ldr	r1, [pc, #2268]	; 36fb4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcbc>
   366d4:	e28d0020 	add	r0, sp, #32
   366d8:	ebffce8c 	bl	2a110 <strcasecmp>
   366dc:	e2502000 	subs	r2, r0, #0
   366e0:	0a00019d 	beq	36d5c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa64>
   366e4:	e59f18cc 	ldr	r1, [pc, #2252]	; 36fb8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc0>
   366e8:	e28d0020 	add	r0, sp, #32
   366ec:	ebffce87 	bl	2a110 <strcasecmp>
   366f0:	e3500000 	cmp	r0, #0
   366f4:	0a000194 	beq	36d4c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa54>
   366f8:	e59f18bc 	ldr	r1, [pc, #2236]	; 36fbc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc4>
   366fc:	e28d0020 	add	r0, sp, #32
   36700:	ebffce82 	bl	2a110 <strcasecmp>
   36704:	e2502000 	subs	r2, r0, #0
   36708:	0a000187 	beq	36d2c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa34>
   3670c:	e59f18ac 	ldr	r1, [pc, #2220]	; 36fc0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcc8>
   36710:	e28d0020 	add	r0, sp, #32
   36714:	ebffce7d 	bl	2a110 <strcasecmp>
   36718:	e3500000 	cmp	r0, #0
   3671c:	0affff03 	beq	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36720:	e59f189c 	ldr	r1, [pc, #2204]	; 36fc4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xccc>
   36724:	e28d0020 	add	r0, sp, #32
   36728:	ebffce78 	bl	2a110 <strcasecmp>
   3672c:	e3500000 	cmp	r0, #0
   36730:	0afffefe 	beq	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36734:	e59f188c 	ldr	r1, [pc, #2188]	; 36fc8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcd0>
   36738:	e28d0020 	add	r0, sp, #32
   3673c:	ebffce73 	bl	2a110 <strcasecmp>
   36740:	e3500000 	cmp	r0, #0
   36744:	0afffef9 	beq	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36748:	e59f187c 	ldr	r1, [pc, #2172]	; 36fcc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcd4>
   3674c:	e28d0020 	add	r0, sp, #32
   36750:	ebffce6e 	bl	2a110 <strcasecmp>
   36754:	e3500000 	cmp	r0, #0
   36758:	0afffef4 	beq	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   3675c:	e59f186c 	ldr	r1, [pc, #2156]	; 36fd0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcd8>
   36760:	e28d0020 	add	r0, sp, #32
   36764:	ebffce69 	bl	2a110 <strcasecmp>
   36768:	e3500000 	cmp	r0, #0
   3676c:	0afffeef 	beq	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36770:	e28d0020 	add	r0, sp, #32
   36774:	e59f1858 	ldr	r1, [pc, #2136]	; 36fd4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcdc>
   36778:	ebffce64 	bl	2a110 <strcasecmp>
   3677c:	e2505000 	subs	r5, r0, #0
   36780:	1afffee9 	bne	3632c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   36784:	e28d2e45 	add	r2, sp, #1104	; 0x450
   36788:	e1a01007 	mov	r1, r7
   3678c:	e2822004 	add	r2, r2, #4
   36790:	e3a03032 	mov	r3, #50	; 0x32
   36794:	e59f083c 	ldr	r0, [pc, #2108]	; 36fd8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce0>
   36798:	ebffded4 	bl	2e2f0 <jsonGetValueForKey>
   3679c:	e2504000 	subs	r4, r0, #0
   367a0:	0afffee2 	beq	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   367a4:	e28d0e45 	add	r0, sp, #1104	; 0x450
   367a8:	e1a01005 	mov	r1, r5
   367ac:	e2800004 	add	r0, r0, #4
   367b0:	e3a0200a 	mov	r2, #10
   367b4:	ebffcf7d 	bl	2a5b0 <strtoul>
   367b8:	e1a01000 	mov	r1, r0
   367bc:	e1a0000b 	mov	r0, fp
   367c0:	ebffeb40 	bl	314c8 <BusAccess::waitSetCycleUs(unsigned long)>
   367c4:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   367c8:	e59f180c 	ldr	r1, [pc, #2060]	; 36fdc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   367cc:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   367d0:	ebffde10 	bl	2e018 <strlcpy>
   367d4:	eafffed5 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   367d8:	e1a0000b 	mov	r0, fp
   367dc:	ebfff520 	bl	33c64 <BusAccess::rawBusControlClearWait()>
   367e0:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   367e4:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   367e8:	e1a00005 	mov	r0, r5
   367ec:	ebfffe2e 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   367f0:	eafffece 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   367f4:	e28d1e45 	add	r1, sp, #1104	; 0x450
   367f8:	e59d2014 	ldr	r2, [sp, #20]
   367fc:	e2811008 	add	r1, r1, #8
   36800:	e241a004 	sub	sl, r1, #4
   36804:	e59d3018 	ldr	r3, [sp, #24]
   36808:	e58d2000 	str	r2, [sp]
   3680c:	e59f17cc 	ldr	r1, [pc, #1996]	; 36fe0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce8>
   36810:	e59f27cc 	ldr	r2, [pc, #1996]	; 36fe4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcec>
   36814:	e58d5004 	str	r5, [sp, #4]
   36818:	e1a0000a 	mov	r0, sl
   3681c:	ebffde74 	bl	2e1f4 <snprintf>
   36820:	e1a0000a 	mov	r0, sl
   36824:	ebffce14 	bl	2a07c <strlen>
   36828:	e59d3018 	ldr	r3, [sp, #24]
   3682c:	e3530000 	cmp	r3, #0
   36830:	0a00000d 	beq	3686c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x574>
   36834:	e59f97ac 	ldr	r9, [pc, #1964]	; 36fe8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf0>
   36838:	e59f87a0 	ldr	r8, [pc, #1952]	; 36fe0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce8>
   3683c:	e28d7053 	add	r7, sp, #83	; 0x53
   36840:	e08a6000 	add	r6, sl, r0
   36844:	e5f73001 	ldrb	r3, [r7, #1]!
   36848:	e1a00006 	mov	r0, r6
   3684c:	e1a02009 	mov	r2, r9
   36850:	e1a01008 	mov	r1, r8
   36854:	ebffde66 	bl	2e1f4 <snprintf>
   36858:	e59d3018 	ldr	r3, [sp, #24]
   3685c:	e2855001 	add	r5, r5, #1
   36860:	e1530005 	cmp	r3, r5
   36864:	e2866002 	add	r6, r6, #2
   36868:	8afffff5 	bhi	36844 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x54c>
   3686c:	e59f276c 	ldr	r2, [pc, #1900]	; 36fe0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce8>
   36870:	e59f1774 	ldr	r1, [pc, #1908]	; 36fec <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf4>
   36874:	e1a0000a 	mov	r0, sl
   36878:	ebffde02 	bl	2e088 <strlcat>
   3687c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36880:	e1a0100a 	mov	r1, sl
   36884:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36888:	ebffdde2 	bl	2e018 <strlcpy>
   3688c:	eafffea7 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36890:	e1a0000b 	mov	r0, fp
   36894:	ebfff4f7 	bl	33c78 <BusAccess::rawBusControlWaitDisable()>
   36898:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   3689c:	e59f1738 	ldr	r1, [pc, #1848]	; 36fdc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   368a0:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   368a4:	ebffdddb 	bl	2e018 <strlcpy>
   368a8:	eafffea0 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   368ac:	e1a0000b 	mov	r0, fp
   368b0:	e3a01000 	mov	r1, #0
   368b4:	ebfff4f7 	bl	33c98 <BusAccess::rawBusControlClockEnable(bool)>
   368b8:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   368bc:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   368c0:	e1a00005 	mov	r0, r5
   368c4:	ebfffdf8 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   368c8:	eafffe98 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   368cc:	e59dc454 	ldr	ip, [sp, #1108]	; 0x454
   368d0:	e3a0e001 	mov	lr, #1
   368d4:	e29cc000 	adds	ip, ip, #0
   368d8:	13a0c001 	movne	ip, #1
   368dc:	e1a02009 	mov	r2, r9
   368e0:	e59d101c 	ldr	r1, [sp, #28]
   368e4:	e1a00005 	mov	r0, r5
   368e8:	e88d5000 	stm	sp, {ip, lr}
   368ec:	ebfffe46 	bl	3620c <BusControlAPI::blockAccessSync(unsigned long, unsigned char*, unsigned long, bool, bool)>
   368f0:	e3500000 	cmp	r0, #0
   368f4:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   368f8:	0affffb2 	beq	367c8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x4d0>
   368fc:	e59f1668 	ldr	r1, [pc, #1640]	; 36f6c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc74>
   36900:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36904:	ebffddc3 	bl	2e018 <strlcpy>
   36908:	eafffe88 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   3690c:	e1a0000b 	mov	r0, fp
   36910:	ebfff647 	bl	34234 <BusAccess::rawBusControlTakeBus()>
   36914:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36918:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   3691c:	e1a00005 	mov	r0, r5
   36920:	ebfffde1 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   36924:	eafffe81 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36928:	e1a0000b 	mov	r0, fp
   3692c:	ebfff645 	bl	34248 <BusAccess::rawBusControlReleaseBus()>
   36930:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36934:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36938:	e1a00005 	mov	r0, r5
   3693c:	ebfffdda 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   36940:	eafffe7a 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36944:	e59f16a4 	ldr	r1, [pc, #1700]	; 36ff0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcf8>
   36948:	e28d0020 	add	r0, sp, #32
   3694c:	ebffcdef 	bl	2a110 <strcasecmp>
   36950:	e3500000 	cmp	r0, #0
   36954:	0a000021 	beq	369e0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x6e8>
   36958:	e59f1694 	ldr	r1, [pc, #1684]	; 36ff4 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xcfc>
   3695c:	e28d0020 	add	r0, sp, #32
   36960:	ebffcdea 	bl	2a110 <strcasecmp>
   36964:	e250c000 	subs	ip, r0, #0
   36968:	1a000023 	bne	369fc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x704>
   3696c:	e28d2e45 	add	r2, sp, #1104	; 0x450
   36970:	e2822004 	add	r2, r2, #4
   36974:	e58d2000 	str	r2, [sp]
   36978:	e58dc00c 	str	ip, [sp, #12]
   3697c:	e58dc008 	str	ip, [sp, #8]
   36980:	e58dc004 	str	ip, [sp, #4]
   36984:	e1a03007 	mov	r3, r7
   36988:	e3a02001 	mov	r2, #1
   3698c:	e59f1664 	ldr	r1, [pc, #1636]	; 36ff8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd00>
   36990:	e1a00005 	mov	r0, r5
   36994:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   36998:	ebfffc0c 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   3699c:	e3500000 	cmp	r0, #0
   369a0:	0afffedb 	beq	36514 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   369a4:	ebffc088 	bl	26bcc <CLogger::Get()>
   369a8:	e59d2454 	ldr	r2, [sp, #1108]	; 0x454
   369ac:	e59f3648 	ldr	r3, [pc, #1608]	; 36ffc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd04>
   369b0:	e58d2000 	str	r2, [sp]
   369b4:	e59f1644 	ldr	r1, [pc, #1604]	; 37000 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd08>
   369b8:	e3a02004 	mov	r2, #4
   369bc:	ebffbfbf 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   369c0:	e1a0000b 	mov	r0, fp
   369c4:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   369c8:	ebfff620 	bl	34250 <BusAccess::rawBusControlSetData(unsigned long)>
   369cc:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   369d0:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   369d4:	e1a00005 	mov	r0, r5
   369d8:	ebfffdb3 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   369dc:	eafffe53 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   369e0:	e1a0000b 	mov	r0, fp
   369e4:	ebfff656 	bl	34344 <BusAccess::rawBusControlReadPIB()>
   369e8:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   369ec:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   369f0:	e1a00005 	mov	r0, r5
   369f4:	ebfffdac 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   369f8:	eafffe4c 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   369fc:	e59f1600 	ldr	r1, [pc, #1536]	; 37004 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd0c>
   36a00:	e28d0020 	add	r0, sp, #32
   36a04:	ebffcdc1 	bl	2a110 <strcasecmp>
   36a08:	e250c000 	subs	ip, r0, #0
   36a0c:	1a000015 	bne	36a68 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x770>
   36a10:	e28d2e45 	add	r2, sp, #1104	; 0x450
   36a14:	e2822004 	add	r2, r2, #4
   36a18:	e58d2000 	str	r2, [sp]
   36a1c:	e58dc00c 	str	ip, [sp, #12]
   36a20:	e58dc008 	str	ip, [sp, #8]
   36a24:	e58dc004 	str	ip, [sp, #4]
   36a28:	e1a03007 	mov	r3, r7
   36a2c:	e3a02001 	mov	r2, #1
   36a30:	e59f15c0 	ldr	r1, [pc, #1472]	; 36ff8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd00>
   36a34:	e1a00005 	mov	r0, r5
   36a38:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   36a3c:	ebfffbe3 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36a40:	e3500000 	cmp	r0, #0
   36a44:	0afffeb2 	beq	36514 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36a48:	e1a0000b 	mov	r0, fp
   36a4c:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   36a50:	ebfff644 	bl	34368 <BusAccess::rawBusControlWritePIB(unsigned long)>
   36a54:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36a58:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36a5c:	e1a00005 	mov	r0, r5
   36a60:	ebfffd91 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   36a64:	eafffe31 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36a68:	e59f1598 	ldr	r1, [pc, #1432]	; 37008 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd10>
   36a6c:	e28d0020 	add	r0, sp, #32
   36a70:	ebffcda6 	bl	2a110 <strcasecmp>
   36a74:	e2506000 	subs	r6, r0, #0
   36a78:	1a000025 	bne	36b14 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x81c>
   36a7c:	e3a02001 	mov	r2, #1
   36a80:	e28d3054 	add	r3, sp, #84	; 0x54
   36a84:	e58d3000 	str	r3, [sp]
   36a88:	e58d6008 	str	r6, [sp, #8]
   36a8c:	e58d6004 	str	r6, [sp, #4]
   36a90:	e58d200c 	str	r2, [sp, #12]
   36a94:	e1a03007 	mov	r3, r7
   36a98:	e59f156c 	ldr	r1, [pc, #1388]	; 3700c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd14>
   36a9c:	e1a00005 	mov	r0, r5
   36aa0:	e58d6054 	str	r6, [sp, #84]	; 0x54
   36aa4:	ebfffbc9 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36aa8:	e3500000 	cmp	r0, #0
   36aac:	0afffe98 	beq	36514 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36ab0:	e28d2e45 	add	r2, sp, #1104	; 0x450
   36ab4:	e2822004 	add	r2, r2, #4
   36ab8:	e58d2000 	str	r2, [sp]
   36abc:	e58d600c 	str	r6, [sp, #12]
   36ac0:	e58d6008 	str	r6, [sp, #8]
   36ac4:	e58d6004 	str	r6, [sp, #4]
   36ac8:	e1a03007 	mov	r3, r7
   36acc:	e3a02002 	mov	r2, #2
   36ad0:	e59f1538 	ldr	r1, [pc, #1336]	; 37010 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd18>
   36ad4:	e1a00005 	mov	r0, r5
   36ad8:	e58d6454 	str	r6, [sp, #1108]	; 0x454
   36adc:	ebfffbbb 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36ae0:	e3500000 	cmp	r0, #0
   36ae4:	0afffe8a 	beq	36514 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36ae8:	e59d2454 	ldr	r2, [sp, #1108]	; 0x454
   36aec:	e1a0000b 	mov	r0, fp
   36af0:	e2922000 	adds	r2, r2, #0
   36af4:	13a02001 	movne	r2, #1
   36af8:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   36afc:	ebfff607 	bl	34320 <BusAccess::rawBusControlSetPin(unsigned long, bool)>
   36b00:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36b04:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36b08:	e1a00005 	mov	r0, r5
   36b0c:	ebfffd66 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   36b10:	eafffe06 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36b14:	e59f14f8 	ldr	r1, [pc, #1272]	; 37014 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd1c>
   36b18:	e28d0020 	add	r0, sp, #32
   36b1c:	ebffcd7b 	bl	2a110 <strcasecmp>
   36b20:	e250c000 	subs	ip, r0, #0
   36b24:	1a000015 	bne	36b80 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x888>
   36b28:	e3a02001 	mov	r2, #1
   36b2c:	e28d1e45 	add	r1, sp, #1104	; 0x450
   36b30:	e2811004 	add	r1, r1, #4
   36b34:	e58d1000 	str	r1, [sp]
   36b38:	e58dc008 	str	ip, [sp, #8]
   36b3c:	e58dc004 	str	ip, [sp, #4]
   36b40:	e1a03007 	mov	r3, r7
   36b44:	e58d200c 	str	r2, [sp, #12]
   36b48:	e59f14bc 	ldr	r1, [pc, #1212]	; 3700c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd14>
   36b4c:	e1a00005 	mov	r0, r5
   36b50:	e58dc454 	str	ip, [sp, #1108]	; 0x454
   36b54:	ebfffb9d 	bl	359d0 <BusControlAPI::getArg(char const*, int, char const*, unsigned long&, char*, unsigned long, bool)>
   36b58:	e3500000 	cmp	r0, #0
   36b5c:	0afffe6c 	beq	36514 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   36b60:	e59d1454 	ldr	r1, [sp, #1108]	; 0x454
   36b64:	e1a0000b 	mov	r0, fp
   36b68:	ebfff5ef 	bl	3432c <BusAccess::rawBusControlGetPin(unsigned long)>
   36b6c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36b70:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36b74:	e1a00005 	mov	r0, r5
   36b78:	ebfffd4b 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   36b7c:	eafffdeb 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36b80:	e59f1490 	ldr	r1, [pc, #1168]	; 37018 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd20>
   36b84:	e28d0020 	add	r0, sp, #32
   36b88:	ebffcd60 	bl	2a110 <strcasecmp>
   36b8c:	e3500000 	cmp	r0, #0
   36b90:	0a000050 	beq	36cd8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9e0>
   36b94:	e59f1480 	ldr	r1, [pc, #1152]	; 3701c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd24>
   36b98:	e28d0020 	add	r0, sp, #32
   36b9c:	ebffcd5b 	bl	2a110 <strcasecmp>
   36ba0:	e3500000 	cmp	r0, #0
   36ba4:	0a0000e3 	beq	36f38 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc40>
   36ba8:	e59f1470 	ldr	r1, [pc, #1136]	; 37020 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd28>
   36bac:	e28d0020 	add	r0, sp, #32
   36bb0:	ebffcd56 	bl	2a110 <strcasecmp>
   36bb4:	e3500000 	cmp	r0, #0
   36bb8:	0a0000d6 	beq	36f18 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc20>
   36bbc:	e59f1460 	ldr	r1, [pc, #1120]	; 37024 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd2c>
   36bc0:	e28d0020 	add	r0, sp, #32
   36bc4:	ebffcd51 	bl	2a110 <strcasecmp>
   36bc8:	e3500000 	cmp	r0, #0
   36bcc:	0a0000ca 	beq	36efc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xc04>
   36bd0:	e59f1450 	ldr	r1, [pc, #1104]	; 37028 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd30>
   36bd4:	e28d0020 	add	r0, sp, #32
   36bd8:	ebffcd4c 	bl	2a110 <strcasecmp>
   36bdc:	e2503000 	subs	r3, r0, #0
   36be0:	0a0000a6 	beq	36e80 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb88>
   36be4:	e59f1440 	ldr	r1, [pc, #1088]	; 3702c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd34>
   36be8:	e28d0020 	add	r0, sp, #32
   36bec:	ebffcd47 	bl	2a110 <strcasecmp>
   36bf0:	e3500000 	cmp	r0, #0
   36bf4:	0a00009a 	beq	36e64 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb6c>
   36bf8:	e59f1430 	ldr	r1, [pc, #1072]	; 37030 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd38>
   36bfc:	e28d0020 	add	r0, sp, #32
   36c00:	ebffcd42 	bl	2a110 <strcasecmp>
   36c04:	e3500000 	cmp	r0, #0
   36c08:	0a00008e 	beq	36e48 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb50>
   36c0c:	e59f1420 	ldr	r1, [pc, #1056]	; 37034 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd3c>
   36c10:	e28d0020 	add	r0, sp, #32
   36c14:	ebffcd3d 	bl	2a110 <strcasecmp>
   36c18:	e3500000 	cmp	r0, #0
   36c1c:	0a00007b 	beq	36e10 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb18>
   36c20:	e59f1410 	ldr	r1, [pc, #1040]	; 37038 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd40>
   36c24:	e28d0020 	add	r0, sp, #32
   36c28:	ebffcd38 	bl	2a110 <strcasecmp>
   36c2c:	e3500000 	cmp	r0, #0
   36c30:	0a000068 	beq	36dd8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xae0>
   36c34:	e59f1400 	ldr	r1, [pc, #1024]	; 3703c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd44>
   36c38:	e28d0020 	add	r0, sp, #32
   36c3c:	ebffcd33 	bl	2a110 <strcasecmp>
   36c40:	e3500000 	cmp	r0, #0
   36c44:	0a000063 	beq	36dd8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xae0>
   36c48:	e59f13f0 	ldr	r1, [pc, #1008]	; 37040 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd48>
   36c4c:	e28d0020 	add	r0, sp, #32
   36c50:	ebffcd2e 	bl	2a110 <strcasecmp>
   36c54:	e3500000 	cmp	r0, #0
   36c58:	0a00002b 	beq	36d0c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa14>
   36c5c:	e59f13e0 	ldr	r1, [pc, #992]	; 37044 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd4c>
   36c60:	e28d0020 	add	r0, sp, #32
   36c64:	ebffcd29 	bl	2a110 <strcasecmp>
   36c68:	e3500000 	cmp	r0, #0
   36c6c:	1afffe83 	bne	36680 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x388>
   36c70:	e28dae45 	add	sl, sp, #1104	; 0x450
   36c74:	e28aa004 	add	sl, sl, #4
   36c78:	e1a01007 	mov	r1, r7
   36c7c:	e1a0200a 	mov	r2, sl
   36c80:	e3a03032 	mov	r3, #50	; 0x32
   36c84:	e59f03bc 	ldr	r0, [pc, #956]	; 37048 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd50>
   36c88:	ebffdd98 	bl	2e2f0 <jsonGetValueForKey>
   36c8c:	e3500000 	cmp	r0, #0
   36c90:	0a000015 	beq	36cec <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9f4>
   36c94:	e3a0200a 	mov	r2, #10
   36c98:	e3a01000 	mov	r1, #0
   36c9c:	e1a0000a 	mov	r0, sl
   36ca0:	ebffce42 	bl	2a5b0 <strtoul>
   36ca4:	e1a01000 	mov	r1, r0
   36ca8:	e1a0000b 	mov	r0, fp
   36cac:	ebfff00c 	bl	32ce4 <BusAccess::clockSetFreqHz(unsigned long)>
   36cb0:	e1a0000b 	mov	r0, fp
   36cb4:	ebfff105 	bl	330d0 <BusAccess::clockCurFreqHz()>
   36cb8:	e59f238c 	ldr	r2, [pc, #908]	; 3704c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd54>
   36cbc:	e1a03000 	mov	r3, r0
   36cc0:	e59d1ce4 	ldr	r1, [sp, #3300]	; 0xce4
   36cc4:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36cc8:	ebffdd49 	bl	2e1f4 <snprintf>
   36ccc:	e1a00004 	mov	r0, r4
   36cd0:	e1a04000 	mov	r4, r0
   36cd4:	eafffd95 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36cd8:	e1a00005 	mov	r0, r5
   36cdc:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36ce0:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36ce4:	ebfffcf0 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   36ce8:	eafffd90 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36cec:	e1a01009 	mov	r1, r9
   36cf0:	e3a03032 	mov	r3, #50	; 0x32
   36cf4:	e1a0200a 	mov	r2, sl
   36cf8:	e59f0348 	ldr	r0, [pc, #840]	; 37048 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd50>
   36cfc:	ebffdd7b 	bl	2e2f0 <jsonGetValueForKey>
   36d00:	e3500000 	cmp	r0, #0
   36d04:	1affffe2 	bne	36c94 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x99c>
   36d08:	eafffff0 	b	36cd0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x9d8>
   36d0c:	e1a0000b 	mov	r0, fp
   36d10:	ebfff0ee 	bl	330d0 <BusAccess::clockCurFreqHz()>
   36d14:	e59f2330 	ldr	r2, [pc, #816]	; 3704c <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd54>
   36d18:	e1a03000 	mov	r3, r0
   36d1c:	e59d1ce4 	ldr	r1, [sp, #3300]	; 0xce4
   36d20:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36d24:	ebffdd32 	bl	2e1f4 <snprintf>
   36d28:	eafffd80 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36d2c:	e1a0000b 	mov	r0, fp
   36d30:	e595100c 	ldr	r1, [r5, #12]
   36d34:	ebffe9d8 	bl	3149c <BusAccess::waitOnIO(int, bool)>
   36d38:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36d3c:	e59f1298 	ldr	r1, [pc, #664]	; 36fdc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36d40:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36d44:	ebffdcb3 	bl	2e018 <strlcpy>
   36d48:	eafffd78 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36d4c:	e595100c 	ldr	r1, [r5, #12]
   36d50:	e1a0000b 	mov	r0, fp
   36d54:	e3a02001 	mov	r2, #1
   36d58:	eafffff5 	b	36d34 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa3c>
   36d5c:	e1a0000b 	mov	r0, fp
   36d60:	e595100c 	ldr	r1, [r5, #12]
   36d64:	ebffe9c3 	bl	31478 <BusAccess::waitOnMemory(int, bool)>
   36d68:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36d6c:	e59f1268 	ldr	r1, [pc, #616]	; 36fdc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36d70:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36d74:	ebffdca7 	bl	2e018 <strlcpy>
   36d78:	eafffd6c 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36d7c:	e595100c 	ldr	r1, [r5, #12]
   36d80:	e1a0000b 	mov	r0, fp
   36d84:	e3a02001 	mov	r2, #1
   36d88:	eafffff5 	b	36d64 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xa6c>
   36d8c:	e1a0000b 	mov	r0, fp
   36d90:	ebffebdb 	bl	31d04 <BusAccess::waitRelease()>
   36d94:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36d98:	e59f123c 	ldr	r1, [pc, #572]	; 36fdc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36d9c:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36da0:	ebffdc9c 	bl	2e018 <strlcpy>
   36da4:	eafffd61 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36da8:	e1a0000b 	mov	r0, fp
   36dac:	e595100c 	ldr	r1, [r5, #12]
   36db0:	ebffe9c8 	bl	314d8 <BusAccess::waitHold(int, bool)>
   36db4:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36db8:	e59f121c 	ldr	r1, [pc, #540]	; 36fdc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36dbc:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36dc0:	ebffdc94 	bl	2e018 <strlcpy>
   36dc4:	eafffd59 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36dc8:	e595100c 	ldr	r1, [r5, #12]
   36dcc:	e1a0000b 	mov	r0, fp
   36dd0:	e3a02001 	mov	r2, #1
   36dd4:	eafffff5 	b	36db0 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xab8>
   36dd8:	ebffbf7b 	bl	26bcc <CLogger::Get()>
   36ddc:	e59f326c 	ldr	r3, [pc, #620]	; 37050 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd58>
   36de0:	e3a02004 	mov	r2, #4
   36de4:	e59f1214 	ldr	r1, [pc, #532]	; 37000 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd08>
   36de8:	ebffbeb4 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   36dec:	e595100c 	ldr	r1, [r5, #12]
   36df0:	e1a0000b 	mov	r0, fp
   36df4:	e3a02004 	mov	r2, #4
   36df8:	ebffea03 	bl	3160c <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   36dfc:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36e00:	e59f11d4 	ldr	r1, [pc, #468]	; 36fdc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36e04:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36e08:	ebffdc82 	bl	2e018 <strlcpy>
   36e0c:	eafffd47 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36e10:	ebffbf6d 	bl	26bcc <CLogger::Get()>
   36e14:	e59f3238 	ldr	r3, [pc, #568]	; 37054 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd5c>
   36e18:	e3a02004 	mov	r2, #4
   36e1c:	e59f11dc 	ldr	r1, [pc, #476]	; 37000 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xd08>
   36e20:	ebffbea6 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   36e24:	e595100c 	ldr	r1, [r5, #12]
   36e28:	e1a0000b 	mov	r0, fp
   36e2c:	e3e02000 	mvn	r2, #0
   36e30:	ebffe9c6 	bl	31550 <BusAccess::targetReqReset(int, int)>
   36e34:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36e38:	e59f119c 	ldr	r1, [pc, #412]	; 36fdc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36e3c:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36e40:	ebffdc74 	bl	2e018 <strlcpy>
   36e44:	eafffd39 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36e48:	e1a0000b 	mov	r0, fp
   36e4c:	ebffe95f 	bl	313d0 <BusAccess::busAccessReinit()>
   36e50:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36e54:	e59f1180 	ldr	r1, [pc, #384]	; 36fdc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36e58:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36e5c:	ebffdc6d 	bl	2e018 <strlcpy>
   36e60:	eafffd32 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36e64:	e1a0000b 	mov	r0, fp
   36e68:	ebffecfb 	bl	3225c <BusAccess::clearStatus()>
   36e6c:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36e70:	e59f1164 	ldr	r1, [pc, #356]	; 36fdc <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xce4>
   36e74:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36e78:	ebffdc66 	bl	2e018 <strlcpy>
   36e7c:	eafffd2b 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36e80:	e28d1e45 	add	r1, sp, #1104	; 0x450
   36e84:	e1a0000b 	mov	r0, fp
   36e88:	e2811004 	add	r1, r1, #4
   36e8c:	e58d3454 	str	r3, [sp, #1108]	; 0x454
   36e90:	e58d3458 	str	r3, [sp, #1112]	; 0x458
   36e94:	e58d345c 	str	r3, [sp, #1116]	; 0x45c
   36e98:	e58d3460 	str	r3, [sp, #1120]	; 0x460
   36e9c:	e58d3464 	str	r3, [sp, #1124]	; 0x464
   36ea0:	e58d3468 	str	r3, [sp, #1128]	; 0x468
   36ea4:	e58d346c 	str	r3, [sp, #1132]	; 0x46c
   36ea8:	e58d3470 	str	r3, [sp, #1136]	; 0x470
   36eac:	e58d3488 	str	r3, [sp, #1160]	; 0x488
   36eb0:	e58d348c 	str	r3, [sp, #1164]	; 0x48c
   36eb4:	e58d3490 	str	r3, [sp, #1168]	; 0x490
   36eb8:	e58d3494 	str	r3, [sp, #1172]	; 0x494
   36ebc:	e58d3498 	str	r3, [sp, #1176]	; 0x498
   36ec0:	e58d349c 	str	r3, [sp, #1180]	; 0x49c
   36ec4:	e58d3474 	str	r3, [sp, #1140]	; 0x474
   36ec8:	e58d3478 	str	r3, [sp, #1144]	; 0x478
   36ecc:	e58d347c 	str	r3, [sp, #1148]	; 0x47c
   36ed0:	e58d3480 	str	r3, [sp, #1152]	; 0x480
   36ed4:	e58d3484 	str	r3, [sp, #1156]	; 0x484
   36ed8:	ebffecd8 	bl	32240 <BusAccess::getStatus(BusAccessStatusInfo&)>
   36edc:	e28d0e45 	add	r0, sp, #1104	; 0x450
   36ee0:	e2800004 	add	r0, r0, #4
   36ee4:	ebffec99 	bl	32150 <BusAccessStatusInfo::getJson()>
   36ee8:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36eec:	e1a01000 	mov	r1, r0
   36ef0:	e59d0ce0 	ldr	r0, [sp, #3296]	; 0xce0
   36ef4:	ebffdc47 	bl	2e018 <strlcpy>
   36ef8:	eafffd0c 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36efc:	e1a0000b 	mov	r0, fp
   36f00:	ebfff53a 	bl	343f0 <BusAccess::rawBusControlMuxClear()>
   36f04:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36f08:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36f0c:	e1a00005 	mov	r0, r5
   36f10:	ebfffc65 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   36f14:	eafffd05 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36f18:	e1a01007 	mov	r1, r7
   36f1c:	e1a00005 	mov	r0, r5
   36f20:	ebfffbeb 	bl	35ed4 <BusControlAPI::muxLineHandler(char const*)>
   36f24:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36f28:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36f2c:	e1a00005 	mov	r0, r5
   36f30:	ebfffc5d 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   36f34:	eafffcfd 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36f38:	e1a01007 	mov	r1, r7
   36f3c:	e1a00005 	mov	r0, r5
   36f40:	ebfffb1c 	bl	35bb8 <BusControlAPI::busLineHandler(char const*)>
   36f44:	e59d2ce4 	ldr	r2, [sp, #3300]	; 0xce4
   36f48:	e59d1ce0 	ldr	r1, [sp, #3296]	; 0xce0
   36f4c:	e1a00005 	mov	r0, r5
   36f50:	ebfffc55 	bl	360ac <BusControlAPI::busLinesRead(char*, int)>
   36f54:	eafffcf5 	b	36330 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x38>
   36f58:	0003f00c 	.word	0x0003f00c
   36f5c:	00046c68 	.word	0x00046c68
   36f60:	00046c6c 	.word	0x00046c6c
   36f64:	00046c84 	.word	0x00046c84
   36f68:	00046c88 	.word	0x00046c88
   36f6c:	00046ca4 	.word	0x00046ca4
   36f70:	00046cec 	.word	0x00046cec
   36f74:	00046c90 	.word	0x00046c90
   36f78:	00046c74 	.word	0x00046c74
   36f7c:	00046cfc 	.word	0x00046cfc
   36f80:	00046d08 	.word	0x00046d08
   36f84:	00046d18 	.word	0x00046d18
   36f88:	00046d2c 	.word	0x00046d2c
   36f8c:	00046d3c 	.word	0x00046d3c
   36f90:	00046d50 	.word	0x00046d50
   36f94:	00046d64 	.word	0x00046d64
   36f98:	00046d78 	.word	0x00046d78
   36f9c:	00046d84 	.word	0x00046d84
   36fa0:	00046d94 	.word	0x00046d94
   36fa4:	00046f04 	.word	0x00046f04
   36fa8:	00046f10 	.word	0x00046f10
   36fac:	00046f1c 	.word	0x00046f1c
   36fb0:	00046f28 	.word	0x00046f28
   36fb4:	00046f38 	.word	0x00046f38
   36fb8:	00046f48 	.word	0x00046f48
   36fbc:	00046f54 	.word	0x00046f54
   36fc0:	00046f60 	.word	0x00046f60
   36fc4:	00046f70 	.word	0x00046f70
   36fc8:	00046f84 	.word	0x00046f84
   36fcc:	00046f90 	.word	0x00046f90
   36fd0:	00046f98 	.word	0x00046f98
   36fd4:	00046fa0 	.word	0x00046fa0
   36fd8:	00046fac 	.word	0x00046fac
   36fdc:	00046cf0 	.word	0x00046cf0
   36fe0:	00000864 	.word	0x00000864
   36fe4:	00046cb4 	.word	0x00046cb4
   36fe8:	00047974 	.word	0x00047974
   36fec:	00046eec 	.word	0x00046eec
   36ff0:	00046da8 	.word	0x00046da8
   36ff4:	00046db8 	.word	0x00046db8
   36ff8:	00046dc8 	.word	0x00046dc8
   36ffc:	00046dd0 	.word	0x00046dd0
   37000:	00046b24 	.word	0x00046b24
   37004:	00046de0 	.word	0x00046de0
   37008:	00046df0 	.word	0x00046df0
   3700c:	00046e00 	.word	0x00046e00
   37010:	00046b44 	.word	0x00046b44
   37014:	00046e04 	.word	0x00046e04
   37018:	00046e14 	.word	0x00046e14
   3701c:	00046e24 	.word	0x00046e24
   37020:	00046e34 	.word	0x00046e34
   37024:	00046e48 	.word	0x00046e48
   37028:	00046e58 	.word	0x00046e58
   3702c:	00046e64 	.word	0x00046e64
   37030:	00046e74 	.word	0x00046e74
   37034:	00046e7c 	.word	0x00046e7c
   37038:	00046e98 	.word	0x00046e98
   3703c:	00046eb8 	.word	0x00046eb8
   37040:	00046ec8 	.word	0x00046ec8
   37044:	00046ef0 	.word	0x00046ef0
   37048:	00046efc 	.word	0x00046efc
   3704c:	00046ed4 	.word	0x00046ed4
   37050:	00046ea8 	.word	0x00046ea8
   37054:	00046e88 	.word	0x00046e88

00037058 <BusControlAPI::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   37058:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3705c:	e99d5000 	ldmib	sp, {ip, lr}
   37060:	e3500000 	cmp	r0, #0
   37064:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   37068:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3706c:	eafffca1 	b	362f8 <BusControlAPI::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

00037070 <McManager::handleWaitInterruptStatic(void*, unsigned long, unsigned long, unsigned long, unsigned long&)>:
   37070:	e3500000 	cmp	r0, #0
   37074:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   37078:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3707c:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37080:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   37084:	e3500000 	cmp	r0, #0
   37088:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3708c:	e590e000 	ldr	lr, [r0]
   37090:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   37094:	e1a0c00e 	mov	ip, lr
   37098:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3709c:	e12fff1c 	bx	ip

000370a0 <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)>:
   370a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   370a4:	e1a04000 	mov	r4, r0
   370a8:	e1a05001 	mov	r5, r1
   370ac:	e1a06002 	mov	r6, r2
   370b0:	e1a07003 	mov	r7, r3
   370b4:	ebffbec4 	bl	26bcc <CLogger::Get()>
   370b8:	e59f3048 	ldr	r3, [pc, #72]	; 37108 <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)+0x68>
   370bc:	e3a02004 	mov	r2, #4
   370c0:	e59f1044 	ldr	r1, [pc, #68]	; 3710c <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)+0x6c>
   370c4:	ebffbdfd 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   370c8:	e3540000 	cmp	r4, #0
   370cc:	0a00000b 	beq	37100 <McManager::targetFileHandlerStatic(void*, char const*, unsigned char const*, unsigned int)+0x60>
   370d0:	e2844a02 	add	r4, r4, #8192	; 0x2000
   370d4:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   370d8:	e3500000 	cmp	r0, #0
   370dc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   370e0:	e590c000 	ldr	ip, [r0]
   370e4:	e1a03007 	mov	r3, r7
   370e8:	e59ce038 	ldr	lr, [ip, #56]	; 0x38
   370ec:	e1a02006 	mov	r2, r6
   370f0:	e1a01005 	mov	r1, r5
   370f4:	e1a0c00e 	mov	ip, lr
   370f8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   370fc:	e12fff1c 	bx	ip
   37100:	e1a00004 	mov	r0, r4
   37104:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   37108:	00046fc0 	.word	0x00046fc0
   3710c:	00046fb4 	.word	0x00046fb4

00037110 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]>:
   37110:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37114:	e2803a02 	add	r3, r0, #8192	; 0x2000
   37118:	e24dd01c 	sub	sp, sp, #28
   3711c:	e1a02003 	mov	r2, r3
   37120:	e58d3014 	str	r3, [sp, #20]
   37124:	e5d33764 	ldrb	r3, [r3, #1892]	; 0x764
   37128:	e3530000 	cmp	r3, #0
   3712c:	0a000035 	beq	37208 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0xf8>
   37130:	e3a03000 	mov	r3, #0
   37134:	e1a05000 	mov	r5, r0
   37138:	e1a06003 	mov	r6, r3
   3713c:	e1a07003 	mov	r7, r3
   37140:	e5c23767 	strb	r3, [r2, #1895]	; 0x767
   37144:	e5950010 	ldr	r0, [r5, #16]
   37148:	ebfff53a 	bl	34638 <TargetProgrammer::numMemoryBlocks()>
   3714c:	e1500006 	cmp	r0, r6
   37150:	da000025 	ble	371ec <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0xdc>
   37154:	e1a01006 	mov	r1, r6
   37158:	e5950010 	ldr	r0, [r5, #16]
   3715c:	ebfff538 	bl	34644 <TargetProgrammer::getMemoryBlock(int)>
   37160:	e1a04000 	mov	r4, r0
   37164:	e5950010 	ldr	r0, [r5, #16]
   37168:	e5958008 	ldr	r8, [r5, #8]
   3716c:	ebfff537 	bl	34650 <TargetProgrammer::getMemoryImagePtr()>
   37170:	e894000a 	ldm	r4, {r1, r3}
   37174:	e58d7008 	str	r7, [sp, #8]
   37178:	e0802001 	add	r2, r0, r1
   3717c:	e58d7004 	str	r7, [sp, #4]
   37180:	e1a00008 	mov	r0, r8
   37184:	e58d7000 	str	r7, [sp]
   37188:	ebfff6a5 	bl	34c24 <HwManager::blockWrite(unsigned long, unsigned char const*, unsigned long, bool, bool, bool)>
   3718c:	e1a09000 	mov	r9, r0
   37190:	ebffbe8d 	bl	26bcc <CLogger::Get()>
   37194:	e8940c00 	ldm	r4, {sl, fp}
   37198:	e1a08000 	mov	r8, r0
   3719c:	ebffdb62 	bl	2df2c <micros>
   371a0:	e59f30b0 	ldr	r3, [pc, #176]	; 37258 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0x148>
   371a4:	e58d000c 	str	r0, [sp, #12]
   371a8:	e58d9008 	str	r9, [sp, #8]
   371ac:	e88d0c00 	stm	sp, {sl, fp}
   371b0:	e1a00008 	mov	r0, r8
   371b4:	e3a02004 	mov	r2, #4
   371b8:	e59f109c 	ldr	r1, [pc, #156]	; 3725c <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0x14c>
   371bc:	ebffbdbf 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   371c0:	e5943000 	ldr	r3, [r4]
   371c4:	e2866001 	add	r6, r6, #1
   371c8:	e3530000 	cmp	r3, #0
   371cc:	1affffdc 	bne	37144 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0x34>
   371d0:	e3a02001 	mov	r2, #1
   371d4:	e59d3014 	ldr	r3, [sp, #20]
   371d8:	e5950010 	ldr	r0, [r5, #16]
   371dc:	e5c32767 	strb	r2, [r3, #1895]	; 0x767
   371e0:	ebfff514 	bl	34638 <TargetProgrammer::numMemoryBlocks()>
   371e4:	e1500006 	cmp	r0, r6
   371e8:	caffffd9 	bgt	37154 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0x44>
   371ec:	e59d3014 	ldr	r3, [sp, #20]
   371f0:	e5d33765 	ldrb	r3, [r3, #1893]	; 0x765
   371f4:	e3530000 	cmp	r3, #0
   371f8:	1a000011 	bne	37244 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0x134>
   371fc:	e3a03000 	mov	r3, #0
   37200:	e59d2014 	ldr	r2, [sp, #20]
   37204:	e5c23764 	strb	r3, [r2, #1892]	; 0x764
   37208:	e59d2014 	ldr	r2, [sp, #20]
   3720c:	e5d23766 	ldrb	r3, [r2, #1894]	; 0x766
   37210:	e3530000 	cmp	r3, #0
   37214:	0a000008 	beq	3723c <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0x12c>
   37218:	e5920760 	ldr	r0, [r2, #1888]	; 0x760
   3721c:	e3500000 	cmp	r0, #0
   37220:	0a000002 	beq	37230 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0x120>
   37224:	e5903000 	ldr	r3, [r0]
   37228:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   3722c:	e12fff33 	blx	r3
   37230:	e3a03000 	mov	r3, #0
   37234:	e59d2014 	ldr	r2, [sp, #20]
   37238:	e5c23766 	strb	r3, [r2, #1894]	; 0x766
   3723c:	e28dd01c 	add	sp, sp, #28
   37240:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37244:	e3e02000 	mvn	r2, #0
   37248:	e5951014 	ldr	r1, [r5, #20]
   3724c:	e595000c 	ldr	r0, [r5, #12]
   37250:	ebffe8be 	bl	31550 <BusAccess::targetReqReset(int, int)>
   37254:	eaffffe8 	b	371fc <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]+0xec>
   37258:	00046fd4 	.word	0x00046fd4
   3725c:	00046fb4 	.word	0x00046fb4

00037260 <McManager::busActionCompleteStatic(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   37260:	e2411004 	sub	r1, r1, #4
   37264:	e16f1f11 	clz	r1, r1
   37268:	e3500000 	cmp	r0, #0
   3726c:	e1a012a1 	lsr	r1, r1, #5
   37270:	03a01000 	moveq	r1, #0
   37274:	e3510000 	cmp	r1, #0
   37278:	012fff1e 	bxeq	lr
   3727c:	eaffffa3 	b	37110 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]>

00037280 <McManager::McManager(DisplayBase*, CommandHandler&, HwManager&, BusAccess&, TargetProgrammer&)>:
   37280:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   37284:	e3a0c000 	mov	ip, #0
   37288:	e3e04000 	mvn	r4, #0
   3728c:	e3a07ffa 	mov	r7, #1000	; 0x3e8
   37290:	e3a06064 	mov	r6, #100	; 0x64
   37294:	e3a05f7d 	mov	r5, #500	; 0x1f4
   37298:	e880000e 	stm	r0, {r1, r2, r3}
   3729c:	e59d2014 	ldr	r2, [sp, #20]
   372a0:	e59d3018 	ldr	r3, [sp, #24]
   372a4:	e580200c 	str	r2, [r0, #12]
   372a8:	e59f204c 	ldr	r2, [pc, #76]	; 372fc <McManager::McManager(DisplayBase*, CommandHandler&, HwManager&, BusAccess&, TargetProgrammer&)+0x7c>
   372ac:	e5803010 	str	r3, [r0, #16]
   372b0:	e2803a02 	add	r3, r0, #8192	; 0x2000
   372b4:	e5837768 	str	r7, [r3, #1896]	; 0x768
   372b8:	e583677c 	str	r6, [r3, #1916]	; 0x77c
   372bc:	e5835788 	str	r5, [r3, #1928]	; 0x788
   372c0:	e1a0e000 	mov	lr, r0
   372c4:	e5804014 	str	r4, [r0, #20]
   372c8:	e5804018 	str	r4, [r0, #24]
   372cc:	e5820000 	str	r0, [r2]
   372d0:	e583c75c 	str	ip, [r3, #1884]	; 0x75c
   372d4:	e583c760 	str	ip, [r3, #1888]	; 0x760
   372d8:	e583c730 	str	ip, [r3, #1840]	; 0x730
   372dc:	e583c76c 	str	ip, [r3, #1900]	; 0x76c
   372e0:	e583c774 	str	ip, [r3, #1908]	; 0x774
   372e4:	e583c778 	str	ip, [r3, #1912]	; 0x778
   372e8:	e583c770 	str	ip, [r3, #1904]	; 0x770
   372ec:	e5c3c780 	strb	ip, [r3, #1920]	; 0x780
   372f0:	e583c78c 	str	ip, [r3, #1932]	; 0x78c
   372f4:	e583c784 	str	ip, [r3, #1924]	; 0x784
   372f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   372fc:	0004e440 	.word	0x0004e440

00037300 <McManager::init()>:
   37300:	e92d4010 	push	{r4, lr}
   37304:	e5903014 	ldr	r3, [r0, #20]
   37308:	e24dd030 	sub	sp, sp, #48	; 0x30
   3730c:	e3530000 	cmp	r3, #0
   37310:	e1a04000 	mov	r4, r0
   37314:	ba00001a 	blt	37384 <McManager::init()+0x84>
   37318:	e5943018 	ldr	r3, [r4, #24]
   3731c:	e3530000 	cmp	r3, #0
   37320:	ba00000d 	blt	3735c <McManager::init()+0x5c>
   37324:	e59f00a8 	ldr	r0, [pc, #168]	; 373d4 <McManager::init()+0xd4>
   37328:	ebffcf51 	bl	2b074 <operator new(unsigned int)>
   3732c:	e594200c 	ldr	r2, [r4, #12]
   37330:	e1a01004 	mov	r1, r4
   37334:	eb00048c 	bl	3856c <McTRS80::McTRS80(McManager&, BusAccess&)>
   37338:	e3a03000 	mov	r3, #0
   3733c:	e3a02001 	mov	r2, #1
   37340:	e2844a02 	add	r4, r4, #8192	; 0x2000
   37344:	e5c42780 	strb	r2, [r4, #1920]	; 0x780
   37348:	e584376c 	str	r3, [r4, #1900]	; 0x76c
   3734c:	e5843774 	str	r3, [r4, #1908]	; 0x774
   37350:	e5843784 	str	r3, [r4, #1924]	; 0x784
   37354:	e28dd030 	add	sp, sp, #48	; 0x30
   37358:	e8bd8010 	pop	{r4, pc}
   3735c:	e3a02000 	mov	r2, #0
   37360:	e59f3070 	ldr	r3, [pc, #112]	; 373d8 <McManager::init()+0xd8>
   37364:	e5940004 	ldr	r0, [r4, #4]
   37368:	e1a01004 	mov	r1, r4
   3736c:	e88d000c 	stm	sp, {r2, r3}
   37370:	e59f3064 	ldr	r3, [pc, #100]	; 373dc <McManager::init()+0xdc>
   37374:	e3a02001 	mov	r2, #1
   37378:	ebffe1ea 	bl	2fb28 <CommandHandler::commsSocketAdd(void*, bool, bool (*)(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int), bool (*)(unsigned char const*, unsigned int), bool (*)(void*, char const*, unsigned char const*, unsigned int))>
   3737c:	e5840018 	str	r0, [r4, #24]
   37380:	eaffffe7 	b	37324 <McManager::init()+0x24>
   37384:	e3a03000 	mov	r3, #0
   37388:	e590000c 	ldr	r0, [r0, #12]
   3738c:	e59f204c 	ldr	r2, [pc, #76]	; 373e0 <McManager::init()+0xe0>
   37390:	e58d3028 	str	r3, [sp, #40]	; 0x28
   37394:	e58d3024 	str	r3, [sp, #36]	; 0x24
   37398:	e58d3020 	str	r3, [sp, #32]
   3739c:	e58d301c 	str	r3, [sp, #28]
   373a0:	e58d3018 	str	r3, [sp, #24]
   373a4:	e58d3014 	str	r3, [sp, #20]
   373a8:	e58d3010 	str	r3, [sp, #16]
   373ac:	e58d300c 	str	r3, [sp, #12]
   373b0:	e58d3008 	str	r3, [sp, #8]
   373b4:	e58d3004 	str	r3, [sp, #4]
   373b8:	e58d3000 	str	r3, [sp]
   373bc:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   373c0:	e59f301c 	ldr	r3, [pc, #28]	; 373e4 <McManager::init()+0xe4>
   373c4:	e3a01001 	mov	r1, #1
   373c8:	ebffef72 	bl	33198 <BusAccess::busSocketAdd(bool, void (*)(void*, unsigned long, unsigned long, unsigned long, unsigned long&), void (*)(void*, BR_BUS_ACTION, BR_BUS_ACTION_REASON), bool, bool, bool, unsigned long, bool, unsigned long, bool, unsigned long, bool, BR_BUS_ACTION_REASON, bool, void*)>
   373cc:	e5840014 	str	r0, [r4, #20]
   373d0:	eaffffd0 	b	37318 <McManager::init()+0x18>
   373d4:	000005e8 	.word	0x000005e8
   373d8:	000370a0 	.word	0x000370a0
   373dc:	00037f40 	.word	0x00037f40
   373e0:	00037070 	.word	0x00037070
   373e4:	00037260 	.word	0x00037260

000373e8 <McManager::getNumMachines()>:
   373e8:	e2800a02 	add	r0, r0, #8192	; 0x2000
   373ec:	e590075c 	ldr	r0, [r0, #1884]	; 0x75c
   373f0:	e12fff1e 	bx	lr

000373f4 <McManager::getMachine()>:
   373f4:	e2800a02 	add	r0, r0, #8192	; 0x2000
   373f8:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   373fc:	e12fff1e 	bx	lr

00037400 <McManager::getMachineName()>:
   37400:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37404:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   37408:	e3500000 	cmp	r0, #0
   3740c:	0a000002 	beq	3741c <McManager::getMachineName()+0x1c>
   37410:	e5903000 	ldr	r3, [r0]
   37414:	e5933008 	ldr	r3, [r3, #8]
   37418:	e12fff13 	bx	r3
   3741c:	e59f0000 	ldr	r0, [pc]	; 37424 <McManager::getMachineName()+0x24>
   37420:	e12fff1e 	bx	lr
   37424:	000458a4 	.word	0x000458a4

00037428 <McManager::getMachineJSON()>:
   37428:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3742c:	e3a02e46 	mov	r2, #1120	; 0x460
   37430:	e2808a02 	add	r8, r0, #8192	; 0x2000
   37434:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
   37438:	e1a0b000 	mov	fp, r0
   3743c:	e59f114c 	ldr	r1, [pc, #332]	; 37590 <McManager::getMachineJSON()+0x168>
   37440:	e59f014c 	ldr	r0, [pc, #332]	; 37594 <McManager::getMachineJSON()+0x16c>
   37444:	ebffdaf3 	bl	2e018 <strlcpy>
   37448:	e598375c 	ldr	r3, [r8, #1884]	; 0x75c
   3744c:	e3530000 	cmp	r3, #0
   37450:	da00004b 	ble	37584 <McManager::getMachineJSON()+0x15c>
   37454:	e5980734 	ldr	r0, [r8, #1844]	; 0x734
   37458:	e59fc134 	ldr	ip, [pc, #308]	; 37594 <McManager::getMachineJSON()+0x16c>
   3745c:	e5903000 	ldr	r3, [r0]
   37460:	e28d100c 	add	r1, sp, #12
   37464:	e593300c 	ldr	r3, [r3, #12]
   37468:	e3a02f4b 	mov	r2, #300	; 0x12c
   3746c:	e58dc004 	str	ip, [sp, #4]
   37470:	e28b5c27 	add	r5, fp, #9984	; 0x2700
   37474:	e1a0700c 	mov	r7, ip
   37478:	e2855034 	add	r5, r5, #52	; 0x34
   3747c:	e12fff33 	blx	r3
   37480:	e3a04000 	mov	r4, #0
   37484:	e3a06e46 	mov	r6, #1120	; 0x460
   37488:	e3a0af4b 	mov	sl, #300	; 0x12c
   3748c:	e59f9104 	ldr	r9, [pc, #260]	; 37598 <McManager::getMachineJSON()+0x170>
   37490:	ea000009 	b	374bc <McManager::getMachineJSON()+0x94>
   37494:	e5b50004 	ldr	r0, [r5, #4]!
   37498:	e1a0200a 	mov	r2, sl
   3749c:	e5903000 	ldr	r3, [r0]
   374a0:	e28d100c 	add	r1, sp, #12
   374a4:	e593300c 	ldr	r3, [r3, #12]
   374a8:	e12fff33 	blx	r3
   374ac:	e1a02006 	mov	r2, r6
   374b0:	e1a01009 	mov	r1, r9
   374b4:	e1a00007 	mov	r0, r7
   374b8:	ebffdaf2 	bl	2e088 <strlcat>
   374bc:	e1a02006 	mov	r2, r6
   374c0:	e28d100c 	add	r1, sp, #12
   374c4:	e1a00007 	mov	r0, r7
   374c8:	ebffdaee 	bl	2e088 <strlcat>
   374cc:	e598375c 	ldr	r3, [r8, #1884]	; 0x75c
   374d0:	e2844001 	add	r4, r4, #1
   374d4:	e1530004 	cmp	r3, r4
   374d8:	caffffed 	bgt	37494 <McManager::getMachineJSON()+0x6c>
   374dc:	e3a02e46 	mov	r2, #1120	; 0x460
   374e0:	e59f10b4 	ldr	r1, [pc, #180]	; 3759c <McManager::getMachineJSON()+0x174>
   374e4:	e59f00a8 	ldr	r0, [pc, #168]	; 37594 <McManager::getMachineJSON()+0x16c>
   374e8:	ebffdae6 	bl	2e088 <strlcat>
   374ec:	e3a02e46 	mov	r2, #1120	; 0x460
   374f0:	e59f10a8 	ldr	r1, [pc, #168]	; 375a0 <McManager::getMachineJSON()+0x178>
   374f4:	e59f0098 	ldr	r0, [pc, #152]	; 37594 <McManager::getMachineJSON()+0x16c>
   374f8:	ebffdae2 	bl	2e088 <strlcat>
   374fc:	e3a02e46 	mov	r2, #1120	; 0x460
   37500:	e59f109c 	ldr	r1, [pc, #156]	; 375a4 <McManager::getMachineJSON()+0x17c>
   37504:	e59f0088 	ldr	r0, [pc, #136]	; 37594 <McManager::getMachineJSON()+0x16c>
   37508:	ebffdade 	bl	2e088 <strlcat>
   3750c:	e5980760 	ldr	r0, [r8, #1888]	; 0x760
   37510:	e3500000 	cmp	r0, #0
   37514:	0a000018 	beq	3757c <McManager::getMachineJSON()+0x154>
   37518:	e5903000 	ldr	r3, [r0]
   3751c:	e5933008 	ldr	r3, [r3, #8]
   37520:	e12fff33 	blx	r3
   37524:	e1a01000 	mov	r1, r0
   37528:	e3a02e46 	mov	r2, #1120	; 0x460
   3752c:	e59f0060 	ldr	r0, [pc, #96]	; 37594 <McManager::getMachineJSON()+0x16c>
   37530:	ebffdad4 	bl	2e088 <strlcat>
   37534:	e3a02e46 	mov	r2, #1120	; 0x460
   37538:	e59f1064 	ldr	r1, [pc, #100]	; 375a4 <McManager::getMachineJSON()+0x17c>
   3753c:	e59f0050 	ldr	r0, [pc, #80]	; 37594 <McManager::getMachineJSON()+0x16c>
   37540:	ebffdad0 	bl	2e088 <strlcat>
   37544:	e59b000c 	ldr	r0, [fp, #12]
   37548:	ebffeee0 	bl	330d0 <BusAccess::clockCurFreqHz()>
   3754c:	e1a04000 	mov	r4, r0
   37550:	e59f003c 	ldr	r0, [pc, #60]	; 37594 <McManager::getMachineJSON()+0x16c>
   37554:	ebffcac8 	bl	2a07c <strlen>
   37558:	e59d2004 	ldr	r2, [sp, #4]
   3755c:	e1a03004 	mov	r3, r4
   37560:	e0820000 	add	r0, r2, r0
   37564:	e3a01e46 	mov	r1, #1120	; 0x460
   37568:	e59f2038 	ldr	r2, [pc, #56]	; 375a8 <McManager::getMachineJSON()+0x180>
   3756c:	ebffdb20 	bl	2e1f4 <snprintf>
   37570:	e59f001c 	ldr	r0, [pc, #28]	; 37594 <McManager::getMachineJSON()+0x16c>
   37574:	e28ddf4f 	add	sp, sp, #316	; 0x13c
   37578:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3757c:	e59f1028 	ldr	r1, [pc, #40]	; 375ac <McManager::getMachineJSON()+0x184>
   37580:	eaffffe8 	b	37528 <McManager::getMachineJSON()+0x100>
   37584:	e59f3008 	ldr	r3, [pc, #8]	; 37594 <McManager::getMachineJSON()+0x16c>
   37588:	e58d3004 	str	r3, [sp, #4]
   3758c:	eaffffd2 	b	374dc <McManager::getMachineJSON()+0xb4>
   37590:	00047008 	.word	0x00047008
   37594:	0004e444 	.word	0x0004e444
   37598:	00043330 	.word	0x00043330
   3759c:	00046a34 	.word	0x00046a34
   375a0:	00047018 	.word	0x00047018
   375a4:	00046eec 	.word	0x00046eec
   375a8:	00047028 	.word	0x00047028
   375ac:	000458a4 	.word	0x000458a4

000375b0 <McManager::getMachineClock()>:
   375b0:	e590000c 	ldr	r0, [r0, #12]
   375b4:	eaffeec5 	b	330d0 <BusAccess::clockCurFreqHz()>

000375b8 <McManager::targetIrq(int)>:
   375b8:	e1a03000 	mov	r3, r0
   375bc:	e1a02001 	mov	r2, r1
   375c0:	e590000c 	ldr	r0, [r0, #12]
   375c4:	e5931014 	ldr	r1, [r3, #20]
   375c8:	eaffe802 	b	315d8 <BusAccess::targetReqIRQ(int, int)>

000375cc <McManager::add(McBase*)>:
   375cc:	e2802a02 	add	r2, r0, #8192	; 0x2000
   375d0:	e592375c 	ldr	r3, [r2, #1884]	; 0x75c
   375d4:	e3530009 	cmp	r3, #9
   375d8:	d283cd27 	addle	ip, r3, #2496	; 0x9c0
   375dc:	d080010c 	addle	r0, r0, ip, lsl #2
   375e0:	d2833001 	addle	r3, r3, #1
   375e4:	d582375c 	strle	r3, [r2, #1884]	; 0x75c
   375e8:	d5801034 	strle	r1, [r0, #52]	; 0x34
   375ec:	e12fff1e 	bx	lr

000375f0 <McManager::setupMachine(char const*)>:
   375f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   375f4:	e24dde1a 	sub	sp, sp, #416	; 0x1a0
   375f8:	e1a07000 	mov	r7, r0
   375fc:	e28d2010 	add	r2, sp, #16
   37600:	e3a03064 	mov	r3, #100	; 0x64
   37604:	e59f01f0 	ldr	r0, [pc, #496]	; 377fc <McManager::setupMachine(char const*)+0x20c>
   37608:	e1a08001 	mov	r8, r1
   3760c:	ebffdb37 	bl	2e2f0 <jsonGetValueForKey>
   37610:	e3500000 	cmp	r0, #0
   37614:	0a000016 	beq	37674 <McManager::setupMachine(char const*)+0x84>
   37618:	e2876a02 	add	r6, r7, #8192	; 0x2000
   3761c:	e596375c 	ldr	r3, [r6, #1884]	; 0x75c
   37620:	e3530000 	cmp	r3, #0
   37624:	da000012 	ble	37674 <McManager::setupMachine(char const*)+0x84>
   37628:	e3a04000 	mov	r4, #0
   3762c:	e1a0a004 	mov	sl, r4
   37630:	e2875c27 	add	r5, r7, #9984	; 0x2700
   37634:	e2855030 	add	r5, r5, #48	; 0x30
   37638:	e5b50004 	ldr	r0, [r5, #4]!
   3763c:	e3500000 	cmp	r0, #0
   37640:	0a000007 	beq	37664 <McManager::setupMachine(char const*)+0x74>
   37644:	e5903000 	ldr	r3, [r0]
   37648:	e28d20d8 	add	r2, sp, #216	; 0xd8
   3764c:	e58da0d8 	str	sl, [sp, #216]	; 0xd8
   37650:	e5933000 	ldr	r3, [r3]
   37654:	e28d1010 	add	r1, sp, #16
   37658:	e12fff33 	blx	r3
   3765c:	e2509000 	subs	r9, r0, #0
   37660:	1a000007 	bne	37684 <McManager::setupMachine(char const*)+0x94>
   37664:	e596375c 	ldr	r3, [r6, #1884]	; 0x75c
   37668:	e2844001 	add	r4, r4, #1
   3766c:	e1530004 	cmp	r3, r4
   37670:	cafffff0 	bgt	37638 <McManager::setupMachine(char const*)+0x48>
   37674:	e3a09000 	mov	r9, #0
   37678:	e1a00009 	mov	r0, r9
   3767c:	e28dde1a 	add	sp, sp, #416	; 0x1a0
   37680:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37684:	e2844d27 	add	r4, r4, #2496	; 0x9c0
   37688:	e0874104 	add	r4, r7, r4, lsl #2
   3768c:	e5944034 	ldr	r4, [r4, #52]	; 0x34
   37690:	e3540000 	cmp	r4, #0
   37694:	0afffff6 	beq	37674 <McManager::setupMachine(char const*)+0x84>
   37698:	e3a02000 	mov	r2, #0
   3769c:	e5971014 	ldr	r1, [r7, #20]
   376a0:	e597000c 	ldr	r0, [r7, #12]
   376a4:	e5864760 	str	r4, [r6, #1888]	; 0x760
   376a8:	ebffe77b 	bl	3149c <BusAccess::waitOnIO(int, bool)>
   376ac:	e3a02000 	mov	r2, #0
   376b0:	e5971014 	ldr	r1, [r7, #20]
   376b4:	e597000c 	ldr	r0, [r7, #12]
   376b8:	ebffe76e 	bl	31478 <BusAccess::waitOnMemory(int, bool)>
   376bc:	e5943000 	ldr	r3, [r4]
   376c0:	e1a02008 	mov	r2, r8
   376c4:	e28d1010 	add	r1, sp, #16
   376c8:	e5933010 	ldr	r3, [r3, #16]
   376cc:	e1a00004 	mov	r0, r4
   376d0:	e12fff33 	blx	r3
   376d4:	e5943000 	ldr	r3, [r4]
   376d8:	e5971000 	ldr	r1, [r7]
   376dc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   376e0:	e1a00004 	mov	r0, r4
   376e4:	e12fff33 	blx	r3
   376e8:	e5943000 	ldr	r3, [r4]
   376ec:	e59f210c 	ldr	r2, [pc, #268]	; 37800 <McManager::setupMachine(char const*)+0x210>
   376f0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   376f4:	e597500c 	ldr	r5, [r7, #12]
   376f8:	e1530002 	cmp	r3, r2
   376fc:	e5971014 	ldr	r1, [r7, #20]
   37700:	1a000037 	bne	377e4 <McManager::setupMachine(char const*)+0x1f4>
   37704:	e5d420a8 	ldrb	r2, [r4, #168]	; 0xa8
   37708:	e1a00005 	mov	r0, r5
   3770c:	ebffe762 	bl	3149c <BusAccess::waitOnIO(int, bool)>
   37710:	e5943000 	ldr	r3, [r4]
   37714:	e59f20e8 	ldr	r2, [pc, #232]	; 37804 <McManager::setupMachine(char const*)+0x214>
   37718:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
   3771c:	e597500c 	ldr	r5, [r7, #12]
   37720:	e1530002 	cmp	r3, r2
   37724:	e5971014 	ldr	r1, [r7, #20]
   37728:	1a000027 	bne	377cc <McManager::setupMachine(char const*)+0x1dc>
   3772c:	e5d420a9 	ldrb	r2, [r4, #169]	; 0xa9
   37730:	e1a00005 	mov	r0, r5
   37734:	ebffe74f 	bl	31478 <BusAccess::waitOnMemory(int, bool)>
   37738:	e1a01008 	mov	r1, r8
   3773c:	e28d2074 	add	r2, sp, #116	; 0x74
   37740:	e3a03064 	mov	r3, #100	; 0x64
   37744:	e59f00bc 	ldr	r0, [pc, #188]	; 37808 <McManager::setupMachine(char const*)+0x218>
   37748:	ebffdae8 	bl	2e2f0 <jsonGetValueForKey>
   3774c:	e2504000 	subs	r4, r0, #0
   37750:	1a000007 	bne	37774 <McManager::setupMachine(char const*)+0x184>
   37754:	ebffbd1c 	bl	26bcc <CLogger::Get()>
   37758:	e59f30ac 	ldr	r3, [pc, #172]	; 3780c <McManager::setupMachine(char const*)+0x21c>
   3775c:	e3a02004 	mov	r2, #4
   37760:	e59f10a8 	ldr	r1, [pc, #168]	; 37810 <McManager::setupMachine(char const*)+0x220>
   37764:	ebffbc55 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37768:	e1a00009 	mov	r0, r9
   3776c:	e28dde1a 	add	sp, sp, #416	; 0x1a0
   37770:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37774:	e1a09004 	mov	r9, r4
   37778:	e3a020c8 	mov	r2, #200	; 0xc8
   3777c:	e59f1090 	ldr	r1, [pc, #144]	; 37814 <McManager::setupMachine(char const*)+0x224>
   37780:	e28d00d8 	add	r0, sp, #216	; 0xd8
   37784:	ebffda23 	bl	2e018 <strlcpy>
   37788:	e3a020c8 	mov	r2, #200	; 0xc8
   3778c:	e28d1074 	add	r1, sp, #116	; 0x74
   37790:	e28d00d8 	add	r0, sp, #216	; 0xd8
   37794:	ebffda3b 	bl	2e088 <strlcat>
   37798:	e28d10d8 	add	r1, sp, #216	; 0xd8
   3779c:	e5970004 	ldr	r0, [r7, #4]
   377a0:	ebffe30c 	bl	303d8 <CommandHandler::sendAPIReq(char const*)>
   377a4:	ebffbd08 	bl	26bcc <CLogger::Get()>
   377a8:	e28d30d8 	add	r3, sp, #216	; 0xd8
   377ac:	e58d3000 	str	r3, [sp]
   377b0:	e3a02004 	mov	r2, #4
   377b4:	e59f305c 	ldr	r3, [pc, #92]	; 37818 <McManager::setupMachine(char const*)+0x228>
   377b8:	e59f1050 	ldr	r1, [pc, #80]	; 37810 <McManager::setupMachine(char const*)+0x220>
   377bc:	ebffbc3f 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   377c0:	e1a00009 	mov	r0, r9
   377c4:	e28dde1a 	add	sp, sp, #416	; 0x1a0
   377c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   377cc:	e58d100c 	str	r1, [sp, #12]
   377d0:	e1a00004 	mov	r0, r4
   377d4:	e12fff33 	blx	r3
   377d8:	e59d100c 	ldr	r1, [sp, #12]
   377dc:	e1a02000 	mov	r2, r0
   377e0:	eaffffd2 	b	37730 <McManager::setupMachine(char const*)+0x140>
   377e4:	e58d100c 	str	r1, [sp, #12]
   377e8:	e1a00004 	mov	r0, r4
   377ec:	e12fff33 	blx	r3
   377f0:	e59d100c 	ldr	r1, [sp, #12]
   377f4:	e1a02000 	mov	r2, r0
   377f8:	eaffffc2 	b	37708 <McManager::setupMachine(char const*)+0x118>
   377fc:	00046a90 	.word	0x00046a90
   37800:	00037f78 	.word	0x00037f78
   37804:	00037f80 	.word	0x00037f80
   37808:	00047038 	.word	0x00047038
   3780c:	00047068 	.word	0x00047068
   37810:	00046fb4 	.word	0x00046fb4
   37814:	00047040 	.word	0x00047040
   37818:	00047054 	.word	0x00047054

0003781c <McManager::setMachineByName(char const*)>:
   3781c:	e92d4010 	push	{r4, lr}
   37820:	e1a04000 	mov	r4, r0
   37824:	e24ddffa 	sub	sp, sp, #1000	; 0x3e8
   37828:	e1a03001 	mov	r3, r1
   3782c:	e59f201c 	ldr	r2, [pc, #28]	; 37850 <McManager::setMachineByName(char const*)+0x34>
   37830:	e1a0000d 	mov	r0, sp
   37834:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   37838:	ebffda6d 	bl	2e1f4 <snprintf>
   3783c:	e1a0100d 	mov	r1, sp
   37840:	e1a00004 	mov	r0, r4
   37844:	ebffff69 	bl	375f0 <McManager::setupMachine(char const*)>
   37848:	e28ddffa 	add	sp, sp, #1000	; 0x3e8
   3784c:	e8bd8010 	pop	{r4, pc}
   37850:	0004707c 	.word	0x0004707c

00037854 <McManager::displayRefresh()>:
   37854:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   37858:	e2804a02 	add	r4, r0, #8192	; 0x2000
   3785c:	e5943760 	ldr	r3, [r4, #1888]	; 0x760
   37860:	e3530000 	cmp	r3, #0
   37864:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   37868:	e5932000 	ldr	r2, [r3]
   3786c:	e59f113c 	ldr	r1, [pc, #316]	; 379b0 <McManager::displayRefresh()+0x15c>
   37870:	e5922058 	ldr	r2, [r2, #88]	; 0x58
   37874:	e1a05000 	mov	r5, r0
   37878:	e1520001 	cmp	r2, r1
   3787c:	1a000039 	bne	37968 <McManager::displayRefresh()+0x114>
   37880:	e5937074 	ldr	r7, [r3, #116]	; 0x74
   37884:	ebffd9a9 	bl	2df30 <millis>
   37888:	e1a01007 	mov	r1, r7
   3788c:	e1a06000 	mov	r6, r0
   37890:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   37894:	eb0018fc 	bl	3dc8c <__aeabi_uidiv>
   37898:	e5941774 	ldr	r1, [r4, #1908]	; 0x774
   3789c:	e1a02000 	mov	r2, r0
   378a0:	e1a00006 	mov	r0, r6
   378a4:	ebffd9be 	bl	2dfa4 <isTimeout>
   378a8:	e3500000 	cmp	r0, #0
   378ac:	1a000014 	bne	37904 <McManager::displayRefresh()+0xb0>
   378b0:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   378b4:	e5903000 	ldr	r3, [r0]
   378b8:	e5933020 	ldr	r3, [r3, #32]
   378bc:	e12fff33 	blx	r3
   378c0:	ebffd99a 	bl	2df30 <millis>
   378c4:	e5942768 	ldr	r2, [r4, #1896]	; 0x768
   378c8:	e5941778 	ldr	r1, [r4, #1912]	; 0x778
   378cc:	ebffd9b4 	bl	2dfa4 <isTimeout>
   378d0:	e3500000 	cmp	r0, #0
   378d4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   378d8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   378dc:	e594376c 	ldr	r3, [r4, #1900]	; 0x76c
   378e0:	e5941768 	ldr	r1, [r4, #1896]	; 0x768
   378e4:	e0000390 	mul	r0, r0, r3
   378e8:	eb0018e7 	bl	3dc8c <__aeabi_uidiv>
   378ec:	e3a03000 	mov	r3, #0
   378f0:	e5840770 	str	r0, [r4, #1904]	; 0x770
   378f4:	e584376c 	str	r3, [r4, #1900]	; 0x76c
   378f8:	ebffd98c 	bl	2df30 <millis>
   378fc:	e5840778 	str	r0, [r4, #1912]	; 0x778
   37900:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   37904:	ebffd989 	bl	2df30 <millis>
   37908:	e5942760 	ldr	r2, [r4, #1888]	; 0x760
   3790c:	e594376c 	ldr	r3, [r4, #1900]	; 0x76c
   37910:	e5921000 	ldr	r1, [r2]
   37914:	e59fc098 	ldr	ip, [pc, #152]	; 379b4 <McManager::displayRefresh()+0x160>
   37918:	e5911060 	ldr	r1, [r1, #96]	; 0x60
   3791c:	e2833001 	add	r3, r3, #1
   37920:	e151000c 	cmp	r1, ip
   37924:	e5840774 	str	r0, [r4, #1908]	; 0x774
   37928:	e584376c 	str	r3, [r4, #1900]	; 0x76c
   3792c:	1a00001c 	bne	379a4 <McManager::displayRefresh()+0x150>
   37930:	e5d2009c 	ldrb	r0, [r2, #156]	; 0x9c
   37934:	e3500000 	cmp	r0, #0
   37938:	1a00000e 	bne	37978 <McManager::displayRefresh()+0x124>
   3793c:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   37940:	e5903000 	ldr	r3, [r0]
   37944:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   37948:	e12fff33 	blx	r3
   3794c:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   37950:	e3500000 	cmp	r0, #0
   37954:	0affffd6 	beq	378b4 <McManager::displayRefresh()+0x60>
   37958:	e5903000 	ldr	r3, [r0]
   3795c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   37960:	e12fff33 	blx	r3
   37964:	eaffffd1 	b	378b0 <McManager::displayRefresh()+0x5c>
   37968:	e1a00003 	mov	r0, r3
   3796c:	e12fff32 	blx	r2
   37970:	e1a07000 	mov	r7, r0
   37974:	eaffffc2 	b	37884 <McManager::displayRefresh()+0x30>
   37978:	e595000c 	ldr	r0, [r5, #12]
   3797c:	ebffe6d3 	bl	314d0 <BusAccess::waitIsHeld()>
   37980:	e3500000 	cmp	r0, #0
   37984:	0affffec 	beq	3793c <McManager::displayRefresh()+0xe8>
   37988:	e3a02000 	mov	r2, #0
   3798c:	e5951014 	ldr	r1, [r5, #20]
   37990:	e595000c 	ldr	r0, [r5, #12]
   37994:	ebffe71c 	bl	3160c <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   37998:	e3a03001 	mov	r3, #1
   3799c:	e5c43766 	strb	r3, [r4, #1894]	; 0x766
   379a0:	eaffffe9 	b	3794c <McManager::displayRefresh()+0xf8>
   379a4:	e1a00002 	mov	r0, r2
   379a8:	e12fff31 	blx	r1
   379ac:	eaffffe0 	b	37934 <McManager::displayRefresh()+0xe0>
   379b0:	00037f88 	.word	0x00037f88
   379b4:	00037f90 	.word	0x00037f90

000379b8 <McManager::service()>:
   379b8:	e92d4070 	push	{r4, r5, r6, lr}
   379bc:	e24ddd4e 	sub	sp, sp, #4992	; 0x1380
   379c0:	e2804a02 	add	r4, r0, #8192	; 0x2000
   379c4:	e24dd018 	sub	sp, sp, #24
   379c8:	e1a06000 	mov	r6, r0
   379cc:	ebffffa0 	bl	37854 <McManager::displayRefresh()>
   379d0:	e5d45780 	ldrb	r5, [r4, #1920]	; 0x780
   379d4:	e3550000 	cmp	r5, #0
   379d8:	0a00001d 	beq	37a54 <McManager::service()+0x9c>
   379dc:	e5943760 	ldr	r3, [r4, #1888]	; 0x760
   379e0:	e3530000 	cmp	r3, #0
   379e4:	0a00001a 	beq	37a54 <McManager::service()+0x9c>
   379e8:	ebffd950 	bl	2df30 <millis>
   379ec:	e594277c 	ldr	r2, [r4, #1916]	; 0x77c
   379f0:	e5941784 	ldr	r1, [r4, #1924]	; 0x784
   379f4:	ebffd96a 	bl	2dfa4 <isTimeout>
   379f8:	e3500000 	cmp	r0, #0
   379fc:	0a000014 	beq	37a54 <McManager::service()+0x9c>
   37a00:	e594378c 	ldr	r3, [r4, #1932]	; 0x78c
   37a04:	e5941788 	ldr	r1, [r4, #1928]	; 0x788
   37a08:	e2832001 	add	r2, r3, #1
   37a0c:	e1530001 	cmp	r3, r1
   37a10:	83a03000 	movhi	r3, #0
   37a14:	93a05000 	movls	r5, #0
   37a18:	e5940760 	ldr	r0, [r4, #1888]	; 0x760
   37a1c:	e584278c 	str	r2, [r4, #1932]	; 0x78c
   37a20:	8584378c 	strhi	r3, [r4, #1932]	; 0x78c
   37a24:	e5902000 	ldr	r2, [r0]
   37a28:	e28d3010 	add	r3, sp, #16
   37a2c:	e58d300c 	str	r3, [sp, #12]
   37a30:	e59d100c 	ldr	r1, [sp, #12]
   37a34:	e1a03005 	mov	r3, r5
   37a38:	e5925044 	ldr	r5, [r2, #68]	; 0x44
   37a3c:	e59f2040 	ldr	r2, [pc, #64]	; 37a84 <McManager::service()+0xcc>
   37a40:	e12fff35 	blx	r5
   37a44:	e2503000 	subs	r3, r0, #0
   37a48:	1a000004 	bne	37a60 <McManager::service()+0xa8>
   37a4c:	ebffd937 	bl	2df30 <millis>
   37a50:	e5840784 	str	r0, [r4, #1924]	; 0x784
   37a54:	e28ddd4e 	add	sp, sp, #4992	; 0x1380
   37a58:	e28dd018 	add	sp, sp, #24
   37a5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   37a60:	e5960004 	ldr	r0, [r6, #4]
   37a64:	e58d3004 	str	r3, [sp, #4]
   37a68:	e59d300c 	ldr	r3, [sp, #12]
   37a6c:	e59f2014 	ldr	r2, [pc, #20]	; 37a88 <McManager::service()+0xd0>
   37a70:	e58d3000 	str	r3, [sp]
   37a74:	e59f1010 	ldr	r1, [pc, #16]	; 37a8c <McManager::service()+0xd4>
   37a78:	e3a03000 	mov	r3, #0
   37a7c:	ebffe10e 	bl	2febc <CommandHandler::sendWithJSON(char const*, char const*, unsigned long, unsigned char const*, unsigned long)>
   37a80:	eafffff1 	b	37a4c <McManager::service()+0x94>
   37a84:	00001388 	.word	0x00001388
   37a88:	00047764 	.word	0x00047764
   37a8c:	00047088 	.word	0x00047088

00037a90 <McManager::machineHeartbeat()>:
   37a90:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37a94:	e5900760 	ldr	r0, [r0, #1888]	; 0x760
   37a98:	e3500000 	cmp	r0, #0
   37a9c:	012fff1e 	bxeq	lr
   37aa0:	e5903000 	ldr	r3, [r0]
   37aa4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   37aa8:	e12fff13 	bx	r3

00037aac <McManager::getDisplayRefreshRate()>:
   37aac:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37ab0:	e5900770 	ldr	r0, [r0, #1904]	; 0x770
   37ab4:	e12fff1e 	bx	lr

00037ab8 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)>:
   37ab8:	e92d4070 	push	{r4, r5, r6, lr}
   37abc:	e2805a02 	add	r5, r0, #8192	; 0x2000
   37ac0:	e5953730 	ldr	r3, [r5, #1840]	; 0x730
   37ac4:	e59fc03c 	ldr	ip, [pc, #60]	; 37b08 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x50>
   37ac8:	e083e002 	add	lr, r3, r2
   37acc:	e15e000c 	cmp	lr, ip
   37ad0:	8a000007 	bhi	37af4 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x3c>
   37ad4:	e1a04002 	mov	r4, r2
   37ad8:	e280001c 	add	r0, r0, #28
   37adc:	e0800003 	add	r0, r0, r3
   37ae0:	ebffcb8a 	bl	2a910 <memcpy>
   37ae4:	e5952730 	ldr	r2, [r5, #1840]	; 0x730
   37ae8:	e0822004 	add	r2, r2, r4
   37aec:	e5852730 	str	r2, [r5, #1840]	; 0x730
   37af0:	e8bd8070 	pop	{r4, r5, r6, pc}
   37af4:	e3a03000 	mov	r3, #0
   37af8:	e152000c 	cmp	r2, ip
   37afc:	e5853730 	str	r3, [r5, #1840]	; 0x730
   37b00:	88bd8070 	pophi	{r4, r5, r6, pc}
   37b04:	eafffff2 	b	37ad4 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)+0x1c>
   37b08:	0000270f 	.word	0x0000270f

00037b0c <McManager::hostSerialNumChAvailable()>:
   37b0c:	e2800a02 	add	r0, r0, #8192	; 0x2000
   37b10:	e5900730 	ldr	r0, [r0, #1840]	; 0x730
   37b14:	e12fff1e 	bx	lr

00037b18 <McManager::hostSerialReadChars(unsigned char*, unsigned long)>:
   37b18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   37b1c:	e2806a02 	add	r6, r0, #8192	; 0x2000
   37b20:	e5964730 	ldr	r4, [r6, #1840]	; 0x730
   37b24:	e1520004 	cmp	r2, r4
   37b28:	31a04002 	movcc	r4, r2
   37b2c:	e3540000 	cmp	r4, #0
   37b30:	13510000 	cmpne	r1, #0
   37b34:	03a07001 	moveq	r7, #1
   37b38:	13a07000 	movne	r7, #0
   37b3c:	03a04000 	moveq	r4, #0
   37b40:	1a000001 	bne	37b4c <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x34>
   37b44:	e1a00004 	mov	r0, r4
   37b48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   37b4c:	e280501c 	add	r5, r0, #28
   37b50:	e1a02004 	mov	r2, r4
   37b54:	e1a00001 	mov	r0, r1
   37b58:	e1a01005 	mov	r1, r5
   37b5c:	ebffcb6b 	bl	2a910 <memcpy>
   37b60:	e5962730 	ldr	r2, [r6, #1840]	; 0x730
   37b64:	e1520004 	cmp	r2, r4
   37b68:	25867730 	strcs	r7, [r6, #1840]	; 0x730
   37b6c:	2afffff4 	bcs	37b44 <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x2c>
   37b70:	e0422004 	sub	r2, r2, r4
   37b74:	e0851004 	add	r1, r5, r4
   37b78:	e1a00005 	mov	r0, r5
   37b7c:	ebffc919 	bl	29fe8 <memmove>
   37b80:	e5963730 	ldr	r3, [r6, #1840]	; 0x730
   37b84:	e0433004 	sub	r3, r3, r4
   37b88:	e5863730 	str	r3, [r6, #1840]	; 0x730
   37b8c:	eaffffec 	b	37b44 <McManager::hostSerialReadChars(unsigned char*, unsigned long)+0x2c>

00037b90 <McManager::sendKeyStrToTargetStatic(char const*)>:
   37b90:	e5900004 	ldr	r0, [r0, #4]
   37b94:	eaffe0b9 	b	2fe80 <CommandHandler::sendKeyStrToTargetStatic(char const*)>

00037b98 <McManager::targetProgrammingStart(bool)>:
   37b98:	e92d4070 	push	{r4, r5, r6, lr}
   37b9c:	e1a04000 	mov	r4, r0
   37ba0:	e5900010 	ldr	r0, [r0, #16]
   37ba4:	e1a05001 	mov	r5, r1
   37ba8:	ebfff2a2 	bl	34638 <TargetProgrammer::numMemoryBlocks()>
   37bac:	e3500000 	cmp	r0, #0
   37bb0:	0a000013 	beq	37c04 <McManager::targetProgrammingStart(bool)+0x6c>
   37bb4:	e594000c 	ldr	r0, [r4, #12]
   37bb8:	ebffe947 	bl	320dc <BusAccess::service()>
   37bbc:	e594000c 	ldr	r0, [r4, #12]
   37bc0:	ebffe945 	bl	320dc <BusAccess::service()>
   37bc4:	e594000c 	ldr	r0, [r4, #12]
   37bc8:	ebffe943 	bl	320dc <BusAccess::service()>
   37bcc:	ebffbbfe 	bl	26bcc <CLogger::Get()>
   37bd0:	e59f3044 	ldr	r3, [pc, #68]	; 37c1c <McManager::targetProgrammingStart(bool)+0x84>
   37bd4:	e3a02004 	mov	r2, #4
   37bd8:	e59f1040 	ldr	r1, [pc, #64]	; 37c20 <McManager::targetProgrammingStart(bool)+0x88>
   37bdc:	ebffbb37 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37be0:	e5941014 	ldr	r1, [r4, #20]
   37be4:	e594000c 	ldr	r0, [r4, #12]
   37be8:	e3a02002 	mov	r2, #2
   37bec:	ebffe686 	bl	3160c <BusAccess::targetReqBus(int, BR_BUS_ACTION_REASON)>
   37bf0:	e3a03001 	mov	r3, #1
   37bf4:	e2844a02 	add	r4, r4, #8192	; 0x2000
   37bf8:	e5c45765 	strb	r5, [r4, #1893]	; 0x765
   37bfc:	e5c43764 	strb	r3, [r4, #1892]	; 0x764
   37c00:	e8bd8070 	pop	{r4, r5, r6, pc}
   37c04:	ebffbbf0 	bl	26bcc <CLogger::Get()>
   37c08:	e8bd4070 	pop	{r4, r5, r6, lr}
   37c0c:	e59f3010 	ldr	r3, [pc, #16]	; 37c24 <McManager::targetProgrammingStart(bool)+0x8c>
   37c10:	e3a02004 	mov	r2, #4
   37c14:	e59f1004 	ldr	r1, [pc, #4]	; 37c20 <McManager::targetProgrammingStart(bool)+0x88>
   37c18:	eaffbb28 	b	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37c1c:	000470bc 	.word	0x000470bc
   37c20:	00046fb4 	.word	0x00046fb4
   37c24:	00047098 	.word	0x00047098

00037c28 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   37c28:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   37c2c:	e24dd0e0 	sub	sp, sp, #224	; 0xe0
   37c30:	e1a05000 	mov	r5, r0
   37c34:	e1a08002 	mov	r8, r2
   37c38:	e1a06003 	mov	r6, r3
   37c3c:	e28d2014 	add	r2, sp, #20
   37c40:	e3a030c8 	mov	r3, #200	; 0xc8
   37c44:	e59f02a8 	ldr	r0, [pc, #680]	; 37ef4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2cc>
   37c48:	e1a07001 	mov	r7, r1
   37c4c:	ebffd9a7 	bl	2e2f0 <jsonGetValueForKey>
   37c50:	e2504000 	subs	r4, r0, #0
   37c54:	1a000003 	bne	37c68 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x40>
   37c58:	e3a04000 	mov	r4, #0
   37c5c:	e1a00004 	mov	r0, r4
   37c60:	e28dd0e0 	add	sp, sp, #224	; 0xe0
   37c64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   37c68:	e3a03000 	mov	r3, #0
   37c6c:	e59d20f8 	ldr	r2, [sp, #248]	; 0xf8
   37c70:	e59f1280 	ldr	r1, [pc, #640]	; 37ef8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d0>
   37c74:	e5c23000 	strb	r3, [r2]
   37c78:	e28d0014 	add	r0, sp, #20
   37c7c:	ebffc923 	bl	2a110 <strcasecmp>
   37c80:	e3500000 	cmp	r0, #0
   37c84:	0a000016 	beq	37ce4 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xbc>
   37c88:	e59f126c 	ldr	r1, [pc, #620]	; 37efc <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d4>
   37c8c:	e28d0014 	add	r0, sp, #20
   37c90:	ebffc91e 	bl	2a110 <strcasecmp>
   37c94:	e2501000 	subs	r1, r0, #0
   37c98:	0a00000f 	beq	37cdc <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xb4>
   37c9c:	e59f125c 	ldr	r1, [pc, #604]	; 37f00 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2d8>
   37ca0:	e28d0014 	add	r0, sp, #20
   37ca4:	ebffc919 	bl	2a110 <strcasecmp>
   37ca8:	e3500000 	cmp	r0, #0
   37cac:	1a000015 	bne	37d08 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0xe0>
   37cb0:	e3a01001 	mov	r1, #1
   37cb4:	e59f3248 	ldr	r3, [pc, #584]	; 37f04 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2dc>
   37cb8:	e5930000 	ldr	r0, [r3]
   37cbc:	ebffffb5 	bl	37b98 <McManager::targetProgrammingStart(bool)>
   37cc0:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   37cc4:	e59f123c 	ldr	r1, [pc, #572]	; 37f08 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e0>
   37cc8:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   37ccc:	ebffd8d1 	bl	2e018 <strlcpy>
   37cd0:	e1a00004 	mov	r0, r4
   37cd4:	e28dd0e0 	add	sp, sp, #224	; 0xe0
   37cd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   37cdc:	e59f3220 	ldr	r3, [pc, #544]	; 37f04 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2dc>
   37ce0:	eafffff4 	b	37cb8 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x90>
   37ce4:	e5950010 	ldr	r0, [r5, #16]
   37ce8:	ebfff200 	bl	344f0 <TargetProgrammer::clear()>
   37cec:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   37cf0:	e59f1210 	ldr	r1, [pc, #528]	; 37f08 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e0>
   37cf4:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   37cf8:	ebffd8c6 	bl	2e018 <strlcpy>
   37cfc:	e1a00004 	mov	r0, r4
   37d00:	e28dd0e0 	add	sp, sp, #224	; 0xe0
   37d04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   37d08:	e59f11fc 	ldr	r1, [pc, #508]	; 37f0c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e4>
   37d0c:	e28d0014 	add	r0, sp, #20
   37d10:	ebffc8fe 	bl	2a110 <strcasecmp>
   37d14:	e3500000 	cmp	r0, #0
   37d18:	0affffe4 	beq	37cb0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x88>
   37d1c:	e59f11ec 	ldr	r1, [pc, #492]	; 37f10 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e8>
   37d20:	e28d0014 	add	r0, sp, #20
   37d24:	ebffc8f9 	bl	2a110 <strcasecmp>
   37d28:	e3500000 	cmp	r0, #0
   37d2c:	0a000017 	beq	37d90 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x168>
   37d30:	e59f11dc 	ldr	r1, [pc, #476]	; 37f14 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2ec>
   37d34:	e28d0014 	add	r0, sp, #20
   37d38:	ebffc8f4 	bl	2a110 <strcasecmp>
   37d3c:	e3500000 	cmp	r0, #0
   37d40:	1a00001d 	bne	37dbc <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x194>
   37d44:	ebffbba0 	bl	26bcc <CLogger::Get()>
   37d48:	e59f31c8 	ldr	r3, [pc, #456]	; 37f18 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f0>
   37d4c:	e88d00c0 	stm	sp, {r6, r7}
   37d50:	e3a02004 	mov	r2, #4
   37d54:	e59f11c0 	ldr	r1, [pc, #448]	; 37f1c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f4>
   37d58:	ebffbad8 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37d5c:	e59f31a0 	ldr	r3, [pc, #416]	; 37f04 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2dc>
   37d60:	e5933000 	ldr	r3, [r3]
   37d64:	e2833a02 	add	r3, r3, #8192	; 0x2000
   37d68:	e5930760 	ldr	r0, [r3, #1888]	; 0x760
   37d6c:	e3500000 	cmp	r0, #0
   37d70:	0affffd2 	beq	37cc0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x98>
   37d74:	e590c000 	ldr	ip, [r0]
   37d78:	e1a03006 	mov	r3, r6
   37d7c:	e1a02008 	mov	r2, r8
   37d80:	e1a01007 	mov	r1, r7
   37d84:	e59c5038 	ldr	r5, [ip, #56]	; 0x38
   37d88:	e12fff35 	blx	r5
   37d8c:	eaffffcb 	b	37cc0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x98>
   37d90:	e59f316c 	ldr	r3, [pc, #364]	; 37f04 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2dc>
   37d94:	e3e02000 	mvn	r2, #0
   37d98:	e5933000 	ldr	r3, [r3]
   37d9c:	e5931014 	ldr	r1, [r3, #20]
   37da0:	e593000c 	ldr	r0, [r3, #12]
   37da4:	ebffe5e9 	bl	31550 <BusAccess::targetReqReset(int, int)>
   37da8:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   37dac:	e59f1154 	ldr	r1, [pc, #340]	; 37f08 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2e0>
   37db0:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   37db4:	ebffd897 	bl	2e018 <strlcpy>
   37db8:	eaffffa7 	b	37c5c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   37dbc:	e59f115c 	ldr	r1, [pc, #348]	; 37f20 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f8>
   37dc0:	e28d0014 	add	r0, sp, #20
   37dc4:	ebffc8d1 	bl	2a110 <strcasecmp>
   37dc8:	e3500000 	cmp	r0, #0
   37dcc:	0affffdc 	beq	37d44 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x11c>
   37dd0:	e59f114c 	ldr	r1, [pc, #332]	; 37f24 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2fc>
   37dd4:	e28d0014 	add	r0, sp, #20
   37dd8:	ebffc8cc 	bl	2a110 <strcasecmp>
   37ddc:	e3500000 	cmp	r0, #0
   37de0:	1a000017 	bne	37e44 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x21c>
   37de4:	e59f313c 	ldr	r3, [pc, #316]	; 37f28 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x300>
   37de8:	e2862001 	add	r2, r6, #1
   37dec:	e59f7138 	ldr	r7, [pc, #312]	; 37f2c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x304>
   37df0:	e1520003 	cmp	r2, r3
   37df4:	21a02003 	movcs	r2, r3
   37df8:	e1a01008 	mov	r1, r8
   37dfc:	e1a00007 	mov	r0, r7
   37e00:	ebffd884 	bl	2e018 <strlcpy>
   37e04:	ebffbb70 	bl	26bcc <CLogger::Get()>
   37e08:	e59f3120 	ldr	r3, [pc, #288]	; 37f30 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x308>
   37e0c:	e3a02004 	mov	r2, #4
   37e10:	e59f1104 	ldr	r1, [pc, #260]	; 37f1c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2f4>
   37e14:	e58d7000 	str	r7, [sp]
   37e18:	ebffbaa8 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   37e1c:	e1a01007 	mov	r1, r7
   37e20:	e1a00005 	mov	r0, r5
   37e24:	ebfffdf1 	bl	375f0 <McManager::setupMachine(char const*)>
   37e28:	e3500000 	cmp	r0, #0
   37e2c:	1affffa3 	bne	37cc0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x98>
   37e30:	e59d20fc 	ldr	r2, [sp, #252]	; 0xfc
   37e34:	e59f10f8 	ldr	r1, [pc, #248]	; 37f34 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30c>
   37e38:	e59d00f8 	ldr	r0, [sp, #248]	; 0xf8
   37e3c:	ebffd875 	bl	2e018 <strlcpy>
   37e40:	eaffff85 	b	37c5c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   37e44:	e59f10ec 	ldr	r1, [pc, #236]	; 37f38 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x310>
   37e48:	e28d0014 	add	r0, sp, #20
   37e4c:	ebffc8af 	bl	2a110 <strcasecmp>
   37e50:	e3500000 	cmp	r0, #0
   37e54:	0a000021 	beq	37ee0 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x2b8>
   37e58:	e28d0014 	add	r0, sp, #20
   37e5c:	e59f10d8 	ldr	r1, [pc, #216]	; 37f3c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x314>
   37e60:	ebffc8aa 	bl	2a110 <strcasecmp>
   37e64:	e2503000 	subs	r3, r0, #0
   37e68:	1affff7a 	bne	37c58 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x30>
   37e6c:	e1a01003 	mov	r1, r3
   37e70:	e3a02006 	mov	r2, #6
   37e74:	e28d000c 	add	r0, sp, #12
   37e78:	e58d3008 	str	r3, [sp, #8]
   37e7c:	ebffc82c 	bl	29f34 <memset>
   37e80:	e28d1008 	add	r1, sp, #8
   37e84:	e3a0200a 	mov	r2, #10
   37e88:	e1a00008 	mov	r0, r8
   37e8c:	ebffc9c7 	bl	2a5b0 <strtoul>
   37e90:	e28d1008 	add	r1, sp, #8
   37e94:	e3a0200a 	mov	r2, #10
   37e98:	e59d0008 	ldr	r0, [sp, #8]
   37e9c:	ebffc9c3 	bl	2a5b0 <strtoul>
   37ea0:	e2855a02 	add	r5, r5, #8192	; 0x2000
   37ea4:	e5cd000c 	strb	r0, [sp, #12]
   37ea8:	e28d1008 	add	r1, sp, #8
   37eac:	e3a0200a 	mov	r2, #10
   37eb0:	e59d0008 	ldr	r0, [sp, #8]
   37eb4:	ebffc9bd 	bl	2a5b0 <strtoul>
   37eb8:	e5953760 	ldr	r3, [r5, #1888]	; 0x760
   37ebc:	e3530000 	cmp	r3, #0
   37ec0:	0affff65 	beq	37c5c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   37ec4:	e593c000 	ldr	ip, [r3]
   37ec8:	e6ef1070 	uxtb	r1, r0
   37ecc:	e28d200c 	add	r2, sp, #12
   37ed0:	e59c5034 	ldr	r5, [ip, #52]	; 0x34
   37ed4:	e1a00003 	mov	r0, r3
   37ed8:	e12fff35 	blx	r5
   37edc:	eaffff5e 	b	37c5c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   37ee0:	e1a02006 	mov	r2, r6
   37ee4:	e1a01008 	mov	r1, r8
   37ee8:	e1a00005 	mov	r0, r5
   37eec:	ebfffef1 	bl	37ab8 <McManager::hostSerialAddRxCharsToBuffer(unsigned char const*, unsigned long)>
   37ef0:	eaffff59 	b	37c5c <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)+0x34>
   37ef4:	0003f00c 	.word	0x0003f00c
   37ef8:	000470dc 	.word	0x000470dc
   37efc:	000470e8 	.word	0x000470e8
   37f00:	000470f8 	.word	0x000470f8
   37f04:	0004e440 	.word	0x0004e440
   37f08:	00046cf0 	.word	0x00046cf0
   37f0c:	00047108 	.word	0x00047108
   37f10:	00047150 	.word	0x00047150
   37f14:	00047118 	.word	0x00047118
   37f18:	00047168 	.word	0x00047168
   37f1c:	00046fb4 	.word	0x00046fb4
   37f20:	00047124 	.word	0x00047124
   37f24:	0004715c 	.word	0x0004715c
   37f28:	00002710 	.word	0x00002710
   37f2c:	0004e8a8 	.word	0x0004e8a8
   37f30:	00047130 	.word	0x00047130
   37f34:	00046ca4 	.word	0x00046ca4
   37f38:	00047140 	.word	0x00047140
   37f3c:	00047148 	.word	0x00047148

00037f40 <McManager::handleRxMsgStatic(void*, char const*, unsigned char const*, unsigned int, char*, unsigned int)>:
   37f40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   37f44:	e99d5000 	ldmib	sp, {ip, lr}
   37f48:	e3500000 	cmp	r0, #0
   37f4c:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   37f50:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   37f54:	eaffff33 	b	37c28 <McManager::handleRxMsg(char const*, unsigned char const*, unsigned int, char*, unsigned int)>

00037f58 <McManager::targetExec()>:
   37f58:	e5901014 	ldr	r1, [r0, #20]
   37f5c:	e3e02000 	mvn	r2, #0
   37f60:	e590000c 	ldr	r0, [r0, #12]
   37f64:	eaffe579 	b	31550 <BusAccess::targetReqReset(int, int)>

00037f68 <McManager::targetReset()>:
   37f68:	eafffffa 	b	37f58 <McManager::targetExec()>

00037f6c <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON)>:
   37f6c:	e3510004 	cmp	r1, #4
   37f70:	112fff1e 	bxne	lr
   37f74:	eafffc65 	b	37110 <McManager::busActionComplete(BR_BUS_ACTION, BR_BUS_ACTION_REASON) [clone .part.5]>

00037f78 <McBase::isMonitorIORQEnabled()>:
   37f78:	e5d000a8 	ldrb	r0, [r0, #168]	; 0xa8
   37f7c:	e12fff1e 	bx	lr

00037f80 <McBase::isMonitorMREQEnabled()>:
   37f80:	e5d000a9 	ldrb	r0, [r0, #169]	; 0xa9
   37f84:	e12fff1e 	bx	lr

00037f88 <McBase::getDisplayRefreshRatePerSec()>:
   37f88:	e5900074 	ldr	r0, [r0, #116]	; 0x74
   37f8c:	e12fff1e 	bx	lr

00037f90 <McBase::isDisplayMemoryMapped()>:
   37f90:	e5d0009c 	ldrb	r0, [r0, #156]	; 0x9c
   37f94:	e12fff1e 	bx	lr

00037f98 <McTRS80::enableMachine()>:
   37f98:	e3a03000 	mov	r3, #0
   37f9c:	e5c034e4 	strb	r3, [r0, #1252]	; 0x4e4
   37fa0:	e5c035e5 	strb	r3, [r0, #1509]	; 0x5e5
   37fa4:	e12fff1e 	bx	lr

00037fa8 <McTRS80::disableMachine()>:
   37fa8:	e12fff1e 	bx	lr

00037fac <McTRS80::busActionCompleteCallback(BR_BUS_ACTION)>:
   37fac:	e12fff1e 	bx	lr

00037fb0 <McTRS80::keyHandler(unsigned char, unsigned char const*)>:
   37fb0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   37fb4:	e24dd00c 	sub	sp, sp, #12
   37fb8:	e1a0300d 	mov	r3, sp
   37fbc:	e3a0e000 	mov	lr, #0
   37fc0:	e28d4008 	add	r4, sp, #8
   37fc4:	e4c3e001 	strb	lr, [r3], #1
   37fc8:	e1530004 	cmp	r3, r4
   37fcc:	1afffffc 	bne	37fc4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x14>
   37fd0:	e201c002 	and	ip, r1, #2
   37fd4:	e3a04000 	mov	r4, #0
   37fd8:	e2421001 	sub	r1, r2, #1
   37fdc:	e3a0e001 	mov	lr, #1
   37fe0:	e3e0507f 	mvn	r5, #127	; 0x7f
   37fe4:	e2822005 	add	r2, r2, #5
   37fe8:	ea000008 	b	38010 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x60>
   37fec:	e2433003 	sub	r3, r3, #3
   37ff0:	e28d6008 	add	r6, sp, #8
   37ff4:	e08671c3 	add	r7, r6, r3, asr #3
   37ff8:	e5576008 	ldrb	r6, [r7, #-8]
   37ffc:	e2033007 	and	r3, r3, #7
   38000:	e186331e 	orr	r3, r6, lr, lsl r3
   38004:	e5473008 	strb	r3, [r7, #-8]
   38008:	e1510002 	cmp	r1, r2
   3800c:	0a000012 	beq	3805c <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xac>
   38010:	e5f13001 	ldrb	r3, [r1, #1]!
   38014:	e2436004 	sub	r6, r3, #4
   38018:	e3560019 	cmp	r6, #25
   3801c:	9afffff2 	bls	37fec <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3c>
   38020:	e353001f 	cmp	r3, #31
   38024:	0a000032 	beq	380f4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x144>
   38028:	e3530023 	cmp	r3, #35	; 0x23
   3802c:	0a000025 	beq	380c8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x118>
   38030:	e3530024 	cmp	r3, #36	; 0x24
   38034:	0a000035 	beq	38110 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x160>
   38038:	e3530025 	cmp	r3, #37	; 0x25
   3803c:	1a000039 	bne	38128 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x178>
   38040:	e35c0000 	cmp	ip, #0
   38044:	0a000022 	beq	380d4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   38048:	e5dd3005 	ldrb	r3, [sp, #5]
   3804c:	e1510002 	cmp	r1, r2
   38050:	e3833004 	orr	r3, r3, #4
   38054:	e5cd3005 	strb	r3, [sp, #5]
   38058:	1affffec 	bne	38010 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x60>
   3805c:	e3a02000 	mov	r2, #0
   38060:	e3a0c001 	mov	ip, #1
   38064:	e1a05002 	mov	r5, r2
   38068:	e3540000 	cmp	r4, #0
   3806c:	15dd3007 	ldrbne	r3, [sp, #7]
   38070:	e2804e4e 	add	r4, r0, #1248	; 0x4e0
   38074:	13c33003 	bicne	r3, r3, #3
   38078:	15cd3007 	strbne	r3, [sp, #7]
   3807c:	e2844005 	add	r4, r4, #5
   38080:	e1a01005 	mov	r1, r5
   38084:	e3a03000 	mov	r3, #0
   38088:	e012e31c 	ands	lr, r2, ip, lsl r3
   3808c:	17dde003 	ldrbne	lr, [sp, r3]
   38090:	e2833001 	add	r3, r3, #1
   38094:	1181100e 	orrne	r1, r1, lr
   38098:	e3530008 	cmp	r3, #8
   3809c:	1afffff9 	bne	38088 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xd8>
   380a0:	e5d43000 	ldrb	r3, [r4]
   380a4:	e2822001 	add	r2, r2, #1
   380a8:	e1530001 	cmp	r3, r1
   380ac:	15c41000 	strbne	r1, [r4]
   380b0:	15c0c5e5 	strbne	ip, [r0, #1509]	; 0x5e5
   380b4:	e3520c01 	cmp	r2, #256	; 0x100
   380b8:	e2844001 	add	r4, r4, #1
   380bc:	1affffef 	bne	38080 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0xd0>
   380c0:	e28dd00c 	add	sp, sp, #12
   380c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   380c8:	e35c0000 	cmp	ip, #0
   380cc:	11a0400e 	movne	r4, lr
   380d0:	1affffcc 	bne	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   380d4:	e243301d 	sub	r3, r3, #29
   380d8:	e28d6008 	add	r6, sp, #8
   380dc:	e08661c3 	add	r6, r6, r3, asr #3
   380e0:	e5567004 	ldrb	r7, [r6, #-4]
   380e4:	e2033007 	and	r3, r3, #7
   380e8:	e187331e 	orr	r3, r7, lr, lsl r3
   380ec:	e5463004 	strb	r3, [r6, #-4]
   380f0:	eaffffc4 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   380f4:	e35c0000 	cmp	ip, #0
   380f8:	0afffff5 	beq	380d4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   380fc:	e5dd3000 	ldrb	r3, [sp]
   38100:	e1a0400e 	mov	r4, lr
   38104:	e3833001 	orr	r3, r3, #1
   38108:	e5cd3000 	strb	r3, [sp]
   3810c:	eaffffbd 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38110:	e35c0000 	cmp	ip, #0
   38114:	0affffee 	beq	380d4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   38118:	e5dd3004 	ldrb	r3, [sp, #4]
   3811c:	e3833040 	orr	r3, r3, #64	; 0x40
   38120:	e5cd3004 	strb	r3, [sp, #4]
   38124:	eaffffb7 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38128:	e3530026 	cmp	r3, #38	; 0x26
   3812c:	1a000008 	bne	38154 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1a4>
   38130:	e35c0000 	cmp	ip, #0
   38134:	0affffe6 	beq	380d4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   38138:	e5dd6005 	ldrb	r6, [sp, #5]
   3813c:	e5dd3007 	ldrb	r3, [sp, #7]
   38140:	e3866001 	orr	r6, r6, #1
   38144:	e3833001 	orr	r3, r3, #1
   38148:	e5cd6005 	strb	r6, [sp, #5]
   3814c:	e5cd3007 	strb	r3, [sp, #7]
   38150:	eaffffac 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38154:	e3530027 	cmp	r3, #39	; 0x27
   38158:	1a00000c 	bne	38190 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1e0>
   3815c:	e35c0000 	cmp	ip, #0
   38160:	0a000006 	beq	38180 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x1d0>
   38164:	e5dd6005 	ldrb	r6, [sp, #5]
   38168:	e5dd3007 	ldrb	r3, [sp, #7]
   3816c:	e3866002 	orr	r6, r6, #2
   38170:	e3833001 	orr	r3, r3, #1
   38174:	e5cd6005 	strb	r6, [sp, #5]
   38178:	e5cd3007 	strb	r3, [sp, #7]
   3817c:	eaffffa1 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38180:	e5dd3004 	ldrb	r3, [sp, #4]
   38184:	e3833001 	orr	r3, r3, #1
   38188:	e5cd3004 	strb	r3, [sp, #4]
   3818c:	eaffff9d 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38190:	e243601e 	sub	r6, r3, #30
   38194:	e3560008 	cmp	r6, #8
   38198:	9affffcd 	bls	380d4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x124>
   3819c:	e3530033 	cmp	r3, #51	; 0x33
   381a0:	0a000027 	beq	38244 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x294>
   381a4:	e3530034 	cmp	r3, #52	; 0x34
   381a8:	0a000034 	beq	38280 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2d0>
   381ac:	e3530036 	cmp	r3, #54	; 0x36
   381b0:	0a00002e 	beq	38270 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2c0>
   381b4:	e3530037 	cmp	r3, #55	; 0x37
   381b8:	0a000028 	beq	38260 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2b0>
   381bc:	e353002e 	cmp	r3, #46	; 0x2e
   381c0:	0a000037 	beq	382a4 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x2f4>
   381c4:	e353002d 	cmp	r3, #45	; 0x2d
   381c8:	0a00004a 	beq	382f8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x348>
   381cc:	e3530038 	cmp	r3, #56	; 0x38
   381d0:	0a000044 	beq	382e8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x338>
   381d4:	e3530028 	cmp	r3, #40	; 0x28
   381d8:	0a00003e 	beq	382d8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x328>
   381dc:	e353002a 	cmp	r3, #42	; 0x2a
   381e0:	0a000038 	beq	382c8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x318>
   381e4:	e3530029 	cmp	r3, #41	; 0x29
   381e8:	0a000064 	beq	38380 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3d0>
   381ec:	e3530052 	cmp	r3, #82	; 0x52
   381f0:	0a00005e 	beq	38370 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3c0>
   381f4:	e3530051 	cmp	r3, #81	; 0x51
   381f8:	0a000058 	beq	38360 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3b0>
   381fc:	e3530050 	cmp	r3, #80	; 0x50
   38200:	0a000030 	beq	382c8 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x318>
   38204:	e353004f 	cmp	r3, #79	; 0x4f
   38208:	0a000050 	beq	38350 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x3a0>
   3820c:	e353002c 	cmp	r3, #44	; 0x2c
   38210:	0a00004a 	beq	38340 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x390>
   38214:	e353003a 	cmp	r3, #58	; 0x3a
   38218:	0a000044 	beq	38330 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x380>
   3821c:	e35300e1 	cmp	r3, #225	; 0xe1
   38220:	0a00003e 	beq	38320 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x370>
   38224:	e35300e5 	cmp	r3, #229	; 0xe5
   38228:	0a000038 	beq	38310 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x360>
   3822c:	e20330fb 	and	r3, r3, #251	; 0xfb
   38230:	e35300e0 	cmp	r3, #224	; 0xe0
   38234:	05dd3007 	ldrbeq	r3, [sp, #7]
   38238:	03833010 	orreq	r3, r3, #16
   3823c:	05cd3007 	strbeq	r3, [sp, #7]
   38240:	eaffff70 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38244:	e5dd3005 	ldrb	r3, [sp, #5]
   38248:	e35c0000 	cmp	ip, #0
   3824c:	03833008 	orreq	r3, r3, #8
   38250:	13833004 	orrne	r3, r3, #4
   38254:	e1a0400e 	mov	r4, lr
   38258:	e5cd3005 	strb	r3, [sp, #5]
   3825c:	eaffff69 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38260:	e5dd3005 	ldrb	r3, [sp, #5]
   38264:	e3833040 	orr	r3, r3, #64	; 0x40
   38268:	e5cd3005 	strb	r3, [sp, #5]
   3826c:	eaffff65 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38270:	e5dd3005 	ldrb	r3, [sp, #5]
   38274:	e3833010 	orr	r3, r3, #16
   38278:	e5cd3005 	strb	r3, [sp, #5]
   3827c:	eaffff61 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38280:	e35c0000 	cmp	ip, #0
   38284:	0affff5f 	beq	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38288:	e5dd6004 	ldrb	r6, [sp, #4]
   3828c:	e5dd3007 	ldrb	r3, [sp, #7]
   38290:	e3866004 	orr	r6, r6, #4
   38294:	e3833001 	orr	r3, r3, #1
   38298:	e5cd6004 	strb	r6, [sp, #4]
   3829c:	e5cd3007 	strb	r3, [sp, #7]
   382a0:	eaffff58 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   382a4:	e5dd6005 	ldrb	r6, [sp, #5]
   382a8:	e5dd3007 	ldrb	r3, [sp, #7]
   382ac:	e35c0000 	cmp	ip, #0
   382b0:	03866020 	orreq	r6, r6, #32
   382b4:	13866008 	orrne	r6, r6, #8
   382b8:	e3833001 	orr	r3, r3, #1
   382bc:	e5cd6005 	strb	r6, [sp, #5]
   382c0:	e5cd3007 	strb	r3, [sp, #7]
   382c4:	eaffff4f 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   382c8:	e5dd3006 	ldrb	r3, [sp, #6]
   382cc:	e3833020 	orr	r3, r3, #32
   382d0:	e5cd3006 	strb	r3, [sp, #6]
   382d4:	eaffff4b 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   382d8:	e5dd3006 	ldrb	r3, [sp, #6]
   382dc:	e3833001 	orr	r3, r3, #1
   382e0:	e5cd3006 	strb	r3, [sp, #6]
   382e4:	eaffff47 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   382e8:	e5dd3005 	ldrb	r3, [sp, #5]
   382ec:	e1833005 	orr	r3, r3, r5
   382f0:	e5cd3005 	strb	r3, [sp, #5]
   382f4:	eaffff43 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   382f8:	e35c0000 	cmp	ip, #0
   382fc:	05dd3005 	ldrbeq	r3, [sp, #5]
   38300:	01a0400e 	moveq	r4, lr
   38304:	03833020 	orreq	r3, r3, #32
   38308:	05cd3005 	strbeq	r3, [sp, #5]
   3830c:	eaffff3d 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38310:	e5dd3007 	ldrb	r3, [sp, #7]
   38314:	e3833002 	orr	r3, r3, #2
   38318:	e5cd3007 	strb	r3, [sp, #7]
   3831c:	eaffff39 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38320:	e5dd3007 	ldrb	r3, [sp, #7]
   38324:	e3833001 	orr	r3, r3, #1
   38328:	e5cd3007 	strb	r3, [sp, #7]
   3832c:	eaffff35 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38330:	e5dd3006 	ldrb	r3, [sp, #6]
   38334:	e3833002 	orr	r3, r3, #2
   38338:	e5cd3006 	strb	r3, [sp, #6]
   3833c:	eaffff31 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38340:	e5dd3006 	ldrb	r3, [sp, #6]
   38344:	e1833005 	orr	r3, r3, r5
   38348:	e5cd3006 	strb	r3, [sp, #6]
   3834c:	eaffff2d 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38350:	e5dd3006 	ldrb	r3, [sp, #6]
   38354:	e3833040 	orr	r3, r3, #64	; 0x40
   38358:	e5cd3006 	strb	r3, [sp, #6]
   3835c:	eaffff29 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38360:	e5dd3006 	ldrb	r3, [sp, #6]
   38364:	e3833010 	orr	r3, r3, #16
   38368:	e5cd3006 	strb	r3, [sp, #6]
   3836c:	eaffff25 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38370:	e5dd3006 	ldrb	r3, [sp, #6]
   38374:	e3833008 	orr	r3, r3, #8
   38378:	e5cd3006 	strb	r3, [sp, #6]
   3837c:	eaffff21 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>
   38380:	e5dd3006 	ldrb	r3, [sp, #6]
   38384:	e3833004 	orr	r3, r3, #4
   38388:	e5cd3006 	strb	r3, [sp, #6]
   3838c:	eaffff1d 	b	38008 <McTRS80::keyHandler(unsigned char, unsigned char const*)+0x58>

00038390 <McTRS80::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   38390:	e2033009 	and	r3, r3, #9
   38394:	e3530009 	cmp	r3, #9
   38398:	03510013 	cmpeq	r1, #19
   3839c:	03a030ff 	moveq	r3, #255	; 0xff
   383a0:	059d2000 	ldreq	r2, [sp]
   383a4:	05823000 	streq	r3, [r2]
   383a8:	e12fff1e 	bx	lr

000383ac <McTRS80::fileHandler(char const*, unsigned char const*, int)>:
   383ac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   383b0:	e1a04001 	mov	r4, r1
   383b4:	e24dd094 	sub	sp, sp, #148	; 0x94
   383b8:	e1a08002 	mov	r8, r2
   383bc:	e1a06003 	mov	r6, r3
   383c0:	e1a05000 	mov	r5, r0
   383c4:	ebffba00 	bl	26bcc <CLogger::Get()>
   383c8:	e59f316c 	ldr	r3, [pc, #364]	; 3853c <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x190>
   383cc:	e3a02004 	mov	r2, #4
   383d0:	e59f1168 	ldr	r1, [pc, #360]	; 38540 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   383d4:	e58d4000 	str	r4, [sp]
   383d8:	ebffb938 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   383dc:	e1a01004 	mov	r1, r4
   383e0:	e28d2028 	add	r2, sp, #40	; 0x28
   383e4:	e3a03064 	mov	r3, #100	; 0x64
   383e8:	e59f0154 	ldr	r0, [pc, #340]	; 38544 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x198>
   383ec:	ebffd7bf 	bl	2e2f0 <jsonGetValueForKey>
   383f0:	e2507000 	subs	r7, r0, #0
   383f4:	0a000041 	beq	38500 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x154>
   383f8:	e59f1148 	ldr	r1, [pc, #328]	; 38548 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x19c>
   383fc:	e28d0028 	add	r0, sp, #40	; 0x28
   38400:	ebffc81a 	bl	2a470 <strstr>
   38404:	e59f3140 	ldr	r3, [pc, #320]	; 3854c <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1a0>
   38408:	e3500000 	cmp	r0, #0
   3840c:	01a00003 	moveq	r0, r3
   38410:	e59f1138 	ldr	r1, [pc, #312]	; 38550 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1a4>
   38414:	ebffc73d 	bl	2a110 <strcasecmp>
   38418:	e3500000 	cmp	r0, #0
   3841c:	0a000019 	beq	38488 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0xdc>
   38420:	e1a01004 	mov	r1, r4
   38424:	e28d2008 	add	r2, sp, #8
   38428:	e3a0301e 	mov	r3, #30
   3842c:	e59f0120 	ldr	r0, [pc, #288]	; 38554 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1a8>
   38430:	ebffd7ae 	bl	2e2f0 <jsonGetValueForKey>
   38434:	e2504000 	subs	r4, r0, #0
   38438:	01a09004 	moveq	r9, r4
   3843c:	1a000037 	bne	38520 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x174>
   38440:	ebffb9e1 	bl	26bcc <CLogger::Get()>
   38444:	e3a02004 	mov	r2, #4
   38448:	e59f10f0 	ldr	r1, [pc, #240]	; 38540 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   3844c:	e58d6004 	str	r6, [sp, #4]
   38450:	e58d9000 	str	r9, [sp]
   38454:	e59f30fc 	ldr	r3, [pc, #252]	; 38558 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1ac>
   38458:	ebffb918 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3845c:	e5953000 	ldr	r3, [r5]
   38460:	e1a00005 	mov	r0, r5
   38464:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   38468:	e12fff33 	blx	r3
   3846c:	e1a03006 	mov	r3, r6
   38470:	e1a02008 	mov	r2, r8
   38474:	e1a01004 	mov	r1, r4
   38478:	ebfff02e 	bl	34538 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   3847c:	e1a00007 	mov	r0, r7
   38480:	e28dd094 	add	sp, sp, #148	; 0x94
   38484:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   38488:	e28d0008 	add	r0, sp, #8
   3848c:	eb000efe 	bl	3c08c <McTRS80CmdFormat::McTRS80CmdFormat()>
   38490:	ebffb9cd 	bl	26bcc <CLogger::Get()>
   38494:	e3a02004 	mov	r2, #4
   38498:	e59f10a0 	ldr	r1, [pc, #160]	; 38540 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   3849c:	e58d6000 	str	r6, [sp]
   384a0:	e59f30b4 	ldr	r3, [pc, #180]	; 3855c <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1b0>
   384a4:	ebffb905 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   384a8:	e5953000 	ldr	r3, [r5]
   384ac:	e1a00005 	mov	r0, r5
   384b0:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   384b4:	e12fff33 	blx	r3
   384b8:	e5953000 	ldr	r3, [r5]
   384bc:	e1a00005 	mov	r0, r5
   384c0:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   384c4:	e12fff33 	blx	r3
   384c8:	e5953000 	ldr	r3, [r5]
   384cc:	e1a00005 	mov	r0, r5
   384d0:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   384d4:	e12fff33 	blx	r3
   384d8:	e58d6004 	str	r6, [sp, #4]
   384dc:	e1a03000 	mov	r3, r0
   384e0:	e58d8000 	str	r8, [sp]
   384e4:	e28d0008 	add	r0, sp, #8
   384e8:	e59f2070 	ldr	r2, [pc, #112]	; 38560 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1b4>
   384ec:	e59f1070 	ldr	r1, [pc, #112]	; 38564 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1b8>
   384f0:	eb000ee6 	bl	3c090 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>
   384f4:	e1a00007 	mov	r0, r7
   384f8:	e28dd094 	add	sp, sp, #148	; 0x94
   384fc:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   38500:	ebffb9b1 	bl	26bcc <CLogger::Get()>
   38504:	e59f305c 	ldr	r3, [pc, #92]	; 38568 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x1bc>
   38508:	e3a02004 	mov	r2, #4
   3850c:	e59f102c 	ldr	r1, [pc, #44]	; 38540 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x194>
   38510:	ebffb8ea 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   38514:	e1a00007 	mov	r0, r7
   38518:	e28dd094 	add	sp, sp, #148	; 0x94
   3851c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   38520:	e28d0008 	add	r0, sp, #8
   38524:	e3a02010 	mov	r2, #16
   38528:	e3a01000 	mov	r1, #0
   3852c:	ebffc81f 	bl	2a5b0 <strtoul>
   38530:	e6ff9070 	uxth	r9, r0
   38534:	e1a04009 	mov	r4, r9
   38538:	eaffffc0 	b	38440 <McTRS80::fileHandler(char const*, unsigned char const*, int)+0x94>
   3853c:	00047200 	.word	0x00047200
   38540:	00047210 	.word	0x00047210
   38544:	000463b4 	.word	0x000463b4
   38548:	0003ed38 	.word	0x0003ed38
   3854c:	00047764 	.word	0x00047764
   38550:	00047234 	.word	0x00047234
   38554:	00047260 	.word	0x00047260
   38558:	0004726c 	.word	0x0004726c
   3855c:	0004723c 	.word	0x0004723c
   38560:	000346b4 	.word	0x000346b4
   38564:	0003461c 	.word	0x0003461c
   38568:	00047218 	.word	0x00047218

0003856c <McTRS80::McTRS80(McManager&, BusAccess&)>:
   3856c:	e3a03001 	mov	r3, #1
   38570:	e92d4010 	push	{r4, lr}
   38574:	e1a04000 	mov	r4, r0
   38578:	e24dd008 	sub	sp, sp, #8
   3857c:	e58d3000 	str	r3, [sp]
   38580:	e59f3040 	ldr	r3, [pc, #64]	; 385c8 <McTRS80::McTRS80(McManager&, BusAccess&)+0x5c>
   38584:	eb000542 	bl	39a94 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)>
   38588:	e1a03004 	mov	r3, r4
   3858c:	e3a01000 	mov	r1, #0
   38590:	e59f0034 	ldr	r0, [pc, #52]	; 385cc <McTRS80::McTRS80(McManager&, BusAccess&)+0x60>
   38594:	e2842e5e 	add	r2, r4, #1504	; 0x5e0
   38598:	e48304e0 	str	r0, [r3], #1248	; 0x4e0
   3859c:	e2833004 	add	r3, r3, #4
   385a0:	e2822004 	add	r2, r2, #4
   385a4:	e5e31001 	strb	r1, [r3, #1]!
   385a8:	e1530002 	cmp	r3, r2
   385ac:	1afffffc 	bne	385a4 <McTRS80::McTRS80(McManager&, BusAccess&)+0x38>
   385b0:	e3a03001 	mov	r3, #1
   385b4:	e1a00004 	mov	r0, r4
   385b8:	e5c414e4 	strb	r1, [r4, #1252]	; 0x4e4
   385bc:	e5c435e5 	strb	r3, [r4, #1509]	; 0x5e5
   385c0:	e28dd008 	add	sp, sp, #8
   385c4:	e8bd8010 	pop	{r4, pc}
   385c8:	00048298 	.word	0x00048298
   385cc:	00047190 	.word	0x00047190

000385d0 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)>:
   385d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   385d4:	e5903000 	ldr	r3, [r0]
   385d8:	e59fc18c 	ldr	ip, [pc, #396]	; 3876c <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x19c>
   385dc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
   385e0:	e24dd014 	sub	sp, sp, #20
   385e4:	e153000c 	cmp	r3, ip
   385e8:	e1a09000 	mov	r9, r0
   385ec:	e1a05001 	mov	r5, r1
   385f0:	1a000058 	bne	38758 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x188>
   385f4:	e590a0e0 	ldr	sl, [r0, #224]	; 0xe0
   385f8:	e3520b01 	cmp	r2, #1024	; 0x400
   385fc:	23a02000 	movcs	r2, #0
   38600:	33a02001 	movcc	r2, #1
   38604:	e35a0000 	cmp	sl, #0
   38608:	11a04002 	movne	r4, r2
   3860c:	03824001 	orreq	r4, r2, #1
   38610:	e3540000 	cmp	r4, #0
   38614:	0a000001 	beq	38620 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x50>
   38618:	e28dd014 	add	sp, sp, #20
   3861c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38620:	e5993000 	ldr	r3, [r9]
   38624:	e1a00009 	mov	r0, r9
   38628:	e5933014 	ldr	r3, [r3, #20]
   3862c:	e12fff33 	blx	r3
   38630:	e5993000 	ldr	r3, [r9]
   38634:	e590606c 	ldr	r6, [r0, #108]	; 0x6c
   38638:	e5933014 	ldr	r3, [r3, #20]
   3863c:	e1a00009 	mov	r0, r9
   38640:	e12fff33 	blx	r3
   38644:	e5901074 	ldr	r1, [r0, #116]	; 0x74
   38648:	e1a00006 	mov	r0, r6
   3864c:	eb0015d3 	bl	3dda0 <__aeabi_idiv>
   38650:	e5993000 	ldr	r3, [r9]
   38654:	e1a08000 	mov	r8, r0
   38658:	e5933014 	ldr	r3, [r3, #20]
   3865c:	e1a00009 	mov	r0, r9
   38660:	e12fff33 	blx	r3
   38664:	e5993000 	ldr	r3, [r9]
   38668:	e5906070 	ldr	r6, [r0, #112]	; 0x70
   3866c:	e5933014 	ldr	r3, [r3, #20]
   38670:	e1a00009 	mov	r0, r9
   38674:	e12fff33 	blx	r3
   38678:	e5901078 	ldr	r1, [r0, #120]	; 0x78
   3867c:	e1a00006 	mov	r0, r6
   38680:	eb0015c6 	bl	3dda0 <__aeabi_idiv>
   38684:	e2503000 	subs	r3, r0, #0
   38688:	e58d300c 	str	r3, [sp, #12]
   3868c:	da00002d 	ble	38748 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x178>
   38690:	e28930e4 	add	r3, r9, #228	; 0xe4
   38694:	e59fb0d4 	ldr	fp, [pc, #212]	; 38770 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x1a0>
   38698:	e58d5008 	str	r5, [sp, #8]
   3869c:	e58d4000 	str	r4, [sp]
   386a0:	e58d3004 	str	r3, [sp, #4]
   386a4:	e3580000 	cmp	r8, #0
   386a8:	da00001a 	ble	38718 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x148>
   386ac:	e99d0050 	ldmib	sp, {r4, r6}
   386b0:	e3a05000 	mov	r5, #0
   386b4:	ea000005 	b	386d0 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x100>
   386b8:	e5c43000 	strb	r3, [r4]
   386bc:	e2855001 	add	r5, r5, #1
   386c0:	e1580005 	cmp	r8, r5
   386c4:	e2844001 	add	r4, r4, #1
   386c8:	e2866001 	add	r6, r6, #1
   386cc:	0a000011 	beq	38718 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x148>
   386d0:	e5d934e4 	ldrb	r3, [r9, #1252]	; 0x4e4
   386d4:	e3530000 	cmp	r3, #0
   386d8:	e5d63000 	ldrb	r3, [r6]
   386dc:	0a000002 	beq	386ec <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x11c>
   386e0:	e5d42000 	ldrb	r2, [r4]
   386e4:	e1520003 	cmp	r2, r3
   386e8:	0afffff3 	beq	386bc <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xec>
   386ec:	e59a2000 	ldr	r2, [sl]
   386f0:	e5927024 	ldr	r7, [r2, #36]	; 0x24
   386f4:	e157000b 	cmp	r7, fp
   386f8:	0affffee 	beq	386b8 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xe8>
   386fc:	e6af3073 	sxtb	r3, r3
   38700:	e59d2000 	ldr	r2, [sp]
   38704:	e1a01005 	mov	r1, r5
   38708:	e1a0000a 	mov	r0, sl
   3870c:	e12fff37 	blx	r7
   38710:	e5d63000 	ldrb	r3, [r6]
   38714:	eaffffe7 	b	386b8 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xe8>
   38718:	e59d3000 	ldr	r3, [sp]
   3871c:	e59d200c 	ldr	r2, [sp, #12]
   38720:	e2833001 	add	r3, r3, #1
   38724:	e58d3000 	str	r3, [sp]
   38728:	e1520003 	cmp	r2, r3
   3872c:	e59d3004 	ldr	r3, [sp, #4]
   38730:	e0833008 	add	r3, r3, r8
   38734:	e58d3004 	str	r3, [sp, #4]
   38738:	e59d3008 	ldr	r3, [sp, #8]
   3873c:	e0833008 	add	r3, r3, r8
   38740:	e58d3008 	str	r3, [sp, #8]
   38744:	1affffd6 	bne	386a4 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0xd4>
   38748:	e3a03001 	mov	r3, #1
   3874c:	e5c934e4 	strb	r3, [r9, #1252]	; 0x4e4
   38750:	e28dd014 	add	sp, sp, #20
   38754:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38758:	e58d2000 	str	r2, [sp]
   3875c:	e12fff33 	blx	r3
   38760:	e59d2000 	ldr	r2, [sp]
   38764:	e1a0a000 	mov	sl, r0
   38768:	eaffffa2 	b	385f8 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)+0x28>
   3876c:	0003888c 	.word	0x0003888c
   38770:	00038864 	.word	0x00038864

00038774 <McTRS80::refreshDisplay()>:
   38774:	e92d4030 	push	{r4, r5, lr}
   38778:	e3a05000 	mov	r5, #0
   3877c:	e3e0c03c 	mvn	ip, #60	; 0x3c
   38780:	e1a04000 	mov	r4, r0
   38784:	e24dde41 	sub	sp, sp, #1040	; 0x410
   38788:	e24dd004 	sub	sp, sp, #4
   3878c:	e3a03003 	mov	r3, #3
   38790:	e5900008 	ldr	r0, [r0, #8]
   38794:	e1a01005 	mov	r1, r5
   38798:	e28d200c 	add	r2, sp, #12
   3879c:	e58d5000 	str	r5, [sp]
   387a0:	e5cdc00c 	strb	ip, [sp, #12]
   387a4:	e5cd500d 	strb	r5, [sp, #13]
   387a8:	e5cd500e 	strb	r5, [sp, #14]
   387ac:	ebffebed 	bl	33768 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   387b0:	e28410e4 	add	r1, r4, #228	; 0xe4
   387b4:	e3a02b01 	mov	r2, #1024	; 0x400
   387b8:	e28d0010 	add	r0, sp, #16
   387bc:	ebffc853 	bl	2a910 <memcpy>
   387c0:	e5940008 	ldr	r0, [r4, #8]
   387c4:	e28d2010 	add	r2, sp, #16
   387c8:	e58d5000 	str	r5, [sp]
   387cc:	e3a03b01 	mov	r3, #1024	; 0x400
   387d0:	e3a01b0f 	mov	r1, #15360	; 0x3c00
   387d4:	ebffec34 	bl	338ac <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   387d8:	e1500005 	cmp	r0, r5
   387dc:	0a000005 	beq	387f8 <McTRS80::refreshDisplay()+0x84>
   387e0:	e5d435e5 	ldrb	r3, [r4, #1509]	; 0x5e5
   387e4:	e3530000 	cmp	r3, #0
   387e8:	1a000009 	bne	38814 <McTRS80::refreshDisplay()+0xa0>
   387ec:	e28dde41 	add	sp, sp, #1040	; 0x410
   387f0:	e28dd004 	add	sp, sp, #4
   387f4:	e8bd8030 	pop	{r4, r5, pc}
   387f8:	e28d1010 	add	r1, sp, #16
   387fc:	e3a02b01 	mov	r2, #1024	; 0x400
   38800:	e1a00004 	mov	r0, r4
   38804:	ebffff71 	bl	385d0 <McTRS80::updateDisplayFromBuffer(unsigned char*, unsigned long)>
   38808:	e5d435e5 	ldrb	r3, [r4, #1509]	; 0x5e5
   3880c:	e3530000 	cmp	r3, #0
   38810:	0afffff5 	beq	387ec <McTRS80::refreshDisplay()+0x78>
   38814:	e5943000 	ldr	r3, [r4]
   38818:	e1a00004 	mov	r0, r4
   3881c:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   38820:	e12fff33 	blx	r3
   38824:	e5d0303c 	ldrb	r3, [r0, #60]	; 0x3c
   38828:	e3530000 	cmp	r3, #0
   3882c:	0affffee 	beq	387ec <McTRS80::refreshDisplay()+0x78>
   38830:	e3a05000 	mov	r5, #0
   38834:	e2842e4e 	add	r2, r4, #1248	; 0x4e0
   38838:	e5940008 	ldr	r0, [r4, #8]
   3883c:	e2822005 	add	r2, r2, #5
   38840:	e58d5000 	str	r5, [sp]
   38844:	e3a03c01 	mov	r3, #256	; 0x100
   38848:	e3a01b0e 	mov	r1, #14336	; 0x3800
   3884c:	ebffebc5 	bl	33768 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   38850:	e5c455e5 	strb	r5, [r4, #1509]	; 0x5e5
   38854:	e28dde41 	add	sp, sp, #1040	; 0x410
   38858:	e28dd004 	add	sp, sp, #4
   3885c:	e8bd8030 	pop	{r4, r5, pc}

00038860 <McTRS80::handleWD1771DiskController(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   38860:	e12fff1e 	bx	lr

00038864 <DisplayBase::write(int, int, int)>:
   38864:	e12fff1e 	bx	lr

00038868 <McBase::service()>:
   38868:	e12fff1e 	bx	lr

0003886c <McBase::getMirrorChanges(unsigned char*, unsigned long, bool)>:
   3886c:	e3a00000 	mov	r0, #0
   38870:	e12fff1e 	bx	lr

00038874 <McBase::setMonitorIORQEnabled(bool)>:
   38874:	e5c010a8 	strb	r1, [r0, #168]	; 0xa8
   38878:	e12fff1e 	bx	lr

0003887c <McBase::setMonitorMREQEnabled(bool)>:
   3887c:	e5c010a9 	strb	r1, [r0, #169]	; 0xa9
   38880:	e12fff1e 	bx	lr

00038884 <McBase::getSetRegistersCodeAddr()>:
   38884:	e59000ac 	ldr	r0, [r0, #172]	; 0xac
   38888:	e12fff1e 	bx	lr

0003888c <McBase::getDisplay()>:
   3888c:	e59000e0 	ldr	r0, [r0, #224]	; 0xe0
   38890:	e12fff1e 	bx	lr

00038894 <McTerminal::enableMachine()>:
   38894:	e12fff1e 	bx	lr

00038898 <McTerminal::busActionCompleteCallback(BR_BUS_ACTION)>:
   38898:	e3510001 	cmp	r1, #1
   3889c:	03a03000 	moveq	r3, #0
   388a0:	02800a61 	addeq	r0, r0, #397312	; 0x61000
   388a4:	05c01b85 	strbeq	r1, [r0, #2949]	; 0xb85
   388a8:	05c03b86 	strbeq	r3, [r0, #2950]	; 0xb86
   388ac:	e12fff1e 	bx	lr

000388b0 <McTerminal::fileHandler(char const*, unsigned char const*, int)>:
   388b0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   388b4:	e24dd094 	sub	sp, sp, #148	; 0x94
   388b8:	e1a06000 	mov	r6, r0
   388bc:	e1a08002 	mov	r8, r2
   388c0:	e1a05003 	mov	r5, r3
   388c4:	e28d2028 	add	r2, sp, #40	; 0x28
   388c8:	e3a03064 	mov	r3, #100	; 0x64
   388cc:	e59f00a8 	ldr	r0, [pc, #168]	; 3897c <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xcc>
   388d0:	e1a07001 	mov	r7, r1
   388d4:	ebffd685 	bl	2e2f0 <jsonGetValueForKey>
   388d8:	e2504000 	subs	r4, r0, #0
   388dc:	1a000002 	bne	388ec <McTerminal::fileHandler(char const*, unsigned char const*, int)+0x3c>
   388e0:	e1a00004 	mov	r0, r4
   388e4:	e28dd094 	add	sp, sp, #148	; 0x94
   388e8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   388ec:	e59f108c 	ldr	r1, [pc, #140]	; 38980 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xd0>
   388f0:	e28d0028 	add	r0, sp, #40	; 0x28
   388f4:	ebffc6dd 	bl	2a470 <strstr>
   388f8:	e1a01007 	mov	r1, r7
   388fc:	e28d2008 	add	r2, sp, #8
   38900:	e3a0301e 	mov	r3, #30
   38904:	e59f0078 	ldr	r0, [pc, #120]	; 38984 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xd4>
   38908:	ebffd678 	bl	2e2f0 <jsonGetValueForKey>
   3890c:	e2507000 	subs	r7, r0, #0
   38910:	01a09007 	moveq	r9, r7
   38914:	1a000011 	bne	38960 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xb0>
   38918:	ebffb8ab 	bl	26bcc <CLogger::Get()>
   3891c:	e3a02004 	mov	r2, #4
   38920:	e59f1060 	ldr	r1, [pc, #96]	; 38988 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xd8>
   38924:	e58d5004 	str	r5, [sp, #4]
   38928:	e58d9000 	str	r9, [sp]
   3892c:	e59f3058 	ldr	r3, [pc, #88]	; 3898c <McTerminal::fileHandler(char const*, unsigned char const*, int)+0xdc>
   38930:	ebffb7e2 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   38934:	e5963000 	ldr	r3, [r6]
   38938:	e1a00006 	mov	r0, r6
   3893c:	e5933068 	ldr	r3, [r3, #104]	; 0x68
   38940:	e12fff33 	blx	r3
   38944:	e1a03005 	mov	r3, r5
   38948:	e1a02008 	mov	r2, r8
   3894c:	e1a01007 	mov	r1, r7
   38950:	ebffeef8 	bl	34538 <TargetProgrammer::addMemoryBlock(unsigned long, unsigned char const*, unsigned long)>
   38954:	e1a00004 	mov	r0, r4
   38958:	e28dd094 	add	sp, sp, #148	; 0x94
   3895c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   38960:	e28d0008 	add	r0, sp, #8
   38964:	e3a02010 	mov	r2, #16
   38968:	e3a01000 	mov	r1, #0
   3896c:	ebffc70f 	bl	2a5b0 <strtoul>
   38970:	e6ff9070 	uxth	r9, r0
   38974:	e1a07009 	mov	r7, r9
   38978:	eaffffe6 	b	38918 <McTerminal::fileHandler(char const*, unsigned char const*, int)+0x68>
   3897c:	000463b4 	.word	0x000463b4
   38980:	0003ed38 	.word	0x0003ed38
   38984:	00047260 	.word	0x00047260
   38988:	00047314 	.word	0x00047314
   3898c:	0004726c 	.word	0x0004726c

00038990 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)>:
   38990:	e92d4010 	push	{r4, lr}
   38994:	e2804a61 	add	r4, r0, #397312	; 0x61000
   38998:	e5d4cb84 	ldrb	ip, [r4, #2948]	; 0xb84
   3899c:	e59de008 	ldr	lr, [sp, #8]
   389a0:	e35c0000 	cmp	ip, #0
   389a4:	08bd8010 	popeq	{r4, pc}
   389a8:	e203c018 	and	ip, r3, #24
   389ac:	e35c0008 	cmp	ip, #8
   389b0:	18bd8010 	popne	{r4, pc}
   389b4:	e201c0c0 	and	ip, r1, #192	; 0xc0
   389b8:	e35c0080 	cmp	ip, #128	; 0x80
   389bc:	18bd8010 	popne	{r4, pc}
   389c0:	e3130001 	tst	r3, #1
   389c4:	1a00000d 	bne	38a00 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x70>
   389c8:	e3130002 	tst	r3, #2
   389cc:	08bd8010 	popeq	{r4, pc}
   389d0:	e2113001 	ands	r3, r1, #1
   389d4:	1a000037 	bne	38ab8 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x128>
   389d8:	e1a013a2 	lsr	r1, r2, #7
   389dc:	e2022003 	and	r2, r2, #3
   389e0:	e2011001 	and	r1, r1, #1
   389e4:	e3520003 	cmp	r2, #3
   389e8:	e5c41b87 	strb	r1, [r4, #2951]	; 0xb87
   389ec:	0a00003c 	beq	38ae4 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x154>
   389f0:	e5d42b86 	ldrb	r2, [r4, #2950]	; 0xb86
   389f4:	e3520000 	cmp	r2, #0
   389f8:	15c43b86 	strbne	r3, [r4, #2950]	; 0xb86
   389fc:	e8bd8010 	pop	{r4, pc}
   38a00:	e3110001 	tst	r1, #1
   38a04:	1a00000c 	bne	38a3c <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0xac>
   38a08:	e5943b8c 	ldr	r3, [r4, #2956]	; 0xb8c
   38a0c:	e5941b90 	ldr	r1, [r4, #2960]	; 0xb90
   38a10:	e5d42b85 	ldrb	r2, [r4, #2949]	; 0xb85
   38a14:	e1530001 	cmp	r3, r1
   38a18:	13a03003 	movne	r3, #3
   38a1c:	03a03002 	moveq	r3, #2
   38a20:	e3520000 	cmp	r2, #0
   38a24:	e58e3000 	str	r3, [lr]
   38a28:	1a00002a 	bne	38ad8 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x148>
   38a2c:	e5d43b86 	ldrb	r3, [r4, #2950]	; 0xb86
   38a30:	e3530000 	cmp	r3, #0
   38a34:	158e2000 	strne	r2, [lr]
   38a38:	e8bd8010 	pop	{r4, pc}
   38a3c:	e3a01000 	mov	r1, #0
   38a40:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   38a44:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   38a48:	e58e1000 	str	r1, [lr]
   38a4c:	e1520003 	cmp	r2, r3
   38a50:	0a000015 	beq	38aac <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x11c>
   38a54:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   38a58:	e59fc094 	ldr	ip, [pc, #148]	; 38af4 <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x164>
   38a5c:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   38a60:	e0802002 	add	r2, r0, r2
   38a64:	e7d2200c 	ldrb	r2, [r2, ip]
   38a68:	e2833001 	add	r3, r3, #1
   38a6c:	e58e2000 	str	r2, [lr]
   38a70:	e5843b90 	str	r3, [r4, #2960]	; 0xb90
   38a74:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   38a78:	e5943b94 	ldr	r3, [r4, #2964]	; 0xb94
   38a7c:	e1520003 	cmp	r2, r3
   38a80:	e5d43b87 	ldrb	r3, [r4, #2951]	; 0xb87
   38a84:	25841b90 	strcs	r1, [r4, #2960]	; 0xb90
   38a88:	e3530000 	cmp	r3, #0
   38a8c:	0a000006 	beq	38aac <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x11c>
   38a90:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   38a94:	e5943b90 	ldr	r3, [r4, #2960]	; 0xb90
   38a98:	e1520003 	cmp	r2, r3
   38a9c:	0a000002 	beq	38aac <McTerminal::busAccessCallback(unsigned long, unsigned long, unsigned long, unsigned long&)+0x11c>
   38aa0:	e5900004 	ldr	r0, [r0, #4]
   38aa4:	e3e01000 	mvn	r1, #0
   38aa8:	ebfffac2 	bl	375b8 <McManager::targetIrq(int)>
   38aac:	e3a03000 	mov	r3, #0
   38ab0:	e5c43b85 	strb	r3, [r4, #2949]	; 0xb85
   38ab4:	e8bd8010 	pop	{r4, pc}
   38ab8:	e5940b88 	ldr	r0, [r4, #2952]	; 0xb88
   38abc:	e3500000 	cmp	r0, #0
   38ac0:	08bd8010 	popeq	{r4, pc}
   38ac4:	e5903000 	ldr	r3, [r0]
   38ac8:	e1a01002 	mov	r1, r2
   38acc:	e8bd4010 	pop	{r4, lr}
   38ad0:	e593300c 	ldr	r3, [r3, #12]
   38ad4:	e12fff13 	bx	r3
   38ad8:	e3833030 	orr	r3, r3, #48	; 0x30
   38adc:	e58e3000 	str	r3, [lr]
   38ae0:	e8bd8010 	pop	{r4, pc}
   38ae4:	e3a02001 	mov	r2, #1
   38ae8:	e5c43b85 	strb	r3, [r4, #2949]	; 0xb85
   38aec:	e5c42b86 	strb	r2, [r4, #2950]	; 0xb86
   38af0:	e8bd8010 	pop	{r4, pc}
   38af4:	00061b98 	.word	0x00061b98

00038af8 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)>:
   38af8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38afc:	e3530000 	cmp	r3, #0
   38b00:	e24dd014 	sub	sp, sp, #20
   38b04:	0a00000f 	beq	38b48 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x50>
   38b08:	e1a03000 	mov	r3, r0
   38b0c:	e3e0e000 	mvn	lr, #0
   38b10:	e280cbc3 	add	ip, r0, #199680	; 0x30c00
   38b14:	e28ccd05 	add	ip, ip, #320	; 0x140
   38b18:	e5c3e0e7 	strb	lr, [r3, #231]	; 0xe7
   38b1c:	e2833004 	add	r3, r3, #4
   38b20:	e153000c 	cmp	r3, ip
   38b24:	1afffffb 	bne	38b18 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x20>
   38b28:	e3e0e000 	mvn	lr, #0
   38b2c:	e59f314c 	ldr	r3, [pc, #332]	; 38c80 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x188>
   38b30:	e59fc14c 	ldr	ip, [pc, #332]	; 38c84 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x18c>
   38b34:	e0803003 	add	r3, r0, r3
   38b38:	e080c00c 	add	ip, r0, ip
   38b3c:	e4c3e004 	strb	lr, [r3], #4
   38b40:	e153000c 	cmp	r3, ip
   38b44:	1afffffc 	bne	38b3c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x44>
   38b48:	e3510000 	cmp	r1, #0
   38b4c:	13520009 	cmpne	r2, #9
   38b50:	93a03001 	movls	r3, #1
   38b54:	83a03000 	movhi	r3, #0
   38b58:	9a000044 	bls	38c70 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x178>
   38b5c:	e280aa61 	add	sl, r0, #397312	; 0x61000
   38b60:	e59acb88 	ldr	ip, [sl, #2952]	; 0xb88
   38b64:	e59cc00c 	ldr	ip, [ip, #12]
   38b68:	e5c1c000 	strb	ip, [r1]
   38b6c:	e59acb88 	ldr	ip, [sl, #2952]	; 0xb88
   38b70:	e59cc010 	ldr	ip, [ip, #16]
   38b74:	e5c1c001 	strb	ip, [r1, #1]
   38b78:	e59acb88 	ldr	ip, [sl, #2952]	; 0xb88
   38b7c:	e59ce010 	ldr	lr, [ip, #16]
   38b80:	e35e0000 	cmp	lr, #0
   38b84:	0a000039 	beq	38c70 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x178>
   38b88:	e58d2004 	str	r2, [sp, #4]
   38b8c:	e1a08001 	mov	r8, r1
   38b90:	e1a09000 	mov	r9, r0
   38b94:	e1a0b003 	mov	fp, r3
   38b98:	e3a02002 	mov	r2, #2
   38b9c:	e59c300c 	ldr	r3, [ip, #12]
   38ba0:	e3530000 	cmp	r3, #0
   38ba4:	0a000028 	beq	38c4c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x154>
   38ba8:	e3a05000 	mov	r5, #0
   38bac:	e023539b 	mla	r3, fp, r3, r5
   38bb0:	e59c1008 	ldr	r1, [ip, #8]
   38bb4:	e28c7028 	add	r7, ip, #40	; 0x28
   38bb8:	e1530001 	cmp	r3, r1
   38bbc:	359c7004 	ldrcc	r7, [ip, #4]
   38bc0:	31a03103 	lslcc	r3, r3, #2
   38bc4:	21a03103 	lslcs	r3, r3, #2
   38bc8:	30877003 	addcc	r7, r7, r3
   38bcc:	e0893003 	add	r3, r9, r3
   38bd0:	e2834803 	add	r4, r3, #196608	; 0x30000
   38bd4:	e5940e24 	ldr	r0, [r4, #3620]	; 0xe24
   38bd8:	e5971000 	ldr	r1, [r7]
   38bdc:	e2826006 	add	r6, r2, #6
   38be0:	e1500001 	cmp	r0, r1
   38be4:	e0880002 	add	r0, r8, r2
   38be8:	0a000012 	beq	38c38 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x140>
   38bec:	e59d3004 	ldr	r3, [sp, #4]
   38bf0:	e1530006 	cmp	r3, r6
   38bf4:	3a000018 	bcc	38c5c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x164>
   38bf8:	e5cdb009 	strb	fp, [sp, #9]
   38bfc:	e5cd5008 	strb	r5, [sp, #8]
   38c00:	e5d71000 	ldrb	r1, [r7]
   38c04:	e3a02006 	mov	r2, #6
   38c08:	e5cd100a 	strb	r1, [sp, #10]
   38c0c:	e5d7c001 	ldrb	ip, [r7, #1]
   38c10:	e28d1008 	add	r1, sp, #8
   38c14:	e5cdc00b 	strb	ip, [sp, #11]
   38c18:	e5d7c002 	ldrb	ip, [r7, #2]
   38c1c:	e5cdc00c 	strb	ip, [sp, #12]
   38c20:	e5d7c003 	ldrb	ip, [r7, #3]
   38c24:	e5cdc00d 	strb	ip, [sp, #13]
   38c28:	ebffc738 	bl	2a910 <memcpy>
   38c2c:	e1a02006 	mov	r2, r6
   38c30:	e5973000 	ldr	r3, [r7]
   38c34:	e5843e24 	str	r3, [r4, #3620]	; 0xe24
   38c38:	e59acb88 	ldr	ip, [sl, #2952]	; 0xb88
   38c3c:	e2855001 	add	r5, r5, #1
   38c40:	e59c300c 	ldr	r3, [ip, #12]
   38c44:	e1530005 	cmp	r3, r5
   38c48:	8affffd7 	bhi	38bac <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0xb4>
   38c4c:	e59c3010 	ldr	r3, [ip, #16]
   38c50:	e28bb001 	add	fp, fp, #1
   38c54:	e153000b 	cmp	r3, fp
   38c58:	8affffcf 	bhi	38b9c <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0xa4>
   38c5c:	e3520002 	cmp	r2, #2
   38c60:	0a000002 	beq	38c70 <McTerminal::getMirrorChanges(unsigned char*, unsigned long, bool)+0x178>
   38c64:	e1a00002 	mov	r0, r2
   38c68:	e28dd014 	add	sp, sp, #20
   38c6c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38c70:	e3a02000 	mov	r2, #0
   38c74:	e1a00002 	mov	r0, r2
   38c78:	e28dd014 	add	sp, sp, #20
   38c7c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38c80:	00030e27 	.word	0x00030e27
   38c84:	00061b67 	.word	0x00061b67

00038c88 <McTerminal::refreshDisplay()>:
   38c88:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38c8c:	e5903000 	ldr	r3, [r0]
   38c90:	e59f244c 	ldr	r2, [pc, #1100]	; 390e4 <McTerminal::refreshDisplay()+0x45c>
   38c94:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
   38c98:	e24ddffb 	sub	sp, sp, #1004	; 0x3ec
   38c9c:	e1530002 	cmp	r3, r2
   38ca0:	e1a0b000 	mov	fp, r0
   38ca4:	1a0000bf 	bne	38fa8 <McTerminal::refreshDisplay()+0x320>
   38ca8:	e59080e0 	ldr	r8, [r0, #224]	; 0xe0
   38cac:	e3580000 	cmp	r8, #0
   38cb0:	0a00007a 	beq	38ea0 <McTerminal::refreshDisplay()+0x218>
   38cb4:	e59b0004 	ldr	r0, [fp, #4]
   38cb8:	ebfffb93 	bl	37b0c <McManager::hostSerialNumChAvailable()>
   38cbc:	e3500000 	cmp	r0, #0
   38cc0:	1a000078 	bne	38ea8 <McTerminal::refreshDisplay()+0x220>
   38cc4:	e28baa61 	add	sl, fp, #397312	; 0x61000
   38cc8:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   38ccc:	e3500000 	cmp	r0, #0
   38cd0:	0a000072 	beq	38ea0 <McTerminal::refreshDisplay()+0x218>
   38cd4:	e5903000 	ldr	r3, [r0]
   38cd8:	e59f2408 	ldr	r2, [pc, #1032]	; 390e8 <McTerminal::refreshDisplay()+0x460>
   38cdc:	e5933014 	ldr	r3, [r3, #20]
   38ce0:	e1530002 	cmp	r3, r2
   38ce4:	1a0000d7 	bne	39048 <McTerminal::refreshDisplay()+0x3c0>
   38ce8:	e5d0001c 	ldrb	r0, [r0, #28]
   38cec:	e3500000 	cmp	r0, #0
   38cf0:	0a000090 	beq	38f38 <McTerminal::refreshDisplay()+0x2b0>
   38cf4:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   38cf8:	e3530000 	cmp	r3, #0
   38cfc:	1a0000d3 	bne	39050 <McTerminal::refreshDisplay()+0x3c8>
   38d00:	e59a5b88 	ldr	r5, [sl, #2952]	; 0xb88
   38d04:	e5953010 	ldr	r3, [r5, #16]
   38d08:	e3530000 	cmp	r3, #0
   38d0c:	0a00008a 	beq	38f3c <McTerminal::refreshDisplay()+0x2b4>
   38d10:	e3a09000 	mov	r9, #0
   38d14:	e595300c 	ldr	r3, [r5, #12]
   38d18:	e3530000 	cmp	r3, #0
   38d1c:	0a00007e 	beq	38f1c <McTerminal::refreshDisplay()+0x294>
   38d20:	e3a06000 	mov	r6, #0
   38d24:	ea000010 	b	38d6c <McTerminal::refreshDisplay()+0xe4>
   38d28:	e1520001 	cmp	r2, r1
   38d2c:	1a000098 	bne	38f94 <McTerminal::refreshDisplay()+0x30c>
   38d30:	e593201c 	ldr	r2, [r3, #28]
   38d34:	e59f13b0 	ldr	r1, [pc, #944]	; 390ec <McTerminal::refreshDisplay()+0x464>
   38d38:	e1520001 	cmp	r2, r1
   38d3c:	1a00008f 	bne	38f80 <McTerminal::refreshDisplay()+0x2f8>
   38d40:	e5937024 	ldr	r7, [r3, #36]	; 0x24
   38d44:	e59f33a4 	ldr	r3, [pc, #932]	; 390f0 <McTerminal::refreshDisplay()+0x468>
   38d48:	e1570003 	cmp	r7, r3
   38d4c:	1a000027 	bne	38df0 <McTerminal::refreshDisplay()+0x168>
   38d50:	e5953000 	ldr	r3, [r5]
   38d54:	e58430e4 	str	r3, [r4, #228]	; 0xe4
   38d58:	e59a5b88 	ldr	r5, [sl, #2952]	; 0xb88
   38d5c:	e2866001 	add	r6, r6, #1
   38d60:	e595300c 	ldr	r3, [r5, #12]
   38d64:	e1530006 	cmp	r3, r6
   38d68:	9a00006b 	bls	38f1c <McTerminal::refreshDisplay()+0x294>
   38d6c:	e0236399 	mla	r3, r9, r3, r6
   38d70:	e5952008 	ldr	r2, [r5, #8]
   38d74:	e1530002 	cmp	r3, r2
   38d78:	35955004 	ldrcc	r5, [r5, #4]
   38d7c:	31a03103 	lslcc	r3, r3, #2
   38d80:	21a03103 	lslcs	r3, r3, #2
   38d84:	30855003 	addcc	r5, r5, r3
   38d88:	22855028 	addcs	r5, r5, #40	; 0x28
   38d8c:	e08b4003 	add	r4, fp, r3
   38d90:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
   38d94:	e5952000 	ldr	r2, [r5]
   38d98:	e1520003 	cmp	r2, r3
   38d9c:	0affffed 	beq	38d58 <McTerminal::refreshDisplay()+0xd0>
   38da0:	e5d53003 	ldrb	r3, [r5, #3]
   38da4:	e59f1348 	ldr	r1, [pc, #840]	; 390f4 <McTerminal::refreshDisplay()+0x46c>
   38da8:	e3130010 	tst	r3, #16
   38dac:	e5983000 	ldr	r3, [r8]
   38db0:	e5932018 	ldr	r2, [r3, #24]
   38db4:	1affffdb 	bne	38d28 <McTerminal::refreshDisplay()+0xa0>
   38db8:	e1520001 	cmp	r2, r1
   38dbc:	1a00006a 	bne	38f6c <McTerminal::refreshDisplay()+0x2e4>
   38dc0:	e593201c 	ldr	r2, [r3, #28]
   38dc4:	e59f1320 	ldr	r1, [pc, #800]	; 390ec <McTerminal::refreshDisplay()+0x464>
   38dc8:	e1520001 	cmp	r2, r1
   38dcc:	0affffdb 	beq	38d40 <McTerminal::refreshDisplay()+0xb8>
   38dd0:	e1d510d2 	ldrsb	r1, [r5, #2]
   38dd4:	e1a00008 	mov	r0, r8
   38dd8:	e12fff32 	blx	r2
   38ddc:	e5983000 	ldr	r3, [r8]
   38de0:	e5937024 	ldr	r7, [r3, #36]	; 0x24
   38de4:	e59f3304 	ldr	r3, [pc, #772]	; 390f0 <McTerminal::refreshDisplay()+0x468>
   38de8:	e1570003 	cmp	r7, r3
   38dec:	0affffd7 	beq	38d50 <McTerminal::refreshDisplay()+0xc8>
   38df0:	e5d53000 	ldrb	r3, [r5]
   38df4:	e1a02009 	mov	r2, r9
   38df8:	e1a01006 	mov	r1, r6
   38dfc:	e1a00008 	mov	r0, r8
   38e00:	e12fff37 	blx	r7
   38e04:	eaffffd1 	b	38d50 <McTerminal::refreshDisplay()+0xc8>
   38e08:	ebffd447 	bl	2df2c <micros>
   38e0c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
   38e10:	e59a3b68 	ldr	r3, [sl, #2920]	; 0xb68
   38e14:	e59a1b64 	ldr	r1, [sl, #2916]	; 0xb64
   38e18:	e0020392 	mul	r2, r2, r3
   38e1c:	ebffd460 	bl	2dfa4 <isTimeout>
   38e20:	e3500000 	cmp	r0, #0
   38e24:	0a00001d 	beq	38ea0 <McTerminal::refreshDisplay()+0x218>
   38e28:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   38e2c:	e35c0000 	cmp	ip, #0
   38e30:	1a000090 	bne	39078 <McTerminal::refreshDisplay()+0x3f0>
   38e34:	e59aeb88 	ldr	lr, [sl, #2952]	; 0xb88
   38e38:	e28a4eb7 	add	r4, sl, #2928	; 0xb70
   38e3c:	e28e5014 	add	r5, lr, #20
   38e40:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
   38e44:	e8a4000f 	stmia	r4!, {r0, r1, r2, r3}
   38e48:	e59e300c 	ldr	r3, [lr, #12]
   38e4c:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   38e50:	e59e6008 	ldr	r6, [lr, #8]
   38e54:	e0230293 	mla	r3, r3, r2, r0
   38e58:	e1530006 	cmp	r3, r6
   38e5c:	359ee004 	ldrcc	lr, [lr, #4]
   38e60:	e1a01000 	mov	r1, r0
   38e64:	308ee103 	addcc	lr, lr, r3, lsl #2
   38e68:	e5950000 	ldr	r0, [r5]
   38e6c:	e5983000 	ldr	r3, [r8]
   38e70:	e5840000 	str	r0, [r4]
   38e74:	228ee028 	addcs	lr, lr, #40	; 0x28
   38e78:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   38e7c:	e59f026c 	ldr	r0, [pc, #620]	; 390f0 <McTerminal::refreshDisplay()+0x468>
   38e80:	e5de3000 	ldrb	r3, [lr]
   38e84:	e1540000 	cmp	r4, r0
   38e88:	e58a3b80 	str	r3, [sl, #2944]	; 0xb80
   38e8c:	1a00008f 	bne	390d0 <McTerminal::refreshDisplay()+0x448>
   38e90:	e22cc001 	eor	ip, ip, #1
   38e94:	e5cacb6c 	strb	ip, [sl, #2924]	; 0xb6c
   38e98:	ebffd423 	bl	2df2c <micros>
   38e9c:	e58a0b64 	str	r0, [sl, #2916]	; 0xb64
   38ea0:	e28ddffb 	add	sp, sp, #1004	; 0x3ec
   38ea4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38ea8:	e3500ffa 	cmp	r0, #1000	; 0x3e8
   38eac:	b1a02000 	movlt	r2, r0
   38eb0:	a3a02ffa 	movge	r2, #1000	; 0x3e8
   38eb4:	e1a0100d 	mov	r1, sp
   38eb8:	e59b0004 	ldr	r0, [fp, #4]
   38ebc:	ebfffb15 	bl	37b18 <McManager::hostSerialReadChars(unsigned char*, unsigned long)>
   38ec0:	e2505000 	subs	r5, r0, #0
   38ec4:	0affff7e 	beq	38cc4 <McTerminal::refreshDisplay()+0x3c>
   38ec8:	e28baa61 	add	sl, fp, #397312	; 0x61000
   38ecc:	e3a04000 	mov	r4, #0
   38ed0:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   38ed4:	ea000007 	b	38ef8 <McTerminal::refreshDisplay()+0x270>
   38ed8:	e5903000 	ldr	r3, [r0]
   38edc:	e7dd1004 	ldrb	r1, [sp, r4]
   38ee0:	e593300c 	ldr	r3, [r3, #12]
   38ee4:	e2844001 	add	r4, r4, #1
   38ee8:	e12fff33 	blx	r3
   38eec:	e1550004 	cmp	r5, r4
   38ef0:	e59a0b88 	ldr	r0, [sl, #2952]	; 0xb88
   38ef4:	0affff74 	beq	38ccc <McTerminal::refreshDisplay()+0x44>
   38ef8:	e3500000 	cmp	r0, #0
   38efc:	1afffff5 	bne	38ed8 <McTerminal::refreshDisplay()+0x250>
   38f00:	e2843001 	add	r3, r4, #1
   38f04:	e1550003 	cmp	r5, r3
   38f08:	e2844002 	add	r4, r4, #2
   38f0c:	0affffe3 	beq	38ea0 <McTerminal::refreshDisplay()+0x218>
   38f10:	e1550004 	cmp	r5, r4
   38f14:	1afffff9 	bne	38f00 <McTerminal::refreshDisplay()+0x278>
   38f18:	eaffffe0 	b	38ea0 <McTerminal::refreshDisplay()+0x218>
   38f1c:	e5953010 	ldr	r3, [r5, #16]
   38f20:	e2899001 	add	r9, r9, #1
   38f24:	e1530009 	cmp	r3, r9
   38f28:	8affff79 	bhi	38d14 <McTerminal::refreshDisplay()+0x8c>
   38f2c:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   38f30:	e3530000 	cmp	r3, #0
   38f34:	1a00001e 	bne	38fb4 <McTerminal::refreshDisplay()+0x32c>
   38f38:	e59a5b88 	ldr	r5, [sl, #2952]	; 0xb88
   38f3c:	e3a02000 	mov	r2, #0
   38f40:	e5d5301d 	ldrb	r3, [r5, #29]
   38f44:	e5c5201c 	strb	r2, [r5, #28]
   38f48:	e1530002 	cmp	r3, r2
   38f4c:	0affffad 	beq	38e08 <McTerminal::refreshDisplay()+0x180>
   38f50:	e5da3b6c 	ldrb	r3, [sl, #2924]	; 0xb6c
   38f54:	e3530000 	cmp	r3, #0
   38f58:	1a00002f 	bne	3901c <McTerminal::refreshDisplay()+0x394>
   38f5c:	e3a03000 	mov	r3, #0
   38f60:	e5ca3b6c 	strb	r3, [sl, #2924]	; 0xb6c
   38f64:	e28ddffb 	add	sp, sp, #1004	; 0x3ec
   38f68:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38f6c:	e1d510d1 	ldrsb	r1, [r5, #1]
   38f70:	e1a00008 	mov	r0, r8
   38f74:	e12fff32 	blx	r2
   38f78:	e5983000 	ldr	r3, [r8]
   38f7c:	eaffff8f 	b	38dc0 <McTerminal::refreshDisplay()+0x138>
   38f80:	e1d510d1 	ldrsb	r1, [r5, #1]
   38f84:	e1a00008 	mov	r0, r8
   38f88:	e12fff32 	blx	r2
   38f8c:	e5983000 	ldr	r3, [r8]
   38f90:	eaffff6a 	b	38d40 <McTerminal::refreshDisplay()+0xb8>
   38f94:	e1d510d2 	ldrsb	r1, [r5, #2]
   38f98:	e1a00008 	mov	r0, r8
   38f9c:	e12fff32 	blx	r2
   38fa0:	e5983000 	ldr	r3, [r8]
   38fa4:	eaffff61 	b	38d30 <McTerminal::refreshDisplay()+0xa8>
   38fa8:	e12fff33 	blx	r3
   38fac:	e1a08000 	mov	r8, r0
   38fb0:	eaffff3d 	b	38cac <McTerminal::refreshDisplay()+0x24>
   38fb4:	e5983000 	ldr	r3, [r8]
   38fb8:	e59f6130 	ldr	r6, [pc, #304]	; 390f0 <McTerminal::refreshDisplay()+0x468>
   38fbc:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   38fc0:	e285e014 	add	lr, r5, #20
   38fc4:	e28aceb7 	add	ip, sl, #2928	; 0xb70
   38fc8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   38fcc:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   38fd0:	e595300c 	ldr	r3, [r5, #12]
   38fd4:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   38fd8:	e5957008 	ldr	r7, [r5, #8]
   38fdc:	e0230293 	mla	r3, r3, r2, r0
   38fe0:	e1530007 	cmp	r3, r7
   38fe4:	35955004 	ldrcc	r5, [r5, #4]
   38fe8:	e1a01000 	mov	r1, r0
   38fec:	e59e0000 	ldr	r0, [lr]
   38ff0:	22855028 	addcs	r5, r5, #40	; 0x28
   38ff4:	e58c0000 	str	r0, [ip]
   38ff8:	30855103 	addcc	r5, r5, r3, lsl #2
   38ffc:	e5d53000 	ldrb	r3, [r5]
   39000:	e1540006 	cmp	r4, r6
   39004:	e58a3b80 	str	r3, [sl, #2944]	; 0xb80
   39008:	0affffca 	beq	38f38 <McTerminal::refreshDisplay()+0x2b0>
   3900c:	e59a3b7c 	ldr	r3, [sl, #2940]	; 0xb7c
   39010:	e1a00008 	mov	r0, r8
   39014:	e12fff34 	blx	r4
   39018:	eaffffc6 	b	38f38 <McTerminal::refreshDisplay()+0x2b0>
   3901c:	e5982000 	ldr	r2, [r8]
   39020:	e59f30c8 	ldr	r3, [pc, #200]	; 390f0 <McTerminal::refreshDisplay()+0x468>
   39024:	e5924024 	ldr	r4, [r2, #36]	; 0x24
   39028:	e1540003 	cmp	r4, r3
   3902c:	0affffca 	beq	38f5c <McTerminal::refreshDisplay()+0x2d4>
   39030:	e1a00008 	mov	r0, r8
   39034:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   39038:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   3903c:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   39040:	e12fff34 	blx	r4
   39044:	eaffffc4 	b	38f5c <McTerminal::refreshDisplay()+0x2d4>
   39048:	e12fff33 	blx	r3
   3904c:	eaffff26 	b	38cec <McTerminal::refreshDisplay()+0x64>
   39050:	e5983000 	ldr	r3, [r8]
   39054:	e59f6094 	ldr	r6, [pc, #148]	; 390f0 <McTerminal::refreshDisplay()+0x468>
   39058:	e5934024 	ldr	r4, [r3, #36]	; 0x24
   3905c:	e1540006 	cmp	r4, r6
   39060:	1a000010 	bne	390a8 <McTerminal::refreshDisplay()+0x420>
   39064:	e59a5b88 	ldr	r5, [sl, #2952]	; 0xb88
   39068:	e5953010 	ldr	r3, [r5, #16]
   3906c:	e3530000 	cmp	r3, #0
   39070:	1affff26 	bne	38d10 <McTerminal::refreshDisplay()+0x88>
   39074:	eaffffd1 	b	38fc0 <McTerminal::refreshDisplay()+0x338>
   39078:	e5982000 	ldr	r2, [r8]
   3907c:	e59f306c 	ldr	r3, [pc, #108]	; 390f0 <McTerminal::refreshDisplay()+0x468>
   39080:	e5924024 	ldr	r4, [r2, #36]	; 0x24
   39084:	e1540003 	cmp	r4, r3
   39088:	0affff80 	beq	38e90 <McTerminal::refreshDisplay()+0x208>
   3908c:	e1a00008 	mov	r0, r8
   39090:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   39094:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   39098:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   3909c:	e12fff34 	blx	r4
   390a0:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   390a4:	eaffff79 	b	38e90 <McTerminal::refreshDisplay()+0x208>
   390a8:	e59a3b80 	ldr	r3, [sl, #2944]	; 0xb80
   390ac:	e59a2b74 	ldr	r2, [sl, #2932]	; 0xb74
   390b0:	e59a1b70 	ldr	r1, [sl, #2928]	; 0xb70
   390b4:	e1a00008 	mov	r0, r8
   390b8:	e12fff34 	blx	r4
   390bc:	e59a5b88 	ldr	r5, [sl, #2952]	; 0xb88
   390c0:	e5953010 	ldr	r3, [r5, #16]
   390c4:	e3530000 	cmp	r3, #0
   390c8:	1affff10 	bne	38d10 <McTerminal::refreshDisplay()+0x88>
   390cc:	eaffff96 	b	38f2c <McTerminal::refreshDisplay()+0x2a4>
   390d0:	e1a00008 	mov	r0, r8
   390d4:	e59a3b7c 	ldr	r3, [sl, #2940]	; 0xb7c
   390d8:	e12fff34 	blx	r4
   390dc:	e5dacb6c 	ldrb	ip, [sl, #2924]	; 0xb6c
   390e0:	eaffff6a 	b	38e90 <McTerminal::refreshDisplay()+0x208>
   390e4:	0003888c 	.word	0x0003888c
   390e8:	0003960c 	.word	0x0003960c
   390ec:	00039608 	.word	0x00039608
   390f0:	00038864 	.word	0x00038864
   390f4:	00039604 	.word	0x00039604

000390f8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>:
   390f8:	e92d4070 	push	{r4, r5, r6, lr}
   390fc:	e1a04001 	mov	r4, r1
   39100:	e1a05000 	mov	r5, r0
   39104:	e59f10b4 	ldr	r1, [pc, #180]	; 391c0 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xc8>
   39108:	e59f00b4 	ldr	r0, [pc, #180]	; 391c4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xcc>
   3910c:	ebffc498 	bl	2a374 <strcpy>
   39110:	e5d43000 	ldrb	r3, [r4]
   39114:	e353007f 	cmp	r3, #127	; 0x7f
   39118:	da000009 	ble	39144 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x4c>
   3911c:	e5d42001 	ldrb	r2, [r4, #1]
   39120:	e3520000 	cmp	r2, #0
   39124:	1a00001d 	bne	391a0 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xa8>
   39128:	e3e03000 	mvn	r3, #0
   3912c:	e59f1090 	ldr	r1, [pc, #144]	; 391c4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xcc>
   39130:	e3150011 	tst	r5, #17
   39134:	1203301f 	andne	r3, r3, #31
   39138:	e5c13000 	strb	r3, [r1]
   3913c:	e59f0080 	ldr	r0, [pc, #128]	; 391c4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xcc>
   39140:	e8bd8070 	pop	{r4, r5, r6, pc}
   39144:	e3530001 	cmp	r3, #1
   39148:	da00001a 	ble	391b8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xc0>
   3914c:	e3150022 	tst	r5, #34	; 0x22
   39150:	13a00001 	movne	r0, #1
   39154:	03a00000 	moveq	r0, #0
   39158:	e3150044 	tst	r5, #68	; 0x44
   3915c:	03a02000 	moveq	r2, #0
   39160:	13a02002 	movne	r2, #2
   39164:	e59f1058 	ldr	r1, [pc, #88]	; 391c4 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xcc>
   39168:	e0822000 	add	r2, r2, r0
   3916c:	e591c004 	ldr	ip, [r1, #4]
   39170:	e59f0050 	ldr	r0, [pc, #80]	; 391c8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xd0>
   39174:	e083338c 	add	r3, r3, ip, lsl #7
   39178:	e0823103 	add	r3, r2, r3, lsl #2
   3917c:	e1a03083 	lsl	r3, r3, #1
   39180:	e19030b3 	ldrh	r3, [r0, r3]
   39184:	e2432c01 	sub	r2, r3, #256	; 0x100
   39188:	e3520032 	cmp	r2, #50	; 0x32
   3918c:	86af3073 	sxtbhi	r3, r3
   39190:	8affffe6 	bhi	39130 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x38>
   39194:	e59f3030 	ldr	r3, [pc, #48]	; 391cc <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xd4>
   39198:	e7930102 	ldr	r0, [r3, r2, lsl #2]
   3919c:	e8bd8070 	pop	{r4, r5, r6, pc}
   391a0:	e3520001 	cmp	r2, #1
   391a4:	e1a03002 	mov	r3, r2
   391a8:	0a000002 	beq	391b8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xc0>
   391ac:	e352007f 	cmp	r2, #127	; 0x7f
   391b0:	caffffdc 	bgt	39128 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x30>
   391b4:	eaffffe4 	b	3914c <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0x54>
   391b8:	e59f0010 	ldr	r0, [pc, #16]	; 391d0 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)+0xd8>
   391bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   391c0:	0003ee10 	.word	0x0003ee10
   391c4:	00050fb8 	.word	0x00050fb8
   391c8:	0004c7d4 	.word	0x0004c7d4
   391cc:	0004dfd4 	.word	0x0004dfd4
   391d0:	00047764 	.word	0x00047764

000391d4 <McTerminal::keyHandler(unsigned char, unsigned char const*)>:
   391d4:	e1a03001 	mov	r3, r1
   391d8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   391dc:	e1a01002 	mov	r1, r2
   391e0:	e1a07000 	mov	r7, r0
   391e4:	e1a00003 	mov	r0, r3
   391e8:	ebffffc2 	bl	390f8 <McTerminal::convertRawToKeyString(unsigned char, unsigned char const*)>
   391ec:	e1a06000 	mov	r6, r0
   391f0:	ebffc3a1 	bl	2a07c <strlen>
   391f4:	e3500000 	cmp	r0, #0
   391f8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   391fc:	e2874a61 	add	r4, r7, #397312	; 0x61000
   39200:	e5d43b84 	ldrb	r3, [r4, #2948]	; 0xb84
   39204:	e3530000 	cmp	r3, #0
   39208:	0a00002e 	beq	392c8 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xf4>
   3920c:	e3a05000 	mov	r5, #0
   39210:	e3e0a000 	mvn	sl, #0
   39214:	e1a09005 	mov	r9, r5
   39218:	e59f80b8 	ldr	r8, [pc, #184]	; 392d8 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x104>
   3921c:	ea000011 	b	39268 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x94>
   39220:	e2430001 	sub	r0, r3, #1
   39224:	e3520000 	cmp	r2, #0
   39228:	01500001 	cmpeq	r0, r1
   3922c:	0a00000c 	beq	39264 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   39230:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   39234:	e7d61005 	ldrb	r1, [r6, r5]
   39238:	e0872002 	add	r2, r7, r2
   3923c:	e7c21008 	strb	r1, [r2, r8]
   39240:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   39244:	e2822001 	add	r2, r2, #1
   39248:	e5842b8c 	str	r2, [r4, #2956]	; 0xb8c
   3924c:	e5942b8c 	ldr	r2, [r4, #2956]	; 0xb8c
   39250:	e1520003 	cmp	r2, r3
   39254:	e5d43b87 	ldrb	r3, [r4, #2951]	; 0xb87
   39258:	25849b8c 	strcs	r9, [r4, #2956]	; 0xb8c
   3925c:	e3530000 	cmp	r3, #0
   39260:	1a000014 	bne	392b8 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0xe4>
   39264:	e2855001 	add	r5, r5, #1
   39268:	e1a00006 	mov	r0, r6
   3926c:	ebffc382 	bl	2a07c <strlen>
   39270:	e1550000 	cmp	r5, r0
   39274:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
   39278:	e5943b94 	ldr	r3, [r4, #2964]	; 0xb94
   3927c:	e3530000 	cmp	r3, #0
   39280:	0afffff7 	beq	39264 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   39284:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   39288:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   3928c:	e1510002 	cmp	r1, r2
   39290:	0affffe6 	beq	39230 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x5c>
   39294:	e5942b90 	ldr	r2, [r4, #2960]	; 0xb90
   39298:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   3929c:	e1520001 	cmp	r2, r1
   392a0:	e5941b8c 	ldr	r1, [r4, #2956]	; 0xb8c
   392a4:	3affffdd 	bcc	39220 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x4c>
   392a8:	e0422001 	sub	r2, r2, r1
   392ac:	e3520001 	cmp	r2, #1
   392b0:	8affffde 	bhi	39230 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x5c>
   392b4:	eaffffea 	b	39264 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   392b8:	e1a0100a 	mov	r1, sl
   392bc:	e5970004 	ldr	r0, [r7, #4]
   392c0:	ebfff8bc 	bl	375b8 <McManager::targetIrq(int)>
   392c4:	eaffffe6 	b	39264 <McTerminal::keyHandler(unsigned char, unsigned char const*)+0x90>
   392c8:	e1a01006 	mov	r1, r6
   392cc:	e5970004 	ldr	r0, [r7, #4]
   392d0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   392d4:	eafffa2d 	b	37b90 <McManager::sendKeyStrToTargetStatic(char const*)>
   392d8:	00061b98 	.word	0x00061b98

000392dc <McTerminal::invalidateScreenCaches(bool)>:
   392dc:	e3510000 	cmp	r1, #0
   392e0:	0a000007 	beq	39304 <McTerminal::invalidateScreenCaches(bool)+0x28>
   392e4:	e1a03000 	mov	r3, r0
   392e8:	e3e01000 	mvn	r1, #0
   392ec:	e2802bc3 	add	r2, r0, #199680	; 0x30c00
   392f0:	e2822d05 	add	r2, r2, #320	; 0x140
   392f4:	e5c310e7 	strb	r1, [r3, #231]	; 0xe7
   392f8:	e2833004 	add	r3, r3, #4
   392fc:	e1530002 	cmp	r3, r2
   39300:	1afffffb 	bne	392f4 <McTerminal::invalidateScreenCaches(bool)+0x18>
   39304:	e3e01000 	mvn	r1, #0
   39308:	e59f3018 	ldr	r3, [pc, #24]	; 39328 <McTerminal::invalidateScreenCaches(bool)+0x4c>
   3930c:	e59f2018 	ldr	r2, [pc, #24]	; 3932c <McTerminal::invalidateScreenCaches(bool)+0x50>
   39310:	e0803003 	add	r3, r0, r3
   39314:	e0802002 	add	r2, r0, r2
   39318:	e4c31004 	strb	r1, [r3], #4
   3931c:	e1530002 	cmp	r3, r2
   39320:	1afffffc 	bne	39318 <McTerminal::invalidateScreenCaches(bool)+0x3c>
   39324:	e12fff1e 	bx	lr
   39328:	00030e27 	.word	0x00030e27
   3932c:	00061b67 	.word	0x00061b67

00039330 <McTerminal::setupMachine(char const*, char const*)>:
   39330:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39334:	e1a04000 	mov	r4, r0
   39338:	e24dd0d0 	sub	sp, sp, #208	; 0xd0
   3933c:	e1a05002 	mov	r5, r2
   39340:	eb000130 	bl	39808 <McBase::setupMachine(char const*, char const*)>
   39344:	e3a01001 	mov	r1, #1
   39348:	e3a02000 	mov	r2, #0
   3934c:	e5943000 	ldr	r3, [r4]
   39350:	e59f7138 	ldr	r7, [pc, #312]	; 39490 <McTerminal::setupMachine(char const*, char const*)+0x160>
   39354:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   39358:	e2846a61 	add	r6, r4, #397312	; 0x61000
   3935c:	e1530007 	cmp	r3, r7
   39360:	e5c62b87 	strb	r2, [r6, #2951]	; 0xb87
   39364:	e5c61b84 	strb	r1, [r6, #2948]	; 0xb84
   39368:	e1a08000 	mov	r8, r0
   3936c:	05c410a8 	strbeq	r1, [r4, #168]	; 0xa8
   39370:	1a000043 	bne	39484 <McTerminal::setupMachine(char const*, char const*)+0x154>
   39374:	e28d2008 	add	r2, sp, #8
   39378:	e3a03064 	mov	r3, #100	; 0x64
   3937c:	e1a01005 	mov	r1, r5
   39380:	e59f010c 	ldr	r0, [pc, #268]	; 39494 <McTerminal::setupMachine(char const*, char const*)+0x164>
   39384:	ebffd3d9 	bl	2e2f0 <jsonGetValueForKey>
   39388:	e3500000 	cmp	r0, #0
   3938c:	1a000019 	bne	393f8 <McTerminal::setupMachine(char const*, char const*)+0xc8>
   39390:	e1a01005 	mov	r1, r5
   39394:	e28d206c 	add	r2, sp, #108	; 0x6c
   39398:	e3a03064 	mov	r3, #100	; 0x64
   3939c:	e59f00f4 	ldr	r0, [pc, #244]	; 39498 <McTerminal::setupMachine(char const*, char const*)+0x168>
   393a0:	ebffd3d2 	bl	2e2f0 <jsonGetValueForKey>
   393a4:	e3500000 	cmp	r0, #0
   393a8:	e59f90ec 	ldr	r9, [pc, #236]	; 3949c <McTerminal::setupMachine(char const*, char const*)+0x16c>
   393ac:	1a000023 	bne	39440 <McTerminal::setupMachine(char const*, char const*)+0x110>
   393b0:	e59fa0e8 	ldr	sl, [pc, #232]	; 394a0 <McTerminal::setupMachine(char const*, char const*)+0x170>
   393b4:	ebffb604 	bl	26bcc <CLogger::Get()>
   393b8:	e5d6cb84 	ldrb	ip, [r6, #2948]	; 0xb84
   393bc:	e59f10e0 	ldr	r1, [pc, #224]	; 394a4 <McTerminal::setupMachine(char const*, char const*)+0x174>
   393c0:	e35c0000 	cmp	ip, #0
   393c4:	e59f30dc 	ldr	r3, [pc, #220]	; 394a8 <McTerminal::setupMachine(char const*, char const*)+0x178>
   393c8:	01a03001 	moveq	r3, r1
   393cc:	e59a2004 	ldr	r2, [sl, #4]
   393d0:	e58d3000 	str	r3, [sp]
   393d4:	e7992102 	ldr	r2, [r9, r2, lsl #2]
   393d8:	e59f30cc 	ldr	r3, [pc, #204]	; 394ac <McTerminal::setupMachine(char const*, char const*)+0x17c>
   393dc:	e58d2004 	str	r2, [sp, #4]
   393e0:	e59f10c8 	ldr	r1, [pc, #200]	; 394b0 <McTerminal::setupMachine(char const*, char const*)+0x180>
   393e4:	e3a02004 	mov	r2, #4
   393e8:	ebffb534 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   393ec:	e1a00008 	mov	r0, r8
   393f0:	e28dd0d0 	add	sp, sp, #208	; 0xd0
   393f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   393f8:	e28d0008 	add	r0, sp, #8
   393fc:	e3a0200a 	mov	r2, #10
   39400:	e3a01000 	mov	r1, #0
   39404:	ebffc469 	bl	2a5b0 <strtoul>
   39408:	e3500000 	cmp	r0, #0
   3940c:	13a03001 	movne	r3, #1
   39410:	03a03000 	moveq	r3, #0
   39414:	e5c63b84 	strb	r3, [r6, #2948]	; 0xb84
   39418:	1affffdc 	bne	39390 <McTerminal::setupMachine(char const*, char const*)+0x60>
   3941c:	e5943000 	ldr	r3, [r4]
   39420:	e5933050 	ldr	r3, [r3, #80]	; 0x50
   39424:	e1530007 	cmp	r3, r7
   39428:	05c400a8 	strbeq	r0, [r4, #168]	; 0xa8
   3942c:	0affffd7 	beq	39390 <McTerminal::setupMachine(char const*, char const*)+0x60>
   39430:	e1a01000 	mov	r1, r0
   39434:	e1a00004 	mov	r0, r4
   39438:	e12fff33 	blx	r3
   3943c:	eaffffd3 	b	39390 <McTerminal::setupMachine(char const*, char const*)+0x60>
   39440:	e59fa058 	ldr	sl, [pc, #88]	; 394a0 <McTerminal::setupMachine(char const*, char const*)+0x170>
   39444:	e3a04000 	mov	r4, #0
   39448:	e1a05009 	mov	r5, r9
   3944c:	e28a7004 	add	r7, sl, #4
   39450:	ea000000 	b	39458 <McTerminal::setupMachine(char const*, char const*)+0x128>
   39454:	e2844001 	add	r4, r4, #1
   39458:	e1a00007 	mov	r0, r7
   3945c:	eb00152b 	bl	3e910 <KeyConversion::getNumTypes()>
   39460:	e1500004 	cmp	r0, r4
   39464:	9affffd2 	bls	393b4 <McTerminal::setupMachine(char const*, char const*)+0x84>
   39468:	e4951004 	ldr	r1, [r5], #4
   3946c:	e28d006c 	add	r0, sp, #108	; 0x6c
   39470:	ebffc326 	bl	2a110 <strcasecmp>
   39474:	e3500000 	cmp	r0, #0
   39478:	1afffff5 	bne	39454 <McTerminal::setupMachine(char const*, char const*)+0x124>
   3947c:	e58a4004 	str	r4, [sl, #4]
   39480:	eaffffcb 	b	393b4 <McTerminal::setupMachine(char const*, char const*)+0x84>
   39484:	e1a00004 	mov	r0, r4
   39488:	e12fff33 	blx	r3
   3948c:	eaffffb8 	b	39374 <McTerminal::setupMachine(char const*, char const*)+0x44>
   39490:	00038874 	.word	0x00038874
   39494:	0004731c 	.word	0x0004731c
   39498:	00047328 	.word	0x00047328
   3949c:	0004e0a0 	.word	0x0004e0a0
   394a0:	00050fb8 	.word	0x00050fb8
   394a4:	000469a0 	.word	0x000469a0
   394a8:	0004699c 	.word	0x0004699c
   394ac:	00047338 	.word	0x00047338
   394b0:	00047314 	.word	0x00047314

000394b4 <McTerminal::McTerminal(McManager&, BusAccess&)>:
   394b4:	e3a03002 	mov	r3, #2
   394b8:	e92d4070 	push	{r4, r5, r6, lr}
   394bc:	e1a04000 	mov	r4, r0
   394c0:	e24dd008 	sub	sp, sp, #8
   394c4:	e58d3000 	str	r3, [sp]
   394c8:	e59f3118 	ldr	r3, [pc, #280]	; 395e8 <McTerminal::McTerminal(McManager&, BusAccess&)+0x134>
   394cc:	eb000170 	bl	39a94 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)>
   394d0:	e1a03004 	mov	r3, r4
   394d4:	e3a0c020 	mov	ip, #32
   394d8:	e3a0000f 	mov	r0, #15
   394dc:	e3a02000 	mov	r2, #0
   394e0:	e59fe104 	ldr	lr, [pc, #260]	; 395ec <McTerminal::McTerminal(McManager&, BusAccess&)+0x138>
   394e4:	e2841bc3 	add	r1, r4, #199680	; 0x30c00
   394e8:	e483e0e4 	str	lr, [r3], #228	; 0xe4
   394ec:	e2811f89 	add	r1, r1, #548	; 0x224
   394f0:	e5c3c000 	strb	ip, [r3]
   394f4:	e5c30001 	strb	r0, [r3, #1]
   394f8:	e5c32002 	strb	r2, [r3, #2]
   394fc:	e5c32003 	strb	r2, [r3, #3]
   39500:	e2833004 	add	r3, r3, #4
   39504:	e1530001 	cmp	r3, r1
   39508:	1afffff8 	bne	394f0 <McTerminal::McTerminal(McManager&, BusAccess&)+0x3c>
   3950c:	e3a00020 	mov	r0, #32
   39510:	e3a0c00f 	mov	ip, #15
   39514:	e3a02000 	mov	r2, #0
   39518:	e59f10d0 	ldr	r1, [pc, #208]	; 395f0 <McTerminal::McTerminal(McManager&, BusAccess&)+0x13c>
   3951c:	e0841001 	add	r1, r4, r1
   39520:	e5c30000 	strb	r0, [r3]
   39524:	e5c3c001 	strb	ip, [r3, #1]
   39528:	e5c32002 	strb	r2, [r3, #2]
   3952c:	e5c32003 	strb	r2, [r3, #3]
   39530:	e2833004 	add	r3, r3, #4
   39534:	e1530001 	cmp	r3, r1
   39538:	1afffff8 	bne	39520 <McTerminal::McTerminal(McManager&, BusAccess&)+0x6c>
   3953c:	e3a0105f 	mov	r1, #95	; 0x5f
   39540:	e59f30ac 	ldr	r3, [pc, #172]	; 395f4 <McTerminal::McTerminal(McManager&, BusAccess&)+0x140>
   39544:	e2845a61 	add	r5, r4, #397312	; 0x61000
   39548:	e5852b8c 	str	r2, [r5, #2956]	; 0xb8c
   3954c:	e5853b94 	str	r3, [r5, #2964]	; 0xb94
   39550:	e5852b70 	str	r2, [r5, #2928]	; 0xb70
   39554:	e5852b74 	str	r2, [r5, #2932]	; 0xb74
   39558:	e5c52b78 	strb	r2, [r5, #2936]	; 0xb78
   3955c:	e5c52b79 	strb	r2, [r5, #2937]	; 0xb79
   39560:	e5c52b7a 	strb	r2, [r5, #2938]	; 0xb7a
   39564:	e5852b90 	str	r2, [r5, #2960]	; 0xb90
   39568:	e5851b7c 	str	r1, [r5, #2940]	; 0xb7c
   3956c:	e5850b80 	str	r0, [r5, #2944]	; 0xb80
   39570:	e59f0080 	ldr	r0, [pc, #128]	; 395f8 <McTerminal::McTerminal(McManager&, BusAccess&)+0x144>
   39574:	ebffc6be 	bl	2b074 <operator new(unsigned int)>
   39578:	e1a06000 	mov	r6, r0
   3957c:	eb0002c0 	bl	3a084 <TermAnsi::TermAnsi()>
   39580:	e3a02019 	mov	r2, #25
   39584:	e3a01050 	mov	r1, #80	; 0x50
   39588:	e5856b88 	str	r6, [r5, #2952]	; 0xb88
   3958c:	e1a00006 	mov	r0, r6
   39590:	eb000a2b 	bl	3be44 <TermAnsi::init(unsigned long, unsigned long)>
   39594:	e3e01000 	mvn	r1, #0
   39598:	e59f305c 	ldr	r3, [pc, #92]	; 395fc <McTerminal::McTerminal(McManager&, BusAccess&)+0x148>
   3959c:	e59f205c 	ldr	r2, [pc, #92]	; 39600 <McTerminal::McTerminal(McManager&, BusAccess&)+0x14c>
   395a0:	e0843003 	add	r3, r4, r3
   395a4:	e0842002 	add	r2, r4, r2
   395a8:	e4c31004 	strb	r1, [r3], #4
   395ac:	e1530002 	cmp	r3, r2
   395b0:	1afffffc 	bne	395a8 <McTerminal::McTerminal(McManager&, BusAccess&)+0xf4>
   395b4:	e3a03000 	mov	r3, #0
   395b8:	e3a02001 	mov	r2, #1
   395bc:	e3a01f7d 	mov	r1, #500	; 0x1f4
   395c0:	e1a00004 	mov	r0, r4
   395c4:	e5853b64 	str	r3, [r5, #2916]	; 0xb64
   395c8:	e5c53b6c 	strb	r3, [r5, #2924]	; 0xb6c
   395cc:	e5c53b87 	strb	r3, [r5, #2951]	; 0xb87
   395d0:	e5c53b86 	strb	r3, [r5, #2950]	; 0xb86
   395d4:	e5851b68 	str	r1, [r5, #2920]	; 0xb68
   395d8:	e5c52b84 	strb	r2, [r5, #2948]	; 0xb84
   395dc:	e5c52b85 	strb	r2, [r5, #2949]	; 0xb85
   395e0:	e28dd008 	add	sp, sp, #8
   395e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   395e8:	0004833c 	.word	0x0004833c
   395ec:	000472a4 	.word	0x000472a4
   395f0:	00061b64 	.word	0x00061b64
   395f4:	00001388 	.word	0x00001388
   395f8:	000008ac 	.word	0x000008ac
   395fc:	00030e27 	.word	0x00030e27
   39600:	00061b67 	.word	0x00061b67

00039604 <DisplayBase::foreground(DISPLAY_FX_COLOUR)>:
   39604:	e12fff1e 	bx	lr

00039608 <DisplayBase::background(DISPLAY_FX_COLOUR)>:
   39608:	e12fff1e 	bx	lr

0003960c <TermEmu::hasChanged()>:
   3960c:	e5d0001c 	ldrb	r0, [r0, #28]
   39610:	e12fff1e 	bx	lr

00039614 <_GLOBAL__sub_I__ZN10McTerminal14_keyConversionE>:
   39614:	e3a02000 	mov	r2, #0
   39618:	e59f3004 	ldr	r3, [pc, #4]	; 39624 <_GLOBAL__sub_I__ZN10McTerminal14_keyConversionE+0x10>
   3961c:	e5832004 	str	r2, [r3, #4]
   39620:	e12fff1e 	bx	lr
   39624:	00050fb8 	.word	0x00050fb8

00039628 <McBase::getDescriptorTable()>:
   39628:	e280000c 	add	r0, r0, #12
   3962c:	e12fff1e 	bx	lr

00039630 <McBase::getMachineName()>:
   39630:	e280000c 	add	r0, r0, #12
   39634:	e12fff1e 	bx	lr

00039638 <McBase::machineHeartbeat()>:
   39638:	e12fff1e 	bx	lr

0003963c <McBase::reset(bool, bool)>:
   3963c:	e3a00000 	mov	r0, #0
   39640:	e12fff1e 	bx	lr

00039644 <McBase::canProcFileType(char const*)>:
   39644:	e3a00000 	mov	r0, #0
   39648:	e12fff1e 	bx	lr

0003964c <McBase::getHwManager()>:
   3964c:	e5903004 	ldr	r3, [r0, #4]
   39650:	e5930008 	ldr	r0, [r3, #8]
   39654:	e12fff1e 	bx	lr

00039658 <McBase::getTargetProgrammer()>:
   39658:	e5903004 	ldr	r3, [r0, #4]
   3965c:	e5930010 	ldr	r0, [r3, #16]
   39660:	e12fff1e 	bx	lr

00039664 <McBase::isCalled(char const*, unsigned long&)>:
   39664:	e59030d8 	ldr	r3, [r0, #216]	; 0xd8
   39668:	e3530000 	cmp	r3, #0
   3966c:	0a000014 	beq	396c4 <McBase::isCalled(char const*, unsigned long&)+0x60>
   39670:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   39674:	e1a08002 	mov	r8, r2
   39678:	e1a07001 	mov	r7, r1
   3967c:	e1a06000 	mov	r6, r0
   39680:	e3a04000 	mov	r4, #0
   39684:	e28050ac 	add	r5, r0, #172	; 0xac
   39688:	ea000003 	b	3969c <McBase::isCalled(char const*, unsigned long&)+0x38>
   3968c:	e59630d8 	ldr	r3, [r6, #216]	; 0xd8
   39690:	e2844001 	add	r4, r4, #1
   39694:	e1530004 	cmp	r3, r4
   39698:	9a000007 	bls	396bc <McBase::isCalled(char const*, unsigned long&)+0x58>
   3969c:	e1a01007 	mov	r1, r7
   396a0:	e5b50004 	ldr	r0, [r5, #4]!
   396a4:	ebffc299 	bl	2a110 <strcasecmp>
   396a8:	e3500000 	cmp	r0, #0
   396ac:	1afffff6 	bne	3968c <McBase::isCalled(char const*, unsigned long&)+0x28>
   396b0:	e5884000 	str	r4, [r8]
   396b4:	e3a00001 	mov	r0, #1
   396b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   396bc:	e3a00000 	mov	r0, #0
   396c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   396c4:	e3a00000 	mov	r0, #0
   396c8:	e12fff1e 	bx	lr

000396cc <McBase::getMachineNames(char*, unsigned long)>:
   396cc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   396d0:	e3a06000 	mov	r6, #0
   396d4:	e5c16000 	strb	r6, [r1]
   396d8:	e59030d8 	ldr	r3, [r0, #216]	; 0xd8
   396dc:	e1530006 	cmp	r3, r6
   396e0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   396e4:	e1a05002 	mov	r5, r2
   396e8:	e1a09000 	mov	r9, r0
   396ec:	e1a04001 	mov	r4, r1
   396f0:	e59f705c 	ldr	r7, [pc, #92]	; 39754 <McBase::getMachineNames(char*, unsigned long)+0x88>
   396f4:	e59fa05c 	ldr	sl, [pc, #92]	; 39758 <McBase::getMachineNames(char*, unsigned long)+0x8c>
   396f8:	e28080ac 	add	r8, r0, #172	; 0xac
   396fc:	e1a02005 	mov	r2, r5
   39700:	e1a01007 	mov	r1, r7
   39704:	e1a00004 	mov	r0, r4
   39708:	ebffd25e 	bl	2e088 <strlcat>
   3970c:	e1a02005 	mov	r2, r5
   39710:	e5b81004 	ldr	r1, [r8, #4]!
   39714:	e1a00004 	mov	r0, r4
   39718:	ebffd25a 	bl	2e088 <strlcat>
   3971c:	e1a02005 	mov	r2, r5
   39720:	e1a01007 	mov	r1, r7
   39724:	e1a00004 	mov	r0, r4
   39728:	ebffd256 	bl	2e088 <strlcat>
   3972c:	e59930d8 	ldr	r3, [r9, #216]	; 0xd8
   39730:	e2866001 	add	r6, r6, #1
   39734:	e1560003 	cmp	r6, r3
   39738:	2a000004 	bcs	39750 <McBase::getMachineNames(char*, unsigned long)+0x84>
   3973c:	e1a02005 	mov	r2, r5
   39740:	e1a0100a 	mov	r1, sl
   39744:	e1a00004 	mov	r0, r4
   39748:	ebffd24e 	bl	2e088 <strlcat>
   3974c:	eaffffea 	b	396fc <McBase::getMachineNames(char*, unsigned long)+0x30>
   39750:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39754:	00046eec 	.word	0x00046eec
   39758:	00043330 	.word	0x00043330

0003975c <McBase::setupDisplay(DisplayBase*)>:
   3975c:	e92d4070 	push	{r4, r5, r6, lr}
   39760:	e1a04000 	mov	r4, r0
   39764:	e1a05001 	mov	r5, r1
   39768:	e24dd018 	sub	sp, sp, #24
   3976c:	e58010e0 	str	r1, [r0, #224]	; 0xe0
   39770:	ebffb515 	bl	26bcc <CLogger::Get()>
   39774:	e594207c 	ldr	r2, [r4, #124]	; 0x7c
   39778:	e5943078 	ldr	r3, [r4, #120]	; 0x78
   3977c:	e59f1078 	ldr	r1, [pc, #120]	; 397fc <McBase::setupDisplay(DisplayBase*)+0xa0>
   39780:	e58d2004 	str	r2, [sp, #4]
   39784:	e58d3000 	str	r3, [sp]
   39788:	e3a02004 	mov	r2, #4
   3978c:	e59f306c 	ldr	r3, [pc, #108]	; 39800 <McBase::setupDisplay(DisplayBase*)+0xa4>
   39790:	ebffb44a 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   39794:	e3550000 	cmp	r5, #0
   39798:	0a000004 	beq	397b0 <McBase::setupDisplay(DisplayBase*)+0x54>
   3979c:	e5952000 	ldr	r2, [r5]
   397a0:	e59f305c 	ldr	r3, [pc, #92]	; 39804 <McBase::setupDisplay(DisplayBase*)+0xa8>
   397a4:	e5926030 	ldr	r6, [r2, #48]	; 0x30
   397a8:	e1560003 	cmp	r6, r3
   397ac:	1a000001 	bne	397b8 <McBase::setupDisplay(DisplayBase*)+0x5c>
   397b0:	e28dd018 	add	sp, sp, #24
   397b4:	e8bd8070 	pop	{r4, r5, r6, pc}
   397b8:	e594c098 	ldr	ip, [r4, #152]	; 0x98
   397bc:	e2841078 	add	r1, r4, #120	; 0x78
   397c0:	e594e094 	ldr	lr, [r4, #148]	; 0x94
   397c4:	e891000e 	ldm	r1, {r1, r2, r3}
   397c8:	e58dc014 	str	ip, [sp, #20]
   397cc:	e594c090 	ldr	ip, [r4, #144]	; 0x90
   397d0:	e58de010 	str	lr, [sp, #16]
   397d4:	e1a00005 	mov	r0, r5
   397d8:	e594508c 	ldr	r5, [r4, #140]	; 0x8c
   397dc:	e58dc00c 	str	ip, [sp, #12]
   397e0:	e594e088 	ldr	lr, [r4, #136]	; 0x88
   397e4:	e594c084 	ldr	ip, [r4, #132]	; 0x84
   397e8:	e58d5008 	str	r5, [sp, #8]
   397ec:	e88d5000 	stm	sp, {ip, lr}
   397f0:	e12fff36 	blx	r6
   397f4:	e28dd018 	add	sp, sp, #24
   397f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   397fc:	00047364 	.word	0x00047364
   39800:	000473e4 	.word	0x000473e4
   39804:	00039b48 	.word	0x00039b48

00039808 <McBase::setupMachine(char const*, char const*)>:
   39808:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3980c:	e3a0e000 	mov	lr, #0
   39810:	e24dd070 	sub	sp, sp, #112	; 0x70
   39814:	e28d3070 	add	r3, sp, #112	; 0x70
   39818:	e590c000 	ldr	ip, [r0]
   3981c:	e523e068 	str	lr, [r3, #-104]!	; 0xffffff98
   39820:	e1a06002 	mov	r6, r2
   39824:	e59c5000 	ldr	r5, [ip]
   39828:	e1a02003 	mov	r2, r3
   3982c:	e1a04000 	mov	r4, r0
   39830:	e1a08001 	mov	r8, r1
   39834:	e12fff35 	blx	r5
   39838:	e2507000 	subs	r7, r0, #0
   3983c:	0a00004f 	beq	39980 <McBase::setupMachine(char const*, char const*)+0x178>
   39840:	e59d3008 	ldr	r3, [sp, #8]
   39844:	e284500c 	add	r5, r4, #12
   39848:	e283202c 	add	r2, r3, #44	; 0x2c
   3984c:	e58430dc 	str	r3, [r4, #220]	; 0xdc
   39850:	e7941102 	ldr	r1, [r4, r2, lsl #2]
   39854:	e1a00005 	mov	r0, r5
   39858:	e3a020a4 	mov	r2, #164	; 0xa4
   3985c:	ebffc42b 	bl	2a910 <memcpy>
   39860:	ebffb4d9 	bl	26bcc <CLogger::Get()>
   39864:	e5943000 	ldr	r3, [r4]
   39868:	e59f81fc 	ldr	r8, [pc, #508]	; 39a6c <McBase::setupMachine(char const*, char const*)+0x264>
   3986c:	e5933008 	ldr	r3, [r3, #8]
   39870:	e1a09000 	mov	r9, r0
   39874:	e1530008 	cmp	r3, r8
   39878:	01a00005 	moveq	r0, r5
   3987c:	1a000052 	bne	399cc <McBase::setupMachine(char const*, char const*)+0x1c4>
   39880:	e58d0000 	str	r0, [sp]
   39884:	e59f31e4 	ldr	r3, [pc, #484]	; 39a70 <McBase::setupMachine(char const*, char const*)+0x268>
   39888:	e3a02004 	mov	r2, #4
   3988c:	e59f11e0 	ldr	r1, [pc, #480]	; 39a74 <McBase::setupMachine(char const*, char const*)+0x26c>
   39890:	e1a00009 	mov	r0, r9
   39894:	ebffb409 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   39898:	e5943000 	ldr	r3, [r4]
   3989c:	e59f11d4 	ldr	r1, [pc, #468]	; 39a78 <McBase::setupMachine(char const*, char const*)+0x270>
   398a0:	e593201c 	ldr	r2, [r3, #28]
   398a4:	e1520001 	cmp	r2, r1
   398a8:	1a00003d 	bne	399a4 <McBase::setupMachine(char const*, char const*)+0x19c>
   398ac:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   398b0:	e59f91c4 	ldr	r9, [pc, #452]	; 39a7c <McBase::setupMachine(char const*, char const*)+0x274>
   398b4:	e1530009 	cmp	r3, r9
   398b8:	1a000040 	bne	399c0 <McBase::setupMachine(char const*, char const*)+0x1b8>
   398bc:	e5943004 	ldr	r3, [r4, #4]
   398c0:	e5930008 	ldr	r0, [r3, #8]
   398c4:	ebffee86 	bl	352e4 <HwManager::disableAll()>
   398c8:	e5943000 	ldr	r3, [r4]
   398cc:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   398d0:	e1530009 	cmp	r3, r9
   398d4:	1a00005a 	bne	39a44 <McBase::setupMachine(char const*, char const*)+0x23c>
   398d8:	e5943004 	ldr	r3, [r4, #4]
   398dc:	e5930008 	ldr	r0, [r3, #8]
   398e0:	e1a02006 	mov	r2, r6
   398e4:	e59f1194 	ldr	r1, [pc, #404]	; 39a80 <McBase::setupMachine(char const*, char const*)+0x278>
   398e8:	ebffef55 	bl	35644 <HwManager::setupFromJson(char const*, char const*)>
   398ec:	e594c004 	ldr	ip, [r4, #4]
   398f0:	e1a01006 	mov	r1, r6
   398f4:	e28d200c 	add	r2, sp, #12
   398f8:	e3a03064 	mov	r3, #100	; 0x64
   398fc:	e59f0180 	ldr	r0, [pc, #384]	; 39a84 <McBase::setupMachine(char const*, char const*)+0x27c>
   39900:	e59c600c 	ldr	r6, [ip, #12]
   39904:	e59490a0 	ldr	r9, [r4, #160]	; 0xa0
   39908:	ebffd278 	bl	2e2f0 <jsonGetValueForKey>
   3990c:	e3500000 	cmp	r0, #0
   39910:	1a00003d 	bne	39a0c <McBase::setupMachine(char const*, char const*)+0x204>
   39914:	e1a00006 	mov	r0, r6
   39918:	ebffe5ee 	bl	330d8 <BusAccess::clockGetMinFreqHz()>
   3991c:	e1590000 	cmp	r9, r0
   39920:	2a00002c 	bcs	399d8 <McBase::setupMachine(char const*, char const*)+0x1d0>
   39924:	e1a00006 	mov	r0, r6
   39928:	e3a01000 	mov	r1, #0
   3992c:	ebffe574 	bl	32f04 <BusAccess::clockEnable(bool)>
   39930:	e5943000 	ldr	r3, [r4]
   39934:	e59f214c 	ldr	r2, [pc, #332]	; 39a88 <McBase::setupMachine(char const*, char const*)+0x280>
   39938:	e5933018 	ldr	r3, [r3, #24]
   3993c:	e1530002 	cmp	r3, r2
   39940:	1a000046 	bne	39a60 <McBase::setupMachine(char const*, char const*)+0x258>
   39944:	ebffb4a0 	bl	26bcc <CLogger::Get()>
   39948:	e5943000 	ldr	r3, [r4]
   3994c:	e1a06000 	mov	r6, r0
   39950:	e5933008 	ldr	r3, [r3, #8]
   39954:	e1530008 	cmp	r3, r8
   39958:	1a00003c 	bne	39a50 <McBase::setupMachine(char const*, char const*)+0x248>
   3995c:	e1a00006 	mov	r0, r6
   39960:	e58d5000 	str	r5, [sp]
   39964:	e59f3120 	ldr	r3, [pc, #288]	; 39a8c <McBase::setupMachine(char const*, char const*)+0x284>
   39968:	e3a02004 	mov	r2, #4
   3996c:	e59f1100 	ldr	r1, [pc, #256]	; 39a74 <McBase::setupMachine(char const*, char const*)+0x26c>
   39970:	ebffb3d2 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   39974:	e1a00007 	mov	r0, r7
   39978:	e28dd070 	add	sp, sp, #112	; 0x70
   3997c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39980:	ebffb491 	bl	26bcc <CLogger::Get()>
   39984:	e58d8000 	str	r8, [sp]
   39988:	e59f3100 	ldr	r3, [pc, #256]	; 39a90 <McBase::setupMachine(char const*, char const*)+0x288>
   3998c:	e3a02002 	mov	r2, #2
   39990:	e59f10dc 	ldr	r1, [pc, #220]	; 39a74 <McBase::setupMachine(char const*, char const*)+0x26c>
   39994:	ebffb3c9 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   39998:	e1a00007 	mov	r0, r7
   3999c:	e28dd070 	add	sp, sp, #112	; 0x70
   399a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   399a4:	e1a00004 	mov	r0, r4
   399a8:	e12fff32 	blx	r2
   399ac:	e5943000 	ldr	r3, [r4]
   399b0:	e59f90c4 	ldr	r9, [pc, #196]	; 39a7c <McBase::setupMachine(char const*, char const*)+0x274>
   399b4:	e5933064 	ldr	r3, [r3, #100]	; 0x64
   399b8:	e1530009 	cmp	r3, r9
   399bc:	0affffbe 	beq	398bc <McBase::setupMachine(char const*, char const*)+0xb4>
   399c0:	e1a00004 	mov	r0, r4
   399c4:	e12fff33 	blx	r3
   399c8:	eaffffbd 	b	398c4 <McBase::setupMachine(char const*, char const*)+0xbc>
   399cc:	e1a00004 	mov	r0, r4
   399d0:	e12fff33 	blx	r3
   399d4:	eaffffa9 	b	39880 <McBase::setupMachine(char const*, char const*)+0x78>
   399d8:	e1a00006 	mov	r0, r6
   399dc:	ebffe5bf 	bl	330e0 <BusAccess::clockGetMaxFreqHz()>
   399e0:	e1590000 	cmp	r9, r0
   399e4:	8affffce 	bhi	39924 <McBase::setupMachine(char const*, char const*)+0x11c>
   399e8:	e1a00006 	mov	r0, r6
   399ec:	ebffe443 	bl	32b00 <BusAccess::clockSetup()>
   399f0:	e1a01009 	mov	r1, r9
   399f4:	e1a00006 	mov	r0, r6
   399f8:	ebffe4b9 	bl	32ce4 <BusAccess::clockSetFreqHz(unsigned long)>
   399fc:	e1a00006 	mov	r0, r6
   39a00:	e3a01001 	mov	r1, #1
   39a04:	ebffe53e 	bl	32f04 <BusAccess::clockEnable(bool)>
   39a08:	eaffffc8 	b	39930 <McBase::setupMachine(char const*, char const*)+0x128>
   39a0c:	e3a0200a 	mov	r2, #10
   39a10:	e3a01000 	mov	r1, #0
   39a14:	e28d000c 	add	r0, sp, #12
   39a18:	ebffc2e4 	bl	2a5b0 <strtoul>
   39a1c:	e1a0a000 	mov	sl, r0
   39a20:	e1a00006 	mov	r0, r6
   39a24:	ebffe5ab 	bl	330d8 <BusAccess::clockGetMinFreqHz()>
   39a28:	e15a0000 	cmp	sl, r0
   39a2c:	3affffb8 	bcc	39914 <McBase::setupMachine(char const*, char const*)+0x10c>
   39a30:	e1a00006 	mov	r0, r6
   39a34:	ebffe5a9 	bl	330e0 <BusAccess::clockGetMaxFreqHz()>
   39a38:	e15a0000 	cmp	sl, r0
   39a3c:	91a0900a 	movls	r9, sl
   39a40:	eaffffb3 	b	39914 <McBase::setupMachine(char const*, char const*)+0x10c>
   39a44:	e1a00004 	mov	r0, r4
   39a48:	e12fff33 	blx	r3
   39a4c:	eaffffa3 	b	398e0 <McBase::setupMachine(char const*, char const*)+0xd8>
   39a50:	e1a00004 	mov	r0, r4
   39a54:	e12fff33 	blx	r3
   39a58:	e1a05000 	mov	r5, r0
   39a5c:	eaffffbe 	b	3995c <McBase::setupMachine(char const*, char const*)+0x154>
   39a60:	e1a00004 	mov	r0, r4
   39a64:	e12fff33 	blx	r3
   39a68:	eaffffb5 	b	39944 <McBase::setupMachine(char const*, char const*)+0x13c>
   39a6c:	00039630 	.word	0x00039630
   39a70:	00047428 	.word	0x00047428
   39a74:	00047364 	.word	0x00047364
   39a78:	00039b50 	.word	0x00039b50
   39a7c:	0003964c 	.word	0x0003964c
   39a80:	00047438 	.word	0x00047438
   39a84:	00046efc 	.word	0x00046efc
   39a88:	00039b4c 	.word	0x00039b4c
   39a8c:	0004743c 	.word	0x0004743c
   39a90:	00047404 	.word	0x00047404

00039a94 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)>:
   39a94:	e92d4070 	push	{r4, r5, r6, lr}
   39a98:	e1a06001 	mov	r6, r1
   39a9c:	e59d4010 	ldr	r4, [sp, #16]
   39aa0:	e59f1098 	ldr	r1, [pc, #152]	; 39b40 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0xac>
   39aa4:	e3540000 	cmp	r4, #0
   39aa8:	e1a05000 	mov	r5, r0
   39aac:	e5802008 	str	r2, [r0, #8]
   39ab0:	e8800042 	stm	r0, {r1, r6}
   39ab4:	0a000019 	beq	39b20 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0x8c>
   39ab8:	e1a0c003 	mov	ip, r3
   39abc:	e3a02000 	mov	r2, #0
   39ac0:	e280e0ac 	add	lr, r0, #172	; 0xac
   39ac4:	e2822001 	add	r2, r2, #1
   39ac8:	e3520009 	cmp	r2, #9
   39acc:	93a00000 	movls	r0, #0
   39ad0:	83a00001 	movhi	r0, #1
   39ad4:	e1540002 	cmp	r4, r2
   39ad8:	93800001 	orrls	r0, r0, #1
   39adc:	e3500000 	cmp	r0, #0
   39ae0:	e5aec004 	str	ip, [lr, #4]!
   39ae4:	e28cc0a4 	add	ip, ip, #164	; 0xa4
   39ae8:	0afffff5 	beq	39ac4 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0x30>
   39aec:	e3a02000 	mov	r2, #0
   39af0:	e58540d8 	str	r4, [r5, #216]	; 0xd8
   39af4:	e58520e0 	str	r2, [r5, #224]	; 0xe0
   39af8:	e58520dc 	str	r2, [r5, #220]	; 0xdc
   39afc:	e1a01003 	mov	r1, r3
   39b00:	e3a020a4 	mov	r2, #164	; 0xa4
   39b04:	e285000c 	add	r0, r5, #12
   39b08:	ebffc380 	bl	2a910 <memcpy>
   39b0c:	e1a00006 	mov	r0, r6
   39b10:	e1a01005 	mov	r1, r5
   39b14:	ebfff6ac 	bl	375cc <McManager::add(McBase*)>
   39b18:	e1a00005 	mov	r0, r5
   39b1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   39b20:	e58040d8 	str	r4, [r0, #216]	; 0xd8
   39b24:	e58040e0 	str	r4, [r0, #224]	; 0xe0
   39b28:	e58040dc 	str	r4, [r0, #220]	; 0xdc
   39b2c:	e3a020a4 	mov	r2, #164	; 0xa4
   39b30:	e59f100c 	ldr	r1, [pc, #12]	; 39b44 <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0xb0>
   39b34:	e280000c 	add	r0, r0, #12
   39b38:	ebffc374 	bl	2a910 <memcpy>
   39b3c:	eafffff2 	b	39b0c <McBase::McBase(McManager&, BusAccess&, McVariantTable const*, unsigned long)+0x78>
   39b40:	00047374 	.word	0x00047374
   39b44:	00048484 	.word	0x00048484

00039b48 <DisplayBase::targetLayout(int, int, int, int, int, int, WgfxFont*, int, int)>:
   39b48:	e12fff1e 	bx	lr

00039b4c <McBase::enableMachine()>:
   39b4c:	e12fff1e 	bx	lr

00039b50 <McBase::disableMachine()>:
   39b50:	e12fff1e 	bx	lr

00039b54 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)>:
   39b54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39b58:	e1a04001 	mov	r4, r1
   39b5c:	e24dd0fc 	sub	sp, sp, #252	; 0xfc
   39b60:	e3a0100c 	mov	r1, #12
   39b64:	e1a05000 	mov	r5, r0
   39b68:	e1a00004 	mov	r0, r4
   39b6c:	e1a07002 	mov	r7, r2
   39b70:	eb000b43 	bl	3c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39b74:	e1a00004 	mov	r0, r4
   39b78:	e59f1450 	ldr	r1, [pc, #1104]	; 39fd0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x47c>
   39b7c:	eb000b31 	bl	3c848 <Display::consolePut(char const*)>
   39b80:	e1a00004 	mov	r0, r4
   39b84:	e3a0100f 	mov	r1, #15
   39b88:	eb000b3d 	bl	3c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39b8c:	e59fb440 	ldr	fp, [pc, #1088]	; 39fd4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x480>
   39b90:	e1a00004 	mov	r0, r4
   39b94:	e59f143c 	ldr	r1, [pc, #1084]	; 39fd8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x484>
   39b98:	eb000b2a 	bl	3c848 <Display::consolePut(char const*)>
   39b9c:	e1a00004 	mov	r0, r4
   39ba0:	e59f1434 	ldr	r1, [pc, #1076]	; 39fdc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x488>
   39ba4:	eb000b27 	bl	3c848 <Display::consolePut(char const*)>
   39ba8:	e1a0e00b 	mov	lr, fp
   39bac:	e3a06000 	mov	r6, #0
   39bb0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   39bb4:	e28dc010 	add	ip, sp, #16
   39bb8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   39bbc:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
   39bc0:	e1a08006 	mov	r8, r6
   39bc4:	e88c000f 	stm	ip, {r0, r1, r2, r3}
   39bc8:	e1a09006 	mov	r9, r6
   39bcc:	ebffd0d7 	bl	2df30 <millis>
   39bd0:	e1a00005 	mov	r0, r5
   39bd4:	e2499001 	sub	r9, r9, #1
   39bd8:	ebff3ea2 	bl	9668 <BusRaiderApp::selfTestHelperService()>
   39bdc:	e3590006 	cmp	r9, #6
   39be0:	979ff109 	ldrls	pc, [pc, r9, lsl #2]
   39be4:	ea00005c 	b	39d5c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x208>
   39be8:	00039d70 	.word	0x00039d70
   39bec:	00039c1c 	.word	0x00039c1c
   39bf0:	00039c40 	.word	0x00039c40
   39bf4:	00039c58 	.word	0x00039c58
   39bf8:	00039ca0 	.word	0x00039ca0
   39bfc:	00039e70 	.word	0x00039e70
   39c00:	00039ce4 	.word	0x00039ce4
   39c04:	e59f13d4 	ldr	r1, [pc, #980]	; 39fe0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x48c>
   39c08:	e1a00004 	mov	r0, r4
   39c0c:	eb000b0d 	bl	3c848 <Display::consolePut(char const*)>
   39c10:	ebffd0c6 	bl	2df30 <millis>
   39c14:	e1a00005 	mov	r0, r5
   39c18:	ebff3e92 	bl	9668 <BusRaiderApp::selfTestHelperService()>
   39c1c:	e3a01005 	mov	r1, #5
   39c20:	e1a00007 	mov	r0, r7
   39c24:	ebffe9de 	bl	343a4 <BusAccess::rawBusControlMuxSet(unsigned long)>
   39c28:	e59f03b4 	ldr	r0, [pc, #948]	; 39fe4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x490>
   39c2c:	ebffd0c6 	bl	2df4c <microsDelay>
   39c30:	e1a00007 	mov	r0, r7
   39c34:	ebffe9ed 	bl	343f0 <BusAccess::rawBusControlMuxClear()>
   39c38:	e1a00005 	mov	r0, r5
   39c3c:	ebff3e89 	bl	9668 <BusRaiderApp::selfTestHelperService()>
   39c40:	e1a00007 	mov	r0, r7
   39c44:	ebffe6af 	bl	33708 <BusAccess::controlRequestAndTake()>
   39c48:	e3500000 	cmp	r0, #0
   39c4c:	1a00005c 	bne	39dc4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x270>
   39c50:	e1a00005 	mov	r0, r5
   39c54:	ebff3e83 	bl	9668 <BusRaiderApp::selfTestHelperService()>
   39c58:	e28d30f8 	add	r3, sp, #248	; 0xf8
   39c5c:	e0832186 	add	r2, r3, r6, lsl #3
   39c60:	e51210e4 	ldr	r1, [r2, #-228]	; 0xffffff1c
   39c64:	e51230e8 	ldr	r3, [r2, #-232]	; 0xffffff18
   39c68:	e28d9030 	add	r9, sp, #48	; 0x30
   39c6c:	e0832001 	add	r2, r3, r1
   39c70:	e2422001 	sub	r2, r2, #1
   39c74:	e58d1004 	str	r1, [sp, #4]
   39c78:	e58d2000 	str	r2, [sp]
   39c7c:	e3a010c8 	mov	r1, #200	; 0xc8
   39c80:	e1a00009 	mov	r0, r9
   39c84:	e59f235c 	ldr	r2, [pc, #860]	; 39fe8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x494>
   39c88:	ebffd159 	bl	2e1f4 <snprintf>
   39c8c:	e1a01009 	mov	r1, r9
   39c90:	e1a00004 	mov	r0, r4
   39c94:	eb000aeb 	bl	3c848 <Display::consolePut(char const*)>
   39c98:	e1a00005 	mov	r0, r5
   39c9c:	ebff3e71 	bl	9668 <BusRaiderApp::selfTestHelperService()>
   39ca0:	e1a00005 	mov	r0, r5
   39ca4:	ebff3e70 	bl	966c <BusRaiderApp::selfTestKeyboardGet()>
   39ca8:	e6af9070 	sxtb	r9, r0
   39cac:	e1a00009 	mov	r0, r9
   39cb0:	ebffd285 	bl	2e6cc <rdtolower>
   39cb4:	e3500079 	cmp	r0, #121	; 0x79
   39cb8:	0a000066 	beq	39e58 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x304>
   39cbc:	e1a00009 	mov	r0, r9
   39cc0:	ebffd281 	bl	2e6cc <rdtolower>
   39cc4:	e350006e 	cmp	r0, #110	; 0x6e
   39cc8:	1afffff2 	bne	39c98 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x144>
   39ccc:	e59f1318 	ldr	r1, [pc, #792]	; 39fec <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x498>
   39cd0:	e1a00004 	mov	r0, r4
   39cd4:	eb000adb 	bl	3c848 <Display::consolePut(char const*)>
   39cd8:	ebffd094 	bl	2df30 <millis>
   39cdc:	e1a00005 	mov	r0, r5
   39ce0:	ebff3e60 	bl	9668 <BusRaiderApp::selfTestHelperService()>
   39ce4:	e2866001 	add	r6, r6, #1
   39ce8:	e3560003 	cmp	r6, #3
   39cec:	9affffd7 	bls	39c50 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0xfc>
   39cf0:	e1a00005 	mov	r0, r5
   39cf4:	ebff3e5b 	bl	9668 <BusRaiderApp::selfTestHelperService()>
   39cf8:	e1a00007 	mov	r0, r7
   39cfc:	ebffe55b 	bl	33270 <BusAccess::controlRelease()>
   39d00:	e3580000 	cmp	r8, #0
   39d04:	0a00007b 	beq	39ef8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x3a4>
   39d08:	e3a01009 	mov	r1, #9
   39d0c:	e1a00004 	mov	r0, r4
   39d10:	eb000adb 	bl	3c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39d14:	e59f32d4 	ldr	r3, [pc, #724]	; 39ff0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x49c>
   39d18:	e3580001 	cmp	r8, #1
   39d1c:	e59f22d0 	ldr	r2, [pc, #720]	; 39ff4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4a0>
   39d20:	01a02003 	moveq	r2, r3
   39d24:	e3a01064 	mov	r1, #100	; 0x64
   39d28:	e58d2000 	str	r2, [sp]
   39d2c:	e1a03008 	mov	r3, r8
   39d30:	e28d0030 	add	r0, sp, #48	; 0x30
   39d34:	e59f22bc 	ldr	r2, [pc, #700]	; 39ff8 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4a4>
   39d38:	ebffd12d 	bl	2e1f4 <snprintf>
   39d3c:	e28d1030 	add	r1, sp, #48	; 0x30
   39d40:	e1a00004 	mov	r0, r4
   39d44:	eb000abf 	bl	3c848 <Display::consolePut(char const*)>
   39d48:	e1a00004 	mov	r0, r4
   39d4c:	e3a0100f 	mov	r1, #15
   39d50:	eb000acb 	bl	3c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39d54:	e28dd0fc 	add	sp, sp, #252	; 0xfc
   39d58:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39d5c:	e59f1298 	ldr	r1, [pc, #664]	; 39ffc <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4a8>
   39d60:	e1a00004 	mov	r0, r4
   39d64:	eb000ab7 	bl	3c848 <Display::consolePut(char const*)>
   39d68:	e1a00005 	mov	r0, r5
   39d6c:	ebff3e3d 	bl	9668 <BusRaiderApp::selfTestHelperService()>
   39d70:	e1a00005 	mov	r0, r5
   39d74:	ebff3e3c 	bl	966c <BusRaiderApp::selfTestKeyboardGet()>
   39d78:	e6af9070 	sxtb	r9, r0
   39d7c:	e1a00009 	mov	r0, r9
   39d80:	ebffd251 	bl	2e6cc <rdtolower>
   39d84:	e3500079 	cmp	r0, #121	; 0x79
   39d88:	0affff9d 	beq	39c04 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0xb0>
   39d8c:	e1a00009 	mov	r0, r9
   39d90:	ebffd24d 	bl	2e6cc <rdtolower>
   39d94:	e350006e 	cmp	r0, #110	; 0x6e
   39d98:	1afffff2 	bne	39d68 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x214>
   39d9c:	e59f123c 	ldr	r1, [pc, #572]	; 39fe0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x48c>
   39da0:	e1a00004 	mov	r0, r4
   39da4:	eb000aa7 	bl	3c848 <Display::consolePut(char const*)>
   39da8:	ebffd060 	bl	2df30 <millis>
   39dac:	e1a00005 	mov	r0, r5
   39db0:	ebff3e2c 	bl	9668 <BusRaiderApp::selfTestHelperService()>
   39db4:	e1a00007 	mov	r0, r7
   39db8:	ebffe652 	bl	33708 <BusAccess::controlRequestAndTake()>
   39dbc:	e3500000 	cmp	r0, #0
   39dc0:	0affffa2 	beq	39c50 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0xfc>
   39dc4:	e1a09000 	mov	r9, r0
   39dc8:	e3a01009 	mov	r1, #9
   39dcc:	e1a00004 	mov	r0, r4
   39dd0:	eb000aab 	bl	3c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39dd4:	e59f1224 	ldr	r1, [pc, #548]	; 3a000 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4ac>
   39dd8:	e1a00004 	mov	r0, r4
   39ddc:	eb000a99 	bl	3c848 <Display::consolePut(char const*)>
   39de0:	e3590003 	cmp	r9, #3
   39de4:	908bb109 	addls	fp, fp, r9, lsl #2
   39de8:	959b1020 	ldrls	r1, [fp, #32]
   39dec:	859f1210 	ldrhi	r1, [pc, #528]	; 3a004 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4b0>
   39df0:	e1a00004 	mov	r0, r4
   39df4:	eb000a93 	bl	3c848 <Display::consolePut(char const*)>
   39df8:	e1a00004 	mov	r0, r4
   39dfc:	e59f1204 	ldr	r1, [pc, #516]	; 3a008 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4b4>
   39e00:	eb000a90 	bl	3c848 <Display::consolePut(char const*)>
   39e04:	e1a00004 	mov	r0, r4
   39e08:	e59f11fc 	ldr	r1, [pc, #508]	; 3a00c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4b8>
   39e0c:	eb000a8d 	bl	3c848 <Display::consolePut(char const*)>
   39e10:	e1a00004 	mov	r0, r4
   39e14:	e59f11f4 	ldr	r1, [pc, #500]	; 3a010 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4bc>
   39e18:	eb000a8a 	bl	3c848 <Display::consolePut(char const*)>
   39e1c:	e1a00004 	mov	r0, r4
   39e20:	e59f11ec 	ldr	r1, [pc, #492]	; 3a014 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4c0>
   39e24:	eb000a87 	bl	3c848 <Display::consolePut(char const*)>
   39e28:	e1a00004 	mov	r0, r4
   39e2c:	e59f11e4 	ldr	r1, [pc, #484]	; 3a018 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4c4>
   39e30:	eb000a84 	bl	3c848 <Display::consolePut(char const*)>
   39e34:	e3a0100f 	mov	r1, #15
   39e38:	e1a00004 	mov	r0, r4
   39e3c:	eb000a90 	bl	3c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39e40:	e1a00005 	mov	r0, r5
   39e44:	ebff3e07 	bl	9668 <BusRaiderApp::selfTestHelperService()>
   39e48:	e1a00007 	mov	r0, r7
   39e4c:	e2888001 	add	r8, r8, #1
   39e50:	ebffe506 	bl	33270 <BusAccess::controlRelease()>
   39e54:	eaffffab 	b	39d08 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x1b4>
   39e58:	e59f11bc 	ldr	r1, [pc, #444]	; 3a01c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4c8>
   39e5c:	e1a00004 	mov	r0, r4
   39e60:	eb000a78 	bl	3c848 <Display::consolePut(char const*)>
   39e64:	ebffd031 	bl	2df30 <millis>
   39e68:	e1a00005 	mov	r0, r5
   39e6c:	ebff3dfd 	bl	9668 <BusRaiderApp::selfTestHelperService()>
   39e70:	e28d30f8 	add	r3, sp, #248	; 0xf8
   39e74:	e0833186 	add	r3, r3, r6, lsl #3
   39e78:	e513a0e8 	ldr	sl, [r3, #-232]	; 0xffffff18
   39e7c:	e51390e4 	ldr	r9, [r3, #-228]	; 0xffffff1c
   39e80:	e1a0100a 	mov	r1, sl
   39e84:	e1a02009 	mov	r2, r9
   39e88:	e1a00007 	mov	r0, r7
   39e8c:	eb001335 	bl	3eb68 <memTestDevice(BusAccess&, unsigned long, unsigned long)>
   39e90:	e2503000 	subs	r3, r0, #0
   39e94:	1a00001c 	bne	39f0c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x3b8>
   39e98:	e1a02009 	mov	r2, r9
   39e9c:	e1a0100a 	mov	r1, sl
   39ea0:	e1a00007 	mov	r0, r7
   39ea4:	eb0012bc 	bl	3e99c <memTestAddressBus(BusAccess&, unsigned long, unsigned long)>
   39ea8:	e2503000 	subs	r3, r0, #0
   39eac:	1a000029 	bne	39f58 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x404>
   39eb0:	e1a0100a 	mov	r1, sl
   39eb4:	e1a00007 	mov	r0, r7
   39eb8:	eb001296 	bl	3e918 <memTestDataBus(BusAccess&, unsigned long)>
   39ebc:	e250a000 	subs	sl, r0, #0
   39ec0:	128d9030 	addne	r9, sp, #48	; 0x30
   39ec4:	1a000039 	bne	39fb0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x45c>
   39ec8:	e1a00004 	mov	r0, r4
   39ecc:	e3a0100a 	mov	r1, #10
   39ed0:	eb000a6b 	bl	3c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39ed4:	e1a00004 	mov	r0, r4
   39ed8:	e59f1140 	ldr	r1, [pc, #320]	; 3a020 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4cc>
   39edc:	eb000a59 	bl	3c848 <Display::consolePut(char const*)>
   39ee0:	e1a00004 	mov	r0, r4
   39ee4:	e3a0100f 	mov	r1, #15
   39ee8:	eb000a65 	bl	3c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39eec:	e1a00005 	mov	r0, r5
   39ef0:	ebff3ddc 	bl	9668 <BusRaiderApp::selfTestHelperService()>
   39ef4:	eaffff7a 	b	39ce4 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x190>
   39ef8:	e3a0100a 	mov	r1, #10
   39efc:	e1a00004 	mov	r0, r4
   39f00:	eb000a5f 	bl	3c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39f04:	e59f1118 	ldr	r1, [pc, #280]	; 3a024 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4d0>
   39f08:	eaffff8c 	b	39d40 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x1ec>
   39f0c:	e3a01009 	mov	r1, #9
   39f10:	e1a00004 	mov	r0, r4
   39f14:	e28d9030 	add	r9, sp, #48	; 0x30
   39f18:	e58d300c 	str	r3, [sp, #12]
   39f1c:	eb000a58 	bl	3c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39f20:	e1a00009 	mov	r0, r9
   39f24:	e3a01064 	mov	r1, #100	; 0x64
   39f28:	e59d300c 	ldr	r3, [sp, #12]
   39f2c:	e59f20f4 	ldr	r2, [pc, #244]	; 3a028 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4d4>
   39f30:	ebffd0af 	bl	2e1f4 <snprintf>
   39f34:	e1a01009 	mov	r1, r9
   39f38:	e1a00004 	mov	r0, r4
   39f3c:	eb000a41 	bl	3c848 <Display::consolePut(char const*)>
   39f40:	e3a0100f 	mov	r1, #15
   39f44:	e1a00004 	mov	r0, r4
   39f48:	e2888001 	add	r8, r8, #1
   39f4c:	eb000a4c 	bl	3c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39f50:	e3a09007 	mov	r9, #7
   39f54:	eaffff1d 	b	39bd0 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x7c>
   39f58:	e3a01009 	mov	r1, #9
   39f5c:	e1a00004 	mov	r0, r4
   39f60:	e28d9030 	add	r9, sp, #48	; 0x30
   39f64:	e58d300c 	str	r3, [sp, #12]
   39f68:	eb000a45 	bl	3c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39f6c:	e59d300c 	ldr	r3, [sp, #12]
   39f70:	e59f20b4 	ldr	r2, [pc, #180]	; 3a02c <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4d8>
   39f74:	e3a01064 	mov	r1, #100	; 0x64
   39f78:	e1a00009 	mov	r0, r9
   39f7c:	ebffd09c 	bl	2e1f4 <snprintf>
   39f80:	e1a01009 	mov	r1, r9
   39f84:	e1a00004 	mov	r0, r4
   39f88:	eb000a2e 	bl	3c848 <Display::consolePut(char const*)>
   39f8c:	e3a0100f 	mov	r1, #15
   39f90:	e1a00004 	mov	r0, r4
   39f94:	eb000a3a 	bl	3c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39f98:	e1a0100a 	mov	r1, sl
   39f9c:	e1a00007 	mov	r0, r7
   39fa0:	eb00125c 	bl	3e918 <memTestDataBus(BusAccess&, unsigned long)>
   39fa4:	e250a000 	subs	sl, r0, #0
   39fa8:	e2888001 	add	r8, r8, #1
   39fac:	0affffe7 	beq	39f50 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x3fc>
   39fb0:	e3a01009 	mov	r1, #9
   39fb4:	e1a00004 	mov	r0, r4
   39fb8:	eb000a31 	bl	3c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>
   39fbc:	e1a0300a 	mov	r3, sl
   39fc0:	e59f2068 	ldr	r2, [pc, #104]	; 3a030 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x4dc>
   39fc4:	e3a01064 	mov	r1, #100	; 0x64
   39fc8:	e1a00009 	mov	r0, r9
   39fcc:	eaffffd7 	b	39f30 <selfTestMemory(BusRaiderApp*, Display&, BusAccess&)+0x3dc>
   39fd0:	00047488 	.word	0x00047488
   39fd4:	00047448 	.word	0x00047448
   39fd8:	00047498 	.word	0x00047498
   39fdc:	000474cc 	.word	0x000474cc
   39fe0:	000475e0 	.word	0x000475e0
   39fe4:	000186a0 	.word	0x000186a0
   39fe8:	00047660 	.word	0x00047660
   39fec:	000476d0 	.word	0x000476d0
   39ff0:	00047764 	.word	0x00047764
   39ff4:	00043f8c 	.word	0x00043f8c
   39ff8:	000477c0 	.word	0x000477c0
   39ffc:	000474f4 	.word	0x000474f4
   3a000:	00047530 	.word	0x00047530
   3a004:	00047478 	.word	0x00047478
   3a008:	0004754c 	.word	0x0004754c
   3a00c:	0004758c 	.word	0x0004758c
   3a010:	000475b4 	.word	0x000475b4
   3a014:	000475e4 	.word	0x000475e4
   3a018:	0004761c 	.word	0x0004761c
   3a01c:	000476b8 	.word	0x000476b8
   3a020:	00047758 	.word	0x00047758
   3a024:	000477a0 	.word	0x000477a0
   3a028:	000476e4 	.word	0x000476e4
   3a02c:	0004771c 	.word	0x0004771c
   3a030:	00047768 	.word	0x00047768

0003a034 <TermAnsi::~TermAnsi()>:
   3a034:	e92d4010 	push	{r4, lr}
   3a038:	e1a04000 	mov	r4, r0
   3a03c:	e59f300c 	ldr	r3, [pc, #12]	; 3a050 <TermAnsi::~TermAnsi()+0x1c>
   3a040:	e5803000 	str	r3, [r0]
   3a044:	eb0007b4 	bl	3bf1c <TermEmu::~TermEmu()>
   3a048:	e1a00004 	mov	r0, r4
   3a04c:	e8bd8010 	pop	{r4, pc}
   3a050:	0004781c 	.word	0x0004781c

0003a054 <TermAnsi::~TermAnsi()>:
   3a054:	e92d4010 	push	{r4, lr}
   3a058:	e1a04000 	mov	r4, r0
   3a05c:	e59f3018 	ldr	r3, [pc, #24]	; 3a07c <TermAnsi::~TermAnsi()+0x28>
   3a060:	e5803000 	str	r3, [r0]
   3a064:	eb0007ac 	bl	3bf1c <TermEmu::~TermEmu()>
   3a068:	e1a00004 	mov	r0, r4
   3a06c:	e59f100c 	ldr	r1, [pc, #12]	; 3a080 <TermAnsi::~TermAnsi()+0x2c>
   3a070:	ebffc40d 	bl	2b0ac <operator delete(void*, unsigned int)>
   3a074:	e1a00004 	mov	r0, r4
   3a078:	e8bd8010 	pop	{r4, pc}
   3a07c:	0004781c 	.word	0x0004781c
   3a080:	000008ac 	.word	0x000008ac

0003a084 <TermAnsi::TermAnsi()>:
   3a084:	e92d4010 	push	{r4, lr}
   3a088:	e1a04000 	mov	r4, r0
   3a08c:	eb0007e4 	bl	3c024 <TermEmu::TermEmu()>
   3a090:	e1a03004 	mov	r3, r4
   3a094:	e3a01020 	mov	r1, #32
   3a098:	e3a0000f 	mov	r0, #15
   3a09c:	e3a02000 	mov	r2, #0
   3a0a0:	e59fe06c 	ldr	lr, [pc, #108]	; 3a114 <TermAnsi::TermAnsi()+0x90>
   3a0a4:	e284ce82 	add	ip, r4, #2080	; 0x820
   3a0a8:	e483e05c 	str	lr, [r3], #92	; 0x5c
   3a0ac:	e28cc00c 	add	ip, ip, #12
   3a0b0:	e5c31000 	strb	r1, [r3]
   3a0b4:	e5c30001 	strb	r0, [r3, #1]
   3a0b8:	e5c32002 	strb	r2, [r3, #2]
   3a0bc:	e5c32003 	strb	r2, [r3, #3]
   3a0c0:	e2833004 	add	r3, r3, #4
   3a0c4:	e153000c 	cmp	r3, ip
   3a0c8:	1afffff8 	bne	3a0b0 <TermAnsi::TermAnsi()+0x2c>
   3a0cc:	e3a0305f 	mov	r3, #95	; 0x5f
   3a0d0:	e5c40891 	strb	r0, [r4, #2193]	; 0x891
   3a0d4:	e5c40895 	strb	r0, [r4, #2197]	; 0x895
   3a0d8:	e5c41890 	strb	r1, [r4, #2192]	; 0x890
   3a0dc:	e5c42892 	strb	r2, [r4, #2194]	; 0x892
   3a0e0:	e5c42893 	strb	r2, [r4, #2195]	; 0x893
   3a0e4:	e5c41894 	strb	r1, [r4, #2196]	; 0x894
   3a0e8:	e5c42896 	strb	r2, [r4, #2198]	; 0x896
   3a0ec:	e5c42897 	strb	r2, [r4, #2199]	; 0x897
   3a0f0:	e5842898 	str	r2, [r4, #2200]	; 0x898
   3a0f4:	e584289c 	str	r2, [r4, #2204]	; 0x89c
   3a0f8:	e5c428a0 	strb	r2, [r4, #2208]	; 0x8a0
   3a0fc:	e5c428a1 	strb	r2, [r4, #2209]	; 0x8a1
   3a100:	e5c428a2 	strb	r2, [r4, #2210]	; 0x8a2
   3a104:	e58418a8 	str	r1, [r4, #2216]	; 0x8a8
   3a108:	e58438a4 	str	r3, [r4, #2212]	; 0x8a4
   3a10c:	e1a00004 	mov	r0, r4
   3a110:	e8bd8010 	pop	{r4, pc}
   3a114:	0004781c 	.word	0x0004781c

0003a118 <TermAnsi::fixcursor()>:
   3a118:	e590c010 	ldr	ip, [r0, #16]
   3a11c:	e5902018 	ldr	r2, [r0, #24]
   3a120:	e590100c 	ldr	r1, [r0, #12]
   3a124:	e5903014 	ldr	r3, [r0, #20]
   3a128:	e24cc001 	sub	ip, ip, #1
   3a12c:	e152000c 	cmp	r2, ip
   3a130:	e2411001 	sub	r1, r1, #1
   3a134:	21a0200c 	movcs	r2, ip
   3a138:	e1530001 	cmp	r3, r1
   3a13c:	21a03001 	movcs	r3, r1
   3a140:	e5802018 	str	r2, [r0, #24]
   3a144:	e5803014 	str	r3, [r0, #20]
   3a148:	e12fff1e 	bx	lr

0003a14c <TermAnsi::consumearg()>:
   3a14c:	e5903050 	ldr	r3, [r0, #80]	; 0x50
   3a150:	e3530007 	cmp	r3, #7
   3a154:	95902054 	ldrls	r2, [r0, #84]	; 0x54
   3a158:	92831001 	addls	r1, r3, #1
   3a15c:	9283300c 	addls	r3, r3, #12
   3a160:	95801050 	strls	r1, [r0, #80]	; 0x50
   3a164:	97802103 	strls	r2, [r0, r3, lsl #2]
   3a168:	e3a03000 	mov	r3, #0
   3a16c:	e5803054 	str	r3, [r0, #84]	; 0x54
   3a170:	e12fff1e 	bx	lr

0003a174 <TermAnsi::resetparser()>:
   3a174:	e92d4010 	push	{r4, lr}
   3a178:	e3a02020 	mov	r2, #32
   3a17c:	e1a04000 	mov	r4, r0
   3a180:	e3a01000 	mov	r1, #0
   3a184:	e2800030 	add	r0, r0, #48	; 0x30
   3a188:	ebffbf69 	bl	29f34 <memset>
   3a18c:	e3a03000 	mov	r3, #0
   3a190:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3a194:	e5843050 	str	r3, [r4, #80]	; 0x50
   3a198:	e5843054 	str	r3, [r4, #84]	; 0x54
   3a19c:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   3a1a0:	e8bd8010 	pop	{r4, pc}

0003a1a4 <TermAnsi::dirtylines(unsigned int, unsigned int)>:
   3a1a4:	e3a0c001 	mov	ip, #1
   3a1a8:	e1510002 	cmp	r1, r2
   3a1ac:	e5c0c01c 	strb	ip, [r0, #28]
   3a1b0:	212fff1e 	bxcs	lr
   3a1b4:	e2813e82 	add	r3, r1, #2080	; 0x820
   3a1b8:	e2822e82 	add	r2, r2, #2080	; 0x820
   3a1bc:	e283300b 	add	r3, r3, #11
   3a1c0:	e282200b 	add	r2, r2, #11
   3a1c4:	e0803003 	add	r3, r0, r3
   3a1c8:	e0802002 	add	r2, r0, r2
   3a1cc:	e5e3c001 	strb	ip, [r3, #1]!
   3a1d0:	e1530002 	cmp	r3, r2
   3a1d4:	1afffffc 	bne	3a1cc <TermAnsi::dirtylines(unsigned int, unsigned int)+0x28>
   3a1d8:	e12fff1e 	bx	lr

0003a1dc <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>:
   3a1dc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3a1e0:	e3a0e001 	mov	lr, #1
   3a1e4:	e5c0e01c 	strb	lr, [r0, #28]
   3a1e8:	e3a0e001 	mov	lr, #1
   3a1ec:	e590c010 	ldr	ip, [r0, #16]
   3a1f0:	e15c0001 	cmp	ip, r1
   3a1f4:	924c1001 	subls	r1, ip, #1
   3a1f8:	e080c001 	add	ip, r0, r1
   3a1fc:	e1520003 	cmp	r2, r3
   3a200:	e5cce82c 	strb	lr, [ip, #2092]	; 0x82c
   3a204:	28bd80f0 	popcs	{r4, r5, r6, r7, pc}
   3a208:	e590c00c 	ldr	ip, [r0, #12]
   3a20c:	e152000c 	cmp	r2, ip
   3a210:	33a04000 	movcc	r4, #0
   3a214:	33a0600f 	movcc	r6, #15
   3a218:	33a05020 	movcc	r5, #32
   3a21c:	32807028 	addcc	r7, r0, #40	; 0x28
   3a220:	3a000003 	bcc	3a234 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x58>
   3a224:	ea000011 	b	3a270 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x94>
   3a228:	e590c00c 	ldr	ip, [r0, #12]
   3a22c:	e15c0002 	cmp	ip, r2
   3a230:	9a00000d 	bls	3a26c <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x90>
   3a234:	e02e219c 	mla	lr, ip, r1, r2
   3a238:	e590c008 	ldr	ip, [r0, #8]
   3a23c:	e2822001 	add	r2, r2, #1
   3a240:	e15e000c 	cmp	lr, ip
   3a244:	21a0c007 	movcs	ip, r7
   3a248:	3590c004 	ldrcc	ip, [r0, #4]
   3a24c:	308cc10e 	addcc	ip, ip, lr, lsl #2
   3a250:	e1530002 	cmp	r3, r2
   3a254:	e5cc4003 	strb	r4, [ip, #3]
   3a258:	e5cc6001 	strb	r6, [ip, #1]
   3a25c:	e5cc4002 	strb	r4, [ip, #2]
   3a260:	e5cc5000 	strb	r5, [ip]
   3a264:	1affffef 	bne	3a228 <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)+0x4c>
   3a268:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3a26c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3a270:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0003a274 <TermAnsi::clearlines(unsigned int, unsigned int)>:
   3a274:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3a278:	e0816002 	add	r6, r1, r2
   3a27c:	e1510006 	cmp	r1, r6
   3a280:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
   3a284:	e5903010 	ldr	r3, [r0, #16]
   3a288:	e1a04001 	mov	r4, r1
   3a28c:	e1510003 	cmp	r1, r3
   3a290:	e1a05000 	mov	r5, r0
   3a294:	33a07000 	movcc	r7, #0
   3a298:	3a000003 	bcc	3a2ac <TermAnsi::clearlines(unsigned int, unsigned int)+0x38>
   3a29c:	ea00000c 	b	3a2d4 <TermAnsi::clearlines(unsigned int, unsigned int)+0x60>
   3a2a0:	e5953010 	ldr	r3, [r5, #16]
   3a2a4:	e1530004 	cmp	r3, r4
   3a2a8:	9a000008 	bls	3a2d0 <TermAnsi::clearlines(unsigned int, unsigned int)+0x5c>
   3a2ac:	e1a01004 	mov	r1, r4
   3a2b0:	e595300c 	ldr	r3, [r5, #12]
   3a2b4:	e1a02007 	mov	r2, r7
   3a2b8:	e1a00005 	mov	r0, r5
   3a2bc:	e2844001 	add	r4, r4, #1
   3a2c0:	ebffffc5 	bl	3a1dc <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a2c4:	e1540006 	cmp	r4, r6
   3a2c8:	1afffff4 	bne	3a2a0 <TermAnsi::clearlines(unsigned int, unsigned int)+0x2c>
   3a2cc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3a2d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3a2d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0003a2d8 <TermAnsi::scrollUp(unsigned int, unsigned int)>:
   3a2d8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a2dc:	e1e07001 	mvn	r7, r1
   3a2e0:	e590c010 	ldr	ip, [r0, #16]
   3a2e4:	e5903004 	ldr	r3, [r0, #4]
   3a2e8:	e087700c 	add	r7, r7, ip
   3a2ec:	e1570002 	cmp	r7, r2
   3a2f0:	21a07002 	movcs	r7, r2
   3a2f4:	e3530000 	cmp	r3, #0
   3a2f8:	13570000 	cmpne	r7, #0
   3a2fc:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a300:	e590600c 	ldr	r6, [r0, #12]
   3a304:	e1a05000 	mov	r5, r0
   3a308:	e0060796 	mul	r6, r6, r7
   3a30c:	e376022e 	cmn	r6, #-536870910	; 0xe0000002
   3a310:	83e03000 	mvnhi	r3, #0
   3a314:	91a03106 	lslls	r3, r6, #2
   3a318:	e1a00003 	mov	r0, r3
   3a31c:	e1a04001 	mov	r4, r1
   3a320:	ebffc354 	bl	2b078 <operator new[](unsigned int)>
   3a324:	e2562001 	subs	r2, r6, #1
   3a328:	e1a08000 	mov	r8, r0
   3a32c:	51a03000 	movpl	r3, r0
   3a330:	53a0c020 	movpl	ip, #32
   3a334:	53a0000f 	movpl	r0, #15
   3a338:	53a01000 	movpl	r1, #0
   3a33c:	4a000007 	bmi	3a360 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x88>
   3a340:	e2422001 	sub	r2, r2, #1
   3a344:	e3720001 	cmn	r2, #1
   3a348:	e5c3c000 	strb	ip, [r3]
   3a34c:	e5c30001 	strb	r0, [r3, #1]
   3a350:	e5c31002 	strb	r1, [r3, #2]
   3a354:	e5c31003 	strb	r1, [r3, #3]
   3a358:	e2833004 	add	r3, r3, #4
   3a35c:	1afffff7 	bne	3a340 <TermAnsi::scrollUp(unsigned int, unsigned int)+0x68>
   3a360:	e595300c 	ldr	r3, [r5, #12]
   3a364:	e5951004 	ldr	r1, [r5, #4]
   3a368:	e1a06103 	lsl	r6, r3, #2
   3a36c:	e0060697 	mul	r6, r7, r6
   3a370:	e1a09104 	lsl	r9, r4, #2
   3a374:	e0211399 	mla	r1, r9, r3, r1
   3a378:	e1a02006 	mov	r2, r6
   3a37c:	e1a00008 	mov	r0, r8
   3a380:	ebffc162 	bl	2a910 <memcpy>
   3a384:	e5952010 	ldr	r2, [r5, #16]
   3a388:	e595000c 	ldr	r0, [r5, #12]
   3a38c:	e5953004 	ldr	r3, [r5, #4]
   3a390:	e0422007 	sub	r2, r2, r7
   3a394:	e084c007 	add	ip, r4, r7
   3a398:	e1a01100 	lsl	r1, r0, #2
   3a39c:	e0422004 	sub	r2, r2, r4
   3a3a0:	e0020291 	mul	r2, r1, r2
   3a3a4:	e0203099 	mla	r0, r9, r0, r3
   3a3a8:	e0213c91 	mla	r1, r1, ip, r3
   3a3ac:	ebffbf0d 	bl	29fe8 <memmove>
   3a3b0:	e5953010 	ldr	r3, [r5, #16]
   3a3b4:	e595100c 	ldr	r1, [r5, #12]
   3a3b8:	e5950004 	ldr	r0, [r5, #4]
   3a3bc:	e0433007 	sub	r3, r3, r7
   3a3c0:	e1a01101 	lsl	r1, r1, #2
   3a3c4:	e0200391 	mla	r0, r1, r3, r0
   3a3c8:	e1a02006 	mov	r2, r6
   3a3cc:	e1a01008 	mov	r1, r8
   3a3d0:	ebffc14e 	bl	2a910 <memcpy>
   3a3d4:	e1a00008 	mov	r0, r8
   3a3d8:	ebffc32d 	bl	2b094 <operator delete[](void*)>
   3a3dc:	e5951010 	ldr	r1, [r5, #16]
   3a3e0:	e1a02007 	mov	r2, r7
   3a3e4:	e0411007 	sub	r1, r1, r7
   3a3e8:	e1a00005 	mov	r0, r5
   3a3ec:	ebffffa0 	bl	3a274 <TermAnsi::clearlines(unsigned int, unsigned int)>
   3a3f0:	e3a01001 	mov	r1, #1
   3a3f4:	e5952010 	ldr	r2, [r5, #16]
   3a3f8:	e5c5101c 	strb	r1, [r5, #28]
   3a3fc:	e1540002 	cmp	r4, r2
   3a400:	2a000009 	bcs	3a42c <TermAnsi::scrollUp(unsigned int, unsigned int)+0x154>
   3a404:	e2843e82 	add	r3, r4, #2080	; 0x820
   3a408:	e2822e82 	add	r2, r2, #2080	; 0x820
   3a40c:	e283300b 	add	r3, r3, #11
   3a410:	e282200b 	add	r2, r2, #11
   3a414:	e0853003 	add	r3, r5, r3
   3a418:	e0852002 	add	r2, r5, r2
   3a41c:	e5e31001 	strb	r1, [r3, #1]!
   3a420:	e1520003 	cmp	r2, r3
   3a424:	1afffffc 	bne	3a41c <TermAnsi::scrollUp(unsigned int, unsigned int)+0x144>
   3a428:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a42c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003a430 <TermAnsi::writeCharAtCurs(int)>:
   3a430:	e92d4010 	push	{r4, lr}
   3a434:	e1a04000 	mov	r4, r0
   3a438:	e5903018 	ldr	r3, [r0, #24]
   3a43c:	e590c00c 	ldr	ip, [r0, #12]
   3a440:	e5902014 	ldr	r2, [r0, #20]
   3a444:	e5900008 	ldr	r0, [r0, #8]
   3a448:	e022239c 	mla	r2, ip, r3, r2
   3a44c:	e1520000 	cmp	r2, r0
   3a450:	35943004 	ldrcc	r3, [r4, #4]
   3a454:	22843028 	addcs	r3, r4, #40	; 0x28
   3a458:	30833102 	addcc	r3, r3, r2, lsl #2
   3a45c:	e5c31000 	strb	r1, [r3]
   3a460:	e5d42892 	ldrb	r2, [r4, #2194]	; 0x892
   3a464:	e3a00001 	mov	r0, #1
   3a468:	e5c32002 	strb	r2, [r3, #2]
   3a46c:	e5d42891 	ldrb	r2, [r4, #2193]	; 0x891
   3a470:	e5c32001 	strb	r2, [r3, #1]
   3a474:	e5d42893 	ldrb	r2, [r4, #2195]	; 0x893
   3a478:	e5c32003 	strb	r2, [r3, #3]
   3a47c:	e594300c 	ldr	r3, [r4, #12]
   3a480:	e5942014 	ldr	r2, [r4, #20]
   3a484:	e2433001 	sub	r3, r3, #1
   3a488:	e1520003 	cmp	r2, r3
   3a48c:	23a02000 	movcs	r2, #0
   3a490:	e5943018 	ldr	r3, [r4, #24]
   3a494:	30822000 	addcc	r2, r2, r0
   3a498:	e5842014 	str	r2, [r4, #20]
   3a49c:	e5942010 	ldr	r2, [r4, #16]
   3a4a0:	22833001 	addcs	r3, r3, #1
   3a4a4:	25843018 	strcs	r3, [r4, #24]
   3a4a8:	e1520003 	cmp	r2, r3
   3a4ac:	e5c4001c 	strb	r0, [r4, #28]
   3a4b0:	8a000005 	bhi	3a4cc <TermAnsi::writeCharAtCurs(int)+0x9c>
   3a4b4:	e2422001 	sub	r2, r2, #1
   3a4b8:	e5842018 	str	r2, [r4, #24]
   3a4bc:	e3a01000 	mov	r1, #0
   3a4c0:	e3a02001 	mov	r2, #1
   3a4c4:	e1a00004 	mov	r0, r4
   3a4c8:	ebffff82 	bl	3a2d8 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3a4cc:	e3a03001 	mov	r3, #1
   3a4d0:	e5c4301c 	strb	r3, [r4, #28]
   3a4d4:	e8bd8010 	pop	{r4, pc}

0003a4d8 <TermAnsi::scrollDown(unsigned int, unsigned int)>:
   3a4d8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a4dc:	e1e07001 	mvn	r7, r1
   3a4e0:	e590c010 	ldr	ip, [r0, #16]
   3a4e4:	e5903004 	ldr	r3, [r0, #4]
   3a4e8:	e087700c 	add	r7, r7, ip
   3a4ec:	e1570002 	cmp	r7, r2
   3a4f0:	21a07002 	movcs	r7, r2
   3a4f4:	e3530000 	cmp	r3, #0
   3a4f8:	13570000 	cmpne	r7, #0
   3a4fc:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a500:	e590600c 	ldr	r6, [r0, #12]
   3a504:	e1a05000 	mov	r5, r0
   3a508:	e0060796 	mul	r6, r6, r7
   3a50c:	e376022e 	cmn	r6, #-536870910	; 0xe0000002
   3a510:	83e03000 	mvnhi	r3, #0
   3a514:	91a03106 	lslls	r3, r6, #2
   3a518:	e1a00003 	mov	r0, r3
   3a51c:	e1a04001 	mov	r4, r1
   3a520:	ebffc2d4 	bl	2b078 <operator new[](unsigned int)>
   3a524:	e2562001 	subs	r2, r6, #1
   3a528:	e1a08000 	mov	r8, r0
   3a52c:	51a03000 	movpl	r3, r0
   3a530:	53a0c020 	movpl	ip, #32
   3a534:	53a0000f 	movpl	r0, #15
   3a538:	53a01000 	movpl	r1, #0
   3a53c:	4a000007 	bmi	3a560 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x88>
   3a540:	e2422001 	sub	r2, r2, #1
   3a544:	e3720001 	cmn	r2, #1
   3a548:	e5c3c000 	strb	ip, [r3]
   3a54c:	e5c30001 	strb	r0, [r3, #1]
   3a550:	e5c31002 	strb	r1, [r3, #2]
   3a554:	e5c31003 	strb	r1, [r3, #3]
   3a558:	e2833004 	add	r3, r3, #4
   3a55c:	1afffff7 	bne	3a540 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x68>
   3a560:	e595300c 	ldr	r3, [r5, #12]
   3a564:	e5952010 	ldr	r2, [r5, #16]
   3a568:	e1a03103 	lsl	r3, r3, #2
   3a56c:	e0090793 	mul	r9, r3, r7
   3a570:	e5951004 	ldr	r1, [r5, #4]
   3a574:	e0422007 	sub	r2, r2, r7
   3a578:	e0211293 	mla	r1, r3, r2, r1
   3a57c:	e1a00008 	mov	r0, r8
   3a580:	e1a02009 	mov	r2, r9
   3a584:	ebffc0e1 	bl	2a910 <memcpy>
   3a588:	e5952010 	ldr	r2, [r5, #16]
   3a58c:	e595100c 	ldr	r1, [r5, #12]
   3a590:	e5953004 	ldr	r3, [r5, #4]
   3a594:	e0422007 	sub	r2, r2, r7
   3a598:	e084c007 	add	ip, r4, r7
   3a59c:	e1a00101 	lsl	r0, r1, #2
   3a5a0:	e1a06104 	lsl	r6, r4, #2
   3a5a4:	e0422004 	sub	r2, r2, r4
   3a5a8:	e0020290 	mul	r2, r0, r2
   3a5ac:	e0213691 	mla	r1, r1, r6, r3
   3a5b0:	e0203c90 	mla	r0, r0, ip, r3
   3a5b4:	ebffbe8b 	bl	29fe8 <memmove>
   3a5b8:	e5953004 	ldr	r3, [r5, #4]
   3a5bc:	e595000c 	ldr	r0, [r5, #12]
   3a5c0:	e1a02009 	mov	r2, r9
   3a5c4:	e0203690 	mla	r0, r0, r6, r3
   3a5c8:	e1a01008 	mov	r1, r8
   3a5cc:	ebffc0cf 	bl	2a910 <memcpy>
   3a5d0:	e1a00008 	mov	r0, r8
   3a5d4:	ebffc2ae 	bl	2b094 <operator delete[](void*)>
   3a5d8:	e1a02007 	mov	r2, r7
   3a5dc:	e1a01004 	mov	r1, r4
   3a5e0:	e1a00005 	mov	r0, r5
   3a5e4:	ebffff22 	bl	3a274 <TermAnsi::clearlines(unsigned int, unsigned int)>
   3a5e8:	e3a01001 	mov	r1, #1
   3a5ec:	e5952010 	ldr	r2, [r5, #16]
   3a5f0:	e5c5101c 	strb	r1, [r5, #28]
   3a5f4:	e1540002 	cmp	r4, r2
   3a5f8:	2a000009 	bcs	3a624 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x14c>
   3a5fc:	e2843e82 	add	r3, r4, #2080	; 0x820
   3a600:	e2822e82 	add	r2, r2, #2080	; 0x820
   3a604:	e283300b 	add	r3, r3, #11
   3a608:	e282200b 	add	r2, r2, #11
   3a60c:	e0853003 	add	r3, r5, r3
   3a610:	e0852002 	add	r2, r5, r2
   3a614:	e5e31001 	strb	r1, [r3, #1]!
   3a618:	e1520003 	cmp	r2, r3
   3a61c:	1afffffc 	bne	3a614 <TermAnsi::scrollDown(unsigned int, unsigned int)+0x13c>
   3a620:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a624:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003a628 <TermAnsi::ed()>:
   3a628:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3a62c:	e92d4070 	push	{r4, r5, r6, lr}
   3a630:	e3530001 	cmp	r3, #1
   3a634:	e1a04000 	mov	r4, r0
   3a638:	e5906010 	ldr	r6, [r0, #16]
   3a63c:	0a000010 	beq	3a684 <TermAnsi::ed()+0x5c>
   3a640:	3a000008 	bcc	3a668 <TermAnsi::ed()+0x40>
   3a644:	e3530002 	cmp	r3, #2
   3a648:	1a000005 	bne	3a664 <TermAnsi::ed()+0x3c>
   3a64c:	e3a05000 	mov	r5, #0
   3a650:	e0462005 	sub	r2, r6, r5
   3a654:	e1a01005 	mov	r1, r5
   3a658:	e1a00004 	mov	r0, r4
   3a65c:	e8bd4070 	pop	{r4, r5, r6, lr}
   3a660:	eaffff03 	b	3a274 <TermAnsi::clearlines(unsigned int, unsigned int)>
   3a664:	e8bd8070 	pop	{r4, r5, r6, pc}
   3a668:	e5905018 	ldr	r5, [r0, #24]
   3a66c:	e590300c 	ldr	r3, [r0, #12]
   3a670:	e1a01005 	mov	r1, r5
   3a674:	e5902014 	ldr	r2, [r0, #20]
   3a678:	e2855001 	add	r5, r5, #1
   3a67c:	ebfffed6 	bl	3a1dc <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a680:	eafffff2 	b	3a650 <TermAnsi::ed()+0x28>
   3a684:	e3a02000 	mov	r2, #0
   3a688:	e5906018 	ldr	r6, [r0, #24]
   3a68c:	e5903014 	ldr	r3, [r0, #20]
   3a690:	e1a01006 	mov	r1, r6
   3a694:	e1a05002 	mov	r5, r2
   3a698:	e2466001 	sub	r6, r6, #1
   3a69c:	ebfffece 	bl	3a1dc <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a6a0:	eaffffea 	b	3a650 <TermAnsi::ed()+0x28>

0003a6a4 <TermAnsi::el()>:
   3a6a4:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3a6a8:	e3530001 	cmp	r3, #1
   3a6ac:	0a00000b 	beq	3a6e0 <TermAnsi::el()+0x3c>
   3a6b0:	3a000006 	bcc	3a6d0 <TermAnsi::el()+0x2c>
   3a6b4:	e3530002 	cmp	r3, #2
   3a6b8:	1a000003 	bne	3a6cc <TermAnsi::el()+0x28>
   3a6bc:	e590300c 	ldr	r3, [r0, #12]
   3a6c0:	e5901018 	ldr	r1, [r0, #24]
   3a6c4:	e3a02000 	mov	r2, #0
   3a6c8:	eafffec3 	b	3a1dc <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a6cc:	e12fff1e 	bx	lr
   3a6d0:	e590300c 	ldr	r3, [r0, #12]
   3a6d4:	e5902014 	ldr	r2, [r0, #20]
   3a6d8:	e5901018 	ldr	r1, [r0, #24]
   3a6dc:	eafffebe 	b	3a1dc <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3a6e0:	e590200c 	ldr	r2, [r0, #12]
   3a6e4:	e5903014 	ldr	r3, [r0, #20]
   3a6e8:	e2422001 	sub	r2, r2, #1
   3a6ec:	e2833001 	add	r3, r3, #1
   3a6f0:	e1520003 	cmp	r2, r3
   3a6f4:	31a03002 	movcc	r3, r2
   3a6f8:	e5901018 	ldr	r1, [r0, #24]
   3a6fc:	e3a02000 	mov	r2, #0
   3a700:	eafffeb5 	b	3a1dc <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

0003a704 <TermAnsi::dch()>:
   3a704:	e92d4070 	push	{r4, r5, r6, lr}
   3a708:	e590e004 	ldr	lr, [r0, #4]
   3a70c:	e35e0000 	cmp	lr, #0
   3a710:	08bd8070 	popeq	{r4, r5, r6, pc}
   3a714:	e590c030 	ldr	ip, [r0, #48]	; 0x30
   3a718:	e1a04000 	mov	r4, r0
   3a71c:	e35c0000 	cmp	ip, #0
   3a720:	03a0c001 	moveq	ip, #1
   3a724:	e590300c 	ldr	r3, [r0, #12]
   3a728:	e5900014 	ldr	r0, [r0, #20]
   3a72c:	e1a06103 	lsl	r6, r3, #2
   3a730:	e0431000 	sub	r1, r3, r0
   3a734:	e15c0001 	cmp	ip, r1
   3a738:	31a0500c 	movcc	r5, ip
   3a73c:	21a05001 	movcs	r5, r1
   3a740:	e594c018 	ldr	ip, [r4, #24]
   3a744:	e0412005 	sub	r2, r1, r5
   3a748:	e020039c 	mla	r0, ip, r3, r0
   3a74c:	e0801005 	add	r1, r0, r5
   3a750:	e0020296 	mul	r2, r6, r2
   3a754:	e08e1101 	add	r1, lr, r1, lsl #2
   3a758:	e08e0100 	add	r0, lr, r0, lsl #2
   3a75c:	ebffbe21 	bl	29fe8 <memmove>
   3a760:	e594200c 	ldr	r2, [r4, #12]
   3a764:	e5941014 	ldr	r1, [r4, #20]
   3a768:	e1a03002 	mov	r3, r2
   3a76c:	e0422001 	sub	r2, r2, r1
   3a770:	e0422005 	sub	r2, r2, r5
   3a774:	e5941018 	ldr	r1, [r4, #24]
   3a778:	e1a00004 	mov	r0, r4
   3a77c:	e8bd4070 	pop	{r4, r5, r6, lr}
   3a780:	eafffe95 	b	3a1dc <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

0003a784 <TermAnsi::ich()>:
   3a784:	e92d4070 	push	{r4, r5, r6, lr}
   3a788:	e590e004 	ldr	lr, [r0, #4]
   3a78c:	e35e0000 	cmp	lr, #0
   3a790:	08bd8070 	popeq	{r4, r5, r6, pc}
   3a794:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3a798:	e590200c 	ldr	r2, [r0, #12]
   3a79c:	e3530000 	cmp	r3, #0
   3a7a0:	03a03001 	moveq	r3, #1
   3a7a4:	e5901014 	ldr	r1, [r0, #20]
   3a7a8:	e1a04000 	mov	r4, r0
   3a7ac:	e590c018 	ldr	ip, [r0, #24]
   3a7b0:	e0420001 	sub	r0, r2, r1
   3a7b4:	e2405001 	sub	r5, r0, #1
   3a7b8:	e1550003 	cmp	r5, r3
   3a7bc:	21a05003 	movcs	r5, r3
   3a7c0:	e2400107 	sub	r0, r0, #-1073741823	; 0xc0000001
   3a7c4:	e0403005 	sub	r3, r0, r5
   3a7c8:	e1a03103 	lsl	r3, r3, #2
   3a7cc:	e1a00100 	lsl	r0, r0, #2
   3a7d0:	e1530000 	cmp	r3, r0
   3a7d4:	21a03000 	movcs	r3, r0
   3a7d8:	e021129c 	mla	r1, ip, r2, r1
   3a7dc:	e0810005 	add	r0, r1, r5
   3a7e0:	e0020392 	mul	r2, r2, r3
   3a7e4:	e08e1101 	add	r1, lr, r1, lsl #2
   3a7e8:	e08e0100 	add	r0, lr, r0, lsl #2
   3a7ec:	ebffbdfd 	bl	29fe8 <memmove>
   3a7f0:	e1a03005 	mov	r3, r5
   3a7f4:	e5942014 	ldr	r2, [r4, #20]
   3a7f8:	e5941018 	ldr	r1, [r4, #24]
   3a7fc:	e1a00004 	mov	r0, r4
   3a800:	e8bd4070 	pop	{r4, r5, r6, lr}
   3a804:	eafffe74 	b	3a1dc <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>

0003a808 <TermAnsi::rep()>:
   3a808:	e5902014 	ldr	r2, [r0, #20]
   3a80c:	e3520000 	cmp	r2, #0
   3a810:	012fff1e 	bxeq	lr
   3a814:	e92d4070 	push	{r4, r5, r6, lr}
   3a818:	e1a05000 	mov	r5, r0
   3a81c:	e3a04000 	mov	r4, #0
   3a820:	e5903018 	ldr	r3, [r0, #24]
   3a824:	e590000c 	ldr	r0, [r0, #12]
   3a828:	e5951004 	ldr	r1, [r5, #4]
   3a82c:	e0232390 	mla	r3, r0, r3, r2
   3a830:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   3a834:	e7d16103 	ldrb	r6, [r1, r3, lsl #2]
   3a838:	e5953030 	ldr	r3, [r5, #48]	; 0x30
   3a83c:	e3530000 	cmp	r3, #0
   3a840:	03a03001 	moveq	r3, #1
   3a844:	e1540003 	cmp	r4, r3
   3a848:	28bd8070 	popcs	{r4, r5, r6, pc}
   3a84c:	e1a01006 	mov	r1, r6
   3a850:	e1a00005 	mov	r0, r5
   3a854:	e2844001 	add	r4, r4, #1
   3a858:	ebfffef4 	bl	3a430 <TermAnsi::writeCharAtCurs(int)>
   3a85c:	eafffff5 	b	3a838 <TermAnsi::rep()+0x30>

0003a860 <TermAnsi::sgr()>:
   3a860:	e590c050 	ldr	ip, [r0, #80]	; 0x50
   3a864:	e35c0000 	cmp	ip, #0
   3a868:	0a00004d 	beq	3a9a4 <TermAnsi::sgr()+0x144>
   3a86c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a870:	e590e030 	ldr	lr, [r0, #48]	; 0x30
   3a874:	e24e301e 	sub	r3, lr, #30
   3a878:	e3530012 	cmp	r3, #18
   3a87c:	9a00004b 	bls	3a9b0 <TermAnsi::sgr()+0x150>
   3a880:	e35e0013 	cmp	lr, #19
   3a884:	93a0a020 	movls	sl, #32
   3a888:	83a0a000 	movhi	sl, #0
   3a88c:	93a09010 	movls	r9, #16
   3a890:	83a09000 	movhi	r9, #0
   3a894:	93a08008 	movls	r8, #8
   3a898:	83a08000 	movhi	r8, #0
   3a89c:	93a07004 	movls	r7, #4
   3a8a0:	83a07000 	movhi	r7, #0
   3a8a4:	93a06002 	movls	r6, #2
   3a8a8:	83a06000 	movhi	r6, #0
   3a8ac:	e1a0300e 	mov	r3, lr
   3a8b0:	e3a0500f 	mov	r5, #15
   3a8b4:	e3a04000 	mov	r4, #0
   3a8b8:	e28cc00c 	add	ip, ip, #12
   3a8bc:	e5d01893 	ldrb	r1, [r0, #2195]	; 0x893
   3a8c0:	e080c10c 	add	ip, r0, ip, lsl #2
   3a8c4:	e2802034 	add	r2, r0, #52	; 0x34
   3a8c8:	e353001c 	cmp	r3, #28
   3a8cc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3a8d0:	ea00001d 	b	3a94c <TermAnsi::sgr()+0xec>
   3a8d4:	0003a984 	.word	0x0003a984
   3a8d8:	0003a978 	.word	0x0003a978
   3a8dc:	0003a99c 	.word	0x0003a99c
   3a8e0:	0003a94c 	.word	0x0003a94c
   3a8e4:	0003a994 	.word	0x0003a994
   3a8e8:	0003a970 	.word	0x0003a970
   3a8ec:	0003a94c 	.word	0x0003a94c
   3a8f0:	0003a95c 	.word	0x0003a95c
   3a8f4:	0003a948 	.word	0x0003a948
   3a8f8:	0003a94c 	.word	0x0003a94c
   3a8fc:	0003a94c 	.word	0x0003a94c
   3a900:	0003a94c 	.word	0x0003a94c
   3a904:	0003a94c 	.word	0x0003a94c
   3a908:	0003a94c 	.word	0x0003a94c
   3a90c:	0003a94c 	.word	0x0003a94c
   3a910:	0003a94c 	.word	0x0003a94c
   3a914:	0003a94c 	.word	0x0003a94c
   3a918:	0003a94c 	.word	0x0003a94c
   3a91c:	0003a94c 	.word	0x0003a94c
   3a920:	0003a94c 	.word	0x0003a94c
   3a924:	0003a94c 	.word	0x0003a94c
   3a928:	0003a94c 	.word	0x0003a94c
   3a92c:	0003a978 	.word	0x0003a978
   3a930:	0003a99c 	.word	0x0003a99c
   3a934:	0003a994 	.word	0x0003a994
   3a938:	0003a970 	.word	0x0003a970
   3a93c:	0003a94c 	.word	0x0003a94c
   3a940:	0003a95c 	.word	0x0003a95c
   3a944:	0003a948 	.word	0x0003a948
   3a948:	e18a1001 	orr	r1, sl, r1
   3a94c:	e152000c 	cmp	r2, ip
   3a950:	0a000004 	beq	3a968 <TermAnsi::sgr()+0x108>
   3a954:	e4923004 	ldr	r3, [r2], #4
   3a958:	eaffffda 	b	3a8c8 <TermAnsi::sgr()+0x68>
   3a95c:	e152000c 	cmp	r2, ip
   3a960:	e1891001 	orr	r1, r9, r1
   3a964:	1afffffa 	bne	3a954 <TermAnsi::sgr()+0xf4>
   3a968:	e5c01893 	strb	r1, [r0, #2195]	; 0x893
   3a96c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a970:	e1881001 	orr	r1, r8, r1
   3a974:	eafffff4 	b	3a94c <TermAnsi::sgr()+0xec>
   3a978:	e35e0013 	cmp	lr, #19
   3a97c:	93811001 	orrls	r1, r1, #1
   3a980:	eafffff1 	b	3a94c <TermAnsi::sgr()+0xec>
   3a984:	e5c05891 	strb	r5, [r0, #2193]	; 0x891
   3a988:	e5c04892 	strb	r4, [r0, #2194]	; 0x892
   3a98c:	e3a01000 	mov	r1, #0
   3a990:	eaffffed 	b	3a94c <TermAnsi::sgr()+0xec>
   3a994:	e1871001 	orr	r1, r7, r1
   3a998:	eaffffeb 	b	3a94c <TermAnsi::sgr()+0xec>
   3a99c:	e1861001 	orr	r1, r6, r1
   3a9a0:	eaffffe9 	b	3a94c <TermAnsi::sgr()+0xec>
   3a9a4:	e5d01893 	ldrb	r1, [r0, #2195]	; 0x893
   3a9a8:	e5c01893 	strb	r1, [r0, #2195]	; 0x893
   3a9ac:	e12fff1e 	bx	lr
   3a9b0:	e35c0001 	cmp	ip, #1
   3a9b4:	0a00000d 	beq	3a9f0 <TermAnsi::sgr()+0x190>
   3a9b8:	e35c0002 	cmp	ip, #2
   3a9bc:	0a000016 	beq	3aa1c <TermAnsi::sgr()+0x1bc>
   3a9c0:	e35c0003 	cmp	ip, #3
   3a9c4:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a9c8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
   3a9cc:	e3530005 	cmp	r3, #5
   3a9d0:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a9d4:	e2803e89 	add	r3, r0, #2192	; 0x890
   3a9d8:	e35e0027 	cmp	lr, #39	; 0x27
   3a9dc:	e5902038 	ldr	r2, [r0, #56]	; 0x38
   3a9e0:	92833001 	addls	r3, r3, #1
   3a9e4:	82833002 	addhi	r3, r3, #2
   3a9e8:	e5c32000 	strb	r2, [r3]
   3a9ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a9f0:	e59f2060 	ldr	r2, [pc, #96]	; 3aa58 <TermAnsi::sgr()+0x1f8>
   3a9f4:	e2801e89 	add	r1, r0, #2192	; 0x890
   3a9f8:	e0820392 	umull	r0, r2, r2, r3
   3a9fc:	e1a021a2 	lsr	r2, r2, #3
   3aa00:	e35e0027 	cmp	lr, #39	; 0x27
   3aa04:	e0822102 	add	r2, r2, r2, lsl #2
   3aa08:	92811001 	addls	r1, r1, #1
   3aa0c:	82811002 	addhi	r1, r1, #2
   3aa10:	e0433082 	sub	r3, r3, r2, lsl #1
   3aa14:	e5c13000 	strb	r3, [r1]
   3aa18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3aa1c:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   3aa20:	e3520001 	cmp	r2, #1
   3aa24:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   3aa28:	e59f2028 	ldr	r2, [pc, #40]	; 3aa58 <TermAnsi::sgr()+0x1f8>
   3aa2c:	e2801e89 	add	r1, r0, #2192	; 0x890
   3aa30:	e0820392 	umull	r0, r2, r2, r3
   3aa34:	e1a021a2 	lsr	r2, r2, #3
   3aa38:	e0822102 	add	r2, r2, r2, lsl #2
   3aa3c:	e35e0027 	cmp	lr, #39	; 0x27
   3aa40:	e0433082 	sub	r3, r3, r2, lsl #1
   3aa44:	92811001 	addls	r1, r1, #1
   3aa48:	82811002 	addhi	r1, r1, #2
   3aa4c:	e2833008 	add	r3, r3, #8
   3aa50:	e5c13000 	strb	r3, [r1]
   3aa54:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3aa58:	cccccccd 	.word	0xcccccccd

0003aa5c <TermAnsi::handleAnsiChar(unsigned char)>:
   3aa5c:	e3a03000 	mov	r3, #0
   3aa60:	e92d4070 	push	{r4, r5, r6, lr}
   3aa64:	e5d0602c 	ldrb	r6, [r0, #44]	; 0x2c
   3aa68:	e24dd008 	sub	sp, sp, #8
   3aa6c:	e1560003 	cmp	r6, r3
   3aa70:	e1cd30b4 	strh	r3, [sp, #4]
   3aa74:	e1a04000 	mov	r4, r0
   3aa78:	e1a05001 	mov	r5, r1
   3aa7c:	e5cd1004 	strb	r1, [sp, #4]
   3aa80:	0a00001d 	beq	3aafc <TermAnsi::handleAnsiChar(unsigned char)+0xa0>
   3aa84:	e3560001 	cmp	r6, #1
   3aa88:	0a000040 	beq	3ab90 <TermAnsi::handleAnsiChar(unsigned char)+0x134>
   3aa8c:	e3560002 	cmp	r6, #2
   3aa90:	0a0004a9 	beq	3bd3c <TermAnsi::handleAnsiChar(unsigned char)+0x12e0>
   3aa94:	e3560002 	cmp	r6, #2
   3aa98:	0a00042c 	beq	3bb50 <TermAnsi::handleAnsiChar(unsigned char)+0x10f4>
   3aa9c:	e3560002 	cmp	r6, #2
   3aaa0:	0a00035e 	beq	3b820 <TermAnsi::handleAnsiChar(unsigned char)+0xdc4>
   3aaa4:	e3560002 	cmp	r6, #2
   3aaa8:	0a0002ed 	beq	3b664 <TermAnsi::handleAnsiChar(unsigned char)+0xc08>
   3aaac:	e3560002 	cmp	r6, #2
   3aab0:	0a000280 	beq	3b4b8 <TermAnsi::handleAnsiChar(unsigned char)+0xa5c>
   3aab4:	e3560002 	cmp	r6, #2
   3aab8:	0a00020a 	beq	3b2e8 <TermAnsi::handleAnsiChar(unsigned char)+0x88c>
   3aabc:	e3560002 	cmp	r6, #2
   3aac0:	0a0001bc 	beq	3b1b8 <TermAnsi::handleAnsiChar(unsigned char)+0x75c>
   3aac4:	e3560002 	cmp	r6, #2
   3aac8:	0a00019b 	beq	3b13c <TermAnsi::handleAnsiChar(unsigned char)+0x6e0>
   3aacc:	e3560002 	cmp	r6, #2
   3aad0:	0a0000e9 	beq	3ae7c <TermAnsi::handleAnsiChar(unsigned char)+0x420>
   3aad4:	e3a02020 	mov	r2, #32
   3aad8:	e3a01000 	mov	r1, #0
   3aadc:	e2840030 	add	r0, r4, #48	; 0x30
   3aae0:	ebffbd13 	bl	29f34 <memset>
   3aae4:	e3a00000 	mov	r0, #0
   3aae8:	e5c4002c 	strb	r0, [r4, #44]	; 0x2c
   3aaec:	e5840050 	str	r0, [r4, #80]	; 0x50
   3aaf0:	e5840054 	str	r0, [r4, #84]	; 0x54
   3aaf4:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   3aaf8:	ea000022 	b	3ab88 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3aafc:	e59f0f9c 	ldr	r0, [pc, #3996]	; 3baa0 <TermAnsi::handleAnsiChar(unsigned char)+0x1044>
   3ab00:	ebffbe4a 	bl	2a430 <strchr>
   3ab04:	e3500000 	cmp	r0, #0
   3ab08:	0a000028 	beq	3abb0 <TermAnsi::handleAnsiChar(unsigned char)+0x154>
   3ab0c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ab10:	e3530007 	cmp	r3, #7
   3ab14:	8a000004 	bhi	3ab2c <TermAnsi::handleAnsiChar(unsigned char)+0xd0>
   3ab18:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3ab1c:	e2831001 	add	r1, r3, #1
   3ab20:	e283300c 	add	r3, r3, #12
   3ab24:	e5841050 	str	r1, [r4, #80]	; 0x50
   3ab28:	e7842103 	str	r2, [r4, r3, lsl #2]
   3ab2c:	e5940010 	ldr	r0, [r4, #16]
   3ab30:	e5942018 	ldr	r2, [r4, #24]
   3ab34:	e594100c 	ldr	r1, [r4, #12]
   3ab38:	e5943014 	ldr	r3, [r4, #20]
   3ab3c:	e2400001 	sub	r0, r0, #1
   3ab40:	e1520000 	cmp	r2, r0
   3ab44:	e2411001 	sub	r1, r1, #1
   3ab48:	21a02000 	movcs	r2, r0
   3ab4c:	e1530001 	cmp	r3, r1
   3ab50:	e3a05000 	mov	r5, #0
   3ab54:	21a03001 	movcs	r3, r1
   3ab58:	e5842018 	str	r2, [r4, #24]
   3ab5c:	e5843014 	str	r3, [r4, #20]
   3ab60:	e5845054 	str	r5, [r4, #84]	; 0x54
   3ab64:	e1a01005 	mov	r1, r5
   3ab68:	e3a02020 	mov	r2, #32
   3ab6c:	e2840030 	add	r0, r4, #48	; 0x30
   3ab70:	ebffbcef 	bl	29f34 <memset>
   3ab74:	e3a00001 	mov	r0, #1
   3ab78:	e5c4502c 	strb	r5, [r4, #44]	; 0x2c
   3ab7c:	e5845050 	str	r5, [r4, #80]	; 0x50
   3ab80:	e5845054 	str	r5, [r4, #84]	; 0x54
   3ab84:	e5c45058 	strb	r5, [r4, #88]	; 0x58
   3ab88:	e28dd008 	add	sp, sp, #8
   3ab8c:	e8bd8070 	pop	{r4, r5, r6, pc}
   3ab90:	e1a01005 	mov	r1, r5
   3ab94:	e59f0fa4 	ldr	r0, [pc, #4004]	; 3bb40 <TermAnsi::handleAnsiChar(unsigned char)+0x10e4>
   3ab98:	ebffbe24 	bl	2a430 <strchr>
   3ab9c:	e3500000 	cmp	r0, #0
   3aba0:	0a0000f0 	beq	3af68 <TermAnsi::handleAnsiChar(unsigned char)+0x50c>
   3aba4:	e3a00001 	mov	r0, #1
   3aba8:	e5c4002c 	strb	r0, [r4, #44]	; 0x2c
   3abac:	eafffff5 	b	3ab88 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3abb0:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3abb4:	e3560000 	cmp	r6, #0
   3abb8:	1a0000a6 	bne	3ae58 <TermAnsi::handleAnsiChar(unsigned char)+0x3fc>
   3abbc:	e1a01005 	mov	r1, r5
   3abc0:	e59f0edc 	ldr	r0, [pc, #3804]	; 3baa4 <TermAnsi::handleAnsiChar(unsigned char)+0x1048>
   3abc4:	ebffbe19 	bl	2a430 <strchr>
   3abc8:	e3500000 	cmp	r0, #0
   3abcc:	0a000026 	beq	3ac6c <TermAnsi::handleAnsiChar(unsigned char)+0x210>
   3abd0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3abd4:	e3530007 	cmp	r3, #7
   3abd8:	8a000004 	bhi	3abf0 <TermAnsi::handleAnsiChar(unsigned char)+0x194>
   3abdc:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3abe0:	e2831001 	add	r1, r3, #1
   3abe4:	e283300c 	add	r3, r3, #12
   3abe8:	e5841050 	str	r1, [r4, #80]	; 0x50
   3abec:	e7842103 	str	r2, [r4, r3, lsl #2]
   3abf0:	e3a02000 	mov	r2, #0
   3abf4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3abf8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3abfc:	e1530002 	cmp	r3, r2
   3ac00:	e5940014 	ldr	r0, [r4, #20]
   3ac04:	1a000001 	bne	3ac10 <TermAnsi::handleAnsiChar(unsigned char)+0x1b4>
   3ac08:	e3500000 	cmp	r0, #0
   3ac0c:	12400001 	subne	r0, r0, #1
   3ac10:	e5941010 	ldr	r1, [r4, #16]
   3ac14:	e5942018 	ldr	r2, [r4, #24]
   3ac18:	e594300c 	ldr	r3, [r4, #12]
   3ac1c:	e2411001 	sub	r1, r1, #1
   3ac20:	e1520001 	cmp	r2, r1
   3ac24:	e2433001 	sub	r3, r3, #1
   3ac28:	21a02001 	movcs	r2, r1
   3ac2c:	e1530000 	cmp	r3, r0
   3ac30:	21a03000 	movcs	r3, r0
   3ac34:	e5842018 	str	r2, [r4, #24]
   3ac38:	e5843014 	str	r3, [r4, #20]
   3ac3c:	e3a02020 	mov	r2, #32
   3ac40:	e3a01000 	mov	r1, #0
   3ac44:	e2840030 	add	r0, r4, #48	; 0x30
   3ac48:	ebffbcb9 	bl	29f34 <memset>
   3ac4c:	e3a03000 	mov	r3, #0
   3ac50:	e3a00001 	mov	r0, #1
   3ac54:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3ac58:	e5843050 	str	r3, [r4, #80]	; 0x50
   3ac5c:	e5843054 	str	r3, [r4, #84]	; 0x54
   3ac60:	e5c43058 	strb	r3, [r4, #88]	; 0x58
   3ac64:	e28dd008 	add	sp, sp, #8
   3ac68:	e8bd8070 	pop	{r4, r5, r6, pc}
   3ac6c:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3ac70:	e3560000 	cmp	r6, #0
   3ac74:	1affff82 	bne	3aa84 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3ac78:	e1a01005 	mov	r1, r5
   3ac7c:	e59f0e24 	ldr	r0, [pc, #3620]	; 3baa8 <TermAnsi::handleAnsiChar(unsigned char)+0x104c>
   3ac80:	ebffbdea 	bl	2a430 <strchr>
   3ac84:	e3500000 	cmp	r0, #0
   3ac88:	0a000024 	beq	3ad20 <TermAnsi::handleAnsiChar(unsigned char)+0x2c4>
   3ac8c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ac90:	e3530007 	cmp	r3, #7
   3ac94:	8a000004 	bhi	3acac <TermAnsi::handleAnsiChar(unsigned char)+0x250>
   3ac98:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3ac9c:	e2831001 	add	r1, r3, #1
   3aca0:	e283300c 	add	r3, r3, #12
   3aca4:	e5841050 	str	r1, [r4, #80]	; 0x50
   3aca8:	e7842103 	str	r2, [r4, r3, lsl #2]
   3acac:	e3a02000 	mov	r2, #0
   3acb0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3acb4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3acb8:	e1530002 	cmp	r3, r2
   3acbc:	1a000013 	bne	3ad10 <TermAnsi::handleAnsiChar(unsigned char)+0x2b4>
   3acc0:	e5943014 	ldr	r3, [r4, #20]
   3acc4:	e594100c 	ldr	r1, [r4, #12]
   3acc8:	e0842103 	add	r2, r4, r3, lsl #2
   3accc:	e2411001 	sub	r1, r1, #1
   3acd0:	e2833001 	add	r3, r3, #1
   3acd4:	e1510003 	cmp	r1, r3
   3acd8:	e2822004 	add	r2, r2, #4
   3acdc:	8a000007 	bhi	3ad00 <TermAnsi::handleAnsiChar(unsigned char)+0x2a4>
   3ace0:	e5940010 	ldr	r0, [r4, #16]
   3ace4:	e5942018 	ldr	r2, [r4, #24]
   3ace8:	e2400001 	sub	r0, r0, #1
   3acec:	e1520000 	cmp	r2, r0
   3acf0:	21a02000 	movcs	r2, r0
   3acf4:	e1530001 	cmp	r3, r1
   3acf8:	21a03001 	movcs	r3, r1
   3acfc:	eaffffcc 	b	3ac34 <TermAnsi::handleAnsiChar(unsigned char)+0x1d8>
   3ad00:	e5d2005c 	ldrb	r0, [r2, #92]	; 0x5c
   3ad04:	e350002a 	cmp	r0, #42	; 0x2a
   3ad08:	1afffff0 	bne	3acd0 <TermAnsi::handleAnsiChar(unsigned char)+0x274>
   3ad0c:	eafffff3 	b	3ace0 <TermAnsi::handleAnsiChar(unsigned char)+0x284>
   3ad10:	e594100c 	ldr	r1, [r4, #12]
   3ad14:	e5943014 	ldr	r3, [r4, #20]
   3ad18:	e2411001 	sub	r1, r1, #1
   3ad1c:	eaffffef 	b	3ace0 <TermAnsi::handleAnsiChar(unsigned char)+0x284>
   3ad20:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3ad24:	e3560000 	cmp	r6, #0
   3ad28:	1affff55 	bne	3aa84 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3ad2c:	e1a01005 	mov	r1, r5
   3ad30:	e59f0d74 	ldr	r0, [pc, #3444]	; 3baac <TermAnsi::handleAnsiChar(unsigned char)+0x1050>
   3ad34:	ebffbdbd 	bl	2a430 <strchr>
   3ad38:	e3500000 	cmp	r0, #0
   3ad3c:	0a000023 	beq	3add0 <TermAnsi::handleAnsiChar(unsigned char)+0x374>
   3ad40:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ad44:	e3530007 	cmp	r3, #7
   3ad48:	8a000004 	bhi	3ad60 <TermAnsi::handleAnsiChar(unsigned char)+0x304>
   3ad4c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3ad50:	e2831001 	add	r1, r3, #1
   3ad54:	e283300c 	add	r3, r3, #12
   3ad58:	e5841050 	str	r1, [r4, #80]	; 0x50
   3ad5c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3ad60:	e3a03000 	mov	r3, #0
   3ad64:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3ad68:	e5843054 	str	r3, [r4, #84]	; 0x54
   3ad6c:	e1510003 	cmp	r1, r3
   3ad70:	1a000012 	bne	3adc0 <TermAnsi::handleAnsiChar(unsigned char)+0x364>
   3ad74:	e5943010 	ldr	r3, [r4, #16]
   3ad78:	e5942018 	ldr	r2, [r4, #24]
   3ad7c:	e2430001 	sub	r0, r3, #1
   3ad80:	e1520000 	cmp	r2, r0
   3ad84:	32823001 	addcc	r3, r2, #1
   3ad88:	2a000009 	bcs	3adb4 <TermAnsi::handleAnsiChar(unsigned char)+0x358>
   3ad8c:	e594100c 	ldr	r1, [r4, #12]
   3ad90:	e5942014 	ldr	r2, [r4, #20]
   3ad94:	e1530000 	cmp	r3, r0
   3ad98:	e2411001 	sub	r1, r1, #1
   3ad9c:	21a03000 	movcs	r3, r0
   3ada0:	e1520001 	cmp	r2, r1
   3ada4:	21a02001 	movcs	r2, r1
   3ada8:	e5843018 	str	r3, [r4, #24]
   3adac:	e5842014 	str	r2, [r4, #20]
   3adb0:	eaffffa1 	b	3ac3c <TermAnsi::handleAnsiChar(unsigned char)+0x1e0>
   3adb4:	e3a02001 	mov	r2, #1
   3adb8:	e1a00004 	mov	r0, r4
   3adbc:	ebfffd45 	bl	3a2d8 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3adc0:	e5940010 	ldr	r0, [r4, #16]
   3adc4:	e5943018 	ldr	r3, [r4, #24]
   3adc8:	e2400001 	sub	r0, r0, #1
   3adcc:	eaffffee 	b	3ad8c <TermAnsi::handleAnsiChar(unsigned char)+0x330>
   3add0:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3add4:	e3560000 	cmp	r6, #0
   3add8:	1affff29 	bne	3aa84 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3addc:	e1a01005 	mov	r1, r5
   3ade0:	e59f0cc8 	ldr	r0, [pc, #3272]	; 3bab0 <TermAnsi::handleAnsiChar(unsigned char)+0x1054>
   3ade4:	ebffbd91 	bl	2a430 <strchr>
   3ade8:	e3500000 	cmp	r0, #0
   3adec:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3adf0:	0a000018 	beq	3ae58 <TermAnsi::handleAnsiChar(unsigned char)+0x3fc>
   3adf4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3adf8:	e3530007 	cmp	r3, #7
   3adfc:	8a000004 	bhi	3ae14 <TermAnsi::handleAnsiChar(unsigned char)+0x3b8>
   3ae00:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3ae04:	e2831001 	add	r1, r3, #1
   3ae08:	e283300c 	add	r3, r3, #12
   3ae0c:	e5841050 	str	r1, [r4, #80]	; 0x50
   3ae10:	e7842103 	str	r2, [r4, r3, lsl #2]
   3ae14:	e3a02000 	mov	r2, #0
   3ae18:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3ae1c:	e5940010 	ldr	r0, [r4, #16]
   3ae20:	e5941018 	ldr	r1, [r4, #24]
   3ae24:	e1530002 	cmp	r3, r2
   3ae28:	e2400001 	sub	r0, r0, #1
   3ae2c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3ae30:	01a02003 	moveq	r2, r3
   3ae34:	15942014 	ldrne	r2, [r4, #20]
   3ae38:	e1510000 	cmp	r1, r0
   3ae3c:	21a01000 	movcs	r1, r0
   3ae40:	e594300c 	ldr	r3, [r4, #12]
   3ae44:	e5841018 	str	r1, [r4, #24]
   3ae48:	e2433001 	sub	r3, r3, #1
   3ae4c:	e1530002 	cmp	r3, r2
   3ae50:	21a03002 	movcs	r3, r2
   3ae54:	eaffff77 	b	3ac38 <TermAnsi::handleAnsiChar(unsigned char)+0x1dc>
   3ae58:	e3560000 	cmp	r6, #0
   3ae5c:	1affff08 	bne	3aa84 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3ae60:	e1a01005 	mov	r1, r5
   3ae64:	e59f0cd4 	ldr	r0, [pc, #3284]	; 3bb40 <TermAnsi::handleAnsiChar(unsigned char)+0x10e4>
   3ae68:	ebffbd70 	bl	2a430 <strchr>
   3ae6c:	e3500000 	cmp	r0, #0
   3ae70:	1affff4b 	bne	3aba4 <TermAnsi::handleAnsiChar(unsigned char)+0x148>
   3ae74:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3ae78:	eaffff01 	b	3aa84 <TermAnsi::handleAnsiChar(unsigned char)+0x28>
   3ae7c:	e1a01005 	mov	r1, r5
   3ae80:	e59f0c2c 	ldr	r0, [pc, #3116]	; 3bab4 <TermAnsi::handleAnsiChar(unsigned char)+0x1058>
   3ae84:	ebffbd69 	bl	2a430 <strchr>
   3ae88:	e3500000 	cmp	r0, #0
   3ae8c:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3ae90:	0a00001d 	beq	3af0c <TermAnsi::handleAnsiChar(unsigned char)+0x4b0>
   3ae94:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ae98:	e3530007 	cmp	r3, #7
   3ae9c:	8a000004 	bhi	3aeb4 <TermAnsi::handleAnsiChar(unsigned char)+0x458>
   3aea0:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3aea4:	e2831001 	add	r1, r3, #1
   3aea8:	e283300c 	add	r3, r3, #12
   3aeac:	e5841050 	str	r1, [r4, #80]	; 0x50
   3aeb0:	e7842103 	str	r2, [r4, r3, lsl #2]
   3aeb4:	e3a02000 	mov	r2, #0
   3aeb8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3aebc:	e5842054 	str	r2, [r4, #84]	; 0x54
   3aec0:	e1530002 	cmp	r3, r2
   3aec4:	1a000008 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3aec8:	e5945894 	ldr	r5, [r4, #2196]	; 0x894
   3aecc:	e284ce89 	add	ip, r4, #2192	; 0x890
   3aed0:	e28cc008 	add	ip, ip, #8
   3aed4:	e284e014 	add	lr, r4, #20
   3aed8:	e8bc000f 	ldm	ip!, {r0, r1, r2, r3}
   3aedc:	e5845890 	str	r5, [r4, #2192]	; 0x890
   3aee0:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   3aee4:	e59c3000 	ldr	r3, [ip]
   3aee8:	e58e3000 	str	r3, [lr]
   3aeec:	e5940010 	ldr	r0, [r4, #16]
   3aef0:	e5942018 	ldr	r2, [r4, #24]
   3aef4:	e594100c 	ldr	r1, [r4, #12]
   3aef8:	e2400001 	sub	r0, r0, #1
   3aefc:	e5943014 	ldr	r3, [r4, #20]
   3af00:	e1520000 	cmp	r2, r0
   3af04:	e2411001 	sub	r1, r1, #1
   3af08:	eaffff78 	b	3acf0 <TermAnsi::handleAnsiChar(unsigned char)+0x294>
   3af0c:	e3560002 	cmp	r6, #2
   3af10:	1afffeef 	bne	3aad4 <TermAnsi::handleAnsiChar(unsigned char)+0x78>
   3af14:	e1a01005 	mov	r1, r5
   3af18:	e59f0b98 	ldr	r0, [pc, #2968]	; 3bab8 <TermAnsi::handleAnsiChar(unsigned char)+0x105c>
   3af1c:	ebffbd43 	bl	2a430 <strchr>
   3af20:	e3500000 	cmp	r0, #0
   3af24:	0afffeea 	beq	3aad4 <TermAnsi::handleAnsiChar(unsigned char)+0x78>
   3af28:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3af2c:	e3530007 	cmp	r3, #7
   3af30:	8a000004 	bhi	3af48 <TermAnsi::handleAnsiChar(unsigned char)+0x4ec>
   3af34:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3af38:	e2831001 	add	r1, r3, #1
   3af3c:	e283300c 	add	r3, r3, #12
   3af40:	e5841050 	str	r1, [r4, #80]	; 0x50
   3af44:	e7842103 	str	r2, [r4, r3, lsl #2]
   3af48:	e3a02000 	mov	r2, #0
   3af4c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3af50:	e5842054 	str	r2, [r4, #84]	; 0x54
   3af54:	e1530002 	cmp	r3, r2
   3af58:	1affffe3 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3af5c:	e1a00004 	mov	r0, r4
   3af60:	ebfffe07 	bl	3a784 <TermAnsi::ich()>
   3af64:	eaffffe0 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3af68:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3af6c:	e3560001 	cmp	r6, #1
   3af70:	1a00004b 	bne	3b0a4 <TermAnsi::handleAnsiChar(unsigned char)+0x648>
   3af74:	e1a01005 	mov	r1, r5
   3af78:	e59f0b3c 	ldr	r0, [pc, #2876]	; 3babc <TermAnsi::handleAnsiChar(unsigned char)+0x1060>
   3af7c:	ebffbd2b 	bl	2a430 <strchr>
   3af80:	e3500000 	cmp	r0, #0
   3af84:	0a000011 	beq	3afd0 <TermAnsi::handleAnsiChar(unsigned char)+0x574>
   3af88:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3af8c:	e3530007 	cmp	r3, #7
   3af90:	8a000004 	bhi	3afa8 <TermAnsi::handleAnsiChar(unsigned char)+0x54c>
   3af94:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3af98:	e2831001 	add	r1, r3, #1
   3af9c:	e283300c 	add	r3, r3, #12
   3afa0:	e5841050 	str	r1, [r4, #80]	; 0x50
   3afa4:	e7842103 	str	r2, [r4, r3, lsl #2]
   3afa8:	e3a02000 	mov	r2, #0
   3afac:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3afb0:	e5842054 	str	r2, [r4, #84]	; 0x54
   3afb4:	e1530002 	cmp	r3, r2
   3afb8:	03a0202a 	moveq	r2, #42	; 0x2a
   3afbc:	05940014 	ldreq	r0, [r4, #20]
   3afc0:	15940014 	ldrne	r0, [r4, #20]
   3afc4:	00843100 	addeq	r3, r4, r0, lsl #2
   3afc8:	05c3205c 	strbeq	r2, [r3, #92]	; 0x5c
   3afcc:	eaffff0f 	b	3ac10 <TermAnsi::handleAnsiChar(unsigned char)+0x1b4>
   3afd0:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3afd4:	e3560001 	cmp	r6, #1
   3afd8:	1afffeab 	bne	3aa8c <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3afdc:	e1a01005 	mov	r1, r5
   3afe0:	e59f0ad8 	ldr	r0, [pc, #2776]	; 3bac0 <TermAnsi::handleAnsiChar(unsigned char)+0x1064>
   3afe4:	ebffbd11 	bl	2a430 <strchr>
   3afe8:	e3500000 	cmp	r0, #0
   3afec:	0a000016 	beq	3b04c <TermAnsi::handleAnsiChar(unsigned char)+0x5f0>
   3aff0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3aff4:	e3530007 	cmp	r3, #7
   3aff8:	8a000004 	bhi	3b010 <TermAnsi::handleAnsiChar(unsigned char)+0x5b4>
   3affc:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b000:	e2831001 	add	r1, r3, #1
   3b004:	e283300c 	add	r3, r3, #12
   3b008:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b00c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b010:	e3a02000 	mov	r2, #0
   3b014:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b018:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b01c:	e1530002 	cmp	r3, r2
   3b020:	1affffb1 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b024:	e5943890 	ldr	r3, [r4, #2192]	; 0x890
   3b028:	e284ce89 	add	ip, r4, #2192	; 0x890
   3b02c:	e28cc008 	add	ip, ip, #8
   3b030:	e284e014 	add	lr, r4, #20
   3b034:	e5843894 	str	r3, [r4, #2196]	; 0x894
   3b038:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   3b03c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   3b040:	e59e3000 	ldr	r3, [lr]
   3b044:	e58c3000 	str	r3, [ip]
   3b048:	eaffffa7 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b04c:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3b050:	e3560001 	cmp	r6, #1
   3b054:	1afffe8c 	bne	3aa8c <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3b058:	e1a01005 	mov	r1, r5
   3b05c:	e59f0a60 	ldr	r0, [pc, #2656]	; 3bac4 <TermAnsi::handleAnsiChar(unsigned char)+0x1068>
   3b060:	ebffbcf2 	bl	2a430 <strchr>
   3b064:	e3500000 	cmp	r0, #0
   3b068:	1affff89 	bne	3ae94 <TermAnsi::handleAnsiChar(unsigned char)+0x438>
   3b06c:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3b070:	e3560001 	cmp	r6, #1
   3b074:	1afffe84 	bne	3aa8c <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3b078:	e1a01005 	mov	r1, r5
   3b07c:	e59f0a44 	ldr	r0, [pc, #2628]	; 3bac8 <TermAnsi::handleAnsiChar(unsigned char)+0x106c>
   3b080:	ebffbcea 	bl	2a430 <strchr>
   3b084:	e3500000 	cmp	r0, #0
   3b088:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b08c:	0a000004 	beq	3b0a4 <TermAnsi::handleAnsiChar(unsigned char)+0x648>
   3b090:	e3a00001 	mov	r0, #1
   3b094:	e3a03002 	mov	r3, #2
   3b098:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   3b09c:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3b0a0:	eafffeb8 	b	3ab88 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3b0a4:	e3560001 	cmp	r6, #1
   3b0a8:	1afffe77 	bne	3aa8c <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3b0ac:	e1a01005 	mov	r1, r5
   3b0b0:	e59f0a14 	ldr	r0, [pc, #2580]	; 3bacc <TermAnsi::handleAnsiChar(unsigned char)+0x1070>
   3b0b4:	ebffbcdd 	bl	2a430 <strchr>
   3b0b8:	e3500000 	cmp	r0, #0
   3b0bc:	0a000011 	beq	3b108 <TermAnsi::handleAnsiChar(unsigned char)+0x6ac>
   3b0c0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b0c4:	e3530007 	cmp	r3, #7
   3b0c8:	8a000004 	bhi	3b0e0 <TermAnsi::handleAnsiChar(unsigned char)+0x684>
   3b0cc:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b0d0:	e2831001 	add	r1, r3, #1
   3b0d4:	e283300c 	add	r3, r3, #12
   3b0d8:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b0dc:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b0e0:	e3a02000 	mov	r2, #0
   3b0e4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b0e8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b0ec:	e1530002 	cmp	r3, r2
   3b0f0:	1affff7d 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b0f4:	e5943000 	ldr	r3, [r4]
   3b0f8:	e1a00004 	mov	r0, r4
   3b0fc:	e5933010 	ldr	r3, [r3, #16]
   3b100:	e12fff33 	blx	r3
   3b104:	eaffff78 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b108:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3b10c:	e3560001 	cmp	r6, #1
   3b110:	1afffe5d 	bne	3aa8c <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3b114:	e1a01005 	mov	r1, r5
   3b118:	e59f09b0 	ldr	r0, [pc, #2480]	; 3bad0 <TermAnsi::handleAnsiChar(unsigned char)+0x1074>
   3b11c:	ebffbcc3 	bl	2a430 <strchr>
   3b120:	e3500000 	cmp	r0, #0
   3b124:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b128:	0afffe57 	beq	3aa8c <TermAnsi::handleAnsiChar(unsigned char)+0x30>
   3b12c:	e3a03002 	mov	r3, #2
   3b130:	e1a00006 	mov	r0, r6
   3b134:	e5c4302c 	strb	r3, [r4, #44]	; 0x2c
   3b138:	eafffe92 	b	3ab88 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3b13c:	e1a01005 	mov	r1, r5
   3b140:	e59f098c 	ldr	r0, [pc, #2444]	; 3bad4 <TermAnsi::handleAnsiChar(unsigned char)+0x1078>
   3b144:	ebffbcb9 	bl	2a430 <strchr>
   3b148:	e3500000 	cmp	r0, #0
   3b14c:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b150:	1afffe6d 	bne	3ab0c <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3b154:	e3560002 	cmp	r6, #2
   3b158:	1affff6b 	bne	3af0c <TermAnsi::handleAnsiChar(unsigned char)+0x4b0>
   3b15c:	e1a01005 	mov	r1, r5
   3b160:	e59f0970 	ldr	r0, [pc, #2416]	; 3bad8 <TermAnsi::handleAnsiChar(unsigned char)+0x107c>
   3b164:	ebffbcb1 	bl	2a430 <strchr>
   3b168:	e3500000 	cmp	r0, #0
   3b16c:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b170:	1afffe65 	bne	3ab0c <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3b174:	e3560002 	cmp	r6, #2
   3b178:	1afffe55 	bne	3aad4 <TermAnsi::handleAnsiChar(unsigned char)+0x78>
   3b17c:	e1a01005 	mov	r1, r5
   3b180:	e59f0954 	ldr	r0, [pc, #2388]	; 3badc <TermAnsi::handleAnsiChar(unsigned char)+0x1080>
   3b184:	ebffbca9 	bl	2a430 <strchr>
   3b188:	e3500000 	cmp	r0, #0
   3b18c:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b190:	1afffe5d 	bne	3ab0c <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3b194:	e3560002 	cmp	r6, #2
   3b198:	1afffe4d 	bne	3aad4 <TermAnsi::handleAnsiChar(unsigned char)+0x78>
   3b19c:	e1a01005 	mov	r1, r5
   3b1a0:	e59f0938 	ldr	r0, [pc, #2360]	; 3bae0 <TermAnsi::handleAnsiChar(unsigned char)+0x1084>
   3b1a4:	ebffbca1 	bl	2a430 <strchr>
   3b1a8:	e3500000 	cmp	r0, #0
   3b1ac:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b1b0:	1affff8e 	bne	3aff0 <TermAnsi::handleAnsiChar(unsigned char)+0x594>
   3b1b4:	eafffe44 	b	3aacc <TermAnsi::handleAnsiChar(unsigned char)+0x70>
   3b1b8:	e1a01005 	mov	r1, r5
   3b1bc:	e59f0908 	ldr	r0, [pc, #2312]	; 3bacc <TermAnsi::handleAnsiChar(unsigned char)+0x1070>
   3b1c0:	ebffbc9a 	bl	2a430 <strchr>
   3b1c4:	e3500000 	cmp	r0, #0
   3b1c8:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b1cc:	1afffe4e 	bne	3ab0c <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3b1d0:	e3560002 	cmp	r6, #2
   3b1d4:	1affffde 	bne	3b154 <TermAnsi::handleAnsiChar(unsigned char)+0x6f8>
   3b1d8:	e1a01005 	mov	r1, r5
   3b1dc:	e59f0900 	ldr	r0, [pc, #2304]	; 3bae4 <TermAnsi::handleAnsiChar(unsigned char)+0x1088>
   3b1e0:	ebffbc92 	bl	2a430 <strchr>
   3b1e4:	e3500000 	cmp	r0, #0
   3b1e8:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b1ec:	0a00001c 	beq	3b264 <TermAnsi::handleAnsiChar(unsigned char)+0x808>
   3b1f0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b1f4:	e3530007 	cmp	r3, #7
   3b1f8:	8a000004 	bhi	3b210 <TermAnsi::handleAnsiChar(unsigned char)+0x7b4>
   3b1fc:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b200:	e2831001 	add	r1, r3, #1
   3b204:	e283300c 	add	r3, r3, #12
   3b208:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b20c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b210:	e3a03000 	mov	r3, #0
   3b214:	e5d42058 	ldrb	r2, [r4, #88]	; 0x58
   3b218:	e5843054 	str	r3, [r4, #84]	; 0x54
   3b21c:	e1520003 	cmp	r2, r3
   3b220:	1affff31 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b224:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3b228:	e3530003 	cmp	r3, #3
   3b22c:	1affff2e 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b230:	e1a03004 	mov	r3, r4
   3b234:	e3a0c020 	mov	ip, #32
   3b238:	e3a0000f 	mov	r0, #15
   3b23c:	e594100c 	ldr	r1, [r4, #12]
   3b240:	e0841101 	add	r1, r4, r1, lsl #2
   3b244:	e1530001 	cmp	r3, r1
   3b248:	0affff27 	beq	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b24c:	e5c3c05c 	strb	ip, [r3, #92]	; 0x5c
   3b250:	e5c3005d 	strb	r0, [r3, #93]	; 0x5d
   3b254:	e5c3205e 	strb	r2, [r3, #94]	; 0x5e
   3b258:	e5c3205f 	strb	r2, [r3, #95]	; 0x5f
   3b25c:	e2833004 	add	r3, r3, #4
   3b260:	eafffff7 	b	3b244 <TermAnsi::handleAnsiChar(unsigned char)+0x7e8>
   3b264:	e3560002 	cmp	r6, #2
   3b268:	1affffc1 	bne	3b174 <TermAnsi::handleAnsiChar(unsigned char)+0x718>
   3b26c:	e1a01005 	mov	r1, r5
   3b270:	e59f0870 	ldr	r0, [pc, #2160]	; 3bae8 <TermAnsi::handleAnsiChar(unsigned char)+0x108c>
   3b274:	ebffbc6d 	bl	2a430 <strchr>
   3b278:	e3500000 	cmp	r0, #0
   3b27c:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b280:	0a00000f 	beq	3b2c4 <TermAnsi::handleAnsiChar(unsigned char)+0x868>
   3b284:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b288:	e3530007 	cmp	r3, #7
   3b28c:	8a000004 	bhi	3b2a4 <TermAnsi::handleAnsiChar(unsigned char)+0x848>
   3b290:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b294:	e2831001 	add	r1, r3, #1
   3b298:	e283300c 	add	r3, r3, #12
   3b29c:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b2a0:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b2a4:	e3a02000 	mov	r2, #0
   3b2a8:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b2ac:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b2b0:	e1530002 	cmp	r3, r2
   3b2b4:	1affff0c 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b2b8:	e1a00004 	mov	r0, r4
   3b2bc:	ebfffd67 	bl	3a860 <TermAnsi::sgr()>
   3b2c0:	eaffff09 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b2c4:	e3560002 	cmp	r6, #2
   3b2c8:	1affffb1 	bne	3b194 <TermAnsi::handleAnsiChar(unsigned char)+0x738>
   3b2cc:	e1a01005 	mov	r1, r5
   3b2d0:	e59f0814 	ldr	r0, [pc, #2068]	; 3baec <TermAnsi::handleAnsiChar(unsigned char)+0x1090>
   3b2d4:	ebffbc55 	bl	2a430 <strchr>
   3b2d8:	e3500000 	cmp	r0, #0
   3b2dc:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b2e0:	1afffe09 	bne	3ab0c <TermAnsi::handleAnsiChar(unsigned char)+0xb0>
   3b2e4:	eafffdf6 	b	3aac4 <TermAnsi::handleAnsiChar(unsigned char)+0x68>
   3b2e8:	e1a01005 	mov	r1, r5
   3b2ec:	e59f07fc 	ldr	r0, [pc, #2044]	; 3baf0 <TermAnsi::handleAnsiChar(unsigned char)+0x1094>
   3b2f0:	ebffbc4e 	bl	2a430 <strchr>
   3b2f4:	e3500000 	cmp	r0, #0
   3b2f8:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b2fc:	0a000012 	beq	3b34c <TermAnsi::handleAnsiChar(unsigned char)+0x8f0>
   3b300:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b304:	e3530007 	cmp	r3, #7
   3b308:	8a000004 	bhi	3b320 <TermAnsi::handleAnsiChar(unsigned char)+0x8c4>
   3b30c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b310:	e2831001 	add	r1, r3, #1
   3b314:	e283300c 	add	r3, r3, #12
   3b318:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b31c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b320:	e3a03000 	mov	r3, #0
   3b324:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3b328:	e5843054 	str	r3, [r4, #84]	; 0x54
   3b32c:	e1510003 	cmp	r1, r3
   3b330:	1afffeed 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b334:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b338:	e1a00004 	mov	r0, r4
   3b33c:	e1520003 	cmp	r2, r3
   3b340:	03a02001 	moveq	r2, #1
   3b344:	ebfffc63 	bl	3a4d8 <TermAnsi::scrollDown(unsigned int, unsigned int)>
   3b348:	eafffee7 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b34c:	e3560002 	cmp	r6, #2
   3b350:	1affff9e 	bne	3b1d0 <TermAnsi::handleAnsiChar(unsigned char)+0x774>
   3b354:	e1a01005 	mov	r1, r5
   3b358:	e59f0794 	ldr	r0, [pc, #1940]	; 3baf4 <TermAnsi::handleAnsiChar(unsigned char)+0x1098>
   3b35c:	ebffbc33 	bl	2a430 <strchr>
   3b360:	e3500000 	cmp	r0, #0
   3b364:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b368:	0a000014 	beq	3b3c0 <TermAnsi::handleAnsiChar(unsigned char)+0x964>
   3b36c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b370:	e3530007 	cmp	r3, #7
   3b374:	8a000004 	bhi	3b38c <TermAnsi::handleAnsiChar(unsigned char)+0x930>
   3b378:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b37c:	e2831001 	add	r1, r3, #1
   3b380:	e283300c 	add	r3, r3, #12
   3b384:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b388:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b38c:	e3a02000 	mov	r2, #0
   3b390:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b394:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b398:	e1530002 	cmp	r3, r2
   3b39c:	1afffed2 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b3a0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3b3a4:	e5942014 	ldr	r2, [r4, #20]
   3b3a8:	e3530000 	cmp	r3, #0
   3b3ac:	03a03001 	moveq	r3, #1
   3b3b0:	e5941018 	ldr	r1, [r4, #24]
   3b3b4:	e1a00004 	mov	r0, r4
   3b3b8:	ebfffb87 	bl	3a1dc <TermAnsi::clearline(unsigned int, unsigned int, unsigned int)>
   3b3bc:	eafffeca 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b3c0:	e3560002 	cmp	r6, #2
   3b3c4:	1affffa6 	bne	3b264 <TermAnsi::handleAnsiChar(unsigned char)+0x808>
   3b3c8:	e1a01005 	mov	r1, r5
   3b3cc:	e59f0724 	ldr	r0, [pc, #1828]	; 3baf8 <TermAnsi::handleAnsiChar(unsigned char)+0x109c>
   3b3d0:	ebffbc16 	bl	2a430 <strchr>
   3b3d4:	e3500000 	cmp	r0, #0
   3b3d8:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b3dc:	0a00001d 	beq	3b458 <TermAnsi::handleAnsiChar(unsigned char)+0x9fc>
   3b3e0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b3e4:	e3530007 	cmp	r3, #7
   3b3e8:	8a000004 	bhi	3b400 <TermAnsi::handleAnsiChar(unsigned char)+0x9a4>
   3b3ec:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b3f0:	e2831001 	add	r1, r3, #1
   3b3f4:	e283300c 	add	r3, r3, #12
   3b3f8:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b3fc:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b400:	e3a02000 	mov	r2, #0
   3b404:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b408:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b40c:	e1530002 	cmp	r3, r2
   3b410:	1a000091 	bne	3b65c <TermAnsi::handleAnsiChar(unsigned char)+0xc00>
   3b414:	e5943014 	ldr	r3, [r4, #20]
   3b418:	e3530000 	cmp	r3, #0
   3b41c:	e2432001 	sub	r2, r3, #1
   3b420:	e0841103 	add	r1, r4, r3, lsl #2
   3b424:	0a000004 	beq	3b43c <TermAnsi::handleAnsiChar(unsigned char)+0x9e0>
   3b428:	e5842014 	str	r2, [r4, #20]
   3b42c:	e5d13058 	ldrb	r3, [r1, #88]	; 0x58
   3b430:	e353002a 	cmp	r3, #42	; 0x2a
   3b434:	1afffff6 	bne	3b414 <TermAnsi::handleAnsiChar(unsigned char)+0x9b8>
   3b438:	e1a03002 	mov	r3, r2
   3b43c:	e5940010 	ldr	r0, [r4, #16]
   3b440:	e5942018 	ldr	r2, [r4, #24]
   3b444:	e594100c 	ldr	r1, [r4, #12]
   3b448:	e2400001 	sub	r0, r0, #1
   3b44c:	e1520000 	cmp	r2, r0
   3b450:	e2411001 	sub	r1, r1, #1
   3b454:	eafffe25 	b	3acf0 <TermAnsi::handleAnsiChar(unsigned char)+0x294>
   3b458:	e3560002 	cmp	r6, #2
   3b45c:	1affff98 	bne	3b2c4 <TermAnsi::handleAnsiChar(unsigned char)+0x868>
   3b460:	e1a01005 	mov	r1, r5
   3b464:	e59f0690 	ldr	r0, [pc, #1680]	; 3bafc <TermAnsi::handleAnsiChar(unsigned char)+0x10a0>
   3b468:	ebffbbf0 	bl	2a430 <strchr>
   3b46c:	e3500000 	cmp	r0, #0
   3b470:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b474:	0afffd90 	beq	3aabc <TermAnsi::handleAnsiChar(unsigned char)+0x60>
   3b478:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b47c:	e3530007 	cmp	r3, #7
   3b480:	8a000004 	bhi	3b498 <TermAnsi::handleAnsiChar(unsigned char)+0xa3c>
   3b484:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b488:	e2831001 	add	r1, r3, #1
   3b48c:	e283300c 	add	r3, r3, #12
   3b490:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b494:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b498:	e3a02000 	mov	r2, #0
   3b49c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b4a0:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b4a4:	e1530002 	cmp	r3, r2
   3b4a8:	1afffe8f 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b4ac:	e1a00004 	mov	r0, r4
   3b4b0:	ebfffcd4 	bl	3a808 <TermAnsi::rep()>
   3b4b4:	eafffe8c 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b4b8:	e1a01005 	mov	r1, r5
   3b4bc:	e59f063c 	ldr	r0, [pc, #1596]	; 3bb00 <TermAnsi::handleAnsiChar(unsigned char)+0x10a4>
   3b4c0:	ebffbbda 	bl	2a430 <strchr>
   3b4c4:	e3500000 	cmp	r0, #0
   3b4c8:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b4cc:	0a000013 	beq	3b520 <TermAnsi::handleAnsiChar(unsigned char)+0xac4>
   3b4d0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b4d4:	e3530007 	cmp	r3, #7
   3b4d8:	8a000004 	bhi	3b4f0 <TermAnsi::handleAnsiChar(unsigned char)+0xa94>
   3b4dc:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b4e0:	e2831001 	add	r1, r3, #1
   3b4e4:	e283300c 	add	r3, r3, #12
   3b4e8:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b4ec:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b4f0:	e3a02000 	mov	r2, #0
   3b4f4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b4f8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b4fc:	e1530002 	cmp	r3, r2
   3b500:	1afffe79 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b504:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b508:	e5941018 	ldr	r1, [r4, #24]
   3b50c:	e3520000 	cmp	r2, #0
   3b510:	03a02001 	moveq	r2, #1
   3b514:	e1a00004 	mov	r0, r4
   3b518:	ebfffbee 	bl	3a4d8 <TermAnsi::scrollDown(unsigned int, unsigned int)>
   3b51c:	eafffe72 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b520:	e3560002 	cmp	r6, #2
   3b524:	1affff88 	bne	3b34c <TermAnsi::handleAnsiChar(unsigned char)+0x8f0>
   3b528:	e1a01005 	mov	r1, r5
   3b52c:	e59f05d0 	ldr	r0, [pc, #1488]	; 3bb04 <TermAnsi::handleAnsiChar(unsigned char)+0x10a8>
   3b530:	ebffbbbe 	bl	2a430 <strchr>
   3b534:	e3500000 	cmp	r0, #0
   3b538:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b53c:	0a000013 	beq	3b590 <TermAnsi::handleAnsiChar(unsigned char)+0xb34>
   3b540:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b544:	e3530007 	cmp	r3, #7
   3b548:	8a000004 	bhi	3b560 <TermAnsi::handleAnsiChar(unsigned char)+0xb04>
   3b54c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b550:	e2831001 	add	r1, r3, #1
   3b554:	e283300c 	add	r3, r3, #12
   3b558:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b55c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b560:	e3a02000 	mov	r2, #0
   3b564:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b568:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b56c:	e1530002 	cmp	r3, r2
   3b570:	1afffe5d 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b574:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b578:	e5941018 	ldr	r1, [r4, #24]
   3b57c:	e3520000 	cmp	r2, #0
   3b580:	03a02001 	moveq	r2, #1
   3b584:	e1a00004 	mov	r0, r4
   3b588:	ebfffb52 	bl	3a2d8 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3b58c:	eafffe56 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b590:	e3560002 	cmp	r6, #2
   3b594:	1affff89 	bne	3b3c0 <TermAnsi::handleAnsiChar(unsigned char)+0x964>
   3b598:	e1a01005 	mov	r1, r5
   3b59c:	e59f0564 	ldr	r0, [pc, #1380]	; 3bb08 <TermAnsi::handleAnsiChar(unsigned char)+0x10ac>
   3b5a0:	ebffbba2 	bl	2a430 <strchr>
   3b5a4:	e3500000 	cmp	r0, #0
   3b5a8:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b5ac:	0a00000f 	beq	3b5f0 <TermAnsi::handleAnsiChar(unsigned char)+0xb94>
   3b5b0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b5b4:	e3530007 	cmp	r3, #7
   3b5b8:	8a000004 	bhi	3b5d0 <TermAnsi::handleAnsiChar(unsigned char)+0xb74>
   3b5bc:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b5c0:	e2831001 	add	r1, r3, #1
   3b5c4:	e283300c 	add	r3, r3, #12
   3b5c8:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b5cc:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b5d0:	e3a02000 	mov	r2, #0
   3b5d4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b5d8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b5dc:	e1530002 	cmp	r3, r2
   3b5e0:	1afffe41 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b5e4:	e1a00004 	mov	r0, r4
   3b5e8:	ebfffc45 	bl	3a704 <TermAnsi::dch()>
   3b5ec:	eafffe3e 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b5f0:	e3560002 	cmp	r6, #2
   3b5f4:	1affff97 	bne	3b458 <TermAnsi::handleAnsiChar(unsigned char)+0x9fc>
   3b5f8:	e1a01005 	mov	r1, r5
   3b5fc:	e59f0508 	ldr	r0, [pc, #1288]	; 3bb0c <TermAnsi::handleAnsiChar(unsigned char)+0x10b0>
   3b600:	ebffbb8a 	bl	2a430 <strchr>
   3b604:	e3500000 	cmp	r0, #0
   3b608:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b60c:	0afffd28 	beq	3aab4 <TermAnsi::handleAnsiChar(unsigned char)+0x58>
   3b610:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b614:	e3530007 	cmp	r3, #7
   3b618:	8a000004 	bhi	3b630 <TermAnsi::handleAnsiChar(unsigned char)+0xbd4>
   3b61c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b620:	e2831001 	add	r1, r3, #1
   3b624:	e283300c 	add	r3, r3, #12
   3b628:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b62c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b630:	e3a03000 	mov	r3, #0
   3b634:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3b638:	e5843054 	str	r3, [r4, #84]	; 0x54
   3b63c:	e1510003 	cmp	r1, r3
   3b640:	1afffe29 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b644:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b648:	e1a00004 	mov	r0, r4
   3b64c:	e1520003 	cmp	r2, r3
   3b650:	03a02001 	moveq	r2, #1
   3b654:	ebfffb1f 	bl	3a2d8 <TermAnsi::scrollUp(unsigned int, unsigned int)>
   3b658:	eafffe23 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b65c:	e5943014 	ldr	r3, [r4, #20]
   3b660:	eaffff75 	b	3b43c <TermAnsi::handleAnsiChar(unsigned char)+0x9e0>
   3b664:	e1a01005 	mov	r1, r5
   3b668:	e59f04a0 	ldr	r0, [pc, #1184]	; 3bb10 <TermAnsi::handleAnsiChar(unsigned char)+0x10b4>
   3b66c:	ebffbb6f 	bl	2a430 <strchr>
   3b670:	e3500000 	cmp	r0, #0
   3b674:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b678:	0a000016 	beq	3b6d8 <TermAnsi::handleAnsiChar(unsigned char)+0xc7c>
   3b67c:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b680:	e3530007 	cmp	r3, #7
   3b684:	8a000004 	bhi	3b69c <TermAnsi::handleAnsiChar(unsigned char)+0xc40>
   3b688:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b68c:	e2831001 	add	r1, r3, #1
   3b690:	e283300c 	add	r3, r3, #12
   3b694:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b698:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b69c:	e3a02000 	mov	r2, #0
   3b6a0:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b6a4:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b6a8:	e1530002 	cmp	r3, r2
   3b6ac:	1afffe0e 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b6b0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3b6b4:	e1530002 	cmp	r3, r2
   3b6b8:	01a02003 	moveq	r2, r3
   3b6bc:	12432001 	subne	r2, r3, #1
   3b6c0:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3b6c4:	e5842018 	str	r2, [r4, #24]
   3b6c8:	e3530000 	cmp	r3, #0
   3b6cc:	12433001 	subne	r3, r3, #1
   3b6d0:	e5843014 	str	r3, [r4, #20]
   3b6d4:	eafffe04 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b6d8:	e3560002 	cmp	r6, #2
   3b6dc:	1affff8f 	bne	3b520 <TermAnsi::handleAnsiChar(unsigned char)+0xac4>
   3b6e0:	e1a01005 	mov	r1, r5
   3b6e4:	e59f0428 	ldr	r0, [pc, #1064]	; 3bb14 <TermAnsi::handleAnsiChar(unsigned char)+0x10b8>
   3b6e8:	ebffbb50 	bl	2a430 <strchr>
   3b6ec:	e3500000 	cmp	r0, #0
   3b6f0:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b6f4:	0a000019 	beq	3b760 <TermAnsi::handleAnsiChar(unsigned char)+0xd04>
   3b6f8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b6fc:	e3530007 	cmp	r3, #7
   3b700:	8a000004 	bhi	3b718 <TermAnsi::handleAnsiChar(unsigned char)+0xcbc>
   3b704:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b708:	e2831001 	add	r1, r3, #1
   3b70c:	e283300c 	add	r3, r3, #12
   3b710:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b714:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b718:	e3a02000 	mov	r2, #0
   3b71c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b720:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b724:	e1530002 	cmp	r3, r2
   3b728:	e594300c 	ldr	r3, [r4, #12]
   3b72c:	1a0000a1 	bne	3b9b8 <TermAnsi::handleAnsiChar(unsigned char)+0xf5c>
   3b730:	e5942014 	ldr	r2, [r4, #20]
   3b734:	e2430001 	sub	r0, r3, #1
   3b738:	e2822001 	add	r2, r2, #1
   3b73c:	e2821001 	add	r1, r2, #1
   3b740:	e1500002 	cmp	r0, r2
   3b744:	e084c101 	add	ip, r4, r1, lsl #2
   3b748:	9a000179 	bls	3bd34 <TermAnsi::handleAnsiChar(unsigned char)+0x12d8>
   3b74c:	e5dcc058 	ldrb	ip, [ip, #88]	; 0x58
   3b750:	e35c002a 	cmp	ip, #42	; 0x2a
   3b754:	0a000176 	beq	3bd34 <TermAnsi::handleAnsiChar(unsigned char)+0x12d8>
   3b758:	e1a02001 	mov	r2, r1
   3b75c:	eafffff6 	b	3b73c <TermAnsi::handleAnsiChar(unsigned char)+0xce0>
   3b760:	e3560002 	cmp	r6, #2
   3b764:	1affff89 	bne	3b590 <TermAnsi::handleAnsiChar(unsigned char)+0xb34>
   3b768:	e1a01005 	mov	r1, r5
   3b76c:	e59f03a4 	ldr	r0, [pc, #932]	; 3bb18 <TermAnsi::handleAnsiChar(unsigned char)+0x10bc>
   3b770:	ebffbb2e 	bl	2a430 <strchr>
   3b774:	e3500000 	cmp	r0, #0
   3b778:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b77c:	0a00000f 	beq	3b7c0 <TermAnsi::handleAnsiChar(unsigned char)+0xd64>
   3b780:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b784:	e3530007 	cmp	r3, #7
   3b788:	8a000004 	bhi	3b7a0 <TermAnsi::handleAnsiChar(unsigned char)+0xd44>
   3b78c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b790:	e2831001 	add	r1, r3, #1
   3b794:	e283300c 	add	r3, r3, #12
   3b798:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b79c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b7a0:	e3a02000 	mov	r2, #0
   3b7a4:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b7a8:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b7ac:	e1530002 	cmp	r3, r2
   3b7b0:	1afffdcd 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b7b4:	e1a00004 	mov	r0, r4
   3b7b8:	ebfffb9a 	bl	3a628 <TermAnsi::ed()>
   3b7bc:	eafffdca 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b7c0:	e3560002 	cmp	r6, #2
   3b7c4:	1affff89 	bne	3b5f0 <TermAnsi::handleAnsiChar(unsigned char)+0xb94>
   3b7c8:	e1a01005 	mov	r1, r5
   3b7cc:	e59f0348 	ldr	r0, [pc, #840]	; 3bb1c <TermAnsi::handleAnsiChar(unsigned char)+0x10c0>
   3b7d0:	ebffbb16 	bl	2a430 <strchr>
   3b7d4:	e3500000 	cmp	r0, #0
   3b7d8:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b7dc:	0afffcb2 	beq	3aaac <TermAnsi::handleAnsiChar(unsigned char)+0x50>
   3b7e0:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b7e4:	e3530007 	cmp	r3, #7
   3b7e8:	8a000004 	bhi	3b800 <TermAnsi::handleAnsiChar(unsigned char)+0xda4>
   3b7ec:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b7f0:	e2831001 	add	r1, r3, #1
   3b7f4:	e283300c 	add	r3, r3, #12
   3b7f8:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b7fc:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b800:	e3a02000 	mov	r2, #0
   3b804:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b808:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b80c:	e1530002 	cmp	r3, r2
   3b810:	1afffdb5 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b814:	e1a00004 	mov	r0, r4
   3b818:	ebfffba1 	bl	3a6a4 <TermAnsi::el()>
   3b81c:	eafffdb2 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b820:	e1a01005 	mov	r1, r5
   3b824:	e59f02f4 	ldr	r0, [pc, #756]	; 3bb20 <TermAnsi::handleAnsiChar(unsigned char)+0x10c4>
   3b828:	ebffbb00 	bl	2a430 <strchr>
   3b82c:	e3500000 	cmp	r0, #0
   3b830:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b834:	0a000023 	beq	3b8c8 <TermAnsi::handleAnsiChar(unsigned char)+0xe6c>
   3b838:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b83c:	e3530007 	cmp	r3, #7
   3b840:	8a000004 	bhi	3b858 <TermAnsi::handleAnsiChar(unsigned char)+0xdfc>
   3b844:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b848:	e2831001 	add	r1, r3, #1
   3b84c:	e283300c 	add	r3, r3, #12
   3b850:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b854:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b858:	e3a03000 	mov	r3, #0
   3b85c:	e5d41058 	ldrb	r1, [r4, #88]	; 0x58
   3b860:	e5843054 	str	r3, [r4, #84]	; 0x54
   3b864:	e1510003 	cmp	r1, r3
   3b868:	1a00008a 	bne	3ba98 <TermAnsi::handleAnsiChar(unsigned char)+0x103c>
   3b86c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b870:	e5940018 	ldr	r0, [r4, #24]
   3b874:	e3520000 	cmp	r2, #0
   3b878:	03a02001 	moveq	r2, #1
   3b87c:	e5943010 	ldr	r3, [r4, #16]
   3b880:	e0822000 	add	r2, r2, r0
   3b884:	e2430001 	sub	r0, r3, #1
   3b888:	e1520000 	cmp	r2, r0
   3b88c:	21a02000 	movcs	r2, r0
   3b890:	e5841014 	str	r1, [r4, #20]
   3b894:	e5842018 	str	r2, [r4, #24]
   3b898:	e5941018 	ldr	r1, [r4, #24]
   3b89c:	e594000c 	ldr	r0, [r4, #12]
   3b8a0:	e5942014 	ldr	r2, [r4, #20]
   3b8a4:	e2433001 	sub	r3, r3, #1
   3b8a8:	e1510003 	cmp	r1, r3
   3b8ac:	e2400001 	sub	r0, r0, #1
   3b8b0:	21a01003 	movcs	r1, r3
   3b8b4:	e1520000 	cmp	r2, r0
   3b8b8:	21a02000 	movcs	r2, r0
   3b8bc:	e5841018 	str	r1, [r4, #24]
   3b8c0:	e5842014 	str	r2, [r4, #20]
   3b8c4:	eafffcdc 	b	3ac3c <TermAnsi::handleAnsiChar(unsigned char)+0x1e0>
   3b8c8:	e3560002 	cmp	r6, #2
   3b8cc:	1affff81 	bne	3b6d8 <TermAnsi::handleAnsiChar(unsigned char)+0xc7c>
   3b8d0:	e1a01005 	mov	r1, r5
   3b8d4:	e59f0248 	ldr	r0, [pc, #584]	; 3bb24 <TermAnsi::handleAnsiChar(unsigned char)+0x10c8>
   3b8d8:	ebffbad4 	bl	2a430 <strchr>
   3b8dc:	e3500000 	cmp	r0, #0
   3b8e0:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b8e4:	0a000016 	beq	3b944 <TermAnsi::handleAnsiChar(unsigned char)+0xee8>
   3b8e8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b8ec:	e3530007 	cmp	r3, #7
   3b8f0:	8a000004 	bhi	3b908 <TermAnsi::handleAnsiChar(unsigned char)+0xeac>
   3b8f4:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b8f8:	e2831001 	add	r1, r3, #1
   3b8fc:	e283300c 	add	r3, r3, #12
   3b900:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b904:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b908:	e3a02000 	mov	r2, #0
   3b90c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b910:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b914:	e1530002 	cmp	r3, r2
   3b918:	1afffd73 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b91c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b920:	e5941018 	ldr	r1, [r4, #24]
   3b924:	e3520000 	cmp	r2, #0
   3b928:	03a02001 	moveq	r2, #1
   3b92c:	e1520001 	cmp	r2, r1
   3b930:	e5843014 	str	r3, [r4, #20]
   3b934:	0a000000 	beq	3b93c <TermAnsi::handleAnsiChar(unsigned char)+0xee0>
   3b938:	e0413002 	sub	r3, r1, r2
   3b93c:	e5843018 	str	r3, [r4, #24]
   3b940:	eafffd69 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3b944:	e3560002 	cmp	r6, #2
   3b948:	1affff84 	bne	3b760 <TermAnsi::handleAnsiChar(unsigned char)+0xd04>
   3b94c:	e1a01005 	mov	r1, r5
   3b950:	e59f01d0 	ldr	r0, [pc, #464]	; 3bb28 <TermAnsi::handleAnsiChar(unsigned char)+0x10cc>
   3b954:	ebffbab5 	bl	2a430 <strchr>
   3b958:	e3500000 	cmp	r0, #0
   3b95c:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3b960:	0a000022 	beq	3b9f0 <TermAnsi::handleAnsiChar(unsigned char)+0xf94>
   3b964:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3b968:	e3530007 	cmp	r3, #7
   3b96c:	8a000004 	bhi	3b984 <TermAnsi::handleAnsiChar(unsigned char)+0xf28>
   3b970:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3b974:	e2831001 	add	r1, r3, #1
   3b978:	e283300c 	add	r3, r3, #12
   3b97c:	e5841050 	str	r1, [r4, #80]	; 0x50
   3b980:	e7842103 	str	r2, [r4, r3, lsl #2]
   3b984:	e3a02000 	mov	r2, #0
   3b988:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3b98c:	e5842054 	str	r2, [r4, #84]	; 0x54
   3b990:	e1530002 	cmp	r3, r2
   3b994:	1a000013 	bne	3b9e8 <TermAnsi::handleAnsiChar(unsigned char)+0xf8c>
   3b998:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3b99c:	e594300c 	ldr	r3, [r4, #12]
   3b9a0:	e3520000 	cmp	r2, #0
   3b9a4:	12422001 	subne	r2, r2, #1
   3b9a8:	e2431001 	sub	r1, r3, #1
   3b9ac:	e1520001 	cmp	r2, r1
   3b9b0:	21a02001 	movcs	r2, r1
   3b9b4:	e5842014 	str	r2, [r4, #20]
   3b9b8:	e5940010 	ldr	r0, [r4, #16]
   3b9bc:	e5941018 	ldr	r1, [r4, #24]
   3b9c0:	e5942014 	ldr	r2, [r4, #20]
   3b9c4:	e2400001 	sub	r0, r0, #1
   3b9c8:	e2433001 	sub	r3, r3, #1
   3b9cc:	e1510000 	cmp	r1, r0
   3b9d0:	21a01000 	movcs	r1, r0
   3b9d4:	e1520003 	cmp	r2, r3
   3b9d8:	21a02003 	movcs	r2, r3
   3b9dc:	e5841018 	str	r1, [r4, #24]
   3b9e0:	e5842014 	str	r2, [r4, #20]
   3b9e4:	eafffc94 	b	3ac3c <TermAnsi::handleAnsiChar(unsigned char)+0x1e0>
   3b9e8:	e594300c 	ldr	r3, [r4, #12]
   3b9ec:	eafffff1 	b	3b9b8 <TermAnsi::handleAnsiChar(unsigned char)+0xf5c>
   3b9f0:	e3560002 	cmp	r6, #2
   3b9f4:	1affff71 	bne	3b7c0 <TermAnsi::handleAnsiChar(unsigned char)+0xd64>
   3b9f8:	e1a01005 	mov	r1, r5
   3b9fc:	e59f0128 	ldr	r0, [pc, #296]	; 3bb2c <TermAnsi::handleAnsiChar(unsigned char)+0x10d0>
   3ba00:	ebffba8a 	bl	2a430 <strchr>
   3ba04:	e3500000 	cmp	r0, #0
   3ba08:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3ba0c:	0afffc24 	beq	3aaa4 <TermAnsi::handleAnsiChar(unsigned char)+0x48>
   3ba10:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3ba14:	e3530007 	cmp	r3, #7
   3ba18:	8a000004 	bhi	3ba30 <TermAnsi::handleAnsiChar(unsigned char)+0xfd4>
   3ba1c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3ba20:	e2831001 	add	r1, r3, #1
   3ba24:	e283300c 	add	r3, r3, #12
   3ba28:	e5841050 	str	r1, [r4, #80]	; 0x50
   3ba2c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3ba30:	e3a02000 	mov	r2, #0
   3ba34:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3ba38:	e5842054 	str	r2, [r4, #84]	; 0x54
   3ba3c:	e1530002 	cmp	r3, r2
   3ba40:	15943010 	ldrne	r3, [r4, #16]
   3ba44:	1a000007 	bne	3ba68 <TermAnsi::handleAnsiChar(unsigned char)+0x100c>
   3ba48:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3ba4c:	e5943010 	ldr	r3, [r4, #16]
   3ba50:	e3520000 	cmp	r2, #0
   3ba54:	12422001 	subne	r2, r2, #1
   3ba58:	e2431001 	sub	r1, r3, #1
   3ba5c:	e1520001 	cmp	r2, r1
   3ba60:	21a02001 	movcs	r2, r1
   3ba64:	e5842018 	str	r2, [r4, #24]
   3ba68:	e5941018 	ldr	r1, [r4, #24]
   3ba6c:	e594000c 	ldr	r0, [r4, #12]
   3ba70:	e2433001 	sub	r3, r3, #1
   3ba74:	e5942014 	ldr	r2, [r4, #20]
   3ba78:	e1510003 	cmp	r1, r3
   3ba7c:	e2400001 	sub	r0, r0, #1
   3ba80:	31a03001 	movcc	r3, r1
   3ba84:	e1520000 	cmp	r2, r0
   3ba88:	21a02000 	movcs	r2, r0
   3ba8c:	e5843018 	str	r3, [r4, #24]
   3ba90:	e5842014 	str	r2, [r4, #20]
   3ba94:	eafffc68 	b	3ac3c <TermAnsi::handleAnsiChar(unsigned char)+0x1e0>
   3ba98:	e5943010 	ldr	r3, [r4, #16]
   3ba9c:	eaffff7d 	b	3b898 <TermAnsi::handleAnsiChar(unsigned char)+0xe3c>
   3baa0:	00047850 	.word	0x00047850
   3baa4:	00047854 	.word	0x00047854
   3baa8:	00043278 	.word	0x00043278
   3baac:	000475e0 	.word	0x000475e0
   3bab0:	00047858 	.word	0x00047858
   3bab4:	00044270 	.word	0x00044270
   3bab8:	000478ac 	.word	0x000478ac
   3babc:	0004163c 	.word	0x0004163c
   3bac0:	00043320 	.word	0x00043320
   3bac4:	00043324 	.word	0x00043324
   3bac8:	0004785c 	.word	0x0004785c
   3bacc:	00047864 	.word	0x00047864
   3bad0:	00046a30 	.word	0x00046a30
   3bad4:	000453f0 	.word	0x000453f0
   3bad8:	0003f960 	.word	0x0003f960
   3badc:	00040230 	.word	0x00040230
   3bae0:	00043f8c 	.word	0x00043f8c
   3bae4:	00044864 	.word	0x00044864
   3bae8:	000478a8 	.word	0x000478a8
   3baec:	0003fab0 	.word	0x0003fab0
   3baf0:	0003f574 	.word	0x0003f574
   3baf4:	00041420 	.word	0x00041420
   3baf8:	000478a0 	.word	0x000478a0
   3bafc:	000478a4 	.word	0x000478a4
   3bb00:	00045b9c 	.word	0x00045b9c
   3bb04:	0004789c 	.word	0x0004789c
   3bb08:	00041604 	.word	0x00041604
   3bb0c:	0003f4cc 	.word	0x0003f4cc
   3bb10:	00047890 	.word	0x00047890
   3bb14:	00047894 	.word	0x00047894
   3bb18:	00047898 	.word	0x00047898
   3bb1c:	00044800 	.word	0x00044800
   3bb20:	00044b30 	.word	0x00044b30
   3bb24:	00047888 	.word	0x00047888
   3bb28:	0004788c 	.word	0x0004788c
   3bb2c:	00046998 	.word	0x00046998
   3bb30:	0004787c 	.word	0x0004787c
   3bb34:	00047880 	.word	0x00047880
   3bb38:	00044efc 	.word	0x00044efc
   3bb3c:	00047884 	.word	0x00047884
   3bb40:	00043270 	.word	0x00043270
   3bb44:	00047868 	.word	0x00047868
   3bb48:	0004786c 	.word	0x0004786c
   3bb4c:	00047870 	.word	0x00047870
   3bb50:	e1a01005 	mov	r1, r5
   3bb54:	e51f002c 	ldr	r0, [pc, #-44]	; 3bb30 <TermAnsi::handleAnsiChar(unsigned char)+0x10d4>
   3bb58:	ebffba34 	bl	2a430 <strchr>
   3bb5c:	e3500000 	cmp	r0, #0
   3bb60:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3bb64:	0a000013 	beq	3bbb8 <TermAnsi::handleAnsiChar(unsigned char)+0x115c>
   3bb68:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bb6c:	e3530007 	cmp	r3, #7
   3bb70:	8a000004 	bhi	3bb88 <TermAnsi::handleAnsiChar(unsigned char)+0x112c>
   3bb74:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bb78:	e2831001 	add	r1, r3, #1
   3bb7c:	e283300c 	add	r3, r3, #12
   3bb80:	e5841050 	str	r1, [r4, #80]	; 0x50
   3bb84:	e7842103 	str	r2, [r4, r3, lsl #2]
   3bb88:	e3a02000 	mov	r2, #0
   3bb8c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3bb90:	e5842054 	str	r2, [r4, #84]	; 0x54
   3bb94:	e1530002 	cmp	r3, r2
   3bb98:	1afffcd3 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3bb9c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3bba0:	e5941018 	ldr	r1, [r4, #24]
   3bba4:	e3520000 	cmp	r2, #0
   3bba8:	03a02001 	moveq	r2, #1
   3bbac:	e1520001 	cmp	r2, r1
   3bbb0:	8affff61 	bhi	3b93c <TermAnsi::handleAnsiChar(unsigned char)+0xee0>
   3bbb4:	eaffff5f 	b	3b938 <TermAnsi::handleAnsiChar(unsigned char)+0xedc>
   3bbb8:	e3560002 	cmp	r6, #2
   3bbbc:	1affff41 	bne	3b8c8 <TermAnsi::handleAnsiChar(unsigned char)+0xe6c>
   3bbc0:	e1a01005 	mov	r1, r5
   3bbc4:	e51f0098 	ldr	r0, [pc, #-152]	; 3bb34 <TermAnsi::handleAnsiChar(unsigned char)+0x10d8>
   3bbc8:	ebffba18 	bl	2a430 <strchr>
   3bbcc:	e3500000 	cmp	r0, #0
   3bbd0:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3bbd4:	0a000017 	beq	3bc38 <TermAnsi::handleAnsiChar(unsigned char)+0x11dc>
   3bbd8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bbdc:	e3530007 	cmp	r3, #7
   3bbe0:	8a000004 	bhi	3bbf8 <TermAnsi::handleAnsiChar(unsigned char)+0x119c>
   3bbe4:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bbe8:	e2831001 	add	r1, r3, #1
   3bbec:	e283300c 	add	r3, r3, #12
   3bbf0:	e5841050 	str	r1, [r4, #80]	; 0x50
   3bbf4:	e7842103 	str	r2, [r4, r3, lsl #2]
   3bbf8:	e3a02000 	mov	r2, #0
   3bbfc:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3bc00:	e5842054 	str	r2, [r4, #84]	; 0x54
   3bc04:	e1530002 	cmp	r3, r2
   3bc08:	1affffa2 	bne	3ba98 <TermAnsi::handleAnsiChar(unsigned char)+0x103c>
   3bc0c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3bc10:	e5941018 	ldr	r1, [r4, #24]
   3bc14:	e3520000 	cmp	r2, #0
   3bc18:	03a02001 	moveq	r2, #1
   3bc1c:	e5943010 	ldr	r3, [r4, #16]
   3bc20:	e0822001 	add	r2, r2, r1
   3bc24:	e2431001 	sub	r1, r3, #1
   3bc28:	e1520001 	cmp	r2, r1
   3bc2c:	21a02001 	movcs	r2, r1
   3bc30:	e5842018 	str	r2, [r4, #24]
   3bc34:	eaffff17 	b	3b898 <TermAnsi::handleAnsiChar(unsigned char)+0xe3c>
   3bc38:	e3560002 	cmp	r6, #2
   3bc3c:	1affff40 	bne	3b944 <TermAnsi::handleAnsiChar(unsigned char)+0xee8>
   3bc40:	e1a01005 	mov	r1, r5
   3bc44:	e51f0114 	ldr	r0, [pc, #-276]	; 3bb38 <TermAnsi::handleAnsiChar(unsigned char)+0x10dc>
   3bc48:	ebffb9f8 	bl	2a430 <strchr>
   3bc4c:	e3500000 	cmp	r0, #0
   3bc50:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3bc54:	0a000017 	beq	3bcb8 <TermAnsi::handleAnsiChar(unsigned char)+0x125c>
   3bc58:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bc5c:	e3530007 	cmp	r3, #7
   3bc60:	8a000004 	bhi	3bc78 <TermAnsi::handleAnsiChar(unsigned char)+0x121c>
   3bc64:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bc68:	e2831001 	add	r1, r3, #1
   3bc6c:	e283300c 	add	r3, r3, #12
   3bc70:	e5841050 	str	r1, [r4, #80]	; 0x50
   3bc74:	e7842103 	str	r2, [r4, r3, lsl #2]
   3bc78:	e3a02000 	mov	r2, #0
   3bc7c:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3bc80:	e5842054 	str	r2, [r4, #84]	; 0x54
   3bc84:	e1530002 	cmp	r3, r2
   3bc88:	1affff56 	bne	3b9e8 <TermAnsi::handleAnsiChar(unsigned char)+0xf8c>
   3bc8c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3bc90:	e5941014 	ldr	r1, [r4, #20]
   3bc94:	e3520000 	cmp	r2, #0
   3bc98:	03a02001 	moveq	r2, #1
   3bc9c:	e594300c 	ldr	r3, [r4, #12]
   3bca0:	e0822001 	add	r2, r2, r1
   3bca4:	e2431001 	sub	r1, r3, #1
   3bca8:	e1520001 	cmp	r2, r1
   3bcac:	21a02001 	movcs	r2, r1
   3bcb0:	e5842014 	str	r2, [r4, #20]
   3bcb4:	eaffff3f 	b	3b9b8 <TermAnsi::handleAnsiChar(unsigned char)+0xf5c>
   3bcb8:	e3560002 	cmp	r6, #2
   3bcbc:	1affff4b 	bne	3b9f0 <TermAnsi::handleAnsiChar(unsigned char)+0xf94>
   3bcc0:	e1a01005 	mov	r1, r5
   3bcc4:	e51f0190 	ldr	r0, [pc, #-400]	; 3bb3c <TermAnsi::handleAnsiChar(unsigned char)+0x10e0>
   3bcc8:	ebffb9d8 	bl	2a430 <strchr>
   3bccc:	e3500000 	cmp	r0, #0
   3bcd0:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3bcd4:	0afffb70 	beq	3aa9c <TermAnsi::handleAnsiChar(unsigned char)+0x40>
   3bcd8:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bcdc:	e3530007 	cmp	r3, #7
   3bce0:	8a000004 	bhi	3bcf8 <TermAnsi::handleAnsiChar(unsigned char)+0x129c>
   3bce4:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bce8:	e2831001 	add	r1, r3, #1
   3bcec:	e283300c 	add	r3, r3, #12
   3bcf0:	e5841050 	str	r1, [r4, #80]	; 0x50
   3bcf4:	e7842103 	str	r2, [r4, r3, lsl #2]
   3bcf8:	e3a02000 	mov	r2, #0
   3bcfc:	e5d43058 	ldrb	r3, [r4, #88]	; 0x58
   3bd00:	e5842054 	str	r2, [r4, #84]	; 0x54
   3bd04:	e1530002 	cmp	r3, r2
   3bd08:	1afffc77 	bne	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3bd0c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
   3bd10:	e5941014 	ldr	r1, [r4, #20]
   3bd14:	e3520000 	cmp	r2, #0
   3bd18:	03a02001 	moveq	r2, #1
   3bd1c:	e1520001 	cmp	r2, r1
   3bd20:	90413002 	subls	r3, r1, r2
   3bd24:	e1530001 	cmp	r3, r1
   3bd28:	21a03001 	movcs	r3, r1
   3bd2c:	e5843014 	str	r3, [r4, #20]
   3bd30:	eafffc6d 	b	3aeec <TermAnsi::handleAnsiChar(unsigned char)+0x490>
   3bd34:	e5842014 	str	r2, [r4, #20]
   3bd38:	eaffff1e 	b	3b9b8 <TermAnsi::handleAnsiChar(unsigned char)+0xf5c>
   3bd3c:	e1a01005 	mov	r1, r5
   3bd40:	e51f0208 	ldr	r0, [pc, #-520]	; 3bb40 <TermAnsi::handleAnsiChar(unsigned char)+0x10e4>
   3bd44:	ebffb9b9 	bl	2a430 <strchr>
   3bd48:	e3500000 	cmp	r0, #0
   3bd4c:	1afffb94 	bne	3aba4 <TermAnsi::handleAnsiChar(unsigned char)+0x148>
   3bd50:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3bd54:	e3560002 	cmp	r6, #2
   3bd58:	1affff96 	bne	3bbb8 <TermAnsi::handleAnsiChar(unsigned char)+0x115c>
   3bd5c:	e1a01005 	mov	r1, r5
   3bd60:	e51f0224 	ldr	r0, [pc, #-548]	; 3bb44 <TermAnsi::handleAnsiChar(unsigned char)+0x10e8>
   3bd64:	ebffb9b1 	bl	2a430 <strchr>
   3bd68:	e3500000 	cmp	r0, #0
   3bd6c:	0a00000b 	beq	3bda0 <TermAnsi::handleAnsiChar(unsigned char)+0x1344>
   3bd70:	e5943050 	ldr	r3, [r4, #80]	; 0x50
   3bd74:	e3530007 	cmp	r3, #7
   3bd78:	8a000004 	bhi	3bd90 <TermAnsi::handleAnsiChar(unsigned char)+0x1334>
   3bd7c:	e5942054 	ldr	r2, [r4, #84]	; 0x54
   3bd80:	e2831001 	add	r1, r3, #1
   3bd84:	e283300c 	add	r3, r3, #12
   3bd88:	e5841050 	str	r1, [r4, #80]	; 0x50
   3bd8c:	e7842103 	str	r2, [r4, r3, lsl #2]
   3bd90:	e3a03000 	mov	r3, #0
   3bd94:	e3a00001 	mov	r0, #1
   3bd98:	e5843054 	str	r3, [r4, #84]	; 0x54
   3bd9c:	eafffb79 	b	3ab88 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3bda0:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3bda4:	e3560002 	cmp	r6, #2
   3bda8:	1affffa2 	bne	3bc38 <TermAnsi::handleAnsiChar(unsigned char)+0x11dc>
   3bdac:	e1a01005 	mov	r1, r5
   3bdb0:	e51f0270 	ldr	r0, [pc, #-624]	; 3bb48 <TermAnsi::handleAnsiChar(unsigned char)+0x10ec>
   3bdb4:	ebffb99d 	bl	2a430 <strchr>
   3bdb8:	e3500000 	cmp	r0, #0
   3bdbc:	0a000001 	beq	3bdc8 <TermAnsi::handleAnsiChar(unsigned char)+0x136c>
   3bdc0:	e3a00001 	mov	r0, #1
   3bdc4:	eafffb6f 	b	3ab88 <TermAnsi::handleAnsiChar(unsigned char)+0x12c>
   3bdc8:	e5d4602c 	ldrb	r6, [r4, #44]	; 0x2c
   3bdcc:	e3560002 	cmp	r6, #2
   3bdd0:	1affffb8 	bne	3bcb8 <TermAnsi::handleAnsiChar(unsigned char)+0x125c>
   3bdd4:	e1a01005 	mov	r1, r5
   3bdd8:	e51f0294 	ldr	r0, [pc, #-660]	; 3bb4c <TermAnsi::handleAnsiChar(unsigned char)+0x10f0>
   3bddc:	ebffb993 	bl	2a430 <strchr>
   3bde0:	e3500000 	cmp	r0, #0
   3bde4:	05d4602c 	ldrbeq	r6, [r4, #44]	; 0x2c
   3bde8:	0afffb29 	beq	3aa94 <TermAnsi::handleAnsiChar(unsigned char)+0x38>
   3bdec:	e3a0500a 	mov	r5, #10
   3bdf0:	e5943054 	ldr	r3, [r4, #84]	; 0x54
   3bdf4:	e28d0004 	add	r0, sp, #4
   3bdf8:	e0050395 	mul	r5, r5, r3
   3bdfc:	ebffbabf 	bl	2a900 <atoi>
   3be00:	e0800005 	add	r0, r0, r5
   3be04:	e5840054 	str	r0, [r4, #84]	; 0x54
   3be08:	eaffffec 	b	3bdc0 <TermAnsi::handleAnsiChar(unsigned char)+0x1364>

0003be0c <TermAnsi::putChar(unsigned long)>:
   3be0c:	e92d4070 	push	{r4, r5, r6, lr}
   3be10:	e1a04001 	mov	r4, r1
   3be14:	e6ef1071 	uxtb	r1, r1
   3be18:	e1a05000 	mov	r5, r0
   3be1c:	ebfffb0e 	bl	3aa5c <TermAnsi::handleAnsiChar(unsigned char)>
   3be20:	e3500000 	cmp	r0, #0
   3be24:	18bd8070 	popne	{r4, r5, r6, pc}
   3be28:	e1a01004 	mov	r1, r4
   3be2c:	e1a00005 	mov	r0, r5
   3be30:	ebfff97e 	bl	3a430 <TermAnsi::writeCharAtCurs(int)>
   3be34:	e3a03001 	mov	r3, #1
   3be38:	e5c5301c 	strb	r3, [r5, #28]
   3be3c:	e8bd8070 	pop	{r4, r5, r6, pc}

0003be40 <TermAnsi::dsr()>:
   3be40:	e12fff1e 	bx	lr

0003be44 <TermAnsi::init(unsigned long, unsigned long)>:
   3be44:	e92d4010 	push	{r4, lr}
   3be48:	e1a04000 	mov	r4, r0
   3be4c:	eb00004b 	bl	3bf80 <TermEmu::init(unsigned long, unsigned long)>
   3be50:	e5943000 	ldr	r3, [r4]
   3be54:	e1a00004 	mov	r0, r4
   3be58:	e8bd4010 	pop	{r4, lr}
   3be5c:	e5933010 	ldr	r3, [r3, #16]
   3be60:	e12fff13 	bx	r3

0003be64 <TermAnsi::reset()>:
   3be64:	e92d4070 	push	{r4, r5, r6, lr}
   3be68:	e1a04000 	mov	r4, r0
   3be6c:	eb000029 	bl	3bf18 <TermEmu::reset()>
   3be70:	e3a00000 	mov	r0, #0
   3be74:	e3a01001 	mov	r1, #1
   3be78:	e2843e82 	add	r3, r4, #2080	; 0x820
   3be7c:	e2842d22 	add	r2, r4, #2176	; 0x880
   3be80:	e283300b 	add	r3, r3, #11
   3be84:	e282200f 	add	r2, r2, #15
   3be88:	e5c4001d 	strb	r0, [r4, #29]
   3be8c:	e5840050 	str	r0, [r4, #80]	; 0x50
   3be90:	e5840054 	str	r0, [r4, #84]	; 0x54
   3be94:	e5c40058 	strb	r0, [r4, #88]	; 0x58
   3be98:	e5e31001 	strb	r1, [r3, #1]!
   3be9c:	e1530002 	cmp	r3, r2
   3bea0:	1afffffc 	bne	3be98 <TermAnsi::reset()+0x34>
   3bea4:	e3a05000 	mov	r5, #0
   3bea8:	e3a0300f 	mov	r3, #15
   3beac:	e3a02020 	mov	r2, #32
   3beb0:	e5c45892 	strb	r5, [r4, #2194]	; 0x892
   3beb4:	e5c45893 	strb	r5, [r4, #2195]	; 0x893
   3beb8:	e1a01005 	mov	r1, r5
   3bebc:	e5c43891 	strb	r3, [r4, #2193]	; 0x891
   3bec0:	e5c42890 	strb	r2, [r4, #2192]	; 0x890
   3bec4:	e2840030 	add	r0, r4, #48	; 0x30
   3bec8:	ebffb819 	bl	29f34 <memset>
   3becc:	e5c4502c 	strb	r5, [r4, #44]	; 0x2c
   3bed0:	e5845050 	str	r5, [r4, #80]	; 0x50
   3bed4:	e5845054 	str	r5, [r4, #84]	; 0x54
   3bed8:	e5c45058 	strb	r5, [r4, #88]	; 0x58
   3bedc:	e8bd8070 	pop	{r4, r5, r6, pc}

0003bee0 <TermEmu::sendData(int)>:
   3bee0:	e92d4010 	push	{r4, lr}
   3bee4:	e1a04001 	mov	r4, r1
   3bee8:	e24dd008 	sub	sp, sp, #8
   3beec:	ebffab36 	bl	26bcc <CLogger::Get()>
   3bef0:	e58d4000 	str	r4, [sp]
   3bef4:	e59f3010 	ldr	r3, [pc, #16]	; 3bf0c <TermEmu::sendData(int)+0x2c>
   3bef8:	e3a02004 	mov	r2, #4
   3befc:	e59f100c 	ldr	r1, [pc, #12]	; 3bf10 <TermEmu::sendData(int)+0x30>
   3bf00:	ebffaa6e 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3bf04:	e28dd008 	add	sp, sp, #8
   3bf08:	e8bd8010 	pop	{r4, pc}
   3bf0c:	00047838 	.word	0x00047838
   3bf10:	00047848 	.word	0x00047848

0003bf14 <TermEmu::putChar(unsigned long)>:
   3bf14:	e12fff1e 	bx	lr

0003bf18 <TermEmu::reset()>:
   3bf18:	e12fff1e 	bx	lr

0003bf1c <TermEmu::~TermEmu()>:
   3bf1c:	e92d4010 	push	{r4, lr}
   3bf20:	e1a04000 	mov	r4, r0
   3bf24:	e5900004 	ldr	r0, [r0, #4]
   3bf28:	e59f3014 	ldr	r3, [pc, #20]	; 3bf44 <TermEmu::~TermEmu()+0x28>
   3bf2c:	e3500000 	cmp	r0, #0
   3bf30:	e5843000 	str	r3, [r4]
   3bf34:	0a000000 	beq	3bf3c <TermEmu::~TermEmu()+0x20>
   3bf38:	ebffbc55 	bl	2b094 <operator delete[](void*)>
   3bf3c:	e1a00004 	mov	r0, r4
   3bf40:	e8bd8010 	pop	{r4, pc}
   3bf44:	000478b8 	.word	0x000478b8

0003bf48 <TermEmu::~TermEmu()>:
   3bf48:	e92d4010 	push	{r4, lr}
   3bf4c:	e1a04000 	mov	r4, r0
   3bf50:	e5900004 	ldr	r0, [r0, #4]
   3bf54:	e59f3020 	ldr	r3, [pc, #32]	; 3bf7c <TermEmu::~TermEmu()+0x34>
   3bf58:	e3500000 	cmp	r0, #0
   3bf5c:	e5843000 	str	r3, [r4]
   3bf60:	0a000000 	beq	3bf68 <TermEmu::~TermEmu()+0x20>
   3bf64:	ebffbc4a 	bl	2b094 <operator delete[](void*)>
   3bf68:	e1a00004 	mov	r0, r4
   3bf6c:	e3a0102c 	mov	r1, #44	; 0x2c
   3bf70:	ebffbc4d 	bl	2b0ac <operator delete(void*, unsigned int)>
   3bf74:	e1a00004 	mov	r0, r4
   3bf78:	e8bd8010 	pop	{r4, pc}
   3bf7c:	000478b8 	.word	0x000478b8

0003bf80 <TermEmu::init(unsigned long, unsigned long)>:
   3bf80:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3bf84:	e1a04000 	mov	r4, r0
   3bf88:	e5900004 	ldr	r0, [r0, #4]
   3bf8c:	e1a07001 	mov	r7, r1
   3bf90:	e3500000 	cmp	r0, #0
   3bf94:	e1a08002 	mov	r8, r2
   3bf98:	0a000000 	beq	3bfa0 <TermEmu::init(unsigned long, unsigned long)+0x20>
   3bf9c:	ebffbc3c 	bl	2b094 <operator delete[](void*)>
   3bfa0:	e0090798 	mul	r9, r8, r7
   3bfa4:	e379022e 	cmn	r9, #-536870910	; 0xe0000002
   3bfa8:	91a00109 	lslls	r0, r9, #2
   3bfac:	83e00000 	mvnhi	r0, #0
   3bfb0:	ebffbc30 	bl	2b078 <operator new[](unsigned int)>
   3bfb4:	e259c001 	subs	ip, r9, #1
   3bfb8:	51a03000 	movpl	r3, r0
   3bfbc:	53a06020 	movpl	r6, #32
   3bfc0:	53a0500f 	movpl	r5, #15
   3bfc4:	53a0e000 	movpl	lr, #0
   3bfc8:	4a000007 	bmi	3bfec <TermEmu::init(unsigned long, unsigned long)+0x6c>
   3bfcc:	e24cc001 	sub	ip, ip, #1
   3bfd0:	e37c0001 	cmn	ip, #1
   3bfd4:	e5c36000 	strb	r6, [r3]
   3bfd8:	e5c35001 	strb	r5, [r3, #1]
   3bfdc:	e5c3e002 	strb	lr, [r3, #2]
   3bfe0:	e5c3e003 	strb	lr, [r3, #3]
   3bfe4:	e2833004 	add	r3, r3, #4
   3bfe8:	1afffff7 	bne	3bfcc <TermEmu::init(unsigned long, unsigned long)+0x4c>
   3bfec:	e3a03000 	mov	r3, #0
   3bff0:	e3a0105f 	mov	r1, #95	; 0x5f
   3bff4:	e3a02020 	mov	r2, #32
   3bff8:	e9840201 	stmib	r4, {r0, r9}
   3bffc:	e584700c 	str	r7, [r4, #12]
   3c000:	e5848010 	str	r8, [r4, #16]
   3c004:	e5843014 	str	r3, [r4, #20]
   3c008:	e5843018 	str	r3, [r4, #24]
   3c00c:	e5c4301c 	strb	r3, [r4, #28]
   3c010:	e5c4301d 	strb	r3, [r4, #29]
   3c014:	e5c4301e 	strb	r3, [r4, #30]
   3c018:	e5841020 	str	r1, [r4, #32]
   3c01c:	e5842024 	str	r2, [r4, #36]	; 0x24
   3c020:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003c024 <TermEmu::TermEmu()>:
   3c024:	e3a02000 	mov	r2, #0
   3c028:	e92d4070 	push	{r4, r5, r6, lr}
   3c02c:	e3a01020 	mov	r1, #32
   3c030:	e3a0605f 	mov	r6, #95	; 0x5f
   3c034:	e3a0400f 	mov	r4, #15
   3c038:	e3a0e050 	mov	lr, #80	; 0x50
   3c03c:	e3a0c019 	mov	ip, #25
   3c040:	e59f5040 	ldr	r5, [pc, #64]	; 3c088 <TermEmu::TermEmu()+0x64>
   3c044:	e5806020 	str	r6, [r0, #32]
   3c048:	e5805000 	str	r5, [r0]
   3c04c:	e5c04029 	strb	r4, [r0, #41]	; 0x29
   3c050:	e580e00c 	str	lr, [r0, #12]
   3c054:	e580c010 	str	ip, [r0, #16]
   3c058:	e5802014 	str	r2, [r0, #20]
   3c05c:	e5802018 	str	r2, [r0, #24]
   3c060:	e5c0201c 	strb	r2, [r0, #28]
   3c064:	e5c0201d 	strb	r2, [r0, #29]
   3c068:	e5c0201e 	strb	r2, [r0, #30]
   3c06c:	e5c0202a 	strb	r2, [r0, #42]	; 0x2a
   3c070:	e5c0202b 	strb	r2, [r0, #43]	; 0x2b
   3c074:	e5802004 	str	r2, [r0, #4]
   3c078:	e5802008 	str	r2, [r0, #8]
   3c07c:	e5801024 	str	r1, [r0, #36]	; 0x24
   3c080:	e5c01028 	strb	r1, [r0, #40]	; 0x28
   3c084:	e8bd8070 	pop	{r4, r5, r6, pc}
   3c088:	000478b8 	.word	0x000478b8

0003c08c <McTRS80CmdFormat::McTRS80CmdFormat()>:
   3c08c:	e12fff1e 	bx	lr

0003c090 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)>:
   3c090:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c094:	e24dd05c 	sub	sp, sp, #92	; 0x5c
   3c098:	e59d5084 	ldr	r5, [sp, #132]	; 0x84
   3c09c:	e59d7080 	ldr	r7, [sp, #128]	; 0x80
   3c0a0:	e2458002 	sub	r8, r5, #2
   3c0a4:	e3580000 	cmp	r8, #0
   3c0a8:	da00002b 	ble	3c15c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0xcc>
   3c0ac:	e58d200c 	str	r2, [sp, #12]
   3c0b0:	e1a0b003 	mov	fp, r3
   3c0b4:	e3a02000 	mov	r2, #0
   3c0b8:	e59fa250 	ldr	sl, [pc, #592]	; 3c310 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x280>
   3c0bc:	e58d1008 	str	r1, [sp, #8]
   3c0c0:	e2455001 	sub	r5, r5, #1
   3c0c4:	e1a03007 	mov	r3, r7
   3c0c8:	e7f39002 	ldrb	r9, [r3, r2]!
   3c0cc:	e2826002 	add	r6, r2, #2
   3c0d0:	e5d34001 	ldrb	r4, [r3, #1]
   3c0d4:	e2493001 	sub	r3, r9, #1
   3c0d8:	e1540005 	cmp	r4, r5
   3c0dc:	a1a04005 	movge	r4, r5
   3c0e0:	e3540000 	cmp	r4, #0
   3c0e4:	03a04c01 	moveq	r4, #256	; 0x100
   3c0e8:	e3530004 	cmp	r3, #4
   3c0ec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3c0f0:	ea00003b 	b	3c1e4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x154>
   3c0f4:	0003c18c 	.word	0x0003c18c
   3c0f8:	0003c164 	.word	0x0003c164
   3c0fc:	0003c148 	.word	0x0003c148
   3c100:	0003c130 	.word	0x0003c130
   3c104:	0003c108 	.word	0x0003c108
   3c108:	ebffaaaf 	bl	26bcc <CLogger::Get()>
   3c10c:	e59f3200 	ldr	r3, [pc, #512]	; 3c314 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x284>
   3c110:	e3a02004 	mov	r2, #4
   3c114:	e1a0100a 	mov	r1, sl
   3c118:	ebffa9e8 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c11c:	e0862004 	add	r2, r6, r4
   3c120:	e1580002 	cmp	r8, r2
   3c124:	caffffe6 	bgt	3c0c4 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x34>
   3c128:	e28dd05c 	add	sp, sp, #92	; 0x5c
   3c12c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c130:	ebffaaa5 	bl	26bcc <CLogger::Get()>
   3c134:	e59f31dc 	ldr	r3, [pc, #476]	; 3c318 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x288>
   3c138:	e3a02004 	mov	r2, #4
   3c13c:	e1a0100a 	mov	r1, sl
   3c140:	ebffa9de 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c144:	eafffff4 	b	3c11c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3c148:	ebffaa9f 	bl	26bcc <CLogger::Get()>
   3c14c:	e59f31c8 	ldr	r3, [pc, #456]	; 3c31c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x28c>
   3c150:	e3a02004 	mov	r2, #4
   3c154:	e59f11b4 	ldr	r1, [pc, #436]	; 3c310 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x280>
   3c158:	ebffa9d8 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c15c:	e28dd05c 	add	sp, sp, #92	; 0x5c
   3c160:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c164:	e3540001 	cmp	r4, #1
   3c168:	0a000048 	beq	3c290 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x200>
   3c16c:	e3540002 	cmp	r4, #2
   3c170:	0a000022 	beq	3c200 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x170>
   3c174:	ebffaa94 	bl	26bcc <CLogger::Get()>
   3c178:	e59f31a0 	ldr	r3, [pc, #416]	; 3c320 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x290>
   3c17c:	e3a02004 	mov	r2, #4
   3c180:	e1a0100a 	mov	r1, sl
   3c184:	ebffa9cd 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c188:	eaffffe3 	b	3c11c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3c18c:	e0873006 	add	r3, r7, r6
   3c190:	e7d79006 	ldrb	r9, [r7, r6]
   3c194:	e5d33001 	ldrb	r3, [r3, #1]
   3c198:	e3540002 	cmp	r4, #2
   3c19c:	d28440fe 	addle	r4, r4, #254	; 0xfe
   3c1a0:	c2444002 	subgt	r4, r4, #2
   3c1a4:	e0899403 	add	r9, r9, r3, lsl #8
   3c1a8:	e2826004 	add	r6, r2, #4
   3c1ac:	e1a0300b 	mov	r3, fp
   3c1b0:	e1a02004 	mov	r2, r4
   3c1b4:	e0871006 	add	r1, r7, r6
   3c1b8:	e1a00009 	mov	r0, r9
   3c1bc:	e59dc008 	ldr	ip, [sp, #8]
   3c1c0:	e12fff3c 	blx	ip
   3c1c4:	ebffaa80 	bl	26bcc <CLogger::Get()>
   3c1c8:	e58d4004 	str	r4, [sp, #4]
   3c1cc:	e58d9000 	str	r9, [sp]
   3c1d0:	e59f314c 	ldr	r3, [pc, #332]	; 3c324 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x294>
   3c1d4:	e3a02004 	mov	r2, #4
   3c1d8:	e1a0100a 	mov	r1, sl
   3c1dc:	ebffa9b7 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c1e0:	eaffffcd 	b	3c11c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3c1e4:	ebffaa78 	bl	26bcc <CLogger::Get()>
   3c1e8:	e58d9000 	str	r9, [sp]
   3c1ec:	e59f3134 	ldr	r3, [pc, #308]	; 3c328 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x298>
   3c1f0:	e3a02004 	mov	r2, #4
   3c1f4:	e1a0100a 	mov	r1, sl
   3c1f8:	ebffa9b0 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c1fc:	eaffffc6 	b	3c11c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3c200:	e3a03000 	mov	r3, #0
   3c204:	e0871006 	add	r1, r7, r6
   3c208:	e5d1c001 	ldrb	ip, [r1, #1]
   3c20c:	e7d71006 	ldrb	r1, [r7, r6]
   3c210:	e28d0058 	add	r0, sp, #88	; 0x58
   3c214:	e081140c 	add	r1, r1, ip, lsl #8
   3c218:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   3c21c:	e5201048 	str	r1, [r0, #-72]!	; 0xffffffb8
   3c220:	e58d3028 	str	r3, [sp, #40]	; 0x28
   3c224:	e1a0100b 	mov	r1, fp
   3c228:	e58d3024 	str	r3, [sp, #36]	; 0x24
   3c22c:	e58d3020 	str	r3, [sp, #32]
   3c230:	e58d301c 	str	r3, [sp, #28]
   3c234:	e58d3018 	str	r3, [sp, #24]
   3c238:	e58d3014 	str	r3, [sp, #20]
   3c23c:	e58d3040 	str	r3, [sp, #64]	; 0x40
   3c240:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   3c244:	e58d3038 	str	r3, [sp, #56]	; 0x38
   3c248:	e58d3034 	str	r3, [sp, #52]	; 0x34
   3c24c:	e58d3030 	str	r3, [sp, #48]	; 0x30
   3c250:	e58d3054 	str	r3, [sp, #84]	; 0x54
   3c254:	e58d3050 	str	r3, [sp, #80]	; 0x50
   3c258:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   3c25c:	e58d3048 	str	r3, [sp, #72]	; 0x48
   3c260:	e58d3044 	str	r3, [sp, #68]	; 0x44
   3c264:	e59d300c 	ldr	r3, [sp, #12]
   3c268:	e2826004 	add	r6, r2, #4
   3c26c:	e12fff33 	blx	r3
   3c270:	ebffaa55 	bl	26bcc <CLogger::Get()>
   3c274:	e59d2010 	ldr	r2, [sp, #16]
   3c278:	e59f30ac 	ldr	r3, [pc, #172]	; 3c32c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x29c>
   3c27c:	e58d2000 	str	r2, [sp]
   3c280:	e1a0100a 	mov	r1, sl
   3c284:	e3a02004 	mov	r2, #4
   3c288:	ebffa98c 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c28c:	eaffffa2 	b	3c11c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3c290:	e3a03000 	mov	r3, #0
   3c294:	e7d72006 	ldrb	r2, [r7, r6]
   3c298:	e28d0058 	add	r0, sp, #88	; 0x58
   3c29c:	e1a0100b 	mov	r1, fp
   3c2a0:	e5202048 	str	r2, [r0, #-72]!	; 0xffffffb8
   3c2a4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   3c2a8:	e58d3028 	str	r3, [sp, #40]	; 0x28
   3c2ac:	e58d3024 	str	r3, [sp, #36]	; 0x24
   3c2b0:	e58d3020 	str	r3, [sp, #32]
   3c2b4:	e58d301c 	str	r3, [sp, #28]
   3c2b8:	e58d3018 	str	r3, [sp, #24]
   3c2bc:	e58d3014 	str	r3, [sp, #20]
   3c2c0:	e58d3040 	str	r3, [sp, #64]	; 0x40
   3c2c4:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   3c2c8:	e58d3038 	str	r3, [sp, #56]	; 0x38
   3c2cc:	e58d3034 	str	r3, [sp, #52]	; 0x34
   3c2d0:	e58d3030 	str	r3, [sp, #48]	; 0x30
   3c2d4:	e58d3054 	str	r3, [sp, #84]	; 0x54
   3c2d8:	e58d3050 	str	r3, [sp, #80]	; 0x50
   3c2dc:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   3c2e0:	e58d3048 	str	r3, [sp, #72]	; 0x48
   3c2e4:	e58d3044 	str	r3, [sp, #68]	; 0x44
   3c2e8:	e59d300c 	ldr	r3, [sp, #12]
   3c2ec:	e12fff33 	blx	r3
   3c2f0:	ebffaa35 	bl	26bcc <CLogger::Get()>
   3c2f4:	e59d2010 	ldr	r2, [sp, #16]
   3c2f8:	e59f3030 	ldr	r3, [pc, #48]	; 3c330 <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x2a0>
   3c2fc:	e58d2000 	str	r2, [sp]
   3c300:	e1a0100a 	mov	r1, sl
   3c304:	e3a02004 	mov	r2, #4
   3c308:	ebffa96c 	bl	268c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   3c30c:	eaffff82 	b	3c11c <McTRS80CmdFormat::proc(void (*)(unsigned long, unsigned char const*, unsigned long, void*), void (*)(Z80Registers const&, void*), void*, unsigned char const*, int)+0x8c>
   3c310:	000478f4 	.word	0x000478f4
   3c314:	0004795c 	.word	0x0004795c
   3c318:	00047944 	.word	0x00047944
   3c31c:	00047934 	.word	0x00047934
   3c320:	00047920 	.word	0x00047920
   3c324:	000478d4 	.word	0x000478d4
   3c328:	00047964 	.word	0x00047964
   3c32c:	00047910 	.word	0x00047910
   3c330:	00047900 	.word	0x00047900

0003c334 <Display::~Display()>:
   3c334:	e92d4010 	push	{r4, lr}
   3c338:	e1a04000 	mov	r4, r0
   3c33c:	e59f301c 	ldr	r3, [pc, #28]	; 3c360 <Display::~Display()+0x2c>
   3c340:	e4803004 	str	r3, [r0], #4
   3c344:	eb0002c3 	bl	3ce58 <DisplayFX::~DisplayFX()>
   3c348:	e59f3014 	ldr	r3, [pc, #20]	; 3c364 <Display::~Display()+0x30>
   3c34c:	e1a00004 	mov	r0, r4
   3c350:	e5843000 	str	r3, [r4]
   3c354:	ebffa30c 	bl	24f8c <CDevice::~CDevice()>
   3c358:	e1a00004 	mov	r0, r4
   3c35c:	e8bd8010 	pop	{r4, pc}
   3c360:	000479c0 	.word	0x000479c0
   3c364:	00047984 	.word	0x00047984

0003c368 <Display::~Display()>:
   3c368:	e92d4010 	push	{r4, lr}
   3c36c:	e1a04000 	mov	r4, r0
   3c370:	e59f3028 	ldr	r3, [pc, #40]	; 3c3a0 <Display::~Display()+0x38>
   3c374:	e4803004 	str	r3, [r0], #4
   3c378:	eb0002b6 	bl	3ce58 <DisplayFX::~DisplayFX()>
   3c37c:	e59f3020 	ldr	r3, [pc, #32]	; 3c3a4 <Display::~Display()+0x3c>
   3c380:	e1a00004 	mov	r0, r4
   3c384:	e5843000 	str	r3, [r4]
   3c388:	ebffa2ff 	bl	24f8c <CDevice::~CDevice()>
   3c38c:	e1a00004 	mov	r0, r4
   3c390:	e3a01efa 	mov	r1, #4000	; 0xfa0
   3c394:	ebffbb44 	bl	2b0ac <operator delete(void*, unsigned int)>
   3c398:	e1a00004 	mov	r0, r4
   3c39c:	e8bd8010 	pop	{r4, pc}
   3c3a0:	000479c0 	.word	0x000479c0
   3c3a4:	00047984 	.word	0x00047984

0003c3a8 <Display::foreground(DISPLAY_FX_COLOUR)>:
   3c3a8:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c3ac:	e3530000 	cmp	r3, #0
   3c3b0:	012fff1e 	bxeq	lr
   3c3b4:	e1a02001 	mov	r2, r1
   3c3b8:	e2800004 	add	r0, r0, #4
   3c3bc:	e3a01000 	mov	r1, #0
   3c3c0:	ea0003c8 	b	3d2e8 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>

0003c3c4 <Display::background(DISPLAY_FX_COLOUR)>:
   3c3c4:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c3c8:	e3530000 	cmp	r3, #0
   3c3cc:	012fff1e 	bxeq	lr
   3c3d0:	e1a02001 	mov	r2, r1
   3c3d4:	e2800004 	add	r0, r0, #4
   3c3d8:	e3a01000 	mov	r1, #0
   3c3dc:	ea0003c6 	b	3d2fc <DisplayFX::windowBackground(int, DISPLAY_FX_COLOUR)>

0003c3e0 <Display::write(int, int, char const*)>:
   3c3e0:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c3e4:	e35c0000 	cmp	ip, #0
   3c3e8:	012fff1e 	bxeq	lr
   3c3ec:	e1a0c003 	mov	ip, r3
   3c3f0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3c3f4:	e24dd00c 	sub	sp, sp, #12
   3c3f8:	e1a03002 	mov	r3, r2
   3c3fc:	e58dc000 	str	ip, [sp]
   3c400:	e1a02001 	mov	r2, r1
   3c404:	e2800004 	add	r0, r0, #4
   3c408:	e3a01000 	mov	r1, #0
   3c40c:	eb000391 	bl	3d258 <DisplayFX::windowPut(int, int, int, char const*)>
   3c410:	e28dd00c 	add	sp, sp, #12
   3c414:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003c418 <Display::write(int, int, int)>:
   3c418:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c41c:	e35c0000 	cmp	ip, #0
   3c420:	012fff1e 	bxeq	lr
   3c424:	e1a0c003 	mov	ip, r3
   3c428:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3c42c:	e24dd00c 	sub	sp, sp, #12
   3c430:	e1a03002 	mov	r3, r2
   3c434:	e58dc000 	str	ip, [sp]
   3c438:	e1a02001 	mov	r2, r1
   3c43c:	e2800004 	add	r0, r0, #4
   3c440:	e3a01000 	mov	r1, #0
   3c444:	eb00030e 	bl	3d084 <DisplayFX::windowPut(int, int, int, int)>
   3c448:	e28dd00c 	add	sp, sp, #12
   3c44c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003c450 <Display::setPixel(int, int, int, DISPLAY_FX_COLOUR)>:
   3c450:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3c454:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c458:	e24dd00c 	sub	sp, sp, #12
   3c45c:	e35c0000 	cmp	ip, #0
   3c460:	e1dde1d0 	ldrsb	lr, [sp, #16]
   3c464:	0a000006 	beq	3c484 <Display::setPixel(int, int, int, DISPLAY_FX_COLOUR)+0x34>
   3c468:	e1a0c003 	mov	ip, r3
   3c46c:	e2800004 	add	r0, r0, #4
   3c470:	e1a03002 	mov	r3, r2
   3c474:	e88d5000 	stm	sp, {ip, lr}
   3c478:	e1a02001 	mov	r2, r1
   3c47c:	e3a01000 	mov	r1, #0
   3c480:	eb0003a2 	bl	3d310 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>
   3c484:	e28dd00c 	add	sp, sp, #12
   3c488:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003c48c <Display::getFrameBufferInfo(FrameBufferInfo&)>:
   3c48c:	e1a02001 	mov	r2, r1
   3c490:	e2800004 	add	r0, r0, #4
   3c494:	e3a01000 	mov	r1, #0
   3c498:	ea0003ea 	b	3d448 <DisplayFX::getFramebuffer(int, FrameBufferInfo&)>

0003c49c <Display::Write(void const*, unsigned int)>:
   3c49c:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c4a0:	e92d4010 	push	{r4, lr}
   3c4a4:	e3530000 	cmp	r3, #0
   3c4a8:	e1a04002 	mov	r4, r2
   3c4ac:	0a000001 	beq	3c4b8 <Display::Write(void const*, unsigned int)+0x1c>
   3c4b0:	e2800004 	add	r0, r0, #4
   3c4b4:	eb0004f2 	bl	3d884 <DisplayFX::consolePut(char const*, unsigned int)>
   3c4b8:	e1a00004 	mov	r0, r4
   3c4bc:	e8bd8010 	pop	{r4, pc}

0003c4c0 <Display::targetLayout(int, int, int, int, int, int, WgfxFont*, int, int)>:
   3c4c0:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c4c4:	e35c0000 	cmp	ip, #0
   3c4c8:	012fff1e 	bxeq	lr
   3c4cc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3c4d0:	e1a07003 	mov	r7, r3
   3c4d4:	e1a06002 	mov	r6, r2
   3c4d8:	e3a03fe1 	mov	r3, #900	; 0x384
   3c4dc:	e3a02000 	mov	r2, #0
   3c4e0:	e24dd034 	sub	sp, sp, #52	; 0x34
   3c4e4:	e2804004 	add	r4, r0, #4
   3c4e8:	e1a05001 	mov	r5, r1
   3c4ec:	e1a00004 	mov	r0, r4
   3c4f0:	e58d3000 	str	r3, [sp]
   3c4f4:	e1a01002 	mov	r1, r2
   3c4f8:	e3a03e41 	mov	r3, #1040	; 0x410
   3c4fc:	eb0002c7 	bl	3d020 <DisplayFX::screenRectClear(int, int, int, int)>
   3c500:	e3a03000 	mov	r3, #0
   3c504:	e3a02008 	mov	r2, #8
   3c508:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
   3c50c:	e58d2028 	str	r2, [sp, #40]	; 0x28
   3c510:	e58d1020 	str	r1, [sp, #32]
   3c514:	e59d1058 	ldr	r1, [sp, #88]	; 0x58
   3c518:	e58d2024 	str	r2, [sp, #36]	; 0x24
   3c51c:	e58d101c 	str	r1, [sp, #28]
   3c520:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
   3c524:	e1a00004 	mov	r0, r4
   3c528:	e58d1018 	str	r1, [sp, #24]
   3c52c:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
   3c530:	e88d00e0 	stm	sp, {r5, r6, r7}
   3c534:	e58d1014 	str	r1, [sp, #20]
   3c538:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   3c53c:	e1a02003 	mov	r2, r3
   3c540:	e58d1010 	str	r1, [sp, #16]
   3c544:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
   3c548:	e58d100c 	str	r1, [sp, #12]
   3c54c:	e1a01003 	mov	r1, r3
   3c550:	eb0003d2 	bl	3d4a0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3c554:	e28dd034 	add	sp, sp, #52	; 0x34
   3c558:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0003c55c <Display::Display()>:
   3c55c:	e92d4010 	push	{r4, lr}
   3c560:	e1a04000 	mov	r4, r0
   3c564:	ebffa296 	bl	24fc4 <CDevice::CDevice()>
   3c568:	e1a00004 	mov	r0, r4
   3c56c:	e59f3014 	ldr	r3, [pc, #20]	; 3c588 <Display::Display()+0x2c>
   3c570:	e4803004 	str	r3, [r0], #4
   3c574:	eb000214 	bl	3cdcc <DisplayFX::DisplayFX()>
   3c578:	e3a03000 	mov	r3, #0
   3c57c:	e1a00004 	mov	r0, r4
   3c580:	e5c43b50 	strb	r3, [r4, #2896]	; 0xb50
   3c584:	e8bd8010 	pop	{r4, pc}
   3c588:	000479c0 	.word	0x000479c0

0003c58c <Display::init()>:
   3c58c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3c590:	e2809004 	add	r9, r0, #4
   3c594:	e24dd034 	sub	sp, sp, #52	; 0x34
   3c598:	e1a07000 	mov	r7, r0
   3c59c:	e3a02fe1 	mov	r2, #900	; 0x384
   3c5a0:	e3a01d19 	mov	r1, #1600	; 0x640
   3c5a4:	e1a00009 	mov	r0, r9
   3c5a8:	eb000236 	bl	3ce88 <DisplayFX::init(int, int)>
   3c5ac:	e3e05000 	mvn	r5, #0
   3c5b0:	e3a04000 	mov	r4, #0
   3c5b4:	e3a06001 	mov	r6, #1
   3c5b8:	e3a08008 	mov	r8, #8
   3c5bc:	e3a0efdd 	mov	lr, #884	; 0x374
   3c5c0:	e3a0cb01 	mov	ip, #1024	; 0x400
   3c5c4:	e1a00009 	mov	r0, r9
   3c5c8:	e88d5000 	stm	sp, {ip, lr}
   3c5cc:	e1a03004 	mov	r3, r4
   3c5d0:	e1a02004 	mov	r2, r4
   3c5d4:	e1a01004 	mov	r1, r4
   3c5d8:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3c5dc:	e58d8024 	str	r8, [sp, #36]	; 0x24
   3c5e0:	e58d800c 	str	r8, [sp, #12]
   3c5e4:	e58d8008 	str	r8, [sp, #8]
   3c5e8:	e58d5020 	str	r5, [sp, #32]
   3c5ec:	e58d501c 	str	r5, [sp, #28]
   3c5f0:	e58d4018 	str	r4, [sp, #24]
   3c5f4:	e58d6014 	str	r6, [sp, #20]
   3c5f8:	e58d6010 	str	r6, [sp, #16]
   3c5fc:	eb0003a7 	bl	3d4a0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3c600:	e1a00009 	mov	r0, r9
   3c604:	e1a03004 	mov	r3, r4
   3c608:	e1a01006 	mov	r1, r6
   3c60c:	e59f20b0 	ldr	r2, [pc, #176]	; 3c6c4 <Display::init()+0x138>
   3c610:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3c614:	e58d4024 	str	r4, [sp, #36]	; 0x24
   3c618:	e58d5020 	str	r5, [sp, #32]
   3c61c:	e58d501c 	str	r5, [sp, #28]
   3c620:	e58d4018 	str	r4, [sp, #24]
   3c624:	e58d6014 	str	r6, [sp, #20]
   3c628:	e58d6010 	str	r6, [sp, #16]
   3c62c:	e58d500c 	str	r5, [sp, #12]
   3c630:	e58d5008 	str	r5, [sp, #8]
   3c634:	e58d5004 	str	r5, [sp, #4]
   3c638:	e58d5000 	str	r5, [sp]
   3c63c:	eb000397 	bl	3d4a0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3c640:	e59f3080 	ldr	r3, [pc, #128]	; 3c6c8 <Display::init()+0x13c>
   3c644:	e58d8028 	str	r8, [sp, #40]	; 0x28
   3c648:	e5933004 	ldr	r3, [r3, #4]
   3c64c:	e59f2070 	ldr	r2, [pc, #112]	; 3c6c4 <Display::init()+0x138>
   3c650:	e1a03183 	lsl	r3, r3, #3
   3c654:	e1a00009 	mov	r0, r9
   3c658:	e3a01002 	mov	r1, #2
   3c65c:	e58d4024 	str	r4, [sp, #36]	; 0x24
   3c660:	e58d5020 	str	r5, [sp, #32]
   3c664:	e58d501c 	str	r5, [sp, #28]
   3c668:	e58d4018 	str	r4, [sp, #24]
   3c66c:	e58d6014 	str	r6, [sp, #20]
   3c670:	e58d6010 	str	r6, [sp, #16]
   3c674:	e58d500c 	str	r5, [sp, #12]
   3c678:	e58d5008 	str	r5, [sp, #8]
   3c67c:	e58d5004 	str	r5, [sp, #4]
   3c680:	e58d5000 	str	r5, [sp]
   3c684:	eb000385 	bl	3d4a0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>
   3c688:	e1a00009 	mov	r0, r9
   3c68c:	e3a01002 	mov	r1, #2
   3c690:	eb0003e5 	bl	3d62c <DisplayFX::consoleSetWindow(int)>
   3c694:	e1a03004 	mov	r3, r4
   3c698:	e1a00007 	mov	r0, r7
   3c69c:	e2872d11 	add	r2, r7, #1088	; 0x440
   3c6a0:	e282200c 	add	r2, r2, #12
   3c6a4:	e5c03b51 	strb	r3, [r0, #2897]	; 0xb51
   3c6a8:	e2800064 	add	r0, r0, #100	; 0x64
   3c6ac:	e1500002 	cmp	r0, r2
   3c6b0:	1afffffb 	bne	3c6a4 <Display::init()+0x118>
   3c6b4:	e3a00001 	mov	r0, #1
   3c6b8:	e5c70b50 	strb	r0, [r7, #2896]	; 0xb50
   3c6bc:	e28dd034 	add	sp, sp, #52	; 0x34
   3c6c0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3c6c4:	0000041a 	.word	0x0000041a
   3c6c8:	0004b750 	.word	0x0004b750

0003c6cc <Display::statusPut(int, int, char const*)>:
   3c6cc:	e351000a 	cmp	r1, #10
   3c6d0:	c12fff1e 	bxgt	lr
   3c6d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3c6d8:	e3a04064 	mov	r4, #100	; 0x64
   3c6dc:	e0240194 	mla	r4, r4, r1, r0
   3c6e0:	e2844eb5 	add	r4, r4, #2896	; 0xb50
   3c6e4:	e2844001 	add	r4, r4, #1
   3c6e8:	e24dd008 	sub	sp, sp, #8
   3c6ec:	e1a08000 	mov	r8, r0
   3c6f0:	e1a05001 	mov	r5, r1
   3c6f4:	e1a00004 	mov	r0, r4
   3c6f8:	e1a01003 	mov	r1, r3
   3c6fc:	e1a06003 	mov	r6, r3
   3c700:	e1a07002 	mov	r7, r2
   3c704:	ebffb666 	bl	2a0a4 <strcmp>
   3c708:	e3500000 	cmp	r0, #0
   3c70c:	1a000001 	bne	3c718 <Display::statusPut(int, int, char const*)+0x4c>
   3c710:	e28dd008 	add	sp, sp, #8
   3c714:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3c718:	e3a02063 	mov	r2, #99	; 0x63
   3c71c:	e1a00004 	mov	r0, r4
   3c720:	e1a01006 	mov	r1, r6
   3c724:	ebffb71d 	bl	2a3a0 <strncpy>
   3c728:	e3570001 	cmp	r7, #1
   3c72c:	03a02009 	moveq	r2, #9
   3c730:	0a000002 	beq	3c740 <Display::statusPut(int, int, char const*)+0x74>
   3c734:	e3570000 	cmp	r7, #0
   3c738:	13a0200a 	movne	r2, #10
   3c73c:	03a0200b 	moveq	r2, #11
   3c740:	e5d83b50 	ldrb	r3, [r8, #2896]	; 0xb50
   3c744:	e3530000 	cmp	r3, #0
   3c748:	0afffff0 	beq	3c710 <Display::statusPut(int, int, char const*)+0x44>
   3c74c:	e59f1060 	ldr	r1, [pc, #96]	; 3c7b4 <Display::statusPut(int, int, char const*)+0xe8>
   3c750:	e2884004 	add	r4, r8, #4
   3c754:	e0815185 	add	r5, r1, r5, lsl #3
   3c758:	e1a00004 	mov	r0, r4
   3c75c:	e3a01001 	mov	r1, #1
   3c760:	e595703c 	ldr	r7, [r5, #60]	; 0x3c
   3c764:	e5955040 	ldr	r5, [r5, #64]	; 0x40
   3c768:	eb0002de 	bl	3d2e8 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>
   3c76c:	e5d83b50 	ldrb	r3, [r8, #2896]	; 0xb50
   3c770:	e3530000 	cmp	r3, #0
   3c774:	0affffe5 	beq	3c710 <Display::statusPut(int, int, char const*)+0x44>
   3c778:	e1a03005 	mov	r3, r5
   3c77c:	e58d6000 	str	r6, [sp]
   3c780:	e1a02007 	mov	r2, r7
   3c784:	e3a01001 	mov	r1, #1
   3c788:	e1a00004 	mov	r0, r4
   3c78c:	eb0002b1 	bl	3d258 <DisplayFX::windowPut(int, int, int, char const*)>
   3c790:	e5d83b50 	ldrb	r3, [r8, #2896]	; 0xb50
   3c794:	e3530000 	cmp	r3, #0
   3c798:	0affffdc 	beq	3c710 <Display::statusPut(int, int, char const*)+0x44>
   3c79c:	e1a00004 	mov	r0, r4
   3c7a0:	e3a0200f 	mov	r2, #15
   3c7a4:	e3a01001 	mov	r1, #1
   3c7a8:	e28dd008 	add	sp, sp, #8
   3c7ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3c7b0:	ea0002cc 	b	3d2e8 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>
   3c7b4:	000479b8 	.word	0x000479b8

0003c7b8 <Display::windowForeground(int, DISPLAY_FX_COLOUR)>:
   3c7b8:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c7bc:	e3530000 	cmp	r3, #0
   3c7c0:	012fff1e 	bxeq	lr
   3c7c4:	e2800004 	add	r0, r0, #4
   3c7c8:	ea0002c6 	b	3d2e8 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>

0003c7cc <Display::windowBackground(int, DISPLAY_FX_COLOUR)>:
   3c7cc:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c7d0:	e3530000 	cmp	r3, #0
   3c7d4:	012fff1e 	bxeq	lr
   3c7d8:	e2800004 	add	r0, r0, #4
   3c7dc:	ea0002c6 	b	3d2fc <DisplayFX::windowBackground(int, DISPLAY_FX_COLOUR)>

0003c7e0 <Display::windowWrite(int, int, int, char const*)>:
   3c7e0:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c7e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3c7e8:	e35c0000 	cmp	ip, #0
   3c7ec:	e59de004 	ldr	lr, [sp, #4]
   3c7f0:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3c7f4:	e2800004 	add	r0, r0, #4
   3c7f8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3c7fc:	ea000295 	b	3d258 <DisplayFX::windowPut(int, int, int, char const*)>

0003c800 <Display::windowWrite(int, int, int, int)>:
   3c800:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c804:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3c808:	e35c0000 	cmp	ip, #0
   3c80c:	e59de004 	ldr	lr, [sp, #4]
   3c810:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3c814:	e2800004 	add	r0, r0, #4
   3c818:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3c81c:	ea000218 	b	3d084 <DisplayFX::windowPut(int, int, int, int)>

0003c820 <Display::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>:
   3c820:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3c824:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c828:	e59de004 	ldr	lr, [sp, #4]
   3c82c:	e35c0000 	cmp	ip, #0
   3c830:	e1ddc0d8 	ldrsb	ip, [sp, #8]
   3c834:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
   3c838:	e58dc008 	str	ip, [sp, #8]
   3c83c:	e2800004 	add	r0, r0, #4
   3c840:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   3c844:	ea0002b1 	b	3d310 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>

0003c848 <Display::consolePut(char const*)>:
   3c848:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c84c:	e3530000 	cmp	r3, #0
   3c850:	012fff1e 	bxeq	lr
   3c854:	e2800004 	add	r0, r0, #4
   3c858:	ea0003fd 	b	3d854 <DisplayFX::consolePut(char const*)>

0003c85c <Display::consolePut(int)>:
   3c85c:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c860:	e3530000 	cmp	r3, #0
   3c864:	012fff1e 	bxeq	lr
   3c868:	e2800004 	add	r0, r0, #4
   3c86c:	ea00039c 	b	3d6e4 <DisplayFX::consolePut(int)>

0003c870 <Display::consolePut(char const*, unsigned int)>:
   3c870:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c874:	e3530000 	cmp	r3, #0
   3c878:	012fff1e 	bxeq	lr
   3c87c:	e2800004 	add	r0, r0, #4
   3c880:	ea0003ff 	b	3d884 <DisplayFX::consolePut(char const*, unsigned int)>

0003c884 <Display::consoleForeground(DISPLAY_FX_COLOUR)>:
   3c884:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c888:	e3530000 	cmp	r3, #0
   3c88c:	012fff1e 	bxeq	lr
   3c890:	e2800004 	add	r0, r0, #4
   3c894:	ea000353 	b	3d5e8 <DisplayFX::consoleForeground(DISPLAY_FX_COLOUR)>

0003c898 <Display::consoleGetWidth()>:
   3c898:	e5d03b50 	ldrb	r3, [r0, #2896]	; 0xb50
   3c89c:	e3530000 	cmp	r3, #0
   3c8a0:	1a000001 	bne	3c8ac <Display::consoleGetWidth()+0x14>
   3c8a4:	e1a00003 	mov	r0, r3
   3c8a8:	e12fff1e 	bx	lr
   3c8ac:	e2800004 	add	r0, r0, #4
   3c8b0:	ea000351 	b	3d5fc <DisplayFX::consoleGetWidth()>

0003c8b4 <Display::logDebug(char const*, char const*, char const*)>:
   3c8b4:	e5d0cb50 	ldrb	ip, [r0, #2896]	; 0xb50
   3c8b8:	e35c0000 	cmp	ip, #0
   3c8bc:	012fff1e 	bxeq	lr
   3c8c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3c8c4:	e1a04000 	mov	r4, r0
   3c8c8:	e2805004 	add	r5, r0, #4
   3c8cc:	e1a00005 	mov	r0, r5
   3c8d0:	e1a07003 	mov	r7, r3
   3c8d4:	e1a06002 	mov	r6, r2
   3c8d8:	eb0003dd 	bl	3d854 <DisplayFX::consolePut(char const*)>
   3c8dc:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3c8e0:	e3530000 	cmp	r3, #0
   3c8e4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3c8e8:	e59f1068 	ldr	r1, [pc, #104]	; 3c958 <Display::logDebug(char const*, char const*, char const*)+0xa4>
   3c8ec:	e1a00005 	mov	r0, r5
   3c8f0:	eb0003d7 	bl	3d854 <DisplayFX::consolePut(char const*)>
   3c8f4:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3c8f8:	e3530000 	cmp	r3, #0
   3c8fc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3c900:	e1a01006 	mov	r1, r6
   3c904:	e1a00005 	mov	r0, r5
   3c908:	eb0003d1 	bl	3d854 <DisplayFX::consolePut(char const*)>
   3c90c:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3c910:	e3530000 	cmp	r3, #0
   3c914:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3c918:	e59f103c 	ldr	r1, [pc, #60]	; 3c95c <Display::logDebug(char const*, char const*, char const*)+0xa8>
   3c91c:	e1a00005 	mov	r0, r5
   3c920:	eb0003cb 	bl	3d854 <DisplayFX::consolePut(char const*)>
   3c924:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3c928:	e3530000 	cmp	r3, #0
   3c92c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3c930:	e1a01007 	mov	r1, r7
   3c934:	e1a00005 	mov	r0, r5
   3c938:	eb0003c5 	bl	3d854 <DisplayFX::consolePut(char const*)>
   3c93c:	e5d43b50 	ldrb	r3, [r4, #2896]	; 0xb50
   3c940:	e3530000 	cmp	r3, #0
   3c944:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   3c948:	e1a00005 	mov	r0, r5
   3c94c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3c950:	e59f1008 	ldr	r1, [pc, #8]	; 3c960 <Display::logDebug(char const*, char const*, char const*)+0xac>
   3c954:	ea0003be 	b	3d854 <DisplayFX::consolePut(char const*)>
   3c958:	00047a4c 	.word	0x00047a4c
   3c95c:	00047a50 	.word	0x00047a50
   3c960:	000475e0 	.word	0x000475e0

0003c964 <DisplayBase::write(int, int, char const*)>:
   3c964:	e12fff1e 	bx	lr

0003c968 <DisplayBase::setPixel(int, int, int, DISPLAY_FX_COLOUR)>:
   3c968:	e12fff1e 	bx	lr

0003c96c <DisplayBase::getFrameBufferInfo(FrameBufferInfo&)>:
   3c96c:	e12fff1e 	bx	lr

0003c970 <DisplayBase::~DisplayBase()>:
   3c970:	e92d4010 	push	{r4, lr}
   3c974:	e1a04000 	mov	r4, r0
   3c978:	e59f300c 	ldr	r3, [pc, #12]	; 3c98c <DisplayBase::~DisplayBase()+0x1c>
   3c97c:	e5803000 	str	r3, [r0]
   3c980:	ebffa181 	bl	24f8c <CDevice::~CDevice()>
   3c984:	e1a00004 	mov	r0, r4
   3c988:	e8bd8010 	pop	{r4, pc}
   3c98c:	00047984 	.word	0x00047984

0003c990 <DisplayBase::~DisplayBase()>:
   3c990:	e92d4010 	push	{r4, lr}
   3c994:	e1a04000 	mov	r4, r0
   3c998:	e59f3018 	ldr	r3, [pc, #24]	; 3c9b8 <DisplayBase::~DisplayBase()+0x28>
   3c99c:	e5803000 	str	r3, [r0]
   3c9a0:	ebffa179 	bl	24f8c <CDevice::~CDevice()>
   3c9a4:	e1a00004 	mov	r0, r4
   3c9a8:	e3a01004 	mov	r1, #4
   3c9ac:	ebffb9be 	bl	2b0ac <operator delete(void*, unsigned int)>
   3c9b0:	e1a00004 	mov	r0, r4
   3c9b4:	e8bd8010 	pop	{r4, pc}
   3c9b8:	00047984 	.word	0x00047984

0003c9bc <DisplayFX::windowScroll(int, int) [clone .part.3]>:
   3c9bc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3c9c0:	e3520000 	cmp	r2, #0
   3c9c4:	e0224fc2 	eor	r4, r2, r2, asr #31
   3c9c8:	e0444fc2 	sub	r4, r4, r2, asr #31
   3c9cc:	e1a08000 	mov	r8, r0
   3c9d0:	e1a09001 	mov	r9, r1
   3c9d4:	da00002e 	ble	3ca94 <DisplayFX::windowScroll(int, int) [clone .part.3]+0xd8>
   3c9d8:	e3a05f8f 	mov	r5, #572	; 0x23c
   3c9dc:	e0250195 	mla	r5, r5, r1, r0
   3c9e0:	e5956014 	ldr	r6, [r5, #20]
   3c9e4:	e595701c 	ldr	r7, [r5, #28]
   3c9e8:	e3560000 	cmp	r6, #0
   3c9ec:	e5950008 	ldr	r0, [r5, #8]
   3c9f0:	d3a07000 	movle	r7, #0
   3c9f4:	da000003 	ble	3ca08 <DisplayFX::windowScroll(int, int) [clone .part.3]+0x4c>
   3c9f8:	e1a01006 	mov	r1, r6
   3c9fc:	eb0004e7 	bl	3dda0 <__aeabi_idiv>
   3ca00:	e0000096 	mul	r0, r6, r0
   3ca04:	e0070097 	mul	r7, r7, r0
   3ca08:	e5951018 	ldr	r1, [r5, #24]
   3ca0c:	e3510000 	cmp	r1, #0
   3ca10:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ca14:	e3a0af8f 	mov	sl, #572	; 0x23c
   3ca18:	e5950010 	ldr	r0, [r5, #16]
   3ca1c:	eb0004df 	bl	3dda0 <__aeabi_idiv>
   3ca20:	e02a899a 	mla	sl, sl, r9, r8
   3ca24:	e59a3018 	ldr	r3, [sl, #24]
   3ca28:	e59a2020 	ldr	r2, [sl, #32]
   3ca2c:	e0000093 	mul	r0, r3, r0
   3ca30:	e0060092 	mul	r6, r2, r0
   3ca34:	e3560000 	cmp	r6, #0
   3ca38:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ca3c:	e3a05000 	mov	r5, #0
   3ca40:	e0040493 	mul	r4, r3, r4
   3ca44:	e59a900c 	ldr	r9, [sl, #12]
   3ca48:	e59a3004 	ldr	r3, [sl, #4]
   3ca4c:	e0249492 	mla	r4, r2, r4, r9
   3ca50:	e5982b38 	ldr	r2, [r8, #2872]	; 0xb38
   3ca54:	e0243492 	mla	r4, r2, r4, r3
   3ca58:	e0233992 	mla	r3, r2, r9, r3
   3ca5c:	e5989b40 	ldr	r9, [r8, #2880]	; 0xb40
   3ca60:	e0894004 	add	r4, r9, r4
   3ca64:	e0899003 	add	r9, r9, r3
   3ca68:	e1a01004 	mov	r1, r4
   3ca6c:	e1a00009 	mov	r0, r9
   3ca70:	e1a02007 	mov	r2, r7
   3ca74:	ebffb7a5 	bl	2a910 <memcpy>
   3ca78:	e2855001 	add	r5, r5, #1
   3ca7c:	e5983b38 	ldr	r3, [r8, #2872]	; 0xb38
   3ca80:	e1560005 	cmp	r6, r5
   3ca84:	e0899003 	add	r9, r9, r3
   3ca88:	e0844003 	add	r4, r4, r3
   3ca8c:	1afffff5 	bne	3ca68 <DisplayFX::windowScroll(int, int) [clone .part.3]+0xac>
   3ca90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ca94:	e3a03f8f 	mov	r3, #572	; 0x23c
   3ca98:	e0230193 	mla	r3, r3, r1, r0
   3ca9c:	e5931018 	ldr	r1, [r3, #24]
   3caa0:	e5930010 	ldr	r0, [r3, #16]
   3caa4:	e3510000 	cmp	r1, #0
   3caa8:	d3a00000 	movle	r0, #0
   3caac:	da000000 	ble	3cab4 <DisplayFX::windowScroll(int, int) [clone .part.3]+0xf8>
   3cab0:	eb0004ba 	bl	3dda0 <__aeabi_idiv>
   3cab4:	e3a01f8f 	mov	r1, #572	; 0x23c
   3cab8:	e0218991 	mla	r1, r1, r9, r8
   3cabc:	e591c018 	ldr	ip, [r1, #24]
   3cac0:	e0403004 	sub	r3, r0, r4
   3cac4:	e003039c 	mul	r3, ip, r3
   3cac8:	e591e00c 	ldr	lr, [r1, #12]
   3cacc:	e5915020 	ldr	r5, [r1, #32]
   3cad0:	e5912004 	ldr	r2, [r1, #4]
   3cad4:	e023e395 	mla	r3, r5, r3, lr
   3cad8:	e0010c90 	mul	r1, r0, ip
   3cadc:	e598cb38 	ldr	ip, [r8, #2872]	; 0xb38
   3cae0:	e2424001 	sub	r4, r2, #1
   3cae4:	e0202e9c 	mla	r0, ip, lr, r2
   3cae8:	e023439c 	mla	r3, ip, r3, r4
   3caec:	e5982b40 	ldr	r2, [r8, #2880]	; 0xb40
   3caf0:	e021e195 	mla	r1, r5, r1, lr
   3caf4:	e0823003 	add	r3, r2, r3
   3caf8:	e0820000 	add	r0, r2, r0
   3cafc:	e1530000 	cmp	r3, r0
   3cb00:	e021419c 	mla	r1, ip, r1, r4
   3cb04:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   3cb08:	e2811001 	add	r1, r1, #1
   3cb0c:	e0822001 	add	r2, r2, r1
   3cb10:	e4531001 	ldrb	r1, [r3], #-1
   3cb14:	e1500003 	cmp	r0, r3
   3cb18:	e5621001 	strb	r1, [r2, #-1]!
   3cb1c:	1afffffb 	bne	3cb10 <DisplayFX::windowScroll(int, int) [clone .part.3]+0x154>
   3cb20:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003cb24 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]>:
   3cb24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cb28:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
   3cb2c:	e292c001 	adds	ip, r2, #1
   3cb30:	13a0c001 	movne	ip, #1
   3cb34:	e3770001 	cmn	r7, #1
   3cb38:	13a0c000 	movne	ip, #0
   3cb3c:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
   3cb40:	e59fe280 	ldr	lr, [pc, #640]	; 3cdc8 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x2a4>
   3cb44:	e3540000 	cmp	r4, #0
   3cb48:	01a0400e 	moveq	r4, lr
   3cb4c:	e35c0000 	cmp	ip, #0
   3cb50:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   3cb54:	e59da02c 	ldr	sl, [sp, #44]	; 0x2c
   3cb58:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
   3cb5c:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
   3cb60:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
   3cb64:	e59de048 	ldr	lr, [sp, #72]	; 0x48
   3cb68:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   3cb6c:	0a000089 	beq	3cd98 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x274>
   3cb70:	e3a0bf8f 	mov	fp, #572	; 0x23c
   3cb74:	e5907b30 	ldr	r7, [r0, #2864]	; 0xb30
   3cb78:	e02b019b 	mla	fp, fp, r1, r0
   3cb7c:	e0477002 	sub	r7, r7, r2
   3cb80:	e047708e 	sub	r7, r7, lr, lsl #1
   3cb84:	e58b7008 	str	r7, [fp, #8]
   3cb88:	e3a07f8f 	mov	r7, #572	; 0x23c
   3cb8c:	e3750001 	cmn	r5, #1
   3cb90:	05905b34 	ldreq	r5, [r0, #2868]	; 0xb34
   3cb94:	00270197 	mlaeq	r7, r7, r1, r0
   3cb98:	10050596 	mulne	r5, r6, r5
   3cb9c:	10270197 	mlane	r7, r7, r1, r0
   3cba0:	00455003 	subeq	r5, r5, r3
   3cba4:	0045508e 	subeq	r5, r5, lr, lsl #1
   3cba8:	e5875010 	str	r5, [r7, #16]
   3cbac:	e3a05f8f 	mov	r5, #572	; 0x23c
   3cbb0:	e3720001 	cmn	r2, #1
   3cbb4:	00250195 	mlaeq	r5, r5, r1, r0
   3cbb8:	05902b30 	ldreq	r2, [r0, #2864]	; 0xb30
   3cbbc:	05957008 	ldreq	r7, [r5, #8]
   3cbc0:	1022e298 	mlane	r2, r8, r2, lr
   3cbc4:	10250195 	mlane	r5, r5, r1, r0
   3cbc8:	00422007 	subeq	r2, r2, r7
   3cbcc:	00822fa2 	addeq	r2, r2, r2, lsr #31
   3cbd0:	01a020c2 	asreq	r2, r2, #1
   3cbd4:	e5852004 	str	r2, [r5, #4]
   3cbd8:	e3a02f8f 	mov	r2, #572	; 0x23c
   3cbdc:	e023e396 	mla	r3, r6, r3, lr
   3cbe0:	e0220192 	mla	r2, r2, r1, r0
   3cbe4:	e37a0001 	cmn	sl, #1
   3cbe8:	e582300c 	str	r3, [r2, #12]
   3cbec:	05943000 	ldreq	r3, [r4]
   3cbf0:	e3a05f8f 	mov	r5, #572	; 0x23c
   3cbf4:	05823014 	streq	r3, [r2, #20]
   3cbf8:	e3a03f8f 	mov	r3, #572	; 0x23c
   3cbfc:	e0230193 	mla	r3, r3, r1, r0
   3cc00:	1582a014 	strne	sl, [r2, #20]
   3cc04:	e3790001 	cmn	r9, #1
   3cc08:	05942004 	ldreq	r2, [r4, #4]
   3cc0c:	15839018 	strne	r9, [r3, #24]
   3cc10:	05832018 	streq	r2, [r3, #24]
   3cc14:	e37c0001 	cmn	ip, #1
   3cc18:	135e0000 	cmpne	lr, #0
   3cc1c:	e0250195 	mla	r5, r5, r1, r0
   3cc20:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
   3cc24:	e585801c 	str	r8, [r5, #28]
   3cc28:	e5853028 	str	r3, [r5, #40]	; 0x28
   3cc2c:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
   3cc30:	e5856020 	str	r6, [r5, #32]
   3cc34:	e585402c 	str	r4, [r5, #44]	; 0x2c
   3cc38:	e5853024 	str	r3, [r5, #36]	; 0x24
   3cc3c:	da000050 	ble	3cd84 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x260>
   3cc40:	e3a06000 	mov	r6, #0
   3cc44:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3cc48:	e6efc07c 	uxtb	ip, ip
   3cc4c:	e1a0708e 	lsl	r7, lr, #1
   3cc50:	e595900c 	ldr	r9, [r5, #12]
   3cc54:	e5954004 	ldr	r4, [r5, #4]
   3cc58:	e049900e 	sub	r9, r9, lr
   3cc5c:	e0892006 	add	r2, r9, r6
   3cc60:	e044400e 	sub	r4, r4, lr
   3cc64:	e0224293 	mla	r2, r3, r2, r4
   3cc68:	e595a008 	ldr	sl, [r5, #8]
   3cc6c:	e5908b40 	ldr	r8, [r0, #2880]	; 0xb40
   3cc70:	e087a00a 	add	sl, r7, sl
   3cc74:	e35a0000 	cmp	sl, #0
   3cc78:	e0882002 	add	r2, r8, r2
   3cc7c:	da00004f 	ble	3cdc0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x29c>
   3cc80:	e082300a 	add	r3, r2, sl
   3cc84:	e4c2c001 	strb	ip, [r2], #1
   3cc88:	e1520003 	cmp	r2, r3
   3cc8c:	1afffffc 	bne	3cc84 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x160>
   3cc90:	e595900c 	ldr	r9, [r5, #12]
   3cc94:	e595a010 	ldr	sl, [r5, #16]
   3cc98:	e5954004 	ldr	r4, [r5, #4]
   3cc9c:	e08a2009 	add	r2, sl, r9
   3cca0:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3cca4:	e0822006 	add	r2, r2, r6
   3cca8:	e044400e 	sub	r4, r4, lr
   3ccac:	e0224293 	mla	r2, r3, r2, r4
   3ccb0:	e595b008 	ldr	fp, [r5, #8]
   3ccb4:	e5908b40 	ldr	r8, [r0, #2880]	; 0xb40
   3ccb8:	e087b00b 	add	fp, r7, fp
   3ccbc:	e35b0000 	cmp	fp, #0
   3ccc0:	e0882002 	add	r2, r8, r2
   3ccc4:	da000009 	ble	3ccf0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x1cc>
   3ccc8:	e082300b 	add	r3, r2, fp
   3cccc:	e4c2c001 	strb	ip, [r2], #1
   3ccd0:	e1520003 	cmp	r2, r3
   3ccd4:	1afffffc 	bne	3cccc <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x1a8>
   3ccd8:	e5954004 	ldr	r4, [r5, #4]
   3ccdc:	e595900c 	ldr	r9, [r5, #12]
   3cce0:	e595a010 	ldr	sl, [r5, #16]
   3cce4:	e5908b40 	ldr	r8, [r0, #2880]	; 0xb40
   3cce8:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3ccec:	e044400e 	sub	r4, r4, lr
   3ccf0:	e049900e 	sub	r9, r9, lr
   3ccf4:	e0862004 	add	r2, r6, r4
   3ccf8:	e0222993 	mla	r2, r3, r9, r2
   3ccfc:	e087a00a 	add	sl, r7, sl
   3cd00:	e35a0000 	cmp	sl, #0
   3cd04:	e0882002 	add	r2, r8, r2
   3cd08:	da00001a 	ble	3cd78 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x254>
   3cd0c:	e3a04000 	mov	r4, #0
   3cd10:	e5c2c000 	strb	ip, [r2]
   3cd14:	e2844001 	add	r4, r4, #1
   3cd18:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3cd1c:	e15a0004 	cmp	sl, r4
   3cd20:	e0822003 	add	r2, r2, r3
   3cd24:	1afffff9 	bne	3cd10 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x1ec>
   3cd28:	e5958004 	ldr	r8, [r5, #4]
   3cd2c:	e5954008 	ldr	r4, [r5, #8]
   3cd30:	e595200c 	ldr	r2, [r5, #12]
   3cd34:	e0844008 	add	r4, r4, r8
   3cd38:	e042200e 	sub	r2, r2, lr
   3cd3c:	e0844006 	add	r4, r4, r6
   3cd40:	e0244293 	mla	r4, r3, r2, r4
   3cd44:	e5958010 	ldr	r8, [r5, #16]
   3cd48:	e5902b40 	ldr	r2, [r0, #2880]	; 0xb40
   3cd4c:	e0878008 	add	r8, r7, r8
   3cd50:	e3580000 	cmp	r8, #0
   3cd54:	e0822004 	add	r2, r2, r4
   3cd58:	c3a04000 	movgt	r4, #0
   3cd5c:	da000005 	ble	3cd78 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x254>
   3cd60:	e5c2c000 	strb	ip, [r2]
   3cd64:	e2844001 	add	r4, r4, #1
   3cd68:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3cd6c:	e1540008 	cmp	r4, r8
   3cd70:	e0822003 	add	r2, r2, r3
   3cd74:	1afffff9 	bne	3cd60 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x23c>
   3cd78:	e2866001 	add	r6, r6, #1
   3cd7c:	e15e0006 	cmp	lr, r6
   3cd80:	caffffb2 	bgt	3cc50 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x12c>
   3cd84:	e3a03f8f 	mov	r3, #572	; 0x23c
   3cd88:	e3a02001 	mov	r2, #1
   3cd8c:	e0010193 	mul	r1, r3, r1
   3cd90:	e7c02001 	strb	r2, [r0, r1]
   3cd94:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cd98:	e3770001 	cmn	r7, #1
   3cd9c:	03a07f8f 	moveq	r7, #572	; 0x23c
   3cda0:	13a0bf8f 	movne	fp, #572	; 0x23c
   3cda4:	00270197 	mlaeq	r7, r7, r1, r0
   3cda8:	10070798 	mulne	r7, r8, r7
   3cdac:	102b019b 	mlane	fp, fp, r1, r0
   3cdb0:	0590bb30 	ldreq	fp, [r0, #2864]	; 0xb30
   3cdb4:	158b7008 	strne	r7, [fp, #8]
   3cdb8:	0587b008 	streq	fp, [r7, #8]
   3cdbc:	eaffff71 	b	3cb88 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x64>
   3cdc0:	e595a010 	ldr	sl, [r5, #16]
   3cdc4:	eaffffca 	b	3ccf4 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]+0x1d0>
   3cdc8:	0004b750 	.word	0x0004b750

0003cdcc <DisplayFX::DisplayFX()>:
   3cdcc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3cdd0:	e3a02000 	mov	r2, #0
   3cdd4:	e1a03000 	mov	r3, r0
   3cdd8:	e3a01001 	mov	r1, #1
   3cddc:	e3a0e00f 	mov	lr, #15
   3cde0:	e280ceb2 	add	ip, r0, #2848	; 0xb20
   3cde4:	e28cc00c 	add	ip, ip, #12
   3cde8:	e5c32000 	strb	r2, [r3]
   3cdec:	e583200c 	str	r2, [r3, #12]
   3cdf0:	e5832004 	str	r2, [r3, #4]
   3cdf4:	e5832010 	str	r2, [r3, #16]
   3cdf8:	e5832008 	str	r2, [r3, #8]
   3cdfc:	e5832018 	str	r2, [r3, #24]
   3ce00:	e5832014 	str	r2, [r3, #20]
   3ce04:	e5831020 	str	r1, [r3, #32]
   3ce08:	e583101c 	str	r1, [r3, #28]
   3ce0c:	e5832024 	str	r2, [r3, #36]	; 0x24
   3ce10:	e583e028 	str	lr, [r3, #40]	; 0x28
   3ce14:	e583202c 	str	r2, [r3, #44]	; 0x2c
   3ce18:	e5832030 	str	r2, [r3, #48]	; 0x30
   3ce1c:	e5832034 	str	r2, [r3, #52]	; 0x34
   3ce20:	e5c32038 	strb	r2, [r3, #56]	; 0x38
   3ce24:	e2833f8f 	add	r3, r3, #572	; 0x23c
   3ce28:	e153000c 	cmp	r3, ip
   3ce2c:	1affffed 	bne	3cde8 <DisplayFX::DisplayFX()+0x1c>
   3ce30:	e5802b2c 	str	r2, [r0, #2860]	; 0xb2c
   3ce34:	e5802b30 	str	r2, [r0, #2864]	; 0xb30
   3ce38:	e5802b34 	str	r2, [r0, #2868]	; 0xb34
   3ce3c:	e5802b38 	str	r2, [r0, #2872]	; 0xb38
   3ce40:	e5802b3c 	str	r2, [r0, #2876]	; 0xb3c
   3ce44:	e5802b40 	str	r2, [r0, #2880]	; 0xb40
   3ce48:	e5802b48 	str	r2, [r0, #2888]	; 0xb48
   3ce4c:	e5c02b44 	strb	r2, [r0, #2884]	; 0xb44
   3ce50:	e5c0eb45 	strb	lr, [r0, #2885]	; 0xb45
   3ce54:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003ce58 <DisplayFX::~DisplayFX()>:
   3ce58:	e92d4070 	push	{r4, r5, r6, lr}
   3ce5c:	e5904b2c 	ldr	r4, [r0, #2860]	; 0xb2c
   3ce60:	e1a05000 	mov	r5, r0
   3ce64:	e3540000 	cmp	r4, #0
   3ce68:	0a000004 	beq	3ce80 <DisplayFX::~DisplayFX()+0x28>
   3ce6c:	e1a00004 	mov	r0, r4
   3ce70:	eb000511 	bl	3e2bc <CBcmFrameBuffer::~CBcmFrameBuffer()>
   3ce74:	e1a00004 	mov	r0, r4
   3ce78:	e3a01094 	mov	r1, #148	; 0x94
   3ce7c:	ebffb88a 	bl	2b0ac <operator delete(void*, unsigned int)>
   3ce80:	e1a00005 	mov	r0, r5
   3ce84:	e8bd8070 	pop	{r4, r5, r6, pc}

0003ce88 <DisplayFX::init(int, int)>:
   3ce88:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3ce8c:	e1a05000 	mov	r5, r0
   3ce90:	e24dd034 	sub	sp, sp, #52	; 0x34
   3ce94:	e3a00094 	mov	r0, #148	; 0x94
   3ce98:	e1a07001 	mov	r7, r1
   3ce9c:	e1a08002 	mov	r8, r2
   3cea0:	ebffb873 	bl	2b074 <operator new(unsigned int)>
   3cea4:	e3a04000 	mov	r4, #0
   3cea8:	e1a06000 	mov	r6, r0
   3ceac:	e1a02008 	mov	r2, r8
   3ceb0:	e1a01007 	mov	r1, r7
   3ceb4:	e58d4004 	str	r4, [sp, #4]
   3ceb8:	e58d4000 	str	r4, [sp]
   3cebc:	e3a03008 	mov	r3, #8
   3cec0:	eb0004ae 	bl	3e180 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   3cec4:	e59f9128 	ldr	r9, [pc, #296]	; 3cff4 <DisplayFX::init(int, int)+0x16c>
   3cec8:	e1a02004 	mov	r2, r4
   3cecc:	e1a00006 	mov	r0, r6
   3ced0:	e5856b2c 	str	r6, [r5, #2860]	; 0xb2c
   3ced4:	ea000000 	b	3cedc <DisplayFX::init(int, int)+0x54>
   3ced8:	e5b92004 	ldr	r2, [r9, #4]!
   3cedc:	e6ef1074 	uxtb	r1, r4
   3cee0:	e2844001 	add	r4, r4, #1
   3cee4:	eb000511 	bl	3e330 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>
   3cee8:	e3540c01 	cmp	r4, #256	; 0x100
   3ceec:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3cef0:	1afffff8 	bne	3ced8 <DisplayFX::init(int, int)+0x50>
   3cef4:	e3500000 	cmp	r0, #0
   3cef8:	0a000002 	beq	3cf08 <DisplayFX::init(int, int)+0x80>
   3cefc:	eb000519 	bl	3e368 <CBcmFrameBuffer::Initialize()>
   3cf00:	e2504000 	subs	r4, r0, #0
   3cf04:	1a000003 	bne	3cf18 <DisplayFX::init(int, int)+0x90>
   3cf08:	e3a04000 	mov	r4, #0
   3cf0c:	e1a00004 	mov	r0, r4
   3cf10:	e28dd034 	add	sp, sp, #52	; 0x34
   3cf14:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3cf18:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3cf1c:	eb00054c 	bl	3e454 <CBcmFrameBuffer::GetDepth() const>
   3cf20:	e3500008 	cmp	r0, #8
   3cf24:	1afffff7 	bne	3cf08 <DisplayFX::init(int, int)+0x80>
   3cf28:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3cf2c:	eb00054a 	bl	3e45c <CBcmFrameBuffer::GetBuffer() const>
   3cf30:	e5850b40 	str	r0, [r5, #2880]	; 0xb40
   3cf34:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3cf38:	eb000549 	bl	3e464 <CBcmFrameBuffer::GetSize() const>
   3cf3c:	e5850b3c 	str	r0, [r5, #2876]	; 0xb3c
   3cf40:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3cf44:	eb000540 	bl	3e44c <CBcmFrameBuffer::GetPitch() const>
   3cf48:	e5850b38 	str	r0, [r5, #2872]	; 0xb38
   3cf4c:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3cf50:	eb000535 	bl	3e42c <CBcmFrameBuffer::GetWidth() const>
   3cf54:	e5850b30 	str	r0, [r5, #2864]	; 0xb30
   3cf58:	e5950b2c 	ldr	r0, [r5, #2860]	; 0xb2c
   3cf5c:	eb000534 	bl	3e434 <CBcmFrameBuffer::GetHeight() const>
   3cf60:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3cf64:	e5850b34 	str	r0, [r5, #2868]	; 0xb34
   3cf68:	e3130003 	tst	r3, #3
   3cf6c:	1affffe5 	bne	3cf08 <DisplayFX::init(int, int)+0x80>
   3cf70:	e5953b40 	ldr	r3, [r5, #2880]	; 0xb40
   3cf74:	e5952b3c 	ldr	r2, [r5, #2876]	; 0xb3c
   3cf78:	e0832002 	add	r2, r3, r2
   3cf7c:	e1530002 	cmp	r3, r2
   3cf80:	2a000003 	bcs	3cf94 <DisplayFX::init(int, int)+0x10c>
   3cf84:	e5d51b44 	ldrb	r1, [r5, #2884]	; 0xb44
   3cf88:	e4c31001 	strb	r1, [r3], #1
   3cf8c:	e1520003 	cmp	r2, r3
   3cf90:	1afffffb 	bne	3cf84 <DisplayFX::init(int, int)+0xfc>
   3cf94:	e3a06000 	mov	r6, #0
   3cf98:	e3e00000 	mvn	r0, #0
   3cf9c:	e3a0c002 	mov	ip, #2
   3cfa0:	e58d0020 	str	r0, [sp, #32]
   3cfa4:	e58d001c 	str	r0, [sp, #28]
   3cfa8:	e58d000c 	str	r0, [sp, #12]
   3cfac:	e58d0008 	str	r0, [sp, #8]
   3cfb0:	e88d0180 	stm	sp, {r7, r8}
   3cfb4:	e58d6028 	str	r6, [sp, #40]	; 0x28
   3cfb8:	e58d6024 	str	r6, [sp, #36]	; 0x24
   3cfbc:	e58d6018 	str	r6, [sp, #24]
   3cfc0:	e1a03006 	mov	r3, r6
   3cfc4:	e1a02006 	mov	r2, r6
   3cfc8:	e1a01006 	mov	r1, r6
   3cfcc:	e58dc014 	str	ip, [sp, #20]
   3cfd0:	e58dc010 	str	ip, [sp, #16]
   3cfd4:	e1a00005 	mov	r0, r5
   3cfd8:	ebfffed1 	bl	3cb24 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]>
   3cfdc:	e5c56000 	strb	r6, [r5]
   3cfe0:	e5c5623c 	strb	r6, [r5, #572]	; 0x23c
   3cfe4:	e5c56478 	strb	r6, [r5, #1144]	; 0x478
   3cfe8:	e5c566b4 	strb	r6, [r5, #1716]	; 0x6b4
   3cfec:	e5c568f0 	strb	r6, [r5, #2288]	; 0x8f0
   3cff0:	eaffffc5 	b	3cf0c <DisplayFX::init(int, int)+0x84>
   3cff4:	00047a54 	.word	0x00047a54

0003cff8 <DisplayFX::screenClear()>:
   3cff8:	e5903b40 	ldr	r3, [r0, #2880]	; 0xb40
   3cffc:	e5901b3c 	ldr	r1, [r0, #2876]	; 0xb3c
   3d000:	e0831001 	add	r1, r3, r1
   3d004:	e1530001 	cmp	r3, r1
   3d008:	212fff1e 	bxcs	lr
   3d00c:	e5d02b44 	ldrb	r2, [r0, #2884]	; 0xb44
   3d010:	e4c32001 	strb	r2, [r3], #1
   3d014:	e1510003 	cmp	r1, r3
   3d018:	1afffffb 	bne	3d00c <DisplayFX::screenClear()+0x14>
   3d01c:	e12fff1e 	bx	lr

0003d020 <DisplayFX::screenRectClear(int, int, int, int)>:
   3d020:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d024:	e5904b38 	ldr	r4, [r0, #2872]	; 0xb38
   3d028:	e59d8020 	ldr	r8, [sp, #32]
   3d02c:	e0221294 	mla	r2, r4, r2, r1
   3d030:	e5904b40 	ldr	r4, [r0, #2880]	; 0xb40
   3d034:	e3580000 	cmp	r8, #0
   3d038:	e0844002 	add	r4, r4, r2
   3d03c:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d040:	e1a07003 	mov	r7, r3
   3d044:	e1a06000 	mov	r6, r0
   3d048:	e3a05000 	mov	r5, #0
   3d04c:	e2809d2d 	add	r9, r0, #2880	; 0xb40
   3d050:	e2899004 	add	r9, r9, #4
   3d054:	e1a02007 	mov	r2, r7
   3d058:	e1a00004 	mov	r0, r4
   3d05c:	e1d910d0 	ldrsb	r1, [r9]
   3d060:	ebffb3b3 	bl	29f34 <memset>
   3d064:	e2855001 	add	r5, r5, #1
   3d068:	e5962b38 	ldr	r2, [r6, #2872]	; 0xb38
   3d06c:	e1580005 	cmp	r8, r5
   3d070:	e0844002 	add	r4, r4, r2
   3d074:	1afffff6 	bne	3d054 <DisplayFX::screenRectClear(int, int, int, int)+0x34>
   3d078:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003d07c <DisplayFX::screenBackground(DISPLAY_FX_COLOUR)>:
   3d07c:	e5c01b44 	strb	r1, [r0, #2884]	; 0xb44
   3d080:	e12fff1e 	bx	lr

0003d084 <DisplayFX::windowPut(int, int, int, int)>:
   3d084:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d088:	e3510004 	cmp	r1, #4
   3d08c:	e24dd014 	sub	sp, sp, #20
   3d090:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
   3d094:	8a00006d 	bhi	3d250 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3d098:	e3a09f8f 	mov	r9, #572	; 0x23c
   3d09c:	e0090199 	mul	r9, r9, r1
   3d0a0:	e7d0c009 	ldrb	ip, [r0, r9]
   3d0a4:	e0809009 	add	r9, r0, r9
   3d0a8:	e35c0000 	cmp	ip, #0
   3d0ac:	0a000067 	beq	3d250 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3d0b0:	e1a05001 	mov	r5, r1
   3d0b4:	e5991014 	ldr	r1, [r9, #20]
   3d0b8:	e1a07000 	mov	r7, r0
   3d0bc:	e3510000 	cmp	r1, #0
   3d0c0:	e5990008 	ldr	r0, [r9, #8]
   3d0c4:	e1a06003 	mov	r6, r3
   3d0c8:	e1a0a002 	mov	sl, r2
   3d0cc:	d3a00000 	movle	r0, #0
   3d0d0:	da000000 	ble	3d0d8 <DisplayFX::windowPut(int, int, int, int)+0x54>
   3d0d4:	eb000331 	bl	3dda0 <__aeabi_idiv>
   3d0d8:	e15a0000 	cmp	sl, r0
   3d0dc:	aa00005b 	bge	3d250 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3d0e0:	e5991018 	ldr	r1, [r9, #24]
   3d0e4:	e5990010 	ldr	r0, [r9, #16]
   3d0e8:	e3510000 	cmp	r1, #0
   3d0ec:	d3a00000 	movle	r0, #0
   3d0f0:	da000000 	ble	3d0f8 <DisplayFX::windowPut(int, int, int, int)+0x74>
   3d0f4:	eb000329 	bl	3dda0 <__aeabi_idiv>
   3d0f8:	e1560000 	cmp	r6, r0
   3d0fc:	aa000053 	bge	3d250 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3d100:	e3a02f8f 	mov	r2, #572	; 0x23c
   3d104:	e0227592 	mla	r2, r2, r5, r7
   3d108:	e5928014 	ldr	r8, [r2, #20]
   3d10c:	e5923018 	ldr	r3, [r2, #24]
   3d110:	e0010a98 	mul	r1, r8, sl
   3d114:	e5990004 	ldr	r0, [r9, #4]
   3d118:	e58d3004 	str	r3, [sp, #4]
   3d11c:	e0030693 	mul	r3, r3, r6
   3d120:	e592601c 	ldr	r6, [r2, #28]
   3d124:	e592e028 	ldr	lr, [r2, #40]	; 0x28
   3d128:	e0210196 	mla	r1, r6, r1, r0
   3d12c:	e592002c 	ldr	r0, [r2, #44]	; 0x2c
   3d130:	e592c020 	ldr	ip, [r2, #32]
   3d134:	e592900c 	ldr	r9, [r2, #12]
   3d138:	e590b00c 	ldr	fp, [r0, #12]
   3d13c:	e5902010 	ldr	r2, [r0, #16]
   3d140:	e37e0001 	cmn	lr, #1
   3d144:	e02b249b 	mla	fp, fp, r4, r2
   3d148:	02872d2d 	addeq	r2, r7, #2880	; 0xb40
   3d14c:	01d2e0d5 	ldrsbeq	lr, [r2, #5]
   3d150:	e3a02f8f 	mov	r2, #572	; 0x23c
   3d154:	e0227592 	mla	r2, r2, r5, r7
   3d158:	e029939c 	mla	r9, ip, r3, r9
   3d15c:	e5924024 	ldr	r4, [r2, #36]	; 0x24
   3d160:	e5973b38 	ldr	r3, [r7, #2872]	; 0xb38
   3d164:	e3740001 	cmn	r4, #1
   3d168:	02872d2d 	addeq	r2, r7, #2880	; 0xb40
   3d16c:	e0211993 	mla	r1, r3, r9, r1
   3d170:	01d240d4 	ldrsbeq	r4, [r2, #4]
   3d174:	e59d2004 	ldr	r2, [sp, #4]
   3d178:	e5979b40 	ldr	r9, [r7, #2880]	; 0xb40
   3d17c:	e3520000 	cmp	r2, #0
   3d180:	e58dc000 	str	ip, [sp]
   3d184:	e0899001 	add	r9, r9, r1
   3d188:	da000030 	ble	3d250 <DisplayFX::windowPut(int, int, int, int)+0x1cc>
   3d18c:	e3a02f8f 	mov	r2, #572	; 0x23c
   3d190:	e3a01000 	mov	r1, #0
   3d194:	e0227592 	mla	r2, r2, r5, r7
   3d198:	e58d1008 	str	r1, [sp, #8]
   3d19c:	e58d200c 	str	r2, [sp, #12]
   3d1a0:	e6ef4074 	uxtb	r4, r4
   3d1a4:	e6efe07e 	uxtb	lr, lr
   3d1a8:	e59d2000 	ldr	r2, [sp]
   3d1ac:	e3520000 	cmp	r2, #0
   3d1b0:	da00001c 	ble	3d228 <DisplayFX::windowPut(int, int, int, int)+0x1a4>
   3d1b4:	e3a0a000 	mov	sl, #0
   3d1b8:	e3580000 	cmp	r8, #0
   3d1bc:	c1a0000b 	movgt	r0, fp
   3d1c0:	c1a03009 	movgt	r3, r9
   3d1c4:	c3a01080 	movgt	r1, #128	; 0x80
   3d1c8:	c3a05000 	movgt	r5, #0
   3d1cc:	da000010 	ble	3d214 <DisplayFX::windowPut(int, int, int, int)+0x190>
   3d1d0:	e3560000 	cmp	r6, #0
   3d1d4:	da000007 	ble	3d1f8 <DisplayFX::windowPut(int, int, int, int)+0x174>
   3d1d8:	e083c006 	add	ip, r3, r6
   3d1dc:	e5d02000 	ldrb	r2, [r0]
   3d1e0:	e1120001 	tst	r2, r1
   3d1e4:	11a0200e 	movne	r2, lr
   3d1e8:	01a02004 	moveq	r2, r4
   3d1ec:	e4c32001 	strb	r2, [r3], #1
   3d1f0:	e153000c 	cmp	r3, ip
   3d1f4:	1afffff8 	bne	3d1dc <DisplayFX::windowPut(int, int, int, int)+0x158>
   3d1f8:	e1b010c1 	asrs	r1, r1, #1
   3d1fc:	e2855001 	add	r5, r5, #1
   3d200:	03a01080 	moveq	r1, #128	; 0x80
   3d204:	02800001 	addeq	r0, r0, #1
   3d208:	e1580005 	cmp	r8, r5
   3d20c:	1affffef 	bne	3d1d0 <DisplayFX::windowPut(int, int, int, int)+0x14c>
   3d210:	e5973b38 	ldr	r3, [r7, #2872]	; 0xb38
   3d214:	e59d2000 	ldr	r2, [sp]
   3d218:	e28aa001 	add	sl, sl, #1
   3d21c:	e152000a 	cmp	r2, sl
   3d220:	e0899003 	add	r9, r9, r3
   3d224:	1affffe3 	bne	3d1b8 <DisplayFX::windowPut(int, int, int, int)+0x134>
   3d228:	e59d200c 	ldr	r2, [sp, #12]
   3d22c:	e59d1008 	ldr	r1, [sp, #8]
   3d230:	e592202c 	ldr	r2, [r2, #44]	; 0x2c
   3d234:	e59d0004 	ldr	r0, [sp, #4]
   3d238:	e2811001 	add	r1, r1, #1
   3d23c:	e5922008 	ldr	r2, [r2, #8]
   3d240:	e1500001 	cmp	r0, r1
   3d244:	e58d1008 	str	r1, [sp, #8]
   3d248:	e08bb002 	add	fp, fp, r2
   3d24c:	1affffd5 	bne	3d1a8 <DisplayFX::windowPut(int, int, int, int)+0x124>
   3d250:	e28dd014 	add	sp, sp, #20
   3d254:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003d258 <DisplayFX::windowPut(int, int, int, char const*)>:
   3d258:	e3510004 	cmp	r1, #4
   3d25c:	812fff1e 	bxhi	lr
   3d260:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d264:	e24dd00c 	sub	sp, sp, #12
   3d268:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   3d26c:	e1dc50d0 	ldrsb	r5, [ip]
   3d270:	e3550000 	cmp	r5, #0
   3d274:	0a000019 	beq	3d2e0 <DisplayFX::windowPut(int, int, int, char const*)+0x88>
   3d278:	e3a06f8f 	mov	r6, #572	; 0x23c
   3d27c:	e1a0a003 	mov	sl, r3
   3d280:	e1a09000 	mov	r9, r0
   3d284:	e1a07001 	mov	r7, r1
   3d288:	e1a0400c 	mov	r4, ip
   3d28c:	e0260196 	mla	r6, r6, r1, r0
   3d290:	e042800c 	sub	r8, r2, ip
   3d294:	ea000008 	b	3d2bc <DisplayFX::windowPut(int, int, int, char const*)+0x64>
   3d298:	e58d5000 	str	r5, [sp]
   3d29c:	e1a0200b 	mov	r2, fp
   3d2a0:	e1a0300a 	mov	r3, sl
   3d2a4:	e1a01007 	mov	r1, r7
   3d2a8:	e1a00009 	mov	r0, r9
   3d2ac:	ebffff74 	bl	3d084 <DisplayFX::windowPut(int, int, int, int)>
   3d2b0:	e1f450d1 	ldrsb	r5, [r4, #1]!
   3d2b4:	e3550000 	cmp	r5, #0
   3d2b8:	0a000008 	beq	3d2e0 <DisplayFX::windowPut(int, int, int, char const*)+0x88>
   3d2bc:	e5961014 	ldr	r1, [r6, #20]
   3d2c0:	e5960008 	ldr	r0, [r6, #8]
   3d2c4:	e3510000 	cmp	r1, #0
   3d2c8:	e084b008 	add	fp, r4, r8
   3d2cc:	d3a00000 	movle	r0, #0
   3d2d0:	da000000 	ble	3d2d8 <DisplayFX::windowPut(int, int, int, char const*)+0x80>
   3d2d4:	eb0002b1 	bl	3dda0 <__aeabi_idiv>
   3d2d8:	e15b0000 	cmp	fp, r0
   3d2dc:	baffffed 	blt	3d298 <DisplayFX::windowPut(int, int, int, char const*)+0x40>
   3d2e0:	e28dd00c 	add	sp, sp, #12
   3d2e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003d2e8 <DisplayFX::windowForeground(int, DISPLAY_FX_COLOUR)>:
   3d2e8:	e3510004 	cmp	r1, #4
   3d2ec:	93a03f8f 	movls	r3, #572	; 0x23c
   3d2f0:	90210193 	mlals	r1, r3, r1, r0
   3d2f4:	95812028 	strls	r2, [r1, #40]	; 0x28
   3d2f8:	e12fff1e 	bx	lr

0003d2fc <DisplayFX::windowBackground(int, DISPLAY_FX_COLOUR)>:
   3d2fc:	e3510004 	cmp	r1, #4
   3d300:	93a03f8f 	movls	r3, #572	; 0x23c
   3d304:	90210193 	mlals	r1, r3, r1, r0
   3d308:	95812024 	strls	r2, [r1, #36]	; 0x24
   3d30c:	e12fff1e 	bx	lr

0003d310 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)>:
   3d310:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3d314:	e3a05f8f 	mov	r5, #572	; 0x23c
   3d318:	e0250195 	mla	r5, r5, r1, r0
   3d31c:	e595400c 	ldr	r4, [r5, #12]
   3d320:	e595c01c 	ldr	ip, [r5, #28]
   3d324:	e595e020 	ldr	lr, [r5, #32]
   3d328:	e5956004 	ldr	r6, [r5, #4]
   3d32c:	e023439e 	mla	r3, lr, r3, r4
   3d330:	e026629c 	mla	r6, ip, r2, r6
   3d334:	e5904b38 	ldr	r4, [r0, #2872]	; 0xb38
   3d338:	e5955028 	ldr	r5, [r5, #40]	; 0x28
   3d33c:	e0236394 	mla	r3, r4, r3, r6
   3d340:	e5906b40 	ldr	r6, [r0, #2880]	; 0xb40
   3d344:	e3750001 	cmn	r5, #1
   3d348:	e0866003 	add	r6, r6, r3
   3d34c:	02803d2d 	addeq	r3, r0, #2880	; 0xb40
   3d350:	01d350d5 	ldrsbeq	r5, [r3, #5]
   3d354:	e3a03f8f 	mov	r3, #572	; 0x23c
   3d358:	e1dd21d8 	ldrsb	r2, [sp, #24]
   3d35c:	e0230193 	mla	r3, r3, r1, r0
   3d360:	e3720001 	cmn	r2, #1
   3d364:	11a05002 	movne	r5, r2
   3d368:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   3d36c:	e59d7014 	ldr	r7, [sp, #20]
   3d370:	e3730001 	cmn	r3, #1
   3d374:	02803d2d 	addeq	r3, r0, #2880	; 0xb40
   3d378:	01d330d4 	ldrsbeq	r3, [r3, #4]
   3d37c:	e3570000 	cmp	r7, #0
   3d380:	16ef5075 	uxtbne	r5, r5
   3d384:	06ef5073 	uxtbeq	r5, r3
   3d388:	e21c7003 	ands	r7, ip, #3
   3d38c:	0a000014 	beq	3d3e4 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xd4>
   3d390:	e35e0000 	cmp	lr, #0
   3d394:	d8bd80f0 	pople	{r4, r5, r6, r7, pc}
   3d398:	e3a0ef8f 	mov	lr, #572	; 0x23c
   3d39c:	e3a07000 	mov	r7, #0
   3d3a0:	e02e019e 	mla	lr, lr, r1, r0
   3d3a4:	e35c0000 	cmp	ip, #0
   3d3a8:	e02c6497 	mla	ip, r7, r4, r6
   3d3ac:	c1a0300c 	movgt	r3, ip
   3d3b0:	da000004 	ble	3d3c8 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xb8>
   3d3b4:	e4c35001 	strb	r5, [r3], #1
   3d3b8:	e59e101c 	ldr	r1, [lr, #28]
   3d3bc:	e043200c 	sub	r2, r3, ip
   3d3c0:	e1510002 	cmp	r1, r2
   3d3c4:	cafffffa 	bgt	3d3b4 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0xa4>
   3d3c8:	e59e3020 	ldr	r3, [lr, #32]
   3d3cc:	e2877001 	add	r7, r7, #1
   3d3d0:	e1530007 	cmp	r3, r7
   3d3d4:	da00001a 	ble	3d444 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x134>
   3d3d8:	e5904b38 	ldr	r4, [r0, #2872]	; 0xb38
   3d3dc:	e59ec01c 	ldr	ip, [lr, #28]
   3d3e0:	eaffffef 	b	3d3a4 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x94>
   3d3e4:	e1a03805 	lsl	r3, r5, #16
   3d3e8:	e0833c05 	add	r3, r3, r5, lsl #24
   3d3ec:	e0833405 	add	r3, r3, r5, lsl #8
   3d3f0:	e35e0000 	cmp	lr, #0
   3d3f4:	e0835005 	add	r5, r3, r5
   3d3f8:	d8bd80f0 	pople	{r4, r5, r6, r7, pc}
   3d3fc:	e28c1003 	add	r1, ip, #3
   3d400:	e35c0000 	cmp	ip, #0
   3d404:	b1a0c001 	movlt	ip, r1
   3d408:	e1a00007 	mov	r0, r7
   3d40c:	e1a0114c 	asr	r1, ip, #2
   3d410:	e3510000 	cmp	r1, #0
   3d414:	e1a02006 	mov	r2, r6
   3d418:	c1a03007 	movgt	r3, r7
   3d41c:	da000003 	ble	3d430 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x120>
   3d420:	e2833001 	add	r3, r3, #1
   3d424:	e1530001 	cmp	r3, r1
   3d428:	e4825004 	str	r5, [r2], #4
   3d42c:	1afffffb 	bne	3d420 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x110>
   3d430:	e2800001 	add	r0, r0, #1
   3d434:	e150000e 	cmp	r0, lr
   3d438:	e0866004 	add	r6, r6, r4
   3d43c:	1afffff3 	bne	3d410 <DisplayFX::windowSetPixel(int, int, int, int, DISPLAY_FX_COLOUR)+0x100>
   3d440:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   3d444:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0003d448 <DisplayFX::getFramebuffer(int, FrameBufferInfo&)>:
   3d448:	e3a03f8f 	mov	r3, #572	; 0x23c
   3d44c:	e92d4030 	push	{r4, r5, lr}
   3d450:	e3a04001 	mov	r4, #1
   3d454:	e0210193 	mla	r1, r3, r1, r0
   3d458:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3d45c:	e5915004 	ldr	r5, [r1, #4]
   3d460:	e591300c 	ldr	r3, [r1, #12]
   3d464:	e590eb40 	ldr	lr, [r0, #2880]	; 0xb40
   3d468:	e0235c93 	mla	r3, r3, ip, r5
   3d46c:	e5900b30 	ldr	r0, [r0, #2864]	; 0xb30
   3d470:	e5915008 	ldr	r5, [r1, #8]
   3d474:	e5911010 	ldr	r1, [r1, #16]
   3d478:	e08e3003 	add	r3, lr, r3
   3d47c:	e5823010 	str	r3, [r2, #16]
   3d480:	e582e000 	str	lr, [r2]
   3d484:	e5820004 	str	r0, [r2, #4]
   3d488:	e5820008 	str	r0, [r2, #8]
   3d48c:	e582c00c 	str	ip, [r2, #12]
   3d490:	e5825014 	str	r5, [r2, #20]
   3d494:	e5821018 	str	r1, [r2, #24]
   3d498:	e582401c 	str	r4, [r2, #28]
   3d49c:	e8bd8030 	pop	{r4, r5, pc}

0003d4a0 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)>:
   3d4a0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d4a4:	e24dd00c 	sub	sp, sp, #12
   3d4a8:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   3d4ac:	e3510004 	cmp	r1, #4
   3d4b0:	e58dc004 	str	ip, [sp, #4]
   3d4b4:	e59de038 	ldr	lr, [sp, #56]	; 0x38
   3d4b8:	8a000002 	bhi	3d4c8 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int)+0x28>
   3d4bc:	e28dd00c 	add	sp, sp, #12
   3d4c0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d4c4:	eafffd96 	b	3cb24 <DisplayFX::windowSetup(int, int, int, int, int, int, int, int, int, WgfxFont*, int, int, int, int) [clone .part.4]>
   3d4c8:	e28dd00c 	add	sp, sp, #12
   3d4cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003d4d0 <DisplayFX::windowClear(int)>:
   3d4d0:	e3510004 	cmp	r1, #4
   3d4d4:	812fff1e 	bxhi	lr
   3d4d8:	e3a03f8f 	mov	r3, #572	; 0x23c
   3d4dc:	e0010193 	mul	r1, r3, r1
   3d4e0:	e7d03001 	ldrb	r3, [r0, r1]
   3d4e4:	e0801001 	add	r1, r0, r1
   3d4e8:	e3530000 	cmp	r3, #0
   3d4ec:	012fff1e 	bxeq	lr
   3d4f0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d4f4:	e5902b38 	ldr	r2, [r0, #2872]	; 0xb38
   3d4f8:	e591400c 	ldr	r4, [r1, #12]
   3d4fc:	e5913004 	ldr	r3, [r1, #4]
   3d500:	e5917010 	ldr	r7, [r1, #16]
   3d504:	e0233492 	mla	r3, r2, r4, r3
   3d508:	e5904b40 	ldr	r4, [r0, #2880]	; 0xb40
   3d50c:	e3570000 	cmp	r7, #0
   3d510:	e0844003 	add	r4, r4, r3
   3d514:	e5919008 	ldr	r9, [r1, #8]
   3d518:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d51c:	e1a06000 	mov	r6, r0
   3d520:	e3a05000 	mov	r5, #0
   3d524:	e2808d2d 	add	r8, r0, #2880	; 0xb40
   3d528:	e2888004 	add	r8, r8, #4
   3d52c:	e1a00004 	mov	r0, r4
   3d530:	e1a02009 	mov	r2, r9
   3d534:	e1d810d0 	ldrsb	r1, [r8]
   3d538:	ebffb27d 	bl	29f34 <memset>
   3d53c:	e2855001 	add	r5, r5, #1
   3d540:	e5963b38 	ldr	r3, [r6, #2872]	; 0xb38
   3d544:	e1570005 	cmp	r7, r5
   3d548:	e0844003 	add	r4, r4, r3
   3d54c:	1afffff6 	bne	3d52c <DisplayFX::windowClear(int)+0x5c>
   3d550:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0003d554 <DisplayFX::windowGetPFB(int, int, int)>:
   3d554:	e3a0cf8f 	mov	ip, #572	; 0x23c
   3d558:	e021019c 	mla	r1, ip, r1, r0
   3d55c:	e92d4030 	push	{r4, r5, lr}
   3d560:	e591c018 	ldr	ip, [r1, #24]
   3d564:	e591e014 	ldr	lr, [r1, #20]
   3d568:	e003039c 	mul	r3, ip, r3
   3d56c:	e002029e 	mul	r2, lr, r2
   3d570:	e591c00c 	ldr	ip, [r1, #12]
   3d574:	e5915020 	ldr	r5, [r1, #32]
   3d578:	e591401c 	ldr	r4, [r1, #28]
   3d57c:	e591e004 	ldr	lr, [r1, #4]
   3d580:	e023c395 	mla	r3, r5, r3, ip
   3d584:	e022e294 	mla	r2, r4, r2, lr
   3d588:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3d58c:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3d590:	e023239c 	mla	r3, ip, r3, r2
   3d594:	e0800003 	add	r0, r0, r3
   3d598:	e8bd8030 	pop	{r4, r5, pc}

0003d59c <DisplayFX::screenGetPFBXY(int, int)>:
   3d59c:	e5903b38 	ldr	r3, [r0, #2872]	; 0xb38
   3d5a0:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3d5a4:	e0221293 	mla	r2, r3, r2, r1
   3d5a8:	e0800002 	add	r0, r0, r2
   3d5ac:	e12fff1e 	bx	lr

0003d5b0 <DisplayFX::windowGetPFBXY(int, int, int)>:
   3d5b0:	e3a0cf8f 	mov	ip, #572	; 0x23c
   3d5b4:	e021019c 	mla	r1, ip, r1, r0
   3d5b8:	e92d4010 	push	{r4, lr}
   3d5bc:	e591c020 	ldr	ip, [r1, #32]
   3d5c0:	e591400c 	ldr	r4, [r1, #12]
   3d5c4:	e591e01c 	ldr	lr, [r1, #28]
   3d5c8:	e5911004 	ldr	r1, [r1, #4]
   3d5cc:	e023439c 	mla	r3, ip, r3, r4
   3d5d0:	e022129e 	mla	r2, lr, r2, r1
   3d5d4:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3d5d8:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3d5dc:	e023239c 	mla	r3, ip, r3, r2
   3d5e0:	e0800003 	add	r0, r0, r3
   3d5e4:	e8bd8010 	pop	{r4, pc}

0003d5e8 <DisplayFX::consoleForeground(DISPLAY_FX_COLOUR)>:
   3d5e8:	e3a02f8f 	mov	r2, #572	; 0x23c
   3d5ec:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3d5f0:	e0200392 	mla	r0, r2, r3, r0
   3d5f4:	e5801028 	str	r1, [r0, #40]	; 0x28
   3d5f8:	e12fff1e 	bx	lr

0003d5fc <DisplayFX::consoleGetWidth()>:
   3d5fc:	e3a02f8f 	mov	r2, #572	; 0x23c
   3d600:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3d604:	e0200392 	mla	r0, r2, r3, r0
   3d608:	e5901014 	ldr	r1, [r0, #20]
   3d60c:	e5900008 	ldr	r0, [r0, #8]
   3d610:	e3510000 	cmp	r1, #0
   3d614:	da000002 	ble	3d624 <DisplayFX::consoleGetWidth()+0x28>
   3d618:	e92d4010 	push	{r4, lr}
   3d61c:	eb0001df 	bl	3dda0 <__aeabi_idiv>
   3d620:	e8bd8010 	pop	{r4, pc}
   3d624:	e3a00000 	mov	r0, #0
   3d628:	e12fff1e 	bx	lr

0003d62c <DisplayFX::consoleSetWindow(int)>:
   3d62c:	e3510004 	cmp	r1, #4
   3d630:	95801b48 	strls	r1, [r0, #2888]	; 0xb48
   3d634:	e12fff1e 	bx	lr

0003d638 <DisplayFX::cursorCheck()>:
   3d638:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3d63c:	e3a04f8f 	mov	r4, #572	; 0x23c
   3d640:	e5906b48 	ldr	r6, [r0, #2888]	; 0xb48
   3d644:	e1a05000 	mov	r5, r0
   3d648:	e0240694 	mla	r4, r4, r6, r0
   3d64c:	e5941014 	ldr	r1, [r4, #20]
   3d650:	e5940008 	ldr	r0, [r4, #8]
   3d654:	e3510000 	cmp	r1, #0
   3d658:	e5947034 	ldr	r7, [r4, #52]	; 0x34
   3d65c:	d3a00000 	movle	r0, #0
   3d660:	da000000 	ble	3d668 <DisplayFX::cursorCheck()+0x30>
   3d664:	eb0001cd 	bl	3dda0 <__aeabi_idiv>
   3d668:	e1570000 	cmp	r7, r0
   3d66c:	ba000006 	blt	3d68c <DisplayFX::cursorCheck()+0x54>
   3d670:	e3a03f8f 	mov	r3, #572	; 0x23c
   3d674:	e3a01000 	mov	r1, #0
   3d678:	e0235693 	mla	r3, r3, r6, r5
   3d67c:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   3d680:	e5831034 	str	r1, [r3, #52]	; 0x34
   3d684:	e2822001 	add	r2, r2, #1
   3d688:	e5832030 	str	r2, [r3, #48]	; 0x30
   3d68c:	e3a03f8f 	mov	r3, #572	; 0x23c
   3d690:	e0235693 	mla	r3, r3, r6, r5
   3d694:	e5941018 	ldr	r1, [r4, #24]
   3d698:	e5940010 	ldr	r0, [r4, #16]
   3d69c:	e3510000 	cmp	r1, #0
   3d6a0:	e5937030 	ldr	r7, [r3, #48]	; 0x30
   3d6a4:	d3a00000 	movle	r0, #0
   3d6a8:	da000000 	ble	3d6b0 <DisplayFX::cursorCheck()+0x78>
   3d6ac:	eb0001bb 	bl	3dda0 <__aeabi_idiv>
   3d6b0:	e1570000 	cmp	r7, r0
   3d6b4:	b8bd81f0 	poplt	{r4, r5, r6, r7, r8, pc}
   3d6b8:	e3a03f8f 	mov	r3, #572	; 0x23c
   3d6bc:	e0235693 	mla	r3, r3, r6, r5
   3d6c0:	e2477001 	sub	r7, r7, #1
   3d6c4:	e3560004 	cmp	r6, #4
   3d6c8:	e5837030 	str	r7, [r3, #48]	; 0x30
   3d6cc:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   3d6d0:	e1a01006 	mov	r1, r6
   3d6d4:	e1a00005 	mov	r0, r5
   3d6d8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   3d6dc:	e3a02001 	mov	r2, #1
   3d6e0:	eafffcb5 	b	3c9bc <DisplayFX::windowScroll(int, int) [clone .part.3]>

0003d6e4 <DisplayFX::consolePut(int)>:
   3d6e4:	e92d4070 	push	{r4, r5, r6, lr}
   3d6e8:	e2413008 	sub	r3, r1, #8
   3d6ec:	e24dd008 	sub	sp, sp, #8
   3d6f0:	e1a04000 	mov	r4, r0
   3d6f4:	e3530005 	cmp	r3, #5
   3d6f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3d6fc:	ea000043 	b	3d810 <DisplayFX::consolePut(int)+0x12c>
   3d700:	0003d7d4 	.word	0x0003d7d4
   3d704:	0003d760 	.word	0x0003d760
   3d708:	0003d734 	.word	0x0003d734
   3d70c:	0003d810 	.word	0x0003d810
   3d710:	0003d810 	.word	0x0003d810
   3d714:	0003d718 	.word	0x0003d718
   3d718:	e3a01f8f 	mov	r1, #572	; 0x23c
   3d71c:	e3a02000 	mov	r2, #0
   3d720:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3d724:	e0240391 	mla	r4, r1, r3, r0
   3d728:	e5842034 	str	r2, [r4, #52]	; 0x34
   3d72c:	e28dd008 	add	sp, sp, #8
   3d730:	e8bd8070 	pop	{r4, r5, r6, pc}
   3d734:	e3a01f8f 	mov	r1, #572	; 0x23c
   3d738:	e3a02000 	mov	r2, #0
   3d73c:	e5903b48 	ldr	r3, [r0, #2888]	; 0xb48
   3d740:	e0240391 	mla	r4, r1, r3, r0
   3d744:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3d748:	e5842034 	str	r2, [r4, #52]	; 0x34
   3d74c:	e2833001 	add	r3, r3, #1
   3d750:	e5843030 	str	r3, [r4, #48]	; 0x30
   3d754:	e28dd008 	add	sp, sp, #8
   3d758:	e8bd4070 	pop	{r4, r5, r6, lr}
   3d75c:	eaffffb5 	b	3d638 <DisplayFX::cursorCheck()>
   3d760:	e3a02f8f 	mov	r2, #572	; 0x23c
   3d764:	e5906b48 	ldr	r6, [r0, #2888]	; 0xb48
   3d768:	e0220692 	mla	r2, r2, r6, r0
   3d76c:	e5923034 	ldr	r3, [r2, #52]	; 0x34
   3d770:	e5921014 	ldr	r1, [r2, #20]
   3d774:	e283c001 	add	ip, r3, #1
   3d778:	e1a05fcc 	asr	r5, ip, #31
   3d77c:	e1a00ea5 	lsr	r0, r5, #29
   3d780:	e08c5000 	add	r5, ip, r0
   3d784:	e2055007 	and	r5, r5, #7
   3d788:	e0455000 	sub	r5, r5, r0
   3d78c:	e2833009 	add	r3, r3, #9
   3d790:	e3510000 	cmp	r1, #0
   3d794:	e5920008 	ldr	r0, [r2, #8]
   3d798:	e582c034 	str	ip, [r2, #52]	; 0x34
   3d79c:	e0435005 	sub	r5, r3, r5
   3d7a0:	d3e00000 	mvnle	r0, #0
   3d7a4:	da000001 	ble	3d7b0 <DisplayFX::consolePut(int)+0xcc>
   3d7a8:	eb00017c 	bl	3dda0 <__aeabi_idiv>
   3d7ac:	e2400001 	sub	r0, r0, #1
   3d7b0:	e3a03f8f 	mov	r3, #572	; 0x23c
   3d7b4:	e1550000 	cmp	r5, r0
   3d7b8:	a1a05000 	movge	r5, r0
   3d7bc:	e1a00004 	mov	r0, r4
   3d7c0:	e0264693 	mla	r6, r3, r6, r4
   3d7c4:	e5865034 	str	r5, [r6, #52]	; 0x34
   3d7c8:	e28dd008 	add	sp, sp, #8
   3d7cc:	e8bd4070 	pop	{r4, r5, r6, lr}
   3d7d0:	eaffff98 	b	3d638 <DisplayFX::cursorCheck()>
   3d7d4:	e3a00f8f 	mov	r0, #572	; 0x23c
   3d7d8:	e5941b48 	ldr	r1, [r4, #2888]	; 0xb48
   3d7dc:	e0204190 	mla	r0, r0, r1, r4
   3d7e0:	e5902034 	ldr	r2, [r0, #52]	; 0x34
   3d7e4:	e3520000 	cmp	r2, #0
   3d7e8:	daffffcf 	ble	3d72c <DisplayFX::consolePut(int)+0x48>
   3d7ec:	e3a0c020 	mov	ip, #32
   3d7f0:	e2422001 	sub	r2, r2, #1
   3d7f4:	e5903030 	ldr	r3, [r0, #48]	; 0x30
   3d7f8:	e5802034 	str	r2, [r0, #52]	; 0x34
   3d7fc:	e1a00004 	mov	r0, r4
   3d800:	e58dc000 	str	ip, [sp]
   3d804:	ebfffe1e 	bl	3d084 <DisplayFX::windowPut(int, int, int, int)>
   3d808:	e28dd008 	add	sp, sp, #8
   3d80c:	e8bd8070 	pop	{r4, r5, r6, pc}
   3d810:	e3a05f8f 	mov	r5, #572	; 0x23c
   3d814:	e1a0c001 	mov	ip, r1
   3d818:	e5901b48 	ldr	r1, [r0, #2888]	; 0xb48
   3d81c:	e0220195 	mla	r2, r5, r1, r0
   3d820:	e5923030 	ldr	r3, [r2, #48]	; 0x30
   3d824:	e5922034 	ldr	r2, [r2, #52]	; 0x34
   3d828:	e58dc000 	str	ip, [sp]
   3d82c:	ebfffe14 	bl	3d084 <DisplayFX::windowPut(int, int, int, int)>
   3d830:	e1a00004 	mov	r0, r4
   3d834:	e5943b48 	ldr	r3, [r4, #2888]	; 0xb48
   3d838:	e0244395 	mla	r4, r5, r3, r4
   3d83c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3d840:	e2833001 	add	r3, r3, #1
   3d844:	e5843034 	str	r3, [r4, #52]	; 0x34
   3d848:	e28dd008 	add	sp, sp, #8
   3d84c:	e8bd4070 	pop	{r4, r5, r6, lr}
   3d850:	eaffff78 	b	3d638 <DisplayFX::cursorCheck()>

0003d854 <DisplayFX::consolePut(char const*)>:
   3d854:	e92d4070 	push	{r4, r5, r6, lr}
   3d858:	e1a04001 	mov	r4, r1
   3d85c:	e1d110d0 	ldrsb	r1, [r1]
   3d860:	e3510000 	cmp	r1, #0
   3d864:	08bd8070 	popeq	{r4, r5, r6, pc}
   3d868:	e1a05000 	mov	r5, r0
   3d86c:	e1a00005 	mov	r0, r5
   3d870:	ebffff9b 	bl	3d6e4 <DisplayFX::consolePut(int)>
   3d874:	e1f410d1 	ldrsb	r1, [r4, #1]!
   3d878:	e3510000 	cmp	r1, #0
   3d87c:	1afffffa 	bne	3d86c <DisplayFX::consolePut(char const*)+0x18>
   3d880:	e8bd8070 	pop	{r4, r5, r6, pc}

0003d884 <DisplayFX::consolePut(char const*, unsigned int)>:
   3d884:	e92d4070 	push	{r4, r5, r6, lr}
   3d888:	e2525000 	subs	r5, r2, #0
   3d88c:	08bd8070 	popeq	{r4, r5, r6, pc}
   3d890:	e1a06000 	mov	r6, r0
   3d894:	e1a04001 	mov	r4, r1
   3d898:	e0815005 	add	r5, r1, r5
   3d89c:	e0d410d1 	ldrsb	r1, [r4], #1
   3d8a0:	e1a00006 	mov	r0, r6
   3d8a4:	ebffff8e 	bl	3d6e4 <DisplayFX::consolePut(int)>
   3d8a8:	e1540005 	cmp	r4, r5
   3d8ac:	1afffffa 	bne	3d89c <DisplayFX::consolePut(char const*, unsigned int)+0x18>
   3d8b0:	e8bd8070 	pop	{r4, r5, r6, pc}

0003d8b4 <DisplayFX::windowScroll(int, int)>:
   3d8b4:	e16f3f12 	clz	r3, r2
   3d8b8:	e1a032a3 	lsr	r3, r3, #5
   3d8bc:	e3510004 	cmp	r1, #4
   3d8c0:	83833001 	orrhi	r3, r3, #1
   3d8c4:	e3530000 	cmp	r3, #0
   3d8c8:	112fff1e 	bxne	lr
   3d8cc:	eafffc3a 	b	3c9bc <DisplayFX::windowScroll(int, int) [clone .part.3]>

0003d8d0 <DisplayFX::drawHorizontal(int, int, int, int)>:
   3d8d0:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3d8d4:	e5900b40 	ldr	r0, [r0, #2880]	; 0xb40
   3d8d8:	e022129c 	mla	r2, ip, r2, r1
   3d8dc:	e3530000 	cmp	r3, #0
   3d8e0:	e0802002 	add	r2, r0, r2
   3d8e4:	d12fff1e 	bxle	lr
   3d8e8:	e5dd1000 	ldrb	r1, [sp]
   3d8ec:	e0823003 	add	r3, r2, r3
   3d8f0:	e4c21001 	strb	r1, [r2], #1
   3d8f4:	e1530002 	cmp	r3, r2
   3d8f8:	1afffffc 	bne	3d8f0 <DisplayFX::drawHorizontal(int, int, int, int)+0x20>
   3d8fc:	e12fff1e 	bx	lr

0003d900 <DisplayFX::drawVertical(int, int, int, int)>:
   3d900:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   3d904:	e590eb38 	ldr	lr, [r0, #2872]	; 0xb38
   3d908:	e590cb40 	ldr	ip, [r0, #2880]	; 0xb40
   3d90c:	e022129e 	mla	r2, lr, r2, r1
   3d910:	e3530000 	cmp	r3, #0
   3d914:	e08c2002 	add	r2, ip, r2
   3d918:	d49df004 	pople	{pc}		; (ldrle pc, [sp], #4)
   3d91c:	e3a01000 	mov	r1, #0
   3d920:	e5dde004 	ldrb	lr, [sp, #4]
   3d924:	e5c2e000 	strb	lr, [r2]
   3d928:	e2811001 	add	r1, r1, #1
   3d92c:	e590cb38 	ldr	ip, [r0, #2872]	; 0xb38
   3d930:	e1530001 	cmp	r3, r1
   3d934:	e082200c 	add	r2, r2, ip
   3d938:	1afffff9 	bne	3d924 <DisplayFX::drawVertical(int, int, int, int)+0x24>
   3d93c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0003d940 <DisplayFX::screenReadCell(int, int, int, unsigned char*)>:
   3d940:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d944:	e3510004 	cmp	r1, #4
   3d948:	e59d4020 	ldr	r4, [sp, #32]
   3d94c:	88bd87f0 	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d950:	e3a0af8f 	mov	sl, #572	; 0x23c
   3d954:	e00a019a 	mul	sl, sl, r1
   3d958:	e080800a 	add	r8, r0, sl
   3d95c:	e1a06001 	mov	r6, r1
   3d960:	e5981014 	ldr	r1, [r8, #20]
   3d964:	e1a05000 	mov	r5, r0
   3d968:	e3510000 	cmp	r1, #0
   3d96c:	e5980008 	ldr	r0, [r8, #8]
   3d970:	e1a07003 	mov	r7, r3
   3d974:	e1a09002 	mov	r9, r2
   3d978:	d3a00000 	movle	r0, #0
   3d97c:	da000000 	ble	3d984 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x44>
   3d980:	eb000106 	bl	3dda0 <__aeabi_idiv>
   3d984:	e1590000 	cmp	r9, r0
   3d988:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d98c:	e5981018 	ldr	r1, [r8, #24]
   3d990:	e5980010 	ldr	r0, [r8, #16]
   3d994:	e3510000 	cmp	r1, #0
   3d998:	d3a00000 	movle	r0, #0
   3d99c:	da000000 	ble	3d9a4 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x64>
   3d9a0:	eb0000fe 	bl	3dda0 <__aeabi_idiv>
   3d9a4:	e1570000 	cmp	r7, r0
   3d9a8:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d9ac:	e7d5300a 	ldrb	r3, [r5, sl]
   3d9b0:	e3530000 	cmp	r3, #0
   3d9b4:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d9b8:	e3a0cf8f 	mov	ip, #572	; 0x23c
   3d9bc:	e02c569c 	mla	ip, ip, r6, r5
   3d9c0:	e59c1014 	ldr	r1, [ip, #20]
   3d9c4:	e59c3018 	ldr	r3, [ip, #24]
   3d9c8:	e0010991 	mul	r1, r1, r9
   3d9cc:	e0020793 	mul	r2, r3, r7
   3d9d0:	e598e004 	ldr	lr, [r8, #4]
   3d9d4:	e59c601c 	ldr	r6, [ip, #28]
   3d9d8:	e59c0020 	ldr	r0, [ip, #32]
   3d9dc:	e021e196 	mla	r1, r6, r1, lr
   3d9e0:	e59ce00c 	ldr	lr, [ip, #12]
   3d9e4:	e3530000 	cmp	r3, #0
   3d9e8:	e022e290 	mla	r2, r0, r2, lr
   3d9ec:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3d9f0:	e5956b40 	ldr	r6, [r5, #2880]	; 0xb40
   3d9f4:	e0221293 	mla	r2, r3, r2, r1
   3d9f8:	e0866002 	add	r6, r6, r2
   3d9fc:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3da00:	e3a08000 	mov	r8, #0
   3da04:	e3500000 	cmp	r0, #0
   3da08:	da00001a 	ble	3da78 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x138>
   3da0c:	e3a07000 	mov	r7, #0
   3da10:	e59c2014 	ldr	r2, [ip, #20]
   3da14:	e3520000 	cmp	r2, #0
   3da18:	da000011 	ble	3da64 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x124>
   3da1c:	e1a02006 	mov	r2, r6
   3da20:	e3a0e000 	mov	lr, #0
   3da24:	e59c301c 	ldr	r3, [ip, #28]
   3da28:	e3530000 	cmp	r3, #0
   3da2c:	da000007 	ble	3da50 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0x110>
   3da30:	e1a03004 	mov	r3, r4
   3da34:	e4d21001 	ldrb	r1, [r2], #1
   3da38:	e4c31001 	strb	r1, [r3], #1
   3da3c:	e59c001c 	ldr	r0, [ip, #28]
   3da40:	e0431004 	sub	r1, r3, r4
   3da44:	e1500001 	cmp	r0, r1
   3da48:	cafffff9 	bgt	3da34 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xf4>
   3da4c:	e1a04003 	mov	r4, r3
   3da50:	e59c3014 	ldr	r3, [ip, #20]
   3da54:	e28ee001 	add	lr, lr, #1
   3da58:	e153000e 	cmp	r3, lr
   3da5c:	cafffff0 	bgt	3da24 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xe4>
   3da60:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3da64:	e59c2020 	ldr	r2, [ip, #32]
   3da68:	e2877001 	add	r7, r7, #1
   3da6c:	e1520007 	cmp	r2, r7
   3da70:	e0866003 	add	r6, r6, r3
   3da74:	caffffe5 	bgt	3da10 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xd0>
   3da78:	e59c2018 	ldr	r2, [ip, #24]
   3da7c:	e2888001 	add	r8, r8, #1
   3da80:	e1520008 	cmp	r2, r8
   3da84:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3da88:	e59c0020 	ldr	r0, [ip, #32]
   3da8c:	eaffffdc 	b	3da04 <DisplayFX::screenReadCell(int, int, int, unsigned char*)+0xc4>

0003da90 <DisplayFX::cursorRestore()>:
   3da90:	e3a03f8f 	mov	r3, #572	; 0x23c
   3da94:	e5901b48 	ldr	r1, [r0, #2888]	; 0xb48
   3da98:	e92d4010 	push	{r4, lr}
   3da9c:	e0030193 	mul	r3, r3, r1
   3daa0:	e7d02003 	ldrb	r2, [r0, r3]
   3daa4:	e24dd008 	sub	sp, sp, #8
   3daa8:	e3520000 	cmp	r2, #0
   3daac:	e0804003 	add	r4, r0, r3
   3dab0:	0a000005 	beq	3dacc <DisplayFX::cursorRestore()+0x3c>
   3dab4:	e283c039 	add	ip, r3, #57	; 0x39
   3dab8:	e080c00c 	add	ip, r0, ip
   3dabc:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3dac0:	e5942034 	ldr	r2, [r4, #52]	; 0x34
   3dac4:	e58dc000 	str	ip, [sp]
   3dac8:	ebffff9c 	bl	3d940 <DisplayFX::screenReadCell(int, int, int, unsigned char*)>
   3dacc:	e28dd008 	add	sp, sp, #8
   3dad0:	e8bd8010 	pop	{r4, pc}

0003dad4 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)>:
   3dad4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3dad8:	e3510004 	cmp	r1, #4
   3dadc:	e59d4020 	ldr	r4, [sp, #32]
   3dae0:	88bd87f0 	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dae4:	e3a0af8f 	mov	sl, #572	; 0x23c
   3dae8:	e00a019a 	mul	sl, sl, r1
   3daec:	e080800a 	add	r8, r0, sl
   3daf0:	e1a06001 	mov	r6, r1
   3daf4:	e5981014 	ldr	r1, [r8, #20]
   3daf8:	e1a05000 	mov	r5, r0
   3dafc:	e3510000 	cmp	r1, #0
   3db00:	e5980008 	ldr	r0, [r8, #8]
   3db04:	e1a07003 	mov	r7, r3
   3db08:	e1a09002 	mov	r9, r2
   3db0c:	d3a00000 	movle	r0, #0
   3db10:	da000000 	ble	3db18 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x44>
   3db14:	eb0000a1 	bl	3dda0 <__aeabi_idiv>
   3db18:	e1590000 	cmp	r9, r0
   3db1c:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   3db20:	e5981018 	ldr	r1, [r8, #24]
   3db24:	e5980010 	ldr	r0, [r8, #16]
   3db28:	e3510000 	cmp	r1, #0
   3db2c:	d3a00000 	movle	r0, #0
   3db30:	da000000 	ble	3db38 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x64>
   3db34:	eb000099 	bl	3dda0 <__aeabi_idiv>
   3db38:	e1570000 	cmp	r7, r0
   3db3c:	a8bd87f0 	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   3db40:	e7d5300a 	ldrb	r3, [r5, sl]
   3db44:	e3530000 	cmp	r3, #0
   3db48:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3db4c:	e3a00f8f 	mov	r0, #572	; 0x23c
   3db50:	e0205690 	mla	r0, r0, r6, r5
   3db54:	e5901014 	ldr	r1, [r0, #20]
   3db58:	e5903018 	ldr	r3, [r0, #24]
   3db5c:	e0010991 	mul	r1, r1, r9
   3db60:	e0020793 	mul	r2, r3, r7
   3db64:	e598e004 	ldr	lr, [r8, #4]
   3db68:	e590601c 	ldr	r6, [r0, #28]
   3db6c:	e590c020 	ldr	ip, [r0, #32]
   3db70:	e021e196 	mla	r1, r6, r1, lr
   3db74:	e590e00c 	ldr	lr, [r0, #12]
   3db78:	e3530000 	cmp	r3, #0
   3db7c:	e022e29c 	mla	r2, ip, r2, lr
   3db80:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3db84:	e5956b40 	ldr	r6, [r5, #2880]	; 0xb40
   3db88:	e0221293 	mla	r2, r3, r2, r1
   3db8c:	e0866002 	add	r6, r6, r2
   3db90:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3db94:	e3a08000 	mov	r8, #0
   3db98:	e35c0000 	cmp	ip, #0
   3db9c:	da00001a 	ble	3dc0c <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x138>
   3dba0:	e3a07000 	mov	r7, #0
   3dba4:	e5902014 	ldr	r2, [r0, #20]
   3dba8:	e3520000 	cmp	r2, #0
   3dbac:	da000011 	ble	3dbf8 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x124>
   3dbb0:	e1a0c006 	mov	ip, r6
   3dbb4:	e3a0e000 	mov	lr, #0
   3dbb8:	e590301c 	ldr	r3, [r0, #28]
   3dbbc:	e3530000 	cmp	r3, #0
   3dbc0:	da000007 	ble	3dbe4 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0x110>
   3dbc4:	e1a0300c 	mov	r3, ip
   3dbc8:	e4d42001 	ldrb	r2, [r4], #1
   3dbcc:	e4c32001 	strb	r2, [r3], #1
   3dbd0:	e590101c 	ldr	r1, [r0, #28]
   3dbd4:	e043200c 	sub	r2, r3, ip
   3dbd8:	e1510002 	cmp	r1, r2
   3dbdc:	cafffff9 	bgt	3dbc8 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xf4>
   3dbe0:	e1a0c003 	mov	ip, r3
   3dbe4:	e5903014 	ldr	r3, [r0, #20]
   3dbe8:	e28ee001 	add	lr, lr, #1
   3dbec:	e153000e 	cmp	r3, lr
   3dbf0:	cafffff0 	bgt	3dbb8 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xe4>
   3dbf4:	e5953b38 	ldr	r3, [r5, #2872]	; 0xb38
   3dbf8:	e5902020 	ldr	r2, [r0, #32]
   3dbfc:	e2877001 	add	r7, r7, #1
   3dc00:	e1520007 	cmp	r2, r7
   3dc04:	e0866003 	add	r6, r6, r3
   3dc08:	caffffe5 	bgt	3dba4 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xd0>
   3dc0c:	e5902018 	ldr	r2, [r0, #24]
   3dc10:	e2888001 	add	r8, r8, #1
   3dc14:	e1520008 	cmp	r2, r8
   3dc18:	d8bd87f0 	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dc1c:	e590c020 	ldr	ip, [r0, #32]
   3dc20:	eaffffdc 	b	3db98 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)+0xc4>

0003dc24 <DisplayFX::cursorRender()>:
   3dc24:	e92d4030 	push	{r4, r5, lr}
   3dc28:	e3a05f8f 	mov	r5, #572	; 0x23c
   3dc2c:	e5901b48 	ldr	r1, [r0, #2888]	; 0xb48
   3dc30:	e24dd00c 	sub	sp, sp, #12
   3dc34:	e0030195 	mul	r3, r5, r1
   3dc38:	e7d0c003 	ldrb	ip, [r0, r3]
   3dc3c:	e080e003 	add	lr, r0, r3
   3dc40:	e35c0000 	cmp	ip, #0
   3dc44:	0a00000e 	beq	3dc84 <DisplayFX::cursorRender()+0x60>
   3dc48:	e1a04000 	mov	r4, r0
   3dc4c:	e283c039 	add	ip, r3, #57	; 0x39
   3dc50:	e080c00c 	add	ip, r0, ip
   3dc54:	e59e3030 	ldr	r3, [lr, #48]	; 0x30
   3dc58:	e59e2034 	ldr	r2, [lr, #52]	; 0x34
   3dc5c:	e58dc000 	str	ip, [sp]
   3dc60:	ebffff9b 	bl	3dad4 <DisplayFX::screenWriteCell(int, int, int, unsigned char*)>
   3dc64:	e3a0c05f 	mov	ip, #95	; 0x5f
   3dc68:	e5941b48 	ldr	r1, [r4, #2888]	; 0xb48
   3dc6c:	e1a00004 	mov	r0, r4
   3dc70:	e0224195 	mla	r2, r5, r1, r4
   3dc74:	e5923030 	ldr	r3, [r2, #48]	; 0x30
   3dc78:	e5922034 	ldr	r2, [r2, #52]	; 0x34
   3dc7c:	e58dc000 	str	ip, [sp]
   3dc80:	ebfffcff 	bl	3d084 <DisplayFX::windowPut(int, int, int, int)>
   3dc84:	e28dd00c 	add	sp, sp, #12
   3dc88:	e8bd8030 	pop	{r4, r5, pc}

0003dc8c <__aeabi_uidiv>:
   3dc8c:	e2512001 	subs	r2, r1, #1
   3dc90:	012fff1e 	bxeq	lr
   3dc94:	3a000036 	bcc	3dd74 <__aeabi_uidiv+0xe8>
   3dc98:	e1500001 	cmp	r0, r1
   3dc9c:	9a000022 	bls	3dd2c <__aeabi_uidiv+0xa0>
   3dca0:	e1110002 	tst	r1, r2
   3dca4:	0a000023 	beq	3dd38 <__aeabi_uidiv+0xac>
   3dca8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   3dcac:	01a01181 	lsleq	r1, r1, #3
   3dcb0:	03a03008 	moveq	r3, #8
   3dcb4:	13a03001 	movne	r3, #1
   3dcb8:	e3510201 	cmp	r1, #268435456	; 0x10000000
   3dcbc:	31510000 	cmpcc	r1, r0
   3dcc0:	31a01201 	lslcc	r1, r1, #4
   3dcc4:	31a03203 	lslcc	r3, r3, #4
   3dcc8:	3afffffa 	bcc	3dcb8 <__aeabi_uidiv+0x2c>
   3dccc:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   3dcd0:	31510000 	cmpcc	r1, r0
   3dcd4:	31a01081 	lslcc	r1, r1, #1
   3dcd8:	31a03083 	lslcc	r3, r3, #1
   3dcdc:	3afffffa 	bcc	3dccc <__aeabi_uidiv+0x40>
   3dce0:	e3a02000 	mov	r2, #0
   3dce4:	e1500001 	cmp	r0, r1
   3dce8:	20400001 	subcs	r0, r0, r1
   3dcec:	21822003 	orrcs	r2, r2, r3
   3dcf0:	e15000a1 	cmp	r0, r1, lsr #1
   3dcf4:	204000a1 	subcs	r0, r0, r1, lsr #1
   3dcf8:	218220a3 	orrcs	r2, r2, r3, lsr #1
   3dcfc:	e1500121 	cmp	r0, r1, lsr #2
   3dd00:	20400121 	subcs	r0, r0, r1, lsr #2
   3dd04:	21822123 	orrcs	r2, r2, r3, lsr #2
   3dd08:	e15001a1 	cmp	r0, r1, lsr #3
   3dd0c:	204001a1 	subcs	r0, r0, r1, lsr #3
   3dd10:	218221a3 	orrcs	r2, r2, r3, lsr #3
   3dd14:	e3500000 	cmp	r0, #0
   3dd18:	11b03223 	lsrsne	r3, r3, #4
   3dd1c:	11a01221 	lsrne	r1, r1, #4
   3dd20:	1affffef 	bne	3dce4 <__aeabi_uidiv+0x58>
   3dd24:	e1a00002 	mov	r0, r2
   3dd28:	e12fff1e 	bx	lr
   3dd2c:	03a00001 	moveq	r0, #1
   3dd30:	13a00000 	movne	r0, #0
   3dd34:	e12fff1e 	bx	lr
   3dd38:	e3510801 	cmp	r1, #65536	; 0x10000
   3dd3c:	21a01821 	lsrcs	r1, r1, #16
   3dd40:	23a02010 	movcs	r2, #16
   3dd44:	33a02000 	movcc	r2, #0
   3dd48:	e3510c01 	cmp	r1, #256	; 0x100
   3dd4c:	21a01421 	lsrcs	r1, r1, #8
   3dd50:	22822008 	addcs	r2, r2, #8
   3dd54:	e3510010 	cmp	r1, #16
   3dd58:	21a01221 	lsrcs	r1, r1, #4
   3dd5c:	22822004 	addcs	r2, r2, #4
   3dd60:	e3510004 	cmp	r1, #4
   3dd64:	82822003 	addhi	r2, r2, #3
   3dd68:	908220a1 	addls	r2, r2, r1, lsr #1
   3dd6c:	e1a00230 	lsr	r0, r0, r2
   3dd70:	e12fff1e 	bx	lr
   3dd74:	e3500000 	cmp	r0, #0
   3dd78:	13e00000 	mvnne	r0, #0
   3dd7c:	ea000059 	b	3dee8 <__aeabi_idiv0>

0003dd80 <__aeabi_uidivmod>:
   3dd80:	e3510000 	cmp	r1, #0
   3dd84:	0afffffa 	beq	3dd74 <__aeabi_uidiv+0xe8>
   3dd88:	e92d4003 	push	{r0, r1, lr}
   3dd8c:	ebffffbe 	bl	3dc8c <__aeabi_uidiv>
   3dd90:	e8bd4006 	pop	{r1, r2, lr}
   3dd94:	e0030092 	mul	r3, r2, r0
   3dd98:	e0411003 	sub	r1, r1, r3
   3dd9c:	e12fff1e 	bx	lr

0003dda0 <__aeabi_idiv>:
   3dda0:	e3510000 	cmp	r1, #0
   3dda4:	0a000043 	beq	3deb8 <.divsi3_skip_div0_test+0x110>

0003dda8 <.divsi3_skip_div0_test>:
   3dda8:	e020c001 	eor	ip, r0, r1
   3ddac:	42611000 	rsbmi	r1, r1, #0
   3ddb0:	e2512001 	subs	r2, r1, #1
   3ddb4:	0a000027 	beq	3de58 <.divsi3_skip_div0_test+0xb0>
   3ddb8:	e1b03000 	movs	r3, r0
   3ddbc:	42603000 	rsbmi	r3, r0, #0
   3ddc0:	e1530001 	cmp	r3, r1
   3ddc4:	9a000026 	bls	3de64 <.divsi3_skip_div0_test+0xbc>
   3ddc8:	e1110002 	tst	r1, r2
   3ddcc:	0a000028 	beq	3de74 <.divsi3_skip_div0_test+0xcc>
   3ddd0:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   3ddd4:	01a01181 	lsleq	r1, r1, #3
   3ddd8:	03a02008 	moveq	r2, #8
   3dddc:	13a02001 	movne	r2, #1
   3dde0:	e3510201 	cmp	r1, #268435456	; 0x10000000
   3dde4:	31510003 	cmpcc	r1, r3
   3dde8:	31a01201 	lslcc	r1, r1, #4
   3ddec:	31a02202 	lslcc	r2, r2, #4
   3ddf0:	3afffffa 	bcc	3dde0 <.divsi3_skip_div0_test+0x38>
   3ddf4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   3ddf8:	31510003 	cmpcc	r1, r3
   3ddfc:	31a01081 	lslcc	r1, r1, #1
   3de00:	31a02082 	lslcc	r2, r2, #1
   3de04:	3afffffa 	bcc	3ddf4 <.divsi3_skip_div0_test+0x4c>
   3de08:	e3a00000 	mov	r0, #0
   3de0c:	e1530001 	cmp	r3, r1
   3de10:	20433001 	subcs	r3, r3, r1
   3de14:	21800002 	orrcs	r0, r0, r2
   3de18:	e15300a1 	cmp	r3, r1, lsr #1
   3de1c:	204330a1 	subcs	r3, r3, r1, lsr #1
   3de20:	218000a2 	orrcs	r0, r0, r2, lsr #1
   3de24:	e1530121 	cmp	r3, r1, lsr #2
   3de28:	20433121 	subcs	r3, r3, r1, lsr #2
   3de2c:	21800122 	orrcs	r0, r0, r2, lsr #2
   3de30:	e15301a1 	cmp	r3, r1, lsr #3
   3de34:	204331a1 	subcs	r3, r3, r1, lsr #3
   3de38:	218001a2 	orrcs	r0, r0, r2, lsr #3
   3de3c:	e3530000 	cmp	r3, #0
   3de40:	11b02222 	lsrsne	r2, r2, #4
   3de44:	11a01221 	lsrne	r1, r1, #4
   3de48:	1affffef 	bne	3de0c <.divsi3_skip_div0_test+0x64>
   3de4c:	e35c0000 	cmp	ip, #0
   3de50:	42600000 	rsbmi	r0, r0, #0
   3de54:	e12fff1e 	bx	lr
   3de58:	e13c0000 	teq	ip, r0
   3de5c:	42600000 	rsbmi	r0, r0, #0
   3de60:	e12fff1e 	bx	lr
   3de64:	33a00000 	movcc	r0, #0
   3de68:	01a00fcc 	asreq	r0, ip, #31
   3de6c:	03800001 	orreq	r0, r0, #1
   3de70:	e12fff1e 	bx	lr
   3de74:	e3510801 	cmp	r1, #65536	; 0x10000
   3de78:	21a01821 	lsrcs	r1, r1, #16
   3de7c:	23a02010 	movcs	r2, #16
   3de80:	33a02000 	movcc	r2, #0
   3de84:	e3510c01 	cmp	r1, #256	; 0x100
   3de88:	21a01421 	lsrcs	r1, r1, #8
   3de8c:	22822008 	addcs	r2, r2, #8
   3de90:	e3510010 	cmp	r1, #16
   3de94:	21a01221 	lsrcs	r1, r1, #4
   3de98:	22822004 	addcs	r2, r2, #4
   3de9c:	e3510004 	cmp	r1, #4
   3dea0:	82822003 	addhi	r2, r2, #3
   3dea4:	908220a1 	addls	r2, r2, r1, lsr #1
   3dea8:	e35c0000 	cmp	ip, #0
   3deac:	e1a00233 	lsr	r0, r3, r2
   3deb0:	42600000 	rsbmi	r0, r0, #0
   3deb4:	e12fff1e 	bx	lr
   3deb8:	e3500000 	cmp	r0, #0
   3debc:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
   3dec0:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
   3dec4:	ea000007 	b	3dee8 <__aeabi_idiv0>

0003dec8 <__aeabi_idivmod>:
   3dec8:	e3510000 	cmp	r1, #0
   3decc:	0afffff9 	beq	3deb8 <.divsi3_skip_div0_test+0x110>
   3ded0:	e92d4003 	push	{r0, r1, lr}
   3ded4:	ebffffb3 	bl	3dda8 <.divsi3_skip_div0_test>
   3ded8:	e8bd4006 	pop	{r1, r2, lr}
   3dedc:	e0030092 	mul	r3, r2, r0
   3dee0:	e0411003 	sub	r1, r1, r3
   3dee4:	e12fff1e 	bx	lr

0003dee8 <__aeabi_idiv0>:
   3dee8:	e12fff1e 	bx	lr

0003deec <__aeabi_uldivmod>:
   3deec:	e3530000 	cmp	r3, #0
   3def0:	03520000 	cmpeq	r2, #0
   3def4:	1a000004 	bne	3df0c <__aeabi_uldivmod+0x20>
   3def8:	e3510000 	cmp	r1, #0
   3defc:	03500000 	cmpeq	r0, #0
   3df00:	13e01000 	mvnne	r1, #0
   3df04:	13e00000 	mvnne	r0, #0
   3df08:	eafffff6 	b	3dee8 <__aeabi_idiv0>
   3df0c:	e24dd008 	sub	sp, sp, #8
   3df10:	e92d6000 	push	{sp, lr}
   3df14:	eb000003 	bl	3df28 <__udivmoddi4>
   3df18:	e59de004 	ldr	lr, [sp, #4]
   3df1c:	e28dd008 	add	sp, sp, #8
   3df20:	e8bd000c 	pop	{r2, r3}
   3df24:	e12fff1e 	bx	lr

0003df28 <__udivmoddi4>:
   3df28:	e1510003 	cmp	r1, r3
   3df2c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3df30:	01500002 	cmpeq	r0, r2
   3df34:	e1a04000 	mov	r4, r0
   3df38:	e1a05001 	mov	r5, r1
   3df3c:	e59da028 	ldr	sl, [sp, #40]	; 0x28
   3df40:	33a00000 	movcc	r0, #0
   3df44:	33a01000 	movcc	r1, #0
   3df48:	3a00003d 	bcc	3e044 <__udivmoddi4+0x11c>
   3df4c:	e1a00002 	mov	r0, r2
   3df50:	e1a01003 	mov	r1, r3
   3df54:	e1a08002 	mov	r8, r2
   3df58:	e1a09003 	mov	r9, r3
   3df5c:	eb00003c 	bl	3e054 <__clzdi2>
   3df60:	e1a01005 	mov	r1, r5
   3df64:	e1a0b000 	mov	fp, r0
   3df68:	e1a00004 	mov	r0, r4
   3df6c:	eb000038 	bl	3e054 <__clzdi2>
   3df70:	e04bb000 	sub	fp, fp, r0
   3df74:	e24b2020 	sub	r2, fp, #32
   3df78:	e1a07b19 	lsl	r7, r9, fp
   3df7c:	e1877218 	orr	r7, r7, r8, lsl r2
   3df80:	e26bc020 	rsb	ip, fp, #32
   3df84:	e1877c38 	orr	r7, r7, r8, lsr ip
   3df88:	e1550007 	cmp	r5, r7
   3df8c:	e1a06b18 	lsl	r6, r8, fp
   3df90:	01540006 	cmpeq	r4, r6
   3df94:	33a00000 	movcc	r0, #0
   3df98:	33a01000 	movcc	r1, #0
   3df9c:	3a000005 	bcc	3dfb8 <__udivmoddi4+0x90>
   3dfa0:	e3a0e001 	mov	lr, #1
   3dfa4:	e0544006 	subs	r4, r4, r6
   3dfa8:	e1a0121e 	lsl	r1, lr, r2
   3dfac:	e1811c3e 	orr	r1, r1, lr, lsr ip
   3dfb0:	e0c55007 	sbc	r5, r5, r7
   3dfb4:	e1a00b1e 	lsl	r0, lr, fp
   3dfb8:	e35b0000 	cmp	fp, #0
   3dfbc:	0a000020 	beq	3e044 <__udivmoddi4+0x11c>
   3dfc0:	e1b070a7 	lsrs	r7, r7, #1
   3dfc4:	e1a06066 	rrx	r6, r6
   3dfc8:	e1a0e00b 	mov	lr, fp
   3dfcc:	ea000007 	b	3dff0 <__udivmoddi4+0xc8>
   3dfd0:	e0544006 	subs	r4, r4, r6
   3dfd4:	e0c55007 	sbc	r5, r5, r7
   3dfd8:	e0944004 	adds	r4, r4, r4
   3dfdc:	e0a55005 	adc	r5, r5, r5
   3dfe0:	e2944001 	adds	r4, r4, #1
   3dfe4:	e2a55000 	adc	r5, r5, #0
   3dfe8:	e25ee001 	subs	lr, lr, #1
   3dfec:	0a000006 	beq	3e00c <__udivmoddi4+0xe4>
   3dff0:	e1550007 	cmp	r5, r7
   3dff4:	01540006 	cmpeq	r4, r6
   3dff8:	2afffff4 	bcs	3dfd0 <__udivmoddi4+0xa8>
   3dffc:	e0944004 	adds	r4, r4, r4
   3e000:	e0a55005 	adc	r5, r5, r5
   3e004:	e25ee001 	subs	lr, lr, #1
   3e008:	1afffff8 	bne	3dff0 <__udivmoddi4+0xc8>
   3e00c:	e1a0eb34 	lsr	lr, r4, fp
   3e010:	e18eec15 	orr	lr, lr, r5, lsl ip
   3e014:	e18ee235 	orr	lr, lr, r5, lsr r2
   3e018:	e0906004 	adds	r6, r0, r4
   3e01c:	e1a0400e 	mov	r4, lr
   3e020:	e0a17005 	adc	r7, r1, r5
   3e024:	e1a01b35 	lsr	r1, r5, fp
   3e028:	e1a05001 	mov	r5, r1
   3e02c:	e1a01b11 	lsl	r1, r1, fp
   3e030:	e181121e 	orr	r1, r1, lr, lsl r2
   3e034:	e1a00b1e 	lsl	r0, lr, fp
   3e038:	e1811c3e 	orr	r1, r1, lr, lsr ip
   3e03c:	e0560000 	subs	r0, r6, r0
   3e040:	e0c71001 	sbc	r1, r7, r1
   3e044:	e35a0000 	cmp	sl, #0
   3e048:	188a0030 	stmne	sl, {r4, r5}
   3e04c:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e050:	e12fff1e 	bx	lr

0003e054 <__clzdi2>:
   3e054:	e92d4010 	push	{r4, lr}
   3e058:	e3510000 	cmp	r1, #0
   3e05c:	1a000002 	bne	3e06c <__clzdi2+0x18>
   3e060:	eb000005 	bl	3e07c <__clzsi2>
   3e064:	e2800020 	add	r0, r0, #32
   3e068:	ea000001 	b	3e074 <__clzdi2+0x20>
   3e06c:	e1a00001 	mov	r0, r1
   3e070:	eb000001 	bl	3e07c <__clzsi2>
   3e074:	e8bd4010 	pop	{r4, lr}
   3e078:	e12fff1e 	bx	lr

0003e07c <__clzsi2>:
   3e07c:	e3a0101c 	mov	r1, #28
   3e080:	e3500801 	cmp	r0, #65536	; 0x10000
   3e084:	21a00820 	lsrcs	r0, r0, #16
   3e088:	22411010 	subcs	r1, r1, #16
   3e08c:	e3500c01 	cmp	r0, #256	; 0x100
   3e090:	21a00420 	lsrcs	r0, r0, #8
   3e094:	22411008 	subcs	r1, r1, #8
   3e098:	e3500010 	cmp	r0, #16
   3e09c:	21a00220 	lsrcs	r0, r0, #4
   3e0a0:	22411004 	subcs	r1, r1, #4
   3e0a4:	e28f2008 	add	r2, pc, #8
   3e0a8:	e7d20000 	ldrb	r0, [r2, r0]
   3e0ac:	e0800001 	add	r0, r0, r1
   3e0b0:	e12fff1e 	bx	lr
   3e0b4:	02020304 	.word	0x02020304
   3e0b8:	01010101 	.word	0x01010101
	...

0003e0c4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   3e0c4:	e3a01000 	mov	r1, #0
   3e0c8:	e3a02001 	mov	r2, #1
   3e0cc:	e92d4030 	push	{r4, r5, lr}
   3e0d0:	e1a04000 	mov	r4, r0
   3e0d4:	e5903020 	ldr	r3, [r0, #32]
   3e0d8:	e24dd014 	sub	sp, sp, #20
   3e0dc:	e5c32011 	strb	r2, [r3, #17]
   3e0e0:	e5c3100c 	strb	r1, [r3, #12]
   3e0e4:	e5c3100d 	strb	r1, [r3, #13]
   3e0e8:	e5c3100e 	strb	r1, [r3, #14]
   3e0ec:	e5c3100f 	strb	r1, [r3, #15]
   3e0f0:	e5c31010 	strb	r1, [r3, #16]
   3e0f4:	e5c31012 	strb	r1, [r3, #18]
   3e0f8:	e5c31013 	strb	r1, [r3, #19]
   3e0fc:	e28d0008 	add	r0, sp, #8
   3e100:	ebff99df 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3e104:	e59f306c 	ldr	r3, [pc, #108]	; 3e178 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb4>
   3e108:	e5942020 	ldr	r2, [r4, #32]
   3e10c:	e28d0008 	add	r0, sp, #8
   3e110:	e58d3000 	str	r3, [sp]
   3e114:	e59f1060 	ldr	r1, [pc, #96]	; 3e17c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xb8>
   3e118:	e283300c 	add	r3, r3, #12
   3e11c:	ebff99e4 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3e120:	e2505000 	subs	r5, r0, #0
   3e124:	0a000008 	beq	3e14c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x88>
   3e128:	e5942020 	ldr	r2, [r4, #32]
   3e12c:	e5d2300c 	ldrb	r3, [r2, #12]
   3e130:	e5d2000d 	ldrb	r0, [r2, #13]
   3e134:	e5d2100e 	ldrb	r1, [r2, #14]
   3e138:	e1833400 	orr	r3, r3, r0, lsl #8
   3e13c:	e5d2200f 	ldrb	r2, [r2, #15]
   3e140:	e1833801 	orr	r3, r3, r1, lsl #16
   3e144:	e1933c02 	orrs	r3, r3, r2, lsl #24
   3e148:	0a000005 	beq	3e164 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   3e14c:	e3a05000 	mov	r5, #0
   3e150:	e28d0008 	add	r0, sp, #8
   3e154:	ebff99d1 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   3e158:	e1a00005 	mov	r0, r5
   3e15c:	e28dd014 	add	sp, sp, #20
   3e160:	e8bd8030 	pop	{r4, r5, pc}
   3e164:	e28d0008 	add	r0, sp, #8
   3e168:	ebff99cc 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   3e16c:	e1a00005 	mov	r0, r5
   3e170:	e28dd014 	add	sp, sp, #20
   3e174:	e8bd8030 	pop	{r4, r5, pc}
   3e178:	00000408 	.word	0x00000408
   3e17c:	0004800b 	.word	0x0004800b

0003e180 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   3e180:	e92d4030 	push	{r4, r5, lr}
   3e184:	e3510000 	cmp	r1, #0
   3e188:	13520000 	cmpne	r2, #0
   3e18c:	e1a04000 	mov	r4, r0
   3e190:	e3a05000 	mov	r5, #0
   3e194:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   3e198:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
   3e19c:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   3e1a0:	e8840006 	stm	r4, {r1, r2}
   3e1a4:	e5843010 	str	r3, [r4, #16]
   3e1a8:	e584c00c 	str	ip, [r4, #12]
   3e1ac:	e5840008 	str	r0, [r4, #8]
   3e1b0:	e5845014 	str	r5, [r4, #20]
   3e1b4:	e5845018 	str	r5, [r4, #24]
   3e1b8:	e584501c 	str	r5, [r4, #28]
   3e1bc:	e5845020 	str	r5, [r4, #32]
   3e1c0:	1a000011 	bne	3e20c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   3e1c4:	e1a01005 	mov	r1, r5
   3e1c8:	e28d000c 	add	r0, sp, #12
   3e1cc:	ebff99ac 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3e1d0:	e3a03014 	mov	r3, #20
   3e1d4:	e58d5000 	str	r5, [sp]
   3e1d8:	e28d000c 	add	r0, sp, #12
   3e1dc:	e08d2003 	add	r2, sp, r3
   3e1e0:	e59f10c8 	ldr	r1, [pc, #200]	; 3e2b0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x130>
   3e1e4:	ebff99b2 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3e1e8:	e1500005 	cmp	r0, r5
   3e1ec:	1a000026 	bne	3e28c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x10c>
   3e1f0:	e3a02d0a 	mov	r2, #640	; 0x280
   3e1f4:	e3a03e1e 	mov	r3, #480	; 0x1e0
   3e1f8:	e884000c 	stm	r4, {r2, r3}
   3e1fc:	e28d000c 	add	r0, sp, #12
   3e200:	ebff99a6 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   3e204:	e5940008 	ldr	r0, [r4, #8]
   3e208:	e5943010 	ldr	r3, [r4, #16]
   3e20c:	e3500000 	cmp	r0, #0
   3e210:	0a000019 	beq	3e27c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   3e214:	e594200c 	ldr	r2, [r4, #12]
   3e218:	e3520000 	cmp	r2, #0
   3e21c:	0a000016 	beq	3e27c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   3e220:	e3530008 	cmp	r3, #8
   3e224:	8a000006 	bhi	3e244 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc4>
   3e228:	e59f0084 	ldr	r0, [pc, #132]	; 3e2b4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
   3e22c:	ebffb391 	bl	2b078 <operator new[](unsigned int)>
   3e230:	e3a02b01 	mov	r2, #1024	; 0x400
   3e234:	e5840020 	str	r0, [r4, #32]
   3e238:	e3a01000 	mov	r1, #0
   3e23c:	e2800014 	add	r0, r0, #20
   3e240:	ebffaf3b 	bl	29f34 <memset>
   3e244:	e3a02070 	mov	r2, #112	; 0x70
   3e248:	e59f1068 	ldr	r1, [pc, #104]	; 3e2b8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x138>
   3e24c:	e2840024 	add	r0, r4, #36	; 0x24
   3e250:	ebffb1ae 	bl	2a910 <memcpy>
   3e254:	e994000f 	ldmib	r4, {r0, r1, r2, r3}
   3e258:	e5840034 	str	r0, [r4, #52]	; 0x34
   3e25c:	e1a00004 	mov	r0, r4
   3e260:	e594c000 	ldr	ip, [r4]
   3e264:	e5841044 	str	r1, [r4, #68]	; 0x44
   3e268:	e584c030 	str	ip, [r4, #48]	; 0x30
   3e26c:	e5842048 	str	r2, [r4, #72]	; 0x48
   3e270:	e5843058 	str	r3, [r4, #88]	; 0x58
   3e274:	e28dd02c 	add	sp, sp, #44	; 0x2c
   3e278:	e8bd8030 	pop	{r4, r5, pc}
   3e27c:	e8940006 	ldm	r4, {r1, r2}
   3e280:	e5841008 	str	r1, [r4, #8]
   3e284:	e584200c 	str	r2, [r4, #12]
   3e288:	eaffffe4 	b	3e220 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   3e28c:	e59d2020 	ldr	r2, [sp, #32]
   3e290:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   3e294:	e2420d0a 	sub	r0, r2, #640	; 0x280
   3e298:	e2431e1e 	sub	r1, r3, #480	; 0x1e0
   3e29c:	e3510f96 	cmp	r1, #600	; 0x258
   3e2a0:	93500c05 	cmpls	r0, #1280	; 0x500
   3e2a4:	e884000c 	stm	r4, {r2, r3}
   3e2a8:	9affffd3 	bls	3e1fc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
   3e2ac:	eaffffcf 	b	3e1f0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>
   3e2b0:	00040003 	.word	0x00040003
   3e2b4:	00000414 	.word	0x00000414
   3e2b8:	0004c764 	.word	0x0004c764

0003e2bc <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   3e2bc:	e92d4010 	push	{r4, lr}
   3e2c0:	e1a04000 	mov	r4, r0
   3e2c4:	e3a01014 	mov	r1, #20
   3e2c8:	e5900020 	ldr	r0, [r0, #32]
   3e2cc:	ebffb376 	bl	2b0ac <operator delete(void*, unsigned int)>
   3e2d0:	e1a00004 	mov	r0, r4
   3e2d4:	e8bd8010 	pop	{r4, pc}

0003e2d8 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   3e2d8:	e5903010 	ldr	r3, [r0, #16]
   3e2dc:	e3530008 	cmp	r3, #8
   3e2e0:	812fff1e 	bxhi	lr
   3e2e4:	e1a03982 	lsl	r3, r2, #19
   3e2e8:	e1a0c5a2 	lsr	ip, r2, #11
   3e2ec:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   3e2f0:	e183318c 	orr	r3, r3, ip, lsl #3
   3e2f4:	e1a02282 	lsl	r2, r2, #5
   3e2f8:	e5900020 	ldr	r0, [r0, #32]
   3e2fc:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
   3e300:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   3e304:	e1822003 	orr	r2, r2, r3
   3e308:	e2811004 	add	r1, r1, #4
   3e30c:	e0801101 	add	r1, r0, r1, lsl #2
   3e310:	e1a0c422 	lsr	ip, r2, #8
   3e314:	e1a00822 	lsr	r0, r2, #16
   3e318:	e1a03c22 	lsr	r3, r2, #24
   3e31c:	e5c12004 	strb	r2, [r1, #4]
   3e320:	e5c1c005 	strb	ip, [r1, #5]
   3e324:	e5c10006 	strb	r0, [r1, #6]
   3e328:	e5c13007 	strb	r3, [r1, #7]
   3e32c:	e12fff1e 	bx	lr

0003e330 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   3e330:	e5903010 	ldr	r3, [r0, #16]
   3e334:	e3530008 	cmp	r3, #8
   3e338:	812fff1e 	bxhi	lr
   3e33c:	e5903020 	ldr	r3, [r0, #32]
   3e340:	e2811004 	add	r1, r1, #4
   3e344:	e0831101 	add	r1, r3, r1, lsl #2
   3e348:	e1a0c422 	lsr	ip, r2, #8
   3e34c:	e1a00822 	lsr	r0, r2, #16
   3e350:	e1a03c22 	lsr	r3, r2, #24
   3e354:	e5c12004 	strb	r2, [r1, #4]
   3e358:	e5c1c005 	strb	ip, [r1, #5]
   3e35c:	e5c10006 	strb	r0, [r1, #6]
   3e360:	e5c13007 	strb	r3, [r1, #7]
   3e364:	e12fff1e 	bx	lr

0003e368 <CBcmFrameBuffer::Initialize()>:
   3e368:	e92d4030 	push	{r4, r5, lr}
   3e36c:	e1a04000 	mov	r4, r0
   3e370:	e24dd00c 	sub	sp, sp, #12
   3e374:	e3a01000 	mov	r1, #0
   3e378:	e1a0000d 	mov	r0, sp
   3e37c:	ebff9940 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3e380:	e2841024 	add	r1, r4, #36	; 0x24
   3e384:	e1a0000d 	mov	r0, sp
   3e388:	e3a02070 	mov	r2, #112	; 0x70
   3e38c:	ebff9985 	bl	249a8 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   3e390:	e2505000 	subs	r5, r0, #0
   3e394:	0a00001f 	beq	3e418 <CBcmFrameBuffer::Initialize()+0xb0>
   3e398:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   3e39c:	e3530000 	cmp	r3, #0
   3e3a0:	0a00001b 	beq	3e414 <CBcmFrameBuffer::Initialize()+0xac>
   3e3a4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   3e3a8:	e3530000 	cmp	r3, #0
   3e3ac:	0a000018 	beq	3e414 <CBcmFrameBuffer::Initialize()+0xac>
   3e3b0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
   3e3b4:	e3530000 	cmp	r3, #0
   3e3b8:	0a000015 	beq	3e414 <CBcmFrameBuffer::Initialize()+0xac>
   3e3bc:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   3e3c0:	e3530000 	cmp	r3, #0
   3e3c4:	0a000012 	beq	3e414 <CBcmFrameBuffer::Initialize()+0xac>
   3e3c8:	e5943058 	ldr	r3, [r4, #88]	; 0x58
   3e3cc:	e3530000 	cmp	r3, #0
   3e3d0:	0a00000f 	beq	3e414 <CBcmFrameBuffer::Initialize()+0xac>
   3e3d4:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
   3e3d8:	e3530000 	cmp	r3, #0
   3e3dc:	0a00000c 	beq	3e414 <CBcmFrameBuffer::Initialize()+0xac>
   3e3e0:	e5940010 	ldr	r0, [r4, #16]
   3e3e4:	e5941080 	ldr	r1, [r4, #128]	; 0x80
   3e3e8:	e5942090 	ldr	r2, [r4, #144]	; 0x90
   3e3ec:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   3e3f0:	e3500008 	cmp	r0, #8
   3e3f4:	e5843014 	str	r3, [r4, #20]
   3e3f8:	e5841018 	str	r1, [r4, #24]
   3e3fc:	e584201c 	str	r2, [r4, #28]
   3e400:	8a000004 	bhi	3e418 <CBcmFrameBuffer::Initialize()+0xb0>
   3e404:	e1a00004 	mov	r0, r4
   3e408:	ebffff2d 	bl	3e0c4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   3e40c:	e1a05000 	mov	r5, r0
   3e410:	ea000000 	b	3e418 <CBcmFrameBuffer::Initialize()+0xb0>
   3e414:	e1a05003 	mov	r5, r3
   3e418:	e1a0000d 	mov	r0, sp
   3e41c:	ebff991f 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   3e420:	e1a00005 	mov	r0, r5
   3e424:	e28dd00c 	add	sp, sp, #12
   3e428:	e8bd8030 	pop	{r4, r5, pc}

0003e42c <CBcmFrameBuffer::GetWidth() const>:
   3e42c:	e5900000 	ldr	r0, [r0]
   3e430:	e12fff1e 	bx	lr

0003e434 <CBcmFrameBuffer::GetHeight() const>:
   3e434:	e5900004 	ldr	r0, [r0, #4]
   3e438:	e12fff1e 	bx	lr

0003e43c <CBcmFrameBuffer::GetVirtWidth() const>:
   3e43c:	e5900008 	ldr	r0, [r0, #8]
   3e440:	e12fff1e 	bx	lr

0003e444 <CBcmFrameBuffer::GetVirtHeight() const>:
   3e444:	e590000c 	ldr	r0, [r0, #12]
   3e448:	e12fff1e 	bx	lr

0003e44c <CBcmFrameBuffer::GetPitch() const>:
   3e44c:	e590001c 	ldr	r0, [r0, #28]
   3e450:	e12fff1e 	bx	lr

0003e454 <CBcmFrameBuffer::GetDepth() const>:
   3e454:	e5900010 	ldr	r0, [r0, #16]
   3e458:	e12fff1e 	bx	lr

0003e45c <CBcmFrameBuffer::GetBuffer() const>:
   3e45c:	e5900014 	ldr	r0, [r0, #20]
   3e460:	e12fff1e 	bx	lr

0003e464 <CBcmFrameBuffer::GetSize() const>:
   3e464:	e5900018 	ldr	r0, [r0, #24]
   3e468:	e12fff1e 	bx	lr

0003e46c <CBcmFrameBuffer::UpdatePalette()>:
   3e46c:	e5903010 	ldr	r3, [r0, #16]
   3e470:	e3530008 	cmp	r3, #8
   3e474:	9a000001 	bls	3e480 <CBcmFrameBuffer::UpdatePalette()+0x14>
   3e478:	e3a00001 	mov	r0, #1
   3e47c:	e12fff1e 	bx	lr
   3e480:	eaffff0f 	b	3e0c4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

0003e484 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   3e484:	e92d4070 	push	{r4, r5, r6, lr}
   3e488:	e24dd028 	sub	sp, sp, #40	; 0x28
   3e48c:	e1a05001 	mov	r5, r1
   3e490:	e28d000c 	add	r0, sp, #12
   3e494:	e3a01000 	mov	r1, #0
   3e498:	e1a06002 	mov	r6, r2
   3e49c:	ebff98f8 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3e4a0:	e3a03008 	mov	r3, #8
   3e4a4:	e58d3000 	str	r3, [sp]
   3e4a8:	e3a03014 	mov	r3, #20
   3e4ac:	e28d000c 	add	r0, sp, #12
   3e4b0:	e08d2003 	add	r2, sp, r3
   3e4b4:	e59f1040 	ldr	r1, [pc, #64]	; 3e4fc <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x78>
   3e4b8:	e58d5020 	str	r5, [sp, #32]
   3e4bc:	e58d6024 	str	r6, [sp, #36]	; 0x24
   3e4c0:	ebff98fb 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3e4c4:	e2504000 	subs	r4, r0, #0
   3e4c8:	0a000006 	beq	3e4e8 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
   3e4cc:	e59d3020 	ldr	r3, [sp, #32]
   3e4d0:	e1550003 	cmp	r5, r3
   3e4d4:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
   3e4d8:	13a04000 	movne	r4, #0
   3e4dc:	00444006 	subeq	r4, r4, r6
   3e4e0:	016f4f14 	clzeq	r4, r4
   3e4e4:	01a042a4 	lsreq	r4, r4, #5
   3e4e8:	e28d000c 	add	r0, sp, #12
   3e4ec:	ebff98eb 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   3e4f0:	e1a00004 	mov	r0, r4
   3e4f4:	e28dd028 	add	sp, sp, #40	; 0x28
   3e4f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   3e4fc:	00048009 	.word	0x00048009

0003e500 <CBcmFrameBuffer::WaitForVerticalSync()>:
   3e500:	e92d4010 	push	{r4, lr}
   3e504:	e24dd020 	sub	sp, sp, #32
   3e508:	e28d0008 	add	r0, sp, #8
   3e50c:	e3a01000 	mov	r1, #0
   3e510:	ebff98db 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3e514:	e3a03000 	mov	r3, #0
   3e518:	e58d3000 	str	r3, [sp]
   3e51c:	e3a03010 	mov	r3, #16
   3e520:	e59f1020 	ldr	r1, [pc, #32]	; 3e548 <CBcmFrameBuffer::WaitForVerticalSync()+0x48>
   3e524:	e08d2003 	add	r2, sp, r3
   3e528:	e28d0008 	add	r0, sp, #8
   3e52c:	ebff98e0 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3e530:	e1a04000 	mov	r4, r0
   3e534:	e28d0008 	add	r0, sp, #8
   3e538:	ebff98d8 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   3e53c:	e1a00004 	mov	r0, r4
   3e540:	e28dd020 	add	sp, sp, #32
   3e544:	e8bd8010 	pop	{r4, pc}
   3e548:	0004800e 	.word	0x0004800e

0003e54c <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   3e54c:	e92d4010 	push	{r4, lr}
   3e550:	e24dd020 	sub	sp, sp, #32
   3e554:	e1a04001 	mov	r4, r1
   3e558:	e28d0008 	add	r0, sp, #8
   3e55c:	e3a01000 	mov	r1, #0
   3e560:	ebff98c7 	bl	24884 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3e564:	e3a03004 	mov	r3, #4
   3e568:	e58d3000 	str	r3, [sp]
   3e56c:	e3a03010 	mov	r3, #16
   3e570:	e59f1024 	ldr	r1, [pc, #36]	; 3e59c <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)+0x50>
   3e574:	e08d2003 	add	r2, sp, r3
   3e578:	e28d0008 	add	r0, sp, #8
   3e57c:	e58d401c 	str	r4, [sp, #28]
   3e580:	ebff98cb 	bl	248b4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3e584:	e1a04000 	mov	r4, r0
   3e588:	e28d0008 	add	r0, sp, #8
   3e58c:	ebff98c3 	bl	248a0 <CBcmPropertyTags::~CBcmPropertyTags()>
   3e590:	e1a00004 	mov	r0, r4
   3e594:	e28dd020 	add	sp, sp, #32
   3e598:	e8bd8010 	pop	{r4, pc}
   3e59c:	0004800f 	.word	0x0004800f

0003e5a0 <convModeToVal>:
   3e5a0:	e2400001 	sub	r0, r0, #1
   3e5a4:	e6ef0070 	uxtb	r0, r0
   3e5a8:	e3500008 	cmp	r0, #8
   3e5ac:	959f3008 	ldrls	r3, [pc, #8]	; 3e5bc <convModeToVal+0x1c>
   3e5b0:	97d30000 	ldrbls	r0, [r3, r0]
   3e5b4:	83a00000 	movhi	r0, #0
   3e5b8:	e12fff1e 	bx	lr
   3e5bc:	00047e54 	.word	0x00047e54

0003e5c0 <pinMode>:
   3e5c0:	e3e03009 	mvn	r3, #9
   3e5c4:	e3a0c007 	mov	ip, #7
   3e5c8:	e59f20e0 	ldr	r2, [pc, #224]	; 3e6b0 <pinMode+0xf0>
   3e5cc:	e92d4070 	push	{r4, r5, r6, lr}
   3e5d0:	e0824092 	umull	r4, r2, r2, r0
   3e5d4:	e1a021a2 	lsr	r2, r2, #3
   3e5d8:	e0230293 	mla	r3, r3, r2, r0
   3e5dc:	e59fe0d0 	ldr	lr, [pc, #208]	; 3e6b4 <pinMode+0xf4>
   3e5e0:	e2822302 	add	r2, r2, #134217728	; 0x8000000
   3e5e4:	e0c4e39e 	smull	lr, r4, lr, r3
   3e5e8:	e1a0efc3 	asr	lr, r3, #31
   3e5ec:	e06ee144 	rsb	lr, lr, r4, asr #2
   3e5f0:	e08ee10e 	add	lr, lr, lr, lsl #2
   3e5f4:	e2822702 	add	r2, r2, #524288	; 0x80000
   3e5f8:	e043308e 	sub	r3, r3, lr, lsl #1
   3e5fc:	e2411001 	sub	r1, r1, #1
   3e600:	e1a02102 	lsl	r2, r2, #2
   3e604:	e6ef1071 	uxtb	r1, r1
   3e608:	e0833083 	add	r3, r3, r3, lsl #1
   3e60c:	e592e000 	ldr	lr, [r2]
   3e610:	e6ef3073 	uxtb	r3, r3
   3e614:	e3510008 	cmp	r1, #8
   3e618:	e1cec31c 	bic	ip, lr, ip, lsl r3
   3e61c:	8a000017 	bhi	3e680 <pinMode+0xc0>
   3e620:	e59fe090 	ldr	lr, [pc, #144]	; 3e6b8 <pinMode+0xf8>
   3e624:	e7de1001 	ldrb	r1, [lr, r1]
   3e628:	e201e00f 	and	lr, r1, #15
   3e62c:	e18cc31e 	orr	ip, ip, lr, lsl r3
   3e630:	e31100f0 	tst	r1, #240	; 0xf0
   3e634:	e582c000 	str	ip, [r2]
   3e638:	08bd8070 	popeq	{r4, r5, r6, pc}
   3e63c:	e1a04000 	mov	r4, r0
   3e640:	e59f5074 	ldr	r5, [pc, #116]	; 3e6bc <pinMode+0xfc>
   3e644:	e1a01241 	asr	r1, r1, #4
   3e648:	e5851094 	str	r1, [r5, #148]	; 0x94
   3e64c:	e3a00096 	mov	r0, #150	; 0x96
   3e650:	ebffb832 	bl	2c720 <DelayLoop>
   3e654:	e354001f 	cmp	r4, #31
   3e658:	ca00000a 	bgt	3e688 <pinMode+0xc8>
   3e65c:	e3a00001 	mov	r0, #1
   3e660:	e1a00410 	lsl	r0, r0, r4
   3e664:	e5850098 	str	r0, [r5, #152]	; 0x98
   3e668:	e3a00096 	mov	r0, #150	; 0x96
   3e66c:	ebffb82b 	bl	2c720 <DelayLoop>
   3e670:	e3a03000 	mov	r3, #0
   3e674:	e5853094 	str	r3, [r5, #148]	; 0x94
   3e678:	e5853098 	str	r3, [r5, #152]	; 0x98
   3e67c:	e8bd8070 	pop	{r4, r5, r6, pc}
   3e680:	e582c000 	str	ip, [r2]
   3e684:	e8bd8070 	pop	{r4, r5, r6, pc}
   3e688:	e3a03001 	mov	r3, #1
   3e68c:	e2440020 	sub	r0, r4, #32
   3e690:	e1a00013 	lsl	r0, r3, r0
   3e694:	e585009c 	str	r0, [r5, #156]	; 0x9c
   3e698:	e3a00096 	mov	r0, #150	; 0x96
   3e69c:	ebffb81f 	bl	2c720 <DelayLoop>
   3e6a0:	e3a03000 	mov	r3, #0
   3e6a4:	e5853094 	str	r3, [r5, #148]	; 0x94
   3e6a8:	e585309c 	str	r3, [r5, #156]	; 0x9c
   3e6ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   3e6b0:	cccccccd 	.word	0xcccccccd
   3e6b4:	66666667 	.word	0x66666667
   3e6b8:	00047e54 	.word	0x00047e54
   3e6bc:	20200000 	.word	0x20200000

0003e6c0 <digitalWrite>:
   3e6c0:	e3510000 	cmp	r1, #0
   3e6c4:	e3a03001 	mov	r3, #1
   3e6c8:	0a000008 	beq	3e6f0 <digitalWrite+0x30>
   3e6cc:	e350001f 	cmp	r0, #31
   3e6d0:	c2400020 	subgt	r0, r0, #32
   3e6d4:	d59f2038 	ldrle	r2, [pc, #56]	; 3e714 <digitalWrite+0x54>
   3e6d8:	c59f2034 	ldrgt	r2, [pc, #52]	; 3e714 <digitalWrite+0x54>
   3e6dc:	d1a00013 	lslle	r0, r3, r0
   3e6e0:	c1a00013 	lslgt	r0, r3, r0
   3e6e4:	d582001c 	strle	r0, [r2, #28]
   3e6e8:	c5820020 	strgt	r0, [r2, #32]
   3e6ec:	e12fff1e 	bx	lr
   3e6f0:	e350001f 	cmp	r0, #31
   3e6f4:	c2400020 	subgt	r0, r0, #32
   3e6f8:	d59f2014 	ldrle	r2, [pc, #20]	; 3e714 <digitalWrite+0x54>
   3e6fc:	c59f2010 	ldrgt	r2, [pc, #16]	; 3e714 <digitalWrite+0x54>
   3e700:	d1a00013 	lslle	r0, r3, r0
   3e704:	c1a00013 	lslgt	r0, r3, r0
   3e708:	d5820028 	strle	r0, [r2, #40]	; 0x28
   3e70c:	c582002c 	strgt	r0, [r2, #44]	; 0x2c
   3e710:	e12fff1e 	bx	lr
   3e714:	20200000 	.word	0x20200000

0003e718 <digitalRead>:
   3e718:	e350001f 	cmp	r0, #31
   3e71c:	d59f301c 	ldrle	r3, [pc, #28]	; 3e740 <digitalRead+0x28>
   3e720:	c59f2018 	ldrgt	r2, [pc, #24]	; 3e740 <digitalRead+0x28>
   3e724:	c2403020 	subgt	r3, r0, #32
   3e728:	d5933034 	ldrle	r3, [r3, #52]	; 0x34
   3e72c:	c5920038 	ldrgt	r0, [r2, #56]	; 0x38
   3e730:	d1a00033 	lsrle	r0, r3, r0
   3e734:	c1a00330 	lsrgt	r0, r0, r3
   3e738:	e2000001 	and	r0, r0, #1
   3e73c:	e12fff1e 	bx	lr
   3e740:	20200000 	.word	0x20200000

0003e744 <lowlev_enable_irq>:
   3e744:	e10f0000 	mrs	r0, CPSR
   3e748:	e3c00080 	bic	r0, r0, #128	; 0x80
   3e74c:	e121f000 	msr	CPSR_c, r0
   3e750:	e12fff1e 	bx	lr

0003e754 <lowlev_disable_irq>:
   3e754:	f10c0080 	cpsid	i
   3e758:	e1a0f00e 	mov	pc, lr

0003e75c <lowlev_enable_fiq>:
   3e75c:	e10f0000 	mrs	r0, CPSR
   3e760:	e3c00040 	bic	r0, r0, #64	; 0x40
   3e764:	e121f000 	msr	CPSR_c, r0
   3e768:	e12fff1e 	bx	lr

0003e76c <lowlev_disable_fiq>:
   3e76c:	f10c0040 	cpsid	f
   3e770:	e1a0f00e 	mov	pc, lr

0003e774 <lowlev_cycleDelay>:
   3e774:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
   3e778:	e1a000c0 	asr	r0, r0, #1

0003e77c <bloop>:
   3e77c:	e2500001 	subs	r0, r0, #1
   3e780:	1afffffd 	bne	3e77c <bloop>
   3e784:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
   3e788:	e12fff1e 	bx	lr

0003e78c <membarrier>:
   3e78c:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
   3e790:	e3a03000 	mov	r3, #0
   3e794:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   3e798:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   3e79c:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
   3e7a0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   3e7a4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3e7a8:	e12fff1e 	bx	lr

0003e7ac <disable_mmu_and_cache>:
   3e7ac:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
   3e7b0:	e3c00a01 	bic	r0, r0, #4096	; 0x1000
   3e7b4:	e3c00004 	bic	r0, r0, #4
   3e7b8:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
   3e7bc:	e92d040f 	push	{r0, r1, r2, r3, sl}
   3e7c0:	e3a03000 	mov	r3, #0
   3e7c4:	ee073f16 	mcr	15, 0, r3, cr7, cr6, {0}
   3e7c8:	ee073f1a 	mcr	15, 0, r3, cr7, cr10, {0}
   3e7cc:	ee073f1e 	mcr	15, 0, r3, cr7, cr14, {0}
   3e7d0:	ee073f9a 	mcr	15, 0, r3, cr7, cr10, {4}
   3e7d4:	ee073fba 	mcr	15, 0, r3, cr7, cr10, {5}
   3e7d8:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   3e7dc:	e3a00005 	mov	r0, #5
   3e7e0:	e1c33000 	bic	r3, r3, r0
   3e7e4:	e3a00003 	mov	r0, #3
   3e7e8:	e1c33580 	bic	r3, r3, r0, lsl #11
   3e7ec:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   3e7f0:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
   3e7f4:	e12fff1e 	bx	lr

0003e7f8 <blinkCE0>:
   3e7f8:	e92d040f 	push	{r0, r1, r2, r3, sl}
   3e7fc:	e59f0108 	ldr	r0, [pc, #264]	; 3e90c <memcopyfast+0x5c>
   3e800:	e3a01401 	mov	r1, #16777216	; 0x1000000
   3e804:	e5801000 	str	r1, [r0]
   3e808:	e3a01c01 	mov	r1, #256	; 0x100
   3e80c:	e3a02c01 	mov	r2, #256	; 0x100
   3e810:	e580101c 	str	r1, [r0, #28]
   3e814:	e3a0a000 	mov	sl, #0

0003e818 <delay>:
   3e818:	e28aa001 	add	sl, sl, #1
   3e81c:	e15a0002 	cmp	sl, r2
   3e820:	1afffffc 	bne	3e818 <delay>
   3e824:	e5801028 	str	r1, [r0, #40]	; 0x28
   3e828:	e3a0a000 	mov	sl, #0

0003e82c <delay2>:
   3e82c:	e28aa001 	add	sl, sl, #1
   3e830:	e15a0002 	cmp	sl, r2
   3e834:	1afffffc 	bne	3e82c <delay2>
   3e838:	e8bd040f 	pop	{r0, r1, r2, r3, sl}
   3e83c:	e12fff1e 	bx	lr

0003e840 <blinkLEDForever>:
   3e840:	e59f00c4 	ldr	r0, [pc, #196]	; 3e90c <memcopyfast+0x5c>
   3e844:	e3a0260f 	mov	r2, #15728640	; 0xf00000
   3e848:	e3a01602 	mov	r1, #2097152	; 0x200000
   3e84c:	e5801010 	str	r1, [r0, #16]
   3e850:	e3a01902 	mov	r1, #32768	; 0x8000
   3e854:	e5801020 	str	r1, [r0, #32]

0003e858 <loopBlink>:
   3e858:	e5801020 	str	r1, [r0, #32]
   3e85c:	e3a0a000 	mov	sl, #0

0003e860 <delay1a>:
   3e860:	e28aa001 	add	sl, sl, #1
   3e864:	e15a0002 	cmp	sl, r2
   3e868:	1afffffc 	bne	3e860 <delay1a>
   3e86c:	e580102c 	str	r1, [r0, #44]	; 0x2c
   3e870:	e3a0a000 	mov	sl, #0

0003e874 <delay2a>:
   3e874:	e28aa001 	add	sl, sl, #1
   3e878:	e15a0002 	cmp	sl, r2
   3e87c:	1afffffc 	bne	3e874 <delay2a>
   3e880:	eafffff4 	b	3e858 <loopBlink>

0003e884 <lowlev_blockCopyExecRelocatable>:
   3e884:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)

0003e888 <blockCopyExecRelocatableLoop>:
   3e888:	e4d13001 	ldrb	r3, [r1], #1
   3e88c:	e4c03001 	strb	r3, [r0], #1
   3e890:	e2522001 	subs	r2, r2, #1
   3e894:	aafffffb 	bge	3e888 <blockCopyExecRelocatableLoop>
   3e898:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   3e89c:	e12fff10 	bx	r0

0003e8a0 <lowlev_blockCopyExecRelocatableLen>:
   3e8a0:	0000001c 	.word	0x0000001c

0003e8a4 <lowlev_goto>:
   3e8a4:	e12fff10 	bx	r0

0003e8a8 <lowlev_store_abs8>:
   3e8a8:	e5c01000 	strb	r1, [r0]
   3e8ac:	e12fff1e 	bx	lr

0003e8b0 <memcopyfast>:
   3e8b0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   3e8b4:	e352007f 	cmp	r2, #127	; 0x7f
   3e8b8:	9a00000b 	bls	3e8ec <memcopyfast+0x3c>
   3e8bc:	e3110003 	tst	r1, #3
   3e8c0:	1a000009 	bne	3e8ec <memcopyfast+0x3c>
   3e8c4:	e3100003 	tst	r0, #3
   3e8c8:	1a000007 	bne	3e8ec <memcopyfast+0x3c>
   3e8cc:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   3e8d0:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   3e8d4:	e2422020 	sub	r2, r2, #32
   3e8d8:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   3e8dc:	f5d1f040 	pld	[r1, #64]	; 0x40
   3e8e0:	e352001f 	cmp	r2, #31
   3e8e4:	8afffff9 	bhi	3e8d0 <memcopyfast+0x20>
   3e8e8:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   3e8ec:	e3520000 	cmp	r2, #0
   3e8f0:	0a000003 	beq	3e904 <memcopyfast+0x54>
   3e8f4:	e4d13001 	ldrb	r3, [r1], #1
   3e8f8:	e2522001 	subs	r2, r2, #1
   3e8fc:	e4c03001 	strb	r3, [r0], #1
   3e900:	1afffffb 	bne	3e8f4 <memcopyfast+0x44>
   3e904:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   3e908:	e12fff1e 	bx	lr
   3e90c:	20200000 	.word	0x20200000

0003e910 <KeyConversion::getNumTypes()>:
   3e910:	e3a00006 	mov	r0, #6
   3e914:	e12fff1e 	bx	lr

0003e918 <memTestDataBus(BusAccess&, unsigned long)>:
   3e918:	e3a03001 	mov	r3, #1
   3e91c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3e920:	e24dd010 	sub	sp, sp, #16
   3e924:	e28d8010 	add	r8, sp, #16
   3e928:	e1a07000 	mov	r7, r0
   3e92c:	e1a06001 	mov	r6, r1
   3e930:	e1a05003 	mov	r5, r3
   3e934:	e3a04000 	mov	r4, #0
   3e938:	e5683002 	strb	r3, [r8, #-2]!
   3e93c:	ea000003 	b	3e950 <memTestDataBus(BusAccess&, unsigned long)+0x38>
   3e940:	e6ef0072 	uxtb	r0, r2
   3e944:	e3500000 	cmp	r0, #0
   3e948:	e5cd000e 	strb	r0, [sp, #14]
   3e94c:	0a000010 	beq	3e994 <memTestDataBus(BusAccess&, unsigned long)+0x7c>
   3e950:	e1a03005 	mov	r3, r5
   3e954:	e1a02008 	mov	r2, r8
   3e958:	e1a01006 	mov	r1, r6
   3e95c:	e58d4000 	str	r4, [sp]
   3e960:	e1a00007 	mov	r0, r7
   3e964:	ebffd37f 	bl	33768 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3e968:	e1a03005 	mov	r3, r5
   3e96c:	e28d200f 	add	r2, sp, #15
   3e970:	e58d4000 	str	r4, [sp]
   3e974:	e1a01006 	mov	r1, r6
   3e978:	e1a00007 	mov	r0, r7
   3e97c:	ebffd3ca 	bl	338ac <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3e980:	e5dd000e 	ldrb	r0, [sp, #14]
   3e984:	e5dd300f 	ldrb	r3, [sp, #15]
   3e988:	e1a02080 	lsl	r2, r0, #1
   3e98c:	e1530000 	cmp	r3, r0
   3e990:	0affffea 	beq	3e940 <memTestDataBus(BusAccess&, unsigned long)+0x28>
   3e994:	e28dd010 	add	sp, sp, #16
   3e998:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0003e99c <memTestAddressBus(BusAccess&, unsigned long, unsigned long)>:
   3e99c:	e3e0c055 	mvn	ip, #85	; 0x55
   3e9a0:	e3a03055 	mov	r3, #85	; 0x55
   3e9a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e9a8:	e2425001 	sub	r5, r2, #1
   3e9ac:	e24dd01c 	sub	sp, sp, #28
   3e9b0:	e2152001 	ands	r2, r5, #1
   3e9b4:	e58d200c 	str	r2, [sp, #12]
   3e9b8:	e5cdc014 	strb	ip, [sp, #20]
   3e9bc:	e5cd3015 	strb	r3, [sp, #21]
   3e9c0:	e1a06000 	mov	r6, r0
   3e9c4:	e1a07001 	mov	r7, r1
   3e9c8:	0a00005a 	beq	3eb38 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x19c>
   3e9cc:	e1a04002 	mov	r4, r2
   3e9d0:	e3a09000 	mov	r9, #0
   3e9d4:	e3a08001 	mov	r8, #1
   3e9d8:	e0871004 	add	r1, r7, r4
   3e9dc:	e58d9000 	str	r9, [sp]
   3e9e0:	e1a03008 	mov	r3, r8
   3e9e4:	e28d2014 	add	r2, sp, #20
   3e9e8:	e1a00006 	mov	r0, r6
   3e9ec:	e1a04084 	lsl	r4, r4, #1
   3e9f0:	ebffd35c 	bl	33768 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3e9f4:	e015a004 	ands	sl, r5, r4
   3e9f8:	1afffff6 	bne	3e9d8 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x3c>
   3e9fc:	e58da000 	str	sl, [sp]
   3ea00:	e28d2015 	add	r2, sp, #21
   3ea04:	e3a03001 	mov	r3, #1
   3ea08:	e1a01007 	mov	r1, r7
   3ea0c:	e1a00006 	mov	r0, r6
   3ea10:	ebffd354 	bl	33768 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3ea14:	e3a0b001 	mov	fp, #1
   3ea18:	e59d400c 	ldr	r4, [sp, #12]
   3ea1c:	ea000001 	b	3ea28 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x8c>
   3ea20:	e0158004 	ands	r8, r5, r4
   3ea24:	0a00000e 	beq	3ea64 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xc8>
   3ea28:	e0879004 	add	r9, r7, r4
   3ea2c:	e1a0300b 	mov	r3, fp
   3ea30:	e28d2017 	add	r2, sp, #23
   3ea34:	e58da000 	str	sl, [sp]
   3ea38:	e1a01009 	mov	r1, r9
   3ea3c:	e1a00006 	mov	r0, r6
   3ea40:	ebffd399 	bl	338ac <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3ea44:	e5dd2017 	ldrb	r2, [sp, #23]
   3ea48:	e5dd3014 	ldrb	r3, [sp, #20]
   3ea4c:	e1a04084 	lsl	r4, r4, #1
   3ea50:	e1520003 	cmp	r2, r3
   3ea54:	0afffff1 	beq	3ea20 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x84>
   3ea58:	e1a00009 	mov	r0, r9
   3ea5c:	e28dd01c 	add	sp, sp, #28
   3ea60:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ea64:	e3a0b001 	mov	fp, #1
   3ea68:	e58d8000 	str	r8, [sp]
   3ea6c:	e3a03001 	mov	r3, #1
   3ea70:	e28d2014 	add	r2, sp, #20
   3ea74:	e1a01007 	mov	r1, r7
   3ea78:	e1a00006 	mov	r0, r6
   3ea7c:	ebffd339 	bl	33768 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3ea80:	e59da00c 	ldr	sl, [sp, #12]
   3ea84:	e087900a 	add	r9, r7, sl
   3ea88:	e1a01009 	mov	r1, r9
   3ea8c:	e1a0300b 	mov	r3, fp
   3ea90:	e28d2015 	add	r2, sp, #21
   3ea94:	e58d8000 	str	r8, [sp]
   3ea98:	e1a00006 	mov	r0, r6
   3ea9c:	ebffd331 	bl	33768 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3eaa0:	e1a0300b 	mov	r3, fp
   3eaa4:	e28d2016 	add	r2, sp, #22
   3eaa8:	e58d8000 	str	r8, [sp]
   3eaac:	e1a01007 	mov	r1, r7
   3eab0:	e1a00006 	mov	r0, r6
   3eab4:	ebffd37c 	bl	338ac <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3eab8:	e5dd2016 	ldrb	r2, [sp, #22]
   3eabc:	e5dd3014 	ldrb	r3, [sp, #20]
   3eac0:	e1520003 	cmp	r2, r3
   3eac4:	1affffe3 	bne	3ea58 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xbc>
   3eac8:	e59d400c 	ldr	r4, [sp, #12]
   3eacc:	ea000001 	b	3ead8 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x13c>
   3ead0:	e0153004 	ands	r3, r5, r4
   3ead4:	0a00000c 	beq	3eb0c <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x170>
   3ead8:	e1a0300b 	mov	r3, fp
   3eadc:	e28d2017 	add	r2, sp, #23
   3eae0:	e0871004 	add	r1, r7, r4
   3eae4:	e58d8000 	str	r8, [sp]
   3eae8:	e1a00006 	mov	r0, r6
   3eaec:	ebffd36e 	bl	338ac <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3eaf0:	e5dd2017 	ldrb	r2, [sp, #23]
   3eaf4:	e5dd3014 	ldrb	r3, [sp, #20]
   3eaf8:	e1520003 	cmp	r2, r3
   3eafc:	1154000a 	cmpne	r4, sl
   3eb00:	e1a04084 	lsl	r4, r4, #1
   3eb04:	0afffff1 	beq	3ead0 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x134>
   3eb08:	eaffffd2 	b	3ea58 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xbc>
   3eb0c:	e58d3000 	str	r3, [sp]
   3eb10:	e1a01009 	mov	r1, r9
   3eb14:	e1a0a08a 	lsl	sl, sl, #1
   3eb18:	e1a0300b 	mov	r3, fp
   3eb1c:	e28d2014 	add	r2, sp, #20
   3eb20:	e1a00006 	mov	r0, r6
   3eb24:	ebffd30f 	bl	33768 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3eb28:	e115000a 	tst	r5, sl
   3eb2c:	1affffd4 	bne	3ea84 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xe8>
   3eb30:	e3a09000 	mov	r9, #0
   3eb34:	eaffffc7 	b	3ea58 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0xbc>
   3eb38:	e59d400c 	ldr	r4, [sp, #12]
   3eb3c:	e28d2015 	add	r2, sp, #21
   3eb40:	e58d4000 	str	r4, [sp]
   3eb44:	e3a03001 	mov	r3, #1
   3eb48:	ebffd306 	bl	33768 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3eb4c:	e58d4000 	str	r4, [sp]
   3eb50:	e1a01007 	mov	r1, r7
   3eb54:	e1a00006 	mov	r0, r6
   3eb58:	e3a03001 	mov	r3, #1
   3eb5c:	e28d2014 	add	r2, sp, #20
   3eb60:	ebffd300 	bl	33768 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3eb64:	eafffff1 	b	3eb30 <memTestAddressBus(BusAccess&, unsigned long, unsigned long)+0x194>

0003eb68 <memTestDevice(BusAccess&, unsigned long, unsigned long)>:
   3eb68:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3eb6c:	e3a04001 	mov	r4, #1
   3eb70:	e24dd014 	sub	sp, sp, #20
   3eb74:	e3520000 	cmp	r2, #0
   3eb78:	e5cd400d 	strb	r4, [sp, #13]
   3eb7c:	0a00004d 	beq	3ecb8 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x150>
   3eb80:	e1a06000 	mov	r6, r0
   3eb84:	e1a07001 	mov	r7, r1
   3eb88:	e1a05001 	mov	r5, r1
   3eb8c:	e3a09000 	mov	r9, #0
   3eb90:	e0828001 	add	r8, r2, r1
   3eb94:	e1a03004 	mov	r3, r4
   3eb98:	e1a01005 	mov	r1, r5
   3eb9c:	e58d9000 	str	r9, [sp]
   3eba0:	e28d200d 	add	r2, sp, #13
   3eba4:	e1a00006 	mov	r0, r6
   3eba8:	ebffd2ee 	bl	33768 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3ebac:	e5dd300d 	ldrb	r3, [sp, #13]
   3ebb0:	e2855001 	add	r5, r5, #1
   3ebb4:	e2833001 	add	r3, r3, #1
   3ebb8:	e1580005 	cmp	r8, r5
   3ebbc:	e5cd300d 	strb	r3, [sp, #13]
   3ebc0:	1afffff3 	bne	3eb94 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x2c>
   3ebc4:	e3a08001 	mov	r8, #1
   3ebc8:	e1a04007 	mov	r4, r7
   3ebcc:	e5cd800d 	strb	r8, [sp, #13]
   3ebd0:	e3a09000 	mov	r9, #0
   3ebd4:	ea00000d 	b	3ec10 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0xa8>
   3ebd8:	e1e0c003 	mvn	ip, r3
   3ebdc:	e1a01004 	mov	r1, r4
   3ebe0:	e1a03008 	mov	r3, r8
   3ebe4:	e58d9000 	str	r9, [sp]
   3ebe8:	e28d200e 	add	r2, sp, #14
   3ebec:	e1a00006 	mov	r0, r6
   3ebf0:	e5cdc00e 	strb	ip, [sp, #14]
   3ebf4:	ebffd2db 	bl	33768 <BusAccess::blockWrite(unsigned long, unsigned char const*, unsigned long, BusAccess::BlockAccessType)>
   3ebf8:	e5dd300d 	ldrb	r3, [sp, #13]
   3ebfc:	e2844001 	add	r4, r4, #1
   3ec00:	e2833001 	add	r3, r3, #1
   3ec04:	e1540005 	cmp	r4, r5
   3ec08:	e5cd300d 	strb	r3, [sp, #13]
   3ec0c:	0a00000c 	beq	3ec44 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0xdc>
   3ec10:	e1a03008 	mov	r3, r8
   3ec14:	e28d200f 	add	r2, sp, #15
   3ec18:	e58d9000 	str	r9, [sp]
   3ec1c:	e1a01004 	mov	r1, r4
   3ec20:	e1a00006 	mov	r0, r6
   3ec24:	ebffd320 	bl	338ac <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3ec28:	e5dd200f 	ldrb	r2, [sp, #15]
   3ec2c:	e5dd300d 	ldrb	r3, [sp, #13]
   3ec30:	e1530002 	cmp	r3, r2
   3ec34:	0affffe7 	beq	3ebd8 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x70>
   3ec38:	e1a00004 	mov	r0, r4
   3ec3c:	e28dd014 	add	sp, sp, #20
   3ec40:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3ec44:	e3a02001 	mov	r2, #1
   3ec48:	e3a05000 	mov	r5, #0
   3ec4c:	e1a03002 	mov	r3, r2
   3ec50:	e5cd200d 	strb	r2, [sp, #13]
   3ec54:	e1a08002 	mov	r8, r2
   3ec58:	ea000006 	b	3ec78 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x110>
   3ec5c:	e5dd300d 	ldrb	r3, [sp, #13]
   3ec60:	e2877001 	add	r7, r7, #1
   3ec64:	e2833001 	add	r3, r3, #1
   3ec68:	e6ef3073 	uxtb	r3, r3
   3ec6c:	e1570004 	cmp	r7, r4
   3ec70:	e5cd300d 	strb	r3, [sp, #13]
   3ec74:	0a00000f 	beq	3ecb8 <memTestDevice(BusAccess&, unsigned long, unsigned long)+0x150>
   3ec78:	e1e0c003 	mvn	ip, r3
   3ec7c:	e28d200f 	add	r2, sp, #15
   3ec80:	e1a03008 	mov	r3, r8
   3ec84:	e58d5000 	str	r5, [sp]
   3ec88:	e1a01007 	mov	r1, r7
   3ec8c:	e1a00006 	mov	r0, r6
   3ec90:	e5cdc00e 	strb	ip, [sp, #14]
   3ec94:	ebffd304 	bl	338ac <BusAccess::blockRead(unsigned long, unsigned char*, unsigned long, BusAccess::BlockAccessType)>
   3ec98:	e5dd200f 	ldrb	r2, [sp, #15]
   3ec9c:	e5dd300e 	ldrb	r3, [sp, #14]
   3eca0:	e1520003 	cmp	r2, r3
   3eca4:	0affffec 	beq	3ec5c <memTestDevice(BusAccess&, unsigned long, unsigned long)+0xf4>
   3eca8:	e1a04007 	mov	r4, r7
   3ecac:	e1a00004 	mov	r0, r4
   3ecb0:	e28dd014 	add	sp, sp, #20
   3ecb4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3ecb8:	e3a04000 	mov	r4, #0
   3ecbc:	e1a00004 	mov	r0, r4
   3ecc0:	e28dd014 	add	sp, sp, #20
   3ecc4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
